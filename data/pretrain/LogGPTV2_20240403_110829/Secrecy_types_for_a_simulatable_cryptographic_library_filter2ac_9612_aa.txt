title:Secrecy types for a simulatable cryptographic library
author:Peeter Laud
Secrecy Types for a Simulatable Cryptographic Library
Dept. of Mathematics and Computer Science, Tartu University
J. Liivi 2, 50409 Tartu, Estonia
Peeter Laud
PI:EMAIL
ABSTRACT
We present a type system for checking secrecy of messages han-
dled by protocols that use the Backes-Pﬁtzmann-Waidner library
for cryptographic operations. A secure realization of this library
exists, therefore we obtain for the ﬁrst time a cryptographically
sound analysis for a full language for expressing protocols, par-
ticularly handling symmetric encryption and unbounded number of
sessions. The language is similar to the spi-calculus, but has a com-
pletely deterministic semantics. The type system is similar to the
Abadi-Blanchet type system for asymmetric communication.
Categories and Subject Descriptors: C.2.2 [Network protocols]:
Protocol veriﬁcation; D.3.3 [Language Constructs and Features]:
Concurrent programming structures, Coroutines
General Terms: Security, Veriﬁcation.
Keywords: Simulatability, type systems.
1.
INTRODUCTION
We consider the problem of analyzing the security of crypto-
graphic protocols. An ideal methodology for protocol analysis is
preferably amenable to automation, and its outcome should also be
easily veriﬁable by a third party.
Over the years, two fruitful approaches have evolved to model
the behavior of the protocols. One of them is the Dolev-Yao model
[22] where the cryptographic messages are interpreted as terms in a
certain free algebra; the possible operations on these messages are
deﬁned by term rewriting. For such kinds of semantics a rich body
of work on automatic protocol analysis exists, see [39] for a survey.
The other kind of semantics is based on computational complexity
theory. There the messages are modeled as bit-strings and the at-
tacker is allowed to perform arbitrary operations on them, as long
as its consumption of resources, particularly the running time re-
mains reasonable (polynomial in the length of secrets); Yao [47]
was one of the ﬁrst to explore this direction. It is closer to the real-
world execution of the protocol and a proof in that model is a better
guarantee for security than a proof in the Dolev-Yao model. Un-
fortunately, the proofs of protocol properties in the computational
model tend to be more complex and there has not been much work
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’05, November 7–11, 2005, Alexandria, Virginia, USA.
Copyright 2005 ACM 1-59593-226-7/05/0011 ...$5.00.
on automating these proofs. Recently, the situation has begun to
improve, though.
In this paper we deﬁne a language for cryptographic protocols,
similar to the spi-calculus [4] and give it a semantics using the com-
putational model. We then propose a type system for our language
and show that if a protocol types then it preserves the secrecy of
messages given to it by its users. Our semantics relies on the simu-
latable cryptographic library [12, 11, 9] by Backes, Pﬁtzmann and
Waidner. The library comes with two semantics, one of them re-
sembles, although is not quite the same as the Dolev-Yao model.
The other semantics — the “real implementation” of its function-
ality” — is in the computational model. A theorem states that any
security property satisﬁed by the formal semantics is also satisﬁed
by the computational one. Hence the proofs may use the Dolev-
Yao-like semantics. As far as we know, this type system is the ﬁrst
case where an analysis method amenable to automation is used to
analyse the BPW library.
The expressiveness of our calculus is similar to the spi-calculus;
it contains nonce and key generations, symmetric and asymmet-
ric encryptions and decryptions, equality checks, communication
primitives, unbounded parallelism. Communication occurs between
protocol participants and also between a participant and its user.
Here the participant denotes a Turing machine that executes the
functionality directly related to the protocol. A protocol user is a
Turing machine or a set of Turing machines that uses the proto-
col functionality, most often through API calls, to achieve its own
ends. In existing protocol analyses, where some process calculus is
involved, there are usually no speciﬁc methods for communicating
with the user. Instead, it is stated that some variables have been
assigned values before the protocol is started, and giving received
values back to the user is not handled at all. We have chosen to not
adopt this convention here (although it would have been possible).
It would not have ﬁt well into the simulatability framework — we
would not have obtained the full beneﬁt from composability.
The semantics of our calculus is entirely deterministic, as pre-
scribed by the simulatability framework. In contrast with the spi-
calculus, the scheduling of threads of participants is explicit, and
it uniquely determines the thread that handles each incoming mes-
sages. See Sec. 4 for details. Our type system is inspired by the
type system of Abadi and Blanchet [2] (they work in the Dolev-
Yao model). In this type system, the type of a variable reﬂects its
intended use. Values with a ‘public’ type may be passed to the at-
tacker. Encryption keys have a ‘key’ type parameterized by the type
of plaintexts that may be encrypted. Communication channels sim-
ilarly have types parameterized by the type of their messages. The
type system can also indicate that two variables cannot be equal,
when they have nonintersecting types.
In this paper we ﬁrst review the related work in Sec. 2 and give
an overview of the BPW library in Sec. 3. As next we present our
process calculus and give its semantics and a deﬁnition for conﬁ-
dentiality of inputs in Sec. 4. The security deﬁnition is not new,
it has been proposed by Backes and Pﬁtzmann [10]. In Sec. 5 we
present the type system and in Sec. 6 give a sketch of the correct-
ness proof. The subject reduction theorem that we employ may be
of independent interest.
The full paper [34] gives extra details for the material presented
in Sections 4–6.
2. RELATED WORK
Reconciling the two main approaches for modeling and analyz-
ing cryptographic protocols has received quite a lot of attention
recently. This work can be characterized as more ambitious than
mere provably correct analysis of cryptographic protocols in the
computational model. Instead, one aims to show that the proper-
ties (from some large and interesting enough class) of the protocol
in the Dolev-Yao model carry directly over to the computational
model, at least if the protocol satisﬁes some extra constraints.
This line of work started with the relating of formal and com-
putational symmetric encryption by Abadi and Rogaway [6]; their
work considered only passive adversaries. The relationship of for-
mal and computational encryption under attacks from passive ad-
versaries was further investigated by Abadi and J¨urjens [5] and by
Micciancio and Warinschi [41]. Micciancio and Panjwani [40] con-
sidered the case where the adversary adaptively chose the formal
messages to be computationally interpreted, the necessary security
of the encryption scheme still corresponded to security against pas-
sive adversaries. In contrast, we have given a static program anal-
ysis [32] and a type system [35] that work directly in the computa-
tional model, handling programs containing symmetric encryption.
Reconciliation approaches taking into account also active ad-
versaries have mostly considered asymmetric primitives and/or in-
tegrity properties (i.e. properties of execution traces). Guttman et
al. [28] were one of the ﬁrst to consider authentication in the pres-
ence of active adversaries in two models. Their approach was dif-
ferent from the later ones in that the security deﬁnitions in the com-
putational model were not complexity-theoretical, but information-
theoretical, so the obtained security guarantee was stronger than
usual. The cost for this added strength was the length of the shared
secrets. They also pioneered the technique of translating a protocol
run in the computational model, after it had ﬁnished, to a run in
the formal model and showing that if that run would not have been
possible in the formal model then something which should happen
only with a negligible probability must have happened in the run
in the computational model. The approach was developed further
by Micciancio and Warinschi [42] who related the formal and com-
putational traces for protocols using symmetric encryption. Cortier
and Warinschi [21] show that there exist automatic analyses for the
formal model that carry directly over to the computational model.
Janvier et al. [30] extend [42] by allowing secret keys to be trans-
ferred (in a limited way) and in [31] by considering more crypto-
graphic primitives.
Translating conﬁdentiality properties (i.e. equivalences over ex-
ecution traces) between formal and computational models has re-
ceived seemingly less attention. Secrecy in the computational model
is usually deﬁned as a conﬁdentiality property while in the formal
model it may also be a conﬁdentiality property (process equiva-
lence [4, 15]), but more commonly is an integrity property (the
adversary is unable to output the message that we want to pro-
tect). Herzog et al. [29] show that if the asymmetric encryption is
plaintext-aware [14] then the computational adversary cannot con-
struct the interpretation of any formal message that the formal ad-
versary cannot construct. Note that here the property in the com-
putational model is still an integrity property so the adversary may
learn partial information about the secret messages. Cortier and
Warinschi [21] show that a certain integrity property in the formal
model implies the secrecy of nonces generated by protocol parties
in the computational model; this result is also applicable to [30,
31]. The conﬁdentiality property is similar to the ﬁnd-then-guess
secrecy property [24, 13] but seems to be weaker in that the adver-
sary can choose less parameters. Also, it only applies to nonces
generated during the protocol run. A yet different approach, capa-
ble of verifying the independence of secret payloads but limited to
a bounded number of protocol runs, is ours [33] where a protocol is
transformed in an automated way, such that the view of the adver-
sary does not change distinguishably. The transformation is based
on the security deﬁnitions of the cryptographic primitives which
demand the indistinguishability of certain two oracles — parts of
the protocol that behave as the “real” oracle may be replaced by the
“ideal” oracle. If one can transform out all syntactic accesses to
the secret payloads then the payloads are secure — the view of the
adversary is independent of them.
We already mentioned a different approach in the Introduction
— the faithful abstraction of cryptographic primitives (in the com-
putational model) — and the simulatable library [12, 11, 9]. The re-
alizations of some protocols have been proved correct with the help
of that library [8, 7], these hand-crafted proofs argue in terms of the
model presented by the library. Another line of work in the faithful
abstraction is the work on universal composability by Canetti [16].
Faithful abstractions are given for several cryptographic primitives
in this model [17, 19, 20], including asymmetric encryption and
digital signatures. This time they are not parts of a monolithic li-
brary, but each primitive is abstracted by a different machine; such
design should be considered superior. The price of the better design
are the increased capabilities of the adversary for attacking these
abstractions, compared to the BPW library. Still, Canetti and Her-
zog [18] have deﬁned the abstract functionality for certiﬁed public
key encryption which allows them to relate the integrity properties
satisﬁed by protocols (with bounded number of runs) using only
asymmetric encryption in formal and computational models.
Yet another approach is that of Lincoln, Mitchell et al. [36, 37];
they have given a “computational” semantics for a variant of (cid:25)-
calculus where probabilistic choice replaces non-determinism ev-
erywhere. The deﬁnitions of conﬁdentiality and integrity proper-
ties from the computational model easily carry over to this setting.
They have also devised a formal proof system [46] for this calculus,
but it does not seem to be amenable for automatic deduction. Some-
what related is the result by Zunino and Degano [48]. They have
given the Dolev-Yao adversary the ability to break the encryption
(ﬁnd the key from a ciphertext), but only with negligible probabil-
ity. They show that this ability does not strengthen the adversary.
Let us also mention some of the work in the area of type systems
for cryptographic protocol analysis. The ﬁrst type system of this
kind was proposed by Abadi [1], it could be used for verifying the
secrecy of payloads or nonces in the protocols using only symmet-
ric encryption. This type system, as well as all the others that we
describe work in the Dolev-Yao model. The type system was ex-
tended to cope with asymmetric encryption by Abadi and Blanchet
[2]; this type system is the closest to the type system presented in
current paper. Abadi and Blanchet [3] further generalized this type
system to handle generic cryptographic primitives. The type sys-
tem of Abadi has also been extended by Gordon and Jeffrey [25,
26, 27] to check for integrity properties.
3. OVERVIEW OF THE CRYPTOGRAPHIC
LIBRARY
Let us give an overview of the simulatable cryptographic library
[12], as well as simulatability [44] itself. A system is a set of struc-
tures. A structure Str is a collection of probabilistic interactive
Turing machines. These machines have named input and output
ports; an input and output port with the same name make up a chan-
nel between corresponding machines. These channels are secure;
authentic or insecure channels can be modeled by two secure chan-
nels with the adversary having a port on one or both of them. Some
of the ports of the structure have no complementary ports in the
structure; a certain subset S of them are called the free ports, these
ports are used to access the functionality of the structure. The rest
of unconnected ports are meant for the adversary, they model the
necessary imperfections of the system. A conﬁguration consists of
a structure, a machine H connecting only to the free ports of the
structure and modeling the intended user of the system, and an ad-
versarial machine A that must connect to all remaining unconnected
ports. There may also be connections between H and A. The view
of the user H is the distribution of the sequence of messages on the
ports of H.
Let Str and Str 0 be two structures with the same set of free
ports S. We say that Str is at least as secure as Str 0 (denoted
Str (cid:21) Str 0; that relation is called simulatability) if for each possi-
ble H and A there exists an adversary S, such that the view of H in
the conﬁguration with Str and A is computationally indistinguish-
able [23] from its view in the conﬁguration with Str 0 and S. In
other words, anything that can happen to H using the functionality
provided by Str can also happen to it if it uses the functionality of
Str 0. A system Sys is at least as secure as a system Sys 0 if each
structure of Sys is at least as secure as some structure of Sys 0.
Often we call Sys the real system and Sys 0 the ideal system. In
this case the structures in Sys 0 have to consist of a single, deter-
ministic Turing machine that speciﬁes the intended functionality.
The structures in Sys must have a Turing machine for each possi-
ble location (if the functionality is for n parties then there must be n
machines, one for each party) and they should use mostly insecure
channels for communication (the secure or authentic channels may