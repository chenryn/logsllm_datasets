ing Alice to login to a malicious RP controlled by the
attacker), the attacker can log into the vulnerable RP as
Alice.
Listing 2: Root Cause of Access Token Injection and
Bypass MAC Key Protection in OAuthLib
1 def _populate_attributes(self, resp):
2
if ’code’ in resp:
3
4
5
6
7
self.code = resp.get(’code’)
if ’access_token’ in resp:
self.access_token = resp.get(’
access_token’)
if ’mac_key’ in resp:
self.mac_key = resp.get(’mac_key’)
7.1.1 Vulnerability Analysis
Below, we use OAuthLib [21], a popular SDK with more
than 6 million downloads, to illustrate this vulnerability.
When the IdP passes the code parameter to the RP in
Step 5 of Fig. 1, this SDK will ﬁrst verify the correct-
ness of this response. For example, it checks whether it
Figure 7: Exploit for access token injection
is a secure channel and the state parameter to protect
against CSRF attacks. Thereafter, it calls the function of
populate attributes to populate/ store some commonly
used variables for later use. However, if this function is
not carefully designed, an attacker can control the value
to be stored.
As presented in Listing 2, this SDK stores the value
of code if it exists in the response resp (i.e., Step 5
in Fig 1). Surprisingly, if the response resp contains
access token, its value is also stored. More speciﬁ-
cally, if an attacker feeds the URL input shown in List-
ing 3 to the RP in Step 5, an attacker-controlled access
token is stored by the SDK and used for authentication
later on.
In this case, two security properties are vio-
lated. Firstly, Clause 4 is violated since the victim RP
uses the access token issued to mRP. Secondly, Clause 6
is also violated: the IdP believes the current user is the
attacker while the RP thinks she/ he is the victim.
Listing 3: An Exploit URL for Access Token Injection
https://RP.com?state=xxx&code=fake code
&access token=victim access token at mRP
7.1.2 Exploit
The exploit only requires the attacker to obtain Alice’s
access token, e.g., via a malicious RP. As presented in
Fig 7, the attack procedure is as follows:
1-4. The attacker logs into a victim RP using her own
IdP account and her own device.
5. The attacker intercepts and substitutes the normal
response with an invalid code as well as the victim
Alice’s access token of mRP.
6. After verifying the response, the SDK stores the
code and Alice’s access token. The SDK then
makes a token exchange request with this fake code.
the IdP returns error.
Therefore, the previously stored access token will
not be overwritten.
7. Since the code is invalid,
8. The RP retrieves the user data using Alice’s access
token.
9. The IdP returns Alice’s user information and thus
the attacker can log into the victim RP as Alice.
1468    27th USENIX Security Symposium
USENIX Association
Victim RPAttacker    IdP1).Req0: authorization_url() 2). client_id +... + state3) User authentication and grant permission5). Req1:fake_code + state + victim’s access token at mRP  4) code + state6). Token exchange request: fake_code + ...7). Invalid code8). User profile request: victim’s access token9). Victim’s user data7.2 Refresh token Injection
For SSO protocols, an access token often has a short life-
span, just enough to cover the typical duration of a login
session. Thereafter, the RP will need to prompt the user
to perform re-authorization, which can degrade user ex-
perience. To avoid this problem, it is common for an
IdP to issue another long-term “refresh token” to the RP,
together with the initial access token. The RP can sub-
sequently use the refresh token to request a new access
token from the IdP without user intervention. As such,
the mishandling of this refresh token can have severe se-
curity consequences similar to that of the access token.
It is generally believed that the refresh token is secure
since it is delivered over a secure channel (together with
the access token) in Step 7 of Fig. 1. Meanwhile, some
SDK developers have enough security expertise and real-
ize the risk of directly storing the value from the end-user
(e.g., the access token injection vulnerability). There-
fore, these SDK developers attempt to pre-process the
user input and stores it only after it has passed the secu-
rity checkings.
Despite these seemingly strict security checks, we
will show that the so-called refresh token injection vul-
nerability is still possible. This vulnerability enables
an attacker to specify any refresh token of her choice
and then login as the victim. Below, we use the
Request-OAuthLib SDK, which supports auto-token-
refresh mechanism, to illustrate the problem.
7.2.1 Vulnerability Analysis
This vulnerability, though superﬁcially similar to the ac-
cess token injection, is actually more complicated. The
ﬁrst step is similar: this SDK checks the refresh token
in Step 5 of Fig. 1, and if exists, stores it in the variable
of oauth. client.refresh token. The difference is
that this SDK realizes such a variable is highly security
sensitive and attempts to apply more secure measures to
protect/ verify it (but still fails). Such attempts are pre-
sented in Listing 4 with much simpliﬁcation for the ease
of presentation.
Speciﬁcally, this SDK ﬁrst checks whether there is a
refresh token either in the arguments provided by the
API caller or in the oauth.token object delivered via
a secure server-to-server communication. Unfortunately,
the former by default is None and the latter can be indi-
rectly manipulated/ controlled by the attacker. For ex-
ample, the attacker can feed an invalid code in Step
5 of Fig. 1 so that the oauth.token object will not
be overwritten by a refresh token exchanged with the
IdP server.
In this case, oauth.token will use its de-
fault value None. As such, the attacker can invoke the
prepare refresh body function with an argument of
refresh token = None. The prepare refresh body
Listing 4: Attempts to Filter User Input
1 def refresh_token(self, refresh_token =
2
3
4
5
6
None, **kwargs):
# self.token is the oauth.token object
refresh_token = refresh_token or
self.token.get(@’refresh_token’@)
...
body = self._client.
prepare_refresh_body(body=body,
refresh_token=refresh_token, scope
=self.scope, **kwargs)
function therefore has no choice but to use the attacker-
controlled variable of oauth. client.refresh token.
7.2.2 Exploit
There exist multiple exploits for this vulnerability. Be-
low, we present one exploit which requires the least ca-
pability of the attacker (Eve): As long as Eve can obtain
Alice’s refresh token associated with a malicious RP (run
by Eve), Eve can login as Alice to any RP which uses the
vulnerable SDK (as shown in Fig. 8):
1-4. The attacker follows the normal protocol ﬂow to log
into the victim RP using her own IdP account with
her own device.
5. When the IdP returns an authorization code, the at-
tacker then injects the victim’s refresh token.
6. Once the access token expires, the SDK will auto-
matically renew the access token using Alice’s re-
fresh token.
7. The IdP then returns Alice’s access token to the RP
according to the refresh token.
When the RP uses this newly obtained access token to
retrieve the user data, the IdP will return the victim’s in-
formation. The damage depends on how the user data is
utilized. In the worst case where the user data is for au-
thentication, the attacker can log into the vulnerable RP
as the victim user.
Note that the above exploit only works for those IdPs
(e.g., Fitbit) which do not require client secret in
Step 6 of Fig. 8. For speciﬁcation-compatible IdPs re-
quiring this parameter, we need to assume a stronger
threat model: the attacker can obtain the victim’s refresh
token issued for the vulnerable RP.
7.3 Use-before-assignment of state
To thwart CSRF attacks, the OAuth2.0 speciﬁcation [23]
strongly suggests the use of the state parameter, which
should be generated and handled as a nonce. Note that
the process of the state parameter is tightly related to
USENIX Association
27th USENIX Security Symposium    1469
Listing 5: Root Cause of Use-before-Assignment of
State Variable
1 oauth = OAuth2Session(client_id,...)
2 @app.route("/")
3 def init():
4
auth_url, state = oauth.
authorization_url(base_url)
return redirect(auth_url)
5
6 @app.route("/callback", methods=["GET"])
7 def callback():
8
token = oauth.fetch_token(token_url,
secret, auth_response=request.url)
9
session[’oauth_token’] = token
return redirect(url_for(’.profile’))
10
11 @app.route("/profile", methods=["GET"])
12 def profile():
13
return oauth.get(’https://idp/user’)
14
15 def fetch_token(token_url, secret,
auth_response):
16
17
18
...
if state and params.get("state", None)
!=state:
raise MismatchingStateError()
“callback” function, then the ﬁrst occurrence of state
in Line 17 becomes the default value, i.e., None. As
a result, the program will not check the second condi-
tion (params.get(“state”, None) ! = state). Instead,
it directly exchanges for an access token (as long as the
other ﬁelds in Step 6 of Fig. 1 are valid).
7.3.2 Exploit
This vulnerability allows an attacker to bypass the ver-
iﬁcation of the state parameter and thus makes CSRF
attacks possible again. The exploit is presented in [43]
(Section 4.4). Speciﬁcally, an attacker performs the fol-
lowing steps:
1. Sign into an RP using her own account from the IdP,
2. Intercept the code on her browser (Step 5 in Fig 1)
and then,
3. Embed the intercepted code in an HTML construct
(e.g., img, iframe) that causes the browser to au-
tomatically send the intercepted code to the RP’s
sign-in endpoint when the exploit page is viewed
by a victim user.
This vulnerability can have high security implication,
ranging from snifﬁng the victim’s activity at the vulner-
able RP via a “login CSRF” attack [8], to controlling the
victim’s RP account by account hijacking attack [26].
When it is combined with the ampliﬁcation attack via
Dual-Role IdPs [49], the consequence can be even more
severe. Refer to the above references for details of the
Figure 8: Exploit for refresh token injection
session management, for which the application develop-
ers have multiple options. It is therefore difﬁcult for the
SDK, which is supposed to deﬁne the core functionality
only, to consider the different operations among numer-
ous session management tools. This may explain why 9
out of 10 SDKs (see Table 2) are vulnerable to different
existing attacks related to the state parameter: These
SDK developers often rely on the RP developers to im-
plement the state parameter by themselves. Unfortu-
nately, as shown in [49], 55% RP implementations fail to
handle this state parameter correctly.
Towards this end, the Request-OAuthlib SDK pays
considerable attention to carefully implement the state
parameter and has ﬁxed all previously known vulnera-
bilities associated with this parameter. Unfortunately,
the ﬁx itself unexpectedly contains a new bug, making
CSRF attack possible again (but in a different way). By
leveraging the CSRF attack, the attacker can either spoof
the victim’s personal data [43] or control the victim’s RP
account [49].
7.3.1 Vulnerability Analysis
Listing 5 presents the vulnerable code snippet when us-
ing the state parameter.
It contains three key func-
tions: init(), callback() and proﬁle(), which correspond
to Req0, Req1 and Req2 in Fig. 1, respectively. When
the user clicks the “login with Facebook” button, the
browser will send Req0 to the RP server and invokes
the “init” function. This function generates an authoriza-
tion URL (Line 5) which includes a random state pa-
rameter to prevent CSRF attacks: Upon receiving Req1,
the “callback” function will be invoked to parse and
verify auth response.
In particular, it compares the
state parameter generated in Line 4 and the one in
the auth response in Line 17 (which was stored in the
params variable). In case of mismatch, an error will oc-
cur.
At a ﬁrst glance, the program appears to be correct.
However, a so-called “use-before-assignment” vulnera-
bility of the state variable exists. Speciﬁcally, if an at-
tacker skips Req0 (thus “init” function does not get ex-
ecuted), and instead directly sends Req1 to invoke the
1470    27th USENIX Security Symposium
USENIX Association
Victim RPAttacker    IdP1).Req0: authorization_url() 2). client_id + scope         + redirect_uri + state3) User authentication and grant permission5). Req1: attacker’s code +victim’s refresh_token + state4) attacker’s code + state6). Refresh token request: victim’s refresh_token ....access token expired7). victim’s access_token corresponding exploits.
7.4 Bypass MAC key Protection
SSO protocols support two usage types for an access to-
ken: the commonly used bearer token and the yet-to-be-
standardized MAC token. Fig. 1 shows the standard use
of the bearer token: any party in possession of an access
token can retrieve the user data hosted by the IdP. There-
fore, if the access token is disclosed (e.g., via eavesdrop-
ping or insecure storage), an attacker can directly login as
the token owner [13]. To protect the access token against
leakage, more and more IdPs (e.g., Facebook, Sina, etc.)
start to support the MAC token.
The MAC token protocol is supposed to be more se-
cure by signing the original bearer token. Speciﬁcally,
in Step 7 of Fig. 1, MAC-token-enabled IdPs will re-
turn a random secret key10 along with the access token to
the RP. When making user-proﬁle requests, the RP needs
to compute a cryptographic hash message (e.g., HMAC-
SHA-256) to prove its possession of the secret key. Only
if both the hash value (MAC) and the access token are
valid would the IdP return the user data to the RP. Un-
fortunately, some SDKs cannot implement this function
correctly. As a result, the purpose of MAC token is to-
tally broken.
7.4.1 Vulnerability Analysis and Exploit
As presented in Listing 2, an attacker can specify any
secret key of her choice using the following input:
1 https://RP.com/callback?state=xxx&code=
fake_code_value&access_token=victim
access_token&mac key=victim mac key
Fig. 9 presents the exploit, which is similar to Fig. 7
with two exceptions: At Step 5, besides an invalid code
and the victim’s access token, the attacker also feeds a
MAC key of mRP. At Step 8, the RP retrieves the user
data using the victim’s access token and the MAC value
computed by the MAC key. Since the access token and
MAC key are paired, the IdP returns the victim’s user
data to the RP for authentication.
8 Lessons Learned
Least privilege. We ﬁnd that the aforementioned vul-
nerabilities are largely caused by the failure of the SDK
developers in adhering to the principle of least privilege.
Speciﬁcally, during each message exchange, the SDK
10Previously, the secret key was the app secret, which is generated
when the RP registers in the IdP platform. But the updated draft has
made it a session secret and will be delivered upon every authorization
request.
Figure 9: Exploit for MAC key injection
developer should design a separate function to store the
corresponding variable/ parameter so that the SDK can
easily decide whether a variable/ parameter can be ac-
cessed and/or altered by the user or not. However, many
SDK developers, for simplicity, store all key variables/
parameters using one single function. Furthermore, this
function can be invoked by the user. As a result, even
if the SDK developers attempt to ﬁlter out the user-
provided variables, an intelligent attacker can still ma-
nipulate sensitive variables (e.g., access token, refresh
token) that she should not be allowed to.
Less is more. Another observation is that the more
IdPs/ functions a SDK supports,
the more suscepti-
ble it would be. The reason is that, since the SSO
speciﬁcations only serve as a high-level guideline, IdPs
typically have various application-speciﬁc logic ﬂows,
unique APIs and security checks. To support multiple
IdPs, a SDK will need to develop an additional layer
to provide a new, generalized interface to glue vari-
ous IdP-speciﬁc implementations together.
For ex-
ample, the Request-OAuthLib SDK deﬁnes two objects
(i.e., oauth. client and oauth.token) to manage the
OAuth-related variables. When making requests to dif-
ferent IdPs, the SDK can thus retrieve the required vari-
able from these two objects. Unfortunately, this general-
ized interface has enable the most important attack vec-
tor. would like to provide, the more vulnerable it can be.
e.g., OAuthLib, Request-OAuthLib.
9 Related Work
SSO security analysis. Given the critical SSO services,