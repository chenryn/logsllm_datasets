title:A Fast and Verified Software Stack for Secure Function Evaluation
author:Jos&apos;e Bacelar Almeida and
Manuel Barbosa and
Gilles Barthe and
François Dupressoir and
Benjamin Gr&apos;egoire and
Vincent Laporte and
Vitor Pereira
A Fast and Verified Software Stack
for Secure Function Evaluation
José Bacelar Almeida
INESC TEC and
Universidade do Minho, Portugal
François Dupressoir
University of Surrey, UK
Manuel Barbosa
INESC TEC and FCUP
Universidade do Porto, Portugal
Benjamin Grégoire
Inria Sophia-Antipolis, France
Gilles Barthe
IMDEA Software Institute, Spain
Vincent Laporte
IMDEA Software Institute, Spain
Vitor Pereira
INESC TEC and FCUP
Universidade do Porto, Portugal
ABSTRACT
We present a high-assurance software stack for secure function
evaluation (SFE). Our stack consists of three components: i. a veri-
fied compiler (CircGen) that translates C programs into Boolean
circuits; ii. a verified implementation of Yao’s SFE protocol based on
garbled circuits and oblivious transfer; and iii. transparent applica-
tion integration and communications via FRESCO, an open-source
framework for secure multiparty computation (MPC). CircGen is a
general purpose tool that builds on CompCert, a verified optimizing
compiler for C. It can be used in arbitrary Boolean circuit-based
cryptography deployments. The security of our SFE protocol im-
plementation is formally verified using EasyCrypt, a tool-assisted
framework for building high-confidence cryptographic proofs, and
it leverages a new formalization of garbled circuits based on the
framework of Bellare, Hoang, and Rogaway (CCS 2012). We conduct
a practical evaluation of our approach, and conclude that it is com-
petitive with state-of-the-art (unverified) approaches. Our work
provides concrete evidence of the feasibility of building efficient,
verified, implementations of higher-level cryptographic systems.
All our development is publicly available.
KEYWORDS
Secure Function Evaluation, Verified Implementation, Certified
Compilation
1 INTRODUCTION
Cryptographic engineering is the domain-specific area of software
engineering that brings cryptography to practice. It encompasses
projects that maintain widely used cryptographic libraries such
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
© 2017 Copyright held by the owner/author(s). Publication rights licensed to Associa-
tion for Computing Machinery.
ACM ISBN 978-1-4503-4946-8/17/10...$15.00
https://doi.org/10.1145/3133956.3134017
as OpenSSL,1 s2n2 and Bouncy Castle,3 as well as prototyping
frameworks such as CHARM [1] and SCAPI [31]. More recently, a
series of groundbreaking cryptographic engineering projects have
emerged, that aim to bring a new generation of cryptographic proto-
cols to real-world applications. In this new generation of protocols,
which has matured in the last two decades, secure computation
over encrypted data stands out as one of the technologies with the
highest potential to change the landscape of secure ITC, namely
by improving cloud reliability and thus opening the way for new
secure cloud-based applications. Projects that aim to bring secure
computation over encrypted data to practice include FRESCO4 [27],
TASTY [38] and Sharemind [21].
In contrast to other areas of software engineering for critical
systems, the benefits of formal verification for cryptographic en-
gineering have been very limited, with some recent and notable
exceptions [2, 3, 8, 18, 22, 33]. The reasons for this are well known:
cryptographic software is a challenge for high-assurance software
development due to the tension that arises between complex speci-
fications and the need for very high efficiency—security is supposed
to be invisible, and current verification technology comes with a
performance penalty. The exceptions mentioned above mark the
emergence of a new area of research: high-assurance cryptogra-
phy. This aims to apply formal verification to both cryptographic
security proofs and the functional correctness and security of cryp-
tographic implementations.
In this paper we demonstrate that a tight integration of high-
assurance cryptography and cryptographic engineering can deliver
the combined benefits of provable security and best cryptographic
engineering practices at a scale that significantly exceeds previous
experiments (typically carried out on core cryptographic primi-
tives). We deliver a fast and verified software stack for secure com-
putation over encrypted data. This choice is motivated by several
factors. First, as mentioned above, this technology is among the
foremost practical applications of cryptography and is a fundamen-
tal building block for making cloud computing secure. Second, it is
1http://openssl.org
2http://https://github.com/awslabs/s2n
3https://www.bouncycastle.org/
4https://github.com/aicis/fresco
Session I4:  Verifying CryptoCCS’17, October 30-November 3, 2017, Dallas, TX, USA1989C program
Optimized CircGen
CircGen
Boolean circuit
Inputs
Circuit reader
Circuit description
FRESCO application
Verified Yao Protocol Suite
Outputs
Verified Yao Evaluator
Communications
FRESCO
Figure 1: Verified cryptographic software stack. Blue rect-
angles identify the verified components of the stack, while
black rectangles represent part of our trusting computing
base. Dashed blue rectangles are partially verified elements
and in dashed black rectangles one can find intermediate in-
put/output items.
a tremendous challenge for high-assurance cryptography, as its se-
curity proofs are markedly distinct from prior work in formalizing
reductionist arguments.
Contributions. We present a high-assurance and high-speed soft-
ware stack for secure multi-party computation. Figure 1 presents
the overall architecture of the stack. The lowest-level component
is FRESCO [27]; an existing, practical, open-source, framework for
secure multi-party computation, which we use for communications
and input/output. The correctness of this framework (but not its
security) is part of our trusted computing base, as verifying the
correctness of a Java-based communications infrastructure is out
of the scope of high-assurance cryptography.
The intermediate component of our stack is a verified implemen-
tation of Yao’s secure function evaluation (SFE) protocol [57] based
on garbled circuits and oblivious transfer. This protocol allows
two parties P1 and P2, holding private inputs x1 and x2, to jointly
evaluate any function f (x1, x2) and learn its result, whilst being
assured that no additional information about their respective inputs
is revealed. Two-party SFE provides a general distributed solution
to the problem of computing over encrypted data in the cloud [41];
we allow for both scenarios where the function is public and both
sides provide inputs and scenarios where one party provides the
(secret albeit with leaked topology) circuit to be computed and the
other party provides the input to the computation.
Our implementation is machine-checked in EasyCrypt5 [7, 9], an
interactive proof assistant with dedicated support to perform game-
based cryptographic proofs in the computational model. Our proof
5https://www.easycrypt.info
leverages the foundational framework put forth by Bellare, Hoang
and Rogaway [12] for the security of Yao’s garbled circuits. Our
construction of SFE relies on an n-fold extension (where n is the size
of the selection string–or the circuit’s input) of the oblivious transfer
protocol by Bellare and Micali [13], in the hashed version presented
by Naor and Pinkas [47]. The implementation is proved secure
relative to standard assumptions: the Decisional Diffie-Hellman
problem, and the existence of entropy-smoothing hash functions
and pseudorandom functions.
The higher-level component of our stack is a verified optimizing
compiler from C programs to Boolean circuits that we call CircGen.
Our compiler is mechanically verified using the Coq proof assistant,
and builds on top of CompCert [43], a verified optimizing compiler
for C programs. It reuses the front- and middle-end of CompCert
(introducing an extra loop-unrolling optimization) and it provides
a new verified back-end producing Boolean circuits. The back-end
includes correctness proofs for several program transformations
that have not previously been formally verified, including the trans-
lation of RTL programs into guarded form and a memory-agnostic
static single assignment (SSA) form. Our proof of semantic preser-
vation is conditioned on the existence of an external oracle that
provides functionally correct Boolean circuits for basic operations
in the C language, such as 32-bit addition and multiplication. The
low-level circuits used in our current implementation for these
operations have not been formally verified and are hence part of
our trusted computing base. Verifying Boolean circuits for native
C operations can be done either in Coq or using other verification
techniques and it is orthogonal to the reported verification effort.
The Boolean circuits generated by CircGen compare well with
alternative unverified solutions, namely CBMC-GC6 [34], although
they are slightly less efficient (as would be expected). To widen the
applicability of CircGen to scenarios where speed is more important
than assurance, we also implement some (yet unverified) global
post-processing optimizations that make CircGen a good alternative
to CBMC-GC for high-speed applications.
Our work delivers several generic building blocks (the Boolean
circuit compiler, a verified implementation of oblivious transfer, ...)
that can be reused by many other verified cryptographic systems.
However, the main strength of our results resides in the fact that,
for the first time, we are able to produce a joining of high-assurance
cryptography and cryptography engineering that covers all the
layers in a (passively) secure multiparty computation software
framework.
Challenges. The development of the software stack raised several
challenges, which we now highlight.
Machine-checked proofs of computational security. EasyCrypt [7,
9] is an interactive proof assistant with dedicated support to per-
form game-based cryptographic proofs. It has been used for several
emblematic examples, including signatures and encryption schemes.
Formalizing the proof of security for our SFE protocol in EasyCrypt
involved formalizing two generic proof techniques that had not pre-
viously been considered: hybrid arguments and simulation-based
security proofs.
6http://forsyte.at/software/cbmc-gc/
Session I4:  Verifying CryptoCCS’17, October 30-November 3, 2017, Dallas, TX, USA1990In contrast to other standard techniques, which remain within
the realm of the relational program logic that forms the core of
EasyCrypt (i.e., it is used to verify transitions between successive
games), hybrid arguments and simulation-based proofs lie at the in-
terface between this relational program logic and the higher-order
logic of EasyCrypt in which security statements are expressed and
proved. Specifically, hybrid arguments combine induction proofs
and proofs in the relational program logic. Similarly, simulation-
based security proofs intrinsically require existential quantification
over adversarial algorithms and the ability to instantiate security
models with concrete algorithms (the simulators) that serve as wit-
nesses as to the validity of the security claims. These two forms
of reasoning excercise the expressive power of EasyCrypt’s ambi-
ent logic, and are thus markedly distinct from the simple security
arguments typically addressed by other similar tools like Cryp-
toVerif [19]. Secure function evaluation is also a challenging test
case in terms of its scale. Indeed, EasyCrypt had so far been used
primarily for primitives and to a lesser extent for (components) of
protocols. While these examples can be intricate to verify, there is a
difference of scale with more complex cryptographic systems, such
as SFE, which involve several layers of cryptographic constructions.
Realizing our broader goal required several improvements to
the EasyCrypt tool. In particular, the complexity and scale of the
proof developed here guided several aspects of EasyCrypt’s devel-
opment to support compositional simulation-based proofs, and the
aim of producing executable code from machine-checked specifica-
tions served as initial motivation for EasyCrypt’s code extraction
mechanism. We contribute a generic formalization of hybrid argu-
ments that has since been included in EasyCrypt’s library of game
transformations.
High-assurance and high-speed implementations. Our implemen-
tation of Yao’s protocol can be thought of as a secure virtual ma-
chine for securely executing arbitrary computations. The challenge
is therefore dual: in addition to a verified implementation of this
virtual machine of sorts, one needs to generate correct and efficient
computation descriptions in a format that can be executed in this
virtual computational platform (in this case Boolean circuits). Gen-
erating such circuit representations by hand is not realistic, and
appropriate tool support is critical if widespread practical adop-
tion is the goal. The requirement of end-to-end verification fur-
ther imposes that compilation into circuits must itself be verified.
CircGen fills this gap from both a high-assurance cryptography
perspective—verified outputs incur a small performance penalty—
and a cryptographic engineering perspective—it supports unverified
optimizations for speed-critical applications.
Highlights of our technical contributions at this level include:
(1) the addition of a loop unrolling transformation to the CompCert
middle-end that permits converting those programs that can be
expressed as circuits into a loop-free form; (2) new intermediate
languages in CompCert with corresponding transformations se-
mantics preservation theorems that permit converting loop-free
programs gradually into a circuit representation—this includes a
new domain-specific transformation into Static Single Assignment
(SSA) form; and (3) the formalization of a new target language that
captures the semantics of Boolean circuits and permits stating and
proving a semantics preservation theorem relating the I/O behavior
of an input C program to that of a generated circuit.
Access to the development. The EasyCrypt formalisation of
Yao’s protocol, as well as its extracted code, can be found at https:
//ci.easycrypt.info/easycrypt-projects/yao. The code for CircGen
can be found at https://github.com/haslab/circgen.
Structure of the paper. In Section 2 we describe the EasyCrypt
formalization and the verified implementation of Yao’s protocol. In
Section 3 we present CircGen, our certified Boolean circuit compiler.
In each of these sections, we give micro-benchmarks for the related
software component. We then present an overall performance eval-
uation of the software stack in Section 4. In Section 5 we discuss
related work, before making some concluding remarks in Section 6.
Limitations. Our approach covers a comfortable subset of C, but
some features are excluded (see Table 2); some of these features
will be added in future work, while others are traditionally out of
reach for SFE. Moreover, some low-level optimizations have not
yet been verified; however, our experiments show that the verified
version of the compiler is already surprisingly close to the optimized
version for most examples. Finally, our Trusted Computing Base
includes the FRESCO platform, Cryptokit (used to instantiate the
hash function) and justGarble (used to instantiate the PRF); the
formal verification of these components is out of scope of this
work.
2 VERIFIED SFE IMPLEMENTATION
We first give an overview of what we prove in EasyCrypt, relating
this to established results in the field of cryptography. We do not go
into the details of the (publicly available) formalization but include
in Appendix A an example-driven presentation of its highlights. The
formalization is available online and the various files that compose
it can be easily matched to the building blocks in the high-level
description we give here. At the end of the section we describe
how we obtain our verified implementation from the EasyCrypt
formalization.
Yao’s protocol in a nutshell. Yao’s protocol is based on the
concept of garbled circuits. Informally, the idea of garbling a circuit
computing f consists of: i. expressing the circuit as a set of truth
tables (one for each gate) and meta information describing the
wiring between gates; ii. replacing the actual Boolean values in
the truth tables with random cryptographic keys, called labels; and
iii. translating the wiring relations using a system of locks: truth
tables are encrypted one label at a time so that, for each possible
combination of the input wires, the corresponding labels are used
as encryption keys that lock the label for the correct Boolean value
at the output of that gate. Then, given a garbled circuit for f and
a set of labels representing (unknown) values for the input wires
encoding x1 and x2, one can obliviously evaluate the circuit by
sequentially computing one gate after another: given the labels of
the input wires to a gate, only one entry in the corresponding truth
table will be decryptable, revealing the label of the output wire. The
output of the circuit will comprise the labels at the output wires of
the output gates.
Session I4:  Verifying CryptoCCS’17, October 30-November 3, 2017, Dallas, TX, USA1991Yao’s Protocol
Garble1
Dual Key Cipher
2
Dual Masking
PRF
1
Double Encryption
Ideal Cipher
Oblivious Transfer
2PPP Secure
Garbling Scheme
IND Secure
3
Garbling Scheme
SIM Secure
4
SFE
2PPP Secure
Figure 2: Yao’s protocol security proof by BHR [12].
To build a SFE protocol between two honest-but-curious parties,
one can use Yao’s garbled circuits as follows. Bob (holding x2)
garbles the circuit and provides this to Alice (holding x1) along
with: i. the label assignment for the input wires corresponding to
x2, and ii. all the information required to decode the Boolean values
of the output wires. In order for Alice to be able to evaluate the
circuit, she should be able to obtain the correct label assignment for
x1. Obviously, Alice cannot reveal x1 to Bob, as this would violate