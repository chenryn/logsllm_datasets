### 使用 `preg_match` 进行文件名验证

通过 `preg_match` 函数和正则表达式，可以确认文件名变量 `$tmpl` 仅包含字母和数字。由于 `ereg` 函数无法正确处理空字节（即非二进制安全），因此不推荐在本场景中使用 `ereg`。关于这一点，请参阅第 4.2 节中的详细说明。该方法已在 PHP 5.3.5 版本中得到验证。

### 总结
本节讨论了访问文件过程中容易出现的目录遍历漏洞。防止此类漏洞的最佳做法是不允许外部直接指定文件名。因此，在设计阶段就应考虑是否能够实现这一目标。

## 内部文件被公开的风险

### 概要
有时 Web 服务器的公开目录下会存放一些保密文件。如果这些文件的 URL 被外界知晓，那么任何人都可以访问并查看这些内部文件。

#### 风险影响
- **重要信息泄露**：敏感数据可能会暴露给未经授权的用户。

#### 防范措施
- **不在公开目录中放置内部文件**：这是最根本的解决办法。
- **禁用目录列表功能**：即使在公开目录中存在内部文件，也可以通过关闭目录浏览来减少风险。此操作将在后文详述。

### 内部文件公开实例
假设有一个 URL (`http://example.jp/4a/data/`) 可以展示一个虚拟机上的所有文件。当用户访问该 URL 时，可以看到目录内的所有文件列表，这种功能被称为“目录列表”。点击任意链接，如 `user.txt`，就能看到文件内容，这可能导致用户信息等敏感数据的泄露。事实上，很多早期的信息泄露事件都是由这种简单的攻击模式引发的。

#### 安全隐患产生的原因
内部文件被公开的主要原因是将敏感文件置于可公开访问的目录中。具体来说，如果满足以下条件之一，则文件可能被非法访问：
- 文件位于公开目录内。
- 存在获取文件 URL 的途径。
- 对文件没有设置适当的访问控制权限。

获取文件 URL 的常见方式包括但不限于：
- 目录列表功能开启。
- 文件名具有规律性（例如日期、用户名或连续数值）。
- 常见且易猜解的文件名（如 `user.dat` 或 `data.txt`）。
- 通过错误消息或其他安全漏洞推断出文件名。
- 文件被其他网站引用并被搜索引擎索引。

尽管可以通过修改 Apache 的配置文件（如 `httpd.conf` 或 `.htaccess`）来限制对特定文件的访问，但这种方法并非绝对可靠，因为配置可能因疏忽而被更改。历史上许多信息泄露事件正是由于迁移服务器过程中配置丢失导致的。

### 应对策略
- **避免将内部文件存放在公开目录下**：这是最有效的预防措施。
- **设计应用程序时规划好文件存储位置**。
- **租用服务器时确保有非公开目录可用**。
- **作为额外的安全层，关闭目录列表功能**。对于 Apache 服务器，可以在 `httpd.conf` 中加入 `Options -Indexes` 来实现。若无法修改主配置文件，则可在公开目录下创建 `.htaccess` 文件，并添加相同指令。

此外，还可以通过 `.htaccess` 设置拒绝特定类型文件的外部访问，比如禁止 `.txt` 文件的浏览。不过，这种方法只能作为临时解决方案，并不能替代良好的设计实践。

---

以上是对原始文本进行优化后的版本，旨在提高其清晰度、连贯性和专业性。希望对你有所帮助！