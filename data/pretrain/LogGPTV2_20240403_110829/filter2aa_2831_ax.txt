### Implementing COM with MFC

#### Adding Code for Nested Classes
To implement a COM interface in an MFC application, you can use the `AddRef()` method to manage the reference count. If you prefer not to use MFC macros, you can write the necessary definitions manually.

We will place the implementation of our class in the `MfcClient.cpp` source file. The standard AppWizard-generated code is already present, so we will add a nested class defined within the `BEGIN_INTERFACE_PART` macro. This nested class is relatively simple, except for its nested definition. Here is the top portion of the file:

```cpp
BEGIN_INTERFACE_MAP(CMyCallback, CCmdTarget)
    INTERFACE_PART(CMyCallback, IID_ICallBack, MyEvents)
END_INTERFACE_MAP()
```

The above macros define an MFC interface map, which works in conjunction with the `DECLARE_INTERFACE_MAP` macro in the header file. An interface map is an MFC/OLE concept similar to a standard MFC message map, which processes Windows messages. The interface map handles various aspects of a COM object, including reference counting (`AddRef()` and `Release()`) and COM aggregation. These features are typically managed automatically by ATL, but since we are using MFC, we need to implement them manually.

Let's continue with the class implementation. Here is the standardized part of the CPP implementation:

```cpp
// Standard COM interfaces -- implemented in nested class XClientSink
STDMETHODIMP_(ULONG) CMyCallback::XMyEvents::AddRef()
{
    METHOD_PROLOGUE_EX(CMyCallback, MyEvents)
    return (ULONG)pThis->ExternalAddRef();
}

STDMETHODIMP_(ULONG) CMyCallback::XMyEvents::Release()
{
    METHOD_PROLOGUE_EX(CMyCallback, MyEvents)
    return (ULONG)pThis->ExternalRelease();
}

STDMETHODIMP CMyCallback::XMyEvents::QueryInterface(REFIID iid, LPVOID* ppvObj)
{
    METHOD_PROLOGUE_EX(CMyCallback, MyEvents)
    return (HRESULT)pThis->ExternalQueryInterface(&iid, ppvObj);
}
```

The `METHOD_PROLOGUE_EX` macro is used to obtain the `this` pointer from the outer class. This is possible because the nested class and its outer class are declared as 'friends'. The macro creates an external pointer named `pThis`, which points to the outer class `CMyCallback`. We use this pointer to delegate the `AddRef()`, `Release()`, and `QueryInterface()` functions to the outer `CMyCallback` class, which knows how to handle them. These functions are implemented in the base class `CCmdTarget`.

All the code up to this point is boilerplate COM code. The only customization here is the names of the classes. Finally, we will add our custom method:

```cpp
// Pop up a message box to announce callback
STDMETHODIMP CMyCallback::XMyEvents::Awake(long lVal)
{
    CString msg;
    msg.Format("Message %d Received\n", lVal);
    AfxMessageBox(msg);
    return S_OK;
}
```

This method displays a message box with the received message.

#### Accessing the Nested Class
The syntax for accessing the nested class is somewhat unusual. Assume you have an instance of the `CCmdTarget` class called `pMyClass`. In this example, we will extract an `ICallBack` object from the class:

```cpp
ICallBack* pC;
HRESULT hr = pMyClass->m_xMyEvents.QueryInterface(IID_ICallBack, (void**)&pC);
if (SUCCEEDED(hr))
{
    pC->Awake(1);
    pC->Release();
}
```

This example demonstrates that there are alternative ways to implement COM besides ATL. Working with MFC COM is a different experience from using ATL. There are numerous books on OLE and MFC that cover this area in detail. With a solid understanding of COM fundamentals, these resources become much easier to comprehend.

### Appendix: COM Error Handling

#### Common Frustrations with COM
Much of the frustration with using COM arises when things don't work as expected. For example, you create a COM server and client, but the server fails to activate when the client runs. This appendix is dedicated to identifying and resolving such issues.

One of the most challenging aspects of working with COM is error handling. The debugging cycle for COM programs is more complex than for standard C++ programs. Here are some reasons why:

1. **Run-time Error Checking**: Much of the error checking in COM is done at run-time. While it is relatively easy to build a client and server using wizards, problems often arise during execution.
2. **Vague Error Messages**: COM error messages are often not very specific. For example, the `RPC_S_SERVER_UNAVAILABLE` error is common when working across networks but provides little context.
3. **Hidden System Components**: A significant part of the COM system, such as server location and activation, is hidden from the programmer.
4. **Security Layers**: Security subsystems complicate matters further by providing minimal diagnostic information.
5. **System Quirks and Bugs**: The COM environment is prone to bugs, and only a few experts fully understand the system.

Fortunately, COM is becoming more user-friendly. Microsoft is making efforts to improve COM usability, and tools like ATL have made a significant difference.

#### Sources of Information
- **MSDN Library**: The primary source for COM-related information. Although sometimes poorly organized, it is essential for serious Visual C++ and COM developers.
- **Online Resources**: Microsoftâ€™s website and other online resources provide useful information.
- **COM FAQs and Mailing Lists**: There are several good COM FAQs and mailing list archives available on the Internet. These can be invaluable for troubleshooting common issues.

#### Common Error Messages
Here are some common COM errors and their potential causes and solutions:

- **CO_E_BAD_SERVER_NAME** (-2147467244, 0x80004014): Remote activation was necessary, but the server name provided was invalid.
  - **Solution**: Check the server name for invalid characters and verify the parameters in the `COSERVERINFO` structure.
  
- **CO_E_CANT_REMOTE** (-2147467245, 0x80004013): Remote activation was necessary but not allowed.
  - **Solution**: Ensure the `CLSCTX` in `CoCreateInstance` matches the type of server.

- **CO_E_NOTINITIALIZED** (-2147221008, 0x800401F0): `CoInitialize` has not been called.
  - **Solution**: Call `CoInitialize` or `CoInitializeEx` before other COM calls and ensure it is called for each thread.

- **E_ACCESSDENIED** (-2147024891, 0x80070005): General access denied error.
  - **Solution**: Check COM security, file protection, and network access. Use `DCOMCNFG` to check launch permissions and ensure the server identity is correctly set.

- **E_FAIL** (-2147467259, 0x80004005): Unspecified error.
  - **Solution**: Check the server implementation for any general processing failures or exceptions.

- **E_NOINTERFACE** (-2147467262, 0x80004002): No such interface supported.
  - **Solution**: Verify the `IID` or name of the requested interface and ensure the coclass supports the interface.

- **E_OUTOFMEMORY** (-2147483646, 0x80000002): Ran out of memory.
  - **Solution**: Ensure sufficient memory is available and check for any memory leaks.

- **E_POINTER** (-2147483643, 0x80000005): Invalid pointer.
  - **Solution**: Ensure no null or invalid pointers are passed to methods.

- **ERROR_INVALID_PARAMETER** (-2147024809, 0x80070057): The parameter is incorrect.
  - **Solution**: Carefully check all parameters in function calls.

- **REGDB_E_CLASSNOTREG** (-2147221164, 0x80040154): Class not registered.
  - **Solution**: Re-register the server and verify the `CLSID` in the registry.

- **RPC_S_SERVER_UNAVAILABLE** (-2147023174, 0x800706BA): RPC server is unavailable.
  - **Solution**: Test the remote connection with `PING` and `TRACERT`, and ensure the server is running and reachable.

By understanding these common errors and their solutions, you can more effectively diagnose and resolve COM-related issues.