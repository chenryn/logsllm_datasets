# 序列化与反序列化
## 序列化
定义：利用`serialize()`函数将一个对象转换为字符串形式  
我们先看一下直接输出对象是什么效果，代码如下
效果如下  
这个时候我们利用`serialize()`函数将这个对象进行序列化成字符串然后输出，代码如下
效果如下
如果不是`public`方法那么后面的读取方法就有点不一样，例如代码如下
效果如下
private分析：  
这样就发现本来是`age`结果上面出现的是`testage`，而且`testage`长度为`7`，但是上面显示的是`9`  
查找资料后发现 **private属性序列化的时候格式是%00类名%00成员名**
，`%00`占一个字节长度，所以`age`加了类名后变成了`testage`长度为`9`
protect分析：  
本来是`sex`结果上面出现的是`*sex`，而且`*sex`的长度是`4`，但是上面显示的是`6`，同样查找资料后发现
**protect属性序列化的时候格式是%00*%00成员名**
这里介绍一下public、private、protected的区别
    public(公共的):在本类内部、外部类、子类都可以访问
    protect(受保护的):只有本类或子类或父类中可以访问
    private(私人的):只有本类内部可以使用
## 反序列化
定义：反序列化就是利用`unserailize()`函数将一个经过序列化的字符串还原成php代码形式，代码如下
# 反序列化漏洞原理
到这儿也许大家会想着序列化过去再反序列化回来，不就是形式之间的转换吗，和漏洞有什么关系  
这里先掌握php常见的魔术方法，先列出几个最常见的魔术方法，当遇到这些的时候就需要注意了  
附上讲解魔术方法的链接：
    __construct()当一个对象创建时被调用
    __destruct()当一个对象销毁时被调用
    __toString()当反序列化后的对象被输出的时候(转化为字符串的时候)被调用
    __sleep() 在对象在被序列化之前运行
    __wakeup将在序列化之后立即被调用
我们用代码演示一下这些魔术方法的使用效果
    a.'';
            }
            public function __construct(){
                echo '__construct';
            }
            public function __destruct(){
                echo '__construct';
            }
            public function __sleep(){
                echo '__sleep';
                return array('a','b');
            }
            public function __wakeup(){
                echo '__wakeup';
            }
        }
        //创建对象调用__construct
        $object = new test();
        //序列化对象调用__sleep
        $serialize = serialize($object);
        //输出序列化后的字符串
        echo 'serialize: '.$serialize.'';
        //反序列化对象调用__wakeup
        $unserialize=unserialize($serialize);
        //调用pt输出数据
        $unserialize->pt();
        //脚本结束调用__destruct
    ?>
运行效果如下：
原来有一个实例化出的对象，然后又反序列化出了一个对象，就存在两个对象，所以最后销毁了两个对象也就出现了执行了两次`__destruct`
这里我们看一个存在反序列化漏洞的代码
    test;
        }
    }
    $a = $_GET['value'];
    $a_unser = unserialize($a);
    ?>
这样我们就可以利用这个反序列化代码，利用方法是将需要使用的代码序列化后传入，看到这段代码上面有`echo`，我们尝试一下在这个页面显示`hacked by
ghtwf01`的字符，现在一边将这段字符串进行序列化，代码如下(这里的类名和对象名要和存在漏洞的代码一致，类名为`A`,对象名为`test`)
这样就得到这段字符序列化后的内容
将它传入目标网页，返回结果如下
既然网页上能输出，那说明也可以进行XSS攻击，尝试一下，虽然有点鸡肋2333，到这里应该懂得点什么叫反序列化漏洞了
一道简单的反序列化考点题  
得到序列化后的内容是
将序列化后的内容传入得到flag
现在再来一道bugku的反序列化题  
welcome to bugctf(这道题被恶搞的删了qwq，只好看看网上贴出的代码分析一下)
index.php
    ";  
        if(preg_match("/flag/",$file)){ 
            echo "不能现在就给你flag哦";
            exit();  
        }else{  
            include($file);   
            $password = unserialize($password);  
            echo $password;  
        }  
    }else{  
        echo "you are not the number of bugku ! ";  
    }  
    ?>
代码有点长我们先来分析一下这串代码想表达什么  
1.先`GET`传入参数`$txt`、`$file`、`$password`  
2.判断`$txt`是否存在，如果存在并且值为`welcome to the bugkuctf`就进一步操作，`$file`参数里面不能包含`flag`字段  
3.通过以上判断就`include($file)`，再将`$password`反序列化并输出
hint.php
    file)){  
                echo file_get_contents($this->file); 
                echo "";
            return ("good");
            }  
        }  
    }  
    ?>
`index.php`里面要求`$file`参数不能包含`flag`字段，所以文件不能包含`flag.php`，所以`$file=hint.php`，把`hint.php`包含进去，里面存在一个`file_get_concents函数`可以读文件，想到`index.php`里面的`unserialize`函数，所以只需要控制`$this->file`就能读取想要的文件  
用这段代码的结果传值给`$password`
`$password`进行反序列化后`$file`就被赋值为`flag.php`，然后`file_get_contents`就得到了`flag`
再来一个反序列化漏洞利用例子，代码如下
    file,$this->data);
            }
        }
        $file_name = $_GET['filename'];
        print "You have readfile ".$file_name;
        unserialize(file_get_contents($file_name));
    ?>
这串代码的意思是将读取的文件内容进行反序列化，`__destruct`函数里面是生成文件，如果我们本地存在一个文件名是`flag.txt`，里面的内容是
    O:3:"foo":2:{s:4:"file";s:9:"shell.php";s:4:"data";s:18:"";}
将它进行反序列化就会生成`shell.php`里面的内容为``
# CVE-2016-7124 __wakeup绕过
**__wakeup魔法函数简介**  
`unserialize()`会检查是否存在一个 `__wakeup()` 方法。如果存在，则会先调用 `__wakeup()`
方法，预先准备对象需要的资源  
反序列化时，如果表示对象属性个数的值大于真实的属性个数时就会跳过`__wakeup()`的执行  
**漏洞影响版本：**  
php5 target = "wakeup!";