than just a single perturbed graph. We argue that an effective
perturbation method should consider the evolution of the
original graph sequence. Therefore, we have the overall design
goals for our system as:
1) We aim to obfuscate social relationships while balancing
privacy for users’ social relationships and the usability for
real-world applications.
2) We aim to handle both the static and dynamic social
network topologies.
3) Our system should provide rigorous privacy guarantees
to defend against adversaries who have prior information
of the original graphs, and adversaries who can combine
multiple released graphs to infer more information.
4) Our method should be scalable to be applied in real-world
large-scale social graphs.
B. LinkMirage: Deployment
To improve the usability of our proposed obfusca-
tion approach (which will be described in detail
in
Section IV-C), and to avoid dependance on the OSN
providers, we developed a Facebook application (available:
https://apps.facebook.com/linkmirage/) that implements graph
construction (via individual user subscriptions) and obfusca-
tion. The work ﬂow of the LinkMirage deployment is as fol-
lows: (i) When a user visits the above URL, Facebook checks
the credentials of the user, asks whether to grant the user’s
friends permission, and then gets redirected to the application
hosting server. (ii) The application server authenticates itself,
3
and then queries Facebook for the information of the user’s
friends, and returns their information such as user’s id. The
list of user’s friends can then be collected by the application
server to construct a Facebook social graph for the current
timestamp. Leveraging LinkMirage, a perturbed graph for this
timestamp would be available which preserves the link privacy
of the users’ social relationships.
Real-world systems such as Uproxy, Lantern, Kaleidoscope
[17], anonymity systems [11], [28], [29], Sybil defenses sys-
tems [8], [43] can directly beneﬁt from our protocol through
automatically obtaining the perturbed social relationships. Fur-
thermore, our protocol can enable privacy-preserving graph
analytics for OSN providers.
C. LinkMirage: Perturbation Algorithm
Social networks evolve with time and publishing a time
series of perturbed graphs raises a serious privacy challenge:
an adversary can combine information available from multiple
perturbed graphs over time to compromise the privacy of users’
social contacts [5], [10], [38]. In LinkMirage, we take a time
series of graph topologies into consideration, to account for
the evolution of the social networks. Intuitively, the scenario
with a static graph topology is just a special situation of the
temporal graph sequence, and is thus inherently incorporated
in our model.
Consider a social graph series G0 = (V0, E0),··· ,GT =
(VT , ET ). We want to transform the graph series to G(cid:48)
0 =
T ), such that the vertices in G(cid:48)
(V0, E(cid:48)
t
remain the same as in the original graph Gt, but the edges are
perturbed to protect link privacy. Moreover, while perturbing
the current graph Gt, LinkMirage has access to the past graphs
in the time series (i.e., G0,··· , Gt−1). Our perturbation goal is
to balance the utility of social graph topologies and the privacy
of users’ social contacts, across time.
T = (VT , E(cid:48)
0),··· ,G(cid:48)
Approach Overview: Our perturbation mechanism for
LinkMirage is illustrated in Fig. 2.
Static scenario: For a static graph Gt−1, we ﬁrst cluster
it into several communities, and then perturb the links within
each community. The inter-cluster links are also perturbed to
protect their privacy.
Dynamic scenario: Let us suppose that Gt evolves from
Gt−1 by addition of new vertices (shown in blue color). To
perturb graph Gt, our intuition is to consider the similarity
between graphs Gt−1 and Gt.
First, we partition Gt−1 and Gt into subgraphs, by clustering
each graph into different communities. To avoid randomness
(guarantee consistency) in the clustering procedure and to
reduce the computation complexity, we dynamically cluster the
two graphs together instead of clustering them independently.
Noting that one green node evolves by connecting with a new
blue node, we free 1 all the nodes located within m = 2 hops of
this green node (the other two green nodes and one red node)
and merge the remaining three red nodes to a big virtual node.
Then, we cluster these new nodes, the freed nodes and the
remaining virtual node to detect communities in Gt.
Next, we compare the communities within Gt−1 and Gt,
and identify the changed and unchanged subgraphs. For the
unchanged subgraphs C1, C2, we set
their perturbation at
time t to be identical to their perturbation at time t − 1,
1We free the nodes from the previously clustering hierarchy.
Fig. 2. Our perturbation mechanism for Gt. Assume that Gt−1 has already
been dynamically obfuscated, based on dynamic clustering (step 1) and
selective perturbation (step 2). Our mechanism analyzes the evolved graph
Gt (step 3) and dynamically clusters Gt (step 4) based on the freed m hop
neighborhood (m = 2) of new links (between green and blue nodes), the
merging virtual node (the large red node in step 4), and the new nodes. By
comparing the communities in Gt−1 and Gt, we can implement selective
perturbation (step 5), i.e. perturb the changed blue community independently
and perturb the unchanged red and green communities in the same way as
G(cid:48)
t−1, and then perturb the inter-cluster links.
1, C(cid:48)
denoted by C(cid:48)
2. For the changed subgraph C3, we perturb it
independently to obtain C(cid:48)
3. We also perturb the links between
communities to protect privacy of these inter-cluster links.
Finally, we publish G(cid:48)
3 and
the perturbed inter-cluster links. There are two key steps in
our algorithm: dynamic clustering and selective perturbation,
which we describe in detail as follows.
t as the combination of C(cid:48)
2, C(cid:48)
1, C(cid:48)
1) Dynamic Clustering: Considering that communities in
social networks change signiﬁcantly over time, we need to
address the inconsistency problem by developing a dynamic
community detection method. Dynamic clustering aims to ﬁnd
community structures in evolving graphs by simultaneously
considering consecutive graphs in its clustering algorithms.
There are several methods in the literature to cluster evolving
graphs [3], but we found them to be unsuitable for use
in our perturbation mechanism. One approach to dynamic
clustering involves performing community detection at each
timestamp independently, and then establishing relationships
between communities to track their evolution [3]. We found
that this approach suffers from performance issues induced by
inherent randomness in clustering algorithms, in addition to
the increased computational complexity.
Another approach is to combine multiple graphs into a
single coupled graph [3]. The coupled graph is constructed by
adding edges between the same nodes across different graphs.
Clustering can be performed on the single coupled graph. We
found that the clustering performance is very sensitive to the
weights of the added links, resulting in unstable clustering
results. Furthermore, the large dimensionality of the coupled
graph signiﬁcantly increases the computational overhead.
For our perturbation mechanism, we develop an adaptive
dynamic clustering approach for clustering the graph Gt using
the clustering result for the previous graph Gt−1. This enables
our perturbation mechanism to (a) exploit the link correla-
tion/similarity in consecutive graph snapshots, and (b) reduce
computation complexity by avoiding repeated clustering for
unchanged links.
Clustering the graph Gt from the clustering result of the
previous graph Gt−1 requires a backtracking strategy. We use
the maximum-modularity method [31] for clustering, which is
4
1tG-tG5.selectiveperturbation4.dynamicclustering3.evolution1C2C1.clustering2.perturbation2C1C3CtG¢1tG-¢1C¢2C¢1C¢2C¢3C¢Time
# of nodes
# of edges
Average degree
0
9,586
48,966
5.11
TABLE I. Temporal Statistics of the Facebook Dataset.
6
1
2
3
4
5
9,719
38,058
3.91
11,649
47,024
4.03
13,848
54,787
3.96
14,210
49,744
3.50
16,344
58,099
3.55
18,974
65,604
3.46
7
26,220
97,095
3.70
8
35,048
142,274
4.06
hierarchical and thus easy to backtrack. Our backtrack strategy
is to ﬁrst maintain a history of the merge operations that led to
the current clustering. When an evolution occurs, the algorithm
backtracks over the history of merge operations, in order to
incorporate the new additions and deletions in the graph.
More concretely,
if the link between node x and node
y is changed (added or deleted), we omit all
the m-hop
neighborhoods of x and y as well as x and y themselves
from the clustering result of the previous timestamp, and then
perform re-clustering. All the new nodes, the changed nodes
and their m-hop neighbors, and the remaining merged nodes
in the previous clustering result would be considered as basic
elements for clustering Gt (recall Figure 2).
For efﬁcient
implementation, we store the intermediate
results of the hierarchical clustering process in a data structure.
Upon link changes between x, y, we free the m-hop neighbor-
hood of x, y from the stored data structure.
2) Selective perturbation:
Intra-cluster Perturbation: After clustering Gt based on
Gt−1 using our dynamic clustering method, we perturb Gt
based on Gt−1 and the perturbed G(cid:48)
t−1. First, we compare
the communities detected in Gt−1 and Gt, and classify them
as changed or unchanged. Our unchanged classiﬁcation does
not require that the communities are exactly the same, but
that the overlap among vertices/links exceeds a threshold. Our
key idea is to keep the perturbation process for links in the
unchanged communities to be identical to their perturbation
in the previous snapshot. In this manner, we can preserve
the privacy of these unchanged links to the largest extent;
it is easy to see that alternate approaches would leak more
information. For the communities which are classiﬁed as
changed, our approach is to perturb their links independently
of the perturbation in the previous timestamp. For independent
perturbations, we leverage the static perturbation method of
Mittal et al. in [27]. Their static perturbation deletes all the
edges in the original graph, and replaces each edge (v, u)
with a fake edge (v, w) selected from the k-hop random walk
starting from v. Larger perturbation parameter k corresponds
to better privacy and leads to worse utility.
Inter-cluster Perturbation: Finally, we need to interconnect
the subgraphs identiﬁed above. Suppose that |va| nodes and
|vb| nodes are connecting communities a and b respectively,
and they construct an inter-community subgraph. For each
marginal node va(i) ∈ va and vb(j) ∈ vb (here the marginal
node in community a (resp.b) refers to the node that has neigh-
bors in the other community b (resp.a)) , we randomly connect
them with probability deg(va(i)) deg(vb(j))|va|
.2 Here, all the
computations for deg(·),|v·(·)|,|E·| only consider the marginal
nodes. We can combine the perturbed links corresponding to
the unchanged communities, changed communities, and inter-
community subgraphs, to compute the output of our algorithm,
|Eab|(|va|+|vb|)
2This probability is set for the preservation of degree distributions as
analyzed in Section VII.
5
Algorithm 1 LinkMirage, with dynamic clustering (steps
1-2) and selective perturbation (steps 3-6). The parameter
k denotes the perturbation level for each community.
Here, ch, un, in are short for changed, unchanged, inter-
community, respectively.
{Gt, Gt−1, G(cid:48)
Input:
Output: G(cid:48)
t;
G(cid:48)
t, Ct =null;
if t=0;
t−1} if t ≥ 1 or {Gt} if t = 0;
cluster G0 to get C0;
label C0 as changed, i.e. C0−ch = C0;
endif
/*Begin Dynamic Clustering*/
1. free the nodes within m hops of the changed links;
2. re-cluster the new nodes, the freed nodes, the remai-
-ning merged virtual nodes in C(t−1) to get Ct;
/*End Dynamic Clustering*/
/*Begin Selective Perturbation*/
3. ﬁnd the unchanged communities Ct−un and the chan-
4. let G(cid:48)
5. perturb Ct−ch for G(cid:48)
6. foreach community pair a and b;
t−ch by the static method;
if both of the communities belong to Ct−un
-ged communities Ct−ch;
(t−1)−un;
t−un = G(cid:48)
C(cid:48)
t−in(a, b) = C(cid:48)
(t−1)−in(a, b);
else
foreach marginal node va(i) in a and vb(j) in b
randomly add an edge (va(i), vb(j)) with pro-
-bability deg(va(i)) deg(vb(j))|va|
t−in(a, b);
t = [G(cid:48)
|Eab|(|va|+|vb|)
/*End Selective Perturbation*/
t−un, G(cid:48)
return G(cid:48)
t−ch, G(cid:48)
to G(cid:48)
t−in];
i.e., G(cid:48)
t.
LinkMirage not only preserves the structural characteristics
of the original graph series, but also protects the privacy of
the users by randomizing the original links. As compared to
prior work, our method provides stronger privacy and utility
guarantees for evolving graphs. Detailed procedures are stated
in Algorithm. 1.
LinkMirage improves the state-of-the-art methods such as
[27] by incorporating the temporal graph topology. Surpris-
ingly, our approach of ﬁrst isolating communities and then
selectively perturbing them provides beneﬁts even in a static
context! This is because previous static approaches use a single
parameter to control the privacy/utility trade-off. Thus, if we
apply them to the whole graph using high privacy parameters,