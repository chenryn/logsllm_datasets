```
.\" Copyright (C) 2001 Andries Brouwer
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date. The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein. The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.TH LOCKFILE 3 "2001-10-18" "Linux Programmer's Manual"
.SH NAME
flockfile, ftrylockfile, funlockfile \- 锁定和解锁标准输入输出文件 FILE
.SH SYNOPSIS
.nf
.B #include <stdio.h>
.sp
.BI "void flockfile(FILE *" filehandle);
.br
.BI "int ftrylockfile(FILE *" filehandle);
.br
.BI "void funlockfile(FILE *" filehandle);
.fi
.SH DESCRIPTION
标准输入输出库（stdio）函数是线程安全的。这是通过为每个 `FILE` 对象赋予一个锁定计数和（当锁定计数非零时）一个所有者线程来实现的。对于每个库函数调用，这些函数会等待直到 `FILE` 对象不再被其他线程锁定，然后锁定它，进行所需的 I/O 操作，再对其解锁。

注意：这种锁定与由 `flock(2)` 和 `lockf(3)` 实现的锁定无关。

所有这些操作对 C 程序员来说都是透明的，但有时需要更细粒度的控制。例如，某个线程可能需要执行一系列不可分割的 I/O 操作，而不希望被其他线程中断。此外，出于效率考虑，应尽量减少锁定次数以提高性能。

为此，一个线程可以显式地锁定 `FILE` 对象，执行其 I/O 操作序列，然后解锁。这样可以避免其他线程的干扰。如果目的是提高效率，应使用 stdio 函数的非锁定版本进行 I/O 操作，如使用 `getc_unlocked()` 和 `putc_unlocked()` 代替 `getc()` 和 `putc()`。

函数 `flockfile()` 会等待 `*filehandle` 不再被其他线程锁定，然后使当前线程成为 `*filehandle` 的所有者，并增加锁定计数。

函数 `funlockfile()` 会减少锁定计数。

函数 `ftrylockfile()` 是 `flockfile()` 的非阻塞版本。如果 `*filehandle` 已被其他线程锁定，则该函数不做任何操作；否则，它会获取所有权并增加锁定计数。
.SH RETURN VALUE
函数 `ftrylockfile()` 在成功获取锁定时返回 0；如果失败则返回非零值。
.SH ERRORS
无。
.SH AVAILABILITY
这些函数在定义了 `_POSIX_THREAD_SAFE_FUNCTIONS` 时可用。它们存在于 libc 5.1.1 之后的 libc 版本中，以及 glibc 2.0 之后的 glibc 版本中。
.SH CONFORMING TO
POSIX.1
.SH SEE ALSO
.BR unlocked_stdio (3)
```