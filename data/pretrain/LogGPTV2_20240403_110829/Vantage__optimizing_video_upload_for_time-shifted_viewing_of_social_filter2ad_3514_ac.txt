received, and to disseminate these higher quality video segments
to the CDN. As described in Section 4.4, Vantage’s scheduler pe-
nalizes retransmissions that are spread apart, which helps limit the
rate at which past video segments need to be updated. Requiring
only these minor changes to the upload endpoint makes Vantage
well-suited for current SLVS architectures.
Scalable video coding. Vantage’s approach of sending quality-
enhancing retransmissions bears similarity to the enhancement
layers used in scalable video coding (SVC) techniques. Indeed, Van-
tage’s design could be simpliﬁed by using an SVC codec, since
the video would only need to be encoded once, and storage of
SIGCOMM ’19 August 19–23, 2019 Beijing, China
Devdeep Ray, Jack Kosaian, K. V. Rashmi, Srinivasan Seshan
high-quality frames would not be necessary. Despite these bene-
ﬁts, we have chosen not to design Vantage speciﬁcally for SVC
codecs because (1) SVC codecs are not widely adopted, limiting
hardware-accelerated encoding support, and (2) while simple SVC
schemes with coarse grained scalability do not have signiﬁcant
overhead, ﬁne grained SVC schemes have poor compression eﬃ-
ciency and are signiﬁcantly more compute intensive compared to
non-layered codecs.
Even in the absence of the aforementioned downsides of SVC,
the use of SVC alone cannot overcome the challenges involved with
optimizing the video upload for multiple time-shifted delays. An
SVC based live video upload mechanism would still need to make
bandwidth allocation decisions between the real-time base video
stream and the enhancement streams, and also choose which frames
to retransmit. While the ability to encode the video only once and
not having to store high quality frames is an advantage of using
SVC, the use of non-layered codecs is better in some situations.
When retransmitting a sequence of contiguous frames, encoding
a P-frame with a high quality past frame as the reference is often
more eﬃcient than encoding the frame with a low quality version
of itself as the reference frame.
While SVC provides some clear beneﬁts, we believe compati-
bility with standardized codecs and hardware is more important
for adoption in the real world today. We would only need to make
minor tweaks to the optimization formulation used in Vantage’s
scheduler for generating optimized schedules for SVC codecs.
Overhead of two encoders. Vantage’s approach of using
two separate encoders to compress real-time frames and quality-
enhancing retransmissions is computationally expensive. We be-
lieve this overhead is well-justiﬁed: Vantage gains signiﬁcant im-
provements in the QoE across multiple viewing delays for SLVS
applications, and the trend of increasing hardware acceleration
support further justiﬁes this tradeoﬀ.
4.7 Implementation details
We have implemented Vantage in C++, with the scheduler using the
Gurobi [19] library to solve the optimization problem. To reduce
computational requirements, we limit Gurobi to run on a single core
and the execution engine to run on a single thread. Vantage uses
the VP8 encoder from Salsify [18] because it provides a convenient
API for controlling the size of each frame. For performance reasons,
Vantage compresses the high-quality frames and encodes real-time
frames and the quality-enhancing retransmissions in parallel.
5 EVALUATION
We evaluate Vantage and compare its performance to conventional
live video upload techniques for SLVS applications.
5.1 Methodology
5.1.1 Metrics. Vantage is designed to improve the quality of
video playback across the various time-shifted viewing delays by
replacing low quality frames with high-quality versions and ﬁlling
in the gaps caused due to skipped frames. While Vantage’s scheduler
is designed to optimize the SSIM [42] metric, Vantage can support
other frame level reference metrics (like PSNR, etc.). We use the
SSIM metric when measuring the quality of a single frame and
use the SQI-SSIM [16] metric to compute an overall video quality
score from the SSIM values of the individual frames. Most objective
video quality metrics do not consider the eﬀect of stalling when
calculating video quality [43]. SQI-SSIM is a uniﬁed metric that
takes into account the full reference quality of each frame and
also the duration and frequency of video stalls. SQI-SSIM uses
an exponential decay function instead of zeros to ﬁll in the SSIM
of missing frames. Thus, shorter stalls have a smaller eﬀect on
the overall video quality. When video playback resumes after a
stall, the SSIM of the subsequent frames are penalized according to
an exponential decay function, thus accounting for the frequency
of stalls. We note that Vantage can support other video quality
assessment metrics (such as PSNR).
5.1.2 Baselines. While there is signiﬁcant prior work on opti-
mizing video streaming for the individual cases of live streaming
and VOD-style video streaming, we are not aware of any prior
research on optimizing video quality simultaneously for real-time
streaming and time-shifted viewing of the streams. Vantage is de-
signed to work with existing congestion control and video coding
systems and enhance the performance of these systems for scenar-
ios involving time-shifted viewing of live streams, and is not meant
to be a standalone end-to-end solution for SLVS video upload.
We compare Vantage to the best case performance for low latency
streaming and VOD-style streaming using an idealized model for
bandwidth estimation and congestion control:
Low latency streaming (Base-RT). Existing low latency opti-
mized streaming systems like WebRTC and Skype maintain low
latency by conservatively utilizing the network bandwidth to pre-
vent network saturation. Recent approaches like Salsify [18] utilize
the network better by matching the instantaneous network esti-
mate through tight coupling of the video encoder and the transport
protocol. Base-RT models these systems by encoding individual
video frames at a bitrate that closely follows the real-time network
estimate. This results in optimal video quality performance for low
latency streaming.
Buﬀered streaming (Base-Delay). The use of larger buﬀers at
the sender enables a streaming application to encode video at the
average network bandwidth. This is similar to conventional ABR
based video streaming solutions like HLS [3] and MPEG-DASH [5],
which split the video into small segments where each segment
is encoded at a speciﬁc bitrate. To model the characteristics of
streaming techniques that use buﬀers and slower rate adaptation,
we use a window of 30 seconds to compute the average bandwidth
and encode the video at this bitrate. This results in optimal video
quality for cases where a delay of 30 seconds is acceptable.
5.1.3 Evaluation setup. We evaluate Vantage with a combina-
tion of videos and network traces with diﬀerent characteristics. Our
experiments were run on a machine with Intel(R) Xeon(R) proces-
sors, limiting the Gurobi [19] solver to a single core for emulating
computational limits in mobile environments. Unless otherwise
speciﬁed, we evaluate Vantage for a uniform time-shifted viewing
delay distribution for the optimization described in Section 4.2.1
and use a 2 second period for the optimizer. This choice is further
discussed in Section 5.2.5. We evaluate the eﬀects of diﬀerent dis-
tributions of the time-shifted viewing delays in Section 5.2.3. We
run the live streams for 150 seconds and ignore the data for the
Vantage: Optimizing video upload for time-shi(cid:28)ed viewing of social live streams
SIGCOMM ’19 August 19–23, 2019 Beijing, China
Talking Heads
City Panning
Animation
Trace
Delay
Verizon
LTE
AT&T
LTE
TMobile
UMTS
Real-time
30s delay
Real-time
30s delay
Real-time
30s delay
Base-RT Base-Delay Vantage
0.8750
0.8885
0.8896
0.9438
(0.8890)
(0.9094)
0.5538
0.5638
0.5705
0.8155
(0.5672)
(0.6846)
0.4604
0.4957
0.5054
0.5840
(0.5005)
(0.5222)
0.5854
0.9552
(0.7703)
0.2236
0.9098
(0.5667)
0.1942
0.6774
(0.4358)
Base-RT Base-Delay Vantage
0.7792
0.8003
0.8306
0.8012
(0.8008)
(0.8049)
0.4880
0.5224
0.6760
0.5285
(0.5254)
(0.5820)
0.3199
0.3371
0.3451
0.4011
(0.3411)
(0.3605)
0.6479
0.8472
(0.7475)
0.4008
0.7198
(0.5603)
0.0965
0.4834
(0.2899)
Base-RT Base-Delay Vantage
0.9225
0.9279
0.9834
0.9290
(0.9284)
(0.9529)
0.6648
0.6511
0.9327
0.6576
(0.6543)
(0.7987)
0.4833
0.5055
0.5169
0.6143
(0.5112)
(0.5488)
0.7504
0.9818
(0.8661)
0.4370
0.9600
(0.6985)
0.1390
0.7322
(0.4356)
Table 1: SQI-SSIM achieved by the baselines and Vantage for each combination of the videos and the network traces. In each
case, the average SQI-SSIM across delays (indicated within parentheses) is the highest for Vantage (bolded).
last 30 seconds, since the measurements for the last 30 seconds
may be aﬀected by the early termination of the program. We repeat
videos and traces that are shorter than 150 seconds until the entire
simulation is complete.
Videos. We chose three diverse and representative videos from
the Xiph.org Test Media repository [10] for our evaluation. Appen-
dix B contains screenshots of each of these three videos. “Talking
Heads” contains four people talking in front of a static background.
This style of video is the most common among SLVS streams [37]
and is typically easier to encode. “City Panning” pans across the city
of Stockholm. This video is much harder to encode due to a higher
amount of moving content and very ﬁne details. “Animation” is an
animated video sequence with varying degrees of motion over the
duration of the video, which makes some segments easy to encode,
while other parts are harder to encode.
Bandwidth traces. We chose a diverse set of network traces
from the Mahimahi [31] repository: a high bandwidth LTE trace, a
highly variable LTE trace, and a low bandwidth UMTS trace. We
ﬁnd these traces to be representative of Vantage’s performance
across all traces in the repository.
Transport layer emulation. We use a bandwidth averaging
window of 100 ms for Base-RT and the real-time stream in Vantage.
We use the average bandwidth in the past 1 second as the bandwidth
estimate to Vantage’s scheduler. For Base-Delay, we use the average
bandwidth of the previous 30 seconds. We run Vantage and the
receiver on the same machine and emulate packet transmissions
according to the provided bandwidth trace.
Many live-streaming systems use FEC [21] or packet-level re-
transmission for dealing with network losses. These techniques can
be incorporated into the network model by reducing the bandwidth
estimates provided to Vantage and using the excess bandwidth for
loss recovery mechanisms (e.g., FEC). Since we evaluate baselines
using the same model, this provides a fair comparison between
Vantage and existing techniques for live video upload.
Encoder performance. Salsify’s encoder is a software-based
VP8 encoder written in C++. Software encoders are much slower
than hardware based encoders. We observed that even with parallel
encoding of the frames, the encoder was not able to achieve a rate
of 30 FPS while encoding 1280 × 720 (HD) videos. Hence, we run
Vantage with time dilation to allow the encoder to run at 30 FPS in
virtual time, but limit the optimization to P seconds of wall clock
time. This allows us to evaluate Vantage in a manner that is agnostic
to the encoding speed of the speciﬁc encoder we chose.
Ethics. This work does not raise any ethical issues. We use test
video sequences [10] and anonymized bandwidth traces [31] that
are publicly available.
5.2 Results
The highlights of our evaluation are as follows:
• Across a variety of upload bandwidth traces and videos, Vantage
improves the SQI-SSIM for time-shifted viewing over Base-RT
by 19.9% on average (Section 5.2.1).