title:JITGuard: Hardening Just-in-time Compilers with SGX
author:Tommaso Frassetto and
David Gens and
Christopher Liebchen and
Ahmad-Reza Sadeghi
JITGuard: Hardening Just-in-time Compilers with SGX
Tommaso Frassetto
CYSEC/Technische Universität Darmstadt
PI:EMAIL
Christopher Liebchen
CYSEC/Technische Universität Darmstadt
PI:EMAIL
ABSTRACT
Memory-corruption vulnerabilities pose a serious threat to mod-
ern computer security. Attackers exploit these vulnerabilities to
manipulate code and data of vulnerable applications to generate
malicious behavior by means of code-injection and code-reuse at-
tacks. Researchers already demonstrated the power of data-only
attacks by disclosing secret data such as cryptographic keys in the
past. A large body of literature has investigated defenses against
code-injection, code-reuse, and data-only attacks. Unfortunately,
most of these defenses are tailored towards statically generated
code and their adaption to dynamic code comes with the price of
security or performance penalties. However, many common appli-
cations, like browsers and document viewers, embed just-in-time
compilers to generate dynamic code.
The contribution of this paper is twofold: first, we propose a
generic data-only attack against JIT compilers, dubbed DOJITA.
In contrast to previous data-only attacks that aimed at disclos-
ing secret data, DOJITA enables arbitrary code-execution. Second,
we propose JITGuard, a novel defense to mitigate code-injection,
code-reuse, and data-only attacks against just-in-time compilers
(including DOJITA). JITGuard utilizes Intel’s Software Guard Ex-
tensions (SGX) to provide a secure environment for emitting the
dynamic code to a secret region, which is only known to the JIT
compiler, and hence, inaccessible to the attacker. Our proposal is
the first solution leveraging SGX to protect the security critical JIT
compiler operations, and tackles a number of difficult challenges.
As proof of concept we implemented JITGuard for Firefox’s JIT
compiler SpiderMonkey. Our evaluation shows reasonable overhead
of 9.8% for common benchmarks.
1 INTRODUCTION
Dynamic programming languages, like JavaScript, are increasingly
popular since they provide a rich set of features and are easy to
use. They are often embedded into other applications to provide
an interactive interface. Web browsers are the most prevalent ap-
plications embedding JavaScript run-time environments to enable
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
© 2017 Association for Computing Machinery.
ACM ISBN 978-1-4503-4946-8/17/10...$15.00
https://doi.org/10.1145/3133956.3134037
David Gens
CYSEC/Technische Universität Darmstadt
PI:EMAIL
Ahmad-Reza Sadeghi
CYSEC/Technische Universität Darmstadt
PI:EMAIL
website creators to dynamically change the content of the current
web page without requesting a new website from the web server.
For efficient execution modern run-time environments include just-
in-time (JIT) compilers to compile JavaScript programs into native
code.
Code-injection/reuse. Unfortunately, the run-time environment
and the application that embeds dynamic languages often suffer
from memory-corruption vulnerabilities due to massive usage of un-
safe languages such as C and C++ that are still popular for compatibil-
ity and performance reasons. Attackers exploit memory-corruption
vulnerabilities to access memory (unintended by the programmer),
corrupt code and data structures, and take control over the targeted
software to perform arbitrary malicious actions. Typically, attackers
corrupt code pointers to hijack the control flow of the code, and to
conduct code-injection [2] or code-reuse [45] attacks.
While code injection attacks have become less appealing, mainly
due to the introduction of Data Execution Prevention (DEP) or
writable xor executable memory (W⊕X), state-of-the-art attacks de-
ploy increasingly sophisticated code-reuse exploitation techniques
to inject malicious code-pointers (instead of malicious code), and
chain together existing instruction sequences (gadgets) to build the
attack payload [51].
Code-reuse attacks are challenging to mitigate in general be-
cause it is hard to distinguish whether the execution of existing
code is benign or controlled by the attacker. Consequently, there
exists a large body of literature proposing various defenses against
code-reuse attacks. Prominent approaches in this context are code
randomization and control-flow integrity (CFI). The goal of code
randomization [34] schemes is to prevent the attacker from learning
addresses of any gadgets. However, randomization techniques re-
quire extensions [5, 7, 16, 17, 24] to prevent information-disclosure
attacks [18, 50, 52]. Control-flow integrity (CFI) [1] approaches
verify whether destination addresses of indirect branches com-
ply to a pre-defined security policy at run time. Previous work
demonstrated that imprecise CFI policies in fact leave the system
vulnerable to code-reuse attacks [8, 9, 14, 19, 25, 26, 49]. Further,
defining a sufficiently accurate policy for CFI was shown to be
challenging [21].
Data-only attacks. In addition to the aforementioned attack
classes, data-only attacks [13] have been recently shown to pose a
serious threat to modern software security [30]. Protecting against
data-only attacks in general is even harder because any defense
mechanism requires the exact knowledge of the input data and
the intended data flow. As such, solutions that provide memory
safety [43, 44] or data-flow integrity [10] generate impractical per-
formance overhead of more than 100%.
Session K4:  Secure EnclavesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2405JIT attacks. Existing defenses against the attack techniques men-
tioned above are mainly tailored towards static code making their
adoption for dynamic languages difficult. For example, the JIT-
compiler regularly modifies the generated native code at run time
for optimization purposes. On the one hand, this requires the code
to be writable, and hence, enables code-injection attacks. On the
other hand, it makes state-of-the-art defenses challenging to adopt,
either due to the increased performance overhead in the case of
CFI [47] (+9.6%; in total 14.6%)1, or due to unclear practicality of
code-pointer hiding [16]. In particular, the authors point out that
the overhead for the JIT version is much higher and not every
defense deployed for static code was applied to the JIT code [16].
Further, the attacker controls the input of the JIT compiler, and
can input a program that is compiled to native code containing
all required gadgets. Finally, the attacker can tamper with the in-
put of the JIT compiler to generate malicious code, as we show in
Section 3.
Goals and Contributions. In this paper we present our defense,
JITGuard, that hardens JIT compilers for browsers against disclo-
sure attacks. To motivate our defense we first propose a generic
data-only attack against the JIT compiler that allows to execute
arbitrary code, and can bypass all existing code-injection and code-
reuse defenses. Concurrently to our work, researchers published a
data-only attack that targets internal data structures of Microsoft’s
JIT Engine [57]. As we discuss in Section 8.3 JITGuard prevents
this attack as well as our DOJITA. To protect the JIT compiler
against run-time attacks without relying on additional defenses
like code randomization or control-flow integrity, JITGuard uti-
lizes Intel’s Software Guard Extensions (SGX) [32] to execute the
JIT-code compiler in an isolated execution environment. This en-
ables JITGuard to hide the location of JIT-code in memory while
simultaneously preventing an adversary from launching data-only
attacks on the JIT-compiler. In contrast to previous work we do not
require expensive analysis of the generated program to construct
a CFI policy [47], or synchronization between processes [54], or
repetitive system calls to change memory permission [16, 41] while
providing protection against data-only attacks.
To summarize, our main contributions are:
• A generic data-only attack against JIT compilers that can by-
pass all existing JIT code protection techniques. In contrast to a
previous data-only attack [30], which only allows to manipulate
data flow (e.g., to leak cryptographic keys), our attack allows to
execute arbitrary code without manipulating any code pointers.
• A novel JIT compiler protection, JITGuard, which hardens JIT
compilers against code-injection, code-reuse, and data-only at-
tacks. JITGuard utilizes SGX to isolate the JIT compiler from the
surrounding application. As we elaborate in Section 5 this raises
a number of challenges and is technically involved.
• A proof-of-concept implementation of JITGuard for Firefox’s
JavaScript JIT compiler SpiderMonkey and real-world SGX hard-
ware. We explain in detail how we solve several performance-
related challenges that arise when executing the JIT compiler in
an enclave.
1Compared to MCFI [46], a CFI implementation by the same author for static code.
Figure 1: Main components of a JavaScript JIT engine.
• An extensive performance and security evaluation for JITGuard.
We report an average overhead of 9.8% for the integrated bench-
marking suites of SpiderMonkey.
2 BACKGROUND AND RELATED WORK
In this section we briefly explain the technical concepts required to
understand the remainder of this paper. We start with a short intro-
duction of Intel’s Software Guard Extensions (SGX) [32] which con-
stitutes the trusted computing base for our defense tool JITGuard.
Then we explain the basic principles of just-in-time compilers for
browsers, which is the main use case for our proof-of-concept im-
plementation in this paper.
2.1 Software Guard Extensions
SGX is a hardware extension enabling isolated execution environ-
ments called enclaves. Enclaves are created within a user-mode
process and cannot be accessed by any (higher privileged) system
entity, including the creator process and the OS. This is enforced
by the CPU through access control. In particular, the memory of
an enclave can only be accessed by the code executed within the
enclave. However, this policy can only be enforced while the en-
clave memory resides within the CPU-internal memory (cache). To
protect enclave memory outside of the CPU, it is encrypted and
integrity-protected with an enclave-specific key. The encryption
prevents attackers from accessing any secrets that are stored within
enclaves. Before the enclave memory is loaded into the CPU, SGX
verifies its integrity to ensure that an adversary did not include any
modifications.
The code executed within an enclave runs in the context of the
creating process. Thus, it can access the process memory, e.g., for
communicating with the host. SGX ensures that the enclave is
isolated from other processes, enclaves, and the operating system.
2.2 JIT Engines
JIT engines provide a run-time environment for high-level scripting
languages, allowing the script to interact with application-specific
ApplicationJavaScript EngineInterpreterJIT CompilerIRBytecodeDataCodeLegend:Garbage CollectorJavaScript SourceJITCodeApplication-speciﬁc functionality123Session K4:  Secure EnclavesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2406functionality. They leverage so-called just-in-time (JIT) compilers
to transform an interpreted program or script into native code at
run time. Browsers in particular make heavy use of JIT compilers
to increase the performance of JavaScript programs. JavaScript is a
high-level scripting language explicitly designed for browsers to
dynamically change the content of a website, e.g., in reaction to user
input. In general, JIT engines consist of at least three main com-
ponents, as shown in Figure 1: 1 an interpreter, 2 a JIT compiler
and 3 a garbage collector.
1 Interpreter. The purpose of JIT compilers is to increase the
execution performance of JavaScript by compiling the script to
native code. Since compilation can be costly, usually not all of
the scripting code is compiled. Instead, JIT engines include an
interpreter which transforms the input program into unoptimized
bytecode, which is then executed by the interpreter. During the
execution of the bytecode, the interpreter profiles the JavaScript
program to identify parts (i.e., usually functions) of the code which
are executed frequently (hot code). When the interpreter identifies
a hot code path, it estimates if compilation to native code would be
more efficient than continuing to interpret the bytecode. If this is
the case, it passes the hot code to the JIT compiler.
2 JIT compiler. The JIT compiler takes the bytecode as input
and outputs corresponding native machine code. Similar to regu-
lar compilers, the JIT compiler first transforms the bytecode into
an intermediate representation (IR) of the program, which is then
compiled into native code, also called JIT code. In contrast to the
bytecode, which is interpreted in a restricted environment through
a virtual machine, this native code is executed directly by the pro-
cessor that runs the browser application. To ensure that malicious
JavaScript programs cannot harm the machine of the user, the JIT
compiler limits the capabilities of the emitted JIT code. In partic-
ular, the compiled program cannot access arbitrary memory, and
the compiler does not emit potentially dangerous instructions, e.g.,
system call instructions. Further, the emitted native code is con-
tinuously optimized, and eventually, de-optimized when the JIT
compiler determines that this is not needed anymore. Because the
JIT compiler has to write the emitted native code to memory as
part of its output, the most straightforward way of setting up JIT
code pages is to set them as read-write-executable. Since such pages
represent an easy target for attackers, browsers started mapping
JIT pages as writable while the compiler emits the native code, and
re-mapping the JIT pages to non-writable afterwards [41]. How-
ever, there is still a window of opportunity for an attacker while
the compiler is emitting the code.
3 Garbage Collector. The last major component is the garbage
collector. In contrast to C and C++, in JavaScript the memory is man-
aged automatically. This means that the garbage collector tracks
memory allocations and releases unused memory when it is no
longer needed.
2.3 JIT-based Attacks and Defenses
Typically attacks on JIT compilers exploit the read-write-executable
JIT memory in combination with the fact that attackers can in-
fluence the output of the JIT compiler by providing a specially
Figure 2: During JIT spraying the attacker exploits that large constants are
directly transferred into the native code. By jumping into the middle of an
instruction the attacker can execute arbitrary instructions that are encoded
into large constants.