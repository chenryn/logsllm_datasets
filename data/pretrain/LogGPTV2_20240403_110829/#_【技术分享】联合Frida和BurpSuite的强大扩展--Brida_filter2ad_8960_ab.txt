    	// from ASCII HEX). Use auxiliary functions for the conversions.
    	contextcustom3: function(message) {
    		return "6768";
    	},
    	// Function executed when executed Brida contextual menu option 4.
    	// Input is passed from Brida encoded in ASCII HEX and must be returned in ASCII HEX (because Brida will decode the output
    	// from ASCII HEX). Use auxiliary functions for the conversions.
    	contextcustom4: function(message) {
    		return "6768";
    	}
    }
    // 2 - AUXILIARY FUNCTIONS
    // Convert a hex string to a byte array
    function hexToBytes(hex) {
        for (var bytes = [], c = 0; c >> 4).toString(16));
            hex.push((bytes[i] & 0xF).toString(16));
        }
        return hex.join("");
    }
    // 3 - FRIDA HOOKS (if needed)
    if(ObjC.available) {
    	// Insert here Frida interception methods, if needed 
    	// (es. Bypass Pinning, save values, etc.)
    }
代码中的注释写的非常清楚，我说一下我认为的重点。
**rpc.exports的每一项是一个函数， : 前面的为函数名（全部为小写），比如 contextcustom1,
后面为函数的具体内容，rpc.exports中的函数都可以被 Brida调用。**
**contextcustom1 和 contextcustom2可以在 burp中使用右键调用，不能改他们的名字**
**函数接收的参数，和返回的数据都是以
16进制编码的，所以我们使用时要先对他们进行16进制解码，然后返回的时候在进行16进制编码。在上述脚本中包含了这些转换所需的函数，方便我们进行处理。  
**
**该脚本会被Frida注入到我们在 Brida中指定的进程中所以我们可以直接使用 Frida的 api。**
我们可以先试试，Brida能否正常运行，类似上图设置好参数，使用官方的那个js文件，以安卓为例，使用 Frida Remote.
首先我们要在 android设备上安装 Frida,安装过程可以参考这里：
[http://www.jianshu.com/p/ca8381d3e094](http://www.jianshu.com/p/ca8381d3e094)
当你使用 frida-ps -R 能出现类似下面结果的会继续
    λ frida-ps -R                                                           
      PID  Name                                                             
    -----  ---------------------------------------                          
      272  adbd                                                             
     5262  android.process.acore                                            
      841  android.process.media                                            
      181  bridgemgrd                                                       
     8430  com.android.calendar                                             
     8450  com.android.deskclock                                            
     1867  com.android.gallery3d                                            
      873  com.android.inputmethod.latin                                    
      920  com.android.launcher                                             
     8327  com.android.mms                                                  
      908  com.android.nfc                                                  
      858  com.android.phasebeam                                            
      897  com.android.phone                                                
     1020  com.android.smspush                                              
      718  com.android.systemui                                             
     1049  com.illuminate.texaspoker                                        
     1132  com.illuminate.texaspoker:xg_service_v2                          
     2174  daemonsu:0                                                       
    13649  daemonsu:0:13646
然后 分别点击 start server 和 spawn application.然后我们在 Execute methon Tab中测试下
contextcustom2 函数
他会在 Output中输出6768 ，这是16进制编码的字符串（方便调试），解码后为 gh
如果在burp中选中数据右键调用的话就会直接输出 解码后的字符串。
这样 Brida_test 就会被替换为 gh.
上面就是官方脚本的测试。下面我们来调用 Encryption.encrypt 和
Encryption.decrypt。这其实就是frida的使用了，可以参考[官方文档](https://www.frida.re/docs/home/)。一个Tips:
**使用全局变量来获取函数的返回值** 。
    var encrypt_data = "";
    var decrypt_data = "";
    rpc.exports = {
        contextcustom1: function(message) {
            Java.perform(function () {
                var Encryption = Java.use('learn.hacklh.me.MobileSafe.tools.Encryption');
                encrypt_data = stringToHex(Encryption.encrypt("just_test",hexToString(message)));
            });
            return encrypt_data
        },
        contextcustom2: function(message) {
            Java.perform(function () {
                var Encryption = Java.use('learn.hacklh.me.MobileSafe.tools.Encryption');
                decrypt_data = stringToHex(Encryption.decrypt("just_test",hexToString(message)));
            });
            return decrypt_data
        },
    }
完整代码如下：
    'use strict';
    // 1 - FRIDA EXPORTS
    var encrypt_data = "";
    var decrypt_data = "";
    rpc.exports = {
        // BE CAREFUL: Do not use uperpcase characters in exported function name (automatically converted lowercase by Pyro)
        exportedfunction: function() {
            // Do stuff...  
            // This functions can be called from custom plugins or from Brida "Execute method" dedicated tab
        },
        // Function executed when executed Brida contextual menu option 1.
        // Input is passed from Brida encoded in ASCII HEX and must be returned in ASCII HEX (because Brida will decode the output
        // from ASCII HEX). Use auxiliary functions for the conversions.
        contextcustom1: function(message) {
            Java.perform(function () {
                var Encryption = Java.use('learn.hacklh.me.MobileSafe.tools.Encryption');
                encrypt_data = stringToHex(Encryption.encrypt("just_test",hexToString(message)));
            });
            return encrypt_data
        },
            // Function executed when executed Brida contextual menu option 2.
        // Input is passed from Brida encoded in ASCII HEX and must be returned in ASCII HEX (because Brida will decode the output
        // from ASCII HEX). Use auxiliary functions for the conversions.
        contextcustom2: function(message) {
            Java.perform(function () {
                var Encryption = Java.use('learn.hacklh.me.MobileSafe.tools.Encryption');
                decrypt_data = stringToHex(Encryption.decrypt("just_test",hexToString(message)));
            });
            return decrypt_data
        },
        // Function executed when executed Brida contextual menu option 3.
        // Input is passed from Brida encoded in ASCII HEX and must be returned in ASCII HEX (because Brida will decode the output
        // from ASCII HEX). Use auxiliary functions for the conversions.
        contextcustom3: function(message) {
            return "6768";
        },
        // Function executed when executed Brida contextual menu option 4.
        // Input is passed from Brida encoded in ASCII HEX and must be returned in ASCII HEX (because Brida will decode the output
        // from ASCII HEX). Use auxiliary functions for the conversions.
        contextcustom4: function(message) {
            return "6768";
        }
    }
    // 2 - AUXILIARY FUNCTIONS
    // Convert a hex string to a byte array
    function hexToBytes(hex) {
        for (var bytes = [], c = 0; c >> 4).toString(16));
            hex.push((bytes[i] & 0xF).toString(16));
        }
        return hex.join("");
    }
    // 3 - FRIDA HOOKS (if needed)
    // Insert here Frida interception methods, if needed 
    // (es. Bypass Pinning, save values, etc.)
**测试**
首先 选中文本 ，右键调用contextcustom1对文本 使用 key为 just_test，进行AES加密。
得到结果：f5f91a52df876b902054e4dfd94d3341
然后解密
成功解密
**总结**
使用该插件，我们在测试一些加密应用时提供另外一种节省精力的方法，我们可以直接调用应用中的方法，来对数据进行加/解密
，而不用去逆向对应的方法。这节省了测试人员的精力。