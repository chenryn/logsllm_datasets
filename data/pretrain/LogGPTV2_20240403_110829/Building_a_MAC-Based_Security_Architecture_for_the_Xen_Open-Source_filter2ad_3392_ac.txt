### 4.3 Policy Enforcement

Mandatory access control (MAC) is implemented through a reference monitor. This monitor mediates references from virtual machines (VMs) to shared virtual resources by inserting security enforcement hooks into the hypervisor's code path where VMs interact with these resources. These hooks call into the Access Control Module (ACM) for decisions and enforce them locally. The isolation of individual virtual resources, which is a general design requirement for hypervisors, is inherited from Xen.

#### 4.3.1 Reference Monitor

sHype strictly separates access control enforcement from the access control policy, similar to the Flask architecture [33]. Figure 4 illustrates the sHype security reference monitor, showing the relationships between its three major components: the core hypervisor, the security policy manager, and the ACM. Security enforcement hooks are inserted into the core hypervisor to cover references from VMs to virtual resources. These hooks retrieve access control decisions from the ACM.

The ACM authorizes VM access to resources based on policy rules and security labels (CW-types and TE-types) attached to VMs and resources. The formal security policy defines these access rules and the structure and interpretation of security labels. A hypervisor interface allows trusted policy-management VMs to manage the ACM's security policy.

#### 4.3.2 Access Control Hooks

A security enforcement hook is a specialized function that enforces information flow constraints between VMs according to the security policy. Each hook follows a general pattern:
1. Gather access control information (determine VM and resource labels, and access operation type).
2. Determine the access decision by calling the ACM.
3. Enforce the access control decision. If access is allowed, the hook is functionally transparent; otherwise, it returns an error code.

sHype minimizes interference with the core hypervisor while enforcing the security policy on access to virtual resources. Security enforcement hooks are placed at the following points in the hypervisor to enforce Chinese Wall and Type Enforcement policies:

- **Domain Management Operations**: This hook reports the security reference of the domain originating the operation and the domain being created, destroyed, saved, restored, or migrated. The ACM uses this information to assign and free security labels, check Chinese Wall conflict sets, and adjust running CW-types.
- **Event Channel Operations**: Event-channel hooks mediate the creation and destruction of event channels between domains. The ACM decides whether the two domains can set up an event channel. If permitted, the setup continues; if denied, the setup is aborted.
- **Shared Memory Hook**: Grant-table hypervisor calls allow one VM to grant access to some of its memory pages to another VM. The shared memory hook ensures that this access is secure. Since shared memory may be established dynamically, this hook may be on the performance-critical path.

**Decision Caching**: To minimize overhead, access control decisions are cached locally in the data structures involved in grant-table or event-channel operations. The cache is not used for domain operation hooks because the ACM must update its security state. We are experimenting with different cache layouts to find the best trade-off between memory requirements and lookup speed.

**Policy Changes**: When the policy changes, we must revoke shared resources from VMs no longer authorized to use them. The re-evaluation function for event-channel and grant-table hooks re-evaluates access control decisions and revokes shared resources if authorization is no longer given. Revocation of event-channels is straightforward, and we are working on a callback mechanism for revoked shared memory to handle it more gracefully.

#### 4.3.3 Access Control Module (ACM)

The ACM maintains the policy state, makes policy decisions, interacts with the policy manager VM to establish a security policy, and triggers callback functions to re-evaluate access control decisions when the policy changes. The ACM stores all security policy information locally in the hypervisor and supports policy management through a privileged hypervisor call interface, which is access-controlled by a specialized hook.

During domain operations, the ACM allocates and de-allocates security labels for created and destroyed domains. For the Chinese Wall policy, the ACM maintains a Running CW Types array, indexed by CW-type, with a reference count indicating the number of running domains with that CW-type. For the Type Enforcement policy, the ACM checks if both domains share a common TE type (coalition) and permits or denies access accordingly.

### 4.4 MAC Domains

MAC domains enable multiple coalitions to share real resources by creating isolated virtual resources. If sufficient hardware resources are available and coalitions do not need to cooperate, MAC domains are not necessary. However, they must offer the following guarantees to conform to reference monitor requirements:
1. **Isolate Exported Virtual Resources**: Ensure that virtual resources inside the MAC domain are at least as well isolated as the hypervisor's virtual resources.
2. **Control Access to Resources**: Allow only VMs that are members of the coalition to which the virtual resource is assigned to access the resource.

Isolation can be achieved using mandatory access control inside the MAC domain, such as SELinux. The access control property requires the MAC domain to discover the coalition membership (TE types) of the requesting domain. sHype provides a hypervisor call that returns the coalition membership information, allowing the MAC domain to permit access to virtual resources based on shared coalition membership.

Multi-coalition VMs can implement controlled sharing between coalitions on higher layers and with finer granularity, such as file and operation granularity based on OS-level MAC policies like SELinux. While sHype forms isolated coalitions and restricts sharing to multi-coalition VMs, these VMs can overcome this isolation in carefully designed and trustworthy environments to meet application requirements.

### 5 Evaluation

#### 5.1 sHype-Covered Resources

Figure 5 shows the virtualized resources and their TCB coverage by the sHype reference monitor. We distinguish between single and multiple coalition implementations, as the latter requires MAC control.

#### 5.2 Code Impact

The sHype access control architecture for Xen comprises 2600 lines of code. Three MAC security hooks were inserted into Xen hypervisor files to control domain operations, event channel setup, and shared memory setup. Two out of three hooks are off the performance-critical path. We implemented a generic interface for various policies and have implemented the Chinese Wall and Type Enforcement policies for Xen, as well as caching of event-channel and grant-table access decisions. Maintaining sHype within the evolving Xen hypervisor code base has proven easy.

#### 5.3 Performance

If event channels, shared memory, virtual disks, virtual TTY, or vLANs are shared within a single coalition, sHype fully covers the TCB for sharing between coalitions. While the sHype architecture is comprehensive, it relies on MAC domains to correctly isolate virtual devices from each other. Such multi-coalition MAC domains are necessary if real peripheral devices need to be shared among multiple coalitions.