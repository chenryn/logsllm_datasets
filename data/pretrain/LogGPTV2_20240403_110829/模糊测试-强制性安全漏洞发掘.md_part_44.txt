对客户端脚本语言来说，通常并不是利用脚本引擎中的漏洞，而是简单地使用脚本语言来
htp://owserf.blogsot.com/206/08/axma-activex-fuzzr.html
③htp://metasloit.com/ses/dm/os/se-ess-ess-die/csdie.hl
③htp/browserfum.blogspot.com/2006/07/mobb-26-opera-cs-backgroung.html
@ htp:/ww.microsoft.com/technet/securit/Balletia/MS06-021.mspx
③htp:/www.hacker.c.il/ecurity/ie/ss_smport.html
③ http://en.wikipedia.org/wiki/)script
http://en.wikipedia.org/wiki/Ecmascript
---
## Page 206
第17章Web浏览器模糊测试191
访问其他包含漏洞的构件如一个ActiveX控件。这井不是说在脚本引擎中不存在漏洞。内存破
坏问题相对来说更为普遍，例如在InternetExplorer中使用JavaScript来选代一个本地函数所导
致的空引用°。浏览器错误发布月使用下面这一行JavaScript代码说明了该漏洞：
for（var1in window.alert）（vara=1;)
由Azafran所发现的在FirefoxJavaSeript引擎中的一个漏洞导致了一个信息泄露问题，这
将允许一个恶意的Web站点远程检索任意堆内存的内容，该漏洞是由处理入表达式的
rep1ace（）函数所导致的。尽管攻击者不能够控制所接收的内存，但它可能包含一些敏感的信
息，如密码等。
堆的填充
通常情况下，客户端脚本语言并不被用做一个攻击手段；而是用于促进一个单独的包含漏
洞的浏览器构件的开发。对浏览器漏洞的利用是由内存破坏或恶摆指针的使用而引起的，例如，
通常是在一个客户端脚本语言的帮助下来进行利用。在漏洞利用的过程中，JavaScript可以用于
不同的任务，并且通常利用在基于堆的溢出中。由于其具有应用的广泛性和跨平台的可用性等
特性，使其成为了一个显而易见的选择。考虑你发现了一个错误，它导致了你能够控制的一系
列解除引用。假定在下面的例子中，你可以完整地控制寄存器EAX：
MOVEAX,[EAX]
CALL[EAX+4]
针对E人X的大多数值将导致这两条指令引或一个访问速规，并使测览器别资。为了成功地
将控制流进行重定向，我们所提供的地址必须是一个指向有效代码的有效指针，它只是我们可
以容易并可靠地在一个正常的进程空间中所发现的某些内容。然而，我们可以使用JavaScript来
连续的分配大块的堆数据，并且操纵内存空间使其处于更加易于受到攻击的状态。因此，客户
端JavaScript经常被用做使用一个NOPsled和shellcode来填充堆，以增加当进入堆时对shellcode
进行破坏的机会。NOP表示在组装代码时的一个无操作，它只是不执行有效动作的一个操作或
一系列操作。当执行被转换到一个NOPsled时，执行将会继续选代NOPsled，而不改变寄存器
或其他内存位置。Berend-JanWever（a.k.a.SkyLined）使用其Internet Explorer代码开发了一个
流行的堆溢出技术，该技术使用0x0D值来对堆进行溢出。这个值的选择是非常重要的，因为
它包含有双重含义。首先，它代表一个5字节的类NOP指令，等价于OREAXODODODOD。另外，
它还可以是一个自引用的指针，指向一个有效的内存地址。它被解释的方式依赖于它所引用的
内客。
考虑图17-2所示的来自于OllyDbgHcapVis插件的屏摹快照，该屏革快照说明了如何使
http://browserfun.blogspot.com/2006/07/mobb-25-native-function-iterator.html
http:/www.mozilla.org/security/announce/2005/mfsa2005-33.html
③http://www.milw0rm.com/exploits/930
$http:/www.openrce.org/downloads/details/1
deaps/sdeuoseoopd
---
## Page 207
192第二部分目标和自动化
用该插件来帮助把在基于堆填充利用时的InternetExplorer的内存状态进行可视化。
图17-2SkyLined的OllyDbgHeap Vis的堆填充运行围
表示了从地址0x0D0A0020开始的大约500Kb大小的一个块。这就是包含地址0x0D0D0D0D的
部分特珠内容，即从某些嵌入的shellcode开始到0x0D字符串副本结束之间的内客。根据前面所
示的解除引用的两行代码的例子，假定我们将EAX寄存器的值设置为OxODOD0DOD。第一次解
除引用MOVEAX，[EAX]将使EAX保持相同的值，因为包含在目标地址的字节全部是0xOD。下一
条指令CALL[EAX+4]将使控制权转换到地址0x0D0D0D11，这就进入了一个0x0D长序列的中间。
该序列将被处理器作为等价的NOP指令来执行，直到达到了shellcode，如屏幕快照所示。为堆
溢出所选择的值0xODODODOD利用了这样一个事实，即堆填充通常是从较低的地址开始，然后
逐渐向较高的地址填克。选择一个以0开始的地址意味着在到达日标地址之前，需要花费较少
的时间来填充堆，而选择一个较高的地址值如0x44444444则需要花费较长的时间来填充堆以到
达日标地址，并且还会增加目标用户在成功利用之前对测览器进行破坏的机会。
进一步考虑下面的两个“坏”选择：一个是被翻译成ADD[ECX]，EAX的0x01010101，另一
个是被翻译成ORCL，[EDX]的Ox0A0A0A0A。第一个例子可能会执行失败，因为它对包含在
---
## Page 208
第17章Web浏览器模测试193
ECX寄存器中的地址进行了无效的写操作，而第二个例子也会执行失败，因为它对也含在EDX
寄存器中的地垃进行了无效的读操作。作为另外一个好的例子，考虑将被翻译成ADDEAX，
0x05050505的0x05050505。该序列在某些公开可见的开发中被使用。
Flash
尽管AdobeFlashPlayer代表了一个第三方Web浏览器所附加的一个构件，而不是浏览器所
内嵌的一个功能构件，但它已经被如此广泛地所接受，并且当前的大部分Web浏览器都安装有
某些版本的FlashPlayer。二进制的Flash文件通常具有一个.swf扩展名，并且可以作为单机文件
来打开，但更普遍的情况是作为浏览器所下载的Web页中的对象，然后在FlashPlayer中被启动。
由于Flash文件所具有的二进制特性，当执行模糊测试时可以采用两种可选方法中的一种。可以
第13章“文件格式模糊测试：Windows平台上的自动化测试”中所描述的那样，对一个已知的
好的.swf文件进行模期测试，这几章中详细描述了文件格式模糊测试技术。2005年11月，eEye
发布了在MacromediaFlash6和Flash7中的一个内存访问漏洞的详细信息。尽管不知道该漏洞是
如何被发现的，但模糊测试是一种可能会被采用的方法。另外，Flash文件可以使用
ActionScript来进行编码，面ActionScript是Flash用来在运行时操纵数据和内容的一种脚本语
言。然后就可以使用模糊测试在编译二进制Flash文件之前来变异不同的ActionScript方法。
2006年10月，Rapid7发布了一个安全建议，详细描述了如何使用XML.addRequestHeader（）方
法来向一个由Flash对象做出的请求添加任意的HTTP头.通过一个HTTP请求分割技术，就可
以使用该方法来执行任意的HTTP请求。
URLs
在某些时候，URL本身也可以导致漏洞。在MS06-042?发布之后，eEye发现针对该公告新
发布的补丁也导致了一个堆溢出漏润。他们发现，当一个超长的URL传递给InternetExplorer时，
如果目标Web站点被表示为GZIP或者缩减编码，那么当一个LstrcpynA（）调用试图将一个2048
字节的URL拷贝到一个260字节的缓冲区时，就会发生一个溢出。使用该漏洞的一个攻击将只
要求用户点击一个提供的URL，并且假定他们正在使用InternetExplorer的一个包含漏洞的版本。
17.4漏洞
可以导致的攻击的类型，使得它们仍然带来了非常严重的风险。
·DoS。许多Web浏览器漏洞只是简单地导致一个DoS攻击，以使浏览器崩溃或变得无法响
应。导致这种情况的发生，通常是由于一个无限循环或不能被进一步利用的内存破坏。
http://www.rapid7.com/advisories/R7-0026.jsp
http://www.microsoft.com/technet/security/bulletin/ms06-042.mspx
 http://research.eeye.com/html/advisories/published/AD20060824.html
---
## Page 209
194第二部分目标和自动化
从主要的方面来看，一个客户端DoS攻击是非常次要的。尽管在每次Web浏览器崩溃之后
它都会令人讨厌的去重启浏览器，但它并不会导致任何永久的损害。不像服务器端DoS
攻击，客户端DoS攻击只有一个单一的攻击目标。
·缓冲区溢出。缓冲区溢出是相对来说更为普遍的Web浏览器漏洞。事实上，它可以被前
面所提到的任何输人向量所触发，并且具有很特别的损害，因为它可以导致代码执行。
·选程命令执行。命令执行漏洞通常利用了已经存在的功能，即此功能并不是被设计为允
许远程代码执行，但实际上它允许代码执行。例如，AlbertPuigscchGalicia发现一个攻
击者可以直接将FTP命令注人到一个FTPURI中，通过简单地迫使用户点击该链接，而导
致InternetExplorer6.x及其以前的版本去执行FTP命令·。例如，可以利用该漏洞下载文
件到用户的计算机上。后来进一步发现，同一个漏洞还可以被利用以导致浏览器发送邮
件消息。微软在MS06-042中描述了该漏洞。
·绕过跨域限制。Web浏览器具有这样的控制功能，即阻止一个特定的Web站点访问其他站
点的内容。这是一个非常重要的限制，否则的话，例如任何站点将能够从其他站点获取
通常包含任务ID的cookie。目前出现了大量的漏洞，这些漏洞允许一个站点摆脱这个域
限制。前面所提到的GDS漏洞就是此类问题的一个例子。
·过安全区，InternetExplorer根据内容的起始区域来加强安全性。来源于Internet的文档
通常被认为是不可信的，因此对它们施加了更为严格的限制。另外，在本地打开的文件
被认为是可信的，并被授予了更大的特权。2005年2月，JoukoPynnOnen发布了一个建议，
详细描述了如何使用经过特殊编码的URL来诱使InternetExplorer解释远程文件，就好像
是从本地区域中所打开的一样。接下来，这就允许一个攻击者在下载的文件中包含恶
意脚本，以执行一个攻击者所提供的利用。微软在安全公告MS05-14中描述了此漏
洞。
·地址栏款骗。钓鱼式攻击已经变成了一个严重的问题，因为有越来越多的攻击者试图从
可信的Web站点上获取私人信息，如信用卡号等，尽管大多数的钓鱼式攻击只是简单利
用一些社会学知识，但是一些更加高级的攻击利用Web浏览器的漏洞帮助来使进行钓鱼
式攻击的站点看上去是合法的。允许地址栏被欺骗的漏洞对于钓鱼式攻击来说是具有价
值的，因为它们充许一个伪造的Web页看上去好像是位于一个合法站点上。不幸的是，
在所有主流的Web浏览器中已经存在一些这样的漏润了。
17.5错误检测
当对Web浏览器进行模糊测试时，开展并行的工作以识别不明显的错误也是非常重要的。
不能只在一个单一的地方寻找错误。相反，研究一些不同的错误来源是值得的。
 http://osvdb.org/displayvuln.php?osvdb_id=12299
http://jouko.iki.f/adv/zonespoof.html
@http://www.microsoft.com/technet/security/bulletin/ms05-014.mspx
---
## Page 210
第17章Web浏览器模测试195
·享件日志。如果你正在Windows环境中对Web浏览器进行模糊测试，那么不要忽略事件查
看器。实际上，InternetExplorer7.0将一个单独的InternetExplorer日志添加到了事件查看
器。如果你正在对一个早期版本的InternetExplorer或另外的浏览器进行模糊测试，那么
条目将会被包含到应用程序的日志中。尽管它不是很完整，但它是一个便于检查的来源，
并且可能包含有用的数据。
·性能监视器。内存破坏问题或无限循环都将可能导致目标Web浏览器性能的下降。性能
监视工具可以帮助识别这样的情形。然面，当进行模糊测试时，要确保使用一个专用机
器，以保证其他因素不会影响性能下降。
·调试器。到目前为止，对Web浏览器的模糊测试而言，最有用的错误检测工具就是一个
关联到被测试浏览器的第三方调试器。这将允许你识别已处理和未处理的异常，同时也
将有助于确定内存破坏问题是否可能会被利用。
17.6小结
尽管客户端漏洞曾一度被忽略，但钓鱼式攻击的出现迫使我们根据它们所带来的风险重新
对其进行关注。在协作网络上的一个单一的含有漏洞的浏览器可以成为攻击者的一个网关。客
户端攻击至少需要具备一些社会学知识，但相对来说它是一个次要的障碍。Web浏览器漏洞也
导致了在以浏览器为目标的攻击中的很高明的攻击手段。在本章中，我们介绍了一些现有的
Web浏览器模糊测试工具。在下一章中，我们将为Web浏览器构建我们自己的模糊器。
---
## Page 211
第18章Web浏览器的模糊测试：自动化
“天然气存在于半球中。我喜欢将其称之为半球是因为它是一种我们可以在邻国发现的
产品。
GeorgeW.Bush，华盛顿，2000年12月20日
试性”。对Web浏览器模糊测试关注的不断增加也导致产生了一些模糊测试工具，甚至产生了
更多的影响目前所使用的主流浏览器如MozillaFirefox和微软的InternetExpolorer的漏洞。本章
中，我们将讨论构建一个ActiveX模糊器的需求。尽管开发被限制于InternetExplorer并且一些
ActiveX模期器已经存在，但因为它是最令人感兴趣和最复杂的测试，所以选择该测试技术以
进行进一步的讨论。限制在InternetExplorer并不是完全打消积极性，因为微软的浏览器仍然占
据着Web用户市场的绝大部分份额。本章首先概要介绍了ActiveX技术的历史，然后直接深入到
一个ActiveX模糊测试工具的开发中。
18.1组件对象模型的背景知识
微软的COM是一个功能强大的软件技术，最初是在1990年早期被引人，其目标是为软件的
互操作性提供一个通用协议。标准的客户机一服务器通信允许软件采用不同的语言来编写，
而这些语言要能支持COM以在本地的同一个系统中相互交换数据，或者在不同的系统之间远程
交换数据。COM目前被广泛地使用，并且它的发展历史非常重要，同时在发展过程中产生了一
些缩写词（以及混淆）。
18.1.1在Nutshell中的发展历史
COM最早的前身可以被追溯到动态数据交换（DynamicDataExchange,DDE），目前DDE
技术仍然使用在Windows操作系统中。你可以通过Shell文件扩展、剪贴板查看器（NetDDE）
以及微软的Hearts（也是NetDDE）来发现执行中的DDE。在1991年，微软发布了对象链接和
嵌人（ObjectLinkingandEmbedding，OLE）技术。但是DDE只限于纯数据交换，而OLE可以在
相互之间嵌人文档类型。OLE客户机—服务器互通信通过使用虚函数表（VirtualFunction
Table,VTBLs）而发生在系统库的内部。
在OLE之后引I人了COM，然后又发布了OLE2，它是构建在COM而不是VTBLs之上的一个
新版本的OLE。该技术在1996年被重命名为ActiveX。在1996年的后期，微软又发布了分布式