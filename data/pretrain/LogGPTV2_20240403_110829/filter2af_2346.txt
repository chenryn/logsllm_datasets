# 【技术分享】在Linux中使用C语言实现控制流保护（CFG）
|
##### 译文声明
本文是翻译文章，文章来源：nullprogram.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
翻译：[myswsun](http://bobao.360.cn/member/contribute?uid=2775084127)
预估稿费：200RMB
投稿方式：发送邮件至[linwei#360.cn](mailto:PI:EMAIL)，或登陆[网页版](http://bobao.360.cn/contribute/index)在线投稿
**0x00 前言**
最近版本的Windows有一个新的缓解措施叫做[控制流保护](http://sjc1-te-ftp.trendmicro.com/assets/wp/exploring-control-flow-guard-in-windows10.pdf)（CFG）。在一个非直接调用之前——例如，函数指针和虚函数——针对有效调用地址的表检查目标地址。如果地址不是一个已知函数的入口，程序将会终止运行。
如果一个程序有一个缓冲区溢出漏洞，攻击者可以利用它覆盖一个函数地址，并且通过调用那个指针来控制程序执行流。这是[ROP](http://skeeto.s3.amazonaws.com/share/p15-coffman.pdf)攻击的一种方法，攻击者构建一系列[配件地址链](https://github.com/JonathanSalwan/ROPgadget)，一个配件是一组包含ret指令的指令序列，这些指令都是原始程序中的，可以用来作为非直接调用的起点。执行过程会从一个配件跳到另一个配件中以便做攻击者想做的事，却不需要攻击这提供任何代码。
两种非常广的缓解ROP攻击的技术是地址空间布局随机化（ALSR）和栈保护。前者是随机化模块的加载基址以便达到不可预料的结果。在ROP攻击中的地址依赖实时内存布局，因此攻击者必须找到并利用[信息泄漏](https://github.com/torvalds/linux/blob/4c9eff7af69c61749b9eb09141f18f35edbf2210/Documentation/sysctl/kernel.txt#L373)来绕过ASLR。
关于栈保护，编译器在其他栈分配之上分配一个值，并设置为每个线程的随机值。如果过缓冲区溢出覆盖了函数返回地址，这个值将也被覆盖。在函数返回前，将校验这个值。如果不能与已知值匹配，程序将终止运行。
CFG原理类似，在将控制传送到指针地址前做一个校验，只是不是校验一个值，而是校验目标地址本身。这个非常复杂，不像栈保护，需要平台协调。这个校验必须在所有的可靠的调用目标中被通知，不管是来自主程序还是动态库。
虽然没有广泛部署，但是值得一提的是[Clang’s
SafeStack](http://clang.llvm.org/docs/SafeStack.html)。每个线程有两个栈：一个“安全栈”用来保存返回指针和其他可安全访问的值，另一个“非安全栈”保存buffer之类的数据。缓冲区溢出将破环其他缓冲区，但是不会覆盖返回地址，这样限制了破环的影响。
**0x01 利用例子**
使用一个小的C程序，demo.c：
        int
        main(void)
        {
            char name[8];
            gets(name);
            printf("Hello, %s.n", name);
            return 0;
        }
它读取一个名字存到缓冲区中，并且以换行结尾打印出来。麻雀虽小五脏俱全。原生调用gets()不会校验缓冲区的边界，可以用来缓冲区溢出漏洞利用。很明显编译器和链接器都会抛出警告。
简单起见，假设程序包含危险函数。
        void    
        self_destruct(void)
        {
            puts("**** GO BOOM! ****");
        }
攻击者用缓冲区溢出来调用这个危险函数。
为了使攻击简单，假设程序不使用ASLR（例如，在GCC/Clang中不使用-fpie和-pie编译选项）。首先，找到self_destruct()函数地址。
        $ readelf -a demo | grep self_destruct    
        46: 00000000004005c5  10 FUNC  GLOBAL DEFAULT 13 self_destruct
因为在64位系统上面，所以是64位的地址。Name缓冲区的大小事8字节，在汇编我看到一个额外的8字节分配上面，所以有16个字节填充，然后8字节覆盖self_destruct的返回指针。
        $ echo -ne 'xxxxxxxxyyyyyyyyxc5x05x40x00x00x00x00x00' > boom    
        $ ./demo name);
        }
        void
        greet_aloha(struct greeter *g)
        {
            printf("Aloha, %s.n", g->name);
        }
现在有一个greeter对象和函数指针来实现运行时多态。把他想想为手写的C的虚函数。下面是新的main函数：
        int    
        main(void)
        {
            struct greeter greeter = {.greet = greet_hello};
            gets(greeter.name);
            greeter.greet(&greeter);
            return 0;
        }
（在真实的程序中，其他东西会提供greeter并挑选它自己的函数指针）
而不是覆盖返回指针，攻击者有机会覆盖结构中的函数指针。让我们重新像之前一样利用。
        $ readelf -a demo | grep self_destruct    
        54: 00000000004006a5  10 FUNC  GLOBAL DEFAULT  13 self_destruct
我们不知道密码，但是我们确实知道密码校验是16字节。攻击应该跳过16字节，即跳过校验（0x4006a5+16=0x4006b5）。
        $ echo -ne 'xxxxxxxxxb5x06x40x00x00x00x00x00' > boom    
        $ ./demo > CFG_RESOLUTION) & ((1UL bitmap[i / z] |= 1UL bitmap[i / z] >> (i % z)) & 1))
                abort();
        }
完成了，现在在main中使用它：
        struct cfg cfg;    
        int
        main(void)
        {
            cfg_register(&cfg, self_destruct);  // to prove this works
            cfg_register(&cfg, greet_hello);
            cfg_register(&cfg, greet_aloha);
            struct greeter greeter = {.greet = greet_hello};
            gets(greeter.name);
            cfg_check(&cfg, greeter.greet);
            greeter.greet(&greeter);
            return 0;
        }
现在再次利用：
        $ ./demo < boom    
        Aborted
正常情况下self_destruct()不会被注册，因为它不是一个非直接调用的合法目标，但是利用依然不能起作用是因为它在self_destruct()中间被调用，在bitmap中它不是一个可靠的地址。校验将在利用前终止程序。
在真实的应用程序中，我将使用一个[全局的CFG
bitmap](http://nullprogram.com/blog/2016/12/23/)，在头文件中使用inline函数定义cfg_check()。
尽管不使用工具直接在C中实现是可能的，但是这将变得更加繁琐和意出错。正确的是该在编译器中实现CFG。