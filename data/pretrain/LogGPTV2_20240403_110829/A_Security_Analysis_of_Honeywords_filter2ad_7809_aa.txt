title:A Security Analysis of Honeywords
author:Ding Wang and
Haibo Cheng and
Ping Wang and
Jeff Yan and
Xinyi Huang
A Security Analysis of Honeywords
Ding Wang, Haibo Cheng, Ping Wang
{wangdingg, chenghaibo, pwang}@pku.edu.cn
Peking University
Jeff Yan
Link¨oping University
PI:EMAIL
Xinyi Huang
Fujian Normal University
PI:EMAIL
Abstract—Honeywords are decoy passwords associated with
each user account, and they contribute a promising approach to
detecting password leakage. This approach was ﬁrst proposed by
Juels and Rivest at CCS’13, and has been covered by hundreds
of medias and also adopted in various research domains. The
idea of honeywords looks deceptively simple, but it is a deep
and sophisticated challenge to automatically generate honeywords
that are hard to differentiate from real passwords. In Juels-
Rivest’s work, four main honeyword-generation methods are
suggested but only justiﬁed by heuristic security arguments.
In this work, we for the ﬁrst time develop a series of practical
experiments using 10 large-scale datasets, a total of 104 million
real-world passwords, to quantitatively evaluate the security that
these four methods can provide. Our results reveal that they
all fail to provide the expected security: real passwords can
be distinguished with a success rate of 29.29%∼32.62% by
our basic trawling-guessing attacker, but not the expected 5%,
with just one guess (when each user account
is associated
with 19 honeywords as recommended). This ﬁgure reaches
34.21%∼49.02% under the advanced trawling-guessing attackers
who make use of various state-of-the-art probabilistic password
models. We further evaluate the security of Juels-Rivest’s methods
under a targeted-guessing attacker who can exploit the victim’
personal information, and the results are even more alarming:
56.81%∼67.98%. Overall, our work resolves three open problems
in honeyword research, as deﬁned by Juels and Rivest.
I.
INTRODUCTION
Passwords ﬁrmly remain the most prevalent method for
user authentication and are likely to keep their place in the
foreseeable future, despite their notorious defects in both
security and usability [3], [6], [30]. An inherent limitation of
the existing password-based authentication systems is that the
server need maintain a sensitive ﬁle comprised of passwords
of all registered users, and this ﬁle provides attackers/insiders
with a rich target for compromise. These days it is no news
to hear that high-proﬁle web services have been compromised
and millions of passwords were leaked, and some quite recent
victims include Yahoo [18], Dropbox [20], Last.fm, LinkedIn,
Weebly [27], and MySpace [31], to just name a few.
What’s most disturbing is that, these breaches were often
detected only when the attackers had well exploited the data
and then posted (or sold) it online, which is generally months,
even years after the breach initially occurred. For instance,
the most recent catastrophic password breach revealed on
October 2017 involves the entire 3 billion Yahoo userbase,
yet the breach actually had occurred four years before [18];
The Weebly password breach revealed in Oct. 2016 involves
Network  and  Distributed  Systems  Security  (NDSS)  Symposium  2018 
18-21  February  2018,  San  Diego,  CA,  USA
ISBN  1-891562-49-5
http://dx.doi.org/10.14722/ndss.2018.23142
www.ndss-symposium.org
43 million users, and users were asked to change passwords,
yet the breach actually had occurred eight months before [27];
The 68 million Dropbox breach occurred in 2012, yet users
are asked to change passwords four years later when the stolen
data surfaced in the public in May 2016 [20]; The detection of
the 360 million Myspace dataset took eight years: this dataset
was compromised in 2008 [31] yet only detected until May
2016, when its sale information was posted online. The 2016
data breach report by Verizon also reveals that, among the
2,260 breaches investigated, over 85% were ﬁrst detected by
external parties, 91% took weeks to detect, 70% took months
even years to detect [13]. All this highlights the imperative
need for active, timely password-breach detection methods to
enable responsive counter-actions.
Even if the leaked passwords are stored in salted-hash as
standard practice, this poses no real obstacle for an attacker to
recover them by an overwhelming percentage by using modern
machine-learning based cracking algorithms [24], [30] and
common hardware like GPUs (see [12]). Sophisticated hash
functions (e.g., bcrypt) are designed to slow down the attack-
er’s cracking process by the same factor as the honest server
is willing to spend on password veriﬁcation, but the attacker is
likely to be better equipped with dedicated password-cracking
hardware [15]. Thus, once the password hash ﬁle is obtained
by an attacker, it is realistic to assume that most of them can
be ofﬂine guessed. In addition, since the attacker only need
perform guessing locally, slow hash functions do not facilitate
the detection of password-ﬁle leakage.
Recently, there have been approaches proposed to com-
pletely eliminate the possibility of ofﬂine password guessing:
(1) using a machine-dependent function (e.g., ErsatzPasswords
[2]); (2) employing distributed cryptography (e.g., threshold
password-authenticated secret sharing [7]); and (3) using exter-
nal password-hardening services (e.g., Phoenix [23]). However,
all these approaches require substantial changes to the server-
side authentication systems. Besides, the ﬁrst approach does
not support backing up password hash ﬁles in a distributed
manner, and thus it is unsuitable for Internet-scale sites due to
its poor scalability; The second necessitates client-side system
changes, which is not user-friendly and widely deemed not
desirable; The third is subject to a single point of failure and
may leak user behavior information to external parties.
A more promising approach to improving the situation, ﬁrst
proposed by Juels and Rivest in 2013 [21], is to introduce
decoy passwords (called “honeywords”) to associate with each
user’s account (see Fig. 1). Their intriguing idea is that, even
if an attacker A has stolen the password ﬁle and recovered
all the passwords, she has to ﬁrst tell apart the user’s real
password from a set of k − 1 (e.g., k=20 suggested in [21])
intentionally generated honeywords. These k − 1 honeywords
and the real password are uniﬁedly called k “sweetwords”.
When honeywords are well generated, to ﬁgure out the real
the Kullback-Leibler divergence (KLD) metric can be used to
distinguish a real password distribution from a decoy one, yet
this metric is unsuitable for the honeyword-attacking scenario
where we need to distinguish the single, real password from a
set of distinct sweetwords. In all, existing honeyword methods
(see [14], [21]) are short of a sound evaluation, and whether
they can achieve the claimed security is unknown.
What’s more, little attention has been given to the analysis
of honeyword security under targeted guessing attackers. A
targeted attacker (see [30]) exploits not only users’ behavior of
selecting popular passwords (e.g., abc123, iloveyou) but
also the victims’ personally identiﬁable information (PII) like
name and birthday. To our knowledge, existing works [10],
[14], [21] mainly consider trawling guessing attackers (see
[5], [24], [32]) who exploit only users’ behavior of choosing
popular passwords. However, a large fraction of users build
passwords using their own PII. For instance, as we will show in
Sec. II-A, 51.43% of Dodonew normal users, 27.16% of Qutar
national bank users and 12.76% of Rootkit hackers employ
their own, common PII to build passwords.
This user behavior is increasingly vulnerable, as users’ PII
can now be easily learned from social networks and unending
data breaches [16], [18], [26]. For example, the recent large-
scale data breach in Oct. 2017 involves 3 billion Yahoo users,
with their names, phone numbers, birthdates leaked [18]; In
July 2017,
the largest credit-reporting agency in America,
Equifax, leaked PII data about half of the US population,
including names, birthdates, SSN [25]; The April 2016 PII
breach against Turkishens involves 64% of the total population
[1]. As the targeted guessing threat is becoming increasingly
realistic, honeywords shall be evaluated under this new threat.
B. Our contributions
In this work, we make the following key contributions:
•
Trawling guessing attacks. We for the ﬁrst
time
develop a series of experiments using large-scale
real password data to evaluate the four honeyword-
generation methods in [21], and ﬁnd that they all
fail to provide the expected security. We show that
real passwords can be distinguished with a success
rate of 29.29%∼32.62%, but not the expected 5%,
with just one guess under a basic, trawling guessing
attacker (when each user account is associated with 19
honeywords as recommended, i.e., the parameter k =
20 [21]). This ﬁgure reaches 34.21%∼49.02% under
the advanced trawling-guessing attackers who make
use of various state-of-the-art probabilistic password
cracking models (e.g., Markov [24] and PCFG [32]).
Targeted guessing attacks. To see how Juels-Rivest’s
methods perform under semantic-aware attackers, we
for the ﬁrst time evaluate the security of honeywords
by performing targeted guessing attacks. We show that
real passwords can be distinguished with a success rate
of 56.8%∼67.9% by performing just one guess (when
k = 20), if the attacker knows some common personal
information like name and birthday of the victim user.
This answers the question of “how well can targeted
attacks help identify users’ passwords for particular
honeyword-generation methods” as left in [21].
Extensive evaluation. Our experiments build on var-
ious leading probabilistic password cracking models
•
•
2
Fig. 1. Password (PW) authentication with honeywords. For better illustration,
here passwords are shown in plain-text, while in reality they are stored in salted
hash. The bottom of the ﬁgure shows some personal information about the
victim user Ui, and exempliﬁes two sets of 19(=k-1) honeywords generated
for Ui’s password “tiger81” by two different methods in [21]: tweaking-tail
and hybrid (see Sec. III-A).
password, A has to perform a few online login attempts by
using the server as a veriﬁcation oracle. Such online login
attempts would not only signiﬁcantly impede attackers [11],
but also set off an alarm of password-ﬁle compromise at the
server when a honeyword is attempted for login. This approach
involves relatively few changes to the existing server-side
system and no changes to the client-side system, and thus it
seems rather practical. It has attracted hundreds of medias and
also been adopted in various research domains (e.g., graphical
passwords [33] and cryptographic protocol [29]).
A. Challenges and motivations
A main challenge, as discussed in [7], [14], [21], is how to
generate honeywords that cannot be easily distinguished from
real passwords. In Juels-Rivest’s work [21], ﬁve honeyword-
generation methods are suggested: four for the legacy user-
interface (UI) and one for the modiﬁed-UI, and these legacy-
UI methods are preferred due to usability advantages. Thus,
we also focus on honeyword generation for the legacy-UI.
All the Juels-Rivest methods are random-replacement based,
and thus inherently unable to resist semantic-aware attackers
as shown by some typical counter-example passwords (e.g.,
bound007 and john1981) in the literature [10], [14]. Yet, to
what extent these methods are effective (or ineffective) against
semantic aware/un-aware attackers has never been theoretically
or empirically quantiﬁed.
Most prior art on honeywords (see [10], [14], [21]) mere-
ly provide heuristic security arguments when evaluating a
method, neither a rigorous theoretical analysis nor an empiri-
cal evaluation with real-world datasets was given. As we will
show with realistic experiments, all the honeyword-generation
methods in [21] largely fail to provide the expected security,
and real passwords can be distinguished with high success
rates. An improvement named “honeyindex” was given in [14],
yet its evaluation is still heuristic-based and it suffers from
the “peeling-onions style” distinguishing attack and critical
deployment issues.1 Golla et al. [17] empirically showed how
1The companion site: https://github.com/pkusec/rethinking-honeywords
•
(e.g., Markov [24], TarGuess [30] and PCFG [32]).
To make our results as generic as possible, we employ
10 large-scale real-world password lists, which consist
of a total of 104.36 million passwords, covering
various popular web services. This is the ﬁrst study
that empirically evaluates honeywords. Our extensive
evaluation suggests that Juels-Rivest’s methods can
survive neither PII-unaware nor PII-aware attackers.
New insights. We obtain a number of insights, some
expected and some surprising, from our empirical
experiments. We reveal that generating decoy pass-
words (by randomly replacing parts/whole of the real
password) to be equally probable with the user’s real
password is inherently impossible. This indicates that
Juels-Rivest’s random-replacement based approach is
inherently vulnerable, which is unexpected. We also
show that probabilistic password models cannot be
readily employed to generate honeywords, which is
opposed to common belief (as hold in [21]). As ex-
pected (and conﬁrmed by us), these password models
can be used as building blocks to design effective
experiments with real-world datasets to evaluate a
honeyword method. This answers the open question of
“are there good experimental methods for quantifying
the ﬂatness of honeyword methods” in [21].
II. DATASETS, SECURITY MODEL AND METRICS
A. Our datasets
We evaluate Juels-Rivest’s honeyword methods based on 10
large real password datasets (see Table I), including four from
Chinese sites and six from English sites. In total, our datasets
are composed of 104.36 million plain-text passwords and
involve 9 different web services. Besides some early disclosed
datasets (e.g., Rockyou and Dodonew) which have been widely
used in research [8], [24], [30], we also incorporate three
very recently leaked datasets that may exhibit up-to-date user
password behaviors. These datasets were compromised by
hackers or leaked by insiders, and were publicly available
on the Internet for some time. Since the canonical dataset
Rockyou only contains passwords (with no user names or
emails), and it will not be used for evaluating targeted threats.
The role of each dataset will be speciﬁed where necessary.
y
BASIC INFO ABOUT OUR 10 PASSWORD DATASETS
TABLE I.
Language When leaked Total PWs With PII
Web service
Dataset
Tianya
Social forum