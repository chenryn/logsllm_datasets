including timestamping.
277function master(txPort, rxPort, fgRate, bgRate)
local tDev = device.config(txPort, 1, 2)
local rDev = device.config(rxPort)
device.waitForLinks()
tDev:getTxQueue(0):setRate(bgRate)
tDev:getTxQueue(1):setRate(fgRate)
mg.launchLua("loadSlave", tDev:getTxQueue(0), 42)
mg.launchLua("loadSlave", tDev:getTxQueue(1), 43)
mg.launchLua("counterSlave", rDev:getRxQueue(0))
mg.waitForSlaves()
1
2
3
4
5
6
7
8
9
10
11
end
Listing 1: Initialization and device conﬁguration
4.1
Initialization
Listing 1 shows the master function. This function is ex-
ecuted in the master task on startup and receives command
line arguments passed to MoonGen: The devices and trans-
mission rates to use in this case. It conﬁgures one transmit
device with two transmit queues and one receiving device
with the default settings. The call in line 4 waits until the
links on all conﬁgured devices are established. It then con-
ﬁgures hardware rate control features on the transmission
queues and starts three slave threads, the ﬁrst two gener-
ate traﬃc, the last counts the received traﬃc on the given
device. The arguments passed to mg.launchLua are passed
to the respective functions in the new task. The loadSlave
function takes the transmission queue to operate on and a
port to distinguish background from prioritized traﬃc.
4.2 Packet Generation Loop
Listing 2 shows the loadSlave function that is started
twice and does the actual packet generation. It ﬁrst allocates
a memory pool, a DPDK data structure in which packet
buﬀers are allocated. The MoonGen wrapper for memory
pools expects a callback function that is called to initialize
each packet. This allows a script to ﬁll all packets with
default values (lines 5 to 10) before the packets are used in
the transmit loop (lines 17 to 24). The transmit loop only
needs to modify a single ﬁeld in each transmitted packet
(line 20) to generate packets from randomized IP addresses.
Line 13 initializes a packet counter that keeps track of
transmission statistics and prints them in regular intervals.
MoonGen oﬀers several types of such counters with diﬀer-
ent methods to acquire statistics, e.g., by reading the NICs
statistics registers. This example uses the simplest type, one
that must be manually updated.
Line 15 allocates a bufArray, a thin wrapper around a
C array containing packet buﬀers. This is used instead of
a normal Lua array for performance reasons.
It contains
a number of packets in order to process packets in batches
instead of passing them one-by-one to the DPDK API. Batch
processing is an important technique for high-speed packet
processing [6, 23].
The main loop starts in line 17 with allocating packets of
a speciﬁed size from the memory pool and storing them in
the packet array. It loops over the newly allocated buﬀers
(line 18) and randomizes the source IP (line 20). Finally,
checksum oﬄoading is enabled (line 22) and the packets are
transmitted (line 23).
Note that the main loop diﬀers from a packet generator
relying on a classic API. MoonGen, or any other packet gen-
erator based on a similar framework, cannot simply re-use
buﬀers because the transmit function is asynchronous. Pass-
ing packets to the transmit function merely places pointers
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
local PKT_SIZE = 124
function loadSlave(queue, port)
local mem = memory.createMemPool(function(buf)
buf:getUdpPacket():fill{
pktLength = PKT_SIZE,
ethSrc = queue, -- get MAC from device
ethDst = "10:11:12:13:14:15",
ipDst = "192.168.1.1",
udpSrc = 1234,
udpDst = port,
}
end)
local txCtr = stats:newManualTxCounter(port, "plain")
local baseIP = parseIPAddress("10.0.0.1")
local bufs = mem:bufArray()
while dpdk.running() do
bufs:alloc(PKT_SIZE)
for _, buf in ipairs(bufs) do
local pkt = buf:getUdpPacket()
pkt.ip.src:set(baseIP + math.random(255) - 1)
end
bufs:offloadUdpChecksums()
local sent = queue:send(bufs)
txCtr:updateWithSize(sent, PKT_SIZE)
end
txCtr:finalize()
end
Listing 2: Transmission slave task
to them into a memory queue, which is accessed by the NIC
later [14]. A buﬀer must not be modiﬁed after passing it
to DPDK. Otherwise, the transmitted packet data may be
altered if the packet was not yet fetched by the NIC.
Therefore, we have to allocate new packet buﬀers from
the memory pool in each iteration. Pre-ﬁlling the buﬀers at
the beginning allows us to only touch ﬁelds that change per
packet in the transmit loop. Packet buﬀers are recycled by
DPDK in the transmit function, which collects packets that
were sent by the NIC earlier [14]. This does not erase the
packets’ contents.
4.3 Packet Counter
Listing 3 shows how to use MoonGen’s packet reception
API to measure the throughput of the diﬀerent ﬂows by
counting the incoming packets.
The task receives packets from the provided queue in the
bufArray bufs in line 5. It then extracts the UDP destina-
tion port from the packet (line 8) and uses counters to track
statistics per port. The ﬁnal statistics are printed by calling
the counters’ ﬁnalize methods in line 19. Printed statistics
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
function counterSlave(queue)
local bufs = memory.bufArray()
local counters = {}
while dpdk.running() do
local rx = queue:recv(bufs)
for i = 1, rx do
local buf = bufs[i]
local port = buf:getUdpPacket().udp:getDstPort()
local ctr = counters[port]
if not ctr then
ctr = stats:newPktRxCounter(port, "plain")
counters[port] = ctr
end
ctr:countPacket(buf)
end
bufs:freeAll()
end
for _, ctr in pairs(counters) do
ctr:finalize()
end
end
Listing 3: Packet counter slave task
278include the average packet and byte rates as well as their
standard deviations.
The format to print in is speciﬁed in the counter construc-
tor in line 11. All example scripts use the plain formatter,
the default value is CSV for easy post-processing. The output
can also be diverted to a ﬁle. Details are in the documenta-
tion of stats.lua.
This script can be used for another similar test setup by
adapting the code to the test setup by changing hardcoded
constants like the used addresses and ports. The full script
in the repository [5] includes a separate timestamping task
to acquire and print latency statistics for the two ﬂows.
5. PERFORMANCE
Writing the whole generation logic in a scripting language
raises concerns about the performance. One important fea-
ture of LuaJIT is that it allows for easy integration with
existing C libraries and structs:
it can directly operate on
C structs and arrays without incurring overhead for bound
checks or validating pointers [20]. Thus, crafting packets is
very eﬃcient in MoonGen.
The obvious disadvantage is that unchecked memory ac-
cesses can lead to memory corruption, a problem that is usu-
ally absent from scripting languages. However, most critical
low-level parts like the implementation of the NIC driver are
handled by DPDK. The MoonGen core then wraps poten-
tially unsafe parts for the userscript if possible. There are
only two operations in a typical userscript that can lead to
memory corruption: writing beyond packet buﬀer bound-
aries and trying to operate on buﬀers that are null pointers.
This is an intentional design decision to aid the performance
by avoiding unnecessary checks.
5.1 Test Methodology
Measuring the CPU load caused by a DPDK-based appli-
cation is diﬃcult because DPDK recommends a busy-wait
loop [14], i.e., the CPU load is always 100% for a typical
application. MoonGen and other DPDK-based generators
like Pktgen-DPDK [27] are no exceptions to this. The bot-
tleneck for packet transmission is usually not the CPU but
the line rate of the network, so just measuring the achieved
rate provides no insight. We therefore decrease the clock fre-
quency of our CPU such that the processing power becomes
the bottleneck. The performance can then be quantiﬁed as
CPU cycles per packet. The same approach was used by
Rizzo to evaluate the performance of netmap [23].
The tests in this section were executed on an Intel Xeon
E5-2620 v3 CPU with a frequency of 2.4 GHz that can be
clocked down to 1.2 GHz in 100 MHz steps. To ensure con-
sistent and reproducible measurement results, we disabled
Hyper-Threading, which may inﬂuence results if the load
of two virtual cores is scheduled to the same physical core.
TurboBoost and SpeedStep were also disabled because they
adjust the clock speed according to the current CPU load
and interfere with our manual adjustment of the frequency.
5.2 Comparison with Pktgen-DPDK
Our scripting approach can even increase the performance
compared to a static packet generator slightly. We show
this by comparing MoonGen to Pktgen-DPDK 2.5.1 [27], a
packet generator for DPDK written in C.
We conﬁgured both packet generators to craft minimum-
sized UDP packets with 256 varying source IP addresses on a
]
s
p
p
M
[
e
t
a
R
t
e
k
c
a
P
30
25
20
15
10
5
0
1
]
s
/
t
i
b
G
[
e
t
a
R
20
10
0
8
3
2
7
Number of 1.2 GHz CPU Cores
6
4
5
Figure 2: Multi-core scaling under high load
single CPU core. We then gradually increased the CPU’s fre-
quency until the software achieved line rate. Pktgen-DPDK
required 1.7 GHz to hit the 10 GbE line rate of 14.88 Mpps,
MoonGen only 1.5 GHz. Pktgen-DPDK achieved 14.12 Mpps
at 1.5 GHz. This means MoonGen is more eﬃcient in this
speciﬁc scenario.
This increased performance is an inherent advantage of
MoonGen’s architecture: Pktgen-DPDK needs a complex
main loop that covers all possible conﬁgurations even though
we are only interested in changing IP addresses in this test
scenario. MoonGen, on the other hand, can use a script that
consists of a tight inner loop that exclusively executes the
required tasks: allocating pre-ﬁlled packet buﬀers, modify-
ing the IP address, and sending the packets with checksum
oﬄoading. You only pay for the features you actually use
with MoonGen.
5.3 Multi-core Scaling
The achieved performance depends on the script; the pre-
vious example was a light workload for the comparison to
Pktgen-DPDK, which is limited to such simple patterns.
Therefore, we test a more involved script to stress Moon-
Gen to show the scaling with multiple cores sending to the
same NIC via multiple transmission queues.
Figure 2 shows the performance under heavy load and
the scaling with the number of CPU cores. MoonGen was
conﬁgured to generate minimum-sized packets with random
payload as well as random source and destination addresses
and ports. The code generates 8 random numbers per packet
to achieve this. Each core generated and sent packets on two
diﬀerent 10 GbE interfaces simultaneously. Linear scaling
can be observed up to the line rate limit (dashed line).
The code was written in idiomatic Lua without speciﬁc
optimizations for this use case: LuaJIT’s standard random
number generator, a Tausworthe generator [20], was used.
Since a high quality random number generator is not re-
quired here, a simple linear congruential generator would
be faster. The code also generates a random number per
header ﬁeld instead of combining multiple ﬁelds (e.g., source
and destination port can be randomized by a single 32-bit
random number).
Despite the lack of optimizations, the code was initially
found to be too fast for meaningful scalability measurements
(10.3 Mpps on a single core). We therefore reduced the
CPU’s clock speed to 1.2 GHz and increased the number
of NICs to 2 for this test. This test shows that sending to a
single NIC port via multiple queues scales linearly, an impor-
tant assumption made for our architecture (cf. Section 3.3).
279]
s
/
t
i
b
G
[
e
t
a
R