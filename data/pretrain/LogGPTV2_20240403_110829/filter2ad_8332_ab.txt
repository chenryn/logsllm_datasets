        pPEHeader = (PIMAGE_FILE_HEADER)((DWORD)pNTHeader + 4);
        pOptionHeader = (PIMAGE_OPTIONAL_HEADER32)((DWORD)pPEHeader + IMAGE_SIZEOF_FILE_HEADER);
        pImport = (PIMAGE_IMPORT_DESCRIPTOR)(pOptionHeader->DataDirectory[1].VirtualAddress + dwImageBase);
        while (pImport->FirstThunk != 0 && Flag == FALSE)
        {
            pIAT = (PDWORD)(pImport->FirstThunk + dwImageBase);
            while (*pIAT)
            {
                if (*pIAT == dwNewAddr)
                {
                    *pIAT = dwOldAddr;
                    Flag = TRUE;
                    break;
                }
                pIAT;
            }
            pImport;
        }
        return Flag;
    }
    int WINAPI MyMessageBox(
        HWND hwnd,
        LPCSTR lpText,
        LPCSTR lpCaption,
        UINT uType)
    {
        //定义MyMessageBox的指针
        typedef int (WINAPI* PFNMESSAGEBOX)(HWND, LPCSTR, LPCSTR, UINT);
        //获取参数
        printf("Argument: hwnd-%x lpText-%ws lpCaption-%ws uType-%x\n\n", hwnd, lpText, lpCaption, uType);
        //执行真正的函数
        int ret = ((PFNMESSAGEBOX)pOldFuncAddr)(hwnd, lpText, lpCaption, uType);
        //获取返回值
        printf("The return value is: %x\n\n", ret);
        return ret;
    }
    int TestIATHook()
    {
        SetIATHook(pOldFuncAddr, (DWORD)MyMessageBox);
        MessageBox(NULL, L"IAT HOOK", L"IATHOOK success!", MB_OK);
        UnSetIATHook(pOldFuncAddr, (DWORD)MyMessageBox);
        return 1;
    }
    int main()
    {
        TestIATHook();
    }
注意这里我写的时候有两个坑点，第一个地方就是打印的时候需要用`tchar.h`即宽字符，否则显示不完全
再就是我一开始hook的是`MessageBoxA`这个api，但是获取不到返回值，改成`MessageBoxW`即可
实现效果如下所示
# Inlinehook
API函数都保存在操作系统提供的DLL文件中，当在程序中使用某个API函数时，在运行程序后，程序会隐式地将API所在的DLL加载入进程中。这样，程序就会像调用自己的函数一样调用API。
在进程中当EXE模块调用CreateFile()函数的时候，会去调用kernel32.dll模块中的CreateFile()函数，因为真正的CreateFile()函数的实现在kernel32.dll模块中。
CreateFile()是API函数，API函数也是由人编写的代码再编译而成的，也有其对应的二进制代码。既然是代码，那么就可以被修改。通过一种“野蛮”的方法来直接修改API函数在内存中的映像，从而对API函数进行HOOK。使用的方法是，直接使用汇编指令的jmp指令将其代码执行流程改变，进而执行我们的代码，这样就使原来的函数的流程改变了。执行完我们的流程以后，可以选择性地执行原来的函数，也可以不继续执行原来的函数。
假设要对某进程的kernel32.dll的CreateFile()函数进行HOOK，首先需要在指定进程中的内存中找到CreateFile()函数的地址，然后修改CreateFile()函数的首地址的代码为jmp
MyProc的指令。这样，当指定的进程调用CreateFile()函数时，就会首先跳转到我们的函数当中去执行流程，这样就完成了我们的HOOK了。
那么既然有了IAThook，我们为什么还要用Inlinehook呢，直接用IAThook不是更方便吗？看硬编码多麻烦。
我们思考一个问题，如果函数不是以`LoadLibrary`方式加载，那么肯定在导入表里就不会出现，那么IAThook就不能使用了，这就是Inlinehook诞生的条件。
**硬编码**
何为硬编码？
这里我就不生搬概念性的东西来解释了，说说我自己的理解。硬编码可以说就是用十六进制的字符组成的，他是给cpu读的语言，我们知道在计算机里面只有0和1，如果你要让他去读c语言的那些字符他是读不懂的，他只会读0和1，这就是硬编码。
硬编码的结构如下，有定长指令、变长指令等等一系列指令，还跟各种寄存器相关联起来，确实如果我们去读硬编码的话太痛苦了
这里就不过多延伸了，我们在Inlinehook里面只会用到一个硬编码就是E9，对应的汇编代码就是jmp
我们的思路还是跟之前的IAThook一样，通过修改jmp跳转的地址跳转到我们的函数执行功能之后再跳转到原函数的地址执行原函数
那么这里我们首先定义一个`Add`函数，定义三个变量，函数的功能就是实现三个数的相加
    DWORD Add(int x, int y, int z)
    {
        return x + y + z;
    }
我们在vs里面写入`Add`函数并跟进反汇编进行查看，注意这里汇编代码对应的硬编码的字节数是确定的，例如55对应的就是push
ebp，54对应的就是push esp，这是一个定长指令，也就是说push这个汇编代码在硬编码里面就是一字节
那么我们要实现jmp跳转，执行的命令为`jmp
0x123454678`，对应的字节数为5(jmp也为定长指令)，也就是说至少要有5个字节的空间才能够写入jmp跳转的硬编码。
这里我们可以先将这几行代码移到一块空白的缓冲区里，再使用jmp即E9call跳转到我们想执行的函数的地址，执行完成过后再执行这几行代码之后跳转回来，如下所示。这里说一下E9的计算，E9后面要填的硬编码计算公式为
要跳转的地址 - (E9地址 + 5)
先编写钩子函数，首先定义一个裸函数，由我们自己来平衡堆栈，因为C语言默认为stdcall，是自动平衡堆栈的，即内平栈
    extern "C" _declspec(naked) void Hook()
我们在进行函数的hook过程中，要保证寄存器和标志寄存器的数值不能改变，否则程序可能会报错，所以这里先把标志寄存器的值压入堆栈
    _asm
        {
            pushad;     //保留寄存器
            pushfd;     //保留标志寄存器
        }
        //读取寄存器的值
        _asm
        {
            mov reg.EAX, eax
            mov reg.EBX, ebx
            mov reg.ECX, ecx
            mov reg.EDX, edx
            mov reg.EDI, edi
            mov reg.ESI, esi
            mov reg.ESP, esp
            mov reg.EBP, ebp
        }
然后把我们函数的三个参数压入堆栈，这里前面已经有10个值了，所以压栈的地址为`esp + 28`
    _asm
        {
            mov eax, DWORD PTR ss : [esp + 0x28]
            mov x, eax
            mov eax, DWORD PTR ss : [esp + 0x2c]
            mov y, eax
            mov eax, DWORD PTR ss : [esp + 0x30]
            mov z, eax
        }
然后我们实现的功能就是把寄存器的值打印出来，当然这里是实验，实战中师傅们自行发挥
    printf("EAX:%x EBX:%x ECX:%x EDX:%x EDI:%x ESI:%x ESP:%x EBP:%x\n\n", reg.EAX, reg.EBX, reg.ECX, reg.EDX, reg.EDI, reg.ESI, reg.ESP, reg.EBP);
        printf("x:%d y:%d z:%d\n\n", x, y, z);
然后还原寄存器和标志寄存器
    _asm
        {
            popfd;      //还原标志寄存器
            popad;      //还原寄存器
        }
到这里我们想要执行的函数功能就已经执行完成了，那么我们还需要将之前覆盖的汇编代码给还原回去
    //执行之前覆盖的代码
        _asm
        {
            push        ebp
            mov         ebp, esp
            sub         esp, 0C0h
        }
完成后我们再跳转回之前执行hook的地址
    //执行完后跳转回hook地址
        _asm
        {
            jmp RetWriteHookAddr;
        }
钩子的完整代码如下
    extern "C" _declspec(naked) void Hook()
    {
        _asm
        {
            pushad;     //保留寄存器
            pushfd;     //保留标志寄存器
        }
        //读取寄存器的值
        _asm
        {
            mov reg.EAX, eax
            mov reg.EBX, ebx
            mov reg.ECX, ecx
            mov reg.EDX, edx
            mov reg.EDI, edi
            mov reg.ESI, esi
            mov reg.ESP, esp
            mov reg.EBP, ebp
        }
        //将参数压入堆栈
        _asm
        {
            mov eax, DWORD PTR ss : [esp + 0x28]
            mov x, eax
            mov eax, DWORD PTR ss : [esp + 0x2c]
            mov y, eax
            mov eax, DWORD PTR ss : [esp + 0x30]
            mov z, eax
        }
        printf("EAX:%x EBX:%x ECX:%x EDX:%x EDI:%x ESI:%x ESP:%x EBP:%x\n\n", reg.EAX, reg.EBX, reg.ECX, reg.EDX, reg.EDI, reg.ESI, reg.ESP, reg.EBP);
        printf("x:%d y:%d z:%d\n\n", x, y, z);
        _asm
        {
            popfd;      //还原标志寄存器
            popad;      //还原寄存器
        }
        //执行之前覆盖的代码
        _asm
        {
            push        ebp
            mov         ebp, esp
            sub         esp, 0C0h
        }
        //执行完后跳转回hook地址
        _asm
        {
            jmp RetWriteHookAddr;
        }
    }
然后我们再写`SetInlineHook`函数，首先判断传入的钩子函数的地址和钩子函数是否存在再往下执行