title:Hunting the Haunter - Efficient Relational Symbolic Execution for
Spectre with Haunted RelSE
author:Lesly-Ann Daniel and
S&apos;ebastien Bardin and
Tamara Rezk
Hunting the Haunter — Efﬁcient Relational
Symbolic Execution for Spectre with Haunted RelSE
Lesly-Ann Daniel
Sébastien Bardin
Université Paris-Saclay, CEA, List
Université Paris-Saclay CEA, List
PI:EMAIL
PI:EMAIL
Tamara Rezk
Inria
PI:EMAIL
Abstract—Spectre are microarchitectural attacks which were
made public in January 2018. They allow an attacker to recover
secrets by exploiting speculations. Detection of Spectre is partic-
ularly important for cryptographic libraries and defenses at the
software level have been proposed. Yet, defenses correctness and
Spectre detection pose challenges due on one hand to the explosion
of the exploration space induced by speculative paths, and on the
other hand to the introduction of new Spectre vulnerabilities
at different compilation stages. We propose an optimization,
coined Haunted RelSE, that allows scalable detection of Spectre
vulnerabilities at binary level. We prove the optimization semanti-
cally correct w.r.t. the more naive explicit speculative exploration
approach used in state-of-the-art tools. We implement Haunted
RelSE in a symbolic analysis tool, and extensively test it on a well-
known litmus testset for Spectre-PHT, and on a new litmus testset
for Spectre-STL, which we propose. Our technique ﬁnds more
violations and scales better than state-of-the-art techniques and
tools, analyzing real-world cryptographic libraries and ﬁnding
new violations. Thanks to our tool, we discover that index-
masking—a standard defense for Spectre-PHT—and well-known
gcc options to compile position independent executables introduce
Spectre-STL violations. We propose and verify a correction to
index-masking to avoid the problem.
I.
INTRODUCTION
Modern CPUs performance relies on complex hardware
logic, including branch predictors and speculations. Indepen-
dently from the hardware implementation,
the architecture
describes how instructions behave in a CPU and includes
state that can be observed by the developer such as data in
registers and main memory. The microarchitecture describes
how the architecture is implemented in a processor hardware,
and its state includes for example entries in the cache which
are transparent to the developer. In order to reduce clock
cycles, the CPU can execute instructions ahead of time, and
attempt, for instance, to guess values via a branch predictor
to speculatively execute a direction of the control ﬂow. If
the guess was incorrect, the CPU discards the speculative
execution by reverting the affected state of the architecture.
At the end, only correct executions will deﬁne the state of
the architecture. Reverted executions, also known as transient
executions, are meant to be transparent from the architectural
point of view.
Network and Distributed Systems Security (NDSS) Symposium 2021
21-25  February  2021, Virtual 
ISBN  1-891562-66-5
https://dx.doi.org/10.14722/ndss.2021.24286
www.ndss-symposium.org
the architectural
Unfortunately, transient executions leave observable mi-
croarchitectural side effects that can be exploited by an attacker
to recover secrets at
level. This behavior
is exploited in Spectre attacks [1] which were made pub-
lic in early 2018. Since then, Spectre attacks have drawn
considerable attention from both industry and academy, with
works that discovered new Spectre variants [2], new detection
methods [3]–[5], and new countermesures [6]–[8]. To date,
there are four known main variants of Spectre attacks [2]. Most
works on analyzers [3], [4], [9]–[12] only focus on the Pattern
History Table (PHT) variant (a.k.a Spectre-v1 [1]) which
exploits conditional branches, yet they struggle on medium-
size binary code (cf. Table V). Only one tool, Pitchfork [5],
addresses the Store to Load (STL) variant (a.k.a Spectre-
v4 [13]), which exploits the memory dependence predictor.
Unfortunately, Pitchfork does not scale for analyzing Spectre-
STL, even on small programs (cf. Table IV). Other variants
are currently out-of-scope of static analyzers (see Sections II
and VII).
Goal and challenges. In this paper, we propose a novel tech-
nique to detect Spectre-PHT and Spectre-STL vulnerabilities
and we implement it in a new static analyzer for binary code.
Two challenges arise in the design of such an analyzer:
C1 First, the details of the microarchitecture cannot be fully
included in the analysis because they are not public in
general and not easy to obtain. Yet the challenge is to ﬁnd
an abstraction powerful enough to capture side channels
attacks due to microarchitectural state.
C2 Second, exploration of all possible speculative executions
does not scale because it quickly leads to state explosion.
The challenge is how to optimize this exploration in order
to make the analysis applicable to real code.
Proposal. We tackle challenge C1 by targeting a relational se-
curity property coined in the literature as speculative constant-
time [5], a property reminiscent of constant-time [14], widely
used in cryptographic implementations. Speculative constant-
time takes speculative executions into account without explic-
itly modeling intrincate microarchitectural details. However, it
is well known that constant-time programming is not necessar-
ily preserved by compilers [15], [16], so our analysis operates
at binary level—besides, it is compiler-agnostic and does not
require source code. For this, we extend the model of previous
work for binary analysis of constant-time [16] in order to
analyze speculative constant-time [5].
A well-known analysis technique that scales well on binary
code is symbolic execution (SE) [17], [18]. However, in order
to analyze speculative constant-time, it must be adapted to
consider the speculative behavior of the program. Symbolic
analyzers for Spectre-PHT [3], [4], [12] and Spectre-STL [5]
model the speculative behavior explicitly, by forking the exe-
cution to explore transient paths, which quickly leads to state
explosion—especially for Spectre-STL which has to fork for
each possible store and load interleaving. The adaptation of
symbolic execution to constant-time-like properties, known
as relational symbolic execution (RelSE), has proven very
successful in terms of scalability and precision for binary
level [16]. In order to address C2, our key technical insight
is to adapt RelSE to execute transient executions at the same
time as regular executions (i.e. executions related to correct
speculations). We name this technique Haunted RelSE:
• For Spectre-PHT, it prunes redundant states by executing
at the same time transient and regular paths resulting from
a conditional statement;
• For Spectre-STL, instead of forking the symbolic exe-
cution for each possible load and store interleaving, it
prunes redundant cases and encodes the remaining ones
in a single symbolic path.
We implement Haunted RelSE in a relational symbolic
analysis tool called BINSEC/HAUNTED for binary level. For
evaluation, we use the well-known Kocher test cases for
Spectre-PHT [1], as well as a new set of test cases that we
propose for Spectre-STL, and real-world cryptographic code
from donna, Libsodium and OpenSSL libraries.
Findings. Interestingly, our experiments revealed that index-
masking [19], a well-known defense used against Spectre-
PHT in WebKit for example, may introduce new Spectre-STL
vulnerabilities. We propose and verify safe implementations
to deal with this problem. By means of our tool, we have
also discovered that a popular option [20] of gcc to generate
position-independent code (PIC) may introduce Spectre-STL
vulnerabilities. We also conﬁrm, as already reported by Cauligi
et al. [5],
the stack protections added by compilers
introduce Spectre violations in cryptographic primitives.
that
Contributions. In summary, our contributions are:
• We design a dedicated technique on top of relational
symbolic execution, named Haunted RelSE, to efﬁciently
analyze speculative executions in symbolic analysis to
detect PHT and STL Spectre violations (Sections III
and IV). The main idea behind Haunted RelSE is to
symbolically reason on regular and transient behaviours
at the same time. Even though our encoding for memory
speculations is reminiscent of some encodings for state
merging [21]–[23], we actually follow different philos-
ophy, by preventing artiﬁcial splits between regular and
transient executions rather than trying to pack together
different (possibly unrelated) paths. We formally prove
that relational analyses modeling all speculative execu-
tions explicitly, or using Haunted RelSE are semantically
equivalent (Section IV);
• We propose a veriﬁcation tool, called BINSEC/HAUNTED,
implementing Haunted RelSE and evaluate it on well-
known litmus tests (small test cases) for Spectre-PHT.
We further propose a new set of litmus tests for Spectre-
STL as a contribution and test BINSEC/HAUNTED on
2
it. Experimental evaluation (Section V) shows that
BINSEC/HAUNTED can ﬁnd violations of speculative
constant-time in real-world cryptographic code, such as
donna, Libsodium and OpenSSL libraries. For Spectre-
PHT, BINSEC/HAUNTED can exhaustively analyze code
up to 5k static instructions. It is faster than the (less
precise) state of the art tools KLEESpectre and Pitchfork.
For Spectre-STL, it can exhaustively analyze code up to
100 instructions and ﬁnd vulnerabilities in code up to 6k
instructions; compared to state-of-the art tool Pitchfork,
BINSEC/HAUNTED is signiﬁcantly faster, ﬁnds more vul-
nerabilities, and report more insecure programs.
• To the best of our knowledge, we are the ﬁrst to report
that the well-known defense against Spectre-PHT, index-
masking, may introduce Spectre-STL vulnerabilities. We
propose correct implementations, veriﬁed with our tool, to
remedy this problem (Section VI). We are also the ﬁrst
to report that PIC options [20] from the gcc compiler
introduce Spectre-STL violations (Section VI).
Discussion. While Spectre attacks opened a new battleﬁeld of
system security, reasoning about speculative executions is hard
and tedious. There is a need for automated search techniques,
yet prior proposals suffer from scalability issues due to the path
explosion induced by extra speculative behaviors. Haunted
RelSE is a step toward scalable analysis of Spectre attacks.
For Spectre-PHT, Haunted RelSE can dramatically speed up
the analysis in some cases, pruning the complexity of analyzing
speculative semantics, and scales on medium-size real-world
cryptographic binaries. For Spectre-STL, it is the ﬁrst tool
able to exhaustively analyze small real world cryptographic
binaries and ﬁnd vulnerabilities in medium-size real world
cryptographic binaries.
II. BACKGROUND
We provide here basic background on Spectre, speculative
constant-time and relational symbolic execution.
In modern processors,
Spectre attacks.
instructions are
fetched in order and placed in a reorder buffer where in-
structions can be executed in any order, as soon as their
operands are available. Processors also employ speculation
mechanisms to predict
the outcome of certain instructions
before the actual result is known. Instructions streams resulting
from a mispeculation—i.e. transient executions—are reverted
at the architectural level (e.g. register values are restored) but
can leave microarchitectural side effects (e.g. cache state is not
restored). While these microarchitectural side effects are meant
to be transparent to the program, an attacker can exploit them
via side-channel attacks [24], [25]. Spectre attacks [26] exploit
this speculation mechanism to trigger transient executions of so
called spectre gadgets that encode secret data in the microar-
chitectural state, which is ﬁnally recovered via side-channel
attacks. There are four variants of Spectre attacks, classiﬁed
according to the speculation mechanism they exploit [2]:
• Spectre-PHT [26], [27] exploits the Pattern History Table
• Spectre-BTB [26] exploits the Branch Target Buffer
which predicts conditional branches,
which predicts branch addresses,
• Spectre-RSB [28], [29] exploits the Return Stack Buffer
• Spectre-STL [13] exploits the memory disambiguation
which predicts return addresses,
mechanism predicting Store-To-Load dependencies.
Speculation mechanisms at
the root of BTB and RSB
variants can, in principle, be mistrained to jump to arbitrary
addresses [5], [29], which seems to be intractable for static
analyzers (cf. Section VII). For this reason, we focus in this
paper on Spectre-PHT and Spectre-STL variants.
Spectre-PHT. At the microarchitectural level, the Pattern His-
tory Table (PHT) predicts the outcome of conditional branches.
In Spectre-PHT, ﬁrst introduced as Spectre variant 1 by Kocher
et al. [26], the attacker abuses the branch predictor to intention-
ally mispeculate at a branch. Even if at the architectural level,
a conditional statement in a program ensures that memory
accesses are within ﬁxed bounds, the attacker can lead the PHT
to mispredict the value of a branch to transiently perform a
memory access out-of-bounds. This out-of-bound access leaves
observable effects in the cache that can ultimately be used to
recover the out-of-bound read value (Listing 1).
uint32_t publicarray_size = 16;
uint8_t publicarray[16] = { 1 .. 16 };
uint8_t publicarray2[512 * 256];
uint8_t secretarray[16]; // Secret data
// This function encodes toLeak in the cache
void leakThis(uint8_t toLeak) {
tmp &= publicarray2[toLeak * 512];
}
void case_1_masked(uint32_t idx) { // idx=131088
if(idx < publicarray_size) { // Mispeculated
// Out-of-bound read, reads secretarray[0]
uint8_t toLeak = publicarray[idx];
leakThis(toLeak);}} //Leaks secretarray[0]
Listing 1: Illustration of a Spectre-PHT attack.
Spectre-STL. Store-to-Load (STL) dependencies require that
loads do not execute before all stores have completed execu-
tion. To allow the CPU to transiently execute store instructions
and to avoid stalling on cache-miss stores, store instructions
are queued in a store buffer. Instead of waiting for preceding
stores to be retired, a load instruction can take its value directly
from a matching store in the store buffer with store-to-load
forwarding. Additionally, when the memory disambiguator
predicts that a load does not alias with pending stores, it can
speculatively bypass pending stores in the store buffer and
take its value from the main memory [30]. This behavior is
exploited in the Spectre-STL [13] variant to load stale values
containing secret data that are later encoded in the cache
(Listing 2).
void case_1(uint32_t idx) {
uint8_t* data = secretarray;
uint8_t** data_slowptr = &data;
(*data_slowptr)[idx] = 0; // Bypassed store
leakThis(data[idx]);} // Leaks secretarray[idx]
Listing 2: Illustration of a Spectre-STL attack.
which programs are written so that they do not store, load
or branch on secret values in order to avoid leaking secrets
via side-channels. However, constant-time is not sufﬁcient to
prevent Spectre attacks. For example, Listing 1 is a triv-
ially constant-time program since there is no secret-dependent
branch or memory access. However, the program is vulnerable
to Spectre-PHT since an attacker can mistrain the branch
predictor and leak secrets in transient execution. Speculative
constant-time [5] is a recent security property that extends
constant-time to take transient executions into account.
Deﬁnition 1 (Speculative constant-time [5]). A program is
secure w.r.t. speculative constant-time if and only if for each
pair of (speculative) executions with the same public input and
agreeing on their speculation decisions, (e.g. follow regular
path or mispeculate at a branch), then their control-ﬂow and
memory accesses are equal.
Note that SCT (like constant-time and other information
ﬂow properties) is not a property of one execution trace
(safety) as it relates two execution traces (it is a 2-hypersafety
property [31]) and thus requires appropriate tools to efﬁciently
model pairs of traces.
symbolic
Binary-level
execution. Symbolic Execution
(SE) [17], [18], [32] consists in executing a program on
symbolic inputs. It builds a logical formula, known as the
path predicate, to keep track of branch conditions encountered
along the execution. In order to determine if a path is feasible,
the path predicate can be solved with an SMT solver [33].
SE can also check assertions in order to ﬁnd bugs or perform
bounded-veriﬁcation (i.e., veriﬁcation up to a certain depth).
The common practice to analyze binary code is to de-
code instructions into an intermediate low-level language—
here DBA [34] (see Appendix A). In binary-level SE, values
(e.g. registers, memory addresses, memory content) are ﬁxed-
size symbolic bitvectors [35]. The memory is represented as
a symbolic array of bytes addressed with 32-bit bitvectors. A
symbolic array is a function (Array I V) mapping each index
i ∈ I to a value v ∈ V with operations:
index i and returns value v stored at index i in a,
• select : (Array I V) × I → V takes an array a and an
• store : (Array I V) × I × V → (Array I V) takes an
array a, an index i, and a value v, and returns the array
a in which i maps to v.
Relational Symbolic Execution (RelSE). RelSE [16], [36]
is a promising approach to extend SE for analyzing security
properties of two execution traces such as SCT1. It sym-
bolically executes two versions of a program in the same
symbolic execution instance and maximizes sharing between
them. For instance, to analyze constant-time, RelSE models
two programs sharing the same public input but with distinct
secret
input and, along the execution, checks whether the
outcomes of conditional branches and the memory indexes
must be equal in both execution—meaning that they do not
depend on the secret, or not.
Speculative constant-time (SCT). Constant time [14] is a
popular programming discipline for cryptographic code in
1Tainting can also be used to approximate such properties but is less precise
(see Section VII).
3
true
true
f alse
In RelSE, variables are mapped to relational expressions
which are either pairs of symbolic expressions (denoted (cid:104)ϕl |
ϕr(cid:105)) when they may depend on secret input; or simple symbolic
expressions (denoted (cid:104)ϕ(cid:105)) when the do not depend on secret
input. For the security evaluation of memory accesses and
conditional instructions, we use the function secLeak deﬁned
in [16] which ensures that a relational expression does not
depend on secrets (i.e. that its left and right components are
necessarily equal):
, π)=
(cid:86)
if ϕ
(cid:86)
if ϕ
(cid:86)
if ϕ
(cid:86)
secLeak (ϕ
= (cid:104)ϕ(cid:105)
= (cid:104)ϕl| ϕr(cid:105)∧ (cid:50) (π ∧ ϕl (cid:54)= ϕr)
= (cid:104)ϕl| ϕr(cid:105)∧ (cid:15) (π ∧ ϕl (cid:54)= ϕr)
where (cid:15) (resp. (cid:50)) denotes (un-)satisﬁability. It relies on the fact
(cid:86)
that, if ϕ
is a simple expression then, by deﬁnition, it does not
depend on the secret and can be leaked securely. However, if
is a pair of expressions, (cid:104)ϕl | ϕr(cid:105), the leak is secure if and
(cid:86)
ϕ
only if ϕl and ϕr cannot be distinct under the current path
predicate π (i.e. π ∧ ϕl (cid:54)= ϕr is unsatisﬁable).
Notations. The set of symbolic bitvectors of size n is de-
noted Bvn. The set of symbolic formulas is denoted Φ and
ϕ, ϕl, ϕr, ψ, . . . are symbolic expressions (bitvectors or arrays)
(cid:86)
(cid:86)
in Φ. The set of relational formulas is denoted Φ and ϕ
, ψ
. . .
(cid:86)
(cid:86)
are relational expressions in Φ. We denote ϕ
|l (resp. ϕ
|r), the
= (cid:104)ϕ(cid:105), ϕ
(cid:86)
(cid:86)
(cid:86)
projection on the left (resp. right) value of ϕ
. If ϕ
|l
(cid:86)
and ϕ
|r are both deﬁned as ϕ. We also lift the functions select
and store on symbolic arrays to relational expressions:
(cid:86)
) (cid:44) (cid:104)select(µ
• select(µ
(cid:86)
, ι
• store(µ
) (cid:44) (cid:104)store(µ
(cid:86)
(cid:86)
, ν
, ι
(cid:86)
(cid:86)
(cid:86)
|l)| select(µ
(cid:86)
|l, ι
(cid:86)
(cid:86)
(cid:86)
|l, ν