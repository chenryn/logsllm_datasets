Swim, using the example from Fig. 1. We ﬁrst give a brief
overview of the Flume operating system. For a more com-
plete description, see [14].
Overview of Flume’s DIFC Primitives. Flume is im-
plemented as a reference monitor that runs as a user-level
process, but uses a Linux Security Module for system-call in-
terposition. Flume monitors Linux programs that have been
modiﬁed to make use of Flume’s DIFC primitives, which are
described below.
tegrity label, and a capability set.
supports secrecy labels and capability sets.)
For each process, Flume maintains a secrecy label, an in-
(Swim currently only
• Tags and Labels. A tag is an atomic element created
by the monitor at the request of a process. A label is
a set of tags associated with an OS object.
• Capabilities. An OS object can only alter its label by
adding a tag t in its capability set marked as a positive
capability (t+), or by removing a tag t in its capability
set marked as a negative capability (t−).
• Channels. Processes are not allowed to create their
286or (ii) the Source and Sink processes were transitively cre-
ated by the same process executing template Anc. A ﬂow
assertion of the form Prot(Source, Sink, Anc) speciﬁes a pro-
tected ﬂow: if a process executing template Source attempts
to send information to a process executing template Sink,
and both the Source and Sink processes were transitively cre-
ated by the same process executing template Anc, then the
send must be successful. Note that Prot assertions do not de-
scribe multiple-step, transitive ﬂows over multiple processes,
but rather describe direct, one-step ﬂows between pairs of
processes. However, a programmer can typically deﬁne poli-
cies using only a few Prot assertions by deﬁning the Prot
assertions over process templates that correspond to pro-
gram points reached immediately before a process writes or
reads any information.
Secrecy assertions specify what information ﬂows from the
original program must be prohibited in the instrumented
program, while Prot assertions specify what ﬂows from the
original program must be allowed. A programmer can con-
struct a policy that is inconsistent in that it speciﬁes that
some ﬂows must be both prohibited and allowed in the orig-
inal program. Swim does not interpret such a policy by
allowing some assertions to take precedence over others. In-
stead, Swim identiﬁes a minimal subset of the assertions
that are inconsistent, and presents these to the program-
mer. This issue is discussed in further detail later in the
section.
Although policies are deﬁned over CSP programs, users
may present policies in terms of the original C program.
The user marks key program points with control-ﬂow labels,
and then constructs policies over the control-ﬂow labels in-
stead of CSP process templates. When Swim translates a C
program to its CSP representation, for each program point
marked with a control-ﬂow label, Swim names the template
corresponding to the program point with the text of the la-
bel. The policy originally given for the C program is then
interpreted for the resulting CSP program.
Exa. 2. The policy for the server in Fig. 1 can be ex-
pressed as the set of ﬂow assertions: Secrecy(W, W, {P1, P3,
P5}, A1), Prot(W, P3, A1), Prot(P5, R, init), where init is
a special process template that represents the root of the
computation. The assertion Secrecy(W, W,{P1, P3, P5}, A1)
speciﬁes that a Worker process, which executes template W ,
may not send information to a diﬀerent Worker process un-
less (i) the information ﬂows through a process that executes
a Proxy template P1, P3, or P5, or (ii) the workers are cre-
ated by the same MPM process that executed template A1.
The assertion Prot(W, P3, A1) speciﬁes that a Worker process
executing template W must be permitted to send information
to a process executing Proxy template P3 if the two processes
were created by the same MPM process executing template
A1. Similarly, the assertion Prot(P5, R, init) speciﬁes that a
Proxy process executing P5 must be permitted to send data
to the Requester executing R.
In addition to ﬂow assertions, Swim takes a set of rules
declaring which process templates denote processes that may
be compromised. For the example in Fig. 1, Swim takes
a rule declaring that any Worker process may be compro-
mised.3
3Swim does not attempt to model all possible ways in
which a process could be compromised.
Instead, it gen-
From Programs and Policies to Instrumentation Con-
straints. Given a program and policy, Swim generates a
system of set constraints such that a solution to the con-
straints corresponds to an instrumentation of the program
that satisﬁes the policy. The constraint system must assert
that (i) the instrumented program uses the Flume API to
manipulate labels in a manner allowed by Flume, and (ii)
the instrumented program manipulates labels to satisfy all
ﬂow assertions.
Each variable in the constraint system corresponds to a
label value for the set of all processes that execute a given
CSP template. Flume restricts how a process manipulates
its label in terms of the capabilities of the process. Swim
expresses this in the constraint system by generating, for
each CSP process template P , variables that represent the
set of tags in the label of a process executing P (labP ), its
positive capability (posP ), its negative capability (negP ),
and the set of tags created when executing P (createsP ).
Some constraints in the system assert that each process’s
labels may only change in ways allowed by Flume. These
constraints assert that in each step of execution, a process’s
label may grow no larger than is allowed by its positive ca-
pability, and may shrink no smaller than is allowed by its
negative capability.
Exa. 3. To model how the label and capabilities of a pro-
cess may change in transitioning from executing template
A5 to template A6, Swim generates the following four con-
straints:
labA6 ⊆ labA5 ∪ posA6
labA6 ⊇ labA5 − negA6
Swim generates additional constraints to encode that the
instrumented program does not allow ﬂows that are speciﬁed
by a Secrecy assertion, but allows all ﬂows speciﬁed in a Prot
assertion.
∪ createsA6
∪ createsA6
posA6
negA6
⊆ posA5
⊆ negA5
Exa. 4. To enforce the ﬂow assertion Secrecy(W, W,{P1,
P3, P5}, A1) for the server in Fig. 1, the constraints will
force the program to create a tag so that the undesired ﬂows
are prohibited.
(How this occurs will become clearer in
Exa. 5.) In §3.3.3 (Defn. 2), we deﬁne a set DistA1 of pro-
cess templates such that if a distinct tag is created each time
a process executes the template, then if two processes descend
from distinct processes that executed A1 and are marked with
tags created at the template, then the two processes will have
distinct tags. Swim uses this information to encode the se-
crecy assertion as follows:
labW − (cid:91)
labW (cid:54)⊆
 ∪
(cid:91)
createsR
R∈DistA1
negQ.
Q(cid:54)∈{P1,P3,P5}
Swim must guarantee that the ﬂows described by the asser-
tions Prot(W, P3, A1) and Prot(P5, R, init) are permitted in
the instrumented program. In §3.3.3 (Defn. 3), we deﬁne a
set ConstA1 of process templates such that if a tag is created
erates “worst-case” constraints that assert that the process
always tries to send information with its lowest possible la-
bel, and receive information with its highest possible label.
Consequently, if a solution to the constraint system exists,
it guarantees that a compromised process acting in such
an “extremal” way will not be able to violate the desired
information-ﬂow policy.
287when a template Q in the set is executed, and two processes
descend from the same process that executed A1, and both
processes carry a tag created at Q, then the processes carry
the same tag. Swim uses this information to encode the two
Prot assertions as follows:
labW ⊆ labP3 ∩(cid:83)
labP5 ⊆ labR ∩(cid:83)
Q∈ConstA1
Q∈Constinit
createsQ
createsQ.
From Instrumentation Constraints to DIFC Code.
Solving constraint systems created by the method described
above is an NP-complete problem. Intuitively, the complex-
ity arises because such a constraint system may contain both
positive and negative subset constraints and occurrences of
set union. However, we have shown that if the constraint
system has a solution, then it has a solution in which all
variables have a value with no more tags than the number
of Secrecy assertions in the policy [9, App. B]. Using this
bound, Swim translates the system of set constraints to a
system of bit-vector constraints such that the set-constraint
system has a solution if and only if the bit-vector system has
a solution. Bit-vector constraints can be solved eﬃciently in
practice by an oﬀ-the-shelf SMT solver, such as Yices [6], Z3
[16], or STP [8]. Such solvers implement decision procedures
for decidable ﬁrst-order theories, including the theory of bit
vectors.
If the SMT solver determines that no solution exists for
the bit-vector constraints, then it produces an unsatisﬁable
core, which is a minimal set of constraints that are unsatisﬁ-
able. In this case, the program and the policy assertions may
be inconsistent. Swim uses the unsatisﬁable core identiﬁed
by the solver to determine a minimal set of inconsistent ﬂow
assertions from the policy, and a minimal sub-program for
which the assertions are inconsistent. Swim reports to the
user that it may not be possible to instrument the program
to satisfy the policy, and as a programming aid, provides
the subprogram and policy assertions that contributed to
the unsatisﬁable core.
On the other hand, if the SMT solver ﬁnds a solution to
the bit-vector constraints, then Swim translates this to a
solution for the system of set constraints. Using the solu-
tion to the set-constraint system, Swim then inserts DIFC
code into the original program so that the label values of all
processes over any execution of the program correspond to
the values in the constraint solution. By construction, the
resulting program satisﬁes the given information-ﬂow policy.
Exa. 5. The policy in Exa. 2 has one Secrecy ﬂow asser-
tion. Consequently, if the system of constraints generated for
the program in Fig. 1 and the policy in Exa. 2 has a solution,
then it has a solution over a set with one element. Swim thus
translates the system to an equisatisﬁable bit-vector system
over a set with a single element, and feeds the bit-vector
system to an SMT solver. The solver determines that the
bit-vector system has a solution, which is partially displayed
Prog := PROCVAR1 = Proc1 . . . PROCVARn = Procn
Proc := SKIP
|PROCVAR
| ChangeLabel(LAB, LAB, LAB) → PROCVAR
| CREATEτ → PROCVAR
|? PROC ID → PROCVAR
|! PROC ID → PROCVAR
|PROCVAR1 2 PROCVAR2
|PROCVAR1(cid:57) PROCVAR2
Figure 3: CSPDIFC: a fragment of CSP used to model
the behavior of DIFC programs. Templates in gray
are not contained in programs provided by the user.
They are only generated by Swim.
below using set-values over the domain {τ}:
X labX posX negX createsX
∅
A1
∅
A5
∅
A6
∅
A7
{τ}
P1
{τ}
P3
∅
P5
W {τ}
∅
R
∅
{τ}
{τ}
{τ}
{τ}
{τ}
{τ}
∅
∅
∅
{τ}
{τ}
{τ}
{τ}
{τ}
{τ}
∅
∅
∅
{τ}
∅
∅
∅
∅
∅
∅
∅
Swim uses the solution to generate the DIFC code highlighted
in Fig. 1. In the solution, createsA5 = {τ}, so Swim inserts
just before line A5 (i.e., at A4) a call to create a new tag t
each time A4 is executed. In the solution, labP1 = posP1
=
= {τ}, so Swim rewrites spawns of Proxy processes so
negP1
that all Proxy processes are initialized with t in their label,
positive capability, and negative capability. In the solution,
labP3 = {τ} while labP5 = ∅, so Swim inserts code just
before P5 (i.e., at P4) to clear all members of the negative-
capability set (i.e., t) from the label of the process. The ﬁnal
result is the full program given in Fig. 1.
3. DIFC INSTRUMENTATION
We now discuss Swim in more detail. We ﬁrst formally
describe the programs and policies that Swim takes as input,
and then describe each of the steps it takes to instrument a
program.
3.1 DIFC Programs
Swim analyzes programs in a variation of CSP that we
call CSPDIFC. Imperative programs are translated automat-
ically to CSPDIFC programs using a straightforward transla-
tion method described in [9, App. I]. The syntax of CSPDIFC
−→
is given in Fig. 3. A CSPDIFC program
P is a set of equations,
each of which binds a process template to a process-template
variable. Intuitively, a process template is the “code” that a
−→
process may execute. For convenience, we sometimes treat
P as a function from template variables to the templates to
which they are bound.
288The semantics of CSPDIFC follows that of standard CSP
[2], but is extended to handle labels. The state of a CSPDIFC
program is a set of processes. Processes are scheduled non-
deterministically to execute their next step of execution.
The program state binds each process to:
1. A process template, which deﬁnes the eﬀect on the
program state of executing the next step of the process.
2. A label, positive capability, and negative capability,
which constrain how information ﬂows to and from the
process.
3. A namespace of tags, which decide what tags the pro-
cess may manipulate.
−→
We give CSPDIFC a trace semantics, which associates to every
CSPDIFC program
P may
generate over its execution. Events consist of:
−→
P the set of traces of events that
1. One process taking a step of execution (STEP).
2. One process spawning another process (SPAWN).
3. One process sending information to another (!).
4. One process receiving information from another (?).
Whenever a process p bound to template variable X takes
a step of execution, p generates an event STEP(X). p then
spawns a fresh process p(cid:48), generates an event SPAWN(p, p(cid:48)),
sets the labels of p(cid:48) to its own label values, sets the tag
namespace of p(cid:48) equal to its own, and halts. However,
−→
P (X) = ChangeLabel(L, M, N ) → PROCVAR1 or
−→
when
P (X) = CREATEτ → PROCVAR1, no events are generated
in the trace. This allows us to state desired properties of
−→
an instrumentation naturally using equality over traces (see