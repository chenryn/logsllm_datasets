## 0x01 漏洞信息
### 0x01.1 漏洞简述
  * 编号：CVE-2013-2551
  * 类型：整数溢出(Integer Overflow)
  * 漏洞影响：远程代码执行(RCE)
  * CVSS 2.0：9.3
VGX.dll中`COALineDashStyleArray::put_length`函数在处理length数据时未做有效验证，以致length为负数可造成整数溢出，进而实现任意读写。
### 0x01.2 漏洞影响
Microsoft Internet Explorer 6—10
### 0x01.3 修复方案
[MS13-037](https://docs.microsoft.com/en-us/security-updates/securitybulletins/2013/ms13-037)
## 0x02 漏洞分析
### 0x02.1 分析环境
  * OS版本：Windows XP Service Pack 3
  * Internet Explorer版本：8.0.6001.18702
  * VGX.dll版本：8.0.6001.18702
### 0x02.2 前置知识
VML的全称是Vector Markup
Language(矢量可标记语言)，其基于XML，矢量图形——意味着图形可以任意放大缩小而不损失图形的质量。VML相当于IE里面的画笔，能实现你所想要的图形，而且结合脚本，可以让图形产生动态的效果。(不仅是IE，Microsoft
Office同样支持VML)
使用VML首先要通过``引入：
之后声明VML Namespace：
如此便可添加VML元素以绘制图形。
一例:
    VML Sample
Shape是VML最基本的对象，利用它可以画出所有你想要的图形。其主要属性Path可参阅[VML Path Attribute—Microsoft
Docs](https://docs.microsoft.com/en-us/windows/win32/vml/msdn-online-vml-path-attribute)。
### 0x02.3 详细分析
使用IE打开`poc.html`：
    POC by VUPEN
    var rect_array = new Array()
    var a          = new Array()
    function createRects(){
        for(var i=0; i 0) {
                try{
                    shape.dashstyle.array.item(0x2E+0x16+i) = 0x4b5f5f4b;
                }
                catch(e) {continue}
           }
        }
    }
允许阻止内容后，WinDbg附加进程并运行，单击`crash`按钮，崩溃点如下：
使用`gflags.exe`为`iexplore.exe`开启页堆，WinDbg启动`iexplore.exe`，通过`.childdbg
1`命令启用子进程调试并运行后，崩溃点如下：
`kb`查看调用堆栈：
重新启动`iexplore.exe`，加载`VGX.dll`完成后于`ORG::Get`函数处设断，查看其`this`参数：
继续向下分析，可以看到`vgx!ORG`对象结构偏移0x10处存储指向`dashstyle`数组指针：
`marginLeftAddress = vml1.dashstyle.array.item(0x2E+0x16);`操作由`memecpy`完成：
漏洞成因显然不位于该函数，继续向上回溯至`vgx!COALineDashStyleArray::get_item`，其调用`vgx!ORG::CElements`获取数组元素个数：
要读取元素下标需大于`0xFFFFFFFF`，小于`vgx!ORG`对象结构偏移0x04处值(WORD)。若下标合法，之后便会调用`vgx!ORG::Get`。可以从上图看到数组Length值`0xffff`，该值需跟进`COALineDashStyleArray::put_length`函数分析。
首先获取数组原长度，与更改长度进行比较：
此处即为漏洞触发位置，其调用`vgx!ORG::CElements`函数获取长度使用`movzx eax, word ptr
[eax+4]`指令，将长度当作无符号整数处理(而非采用`movsx`指令)，但跳转语句`jge`是基于有符号整数比较的跳转。
大于等于则会调用`vgx!ORG::DeleteRange`：
跟进发现其调用`MsoDeletePx`：
继续跟进，写入更改长度操作位于`MsoFRemovePx`函数内：
如此一来，将数组Length修改为0xFFFF，进而可以实现越界读写——前文分析`vgx!COALineDashStyleArray::get_item`函数对应越界读操作，下面看越界写操作。该操作对应`vgx!COALineDashStyleArray::put_item`函数，其与`get_item`不同之处是调用`vgx!ORG::PGet`函数：
该函数用于计算写入位置：
之后写入操作由`put_item`中`mov [eax], ecx`指令完成：
### 0x02.4 利用分析
#### 0x02.4a 信息泄露
有两种信息泄露方法，详见下文分析。
##### `_anchorRect`属性
访问`_anchorRect`属性时会调用`COAShape::get__anchorRect`函数，而该函数会通过`malloc`申请0x10字节空间：
该空间用于存储`COAReturnedPointsForAnchor`对象：
如此一来，可申请大量空间存储`COAReturnedPointsForAnchor`对象，中间放置Dashstyle
Array，之后便可访问后续`COAReturnedPointsForAnchor`对象虚表以获取VGX.dll基址。但笔者在进行布局时发现其后并非紧接`COAReturnedPointsForAnchor`对象：
    for(var i=0; i
    INFO LEAK
    var rect_array = new Array()
    var a = new Array()
    function createRects(){
      for(var i=0; i
##### `_vgRuntimeStyle`属性
`_vgRuntimeStyle.rotation`对应`COARuntimeStyle::get_rotation`函数，初次访问会申请0xAC大小空间(`COARuntimeStyle::get_rotation`——>`CVMLShape::GetRTSInfo`——>`CParserTag::GetRTSInfo`)：
实际占用空间大小：
那么于其中插入Dashstyle Array大小为0xB0(即44个元素，加上头部占用8字节，恰为0xB8)：
之后写`_vgRuntimeStyle.marginLeft`，对应`COARuntimeStyle::put_marginLeft`函数，由于先前已经申请内存空间，该函数调用`CVMLShape::GetRTSInfo`——>`CParserTag::GetRTSInfo`时便不会再次申请，而是返回内存地址，写入字符位置相对于该地址偏移为0x58：
而读`_vgRuntimeStyle.marginLeft`，对应`COARuntimeStyle::get_marginLeft`函数，该函数会将偏移0x58处指针指向内容读取出来：
如此一来，控制0x58处指针内容，可实现任意地址读取。
利用漏洞可读写该地址处内容，下标为0x2E(0x2B对应数组最后一个元素，0x2C-0x2E是头部所占用12字节)+0x16(0x58/4)。完整POC如下：