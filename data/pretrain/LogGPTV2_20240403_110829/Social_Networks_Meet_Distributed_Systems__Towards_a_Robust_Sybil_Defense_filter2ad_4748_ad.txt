tack edge with a high probability.
√
√
SybilLimit [31] improves upon SybilGuard in that Sybil-
Limit accepts at most O(log n) Sybil nodes per attack edge
√
with a high probability for g = O(n/ log n). In SybilLimit,
m) short random walks of
each node performs r = O(
length w = O(log n), and gathers the knowledge of the ﬁnal
edge (tail ) of each random walk. A veriﬁer accepts a suspect
if they both share a common tail.
Gatekeeper [27], with a strong assumption that the so-
cial network graph is a balanced expander-like network, ac-
cepts at most O(log g) Sybil nodes per attack edge when
508g < O(n/ log n). In the worst case when g = O(n/ log n),
both SybilLimit and Gatekeeper accept O(log n) Sybil nodes
per attack edge. Gatekeeper works by distributing O(n)
tickets to the rest of the network in a breadth-ﬁrst fashion
from a few (s) seed nodes. A veriﬁer accepts a suspect that
has received tickets from at least fadmit ∗ s seed nodes.
Sybil-Resilience. X-Vine [21] is designed to perform se-
cure communications pseudonymously over a social overlay
network in the face of a Sybil attack. X-Vine constructs
trails on top of the overlay such that these trails can be
later used for routing messages from one node to another
in the network. An adversary can employ a large number
of Sybil nodes in such a network to perform malicious ac-
tivities such as traﬃc analysis, dropping lookups and trails,
and/or routing them to other Sybil nodes. If the number of
attack edges is limited, X-Vine bounds the number of trails
that can be constructed between the honest and Sybil re-
gions. Thus, the path of a lookup issued by an honest node
for another honest node remains in the honest region with
a high probability. Note that a successful lookup path con-
tains all its intermediate nodes honest as well, thus making
the communication over this path eﬀectively secure.
Most of the above SNSD studies do not incorporate churn
as a major design factor. Studies of SybilGuard [32], Sybil-
Limit [31], and Gatekeeper [27] have little explored how
churn aﬀects their system performance. Whanau [18] and
X-Vine [21] were put to test with a worst-case churn of 20%,
i.e., at least 80% of all honest users are online at any given
point in time. However, as we show next through review and
measurements, real-world P2P systems have only 5-25% of
all users online at any instance. Such a small fraction of all
honest users being online at a time can signiﬁcantly impact
the performance of the above systems.
2.2 Churn in P2P Systems
Churn has often been considered as a key challenge in de-
veloping P2P systems. Stutzbach and Rejaie [26] measured
churn in three peer-to-peer ﬁle sharing systems: BitTorrent,
Kad and Gnutella. Their results corroborate and extend
previous eﬀorts to show that peer uptime is skewed in all
three systems, with many users staying online only for a
few minutes at a time. This observation, in turn, has direct
implications for the connectivity of the system. However,
Stutzbach and Rejaie note that previous uptime is a reason-
able predictor of future uptime for peers, a property that
can be leveraged for connectivity resilience.
On a diﬀerent perspective, Rhea et al. [25] present an
overview of the literature on the measurement of session du-
rations in ﬁle-sharing P2P systems. This literature points to
median session durations in the order of few minutes to one
hour. Moreover, Bhagwan et al. [10] measured Overnet to
ﬁnd that users are online on a median of 30% of the period
that comprises their participation in the system. Rhea et al.
show how the assumptions related to churn drastically af-
fect the performance of DHT systems, requiring their mech-