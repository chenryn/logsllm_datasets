met). For example, if an attacker previously brute-forced all
passwords of lengths 1–5 or if they knew all passwords
contained at least 6 characters, they might include >5 in rules
to reject guesses containing ﬁve or fewer characters. Similarly,
the transformation sa@ (replacing every ‘a’ with ‘@’) could be
preﬁxed with /a to reject inputs without an “a.” Other rejec-
tion transformations examine the nth character of a guess (e.g.,
=NX) or count the instances of a given character or character
(cid:20)(cid:25)(cid:20)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:17 UTC from IEEE Xplore.  Restrictions apply. 
TABLE I: Categorization of JtR and Hashcat transformation
rules and whether they can be reasoned about analytically.
Transformations
John the Ripper
Shift Case
Insertion/Deletion
Substitution
Rearrangement
English Grammar
Rejection
Memory
Total
Hashcat
Shift Case
Insertion/Deletion
Substitution
Rearrangement
Rejection
Memory
Total
Fully
Invertible,
Countable
Regex-
Invertible,
Countable
Fully
Invertible,
Uncountable
Uninvertible,
Uncountable
8
8
5
6
3
14
0
44
6
7
8
15
9
0
45
0
2
0
0
0
0
0
2
0
2
0
0
0
0
2
0
0
0
0
0
0
0
0
2
0
0
0
0
0
2
0
2
0
0
0
0
4
6
0
1
0
0
0
5
6
class (e.g., %NX). While JtR and Hashcat both support rejection
transformations, for performance reasons Hashcat only does
so in special cases (e.g., CPU-based hashcat-legacy). JtR also
minimizes redundancy by only making guesses that differ from
their immediate predecessor guess.
3) Memory Transformations: Both JtR and Hashcat provide
memory transformations that enable setting or querying vari-
ables in memory, enabling complex modiﬁcations to an input
and helping to avoid redundant guesses. Note that variables
can represent either substrings or numbers (e.g., positions or
lengths). While we support one frequent special case, we do
not support memory commands generally (see Appendix A).
4) JtR’s Rule Preprocessor: While Hashcat’s transforma-
tions generally cause an input word to generate a single guess
(or none, based on rejections), JtR has a rule preprocessor that
allows multiple similar rules to be expressed compactly as a
single rule. For example, the JtR rule r $[0-9] reverses the
input and then appends a number. Writing the equivalent in
Hashcat’s notation requires either ten rules or a hybrid attack
combining a mangled wordlist with selective brute-forcing.
C. Password-Cracking Software’s Other Attack Modes
While mangled-wordlist attacks are the most commonly
used and intellectually interesting, JtR and Hashcat support
other attacks. Brute-force attacks test all characters in a
given keyspace, while mask attacks are a subset in which
the keyspace is constrained. These are trivial to analyze by
checking if a password is in the given keyspace. Combinator
attacks concatenate two words and are trivial to reason about
because a given password can be split into parts, checking each
part for membership in the wordlist. Hybrid attacks combine
these approaches and can be reasoned about similarly.
IV. OUR TOOLS: RULE INVERSION AND GUESS COUNTING
In this section, we describe the two main components of
our analytical tools: rule inversion and guess counting. We
start with an overview of their interfaces and purposes, then
discuss their algorithmic design and implementation. We also
present how these components are combined into the higher-
level application of computing guess numbers for passwords.
We completed implementations for both JtR and Hashcat, but
we focus on JtR, discussing our Hashcat tool at the end.
1) Rule Inversion: Recall that JtR applies a rule to every
wordlist entry to generate a possibly large number of guesses.
To determine if particular target passwords are among these
guesses, one can run the tool and store the guesses, but this
is expensive in both computation and storage. We designed a
more efﬁcient, analytical method that works for most, but not
all, rules. Speciﬁcally, we design and implement an efﬁcient
function invert_rule with the signature:
regex ← invert rule(rule, pw).
The function invert_rule takes as input a rule rule and a
target password pw. It outputs a regular expression regex that
decides the set of preimages of pw under rule (i.e., words
w that generate pw when mangled with rule). This set may
be empty (regex matches nothing). For uninvertible rules we
allow an error mode indicating no regex was computed.
Two types of regular expressions may be output. A simple
regex does not use ∗ or + operators, consisting only of a se-
quence of character classes. For example, s[3eE]cr[3eE]t
is a simple regular expression (matching 9 total strings), but
secret(0*) is not (matching an inﬁnite set, as it allows any
number of trailing zeros). A non-simple regex uses ∗ and +.
When our tool can compute a simple regex for a rule, we term
the rule fully invertible. When a non-simple regular expression
is computed, we say the rule is regex-invertible to indicate a
general expression must be used in future computations. If no
regex can be output, we say the rule is uninvertible.
As discussed below and indicated in Table I, we compute
simple regexes for (possibly very complex) rules built from
44 of the 52 possible JtR transformations. For such rules, we
determine if a rule would guess a given password quickly (i.e.,
without a linear scan of the wordlist). For two transformations
(truncation and substrings), we produce non-simple regexes.
For six uninvertible transformations (two forms of character
purging and four memory commands), we do not produce a
regex. As detailed in Appendix A, for these we fall back to
enumerating guesses out of performance considerations (non-
simple regexes) and necessity (uninvertible transformations).
The primary usage of rule inversion is to determine if any
entry of a wordlist wlist would guess pw under rule. For
a non-simple regex, we test if the regex recognizes each entry
of wlist via a linear scan. A simple regex enables faster
checking, however, because we can enumerate the recognized
strings by ﬁlling in the possible choices and checking (via
a hash table) whether each possible string is a member of
wlist. For most simple regexes generated for practical rule
lists, the regex recognizes only a small number of possibilities,
so this enumeration is far faster than passing over wlist.
Unfortunately, in some corner-cases that depend on both pw
and rule, our tool will generate a regex that is simple, yet
enumerates a large number of values. For example, inverting
the password @@@@@@@@@@ under the rule “substitute @ for
a” results in the regex [a@]{10}, which enumerates 210
(cid:20)(cid:25)(cid:21)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:17 UTC from IEEE Xplore.  Restrictions apply. 
strings, all of which must be checked for membership in
wlist. In these cases, we avoid brute force enumeration of
the strings matched by the simple regex. Instead, we represent
wlist using a trie [42]. Because only a small number of
the matched strings will typically be in the wordlist, and the
strings will tend to share preﬁxes, most of those strings can be
skipped. That said, the theoretical worst-case complexity is not
changed. For example, the rule “delete the ﬁrst four characters”
results in a regex like [anychar]{4}input_password,
which matches any string that has four arbitrary characters
preﬁxing the input password, causing either approach to be
slow. To address this, we built a proactive toolkit to ﬁnd such
rules and mark these rules as uninvertible. In principle, there
exist pathological rules causing all three approaches to fail,
though we observed none in practical lists. For such rules,
human-in-the-loop tuning would be required.
2) Guess Counting: Our guess counting component an-
swers the question: Given wordlist wlist and rule rule,
how many guesses will JtR generate? An analogous question
is posed for Hashcat, which differs by guessing in word-
major order. We say a rule is countable if our tool can count
guesses faster than running the software, and uncountable
otherwise. Guess counting is signiﬁcantly more complex than
rule inversion. We have factored it into three pieces:
feat_grps ← extract_features(rlist),
aux_info ← precompute(feat_grps, wlist),
num ← guess_count(aux_info, rule).
We describe these starting with guess_count. Using some
precomputed information, it outputs the number of guesses
JtR generates running rule on wlist. This function itself
is fast, running in time independent of the wordlist size.
Functions extract_features and precompute
perform precomputation to make guess_count fast.
extract_features takes as input a rule list rlist and
outputs feat_grps, a data structure representing which
abstract word properties (e.g.
the presence of a
digit) are relevant for counting the guesses made by rules in
rlist. Function precompute takes as input feat_grps
and a wordlist wlist and computes auxiliary information
aux_info. This information enables us to quickly count
words with combinations of properties via a lookup table
instead of making multiple passes on the entire wordlist.
length,
guess_count estimates the runtime of JtR on rules
without executing them. Moreover, each run will be in time
sublinear in the size of wlist. To this end, we allow one-
time expensive precomputation in extract_features and
precompute. The precomputation of aux_info is done
up-front and only once, encoding information about the prop-
erties of wlist, such as the number of words of a given
length and the number of those that contain a digit. Computing
feat_grps is fast, but aux_info can take on the order of
hours, and it can be large (on the order of a few GB). This
is often still far faster and smaller than running JtR. With this
data, evaluating guess_count typically only takes seconds
per rule, which is crucial when there are thousands of rules.
In our higher-level applications, we only need the output of
While many rules are easy to count analytically,
guess_count, so we can delete aux_info after using it.
they
quickly become complicated when rules (especially those with
rejections) are composed. Our tool handles the complexity of
arbitrary compositions of invertible transformations.
A. Rule Inversion
We describe how invert_rule works on single transfor-
mations, and then how it is extended to composed rules.
1) Single Transformations: For most
rules consisting
of a single transformation, invert_rule(rule,pw) is
straightforward. For instance, if rule appends a character d,
then it outputs the empty regular expression if pw does not end
in d, and otherwise outputs the regular expression matching
exactly pw with the trailing d deleted. In either case, this
regular expression is simple (using our deﬁnition above).
For some transformation classes, this approach produces
more complicated, but still simple, regular expressions. Con-
sider the rule sXY that substitutes all X characters for Y.
To compute invert_rule, we replace each occurrence of
Y in pw with the regular expression [XY]. For example,
if pw = aYbY, invert_rule outputs regular expression
a[XY]b[XY], which is simple by our deﬁnition.
We applied this analysis to handle 44 of the 52 JtR single
transformations (see Table I). We omit tedious details from
the paper, but our open-source implementation fully speciﬁes
the process. For two other transformations (truncate and sub-
string), our tool computes non-simple regexes. To see why this
was necessary, consider a rule that truncates a word down to 4
characters (or takes a substring of length 4). We can represent
the preimage set for such a rule using a general regular
expression, but there may be a huge number of preimages.
For the two purging rules (@X and @?C which purge all “X”
characters or characters from class C, respectively), our tool
does not produce a regex. The difﬁculty with these becomes
apparent when considering composition and we return to this
below. Finally, we do not compute regexes for the four mem-
ory access commands as doing so would require analyzing
what amounts to arbitrary programs (see Appendix A).
2) Composed Rules: We handle composed rules by adapt-
ing our single-transformation ideas to work on regexes, rather
than strings of literals only. This allows us to feed the regex
output of one single-transformation computation into another
single-transformation computation. Moreover, if two stages
individually produce a simple regular expression, then their
composition will also produce a simple regular expression.
For example, consider the composed rule {sXY, which
rotates the string one character left and then substitutes oc-
currences of X with Y. For aYbY, invert_rule proceeds:
1) Invert sXY on pw, getting a[XY]b[XY].
2) Invert { on a[XY]b[XY], getting [XY]a[XY]b.
The key observation is the second stage can unambiguously
manipulate the regex to arrive at the correct answer.
This process works for arbitrary compositions of all single
transformations that produce simple regexes. We can now
explain why we do not produce regexes for purge commands.
(cid:20)(cid:25)(cid:22)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:17 UTC from IEEE Xplore.  Restrictions apply. 
Consider the seemingly innocent rule $Y@X (“append Y then
purge all X”). Attempted inversion on pw = Y might proceed:
1) Invert @X on pw, getting (X*)Y(X*).
2) Invert $Y on (X*)Y(X*), which requires case analysis.
The second step is complicated in the sense that the inversion
depends on the actual string matched by (X*)Y(X*) and
thus requires a regex that handles cases separately. Even if
we handled one step of composition, the complexity grows
exponentially as rules are composed. Thus, we opted to limit
our inversion computations to simple regular expressions.
B. Guess Counting
Similar to rule inversion,
We start by sketching guess_count for single trans-
formations. Guess counting for composed rules is far more
complicated.
the four memory
commands are uncountable because they amount to arbitrary
computation. Both purge commands are also uncountable.
Appendix A gives further details. Note that truncation and
substring are only regex-invertible, yet countable.
1) Single Transformation Rules: After
pre-
computation on wlist, we can count single transformations
in time independent of the size of wlist. For example,
consider $[0-9], which appends one digit. For this rule,
guess_count outputs num = 10 · |wlist|.
initial
A slightly more complicated example is /?d, which rejects
if the input word does not a contain a digit. This rule will
generate at most |wlist| guesses since it is ﬁltering words
from the list. This is of course easy to calculate by making
a pass on wlist. Our strategy, however, is to precompute
the needed information about such properties to avoid making
multiple passes. The 46 JtR transformations we handle were
done similarly, sometimes using auxiliary data (see below).
2) Feature Groups Extraction: To enable fast counting, we
ﬁrst collect in extract_features the combinations of
features that need to be indexed for later counting. Examples
include the number of words of each length, the number that
contain a digit (or a particular character), and others. Based
on the rules, we will later want to quickly look up counts
for combinations of these features (e.g. how many words of a
given length contain the letter “N,” yet no digits). The output of
feature extraction is effectively a list of groups of features. The
next stage generates a lookup table for constant-time counting
of the number of words satisfying any combination of features
in the group. A table will be exponentially large in the number
of features in a group, so we must limit the size of groups.
Our actual implementation is a compromise between two
extremes. The ﬁrst extreme is to include all features in one
group, but for real-world rule lists this produces a table too
large to store. The other extreme is to create a group for each
rule on its own. Each table will be very small (often between
2 and 16 entries), but populating that many tables is slow. We
instead create groups greedily until reaching a threshold size
(usually 20 in our experiments), at which point we close that
group and start another. As we iterate over rules, we check if
the needed feature combination is already contained in some
group. If so, we note this and move on without modifying the
groups. This intermediate approach generates a small number
of groups (e.g. 44, versus thousands in the second extreme)
that induce moderately sized look-up tables (e.g. 64MB per
table). We use heuristics to process rules containing “popular”
transformations ﬁrst, resulting in more frequent table reuse.
3) Auxiliary Precomputation: For each group G1, . . . , Gn,
we include in the output aux_info a multidimensional array
Ai of dimension equal to the number of features in Gi. Each
dimension of Ai corresponds to one feature. We populate the
arrays by iterating over words and incrementing the cell of
each table corresponding to the features satisﬁed by the word.
For example, suppose a feature group has features length,
hasdigit, and hasB. We create an array A1, then for each pos-
sible length (cid:2) ∈ {1, . . . , 32}, and each possible boolean values
bhasdigit, bhasB ∈ {0, 1} we populate A1[(cid:2)][bhasdigit][bhasB]
with the number of words in wlist that match that com-
bination of features. When we iterate over words, we check
its length and whether it contains a digit and a B, incrementing
the corresponding cell (e.g., T9A increments cell A1[3][1][0]).
4) Full Guess Counting: Guess counting for composed
rules is simple only for isolated cases. For example, $[0-9]
$[a-z] (“append a digit then append a letter”) is easy to
guess count via the “product rule” as num = 10· 26·|wlist|.
Typical rules, though, have more complicated dependencies
and do not obey the product rule. Consider the composed rule
$1 >4 /?d, which appends 1 and then rejects the guess
unless it has length greater than 4 and a digit. Appending
1 obviously generates wlist guesses, and we could easily
handle >4 and /?d individually via (compact) precomputed
data about wlist. Reasoning about the composed rule re-
quires tracking how they affect the composition of wlist.
Intuitively, the process works “backwards” as follows:
1) /?d: Remember that only guesses with a digit will count.
2) >4: Remember that only guesses of length 5+ will count.
3) $1: Modify the previous requirements. Since we append
a digit, /?d will be satisﬁed and >4 becomes >3.
Thus, guess_count looks up in the appropriate array Ai
of aux_info how many words in wlist are 4+ characters
long as each such word generates one guess by this rule.
Our selection of auxiliary data enables efﬁcient guess count-
ing for arbitrary composed rules. Our implementation directly
extends the example above. Starting with a rule’s rightmost
transformation, we modify the state to record how the list will
be manipulated by that rule and then propagate left. Finally,
we perform a fast table lookup for the counting.
We encoded exactly how every supported transformation
will update state. For most rules this was simple, but for others
it was moderately complex. For example, the “reﬂect” rule f
appends a reversed string to itself (e.g. Frog is mapped to
FroggorF). Applying f updates length and the presence and
location of characters, both of which our tool handles.
5) Time/Space Analysis: To justify this design, we com-
pare its asymptotic runtime to naive brute-forcing (ignoring
log factors coming from data structure implementations and
assuming every rule is invertible and countable). The brute-
force approach to counting all of rlist takes time:
(cid:20)(cid:25)(cid:23)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:17 UTC from IEEE Xplore.  Restrictions apply. 
O(|wlist| · Σrulesize(rule)) (cid:5) O(|wlist| · |rlist|),
where size(rule) is the number of guesses rule generates
per word. In aggregate, this will typically be larger than 1.
In our approach, extract_features runs in time
O(|rlist|) as the number of relevant features per rule is
almost always small. The slowest part of our pipeline is
precompute, producing data structure aux_info of size
O(Σt
i=12|Gi|),
assuming the features are binary, where t is the number of
tables. After allocating the tables, we spend additional time
O(|wlist| · t) to populate their entries (a single pass on the
wordlist that increments one cell in each table for each word).
Finally guess_count performs a constant-time lookup
of the number of transformations in the rule being counted,