本篇文章大概介绍了一下目前主流的端口扫描技术，层面不深，面向对端口扫描不太清楚的同学，若文章有错，还请师傅们斧正。
按照目前的协议类型，我们大致可以知道有：
> ​
> 一个IP地址可以有65535(2^16)个端口，范围则是从0到65535(2^16-1)，每个端口按照协议又可以分为两种类型：一种是TCP端口；另一种是UDP端口。
>
> ​
> TCP、UDP都是IP层的传输协议，其中TCP是面向连接、可靠的字节流服务；UDP则是不可靠的，面向数据报的服务。每一个端口都会支持这两种协议，因此可以基于这两种协议进行端口扫描。
以及现在还有通过在 TCP/IP 模型中的网络层 ICMP 协议来探测端口的扫描技术。
# TCP
TCP报文这里就不再细讲了，也不是重点，放一张TCP数据报文的图，具体可以去百度百科了解：
TCP三次握手：
## TCP CONNECT SCAN
原理很简单，与目标端口建立3次握手，如果成功建立则为`open`，收到`RST`则为`close`
### usage
MSF 模块：
    use auxiliary/scanner/portscan/tcp
Nmap 选项参数：
    nmap -sT scanme.nmap.org
## TCP SYN SCAN
也称为TCP半连接扫描，只发送三次握手的第一次SYN报文段，如果收到`ACK+SYN`则为`open`，收到`RST`则为`close`，这种好处是不必等待三次握手完全完成，速度快且不容易被防火墙记录进日志。
Nmap 处理方式：
Probe Response | Assigned State  
---|---  
TCP SYN/ACK response | `open`  
TCP RST response | `closed`  
No response received (even after retransmissions) | `filtered`  
ICMP unreachable error (type 3, code 1, 2, 3, 9, 10, or 13) | `filtered`  
### usage
MSF 模块：
    use auxiliary/scanner/portscan/syn
Nmap 参数
    nmap -sS scanme.nmap.org
## TCP Xmas Tree SCAN
客户端向服务端发送带有 `PSH`，`FIN`，`URG` 标识的数据包(即不含有`ACK SYN RST`)，被称为TCP Xmas
Tree扫描。其利用的是`RFC`的规定:
> ​ 如果不设置SYN，RST，或者ACK位的报文发送到开放端口，理论上，这不应该发生，如果您确实收到了，丢弃该报文，返回。
那么就有：
> ​ 如果扫描系统遵循该RFC，当端口关闭时，任何不包含SYN，RST，或者ACK位的报文会导致
> 一个RST返回而当端口开放时，应该没有任何响应。只要不包含SYN，RST，或者ACK, 任何其它三种(FIN，PSH，and URG)的组合都行。
Nmap 对 NULL, FIN, or Xmas 扫描的处理：
Probe Response | Assigned State  
---|---  
No response received (even after retransmissions) | `open | filtered`  
TCP RST packet | `closed`  
ICMP unreachable error (type 3, code 1, 2, 3, 9, 10, or 13) | `filtered`  
### usage
MSF 模块：
    use auxiliary/scanner/portscan/xmas
Nmap 选项参数：
    Null scan (`-sN`)
    Does not set any bits (TCP flag header is 0)
    FIN scan (`-sF`)
    Sets just the TCP FIN bit.
    Xmas scan (`-sX`)
    Sets the FIN, PSH, and URG flags, lighting the packet up like a Christmas tree.
## TCP NULL SCAN
空扫描即`flag`位全 0 ，如果没有回复则为`open`，收到`RST`则为`close`
## TCP ACK SCAN
使用TCP ACK扫描不能够确定端口的关闭或者开放，因为当发送给对方一个含有 ACK
表示的TCP报文的时候，都返回含有RST标志的报文，无论端口是开放或者关闭。所以，不能使用TCP
ACK扫描来确定端口是否开放或者关闭。但是可以利用它来扫描防火墙的配置，用它来发现防火墙规则，确定它们是有状态的还是无状态的，哪些端口是被过滤的。
向服务端发送一个带有 ACK 标识的数据包，如果收到带有 RST 标识的响应，则说明服务端没有过滤，不存在状态防火墙。
### usage
可以使用 msf 的模块
    use auxiliary/scanner/portscan/ack
Nmap 可以用以下命令
    nmap -sA scanme.nmap.org
## TCP WINDOW SCAN
TCP 窗口扫描的流程类似于 ACK 扫描，都是向服务端发送带有 ACK 标识的数据包，不同的在于 TCP 窗口扫描会检查收到的 RST
数据包中的窗口大小，如果 RST 数据包中的窗口大小不为零，则说明目标端口是开放的。
如果 RST 数据包中的窗口大小为零，则说明目标端口处于关闭状态。
Nmap 对 TCP Window 扫描的处理：
Probe Response | Assigned State  
---|---  
TCP RST response with non-zero window field | `open`  
TCP RST response with zero window field | `closed`  
No response received (even after retransmissions) | `filtered`  
ICMP unreachable error (type 3, code 1, 2, 3, 9, 10, or 13) | `filtered`  
### usage
Nmap 扫描参数：
    nmap -sW docsrv.caldera.com
## TCP Idle Scan
1998年，安全研究员Antirez（曾参与编辑nmap中有关hping2工具的相关文章）在Bugtraq邮件列表中发布了一篇关于新的端口扫描技术的文章。Idle
Scan，也就慢慢的为众人所了解，它允许进行完全盲目的端口扫描。事实上，攻击者可以不用向目标发送数据包就完成扫描工作！相反，用猥琐的边信道攻击是能够让扫描映射到一个Zombie
主机上的。除了极其隐蔽的情况，这种扫描方式允许挖掘机器之间基于IP的信任关系。
虽然 Idle Scan 比目前讨论的任何技术都复杂，但您无需成为TCP / IP专家就能理解它。你只需要知道这些就够了：
  * 确定TCP端口是否打开的一种方法是向端口发送SYN（会话建立）数据包。如果端口打开，目标机器将响应SYN / ACK（会话请求确认）数据包，如果端口关闭，则响应RST（重置）。这是前面讨论的SYN扫描的基础。
  * 接收未经请求的SYN / ACK数据包的计算机将使用RST进行响应。未经请求的RST将被忽略。
  * Internet上的每个IP数据包都有一个片段标识号（IP ID）。由于许多操作系统只是为它们发送的每个数据包递增此数字，因此探测IPID可以告诉攻击者自上次探测以来已发送了多少数据包。
结合以上特征，就可以伪造身份去扫描目标网络，所以看起来就像是无辜的 Zombie 主机在扫描。
### Idle Scan Step by Step
从本质上来看，Idle Scan 只需要重复3个步骤就ok了。
  1. 探查Zombie的IP ID并记录下来。
  2. 在Zombie主机上伪造一个包，然后把包发送给目标主机端口。根据端口的状态，目标主机可能会也有可能不会导致Zombie主机IPID值增加。
  3. 再探查Zombie主机的IP ID。比较两次得到IPID值
经过这样一个流程，Zombie主机的 IP ID
应该会增加1~2。如果只是增加了1，那么就可以说明Zombie主机还没有发出任何包，当然，响应攻击者的探查请求除外。没有发送包也就意味着目标端口没有被打开（也可能是目标主机向Zombie主机发送了一个RST包，导致请求被忽略，或者是根本就是什么都没有做）。增加的如果是2，那就表明Zombie主机成功在两个探测器之间发送了包。这种情况一般情况都意味着目标端口是开着的（目标大概会向Zombie主机发送一个SYN/ACK包去响应攻击者伪造的SYN，从Zombie主机诱导RST包）。如果是增加了一个比2还大的数字，那么就说明Zombie主机太糟糕了！它可能不能胜任预测IPID数值，也可能是正在忙于其他与Idle