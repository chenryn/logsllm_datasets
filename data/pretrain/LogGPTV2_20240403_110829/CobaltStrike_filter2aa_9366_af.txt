L   |  Washington   | Locality
O   |  Strategic Cyber LLC  | Organization Name
OU   | Certificate Department  |  Organizational Unit Name
ST  |  DC  |  State or Province
validity   |   365  | Number of days certificate is valid for
**Valid SSL Certificates with SSL Beacon**
可以选择将有效 SSL 证书与 Beacon 一起使用。使用 Malleable C2 配置文件指定 Java 密钥库文件和密码。此密钥库必须包含证书的私钥，根证书，任何中间证书以及 SSL 证书供应商提供的域证书。
Cobalt Strike 在与 Malleable C2 配置文件相同的文件夹中找到 Java Keystore 文件。
```
https-certificate {
      set keystore "domain.store";
      set password "mypassword";
}
```
Option | Example | Description
-|-|-|
Option | Example | Description
keystore  |  domain.store   | Java Keystore file with certificate information
password  |  mypassword | The password to your Java Keystore
创建用于 Cobalt Strike 的 Beacon 的有效 SSL 证书的步骤
1. 使用 keytool 程序创建 Java 密钥存储文件。这个程序会询问 “你的姓名是什么？” 确保使用完全权威的域名来响应 Beacon 服务器。另外，请确保记下密钥库密码, 你以后会需要它。
    `$ keytool -genkey -keyalg RSA -keysize 2048 -keystore domain.store`
2. 使用 keytool 生成证书签名请求（CSR）, 您将向您的 SSL 证书供应商提交此文件, 他们将验证您的身份并颁发证书, 有些供应商比其他供应商更容易和便宜。
    `$ keytool -certreq -keyalg RSA -file domain.csr -keystore domain.store`
3. 导入 SSL 供应商提供的 Root 和任何中间证书。
    `$ keytool -import -trustcacerts -alias FILE -file FILE.crt -keystore domain.store`
4. 最后，您必须安装域证书。
    `$ keytool -import -trustcacerts -alias mykey -file domain.crt -keystore domain.store`
就是这样就生成 Cobalt Strike 的 Beacon 一起使用的 Java Keystore 文件。
**Code Signing Certificate**
提供签署可执行文件或 DLL 文件的选项, 需要 代码签名证书和私钥指定 Java Keystore 文件
```
code-signer {
            set keystore "keystore.jks";
            set password "password";
            set alias    "server";
}
```
Option | Example | Description
-|-|-|
alias  | server | The keystore's alias for this certificate
digest_algorithm  |  SHA256  |The digest algorithm
keystore   | keystore.jks   | Java Keystore file with certificate information
password  |  mypassword | The password to your Java Keystore
timestamp |  false  | Timestamp the file using a third-party service
timestamp_url |  http://timestamp.digicert.com  | URL of the timestamp service
**PE and Memory Indicators**
Malleable C2 stage http-stager 控制 Beacon 如何加载到内存中并编辑 Beacon DLL 的内容。
```
stage {
            set userwx "false";
            set compile_time "14 Jul 2009 8:14:00";
            set image_size_x86 "512000";
            set image_size_x64 "512000";
            set obfuscate "true";
            transform-x86 {
                        prepend "\x90\x90";
                        strrep "ReflectiveLoader" "DoLegitStuff";
            }
            transform-x64 {
                        # transform the x64 rDLL stage
            }
            stringw "I am not Beacon!";
}
```
当接受后将字符串添加到 beacon dll 的. rdata 部分，string 命令添加一个以 zero-terminated 的字符串。stringw 命令添加了一个宽（utf-16le 编码）字符串,Transform-x86 和 Transform-X64 阻止 PAD 和 Transform Beacon 的反射 DLL 阶段。这些块支持三个命令：prepend、append 和 strrep.
prepend 命令在 beacon 的反射 dll 之前插入一个字符串, append 命令在 beacon-reflective dll 后面添加一个字符串, 确保预先准备好的数据是阶段体系架构（x86、x64）的有效代码, c2lint 程序没有对此进行检查, strrep 命令替换 beacon 反射 dll 中的字符串。
stage 块接受 Beacon DLL 内容的选项:
Option | Example | Description
-|-|-|
checksum   |  0   | The CheckSum value in Beacon's PE header
cleanup  |false  |  Ask Beacon to attempt to free memory associated with the Reflective DLL package that initialized it.
compile_time   |  14 July 2009 8:14:00    | The build time in Beacon's PE header
entry_point | 92145  |  The EntryPoint value in Beacon's PE header
image_size_x64  | 512000 |  SizeOfImage value in x64 Beacon's PE header
image_size_x86  | 512000 |  SizeOfImage value in x86 Beacon's PE header
module_x64  | xpsservices.dll | Same as module_x86; affects x64 loader
module_x86  | xpsservices.dll | Ask the x86 ReflectiveLoader to load the specified library and overwrite its space instead of allocating memory with VirtualAlloc.
name   |  beacon.x64.dll   |The Exported name of the Beacon DLL
obfuscate   | false  |  Obfuscate the Reflective DLL's import table, overwrite unused header content, and ask ReflectiveLoader to copy Beacon to new memory without its DLL headers.
rich_header   | null  | Meta-information inserted by the compiler
sleep_mask   |false  |  Obfuscate Beacon, in-memory, prior to sleeping
stomppe  |true   |  Ask ReflectiveLoader to stomp MZ, PE, and e_lfanew values after it loads Beacon payload
userwx  | false   | Ask ReflectiveLoader to use or avoid RWX permissions for Beacon DLL in memory
**Cloning PE Headers**
Cobalt Strike 的 Linux 软件包, 包括一个工具 peclone，用于从 dll 中提取头文件并将其显示为一个随时可用的阶段块：
`./peclone [/path/to/sample.dll]`
**In-memory Evasion and Obfuscation**
使用 stage 块的 prepend 命令来破坏分析，该分析扫描内存段的前几个字节以查找注入的 dll 的迹象。如果使用特定于工具的字符串检测代理，请使用 strrep 命令更改它们。
如果 strrep 不够，请将 sleep_mask 设置为 true。这将引导信标在进入睡眠状态之前在记忆中模糊自己。在休眠之后，信标会将自己的模糊处理为请求和处理任务。SMB 和 TCP 信标在等待新连接或等待来自其父会话的数据时会使它们自己变得模糊。
决定您希望在内存中看起来有多像一个 DLL。如果您希望方便检测，请将 stomppe 设置为 false。如果您想在内存中稍微混淆信标 dll，请将 stomppe 设置为 true。如果你想挑战，将 “模糊” 设置为“真”。此选项将采取许多步骤来模糊信标阶段和内存中 DLL 的最终状态。
将 userwx 设置为 false 以询问 beacon 的加载器以避免 rwx 权限。具有这些权限的内存段将吸引分析师和安全产品的额外关注。
默认情况下，Beacon 的加载程序使用 virtualloc 分配内存。模块踩踏是一种替代方法。将 module_x86 设置为一个大约是 beacon 有效载荷本身两倍大的 dll。Beacon 的 x86 加载程序将加载指定的 dll，在内存中查找其位置并覆盖它。这是一种在内存中定位信标的方法，Windows 将其与磁盘上的文件关联。您要驻留的应用程序不需要您选择的 DLL，这一点很重要。模块_x64 选项的情况相同，但它会影响 x64 信标。
如果您担心在内存中初始化 beacon dll 的 beacon 阶段，请将 cleanup 设置为 true。此选项将在不再需要信标阶段时释放与之关联的内存。
**Process Injection**
Malleable C2 配置文件中的进程注入块可以注入内容并控制进程注入行为
```
process-inject {
            set min_alloc "16384";
            set startrwx "true";
            set userwx "false";
            transform-x86 {
                        prepend "\x90\x90";
            }
            transform-x64 {
                        # transform x64 injected content
            }
            disable "CreateRemoteThread";
}
```
transform-x86 和 transform-x64 阻止 Beacon 注入的 PAD 内容。这些块支持两个命令：prepend 和 append
prepend 命令在插入的内容之前插入一个字符串。append 命令在注入的内容之后添加一个字符串。确保预先准备好的数据是注入内容体系结构（x86、x64）的有效代码。c2lint 程序没有对此进行检查。
disable 语句是避免在 beacon 的进程注入例程中使用某些 API 的提示。您可以禁用：sethreadcontext、createRemoteThread 和 rtlcreateUserThread。请注意，当您禁用这些调用时，可能会在 Beacon 的进程注入例程中引入可避免的失败。c2lint 命令会发出一些警告。
process-inject 块接受几个控制 Beacon 中的过程注入的选项
Option | Example | Description
-|-|-|
min_alloc  |   4096    |  Minimum amount of memory to request for injected content
startrwx   |   true  |    Use RWX as initial permissions for injected content. Alternative is RW.
userwx  |  false |  Use RWX as final permissions for injected content. Alternative is RX.
**compile_time参数**
- [CS4.5修复C2Profile中本地时间不一致问题【增加convertDate】](https://mp.weixin.qq.com/s/Ta2TBrJSWpaZ4J4b4fL8vA)
---
## 蓝队反制
### 服务端特征分析
**相关文章**
- [CobaltStrike WebServer特征分析](https://mp.weixin.qq.com/s/hNFVTRINKbBiOQiOf0WTMA)
### beacon检测
**相关文章**
- [Yara入门——如何通过Yara规则匹配CobaltStrike恶意样本](https://www.anquanke.com/post/id/211501)
- [Decoding Cobalt Strike: Understanding Payloads](https://decoded.avast.io/threatintel/decoding-cobalt-strike-understanding-payloads/)
- [再探BeaconEye](https://mp.weixin.qq.com/s/D7mZTmL8DlqZ8YYYoygudw)
**相关工具**
- [huoji120/CobaltStrikeDetected](https://github.com/huoji120/CobaltStrikeDetected) - 40 行代码检测到大部分 CobaltStrike 的 shellcode
- [CCob/BeaconEye](https://github.com/CCob/BeaconEye) - Hunts out CobaltStrike beacons and logs operator command output
**检测规则**
- https://github.com/avast/ioc/tree/master/CobaltStrike
- https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_CobaltStrike.yar
**Hook Heap**
- [Hook Heaps and Live Free](https://www.arashparsa.com/hook-heaps-and-live-free/)
**Sleep Mask Kit**
- [Sleeping with a Mask On (Cobalt Strike)](https://adamsvoboda.net/sleeping-with-a-mask-on-cobaltstrike/)
- [Detecting Cobalt Strike with memory signatures](https://www.elastic.co/blog/detecting-cobalt-strike-with-memory-signatures)
### beacon分析
由于 beacon 中存在 C2 的信息,部分工具可以直接解析 beacon 中的 C2 信息,甚至模拟上线干扰服务器
**相关工具**
- [Sentinel-One/CobaltStrikeParser](https://github.com/Sentinel-One/CobaltStrikeParser) - Python parser for CobaltStrike Beacon's configuration
    ```
    python parse_beacon_config.py beacon.exe
    ```
- https://blog.didierstevens.com/2021/12/21/update-1768-py-version-0-0-11/ - Beacon 进程 Dump 分析工具
### 上线包干扰
**相关工具**
- [hariomenkel/CobaltSpam](https://github.com/hariomenkel/CobaltSpam) - can be used to spam a CobaltStrike server with fake beacons
- [jas502n/CS_mock](https://github.com/jas502n/CS_mock) - 模拟cobalt strike beacon上线包.
- [LiAoRJ/CS_fakesubmit](https://github.com/LiAoRJ/CS_fakesubmit) - 一个可以伪装上线Cobaltstrike的脚本
### 爆破 cobaltstrike teamserver 密码
- [ryanohoro/csbruter](https://github.com/ryanohoro/csbruter)
    ```bash
    git clone https://github.com/ryanohoro/csbruter
    cd csbruter
    cat wordlist.txt | python3 csbruter.py xxx.xxx.xxx.xxx
    ```
### mysql蜜罐读取配置文件
> 参考: https://mp.weixin.qq.com/s/i8eBT8O2IwCotf7wqnveEw
1. mysql 中的 load data local infile 函数能够读取本地文件到 mysql 数据库中。当攻击者用爆破 mysql 密码的扫描器扫描到我们的 mysql 并连接上的时候，客户端（攻击者）会自动发起一个查询，我们（服务端）会给与一个回应，我们在回应的数据包中加入 load data local infile 读取攻击者的本地文件到我们数据库中，达到反制的目的。
2. 只要是使用 cs 客户端连接过 cs 服务端的电脑，cs 客户端都会在固定的文件夹下生成一个 `.aggressor.prop` 配置文件。如果是 Windows 系统，那么文件位置是：`C:\Users\Administrator\.aggressor.prop`，这个配置文件里面就包含了 cs 远控的 ip 地址、端口、用户名及密码，而且都是明文的.
3. 搭建一个mysql蜜罐，一旦攻击者连接这个蜜罐，那么这个蜜罐利用msyql本地文件读取漏洞去自动读取 `C:\Users\Administrator\.aggressor.prop` 这个文件内容，蜜罐就可以成功得到攻击者的cs服务端ip地址、端口、用户名密码。
mac 的配置文件位置在 `~/.aggressor.prop`
### CVE-2022-39197
- https://www.cobaltstrike.com/blog/out-of-band-update-cobalt-strike-4-7-1/
- https://github.com/TomAPU/poc_and_exp/tree/master/CVE-2022-39197
- [CS4.5粗略预防CVE-2022-39197 XSS RCE](https://mp.weixin.qq.com/s/vF7DPPCpr299ENudiFgDjQ)
- [最新CS RCE曲折的复现路](https://mp.weixin.qq.com/s/l5e2p_WtYSCYYhYE0lzRdQ)
- [CS RCE（CVE-2022-39197）复现心得分享](https://mp.weixin.qq.com/s/89wXyPaSn3TYn4pmVdr-Mw)
- [its-arun/CVE-2022-39197](https://github.com/its-arun/CVE-2022-39197)
- [burpheart/CVE-2022-39197-patch](https://github.com/burpheart/CVE-2022-39197-patch) - CVE-2022-39197 漏洞补丁
    ```
    在cobaltstrike启动参数中加入javaagent 启用补丁
    -javaagent:patch.jar
    ```