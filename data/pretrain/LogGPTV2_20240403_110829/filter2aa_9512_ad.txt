}
```
上述代码执行完成后，foo的值是固定的。它等效于 `srand(1); rand();`。
```c++
// Good
int main() {
  srand(time(0));
  int foo = rand();
  return 0;
}
```
关联漏洞:
`高风险-逻辑漏洞`
#### 4.4  【必须】在需要高强度安全加密时不应使用弱PRNG函数
在需要生成 AES/SM1/HMAC 等算法的密钥/IV/Nonce， RSA/ECDSA/ECDH 等算法的私钥，这类需要高安全性的业务场景，必须使用密码学安全的随机数生成器 (Cryptographically Secure PseudoRandom Number Generator (CSPRNG) ), 不得使用 `rand()` 等无密码学安全性保证的普通随机数生成器。
推荐使用的 CSPRNG 有：
1. OpenSSL 中的 `RAND_bytes()` 函数, https://www.openssl.org/docs/man1.1.1/man3/RAND_bytes.html
1. libsodium 中的 `randombytes_buf()` 函数
1. Linux kernel 的 `getrandom()` 系统调用, https://man7.org/linux/man-pages/man2/getrandom.2.html .
    或者读 /dev/urandom 文件, 或者 /dev/random 文件。
1. Apple IOS 的 `SecRandomCopyBytes()`, https://developer.apple.com/documentation/security/1399291-secrandomcopybytes
1. Windows 下的 `BCryptGenRandom()`, `CryptGenRandom()`, `RtlGenRandom()`
```c++
#include 
#include 
#include 
#include 
    {
        unsigned char key[16];
        if (1 != RAND_bytes(&key[0], sizeof(key))) {  //... 错误处理
            return -1;
        }
        AES_KEY aes_key;
        if (0 != AES_set_encrypt_key(&key[0], sizeof(key) * 8, &aes_key)) {
            // ... 错误处理
            return -1;
        }
        ...
        OPENSSL_cleanse(&key[0], sizeof(key));
    }
```
`rand()`类函数的随机性并不高。敏感操作时，如设计加密算法时，不得使用rand()或者类似的简单线性同余伪随机数生成器来作为随机数发生器。符合该定义的比特序列的特点是，序列中“1”的数量约等于“0”的数量；同理，“01”、“00”、“10”、“11”的数量大致相同，以此类推。
例如 C 标准库中的 `rand()` 的实现只是简单的[线性同余算法](https://sourceware.org/git/?p=glibc.git;a=blob;f=stdlib/random_r.c;hb=glibc-2.28#l353)，生成的伪随机数具有较强的可预测性。
当需要实现高强度加密，例如涉及通信安全时，不应当使用 `rand()` 作为随机数发生器。
实际应用中，[ C++11 标准提供的`random_device`保证加密的安全性和随机性](https://docs.microsoft.com/en-us/cpp/standard-library/random-device-class?redirectedfrom=MSDN&view=vs-2019#remarks)
但是 [C++ 标准并不保证这一点](https://stackoverflow.com/questions/44867500/is-stdrandom-device-cryptographic-secure)。跨平台的代码可以考虑用 [OpenSSL](https://wiki.openssl.org/index.php/Random_Numbers) 等保证密码学安全的库里的随机数发生器。
关联漏洞:
`高风险-敏感数据泄露`
#### 4.5  【必须】自己实现的rand范围不应过小
如果在弱安全场景相关的算法中自己实现了PRNG，请确保rand出来的随机数不会很小或可预测。
```c++
// Bad
int32_t val = ((state[0] * 1103515245U) + 12345U) & 999999;
```
上述例子可能想生成0~999999共100万种可能的随机数，但是999999的二进制是11110100001000111111，与&运算后，0位一直是0，所以生成出的范围明显会小于100万种。
```c++
// Good
int32_t val = ((state[0] * 1103515245U) + 12345U) % 1000000;
// Good
int32_t val = ((state[0] * 1103515245U) + 12345U) & 0x7fffffff;
```
关联漏洞:
`高风险-逻辑漏洞`
### 5    文件操作
#### 5.1  【必须】避免路径穿越问题
在进行文件操作时，需要判断外部传入的文件名是否合法，如果文件名中包含 `../` 等特殊字符，则会造成路径穿越，导致任意文件的读写。
错误：
```c++
void Foo() {
  char file_path[PATH_MAX] = "/home/user/code/";
  // 如果传入的文件名包含../可导致路径穿越
  // 例如"../file.txt"，则可以读取到上层目录的file.txt文件
  char name[20] = "../file.txt";
  memcpy(file_path + strlen(file_path), name, sizeof(name));
  int fd = open(file_path, O_RDONLY);
  if (fd != -1) {
    char data[100] = {0};
    int num = 0;
    memset(data, 0, sizeof(data));
    num = read(fd, data, sizeof(data));
    if (num > 0) {
      write(STDOUT_FILENO, data, num);
    }
    close(fd);
  }
}
```
正确：
```c++
void Foo() {
  char file_path[PATH_MAX] = "/home/user/code/";
  char name[20] = "../file.txt";
  // 判断传入的文件名是否非法，例如"../file.txt"中包含非法字符../，直接返回
  if (strstr(name, "..") != NULL){
    // 包含非法字符
    return;
  }
  memcpy(file_path + strlen(file_path), name, sizeof(name));
  int fd = open(file_path, O_RDONLY);
  if (fd != -1) {
    char data[100] = {0};
    int num = 0;
    memset(data, 0, sizeof(data));
    num = read(fd, data, sizeof(data));
    if (num > 0) {
      write(STDOUT_FILENO, data, num);
    }
    close(fd);
   }
}
```
关联漏洞:
`高风险-逻辑漏洞`  
#### 5.2  【必须】避免相对路径导致的安全问题（DLL、EXE劫持等问题）
在程序中，使用相对路径可能导致一些安全风险，例如DLL、EXE劫持等问题。
例如以下代码，可能存在劫持问题：
```c++
int Foo() {
  // 传入的是dll文件名，如果当前目录下被写入了恶意的同名dll，则可能导致dll劫持
  HINSTANCE hinst = ::LoadLibrary("dll_nolib.dll");
  if (hinst != NULL) {
    cout
#### 5.3  【必须】文件权限控制
在创建文件时，需要根据文件的敏感级别设置不同的访问权限，以防止敏感数据被其他恶意程序读取或写入。
错误：
```c++
int Foo() {
  // 不要设置为777权限，以防止被其他恶意程序操作
  if (creat("file.txt", 0777) 
### 6 内存操作
#### 6.1 【必须】防止各种越界写（向前/向后）
错误1：
```c++
int a[5];
a[5] = 0;
```
错误2：
```c++
int a[5];
int b = user_controlled_value;
a[b] = 3;
```
关联漏洞:
`高风险-内存破坏`
#### 6.2 【必须】防止任意地址写
任意地址写会导致严重的安全隐患，可能导致代码执行。因此，在编码时必须校验写入的地址。
错误：
```c++
void Write(MyStruct dst_struct) {
  char payload[10] = { 0 };
  memcpy(dst_struct.buf, payload, sizeof(payload));
}
int main() {
  MyStruct dst_stuct;
  dst_stuct.buf = (char*)user_controlled_value;
  Write(dst_stuct);
  return 0;
}
```
关联漏洞:
`高风险-内存破坏`
### 7 数字操作
#### 7.1 【必须】防止整数溢出
在计算时需要考虑整数溢出的可能，尤其在进行内存操作时，需要对分配、拷贝等大小进行合法校验，防止整数溢出导致的漏洞。
错误（该例子在计算时产生整数溢出）
```c++
const int kMicLen = 4;
// 整数溢出
void Foo() {
  int len = 1;
  char payload[10] = { 0 };
  char dst[10] = { 0 };
  // Bad, 由于len小于4，导致计算拷贝长度时，整数溢出
  // len - kMicLen == 0xfffffffd
  memcpy(dst, payload, len - kMicLen);
}
```
正确例子
```c++
void Foo() {
  int len = 1;
  char payload[10] = { 0 };
  char dst[10] = { 0 };
  int size = len - kMicLen;
  // 拷贝前对长度进行判断
  if (size > 0 && size 
#### 7.2 【必须】防止Off-By-One
在进行计算或者操作时，如果使用的最大值或最小值不正确，使得该值比正确值多1或少1，可能导致安全风险。
错误：
```c++
char firstname[20];
char lastname[20];
char fullname[40];
fullname[0] = '\0';
strncat(fullname, firstname, 20);
// 第二次调用strncat()可能会追加另外20个字符。如果这20个字符没有终止空字符，则存在安全问题
strncat(fullname, lastname, 20);
```
正确：
```c++
char firstname[20];
char lastname[20];
char fullname[40];
fullname[0] = '\0';
// 当使用像strncat()函数时，必须在缓冲区的末尾为终止空字符留下一个空字节，避免off-by-one
strncat(fullname, firstname, sizeof(fullname) - strlen(fullname) - 1);
strncat(fullname, lastname, sizeof(fullname) - strlen(fullname) - 1);
```
对于 C++ 代码，再次强烈建议使用 `string`、`vector` 等组件代替原始指针和数组操作。
关联漏洞:
`高风险-内存破坏`
#### 7.3 【必须】避免大小端错误
在一些涉及大小端数据处理的场景，需要进行大小端判断，例如从大端设备取出的值，要以大端进行处理，避免端序错误使用。
关联漏洞:
`中风险-逻辑漏洞`
#### 7.4 【必须】检查除以零异常
在进行除法运算时，需要判断被除数是否为零，以防导致程序不符合预期或者崩溃。
错误：
```c++
int divide(int x, int y) {
  return x / y;
}
```
正确：
```c++
int divide(int x, int y) {
  if (y == 0) {
    throw DivideByZero;
  }
  return x / y;
}
```
关联漏洞:
`低风险-拒绝服务`
#### 7.5 【必须】防止数字类型的错误强转
在有符号和无符号数字参与的运算中，需要注意类型强转可能导致的逻辑错误，建议指定参与计算时数字的类型或者统一类型参与计算。