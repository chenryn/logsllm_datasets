return
}
err = t.Execute(os.Stdout, []string{"a", "b", "c", "d", "e", "f"})
if err != nil {
fmt.Printf("exec error: %v\n", err)
}
}
type generator struct {
ss []string
i int
f func(s []string, i int) string
}
func (seq *generator) Next() string {
s := seq.f(seq.ss, seq.i)
seq.i++
return s
}
func sequenceGen(ss []string, i int) string {
if i >= len(ss) {
return ss[len(ss)-1]
}
return ss[i]
}
func cycleGen(ss []string, i int) string {
return ss[i%len(ss)]
}
func sequenceFunc(ss ...string) (*generator, error) {
if len(ss) == 0 {
return nil, errors.New("sequence must have at least one element")
}
return &generator{ss, 0, sequenceGen}, nil
}
func cycleFunc(ss ...string) (*generator, error) {
if len(ss) == 0 {
return nil, errors.New("cycle must have at least one element")
}
return &generator{ss, 0, cycleGen}, nil
}
9.8 Conclusion 结论
The Go template package is useful for certain kinds of text transformations involving
inserting values of objects. It does not have the power of, say, regular expressions,
but is faster and in many cases will be easier to use than regular expressions
template 包在对于某些类型的文本转换涉及插入对象值的情况是非常有用的。虽然它没有正则表达
式功能强大，但它执行比正则表达式速度更快，在许多情况下比正则表达式更容易使用。
Copyright © Jan Newmarch, PI:EMAIL
If you like this book, please contribute using Flattr
or donate using PayPal
Chapter 10 第十章
A Complete Web Server 一个完整的 Web 服务器
This chapter is principally a lengthy illustration of the HTTP chapter, building
a complete Web server in Go. It also shows how to use templates in order to use
expressions in text files to insert variable values and to generate repeated
sections.
这章主要是针对Http 的一个例子，用Go 建立一个完整的Web 服务器。它也演示了如何在模板中使
用表达式在文本文件中插入变量和生成重复的部分。
10.1 Introduction 说明
I am learning Chinese. Rather, after many years of trying I am still attempting to
learn Chinese. Of course, rather than buckling down and getting on with it, I have
tried all sorts of technical aids. I tried DVDs, videos, flashcards and so on.
Eventually I realised that there wasn't a good computer program for Chinese
flashcards, and so in the interests of learning, I needed to build one.
我正在学习中文，恰恰相反，我已经坚持学习了很多年。当然，为了拿下它，我尝试使用很多技术来
帮助我学习中文。其中我尝试过DVD 教程，视频教程，快速学习记忆卡等等。但是最后我意识到这
里没有一个很好的中文学习记忆卡程序，所以出于学习的兴趣，我需要创建了一个。
I had found a program in Python to do some of the task. But sad to say it wasn't
well written and after a few attempts at turning it upside down and inside out I
came to the conclusion that it was better to start from scratch. Of course, a Web
solution would be far better than a standalone one, because then all the other people
in my Chinese class could share it, as well as any other learners out there. And
of course, the server would be written in Go.
我发现了一使用Python 写的程序可以完成一些这样的任务。但是遗憾的说，它写的不是很好，而且
我经过几次尝试捣鼓它，得出一个结论是最好重头开始写一个。当然这个Web 解决方案不是我一个
人使用，它还会分享给其他学习中文的同学和更多学习中文的者。当然，这个服务我将使用Go 语言
来写。
The flashcards server is running at cict.bhtafe.edu.au:8000. The front page consists
of a list of flashcard sets currently available, how you want a set displayed (random
card order, Chinese, English or random), whether to display a set, add to it, etc.
I've spent too much time building it - somehow my Chinese hasn't progressed much
while I was doing it... It probably won't be too exciting as a program if you don't
want to learn Chinese, but let's get into the structure.
flashcards 服务器运行在cict.bhtafe.edu.au：8000。在当前页是目前的flashcard 组列表，
你想怎么显示（随机card 的顺序，中文，英文或随机），是否显示一组，还要加上一套，我花了很
多时间来构建它 - 不知何故我的中文还没有进展较快，而我该怎么做...它可能不会是太令人兴奋
了一个程序，如果你不想学习中文，就让我们来看看程序的结构吧
10.2 Static pages 静态文件
Some pages will just have static content. These can be managed by a fileServer. For
simplicity I put all of the static HTML pages and CSS files in the html directory
and all of the JavaScript files in thejscript directory. These are then delivered
by the Go code
有些页面只是一些静态内容。这些可以由FILESERVER管理。为了简单起见，我把所有的静态HTML
页面和CSS 文件放入html目录中，所有的JavaScript 文件放日JScript目录。 然后这些交付给
Go 代码。
fileServer := http.FileServer("jscript", "/jscript/")
http.Handle("/jscript/", fileServer)
fileServer = http.FileServer("html", "/html/")
http.Handle("/html/", fileServer)
10.3 Templates 模板
The list of flashcard sets is open ended, depending on the number of files in a
directory. These should not be hardcoded into an HTML page, but the content should
be generated as needed. This is an obvious candidate for templates.
flashcard 组列表是开放式的, 根据在一个目录中的文件的数量。这些不应该被硬编码到一个 HTML
页面，但内容应根据需要生成。这就是一个明显的候选模板。
The list of files in a directory is generated as a list of strings. These can then
be displayed in a table using the template
目录中的文件列表可以被认为是一个字符串列表。 然后模板可将它们显示在一个表格中。
{{range .}}
{{.}}
10.4 The Chinese Dictionary 中文词典
Chinese is a complex language (aren't they all :-( ). The written form is hieroglyphic,
that is "pictograms" instead of using an alphabet. But this written form has evolved
over time, and even recently split into two forms: "traditional" Chinese as used
in Taiwan and Hong Kong, and "simplified" Chinese as used in mainland China. While
most of the characters are the same, about 1,000 are different. Thus a Chinese
dictionary will often have two written forms of the same character.
中国是一个复杂的语言（不是所有人:-(）。书面形式的象形文字，那是“象形”，而不是使用一个字
母，但这个书面形式随着时间的演变，以及最近甚至分裂成两种形式：“繁体”中文使用在中国的台湾
和香港，和“简体”中文使用在中国大陆。虽然大多数的文字是相同的，但还是有大约1000 中文字是
不同的，因此，中文的字典往往有两种书面形式文字。
Most Westerners like me can't understand these characters. So there is a "Latinised"
form called Pinyin which writes the characters in a phonetic alphabet based on the
Latin alphabet. It isn't quite the Latin alphabet, because Chinese is a tonal language,
and the Pinyin form has to show the tones (much like acccents in French and other
European languages). So a typical dictionary has to show four things: the traditional
form, the simplified form, the Pinyin and the English. For example,
和大多数西方人一样，我无法理解这些字符。所以，有一个“Latinised 的形式称为”拼音的字符写
入以拉丁字母为基础的拼音第一个字母。这不是拉丁字母，因为这是中文的一种语言音调，和拼音形
式显示的音调（很像在法国和其他欧洲语言的acccents）。因此，一个典型的字典有四件事情：繁
体形式和简化形式，拼音和英文显示。例如，
Traditional Simplified Pinyin English
好 好 hǎo good
But again there is a little complication. There is a free Chinese/English
dictionary and even better, you can download it as a UTF-8 file, which Go is well
suited to handle. In this, the Chinese characters are written in Unicode but the
Pinyin characters are not: although there are Unicode characters for letters such
as 'ǎ', many dictionaries including this one use the Latin 'a' and place the tone
at the end of the word. Here it is the third tone, so "hǎo" is written as "hao3".
This makes it easier for those who only have US keyboards and no Unicode editor to
still communicate in Pinyin.
但是还是有点复杂。这里有一个更好的并且免费的中英文词典, 你可以下载它是一个UTF-8 的文件，
非常适合Go 去处理。在这，中文的字符集被写入在 Unicode 中但是拼音没有：尽管有Unicode 字
符的字母，如“ǎ”，很多词典包括本使用拉丁字母'a'和将音调放在词的结尾。在这里它是第三个音
调，所以“hǎo”被写入“HAO3”。这使得它更容易为那些只有美国键盘和没有Unicode 的编辑器的人
们来与拼音沟通。
This data format mismatch is not a big deal: just that somewhere along the line,
between the original text dictionary and the display in the browser, a data massage
has to be performed. Go templates allow this to be done by defining a custom template,
so I chose that route. Alternatives could have been to do this as the dictionary
is read in, or in the Javascript to display the final characters.
这种数据格式不匹配并不是一个大的问题：只是在这行的某处地方，在原来的文本字典和显示在浏览
器之间， 用数据来完成。Go 模板允许通过自定义一个模板， 所以我选择了这个思路。可以选择从
dictionary 中读取，或者由JavaScript 来显示最终的字符。
The code for the Pinyin formatter is given below. Please don't bother reading it
unless you are really interested in knowing the rules for Pinyin formatting.
拼音格式化的代码在下面给出。请不要仔细的阅读它，除非你真的有兴趣想知道拼音格式化的规则。
package pinyin
import (
"io"
"strings"
)
func PinyinFormatter(w io.Writer, format string, value ...interface{}) {
line := value[0].(string)
words := strings.Fields(line)
for n, word := range words {
// convert "u:" to "ü" if present
uColon := strings.Index(word, "u:")
if uColon != -1 {
parts := strings.SplitN(word, "u:", 2)
word = parts[0] + "ü" + parts[1]
}
println(word)
// get last character, will be the tone if present
chars := []rune(word)
tone := chars[len(chars)-1]
if tone == '5' {
words[n] = string(chars[0 : len(chars)-1])
println("lost accent on", words[n])
continue
}
if tone  '4' {
continue
}
words[n] = addAccent(word, int(tone))
}
line = strings.Join(words, ` `)
w.Write([]byte(line))
}
var (
// maps 'a1' to '\u0101' etc
aAccent = map[int]rune{
'1': '\u0101',
'2': '\u00e1',
'3': '\u01ce', // '\u0103',
'4': '\u00e0'}
eAccent = map[int]rune{
'1': '\u0113',
'2': '\u00e9',
'3': '\u011b', // '\u0115',
'4': '\u00e8'}
iAccent = map[int]rune{
'1': '\u012b',
'2': '\u00ed',
'3': '\u01d0', // '\u012d',
'4': '\u00ec'}
oAccent = map[int]rune{
'1': '\u014d',
'2': '\u00f3',
'3': '\u01d2', // '\u014f',
'4': '\u00f2'}
uAccent = map[int]rune{
'1': '\u016b',
'2': '\u00fa',
'3': '\u01d4', // '\u016d',
'4': '\u00f9'}
üAccent = map[int]rune{
'1': 'ǖ',
'2': 'ǘ',
'3': 'ǚ',
'4': 'ǜ'}
)
func addAccent(word string, tone int) string {
/*
* Based on "Where do the tone marks go?"
* at http://www.pinyin.info/rules/where.html
*/
n := strings.Index(word, "a")
if n != -1 {
aAcc := aAccent[tone]
// replace 'a' with its tone version
word = word[0:n] + string(aAcc) + word[(n+1):len(word)-1]
} else {
n := strings.Index(word, "e")
if n != -1 {
eAcc := eAccent[tone]
word = word[0:n] + string(eAcc) +
word[(n+1):len(word)-1]
} else {
n = strings.Index(word, "ou")
if n != -1 {
oAcc := oAccent[tone]
word = word[0:n] + string(oAcc) + "u" +
word[(n+2):len(word)-1]
} else {
chars := []rune(word)
length := len(chars)
// put tone onthe last vowel
L:
for n, _ := range chars {
m := length - n - 1
switch chars[m] {
case 'i':
chars[m] = iAccent[tone]
break L
case 'o':
chars[m] = oAccent[tone]
break L
case 'u':
chars[m] = uAccent[tone]
break L
case 'ü':
chars[m] = üAccent[tone]
break L
default:
}
}
word = string(chars[0 : len(chars)-1])
}
}
}
return word
}
How this is used is illustrated by the function lookupWord. This is called in response
to an HTML Form request to find the English words in a dictionary.
lookupWord函数说明了怎样去使用它。这就是在字典中查找英文单词的Html 表单请求的响应。
func lookupWord(rw http.ResponseWriter, req *http.Request) {
word := req.FormValue("word")
words := d.LookupEnglish(word)
pinyinMap := template.FormatterMap {"pinyin": pinyin.PinyinFormatter}
t, err := template.ParseFile("html/DictionaryEntry.html", pinyinMap)
if err != nil {
http.Error(rw, err.String(), http.StatusInternalServerError)
return
}
t.Execute(rw, words)
}
The HTML code is
HTML 代码
Word
Traditional
Simplified
Pinyin
English
{{with .Entries}}
{{range .}}
{.repeated section Entries}
{{.Word}}
{{.Traditional}}
{{.Simplified}}
{{.Pinyin|pinyin}}
{.repeated section Translations}
{@|html}
{.end}
{.end}
{{end}}
{{end}}
The Dictionary type
字典类型
The text file containing the dictionary has lines of the form
traditional simplified [pinyin] /translation/translation/.../