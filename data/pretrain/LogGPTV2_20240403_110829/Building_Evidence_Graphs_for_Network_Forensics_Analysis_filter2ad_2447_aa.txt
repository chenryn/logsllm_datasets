title:Building Evidence Graphs for Network Forensics Analysis
author:Wei Wang and
Thomas E. Daniels
Building Evidence Graphs for Network Forensics Analysis
Wei Wang, Thomas E. Daniels
Department of Electrical and Computer Engineering
Iowa State University
Ames, Iowa 50010
{weiwang, daniels}@iastate.edu
Abstract
In this paper, we present techniques for a network foren-
sics analysis mechanism that includes effective evidence
presentation, manipulation and automated reasoning. We
propose the evidence graph as a novel graph model to fa-
cilitate the presentation and manipulation of intrusion evi-
dence. For automated evidence analysis, we develop a hi-
erarchical reasoning framework that includes local reason-
ing and global reasoning. Local reasoning aims to infer the
roles of suspicious hosts from local observations. Global
reasoning aims to identify group of strongly correlated hosts
in the attack and derive their relationships. By using the
evidence graph model, we effectively integrate analyst feed-
back into the automated reasoning process. Experimental
results demonstrate the potential and effectiveness of our
proposed approaches.
1 Introduction
With the increasing scale and impact of cyber attacks,
various network security techniques have been developed
to ﬁght against invisible attackers. These techniques ad-
dress different aspects of security needs. For example, ﬁre-
walls are generally used for prevention of attacks while IDS
systems are mainly used for detection of attacks. However,
these defensive mechanisms are not sufﬁcient to eliminate
cyber attack threats. Because we can never block all paths
for cyber crimes, effective investigation techniques would
help us collect, analyze and present evidences of cyber at-
tacks to hold the attackers responsible for their malicious
actions. These investigation methods belong to the realm of
network forensics.
More formally, network forensics is a subﬁeld of digi-
tal forensics where evidence is captured from networks and
interpretation is substantially based on knowledge of cyber
attacks. It aims to locate the attackers and reconstruct their
attack actions through analysis of intrusion evidence. Be-
low we summarize two major technical challenges facing
network forensics analysis:
• Current sources of intrusion evidence such as IDS
alerts are not well adapted for forensics investigation.
Forensics analysts are often buried in large volume of
low-level event logs. There exists much redundancy
and unrelated background noise while parts of useful
information may be missing or incomplete.
• Cyber attacks are increasingly sophisticated. There
exist more multi-stage attacks consisting of several
evolving phases and spanning over large number of
hosts, which increases the difﬁculty of analysis.
In view of these challenges, the investigation needs of
cyber attacks have not been met by available technolo-
gies. Current practices in network forensics analysis are to
manually examine logs, a time-consuming and error prone
process [13]. We argue that network forensics analysis
mechanisms should meet the following requirements:
• Short response times: Large volume of irrelevant in-
formation and increasingly complex attack strategies
make manual analysis impossible in a timely manner.
Automated evidence analysis would produce an imme-
diate impact on law enforcement’s ability to reduce re-
sponse times.
• Friendly interface:
Intrusion evidence and analysis
results should be presented in an intuitive approach.
The ad-hoc nature of cyber attacks indicates that ex-
pert opinion and out-of-band information must be
efﬁciently integrated into the automated reasoning
process.
In this paper we present a prototype network forensics
analysis mechanism that integrates novel techniques for ev-
idence presentation, interaction and automated reasoning.
We propose the evidence graph to model intrusion evidence.
Based on the evidence graph, we develop a hierarchical rea-
soning framework for automated evidence analysis.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:05:17 UTC from IEEE Xplore.  Restrictions apply. 
Major objectives of network forensics analysis can be
summarized into two fundamental problems: attack group
identiﬁcation and attack scenario reconstruction. Attack
scenario reconstruction is the process of inferring step-wise
actions taken by the attacker to achieve his malicious objec-
tive. Attack group identiﬁcation is the task of discovering
the group of hosts involved in the attack and determining
the roles of each host in the group. Common roles in an
attack group include:
• Attackers are sources of primary attack actions in the
scenario of interest.
• Victims are target hosts that were compromised in the
attack.
• Stepping Stones are compromised hosts that are later
used to attack other hosts and distract the analyst’s at-
tention from the real attacker.
• Background Attackers are hosts that initiate malicious
activities but are irrelevant to the primary attack of in-
terest.
Our evidence analysis mechanism focus on identifying
members of an attack group and their relationships, which
would help to answer questions like:
• How likely is a speciﬁc host relevant to the attack?
• What is the role the host played in the attack?
• How strongly are two hosts M and N connected in the
attack ?
In summary, our work aims to provide the following con-
tributions to network forensics analysis:
1. A ﬂexible pre-processing mechanism that reduces re-
dundancy in intrusion alerts;
2. A novel graph model that facilitates effective presenta-
tion and interaction with intrusion evidence;
3. A hierarchical reasoning framework for automated in-
trusion evidence analysis.
The rest of the paper is organized as follows. The next
section presents the architecture of our forensics analysis
mechanism and describes each component. Section 3 pro-
poses our hierarchical reasoning framework. In section 4,
we discuss related work. In section 5, we provide experi-
mental results in support of our approach. Section 6 con-
cludes this paper and discusses future work.
2 Network Forensics Analysis Mechanism
In this section, we present the components that support
our approach in network forensics analysis. Figure 1 shows
the architecture of our network forensics analysis mecha-
nism.
Figure 1. Architecture of analysis mechanism
• Evidence collection module collects intrusion evidence
from networks and hosts under investigation.
• Evidence preprocessing module parses certain types of
evidence like intrusion alerts into desired format and
reduce the redundancy in low level evidence by aggre-
gation.
• Attack knowledge base provides prior knowledge of
known exploits.
• Assets knowledge base provides prior knowledge of
the networks and hosts under investigation.
• Evidence graph manipulation module generates and
updates the evidence graph by retrieving intrusion evi-
dence in the depository.
• Attack reasoning module performs automated reason-
ing based on evidence graph.
• Analyst interface module provides visualization of ev-
idence graph and reasoning results to the analyst and
passes analyst feedbacks to the graph generation and
reasoning module.
In the initial phase,
the intrusion evidence collected
are pre-processed and stored into the evidence depository.
Next, the graph generation module constructs the evidence
graph with evidence retrieved from the depository. Follow-
ing that, the reasoning module performs automated infer-
ence based on the evidence graph and present results to the
analyst. Through the interface module, the analyst could
provide expert opinions and out-of-band information in two
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:05:17 UTC from IEEE Xplore.  Restrictions apply. 
approaches: (1) directly edit the evidence graph; (2) send
queries to retrieve speciﬁc evidence. The reasoning process
is then performed on the updated evidence graph for im-
proved results.
2.1 Sources of Intrusion Evidence
Evidence for network forensics investigation can be clas-
siﬁed into two categories: primary evidence and secondary
evidence. Primary evidence refers to information that di-
rectly indicates attacks or security policy violations. Sec-
ondary evidence refer to information that does not directly
represent attacks but could provide complementary infor-
mation for investigation. Secondary evidence comes from
extensive sources and in a much higher volume. Generally,
primary evidence is the starting point of forensic investiga-
tion and provides the basis for searches towards secondary
evidence. Querying the secondary evidence usually has two
objectives: to discover hidden suspicious events and to eval-
uate the trustworthyness of primary evidence. In our cur-
rent prototype, we use network IDS alerts as the primary
evidence; raw network ﬂow logs and host logs are used as
secondary evidence.
2.2 Evidence Preprocessing
In our prototype, IDS alerts are used as the source of
primary evidence. We deﬁne a simpliﬁed template derived
from IDMEF [12] to capture essential intrusion alert at-
tributes. The result is denoted as raw alert. Format of
raw alert is {AlertID, Classif ication, SrcIP , DesIP ,
DetectT ime, HyperID}.
The large amount of redundancy in raw alerts makes it
difﬁcult to analyze the underlying attacks in an efﬁcient
manner. For example, a single event often generates many
duplicate alerts in a short period. We use alert aggrega-
tion based on similarity of attributes and context require-
ments to merge raw alerts into hyper alerts. Format of hy-
per alerts is {HyperID, Classif ication, SrcIP , DesIP ,
StartT ime, EndT ime, Count}. The alert aggregation
process aims to remove the duplicates and generate hyper
alerts that are easy to analyze without losing granularity of
important information.
Each hyper alert has a one-to-many relationship with raw
alerts. In the hyper alert template, the Count ﬁeld records
the number of raw alerts that are merged into the hyper alert
for statistical evaluation. The HyperID ﬁeld in the raw
alert template records the unique identiﬁcation number of
the hyper alert it merged into. The index mapping between
raw alerts and hyper alerts enable analysts to backtrack and
examine alerts in ﬁner scale.
We apply a ﬂexible alert aggregation algorithm based
In essence it adapts
on the Leader-Follower model.
the similarity-based alert correlation method proposed by
Valdes and Skinner [21]. The aggregation criteria is to com-
bine alerts that have the same source-destination pair, be-
long to the same attack class and whose time stamp falls in
a self-extending time window. The time window of hyper
alerts is self-extending in that if time stamp of the raw alert
falls outside the [start time, end time] window of hyper alert
but the difference is within a predeﬁned limit T, correspond-
ing bound of the hyper alert time window is updated with
the time stamp of the raw alert. This implies that we are
able to merge continuous duplicate raw alerts that span over
a long period into a single hyper-alert with a proper T.
The Leader-Follower alert aggregation procedure is
shown in algorithm 1.
input : A set of raw alerts r1 . . . rn, time limit T
output: A set of hyper alerts h1 . . . hm
begin
h1 ← r1;
m ← 1;
for i ← 2 to n do
merged ← 0;
for j ← 1 to m do
if ri.sourceaddr = hj.sourceaddr &&
hj.destaddr = ri.destaddr &&
hj.class = ri.class &&
hj.starttime − T (cid:54) ri.detecttime (cid:54)
hj.endtime + T then
hj.starttime ←
min(hj.starttime, ri.detecttime);
hj.endtime ←
max(hj.endtime, ri.detecttime);
ri.hyperid ← hj.id;
hj.count ← hj.count + 1;
merged ← 1;
break;
end
end
if merged = 0 then
m ← m + 1;
hm ← ri;
hm.count ← 1, hm.HyperID ← m;
end
end
end
Algorithm 1: Leader-Follower alert aggregation
In practice, one important variant that affects the results
of aggregation is the evaluation of attack class. It is com-
mon to observe that multiple different attack classes are de-
ﬁned for attacks exploiting the same vulnerability or having
similar result. When we wish to ignore such trivial differ-
ences, we may consider the class of attack on a higher ab-
straction level. For example, a ”SCAN Nmap TCP” alert
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:05:17 UTC from IEEE Xplore.  Restrictions apply. 
and a ”SCAN Nmap XMAS” alert generated by Snort can
be merged into one hyper alert with the same abstracted
class ”SCAN Attack”. We note that alert abstraction re-
quires expert knowledge and deﬁning an appropriate ab-
stract class is largely a manual process.
The Leader-Follower process is ﬂexible to tailor the ag-
gregation criteria for speciﬁc contexts. For example, by
evaluating traces of attacks we discover that a large portion
of raw alerts is triggered by port scan activity, which is usu-
ally of little signiﬁcance. Therefore we use a strategy that
only cares for hosts that are either source or target of large
number of scan-related alerts. The former often represents
an attacker while the latter often indicates a potential vic-
tim of attack. Consequently the ﬂexible aggregation criteria
uses an abstract type that represents all scan-related alerts
and only require match of either sourceaddr or destaddr.
2.3 Evidence Graph Structure
In the following, we deﬁne the evidence graph model as
the foundation of our analysis mechanism. Functionalities
of the evidence graph model include:
1. The evidence graph provides the analyst an intuitive
visualization of observed evidence;
2. The evidence graph provides a convenient interface for
the analyst to interact with the evidence and add expert
feedback.
3. The evidence graph provides the basis for automated
reasoning procedure.
Deﬁnition 1. An evidence graph is a quadruple G= (N,
E, S, R), where N is the set of nodes, E is the set of di-
rected edges, S is the set of labels that indicate the states of
nodes and R is the set of labels that indicate the attributes of
edges. In the evidence graph, each node represents a host of
forensic investigation interest and each edge represents an
observed intrusion evidence.
Each node in the evidence graph is characterized by the
following labels:
1. Host: Identiﬁcation of the suspicious host.
2. States: States of the node is deﬁned by a set of fuzzy
variables F={Attacker, V ictim, Stepping Stone,
Af f iliated}. The fuzzy variable Attacker(AT ) in-
dicates the belief that the current node is a source of at-
tack. The fuzzy variable V ictim(V I) indicates the be-
lief that the current node is a target compromised in the
attack. The fuzzy variable Stepping Stone(SS) indi-
cates the belief that the current node is controlled by
another host and used as a stepping stone in the attack.
The fuzzy variable Af f iliated(AF ) indicates the be-
lief that the current node has suspicious interactions
with an attacker, victim or stepping stone host. Note
that these states are not mutually exclusive. For exam-
ple, a victim host that was compromised in an attack
could be used as a storage relay to transfer stolen ﬁles.
Therefore states of the host will evolve from ”victim”
to both ”victim” and ”afﬁliated”.
3. Time stamps: Each state variable is associated with
two time stamps: Tactivate records the initial time the
state is activated above a certain threshold and Tlatest
records the latest time of update.
Each edge in the evidence graph is represented by the
following labels:
1. General attributes: The set of general attributes of an
edge depends on the speciﬁc type of intrusion evi-
dence. For network IDS alerts, we deﬁne the set of
attributes as source/target IP address, time stamp and
classiﬁcation. Time stamp of the edge is an interval
[start time, end time].
2. Weight: Weight is a fuzzy value w ∈ [0, 1] that repre-
sents the impact of evidence. For example, a port scan
alert that has little seriousness is assigned a weight of
0.1 while a buffer overﬂow attack that could gain root
privilege on the target system is assigned a weight of
0.8. In our prototype, we model the known attacks and
assign the weight of IDS alerts based on expert knowl-
edge.
3. Relevancy: Relevancy value represents the belief that
the attack indicated by the evidence would success-
fully achieve expected impact on the target host.
Speciﬁcally, there could be three cases behind an alert:
relevant true positive, false positive and non-relevant
true positive [14]. Relevant true positive refers to alerts
that truly represent an attack and the attack achieves
its expected impact. False positive refers to alerts that
identify a legitimate event as an alert by mistake. Non-
relevant true positive refers to alerts that truly represent
an attack but the attack does not achieve its expected
impact. We deﬁne relevancy value for these three cases
as follows:
0,
0.5,
1
r =
false/non-relevant true positive;
unable to verify;
relevant true positive.
(1)
The process to check the relevancy of an alert is de-
noted as alert veriﬁcation. Alert veriﬁcation is no triv-
ial problem.
In our prototype, we compare the pre-
requisites of an attack with target host’s conﬁguration.
If prerequisites of the attack are completely satisﬁed,
the relevancy value is assigned as 1. If contradicting
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:05:17 UTC from IEEE Xplore.  Restrictions apply. 
conﬁguration is found, the relevancy value is assigned
as 0; otherwise the relevancy value is assigned as 0.5.
This approach could rule out attacks that are bound to
fail because the target host is not vulnerable. However
it cannot guarantee that attacks tagged as relevant are
truly successful, because the attack could still fail be-
cause of an incorrect parameter. Recently Kruegel and
Robertson [14] proposed an active veriﬁcation mecha-
nism that checks for traces that match the attack’s ex-
pected outcome on the victim host, but effectiveness of
the method needs further study.
4. Host Importance: Host importance h ∈ [0, 1] is an
optional fuzzy parameter to relate importance of evi-
dence with certain hosts. We observe that same events
may represent different suspiciousness when associ-
ated with different hosts. For example, a port scan that
targets a highly valued ﬁle server should be assigned
higher importance than one targets a public web server.