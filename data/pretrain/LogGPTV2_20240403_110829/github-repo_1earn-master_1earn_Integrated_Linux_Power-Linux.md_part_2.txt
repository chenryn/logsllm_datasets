```bash
tmux switch -t 0        # 使用会话编号
tmux switch -t    # 使用会话名称
```
**重命名会话**
```bash
Ctrl+b
$
tmux rename-session -t 0 
```
**历史日志**
```bash
ctl+b
```
然后按 `[`
**水平分隔**
```bash
tmux split-window -h
```
**增加回滚缓冲区的大小**
```bash
echo "set-option -g history-limit 3000" >> ~/.tmux.conf   # 默认值为2000
```
**保存指定输出**
```bash
# 第 3 个会话 1000 行到 6000 行
tmux capture-pane -S -6000 -E -1000 -t 3
tmux save-buffer output.log
```
```bash
# 保存所有历史输出
tmux capture-pane -S -
tmux save-buffer output.log
```
**发送按键**
```bash
# 给的 1 号窗格（第二个）发送 ls + 回车
tmux send-keys -t test.1 ls Enter
```
**tmux 下使用 rz/sz 卡死的解决方案**
按住Ctrl键, 再按五次x键 (强行终断传输)
---
## 网络服务
### AdguardTeam
> 一个 DNS 去广告、去跟踪的服务
**项目地址**
- https://github.com/AdguardTeam/AdGuardHome
**安装**
```bash
mkdir -p /opt/adguard && cd /opt/adguard
wget https://github.com/AdguardTeam/AdGuardHome/releases/download/v0.105.0-beta.2/AdGuardHome_linux_amd64.tar.gz
tar -xzvf AdGuardHome_linux_amd64.tar.gz
cd AdGuardHome
./AdGuardHome -s install
systemctl stop firewalld
```
**其他管理命令**
```bash
./AdGuardHome -s uninstall
./AdGuardHome -s start
./AdGuardHome -s stop
./AdGuardHome -s restart
./AdGuardHome -s status
```
无误的话访问服务器 IP:3000 就可以看到管理页面了
**修改密码**
编辑 AdGuardHome.yaml 文件,修改 password 字段,修改的密码需要是 BCrypt 生成的,可以用在线网站实现 https://bcrypt-generator.com/
```diff
vim AdGuardHome.yaml
-- password xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
++ password xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
```
重启服务
```bash
./AdGuardHome -s restart
```
**Tips**
配合下列项目获得更好的体验
- https://github.com/privacy-protection-tools/anti-AD
---
### butterfly
> 基于 websocket 和 tornado 的 web 终端
**项目地址**
- https://github.com/paradoxxxzero/butterfly
**安装**
```bash
pip install butterfly
```
**使用**
```bash
# 走 http,使用系统认证
butterfly.server.py --host=192.168.1.1 --port=57575 --login --unsecure
```
访问 IP:57575 , 在 web 页面中 Alt+s 可以切换主题样式
---
### Cacti
> Cacti 是一套基于 PHP,MySQL,SNMP 及 RRDTool 开发的网络流量监测图形分析工具。它的主要功能是用 snmp 服务获取数据，然后用 rrdtool 储存和更新数据，当用户需要查看数据的时候用 rrdtool 生成图表呈现给用户。
**官网**
- https://www.cacti.net/
**什么是 RRDtools**
RRDtool 是指 Round Robin Database 工具（环状数据库）。Round robin 是一种处理定量数据、以及当前元素指针的技术。想象一个周边标有点的圆环－－这些点就是时间存储的位置。从圆心画一条到圆周的某个点的箭头－－这就是指针。就像我们在一个圆环上一样，没有起点和终点，你可以一直往下走下去。过来一段时间，所有可用的位置都会被用过，该循环过程会自动重用原来的位置。这样，数据集不会增大，并且不需要维护。RRDtool 处理 RRD 数据库。它用向 RRD 数据库存储数据、从 RRD 数据库中提取数据。
**搭建 lamp**
```bash
yum install -y yum-utils
wget https://repo.mysql.com//mysql80-community-release-el7-1.noarch.rpm
rpm -ivh mysql80-community-release-el7-1.noarch.rpm
yum-config-manager --disable mysql80-community
yum-config-manager --enable mysql57-community
yum install -y mysql-community-server mysql-community-devel httpd php php-mysql php-gd libjpeg* php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-bcmath php-mhash libxml2-devel libevent-devel curl-devel net-snmp* php-snmp php-fpm
systemctl enable mysqld && systemctl enable httpd
```
初始化 mysql
```bash
/usr/bin/mysqld -initialize -basedir=/usr/share/mysql -datadir=/var/lib/mysql/data/
# 或
/usr/bin/mysql -initialize -basedir=/usr/share/mysql -datadir=/var/lib/mysql/data/
systemctl start mysqld
```
```diff
vim /etc/my.cnf
# 在末尾添加一行规则
+ skip-grant-tables
```
```bash
systemctl restart mysqld
mysql -uroot -p
use mysql;
update user set authentication_string=password('123456') where user='root';
exit
```
> 注意 : 此处只是为了方便演示,生产环境下请不要使用类似 123456 这类弱口令
修改 php.ini 配置文件
```diff
vim /etc/php.ini
+ date.timezone = "Asia/Shanghai"
```
```bash
systemctl start httpd
echo "" > /var/www/html/phpinfo.php
service firewalld stop
```
然后在浏览器上访问 `ip/phpinfo.php` 能看到 phpinfo 信息就没问题
**安装配置 cacti**
编辑 `my.cnf` 配置文件
```diff
vim /etc/my.cn
+ [mysqld]
+ character-set-server=utf8mb4
+ collation-server=utf8mb4_unicode_ci
```
```bash
systemctl restart mysqld
mysql -uroot -p123456
create database cacti character set utf8 ;
ALTER DATABASE cacti CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
exit
```
```diff
vim /etc/my.cnf
# 删除末尾规则
- skip-grant-tables
```
```bash
systemctl restart mysqld
mysql -uroot -p123456
set global validate_password_policy=LOW;
set global validate_password_length=6;
alter user 'root'@'localhost' identified by '123456';
grant all privileges on cacti.* to cacti@localhost identified by '1qaz@WSX';
GRANT SELECT ON mysql.time_zone_name TO cacti@localhost IDENTIFIED BY '1qaz@WSX';
flush privileges ;
mysql_tzinfo_to_sql /usr/share/zoneinfo
exit;
systemctl restart mysqld
```
导入 cacti 数据库脚本
```bash
cd /usr/local/src/
wget https://www.cacti.net/downloads/cacti-1.2.8.zip
unzip cacti-1.2.8.zip
mysql -uroot -p123456
use cacti ;
source /usr/local/src/cacti-1.2.8/cacti.sql ;
exit
```
```bash
cd /var/www/html
mkdir cacti
cp -r /usr/local/src/cacti-1.2.8/* /var/www/html/cacti
```
```diff
vim /var/www/html/cacti/include/config.php
- $database_type     = 'mysql';
- $database_default  = 'cacti';
- $database_hostname = 'localhost';
- $database_username = 'cactiuser';
- $database_password = 'cactiuser';
- $database_port     = '3306';
- $database_ssl      = false;
# 把原来的配置信息修改成以下信息：
+ $database_type = 'mysql';
+ $database_default = 'cacti';
+ $database_hostname = 'localhost';
+ $database_username = 'cacti';
+ $database_password = '1qaz@WSX';
+ $database_port = '3306';
+ $database_ssl = false;
```
```bash
useradd -s /sbin/nologin cacti
mkdir /var/www/html/cacti/rra/log
chown -R cacti /var/www/html/cacti/rra/log/
```
配置定时任务
```diff
crontab -e
+ */5 * * * * /usr/bin/php /var/www/html/cacti/poller.php > /dev/null 2>&1
```
```
crontab -l # 查看是否写正确
systemctl enable crond
systemctl start crond
```
**安装其他组件**
```bash
cd /tmp
wget https://oss.oetiker.ch/rrdtool/pub/rrdtool-1.7.0.tar.gz
wget https://www.cacti.net/downloads/spine/cacti-spine-1.2.1.tar.gz
yum install -y glib2-devel cairo-devel libxml2-devel pango pango-devel help2man
```
**安装 rrdtool 工具**
```bash
tar zxvf rrdtool-1.7.0.tar.gz
cd rrdtool-1.7.0
./configure --prefix=/usr/local/bin/rrdtool
make
make install
```
**安装 cacti-spine 工具**
```bash
cd ../
tar zxvf cacti-spine-1.2.1.tar.gz
cd cacti-spine-1.2.1
./configure --prefix=/usr/local/spine
make
make install
```
```diff
vim /usr/local/spine/etc/spine.conf
+ DB_Host localhost
+ DB_Database cacti
+ DB_User cacti
+ DB_Pass 1qaz@WSX
+ DB_Port 3306
```
```bash
setenforce 0
cd /var/www/html/cacti/log
ls
# 如果发现没有 cacti.log 文件时，可以执行一下命令：
touch cacti.log
chmod 777 cacti.log
chmod 777 /var/www/html/cacti/resource/snmp_queries/
chmod 777 /var/www/html/cacti/resource/script_server/
chmod 777 /var/www/html/cacti/resource/script_queries/
chmod 777 /var/www/html/cacti/scripts/
chmod 777 /var/www/html/cacti/log/
chmod 777 /var/www/html/cacti/cache/boost/
chmod 777 /var/www/html/cacti/cache/mibcache/
chmod 777 /var/www/html/cacti/cache/realtime/
chmod 777 /var/www/html/cacti/cache/spikekill/
```
**如果出现 csrf-secret.php not writable**
```diff
systemctl edit php-fpm.service
+ [Service]
+ ReadWritePaths = /usr/share/webapps/cacti/include/vendor/csrf
```
```bash
chmod 777 /var/www/html/cacti/include/vendor/csrf
systemctl restart php-fpm.service
```
在浏览器访问：`http://ip/cacti` 默认密码 admin/admin
---
### Chrony
> 一个时间同步软件,可用于搭建类 NTP 时间服务
**官网**
- https://chrony.tuxfamily.org/
**简介**
它由两个程序组成:chronyd 和 chronyc.
chronyd 是一个后台运行的守护进程,用于调整内核中运行的系统时钟和时钟服务器同步.它确定计算机增减时间的比率,并对此进行补偿.
chronyc 是用来监控 chronyd 性能和配置其参数程序
**安装**
```bash
yum install -y chrony
```
**配置文件**
```diff
vim /etc/chrony.conf
+ server time1.aliyun.com iburst
+ server time2.aliyun.com iburst
+ server time3.aliyun.com iburst
+ server time4.aliyun.com iburst
+ server time5.aliyun.com iburst
+ server time6.aliyun.com iburst
+ server time7.aliyun.com iburst
# 或
+ server time1.google.com iburst
+ server time2.google.com iburst
+ server time3.google.com iburst
+ server time4.google.com iburst
```
**启服务**
```bash
systemctl stop ntpd
systemctl disable ntpd
systemctl enable chronyd.service
systemctl start chronyd.service
```
**查看同步状态**
```bash
chronyc sourcestats # 检查 ntp 源服务器状态
chronyc sources -v  # 检查 ntp 详细同步状态
chronyc             # 进入交互模式
  activity
```
---
### clash
**项目地址**
- https://github.com/Dreamacro/clash
**部署**
```bash
wget https://github.com/Dreamacro/clash/releases/download/v1.11.4/clash-linux-amd64-v1.11.4.gz
gzip -d clash-linux-amd64-v1.11.4.gz
mv clash-linux-amd64-v1.11.4 /usr/local/bin/clash
chmod +x /usr/local/bin/clash
wget https://raw.githubusercontent.com/wp-statistics/GeoLite2-Country/master/GeoLite2-Country.mmdb.gz
gzip -d GeoLite2-Country.mmdb.gz
mv GeoLite2-Country.mmdb ~/.config/clash/Country.mmdb
vim ~/.config/clash/config.yaml
```
**负载均衡配置**
```yaml
proxy-groups:
  - name: "test"
    type: load-balance