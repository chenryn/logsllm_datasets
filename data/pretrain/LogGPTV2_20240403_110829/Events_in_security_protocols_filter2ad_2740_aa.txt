title:Events in security protocols
author:Federico Crazzolara and
Glynn Winskel
Events in Security Protocols
Federico Crazzolara
Glynn Winskel
Computer Laboratory, University of Cambridge
∗
England
{fc232,gw104}@cl.cam.ac.uk
ABSTRACT
The events of a security protocol and their causal depen-
dency can play an important role in the analysis of security
properties. This insight underlies both strand spaces and the
inductive method. But neither of these approaches builds
up the events of a protocol in a compositional way, so that
there is an informal spring from the protocol to its model.
By broadening the models to certain kinds of Petri nets, a
restricted form of contextual nets, a compositional event-
based semantics is given to an economical, but expressive,
language for describing security protocols; so the events and
dependency of a wide range of protocols are determined once
and for all. The net semantics is formally related to a tran-
sition semantics, strand spaces and inductive rules, as well
as trace languages and event structures, so unifying a range
of approaches, as well as providing conditions under which
particular, more limited, models are adequate for the anal-
ysis of protocols. The net semantics allows the derivation
of general properties and proof principles which are demon-
strated in establishing an authentication property, following
a diagrammatic style of proof.
1.
INTRODUCTION
The last few years have seen the emergence of successful
intensional, event-based, approaches to reasoning about se-
curity protocols. The methods are concerned with reasoning
about the events that a security protocol can perform, and
make use of a causal dependency that exists between events.
For example, to show secrecy in a protocol it is shown that
there can be no earliest event violating a secrecy property;
any such event is shown to depend on some earlier event
which itself violates secrecy - because the behaviour of the
protocol does not permit such an inﬁnite regress, the se-
crecy property is established. In a similar way, dependency
between events is used to establish forms of authentication
by showing that a sequence of communication events of one
∗
BRICS, Centre of the Danish National Research Foundation.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage and that copies
bear this notice and the full citation on the first page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior specific
permission and/or a fee.
CCS’01, November 5-8, 2001, Philadelphia, Pennsylvania, USA.
Copyright 2001 ACM 1-58113-385-5/01/0011 ...$5.00.
agent entails a corresponding sequence of events of the in-
tended participant.
Both the method of strand spaces [12] and the induc-
tive method of Paulson [9] have been designed to support
such an intensional, event-based, style of reasoning. Strand
spaces are based on an explicit causal dependency of events,
whereas in Paulson’s method the dependency is implicit in
the inductive rules, which might express, for instance, that
the input of a message depends on its previous output. Both
methods have successfully tackled a number of protocols
though in an ad hoc fashion. Both make an informal spring
from a protocol to its representation, as either a strand space
or a set of inductive rules. Both methods do not address how
to build up their representation of a protocol in a composi-
tional fashion.
We show that Petri nets, and speciﬁcally a restricted form
of contextual nets [8], provide a common framework in which
to understand both the strand-space and inductive methods,
and it seems, although we understand it less well, the recent
multiset rewriting method of [3]. But, more importantly,
by moving to a broader class of models we can show how
event-based models can be structured in a compositional
way and so used to give a formal semantics to security pro-
tocols which supports proofs of their correctness. To make
the case, and provide semantics to a whole range of proto-
cols once and for all, we study the semantics of SPL (Se-
curity Protocol Language). We demonstrate the usefulness
of the net semantics in deriving (in contrast to postulating)
proof principles for security protocols and apply them to
prove an authentication property - the diagrammatic style
of proof may be of interest in itself. We establish precise
relationships between the net semantics and transition se-
mantics, strand spaces, inductive rules, and trace languages
and event structures. The results formally back up the ade-
quacy of strand-space and inductive-rule representations for
broad classes of security protocols and properties, showing
when nothing is lost in moving to these more restrictive
models.
2. SECURITY PROTOCOLS
As a running example we consider the Needham-Schr¨oder-
Lowe (NSL) protocol:
(1) A −→ B : {m, A}P ub(B)
(2) B −→ A : {m, n, B}P ub(A)
(3) A −→ B : {n}P ub(B)
This protocol, like many others of its kind, has two roles: one
for the initiator, here played by agent A (say Alice), and one
96for the responder, here B (Bob). It is a public-key protocol
that assumes an underlying public-key infrastructure, such
as RSA [11]. Both agents have their own, secret private key.
Public keys in contrast are available to all participants in
the protocol. The NSL protocol makes use of nonces which
one can think of as newly generated, unguessable numbers
whose purpose is to ensure the freshness of messages.
The protocol describes an interaction between A in the
role of initiator and B as responder: A sends to B a new
nonce m together with her own agent name A, both en-
crypted with B’s public key. When the message is received
by B, he decrypts it with his secret private key. Once de-
crypted, B prepares an encrypted message for A that con-
tains a new nonce together with the nonce received from A
and his name B. Acting as responder, B sends it to A, who
recovers the clear text using her private key. A convinces
herself that this message really comes from B by checking
whether she got back the same nonce sent out in the ﬁrst
message. If that is the case, she acknowledges B by return-
ing his nonce. B does a similar test.
Although in this informal explanation only two agents in
their respective roles are described, the protocol is really a
shorthand for a situation in which a network of distributed
agents are each able to participate in multiple concurrent
sessions as both initiator and responder. There is no assur-
ance that they all stick to the protocol, or indeed that com-
munication goes to the intended agent. An attacker might
dissemble and pretend to be one or several agents, taking
advantage of any leaked keys it possesses in deciphering,
and preparing the messages it sends. However in this paper
we assume cryptography unbreakable and random numbers
unguessable, following the lead of Dolev and Yao [4].
The NSL protocol aims at distributing nonces m and n
in a secure way, allowing no one but the initiator and the
responder to know them (secrecy). Another aim of the pro-
tocol is that, for example, Bob should be guaranteed that
m is indeed the nonce sent by Alice (authentication). Lowe
pointed out that the NSL protocol is prone to a “middle-
man” attack, violating both these secrecy and authentica-
tion properties, if, as in the original protocol, the name B
is not included in the second message [6].
3. SPL - A LANGUAGE FOR SECURITY
PROTOCOLS
In order to be more explicit about the activities of partic-
ipants in a protocol and those of a possible attacker, and to
express these compositionally, we design an economical pro-
cess language for the purpose. The language SPL (Security
Protocol Language) is close to an asynchronous Pi-Calculus
[7] and is similar to that adopted in [1], though in its treat-
ment of new names its transition semantics will be closer to
that in [10] (it separates concerns of freshness from concerns
of scope which are combined in the Pi-Calculus restriction).
3.1 The syntax of SPL
We start by giving the syntactic sets of the language:
• An inﬁnite set of names N, with elements n, m, A,··· .
Names range over nonces as well as agent names, and
can also include other values.
• Variables over names x, y,··· , X, Y,··· .
• Variables over messages ψ, ψ
, ψ1,··· .
(cid:1)
Name expr.
Key expr.
Messages
Processes
::= n, A, · · · | x, X, · · ·
v
::= P ub(v) | P riv(v) | Key((cid:16)v)
k
M ::= v | k | M1, M2 | {M}k | ψ
::= out new(cid:16)xM.p | in pat(cid:16)x (cid:16)ψM.p | (cid:5)i∈I pi
p
Figure 1: Syntax of SPL
• Indices i ∈ Indices with which to index components
of parallel compositions.
The other syntactic sets of the language are described by the
grammar shown in Figure 1. Note we use “vector” notation;
for example, the “vector” (cid:12)x abbreviates some possibly empty
list x1,··· , xl.
We take f v(M ), the free variables of a message M , to be
the set of variables which appear in M , and deﬁne the free
variables of process terms by:
f v(out new(cid:12)xM.p) = (f v(p) ∪ f v(M ))\{(cid:12)x}
f v(in pat(cid:12)x (cid:12)ψM.p) = (f v(p) ∪ f v(M ))\{(cid:12)x, (cid:12)ψ}
f v((cid:11)i∈I pi)
i∈I f v(pi).
(cid:1)
=
As usual, we say that a process without free variables is
closed, as is a message without variables. We shall use stan-
dard notation for substitution into the free variables of an
expression, though we will only be concerned with the sub-
stitution of names or closed (variable-free) messages, obvi-
ating the problems of variable capture.
We use P ub(v), P riv(v) for the public, private keys of v,
and we use Key((cid:12)v) for the symmetric key shared by agents
with names in (cid:12)v. Keys can be used in building up encrypted
messages. Messages consist of a name or a key, the com-
position of two messages M1, M2, or an encryption {M}k
representing the message M encrypted using the key k.
An informal explanation of the language:
out new(cid:12)xM.p This process chooses fresh, distinct names
(cid:12)n = n1,··· , nl and binds them to the variables (cid:12)x =
x1,··· , xl. The message M [(cid:12)n/(cid:12)x] is output to the net-
work and the process resumes as p[(cid:12)n/(cid:12)x]. The commu-
nication is asynchronous in the sense that the action
of output does not await input. The new construct is
like that of Pitts and Stark [10] and abstracts out an
important property of a value chosen randomly from
some large set: such a value is likely to be new.
in pat(cid:12)x (cid:12)ψM.p This process awaits an input that matches the
pattern M for some binding of the pattern variables (cid:12)x (cid:12)ψ
and resumes as p under this binding. All the pattern
variables (cid:12)x (cid:12)ψ must appear in the pattern M .
(cid:11)i∈I pi This process is the parallel composition of all com-
ponents pi for i in the indexing set I. The set I is a
subset of Indices. Indices will help us distinguish in
what agent, which role and what run a particular ac-
tion occurs. The process, written nil, abbreviates the
empty parallel composition (where the indexing set is
empty).
Convention 3.1. It simpliﬁes the writing of process ex-
pressions if we adopt some conventions. Firstly, we simply
write out M.p when the list of “new” variables is empty.
Secondly, and more signiﬁcantly, we allow ourselves to write
··· in M.p··· in an expression, to be understood as meaning
the expression ··· in pat(cid:12)x (cid:12)ψM.p··· where the pattern vari-
ables (cid:12)x (cid:12)ψ are precisely those variables left free in M by the
97Init(A, B) ≡ out new x{x, A}P ub(B).
in{x, y, B}P ub(A).
out{y}P ub(B).
nil
Resp(B)
≡ in{x, Z}P ub(B).
out new y{x, y, B}P ub(Z).
in{y}P ub(B).
nil
Figure 2: Initiator and responder code
surrounding expression. For example, we can describe a re-
sponder in NSL as the process Resp(B) in Figure 2. For
the ﬁrst input, the variables x, Z in {x, Z}P ub(B) are free
in the whole expression, so by convention are pattern vari-
ables. On the other hand, in the second input the variable y
in {y}P ub(B) is bound by the outer out new y ··· and so by
the convention is not a pattern variable, and has to be that
value sent out earlier. Replication of a process, !p, abbrevi-
ates (cid:11)i∈ωp, consisting of countably inﬁnite copies of p set in
parallel.
An obvious structural induction deﬁnes the set of names
of a process. We deﬁne size(p) of a process term p to be
an ordinal measuring the depth of process operations in the
term.
Definition 3.1. The size of a closed process term is an
ordinal given by the structural induction:
size(out new(cid:12)xM.p) = 1 + size(p)
size(in pat(cid:12)x (cid:12)ψM.p) = 1 + size(p)
size((cid:11)i∈I pi) = 1 + supi∈I size(pi).
3.2 NSL as a process
As an illustration, we can program the NSL protocol in
our language, and so formalise the introductory description
given in the Section 2. We assume given a set of agent
names, Agents, of agents participating in the protocol. The
agents participating in the NSL protocol play two roles, as
initiator and responder with any other agent. Abbreviate
by Init(A, B) the program of initiator A ∈ Agents commu-
nicating with B ∈ Agents and by Resp(B) the program of
responder B ∈ Agents. The code of both an arbitrary ini-
tiator and an arbitrary responder is given in Figure 2. In the
code we are forced to formalise aspects that are implicit in
the informal description, such as the creation of new nonces,
the decryption of messages and the matching of nonces.
We can model the attacker by directly programming it as a
process. Figure 3, shows a general, active attacker or “spy”.
The spy has the capability of composing eavesdropped mes-
sages, decomposing composite message, and using cryptog-
raphy whenever the appropriate keys are available; the avail-
able keys are all the public keys and the leaked private keys.
By choosing a diﬀerent program for the spy we can restrict
or augment its power, e.g., to passive eavesdropping or ac-
tive falsiﬁcation.
The whole system is obtained by putting all components
in parallel. Components are replicated, to model multiple
concurrent runs of the protocol. The system is described in
Figure 4.
Spy1 ≡ in ψ1.in ψ2.outψ1, ψ2.nil
Spy2 ≡ inψ1, ψ2.out ψ1.out ψ2.nil
Spy3 ≡ in x.in ψ.out {ψ}P ub(x).nil
Spy4 ≡ in P riv(x).in {ψ}P ub(x).out ψ.nil
(composing)
(decomp’g)
(encrypting)
(decrypting)
Spy
≡ (cid:5)i∈{1,...,4}Spyi
Figure 3: Attacker code
Pinit ≡ (cid:5)A,B ! Init(A, B)
Presp ≡ (cid:5)A ! Resp(A)
Pspy ≡ ! Spy
N SL ≡ (cid:5)i∈{resp,init,spy} Pi
Figure 4: The system
3.3 A transition semantics
We ﬁrst give a, fairly traditional, transition semantics to
SPL. It says how input and output actions aﬀect conﬁgu-
rations; a conﬁguration expresses the state of execution of
the process, the messages so far output to the network and
the names currently in use.
A conﬁguration consists of a triple (cid:12)p, s, t(cid:13) where p is a
closed process term, s is a subset of the set of names N,
and t is a subset of closed (i.e., variable-free) messages. We
say the conﬁguration is proper iﬀ the names in p and t are
included in s. The idea is that a closed process p acts in
the context of the set of names s that have been used so
far, and the set of messages t which have been output, to
input a message or to generate new names before outputting
a message.
Actions α may be inputs or new-outputs, possibly tagged
by indices to show at which parallel component they occur:
α ::= out new (cid:12)n.M | in M | i : α
, s
, t
(cid:1)
where M is a closed message, (cid:12)n are names and i is an in-
dex drawn from Indices. We write out M for an output
action, outputting a message M , where no new names are
generated.
(cid:12)p, s, t(cid:13) α−→ (cid:12)p
(cid:1)
The way conﬁgurations evolve is expressed by transitions
(cid:1)(cid:13), given by the rules shown in Figure 5.
The transition semantics allows us to state formally many
security properties. However, it does not support directly
local reasoning of the kind one might wish to apply in the
analysis of security protocols. To give an idea of the diﬃ-
culty, imagine we wished to establish that the nonce gen-
erated by B as responder in NSL was never revealed as an
open message on the network. A reasonable way to prove
such a property is to ﬁnd a stronger invariant, a property
which can be shown to be preserved by all the actions of the
process. Equivalently, one can assume that there is an earli-
est action αl in a run which violates the invariant, and derive
a contradiction by showing that this action must depend on
a previous action, which itself violates the invariant.
An action might depend on another action through be-
ing, for example, an input depending on a previous output,
or simply through occurring at a later control point in a
process. A problem with the transition semantics is that
it masks such local dependency, and even the underlying
process events on which the dependency rests. The wish
to support arguments based on local dependency leads to a
more reﬁned semantics based on events.
98(output) Provided the names (cid:16)n are all distinct and not in s,
(cid:7)out new(cid:16)xM.p, s, t(cid:8) out new (cid:25)nM [(cid:25)n/(cid:25)x]
(input) Provided M [(cid:16)n/(cid:16)x, (cid:16)N / (cid:16)ψ] ∈ t,
−→
(cid:7)in pat(cid:16)x (cid:16)ψM.p, s, t(cid:8) in M [(cid:25)n/(cid:25)x, (cid:25)N / (cid:25)ψ]
(cid:7)p[(cid:16)n/(cid:16)x], s∪{(cid:16)n}, t∪{M [(cid:16)n/(cid:16)x]}(cid:8)
(cid:7)p[(cid:16)n/(cid:16)x, (cid:16)N / (cid:16)ψ], s, t(cid:8)
−→
(par)
(cid:7)pj , s, t(cid:8) α−→ (cid:7)p(cid:1)
j , s(cid:1), t(cid:1)(cid:8)
where p(cid:1)
i is p(cid:1)
(cid:7)(cid:5)i∈I pi, s, t(cid:8) j:α−→ (cid:7)(cid:5)i∈I p(cid:1)
j for i = j, else pi.
i, s(cid:1), t(cid:1)(cid:8)
j ∈ I
Figure 5: Transition semantics
4. THE EVENTS OF SPL