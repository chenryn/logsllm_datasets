----------------------+---------+--------+------------------------
Federated Builders | 0.00 | Y | 1998-05-30 21:37:48-04
(1 row)
Figure4.6: UsingDEFAULTvalues
test=> SELECT firstname AS buddy FROM friend ORDER BY buddy;
buddy
-----------------
Cindy
Jack
Mark
Mike
Sam
(5 rows)
Figure4.7: Controllingcolumnlabels
30 CHAPTER4. CUSTOMIZINGQUERIES
test=> SELECT 1 + 3 AS total;
total
-------
4
(1 row)
Figure4.8: Computationusingacolumnlabel
test=> -- a single line comment
test=> /* a multiline
test*> comment */
Figure4.9: Commentstyles
thatthequeryinFigure2.3onpage7hasthecolumnlabel?column?. Thedatabaseserverreturns
thislabelwhenthereisno suitablelabel. In thatcase,theresultof anadditiondoesnot havean
appropriatelabel. Figure4.8showsthesamequerywithanappropriatelabeladdedusingAS.
4.6 Comments
POSTGRESQL allowsyou to place anytextinto psql for useas acomment. Two comment styles
arepossible. Thepresenceoftwodashes(--)marksalltexttotheendofthelineasacomment.
POSTGRESQLalsounderstandsC-stylecomments,wherethecommentbeginswithslash-asterisk
(/*) and ends with asterisk-slash (*/). Figure 4.9 shows both comment styles. Notice how the
multiline comment ismarked by a psql command prompt of *>. It isa reminderthatyou are in
a multiline comment, just as -> is a reminder that you are in a multiline statement, and ’> is a
reminderthatyouareinamultilinequotedstring.
4.7 AND/OR Usage
Until now, we have used only simple WHERE clause tests. In the following sections, we will
demonstratehowtoperformmorecomplexWHEREclausetesting.
Complex WHERE clause tests are done by connecting simple tests using the words AND and
OR. Forillustration,newpeoplehavebeeninsertedintothefriendtable,asshowninFigure 4.10.
SelectingcertainrowsfromthetablewillrequiremorecomplexWHEREconditions. Forexample,
ifwewantedtoselectSandyGleasonbyname,itwouldbeimpossibleusingonlyonecomparison
4.7. AND/ORUSAGE 31
test=> DELETE FROM friend;
DELETE 6
test=> INSERT INTO friend
test-> VALUES (’Dean’, ’Yeager’, ’Plymouth’, ’MA’, 24);
INSERT 19744 1
test=> INSERT INTO friend
test-> VALUES (’Dick’, ’Gleason’, ’Ocean City’, ’NJ’, 19);
INSERT 19745 1
test=> INSERT INTO friend
test-> VALUES (’Ned’, ’Millstone’, ’Cedar Creek’, ’MD’, 27);
INSERT 19746 1
test=> INSERT INTO friend
test-> VALUES (’Sandy’, ’Gleason’, ’Ocean City’, ’NJ’, 25);
INSERT 19747 1
test=> INSERT INTO friend
test-> VALUES (’Sandy’, ’Weber’, ’Boston’, ’MA’, 33);
INSERT 19748 1
test=> INSERT INTO friend
test-> VALUES (’Victor’, ’Tabor’, ’Williamsport’, ’PA’, 22);
INSERT 19749 1
test=> SELECT * FROM friend ORDER BY firstname;
firstname | lastname | city | state | age
-----------------+----------------------+-----------------+-------+-----
Dean | Yeager | Plymouth | MA | 24
Dick | Gleason | Ocean City | NJ | 19
Ned | Millstone | Cedar Creek | MD | 27
Sandy | Gleason | Ocean City | NJ | 25
Sandy | Weber | Boston | MA | 33
Victor | Tabor | Williamsport | PA | 22
(6 rows)
Figure4.10: Newfriends
32 CHAPTER4. CUSTOMIZINGQUERIES
test=> SELECT * FROM friend
test-> WHERE firstname = ’Sandy’ AND lastname = ’Gleason’;
firstname | lastname | city | state | age
-----------------+----------------------+-----------------+-------+-----
Sandy | Gleason | Ocean City | NJ | 25
(1 row)
Figure4.11: WHEREtestforSandyGleason
test=> SELECT * FROM friend
test-> WHERE state = ’NJ’ OR state = ’PA’
test-> ORDER BY firstname;
firstname | lastname | city | state | age
-----------------+----------------------+-----------------+-------+-----
Dick | Gleason | Ocean City | NJ | 19
Sandy | Gleason | Ocean City | NJ | 25
Victor | Tabor | Williamsport | PA | 22
(3 rows)
Figure4.12: FriendsinNewJerseyandPennsylvania
in the WHEREclause. If we testedfor firstname = ’Sandy’, we would selectboth Sandy Gleason
andSandyWeber. Ifwetestedforlastname = ’Gleason’,wewouldgetbothSandyGleasonandher
brotherDickGleason. TheproperapproachistouseANDtotestbothfirstnameandlastname. This
queryisshowninFigure4.11. TheANDcombinesthetwoneededcomparisons.
A similarcomparison could be usedto selectfriendslivingin CedarCreek, Maryland. Other
friends could live in Cedar Creek, Ohio, so the comparison city = ’Cedar Creek’ is not enough.
Thepropertestiscity = ’Cedar Creek’ AND state = ’MD’.
Another complex test would be to select people who live in the state of New Jersey (NJ) or
Pennsylvania(PA).Such acomparison requirestheuseof OR. Theteststate = ’NJ’ OR state =
’PA’wouldreturnthedesiredrows,asshowninFigure4.12.
An unlimited number of AND and OR clauses can be linked together to perform complex
comparisons. When ANDs are linked with other ANDs, there is no possibilityfor confusion. The
sameistrueof ORs. Ontheotherhand,whenANDsandORsarebothusedinthesamequery,the
resultscanbeconfusing. Figure 4.13showssuchacase. You mightsuspectthatitwouldreturn
rows with firstname equal to Victor and state equal to PA or NJ. In fact, the query returns rows
with firstname equal to Victor and state equal to PA, or state equal to NJ. In this case, the AND is
4.8. RANGEOFVALUES 33
test=> SELECT * FROM friend
test-> WHERE firstname = ’Victor’ AND state = ’PA’ OR state = ’NJ’
test-> ORDER BY firstname;
firstname | lastname | city | state | age
-----------------+----------------------+-----------------+-------+-----
Dick | Gleason | Ocean City | NJ | 19
Sandy | Gleason | Ocean City | NJ | 25
Victor | Tabor | Williamsport | PA | 22
(3 rows)
Figure4.13: IncorrectlymixingANDandORclauses
test=> SELECT * FROM friend
test-> WHERE firstname = ’Victor’ AND (state = ’PA’ OR state = ’NJ’)
test-> ORDER BY firstname;
firstname | lastname | city | state | age
-----------------+----------------------+-----------------+-------+-----
Victor | Tabor | Williamsport | PA | 22
(1 row)
Figure4.14: CorrectlymixingANDandORclauses
evaluated first, then the OR. When mixing ANDs and ORs, it is best to collect the ANDs and ORs
into common groups using parentheses. Figure 4.14 shows the proper way to enter this query.
Withoutparentheses,itisverydifficulttounderstandaquerywithmixedANDsandORs.
4.8 Range of Values
Supposewewanttoseeallfriendswithagesbetween22and25. Figure 4.15showstwoqueries
thatproducethisresult. ThefirstqueryusesANDtoperformtwocomparisonsthatbothmustbe
true. Weused=sotheagecomparisonsincludedthelimitingagesof22and25. Ifweused
,theages22and25wouldnothavebeenincludedintheoutput. Thesecondqueryuses
BETWEENtogeneratethesamecomparison. BETWEENcomparisonsincludethelimitingvaluesin
theresult.
34 CHAPTER4. CUSTOMIZINGQUERIES
Comparison Operator
lessthan =
greaterthan >
notequal <>or!=
Table4.2: Comparisonoperators
test=> SELECT *
test-> FROM friend
test-> WHERE age >= 22 AND age  ORDER BY firstname;
firstname | lastname | city | state | age
-----------------+----------------------+-----------------+-------+-----
Dean | Yeager | Plymouth | MA | 24
Sandy | Gleason | Ocean City | NJ | 25
Victor | Tabor | Williamsport | PA | 22
(3 rows)
test=> SELECT *
test-> FROM friend
test-> WHERE age BETWEEN 22 AND 25
test-> ORDER BY firstname;
firstname | lastname | city | state | age
-----------------+----------------------+-----------------+-------+-----
Dean | Yeager | Plymouth | MA | 24
Sandy | Gleason | Ocean City | NJ | 25
Victor | Tabor | Williamsport | PA | 22
(3 rows)
Figure4.15: Selectingarangeofvalues
4.9. LIKECOMPARISON 35
test=> SELECT * FROM friend
test-> WHERE firstname LIKE ’D%’
test-> ORDER BY firstname;
firstname | lastname | city | state | age
-----------------+----------------------+-----------------+-------+-----
Dean | Yeager | Plymouth | MA | 24
Dick | Gleason | Ocean City | NJ | 19
(2 rows)
Figure4.16: FirstnamebeginswithD
Comparison Operation
beginswithD LIKE ’D%’
containsaD LIKE ’%D%’
hasDinsecondposition LIKE ’_D%’
beginswithDandcontainse LIKE ’D%e%’
beginswithD,containse,thenf LIKE ’D%e%f%’
beginswithnon-D NOT LIKE ’D%’
Table4.3: LIKEcomparisons
4.9 LIKE Comparison
GreaterthanandlessthancomparisonsarepossibleusingtheoperatorsshowninTable 4.2. Even
more complex comparisons can be made. For instance, users often need to compare character
strings to see if they match a certain pattern. Sometimes they want only fields that begin with
acertainletterorthatcontain acertainword. TheLIKE keywordallowssuchcomparisons. The
queryinFigure4.16returnsrowswherethefirstnamebeginswithD.Thepercentsymbol(%)means
thatanycharacterscanfollowtheD.Thusthequeryperformsthetestfirstname LIKE ’D%’.
ThetestfirstnameLIKE’%D%’returnsthoserowswherefirstnamecontainsDanywhereinthe
field, not just at the beginning. The effect of having a % before and after a character is that the
charactercanappearanywhereinthestring.
More complex tests can be performed with LIKE, as shown in Table 4.3. While the percent
symbol(%)matchesanunlimitednumberofcharacters,theunderscore(_)matchesonlyasingle
character. Theunderscoreallowsanysinglecharactertoappearinthatposition. Totestwhether
a field does not match a pattern, use NOT LIKE. To test for an actual percent symbol (%), use
backslash-percent(\%). Totestforanactualunderscore(_),usebackslash-underscore(\_).
36 CHAPTER4. CUSTOMIZINGQUERIES
Comparison Operator
regularexpression ˜
regularexpression,case-insensitive ˜*
notequaltoregularexpression !˜
notequaltoregularexpression,case-insensitive !˜*
Table4.4: Regularexpressionoperators
Test SpecialCharacters
start ˆ
end $
anysinglecharacter .
setofcharacters [ccc]
setofcharactersnotequal [ˆccc]
rangeofcharacters [c-c]
rangeofcharactersnotequal [ˆc-c]
zerooroneofpreviouscharacter ?
zeroormultipleofpreviouscharacters *
oneormultipleofpreviouscharacters +
ORoperator |
Table4.5: Regularexpressionspecialcharacters
Attempting to find all character fields that end with a certain character can be difficult. For
CHAR()columns,likefirstname,trailingspacesmaketrailingcomparisonsdifficultwithLIKE. Other
character column typesdo not usetrailingspaces. Those can, for example, usethe testcolname
LIKE ’%g’tofindallrowsthatendwithg. SeeSection9.2forcompletecoverageofcharacterdata
types.
4.10 Regular Expressions
RegularexpressionsallowmorepowerfulcomparisonsthanLIKEandNOTLIKE. Regularexpression
comparisonsareauniquefeatureof POSTGRESQL.TheyareverycommoninUnix,suchasinthe
Unixgrepcommand.4
Table 4.4 lists the regular expression operators, and Table 4.5 lists the regular expression
special characters. Note that the caret (ˆ) has a different meaning outside and inside square
brackets([ ]).
4Actually,inPOSTGRESQL,regularexpressionsarelikeegrepextendedregularexpressions.
4.11. CASECLAUSE 37
Test Operation
beginswithD ˜’ˆD’
containsD ˜’D’
Dinsecondposition ˜’ˆ.D’
beginswithDandcontainse ˜’ˆD.*e’
beginswithD,containse,andthenf ˜’D.*e.*f’
containsA,B,C,orD ˜’[A-D]’or ˜’[ABCD]’
containsAora ˜* ’a’or ˜’[Aa]’
doesnotcontainD !˜’D’
doesnotbeginwithD !˜’ˆD’or ˜’ˆ[ˆD]’
beginswithD,withoneoptionalleadingspace ˜’ˆ?D’
beginswithD,withoptionalleadingspaces ˜’ˆ*D’
beginswithD,withatleastoneleadingspace ˜’ˆ+D’
endswithG,withoptionaltrailingspaces ˜ ’G *$’
Table4.6: Examplesofregularexpressions
Although regular expressions are powerful, they can be complex to create. Table 4.6 shows
someexamples,andFigure4.17showsselectedqueriesusingregularexpressions. Foradescrip-
tionofeachquery,seethecommentaboveit.
Figure4.18showstwomorecomplexregularexpressions. Thefirstquerydemonstrateshow
toproperlytestforatrailingn. BecauseCHAR()columnscontaintrailingspacestofillthecolumn,
you must test for possible trailing spaces. (See Section 9.2 for complete coverage on character
data types.) The second query might seem surprising. Some might think that it returns rows
thatdonot contain anS. Actually, itreturnsall rows thathaveany characterthatisnot anS. For
example,SandycontainscharactersthatarenotS,suchasa,n, d,andy, sothatrowisreturned.
ThetestwouldpreventrowscontainingonlyS’sfrombeingprinted.
YoucanalsotestfortheliteralcharacterslistedinTable4.5. Useofabackslashremovesany
specialmeaning from the characterthat follows it. For example, to test for a dollar sign, use\$.
Totestforanasterisk,use\*. Totestforaliteralbackslash,usetwobackslashes(\\).
Because regular expressions are so powerful, creating them can be challenging. Try some
queriesonthefriendtableuntilyouarecomfortablewithregularexpressioncomparisons.
4.11 CASE Clause
Many programming languages have conditional statements, stating if condition is true then do
something,elsedosomethingelse. Thiskindofstructureallowsexecutionofstatementsbasedon
somecondition. AlthoughSQLisnotaproceduralprogramminglanguage,itdoesallowconditional
38 CHAPTER4. CUSTOMIZINGQUERIES
test=> SELECT * FROM friend
test-> ORDER BY firstname;
firstname | lastname | city | state | age
-----------------+----------------------+-----------------+-------+-----
Dean | Yeager | Plymouth | MA | 24
Dick | Gleason | Ocean City | NJ | 19
Ned | Millstone | Cedar Creek | MD | 27
Sandy | Gleason | Ocean City | NJ | 25
Sandy | Weber | Boston | MA | 33
Victor | Tabor | Williamsport | PA | 22
(6 rows)
test=> -- firstname begins with ’S’
test=> SELECT * FROM friend
test-> WHERE firstname ˜ ’ˆS’
test-> ORDER BY firstname;
firstname | lastname | city | state | age
-----------------+----------------------+-----------------+-------+-----
Sandy | Gleason | Ocean City | NJ | 25
Sandy | Weber | Boston | MA | 33
(2 rows)
test=> -- firstname has an e in the second position
test=> SELECT * FROM friend
test-> WHERE firstname ˜ ’ˆ.e’
test-> ORDER BY firstname;
firstname | lastname | city | state | age
-----------------+----------------------+-----------------+-------+-----
Dean | Yeager | Plymouth | MA | 24
Ned | Millstone | Cedar Creek | MD | 27
(2 rows)
test=> -- firstname contains b, B, c, or C
test=> SELECT * FROM friend
test-> WHERE firstname ˜* ’[bc]’