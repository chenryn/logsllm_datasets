}
return (lookup);
}
sub vcl_pipe {
# Note that only the first request to the backend will have
# X-Forwarded-For set. If you use X-Forwarded-For and want to
# have it set for all requests, make sure to have:
# set req.http.connection = "close";
# here. It is not set by default as it might break some broken web
# applications, like IIS with NTLM authentication.
return (pipe);
}
sub vcl_pass {
return (pass);
}
sub vcl_hash {
set req.hash += req.url;
if (req.http.host) {
set req.hash += req.http.host;
31
www.linuxidc.com
} else {
set req.hash += server.ip;
}
return (hash);
}
sub vcl_hit {
if (!obj.cacheable) {
return (pass);
}
return (deliver);
}
sub vcl_miss {
return (fetch);
}
sub vcl_fetch {
if (!beresp.cacheable) {
return (pass);
}
if (beresp.http.Set-Cookie) {
return (pass);
}
return (deliver);
}
sub vcl_deliver {
return (deliver);
}
sub vcl_error {
set obj.http.Content-Type = "text/html; charset=utf-8";
synthetic {"
"} obj.status " " obj.response {"
Error "} obj.status " " obj.response {"
"} obj.response {"
32
www.linuxidc.com
Guru Meditation:
XID: "} req.xid {"
Varnish cache server
"};
return (deliver);
}
下面的例子显示一个 varnishd 实例支持多个独立的站点，基于请求的 URL 选择使用的
后端服务器：
backend www {
.host = "www.example.com";
.port = "80";
}
backend images {
.host = "images.example.com";
.port = "80";
}
sub vcl_recv {
if (req.http.host ~ "^(www.)?example.com$") {
set req.http.host = "www.example.com";
set req.backend = www;
} elsif (req.http.host ~ "^images.example.com$") {
set req.backend = images;
} else {
error 404 "Unknown virtual host";
}
}
The following snippet demonstrates how to force a minimum TTL for
all documents. Note that this is not the same as setting the
default_ttl run-time parameter, as that only affects document for
which the backend did not specify a TTL:::
sub vcl_fetch {
if (obj.ttl < 120s) {
set obj.ttl = 120s;
}
}
下面这段代码用来强制缓存带cookies的内容：
sub vcl_recv {
33
www.linuxidc.com
if (req.request == "GET" && req.http.cookie) {
call(lookup);
}
}
sub vcl_fetch {
if (beresp.http.Set-Cookie) {
deliver;
}
}
下面代码的作用是利用squid的HTTP PURGE模式清理无法使用的目标。
acl purge {
"localhost";
"192.0.2.1"/24;
}
sub vcl_recv {
if (req.request == "PURGE") {
if (!client.ip ~ purge) {
error 405 "Not allowed.";
}
lookup;
}
}
sub vcl_hit {
if (req.request == "PURGE") {
set obj.ttl = 0s;
error 200 "Purged.";
}
}
sub vcl_miss {
if (req.request == "PURGE") {
error 404 "Not in cache.";
}
}
SEE ALSO
Varnishd（1）
HISTORY
The VCL language was developed by Poul-Henning Kamp in cooperation with Verdens
Gang AS, Linpro AS and Varnish Software. This manual page was written by Dag-Erling
Smørgrav and later edited by Poul-Henning Kamp and Per Buer.
34
www.linuxidc.com
COPYRIGHT
这个文档的版权和varnish自身的版本一样，请看LICENCE。
* Copyright (c) 2006 Verdens Gang AS
* Copyright (c) 2006-2008 Linpro AS
* Copyright (c) 2008-2010 Redpill Linpro AS
* Copyright (c) 2010 Varnish Software AS
●varnishadm
Control a running varnish instance(控制一个运行的varnish实例)
Author: Cecilie Fritzvold
Author: Per Buer
Date: 2010-05-31
Version: 0.2
Manual section: 1
SYNOPSIS（大纲）
Varnishadm [-t timeout] [-S secret_file] –T address:port [command[…]]
DESCRIPTION(描述)
Varnishadm实用工具建立一个CLI的连接。使用 –T 和 –S参数。
如果给出了要执行的命令，varnishadm会传输命令和返回运行的结果到标准输出。
如果没有给出要执行的命令，varnish会给你一个CLI接口，可以在CLI接口上输入
命令和返回结果。
OPTIONS
-t timeout \\等待一个操作完成的时间 单位秒
-S secret_file \\确定一个认证的安全文件
-T address：port \\连接到管理接口的地址和端口
有效的命令和参数被记录在 varnishd（1）手册里。一些大概的命令可以通过 help
命令获得。一些简要的参数可以通过 param.show命令获得。
EXIT STATUS
如果给予一个命令，如果它执行成功，退出状态为0，如果不成功，它的退出状态
非0.
EXAMPLES
一些执行varnishadm的方式：
varnishadm -T localhost:999 -S /var/db/secret vcl.use foo
echo vcl.use foo | varnishadm -T localhost:999 -S /var/db/secret
echo vcl.use foo | ssh vhost varnishadm -T localhost:999 -S /var/db/secret
SEE ALSO（参见）
varnishd（1）
HISTORY（历史）
Varnishadm工具和这个手册都是Cecilie Fritzvold编写的。由per buer 在2010年对
程序和手册进行了改写和升级。
COPYRIGHT（版权）
35
www.linuxidc.com
这个文档的版权和varnish自己的版权一样，请参阅LINENCE文档了解细节。
* Copyright (c) 2007-2008 Linpro AS
* Copyright (c) 2008-2010 Redpill Linpro AS
* Copyright (c) 2010 Varnish Software AS
●varnishd
HTTP accelerator daemon（HTTP加速进程）
Author: Dag-Erling Smørgrav
Author: Stig Sandbeck Mathisen
Author: Per Buer
Date: 2010-05-31
Version: 1.0
Manual section: 1
SYNOPSIS（大纲）
varnishd [-a address[:port]] [-b host[:port]] [-d] [-F] [-f config]
[-g group] [-h type[,options]] [-i identity] [-l shmlogsize] [-n name] [-P file] [-p
param=value] [-s type[,options]] [-T address[:port]] [-t ttl] [-u user] [-V] [-w
min[,max[,timeout]]]
DESCRIPTION（描述）
Varnishd 进程接收客户端的 HTTP 请求，然后把请求发送给后端服务器，缓存后端
服务器返回的内容，这样更好的满足以后相同的请求。
OPTIONS（选项）
-a address：[:port][,address]
监听指定的 IP 地址和端口的请求。地址可以是主机名（“localhost”），或者一
个 IPV4（“127.0.0.1”），和 IPV6（“[::1]”）,如果地址没有明确指定，varnishd 将监听所
有可用的 IPV4 和 IPV6 地址。如果端口没有指定，那么 varnishd 默认监听/etc/services
中的HTTP对应的端口。更多的端口和地址使用逗号分隔。
-b host[:port]
指定后端服务器的地址和端口，如果没有指定端口，默认的是8080.
-C 编译VCL代码成C语言，然后退出，指定VCL文件用-f参数。
-d 开启debug模式。主进程在前段启动，提供一个CLI界面用于标准输入和输出，
子进程必须通过CLI命令启动。如果结束主进程，那幺子进程也会结束。
-F 在前端运行。
-f config 使用指定的VCL配置文件代替系统默认的。参见VCL（7）
-g group 指定varnishd子进程使用的用户组。
-h type[,options] 指定hash算法。
-i identity 指定varnishd server的身份。
-l shmlogsize 指定shmlogfile的大小，单位可以使用‘k’和‘m’，默认是80M，
如果指定比8M小，那是不明智的。
-n name 为这个实例指定一个名字。
-P file 指定pidfile，用于保存PID信息。
36
www.linuxidc.com
-p param=value 设定指定参数的值，查看运行时的阐述列表
-S file 访问管理端口用到的安全认证文件的路径
-s type[,options] 使用指定的存储后端，查看存储列表获得支持的存储类型。
可以多次使用此选项指定不同的存储类型。
-T address[:port]
提供一个管理接口的地址和端口，通过管理接口查看管理命令。
-t ttl 指定最小的TTL给cache中的内容。这是一个捷径设置default_ttl run-time
选项。
-u user 指定运行varnishd子进程的用户。
-V 显示varnishd的版本，然后退出。
-w min[,max[,timeout]]
指定线程最小和最大空闲时间。这是一个设置thread_pool_min和
thread_pool_max、thread_pool_timeout的捷径。
如果只有一个值被指定，那么thread_pool_min和thread_pool_max都是用这
个值。Thread_poll_timeout会失效。
Hash Algorithms（hash算法）
以下hash算法是可用的：
Simple_list 一个简单的doubly-linked列表，不推荐生产环境应用。
Classic[,buckets] 一个标准的hash表，默认使用这个。
Critbit xxx very nice。
Storage Types（存储类型）
下面的存储类型是可用的：
malloc[,size]
存储目标分配给malloc（3）。
Size参数指定最大分配给varnishd的内存，size默认的单位是bytes。除非你指
定以下单位
K \\kibibytes
M \\membibytes
G \\gibibytes
T \\tebibytes
默认没有限制
File[,path[,size[,granularity]]]
把存储目标分配给一个文件，这个是默认的。
Path参数指定文件名和路径，或者path指定一个目录，varnishd会自己创建
文件。默认在/tmp目录。
Size参数指定最大分配给varnishd的内存，size默认的单位是bytes。除非你指
定以下单位
K \\kibibytes
M \\membibytes
G \\gibibytes
T \\tebibytes
%使用所属文件系统空闲空间的百分比。
默认是50%
如果文件已经存在，那么varnishd会缩减或者扩大backing文件到指定size。
37
www.linuxidc.com
注意：如果varnishd需要创建或者扩大一个文件，之前没有设置好空间的话，
可能会产生碎片，这样会影响性能。在分配文件之前使用dd命令来创建文件，这
样可以尽量减少碎片。
Granularity参数指定分配的间隔尺寸，默认的单位是字节，你可以自定义单位，
除了使用%。
默认的间隔尺寸就是虚拟内存相同。如果有太多的小文件，那么空间就会减少。
Management Interface（管理接口）
如果指定了-T选项，varnishd将提供一个命令行的管理接口在指定的地址和接
口。下面的命令是可以用的：
help [command]
显示可用命令列表
param.set param value
给参数设定值，参见参数列表
param.show [-l] [param]
显示运行时参数和值的列表
如果使用-l选项，列表会对每个参数做一些描述。
如果param被指定，那么只显示指定的param。
ping [timestamp]
Ping varnishd的进程，查看连接是否存活。
purge field operator argument [&& field operator argument […]]
匹配purge表达式的内容，马上失效。
purge.list
显示purge列表
所有在cache中的请求目标和purge.list相比，如果cache中的目标比匹配
的purge list旧，就会考虑清楚这些旧的目标，从后端服务器获取新的代替。
如果一个清洗表达式比cache中的目标就，那么就会从purge list中删除
它们。
purge.url regexp
使缓存中匹配表达式的URL马上失效。
quit
关闭varnish admin 的连接。
start