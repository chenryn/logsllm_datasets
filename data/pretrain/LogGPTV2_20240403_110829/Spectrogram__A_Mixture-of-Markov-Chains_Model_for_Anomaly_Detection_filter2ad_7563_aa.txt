title:Spectrogram: A Mixture-of-Markov-Chains Model for Anomaly Detection
in Web Traffic
author:Yingbo Song and
Angelos D. Keromytis and
Salvatore J. Stolfo
Spectrogram: A Mixture-of-Markov-Chains Model for Anomaly Detection in
Web Trafﬁc
Yingbo Song, Angelos D. Keromytis and Salvatore J. Stolfo
Department of Computer Science
Columbia University
New York, NY, 10027, USA
{yingbo,angelos,sal}@cs.columbia.edu
Abstract
We present Spectrogram, a machine learning based
statistical anomaly detection (AD) sensor for defense
against web-layer code-injection attacks. These attacks
include PHP ﬁle inclusion, SQL-injection and cross-site-
scripting; memory-layer exploits such as buffer overﬂows
are addressed as well. Statistical AD sensors offer the ad-
vantage of being driven by the data that is being protected
and not by malcode samples captured in the wild. While
models using higher order statistics can often improve ac-
curacy, trade-offs with false-positive rates and model ef-
ﬁciency remain a limiting usability factor. This paper
presents a new model and sensor framework that offers a fa-
vorable balance under this constraint and demonstrates im-
provement over some existing approaches. Spectrogram
is a network situated sensor that dynamically assembles
packets to reconstruct content ﬂows and learns to recog-
nize legitimate web-layer script input. We describe an efﬁ-
cient model for this task in the form of a mixture of Markov-
chains and derive the corresponding training algorithm.
Our evaluations show signiﬁcant detection results on an ar-
ray of real world web layer attacks, comparing favorably
against other AD approaches.
1 Introduction
Today’s internet environment is seeing usability out pace
security at unprecedented rates. Web-layer code-injections
target web applications and take advantage of programming
ﬂaws to manipulate the programs behavior, allowing the at-
tacker to manipulate code and data on the target. Whereas
traditional software exploits are often used to compromise
speciﬁc hosts or to launch worms, web-layer attacks operate
under a slightly different paradigm, as recent trends show.
While the server is victim of the code injection, the targets
often include the viewers of that server as well. Compro-
mised websites often discover embedded malcode silently
redirecting their viewers to malicious destinations where
they are exposed to further exploits. The most common vec-
tors for this class of attacks can be roughly categorized as:
cross-site-scripting (XSS), PHP local/remote ﬁle-inclusion
(L/RFI) and SQL-injection, all of which target port
80. Since memory-layer overﬂows against server processes
also pass through this port, a successful anomaly detection
framework for this protocol set would address a range of se-
curity concerns. In this paper, we present Spectrogram,
a machine learning based sensor designed to construct sta-
tistical models for acceptable port-80 input and detect at-
tacks as anomalies.
To put the problem into perspective, a recent SANS sur-
vey [26] found that attempted attacks on large web-hosting
farms in 2007 numbered in the range from hundreds of
thousands to millions each day. The same source reports
PHP L/RFI attacks to have peaked at 120,000 distinct
sources in that year with over 4000 unique vulnerabilities
discovered. This number is orders of magnitude higher
than those seen in shellcode based software exploitation
vectors. A Sophos 2008 security report [31] indicates that
one compromised website is discovered every ﬁve seconds,
or roughly 16,000 compromised sites per day. Many in-
stances can be attributed to automated web vulnerability
scanners and exploitation engines, which are now widely
used. Running Spectrogram on our university networks,
we discovered between one to ten thousand web-layer code-
injection attempts per day, from up to one thousand distinct
sources; typically iframe and SQL injections which try to
redirect users to drive-by-download sites and ﬁle-stealing
attempts. These attacks range from crude to rather sophis-
ticated – in one instance, we noticed an attempt to inject a
web-shell, written in 2000 lines of PHP, into our server.
Proper coding has been the best defense against code-
injection but relying on every programmer to demonstrate
the required level of scrutiny has never been a fully re-
liable security practice.
Intrusion detection sensors com-
plement this strategy by adding specialized layers of input
validation. IDS typically falls into two categories: detect-
ing known malcode or detecting legitimate input. Malcode-
signature detection solutions, such as Snort [29], are ef-
fective at ﬁltering known exploits but in a web environ-
ment where hundreds of thousands of unique attacks are
generated each day and polymorphism is standard practice,
the usefulness of signatures is limited. Recently, anomaly
detection approaches showed success by modeling accept-
able input using statistical models and detecting exploits
as anomalies. These approaches though, with some excep-
tions, have thus far been limited to network layer, protocol-
agnostic modeling which are constrained in scope and vul-
nerable to packet fragmentation and blending attacks. Un-
like shellcode and worm trafﬁc, web-layer injections use
higher level interpreted code and do not require corruption
of the server’s control ﬂow at the memory layer. Web layer
exploits are smaller, more dynamic and far less complex
than shellcode, making them both easier to write and to
disguise, by comparison through various obfuscation tech-
niques. Tools such as Metasploit’s eVade O’Matic Module
(VoMM) [21] and MPack [24] are seeing widespread use in
the obfuscation and automation of web-layer attacks. The
latter utilizes invisible iframe injections and was respon-
sible for the recent hijackings of thousands of domains.
As an AD sensor, Spectrogram allows the defender
to focus on learning models customized for the protected
server, where training data is available, rather than attempt-
ing to predict what the attacker is capable of sending. The
method with which to model legitimate content, however,
remains an open problem. N -gram modeling has been
a promising direction, as shown by the work of Wang et
al. [12] but for larger gram sizes, the problem quickly be-
comes ill-posed, which means that small deviations in the
training data can lead to large deviations in the performance.
This is intuitive given that the sample-space grows exponen-
tially, causing under-ﬁtting problems. Another sensor from
our lab, Anagram [12], compensates by trading some gen-
eralization ability with efﬁcient hashes of known legitimate
input. This approach is fast and efﬁcient but begins to suf-
fer when the input space becomes highly dynamic, as in the
web-layer context. This article presents the derivations for
a new machine learning based probabilistic model that of-
fers more ﬂexibility in the model structure that previous AD
approaches and offers a more favorable trade-off between
accuracy, generalization ability and speed. Our approach is
based on modeling higher order collocations with mixtures
of Markov-chains and is designed speciﬁcally to capture a
representation for not only content but also the structure of
script argument strings by learning a proper distribution on
the overlapping n-grams.
As a full sensor, Spectrogram offers the following bene-
ﬁts:
1. The introduction of a new Markov-chain factorization
that makes n-gram modeling with large gram sizes
tractable and algorithmically efﬁcient.
2. A model that captures both the higher order statistical
structure as well as content of legitimate requests.
3. A network situated posture to allow monitoring of lo-
cal and remote hosts as well as log ﬁles.
4. Utilization of dynamic packet re-assembly, operating
at the web layer to see what the target application sees.
5. Being HTTP protocol-aware, adding white-list ﬂexi-
bility and providing resistance against blending.
We evaluated Spectrogram against a range of web attacks
and demonstrate strong performance in detecting many real
world exploits. Spectrogram achieves a 97% detection rate
on all but one attack vector in unbiased datasets, which
use unique samples, and achieves false positive (FP) rates
at ﬁve orders of magnitude less when evaluated on the full
datasets. The only dataset that did not yield high detection
accuracy was the one which did not require actual malcode,
as explained in later sections.
Organization
This paper is structured as follows: section 2 describes
related work in this area. Section 3 describes the architec-
tural design of Spectrogram while section 4 describes the
derivations for the Markov mixture-model that lay at the
core of our classiﬁer. We describe our experiments and re-
sults in section 5 and present discussions on usability in sec-
tion 5.3, followed by concluding remarks in section 6.
2 Related Work
The main lines of research in network IDS include the
following: signature based detection which attempt to ex-
tract artifacts from malicious code, anomaly detection (AD)
which learns models for acceptable input and detect de-
viations, emulator based execution of the input to detect
code, dynamic vulnerability discovery and tainted data-ﬂow
analysis techniques which try to detect role-violations such
as when network trafﬁc reaches certain restricted areas of
memory. Hybrids of these approaches have also been inves-
tigated. Other passive defensive measures operate at the ap-
plication and operating systems layer and include address-
space and instruction-set randomization, stack and other
memory protection schemes. Spectrogram falls into net-
work layer AD category; by modeling legitimate content
on port 80, it detects both script and memory layer exploit
attempts. This section brieﬂy discusses some representa-
tive examples from this range of IDS and related security
frameworks.
Snort [29] is a well known, signature based network
IDS sensor that scans through packets and searches for
strings known to be associated with malcode. A great deal
of research has been focused on the problem of how to gen-
erate signatures automatically from available data. Kim et
al. [13] presented one approach, as did Singh et al. who
showed how to extract signatures from worm trafﬁc [28].
The Polygraph [22] engine presented by Newsome et al.
focused on discovering salient artifacts within different in-
stances of network based attacks. Other notable works in
this area include [18, 36, 35]. Hybrid approaches, as pre-
viously mentioned, include FLIPS [20] which ﬁlters trafﬁc
through an instrumented version of the protected applica-
tion – if an attack is conﬁrmed, the malcode is dissected
to dynamically generate a signature. Cui et al. introduced
ShieldGen [7] uses an instrumented host to discover vul-
nerabilities and automatically generate patches. Statistical
content anomaly detection approaches include the PayL
sensor [34] which models 1-gram distributions for normal
trafﬁc and uses the Mahalanobis distance as a metric to
score the normality of incoming packets. Anagram [12]
stores portions of legitimate trafﬁc in the form of N -grams
into an efﬁcient hash maps, allowing it to efﬁciently detect
unfamiliar N -grams in incoming trafﬁc.
Other approaches include treating all data as potentially
executable code and dynamically executing them. Abstract
Payload Execution (APE) [32] is a representative exam-
ple of this line of research. APE examines network trafﬁc
and treats packet content as machine instructions, aiming to
identify NOP-sleds which might be indicative of a shellcode
payload. Krugel et al. [17] detect polymorphic worms by
automatically learning a control ﬂow graph for worm bina-
ries. Anagnostakis et al. [1] proposed an architecture called
a “shadow honeypot” which is an instrumented replica of
the host that fully shares state with the production applica-
tion and receives copies of messages sent to the protected
application — messages that a network anomaly detection
component deems abnormal. If the shadow conﬁrms the at-
tack, it creates a network ﬁlter to drop future instances of
that attack as well as provides positive conﬁrmation for an
anomaly detector.
The usefulness of signature based defenses are under de-
bate. Recent work calls into question the ultimate utility
of exploit-based signatures [33]. Song et al. [30] recently
presented a study on the efﬁcacy of modern polymorphic
techniques and the potential impact on signature and sta-
tistical modeling based sensors. An alternative approach
based on vulnerability speciﬁc protection schemes have be
studied [5, 3, 11]. These methods along with dynamic taint
analysis [4, 23] explore techniques for defeating exploits
despite differences between instances of their encoded form
by attempting to recognize the vulnerabilities themselves.
Brumley et al. [3] supply an initial exploration of some
of the theoretical foundations of vulnerability-based signa-
tures. Such signatures help classify an entire set of ex-
ploit inputs rather than a particular instance. The previ-
ously mentioned approaches are mainly dedicated to defeat-
ing memory corruption/code-injection based attacks such as
buffer-overﬂow and heap-corruption. Web attacks, on the
other hand, exploit web-layer scripts and do not require cor-
ruptions of the server application’s control-ﬂow – at least
not at the memory layer.
On the offensive side of web-layer security, Metasploit
has introduced the eVade O’Matic Module (VoMM) [21]
which obfuscates web exploits. The features of this poly-
morphic engine include white-space randomization, string
obfuscation/encoding, variables and function randomiza-
tion and an array of other techniques. Van Gundy et al.
explored the design of a polymorphic PHP worm [10].
MPack [24], sold within the attacker underground, is an
automated browser exploitation tool which injects invisible
iframes into target servers which in turn silently redirects
viewers to exploit-laden websites that customize the attack
based on the user’s browser. These engines thwart signa-
ture based methods by injecting high degrees of obfusca-
tion into the exploit code. On the defensive side, Reis et
introduced BrowserShield [25] which extends the
al.
earlier work of Shield [33] to browser protection against ex-
ploits hidden in dynamic HTML. Wang et al. introduced a
content abstraction architecture for separation of execution
contexts in browsers. These solutions aim at protecting the
user from malicious servers. In the reversed role, of protect-
ing the web-server, the previously mentioned PayL [34] and
Anagram [12] sensors have been introduced. Spectator [19]
was introduced by Livshits et al. as a taint-analysis based
approach which tags scripts to prevent Javascript cross-site-
scripting worms. Kruegel et al. also explored a statistical
AD framework for web trafﬁc [15, 16] based on modeling
inputs. We elaborate on the similarities between our method
and the latter work in section 3.
3 Spectrogram
Spectrogram examines individual HTTP requests
and models the content and structure of script inputs. In
some ways it is analogous to an AD version of the Snort
sensor, focusing on port 80. This layout offers the ﬂexi-
bility needed to monitor both local and remote hosts, as
well as multiple hosts simultaneously. Since the data is
modeled at the application layer, Spectrogram uses dy-
namic packet re-assembly to reconstruct the content ﬂow as
it would be seen by web applications and, at the same time,
(a)
(b)
(c)
(d)
(e)
(f)
http://www.vulnerable.com/retrieve.php?paperID=302
http://www.vulnerable.com/retrieve.php?paperID={${include($bbb)}}{${exit()}}&bbb=http://www.haxx.org/exploit.txt?
http://www.vulnerable.com/retrieve.php?paperID=../../../../etc/passwd
http://www.vulnerable.com/retrieve.php?paperID=
http://www.vulnerable.com/retrieve.php?paperID=
http://www.vulnerable.com/retrieve.asp?paperID=’/**/union/**/select/**/0,concat(username,0x3a,password)/**/from/**/users/*
Figure 1. Exploitation vectors for scripts which do not properly handle input data. (a) A common
script. (b) Remote(cid:173)ﬁle inclusion attack, “exploit.txt” is actually another php script which hijacks the
execution of “retrieve.php.” (c) Local(cid:173)ﬁle inclusion, the attacker grabs the password ﬁle. (d) A victim,
tricked into clicking such a link, would see a fake alert re(cid:173)directing him to a phishing site. (e) iframe
injection, silent redirection. (f) SQL(cid:173)injection.
resist tcp-fragmentation attacks. An ofﬂine mode which op-
erates on packet-capture (libpcap) data and Apache log
ﬁles is also available. This section describes the nature of
the attacks we are concerned with and the mechanics of
the sensor. Details regarding the statistical model we use
for the classiﬁcation engine are described in the next sec-
tion.
In brief, Spectrogram learns to recognize short
strings accurately. Similar to the way Snort performs
matching with lexical grammars speciﬁed by human ex-
perts, Spectrogram automatically learns a probabilistic
representation for legitimate input from the training data.
3.1 Environment and Threat Model
Figure 2. Spectrogram is a network situated
sensor which operates at the web layer.
Web-layer code-injection attacks manipulate the execu-
tion ﬂow of web applications. The attacker takes advan-
tage of programming ﬂaws to inject his own code into
the execution context of the target and a successful attack
yields a range of results, from data extraction to code ex-
ecution. As a simple example, consider a script which re-
trieves PDF ﬁles from an archive and writes them to the user
while recording the transaction, a common feature of many
archival sites. Figure (1) shows some exploits which might
succeed if there is no data sanitization (visible parameters
in the URL indicate these are GET requests). “paperID”
is a variable name for this script and takes an integer input
value. Without input sanitization, the attacker may inject his
own PHP code into the execution context as shown in Fig-
ure (1)(b). This attack is known as a “remote ﬁle inclusion”
and take advantage of PHP’s remote library inclusion fea-
ture. The attacker may try to steal a ﬁle from the server, as
shown in Figure (1)(c), in a “local ﬁle inclusion” attack. If
the server echoes the request back in some unsafe way with
an error message such as “paperID: xxx not found” where
“xxx” reﬂects the input then cross-site-scripting (XSS) at-
tacks are possible, as shown in Figure (1)(d). This attack
tricks other viewers into visiting foreign malicious sites.
The XSS attack makes the injected code appear as if it orig-
inated from the victim’s site. Figure (1)(e) shows the same
XSS goal accomplished more stealthily with an iframe
injection. Typically, the foreign site would host additional
browser exploits to further compromise the viewers. Fi-
nally, Figure (1)(f) Shows a standard SQL-injection that at-
tempts to print the elements of a restricted table. If HTTP
POST requests were used as the submission method then
the XSS victim would never see the injected attack string in
the URL as it would remain hidden in the HTTP message
body. Memory-layer attacks against the server process it-
self, such as the IIS Media exploit and the Code Red
worm insert very large strings into the GET request ﬁeld
as well. By learning to recognize legitimate strings within
HTTP web requests Spectrogram attempts to simultane-
ously address many issues related web-application defense.
3.2 Architecture Design
Spectrogram was designed to be a passive IDS sen-
sor. By default, it will only issue alerts for suspected attacks
and does not attempt to intercept them. False positives (FP)
are a burden on all statistics based IDS solutions and while
Spectrogram does achieve very low FP rates, as this pa-
per demonstrates, we feel that is most effective when used
as a ﬁlter to sieve through potentially millions of web re-
quests (online or ofﬂine) in order to ﬁnd the small subset
of interesting attack trafﬁc to bring to a human expert’s at-