# Spectrogram: A Mixture-of-Markov-Chains Model for Anomaly Detection in Web Traffic

**Authors:**
Yingbo Song, Angelos D. Keromytis, and Salvatore J. Stolfo  
Department of Computer Science, Columbia University, New York, NY, 10027, USA  
Emails: {yingbo, angelos, sal}@cs.columbia.edu

## Abstract
We introduce Spectrogram, a machine learning-based statistical anomaly detection (AD) sensor designed to defend against web-layer code-injection attacks, including PHP file inclusion, SQL injection, and cross-site scripting, as well as memory-layer exploits like buffer overflows. Statistical AD sensors are driven by the data being protected rather than by malcode samples captured in the wild. While higher-order statistical models can improve accuracy, they often come with trade-offs in false-positive rates and model efficiency. This paper presents a new model and sensor framework that offers a favorable balance under these constraints and demonstrates significant improvements over existing approaches. Spectrogram is a network-situated sensor that dynamically assembles packets to reconstruct content flows and learns to recognize legitimate web-layer script input. We describe an efficient model for this task using a mixture of Markov chains and derive the corresponding training algorithm. Our evaluations show significant detection results on a variety of real-world web layer attacks, outperforming other AD approaches.

## 1. Introduction
In today's internet environment, usability is often prioritized over security, leading to an unprecedented increase in web-layer code-injections. These attacks target web applications, exploiting programming flaws to manipulate program behavior, allowing attackers to inject and execute malicious code. Unlike traditional software exploits, which compromise specific hosts or launch worms, web-layer attacks often affect not only the server but also its viewers. Compromised websites frequently embed malcode that silently redirects users to malicious destinations, exposing them to further exploits. Common vectors for these attacks include cross-site scripting (XSS), PHP local/remote file inclusion (L/RFI), and SQL injection, all targeting port 80. Additionally, memory-layer overflows against server processes also pass through this port, making a successful anomaly detection framework for this protocol set essential for addressing a range of security concerns.

Spectrogram, our proposed machine learning-based sensor, constructs statistical models for acceptable port-80 input and detects attacks as anomalies. To contextualize the problem, a recent SANS survey [26] found that large web-hosting farms experienced hundreds of thousands to millions of attack attempts daily in 2007. The same source reports that PHP L/RFI attacks peaked at 120,000 distinct sources, with over 4000 unique vulnerabilities discovered. This number is significantly higher than those seen in shellcode-based software exploitation vectors. A Sophos 2008 security report [31] indicates that one compromised website is discovered every five seconds, or approximately 16,000 compromised sites per day. Many of these instances can be attributed to automated web vulnerability scanners and exploitation engines, which are now widely used. Running Spectrogram on our university networks, we detected between one and ten thousand web-layer code-injection attempts per day from up to one thousand distinct sources, typically involving iframe and SQL injections aimed at redirecting users to drive-by-download sites and file-stealing attempts. These attacks range from crude to sophisticated, with one instance involving an attempt to inject a 2000-line PHP web-shell into our server.

While proper coding is the best defense against code-injection, it is not always reliable. Intrusion detection systems (IDS) complement this strategy by adding specialized layers of input validation. IDS typically fall into two categories: detecting known malcode or detecting legitimate input. Malcode-signature detection solutions, such as Snort [29], are effective at filtering known exploits but are limited in a web environment where hundreds of thousands of unique attacks are generated daily and polymorphism is standard practice. Recently, anomaly detection approaches have shown success by modeling acceptable input using statistical models and detecting exploits as anomalies. However, these approaches, with some exceptions, have been limited to network-layer, protocol-agnostic modeling, which is constrained in scope and vulnerable to packet fragmentation and blending attacks. Web-layer injections use higher-level interpreted code and do not require corruption of the server’s control flow at the memory layer, making them smaller, more dynamic, and easier to write and disguise. Tools like Metasploit’s eVade O’Matic Module (VoMM) [21] and MPack [24] are seeing widespread use in the obfuscation and automation of web-layer attacks.

As an AD sensor, Spectrogram focuses on learning models customized for the protected server, where training data is available, rather than predicting what the attacker might send. The method for modeling legitimate content remains an open problem. N-gram modeling has shown promise, as demonstrated by Wang et al. [12], but for larger n-gram sizes, the problem becomes ill-posed, leading to underfitting. Another sensor from our lab, Anagram [12], compensates by trading some generalization ability for efficient hashes of known legitimate input. This approach is fast and efficient but struggles with highly dynamic input spaces, as in the web-layer context. This article presents a new machine learning-based probabilistic model that offers more flexibility in the model structure and a better trade-off between accuracy, generalization, and speed. Our approach is based on modeling higher-order collocations with mixtures of Markov chains, capturing both the content and structure of script argument strings.

**Key Benefits of Spectrogram:**
1. A new Markov-chain factorization that makes n-gram modeling with large gram sizes tractable and algorithmically efficient.
2. A model that captures both the higher-order statistical structure and the content of legitimate requests.
3. A network-situated posture to monitor local and remote hosts as well as log files.
4. Utilization of dynamic packet re-assembly to see what the target application sees.
5. HTTP protocol-aware, adding white-list flexibility and providing resistance against blending.

We evaluated Spectrogram against a range of web attacks and demonstrated strong performance in detecting many real-world exploits. Spectrogram achieves a 97% detection rate on all but one attack vector in unbiased datasets, with false positive (FP) rates five orders of magnitude lower when evaluated on full datasets. The only dataset that did not yield high detection accuracy was one that did not require actual malcode.

**Organization:**
- Section 2: Related Work
- Section 3: Architectural Design of Spectrogram
- Section 4: Derivations for the Markov Mixture-Model
- Section 5: Experiments and Results
- Section 5.3: Usability Discussions
- Section 6: Concluding Remarks

## 2. Related Work
Research in network intrusion detection systems (IDS) includes signature-based detection, anomaly detection (AD), emulator-based execution, dynamic vulnerability discovery, and tainted data-flow analysis. Hybrid approaches and passive defensive measures at the application and operating system layers, such as address-space and instruction-set randomization, stack, and other memory protection schemes, have also been investigated. Spectrogram falls into the network-layer AD category, modeling legitimate content on port 80 to detect both script and memory-layer exploit attempts.

**Signature-Based Detection:**
- **Snort [29]:** A well-known, signature-based network IDS that scans packets for known malcode strings.
- **Kim et al. [13] and Singh et al. [28]:** Presented approaches for automatically generating signatures from available data.
- **Polygraph [22]:** Discovered salient artifacts within different instances of network-based attacks.
- **FLIPS [20]:** Filters traffic through an instrumented version of the protected application to generate signatures.
- **ShieldGen [7]:** Uses an instrumented host to discover vulnerabilities and generate patches.

**Statistical Content Anomaly Detection:**
- **PayL [34]:** Models 1-gram distributions for normal traffic and uses the Mahalanobis distance to score incoming packets.
- **Anagram [12]:** Stores portions of legitimate traffic in N-grams in efficient hash maps to detect unfamiliar N-grams in incoming traffic.

**Other Approaches:**
- **Abstract Payload Execution (APE) [32]:** Treats packet content as machine instructions to identify NOP-sleds indicative of shellcode payloads.
- **Krugel et al. [17]:** Detects polymorphic worms by learning a control flow graph for worm binaries.
- **Shadow Honeypot [1]:** An instrumented replica of the host that receives copies of messages sent to the protected application to confirm attacks and create network filters.

**Debate on Signature-Based Defenses:**
Recent work questions the utility of exploit-based signatures [33]. Song et al. [30] presented a study on the efficacy of modern polymorphic techniques and their impact on signature and statistical modeling-based sensors. Alternative approaches based on vulnerability-specific protection schemes [5, 3, 11] and dynamic taint analysis [4, 23] explore techniques to defeat exploits despite differences in their encoded forms.

**Web-Layer Security:**
On the offensive side, tools like Metasploit’s eVade O’Matic Module (VoMM) [21] and MPack [24] obfuscate and automate web-layer attacks. On the defensive side, Reis et al. introduced BrowserShield [25] for browser protection against hidden exploits, and Wang et al. introduced a content abstraction architecture for separation of execution contexts in browsers. PayL [34] and Anagram [12] are sensors designed to protect web-servers. Spectator [19] uses taint analysis to prevent JavaScript cross-site-scripting worms. Kruegel et al. [15, 16] explored a statistical AD framework for web traffic based on modeling inputs.

## 3. Spectrogram
Spectrogram examines individual HTTP requests and models the content and structure of script inputs, similar to an AD version of the Snort sensor, focusing on port 80. This layout provides the flexibility to monitor both local and remote hosts, as well as multiple hosts simultaneously. Spectrogram uses dynamic packet re-assembly to reconstruct content flows as seen by web applications and resists TCP-fragmentation attacks. An offline mode operates on packet-capture (libpcap) data and Apache log files.

### 3.1 Environment and Threat Model
Web-layer code-injection attacks manipulate the execution flow of web applications. Attackers exploit programming flaws to inject their own code into the target's execution context, leading to data extraction or code execution. For example, a script retrieving PDF files from an archive and writing them to the user while recording the transaction can be exploited if there is no data sanitization. Figure 1 shows various exploits, including remote file inclusion, local file inclusion, XSS, iframe injection, and SQL injection. Memory-layer attacks, such as the IIS Media exploit and the Code Red worm, also insert large strings into GET request fields. By learning to recognize legitimate strings within HTTP web requests, Spectrogram aims to address many web-application defense issues simultaneously.

### 3.2 Architecture Design
Spectrogram is designed as a passive IDS sensor, issuing alerts for suspected attacks without attempting to intercept them. False positives (FP) are a common issue for statistics-based IDS solutions. While Spectrogram achieves very low FP rates, it is most effective when used as a filter to sift through potentially millions of web requests (online or offline) to find the small subset of interesting attack traffic for human expert review.

## 4. Derivations for the Markov Mixture-Model
This section describes the statistical model used for the classification engine. Spectrogram learns a probabilistic representation for legitimate input from the training data, similar to how Snort performs matching with lexical grammars specified by human experts. The model is based on a mixture of Markov chains, capturing both the content and structure of script argument strings.

## 5. Experiments and Results
We evaluated Spectrogram against a range of web attacks and demonstrated strong performance in detecting many real-world exploits. Spectrogram achieves a 97% detection rate on all but one attack vector in unbiased datasets, with false positive (FP) rates five orders of magnitude lower when evaluated on full datasets. The only dataset that did not yield high detection accuracy was one that did not require actual malcode.

### 5.3 Usability Discussions
Spectrogram is designed to be flexible and efficient, suitable for deployment in various network environments. It can operate in both online and offline modes, making it a versatile tool for web application security.

## 6. Concluding Remarks
Spectrogram is a robust and efficient machine learning-based sensor for detecting web-layer code-injection attacks. By leveraging a mixture of Markov chains, it provides a balanced approach to accuracy, generalization, and speed, outperforming existing AD approaches. Future work will focus on further refining the model and expanding its capabilities to address emerging threats in web security.