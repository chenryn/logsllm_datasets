### JavaScript 语句执行与返回值

在 NodeJS 中，通过 `eval` 函数可以观察到不同语句块的返回值。例如：

```javascript
// Run in NodeJS
> eval(`{
    1;
    2;
    ; // empty
    x: break x; // empty
}`)
2
```

在这个例子中，最后两行语句都返回 `empty`，因此不覆盖既有值，整个语句块的执行结果是 `2`。

再比如：

```javascript
// Run in NodeJS
> eval(`{
    ; // empty
    1;
    ; // empty
}`)
1
```

这里，第一行代码返回 `empty`，第二行的结果值 `1` 覆盖了它；第三行的结果仍然是 `empty`，不会导致覆盖，因此整个语句的返回值是 `1`。

**注释**：参见 ECMAScript 规范中的 **Block -> RS: Evaluation** 和 **Module -> RS: Evaluation** 部分，特别是对 **UpdateEmpty**(s, sl) 的使用。

#### ES6 之前的规则

在 ES6 之前，某些语句（如 `if`、`do...while`、`while`、`for/for...in/for...of`、`with`、`switch` 和 `try`）的执行结果可能是 `empty` 或 `undefined`。例如：

```javascript
// Run in NodeJS 5.10+ (or NodeJS 4)
> eval(`{
    2;
    if (true);
}`)
undefined
```

由于 ES6 约定 `if` 语句不返回 `empty`，所以第一行返回的值 `2` 将被覆盖，最终显示为 `undefined`。而在 ES6 之前（例如 NodeJS 4），它将返回值 `2`。

**注释**：参考阅读《前端要给力之：语句在 JavaScript 中的值》。

### 引用类型的处理

引用类型不能直接作为最终求值的操作数。因此，在语句返回值的处理中，总是存在一个“执行表达式并取值”的操作，以确保不会有引用类型的数据作为语句的最终结果。例如：

```javascript
throw 1 / 0;
```

在这里，`exprRef` 作为表达式的计算结果是一个异常，于是 `? GetValue(exprRef)` 可以返回这个异常对象本身。

类似地，“表达式语句”直接返回该值：

```javascript
ExpressionStatement:
    Expression;

1. Let exprRef be the result of evaluating Expression.
2. Return ? GetValue(exprRef).
```

### 完成状态

ECMAScript 规范描述了引擎如何处理语句和表达式的返回值。所有语句与外部代码块之间的通信是通过“完成状态”进行的。外部代码块是否处理这个状态取决于其自身逻辑。

- 循环语句用于处理非标签化的 `continue` 与 `break`，并处理为 `normal`。
- 标签语句用于拦截那些“向外层返回”的 `continue` 和 `break`；如果能处理，则替换成 `normal`。
- 函数的内部过程 `[[Call]]` 检查“函数体执行”所返回的状态是否是 `return` 类型，如果是，则替换成 `normal`。

### 值的传递

在实际使用中，`1` 可以是一个其他表达式的执行结果，也可以是一个用户定义或创建的对象。只要它是 JavaScript 可以处理的结果（引用或值），就可以通过 `GetValue()` 得到真实数据，并放在 `throw` 类型的完成记录中，通过 `Parse Tree/Nodes` 中的 `ReturnIfAbrupt(x)` 向上传递，直到被 `try` 块捕获。

例如：

```javascript
try {
    throw 1;
} catch (e) {
    console.log(e);  // 1
}
```

或者，它也可能溢出到代码的最顶层，成为根级 `Parse Node`，也就是 `Script` 或 `Module` 类型的全局块的返回值，导致程序挂起。

### 知识回顾

在最近几讲中，我们讨论了从语句执行到函数执行，从引用类型到完成类型，从循环到迭代等内容，基本上涵盖了 JavaScript 执行过程的全部介绍。以下是回顾的重点内容：

1. 引用类型与值类型在 ECMAScript 和 JavaScript 中的不同含义。
2. 基本逻辑（顺序、分支与循环）在语句执行和函数执行中的不同实现。
3. 流程控制逻辑（中断、跳转和异步等）的实现方法及其要素。
4. JavaScript 执行语句和函数的过程，引擎层面从装载到执行的完整流程。
5. 语法解析让物理代码到标记（Token）、标识符、语句、表达式等抽象元素的过程。
6. 明确上述抽象元素的静态含义与动态含义之间的不同，明确语法元素与语义组件的实例化。

JavaScript 语言面向程序员开发，而 ECMAScript 是规范也是实现，提供了大量的语法或语义组件，用以规范和实现将来的 JavaScript。接下来，我们将正式介绍 JavaScript 的面向对象系统。