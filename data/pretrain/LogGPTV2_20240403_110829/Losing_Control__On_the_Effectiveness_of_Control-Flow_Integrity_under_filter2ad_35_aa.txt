title:Losing Control: On the Effectiveness of Control-Flow Integrity under
Stack Attacks
author:Mauro Conti and
Stephen Crane and
Lucas Davi and
Michael Franz and
Per Larsen and
Marco Negro and
Christopher Liebchen and
Mohaned Qunaibit and
Ahmad-Reza Sadeghi
Losing Control: On the Effectiveness of Control-Flow
Integrity under Stack Attacks
Mauro Conti∗, Stephen Crane‡, Lucas Davi†, Michael Franz‡, Per Larsen‡,
Christopher Liebchen†, Marco Negro†, Mohaned Qunaibit‡, Ahmad-Reza Sadeghi†
†CASED, Technische Universität Darmstadt, Germany
‡University of California, Irvine
∗University of Padua, Italy
Abstract
Adversaries exploit memory corruption vulnerabilities to hi-
jack a program’s control ﬂow and gain arbitrary code ex-
ecution. One promising mitigation, control-ﬂow integrity
(CFI), has been the subject of extensive research in the past
decade. One of the core ﬁndings is that adversaries can con-
struct Turing-complete code-reuse attacks against coarse-
grained CFI policies because they admit control ﬂows that
are not part of the original program. This insight led the
research community to focus on ﬁne-grained CFI implemen-
tations.
In this paper we show how to exploit heap-based vul-
nerabilities to control the stack contents including security-
critical values used to validate control-ﬂow transfers. Our
investigation shows that although program analysis and
compiler-based mitigations reduce stack-based vulnerabili-
ties, stack-based memory corruption remains an open prob-
lem. Using the Chromium web browser we demonstrate
real-world attacks against various CFI implementations:
1) against CFI implementations under Windows 32-bit by
exploiting unprotected context switches, and 2) against
state-of-the-art ﬁne-grained CFI implementations (IFCC
and VTV) in the two premier open-source compilers un-
der Unix-like operating systems. Both 32 and 64-bit x86
CFI checks are vulnerable to stack manipulation. Finally,
we provide an exploit technique against the latest shadow
stack implementation.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection
Keywords
stack corruption; control-ﬂow integrity; code-reuse attacks
1. MOTIVATION
Computer systems still run vast amounts of legacy soft-
ware written in unsafe languages such as C and C++. In the
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’15, October 12–16, 2015, Denver, Colorado, USA.
c(cid:13) 2015 ACM. ISBN 978-1-4503-3832-5/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2810103.2813671.
pursuit of eﬃciency and ﬂexibility, languages in the C fam-
ily eschew safety features such as automatic memory man-
agement, strong typing, and overﬂow detection. As a re-
sult, programming errors can lead to memory corruption
and memory disclosure vulnerabilities that are exploited by
attackers—often with severe consequences.
Although defenses such as stack canaries, data execution
prevention (DEP), and address space layout randomization
(ASLR) have raised the bar for attackers, they do not stop
sophisticated exploits against complex software.
Since DEP prevents code injection, code reuse has be-
come a key technique in modern exploits that bypass all
current mitigations. Code-reuse attacks repurpose legiti-
mate instruction sequences (called gadgets) that are present
in program memory to avoid the need for code injection.
Control-ﬂow integrity (CFI) [1, 3], code-pointer integrity
(CPI) [32], and code randomization [33] have emerged as
the most promising improvements over the exploit mitiga-
tions used today. CFI ensures that a program’s control ﬂow
follows a predeﬁned control-ﬂow graph, CPI protects code
pointers from being overwritten, and randomization hides
the code layout.
On one hand, all these approaches improve resilience
against code-reuse attacks. On the other hand, practical
implementations of these techniques must provide an ap-
propriate balance between eﬃciency, security, and compati-
bility with legacy software like browsers, document readers,
and web servers. The need to meet these constraints often
leads to compromises that enable attacks on implementa-
tions of CFI [12, 38, 55, 57, 58], ﬁne-grained code random-
ization [17, 43, 45], and CPI [21].
We focus on CFI implementations because CFI has been
the subject of intensive research in the past decade. More-
over, Microsoft and Google recently added CFI support to
the most popular C/C++ compilers [36, 50].
Goal and contributions. Our main objective concerns
the pitfalls that must be taken into account when imple-
menting ﬁne-grained CFI defenses. We show that failing to
do so leads to vulnerabilities that can be exploited to un-
dermine the formal security properties of CFI [2]. In partic-
ular, we discovered that CFI implementations in two major
compilers—indirect function call checks (IFCC) in LLVM,
and virtual table veriﬁcation (VTV) in GCC [50]—can be
bypassed in a realistic adversary model. In principle, both
CFI schemes provide strong protection, and even resist the
latest code-reuse attack techniques such as COOP (counter-
feit object-oriented programming) [40]. However, the im-
952plemented CFI checks contain weaknesses due to unantici-
pated interactions with optimizations applied by the com-
piler. Since both compilers are the foundation for many
open-source projects, our ﬁndings aﬀect a wide range of ap-
plications.
We also demonstrate a new attack that exploits unpro-
tected context switches (i.e., user-mode return addresses)
between user and kernel mode to bypass any CFI imple-
mentation for Windows on x86 32-bit that does not protect
these context switches. In general, return addresses can be
protected through a shadow stack [16], however, this applies
only to return addresses that are used by the application
and not to those which are used by kernel. By obtaining
control over multiple program threads we can create race
conditions to undermine control-ﬂow checks.
Our exploits contradict the widely held belief that stack
corruption is a solved problem. For instance, both IFCC
and VTV focus on heap-based attacks, like virtual-function
table manipulation, assuming that the program stack and
the return addresses it contains cannot be manipulated due
to randomization and stack canaries [50]. However, this as-
sumption is only valid for most stack-related vulnerabilities
such as the classic stack-based buﬀer overﬂow [4]. We re-
visit this assumption and demonstrate new attacks against
the stack using memory-corruption vulnerabilities that are
unrelated to the stack. We call our combined attacks Stack-
Deﬁler, which not only pose a severe threat to CFI imple-
mentations but also question the security of stack protec-
tions such as StackGuard [13] and StackArmor [11, 13] (see
Section 6.2.1).
In summary, our contributions are as follows:
• Attack on stack-spilled registers. We found that
compiler optimizations spill critical CFI pointers on
the stack. To conﬁrm that the weaknesses we identi-
ﬁed are exploitable in practice, we created a proof-of-
concept implementation to exploit this ﬂaw and bypass
Google’s ﬁne-grained forward-edge CFI implementa-
tion [50]. Both IFCC and VTV suﬀer from this weak-
ness on x86 (32 and 64-bit) systems. To mitigate our
attack, we also developed a patch for IFCC and eval-
uated its eﬃciency.
• Attack on user-mode return addresses on the
stack. We show how to bypass CFI by overwriting
the user-mode return address that is used by the ker-
nel to return from a system call. Our attack requires
no kernel privileges, and is within the threat model of
all CFI schemes, i.e., arbitrary read and write of data
memory in user mode. We present a proof-of-concept
implementation of our attack that uses multi-threading
to bypass CFI implementations on Windows not pro-
tecting the user-mode return address. This attack ap-
plies to operating systems where user-mode return ad-
dresses are pushed on the stack during a system call
(Windows 32-bit).
• Attack on shadow stacks. Shadow stacks are used
in CFI to protect return instructions. However, pro-
tecting shadow stacks is expensive [16, 39] unless they
are protected by hardware, which is not always avail-
able. We show that shadow stacks not protected
by hardware are vulnerable to memory disclosure,
and provide a proof-of-concept implementation of an
exploit against the latest shadow stack implementa-
tion [16].
• Attack the stack from the heap. We present
a new technique to leak the address of the program
stack allowing us to reliably alter stack content. While
there has been some eﬀort to protect the stack (Stack-
Guard [13] and StackArmor [11]), these defenses are
based on the implicit assumption that attacks on the
stack use stack-based vulnerabilities. We demonstrate
stack attacks that are based on heap vulnerabilities,
and hence, undermine this assumption. This has di-
rect impact on defenses that rely on the stack integrity.
2. CODE-REUSE ATTACKS AND CFI
Code-reuse attacks require the target program to contain
memory corruption vulnerabilities such as buﬀer overﬂows
that the adversary can exploit to hijack the control ﬂow and
redirect execution to existing code fragments already avail-
able in an application’s memory space. A prominent attack
technique is return-oriented programming (ROP), which is
based on maliciously combining and executing a chain of
short code sequences of an application [44]. The key ele-
ment is the return instruction which serves as connecting
link for the various code sequences.
One of the most promising defense technique to thwart
code-reuse attacks is control-ﬂow integrity [1, 3]. The main
idea of CFI is to compute an application’s control-ﬂow graph
(CFG) prior to execution, and then monitor its run-time be-
havior to ensure that the control ﬂow follows a legitimate
path in the CFG. The destinations of forward edges of the
CFG (indirect call and jump instructions) are computed dur-
ing a static analysis phase and enforced at runtime, e.g.,
through label checking. The same is possible for backward
edges (return instructions), however, static enforcement can
lead to an exploitable imprecision [9], because one function
can be called by a large number of functions. Therefore, CFI
utilizes a shadow stack [3, 16] which stores the benign return
targets securely on a separate stack and enforces that returns
must target the calling function1. Any deviation from the
CFG leads to the termination of the application. Validating
all indirect control-ﬂow transfers can have a substantial per-
formance impact that prevents widespread deployment. For
instance, when validating forward and backward edges, the
average run time overhead is 21% for the initially proposed
CFI [1] and 13.7% for state-of-the-art solutions (4.0% for
forward [50] and 9.7% for backward edges [16]).
Several CFI frameworks aim at reducing the run-time
overhead by enforcing coarse-grained policies. There is no
clear deﬁnition in the literature with respect to the terms
ﬁne and coarse-grained CFI policy. However, the general
understanding of a ﬁne-grained CFI policy is that only
branches intended by the programmer are allowed. In con-
trast, a coarse-grained CFI policy is more relaxed and might
allow indirect branches to target the start address of any
function. For instance ROPecker [12] and kBouncer [38]
leverage the branch history table of modern x86 proces-
sors to perform a CFI check on a short history of executed
branches. Zhang and Sekar [58] and Zhang et al. [57] ap-
plied coarse-grained CFI policies using binary rewriting to
1In practice this policy is relaxed by allowing the program to
return to any of the active call-sites for compatibility with
exception handling.
953protect COTS binaries. Relaxing the CFI policies (or in-
troducing imprecision to the CFG) has the downside of en-
abling the adversary to launch code-reuse attacks within the
enforced CFG. Consequently, coarse-grained variants of CFI
have been repeatedly bypassed [10, 18, 25, 26]. This impor-
tant insight has recently turned the research focus towards
ﬁne-grained CFI implementations [1, 16, 50]. Particularly,
we consider the implementations of CFI for the LLVM and
GCC compiler by Tice et al. [50], called indirect function call
check (IFCC) and virtual table veriﬁcation (VTV). IFCC
veriﬁes indirect calls by ensuring that the call destination is
within a so-called jump table which contains jump instruc-
tions to valid targets for the indirect call. The set of valid
call-targets is determined at compile time. VTV only pro-
tects virtual function calls. At compile time the compiler
derives the set of valid vTables and inserts checks at every
virtual call site. These checks verify that the virtual table
used for the function call is valid for the current object.
3. THREAT MODEL AND ASSUMPTIONS
Our threat model captures the capabilities of real-world
attacks, and is in line with the common threat model of
CFI [3], as well as with the prior oﬀensive work [20, 40, 43,
45].
Adversarial Capabilities.
• Memory read-write: The target program contains
a memory-corruption vulnerability that allows the ad-
versary to launch a run-time exploit.
In particular,
we focus on vulnerabilities that allow the adversary
to read (information disclosure) and write arbitrary
memory. Such vulnerabilities are highly likely as new
vulnerabilities are being constantly reported. Com-
mon examples are use-after-free errors [49].
• Adversarial Computation: The adversary can per-
form computations at run time. Many modern tar-
gets such as browsers, Flash, Silverlight, and document
viewers, as well as server-side applications and kernels
allow the adversary to perform run-time computations.
Real-world attacks on client-side applications typically
utilize a scripting environment to instantiate and per-
form a run-time exploit. Additionally, the adversary
can use the scripting engine to generate multiple exe-
cution threads.
Defensive Assumptions.
• Non-Executable Memory: The target system en-
forces data execution prevention (DEP) [35]. Oth-
erwise the adversary could directly manipulate code
(e.g., overwriting CFI checks), or inject new malicious
code into the data section of a program. The adversary
is therefore limited to code-reuse attacks.
• Randomization: The target system applies address
space layout randomization (ASLR).
• Shadow Stack: We do not have access to the im-
plementation of shadow stacks [1, 16]. Therefore, we
assume the presence of an adequate shadow stack im-
plementation.
4. STACKDEFILER
Our attacks are based on modifying data on the stack.
Hence, as a ﬁrst step, in the presence of ASLR, we must
disclose the address of the stack. We stress that we do not
rely on stack-based vulnerabilities to attack the stack. In-
stead, we used heap-based vulnerabilities in our exploits. We
observe that an adversary with the ability to disclose arbi-
trary memory can get a stack address by recursively disclos-
ing data pointers (see Section 5.2). Attacking values on the
stack is challenging, because (i) only certain functions will
write critical data to the stack, and (ii) the lifetime of values
on the stack is comparatively short, i.e., generally during the
execution of a function. Nevertheless, we are able to manip-
ulate targeted values on the stack.
In the following we give a high-level description of our
attacks. For this we discuss three diﬀerent stack-corruption
techniques that allow us to bypass the CFI implementations