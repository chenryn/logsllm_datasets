    int fly_to(struct plane *plane)
    {
      int tmp;
      int i;
      struct airport *airport;
      printf("which airport do you want to fly? ");
      tmp = input_choice();
      if ( tmp >= 0 && tmp airport = airports[tmp];
          airport = airports[tmp];
          for ( i = 0; i planes[i]; ++i )
            ;
          if ( i planes[i] = plane;
            tmp = printf("%s to %s!\n", plane, *plane->airport);
          }
          else
          {
            tmp = puts("Too much plane!");
          }
        }
        else
        {
          tmp = puts("No such airport!");
        }
      }
      return tmp;
    }
    /*
    	将plane->airport指向飞往的airport，在飞往的airport的数组中加入这个plane的指针。
    	这个函数的特点如下：
    		并没有将之前所在的airport->planes数组中将自身指针清除，所以理论上来说，可以同时存在于多个airport->planes数组中，可以达到无数次的free操作（虽然在这里没有用到，但是应该可以有其他思路）。
    */
    //sell_plane函数，offset = 0x0000000000000DD7
int sell_plane(struct plane *plane){
    	unlink_plane(plane);
    	return (plane->free_pointer)(plane);
    }
    /*
    	先将plane从链表中取下，再调用函数将chunk释放。
    	这里就是我们exploit策略的最后一步，将plane->free_pointer改写之后，就可以劫持执行流了。
    */
    //unlink_plane函数，offset = 0x0000000000000D97
    struct plane *unlink_plane(struct plane *plane)
    {
      struct plane *result;
      plane->ubk->ufd = plane->ufd;
      result = plane->ufd;
      if ( result )
      {
        result = plane->ufd;
        result->ubk = plane->ubk;
      }
      return result;
    }
    /*
    	这里的操作与libc中的unlink（较早版本的，因为这里并没有进行检查）类似，理论上来说可以达到同样的unlink效果，只是这里有更加简单的方式可以getshell，这里可以通过精心布置ufd与ubk参数，达到一次任意内存写的操作。
    */
## EXPLOIT!
在前面的分析中，已经将各个函数的操作以及相关特性进行了详尽的分析，接下来我们开始制定我们的exploit策略。我们接下来提到的策略只是我本人的思路，由于这道题的开放度比较高，漏洞点相对也比较多（在前面的注释中也一一提到了），因此是一定会存在其他的思路的。
### 1\. Leak Heap & Libc
想要泄露堆和libc的地址，首先我们需要像之前所提到的一样，使某个plane的company_name变量指向某个airport的头部：
我们先进行build_airport操作，获得一个airport结构体，不妨称他为airport1，此时airports[0]也已经初始化，并指向airport1->airport_name：
     heapbase  ------>+-----------------------+     
     airport1         |       prevsize        |     
                      +-----------------------+     
                      |         size          |     
                      +-----------------------+     
                      |     airport_name      |----+
                      +-----------------------+    |
                      |                       |    |
                      |        ......         |    |
                      |                       |    |
     airport1's------>+-----------------------+    |
     name string      |       prevsize        |    |
                      +-----------------------+    |
                      |         size          |    |
                      +-----------------------+company_name = companies[13]
，此时 plane1->company_name 与 &(airport1->airport_name)
在数值上相等，但是并没有依赖关系，即使之后有其他的改变，plane1->company_name也会一直指向当前时刻airport1->airport_name所在的地址：
    heapbase  ------>+-----------------------+                equivalent to            
     airport1         |       prevsize        |                companies[13]--------+   
                      +-----------------------+                                     |   
                      |         size          |          +-----------------------+  |   
                      +-----------------------++-----------------------+    |     |                       |  |   
     name string      |       prevsize        |    |     |                       |  |   
                      +-----------------------+    |     |                       |  |   
                      |         size          |    |     |        ......         |  |   
                      +-----------------------++-----------------------+                                     |   
                      |       prevsize        |                                     |   
                      +-----------------------+                                     |   
                      |         size          |                                     |   
                      +-----------------------+                                     |   
                      |                       |                                     |   
                      |        ......         |                                     |   
                      |                       |                                     |   
                      |                       |                                     |   
                      +-----------------------+   plane1->company_name=companies[13]|   
                      |     company_name      |+-----------------------+          
     airport1         |       prevsize        |          
                      +-----------------------+          
                      |         size          |          
                      +-----------------------++-----------------------+    |    |
     name string      |       prevsize        |    |    |
                      +-----------------------+    |    |
                      |         size          |    |    |
                      +-----------------------++-----------------------+         |
                      |       prevsize        |         |
                      +-----------------------+         |
                      |         size          |         |
                      +-----------------------+         |
                      |                       |         |
                      |        ......         |         |
                      |                       |         |
                      |                       |         |
                      +-----------------------+         |
                      |     company_name      |---------+
                      +-----------------------+          
                      |                       |          
                      |        ......         |          
                      |                       |          
                      |                       |          
                      +-----------------------+ 
接下来我们只需要重新build_airport，不妨称它为airport2，并将plane1进行fly_to操作，放入airport2的数组中，并对airport2进行list操作，就可以顺利打印出plane1->company_name所指向的地址，即airport1->airport_name的值，此时，这个值为airport1’s
name string的地址，这个地址虽然因为堆地址随机化而不固定，但是与heap基址的差值是恒定的，因此我们可以就此得到heap的基址。
进行了这一步操作之后，堆的结构如下：
    heapbase  ------>+-----------------------+          
     airport1         |       prevsize        |          
                      +-----------------------+          
                      |         size          |          
                      +-----------------------++-----------------------+    |    |
     name string      |       prevsize        |    |    |
                      +-----------------------+    |    |
                      |         size          |    |    |
                      +-----------------------++-----------------------+         |
                      |       prevsize        |         |
                      +-----------------------+         |
                      |         size          |         |
                      +-----------------------++-----------------------+    |     
                      |       prevsize        |    |     
                      +-----------------------+    |     
                      |         size          |    |     
                      +-----------------------+    |     
                   +--|     airport_name      |    |     
                   |  +-----------------------+    |     
                   |  |       planes[0]       |----+     
                   |  +-----------------------+          
                   |  |                       |          
                   |  |        ......         |          
                   |  |                       |          
                   |  |                       |          
                   |  +-----------------------+          
                   |  |       prevsize        |          
                   |  +-----------------------+          
                   |  |         size          |          
                   |  +-----------------------+          
                   |  |                       |          
                   |  |         name          |          
                   +->|                       |          
                      |                       |          
                      +-----------------------+
此时将airport1释放（sell_airport），则情形会变成这样：
    heapbase  ------>+-----------------------+          
     airport1         |       prevsize        |          
                      +-----------------------+          
                      |         size          |          
                      +-----------------------++-----------------------+    |    |
     name string      |       prevsize        |    |    |
                      +-----------------------+    |    |
                      |         size          |    |    |
                      +-----------------------++-----------------------+         |
                      |       prevsize        |         |
                      +-----------------------+         |
                      |         size          |         |
                      +-----------------------++-----------------------+    |     
                      |       prevsize        |    |     
                      +-----------------------+    |     
                      |         size          |    |     
                      +-----------------------+    |     
                   +--|     airport_name      |    |     
                   |  +-----------------------+    |     
                   |  |       planes[0]       |----+     
                   |  +-----------------------+          
                   |  |                       |          
                   |  |        ......         |          
                   |  |                       |          
                   |  |                       |          
                   |  +-----------------------+          
                   |  |       prevsize        |          
                   |  +-----------------------+          
                   |  |         size          |          
                   |  +-----------------------+          
                   |  |                       |          
                   |  |         name          |          
                   +->|                       |          
                      |                       |          
                      +-----------------------+
由于plane1->company_name的值不变，因此仍指向相同的位置，但是此时airport1->airport_name的位置已经变成了free
chunk中的双链表指针，指向main_arena+offset，这里offset仍然是一个固定的偏移量，此时对airport2再次进行list，我们就可以得到libc的基址。
题目已经提供了libc.so.6文件，我们理论上就可以知道libc中任何代码在此时的位置，只需要将代码在libc中的偏移量加上libc的基址就可以了。这里我们对one_gadget比较感兴趣，我们用one_gadget工具就可以得到一些信息：
    0x45216	execve("/bin/sh", rsp+0x30, environ)