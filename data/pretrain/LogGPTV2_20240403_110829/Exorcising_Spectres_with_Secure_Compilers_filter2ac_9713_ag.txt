### Blade and Compiler Security

Blade is a system that considers a source language without speculation and a target language with speculation, while preserving constant-time execution from the source to the target [64, Corollary 1]. This approach differs from the compilers we study, which block (classes of) speculative leaks regardless of whether the source program is constant-time. Blade's design relies on fine-grained barriers that apply to single instructions. Since these barriers are not natively supported by current CPUs, Blade’s prototype implements them using both `lfences` and masking. We believe our framework can be applied to reason about both Blade’s design and prototype, but this remains future work. The primary challenges include extending the target languages with fine-grained barriers and formalizing their optimal placement.

### Recent Work on Compiler Security

Recent studies [27, 36] have examined the security of compiler countermeasures by inspecting specific compiled code snippets and detected insecurities in Microsoft Visual C++ (MSVC). Our work extends and complements these results by providing the first rigorous characterization of the security guarantees of these countermeasures. Specifically, we prove the security of countermeasures for all source programs, rather than simply detecting insecurities in specific examples.

### Secure Compilation

RSSC and RSSP are instantiations of robustly-safe compilation [2–4, 51]. Similar to [3, 51], we relate source and target traces using a cross-language relation; however, our target language has a speculative semantics. While program behaviors in [3, 4] are sets of traces due to non-determinism, behaviors in our (deterministic) languages are single traces [39].

### Fully Abstract Compilation (FAC)

FAC is a widely used criterion for secure compilation [24, 34, 49, 50, 55, 58]. FAC compilers must preserve and reflect observational equivalence between source programs and their compiled counterparts [1, 50]. Although FAC has been used to reason about microarchitectural side-effects [14], it is unclear whether it is well-suited for speculative leaks, as it would require explicitly modeling microarchitectural components that are modified speculatively (like caches).

### Constant-Time-Preserving Compilation (CTPC)

CTPC has been used to show that compilers preserve constant-time [7, 10, 12]. Like RSNIP, proving CTPC requires demonstrating the preservation of a hypersafety property, which is more challenging than preserving safety properties like RSS. Additionally, CTPC has been designed for whole programs only (like SNI) and cannot be used to reason about countermeasures like SLH that do not preserve constant-time.

### Verifying Hypersafety as Safety

Verifying if a program satisfies a 2-hypersafety property [20] (like RSNI) is notoriously challenging. Approaches for this include taint-tracking [6, 56], which over-approximates the 2-hypersafety property with a safety property, secure multi-execution [22], which runs the code twice in parallel, and self-composition [11, 61], which runs the code twice sequentially. Our criteria leverage taint-tracking (RSS); we leave the investigation of criteria based on other approaches for future work.

### Conclusion

This paper presents a comprehensive and precise characterization of the security guarantees of compiler countermeasures against Spectre v1, along with the first proofs of security for such countermeasures. It introduces SS, a safety property implying the absence of (classes of) speculative leaks. SS provides precise security guarantees, as it can be instantiated to over-approximate both strong [27] and weak [28] SNI, and it simplifies secure compilation proofs. As a basis for security proofs, the paper formalizes secure compilation criteria capturing the robust preservation of SS and SNI.

### Acknowledgements

This work was partially supported by the German Federal Ministry of Education and Research (BMBF) through funding for the CISPA-Stanford Center for Cybersecurity (FKZ: 13N1S0762), by the Community of Madrid under the project S2018/TCS-4339 BLOQUES and the Atracción de Talento Investigador grant 2018-T2/TIC-11732A, by the Spanish Ministry of Science, Innovation, and University under the project RTI2018-102043-B-I00 SCUM and the Juan de la Cierva-Formación grant FJC2018-036513-I, and by a gift from Intel Corporation.

### References

[1] Martín Abadi. 1998. Protection in Programming-Language Translations. In Proceedings of the 25th International Colloquium on Automata, Languages and Programming (ICALP). Springer.
...
[53] Filip Pizlo. 2018. What Spectre and Meltdown mean for WebKit. https://webkit.org/blog/8048/what-spectre-and-meltdown-mean-for-webkit/.

---

This revised version aims to improve clarity, coherence, and professionalism, ensuring that the content is well-structured and easy to follow.