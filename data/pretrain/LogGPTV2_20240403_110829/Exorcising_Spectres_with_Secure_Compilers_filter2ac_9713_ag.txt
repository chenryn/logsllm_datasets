Blade consider a source language without speculation and a tar-
get language with speculation and it preserves constant-time from
source to target [64, Corollary 1]. This is different from the compil-
ers we study, which block (classes of) speculative leaks regardless
of whether the source program is constant-time. Blade’s design
relies on fine-grained barriers whose scope are single instructions.
Since these barriers are not available in current CPUs, Blade’s pro-
totype realises them via both lfences and masking. We believe that
our framework can be applied to reason about both Blade’s design
and prototype, but we leave this for future work. The challenges
are extending the target languages with fine-grained barriers and
formalising the optimal placement of those barriers.
Recent work [27, 36] studied the security of compiler counter-
measures by inspecting specific compiled code snippets and de-
tected insecurities in MSVC. Our work extends and complements
these results by providing the first rigorous characterization of
these countermeasures’ security guarantees. In particular, we prove
the security of countermeasures for all source programs, rather
than simply detecting insecurities on specific examples.
Secure compilation RSSC and RSSP are instantiations of robustly-
safe compilation [2–4, 51]. Like [3, 51], we relate source and target
traces using a cross-language relation; however, our target language
has a speculative semantics. While program behaviors are sets of
traces due to non-determinism in [3, 4], behaviors are single traces
for our (deterministic) languages [39].
Fully abstract compilation (FAC) is a widely used secure compila-
tion criterion [24, 34, 49, 50, 55, 58]. FAC compilers must preserve
(and reflect) observational equivalence of source programs in their
compiled counterparts [1, 50]. While FAC has been used to reason
about microarchitectural side-effects [14], it is unclear whether
FAC is well-suited for speculative leaks as it would require explic-
itly modelling microarchitectural components that are modified
speculatively (like caches).
Constant-time-preserving compilation (CTPC) has been used to
show that compilers preserve constant-time [7, 10, 12]. Similarly
to RSNIP, proving CTPC requires proving the preservation of a
hypersafety property, which is more challenging than preserving
safety properties like RSS. Additionally, CTPC has been devised for
whole programs only (like SNI), and it cannot be used to reason
about countermeasures like SLH that do not preserve constant-time.
Verifying Hypersafety as Safety Verifying if a program satisfies a
2-hypersafety property [20] (like RSNI) is notoriously challeng-
ing. Approaches for this include taint-tracking [6, 56] (which over-
approximates the 2-hypersafety property with a safety property),
secure multi-execution [22] (which runs the code twice in par-
allel) and self-composition [11, 61] (which runs the code twice
sequentially). Our criteria leverage taint-tracking (RSS); we leave
investigating criteria based on the other approaches as future work.
8 CONCLUSION
The paper presented a comprehensive and precise characterization
of the security guarantees of compiler countermeasures against
Spectre v1, as well as the first proofs of security for such counter-
measures. For this, it introduced SS, a safety property implying the
absence of (classes of) speculative leaks. SS provides precise secu-
rity guarantees in that it can be instantiated to over-approximate
both strong [27] and weak [28] SNI, and it is tailored towards simpli-
fying secure compilation proofs. As a basis for security proofs, the
paper formalised secure compilation criteria capturing the robust
preservation of SS and SNI.
Acknowledgements. This work was partially supported by the German Fed-
eral Ministry of Education and Research (BMBF) through funding for the
CISPA-Stanford Center for Cybersecurity (FKZ: 13N1S0762), by the Commu-
nity of Madrid under the project S2018/TCS-4339 BLOQUES and the Atrac-
ción de Talento Investigador grant 2018-T2/TIC-11732A, by the Spanish
Ministry of Science, Innovation, and University under the project RTI2018-
102043-B-I00 SCUM and the Juan de la Cierva-Formación grant FJC2018-
036513-I, and by a gift from Intel Corporation.
Session 2B: Formal Analysis and Verification CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea457REFERENCES
[1] Martín Abadi. 1998. Protection in Programming-Language Translations. In
Proceedings of the 25th International Colloqium on Automata, Languages and
Programming (ICALP). Springer.
[2] Carmine Abate, Arthur Azevedo de Amorim, Roberto Blanco, Ana Nora Evans,
Guglielmo Fachini, Catalin Hritcu, Théo Laurent, Benjamin C. Pierce, Marco
Stronati, and Andrew Tolmach. 2018. When Good Components Go Bad: Formally
Secure Compilation Despite Dynamic Compromise. In Proceedings of the 2018
ACM SIGSAC Conference on Computer and Communications Security (CCS). ACM.
[3] Carmine Abate, Roberto Blanco, Stefan Ciobaca, Alexandre Durier, Deepak Garg,
Cătălin Hriţcu, Marco Patrignani, , Eric Tanter, and Jérémy Thibault. 2020. Trace-
Relating Compiler Correctness and Secure Compilation. In Proceedings of the
29th European Symposium on Programming (ESOP). Springer.
[4] Carmine Abate, Roberto Blanco, Deepak Garg, Cătălin Hriţcu, Marco Patrignani,
and Jérémy Thibault. 2019. Journey Beyond Full Abstraction: Exploring Robust
Property Preservation for Secure Compilation. In Proceedings of the 32nd IEEE
Computer Security Foundations Symposium (CSF). IEEE.
[5] Advanced Micro Devices, Inc. 2018. Software techniques for managing specu-
lation on AMD processors. https://developer.amd.com/wp-content/resources/
90343-B_SotwareTechniquesforManagingSpeculation_WP_7-18Update_FNL.
pdf.
[6] Peter Aldous and Matthew Might. 2015. Static Analysis of Non-interference
in Expressive Low-Level Languages. In Proceedings of the 22nd International
Symposium on Static Analysis (SAS). Springer.
[7] José Bacelar Almeida, Manuel Barbosa, Gilles Barthe, Arthur Blot, Benjamin
Grégoire, Vincent Laporte, Tiago Oliveira, Hugo Pacheco, Benedikt Schmidt,
and Pierre-Yves Strub. 2017. Jasmin: High-Assurance and High-Speed Cryp-
tography. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and
Communications Security. ACM.
[8] José Bacelar Almeida, Manuel Barbosa, Gilles Barthe, François Dupressoir, and
Michael Emmi. 2016. Verifying constant-time implementations. In Proceedings of
the 25th USENIX Security Symposium (USENIX Security). USENIX Association.
[9] Musard Balliu, Mads Dam, and Roberto Guanciale. 2020. InSpectre: Breaking
and Fixing Microarchitectural Vulnerabilities by Formal Analysis. In Proceedings
of the 2020 ACM SIGSAC Conference on Computer and Communications Security
(CCS). ACM.
[10] Gilles Barthe, Sandrine Blazy, Benjamin Grégoire, Rémi Hutin, Vincent Laporte,
David Pichardie, and Alix Trieu. 2020. Formal Verification of a Constant-Time
Preserving C Compiler. Proceedings of the ACM on Programming Languages 4,
POPL (2020).
[11] Gilles Barthe, Pedro R. D’Argenio, and Tamara Rezk. 2011. Secure information
flow by self-composition. Mathematical Structures in Computer Science 21, 6
(2011).
[12] Gilles Barthe, Benjamin Grégoire, and Vincent Laporte. 2018. Secure Compilation
of Side-Channel Countermeasures: The Case of Cryptographic Constant-Time.
In Proceedings of the 31st IEEE Computer Security Foundations Symposium (CSF).
IEEE.
[13] William J. Bowman and Amal Ahmed. 2015. Noninterference for free. In Proceed-
ings of the 20th ACM SIGPLAN International Conference on Functional Program-
ming (ICFP). ACM.
[14] Matteo Busi, Job Noorman, Jo Van Bulck, Letterio Galletta, Pierpaolo Degano,
Jan Tobias Mühlberg, and Frank Piessens. 2020. Provably Secure Isolation for
Interruptible Enclaved Execution on Small Microprocessors. In Proceedings of the
33rd IEEE Computer Security Foundations Symposium (CSF). IEEE.
[15] Claudio Canella, Jo Van Bulck, Michael Schwarz, Moritz Lipp, Benjamin von
Berg, Philipp Ortner, Frank Piessens, Dmitry Evtyushkin, and Daniel Gruss.
2019. A Systematic Evaluation of Transient Execution Attacks and Defenses. In
Proceedings of the 28th USENIX Security Symposium (USENIX Security). USENIX
Association.
[16] Chandler Carruth. 2018. Speculative Load Hardening. https://llvm.org/docs/
SpeculativeLoadHardening.html.
[17] Sunjay Cauligi, Craig Disselkoen, Klaus v Gleissenthall, Dean M. Tullsen, Deian
Stefan, Tamara Rezk, and Gilles Barthe. 2020. Constant-Time Foundations for the
New Spectre Era. In Proceedings of the 41st ACM SIGPLAN International Conference
on Programming Language Design and Implementation (PLDI). ACM.
[18] Kevin Cheang, Cameron Rasmussen, Sanjit A. Seshia, and Pramod Subramanyan.
2019. A Formal Approach to Secure Speculation. In Proceedings of the 32nd IEEE
Computer Security Foundations Symposium (CSF). IEEE.
[19] Guoxing Chen, Sanchuan Chen, Yuan Xiao, Yinqian Zhang, Zhiqiang Lin, and
Ten H. Lai. 2019. Stealing Intel Secrets from SGX Enclaves via Speculative
Execution. In Proceedings of the 4th IEEE European Symposium on Security and
Privacy (EuroS&P). IEEE.
[20] Michael R. Clarkson and Fred B. Schneider. 2010. Hyperproperties. Journal of
Computer Security 18, 6 (2010).
[21] Dominique Devriese, Marco Patrignani, and Frank Piessens. 2016. Fully-Abstract
Compilation by Approximate Back-Translation. In Proceedings of the 43rd Annual
ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages
[32] Intel. 2018.
Retpoline: A Branch Target Injection Mitigation.
https:
(POPL). ACM.
[22] Dominique Devriese and Frank Piessens. 2010. Noninterference through Secure
Multi-execution. In Proceedings of the 31st IEEE Symposium on Security and Privacy
(S&P). IEEE.
[23] Cédric Fournet, Andrew D. Gordon, and Sergio Maffeis. 2007. A Type Discipline
for Authorization Policies. ACM Transactions on Programming Languages and
Systems 29, 5 (2007).
[24] Cedric Fournet, Nikhil Swamy, Juan Chen, Pierre-Evariste Dagand, Pierre-Yves
Strub, and Benjamin Livshits. 2013. Fully Abstract Compilation to JavaScript. In
Proceedings of the 40th Annual ACM SIGPLAN-SIGACT Symposium on Principles
of Programming Languages (POPL). ACM.
[25] Andrew D. Gordon and Alan Jeffrey. 2003. Authenticity by Typing for Security
Protocols. Journal of Computer Security 11, 4 (2003).
[26] Daniel Gruss, Clémentine Maurice, Anders Fogh, Moritz Lipp, and Stefan Man-
gard. 2016. Prefetch Side-Channel Attacks: Bypassing SMAP and Kernel ASLR. In
Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications
Security (CCS). ACM.
[27] Marco Guarnieri, Boris Köpf, José F. Morales, Jan Reineke, and Andrés Sánchez.
2020. Spectector: Principled detection of speculative information flows. In
Proceedings of the 41st IEEE Symposium on Security and Privacy (S&P). IEEE.
[28] Marco Guarnieri, Boris Köpf, Jan Reineke, and Pepe Vila. 2021. Hardware/soft-
ware contracts for secure speculation. In Proceedings of the 42nd IEEE Symposium
on Security and Privacy (S&P). IEEE.
[29] Norm Hardy. 1988. The Confused Deputy: (Or Why Capabilities Might Have
Been Invented). SIGOPS Operating Systems Review 22, 4 (1988).
[30] Jann Horn. 2019. Google Project zero - Issue 1528: speculative execution, variant
4: speculative store bypass. https://bugs.chromium.org/p/project-zero/issues/
detail?id=1528.
[31] Intel. 2018.
Intel Analysis of Speculative Execution Side Chan-
nels.
https://software.intel.com/sites/default/files/managed/b9/f9/
336983-Intel-Analysis-of-Speculative-Execution-Side-Channels-White-Paper.
pdf.
//software.intel.com/security-software-guidance/api-app/sites/default/files/
Retpoline-A-Branch-Target-Injection-Mitigation.pdf.
Issues.
[33] Intel. 2018.
Using Intel Compilers to Mitigate Speculative Execu-
tion Side-Channel
https://software.intel.com/en-us/articles/
using-intel-compilers-to-mitigate-speculative-execution-side-channel-issues.
[34] Yannis Juglaret, Cătălin Hriţcu, Arthur Azevedo de Amorim, Boris Eng, and
Benjamin C. Pierce. 2016. Beyond Good and Evil: Formalizing the Security
Guarantees of Compartmentalizing Compilation. In Proceedings of the 29th IEEE
Computer Security Foundations Symposium (CSF). IEEE.
[35] Vladimir Kiriansky and Carl Waldspurger. 2018. Speculative Buffer Overflows:
Attacks and Defenses. CoRR abs/1807.03757 (2018).
//www.paulkocher.com/doc/MicrosoftCompilerSpectreMitigation.html.
[36] Paul Kocher. 2018. Spectre Mitigations in Microsoft’s C/C++ Compiler. https:
[37] Paul Kocher, Jann Horn, Anders Fogh, Daniel Genkin, Daniel Gruss, Werner Haas,
Mike Hamburg, Moritz Lipp, Stefan Mangard, Thomas Prescher, Michael Schwarz,
and Yuval Yarom. 2019. Spectre Attacks: Exploiting Speculative Execution. In
Proceedings of the 40th IEEE Symposium on Security and Privacy (S&P). IEEE.
[38] Esmaeil Mohammadian Koruyeh, Khaled N. Khasawneh, Chengyu Song, and
Nael Abu-Ghazaleh. 2018. Spectre Returns! Speculation Attacks using the Return
Stack Buffer. In Proceedings of the 12th USENIX Workshop on Offensive Technologies
(WOOT). USENIX Association.
[39] Xavier Leroy. 2009. A Formally Verified Compiler Back-end. Journal of Automated
Reasoning 43, 4 (2009), 363–446. http://dx.doi.org/10.1007/s10817-009-9155-4
[40] Sergio Maffeis, Martín Abadi, Cédric Fournet, and Andrew D. Gordon. 2008.
Code-Carrying Authorization. In Proceedings of the 13th European Symposium on
Research in Computer Security (ESORICS). Springer.
[41] Giorgi Maisuradze and Christian Rossow. 2018. Ret2Spec: Speculative Execution
Using Return Stack Buffers. In Proceedings of the 25th ACM SIGSAC Conference
on Computer and Communications Security (CCS ’18). ACM.
[42] Andrea Mambretti, Matthias Neugschwandtner, Alessandro Sorniotti, Engin
Kirda, William Robertson, and Anil Kurmus. 2018. Let’s Not Speculate: Discov-
ering and Analyzing Speculative Execution Attacks. In IBM Technical Report
RZ3933.
[43] Ross Mcilroy, Jaroslav Sevcik, Tobias Tebbi, Ben L. Titzer, and Toon Verwaest.
2019. Spectre is here to stay: An analysis of side-channels and speculative
execution. CoRR abs/1902.05178 (2019).
[44] David Molnar, Matt Piotrowski, David Schultz, and David Wagner. 2005. The
program counter security model: Automatic detection and removal of control-
flow side channel attacks. In Proceedings of the 8th International Conference on
Information Security and Cryptology (ICISC). Springer.
[45] Max S. New, William J. Bowman, and Amal Ahmed. 2016. Fully Abstract Com-
pilation Via Universal Embedding. In Proceedings of the 21st ACM SIGPLAN
International Conference on Functional Programming (ICFP). ACM.
[46] Oleksii Oleksenko, Bohdan Trach, Tobias Reiher, Mark Silberstein, and Christof
Fetzer. 2018. You Shall Not Bypass: Employing data dependencies to prevent
Session 2B: Formal Analysis and Verification CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea458[48] Marco Patrignani. 2020. Why Should Anyone use Colours? or, Syntax Highlight-
ing Beyond Code Snippets. CoRR (2020).
[49] Marco Patrignani, Pieter Agten, Raoul Strackx, Bart Jacobs, Dave Clarke, and
Frank Piessens. 2015. Secure compilation to protected module architectures.
ACM Transactions on Programming Languages and Systems 37, 2 (2015).
[50] Marco Patrignani, Amal Ahmed, and Dave Clarke. 2019. Formal Approaches to
Secure Compilation A Survey of Fully Abstract Compilation and Related Work.
Comput. Surveys 51, 6 (2019).
[51] Marco Patrignani and Deepak Garg. 2021. Robustly Safe Compilation, an Efficient
Form of Secure Compilation. ACM Transactions on Programming Languages and
Systems 43, 1 (2021).
[52] Marco Patrignani and Marco Guarnieri. 2020. Exorcising Spectres with Secure
Compilers. CoRR abs/1910.08607 (2020).
org/blog/8048/what-spectre-and-meltdown-mean-for-webkit/.
[53] Filip Pizlo. 2018. What Spectre and Meltdown mean for WebKit. https://webkit.
[47] Andrew Pardoe. 2018. Spectre mitigations in MSVC. https://blogs.msdn.microsoft.