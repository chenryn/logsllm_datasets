we have updated these devices to diﬀerent versions of An-
droid. We have updated Galaxy S2, Nexus 5 and Nexus 5X
and Galaxy S7 Edge to Android 4.1.2 (API Level 16), 5.1.1
(API Level 22), 6.0.1 (API Level 23), 6.0.1 (API Level 23)
respectively. As expected, we were able to perform our at-
tack on all test devices, regardless of what version of Android
they had running. Note that we have not used any unoﬃcial
Android distribution, ROM or side-loaded any patches. All
the test devices use their stock Android ROMs without any
modiﬁcation. We present the detailed speciﬁcations of the
devices in Table 1.
Since all Android devices employ a type of battery op-
timization, we wanted to make sure that our experiments
would not be aﬀected by this in any way. Therefore, to
ensure optimal performance, all the experiments were per-
formed while the test devices were fully charged and con-
nected to a power outlet. Furthermore, Android monitors
the data from the temperature sensors and adjusts the sys-
tem performance to prevent overheating. To prevent any
slowdown due to high temperature, we have placed the test
devices apart from each other made sure that they are prop-
erly ventilated.
5.2 Test App: Benchmarks
In order to quantify the level of degradation caused by the
attack, we have used benchmarks apps, performing various
tests. With these tests, we have measured the performance
of the devices performing high-level operations such as 3D
processing, 2D image processing, streaming as well as low-
level tests like ALU computations, memory read and write
access time, bandwidth and latency.
To prevent any bias and provide a fair comparison, we
have used the top downloaded benchmarks in the Google
Play store. In total, we have used 11 benchmark apps. Other
than the CPU Prime Benchmark, all of these benchmarks
has numerous available tests to score diﬀerent aspects of
the device. For instance, the AnTuTu Benchmark performs
3D computation, CPU, RAM and UX (User Experience)
Figure 1: Histograms of regular and Exotic Atomic Operation of the test devices, Galaxy S2, Nexus 5, Nexus
5x and Galaxy S7 Edge respectively. X-axis represents the computation time while the Y-axis shows the
number of samples obtained at each point. Also, blue and red bars represent regular and exotic atomic
operations respectively.
Figure 2: Attacker app interface
Table 1: Speciﬁcations of the test devices used in experiments
Galaxy S2
Nexus 5
Nexus 5X
Galaxy S7 Edge
Android Version
API Level
SoC
ARM Core
Number of Cores
CPU Clock (GHz)
Big-Little?
32/64-bit?
ARM version
4.1.2
16
Exynos 4
Cortex-A9
2
1.2
no
32
v7-A
5.1.1
22
6.0.1
23
6.0.1
23
Snapdragon 800
Snapdragon 808
Snapdragon 820
Krait 400
4xCortex-A53 & 2xCortex-A57
4
2.26
no
32
v7
4+2
1.4 & 1.8
yes
64
v8-A
4x Kryo
2+2
1.6 & 2.15
yes*
64
v8-A
tests to measure diﬀerent aspects of the device performance,
providing a separate score for each category. Including these
tests, we have monitored the QoS strength of our app with
45 diﬀerent tasks. Note that while some of the benchmark
apps like 3DMark, GeekBench, GFXBench, and PCMark
were not available for the older Galaxy S2 running Android
4.1.2, rest was available to all of the tested devices.
Complete list of benchmarks that we have used is as fol-
lows; 3DMark (Ice Storm Unlimited, Slingshot Unlimited),
AnTuTu Benchmark (3D, CPU, RAM, UX), Benchmark&Tu-
ning, CF-Bench (Java, Native, Overall), CPU Prime Bench-
mark, Geekbench 4, GFXBench GL (ALU 2, Driver 2, Man-
hattan 3.0, Texturing, T-Rex), PassMark Performance Test
Mobile (2D Graphics, 3D Graphics, CPU, Disk, RAM, Sys-
tem), PCMark (Storage, Word, Work 2.0), Quadrant Stan-
dard (CPU, I/O, Memory, Overall), Vellamo (Browser -
Chrome, Metal, Multi-Core).
5.3 Degradation Results
As mentioned earlier, regular Android apps generally do
not output performance statistics. While the slowdown re-
sult of the attack and other eﬀects are visible to the human
eye, the visual slowdown is not quantiﬁable. To overcome
this problem, we have decided to use benchmarks that can
output system performance at any given time. To demon-
strate and quantify the performance degradation caused by
our QoS attack on diﬀerent functions of the system and apps,
we have used numerous benchmarks. This allowed us to
measure system performance both with (degraded perfor-
mance) and without (baseline performance) the attack run-
ning in the background, giving us a clear contrast for each
test device. Here, we present these results.
Our results show that, we can signiﬁcantly degrade the
QoS of various apps. As shown in Figure 3, test bench-
marks show varying levels of performance degradation, up
to 90.98% compared to the baseline results. Also, it is evi-
dent that diﬀerent test devices show diverse levels of degra-
dation due to the diﬀerence in the underlying hardware. For
instance, Nexus 5 has average degradation about 20% while
Nexus 5X has about 45%.
Figure 4 shows how much performance degradation was
observed by each benchmark when targeted by the attack.
It is evident that almost all benchmarks show strong degra-
dation in performance. Also, as mentioned before, one of
our test devices, the Galaxy S2 with Android 4.1.2 did not
support all of the benchmarks. These unavailable tests are
shown with 0% degradation in the ﬁgure. In Figure 5, we
represent normalized benchmark results i.e.
ratio of de-
Figure 3: Quartile representation of benchmark per-
formance degradations. Vertical axis represents per-
formance degradation percentage compared to the
baseline and red lines mark the average degradation.
graded performance to baseline results. Note that like Fig-
ure 4, benchmarks are numbered as in Table 2.
Names of the benchmark suites and the speciﬁc tests are
given in Table 2. Note that, while many of these benchmarks
have subtest, they are not represented for clarity. Instead of
giving results for each subtest, we only represent the aver-
age degradation. Finally, benchmark scores vary greatly de-
pending on the computation power of the device as expected.
Therefore, we represent degradation percentages rather than
actual scores.
5.4 Stealthiness of the Attacker App
Our attack is hard to detect and runs with a minimal
footprint on the system. During our experiments, we have
continuously monitored the CPU usage of our app through
Android Monitor provided by the Android Studio. We have
observed that our app has low CPU usage, even at the times
of performing Exotic Atomic Operations continuously. For
all the tested devices, CPU usage of the attacker app never
exceeded 10% mark, showing light CPU usage.
To show that our app is stealthy and can pass modern mal-
ware scanners, we have used 23 of the most popular malware
scanners on the Google Play Store. At the time of testing,
none of the malware scanners (see Appendix A) were able
to detect our attacker app as malware even though it was
causing signiﬁcant distress to the operation of the device.
We believe that this is due to following reasons:
1. Unlike other micro-architectural attacks e.g. Rowham-
mer and cache attacks (Flush&Reload, Evict&Reload, Pri-
me+Probe etc.), our QoS attack does not require evict-
ing memory blocks from the cache. Since it does not re-
Figure 4: Performance degradation percentages of benchmarks on test devices, Galaxy S2, Nexus 5, Nexus
5x and Galaxy S7 Edge respectively. Red dashed lines represent the maximum possible degradation, i.e.
100%. Benchmarks are numbered as in Table 2.
Figure 5: Normalized benchmark results of test devices, Galaxy S2, Nexus 5, Nexus 5x and Galaxy S7 Edge
respectively. Red dashed lines represent baseline performance for each benchmark while blue lines represent
results under attack. Benchmarks are numbered as in Table 2.
quire eviction or continuous monitoring of a speciﬁc memory
block, there is no continuous data access.
2. The memory bus trigger does not have to run at a
high frequency to achieve performance degradation. In fact,
a single bus lock results in a performance bottleneck for
over 12395, 9766, 6128 and 4693 nanoseconds in average on
our test devices, as shown in Figure 1. So, as long as the
attacker can trigger the bus lock about every 10K+ cycles,
the system will stay in a continuous state of a bottleneck.
The fact that the attacker issues only 1 CPU instruction
every 10K+ cycles, keeps the CPU load minimal. If a user
was to use a task manager to inspect CPU usages of diﬀerent
apps or check the system logs to do the same, he/she would
only see CPU use of unsuspecting 10% by the attacker app.
Table 2: Performance degradation of the tested benchmarks on test platforms.
Galaxy S2
Nexus 5
Nexus 5X
Galaxy S7 Edge
Benchmark
1. 3DMark (Ice Storm Unlimited Graphics Average)
2. 3DMark (Ice Storm Unlimited Physics Average)
3. 3DMark (Slingshot Unlimited Graphics Average)
4. 3DMark (Slingshot Unlimited Physics Average)
5. AnTuTu Benchmark (3D)
6. AnTuTu Benchmark (CPU)
7. AnTuTu Benchmark (RAM)
8. AnTuTu Benchmark (UX)
9. Benchmark & Tuning (CPU)
10. Benchmark & Tuning (I/O)
11. Benchmark & Tuning (Memory)
12. CF-Bench (Java)
13. CF-Bench (Native)
14. CF-Bench (Overall)
15. CPU Prime Benchmark
16. Geekbench 4 (Compute Overall)
17. Geekbench 4 (Multi-C Overall)
18. Geekbench 4 (Single-C Overall)
19. GFXBench GL (ALU 2 (Frames))
20. GFXBench GL (ALU 2 Oﬀscreen (Frames))
21. GFXBench GL (Driver 2 Overhead (Frames))
22. GFXBench GL (Driver 2 Overhead Oﬀscreen (Frames))
23. GFXBench GL (Manhattan 3.0 (Frames))
24. GFXBench GL (Manhattan 3.0 Oﬀscreen (Frames))
25. GFXBench GL (Texturing (MTexels/s))
26. GFXBench GL (Texturing Oﬀscreen (MTexels/s))
27. GFXBench GL (T-Rex Oﬀscreen)
28. GFXBench GL (T-Rex)
29. PassMark Performance Test Mobile (2D Graphics)
30. PassMark Performance Test Mobile (3D Graphics)
31. PassMark Performance Test Mobile (CPU)
32. PassMark Performance Test Mobile (Disk)
33. PassMark Performance Test Mobile (RAM)
34. PassMark Performance Test Mobile (System)
35. PCMark (Storage)
36. PCMark (Work 2.0)
37. PCMark (Work)
38. Quadrant Standard (CPU)
39. Quadrant Standard (I/O)
40. Quadrant Standard (Memory)
41. Quadrant Standard (Overall)
42. Vellamo (Browser - Chrome)
43. Vellamo (Metal)
44. Vellamo (Multi-Core)
%
NA
NA
NA
NA
NA
49.90
37.97
40.93
48.43
45.08
48.13
47.11
40.61
42.59
53.66
NA
NA
NA
NA
NA
NA
NA
NA
NA
NA
NA
11.71
9.02
49.66
15.55
53.75
39.80
39.74
35.89
NA
NA
NA
50.31
39.12
43.30
38.88
37.62
37.42
40.08
%
21.15
23.82
10.00
16.67
5.25
6.36
6.83
13.34
52.61
35.65
48.56
19.48
18.61
19.01
47.73
25.61
3.96
39.62
0.31
4.63
34.50
34.98
16.78
16.11
3.01
0.81
7.50
12.82
30.33
8.69
34.23
90.98
26.45
20.09
11.89
5.03
6.00
22.03
32.28
23.06
22.65
11.06
18.07
14.50
%
54.78
52.73
66.67