on data exchange over hybrid postMessage. In W J → O,
the main frame of W J can send a command to ask for
corresponding actions, such as opening and editing cart, and
adding and removing items to or from the cart.
Hence, a feasible attack scenario is that an attacker injects
malicious code through an HTTP link, and then, sends
messages through W J → O to manipulate the app’s internal
data.
The implementation of the message receiver of O is shown in
Listing 7. When a message is received, its content is directly
parsed and dispatched to the corresponding event handler.
Hence, if the content of the transferred message is equal to
the values in “SHOPPING_LIST”, all internal functionalities
can be accessed.
provided for validation
// Dispatch events based on the message content
// However, the message’ source origin is not
1 // The message receiver in O ’WebView.onMessage()’
2 key: "onMessage",
3 value: function(e) {
4
5
6
7
8
9
10
11
12
// Dispatch the event
(0, N.tagEvent)(SHOPPING_LIST.OPEN);
break;
switch ((e.nativeEvent.data)) {
case SHOPPING_LIST.OPEN:
case SHOPPING_LIST.EDIT: ...
...
Listing 7: Code Snippet of onMessage()
2) Google Cloud Print: The Google cloud print library is
designed to provide the cloud print service. It is very popular,
and available in many high-proﬁle documentation management
apps. The library is usually started by an inter-component
communication (i.e., Intent) message that carries the details of
the document to be printed (such as ﬁle URI and type). Then,
it opens a WebView component to load a remote print web
page. As shown in Listing 8, when the web page is fully loaded
(Line 1), a message handler is registered in the native context
(Line 4). The message handler works as the message proxy to
forward all received messages to the native layer (Lines 7-9).
It is done by calling a JavaScript Bridge (Line 8).
...
webView.loadUrl("javascript:" +
// Registering a message handler as message proxy
"window.addEventListener(" +
1 public void onPageFinished(WebView view, String url) {
2
3
4
5
6
7
8
9
10
11
12 }
"’message’," +
// Forwarding all received message content to
"function(evt) {" + // CSV exists
" window." + JS_INTERFACE + ".
onPostMessage(evt.data)" +
the native frame
"}, " +
"false" +
")");
Listing 8: The Source Code of Registering A Message
Handler In Google Print
Please note that although a JavaScript Bridge is used in
the message handler of the main web frame, we still count
the JavaScript Bridge as part of the implementation of hybrid
postMessage. It is because in this scenario, the native function
(“onPostMessage()”) of the JavaScript Bridge is the essential
message receiver that handles the received message content.
It is also reﬂected in its implementation, which is shown in
Listing 9. In the native function, the message content is handled
and parsed. If it is equal to a constant value, which is saved in
the variable “CLOSE_POST_MESSAGE_NAME”, the service
will be ﬁnished.
1 public void onPostMessage(String message) {
2
3
4
5
6 }
Listing 9: Source Code of The Message Handler In Google
// CLOSE_POST_MESSAGE_NAME is a constant string
if (message.startsWith(CLOSE_POST_MESSAGE_NAME)) {
finish();
}
Print
The above implementation of W→N suffers from V4, since
the source origin is lost. As a result, DoS may be caused,
considering the following situations: 1) based on our URL
crawler (Section III-B1a), the web page loaded in WebView
contains an HTTP link, which may be leveraged to inject
malicious code; 2) adversaries can leverage hybrid postMessage
to send a special message to the native frame to stop the service.
If the content of the sent message is equal to the value of the
variable “CLOSE_POST_MESSAGE_NAME”, DoS may be
caused.
In addition, the message handler of the main frame is also
a message proxy. However, CSV exists, which indicates that
the scenario about the blended attacks on OSV and CSV is
feasible (Figure 4).
V. THE MITIGATION SOLUTION : OSV-FREE APIS
A. Goals
Motivated by our study result, we aim to design safe hybrid
postMessage APIs. The new APIs should achieve the following
goals:
• Meeting the development requirements: The new APIs should
provide both N→W and W→N functionalities.
• Secure: The APIs should not be affected by OSV.
• Fast: The APIs should only introduce low overhead.
• Easy to use: The APIs should be easily applied and
integrated.
• Generic: The APIs should be resilient to the notorious
Android fragmentation problem, and support as many devices
as possible.
B. Overview
Guided by the above goals, we design the OSV-Free APIs.
To avoid potential vulnerabilities, such as V2, we explicitly
deﬁne the origin of the native frame as “nativeframe”. To the
best of our knowledge, the origin is meaningful and unique.
Please note that the origin is conﬁgurable. If an error is found in
the origin, the origin can be changed by developers or updated
by users.
751
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:39:50 UTC from IEEE Xplore.  Restrictions apply. 
API Context
Role
API
Web
Native
Message Sender
Message Sender
void postMessageToNativeFrame(String msg)
void postMessageToMainFrame(String msg, Uri targetOrigin)
Message Receiver
void receiveMessageFromMainFrame(Callback callback)
Description
Sending msg to the native frame
Sending msg to the main web frame whose origin
is targetOrigin
Registering a callback function to receive messages
from the main web frame
Table III: OSV-Free APIs
Similar to existing hybrid postMessage implementations
(Section IV-C), we also only allow the main web frame to
communicate with the native frame. Moreover, to avoid the
weakness of existing security solutions (Section I), the APIs
offer ﬁne-grained origin information and rich hints for building
the whole picture of the message delivery, which is helpful to
let developers be aware of the blended attacks on OSV and
CSV.
As a result, we propose three new hybrid postMessage
APIs, called OSV-Free, to allow the secure, fast and generic
messaging between the native frame and the main web frame.
The APIs are listed in Table III, and more design details are
discussed as follows.
In the native frame, the new API postMessageToMainFrame()
is proposed to allow the native frame to send messages to the
main web frame. Since the API can specify the target origin
and ensure only the target origin can receive messages, the
sub-type vulnerability V1 is eliminated. Correspondingly, in the
main web frame, the message handlers can receive messages
from the native frame as normal. Since the meaningful and
unique source origin “nativeframe” is provided, V2 is also
eliminated.
In the main web frame, the new JavaScript method postMes-
sageToNativeFrame() is created. Since the native frame is
the sole destination,
the target origin is already implied
in the API itself, and thus V3 is eliminated. In the native
frame, to receive messages from the main web frame, a
callback function is registered in advance through the API
receiveMessageFromMainFrame(). Then, when a message
arrives, the callback function is called to handle it with multiple
level origin information, so that it can conduct the ﬁne-grained
validation. Therefore, V4 is also eliminated.
1 public class Callback {
2
3
4
5
6
7 }
String frameOrigin,
String scriptOrigin,
boolean isProxyInvolved,
String data);
public void onMessage(
Listing 10: The Prototype of onMessage
Listing 10 shows the prototype of the native callback function
“onMessage”. When a message is received by the callback
function, three levels of origin information is provided so that
the callback function can perform validation in a ﬁne-grained
way, and also obtain hints about the whole picture of the
message delivery process. More speciﬁcally, the ﬁrst provided
origin “frameOrigin” indicates the origin of main web frame;
the second origin “scriptOrigin” provides the origin of the
embedded script, where the JavaScript method that sends the
message is located; the third variable ﬂag “isProxyInvolved”
indicates whether the main web frame is forwarding a message
752
K^sͲ&ƌĞĞ
ƉŽƐƚDĞƐƐĂŐĞ
W/Ɛ
ŶĚƌŽŝĚ
tĞďsŝĞǁ
K^sͲ&ƌĞĞ
ƵƐƚŽŵŝǌĂ
ƚŝŽŶ
ŽŶƚĞŶƚ
ZĞŶĚĞƌ
sϴ
K^sͲ&ƌĞĞtĞďsŝĞǁ
ƵƐƚŽŵŝǌĞĚŚƌŽŵŝƵŵWƌŽǀŝĚĞƌ
Figure 8: OSV-Free’s Design
as a proxy. If the ﬂag is true, the scenario similar to what is
shown in Figure 4 is faced. Hence, developers should carefully
handle this situation.
Furthermore, OSV-Free also brings beneﬁts to existing
defense solutions for CSV (“D1”) and defense solutions for
WebView (“D2”). More speciﬁcally, OSV-Free makes D1
effective again, since it provides required source origins. OSV-
Free also makes up the deﬁciency of D2 by providing multiple
level origin information. Thus, D2 can also offer ﬁne-grained
security enforcement and also be aware of the blended attacks
on CSV and OSV.
C. Design and Implementation
The key observation behind OSV-Free is that in Android 5+,
the declaration and implementation of WebView’s interfaces are
separated. The implementation is placed in a standalone library,
which is self-managed and self-updated. Hence, we mainly
implement OSV-Free by instrumenting the above library, which
brings beneﬁts of easy upgrade and minimal modiﬁcation on
the Android source code.
In Android, users can select a browser provider as the library.
Currently, Chromium [21] is the default provider. Roughly,
Chromium consists of three modules : 1) content, which links
Android WebView with the render module together; 2) render,
which is responsible to handle rendering tasks and interact
with the JavaScript engine V8; 3) V8, which is a open-source
JavaScript engine developed by Google.
OSV-Free’s design is shown in Figure 8. OSV-Free mainly
consists of two parts : OSV-Free WebView and Customized
Chromium Provider. OSV-Free WebView is a WebView
wrapper that declares the native APIs postMessageToMain-
Frame() and receiveMessageFromMainFrame(), while Cus-
tomized Chromium Provider provides the essential implementa-
tions of the above two native APIs. For the remaining JavaScript
method postMessageToNativeFrame(), Customized Chromium
Provider can automatically enable it in the main web frame,
when a callback function is registered through the native API
receiveMessageFromMainFrame(). Please note that OSV-Free
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:39:50 UTC from IEEE Xplore.  Restrictions apply. 
WebView should be integrated into vulnerable apps to replace
the original WebView.
To implement OSV-Free, Chromium’s content and render
modules are instrumented for each provided API as follows.
• postMessageToMainFrame(): This API is implemented by
reusing existing methods. When the API is called, the
customized content module is started, and then an internal
API, called postMessageToFrame(), is invoked to handle the
whole task of the N→W message.
• receiveMessageFromMainFrame() And postMessageToNa-
tiveFrame(): receiveMessageFromMainFrame() is imple-
mented by instrumenting the content and render modules.
When the API is called, the content module is entered,
where the API’s parameter is cached, parsed, and checked to
make sure the format is correct and its internal callback
function is not empty. Then, a message is sent to the
render module to notify that a callback function is being
registered. After that, the render module reads the context
of V8, and binds a pre-deﬁned callback function f to V8
as “postMessageToNativeFrame()”.
In run-time, when postMessageToNativeFrame() is called
f follows. Then, in f , multiple
in the main web frame,