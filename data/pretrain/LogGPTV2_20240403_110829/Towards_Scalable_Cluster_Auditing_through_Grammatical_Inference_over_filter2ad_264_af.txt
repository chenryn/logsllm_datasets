container liveness and ﬁnding containers belong to same appli-
cation. Moreover, Kubernetes also allows creating containers
with SELinux labels by deﬁning seLinuxOptions ﬁeld in
container manifest ﬁle.
IX. CONCLUSION
In this work, we present Winnower,
the ﬁrst practical
system for end-to-end provenance-based auditing of clusters
at scale. Winnower includes a novel adaptation of graph ab-
straction techniques that removes instance-speciﬁc information
from the system-level provenance graphs and further apply
graph grammar principles that enables efﬁcient behavioural
modeling and comparison in the provenance domain. We
evaluated Winnower performance on cluster applications and
ﬁve real-world attack scenarios and show that Winnower
reduces storage and network overheads by several orders of
magnitude compared with existing solutions, while preserving
the necessary context to identify and investigate system attacks.
ACKNOWLEDGMENTS
We would like to thank Hassaan Irshad (SRI International)
for his assistance with the SPADE tool and Ben Rabe for
his help in running some experiments. We also thank the
anonymous reviewers for their helpful feedback. This work
was supported in part by NSF CNS grant 16-57534. The views
expressed are those of the authors only.
REFERENCES
“Docker Company,” https://www.docker.com/company.
“Production-grade container orchestration,” https://kubernetes.io/.
“Graph For Scala,” http://www.scala-graph.org/.
“Docker Store - Find Trusted and Enterprise Ready Containers,” https:
//www.store.docker.com/.
“System administration utilities,” man7.org/linux/man-pages/man8/
auditd.8.html/.
“Dirty COW Vulnerability: Impact on Containers,” http://blog.aquasec.
com/dirty-cow-vulnerability-impact-on-containers.
“Anchore Example Queries,” https://github.com/anchore/anchore/wiki/
Example-Queries.
“Dirtycow-docker-vdso,”
vdso.
“The State Of Containerization: Survey,” http://red.ht/2iortcK.
“LTTng,” http://lttng.org.
“Sysdig,” https://www.sysdig.org.
“openCypher,” http://www.opencypher.org/.
[9]
[10]
[11]
[12]
[13] P. Adriaans and C. Jacobs, “Using MDL for grammar induction,”
https://github.com/gebl/dirtycow-docker-
purposes, existing graph comparisons solutions are not imme-
diately applicable, in part because of various sources of non-
determinism lead to subtle structural and semantic variations
between provenance graphs across executions. To illustrate this
limitation, we note brieﬂy a preliminary experiment that we
conducted using na¨ıve graph diff in place of DFA learning.
Figure 20 shows simpliﬁed provenance graphs for two Apache
httpd webservers, one of which (20b) has fallen victim to a
a reverse shell invocation attack. The naive graph diff ﬂagged
several subgraphs as anomalous, although they described the
same behavior in both executions. In contrast, Winnower
accurately identiﬁes the attack subgraph without false alarms.
Previous studies have used graph grammar techniques to
infer program behavior and speciﬁcations using syscall and
function call graphs [43], [31]. Babic et al. [14] used induction
on tree grammar to learn malicious syscall patterns which they
hoped to recognize at runtime. One of the prominent works in
the graph grammar learning space is Jonyer et al. [44] SubDue
system that generates context free grammars to help solve
Frequent Subgraph Mining. In light of the high overheads asso-
ciated with DFA learning, Winnower considers a signiﬁcantly
more challenging problem of how to leverage these techniques
in a real time distributed monitoring architecture. Moreover,
we also demonstrate methods of abstracting instance-speciﬁc
details out of audit records to further improve the compression
rate of graph induction.
Deduplication and Compression. Our work is orthogonal
to provenance graph compression and deduplication tech-
niques [69], [25], [15] due to distributed setting of system-level
provenance in our work. Winnower provides scalable compres-
sion using DFA learning that exploits the homogeneity present
in same applications’ provenance across different executions to
remove redundancy and generate DFA models. Moreover, DFA
models provide an efﬁcient means of membership test which
is leveraged by Winnower to avoid redundant transmission of
provenance data to the central node. In contrast, deduplica-
tion and compression techniques do not provide these func-
tionalities. Recently, Chen et al. [28] proposed equivalence-
based provenance tree compression to reduce storage overhead.
However, their proposal requires distributed applications to be
written in a new domain-speciﬁc language to ﬁnd equivalent
trees at compile time and works only for network provenance
trees.
VIII. DISCUSSION
Our techniques of graph abstraction and DFA learning for
system-level provenance are generic; they can be employed in
other domains in which there is redundancy across executions,
such as multiple VMs or independent process executions
as we do not make any assumptions regarding application
and their workloads. We focus on container clusters in this
paper because these techniques are ideal for environments
that adhere to the microservice architecture principle (software
as discrete, loosely-coupled, replicated services for scalability
and fault-tolerance) and there is a recent paradigm shift in
industry towards using Docker containers in the clusters due
it’s advantages over hypervisor-based VMs [34].
Our framework is extensible to Kubernetes [2], another
popular container cluster management
tool. The only sub-
module from our architecture (§IV) that needs to be changed
[1]
[2]
[3]
[4]
[5]
[6]
[7]
[8]
Grammatical Inference: Algorithms and . . . , pp. 293–306, 2006.
[14] D. Babi´c, D. Reynaud, and D. Song, “Recognizing malicious software
behaviors with tree automata inference,” Form. Methods Syst. Des.,
vol. 41, no. 1, 2012.
[15] Z. Bao, H. K¨ohler, L. Wang, X. Zhou, and S. Sadiq, “Efﬁcient
provenance storage for relational queries,” in CIKM, 2012.
[16] P. Barham, A. Donnelly, R. Isaacs, and R. Mortier, “Using magpie for
request extraction and workload modelling.” in OSDI, 2004.
[17] A. Barron, J. Rissanen, and B. Yu, “The minimum description length
principle in coding and modeling,” IEEE Transactions on Information
Theory, vol. 44, no. 6, pp. 2743–2760, 1998.
[18] A. Bates, K. Butler, A. Haeberlen, M. Sherr, and W. Zhou, “Let SDN
Be Your Eyes: Secure Forensics in Data Center Networks,” in SENT,
2014.
14
[19] A. Bates, W. U. Hassan, K. Butler, A. Dobra, B. Reaves, P. Cable,
T. Moyer, and N. Schear, “Transparent web service auditing via network
provenance functions,” in WWW, 2017.
[20] A. Bates, D. Tian, K. R. B. Butler, and T. Moyer, “Trustworthy whole-
system provenance for the linux kernel,” in USENIX Security, 2015.
[21] T. Benson, A. Akella, and D. A. Maltz, “Network trafﬁc characteristics
of data centers in the wild,” in IMC, 2010.
[22] D. Bernstein, “Containers and cloud: From lxc to docker to kubernetes,”
IEEE Cloud Computing, vol. 1, no. 3, pp. 81–84, 2014.
[23] M. A. Borkin, C. S. Yeh, M. Boyd, P. Macko, K. Z. Gajos, M. Seltzer,
and H. Pﬁster, “Evaluation of ﬁlesystem provenance visualization tools,”
IEEE Transactions on Visualization and Computer Graphics, vol. 19,
no. 12, pp. 2476–2485, 2013.
[24] H. Bunke, “On a relation between graph edit distance and maximum
common subgraph,” Pattern Recognition Letters, vol. 18, no. 8, 1997.
[25] A. Chapman, H. Jagadish, and P. Ramanan, “Efﬁcient Provenance
Storage,” in SIGMOD, 2008.
[26] A. Chen, Y. Wu, A. Haeberlen, B. T. Loo, and W. Zhou, “Data
provenance at internet scale: Architecture, experiences, and the road
ahead,” in CIDR, 2017.
[27] A. Chen, Y. Wu, A. Haeberlen, W. Zhou, and B. T. Loo, “The good,
the bad, and the differences: Better network diagnostics with differential
provenance,” in SIGCOMM, 2016.
[28] C. Chen, H. T. Lehri, L. Kuan Loh, A. Alur, L. Jia, B. T. Loo, and
W. Zhou, “Distributed provenance compression,” in SIGMOD, 2017.
[29] M. Y. Chen, A. Accardi, E. Kiciman, J. Lloyd, D. Patterson, A. Fox, and
E. Brewer, “Path-based faliure and evolution management,” in NSDI,
2004.
[30] L. Chiticariu, W.-C. Tan, and G. Vijayvargiya, “DBNotes: A Post-it
System for Relational Databases Based on Provenance,” in SIGMOD,
2005.
J. E. Cook and A. L. Wolf, “Discovering models of software processes
from event-based data,” ACM Trans. Softw. Eng. Methodol., vol. 7, no. 3,
pp. 215–249, 1998.
[31]
[32] C. De la Higuera, Grammatical
inference: learning automata and
grammars. Cambridge University Press, 2010.
[33] U. Erlingsson, M. Peinado, S. Peter, M. Budiu, and G. Mainar-Ruiz,
“Fay: Extensible distributed tracing from kernels to clusters,” ACM
Trans. Comput. Syst., vol. 30, pp. 13:1–13:35, 2012.
[34] W. Felter, A. Ferreira, R. Rajamony, and J. Rubio, “An updated
performance comparison of virtual machines and linux containers,” in
ISPASS, 2015.
I. T. Foster, J.-S. V¨ockler, M. Wilde, and Y. Zhao, “Chimera: AVirtual
Data System for Representing, Querying, and Automating Data Deriva-
tion,” in SSDBM, 2002.
[35]
[36] A. Gehani, H. Kazmi, and H. Irshad, “Scaling SPADE to ”Big Prove-
nance”,” in TaPP, 2016.
[37] A. Gehani and D. Tariq, “SPADE: Support for Provenance Auditing in
Distributed Environments,” in Middleware, 2012.
[38] A. Goel, K. Po, K. Farhadi, Z. Li, and E. De Lara, “The taser intrusion
recovery system,” in ACM SIGOPS Operating Systems Review, 2005.
[39] P. Groth and L. Moreau, “Representing Distributed Systems Using the
Open Provenance Model,” Future Gener. Comput. Syst., vol. 27, no. 6,
2011.
[40] P. D. Gr¨unwald, The minimum description length principle. MIT press,
2007.
[41] C. D. L. Higuera, “A bibliographical study of grammatical inference,”
Pattern recognition, 2005.
[42] C. Jiang, F. Coenen, and M. Zito, “A survey of frequent subgraph mining
algorithms,” The Knowledge Engineering Review, vol. 28, no. 01, pp.
75–105, 2013.
[43] R. Jin, C. Wang, D. Polshakov, S. Parthasarathy, and G. Agrawal,
“Discovering frequent topological structures from graph datasets,” in
KDD, 2005.
I. Jonyer, L. B. Holder, and D. J. Cook, “MDL-based context-free graph
grammar induction and applications,” International Journal on Artiﬁcial
Intelligence Tools, vol. 13, no. 01, pp. 65–79, 2004.
[44]
[45] G. Karvounarakis, T. J. Green, Z. G. Ives, and V. Tannen, “Collabo-
rative data sharing via update exchange and provenance,” ACM Trans.
Database Syst., vol. 38, no. 3, pp. 19:1–19:42, 2013.
[46] T. Kim, X. Wang, N. Zeldovich, and M. F. Kaashoek, “Intrusion
recovery using selective re-execution,” in OSDI, 2010.
[47] S. T. King and P. M. Chen, “Backtracking intrusions,” in SOSP, 2003.
[48] G. Kurtz, “Operation Aurora Hit Google, Others,” 2010, http://
securityinnovator.com/index.php?articleID=42948&sectionID=25.
[49] K. J. Lang, B. A. Pearlmutter, and R. A. Price, Results of the Abbadingo
one DFA learning competition and a new evidence-driven state merging
algorithm. Springer Berlin Heidelberg, 1998.
[50] K. H. Lee, X. Zhang, and D. Xu, “High Accuracy Attack Provenance
via Binary-based Execution Partition,” in NDSS, 2013.
[51] K. H. Lee, X. Zhang, and D. Xu, “LogGC: garbage collecting audit
log,” in CCS, 2013.
[52] Y. Liu, M. Zhang, D. Li, K. Jee, Z. Li, Z. Wu, J. Rhee, and P. Mittal,
“Towards a timely causality analysisfor enterprise security,” in NDSS,
2018.
[53] S. Ma, J. Zhai, F. Wang, K. H. Lee, X. Zhang, and D. Xu, “MPI:
Multiple perspective attack investigation with semantic aware execution
partitioning,” in USENIX Security, 2017.
[54] S. Ma, X. Zhang, and D. Xu, “ProTracer: Towards Practical Provenance
Tracing by Alternating Between Logging and Tainting,” in NDSS, 2016.
J. Mace, R. Roelke, and R. Fonseca, “Pivot tracing: Dynamic causal
monitoring for distributed systems,” in SOSP, 2015.
[55]
[56] P. Macko and M. Seltzer, “Provenance map orbiter: Interactive explo-
ration of large provenance graphs.” in TaPP, 2011.
J. Morris, “svirt: Hardening linux virtualization with mandatory access
control,” in Linux. conf. au Conference, 2009.
[57]
[58] K.-K. Muniswamy-Reddy, D. A. Holland, U. Braun, and M. Seltzer,
“Provenance-aware Storage Systems,” in ATC, 2006.
[59] D. Namiot and M. Sneps-Sneppe, “On micro-services architecture,”
International Journal of Open Information Technologies, vol. 2, no. 9,
pp. 24–27, 2014.
[60] T. Pasquier, J. Singh, D. Eyers, and J. Bacon, “Camﬂow: Managed data-
sharing for cloud services,” in IEEE Transactions on Cloud Computing,
2015.
[61] D. Pohly, S. McLaughlin, P. McDaniel, and K. Butler, “Hi-Fi: Collecting
High-Fidelity Whole-System Provenance,” in ACSAC, 2012.
[62] K. Riesen, M. Neuhaus, and H. Bunke, Bipartite Graph Matching for
Computing the Edit Distance of Graphs. Springer Berlin Heidelberg,
2007.
[63] R. Shu, X. Gu, and W. Enck, “A study of security vulnerabilities on
docker hub,” in CODASPY, 2017.
[64] B. H. Sigelman, L. A. Barroso, M. Burrows, P. Stephenson, M. Plakal,
D. Beaver, S. Jaspan, and C. Shanbhag, “Dapper, a large-scale dis-
tributed systems tracing infrastructure,” Technical report, Google, Inc,
Tech. Rep., 2010.
[65] B. Tak, C. Isci, S. Duri, N. Bila, S. Nadgowda, and J. Doran, “Un-
derstanding security implications of using containers in the cloud,” in
USENIX ATC, 2017.
[66] D. Wagner and P. Soto, “Mimicry attacks on host-based intrusion
detection systems,” in CCS, 2002.
[67] Q. Wang, W. U. Hassan, A. Bates, and C. Gunter, “Fear and logging
in the internet of things,” in NDSS, 2018.
[68] W. Wieczorek, Grammatical Inference: Algorithms, Routines and Ap-
plications. Springer, 2016, vol. 673.
[69] Y. Xie, D. Feng, Z. Tan, L. Chen, K.-K. Muniswamy-Reddy, Y. Li, and
D. D. Long, “A Hybrid Approach for Efﬁcient Provenance Storage,” in
CIKM, 2012.
[70] L. Zeng, Y. Xiao, and H. Chen, “Linux auditing: overhead and adapta-
tion,” in IEEE ICC, 2015.
[71] C. Zhao, J. Kong, and K. Zhang, “Program behavior discovery and
veriﬁcation: A graph grammar approach,” IEEE TSE, vol. 36, no. 3,
pp. 431–448, May 2010.
[72] W. Zhou, Q. Fei, A. Narayan, A. Haeberlen, B. T. Loo, and M. Sherr,
“Secure Network Provenance,” in SOSP, 2011.
15