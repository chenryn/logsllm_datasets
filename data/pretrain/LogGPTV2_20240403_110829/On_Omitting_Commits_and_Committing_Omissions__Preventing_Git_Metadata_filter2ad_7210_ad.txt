✓
✓
X
X
X
✓
2.2.0
(no default) or
Additional server
RSL
✓
✓
✓
✓
✓
✓
1.7.9
in-band
Table 3: Comparison of defense schemes against Git metadata ma-
nipulation attacks. A ✓indicates the attack is prevented.
As we can see, Git commit signing does not pro-
tect against the vast majority of attacks presented in
USENIX Association  
25th USENIX Security Symposium  389
11
this paper. Also, Git’s push certificate solution provides
a greater degree of protection, but still fails to protect
against all rollback and effort duplication attacks. This is
primarily because (1) a server could misbehave and not
provide the certificates (there is no default distribution
mechanism), and (2) a server can replay old push certifi-
cates along with an old history. Basically, this solution
assumes a well-behaving server hosting push certificates.
In contrast, our solution protects against all attacks
presented in Table 3.
In addition to this, our solution
presents an in-band distribution mechanism that does not
rely on a trusted server in the same way that commit sign-
ing does. Lastly, we can see that our solution can be used
today, because it does not require newer versions of Git
on the client and requires no changes on the server, which
allows for deployment in popular Git hosting platforms
such as GitHub and Gitlab.
7
Implementation and evaluation
We have implemented a prototype for our defense
scheme. This section provides implementation details
and presents our experimental performance results.
7.1
Implementation
To implement our defense scheme, we leveraged Git
custom commands to replace the push and fetch com-
mands, and implemented the RSL as a separate branch
inside the repository itself. To start using the defense, a
user is only required to install two additional bash scripts
and use them in lieu of the regular fetch and push com-
mands. Our client scripts consist of less than a hundred
(86) lines of code, and there is no need to install anything
on the server.
RSL and Nonce Bag. We implemented the RSL in a
detached branch of the repository, named “RSL.” Each
RSL entry is stored as a Git commit object, with the en-
try’s information encoded in the commit message. We
store each entry in a separate commit object to leverage
Git’s pack protocol, which only sends objects if they are
missing in the local client. Encoding the Git commit ob-
jects is also convenient because computing the previous
hash field is done automatically.
We also represent the Nonce Bag as a Git commit ob-
ject at the head of the RSL branch. When a nonce is
added or updated, a new commit object with the nonces
replaces the previous nonce bag, and its parent is set to
the latest RSL entry. When a new RSL entry is added, the
commit containing the nonce bag is garbage collected by
Git because the RSL branch cannot reach it anymore.
When securepush is executed,
the script first
fetches and verifies the remote RSL branch. If verifica-
tion is successful, it then creates an RSL entry by issuing
a new commit object with a NULL tree (i.e., no local
Field
Branch
HEAD
PREV HASH
Signature
Description
Target branch name
Branch location (target commit)
Hash over the previous RSL entry
Digital signature over RSL entry
Table 4: RSL push entry fields.
files), and a message consisting of the fields described in
Table 4. After the new commit object with the RSL push
entry is created, the RSL branch is pushed to the remote
repository along with the target branch.
A securefetch invocation will fetch the RSL
branch to update or add the random nonce in the Nonce
Bag. If a nonce was already added to the commit object
(with a NULL tree also), it will be amended with the re-
placed nonce. In order to keep track of the nonce and the
commit object to which it belongs, two files are stored lo-
cally: NONCE HEAD, which contains the reference of
the Nonce Bag in the RSL branch, and NONCE, which
contains the value of the nonce stored in it.
Atomicity of Git operations. The securepush and
securefetch operations require fetching and/or pushing
of the RSL branch in addition to the pushing/fetching
to/from the target branch. Git does not support atomic
fetch of multiple branches, and only supports atomic
push of multiple branches after version 2.4.0 1.
In order to ensure backwards compatibility, we de-
signed our solution without considering the existence of
atomic operations. Unfortunately, the lack of atomic
push opens the possibility of a DoS attack that exploits
the ‘repeat’ loop in Secure fetch (lines 3-12), that makes
the algorithm loop endlessly. This could happen if a
user executes Secure push and is interrupted after push-
ing a new RSL entry, but before pushing the target branch
(e.g., caused by a network failure). Also, a malicious
user may provide an updated RSL, but an outdated his-
tory for that branch. However, this issue can be easily
solved if the loop is set to be repeated only a finite num-
ber of times before notifying the user of a potential DoS
attempt.
If atomic push for multiple branches is available, the
Secure push procedure can be simplified by replacing
lines 17-22 with a single push. Availability of atomic
push also eliminates the possibility of the endless loop
mentioned above.
7.2 Experimental evaluation
Experimental Setup. We conducted experiments using
a local Git client and the GitHub server that hosted the
main repository. The client was running on an Intel Core
i7 system with two CPUs and 8 GB RAM. The client
software consisted of OS X 10.11.2, with Git 2.6.2 and
1Note that both Git client and server must be at least version 2.4.0
in order to support atomic push.
390  25th USENIX Security Symposium 
USENIX Association
12
the GnuPG 2.1.10 library for 1024-bit DSA signatures.
Our goal was to evaluate the overhead introduced by
our defense scheme. Specifically, we want to determine
the additional storage induced by the RSL, and the addi-
tional end-to-end delay induced by our securefetch
and secure push operations. For this, we used the
five most popular GitHub repositories 2: bootstrap, an-
gular.js, d3, jQuery, oh-my-zsh. We will refer to these
as R1, R2, R3, R4, and R5, respectively. In the exper-
iments, we only considered the commits in the master
branch of the these repositories. Table 5 provides details
about these repositories.
Repo.
Number
of pushes
1,345
26
255
194
1,170
Repo.
size
73.04
66.96
32.91
15.79
3.52
Number
of commits
11,666
7,521
3,510
6,031
3,841
Repo. size with
signed commits
78.85
69.79
34.65
19.98
4.01
R1
R2
R3
R4
R5
Table 5: The repositories used for evaluation (sizes are in MBs).
We used the repositories with signed commits as the
baseline for the evaluation. We evaluated three defense
schemes:
• Our defense: This is our proposed defense scheme.
• Our defense (light): A light version of our defense
scheme, which does not use the nonce bag to keep
track of user fetches. This scheme sacrifices pro-
tection against Effort Duplication attacks in favor
of keeping the regular Git fetch operation un-
changed.
• Push certificates: Push certificates used upon push-
ing.
For our defense and our defense (light), the reposito-
ries were hosted on GitHub. Given that GitHub does not
support push certificates, we studied the network over-
head using a self-hosted server on an AWS instance, and
concluded that push certificates incur a negligible over-
head compared to the baseline. Thus, we only compare
our scheme with push certificates in regard to the storage
overhead.
Storage overhead. Table 6 shows the additional storage
induced by our defense, compared to push certificates.
In our defense, the RSL determines the size of the ad-
ditional storage. We can see that our defense requires
between 0.009%-6.5% of the repository size, whereas
push certificates require between 0.012%-10%. The rea-
son behind this is that push certificates contain 7 fields in
addition to the signature, whereas RSL push entries only
have 3 additional fields.
2Popularity is based on the “star” ranking used by GitHub, which
reflects users’ level of interest in a project (retrieved on Feb 14, 2016).
Repo. Our defense
R1
R2
R3
R4
R5
301.93
6.49
58.91
44.34
261.3
Push certificates
461.27
8.88
86.05
66.27
402.19
Table 6: Repository storage overhead of defense schemes (in KBs).
Communication overhead.
To evaluate the addi-
tional network communication cost introduced by our
securepush operation when compared to the regu-
lar push operation, we measured the cost of the last 10
pushes for the five considered repositories. To evaluate
the cost of securefetch, we measured the cost of a
fetch after each of the last 10 pushes.
Table 7 shows the cost incurred by push operations.
We can see that our defense incurs, on average, between
25.24 and 26.21 KB more than a regular push, whereas
our defense (light) only adds between 10.29 and 10.48
KB. This is because a securepush in our defense re-
trieves, updates and then stores the RSL in the remote
repository. In contrast, our defense (light) only requires
storing the RSL with the new push entry if there are no
conflicts. Table 8 shows the cost incurred by fetch op-
erations. A securefetch incurs on average between
25.1 and 25.55 KB more than a regular fetch, whereas
our defense (light) only adds between 14.34 and 10.91
KB.
The observed overhead is a consequence of the fact
that we implemented our defense scheme to respect de-
sign goal DG3, (i.e.
no requirement to modify the
Git server software). Since we implemented the RSL
and the Nonce Bag as objects in a separate Git branch,
securepush and securefetch require additional
push/fetch commands to store/fetch these, and thus
they incur additional TCP connections. Most of the
communication overhead is caused by information that
is automatically included by Git and is unrelated to
our defense scheme. We found that Git adds to each
push and fetch operation about 8-9 KBs of supported
features and authentication parameters.
If our defense
is integrated into the Git software, the securepush
and securefetch will only require one TCP ses-
sion dramatically reducing the communication overhead.
In fact, based on the size of an RSL entry (∼325
bytes), which is the only additional information sent by
a securepush/securefetch compared to a regular
push/fetch, we estimate that the communication over-
head of our defense will be less than 1KB per operation.
End-to-end delay. Table 9 shows the end-to-end delay
incurred by push operations. We can see that our de-
fense adds on average between 1.61 and 2.00 seconds
more than a regular push, whereas our defense (light)
only adds between 0.99 and 1.3 seconds. Table 10 shows
USENIX Association  
25th USENIX Security Symposium  391
13
Scheme used
Git w/ signed
commits
(baseline)
Our defense
Our defense
(light)
R1
17.80
R2
3,925.35
R3
38.32
R4
59.14
R5
11.96
44.01
28.28
3,950.87
3,935.71
63.56
48.61
84.71
69.52
37.65
22.28
Table 7: Average communication cost per push for the last 10 push
operations, expressed in KBs.
Scheme used
Git w/ signed
commits
(baseline)
Our defense
Our defense
(light)
R1
20.68
R2
3,896.98
R3
40.93
R4
65.85
R5
13.67
46.18
35.19
3,922.40
3,911.81
66.48
55.84
91.27
80.67
38.77
28.01
Table 8: Average communication cost per fetch for the last 10 fetch
operations, expressed in KBs.
Scheme used
Git w/ signed
commits (baseline)
Our defense
Our defense (light)
R1
1.29
3.11
2.44
R2
3.27
5.27
4.49
R3
1.17
2.78
2.16
R4
1.31
2.95
2.40
R5
1.51
3.51
2.81
Table 9: Average end-to-end delay per push for the last 10 push op-
erations, expressed in seconds.
Scheme used
Git w/ signed
commits (baseline)
Our defense
Our defense (light)
R1
0.87
2.93
1.60
R2
1.95
3.86
2.75
R3
0.75
2.52
1.52
R4
0.66
2.40
1.31
R5
0.67
2.75
1.30