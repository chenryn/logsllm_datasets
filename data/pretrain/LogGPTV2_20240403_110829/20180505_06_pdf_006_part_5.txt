Overview
Similar to Oracle PL/SQL Cursors, PostgreSQL has PL/pgSQL cursors that enable you to iterate business logic on
rows read from the database. They can encapsulate the query and read the query results a few rows at a time.
All access to cursors in PL/pgSQL is performed through cursor variables, which are always of the
refcursor
data type.
Create a PL/pgSQL cursor by declaring it as a variable of type .
refcursor
Example: Declare a Cursor
1. Declare a Cursor in PL/pgSQL to be used with any query:
DECLARE
c1 refcursor;
The variable is unbound since it is not bound to any particular query.
c1
2. Declare a Cursor in PL/pgSQL with a bound query:
DE CLARE
c2 CURSOR FOR SELECT * FROM employees;
can be replaced by for Oracle compatibility:
FOR IS
DECLARE
c2 CURSOR IS SELECT * FROM employees;
3. Declare a Cursor in PL/pgSQL with a parameterized bound query:
DE CLARE
c3 CURSOR (var1 integer) FOR SELECT * FROM employees where id = var1;
• The variable is replaced by an integer parameter value when the cursor is opened.
id
• When declaring a Cursor with specified, the Cursor can scroll backwards.
SCROLL
• If is specified, backward fetches are rejected.
NO SCROLL
4. Declare a backward-scrolling compatible Cursor using the option:
SCROLL
DECLARE
c3 SCROLL CURSOR FOR SELECT id, name FROM employees;
Notes:
• specifies that rows can be retrieved backwards. specifies that rows cannot
SCROLL NO SCROLL
be retrieved backwards.
• Depending upon the complexity of the execution plan for the query, might create
SCROLL
performance issues.
• Backward fetches are not allowed when the query includes or .
FOR UPDATE FOR SHARE
60
Example: Open a Cursor
You must open a cursor before you can use it to retrieve rows.
1. Open a Cursor variable that was declared as Unbound and specify the query to execute:
BEGIN
OPEN c1 FOR SELECT * FROM employees WHERE id = emp_id;
2. Open a Cursor variable that was declared as Unbound and specify the query to execute as a string
expression. This approach provides greater flexibility.
BEGIN
OPEN c1 FOR EXECUTE format('SELECT * FROM %I WHERE col1 =
$1',tabname) USING keyvalue;
Parameter values can be inserted into the dynamic command using and . For example,
format() USING
the table name is inserted into the query using . The comparison value for is inserted
format() col1
using a parameter.
USING
3. Open a Cursor that was bound to a query when the Cursor was declared and that was declared to take
arguments.
DO $$
DECLARE
c3 CURSOR (var1 integer) FOR SELECT * FROM employees where id = var1;
BE GIN
OPEN c3(var1 := 42);
END$$;
For the Cursor, supply the argument value expressions.
c3
If the Cursor was not declared to take arguments, the arguments can be specified outside the Cursor:
DO $$
DECLARE
var1 integer;
c3 CURSOR FOR SELECT * FROM employees where id = var1;
BEGIN
var1 := 1;
OPEN c3;
EN D$$;
61
Example: Fetch a Cursor
The PL/pgSQL command retrieves the next row from the Cursor into a variable.
FETCH
1. Fetch the values returned from the Cursor into a row variable:
c3
DO $$
DECLARE
c3 CURSOR FOR SELECT * FROM employees;
rowvar employees%ROWTYPE;
BEGIN
OPEN c3;
FETCH c3 INTO rowvar;
END$$;
2. Fetch the values returned from the Cursor into two scalar datatypes:
c3
DO $$
DECLARE
c3 CURSOR FOR SELECT id, name FROM employees;
emp_id integer;
emp_name varchar;
BEGIN
OPEN c3;
FETCH c3 INTO emp_id, emp_name;
END$$;
3. PL/pgSQL supports a special direction clause when fetching data from a Cursor using the , ,
NEXT PRIOR
, , count, count, , or arguments. Omitting
FIRST LAST ABSOLUTE RELATIVE FORWARD BACKWARD
direction is equivalent to as specifying . For example, fetch the last row from the Cursor into the
NEXT
declared variables:
DO $$
DECLARE
c3 CURSOR FOR SELECT id, name FROM employees;
emp_id integer;
emp_name varchar;
BEGIN
OPEN c3;
FETCH LAST FROM c3 INTO emp_id, emp_name;
END$$;
For additional details:
https://www.postgresql.org/docs/9.6/static/sql-fetch.html
62
Example: Close a Cursor
Close a PL/pgSQL cursor using the command:
close
DO $$
DECLARE
c3 CURSOR FOR SELECT id, name FROM employees;
e mp_id integer;
e mp_name varchar;
BEGIN
OPEN c3;
FETCH LAST FROM c3 INTO emp_id, emp_name;
close c3;
END$$;
Example: Iterating Through a Cursor
PL/pgSQL supports detecting when a cursor has no more data to return and can be combined with loops to
iterate over all rows of a Cursor reference.
The following PL/pgSQL code uses a loop to fetch all rows from the Cursor and then exit after the last record is
fetched (using ):
EXIT WHEN NOT FOUND
DO $$
DECLA RE
c3 CURSOR FOR SELECT * FROM employees;
rowvar employees%ROWTYPE;
BEGIN
OPEN c3;
LOOP
FETCH FROM c3 INTO rowvar;
EXIT WHEN NOT FOUND;
END LOOP;
CLOSE c3;
END$$;
Example: Move Cursor Without Fetching Data
repositions a cursor without retrieving any data and works exactly like the command, except it
MOVE FETCH
only repositions the cursor in the dataset and does not return the row to which the cursor is moved. The
special variable can be checked to determine if there is a next row.
FOUND
1. Move to the last row (null or no data found) for cursor :
c3
MOVE LAST FROM c3;
2. Move the Cursor two records back:
MOVE RELATIVE -2 FROM c3;
3. Move the Cursor two records forward.
c3
MOVE FORWARD 2 FR OM c3;
63
Example: Update/Delete Current
When a cursor is positioned on a table row, that row can be updated or deleted. There are restrictions on what
the cursor’s query can select for this type of DML to succeed.
For example, the current row to which the Cursor is pointed to is updated:
C3
UPDATE employee SET salary = salary*1.2 WHERE CURRENT OF c3;
Example: Use an Implicit Cursor (FOR Loop Over Queries)
DO $$
DECLARE
item RECORD;
BEGIN
FOR item IN (
SELECT last_name, job_id
FROM employees
WHERE job_id LIKE '%MANAGER%'
AND manager_id > 400
ORDER BY last_name
)
LOOP
RAISE NOTICE 'Name = %, Job=%', item.last_name, item.job_id;
END LOOP;
END $$;
Comparing Oracle PL/SQL and PostgreSQL PL/pgSQL syntax:
Action PostgreSQL Oracle PL/SQL
PL/pgSQL
Declare a bound
c2 CURSOR FOR CURSOR c1 IS
explicit cursor
SELECT * FROM SELECT * FROM
employees; employees;
Open a cursor
OPEN c2; OPEN c1;
Move Cursor to next
FETCH c2 INTO rowvar; FETCH c1 INTO rowvar;
row and fetch into a
record variable
(rowvar was declared in
the DECLARE section)
Move Cursor to next
FETCH c2 INTO emp_id, FETCH c1 INTO emp_id,
row and fetch into
emp_name, salary; emp_name, salary;
multiple scalar data
types
(
emp_id, emp_name,
was declared in
salary
the DECLARE section)
Iterate through an
FOR item IN ( FOR item IN (
Implicit Cursor via a
SELECT last_name, SELECT last_name,
Loop
job_id job_id
FROM employees FROM employees
64
Action PostgreSQL Oracle PL/SQL
PL/pgSQL
WHERE job_id LIKE WHERE job_id LIKE
'%CLERK%' '%CLERK%'
AND manager_id > 120 AND manager_id >
ORDER BY last_name 120
) ORDER BY last_name
LOOP )
> LOOP
END LOOP; >
END LOOP;
Declare a cursor with
C2 CURSOR (key integer) CURSOR c1 (key NUMBER)
variables
FOR SELECT * FROM IS SELECT * FROM
employees WHERE id = employees WHERE id =
;
key; key
Open a cursor with OPEN c2(2); or OPEN c1(2);
variables
OPEN c2(key := 2);
Exit a loop after no data EXIT WHEN NOT FOUND; EXIT WHEN c1%NOTFOUND;
found
Detect if a Cursor has FOUND %FOUND
rows remaining in its
dataset
Determine how many Not Supported but you can run with %BULK_ROWCOUNT
rows were affected every DML GET DIAGNOSTICS
from any DML integer_var = ROW_COUNT; and
statement save the results in an array
Determine which DML - %BULK_EXCEPTIONS
execution failed with
the relevant error code
Detect if the Cursor is - %ISOPEN
open
Detect if a Cursor has no NOT FOUND %NOTFOUND
rows remaining in its
dataset
Returns the number of GET DIAGNOSTICS integer_var %ROWCOUNT
rows affected by a = ROW_COUNT;
Cursor
For additional information on PostgreSQL Pl/pgSQL:
https://www.postgresql.org/docs/current/static/plpgsql-cursors.html
https://www.postgresql.org/docs/current/static/plpgsql-statements.html
65
Migrating from: Oracle Single-Row and Aggregative Functions
[Back to TOC]
Overview
Oracle provides two main categories of built-in SQL functions based on the amount of rows used as input and
generated as output.
• Single-row functions (also known as Scalar Functions) return a single result for each row of the queried
table or view. The implementation of single-row functions can be performed with a
SELECT
statement in the clause, the clause, the clause, and the
WHERE STARTWITH CONNECTBY HAVING
clause.
The single-row functions are divided into groups according to the datatypes, such as:
functions.
o NUMERIC
functions.
o CHAR
functions.
o DATETIME
• Aggregative functions (also known as Group functions) are used to summarize a group of values into a
single result. Examples include: and
AVG, MIN, MAX, SUM, COUNT, LISTAGG, FIRST,
LAST.
See the next section for a comparison of Oracle and PostgreSQL single-row functions.
For additional details:
https://docs.oracle.com/database/121/SQLRF/functions002.htm#SQLRF20031
https://docs.oracle.com/database/121/SQLRF/functions003.htm#SQLRF20035
66
Migration to: PostgreSQL Single-Row and Aggregative Functions
[Back to TOC]
Overview
PostgreSQL provides an extensive list of single-row and aggregative functions. Some functions are similar to
their Oracle counterparts (by name and functionality, or under a different name but with similar
functionality). Other functions can have identical names to their Oracle counterparts but offer different
functionality. The “Equivalent” column in the table below indicates functional equivalency.
Oracle
Function Definition PostgreSQL Function Function Definition Equivalent
Function
NUMERIC FUNCTIONS
ABS Absolute value of n: ABS(n) Absolute value of n: Yes
abs (-11.3) --> abs (-11.3) -->
11.3 11.3
CEIL Returns the smallest CEIL / CEILING Returns the nearest Yes
integer that is greater integer greater than or
than or equal to n: equal to argument:
ceil (-24.9) --> ceil (-24.9) --> -
-24 24
FLOOR Returns the largest FLOOR Returns nearest integer Yes
integer equal to or less less than or equal to
than n: argument:
floor (-43.7) floor (-43.7) -
--> -44 -> -44
MOD Remainder of n2 divided MOD Remainder of y/x: Yes
by n1: mod (10,3) --> 1
mod(10,3) --> 1
ROUND Returns n rounded to ROUND Round to nearest integer: Yes
integer places to the right round (3.49, 1) --
of the decimal point: > 3.5
round (3.49, 1) -
-> 3.5
TRUNC Returns n1 truncated to TRUNC Truncate to s decimal Yes
(Number) n2 decimal places: (Number) places:
trunc(13.5) --> trunc (13.5) -->
13 13
CHARACTER FUNCTIONS
CONCAT Returns char1 CONCAT Concatenate the text Partly
concatenated with char2: representations of all the
concat('a', 1) -- arguments:
> a1 concat('a', 1) -
-> a1
Also, can use the (||)
operators:
select 'a' ||'
'|| 'b' -->
a b
LOWER / Returns char, with all LOWER / UPPER Convert string to lower Yes
UPPER letters lowercase or or upper case:
uppercase: lower ('MR.
lower ('MR. Smith') -->
Smith’) --> mr. mr. smith
smith
67
LPAD / RPAD Returns expr1, left or LPAD Fill up the string to Yes
right padded to length n length by prepending the
characters with the characters fill left or
sequence of characters in right:
expr2: LPAD('Log-
LPAD('Log- 1',10,'*’) -->
1',10,'*') *****Log-1
--> *****Log-1
REGEXP_REP Search a string for a REGEXP_REPLACE Replace substring(s) Yes
LACE regular expression matching a POSIX regular
pattern: expression:
regexp_replace('J regexp_replace('J
ohn', '[hn].', ohn', '[hn].',
'1') --> Jo1 '1') --> Jo1
REGEXP_SUB Extends the functionality REGEXP_MATCHES Return all captured No
STR of the SUBSTR function by OR substrings resulting from
searching a string for a SUBSTRING matching a POSIX regular
regular expression expression against the
pattern: string:
REGEXP_SUBSTR( REGEXP_MATCHES
'http://www.aws.c ('http://www.aws.
om/products','htt com/products',
p://([[: '(http://[[:
alnum:]]+\.?){3,4 alnum:]]+.*/)')
}/?') -->
--> {http://www.aws.c
http://www.aws.co om/}
m/ OR
SUBSTRING
('http://www.aws.
com/products',
'(http://[[:
alnum:]]+.*/)') -
->
http://www.aws.co
m/
REPLACE Returns char with every REPLACE Replace all occurrences Yes
occurrence of search in string of substring
string replaced with a from with substring to:
replacement string: replace
replace ('abcdef', 'abc',
('abcdef', 'abc', '123') --> 123def
'123') --> 123def
LTRIM / Removes from the left or LTRIM / RTRIM Remove the longest Yes
RTRIM right end of char all of the string containing only
characters that appear in characters from
set: characters (a space by
ltrim('zzzyaws', default) from the start of
'xyz') --> string:
aws ltrim('zzzyaws',
'xyz') -->
aws
SUBSTR Return a portion of char, SUBSTRING Extract substring: No
beginning at character substring (
position, substring length 'John Smith', 6
characters long: ,1) --> S
68
substr('John
Smith', 6 ,1) -->
S
TRIM Trim leading or trailing TRIM Remove the longest Partly
characters (or both) from string containing only
a character string: characters from
trim (both 'x' characters (a space by
FROM 'xJohnxx') - default) from the start,
-> John end, or both ends: