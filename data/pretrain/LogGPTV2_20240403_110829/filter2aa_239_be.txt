AccumulateSimple（）方法就可以用于所有实现IEnumerable接口的集合类。在
这个方法的实现代码中，直接访问Account对象的Balance属性（代码文件
GenericMethods/Algorithm.cs）：
    public static class Algorithms
    {
      public static decimal AccumulateSimple(IEnumerable source)
      {
      decimal sum = 0;
      foreach (Account a in source)
      {
        sum += a.Balance;
      }
      return sum;
      }
    }
AccumulateSimple（）方法的调用方式如下：
    decimal amount = Algorithms.AccumulateSimple(accounts);
6.6.2 带约束的泛型方法
第一个实现代码的问题是，它只能用于Account对象。使用泛型方法就可以避免这个
问题。
Accumulate（）方法的第二个版本接受实现了IAccount接口的任意类型。如前面的泛
型类所述，泛型类型可以用where子句来限制。用于泛型类的这个子句也可以用于泛型方
法。Accumulate（）方法的参数改为IEnumerable。IEnumerable是泛型集合类实现
的泛型接口（代码文件GenericMethods/ Algorithms.cs）。
    public static decimal Accumulate(IEnumerable source)
        where TAccount: IAccount
    {
      decimal sum = 0;
      foreach (TAccount a in source)
      {
        sum += a.Balance;
      }
      return sum;
    }
重构的Account类现在实现接口IAccount（代码文件GenericMethods/Account.cs）：
    public class Account: IAccount
    {
      //...
IAccount接口定义了只读属性Balance和Name（代码文件
GenericMethods/IAccount.cs）：
    public interface IAccount
    {
      decimal Balance { get; }
      string Name { get; }
    }
将Account类型定义为泛型类型参数，就可以调用新的Accumulate（）方法（代码文
件GenericMethods/Program.cs）：
    decimal amount = Algorithm.Accumulate(accounts);
因为编译器会从方法的参数类型中自动推断出泛型类型参数，所以以如下方式调用
Accumulate（）方法是有效的：
    decimal amount = Algorithm.Accumulate(accounts);
6.6.3 带委托的泛型方法
泛型类型实现IAccount接口的要求过于严格。下面的示例提示了，如何通过传递一个
泛型委托来修改Accumulate（）方法。第9章详细介绍了如何使用泛型委托，以及如何使
用lambda表达式。
这个Accumulate（）方法使用两个泛型参数T1和T2。第一个参数T1用于实现
IEnumerable参数的集合，第二个参数使用泛型委托Func。其中，第
2个和第3个泛型参数都是T2类型。需要传递的方法有两个输入参数（T1和T2）和一个T2
类型的返回值（代码文件Generic-Methods/Algorithm.cs）：
    public static T2 Accumulate(IEnumerable source,
                                  Func action)
    {
      T2 sum = default(T2);
      foreach (T1 item in source)
      {
        sum = action(item, sum);
      }
      return sum;
    }
在调用这个方法时，需要指定泛型参数类型，因为编译器不能自动推断出该类型。对
于方法的第1个参数，所赋予的accounts集合是IEnumerable类型。对于第2个参
数，使用一个lambda表达式来定义Account和decimal类型的两个参数，返回一个小数。对
于每一项，通过Accumulate（）方法调用这个lambda表达式（代码文件
GenericMethods/Program.cs）：
    decimal amount = Algorithm.Accumulate(
                      accounts, (item, sum) => sum += item.Balance);
不要为这种语法伤脑筋。该示例仅说明了扩展Accumulate（）方法的可能方式。
6.6.4 泛型方法规范
泛型方法可以重载，为特定的类型定义规范。这也适用于带泛型参数的方法。
Foo（）方法定义了4个版本，第1个版本接受一个泛型参数，第2个版本是用于int参数的
专用版本。第3个Foo方法接受两个泛型参数，第4个版本是第3个版本的专用版本，其第
一个参数是int类型。在编译期间，会使用最佳匹配。如果传递了一个int，就选择带int参
数的方法。对于任何其他参数类型，编译器会选择方法的泛型版本（代码文件
Specialization/Program.cs）：
    public class MethodOverloads
    {
      public void Foo(T obj)
      {
        WriteLine($"Foo(T obj), obj type: {obj.GetType().Name}");
      }
      public void Foo(int x)
      {
        WriteLine("Foo(int x)");
      }
      public void Foo(T1 obj1, T2 obj2)
      {
        WriteLine($"Foo(T1 obj1, T2 obj2); {obj1.GetType().Name} " +
          $"{obj2.GetType().Name}");
      }
      public void Foo(int obj1, T obj2)
      {
        WriteLine($"Foo(int obj1, T obj2); {obj2.GetType().Name}");
      }
      public void Bar(T obj)
      {
        Foo(obj);
      }
    }
Foo（）方法现在可以通过任意参数类型来调用。下面的示例代码传递了int和string
值，调用所有4个Foo方法：
    static void Main()
    {
      var test = new MethodOverloads();
      test.Foo(33);
      test.Foo("abc");
      test.Foo("abc", 42);
      test.Foo(33, "abc");
    }
运行该程序，可以从输出中看出选择了最佳匹配的方法：
    Foo(int x)
    Foo(T obj), obj type: String
    Foo(T1 obj1, T2 obj2); String Int32
    Foo(int obj1, T obj2); String
需要注意的是，所调用的方法是在编译期间而不是运行期间定义的。这很容易举例说
明：添加一个调用Foo（）方法的Bar（）泛型方法，并传递泛型参数值：
    public class MethodOverloads
    {
      // ...
      public void Bar(T obj)
      {
        Foo(obj);
      }
Main（）方法现在改为调用传递一个int值的Bar（）方法：
    static void Main()
    {
      var test = new MethodOverloads();
      test.Bar(44);
从控制台的输出可以看出，Bar（）方法选择了泛型Foo（）方法，而不是用int参数
重载的Foo（）方法。原因是编译器是在编译期间选择Bar（）方法调用的Foo（）方法。
由于Bar（）方法定义了一个泛型参数，而且泛型Foo（）方法匹配这个类型，所以调用了
Foo（）方法。在运行期间给Bar（）方法传递一个int值不会改变这一点。
    Foo(T obj), obj type: Int32
6.7 小结
本章介绍了CLR中一个非常重要的特性：泛型。通过泛型类可以创建独立于类型的
类，泛型方法是独立于类型的方法。接口、结构和委托也可以用泛型的方式创建。泛型引
入了一种新的编程方式。我们介绍了如何实现相应的算法（尤其是操作和谓词）以用于不
同的类，而且它们都是类型安全的。泛型委托可以去除集合中的算法。
本书还将探讨泛型的更多特性和用法。第9章介绍了常常实现为泛型的委托，第11章
论述了泛型集合类，第13章讨论了泛型扩展方法。第7章说明如何对于数组使用泛型方
法。
第7章
数组和元组
本章要点
● 简单数组
● 多维数组
● 锯齿数组
● Array类
● 作为参数的数组
● 枚举
● 元组
● 结构比较
本章源代码下载地址（wrox.com）：
打开网页http://www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可
下载本章源代码。本章代码分为以下几个主要的示例文件：
● SimpleArrays
● SortingSample
● ArraySegment
● YieldSample
● TuplesSample
● StructuralComparison
7.1 同一类型和不同类型的多个对象
如果需要使用同一类型的多个对象，就可以使用集合（参见第11章）和数组。C#用
特殊的记号声明、初始化和使用数组。Array类在后台发挥作用，它为数组中元素的排序
和过滤提供了几个方法。使用枚举器，可以迭代数组中的所有元素。
如果需要使用不同类型的多个对象，可以使用Tuple（元组）类型。
7.2 简单数组
如果需要使用同一类型的多个对象，就可以使用数组。数组是一种数据结构，它可以
包含同一类型的多个元素。
7.2.1 数组的声明
在声明数组时，应先定义数组中元素的类型，其后是一对空方括号和一个变量名。例
如，下面声明了一个包含整型元素的数组：
      int[] myArray;
7.2.2 数组的初始化
声明了数组后，就必须为数组分配内存，以保存数组的所有元素。数组是引用类型，
所以必须给它分配堆上的内存。为此，应使用new运算符，指定数组中元素的类型和数量
来初始化数组的变量。下面指定了数组的大小。
      myArray = new int[4];
  注意： 值类型和引用类型请参见第3章。
在声明和初始化数组后，变量myArray就引用了4个整型值，它们位于托管堆上，如
图7-1所示。
图7-1
  注意： 在指定了数组的大小后，如果不复制数组中的所有元素，就不能重新
设置数组的大小。如果事先不知道数组中应包含多少个元素，就可以使用集合。集合
请参见第11章。
除了在两个语句中声明和初始化数组之外，还可以在一个语句中声明和初始化数组：
      int[] myArray = new int[4];
还可以使用数组初始化器为数组的每个元素赋值。数组初始化器只能在声明数组变量
时使用，不能在声明数组之后使用。
      int[] myArray = new int[4] {4, 7, 11, 2};
如果用花括号初始化数组，则还可以不指定数组的大小，因为编译器会自动统计元素
的个数：
      int[] myArray = new int[] {4, 7, 11, 2};
使用C#编译器还有一种更简化的形式。使用花括号可以同时声明和初始化数组，编
译器生成的代码与前面的例子相同：
      int[] myArray = {4, 7, 11, 2};
7.2.3 访问数组元素
在声明和初始化数组后，就可以使用索引器访问其中的元素了。数组只支持有整型参
数的索引器。
通过索引器传递元素编号，就可以访问数组。索引器总是以0开头，表示第一个元
素。可以传递给索引器的最大值是元素个数减1，因为索引从0开始。在下面的例子中，数
组myArray用4个整型值声明和初始化。用索引器对应的值0、1、2和3就可以访问该数组
中的元素。
    int[] myArray = new int[] {4, 7, 11, 2};
    int v1 = myArray[0]; // read first element
    int v2 = myArray[1]; // read second element
    myArray[3] = 44;     // change fourth element
 注意： 
如果使用错误的索引器值（大于数组的长度），就会抛出
IndexOutOfRangeException类型的异常。
如果不知道数组中的元素个数，则可以在for语句中使用Length属性：
    for (int i = 0; i  $"{FirstName} {LastName}";
    }
声明一个包含两个Person元素的数组与声明一个int数组类似：
    Person[] myPersons = new Person[2];
但是必须注意，如果数组中的元素是引用类型，就必须为每个数组元素分配内存。若
使用了数组中未分配内存的元素，就会抛出NullReferenceException类型的异常。
  注意： 第14章介绍了错误和异常的详细内容。
使用从0开始的索引器，可以为数组的每个元素分配内存：
    myPersons[0] = new Person { FirstName="Ayrton", LastName="Senna" };
    myPersons[1] = new Person { FirstName="Michael", LastName="Schumacher" };
图7-2显示了Person数组中的对象在托管堆中的情况。myPersons是存储在栈上的一个
变量，该变量引用了存储在托管堆上的Person元素对应的数组。这个数组有足够容纳两个
引用的空间。数组中的每一项都引用了一个Person对象，而这些Person对象也存储在托管
堆上。
图7-2
与int类型一样，也可以对自定义类型使用数组初始化器：
    Person[] myPersons2 =
    {
      new Person { FirstName="Ayrton", LastName="Senna"},
      new Person { FirstName="Michael", LastName="Schumacher"}
    };
图7-3
7.3 多维数组
一般数组（也称为一维数组）用一个整数来索引。多维数组用两个或多个整数来索
引。
图7-3是二维数组的数学表示法，该数组有3行3列。
第1行的值是1、2和3，第3行的值是7、8和9。
在C#中声明这个二维数组，需要在方括号中加上一个
逗号。数组在初始化时应指定每一维的大小（也称为
阶）。接着，就可以使用两个整数作为索引器来访问数组
中的元素：
    int[, ] twodim = new int[3, 3];
    twodim[0, 0] = 1;
    twodim[0, 1] = 2;
    twodim[0, 2] = 3;
    twodim[1, 0] = 4;
    twodim[1, 1] = 5;
    twodim[1, 2] = 6;
    twodim[2, 0] = 7;
    twodim[2, 1] = 8;
    twodim[2, 2] = 9;
  注意： 声明数组后，就不能修改其阶数了。
如果事先知道元素的值，就可以使用数组索引器来初始化二维数组。在初始化数组
时，使用一个外层的花括号，每一行用包含在外层花括号中的内层花括号来初始化。
    int[, ] twodim = {
                      {1, 2, 3},
                      {4, 5, 6},
                      {7, 8, 9}