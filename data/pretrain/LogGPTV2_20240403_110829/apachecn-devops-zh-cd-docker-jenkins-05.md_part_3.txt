     redis:
          image: redis:latest
```
`docker-compose build`命令构建映像。我们也可以要求 Docker Compose 在使用`docker-compose --build up`命令运行容器之前构建映像。
# 扩展服务
Docker Compose 提供了自动创建同一容器的多个实例的功能。我们可以在`docker-compose.yml`中指定`replicas: `参数，或者使用`docker-compose scale`命令。
例如，让我们再次运行环境并复制`calculator`容器:
```
$ docker-compose up -d
$ docker-compose scale calculator=5
```
我们可以检查哪些容器正在运行:
```
$ docker-compose ps
 Name                     Command             State Ports 
---------------------------------------------------------------------------
calculator_calculator_1   java -jar app.jar   Up   0.0.0.0:32777->8080/tcp
calculator_calculator_2   java -jar app.jar   Up   0.0.0.0:32778->8080/tcp
calculator_calculator_3   java -jar app.jar   Up   0.0.0.0:32779->8080/tcp
calculator_calculator_4   java -jar app.jar   Up   0.0.0.0:32781->8080/tcp
calculator_calculator_5   java -jar app.jar   Up   0.0.0.0:32780->8080/tcp
calculator_redis_1        docker-entrypoint.sh redis ... Up 6379/tcp
```
五个`calculator`容器完全相同，除了容器 ID、容器名称和公布的端口号。
它们都使用 Redis 容器的同一个实例。我们现在可以停止并移除所有容器:
```
$ docker-compose down
```
缩放容器是 Docker Compose 最令人印象深刻的特性之一。通过一个命令，我们可以增加和减少克隆实例的数量。Docker Compose 负责清理不再使用的容器。
我们已经看到了 Docker Compose 工具最有趣的功能。
在下一节中，我们将关注如何在自动化验收测试的环境中使用它。
# 用 Docker 编写进行验收测试
Docker Compose 非常适合验收测试过程，因为它支持用一个命令设置整个环境。更重要的是，在执行测试之后，还可以用一个命令清理环境。如果我们决定在生产中使用 Docker Compose，那么另一个好处是验收测试使用与发布的应用完全相同的配置、工具和命令。
为了了解如何将 Docker Compose 应用于 Jenkins 验收测试阶段，让我们继续计算器项目示例，并将基于 Redis 的缓存添加到应用中。然后，我们将看到运行验收测试的两种不同方法:Jenkins 优先法和 Docker 优先法。
# 使用多容器环境
Docker Compose 提供容器之间的依赖关系；换句话说，它将一个容器链接到另一个容器。从技术上讲，这意味着容器共享同一个网络，并且一个容器可以从另一个容器中看到。为了继续我们的示例，我们需要在代码中添加这种依赖性，我们将分几个步骤来完成。
# 向 Gradle 添加 Redis 客户端库
在`build.gradle`文件中，将以下配置添加到`dependencies`部分:
```
compile "org.springframework.data:spring-data-redis:1.8.0.RELEASE"
compile "redis.clients:jedis:2.9.0"
```
它添加了负责与 Redis 通信的 Java 库。
# 添加到 Redis 缓存配置
添加新文件`src/main/java/com/leszko/calculator/CacheConfig.java`:
```
package com.leszko.calculator;
import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.CachingConfigurerSupport;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.cache.RedisCacheManager;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
/** Cache config. */
@Configuration
@EnableCaching
public class CacheConfig extends CachingConfigurerSupport {
    private static final String REDIS_ADDRESS = "redis";
    @Bean
    public JedisConnectionFactory redisConnectionFactory() {
        JedisConnectionFactory redisConnectionFactory = new
          JedisConnectionFactory();
        redisConnectionFactory.setHostName(REDIS_ADDRESS);
        redisConnectionFactory.setPort(6379);
        return redisConnectionFactory;
    }
    @Bean
    public RedisTemplate redisTemplate(RedisConnectionFactory cf) {
        RedisTemplate redisTemplate = new RedisTemplate();
        redisTemplate.setConnectionFactory(cf);
        return redisTemplate;
    }
    @Bean
    public CacheManager cacheManager(RedisTemplate redisTemplate) {
        return new RedisCacheManager(redisTemplate);
    }
}
```
这是标准的 Spring 缓存配置。请注意，对于 Redis 服务器地址，我们使用`redis`主机名，由于 Docker Compose 链接机制，该主机名自动可用。
# 添加 Spring Boot 缓存
配置缓存后，我们最终可以将缓存添加到我们的 web 服务中。为此，我们需要将`src/main/java/com/leszko/calculator/Calculator.java`文件更改为如下所示:
```
package com.leszko.calculator;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;
/** Calculator logic */
@Service
public class Calculator {
    @Cacheable("sum")
    public int sum(int a, int b) {
        return a + b;
    }
}
```
从现在开始，求和计算被缓存在 Redis 中，当我们调用`calculator` web 服务的`/sum`端点时，它将首先尝试从缓存中检索结果。
# 检查缓存环境
假设我们在计算器项目的目录中有 docker-compose.yml，我们现在可以启动容器:
```
$ ./gradlew clean build
$ docker-compose up --build -d
```
我们可以检查发布计算器服务的端口:
```
$ docker-compose port calculator 8080
0.0.0.0:32783
```
如果我们在`localhost:32783/sum?a=1&b=2`打开浏览器，计算器服务应该回复`3`，同时访问`redis`服务并将缓存的值存储在那里。要查看缓存值是否真的存储在 Redis 中，我们可以访问`redis`容器并查看 Redis 数据库内部:
```
$ docker-compose exec redis redis-cli
127.0.0.1:6379> keys *
1) "\xac\xed\x00\x05sr\x00/org.springframework.cache.interceptor.SimpleKeyL\nW\x03km\x93\xd8\x02\x00\x02I\x00\bhashCode[\x00\x06paramst\x00\x13[Ljava/lang/Object;xp\x00\x00\x03\xe2ur\x00\x13[Ljava.lang.Object;\x90\xceX\x9f\x10s)l\x02\x00\x00xp\x00\x00\x00\x02sr\x00\x11java.lang.Integer\x12\xe2\xa0\xa4\xf7\x81\x878\x02\x00\x01I\x00\x05valuexr\x00\x10java.lang.Number\x86\xac\x95\x1d\x0b\x94\xe0\x8b\x02\x00\x00xp\x00\x00\x00\x01sq\x00~\x00\x05\x00\x00\x00\x02"
2) "sum~keys"
```
`docker-compose exec`命令在`redis`容器内执行`redis-cli`(Redis 客户端浏览其数据库内容)命令。然后，我们可以运行`keys *`来打印 Redis 中存储的所有内容。
您可以使用计算器应用玩得更多，并以不同的值打开浏览器，查看 Redis 服务内容是否增加。之后，用`docker-compose down`命令拆掉环境很重要。
在接下来的部分中，我们将看到多容器项目的两种验收测试方法。显然，在我们对 Jenkins 采取任何行动之前，我们需要将所有更改的文件(包括`docker-compose.yml`)提交并推送到 GitHub。
Note that, for further steps, Docker Compose has to be installed on Jenkins executors.
# 方法 1–Jenkins-首次验收测试
第一种方法是以我们在单个容器应用中所做的相同方式执行验收测试。唯一的区别是，现在我们有两个容器在运行，如下图所示:
![](img/4d652e64-a061-46a8-ac71-e7dbaa9b6960.png)
从用户的角度来看`redis`容器是不可见的，因此单容器和多容器验收测试的唯一区别是我们使用了`docker-compose up`命令而不是`docker run`。
其他 Docker 命令也可以用它们的 Docker Compose 等价物替换:`docker build`的`docker-compose build`和`docker push`的`docker-compose push`。然而，如果我们只构建一个映像，那么留下 Docker 命令也是可以的。
# 更改临时部署阶段
让我们将`Deploy to staging`阶段更改为使用 Docker 作曲:
```
stage("Deploy to staging") {
    steps {
        sh "docker-compose up -d"
    }
}
```
我们必须以完全相同的方式改变清理方式:
```
post {
    always {
        sh "docker-compose down"
    }
}
```
# 更改验收测试阶段
出于使用`docker-compose scale`的目的，我们没有指定发布我们的 web 服务的端口号。如果我们这样做了，那么扩展过程将会失败，因为所有克隆都将尝试在相同的端口号下发布。相反，我们让 Docker 选择端口。因此，我们需要更改`acceptance_test.sh`脚本，首先找到端口号，然后用正确的端口号运行`curl`。
```
#!/bin/bash
CALCULATOR_PORT=$(docker-compose port calculator 8080 | cut -d: -f2)
test $(curl localhost:$CALCULATOR_PORT/sum?a=1\&b=2) -eq 3
```
让我们弄清楚我们是如何找到端口号的:
1.  `docker-compose port calculator 8080`命令检查发布网络服务的 IP 和端口地址(例如，它返回`127.0.0.1:57648`)。
2.  `cut -d: -f2`只选择端口(例如对于`127.0.0.1:57648`，返回`57648`)。
我们可以将更改推送到 GitHub，并观察 Jenkins 的结果。这个想法仍然和单容器应用一样，设置环境，运行验收测试套件，并拆除环境。尽管这种验收测试方法很好，也很有效，但让我们看看替代解决方案。
# 方法 2–Docker-首次验收测试
在 Docker 优先的方法中，我们创建了一个额外的`test`容器，从 Docker 主机内部执行测试，如下图所示:
![](img/78c8fd68-b33a-41f8-9d5a-a8ae5998f5aa.png)
这种方法在检索端口号方面方便了验收测试脚本，并且可以在没有 Jenkins 的情况下轻松运行。这也更像是 Docker 风格。
缺点是我们需要创建一个单独的 Dockerfile 和 Docker Compose 配置来进行测试。
# 为验收测试创建文档文件
我们将从为验收测试创建一个单独的 Dockerfile 开始。让我们在计算器项目中创建新目录`acceptance`，并在其中创建一个 Dockerfile:
```
FROM ubuntu:trusty
RUN apt-get update && \
    apt-get install -yq curl
COPY test.sh .
CMD ["bash", "test.sh"]
```
它创建一个运行验收测试的映像。
# 为验收测试创建 docker-compose.yml
在同一个目录中，让我们创建`docker-compose-acceptance.yml`来提供测试编排:
```
version: "3"
services:
    test:
        build: ./acceptance
```
它创建一个新的容器，该容器链接到被测试的容器:`calculator`。此外，在内部，它总是 8080，这样就不需要寻找端口的棘手部分。
# 创建验收测试脚本
最后缺少的部分是测试脚本。在同一个目录中，让我们创建代表验收测试的`test.sh`文件:
```
#!/bin/bash
sleep 60
test $(curl calculator:8080/sum?a=1\&b=2) -eq 3
```
它与之前的验收测试脚本非常相似，唯一的区别是我们可以通过`calculator`主机名来寻址计算器服务，并且端口号总是`8080`。此外，在这种情况下，我们在脚本中等待，而不是在 Jenkins 文件中。