  * ftp
  * http
  * https
  * jar
  * mailto
  * netdoc
常用的函数
    HttpClient.execute
    HttpClient.executeMethod
    HttpURLConnection.connect
    HttpURLConnection.getInputStream
    URL.openStream
**修复**
  * 使用白名单校验HTTP请求url地址
  * 避免将请求响应及错误信息返回给用户
  * 禁用不需要的协议及限制请求端口,仅仅允许http和https请求等（这点待研究）
## CSRF篇
**简单描述：**
跨站请求伪造是一种使已登录用户在不知情的情况下执行某种动作的攻击。因为攻击者看不到伪造请求的响应结果，所以CSRF攻击主要用来`执行动作`，而非窃取用户数据。当受害者是一个普通用户时，CSRF可以实现在其不知情的情况下`转移用户资金、发送邮件`等操作；但是如果受害者是一个具有`管理员权限的用户`时CSRF则可能威胁到整个Web系统的安全。
**审计：**
一些增删改查方法，是否进行`Referer头检验`、`token检验` `无法构造的随机数参数`、`验证码密码`。
搜索`session["token"]`
**修护：**
Referer头检验、token检验。
## XXE篇
**简单描述：**
当`允许引用外部实体且存在输入点`时，恶意攻击者即可构造恶意内容访问服务器资源,如读取 passwd 文件
**示例：**
    @RequestMapping("/xxetest")
        public String xxetest(HttpServletRequest request) throws DocumentException {
            String xmldata = request.getParameter("data");
            SAXReader sax=new SAXReader();
            Document document=sax.read(new ByteArrayInputStream(xmldata.getBytes()));
            Element root= ((org.dom4j.Document) document).getRootElement();
            List rowList = root.selectNodes("//msg");
            Iterator iter1 = rowList.iterator();
            if (iter1.hasNext()) {
                Element beanNode = (Element) iter1.next();
                return beanNode.getTextTrim();
            }
            return "error";
        }
`root.selectNodes("//msg")`获取根目录下的所有标签
**利用：**
    ]>
    &test;
渗透的话可以结合burpsuite的插件：collaborator
**审计：**
  1. 判断使用哪种XML解析器
  2. 搜索是否有禁用外部实体配置（修护部分有具体代码）
  3. 是否有外部输入点进行解析
**修护：**
  1. saxReader
    saxReader.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true); 
    saxReader.setFeature("http://xml.org/sax/features/external-general-entities", false); 
    saxReader.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
  1. saxBuilder
    SAXBuilder builder = new SAXBuilder(); 
    builder.setFeature("http://apache.org/xml/features/disallow-doctype-decl",true); 
    builder.setFeature("http://xml.org/sax/features/external-general-entities", false); 
    builder.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
    Document doc = builder.build(new File(fileName));
  1. saxTransformerFactory
    SAXTransformerFactory sf = SAXTransformerFactory.newInstance(); sf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, ""); sf.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, ""); 
    sf.newXMLFilter(Source);
    Note: Use of the following XMLConstants requires JAXP 1.5, which was added to Java in 7u40 and Java 8: 
    javax.xml.XMLConstants.ACCESS_EXTERNAL_DTD
    javax.xml.XMLConstants.ACCESS_EXTERNAL_SCHEMA javax.xml.XMLConstants.ACCESS_EXTERNAL_STYLESHEET
  1. schemaFactory
    SchemaFactory factory = SchemaFactory.newInstance("http://www.w3.org/2001/XMLSchema"); factory.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, ""); factory.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "");
    Schema schema = factory.newSchema(Source);
  1. xmlInputFactory
    xmlInputFactory.setProperty(XMLInputFactory.SUPPORT_DTD, false); // This disables DTDs entirely for that factory
    xmlInputFactory.setProperty("javax.xml.stream.isSupportingExternalEntities", false); // disable external entities
  1. xmlReader
    XMLReader reader = XMLReaderFactory.createXMLReader(); 
    reader.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true); 
    reader.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false); // This may not be strictly required as DTDs shouldn't be allowed at all, per previous line.
    reader.setFeature("http://xml.org/sax/features/external-general-entities", false); 
    reader.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
  1. XPathExpression
    DocumentBuilderFactory df = DocumentBuilderFactory.newInstance(); df.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, ""); 
    df.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "");
    DocumentBuilder builder = df.newDocumentBuilder();
    String result = new XPathExpression().evaluate( builder.parse(new ByteArrayInputStream(xml.getBytes())) );
  1. transformerFactory
    TransformerFactory tf = TransformerFactory.newInstance(); 
    tf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, ""); tf.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "");
  1. Validator
    SchemaFactory factory = SchemaFactory.newInstance("http://www.w3.org/2001/XMLSchema"); 
    Schema schema = factory.newSchema();
    Validator validator = schema.newValidator(); 
    validator.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, ""); validator.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "");
  1. Unmarshaller
    SAXParserFactory spf = SAXParserFactory.newInstance(); 
    spf.setFeature("http://xml.org/sax/features/external-general-entities", false); spf.setFeature("http://xml.org/sax/features/external-parameter-entities", false); spf.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false); 
    Source xmlSource = new SAXSource(spf.newSAXParser().getXMLReader(), new InputSource(new StringReader(xml)));
    JAXBContext jc = JAXBContext.newInstance(Object.class);
    Unmarshaller um = jc.createUnmarshaller();
    um.unmarshal(xmlSource);
## XML篇
**简单描述：**
一个用户，如果他被允许输入结构化的XML片段，则他可以在 XML 的数据域中`注入 XML 标签`来改写目标 XML 文档的结构与内容。
**示例：**
    private void createXMLStream(BufferedOutputStream outStream, User user) throws IOException
    {
    String xmlString;
    xmlString = "operator" + user.getUserId()
    +"" + user.getDescription() +
    "";
    outStream.write(xmlString.getBytes());
    outStream.flush();
    }
输入以下恶意代码
    hhhadministratorhhh
由于 SAX 解析器(`org.xml.sax and javax.xml.parsers.SAXParser`)在解释 XML 文档时会将`第二个role
域的值覆盖前一个 role 域的值`，因此导致此用户角色由操作员提升为了管理员。
**审计方法：**
全局搜索如下字符串
  * xml
  * StreamSource 
  * XMLConstants 
  * StringReader
  * **xmlString**
在项目中搜索. Xsd 文件
**修护：**
  1. 白名单。只能包含`字母、数字、下划线`。
    private void createXMLStream(BufferedOutputStream outStream, User user) throws IOException
    {
      if (!Pattern.matches("[_a-bA-B0-9]+", user.getUserId()))
      {
        ...
      }
      if (!Pattern.matches("[_a-bA-B0-9]+", user.getDescription()))
      {
        ...
      }
      String xmlString = "" + user.getUserId()
      \+ "operator"
      \+ user.getDescription() + ""; 
      outStream.write(xmlString.getBytes());
      outStream.flush();
    }
  1. 使用 `dom4j`来构建 XML。
dom4j 是一个良好定义的、开源的 XML 工具库。Dom4j将会`对文本数据域进行 XML 编码`，从而使得 XML 的原始结构和格式免受破坏。
    public static void buidlXML(FileWriter writer, User user) throws IOException
    {
      Document userDoc = DocumentHelper.createDocument();
      Element userElem = userDoc.addElement("user");
      Element idElem = userElem.addElement("id");
      idElem.setText(user.getUserId());
      Element roleElem = userElem.addElement("role");
      roleElem.setText("operator");
      Element descrElem = userElem.addElement("description"); 
      descrElem.setText(user.getDescription());
      XMLWriter output = null;
      try{
        OutputFormat format = OutputFormat.createPrettyPrint(); 
        format.setEncoding("UTF-8");
        output = new XMLWriter(writer, format);
        output.write(userDoc);
        output.flush();
      }
      finally{
        try{
          output.close();
        }
        catch (Exception e){}
      }
    }
## 越权篇
水平越权和垂直越权。
**审计：**
在每个`request.getParameter("userid");`之后查看是否有检验当前用户与要进行增删改查的用户。
**修护：**
获取当前登陆用户并校验该用户是否具有当前操作权限，并校验请求操作数据是否属于当前登陆用户，当前登陆用户标识不能从用户可控的请求参数中获取。
## 批量请求篇
**简单描述：**
在部分接口，没有进行验证码等防护，导致可以无限制重发接口，结果是浪费了系统资源的才算。比如一直发短信验证码，但是可以不断查询就不算批量请求漏洞。批量请求与csrf的修护建议类似，但由于使用场景不同，因此漏洞不同。
**修护：**
  * 验证码
  * token
  * 对同一个用户发起这类请求的频率、每小时及每天发送量在服务端做限制，不可在前端实现限制
  * 对参数使用不可预测的随机数
## 命令执行篇
**简单描述：**
执行的命令用户可控。
**示例：**
    String cmd=request.getParameter("cmd");
    Runtime.getRuntime.exec(cmd);
**审计：**
查找是否有使用如下方法，且其中的内容用户可控。
    Runtime.exec
    ProcessBuilder.start
    GroovyShell.evaluate
## 反序列化-代码执行篇
**简单描述：**
Java 程序使用 ObjectInputStream 对象的`readObject`方法将反序列化数据转换为 java
对象。但当输入的反序列化的数据可`被用户控制`，那么攻击者即可通过构造恶意输入，让反序列化产生非预期的对象，在此过程中`执行构造的任意代码`。
**示例：**
    //读取输入流,并转换对象
    InputStream in=request.getInputStream(); 
    ObjectInputStream ois = new ObjectInputStream(in); //恢复对象
    ois.readObject();
    ois.close();
**审计：**
java 序列化的数据一般会以标记(`ac ed 00 05`)开头，base64 编码后的特征为`rO0AB`。
找出反序列化函数调用点：
  * ObjectInputStream.readObject
  * ObjectInputStream.readUnshared
  * XMLDecoder.readObject
  * Yaml.load
  * XStream.fromXML
  * ObjectMapper.readValue
  * JSON.parseObject
RMI:是 Java 的一组拥护开发分布式应用程序的 API，实现了不同操作系统之间程序的方法调用。RMI 的传输 100%基于反序列化，Java RMI
的默认端口是 1099 端口。
**修护：**
[修护方案参考链接](https://xz.aliyun.com/t/41/)
  1. 白名单。只允许某些类被反序列化。
以下例子通过重写ObjectInputSream中的resolveClass方法，读取需要反序列化的类名与SerialObject.class对比，判断是否合法。SerialKiller就是利用这种原理而写的jar包。
  2.     /**只允许反序列化 SerialObject class */
       @Override
        protected Class resolveClass(ObjectStreamClass desc) throws IOException,
            ClassNotFoundException {
            if (!desc.getName().equals(SerialObject.class.getName())) {
                throw new InvalidClassException(
                        "Unauthorized deserialization attempt",
                        desc.getName());
        }
            return super.resolveClass(desc);
        }
        }
SerialKiller简单用法
        ObjectInputStream ois = new SerialKiller(is, "/etc/serialkiller.conf");
    String msg = (String) ois.readObject();
  3. Apache Commons IO Serialization 包中的`ValidatingObjectInputStream` 类的`accept`方法来实现反序列化类白/黑名单控制
        Object obj;
    ByteArrayInputStream bais = new ByteArrayInputStream(buffer);
    // Use ValidatingObjectInputStream instead of InputStream
    ValidatingObjectInputStream ois = new   ValidatingObjectInputStream(bais); 
    //只允许反序列化SerialObject class
    ois.accept(SerialObject.class);
    obj = ois.readObject();
## 反序列化-权限过高篇
**简单描述：**
没懂所以不想写
**审计：**
手工搜索以下文本
  * public * writeObject 
  * public * readObject 
  * public _readResolve public_ writeReplace
**修护：**
  * private void writeObject
  * private void readObject 
  * protected Object readResolve 
  * protected Object writeReplace
## 敏感数据序列化篇
**简单描述：**