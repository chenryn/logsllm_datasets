passes (length > MAX_SIZE) because length is promoted to a signed int for the 
comparison and retains its negative value, which is less than MAX_SIZE (1024). This 
result demonstrates that the length variable is treated as unsigned in one case and 
signed in another case because of the other operands used in the comparison. 
When dealing with data types smaller than int, integer promotions cause narrow 
values to become signed integers. This is a value-preserving promotion and not much 
of a problem in itself. However, sometimes comparisons can be promoted to a signed 
type unintentionally. Listing 6-21 illustrates this problem. 
Listing 6-21. Signed Comparison Vulnerability 
int read_data(int sockfd) 
{ 
    char buf[1024]; 
    unsigned short max = sizeof(buf); 
    short length; 
    length = get_network_short(sockfd); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
284 
    if(length > max){ 
        error("bad length: %d\n", length); 
        return 1; 
    } 
    if(read(sockfd, buf, length)  1024) 
        return 1; 
    return n; 
} 
int main(int argc, char **argv) 
{ 
    unsigned long n; 
    char buf[1024]; 
    if(argc >), division (/), and modulus (%). These operators can produce 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
290 
unexpected negative results when they're used with signed operands because of their 
underlying machine-level operations being sign-aware. As a code reviewer, you 
should be on the lookout for misuse of these operators because they can produce 
results that fall outside the range of expected values and catch developers off-guard. 
The right shift operator (>>) is often used in applications in place of the division 
operator (when dividing by powers of 2). Problems can happen when using this 
operator with a signed integer as the left operand. When right-shifting a negative 
value, the sign of the value is preserved by the underlying machine performing a 
sign-extending arithmetic shift. This sign-preserving right shift is shown in Listing 
6-25. 
Listing 6-25. Sign-Preserving Right Shift 
signed char c = 0x80; 
c >>= 4; 
1000 0000  value before right shift 
1111 1000  value after right shift 
Listing 6-26 shows how this code might produce an unexpected result that leads to a 
vulnerability. It's close to an actual vulnerability found recently in client code. 
Listing 6-26. Right Shift Vulnerability Example 
int print_high_word(int number) 
{ 
    char buf[sizeof("65535")]; 
    sprintf(buf, "%u", number >> 16); 
    return 0; 
} 
This function is designed to print a 16-bit unsigned integer (the high 16 bits of the 
number argument). Because number is signed, the right shift sign-extends number by 16 
bits if it's negative. Therefore, the %u specifier to sprintf() has the capability of 
printing a number much larger than sizeof("65535"), the amount of space allocated 
for the destination buffer, so the result is a buffer overflow. Vulnerable right shifts are 
good examples of bugs that are difficult to locate in source code yet readily visible in 
assembly code. In Intel assembly code, a signed, or arithmetic, right shift is 
performed with the sar mnemonic. A logical, or unsigned, right shift is performed with 
the shr mnemonic. Therefore, analyzing the assembly code can help you determine 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
291 
whether a right shift is potentially vulnerable to sign extension. Table 6-9 shows 
signed and unsigned right-shift operations in the assembly code. 
Table 6-9. Signed Versus Unsigned Right-Shift Operations in Assembly 
Signed Right-Shift Operations Unsigned Right-Shift Operations 
mov eax, [ebp+8] 
mov eax, [ebp+8] 
sar eax, 16 
shr eax, 16 
push eax 
push eax 
push offset string 
push offset string 
lea eax, [ebp+var_8] 
lea eax, [ebp+var_8] 
push eax 
push eax 
call sprintf 
call sprintf 
Division (/) is another operator that can produce unexpected results because of sign 
awareness. Whenever one of the operands is negative, the resulting quotient is also 
negative. Often, applications don't account for the possibility of negative results when 
performing division on integers. Listing 6-27 shows how using negative operands 
could create a vulnerability with division. 
Listing 6-27. Division Vulnerability Example 
int read_data(int sockfd) 
{ 
    int bitlength; 
    char *buffer; 
    bitlength = network_get_int(length); 
    buffer = (char *)malloc(bitlength / 8 + 1); 
    if (buffer == NULL) 
        die("no memory"); 
    if(read(sockfd, buffer, bitlength / 8) < 0){ 
        error("read error: %m"); 
        return -1; 
    } 
    return 0; 
} 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
292 
Listing 6-27 takes a bitlength parameter from the network and allocates memory 
based on it. The bitlength is divided by 8 to obtain the number of bytes needed for 
the data that's subsequently read from the socket. One is added to the result, 
presumably to store extra bits in if the supplied bitlength isn't a multiple of 8. If the 
division can be made to return -1, the addition of 1 produces 0, resulting in a small 
amount of memory being allocated by malloc(). Then the third argument to read() 
would be -1, which would be converted to a size_t and interpreted as a large positive 
value. 
Similarly, the modulus operator (%) can produce negative results when dealing with a 
negative dividend operand. Code auditors should be on the lookout for modulus 
operations that don't properly sanitize their dividend operands because they could 
produce negative results that might create a security exposure. Modulus operators 
are often used when dealing with fixed-sized arrays (such as hash tables), so a 
negative result could immediately index before the beginning of the array, as shown 