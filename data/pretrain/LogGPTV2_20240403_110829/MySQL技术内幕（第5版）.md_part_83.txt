标记经常会被省略。在XHTML 里，标记必不可少。对于没有任何内容的 HTML
结束标记。例如，段落本应该被放在和标记之间，但是在HTML文档里，
与HTML有所不同，XHTML要求文档中的每一个起始标记，都必须有一个与之配对的
第8章用Perl DBI编写MySQL 程序
器对HTML的解释往往也不同。例如，它们对不规范的HTML文档便有着
一种常见的约定是
但其格式定义更加完善。HTML 易于学习和使用，但有一个问
格式的输出。如果你使用的早期的CGI.pm模块版本，输比
是
，将其名字用作它们的值。
而且必须用引号引起来。
一
一自己编写HTML难以做到。例如，自2.69版开
，在斜线前面加一个空格，把它们写成和
和
在XHTML文档里，上面那
对于那些在HTML里通常不
我们将根据CGI.pm
“不太容易”
开
---
## Page 359
脚本时，这个参数还没有值，于是该脚本将生成一个初始页面。当你指明了要看的信息之后，
页面时把某个参数设定为一个特定值，用以把你再次调用它的意图告知它。当你第一次调用该
容，但是各个 Web 页面之间通常是彼此无关的，除非特意安排。解决办法就是，让脚本在生成
脚本都具有这一特性。它们的操作流程如下所示。
一个重要的原因在于，脚本能够根据不同的调用方式生成不同的页面。后面要编写的所有CGI
8.4.2.4
需要像下面这样另外导人这两个函数：
不同，这两个编码函数有可能并没有包括在标准函数集里，因此即使你导人了标准函数集，也
认字符串）进行编码。这样，你能看到对自己选择的字符串进行编码的情况。
URL 的编码约定并不相同。
这个脚本时，它将产生下面的输出结果，从中可以清楚地看到，对HTML文本的编码约定与对
它演示了上述两种转义操作。
的数字编码），因此“Click Me!
print a ({-href => $url),"Click Me!");
$url
$url=url （）;
/cgi-bin/myscript.pl?size=large;color=blue
Click Me!
参数也会被送回Web服务器。接着，服务器调用脚本，脚本通过param（）函数检测到该
第8章用PerlDBI编写MySQL程序
=
";color=blue";
#获得脚本的URL
添加第二个参数
一个参数
可是，如果为它加上一个参数，那么用户点击链挂
浏览器会向Web 服务器发送一个对
Web服务器再把信息传递给脚本，
含
---
## Page 361
始页面进行响应。因此，
互干扰吗？答案是不会，
得把1ocalhost 替换为你自己的 Web服务器的名字：
用此脚本，将会使显示结果在页面A和页面B之间来回交替：
参数。这意味着，如果选择页面B里的链接，则会重新显示那个原始页面。换句话说，连续调
具体值，而只在意它是否有被设置)。页面B里也包含了一个对该脚本的链接，但是没有pageb
pageb参数，用以告知flip_flop.pl显示页面B。（在这种情况下，我们并不关心这个参数的
页面，我们称之为“页面A”。当选择该链接时，会再次调用这个脚本，只是链接中还包含一个
正确的编码操作如下所示：
的值存储在$label 变量里，而 size 和 color 参数的值存储在$size 和$color 变量里，那么
自
码，而eSCapeHTML（）函数则用于对普通的HTML文本进行编码。例如，如果这个超链接标签
自引用的URL构造是如何工作的。当第一次调用该脚本时，它会生成的一个包含一个超链接的
http://localhost/cgi-bin/flip_flop.pl
把这个脚本安装到cgi-bin目录，然后在浏览器里，使用下面这样的 URL 来请求它，记
在页面里多次选择那个链接，便可以看到这个脚本会如何交替显示它所生成的那两个页面。
print end_html ();
print p ("This is Page $this_page. To select Page $next_page,
print
print header (）;
请看下面这个简短的CGI脚本flip_flop.pl，从中可以看到，在具体的应用程序环境里，
print a({-href =>$url),escapeHTML（$label））;
$url = sprintf ("%s?size=%s;color=%s",
el
if（!defined（param（"pageb"）））#显示页面A，并可链接到页面B
#根据参数pageb的存在与否来确定要显示哪一个页面
use
use
#!/usr/bin/perl
flip_flop.pl－简单地支持多个输出页面的cGI.pm脚本
$url=
6ed-axaus
$this_page
se
$url=
Sthis_page ="A";
$next_page;
Surl;
strict;
warnings;
start_html
a({-href=>Surl};
"A";
8
url(),escape ($size),
，每个客户端各自发出的请求会根据当前看到的页面来决定是否需要包
，因为各自的首次请求都没有包含pageb参数，而这个脚本只会用其初
-bgcolor
"?pageb=1";
"clickhere"）);
#显示页面B，并可链接到页面A
escape （$color));
8.4使用DBI来开发Web应用程序
341
---
## Page 362
相同的代码。大部分的CGI脚本也可以共享这种代码，只是稍有不同：
8.4.3从Web脚本连接MySQL服务器
端所采取的动作无关。
含这个参数。flip_flop.pl脚本也会正确地为每一个客户端生成交替页面，而与另一个客户
342
在前面的8.3节里，开发了几个命令行脚本，它们在与MySQL服务器建立连接时都使用了
上面这段代码，与我们在前面那个命令行脚本里所使用的代码，
#!/usr/bin/perl
口
口.
f
ny
use
use
use
use
use
chdir ($orig_dir)
构造数据源，并连接到服务器（在Windows里，
对于Windows系统，改写文件的位置
对于UNIX系统，选项文件应该包含连接参数
项。请注意，
Web 脚本使用。如上所示，这段代码会在Unix下的/usr/local/apache/conf/
mysql_read_default_file 读取了一个选项文件-
上面代码并没有使用 mysql_read_default_group 来读取标准选项文件，而是使用
件里。
上面代码不会解析来自命令行的连接参数。实际上，它会假设这些参数都列在选项文
因在于预防脚本在Windows 里运行)。
模块。第二条用于导入可以返回当前工作目录名字的模块（如同稍后所述，使用它的原
上面代码的开头部分包含use CGI 语句和use Cwd 语句。第一条语句用于导人 CGI.pm
$orig_dir = cwd （）;
所
先
$option_file=
sampdb.cnf文件或Widows下的c:\Apache\conf\sampdb.cnf文件里，查找各个选
(defined ($option_drive_root))
$dsn=
(defined (Soption_drive_root))
Sorig_dir;
（$^O=~/^MsWin/i11$~O=~/^dos/）
Cwd;
strict;
第8章用Perl DBI编写MySQL程序
or die "Cannot chdir to $orig_dir: $!\n";
or die “Cannot chdir to $option_drive_root: $!\n";
在的那个驱动器，开始连接数据库，其后还原到当前路径）
CGI qw(:standard);
DBI;
"DBI:mysql:sampdb;mysql_read_default_file=$option_file";
在 Windows下，这段代码会在连接之前，把当前路径切换到选项文件所在
路径，
"/Apache/conf/sampdb.cnf";
接着
/usr/local/apache/conf/sampdb.cnf";
一它专供访问sampdb数据库的
，存在以下几点差异。