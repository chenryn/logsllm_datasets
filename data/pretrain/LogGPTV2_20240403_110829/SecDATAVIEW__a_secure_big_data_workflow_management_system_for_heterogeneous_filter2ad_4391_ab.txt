nal attackers. SGX protects the integrity of the enclave code and
data, even when the high-privileged system software is compro-
mised [6]. SGX also protects against the physical memory access
class of attacks [8]. With SGX, TCB contains only the processor and
the code running inside the enclave. SGX reserves a limited size
2https://portal.futuresystems.org/
Figure 1: Architecture of the base DATAVIEW [33].
of the encrypted memory region called Enclave Page Cache (EPC),
where enclaves are created within this region. In the current SGX
release, the size of EPC is 32MB, 64MB, or 128MB [6, 13]. Although
a larger memory size can be supported through the paging mecha-
nism, it incurs up to 1, 000x performance overhead [6]. To speed up
the execution performance of parallel applications, SGX supports
multi-threads inside of the enclave.
AMD Secure Encrypted Virtualization (SEV): AMD SEV is a
security feature that is created on top of the AMD Secure Mem-
ory Encryption (SME) [29] technology and provides the protection
against attacks that usually happen in cloud system software such
as high-privileged hypervisor by encrypting the memory space of
VM instances. SEV protects a VM’s memory space with an encryp-
tion key that is protected from the hypervisor, cloud management
software or other parts of the system [4, 28, 29]. SEV protection is
transparent to the user applications that are running inside SEV-
protected instances. Protected applications are unaware of under-
lying memory encryption. AMD’s Memory Encryption Engine is
capable of using different encryption keys to protect different SEV-
protected VM’s memory spaces on the same platform.
Adversary Model: The adversary model for SecDATAVIEW is
similar to that for VC3 [9]. The attackers may control the whole
software stack in remote servers, including their system software.
The attackers may also have access to network packets and capture,
replay, and modify them. An adversary may also access or change
data after it left the processor with hardware-tapping or probing
techniques. Attacker can access any process running on a worker
node. The adversary could be a dishonest administrator who can
tap into a worker node to read user data, or an attacker who can
exploit a vulnerability in the worker node host’s system software
and access user data that is located in unprotected memory, in the
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
S. Mofrad et al.
network buffer, or on the physical storage medium. We assume the
attacker is not capable of modifying SGX-enabled CPU package that
resides in the remote location. Other attacks, including network
traffic-analysis [48], denial-of-service, access pattern leakage [17],
side-channel attacks [56], and fault injections [7], are out of the
scope in this paper.
3 DESIGN AND IMPLEMENTATION
We identify the following security-related requirements for Sec-
DATAVIEW:
data for workflows running on public untrusted clouds.
• R1: Providing the confidentiality and integrity of code and
• R2: Minimizing the TCB size for SecDATAVIEW.
• R3: Enabling the trade-off between security and perfor-
• R4: Supporting the execution of Java-based workflow tasks
mance for workflows with different user requirements.
in SGX nodes without tedious code refactoring.
Figure 2 gives the architecture of SecDATAVIEW, which uses a het-
erogeneous computing environment including both SGX and SEV
worker nodes. This environment provides the flexibility of trade-
off between performance and the degree of security (Requirement
R3). Based on the previous study [43], SGX offers better security
than SEV due to its smaller TCB size, enclave abstraction, and
memory integrity protection. However, SGX may impose high per-
formance overhead on memory-intensive applications due to its lim-
ited enclave memory size. While SEV offers better performance for
memory-intensive applications and the assurance of confidentiality,
it comes with the limitations of a larger TCB size (i.e., trusting the
entire VM) and no support for memory integrity protection, which
decreases its degree of security assurance. SecDATAVIEW benefits
greatly from our proposed heterogeneous computing environment
that includes both SGX and SEV worker nodes. Security-sensitive
workflow tasks (e.g., tasks that process confidential data) are exe-
cuted on SGX nodes and memory-intensive tasks with lower secu-
rity requirement (e.g., tasks that do not process confidential data)
are executed on SEV nodes. In this way, SecDATAVIEW achieves
the degree of security with low-performance overhead.
3.1 SecDATAVIEW Architecture
To protect data and prevent the execution of DATAVIEW from
being altered by attackers, one approach is to execute the whole
DATAVIEW system inside an SGX enclave or SEV-protected VM.
While this approach may work for SEV-protected VM, it is not
practical for SGX due to the following reasons. First, the code and
data that reside in a protected physical memory region inside an
enclave are called the enclave page cache (EPC). The size of the EPC
is up to 128MB. To support applications that use a large amount
of memory, SGX provides a memory paging mechanism to swap
memory pages between EPC and the memory outside the enclave;
memory pages swapped out are encrypted. Enclave memory pag-
ing is expensive and imposes performance overhead. For example,
experimental results in [6] show that, when the accessed memory
is beyond the size of the EPC, the triggered page faults may im-
pose an overhead of 1, 000x. Scientific workflow tasks are often
memory-intensive. For example, 75% of the execution time of the
Broadband workflow [20] is consumed by workflow tasks that re-
quire over 1GB memory. Running the DATAVIEW kernel itself also
requires over 500MB memory. As a result, memory paging could
significantly increase the execution time of the DATAVIEW server
and workflow tasks, which may reduce the user’s willingness to
use the proposed trusted execution environment. Secondly, SGX is
compatible with only a limited set of C/C++ libraries. Many work-
flow tasks in DATAVIEW are written in Java that use third-party
Java libraries, which are not directly supported by SGX. Although
SGX-LKL library OS supports the execution of Java code, it supports
only the execution of a single process inside the enclave (system call
fork is not supported). Moreover, putting all DATAVIEW modules
inside the enclave or SEV-protected VM increases the size of TCB,
which in turn decreases the security of the system.
To address the above challenges, we identify the components in
DATAVIEW that process confidential data and execute only such
components inside SGX enclaves; other components are executed
on the trusted premises such as private cloud computing platforms
or the user side premise as usual (Requirement R2). As different
components in DATAVIEW interact with each other, we develop
the WCPAC (Workflow Code Provisioning And Communication)
protocol to provision and attest secure worker nodes, securely pro-
vision the code for the Task Executor and workflow tasks on each
participating worker node, and establish the secure communica-
tion and file transfers between the master and worker nodes, and
among worker nodes. As a result, the confidentiality and integrity
of intermediate workflow data products are protected during their
transfer from one workflow task to another workflow task.
In DATAVIEW [32], the Workflow Engine and the Task Manage-
ment modules are security-sensitive components as they interact
with workflow tasks that may process confidential data. DATAVIEW
was not designed with security in mind and all communications
between two different modules are passed through an unencrypted
channel. In addition, although the input and output data are trans-
ferred through secure FTP (sftp) channel, they were stored in plain-
text format. SecDATAVIEW aims to protect the confidentiality and
integrity of the workflow’s code and data. To do so, we redesigned
the Cloud Resource Management to initialize SGX/SEV worker nodes,
and added two security-related modules – Code Provisioner and
Code Provisioning Attestation – to the Task Management and Work-
flow Engine sub-systems, respectively.
Figure 2(a) visualizes the secure system architecture for Sec-
DATAVIEW in the cloud and the zoom-in view of its two compo-
nents: the Workflow Engine and the Task Management. Figure 2(d)
provides the deployment architecture of SecDATAVIEW, which con-
sists of two parts: the master node running in a secure premise and
worker nodes running in a public cloud. The gray components in
the figure represent the redesigned components in SecDATAVIEW.
In SecDATAVIEW, the Code Provisioner and Task Executor are exe-
cuted inside SGX enclaves or SEV-protected instances.
The Workflow Executor executes on the master node in a secure
premise. Task Executors runs on each worker nodes with TEE sup-
port. AEAD AES-256 GCM symmetric cryptography [51, 52] and
SSL secure socket are used to secure the communication between
the Workflow Executor and the Task Executors. When a workflow is
initialized and before the workflow’s code is decrypted in worker
nodes, a code attestation protocol is executed.
SecDATAVIEW: A Secure Big Data Workflow Management System for Heterogeneous Computing Environments
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Figure 2: SecDATAVIEW Architecture. (a) visualizes the secure system architecture for SecDATAVIEW and zoom-in views of
its two components: (b) Workflow Engine, and (c) Task Management. (d) provides the all-in-cloud deployment architecture of
SecDATAVIEW.
Figure 3: The WCPAC Protocol for securing the communication between Workflow Executor, Cloud Resource Management, Code
Provisioning Attestation, Code Provisioner, and Task Executor.
The Code Provisioning Attestation module running on the master
node provisions Task Executor with the help of Code Provisioner and
uses a SHA256 digest message to verify the integrity of the Code Pro-
visioner executed at a remote worker node. If the integrity of Code
Provisioner is verified, then the Code Provisioning Attestation module
sends the Task Executor’s decryption key, the workflow’s input data,
and the Task Executor’s SSL certificate to the Code Provisioner mod-
ule, and returns the control to the Workflow Executor. Otherwise,
the Code Provisioning Attestation module terminates the workflow
execution and informs the user about the code attestation failure.
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
S. Mofrad et al.
The Code Provisioner module then decrypts the Task Executor and
workflow code on the SGX/SEV worker node using the received
decryption key.
The Cloud Resource Management module in SecDATAVIEW ini-
tializes SGX and SEV worker nodes upon receiving the request
from the Workflow Executor. It implements machine-specific com-
mands to send pre-configured encrypted SGX-LKL or the SEV disk
image and communicates with the worker’s hypervisor using a ssh
bash session to launch the AMD SEV-protected instance or Intel
SGX-LKL enclave. After successfully initializing the worker node,
it returns the control to the Workflow Executor.
The Task Executor packages all necessary code and libraries
used by workflow tasks, executes workflow tasks inside the worker
node’s TEE, and communicates with other worker nodes. This mod-
ule also interacts with the Workflow Executor and carries the secret
key for encryption and decryption of workflow data and results. In
addition, AEAD AES-256 GCM symmetric cryptography [51, 52],
SSL socket, and sftp are used to protect the communication between
worker nodes.
3.1.1 Executing workflows inside SGX enclaves. SGX-based appli-
cations were implemented with Intel SGX SDK that uses low-level
C/C++ to accomplish SGX primitives and introduces the notion of
enclave abstraction into the programming model. The enclave ab-
straction divides every SGX application into trusted and untrusted
runtime that should be designed carefully by the developers. We
identify two common SGX-based application design. One approach
is called the specialized-enclave, in which the developer follows all
the SGX rules such as code partitioning in trusted and untrusted
parts, defining Ecalls, Ocalls [26], and configuring the Enclave Def-
inition Language [25]. The specialized-enclave approach has the
advantage of the minimum TCB size since the amount of code in
the enclave runtime is minimum. The specialized-enclave is suitable
when the system depends on static components that are usually
created by skillful developers. For example, secureKeeper [13] uses
the specialized-enclave approach. However, the DATAVIEW sys-
tem uses dynamic and third-party proprietary tasks and libraries
that are not created or used by the DATAVIEW system develop-
ers. Applying the specialized-enclave approach would dramatically
decrease the usability and security of DATAVIEW system due to
the burden of learning low-level SGX-based programming on the
shoulder of its end-users. Besides, C/C++ is not a type-safe language
and user-created SGX workflow tasks may unintentionally expose
low-level defects that leak sensitive information from enclaves and
compromise the system runtime environment.
Another approach is the SGX Shield approach that executes an
unmodified application in the SGX runtime. In this approach, the un-
modified application along with its execution environment (such as
JVM) and codes that belong to the library operation system (LibOS)
entirety is executed inside the enclave. On one hand, SGX Shield
introduces a larger TCB as it puts more code inside the enclave and
may significantly decrease the memory access performance of the
enclave [13] when the enclave memory size exceeds 96MB due to
memory paging overhead. On the other hand, SGX Shield substan-
tially increases the usability of the SGX-based system by removing
the requirement of SGX-expert knowledge and making it possible to
execute unmodified applications in enclaves. In addition, SGX Shield
enables end-users to execute code written in type-safe languages
such as Java, which mitigates unintended memory leakage in the
program and is suitable for security-sensitive scientific workflow
applications. HAVEN [8], Graphene-SGX [55], SCONE [6], and SGX-
LKL library OS [39] use the SGX Shield approach to run unmodified
applications in enclaves. Among them, SCONE and SGX-LKL sup-
port Java. Because SGX-LKL is open-source, SecDATAVIEW uses
SGX-LKL to execute workflow tasks written in Java inside SGX
enclaves.
One limitation of SGX-LKL is that SGX-LKL supports only the
execution of a single process inside the SGX enclave. However,
complex modules in SecDATAVIEW such as Code Provisioner and
Task Executor are often run as multiple processes (e.g. SSL socket
and sftp server). To tackle the above limitation, we developed a Java-
written sftp server which is included in the SGX-LKL encrypted disk
image and is sent to the SGX worker node. The Java sftp server is
started as the only active process inside the SGX-LKL enclave. The
sftp server is capable to dynamically activate the Code Provisioner
module upon its arrival inside the enclave. The sftp server leverages
Java multi-threading, class loader, and reflection, and dynamically
extends its active process to complex Code Provisioner at enclave
runtime. In the same way, the Code Provisioner module is enabled
to activate the Task Executor inside the enclave.
3.1.2 Executing workflows inside SEV-protected VM. AMD SEV is
designed for cloud applications and protects unmodified applica-
tions by shielding the SEV VM instances from other parts of the
system [29]. Unlike SGX, SEV does not provide memory integrity
protection but imposes lower performance overhead than SGX.
To minimize the performance overhead, SecDATAVIEW executes
memory-intensive workflow tasks that do not require enhanced-
degree of protection inside SEV-protected VMs. The end-user can
decide what task in a confidential workflow is assigned to the SEV
or SGX worker nodes. SecDATAVIEW contains a pre-created SEV
disk image. This SEV disk image is used during runtime to provision
a custom VM on a SEV worker node with an execution environ-
ment that includes the guest OS, the Java virtual machine and other
necessary components (e.g., the stand-alone Java sftp server) for
secure workflow execution.
3.2 The WCPAC Protocol
We developed a Workflow Code Provisioning And Communication
(WCPAC) protocol for securing the execution of workflow tasks in
remote worker nodes. The main functionalities of WCPAC include
(1) to provision and attest secure worker nodes, (2) to securely pro-
vision the code for the Task Executor and workflow tasks on each
participating worker node, (3) to establish the secure communica-
tion and file transfers between the master node and the worker
nodes, and (4) to establish secure file transfers among worker nodes.