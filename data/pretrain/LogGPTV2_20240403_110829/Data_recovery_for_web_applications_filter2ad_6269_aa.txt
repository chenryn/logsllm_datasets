title:Data recovery for web applications
author:Istemi Ekin Akkus and
Ashvin Goel
20lO IEEEIIFIP International 
Conference 
on Dependable Systems 
& Networks (DSN) 
Data Recovery for Web  Applications 
istemi Ekin Akku, Ashvin Goel 
University 
of Toronto 
{ekin, ashvin} 
@eecg.toronto.edu 
Abstract 
Web-based 
applications 
store their data at the server side. 
but it can also cause a seri­
This design has several benefits, 
ous problem because a misconfiguration, 
ity leading 
While data backup solutions 
issues, 
ruption 
they do not help diagnose 
or the precise 
loss or corruption 
can help resolve 
to  data 
bug or vulnerabil­
can affect many users. 
some of these 
set of changes caused by these events. 
the events that led to the cor­
In this paper, we describe 
the design of a recovery sys­
recover from data corruption 
is  to correlate requests  across 
kept by databases 
recover 
that cause data 
Our system tracks ap­
identify requests 
and reuses undo logs already 
from the effects of these requests. 
tem that helps administrators 
caused by bugs in web applications. 
plication requests,  helping 
corruption, 
to selectively 
main challenge 
tiers of the application 
tions. We explore 
requests 
and client) 
help identify data corruption accurately. 
tem using known bugs in popular web applications, 
Wordpress, 
system enables 
critical 
application, 
We evaluate 
show that our 
without 
loss of 
Drupal and Gallery2. Our results 
recovery from data corruption 
data and incurs small runtime 
at three layers (database, 
using dependencies 
both within and across 
to 
our sys­
to determine 
overhead. 
the correct 
the multiple 
recovery ac­
including 
The 
vulnerabilities 
A typical 
[15, 16, 17] that 
to this 
solution 
this ap­
data from a backup. However, 
that occur after the backup 
has had several 
Wordpress 
can cause data loss or corruption. 
problem is to restore 
proach loses updates 
and these updates 
ad-hoc methods. Furthermore, 
help diagnose 
the problem. 
work needs to be done manually, 
and error prone. 
the external 
As a result, 
must be recovered 
or application 
currently 
events that caused 
much of this diagnostic 
is performed, 
or via some 
does not 
which is time consuming 
a backup solution 
manually 
An alternative 
to backups is to use application-specific 
A common example is an undo functionality, 
re­
limitations. 
to 
recovery 
enabling 
problems 
is useful, 
modifications 
especially 
it has several 
it needs careful 
potentially 
or accidental 
click­
if the corruption 
most importantly, 
design and significant 
in web applications 
such as GoogleMail.This fea­
[8, 13]. 
is extensible 
manual 
if the application 
several, 
covery features. 
available 
ture allows the user to undo her last action, 
from simple misconfiguration 
ing. While this feature 
First, 
applications, 
Second, it may require 
operations 
Finally, 
pends on the correctness 
Gallery2 
ing the administrator, 
and thus the last action cannot be reverted, 
feature 
Drupal [4], a popular 
causes all 
comments on the site to be deleted 
try 
to delete the same comment. If undo were available, 
it would 
this comment, but all other comments would be lost 
restore 
because 
the developer 
did not expect them to be deleted. 
is detected much 
application-specific 
recovery 
For example, 
of the application. 
the application 
even if the undo 
bug number 2016834 [9] prevents 
bug number 67745 [6] in 
was available. 
from accessing 
all users, includ­
management 
Similarly, 
complex, 
after it occurred. 
system, 
content 
de­
interface 
if two administrators 
In this paper, we describe 
the design of a generic 
data re­
that store their persistent 
for recovery 
covery system for web applications 
data in a database 
application 
bugs in the applications. 
allow web application  administrators 
failures 
data 2) enable selective 
recov­
ery of this data, without 
tier. Our system does not rely on the web 
and thus, is resilient 
and 
Our system has two main goals: 1) 
persistent 
affecting 
to failures 
to diagnose 
that corrupt 
the rest of the application. 
application 
A significant 
challenge 
in achieving 
our goals lies in iden­
1 Introduction 
Web-based 
applications 
generally 
data on 
store persistent 
and 
simpler configuration 
These applications 
and to support 
are increas­
a plugin 
developers 
enhanced 
to rapidly 
and 
intro­
services 
and provide 
this design can lead  to 
client 
mobility, 
features 
However, 
for extensibility 
third-party 
enabling 
data management. 
the server, 
improved 
ingly being designed 
architecture, 
allowing 
duce additional 
customization. 
tion bug or a single misconfiguration 
of users, potentially 
party plugins 
other plugins, 
administrators 
generally 
plugins 
may be poorly tested, 
or even worse, corrupt 
of the Wordpress 
or new versions 
blogging 
advised 
causing 
of the application 
[12]. 
affecting 
a large number 
data loss or corruption. 
Third­
may cause problems 
with 
[11] are 
application 
to back up all data before installing 
any new 
an applica­
user data. For example, 
Data corruption 
and recovery 
pose especially 
serious 
chal­
may 
settings. 
For ex­
since these applications 
user data and configuration 
lenges for web applications, 
store important 
to store arbitrary 
user 
ample, Wordpress 
data, and can even embed other web applications, 
such as the 
powerful 
and sharing 
that allows storing 
photos with specific users. However, 
Gallery [29] photo application 
can be configured 
personal 
tifying data corruption 
and its dependent 
In a recent case, a major electronics 
misconfiguration, 
entered 
pendent 
Another online retailer 
similar 
incorrectly 
purchases 
error [2] to determine 
pricing 
so that the price of one of its products 
was 
[3]. This price had to be fixed and all de­
involving 
this product 
had to be cancelled. 
had to shut down its services 
its dependent 
after a 
effects. 
effects accurately. 
retailer 
experienced 
a 
978-1-4244-7501-8/10/$26.00 
©2010 IEEE 
81 
DSN 20lO: Akku & Goel 
2010 IEEEIIFIP International 
Conference 
on Dependable Systems 
& Networks (DSN) 
Many similar 
ruption 
part of the recovery 
These dependent 
examples 
[1, 5, 7] show that determining 
cor­
and its dependent 
effects 
accurately 
is an important 
process. 
effects can be captured 
using a combina­
proach caused false positives/negatives 
We 
have used real web applications 
our dependency 
scheme was designed 
during recovery. 
the accuracy 
to mimic the previous 
to evaluate 
analysis. 
approaches. 
of 
Also, our database-row dependency 
tiers of the application. 
Next section 
discusses 
related 
work in the area. Section 
our approach 
4, we evaluate 
and prototype 
our system for various 
implementation. 
in popular web applications. 
data corrup­
We conclude 
in 
3 
In 
describes 
Section 
tion scenarios 
Section 
5. 
2 Related Work 
at the different 
tier, a query might read a row that was writ­
query and update a third row, thereby 
tion of dependencies 
At the database 
ten by another 
a causal dependency 
action might read a row updated by a previous 
and update others. 
in which a row 
Foreign key constraints, 
update or delete in  a table causes other referencing 
be updated, 
between the queries. 
Similarly, 
also cause dependencies. 
for data recovery 
Using dependencies 
tables to 
creating 
a trans­
transaction 
of transactional 
has been explored 
databases 
these techniques 
[19, 23, 
are 
making them unsuitable 
for web ap­
transaction-level 
dependency 
anal­
to web applications 
as they 
in the context 
at a single layer, 
previously 
27] and file systems [24, 38]. However, 
applied 
plications. 
For example, 
ysis cannot be directly 
may not use transactions, 
pend on their existence. 
multiple 
proaches 
4.2. 
Section 
tiers. 
can cause inconsistency 
Ignoring 
applied 
system cannot de­
so the recovery 
Also, web applications 
at 
these ap­
as shown in 
across tiers, 
after recovery, 
the interactions 
operate 
Our recovery 
system correlates 
namely at the presentation, 
thus helping 
across dif­
and 
data corruption 
more ac­
dependencies 
diagnose 
application 
drawback 
ferent layers, 
database 
tiers, 
curately. 
A potential 
have false dependencies 
independent, 
dependency 
we show that the use of multiple 
trator 
leading 
policies 
determine 
the correct 
of our approach 
is that it can 
between requests 
that are essentially 
to data loss. We explore 
to resolve 
this problem. Furthermore, 
policies 
helps the adminis­
more rapidly. 
recovery 
actions 
Our system uses two novel methods for dependency 
anal­
it combines 
for deriving 
application 
application-level 
been used online for securing 
replay with offline taint 
dependencies. 
applica­
ysis. First, 
analysis 
ing has generally 
tions [30, 31, 37], but we are not aware of its use for data 
recovery. 
grained 
approaches 
niques help the administrator 
accurately. 
at the database 
dependencies 
identify 
Second, we explore the benefits of using finer­
[19]. These tech­
more 
that use row-level 
data corruption 
dependencies 
field-level 
Taint­
than existing 
Our main contribution 
is a dependency-based 
recovery 
a proto­
misconfigurations. 
that is resilient 
to bugs and ap­
We have implemented 
and 
and tested our system on popular 
web 
[11], Drupal [4] and 
the Wordpress 
system for web applications, 
plication 
type of our system for the widely used PHP interpreter 
the MySQL database, 
applications 
including 
Gallery2 
for various 
known bugs and misconfigurations 
second contribution 
vious approaches 
performance 
is that we compare our results 
[19, 23, 27]. These approaches 
whether 
the effectiveness 
scenarios 
of our approach 
that can be triggered 
by 
Our 
with pre­
but did not evaluate 
[29]. We evaluate 
data corruption 
evaluation, 
conducted 
in these applications. 
their ap-
a method for recov­
inter­
based on tracking 
These inter-transaction 
dependen­
sets of transac­
the read-write 
and effected transactions 
are 
recov­
history 
to simplify 
a system in which nor­
is performed 
in Fastrek 
[19]. 
[23] 
en­
[34]. These methods  focus 
Liu et al. [27] initially 
proposed 
is allowed while recovery 
transactions 
recovery 
transaction 
works proposes 
The attacking 
dependencies. 
by examining 
ering from malicious 
transaction 
cies are created 
tions. 
moved to the end of the transaction 
ery. Their follow-up 
mal operation 
Similar 
and the Flashback 
tirely 
level dependencies, 
the application 
level. 
pendencies 
(i.e., 
read-write 
level inconsistencies 
on database-level 
during recovery 
within requests 
sets of queries 
and tracking 
tainting) 
Database 
recovery 
by employing 
dynamic data-flow 
rather than just relying 
on the 
and requests, 
avoiding 
application­
corruption 
more accurately. 
while ignoring 
application­
recovery 
which can cause inconsistent 
at 
de­
Our system tracks application-level 
methods have been proposed 
or committed 
in multi-level 
systems designed 
[28]. We also use compensating 
the effects of long-running 
and for recovery 
concurrency 
perform recovery, 
cation bugs or vulnerabilities 
we target 
web applications 
but our focus is on recovering 
that cause data corruption, 
and 
that may not use transactions. 
from 
[26] 
transactions 
to increase 
transactions 
to 
from appli­
File system backups are commonly employed 
to recover 
backups revert data based 
updates 
that have occurred 
recovery 
file-system 
However, 
from data corruption. 
on time and can lose legitimate 
since the backup was taken. Selective 
aims to solve this issue via a set of dependency 
taint certain 
tainted 
for database 
formation 
ply generate 
from the same drawbacks 
and reverting 
updates [24, 38]. This  method 
in a single file. The recovery 
applications, 
because databases 
an older version 
of the database 
file updates, 
operation 
may save all in­
would sim­
file, suffering 
rules [25] that 
the effects 
is too coarse-grained 
of only the 
Operator 
Undo [21] is a powerful 
for applica­
as a backup approach. 
framework 
The authors 
use it to recover 
tion recovery. 
figuration 
plications 
separating 
each type of application 
cations 
with well-defined 
functionality 
without 
bugs, but the framework requires 
for replayed. 
to serialize 
persistent 
recovery 
By focusing 
from e-mail con­
modifying ap­
It also requires 
procedures 
on web appli­
we can provide 
applications. 
data and special 
interfaces, 
modifying 
request. 
requests 
similar 
for 
using several 
Compensating 
transactions 
have been used to recover 
978-1-4244-7501-8/10/$26.00 
©201O IEEE 
82 
DSN 2010: Akku & Goel 
2010 IEEEIIFIP International 
Conference 
on Dependable Systems 
& Networks (DSN) 
OS processes 
have 
for 
available 
that not only make it hard to monitor the ap­
full-blown 
In contrast, 
[25], but these channels 
queries. 
IPC and shared memory mechanisms 
database 
numerous 
communication 
plication 
tion to spread more easily [24]. Finally, 
interface 
have a simple and well-defined 
ited to requests 
operations. 
it easier 
fewer sources 
data dependencies 
to the application, 
Using replay, 
of non-determinism. 
more accurately 
to replay requests 
than previous 
and database 
This interface 
makes 
since there are 
we track 
methods. 
that is mostly lim­
can also cause contamina­
web applications 
the PHP interpreter) 
database 
Our recovery 
at the database 
so that the database 
undo logs are generated 
and the 
are not 
layer due to bugs 
or in the presentation 
system assumes that the database 
application-logic 
engine (e.g., 
buggy, and data is corrupted 
in the application-logic 
tem also assumes that the underlying 
actions 
be used for recovery. 
transactions, 
via the database 
purge the undo log entries 
ter the transaction 
time. Transactions 
stable 
that the database 
database 
and their effects cannot be reverted. 
isolation 
each query is treated 
'autocommit' 
is committed, 
occurring 
If the web application 
layer. Our sys­
supports 
and can 
does not use 
uses a serializable 
for a transaction 
transactions 
can be replayed 
Our system does not 
as a separate 
correctly. 
level so that the 
feature. 
Finally, 
we assume 
trans­
immediately 
af­
before this time are considered 
transaction 
but after a user-configurable 
3.2 System Overview 
Causeway [22] provides 
operating 
system support for 
id) transfer 
across the tiers of an ap­
idea was used by Magpie [20] in which 
paths were used to diagnose 
applica­
request 
execution 
(e.g., 
A similar 
metadata 
plication. 
the request 
tion failures. 
well-defined 
metadata 
ing any modifications 
interfaces 
Unlike these systems, 
in a web application's 
our work utilizes 
tiers and passes 
requir­
them without 
the 
across tiers to log and correlate 
to the applications. 
There have been several 
proposals 
web applications 
for using online taint 
[30, 31]. Unlike these 
we use tainting 
only after a failure 
occurs, 
to fol­
for securing 
analysis 
approaches, 
low the effects of a bug. 
Our work is also motivated 
by various 