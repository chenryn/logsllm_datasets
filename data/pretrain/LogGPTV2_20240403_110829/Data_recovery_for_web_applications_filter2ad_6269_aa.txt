# Data Recovery for Web Applications

**Authors:** Istemi Ekin Akkus and Ashvin Goel  
**Conference:** 2010 IEEE/IFIP International Conference on Dependable Systems & Networks (DSN)

## Abstract
Web-based applications typically store their data on the server side, which offers several benefits but can also introduce significant risks. A misconfiguration or a bug can lead to data corruption, affecting many users. While data backup solutions can help resolve some of these issues, they do not assist in diagnosing the root cause or the specific changes that led to the corruption.

In this paper, we present the design of a recovery system that helps administrators recover from data corruption caused by bugs in web applications. Our system tracks application requests and correlates them across different tiers (database, server, and client) to accurately identify and selectively undo the effects of corrupting requests. We evaluate our system using known bugs in popular web applications such as WordPress, Drupal, and Gallery2, and show that it enables efficient recovery with minimal runtime overhead.

## 1. Introduction
Web-based applications generally store persistent data on the server, providing simpler configuration and enhanced extensibility. However, this architecture can lead to serious challenges in data management. A single bug or misconfiguration can affect a large number of users, potentially causing data loss or corruption. Third-party plugins, often poorly tested, can exacerbate these issues.

Data corruption and recovery pose significant challenges for web applications, which store important user data and configurations. For example, a recent case involved a major electronics retailer experiencing a pricing error due to a misconfiguration, leading to the cancellation of dependent purchases. Another online retailer had to shut down its services after a similar error.

Many such examples highlight the importance of accurately identifying data corruption and its dependent effects. Our system addresses this by tracking and correlating requests across different application tiers, enabling more accurate diagnosis and selective recovery.

## 2. Related Work
Previous work on data recovery has focused on transactional databases [19, 23, 27] and file systems [24, 38]. However, these techniques are not directly applicable to web applications, which may not use transactions and operate across multiple tiers. Ignoring dependencies across tiers can lead to inconsistencies after recovery.

Our system uses two novel methods for dependency analysis: combining online taint analysis with offline replay, and using finer-grained row-level and field-level dependencies. These techniques help the administrator more accurately identify and diagnose data corruption.

## 3. System Overview
### 3.1 Assumptions
Our recovery system assumes that the database is not buggy and that data corruption occurs due to bugs in the application-logic layer. We also assume that the underlying database supports transactions and generates undo logs that can be used for recovery.

### 3.2 Approach
Our system tracks application requests and correlates them across different tiers (presentation, server, and database) to accurately identify data corruption. By using a combination of online taint analysis and offline replay, we can track the effects of corrupting requests and selectively undo them.

## 4. Evaluation
We have implemented and tested our system on popular web applications such as WordPress, Drupal, and Gallery2, using known bugs and misconfigurations. Our results show that our system enables efficient recovery with minimal runtime overhead.

## 5. Conclusion
In this paper, we presented a dependency-based recovery system for web applications that helps administrators diagnose and recover from data corruption caused by bugs and misconfigurations. Our system combines online taint analysis with offline replay and uses finer-grained dependencies to accurately identify and selectively undo corrupting requests.

**References:**
- [1] Example Reference 1
- [2] Example Reference 2
- [3] Example Reference 3
- ...
- [38] Example Reference 38

**Copyright Notice:**
978-1-4244-7501-8/10/$26.00 Â©2010 IEEE