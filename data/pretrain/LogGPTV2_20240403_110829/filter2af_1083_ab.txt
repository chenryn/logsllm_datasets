will call `agentmain` the `agentmain` method of the Agent-Class class
specified in MANIFEST.MF.in javaagent.
Here is a simple example (tested under JDK 1.8.0_181):
SufMainAgent
    package com.longofo;
    import java.lang.instrument.ClassFileTransformer;
    import java.lang.instrument.IllegalClassFormatException;
    import java.lang.instrument.Instrumentation;
    import java.security.ProtectionDomain;
    public class SufMainAgent {
        static {
            System.out.println("SufMainAgent static block run...");
        }
        public static void agentmain(String agentArgs, Instrumentation instrumentation) {
            System.out.println("SufMainAgent agentArgs: " + agentArgs);
            Class[] classes = instrumentation.getAllLoadedClasses();
            for (Class cls : classes) {
                System.out.println("SufMainAgent get loaded class: " + cls.getName());
            }
            instrumentation.addTransformer(new DefineTransformer(), true);
        }
        static class DefineTransformer implements ClassFileTransformer {
            @Override
            public byte[] transform(ClassLoader loader, String className, Class classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {
                System.out.println("SufMainAgent transform Class:" + className);
                return classfileBuffer;
            }
        }
    }
MANIFEST.MF
    Manifest-Version: 1.0
    Can-Redefine-Classes: true
    Can-Retransform-Classes: true
    Agent-Class: com.longofo.SufMainAgent
TestSufMainAgent
    package com.longofo;
    import com.sun.tools.attach.*;
    import java.io.IOException;
    import java.util.List;
    public class TestSufMainAgent {
        public static void main(String[] args) throws IOException, AgentLoadException, AgentInitializationException, AttachNotSupportedException {
            //Get all running virtual machines in the current system
            System.out.println("TestSufMainAgent start...");
            String option = args[0];
            List list = VirtualMachine.list();
            if (option.equals("list")) {
                for (VirtualMachineDescriptor vmd : list) {
                    System.out.println(vmd.displayName());
                }
            } else if (option.equals("attach")) {
                String jProcessName = args[1];
                String agentPath = args[2];
                for (VirtualMachineDescriptor vmd : list) {
                    if (vmd.displayName().equals(jProcessName)) {
                        VirtualMachine virtualMachine = VirtualMachine.attach(vmd.id());
                        //Then load agent.jar and send it to the virtual machine
                        virtualMachine.loadAgent(agentPath);
                    }
                }
            }
        }
    }
Testmain
    package com.longofo;
    public class TestMain {
        static {
            System.out.println("TestMain static block run...");
        }
        public static void main(String[] args) {
            System.out.println("TestMain main start...");
            try {
                for (int i = 0; i [] classes = instrumentation.getAllLoadedClasses();
            for (Class cls : classes) {
                System.out.println("SufMainAgent get loaded class: " + cls.getName());
            }
            instrumentation.addTransformer(new DefineTransformer(), true);
        }
        static class DefineTransformer implements ClassFileTransformer {
            @Override
            public byte[] transform(ClassLoader loader, String className, Class classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {
                System.out.println("SufMainAgent transform Class:" + className);
                return classfileBuffer;
            }
        }
    }
WeblogicTestSufMainAgent
    import com.sun.tools.attach.*;
    import java.io.IOException;
    import java.util.List;
    public class WeblogicTestSufMainAgent {
        public static void main(String[] args) throws IOException, AgentLoadException, AgentInitializationException, AttachNotSupportedException {
            //Get all current VMs that're on this device
            System.out.println("TestSufMainAgent start...");
            String option = args[0];
            List list = VirtualMachine.list();
            if (option.equals("list")) {
                for (VirtualMachineDescriptor vmd : list) {
                    //If the VM is xxx, it is the target. Get its pid
                    //Then load agent.jar and send it to this VM
                    System.out.println(vmd.displayName());
                }
            } else if (option.equals("attach")) {
                String jProcessName = args[1];
                String agentPath = args[2];
                for (VirtualMachineDescriptor vmd : list) {
                    if (vmd.displayName().equals(jProcessName)) {
                        VirtualMachine virtualMachine = VirtualMachine.attach(vmd.id());
                        virtualMachine.loadAgent(agentPath);
                    }
                }
            }
        }
    }
List running Java applications:
attachï¼š
Weblogic output:
If we are using Weblogic t3 for deserialization and a class has not been
loaded before but can be found by Weblogic, then the corresponding class will
be transformed by the Agent. But some classes are in some Jar in the Weblogic
directory, while Weblogic won't load it unless there are some special
configurations.
#### Instrumentation limitations
In most cases, we use Instrumentation to use its bytecode instrumentation,
which is generally a **class retransformation** function, but has the
following limitations:
  1. `premain` and `agentmain` are to modify the bytecode are after the class file is loaded. That is to say, you must take a parameter of type Class, which cannot be redefined through the bytecode file and **custom class name** that one class **does not exist**. What needs to be noted here is the redefinition mentioned above. **Cannot be redefined** just now means that a class name cannot be changed again. The bytecode content can still be redefined and modified. However, the byte code content must also meet the requirements of the second point after modification.
  2. In fact, class conversions will eventually return to `Instrumentation#retransformClasses ()` method. This method has the following restrictions:
  3. The parent of the new and old classes must be the same;
  4. The number of interfaces implemented by the new and old classes must be the same, and they must be the same;
  5. The accessors number of new class and old class must match. The number and field names of the new and old classes must be the same;
  6. The adding and deleting methods of new class and old class must be private static/final.
  7. You can delete or modify method body.
The limitations encountered in practice may not be limited to these. If we
want to redefine a brand new class (the class name does not exist in the
loaded class), we can consider the method based on class loader isolation:
create a new custom class loader to define a brand new through the new
bytecode , But the limitations of this new class can only be called through
reflection.
#### Summary
  * This article only describes some basic concepts related to JavaAgent. I got to know that there was such a thing, and verified a problem that I encountered before. I also read several articles written by other security researchers [4]&[5].
  * I used stain tracking, hook, syntax tree analysis and other technologies after reading some articles such as [PHP-RASP implementation of vulnerability detection](https://c0d3p1ut0s.github.io/%E4%B8%80%E7%B1%BBPHP-RASP % E7% 9A% 84% E5% AE% 9E% E7% 8E% B0 /)[6]. And I have also read a few about Java RASP [2]&[3]. If you want to write RASP-based vulnerability detection/ exploitation tools,you can also learn from them.
The code is now on [github](https://github.com/longofo/learn-javaagent). You
can test it if you are interested in this. Be careful of the JDK version in
the pom.xml file. If an error occurs when you switch JDK tests, remember to
modify the JDK version in pom.xml.
#### Reference
  1. 
  2. 
  3. 
  4. 
  5. 
  6. 
# About Knownsec & 404 Team
Beijing Knownsec Information Technology Co., Ltd. was established by a group
of high-profile international security experts. It has over a hundred frontier
security talents nationwide as the core security research team to provide
long-term internationally advanced network security solutions for the
government and enterprises.
Knownsec's specialties include network attack and defense integrated
technologies and product R&D under new situations. It provides visualization
solutions that meet the world-class security technology standards and enhances
the security monitoring, alarm and defense abilities of customer networks with
its industry-leading capabilities in cloud computing and big data processing.
The company's technical strength is strongly recognized by the State Ministry
of Public Security, the Central Government Procurement Center, the Ministry of
Industry and Information Technology (MIIT), China National Vulnerability
Database of Information Security (CNNVD), the Central Bank, the Hong Kong
Jockey Club, Microsoft, Zhejiang Satellite TV and other well-known clients.
404 Team, the core security team of Knownsec, is dedicated to the research of
security vulnerability and offensive and defensive technology in the fields of
Web, IoT, industrial control, blockchain, etc. 404 team has submitted
vulnerability research to many well-known vendors such as Microsoft, Apple,
Adobe, Tencent, Alibaba, Baidu, etc. And has received a high reputation in the
industry.
The most well-known sharing of Knownsec 404 Team includes: [KCon Hacking
Conference](http://kcon.knownsec.com/#/ "KCon Hacking Conference"), [Seebug
Vulnerability Database](https://www.seebug.org/ "Seebug Vulnerability
Database") and [ZoomEye Cyberspace Search Engine](https://www.zoomeye.org/
"ZoomEye Cyberspace Search Engine").
* * *