tion of two agents a and b which share a long term key klt.
(The last message is stripped out, since it is not necessary
for security.)
1. a → b
:
2. b → a :
3. a → b
:
(a, na)
{(na, kst)}klt
{na}kst
First a sends a message with her identity and a fresh nonce
na. Upon receipt, b generates a short term session key kst,
1A parametric role is the most general role; it can be later instantiated
in particular scenarios.
encrypts it along with a’s nonce na using the long term key
klt, shared previously with a. Finally, a replies with her
nonce na encrypted with the newly established key kst. In
the following, we name protocol roles such as init, and resp,
denoting an initiator and a responder respectively. The
parametric protocol roles are as follows (We show the sta-
tus events in bold typeface).
init(A, B, NA, Klt, Kst) =
start(A, B, initiator)
(cid:7)A : (A, NA) (cid:8) B(cid:9)
(cid:7)A : {(NA, Kst)}Klt (cid:7) B(cid:9)
run(A, B, initiator, NA, Klt, Kst)
(cid:7)A : {NA}Kst (cid:8) B(cid:9)
end(A, B, initiator, NA, Klt, Kst)
(cid:7)
(cid:9)
(cid:7)
resp(A, B, NA, Klt, Kst) =
start(B, A, responder)
(cid:7)B : (A, NA) (cid:7) A(cid:9)
run(B, A, responder, NA, Klt, Kst)
(cid:7)B : {(NA, Kst)}Klt (cid:8) A(cid:9)
(cid:7)B : {NA}Kst (cid:7) A(cid:9)
end(B, A, responder, NA, Klt, Kst)
(cid:9)
While start and end status events are located in the obvi-
ous places, the position where run status events are located
is more subtle. We locate these events as soon as the pro-
tocol role has received every piece of data relevant to the
protocol run (this becomes relevant in Section 3.2).
The next step consists of (partially) instantiating the
parametric roles, i.e. gathering several protocol roles to-
gether providing a particular system instance to be analysed.
Deﬁnition 5. A system scenario is a multiset of protocol
roles.
A system scenario determines which sessions are
present, and which agents play which roles.
Example 6. Consider the following simple system scenario,
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:51:42 UTC from IEEE Xplore.  Restrictions apply. 
where init and resp are the roles of Example 4:
Sc0 = {init(a, B, na, klt, Kst), resp(A, b, NA, klt, kst)}
The initiator is played by a, using fresh nonce na and
shared key klt, while the responder is b, using the shared
key klt and the (freshly created) session key kst.
Intuitively, this scenario is crafted so that, if the proto-
col is secure, then the unknown participants A and B can
only be played by a and b, respectively, as they are the only
participants that know their shared key klt.
2.3 Trace Validity
A trace is a sequence of events. Traces can be obtained
from system scenarios by interleaving events from the pro-
tocol roles, and possibly instantiating variables. Formally,
ν is an interleaving of Sc if ν ∈ ||Sc, for ||Sc deﬁned
||Sc = ∪(cid:5)a r(cid:6)∈Sc a.(||(Sc \ {(cid:7)a r(cid:9)} ∪ {r}), with
as:
s.Sc = {(cid:7)s r(cid:9) | r ∈ Sc}. A preﬁx interleaving is a pre-
ﬁx of a complete interleaving.
Deﬁnition 7. We say that a trace tr derives from scenario
of Sc s.t. tr is a preﬁx
Sc if there exists an instance Sc
(cid:2)
interleaving of Sc
.
(cid:2)
Appending an event ev to trace tr is written (cid:7)tr ev(cid:9).
Functions last and
length have the usual meaning:
last((cid:7)tr ev(cid:9)) = ev (last is undeﬁned for the empty trace),
length((cid:7)(cid:9)) = 0 and length((cid:7)tr ev(cid:9)) = length(tr) + 1.
The preﬁx trace consisting of the ﬁrst i events is denoted as
tri, with tr0 = (cid:7)(cid:9) and trm = tr for m ≥ length(tr).
The initial intruder knowledge set, denoted IK,
is a
ground set of terms representing what the intruder knows
before starting the analysis of a speciﬁc scenario. This set
includes the intruder identity e, and may include other pub-
lic information, like principal identities or public keys.
When the protocol is executed in presence of the in-
truder, we apply the Dolev Yao model: (a) every message
sent by an honest principal is added to the intruder’s knowl-
edge, and (b) every message received by an honest princi-
pal is produced by the intruder using the knowledge accu-
mulated until that point. Formally, after the events in tr
have taken place, the knowledge of the intruder is equal to
IK ∪ K(tr), with K(tr) deﬁned as follows.
Deﬁnition 8. The (intruder gathered) knowledge of a trace
tr is given by K(tr) = {m | last(tri) = (cid:7)a : m (cid:8) b(cid:9), i ∈
[1 . . . length(tr)]}.
ev(cid:9), with ev =
Suppose we have a ground trace tr = (cid:7)tr
(cid:7)a : m (cid:7) b(cid:9). We say that the event ev in tr is valid if the
intruder could produce m using IK∪ K(tr
(cid:2)). A whole trace
is valid when all its receive communication events are valid,
as shown in the next deﬁnition.
(cid:2)
Deﬁnition 9. A ground trace tr is valid w.r.t.
IK if for
each i ∈ [0 . . . length(tr) − 1], last(tri+1) = (cid:7)a : m (cid:7)
b(cid:9) implies that m ∈ F(K(tri) ∪ IK).
2.4 Constraint Solving
Central to this paper is the notion of constraint and con-
straint set, as deﬁned below.
Deﬁnition 10. A constraint is a pair m : K, of a term m
and a term set K (standing for knowledge). m : K is sim-
ple if m is a variable. A constraint set CS is a ﬁnite set
of constraints; CS is simple if each constraint in the set is
simple.
A solution of a constraint set is a substitution that makes
every constraint to be solvable. We formalize this notion in
the next deﬁnition, using the fake operator F(·) introduced
in Deﬁnition 1.
Deﬁnition 11. We say that σ is a solution of the constraint
m : K if mσ and Kσ are ground and mσ ∈ F(Kσ).
m : K is solvable iff it has a solution. Also, γ is a partial
solution of m : K iff mγ : Kγ is solvable. Finally, a con-
straint set is solvable iff each of its constraints is solvable.
Millen and Shmatikov’s reduction algorithm (called P in
the following) [28] maps a constraint set CS to (a possibly
(cid:2) and substitu-
empty) set of pairs of simple constraints CS
tions γ. We do not explicitly deﬁne P here but rather use
it as a black box (since our extensions do not concern its
details), relying on P’s properties:
Theorem 12 ([28]2). (a) P always terminates. (b) Sound-
, γ), then γ is a par-
ness: If P applied to CS outputs (CS
is also a so-
tial solution of CS, and every solution of CS
lution of CSγ. (c) Completeness: If CS is solvable with
, γ)
solution σ, then applying P to CS returns some (CS
such that, for some solution σ
, σ = γσ
of CS
.
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
We now describe an algorithm (sketched in [10]) which
given a system scenario Sc0 and an initial intruder knowl-
edge IK non-deterministically produces a set of traces. This
procedure differs from the original given in [28] in that the
scenario is directly executed by incrementally adding events
during an execution and checking that the constraint set re-
mains solvable. This ensures that unsolvable interleavings
are never considered and thus results in a signiﬁcant efﬁ-
ciency gain.
Procedure 13. A state is a 4-tuple (cid:7)Sc, IK, CS, tr(cid:9), where
Sc is a system scenario, IK is the initial intruder knowledge,
CS is a simple constraint set and tr is a (possibly non-
ground) trace. An execution step from state (cid:7)Sc, IK, CS, tr(cid:9)
to (cid:7)Sc
(cid:2)
(cid:2)(cid:9) is obtained by performing:
, IK, CS
, tr
(cid:2)
2We actually reformulated the result [28] using the terminology of par-
tial solutions as given in Deﬁnition 11.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:51:42 UTC from IEEE Xplore.  Restrictions apply. 
1. Choose non-deterministically a non-empty role r ∈
(cid:2)(cid:9). Consider the following cases
Sc. Let r = (cid:7)ev r
for ev:
(a) If ev is a send communication event or a status
(cid:2)(cid:2)
event, let γ be the empty substitution and CS
be CS.
(b) If ev is a receive communication event, i.e. ev =
(cid:7)a : m (cid:7) b(cid:9), check that the intruder can generate
m using the knowledge K(tr) ∪ IK, by applying
procedure P to CS ∪ {m : (K(tr) ∪ IK)}, ob-
and a
taining a new simple constraint set CS
partial solution γ (Note that there may be many
possible CS
(cid:2)
2. Let Sc
and γ).
:= (Sc \ {r} ∪ {r
(cid:2)})γ, CS
:= CS
(cid:2)(cid:2)
(cid:2)(cid:2)
and
(cid:2)(cid:2)
(cid:2)
(cid:2) := (cid:7) trγ evγ (cid:9).
tr
A run for Sc0 with IK is a sequence of execution steps start-
ing from state (cid:7)Sc0, IK,∅,(cid:7)(cid:9)(cid:9).
Every (and only!) valid traces (as deﬁned above in Def-
inition 9) should be output in states of Procedure 13. The
formal statement of this result, along with its proof, appears
in [8, Theorem 2.3.6].
3 PS-LTL
We ﬁrst introduce the syntax and semantics of PS-LTL
and then specify security properties with the language.
3.1 Syntax and Semantics
The syntax of PS-LTL is deﬁned as follows.
Deﬁnition 14. PS-LTL formulas are generated by the fol-
lowing grammar:
φ ::= true | false | p(d1, . . . , dn) | learn(m)
| ¬φ | φ ∧ φ | φ ∨ φ | Yφ | φSφ | ∃v.φ | ∀v.φ
where each di (i ∈ [1 . . . n]) and m is either a variable in
V or a ground term in T +.
Standard formulas true, false, ¬φ, φ ∧ φ, φ ∨ φ carry
the usual meaning. The formula p(d1, . . . , dn) is a status
event. (For simplicity and w.l.o.g. we allow dis to be only
constant terms or variables.) learn(m) is a predicate stat-
ing that the intruder knows term m (we borrow the name
from NPATRL [30]). Yφ means ‘yesterday φ held’, while
φ1Sφ2 means that ‘φ1 held ever since a moment in which
φ2 held’. When v ∈ V, we write ∃v.φ and ∀v.φ to bind v
in φ, with the quantiﬁers carrying the usual meaning with
v ranging over terms. Other operators can be represented
using the above deﬁned operators: φ1 → φ2 is deﬁned as
¬φ1 ∨ φ2; Oφ (once φ) is a shorthand for true S φ and ﬁ-
nally Hφ (historically φ) is a shorthand for ¬O¬φ. For clar-
ity, we impose a precedence hierarchy for operators, where
unary operators bind stronger than binary operators. Op-
erators Y, O, and H bind equally strong and bind stronger
than ¬. The precedence hierarchy for binary operators is
S > ∧ > ∨ > →, where op1 > op2 means “op1 binds
stronger than op2”. In the sequel, we assume that PS-LTL
formulas are closed (i.e. they contain no free variables), and
that each variable is quantiﬁed at most once. Also, we as-
sume that the variables occurring in a formula φ are disjoint
from the variables occurring in execution traces tr from the
considered system scenario (this can always be achieved by
alpha conversion).
Our semantics (cid:7)tr, IK(cid:9) |= φ is deﬁned for two different
cases: First, we deﬁne it when tr is a ground trace, which
we call concrete validity. Later (in Deﬁnition 17), we ex-
tend the semantics to the general case, in which tr contains
variables. This establishes symbolic validity. Given a trace
tr, we recall that tri denotes its preﬁx trace consisting of
the ﬁrst i events.