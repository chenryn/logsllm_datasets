-------+
------
name
table
table
---
## Page 91
/usr//bin 了。
些参数虽然为空，但是会从/etc/my.cnf中获取，也可以支持额外的扩展参数。
--pid-file
选项。
目录下注册都可以正常识别。
做些什么。脚本的内容较长，我就列出一部分内容来。
start 来启动MySQL了
首先这个文件的名字没有直接的影响了，我们可以用 mysql mysql.server等，在这个
启动的过程中，会在/var/lock/subsys 下生成一个锁定文件，就是一个进程号的标记。
wait_for_pid created "$!" "$mysqld_pid_file_path"; return_value=$?
接下来 mysqld_safe的脚本下面会有较多的校验。
#cat /etc/my.cnflgrep basedir
另外 basedir 也是类似，你看若 my.cnf 里设置的如果不够规范，在应用的时候就是
datadir 会有一系列校验，但是也会以/etc/my.cnf的优先。
/U01/mysql/mysql.pid
# service mysql
分别是Sbindir、$datadir、$mysqld _pid_file_path 和$other_args 。
我们修改下脚本，把这几个参数值手工打印出来。
其实这个选项很容易理解了，就是 mysqld_safe 来启动，需要制定几个启动参数，有
# may be overwritten at next upgrade.
start 的部分核心部分即为：
首先这个脚本支持 start，stop，restart，reload（或者是 force-reload），status 这几个
当然这个是自动挡的操作，我们也可以手动档完成。我们来看看这个神奇的脚本在
/sbin/chkconfig
/sbin/chkconfig--add mysql
然后设置MySQL 自启动的服务，配置完成之后就可以运行命令 service mysql.server
wait_for_ pid created "s!"
$bindir/mysqld_
start
safe
args
>/dev/null
--datadir="$datadir"
第2章理解MySQL 体系结构丨69
mysq
---
## Page 92
70丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
来做一些改变。至少在这一点上，这个脚本是可以根据我们的需求来定制的。
停止并重新启动服务，可以使用这个选项。
如果存在，则使用 kill 的命令来杀掉 mysqld 进程。
不要小看这个脚本，里面涉及不少逻辑校验，也可以在这个基础上根据自己的需求
fistatus 的部分更简单，就是读取 pid 文件中的进程号信息。
'restart')
restart 的部分就是间接调用 stop 和 start 选项。
'reload'|'force-reload')
reload 的过程使用的相对和缓，使用了 kill-HUP 的选项，如果想要更改配置而不需
fi这个过程中，后台日志会逐步输出，然后释放锁定文件。
而 stop 模式的实现相对更直接一些，它是使用 kill -0 的方式来检测进程是否存在，
这个函数会调用 created（start 模式），removed（stop 模式）来处理 pid 文件。
# 1l /var/lock/subsys/mysql
if test -s "$mysqld_pid_file_path" 
rw-r-
else
if $0 stop
fi
else
then
$0 start $other_args 
Stop the service and regardless of whether it was
exit 1
 log_failure_msg "MySQL (Percona Server) PID file could not be found!"
touch "$mysqld_pid_file_path"
else
then
 rm "$mysqld_pid_file_path"
echo $echo_n "Shutting down MySQL (Percona Server)"
mysald
-HUP
$other_
  u   9y 
pid
_args;then
May
9 23:03 /var/lock/subsys/mysqlwait_for_pid
again.
then
(Percona Server)
is not running!
return_value=$?
so wait for it
_path"
to start.
---
## Page 93
过相比来说，还是比较脆弱的，新一些的版本有了一些新增的hints。
目前来看，要筛选不同时间段的 binlog 信息，只能通过系统层面来看了。
息，那就是时间戳，有了时间戳的信息，其实是很容易鉴别出一些数据量的增长情况。
可以和同步模式下的一些差异有所区别。
这一块 pt 是有另外一种设计思路，在这个参数的使用上，其实目前也是一种临界状态，
都是单向的，如果能够通过属性或者配置的方式得到一个统一的信息是很不错的体验。
processlist，show slave hosts，show slave status 的方式还是比较烦琐，因为信息监测通常
两种状态，如果能够支持 Master 或者 Slave，这一块的处理方式就会简单很多，使用 show
定义为 Master，Slave，Relay，SingleDB；其中 Relay 和 Single 是 Master 和 Slave 之间的
的扩展性设计有关，是没有这样一个明确的定义，目前我们通过应用层把MySQL的角色
问控制了。
这一块是比较薄弱的，
身就是一些硬性的限制和瓶颈。
用透明了，数据库层不透明，一动就会出问题。而且这些从 MySQL 的适用场景来说，
是说MySQL欠缺的地方，就一定要参考其他数据库的。
2.4.3
对MySQL特性的一些小结和建议，我是希望通过一种开放的方式来讨论，同时也不
优化器的部分是MySQL 近些年改进的一个重点，相比于原来确实改进了不少了。不
5．优化器比较薄弱
如果使用 show binary logs 看待一些 binlog 的状态，其实会发现里面明显少了一类信
4. binlog 的状态信息不够丰富
MySQL在Slave端的从库延迟如果要完全参考seconds_behind_master是会出问题的，
3．主从数据延迟的改进空间
在Oracle，Redis里面，数据库会有一个明确的属性Role，在MySQL里面可能和它
2. MySQL 的角色配置不明确
我们使用习惯了可能就不会有疑问了，
1．网络服务不支持多端口
其次我觉得下面的一些点是MySQL 待改进的地方。
本意是希望能够在应用设计中做出合理的取舍，不要什么都在数据库层面来做。
·分区表
·存储过程，触发器
·event的支持问题
待改进不意味着要添加，也需要做减法，我觉以下这些应该是明确不会大力支持的：
MySQL待改进的一些问题
，能够支持多端口也就意味着我们的服务也可以做到不同粒度的访
但是如果跳出来看这个现象，就会发现其实
第2章理解MySQL体系结构|71
，本
应
---
## Page 94
72丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
2.5
实现，不过效果还是很受限。
不全面，我们是没法完全定位到一个指定时间段的负载明细的；行业也有第三方的一些
帮助，物理的和逻辑的还是差别大了。
据写入，保证异常恢复，redo的使用在有些大公司有了明确的用途，对于数据复制大有
和Oracle 不同，但是设计思路是类似的，都是以空间换时间。
然有第三方的方案或者是使用触发器等方式实现。在这个地方，MySQL 的实现思路其实
MySQL 8.0增加对直方图的支持，在统计信息的粒度上也可以持续发力。
支持optimize_trace，将优化器生成执行计划的格式以JSON 输出。
了很多的参考数据辅助，在分析问题的时候还是会有一些瓶颈。其实5.6 版、5.7版已经
亮点部分。
想是等待模型，在 MySQL 层面还在初步的建设阶段，我看好后期的 sys schema，是一个
能够标识数据库服务的整体负载量，因为目前通过业务巡检的建设，发现通过QPS、TPS、
的简单数据计算，通过结果要反推出原本的一些信息是很难的。
除非一些大厂会明确的定义 server_id的算法，很多公司都是默认使用端口或者端口与IP
够支持类似域名的方式或者更具有系统属性的值对于 server_id 的管理会更加清晰，所以
数据库参数好比是数据库的一些开关，通过开启/关闭可以灵活的控制一些重要功能，
在性能优化的时候，总是会发现 MySQL 能够提供的原始信息比较少，如果监控信息
12.没有快照，问题诊断可参考信息太少
MySQL的redo 给很多同学感觉是比较低调，它从来不会“出差”，只负责底层的数
如果要对MySQL 表的数据做增量刷新，数据库层本身不提供这样一套平滑方案，当
11.MySQL的redo用途改进
10．数据增量刷新
方图是优化器生产执行计划时依赖的核心要素，有助于获取更准确地执行计划。
9．直方图和统计信息粒度
MySQL 的执行计划信息是比较简略的，相比于一些商业数据库的执行计划信息，少
8．执行计划信息比较粗
MySQL监控层一直想做的一个指标是类似 DB time 的一个东西，这个指标的含义是
7.等待模型还处在初级阶段
MySQL的 server_id 配置其实限制蛮大，需要指定格式，并在长度范围以内；如果能
6. server_id 太死板
MySQL 参数解析
---
## Page 95
所以就暂时使用showvariables的输出来代替。
版本,因为information_schema下的视图着实有限,还没有 session_variables 和global_variables,
如下图2-38所示。
information_schema.session_variables 和 global_variables，MySQL 的变量其实是分为三类,
2.5.1
的变化中已经退出了历史舞台。
统地反映出它功能的变化，值得一提的是，MySQL 参数不具备兼容性，有些参数在版本
通过参数我们也可以一窥数据库的功能完善情况，对于MySQL 来说，其参数可以较为系
5.7.13-6-log
5.6.23-72.1-log
5.6.16-64.2-56-log
 5.6.14-56-l0og
5.6.14-rel62.0-log
5.5.33-31.1-log
5.0.67-percona-highperf-log
把上面的数据整理出一个统计图，如下图2-39所示。
统计了一下，得到的一个基本列表，如下表2-6所示，尤其需要注意的是 MySQL5.0的
·both 则是同时有全局和线程两个状态。
·global_only是仅全局级别，比如 sync_master_info;
·session_only 是仅线程级别，比如 last _insert_id;
查看的参数的情况主要是依据 show variables 的结果，这里我们分别统计
MySQL参数变化分析
数据库版本
session_only
559
490
490
3
245*
Session_variables
表2-6
图2-38
both
global_only
245*
第2章理解MySQL 体系结构|73
 Global_ variables
---
## Page 96
74丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
对这种困境，通常的做法就是反复尝试重连或者直接重启，这对于已有的业务来说是很
置，默认是UTC，我们可以改为 SYSTEM，这样就是和系统同步的方式了。这个参数可
维护而言实在是太高了。所以需要提前规划和修正。
想开启的时候发现是只读变量，要生效只能等待下次重启，这种代价对于数据库高可用
2.5.2
也是默认没有打开的。所以我们需要关注这两个参数。
不友好的，所以我们迫切需要在数据库中预留少数连接来预防这类问题。
库的时候，这种感觉就好比你是一个公交车司机，但是你却挤不上自己开的公交车。面
以在线修改。
这个参数本身不是新参数,在Percon分支中 MySQL 5.6.14引入,但是直到 MySQL 5.7
这个参数和文件处理有关，在5.7中默认是NULL，即没有开启，这样对于一些导出
这个参数是只读变量，要修改后重启数据库生效。
如果数据库运维的时候碰到 too many connections，但是你却发现自己也连不上数据
（2） extra_max_connections 和 extra_port 
如果发现有些日志的时间戳不大对劲，其实可以注意一下 log_timestamps 的参数设
(1） log_timestamps
在此我不会把所有的参数都列出来，而是列出来最近碰到的一些。
在实践过程中，也发现了一些潜在的问题，有些参数开始的时候没有注意到，结果
MySQL 5.7已经推出多年了，很多公司针对不同版本也梳理了不同的参数模板。
(3） secure_file_priv
MySQL5.7参数解析
10
0
erf-l1og
图2-39
---
## Page 97
buffer pool size，否则可能会导致数据库 hang 住，影响业务访问 DB。
即开启了4个线程。
相应的并行度。
置，默认 slave_parallel_type 不是LOGICAL_CLOCK，我们可以根据服务器的配置来开启
要的。
当然作为系统优化来说，关闭这个参数对于性能的提升比较明显，作为日常监测还是需
了这个参数，对于系统内的死锁灵活开关，很多数据库分支还专门定制了类似的功能；
的 SQL语句来说就不可用了。
如果可以重启数据库开启，最好是重启开启，但是不建议反复启停该参数。
（8）在线开启GTID
在线修改 buffer pool大小，不建议随意使用，而是在负载比较低的情况下修改 innodb
（7）innodb_buffer_pool_size
这两个参数原来是1，需要注意下已有的模板是不是做了固定，5.7版中已经是4了，
，
（6）innodb_purge_threads 和 innodb_page_cleaners
MySQL的并行复制在5.7才算是有了本质的改变，需要注意下从库的这两个参数设
(5） slave_parallel_type 和 slave_parallel_workers 
这个参数是我们在版本规划时的一个重点参考参数，这个参数是在5.7.15引进，有
secure_file_priv=!!
这个参数如果设置为空串，就和5.6及以下版本兼容了
select * from user into outfile '/tmp/user.csv!
比如：
(4）innodb_deadlock_detect
第2章理解MySQL体系结构|75
---
## Page 98
码包，可以参考链接下载：
mysql/。
起来非常繁杂，我们可以参考国内的一些站点，比如：https://mirrors.cloud.tencent.com/
3.1.1
然不推荐线上批量安装部署，但是作为自己了解MySQL的一个学习过程，还是值得的。
3.1
恢复和安全审计，其中备份恢复的内容篇幅较大，是我们需要重点掌握的内容。
熟能生巧。本小节我把基础运维的工作整理成了四个部分：环境部署，服务管理，备份
维需求，需要优先满足；另一方面，这部分工作虽然繁琐但是随着时间的推移，也能够
对于这些运维工作，我把它归类为基础运维工作，一方面是因为这些工作是最基础的运
对于问题的排查需要快速定位，无论是个人还是团队，都会在工作中承担较大的压力。
安装说明和步骤可以参考：
https://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.35.tar.gz
http://dev.mysql.com/doc/refman/5.6/en/source-configuration-options.html
这种方法其实就是下载源码压缩包，然后通过cmake 来构建部署。比如5.6版本的源
MySQL的源码安装有两种方法可供参考。
值得推荐的安装镜像对于 MySQL的安装部署来说，总是存在各种子版本，其实整理
之前介绍了 MySQL 的二进制安装，作为一个 DBA，MySQL 源码安装还是要做的，虽
对于MySQL5.7版，把对应版本号改一下就可以，差别不是很大。
MySQL基础运维的工作繁琐而复杂，涉及的操作步骤多，工作量大，耗时长，而且
或者到官网直接点击下载也可以，如下图3-1所示。
1． 标准 MySQL 源构建
决心不过是记忆的奴隶，它会根据你的记忆随意更改。—《哈姆雷特》
源码安装 MySQL
环境部署和构建
第3章MySQL基础运维面面观
---
## Page 99
程中，你可以看到屏幕里满屏的日志输出，感觉好像你在做什么超级高深的事情一样。
尝鲜，掌握新版本新特性，这种方式还是比较高效的。
几十M，差别非常大。
感觉就是在参与开发一个项目一样，有着很完善的版本管理。
先来了解下安装的几个命令，其实源码安装的步骤还是很常规，时间都在编译的过
# git checkout 5.7
#git branch -r
我们使用 git 来查看版本的情况，发现 MySQL 8.0版的代码也可以抓取了，如果想尝
接下来的事情就和源码包安装差不多了。我们放在一起说。
Switched to branch
Ch
比如我们选择5.7版本，如下：
origin/8.0
origin/5.5
这个过程会持续一些时间，完成之后目录变成了大概1.5G，而源码压缩包大概就是
# git clone https://github.com/mysql/mysql-server.git
首先使用 git 来开启安装，会从 github 上来抓取。