::: titlepage
# []{#configuring-smart-cards-using-authselect_managing-smart-card-authentication.html#configuring-smart-card-authentication-with-lock-on-removal_configuring-smart-cards-using-authselect}配置智能卡认证，使它在取出智能卡时进行锁定 {.title}
:::
`authselect`{.literal}
服务可让您配置智能卡验证，以便在从读取器中删除智能卡后立即锁定屏幕。`authselect`{.literal}
命令必须包括以下变量：
::: itemizedlist
-   `with-smartcard`{.literal} --- 启用智能卡验证
-   `with-smartcard-required`{.literal}  -
    启用专用智能卡验证（禁用密码验证）
-   `with-smartcard-lock-on-removal`{.literal} --- 在智能卡被取出后会强制登出
:::
::: itemizedlist
**先决条件**
-   智能卡包含您的证书和私钥。
-   在读卡器中插入卡并连接到计算机。
-   `authselect`{.literal} 工具安装在您的本地系统中。
:::
::: itemizedlist
**步骤**
-   输入以下命令启用智能卡验证、禁用密码验证并在删除时强制锁定：
    ``` literallayout
    # authselect select sssd  with-smartcard  with-smartcard-required with-smartcard-lock-on-removal --force
    ```
:::
现在，当您取出卡时，屏幕会锁定。您必须重新插入智能卡来解锁它。
:::
:::
[]{#assembly_authenticating-to-sudo-remotely-using-smart-cards_managing-smart-card-authentication.html}
::: chapter
::: titlepage
# []{#assembly_authenticating-to-sudo-remotely-using-smart-cards_managing-smart-card-authentication.html#assembly_authenticating-to-sudo-remotely-using-smart-cards_managing-smart-card-authentication}第 6 章 使用智能卡进行远程向 sudo 进行身份验证 {.title}
:::
这部分论述了如何使用智能卡远程对 sudo 进行身份验证。在
`ssh-agent`{.literal} 服务本地运行且无法将 `ssh-agent`{.literal}
套接字转发到远程机器后，您可以使用 sudo PAM 模块中的 SSH
身份验证协议进行远程验证。
在使用智能卡进行本地登录后，您可以通过 SSH 登录到远程机器并运行
`sudo`{.literal} 命令，而无需使用智能卡验证的 SSH 转发来提示输入密码。
在本示例中，客户端通过 SSH 连接到 IPA 服务器，并在 IPA
服务器中使用保存在智能卡中的凭证运行 sudo 命令。
::: itemizedlist
-   [在 IdM 中创建 sudo
    规则](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_smart_card_authentication/assembly_authenticating-to-sudo-remotely-using-smart-cards_managing-smart-card-authentication#proc_creating-sudo-rules-in-idm_assembly_authenticating-to-sudo-remotely-using-smart-cards){.link}
-   [为 sudo 设置 PAM
    模块](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_smart_card_authentication/assembly_authenticating-to-sudo-remotely-using-smart-cards_managing-smart-card-authentication#proc_setting-up-the-pam-module-for-sudo_assembly_authenticating-to-sudo-remotely-using-smart-cards){.link}
-   [使用智能卡远程连接到
    sudo](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_smart_card_authentication/assembly_authenticating-to-sudo-remotely-using-smart-cards_managing-smart-card-authentication#proc_connecting-to-sudo-remotely-using-a-smart-card_assembly_authenticating-to-sudo-remotely-using-smart-cards){.link}
:::
::: section
::: titlepage
# []{#assembly_authenticating-to-sudo-remotely-using-smart-cards_managing-smart-card-authentication.html#proc_creating-sudo-rules-in-idm_assembly_authenticating-to-sudo-remotely-using-smart-cards}在 IdM 中创建 sudo 规则 {.title}
:::
此流程描述了如何在 IdM 中创建 sudo 规则，以便 `ipauser1`{.literal}
权限在远程主机上运行 sudo。
在本示例中，`less`{.literal} 和 `whoami`{.literal} 命令被添加为 sudo
命令来测试该流程。
::: itemizedlist
**先决条件**
-   IdM 用户已创建。在本例中，用户名为 `ipauser1`{.literal}。
-   您有远程运行 sudo 的系统的主机名。在本示例中，主机是
    `server.ipa.test`{.literal}。
:::
::: orderedlist
**步骤**
1.  创建名为 `adminrule`{.literal} 的 `sudo`{.literal}
    规则，允许用户运行命令。
    ``` literallayout
    ipa sudorule-add adminrule
    ```
2.  添加 `less`{.literal} 和 `whoami`{.literal} 作为 `sudo`{.literal}
    命令：
    ``` literallayout
    ipa sudocmd-add /usr/bin/less
    ipa sudocmd-add /usr/bin/whoami
    ```
3.  将 `less`{.literal} 和 `whoami`{.literal} 命令添加到
    `adminrule`{.literal} 中：
    ``` literallayout
    ipa sudorule-add-allow-command adminrule --sudocmds /usr/bin/less
    ipa sudorule-add-allow-command adminrule --sudocmds /usr/bin/whoami
    ```
4.  将 `ipauser1`{.literal} 用户添加到 `adminrule`{.literal} 中：
    ``` literallayout
    ipa sudorule-add-user adminrule --users ipauser1
    ```
5.  将运行 `sudo`{.literal} 的主机添加到 `adminrule`{.literal} 中：
    ``` literallayout
    ipa sudorule-add-host adminrule --hosts server.ipa.test
    ```
:::
::: itemizedlist
**其他资源**
-   请参阅 `ipa sudorule-add --help`{.literal}。
-   请参阅 `ipa sudocmd-add --help`{.literal}。
:::
:::
::: section
::: titlepage
# []{#assembly_authenticating-to-sudo-remotely-using-smart-cards_managing-smart-card-authentication.html#proc_setting-up-the-pam-module-for-sudo_assembly_authenticating-to-sudo-remotely-using-smart-cards}为 sudo 设置 PAM 模块 {.title}
:::
这个步骤描述了如何在运行 sudo 的任何主机上安装和设置
`pam_ssh_agent_auth.so`{.literal} PAM 模块进行 sudo 身份验证。
::: orderedlist
**步骤**
1.  安装 PAM SSH 代理：
    ``` literallayout
    dnf -y install pam_ssh_agent_auth
    ```
2.  在任何其他 `auth`{.literal} 条目之前，将
    `pam_ssh_agent_auth.so`{.literal} 添加到 `/etc/pam.d/sudo`{.literal}
    文件的 `authorized_keys_command`{.literal}:
    ``` literallayout
    #%PAM-1.0
    auth sufficient pam_ssh_agent_auth.so authorized_keys_command=/usr/bin/sss_ssh_authorizedkeys
    auth       include      system-auth
    account    include      system-auth
    password   include      system-auth
    session    include      system-auth
    ```
3.  要在运行 sudo 命令时启用 SSH 代理转发功能，请将以下内容添加到
    `/etc/sudoers`{.literal} 文件中：
    ``` literallayout
    Defaults env_keep += "SSH_AUTH_SOCK"
    ```
    这允许从存储在 IPA/SSSD 中的智能卡中的公钥在无需输入密码的情况下向
    sudo 进行身份验证。
4.  重启 `sssd`{.literal} 服务：
    ``` literallayout
    systemctl restart sssd
    ```
:::
::: itemizedlist
**其他资源**
-   请参阅 `pam`{.literal} man page。
:::
:::
::: section
::: titlepage
# []{#assembly_authenticating-to-sudo-remotely-using-smart-cards_managing-smart-card-authentication.html#proc_connecting-to-sudo-remotely-using-a-smart-card_assembly_authenticating-to-sudo-remotely-using-smart-cards}使用智能卡远程连接到 sudo {.title}
:::
这个步骤描述了如何配置 SSH 代理和客户端，以便使用智能卡远程连接到 sudo。
::: itemizedlist
**先决条件**
-   您已在 IdM 中创建了 sudo 规则。
-   已安装并设置 `pam_ssh_agent_auth`{.literal} PAM 模块，用于在您要运行
    sudo 的远程系统中进行 sudo 身份验证。
:::
::: orderedlist
**步骤**
1.  启动 SSH 代理（如果尚未运行）。
    ``` literallayout
    eval `ssh-agent`
    ```
2.  将您的智能卡添加到 SSH 代理。提示时输入您的 PIN：
    ``` literallayout
    ssh-add -s /usr/lib64/opensc-pkcs11.so
    ```
3.  通过启用了 ssh-agent 转发的 SSH 连接（使用 `-A`{.literal}
    选项）连接到您要远程运行 `sudo`{.literal} 的系统：
    ``` literallayout
    ssh -A PI:EMAIL
    ```
:::
::: itemizedlist
**验证步骤**
-   使用 `sudo`{.literal} 运行 `whoami`{.literal} 命令：
    ``` literallayout
    sudo /usr/bin/whoami
    ```
:::
不应该提示您输入 PIN 或密码。
:::
:::
[]{#assembly_troubleshooting-authentication-with-smart-cards_managing-smart-card-authentication.html}
::: chapter
::: titlepage
# []{#assembly_troubleshooting-authentication-with-smart-cards_managing-smart-card-authentication.html#assembly_troubleshooting-authentication-with-smart-cards_managing-smart-card-authentication}第 7 章 使用智能卡对身份验证进行故障排除 {.title}
:::
下面的部分描述了如何在设置智能卡验证时解决您可能遇到的一些问题。
::: itemizedlist
-   [测试智能卡验证](#assembly_troubleshooting-authentication-with-smart-cards_managing-smart-card-authentication.html#proc_testing-smart-card-authentication_assembly_troubleshooting-authentication-with-smart-cards "测试系统中的智能卡访问"){.link}
-   [使用 SSSD
    对智能卡验证进行故障排除](#assembly_troubleshooting-authentication-with-smart-cards_managing-smart-card-authentication.html#proc_troubleshooting-smart-card-authentication-with-sssd_assembly_troubleshooting-authentication-with-smart-cards "使用 SSSD 对智能卡验证进行故障排除"){.link}
-   [验证 IdM Kerberos KDC 可以使用 PKINIT 和 CA
    证书正确位置](#assembly_troubleshooting-authentication-with-smart-cards_managing-smart-card-authentication.html#proc_verifying-that-idm-kerberos-kdc-can-use-pkinit-and-that-the-ca-certificates-are-correctly-located_assembly_troubleshooting-authentication-with-smart-cards "验证 IdM Kerberos KDC 可以使用 PKINIT 和 CA 证书正确位置"){.link}
-   [增加 SSSD
    超时](#assembly_troubleshooting-authentication-with-smart-cards_managing-smart-card-authentication.html#proc_increasing-sssd-timeouts_assembly_troubleshooting-authentication-with-smart-cards "增加 SSSD 超时"){.link}
-   [证书映射和匹配规则故障排除](#assembly_troubleshooting-authentication-with-smart-cards_managing-smart-card-authentication.html#assembly_troubleshooting-certificate-mapping-and-matching-rules_assembly_troubleshooting-authentication-with-smart-cards "证书映射和匹配规则故障排除"){.link}
:::
::: section
::: titlepage
# []{#assembly_troubleshooting-authentication-with-smart-cards_managing-smart-card-authentication.html#proc_testing-smart-card-authentication_assembly_troubleshooting-authentication-with-smart-cards}测试系统中的智能卡访问 {.title}
:::
这个步骤描述了如何测试是否可以访问智能卡。
::: itemizedlist
**先决条件**
-   已安装并配置了用于智能卡的 IdM 服务器和客户端。
-   您已从 `nss-tools`{.literal} 软件包安装了 `certutil`{.literal}
    工具。
-   您有智能卡的 PIN 或密码。
:::
::: orderedlist
**步骤**
1.  使用 `lsusb`{.literal} 命令，验证智能卡读取器是否在操作系统中看到：
    ``` screen
    $ lsusb
    Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub
    Bus 001 Device 003: ID 072f:b100 Advanced Card Systems, Ltd ACR39U
    Bus 001 Device 002: ID 0627:0001 Adomax Technology Co., Ltd
    Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
    ```
    有关 RHEL 中经过测试和支持的智能卡和读卡的更多信息，请参阅 [RHEL 9
    中的智能卡支持](https://access.redhat.com/articles/4253861){.link}。
2.  确保 `pcscd`{.literal} 服务和套接字已启用并正在运行：
    ``` screen
    $ systemctl status pcscd.service pcscd.socket
    ● pcscd.service - PC/SC Smart Card Daemon
          Loaded: loaded (/usr/lib/systemd/system/pcscd.service; indirect;
    vendor preset: disabled)
          Active: active (running) since Fri 2021-09-24 11:05:04 CEST; 2
    weeks 6 days ago
    TriggeredBy: ● pcscd.socket
            Docs: man:pcscd(8)
        Main PID: 3772184 (pcscd)
           Tasks: 12 (limit: 38201)
          Memory: 8.2M
             CPU: 1min 8.067s
          CGroup: /system.slice/pcscd.service
                  └─3772184 /usr/sbin/pcscd --foreground --auto-exit
    ● pcscd.socket - PC/SC Smart Card Daemon Activation Socket
          Loaded: loaded (/usr/lib/systemd/system/pcscd.socket; enabled;