### The TCAS Application and Its Translation

The TCAS (Traffic Collision Avoidance System) application consists of approximately 140 lines of C code, which is compiled into 913 lines of MIPS assembly code. This MIPS assembly code is then translated into 800 lines of SymPLFIED's assembly code using a custom translator. The TCAS application takes 12 parameters as input, representing the positions of two aircraft, and outputs a single number. The output can be one of three values: 0, 1, or 2. These values indicate:
- 0: Unresolved condition
- 1: Upward advisory
- 2: Downward advisory

Based on these advisories, the aircraft operator can decide to increase or decrease the aircraft's altitude.

### Experimental Setup

#### Goal
Our goal is to determine whether a transient error in the register file during the execution of the TCAS application can lead to an incorrect output (i.e., an advisory). We selected an input for TCAS that would produce an upward advisory (value of 1) under normal conditions. We then directed SymPLFIED to search for runs where the program did not throw an exception but produced a value other than 1, assuming a single register error in each execution.

#### Search Space
The search space includes about \(800 \times 32\) possible injections, as there are 32 registers in the machine, and each instruction in the program is chosen as a breakpoint. To reduce the search space, only the register(s) used by the instruction at each breakpoint were injected with errors.

#### Execution
The injections were executed on a cluster of 150 dual-processor AMD Opteron machines to ensure quick turnaround. The search command was split into multiple smaller searches, each sweeping a particular section of the program code. Each node in the cluster performed the smaller searches independently, and the results were pooled to find the overall set of errors. Each search task was capped at finding a maximum of 10 errors, and a maximum time of 30 minutes was allotted for task completion.

### Validation

To validate the results from SymPLFIED, we augmented the SimpleScalar simulator with the capability to inject errors into the source and destination registers of all instructions, one at a time. For each register, we injected three extreme values in the integer range and three random values to consider a representative sample of potential errors.

### SymPLFIED Results

#### Running Time
Of the 150 search tasks started on the cluster, 85 completed within the allotted 30 minutes. The remaining 65 tasks did not complete in the allotted time. Of the 85 completed tasks, 70 did not find any errors that satisfied the search conditions (either the error was benign or the program crashed). These 70 tasks completed within at most 1 minute. The 15 tasks that found errors satisfying the search conditions took less than 4 minutes, with an average completion time of 64 seconds.

#### Outcomes
For the TCAS application, we found only one case where an output of 1 was converted to an output of 2 due to fault injections. This outcome is potentially catastrophic, as it is hard to distinguish from the correct outcome of TCAS. Other cases included:
- TCAS printing an output of 0 (unresolved) instead of 1.
- The output being outside the range of allowed values.
- The program crashing (numerous cases).

We do not report these cases, as TCAS is an advisory tool, and the operator can ignore the advisory if they determine the output is incorrect. We also found violations where the value was computed correctly but printed incorrectly, but these are not reported as the output method may differ in the real system.

### Code Excerpt and Error Analysis

```c
int alt_sep_test() {
    enabled = High_Confidence && (Own_Tracked_Alt_Rate < MAXALTDIFF);
    tcas_equipped = Other_Capability == TCAS_TA;
    intent_not_known = Two_of_Three_Reports_Valid && (Other_RAC == NO_INTENT);
    alt_sep = UNRESOLVED;

    if (enabled && ((tcas_equipped && intent_not_known) || !tcas_equipped)) {
        Own_Below_Threat();
        need_upward_RA = Non_Crossing_Biased_Climb() && Own_Above_Threat();
        need_downward_RA = Non_Crossing_Biased_Descend() && Own_Below_Threat();

        if (need_upward_RA && need_downward_RA)
            alt_sep = UNRESOLVED;
        else if (need_upward_RA)
            alt_sep = UPWARD_RA;
        else if (need_downward_RA)
            alt_sep = DOWNWARD_RA;
        else
            alt_sep = UNRESOLVED;
    }
    return alt_sep;
}
```

The error occurs in the function `Non_Crossing_Biased_Climb` and corrupts the value of register `$31`, which holds the function return address. As a result, control is transferred to the statement `alt_sep = DOWNWARD_RA` instead of the instruction following the call to `Non_Crossing_Biased_Climb`. This causes the function to return the value 2 instead of 1. This error is in the function call/return mechanism, which is added by the compiler, making it detectable only at the assembly language level.

### SimpleScalar Results

We performed over 6000 fault-injection runs on the TCAS application using the modified SimpleScalar simulator. Despite exhaustive injection into all registers, SimpleScalar was unable to uncover even a single scenario with the catastrophic outcome of '2'. This is because, to find such an error, the injection must occur at the right place (e.g., register `$31` in `Non_Crossing_Biased_Climb`) and the right value must be chosen (e.g., the address of the assignment statement in Figure 4).

We extended the SimpleScalar-based fault injection campaign to inject 41000 register faults in the TCAS application, which completed in 35 hours but still failed to find such an error.

### Application to Larger Programs

We analyzed the `replace` program from the Siemens suite using SymPLFIED. The `replace` program matches a given string pattern in the input string and replaces it with another given string. It translates to about 1550 lines of assembly code. Using the same experimental setup, we ran SymPLFIED to find all single register errors leading to incorrect outcomes. The overall search was decomposed into 312 search tasks, of which 202 completed within 30 minutes. In 148 of the completed tasks, either the error was benign or the program crashed. Only 54 tasks found errors leading to incorrect outcomes, with an average completion time of 4 minutes for no erroneous solutions and 10 minutes for runs that found errors.

### Conclusions

This paper presents SymPLFIED, a modular and flexible framework for performing symbolic fault injection and evaluating error detectors in programs. We implemented SymPLFIED for a MIPS-like processor using the Maude rewriting logic engine. We demonstrated SymPLFIED on the widely deployed TCAS application and found a non-trivial case of a hardware transient error that can lead to catastrophic consequences for the TCAS system.

### Acknowledgments

This research was funded in part by NSF grants CNS-05-51665 and CNS-04-6351. We thank the Gigascale System Research Consortium (GSRC) and the Motorola Center for Communications at UIUC for their support.

### References

[1] Hiller, M., A. Jhumka, and N. Suri. On the placement of software mechanisms for detection of data errors. Proc. Int'l Conf. on Dependable Systems and Networks (DSN), pp. 135-144, 2002.
[2] Arlat, J., et al. Fault injection for dependability validation: A methodology and some applications. IEEE Trans. Softw. Eng., 16(2), pp. 166-182, February 1990.
[3] Cyrluk, D. Microprocessor verification in PVS: A methodology and simple example. Tech Report SRI-CSL-93-12, 1993.
[4] Boyer, R. S., and J. S. Moore. Program verification. Journal of Automated Reasoning, 1(1), pp. 17-23, 1985.
[5] Krautz, U., et al. Evaluating coverage of error detection logic for soft errors using formal methods. Proc. of the Conf. on Design, Automation and Test in Europe (DATE), 2006.
[6] Seshia, S. A., W. Li, and S. Mitra. Verification-guided soft error resilience. Proc. of the Conf. on Design, Automation and Test in Europe (DATE), 2007.
[7] Nicolescu, B., et al. On the use of model checking for the verification of a dynamic signature monitoring approach. IEEE Trans. on Nuclear Science, 52(5), pp. 1555-1561, October 2005.
[8] King, J. C. Symbolic execution and program testing. Communications of ACM, 19(7), pp. 385-394, July 1976.
[9] Bush, W., et al. A static analyzer for finding dynamic programming errors. Software: Practice and Experience, 30(7), 2000.
[10] Larsson, D., and R. Hahnle. Symbolic fault injection. International Verification Workshop (VERIFY), vol. 259, pp. 85-103, 2007.
[11] Clavel, M., S. Eker, P. Lincoln, and J. Meseguer. Principles of Maude. Proc. First Int'l Workshop on Rewriting Logic and Its Applications, 1996.
[12] Clarke, E., et al. Bounded model-checking using satisfiability solving. Formal Methods in System Design, July 2001.
[13] Pattabiraman, K., et al. SymPLFIED: Symbolic program-level fault Injection and error detection framework. Technical Report UILU-ENG-08-2205, University of Illinois at Urbana-Champaign, March 2008.
[14] Federal Aviation Administration. TCAS II Collision Avoidance System (CAS) System Requirements Spec, 1993.
[15] Lygeros, J., and N.A. Lynch. On the formal verification of the TCAS conflict resolution algorithms. Proc. 36th IEEE Conf. on Decision and Control, pp. 1829-1834, 1997.
[16] Burger, D., and T. M. Austin. The SimpleScalar tool set, version 2.0. Computer Architecture News, 25(3), 1997.
[17] Hutchins, M., et al. Experiments on the effectiveness of dataflow- and control flow-based test adequacy criteria. Int'l Conf. on Software Engineering (ICSE), pp. 191-200, 1994.
[18] Perry, F., et al. Fault-tolerant Typed Assembly Language, Int'l Conf. on Prog. Lang. Design and Implementation (PLDI), 2007.