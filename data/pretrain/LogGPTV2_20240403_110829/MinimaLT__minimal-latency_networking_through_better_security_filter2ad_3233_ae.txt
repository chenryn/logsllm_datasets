puzzles per second. Since a puzzle interrogation and padded
solution packet are 206 and 1,024 bytes, respectively, a single
CPU core can verify puzzles at 394% of Gb/s line speed.
Clients overloaded by puzzles (possibly forged by a MitM
attacker) can choose how to allocate CPU time, for example
prioritizing connections that succeed without puzzles.
Ampliﬁcation attacks against third parties At tun-
nel establishment, an anonymous or stranger-authorized
MinimaLT service might respond to packets from clients
which spoof another host’s IP address. This is always pos-
sible with the directory service, which initially must react
to a request from an unknown party before transitioning to
key-erasure-protected authentication. A MitM could spoof
the source of packets and even complete a successive puzzle
433interrogation. A weaker attacker could elicit a response to
the ﬁrst packet sent to a server. Given this, MinimaLT is
designed to minimize ampliﬁcation attacks, in which a re-
quest is smaller than its reply (to a spoofed source address).
A connection request causes a connection acknowledgment
or puzzle interrogation; both responses are smaller than the
request. Flow-control acknowledgments are randomized so
that blind clients cannot request further packets.
After establishing a tunnel Given a tunnel, an attacker
can easily forge a packet with garbage in place of cipher-
text and send it to a service. This forces MinimaLT to
decrypt the packet and verify its checksum, wasting proces-
sor time. However, MinimaLT’s symmetric cryptography
on established tunnels operates at line speed on commodity
hardware (§6.2), so DoS would be equivalent to the attacker
exhausting the network.
MinimaLT can send puzzle RPCs arbitrarily, so a server
can use low cost (i.e., small w) puzzles to check whether
clients remain available, and then garbage collect idle con-
nections. Additionally, a server can increase the value of
w to make clients pay a computational cost to keep a con-
nection alive. We use cryptographically protected RPCs to
pose and solve these puzzles to prevent an attacker from
attempting RST-style mischief [18].
Creation of ﬁctitious strangers Stranger services are
vulnerable to further CPU attacks—attackers could gener-
ate false user identities that would fail authentication, but
only after the server performed a public-key decryption. A
server will apply the puzzle RPCs when connection rates
exceed the limits discussed in §6.2.
An attacker could also generate veriﬁable authenticators
and connect to a stranger-authorized service many times as
diﬀerent stranger users. This would cause a system to gen-
erate accounts for each stranger identity. However, this is
no diﬀerent from any other creation of pseudo-anonymous
accounts; it is up to the system to decide how to allocate
account resources to strangers. Perhaps the rate is faster,
but unlike many contemporary pseudo-anonymous services,
a MinimaLT system can prune stranger accounts as neces-
sary; the stranger’s long-term resources (e.g., ﬁles on disk)
will remain isolated and become available if the account
is later regenerated because public keys remain temporally
unique [50]. Of course, applications could impose additional
requirements (e.g., a Captcha) before allowing a stranger
to consume persistent resources like disk space.
8 Comparison to previous work
Table 4 compares MinimaLT to several earlier Internet pro-
tocols. MinimaLT is unique in that it provides encryp-
tion and authentication with fast key erasure while allow-
ing a client to include data in the ﬁrst packet sent to a
server (often forgoing pre-transmission round trips entirely).
MinimaLT also contains robust DoS protections.
We have omitted one very recent protocol from Table 4:
Google’s QUIC, which was developed independently of and
concurrently with MinimaLT. Our preliminary assessment
of the QUIC protocol documentation (released in late June
2013) is that QUIC uses some of the same latency-reducing
techniques as MinimaLT, but does not overlap DNS/direc-
tory service lookups with tunnel establishment. QUIC also
appears to have lower security goals than MinimaLT:
for
example, allowing earlier data in long-term connections to
be retroactively decrypted.
8.1 Security advantages over TLS
TLS [15] is widely deployed as the primary mechanism for
securing Internet communication across administrative do-
mains, and in particular as the primary network security
layer in web browsers. The importance of TLS warrants a
multifaceted comparison of TLS with MinimaLT. We al-
ready showed in §6 that MinimaLT is more eﬃcient than
TLS, but we also claim that MinimaLT has several impor-
tant security advantages over TLS, as discussed below.
8.1.1 Cryptographic abstractions TLS builds on sep-
arate cryptographic primitives for public-key cryptography,
secret-key encryption, etc. Unfortunately, composing these
low-level primitives turns out to be complicated and error-
prone. For example, the BEAST attack [17] and the very
recent Lucky 13 attack [2] recovered TLS-encrypted cookies
by exploiting the fragility of the “authenticate-pad-encrypt”
mechanism used by TLS to combine secret-key encryption
with secret-key authentication. TLS implementations have
worked around these particular attacks by (1) sending extra
packets to hide the “IV” used by BEAST and (2) modifying
implementations to hide the timing leaks used by Lucky 13;
however, further attacks would be unsurprising.
The modern trend is for cryptographers to take responsi-
bility for providing secure higher-level primitives. For exam-
ple, cryptographers have deﬁned robust high-performance
“AEAD” primitives that handle authentication and encryp-
tion all at once using a shared secret key [45], taking care of
many important details such as padding and key derivation.
This simpliﬁes protocol design, eliminating the error-prone
step of having each protocol combine separate mechanisms
for authentication and encryption. TLS 1.2 (not yet widely
deployed) supports AEAD primitives.
MinimaLT is built on top of an even higher-level prim-
itive, public-key authenticated encryption, as mentioned in
§4.2. This further simpliﬁes protocol design.
8.1.2 Veriﬁability One might
existing
protocol-analysis tools are already powerful enough to
formally verify the conﬁdentiality and integrity properties
of a clean high-level protocol such as MinimaLT, assuming
that the underlying cryptographic primitives are secure.
However, the security properties of authenticated encryp-
tion using non-interactive DH were only very recently
formalized (see [25]), and more work is required to develop
a higher-level security calculus on top of these proper-
ties; note that replacing authenticated encryption with
unauthenticated encryption would eliminate the security of
typical protocols that use authenticated encryption. Thus,
we do not claim that MinimaLT is formally veriﬁed.
However, we do claim that MinimaLT will be far easier to
verify than TLS, and that there are far fewer opportunities
for mistakes in MinimaLT than in TLS. Attempts to verify
the security of TLS (such as [32]) have so far covered only
limited portions of TLS, and have not prevented a seemingly
never-ending string of announcements of TLS security fail-
ures, such as the BEAST and Lucky 13 attacks cited above.
The unveriﬁed portions of TLS are more complex than the
entire MinimaLT protocol.
8.1.3 Security goals TLS is normally implemented as a
user-space library that adds cryptographic network protec-
tions to an insecure transport layer, TCP. This structure
think
that
434prevents TLS from providing strong protection against DoS:
packets that deny service at the TCP layer are not even seen
by TLS.
TLS can provide some key erasure through the use of
ephemeral DH. Here the server generates a new DH key pair
for each TLS session, and it uses this key pair to negotiate
the session key with the client [38]. This means that past
session keys remain secret even if a server’s long-term key is
compromised. On the other hand, a TLS session itself might
remain in use for a long time, and session keys are obviously
vulnerable to physical compromise as long as they are in use.
This eﬀect is compounded when servers support abbreviated
connections [39]. In contrast, MinimaLT implements its key
erasure using periodic rekeys, as we described in §5.5. Plac-
ing a time limit on keys simpliﬁes security analysis because
it removes the eﬀect of variable session lifetimes.
8.1.4 Robustness Many Internet applications avoid the
use of TLS or use weak TLS options [58]. Even well-meaning
developers routinely misuse complex TLS APIs, resulting in
security holes [26, 21]. Optionally, TLS can provide user-
level authentication using client-side certiﬁcates, but autho-
rization is left to application logic. MinimaLT forgoes back-
wards compatibility to provide a simpler, less mistake-prone
platform, and it subsumes much of the work traditionally
left to application programmers.
Another beneﬁt of MinimaLT’s clean-slate design is a
simpler code base. OpenSSL contains 252,000 C Lines of
Code (LoC). Much of this code might not be used, de-
pending on how a service is conﬁgured or because it also
implements utilities and benchmarks, but our study found
74,000 LoC associated with the DHE-RSA-AES128-SHA ci-
pher suite. Additionally, there is code in the OS to support
TCP/IP. In contrast, MinimaLT’s design results in a pro-
tocol code base of 12,000 LoC along with NaCl, where our
choice of ciphers uses another 6,920 LoC.
8.2 Advantages over other protocols
TCP’s three-way handshake establishes a random Initial Se-
quence Number (ISN). This is necessary for two reasons:
(1) the ISN serves as a weak authenticator (and liveness
check) because a non-MitM attacker must predict it to pro-
duce counterfeit packets, and (2) the ISN reduces the like-
lihood that a late packet will be delivered to the wrong ap-
plication.
MinimaLT encrypts the sequence number, provides cryp-
tographic authentication, and checks liveness using puz-
zles, addressing (1). MinimaLT uses TIDs, connection IDs,
and nonces to detect late packets, addressing (2). Thus
MinimaLT can include application data in a connection’s
ﬁrst packet, as discussed above, eliminating the need for
a transport-layer three-way handshake. Extra round trips
are necessary only if the tunnel does not exist; and then
only when the client does not have S’s service record or is
presented with a puzzle. If the server provides a puzzle, it
means that the server is under heavy load so that additional
latency is unavoidable.
TCP Fast Open (TFO) [48] clients can request a TFO
cookie that allows them to forgo TCP’s three-way hand-
shake on future connections. However, since any client may
request a TFO cookie, a client may spoof its sending IP ad-
dress to mount a DoS attack against a server; under this
condition, the server must again require a three-way hand-
shake. To beneﬁt from TFO, a server application must be
idempotent, a requirement that MinimaLT avoids.
Structured Stream Transport (SST) [24] allows applica-
tions to associate lightweight network streams with an ex-
isting stream, reducing the number of three-way handshakes
incurred by applications and providing semantics useful for
applications that use both data and control connections.
MinimaLT eliminates the handshake on even the ﬁrst con-
nection, and MinimaLT’s tunnels do not require a program-
mer’s explicit use of a lightweight stream API.
Internet Protocol Security (IPsec) provides very broad
conﬁdentiality and integrity protections because it is gener-
ally implemented in the OS kernel. For example, IPsec can
be conﬁgured such that all communication between node A
and node B is protected. This universality simpliﬁes assur-
ance. IPsec also provides fast key erasure at the expense of
a DH computation [34]. Many key management protocols
have been proposed for IPsec; we were particularly inspired
by Just Fast Keying due to its simplicity, focus on forward
secrecy, and DoS resilience [1]. IPsec’s major shortcoming
is that its protections stop at the host; it focuses on net-
work isolation and host authentication/authorization. For
example, IPsec does not authenticate or authorize users.
Labeled IPsec [31] combines IPsec and Security-Enhanced
Linux (SELinux) [44] to provide more comprehensive net-
work protections. Using a domain-wide authorization pol-
icy, the system (1) associates SELinux labels with IPsec se-
curity associations, (2) limits a process’s security associa-
tions (connections) using a kernel authorization policy, and
(3) employs a modiﬁed inetd that executes worker processes
in a security domain corresponding to the label associated
with an incoming request.
In this manner, labeled IPsec
can solve many of the authentication deﬁciencies in plain
IPsec. However, labeled IPsec builds upon the Linux ker-
nel, SELinux, and IPsec, each of which are very complex.
Furthermore, IPsec security association granularity limits
the granularity of controls in labeled IPsec.
In contrast,
MinimaLT is designed from scratch, signiﬁcantly simplify-
ing policy speciﬁcation, implementation, and use.
Many researchers have attempted to reduce the latency in-
herent in TLS and TCP. False Start (no longer used), Snap
Start, and certiﬁcate pre-fetching have accelerated establish-
ing a TLS session [41, 37, 56]. Datagram Transport Layer
Security (DTLS) [49] provides TLS protections on top of
UDP, which is useful when reliability is unnecessary. How-
ever, DTLS shares TLS’ initial handshake latency.
Like MinimaLT, tcpcrypt [10] investigated ubiquitous en-
cryption, but it maintains backwards compatibility with
TCP. Tcpcrypt provides hooks that applications may use
to provide authentication services and determine whether a
channel is encrypted. MinimaLT’s approach is diﬀerent; it
is clean-slate and eases host assurance by moving authenti-
cation and encryption services to the system layer.
Stream Control Transmission Protocol (SCTP) provides
reliable delivery and congestion control [57], but it diﬀers
from TCP in that it can bundle messages from multiple
applications (i.e., chunks) into a single packet. MinimaLT
borrows this technique.
9 Conclusion
MinimaLT provides network conﬁdentiality, integrity, pri-
vacy, server authentication, user authentication, and DoS
protections with a simple protocol and implementation.
435O
F
a s t
T
S
S
(cid:88)
e n
p
I P s e c
(cid:88)
(cid:88)
a
L
(cid:88)
(cid:88)
(cid:88)
(cid:88)
2 ≥4 ≥4
1 ≥3 ≥3
0
1
(cid:88)
1
P
C
T
P
C
T
2
1
1
2
1
0
I P s e c
als e
S
F
(cid:88)
(cid:88)
(cid:88)
b
L
ele d
T
(cid:88)
(cid:88)
(cid:88)
S t a r t