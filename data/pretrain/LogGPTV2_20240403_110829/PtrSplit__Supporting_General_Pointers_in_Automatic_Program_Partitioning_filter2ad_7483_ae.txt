### Table 2: Partitioning Results for SPECCPU 2006 Benchmarks (Using a Random Global as Sensitive Variable)

| Sensitive Data and Type | # of Functions / Sensitive Functions | PBT Overhead | Total / BR Pointers | SPBT Overhead |
|------------------------|-------------------------------------|--------------|---------------------|---------------|
| `LBM_Grid* srcGrid`    | 19/5                                | 141.4%       | 695/131             | 19.7%         |
| `struct quantum_reg* lambda` | 115/3                               | 282.3%       | 1690/128            | 11.2%         |
| `char* progName`       | 100/6                               | 59.4%        | 4356/8              | 3.1%          |
| `char* realholdings`   | 144/5                               | 41.7%        | 3415/81             | 3.4%          |
| `double[] path_coeff`  | 235/2                               | 111%         | 5001/0              | 0%            |
| `char** liveargs`      | 369/3                               | 90.5%        | 9491/37             | 5.1%          |
| `int ser_randseed`     | 538/7                               | 128.5%       | 17692/175           | 5.8%          |
| `int[] FirstMBInSlice` | 590/5                               | 234.4%       | 32212/461           | 9.6%          |

### Table 3: Random Partitioning Results for SPECCPU 2006 Benchmarks

| Benchmark  | Average BR-Pointer Ratio | Average SPBT Overhead | Average Total Overhead |
|------------|--------------------------|-----------------------|------------------------|
| `lbm`      | 14.3%                    | 15.4%                 | 55.1%                  |
| `libquantum` | 16.2%                    | 51.5%                 | 163.3%                 |
| `bzip2`    | 15.2%                    | 16.4%                 | 71.3%                  |
| `sjeng`    | 10.7%                    | 14.1%                 | 63.9%                  |
| `milc`     | 8.7%                     | 23.4%                 | 83.2%                  |
| `sphinx`   | 8.8%                     | 17.9%                 | 37.5%                  |
| `hmmer`    | 9.1%                     | 29.8%                 | 89.7%                  |
| `h264ref`  | 79.3%                    | 38.4%                 | 101.9%                 |
| **Average** | **11.8%**                | **29.4%**             | **79.3%**              |

### Improvements to the Partitioning Algorithm

A second straightforward improvement to the partitioning algorithm is to produce partitions that balance security and performance. A program profiling tool can be used to profile the frequency of function calls and the size of data sent over these calls. These performance metrics can be used to annotate Program Dependence Graph (PDG) edges. An algorithm similar to the one used by ProgramCutter [32] can then be applied to generate a partitioning that considers both security and performance.

Another interesting direction is to target specific application domains. For example, OS developers have long been interested in privilege separation for kernel code, with some manual efforts already in place [13]. Similarly, there is a need to partition legacy applications to be compatible with trusted execution environments like Intel's SGX. Extending support to C++ applications requires extending our type-based marshalling and unmarshalling to cover more types, including C++ classes.

### Challenges in Multi-threaded Code

PtrSplit automatically partitions single-threaded code, but extending it to multi-threaded code presents technical challenges. One issue is the complexity of computing data dependence due to shared data between threads. Additionally, the mechanism of deep copying pointer data naturally leads to a sequential execution model: pointer data is copied at the beginning of an RPC call and copied out at the end. In a multi-threaded application, one thread can perform an RPC call, leading to a copy of the passed pointer data. Without proper synchronization, a second thread can modify the original pointer data while the callee modifies its own copy. Proper synchronization code needs to be generated for pointer data without sacrificing too much performance.

### Assumptions and Limitations

PtrSplit makes certain assumptions about how types are used to ensure partitioned applications function correctly. For instance, PtrSplit's computation of call edges in PDGs assumes the absence of certain type casts on function-pointer types. Another assumption is that pointers can be identified through the types of cross-partition data, which may be violated by type casts. For example, if an application casts a struct pointer to a void pointer, LLVM treats the void pointer as an i8* pointer (pointer to bytes), and SoftBound can track its bounds. This results in a void pointer across the boundary being marshalled as a byte array, which is problematic if the original struct contains other pointers. Therefore, PtrSplit currently assumes void pointers do not appear at the boundary and raises an alarm if this situation occurs. We did not encounter this case in our experiments. An alternative design would be to add runtime type information (RTTI) for data pointers and use the runtime types for marshaling and unmarshaling.

### Further Optimizations

PtrSplit can be further optimized by using more efficient pointer bounds tracking tools to reduce overhead. Recent work such as Low-Fat Pointers [14, 15] and CUP [6] provide general pointer tracking with lower overhead than SoftBound while maintaining the Application Binary Interface (ABI). Unfortunately, these systems are not yet open-sourced. When they become available, we plan to combine our SPBT approach with these state-of-the-art bounds tracking techniques to make PtrSplit more efficient.

### Conclusions

Automatic partitioning of security-critical applications is an effective way to improve software security. Given the lack of memory safety in C/C++ and the requirement that trusted execution environments like SGX and TrustZone run only native code, it is important to support automatic partitioning of C/C++ applications. Managed code, such as Java bytecode, cannot run directly inside SGX without first porting the whole language virtual machine into an SGX enclave. In this paper, we describe several techniques that support general pointers in C/C++ applications, including parameter trees, selective pointer bounds tracking, and type-based marshalling/unmarshalling. These techniques advance the state-of-the-art in privilege separating C/C++ applications, and our experiments suggest they have the potential to make automatic program partitioning practical.

### Acknowledgments

We thank anonymous reviewers for their insightful comments, which helped us substantially improve the paper. This research is based upon work supported by US NSF grants CNS-1624126 and CNS-1408880. The research was also supported in part by NSF grant CCF-1624124 and the Defense Advanced Research Projects Agency (DARPA) under agreement number N66001-13-2-4040. The views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of any of the above organizations or any person connected with them.

### References

[1] Adam Barth, Collin Jackson, Charles Reis, and Google Chrome. 2008. The security architecture of the Chromium browser. Technical Report.
[2] David M. Beazley. 1997. SWIG Users Manual: Version 1.1.
[3] Andrea Bittau, Petr Marchenko, Mark Handley, and Brad Karp. 2008. Wedge: splitting applications into reduced-privilege compartments. In Proceedings of the 5th USENIX Symposium on Networked Systems Design and Implementation. 309–322.
[4] Don Box. 1997. Essential COM. Addison-Wesley Professional.
[5] David Brumley and Dawn Song. 2004. Privtrans: Automatically Partitioning Programs for Privilege Separation. In 13th Usenix Security Symposium. 57–72.
[6] Nathan Burow, Derrick McKee, Scott A. Carr, and Mathias Payer. 2017. CUP: Comprehensive User-Space Protection for C/C++. (2017). https://arxiv.org/abs/1704.05004v1.
[7] Stephen Chong, Jed Liu, Andrew Myers, Xin Qi, K. Vikram, Lantian Zheng, and Xin Zheng. 2007. Secure Web Applications via Automatic Partitioning. In ACM SIGOPS Symposium on Operating Systems Principles (SOSP). 31–44.
[8] John Criswell, Andrew Lenharth, Dinakar Dhurjati, and Vikram Adve. 2007. Secure virtual architecture: a safe execution environment for commodity operating systems. SIGOPS Oper. Syst. Rev. 41 (Oct. 2007), 351–366. Issue 6.
[9] Dinakar Dhurjati and Vikram S. Adve. 2006. Backwards-compatible array bounds checking for C with very low overhead. In ICSE. 162–171.
[10] Petros Efstathopoulos, Maxwell Krohn, Steve Vandebogart, Cliff Frey, David Ziegler, Eddie Kohler, David Mazières, M. Frans Kaashoek, and Robert Morris. 2005. Labels and event processes in the Asbestos operating system. In ACM SIGOPS Symposium on Operating Systems Principles (SOSP). 17–30.
[11] Jeanne Ferrante, Karl J. Ottenstein, and Joe D. Warren. 1987. The Program Dependence Graph and its Use in Optimization. ACM Transactions on Programming Languages and Systems 9, 3 (July 1987), 319–349.
[12] Google Inc. GRPC: A high performance, open-source universal RPC framework. Google Inc. http://www.grpc.io.
[13] Charles Jacobsen, Muktesh Khole, Sarah Spall, Scotty Bauer, and Anton Burtsev. 2016. Lightweight Capability Domains: Towards Decomposing the Linux Kernel. SIGOPS Oper. Syst. Rev. 49, 2 (Jan. 2016), 44–50.
[14] Gregory J.Duck and Roland H.C. Yap. 2016. Heap Bounds Protection with Low Fat Pointers. In CC.
[15] Gregory J.Duck, Roland H. C. Yap, and Lorenzo Cavallaro. 2017. Stack Bounds Protection with Low Fat Pointers. In NDSS.
[16] Douglas Kilpatrick. 2003. Privman: A library for partitioning applications. In USENIX Annual Technical Conference, FREENIX track. 273–284.
[17] Maxwell Krohn, Alexander Yip, Micah Brodsky, Natan Cliffer, M. Frans Kaashoek, Eddie Kohler, and Robert Morris. 2007. Information flow control for standard OS abstractions. In ACM SIGOPS Symposium on Operating Systems Principles (SOSP). 321–334.
[18] C. Lattner, A. Lanharth, and V. Adve. 2007. Making context-sensitive points-to analysis with heap cloning practical for the real world. In ACM Conference on Programming Language Design and Implementation (PLDI). 278–289.
[19] D. Liang and M. J. Harrold. 1998. Slicing objects using system dependence graphs. In ICSM. 358–367.
[20] Joshua Lind, Christian Priebe, Divya Muthukumaran, Dan O’Keeffe, Pierre-Louis Aublin, Florian Kelbert, Tobias Reiher, David Goltzsche, David M. Eyers, Rüdiger Kapitza, Christof Fetzer, and Peter R. Pietzuch. 2017. Glamdring: Automatic Application Partitioning for Intel SGX. In USENIX Annual Technical Conference (ATC). 285–298.
[21] Yutao Liu, Tianyu Zhou, Kexin Chen, Haibo Chen, and Yubin Xia. 2015. Thwarting Memory Disclosure with Efficient Hypervisor-enforced Intra-domain Isolation. In 22nd ACM Conference on Computer and Communications Security (CCS). 1607–1619.
[22] Andrea Mambretti, Kaan Onarlioglu, Collin Mulliner, William Robertson, Engin Kirda, Federico Maggi, and Stefano Zanero. 2016. Trellis: Privilege Separation for Multi-user Applications Made Easy. In International Symposium on Research in Attacks, Intrusions and Defenses. 437–456.
[23] Andrew Myers and Barbara Liskov. 2000. Protecting privacy using the decentralized label model. ACM Transactions on Software Engineering Methodology 9 (Oct. 2000), 410–442. Issue 4.
[24] Santosh Nagarakatte, Jianzhou Zhao, Milo M. K. Martin, and Steve Zdancewic. 2009. SoftBound: highly compatible and complete spatial memory safety for C. In PLDI. 245–258.
[25] George Necula, Scott McPeak, and Westley Weimer. 2002. CCured: type-safe retrofitting of legacy code. In 29th ACM Symposium on Principles of Programming Languages (POPL). 128–139.
[26] Ben Niu and Gang Tan. 2014. Modular Control Flow Integrity. In ACM Conference on Programming Language Design and Implementation (PLDI). 577–587.
[27] Oracle. Introduction to TI-RPC. Oracle. https://docs.oracle.com/cd/E18752_01/html/816-1435/rpcintro-46812.html.
[28] Niels Provos, Markus Friedl, and Peter Honeyman. 2003. Preventing privilege escalation. In 12th Usenix Security Symposium. 231–242.
[29] Charles Reis and Steven D. Gribble. 2009. Isolating web programs in modern browser architectures. In EuroSys. 219–232.
[30] Konstantin Rubinov, Lucia Rosculete, Tulika Mitra, and Abhik Roychoudhury. 2016. Automated partitioning of Android applications for trusted execution environments. In International Conference on Software engineering (ICSE). 923–934.
[31] Robert Watson, Jonathan Anderson, Ben Laurie, and Kris Kennaway. 2010. Capsicum: Practical Capabilities for UNIX. In 19th Usenix Security Symposium. 29–46.
[32] Yang Liu Yongzheng Wu, Jun Sun, and Jin Song Dong. 2013. Automatically partitioning software into least privilege components using dynamic data dependency analysis. In ASE. 323–333.
[33] Steve Zdancewic, Lantian Zheng, Nathaniel Nystrom, and Andrew Myers. 2002. Secure program partitioning. ACM Transactions on Compututer Systems (TOCS) 20, 3 (2002), 283–328.
[34] Nickolai Zeldovich, Silas Boyd-Wickizer, Eddie Kohler, and David Mazières. 2006. Making Information Flow Explicit in HiStar. In USENIX Symposium on Operating Systems Design and Implementation (OSDI). 263–278.
[35] Lantian Zheng, Stephen Chong, Andrew Myers, and Steve Zdancewic. 2003. Using Replication and Partitioning to Build Secure Distributed Systems. In IEEE Symposium on Security and Privacy (S&P). 236–250.