(1)
Our algorithm consists of four steps: MakeSampleAnnouncement,
MakeSampleAnnouncement: The best way for the adversary
to understand topological relationships is by observing real
route propagation. To do this, the adversary should announce
its own prefix to A and allow this announcement to fully
propagate and let Internet routes to converge to a stable state.
CollectInfo: Next, for each AS X in R(B), the adversary
should examine to see if any member of R∗(X) will be pre-
ferred by X over R(X) based on the information in Table 3.
For each member of R∗(X) preferred over R(X), the adversary
should suppress this route with communities.
AddCommunities: With knowledge of which routes must be
suppressed, the adversary can add communities to strate-
gically limit its announcement propagation. To suppress a
given route r, the adversary should:
• If r contains a peering link from, say, AS Y to AS Z, the ad-
versary should apply NoExportSelect at AS Y towards AS Z.
• If the peering link in r is facilitated by a route server, the
adversary should additionally apply NoExportSelect at AS
Y towards the route server or ideally apply NoExportSelect
at the route server towards AS Z (so that other peers at the
route server will still hear the announcement from AS Y).
• If r does not contain a peering link, apply LowerLocalPref
at the highest provider in the route.
(2)
(3)
Session 2E: Internet SecurityCCS ’19, November 11–15, 2019, London, United Kingdom436Figure 3: R∗ (dashed lines) and R (dotted lines) learned by B in three different cases: (a) The adversary has two non-tier-1
providers that peer with each other. (b) The adversary has two non-tier-1 providers that share a common tier-1 provider. (c)
The adversary has two tier-1 providers. The red cycles highlight the route B prefers.
Length
|R∗(X)| = |R(X)|
|R∗(X)|  |R(X)|
Src
R∗(X): Provider R(X): Provider
No peering link With peering link
LowerPref
LowerPref
—
NoExport
NoExport
—
R∗(X): Peer
R(X): Peer
NoExport
NoExport
—
R∗(X): Peer
R(X): Provider
NoExport
NoExport
NoExport
R∗(X): Provider
R(X): Peer
—
—
—
Table 3: Comparing the preference of two routes R(X) and R∗(X) (excluding the IGP metric) at AS X and selecting which
community should be used to suppress R∗(X). – indicates no action is needed. SICO typically aims to suppress a route by
restricting exporting (so other neighbors of the AS implementing the community can still use the route). However, export
restrictions often do not apply to customers. Thus, if the route does not contain a peering link, LowerPref should be used at
the highest provider in the route to stop this provider from preferring the route.
(4)
The adversary iterates CollectInfo and AddCommunities
until there is no member of R∗(X) that will be preferred over
R(X) for each X in the AS path of R(B).
LaunchAttack: Finally, the adversary can simply announce
the victim’s prefix (instead of its own) along with the communities
from step 3, and it can be assured it will have a route to the
victim.
Note that the above algorithm solely employs NoExportSelect,
NoExportAll, and LowerPref, but some ASes have significantly
more extensive community support [16, 33]. There are cases where
an adversary many want to employ a more nuanced community
supported by one of its providers to achieve the same effect as a
more basic community recommended by the previous algorithm.
For example, some providers allow for local preference adjusting by
region (as opposed to AS-wide) and export prepending (as opposed
to outright suppression). These more nuanced communities may
have a smaller impact on benign announcement propagation, allow-
ing an adversary to attract more traffic with interception attacks.
We will discuss the limitations of SICO attacks in Appendix §F.
4.5 Targeted interception attacks
Finally, we discuss how to use communities to achieve targeted
interception attacks.
Let us assume the adversary wishes to attract traffic from a
target IP within AStar that is destined to a victim’s IP prefix. For
targeted interception to be possible, the adversary must be capable
of attracting the relevant IP traffic from AStar (AStar is in the
portion of the Internet that would be affected if the adversary were
to launch a hijack attack against the victim).
For each AS link X -> Y in R∗(AStar) (starting from the origin
as X), the adversary should apply communities at X that prevent
X from exporting R∗(X) as much as possible while still allowing X
to export R∗(X) to Y. If X -> Y is a customer -> provider link,
the adversary should use NoExportAll at X to prevent X from
exporting R∗(X) to peers and should use LowerLocalPref at each
of X’s providers (other than Y) to cause them to prefer the vic-
tim’s route.7 If X -> Y is a peering link, the adversary should use
NoExportSelect at each of X’s peers other than Y. In fact, X may
have more peers than can realistically be enumerated without the
adversary attaching too many communities (some ASes filter BGP
communities if an announcement contains too many). If this is
the case, the adversary should only suppress X’s largest peering
sessions that will carry the route the farthest. Once the adversary
finds a provider -> customer link, it should stop adding communities
and launch its attack (by announcing the victim’s prefix) because
this is the farthest along the route that communities will be honored.
7In addition, some ASes allow NoExportSelect to apply to providers.
Provider AProvider BTier-1ProvidersVictim’sProvider(a)Provider AProvider BVictim’sProvider(b)Sharedtier-1Othertier-1Victim’stier1Tier-1Provider ATier-1 Provider BVictim’stier-1Prefer R*Prefer R(c)R*R*R*R*R*R*R*RRRRRRRRRSession 2E: Internet SecurityCCS ’19, November 11–15, 2019, London, United Kingdom437Name (ASN)
Coloclue (8283)
BIT (12859)
By provider By IX By ASN
Yes
Yes
No
Yes
Yes
No
Table 4: Community-based export controls supported by
Coloclue and BIT. While BIT did allow for export controls,
Coloclue offered the ability to restrict exporting to individ-
ual peer ASNs.
5 EVALUATION
We performed both experimental and simulation-based evaluations
of SICO attacks. Our results suggest that SICO has a minimal
impact on the propagation of the adversary’s announcement and is
viable to a significant number of ASes throughout the Internet. We
evaluate both targeted and untargeted SICO. In addition, we made
our evaluation tools publicly available on GitHub [41].
5.1 Methodology
We evaluated three aspects of SICO attacks:
• Feasibility evaluation. We first evaluate the feasibility of SICO
attacks by performing live attacks on the real-world Internet back-
bone. We used the PEERING testbed [78] to ethically launch attacks
in the wild. The PEERING testbed operates multiple geographically
distributed points of presence and allows researchers to make real-
world BGP announcements to study inter-domain routing. Our
experimental setup was comprised of an adversary server and a
victim server. Each server was then connected to the PEERING
testbed via a secure VPN so that it could make BGP announcements
and forward packets through the peering points of presence (known
as muxes). The victim server was connected to the PEERING mux in
Northeastern University while the adversary server was connected
to the PEERING muxes in Amsterdam and Seattle.
• Measuring effect on announcement propagation. To understand
how different interception techniques affect announcement prop-
agation, we measured the fraction of internet hosts affected by
our interception attacks. Specifically, we sent probes to random
samples of Internet hosts and recorded the fraction of hosts that had
their responses routed to the adversary. This allows us to compare
SICO to state-of-the-art techniques and quantitatively measure the
propagation difference.
• Viable AS estimation. Finally, we used the CAIDA March 2019
AS-relationship dataset [12] to estimate the number of viable ASes,
i.e., ASes that could be used for launching SICO attacks.
Ethical considerations. To perform these attacks in an ethical
manner, we only hijacked/intercepted IP prefixes that we controlled
so that no Internet traffic that was not destined to our own IP prefix
was affected. We also adhered to the PEERING testbed acceptable
use policy as to not overwhelm or crash routers.
5.2 Feasibility evaluation
We tested the feasibility of SICO from two different nodes (Amster-
dam and Seattle) on the PEERING testbed.
Case 1: Feasibility at Amsterdam. The PEERING testbed has a
mux in AMS-IX Amsterdam with two providers (Netwerkvereniging
Figure 4: Experimental setup to launch BGP attacks at Ams-
terdam.
Figure 5: The configuration of the peering links between
Coloclue and BIT.
Figure 6: The providers of BIT that Coloclue had peering
sessions with.
Coloclue and BIT BV), making it a logical choice to serve as an
adversary in an interception attack (see Figure 4). Recall that the
victim is the mux at Northeastern University. Both Coloclue and BIT
support BGP communities, but Coloclue offered more fine-grained
control by allowing export suppression to individual peers by ASN
as opposed to grouping peers together by Internet Exchange (IX)
route servers (see Table 4). In our attack, we announced the bogus
InternetPEERING 47065Adversarial ServerVictim Server PEERING 47065VPNMux in Amsterdam IXMux in Northeastern University BIT 12859Coloclue 8283NEU 156Northeastern Upstream Router        Providers at Amsterdam IXVPN6777 AMS-IX Route ServerBIT 12859Coloclue 8283NO_EXPORT 34307NO_EXPORT 12859NO_EXPORT 12859Direct Peering34307 NL-IX Route ServerBIT 12859Coloclue 8283NO_EXPORT 286KPN 286NO_EXPORT 12859Session 2E: Internet SecurityCCS ’19, November 11–15, 2019, London, United Kingdom438Community Target AS
Action
0:12859
AMS-IX Route Server No export to BIT
2914:4211 NTT
8283:4:12859 Coloclue
8283:4:34307 Coloclue
No export to BIT
No export NL-IX route server
Prepend 1x to all customers in Europe Lengthen the adversary’s route through NTT so that it is
Reason
Prevent peering routes between Coloclue and BIT via the
AMS-IX route server
longer than the victim’s route through KPN
prevent the direct peering between Coloclue and BIT
Prevent peering routes between Coloclue and BIT via the
NL-IX route server
Allow KPN to prefer its route to the victim and export it to BIT
8283:4:286 Coloclue
No export KPN
Table 5: Communities used to achieve interception at Amsterdam. Note that the community string for a given action varies
across providers, and we show the exact community strings to facilitate reproducing experiments.
route to Coloclue and used BIT for forwarding intercepted traffic
to the victim.
By making BGP announcements to Coloclue, we implemented
the algorithm from §4.4. We performed 4 iterations of CollectInfo
and AddCommunities ( 1○ — 4○). We will use “[AS1, ..., ASn]” to
denote a route and use (x:y) to denote a community, where x is an
AS who should enforce the action y.
nouncement for the adversary’s own prefix to Coloclue.
MakeSampleAnnouncement: We started by making a sample an-
1○ CollectInfo: We observed that BIT exported the path [BIT,
Coloclue, Adversary] for our prefix. This implied that BIT was
learning the route from Coloclue over a peering link, and we
also confirmed this by looking at publicly available topology data.
Further inspecting the looking glass data at Coloclue, we found
Coloclue and BIT were additionally peering through the route
servers at AMS-IX and NL-IX, as shown in Figure 5. The AMS-IX
route server supported community controls while the NL-IX route
server did not support communities.
1○ AddCommunities: We added the (Coloclue:No export to BIT)
community to prevent Coloclue from exporting the malicious route
to BIT. In addition, we used (AMS-IX-RS:No export to BIT) and
(Coloclue:No export to NL-IX-RS) to prevent the malicious route
from being exported to BIT via the route servers.
2○ CollectInfo: After applying the aforementioned communities,
we observed that BIT exported the route [BIT, KPN, Coloclue,
Adversary] for the adversary’s prefix (see Figure 6). This was prob-
lematic because the route from BIT to the victim’s prefix was [BIT,
KPN, Cogent, Northeastern, Victim], and KPN would prefer the
adversary’s route through Coloclue over the victim’s route through
Cogent because of the shorter AS path (both Coloclue and Cogent
are peers of KPN with equal local preference) and BIT would no
longer hear its route to the victim.
2○ AddCommunities: We added (Coloclue:No export to KPN),
which successfully stopped BIT from exporting the route [BIT, KPN,
Coloclue, Adversary].
3○ CollectInfo: BIT now exported the route [BIT, NTT, Atom86,
Coloclue, Adversary] for the adversary’s prefix. Notice that for BIT,
this route is provider learned with an equal AS path length as its
route to the victim [BIT, KPN, Cogent, Northeastern, Victim]. Thus,
announcing the victim’s route at this point would be a gamble since
BIT could either export the adversary’s route or the victim’s route
based on the IGP metric (or a further tie-break condition).
3○ AddCommunities: The route [BIT, NTT, Atom86, Coloclue,
Adversary] has no peering links in it (Atom86 is a provider to
Coloclue and NTT is a provider to Atom86 and BIT), so the con-
servative way to stop BIT from exporting this route would be
to lower the local preference of the adversary’s route at NTT.
One approach was to regionally lower the local preference of the
adversary’s route in the locations where NTT had BGP sessions
with BIT. This had potential, but BIT’s sessions with NTT were
located in Amsterdam which is a hub for Internet connectivity.
Thus, lowering local preference in Amsterdam would cause NTT
not to export the adversary’s route across a large number of other
BGP sessions that it had in Amsterdam, which may have a major
impact on announcement propagation. The second approach was
to use prepending to simply make the route through NTT longer,
so that BIT would prefer the route through KPN. NTT actually
provides a community for performing prepending on the routes
that will be announced to its customer ASes in Europe. We ended
up using this community to have a minimal impact on propagation.
4○ CollectInfo: The communities we added caused BIT to
export the route [BIT, NTT, NTT, Atom86, Coloclue, Adversary]
for the adversary’s prefix and [BIT, KPN, Cogent, Northeastern,
Victim] for the victim’s prefix. Here, BIT learns both routes through
providers but the victim’s route is one hop shorter. Thus, we were
confident that BIT would choose the victim’s route.
LaunchAttack: Using the adversary mux in Amsterdam, we
announced the victim’s prefix with the appropriate communities
(the exact values of the communities we used are in Table 5). BIT
still exported the route [BIT, KPN, Cogent, Northeastern, Victim]
and allowed us to forward traffic to the victim.
Thus, through the algorithm in §4.4, we were able to launch
an interception attack at Amsterdam by strategically limiting an-
nouncement propagation with communities.
Case 2: Feasibility at Seattle. We studied the applicability of these
attacks from the PEERING mux in Seattle (with the victim at the
PEERING node at Northeastern University). The PEERING mux in
Seattle only has one provider (RGNet) so there is no way to forward
traffic directly out of Seattle. Therefore, we used a VPN tunnel
to the PEERING mux in Amsterdam so that the adversary could
attract and forward traffic (see Figure 7). While we used the mux in
Amsterdam previously to make announcements and forward traffic,
here we only used it as a means of forwarding traffic because the
mux in Seattle did not have a second provider. When the adversary
Session 2E: Internet SecurityCCS ’19, November 11–15, 2019, London, United Kingdom439Figure 7: Experimental setup to launch BGP attacks at Seat-
tle and forward traffic through Coloclue.
made its announcement from Seattle, the providers of the mux in
Amsterdam all preferred the adversary’s announcement and did
not have a valid route to the victim. To overcome this we used SICO.
Also, we noticed that the provider to the PEERING mux in Seattle
(RGNet) did not support any community actions but it did transit
communities up to higher-up providers that did. The details how
we achieved interception in Seattle are presented in Appendix §D.
Overall, we successfully employed the algorithm from §4.4 demon-
strating the viability of SICO in a setting where the direct
provider did not
support communities and instead only
forwarded communities.