### Algorithm for Interception Attack

Our algorithm consists of four main steps: **MakeSampleAnnouncement**, **CollectInfo**, **AddCommunities**, and **LaunchAttack**. Each step is designed to help the adversary understand and manipulate the topological relationships in the Internet routing system.

#### 1. MakeSampleAnnouncement
To gain insight into the topological relationships, the adversary should announce its own prefix to an Autonomous System (AS) A and allow this announcement to propagate fully. This allows the Internet routes to converge to a stable state, providing the adversary with valuable information about the routing behavior.

#### 2. CollectInfo
For each AS X in the route R(B), the adversary should determine if any member of the alternative route set R*(X) will be preferred by X over the current route R(X). The preference is determined based on the information in Table 3. For each preferred member of R*(X), the adversary should suppress this route using BGP communities.

#### 3. AddCommunities
With knowledge of which routes need to be suppressed, the adversary can strategically add BGP communities to limit the propagation of its announcements. To suppress a given route r, the adversary should:
- **If r contains a peering link from AS Y to AS Z**: Apply the `NoExportSelect` community at AS Y towards AS Z.
- **If the peering link in r is facilitated by a route server**: Additionally apply `NoExportSelect` at AS Y towards the route server, or ideally apply `NoExportSelect` at the route server towards AS Z. This ensures that other peers at the route server still receive the announcement from AS Y.
- **If r does not contain a peering link**: Apply the `LowerLocalPref` community at the highest provider in the route to make the route less preferred.

The adversary iterates through the **CollectInfo** and **AddCommunities** steps until no member of R*(X) is preferred over R(X) for each AS X in the path of R(B).

#### 4. LaunchAttack
Finally, the adversary announces the victim’s prefix along with the communities identified in the previous steps. This ensures that the adversary's route to the victim is established.

### Community-Based Route Suppression
Table 3 compares the preference of two routes R(X) and R*(X) at AS X and selects the appropriate community to suppress R*(X). The table outlines the conditions under which different communities (`NoExport`, `LowerPref`) should be used.

### Targeted Interception Attacks
To achieve targeted interception attacks, the adversary must attract traffic from a target IP within AStar that is destined for a victim’s IP prefix. The adversary must be capable of attracting the relevant IP traffic from AStar. For each AS link X -> Y in R*(AStar), the adversary should apply communities at X to prevent X from exporting R*(X) as much as possible while still allowing X to export R*(X) to Y.

- **If X -> Y is a customer -> provider link**: Use `NoExportAll` at X to prevent X from exporting R*(X) to peers and use `LowerLocalPref` at each of X’s providers (other than Y) to cause them to prefer the victim’s route.
- **If X -> Y is a peering link**: Use `NoExportSelect` at each of X’s peers other than Y. If X has too many peers, only suppress the largest peering sessions that will carry the route the farthest.

Once the adversary finds a provider -> customer link, it should stop adding communities and launch the attack by announcing the victim’s prefix.

### Evaluation
We performed both experimental and simulation-based evaluations of SICO attacks. Our results suggest that SICO has a minimal impact on the propagation of the adversary’s announcement and is viable for a significant number of ASes throughout the Internet.

#### Methodology
We evaluated three aspects of SICO attacks:
- **Feasibility evaluation**: We performed live attacks on the real-world Internet backbone using the PEERING testbed.
- **Measuring effect on announcement propagation**: We measured the fraction of internet hosts affected by our interception attacks.
- **Viable AS estimation**: We estimated the number of viable ASes that could be used for launching SICO attacks.

#### Feasibility Evaluation
We tested the feasibility of SICO from two different nodes (Amsterdam and Seattle) on the PEERING testbed.

**Case 1: Feasibility at Amsterdam**
- The PEERING testbed in Amsterdam has two providers (Coloclue and BIT BV).
- Coloclue offered more fine-grained control by allowing export suppression to individual peers by ASN.
- We announced the bogus route to Coloclue and used BIT for forwarding intercepted traffic to the victim.
- We performed 4 iterations of **CollectInfo** and **AddCommunities** to ensure the correct route preferences.

**Case 2: Feasibility at Seattle**
- The PEERING mux in Seattle only has one provider (RGNet), so we used a VPN tunnel to the PEERING mux in Amsterdam to forward traffic.
- The provider to the PEERING mux in Seattle (RGNet) did not support any community actions but forwarded communities to higher-up providers.

Overall, we successfully demonstrated the viability of SICO in a setting where the direct provider did not support communities and instead only forwarded communities.