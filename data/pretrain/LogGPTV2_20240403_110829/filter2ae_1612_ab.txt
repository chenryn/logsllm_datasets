            Class methodDeclaringClass = method.getDeclaringClass();
            if (AO_SETACCESSIBLE_REF != null && AO_SETACCESSIBLE_REF.equals(method) || AO_SETACCESSIBLE_ARR_REF != null && AO_SETACCESSIBLE_ARR_REF.equals(method) || SYS_EXIT_REF != null && SYS_EXIT_REF.equals(method) || SYS_CONSOLE_REF != null && SYS_CONSOLE_REF.equals(method) || AccessibleObjectHandler.class.isAssignableFrom(methodDeclaringClass) || ClassResolver.class.isAssignableFrom(methodDeclaringClass) || MethodAccessor.class.isAssignableFrom(methodDeclaringClass) || MemberAccess.class.isAssignableFrom(methodDeclaringClass) || OgnlContext.class.isAssignableFrom(methodDeclaringClass) || Runtime.class.isAssignableFrom(methodDeclaringClass) || ClassLoader.class.isAssignableFrom(methodDeclaringClass) || ProcessBuilder.class.isAssignableFrom(methodDeclaringClass) || AccessibleObjectHandlerJDK9Plus.unsafeOrDescendant(methodDeclaringClass)) {
                throw new IllegalAccessException("Method [" + method + "] cannot be called from within OGNL invokeMethod() " + "under stricter invocation mode.");
            }
        }
        ......
            result = invokeMethodInsideSandbox(target, method, argsArray);
        }
        return result;
    }
## 0x05 近期三个漏洞的分析
在CVE搜索`OGNL`，前三个漏洞分别是Confluence的CVE-2021-26084、Struts2的CVE-2020-17530和Apache
Unomi的CVE-2020-13942，本次对这三个漏洞进行分析。
### Confluence CVE-2021-26084
#### velocity模板引擎语法：
1、基本符号
    "#"标识velocity的脚本语句
    "$"获取一个对象或变量
    "{}"用来标识velocity变量
    "!"对变量为null的情况在页面显示为空白字符串
    用双引号还是单引号表示，默认“双引号，可以在stringliterals.interpolate=false改变默认处理方式
2、示例：
    ## 1、变量引用
    $name
    ## 2、语句/指令-变量赋值
    #($name="test")
    #set($value= 123)
    ## 3、#include和#parse的作用都是引入本地文件。#include引入的文件内容不会被velocity模板引擎解析。#parse引入的文件内容，将解析其中的velocity并交给模板，相当于把引入的文件内容copy到文件中。
    #parse ( "/template/includes/actionerrors.vm" )
    #include ( "/template/includes/actionerrors.vm" )
更多语法可参考：
#### 漏洞分析：
confluence处理velocity模板，将velocity语法转为字符串输出到页面，其中涉及到的一些表达式计算会调用`ognl.getValue()`处理。confluence处理vm文件，首先将vm内容转为AST语法树，然后分别处理每一个节点的内容，将每个节点的内容拼接输出。
Confluence的Velocity模板引擎处理vm文件流程主要在`com.opensymphony.webwork.dispatcher.VelocityResult.doExecute()`，首先获取OgnlValueStack、context上下文、getTemplate获取vm文件，接下来用`merge`处理合并页面结果，将结果输出给writer。
merge调用`((SimpleNode)this.data).render(ica,
writer);`方法处理，先将vm文件的内容转为AST语法树，便于计算每个节点的结果。
本次漏洞涉及的`createpage-entervariables.vm`文件经过解析后的AST语法树如下图，每一个ASTXXX处理程序都继承自SimpleNode.
queryString在第7个节点，归属applyDecorator指令，程序处理时将applyDecorator又分为35个节点，queryString在`[#tag],
[ ], [(], ["Hidden"], [ ], ["name='queryString'"], [ ],
["value='$!queryString'"], [)]`节点中处理，我们重点看这个处理过程。
`[#tag], [ ], [(], ["Hidden"], [ ], ["name='queryString'"], [ ],
["value='$!queryString'"],
[)]`节点属于AbstractTagDirective，会调用`AbstractTagDirective.render()`。
`AbstractTagDirective.render()`首先调用`applyAttributes(contextAdapter, node,
object)`处理参数，其中`AbstractTagDirective.createPropertyMap()`创建参数Map，保存property键值对。
保存后`AbstractTagDirective.render()`调用`AbstractTagDirective.processTag()`处理tag
通过`AbstractTagDirective.processTag()`最终会调用`AbstractUITag.doEndTag()`，doEndTag调用`evaluateParams()`处理参数。
`AbstractUITag.evaluateParams`通过`addParameter()`添加name和value，value的值通过`findValue()`获取具体的值。
调用`getValueFinder().findValue(expr,
toType)`时会先调用`SafeExpressionUtil.isSafeExpression()`进行安全检查，而`isSafeExpression()`会通过`containsUnsafeExpression()`处理，这正是本次漏洞的关键之处。
`containsUnsafeExpression()`代码如下，递归检查节点及其子节点是否包含黑名单。
    private static boolean containsUnsafeExpression(Node node) {
        String nodeClassName = node.getClass().getName();
        if (UNSAFE_NODE_TYPES.contains(nodeClassName)) {
            return true;
        } else if ("ognl.ASTProperty".equals(nodeClassName) && UNSAFE_PROPERTY_NAMES.contains(node.toString())) {
            return true;
        } else if ("ognl.ASTMethod".equals(nodeClassName) && UNSAFE_METHOD_NAMES.contains(node.toString())) {
            return true;
        } else if ("ognl.ASTVarRef".equals(nodeClassName) && UNSAFE_VARIABLE_NAMES.contains(node.toString())) {
            return true;
        } else {
            for(int i = 0; i 
构造ValueStack时，在`com.opensymphony.xwork2.ognl.OgnlValueStack.setOgnlUtil()`中会设置`SecurityMemberAccess`，将`struts-defult.xml`的黑名单加载进去
我调试分析时用的struts2版本是2.5.25，该版本中用到的ognl版本是3.1.28，该版本的`OgnlRuntime.invokeMethod`同样做了一些黑名单限制（同“0x04-Ognl
3.2.18 测试“）。
#### 漏洞分析：
payload：
    %{(#instancemanager=#application["org.apache.tomcat.InstanceManager"]).(#stack=#attr["com.opensymphony.xwork2.util.ValueStack.ValueStack"]).(#bean=#instancemanager.newInstance("org.apache.commons.collections.BeanMap")).(#bean.setBean(#stack)).(#context=#bean.get("context")).(#bean.setBean(#context)).(#access=#bean.get("memberAccess")).(#bean.setBean(#access)).(#emptyset=#instancemanager.newInstance("java.util.HashSet")).(#bean.put("excludedClasses",#emptyset)).(#bean.put("excludedPackageNames",#emptyset)).(#execute=#instancemanager.newInstance("freemarker.template.utility.Execute")).(#cmd={'whoami'}).(#execute.exec(#cmd))}
根据[Struts2 S2-061漏洞分析(CVE-2020-17530)](https://mp.weixin.qq.com/s/RD2HTMn-jFxDIs4-X95u6g)文章进行调试分析，总结s2-061绕过s2-059的思路主要有以下几点：
1、`#application` 中的
`org.apache.tomcat.InstanceManager.newInstance()`可以实例化无参构造的类；
2、可以通过`#attr`和`com.opensymphony.xwork2.util.ValueStack.ValueStack`获取valuestack。`org.apache.commons.collections.BeanMap`的setBean方法设置为valuestack，这样get方法传入`context`就可以调用`com.opensymphony.xwork2.ognl.OgnlValueStack.getContext()`，然后将获取的context同样用setBean方法进行设置，get传入`memberAccess`进行获取；（关于ValueStack、OgnlContext、memberAccess和SecurityMemberAccess的关系推荐阅读Lucifaer大佬的[浅析OGNL攻防史](https://paper.seebug.org/794/#22-valuestack)进行了解）
3、获取到的memberAccess实际就是`com.opensymphony.xwork2.ognl.SecurityMemberAccess`，再利用BeanMap的put方法将SecurityMemberAccess`excludedClasses`和`excludedPackageNames`置空，这样子就绕过了struts2的黑名单；
4、需要注意第三点只是绕过了struts2黑名单，ognl黑名单没有被绕过，避开ognl黑名单，可以利用struts2的黑名单，其中`freemarker.template.utility.Execute`存在无参构造，`freemarker.template.utility.Execute.exec()`
方法可执行命令。
### Apache Unomi CVE-2020-13942
Apache Unomi CVE-2020-13942包括OGNL RCE和MVEL RCE，本文仅针对OGNL进行分析。
对比1.5.1和1.5.2版本，修复该漏洞的提交[Improve scripting security
([#179])](https://github.com/apache/unomi/commit/0b81ba35dd3c3c2e0a92ce06592b3df90571eced)中主要对`org.apache.unomi.plugins.baseplugin.conditions.PropertyConditionEvaluator.java`、`SecureFilteringClassLoader.java`等进行了修改，并且增加了`ExpressionFilter.java`来检查表达式。
#### 漏洞分析：
unomi处理parameterValues主要在`org.apache.unomi.plugins.baseplugin.conditions.PropertyConditionEvaluator`，`getPropertyValue()`获取请求的参数值。在该方法中默认会先通过`getHardcodedPropertyValue()`处理。
`getHardcodedPropertyValue()`中当`propertyName`不等于`segments`、`consents`、`properties.XXX`等，会返回`NOT_OPTIMIZED`，然后再通过`getOGNLPropertyValue()`处理，也就是说`propertyName`未遵照预设的结果时会按照ognl表达式处理。
在`getOGNLPropertyValue()`中，通过`accessor.get(ognlContext,
item)`处理，这里`accessor`就是ASTChain。
那么最终会调用`ASTChain.getValue()`处理表达式。
unomi
1.5.1用的ognl版本是3.2.14，该版本在`OgnlRuntime.invokeMethod`中同样存在黑名单判断。只要表达式绕过Ognl的黑名单就可以达到目的。
我们来看下表达式：
    (#runtimeclass = #this.getClass().forName(\"java.lang.Runtime\")).(#getruntimemethod = #runtimeclass.getDeclaredMethods().{^ #this.name.equals(\"getRuntime\")}[0]).(#rtobj = #getruntimemethod.invoke(null,null)).(#execmethod = #runtimeclass.getDeclaredMethods().{? #this.name.equals(\"exec\")}.{? #this.getParameters()[0].getType().getName().equals(\"java.lang.String\")}.{? #this.getParameters().length < 2}[0]).(#execmethod.invoke(#rtobj,\"touch /tmp/ognl\"))
整个的思路是用Class和Method以及`Method.invoke`来绕过黑名单。
`this.getClass()`是一个Class对象，`Class`没有在黑名单中，因此上面`Class.forName()`可以执行，同理`Class.forName()`会得到一个Class对象，因此`runtimeclass.getDeclaredMethods()`可以正常执行，并且返回Runtime的方法数组，`Method`没有在黑名单，遍历方法名获取到`getRuntime`的Method对象(不可以直接`getDeclaredMethod("getRuntime")`会报错)，利用invoke执行`getRuntime`，同理获取`exec`并执行。
最后顺便提一下unomi小于1.5.1版本存在CVE-2020-11975，查了下1.5.0使用的ognl版本是3.2.11，该版本`OgnlRuntime.invokeMethod`没有黑名单，这也是Runtime的payload`(#r=@java.lang.Runtime@getRuntime()).(#r.exec(\"calc\"))`可以直接运行的原因。
## 0x06 思考与总结
上面提到的几个OGNL漏洞的修复基本都是采用黑名单来限制OGNL注入，开发人员在使用ognl时，除了ognl需要注意使用较高版本，还要注意添加额外的防护措施。当然，使用黑名单的防护方式也许一时可以防住OGNL的RCE，但总有被绕过的风险，另外除了命令执行，文件操作、SSRF也不是没有可能。
## 0x07 参考链接：
    https://commons.apache.org/proper/commons-ognl/apidocs/index.html
    https://stackoverflow.com/questions/2046761/what-is-object-graph-in-java
    https://developer.aliyun.com/article/135737
    https://juejin.cn/post/6844904013683507207
    https://tech.meituan.com/2019/02/14/talk-about-java-magic-class-unsafe.html
    https://github.com/httpvoid/writeups/blob/main/Confluence-RCE.md
    https://xz.aliyun.com/t/8135
    https://www.cnblogs.com/yangzhinian/p/4885973.html
    https://mp.weixin.qq.com/s/RD2HTMn-jFxDIs4-X95u6g
    http://velocity.apache.org/engine/1.7/user-guide.html
    http://unomi.apache.org/manual/latest/index.html#_javascript
    https://github.com/vulhub/vulhub/blob/master/unomi/CVE-2020-13942/README.zh-cn.md