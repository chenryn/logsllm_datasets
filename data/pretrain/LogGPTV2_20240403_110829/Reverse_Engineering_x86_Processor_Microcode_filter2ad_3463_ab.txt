4 Reverse Engineering Microcode
In this section, we provide an overview of the AMD K8
and K10 microarchitecture families and describe our re-
verse engineering approach. Furthermore, we present our
analysis setup and framework that includes prototype im-
plementations of our concepts and supported our reverse
engineering effort in a semi-automated way.
Our analysis primarily covers AMD K8 and K10 pro-
cessors because—to the best of our knowledge—they are
the only commercially available, modern x86 microar-
chitectures lacking strong cryptographic protection of
microcode patches.
4.1 AMD K8 and K10
AMD released new versions of its K8 and K10 processors
from 2003 to 2008 and 2008 to 2013, respectively. Note
that the actual production dates may vary and in 2013 only
two low-end CPU models with K10 architecture were
released. K9 is the K8’s dual-core successor, hence the
difference is marginal from our point of view. Family 11h
and 12h are adapted K10 microarchitectures for mobile
platforms and APUs.
All of theses microarchitectures include a microcoded
IDU. The x86 instruction set is subdivided into direct
path and vector path macroinstructions. The former
mainly represent the frequently used, performance crit-
ical macroinstructions (e.g., arithmetic and logical op-
erations) that are decoded by hardware into up to three
microinstructions. The latter are uncommon or complex,
and require decoding by the microcode sequencer and
microcode ROM. Vector path macroinstructions may pro-
duce many microinstructions. During execution of the
microcode sequencer, hardware decoding is paused. The
microcode is structured in triads of three 64-bit microin-
structions and one 32-bit sequence word [15]. An ex-
ample microinstruction set is described in AMD’s patent
RISC86 [24] from 2002. The sequence word may contain
the address of the next triad or indicate that decoding
is complete. The microcode ROM is addressed in steps
1166    26th USENIX Security Symposium
USENIX Association
whose length is a triad. An example address space rang-
ing from 0x0 to 0xbff thus contains 3,072 triads. The
microcode is responsible for the decoding of vector path
macroinstructions and handling of exceptions, such as
page faults and divide-by-zero errors.
4.2 Update Mechanism
The K7, released in 1999, was AMD’s ﬁrst microarchitec-
ture supporting microcode updates. The update mecha-
nism did not change throughout to the 12h family. AMD
kept the update feature secret until it was exposed along
with three K8 microcode patches in 2004. The patches
and the update mechanism were reverse engineered from
BIOS updates [6]. The microcode updates are stored
in a proprietary ﬁle format, although pieces of informa-
tion have been reverse engineered [6, 15]. With the K10
microarchitecture, AMD started to publicly release mi-
crocode updates, which beneﬁts the Linux open-source
microcode update driver. Our view of the ﬁle format is
depicted in Table 1 including the header with checksum
and number of triads, match register ﬁelds, and triads.
It should be noted that triads in microcode updates are
obfuscated with an algorithm we do not specify further
due to ethical considerations.
31
32
63
date
patch block
len
init
northbridge ID
CPUID
match register 0
match register 2
match register 4
match register 6
patch ID
checksum
southbridge ID
magic value
match register 1
match register 3
match register 5
match register 7
B↓ Bit→ 0
0
8
16
24
32
40
48
54
64
72
80
88
triad 0, microinstruction 0
triad 0, microinstruction 1
triad 0, microinstruction 2
triad 0, sequence word
triad 1 ...
Table 1: Microcode update ﬁle format.
Microcode Update Procedure. The microcode up-
date binary is uploaded to the CPU in the following way:
First, the patch must be placed in accessible virtual ad-
dress space. Then the 64-bit virtual address must be
written to Model-Speciﬁc Register (MSR) 0xc0010020.
Depending on the update size and microarchitecture, the
wrmsr instruction initiating the update may take around
5,000 cycles to complete. Rejection of a patch causes
a general protection fault. Internally, the update mecha-
nism veriﬁes the checksum, copies the triads to microcode
patch RAM, and stores the match register ﬁelds in the
actual match registers. Patch RAM is mapped into the
address space of the microcode ROM, whereby the patch
triads directly follow the read-only triads.
Match Registers. The match registers are an integral
part of the update mechanism. They hold a microcode
ROM address, intercept the triad stored at that location,
and redirect control to the triad in patch RAM at the
offset match register index · 2. The shared address space
enables microcode in the patch RAM to jump back to
microcode ROM, e.g., to reuse existing triads. Due to the
complexity of the microcode update procedure we assume
it is implemented in microcode itself. We summarize
our understanding of the microcode update mechanism
in Figure 1. AMD’s patent [39] from 2002 describes an
example microcode patch device and provides an idea of
how the internals work.
Figure 1: Overview ofthe AMD microcode update mech-
anism.
4.3 Reverse Engineering Methods
Based on our insights into microcode and its update mech-
anism, we now detail our novel method used to reverse
engineer the microcode encoding. More precisely, we
employ a (1) low-noise environment as a foundation for
the novel (2) microcode ROM heat map generation, and
(3) the microcode encoding reverse engineering. Further-
more, we present (4) microcode hooking which ultimately
enables actual modiﬁcation of CPU behavior.
We would like to emphasize that our methods were
developed when we did not have access to microcode
ROM, see Section 6.
Low-Noise Environment. Since we did not have ac-
cess to CPU internals, we had to be able to apply our
crafted microcode updates and carefully analyze the mod-
iﬁed CPU’s behavior (e.g., register values and memory
locations). To pinpoint exactly where the changes caused
effects (down to a single macroinstruction), we had to
eliminate any noise from parallel or operating system
code executions out of our control. For example, com-
mon operating systems implement task switching or fully
symmetric multiprocessing, which is undesirable in our
setting. This code execution is capable of triggering ab-
normal behavior (because of our microcode update) and
USENIX Association
26th USENIX Security Symposium    1167
then most likely causes a system crash. Hence, we require
a low-noise environment where we have full control of all
code to realize accurate observation of the CPU state and
behavior.
Microcode ROM Heat Maps. As described in Sec-
tion 4.2, match registers hold microcode ROM addresses.
Since we did not know which microcode ROM addresses
belong to which macroinstructions, we were not able to
change the behavior for a speciﬁc microcoded macroin-
struction. Hence, we devised microcode ROM heat maps,
a method to discover the corresponding memory location
for microcoded macroinstructions.
The underlying idea is to generate distinct behavior
between the original and the patched macroinstruction ex-
ecution. More precisely, the patch contains a microcode
instruction that always crashes on execution. Thereby,
we generate a heat map for each macroinstruction in an
automated way: we store whether the microcode ROM
address causes a system crash or not. The comparison
between original and patched execution reveals which
microcode ROM addresses correspond to the macroin-
struction. We further automatically processed all heat
maps to exclude common parts among all macroinstruc-
tions.
Microcode Encoding Reverse Engineering. Based
on our automatically generated heat maps, we were able
to tamper with a speciﬁc microcoded macroinstruction.
However, we could not meaningfully alter an instruction
because of its proprietary encoding. Hence, we devel-
oped a novel technique to reverse engineer proprietary
microcode encoding in a semi-automatic way.
Since we did not have a large microcode update base
on which we could perform ﬁne-grained tests, we merely
had a black box model of the CPU. However, since mi-
croinstructions control ALU and register ﬁle accesses, we
formed various general assumptions about the instruction
ﬁelds, which can be systematically tested using semi-
automatic tests (e.g., opcode, immediate value, source
and destination register ﬁelds).
In order to reverse engineer the encoding, we applied a
two-tiered approach. First, we identiﬁed ﬁelds by means
of bits that cause similar behavior, i.e., change of used reg-
isters, opcode, and immediate value. Second, we exhaus-
tively brute-forced each ﬁeld to identify all addressable
values. Since corresponding ﬁelds are small (< 10 bits),
we combined the results together and gradually formed
a model of the encoding. Note that through detailed ex-
ception reporting and paging, we were able to gather
detailed information on why a speciﬁc microinstruction
caused a crash. Earlier in the reverse engineering process,
we set the three microinstructions in a triad to the same
value to avoid side effects from other unknown microin-
structions. Once we had a better understanding of the
encoding, we padded the triad with no-operation microin-
structions. Later in the reverse engineering process, we
designed tests that reuse microinstructions from existing
microcode updates. For that method to be successful, a
good understanding of the operand ﬁelds was required as
most of these microinstructions operate on internal reg-
isters. We had to rewrite the register ﬁelds to be able to
directly observe the effect of the microinstruction. Fur-
thermore, we designed automated tests that identiﬁed set
bits in unknown ﬁelds of existing microinstructions and
permuted the affected bit locations in order to provoke
observable differences in behavior that can be analyzed.
Microcode Hooks. After reverse engineering the mi-
crocode encoding, we can arbitrarily change CPU be-
havior for any microcoded macroinstruction and inter-
cept control for any microcode ROM address. Note that
we intercepted a macroinstruction at the entry point mi-
crocode ROM address. In order to realize a fully-ﬂedged
microcode hook mechanism, we have to correctly pass
back control after interception through our microcode up-
date. This is indispensable in case macroinstructions are
extended with functionality, such as a conditional operand
check, while preserving original functionality.
We employed two basic concepts to resume macroin-
struction computation after interception: (1) pass control
back to ROM, and (2) implement the macroinstruction
computation. Note that we implemented both resume
strategies, see Section 7.
4.4 Framework
One fundamental requirement for our framework was
automated testing. Combined with the fact that microcode
updates potentially reset or halt the entire machine, it
became apparent that another controller computer was
needed. In the following, we describe both our hardware
setup and our framework implementation.
Hardware Setup. From a high-level point of view, the
hardware setup consists of multiple nodes and several de-
velopment machines. Each node represents one minimal
computer with an AMD CPU that runs our low-noise envi-
ronment and is connected to a Raspberry Pi via serial bus.
To enable monitoring and control, the mainboard’s power
and reset switch as well as the power supply’s +3.3V are
connected to GPIO ports. The Raspberry Pis run Linux
and can be remotely controlled from the Internet. The
development machines are used to design test cases and
extend the microcode API. Furthermore, test cases can be
launched from the development machines. This process
automatically transfers the test case and the latest API
version to the desired nodes, which then autonomously
execute the test case and store the results. Our test setup
consists of three nodes with K8 Sempron 3100+ (2004),
K10 Athlon II X2 260 (2010), and K10 Athlon II X2 280
(2013) processors.
1168    26th USENIX Security Symposium
USENIX Association
Low-Noise Environment. To fulﬁl our unusual re-
quirements regarding the execution environment (e.g.,
full control over interrupts and all code being executed),
we implemented a simple operating system from scratch.
It supports interrupt and exception handling, virtual mem-
ory, paging, serial connection, microcode updates, and
execution of streamed machine code. The streamed ma-
chine code serves the purpose of bringing the CPU to the
desired initial state, executing arbitrary macroinstructions,
and observing the ﬁnal state of the CPU. We leveraged
this feature primarily to execute vector path instructions
intercepted by a microcode patch. This way, we can
infer the effects of triads, single microinstructions, and
the sequence word. Note that only the ﬁnal state can be
observed in case no exception occurs.
We implemented interrupt and exception handling in
order to observe the intermediate state of the CPU and
the exception code such as general protection faults. The
error state includes the faulting program counter and stack
pointer as well as the x86 general-purpose registers. We
reﬁned the preciseness of the error reporting by imple-
menting virtual memory and paging support. All excep-
tions related to memory accesses raise page faults with
additional information such as the faulting address and ac-
tion. This information, paired with the information about
the faulting program counter, allows us to distinguish be-
tween invalid read, write, and execution situations. We
also used the exception code and observed the interme-
diate state to infer the effects of microcode. A custom
message protocol exposes the following operating system
features via serial connection: (1) stream x86 machine
code, (2) send and apply microcode update, and (3) report
back the ﬁnal or intermediate CPU state. Some of the
test processors support x86 64 long mode, which lets the
CPU access 64-bit instructions and registers. However,
our operating system runs in 32-bit protected mode.
Microcode API. Our controller software is imple-
mented in Python and runs on the Raspberry Pis. It pro-
cesses test cases in an automated fashion and makes heavy
use of the microcode API. Test cases contain an initial
CPU state, arbitrary x86 instructions, the ﬁnal CPU state,
and an exception information ﬁlter plus a logger as well as
a high-level microcode patch description. The microcode
patch is generated with the high-level microcode patch
information that includes header ﬁelds, match register
values, and microcode in the form of bit vectors, Register
Transfer Level (RTL) machine language, or a mix. Test
cases incorporating automation must specify at least one
property that will be altered systematically. For example,
a test case that aims to iteratively intercept all triads in
microcode ROM may increment the match register value
in each pass. Another test case that attempts to infer con-
ditional behavior of microcode may alter streamed x86
machine code in order to induce different x86 eﬂags regis-
ter values and at the same time permute the bit vector of an
unknown ﬁeld within a microinstruction. The microcode
API exposes all required underlying features such as serial
connection handling, serial message protocol, AMD com-
puter power state monitoring and control, x86 assembler,
parsing and generation of microcode updates, obfusca-
tion and deobfuscation of microcode updates, microcode
assembler and disassembler as well as required data struc-
tures. The framework runs through 190 test iterations per
minute and node in case there are no faults. One fault
adds a delay of 12 seconds due to the reboot.
5 Microcode Speciﬁcation
In this section we present the results of our reverse engi-
neering effort such as heat maps, a detailed description
of the microcode instruction set, and intercepting x86 in-
structions. Furthermore, we present our microcode RTL.
DISCLAIMER. It should be noted that our results origi-
nate from reverse engineering include and indirectly mea-
sured behavior, assumptions about the microarchitecture,
and interpretation of the visible CPU state, which is small
in comparison to the whole unobservable CPU state. Thus,
we cannot guarantee that our ﬁndings are intended behav-
ior of AMD’s microcode engine.
5.1 Heat Maps
A heat map of a speciﬁc macroinstruction contains a map-
ping of all microcode ROM addresses to a boolean value
that indicates whether the speciﬁed triad is executed dur-
ing the decode sequence of that macroinstruction. During
the test cycle, our operating system executes vector in-
structions such as call and ret. We name a heat map
that only covers vector instructions from the operating
system reference heat map. In order to obtain a clean heat
map for a vector instruction, the reference heat map must
be subtracted from the instruction’s raw heat map. For
the interested reader we present a truncated, combined
K10 heat map in Table 4 in Appendix A.1. The heat maps
represent a fundamental milestone of our reverse engi-
neering effort. They indicate microcode ROM locations
to intercept macroinstructions and help infer logic from
triads. We designed test cases for all vector path instruc-
tions, which then generated clean heat maps in a fully
automated way.