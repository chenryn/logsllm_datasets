title:FlashOver: automated discovery of cross-site scripting vulnerabilities
in rich internet applications
author:Steven Van Acker and
Nick Nikiforakis and
Lieven Desmet and
Wouter Joosen and
Frank Piessens
FlashOver: Automated Discovery of Cross-site Scripting
Vulnerabilities in Rich Internet Applications
Steven Van Acker, Nick Nikiforakis, Lieven Desmet, Wouter Joosen, Frank Piessens
IBBT-Distrinet, Katholieke Universiteit Leuven, 3001 Leuven, Belgium
PI:EMAIL
ABSTRACT
Today’s Internet is teeming with dynamic web applications
visited by numerous Internet users. During their visits,
typical Web users will unknowingly use tens of Rich Inter-
net Applications like Flash banners or media players. For
HTML-based web applications, it is well-known that Cross-
site Scripting (XSS) vulnerabilities can be exploited to steal
credentials or otherwise wreak havoc, and there is a lot of re-
search into solving this problem. An aspect of this problem
that seems to have been mostly overlooked by the academic
community, is that XSS vulnerabilities also exist in Adobe
Flash applications, and are actually easier to exploit because
they do not require an enclosing HTML ecosystem.
In this paper we present FlashOver, a system to automati-
cally scan Rich Internet Applications for XSS vulnerabilities
by using a combination of static and dynamic code analy-
sis that reports no false positives. FlashOver was used in a
large-scale experiment to analyze Flash applications found
on the top 1,000 Internet sites, exposing XSS vulnerabilities
that could compromise 64 of those sites, of which six are in
the top 50.
Categories and Subject Descriptors
K.6.5 [Management of Computing and Information
Systems]: Security and Protection; H.3.5 [Information
Storage and Retrieval]: Web-based services
Keywords
Flash, Rich Internet Applications, XSS, Cross-site Scripting
Vulnerabilities, Automated Interaction, Large-scale Experi-
ment
1.
INTRODUCTION
The last ﬁfteen years have transformed the Web in ways
that would seem unimaginable to anyone of the “few” In-
ternet users of the year 1995 [37]. What began as a simple
set of protocols and mechanisms facilitating the exchange
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’12, May 2–4, 2012, Seoul, Korea.
Copyright 2012 ACM 978-1-4503-0564-8/11/03 ...$10.00.
of static documents between remote computers is now an
everyday part of billions’ of users life, technical and non-
technical alike. The sum of a user’s daily experience is com-
posed of open standards, such as HTML, JavaScript and
Cascading Style Sheets as well as proprietary plugins, such
as Adobe’s Flash [4] and Microsoft’s Silverlight [27].
Adobe’s Flash is the most common way of delivering Rich
Internet Applications to desktop users, with the latest statis-
tics revealing an almost complete market penetration of Flash
on desktop computers [13, 32]. While some have claimed
that the new version of HTML, HTML5 [16], contains enough
functionality to render the use of Flash obsolete, the real-
ity is that today most Rich Internet Content, ranging from
advertising banners and video players to interactive photo
galleries and online games, is served and consumed by the
Flash platform.
This rapid evolution of the Web was not left unnoticed
by attackers. Traditionally, attackers preferred attacking
the server-side of the Internet infrastructure, such as Web
servers [21] and mail servers, since that gave them access to
powerful hosts with plenty of bandwidth and disk space as
well as a foothold in a company’s internal network. Nowa-
days however, the attacks are targeting the client-side of
the Internet infrastructure. This can be the Web applica-
tion, as rendered in a browser, the software of the browser
itself or even the user sitting behind the browser. The result
of client-side attacks is usually the theft of user credentials
or the download of malware that makes the user’s computer
an unwilling part of a botnet [12].
Since Flash is part of all the technologies that shape the
every day experience of Web users, it is also part of this
new attack surface. Attacks against Flash target either vul-
nerabilities in the code of the Flash platform itself, or the
insecure practices of developers of Flash applications.
In
this second category falls the problem of Cross-site Script-
ing (XSS) [43]. While XSS in Web applications is a well-
known and extensively researched problem, the problem of
performing Cross-site Scripting attacks through vulnerable
Flash applications has received much less attention. A Flash
application can interact with the DOM (Document Object
Model) of the page that embeds it or even with the browser
itself. This allows Flash developers to read information from
the page that embeds them, write information to the DOM
or redirect the user to a desired page, such as the redirection
that happens when a user clicks on a Flash advertisement
banner. If these interactions are not protected adequately,
an attacker can inject arbitrary JavaScript code that will be
executed by a victim’s browser in the context of the web-
site hosting the vulnerable Flash application. Such code
can, among others, steal a user’s session identiﬁer, access
the website’s local storage on a victim’s browser or, in some
cases, read the victim’s geolocation information.
In this paper we present FlashOver1, a system capable of
automated detection of Cross-site Scripting vulnerabilities
in Flash applications. As the name of our system implies,
its goal is to discover ways to perform malicious interac-
tions between a Flash application and the rendering browser,
that were never intended by the programmer of the vulner-
able application. Given a Flash application, FlashOver per-
forms static analysis in order to automatically identify Ac-
tionScript variables that can be initialized with user-input
and are also used in operations that are commonly prone
to code injection attacks. The identiﬁed variables are then
tested dynamically in order to discover actual vulnerabilities
present in the audited Flash application.
More speciﬁcally, our FlashOver prototype ﬁrst decom-
piles the byte-code representation of ActionScript (the script-
ing language of the Flash platform) and then performs static
analysis on the source code of the application, in search for
commonly misused function calls that are responsible for
Flash-to-DOM and Flash-to-Browser communication. Once
these functions are located, our system then tracks the ar-
guments of these function calls back to their initialization.
When this process is complete, the static-analysis compo-
nent FlashOver produces a list of variables which are utilized
in commonly misused ActionScript API calls and are ini-
tialized using user-input. This list of potentially exploitable
variables is then used by the dynamic-analysis component
of our system, which renders the Flash application in the
Firefox browser and initializes the variables in many pos-
sible ways, always mimicking the methodology of attackers
who would lure victims in a page under their control.
In
the last phase, the automatic clicking module of FlashOver
clicks thousands of times on the rendered application, with
the intent of triggering the vulnerable API call. If our sys-
tem detects the execution of the injected JavaScript, then
the Flash application is ﬂagged as vulnerable.
To evaluate FlashOver, we obtained a partial list of Flash
applications hosted on the top 1,000 sites of the Internet,
which we downloaded and provided as input to our sys-
tem. At the end of the experiment, FlashOver success-
fully detected exploitable XSS vulnerabilities in Flash ap-
plications of many well-known websites, including ebay.com,
skype.com, mozilla.org and apple.com. These results are
evidence both of the problem of XSS attacks through Flash
applications as well as our system’s ability of automatically
detecting them. The main contributions of this paper are
the following:
• Detailed analysis of an XSS attack vector that is com-
monly overlooked in Web application development
• Design and implementation of FlashOver, a fully auto-
mated system which uses a combination of static and
dynamic analysis in order to identify Flash applica-
tions vulnerable to code injection attacks
• Evaluation of our system using Flash applications of
the top Internet websites, showing the prevalence of
1ﬂashover : An unintended electric arc, as between two
pieces of apparatus
the aforementioned vulnerability as well as our sys-
tem’s ability of detecting it
The rest of this paper is structured as follows: In Section 2
we give a brief overview of Cross-site Scripting attacks, Flash
technology and how the one aﬀects the other. We describe
the general architecture of FlashOver in Section 3 followed
by our implementation choices and their rationale in Sec-
tion 4.
In Section 5 we evaluate our prototype by using
it to discover previously unreported vulnerabilities in Flash
applications of the top 1,000 Alexa sites. We present our
ethical considerations in Section 6, we discuss related work
in Section 7 and we conclude in Section 8.
2. BACKGROUND
In this section we give a brief overview of Cross-site Script-
ing attacks and of the Adobe Flash platform. We also
present a motivating example showing how a vulnerable
Flash application can be used to inject malicious JavaScript
that will be executed by user’s browser in the context of the
domain hosting the vulnerable Flash application. While the
techniques presented in the rest of this paper are speciﬁc
to the Flash platform, they are, in principle, applicable to
other similar content-delivering platforms, such as Microsoft
Silverlight [28].
2.1 Cross-site Scripting
Cross-site Scripting (XSS) attacks belong to a broader
range of attacks, collectively known as code injection at-
tacks.
In code injection attacks, the attacker inputs data
that is later on perceived as code and executed by the run-
ning application.
In XSS attacks, an attacker adds malicious JavaScript
code on a page of a vulnerable website that will be executed
by a victim’s browser when that vulnerable page is visited.
Malicious JavaScript running in the victim’s browser and in
the context of the vulnerable website can access, among oth-
ers, the session cookies of that website and transfer them to
an attacker-controlled server. The attacker can then replay
these sessions to the vulnerable website eﬀectively authen-
ticating himself as the victim. The injected JavaScript can
also be used to alter the page’s appearance to perform phish-
ing or steal sensitive input as it is typed-in by the user.
2.2 Adobe Flash
Adobe Flash is a proprietary multimedia platform which
is used to create Rich Internet Applications. To be able to
run Flash applications on a desktop, a Flash player must be
installed which takes the form of a browser plugin. Accord-
ing to the latest statistics, Adobe’s Flash player is installed
on more than 99% of desktops connected to the Internet [13,
32]. Over the years, the amount of functionality available
to Flash applications has increased with each new version of
the Flash player. Today, a Flash application can combine
audio, video, images and other multimedia elements.
Flash applications are contained in SWF ﬁles (i.e. ﬁles
with the .swf extension) which bundle multimedia elements
together with byte-code-compiled ActionScript (AS) code.
When loaded into the Flash player, the Flash application is
rendered and, if present, the AS byte-code is interpreted and
executed. ActionScript is a scripting language developed by
Adobe which allows the programmer to handle events, de-
sign the interaction between multimedia elements and com-
municate with both the embedding browser and remote Web
servers. The current version of ActionScript is ActionScript
3.0 with legacy support for prior versions.




Figure 1: Embedding a SWF ﬁle using the object
tag
2.3 Using SWF ﬁles
SWF ﬁles are typically embedded in HTML using the  or  tags, but it is also possible to load an
SWF ﬁle into the browser directly, without embedding it into
HTML, either by requesting it as is from a browser’s URL
bar or providing it as the source argument to an 
tag in an existing HTML page.
Flash, like many other technologies, allows for the provi-
sion of load-time input next to hard-coded values speciﬁed at
compile-time and present in the resulting SWF ﬁle. For in-
stance, YouTube videos are displayed on webpages that each
embed the same Flash video player. Data speciﬁc to the dis-
played video-ﬁle is passed to the Flash player at load-time
through variables embedded in the enclosing HTML page.
Flash supports two methods of passing values to Flash ob-
jects:
• FlashVars directive: When embedding a SWF ﬁle
using the  or  tags, the FlashVars pa-
rameter can be used to pass values to speciﬁc variables.
In Figure 1, FlashVars are utilized to initialize Flash’s
variables var1 and var2 to “Hello” and “World” respec-
tively.
• GET parameters: A web developer can also utilize
GET-parameters to pass arguments to a Flash appli-
cation. For instance, when the URI: http://example.
com/myFlashMovie.swf?var1=Hello&var2=World is in-
voked, the Flash application will initialize its internal
variables var1 and var2 with their respective values.
This method is usually overlooked by web developers
who believe that the Flash application hosted on their