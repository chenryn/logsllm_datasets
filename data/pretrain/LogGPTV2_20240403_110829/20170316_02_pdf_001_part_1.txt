# decNumber C Library

## Overview
The decNumber library is an ANSI C implementation of the General Decimal Arithmetic Specification, designed to meet the requirements of commercial, financial, and human-oriented applications. It aligns with the decimal arithmetic defined in the IEEE 754 Standard for Floating Point Arithmetic. The library fully supports integer, fixed-point, and floating-point decimal numbers, including infinite, NaN (Not a Number), and subnormal values. Both arbitrary-precision and fixed-size representations are supported.

### Key Features
- **Arbitrary-Precision Arithmetic**: Optimized for common values (tens of digits) but can handle up to a billion digits of precision and 9-digit exponents.
- **Fixed-Size Formats**: Supports decimal32, decimal64, and decimal128 formats, which provide 7, 16, and 34 decimal digits of precision, respectively.
- **Packed BCD Format**: Implements the classic packed decimal format used by IBM S/360 and later machines, supporting variable lengths and scale specification.
- **Conversion Functions**: Provides functions for conversions between different decimal number representations, including Packed BCD and IEEE 754 fixed-size formats.
- **Context Management**: Uses a `decContext` structure to manage precision, rounding mode, and exception handling.

### Library Structure
The library is organized into several modules, each with a header file (e.g., `decNumber.h`) and a source file (e.g., `decNumber.c`). These correspond to the instance variables and methods in an object-oriented design.

#### Core Module: `decNumber`
- **Data Representation**: Uses an arbitrary-precision decimal number representation optimized for efficient computation.
- **Operations**: Implements arithmetic, logical operations, and various conversions and utilities.
- **Context Handling**: Functions take a `decContext` structure to control precision, rounding, and exception handling.

#### Fixed-Size Formats: `decimal32`, `decimal64`, `decimal128`
- **Compact Representations**: Endian-dependent but otherwise machine-independent.
- **Modules**:
  - `decSingle`: For decimal32 format, provides utilities and conversions.
  - `decDouble`: For decimal64 format, includes full arithmetic and other functions.
  - `decQuad`: For decimal128 format, similar to `decDouble`.

### Relevant Standards
The decNumber package aims to follow the requirements of:
- **IEEE 754 Decimal Arithmetic**: With some restrictions on the remainder operator and mathematical functions.
- **ANSI X3.274-1996**: Applies to functions in the `decNumber` module with appropriate context.

### Userâ€™s Guide
To use the decNumber library effectively:
1. Convert input numbers to `decNumber` format.
2. Perform calculations.
3. Convert results back to the desired format.

#### Conversions
- **Supported Formats**:
  - ASCII strings
  - Compressed floating-point decimals (decimal32, decimal64, decimal128)
  - Packed Decimal numbers with optional scale

#### Efficiency
- **Arbitrary-Precision Calculations**: Use `decNumber` for high-precision needs.
- **Fixed-Precision Calculations**: Use `decFloats` modules for up to 34 digits of precision, avoiding conversions to and from `decNumber`.

### Examples
#### Example 1: Simple Addition
A test program that adds two numbers provided as command-line arguments.

```c
#include "decNumber.h"
#include <stdio.h>

#define DECNUMDIGITS 34

int main(int argc, char *argv[]) {
    decNumber a, b;
    decContext set;
    char string[DECNUMDIGITS + 14];

    if (argc < 3) {
        printf("Usage: %s <number1> <number2>\n", argv[0]);
        return 1;
    }

    decContextDefault(&set, DEC_INIT_BASE);
    set.traps = 0;
    set.digits = DECNUMDIGITS;

    decNumberFromString(&a, argv[1], &set);
    decNumberFromString(&b, argv[2], &set);
    decNumberAdd(&a, &a, &b, &set);
    decNumberToString(&a, string);

    printf("%s + %s = %s\n", argv[1], argv[2], string);
    return 0;
}
```

#### Example 2: Compound Interest
A program that calculates the final accumulated investment based on initial amount, interest rate, and number of years.

```c
#include "decNumber.h"
#include <stdio.h>

#define DECNUMDIGITS 34

int main(int argc, char *argv[]) {
    decNumber one, mtwo, hundred, start, rate, years, total;
    decContext set;
    char string[DECNUMDIGITS + 14];

    if (argc < 4) {
        printf("Usage: %s <initial_amount> <interest_rate> <years>\n", argv[0]);
        return 1;
    }

    decContextDefault(&set, DEC_INIT_BASE);
    set.traps = 0;
    set.digits = 25;

    decNumberFromString(&one, "1", &set);
    decNumberFromString(&mtwo, "-2", &set);
    decNumberFromString(&hundred, "100", &set);

    decNumberFromString(&start, argv[1], &set);
    decNumberFromString(&rate, argv[2], &set);
    decNumberFromString(&years, argv[3], &set);

    decNumberDivide(&rate, &rate, &hundred, &set);
    decNumberAdd(&rate, &rate, &one, &set);
    decNumberPower(&rate, &rate, &years, &set);
    decNumberMultiply(&total, &rate, &start, &set);
    decNumberRescale(&total, &total, &mtwo, &set);

    decNumberToString(&total, string);
    printf("%s at %s%% for %s years => %s\n", argv[1], argv[2], argv[3], string);
    return 0;
}
```

### Additional Information
- **Customization Parameters**: Tuning parameters for performance and behavior.
- **Testing and Performance**: Tables and notes on library performance.
- **Changes and Updates**: Appendix B details changes in the library.

For more detailed information, refer to the specific sections and appendices in the documentation.