title:Detecting Kernel Refcount Bugs with Two-Dimensional Consistency Checking
author:Xin Tan and
Yuan Zhang and
Xiyu Yang and
Kangjie Lu and
Min Yang
Detecting Kernel Refcount Bugs with 
Two-Dimensional Consistency Checking
Xin Tan, Yuan Zhang, and Xiyu Yang, Fudan University; 
Kangjie Lu, University of Minnesota; Min Yang, Fudan University
https://www.usenix.org/conference/usenixsecurity21/presentation/tan
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.Detecting Kernel Refcount Bugs with Two-Dimensional Consistency Checking
Xin Tan1, ¶, Yuan Zhang1, ¶, Xiyu Yang1, Kangjie Lu2, and Min Yang1
1School of Computer Science, Fudan University, China
2Department of Computer Science & Engineering, University of Minnesota, USA
¶co-ﬁrst authors
Abstract
In the Linux kernel, reference counting (refcount) has be-
come a default mechanism that manages resource objects.
A refcount of a tracked object is incremented when a new
reference is assigned and decremented when a reference be-
comes invalid. Since the kernel manages a large number of
shared resources, refcount is prevalent. Due to the inherent
complexity of the kernel and resource sharing, developers
often fail to properly update refcounts, leading to refcount
bugs. Researchers have shown that refcount bugs can cause
critical security impacts like privilege escalation; however,
the detection of refcount bugs remains an open problem.
In this paper, we propose CID, a new mechanism that em-
ploys two-dimensional consistency checking to automatically
detect refcount bugs. By checking if callers consistently use
a refcount function, CID detects deviating cases as potential
bugs, and by checking how a caller uses a refcount function,
CID infers the condition-aware rules for the function to corre-
spondingly operate the refcount, and thus a violating case is a
potential bug. More importantly, CID’s consistency checking
does not require complicated semantic understanding, inter-
procedural data-ﬂow tracing, or refcount-operation reasoning.
CID also features an automated mechanism that systemat-
ically identiﬁes refcount ﬁelds and functions in the whole
kernel. We implement CID and apply it to the Linux kernel.
The tool found 44 new refcount bugs that may cause severe
security issues, most of which have been conﬁrmed by the
maintainers.
1 Introduction
The Linux kernel becomes more and more important, espe-
cially with its wide use in cloud platforms, mobile devices,
and IoT devices. A core functionality of the kernel is to man-
age the shared resources (e.g. peripherals and ﬁles). Since
the Linux kernel is implemented in C language which does
not support automatic garbage collection or smart pointers, it
relies on reference counting (refcount for short) to keep track
of the uses of a variety of resources. Naturally, refcount is
quite prevalent in the Linux kernel to maintain a large number
of shared resource objects. Our study also reveals that the
Linux kernel alone (except third-party drivers) has about 800
structs that are managed with the refcount mechanism.
In essence, a refcount is an integer that tracks the num-
ber of references to the tracked resource object. To facilitate
the uses of refcounts, the Linux kernel offers speciﬁc data
types and manipulation APIs. For example, refcount_t is
deﬁned in the Linux kernel to represent a refcount ﬁeld, while
refcount_inc() and refcount_dec() are two primitive
APIs for increasing (INC) and decreasing (DEC) a refcount_t
ﬁeld respectively. The refcount ﬁeld of an tracked object is
increased when there is a new reference to the object or de-
creased when a reference becomes invalid. The reference
counting approach guarantees that an object is freed only
when its refcount reaches zero.
Since the refcount needs to be updated manually, the de-
velopers are required to have a clear understanding of their
intended uses on system resources and then perform correct
refcount operations, which are actually challenging in the
complex Linux kernel. On one hand, the programmers may
make mistakes due to the complexity of the kernel logic. On
the other hand, different functions of the same kernel module
might be developed by different developers. The developer of
a function may not know the details of other functions, which
often leads to incorrect refcount operations. As a result, the
refcount operations in the Linux kernel are error-prone.
Our study shows that there are two main kinds of refcount
errors. (1) Over decrease. This buggy case occurs when the
developer redundantly calls a refcount-decrease API or under
an over-relaxed condition. A redundant decrease may cause
the refcount to prematurely reach zero, which will incorrectly
trigger object release. That is, the memory associated to the
victim object is freed while there are still legitimate references
to it. If the kernel still references to the object while it has
been freed, critical use-after-free (UAF) occurs. (2) Missing
decrease. By contrast, another kind of bug is that a necessary
refcount decrease is missing. This often leads to a resource
USENIX Association
30th USENIX Security Symposium    2471
leak (e.g., memory leak) because the recount may never reach
zero, and the resource will never be released. Attackers can
exploit such bugs to launch denial-of-service, such as crashing
the system, by repeatedly triggering the bug. Interestingly,
missing refcount release may also lead to UAF, i.e., when the
refcount ﬁeld overﬂows to be zero, the kernel will wrongly
free it while some legitimate references are still used.
Refcount bugs have severe impact on the security of the
system. In particular, security researchers have reported many
serious refcount vulnerabilities (e.g., CVE-2016-4558, CVE-
2016-0728, CVE-2019-11487), which can be exploited for
privilege escalation, putting a lot of real-world devices at risk.
Take CVE-2016-0728 as an example, by continuously trig-
gering the missing-decrease path in the keyrings facility, the
refcount bug ﬁnally overﬂows the usage counter, triggering a
UAF vulnerability. The UAF vulnerability is further success-
fully exploited to perform a local privilege escalation attack.
Even worse, this vulnerability is quite stealthy for hiding in
the kernel for about 4 years until it was discovered. As a result,
tens of millions of Linux PCs/servers, including 66% of the
Android devices (phones/tablets) [2] are affected. That’s to
say, the refcount bugs may be too latent to discover, yet cause
critical security impact against numerous devices and users.
Given the severe impact of refcount bugs, it is important to
detect them in the Linux kernel. However, there are signiﬁcant
challenges in the detection.
Challenge-I: Lacking a refcount bug oracle. Refcount
bugs happen when there is a mismatch between refcount INC
operations and DEC operations. However, when to perform
DEC operations largely depends on the purpose of the develop-
ers and the usage of the tracked object. Therefore, there lacks
an oracle that models refcount bugs. Existing works mainly
adopt two strategies to detect refcount bugs. Pungi [24] opti-
mistically assumes that the change of a refcount must equal
to the number of references escaped from the function. How-
ever, it may incur overwhelming false positives in the Linux
kernel, since many kernel functions (e.g., refcount wrapper
APIs) just increase the refcounts with no reference escaped.
To accurately detect refcount bugs, RID [29] observes that the
paths sharing the same argument and the same return value in
the same function should have consistent refcount behaviors.
Based on this observation, it proposes inconsistent path pair
checking to detect refcount bugs. Though this strategy helps
to reduce false positives, its scope is so narrow that it misses
the majority refcount bugs. According to our study, for the
60 refcount bugs reported between 2018 and 2020 from the
Linux kernel [4], RID could only detect 10 of them.
Challenge-II: Recognizing wide-spread refcount ﬁelds.
The prerequisite to detect refcount bugs is the recognition
of refcount ﬁelds (i.e., struct ﬁelds that are manipulated by
refcount operations). However, refcount ﬁelds can be buried
in various types who serve for other purposes. It is non-trivial
to achieve both accuracy and coverage in identifying refcount
ﬁelds. According to our study described in §2.2, only 37 out
of the 100 atomic_t ﬁelds which we checked are used for
refcount, and the remaining are for other purposes. There-
fore, existing works [24, 29] involve manual efforts to label a
set of refcount ﬁelds/operations. Pattern-based [36] methods
could also identify refcount ﬁelds in the Linux kernel. How-
ever, such methods work for only common refcount ﬁelds,
but would miss less common or custom ones.
To address these challenges, this paper proposes CID1,
which ﬁrst systematically identiﬁes potential refcount ﬁelds/-
operations in the Linux kernel and then automatically detects
refcount bugs with two-dimensional consistency checking.
Our bug detection is based on two unique observations: (1)
INC and DEC operations enforce a strict mutual relation, of-
tentimes with pre-conditions; (2) INC and DEC functions for
the same object are often invoked multiple times, following
the same usage, and the usage is bug-free in most cases. The
two observations motivate the design of our two-dimensional
consistency checking. In one dimension, the INC-DEC consis-
tency checking infers condition-aware refcount rules for the
INC or DEC function by examining the DEC or INC operations
and their conditions in another function. Then, it uses the rules
to detect violating cases in the INC or DEC function as refcount
bugs. A unique strenghth of the checking is that the inferred
refcount rules apply regardless of the complicated data and
control ﬂows between the INC and DEC operations, thus it
avoids the complicated tracing and inter-procedural data-ﬂow
analysis. In the other dimension, the DEC-DEC consistency
checking recognizes deviating DEC operations, from the ma-
jority DEC operations paired with the same INC operation, as
refcount bugs.
Compared to existing works, our two-dimensional check-
ing does not rely on an aggressive or conservative bug oracle
while the checked inconsistencies still effectively uncover
refcount bugs. Meanwhile, CID introduces behavior-based re-
fcount ﬁeld identiﬁcation, which distinguishes refcount ﬁelds
from a large number of other ﬁelds based on their purposes.
By summarizing the behavior features of refcount ﬁelds, CID
systematically and automatically identiﬁes the refcount ﬁelds
that are deﬁned in different data types at a high precision.
We implement a prototype of CID with the LLVM infras-
tructure [23]. CID incorporates several new techniques to
realize refcount bug detection with the two-dimensional con-
sistency checking. First, CID selects candidate refcount ﬁelds
through type analysis and then identiﬁes refcount ﬁelds with
a behavior-based inference method. Second, CID collects the
functions that perform INC operations on the identiﬁed ref-
count ﬁelds, and performs path-sensitive data ﬂow analysis to
model the INC behaviors in them including the DEC behaviors
in their callers. At last, CID checks the consistencies over the
modeled behaviors between paired INC and DEC operations
from two dimensions to detect refcount bugs and generates
bug reports.
1CID is named for Checking INC/DEC operations
2472    30th USENIX Security Symposium
USENIX Association
To evaluate the effectiveness of CID, we apply it to the
Linux kernel of version 5.6-rc2. CID ﬁnishes the analysis
for the whole kernel within 18 minutes and reports 149 re-
fcount bugs. From these bugs, we manually conﬁrmed 44
new refcount bugs and submitted their patches to the Linux
maintainers. Until now, 36 bugs have been conﬁrmed, and
the patches for the 34 bugs have already been applied to the
kernel. These new bugs are also conﬁrmed to have severe
security impacts, including UAF, Denial of Service (DoS) and
memory leak. We analyze the conﬁrmed false-positive cases
and ﬁnd most of them resulted from the imprecise static anal-
ysis used in CID. We measure the bug detection capability of
CID by comparing it with RID [29] (the state-of-the-art tool)
on detecting 60 known refcount bugs. The results show that
CID only misses 6 bugs while RID misses 50 bugs. Besides,
the refcount ﬁeld identiﬁcation of CID is also evaluated to be
quite effective, which identiﬁes 792 refcount ﬁelds from the
kernel with an accuracy of 94.3%.
In summary, we make the following contributions.
• A New Approach for Refcount Bug Detection. We pro-
pose a novel approach to detect kernel refcount bugs with
two-dimensional consistency checking, which examines
the inconsistencies between the INC operations and DEC
operations without assuming a bug oracle.
• A New Approach for Refcount Field Identiﬁcation. We
present behavior-based inference approach to systemati-
cally identify refcount ﬁelds across the whole kernel. This
technique generally facilitates other works relying on ref-
count identiﬁcation.
• New Bugs Detected by the Prototype. We develop a pro-
totype of CID and apply it to the Linux kernel. The tool
found 44 new refcount bugs in the latest kernel, which
cause severe security impacts. Among them, 36 bugs have
been conﬁrmed by the Linux maintainers.
The rest of the paper is organized as follows: §2 introduces
the refcount mechanism in the Linux kernel and studies the
challenges in refcount ﬁeld identiﬁcation; §3 illustrates the
two-dimensional consistency checking with real-world exam-
ples; §4 and §5 present the design and implementation of CID;
§6 evaluates the effectiveness of CID; §7 discusses our work;
§8 presents the related work; ﬁnally, §9 concludes the paper.
2 Background
2.1 Refcount in the Linux Kernel
Reference count (refcount) is a common resource manage-
ment mechanism. In the Linux kernel, the refcount mecha-
nism is widely used in various subsystems for managing all
kinds of resources, such as dynamically allocated memory
blocks [30], device drivers [12]. In essence, a refcount is a
numeric ﬁeld counting the number of references to a spe-
ciﬁc resource object. The kernel developers often maintain
a refcount ﬁeld in the to-be-counted resource data structure
to implement the refcounting mechanism. The refcount of a
resource is incremented when a new reference is taken and
decremented when a reference is released. It is important to
note that, by design, when a refcount reaches zero, its cor-
responding resource is not being used and will be recycled
automatically.
According to the kernel documentation [1, 3, 7, 30],
refcount is typically manipulated through atomic opera-
tions that support concurrent allocation and release of
a resource. Therefore, to avoid concurrency and per-
formance issues, refcount is deﬁned as an atomic inte-
ger. There are 5 data types for refcount deﬁnition in
the Linux kernel—atomic_t, atomic_long_t, atomic64_t,
kref, and refcount_t. atomic_t, atomic_long_t and
atomic64_t are essentially of type int, long, and s64, re-
spectively, whose size varies with the underlying architec-
ture. Note that atomic_t, atomic_long_t, and atomic64_t
generic types are not limited to refcount usage, i.e., they can be
used for other purposes. The kref type is a refcount-speciﬁc
type introduced by Greg [22], and it is subsequently replaced
by refcount_t type in the latest kernel. Actually, the kref
type has already been deﬁned with refcount_t in the current
kernel. The refcount_t type adds extra support to prevent
accidental counter overﬂows and underﬂows, which is quite
effective in reducing the severe UAF vulnerabilities. Although
refcount_t is more secure than the other 4 types, it incurs
obvious performance overhead. Besides, the conversion from
old refcount types to the new refcount_t type requires sig-
niﬁcant efforts. Therefore, there are still a lot of legacy data
structures using the old types [35], and some time-sensitive
scenarios clearly refuse this new type [16].
Based on the refcount types, the Linux kernel also provides
primitive APIs to manipulate refcounts. According to the
developer manual [1, 3, 7], three categories of primitive APIs
exist: SET, INC, and DEC. A SET primitive API initializes the
refcount of a newly allocated object to 1. An INC primitive
API increases the refcount by 1 when a new reference is
assigned to the counted object, whereas a DEC primitive API
decreases the refcount by 1 when a reference to the object
becomes invalid. Note that although INC and DEC APIs allow
to add or sub any value to the refcount, the Linux community
recommends that the value should be changed by 1 in the
context of refcounting [5].
There are a number of primitive refcount APIs; we collect
62 primitive refcount APIs from the latest Linux kernel and
present some examples in Table 1. Further, with the help of
the primitive APIs, Linux developers usually implement cus-
tom INC and INC wrapper functions to ease the management
of various objects. The convention is that an INC wrapper
function increments the refcount of an allocated object or
allocates one if it has not been allocated, while a DEC wrapper
function not only decrements the refcount but also releases
the object if its counter drops to 0.
USENIX Association
30th USENIX Security Symposium    2473
Table 1: Primitive refcount APIs in the Linux kernel.
Category
Examples
atomic_set, refcount_set, kref_init
atomic_inc, refcount_inc, kref_get
atomic_add, refcount_add_not_zero
atomic_dec, refcount_dec, kref_put
atomic_sub, refcount_sub_and_test
#
5
27
30
SET
INC
DEC
Table 2: The number of ﬁelds that are deﬁned with the 5
refcount data types.
Refcount Type
atomic_t
atomic_long_t
atomic64_t
refcount_t
kref
Total
# of Fields
2,010
154
334
297
425
3,220
2.2 A Study on Refcount Field Identiﬁcation
The wide use of the refcounting mechanism in various kernel
modules, together with the general-purpose data types that
are used to deﬁne refcount ﬁelds, makes the identiﬁcation of
refcount ﬁelds quite challenging. In order to understand the
difﬁculties in identifying refcount ﬁelds in the Linux kernel,
we perform a study on Linux 5.6-rc2.