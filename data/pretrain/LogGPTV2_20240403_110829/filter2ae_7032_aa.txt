"此漏洞非常的棒，特别是利用写的非常的精妙，可以作为二进制结合web的漏洞利用的典范，非常值得思考和学习",phithon师傅说。
同时也是因为本人也是对结合二进制的web漏洞比较感兴趣，觉得比较的好玩，所以就自己学习和分析一波，如果哪里分析的不对，希望大家可以及时的提出斧正，一起学习进步。
**对这个漏洞原理有所了解，但是想更加深入理解怎么利用的，建议直接看第五节**
### 0x1 前言
我这里提供一下我的调试环境: 
关于漏洞存在的条件就不再说了，这里可能需要说一下的是 php-fpm 的配置了:
    [global]
    error_log = /proc/self/fd/2
    daemonize = no
    [www]
    access.log = /proc/self/fd/2
    clear_env = no
    listen = 127.0.0.1:9000
    pm = dynamic
    pm.max_children = 5
    pm.start_servers = 1
    pm.min_spare_servers = 1
    pm.max_spare_servers = 1
我把 `pm.start_servers` `pm.max_spare_servers` 都调整成了1，这样 php-fpm
只会启动一个子进程处理请求，我们只需要 `gdb attach pid`到这个子进程上，就可以调试了，避免多进程时的一些不必要的麻烦。
### 0x2 触发异常行为
先看一下nginx的配置
    fastcgi_split_path_info ^(.+?\.php)(/.*)$;
`fastcgi_split_path_info` 函数会根据提供的正则表表达式, 将请求的URL(不包括?之后的参数部分)，分割为两个部分，分别赋值给变量
`$fastcgi_script_name` 和 `$fastcgi_path_info` 。
那么首先在index.php中打印出 `$_SERVER["PATH_INFO"]` ,然后发送如下请求
    GET /index.php/test%0atest HTTP/1.1
    Host: 192.168.15.166
按照预期的行为，由于`/index.php/test%0atest` 无法被正则表达式 `^(.+?\.php)(/.*)$`
分割为两个部分，所以nginx传给php-fpm的变量中 `SCRIPT_NAME` 为 `/index.php/test\ntest` ,
`PATH_INFO` 为空，这一点很容易通过抓取nginx 和 fpm 之间的通信数据来验证。
`socat -v -x tcp-listen:9090,fork tcp-connect:127.0.0.1:9000`
这里的变量名和变量值的长度和内容遵循如下定义([参考fastcgi的通讯协议](http://www.mit.edu/~yandros/doc/specs/fcgi-spec.html)):
    typedef struct {
      unsigned char nameLengthB0;  /* nameLengthB0  >> 7 == 0 */
      unsigned char valueLengthB0; /* valueLengthB0 >> 7 == 0 */
      unsigned char nameData[nameLength];
      unsigned char valueData[valueLength];
    } FCGI_NameValuePair11;
    typedef struct {
      unsigned char nameLengthB0;  /* nameLengthB0  >> 7 == 0 */
      unsigned char valueLengthB3; /* valueLengthB3 >> 7 == 1 */
      unsigned char valueLengthB2;
      unsigned char valueLengthB1;
      unsigned char valueLengthB0;
      unsigned char nameData[nameLength];
      unsigned char valueData[valueLength
              ((B3 & 0x7f) > 7 == 1 */
      unsigned char nameLengthB2;
      unsigned char nameLengthB1;
      unsigned char nameLengthB0;
      unsigned char valueLengthB0; /* valueLengthB0 >> 7 == 0 */
      unsigned char nameData[nameLength
              ((B3 & 0x7f) > 7 == 1 */
      unsigned char nameLengthB2;
      unsigned char nameLengthB1;
      unsigned char nameLengthB0;
      unsigned char valueLengthB3; /* valueLengthB3 >> 7 == 1 */
      unsigned char valueLengthB2;
      unsigned char valueLengthB1;
      unsigned char valueLengthB0;
      unsigned char nameData[nameLength
              ((B3 & 0x7f) slen && !strcmp(env_script_name+snlen-slen, path_info)) {
                                    FCGI_PUTENV(request, "ORIG_SCRIPT_NAME", orig_script_name);
                                    env_script_name[snlen-slen] = 0;
                                    SG(request_info).request_uri = FCGI_PUTENV(request, "SCRIPT_NAME", env_script_name);
                                }
                            }
                            env_path_info = FCGI_PUTENV(request, "PATH_INFO", path_info);
                        }
做一个简单的解释，先去掉 `/var/www/html/index.php/test\ntest` 最后一个 `/` 后面的内容，看
`/var/www/html/index.php`这个文件是否存在，如果存在，就进入后续的操作。  
注意几个长度：
    ptlen 是  /var/www/html/index.php 的长度
    len 是 /var/www/html/index.php/test\ntest 的长度
    slen 是  /test\ntest 的长度
    pilen 是 PATH_INFO 的长度，因为 PATH_INFO 在此时还是为空的，所以是 0
发生问题的关键是如下的操作:
    path_info = env_path_info ? env_path_info + pilen - slen : NULL;
            tflag = (orig_path_info != path_info);
因为 `pilen` 为0，这里相当于把原来的 `env_path_info` 强行向前移动了 `slen`, 作为新的`PATH_INFO`，这里的
`slen`刚好是10。
这就解释了发生异常的原因。
### 0x4 找漏洞利用点
根据前面的分析，`slen` 是 `/test\ntest` 的长度，我们应该可以完全控制。 换句话讲，我们可以让 `path_info` 指向
`env_path_info` 指向位置的前 `slen` 个字节的地方，然后这个内容作为新的 `PATH_INFO`,
但是这并没有什么用，并不会带来漏洞利用的可能性。