● The noise is caused by 
● Feature updates
● Code cleanup
● Refactoring
● Compiler option change
● Compiler change
Identifying Security Patches
● Not all patches are security patches
● Sometimes it's like finding needles in the sand
● We need a way for locating patches with strong 
security implication
Identifying Security Patches
Security Implication Score
● DarunGrim 3 provides script interface to the Diffing 
Engine
● DarunGrim 3 provides basic set of pattern matching
● We calculate Security Implication Score using this 
Python interface
● The pattern matching should be easy to extend as the 
researcher get to know new patterns
● You can add new patterns if you want.
Examples
● Examples for each vulnerability classes.
● DarunGrim2 and DarunGrim3 examples are shown.
● Security Implication Scores are shown for some 
examples.
Stack Based Buffer Overflow: 
MS06-070
Stack Based Buffer Overflow: 
MS06-070/_NetpManageIPCConnect@16
Stack Based Buffer Overflow: 
Signatures
● Pattern matching for string length checking routines is 
a good sign for stack or heap based overflow.
● There are variations of string length check routines.
● strlen, wcslen, _mbslen, _mbstrlen
Stack Based Buffer Overflow(Logic 
Error): MS08-067
● Conficker worm exploited this vulnerability to 
propagate through internal network.
● Easy target for binary diffing
● only 2 functions changed. 
● One is a change in calling convention. 
● The other is the function that has the vulnerability
Stack Based Buffer Overflow(Logic 
Error): MS08-067
Stack Based Buffer Overflow(Logic 
Error): MS08-067
Stack Based Buffer Overflow(Logic 
Error): MS08-067
Stack Based Buffer Overflow(Logic 
Error): MS08-067
Stack Based Buffer Overflow(Logic 
Error): MS08-067
StringCchCopyW
http://msdn.microsoft.com/en-us/library/ms647527%28VS.85%29.aspx
Stack Based Buffer Overflow: 
Signatures
● Pattern matching for safe string manipulation functions 
are good sign for buffer overflow patches.
● Strsafe Functions
–
StringCbCat, StringCbCatEx, StringCbCatN, StringCbCatNEx, StringCbCopy, StringCbCopyEx, 
StringCbCopyN, StringCbCopyNEx, StringCbGets, StringCbGetsEx, StringCbLength, 
StringCbPrintf, StringCbPrintfEx, StringCbVPrintf, StringCbVPrintfEx, StringCchCat, 
StringCchCatEx, StringCchCatN, StringCchCatNEx, StringCchCopy, StringCchCopyEx, 
StringCchCopyN, StringCchCopyNEx, StringCchGets, StringCchGetsEx, StringCchLength, 
StringCchPrintf, StringCchPrintfEx, StringCchVPrintf, StringCchVPrintfEx
● Other Safe String Manipulation Functions
– strcpy_s, wcscpy_s, _mbscpy_s
– strcat_s, wcscat_s, _mbscat_s
– strncat_s, _strncat_s_l, wcsncat_s, _wcsncat_s_l, _mbsncat_s, _mbsncat_s_l
– strncpy_s, _strncpy_s_l, wcsncpy_s, _wcsncpy_s_l, _mbsncpy_s, _mbsncpy_s_l
– sprintf_s, _sprintf_s_l, swprintf_s, _swprintf_s_l
Stack Based Buffer Overflow: 
Signatures
● Removal of unsafe string routines is a good signature.
–
strcpy, wcscpy, _mbscpy
–
strcat, wcscat, _mbscat
–
sprintf, _sprintf_l, swprintf, _swprintf_l, __swprintf_l
–
vsprintf, _vsprintf_l, vswprintf, _vswprintf_l, __vswprintf_l
–
vsnprintf, _vsnprintf, _vsnprintf_l, _vsnwprintf, _vsnwprintf_l
Integer Overflow
MS10-030
Integer Overflow
MS10-030
Integer Comparison Routine
Integer Overflow
MS10-030
Integer Overflow
Signatures
● Additional string to integer conversion functions can 
be used to check sanity of an integer derived from 
string.
● ULongLongToULong Function
– In case of multiplication operation is done on 32bit integer values, 
it can overflow. This function can help to see if the overflow 
happened.
● atoi, _atoi_l, _wtoi, _wtoi_l or StrToInt Function functions 
might appear on both sides of functions.
Integer Overflow
JRE Font Manager Buffer Overflow(Sun 
Alert 254571)
Original
Patched
.text:6D2C4A75                 mov     edi, [esp+10h]
.text:6D2C4A79                 lea     eax, [edi+0Ah]
.text:6D2C4A7C                 cmp     eax, 2000000h
.text:6D2C4A81                 jnb     short loc_6D2C4A8D
.text:6D2C4A83                 push    eax             ; size_t
.text:6D2C4A84                 call    ds:malloc
.text:6D244B06                 push    edi
Additiional Check:
.text:6D244B07                 mov     edi, [esp+10h]
.text:6D244B0B                 mov     eax, 2000000h
.text:6D244B10                 cmp     edi, eax
.text:6D244B12                 jnb     short loc_6D244B2B
.text:6D244B14                 lea     ecx, [edi+0Ah]
.text:6D244B17                 cmp     ecx, eax
.text:6D244B19                 jnb     short loc_6D244B25
.text:6D244B1B                 push    ecx             ; size_t
.text:6D244B1C                 call    ds:malloc
Integer Overflow
JRE Font Manager Buffer Overflow(Sun 
Alert 254571)
Integer Overflow
Signatures
● Additional cmp x86 operation is a good sign of integer 
overflow check.
● It will perform additional range check for the integer before 
and after of the arithmetic operation
● Counting additional number of "cmp" instruction in 
patched function might help deciding integer overflow.
Insufficient Validation of Parameters
Java Deployment Toolkit
Insufficient Validation of Parameters
Java Deployment Toolkit
● Unpatched one has whole a lot of red and yellow 
blocks.
● The whole function's basic blocks have been removed. 
● This is the quick fix for @taviso's 0-day.
● The function is responsible for querying registry key 
for JNLPFile Shell Open key and launching it using 
CreateProcessA API.
Insufficient Validation of Parameters
Signatures
● If validation of parameters are related to process 
creation routine, we can check if the original or 
patched function has a process creation related APIs 
like CreateProcess Function in modified functions.
Invalid Argument
MS09-020:WebDav case
Orginal
Patched
Invalid Argument
MS09-020:WebDav case
Flags has changed
Original
Patched
Invalid Argument
MS09-020:WebDav case
What does flag 8 mean?
MSDN(http://msdn.microsoft.com/en-us/library/dd319072(VS.85).aspx) declares like 
following:
MB_ERR_INVALID_CHARS
Windows Vista and later: The function does not drop illegal code points if 
the application does not set this flag.
Windows 2000 Service Pack 4, Windows XP: Fail if an invalid input character is 
encountered. If this flag is not set, the function silently drops illegal code 
points. A call to GetLastError returns 
ERROR_NO_UNICODE_TRANSLATION.
Invalid Argument
MS09-020:WebDav case
Broken UTF8 Heuristics?
6F0695EA mov     esi, 0FDE9h
,,,,
6F069641 call    ?FIsUTF8Url@@YIHPBD@Z ; 
FIsUTF8Url(char const *)
6F069646 test    eax, eax
if(!eax)
{
6F0695C3 xor     edi, edi
6F06964A mov     [ebp-124h], edi
}else
{
6F069650 cmp     [ebp-124h], esi
}
...
6F0696C9 mov     eax, [ebp-124h]
6F0696D5 sub     eax, esi
6F0696DE neg     eax
6F0696E0 sbb     eax, eax
6F0696E2 and     eax, 8
Insufficient Validation of Parameters
Signatures
● This issue is related to string conversion routine like  
MultiByteToWideChar Function, we can check if the 
modified or inserted, removed blocks have these kinds 
of APIs used in it.
● If the pattern is found, it's a strong sign of invalid 
parameter checks.
Use-After-Free: CVE-2010-0249-Vulnerability in Internet 
Explorer Could Allow Remote Code Execution
Use-After-Free: CVE-2010-0249-Vulnerability in Internet 
Explorer Could Allow Remote Code Execution
Use-After-Free: CVE-2010-0249-Vulnerability in Internet 
Explorer Could Allow Remote Code Execution
Unpatched
Use-After-Free: CVE-2010-0249-Vulnerability in Internet 
Explorer Could Allow Remote Code Execution
Patched
Use-After-Free: CVE-2010-0249-Vulnerability in Internet 
Explorer Could Allow Remote Code Execution
Use-After-Free: CVE-2010-0249-Vulnerability in Internet 
Explorer Could Allow Remote Code Execution
CTreeNode *arg_0
CTreeNode *arg_4
CTreeNode *orig_obj
2. Remove ptr
3. Add ptr
NodeAddRef
1. Add reference counter
NodeRelease
4. Release reference counter
Use-After-Free: CVE-2010-0249-Vulnerability in Internet 
Explorer Could Allow Remote Code Execution
Signatures
● Original binary was missing to replace pointer for the 
tree node.
● Freed node was used accidentally.
● ReplacePtr in adequate places fixed the problem
● We might use ReplacePtr pattern for use-after-free bug 
in IE.
● Adding the pattern will help to find same issue later binary 
diffing.
Conclusion
● Binary Diffing can benefit IPS rule writers and security 
researchers
● Locating security vulnerabilities from binary can 
help further binary auditing
● There are typical patterns in patches according to 
their bug classes.
● Security Implication Score by DarunGrim3 helps 
finding security patches out from feature updates
● The Security Implication Score logic is written in 
Python and customizable on-demand.
Questions?