### VFW Controller and Communication with Floodlight

The VFW Controller utilizes Floodlight REST APIs to communicate flow updates to the Floodlight module, which in turn programs SDN switches via an OpenFlow interface. This same channel is also used by SDN switches to send network traffic statistics back to the VFW Controller.

### Performance Optimization in VFW Controller

To enhance the performance of the VFW Controller, our implementation employs both online and prior processing. All analyses, including dependency analysis, flow update analysis, update cost calculation, and buffer cost calculation, are performed in advance. The VFW Controller maintains a copy of firewall rules for each virtual firewall and the flow rules in its database for these prior analyses. The results from these analyses are stored and retrieved whenever scaling is required. Overload/underload detection, optimal scaling calculation, virtual firewall creation/deletion, migrations of firewall rules and flow states, and flow updates are executed in real-time (online).

### 6XL Toolstack

6XL is a toolstack that provides the capability to provision guest VMs in Xen.

### Evaluation

The VFW Controller achieves safe, efficient, and optimal virtual firewall scaling. We evaluate the VFW Controller with the following goals:

- **Demonstration of the Relationship Between Virtual Firewall Performance and Rule Size**: This justifies the VFW Controller’s choice of rule splitting over rule copying.
- **Study of Rule Dependency Relations in Firewall Policies**: This highlights the necessity of dependency analysis in the VFW Controller.
- **Demonstration of the VFW Controller’s Ability to Quickly Scale**.
- **Quantification of the Impact of Firewall Rule Migration on Virtual Firewall Throughput**.
- **Evaluation of the VFW Controller’s Optimal Scaling Calculation**.

#### Setup and Methodology

Our experiments were conducted using CloudLab, an open cloud platform that provides various resources (servers, storage, and network) for experimenters to run cloud software stacks such as OpenStack and CloudStack. In our experiments, we deployed a client machine to generate traffic, a server machine to receive traffic, and a firewall machine created by the VFW Controller to process the traffic between the client and the server. The client generated synthetic workloads using Scapy, a powerful interactive packet manipulation program.

### Performance of Virtual Firewalls

In this experiment, we examined the relationship between the processing capacity \( c \) of a virtual firewall and its firewall rule size \( S \). We used three traffic datasets captured from real-world networks:
1. The CAIDA UCSD anonymized Internet trace, which represents typical Internet traffic.
2. The LBNL/ICSI enterprise trace, which is a typical traffic dataset from an enterprise network.
3. The Campus network trace, collected from our campus network gateway.

For each dataset, we conducted experiments to study how the firewall rule size affects the performance of a virtual firewall. In each experiment, we increased \( S \) from 1 to 3000, measuring the processing capacity for each value and repeating each measurement 100 times to calculate the average. The results, shown in Figure 7(a), indicate that the average processing capacity decreases linearly as \( S \) increases across all datasets. The LBNL enterprise traffic, with longer payload packets, showed a more significant impact on performance.

We applied polynomial curve fitting and linear regression to the CAIDA trace, obtaining the function \( c(S) = -0.0043S + 6.2785 \) with an \( R^2 \) value of 0.9864, indicating a strong fit. This function will be used in the evaluation of optimal scaling calculations.

We also recorded the average time a virtual firewall instance spent processing a packet for each dataset, as shown in Figure 7(b). As \( S \) increases, the average processing time shows a linear increase, leading to higher latency for passed packets. These results are useful for buffer cost calculations.

### Rule Dependencies in Firewall Policies

In this experiment, we studied eight real-world firewall policies from different sources, primarily campus networks and major ISPs. We partitioned each policy into disjoint groups using the partition algorithm described in Section IV. The results, listed in Table I, show the number of rules and groups identified in each policy. This experiment demonstrates that rule dependencies are common in real-world firewall policies, justifying the need for dependency analysis in the VFW Controller. The largest group we encountered contained only 18 firewall rules (from Policy H in Table I).

### Elasticity of VFW Controller

This experiment demonstrated the VFW Controller’s ability to elastically scale out an overloaded virtual firewall. We designed three scenarios:
1. A single virtual firewall with 400 firewall rules processed traffic between the client and the server.
2. Two parallel virtual firewalls, each configured with half of the 400 rules, processed the same traffic.
3. A single virtual firewall, initially in standalone mode, was connected to the VFW Controller and scaled out.

We compared the runtime throughput of the virtual firewalls in these scenarios, as shown in Figure 8. The results demonstrate that the VFW Controller can quickly scale out an overloaded virtual firewall and resolve overload conditions.

### Impact of Migration

During migration, in-flight traffic is buffered until the migration completes, causing a temporary degradation in runtime throughput. We quantified the duration and magnitude of this degradation for both UDP and TCP flows. The results, shown in Figure 9, indicate that the degradation increases with the number of migrated firewall rules or flows. The degradation lasts longer and is more significant for TCP flows due to their congestion avoidance mechanisms.

### Performance of Optimal Scaling Calculation

We introduced a three-step heuristic approach in the VFW Controller to calculate an optimal solution for scaling out an overloaded virtual firewall. The performance of this approach depends largely on the ILP formulation and solving used in the second step. Our experiments, shown in Figure 10, demonstrate that the time to find an optimal solution increases with the number of firewall rule groups and new virtual firewall instances, but remains very short, even for large values.

### Related Work

Recent research efforts, such as Pico Replication [43], Split/Merge [44], and OpenNF [28], have focused on designing control systems to address scaling issues in virtualized network functions. However, these approaches do not achieve loss-free scaling, unlike the VFW Controller.