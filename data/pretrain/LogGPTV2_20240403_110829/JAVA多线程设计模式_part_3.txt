p1 int
Lad
llev.ce
---
## Page 24
的解说。
有的锁定，关于锁定以及线程在 Block 状态中的部分，将在 Introductionl中做详细
边的线程则是正要去获取该锁定，表示 Block 中的状态。
setValue 方法调用出来的示意图：左边的线程获取对象实例的锁定后执行方法，石
使用于UML的标示法。时序阁能够有效地将线程操作的重要点，以视觉方式表示
的++“Lea”中所使用的标示方法。本书以这种标示法为主，将对象实例名称配合
所规范出来，而是根据附求E中的“POSA2”所使用的表示方法），
同值Result
调操作，
着lifeline、由上而下依次解读。如果出现箭头时，也要跟着去确认对象实例间的协
象实例的 write方法。
也有人宁愿省略以免麻烦。
这是指 open方法的retum（返回）。这个范例把所有方法的retum 都画出来，不过
已经成功调川出 open方法，所以 server对象实例是操作中的状态，故为长方形的方
lifcline,.
间坐标看成由上而下，
出来。
（Timethrcads Diagram）来农示。时序图并不是由UML所规定出来的，而是附录E
而圆角的长条形方框代表对象实例。:Data中间的长条形方框代表对象实例所拥
时序图
图0-7是个简单的时序图范例。这是相对于 Data类的对象实例，两项线程将
此外．在本书中如果返国值表示重大意义时，就像Devicc类的write方法的返
在本书当中如果使用顺序图难以表示出线程的操作情况时，则使用时序图
类似这样两个以上的对象实例之间的操作都可以用图示表示出米。顺序图要跟
继续以同样的方式调用 print 方法。这次是直接在 print 方法内就调间 device 对
因为控制又回到了client，所以 server 对象实例本来操作中的长条方框就要结
open箭头所指的 server长方形方框下面,还有一条指向client 的虚线箭头(-)。
lifeline中间有一个长方形的方框，表示该对象正在操作中。
所有对象实例都有“条往下延伸的虚线，称为lifeline（生命线）。在此请将时
图中有儿个箭头指问左右两边。请先看到标识为 open 的箭头记号。若线段为实
如果每个对象实例均须命名，则将其名称写在胃号之前，如 server:Server。
一样，在箭头下面加上·个长方形方框来表示（这种方法并非ML1.4
，上面是过上、下面则是未来。只在有对象实例时，才会有
漫谈UML
---
## Page 25
Java多线程设计模
图0-7时序图的范例
---
## Page 26
Java语言的线程
Introduction 1
---
## Page 27
妨就“作是暖身运动。本章的学习属性包括以下几个项日：
在正在执行程序的哪个部分？”，则可指出程序的某一点“就是这里”。这是因为在
-条线，则称该程序为单线程程序（singlethreaded program）
件分支，或者史复杂的处理都没有影响。如果该程序的处理流程从头到尾就像只有
描绘出来的线段应该会连成一条弯弯曲曲的小河。
明为追踪处理流程，实则追踪线程
何谓线程
Java语言的线程
二
在单线程程序里，“在某一时间点进行的处理”只有“个。
这条小河永远是--条，没有分义，无论是方法调用、重复 for 语句、if语句条
本章先整理出Java语言里线程的基本事项，如果读者已经很熟悉这个部分，不
假设现在有－份打印出来的程序内容，请拿起笔画出程序的执行顺序。则这些
我们在解读程序时，通常都是追若处理流程跑
线程相关的主要API则汇整于附录D内，请白行参阅。
·线程的暂时停止
●何谓线程
接若再执行这个语付··…
接若，执行这个语句·
一-川始，先执行这个语行….
至于上述项目以外的部分，则视需要在各章另行解说：
●2
-般的解读程序就是追踪这个流程。
Wait set、wait 方法、notify 方法和l notifyAll 方法
单线程与多线程、Thread类、run 方法利l start 方法
sleep 方法
线程的协调
synchronized 方法、synchronized 语句和锁定
线程的共享丘斥
Thread 类、Runnable 接山
线程的片动
。如果有人提问：“现
---
## Page 28
是被称为上线程的线程，执行的操作是输出字符串。
所示：
串“Good!”的程序：
单线程程序
下去，事实上是在追者线程的操作。
主体”称为线程（thread）‘
单线程程序里，“正在执行程序的主体”只有
线程（thread）的英文原意是“细丝"，Java 语言把上面所说“正在执行程序的
注1：有时也称 thread of control
开始执行Java程序后，至少会有1个线程开始操作，在List li-1里，有操作的
赠 java命令即开始执行程序，屏幕上也会出现10000 个“Good!"，如图I1-1
如果你使用的是Java Development Kit（JDK），则请在命令行输入：
public class Main { 
先执行一个简单的单线程程序看看吧，ListI1-1是-个连续输出10000次字符
java Main
则 javac 命令会开始编译源文件 Main,java，即可产生类文件 Main.class。
Good! Good! Good! Good! Good! Good! Gooa! Goodl Good! Good! Good!
Good! Good! Cood! Good! Gooa! Gooa! Goodl Good! Gocd! Good! Good!
javac Main.java
Good! Good! Good! Good! Gcod! Good! Good! Cood! Good! Good! Goodl
List 11-1
【下略】
后，再问到命令行输入：
publie static void main(stringll args) {
far （int  = 3;i s 0000; i++) f
System,out.print("Gcoa!");
单线程程序（Main.java）
程序收录什F载文件夹 Introduction1/Othcrs/SingleThread 内
”。我们在解读程序时，看起来好像是顺着处理流程追
I-I执行结果
个。
Introduction
Java语言的线程
---
## Page 29
GUI 应用程序
几个常见的范例：
线程则执行那里”，有3个线程，就得指出3个位置；有100个线程，就得指出100
在执行的有2个线程，则应指出2个位置说“第1个线程正在执行这里，第2个
这里”。如果是多线程，你需要更多只于指头才能指出所有线程；也就是说，正
综复杂的乱线团，
Java 程序语言当初一开始就把多线程处理列入规格了，
多线程程序
补充说明：有些线程是在后台进行
个位置：
上）的 main 方江。“ main方泌单的所有处理均结束后，则主线程也同时结束。
"应用程序的规模大到一定程度，程序望的多线程会以某种形式存在：以下是
相关线程等。
来，有些线程是在非Java 处理系统上跑，例如垃圾收集时使用的线程、GUI
有不止1个线程在操作时，表示若要追踪各个线程的轨迹，就会派生出团错
为了方便说明，前面只简单地介绍了“只有1个线程有操作”。其实严格说
儿平所有 GUI应用程序都·定有多线程。举例来说，假设现在有人用 Word编
山1个以上的线程所构成的程序称为多线程程序（multihreaded program）
-线程
则可在Java执行环境下启动主线程。然后，再由主线程执行输入类（在命令行
java 类名称
若在命令行输入：
public c.ass Main f
pubic slalic void main(stringil args) {
1（++00 >0=！u1）J
图11-2单线程程序的操作
Syslem.out.print ("Good!");
---
## Page 30
科开始操作，所以必须在程序的某个位置启动新的线程，才能算是真正的多线程程序。
Thread 类的 run 方法和 start 方法
补充说明：兼具性能和扩充性的I/O
第7章的问题7-6再做介绍，
程。这样“米，服务器的程序就可以设计成好像只服务1个客户端，具体范例留到
服务器这边的程序设计期入1个以上客户端的概念的话，程序反而会变得更复杂。
多个客户端
的时问，同时进行其他处理了，
解决。先把执行I/O 处理和非I/O 处理的线程分升，这样就能利用进行I/O 处理时
比较花费时间的 I10 处理
找，执行（2）的线程也可专心在GUI操作上，程序就会变得比较简单，
辑个较大的文本文件，刚刚才做过单字“查找”的操作。当Word 进行查找时，
了多线程：
了新的I/O相关类库（NIO）。有了这个类库，不必利用线程也能进行兼具性能
那么，各位可以开始来学学看多线程程序了。’ava 讲言等成的程序--定是先从主线
和扩充性的1/O处理。详细属性请参见以下网址或J2SE1.4以后版本的技术文件，
● Java 2 SDK, Standard Edition, v 1.4
从 Java 2 SDK，Standard Edition，v1.4（J2SE1.4）这个版本开始．已经如入
基本上，网络上的服务器必须同时处理1个以上的客户端，不过，要是·定在
●Package java.nio
● Ncw I/O APIs
般来说，文件和网络的VO 处理比较花费时间，如果在这段期间中，程序无
这2个操作分别交给不同的线程进行。这样米，执行（1）的线程可以专心查
（1）执行查找，
http://java.sur.con/j2se/1.4/docs/guide/rio/index.hzml
（2）显示按钮，若按下按钮时，则停止查找。
 l:tsp: //java.sun.com/;2se/l.4/docs/api/java/nio/package-summary.html
/'I,as?/4c'uns ee//:du
Introduction‘
Java语言的线程
---
## Page 31
再利用这个实例启动新的线程。接着再进行白己的工作，也就是连续输出10000次
新启动线程后，再调用run方法，
MyThread类单的run 方泓没有写错，但光是这样，程序不会有任何操作。必须先重
“Good!"，上线程有2个工作：
后，这个线程就会调用 run 万法。当 run 方法结束时，线程也同样结束。这里
真正执行的样子即如 List I1-3所示，List Il-3是先产生1 个 MyThread的实例，
新启动的线程的操作写在run方法里（nun是“跑”的意思）。启动了新的线程
pubiie vold run() (
在 MyThread类里声明了以下的run方法：
public class MyThread extends Thread ↑
请参见List I1-2，这个MyThread 类是Thread 类扩充（extends）后的结果。
java.lang.Thread
线程的启动要利川l下面这个类（一般称为Thread类）：
输H“Good!"。
启动输出“Nice!”的新线程；
List 11-3
Lst11-2
 public static void maia(Stringl] args)
public void runi) I
MyThread t
-.start();
fcr （int.i= 0;i <10000; i++) ↓
System.out.print("gooa!"):
重新启动线程的程序（Main.java）
System.out.print("N-ce!");
表示新线程的MyThread类（MyThreadjava）
- new Myrhread();
科序收求在下载文件火Introductionl/Others/TwoThreads 内
程序收录在下载文件夹 IntroductionI/Others/TwaThreads 内
一
---
## Page 32
新的线程调情run 方法。
你也可以调用 nun方法，只是这样不会启动新的线程。
的实例则被代入到变量t中。
调用出 start 方法之后，Java 执行处理系统就会在背后启动新的线程。再由这个
启动 List I1-2、List [1-3 程序的执行范例如图I1-4 所示。
start 方法跟run方法两者的关系可参见图Ⅱ1-3。图电确实有2条线（灰线）。
●调用 nun 方法
·启动新的线程
主线程
请各位注意··下，被调用出来启动新线程的是 start 方法，而非run方法。当然
start 方法是 Thrcad 类的方法。如果调用 start 方法，就会启动新线程。
下面这行语句则是上线程启动新线程。
MyThread t = new MyThread(l:
请看List11-3，下面这行语句是主线程产生MyThread类的实例。这个产生出来
t.start();
 public class Main [
图11-3
plblic ciass Myrhread extends Thread ↑
:public void run() （
public static void main(stringli args) {
：调用 start方法时，会有2个操作；
启动新的线程（slari 方法跟run方法的关系）
for（int i=0;i<10000;i++)
for (int i = 0; i < 10000; i++) {
t.start();
System,cut-print("Nice!");
System.out.print ("Good!") ;
Introduction
Java 语言的线程
---
## Page 33
线程的正作分担如下：
“Nice!"。山F这2个线程是并发的操作，所以输出结果是交错混合出现。这2个
的操作可能是并行（parallel）而非并发。当1个以上的线程并行操作时，就可
补充说明：并发与并行
以真正同时进行【个以上的处理。
Nicc!的线程”这两个线程的操作情况如下：
表现并发和并行两者间差异的模式如图11-5 所示。
如果是在有1个以上中央处理器的计算机上跑的Java执行处理系统，则线程
( concurrent ).
事实上，程序的处理是像这样不断切换有操作的线程。这种操作就称为并发
·输出字符事Good!的线程…..
·输出字符串Giood!的线程稍微操作--下后停止
我们来谈谈并发跟并行的差别
List Ⅱ1-2、Lis1 Ⅱ1-3 程序有 2 个线程在操作，所以这是一个多线程程序，
·新启动的线程输出字符串“Nice!”
●上线程输出字符串“Good！"
+
当有！个以上的线程在操作时，
Nice! Nice! N'ce! Kice! Nice! Nice! Nice! Nice! Nice! Nice! Nice!
Good! Good! Good! Gcod! Good! Gocd! Good! GoodlGood! Nice! Nice
Cocd! Gocd! Gooa! Gcod! Good! Good! Good! Good! Good! Good! Good!
1pco9ipoo5ipocpipoopipcooipoogipoooipoooipocpipoopipocg
（下略）
Nice! Nice! Kice! Nice! Nice! Nice! Nice! Nice! Nice! Nice! Nice.
Nice! Nice! Nice! Nice! Nice! Nice! Kice! Nice! Nice! Nice! Nice
Good! Good! Gocd! Good! Cood! Good!Nice! Nice! Nice! Kice! Nice!
Gord! Good! Good! Good! Good! Good! Good! Good! Good! Gocd! Good!
输出字符串 Nice!的线程稍微操作--下后停止
输出字符串Good!的线程稍微操作一下后停止
图11-4执行范例（交错输片Good!和Nice!）
，若计算机只有1个中央处理器，根本不可能
---
## Page 34
类的子类。
出的字符串以构造器的参数指定，存储在 message 字段。PrintThread 则声明为 Thread
方法。
线程的启动(1)一——利用Thread类的子类
PrintThread类（ListI1-4）是表示连续输出10000次指定字符串的线程。欲输
线程的启动
先说明利用 Thread 类的子类的实例来启动线程的方法，这也是在前节使用过的
以下依次说明：
（2）利用 Rummable接口的实现类的实例，启动线程。
再把话题拉回到线程启动的部分，如欲启动线程时，有下列2种方法：
（1）利用Thread类的子类的实例，启动线程。
图11-5并发与并行
并发（concurrent）
并行（parallel)
时间轴
时间轴
Introduction 1
Java语言的线程
---
## Page 35
的工作。
类的实例的 run方法，最后就变成是新启动的线程去进行连续输出10000次“Good!"”
例，再利用它们来启动2个线程。
（没有代入到变量的操作）。也就是：
为了让程序更简洁，所以上面只用1个语句启动线程。不过，请注意：“建立
调用出 start 方法后，就会启动新的线程。然后，这个线程再调用 PrintThread
这是光建立 PrintThread 类的实例，将该实例的 start 万法调用出来的语句。
i()aaes'(.ioo. peauiutua mau
在 main 方法里，则建立 PrintThread 类的实例后，立刻调用该实例的 start方法
public class Mair 1
Main类（List 11-5）这个程序则是先建立2个上而已声明的 PrintThread类的实
 public class PrintThread extends Thread
List 1-5
List I1-4
 public static void main(String[] args) {
public void run() !
public PrintThread(string message)
private String message;
this.message = messager
new PrintThread("Good!").start();
for (int i－0;i< 10000; i++){
new PrintThread("Nice!") -start();
利用PrintThread 类启动2个线程的程序（Main.java）
System.out-print(message);
PrintThread 类 ( PrintThread.java)
（Mainjava）表示连续输出10000次指定字符串的线程的
程序收录在下载文件火Introduction1/Others/PrintThread内
程序收录在下载文件火Introduction1/Others/PrintThread 内
---
## Page 36
象类。
（implements）了Runnable 接口的类。此时，不必再将 Printer 类设为 Thread 的子
出的字符串以构造器的参数指定，存储在 message 字段。Print 类则声明为已实现
接口是java.lang Package 里的接口，声i明方法如下：
线程的启动(2)——利用Runnable接口
类。
的子类以肩动线程的方法。
补充说明：程序结束
会结束。当所有线程都结束，这个程序才会正式结束。
束之前，
所以主线程也会立即结束，不过整个程序还没有结束喔。别忘了，在字符串输出结
PrintThread 的实例也不会就这样消失不见：
写成2个，即：
使已经建立了实例，仍然必须等到调用 start 方法才会启动线程。上面的语句也可以
注2：Runmable 接口虽然已经实现，但仍可声明未实现 mun 方法的类，不过这个类会变成抽