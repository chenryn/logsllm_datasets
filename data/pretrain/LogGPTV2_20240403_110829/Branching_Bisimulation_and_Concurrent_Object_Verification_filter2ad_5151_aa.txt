title:Branching Bisimulation and Concurrent Object Verification
author:Xiaoxiao Yang and
Joost-Pieter Katoen and
Huimin Lin and
Gaoang Liu and
Hao Wu
2018 48th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Branching Bisimulation and Concurrent Object
Veriﬁcation
Xiaoxiao Yang*
State Key Laboratory of Computer
Science, Institute of Software,
Chinese Academy of Sciences
Beijing, China
PI:EMAIL
Gaoang Liu
Joost-Pieter Katoen
Software Modeling and Veriﬁcation
Group, RWTH Aachen University
Aachen, Germany
PI:EMAIL
Huimin Lin
State Key Laboratory of Computer
Science, Institute of Software,
Chinese Academy of Sciences
Beijing, China
PI:EMAIL
State Key Laboratory of Computer Science
Institute of Software, Chinese Academy of Sciences
Beijing, China
PI:EMAIL
Hao Wu
Software Modeling and Veriﬁcation Group
RWTH Aachen University
Aachen, Germany
PI:EMAIL
Abstract—Linearizability and progress properties are key cor-
rectness notions for concurrent objects. This paper presents novel
veriﬁcation techniques for both property classes. The key of our
techniques is based on the branching bisimulation equivalence.
We ﬁrst show that it sufﬁces to check linearizability on the
quotient object program under branching bisimulation. This is
appealing, as it does not rely on linearization points. Further,
by exploiting divergence-sensitive branching bisimilarity, our
approach proves progress properties (e.g., lock-, wait-freedom) by
comparing the concurrent to-be-veriﬁed object program against
an abstract program consisting of atomic blocks. Our work
thus enables the usage of well-known proof
techniques for
branching bisimulation to check the correctness of concurrent
objects. The potential of our approach is illustrated by verifying
linearizability and lock-freedom of 14 benchmark algorithms
from the literature. Our experiments conﬁrm one known bug
and reveals one new bug.
Index Terms—concurrent data structure, veriﬁcation, branch-
ing bisimulation, lock-free, linearizability
I. INTRODUCTION
a) Context: Concurrent data structures such as stacks,
queues, hash tables and so forth, are ubiquitous. They are part
of packages that come with many programming languages,
such as java.util.concurrent. Reasoning about scalable
concurrent data structures is inherently complex. Threads
executing concurrently may interleave yielding different and
potentially unexpected outcomes. Advanced synchronization
mechanisms such as non-blocking and ﬁne-grained synchro-
nization – pivotal to ensure scalability – further complicate es-
tablishing correctness. Commonly accepted aspects of correct-
ness for concurrent data structures include linearizability [18]
and progress. In addition to Lamport’s notion of sequential
consistency [19], linearizability requires that the total ordering
which makes it sequentially consistent to respect the “real-
time” ordering among the operations in the execution. That
*Corresponding author.
is, if an operation e1 ﬁnishes execution before e2 begins, then
e1 must be ordered before e2. Linearizability is the key safety
property of non-blocking data structures, progress properties
such as lock-, wait-freedom [17] address liveness. Lock-free
data structures guarantee the progress of at least one thread
in each execution. Wait-free data structures ensure that any
thread can complete its operation in a ﬁnite number of steps.
b) This paper: Establishing linearizability and progress
properties of scalable concurrent data structures is a highly
challenging task. By exploiting the state equivalence relation
of object programs, this paper presents a novel and efﬁcient
approach to automatically verify both linearizability and lock-
free property. The key to our approach is to exploit the branch-
ing bisimulation equivalence [32], an elementary equivalence
notion in concurrency theory to prove the correctness of an
implementation with respect to a (more abstract) speciﬁcation.
We ﬁrst reveal that the linear-time equivalence relation is too
coarse to capture the computation effect of a step for non-
blocking executions, and branching potentials play a vital role
to determine the object state equivalence. This phenomenon is
conﬁrmed by the MS lock-free queue [25], a real data structure
used in java.util.concurrent. We exploit this by (only)
viewing method invocations and method returns as visible
actions, while considering all other actions to be internal (and
invisible). This ﬁnding lets us analyze and verify the complex
non-blocking algorithms readily, since a lot of inert steps that
have no inﬂuence on system evolution are abstracted away by
branching bisimilarity. The crux of our veriﬁcation methods
is to establish (divergence-sensitive) branching bisimilarity
between concurrent data structure implementations and simple
abstract data structure descriptions.
c) Checking linearizability.: Before going into more de-
tail about our approach, let us brieﬂy describe the state-of-
the-art for checking linearizability. Inspired by the original
linear-time notion of linearizability by Herlihy and Wing [18],
2158-3927/18/$31.00 ©2018 IEEE
DOI 10.1109/DSN.2018.00037
267
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:24:37 UTC from IEEE Xplore.  Restrictions apply. 
Branching bisimulation
Speciﬁcation 
s p
quotient
s p
/Ù
Linearizable
,
Trace reﬁnement
Branching bisimulation
quotient
Concrete Object O
O
/Ù
Abstract Object 
t
si
e
lock-/wait-free
Abstract Object 
iﬀ
)
divergence-sensitive
di
branching bisimulation
bra
Concrete Object O
si
lock-/wait-free
Concrete Object O
(a) Proving linearizability without linearization points
(b) Proving progress properties
Fig. 1. Verifying linearizability and progress using branching bisimulation.
most existing approaches for verifying linearizability are based
on establishing some form of reﬁnement between an abstract
speciﬁcation and a concrete object [3], [9], [20], [23]. These
approaches to checking linearizability suffer from two main
drawbacks: (1) a complex treatment of linearization points,
and (2) the lack of support for proving progress properties. For
overlapping method calls, linearizability requires to identify
distinct points in their execution intervals – the linearization
points (LPs) [17], [20] – such that the happens-before order
of concurrent method calls coincides with the order of their
LPs. Finding LPs is however complex (the deﬁnition is still
informal). Verifying non-blocking algorithms with non-ﬁxed
LPs such as Heller et al.’s lazy set [16] is a hard problem.
Techniques exploiting potential LPs require dedicated mecha-
nisms, e.g., [20]. In addition, the reﬁnement approach is not
suitable for progress properties; e.g., the reﬁnement technique
of [23] of ﬁnite-state systems speciﬁed as concurrent processes
with shared variables, does not preserve progress properties.
d) Veriﬁcation methods based on branching bisimilarity:
Whereas almost all approaches for checking linearizability
take a linear-time perspective, we propose to make a paradigm
shift, and use a branching-time relation instead. We show
that branching bisimulation precisely deﬁnes the state equiv-
alence for non-blocking object
is a
natural equivalence relation between a single effective step
(e.g., an LP) and a sequence of internal transitions that have
the same effect. Based on branching bisimilarity, the paper
describes two techniques for verifying correctness properties
of concurrent data structures, with several advantages: (1) We
can use existing bisimulation checking tools (there are many)
to prove linearizability; (2) We can check linearizability on
branching bisimulation quotients, resulting in huge state space
reductions; (3) Our approach not only does not rely on prior
identiﬁcation of LPs, but can readily analyze the intricate in-
terleavings (based on the internal steps in the quotient system);
(4) We can automatically verify lock-freedom in the same
framework, using divergence-sensitive branching bisimulation.
implementation, so it
Our approaches are summarized in Fig. 1.
To test the efﬁciency and effectiveness of our approaches,
we have conducted a series of experiments on 14 modern
highly-optimized concurrent data structures, using the existing
proof toolbox CADP [11], originally developed for concurrent
systems. A new bug violating lock-freedom was found and
a known bug on linearizability was conﬁrmed. Details about
veriﬁcation times, state space sizes are provided in Section
6. To the best of our knowledge, this is the ﬁrst work which
exploits bisimulation techniques to verify linearizability and
progress properties on complex concurrent objects and applies
state-of-the-art model-checking techniques on such objects.
e) Organization of this paper: Section II brieﬂy reviews
abstract and concrete object systems, linearizable speciﬁca-
tions, and trace reﬁnements. Section III gives a detailed
analysis of the MS lock-free queue and deﬁnes state equiv-
alence. Section IV shows the coincidence between max-trace
equivalence and branching bisimulation. Section V presents
our approaches towards checking linearizability and progress
properties. Section VI presents the experiments on the various
benchmarks. Section VII analyzes weak bisimulation. Section
VIII discusses related work. Section IX concludes.
II. PRELIMINARIES
A. Abstract and concrete objects
A shared object can be a simple variable, or more advanced
data structures like stack, linked list etc. There are two kinds of
descriptions for concurrent objects: abstract and concrete. Ab-
stract objects can be regarded as a coarse-grained concurrent
implementation, where each method body of object methods is
described by one or more atomic blocks. Concrete objects are
implemented by using synchronization primitives to reﬁne an
atomic operation of abstract objects. Fig. 2 shows the primitive
CAS (Compare and Swap) that is widely used in non-blocking
objects: it compares the value of a memory address addr with
the expected value exp and, if they are the same, updates addr
with new and returns true, otherwise returns false.
Bool CAS(Int& addr, Int exp, Int new) {
Bool b; Int v;
atomic{ v:=*addr;
if (v != exp) {b:=false;}
else {*addr:=new; b:=true;}
}
return b;
}
Fig. 2. The primitive Compare and Swap (CAS).
As an example of abstract and concrete objects, let’s con-
sider a register with a unique method NewCompareAndSet
(NewCAS) that reads and modiﬁes the register. The abstract
implementation of NewCompareAndSet is given in Fig. 3.
268
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:24:37 UTC from IEEE Xplore.  Restrictions apply. 
Instead of a boolean value indicating whether it succeeds,
the method returns the register’s prior value. A concrete non-
blocking implementation based on CAS is shown in Fig. 4,
where the method body takes several internal steps to realize
a single atomic step of Fig. 3.
Int NewCompareAndSet(Int& r, Int exp, Int new){
Int prior;
atomic{ prior:=r.get();
if (prior == exp) *r:=new; }
return prior;
}
Fig. 3. The abstract register method NewCompareAndSet.
Int NewCompareAndSet(Int& r, Int exp, Int new){
Int prior; Bool b:=false;
while(b == false) {
prior:=r.get();
if(prior != exp) return prior;
else b:=CAS(r, exp, new);
}
return exp;
}
Fig. 4. A concrete implementation of NewCompareAndSet.
B. Object systems
The behaviors of a concurrent object can be adequately
presented as a labeled transition system. For object methods,
we assume there is a programming language equipped with an
operational semantics to describe concurrent algorithms and
generate the transition system. When analysing and verifying
the correctness of a concurrent object, e.g., linearizability [18]
and sequential consistency [19], we are only interested in the
interactions (i.e., call and return) between the object and its
clients, while the internal instructions of the object method are
considered invisible, denoted by the silence action τ. Visible
actions of an object program have the following two forms:
(t, call, m(n)),
(t, ret(n
(cid:2)), m)
where t is a thread identiﬁer and m is a method name,
action (t, call, m(n)) is a call action invoking method m by
(cid:2)), m) is a return action
thread t with parameter n, and (t, ret(n
(cid:2). To
of method m by t associated with the return value n
generate an object’s behaviour, we use the most general clients
[12], [23], which only repeatedly invoke object’s methods in
any order and with all possible parameters. We will use the
term “object systems” to refer to either the labeled transition
systems or the program texts.
Deﬁnition 2.1: A labeled transition system (LTS) Δ for a
concurrent object is a quadruple (S, −−→,A, s0) where
• S is the set of states,
• A = {(t, call, m(n)), (t, ret(n
• −→ ⊆ S × A × S is the transition relation,
• s0 ∈ S is the initial state.
We write s
mean s
(cid:2)), m), (t,τ ) | t ∈ {1 . . . k},
where k is the number of threads} is the set of actions,
(cid:5)(cid:6)
(cid:2) to
(cid:2) to abbreviate (s, a, s
(cid:2) for some thread t.
(cid:2)) ∈−→, and s
a−→ s
(t,τ )−−−→ s
τ−→ s
A path starting at a state s of an object system is a ﬁnite
a3−−→ ··· . An execution
or inﬁnite sequence s
a2−−→ s2
a1−−→ s1
is a path starting from the initial state, which represents an
entire computation of the object system. A trace of state s is
a sequence of visible actions obtained from a path of s by
omitting states and invisible actions. A history is a ﬁnite trace
starting from the initial state, which models the interactions
of a client program with an object.
C. Linearizable speciﬁcation
Given an object system Δ, we deﬁne its corresponding lin-
earizable speciﬁcation [20], [23], denoted by Θsp, by turning
the body of each method in Δ into a single atomic block. A
method execution in a linearizable speciﬁcation Θsp includes
three atomic steps: the call action (t, call, m(n)), the internal
(cid:2)), m).
action τ (atomic block), and the return action (t, ret(n
The internal action corresponds to the computation based on
the sequential speciﬁcation of the object. For example, Fig. 3
is a linearizable speciﬁcation for the implementation of Fig. 4.
D. Trace reﬁnement
Linearizability [18] is a basic safety criterion for concurrent
objects, which is deﬁned on histories. Checking linearizability
amounts to verifying the trace reﬁnement [9], [20], [23]. Trace
reﬁnement
is a subset relationship between traces of two
object systems, a concrete implementation and the linearizable
speciﬁcation. Let trace(Δ) denote the set of all traces in Δ.
Deﬁnition 2.2 (Reﬁnement): Let Δ1 and Δ2 be two object
systems. Δ1 reﬁnes Δ2, written as Δ1 (cid:7)tr Δ2, if and only if
(cid:5)(cid:6)
trace(Δ1) ⊆ trace(Δ2).