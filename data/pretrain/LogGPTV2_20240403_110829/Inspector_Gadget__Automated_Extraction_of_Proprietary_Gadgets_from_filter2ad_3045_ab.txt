malware. The sink would be the creation of a new ﬁle. We
would then search backwards for all instructions related to
the creation of the ﬁle (including all network communication
and the decoding process), and extract all related code and
data. The collected taint information can be used to link
all invocations of library or system calls that provide data
that is propagated into the calls. These invocations, together
with intermediate code and necessary data regions, are then
extracted into the gadget.
In a third step, INSPECTOR provides a gadget player to
enable a security analyst to execute the extracted gadgets.
This program can be used to re-invoke the behavior, and it
integrates the gadget into the running environment. Similar
to per-process virtual machines [14], the gadget player serves
as a thin layer between the gadget and the environment, pro-
viding dynamic data such as network input or ﬁle contents
to the gadget. Thus, we can reuse the extracted behavior and
execute speciﬁc tasks as if the complete malware binary is
being run. For example, the extracted gadget can be used
to contact the update server of a given malware sample,
and download and decode the newest version of the original
malicious code – without the need of executing the malware
binary. The gadget player also applies strict policies for ﬁles
the gadgets are allowed to access. It also has detailed logging
capabilities on calls to the environment and memory.
To ease the management of generated gadgets, we main-
tain a gadget repository, in which all extracted gadgets are
stored such that they can also be used later on.
III. AUTOMATED EXTRACTION OF ALGORITHMS
In this section, we present details on ﬁnding and extracting
behavior from running samples. First, we explain how we
perform detailed analysis that provides INSPECTOR with the
required log ﬁles, and allows a human analyst to select
behavior that she is interested in. Second, we discuss the
behavior extraction process. We use a running example
throughout the rest of the paper to illustrate the details of
our technique.
Figure 1.
Schematic overview of gadget extraction process: (1) Execute the binary in analysis environment, perform dynamic analysis including taint
tracking. (2) Extract gadget that represents speciﬁc behavior, intermediate code and additional data regions are extracted as well. (3) Gadgets can be
autonomously executed within gadget player to perform a speciﬁc task.
A. Running Example
To illustrate the inner working of INSPECTOR, we explain
the underlying concepts with the help of a running example,
and the following settings: The malware binary we wish
to analyze downloads a ﬁle from a static domain and a
static URL. Since the downloaded ﬁle is encrypted, the
malware ﬁrst needs to decode the binary. Once this is
ﬁnished, the downloaded ﬁle is executed. This is a popular
update mechanism, a task often encountered when analyzing
malware. We wish to extract from the given malware sample
a gadget that encapsulates all these tasks in a stand-alone
fashion. In later sections, we will extend this basic example
as needed.
B. Generating Activity Logs
INSPECTOR ﬁrst executes the malicious binary inside an
analysis environment in order to gain an initial overview of
the activities exhibited by the sample. Speciﬁcally, we use
ANUBIS, a tool that performs dynamic malware analysis
based on an instrumented processor emulator [15], [16].
The version of ANUBIS we use already implements some
advanced features such as taint analysis, and the recording
of all executed instructions [17]. We extended the tool to
meet our specic analysis needs.
Besides concealing malicious behavior inside a safe envi-
ronment, the analysis environment enables us to perform de-
tailed taint analysis during the execution run. ANUBIS marks
each byte returned by a system call with a unique label, and
then keeps track of how labels are propagated during the
program execution [12]. This enables us to observe how the
input and output of different calls are related, and we are
able to link individual computations. During the inversion
of gadgets (see Section V), this detailed taint analysis is
necessary to detect the interrelationship between all inputs of
an output. The collected taint information is stored together
with all arguments passed to and obtained from the operating
system via library, or system calls in the log ﬁles.
Note that we also keep track of all disassembled instruc-
tions executed by the program, as well as the instruction ﬂow
(i.e., the sequence in which blocks of code and API functions
are executed). These log ﬁles, which we call instruction
and ﬂow log, ease the later analysis of obfuscated malware.
More precisely, we are able to analyze packed, or self-
modifying binaries, reason about which conditional branches
were executed, and keep track of statically undecidable call
targets. To further aid the analysis process, we also record
all memory accesses by the program and generate memory
dumps of active pages during the program’s execution.
A human analyst can use the generated analysis report to
manually ﬁnd the behavior she is interested in. For example,
she may ask a question such as “What activity leads to
the creation of this speciﬁc ﬁle?” Once she has spotted an
interesting behavior in the analysis report, she can instruct
INSPECTOR to extract a gadget related to this activity. The
tool then analyzes all the collected log ﬁles and extracts
from them the corresponding algorithm. Besides this semi-
manual, guided extraction of gadgets, we also developed
two heuristics to automatically locate activity that is worth
investigating (see discussion in Section III-C2).
C. Selecting and Extracting Algorithms
As explained above, INSPECTOR can map a behavior
selected by an analyst to a position inside the ﬂow log
(i.e., we denote this location ﬂow position) of one of the
monitored processes. Typically, a behavior directly corre-
sponds to a system, or function call. However, it can also
map to a set of instructions matching certain criteria (e.g.,
decoding of encoded data, as discussed later on). This
Flow + Taint LogMemory LogBinary ExecutableInstruction LogAnalysis EnvironmentGadget Player111213DataData.bss Section / DataGadgetInternetInspector EnvironmentResultDataDataDataGadget RepositoryAnalysis Reportmapping is possible since we have all the relevant context
information, and can ﬁnd in the log ﬁles all activity related
to the speciﬁed behavior. In case manual help is needed,
INSPECTOR provides context information to the analyst in
order to help her select the relevant ﬂow. In the running
example of the HTTP download, the ﬂow position would be
a call to one of the ﬁle management functions provided by
Windows, such as WriteFile, or CreateFile.
Once we have identiﬁed the relevant ﬂow position, our
tool extracts a slice: It attempts to ﬁnd all necessary data
sources required to calculate the parameters passed to this
function call, and extracts them. This is implemented by
recursing on taint labels consumed by the API calls, as
well as searching the memory logs for instructions deﬁning
variables (i.e., memory locations) read by the function
invocation. We need to recursively identify all sources that
somehow inﬂuence the parameters of the ﬂow position since
these instructions are potentially relevant to the algorithm we
are about to analyze. We perform backward binary program
slicing to compute this closure: We need to make sure that,
during the extraction process, all relevant code and data is
included recursively. When INSPECTOR ﬁnds a point which
can be run in a self-contained fashion, this position is marked
as the entry point and analysis ends. At the end of the
process, the extracted code contains all information required
to execute the speciﬁc behavior at the ﬂow position in a
stand-alone way.
1) Forward Searching and Backward Slicing: In some
scenarios, the behavior selected by an analyst is not the
intended endpoint of a chain of actions. Consider the case
where the program downloads an encrypted list of URLs
that are used to trigger keylogging activity. Here, extracting
the download activity does not gain enough insight into the
sought URLs since we are interested in the decoded list of
URLs.
Thus, before extracting an algorithm, our tool allows the
analyst to also search forward from a given position in
the ﬂow log (i.e., the initial ﬂow position), ﬁltering for
function calls or instruction sequences that operate on data
provided by the selected behavior. The analyst then needs
to specify one or multiple function calls or blocks of code
as an endpoints where the search stops. The analyst can
also let INSPECTOR apply heuristics to determine the most
likely endpoints. From there, we then perform backward
slicing, and make sure that all relevant endpoints are also
included in the closure such that the extracted algorithm is
self-contained.
2) Heuristics for Detecting Endpoints: INSPECTOR uses
the following heuristics to detect endpoints of interesting
behavior. While calls to string comparison functions, or
execution of code containing string handling instructions
(such as rep scas) might not stand out particularly (or
even be invisible when statically linked into an application),
their occurrence is interesting when we perform forward
is an indication that
searching. This is because it
the
computations on the data that the instructions have touched
have ﬁnished. In the case of encoded URLs, different string
comparison functions might be used once the URLs have
been decoded. Our tool can point out such behavior where
data provided by the selected behavior is accessed. With
this, an analyst can reﬁne the selected ﬂow position from
the initial download to the point where the data is likely to
have been decoded.
In fact, to support this frequent scenario of data decoding,
INSPECTOR also provides the possibility to focus on data
that has been processed by a list of mathematical instructions
which indicate cryptographic activity [18]. Our empirical
results indicate that this heuristic can reliably detect generic
decoding functions, and select ﬂow positions used as a
starting point for the algorithm extraction.
3) Closure Analysis: In some situations, INSPECTOR can
decide to deliberately exclude certain dependencies from the
closure of extracted code based on two key observations.
First, we might simply not have all context information.
This is due to the fact that the default application of IN-
SPECTOR is to extract functionality from malicious binaries.
We do not perform any static code extraction from the
given sample, since this is, in general, a difﬁcult task in
the case of malware [1]–[3]. All analysis is based on log
ﬁles generated during the dynamic analysis run (i.e., we can
only reason about executed instructions and taken control
paths). Whenever the backward slicing algorithm encounters
a conditional jump whose alternative branch can redirect
execution into a block containing code not executed during
the dynamic analysis phase, the dependencies introduced
by the condition are not added to the closure. Instead, the
extracted algorithm is modiﬁed to include instructions that
set the condition bits to force the branch to take the path
that was observed during dynamic analysis.
Second, sometimes, a behavior is only triggered under
a certain condition. In our running example, for instance,
the update process might only occur on a special day of
the week. Unfortunately, we can only include the speciﬁc
behavior that we have seen during the dynamic analysis
phase. At the same time, once we see a speciﬁc behavior, we
wish to generate a gadget that always executes this behavior.
Thus, INSPECTOR applies the same technique as discussed
above to force the execution along a known path. We then
include only this path, and skip the others. As a positive side
effect, the program slicing is sometimes able to compute
smaller closures, as whole blocks of functionality can be
ignored during the extraction phase.
IV. GADGET PREPARATION AND REPLAY
In this section, we describe the process of encapsulating
an extracted behavior so that it can later be re-invoked.
Further, we introduce and outline the details of our system,
the gadget player, that can be used to execute the gadget.
A. Gadget Format and Relocation
The format in which INSPECTOR stores the gadget code
is a dynamically loadable library (DLL). This simpliﬁes
importing the behavior into the player for gadget execution
(see next section). There are a number of ways in which we
can bind and execute the gadget: On the one hand, we can
use LoadLibrary to dynamically load a gadget. On the
other hand, we can even statically link tools with the gadget.
To ensure that the gadget code runs in this relocatable
fashion, all references to absolute code addresses (e.g.,
absolute call targets) are rewritten to use relative addressing.
In contrast to static analysis, this step is simple as we know
the complete execution ﬂow of the extracted behavior.
While the library solves the problem of storing the gadget
code, memory locations are not as straightforward. Such
memory regions are typically statically allocated (i.e., the
program expects them to be at a certain address). However,
when re-executing the gadget, these memory locations might
already be occupied by the system that
is invoking the
gadget.
Therefore, before exporting the code segment, all
in-
structions are audited for static memory accesses: Using
the memory logs, we decide if an instruction accesses
a relocated memory area. If so,
the disassembly of the
instruction provides the immediate operands that might have
to be patched. More precisely, we modify operands which
are dereferenced directly or which are used as base-address
for a memory access. Thus, we patch all operands so that
they point to a location where we can ensure that the system
will be able to allocate the memory for the gadget. Likewise,
we parse the memory areas themselves for any static pointers
that might point to relocated memory areas, and patch these
appropriately.
As a last step, INSPECTOR extracts all static memory
areas into a data ﬁle. For each area, it stores where the
code will expect the data to be mapped and extracts the
content from the ANUBIS memory snapshots at the point in
execution where the extraction of the closure has ﬁnished.
This corresponds to the entry point of the gadget. Therefore,
when the gadget executes, all memory areas will contain
exactly the same values as during the recorded execution.
the gadget
includes all
Running Example: Using this slicing technique, IN-
SPECTOR is able to extract a self-contained code fragment
that performs the speciﬁc malware task. In our running
example,
to
calculating the URL of the ﬁle to be downloaded. Since
the ﬁle is downloaded via HTTP, calls to recv, or similar
functions related to network activity, are also included in the
gadget. Furthermore, all the instructions related to decoding
the downloaded content are also added.
instructions relevant
At the end of the extraction process, the gadget contains
all code and data related to actually performing the down-
load, decoding the content, and saving the result to the hard
disk. Note that we are not limited by function boundaries
(as in [10]).
B. Gadget Player
To reuse a previously recorded behavior, INSPECTOR
provides the so-called gadget player. The player’s main
functionality consists of three tasks: Memory management,
execution containment, and environment interface.