# Title: PATCHGEN: Towards Automated Patch Detection and Generation for 1-Day Vulnerabilities

## Authors
- Tianyue Luo, General Department, Institute of Software, Chinese Academy of Sciences, PI:EMAIL
- Chen Ni, General Department, Institute of Software, Chinese Academy of Sciences, PI:EMAIL
- Qing Han, General Department, Institute of Software, Chinese Academy of Sciences, PI:EMAIL
- Mutian Yang, General Department, Institute of Software, Chinese Academy of Sciences, PI:EMAIL
- Jingzheng Wu, General Department, State Key Laboratory of Computer Sciences, Institute of Software, Chinese Academy of Sciences, PI:EMAIL
- Yanjun Wu, General Department, State Key Laboratory of Computer Sciences, Institute of Software, Chinese Academy of Sciences, PI:EMAIL

## Abstract
A significant portion of source code in open-source systems, such as Linux, contains 1-day vulnerabilities. The `patch` command is used to apply patches to source code and provide feedback automatically. However, this operation can fail in two common scenarios:
1. The patch may be applied in the wrong location, requiring adjustment.
2. The patch may be applied repeatedly, necessitating a verification step.

To address these issues, we propose PatchGen, a system designed to quickly detect and generate patches for 1-day vulnerabilities in operating system (OS) distributions. Unlike previous work, PatchGen resolves the above error scenarios using a fast, syntax-based approach that scales to large and diverse code bases, regardless of the programming language. We implemented a prototype of PatchGen and evaluated it on Ubuntu Maverick/Oneiric, SourceForge C and C++ projects, and the Linux kernel source. Specifically, PatchGen detected 175 1-day vulnerabilities and generated 140 patches for the Linux Kernel in less than 10 minutes. All results were manually confirmed and tested in real systems.

## Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—Information flow controls

## Keywords
Patch, 1-Day Vulnerabilities, Automated Generation, Scalability

## 1. Introduction
In open-source systems like Linux, developers use the `patch` command to fix bugs. While the `patch` command can apply a patch and return feedback, it may not always succeed. Two common error scenarios are:
1. The patch is applied in the wrong location, requiring adjustment.
2. The patch is applied repeatedly, necessitating a verification step.

These scenarios are common and cannot be ignored, especially when multiple patches need to be applied simultaneously. This issue is more pronounced when the source code differs from the version the patch was originally intended for, particularly in customized systems based on open-source software. Batch patching poses two main challenges: determining whether the source code has the issues described by the patches and ensuring the patches are applied correctly. Additionally, the results must be easily comprehensible and user-friendly.

## 2. Design of PatchGen
PatchGen has two primary functionalities: detecting code segments that match patches in the database and identifying whether the patches should be applied, adjusting them if necessary. It requires no modification to the source code being analyzed. The following subsections describe the design for each functionality. Our method implements a four-step procedure to solve these problems, motivated by the goals of:
1. Focusing on unpatched code positions.
2. Scaling to large and diverse customized code bases.
3. Minimizing false detections.

### 2.1 Patch Extraction
PatchGen extracts information from the related source files, including original and patched code snippets and position identifiers. Comments are filtered out, and each code snippet is normalized by removing redundant whitespace, curly braces, and non-ASCII characters.

### 2.2 Source File Grouping
Based on the extracted information, PatchGen groups the source files and patches. Each group consists of a set of patches and a related source file. The same normalization process is applied to each source file.

### 2.3 Unpatched Code Checking
Using the grouped data, PatchGen performs a string-based detection to determine if the code is patched. The normalized source file is divided into strings based on the original code snippet, and an exact match is performed on each window. If a match is found, the code segment is flagged for further analysis.

### 2.4 Pruning False Positives
Code clones are common in large-scale software, and matched code segments may not be the expected vulnerability. PatchGen uses position information after the `@@` sign to reduce false positives. If the identifier after `@@` is found in the source file and the matched code segment is behind the identifier, reverse patch detection is performed using the patched code snippet. If no match is found, manual auditing is required.

### 2.5 Report Generation
PatchGen generates a report containing patch blocks, detected locations, and contextual code. This report helps analysts decide whether to apply the patches and adjust them for potential vulnerabilities.

## 3. Evaluation
We conducted a 10-version Linux Kernel experiment to test PatchGen. The system detected 1187 1-day vulnerabilities and generated 1187 corresponding patches. Figure 2 illustrates a hunk in CVE-2014-3153 and parts of its corresponding source code in the file `/kernel/futex.c` of Linux Kernel-3.13.0-24.47. There are two places where the patch can be applied: segment 1 and segment 2. Segment 1 does not need patching, but direct execution of the `patch` command would incorrectly fix segment 1. PatchGen correctly identifies and fixes segment 2.

## 4. Conclusion
PatchGen is a system for quickly generating patches for 1-day vulnerabilities in OS distributions. It uses a fast, syntax-based approach that scales to large and diverse code bases, minimizing false detections. PatchGen generated 1187 patches by analyzing over 2 billion lines of code, providing a realistic solution for developers to enhance the security of their code.

## 5. Acknowledgments
This work is supported by NSFC No.61303057 and Project No.2012ZX01039-004.

## 6. References
[1] J. Jang, A. Agrawal, and D. Brumley. Redebug: Finding unpatched code clones in entire OS distributions. In IEEE Symposium on Security and Privacy, SP 2012, 21-23 May 2012, San Francisco, California, USA, pages 48–62, 2012.

[2] E. Jürgens, F. Deissenboeck, B. Hummel, and S. Wagner. Do code clones matter? In 31st International Conference on Software Engineering, ICSE 2009, May 16-24, 2009, Vancouver, Canada, Proceedings, pages 485–495, 2009.

[3] Z. Li, S. Lu, S. Myagmar, and Y. Zhou. Cp-miner: Finding copy-paste and related bugs in large-scale software code. IEEE Trans. Software Eng., 32(3):176–192, 2006.

[4] T. Ohta, H. Murakami, H. Igaki, Y. Higo, and S. Kusumoto. Source code reuse evaluation by using real/potential copy and paste. In 9th IEEE International Workshop on Software Clones, IWSC 2015, Montreal, QC, Canada, March 6, 2015, pages 33–39, 2015.

[5] Z. Yin, M. Caesar, and Y. Zhou. Towards understanding bugs in open source router software. Computer Communication Review, 40(3):34–40, 2010.