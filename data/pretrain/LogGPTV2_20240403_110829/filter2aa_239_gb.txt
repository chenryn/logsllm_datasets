用DataGrid控件指定的数据上下文在带有CollectionViewSource的窗口资源中找到。该
集合视图源绑定到后面用后台代码指定的数据上下文上。这里设置的重要属性是
IsLiveSortingRequested，其值设置为true，会改变元素在用户界面上的顺序。用于排序的
属性是Position。位置变化时，项会实时重排序：
现在，只需要进入后台源代码中，找到设置数据上下文、动态改变实时值的代码段。
在主窗口的构造函数中，DataContext属性设置为LapRacerInfo类型的初始集合。接着一个
后台任务每隔3秒调用一次NextLap方法，用新位置修改UI中的值。后台任务使用了一个
异步的lambda表达式。实现代码可以改为从Web服务中获得实时数据（代码文件
LiveShaping/MainWindow.xaml.cs）：
    public partial class MainWindow : Window
    {
      private LapChart _lapChart = new LapChart();
      public MainWindow()
      {
        InitializeComponent();
        this.DataContext = _lapChart.GetLapInfo();
        Task.Run(async () =>
        {
          bool raceContinues = true;
          while (raceContinues)
          {
            await Task.Delay(3000);
            raceContinues = _lapChart.NextLap();
          }
        });
      }
    }
图34-30显示了赛手在第23圈时的应用程序，领头的赛手是开着法拉利的Fernando
Alonso。
图34-30
34.10 小结
本章介绍了WPF中对于业务应用程序非常重要的一些功能。讨论了控件的层次结
构，以及布局控件的不同选项。在清晰而方便地与数据交互操作方面，WPF的数据绑定
功能前进了一大步。可以把.NET类的任意属性绑定到WPF元素的属性上。绑定模式定义
了绑定的方向。可以绑定.NET对象和列表，定义数据模板，从而通过数据模板为.NET类
创建默认的外观。
命令绑定可以把处理程序的代码映射到菜单和工具栏上。还可以用WPF进行复制和
粘贴，因为这个技术的命令处理程序已经包含在TextBox控件中。本章还介绍了其他WPF
功能，例如使用DataGrid、CollectionViewSource进行排序和分组，所有这些功能也可以通
过实时成型来完成。
下一章讨论WPF的另一个方面：处理文档。
第35章
用WPF创建文档
本章要点
● 使用文本元素
● 创建流文档
● 创建固定的文档
● 创建XPS文档
● 打印文档
本章源代码下载地址（wrox.com）：
打开网页http://www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可
下载本章源代码。本章代码分为以下几个主要的示例文件：
● 显示字体
● 文本效果
● 表
● 流文档
● 创建XPS
● 打印
35.1 简介
创建文档是WPF的一个主要部分。System.Windows.Documents名称空间支持创建流文
档和固定文档。这个名称空间包含的元素可以利用类似于Word的方式创建流文档，也可
以创建WYSIWYG（所见即所得）固定文档。
流文档面向屏幕读取；文档的内容根据窗口的大小来排列，如果窗口重置了大小，文
档的流就会改变。固定文档主要用于打印和面向页面的内容，其内容总是按照相同的方式
排列。
本章讨论如何创建、打印流文档和固定文档，并涵盖System.Windows.Documents、
System.Windows.Xps和System.IO.Packaging名称空间。
35.2 文本元素
要构建文档的内容，需要文档元素。这些元素的基类是TextElement。这个类定义了
字体设置、前景和背景，以及文本效果的常见属性。TextElement是Block类和Inline类的基
类，这两个类的功能在后面的几节中介绍。
35.2.1 字体
文本的一个重要方面是文本的外观，即字体。通过TextElement，可以用FontWeight、
FontStyle、FontStretch、FontSize和FontFamily属性指定字体。
● FontWeight——预定义的FontWeight值由FontWeights类定义，这个类提供的值包括
UltraLight、Light、Medium、Normal、Bold、UltraBold和Heavy。
● FontStyle——FontStyle的值由FontStyles类定义，可以是Normal、Italic和Oblique。
● 
FontStretch——利用FontStretch可以指定字体相对于正常宽高比的拉伸程度。
FontStretch指定了预定义的拉伸率从50%（UltraCondensed）到200%
（UltraExpanded）。在这个范围之间的预定义值是ExtraCondensed（62.5%）、
Condensed（75%）、SemiCondensed（87.5%）、Normal（100%）、
SemiExpanded（112.5%）、Expanded（125%）以及ExtraExpanded（150%）。
● 
FontSize——FontSize是double类型，可以用于指定字体的大小，其单位与设备无
关，如英寸、厘米和点。
● FontFamily——利用FontFamily可以定义首选字体系列的名称，如Arial或Times New
Roman。使用这个属性可以指定一个字体系列名列表，这样，如果某个字体不可
用，就使用列表中的下一个字体（如果所选字体和备用字体都不可用，流文档就
使用默认的MessageFontFamily）。还可以从资源中引用字体系列，或者使用URI
引用服务器上的字体。对于固定的文档，不会出现字体不可用的情况，因为字体
是通过文档提供的。
为了了解不同字体的外观，下面的示例WPF应用程序包含一个列表框。该列表框为
列表中的每一项定义了一个ItemTemplate。这个模板使用4个TextBlock元素，这些元素的
FontFamily绑定到FontFamily对象的Source属性上。给不同的TextBlock元素设置
FontWeight和FontStyle（代码文件
DocumentsDemos/ShowFontsDemo/MainWindow.xaml）：
在代码隐藏中，数据上下文设置为System.Windows.Media.Font类的
SystemFontFamilies属性值，这会返回所有可用的字体（代码文件
DocumentsDemos/ShowFontsDemo/MainWindow.xaml.cs）：
    public partial class ShowFontsWindow: Window
    {
      public ShowFontsWindow()
      {
        InitializeComponent();
        this.DataContext = Fonts.SystemFontFamilies;
      }
    }
运行应用程序，会显示一个很长的列表，其中包含系统字体系列的斜体、黑体、
UltraBold和UltraLight样式，如图35-1所示。
图35-1
35.2.2 TextEffect
下面看看TextEffect，因为它也是所有文档元素共有的。TextEffect在名称空间
System.Windows.Media中定义，派生自基类Animatable，允许生成文本的动画效果。
TextEffect可以为裁剪区域、前景画笔和变换创建动画效果。利用PositionStart和
PositionCount属性可以指定在文本中应用动画的位置。
要应用文本效果，应设置Run元素的TextEffects属性。该属性内部指定的TextEffect元
素定义了前景和变换效果。对于前景，使用名为brush1的SolidColorBrush画笔，通过
ColorAnimation元素生成动画效果。转换使用名为scale1的ScaleTransformation，从两个
DoubleAnimation元素中制作动画效果（代码文件
DocumentsDemos/TextEffectsDemo/MainWindow.xaml）。
        cn|elements
运行应用程序，会看到大小和颜色的变化，如图35-2和图35-3所示。
图35-2
图35-3
35.2.3 内联
所有内联流内容元素的基类都是Inline。可以在流文档的段落中使用Inline元素。因为
在段落中，Inline元素可以一个跟着一个，所以Inline类提供了PreviousInline和NextInline属
性，从一个元素导航到另一个元素，也可以使用SiblingNextInlines获取所有同级内联元素
的集合。
前面用于输出一些文本的Run元素是一个Inline元素，它可输出格式化或非格式化的文
本，还有许多其他的Inline元素。Run元素后的换行可以用LineBreak元素获得。
Span元素派生自Inline类，它允许组合Inline元素。在Span的内容中只能包含Inline元
素。含义明确的Bold、Hyperlink、Italic和Underline类都派生自Span，因此允许Inline元素
和其中的内容具有相同的功能，但对这些元素的操作不同。下面的XAML代码说明了
Bold、Italic、Underline和LineBreak的用法，如图35-4所示（代码文件
DocumentsDemos/FlowDocumentsDemo/FlowDocument1. xaml）。
        Normal
        Bold
        Italic
        Underline
图35-4
AnchoredBlock是一个派生自Inline的抽象类，用于把Block元素锚定到流内容上。
Figure和Floater是派生自AnchoredBlock的具体类。因为这两个内联元素在涉及块时比较有
趣，所以本章后面讨论它们。
  注意： 添加到解决方案的流文档需要使用Visual Studio属性窗口设置为Build
Action ="Content"和Copy to Output Directory = "Copy if newer"，让它们可放在可执行文
件所在的目录中。
另一个映射到UI元素上的Inline元素是InlineUIContainer，它在前面的章节使用过。
InlineUIContainer允许给文档添加所有的UIElement对象（如按钮）。下面的代码段给文档
添加了一个InlineUIContainer，其中包含组合框、单选按钮和文本框元素，结果如图35-5
所示（代码文件DocumentsDemos/FlowDocumentsDemo/FlowDocument2.xaml）。
            cn|elements
图35-5
35.2.4 块
Block是块级元素的抽象基类。块可以把包含其中的元素组合到特定的视图上。所有
块通用的属性有PreviousBlock、NextBlock和SiblingBlocks，它们允许从一个块导航到下一
个块。在块开始之前设置BreakPageBefore换页符和BreakColumnBefore换行符。块还使用
BorderBrush和BorderThickness属性定义边框。
派生自Block的类有Paragraph、Section、List、Table和BlockUIContainer。