focused on the category of Recovery for Sporadic Activities in Runtime Phase (category 4), but 
it  is  also  to  some  extent  related  to  the  other  three  categories  because  sporadic  operations  on 
cloud are performed on cloud systems where there exists normal activities. The taxonomy also 
provides guidance for other researchers who work on different contexts of cloud recovery. 
2 
One  virtue  of  sporadic  operations  is  that  every  execution  of  an  operation  with  different 
applications (the data to the operation) performs the same set of steps (L. Wang, et al., 2010). 
Rolling  upgrade  (E.  T.  Roush,  2001),  for  example,  removes  one  instance  from  service  and 
replaces  it  with  an  upgraded  instance  regardless  of  the  application  being  upgraded.  This 
regularity allows the creation of the process model of a sporadic operation (X. Xu, et al., 2014). 
With the process model of a sporadic operation, we are able to know the workflow, the purpose 
and  the  functionalities  of  the  sporadic  operation,  and  we  are  also  able  to  know  the  contextual 
information for each operational step of the sporadic operation, i.e. what each operational step is 
about. We are interested in recovering from cloud infrastructure level failures that occur during 
correctly specified sporadic operations. These failures are not because of incorrect specifications 
(e.g.  incorrect  configurations  or  incorrect  operation  workflows)  but  are  because  of  the 
uncertainty  and  highly  variable  performance  and  availability  of  operational activities  executed 
in the cloud (Q. Lu, et al., 2013) or from race conditions caused by simultaneous manipulations 
on the cloud resources required by the sporadic operation (L. Bass, I. Weber and L. Zhu, 2015). 
The  aim  of  my  PhD  research  is  to  propose  a  non-intrusive  recovery  methodology  which  is 
generalizable for different types of sporadic operations on  cloud. The recovery method is non-
intrusive  and  it  does  not  need  to  change  any  of  the  source  code  of  the  sporadic  operations.  It 
relies on runtime logs generated to detect failures and recover from them. It is generalizable to 
be  able  to  cater  for  recovery  for  different  types  of  sporadic  operations  on  cloud.  In  order  to 
propose  this  recovery  methodology,  we  first  formulate  eight  recovery  requirements  for 
performing  non-intrusive  operational  recovery  for  sporadic  operations  on  cloud,  based  on  the 
literature  review.  The  eight  recovery  requirements  are:  1)  recovery  should  be  performed  at 
runtime; 2) recovery should satisfy RTO (Recovery Time Objective); 3) recovery should reduce 
negative  impact  on  the  cloud  system;  4)  recovery  should  reduce  monetary  cost;  5)  recovery 
should be able to recover from errors without known causes; 6) recovery should be able to deal 
with false positives of error detection; 7) recovery should be able to recover for recovery itself; 
8)  recovery  should  be  generalizable  to  different  sporadic  operations  on  cloud.  The  proposed 
recovery method is able to satisfy all the recovery requirements. 
The  main  outcome  of  my  PhD  research  is  a  novel  and  innovative  non-intrusive  recovery 
methodology  called  POD-Recovery  to  recover  from  the  errors  and  failures  that  occur  during 
sporadic  operations  on  cloud.  POD-Recovery  works  in  the  following  way:  first,  by  analysing 
and  modelling  a  sporadic  operation  on  cloud  as  a  process  (which  is  able  to  provide  the 
workflow, the purpose and the functionalities of the sporadic operation as well as the contextual 
information of each operational step), it determines the unified resource space which means the 
resource  types  required  and  manipulated  by  the  sporadic  operation  on  cloud,  and  for  all  the 
3 
operational  steps  it  generates  the  expected  resource  state  templates  which  are  the  abstraction 
level  of  cloud  resource  states.  Then  it  manually  determines  the  recovery  points  inside  the 
operational  process  based  on  the  recovery  points  determination  criteria  proposed  by  us. 
Recovery  points  refer  to  the  positions  inside  a  sporadic  operation  where  error  detection  and 
recovery should be performed. By determining the recovery points of the sporadic operation on 
cloud, the whole operational process is divided into several sections and each section contains 
one  or  more  operational  steps.  The  main  criterion  used  for  recovery  points  determination  is 
Recovery  Actions  Identifiable,  which  refers  to  the  rule  that  there  exists  at  least  one  recovery 
action  for  each  determined  section  of  the  whole  operational  process.  Then  some  adjacent 
sections  with  relatively  low  failure  rates  are  combined  together  to  form  new  sections.  Such 
combinations  are  made  according  to  the  failure  rates  of  the  original  sections,  which  are 
determined by looking at cloud APIs failure probabilities from the previous empirical study on 
cloud APIs. Second, recovery will be triggered if there are errors detected after a recovery point 
by  using  an  existing  error  detection  service  called  POD-Diagnosis  (X.  Xu,  et  al.,  2014).  In 
POD-Recovery, there are eight recovery patterns proposed: 1) Compensated Undo & Redo; 2) 
Compensated  Undo  &  Alternative;  3)  Rewind  &  Replay;  4)  Rewind  &Alternative;  5) 
Reparation; 6) Direct Redo; 7) Direct Alternative; 8) Farther Undo & Redo. First, the applicable 
recovery  patterns  are  determined  by  using  the  state  reachability  checking  mechanism,  the 
alternative  existence  checking  mechanism  and  the  Idempotence  checking  mechanism.  Then 
POD-Recovery  employs  an  existing  AI  (artificial  intelligence)  planning  technique  to 
automatically  generate  recovery  actions  for  all  the  applicable  recovery  patterns.  Next,  the 
generated applicable recovery actions are evaluated using the recovery evaluation metrics. The 
recovery evaluation metrics are: 1) Recovery Time; 2) Recovery Cost and 3) Recovery Impact. 
Recovery  Time  means  the  time  for  a  sporadic  operation  to  recover  from  an  error  state  to  a 
correct  state,  Recovery  Cost  means the  monetary  cost  incurred by  all  the  cloud API  functions 
included in a recovery action, and Recovery Impact means the negative performance impact of 
recovery  on  the  cloud  system  being  operated  on  during  the  period  of  performing  recovery. 
Finally, the acceptable recovery actions will be selected based on the recovery actions selection 
and  optimization  mechanisms.  For  recovery  actions  selection,  we  proposed  two  selection  and 
optimization mechanisms, one is the user-constraints based selection mechanism and the other 
one is the Pareto set search based selection mechanism. Once the recovery action is selected, it 
is mapped into relevant cloud API functions for execution. 
POD-Recovery  is  implemented  as  a  web  service,  which  is  triggered  by  our  error  detection 
service called POD-Diagnosis. Such a type of cooperation between these two services embodies 
the design principles of service-oriented architecture (SOA) and improves the maintainability of 
the recovery service as well as the error detection service.  
4 
To evaluate POD-Recovery, we used five representative types of sporadic operations on cloud 
and  they  are:  1)  the  Rolling  Upgrade  operation;  2)  the  Installation  operation;  3)  the  Scale-up 
operation; 4) the Scale-down operation; 5) the Migration operation. For each sporadic operation, 
the recovery  points inside it  are first  determined. Then,  for each  recovery  point  we  inject  real 
and  representative  faults  which are determined  based on  our industry  interviews,  and  then the 
failures  are  detected  by  our  error  detection  service.  Next,  the  failures  are  recovered  from  by 
POD-Recovery  which  selects  the  acceptable  recovery  actions  for  execution. The  experimental 
results  show  that  POD-Recovery  is  able  to  recover  from  operational  errors  and  failures  while 
satisfying  all  the  recovery  requirements  and  it  improves  on  previous  recovery  strategies  for 
cloud operations in terms of the capability of satisfying the recovery requirements. Compared to 
POD-Recovery, other existing recovery strategies for cloud operations are only able to satisfy a 
small subset of the recovery requirements. For example, the exception handling mechanism for 
cloud operations can only satisfy the recovery requirement of runtime recovery and the recovery 
requirement of satisfying RTO (Recovery Time Objective). 
1.1.3  Research Contributions 
The research contributions of this thesis are as follows: 1) We propose and evaluate a novel and 
generalizable non-intrusive recovery method for sporadic operations on cloud. We provide a full 
discussion of the requirements of recovery and demonstrate how our recovery method is able to 
fulfil  all  the  recovery  requirements.  Essential  to  our  methodology  are  applicable  recovery 
patterns  filtering,  automation  of  recovery  actions  generation  and  selection  of  acceptable 
recovery actions using the three recovery evaluation metrics. 2) We propose a state management 
framework  for  operational  recovery  on  cloud  consisting  of  two  components:  resource  space 
determination  and  expected  resource  states  generation  for  each  operational  step.  3)  We 
demonstrate the  feasibility of  applying  AI-Planning  techniques  on  generating  recovery  actions 
for  sporadic  operations  on  cloud.  4)  We  propose  two  recovery  actions  selection  and 
optimization mechanisms to solve the problem of acceptable recovery actions selection based on 
three  recovery  actions  evaluation  metrics,  and  we  illustrate  how  to  calculate  these  metrics.  5) 
We  show  how  to  make  a  systematic  experimental  evaluation  design  to  evaluate  our  recovery 
methodology properly. 
1.1.4  Thesis Structure 
The structure of the thesis is organized as follows:  
Section  1.2  provides  the  background  of  my  PhD  research.  Section  1.2.1  provides  some 
fundamental  knowledge  of  cloud  computing;  section  1.2.2  introduces  sporadic  operations  on 
5 
cloud; section 1.2.3 discusses failures in sporadic operations on cloud; section 1.2.4 illustrates 
failure detection and diagnosis mechanisms for sporadic operations on cloud.  
Chapter  2  provides  the  literature  review.  Section  2.1  provides  the  basic  concepts  and  theories 
involved  in  the  literature  review;  section  2.2  provides  the  details  of  eleven  existing  recovery 
methods for cloud; section 2.3 provides the taxonomy of existing cloud recovery strategies. 
Chapter 3 discusses the details of research problem definition. Section 3.1 provides a motivating 
example;  section  3.2  discusses  the  comparison  between  non-intrusive  recovery  and  intrusive 
recovery;  section  3.3  defines  the  research  goals;  section  3.4  defines  the  research  questions; 
section  3.5  provides  the  requirements  for  non-intrusive  recovery  for  sporadic  operations  on 
cloud; section 3.6 defines the research challenges.  
Chapter 4 provides the overview of the proposed recovery framework. 
Chapter  5  provides  the  details  of  the  recovery-oriented  analysis  in  the  proposed  recovery 
framework.  Section  5.1  provides  the  details  of  modelling  operations  as  processes;  section  5.2 
provides  the  criteria  for  determining  recovery  points  inside  a  sporadic  operation  on  cloud; 
section 5.3 shows how to determine recovery points inside a sporadic operation on cloud. 
Chapter 6 illustrates the resource state management framework of POD-Recovery. Section 6.1 
illustrates the resource space determination mechanism; section 6.2 illustrates the resource state 
capturing  mechanism;  section  6.3  illustrates  the  mechanism  of  generating  expected  resource 
state templates; section 6.4 discusses how to populate missing values in expected resource state 
templates. 
Chapter 7 illustrates the recovery actions generation and selection framework of POD-Recovery. 
Section 7.1 discusses how to handle false positives from the error detection service; section 7.2 
provides the details of the eight recovery patterns; section 7.3 shows the mechanism of filtering 
applicable  recovery  patterns;  section  7.4  explains  how  to  generate  recovery  actions 
automatically;  section  7.5  provides  recovery  actions  evaluation  metrics  and  illustrates  how  to 
calculate them; section 7.6 discusses the obtained list of recovery actions candidates; section 7.7 
provides the explanation of two recovery actions selection mechanisms; section 7.8 shows how 
to map the recovery actions into executable code. 
Chapter  8  provides  the  details  of  experimental evaluation.  Section  8.1 provides the  evaluation 
details  for  the  rolling  upgrade  operation;  section  8.2  provides  the  evaluation  details  for  the 
installation  operation;  section  8.3  provides  the  evaluation  details  for  the  scale-up  operation; 
section 8.4 provides the evaluation details for the scale-down operation; section 8.5 provides the 
evaluation details for the migration operation; section 8.6 provides the comparison among POD-
6 
Recovery  and  other  existing  recovery  methods  for  cloud  operations;  section  8.7  provides  the 
summary and discussion about the experimental evaluation; section 8.8 discusses the threats to 
validity in the experimental evaluation. 
Chapter  9  provides  the  conclusion  of  the  thesis.  Section  9.1  provides  the  contributions  of  the 
thesis;  section  9.2  discusses  the  implications  of  the  proposed  recovery  method;  section  9.3 
discusses  the  limitations  of  POD-Recovery;  section  9.4  provides  the  directions  for  our  future 
research. 
1.2  Research Background 
This section first presents some fundamental knowledge of cloud computing. Then it describes 
sporadic operations on cloud, discusses failures and errors that may occur in sporadic operations, 
and illustrates an existing failure detection and diagnosis framework for cloud operations. 
1.2.1  Fundamentals of Cloud Computing 
Cloud  computing  is  a  kind  of  Internet-based  computing  that  provides  shared  processing 
resources and data to computers and other devices on demand (AWS, 2016). It is a model for 
enabling ubiquitous access to a shared pool of configurable computing resources (e.g., networks, 
servers, storage, applications and services), which can be rapidly provisioned and released with 
minimal management effort (Q. F. Hassan, 2011). Cloud computing solutions provide users and 
enterprises with various capabilities to store and process their data in third-party datacentres (M. 
Haghighat, et al., 2015). It relies on sharing of resources to achieve coherence and economy of 
scale, similar to a utility (like the  electricity grid) over a network (Q. F. Hassan, 2011). Cloud 
computing allows companies to avoid upfront infrastructure costs and focus on the projects that 
differentiate their businesses instead of on infrastructure (AWS, 2016). Cloud computing allows 
enterprises to get their applications up and running faster, with improved manageability and less 
maintenance,  and  enables  IT  to  more  rapidly  adjust  resources  to  meet  fluctuating  and 
unpredictable business demand (R. Baburajan, 2011; K. Oestreich, 2010).  
Nowadays, cloud computing is becoming increasingly popular. The availability of high-capacity 
networks,  low-cost  computers  and  storage  devices  as  well  as  the  widespread  adoption  of 
hardware virtualization, service-oriented architecture, and autonomic and utility computing have 
led to a growth in cloud computing (I. Whadcock, 2009; R. van der Meulen, 2008). Companies 
can scale up as computing needs increase and then scale down again as demands decrease. With 
its  “on-demand”  nature  (T.  Wood,  et  al.,  2010),  datacentres  and  cloud  applications  can  be 
conveniently  created  and  manipulated  by  cloud  operators.  Meanwhile,  its  “pay  as  you  go” 
pricing model brings huge economic benefits to cloud  consumers and  customers (T. Wood, et 
7 
al.,  2010).  Cloud  computing  has  become  a  highly  demanded  service  or  utility  due  to  the 
advantages  of  high  computing  power,  cheap  cost  of  services,  high  performance,  scalability, 
accessibility as well as availability. Some cloud vendors are experiencing a growth rate of 50% 
per  year (FSN,  2013),  but being  still  in  a  stage  of infancy,  cloud computing  has  some  pitfalls 
that need to be addressed to make cloud computing services more reliable and user friendly (R. 
Khan & A. Mehmood, 2013). 
Service-oriented  architecture  advocates  "everything  as  a  service".  Cloud  computing  providers 
offer their "services" according to three different models: 1) Infrastructure as a Service (IaaS); 2) 
Platform  as  a  Service  (PaaS);  3)  Software  as  a  Service  (SaaS)  (R.  Buyya,  et  al.,  2010).  IaaS 
refers  to  online  services  that  abstract  the  user  from  the  details  of  infrastructure  like  physical 
computing resources, location, data partitioning, scaling, security, and backup, etc. A hypervisor, 
such as Xen, Oracle VirtualBox, Oracle VM, KVM, VMware ESX/ESXi, or Hyper-V, runs the 
virtual machines as guests. PaaS offers a development environment to application developers (R. 
Buyya,  et  al.,  2010).  In  PaaS  models,  cloud  providers  deliver  a  computing  platform,  typically 
including the operating system, the programming-language execution environment, the database, 
and  the  web  server.  Application  developers can  develop  and  run their  software solutions  on a 
cloud  platform  without  the  cost  and  complexity  of  buying  and  managing  the  underlying 
hardware and software layers (R. Buyya, et al., 2010). In the SaaS model, users gain access to 
software  applications  and  databases,  and  cloud  providers  manage  the  infrastructure  and 
platforms that run the applications. Cloud providers install and operate software applications in 
the  cloud  and  cloud  users access  the  software  applications  from  cloud  clients.  Cloud  users  do 
not  manage  the  cloud  infrastructure  and  platforms  where  the  software  applications  run.  This 
eliminates  the  need  to  install  and  run  the  applications  on  cloud  users'  own  computers,  which 
simplifies maintenance and support (R. Buyya, et al., 2010). 
There are basically three types of clouds: 1) private cloud; 2) public cloud; 3) hybrid cloud (R. 
Buyya,  et  al.,  2010).  Private  cloud  is  the  cloud  infrastructure  operated  solely  for  a  single 
organization; it is either managed internally or managed by a third-party, and it is hosted either 
internally  or  externally  (R.  Buyya,  et  al.,  2010).  A  cloud  is  called  a  "public  cloud"  when  the 
services are rendered over a network that is open for public use (R. Buyya, et al., 2010). Hybrid 
cloud is a composition of two or more clouds (private or public) that remain distinct entities but 
are bound together, offering the benefits of multiple deployment models (R. Buyya, et al., 2010). 
1.2.2  Sporadic Operations on Cloud  
Several  types  of  cloud  consumer-initiated  operations  can  be  performed  on  cloud  applications, 
such  as  installation,  upgrade  and  reconfiguration,  and  these  operations  are  called  sporadic 
8 
operations since they are  performed  relatively less frequently than the normal  activities within 
the cloud applications such as the applications’ business workflows (L. Bass, I. Weber and L. 
Zhu,  2015).  Sporadic  operations  on  cloud are  also regarded  as  the  maintenance  operations  for 
cloud  applications  because  their  purpose  is  to  maintain  the  deployment  activities  of  cloud 
applications (such as installation and upgrade). Sporadic operations on cloud are different from 
other cloud operations in terms of the following aspects: first, sporadic operations are analysed 
from  cloud  consumers’  perspective  because  they  are  performed  by  cloud  consumers;  second, 
sporadic operations can either be manually performed or rely on certain third-party automation 
tools  to  be  performed;  third,  sporadic  operations  are  usually  independent  of  the  applications 
running in the cloud while other cloud operations (such as auto scaling and load balancing) are 
dependent  on  the  settings  of  cloud  applications.  An  example  of  consumer-initiated  sporadic 
operations on cloud applications is rolling upgrade (T. Dumitras and P. Narasimhan, 2009). In a 
rolling upgrade, a subset of instances currently running an old version of a software system are 
taken out of service and replaced with the same number of instances running a new version of 
the  software  system  (T.  Dumitras  and  P.  Narasimhan,  2009).  Rolling  upgrade  is  the  industry 
standard technique for moving a current existing system from an old version of the software to a 
new  version  of  the  software  (T.  Dumitras  and  P.  Narasimhan,  2009).  With  the  advent  of 
DevOps  and  with  the  practice  of  continuous  delivery  (J.  Humble  and  D.  Farley,  2010),  it  is 
commonplace  that  more  and  more  modern  IT  departments  and  organizations  make  frequent 
system builds and deployments on a daily basis (L. Bass, I. Weber and L. Zhu, 2015). In other 
words, sporadic operations  on cloud  are  being  performed  more  and  more  frequently  than  ever 
before  in  IT  industries  all  around  the  world.  This  is  largely  because  of  the  fact  that  the 
requirements from end users of cloud applications are becoming more complex and the releases 
of new versions of cloud applications need to be created more frequently. 
DevOps,  an  abbreviated  combination  of  Development  and  Operations,  “is  a  set  of  practices 
intended  to  reduce  the  time  between  committing  a  change  to  a  system  and  the  change  being 
placed  into  normal  production,  while  ensuring  high  quality”  (L.  Bass,  I.  Weber  and  L.  Zhu, 
2015). According to a report by IBM, DevOps has increased developer effectiveness from 58% 
to 80% (G. Hulme, 2015). Meanwhile, Gartner said that “by 2016, DevOps will evolve from a 
niche  to  a  mainstream  strategy  employed  by  25  percent  of  Global  2000  Organizations”  (J. 
Rivera and R. van der Meulen, 2015). The DevOps goals can be best achieved by using cloud 
computing,  including  practices  like  Infrastructure-as-Code,  i.e.,  by  implementing  sporadic 
operations  to  manage  virtual infrastructure through  tools  or  scripts  that  invoke  cloud  APIs  (L. 
Bass,  I.  Weber  and  L.  Zhu,  2015).  For  example,  the  rolling  upgrade  operation  can  be 
implemented  by  using  cloud  infrastructure  APIs  to  upgrade  a  cloud  application  without 
9 
impacting  its  service  availability,  by  iteratively  upgrading  a  small  number  of  its  virtual 
machines (cloud instances) at a time (Asgard, 2013). 
We  show  the  steps  of  the  rolling  upgrade  operation  in  below  Fig.  1.  The  operation  model  for 
rolling upgrade consists of seven steps. Steps 1 to 3 are sequential, and steps 4 to 7 are iterative. 
In steps 1 to 3, the new version of a launch configuration (which specifies the images, security 
groups  and  other  settings  of  newly  launched  cloud  instances)  is  created,  and  then  the  auto 
scaling  group  (which  enables  automatic  scale  in/scale  out  for  cloud  instances)  is  updated  to 
attach  to  this  new  version  of  launch  configuration.  In  steps  4  to  7,  the  old  cloud  instances 
(virtual machines)  are deregistered from the elastic load balancer and terminated, and the new 
cloud instances will be launched and registered with the elastic load balancer. Steps 4 to 7 are 
repeated until all the old cloud instances are upgraded (M. Fu, et al., 2014). 
Fig. 1.  Rolling Upgrade Operation. 
1.2.3  Failures in Sporadic Operations on Cloud  
Past  experiences  show  that  the  majority  of  cloud  application  failures  are  due  to  errors  in 
operations on cloud applications (R. J. Colville and G. Spafford, 2010). This is also proved by 
10 
Gartner  research  (R.  J.  Colville  and  G.  Spafford,  2010)  which  claims  that  majority  of  cloud 
errors  are  those  that  happen  during  cloud  operations  (R.  J.  Colville  and  G.  Spafford,  2010). 
Things are further deteriorated by the fact that sporadic operations on cloud are being performed 
even  more  frequently,  because  the  chance  for  the  sporadic  operations  to  fail  becomes  even 
greater when they are performed at a higher frequency. Executing sporadic operations on cloud 
more frequently also means that even unlikely errors and failures could occur and they also have 
to be considered when performing failure detection and recovery (M. Fu, et al., 2016; X. Xu, et 
al., 2015). If sporadic operations fail, the provisioning of the cloud applications being operated 
on  might  also  be  influenced.  Hence,  one  problem  behind  sporadic  operations  on  cloud  is  that 
they could fail at any time in an unpredictable manner (M. Fu, et al., 2016). 
There are several real life examples of failures during cloud sporadic operations (A. R. Hickey, 
2011; S. Lynn, 2012). One example was that a number of Intuit's hosted services for SMBs were 