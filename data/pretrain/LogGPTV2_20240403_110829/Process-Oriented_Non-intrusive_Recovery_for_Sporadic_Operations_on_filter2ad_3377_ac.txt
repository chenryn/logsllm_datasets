### Focused on the Category of Recovery for Sporadic Activities in the Runtime Phase (Category 4)

This research primarily focuses on the category of recovery for sporadic activities during the runtime phase (Category 4). However, it also intersects with the other three categories, as sporadic operations in cloud systems coexist with regular activities. The taxonomy provides valuable guidance for researchers working on various aspects of cloud recovery.

### Virtues and Characteristics of Sporadic Operations

One key advantage of sporadic operations is their consistency: each execution of an operation, regardless of the specific application or data, follows the same set of steps (L. Wang et al., 2010). For instance, a rolling upgrade (E. T. Roush, 2001) involves removing one instance from service and replacing it with an upgraded instance, irrespective of the application being upgraded. This regularity enables the creation of a process model for sporadic operations (X. Xu et al., 2014), which helps in understanding the workflow, purpose, and functionalities of the operation, as well as the contextual information for each step.

### Research Focus and Objectives

Our research aims to address cloud infrastructure-level failures that occur during correctly specified sporadic operations. These failures are not due to incorrect configurations or workflows but arise from the inherent uncertainty and variability in cloud performance and availability (Q. Lu et al., 2013) or from race conditions caused by simultaneous manipulations of cloud resources (L. Bass, I. Weber, and L. Zhu, 2015).

The primary goal of this PhD research is to propose a non-intrusive recovery methodology applicable to different types of sporadic operations in the cloud. This method does not require modifying the source code of the operations and relies on runtime logs for failure detection and recovery. To achieve this, we have formulated eight recovery requirements based on a literature review:

1. **Runtime Recovery**: Recovery should be performed at runtime.
2. **Recovery Time Objective (RTO)**: Recovery should meet the RTO.
3. **Minimize Negative Impact**: Recovery should reduce negative impact on the cloud system.
4. **Cost Efficiency**: Recovery should minimize monetary cost.
5. **Unidentified Error Handling**: Recovery should handle errors without known causes.
6. **False Positive Management**: Recovery should manage false positives in error detection.
7. **Self-Recovery**: Recovery should be able to recover from its own failures.
8. **Generalizability**: Recovery should be generalizable to different sporadic operations.

### POD-Recovery Methodology

The main outcome of this research is a novel and innovative non-intrusive recovery methodology called **POD-Recovery**. This method works as follows:

1. **Process Modeling**: By analyzing and modeling a sporadic operation as a process, we determine the unified resource space and generate expected resource state templates for each operational step.
2. **Recovery Points Determination**: We manually determine recovery points within the operational process based on criteria such as the identifiability of recovery actions.
3. **Error Detection and Recovery Triggering**: Errors are detected using an existing service called **POD-Diagnosis** (X. Xu et al., 2014), and recovery is triggered if errors are detected after a recovery point.
4. **Recovery Patterns and Actions**: Eight recovery patterns are proposed, and applicable patterns are determined using state reachability, alternative existence, and idempotence checking mechanisms. Recovery actions are generated using AI planning techniques and evaluated based on recovery time, cost, and impact.
5. **Selection and Execution**: Acceptable recovery actions are selected using user-constraints-based and Pareto set search-based mechanisms and then executed.

### Implementation and Evaluation

**POD-Recovery** is implemented as a web service, triggered by **POD-Diagnosis**, embodying the principles of service-oriented architecture (SOA) and enhancing maintainability. We evaluated **POD-Recovery** using five representative types of sporadic operations: Rolling Upgrade, Installation, Scale-up, Scale-down, and Migration. For each operation, recovery points were determined, and real faults were injected to test the recovery process. The results show that **POD-Recovery** effectively recovers from operational errors and failures while meeting all recovery requirements, outperforming existing recovery strategies.

### Research Contributions

1. **Novel Recovery Method**: A new, generalizable, non-intrusive recovery method for sporadic operations in the cloud, fulfilling all recovery requirements.
2. **State Management Framework**: A framework for managing resource states during operational recovery, including resource space determination and expected state generation.
3. **AI-Planning for Recovery Actions**: Demonstration of the feasibility of using AI planning techniques to generate recovery actions.
4. **Recovery Actions Selection Mechanisms**: Two mechanisms for selecting acceptable recovery actions based on evaluation metrics.
5. **Experimental Evaluation Design**: A systematic approach to evaluating the recovery methodology.

### Thesis Structure

- **Chapter 1**: Introduction
  - **Section 1.2**: Research Background
    - **1.2.1**: Fundamentals of Cloud Computing
    - **1.2.2**: Sporadic Operations on Cloud
    - **1.2.3**: Failures in Sporadic Operations
    - **1.2.4**: Failure Detection and Diagnosis
- **Chapter 2**: Literature Review
  - **2.1**: Basic Concepts and Theories
  - **2.2**: Existing Recovery Methods
  - **2.3**: Taxonomy of Cloud Recovery Strategies
- **Chapter 3**: Research Problem Definition
  - **3.1**: Motivating Example
  - **3.2**: Comparison of Non-Intrusive and Intrusive Recovery
  - **3.3**: Research Goals
  - **3.4**: Research Questions
  - **3.5**: Requirements for Non-Intrusive Recovery
  - **3.6**: Research Challenges
- **Chapter 4**: Overview of the Proposed Recovery Framework
- **Chapter 5**: Recovery-Oriented Analysis
  - **5.1**: Modelling Operations as Processes
  - **5.2**: Criteria for Determining Recovery Points
  - **5.3**: Determining Recovery Points
- **Chapter 6**: Resource State Management Framework
  - **6.1**: Resource Space Determination
  - **6.2**: Resource State Capturing
  - **6.3**: Generating Expected Resource State Templates
  - **6.4**: Populating Missing Values in Templates
- **Chapter 7**: Recovery Actions Generation and Selection
  - **7.1**: Handling False Positives
  - **7.2**: Recovery Patterns
  - **7.3**: Filtering Applicable Patterns
  - **7.4**: Generating Recovery Actions
  - **7.5**: Evaluation Metrics
  - **7.6**: Recovery Action Candidates
  - **7.7**: Selection Mechanisms
  - **7.8**: Mapping Actions to Code
- **Chapter 8**: Experimental Evaluation
  - **8.1**: Rolling Upgrade Operation
  - **8.2**: Installation Operation
  - **8.3**: Scale-Up Operation
  - **8.4**: Scale-Down Operation
  - **8.5**: Migration Operation
  - **8.6**: Comparison with Other Methods
  - **8.7**: Summary and Discussion
  - **8.8**: Threats to Validity
- **Chapter 9**: Conclusion
  - **9.1**: Contributions
  - **9.2**: Implications
  - **9.3**: Limitations
  - **9.4**: Future Research Directions

### Research Background

#### Fundamentals of Cloud Computing

Cloud computing is an Internet-based computing model that provides shared processing resources and data to computers and other devices on demand (AWS, 2016). It offers a shared pool of configurable computing resources, such as networks, servers, storage, applications, and services, which can be rapidly provisioned and released with minimal management effort (Q. F. Hassan, 2011). Cloud solutions enable users and enterprises to store and process data in third-party data centers, achieving coherence and economy of scale (M. Haghighat et al., 2015). Cloud computing allows companies to avoid upfront infrastructure costs and focus on core business projects (AWS, 2016). It enhances manageability, reduces maintenance, and enables IT to adjust resources to meet fluctuating demands (R. Baburajan, 2011; K. Oestreich, 2010).

#### Types of Cloud Services

- **Infrastructure as a Service (IaaS)**: Abstracts users from infrastructure details, providing virtualized computing resources.
- **Platform as a Service (PaaS)**: Offers a development environment, including operating systems, programming languages, databases, and web servers.
- **Software as a Service (SaaS)**: Provides access to software applications and databases, managed by the cloud provider.

#### Types of Clouds

- **Private Cloud**: Operated solely for a single organization, managed internally or by a third party.
- **Public Cloud**: Services rendered over a network open for public use.
- **Hybrid Cloud**: Composition of two or more clouds (private or public), offering multiple deployment models.

#### Sporadic Operations on Cloud

Sporadic operations, such as installation, upgrade, and reconfiguration, are less frequent than normal activities within cloud applications (L. Bass, I. Weber, and L. Zhu, 2015). These operations are initiated by cloud consumers and can be performed manually or through automation tools. They are independent of running applications and are essential for maintaining cloud deployments. An example is the rolling upgrade, where instances are iteratively updated to a new version (T. Dumitras and P. Narasimhan, 2009). With the advent of DevOps and continuous delivery, sporadic operations are becoming more frequent (J. Humble and D. Farley, 2010).

#### Failures in Sporadic Operations

Past experiences and research indicate that most cloud application failures are due to errors in operations (R. J. Colville and G. Spafford, 2010). As sporadic operations become more frequent, the likelihood of failures increases, necessitating robust failure detection and recovery mechanisms (M. Fu et al., 2016; X. Xu et al., 2015). Examples of such failures include issues with Intuit's hosted services for SMBs (A. R. Hickey, 2011; S. Lynn, 2012).