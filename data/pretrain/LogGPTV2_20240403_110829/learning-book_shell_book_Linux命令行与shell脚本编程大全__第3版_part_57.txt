### 当脚本test5.sh在后台模式下运行时

当脚本 `test5.sh` 在后台模式下运行时，我们输入了命令 `ls myprog*`。此时，脚本的输出、输入的命令以及命令的输出全都混杂在一起，导致难以区分和理解。为避免这种情况，建议将后台运行脚本的 `STDOUT` 和 `STDERR` 重定向到文件或其他位置。

---

### 运行多个后台作业

你可以在命令行提示符下同时启动多个后台作业。例如：

```sh
$ ./test6.sh &
[1] 3568
This is Test Script 1
$ ./test7.sh &
[2] 3570
This is Test Script 2
$ ./test8.sh &
[3] 3573
And...another Test script
$ ./test9.sh &
[4] 3576
Then.. there was one more test script
```

每次启动新作业时，Linux 系统都会为其分配一个新的作业号和进程 ID (PID)。通过 `ps` 命令可以查看所有正在运行的脚本状态：

```sh
$ ps
  PID TTY          TIME CMD
2431 pts/0    00:00:00 bash
3568 pts/0    00:00:00 test6.sh
3570 pts/0    00:00:00 test7.sh
3573 pts/0    00:00:00 test8.sh
3576 pts/0    00:00:00 test9.sh
3578 pts/0    00:00:00 ps
```

在终端会话中使用后台进程时需要小心。注意，在 `ps` 命令的输出中，每个后台进程都与当前终端会话（如 `pts/0`）相关联。如果终端会话退出，这些后台进程也会随之退出。

#### 注意事项
- 本章之前提到过，当你尝试退出终端会话且存在被停止的进程时，会出现警告信息。
- 如果使用了后台进程，只有某些终端仿真器会在你退出终端会话前提醒你还有后台作业在运行。
- 如果希望运行在后台模式的脚本在登出控制台后继续运行，需要借助其他手段。下一节将讨论如何实现这一点。

---

### 在非控制台下运行脚本

有时你希望在终端会话中启动一个 shell 脚本，并让其以后台模式一直运行到结束，即使你退出了终端会话。这可以通过 `nohup` 命令来实现。

`nohup` 命令用于运行另一个命令并阻断发送给该进程的所有 `SIGHUP` 信号。这样在退出终端会话时，进程不会退出。

`nohup` 命令的格式如下：

```sh
$ nohup ./test1.sh &
nohup: ignoring input and appending output to 'nohup.out'
[1] 1234
```

和普通后台进程一样，shell 会给命令分配一个作业号，Linux 系统会为其分配一个 PID 号。区别在于，使用 `nohup` 命令时，如果关闭会话，脚本会忽略终端会话发来的 `SIGHUP` 信号。

由于 `nohup` 命令解除了终端与进程的关联，进程不再与 `STDOUT` 和 `STDERR` 关联。为了保存命令产生的输出，`nohup` 命令会自动将 `STDOUT` 和 `STDERR` 的消息重定向到一个名为 `nohup.out` 的文件中。

#### 注意事项
- 如果使用 `nohup` 运行了多个命令，它们的输出会被追加到同一个 `nohup.out` 文件中。
- 当运行位于同一目录中的多个命令时要特别小心，因为所有输出都会被发送到同一个 `nohup.out` 文件中，可能会导致混淆。

查看 `nohup.out` 文件中的输出结果：

```sh
$ cat nohup.out
This is a test script
Loop 1
Loop 2
...
Loop 10
This is the end of the test script
```

---

### 作业控制

在本章前面部分，你已经了解了如何用组合键停止 shell 中正在运行的作业。在作业停止后，Linux 系统会让你选择是终止还是重启。你可以用 `kill` 命令终止该进程。要重启停止的进程，需要向其发送一个 `SIGCONT` 信号。

启动、停止、终止以及恢复作业的这些功能统称为作业控制。通过作业控制，你可以完全控制 shell 环境中所有进程的运行方式。本节将介绍用于查看和控制在 shell 中运行的作业的命令。

#### 查看作业

作业控制中的关键命令是 `jobs` 命令。`jobs` 命令允许查看 shell 当前正在处理的作业。

```sh
$ cat test10.sh
#!/bin/bash
# Test job control
count=1
while [ $count -le 10 ]; do
  echo "Loop #$count"
  sleep 10
  count=$((count + 1))
done
echo "End of script..."
```

可以从命令行中启动脚本，然后使用 `Ctrl+Z` 组合键来停止脚本。

```sh
$ ./test10.sh
Script Process ID: 1897
Loop #1
^Z
[1]+  Stopped                 ./test10.sh
```

使用 `nohup` 将另一个作业作为后台进程启动。出于简化的目的，脚本的输出被重定向到文件中，避免出现在屏幕上。

```sh
$ nohup ./test10.sh > test10.out &
[2] 1917
```

`jobs` 命令可以查看分配给 shell 的作业。`jobs` 命令会显示已停止或正在运行的作业及其作业号和使用的命令。

```sh
$ jobs
[1]   Stopped                 ./test10.sh
[2]-  Running                 nohup ./test10.sh > test10.out &
```

要查看作业的 PID，可以在 `jobs` 命令中加入 `-l` 选项。

```sh
$ jobs -l
[1]   1897 Stopped                 ./test10.sh
[2]-  1917 Running                 nohup ./test10.sh > test10.out &
```

`jobs` 命令支持一些不同的命令行参数，见表 16-2。

| 参数 | 描述 |
|------|------|
| `-l` | 列出进程的 PID 以及作业号 |
| `-n` | 只列出上次发出通知后改变了状态的作业 |
| `-p` | 只列出作业的 PID |
| `-r` | 只列出运行中的作业 |
| `-s` | 只列出已停止的作业 |

`jobs` 命令输出中的加号和减号表示默认作业。带加号的作业会被当做默认作业。在使用作业控制命令时，如果没有指定作业号，该作业会被当成操作对象。当前的默认作业完成处理后，带减号的作业成为下一个默认作业。

下面的例子说明了队列中的下一个作业在默认作业移除时是如何成为默认作业的。有 3 个独立的进程在后台被启动。`jobs` 命令显示出了这些进程、进程的 PID 及其状态。注意，默认进程（带有加号的那个）是最后启动的那个进程，也就是 3 号作业。

```sh
$ ./test10.sh > test10a.out &
[1] 1950
$ ./test10.sh > test10b.out &
[2] 1952
$ ./test10.sh > test10c.out &
[3] 1955
$ jobs -l
[1]   1950 Running                 ./test10.sh > test10a.out &
[2]-  1952 Running                 ./test10.sh > test10b.out &
[3]+  1955 Running                 ./test10.sh > test10c.out &
```

调用 `kill` 命令向默认进程发送了一个 `SIGHUP` 信号，终止了该作业。在接下来的 `jobs` 命令输出中，先前带有减号的作业成了现在的默认作业，减号也变成了加号。

```sh
$ kill 1955
[3]+  Terminated                 ./test10.sh > test10c.out
$ jobs -l
[1]   1950 Running                 ./test10.sh > test10a.out &
[2]+  1952 Running                 ./test10.sh > test10b.out &
$ kill 1952
[2]+  Terminated                 ./test10.sh > test10b.out
$ jobs -l
[1]+  1950 Running                 ./test10.sh > test10a.out &
```

尽管将一个后台作业更改为默认进程很有趣，但这并不意味着有用。下一节，你将学习在不用 PID 或作业号的情况下，使用命令和默认进程交互。

#### 重启停止的作业

在 Bash 作业控制中，可以将已停止的作业作为后台进程或前台进程重启。前台进程会接管你当前工作的终端，所以在使用该功能时要小心。

要以后台模式重启一个作业，可用 `bg` 命令加上作业号。

```sh
$ ./test11.sh
Loop #1
^Z
[1]+  Stopped                 ./test11.sh
$ bg 1
[1]+  ./test11.sh &
$ jobs
[1]+  Running                 ./test11.sh &
```

如果有多个作业，你需要在 `bg` 命令后加上作业号。

```sh
$ ./test11.sh
[1]+  Stopped                 ./test11.sh
$ ./test12.sh
[2]+  Stopped                 ./test12.sh
$ bg 2
[2]+  ./test12.sh &
$ jobs
[1]+  Stopped                 ./test11.sh
[2]-  Running                 ./test12.sh &
```

要以前台模式重启作业，可用带有作业号的 `fg` 命令。

```sh
$ fg 2
./test12.sh
This is the script's end..
```

由于作业是以前台模式运行的，直到该作业完成后，命令行界面的提示符才会出现。

---

### 调整谦让度

在多任务操作系统中（如 Linux），内核负责将 CPU 时间分配给系统上运行的每个进程。调度优先级（scheduling priority）是内核分配给进程的 CPU 时间（相对于其他进程）。在 Linux 系统中，由 shell 启动的所有进程的调度优先级默认都是相同的。

调度优先级是一个整数值，从 -20（最高优先级）到 +19（最低优先级）。默认情况下，Bash shell 以优先级 0 启动所有进程。

#### 记忆技巧
最低值 -20 是最高优先级，而最高值 19 是最低优先级，这很容易记混。只要记住那句俗语“好人难做”就行了。越是“好”或高的值，获得 CPU 时间的机会越低。

有时你可能想要改变一个 shell 脚本的优先级。不管是降低它的优先级（这样它就不会占用过多的处理能力），还是给予它更高的优先级（这样它就能获得更多的处理时间），都可以通过 `nice` 命令来实现。

#### `nice` 命令

`nice` 命令允许你设置命令启动时的调度优先级。要让命令以更低的优先级运行，只需用 `nice` 的 `-n` 选项来指定新的优先级级别。

```sh
$ nice -n 10 ./test4.sh > test4.out &
[1] 4973
$ ps -p 4973 -o pid,ppid,ni,cmd
  PID  PPID  NI CMD
 4973  4721  10 /bin/bash ./test4.sh
```

注意，必须将 `nice` 命令和要启动的命令放在同一行中。`ps` 命令的输出验证了谦让度值（NI 列）已经被调整到了 10。

`nice` 命令会让脚本以更低的优先级运行。但如果想提高某个命令的优先级，可能会遇到权限问题。

```sh
$ nice -n -10 ./test4.sh > test4.out &
nice: cannot set niceness: Permission denied
```

在这种情况下，你需要有足够的权限才能提高优先级。