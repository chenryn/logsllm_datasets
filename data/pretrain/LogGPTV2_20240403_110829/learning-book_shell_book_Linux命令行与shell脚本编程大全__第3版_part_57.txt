当脚本test5.sh运行在后台模式时，我们输入了命令1smyprog*。脚本输出、输人的命令以
及命令输出全都混在了一起。真是让人头昏脑胀！最好是将后台运行的脚本的STDOUT和STDERR
---
## Page 355
340
第16章控制脚本
进行重定向，避免这种杂乱的输出。
16.2.2运行多个后台作业
可以在命令行提示符下同时启动多个后台作业。
./test6.sh &
[1]3568
$ This is Test Script 1
./test7.sh &
$ This is Test Script 2
[2] 3570
./teste.sh&
[3]3573
$ And...another Test script
$./test9.sh &
$ Then.. there vas one more test script
[4]  3576
每次启动新作业时，Linux系统都会为其分配一个新的作业号和PID。通过ps命令，可以看到
所有脚本处于运行状态。
8d 
2431 pts/0
AIL CId
00: 00: 00 bash
TIME CMD
3568 pts/0
3570 pts/0
00:00:00 test6.sh
3573 pts/0
00:00:00 test8.sh
00 : 00 : 00 test7,sh
3574 pts/0
daa[α 00100100
3575 pts/0
00:00:00 test9 eh
00:00:00 s1eep
3576 pts/0
3577 pts/0
00:00:00s1eep
0/2d 645
3578 pts/0
00:00:00 s1eep
00: 00:00 ps
在终端会话中使用后台进程时一定要小心。注意，在ps命令的输出中，每一个后台进程都和
终端会话（pts/0）终端联系在一起。如果终端会话退出，那么后台进程也会随之退出。
说明本章之前曾经提到过当你妥退出终端会话时，妥是存在被停止的进程，会出现警告信息。
但如果使用了后台进程，只有某些终端仿真器会在你退出终端会话前提醒你还有后台作
业在运行。
如果希望运行在后台模式的脚本在登出控制台后能够继续运行，需要借助于别的手段。下一
---
## Page 356
16.3在非控制台下运行脚本
341
节中我们会讨论怎么来实现。
16.3在非控制台下运行脚本
16
有时你会想在终端会话中启动shell脚本，然后让脚本一直以后台模式运行到结束，即使你退
出了终端会话。这可以用nohup命令来实现。
nohup命令运行了另外一个命令来阻断所有发送给该进程的sIGHUP信号。这会在退出终端会
话时阻止进程退出。
nohup命令的格式如下：
S nohup ./test1.ah &
,no·dntou, o3 ndno burpuedde pue andiu buT.xoubT :dnuou $
958ε [t]
和普通后台进程一样，shell会给命令分配一个作业号，Linux系统会为其分配一个PID号。区
别在于，当你使用nohup命令时，如果关闭该会话，脚本会忽略终端会话发过来的SIGHUP信号。
由于nohup命令会解除终端与进程的关联，进程也就不再同sTDOUT和sTDERR联系在一起。
为了保存该命令产生的输出，nohup命令会自动将sTDOUT和sTDERR的消息重定向到一个名为
nohup.out的文件中。
说明如果使用nohup运行了另一个命令，该命令的输出会被追加到已有的nohup.out文件中。当
运行位于同一个目录中的多个命令时一定要当心，因为所有的输出都会被发遥到同一个
nohup.out文件中，结果会让人摸不清头脑。
nohup.out文件包含了通常会发送到终端显示器上的所有输出。在进程完成运行后，你可以查
看nohup.out文件中的输出结果。
 cat nohup.out
m11B
 is a test script
Loop 2
Loop
Loop
Loop 4
3
Loop
5
Loop 6
Loop 7
Loop 8
Loop 9
This is the end of the test script
Loop
10
输出会出现在nohup.out文件中，就跟进程在命令行下运行时一样。
---
## Page 357
342
第16章控制脚本
16.4作业控制
在本章的前面部分，你已经知道了如何用组合键停止shell中正在运行的作业。在作业停止后，
Linux系统会让你选择是终止还是重启。你可以用ki11命令终止该进程。要重启停止的进程需要
向其发送一个SIGCONT信号。
启动、停止、终止以及恢复作业的这些功能统称为作业控制。通过作业控制，就能完全控制
shell环境中所有进程的运行方式了。本节将介绍用于查看和控制在shell中运行的作业的命令。
16.4.1查看作业
作业控制中的关键命令是jobs命令。jobs命令允许查看shell当前正在处理的作业。
S cat test10.sh
1/bin/bash
 Test job control
[o 9↑- qumoos   oTqR
count=1
dlo
aumoos door. oqe
[ + qumoos 1s=quno2
sleep 10
Gone
echo *End of script...*
#
脚本用ss变量来显示Linux系统分配给该脚本的PID，然后进人循环，每次选代都休眠10秒。
可以从命令行中启动脚本，然后使用Ctrl+Z组合键来停止脚本。
Script Proceaa ID: 1897
S./test10.sh
Loop #2
Loop #1
peddoas +[↑]
^Z
- /test10,sh
还是使用同样的脚本，利用s将另外一个作业作为后台进程启动。出于简化的目的，脚本的
输出被重定向到文件中，避免出现在屏幕上。
$./test10.sh > test10.out &
[2] 1917
jobs命令可以查看分配给shell的作业。jobs命令会显示这两个已停止运行中的作业，以及
它们的作业号和作业中使用的命令。
---
## Page 358
16.4作业控制
343
Sjobs
peddoag+[t]
./teatlo,ah > testl0,out &
./testlo,sh
[2] -
Running
要想查看作业的PID，可以在jobs命令中加人-1选项（小写的L）。
16
Sjobs -1
peddoas .6st+[t]
1917 RunnIng
./teatlo,ah > testl0,out &
. /testl0,sh
[2] -
jobs命令使用一些不同的命令行参数，见表16-2。
表16-2jobs命令参数
数
描述
-1
列出进程的PID以及作业号
-n
只列出上次动el发出的通知后改变了状态的作业
-p
只列出作业的PID
-r
只列出运行中的作业
-.8
只列出已停止的作业
你可能注意到了jobs命令输出中的加号和减号。带加号的作业会被当做默认作业。在使用
作业控制命令时，如果未在命令行指定任何作业号，该作业会被当成作业控制命令的操作对象。
当前的默认作业完成处理后，带减号的作业成为下一个默认作业。任何时候都只有一个带加
号的作业和一个带减号的作业，不管shell中有多少个正在运行的作业。
下面例子说明了队列中的下一个作业在默认作业移除时是如何成为默认作业的。有3个独立
的进程在后台被启动。jobs命令显示出了这些进程、进程的PID及其状态。注意，默认进程（带
有加号的那个）是最后启动的那个进程，也就是3号作业。
S./test10.sh>test10a.out &
./test10.sh>test10b.out &
[1] 1950
./test10.sh>test10c.out 
[2]  1952
[3] 1955
S jobs -1
[1]
1950 Running
[2]-
1952 Running
/test10,sh > test10b.out &
/testl0,sh > test10a,out &
[3]
6uruuns 556T
./test10,sh > test10c,out &
我们调用了ki11命令向默认进程发送了一个SIGHUP信号，终止了该作业。在接下来的jobs
命令输出中，先前带有减号的作业成了现在的默认作业，减号也变成了加号。
Ski11 1955
[3] +  Terminated
/testl0.sh > testl0c,out
---
## Page 359
344
第16章控制脚本
5obe -1
1950 Runnlng
[2]+ 1952 Running
- /test10.sh > test10a.out &
-/teatl0.sh > testl0b.out &
$ ki11 1952
pegeuues+[]
 /test10.sh > testl0b,out
[1]+  1950 Running
$ jobe -1
-/testl0.sh > testl0a.out &
尽管将一个后台作业更改为默认进程很有趣，但这并不意味着有用。下一节，你将学习在不
用PID或作业号的情况下，使用命令和默认进程交互。
16.4.2重启停止的作业
在bash作业控制中，可以将已停止的作业作为后台进程或前台进程重启。前台进程会接管你
当前工作的终端，所以在使用该功能时要小心了。
要以后台模式重启一个作业，可用bg命令加上作业号。
./test11.sh
peddoas +[1]
-/test11.sh
$
[1] + -/test11,sh &
$ jobe
$
[1] + Runnlng
 /testll,sh &
因为该作业是默认作业（从加号可以看出），只需要使用bg命令就可以将其以后台模式重启。
注意，当作业被转人后台模式时，并不会列出其PID。
如果有多个作业，你得在bg命令后加上作业号。
$./test11.sh
[1]+Stopped
/test11,sh
S./test12.sh
[2]+Stopped
 /test12,sh
$ bg 2
[2] + -/teat12,sh &
$jobs
[2] -
[L] +
Runn1ng
Stopped
-/test12,ah s
 /test11,sh
命令bg2用于将第二个作业置于后台模式。注意，当使用jobs命令时，它列出了作业及其
---
## Page 360
16.5调整谦让度
345
状态，即便是默认作业当前并未处于后台模式。
要以前台模式重启作业，可用带有作业号的fg命令。
S fg 2
This is the script's end..
. /test12,sh
16
由于作业是以前台模式运行的，直到该作业完成后，命令行界面的提示符才会出现
16.5调整谦让度
在多任务操作系统中（Linux就是），内核负责将CPU时间分配给系统上运行的每个进程。调
度优先级（scheduling priority）是内核分配给进程的CPU时间（相对于其他进程）。在Linux系统
中，由shell启动的所有进程的调度优先级默认都是相同的。
调度优先级是个整数值，从20（最高优先级）到+19（最低优先级）。默认情况下，bash shell
以优先级0来启动所有进程。
窍门最低值-20是最高优先级，而最高值19是最低优先级，这太容易记混了。只要记住那句俗
语“好人难做”就行了。越是“好”或高的值，获得CPU时间的机会越低。
有时你想要改变一个shell脚本的优先级。不管是降低它的优先级（这样它就不会从占用其他
进程过多的处理能力），还是给予它更高的优先级（这样它就能获得更多的处理时间），你都可以
通过nice命令做到。
16.5.1nice命令
nice命令允许你设置命令启动时的调度优先级。要让命令以更低的优先级运行，只要用nice
的-n命令行来指定新的优先级级别。
S nice -n 10 ./test4.ah > test4.out &
[1] 4973
S ps -p 4973 -o p1d,ppid,ni,cmd
4973  472110 /bin/bash /teat4.sh
PID PPID
NI CHD
注意，必须将nice命令和要启动的命令放在同一行中。ps命令的输出验证了谦让度值（NI
列）已经被调整到了10。
nice命令会让脚本以更低的优先级运行。但如果想提高某个命令的优先级，你可能会吃惊。
S nice -n -10 ./test4.sh > test4.out &
$ nice1 cannot set niceness: Pernission denied
S86p11]
---
## Page 361