definitions for the purpose of the analysis. Let G be any finite
Abelian group. A character is a homomorphism χ : G → C from the
group G to C, i.e. χ(a +b) = χ(a)· χ(b) for all a, b ∈ G. For functions
f
: G → C, the Fourier basis is composed of the group (cid:98)G of
characters χ : G → C. The Fourier coefficient(cid:98)f (χ) corresponding
to a character χ is defined as:
(cid:98)f (χ) = E[x ← G : f (x) · χ(x)].
Session 2C: Secure Computing ICCS ’19, November 11–15, 2019, London, United Kingdom340(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
if α (cid:44) 0
if α = 0
n
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
j
(cid:98)1j(αj)
We will be focussing on Reed-Solomon codes over Fp and we can de-
scribe the Fourier characters by χα(x) = ωα ·x where ω = e−2π i/p
is a primitive p-th root of unity and α ∈ Fp. For ease of exposi-
following lemmas established in [6].
tion we will sometimes write(cid:98)f (χα) by(cid:98)f (α). We will rely on the
Lemma 3.1. Let C ⊂ Fn
p be an [n, t − 1, n − t + 1] linear code.
Let τ = (τ(1), τ(2), . . . , τ(n)) be a family of leakage predicates τ(j) :
Fp → {0, 1}. We then have

(cid:98)1j(αj)
α ∈C⊥\{0}
j
where 1j ≡ τ(j), C⊥ as the dual code of C and α = (α1, . . . , αn).
sin(ϵ ·π)
p·sin(π/p) . Then for any set A ⊆ Fp such
Lemma 3.2. Let cϵ =
that |A| ≤ ϵ · p, we have:
SD(τ(C), τ(Un)) =
1
2
j=0
n
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) 
|(cid:99)1A(α)| + |(cid:100)1Ac(α)| ≤ 2cϵ
|(cid:99)1A(α)| + |(cid:100)1Ac(α)| ≤ 1

SD(τ(C), τ(Un)) ≤ 1
2
We now proceed to prove Theorem 3. Applying triangle inequal-
ity to Lemma 3.1, we have
α ∈C⊥\{0}
j=0

α ∈C⊥\{0}
Using Lemma 3.2 and the fact that all the leakage function in τ
satisfy that Pr[x ∈ Fp : τ(j) = 1] ≤ ϵ we obtain
SD(τ(C), τ(Un)) ≤ 1
2
(2 · cϵ)HW(α)
where HW(α) denotes the hamming weight of α.
bution of Reed-Solomon codes.
We now use the following fact about the hamming weight distri-
Proposition 6.1. The number of codewords in a (n, n − t, t)p
Reed-Solomon code of hamming weight j is given by
(cid:18)j − 1
(cid:19)
i
(−1)i
pj−t−i
.
j
(cid:18)n
(cid:19)
(p − 1) j−t
We can now bound

(2 · cϵ)HW(α) =
i =0
α ∈C⊥\{0}
(−1)i
pj−t−i(2 · cϵ)j
α ∈C⊥\{0}(2cϵ)HW(α) as follows:
(cid:18)j − 1
(cid:19)
i
(p − 1) j−t
i =0
(cid:19)
(cid:18)n
(cid:18)n
(cid:19)
j
j
n
≤ n
j=t
j=t
(p − 1)pj−t(2cϵ)j
≤ 1
2(p − 1)p
−t(1 + 2 · cϵ · p)n
For small values of ϵ, we can approximate cϵ ≈ ϵ. Therefore, we
have that SD(τ(C), τ(Un)) ≤ 1
2(p − 1)p−t(1 + 2 · ϵ · p)n .
We conclude by a simple hybrid argument that RSFp ,n,t ,η is
(Γ, µ) locally leakage resilient if for all j, |{x ← Fp : τ(j)(x) = 1}| ≤
ϵ · p where µ = 1
2(p − 1)p−t(1 + 2 · ϵ · p)n. By setting
log2(ϵ) < −log2(p)
2
the statistical distance becomes 2−O(s).
− s
n
(1)
Remark 3.3. We remark that the preceding analysis still seems
pessimistic and can most likely be further tightened. For instance,
the bound becomes worse as p increases but intuitively the leakage
resilience should get better with larger p.
Concrete LWE parameters based on our conjecture. We pro-
vide a crude analysis that suggests a choice of parameters for imper-
fect LWE based OLE that our compiler can tolerate. To understand
the leakage in standard Ring-LWE based schemes [44], we recall
some relevant parameters. Denote the plaintext modulus by p and
the ciphertext modulus by q. Then the magnitude of the statistical
error is bounded by log2(q) − log2(O(c · p
2 · Φ)) where c ≡ q mod p
(typically made small by choosing an appropriate q) and Φ is the
packing factor. In other words, the statistical distance between en-
cryptions of different inputs is roughly c · p
2 · Φ/q, which could
be large when we set the parameters aggressively. Applying the
standard implementation of (passive) OLE based on additively ho-
momorphic encryption, instantiated with the Ring-LWE encryption
with these parameters, will result in an imperfect OLE where the
amount of entropy from the sender’s inputs leaked to the receiver
(on a random input) is roughly c · p
2 · Φ/q bits. Our analysis only
considers a simple leakage where the leakage functions are exclu-
sion sets. We conjecture that this model is “complete” in the sense
that (in the context of our IPS-style compiler) it captures a gen-
eral leakage with the same amount of entropy, namely, by setting
log2(ϵ) as c · p
In order to get a passive OLE, one needs the magnitude of this
error to be at least the statistical parameter (eg, 40, 80 or 128). For
example, if p is a 20-bit prime and Φ = 213, then a 127-bit modulus
q gives a passive OLE with 64-bit security (where typically c and
the constant behind O() are roughly 25). However, if we use a 88-
bit modulus q, the statistical error will be roughly 2−25. For these
parameters, the error is roughly 1/√
p which means Equation 1 is
satisfied. Therefore, our compiler can amplify this to a fully secure
OLE. Since our compiler requires twice as many passive/imperfect
OLEs, we can estimate the communication overhead of actively
secure OLE protocol against the passive OLE protocol by 2·88/127 =
1.38 < 2.
For some parameter regimes (e.g., larger statistical security pa-
rameter), our construction of actively secure OLE is actually more
communication efficient than a naive construction of passively se-
cure OLE with a bigger security parameter. If we used the param-
eters described above but demanded 128-bit security, log2(q) will
be 184 and 85 respectively for passive and active and the overhead
will be 2 · 85/184 = 0.924 < 1.
7 IMPLEMENTATION AND RESULTS
We implemented our protocol in C++ using Shoup’s NTL library
[56] to perform arithmetic over finite fields, in particular vector
2 · Φ/q.
Session 2C: Secure Computing ICCS ’19, November 11–15, 2019, London, United Kingdom341linear operations and discrete Fast Fourier Transforms (which are
used to efficiently perform encoding of Reed-Solomon code words).
We ran all our experiments with 40 bits of statistical security, us-
ing the parameters of table 2 and a 25 bit prime. We implemented
our symmetric encryption by xoring our plaintexts with a pseudo-
random mask generated by NTL’s PRG implementation on input
a 256 bit seed. In addition, we used the cryptoTools library [54]
maintained by Peter Rindal for the commitment functionality, as
well as network communication (which is, in turn, based on Boost
Asio). We also used the libOTe library [51] for implementing the
t-out-of-n oblivious transfer functionality which is maintained by
Rindal [54]. We used the batched version of the (batched) passive
OLE protocol due to de Castro et al. (discussed in Section 6 [32]). We
point out that our protocol does not crucially rely on the underlying
OLE implementation. One of the main advantages of our compiler
is that we can plug in any passively secure implementation of OLE.
The protocol of [32] (based on [14]) is a batch OLE implementation
from a (batched) additively homomorphic encryption scheme based
on the LWE hardness assumption.
All the operations were performed in a single thread, with the ex-
ception of network management which was handled by a separate
thread. The parties in our experiments were executed on two Ama-
zon EC2 machines, located in Ohio and N. Virginia. Both machines
were Amazon EC2’s “r4.8xlarge” instance (2.3 GHz Intel Xeon E5
Broadwell Processors, 244Gb RAM) running Ubuntu 16.08.
Online/offline tradeoffs. Our implementation allows to prepro-
cess the OLE instances and setup the watchlist before the parties’
inputs are known. In more detail, the protocol proceeds in two
phases. In the first “offline” phase, the parties setup the watchlist by
performing t-out-of-n OT to exchange random strings which will
be used as PRG seeds to generate the randomness used for each of
the servers. Moreover, they precompute many OLE instantiations
on random inputs. In the “online” phase, the parties perform the
actual computation, consuming the random OLE tuples to realize
the OLE calls they need. Typically the offline phase is the most
expensive one, and across our experiments the online phase took
at most 25% of the overall running time.
Overdrive. We compare the performance of our protocol with the
Low Gear protocol from Overdrive [36], which is considered the
state-of-the-art. Low Gear generates authenticated triples in the
two-party setting and, when combined with the SPDZ protocol, can
be used to evaluate any two-party arithmetic functionality with ac-
tive security. We compiled and executed Low Gear with parameters
similar to the ones of our experiments. More precisely, we ran Low
Gear on a single thread over a 25-bit prime field, 40-bit security. The
complexity of Overdrive varies linearly and increasing the batch
size beyond a certain point would not improve the per-triple costs
significantly. On the other hand, our approach relies on packed
secret sharing and increasing batch sizes improves our per-triple
costs. We chose a 25-bit prime because the (current implementation
of the) underlying OLE scheme could only support 25-bit primes
and the packing needed for our experiments. We instantiated Over-
drive with a 25-bit prime and 40-bit security. Increasing to a larger
prime (that fits in a long) should not affect our computation or
communication overhead over the passive OLE protocol. We ran
both the protocols on the same AWS instances located in the same
block width
1317
3065
6749
14332
29864
61386
125195
14332
29864
61386
125195
253781
triples/ms
1.90
2.12
2.20
2.48
2.49
2.35
2.86
2.65
2.73
2.99
3.14
3.13
3.10
bytes/triple
5533
5153
4946
4815
4754
4745
2887
4006
3929
3877
3851
3850
2800
#triples
1M
10M
Low Gear
Table 3: Communication and computation costs to generate
authenticated triples.