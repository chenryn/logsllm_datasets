## 递归优化CASE - performance tuning case :use cursor\trigger\recursive replace (group by and order by) REDUCE needed blockes scan    
### 作者                                                                       
digoal                     
### 日期                       
2012-09-14                      
### 标签                     
PostgreSQL , 递归查询 , group by , order by , cursor , 性能优化  
----                    
## 背景          
一个比较经典的SQL如下 :   
```  
select a.skyid, a.giftpackageid, a.giftpackagename, a.intimestamp  
          from tbl_anc_player_win_log a  
         group by a.skyid, a.giftpackageid, a.giftpackagename, a.intimestamp  
         order by a.intimestamp desc LIMIT 10;  
```  
显然走的是全表扫描.  
有几种优化的手段如下, 数据量越大提升效果越明显, 测试使用了10W条记录 :   
1\. 使用子查询降低 group by 的数据量.  
2\. 使用游标和临时表.  
3\. 在tbl_anc_player_win_log表上建立触发器, 用另一张表来记录唯一的a.skyid, a.giftpackageid, a.giftpackagename, a.intimestamp.  
下面分别来讲一下 :   
测试表 :   
```  
create table user_download_log (user_id int not null, listid int not null, apkid int not null, get_time timestamp(0) not null, otherinfo text);  
create index idx_user_download_log_time on user_download_log (get_time);  
```  
测试数据 :   
```  
insert into user_download_log select generate_series(0,100000),generate_series(0,100000),generate_series(0,100000),generate_series(clock_timestamp(),clock_timestamp()+interval '100000 min',interval '1 min'), 'this is test';  
```  
1\. 使用子查询来降低 group by 的数据量.  
我们看原始的SQL, 是全表来group by的, 但是实际上只需要取10条. 按时间排序.  
那么可以根据数据特点, 按照时间字段排序取出部分记录(具体取出多少条, 视大概多少条能取到10个唯一的a.skyid, a.giftpackageid, a.giftpackagename,a.intimestamp 而定)   
例如假设取1000条可以得到10个唯一的(a.skyid, a.giftpackageid, a.giftpackagename,a.intimestamp)  
SQL如下 :   
```  
digoal=> select * from (select user_id,listid,apkid,get_time from user_download_log order by get_time desc limit 1000) as t group by user_id,listid,apkid,get_time order by get_time desc limit 10;  
 user_id | listid | apkid  |      get_time         
---------+--------+--------+---------------------  
  100000 | 100000 | 100000 | 2012-11-22 23:40:06  
   99999 |  99999 |  99999 | 2012-11-22 23:39:06  
   99998 |  99998 |  99998 | 2012-11-22 23:38:06  
   99997 |  99997 |  99997 | 2012-11-22 23:37:06  
   99996 |  99996 |  99996 | 2012-11-22 23:36:06  
   99995 |  99995 |  99995 | 2012-11-22 23:35:06  
   99994 |  99994 |  99994 | 2012-11-22 23:34:06  
   99993 |  99993 |  99993 | 2012-11-22 23:33:06  
   99992 |  99992 |  99992 | 2012-11-22 23:32:06  
   99991 |  99991 |  99991 | 2012-11-22 23:31:06  
(10 rows)  
Time: 2.010 ms  
```  
执行计划如下 :   
```  
digoal=> explain select * from (select user_id,listid,apkid,get_time from user_download_log order by get_time desc limit 1000) as t group by user_id,listid,apkid,get_time order by get_time desc limit 10;  
                                                                  QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------------  
----------  
 Limit  (cost=86.02..86.05 rows=10 width=20)  
   ->  Sort  (cost=86.02..88.52 rows=1000 width=20)  
         Sort Key: user_download_log.get_time  
         ->  HashAggregate  (cost=54.41..64.41 rows=1000 width=20)  
               ->  Limit  (cost=0.00..34.41 rows=1000 width=20)  
                     ->  Index Scan Backward using idx_user_download_log_time on user_download_log  (cost=0.00..3441.38 rows=100001   
width=20)  
(6 rows)  
Time: 0.765 ms  
```  
原始SQL :   
```  
digoal=> select user_id,listid,apkid,get_time from user_download_log group by user_id,listid,apkid,get_time order by get_time desc limit 10;  
 user_id | listid | apkid  |      get_time         
---------+--------+--------+---------------------  
  100000 | 100000 | 100000 | 2012-11-22 23:40:06  
   99999 |  99999 |  99999 | 2012-11-22 23:39:06  
   99998 |  99998 |  99998 | 2012-11-22 23:38:06  
   99997 |  99997 |  99997 | 2012-11-22 23:37:06  
   99996 |  99996 |  99996 | 2012-11-22 23:36:06  
   99995 |  99995 |  99995 | 2012-11-22 23:35:06  
   99994 |  99994 |  99994 | 2012-11-22 23:34:06  
   99993 |  99993 |  99993 | 2012-11-22 23:33:06  
   99992 |  99992 |  99992 | 2012-11-22 23:32:06  
   99991 |  99991 |  99991 | 2012-11-22 23:31:06  
(10 rows)  
Time: 97.731 ms  
```  
原始SQL执行计划 :   
```  
digoal=> explain select user_id,listid,apkid,get_time from user_download_log group by user_id,listid,apkid,get_time order by get_time desc limit 10;  
                                         QUERY PLAN                                           
--------------------------------------------------------------------------------------------  
 Limit  (cost=12189.92..12190.05 rows=10 width=20)  
   ->  Group  (cost=12189.92..13439.93 rows=100001 width=20)  
         ->  Sort  (cost=12189.92..12439.92 rows=100001 width=20)  
               Sort Key: get_time, user_id, listid, apkid  
               ->  Seq Scan on user_download_log  (cost=0.00..1834.01 rows=100001 width=20)  
(5 rows)  
Time: 0.742 ms  
```  
使用这种优化方法得到的查询速度是原始SQL的49倍.  
2\. 使用游标, 以及临时表来存储得到的值.  
函数如下 :   
```  
create or replace function get_user_download_log(i_limit int) returns setof record as $$  
declare  
  v_result record;  
  v_query refcursor;  
  v_limit int := 0;  
begin  
  CREATE TEMPORARY TABLE IF NOT EXISTS tmp_user_download_log (user_id int, listid int, apkid int, get_time timestamp(0));  
  truncate table tmp_user_download_log;  
  open v_query for select user_id,listid,apkid,get_time from user_download_log order by get_time desc;  
  loop  
    fetch v_query into v_result;  
    perform 1 from tmp_user_download_log where user_id=v_result.user_id and listid=v_result.listid and apkid=v_result.apkid and get_time=v_result.get_time;  
    if not found then  
      if v_limit >= i_limit then  
        exit;  
      end if;  
      if (v_result.user_id is not null and v_result.listid is not null and v_result.apkid is not null and v_result.get_time is not null) then  
        insert into tmp_user_download_log(user_id, listid, apkid, get_time)   
          values(v_result.user_id, v_result.listid, v_result.apkid, v_result.get_time);  
      end if;  
      v_limit := v_limit + 1;  
    end if;  
  end loop;  
  close v_query;  
  return query select * from tmp_user_download_log;  
end;  
$$ language plpgsql;  
```  
使用这个函数取数的执行计划如下 :   
```  
digoal=> explain analyze select * from get_user_download_log(10) as (c1 int, c2 int, c3 int, c4 timestamp(0));  
                                                        QUERY PLAN                                                          
--------------------------------------------------------------------------------------------------------------------------  
 Function Scan on get_user_download_log  (cost=0.25..10.25 rows=1000 width=20) (actual time=0.948..0.951 rows=20 loops=1)  
 Total runtime: 0.978 ms  
(2 rows)  
```  
执行时间和执行结果如下 :   
```  
digoal=> select * from get_user_download_log(10) as (c1 int, c2 int, c3 int, c4 timestamp(0));  
   c1   |   c2   |   c3   |         c4            
--------+--------+--------+---------------------  
 100000 | 100000 | 100000 | 2012-11-22 23:28:28  
  99999 |  99999 |  99999 | 2012-11-22 23:27:28  
  99998 |  99998 |  99998 | 2012-11-22 23:26:28  
  99997 |  99997 |  99997 | 2012-11-22 23:25:28  
  99996 |  99996 |  99996 | 2012-11-22 23:24:28  
  99995 |  99995 |  99995 | 2012-11-22 23:23:28  
  99994 |  99994 |  99994 | 2012-11-22 23:22:28  
  99993 |  99993 |  99993 | 2012-11-22 23:21:28  
  99992 |  99992 |  99992 | 2012-11-22 23:20:28  
  99991 |  99991 |  99991 | 2012-11-22 23:19:28  
(10 rows)  
Time: 1.818 ms  
```  
使用这种优化方法得到的查询速度是原始SQL的54倍.  
3\. 使用触发器, 以及新建一张表来存储唯一的user_id,listid,apkid,get_time.  
新建表如下 :   
```  
create table user_download_uk (user_id int, listid int, apkid int, get_time timestamp(0), primary key (user_id,listid,apkid,get_time));  
```  
新建插入触发器函数 :   
```  
create or replace function tg_user_download_log_insert() returns trigger as $$  
declare  
begin  
  perform 1 from user_download_uk where user_id=NEW.user_id and listid=NEW.listid and apkid=NEW.apkid and get_time=NEW.get_time;  
  if found then  
    return null;  
  else  
    insert into user_download_uk(user_id,listid,apkid,get_time) values(NEW.user_id,NEW.listid,NEW.apkid,NEW.get_time);  
  end if;  
  return null;  
end;  
$$ language plpgsql;  
```  
新建删除触发器函数 :   
```  
create or replace function tg_user_download_log_delete() returns trigger as $$  
declare  
begin  
  delete from user_download_uk where user_id=OLD.user_id and listid=OLD.listid and apkid=OLD.apkid and get_time=OLD.get_time;  
  return null;  
end;  
$$ language plpgsql;  
```  
新建更新触发器函数 :   
```  
create or replace function tg_user_download_log_update() returns trigger as $$  
declare  
begin  
  perform 1 from user_download_uk where user_id=OLD.user_id and listid=OLD.listid and apkid=OLD.apkid and get_time=OLD.get_time;  
  if found then  
    update user_download_uk set  user_id=NEW.user_id and listid=NEW.listid and apkid=NEW.apkid and get_time=NEW.get_time  
      where user_id=OLD.user_id and listid=OLD.listid and apkid=OLD.apkid and get_time=OLD.get_time;  
  else  
    insert into user_download_uk(user_id,listid,apkid,get_time) values(NEW.user_id,NEW.listid,NEW.apkid,NEW.get_time);  
  end if;  
  return null;  
end;  
$$ language plpgsql;  
```  
在user_download_log表上创建三个触发器.  
```  
digoal=> create trigger tg_user_download_log_update after update on user_download_log for each row execute procedure tg_user_download_log_update();  