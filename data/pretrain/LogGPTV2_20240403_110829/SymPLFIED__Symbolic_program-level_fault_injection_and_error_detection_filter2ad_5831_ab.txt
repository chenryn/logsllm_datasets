Symbolic Fault Propagation
The SymPLFIED approach represents the state of
all erroneous values in the program using the abstract
symbol err. The err symbol is propagated to different
locations in the program during execution using sim(cid:173)
ple error propagation rules (shown in section 5.2). The
1-4244-2398-9/08/$20.00 ©2008 IEEE
474
DSN 2008: Pattabiraman et at
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:30:25 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
symbol also introduces non-determinism in the pro(cid:173)
gram when used either in the context of comparison
and branch instructions or as a pointer operand in
memory operations. Because the same symbol is used
to represent all erroneous values in the program, the
approach distinguishes program states based on where
errors occur rather than on the nature of the individual
error(s). As a result, it avoids state explosion and can
keep track of all possible places in the program the
error may propagate to starting from its origin. How(cid:173)
ever, because errors in data values are not distin(cid:173)
guished from each other, the set of error states corres(cid:173)
ponding to a fault is over-approximated. This can re(cid:173)
sult in the technique's finding erroneous program out(cid:173)
comes that may not occur in a real execution. For ex(cid:173)
ample, if an error propagates from a program variable
A to another variable B, the variable B's value is con(cid:173)
strained by the value of the variable A. In other words,
given a concrete value of A after it has been affected
by the error, the value of B can be uniquely deter(cid:173)
mined due to the error propagating from A to B. The
SymPLFIED technique on the other hand, assigns a
symbolic value of err to both variables, and would not
capture the constraint on B due to the variable A. As a
result, it would not be able to determine the value in
register B even when given the value in register A.
This may result in the technique discovering spurious
program outcomes. Such spurious outcomes are
termed false positives.
While SymPLFIED may uncover false positives,
it will never miss an outcome that may occur in the
program due to the error (in a real execution). This is
because SymPLFIED systematically explores
the
space of all possible manifestations of the error on the
program. Hence, the technique is sound, meaning it
finds all error manifestations, but it is not always ac(cid:173)
curate, meaning that it may find false positives.
Our premise is that soundness is more important
than accuracy from the point of view .of designing
detection mechanisms, as we can augment the set of
error detectors to conservatively detect all the errors
identified by the technique (including false positives).
While a small number of false positives can be to(cid:173)
lerated, it must be ensured that the technique does not
find too many false positives, as the cost of developing
detectors to protect against false positives can over(cid:173)
whelm the benefits provided by detection. The
SymPLFIED technique uses a custom constraint solv(cid:173)
er to remove false positives in the search space. This is
similar to the technique used in [13].
3.3
Fault Model
The fault model considered by SymPLFIED in(cid:173)
cludes transient errors in memory/registers and com(cid:173)
putation. Permanent or intermittent errors are not con(cid:173)
sidered. Transient errors are modeled as follows:
Errors in memory/registers are modeled by replac(cid:173)
ing the contents of the memory location or register by
the symbol err. No distinction is made between single(cid:173)
and multi-bit errors.
Errors in computation are modeled based on
where they occur in the processor pipeline and how
they affect the architectural state. Table 1 shows how
such errors are modeled by the framework.
Errors in processor control logic (such as in the
register renaming unit) are not considered. This is a
topic for future work.
3.4
Scalability
As in most model checking approaches, the ex(cid:173)
haustive search performed by SymPLFIED can be
exponential in the number of instructions executed by
the program (in the worst case). However, the error
detection mechanisms in the program can be used to
optimize the state space exploration process. For ex(cid:173)
ample, if a certain code component protected with
detectors is proved to be resilient to all errors of a par(cid:173)
ticular class, then such errors can be ignored when
considering the space of errors that can occur in the
system as a whole. This suggests a hierarchical or
compositional approach, where first the detection me(cid:173)
chanisms deployed in small components are proved to
protect
that component from errors of a particular
class, and then inter-component interactions are consi(cid:173)
dered. This is an area of future investigation.
4 Examples
This section illustrates the SymPLFIED approach
in the context of an application that calculates the fac(cid:173)
torial of a number, shown in Figure 2. The program is
represented in the generic assembly language dis(cid:173)
cussed in Section 3.1.
4.1 Error Injection
We illustrate our approach with an example
of an injected error in the program shown in Figure 1.
Assume that a fault occurs in register $3 (which holds
the value of the loop counter variable) in line 8 of the
program after the loop counter is decremented (subi $3
$3 1). The effect of the fault is to replace the contents
of the register $3 with err. The loop back-edge is then
executed, and the loop condition is evaluated. Since $3
has the value err in it, it cannot be uniquely deter(cid:173)
mined whether the loop condition evaluates to true or
false. Therefore, the execution is forked so that the
loop condition evaluates to true in one case and to
false in the other. The true case exits immediately and
prints the value stored in $2. Since the error can occur
in any loop iteration, the value printed can be any of
the following: 1I, 2I, 31, 41, 5I.
1-4244-2398-9/08/$20.00 ©2008 IEEE
475
DSN 2008: Pattabiraman et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:30:25 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
Table 1: Errors in pipeline sta~ es and how they are mo ee
dldbthf
~y
e ramewor
k
Fault Origin
Error
Symptom
Conditions under
Which Modeled
Modeling Procedure
Instruction Decoder
One of the
fields of an
instruction
is corrupted.
One valid instruc-
tion is converted to
another valid in-
struction.
Address or Data
Bus
Processor Function-
alUnit
Data read
from memo-
ry, cache, or
register file
is corrupted.
Functional
unit output
is corrupted.
Instruction Fetch
Mechanism
Errors in the
fetch unit.
Single and mul-
tiple bit errors in
the bus during
instruction execu-
tion.
Single and mul-
tiple bit errors in
registers/memory.
Single or multiple
bit errors in PC or
instruction.
1
2
3
4
loop:
6
7
8
9
exit:
11
12
ori $2 $0 #1
read $1
mov $3, $1
ori $4 $0 #1
setgt $5 $3 $4
beq $50 exit
mult $2 $2 $3
subi $3 $3 #1
beq $0 #0 loop
--- initial product p - 1
--- read ifrom input
--- for comparison purposes
--- start ofloop
---- loop condition : $3 > $4
*.
---- p = P I
---- i = i -1
--- loop backedge
prints "Factorial = "
print $2
halt
Figure 2: Program to compute factorial
The false case continues executing the loop, and
the err value is propagated from register $3 to register
$2 due to the multiplication operation (mul $2 $2 $3).
The program then executes the loop back-edge and
evaluates the branch condition. Again, the condition
cannot be resolved, as register $3 is still err. The ex(cid:173)
ecution is forked again, and the process is repeated ad
infinitum. In practical terms, the loop is terminated
after a certain number of instructions and the value err
is printed; otherwise, the program times out (detected
by a watchdog mechanism) and is stopped.
Complexity: For a physical fault-injection ap(cid:173)
proach to discover the same set of outcomes for the
program as SymPLFIED, it would need to inject all
possible values (in the integer range) into the loop
counter variable. This can correspond to 2k cases in the
worst case, where k is the number of bits used to
represent an integer. In contrast, SymPLFIED consid(cid:173)
ers at most n+1 possible cases in this example, where
n is the number of iterations of the loop. This is be(cid:173)
cause each fork of the execution at the loop condition
results in the tnle case exiting the loop and the pro(cid:173)
gram. In the general case, SymPLFIED may need to
Instructions writing to a destination
(e.g., add) - change the output target
Instructions with no target (e.g., nop)
- replace with instructions with tar-
gets (e.g. add)
Instructions with a single destination
(e.g.add) - replace with instruction
with no target (e.g. nop)
Errors in register data bus
Error in cache bus
Error in memory bus
Functional Unit output to register or
memory
Fetch from an erroneous location due
to error in PC
Error in instruction while fetching
err in the original and new targets (reg-
ister or memory)
err in the new wrong target (register or
memory)
err in the original target location (regis-
ter or memory)
err in source register(s) of the current
instruction
err in target registers of load instruc-
tions to the location
err in target register of load instructions
to the location
err in register or memory file being
written to by the current instruction
PC is changed to an arbitrary but valid
code location
Modeled as errors in Instruction Decod-
er (described above).
consider 2n possible cases. However, by upper(cid:173)
bounding the number of instructions executed in the
program, the growth in the search space can be con(cid:173)
trolled (see section 5..4).
False positives: In the above example, not all er(cid:173)
rors in the loop counter variables will cause the loop to
terminate early. For example, an error in the higher(cid:173)
order bits of the loop counter variable in register $3
may still cause the loop condition ($3 > $4) to be
false. However, SymPLFIED would assume that both
the true and false cases are possible, as it does not
distinguish among errors in different bit positions.
4.2 Error Detection
We now discuss how SymPLFIED supports error
detection mechanisms in the program. Figure 3 shows
the same program augmented with error detectors.
Recall
that detectors are invoked through special
CHECK instructions, as explained in Section 3.1. The
error detectors together with their supporting instruc(cid:173)
tions (mov instruction in line 8) are shown in bold.
The same error is injected as before in register $3
(the new line number is 11). As shown earlier, the
loop back-edge is executed, and the execution is
forked at the loop condition ($3> $4).
The tnle case exits immediately, while the false
case continues executing the loop. The false case "re(cid:173)
members" that the loop condition ($3 < $4) is false by
adding this as a constraint to the search. The false case
then encounters the first detector that checks if ($4 <
$3). The check always evaluates to true because of the
constraint and hence does not detect the error. The
program continues execution, and the error propagates
to $2 in the mul instruction. However, the value of $2
from the previous iteration does not have an error in it,
1-4244-2398-9/08/$20.00 ©2008 IEEE
476
DSN 2008: Pattabiraman et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:30:25 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
and this value is copied to register $6 by the mov in(cid:173)
struction in line 8. Therefore, when the second detec(cid:173)
tor is encountered within the loop (line 10), the LHS
of the check evaluates to err and the RHS evaluates to
($6 x $1), which is an integer.
ori $2 $0 #1
1
2
read $1
3
mov $3, $1
4
ori $4 $0 #1
loop: setgt $5 $3 $4
6
7
8
9
10
11
12
exit:
14
15
print $2
halt
beg $5 0 exit