    In order to detect that your process is ready to answer queries,
    `pytest-xprocess` allows the user to provide a string pattern by setting the
    class variable pattern in the Starter class. `pattern` will be waited for in
    the process `logfile` for a maximum time defined by `timeout` before timing out in
    case the provided pattern is not matched.
    It’s important to note that pattern is a regular expression and will be matched using python `re.search`.
    [Controlling Startup Wait Time with timeout](https://pytest-xprocess.readthedocs.io/en/latest/starter.html#controlling-startup-wait-time-with-timeout):
    Some processes naturally take longer to start than others. By default,
    `pytest-xprocess` will wait for a maximum of 120 seconds for a given process to
    start before raising a `TimeoutError`. Changing this value may be useful, for
    example, when the user knows that a given process would never take longer than
    a known amount of time to start under normal circunstancies, so if it does go
    over this known upper boundary, that means something is wrong and the waiting
    process must be interrupted. The maximum wait time can be controlled through the
    class variable timeout.
    ```python
       @pytest.fixture
       def myserver(xprocess):
           class Starter(ProcessStarter):
               # will wait for 10 seconds before timing out
               timeout = 10
    ```
    Passing command line arguments to your process with `args`:
    In order to start a process, pytest-xprocess must be given a command to be passed into the subprocess.Popen constructor. Any arguments passed to the process command can also be passed using args. As an example, if I usually use the following command to start a given process:
    ```bash
    $> myproc -name "bacon" -cores 4 
    ```
    That would look like:
    ```python
    args = ['myproc', '-name', '"bacon"', '-cores', 4, '']
    ```
    when using args in pytest-xprocess to start the same process.
    ```python
    @pytest.fixture
    def myserver(xprocess):
        class Starter(ProcessStarter):
            # will pass "$> myproc -name "bacon" -cores 4 "  to the
            # subprocess.Popen constructor so the process can be started with
            # the given arguments
            args = ['myproc', '-name', '"bacon"', '-cores', 4, '']
            # ...
    ```
### [Python Snippets](python_snippets.md)
* New: [Configure the logging of a program to look nice.](python_snippets.md#configure-the-logging-of-a-program-to-look-nice)
    ```python
    def load_logger(verbose: bool = False) -> None:  # pragma no cover
        """Configure the Logging logger.
        Args:
            verbose: Set the logging level to Debug.
        """
        logging.addLevelName(logging.INFO, "\033[36mINFO\033[0m")
        logging.addLevelName(logging.ERROR, "\033[31mERROR\033[0m")
        logging.addLevelName(logging.DEBUG, "\033[32mDEBUG\033[0m")
        logging.addLevelName(logging.WARNING, "\033[33mWARNING\033[0m")
        if verbose:
            logging.basicConfig(
                format="%(asctime)s %(levelname)s %(name)s: %(message)s",
                stream=sys.stderr,
                level=logging.DEBUG,
                datefmt="%Y-%m-%d %H:%M:%S",
            )
            telebot.logger.setLevel(logging.DEBUG)  # Outputs debug messages to console.
        else:
            logging.basicConfig(
                stream=sys.stderr, level=logging.INFO, format="%(levelname)s: %(message)s"
            )
    ```
* New: [Get the modified time of a file with Pathlib.](python_snippets.md#get-the-modified-time-of-a-file-with-pathlib)
    ```python
    file_ = Path('/to/some/file')
    file_.stat().st_mtime
    ```
    You can also access:
    - Created time: with `st_ctime`
    - Accessed time: with `st_atime`
    They are timestamps, so if you want to compare it with a datetime object use the `timestamp` method:
    ```python
    assert datetime.now().timestamp - file_.stat().st_mtime >> from urllib.parse import unquote
    >>> print(unquote("%CE%B1%CE%BB%20"))
    αλ
    ```
### [Python Telegram](python-telegram.md)
* New: Analyze the different python libraries to interact with telegram.
    There are two ways to interact with Telegram through python:
    - Client libraries
    - Bot libraries
    Client libraries:
    Client libraries use your account to interact with Telegram itself through a developer API token.
    The most popular to use is [Telethon](https://docs.telethon.dev/en/stable/index.html).
    Bot libraries:
    [Telegram lists many libraries to interact with the bot API](https://core.telegram.org/bots/samples#python), the most interesting are:
    - [python-telegram-bot](#python-telegram-bot)
    - [pyTelegramBotAPI](#pytelegrambotapi)
    - [aiogram](#aiogram)
    If there comes a moment when we have to create the messages ourselves, [telegram-text](https://telegram-text.alinsky.tech/api_reference) may be an interesting library to check.
    [python-telegram-bot](https://github.com/python-telegram-bot/python-telegram-bot):
    Pros:
    - Popular: 23k stars, 4.9k forks
    - Maintained: last commit 3 days ago
    - They have a developers community to get help in [this telegram group](https://telegram.me/pythontelegrambotgroup)
    - I like how they try to minimize third party dependencies, and how you can install the complements if you need them
    - Built on top of asyncio
    - Nice docs
    - Fully supports the [Telegram bot API](https://core.telegram.org/bots/api)
    - Has many examples
    Cons:
    - Interface is a little verbose and complicated at a first look
    - Only to be run in a single thread (not a problem)
    References:
    - [Package documentation](https://docs.python-telegram-bot.org/) is the technical reference for python-telegram-bot. It contains descriptions of all available classes, modules, methods and arguments as well as the changelog.
    - [Wiki](https://github.com/python-telegram-bot/python-telegram-bot/wiki/) is home to number of more elaborate introductions of the different features of python-telegram-bot and other useful resources that go beyond the technical documentation.
    - [Examples](https://docs.python-telegram-bot.org/examples.html) section contains several examples that showcase the different features of both the Bot API and python-telegram-bot
    - [Source](https://github.com/python-telegram-bot/python-telegram-bot)
    [pyTelegramBotAPI](https://github.com/eternnoir/pyTelegramBotAPI):
    Pros:
    - Popular: 7.1k stars, 1.8k forks
    - Maintained: last commit 3 weeks ago
    - Both sync and async
    - Nicer interface with decorators and simpler setup
    - [They have an example on how to split long messages](https://github.com/eternnoir/pyTelegramBotAPI#sending-large-text-messages)
    - [Nice docs on how to test](https://github.com/eternnoir/pyTelegramBotAPI#testing)
    - They have a developers community to get help in [this telegram group](https://telegram.me/joinchat/Bn4ixj84FIZVkwhk2jag6A)
    - Fully supports the [Telegram bot API](https://core.telegram.org/bots/api)
    - Has examples
    Cons:
    - Uses lambdas inside the decorators, I don't know why it does it.
    - The docs are not as throughout as `python-telegram-bot` one.
    References:
    - [Documentation](https://pytba.readthedocs.io/en/latest/index.html)
    - [Source](https://github.com/eternnoir/pyTelegramBotAPI)
    - [Async Examples](https://github.com/eternnoir/pyTelegramBotAPI/tree/master/examples/asynchronous_telebot)
    [aiogram](https://github.com/aiogram/aiogram):
    Pros:
    - Popular: 3.8k stars, 717k forks
    - Maintained: last commit 4 days ago
    - Async support
    - They have a developers community to get help in [this telegram group](https://t.me/aiogram)
    - Has type hints
    - Cleaner interface than `python-telegram-bot`
    - Fully supports the [Telegram bot API](https://core.telegram.org/bots/api)
    - Has examples
    Cons:
    - Less popular than `python-telegram-bot`
    - Docs are written at a developer level, difficult initial barrier to understand how to use it.
    References:
    - [Documentation](https://docs.aiogram.dev/en/dev-3.x/)
    - [Source](https://github.com/aiogram/aiogram)
    - [Examples](https://github.com/aiogram/aiogram/tree/dev-3.x/examples)
    Conclusion:
    Even if `python-telegram-bot` is the most popular and with the best docs, I prefer one of the others due to the easier interface. `aiogram`s documentation is kind of crap, and as it's the first time I make a bot I'd rather have somewhere good to look at.
    So I'd say to go first with `pyTelegramBotAPI` and if it doesn't go well, fall back to `python-telegram-bot`.
## Generic Coding Practices
### [How to code](how_to_code.md)
* New: Personal evolution on how I code.
    Over the years I've tried different ways of developing my code:
    - Mindless coding: write code as you need to make it work, with no tests, documentation or any quality measure.
    - TDD.
    - Try to abstract everything to minimize the duplication of code between projects.
    Each has it's advantages and disadvantages. After trying them all and given that right now I only have short spikes of energy and time to invest in coding my plan is to:
    - Make the minimum effort to design the minimum program able to solve the problem at hand. This design will be represented in an [orgmode](orgmode.md) task.
    - Write the minimum code to make it work without thinking of tests or generalization, but with the [domain driven design](domain_driven_design.md) concepts so the code remains flexible and maintainable.
    - Once it's working see if I have time to improve it:
      - Create the tests to cover the critical functionality (no more 100% coverage).
      - If I need to make a package or the program evolves into something complex I'd use [this scaffold template](https://github.com/lyz-code/cookiecutter-python-project).
    Once the spike is over I'll wait for a new spike to come either because I have time or because something breaks and I need to fix it.
# DevOps
## Infrastructure as Code
### [Gitea](gitea.md)
* New: [Run jobs if other jobs failed.](gitea.md#run-jobs-if-other-jobs-failed)
    This is useful to send notifications if any of the jobs failed.
    [Right now](https://github.com/go-gitea/gitea/issues/23725) you can't run a job if other jobs fail, all you can do is add a last step on each workflow to do the notification on failure:
    ```yaml
    - name: Send mail
        if: failure()
        uses: https://github.com/dawidd6/action-send-mail@v3
        with:
            to: ${{ secrets.MAIL_TO }}
            from: Gitea 
            subject: ${{ gitea.repository }} ${{gitea.workflow}} ${{ job.status }}
            priority: high
            convert_markdown: true
            html_body: |
                ### Job ${{ job.status }}
                ${{ github.repository }}: [${{ github.ref }}@${{ github.sha }}](${{ github.server_url }}/${{ github.repository }}/actions)
    ```
## Infrastructure Solutions
### [Tools](kubernetes_tools.md)
* Correction: [Recommend rke2 over k3s.](kubernetes_tools.md#tried)
    A friend told me that it works better.
## Monitoring
### [Loki](loki.md)
* New: [How to install loki.](loki.md#installation)
    There are [many ways to install Loki](https://grafana.com/docs/loki/latest/setup/install/), we're going to do it using `docker-compose` taking [their example as a starting point](https://raw.githubusercontent.com/grafana/loki/v2.9.1/production/docker-compose.yaml) and complementing our already existent [grafana docker-compose](grafana.md#installation).
    It makes use of the [environment variables to configure Loki](https://grafana.com/docs/loki/latest/configure/#configuration-file-reference), that's why we have the `-config.expand-env=true` flag in the command line launch.
    In the grafana datasources directory add `loki.yaml`:
    ```yaml
    ---
    apiVersion: 1
    datasources:
      - name: Loki
        type: loki
        access: proxy
        orgId: 1
        url: http://loki:3100
        basicAuth: false
        isDefault: true
        version: 1
        editable: false
    ```
    [Storage configuration](https://grafana.com/docs/loki/latest/storage/):
    Unlike other logging systems, Grafana Loki is built around the idea of only indexing metadata about your logs: labels (just like Prometheus labels). Log data itself is then compressed and stored in chunks in object stores such as S3 or GCS, or even locally on the filesystem. A small index and highly compressed chunks simplifies the operation and significantly lowers the cost of Loki.
    Loki 2.0 brings an index mechanism named ‘boltdb-shipper’ and is what we now call Single Store. This type only requires one store, the object store, for both the index and chunks.
    Loki 2.8 adds TSDB as a new mode for the Single Store and is now the recommended way to persist data in Loki as it improves query performance, reduces TCO and has the same feature parity as “boltdb-shipper”.
### [SIEM](siem.md)
* New: Add Wazuh SIEM.
    [Wazuh](https://wazuh.com/)