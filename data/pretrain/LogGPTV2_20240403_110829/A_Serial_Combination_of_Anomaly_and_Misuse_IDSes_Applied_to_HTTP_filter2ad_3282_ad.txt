dot.
model because these resources are are well-known by the
operator, while dynamic resources managed by the aca-
demics were excluded from the model.
In order to evaluate the ﬁltering rate of the ADFSC
and its ability to address the problem of false positives,
we perform a single misuse detection using our WIDS
component, and compare its results to the ADFSC re-
sults (see Table 3).
The ﬁrst column shows the severity levels that can be
associated to a logged event. The second column shows
the results of the single misuse detection using the WIDS
presented in Section 2.3 on the Sup´elec web server test
set. The third column shows the results of the serial com-
bination presented in Section 4 using the anomaly detec-
tion component described in Section 5.1 and the WIDS
presented in Section 2.3. The fourth column is the ﬁlter-
ing rate observed between single misuse detection and
the serial combination for each severity level:
The anomaly detection component in the serial com-
bination ﬁlters out 94.25% of null severity logged events
(As). The set of unknown events from misuse detection
(Mu) decreases from about 1,7 million events to about
100 thousands events that are unknown for both anomaly
detection and misuse detection (Mu ∩ Au). These logged
events are requests toward static resources such as pic-
tures (GIF) and HTML pages. The 4.5412% remaining
are requests toward resources that have not been learnt
by the anomaly model. They may be new resources or re-
sources that were not requested during the training set.
The serial combination is also eﬃcient in ﬁltering low
severity levels (between 1 and 4). More than 94% of the
events with a severity up to level 4 are ﬁltered out by the
anomaly detection component (As). The logged events
ﬁltered out by the anomaly detection component are re-
quests toward dynamic resources managed by the web-
master (e.g. the search engine and some CGI evoked in
Section 2.3). The logged events not ﬁltered out by the
anomaly detection component are unknown uses of the
search engine (ie unknown combination of parameters)
and resources (both static and dynamic) managed by
academic authors that contain speciﬁc encoding or am-
biguous ﬁle name that match some signature of the mis-
use component. The anomaly detector of the ADFSC ﬁl-
ters out a large part of the events that would have gener-
ated false positives if analyzed by the WIDS tool. Thus,
the FP set is negligible regarding the C2 set.
The ﬁltering rate for severity level between 5 and 7 is
between 56% and 82%. Whereas severity levels between 1
and 4 are most likely to be false positives due to the high
sensitivity of the WIDS tool, severity from 5 to higher
mainly address critical events. Thus for the severity lev-
els 5 to 7, the anomaly detection component addresses
the problem of false positives since events that would
have been declared critical by the misuse detection com-
ponent are ﬁltered out by the anomaly detection compo-
nent when the ADFSC is used.
Some false positives remain. As an example, the
Sup´elec web server is using the Count.cgi program. Even
if the actual version has no known weakness, it is impor-
tant to monitor this kind of activity since a former ver-
sion can be used without the webmaster knowing. In the
case of the Sup´elec web server, it appears that this pro-
gram is only available in a speciﬁc directory. So we
added the Count.cgi program, its path and usual pa-
rameters to the anomaly model as safe event. Thus any
other instance of this program on the web site is ana-
lyzed by the misuse detection component. With the sin-
gle misuse detection, this program causes 227 alarms of
level 4. It only causes 27 alarms of same level with the se-
rial combination. After investigation, it appears that the
Count.cgi program was just not properly used by an aca-
demic author. Using the single misuse detection, the
ﬂood of alarm overwhelms the operator and this er-
ror may remain unseen, while using the serial combina-
tion, this error is easy to detect thus to correct.
Other alerts are mainly generated by attempts toward
Microsoft FrontPage extensions. The low level of sever-
ity associated to this behavior is due to the small num-
ber of signature matched and the fact that these attacks
were unsuccessful. Knowing that the web server is not
vulnerable to this attack, the operator can add these re-
quests to the anomaly model without cancelling any sig-
nature in the misuse component.
From severity level 8 to higher, investigations revealed
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:36:21 UTC from IEEE Xplore.  Restrictions apply. 
Serial Combination Performance
d
n
o
c
e
s
n
i
n
o
i
t
p
m
u
s
n
o
c
e
m
i
t
-
U
P
C
 800
 750
 700
 650
 600
 550
 500
 450
 0
 100  200  300  400  500  600  700  800  900
resources in the anomaly model
Figure 5. ADFSC CPU-time consumption
that all the alerts are generated by nimda attempts. With
such events, it is a good thing that the anomaly compo-
nent does not ﬁlter out anything.
The last line of Table 3 sums up the overall results
for the entire test set. The overall ﬁltering rate shows
that the anomaly detection component ﬁlters out 94.52%
of the log events. This means that the set of events de-
clared safe by the anomaly detection (As) is composed of
2,089,547 events. Since the model is hand made, we con-
sider that the false negative sets from anomaly detection
(Af −
s which is composed of FN and C1) are negligible re-
garding to the true negative sets from anomaly detection
(At−
s which is composed of TN and C2). Comparing to
the results presented in Section 2.3, we can see that the
amount of safe events (Es) in HTTP traﬃc is higher than
the 79% exposed with our WIDS.
5.3. Performance
To show that our serial combination do not overload the
intrusion detection process, we compare the CPU-time
consumption of the WIDS used alone and of the ADFSC.
This experiment is realized using one day of log as a
training data set and the six next days as test sets. The
training set is composed of 23499 log entries and 13506
distinct resources and the test set is composed of 168477
log entries and 16552 distinct resources.
In order to show the inﬂuence of the anomaly
model toward the CPU-time consumption, we ex-
periment ADFSC with a more and more complete
anomaly model. A simple statistical analysis is ini-
tially done on the training set in order to classify the re-
quested resources in the ascending order. Then, the
anomaly model is ﬁlled with one hundred of the safe re-
sources, and the CPU-time consumption is measured.
This operation is repeated up to nine hundred safe re-
sources in the anomaly model.
Measures of CPU-time consumption are illustrated in
Figure 5. The ﬁrst measure is realized with the misuse de-
tection component alone. ADFSC is less CPU-time con-
suming than the single misuse detection component. The
high decrease we can observe with only one hundred re-
sources in the anomaly model is a consequence of the
measures presented in Section 2.3, namely a high rate
of requests is safe and these requests target a small sub-
set of the resources available on the web server.
6. Related Work
In Section 2.1 we have evoked the work of Vigna et al.
in [11] concerning IDS designed to monitor web server
activity. In this section we discuss work around the com-
bination of intrusion detection components and policy-
based intrusion detection.
Intrusion Detection Component Combination
Another combination of intrusion detection component
is used by EMERALD [9] and its predecessors (IDES [4]
and NIDES [6, 2]). This combination consists in ana-
lyzing incoming events in parallel. One analysis is done
with a misuse detection component and another analy-
sis is done with an anomaly detection component. While
standalone misuse detection and standalone anomaly de-
tection provides two sets of results (intrusive or unknown
and safe or unknown), this parallel combination provides
four sets of results, such as those presented in Figure 2:
As ∩ Mi, As ∩ Mu, Au ∩ Mi and Au ∩ Mu. Two of these
sets, As ∩ Mi and Au ∩ Mu are linked to conﬂicts be-
tween misuse and anomaly detectors. These conﬂictual
sets need further investigations in order to fully qual-
ify events. This task is handled by a correlation com-
ponent (so called a resolver). Clearly, this approach in
more generic than ours, but all the intelligence is in the
resolver, which must be adapted to the characteristics
of the input data set. According to our best knowledge,
there is actually no publication which describes this re-
solver in full detail, with presentation of the results ob-
tained on real data.
This parallel architecture implies a double analysis of
each event, even when it can be known beforehand that
some events are intrusive or safe.
The parallel combination used by EMERALD aims
at improving intrusion detection results for every kind of
event (network, system calls, applications). At the oppo-
site, we chose to focus on a speciﬁc set of events (HTTP
traﬃc) and thus deduce the most eﬀective combination
to improve the intrusion detection diagnosis given the
characteristics of such an input data set.
Policy-Based Anomaly Detection
Many anomaly based detectors exist. It is not our pur-
pose here to compare our simple anomaly detector to
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:36:21 UTC from IEEE Xplore.  Restrictions apply. 
existing stand alone anomaly detection components.
We just give here a few elements about DIDAFIT [7,
8], a policy-based anomaly component, which oﬀers an
anomaly model close to ours. DIDAFIT is designed to
monitor SQL transactions between databases and appli-
cations such as web servers. Its model of behavior is based
on allowed queries, as our is based on allowed requests.
These allowed queries are listed and grouped using some
pattern matching features. We use a tree structure for the
same purpose. In our work, there is no control over the
HTTP request parameters values when DIDAFIT con-
trols the SQL requests parameters values.
7. Conclusion
In this paper, we have provided a framework to sys-
tematically reason about the combination of anomaly
and misuse components. Depending on the input data
set and on the designer objective, each combination
presents some advantages. Characteristics measured in
web servers context lead us to ADFSC, an architecture
in which an anomaly detector comes ﬁrst, feeding a mis-
use detector with potentially intrusive events, is accu-
rate.
The anomaly detector brings its ability to recognize
safe events. The unknown events are then analyzed by
the misuse detector which brings its capacity of diagno-
sis. While known events are directly declared safe by the
anomaly detector, the misuse detector provides the oper-
ator with qualiﬁed events. In such a context, the operator
task is less time consuming and its ability to take coun-
termeasures is improved
The monitored events are separated between normal,
intrusive or unqualiﬁed classes (i.e. not known as an at-
tack, but not recognize as safe either).The events neither
recognized by the anomaly detector, nor by the misuse
detector may correspond to new attack, previously un-
known, but nevertheless detected, or to unknown safe re-
sources newly available on the web server.
The major constraint we had to face was to design
an anomaly detection component which generates a low
rate of false negatives. To do so, we have used a simple
anomaly component with a hand-made model.
The experimental results presented here show that the
approach drastically reduces the amount of false pos-
itives and unqualiﬁed events. The anomaly detection
component ﬁltering out a high amount of events that
would have been declared intrusive by the standalone
misuse detection component, the ADFSC indeed clearly
addresses the problem of false positives. The unqualiﬁed
events require further investigation in order to be qual-
iﬁed as safe or intrusive. The anomaly model or the sig-
natures database can be updated as a consequence. The
drastically reduced amount of unqualiﬁed events allows
a manual updating process by an operator.
Finally, the serial combination of the anomaly and
misuse detection component presents a reasonable CPU-
time consumption compared to a standalone misuse de-
tection component, as we use a simple anomaly detection
model.
References
[1] Magnus Almgren, Herv´e Debar, and Marc Dacier. A
Lightweight Tool for Detecting Web Server Attacks. In
Proceedings of NDSS 2000, pages 157–170, 2000.
[2] Debra Anderson, Thane Frivold, and Alfonso Valdes.
Next-Generation Intrusion Detection Expert System
(nides) - a Summary. Technical Report SRI-CSL-95-07,
SRI, May 1995.
[3] D. Denning. An Intrusion-Detection Model.
IEEE
Transactions on Software Engineering, 13(2):222–232,
1987.
[4] Dorothy E. Denning, D. L. Edwards, R. Jagannathan,
T. F. Lunt, and P. G. Neumann. A prototype IDES — A
Real-Time Intrusion Detection Expert System. Techni-
cal report, Computer Science Laboratory, SRI Interna-
tional, 1987.
[5] S. Hofmeyr, S. Forrest, and A. Somayaji. Intrusion De-
tection Using Sequences of System Calls. In Journal of
Computer Security, volume 6, pages 151–180, 1998.
[6] Harold S. Javitz, Alfonso Valdez, Teresa F. Lunt, Ann
Tamaru, Mabry Tyson, and John Lowrance. Next
generation intrusion detection expert system (NIDES)
Technical Report A016–Rationales, SRI International,
March 1993.
[7] W. L. Low, J. Lee, and P. Teoh. DIDAFIT : Detecting
Intrusions in DAtabases Through FIngerprinting Trans-
actions. In Proceedings of ICEIS 2002, pages 121–128,
2002.
[8] W. L. Low, S. Y. Lee, and P. Y. Wong. Learning ﬁnger-
prints for a database intrusion detection system. In Pro-
ceedings of ESORICS 2002, pages 264–280, 2002.
[9] Phillip A. Porras and Peter G. Neumann. EMERALD:
Event Monitoring Enabling Responses to Anomalous
Live Disturbances. In Proceedings of 20th National In-
formation Systems Security Conference, 1997.
[10] Prem Uppuluri and R. Sekar.
Experiences with
speciﬁcation-based intrusion detection. In Proceedings
of RAID’2001, LNCS 2212, pages 172–189, October
2001.
[11] G. Vigna, W. Robertson, V. Kher, and R.A. Kemmerer.
A Stateful Intrusion Detection System for World-Wide
Web Servers. In Proceedings of ACSAC 2003, pages 34–
43, December 2003.
[12] J. Zimmermann, L. M´e, and C. Bidan. An Improved
Reference Flow Control Model for Policy-Based Intru-
sion Detection. In Proceedings of ESORICS 2003, Octo-
ber 2003.
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:36:21 UTC from IEEE Xplore.  Restrictions apply.