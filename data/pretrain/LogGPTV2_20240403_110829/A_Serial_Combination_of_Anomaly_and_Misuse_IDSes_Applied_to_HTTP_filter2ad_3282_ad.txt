### Evaluation of ADFSC Filtering Rate and False Positive Reduction

To evaluate the filtering rate of the ADFSC (Anomaly Detection and Filtered Signature Combination) and its ability to address false positives, we conducted a single misuse detection using our WIDS (Web Intrusion Detection System) component. The results were then compared with those from the ADFSC (see Table 3).

**Table 3: Comparison of Misuse Detection and ADFSC Results**

1. **Severity Levels**: The first column lists the severity levels associated with logged events.
2. **Single Misuse Detection**: The second column presents the results of the single misuse detection using the WIDS on the Supélec web server test set, as described in Section 2.3.
3. **Serial Combination**: The third column shows the results of the serial combination, which integrates the anomaly detection component (Section 5.1) and the WIDS (Section 2.3).
4. **Filtering Rate**: The fourth column indicates the filtering rate observed between the single misuse detection and the serial combination for each severity level.

### Anomaly Detection Component Performance

- **Null Severity Events (As)**: The anomaly detection component filters out 94.25% of null severity logged events. The set of unknown events from misuse detection (Mu) decreases from approximately 1.7 million to about 100,000 events that are unknown to both the anomaly and misuse detection components. These logged events primarily involve requests to static resources such as GIF images and HTML pages. The remaining 4.5412% of events are requests to resources not learned by the anomaly model, which may be new or unrequested during the training phase.

- **Low Severity Levels (1-4)**: The serial combination is highly effective in filtering low severity levels (between 1 and 4). More than 94% of events with severity up to level 4 are filtered out by the anomaly detection component. The filtered events are requests to dynamic resources managed by the webmaster, such as the search engine and some CGI scripts mentioned in Section 2.3. The events not filtered out by the anomaly detection component include unknown uses of the search engine (i.e., unknown parameter combinations) and resources (both static and dynamic) managed by academic authors, which may contain specific encoding or ambiguous file names matching some signatures of the misuse component. The anomaly detector of the ADFSC significantly reduces the number of false positives generated by the WIDS tool, making the FP set negligible compared to the C2 set.

- **Higher Severity Levels (5-7)**: The filtering rate for severity levels between 5 and 7 ranges from 56% to 82%. While severity levels 1 to 4 are more likely to be false positives due to the high sensitivity of the WIDS tool, higher severity levels (5 and above) typically indicate critical events. For these levels, the anomaly detection component effectively addresses false positives by filtering out events that would otherwise be declared critical by the misuse detection component when the ADFSC is used.

### Example of False Positives

- **Count.cgi Program**: The Supélec web server uses the Count.cgi program. Although the current version has no known vulnerabilities, it is important to monitor this activity as an older version might be used without the webmaster's knowledge. In this case, the Count.cgi program is only available in a specific directory. We added the Count.cgi program, its path, and usual parameters to the anomaly model as safe events. This ensures that any other instances of the program on the website are analyzed by the misuse detection component. With single misuse detection, this program caused 227 alarms at level 4, but only 27 alarms with the serial combination. Investigation revealed that the Count.cgi program was incorrectly used by an academic author. Using single misuse detection, the flood of alarms can overwhelm the operator, while the serial combination makes it easier to detect and correct the error.

- **Microsoft FrontPage Extensions**: Other alerts are mainly generated by attempts to exploit Microsoft FrontPage extensions. The low severity level associated with these behaviors is due to the small number of matched signatures and the fact that the attacks were unsuccessful. Since the web server is not vulnerable to these attacks, the operator can add these requests to the anomaly model without canceling any signatures in the misuse component.

- **High Severity Levels (8 and Above)**: Investigations revealed that all alerts at severity levels 8 and above are generated by Nimda worm attempts. In such cases, it is beneficial that the anomaly component does not filter out these events.

### Overall Results

The last line of Table 3 summarizes the overall results for the entire test set. The anomaly detection component filters out 94.52% of the log events, meaning that 2,089,547 events are declared safe. Given that the model is hand-made, the false negative sets from anomaly detection (Af−s, composed of FN and C1) are considered negligible compared to the true negative sets from anomaly detection (At−s, composed of TN and C2). Compared to the results in Section 2.3, the amount of safe events (Es) in HTTP traffic is higher than the 79% reported with the WIDS.

### Performance Analysis

To demonstrate that the serial combination does not overload the intrusion detection process, we compared the CPU-time consumption of the WIDS used alone and the ADFSC. The experiment used one day of logs as a training dataset and six subsequent days as test sets. The training set included 23,499 log entries and 1,350 distinct resources, while the test set had 168,477 log entries and 16,552 distinct resources.

To show the influence of the anomaly model on CPU-time consumption, we incrementally added more resources to the anomaly model. Starting with 100 safe resources, we measured the CPU-time consumption, repeating this up to 900 safe resources. The results, illustrated in Figure 5, show that the ADFSC is less CPU-time consuming than the single misuse detection component. The significant decrease in CPU-time consumption with just 100 resources in the anomaly model is due to the high rate of safe requests targeting a small subset of the web server's resources.

### Related Work

In Section 2.1, we discussed the work of Vigna et al. [11] on IDS designed to monitor web server activity. Here, we discuss related work on the combination of intrusion detection components and policy-based intrusion detection.

#### Intrusion Detection Component Combination

EMERALD [9] and its predecessors (IDES [4] and NIDES [6, 2]) use a parallel combination of intrusion detection components. This involves analyzing incoming events simultaneously with both misuse and anomaly detection components. While standalone misuse and anomaly detection provide two sets of results (intrusive or unknown and safe or unknown), the parallel combination provides four sets of results: As ∩ Mi, As ∩ Mu, Au ∩ Mi, and Au ∩ Mu. Two of these sets, As ∩ Mi and Au ∩ Mu, require further investigation to fully qualify events. This task is handled by a correlation component (resolver). This approach is more generic but requires a resolver adapted to the input data characteristics. There is currently no detailed publication on this resolver's performance with real data.

The parallel architecture implies a double analysis of each event, even when it is known beforehand that some events are intrusive or safe. EMERALD aims to improve intrusion detection for various event types (network, system calls, applications), whereas we focus on HTTP traffic to deduce the most effective combination for improving intrusion detection given the characteristics of the input data set.

#### Policy-Based Anomaly Detection

Many anomaly detectors exist, and it is not our purpose to compare our simple anomaly detector to existing standalone components. DIDAFIT [7, 8] is a policy-based anomaly component that monitors SQL transactions between databases and applications like web servers. Its behavior model is based on allowed queries, similar to our allowed requests. DIDAFIT controls SQL request parameter values, while our model does not control HTTP request parameter values.

### Conclusion

In this paper, we provided a framework for systematically reasoning about the combination of anomaly and misuse components. Depending on the input data set and design objectives, each combination has its advantages. Our measurements in the context of web servers led us to the ADFSC, an architecture where an anomaly detector precedes a misuse detector, accurately feeding potentially intrusive events.

The anomaly detector recognizes safe events, and the unknown events are analyzed by the misuse detector, providing a qualified diagnosis. This reduces the operator's workload and improves their ability to take countermeasures. Monitored events are classified into normal, intrusive, or unqualified classes. Events neither recognized by the anomaly nor misuse detector may correspond to new attacks or unknown safe resources.

A major constraint was designing an anomaly detection component with a low false negative rate. We achieved this with a simple, hand-made model. Experimental results show that the ADFSC drastically reduces false positives and unqualified events. The reduced number of unqualified events allows for manual updates by the operator. Finally, the serial combination of anomaly and misuse detection components presents reasonable CPU-time consumption compared to a standalone misuse detection component.