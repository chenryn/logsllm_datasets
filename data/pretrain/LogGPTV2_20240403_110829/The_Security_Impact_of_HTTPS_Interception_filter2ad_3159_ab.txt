### Elliptic Curves and Signature Methods

When we detect that a handshake is inconsistent with the indicated browser, we check for an exact match with any of the fingerprints we have collected.

### Potential Weaknesses in Fingerprinting Strategy

This strategy has several potential weaknesses. First, multiple products could share a single fingerprint, which seems particularly likely given that developers often use one of a small number of popular TLS libraries (e.g., OpenSSL). Second, if products allow customization, then fingerprints of the default configuration will not match these customized versions.

Surprisingly, our findings indicate that none of the browsers or the 104 products we manually investigated shared fingerprints, except for eight pieces of unwanted software that all use the Komodia Redirector SDK [32]. In other words, these fingerprints uniquely identify a single product. None of the client-side security products we tested allow users to customize TLS settings. However, many corporate middleboxes do allow administrators to specify custom cipher suites. In such cases, we would be able to detect that interception is occurring, but not identify the responsible product.

### Middleboxes and Corporate Proxies

Nearly every major networking hardware manufacturer, including Barracuda, Blue Coat, Cisco, and Juniper, produces middleboxes that support "SSL Inspection." These devices allow organizations to intercept TLS traffic at their network border for analysis, content filtering, and malware detection. In March 2015, Dormann documented products from nearly 60 manufacturers that advertise this functionality [15]. We configured and fingerprinted twelve appliance demos from well-known manufacturers (e.g., Cisco and Juniper) and anecdotally popular companies (e.g., A10 and Forcepoint), as shown in Figure 3. One notable absence is ZScaler SSL Inspection, which provides a cloud-based SSL inspection service but did not provide us with a trial or demo.

### Antivirus Software

We installed, tested, and fingerprinted popular antivirus products based on the software documented by de Carné de Carnavalet and Mannan [12], products previously found to be intercepting connections [27], [46], and a report of popular antivirus products [47]. Products from twelve vendors inject a new root certificate and actively intercept TLS connections. We list the products that intercept connections in Figure 4. 

### Unwanted Software and Malware

Motivated by recent reports of unwanted software intercepting TLS connections, we fingerprinted the Komodia SDK [32], which is used by Superfish, Qustodio, and several pieces of malware [8], [56], and the NetFilter SDK [1], which is used by PrivDog. We conducted our tests in January–March 2016. Our browser heuristics and product fingerprints are available at https://github.com/zakird/tlsfingerprints.

### Measuring TLS Interception

To measure global interception rates, we deployed our heuristics at three network vantage points: Mozilla Firefox update servers, a set of popular e-commerce websites, and the Cloudflare content distribution network. We observed 7.75 billion TLS handshakes across these networks. By deploying the heuristics on different networks, we avoid the bias inherent in any single vantage point. However, as we will discuss, we find varying amounts of interception and abuse on each network. Below, we describe each perspective in detail:

#### Firefox Update Servers

Firefox browsers routinely check for software updates by retrieving an XML document from a central Mozilla server over HTTPS. This check uses Firefox’s standard TLS library (Mozilla NSS) and occurs every 24 hours while the browser is running and on browser launch if the last update occurred more than 24 hours prior. We used Bro [49] to monitor connections to aus5.mozilla.org—the update server used by Firefox versions 43–48—between February 14–26, 2016. During this period, we observed 4.36 billion connections from 45K ASes and 243 of the 249 ISO-defined countries. Because we collected traffic using an on-path monitor instead of on the web server, we do not have access to the HTTP User-Agent header. However, only specific versions of Firefox are configured to connect to the server. Instead of looking for a mismatch with the HTTP User-Agent, we look for a mismatch between the TLS handshake and any of the Firefox versions configured to connect to the server. There is no user-accessible content available on the site, and there should be negligible other traffic. This vantage point provides one of the cleanest perspectives on clients affected by TLS interception. However, it only provides data for Firefox, one of the browsers believed to be least affected by client-side interception software [12].

#### Popular E-commerce Sites

During two weeks in August and September 2015, a set of popular e-commerce sites hosted JavaScript that loaded an invisible pixel from an external server, recording the raw TLS Client Hello, HTTP User-Agent string, and client HTTP headers. This perspective sees traffic from all browsers but may suffer from falsified User-Agent headers. However, because the measurement required JavaScript execution, the dataset excludes simple page fetches. The sites have an international presence, but the connections we observe are likely skewed towards desktop users due to the e-commerce provider's popular mobile applications. The dataset also contains HTTP headers beyond User-Agent, allowing another avenue for detecting interception: looking for proxy-related headers (e.g., X-Forwarded-For and X-BlueCoat-Via) and the modifications documented by Weaver et al. [60].

#### Cloudflare

Cloudflare is a popular CDN and DDoS protection company that serves approximately 5% of all web traffic [25]. Cloudflare provides these services by acting as a reverse proxy. Clients connect to one of Cloudflare’s servers when accessing a website, which serve cached content or proxy requests to the origin server.

### Security of TLS Interception Middleboxes

We evaluated popular network middleboxes that act as TLS interception proxies. We found that nearly all reduce connection security, and five introduce severe vulnerabilities. See Figure 3 for detailed evaluations.

### Product-Specific Interception and Security

We also evaluated various products for their TLS interception and security practices. See Figure 4 for a detailed breakdown, including whether they validate certificates, support modern ciphers, and their overall TLS version grading.