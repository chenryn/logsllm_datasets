\set typeid random(0,99999)    
select * from test_agg where typeid=:typeid;    
pgbench -M prepared -n -r -P 1 -f ./test1.sql -c 64 -j 64 -T 120    
transaction type: ./test1.sql    
scaling factor: 1    
query mode: prepared    
number of clients: 64    
number of threads: 64    
duration: 120 s    
number of transactions actually processed: 151156    
latency average = 50.803 ms    
latency stddev = 2.913 ms    
tps = 1258.934362 (including connections establishing)    
tps = 1259.301582 (excluding connections establishing)    
script statistics:    
 - statement latencies in milliseconds:    
         0.002  \set typeid random(0,99999)    
        50.801  select * from test_agg where typeid=:typeid;    
```    
### 优化2小结    
性能并没有提升，转换为JSONB类型后，每个ELEMETE都增加了头部信息，所以网络传输的空间实际变大了。    
```    
......    
{"id": 172264479, "info": "test", "crt_time": "2017-07-27T20:41:32.365209", "mod_time": null},     
{"id": 172304687, "info": "test", "crt_time": "2017-07-27T20:41:32.365209", "mod_time": null},    
......    
```    
这个优化方法并没有赚到。    
## 优化手段3，网络传输压缩优化    
PostgreSQL支持SSL链接，通过SSL支持压缩和加密传输。    
如果传输带宽有限，使用这种链路是非常不错的选择，但是会消耗一部分客户端和数据库端的CPU资源。    
有一些例子：    
[《PostgreSQL SSL链路压缩例子》](../201508/20150818_01.md)      
[《PostgreSQL ssl ciphers performance 比较》](../201305/20130522_02.md)      
## 优化手段4，只读节点    
这个优化方法简单有效，但是需要投入一些资源，PostgreSQL支持两种备库，物理、逻辑备库。    
物理备库只读，延迟低，不管事务多大，延迟都在毫秒级。但是物理备库只能全库复制。    
逻辑备库可写，同时可以订阅部分数据，但是延迟较高（通常一个订阅通道的速率在3万行/s，一个实例可以支持多个订阅通道，比如每个表一个订阅通道）。    
同时建议数据库节点与APPLICATION节点的网络尽量靠近，甚至将备库部署在业务服务器都是赞许的。    
参考文档：    
[《PostgreSQL 10 流式物理、逻辑主从 最佳实践》](../201707/20170711_01.md)      
## 优化手段5，按用户切分，sharding。    
按用户切分，将数据切分到多个数据库实例。    
按照优化手段1的指标，每个节点可以提供1.3GB/s的输出流量，如果切分到16个节点，可以支持21GB/s的输出流量。完全不用考虑备库。    
中间层可以考虑使用plproxy，中间件等方法。    
[《PostgreSQL 最佳实践 - 水平分库(基于plproxy)》](../201608/20160824_02.md)      
https://github.com/go-pg/sharding    
参考文档    
[《PostgreSQL 9.6 sharding based on FDW & pg_pathman》](../201610/20161027_01.md)      
## 小结    
1、原来单条的存储，用户每次请求，返回1万条记录，所以主机的网络带宽，数据库的数据访问离散IO的放大都是较大的性能阻碍因素。    
使用cluster的方法，将数据按KEY存放，完全消除IO放大的问题，性能提升非常明显。    
使用FILLFACTOR，可以让数据的更新尽量在当前数据块完成，从而不破坏cluster的顺序。解决UPDATE引入的破坏线性相关性问题。    
2、通过聚集(cluster)的方法，将用户需要访问的数据合并成单行(或者按顺序存放)，减少扫描的数据块。查询效率有大幅提升。    
通过扩展带宽或者加入少量的备库就可以满足业务方的需求。    
3、PostgreSQL支持多种聚合方法，数组、KV、JSON。    
但是聚合的方法带来另一个问题，数据的DML变得很麻烦。    
4、通过聚集，被查询的数据靠在一起了，使得数据压缩比更高，同时消除了原来的IO放大的问题，还可以减少多条记录引入的代码跳转额外开销。    
5、聚集后，数据的增、删、改可以通过UDF来实现。PostgreSQL的plpgsql功能很强大，类似Oracle的PL/SQL。同时PostgreSQL还支持pljava, plpython等UDF语言，方便更多的开发者使用。    
最后，推荐的优化方法：    
1、cluster    
2、网络压缩（客户端使用ssl连接数据库）    
3、读写分离    
4、sharding    
建议的优化组合1+4，或者1+3。    
一些可供选择的架构：  
1、一个数据库存储全量数据，提供读写。使用逻辑订阅，将数据分身，拆成多份，提供读写。    
![pic](20170727_03_pic_001.jpg)     
2、一个数据库存储全量数据，提供读写。使用逻辑订阅，将数据分身，拆成多份，提供读写。采用级联逻辑订阅方式，创建更多读写逻辑订阅库。       
![pic](20170727_03_pic_002.jpg)     
3、一个数据库存储全量数据，提供读写。使用逻辑订阅，将数据分身，拆成多份，提供读写。采用级联物理流复制方式，创建更多镜像只读备库。       
![pic](20170727_03_pic_003.jpg)     
4、一个数据库存储全量数据，提供读写。采用物理流复制方式，创建一堆镜像只读备库。       
![pic](20170727_03_pic_004.jpg)     
5、一个数据库存储全量数据，提供读写。采用物理流复制方式，创建一堆镜像只读备库。采用级联物理流复制方式，创建更多镜像只读备库。       
![pic](20170727_03_pic_005.jpg)     
6、前端shard，多个数据库存储全量数据，提供读写。使用逻辑订阅，完全镜像，提供读写。  
![pic](20170727_03_pic_006.jpg)     
7、前端shard，多个数据库存储全量数据，提供读写。使用逻辑订阅，完全镜像，提供读写。采用级联逻辑订阅方式，创建更多读写逻辑订阅库。       
![pic](20170727_03_pic_007.jpg)     
8、前端shard，多个数据库存储全量数据，提供读写。采用物理流复制方式，创建只读备库。采用级联物理流复制方式，创建更多镜像只读备库。       
![pic](20170727_03_pic_008.jpg)     
9、前端shard，多个数据库存储全量数据，提供读写。采用物理流复制方式，创建一堆只读备库。      
![pic](20170727_03_pic_009.jpg)     
10、逻辑订阅、物理流复制都支持SSL加密和压缩链接。或者你还有一种方法来支持链路加密和压缩，使用ECS建立反向隧道：   
[《PostgreSQL SSL链路压缩例子》](../201508/20150818_01.md)  
[《PostgreSQL 如何实现网络压缩传输或加密传输(openssl)》](../201305/20130522_01.md)  
[《使用 ssh -R 建立反向/远程TCP端口转发代理》](../201406/20140614_01.md)  
[《单网卡绑多个IP时如何指定IP出口(VIP出口绑定) - use ip modify route table use vip as src trans in multi-IP bonded env》](../201406/20140618_01.md)  
## 参考    
[《PostgreSQL 聚集存储 与 BRIN索引 - 高并发行为、轨迹类大吞吐数据查询场景解说》](../201702/20170219_01.md)        
[《PostgreSQL 10 流式物理、逻辑主从 最佳实践》](../201707/20170711_01.md)     
sharding 中间件    
https://github.com/dangdangdotcom/sharding-jdbc     
https://github.com/go-pg/sharding/     
[《PostgreSQL 最佳实践 - 水平分库(基于plproxy)》](../201608/20160824_02.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")