### References

1. Y. Ishai, E. Kushilevitz, R. Ostrovsky, and A. Sahai, “Zero-knowledge from secure multiparty computation,” in *39th Annual ACM Symposium on Theory of Computing (STOC)*. ACM Press, 2007, pp. 21–30.
2. M. Jawurek, F. Kerschbaum, and C. Orlandi, “Zero-knowledge using garbled circuits: how to prove non-algebraic statements efficiently,” in *ACM Conference on Computer and Communications Security (CCS) 2013*. ACM Press, 2013, pp. 955–966.
3. J. Katz, V. Kolesnikov, and X. Wang, “Improved non-interactive zero knowledge with applications to post-quantum signatures,” in *ACM Conference on Computer and Communications Security (CCS) 2018*. ACM Press, 2018, pp. 525–537.
4. M. Keller, E. Orsini, and P. Scholl, “Actively secure OT extension with optimal overhead,” in *Advances in Cryptology—Crypto 2015, Part I*, ser. LNCS, vol. 9215. Springer, 2015, pp. 724–741.
5. ——, “MASCOT: Faster malicious arithmetic secure computation with oblivious transfer,” in *ACM Conference on Computer and Communications Security (CCS) 2016*. ACM Press, 2016, pp. 830–842.
6. J. B. Nielsen, P. S. Nordholt, C. Orlandi, and S. S. Burra, “A new approach to practical active-secure two-party computation,” in *Advances in Cryptology—Crypto 2012*, ser. LNCS, vol. 7417. Springer, 2012, pp. 681–700.
7. J. B. Nielsen and C. Orlandi, “LEGO for two-party secure computation,” in *6th Theory of Cryptography Conference—TCC 2009*, ser. LNCS, vol. 5444. Springer, 2009, pp. 368–386.
8. P. Schoppmann, A. Gascón, L. Reichert, and M. Raykova, “Distributed vector-OLE: Improved constructions and implementation,” in *ACM Conference on Computer and Communications Security (CCS) 2019*. ACM Press, 2019, pp. 1055–1072.
9. S. Setty, “Spartan: Efficient and general-purpose zkSNARKs without trusted setup,” in *Advances in Cryptology—Crypto 2020, Part III*, ser. LNCS. Springer, 2020, pp. 704–737.
10. R. S. Wahby, I. Tzialla, A. Shelat, J. Thaler, and M. Walfish, “Doubly-efficient zkSNARKs without trusted setup,” in *IEEE Symposium on Security and Privacy 2018*. IEEE, 2018, pp. 926–943.
11. L. Wang, G. Asharov, R. Pass, T. Ristenpart, and A. Shelat, “Blind certificate authorities,” in *IEEE Symposium on Security and Privacy 2019*. IEEE, 2019, pp. 1015–1032.
12. X. Wang, A. J. Malozemoff, and J. Katz, “EMP-toolkit: Efficient MultiParty computation toolkit,” https://github.com/emp-toolkit, 2016.
13. T. Xie, J. Zhang, Y. Zhang, C. Papamanthou, and D. Song, “Libra: Succinct zero-knowledge proofs with optimal prover computation,” in *Advances in Cryptology—Crypto 2019, Part III*, ser. LNCS, vol. 11694. Springer, 2019, pp. 733–764.
14. K. Yang, X. Wang, and J. Zhang, “More efficient MPC from improved triple generation and authenticated garbling,” in *ACM Conference on Computer and Communications Security (CCS) 2020*. ACM Press, 2020, pp. 1627–1646.
15. K. Yang, C. Weng, X. Lan, J. Zhang, and X. Wang, “Ferret: Fast extension for correlated OT with small communication,” in *ACM Conference on Computer and Communications Security (CCS) 2020*. ACM Press, 2020, pp. 1607–1626.
16. S. Zahur, M. Rosulek, and D. Evans, “Two halves make a whole - reducing data transfer in garbled circuits using half gates,” in *Advances in Cryptology—Eurocrypt 2015, Part II*, ser. LNCS, vol. 9057. Springer, 2015, pp. 220–250.
17. F. Zhang, D. Maram, H. Malvai, S. Goldfeder, and A. Juels, “DECO: Liberating web data using decentralized oracles for TLS,” in *ACM Conference on Computer and Communications Security (CCS) 2020*. ACM Press, 2020, pp. 1919–1938.
18. J. Zhang, T. Xie, Y. Zhang, and D. Song, “Transparent polynomial delegation and its applications to zero-knowledge proof,” in *IEEE Symposium on Security and Privacy 2020*. IEEE, 2020, pp. 859–876.

### Appendix

#### A. Other Functionalities

We review the standard ideal functionality for Oblivious Transfer (OT) in Figure 13.

**Functionality \( F_{\text{OT}} \)**

- **On receiving** \((m_0, m_1)\) with \(|m_0| = |m_1|\) from a sender \(P_A\) and \(b \in \{0, 1\}\) from a receiver \(P_B\), send \(m_b\) to \(P_B\).

![Figure 13: The OT functionality between \(P_A\) and \(P_B\).](fig13.png)

**Functionality \( F_{\text{EQ}} \)**

- **Upon receiving** \(V_A\) from \(P_A\) and \(V_B\) from \(P_B\), send \((V_A, V_B)\) to \(P_B\), and do:
  - If \(P_B\) is honest and \(V_A = V_B\), or if \(P_B\) is corrupted and sends \(\text{abort}\), continue.
  - If \(P_B\) is honest and \(V_A \neq V_B\), or if \(P_B\) is corrupted and sends \(\text{abort}\), then send \(\text{abort}\) to \(P_A\).

![Figure 14: Functionality for a weak equality test.](fig14.png)

In Figure 14, we define a functionality \( F_{\text{EQ}} \) implementing a weak equality test that reveals \(P_A\)'s input to \(P_B\). This functionality can be realized as follows:

1. \(P_B\) commits to \(V_B\).
2. \(P_A\) sends \(V_A\) to \(P_B\).
3. \(P_B\) outputs \((V_A, V_B)\) and aborts if they are not equal, and then opens \(V_B\).
4. If \(P_B\) opened its commitment to a value \(V_B\), then \(P_A\) outputs \((V_A, V_B)\); otherwise, it aborts.

UC commitments can be realized efficiently in the random-oracle model.

#### B. Methods for Batch Checking

We describe two approaches for batch checking of authenticated values.

**First Approach (Cryptographic Hash Function):**

- \(P_A\) sends (in addition to the values \(x_1, \ldots, x_\ell\)) a digest \(h := H(M[x_1], \ldots, M[x_\ell])\) of all the MAC tags.
- \(P_B\) then checks that \(h = H(K[x_1] + \Delta \cdot x_1, \ldots, K[x_\ell] + \Delta \cdot x_\ell)\).
- Modeling \(H\) as a random oracle with \(2\kappa\)-bit output, the soundness error (i.e., the probability that \(P_A\) can successfully cheat about any value) is upper bounded by \(\frac{(q_H + 1)}{2^{2\kappa + 1} \cdot p_r}\), where \(q_H\) denotes the number of queries that \(P_A\) makes to \(H\).
- The communication overhead is only \(2\kappa\) bits, independent of \(\ell\).

**Second Approach (Information-Theoretic):**

1. \(P_A\) sends \(x_1, \ldots, x_\ell \in \mathbb{F}_p\) to \(P_B\).
2. \(P_B\) picks uniform \(\chi_1, \ldots, \chi_\ell \in \mathbb{F}_{p_r}\) and sends them to \(P_A\).
3. \(P_A\) computes \(M[x] := \sum_{i=1}^\ell \chi_i \cdot M[x_i]\) and \(K[x] := \sum_{i=1}^\ell \chi_i \cdot K[x_i]\).
4. \(P_B\) computes \(x := \sum_{i=1}^\ell \chi_i \cdot x_i \in \mathbb{F}_{p_r}\) and accepts the opened values if and only if \(M[x] = K[x] + \Delta \cdot x\).

The soundness error of this approach is given by Lemma 2.

**Lemma 2.** Let \(x_1, \ldots, x_\ell \in \mathbb{F}_p\) and \(M[x_1], \ldots, M[x_\ell] \in \mathbb{F}_{p_r}\) be known to \(P_A\), and let \(\Delta\) and \(\{K[x_i] = M[x_i] - \Delta \cdot x_i\}_{i=1}^\ell\) be given to \(P_B\). The probability that \(P_A\) can successfully open values \((x_1', \ldots, x_\ell') \neq (x_1, \ldots, x_\ell)\) to \(P_B\) is at most \(\frac{2}{p_r}\).

Proof: Fix \((x_1', \ldots, x_\ell') \neq (x_1, \ldots, x_\ell)\). If we let \(\omega = \sum_{i=1}^\ell \chi_i \cdot (x_i' - x_i)\), then the probability (over uniform choice of \(\{\chi_i\}\)) that \(\omega = 0\) is at most \(\frac{1}{p_r}\). Assume \(\omega \neq 0\). If \(P_A\) sends \(M \in \mathbb{F}_{p_r}\), \(P_B\) accepts only if \(M = \sum_{i=1}^\ell \chi_i \cdot M[x_i] + \Delta \cdot \omega\). Moreover, \(P_A\) succeeds if and only if \(\Delta = \omega^{-1} \cdot (M - \sum_{i=1}^\ell \chi_i \cdot M[x_i])\), which occurs with probability \(\frac{1}{p_r}\).

We can make the second approach non-interactive, using the Fiat-Shamir heuristic in the random-oracle model, by computing the coefficients \(\{\chi_i\}\) as the output of a hash function \(H\) evaluated on the values \(\{x_i\}\) sent by \(P_A\) in the first step. Adapting the above proof, one can show that this has soundness error at most \(\frac{q_H + 2}{p_r}\).

#### C. Construction of COPEe

In Figure 15, we present a protocol \(\Pi_{p,r}^{\text{COPEe}}\) that UC-realizes \(F_{p,r}^{\text{COPEe}}\) in the \(F_{\text{OT}}\)-hybrid model. This protocol follows the construction of Keller et al. [50], which is based on the IKNP OT-extension protocol [45] and Gilboa’s approach [34] for oblivious product evaluation. The main difference from prior work is that we support the subfield case.

**Lemma 3.** If PRF is a pseudorandom function, then \(\Pi_{p,r}^{\text{COPEe}}\) UC-realizes \(F_{p,r}^{\text{COPEe}}\) in the \(F_{\text{OT}}\)-hybrid model.

The proof of Lemma 3 can be straightforwardly obtained by following the proof of Keller et al. [50], and is thus omitted.

#### D. Proof of Theorem 3

We first consider the case of a malicious \(P_A\) and then consider the case of a malicious \(P_B\). In each case, we construct a PPT simulator \(S\) given access to \(F_{p,r}^{\text{spsVOLE}}\) that runs the PPT adversary \(A\) as a subroutine, and emulates functionalities \(F_{\text{OT}}\), \(F_{p,r}^{\text{spsVOLE}}\), and \(F_{\text{EQ}}\). We always implicitly assume that \(S\) passes all communication between \(A\) and environment \(Z\).

**Malicious \(P_A\):**

Every time the extend procedure is run (on input \(n\)), \(S\) interacts with \(A\) as follows:

1. \(S\) emulates \(F_{p,r}^{\text{spsVOLE}}\) and records the values \((a, c)\) that \(A\) sends to \(F_{p,r}^{\text{spsVOLE}}\). When \(A\) sends the message \(a' \in \mathbb{F}_p\), then \(S\) sets \(\beta := a' + a \in \mathbb{F}_p\) and \(\delta := c\).
2. For \(i \in [1, h)\), \(S\) samples \(K^i \leftarrow \{0, 1\}^\kappa\); it also samples \(K^h \leftarrow \mathbb{F}_{p_r}\). Then for \(i \in [h]\), \(S\) emulates \(F_{\text{OT}}\) by receiving \(\bar{\alpha}_i \in \{0, 1\}\) from \(A\), and returning \(K^i_{\bar{\alpha}_i} = K^i\) to \(A\). It sets \(\alpha := \alpha_1 \cdots \alpha_h\) and defines \(u \in \mathbb{F}_p^n\) as the vector that is 0 everywhere except that \(u[\alpha] := \beta\). Next, \(S\) computes \(\{v_j\}_{j \neq \alpha} := \text{GGM}(a, \{K^i_{\bar{\alpha}_i}\}_{i \in [h]})\).
3. \(S\) picks \(d \leftarrow \mathbb{F}_{p_r}\) and sends it to \(A\). Then, \(S\) defines \(w\) as the vector of length \(n\) with \(w[i] := v_i\) for \(i \neq \alpha\) and \(w[\alpha] := \delta - (d + \sum_{i \neq \alpha} w[i])\).
4. \(S\) emulates \(F_{p,r}^{\text{spsVOLE}}\) and receives \(\{X_i\}_{i \in [r]}\) from \(A\), and sets \(x' := \sum_{i=0}^{r-1} \chi_i \cdot w[i] - \sum_{i=0}^{r-1} x'[i] \cdot X_i\).
5. \(S\) receives \(\{\chi_i\}_{i \in [0, n)}\) and \(x^* \in \mathbb{F}_r^p\) from \(A\), and sets \(x' := x^* + x \in \mathbb{F}_r^p\).
6. \(S\) records \(V_A \in \mathbb{F}_{p_r}\) that \(A\) sends to \(F_{\text{EQ}}\). It then computes \(V'_A := \sum_{i=0}^{r-1} z[i] \cdot X_i \in \mathbb{F}_{p_r}\) and does:
   - If \(x' = \beta \cdot \chi_\alpha\), then \(S\) checks whether \(V_A = V'_A\). If so, \(S\) sends \(\text{true}\) to \(A\), and sends \(u, w\) to \(F_{p,r}^{\text{spsVOLE}}\). Otherwise, \(S\) sends \(\text{abort}\) to \(A\) and aborts.
   - Otherwise, \(S\) computes \(\Delta' := (V'_A - V_A) / (\beta \cdot \chi_\alpha - x') \in \mathbb{F}_{p_r}\) and sends a global-key query \((\text{guess}, \Delta')\) to \(F_{p,r}^{\text{spsVOLE}}\). If \(F_{p,r}^{\text{spsVOLE}}\) returns \(\text{success}\), \(S\) sends \(\text{true}\) to \(A\), and sends \(u, w\) to \(F_{p,r}^{\text{spsVOLE}}\). Otherwise, \(S\) sends \(\text{abort}\) to \(A\) and aborts.
7. Whenever \(A\) sends a global-key query \((\text{guess}, \tilde{\Delta})\) to \(F_{p,r}^{\text{spsVOLE}}\), \(S\) forwards the query to \(F_{p,r}^{\text{spsVOLE}}\) and returns the answer to \(A\). If the answer is \(\text{abort}\), \(S\) aborts.

In the above simulation, if \(A\) succeeds in guessing \(\Delta\), then \(S\) simulates \(A\)'s view using \(\Delta\) without making any further global-key query to \(F_{p,r}^{\text{spsVOLE}}\).

We claim that the joint distribution of the view of \(A\) and the output of the honest \(P_B\) in the ideal-world execution above is computationally indistinguishable from their distribution in the real-world execution. By the standard analysis of the GGM construction, it is not hard to see that \(d\) and the \(\{K^i\}\) sent to \(A\) are indistinguishable from random.