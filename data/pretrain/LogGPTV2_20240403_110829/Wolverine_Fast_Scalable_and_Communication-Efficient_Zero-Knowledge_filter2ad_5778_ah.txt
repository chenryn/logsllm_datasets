[46] Y. Ishai, E. Kushilevitz, R. Ostrovsky, and A. Sahai, “Zero-knowledge
from secure multiparty computation,” in 39th Annual ACM Symposium
on Theory of Computing (STOC). ACM Press, 2007, pp. 21–30.
[47] M. Jawurek, F. Kerschbaum, and C. Orlandi, “Zero-knowledge using
garbled circuits: how to prove non-algebraic statements efﬁciently,” in
ACM Conf. on Computer and Communications Security (CCS) 2013.
ACM Press, 2013, pp. 955–966.
[48] J. Katz, V. Kolesnikov, and X. Wang, “Improved non-interactive zero
knowledge with applications to post-quantum signatures,” in ACM Conf.
on Computer and Communications Security (CCS) 2018. ACM Press,
2018, pp. 525–537.
[49] M. Keller, E. Orsini, and P. Scholl, “Actively secure OT extension with
optimal overhead,” in Advances in Cryptology—Crypto 2015, Part I, ser.
LNCS, vol. 9215. Springer, 2015, pp. 724–741.
[50] ——, “MASCOT: Faster malicious arithmetic secure computation with
oblivious transfer,” in ACM Conf. on Computer and Communications
Security (CCS) 2016. ACM Press, 2016, pp. 830–842.
[51] J. B. Nielsen, P. S. Nordholt, C. Orlandi, and S. S. Burra, “A new
approach to practical active-secure two-party computation,” in Advances
in Cryptology—Crypto 2012, ser. LNCS, vol. 7417.
Springer, 2012,
pp. 681–700.
[52] J. B. Nielsen and C. Orlandi, “LEGO for two-party secure computation,”
in 6th Theory of Cryptography Conference—TCC 2009, ser. LNCS, vol.
5444. Springer, 2009, pp. 368–386.
[53] P. Schoppmann, A. Gasc´on, L. Reichert, and M. Raykova, “Distributed
vector-OLE: Improved constructions and implementation,” in ACM Conf.
on Computer and Communications Security (CCS) 2019. ACM Press,
2019, pp. 1055–1072.
[54] S. Setty, “Spartan: Efﬁcient and general-purpose zkSNARKs without
trusted setup,” in Advances in Cryptology—Crypto 2020, Part III, ser.
LNCS. Springer, 2020, pp. 704–737.
[55] R. S. Wahby, I. Tzialla, A. Shelat, J. Thaler, and M. Walﬁsh, “Doubly-
efﬁcient zkSNARKs without trusted setup,” in IEEE Symp. Security and
Privacy 2018.
IEEE, 2018, pp. 926–943.
[56] L. Wang, G. Asharov, R. Pass, T. Ristenpart, and A. Shelat, “Blind
certiﬁcate authorities,” in IEEE Symp. Security and Privacy 2019. IEEE,
2019, pp. 1015–1032.
[57] X. Wang, A. J. Malozemoff, and J. Katz, “EMP-toolkit: Efﬁcient
MultiParty computation toolkit,” https://github.com/emp-toolkit, 2016.
[58] T. Xie, J. Zhang, Y. Zhang, C. Papamanthou, and D. Song, “Libra:
Succinct zero-knowledge proofs with optimal prover computation,” in
Advances in Cryptology—Crypto 2019, Part III, ser. LNCS, vol. 11694.
Springer, 2019, pp. 733–764.
[59] K. Yang, X. Wang, and J. Zhang, “More efﬁcient MPC from improved
triple generation and authenticated garbling,” in ACM Conf. on Computer
and Communications Security (CCS) 2020. ACM Press, 2020, pp.
1627–1646.
[60] K. Yang, C. Weng, X. Lan, J. Zhang, and X. Wang, “Ferret: Fast
extension for correlated OT with small communication,” in ACM Conf.
on Computer and Communications Security (CCS) 2020. ACM Press,
2020, pp. 1607–1626.
[61] S. Zahur, M. Rosulek, and D. Evans, “Two halves make a whole -
reducing data transfer in garbled circuits using half gates,” in Advances
in Cryptology—Eurocrypt 2015, Part II, ser. LNCS, vol. 9057. Springer,
2015, pp. 220–250.
[62] F. Zhang, D. Maram, H. Malvai, S. Goldfeder, and A. Juels, “DECO:
Liberating web data using decentralized oracles for TLS,” in ACM Conf.
on Computer and Communications Security (CCS) 2020. ACM Press,
2020, pp. 1919–1938.
[63] J. Zhang, T. Xie, Y. Zhang, and D. Song, “Transparent polynomial
delegation and its applications to zero knowledge proof,” in IEEE Symp.
Security and Privacy 2020.
IEEE, 2020, pp. 859–876.
A. Other Functionalities
APPENDIX
We review the standard ideal functionality for oblivious
transfer (OT) in Figure 13.
Functionality FOT
On receiving (m0, m1) with |m0| = |m1| from a sender PA
and b ∈ {0, 1} from a receiver PB, send mb to PB.
Fig. 13: The OT functionality between PA and PB.
Functionality FEQ
Upon receiving VA from PA and VB from PB, send (VA
and VA to PB, and do:
• If PB is honest and VA = VB, or is corrupted and sends
• If PB is honest and VA (cid:54)= VB, or is corrupted and sends abort,
continue, then send (VA
?= VB) to PA.
?= VB)
then send abort to PA.
Fig. 14: Functionality for a weak equality test.
that reveals PA’s input
In Figure 14 we deﬁne a functionality FEQ implementing
a weak equality test
to PB. This
functionality can be easily realized as follows: (1) PB commits
?= VB)
to VB; (2) PA sends VA to PB; (3) PB outputs (VA
and aborts if they are not equal, and then opens VB; (4) if
PB opened its commitment to a value VB, then PA outputs
?= VB); otherwise it aborts. UC commitments can be
(VA
realized efﬁciently in the random-oracle model.
B. Methods for Batch Checking
We describe two approaches for batch checking of au-
thenticated values. The ﬁrst relies on a cryptographic hash
function H. Speciﬁcally, PA sends (in addition to the values
x1, . . . , x(cid:96) themselves) a digest h := H(M[x1], . . . , M[x(cid:96)]) of
?= H(K[x1] + ∆ ·
all the MAC tags; PB then checks that h
x1, . . . , K[x(cid:96)] + ∆ · x(cid:96)). Modeling H as a random oracle with
2κ-bit output, it is not hard to see that the soundness error (i.e.,
the probability that PA can successfully cheat about any value)
is upper bounded by (q2
H+1)/22κ+1/pr, where qH denotes the
number of queries that PA makes to H. The communication
overhead is only 2κ bits, independent of (cid:96).
The second approach, which is information theoretic, works
as follows:
1) PA sends x1, . . . , x(cid:96) ∈ Fp to PB.
3) PA computes M[x] :=(cid:80)(cid:96)
2) PB picks uniform χ1, . . . , χ(cid:96) ∈ Fpr and sends them to PA.
4) PB computes x := (cid:80)(cid:96)
i=1 χi · M[xi], and sends it to PB.
(cid:80)(cid:96)
i=1 χi · xi ∈ Fpr and K[x]
:=
i=1 χi · K[xi] ∈ Fpr. It accepts the opened values if
and only if M[x] = K[x] + ∆ · x.
The soundness error of this approach is given by Lemma 2.
Lemma 2. Let x1, . . . , x(cid:96) ∈ Fp and M[x1], . . . , M[x(cid:96)] ∈ Fpr
known to PA, and let ∆ and
be arbitrary
values
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:45 UTC from IEEE Xplore.  Restrictions apply. 
1088
Protocol Πp,r
COPEe
Let m = (cid:100)log p(cid:101) and PRF be a keyed function.
Initialize: This initialization procedure is executed only once.
1) For i ∈ [rm], PA samples K i
1 ← {0, 1}κ. PB samples
∆ ← Fpr and lets ∆B = (∆1, . . . , ∆rm) ∈ {0, 1}rm be
its bit-decomposition.
1) to FOT and PB sends
∆i ∈ {0, 1} to FOT, which returns K i
2) For i ∈ [rm], PA sends (K i
0, K i
0, K i
∆i to PB.
Extend: This procedure can be executed multiple times. For the
jth input u ∈ Fp from PA, the parties execute the following:
3) For i ∈ [rm], do the following in parallel:
wi
0, wi
∆i , j).
1, j) with
a) PA sets wi
1 := PRF(K i
∆i := PRF(K i
1 ∈ Fp; PB computes wi
0, j) and wi
1 − u ∈ Fp to PB.
∆i + ∆i · τ i = wi
0 − ∆i · u ∈ Fp.
4) Let v = (v1, . . . , vrm) and w = (w1
0 ) such that
5) PA outputs w = (cid:104)g, w(cid:105) ∈ Fpr and PB outputs v = (cid:104)g, v(cid:105) ∈
0 := PRF(K i
0 − wi
b) PA sends τ i := wi
c) PB computes vi := wi
w = v + u · ∆B ∈ Frm
p .
Fpr , where w = v + ∆ · u ∈ Fpr .
Fig. 15: COPEe protocol in the FOT-hybrid model.
0, . . . , wrm
1, . . . , x(cid:48)
(cid:96)) (cid:54)= (x1, . . . , x(cid:96)) to PB is at most 2/pr.
{K[xi] = M[xi] − ∆ · xi}(cid:96)
i=1, for uniform ∆ ∈ Fpr, be given
to PB. The probability that PA can successfully open values
(x(cid:48)
(cid:96)) (cid:54)= (x1, . . . , x(cid:96)) sent by PA in the ﬁrst
Proof. Fix (x(cid:48)
i − xi), then the probability
i=1 χi · (x(cid:48)
step. If we let ω
(over uniform choice of {χi}) that ω = 0 is at most 1/pr.
Assume ω (cid:54)= 0. If PA sends M ∈ Fpr, PB accepts only if
(cid:96)(cid:88)
1, . . . , x(cid:48)
χi · K[xi] + ∆ ·
·χi · x
(cid:48)
i
M =
i=1
χi · (M[xi] − ∆ · xi) + ∆ ·
χi · x
(cid:48)
i
(cid:96)(cid:88)
i=1
def= (cid:80)(cid:96)
(cid:96)(cid:88)
(cid:96)(cid:88)
(cid:96)(cid:88)
i=1
i=1
=
=
χi · M[xi] + ∆ · ω.
i=1
Moreover, PA succeeds iff ∆ = ω−1 · (M −(cid:80)(cid:96)
Everything in the ﬁnal expression is ﬁxed except for ∆.
i=1 χi · M[xi]),
which occurs with probability 1/pr.
We can make the second approach non-interactive, using
the Fiat-Shamir heuristic in the random-oracle model, by
computing the coefﬁcients {χi} as the output of a hash
function H evaluated on the values {xi} sent by PA in the
ﬁrst step. Adapting the above proof, one can show that this
has soundness error at most (qH + 2)/pr.
C. Construction of COPEe
In Figure 15, we present a protocol Πp,r
COPEe that UC-realizes
F p,r
COPEe in the FOT-hybrid model. This protocol follows the
construction of Keller et al. [50], which is in turn based on the
IKNP OT-extension protocol [45] and Gilboa’s approach [34]
for oblivious product evaluation. The main difference from
prior work is that we support the subﬁeld case.
Lemma 3. If PRF is a pseudorandom function, then Πp,r
UC-realizes F p,r
COPEe in the FOT-hybrid model.
COPEe
The proof of Lemma 3 can be straightforwardly obtained by
following the proof of Keller et al. [50], and is thus omitted.
D. Proof of Theorem 3
¯αi
}i∈[h]).
(α,{K i
sVOLE by recording (x, z) from A.
We ﬁrst consider the case of a malicious PA and then
consider the case of a malicious PB. In each case, we construct
a PPT simulator S given access to F p,r
spsVOLE that runs the PPT
adversary A as a subroutine, and emulates functionalities FOT,
F p,r
sVOLE, and FEQ. We always implicitly assume that S passes
all communication between A and environment Z.
Malicious PA. Every time the extend procedure is run (on
input n), S interacts with A as follows:
1) S emulates F p,r
sVOLE and records the values (a, c) that A
sVOLE. When A sends the message a(cid:48) ∈ Fp,
sends to F p,r
then S sets β := a(cid:48) + a ∈ Fp and δ := c.
2) For i ∈ [1, h), S samples K i ← {0, 1}κ; it also samples
K h ← Fpr. Then for i ∈ [h], S emulates FOT by receiving
:= K i to A. It
¯αi ∈ {0, 1} from A, and returning K i
sets α := α1 ··· αh and deﬁnes u ∈ Fn
¯αi
p as the vector that
is 0 everywhere except that u[α] := β. Next, S computes
{vj}j(cid:54)=α := GGM
(cid:48)
3) S picks d ← Fpr and sends it to A. Then, S deﬁnes w
as the vector of length n with w[i] := vi for i (cid:54)= α and
w[α] := δ −(cid:0)d +(cid:80)
A :=(cid:80)n−1
i(cid:54)=α w[i](cid:1).
p and x(cid:48) :=(cid:80)r−1
i=0 χi · w[i] −(cid:80)r−1
4) S emulates F p,r
p from A, and sets x(cid:48) :=
5) S receives {χi}i∈[0,n) and x∗ ∈ Fr
i=0 x(cid:48)[i] · Xi.
x∗ + x ∈ Fr
6) S records VA ∈ Fpr that A sends to FEQ. It then computes
i=0 z[i] · Xi ∈ Fpr and does:
V (cid:48)
A. If so, S
• If x(cid:48) = β · χα, then S checks whether VA = V (cid:48)
sends true to A, and sends u, w to F p,r
spsVOLE. Otherwise,
S sends abort to A and aborts.
A − VA) /(β · χα −
• Otherwise, S computes ∆(cid:48)
x(cid:48)) ∈ Fpr and sends a global-key query (guess, ∆(cid:48)) to
F p,r
spsVOLE returns success, S sends true to A,
spsVOLE. If F p,r
spsVOLE. Otherwise, S sends abort
and sends u, w to F p,r
to A and aborts.
7) Whenever A sends a global-key query (guess, ˜∆) to func-
tionality F p,r
spsVOLE and
returns the answer to A. If the answer is abort, S aborts.
In the above simulation, if A succeeds to guess ∆, then S
simulates the A’s view using ∆ without making any further
global-key query to F p,r
We claim that the joint distribution of the view of A and the
output of the honest PB in the ideal-world execution above is
computationally indistinguishable from their distribution in the
real-world execution. By the standard analysis of the GGM
construction, it is not hard to see that d and the {K i
} sent to