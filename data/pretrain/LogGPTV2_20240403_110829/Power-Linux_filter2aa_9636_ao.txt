+ dn: olcOverlay={0}memberof,olcDatabase={2}hdb,cn=config
+ objectClass: olcConfig
+ objectClass: olcMemberOf
+ objectClass: olcOverlayConfig
+ objectClass: top
+ olcOverlay: memberof
+ olcMemberOfDangling: ignore
+ olcMemberOfRefInt: TRUE
+ olcMemberOfGroupOC: groupOfUniqueNames
+ olcMemberOfMemberAD: uniqueMember
+ olcMemberOfMemberOfAD: memberOf
```
新增 refint1.ldif 文件
```diff
vim refint1.ldif
+ dn: cn=module{0},cn=config
+ add: olcmoduleload
+ olcmoduleload: refint
```
新增 refint2.ldif 文件
```diff
vim refint2.ldif
+ dn: olcOverlay=refint,olcDatabase={2}hdb,cn=config
+ objectClass: olcConfig
+ objectClass: olcOverlayConfig
+ objectClass: olcRefintConfig
+ objectClass: top
+ olcOverlay: refint
+ olcRefintAttribute: memberof uniqueMember  manager owner
```
依次执行下面命令，加载配置，顺序不能错
```bash
ldapadd -Q -Y EXTERNAL -H ldapi:/// -f add-memberof.ldif
ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f refint1.ldif
ldapadd -Q -Y EXTERNAL -H ldapi:/// -f refint2.ldif
```
到此，配置修改完了，在上述基础上，我们来创建一个叫做 fox company 的组织，并在其下创建一个 admin 的组织角色（该组织角色内的用户具有管理整个 LDAP 的权限）和 People 和 Group 两个组织单元,新增配置文件
```diff
vim base.ldif
+ dn: dc=fox,dc=com
+ objectClass: top
+ objectClass: dcObject
+ objectClass: organization
+ o: Fox Company
+ dc: fox
+ dn: cn=admin,dc=fox,dc=com
+ objectClass: organizationalRole
+ cn: admin
+ dn: ou=People,dc=fox,dc=com
+ objectClass: organizationalUnit
+ ou: People
+ dn: ou=Group,dc=fox,dc=com
+ objectClass: organizationalRole
+ cn: Group
```
执行命令，添加配置, 这里要注意修改域名为自己配置的域名，然后需要输入上面我们生成的密码
```bash
ldapadd -x -D cn=admin,dc=fox,dc=com -W -f base.ldif
# 这里是 123456
```
通过以上的所有步骤，我们就设置好了一个 LDAP 目录树：其中基准 dc=fox,dc=com 是该树的根节点，其下有一个管理域 cn=admin,dc=fox,dc=com 和两个组织单元 ou=People,dc=fox,dc=com 及 ou=Group,dc=fox,dc=com。
**测试连接**
这里先关一下防火墙
```
service firewalld stop
```
连接工具使用 LdapAdmin
#### PhpLdapAdmin
以下部分内容来自 [[LDAP安装和基本管理手记](https://neversec.top/20180329/LDAP安装和基本管理手记.html)] 仅作排版处理和部分内容处理
```bash
yum -y install epel-release
yum -y install httpd
yum -y install phpldapadmin
```
```diff
vim /etc/httpd/conf.d/phpldapadmin.conf
+ Alias /phpldapadmin /usr/share/phpldapadmin/htdocs
+ Alias /ldapadmin /usr/share/phpldapadmin/htdocs
+ 
+   
+     # Apache 2.4
+     Require all granted
+     Allow from all
+   
+   
+     # Apache 2.2
+     Order Deny,Allow
+     Allow from all
+   
+ 
```
```diff
vim /etc/phpldapadmin/config.php
# 去掉注释 并删除原来的配置
+ $servers->setValue('login','attr','dn');
- $servers->setValue('login','attr','uid');
```
```bash
#重启服务
systemctl restart httpd
```
访问 `http://ip/ldapadmin`，点击登录。CN 填写域信息`cn=admin,dc=fox,dc=com`，密码填写自己设置的密码。
---
### Snort
Snort 搭建与使用内容访问 [安防设施搭建使用](../../Security/BlueTeam/实验/安防设施搭建使用.md#snort) Snort 部分
---
### Suricata
Suricata 搭建与使用内容访问 [安防设施搭建使用](../../Security/BlueTeam/实验/安防设施搭建使用.md#suricata) Suricata 部分
---
### tripwire
**描述**
当服务器遭到黑客攻击时，在多数情况下，黑客可能对系统文件等等一些重要的文件进行修改。对此，我们用 Tripwire 建立数据完整性监测系统。虽然 它不能抵御黑客攻击以及黑客对一些重要文件的修改，但是可以监测文件是否被修改过以及哪些文件被修改过，从而在被攻击后有的放矢的策划出解决办法。
Tripwire 的原理是 Tripwire 被安装、配置后，将当前的系统数据状态建立成数据库，随着文件的添加、删除和修改等等变化，通过系统数据现 状与不断更新的数据库进行比较，来判定哪些文件被添加、删除和修改过。正因为初始的数据库是在 Tripwire 本体被安装、配置后建立的原因，我们务必应 该在服务器开放前，或者说操作系统刚被安装后用 Tripwire 构建数据完整性监测系统。
Tripwire 可以对要求校验的系统文件进行类似 md5 的运行，而生成一个唯一的标识，即 "快照"snapshot。当这些系统文件的大小、inode 号、权限、时间等任意属性被修改后，再次运行 Tripwire，其会进行前后属性的对比，并生成相关的详细报告。
**项目地址**
- http://sourceforge.net/projects/tripwire/files/
**安装**
```bash
yum install -y gcc-c++
yum install -y glibc-headers
# 下载
wget https://jaist.dl.sourceforge.net/project/tripwire/tripwire-src/tripwire-2.4.2.2/tripwire-2.4.2.2-src.tar.bz2
# 解压
tar -jxvf tripwire-2.4.2.2-src.tar.bz2
cd tripwire-2.4.2.2-src
./configure --prefix=/opt/tripwire  # 设置安装目录
# 编译并安装
make
make install
```
```bash
license agreement. [do not accept] accept # 输入 "accept" 同意协议。
Continue with installation? [y/n] y # 键入 y 继续安装。
Enter the site keyfile passphrase: # 输入 "site keyfile" 口令（输入后不会显示），并且记住这个口令。
Verify the site keyfile passphrase: # 再次确认 "site keyfile" 口令。
Enter the local keyfile passphrase: # 输入 "local keyfile" 口令（输入后不会显示），并且记住这个口令。
Verify the local keyfile passphrase: # 再次确认 "local keyfile" 口令。
Please enter your site passphrase: # 输入 "site keyfile" 口令（输入后不会显示）第一次。
Please enter your site passphrase: # 输入 "site keyfile" 口令（输入后不会显示）第二次。
```
**文件说明**
配置文件：定义数据库、策略文件和 Tripwire 可执行文件的位置：
```
/opt/tripwire/etc/twcfg.txt
```
策略：定义检测的对象及违规时采取的行为：
```
/opt/tripwire/etc/twpol.txt
```
数据库：用于存放生成的快照：
```
/opt/tripwire/lib/tripwire/$(HOSTNAME).twd
```
Tripwire 为了自身的安全，防止自身被篡改，也会对自身进行加密和签名处理。其中，包括两个密钥：
* site 密钥：用于保护策略文件和配置文件，只要使用相同的策略和配置的机器，都可以使用相同的 site 密钥：
  ```
  /usr/local/tripwire/etcsite.key
  ```
* local 密钥：用户保护数据库和分析报告，这肯定不会重复的：
  ```
  /usr/local/tripwire/etc/$(HOSTNAME)-local.key
  ```
**设置 tripwire**
编辑 twcfg.txt 文件
```bash
vim /opt/tripwire/etc/twcfg.txt
LOOSEDIRECTORYCHECKING =false  # 将 false 的值变为 true（不监测所属目录的数据完整性）
LOOSEDIRECTORYCHECKING =true   # 变为此状态
REPORTLEVEL =3                 # 将3变为4（改变监测结果报告的等级）
REPORTLEVEL =4                 # 变为此状态
```
建立加密格式
```bash
cd /opt/tripwire/etc
/opt/tripwire/sbin/twadmin --create-cfgfile -S site.key twcfg.txt # 从文本配置文件建立加密格式配
Please enter your site passphrase:                                # 输入“site keyfile”口令
```
**初始化数据库**
```bash
/opt/tripwire/sbin/tripwire --init    # 初始化数据库
Please enter your local passphrase:   # 输入“local keyfile”口令
```
**更新数据库**
当你更新了 twpol.txt 后需用此命令更新数据库
```bash
cd /opt/tripwire
./sbin/tripwire --update-policy --secure-mode low /opt/tripwire/etc/twpol.txt
Please enter your local passphrase: # 输入“local keyfile”口令
Please enter your site passphrase:  # 输入“site keyfile”口令
```
**检查文件异动**
安装完 tripwire 后你可以定期检查文件是否存在异动。加上 interactive 在当前显示结果。
```
/sbin/tripwire --check --interactive
```
**查看报告**
所有 tripwire 的报告以 `.twr` 后缀保存在 `lib/tripwire` 目录下，需要使用 twprint 命令来转化成文本格式。
```
./sbin/twprint --print-report --twrfile /lib/tripwire/report/localhost.localdomain-20111225-154220.twr>/tmp/tripwire_readable.txt
```
**软件包方式安装**
还有一种方法是软件包安装
```bash
yum -y install tripwire
```
`注 : 软件包安装的配置文件在 /etc/tripwire`
使用软件包安装需要手动生成密钥文件
```
tripwire-setup-keyfiles
```
该命令将生成两个密钥文件“site-key”和“local-key”，
使用下面的命令从 tripwire 生成日志错误。
```bash
sudo sh -c "tripwire --check | grep Filename > no-directory.txt"
```
所有不存在系统上的目录和文件都列在文件'mo-directory.txt'中
```bash
cat no-directory.txt
```
使用以下 bash 脚本编辑 tripwire 配置'twpol.txt'
```bash
for f in $(grep "Filename:" no-directory.txt | cut -f2 -d:); do
sed -i "s|\($f\) |#\\1|g" /etc/tripwire/twpol.txt
done
```
初始化 tripwire 数据库
```bash
twadmin -m P /etc/tripwire/twpol.txt    # 使用 twadmin 命令重新生成并重新签署 tripwire配置
tripwire --init
```
其余使用和编译安装无异,更多详情请参考 https://www.howtoing.com/monitoring-and-detecting-modified-files-using-tripwire-on-centos-7
---
## 设施配置
### f8x
**描述**
大多数场景下，在不同的云购买一些 vps 服务器用于部署红 / 蓝队设施，不能做到开箱即用，使用 f8x 可以快速部署所需要的各类服务。同时兼顾到本地 VM 虚拟机的需求，可以选择走 socket 代理进行安装部署，Proxychains-ng 也会自动安装，只需做好 Proxychains-ng 配置即可。
**项目地址**
- https://github.com/ffffffff0x/f8x
**安装**
```bash
wget -O f8x https://f8x.io/ && mv --force f8x /usr/local/bin/f8x && chmod +x /usr/local/bin/f8x
f8x -h
```
**安装基础工具**
```bash
f8x -b
```
**安装渗透环境**
```bash
f8x -k
```
**安装python3.9**
```bash
f8x -py39
```
**安装 oraclejdk11**
```
f8x -oracle11
```
**更多内容**
- https://github.com/ffffffff0x/f8x/blob/main/README.zh-cn.md
### terraform
**描述**
Terraform 是一个 IT 基础架构自动化编排工具。具体的说就是可以用代码来管理维护 IT 资源，比如针对 AWS，我们可以用它创建，修改，删除 S3 Bucket, Lambda, EC2 实例，Kinesis， VPC 等各种资源。并且在真正运行之前可以看到执行计划(即干运行-dryrun)。由于状态保存到文件中，因此能够离线方式查看资源情况。
**项目地址**
- https://github.com/hashicorp/terraform
**安装**
```bash
wget https://releases.hashicorp.com/terraform/1.2.1/terraform_1.2.1_linux_amd64.zip
unzip terraform_1.2.1_linux_amd64.zip
mv --force terraform /usr/local/bin/terraform > /dev/null 2>&1 && chmod +x /usr/local/bin/terraform
terraform -h
```
**更多内容**
- [terraform](./实验/terraform.md)
---
### pulumi
**项目地址**
- https://github.com/pulumi/pulumi
**安装**
```bash
curl -fsSL https://get.pulumi.com | sh -s -- --version 3.37.2
```
---
### aliyun-cli
**下载**
```
https://aliyuncli.alicdn.com/aliyun-cli-linux-latest-amd64.tgz?file=aliyun-cli-linux-latest-amd64.tgz
https://github.com/aliyun/aliyun-cli/releases
```
---
## 各种依赖和报错
**libboost-program-options1.58.0**
```bash
echo "deb http://cz.archive.ubuntu.com/ubuntu xenial main" >> /etc/apt/sources.list
apt update && apt install -y libboost-program-options1.58.0
```
**libsodium18**
```bash
wget https://download.opensuse.org/repositories/home:/nsec/xUbuntu_16.04/amd64/libsodium18_1.0.11-1_amd64.deb
dpkg -i libsodium18_1.0.11-1_amd64.deb
```
**ERROR: pkg-config binary 'pkg-config' not found**
```bash
apt-get install -y pkg-config
```
**make: *** /lib/modules/3.10.0-1062.18.1.el7.x86_64/build: No such file or directory.  Stop.**
没安装内核安装包
```bash
# Ubuntu
apt install -y kernel-devel
# Centos
yum install -y kernel-devel
# 找到对应内核开发文件
ls -l /usr/src/kernels/
cd /lib/modules/3.10.0-1062.18.1.el7.x86_64/
# 删除链接
rm -r build
# 重新链接
ln -s /usr/src/kernels/3.10.0-1160.6.1.el7.x86_64/ build
```
**error while loading shared libraries: libnss3.so: cannot open shared object file: No such file or directory**
```bash
apt install libnss3-dev
```
**error while loading shared libraries: libdrm.so.2: cannot open shared object file: No such file or directory**
```bash
apt install libdrm-dev
```
**linux-/usr/lib64/libm.so.6: version `GLIBC_2.29' not found**
安装glibc-2.29
---
### LuaJIT
**描述**
LuaJIT 是采用 C 语言写的 Lua 代码的解释器，LuaJIT 试图保留 Lua 的精髓--轻量级,高效和可扩展。
**官网地址**
- https://luajit.org/
**安装**
```bash
wget https://luajit.org/download/LuaJIT-2.0.5.tar.gz
tar -zxf LuaJIT-2.0.5.tar.gz
cd LuaJIT-2.0.5/
make && make install
```