Pack library [10] from Symantec falls into this category. This solution is safe,
portable, largely eﬀective but not generic. That is, one needs to develop a
packer recognizer and an unpacker for each distinct packer. Given a set of
packer recognizers and unpackers, one can classify packed binaries into four
categories: (1) packed binaries whose packer can be recognized and that can be
unpacked, (2) packed binaries whose packer can be recognized but that cannot
be unpacked, (3) packed binaries whose packer cannot be recognized, and (4)
non-packed binaries. Assuming all the packers that goodware programs use fall
into the ﬁrst category, then one can black-list all packed binaries belonging to
the second and third category. To be able to distinguish between packed and
non-packed binaries, one needs a technique to detect packed ﬁles generically.
This can be done by, for example, calculating the entropy [11] of a particular
region of an executable binary that most likely contains compressed data.
However, this general approach of handling packed binaries has several prob-
lems. First, it entails signiﬁcant investments in engineering eﬀorts, and the level
of investment required is expected to increase over time as more packers appear
in the wild. Second, if goodware decides to use packers in the second and third
category above, false positives in the form of blocking legitimate goodware may
arise. The same problem may also occur when packer recognizers and unpack-
ers contain design or implementation bugs that, for example, treat variants of
packers used by goodware as unknown packers. Finally, this approach requires
continuing maintenance for existing packer recognizers and unpackers. Old pack-
ers never die. They just get rediscovered and reused, and never quite go away.
For example, the self-extractor stub for RAR - the world’s second-most popular
archiving format after ZIP - is packed by UPX v0.50, which dates from 1999.
The second solution to the packer problem is to run a packed binary inside
an emulator for a suﬃciently long period of time so that the embedded binary is
fully unpacked, and then invoke signature-based AV scanners against the mem-
ory image to check if it contains any malware. The x86 Emulator [12] take this
approach. This solution is safe, portable and generic, but is not always eﬀec-
tive [13] for two reasons. First, a packed binary can terminate itself before the
embedded binary is unpacked if it detects that it is running inside an emulator.
Second, so far there is no good heuristic to decide when it is safe to stop the
emulation run of a packed binary, because it is diﬃcult to distinguish between
the following two cases: (1) the embedded binary is benign and (2) the embedded
104
F. Guo, P. Ferrie, and T.-c. Chiueh
binary is malicious but is not fully unpacked. Another disadvantage of this ap-
proach is that it takes a non-trivial amount of eﬀort to develop a high-ﬁdelity
and high-performance emulator.
The third solution to the packer problem is to invoke AV scanning against
a suspicious running process’s memory image either periodically or at certain
security-sensitive events. Symantec’s Eraser dump [10] takes this approach. This
solution is generic, somewhat eﬀective, but neither safe nor portable. Its eﬀec-
tiveness is compromised by the facts that certain information required by AV
scanners, such as the entry point, is not available, and that the memory image
being scanned is not the same as that of an embedded binary immediately after
it is loaded. For example, a malware program may contain an encrypted string
in its binary ﬁle, and decrypt it at run time. If the encrypted string is part of
its signature, periodic memory scanning may fail to detect the malware because
the encrypted string is no longer in its memory image.
PolyUnpack [14] is a generic approach to the problem. It detects newly gen-
erated code by comparing if the current instruction sequence exists in the orig-
inal program. Instructions are disassembled and single stepped to achieve the
detection. Because both disassembling and single stepping are expensive, this
approach incurs signiﬁcant performance overhead.
Renovo [15] monitors each instruction and tracks if any the memory is over-
written. If any overwritten memory is executed, it is treated as one layer of
unpacking. This approach instruments instructions and also incurs signiﬁcant
performance overhead.
OllyBone [16] tracks write and execution too. It improves performance by
overloading the user/supervisor bit and exploiting the separation of data TLB
and instruction TLB in the X86 architecture. Saﬀron [17] combines OllyBone’s
technique with Intel’s PIN to build a tool that detects control transfers to dy-
namically created or modiﬁed pages, and dumps memory images at that time.
OmniUnpack [18] also relies on OllyBone for identifying executed pages and
invokes AV scanning before every “dangerous” system call. In addition, it incor-
porates two additional optimizations to reduce the total number of AV scans.
First, it invokes an AV scan only when there is a control transfer to a dynam-
ically modiﬁed page between the previous and current dangerous system calls.
Second, whenever an AV scanner is invoked, it only scans those pages that are
modiﬁed since the last dangerous system call. OmniUnpack is generic and largely
eﬀective, but neither safe nor portable. In particular, the fact that it requires
whole-binary scanning is incompatible with almost all existing commercial AV
scanners, which scans only a selective portion of each binary. Moreover, it only
works for running processes, but is not suitable for at-rest ﬁle scanning.
One common heuristic shared among PolyUnpack, Renovo, OllyBone, Saf-
fron, OmniUnpack and Justin (descibed in the next section) is that a necessary
condition of the end of unpacking is a control transfer to a dynamically cre-
ated or modiﬁed page. However, there are important diﬀerences between Justin
and these previous eﬀorts. First, Justin includes a more complete set of heuris-
tics to detect the end of unpacking, including unpacked code region make-up,
A Study of the Packer Problem and Its Solutions
105
stack pointer check, and command line argument check. Second, Justin includes
several counter-measures that are designed to fend oﬀ evasion techniques that
existing packers use. Finally, Justin leverages NX support rather than overloads
the supervisor/user bit, and is more eﬃcient to track page executions.
3 Justin: Just-in-Time AV Scanning
3.1 Design
Justin is designed to be generic, eﬀective and safe, but is not portable. The key
idea of Justin is to detect the end of unpacking during the execution of a packed
binary and invoke AV scanning at that instant. In addition to triggering AV
scanning at the right moment, Justin also aims to provide the AV scanner a
more complete picture about the binary being scanned, speciﬁcally its original
entry point.
A packed binary logically consists of three components, the unpacker, the
packed binary, and the area to hold the output of the unpacker. Diﬀerent packers
arrange these components into diﬀerent number of PE sections. The section
containing the unpacker’s output typically is relatively easy to identify because
its reserved size is larger than that of its initialized data contained in the binary.
The initial design goal of Justin is to enforce the invariant that no code page
can be executed without being scanned ﬁrst. Its design is relatively straightfor-
ward: it ﬁrst scans a packed binary at load time, runs the binary, keeps track of
pages that are dynamically modiﬁed or created, and scans any such page when
the program’s control is transferred to it. This design relies on an AV scanner
that does whole-binary scanning, and is not compatible with existing commer-
cial AV scanners, which employ a set of heuristics (e.g., ﬁle type ) to select a
portion of a binary and scan only bytes in that portion.
To work with commercial AV scanners, the design goal of Justin is shifted
to detecting the end of unpacking during the execution of a packed binary.
In addition, it makes the following two assumptions about packers: (1) The
address space layout of the program embedded within a packed binary after it is
unpacked is the same as that if the program is directly loaded into memory, and
(2) the unpacker in a packed binary completely unpacks the embedded program
before transferring control to it. The majority of packers satisfy Assumption
(1) because they are supposed to work on commercially distributed executable
binaries, which generally do not come with a relocation table. They also satisfy
Assumption (2) because they cannot guarantee 100% static disassembly accuracy
and coverage [19]. Some packers do perform simple metamorphic transformation
to the input binaries before packing them. These packers inherently can evade
signature-based AV scanners even without packing and are thus outside the scope
of Justin. These two assumptions make it feasible to apply standard ﬁle-based
AV scanners with selective scanning to a packed binary’s memory image at the
end of unpacking.
When the unpacker in a packed binary completes unpacking the embedded
program, it sets up the import address table, unwinds the stack, and transfers
106
F. Guo, P. Ferrie, and T.-c. Chiueh
control to the embedded program’s entry point. Therefore the necessary condi-
tions for the execution of a packed binary to reach the end of unpacking are
– A control transfer to a dynamically created/modiﬁed page occurs.
– The stack is similar to that when a program is just loaded into memory.
– The command-line input arguments are properly set up on the stack.
Accordingly, Justin combines these conditions into a composite heuristic for
detecting the end of unpacking during the execution of a packed binary as fol-
lows. Given a binary, Justin loads it, marks all its pages as executable but non-
writeable, and starts its execution. During the execution, if a write exception
occurs on a non-writeable page, Justin marks this page as dirty, turns it into
non-executable and writeable and continues; if a execution exception occurs on
a non-executable page, Justin invokes an AV scanner to scan the whole mem-
ory image, and turns the page into executable and non-writeable if the end-of-
unpacking check concludes that the unpacking is not done. Note that the whole
memory image is presented as a ﬁle and scanned by the AV scanner. This is
diﬀerent from OmniUnpack [18] which only scans dirty pages. By presenting the
whole memory image as a ﬁle, Justin’s output is compatible with existing com-
mercial AV scanners and avoids the problem in which signature straddles page
boundaries. For a non-packed binary, because no code page is generated or mod-
iﬁed during its execution, it is impossible for an execution exception to occur on
a dirty page and no AV scan will be triggered at run time. So the performance
overhead of Justin for non-packed binaries is insigniﬁcant. The performance over-
head of Justin for packed binaries, on the other hand, depends on the number
of times in which the program’s control is transferred to a newly created page
during its execution.
The current Justin prototype leverages virtual memory hardware to identify
control transfers to dynamically created pages. More speciﬁcally, it manipulates
write and execute permissions of virtual memory pages to guarantee that a page
is either writeable or executable, but never both. With write protection, Justin
can track which pages are modiﬁed. With execute protection, Justin can detect
which pages are executed. If a binary Justin tracks needs to modify the protection
attributes of its pages in ways that conﬂict with Justin’s setting, Justin records
the binary’s intentions but physically keeps Justin’s own setting. If the binary
later on queries the protection attributes of its pages, Justin should respond with
the binary’s intentions, rather than the physical settings.
Whenever a virtual memory protection exception occurs, Justin takes control
and ﬁrst checks if this exception is owing to its setting. If not, Justin simply
delivers the exception to the binary being monitored; otherwise Justin modiﬁes
the protection attributes according to the above algorithm. To ensure that Justin
is the ﬁrst to respond to an exception, the exception handler component of Justin
must be the ﬁrst in the binary’s vectored exception handler list.
To ensure that the original program in a packed binary can execute in the same
environment, most unpackers unwind the stack so that when the embedded pro-
gram is unpacked and control is transferred to it, the stack looks identical to that
when the embedded program is loaded into memory directly. For example, assume
A Study of the Packer Problem and Its Solutions
107
that the initial ESP at the time when a packed binary is started is 0x0012FFC4,
then right after the unpacking is done and the unpacked code is about to be ex-
ecuted, the ESP should point to 0x0012FFC4 again. This rule applies to many
unpackers and is widely used in manually unpacking practice. Justin automates
this method by recording ESP’s value at the entry point of a packed binary, and
compares the ESP at every exception in which the program’s control is transferred
to a dynamically created page. The exception context of an exception contains all
CPU registers at the time when the binary raises the exception.
When a PE binary is run with a set of command-line arguments, these argu-
ments are ﬁrst placed in heap by the loader and later copied to the stack by a
piece of compiler-generated code included in the binary at the program start-up
time. Based on this observation, one can detect the start of execution of the
original binary embedded in a packed binary, which occurs short after the end
of unpacking.
3.2 Implementation Details
Justin currently is implemented for Windows only. But the idea will also work on
other operating systems. The core logic of Justin is implemented in an exception
handler that is registered in every binary at the time when it starts. In addition,
Justin contains a kernel component that intercepts system calls related to page
protection attribute manipulation and query and “lies” properly so that its page
status tracking mechanism is as transparent to the binary being monitored as
possible. Justin leverages NX support [20] in modern Intel X86 processors and
Windows OS to detect pages that are executed at run time. In theory, it is
possible to use other bits such as supervisor bits for this purpose, as is the case
with OmniUnpack [18] and OllyBone [16].
Because Justin enforces the invariant that a page is either executable or write-
able but not both, it could lead to a live lock for a program that contains an
instruction which modiﬁes data in the same page. The live lock is an inﬁnite
loop of interleaved execution and write exceptions. To address this issue, Justin
checks if a memory-modifying instruction and its target address are in the same
page when a write exception occurs. If so, Justin sets the page writeable, single-
steps this instruction, and sets the page non-writeable again. This mechanism
allows a page to be executable and writeable simultaneously for one instruction,
but after that Justin continues to enforce the invariant.
One way to escape Justin’s invariant is to map two virtual pages to the same
physical page, and set one of them as executable and non-writeable and the
other as writeable and non-executable. With this set-up, the unpacker can mod-
ify the underlying physical page through the writeable virtual page and jump
to the underlying physical page through the executable virtual page, without
triggering exceptions. To defeat this evasion technique, Justin makes sure that
the protection attributes of virtual pages which are mapped to the same physical
page are set in the same way.
Instead of a PE section, an unpacker can put its output in a dynamically al-
located heap area. To prevent unpacked binaries from escaping Justin’s tracking,
108
F. Guo, P. Ferrie, and T.-c. Chiueh
Justin tracks pages in the heap, even when it grows. Similarly when a ﬁle is mapped
into a process’s address space, the mapped area needs to be tracked as well.
An unpacker can also put its output in a ﬁle, and spawns a process from the
ﬁle later on. In this case, Justin will not detect any execution exception, because
the generated code is invoked through a process creation mechanism rather than
a jump instruction. Fortunately, standard AV scanners can detect this unpacked
binary ﬁle when it is launched.
After recreating the embedded binary, some packers fork a new process and
in the new process jumps to the embedded binary. This evasion technique is
eﬀective because page status tracking of a process is not necessarily propagated
to all other processes it creates. Justin defeats this technique by tracking the
page protection status of a process and that of all of its descendant processes.
Some unpackers include anti-emulation techniques that attempt to determine
if they run inside an emulator or are being monitored in any way. Because Justin