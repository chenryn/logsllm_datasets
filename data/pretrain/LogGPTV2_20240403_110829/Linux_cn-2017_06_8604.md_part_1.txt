---
author: Tartan Llama
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 13278
date: '2017-06-13 17:47:00'
editorchoice: false
excerpt: 不幸的是，对于日常程序员，OpenCL 的学习曲线陡峭；一个简单的 Hello World 程序可能就需要上百行晦涩难懂的代码。因此，为了减轻这种痛苦，Khronos
  组织已经开发了一个称为 SYCL 的新标准，这是一个在 OpenCL 之上的 C++ 抽象层。
fromurl: https://blog.tartanllama.xyz/c++/2017/05/19/sycl/
id: 8604
islctt: true
largepic: /data/attachment/album/201706/13/174644t3bpa2ra424e24e3.jpg
permalink: /article-8604-1.html
pic: /data/attachment/album/201706/13/174644t3bpa2ra424e24e3.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 不幸的是，对于日常程序员，OpenCL 的学习曲线陡峭；一个简单的 Hello World 程序可能就需要上百行晦涩难懂的代码。因此，为了减轻这种痛苦，Khronos
  组织已经开发了一个称为 SYCL 的新标准，这是一个在 OpenCL 之上的 C++ 抽象层。
tags:
- SYCL
- OpenCL
- 机器学习
- 人工智能
thumb: false
title: 机器学习的新捷径：通过 SYCL 在 GPU 上加速 C++
titlepic: true
translator: ictlyh
updated: '2017-06-13 17:47:00'
---
![](/data/attachment/album/201706/13/174644t3bpa2ra424e24e3.jpg)
在机器学习、计算机视觉以及高性能计算领域，充分利用显卡计算应用程序的能力已成为当前的热门。类似 OpenCL 的技术通过硬件无关的编程模型展现了这种能力，使得你可以编写抽象于不同体系架构的代码。它的目标是“一次编写，到处运行”，不管它是 Intel CPU、AMD 独立显卡还是 DSP 等等。不幸的是，对于日常程序员，OpenCL 的学习曲线陡峭；一个简单的 Hello World 程序可能就需要上百行晦涩难懂的代码。因此，为了减轻这种痛苦，Khronos 组织已经开发了一个称为 [SYCL](https://www.khronos.org/sycl) 的新标准，这是一个在 OpenCL 之上的 C++ 抽象层。通过 SYCL，你可以使用干净、现代的 C++ 开发出这些通用 GPU（GPGPU）应用程序，而无需拘泥于 OpenCL。下面是一个使用 SYCL 开发，通过并行 STL 实现的向量乘法事例：
```
#include 
#include 
#include 
#include 
#include 
using namespace std::experimental::parallel;
using namespace sycl::helpers;
int main() {
  constexpr size_t array_size = 1024*512;
  std::array a;
  std::iota(begin(a),end(a),0);
  {
    cl::sycl::buffer b(a.data(), cl::sycl::range(a.size()));
    cl::sycl::queue q;
    sycl::sycl_execution_policy sycl_policy(q);
    transform(sycl_policy, begin(b), end(b), begin(b),
              [](int x) { return x*2; });
  }
}
```
为了作为对比，下面是一个通过 C++ API 使用 OpenCL 编写的大概对应版本（无需花过多时间阅读，只需注意到它看起来难看而且冗长）。
```
#include 
#include 
#include 
#include 
int main(){
    std::vector all_platforms;
    cl::Platform::get(&all_platforms);
    if(all_platforms.size()==0){
        std::cout all_devices;
    default_platform.getDevices(CL_DEVICE_TYPE_ALL, &all_devices);
    if(all_devices.size()==0){
        std::cout(default_device) a;
    std::iota(begin(a),end(a),0);
    cl::Buffer buffer_A(context,CL_MEM_READ_WRITE,sizeof(int)*a.size());
    cl::CommandQueue queue(context,default_device);
    if (queue.enqueueWriteBuffer(buffer_A,CL_TRUE,0,sizeof(int)*a.size(),a.data()) != CL_SUCCESS) {
        std::cout  主机   （    host    ） 是主 CPU 运行的机器， 设备   （    device    ） 是会运行你 OpenCL 代码的地方。设备可能就是主机，但也可能是你机器上的一些加速器、模拟器等。 内核   （    kernel    ） 是一个特殊函数，它是在你设备上运行代码的入口点。通常还会提供一些主机设置好的缓存给它用于输入和输出数据。
### 回到 SYCL
这里有两个可用的 SYCL 实现：[triSYCL](https://github.com/Xilinx/triSYCL)，由 Xilinx 开发的实验性开源版本（通常作为标准的试验台使用），以及 [ComputeCpp](https://www.codeplay.com/products/computesuite/computecpp)，由 Codeplay（我在 Codeplay 工作，但这篇文章是在没有我雇主建议的情况下使用我自己时间编写的） 开发的工业级实现（当前处于开发测试版）。只有 ComputeCpp 支持在 GPU 上执行内核，因此在这篇文章中我们会使用它。
第一步是在你的机器上配置以及运行 ComputeCpp。主要组件是一个实现了 SYCL API 的运行时库，以及一个基于 Clang 的编译器，它负责编译你的主机代码和设备代码。在本文写作时，已经在 Ubuntu 和 CentOS 上官方支持 Intel CPU 以及某些 AMD GPU。在其它 Linux 发行版上让它工作也非常简单（例如，我让它在我的 Arch 系统上运行）。对更多的硬件和操作系统的支持正在进行中，查看[支持平台文档](https://www.codeplay.com/products/computesuite/computecpp/reference/platform-support-notes)获取最新列表。[这里](https://www.codeplay.com/products/computesuite/computecpp/reference/release-notes/)列出了依赖和组件。你也可能想要下载 [SDK](https://github.com/codeplaysoftware/computecpp-sdk)，其中包括了示例、文档、构建系统集成文件，以及其它。在这篇文章中我会使用 [SYCL 并行 STL](https://github.com/KhronosGroup/SyclParallelSTL)，如果你想要自己在家学习的话也要下载它。
一旦你设置好了一切，我们就可以开始通用 GPU 编程了！正如简介中提到的，我的第一个示例使用 SYCL 并行 STL 实现。我们现在来看看如何使用纯 SYCL 编写代码。
```
#include 
#include 
#include 
#include 
int main() {
      const size_t array_size = 1024*512;
      std::array in,out;
      std::iota(begin(in),end(in),0);
      {
          cl::sycl::queue device_queue;
          cl::sycl::range n_items{array_size};
          cl::sycl::buffer in_buffer(in.data(), n_items);
          cl::sycl::buffer out_buffer(out.data(), n_items);
          device_queue.submit([&](cl::sycl::handler &cgh) {
              constexpr auto sycl_read = cl::sycl::access::mode::read;
              constexpr auto sycl_write = cl::sycl::access::mode::write;
              auto in_accessor = in_buffer.get_access(cgh);
              auto out_accessor = out_buffer.get_access(cgh);