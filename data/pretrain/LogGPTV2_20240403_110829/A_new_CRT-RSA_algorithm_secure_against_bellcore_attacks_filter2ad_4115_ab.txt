is reduced signiﬁcantly, e.g. knowledge about the location of
the induced fault need not imply knowledge about the posi-
tion of the bit within an algorithm. Similarly, precise timing
need not imply knowledge of the actual step performed at
that time. The following ﬁve fault models gradually improve
the strength of the card’s countermeasures.
private user keys
EEPROM
OS, RSA, COMP128,
system keys
ROM
RAM
AS
address scrambler
CPU
BEU bus encryption unit
BEU
RSA accelerator
RNG
random number generator
Figure 1: architectural sketch of a modern high-end
smartcard
Fault Model #1: Precise Bit Errors.
Parameter setting. For this strong fault model, we assume
that the adversary has precise control on both timing and
location. This means that the adversary knows the attacked
bit as well as the attacked operation. Note that an attack
usually happens before the variable is used in a line of an
algorithm. We assume that only a single bit is aﬀected.
This resembles the (bsr) fault type that is achieved by at-
tacks described in [21] or [17] on RAM or EEPROM of an
unprotected smartcard.
Mathematical model. This attack can be modeled as an
addition or subtraction of a single bit, i.e. a variable X is
changed to X
= X ± 2k for 0 ≤ k ≤ l(X) − 1.
(cid:2)
Motivation from the real world. Although high-end smart-
cards implement sophisticated hardware countermeasures,
many smartcards currently used are either too old or too
cheap to do so. Hence, this fault model is a realistic one.
It assumes the strongest adversary and the weakest card.
Since algorithms secure in this fault model are secure in the
weaker models as well, it is a particularly interesting model.
Fault Model #2: Precise Byte Errors.
Parameter setting. In this scenario, we assume that the
timing is precise. Hence, a speciﬁc operation can be tar-
geted. However, control on location is loose, i.e. the number
of bits aﬀected can only be bounded by a block of few bits
(we assume a byte). We allow any fault type in this model.
Mathematical model. The attack can be modeled as an
addition or subtraction of an unknown error byte at a known
= X ± b · 2k for
position, i.e. a variable X is changed to X
a known 0 ≤ k ≤ l(X) − 8 and an unknown b ∈ Z28.
(cid:2)
Motivation from the real world. This model is motivated
by the fact that the strong adversary’s power is reduced
on smartcards if encryption of the data is used. Usually,
all data stored in EEPROM and RAM is encrypted [18].
Hence, if an error is induced into memory, the CPU will see
a random block of data. The same model is derived if the
bus lines are attacked.
Fault Model #3: Unknown Byte Errors.
Parameter setting. In this scenario, we assume loose con-
trol on both timing and location. The loose control on lo-
cation means that a certain variable can be targeted but
the number of bits aﬀected can only be bounded by a block
of few bits (usually a byte). In addition, loose control on
timing means that the attacker can only aﬀect the variable
within a speciﬁc time frame that usually contains several
instructions. The exact instruction aﬀected by the attack is
unknown. Hence, the attacker does not know for sure which
byte of the variable is currently used by the algorithm. We
allow any fault type in this model.
Mathematical model. This attack can be modeled as an
addition or subtraction of an error byte, i.e. a variable X is
= X ± b· 2k for an unknown 0 ≤ k ≤ l(X)− 8
changed to X
and an unknown b ∈ Z28.
(cid:2)
Motivation from the real world. This model is motivated
by the fact that attacks on EEPROM and RAM with ad-
dress scrambling (cf. [18]) will not allow to specify when the
attacked block is requested by the CPU. Encryption of the
memory ensures that a faulty bit aﬀects a whole block of
data.
Fault Model #3’: Unknown Byte Errors in Un-
known Variables.
Parameter setting. This model assumes loose control on
location, once again a whole byte is aﬀected, and no control
on timing. Due to the latter it is unknown at which exact
time within the program the attack is mounted. It is even
unknown, which variable is faulty.
Mathematical model. We model this type of fault as a
variable dependent error, i.e. a variable X is changed to
= X ± b · 2k for an unknown 0 ≤ k ≤ l(X) − 8 and an
(cid:2)
X
unknown b ∈ Z28. Note that due to the unprecise timing,
the attacked variable X is also unknown (to some degree).
Motivation from the real world. The strong adversary’s
power is eﬀectively reduced to this model if the smard-
card uses memory encryption in RAM and EEPROM. This
causes any bit fault to aﬀect a whole block of data. In ad-
dition, some smartcards use a randomized clock (cf.
[9]).
In this case, the attacker knows that a successful attack will
change a block of data. But he does not know the exact time
of the change within the algorithm. Therefore the attacker
does not know the position of the block as it is used in the
CPU.
Fault Model #4: Random Errors.
Parameter setting.
In this fault model, we assume that
the adversary has no control on the location of a fault and
only a loose timing, i.e. he can target an interval of some
operations. This interval may have been derived from other
sources of information, for example from the power proﬁle of
the card (see [2]). The number of aﬀected bits is unknown.
Mathematical model. We model this uncertainty on the
number of aﬀected bits by a random fault. We assume that
for a given variable X, the uniformly distributed random
value f (X) ∈ [0, 2l(X) − 1] is used by the algorithm. In this
model, any fault may result in any faulty value.
Motivation from the real world. This scenario is motivated
by strong high-end smartcards completely armed with coun-
termeasures. Memory encryption, address scrambling and a
randomized clock imply that any error induced into mem-
ory or the CPU at a vague point will leave the attacker at
most with the information that a certain variable is faulty.
It therefore enforces a very weak adversary.
Reaction Of The Smartcard
A smartcard may react in various ways to an attack: Un-
protected cards will fail to notice the attack and output a
faulty result, leaving them vulnerable to the Bellcore attack.
More sophisticated smartcards may have countermeasures
that alter the result to some random value or use detection
mechanisms that report an error to the user. The error out-
put may either depend on the kind of error or be unspeciﬁc.
Modern high-end smartcards may have additional hard-
ware countermeasures (see [6]), that might successfully ﬁght
some of these attacks and react with a complete security re-
set. This reaction of the card may already be set oﬀ before
an attack successfully induced an error.
Implications For Our Analysis
So far, no software countermeasures against fault model
#1 are known (see Section 6). Lukily, the models #1 and #2
are unlikely in the real world, as all trustworthy smartcards
are fully armed with a variety of countermeasures. This
causes a precise location of an aﬀected bit or byte to be
unrealistic.
We will therefore concentrate to analyze security against
fault models #3 and #4. The two models #3 and #3’ are
equivalent, as model #3’ usually only means that the faulty
variable X is from a small set of possible variables. If the
attack hits every variable within this set with a suﬃciently
high probability, a speciﬁc variable is expected to be hit after
a relatively low number of attacks. Hence, both scenarios
can be modeled in the same way (see [6]).
The analysis of our method will show that only a negligible
number of faults result in an output that potentially leaks
valuable information to an adversary. Hence, the smartcard
needs no other means of reaction to errors such as error
messages or security resets. We will therefore not consider
any such reaction mechanisms in the following.
4. THE NEW APPROACH
The drawbacks of Shamir’s small prime veriﬁcation coun-
termeasure explained in the introduction show that better
methods are needed. As Shamir’s basic idea is very promis-
ing, we extend this countermeasure to the whole CRT-RSA
computation. We also use infective computations as intro-
duced by [24] to eliminate the single point of failure of a
checking step.
Algorithm 2
(infective CRT-RSA).
Input. A message m ∈ ZN
Output. Sig := md mod N
In Memory. p · t1, q · t2, N , N · t1 · t2, dp, dq, t1, t2, et1
and et2
1 Let Sp := mdp mod p · t1
2 Let Sq := mdq mod q · t2
3 Let S := CRT(Sp, Sq) mod N · t1 · t2
4 Let c1 := (m − Set1 + 1) mod t1
5 Let c2 := (m − Set2 + 1) mod t2
6 Let Sig := Sc1·c2 mod N
7
output Sig
The basic algorithm for CRT-RSA consists of three steps,
the computation of the two parts Sp and Sq and their com-
bination to the signature S using the CRT. We modify the
computation of all three values implementing a variant of
Shamir’s idea. Then we introduce a detection mechanism
that is not required to be error free in order to prevent a
fault attack on the whole smartcard.
If an error was in-
duced at any step of the algorithm, this countermeasure
will change the ﬁnal result in a way unpredictable to an
adversary. The resulting algorithm, Algorithm 2, looks ex-
tremely simple, but it proves to be very eﬀective in the most
practical attack model assuming the strongest adversary.
As a precomputation step that can be done for any smart-
card at production time, generate a valid RSA key with
(N, e), N = p · q, as the public key and d as the correspond-
ing private key satisfying e · d ≡ 1 mod ϕ(N ).
Additionally, select two integers t1 and t2 of suﬃciently
large bitlength to withstand exhaustive search (see Section
5.7 for concrete suggestions) which must satisfy several con-
ditions in order to allow a secure scheme:
1.
2.
3.
4.
5.
t1 and t2 must be coprime
gcd(d, ϕ(t1)) = 1 and gcd(d, ϕ(t2)) = 1
t1 and t2 are squarefree
ti ≡ 3 mod 4 for i ∈ {1, 2}
t2 (cid:5) |X = pt1 · ((pt1)
−1 mod qt2)
Note that the use of two small moduli instead of a single
one has already been described by Shamir in [20], but for a
diﬀerent use. Let dp := d mod ϕ(p·t1), dq := d mod ϕ(q·t2).
Afterwards, compute two corresponding public keys et1 and
et2 such that d · eti = 1 mod ϕ(ti). Store p · t1, q · t2, N ,
N · t1 · t2, dp, dq, t1, t2, et1 and et2 on the smartcard. With
these parameter settings, it is easy to see that Algorithm 2
computes the correct signature if no error occurs.
Let us brieﬂy comment on the ﬁve conditions for the small
primes ti: Condition 1 is needed to ensure that the CRT
combination of Sp and Sq works, because it requires the two
moduli to be coprime. Condition 2 is required to ensure that
the small keys eti (i = 1, 2) can be generated. Condition 3
must hold, because otherwise the equation md·eti ≡ m mod
ti may not hold. This condition can be further relaxed.
However, we suggest choosing primes for both ti. Condition
4 ensures a good resistance against attacks on the exponents
dp and dq. The security analysis will further explain this
condition. Finally, Condition 5 provides security against
attacks on the CRT combination (see the analysis of attacks
on line 3 below). Section 4.1 will show that choosing both
ti as strong primes is a useful recommendation.
4.1 Efﬁciency Of The New Algorithm
Now we will show that the new algorithm is indeed an ef-
ﬁcient algorithm to compute RSA signatures. The eﬃciency
depends on the keys ti. The additional costs compared to
the plain CRT-RSA method are mainly an increased number
of operations in lines 1 and 2 due to the larger moduli. This
increases the size of the exponent and of the intermediate
results. These have to be computed in a larger group now.
The additional costs of the CRT (due to a larger modulus)
and the costs of the two modular exponentiations modulo
t1 and t2 (in lines 4 and 5) do not contribute to the overall
costs signiﬁcantly. If quadratic time complexity is assumed
for the modular exponentiations in Zpt1 and Zqt2, the sav-
ings compared to the plain CRT-RSA scheme is lowered to
1/3 instead of 1/4 (for l(ti) ∈ {60, 80}) of the cost of the
plain CRT-RSA exponentiation. This is still an acceptable
speedup.
For the key generation process, which is usually performed
on the card at production time, we can eﬃciently ﬁnd suit-
able candidates for t1 and t2. First, a valid RSA key pair
((e, N ), d) is chosen, with N = p · q. Then the two small
moduli t1 and t2 are generated. We would like to emphasize
the fact that neither the algorithm nor the small moduli im-
pose any restrictions on the choice of the main RSA key, no
special structure or generation process is required. Hence,
any valid RSA key pair can be used for ((e, N ), d).
We suggest choosing t1 and t2 as diﬀerent strong primes,
i.e. (ti − 1)/2 are also primes. As ti (cid:9) p, q this obviously
satisﬁes Conditions 1, 3, and 4. Condition 2 is not satis-
ﬁed for a ﬁxed ti in a fraction of about 1/ti cases. There-
fore given l(ti) large enough, this probability is negligible.
For randomly chosen ti, the values pt1 and qt2 are inde-
−1 mod qt2 is uniformly distributed
pendent, therefore (pt1)
in Zqt2. As t2 (cid:5) |pt1, this means that the probability that
a chosen t2 does not satisfy Condition 5 is at most 1/t2.
Hence, we expect very few strong prime choices. Since the
density of strong primes is conjectured to be asymptotically
D · x/ log2(x) ([13]), the task of ﬁnding suitable ti is easy.
Here D ≈ 0.6601618 is the twin prime constant.
Note that it is also possible to use a modiﬁed CRT combi-
nation that can handle the case t1 = t2. Hence, it suﬃces to
choose a single t. We choose two in order to use the standard
CRT.
5. SECURITY ANALYSIS OF THE
PROPOSED COUNTERMEASURE
5.1 Undetectable Errors
For the security analysis, we need to investigate the prob-
ability of any induced error to circumvent our countermea-
sure and result in an undetectable error. Note that we are
only concerned with errors that cause the ﬁnal signature to
be correct modulo p but false modulo q (or vice versa), in
which case the classic Bellcore attack can be applied. Oth-
erwise, no exploits of speciﬁc errors in a faulty CRT-RSA
signature are known yet. Also, in our analysis, we do not
look at combinations with other side channel attacks like
timing or power attacks.
The checking mechanism in lines 4 and 5 is done via a
small modulus, hence, undetectable errors are introduced
into the system. However, we will show that the number
of these errors is negligibly small. Therefore, they pose no
threat to the security of the system.
(cid:2)
An error will slip by lines 4 and 5 undetected if it is elim-
inated by the modular reduction. If S
is a faulty value for
= S + k · t1 · t2, k ∈ Z, both modular reduc-
S, then if S
tions in lines 4 and 5 will fail to detect this error and set
(cid:2) (cid:5)= S mod ti for
c1 = c2 = 1. For other values of S
(cid:2)eti (cid:5)= m mod ti, which in turn forces