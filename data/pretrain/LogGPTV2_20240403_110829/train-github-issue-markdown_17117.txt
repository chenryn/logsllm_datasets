    import jax
    import jax.numpy as jnp
    def f(x):
        return x + 0.0
    def _print_type(x):
        print(x)
        print(x.dtype)
        print(x.dtype is jax.dtypes.float0)
    def print_type(x):
        _print_type(x)
        jax.jit(_print_type)(x)
        print("")
    x = jax.grad(f, allow_int=True)(jnp.array(1))
    y = jnp.array(False)
    print_type(x)
    print_type(y)
With numpy v1.23.0:
    False
    bool
    False
    Tracedwith
    [('float0', 'V')]
    False
    False
    bool
    False
    Tracedwith
    bool
    False
Which has the following problems:
  * The "outside jit" dtype of `x` is `bool` instead of `float0`.
  * The "inside jit" dtype of `x` and `y` are different, despite having the same "outside jit" dtype.
  * The "inside jit" comparison of `x.dtype is jax.dtypes.float0` returns `False` despite the "inside jit" dtype of `x` being `float0`. (Probably something to do with it secretly being a `bool` instead.)
This plays merry havoc will all kinds of other things. I spotted this because
it was sneaking past the `_check_no_float0s` checker when calling
`jnp.allclose`. It also means that attempting to do `x == y` in the above code
will result in an exception being thrown.
For reference I've found that numpy v1.21.2 works fine.
Possibly this is a numpy bug? (I did check to see that there weren't any
`float0`-related numpy bugs reported.)