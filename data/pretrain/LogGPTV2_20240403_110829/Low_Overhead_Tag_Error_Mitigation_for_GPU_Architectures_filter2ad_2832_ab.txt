Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:31:02 UTC from IEEE Xplore.  Restrictions apply. 
V. SIMULATION METHODOLOGY AND METRIC
EVALUATION
We use a conﬁgurable cache simulator to conduct our
resiliency studies. This simulator gets an address trace and
cache conﬁguration as input and evaluates the cache func-
tionality and resiliency metrics. Traces contain the sequence
of addresses submitted to the cache under study during the
execution of a program on GPU. We extract input address
traces for instruction and data caches for Volta GPU [17].
The cache simulator can calculate the set-index value either
using the traditional way (No-hash method), or using the hash
function (Hash-based method).
Other than the classic cache metrics like hit and miss
rate, this simulator reports the false hit and false miss rates
described in Section IV. False hit and false miss might occur
when a bit error happens in a cache line. However, instead
of injecting faults in cache lines and performing simulations
many times for each trace, our simulator measures these
metrics without any explicit fault injection in only a single
run of the input trace. First, we explain how the false hit
rate is calculated. A false hit can occur either in the event
of a cache miss or a cache hit. We deﬁne the notions of
SetEntryFalseHits Miss and SetEntryFalseHits Hit for the
number of false hits under a cache miss and a cache hit in each
set entry respectively. If a cache access results in miss, we
calculate the Hamming distance of the new address reference
tag and all the existing valid tags in the corresponding set.
If the Hamming distance is 1, this access might result in a
false hit. Therefore, every time the result of comparison has
Hamming distance 1, we increment SetEntryFalseHits Miss
for that set entry. Another scenario that results in false hit
under miss happens when the address reference tag matches
the tag in the corresponding set but the cache line is invalid. In
fact, if a bit error occurs in the valid bit position for this entry,
a false hit happens. Likewise, if a cache access results in a hit
and at the same time the address reference tag is only one-bit
Hamming distance away from any other valid tag entries in the
same set, we increment the SetEntryFalseHits Hit counter.
The pesudo-code for calculating these metrics is shown in
Algorithm 1.
This way, we increment the false hit counters every time we
get Hamming distance 1 on any bit position in the tag entry,
no matter if it is the faulty bit or not. To get the false hit rate
considering bit ﬂip in one bit position in each entry, we add
a scaling phase at the end of trace execution. After the whole
trace is executed, we divide each counter by the number of
bits in the set entry i. This is summarized in the following
equations. In these equations, i changes from 1 to the number
of sets to calculate EstimatedFalseHits for each set.
EstimatedFalseHits Missi = SetEntryFalseHits Missi
Associativity× TagBitWidth
EstimatedFalseHits Hiti = SetEntryFalseHits Hiti
Associativity× TagBitWidth
(1)
(2)
317
Algorithm 1 Computing SetEntryFalseHits
setIndex = calculate set index(Address)
refTag = calculate tag(Address)
Look up cache for refTag in the setIndex entry of tag cache (TAG[setIndex])
if Access is Hit then
for i← 1 to Associativity do
if (HammingDistance(refTag, TAG[setIndex][i])==1) then
SetEntryFalseHits Hit[setIndex]++
end if
end for
end if
if Access is Miss then
for i← 1 to Associativity do
if HammingDistance(refTag, TAG[setIndex][i])==1 then
if valid[setIndex][i]==1 then
SetEntryFalseHits Miss[setIndex]++
end if
end if
if (refTag == TAG[setIndex][i] and valid[setIndex][i]==0) then
SetEntryFalseHits Miss[setIndex]++
end if
end for
end if
TABLE I
BENCHMARK DESCRIPTION
Description
Atmospheric climate modeling
Algebraic multi-grid linear system solver
for unstructured mesh physics packages
Shock hydrodynamics calculation for unstructured meshes
Molecular dynamics
Solves Poisson equation by spectral element method
Hardware accelerated cosmology code, simulates the
formation of structure in collisionless ﬂuids under the
inﬂuence of gravity
Mimics the ﬁnite element generation and assembly
Monte Carlo neutron transport
Double-precision matrix-matrix multiplication
Complex number matrix-matrix multiplication
Single-precision general matrix multiply
Simple computational kernel (add and multiply)
Benchmark
CAM-SE
AMG
Lulesh
NAMD
Nekbone
HACC
MiniFE
XSBench
DGEMM
ZGEMM
SGEMM
Stream
To estimate the overall false hit rate in the cache, we simply
add the estimated false hits under miss (estimated false hits
under hit) calculated above for all sets and divide it by the
number of cache accesses to calculate the false hit rate under
miss (false hit rate under hit).
#sets∑
i=1
EstimatedFalseHits Missi
FalseHitRate Miss =
(3)
Accesses
FalseHitRate Hit =
#sets∑
i=1
EstimatedFalseHits Hiti
Accesses
(4)
It should be noted that false hits under true hits can easily be
handled by multiple tag match detection mechanism and is not
considered as undetected corrupted output for an unprotected
cache.
To evaluate our method, ﬁrst we generate traces for different
instruction and data cache modules in our target GPU. For
this purpose, we use the GPU implementation of a set of HPC
benchmark applications. A description of each benchmark can
be found in Table I.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:31:02 UTC from IEEE Xplore.  Restrictions apply. 
VI. EXPERIMENTAL RESULTS
In this section, we show the experimental results for eval-
uating Hash-based set-index selection in the instruction cache
and L1 data cache in the Volta GPU. To evaluate the resiliency
of our method, we report the false hit rates. We also report
the effect of using hash function on the cache hit rate.
A. Instruction Cache Tag SRAM Structure Evaluation
We performed the experiments for two different cache
sizes. First, we performed the experiments for a 3-way set-
associative instruction cache with 128B cache line size and
12KB capacity. Figure 4 shows the false hit under miss and
false miss under hit for the No-hash and Hash-based schemes.
Both schemes have false hit rate under true miss less than 0.1%
and result in similar false hit rates. For these applications, false
hit under true miss is 0.0294% and 0.0296% for No-hash and
Hash-based schemes on average (with standard deviation of
0.04% for both). Also as seen in Figure 4(b), on average, we
get 1.32% and 1.33% false hit under true hit for No-hash and
Hash-based schemes respectively (with standard deviation of
0.90% and 0.91%). We also report the effect of using each
scheme on hit rate, which can be seen in column 2 and 3 of
Table II. The hit rate for these schemes is very similar: 98.1%
for No-Hash and 98.09% for Hash-based schemes on average.
In the second experiment, we consider a 3-way set-
associative cache with 128B cache line size and 24KB ca-
pacity, to measure the effect of cache size on false hit rates.
Figure 5 shows the false hit under true miss and false miss
under true hit for the No-hash and Hash-based schemes.
Doubling the cache size improves the hit rate and consequently
affects the false hit rate. For these applications, false hit under
true miss is 0.022% for both No-hash and Hash-based schemes
on average (with standard deviation of 0.037% for both). Also
as seen in Figure 5(b), on average, we get 0.51% and 0.56%
false hit under true hit for No-hash and Hash-based schemes
respectively (with standard deviation of 0.66% and 0.7%).
Compared to the smaller size cache, increasing the cache size
reduces the false hit rate. For this cache conﬁguration, No-
hash and Hash-based schemes have very close hit rates with
average 98.43%.
As can be seen, for both cache sizes, No-hash and Hash-
based schemes are competitively equivalent, and No-hash
scheme results in slightly better false hit rates.
B. Data Cache Tag SRAM Structure Evaluation
We did the experiments for a 4-way set-associative data
cache with 128B cache line size and 128KB capacity. Figure 6
shows the false hit under true miss and false miss under true
hit for the No-hash and Hash-based schemes. As can be seen,
for these applications, false hit under true miss is 0.05% and
0.005% for No-hash and Hash-based schemes on average (with
standard deviation of 0.082% and 0.004% respectively). Also,
on average, we get 0.46% and 0.07% false hit under true hit for
No-hash and Hash-based schemes respectively (with standard
HIT RATE COMPARISON FOR NO-HASH AND HASH-BASED SCHEMES
TABLE II
Benchmark
CAM-SE
AMG
Lulesh
Nekbone
HACC
MiniFE
XSBench
DGEMM
ZGEMM
SGEMM
Stream
Average
InstCache Hit rate (%)
No hash
Hash-based
99.72
95.44
99.99
96.63
99.86
94.02
99.48
99.97
99.97
99.80
94.23
98.1
99.72
95.44
99.99
96.68
99.73
94.02
99.48
99.97
99.97
99.80
94.23
98.09
DataCache Hit rate (%)
No hash
Hash-based
93.75
95.52
96.14
94.05
99.9
96.89
75.52
91.68
92.95
70.4
93.75
90.97
93.75
95.52
96.21
94.12
99.9
97.45
75.53
93.79
93.59
87.85
93.75
92.87
deviation of 0.39% and 0.076%). For L1 data cache, the Hash-
based scheme reduces the false hit rate by 10× on average
compared to the No-hash scheme. The Hash-based scheme
even improves the hit rate by 2% (No-hash scheme has 90.97%
hit rate on average, while the Hash-based scheme improves the
hit rate to 92.87% on average). The hit rate result is shown in
Table II, columns 4 and 5.
We also repeated the simulation for a smaller cache size
(12KB cache, 3-way set-associative, and 128B cache line). We
got similar results for this cache conﬁguration. Results indicate
that the false hit under true miss is 0.13% and 0.017% for
the No-Hash and Hash-based schemes respectively. Also the
false hit under true hit, we get 1.16% and 0.54% for No-hash
and Hash-based schemes respectively. This also comes with
3% improvement for hit rate (90.1% and 93.1% for the No-
hash and Hash-based schemes). In fact, regardless of cache
conﬁguration, the Hash-based scheme can improve both the
reliability and performance of tag SRAM for write-through
data cache.
C. Hash Function Area and Timing Analysis
We have added the hash function module to the L1 data
cache tag in Volta GPU and synthesized it with Synopsys
Design Compiler synthesis tool. Synthesis results show that
adding the hash function does not make the critical path longer,
and the critical path slack remains at 0. It also made negligible
difference in the design area of L1 data cache tag module,
actually a 0.4% reduction compared to the original scheme
due to synthesis variation it caused. Unless the tag RAM
addressing is already the critical path (not the case above),
the timing and area effects in other use cases is expected to
be similar.