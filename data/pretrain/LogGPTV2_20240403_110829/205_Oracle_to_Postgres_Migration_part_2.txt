# EnterpriseDB Corporation 2011. All Rights Reserved. Company Confidential

## Application Migration

### Object Names / Identifiers
- **Schema, Tables, Columns, Functions, etc.**:
  - **Oracle**: Converts unquoted identifiers to UPPER CASE.
  - **Postgres**: Converts unquoted identifiers to lower case.
  - **Best Practice**: Ensure consistency in quoting or not quoting identifiers in your application.

### Outer Join Syntax
- **Oracle**:
  - Uses the `(+)` operator in the `WHERE` clause to mark the NULL-augmented side.
  - Example: 
    ```sql
    SELECT e.name, d.name FROM emp e, dept d WHERE e.deptno = d.deptno (+)
    ```
- **Postgres**:
  - Uses the SQL Standard syntax for outer joins: `{LEFT|RIGHT|FULL} [OUTER] JOIN`.
  - Example:
    ```sql
    SELECT e.name, d.name FROM emp e LEFT JOIN dept d ON e.deptno = d.deptno
    ```

### INTERSECT
- **Oracle**: `INTERSECT`
- **Postgres**: `EXCEPT`

### Function Call Using Named Notation
- **Oracle**: `=>`
- **Postgres**: `:=`
- **Example**:
  - Oracle: 
    ```sql
    var = fn( c => 10, a => 'xyz', b => 2.5);
    ```
  - Postgres:
    ```sql
    var = fn( c := 10, a := 'xyz', b := 2.5);
    ```

### DUAL
- **Oracle**: A 1-row x 1-column table for expression evaluation.
- **Postgres**: Provided by Orafce.

### ROWNUM
- **Oracle**: `ROWNUM`
- **Postgres**: Use `ROW_NUMBER()` windowing function.
  - If needed, use it as a wrapper around the main query.

### ROWID
- **Oracle**: `ROWID`
- **Postgres**:
  - Use `CTID` system column (may fail with partitioning).
  - Use `OID` column (creates an implicit index, which may have performance implications).

### Optimizer Hints
- **Postgres**: Does not support optimizer hints. Discard them or keep for future reference; they won't cause issues.

### Empty Strings and NULLs
- **Oracle**: Treats empty strings (`''`) as `NULL`. This is non-standard and can be confusing.
  - Example:
    ```sql
    SQL> select 'crazy' result from dual where ('a' || '') = ('a' || '');
    RESULT
    ------
    crazy
    ```
- **Postgres**: Requires careful examination of queries comparing empty strings.

## Built-in Functions

### NVL
- **Oracle**: `NVL`
- **Postgres**:
  - Provided by Orafce.
  - Use `COALESCE()`, which is more flexible and standard.

### DECODE
- **Oracle**: `DECODE`
- **Postgres**:
  - Use the SQL Standard `CASE` clause.
  - Postgres now has `VARIADIC` for implementing similar functionality when all parameters have the same data type.

### TO_CHAR()
- **Postgres**: Provides this function, but it is not as robust. Test your queries.
  - Orafce provides the 1-argument version.

### SUBSTR()
- **Postgres**: Provides this function and supports SQL standards-compliant syntax.

### SYSDATE
- **Oracle**: `SYSDATE`
- **Postgres**: `current_timestamp`

## DBA Migration (Database Architecture)

### Process Architecture
- **Postgres**: Similar to Oracle.
  - **Recommendation**: Attend Bruce's talks for more details.
- **No Rollback Segments**.
- **SGA**: Equivalent to `shared_buffers`.
- **PGA**: Equivalent to `work_mem`.
- **PMON**: Equivalent to `Postmaster`.
- **TNS Listener**: Equivalent to `Postmaster`.
- **GRANT/REVOKE**: Almost the same, mainly a syntax change.

## Porting Tools

### Orafce
- **Features**:
  - Many Oracle compatibility functions.
  - `DBMS_ALERT`, `DBMS_PIPE`, `UTL_FILE`, `DBMS_OUTPUT`, `DBMS_RANDOM`.
  - Date operations.
  - `to_char(param1)` for various data types.
  - `DUAL` table.
  - Packages for various platforms (RPM, .deb).

### Ora2pg
- **Features**:
  - Advanced schema and data extraction.
  - Extracts PL/SQL (packages, functions, procedures).
  - Tries to convert PL/SQL.
  - Export to file, multiple files, compressed, or directly to Postgres.

### DBD::Oracle
- **Perl Module**:
  - Develop your own extraction tools.
  - Used by Ora2pg.
  - Packages available for different platforms.

### Migration Tool Kit (MTK)
- **Developed by EnterpriseDB**:
  - Mainly for Oracle to Postgres Plus Advanced Server migration.
  - May help in Oracle to Postgres migration.
  - Does not convert PL/SQL code.
  - Maps data types.

## Ora2pg

### Export Schema
- **Tables**:
  - PRIMARY KEY, UNIQUE, FOREIGN KEY, CHECK.
- **Views**, **Sequences**, **Indexes**.
- **Export Privileges**:
  - GRANT.

### Export Partitions
- **Types**:
  - Range, List.
  - No Hash partitions (yet).
- **Specific Objects**:
  - Ability to export specific objects.
  - Apply `WHERE` clause.
- **BLOB Type**:
  - Export as Postgresâ€™ `BYTEA`.
- **Oracle Views**:
  - Export as Postgres TABLEs.
- **PL/SQL to PL/PGSQL**:
  - Rudimentary conversion help.
- **Platform Independent**.

### Export Methods
- **Single File**.
- **Multiple Files**.
- **Compressed Output** using gzip or bzip.
- **Direct Export to Postgres** (not recommended as the first step).

### Steps to Export
- **Configuration File**:
  - Define Oracle connection parameters.
  - Define objects to export.
  - Control output.
  - Import into Postgres.
  - Control exported objects.
  - Encoding conversion.

### Configuration Parameters
- **Oracle Connection**:
  - `ORACLE_HOME`, `ORACLE_DSN`, `ORACLE_USER`, `ORACLE_PWD`, `USER_GRANTS`, `TRANSACTION`.
- **Objects to Export**:
  - `SCHEMA`, `EXPORT_SCHEMA`, `PG_SCHEMA`, `SYSUSERS`, `TYPE`, `TABLES`, `EXCLUDE`, `WHERE`, `MODIFY_STRUCT`, `REPLACE_COLS`.
- **Output Control**:
  - `DATA_LIMIT`, `OUTPUT`, `OUTPUT_DIR`, `BZIIP2`, `FILE_PER_TABLE`, `FILE_PER_FUNCTION`, `TRUNCATE_TABLE`.
- **Postgres Import**:
  - `PG_DSN`, `PG_USER`, `PG_PWD`.
- **Export Control**:
  - `SKIP`, `KEEP_PKEY_NAMES`, `FKEY_DEFERRABLE`, `DEFER_FKEY`, `DROP_FKEY`, `DROP_INDEXES`, `DISABLE_TABLE_TRIGGERS`, `DISABLE_SEQUENCE`, `DATA_TYPE`, `CASE_SENSITIVE`, `ORA_RESERVED_WORDS`.
- **Encoding Conversion**:
  - `NLS_LANG`, `BINMODE`, `CLIENT_ENCODING`.

---

Thank you for your attention.

(C) EnterpriseDB Corporation 2011. All Rights Reserved. Company Confidential