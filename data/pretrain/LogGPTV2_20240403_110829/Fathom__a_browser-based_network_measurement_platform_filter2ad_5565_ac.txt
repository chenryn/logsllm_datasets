Scripts thus have no way to access APIs they did not request.
I.4: Server Manifests. In addition to script manifests, we allow
targets to explicitly control permissible incoming trafﬁc via server
manifests. These manifests reside at a well-known location on web
servers, currently /fathom.json. Server manifests can whitelist
connectivity for scripts originating from speciﬁc domains or IP ad-
dresses. Users can conﬁgure their client policy to allow APIs to
proceed without prompting whenever server manifests permit inter-
3For example, UPnP’s discovery phase produces IP addresses to
which the script may want to connect via HTTP in order to retrieve
a device’s service proﬁle. Resource schemas allow precise expres-
sion of such dependencies, in contrast to broad notions such as “lo-
cal network.” Fathom tracks hostnames and IP addresses returned
by its APIs.
action with the given destination. This scenario forms the default
for most APIs initiating connections.
I.5: Code Signing. Finally, experimenters can sign Fathom scripts
cryptographically to express authorship. Such signatures provide
two key beneﬁts. First, signatures establish an identity behind
Fathom code, which allows users to reason about scripts in terms of
their trust in the author, instead of (or in addition to) making judg-
ments based on the resources the script intends to use (API calls
and targets). This trust in authorship likely proves easier for non-
technical users to understand. Second, signed code allows users
to conﬁgure permissions at the granularity of author identities in-
stead of script origin. Furthermore, Fathom can identify scripts ab-
stractly, across origins, and even when users save Fathom-bearing
pages to disk.
Examples: With the above inputs Fathom can derive effective poli-
cies for each arriving script at run time. For instance, Fathom can
let an arriving script proceed without user prompting if (i) the client
policy (I.1) permits execution without prompting for the API re-
sources the script requests (via its script manifest, I.3) and (ii) the
desired destination agrees via a server manifest (I.4), given (iii) this
server manifest actually exists and indeed agrees. In a more simple
scenario, if a script bears the signature (I.5) of an author whom the
user added to their local whitelist indicating full trust in the code,
then the script will execute without any prompting.
By design, policy inputs can come into conﬂict. The client policy
resolves such cases. Consider a script that declares (via I.3) its
need to use fathom.socket.tcp.* to open a connection to a
given target that has agreed to such communication (via I.4). If the
user’s client policy (I.1) requests prompting for permission to use
fathom.socket.tcp.* then Fathom will prompt the user (via
I.2) before running the code regardless of the server’s consent and
any possible signing.
Our hope is that with more extensive experience, a subset of in-
puts will emerge that proves sufﬁcient, since fewer mechanisms
would simplify explication and maintenance of the security frame-
work. Moreover, expanded user experience will allow us to better
understand how Fathom’s input mechanisms can accommodate the
users’ potentially limited awareness of the implications of the dif-
ferent permission levels.
Comparison: Fathom’s security model borrows from the Java and
Flash platforms, with careful consideration of current browsers’
same-origin policies. Like Java, we employ code signing and pro-
vide user consent as a means to enable functionality, but in contrast
to Java’s carte blanche permissions after user consent to signed
code (§ 5.1), Fathom retains precise API-level control and allows
neither execution of arbitrary binaries nor ﬁle system access. Like
Flash, we employ server manifests to establish an explicit con-
sent signal for the Fathom core that permits cross-site connec-
tions [33]. Script manifests exist in several technologies, includ-
ing Java, Flash, and Android apps, as well as Firefox and Chrome
extensions. However, our notion of resource schemas renders re-
source control more explicit than any of these technologies.
5 Implementation
Web browsers are complex systems, hence the design of a browser-
based measurement platform requires careful thought. We ﬁrst dis-
cuss the implementation choices within the browser, and then we
describe our prototype of Fathom, which we implement as a Fire-
fox extension.
5.1
To maximize ease of adoption, we would like Fathom to depend
on the browser’s architecture as little as possible while still imple-
Implementation space
77Technology
Standard JS

Extension (JS) 
Plugin (runtime) 
Plugin (custom) 
Browser

Rich Accuracy
APIs
Portability
Browser OS









N/A
Low
Good
High
High
High
Table 3: Design space for a browser-based platform. Note:
the accuracy of JavaScript-based extensions depends upon the
underlying extension API.
menting the design discussed above. In the following, we discuss
several points along this design space. Table 3 summarizes the ca-
pabilities of each approach.
Standard JavaScript: While it is possible to implement some
types of measurements in JavaScript (see discussion in § 7.1), the
lack of low-level socket interfaces and access to host properties,
leaves this approach suboptimal. Additionally, measurement accu-
racy would require careful implementation as timer accuracy de-
pends heavily on browser architecture and load.
Browser extensions: Extensions enhance the functionality of the
web browser and allow implementation of measurement tasks in
portable JavaScript, platform-dependent C/C++, or both. The
API richness available to JavaScript extensions varies considerably
across browsers. Those extensions execute with browser privileges
and have access to most system resources, including the network
and ﬁle systems, and remain portable across different operating sys-
tems for a particular browser. Since most modern browsers compile
JavaScript to native code using JIT compilers, extensions do not
impose any signiﬁcant performance overhead. JavaScript exten-
sions present good candidate vehicles for realizing a measurement
platform, assuming sufﬁcient API richness and accuracy. C/C++
extensions increase measurement capability at the expense of porta-
bility.
Runtime plugins:
In this category, Java, Flash, and Silverlight
technologies allow developers to implement experiments and eas-
ily distribute them to users who have the required runtime plugin
installed.
Indeed, Java is a popular choice for measurement ex-
periments due to its rich APIs and performance, but it comes with
crucial shortcomings that largely also apply to the Flash platform.
First, Java’s sandboxing keeps execution effectively fully separate
from the containing web page. By contrast, measurement code
that executes within a web page can directly interact with current
web applications. Second, the runtimes’ security policies tend to
prohibit activities that could aid network measurements (such as
traceroute or ping invocations). Java’s code-signing feature
provides a way to work around this limitation: after the user ac-
cepts an initial dialog presenting the code author’s identity, even
self-signed applets may access arbitrary runtime APIs and thus
behave like host-native applications with full user privileges, in-
cluding permission to create and delete ﬁles or contact arbitrary
network locations. While no doubt useful in principle, this carte
blanche ability far exceeds the permissions required to implement
measurement and troubleshooting code. Third, the availability of
the runtime presents a limiting factor, as virtually no modern web
sites use Java applets.4 Fourth, even when installed, code porta-
bility remains uncertain. For example, JavaScript interaction from
plugin code remains highly platform-dependent, and the Android
operating system supports only an API-limited dialect of Java.
4OSX and Windows no longer include a Java runtime by default,
while several recent critical security incidents relating to Java [17,
26, 35] further erode users’ willingness to install the platform.
Custom plugins: We could develop our own native measurement
plugin in C/C++. While enabling great performance and host ac-
cess, portable interaction with the browser remains uncertain. For
example, Microsoft recently dropped support for the cross-browser
NPAPI [53] in its browsers. Sandboxing technologies like NaCl
[55] and Xax [13] allow the execution of native applications within
the browser without compromising on performance, but their sand-
boxed environment respects the browser’s security policies and dis-
ables application code from performing TCP/IP or UDP network-
ing, or even local ﬁle I/O.
Browser changes: One could build the entire platform into an
open-source browser, which would provide ideal feature support.
This approach would present a substantial development effort and
would likely ﬁnd little immediate support from browser vendors.
While not immediately feasible, if a general purpose measure-
ment platform proves useful—especially to web site operators—the
functionality could be moved into browsers in the future.
After considering the major browsers and the design space
sketched above, we chose to implement our prototype of Fathom
as a JavaScript-only extension for the Firefox browser. Several as-
pects informed this choice: (i) Firefox enjoys great popularity and
exists on a wide range of different platforms; (ii) its XPCOM inter-
face provides a rich API to extensions; (iii) as we describe further
below, this API allows us to perform low-level socket I/O directly
from JavaScript. The latter currently sets Firefox apart from other
browsers, for which we would need to implement at least parts of
Fathom in native code. The extension realizes the design details
outlined in § 4 and currently consists of 3,200 lines of JavaScript.
5.2 Firefox’s architecture
Before describing Fathom’s architecture in detail, we brieﬂy ex-
plain the major components of the Firefox browser relevant to
Fathom’s design. Firefox’s DOM subsystem creates an abstract
representation of the visited web pages, which the rendering en-
gine uses for layout and page imaging. A single, shared JavaScript
engine parses and interprets both web page and extension code, the
browser’s UI thread. While the browser restricts web page code to
stringent security policies, the extension code runs with browser-
level privileges. The network engine implements application-layer
network protocols such as HTTP and FTP. To do this, it employs
the Netscape Portable Runtime (NSPR), Mozilla’s platform-neutral
API for low-level network I/O and libc-like functions. The XP-
COM subsystem implements a number of core architecture facil-
ities such as threads and memory management.
It also exposes
these features to the JavaScript runtime. Furthermore, it includes
js-ctypes [40], a JavaScript wrapper to the ctypes library, allowing
extensions implemented in JavaScript to call functions in shared C
libraries.
5.3 Architectural challenges
Firefox’s architecture poses a number of challenges for extension
development, particularly given the design goals for a network
monitoring platform as we outlined in § 3.
First, without the js-ctypes wrapper, we could not perform
socket-level I/O from JavaScript and would need to resort to native
code. Even given js-ctypes, implementation of some socket APIs
requires handling platform dependent data types (such as union-
based network address structures) which creates a challenge for
achieving a truly OS-neutral Fathom. We overcame this problem
by providing sufﬁcient padding in the relevant JavaScript datatypes
to accommodate varying union sizes on different platforms.
Second, despite low-level socket access, ICMP responses and
raw sockets remain unavailable. Thus, Fathom cannot provide ac-
cess to packet-level traces, which would be useful for detailed diag-
78Figure 2: Fathom’s architecture in Firefox. Fathom augments
the browser’s XPCOM subsystem with measurement capabil-
ities and extends each web page’s DOM with a fathom ob-
ject and associated measurement APIs. Worker threads enable
asynchronous API implementation.
nosis. Fathom overcomes the problem by leveraging access to the
browser’s command execution API to directly invoke select ser-
vices on the host, like ping or traceroute and sidestep this architec-
tural challenge.
Third, JavaScript executing as part of a web page or browser
extensions accesses the objects on the web page from the browser’s
UI thread. Call blocking or long-running functions while executing
in this thread would render the entire browser’s UI unresponsive.
Fourth, while Firefox extensions can use a threading mecha-
nism called Chrome Workers5 [39], these threads do not follow the
standard OS model of a shared address space with synchroniza-
tion primitives. Instead, a message-passing system similar to Web
Workers exclusively manages communication with worker threads,
imposing additional latency.6
Fifth,
to conserve system resources, recent Firefox versions
clamp callback timer accuracy for in-page JavaScript to low pre-
cision when the user is viewing a page in a different tab. This
clamping can add further function call latency.
5.4 Fathom’s architecture
Figure 2 shows the schematic architecture of Fathom running in
Firefox. Once installed, the extension creates a component in the
XPCOM subsystem that performs two main tasks. First, it in-
stalls measurement scripts that handle data collection for passive
in-browser measurement. Second, it provides measurement and
network I/O APIs to in-page JavaScript. We next discuss the main
implementation decisions of Fathom’s prototype.
Asynchronous API callﬂow: As mentioned in § 5.3, in-page and
extension JavaScript code as well as the application’s UI thread
share a single thread of execution. Since Fathom likewise consists
of JavaScript code, its focus on network I/O requires careful API
design on our part to avoid the possibility of rendering the entire
application unresponsive. In order to invoke potentially blocking
5“Chrome” here refers to a privilege level within the Firefox
browser, not to the Google Chrome web browser.
6While XPCOM exports an interface to manage OS-level threads,
we opted for Chrome Workers as they provide a natural, Web
Worker-like asynchronous interface and also give thread safety
guarantees.
Figure 3: Asynchronous callﬂow in Fathom between the main
thread and a socket worker, for a recv() invocation on a UDP
socket.
I/O calls without delaying the rest of the browser and without suf-
fering delays due to browser load, Fathom performs all such calls
in independently executing Chrome Worker threads and uses asyn-
chronously invoked user-provided callbacks when I/O operations
complete. Fathom allocates these worker threads on per-socket
granularity as socket workers. Firefox’s event management on such
threads thus ensures that I/O operations queue up and get processed
as I/O progresses. Figure 3 illustrates the callﬂow.
Timer throttling: The throttling of frequently executing timer
callbacks in background tabs, as mentioned in § 5.3, could affect
measurements implemented in inactive in-page JavaScript code.
For example, a measurement in a background tab that invokes
the fathom.socket.udp.receive() API call in a callback
invoked periodically via JavaScript’s setInterval() mecha-
nism, Firefox would clamp the timeout at 1000ms, perhaps sig-
niﬁcantly slowing down and affecting the measurement. As a
workaround, Fathom users can package an entire measurement into
a single function (with nested state and functions) and provide the
source of that function—a FathomScript—to Fathom (JavaScript’s
toSource() feature makes this easy). Fathom then launches
a low-privileged Web Worker, prepares it such that it offers the
Fathom API, and proceeds to execute the function in the Worker.
This guarantees independence from in-page timer clamping. Script
authors need only be aware of this feature in special cases requiring
the use of low-latency I/O inside Fathom (see § 7.1).
Maintaining baseline measurements: For passive measurements,
the current implementation of Fathom samples browser and sys-
tem information every 5 seconds and makes the last 2,000 sam-
ples available to all web pages. Each sample takes approximately
450 bytes. While the Fathom implementation stores a sliding win-
dow with the last 20 user sessions per domain for baseline met-
ric measurements, all the parameters of the baseline metrics are
conﬁgurable. We plan to evaluate different techniques for keeping
baseline measurements in our future work.
Security model: Our present implementation supports all of the