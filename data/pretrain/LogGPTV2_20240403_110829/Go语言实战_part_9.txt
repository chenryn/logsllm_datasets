Go 语言的文档也提供了浏览器版本。有时候，通过跳转到文档，查阅相关的细节，能更容
易理解整个包或者某个函数。在这种情况下，会想使用godoc作为Web服务器。如果想通过Web
浏览器查看可以点击跳转的文档，下面就是得到这种文档的好方式。
开发人员启动自己的文档服务器，只需要在终端会话中输入如下命令：
godoc -http=:6060
这个命令通知 godoc 在端口 6060 启动 Web 服务器。如果浏览器已经打开，导航到
http://localhost:6060可以看到一个页面，包含所有Go标准库和你的GOPATH下的Go源代码的文档。
如果图 3-2显示的文档对开发人员来说很熟悉，并不奇怪，因为 Go官网就是通过一个略
微修改过的 godoc 来提供文档服务的。要进入某个特定包的文档，只需要点击页面顶端的
Packages。
Go 文档工具最棒的地方在于，它也支持开发人员自己写的代码。如果开发人员遵从一个简
单的规则来写代码，这些代码就会自动包含在godoc生成的文档里。
为了在 godoc 生成的文档里包含自己的代码文档，开发人员需要用下面的规则来写代码和
注释。我们不会在本章介绍所有的规则，只会提一些重要的规则。
3.5 进一步介绍Go开发工具 47
图3-2 本地Go文档
用户需要在标识符之前，把自己想要的文档作为注释加入到代码中。这个规则对包、函数、
类型和全局变量都适用。注释可以以双斜线开头，也可以用斜线和星号风格。
// Retrieve连接到配置库，收集各种链接设置、用户名和密码。这个函数在成功时
// 返回config结构，否则返回一个错误。
func Retrieve() (config, error) {
// ..．省略
}
在这个例子里，我们展示了在Go语言里为一个函数写文档的惯用方法。函数的文档直接写
在函数声明之前，使用人类可读的句子编写。如果想给包写一段文字量比较大的文档，可以在工
程里包含一个叫作doc.go的文件，使用同样的包名，并把包的介绍使用注释加在包名声明之前。
/*
包usb提供了用于调用USB设备的类型和函数。想要与USB设备创建一个新链接，使用NewConnection
...
*/
package usb
这段关于包的文档会显示在所有类型和函数文档之前。这个例子也展示了如何使用斜线和星
号做注释。可以在Google上搜索golang documentation来查找更多关于如何给代码创建一个好文
档的内容。
3.6 与其他 Go 开发者合作
现代开发者不会一个人单打独斗，而Go工具也认可这个趋势，并为合作提供了支持。多亏
了go工具链，包的概念没有被限制在本地开发环境中，而是做了扩展，从而支持现代合作方式。
让我们看看在分布式开发环境里，想要良好合作，需要遵守的一些惯例。
以分享为目的创建代码库
开发人员一旦写了些非常棒的 Go 代码，就会很想把这些代码与 Go 社区的其他人分享。这
其实很容易，只需要执行下面的步骤就可以。
1．包应该在代码库的根目录中
使用go get的时候，开发人员指定了要导入包的全路径。这意味着在创建想要分享的代码
库的时候，包名应该就是代码库的名字，而且包的源代码应该位于代码库目录结构的根目录。
Go语言新手常犯的一个错误是，在公用代码库里创建一个名为code或者src的目录。如
果这么做，会让导入公用库的语句变得很长。为了避免过长的语句，只需要把包的源文件放在公
用代码库的根目录就好。
2．包可以非常小
与其他语言相比，Go 语言的包一般相对较小。不要在意包只支持几个 API，或者只完成一
项任务。在Go语言里，这样的包很常见，而且很受欢迎。
3．对代码执行go fmt
和其他开源代码库一样，人们在试用代码前会通过源代码来判断代码的质量。开发人员需要
在签入代码前执行go fmt，这样能让自己的代码可读性更好，而且不会由于一些字符的干扰（如
制表符），在不同人的计算机上代码显示的效果不一样。
4．给代码写文档
Go开发者用godoc来阅读文档，并且会用http://godoc.org这个网站来阅读开源包的文档。如果
按照go doc的最佳实践来给代码写文档，包的文档在本地和线上都会很好看，更容易被别人发现。
3.7 依赖管理
从Go 1.0发布那天起，社区做了很多努力，提供各种Go工具，以便开发人员的工作更轻松。
有很多工具专注在如何管理包的依赖关系。现在最流行的依赖管理工具是Keith Rarik写的godep、
Daniel Theophanes写的vender和Gustavo Niemeyer开发的gopkg.in工具。gopkg.in能帮助开发人
员发布自己的包的多个版本。
作为对社区的回应，Go 语言在 1.5 版本开始试验性提供一组新的构建选项和功能，来为依
赖管理提供更好的工具支持。尽管我们还需要等一段时间才能确认这些新特性是否能达成目的，
但毕竟现在已经有一些工具以可重复使用的方式提供了管理、构建和测试Go代码的能力。
3.7.1 第三方依赖
像godep和vender这种社区工具已经使用第三方（verdoring）导入路径重写这种特性解决了
依赖问题。其思想是把所有的依赖包复制到工程代码库中的目录里，然后使用工程内部的依赖包
所在目录来重写所有的导入路径。
代码清单3-9展示的是使用godep来管理工程里第三方依赖时的一个典型的源代码树。
代码清单3-9 使用godep的工程
$GOPATH/src/github.com/ardanstudios/myproject
|-- Godeps
| |-- Godeps.json
| |-- Readme
| |-- _workspace
| |-- src
| |-- bitbucket.org
| |-- ww
| | |-- goautoneg
| | |-- Makefile
| | |-- README.txt
| | |-- autoneg.go
| | |-- autoneg_test.go
| |-- github.com
| |-- beorn7
| |-- perks
| |-- README.md
| |-- quantile
| |-- bench_test.go
| |-- example_test.go
| |-- exampledata.txt
| |-- stream.go
|
|-- examples
|-- model
|-- README.md
|-- main.go
可以看到godep创建了一个叫作Godeps的目录。由这个工具管理的依赖的源代码被放在
一个叫作_workspace/src的目录里。
接下来，如果看一下在main.go里声明这些依赖的import语句（如代码清单3-9和代码清
单3-10所示），就能发现需要改动的地方。
代码清单3-10 在路径重写之前
01 package main
02
03 import (
04 "bitbucket.org/ww/goautoneg"
05 "github.com/beorn7/perks"
06 )
代码清单3-11 在路径重写之后
01 package main
02
03 import (
04 "github.ardanstudios.com/myproject/Godeps/_workspace/src/
bitbucket.org/ww/goautoneg"
05 "github.ardanstudios.com/myproject/Godeps/_workspace/src/
github.com/beorn7/perks"
06 )
在路径重写之前，import语句使用的是包的正常路径。包对应的代码存放在GOPATH所指
定的磁盘目录里。在依赖管理之后，导入路径需要重写成工程内部依赖包的路径。可以看到这些
导入路径非常长，不易于使用。
引入依赖管理将所有构建时依赖的源代码都导入到一个单独的工程代码库里，可以更容易地重
新构建工程。使用导入路径重写管理依赖包的另外一个好处是这个工程依旧支持通过 go get 获取
代码库。当获取这个工程的代码库时，go get可以找到每个包，并将其保存到工程里正确的目录中。
3.7.2 对 gb 的介绍
gb是一个由Go社区成员开发的全新的构建工具。gb意识到，不一定要包装Go本身的工具，
也可以使用其他方法来解决可重复构建的问题。
gb背后的原理源自理解到Go语言的import语句并没有提供可重复构建的能力。import
语句可以驱动go get，但是import本身并没有包含足够的信息来决定到底要获取包的哪个修
改的版本。go get无法定位待获取代码的问题，导致Go工具在解决重复构建时，不得不使用
复杂且难看的方法。我们已经看到过使用godep时超长的导入路径是多么难看。
gb的创建源于上述理解。gb既不包装Go工具链，也不使用GOPATH。gb基于工程将Go工
具链工作空间的元信息做替换。这种依赖管理的方法不需要重写工程内代码的导入路径。而且导
入路径依旧通过go get和GOPATH工作空间来管理。
让我们看看上一节的工程如何转换为gb工程，如代码清单3-12所示。
代码清单3-12 gb工程的例子
/home/bill/devel/myproject ($PROJECT)
|-- src
| |-- cmd
| | |-- myproject
| | | |-- main.go
| |-- examples
| |-- model
| |-- README.md
|-- vendor
|-- src
|-- bitbucket.org
| |-- ww
| |-- goautoneg
| |-- Makefile
| |-- README.txt
| |-- autoneg.go
| |-- autoneg_test.go
|-- github.com
|-- beorn7
|-- perks
|-- README.md
|-- quantile
|-- bench_test.go
|-- example_test.go
|-- exampledata.txt
|-- stream.go
一个 gb 工程就是磁盘上一个包含 src/子目录的目录。符号$PROJECT 导入了工程的根目
录中，其下有一个src/的子目录中。这个符号只是一个简写，用来描述工程在磁盘上的位置。
$PROJECT不是必须设置的环境变量。事实上，gb根本不需要设置任何环境变量。
gb 工程会区分开发人员写的代码和开发人员需要依赖的代码。开发人员的代码所依赖的代
码被称作第三方代码（vendored code）。gb工程会明确区分开发人员的代码和第三方代码，如代
码清单3-13和代码清单3-14所示。
代码清单3-13 工程中存放开发人员写的代码的位置
$PROJECT/src/
代码清单3-14 存放第三方代码的位置
$PROJECT/vendor/src/
gb 一个最好的特点是，不需要重写导入路径。可以看看这个工程里的 main.go 文件的 import
语句——没有任何需要为导入第三方库而做的修改，如代码清单3-15所示。
代码清单3-15 gb工程的导入路径
01 package main
02
03 import (
04 "bitbucket.org/ww/goautoneg"
05 "github.com/beorn7/perks"
06 )
gb工具首先会在$PROJECT/src/目录中查找代码，如果找不到，会在$PROJECT/vender/src/
目录里查找。与工程相关的整个源代码都会在同一个代码库里。自己写的代码在工程目录的src/
目录中，第三方依赖代码在工程目录的 vender/src 子目录中。这样，不需要配合重写导入路
径也可以完成整个构建过程，同时可以把整个工程放到磁盘的任意位置。这些特点，让 gb 成为
社区里解决可重复构建的流行工具。
还需要提一点：gb 工程与 Go 官方工具链（包括 go get）并不兼容。因为 gb 不需要设置
GOPATH，而Go工具链无法理解gb工程的目录结构，所以无法用Go工具链构建、测试或者获
取代码。构建（如代码清单 3-16 所示）和测试 gb 工程需要先进入$PROJECT 目录，并使用 gb
工具。
代码清单3-16 构建gb工程
gb build all
很多 Go 工具支持的特性，gb 都提供对应的特性。gb 还提供了插件系统，可以让社区扩展
支持的功能。其中一个插件叫作vender。这个插件可以方便地管理$PROJECT/vender/src/
目录里的依赖关系，而这个功能 Go 工具链至今没有提供。想了解更多 gb 的特性，可以访问这
个网站：getgb.io。
3.8 小结
在Go语言中包是组织代码的基本单位。
环境变量GOPATH决定了Go源代码在磁盘上被保存、编译和安装的位置。
可以为每个工程设置不同的GOPATH，以保持源代码和依赖的隔离。
go工具是在命令行上工作的最好工具。
开发人员可以使用go get来获取别人的包并将其安装到自己的GOPATH指定的目录。
想要为别人创建包很简单，只要把源代码放到公用代码库，并遵守一些简单规则就可以了。
Go语言在设计时将分享代码作为语言的核心特性和驱动力。
推荐使用依赖管理工具来管理依赖。
有很多社区开发的依赖管理工具，如godep、vender和gb。
4
第 4 章 数组、切片和映射
第4章 数组、切片和映射
本章主要内容
 数组的内部实现和基础功能
 使用切片管理数据集合
 使用映射管理键值对
很难遇到要编写一个不需要存储和读取集合数据的程序的情况。如果使用数据库或者文件，
或者访问网络，总需要一种方法来处理接收和发送的数据。Go 语言有 3 种数据结构可以让用户
管理集合数据：数组、切片和映射。这3种数据结构是语言核心的一部分，在标准库里被广泛使
用。一旦学会如何使用这些数据结构，用Go语言编写程序会变得快速、有趣且十分灵活。
4.1 数组的内部实现和基础功能
了解这些数据结构，一般会从数组开始，因为数组是切片和映射的基础数据结构。理解了数
组的工作原理，有助于理解切片和映射提供的优雅和强大的功能。
4.1.1 内部实现
在Go语言里，数组是一个长度固定的数据类型，用于存储一段具有相同的类型的元素的连
续块。数组存储的类型可以是内置类型，如整型或者字符串，也可以是某种结构类型。
在图4-1中可以看到数组的表示。灰色格子代表数组里的元素，每个元素都紧邻另一个元素。
每个元素包含相同的类型，这个例子里是整数，并且每个元素可以用一个唯一的索引（也称下标
或标号）来访问。
数组是一种非常有用的数据结构，因为其占用的内存是连续分配的。由于内存连续，CPU
能把正在使用的数据缓存更久的时间。而且内存连续很容易计算索引，可以快速迭代数组里的所
有元素。数组的类型信息可以提供每次访问一个元素时需要在内存中移动的距离。既然数组的每
个元素类型相同，又是连续分配，就可以以固定速度索引数组中的任意数据，速度非常快。
图4-1 数组的内部实现
4.1.2 声明和初始化
声明数组时需要指定内部存储的数据的类型，以及需要存储的元素的数量，这个数量也称为
数组的长度，如代码清单4-1所示。
代码清单4-1 声明一个数组，并设置为零值
// 声明一个包含5个元素的整型数组
var array [5]int
一旦声明，数组里存储的数据类型和数组长度就都不能改变了。如果需要存储更多的元素，