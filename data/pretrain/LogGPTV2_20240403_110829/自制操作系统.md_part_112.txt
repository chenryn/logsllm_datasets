POP DX
POP BX ; 将ES的内容存入BX
SHR BX,5 ; 将BX由16字节为单位转换为512字节为单位
MOV AH,0
ADD BX,AX ; BX += AL;
SHL BX,5 ; 将BX由512字节为单位转换为16字节为单位
MOV ES,BX ; 相当于EX += AL * 0x20;
POP BX
SUB BX,AX
JZ .ret
ADD CL,AL ; 将CL加上AL
CMP CL,18 ; 将CL与18比较
JBE readfast ; CL = 0; j--) {
9
s[j] = '0' + i % 10;
i /= 10;
}
s[8] = 0; 26
return;
}
27
这样就完工了，仅通过这一点修改，invader.hrb就从2335字节变成了1509字节，大幅度瘦身
了，大获全胜！反过来说，sprintf这个函数是如此之大，真是减肥瘦身的大敌呢（笑）。
28
当然，修改了之后的invader.hrb运行起来不会有任何变化，不信的话可以“make run”试试
看哦。
29
■■■■■
30
修改完成之后，我们再重新“make”一下磁盘映像，并用二进制编辑器打开看看，数据占用
的部分到028498。0x28499 / 18432 = 8个柱面，0x28499 % 18432 = 17561字节，正好缩减到9个柱
30
——————————
① 大家可千万别说“这种程序全部丢掉算了”这种话，虽然这个主意挺正确的，但实在是太“残忍”了。这些应用 16
程序中可满载着这些日子我们开发工作中所留下的回忆啊！
图灵社区会员 metorm 专享 尊重版权
688 …… 第30天：高级的应用程序
面的范围内，撒花！
到此为止，我们的应用程序编写活动也该告一段落了，我们来总结一下本章的成果吧。
invader.hrb…… 1509字节：外星人游戏
calc.hrb……1668字节：命令行计算器
tview.hrb……1753字节：文本阅览器
mmlplay.hrb……1975字节：MML播放器
gview.hrb……3865字节：图片阅览器
看起来从上到下文件的大小是在不断递增的呢。虽然很有趣，不过这只是个巧合啦。
最后我们来一张纪念截图吧。
大家来拍个全家福
66 光盘启动（harib27f）
到现在，我们的“纸娃娃系统”就已经正式完工了。可能有人觉得软盘读取速度太慢，如果
能从光盘启动就好了。为此，笔者在这里给大家一些建议。
http://www.geocities.co.jp/SiliconValley-Cupertino/3686/fdtoiso.html
从上面的网址下载fdtoiso_gui.lzh，解压缩之后运行里面的fdtoiso.exe，会弹出一个窗口，将
haribote.img拖进窗口中，点击“进入ISO映像生成画面”，就可以很容易地生成光盘用的映像文
件了。接下来只要将这个ISO映像刻录到CD-R或者CD-RW上面就可以了。
图灵社区会员 metorm 专享 尊重版权
6 光盘启动（harib27f） …… 689
当然，你的电脑也必须支持从光盘启动才可以哦。 1
在这里，十分感谢这个软件的作者（虽然不知道他的名字）为我们提供了如此方便的软件。
18
■■■■■
如果你觉得光做个能启动的光盘还不过瘾，希望这张光盘在Windows或者Linux中读取的时
3
候还能显示里面的文件内容的话，笔者推荐下面这个工具。
http://cdrtfe. sourceforge .net/ 20
在此对本软件的作者kerberos002表示感谢。
将cdrtfe软件安装好之后，启动该软件，从菜单中选择“Extra - Language – Chinese（ simplified）” 21
即可将软件界面切换成简体中文。
点击“文件系统”按钮，将“引导光盘”中的“制作引导光盘”选项打勾，点击“引导镜像” 22
旁边的“浏览”按钮，选择haribote.img文件并确定，然后将准备好放进光盘的其他一些文件和文
件夹拖到软件的窗口中，点击“开始”按钮就可以开始刻录了。如果不想刻录光盘，只生成ISO 7
映像文件的话，可以点击“光盘选项”按钮，点击“使用镜像”旁边的“浏览”按钮，选择要保
存ISO映像文件的位置和文件名，勾选下面的“只生成镜像，不刻录”选项，确定，然后再点击
8
软件主界面中的“开始”按钮，就可以生成指定的ISO映像文件了。
这个软件的选项非常丰富，功能也很强大，大家在掌握了基本方法之后可以自己多做一些尝
9
试。此外，还有一些光盘刻录软件也具备类似的功能，大家如果有已经非常熟悉的软件，也可以
使用它们来创建可用来启动电脑的光盘。
26
好，今天的内容就到这里啦，大家晚安。
27
28
29
30
30
16
图灵社区会员 metorm 专享 尊重版权
第 31 天
写在开发完成之后
 继续开发要靠大家的努力  毕业典礼
 关于操作系统的大小  附录
 操作系统开发的诀窍
 分享给他人使用
 关于光盘中的软件
 关于开源的建议
 后记
11 继续开发要靠大家的努力
到昨天为止，我们为期30天的操作系统开发工作终于落下帷幕了。30天的时间说短不短，说
长也不长，大家是过得开心呢，还是已经累到不行了呢？笔者觉得，一个菜鸟只用30天的时间，
就能取得出相当不错的成果，还是非常值得高兴的一件事。对于那些觉得30天太长太累的读者来
说，是不是也能感到“操作系统开发其实没有想象中的那么难”呢？没错，确实没有那么难哦。
如果觉得这些内容还不过瘾，请一定要继续开发下去。之前都是笔者一个人在唱独角戏，从
现在开始，各位读者就是舞台上的主角。笔者非常期待看到并认真学习大家的作品呢（笑）。说
到继续开发，也不一定要从“纸娃娃系统”最后的harib27e开始，把之前的基础全部推翻重来也
可以，用Linux或FreeBSD等开源操作系统为基础进行改造也完全没有问题。
■■■■■
如果可以再多给笔者一点时间的话，在harib27e之后还要做些什么呢？笔者想首先开发一个
关于鼠标点击的API，有了这个，我们就可以编写出类似扫雷、纸牌这样的游戏了。鼠标API有
半天的时间就可以编写出来了。
接下来，可以实现对非矩形窗口的完全支持，增加有透明色时专用的refresh，然后再增加一
个不自动绘制窗口标题栏的模式。只需这样，我们就可以绘制出各种有趣形状的窗口。要实现这
个功能，只考虑API的话仅半天就够了。
图灵社区会员 metorm 专享 尊重版权
1 继续开发要靠大家的努力 …… 691
壁纸功能也比较简单。不过要实现壁纸功能，需要先实现读取图片文件的功能。这就需要将 1
相当于gview.hrb的内容移植到操作系统中去。在画面下方的任务栏中显示窗口的信息，并用鼠标
切换，也会相当有趣。这两个功能加在一起，大概用一天的时间可以完成。
18
再接下来要开发的，还有向磁盘进行写入的功能。如果实现了不依赖BIOS的磁盘写入功能，
再稍加改造就可以顺便实现磁盘读取功能，这样一来就不需要在系统启动时将所有文件装入内
3
存，启动时间也可以变得更短，也不需要每次特地去调整IPL了，真是一箭三雕呢。这项改造如
果依照本书的格式来撰写的话，大约需要3天的时间。
20
一旦实现了对文件写入的支持，那么后面可以做的东西就相当丰富了，比如可以编写文本编
辑器，还有类似“画图”的图片编辑软件等。有了文本编辑器，我们就可以直接在“纸娃娃系统”
21
中编写MML文件并立即播放了。假如移植了C语言编译器、nask以及连接器，就可以在“纸娃娃
系统”中编写应用程序并立即运行了。如果真能做到这一步，那么连在“纸娃娃系统”中对“纸
娃娃系统”本身进行make也不再是痴人说梦了，真是想想就觉得心潮澎湃呢。 22
再更进一步说，如果可以支持硬盘和存储卡的读写并支持网络，能做的事情就会更多了。还
可以增加对虚拟内存的支持，使操作系统可以使用比实际的物理内存更多的内存空间。命令行窗 7
口也可以扩展一下，比如增加重定向功能（即不将信息输出到画面上，而是写入文件中）等，或
者实现像Windows资源管理器那样用鼠标来管理文件的功能也不错呢。
8
■■■■■
9
除了表面上的改造之外，还可以做一些操作系统内部的完善工作。目前的“纸娃娃系统”中
没有考虑到进行大量处理时内存会不足的情况，如果我们启动很多个gview.hrb将内存消耗光，肯
26
定会出问题的。我们需要采取一些措施，比如在内存空间不足时不允许启动更多的应用程序等。
此外，在mmlplay.hrb演奏的时候，如果移动一个很大的窗口（如“tview –w100 –h30”这么
27
大的窗口），演奏就会变得混乱。这是由于负责窗口移动的task_a的优先级高于mmlplay.hrb所导致
的，而思考一下如何解决这个问题应该也挺有意思的（例如将音乐播放的应用程序作为特例提高
其优先级，或者创建一个专门移动窗口的任务再对其优先级进行微调等）。 28
这次我们在编写“纸娃娃系统”的过程中，讲解了使用32位模式的方法、内存段的使用方法、
中断的处理方法、内存的管理方法、窗口和鼠标的处理、定时器的管理方法、命令行窗口的原理、 29
API的方式、访问文件的方法，等等。但这些内容并不都是正确答案，其实在编写操作系统的方
法上，并没有所谓的正确答案。本书中所讲解的内容，只能算是一个实例而已，大家千万不要被 30
这些条条框框所束缚，请自由发挥自己的想象力，去编写出更优秀的操作系统吧。例如笔者开发
的OSASK就很大程度上使用了和“纸娃娃系统”不同的算法，而Linux和Windows所使用的算法
16
又和“纸娃娃系统”以及OSASK不同。
■■■■■ 31
图灵社区会员 metorm 专享 尊重版权
692 …… 第31天：写在开发完成之后
笔者打算在本书的支持网页上征集各位读者所编写的操作系统以及为“纸娃娃系统”编写的
应用程序。说是征集，不过也没有什么奖品啦，请大家不要过分期待啦（笑）。对于想让自己的
操作系统被大家所知道和了解的人来说，这里提供了一个展示的场所。可以加上几张运行时的截
图，还可以加上大家各自主页的链接。
22 关于操作系统的大小
在0.1节中笔者曾经介绍了OSASK的大小只有不到80KB，不过目前完成的“纸娃娃系统”居
然只有39.1KB这么小，连笔者都感到很震惊，而且这还是没有经过压缩的大小。在OSASK和Linux
中，为了缩短系统的启动时间，操作系统的核心部分都是经过压缩的。我们来简单计算一下，如
果“纸娃娃系统”也用同样的方法进行压缩的话，包括解压缩的程序在内，也只要大约20KB左
右，差不多是现在的一半。
笔者并没有刻意去将操作系统做得很小，因此这个结果是出乎意料的（当然，应用程序倒是
有几次刻意缩减大小的行为，比如创建apilib.lib，将应用程序进行压缩，以及对invader.hrb所进行
的修改）。
笔者一直坚持这样一个观点：现在的操作系统都过于臃肿了，如果真要推翻重写的话，肯定
能一下子变小很多。也许有人会说，“纸娃娃系统”之所以这么小，是因为它的功能少呀。当然，
笔者也不认为像Windows和Linux这样的系统可以用20KB编写出来，不过如果20KB可以实现这样
的功能，那100KB应该能实现5倍的功能，1MB的话应该能实现50倍的功能才对。
而且，我们的“纸娃娃系统”是将便于初学者理解这个目的放在首位的，因此并没有使用一
些一般开发者会用到的手法。从让编写的程序变得更小这个观点来看，这是一个非常不利的条件。
此外们我们还进行了一些优化系统速度方面的改造，这也会增加系统的大小（如定时器、窗口移
动速度的提高等）。但即便如此，我们的系统还是只有20KB那么小。
■■■■■
笔者的OSASK大约有80KB，它的小巧曾引起了不少的关注。笔者曾经说过，OSASK就是对
现在OS都过于臃肿的最好证明。大部分普通人都可以理解笔者的这一观点，但有一些对编程比
较精通的人反驳道：“你是用了很多超出常识的高级技巧，为了让尺寸变小而牺牲了很多东西，
并且用汇编语言大量代替C语言①，才让OSASK变得这么小的。”
这次我们的“纸娃娃系统”可基本上都是用C语言编写的（只有C语言无法实现的部分才用
汇编语言来编写）。当然，也没有使用什么高级技巧（其实笔者根本就不会什么高级的技巧，如
果真有那种像魔法一样的技巧，笔者还真想学学呢）。相信读过本书的各位读者都是有目共睹的。
——————————
① 相比C语言，笔者更喜欢汇编语言，因此OSASK的一半都是用汇编语言编写的。
图灵社区会员 metorm 专享 尊重版权
3 操作系统开发的诀窍 …… 693
通过本书，笔者认为自己的观点更加有说服力了。 1
■■■■■
18
操作系统变得更小到底有什么好处呢？启动可以变快些，安装所需容量能变小些，而且可以
在硬盘、光盘以外的记录媒体上进行安装（比如软盘和存储卡等）。其实，也没什么特别的好处，
3
不过至少应该也没有什么坏处，比起臃肿的系统来说，应该还是精简的系统用起来要爽一些吧？
如果花钱购买的操作系统，或者是花很长时间下载的操作系统，其中一半以上都是没用的，笔者
20
觉得这实在是太可悲了。
同样的观点对于应用程序也适用。笔者认为“纸娃娃系统”的应用程序比Windows和Linux
的应用程序都要小①。这是操作系统的功劳呢，还是我们为将应用程序变小所做的努力的功劳呢， 21
好像也说不清楚了。不过，应用程序如果内容相同，那自然是小一些的比较好，既能节约磁盘空
间，还能缩短应用程序启动时的读取时间。 22
■■■■■
7