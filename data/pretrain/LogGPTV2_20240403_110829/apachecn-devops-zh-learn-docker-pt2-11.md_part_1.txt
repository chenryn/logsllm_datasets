# 十一、保护 Docker 容器
到目前为止，我们已经在本书中谈了很多关于快速发展的 Docker 技术。如果没有向您详细阐述 Docker 特定的安全问题和解决方法，这就不是一个好的、整洁的结尾。因此，这一章是特别精心制作的，并纳入本书，以解释所有关于 Docker 启发容器化的安全挑战。我们还想进一步说明如何通过一系列开创性技术、高质量算法、支持工具和最佳实践来解决挥之不去的安全问题。在本章中，我们将详细讨论以下关键主题:
*   Docker 容器安全吗？
*   容器的安全特性
*   新兴的安全赋能方法
*   确保容器安全的最佳实践
## 容器化领域的安全场景
几十年来，确保任何信息技术系统和业务服务的安全牢不可破一直是信息技术领域的主要需求和主要挑战之一。聪明的头脑可以识别和利用各种安全漏洞和缺陷(其中一些漏洞和缺陷是在系统概念化和具体化阶段不小心和不知不觉地引入的)。这个漏洞最终会在信息技术服务交付过程中带来无数的漏洞和混乱。有时，系统甚至变得对消费者和客户不可用。
另一方面，安全专家和工程师尝试他们所掌握的各种技巧和技术，以阻止黑客的邪恶之旅。然而，迄今为止，这还不是一场彻底的胜利。到处都有一些来自未知来源的值得注意的入侵，导致非常令人不安的信息技术减速，有时甚至出现故障。因此，全球各地的组织和政府都在安全研究方面投入大量的人才、时间和财富，以彻底消除所有与安全和安全相关的事故和事故。有许多特定于安全的产品供应商和托管安全服务提供商，旨在最大限度地减少信息技术系统上的安全威胁和漏洞带来的不可挽回和无法描述的后果。准确地说，对于任何现有的和新兴的技术，安全性一直是最关键和最关键的方面。这里需要注意的一点是，企业和云信息技术团队不能在满足安全需求方面无忧无虑和自满。
支持 Docker 的容器化代表了从物理的、未充分利用的、封闭的、整体的和单一租赁的 IT 资源到灵活的、开放的、可负担的、自动化的、共享的、面向服务的、最佳利用的和虚拟的 IT 资源的难忘而不屈不挠的旅程中的下一个逻辑步骤。准确地说，我们倾向于软件定义和容器化的云环境，以便获得一系列广泛阐述的业务、技术和用户优势。正如本书多次强调的那样，Docker 容器通常包括文件系统、网络栈、进程空间以及在任何地方运行应用所需的所有其他东西。这意味着每个 Docker 容器都包括指定的应用及其所有依赖项，以独立的方式进行运送、托管和执行。然而，这种广为人知的抽象容易产生新的高级安全攻击、漏洞和漏洞。系统可能变得不可访问，数据集可能被破坏，服务可能被停止，等等。
准确地说，肆虐的 Docker 技术有望彻底改变全球企业开发、部署和管理关键软件应用的方式。然而，容器不是万能的。在混合 IT 环境中部署和交付应用时，我们面临的同样挑战会在容器中复制。本章指出了减轻容器化引发的安全问题的行之有效的方法。随着云环境的广泛容器化，牢不可破和不可穿透的容器最终保证了安全、可靠和智能的云中心。长期目标是在公众可发现的位置拥有许多健壮、有弹性和有回报的容器。毫无疑问，有一些开创性的工具和平台可以通过混合和协作，从那些可定制、可配置和紧凑的容器中构建更好、更大的容器。
### Docker 容器的安全分支
Docker 技术的迅速普及主要是由于 Docker Inc .与其他相关方合作，引入了一种开放的、具有行业优势的映像格式，用于高效地打包、分发和运行软件应用。然而，将许多应用塞进一个系统会带来明确的担忧和漏洞:
*   **利用主机内核**:容器共享同一个主机内核，这种共享可能是容器化范例的单点故障。主机内核中的一个缺陷可能允许容器中的一个进程崩溃，导致主机瘫痪。因此，Docker 安全的领域是探索各种选项来限制和控制内核上的攻击面。安全管理员和架构师必须小心翼翼地利用主机操作系统的安全特性来保护内核。
*   **拒绝服务(DoS)攻击**:所有容器都应该共享内核资源。如果一个容器可以独占对某些资源(包括内存和处理)的访问，主机上的其他容器必然会缺乏计算、存储和网络资源。最终，DoS 之谜悄然而至，合法用户将难以访问这些服务。
*   **容器突破**:获得容器访问权限的攻击者不应该能够访问其他容器或主机。默认情况下，用户没有命名空间，因此任何脱离容器的进程在主机上将拥有与容器中相同的权限。也就是说，如果一个进程拥有根权限，那么它在主机上也拥有根权限。这意味着用户可以通过应用代码中的 bug 获得提升的甚至是根权限。那么结果就是无法挽回的损失。也就是说，我们需要坚持最小特权:每个进程和容器都应该以最小的访问权限和资源集运行。
*   **中毒映像** : Docker 映像也会受到危害和篡改，导致容器和主机不良。我们写了在存放映像存储库时彻底清洗和管理 Docker 映像的方法。类似地，强有力的访问控制机制已经到位，以减轻映像中毒。
因此，Docker 映像、容器、集群、主机和云必然会受到一连串病毒、恶意软件和其他关键威胁的阻碍。因此，Docker 安全领域最近已经成为研究人员和从业者最具挑战性的领域，我们可以期待在未来的日子里有许多改变游戏规则和增强安全性的算法、方法和表达。
### 安全方面-虚拟机与 Docker 容器
考虑到 Docker 容器的采用和改编一直在增加，Docker 安全性被赋予了首要的重要性。毫无疑问，有很多工作可以确保 Docker 容器的最高安全性，Docker 平台的最新版本嵌入了许多支持安全性的功能。
在本节中，我们将描述就安全纠纷而言，Docker 容器所处的位置。由于容器正在与**虚拟机** ( **虚拟机**)同步进行密切检查，我们将从虚拟机和容器的几个安全相关点开始。让我们从了解虚拟机与容器的区别开始。通常，虚拟机是重量级的，因此会膨胀，而容器是轻量级的，因此是纤细光滑的。下表显示了虚拟机和容器的著名特性:
| **虚拟机** | **容器** |
| 几个虚拟机在一台物理机上一起运行(低密度)。 | 几十个容器可以在单个物理机器或虚拟机上运行(高密度)。 |
| 这确保了虚拟机的完全隔离以确保安全性。 | 这实现了进程级别的隔离，并使用名称空间和 cgroups 等功能提供了额外的隔离。 |
| 每个虚拟机都有自己的操作系统和由底层虚拟机管理程序管理的物理资源。 | 容器与其 Docker 主机共享同一个内核。 |
| 对于网络，虚拟机可以链接到虚拟或物理交换机。虚拟机管理程序有一个用于提高输入/输出性能、网卡绑定等的缓冲区。 | 容器利用标准的 IPC 机制，如信号、管道、套接字等，进行联网。每个容器都有自己的网络栈。 |
下图说明了基于虚拟机管理程序的虚拟化如何实现物理机之外的虚拟机:
![](img/image_11_001.jpg)
下图生动地展示了容器化是如何明显偏离基于虚拟机管理程序的虚拟化的:
![](img/image_11_002.jpg)
关于虚拟机和容器安全方面的争论正在升温。有支持其中一个的论点和反论点。在虚拟化范例中，虚拟机管理程序是虚拟机的集中式核心控制器。任何类型的对新调配的虚拟机的访问都需要通过此虚拟机管理程序解决方案，它为任何类型的未经身份验证、未经授权和不道德的目的筑起了一道坚固的墙。因此，与容器相比，虚拟机的攻击面更小。虚拟机管理程序必须被黑客攻击或入侵，才能影响其他虚拟机。这意味着攻击者在能够触及主机内核之前，必须通过虚拟机内核和虚拟机管理程序路由攻击。
与虚拟化范例相反，容器直接放置在主机系统内核的顶部。这种精简而平均的体系结构提供了非常高的效率，因为它完全消除了虚拟机管理程序的仿真层，并且还提供了高得多的容器密度。但是，与虚拟机范例不同，容器范例没有很多层，因此，如果任何容器受到损害，就可以轻松访问主机和其他容器。因此，与虚拟机相比，容器的攻击面更大。
然而，Docker 平台的设计者已经对这种安全风险给予了适当的考虑，并设计了系统来阻止大多数安全风险。在接下来的章节中，我们将讨论系统中天生设计的安全性、为显著增强容器安全性而规定的解决方案，以及最佳实践和指导原则。
### 容器突出的安全实现特征
Linux 容器，尤其是 Docker 容器，天生就有一些有趣的安全实现特性。
如前所述，Docker 利用大量安全路障阻止越狱。也就是说，如果一个安全机制被破坏，其他机制很快就会以容器被黑客攻击的方式出现。在评估 Docker 容器的安全影响时，需要检查几个主线区域。如前所述，Docker 为容器化的应用带来了多种隔离功能，以大幅提高它们的安全性。大多数都是现成的。粒度级别的策略添加、取消和修改功能考虑了容器化的安全要求。Docker 平台允许您执行以下操作:
*   将应用相互隔离
*   将应用与主机隔离开来
*   通过限制应用的功能来提高其安全性
*   鼓励采用最低特权原则
这个开源平台本质上能够为不同运行时环境(如虚拟机、裸机服务器和传统信息技术)上的各种应用提供这些隔离。
## 不可改变的基础设施
当您向应用部署更新时，您应该创建新的实例(服务器和/或容器)并销毁旧的实例，而不是尝试就地升级它们。一旦你的应用运行了，*你就别碰它！*好处以可重复性、减少管理开销、更容易回滚等形式出现。**不可变映像**是包含运行应用所需的一切的映像，因此它包含源代码。Docker 容器的原则之一是映像是不可变的。也就是说，一旦构建，就不可更改，如果要进行更改，结果会得到一个新的映像。
Docker 容器是自给自足的，因此我们只需运行该容器，而无需任何其他麻烦，例如装载卷。这意味着我们可以以更简单透明的方式与用户或合作伙伴共享我们的应用。直接的结果是，我们可以使用工具(如 Kubernetes)以自动化的方式轻松扩展我们的系统，这允许我们在一组机器上运行一组容器，也就是一个**集群**。