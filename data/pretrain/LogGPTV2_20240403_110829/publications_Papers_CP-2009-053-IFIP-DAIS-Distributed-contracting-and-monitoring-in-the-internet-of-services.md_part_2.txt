Platform Browser
SLA Template
Fig.2. Overview SLA Generation, Negotiation, Monitoring
are used to augment the template file. We implemented this transformation
using openArchitectureWare [16]. The generated templates are then deployed to
the SLA Manager where they are available for the negotiation process which is
described in the next section. The approach of generating SLA templates from
service descriptions was also described in [17]. It is limited to purely technical
serviceaspects,whileourapproach,throughtheusageofUSDL,allowstospecify
also business related service aspects such as rights and duties of the involved
parties and penalties, to only mention a view.
SLANegotiationInfrastructure ThenegotiationofSLAfollowstheapproach
defined by WS-Agreement. It was implemented in form of the SLA Manager
component shown in Fig. 2, and based on the WSAG4J framework [18]. The
negotiation is started by a user who intends to consume a service. The SLA
Manager provides a SLA template which is presented to the consumer via a
user interface as part of the TEXO Service Management Platform. It allows the
consumers to make changes to the SLA template and submit it in the form of
an agreement proposal. This document is validated by the service provider and
accepted or rejected.
The SLA Manager also provides interfaces for other components to access
information regarding SLA. The monitoring components may access SLA infor-
mation which is needed to configure the monitoring process. SMP components
such as billing have access to information regarding the state (SLA fulfilled,
violated, not determined) of an SLA.
3 Contract Monitoring
The task of contract monitoring is to collect all information necessary to realise
the execution of tradable services with respect to given guarantees (SLA) and
to get usage data relevant for billing. On a technical level, service and system
monitoring help reaching this goal. We present a monitoring architecture which
integrates the flow of contracts.
3.1 Distributed Monitoring Architecture
In Sect. 1 we briefly introduced the TEXO architecture, consisting of one Service
Management Platform (SMP) as central marketplace and several, distributed
Tradable Services Runtimes (TSR) for hosting the services. Now we have a closer
look at the contracting and monitoring architecture illustrated in Fig. 34. The
main building blocks at TSR level are the Process and Service Engines, Access
Gate, Adaptation Container and TSR Monitoring. At SMP level the blocks are
SLA Manager, Monitoring Backend, Access Rights Management and components
for further processing. The communication between SMP and TSR is done via a
message-oriented middleware (MoM).
When a new service is deployed, its USDL file is transferred to the Process
and Service Engines at the TSR. Once a customer has negotiated a contract via
the SLA Manager’s SLA Negotiation component, the resulting SLA is stored in
the SLA Repository and the SLA Manager sends a message to the MoM that a
new SLA is available. Subscribers of this type of message are SLA Monitoring
and Monitoring Coordinator at TSR Monitoring. The latter then starts the
appropriate Monitoring Sensors and Aggregators as described in the following
sections. In case of a SLA violation, the SLA Monitoring triggers the Adaptation
Coordinator to start one of the Adaptation Mechanisms described in Sect. 4.3.
Sincecomplexbusinessprocessesmayconsistofmultipleservices,deployedon
distinct TSRs, we need a central Monitoring Backend at SMP level to collect the
single services’ monitoring data and merge it into a central database. Consumers
like the Further Processing components can access the monitoring data via
Monitoring as a Service (MaaS). To keep private data private, MaaS checks the
requester’s identity and the access rights at every data request.
InthefollowingsubsectionswehighlightthechallengesofthevariousMonitor-
ingSensortypes.Wedistinguishbetweenmonitoringonthesystemandexecution
container level (Sect. 3.2) on the one hand, and individual service monitoring on
the other one. A further difference exists in that some of the service properties
can be monitored from the outside (Sect. 3.3), e.g. by observing its message
transmissionbehaviour,whileotherpropertiescanonlybemeasuredwithexplicit
support within the execution container (Sect. 3.4). Finally, the sensor data is
converted to business objects (Sect. 3.5) and linked to contract objectives.
3.2 System Monitoring
IT system monitoring is a well-established activity ranging from single desktop
computers to large data centres. Usually, the overall health status of distributed
hardware and software is determined by measurement with agents, e.g. using
SNMP or Nagios [19], and controlled from a central monitoring location. In
scenariosofcontract-boundserviceexecution,determiningthestatusandavailable
resources of the execution servers is mandatory for creating realistic SLA offers.
In our approach, system monitoring controls the overall system health by
keepingtrackoftypicalsystemparameters,e.g.systemload,networkperformance,
4 FMC-notation, see http://www.fmc-modeling.org
Fig.3. Contracting and Monitoring Architecture in TEXO.
CPU and memory usage. For each SLO parameter found in active SLA files,
the Monitoring Coordinator configures and starts a System Sensor which then
continuously transmits its measured values to the MoM, which delivers these
messages to the Monitoring DB and the Aggregators for further processing, see
Sect. 4.3.
In contrast to the system monitoring where only system wide parameters are
monitored, the following two categories covers all monitoring mechanisms which
observe service specific parameters.
3.3 External Service Monitoring
External service monitoring mechanisms observe a service without the need for
platform support. Parameters like the availability of a service can be probed by
a third instance and then aggregated over a concrete period of time to get the
averageavailabilityofthisparticularservice.Sincetheseparametersareofahigh
importance to service providers, our monitoring framework possesses sensors and
aggregators to monitor these non-functional properties of services.
Another important monitoring component is the Access Gate. It encapsulates
a service by a transparent proxy which intercepts all service invocations. In a
first step, it checks the caller’s identity by an authentication mechanism. In a
second step, the Access Gate checks whether the caller is authorised to send this
request. If positive, it forwards the intercepted message to the service originally
called, awaits the answer and sends it back to the originator of the request.
The gathered usage information is sent to the MoM and will be used for billing
purposes. Besides this, the Access Gate measures the response time, calculates
the throughput of a call and sends the monitored value to the local Monitoring
DB. If the caller can not be identified or is not allowed to send the particular
request, an appropriate error message is sent to the MoM.
All of these monitoring operations are driven by SLA which include both the
objectives and the quality and therefore frequency of the monitoring probes. Due
to often overlapping objectives, the probes are optimised by combining them.
3.4 Internal Service Monitoring
Going step by step closer from System Monitoring (see Sect. 3.2) to the services,
parameters like CPU load or memory consumption are available at a more fine
grained level for execution containers, e.g. a web server or the Java Virtual
Machine, where all services share the same address space.
To gain even more knowledge about the status and behaviour of services,
several techniques are available to inspect service instances at runtime. Most of
themarebasedeitheronpriorinstrumentation,e.g.additionofmonitoringstatus
calls from within the service or opening up a shared memory structure to give
insight into data structures, or on run-time instrumentation with tracing support
from the execution environment (virtual machine, operating system). Tracing
can be used to monitor the SLA compliance of a potentially untrusted service
[20] whereas instrumentation is typically used for profiling and performance
measurement. Either technique leverages the IoS concept of combining rapidly
developed services with powerful execution platforms, leaving the measurement
and management of services with specialised providers.
3.5 Business Monitoring
Based on the various available techniques for technical monitoring, higher-level
businessobjectivesinSLAcanalsobemonitored.Providerobjectiveslikeservice
popularity or increasing numbers of value contracts can easily be aggregated
from existing sensor data. Consumer objectives like SLA compliance can likewise
be controlled by using monitoring data. Therefore, we see the need to introduce
aggregators and SLA checks on top of the already mentioned components.
4 Aggregation and SLA Status Determination
Whilethecollectionofmonitoringdataisacontinuousprocess,aparallelactivity
to find out the interesting events and correlations is needed in order to determine
the fulfilment of SLA. We present an aggregation mechanism and an algorithm
for SLA violation detection, and include methods to avoid SLA violations from
happening at all.
4.1 Aggregation
On each service execution host, we assume the presence of one monitor. Sensors
and aggregators run side-by-side as part of each monitor. While sensors collect
data from various sources, aggregators can turn such streams of data into higher-
level indicators. The uptime of a service is a good example for a non-measurable
value which can only be calculated based on a series of individual test calls.
Since we assume a decentralised architecture with a central marketplace,
another instance of the monitoring framework with special configuration runs on
the marketplace. It only contains aggregators to further refine the results and
produce cross-host metrics like the overall reliability of services available from
that marketplace. In the previously introduced example of service guarantees in
logistics, this can be seen in Fig. 4. Suppose that each incoming connection (1)
gets redirected by a proxy to the service (2), while at the same time information
about start and end times is measured (3) and broadcast across the monitoring
infrastructure (4), (5). If the guaranteed response time of 3 hours is not met in at
least 95% of all cases within a month, the aggregator sends an additional event
(6) to the SLA Monitoring, which can then check the SLA violation status and
transmit this information (7), (8) to the SMP to make it available to the user in
a monthly report (9).
Fig.4. Example of event propagation leading up to SLA violation
4.2 Determining SLA Conformance
We are currently developing a component for monitoring SLA conformance. Its
task is to validate available monitoring information against negotiated SLA.
The SLA Monitoring component receives monitoring information via the MoM.
Information on negotiated SLA is requested from the SLA Manager. When the
violation of a SLO of a SLA is detected, a SLO violation message is sent to the
MoM. From there the information is available to other components for triggering
furtheractions(e.g.informingaresponsibleperson)ordisplayingtheinformation
in the monitoring cockpit. An additional step following the monitoring could
be the analysis of the effects of SLO violations. In service compositions services
are not isolated from each other. Instead, SLO violations of one service may
lead to situations where other services cannot be provided any more. Monitoring
such effects at runtime would help to improve the provisioning of services in
compositions.
4.3 SLA Violation Prevention through Adaptation
Monitoring is not just an end in itself; rather, the collected and calculated data
serves a very special purpose: to improve the quality of the service delivery. We
distinguish between passive observation of monitoring data and active use for
service adaptation, and argue for the necessity of adaptation to avoid contract
violations.
BasedontheinformationprovidedbytheMaaS,theSLAManagercomponent
decidesifanSLAhasbeenviolatedorisatriskofbeingviolatedinthenearfuture
as predicted by a probability-based forecast function. In such cases, adaptation
can help avoiding the violation. Adaptation strategies include scaling-up by
dynamically adding computing resources such as CPUs, memory or hard disk
space, and scaling-down by reconfiguring the services or cutting down on some
aspects of the contract. Adaptation mechanisms implement the strategies on
a technical level by controlling certain targets like services or contracts. An
Adaptation Coordinator (Fig. 3) is needed to prevent the collision and mutual
neutralisation of the mechanisms. Upon completion of the chosen mechanisms,
anadaptivityreasonerconveysthisinformationintotheserviceregistrytoadjust
future contract template offers. We have based our categorisation of adaptation
mechanisms on existing works, e.g. [21], but concentrated on a clear division
between matchmaking time and runtime. The interplay between the coordinator,
the reasoner, the mechanisms and the adaptation targets is shown in Fig. 5.
Fig.5. Adaptation coordinator, reasoner, mechanisms and targets
The effectiveness of adaptation shall be shown using the recurring example of
a contract with a logistics service. In case an implied and agreed-upon tolerance
region of a reliability of 95% is reached, e.g. at 96% after 50% of the associated
time frame, the service can be reconfigured to increase the reliability at the
expense of another property, most likely cost. This applies to both a technical
sense of web service reliability and to a business sense of truck logistics reliability.
Inthegivenbusiness-levelexample,assumingthemaincauseforbelatedtransport
is traffic congestion, the mechanism in question would modify the booking of
trucks to insist on using faster, but more expensive, vehicle toll roads. Depending
on the contract tariff scheme, this trade-off between toll and contract violation
compensation can be an economic and reputation gain, as shown in Table 1.
Table 1. Cost-based adaptation trade-off
Tariff without tollTariff with toll
Cost per transport 30 EUR 32 EUR
Probability of traffic congestion 7% 3%
Compensation fee 50 EUR
Average cost 33.50 EUR 33.50 EUR
Effect on reputation lowering raising
5 Conclusion
Wehavedesignedandpartiallyimplementedatechnicalfoundationfordistributed
service contracting and monitoring. A novel aspect of linking it to the business
level was introduced. It allows consumers to rely on the advertised functionality
of business services. The resulting architecture is built around USDL service
descriptions and WS-Agreement based SLA. Through a division into user-visible
marketplaces and execution servers, it scales well enough for operation in an
Internet of Services. The pervasive use of contracts and the enforcement of
contractually guaranteed terms increases the acceptance among business users
and makes it feasible to establish the excogitated service marketplaces.
Acknowledgements
The information in this document is proprietary to the following Theseus Texo
consortium members: SAP AG and Technische Universit¨at Dresden. The infor-
mation in this document is provided ”as is”, and no guarantee or warranty is
given that the information is fit for any particular purpose. The above referenced
consortium members shall have no liability for damages of any kind including
without limitation direct, special, indirect, or consequential damages that may
result from the use of these materials subject to any liability which is mandatory
due to applicable law. Copyright 2009 by the Theseus Texo consortium.
References
1. EuropeanParliament: EUDirective2006/123/ECoftheEuropeanParliamentand
of the Council of 12 December 2006 on services in the internal market. Technical
report, European Parliament (December 2006)
2. OECD: Business and Industry Policy Forum on the Services Economy. Technical
report, Organisation for Economic Cooperation and Development (OECD) (2000)
3. Riddle, D.: Service-Led Growth. The Role of the Service Sector in World Develop-
ment. Praeger Publishers, N.Y., New York, NY, USA (1986)
4. Schroth, C., Janner, T.: Web 2.0 and SOA: Converging Concepts Enabling the
Internet of Services. IT Professional 9(3) (2007) 36–41
5. Barros, A.P., Dumas, M.: The Rise of Web Service Ecosystems. IT Professional
8(5) (2006) 31–37
6. Ameller, D., Franch, X.: Service-oriented computing: Concepts, characteristics and
directions. In: WISE ’03: Proceedings of the Fourth International Conference on
Web Information Systems Engineering, Washington, DC, USA, IEEE Computer
Society (2003) 3–12
7. Dietrich, B.: Resource planning for business services. Commun. ACM 49(7) (2006)
62–64
8. O’Sullivan, J., Edmond, D., Hofstede, A.: Formal description of non-functional
service properties. Technical report, Queensland University of Technology (2005)
9. Roman, D., Lausen, H., Keller, U., de Bruijn, J., Bussler, C., Domingue, J., Fensel,
D., Hepp, M., Kifer, M., Ko¨nig-Ries, B., Kopecky, J., Lara, R., Oren, E., Polleres,
A., Scicluna, J., Stollberg, M.: D2v1.3. Web Service Modeling Ontology (WSMO).
WSMO Working Draft (October 2006)
10. Cardoso,J.,Voigt,K.,Winkler,M.: ServiceEngineeringfortheInternetofServices.
ToappearinEnterpriseInformationSystems,LectureNotesinBusinessInformation
Processing (LNBIP) (2008)
11. OMG: Meta-Object Facility (MOF). Technical report (2008)
12. Cardoso,J.,Winkler,M.,Voigt,K.:AServiceDescriptionLanguagefortheInternet
of Services. To appear in Proceedings of ISSS 2009 - International Symposium on
Services Science (3 2009)
13. Ludwig, H., Keller, A., Dan, A., King, R.P., Franck, R.: Web Service Level
Agreement (WSLA) Language Specification. Technical report, IBM (2003)
14. Lamanna, D., Skene, J., Emmerich, W.: Specification Language for Service Level
Agreements. EU IST 34069 deliverable D (2003)
15. Andrieux,A.,Czajkowski,K.,Dan,A.,Keahey,K.,Ludwig,H.,Nakata,T.,Pruyne,
J., Rofrano, J., Tuecke, S., Xu, M.: Web Services Agreement Specification (WS-
Agreement). Technical report, Open Grid Forum (2007)
16. openArchitectureWare.org: openArchitectureWare. Project page
17. Reichert, J.: Serviceabh¨angige Qualit¨atsparameter in Dienstgu¨tevertr¨agen. Java
Spektrum (6) (2008) 29–33
18. Waeldrich, O.: WSAG4J. WSAG4J project page (2008) last visited 29.01.2009.
19. Toland, C., Meenan, C., Warnock, M., Nagy, P.: Proactively Monitoring Depart-
mental Clinical IT Systems with an Open Source Availability System. Journal of
Digital Imaging 20 (November 2007) 119–124
20. Spillner,J.: Privacy-enhancedServiceExecution. In:WestnikDUIKT-Proceedings
of the International Conference for Modern Information and Telecommunication
Technologies. (September 2008) Livadia, Krim, Ukraine.
21. Meyer,H.,Kuropka,D.,Tro¨ger,P.: ASG–TechniquesofAdaptivity. In:Proceedings
of Autonomous and Adaptive Web Systems, Dagstuhl, Germany (June 2007)