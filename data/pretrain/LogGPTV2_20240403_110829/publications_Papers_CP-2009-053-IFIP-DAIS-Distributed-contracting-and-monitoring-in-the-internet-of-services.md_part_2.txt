### Platform Browser and SLA Template

**Figure 2: Overview of SLA Generation, Negotiation, and Monitoring**

The template file is augmented with additional information. We implemented this transformation using openArchitectureWare [16]. The generated templates are then deployed to the SLA Manager, where they become available for the negotiation process, which is described in the next section. The approach of generating SLA templates from service descriptions was also described in [17]. However, it is limited to purely technical service aspects, whereas our approach, through the use of USDL, allows the specification of business-related service aspects such as the rights and duties of the involved parties and penalties.

### SLA Negotiation Infrastructure

SLA negotiation follows the approach defined by WS-Agreement. It was implemented as the SLA Manager component, shown in Figure 2, and is based on the WSAG4J framework [18]. The negotiation process is initiated by a user who intends to consume a service. The SLA Manager provides an SLA template, which is presented to the consumer via a user interface as part of the TEXO Service Management Platform. This allows consumers to make changes to the SLA template and submit it as an agreement proposal. The document is then validated by the service provider and either accepted or rejected.

The SLA Manager also provides interfaces for other components to access SLA information. For example, monitoring components can access SLA details needed to configure the monitoring process. Other SMP components, such as billing, have access to information regarding the state (fulfilled, violated, not determined) of an SLA.

### 3. Contract Monitoring

The task of contract monitoring is to collect all necessary information to ensure the execution of tradable services according to given guarantees (SLA) and to gather usage data relevant for billing. On a technical level, service and system monitoring help achieve this goal. We present a monitoring architecture that integrates the flow of contracts.

#### 3.1 Distributed Monitoring Architecture

In Section 1, we briefly introduced the TEXO architecture, consisting of one Service Management Platform (SMP) as the central marketplace and several distributed Tradable Services Runtimes (TSR) for hosting the services. Now, we will take a closer look at the contracting and monitoring architecture illustrated in Figure 3. The main building blocks at the TSR level are the Process and Service Engines, Access Gate, Adaptation Container, and TSR Monitoring. At the SMP level, the blocks are the SLA Manager, Monitoring Backend, Access Rights Management, and components for further processing. Communication between the SMP and TSR is facilitated via a message-oriented middleware (MoM).

When a new service is deployed, its USDL file is transferred to the Process and Service Engines at the TSR. Once a customer has negotiated a contract via the SLA Manager's SLA Negotiation component, the resulting SLA is stored in the SLA Repository, and the SLA Manager sends a message to the MoM indicating that a new SLA is available. Subscribers to this type of message include SLA Monitoring and the Monitoring Coordinator at TSR Monitoring. The latter then starts the appropriate Monitoring Sensors and Aggregators, as described in the following sections. In case of an SLA violation, the SLA Monitoring triggers the Adaptation Coordinator to start one of the Adaptation Mechanisms described in Section 4.3.

Since complex business processes may consist of multiple services deployed on distinct TSRs, a central Monitoring Backend at the SMP level is required to collect and merge the monitoring data from individual services into a central database. Consumers, such as Further Processing components, can access the monitoring data via Monitoring as a Service (MaaS). To ensure privacy, MaaS checks the requester’s identity and access rights at every data request.

In the following subsections, we highlight the challenges of various Monitoring Sensor types. We distinguish between monitoring on the system and execution container level (Section 3.2) and individual service monitoring. Some service properties can be monitored externally (Section 3.3), while others require explicit support within the execution container (Section 3.4). Finally, the sensor data is converted to business objects (Section 3.5) and linked to contract objectives.

#### 3.2 System Monitoring

IT system monitoring is a well-established activity, ranging from single desktop computers to large data centers. Typically, the overall health status of distributed hardware and software is determined by measurements using agents, such as SNMP or Nagios [19], and controlled from a central monitoring location. In scenarios of contract-bound service execution, determining the status and available resources of the execution servers is essential for creating realistic SLA offers.

In our approach, system monitoring controls the overall system health by tracking typical system parameters, such as system load, network performance, CPU, and memory usage. For each SLO parameter found in active SLA files, the Monitoring Coordinator configures and starts a System Sensor, which continuously transmits its measured values to the MoM. The MoM then delivers these messages to the Monitoring DB and the Aggregators for further processing, as described in Section 4.3.

In contrast to system monitoring, which only monitors system-wide parameters, the following two categories cover all monitoring mechanisms that observe service-specific parameters.

#### 3.3 External Service Monitoring

External service monitoring mechanisms observe a service without the need for platform support. Parameters like the availability of a service can be probed by a third party and aggregated over a specific period to determine the average availability. Since these parameters are of high importance to service providers, our monitoring framework includes sensors and aggregators to monitor these non-functional properties of services.

Another important monitoring component is the Access Gate. It encapsulates a service with a transparent proxy that intercepts all service invocations. First, it checks the caller’s identity using an authentication mechanism. Second, the Access Gate checks whether the caller is authorized to send the request. If so, it forwards the intercepted message to the originally called service, awaits the response, and sends it back to the originator of the request. The gathered usage information is sent to the MoM and used for billing purposes. Additionally, the Access Gate measures the response time, calculates the throughput of a call, and sends the monitored value to the local Monitoring DB. If the caller cannot be identified or is not allowed to send the request, an appropriate error message is sent to the MoM.

All these monitoring operations are driven by SLAs, which include both the objectives and the quality and frequency of the monitoring probes. Due to often overlapping objectives, the probes are optimized by combining them.

#### 3.4 Internal Service Monitoring

Moving closer from System Monitoring (Section 3.2) to the services, parameters like CPU load or memory consumption are available at a more granular level for execution containers, such as a web server or the Java Virtual Machine, where all services share the same address space.

To gain more knowledge about the status and behavior of services, several techniques are available to inspect service instances at runtime. Most of these techniques are based on either prior instrumentation, such as adding monitoring status calls within the service or opening up a shared memory structure, or on run-time instrumentation with tracing support from the execution environment (virtual machine, operating system). Tracing can be used to monitor the SLA compliance of a potentially untrusted service [20], while instrumentation is typically used for profiling and performance measurement. Either technique leverages the IoS concept of combining rapidly developed services with powerful execution platforms, leaving the measurement and management of services to specialized providers.

#### 3.5 Business Monitoring

Based on the various available techniques for technical monitoring, higher-level business objectives in SLAs can also be monitored. Provider objectives, such as service popularity or increasing numbers of value contracts, can be easily aggregated from existing sensor data. Consumer objectives, such as SLA compliance, can likewise be controlled using monitoring data. Therefore, we see the need to introduce aggregators and SLA checks on top of the already mentioned components.

### 4. Aggregation and SLA Status Determination

While the collection of monitoring data is a continuous process, a parallel activity is needed to identify interesting events and correlations to determine the fulfillment of SLAs. We present an aggregation mechanism and an algorithm for SLA violation detection, and include methods to prevent SLA violations from occurring.

#### 4.1 Aggregation

On each service execution host, we assume the presence of one monitor. Sensors and aggregators run side-by-side as part of each monitor. While sensors collect data from various sources, aggregators can turn such streams of data into higher-level indicators. For example, the uptime of a service is a non-measurable value that can only be calculated based on a series of individual test calls.

Given a decentralized architecture with a central marketplace, another instance of the monitoring framework with a special configuration runs on the marketplace. It only contains aggregators to further refine the results and produce cross-host metrics, such as the overall reliability of services available from that marketplace. In the previously introduced example of service guarantees in logistics, this can be seen in Figure 4. Suppose that each incoming connection (1) gets redirected by a proxy to the service (2), while at the same time information about start and end times is measured (3) and broadcast across the monitoring infrastructure (4), (5). If the guaranteed response time of 3 hours is not met in at least 95% of all cases within a month, the aggregator sends an additional event (6) to the SLA Monitoring, which can then check the SLA violation status and transmit this information (7), (8) to the SMP to make it available to the user in a monthly report (9).

#### 4.2 Determining SLA Conformance

We are currently developing a component for monitoring SLA conformance. Its task is to validate available monitoring information against negotiated SLAs. The SLA Monitoring component receives monitoring information via the MoM. Information on negotiated SLAs is requested from the SLA Manager. When a violation of a Service Level Objective (SLO) of an SLA is detected, a SLO violation message is sent to the MoM. From there, the information is available to other components for triggering further actions (e.g., informing a responsible person) or displaying the information in the monitoring cockpit. An additional step following the monitoring could be the analysis of the effects of SLO violations. In service compositions, services are not isolated from each other. Instead, SLO violations of one service may lead to situations where other services cannot be provided anymore. Monitoring such effects at runtime would help improve the provisioning of services in compositions.

#### 4.3 SLA Violation Prevention through Adaptation

Monitoring is not just an end in itself; rather, the collected and calculated data serves a very special purpose: to improve the quality of service delivery. We distinguish between passive observation of monitoring data and active use for service adaptation, and argue for the necessity of adaptation to avoid contract violations.

Based on the information provided by MaaS, the SLA Manager component decides if an SLA has been violated or is at risk of being violated in the near future, as predicted by a probability-based forecast function. In such cases, adaptation can help avoid the violation. Adaptation strategies include scaling-up by dynamically adding computing resources such as CPUs, memory, or hard disk space, and scaling-down by reconfiguring the services or cutting down on some aspects of the contract. Adaptation mechanisms implement these strategies on a technical level by controlling certain targets like services or contracts. An Adaptation Coordinator (Figure 3) is needed to prevent the collision and mutual neutralization of the mechanisms. Upon completion of the chosen mechanisms, an adaptivity reasoner conveys this information into the service registry to adjust future contract template offers. We have based our categorization of adaptation mechanisms on existing works, e.g., [21], but concentrated on a clear division between matchmaking time and runtime. The interplay between the coordinator, the reasoner, the mechanisms, and the adaptation targets is shown in Figure 5.

The effectiveness of adaptation can be demonstrated using the recurring example of a contract with a logistics service. If an implied and agreed-upon tolerance region of a reliability of 95% is reached, e.g., at 96% after 50% of the associated timeframe, the service can be reconfigured to increase the reliability at the expense of another property, most likely cost. This applies to both a technical sense of web service reliability and a business sense of truck logistics reliability. In the given business-level example, assuming the main cause for delayed transport is traffic congestion, the mechanism in question would modify the booking of trucks to insist on using faster, but more expensive, vehicle toll roads. Depending on the contract tariff scheme, this trade-off between toll and contract violation compensation can be an economic and reputation gain, as shown in Table 1.

**Table 1: Cost-based Adaptation Trade-off**

| Tariff without Toll | Tariff with Toll |
|--------------------|------------------|
| Cost per Transport  | 30 EUR           | 32 EUR          |
| Probability of Traffic Congestion | 7%               | 3%              |
| Compensation Fee    | 50 EUR           | 50 EUR          |
| Average Cost        | 33.50 EUR        | 33.50 EUR       |
| Effect on Reputation | Lowering         | Raising         |

### 5. Conclusion

We have designed and partially implemented a technical foundation for distributed service contracting and monitoring. A novel aspect of linking it to the business level was introduced. This allows consumers to rely on the advertised functionality of business services. The resulting architecture is built around USDL service descriptions and WS-Agreement-based SLAs. Through a division into user-visible marketplaces and execution servers, it scales well enough for operation in an Internet of Services. The pervasive use of contracts and the enforcement of contractually guaranteed terms increase acceptance among business users and make it feasible to establish the envisioned service marketplaces.

### Acknowledgements

The information in this document is proprietary to the following Theseus Texo consortium members: SAP AG and Technische Universität Dresden. The information in this document is provided "as is," and no guarantee or warranty is given that the information is fit for any particular purpose. The above-referenced consortium members shall have no liability for damages of any kind, including without limitation direct, special, indirect, or consequential damages that may result from the use of these materials, subject to any liability which is mandatory due to applicable law. Copyright 2009 by the Theseus Texo consortium.

### References

1. European Parliament: EU Directive 2006/123/EC of the European Parliament and of the Council of 12 December 2006 on services in the internal market. Technical report, European Parliament (December 2006)
2. OECD: Business and Industry Policy Forum on the Services Economy. Technical report, Organisation for Economic Cooperation and Development (OECD) (2000)
3. Riddle, D.: Service-Led Growth. The Role of the Service Sector in World Development. Praeger Publishers, N.Y., New York, NY, USA (1986)
4. Schroth, C., Janner, T.: Web 2.0 and SOA: Converging Concepts Enabling the Internet of Services. IT Professional 9(3) (2007) 36–41
5. Barros, A.P., Dumas, M.: The Rise of Web Service Ecosystems. IT Professional 8(5) (2006) 31–37
6. Ameller, D., Franch, X.: Service-oriented computing: Concepts, characteristics, and directions. In: WISE ’03: Proceedings of the Fourth International Conference on Web Information Systems Engineering, Washington, DC, USA, IEEE Computer Society (2003) 3–12
7. Dietrich, B.: Resource planning for business services. Commun. ACM 49(7) (2006) 62–64
8. O’Sullivan, J., Edmond, D., Hofstede, A.: Formal description of non-functional service properties. Technical report, Queensland University of Technology (2005)
9. Roman, D., Lausen, H., Keller, U., de Bruijn, J., Bussler, C., Domingue, J., Fensel, D., Hepp, M., Kifer, M., König-Ries, B., Kopecky, J., Lara, R., Oren, E., Polleres, A., Scicluna, J., Stollberg, M.: D2v1.3. Web Service Modeling Ontology (WSMO). WSMO Working Draft (October 2006)
10. Cardoso, J., Voigt, K., Winkler, M.: Service Engineering for the Internet of Services. To appear in Enterprise Information Systems, Lecture Notes in Business Information Processing (LNBIP) (2008)
11. OMG: Meta-Object Facility (MOF). Technical report (2008)
12. Cardoso, J., Winkler, M., Voigt, K.: A Service Description Language for the Internet of Services. To appear in Proceedings of ISSS 2009 - International Symposium on Services Science (March 2009)
13. Ludwig, H., Keller, A., Dan, A., King, R.P., Franck, R.: Web Service Level Agreement (WSLA) Language Specification. Technical report, IBM (2003)
14. Lamanna, D., Skene, J., Emmerich, W.: Specification Language for Service Level Agreements. EU IST 34069 deliverable D (2003)
15. Andrieux, A., Czajkowski, K., Dan, A., Keahey, K., Ludwig, H., Nakata, T., Pruyne, J., Rofrano, J., Tuecke, S., Xu, M.: Web Services Agreement Specification (WS-Agreement). Technical report, Open Grid Forum (2007)
16. openArchitectureWare.org: openArchitectureWare. Project page
17. Reichert, J.: Serviceabhängige Qualitätsparameter in Dienstgüteverträgen. Java Spektrum (6) (2008) 29–33
18. Waeldrich, O.: WSAG4J. WSAG4J project page (2008) last visited 29.01.2009.
19. Toland, C., Meenan, C., Warnock, M., Nagy, P.: Proactively Monitoring Departmental Clinical IT Systems with an Open Source Availability System. Journal of Digital Imaging 20 (November 2007) 119–124
20. Spillner, J.: Privacy-enhanced Service Execution. In: Westnik DUIKT-Proceedings of the International Conference for Modern Information and Telecommunication Technologies. (September 2008) Livadia, Krim, Ukraine.
21. Meyer, H., Kuropka, D., Tröger, P.: ASG–Techniques of Adaptivity. In: Proceedings of Autonomous and Adaptive Web Systems, Dagstuhl, Germany (June 2007)