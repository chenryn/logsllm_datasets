3%
27%
random memory access pattern, fewer accesses can be served from
the already decrypted contents in the XMM0 register, which re-
sulted in a higher overhead of 650%. These results clearly motivate
the need for protecting only a subset of the data.
6.2 Applications
The test cases of benchmark suites typically used for performance
evaluation, such as SPEC2006 [2], do not involve data that is clearly
sensitive. Moreover, our microbenchmark experiments show that
the cost of encrypting all data in a process using AES is prohibi-
tively high. To assess the overhead of our approach under realistic
conditions, we evaluate our implementation using five real-world
applications and libraries. We opted for a diverse set of both server
(MbedTLS, Lighttpd, Memcached) and client (ssh-agent, Minisign)
applications that handle critical user data, such as secret keys and
passwords. The size and complexity of these applications is ad-
equate for our current static analysis capabilities, and is on par
with what other alternative selective data protection solutions can
support (e.g., DataShield [27]).
6.2.1 MbedTLS Server. Our first application is the ssl_server2
server that comes with MbedTLS [7], an SSL/TLS library written in
C. We built a minimal version of the MbedTLS library, including
only the RSA and AES ciphersuites. Our modified LLVM toolchain
does not support inline assembly yet, so we disabled the use of
inline assembly in the MbedTLS configuration options.
The private key of the SSL server is stored in an object of type
mbedtls_pk_context, which we annotate as sensitive. This is the
only manual step involved—our LLVM-LTO toolchain then auto-
matically generates a merged IR object file, which comprises both
the SSL server and the MbedTLS library, and performs value flow
and pointer analysis to find and instrument all memory operations
that access sensitive data. In Table 1, we report both the number of
memory-related instructions that are instrumented in the code, and
the number of instrumented memory accesses executed at runtime.
Across all memory accesses, only 31%, for the naive field-insensitive
approach, and 11%, for the field-sensitive approach involved sensi-
tive memory objects, and thus had to be instrumented.
We deployed the instrumented server and the unmodified ssl_
client2 program on the server and client machines, respectively.
The client makes 500,000 consecutive requests to the server, with
each request fetching the same 200 byte HTML page. Table 2 shows
the performance overhead incurred by the instrumentation. When
the field-insensitive analysis is used, the instrumentation reduces
the throughput by 28%. Although the performance overhead is
higher than one would want in practice, the main culprit is the im-
precision of the field-insensitive pointer analysis algorithm, which
over-approximates the sensitive data domain that is protected.
When switching to the field-sensitive implementation, the over-
head is limited to only 13%, regaining the performance that was
lost due to field insensitivity. As a comparison data point, Carr and
Payer [27] reported a 35.7% overhead for a similar experiment of
applying DataShield on ssl_server2.
6.2.2 Lighttpd with ModAuth. Lighttpd is a popular, lightweight
web server. Lighttpd’s ModAuth module supports HTTP Basic Ac-
cess Authentication, a method for an HTTP user agent to provide a
username and password while making a request, which are stored
in a preconfigured file on the server. The password is loaded from
this file to the variable password_buf. We annotated this variable
as sensitive and compiled the server using our framework. Using
the hardened binary, we performed 2,000 requests to a password-
protected 1 KB web page. In case of the field-insensitive approach,
the throughput degrades by 22%, and for the field-sensitive ap-
proach, the throughput is reduced by 8%.
6.2.3 Memcached: Authentication using SASL. Memcached is a pop-
ular in-memory key-value store, used to improve web server per-
formance by caching the results of expensive database queries.
Memcached provides an authentication mechanism that can be
used to deploy it in untrusted networks, which relies on the SASL
(Simple Authentication and Security Layer) library.
For simple password-based authentication, the function sasl
_server_userdb_checkpass loads the password from the speci-
fied password file and stores it in the buffer variable, which we
annotate as sensitive. We use the hardened binary to perform 1M
“set” and “get” operations, which store and retrieve keys in the
Memcached server, respectively. Because the authentication step
is performed once at the time of connection establishment, each
operation is performed over a new connection and is preceded by
an authentication step. Our results show that for both approaches,
the throughput overhead of our instrumentation is negligible. This
is because there is only one pointer to the stored password, and the
password is not copied to any other memory location. Moreover,
this pointer is not part of any complex C struct, and thus both
the field-insensitive and field-sensitive approaches give the same
results. Also, the code that checks for password validity accesses
the password sequentially, maximizing the use of the AES cache.
ssh-agent. The ssh-agent daemon holds a user’s decrypted
6.2.4
private keys in memory to speed up the creation of new SSH ses-
sions, by avoiding having to type the key’s passphrase. Applications
such as ssh, scp, and git, which require access to the user’s de-
crypted private keys, communicate with ssh-agent over a Unix
domain socket to carry out the SSH authentication process.
To reduce dependencies on external libraries, we built ssh-agent
with support only for the internal crypto engine. When a user adds
a new private key, ssh-agent dynamically allocates an sshkey ob-
ject on the heap. We annotate the pointer returned by this allocation
Table 2: Performance evaluation results. Overhead numbers
correspond to throughput for the first three servers, and
user time for the last two programs.
Application
Run-time
(original)
Run-time
Overhead
Field Field Field Field
Sen.
Sen.
Ins.
Ins.
MbedTLS SSL server
(500,000 requests)
Lighttpd with ModAuth
(2,000 requests)
Memcached with Auth.
(1M Get/Set req.)
ssh-agent
(2,000 user sessions)
Minisign
(1GB file signing)
110s
152s
126s
28%
13%
37s
67s
47s
67s
40s
67s
450s
485s
469s
22%
0%
8%
8%
0%
4%
41s
69s
54s
68%
33%
as sensitive. This ensures that all private keys in dynamically allo-
cated sshkey objects always remain encrypted in memory. Based
on our IR-level static analysis results, 17% (field-insensitive) and 8%
(field-sensitive) of all memory operations required instrumentation,
while 8% and 3% of all memory operations performed at runtime
were instrumented, respectively.
Using the same setup, we deployed the instrumented ssh-agent
daemon on the client machine and set it up with the user’s private
keys. Public key authentication to the server machine was precon-
figured. The experiment consists of the client making 2K logins to
the server. We measured the total time taken for the 2K logins, and
report an overhead of 8% (field-ins.) and 4% (field-sen.).
6.2.5 Minisign: File Signing using Libsodium. Libsodium [8] is a
popular library for core cryptographic routines. We chose Min-
isign [32], a client-only tool for signing files and verifying signa-
tures, as a representative application that uses Libsodium. The
private key used for file signing is stored in an object of type
SeckeyStruct. We annotated the SeckeyStruct pointer in minisign.c
as sensitive. Using the hardened binary, we performed two oper-
ations. We first signed a 1GB file using a pre-generated private
key, and then verified the signature against the file. Our results of
measuring the completion time show that for signing the runtime
overhead is 68% (field-ins.) and 33% (field-sen.), while for verifica-
tion the overhead is 57% (field-ins.) and 35% (field-sen.).
It is important to note that although the verification process does
not use the sensitive private key, it still suffers from some perfor-
mance overhead due to the imprecision of our sensitive data domain
construction, in both approaches. This imprecision causes the argu-
ments to the crypt_hash_sha512, crypt_hash_sha512_update,
and crypt_hash_sha512_final functions, which compute the
hash of the file contents, to be marked as sensitive. As these func-
tions are shared by both signing and verification operations, both
operations exhibit a performance overhead.
6.2.6 Results Summary. Our results are summarized in Tables 1
and 2. We observe that for all five applications, only a fraction of
all memory accesses had to be instrumented, and as expected, this
fraction is lower for the field-sensitive approach. The time taken
for the pointer analysis and the value flow analysis (not shown
in the table) for the five applications ranges from 20 seconds (for
Memcached) to 3 minutes 45 seconds (for Lighttpd).
The performance overhead observed in all five applications
varies significantly. The variance is clearly tied to the nature of
these applications. For instance, in the MbedTLS server case, the
bulk of instrumentation involves only the SSL handshake phase.
Data transfer incurs little overhead, and network I/O incurs no
overhead. In the ssh-agent case, the instrumentation affects only
the fetching of the decrypted private key. The rest of the SSH login
and network I/O proceeds unchanged. In the Lighttpd case, the
instrumentation affects each access, but the sensitive password
buffer is accessed sequentially, leading to amortization of the data
transformation cost over multiple accesses to the password buffer.
On the other extreme, every iteration of the core loop in Minisign
that computes the signature of the file is instrumented. Since all
operations are local, there is no expensive network I/O, and so the
overhead is significantly higher.
Although a direct comparison is not possible due to the differ-
ent hardware experimental setups, we report significantly lower
overhead than solutions based on memory safety. For example,
DataShield [27] performs a coarse-grained bounds check on all
memory accesses, with a more fine-grained bounds check for point-
ers potentially accessing sensitive data, whereas our solution re-
quires instrumenting only the required sensitive pointers. DataShield
reports a higher performance overhead of 35% for the same MbedTLS
server application, compared to 13% for our approach. We could
not successfully compile the other applications in our test suite
with DataShield. Similarly, SoftBound [64], which applies full mem-
ory safety, incurs a 116% overhead for the SPEC benchmarks [2].
Moreover, as described in Section 6.3, our solution provides pro-
tection against cold boot attacks, as well as side-channel attacks
such as Spectre [44], because the sensitive data is present in mem-
ory only in an encrypted form, unlike in the case of approaches
based on memory safety, which only protect pointers. Additionally,
the performance overhead of our approach is comparable to the
reported overhead of official mitigations for some Spectre attack
variants [49].
6.3 Security Evaluation
As a sanity check, we verified that sensitive data is never present un-
encrypted in main memory. To that end, we used a custom program
to repeatedly scan the memory of the running process every two
seconds. The program uses the gcore tool to attach to the process
and dump its memory contents. At the end of the experiment, we
scan these memory dumps for the first and last four bytes of the
protected data. We verified that for all five applications the sensitive
data was not present in an unencrypted form in memory.
Defending against Spectre Attacks. We use a publicly available proof-
of-concept to illustrate the effectiveness of our system against Spec-
tre attacks. Figure 3 shows a simplified snippet of the vulnerable
code used. The attack begins by passing a chosen value x, so that
array1[x] point to a victim address that the attacker chooses to
disclose—in this case, the variable named secret. The vulnerability
causes array1[x] to be loaded, and used to compute the offset into
1
2
3
4
5
6
7
SENSITIVE char * secret = " The ␣ Secret ";
void victimFunction () {
...
if (x < array1_size )
y = array2 [ array1 [x] * 4096];
...
}
Figure 3: Simplified example of code vulnerable to the Spec-
tre attack used for our evaluation.
array2, even if the branch condition fails, that is, if x is greater
than array1_size. This results in the contents of secret to be
loaded into the cache, from where they can be leaked through side
channel attacks.
To protect the contents of secret, we annotate it as SENSITIVE.
At runtime, its contents are stored only in its encrypted form in
memory, and thus also in the hardware caches. As expected, we
verified that leaking the contents of the cache via the Spectre attack
only returns the encrypted values of the secret variable.