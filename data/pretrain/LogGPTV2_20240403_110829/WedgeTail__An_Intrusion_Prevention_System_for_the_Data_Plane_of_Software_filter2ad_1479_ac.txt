### Optimized Text

#### Trajectory Selection and Security
The trajectories are chosen randomly within the control plane, ensuring that an attacker cannot predict or influence this process. Subsequently, the actual trajectories for the selected packets are retrieved using the mechanisms discussed in ยง5.1.

#### Packet Dropping Detection
WedgeTail detects packet dropping as follows:
- If \( A \not\subseteq E \) and \( \text{card}(A) > T_d \), then a packet delay attack is detected.
- The estimated time can be set to the average time for all packets traversing the route or computed by sending simple ping packets.
- The maximum valid congestion can be computed using [36] or [40], which allows for real-time congestion detection and measurement.

#### Malicious Localization
A trajectory is considered a totally ordered set. When a malicious action is detected, the associated forwarding device can be located by comparing the expected (E) and actual (A) trajectories. For example, consider Figure 1 and assume we are inspecting \( FD(a) \):

- **Actual Trajectory (A)**: \( FD(a) \rightarrow FD(b) \rightarrow FD(f) \rightarrow FD(e) \) equivalent to the total ordered set \( E = \{FD(b), FD(f)\} \).
- **Expected Trajectory (E)**: \( FD(a) \rightarrow FD(b) \rightarrow FD(c) \rightarrow FD(d) \rightarrow FD(e) \) equivalent to the total ordered set \( A = \{FD(b), FD(c), FD(d)\} \).

By intersecting \( E \) and \( A \), we identify \( \{FD(b)\} \) as the malicious node where the misrouting was initiated. The analysis continues with \( FD(c) \) and \( FD(d) \) (or \( A - E \)) to identify any other potentially malicious forwarding devices. This approach can be used for detecting malicious actions 1, 3, and 4.

To locate a forwarding device that is delaying packets, we retrace the time hop-by-hop in \( A \) and compare it with the relevant expected times.

#### Practical Considerations
Network congestion can result in packet drops and delays. To minimize false positives, WedgeTail must accurately estimate the number of packet drops and delays due to congestion. Several solutions have been proposed in the literature, such as [32], which detects packet dropping or gray hole attacks by exploiting the correlation between packet delays and losses due to congestion. The main advantage of our solution over [32] is that it can be implemented without additional overhead or support from the network, as [32] assumes cooperation from routers providing real-time data on queue lengths at their interfaces.

#### Response Engine
WedgeTail can be programmed to automatically respond to identified threats using its response engine. The response engine takes a set of XML-formatted policies and translates them into actions for the controller. Each policy includes six main features: Subject, Object, Actions, Condition, Exception, and Validity time. Table 1 lists the attributes currently supported for these features.

**Policy Syntax Example:**
- **Subject**: Forwarding Device(id) | Controller
- **Object**: Packet(id) | Flow(id) | Switch(id)
- **Action**: Isolate(FD(id)) | Update forwarding table(FD(id)) | Alarm | Block Messages(FD(id)) | Test Again(FD(id))
- **Exception Policy**: \( P_i \)
- **Validity**: \( t \) (milliseconds)

For instance, if only \( FD(f) \) is detected as malicious, an administrator-defined policy might specify two different policies:
1. Instruct \( FD(g) \) to use an alternative route.
2. Instruct the Controller to block all incoming OpenFlow messages.

If \( FD(b) \) is also identified as malicious, an exception feature can state that no action is executed if a policy for \( FD(f) \) is still active.

#### Implementation
WedgeTail is designed to be integrated as an application for SDN controllers for both detection and response. To demonstrate compatibility with different platforms and ease implementation, the detection engine is implemented as a proxy between the control and data plane. The response engine is programmed as an application for the Floodlight controller. The current architecture is shown in Figure 4.

**Implementation Details:**
- Implemented in Java with approximately 1500 lines of code.
- Creates scanning regions by generating a unique hash from a large number of packets.
- Tracks packets as they traverse the network by intercepting PACKET IN messages.
- Generates database records listing all visited forwarding devices, packet information, and timestamps.
- Composes these records to generate actual packet trajectories using the Actual Trajectory Extractor module.

Once scanning zones are generated and target forwarding devices are identified, WedgeTail queries the controller for the current topology and launches a Mininet matching the same setup. It intercepts all OpenFlow messages, including FLOW MOD and PACKET IN, and stores the rules and forwarding device information in a MySQL database. The DB to Mininet Translator component retrieves and translates these records into appropriate Mininet commands, creating a virtual network replica.

#### Evaluation
We evaluated WedgeTail over simulated networks with varying numbers of forwarding devices, forwarding rules, network subnets, and trajectories. We replicated attacks against SDN networks and analyzed WedgeTail's accuracy in detecting these attacks. We also introduced congestion to measure false alarms and compared WedgeTail's performance with related works.

**Experimental Setup:**
- **AARNet Setup**: 12 forwarding devices, 390 forwarding rules, 400 trajectories.
- **Zib54 Setup**: 54 forwarding devices, 21,387 forwarding rules, 38,654 trajectories.
- **Sprint Setup**: 316 forwarding devices, 15,649,486 forwarding rules, 638,271 trajectories.

**Network Topologies:**
- Extracted from The Internet Topology Zoo [23], SNDlib [34], and Rocketfuel [39].

**Flow Entries:**
- Created an interface for a subset of prefixes from a full BGP table and spread them randomly and uniformly to each router.
- Computed forwarding tables using shortest path routing.

**Traffic Generation:**
- Used Mausezahn [1] and a custom script to add benign traffic.
- Hosted the simulated networks on a machine with Intel Core i5, 2.66 GHz quad-core CPU, and 16 GB RAM.
- Hosted the SDN controller equipped with WedgeTail on a machine with Intel Core i7, 2.66 GHz quad-core CPU, and 8 GB RAM.

**Attack Scenarios:**
- Replicated attacks presented by the authors of [11] against networks using ODL, Floodlight, POX, and Maestro as controllers.
- Implemented further attacks, including Network-to-Host DoS attack.
- All attacks were successfully detected by WedgeTail.

**Example Attack:**
- **Network DoS**: Compromised forwarding devices direct traffic into a loop, magnifying a flow until it fills the available link bandwidth. All four controllers were vulnerable to this attack.

This optimized text provides a clear, coherent, and professional overview of the system, its components, and its evaluation.