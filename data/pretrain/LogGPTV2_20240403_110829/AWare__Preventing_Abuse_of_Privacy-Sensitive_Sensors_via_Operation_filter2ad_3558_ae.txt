### Store Among the Most Downloaded Apps

The experiment, which took 13 hours and 28 minutes to complete, resulted in AWare passing 126,681 out of 126,686 executed tests. Two of the failed tests were minor compatibility issues due to programmatic access attempts to the platform’s camera and microphone. The first failure was caused by HappyShutter, an app that automatically takes pictures when the user smiles. The second failure was due to SnapClap, an app that automatically takes snapshots when the user claps.

By default, AWare blocks apps from programmatically accessing privacy-sensitive sensors by intercepting API calls and verifying if the user has initiated the operation. This provides a high level of protection. As described in Appendix A, less than 1% of the 1,000 analyzed apps require such access. We enhanced the original AWare prototype to notify the user the first time an app attempts programmatic access. The notification asks for explicit authorization to grant the app persistent access to the privacy-sensitive sensor, informing the user of the inherent high risk and discouraging such permission. In our field-based study (Table 2), only 1 out of 24 users granted persistent access to the front camera for HappyShutter, and only 2 other users granted persistent access to the microphone for SnapClap.

The other two failures were due to remote access attempts to the smartphone’s camera by Lockwatch and Prey Anti-Theft, which can capture pictures with the front camera when someone tries to unlock the smartphone with a wrong passcode. As anticipated in Appendix A, we suggested extending AWare's mechanisms to cover remote app components. To validate this, we developed a proof-of-concept app that receives remote commands for video recording via the back camera. We successfully tested it on a Nexus 5X running Android OS with AWare.

Additionally, AWare caused a false positive with the Viber app, which attempted access to the cameras and microphone at each system reboot. AWare identified the access without user input and blocked the operation after displaying an on-screen alert and logging the attempt. Upon analysis, we found that Viber was testing the sensors at each reboot. However, blocking these tests did not affect subsequent video or voice calls. Therefore, we believe blocking such attempts is desirable to prevent stealthy operations targeting privacy-sensitive sensors.

### Performance Measurements

We measured the overall system performance overhead introduced by AWare using a macrobenchmark that exercises the same 1,000 apps selected from the Google Play store via the Android UI/Application Exerciser Monkey. Although software exercisers achieve low code coverage, they can create events targeting specific high-level operations and generate the same sequence of events for comparison among testing platforms. The Monkey was configured to exercise apps by generating the exact same sequence of events and targeting all operations on privacy-sensitive sensors on both the Nexus 5X and Nexus 5 smartphones, running both stock Android OS and the modified version with AWare enabled. The exerciser script for the macrobenchmark is open-sourced on GitHub.

The experimental results (Table 3) show that the average recorded system-wide performance overhead is 0.33% when measuring the additional time required by AWare to handle operation binding construction, authorization, and caching.

We also performed a microbenchmark to measure the overhead introduced by AWare while handling access requests for operations targeting privacy-sensitive sensors, such as the camera, microphone, and screen. The overhead for these operations was calculated by measuring the time interval from the detection of a user input action to the granting/denying of the corresponding app request. For widgets and display contexts, the overhead was calculated by measuring the time interval from the app providing the user interface to the Window Manager to the rendering of the interface on the screen by AWare. Table 3 reports the average time and standard deviation over 10,000 operation/rendering requests and the recorded overhead introduced by AWare.

Our measurements show that AWare performs efficiently, with the highest overhead observed being below 4%. The experiment artificially stressed each operation with unusual workloads, and the overhead for a single operation/rendering is on the order of microseconds, making it likely unnoticeable to users. Additionally, we recorded the average cache size used by AWare to store authorized operation bindings and activity window call graphs, which was around 3 megabytes. Overall, we did not observe a discernible performance drop compared to the stock Android OS.

### Related Work

**Security-Enhanced Android [49] and Android Security Framework [5]** deploy restrictive security models based on the Android Permission mechanism. These models operate at the kernel level and do not have the necessary information regarding higher-level events to associate app requests with user input actions for privacy-sensitive sensors.

**Input-Driven Access Control (IDAC) [33]** mediates access to privacy-sensitive sensors based on the temporal proximity of user interactions and applications’ access requests. However, if another application’s request occurs first after a user input event within the given temporal threshold, the user input is directly used to authorize the other application’s request, regardless of the operation.

**What You See is What They Get [23]** proposes the concept of a sensor-access widget integrated into the user interface. This widget provides a real-time representation of the personal data being collected by a particular sensor, allowing the user to pay attention to the application’s attempt to collect the data. The widget implements a Show Widget and Allow After Input and Delay (SWAAID) policy, where any active user input, upon notification, is implicitly considered as an indication that the user is paying attention. After a waiting period, the application is directly authorized to access the sensor. However, the delay may cause issues for time-constrained applications and may frustrate users.

**User-Driven Access Control (UDAC) [39, 41]** uses access control gadgets to prevent malicious operations from applications trying to access privacy-sensitive sensors without a user-initiated input. However, these gadgets define start points for when permissions are granted but do not provide an end limit for the sensor’s use or control points to the users.

**Trusted Output Solutions** provide the user with an on-screen security indicator to convey the application developer’s identity. Such solutions aid in identifying trusted sources but do not provide the actual application identity or information about when and how the application uses privacy-sensitive sensors.

**Object Recognizer for Augmented Reality (AR) Applications [22]** is a new operating system abstraction. A trusted object recognizer takes raw sensor data as input and exposes higher-level objects, such as a face skeleton, to applications. A fine-grained permission system is used to request permission at the granularity of recognizer objects. However, this approach applies only to AR applications, which are a very small fraction of available apps. Among the 1,000 applications used for our evaluation, fewer than 1% provided AR features.

### Conclusion

To prevent abuse of privacy-sensitive sensors by untrusted applications, we propose that user authorizations for operations on such sensors must be explicitly bound to user input events and their acquisition methods, called operation bindings. We designed an access control mechanism that constructs operation bindings authentically and gains user approval for the application to perform operations only under their authorized bindings. By reusing such authorizations, the number of explicit user authorizations can be reduced substantially. We implemented the AWare framework for Android, an extension of the Android Middleware that controls access to privacy-sensitive sensors.

We evaluated the effectiveness of AWare in eliminating ambiguity through a laboratory-based user study, finding that users avoided mistakenly authorizing unwanted operations 93% of the time on average, compared to 19% with proposed research methods and 9% with first-use or install-time authorizations. We further studied the compatibility of AWare with 1,000 of the most-downloaded Android applications and demonstrated that these applications can operate effectively under AWare while incurring less than 4% performance overhead on microbenchmarks. Thus, AWare offers users an effective additional layer of defense against untrusted applications with potentially malicious purposes, while keeping the explicit authorization overhead very modest in ordinary cases.

### Acknowledgements

Thanks to our shepherd Matt Fredrikson and the anonymous reviewers. This research was sponsored by the Army Research Laboratory under Cooperative Agreement Number W911NF-13-2-0045 (ARL Cyber Security CRA). The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of the Army Research Laboratory or the U.S. Government. The U.S. Government is authorized to reproduce and distribute reprints for Government purposes notwithstanding any copyright notation hereon. The research activities of Jens Grossklags are supported by the German Institute for Trust and Safety on the Internet (DIVSI).

### References

[References listed here as per the original text]

---

This optimized version aims to improve clarity, coherence, and professionalism while maintaining the essential details and structure of the original text.