        uint32_t r0, r1, r2, r3, f0, f1, c2,c3;
        /* Input Whitenening */
        r0 = tf_twofish->k[4]^pack(cypher);
        r1 = tf_twofish->k[5]^pack(cypher+4);
        r2 = tf_twofish->k[6]^pack(cypher+8);
        r3 = tf_twofish->k[7]^pack(cypher+12);
        /* The black box */
        for (int i=15; i >= 0;--i)
        {
            Twofish_f(tf_twofish, i, r0, r1, &f0, &f1);
            c2 = (rol(r2,1)^f0);
            c3 = ror((f1^r3),1);
            /* swap */
            r2 = r0;
            r3 = r1;
            r0 = c2;
            r1 = c3;
        }
        /* Output Whitening */
        c2 = r0;
        c3 = r1;
        r0 = tf_twofish->k[0]^r2;
        r1 = tf_twofish->k[1]^r3;
        r2 = tf_twofish->k[2]^c2;
        r3 = tf_twofish->k[3]^c3;
        for (int i=0;i
    #include 
    #include "twofish.h"
    #include "tables.h"
    #define xor(g,r)    (g^r)                   /* Xor operation */
    #define ror(g,n)    ((g>>n)|(g>(32-n)))    /* Rotate left   */
    #define nxt(g,r)    (*(g+r))                /* Get next byte */
    #define LITTILE_ENDIAN
    #ifdef  LITTILE_ENDIAN
    #define unpack(g,r) ((g>>(r*8))&0xff)                               /* Extracts a byte from a word.  */
    #define pack(g)     ((*(g))|(*(g+1)k,r*8),a,0x14d)^gf(nxt(tf_key->k,r*8+1),b,0x14d)^\
            gf(nxt(tf_key->k,r*8+2),c,0x14d)^gf(nxt(tf_key->k,r*8+3),d,0x14d)^\
            gf(nxt(tf_key->k,r*8+4),e,0x14d)^gf(nxt(tf_key->k,r*8+5),f,0x14d)^\
            gf(nxt(tf_key->k,r*8+6),g,0x14d)^gf(nxt(tf_key->k,r*8+7),h,0x14d)
    #define u(x,a)\
            x[0] = unpack(a,0); \
            x[1] = unpack(a,1); \
            x[2] = unpack(a,2); \
            x[3] = unpack(a,3);
    #define release(a,b,c)  { free(a); free(b);free(c); }
    #ifdef  TWOFISH
    typedef struct key_t 
    {
        uint8_t len;
        uint8_t *k;
    }key_t;
    typedef struct subkey_t 
    {
        uint8_t len;
        uint8_t s[4][4];
        uint8_t me[4][4];
        uint8_t mo[4][4];
    }subkey_t;
    #endif