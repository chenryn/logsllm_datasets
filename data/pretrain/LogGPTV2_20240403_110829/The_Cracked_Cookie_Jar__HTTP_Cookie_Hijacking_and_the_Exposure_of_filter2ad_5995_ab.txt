e
b
a
r
e
n
u
V
l
l
106
105
104
103
102
101
0
G
Y
B
Bin
o
o
a
h
aid
gle
o
o
u
g
a
m
b
a
r
g
a
y
al
m
z
o
n
et*
Y
u
a
Ti
rt*
m
uffin
a
r
dia
*
s
n
*
e
gto
S
N
o
u
ble
o
utu
clic
k
b
e
n
*
A
E
T
W
N
G
H
M
D
Y
Fig. 2. Number of exposed accounts per service. Services marked with “*”
have an explicit userID cookie (or ﬁeld) that allows us to differentiate users.
changed over the course of the monitoring period or the
user may use multiple devices (e.g., laptop and smartphone).
However, some services employ user-identiﬁer cookies, which
we leverage for differentiating users even if the other cookie
values have changed. Furthermore, we cannot correlate the
same user across services as we do not collect source IP
addresses or other identifying information; thus, we refer to
vulnerable accounts. Nonetheless, we consider this to be a
small trade-off for preserving users’ privacy, and consider our
approximation accurate enough to highlight the extent of users
being exposed when browsing popular services.
Findings. Table I presents the aggregated numbers from the
data collected during our study. During our monitoring, we
observed more that 29 million requests towards the services
that we have found to be vulnerable. This resulted in 282,459
accounts exposing the HTTP cookies required for carrying
out the cookie hijacking attacks and gaining access to both
their private information and account functionality. Figure 2
breaks the numbers down per service. Search engines tend to
expose many logged in users, with 67,201 Google users being
exposed during our experiment. Every category of services
that we looked at has at least one very popular service that
exposes over ten thousand users during the monitoring period.
Ad networks also pose a signiﬁcant risk, as they do not require
users to login and ads are shown across a vast number of
different websites, which results in Doubleclick exposing more
than 124K users to privacy leakage.
III. REAL-WORLD PRIVACY LEAKAGE
In this section, we present our study on the ramiﬁcations
of HTTP cookie hijacking attacks in real websites. We audit
the top Alexa websites from a varied collection of categories
using test accounts (or our personal when necessary), and
ﬁnd that HTTP cookie hijacking attacks affect the majority
of popular websites we tested. Table II presents an overview
of the services and our results. We provide details on the
private information and account functionality we are able to
access with stolen cookies for certain websites, and describe
other classes of attacks that become feasible. Due to space
constraints, certain services are described in Appendix A.
727727
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:26 UTC from IEEE Xplore.  Restrictions apply. 
OVERVIEW OF THE AUDITED WEBSITES AND SERVICES, THE FEASIBILITY OF COOKIE HIJACKING ATTACKS, AND THE TYPE OF USER INFORMATION AND
TABLE II
ACCOUNT FUNCTIONALITY THEY EXPOSE.
HTTPS
Adoption
Cookie
Hijacking
XSS Cookie
Hijacking
Information and Account Functionality Exposed






































partial













ﬁrst and last name, username, email address, proﬁle picture, home and work address, search optimization,
click history of websites returned in search results
username, email address, proﬁle picture, entire search history, address of any saved location
ﬁrst name, proﬁle photo, view/edit search history (incl. images and videos), links clicked from search results,
frequent search terms, saved locations, information in interest manager, edit interest manager
username, full name, email address, view/edit search history, view/edit/post answers and questions in Yahoo
Answers (anonymous or eponymous), view/edit ﬁnance portfolio, view subject and sender of latest incoming
emails, extract contact list and send email as user
view and change (through pollution attacks) recommended videos and channels
view user credentials (username, email address or mobile number), view/edit proﬁle picture, view recom-
mended items, view user wish lists, view recently browsed items, view recently bought items, view/edit
items in cart, view shipping name and city, view current balance, view user’s review (even anonymous),
send email of products or wishlist on behalf of user, obtain email addresses of previously emailed contacts
delivery name and address, view/edit items in cart, view/edit purchase history, view items for sale, view
previous bids, view user’s messages, view/edit watch list and wish lists
ﬁrst and last name, email address, proﬁle picture
ﬁrst name, email address, view/edit items in cart, view delivery postcode, write product review
ﬁrst name, email address, view/edit items in cart, recently viewed items, view and modify wish list, send
email about products or wish list
view/edit proﬁle (full name, postal address, email address, phone number, proﬁle picture) view/edit linked
Facebook account, write/delete article comments, recently viewed content on iReport
username, email address, view/edit basic proﬁle (display name, location, personal website, bio, proﬁle
picture) username, email address, view/edit list of saved articles, share article via email on behalf of user
proﬁle can be viewed and edited (login name, proﬁle photo, email address, biography, postal code, location,
subscriptions, fans, comments and followings). change account password, delete account
username, view public section of proﬁle (proﬁle picture, bio, interests), user’s comments, replies, tags and
categories of viewed articles, post comments on articles as user
ads show content targeted to user’s proﬁle characteristics or recently viewed content
-
-
-
-
-
N/A
N/A
N/A
N/A
N/A
N/A
Service
Google
Baidu
Bing
Yahoo
Youtube
Amazon
Ebay
MSN
Walmart
Target
CNN
partial
partial
partial
partial
partial
partial
partial
partial
partial
partial
partial
New York Times
partial
Hufﬁngton Post
partial
The Guardian
Doubleclick
Skype
LinkedIn
Craigslist
Chase Bank
Bank of America
Facebook
Twitter
Google+
Live (Hotmail)
Gmail
Paypal
partial
partial
partial*
partial*
partial*
partial*
partial*
full
full
full
full
full
full
*While these services do not have ubiquitous HTTPS, no personalization is offered over HTTP pages.
Threat persistence. Invalidating session cookies when a
user logs out is standard practice. High-value services do so
even after a short time of user inactivity. We examined whether
the services also invalidate the HTTP cookies required for our
hijacking attacks. We found that even if the user explicitly logs
out after the attacker has stolen the cookies, almost all cookies
still retain access privileges and can carry out the attack.
Thus, attackers can maintain access to the victim’s personal
information and account functionality until the cookies’ set
expiration date which can be after several months (Google
cookies expire after 2 years). Ebay was the only service out
of the vulnerable that invalidates the cookies after logging
out. Those cookies do not instruct the browser to expire upon
exiting, indicating that Ebay manages the cookies’ validity on
the server side. Below we also discuss the unusual behavior
of Youtube for users that are not logged in.
A. Google
Typically, the adversary can steal the victim’s HTTP cookie
for Google by observing a connection to any page hosted on
google.com for which encryption is not enforced.
Cookie hijacking. Google automatically redirects users
connecting over HTTP to google.com to HTTPS, to protect
their searches from eavesdropping. However, upon the initial
request, before being redirected and enforcing encrypted com-
munication, the browser will send the HTTP cookies. Further-
more, the user can also use the address bar for visiting Google
services; e.g., the user can type “www.google.com/maps”
to visit Google Maps. Under these usage scenarios the browser
will again expose the user’s HTTP cookies, and if an adversary
is monitoring the trafﬁc, she can hijack them. Redirecting in-
stead of enforcing HTTPS is most likely a conscious decision
for supporting legacy clients that do not run HTTPS (outdated
User Agents are not redirected).
Browser behavior. The adversary must observe an un-
ecrypted connection to google.com, which may not occur
under all scenarios. However, a very typical scenario is for
the victim to use the browser’s address bar. Consequently, to
understand the conditions under which the requirements will
hold, we explore how popular browsers handle user input in
the address bar, when trying to visit google.com. As shown
728728
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:26 UTC from IEEE Xplore.  Restrictions apply. 
BROWSER BEHAVIOR FOR USER INPUT IN ADDRESS BAR.
TABLE III
Browser
Desktop
Chrome (v. 45)
Firefox (v. 41)
Safari (v. 8.0)
Internet Explorer (v. 11)
Opera (v. 32)
Mobile
Connect over HTTP





Safari (iOS 9)
Chrome (v.46, Android 5.1.1)
 (conditionally)
*user input: {google.com, www.google.com}

//(*.)google.com, iff using SSL, must use an acceptable
{ "name": "google.com", "include_subdomains": true,
certificate.
"pins": "google" },
//Now we force HTTPS for subtrees of google.com.
{ "name": "mail.google.com", "include_subdomains": true,
"mode": "force-https", "pins": "google" },
Listing 1. Subset of rules in Chrome’s HSTS-preload ﬁle.
in Table III, for straightforward user input, popular browsers
will connect to google.com over HTTP. Due to the auto-
complete feature of certain browsers (e.g., Firefox), even if the
victim only types “google”, the auto-complete mechanism
will add “.com”, and the browser will again connect over
HTTP. Therefore, under common browsing patterns, the exist-
ing design will expose a user’s cookie when visiting the main
search engine. Interestingly, while the default iOS browser
(Safari) exhibits the same behavior, Chrome on Android will
connect to Google over HTTPS to securely prefetch page
resources. However, if users turn this option off to improve
performance2, Android Chrome will also connect over HTTP.
HSTS preloading. As described in Section II, major
browsers employ pre-loading lists for HSTS. As can be seen
in Listing 1, the preloaded HSTS policy for Chrome does
not actually force the browser to connect to google.com
over HTTPS. It does however employ certiﬁcate pinning; it
requires an acceptable certiﬁcate if the browser is already
connecting over HTTPS. This is applied to all local country-
based variations of Google’s search engine, and the main page
itself. On the other hand, critical Google subdomains support
HSTS preloading and are explicitly forced to connect over
HTTPS. As a result, users that visit the Google search engine
through the address bar, will most likely connect over an
unencrypted channel, and their cookies will be exposed.
Information leakage.
the adversary simply visits
google.com using the stolen cookie, no sensitive informa-
tion will be accessible as the browser is redirected to HTTPS.
However, if the adversary “forces” the browser to visit Google
over HTTP, sensitive information can be accessed. During our
auditing we have identiﬁed the following.
If
2https://support.google.com/chrome/answer/1385029
729729
Personal information. Due to the cookie, Google considers
the victim logged-in, resulting in personal information being
leaked. As can be seen in Figure 3(a), we gain access to the
user’s name and surname, Gmail address, and proﬁle picture.