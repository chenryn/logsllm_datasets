when each ciphersuite is deployed in a hybrid mode with ECDHE.
Ultimately, the size and speed of our protocol shows that we need not rely exclusively on ideal
lattices to construct practical lattice-based key exchange: LWE-based key exchange is indeed a
5
viable candidate for a practical quantum-resistant scheme.
2 Related Work
Regev [59] introduced the LWE problem accompanied by a (quantum) reduction to certain worst-
case lattice problems and demonstrated how to build a public-key encryption scheme based on the
hardness of this problem. Peikert [53] gave the ﬁrst classical reduction from LWE to standard lattice
problems, however this reduction required moduli that were exponential in the size of the lattice
dimension. Subsequently, Brakerski et al. [16] then showed that for moduli that are polynomial in
the size of the lattice dimension, standard, worst-case problems in lattices are classically reducible
to the LWE problem. Constructions based on LWE have led to a large variety of public-key cryp-
tosystems [39, 53, 33, 18, 3, 2, 17]. Its ring analogue, R-LWE [46], yields more eﬃcient constructions
of public-key cryptosystems [54].
Based on the key encapsulation mechanism described by Peikert [54], Bos et al. [14] presented
a Diﬃe-Hellman-like key exchange protocol whose security is based on the R-LWE problem. They
demonstrated the feasibility of the protocol by integrating their implementation into the TLS proto-
col in OpenSSL, reporting a slight performance penalty over classically secure key exchange (using
elliptic curves). Soon after, Alkim et al. [6] presented a range of improvements over the implemen-
tation in [14]. In particular, the in-depth security analysis performed in [6] paved the way for a
superior set of parameters to those used in [14]: Alkim et al. showed that higher security could be
achieved with a smaller modulus and a new, more eﬃciently samplable noise distribution. Moreover,
their improved error reconciliation and more aggressive implementation culminated in R-LWE key
exchange software that was more than an order of magnitude faster than the software presented by
Bos et al..
Previously, Ding et al. [29] had proposed an alternative instantiation of lattice-based key ex-
change that builds on Regev’s public-key cryptosystem [59], giving a Diﬃe-Hellman-like protocol
from both LWE and R-LWE. The deduced shared key in their scheme is not uniform random, and
they subsequently suggest to use an extractor; however, this reduces the eﬀective length of the key.
Our protocol is based on similar ideas to the LWE protocol in [29], but as in the R-LWE schemes
in [14] and [6], we incorporate (and extend) Peikert’s reconciliation technique [54] and further mod-
ify the protocol to conserve bandwidth. Moreover, the analysis in [29] was performed for single-bit
key exchange, and [29] did not include a concrete proposal for quantum-secure key exchange or an
implementation of the scheme.
3 Key Exchange from LWE
Notation. If χ is a probability distribution over a set S, then x $← χ denotes sampling x ∈ S
If S is a set, then U(S) denotes the uniform distribution on S, and we denote
according to χ.
sampling x uniformly at random from S either with x $← U(S) or sometimes x $← S. Matrices are
denoted by bold face capital letters. If χ is a distribution over a set S, then X $← χ(Sn×m) denotes
generating an n × m matrix X by sampling each of its entries independently from S according to
χ. If A is a probabilistic algorithm, y $← A(x) denotes running A on input x with randomly chosen
coins and assigning the output to y.
The LWE problem is characterized by three parameters: the modulus q, the dimension of the
matrix n, and the error distribution χ. Given an integer modulus q, denote by Zq the ring of
integers modulo q. The distribution χ is typically taken to be a rounded continuous or discrete
6
Alice
$← U ({0, 1}s)
seedA
A ← Gen(seedA)
S, E $← χ(Zn×n
)
B ← AS + E
q
K ← rec(B(cid:48)S, C)
seedA, B
∈ {0, 1}s × Zn×n
q
B(cid:48), C
∈ Zm×n
q
× Zm×n
2
Bob
q
A ← Gen(seedA)
S(cid:48), E(cid:48) $← χ(Zm×n
)
B(cid:48) ← S(cid:48)A + E(cid:48)
E(cid:48)(cid:48) $← χ(Zm×n
)
V ← S(cid:48)B + E(cid:48)(cid:48)
C ← (cid:104)V(cid:105)2B
q
K ← (cid:98)V(cid:101)2B
Figure I: The LWE-based key exchange protocol with LWE parameters (n, q, χ), and protocol speciﬁc
parameters n, m, B ∈ Z. The matrix A ∈ Zn×n
is generated from seedA via a pseudo-random
function Gen.
q
Gaussian distribution over Z with center zero and standard deviation σ. However, as we discuss
in detail in §3.3, alternative choices are possible and have advantages over such distributions. The
concrete choice of the LWE parameters q, n, σ determines the security level of the protocol, and
their selection is described in §4.
3.1 The new key exchange protocol
In this section we describe an unauthenticated key exchange protocol based on the LWE problem.
The protocol is shown in Figure I and the Transport Layer Security (TLS) protocol is sketched in
Figure II.
The ServerKeyExchange, ClientKeyExchange and the two computekeys operations are highlighted
in Figure II, in order to show where the corresponding operations in Figure I take place during the
TLS handshake. The output of the computekeys operation is the premaster secret pms, which is
equal to the shared key K from Figure I. It is used to derive the master secret ms as described in
the TLS speciﬁcation [27], §8.1.
In the key exchange protocol in Figure I, both Alice and Bob generate the same large matrix
A ∈ Zn×n
that is combined with the LWE secrets to compute their public keys as instances of the
LWE problem. Alice’s n LWE instances and Bob’s m LWE instances are combined to compute a
secret matrix in Zm×n
, where B uniform bits are extracted from each entry to form the session
key K. Thus, the dimensions n and m should be chosen such that K has (at least) the number
of required bits for the target security level. For example, in targeting 128 bits of post-quantum
security, it should be the case that n· m· B ≥ 256. This condition ensures that we obtain a uniform
256-bit secret for the session key and even an exhaustive key search via Grover’s quantum algorithm
would take 2128 operations. The protocol in Figure I allows for the ratio between n and m to be
changed, in order to trade-oﬀ between Bob’s amount of uploaded data for Alice’s computational
load. This could be useful in mobile devices, where energy eﬃciency of uploads is at most half that
q
q
7
Client
ClientHello
Certiﬁcate*
ClientKeyExchange
CertiﬁcateVerify*
[ChangeCipherSpec]
compute keys
Finished
Server
ServerHello
Certiﬁcate
ServerKeyExchange
Certiﬁcate Request*
ServerHelloDone
[ChangeCipherSpec]
compute keys
Finished
application data
Asterisks (*) indicate optional messages, single lines (→) denote unencrypted communication, double lines
(⇒) denote encrypted and authenticated communication, rectangles highlight messages or procedures that
need to be added or require modiﬁcation for an LWE ciphersuite.
Figure II: Message ﬂow in the TLS protocol.
of downstream traﬃc [63, 37].
Hybrid ciphersuites. As lattice-based cryptography is undergoing a period of intense development
and scrutiny, a conservative approach towards deployment of lattice-based key exchange is to pair
it with legacy schemes such as elliptic curve Diﬃe-Hellman (ECDH). Since the message ﬂow of our
proposed solution is identical to the existing ECDH(E) key exchange protocol, the two can be run
concurrently as part of the same “hybrid” ciphersuite, with both outputs mixed in into the premaster
secret via a KDF (as was done in [14]); see §7 for performance results.
3.2 A generalized reconciliation mechanism
In the protocol in Figure I, Alice and Bob compute the secret matrices V ∈ Zm×n
and B(cid:48)S ∈ Zm×n
,
respectively. Each of the mn entries in V is approximately equal in Zq to the corresponding entry
in B(cid:48)S. To modify such an approximate key agreement into an exact key agreement, Bob sends
C = (cid:104)V(cid:105)2B to Alice which allows both parties to reconcile the same shared key K. In this section
we describe the reconciliation mechanism that allows such exact agreement to be achieved, i.e., we
q
q
8
(cid:98)·(cid:101)2B : v (cid:55)→(cid:106)
(cid:104)·(cid:105)2B : v (cid:55)→(cid:106)
(cid:109)
(cid:107)
2− ¯Bv
mod 2B,
2− ¯B+1v
mod 2,
detail the function (cid:104)·(cid:105)2B used in line 6 of Bob’s ﬂow, and the functions (cid:98)·(cid:101)2B and rec used when Alice
and Bob compute their respective shared keys. Our reconciliation mechanism is a generalized version
of Peikert’s mechanism [54] that, for every approximate agreement in Zq, allows the extraction of
more (exact) shared bits. This increased extraction comes at the cost of an increased probability of
failed reconciliation, but we argue that the resulting probability is still small enough for practical
application. Previous works that used Peikert’s mechanism (e.g., [14, 6]) have not needed to extract
more than one bit per approximate agreement in Zq, since the number of such agreements far
exceeded the number of shared bits required to form a secure session key. As we discussed in §3.1,
we need m · n · B ≥ 256 for our desired level of quantum security, so a larger B (the number of bits
extracted per approximate agreement) means we can achieve smaller m and n, which in turn means
sending smaller LWE matrices.
We focus on the case when the modulus q is a power of 2; this can be generalized to an arbitrary
modulus using techniques described in [54]. Let the number B of bits that we are aiming to extract
from one coeﬃcient in Zq be such that B < (log2 q) − 1. Let ¯B = (log2 q) − B. For any v ∈ Zq,
represented as a unique integer in [0, q), we deﬁne the following functions. The rounding function
(cid:98)·(cid:101)2B is deﬁned as
i.e., (cid:98)v(cid:101)2B ∈ [0, 2B). Note that (cid:98)·(cid:101)2B outputs the B most signiﬁcant bits of (v + 2 ¯B−1) mod q. This
means that (cid:98)·(cid:101)2B partitions Zq into 2B intervals of integers with the same B most signiﬁcant bits,
up to a cyclic shift of the values that centers these intervals around 0. The cross-rounding function
(cid:104)·(cid:105)2B is deﬁned as
which divides Zq into two subsets according to their (B + 1)-th most signiﬁcant bit, splitting up
each interval above into two equally sized subintervals. Replacing (cid:98)·(cid:101)2B by (cid:98)·(cid:99)2B would amount to
simply taking the B most signiﬁcant bits of v. However, using (cid:98)·(cid:101)2B ensures that the size of the
error introduced by rounding is unbiased with respect to the sets induced by the cross-rounding
function.
We are now in a position to deﬁne the reconciliation function, rec, following [54]. On input
of w ∈ Zq and b ∈ {0, 1}, rec(w, b) outputs (cid:98)v(cid:101)2B, where v is the closest element to w such that
(cid:104)v(cid:105)2B = b. The two claims below are the generalizations of the claims in [54], the proofs of which
are analogous. They demonstrate that releasing (cid:104)v(cid:105)2B does not reveal any information about (cid:98)v(cid:101)2B,
but it can serve as a hint for the two parties that are trying to agree on B bits, based on suﬃciently
close numbers w and v. Claim 3.2 means that, if corresponding elements of B(cid:48)S and V are within
2 ¯B−2 of one another, the key agreement in Fig. I is exact.
Claim 3.1. If v ∈ Zq is uniformly random, then (cid:98)v(cid:101)2B is uniformly random given (cid:104)v(cid:105)2B.
Claim 3.2. If |v − w| < 2 ¯B−2, then rec(w,(cid:104)v(cid:105)2B ) = (cid:98)v(cid:101)2B.
Round-and-truncate. We observe that the lower-order bits of B and B(cid:48) exchanged by the parties
have vanishingly small inﬂuence on the negotiated key. To conserve bandwidth, a version of the
protocol could be used in which entries of B and B(cid:48) are rounded to multiples of 2C, and the lower C
bits, which are now zeros, are truncated and never transmitted. Since B and B(cid:48) are now transmitted
with lower accuracy, this introduces another source of error in the reconciliation process. Although
our implementation does not currently exploit this option, we note that if it were to be used,
Bob should sample uniform noise and add it back to the lower order bits. This is to ensure that
truncation does not aﬀect the proof of security.
9
dist. bits var.
(ς 2)
1.25
1.00
1.75
1
1.75 19304 14700 6490 1659 245 21
Probability of
±1 ±2 ±3 ±4 ±5 ±6 order
25.0
61
20
1
990 248
40.0
100.0
919 406 104 15
500.0
0
88
1570
1206
D1
D2
D3
D4
req.
8
12
12
16
Rényi
diverg.
1.0021674
1.0001925
1.0003011
1.0000146
3
24
1
Table 1: The discrete PDFs (and the number of bits required to obtain one sample from them)
for the four noise distributions used in this work, which are approximations to rounded continuous