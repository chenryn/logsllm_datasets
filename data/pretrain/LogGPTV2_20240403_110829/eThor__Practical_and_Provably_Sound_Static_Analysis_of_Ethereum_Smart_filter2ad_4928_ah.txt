for Galois connections, this result can be lifted to least fixed points.
As a consequence for proving Theorem 3.1, it is sufficient to show
that Equation (5) and Equation (6) hold.
∆
B.2 Analysis Definition (continued)
We overview additional details of the analysis definition introduced
in § 3.
First, we formally define the orders on the abstract argument
domains for the predicates defined in Figure 4.
:= {( ˆa, ˆb) | ˆb = ⊤ ∨ ˆa = ˆb}
≤ ˆD
≤N := {(m, n) | m = n}
≤B := {(a, b) | a = b}
≤N→ ˆD
:= {(f , д) | ∀n ∈ N. f (n) ≤ ˆD д(n)}
≤N×(N→ ˆD) := {((m, f ),(n, д)) | m = n ∧ ∀i  0 and S′ = U ′′ ++ S
We introduce the notion of a call state for characterizing those
states that invoke internal transactions.
Definition B.6 (Call states). A regular execution state s is a call
state if Γ ⊨ s :: S → s′ :: s :: S for some Γ, S and s′.
Intuitively, an execution state is a call state if it satisfies all
preconditions for a transaction initiating instruction.
In a regular execution all elements of a callstack but its top
element are call states.
Lemma B.7. Let Γ ⊨ s :: S →∗ s′ :: S′ ++ S, then every execution state
s′′ ∈ S′ is a call state.
20
Whenever some configuration is reachable, the execution before
stepped through the call states on the callstacks. This property is
formally captured by the following lemma:
Lemma B.8. Let Γ ⊨ S →n (S1 ++ S2) ++ S. Then there exists some
m ∈ N such that Γ ⊨ S →m S2 ++ S and Γ ⊨ S2 ++ S →n−m
(S1 ++ S2) ++ S.
As previously discussed, we assume execution states to be anno-
tated with the contracts that they are currently executing. These
annotations need to be consistent with the current execution state
in the sense that they correspond to the active account of the ex-
ecution state and that they present a valid contract in the global
state.
Definition B.9 (Annotation consistency). An execution state s is
consistent with contract annotation c if the following two condi-
tions hold
(1) isRegular(s) =⇒ s.ι.actor = c.addr
(2) isRegular(s) ∨ isHalt(s) =⇒ s.σ(c.addr).code = c.code
where isRegular(·) and isHalt(·) are predicates on execution states
indicating whether they are regular execution states or halting
states, respectively.
The consistency of annotations is preserved over execution.
Lemma B.10 (Preservation of annotation consistency). Let
s be consistent with c and Γ ⊨ sc :: S →∗ S′ ++ S for some Γ, S, and S′.
Then for all s′
c′ ∈ S′ it holds that s′ is consistent with c′.
In order to prove soundness, we will need to require a stronger
form of consistency for the execution states of c∗ that allows to
relate the contract code to the currently executed code.
Definition B.11 (Strong annotation consistency). An execution
state s is strongly consistent with contract annotation c if it is
consistent with c and additionally
isRegular(s) =⇒ s.ι.code = c.code
Contract annotations reflect the active contract that is executed.
The active account of an execution state cannot be changed during
execution. Formally, this is stated by the following lemma:
Lemma B.12
S1 ++ sc1 :: S →∗ S2 ++ s′
(Annotation persistence). Let
c2 :: S. Then it holds that c1 = c2.
Γ
⊨
In order to formally state soundness, as well as some preliminary
lemmas, we need to put a minor restriction on the executions that
we are considering. This is as in the case of contract creations,
it is theoretically possible (with negligible probability) that (due
to a hash collision in the Kec(·, ·) function) a contract with the
same address as the contract c∗ under analysis is created. In this
case the contract’s storage as well as code will be overwritten.
If such an over-write would occur in the execution of c∗ (after
giving up the control flow due the call or by performing a CREATE
instruction itself), this would mean that any following execution of
c∗ would resume in the altered storage, and (even more severely)
following a new contract code. Consequently there is no way of
faithfully abstracting the execution of c∗ once the control flow was
handed over. In practice, however, the occurrence of such a hash
collision can be neglected due to its low probability. Formally, we
eThor: Practical and Provably Sound Static Analysis
of Ethereum Smart Contracts
give a soundness guarantee only for those executions that do not
encompass a problematic hash collision. To this end, we formally
characterize such collision-free executions:
Definition B.13 (Collision-free execution). A (n-step) execution
Γ ⊨ S →n S is collision-free for contract c∗ (written (cid:123)nc∗
) if for all
m ≤ n and all callstacks S′′ such that Γ ⊨ S →m S′′ it holds that
∀sc ∈ S
′′
. c.addr (cid:44) c
∗
.addr ∨ c = c
∗
This definition ensures that during the execution, the address
of contract c∗ can never be attached to a different code. Given
that execution states of contract creation are annotated with (ρ,⊥)
(where ρ is the address of the contract in creation), this definition
in particular rules out that the creation code of a contract with
address c∗.addr is executed.
While the occurrences of such a colliding contract creation needs
to be excluded on executions (since it could be performed by arbi-
trary contracts), exclusion of DELEGATECALL and CALLCODE
extractions only applies to the executions of c∗ and can there-
fore be syntactically enforced on c∗’s contract code. We establish
the invariant that we obtain from excluding DELEGATECALL and
CALLCODE from c∗’s contract code:
Lemma B.14 (Annotation agreement for c∗). Let c∗ be a con-
tract such that {DELEGATECALL, CALLCODE} ∩ c∗.code = ∅. Let
further Γ ⊨ sc∗ :: S →∗ S′ ++ S be a collision free execution for c∗ and
s be strongly consistent with c∗. Then for all (regular) execution states
s′
c′ ∈ S′ it holds that
(1) If c∗.addr = s′.ι.actor then c∗.code = s′.ι.code
(2) If c′ (cid:44) c∗ then s′.ι.actor (cid:44) c∗.addr
So, in a nutshell, for contracts not containing CALLCODE and
DELEGATECALL, strong consistency is preserved and additionally,
the contract code is persistent (cannot change over the execution).
For arguing about the call abstraction, we show the following
substantial lemma that allows us to trace back the storage of a
(contract) account to the (result of a) prior execution of this contract.
Lemma B.15 (Storage evolution). Let Γ, S, S′, s, s′, and c′ (cid:44) c∗
be such that s is strongly consistent with c∗ and
′ ++ S
Γ ⊨ sc∗ :: S →n s
c′ :: S
′
′
.σ(c
∗
.addr).stor = s
is a collision-free execution for c∗. Then one of the following holds:
(1) s′ = EXC
′ (cid:44) EXC ∧
(2) s
∃s
′
∗
c∗ ∈ S
s
′ (cid:44) EXC ∧
(3) s
∃ S
∗
∗ ++ S
∧ Γ ⊨ sc∗ :: S →m HALT(σ , gas, d, η) :: S
∗ ++ S →n−m s
′
∧ Γ ⊨ HALT(σ , gas, d, η) :: S
∗
.addr).stor
.addr).stor = σ(c
∧ s
σ gas d η m. |S
.addr).stor
∗| > 0
′ ++ S
.σ(c
.σ(c
c′ :: S
∗
∗
′
∗
This lemma allows to relate the storage of contract c∗ to prior
executions of c∗ itself. More precisely, the storage of c∗ (given that
c∗ does not contain CALLCODE or DELEGATECALL instructions)
either needs to be as it was at the point of the last call originating
from c∗ or the result of some finished prior execution of c∗.
21
We sketch the proof of this crucial lemma, arguing about the
most interesting cases:
Accepted for ACM CCS, 2020
Proof. (sketch) We proceed by complete induction on the num-
ber n ∈ N of small-steps.
c′ = sc∗ and S′ = ϵ.
• Case n = 0. In this case it holds that s′
Hence the assumption that c′ (cid:44) c∗ is trivially violated.
S′′ and Γ ⊨ S′′ →
• Case n > 0. In this case Γ ⊨ sc∗ :: S →n−1
c′ :: S′ ++ S for some S′′. We proceed by case analysis on the
s′
small-step rule being applied in the last step.
ADD (non exception case). Then S′′ = (µ, ι, σ , η)c′ :: S′ ++ S for
some µ, ι, σ, and η and s′ = (µ′, ι, σ , η) for some µ′. By
inductive hypothesis for n − 1 it follows that one out of
options 1 to 3 holds for (µ, ι, σ , η). As the global state σ
stays unaffected, this consequently also holds for(µ′, ι, σ , η)
hence closing the case. This reasoning applies to all local
rules that are not changing the contracts global storage (so
except for SSTORE).
SSTORE (non exception case). Then S′′ = (µ, ι, σ , η)c′ :: S′ ++ S for
some µ, ι, σ, and η and s′ = (µ′, ι, σ ′, η) for some µ′, σ ′.
Since SSTORE only modifies the storage of the active ac-
count, we can conclude that for all addresses a such that
a (cid:44) ι.actor it holds that σ(a) = σ ′(a). Since by Lemma B.14
it holds that ι.actor (cid:44) c∗.addr, it particularly follows that
σ(c∗.addr) = σ ′(c∗.addr). Hence the claim follows immedi-
ately from the application of the inductive hypothesis for
n − 1.
CALL (All preconditions satisfied, called account exists). Then
S′′ = s′′
c′′ :: S′′′ for some regular
execution state s′′, contract c′′ and callstack S′′. We do a
case distinction on c′′:
c′′ ∈ S′ and
the call itself does not affect the contract’s storage, so
s′.σ(c∗.addr).stor = s′′.σ(c∗.addr).stor.
c′′ (cid:44) c∗ In this case the inductive hypothesis is applicable for
n − 1. Given again that the call itself does not af-
fect storage, so s′.σ(c∗.addr).stor = s′′.σ(c∗.addr).stor,
the claim straightforwardly propagates to the case
of n steps. Note that similar reasoning also ap-
plies to the cases of STATICCALL, CALLCODE, and
DELEGATECALL.
Halt (return from regular halting after CALL) Then S′′ =
HALT(σ , gas, d, η)(cid:219)c :: s′′
c′ :: S′ ++ S for some σ, gas, d, η, s′′,
and c′′. Additionally, it holds that s′.σ = σ. We do a case
distinction on (cid:219)c: