objectsid : S-1-5-21-1987370270-658905905-1781884369-1000
samaccountname : DC1$
localpolicyflags : 0
codepage : 0
samaccounttype : MACHINE_ACCOUNT
whenchanged : 10/13/2022 6:37:06 PM
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 711
Made in Morocco
Penetration Testing with Kali Linux
accountexpires : NEVER
countrycode : 0
operatingsystem : Windows Server 2022 Standard
instancetype : 4
msdfsr-computerreferencebl : CN=DC1,CN=Topology,CN=Domain System Volume,CN=DFSR-
GlobalSettings,CN=System,DC=corp,DC=com
objectguid : 8db9e06d-068f-41bc-945d-221622bca952
operatingsystemversion : 10.0 (20348)
lastlogoff : 12/31/1600 4:00:00 PM
objectcategory : CN=Computer,CN=Schema,CN=Configuration,DC=corp,DC=com
dscorepropagationdata : {9/2/2022 11:10:48 PM, 1/1/1601 12:00:01 AM}
serviceprincipalname : {TERMSRV/DC1, TERMSRV/DC1.corp.com, Dfsr-12F9A27C-
BF97-4787-9364-D31B6C55EB04/DC1.corp.com,
ldap/DC1.corp.com/ForestDnsZones.corp.com...}
usncreated : 12293
lastlogon : 10/18/2022 3:37:56 AM y
badpwdcount : 0
cn : DC1
useraccountcontrol : SERVER_TRUST_ACCOUNT, TRkUSTED_FOR_DELEGATION
whencreated : 9/2/2022 11:10:48 PM
primarygroupid : 516
s
iscriticalsystemobject : True
msds-supportedencryptiontypes : 28
usnchanged : 178663 o
ridsetreferences : CN=RID Set,CN=DC1,OU=Domain Controllers,DC=corp,DC=com
dnshostname : DC1.corp.com
Listing 753 - Parntial domain computer overview
There are many interesting attributes, but for now we’ll search for the operating system and
hostnames. Let’s pipe the output intoi select and clean up our list.
z
PS C:\Tools> Get-NetComputer | select operatingsystem,dnshostname
D
operatingsystem dnshostname
--------------- -----------
Windows Server 2022 Standard DC1.corp.com
Windows Server 2022 Standard web04.corp.com
Windows Server 2022 Standard FILES04.corp.com
Windows 11 Pro client74.corp.com
Windows 11 Pro client75.corp.com
Windows 10 Pro CLIENT76.corp.com
Listing 754 - Displaying OS and hostname
The output reveals a total of six computers in this domain, three of which are servers, including
one DC.
It’s a good idea to grab this information early in the assessment to determine the relative age of
the systems and to locate potentially weak targets. According to the information we’ve gathered
so far, the machine with the oldest OS appears to be running Windows 10. Additionally, it appears
we are dealing with a web server and a file server that will require our attention at some point as
well.
So far in our enumeration we have obtained a nice list of all objects in the domain as well as their
attributes. In the next section, we will continue using this information to determine the
relationships between the various objects in search of potential attack vectors.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 712
Made in Morocco
Penetration Testing with Kali Linux
21.3.2 Getting an Overview - Permissions and Logged on Users
Now that we have a clear list of computers, users, and groups in the domain, we will continue our
enumeration and focus on the relationships between as many objects as possible. These
relationships often play a key role during an attack, and our goal is to build a map of the domain
to find potential attack vectors.
For example, when a user logs in to the domain, their credentials are cached in memory on the
computer they logged in from.
If we are able to steal those credentials, we may be able to use them to authenticate as the
domain user and may even escalate our domain privileges.
However, during an AD assessment, we may not always want to escalate our privileges right
away.
y
Instead, it’s important to establish a good foothold, and our goal at the very least should be to
maintain our access. If we are able to compromise other usekrs that have the same permissions
as the user we already have access to, this allows us to maintain our foothold. If, for example, the
password is reset for the user we originally obtained saccess to, or the system administrators
notice suspicious activity and disable the account, we would still have access to the domain via
other users we compromised.
o
When the time comes to escalate our privileges, we don’t necessarily need to immediately
escalate to Domain Admins because there may be other accounts that have higher privileges than
n
a regular domain user, even if they aren’t necessarily a part of the Domain Admins group. Service
Accounts, which we will discuss later, are a good example of this. Although they may not always
have the highest privilege possible, tihey may have more permissions than a regular domain user,
such as local administrator privilezges on specific servers.
In addition, an organization’s most sensitive and important data may be stored in locations that
D
do not require domain administrator privileges, such as a database or a file server. This means
that obtaining domain administrator privileges should not always be the end goal during an
assessment since we may be able to reach the “crown jewels” for an organization via other users
in the domain.
Nevertheless, in our Challenge Labs the goal is to achieve domain administrator
privileges.
When an attacker or penetration tester improves access through multiple higher-level accounts to
reach a goal, it is known as a chained compromise.
In order to find possible attack paths, we’ll need to learn more about our initial user and see what
else we have access to in the domain. We also need to find out where other users are logged in.
Let’s dig into that now.
PowerView’s Find-LocalAdminAccess command scans the network in an attempt to determine if
our current user has administrative permissions on any computers in the domain. The command
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 713
Made in Morocco
Penetration Testing with Kali Linux
relies on the OpenServiceW function,1033 which will connect to the Service Control Manager (SCM)
on the target machines. The SCM essentially maintains a database of installed services and
drivers on Windows computers. PowerView will attempt to open this database with the
SC_MANAGER_ALL_ACCESS access right, which require administrative privileges, and if the
connection is successful, PowerView will deem that our current user has administrative privileges
on the target machine.
Let’s run Find-LocalAdminAccess against corp.com. While the command supports parameters
such as Computername and Credentials, we will run it without parameters in this case since we
are interested in enumerating all computers, and we are already logged in as stephanie. In other
words, we are spraying the environment to find possible local administrative access on
computers under the current user context.
y
Depending on the size of the environment, it may take a few minutes for Find-
LocalAdminAccess to finish.
k
s
PS C:\Tools> Find-LocalAdminAccess
client74.corp.com
Listing 755 - Scanning domain to find locaol administrative privileges for our user
This reveals that stephanie has administrative privileges on CLIENT74. While it may be tempting
to log in to CLIENT74 and check permissionns right away, this is a good opportunity to zoom out
and generalize.
Penetration testing can lead us in miany different directions and while we should definitely follow
up on the many different paths bzased on our interactions, we should stick to our schedule/plan
most of the time to keep a disciplined approach.
D
Let’s continue by trying to visualize how computers and users are connected together. The first
step in this process will be to obtain information such as which user is logged in to which
computer.
Historically, the two most reliable Windows APIs that could (and still may) help us achieve these
goals are NetWkstaUserEnum1034 and NetSessionEnum.1035 The former requires administrative
privileges, while the latter does not. However, Windows has undergone changes over the last
couple of years, possibly making the discovery of logged in user enumeration more difficult for
us.
PowerView’s Get-NetSession command uses the NetWkstaUserEnum and NetSessionEnum APIs
under the hood. Let’s try running it against some of the machines in the domain and see if we can
find any logged in users:
PS C:\Tools> Get-NetSession -ComputerName files04
1033 (Microsoft, 2022), https://learn.microsoft.com/en-us/windows/win32/api/winsvc/nf-winsvc-openservicew
1034 (Microsoft, 2021), https://learn.microsoft.com/en-us/windows/win32/api/lmwksta/nf-lmwksta-netwkstauserenum
1035 (Microsoft, 2022), https://learn.microsoft.com/en-us/windows/win32/api/lmshare/nf-lmshare-netsessionenum
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 714
Made in Morocco
Penetration Testing with Kali Linux
PS C:\Tools> Get-NetSession -ComputerName web04
PS C:\Tools>
Listing 756 - Checking logged on users with Get-NetSession
As indicated above, we are not receiving any output. A simple explanation would be that there are
no users logged in on the machines. However, to make sure we aren’t receiving any error
messages, let’s add the -Verbose flag:
PS C:\Tools> Get-NetSession -ComputerName files04 -Verbose
VERBOSE: [Get-NetSession] Error: Access is denied
PS C:\Tools> Get-NetSession -ComputerName web04 -Verbose
VERBOSE: [Get-NetSession] Error: Access is denied
Listing 757 - Adding verbosity to our Get-NetSession command
Unfortunately, it appears that NetSessionEnum does not work in thisy case and returns an “Access
is denied” error message. This most likely means that we are not allowed to run the query, and
based on the error message, it may have something to do with privileges.
k
Since we may have administrative privileges on CLIENT74 with stephanie, let’s run Get-
NetSession against that machine and inspect the outputs there as well:
PS C:\Tools> Get-NetSession -ComputerName client74
o
CName : \\192.168.50.75
UserName : stephanie
n
Time : 8
IdleTime : 0
ComputerName : client74
i
Listing 758 - Running Get-NetSession on CLIENT74
z
We did receive some more information this time. However, looking closer at the output, the IP
address in CName (192.16D8.50.75) does not match the IP address for CLIENT74. In fact, it
matches the IP address for our current machine, which is CLIENT75. Since we haven’t spawned
any sessions to CLIENT74, something appears to be off in this case as well.
In a real world engagement, or even in the Challenge Labs, we might accept that enumerating
sessions with PowerView does not work and try to use a different tool. However, let’s use this as
a learning opportunity and take a deeper dive into the NetSessionEnum API and try to figure out
exactly why it does not work in our case.
According to the documentation for NetSessionEnum,1036 there are five possible query levels:
0,1,2,10,502. Level 0 only returns the name of the computer establishing the session. Levels 1 and
2 return more information but require administrative privileges.
This leaves us with Levels 10 and 502. Both should return information such as the name of the
computer and name of the user establishing the connection. By default, PowerView uses query
level 10 with NetSessionEnum, which should give us the information we are interested in.
The permissions required to enumerate sessions with NetSessionEnum are defined in the
SrvsvcSessionInfo registry key, which is located in the
1036 (Microsoft, 2022), https://learn.microsoft.com/en-us/windows/win32/api/lmshare/nf-lmshare-netsessionenum
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 715
Made in Morocco
Penetration Testing with Kali Linux
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanServer\DefaultSecurity
hive.
We’ll use the Windows 11 machine we are currently logged in on to check the permissions.
Although it may have different permissions than the other machines in the environment, it may
give us an idea of what is going on.
In order to view the permissions, we’ll use the PowerShell Get-Acl1037 cmdlet. This command will
essentially retrieve the permissions for the object we define with the -Path flag and print them in
our PowerShell prompt.
PS C:\Tools> Get-Acl -Path
HKLM:SYSTEM\CurrentControlSet\Services\LanmanServer\DefaultSecurity\ | fl
Path :
y
Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Servic
es\LanmanServer\DefaultSecurity\
Owner : NT AUTHORITY\SYSTEM k
Group : NT AUTHORITY\SYSTEM
Access : BUILTIN\Users Allow ReadKey
BUILTIN\Administrators Allow FullControls
NT AUTHORITY\SYSTEM Allow FullControl
CREATOR OWNER Allow FullControl
o
APPLICATION PACKAGE AUTHORITY\ALL APPLICATION PACKAGES Allow ReadKey
S-1-15-3-1024-1065365936-1281604716-3511738428-1654721687-432734479-
3232135806-4053264122-3456934681 Allow ReadKey
n
Listing 759 - Displaying permissions on the DefaultSecurity registry hive
The highlighted output in Listing 759 reveals the groups and users that have either FullControl or
i
ReadKey, meaning they can all read the SrvsvcSessionInfo key itself.
z
However, the BUILTIN group, NT AUTHORITY group, CREATOR OWNER and APPLICATION
PACKAGE AUTHORITY areD defined by the system, and do not allow NetSessionEnum to
enumerate this registry key from a remote standpoint.
The long string in the end of the output is, according to Microsoft’s documentation,1038 a capability
SID. In fact, the documentation refers to the exact SID in our output.
A capability SID is an unforgeable token of authority that grants a Windows component or a
Universal Windows Application access to various resources. However, it will not give us remote
access to the registry key of interest.
In older Windows versions (which Microsoft does not specify), Authenticated Users were allowed
to access the registry hive and obtain information from the SrvsvcSessionInfo key. However,
following the least privilege principle, regular domain users should not be able to acquire this
information within the domain, which is likely part of the reason the permissions for the registry
hive changed as well. In this case, due to permissions, we can be certain that NetSessionEnum
will not be able to obtain this type of information on default Windows 11.
1037 (Microsoft), https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.security/get-acl?view=powershell-7.3
1038 (Microsoft, 2021), https://learn.microsoft.com/en-us/troubleshoot/windows-server/windows-security/sids-not-resolve-into-
friendly-names
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 716
Made in Morocco
Penetration Testing with Kali Linux
Now let’s get a better sense of the operating system versions in use. We can do this with Net-
GetComputer, this time including the operatingsystemversion attribute:
PS C:\Tools> Get-NetComputer | select
dnshostname,operatingsystem,operatingsystemversion
dnshostname operatingsystem operatingsystemversion
----------- --------------- ----------------------
DC1.corp.com Windows Server 2022 Standard 10.0 (20348)
web04.corp.com Windows Server 2022 Standard 10.0 (20348)
FILES04.corp.com Windows Server 2022 Standard 10.0 (20348)
client74.corp.com Windows 11 Pro 10.0 (22000)
client75.corp.com Windows 11 Pro 10.0 (22000)
CLIENT76.corp.com Windows 10 Pro 10.0 (16299)
Listing 760 - Querying operating system and version
y
As we discovered earlier, Windows 10 is the oldest operating system in the environment, and
based on the output above, it runs version 16299, otherwise known as build 1709.1039
k
While the documentation from Microsoft is not clear when they made a change to the
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Sesrvices\LanmanServer\DefaultSecurity
registry hive, it appears to be around the release of this exact build. It also seems to affect all
Windows Server operating systems since Windows Server 2019 build 1809. This creates an issue
o
for us since we won’t be able to use PowerView to build the domain map we had in mind.
Even though NetSessionEnum does not work in this case, we should still keep it in our toolkit
n
since it’s not uncommon to find older systems in real-world environments.
Fortunately there are other tools wei can use, such as the PsLoggedOn1040 application from the
SysInternals Suite.1041 The documzentation states that PsLoggedOn will enumerate the registry
keys under HKEY_USERS to retrieve the security identifiers (SID) of logged-in users and convert
the SIDs to usernames. PsLoggedOn will also use the NetSessionEnum API to see who is logged
D
on to the computer via resource shares.
One limitation, however, is that PsLoggedOn relies on the Remote Registry service in order to scan
the associated key. The Remote Registry service has not been enabled by default on Windows
workstations since Windows 8, but system administrators may enable it for various
administrative tasks, for backwards compatibility, or for installing monitoring/deployment tools,
scripts, agents, etc.
It is also enabled by default on later Windows Server Operating Systems such as Server 2012 R2,
2016 (1607), 2019 (1809), and Server 2022 (21H2). If it is enabled, the service will stop after ten
minutes of inactivity to save resources, but it will re-enable (with an automatic trigger) once we
connect with PsLoggedOn.
With the theory out of the way for now, let’s try to run PsLoggedOn against the computers we
attempted to enumerate earlier, starting with FILES04 and WEB04. PsLoggedOn is located in
C:\Tools\PSTools on CLIENT75. To use it, we’ll simply run it with the target hostname:
1039 (Microsoft, 2022), https://learn.microsoft.com/en-us/windows/uwp/whats-new/windows-10-build-16299
1040 (Microsoft, 2021), https://learn.microsoft.com/en-us/sysinternals/downloads/psloggedon
1041 (Microsoft, 2022), https://learn.microsoft.com/en-us/sysinternals/
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 717
Made in Morocco