tions that arise naturally when one explores these codes.
What are the overheads of the optimal and UBp
codes? To answer this question, we plot the overhead
factors of the best codes for n ≤ 100 in Figure 2. For
each value of m, the best overhead factor reaches its
high point at n = 2, and then descends to approach 1
as n grows.
In general, the overhead factor for each
value of n is higher when m is larger. This is not strictly
true, however. For example, when n = 4 the optimal
overhead factor is 1.0955 when m = 4, whereas the
UB2 code for m = 5 has an overhead factor of 1.0952.
1.15
1.10
1.05
r
o
t
c
a
F
d
a
e
h
r
e
v
O
1.00
1
m = 5
m = 4
m = 3
m = 2
10
n
100
Figure 2: Overhead factors of optimal and UBp codes
for m ∈ {2, 3, 4, 5} and n ≤ 100.
There are other interesting features of Figure 2. First,
each curve is composed of three segments: (1) A rising
from an overhead factor of 1 when n = 1 to a maximum
value, which in each case is when n = 2; (2) A period
where the factor follows no particular pattern; and (3) A
gradual descending of the overhead factor back down to
one as n grows further. It is an open problem to provide
a better characterization of the optimal overhead. Note
that the curve for m = 4 rises and falls three distinct
times.
Are the best graphs regular? Regularity in LDPC’s
is discussed in Luby et al’s seminal paper on Tor-
nado codes [LMS+97] and thereafter separated into left-
regularity and right-regularity [RU03, Sho99]. A graph
is left-regular if each left-hand node has the same num-
ber of incident edges. We deﬁne a relaxed property,
called loose left-regularity (LLR) to be when each left-
hand node of a graph has either i or i + 1 edges for some
value of i. Right-regularity and loose right-regularity
(LRR) are deﬁned similarly, except for right-hand nodes
rather than left-hand nodes.
Of the 2910 best graphs for m ∈ {3, 4, 5}, none
are left-regular, and only one is LLR. This is the code
for n = 6, m = 4, which has four nodes in C1, and six
in C2. The remaining 2909 graphs are not LLR. Left-
regularity as a property for optimality was dismissed
early on in [LMS+97], so these results do not come as a
surprise.
s
e
g
d
e
f
o
#
e
g
a
r
e
v
A
s
e
d
o
n
d
n
a
h
-
t
h
g
i
r
o
t
n
i
60
40
20
0
0
m = 2
m = 3
m = 4
m = 5
20
40
60
80
100
n
Figure 3: Average number of incoming edges for each
right-hand node.
Right-regularity, however, is a different story. Ev-
ery one of the 2910 best graphs is either right-regular
or LRR. As plotted in Figure 3, the average number of
edges into each right-hand node follows a linear trend
for each value of m. Fitting the data to a line, we get
that the average number of edges into each right hand
node is 0.67n for m = 2, 0.54n for m = 3, 0.47n
for m = 4, and 0.46n for m = 5.
Do the various ci for best graphs roughly equal
each other? When m = 2, we proved that in an opti-
mal graph, no ci could differ from cj by more than one.
It is logical to see if this trend extrapolates to larger m.
The answer is that it does not. The ﬁrst graph to exhibit
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:53:32 UTC from IEEE Xplore.  Restrictions apply. 
Lambda-1
Lambda-2
Lambda-3
Lambda-4
Lambda-5
0.6
0.4
0.2
s
e
i
t
i
l
i
b
a
b
o
r
P
0.6
0.4
0.2
0.6
0.4
0.2
0.0
0
500
1000
n
m = 3
1500
0.0
0
200
400
600
n
m = 4
0.0
800 1000
0
50
n
100
150
m = 5
Figure 4: Values of the Λ vectors for best graphs.
this property for m = 3 is when n = 18, and the op-
timal graph is (4,3,3,3,3,3,2) with an overhead factor of
1.0326 as compared to (3,3,3,3,3,3,3), with an overhead
factor of 1.0329. As n increases for all values of m > 2,
this trend becomes more pronounced. For example, the
best graph for m = 3 and n = 1750 has c1 = 289,
and c7 = 188. For m = 4 and n = 200, the best graph
has c1 = 20, and c15 = 6. Looking at the equation for
overhead in Section 5.2, it is easy to see why c7 would
have a lower value than the rest, as it is present in six
of the terms in the bottom fraction, whereas the counts
in E2 are present in ﬁve terms each, and the counts in E1
are present in only three each.
A different property that we deﬁne here is Edge Class
Equivalence: If e(i) = e(j), then ci and cj differ by
at most one.
In other words, the counts of distinct
nodes in each edge class are roughly equal. For ex-
ample, the UB6 graph for m = 3 and n = 1001 is
(166,165,133,165,133,134,108). This graph has edge
class equivalence, since the counts of nodes in E1 is
equal to 165 or 166, the counts of nodes in E2 is equal
to 133 or 134, and the count of nodes in E3 is 108. As
with loose right-regularity, every one of the 2910 best
graphs has edge class equivalence.
Since each graph has edge class equivalence,
it
makes sense to look at the sizes of the various Ei.
Borrowing from the classical deﬁnition of Tornado
Codes [LMS+97], we can deﬁne a vector Λ of graph G
to be (Λ1, Λ2, . . . , Λm), where Λj is the probability that
a node in G is an element of Ej. We plot the values of Λ
for the 2910 best graphs below in Figure 4.
In the graphs for m = 3 and m = 4, the Λ vectors
clearly converge to constants as n grows. The m = 5
graph may exhibit this trend as well, but without looking
at higher values of n, we can only speculate. We explore
this trend a little further below.
Do the values of ci or |Ei| grow monotonically
with n? For m = 2, they do. However, for the
other values of m,
they do not. Otherwise, UB0
graphs would all be optimal. As an example, con-
sider m = 3 and n = 1470, whose best graph is
(243,243,195,243,195,195,159). The best graph for n =
1471 is (243,243,196,242,196,196,158) – both c4 and c7
are less than their values for n = 1470. Even more
striking, when m = 4 and n = 141, the best graph has
c15 = 5. For n = 142, c15 = 4, and for n = 143,
c15 = 3.
For a given m, is the optimal graph for n a sub-
graph of the optimal graph for n + 1? For m = 2,
the answer is yes, which may be seen easily by look-
ing at how the various ci grow. However, for m > 2,
in general, the answer is no. This is because the ci do
not grow monotonically. However, in many speciﬁc in-
stances, the answer is yes. Quantifying this, of the 1,749
optimal graphs for m = 3 (with n > 1), 1,741 of them
are supersets of the optimal graphs for n−1. For m = 4,
900 of the 999 graphs are supersets, and for m = 5, the
number is only 114 of 159.
Can anything be learned by modeling the ci as
continuous variables? Suppose we make the assump-
tion that the ci are continuous variables, and that all ci
in the same edge class are equal to each other. More-
over, as implied by the graphs in Figure 4, we assume
that the values of Λ converge to constants as n → ∞.
Then, using the last 200 values of n in each case, we
average the values of Λ and display them in Table 2.
For m = 2 and m = 3, we used the Maple software
package to corroborate the Λ values directly from their
overhead equations. With the corroboration, we were
also able to prove that o(G) has a local minimum value
when the graphs are edge class equivalent. For m = 4
and m = 5, the equations (fourth and ﬁfth degree poly-
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:53:32 UTC from IEEE Xplore.  Restrictions apply. 
nomials with three and four variables respectively) were
too complex for Maple to minimize.
m
2
3
4
5
Λ1
0.6667
0.4940
0.3879
0.3210
Λ2
0.3333
0.3983
0.4030
0.3909
Λ3
Λ4
Λ5
0.1077
0.1820
0.2215
0.0271
0.0620
0.0047
Table 2: Values of the Λ vectors when the ci are contin-
uous variables and display edge class equivalence.
We can use the Λ vectors in Table 2 as a second
(cid:4)m
heuristic to compute graphs. We do this by multiply-
ing each Λj by N , and rounding to the nearest integer to
yield the various |Ej|. If t =
j=1 |Ej| (cid:8)= N , then we
can sort NΛj − |Ej|, and either add one to the biggest
N − t counts or subtract one from the smallest t − N
counts. Then we enumerate all graphs that exhibit both
loose right-regularity and edge class equivalence, and
keep track of the best graph. This results in far fewer
graphs being generated than by perturbation.
For example, when m = 5 and n = 402, the |Ej|
are (131,159,90,25,2). Since there are 10 values each
of ci ∈ E3, each of them will equal 90. Similarly, each
of the ﬁve values of ci ∈ E4 will equal 5, and c31 = 2.
The only values that require enumeration are the 5 com-
binations of ci ∈ E1 where four equal 26 and one equals
27, and the 10 combinations of ci ∈ E2 where nine
equal 16, and one equals 15. That makes 50 graphs,
of which only 20 are LRR. The maximum number of
graphs that we enumerated in this way was 59,940,
for m = 5 and n = 290. The average number of graphs
generated for all n ≤ 1, 000 was 4,007. This is as com-
pared to over 2 million graphs per value of n when gen-
erating UB2.
In Figure 5, we compare the overheads of the codes
created using these Λ vectors with the UBp codes. All
three graphs are similar — for very small n (less than
10), the codes created with the Λ vectors have signiﬁ-
cantly higher overheads than their optimal counterparts.
However, as n grows, the two techniques produce simi-
larly performing codes. Interestingly, in one case (m =
5, n = 57), the Λ-generated code has a lower overhead
factor (1.022258) than the UB2 code (1.022263). This
proves that as suspected, the UB2 codes are not optimal
for m = 5. Certainly, given the computational com-
plexity of generating UB2 codes for m = 5, for moder-
ate to large values of n, the technique using the Λ vec-
tor is preferable. We include the graphs so generated
for n ≤ 1000 in Technical Report [Pla04].
7 Optimal Graphs for n = 2
We switch our focus now from ﬁxed m to ﬁxed n. While
the graphs for n = 2 have greater variety than for
m = 2, they have one practical limitation — the values
of the coding bits are constrained to three distinct values
— the value of the ﬁrst data bit, the value of the second
data bit, or the exclusive-or of the two data bits. When
downloading, it is only necessary to download two of