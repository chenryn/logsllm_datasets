Silhouette remain the same.
8.6 Comparison with RECFISH and µRAI
RECFISH [70] and µRAI [5] are both recently published
defenses that provide security guarantees similar to Silhouette
but via signiﬁcantly different techniques. Like Silhouette, they
provide return address integrity coupled with coarse-grained
CFI protections for ARM embedded architectures. As each
defense has distinct strengths and weaknesses, the choice of
defense depends on the speciﬁc application to be protected. To
compare Silhouette with RECFISH and µRAI more directly
and fairly, we also evaluated Silhouette with BEEBS and the
original CoreMark benchmark using only SRAM and present
their performance numbers.
RECFISH [70], which is designed for real-time systems,
runs code in unprivileged mode and uses supervisor calls
to privileged code to update the shadow stack. Due to fre-
quent context switching between privilege levels, RECFISH
incurs higher overhead than Silhouette or µRAI. For the 24
BEEBS benchmarks that RECFISH and Silhouette have in
common,5 RECFISH incurs a geometric mean of 21% per-
formance overhead, and approximately 30% on CoreMark
whereas Silhouette incurs just 3.6% and 6.7%, respectively.
Unlike the other two defenses, RECFISH patches binaries;
no application source code or changes to the compiler are
needed.
µRAI [5] protects return addresses, in part, by encoding
them into a single reserved register and guaranteeing this
register is never corrupted. This approach is more complicated
but requires no protected shadow stack. Consequently, µRAI
is very efﬁcient for most function calls, incurring three to ﬁve
cycles for each call-return. However, there are cases, such
as calling a function from an uninstrumented library, when
µRAI needs to switch hardware privilege levels to save/load
the reserved register to/from a safe region, which is expensive.
The µRAI paper [5] reports an average of 0.1% perfor-
mance overhead on CoreMark and ﬁve IoT applications. The
µRAI authors observed that one IoT program, FatFs_RAM,
saw a 8.5% speedup because their transformation triggered
5We obtained RECFISH’s detailed performance data on BEEBS via direct
correspondence with the RECFISH authors.
the compiler to do a special optimization that was not per-
formed on the baseline code. When accounting for this opti-
mization, µRAI incurred an overhead of 6.9% on FatFs_RAM
and 2.6% on average for all benchmarks. We measured the
performance of CoreMark using Silhouette; the result is 6.7%
overhead compared to µRAI’s reported 8.1% [5].
Finally, we observe that Silhouette’s store hardening is a
general technique for intra-address space isolation. Thus, Sil-
houette can be extended to protect other security-critical data
in memory, which Section 9 discusses. In contrast, µRAI only
protects a small amount of data by storing it within a reserved
register; its approach cannot be as easily extended to protect
arbitrary amounts of data. µRAI does rely on SFI-based in-
strumentation in exception handlers for memory isolation, but
our results in Section 8.5 show that store hardening is more
efﬁcient than SFI and could therefore be used to replace SFI
in µRAI.
9 Extensibility
Although Silhouette focuses on providing control-ﬂow and
return address integrity for bare-metal applications, it can
also be extended to other use cases. For example, with min-
imal modiﬁcation, Silhouette can be used to protect other
security-critical data in memory, such as CPI’s sensitive
pointer store [43] or the kernel data structures within an em-
bedded OS like Amazon FreeRTOS [16].
With moderate modiﬁcation, Silhouette can also emulate
the behavior of running application code in unprivileged mode
on an embedded OS. First, the kernel of the embedded OS
would need to conﬁgure the MPU to disable unprivileged
write access to all kernel data. Second, the embedded OS
kernel’s scheduler would need to disable unprivileged write
access to memory of background applications. Third, in addi-
tion to store hardening, Silhouette would need to transform
loads in the application code into unprivileged loads in or-
der to protect the conﬁdentiality of OS kernel data structures.
It would also need to ensure that the embedded OS kernel
code contains no CFI labels used by user-space applications.
Fourth, the privileged code scanner must be adjusted to for-
bid all privileged instructions (as opposed to only those that
can be used to bypass Silhouette’s protections) in application
code, forbid direct function calls to internal functions of the
kernel, and allow privileged instructions in the embedded OS
kernel. Fifth, since the stack pointer of background applica-
tions needs to be spilled to memory during context switch,
the embedded OS kernel must protect the stack pointer of
applications from corruption in order to enforce Silhouette’s
security guarantee of return address integrity. One simple so-
lution would be storing application stack pointers to a kernel
data structure not writable by application code. Finally, sys-
tem calls require no changes. In ARMv7-M [12], application
code calls a system call using the SVC instruction, which gen-
erates a supervisor call exception. A pointer to the exception
USENIX Association
29th USENIX Security Symposium    1231
handler table (which stores the address of exception handler
functions) is stored in a privileged register within the System
region; Silhouette can protect both the System region and
the exception handler table to ensure that the SVC instruction
always transfers control to a valid system call entry point.
Also, regardless of current privilege mode, exception handlers
in ARMv7-M, including the supervisor call handler, will exe-
cute in privileged mode and switch the stack pointer to use the
kernel stack [12]. Therefore, system calls require no change
for Silhouette to work as intended.
10 Related Work
Control-Flow Hijacking Defenses for Embedded Systems
Besides RECFISH [70] and µRAI [5], which Section 8.6
discusses, there are several other control-ﬂow hijacking de-
fenses for embedded devices. CFI CaRE [57] uses supervisor
calls and TrustZone-M technology, available on the ARMv8-
M [13] architecture but not on ARMv7-M, to provide coarse-
grained CFI and a protected shadow stack. CFI CaRE’s perfor-
mance overhead on CoreMark is 513%. SCFP [71] provides
ﬁne-grained CFI by extending the RISC-V architecture. Un-
like Silhouette, SCFP is a pure CFI defense and does not
provide a shadow stack. Therefore, it cannot mitigate attacks
such as control-ﬂow bending [19] while Silhouette can, as
Section 7.2 shows.
Use of Unprivileged Loads/Stores Others [22, 44] have
explored the use of ARM’s unprivileged loads and stores to
provide security guarantees; however, these works differ from
Silhouette’s store hardening in both implementation and ap-
plication. uXOM [44] transforms regular load instructions
to unprivileged ones to implement execute-only memory on
embedded systems. Aside from differences in the provided se-
curity guarantees—i.e., execute-only memory versus control-
ﬂow and return address integrity—these systems differ in how
they handle dangerous instructions that could be manipulated
to bypass protections. In particular, uXOM inserts veriﬁcation
routines before unconverted load/store instructions to ensure
that they will not access security-critical memory regions
while Silhouette leverages CFI and other forward branch pro-
tections to prevent unexpected instructions from being exe-
cuted. ILDI [22] combines unprivileged loads and stores on
the ARMv8-A architecture along with the PAN state and hyp
mode to isolate data within the Linux kernel—the latter two
features are not available on the ARMv7-M systems targeted
by Silhouette.
Intra-Address Space Isolation Silhouette protects the
shadow stack by leveraging store hardening. Previous work
has explored other methods of intra-address space isolation
which could be used to protect the shadow stack. Our eval-
uation in Section 8.5 compares Silhouette to Software Fault
Isolation (SFI) [69], so we focus on other approaches here.
ARM Mbed µVisor [7], MINION [42], and ACES [23] en-
force memory compartmentalization on embedded systems
using the MPU. They all dynamically reconﬁgure the MPU at
runtime but target different scenarios; Mbed µVisor and MIN-
ION isolate processes from each other at context switches,
and ACES dissects a bare-metal application at function bound-
aries for intra-application isolation. As discussed previously,
isolation that requires protection domain switching is poorly-
suited to security instrumentation that requires frequent cross-
ing of the isolation boundaries—such as Silhouette’s shadow
stack accesses.
ARMlock [72] uses ARM domains to place pages into
different protection domains; a privileged register controls
access to pages belonging to different domains. ARM do-
mains are only available for CPUs with MMUs [11, 12] and
therefore cannot be used in ARMv7-M systems. Additionally,
access to ARM domains can only be modiﬁed in privileged
mode; software running in user-space must context switch to
privileged mode to make changes.
Information Hiding Given the traditionally high cost of
intra-address space isolation, many defenses hide security-
critical data by placing it at a randomly chosen address. This
class of techniques is generally referred to as information
hiding. For example, EPOXY [24] includes a backward-edge
control-ﬂow hijacking defense that draws inspiration from
CPI [43]—relying on information hiding to protect security-
critical data stored in memory. Consequently, an adversary
with a write-what-where vulnerability (as assumed in our
threat model) can bypass EPOXY protections.
Fundamentally, information hiding is unlikely to be a
strong defense on embedded systems as such systems tend
to use only a fraction of the address space (and the memory
is directly mapped) which limits the entropy attainable. For
example, our evaluation board only has 2 MB of memory for
code; if each instruction occupies two bytes, randomizing the
code segment provides at most 20 bits of entropy. In contrast,
Silhouette’s defenses are effective even if the adversary has
full knowledge of the memory layout and contents.
Memory Safety Memory safety provides strong protec-
tion but incurs high overhead. Solutions using shadow mem-
ory [2, 3, 32, 47, 62] may consume too much memory for
embedded systems. Other solutions [30, 31, 41, 55, 60] incur
too much performance overhead. nesCheck [53] is a memory
safety compiler for TinyOS [38] applications which induces
6.3% performance overhead on average. However, nesCheck
cannot support binary code libraries as it adds additional ar-
guments to functions. Furthermore, nesCheck’s performance
relies heavily on static analysis. We believe that, due to their
simplicity, the benchmarks used in the nesCheck evaluation
are more amenable to static analysis than applications for
slightly more powerful embedded systems (such as ours). In
1232    29th USENIX Security Symposium
USENIX Association
contrast, Silhouette’s performance does not depend on static
analysis’s precision.
11 Conclusions and Future Work
In conclusion, we presented Silhouette: a software control-
ﬂow hijacking defense that guarantees the integrity of return
addresses for embedded systems. To minimize overhead, we
proposed Silhouette-Invert, a system which provides the same
protections as Silhouette with signiﬁcantly lower overhead at
the cost of a minor hardware change. We implemented our
prototypes for an ARMv7-M development board. Our evalua-
tion shows that Silhouette incurs low performance overhead:
a geometric mean of 1.3% and 3.4% on two benchmark suites,
and Silhouette-Invert reduces the overhead to 0.3% and 1.9%.
We are in the process of opening source the Silhouette com-
piler and related development tools. They should be available
at https://github.com/URSec/Silhouette.
We see two primary directions for future work. First, we can
optimize Silhouette’s performance. For example, Section 7.1
shows that Silhouette ensures that the stack pointer stays
within the stack region. Consequently, store instructions using
the sp register and an immediate to compute target addresses
are unexploitable; Silhouette could elide store hardening on
such stores. Second, we can use Silhouette to protect other
memory structures, such as the safe region used in CPI [43]
and the process state saved on interrupts and context switches
(like previous work [26] does).
Acknowledgements
The authors thank the anonymous reviewers for their insight-
ful comments and Trent Jaeger, our shepherd, for helping us
improve our paper. This work was funded by NSF awards
CNS-1618213 and CNS-1629770 and ONR Award N00014-
17-1-2996.
References
[1] Martín Abadi, Mihai Budiu, Úlfar Erlingsson, and Jay Ligatti.
Control-ﬂow integrity principles, implementations, and appli-
cations. ACM Transactions on Information Systems Security,
13:4:1–4:40, November 2009.
[2] Periklis Akritidis, Cristian Cadar, Costin Raiciu, Manuel Costa,
and Miguel Castro. Preventing memory error exploits with
WIT. In Proceedings of the 2008 IEEE Symposium on Security
and Privacy, SP ’08, pages 263–277, Oakland, CA, 2008. IEEE
Computer Society.
[3] Periklis Akritidis, Manuel Costa, Miguel Castro, and Steven
Hand. Baggy bounds checking: An efﬁcient and backwards-
compatible defense against out-of-bounds errors. In Proceed-
ings of the 18th USENIX Security Symposium, Security ’09,
pages 51–66, Montreal, QC, Canada, 2009. USENIX Associa-
tion.
[4] Aleph One. Smashing the stack for fun and proﬁt. Phrack
Magazine, 49(14), November 1996.
[5] Naif Saleh Almakhdhub, Abraham A. Clements, Saurabh
Bagchi, and Mathias Payer. µRAI: Securing embedded sys-
tems with return address integrity. In Proceedings of the 2020
Network and Distributed System Security Symposium, NDSS
’20, San Diego, CA, 2020. Internet Society.
[6] Verifying app behavior on the Android runtime (ART).
https://developer.android.com/guide/practices/
verifying-apps-art.
[7] Mbed µVisor. https://www.mbed.com/en/technologies/
security/uvisor.
[8] The ARMv8-A architecture and its ongoing development, 2014.
https://community.arm.com/developer/ip-products/
processors/b/processors-ip-blog/posts/the-armv8-
a-architecture-and-its-ongoing-development.
[9] Arm Holdings. Cortex-M4 Technical Reference Manual,
March 2010. DDI 0439B.
[10] Arm Holdings. CoreMark Benchmarking for ARM Cortex
Processors: Application Note 350, July 2013. DAI 0350A.
[11] Arm Holdings. ARM Architecture Reference Manual: ARMv7-
A and ARMv7-R edition, May 2014. DDI 0406C.c.
[12] Arm Holdings. ARMv7-M Architecture Reference Manual,
December 2014. DDI 0403E.b.
[13] Arm Holdings. ARMv8-M Architecture Reference Manual,
October 2019. DDI 0553B.i.
[14] Arm Holdings. Arm Architecture Reference Manual: Armv8,
for Armv8-A architecture proﬁle, March 2020. DDI 0487F.b.
[15] Marc Auslander and Martin Hopkins. An overview of the PL.8
compiler. In Proceedings of the 1982 SIGPLAN Symposium
on Compiler Construction, CC ’82, pages 22–31, Boston, MA,
1982. ACM.
[16] Amazon FreeRTOS. https://aws.amazon.com/freertos.
[17] Nathan Burow, Scott A. Carr, Joseph Nash, Per Larsen, Michael
Franz, Stefan Brunthaler, and Mathias Payer. Control-ﬂow in-
tegrity: Precision, security, and performance. ACM Computing
Survey, 50(1):16:1–16:33, April 2017.
[18] Nathan Burow, Xinping Zhang, and Mathias Payer. SoK: Shin-
ing light on shadow stacks. In Proceedings of the 2019 IEEE
Symposium on Security and Privacy, SP ’19, pages 985–999,
San Francisco, CA, 2019. IEEE Computer Society.
[19] Nicholas Carlini, Antonio Barresi, Mathias Payer, David Wag-
ner, and Thomas R. Gross. Control-ﬂow bending: On the
effectiveness of control-ﬂow integrity. In Proceedings of the
24th USENIX Security Symposium, Security ’15, pages 161–
176, Washington, DC, 2015. USENIX Association.
[20] Nicholas Carlini and David Wagner. ROP is still danger-
ous: Breaking modern defenses. In Proceedings of the 23rd
USENIX Security Symposium, Security ’14, pages 385–399,
San Diego, CA, 2014. USENIX Association.
[21] Shuo Chen, Jun Xu, Emre C. Sezer, Prachi Gauriar, and Ravis-
hankar K. Iyer. Non-control-data attacks are realistic threats.
In Proceedings of the 14th USENIX Security Symposium, Se-
curity ’05, pages 177–191, Baltimore, MD, 2005. USENIX
Association.
USENIX Association
29th USENIX Security Symposium    1233
[22] Yeongpil Cho, Donghyun Kwon, and Yunheung Paek.
Instruction-level data isolation for the kernel on ARM.
In
Proceedings of the 54th Annual Design Automation Confer-
ence, DAC ’17, Austin, TX, 2017. ACM.
[23] Abraham A Clements, Naif Saleh Almakhdhub, Saurabh
Bagchi, and Mathias Payer. ACES: Automatic compartments
for embedded systems. In Proceedings of the 27th USENIX Se-
curity Symposium, Security ’18, pages 65–82, Baltimore, MD,
2018. USENIX Association.
[24] Abraham A Clements, Naif Saleh Almakhdhub, Khaled S.
Saab, Prashast Srivastava, Jinkyu Koo, Saurabh Bagchi, and
Mathias Payer. Protecting bare-metal embedded systems with
privilege overlays. In Proceedings of the 2017 IEEE Sympo-
sium on Security and Privacy, SP ’17, pages 289–303, San
Jose, CA, 2017. IEEE Computer Society.
[25] Mauro Conti, Stephen Crane, Lucas Davi, Michael Franz,
Per Larsen, Marco Negro, Christopher Liebchen, Mohaned
Qunaibit, and Ahmad-Reza Sadeghi. Losing control: On the
effectiveness of control-ﬂow integrity under stack attacks. In
Proceedings of the 22nd ACM SIGSAC Conference on Com-