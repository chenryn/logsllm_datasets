title:VeriSketch: Synthesizing Secure Hardware Designs with Timing-Sensitive
Information Flow Properties
author:Armaiti Ardeshiricham and
Yoshiki Takashima and
Sicun Gao and
Ryan Kastner
VeriSketch: Synthesizing Secure Hardware Designs with
Timing-Sensitive Information Flow Properties
Armaiti Ardeshiricham
Yoshiki Takashima
University of California, San Diego
PI:EMAIL
Sicun Gao
University of California, San Diego
PI:EMAIL
University of California, San Diego
PI:EMAIL
Ryan Kastner
University of California, San Diego
PI:EMAIL
ABSTRACT
We present VeriSketch, a security-oriented program synthesis frame-
work for developing hardware designs with formal guarantee of
functional and security specifications. VeriSketch defines a synthe-
sis language, a code instrumentation framework for specifying and
inferring timing-sensitive information flow properties, and uses spe-
cialized constraint-based synthesis for generating HDL code that en-
forces the specifications. We show the power of VeriSketch through
security-critical hardware design examples, including cache con-
trollers, thread schedulers, and system-on-chip arbiters, with formal
guarantee of security properties such as absence of timing side-
channels, confidentiality, and isolation.
ACM Reference Format:
Armaiti Ardeshiricham, Yoshiki Takashima, Sicun Gao, and Ryan Kastner.
2019. VeriSketch: Synthesizing Secure Hardware Designs with Timing-
Sensitive Information Flow Properties. In 2019 ACM SIGSAC Conference on
Computer and Communications Security (CCS ’19), November 11–15, 2019,
London, United Kingdom. ACM, New York, NY, USA, 16 pages. https://doi.
org/10.1145/3319535.3354246
1 INTRODUCTION
The prevalent way of designing digital circuits uses register-transfer
level (RTL) hardware description languages (HDLs). It requires
designers to fully specify micro-architectural features on a cycle-
by-cycle basis. The verbosity and complexity of RTL HDLs opens
the door for security vulnerabilities. With the growing number and
severity of hardware security-related attacks [11, 16, 28, 31], we
urgently need better tools for detecting and mitigating security
vulnerabilities for hardware designs.
We propose the VeriSketch program synthesis framework for
developing secure-by-construction hardware designs. VeriSketch
frees hardware designers from exactly specifying cycle-by-cycle
behaviors. Instead, the designer provides an RTL sketch, a set of
security and functional specifications, and an optional set of soft
constraints. VeriSketch outputs complete Verilog programs that
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-6747-9/19/11...$15.00
https://doi.org/10.1145/3319535.3354246
satisfy all the specified functional and security properties, and
heuristically favors designs that satisfy the soft constraints. The
unique aspect of VeriSketch revolves around the use of program
synthesis techniques and timing-sensitive hardware information
flow analysis to enable the synthesis of hardware designs that are
functionally correct and provably secure, as shown in the Fig. 1.
VeriSketch employs Information Flow Tracking (IFT) methods to
allow the definition and verification of security properties related
to non-interference [46], timing invariance [3, 53], and confiden-
tiality, and it extends counterexample-guided synthesis methods
(CEGIS) [42] to hardware design.
VeriSketch uses CEGIS to complete the sketch by breaking the
synthesis problem into separate verification and synthesis sub-
problems which can be solved by a SAT/SMT solver. In each ver-
ification round, the solver searches for a counterexample which
falsifies the properties. During synthesis, the solver suggests a new
design which adheres to the properties for the visited counterex-
amples. Iterating over these two stages, the algorithm either finds
a design which has passed the verification round or the synthesis
fails if the solver cannot propose a new design.
VeriSketch makes three extensions to CEGIS to enable synthesis
of hardware designs with security objectives. First, VeriSketch runs
CEGIS over a program which is automatically instrumented with
IFT labels and inference logic. This enables reasoning about wider
range of security properties based on the model of information
flow. Second, VeriSketch extends CEGIS to synthesize sequential
hardware designs with streams of inputs and outputs. This requires
enforcing the properties over multiple clock cycles as outputs are
continuously updated. This is done by expanding the formulation
of SAT problems over multiple cycles bounded by the sequential
depth of the circuit. Lastly, VeriSketch introduces heuristics to guide
the search algorithm away from undesirable trivial designs, which
is one of the major challenges of program synthesis frameworks.
This is done by collecting and reasoning about both counterexam-
ples and positive examples (i.e., input traces where properties fail
and pass). Guided by the counterexamples, the synthesis algorithm
finds a design which satisfies the properties, while positive exam-
ples are used to enforce soft constraints where properties are held.
Soft constraints enable specification of design attributes which are
preferable for improved quality but are not strictly necessary. The
term soft constraint is used as opposed to hard constraints (i.e., our
original properties) which should always hold. Through positive ex-
amples and iterative synthesis rounds, VeriSketch favors programs
Figure 1: VeriSketch accepts as input an incomplete hardware design (i.e., a “sketch”) and a set of functional and security
properties and soft constraints. VeriSketch leverages hardware information flow tracking and program synthesis to build a
Verilog design that satisfies the properties.
where soft constraints are held without changing the satisfiability
of the synthesis problem.
We use VeriSketch to generate hardware units that adhere to
various properties from sketches with different levels of details
spelled out by the programmer. We synthesize a cache controller
which is provably resilient against access-based timing side channel
attacks. We design fixed point arithmetic units such that they are
proven to run in constant time. Furthermore, we generate multiple
SoC arbiters and hardware thread schedulers that enforce non-
interference, timing predictability, and access control policies.
In all, we make the following contributions and organize the
paper as follows. We introduce the VeriSketch framework for semi-
automated synthesis of RTL hardware designs that enforce timing-
sensitive information flow policies. Section 3 introduces the for-
mal language definitions and main components of VeriSketch at
a high-level. Next, we demonstrate how IFT analysis can be used
to complete information flow constraints in Section 4. Section 5
focuses on introducing new program synthesis techniques that ex-
tend CEGIS for the synthesis based on information flow properties,
sequential circuits with bounded depth, and soft constraints. We
discuss the synthesized designs in Section 6.
2 BACKGROUND AND RELATED WORK
VeriSketch adopts and extends techniques from program synthesis
and repair, as well as hardware information flow tracking systems.
Here, we briefly review the related work in each of these domains.
2.1 Program Synthesis
Constraint-based synthesis is modeled as ∃p∀x . ϕ(x, p) where ϕ
denotes the design and specification, x is the design inputs and p
is the synthesis parameter encoding the undefined portion of the
design. The synthesizer’s goal is to find parameter p such that the
properties in ϕ are satisfied for all inputs x. CEGIS [2, 42, 43] intro-
duces a method for breaking down the exists-forall quantification
to iterations between verification and synthesis procedures that can
be solved by SAT/SMT solvers. The verification phase at each round
i fixes the parameter p to pi and attempts to verify the universal
conditions on all input combinations. The verification problem
can be written as ∃x . ¬ϕ(x, pi), which asks the solver to find a
case where properties are violated for the program synthesized by
parameter pi. Unsatisfiability here indicates that properties holds
for all input cases. Thus, pi is a valid solution and the synthesis
flow ends successfully. If satisfiable, the solver provides a coun-
terexample xi which falsifies the properties. The synthesis stage
looks for a new parameter that satisfies the properties for all the
previously visited counterexamples. This problem in round i can
xj ∈ CE ϕ(xj , p), where CE is the set of visited
counterexamples. If the solver fails to find a solution, the synthesis
flow terminates unsuccessfully indicating that the properties are
unsatisfiable for the given sketch.
be modeled as: ∃p.
Synthesis techniques are widely used to automate difficult soft-
ware engineering tasks [17, 22, 27, 37, 43]. Program synthesis have
been employed in different domains such as data processing [41, 51],
data completion [18, 47], databases [52, 54], and more recently in
security applications [24, 38]. In the HDL domain, Sketchilog [6, 7]
translates partially written Verilog code to complete ones by di-
rectly solving the exists-forall problem employing a QBF solver.
Sketchilog can only synthesize small combinatorial circuits, and
is not scalable due to the limitations of QBF solvers. Furthermore,
Sketchilog does not support expressive properties as high level
specifications. VeriSketch extends CEGIS to enable synthesis of
combinational and sequential circuits written in HDLs from high
level specifications. Our problem statement is similar to that of
program repair techniques for automatically generating patches
for security-critical programs [20, 21, 23, 44]. Our work is unique
from these previous works because we enforce security and func-
tional properties while synthesizing incomplete hardware designs.
Counterexample guided algorithms have been used to automatically
synthesize device drivers [39, 40] and generate abstraction models
for SoCs [45] and ISAs [25]. Similar techniques have been used at
the gate level to automatically modify a netlist when errors are
detected late in the design flow [10, 50]. VeriSketch uses CEGIS at
a higher level of abstraction to complete partial HDLs with respect
to security properties and acquaint the traditional hardware design
flow with automated policy enforcement.
2.2 Information Flow Control
VeriSketch leverages hardware-level information flow analysis to
reason about security properties. Hardware IFT tools can be broadly
ExplorationSynthesisVerificationSMT Solver1) Sketch and Speciﬁcation 2) Instrumentation 3) Program Synthesis 4) Secure and Correct Hardware DesignSketch: Incomplete Verilog DesignVerilog Instrumented with Security LabelsConstraint-based Synthesis (CEGIS)Veriﬁed Verilog SATif(pid == i && preload[addr]) assume (index_s == High); if(pid != i)  assert (rd_dat_proc == Low); try (!skip && lru_update);  Functional and Security Properties,  and Soft Constraints Modify Sketch and/or PropertiesUNSATdivided into two categories based on whether they introduce new
HDLs enabling definition of security labels [29, 30, 53] or rely on
automated label inference rules [3, 4, 46]. Here, we take the lat-
ter approach in order to enable integration of flow tracking with
sketching and synthesis. The structure of common HDLs facilitate
precise analysis of information flow policies and detection of tim-
ing leakage (refer to Remarks 4.8, 4.11 and 4.13). VeriSketch adopts
the approach from Clepsydra [3] which provides a sound labeling
system for precisely capturing timing flows in RTL designs and
verifying timing invariance properties. We extend and formalize
Clepsydra’s label inference rules and integrate them with program
synthesis techniques to automatically enforce timing-sensitive in-
formation flow policies.
2.3 Motivating Example
To illustrate the challenges of secure hardware design, we take
design of a cache that is resilient to timing side channel attack as
an example, and show how it is done via the traditional hardware
design flow versus by using VeriSketch. Unfortunately, modifying
hardware designs according to security requirements is often not
trivial; even the foremost hardware security experts can make errors
as we discuss in the following.
2.3.1 Threat Model. We consider the Percival attack model [36]
where the adversary runs concurrently with the victim process on
a Simultaneous Multi-Threading processor. The adversary is an
unprivileged user process which is isolated from the victim process,
i.e., it does not share the address space with the victim. The attacker
aims to learn information about the addresses which the victim uses
to access the cache. The attack relies on the fact that in certain RSA
implementations parts of the encryption key is used to look up a pre-
computed table in the cache. Hence, by observing the cache access
pattern of the victim process, the adversary could gain knowledge
about the key. While the Percival attack originally targeted the
OpenSSL implementation of the RSA algorithm, similar attacks
can target different applications where the cache index is driven
from secret data [28]. In order to launch the attack, the adversary
repeatedly fills the cache with its own data and measures each
access time. Once the victim accesses some cache line, it evicts the
attacker’s data from that line. This eviction increases the attacker’s
access time in the following round.
2.3.2 Traditional Secure Hardware Design Flow. Assume that the
designers decide to implement the partition locked cache (PLCache)
mitigation technique [53] to secure the cache against the described
attack model. PLCache enables processes to preload and lock sen-
sitive data in the cache to avoid eviction and timing variations.
It extends a “normal” cache controller with logic that arbitrates
access to the cache based on the security requirements. As a proof
of concept, we created a Verilog design of the PLCache based upon
the details in their paper. We instrumented it and verified it against
the IFT properties modeling cache timing leakage (described in
Example 4.17), and the security verification failed. Analyzing the
counterexample trace given by the verification tool, we discovered
that the side channel manifests itself through the cache metadata re-
lated to the cache replacement policy. PLCache uses a least recently