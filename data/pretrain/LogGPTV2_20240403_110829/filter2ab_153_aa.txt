.TH VIM 1 "1998 December 28"
.SH NAME
vim \- Vi IMproved, 一个程序员的文本编辑器
.SH "总览 (SYNOPSIS)"
.br
.B vim
[options] [file ..]
.br
.B vim
[options] -
.br
.B vim
[options] \-t tag
.br
.B vim
[options] \-q [errorfile]
.PP
.br
.B ex
.br
.B view
.br
.B gvim
.B gview
.br
.B rvim
.B rview
.B rgvim
.B rgview
.SH "描述 (DESCRIPTION)"
.B Vim
是 一个 同 Vi 向上兼容的 文本 编辑器, 可以 用来 编辑
任何 ASCII 文本, 特别 适合 用来 编辑 程序.
.PP
它对 Vi 作了 许多 增强: 多层撤销, 多窗口, 多缓冲区(buffer),
高亮度 语法显示, 命令行编辑, 文件名匹配, 在线帮助, 可视选定,
等等. 用
":help vi_diff.txt" 看
.B Vim
和 Vi 的差别 的 摘要.
.PP
在运行
.B Vim
的时候 可以用 ":help" 命令 获得 很多 帮助.
参考 下面的 在线帮助 一节.
.PP
一般 可用
.PP
	vim file
.PP
命令 打开
.B Vim
来 编辑 一个 文件. 概括的说, 可以用
.PP
	vim [options] [filelist]
.PP
命令 来运行
.B Vim .
如果 没有 文件名, 编辑器 就会 打开 一个 空的 缓冲区.
否则 就会用 下面 四个中的一个 来选择 要编辑的 文件.
.TP 12
file ..
文件名列表. 第一个 会 作为 当前 文件 读入 缓冲区, 光标 会
停在 缓冲区的 第一行. 你 可以用 ":next" 命令 转到 其它的 文件.
如果 要编辑 一个以 "-" 开头的 文件. 在文件 列表 前面 加上 "--".
.TP
-
从 标准输入 读取 被编辑的 文件. 从 标准 错误输出 (应该 是个
终端) 读入 命令.
.TP
-t {tag}
被 编辑的 文件 和 光标的 初始位置 由 标记 (tag) 决定， 标记
有点像 一种 goto 标签 (goto label).
在 标记文件中 找到 标记, 相应的 文件 成为 当前文件, 相应的 命令
被执行. 这种方式 常用于 C 程序, 标记 就是 函数名, 当前文件 就是
包含 那个函数的 文件, 光标 停留在 函数的 开始处.
见 ":help tag-commands"。
.TP
-q [errorfile]
运行时 进入 快速修复模式.
读取 [errorfile] 文件 并显示 第一个 错误. 如果 没有 [errorfile] 文件,
文件名 由 'errorfile' 选项 决定 (在 Amiga 为 "AztecC.Err", 在
其他系统中 为 "errors.vim"). 可以 用 ":cn" 命令 跳到 其它错误处.
见 ":help quickfix"。
.PP
.B Vim
会 根据 不同命令 有 不同的 表现, 尽管 它们 可能 是 一个 可执行 文件.
.TP 10
vim
正常 模式, 所有 都是 默认状态.
.TP
ex
以 Ex 模式 运行. 用 ":vi" 命令 进入 正常模式. 也可以 加上 "-e" 选项
进入 此模式.
.TP
view
以 只读模式 运行. 你被禁止 写文件. 也可以 加上 "-R" 选项 进入 此模式.
.TP
gvim gview
GUI 版本。
开启 一个 新的窗口. 也可以 加上 "-g" 选项 进入 此模式.
.TP
rvim rview rgvim rgview
同 上面的 相同, 只是 加上了 限制, 不能运行 shell 程序, 也 不能 暂停
.B Vim .
也 可以 加上 "-Z" 选项 进入 此模式.
.SH "选项 (OPTIONS)"
所有选项 都可以 以 任何顺序 出现, 可以 在文件名前, 也可以 在文件名后.
没有 参数的 选项 可以 出现在 一个 "-" 后面.
.TP 12
+[num]
对于 第一个 文件, 光标 会停在 第 "num" 行. 如果 没有 "num" , 则 光标
会停在 最后一行.
.TP
+/{pat}
对于 第一个文件, 光标 会停在 {pat} 第一次 出现的 地方. 搜寻 模式
见 ":help search-pattern"。
.TP
+{command}
.TP
-c {command}
读入 第一个 文件后 会 执行 {command} 命令. {command} 应为 Ex 命令.
如果 {command} 中 包含有 空格, 必须 用双引号 括住 (这个取决于所用的 shell).
例: Vim "+set si" main.c
.br
注意: 你 最多 可以用 10 个 "+" 或者 "-c" 命令.
.TP
-b
二进制模式. 设置 一些选项, 这样 就可以 用来 编辑 二进制 和 可执行 文件 了.
.TP
-C
兼容. 设置 'compatible' 选项. 这样 就算 存在 .vimrc 文件
.B Vim
也会 基本上 象 Vi 一样了.
.TP
-d {device}
打开 {device} 用作终端， 只在 Amiga 下。
例：
"\-d con:20/30/600/150".
.TP
-e
以 Ex 模式 运行
.B Vim ，
就像 运行 "ex" 一样。
.TP
-f
前台 运行。 对于 GUI 版本， 
.B Vim
不会 同运行它的 shell 分离。
在 Amiga 中，
.B Vim
不会 重新启动 来 开启一个 新窗口. 这个选项 会用在当
.B Vim
被 另外一个 程序执行, 并且 这个程序 想等编辑动作 结束后 再运行
的 时候 (如 mail). 在 Amiga 上 ":sh" 和 ":!" 不会起作用.
.TP
-F
如果
.B Vim
编译时 加入了 对 从右到左 书写的 文件 FKMAP 以及 Farsi 键盘映射 的支持,
.B Vim
会 以 Farsi 模式 运行, 比如 设置 'fkmap' 和 'rightleft' 选项.不然
.B Vim
会 显示 一条 错误信息 并 终止.
.TP
-g
如果
.B Vim
编译时 加入 GUI 支持, 会开启 GUI, 不然
.B Vim
会 显示 一条 错误信息 并 终止.
.TP
-h
.B Vim
显示 命令行 参数 和 选项的 帮助, 然后 终止.
.TP