Writing and Porting Exploit Code   213
Creating Shellcode in Go
In the previous section, you used raw shellcode in valid ELF format to over-
write a legitimate file with your malicious alternative. How might you gener-
ate that shellcode yourself? As it turns out, you can use your typical toolset 
to generate Go-friendly shellcode. 
We’ll show you how to do this with msfvenom, a command-line utility, but 
the integration techniques we’ll teach you aren’t tool-specific. You can use 
several methods to work with external binary data, be it shellcode or some-
thing else, and integrate it into your Go code. Rest assured that the following 
pages deal more with common data representations than anything specific 
to a tool. 
The Metasploit Framework, a popular exploitation and post-exploitation 
toolkit, ships with msfvenom, a tool that generates and transforms any of 
Metasploit’s available payloads to a variety of formats specified via the –f 
argument. Unfortunately, there is no explicit Go transform. However, 
you can integrate several formats into your Go code fairly easily with 
minor adjustments. We’ll explore five of these formats here: C, hex, num, 
raw, and Base64, while keeping in mind that our end goal is to create a 
byte slice in Go.
C Transform
If you specify a C transform type, msfvenom will produce the payload in a for-
mat that you can directly place into C code. This may seem like the logical 
first choice, since we detailed many of the similarities between C and Go 
earlier in this chapter. However, it’s not the best candidate for our Go code. 
To show you why, look at the following sample output in C format:
unsigned char buf[] = 
"\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0\x64\x8b\x50\x30"
"\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff"
--snip--
"\x64\x00";
We’re interested almost exclusively in the payload. To make it Go-friendly, 
you’ll have to remove the semicolon and alter the line breaks. This means you’ll 
either need to explicitly append each line by adding a + to the end of all 
lines except the last, or remove the line breaks altogether to produce one 
long, continuous string. For small payloads this may be acceptable, but for 
larger payloads this becomes tedious to do manually. You’ll find yourself 
likely turning to other Linux commands such as sed and tr to clean it up. 
Once you clean up the payload, you’ll have your payload as a string. To 
create a byte slice, you’d enter something like this:
 payload := []byte("\xfc\xe8\x82...").
It’s not a bad solution, but you can do better.
前沿信安资讯阵地  公众号：i nf osrc
214   Chapter 9
Hex Transform
Improving upon the previous attempt, let’s look at a hex transform. With 
this format, msfvenom produces a long, continuous string of hexadecimal 
characters:
fce8820000006089e531c0648b50308b520c8b52148b72280fb74a2631ff...6400
If this format looks familiar, it’s because you used it when porting the 
Java deserialization exploit. You passed this value as a string into a call to 
hex.DecodeString(). It returns a byte slice and error details, if present. You 
could use it like so:
payload, err := hex.DecodeString("fce8820000006089e531c0648b50308b520c8b52148b
72280fb74a2631ff...6400")
Translating this to Go is pretty simple. All you have to do is wrap your 
string in double quotes and pass it to the function. However, a large payload 
will produce a string that may not be aesthetically pleasing, wrapping lines 
or running beyond recommended page margins. You may still want to use 
this format, but we’ve provided a third alternative in the event that you want 
your code to be both functional and pretty.
Num Transform
A num transform produces a comma-separated list of bytes in numerical, 
hexadecimal format:
0xfc, 0xe8, 0x82, 0x00, 0x00, 0x00, 0x60, 0x89, 0xe5, 0x31, 0xc0, 0x64, 0x8b, 0x50, 0x30, 
0x8b, 0x52, 0x0c, 0x8b, 0x52, 0x14, 0x8b, 0x72, 0x28, 0x0f, 0xb7, 0x4a, 0x26, 0x31, 0xff, 
--snip--
0x64, 0x00
You can use this output in the direct initialization of a byte slice, like so:
payload := []byte{
    0xfc, 0xe8, 0x82, 0x00, 0x00, 0x00, 0x60, 0x89, 0xe5, 0x31, 0xc0, 0x64, 0x8b, 0x50, 0x30, 
    0x8b, 0x52, 0x0c, 0x8b, 0x52, 0x14, 0x8b, 0x72, 0x28, 0x0f, 0xb7, 0x4a, 0x26, 0x31, 0xff, 
    --snip--
    0x64, 0x00,
} 
Because the msfvenom output is comma-separated, the list of bytes can 
wrap nicely across lines without clumsily appending data sets. The only 
modification required is the addition of a single comma after the last element 
in the list. This output format is easily integrated into your Go code and 
formatted pleasantly.
前沿信安资讯阵地  公众号：i nf osrc
Writing and Porting Exploit Code   215
Raw Transform
A raw transform produces the payload in raw binary format. The data itself, 
if displayed on the terminal window, likely produces unprintable characters 
that look something like this:
`1dP0R
8u};}$uXX$fY ӋI:I41
You can’t use this data in your code unless you produce it in a differ-
ent format. So why, you may ask, are we even discussing raw binary data? 
Well, because it’s fairly common to encounter raw binary data, whether as a 
payload generated from a tool, the contents of a binary file, or crypto keys. 
Knowing how to recognize binary data and work it into your Go code will 
prove valuable. 
Using the xxd utility in Linux with the –i command line switch, you 
can easily transform your raw binary data into the num format of the previ-
ous section. A sample msfvenom command would look like this, where you 
pipe the raw binary output produced by msfvenom into the xxd command:
$ msfvenom -p [payload] [options] –f raw | xxd -i
You can assign the result directly to a byte slice as demonstrated in the 
previous section.
Base64 Encoding
Although msfvenom doesn’t include a pure Base64 encoder, it’s fairly common 
to encounter binary data, including shellcode, in Base64 format. Base64 
encoding extends the length of your data, but also allows you to avoid ugly 
or unusable raw binary data. This format is easier to work with in your code 
than num, for example, and can simplify data transmission over protocols 
such as HTTP. For that reason, it’s worth discussing its usage in Go. 
The easiest method to produce a Base64-encoded representation of 
binary data is to use the base64 utility in Linux. It allows you to encode or 
decode data via stdin or from a file. You could use msfvenom to produce raw 
binary data, and then encode the result by using the following command:
$ msfvenom -p [payload] [options] –f raw | base64
Much like your C output, the resulting payload contains line breaks 
that you’ll have to deal with before including it as a string in your code. 
You can use the tr utility in Linux to clean up the output, removing all 
line breaks: 
$ msfvenom -p [payload] [options] –f raw | base64 | tr –d "\n"
前沿信安资讯阵地  公众号：i nf osrc
216   Chapter 9
The encoded payload will now exist as a single, continuous string. In 
your Go code, you can then get the raw payload as a byte slice by decoding 
the string. You use the encoding/base64 package to get the job done:
payload, err := base64.StdEncoding.DecodeString("/OiCAAAAYInlMcBki1Awi...WFuZAA=")
You’ll now have the ability to work with the raw binary data without all 
the ugliness.
A Note on Assembly
A discussion of shellcode and low-level programming isn’t complete without 
at least mentioning assembly. Unfortunately for the shellcode composers 
and assembly artists, Go’s integration with assembly is limited. Unlike C, Go 
doesn’t support inline assembly. If you want to integrate assembly into your 
Go code, you can do that, sort of. You’ll have to essentially define a func-
tion prototype in Go with the assembly instructions in a separate file. You 
then run go build to compile, link, and build your final executable. While 
this may not seem overly daunting, the problem is the assembly language 
itself. Go supports only a variation of assembly based on the Plan 9 operat-
ing system. This system was created by Bell Labs and used in the late 20th 
century. The assembly syntax, including available instructions and opcodes, 
is almost nonexistent. This makes writing pure Plan 9 assembly a daunting, 
if not nearly impossible, task.
Summary
Despite lacking assembly usability, Go’s standard packages offer a tremen-
dous amount of functionality conducive to vulnerability hunters and exploit 
developers. This chapter covered fuzzing, porting exploits, and handling 
binary data and shellcode. As an additional learning exercise, we encourage 
you to explore the exploit database at https://www.exploit-db.com/ and try to 
port an existing exploit to Go. Depending on your comfort level with the 
source language, this task could seem overwhelming but it can be an excel-
lent opportunity to understand data manipulation, network communica-
tions, and low-level system interaction.
In the next chapter, we’ll step away from exploitation activities and 
focus on producing extendable toolsets.
前沿信安资讯阵地  公众号：i nf osrc
10
GO  PL U G IN S A N D 
E X T E N DA BL E T OOL S
Many security tools are constructed as 
frameworks—core components, built with a 
level of abstraction that allows you to easily 
extend their functionality. If you think about 
it, this makes a lot of sense for security practitioners. 
The industry is constantly changing; the community 
is always inventing new exploits and techniques to avoid detection, creat-
ing a highly dynamic and somewhat unpredictable landscape. However, 
by using plug-ins and extensions, tool developers can future-proof their 
products to a degree. By reusing their tools’ core components without 
making cumbersome rewrites, they can handle industry evolution grace-
fully through a pluggable system. 
This, coupled with massive community involvement, is arguably how 
the Metasploit Framework has managed to age so well. Hell, even commer-
cial enterprises like Tenable see the value in creating extendable products; 
Tenable relies on a plug-in-based system to perform signature checks within 
its Nessus vulnerability scanner.
前沿信安资讯阵地  公众号：i nf osrc
218   Chapter 10
In this chapter, you’ll create two vulnerability scanner extensions in 
Go. You’ll first do this by using the native Go plug-in system and explicitly 
compiling your code as a shared object. Then you’ll rebuild the same plug-
in by using an embedded Lua system, which predates the native Go plug-in 
system. Keep in mind that, unlike creating plug-ins in other languages, 
such as Java and Python, creating plug-ins in Go is a fairly new construct. 
Native support for plug-ins has existed only since Go version 1.8. Further, it 
wasn’t until Go version 1.10 that you could create these plug-ins as Windows 
dynamic link libraries (DLLs). Make sure you’re running the latest version 
of Go so that all the examples in this chapter work as planned.
Using Go’s Native Plug-in System
Prior to version 1.8 of Go, the language didn’t support plug-ins or dynamic 
runtime code extendibility. Whereas languages like Java allow you to load a 
class or JAR file when you execute your program to instantiate the imported 
types and call their functions, Go provided no such luxury. Although you 
could sometimes extend functionality through interface implementations 
and such, you couldn’t truly dynamically load and execute the code itself. 
Instead, you needed to properly include it during compile time. As an 
example, there was no way to replicate the Java functionality shown here, 
which dynamically loads a class from a file, instantiates the class, and calls 
someMethod() on the instance:
File file = new File("/path/to/classes/");
URL[] urls = new URL[]{file.toURL()};
ClassLoader cl = new URLClassLoader(urls);
Class clazz = cl.loadClass("com.example.MyClass");
clazz.getConstructor().newInstance().someMethod();
Luckily, the later versions of Go have the ability to mimic this function-
ality, allowing developers to compile code explicitly for use as a plug-in. 
Limitations exist, though. Specifically, prior to version 1.10, the plug-in 
system worked only on Linux, so you’d have to deploy your extendable 
framework on Linux. 
Go’s plug-ins are created as shared objects during the building process. 
To produce this shared object, you enter the following build command, 
which supplies plugin as the buildmode option:
$ go build -buildmode=plugin
Alternatively, to build a Windows DLL, use c-shared as the buildmode option:
$ go build -buildmode=c-shared
To build a Windows DLL, your program must meet certain conventions 
to export your functions and also must import the C library. We’ll let you 
explore these details on your own. Throughout this chapter, we’ll focus 
前沿信安资讯阵地  公众号：i nf osrc
Go Plugins and Extendable Tools   219
almost exclusively on the Linux plug-in variant, since we’ll demonstrate how 
to load and use DLLs in Chapter 12.
After you’ve compiled to a DLL or shared object, a separate program 
can load and use the plug-in at runtime. Any of the exported functions 
will be accessible. To interact with the exported features of a shared object, 
you’ll use Go’s plugin package. The functionality in the package is straight-
forward. To use a plug-in, follow these steps:
1. Call plugin.Open(filename string) to open a shared object file, creating a 
*plugin.Plugin instance.
2. On the *plugin.Plugin instance, call Lookup(symbolName string) to retrieve 
a Symbol (that is, an exported variable or function) by name.
3. Use a type assertion to convert the generic Symbol to the type expected 
by your program.
4. Use the resulting converted object as desired.
You may have noticed that the call to Lookup() requires the consumer 
to supply a symbol name. This means that the consumer must have a pre-
defined, and hopefully publicized, naming scheme. Think of it as almost 
a defined API or generic interface to which plug-ins will be expected to 
adhere. Without a standard naming scheme, new plug-ins would require 
you to make changes to the consumer code, defeating the entire purpose 
of a plug-in-based system.
In the examples that follow, you should expect plug-ins to define an 
exported function named New() that returns a specific interface type. That 
way, you’ll be able to standardize the bootstrapping process. Getting a 
handle back to an interface allows us to call functions on the object in 
a predictable way. 
Now let’s start creating your pluggable vulnerability scanner. Each plug-
in will implement its own signature-checking logic. Your main scanner code 
will bootstrap the process by reading your plug-ins from a single directory 
on your filesystem. To make this all work, you’ll have two separate reposi-
tories: one for your plug-ins and one for the main program that consumes 
the plug-ins. 
Creating the Main Program
Let’s start with your main program, to which you’ll attach your plug-ins. 
This will help you understand the process of authoring your plug-ins. Set 
up your repository’s directory structure so it matches the one shown here:
$ tree
.
--- cmd
    --- scanner
        --- main.go
--- plugins
--- scanner
    --- scanner.go
前沿信安资讯阵地  公众号：i nf osrc
220   Chapter 10
The file called cmd/scanner/main.go is your command line utility. It will 
load the plug-ins and initiate a scan. The plugins directory will contain all 
the shared objects that you’ll load dynamically to call various vulnerability 
signature checks. You’ll use the file called scanner/scanner.go to define the 
data types your plug-ins and main scanner will use. You put this data into its 
own package to make it a little bit easier to use. 
Listing 10-1 shows what your scanner.go file looks like. (All the code list-
ings at the root location of / exist under the provided github repo https://
github.com/blackhat-go/bhg/.)
package scanner
// Scanner defines an interface to which all checks adhere
u type Checker interface {
    v Check(host string, port uint64) *Result
}
// Result defines the outcome of a check
w type Result struct {
    Vulnerable bool
    Details    string
}
Listing 10-1: Defining core scanner types (/ch-10/plugin-core/scanner/scanner.go)
In this package, named scanner, you define two types. The first is an 
interface called Checker u. The interface defines a single method named 
Check() v, which accepts a host and port value and returns a pointer to a 
Result. Your Result type is defined as a struct w. Its purpose is to track the 
outcome of the check. Is the service vulnerable? What details are pertinent 
in documenting, validating, or exploiting the flaw?
You’ll treat the interface as a contract or blueprint of sorts; a plug-in 
is free to implement the Check() function however it chooses, so long as it 
returns a pointer to a Result. The logic of the plug-in’s implementation will 
vary based on each plug-in’s vulnerability-checking logic. For instance, a 
plug-in checking for a Java deserialization issue can implement the proper 
HTTP calls, whereas a plug-in checking for default SSH credentials can 
issue a password-guessing attack against the SSH service. The power of 
abstraction!
Next, let’s review cmd/scanner/main.go, which will consume your plug-ins 
(Listing 10-2).
const PluginsDir = "../../plugins/" u
func main() {
    var (
        files []os.FileInfo
        err   error
        p     *plugin.Plugin
        n     plugin.Symbol
        check scanner.Checker
前沿信安资讯阵地  公众号：i nf osrc
Go Plugins and Extendable Tools   221
        res   *scanner.Result
    )   
    if files, err = ioutil.ReadDir(PluginsDir)v; err != nil {
        log.Fatalln(err)
    }   
    for idx := range files { w
        fmt.Println("Found plugin: " + files[idx].Name())
        if p, err = plugin.Open(PluginsDir + "/" + files[idx].Name())x; err != nil {
            log.Fatalln(err)
        }
        if n, err = p.Lookup("New")y; err != nil {
            log.Fatalln(err)
        }
        newFunc, ok := n.(func() scanner.Checker) z
        if !ok {
            log.Fatalln("Plugin entry point is no good. Expecting: func New() scanner.Checker{ ... }")
        }