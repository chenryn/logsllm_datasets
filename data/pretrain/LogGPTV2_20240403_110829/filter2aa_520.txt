所有操作均在授权项目中进行。
一天下午好兄弟发来一个 ueditor 环境存在.net 任意文件上传一起看下，存在创某盾 waf。
0x01
把所有常用办法都测试例如 uri 填充、post 填充、大并发、参数混淆、参数 fuzz 等等都测试
过后均失败。
后 fuzz 其他扩展名发现 cer、asmx、shtml 可以上传其他 ashx 什么的拦截。
其中 cer 创某盾禁止访问。asmx 文件试了很多个文件访问均 500 报错，谷歌后似乎是因为
要.net4.6 以上才默认支持 asmx，不知道与 iis10 版本有没有关系。
尝试 shtml exec 执行命令提示。
包含文件报错，谷歌说原因是读取的路径或者文件中含有中文，此处暂时放下。
打印环境变量成功由此知道了目标中间件是 iis10 和其它信息。
到这里思路又卡住了，花了很多时间回去继续 fuzz 参数等等。
0x02
没招了，找分析文章看这个漏洞的原理。发现大部分文章都是抄 Ivan1ee 的文章，并没讲的
很清楚，只是复现下在讲下大概原理就没了。于是下载了.net 版源码，跟流程。
/net/controller.ashx
这里实例化 CrawlerHandler 类，跟进这个类。
/net/App_Code/CrawlerHandler.cs
第一红色箭头判断了传入 url 访问后 response 头有无图片头，这里如果我们把我们的站点所
有请求均加入图片头，直接传入 aspx 一样可以下载原 poc:1.jpg?.aspx 只是用图片马方便绕
过图片头判断。
第二红色箭头是漏洞代码所在，由其处理最关键的 path，其他抄文章的到这里就是一句话
说这个函数存在漏洞就没了。为了搞清楚究竟路径是如何处理的跟进该函数。
/net/App_Code/PathFormater.cs
这里两个红色箭头处才是漏洞根源，invalidPattern.Replace 通过正则去除了路径中的部分特
殊字符，将匹配的字符置空。这里可以看到正则内共有[\\\/\:\*\?\042\\|]这么多字符，都
可以置空。
第二个箭头到了 extention 处就是指定文件扩展名的，GetExtension()这个函数是自带函数用
于获取最后的扩展名。
以原 poc 为例子：漏洞原理为 1.jpg?.aspx 到了 invalidPattern.Replace 处通过正则替换后成
为 1.jpg.aspx 后经过 GetExtension()得到扩展名 aspx 最后 return 处理后的路径及扩展名。
经上面得知正则支持很多替换，马上去试了结果还是拦截掉了。
根据这个正则又 fuzz 了下还是拦截。这时候快十二点了，暂时又没了思路。再看看代码什
么的，又花了半个多小时。之后突然想到既然 PathFormater 可以帮忙把特殊符号置空，自
己直接通过特殊符号拼接 aspx 关键字不就能绕过了，再去操作下。
构造 poc，已经成功。用这个思路还有类似的 poc 可以绕过这里不再贴图。
0x03 绕过
测试时猜测 waf 后端的规则的粒度应该控制到具体漏洞级别了，针对不同漏洞有不同的规
则。如把 uri 中的 action 删除就不会拦截，这时候应该规则就匹配不到 ue 这个漏洞规则所
以不会拦截。
优点：细粒度的规则最大程度避免了对生产业务的干扰。
缺点：针对不同漏洞需要花很多精力根据漏洞代码做细致规则，否则可能就像 ue 通过源码
中的代码逻辑构造不常见的利用方式就可完成绕过。
总结：从代码里面构造新的 poc 是一种快捷的思路。
0x04 防御
针对正则表达式处增加对应的规则修补。
Ref:
https://forums.iis.net/t/1241946.aspx?Setting+up+IIS+10+for+ASMX+service
https://www.freebuf.com/vuls/181814.html