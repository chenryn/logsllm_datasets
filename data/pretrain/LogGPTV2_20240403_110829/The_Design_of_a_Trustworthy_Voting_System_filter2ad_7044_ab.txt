(although violations will hurt other voting system properties 
including  privacy  and  robustness).  To  ensure  this  property, 
our  voting  system  uses  human-verifiable  paper  ballots  and 
human-verifiable  paper  receipts  that  can  easily  be  checked 
after casting a vote. 
     In our scheme, software on the voting machine is verified 
by computing its hash and then comparing it to the published 
hash of the open-source code. To perform attestation, we use 
a new instruction in x86 chips and a hardware device called a 
Trusted Platform Module (TPM) that is already part of many 
modern  PCs.  Although  our  design  uses  x86  chips, 
specifically AMD x86 chips, Intel has similar functionality in 
newer chips that could be used [19]. 
     In  AMD  processors  that  support TPM  version  1.2  chips, 
there is an x86 instruction called skinit that cryptographically 
hashes the contents of 64-KB of memory [1]. This instruction 
disables  paging  and  interrupts,  disables  DMA  to  the  64-KB 
memory region, verifies that all cores are disabled but the one 
running skinit, runs a hash on the 64-KB of memory, stores 
the  hash  in  a  specific  TPM  register,  and  then  executes  the 
code stored in the 64-KB of memory. Later, a challenger can 
ask the operating system for a cryptographically signed copy 
of the TPM register containing the hash of the 64-KB code. A 
certificate for the corresponding public key can be provided 
so  anyone  can  verify  the  hash  of  the  code.  Since  only  the 
TPM  has  the  private  key,  if  the  signed  hash  of  the  64-KB 
memory  is  correct,  the  64-KB  program,  which  we  will  call 
the checker, must have been correct. 
     We  use  the  checker  to  verify  the  entire  voting  machine 
software.  The  checker  hashes  all  of  memory  (including  the 
operating  system),  any  data  that  could  affect  the  machine's 
operation  (e.g.,  ACPI  tables  and  the  BIOS  system  manage-
ment code [22]), plus the main BIOS, CD-ROM BIOS, and 
any other BIOSes present. It also keeps interrupts and DMA 
disabled, so that the attested code never loses control. Once 
the  code  is  verified,  it  always  remains  valid  and  in  control 
(the machine is not on any network). Once you can be sure 
that  the  running  software  is  identical  to  the  published 
software, the rest is manageable. 
     In four different parts of our voting system design, we use 
the TPM to attest that the checker is correct. If the checker is 
correct and it produces a valid measurement of the rest of the 
1
Send Nonce
2a
invoke skinit
• Disable DMA
• Turn off Interrupts
• Execute on one core only
• Ignore breakpoints
PDA
Voter
Machine with TPM
Sign (PCR 17, PCR r, Nonce)
3
2c
Execute
2b
Hash(code)
0x9020000
…
code
0
64 KB of code 
measures 
machine’s 
software:
PCR r = 
Hash(software)
s
e
t
u
c
e
x
e
t
i
n
k
s
i
c
2
d
n
a
b
2
s
p
e
t
S
Step 1: Begin attestation by sending nonce.
Step 2a: Invoke skinit for atomic execution.
Step 2b: Measure (attest) the hashing code into PCR 17.
Step 2c: Execute the code to checksum the machine’s software and store in PCR r.
Step 3: Send the signed result of the 64 KB code (in PCR 17), the nonce, and the machine’s software checksum (PCR r).
PCR 17 = 
Hash(code)
Fig. 1. Code verification using skinit. Steps 2b and 2c are executed atomically by the skinit instruction. 
509
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:11:35 UTC from IEEE Xplore.  Restrictions apply. 
voting  machine  software,  then  we  can  conclude  that  the 
machine is running the published software under our previous 
assumptions.  If  attestation  fails,  then  a  different  device 
should be used to  make sure that the  failure is not  with  the 
device issuing the attestation challenge. 
     To begin attestation, the algorithm accepts a random value 
(a nonce) as input as shown in Fig. 1 (Step 1). It then disables 
interrupts  and  DMA  to  the  memory  containing  the  checker 
just before it executes skinit (Step 2a), computes and stores 
a  hash  of  the  checker  program  in  TPM  Platform  Configu-
ration  Register  (PCR)  17  (Step  2b),  and  then  executes  the 
checker. Before the checker exits, it writes its result (the hash 
of  all  of  memory,  code,  and  relevant  data)  into  a  different 
PCR  register,  r  (Step  2c).  After  skinit  has  finished,  the 
machine  returns  the  TPM  signature  of  {PCR  r,  PCR  17, 
nonce} (Step 3). 
     From using the TPM to store keys and to help with attes-
tation, the TPM is now a primary target for attack. While the 
keys  reside  in  a  TPM,  the  manufacturer  of  the  hardware 
could act maliciously. Even without malicious intent, buggy 
hardware  may  yield  to  compromise.  Although  we  can  have 
independent authorities check the hardware for specification 
conformance, an examiner  may  miss a bug or vulnerability. 
Due to the possibility of bugs, no solution should place all of 
its trust in the hardware. We provide voter-verifiable receipts 
and voter-verifiable ballots to protect against both malicious 
and  non-malicious  hardware  issues  and  use  the  electronic 
count  for  quick  results.  Any  discrepancies  of  count  are  re-
solved in favor of the paper ballots. 
  machines (per precinct) 
Step 1: Precinct Master Key Generation and Distribution.
Like  other  voting  schemes,  multiple  keys  are  needed  in  the 
election.  Computational  load  is  not  an  issue  (a  voting 
machine can easily handle 600 voters in 15 hours), so public-
key cryptography (e.g., RSA) will be used due to its simpler 
key management. 
     We use three keys to encrypt and sign voting data. 
Keypair 1. Encrypts/Decrypts files on voting and poll worker 
Keypair 2. Ballot-signing keypair (per voter) 
Keypair 3. Software attestation signing keypair (per 
A single key pair (keypair 1) is needed per precinct (typically 
a  school  or  firehouse  with  perhaps  a  dozen  identical  voting 
machines)  to  lock/unlock  files  on  the  voting  machines  and 
also  on  the  poll  workers'  machines.  The  encryption  of  the 
relevant  election  files  on  all  the  precinct  machines  ensures 
their data confidentiality up to the start of the election. If this 
private  key  is  compromised, the  voter  authentication  tokens 
are in jeopardy (the password hash, see below). 
     For the other two keys, we can use each machine's TPM to 
generate new keys for each voter. Each ballot is signed by a 
attestation) 
unique.  freshly  TPM-generated  key  (keypair  2).  Another 
TPM-generated  signing  key  is  generated  for  each  voter-
initiated  request  to  attest  the  software  (keypair  3).  Both 
signing  keys  are  signed  with  a  freshly  generated  TPM  key, 
called a TPM attestation identity key (AIK), that shows that 
the  TPM  is  managing  the  private  keys  in  keypair  2  and 
keypair 3; we use the machine's single endorsement key (the 
most  trusted  key  in  the  TPM)  to  sign  each  TPM  attestation 
identity  key  to  show  that  it  is  a  valid  AIK.  Each  AIK  and 
single  endorsement  key  (EK)  never  leave  the  TPM  and  are 
not part of the three listed keypairs. 
     The  EK  is  the  foundation  of  trust  in  a  TPM.  For  each 
machine’s  EK,  a  certificate  is  provided  to  show  its  authen-
ticity. In addition to the EK certificate, a platform certificate 
(signed by an independent third party) can be used to show 
the machine and TPM’s conformance to specifications. Using 
the  EK  and  AIK,  the  group  can  then  verify  the  software  of 
the machine before using it to generate keys. 
     Individuals  can  inspect  a  machine’s  endorsement  key 
(EK)  certificate  (from  the  TPM  manufacturer,  or  alterna-
tively,  regenerated  at  this  event)  to  verify  a  machine  has  a 
legitimate TPM. An EK can be issued to the TPM in one of 
two ways: by generating the EK inside the TPM or injecting 
the key from outside of the TPM. We advocate the creation 
on the inside to take away the possibility that someone could 
get the key before it is injected. Thus, in order to compromise 
the  EK,  collusion  with  the  vendor  or  a  compromise  of  the 
trusted hardware is needed. This assumes that people trust the 
certificate authorities and certification processes, and reliable 
certification processes are in place. 
     The TPM-created keys do not need distribution (keypair 2 
and keypair 3), but the keys that are used to decrypt the data 
on the voting and poll worker machines (keypair 1) do need 
distribution,  because  the  decryption  key  will  be  distributed 
later.  For  California’s  approximately  25,000  precincts, 
25,000  key  pairs  must  be  pregenerated,  stored,  and  distrib-
uted. We are distributing a keypair per precinct (not per ma-
chine) and taking advantage of the TPM’s already established 
PKI  for  signing.  Other  alternatives  include  having  one  key 
per county or perhaps one key per state. We felt that having 
one key per precinct presented the best balance between key 
management and the impact of a key compromise. At worst, 
a  precinct  key’s  compromise  will  only  affect  the  voters  for 
that specific precinct. 
     These 25,000 precinct keys are generated as follows. The 
Secretary  of  State  chooses  a  particular  brand  and  model  of 
computer to use (e.g., by competitive bidding) that supports a 
TPM chip. On a designated day months before the election, 
he or she invites all the political parties and the  media to  a 
public key generation event. Each party may send one party 
officer and one technical expert chosen by the party. 
     After  attestation  by  all  the  technical  experts  present,  the 
precinct keys (one pair per precinct) can be generated outside 
of  the  TPM  by  the  now-verified  trusted  software.  The  new 
510
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:11:35 UTC from IEEE Xplore.  Restrictions apply. 
public  keys  are  signed  and  stored  on  a  notebook  computer. 
Because  the  machine’s  integrity  has  just  been  checked,  the 
keys  are  trusted.  The  private  keys  are  split  using  any  well-
vetted  secret-sharing  scheme.  A  fault  tolerant  scheme  will 
likely be needed in the case of someone losing her or her key 
part, but such schemes are well known. 
     Each part of each key’s secret is written onto some tangi-
ble medium such as a contactful smart card (so there are no 
radio  signals  to  intercept).  Smart  card  reader/writers  are 
available with RS-232C serial line interfaces, which have ex-
tremely simple device drivers (unlike USB drivers, which are 
much  more  complex)  enabling  easier  code  verification.  The 
PC can have a PCI board with a dozen serial lines so many 
smart  cards  can  be  written  in  parallel.  If  need  be,  multiple 
PCs can be used in a similar way so all the smart cards can be 
produced in one day, while the political parties’ technical ex-
perts watch the PCs and each other like hawks. 
     For the moment, assume each private key is divided into 
just  two  parts,  A  and  B.  When  all  the  smart  cards  for  a 
particular county have been finished, the A parts are put into 
a briefcase and locked and handed to the county’s registrar of 
voters  and  taken  back  to  his  county.  The  B  parts  are put  in 
another locked briefcase and given to the county sheriff and 
taken back to the county separately. They are locked in sepa-
rate safes in different buildings until the election. For extreme 
paranoia,  the  keys  could  be  split  into,  say,  four  parts  each, 
with  the  two  leading  political  parties  in  each  county  each 
getting pieces. The key cannot be assembled before election 
day  since  the  various  parts  are  being  held  by  independent 
(and potentially hostile) parties. This scheme tacitly assumes 
that no part of any key is lost during this process, and at least 
one  private  key  holder  does  not  collude.  However,  other 
types  of  (fault-tolerant)  threshold  schemes  could  be  used  in 
practice. 
Step  2:  Voter  Registration.  Once  all  the  keys  have  been 
distributed,  voter  registration  can  begin  (Fig.  2  shows  a  voter 
registration record). If the keys are reused, then the voter does 