2.5.2 循环
C#提供了4种不同的循环机制（for、while、do...while和foreach），在满足某个条件
之前，可以重复执行代码块。
1. for循环
C#的for循环提供的迭代循环机制是在执行下一次迭代前，测试是否满足某个条件，
其语法如下：
    for (initializer
; condition
; iterator
):
      statement(s)
其中：
● initializer是指在执行第一次循环前要计算的表达式（通常把一个局部变量初始化为
循环计数器）。
● condition是在每次循环的新迭代之前要测试的表达式（它必须等于true，才能执行
下一次迭代）。
● iterator是每次迭代完要计算的表达式（通常是递增循环计数器）。
当condition等于false时，迭代停止。
for循环是所谓的预测试循环，因为循环条件是在执行循环语句前计算的，如果循环
条件为假，循环语句就根本不会执行。
for循环非常适合用于一个语句或语句块重复执行预定的次数。下面的例子就是for循
环的典型用法，这段代码输出0～99的整数：
    for (int i = 0; i < 100; i = i + 1)
    {
      WriteLine(i);
    }
这里声明了一个int类型的变量i，并把它初始化为0，用作循环计数器。接着测试它是
否小于100。因为这个条件等于true，所以执行循环中的代码，显示值0。然后给该计数器
加1，再次执行该过程。当i等于100时，循环停止。
实际上，上述编写循环的方式并不常用。C#在给变量加1时有一种简化方式，即不使
用i = i+1，而简写为i++：
    for (int i = 0; i < 100; i++)
    {
      // etc.
    }
也可以在上面的例子中给循环变量i使用类型推断。使用类型推断时，循环结构变
成：
    for (var i = 0; i < 100; i++)
    {
      // etc.
    }
嵌套的for循环非常常见，在每次迭代外部循环时，内部循环都要彻底执行完毕。这
种模式通常用于在矩形多维数组中遍历每个元素。最外部的循环遍历每一行，内部的循环
遍历某行上的每个列。下面的代码显示数字行，它还使用另一个Console方法
Console.Write（），该方法的作用与Console.WriteLine（）相同，但不在输出中添加回车
换行符（代码文件ForLoop/Program.cs）：
    using static System.Console;
    namespace Wrox
    {
      class Program
      {
        static void Main()
        {
        // This loop iterates through rows
        for (int i = 0; i < 100; i+=10)
        {
          // This loop iterates through columns
          for (int j = i; j < i + 10; j++)
          {
            Write($"  {j}");
          }
          WriteLine();
        }
        }
      }
    }
尽管j是一个整数，但它会自动转换为字符串，以便进行连接。
上述例子的结果是：
      0  1  2  3  4  5  6  7  8  9
      10  11  12  13  14  15  16  17  18  19
      20  21  22  23  24  25  26  27  28  29
      30  31  32  33  34  35  36  37  38  39
      40  41  42  43  44  45  46  47  48  49
      50  51  52  53  54  55  56  57  58  59
      60  61  62  63  64  65  66  67  68  69
      70  71  72  73  74  75  76  77  78  79
      80  81  82  83  84  85  86  87  88  89
      90  91  92  93  94  95  96  97  98  99
尽管在技术上，可以在for循环的测试条件中计算其他变量，而不计算计数器变量，
但这不太常见。也可以在for循环中忽略一个表达式（甚至所有表达式）。但此时，要考
虑使用while循环。
2. while循环
与for循环一样，while也是一个预测试循环。其语法是类似的，但while循环只有一个
表达式：
    while(condition)
      statement(s);
与for循环不同的是，while循环最常用于以下情况：在循环开始前，不知道重复执行
一个语句或语句块的次数。通常，在某次迭代中，while循环体中的语句把布尔标志设置
为false，结束循环，如下面的例子所示：
    bool condition = false;
    while (! condition)
    {
      // This loop spins until the condition is true.
      DoSomeWork();
      condition = CheckCondition();  // assume CheckCondition() returns a bool
    }
3. do…while循环
do...while循环是while循环的后测试版本。这意味着该循环的测试条件要在执行完循
环体之后评估。因此do...while循环适用于循环体至少执行一次的情况：
    bool condition;
    do
    {
      // This loop will at least execute once, even if Condition is false.
      MustBeCalledAtLeastOnce();
      condition = CheckCondition();
    } while (condition);
4. foreach循环
foreach循环可以迭代集合中的每一项。现在不必考虑集合的准确概念（第11章将详细
介绍集合），只需要知道集合是一种包含一系列对象的对象即可。从技术上看，要使用集
合对象，就必须支持IEnumerable接口。集合的例子有C#数组、System.Collection名称空间
中的集合类，以及用户定义的集合类。从下面的代码中可以了解foreach循环的语法，其中
假定arrayOfInts是一个int类型数组：
    foreach (int temp in arrayOfInts)
    {
      WriteLine(temp);
    }
其中，foreach循环每次迭代数组中的一个元素。它把每个元素的值放在int类型的变
量temp中，然后执行一次循环迭代。
这里也可以使用类型推断。此时，foreach循环变成：
    foreach (var temp in arrayOfInts)
    {
      // etc.
    }
temp的类型推断为int，因为这是集合项的类型。
注意，foreach循环不能改变集合中各项（上面的temp）的值，所以下面的代码不会编
译：
    foreach (int temp in arrayOfInts)
    {
      temp++;
      WriteLine(temp);
    }
如果需要迭代集合中的各项，并改变它们的值，应使用for循环。
2.5.3 跳转语句
C#提供了许多可以立即跳转到程序中另一行代码的语句，在此，先介绍goto语句。
1. goto语句
goto语句可以直接跳转到程序中用标签指定的另一行（标签是一个标识符，后跟一个
冒号）：
    goto Label1;
      WriteLine("This won't be executed");
    Label1:
      WriteLine("Continuing execution from here");
goto语句有两个限制。不能跳转到像for循环这样的代码块中，也不能跳出类的范围；
不能退出try...catch块后面的finally块（第14章将介绍如何用try...catch...finally块处理异
常）。
goto语句的名声不太好，在大多数情况下不允许使用它。一般情况下，使用它肯定不
是面向对象编程的好方式。
2. break语句
前面简要提到过break语句——在switch语句中使用它退出某个case语句。实际上，
break语句也可以用于退出for、foreach、while或do...while循环，该语句会使控制流执行循
环后面的语句。
如果该语句放在嵌套的循环中，就执行最内部循环后面的语句。如果break放在switch
语句或循环外部，就会产生编译错误。
3. continue语句
continue语句类似于break语句，也必须在for、foreach、while或do...while循环中使
用。但它只退出循环的当前迭代，开始执行循环的下一次迭代，而不是退出循环。
4. return语句
return语句用于退出类的方法，把控制权返回方法的调用者。如果方法有返回类型，
return语句必须返回这个类型的值；如果方法返回void，应使用没有表达式的return语句。
2.6 枚举
枚举是用户定义的整数类型。在声明一个枚举时，要指定该枚举的实例可以包含的一
组可接受的值。不仅如此，还可以给值指定易于记忆的名称。如果在代码的某个地方，要
试图把一个不在可接受范围内的值赋予枚举的一个实例，编译器就会报告错误。
从长远来看，创建枚举可以节省大量时间，减少许多麻烦。使用枚举比使用无格式的
整数至少有如下3个优势：
● 
如上所述，枚举可以使代码更易于维护，有助于确保给变量指定合法的、期望的
值。
● 枚举使代码更清晰，允许用描述性的名称表示整数值，而不是用含义模糊、变化多
端的数来表示。
● 枚举也使代码更易于输入。在给枚举类型的实例赋值时，Visual Studio 2015会通过
IntelliSense弹出一个包含可接受值的列表框，减少了按键次数，并能够让我们回
忆起可选的值。
可以定义如下的枚举：
    public enum TimeOfDay
    {
      Morning = 0,
      Afternoon = 1,
      Evening = 2
    }
本例在枚举中使用一个整数值，来表示一天的每个阶段。现在可以把这些值作为枚举
的成员来访问。例如，TimeOfDay.Morning返回数字0。使用这个枚举一般是把合适的值
传送给方法，并在switch语句中迭代可能的值（代码文件
EnumerationSample/Program.cs）。
    class Program
    {
      static void Main()
      {
        WriteGreeting(TimeOfDay.Morning);
      }
      static void WriteGreeting(TimeOfDay timeOfDay)
      {
        switch(timeOfDay)
        {
        case TimeOfDay.Morning:
          WriteLine("Good morning! ");
          break;
        case TimeOfDay.Afternoon:
          WriteLine("Good afternoon! ");
          break;
        case TimeOfDay.Evening:
          WriteLine("Good evening! ");
          break;
        default:
          WriteLine("Hello! ");
          break;
        }
      }
    }
在C#中，枚举的真正强大之处是它们在后台会实例化为派生自基类System.Enum的结
构。这表示可以对它们调用方法，执行有用的任务。注意因为.NET 
Framework的实现方
式，在语法上把枚举当成结构不会造成性能损失。实际上，一旦代码编译好，枚举就成为
基本类型，与int和float类似。
可以检索枚举的字符串表示，例如，使用前面的TimeOfDay枚举：
    TimeOfDay time = TimeOfDay.Afternoon;
    WriteLine(time.ToString());
会返回字符串Afternoon。
另外，还可以从字符串中获取枚举值：
    TimeOfDay time2 = (TimeOfDay) Enum.Parse(typeof(TimeOfDay), "afternoon", true
);
    WriteLine((int)time2);
这段代码说明了如何从字符串中获取枚举值，并将其转换为整数。要从字符串转换，
需要使用静态的Enum.Parse（）方法，这个方法有3个参数。第1个参数是要使用的枚举类
型，其语法是关键字typeof后跟放在括号中的枚举类名。typeof运算符将在第8章详细论
述。第2个参数是要转换的字符串。第3个参数是一个bool，指定在进行转换时是否忽略大
小写。最后，注意Enum.Parse（）方法实际上返回一个对象引用——我们需要把这个字符
串显式转换为需要的枚举类型（这是一个拆箱操作的例子）。对于上面的代码，将返回
1，作为一个对象，对应于TimeOfDay.Afternoon的枚举值。在显式转换为int时，会再次生
成1。
System.Enum上的其他方法可以返回枚举定义中值的个数或列出值的名称等。详细信
息参见MSDN文档。
2.7 名称空间
如前所述，名称空间提供了一种组织相关类和其他类型的方式。与文件或组件不同，
名称空间是一种逻辑组合，而不是物理组合。在C#文件中定义类时，可以把它包括在名
称空间定义中。以后，在定义另一个类（在另一个文件中执行相关操作）时，就可以在同
一个名称空间中包含它，创建一个逻辑组合，该组合告诉使用类的其他开发人员：这两个
类是如何相关的以及如何使用它们：
    using System;
    namespace CustomerPhoneBookApp
    {
      public struct Subscriber
      {
        // Code for struct here..
      }
    }
把一个类型放在名称空间中，可以有效地给这个类型指定一个较长的名称，该名称包
括类型的名称空间，名称之间用句点（.）隔开，最后是类名。在上面的例子中，
Subscriber结构的全名是CustomerPhoneBookApp.Subscriber。这样，有相同短名的不同类
就可以在同一个程序中使用了。全名常常称为完全限定的名称。
也可以在名称空间中嵌套其他名称空间，为类型创建层次结构：
    namespace Wrox
    {
      namespace ProCSharp
      {
        namespace Basics
        {
        class NamespaceExample
        {
          // Code for the class here..
        }
        }
      }
    }
每个名称空间名都由它所在名称空间的名称组成，这些名称用句点分隔开，开头是最
外层的名称空间，最后是它自己的短名。所以ProCSharp名称空间的全名是
Wrox.ProCSharp, 
NamespaceExample类的全名是
Wrox.ProCSharp.Basics.NamespaceExample。
使用这个语法也可以在自己的名称空间定义中组织名称空间，所以上面的代码也可以
写为：
    namespace Wrox.ProCSharp.Basics
    {
      class NamespaceExample
      {
        // Code for the class here..
      }
    }
注意不允许声明嵌套在另一个名称空间中的多部分名称空间。
名称空间与程序集无关。同一个程序集中可以有不同的名称空间，也可以在不同的程
序集中定义同一个名称空间中的类型。
应在开始一个项目之前就计划定义名称空间的层次结构。一般可接受的格式是
CompanyName.ProjectName.SystemSection。所以在上面的例子中，Wrox是公司名，
ProCSharp是项目，对于本章，Basics是部分名。
2.7.1 using语句
显然，名称空间相当长，输入起来很繁琐，用这种方式指定某个类也不总是必要的。
如本章开头所述，C#允许简写类的全名。为此，要在文件的顶部列出类的名称空间，前
面加上using关键字。在文件的其他地方，就可以使用其类型名称来引用名称空间中的类