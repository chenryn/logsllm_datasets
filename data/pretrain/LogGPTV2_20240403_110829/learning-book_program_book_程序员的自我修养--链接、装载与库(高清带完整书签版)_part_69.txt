( (8) ->_f1ag & (_IOMYBUF1_IONBF1_IOYOURBUF1)
事实上anybuf并不是函数，而是一个宏，它仅检查这个FILE结构的_flag变量里有没
有前面提到的3个标志位的任意一个，如果这3个标志位在_flag中存在任意一个，就说明
这个文件使用了缓冲。
这一段代码对streambufsize变量进行了赋值，如果文件自已有buffer，那么streambufsize
就等于这个buffer的大小：如果文件没有使用buffer，那么fread_nolock_s就会使用一个内
部的 buffer，这个buffer 的大小周定为_INTERNAL_BUFSIZ，即 4096字节。接下来
fread_nolock_s是一个循环：
while (count != 0) {
read data
decrease count
循环体内的操作用伪代码表示，大致的意思是：每一次循环都从文件中读取一部分数据，
并且相应地减少count（还记得吗，count代表还没有读取的字节数），当读取数据时，根据
文件是否使用buffer及读取数据的多少分为3种情况，下面我们一一来看：
if (anybuf (stream) && stream->_cnt 1= 0)
nbytes  (count _cnt) ? count 1 strean->_cnt 
memcpy_s(data, dataSize, stream->_ptr, nbytes) ;
count -= nbyte8
stream->_cnt -= nbytes}
程序员的自我修养——链接、装载与库
---
## Page 397
374
第11章运行库
stream->_ptr += nbytes;
dataSize -- nbytes;
data += nbytes;
在if的判断句中，anybuf判断文件是否有缓冲，面 stream->_cnt=0 判断缓冲是否为空。
因此当且仅当文件有缓冲且不为空时，这段代码才会执行。
让我们一行一行地来看这段代码的作用。nbytes代表这次要从缓冲中读取多少字节，在
这里，nbytes 等于还须要读取的字节数（count）与缓冲剩余的字节数（stream->_cnt）中较
小的一个。
接下来的一行使用memcpy_s将文件 stream里_pr所指向的缓冲内容复制到data指向的
位置，如图11-13所示。
bufsc
burlsi
Sala
图11-13文件缓冲区操作
程序员的自我修养一链接、装载与库
---
## Page 398
11.5fread实现
375
接下来的5行，皆是按照图11-13修正FILE结构和局部变量的各种数据。
memcpy_s 是memcpy 的安全版本，相对于原始的 memcpy 版本，memcpy_s 接受
一个额外的参数记录输出缓冲区的大小，以防止越界，其余的功能和memcpy相同。
以上代码处理了文件缓冲不为空的情况，面如果缓冲为空，那么又分为两种情况：
（1）需要读取的数据大于缓冲的尺寸。
（2）需要读取的数据不大于缓冲的尺寸。
对于情况（1），fread将试图一次性读取尽可能多的整数个缓冲的数据直接进入输出的
数组中，如果缓冲尺寸为0，则直接将剩下的数据一次性读取。代码如下：
else if (count >= bufsize) (
1(azisgnq 8 qumoo - qunoo) (paubtsun) 2 aztsgnq ) s saqAqu
nread = _read (_fileno (stream) , data, nbytes) :
(unsigned) count 1:
if (nread = 0) {
strean->_f1ag 1= _IOE0F;
return (total - count) / size}
else if (nread == (unsigned) -1) (
stream->_f1ag 1= _I0ERR;
return (total - count) / size;
count -= nread;
data += nread;
在代码中，_read函数用于真正从文件读取数据。在这里我们先不管这个函数，在稍后
的内容中会对此函数进行详细的介绍。如果要读取的数据不大于缓冲的尺寸，那么仅需要重
新填充缓冲即可：
else(
if ((c = _filbuf (stream)) == EoF)(
return (total - count) / size}
*data++ =(char) C
bufsize - stream->_bufsiz;
-count;
_filbuf函数负责填充缓冲。该函数的具体实现重要的部分只有一行：
stream->_cnt = _read (_fileno (stream) , stream->_base, stream->_bufsiz) :
可以看见所有的线索都指向了_read函数。_read 函数主要负责两件事：
（1）从文件中读取数据。
（2）对文本模式打开的文件，转换回车符。
程序员的自我修养一链接、装载与库
---
## Page 399
376
第11章运行库
11.5.4_read
_read的代码位于cr/src/readc。在省略了一部分无关紧要的代码之后，其内容如下：
fread -> fread_s -> _fread_nolock_s -> _read1
int _cdec1 _read (int fh, void *buf, unsigned cnt)
int bytes_read;
/* nunber of bytes read */
char *buffer;
int os_read;
/*byte8 read on 0S cal1 */
/* buffer to read to */
char *p, *q1
/* pointers into buffer */
char peekchr ;
ULONG filepos:
/* peek-ahead character */
ULONG dosretval;
/* file position after seek */
/* o.8. return value */
bytes_read = 0:
/* nothing read yet */
buffer = buf;
这部分是_read函数的参数、局部变量和初始化部分。下面的代码处理一个单字节缓冲：
if ((_osfile (fh) & (FPIPE(FDEV)) && _pipech (fh)1= LF)
*buffer+* - _pipech(fh) ;
++bytes_read;
12n - (4g) uoadd"
-cnt }
if中的判断语句使得这段代码仅对设备和管道文件有效。对于设备和管道文件，ioinfo
#define _pipech(i)( _pioinfo(i)->pipech )
pipech字段的值等于LF（即字符in）的时候表明该缓冲无效，这样设计的原因是pipech
的用途导致它永远不会被赋值为LF。我们将在稍后的部分里详细讨论这一话题。
read函数在每次读取管道和设备数据的时候必须先检查pipech，以免漏掉一个字节。
在处理完这个单字节缓冲之后，接下来的内容是实际的文件读取部分：
1f ( :ReadFile( (HANDL&)_osfhnd(fh), buffer, cnt, (LPDwORD)&o8_read, NULL ) )
if ( (dosretval = GetLastError ()) ==
ERROR_ACCESS_DENIED 1
1
errno = EBADF;
_doserrno = dosretval;
return -1;
else if ( dosretval = ERROR_BROKEN_PIPE )
return 0;
else
程序员的自我修养一链接、装载与库
---
## Page 400
11.5fread实现
377
_dosnaperr (dosretva1)
return -1;
ReadFile 是一个 Windows API 函数，由 Windows 系统提供，作用和_rcad 类似，用于从
文件里读取数据。在这里我们可以看到 ReadFile接管了_read的第一个职责，在ReadFile返
回之后，_read要检查其返回值。值得注意的是，Windows使用的函数返回值系统和crnt 使
用的返回值系统是不同的，例如 Windows使用 ERROR_INVALID_PARAMETER(87)表示无
效的参数，而CRT则用EBADF(9）表示相同的信息，因此当ReadFile返回了错误信息之后，
_read 要把这个信息翻译为cn所使用的版本。_dosmaperr 就是做这件工作的函数。在这里就
不详细说明了。
11.5.5文本换行
接下米_read要为以文本模式打开的文件转换回车符。在Windows 的文本文件中，同车
（换行）的存储方式是0xOD（用CR表示），0x0A（用LF表示）这两个字节，以C语言字
符串表示则是“vn”。而在其他的一些操作系统中，回车的表示却有区别。例如：
·Linux/Unix：回车用n表示。
·MacOS：回车用vr表示。
Windows：回车用rin表示。
面在C语言中，回车始终用n来表示，因此在以文本模式读取文件的时候，不同的操
作系统需要将各自的回车符表示转换为C语言的形式。也就是：
·Linux/Unix：不做改变。
·MacOS：每遇到r就将其改为in.
·Windows：将rin 改为n.
由于我们所阅读的是Windows 的cnt 代码，所以_read会每遇到一个rin 就将其改为n。
由于_read处理这一部分的代码很复杂（有近百行），因此这里会提供一个简化的版本来阅读：
if (_osfile (fh) & PTExT)
if((os_read 1= 0)&6 (*(char *)buf = LF))
_osfile (fh) 1= FCRLF;
_osfile (fh) &= -FCRLF;
首先需要检查文件是否是以文本模式打开，如果不是，就什么也不需要处理。_osfile
是一个宏，用于访间一个句柄对应的ioinfo对象的osfile字段（还记得IO初始化时的osfile
吗？）。当本次读文件读到的第一个字符是一个LF（n'）时，需要在该句柄的osfile字段中加
程序员的自我修养一链接、装载与库
---
## Page 401
第11章运行库
入FCRLF标记，表明一个vrtn可能跨过了两次读文件。这个标记在一些特殊场合下会有作
用（例如 ftell 函数）。
接下来要进行实际的转换，转换需要经历一个循环：
p = q = buf;
(eaxsaq + gnq(。 e) > d) au
处理p当前指向的字符
p 和 q后移
p和q一开始指向读取的数据数组的开头，在每一次循环里，进行如下的判断和操作；
（1）*p是CRTL-Z：表明文本已经结束，退出循环。
（2）*p是CR(r）之外的字符：把p指向的字符复制到q指向的位置，p和q各自后移
个字节（*q++=*p++）。
(3）*p是CR(r)且*(p+1)不是 LF(n)：同（2)。
（4）*p是CR(r)且*(p+1)是LF(n)：p后移2个字节，将q指向的位置写为LR(n).q
后移一个字节（p+=2:*q++=“n:)。
p和q一开始始终指向相同的位置，因此情况（2）里的复制实际没有作用，直到p遇
到一个vrin，此时的动作如图11-14所示（以字符串“alrinb”为例）。
P
P
图11-14换行符转换
程序员的自我修养—链接、装载与库
---
## Page 402
11.5fread实现
379
此时q-buf可得到处理过后的读取字符数。
一个字符是否是LF，所以无法决定是否应该丢弃这个CR字符。这时唯一的办法就是再从
文件里读取1个字节，检查它是否是LF：然后再用fseek函数（或具有相同功能的其他函数）
把函数指针重新向前移动一个字节。这段操作的伪代码如下：
从文件读1个字节，
如果没有读取成功，邢么直接存储CR字符并返回，
如果成功读取了1个字节，那么要考虑下列几种情况：
（1）磁盘文件，且字符不是LF：直接存储CR字符，用seek函数因退文件指针1个
字节：
（2）磁盘文件，且字符是LF:丢再CR字持存储LF字符；
（3）管通或设备文件，且字符是LF：丢弃CR字符存储LF字持；
（4）管道或设备文件，且半符不是LF：存健CR字持，并把LF字节存储在的析的管
通的单字节缓冲（pipech）里。
可以看到在第4种情况里使用了pipech。在之前的部分中我们已经知道这是一个为管道
和设备提供的单字节缓冲。由于管道和设备文件不能够使用seck函数回退文件指针，因此
一且读取了多余的一个字符，就必须使用这样的缓冲。由于此处对pipech的赋值将字符LF
排除在外，同时此处的赋值是唯一的对pipech有意义的赋值，因此pipech的值永远不会是
LF。那么将LF赋值为LF就可以表明该缓冲为空。下面是完整的转换过程代码：
pq=buf;
while (p < (char *)buf + bytes_read) (
if（▪p-- CTRLz）(
/遇到文本结东符，退出*/
if (!(_osfile(fh) & PDEV))
break;
_osfi1e(fh) 1= FEOFLAG;
elseiE（*p1-CR）/·没有通到cR，直接复制·/
else (
*q++ = *p++;
if (p<(char *)buf,bytes_read - 1){
/*通到CR，检查下一个字符是否是LF*/
/CR不处于缓冲的末尾*/
if (*(p+1) == LP) {
z =+ d
*q++ = LF;
程序员的自我修养—链接、装载与库
---
## Page 403
380
第11章运行库
else
*q++ - *p++;
elsef
/*CR处于缓冲的末尾，再读取一个字符*/
++p:
if ( 1ReadFile( (HANDLE)_osfhnd(fh), &peekchr, 1,
dosretval = 0;
dosretval = GetLastError ();
(LPDWORD)&O8_read, NULL ))
i f