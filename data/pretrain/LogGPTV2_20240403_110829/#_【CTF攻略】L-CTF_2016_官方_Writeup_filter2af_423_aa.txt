# 【CTF攻略】L-CTF 2016 官方 Writeup
|
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
****
**  
**
**传送们**
****【CTF攻略】最新2016 L-CTF Nu1L's writeup****
[http://bobao.360.cn/ctf/learning/168.html](http://bobao.360.cn/ctf/learning/168.html)
**  
**
**Web**
**Web 50 签到**
签到题，登录页面存在报错注入，过滤了and、or、select等，但都可以通过双写绕过，空格用/**/代替，通过报错回显即可拿到密码。登陆后进入购买页面，抓包可发现购买数量和密码都可控，猜测后台检验方式为用户余额-单价x数量是否大于零，于是可将购买数量改为一负值或者0，再对密码进行爆破即可。
**  
**
**Web150 我控几不主我及几啦**
这道题思路来源于LuManager15年12爆出的注入漏洞，但sqlmap也能跑并不在出题人意料之内，分给得偏高。从解题人数来看作为签到题似乎更好一点QAQ。
解题办法：
1.sqlmap加上各种tamper后即可跑出
2.构造一个上传表单
并将enctype="multipart/form-data"，然后通过post方法传入id，即可绕过waf联合查询出flag。
where是sql关键字，记得用反引号包住。
注入得到flag:
**  
**
**Web 200 睡过了**
其实这个题就是前段时间爆出来的一个洞,如果你关注最新的漏洞这个题基本就是秒出啦~
具体的参见，基本就是以下几点:
1.PHP序列化字符串中对象长度前加一个+号仍可正常反序列化,可用此来绕过正则，参见；
2.PHP当序列化字符串中表示对象属性数的值大于真实的属性个数时会跳过__wakeup()的执行 (所以题目叫睡过啦~）；
3.绕过PHP中open_basedir的限制。
首先打开链接,在filename,filedata中填好一句话的文件名和文件内容,跳到了upload.php,有提示"这种key加也行"：
就像前面所说的加个 **+** ：
很明显filename和filedata的值被清空了。继续改掉"key"后面的那个2为3或者大于2这数字：
写进去了,嘿嘿嘿嘿~
这里实际上是会传到upload目录下,这个目录需要试一下或者扫,这个倒没什么,不过比较坑的一点是会把你的文件名做一下MD5在存在upload目录下
(这个确实…….不过我很快就放出提示告诉大家啦）。然后得知了路径直接用菜刀连上就有一个webshell啦：
然而你会发现有open_basedir的限制,我们需要再写一个脚本去绕过：
参见P总的博客
最后访问就可以得到Flag啦~~~~
**web_250–苏打学姐的网站**
这个题目一共有三个步骤。首先是文件读取，有一点小坑，当时放题想过要不要把后台正则匹配的代码提示出来，但是看到几个师傅秒过就算了，然后就是一个常规的CBC翻转，ctf也出现过。
最后是一个上传，比较实战的一个点，使用.user.ini文件构成的PHP后门getshell。最有意思的就是尽量想办法防止文件被改或者删除等，毕竟要getshell，权限限制，再加上ph师傅说的-i隐藏属性各种限制，以及各位大佬的照顾和捧场，使最后题目没出乱子，谢谢大家。还是有一点失误的，记的有队伍的web牛直接使用php文件把flag读到网页访问，这样的话导致其他队伍去的话可以直接访问到flag了(感谢师傅马上上传覆盖解决这个尴尬)。so姿势水平还要加强。
首先打开几个图片可以知道是文件包含，也给了tips提示tips:file/tips.txt、但是直接访问是403，使用img.php直接img.php?id=file/tips.txt也是读取不到的，必须是有jpg,还使用正则简单限制了php://xxxxxxxxx/resource
**=** 形式的读取，后台代码如下：
所以payload：
img.php?id=php://xxxxxxxxx/resource=file/1.jpg/resource=file/tips.txt就可以读到。代码还给返回头加了image/jpg，火狐浏览器直接解析是看不到，可以使用Google
Chrome或者curl命令也行。
得到后台，随便同方法看看admin.php.txt源码，知道是一个cbc翻转改变cookie，参考以前wooyun文章，各位可以网上搜索一下。打开/admin_5080e75b2fe1fb62ff8d9d97db745120首页，主要代码：
    xdctfxdnum=2015auid=4;xdctfxdctf";
    $en_Result = mcrypt_encrypt(MCRYPT_RIJNDAEL_128,$Key, $v, MCRYPT_MODE_CBC, $iv);
    $enc = base64_encode($en_Result);
    $en_Data = base64_decode($_COOKIE[user]);
    $de_Result = mcrypt_decrypt(MCRYPT_RIJNDAEL_128,$Key, $en_Data, MCRYPT_MODE_CBC, $iv);
    $b = array();
    $b = isset($_COOKIE[user])?$de_Result:$enc;
    $num1 = substr($b,strpos($b,"uid")+4,1);
    $num2 = substr($b,strpos($b,"num")+4,4);
    echo 'ID: '.$num1."";
    if ($num1 == 1  && $num2 == 2016){
        die ("shen mi li wu !");
    }
    else{
        echo "HELLO CLIENT";
    }
    setcookie("user",$enc);
    ?>
需要改变的是2015的5和uid=4的4,分别对应63和57位，poc：
替换cookie可以跳转到上传界面，fuzzing可以上传ini，不多说直接一篇文章搞定：，之后getshell。得到flag。
**Web 300 headpic**
这道题的大致思路是，首先通过注册账户，注册带非法字符的用户名，发现无法正常的修改头像，而构造正确的sql逻辑则可以更新头像，于是认为在访问用户主页时触发了二次注入。然后到需要写脚本的时候，需要克服这道题的验证码。首先它形式很简单，完全没有粘连，因此可以直接用tesseract-ocr识别；不过还有更简单的方式，验证码是存在session里的，且缺乏验证，那我们直接清空cookie，验证码就不起效了。注入的脚本大致如下：
    #coding:utf-8
    import requests
    import random
    import pytesseract  
    from PIL import Image
    from io import BytesIO
    import string
    import sys
    def regist(name):
        url1=url+"check.php"
        try:
            for i in range(20):
                veri = verify()
                #print veri
          payload={'user':name,'pass':'111','verify':veri,'typer':'0','register':"%E6%B3%A8%E5%86%8C"}
                #print payload
                r=requests.post(url1,data=payload,headers=headers)
                txt=r.text
                #print txt
                #print r.headers['Content-Length']
                if '2000' in txt:
                    print "register OK!!"
                    flag = login(name)
                    return flag
                    break
                else:
                    pass
                    #print "not register"
            return False
        except Exception, e:
            pass