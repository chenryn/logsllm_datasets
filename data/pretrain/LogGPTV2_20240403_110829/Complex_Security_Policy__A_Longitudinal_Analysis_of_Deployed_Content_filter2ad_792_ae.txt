2) TLS Violations: To understand whether a TLS en-
forcement policy was violated, we need to check multiple
angles. Trivially,
if a site includes a resource via HTTP
and has block-all-mixed-content or default-src
https://* (or equivalent for other resource types), the CSP
is violated. Contrary to this straightforward case, understand-
ing if upgrade-insecure-requests could have caused
incompatibility is more involved, as the Archive crawler does
not honor upgrade-insecure-requests, i.e., would not
automatically archive the HTTPS variant of an upgradable
resource. As a ﬁrst step, we assume that if a site was delivered
over HTTPS, all resources from the same host would also be
available via HTTPS (e.g., the page was https://foo.com
and the resource http://foo.com/bar.png). We do not
look for violations in this case, to minimize the risk of false
positives. We then leverage the observation that widely-used
resources which are available over both protocols would have
been loaded and archived by the crawler at least once over
a secure connection, as at least one site would likely have
included it via HTTPS. We exploit this by querying the CDX
API for the HTTPS variant of the URL we want to check
for upgradability, limiting the results to URLs archived within
±30 days of the HTTP resource. If we can ﬁnd an HTTPS
variant, we mark the resource as upgradable. We then ﬂag all
remaining resources, i.e., those with only HTTP snapshots in
the IA, as non-upgradable. Though this approach might not be
a perfect solution, it is the best option considering the Archive
limitations. Hence, whenever a resource is non-upgradable, but
is included in a site with upgrade-insecure-requests,
we say that the site’s policy is violated.
In total, 46 domains were labeled as having given up TLS
enforcement. Similar to content violations, we used Chrome to
crawl the ﬁrst level of links beginning from the last snapshot
with CSP. For 28 of the sites, we detected a non-upgradable
resource on the crawled pages. In addition, for 4 domains, TLS
enforcement seemed to have been dropped along with all other
CSP directives, i.e., was collateral damage. For the remaining
14 domains, we could not reach a deﬁnitive conclusion.
However, given the insights about site-wide deployment we
discussed in the previous section, we plausibly expect that
many of these sites may have had at least one non-upgradable
resource on subpages we did not crawl.
3) Framing Control Violations: To understand if a given
CSP would have caused a framing violation, we would have
to retroactively investigate which other sites framed a given
page. As this is not feasible, we instead resort to a heuristic
to determine if the removal of frame-ancestors was due
to framing control issues. As we have seen before, frame-
ancestors is often used in combination with XFO. Hence,
if a given site has encountered an issue related to framing
control, it would likely not only remove frame-ancestors,
but also drop or adjust XFO. Therefore, once a site has stopped
using frame-ancestors, we check its XFO status on that
same day, as well as on the next snapshot. If a site has also
stopped using XFO, it is extremely likely that framing control
in general proved to be a problem.
In our dataset, 69 domains used CSP for framing control,
but gave up on that use case. Given our above classiﬁcation, we
found that for 42 sites, restricting framing in general proved to
be problematic, i.e., they dropped both frame-ancestors
and XFO at the same time. In addition, we found 7 sites
which moved from explicitly allowing a hostname through
11
both CSP and XFO to only XFO SAMEORIGIN. These cases
are interesting, as they indicate that developers determined this
to be sufﬁcient to constrain framing (as the ﬂexibility of CSP
was not necessary); notably showing the lack of awareness
of the dangers of double-framing attacks. In another 7 cases,
frame-ancestors was removed as collateral damage, i.e.,
XFO was used before and after CSP’s removal. Surprisingly,
we also observed two sites moving from exclusively using
frame-ancestors to XFO, indicating those operators were
also not aware of the drawbacks of XFO. Overall, we ﬁnd
that sites do not give up on frame-ancestors for reasons
speciﬁc to CSP, but rather because they either ﬁnd framing
control too cumbersome, or altogether unnecessary.
B. Investigating Insecure Policies
As our results have indicated, around 90% of sites that tried
to restrict content did so insecurely, e.g., by using unsafe-
inline or whitelisting entire schemes. To understand the
reasons behind this, we speciﬁcally looked at the content of all
pages which deployed such insecure policies, and were never
able to remove those unsafe keywords. We discovered 467
websites exhibiting this behavior. For each of the websites,
we checked every snapshot from the Archive (totaling around
118K requests) for the presence of inline scripts, event han-
dlers, and the number of third parties in the page.
Overall, 455 sites (97%) had inline scripts on the start
page at least once while running an insecure policy. Moreover,
317 used event handlers (68%) and in the median, each site
relied on 3 third parties (with a maximum of 26 third parties
for a single site). It is worth noticing that all these numbers
likely represent lower bounds, as we did not crawl the sites
any further. Nevertheless, a staggering 68% of sites relied on
event handlers, meaning they could not deploy a policy without
unsafe-inline given the current CSP speciﬁcation. The
results also highlight the difﬁculty that operators face when
trying to retroﬁt CSP; essentially, a policy that is tacked onto
an existing application is virtually always insecure.
C. Analyzing Secure Sites
To complement our previous analysis, we now focus on
sites which managed to deploy a secure policy, i.e., one with-
out whitelisting entire schemes or using unsafe-inline.
While prior work [50] has indicated that additional risks may
originate from whitelisting origins with JSONP endpoints or
allowing Flash to be hosted locally, we do not consider these
additional factors. In total, we found that 40 sites were able to
deploy a meaningfully secure policy and still have that in op-
eration at the end of our analysis timeframe. Notably, another
7 at some point deployed a strict policy; however, they either
added the unsafe keywords again or entirely disabled CSP after
mere days, indicating their policy caused functionality issues.
In particular, for 3 sites we found event handlers on their
start pages, even though their policy did not specify unsafe-
inline, hence deﬁnitely causing a CSP violation.
Of the 40 sites which can be counted as successfully having
deployed CSP for content restriction, 2 actually run policies
which interfere with scripts on their start pages as of this
writing. When looking at the other 38 cases, we discovered
an interesting trend. First, we found 16 adult websites, most
of which deployed a strict policy without attempting a more
relaxed one before. Interestingly, they all had starting days of
their ﬁrst CSP about 1-2 weeks apart (each). Analyzing the
CSPs, we found that they were all whitelisting the exact same
sources. Looking at the start dates of CSP deployment, we
found that the operators of these sites ﬁrst experimented on one
site with removing the event handlers on the page, exclusively
used to track users through Google Analytics. Notably, this
behavior of using inline event handlers was even advocated
for by Google [3]. Once they had successfully rolled out CSP
for one website, they proceeded with others. Of the remaining
22 sites, only 3 had any event handlers on the last snapshot
before the deployment of the strict policy.
Overall, we ﬁnd that of the few sites that were able to
deploy a strict policy, virtually all either did not rely on event
handlers (on their start page), or only used event handlers for
a single, easy-to-change use case (such as registering event
handlers programmatically for off-site links). This stands in
stark contrast to the results for the sites which failed to deploy
a secure CSP, where over two thirds used event handlers.
IX. FRAMING CONTROL NOTIFICATION
In general, we observed that sites have a clear preference
for XFO over frame-ancestors. Moreover, we found
cases where XFO was used even though the site deployed
directives only introduced after frame-ancestors, indicat-
ing the CSPs were updated when framing control was already
possible. To understand the reason behind these ﬁndings, we
decided to notify site operators running XFO to inform them
about the improved support that CSP’s frame-ancestors
offers, and tried to discover their reasons for preferring XFO.
To this end, we checked all
live versions of the sites in
our dataset starting from May 31, 2019, for their deployed
XFO and CSP directives. On June 4, we notiﬁed all 2,699
sites that used XFO headers which either had a syntactically
incorrect header, used the non-universally-supported ALLOW-
FROM directive, or deployed SAMEORIGIN, making them
prone to double-framing attacks in some browsers. We did
not notify the sites that also made use of CSP’s framing
control, since supporting browsers ignore any XFO headers
when frame-ancestors is present. Given the insights from
prior work on Web notiﬁcations [42], we chose to send emails
to generic aliases on each domain (info, security, webmaster)
as well as to the WHOIS contact (where available). The
template of our email can be found in Appendix A. We sent
this email from one of the researchers’ regular email address,
ensuring that recipients could verify our identity. As expected,
in line with prior work’s ﬁndings [42], most emails bounced,
either due to non-existing addresses or lack of appropriate MX
records.
A. Insights from Initial Responses
Notably though, we received responses from 117 sites
which went beyond automated conﬁrmation emails, such as
out-of-ofﬁce responders or conﬁrmation of a created ticket. By
categorizing these responses, we discovered that 62 operators
claimed that they would deploy frame-ancestors shortly.
For a sample of anonymous answers we received, please
consult Appendix B. Among the responses, we also found
24 answers which indicated that CSP was too complex to
12
be deployed. In particular, they all claimed to have attempted
to deploy CSP for content restriction, but either deferred it,
or abandoned the attempt altogether. This is in line with
the signiﬁcant number of sites we discovered in our archival
analysis, which either stopped deploying CSP or never moved
from report-only to enforcement mode (see Section V-D).
With all respondents, we exchanged further emails, indi-
cating that CSP’s frame-ancestors could be used without
any of the other CSP functionality. In doing so, we received
emails from 16 operators stating they were not aware of any
issues related to XFO, and 13 who explicitly noted they had
not heard of CSP’s frame-ancestors before. In contrast,
9 informed us in their initial response that they had already
deployed the CSP directive. From the notiﬁcation date and
onwards, we continued our daily checks for both XFO and
frame-ancestors. Overall, we observed an increase from
511 sites deploying frame-ancestors before our notiﬁ-
cations to 554 sites by June 12, 2019. In particular, for the
domains that answered to our initial message, 14 had taken
action. Moreover, for the other sites, 4 belonged to a network
of sites for which we had received one response. For the
remaining 25 sites that rolled out frame-ancestors in
the 8 days, we could only ﬁnd two sites for which all our
sent emails bounced. Hence, we believe that most of the sites
deployed frame-ancestors as a result of our notiﬁcation,
demonstrating the ease of deployment within mere days.
Finally, in conversations with operators, several mentioned
that they relied on external resources for security headers. In
checking those resources, we found that they all list XFO as
the only defense against framing-based attacks, whereas they
advertised CSP as a means to mitigate XSS attacks [4, 5,
13, 38, 49]. Notably, even widely-used sites like securi-
tyheaders.com consider XFO the only viable option for
framing control. Neither this service nor other resources like
MDN [24] indicate that CSP can be used for this purpose.
B. Follow-Up Survey
Given the diverse responses we obtained from the notiﬁed
site operators, we decided to run a more systematic survey,
allowing us to ascertain the number of operators aware of
issues with XFO, CSP, and the fact that frame-ancestors
could be used in isolation. We made the survey as brief as
possible and only sent it to operators who had previously
answered our initial email, with the explicit goal of soliciting a
high fraction of responses due to the limited effort necessary to
answer the questions. In particular, as prior works have shown,
unsolicited surveys have minuscule response rates [11, 42],
which is why we decided to only reach out to operators to
whom we had previously provided helpful information. The
full questionnaire is available in Appendix C. For our survey,
until June 12, 2019, we received a total of 39 answers. Out
of those, two thirds (27) indicated they were not aware of
the inconsistencies around XFO. When asked about why they
had deployed XFO in the ﬁrst place, the majority (20) said
they had their own reasons to restrict framing,
indicating
the awareness of framing-based attacks. Moreover, 31 (79%)
respondents indicated that they had been aware of CSP before
our notiﬁcation; yet only 12 of those claimed to have been
aware of frame-ancestors beforehand. Of those 12, 9
claimed to know that frame-ancestors can be used in
isolation. These reports suggest that while operators have a
general understanding of CSP, they are not aware of all its
directives and their security beneﬁts.
For all respondents that indicated to have known about
CSP beforehand, 23 said that their site would not work with
a reasonably secure policy right away (2 claimed yes, 6 did
not know). On the ﬂip side, 29/31 operators believed that CSP
could be a viable option to improve their site’s resilience to
XSS attacks. Additionally, when asked about the use case of
TLS enforcement, 22 responded that they knew they could
operate TLS enforcement in isolation before our notiﬁcation.
Hence, it appears that while content restriction is clearly known
as a goal of CSP, most sites are unable to deploy it due to
its complexity. Operators seemed to be more aware of the
fact that TLS can be enforced through CSP, but were not as
knowledgeable about framing control. This, combined with the
insights from resources the respondents indicated (both in the
survey and the email conversations) leads us to conclude that
resources on CSP critically lack details about framing control.
In terms of tool support, 36/39 respondents answered that
they had used the browser console to debug and analyze their
site. Hence, if there had been warnings about inconsistencies
(or even lack of support for certain directives), those operators
would likely have taken action. With respect
to required
tools, the respondents named better tools to debug CSP errors
(locally), improved collection and aggregation of warnings
caused in users’ browsers, and in general tools to suggest
appropriate security headers. As a result of these insights and
separate discussions with Google engineers, we ﬁled a Chrome
feature request to issue warnings about XFO; in particular to
at least warn operators about the unsupported ALLOW-FROM
directive and suggest to deploy frame-ancestors instead.
C. Limitations and Additional Survey
Our notiﬁcation and subsequent survey cannot be con-
sidered an in-depth analysis due to its unstructured nature
(especially of the emails we received). We speciﬁcally set up
the survey to be brief, so as to achieve a high response rate.
However, it is not clear whether security-aware operators ﬁlled
our survey. Even then, our results are indicative of operators
which did not use CSP for framing control, i.e., cannot be
considered experts in CSP. While we cannot account for these
facts in our initial survey, to partially alleviate the identiﬁed
shortcomings, we ran our survey a second time after having
presented a talk about the evolution of CSP and its different
use cases at an OWASP conference. For this, we are conﬁdent
that professionals with a Web security background answered
the questions. We received a total of 20 responses with 10/20
claiming prior knowledge of XFO’s shortcomings, and 19/20
being aware of CSP beforehand. 18 of those believed CSP to
be a viable option, of which 9 argued their site would be able to
run a secure policy. Regarding framing control, 13/19 said they
already knew about frame-ancestors, of which only 2 did
not know that it was feasible to deploy in isolation. In contrast,
9/19 were not aware that TLS enforcement could be deployed
in isolation, indicating that this is a little known use-case even
among security experts. Naturally, as for our initial survey, we
cannot assess incorrect reporting from operators. Nevertheless,
as we stressed the anonymous nature of our survey, we expect
the results to be characteristic of the participants.
13
X. DISCUSSION
We now summarize the evolution of CSP’s use cases,
enabled by the unique vantage point of the IA, and highlight
gathered insights. We then discuss whether CSP is too complex
for site operators, and outline how it can become more useful
going forward.
A. Summary of CSP’s Use Cases
1) CSP for Script Content Restriction: Our work has
conﬁrmed a previously investigated fact [6, 8, 50, 51]: CSP
is largely failing as a defense mechanism for script content
restriction. Through our longitudinal analysis, we could show