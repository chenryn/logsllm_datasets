title:Why MAC Address Randomization is not Enough: An Analysis of Wi-Fi
Network Discovery Mechanisms
author:Mathy Vanhoef and
C&apos;elestin Matte and
Mathieu Cunche and
Leonardo S. Cardoso and
Frank Piessens
Why MAC Address Randomization is not Enough:
An Analysis of Wi-Fi Network Discovery Mechanisms
Mathy Vanhoef†, Célestin Matte‡, Mathieu Cunche‡, Leonardo S. Cardoso‡, Frank Piessens†
†iMinds-Distrinet, KU Leuven , ‡Univ Lyon, INSA Lyon, Inria, CITI, France
ABSTRACT
We present several novel techniques to track (unassociated)
mobile devices by abusing features of the Wi-Fi standard.
This shows that using random MAC addresses, on its own,
does not guarantee privacy.
First, we show that information elements in probe requests
can be used to ﬁngerprint devices. We then combine these
ﬁngerprints with incremental sequence numbers, to create
a tracking algorithm that does not rely on unique identi-
ﬁers such as MAC addresses. Based on real-world datasets,
we demonstrate that our algorithm can correctly track as
much as 50% of devices for at least 20 minutes. We also
show that commodity Wi-Fi devices use predictable scram-
bler seeds. These can be used to improve the performance of
our tracking algorithm. Finally, we present two attacks that
reveal the real MAC address of a device, even if MAC ad-
dress randomization is used. In the ﬁrst one, we create fake
hotspots to induce clients to connect using their real MAC
address. The second technique relies on the new 802.11u
standard, commonly referred to as Hotspot 2.0, where we
show that Linux and Windows send Access Network Query
Protocol (ANQP) requests using their real MAC address.
1.
INTRODUCTION
Tracking people through their mobile devices has become
controversial but common. For example, leaked documents
show the NSA tracks people’s cell phone location, and later
analyses this data under programs such as Co-Traveler to
infer relationships between people [19]. Under the programs
Gilgamesh and Shenanigans, captured cell phone locations
are used to perform targeted drone attacks [41]. As a more
commercial example, smart trash cans in the UK used Wi-Fi
to track the movements of people, in order to gain insight
into people’s shopping behaviour [22]. This is possible be-
cause Wi-Fi-enabled devices routinely transmit probe re-
quests to search for nearby networks, and these requests
contain the unique MAC address of the device. An attacker
can easily capture and track these requests.
In response
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS ’16, May 30-June 03, 2016, Xi’an, China
c(cid:13) 2016 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ISBN 978-1-4503-4233-9/16/05. . . $15.00
DOI: http://dx.doi.org/10.1145/2897845.2897883
to these privacy violations, most Operating Systems (OSs)
have now implemented diﬀerent variants of MAC address
randomization. While a commendable initiative, we show
that all implementations of MAC address randomization fail
to provide adequate privacy.
First, we analyse the content of probe requests by focusing
on Information Elements (IEs), which are used to communi-
cate extended information on the device and its capabilities.
Based on real-world datasets containing more than 8 million
probe requests, we show that the number of elements, their
value, and the order they are in form a ﬁngerprint of a device
(called the IE ﬁngerprint). This IE ﬁngerprint can be used
to defeat MAC address randomization. In some cases, the IE
ﬁngerprint even uniquely identiﬁes a device in the datasets.
We also found that the Wi-Fi Protected Setup (WPS) ele-
ment may leak the original MAC address of the device.
We continue by studying the sequence number ﬁeld, which
is incremented for each transmitted frame. We consolidate
previous observations [18] that this ﬁeld is not reset upon
identiﬁer change in current implementations of MAC ad-
dress randomization. By combining the sequence number
ﬁeld with the IE ﬁngerprint, we present an algorithm that
tracks devices over time and thus defeats MAC address ran-
domization. Based on simulations, we show that this algo-
rithm can track a signiﬁcant fraction of devices.
Inspired by the work of Bloessl et al. [6], we also analyze
the scrambler seeds of commodity Wi-Fi devices. We ﬁnd
that this ﬁeld in the 802.11 physical layer is predictable and
can thus be used for tracking. As opposed to the sequence
number ﬁeld, the scrambler seed is managed by the hard-
ware. Hence it is more diﬃcult, if not impossible, to ﬁx this
unwanted predictability through software updates.
Finally, we introduce and analyze active attacks which re-
veal a target device’s real MAC address despite randomiza-
tion. This is done by creating fake Access Points (APs) that
advertise either popular SSIDs, or the support of Hotspot 2.0.
A station will reveal its real MAC address when connecting
to, or respectively communicating with, our fake APs. By
spooﬁng only 5 SSIDs, we were able to retrieve the MAC ad-
dress of 17.4% of devices. The attack abusing the Hotspot
2.0 standard uncovered the MAC address of 5.2% of devices.
To summarize, our main contributions are:
• We study information elements in probe requests, and
discover new ﬁelds and techniques to track users.
• We demonstrate that scrambler seeds of commodity
Wi-Fi radios are predictable, and show that devices
are trackable through this ﬁeld.
• We show that advertising fake hotspots, in particu-
lar when combined with the Hotspot 2.0 protocol, can
completely defeat MAC address randomization.
The remainder of this paper is organized as follows. Sec-
tion 2 introduces relevant parts of the 802.11 standard, and
datasets used throughout the paper. A privacy analysis of
information elements in probe requests is done in Section 3,
and in Section 4 we demonstrate how combining this with
predictable sequence numbers can be used to track devices.
In Section 5, we show that scrambler seeds of commodity de-
vices are predictable. Section 6 introduces attacks based on
fake APs and the Hotspot 2.0 protocol. Finally, Sections 7
and 8 discuss related work and conclude.
2. BACKGROUND
In this section, we introduce vendor implementations of
MAC address randomization, relevant parts of the 802.11
physical layer, the Hotspot 2.0 standard, and used datasets.
2.1 MAC Address Randomization
To prevent third parties from using the MAC address to
track devices, several vendors have implemented MAC ad-
dress randomization. This follows the suggestion of Gruteser
et al. [25] to use disposable interface identiﬁers in order to
improve users’ privacy. In practice, this implies that probe
requests no longer use the real MAC address of the device.
For example, a new MAC address can be used for each scan
iteration, where one scan iteration consists of sending probe
requests on all usable channels. However, since a (draft)
speciﬁcation on MAC address randomization does not yet
exist, iOS, Windows, and Linux, all implemented their own
variants of MAC address randomization. This raises the
question whether their implementations actually guarantee
privacy. In the remainder of the paper, we use randomiza-
tion as a synonym of MAC address randomization.
2.1.1
Apple added MAC address randomization to its devices
starting from iOS 8 [42]. In iOS 8, randomized addresses are
only used while unassociated and in sleep mode [18]. iOS 9
was extended to also use randomization in what Apples calls
location and auto-join scans [42]. Based on our own experi-
ments, this means that randomization is now also used when
the device is active, i.e., when the screen is turned on.
2.1.2 Android
Android 6.0 uses randomization for background scans if
the driver and hardware support it [2]. Unfortunately, we
did not have a device to test and verify this in practice.
iOS
Although Android versions before 6.0 do not support ran-
domization, several applications supporting this feature have
been released [9, 3]. Common features of those applications
are a periodical update of the MAC address to a random
value, but also the manual modiﬁcation of this address by
the user. Note that those applications require root privilege
to operate, which reduce their impact for the average user.
2.1.3 Windows
Microsoft supports randomization since Windows 10 [45].
Enabling randomization is possible if the hardware and driver
support it. Interestingly, not only does Windows use random
addresses for probe requests, it also uses a random address
Feedback
Data In
x0 x1 x2 x3 x4 x5 x6
Figure 1: The scrambler used in 802.11 frames.
Scrambled Data
when connecting to a network. To assure the client always
uses the same address when connecting to a particular net-
work, a per-network address is calculated as follows [27, 28]:
addr = SHA-256(SSID, macaddr , connId , secret)[:6]
(1)
Here SSID is the name of the network, macaddr the orig-
inal MAC address, and connId a parameter that changes
if the user removes (and re-adds) the network to its pre-
ferred network list. The secret parameter is a 256-bits cryp-
tographic random number generated during system initial-
ization, unique per interface, and kept the same across re-
boots [28]. Bits in the most signiﬁcant byte of addr are set
so it becomes a locally administered, unicast address. This
hash construction is similar to the generation of IPv6 inter-
face identiﬁers as proposed in RFC 7217 [21]. It assures that
systems relying on ﬁxed MAC addresses continue to work as
expected, e.g., when authentication is performed based on
the MAC address. Users can also manually instruct the OS
to daily update the per-network address randomly.
2.1.4 Linux
Linux added support for MAC address randomization dur-
ing network scans in kernel version 3.18. The address should
be randomized for each scan iteration [24]. Drivers must be
updated to support this feature. The mvm module of the
iwlwifi driver supports randomization since kernel 3.18.
The brcmfmac driver added support for this in kernel 4.5.
The privacy-oriented Linux distribution Tails [1] does not
support MAC address randomization during network scans.
Instead, it generates a (new) random MAC address at boot.
This random address keeps the ﬁrst 3 bytes of the origi-
nal address, the Organization Unique Identiﬁer (OUI), and
only randomizes the last three bytes. While not as optimal
as periodical address changes, it does prevent tracking over
extended periods of time.
2.2 The Wi-Fi Physical Layer
The 802.11 standard deﬁnes two popular modulation tech-
niques: Direct-Sequence Spread Spectrum (DSSS) and Or-
thogonal Frequency Division Multiplexing (OFDM). A dis-
advantage of OFDM is its high peak-to-average power ratio,
increasing the bit-error ratio and out-of-band radiation [44].
This problem can be mitigated by using a scrambler that re-
moves repetitive patterns in the data being modulated and
transmitted. In 802.11, the scrambler XORs the input data
with a bit sequence generated by a Linear Feedback Shift
Register (LFSR) whose feedback function is [31, §18.3.5.5]:
Definition 1. The 802.11 scrambler feedback function
2 → F2 is deﬁned by L(x0x1 . . . x6) = x0 ⊕ x3.
L : F7
We call x0 and x3 the feedback taps. Here F2 is the ﬁeld
{0, 1}, and Fn
2 a bitstring of length n representing LFSR
states. Concatenation of bitstrings x and y is denoted by xy.
PLCP Preamble
12 symbols
Signal
24 bits
SERVICE
16 bits
PSDU
variable
Tail
6 bits
Padding
variable
Scrambled Data
Rate
4 bits
Reserved
1 bit
Length
12 bits
Parity
1 bit
Tail
6 bits
Scrambler Init
Reserved
7 bits
9 bits
Figure 2: Format of legacy OFDM frames. The Tail ﬁeld is zeroed and not scrambled. Bits are shown in transmit order.
For a bitstring x ∈ Fn
0 ≤ i < n). The shift function of the LFSR becomes:
2 → F7
Definition 2. The shift function SL : F7
2 , xi denotes the i-th bit of x (with
2 is de-
ﬁned by SL(x0x1 . . . x6) = x1 . . . x6L(x0x1 . . . x6).
The resulting LFSR is shown in Fig. 1.
The layout of (legacy OFDM-encoded) frames is shown in
Fig. 2. Scrambling is done on all data bits starting from,
and including, the SERVICE ﬁeld (see Fig. 2). After scram-
bling, the tail ﬁeld is overwritten with zeros. The scrambler
is self-synchronizing. This means that the Scrambler Init
ﬁeld is initialized to all zeros, so the ﬁrst 7 feedback bits will
eﬀectively be written to this ﬁeld. Hence, the Scrambler Init
ﬁeld does not contain the scrambler seed, but the state of the
LFSR after 7 shifts. Since probe requests are generally sent
at the most reliable encoding available, DSSS is used in the
2.4 GHz band, and OFDM in the 5 GHz band. Surprisingly,
DSSS frames use a ﬁxed value for the scrambler seed [31,
§17.2.4]. Only legacy 802.11 radios generate a random seed
for DSSS-encoded frames. This makes the DSSS-encoded
probe requests in the 2.4 GHz irrelevant in our attacks that
rely on the scrambler seed.
In contrast, OFDM-encoded
frames use variable scrambler seeds. Therefore, when inves-
tigating the generation of scrambler seeds in Sect. 5, we will
focus on probe requests transmitted in the 5 GHz band.
2.3 Hotspot 2.0
Hotspot 2.0 is an initiative of the Wi-Fi Alliance to stream-
line network discovery and selection, aiming to create a
roaming experience matching that of cellular phones [46]. It
allows clients to discover hotspots for which they have appro-
priate credentials, and provides automatic roaming between
wireless networks. Hotspot 2.0 relies on 802.11u, a standard
providing a communication channel even when the station is
unassociated with an Access Point (AP) [32]. Stations use
this channel to query an AP for network access information
using the Access Network Query Protocol (ANQP). For ex-
ample, ANQP can be used for discovering which credentials
can be used to authenticate to a hotspot.
2.4 Datasets