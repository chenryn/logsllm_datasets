18.9.1 通过键盘发送一个字符串
pyautogui.typewrite() 函数向计算机发送虚拟按键。这些按键产生什么效果，取
决于当前获得焦点的窗口和文本输入框。可能需要先向文本输入框发送一次鼠标点
击，确保它获得焦点。
举一个简单的例子，让我们用 Python 自动化在文件编辑窗口中输入 Hello
world!。首先，打开一个新的文件编辑窗口，将它放在屏幕的左上角，以便
pyautogui点击正确的位置，让它获得焦点。然后，在交互式环境中输入以下内容：
>>> pyautogui.click(100, 100); pyautogui.typewrite('Hello world!')
请注意，在同一行中放两条命令，用分号隔开，这让交互式环境不会在两个指
令之间提示输入。这防止了你在click() 和typewrite() 调用之间，不小心让新的窗口
获得焦点，从而让这个例子失败。
Python首先在坐标（100，100）处发出虚拟鼠标点击，这将点击文件编辑窗口，
让它获得焦点。typewrite() 函数调用将向窗口发送文本 Hello world!，结果就像图
18-3。现在有了替你打字的代码！
图18-3 用PyAutogGUI点击文件编辑器窗口，在其中输入Hello world！
默认情况下，typewrite() 函数将立即打印出完整字符串。但是，你可以传入可选的
第18章 用GUI自动化控制键盘和鼠标
第二参数，在每个字符之间添加短时间暂停。例如，pyautogui.typewrite（'Helloworld!'，
0.25）将在打出H后等待1/4秒。打出e以后再等待1/4秒，如此等等。这种渐进的打字
机效果，对于较慢的应用可能有用，它们处理击键的速度不够快，跟不上pyautogui。
对于A或!这样的字符，pyautogui将自动模拟按住Shift键。
18.9.2 键名
不是所有的键都很容易用单个文本字符来表示。例如，如何把Shift键或左箭头
键表示为单个字符？在PyAutoGUI中，这些键表示为短的字符串值：'esc' 表示Esc键，
'enter' 表示Enter。
除了单个字符串参数，还可以向typewrite() 函数传递这些键字符串的列表。例
如，以下的调用表示按a键，然后是b键，然后是左箭头两次，最后是X和Y键：
>>> pyautogui.typewrite(['a', 'b', 'left', 'left', 'X', 'Y'])
因为按下左箭头将移动键盘光标，所以这会输出 XYab。表 18-1 列出了 pyautogui
的键盘键字符串，你可以将它们传递给typewrite() 函数，模拟任何按键组合。
也可以查看 pyautogui.KEYBOARD_KEYS 列表，看看 pyautogui 接受的所有可
能的键字符串。'shift' 字符串指的是左边的 Shift 键，它等价于 'shiftleft'。'ctrl'、
'alt' 和 'win' 字符串也一样，它们都是指左边的键。
表18-1 PyKeyboard属性
键盘键字符串 含义
'a', 'b', 'c', 'A', 'B', 'C', '1', '2', '3',
单个字符的键
'!', '@', '#'，等等
'enter'（or 'return' or '\n'） 回车键
'esc' Esc键
'shiftleft', 'shiftright' 左右Shift键
'altleft', 'altright' 左右Alt键
'ctrlleft', 'ctrlright' 左右Ctrl键
'tab'（or '\t'） Tab键
'backspace', 'delete' Backspace和Delete键
'pageup', 'pagedown' Page Up和Page Down键
'home', 'end' Home和End键
'up', 'down', 'left', 'right' 上下左右箭头键
'f1', 'f2', 'f3'，等等 F1至F12键
静音、减小音量、放大音量键（有些键盘没有这些键，但你
'volumemute', 'volumedown', 'volumeup'
的操作系统仍能理解这些模拟的按键）
'pause' Pause键
Python编程快速上手——让繁琐工作自动化
续表
键盘键字符串 含义
'capslock', 'numlock', 'scrolllock' Caps Lock，Num Lock和Scroll Lock键
'insert' Ins或Insert键
'printscreen' Prtsc或Print Screen键
'winleft', 'winright' 左右Win键（在Windows上）
'command' Command键（在OS X上）
'option' Option键（在OS X上）
18.9.3 按下和释放键盘
就像 mouseDown() 和 mouseUp() 函数一样，pyautogui.keyDown() 和 pyautogui.
keyUp() 将向计算发送虚拟的按键和释放。它们将根据参数发送键字符串（参见表18-1）。
方便起见，pyautogui提供了pyautogui.press() 函数，它调用这两个函数，模拟完整的击键。
运行下面的代码，它将打印出美元字符（通过按住Shift键并按4得到）：
>>> pyautogui.keyDown('shift'); pyautogui.press('4'); pyautogui.keyUp('shift')
这行代码按下Shift，按下（并释放）4，然后再释放Shift。如果你需要在文本
输入框内打一个字符串，typewrite() 函数就更适合。但对于接受单个按键命令的应
用，press() 函数是更简单的方式。
18.9.4 热键组合
“热键”或“快捷键”是一种按键组合，它调用某种应用功能。拷贝选择内容
的常用热键是 Ctrl-C（在 Windows 和 Linux 上）或 -C（在 OS X 上）。用户按住
Ctrl键，然后按C键，然后释放C和Ctrl键。要用pyautogui的keyDown() 和keyUp() 函
数来做到这一点，必须输入以下代码：
pyautogui.keyDown('ctrl')
pyautogui.keyDown('c')
pyautogui.keyUp('c')
pyautogui.keyUp('ctrl')
这相当复杂。作为替代，可以使用 pyautogui.hotkey() 函数，它接受多个键字符串
参数，按顺序按下，再按相反的顺序释放。例如对于Ctrl-C，代码就像下面这样简单：
pyautogui.hotkey('ctrl', 'c')
对于更大的热键组合，这个函数特别有用。在Word中，Ctrl-Alt-Shift-S热键组
合显示Style（样式）窗口。不必使用8次不同的函数调用（4次keyDown() 调用和
4次keyUp() 调用），你只要调用hotkey（'ctrl', 'alt', 'shift', 's'）。
在屏幕的左上角打开一个新的 IDLE 文件编辑窗口，在交互式环境中输入以下
第18章 用GUI自动化控制键盘和鼠标
内容（在OS X中，用 'ctrl' 代替 'alt'）：
>>> import pyautogui, time
>>> def commentAfterDelay():
 pyautogui.click(100, 100)
 pyautogui.typewrite('In IDLE, Alt-3 comments out a line.')
time.sleep(2)
 pyautogui.hotkey('alt', '3')
> >> commentAfterDelay()
这定义了一个函数commentAfterDelay()，在被调用时，将点击文件编辑窗口，
让它获得焦点，输出“In IDLE，Alt-3 comments out a line”，暂停２秒钟，然
后模拟按下 Alt-3 热键（或 OS X 上的 ctrl-3）。这个快捷键在当前行加上两个#
字符，将它注释掉（在 IDLE 中编写你自己的代码时，这是一个有用的技巧，应该
知道）。
18.10 复习 PyAutoGUI 的函数
本章介绍了许多不同函数，下面是快速的汇总参考：
moveTo（x，y）将鼠标移动到指定的x、y坐标。
moveRel（xOffset，yOffset）相对于当前位置移动鼠标。
dragTo（x，y）按下左键移动鼠标。
dragRel（xOffset，yOffset）按下左键，相对于当前位置移动鼠标。
click（x，y，button）模拟点击（默认是左键）。
rightClick() 模拟右键点击。
middleClick() 模拟中键点击。
doubleClick() 模拟左键双击。
mouseDown（x，y，button）模拟在x、y处按下指定鼠标按键。
mouseUp（x，y，button）模拟在x、y处释放指定键。
scroll（units）模拟滚动滚轮。正参数表示向上滚动，负参数表示向下滚动。
typewrite（message）键入给定消息字符串中的字符。
typewrite（[key1，key2，key3]）键入给定键字符串。
press（key）按下并释放给定键。
keyDown（key）模拟按下给定键。
keyUp（key）模拟释放给定键。
hotkey（[key1，key2，key3]）模拟按顺序按下给定键字符串，然后以相反的顺
序释放。
screenshot() 返回屏幕快照的 Image 对象（参见第 17 章关于 Image 对象的
信息）。
Python编程快速上手——让繁琐工作自动化
18.11 项目：自动填表程序
在所有无聊的任务中，填表是最烦人的。到了现在，在最后一章的项目中，你
将搞定它。假设你在电子表格中有大量的数据，必须重复将它输入到另一个应用的
表单界面中，没有实习生帮你完成。尽管有些应用有导入功能，让你上传包含信息
的电子表格，但有时候似乎没有其他方法，只好不动脑子地点击和输入几个小时。
读到了本书的这一章，你“当然”知道会有其他方法。
本项目的表单是 Google Docs 表单，你可以在 http://nostarch.com/automatestuff
找到，如图18-4所示。
图18-4 本项目用到的表单
总的来说，你的程序应该做到：
 点击表单的第一个文本字段。
 遍历表单，在每个输入栏键入信息。
 点击Submit按钮。
 用下一组数据重复这个过程。
这意味着代码需要做下列事情：
第18章 用GUI自动化控制键盘和鼠标
 调用pyautogui.click() 函数，点击表单和Submit按钮。
 调用pyautogui.typewrite() 函数，在输入栏输入文本。
 处理KeyboardInterrupt异常，这样用户能按Ctrl-C键退出。
打开一个新的文件编辑器窗口，将它保存为formFiller.py。
第 1步：弄清楚步骤
在编写代码之前，你需要弄清楚填写一次表格时，需要的准确击键和鼠标点击。
18.4节中的mouseNow.py脚本可以帮助你弄清楚确切的鼠标坐标。你只需要知道第
一个文本输入栏的坐标。在点击第一个输入栏之后，你可以Tab键，将焦点移到下
一个输入栏。这让你不必弄清楚每一个输入栏的x、y坐标。
下面是在表单中输入数据的步骤：
1．点击 Name 输入栏（在将浏览器窗口最大化后，用 mouseNow.py 程序来确
定坐标。在OS X上，可能需要点击两次：一次让浏览器获得焦点，第二次让Name
输入栏获得焦点）。
2．键入名称，然后按Tab键。
3．键入最大的恐惧（greatest fear），然后按Tab键。
4．按向下键适当的次数，选择魔力源（wizard power source）：一次是Wand，
两次是Amulet，三次是Crystal ball，四次是money。然后按Tab键（请注意，在OS X
中，你必须为每次选择多按一次向下键。对于某些浏览器，你也需要按回车键）。
5．按向右键，选择RoboCop问题的答案。按一次是2，两次是3，三次是4，
四次是5，或按空格键选择1（它是默认加亮的）。然后按Tab键。
6．键入附加的备注，然后按Tab键。
7．按回车键，点击“Submit”按钮。
8．在提交表单后，浏览器将转到一个页面。然后你需要点击一个链接，返回
到表单页面。
请注意，如果你稍后再次运行这个程序，可能需要更新鼠标点击的坐标，因为浏览
器窗口可能已经改变了位置。要避免这一点，请一直确保浏览器窗口最大化，然后再寻
找第一个表单输入框的坐标。而且，不同操作系统上的不同浏览器，工作起来可能与这
里的步骤稍有不同，所以在运行程序之前，要确保这些击键组合适合你的计算机。
第 2步：建立坐标
在浏览器中载入示例表单（图 18-4），并将浏览器窗口最大化。打开一个新的
终端窗口或命令行窗口，来运行mouseNow.py脚本，然后将鼠标放在输入框上，弄
清楚它的x、y坐标。这些数字将赋给程序中的变量。同时，找出蓝色Submit按钮
的x、y坐标和RBG值。这些值将分别赋给变量submitButton和submitButtonColor。
接下来，在表单中填入一些假的数据，点击Submit。你需要看到下一个页面的样子，
Python编程快速上手——让繁琐工作自动化
以便使用程序mouseNow.py寻找这个页面中Submit another response链接的坐标。
让你的源代码看起来像下面的样子。确保用自己测试得到的坐标代替斜体的值：
#! python3
# formFiller.py - Automatically fills in the form.
import pyautogui, time
# Set these to the correct coordinates for your computer.
nameField = (648, 319)
submitButton = (651, 817)
submitButtonColor = (75, 141, 249)
submitAnotherLink = (760, 224)
# TODO: Give the user a chance to kill the script.
# TODO: Wait until the form page has loaded.
# TODO: Fill out the Name Field.
# TODO: Fill out the Greatest Fear(s) field.
# TODO: Fill out the Source of Wizard Powers field.
# TODO: Fill out the RoboCop field.
# TODO: Fill out the Additional Comments field.
# TODO: Click Submit.
# TODO: Wait until form page has loaded.
# TODO: Click the Submit another response link.
现在你需要实际想要输入这张表格的数据。在真实世界中，这些数据可能来自
电子表格、纯文本文件或某个网站。可能需要额外的代码，将数据加载到程序中。
但对于这个项目，只需要将这些数据硬编码给一个变量。在程序中加入以下代码：
#! python3
# formFiller.py - Automatically fills in the form.
--snip--
formData = [{'name': 'Alice', 'fear': 'eavesdroppers', 'source': 'wand',
'robocop': 4, 'comments': 'Tell Bob I said hi.'},
{'name': 'Bob', 'fear': 'bees', 'source': 'amulet', 'robocop': 4,
'comments': 'n/a'},
{'name': 'Carol', 'fear': 'puppets', 'source': 'crystal ball',
'robocop': 1, 'comments': 'Please take the puppets out of the
break room.'},
{'name': 'Alex Murphy', 'fear': 'ED-209', 'source': 'money',
'robocop': 5, 'comments': 'Protect the innocent. Serve the public
trust. Uphold the law.'},