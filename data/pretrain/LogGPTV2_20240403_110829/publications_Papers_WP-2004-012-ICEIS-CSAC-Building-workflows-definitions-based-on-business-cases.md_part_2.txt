table. For each task, a scheduling function that rule the scheduling of tasks is
extracted (see equation 1). A scheduling function is a Boolean function for which the
parameters are business variables from the business case table. Each function models
the scheduling of a task at runtime, i.e. for a given set of business variables and their
assertion, the function indicates if a task is scheduled at runtime or not.
To extract a set of scheduling functions, we first need to map a business case table
to a truth table. The mapping can be achieved in the following way.
• For each business variable determine the minimum number of bits mnb necessary
to represent the variable. Represent each bit with a different binary variable (for
example, ‘a’, ‘b’, ‘c’, …).
• Create a mapping between each business variable value and a binary number,
starting with ‘0’. Each business variable value has mnb bits and can be represented
with a sequence of binary variables, for example, ‘ab’ or ‘/ab’ (the symbol /
indicates negation).
• Map the symbols (cid:57) and (cid:56) to the Boolean domain {0, 1}. The symbol (cid:56) is mapped
to ‘0’ and the symbol (cid:57) is mapped to ‘1’.
• Create a new table using the two mappings described previously.
6 Jorge Cardoso
Once the mapping is done, we can extract scheduling functions from the truth table.
he extracted functions are logic disjunctions of conjunctions of business variables.
Two methods can be used to generate the functions: Karnaugh maps [11] and the
Quine-McCluskey [12] method.
Table 3 shows a scheduling function table which was constructed based on the data
present in a business case table. The table is composed of three business variables ‘a’,
‘b’, and ‘c’. We have selected simple letters to represent business variables to
simplify the handling of the truth table.
Table 2. Scheduling table constructed from a business case table
Task Scheduling Function
Check Form 1
Sign /a/b
User Reservation /a/bc
Send Tickets /a/bc
Reject /a/b/c
Notify Manager /a/b
Book Flight /ab
Book Hotel /ab
Not Authorized a/b
Notify 1
The Quine-McCluskey method is particularly useful when extracting scheduling
functions with a large number of business variables. Additionally, computer programs
have been developed employing this algorithm. The use of this technique increases
the degree of automation of our methodology. Remember, that this was one of our
initial goals.
3.3 Identify Basic Block Structures
Business process management systems are process-centric, focusing on the
management of flow logic. Most workflow languages are able to model sequential,
parallel, and conditional routing which are modeled with standard structures such as
and-split, and-join, or-split, and or-join [13]. Tasks associated with sequential and
parallel building blocks are executed in a deterministic fashion, while conditional
blocks are examples of non-deterministic routing. Conditional blocks indicate that the
scheduling of a task depends on the evaluation of a Boolean condition.
This third phase consists of using the scheduling functions from the previous phase
and identifying the sequential, parallel, and conditional building blocks that will make
up the process in development. This phase is composed of two major steps:
• Identify sequential and parallel building block associated with a process and
• Organize these basic blocks using conditional building blocks.
Building workflows definitions based on business cases 7
Identifying Sequential and Parallel Structures. The objective of the first step is to
identify sequential and parallel structures, and define a partial order for the tasks
associated with these structures. To complete this step, the following activities are
performed:
a) Create a set S of sets s, where each set contains all the tasks that have the same
i
scheduling function,
b) Label each set with its scheduling function,
c) For each set, establish existing sequential and parallel building blocks, set a
partial order for the tasks
In the first activity, we produce a set S of scheduling sets s, where each set s
i i
contains all the tasks that have the same scheduling function. The idea is to create sets
of tasks with the following property: if a task of set s is scheduled at runtime, then all
i
of the tasks in s are also scheduled. The second activity associates each set with a
i
scheduling function label. Finally, the last activity establishes the sequential and
parallel building blocks and defines a partial order for each set s. Each set s can be
i i
organized using a sequential and/or a parallel basic building block structure. Fig. 3
shows an example of the diagrammatic representation of the sets created with their
scheduling functions.
Fig. 2. Parallel and sequential block structures and partial orders for the sets s
i
Conditional structures cannot occur for the sets s since non-determinism has
i
already been captured with the scheduling functions.
The establishment of sequential and parallel building blocks and partial orders may
require the use of null tasks (also known as dummy tasks). A null task does not have a
realization. Null tasks can be employed to modify a process to obtain structural
property (e.g., well-handled and sound) or to make possible the modeling of specific
business process procedures.
8 Jorge Cardoso
Identifying Conditional Structures. At this point, we have already identified the
sequential and parallel building blocks. The next step is to construct a task scheduling
graph based on the scheduling sets s. The aim of the graph is to identify the
i
conditional building blocks of a process and determine how they control and organize
the scheduling sets previously recognized (i.e. sequential and parallel building
blocks). A set of assumptions and rules are used to structure scheduling sets into a
process graph. The algorithm, assumptions, and rules used to identify conditional
structures and construct the workflow are described in [9]. An example of the
resulting process graph after applying the algorithm is shown in Fig 4.
Fig. 3. Task scheduling graph
Nevertheless, several workflow elements are missing. It is apparent in our example
that the workflow does not include any joins matching the or-splits and that the
workflow has several ending points.
Both problems can be solved by matching or-splits with or-joins. Aalst [14] has
pointed out the importance of balancing or/and-splits and or/and-joins to obtain what
is called a ‘good’ workflow. For example, two conditional flows created via an or-
split, should not be synchronized by an and-join, but an or-join should be used
instead. Matching or/and-splits may require the use of null tasks.
Setting Probabilities for Transitions. In order to enable the analysis of workflow
QoS, it is necessary to initialize task QoS metrics (the step was completed during the
business case construction) and initialize stochastic information which indicates the
probability of transitions being fired at runtime.
The process analyst – with the help of interviewees – needs to associate conditional
transitions with a probability between 0 and 100, i.e., each transition that connects
two sets s of the task scheduling graph needs to be associated with a probability. The
i
sum of the probabilities of the outgoing transitions of a set s needs to be 1. These
i
values are only estimates and can later be recomputed and updated according to the
workflow execution.
Building workflows definitions based on business cases 9
3.4 Cleaning, Analyzing, and Implementing the Workflow
In the last phase, we cleanup of any dummy (null) tasks and, if necessary, the
workflow may be slightly restructured or modified for reasons of clarity.
Since QoS estimates for tasks and for transitions have already been determined, we
can now use several techniques to analyze workflow QoS. Mathematical methods,
such as the Stochastic Workflow Reduction (SWR) algorithm [15], and Simulation
[16] can be used to compute overall QoS metrics for a workflow. Alternatively, the
workflow can be converted and analyzed using Petri nets and Petri nets analysis tools
[7].
Once the cleaning and analysis are completed, the process design is ready to be
implemented. The method proposed in [17] can be used to this end. Their method,
targeting more technical aspects, includes the selection of the target workflow system
and the mapping of graphical diagrams describing a business process at a high level
into a process specification.
4. Conclusions
Although major research has been carried out to enhance workflow systems, the work
on workflow application development lifecycles and methodologies is practically
inexistent. The development of adequate frameworks is of importance to guarantee
that workflow are constructed according to initial specifications.
Unfortunately, it is recognized that despite the diffusion of workflow systems,
methodologies and frameworks to support the development of workflow applications
are still missing. In this paper, we describe a framework to assist process analysts
during their interviews with administrative staff, managers, and employees in general
to design workflows.
The core of the framework presented has been employed successfully to design a
small size process. We believe that the framework is also appropriate to design larger
size workflows and that it represents a good step towards the modeling of business
processes.
References
1. Sheth, A.P., Aalst, W.v.d., and Arpinar, I.B. (1999): Processes Driving the Networked
Economy. IEEE Concurrency, 7(3): p. 18-31.
2. Cardoso, J. and Sheth, A. (2003): Semantic e-Workflow Composition. Journal of Intelligent
Information Systems (JIIS). 21(3): p. 191-225.
3. Sheth, A., Georgakopoulos, D., Joosten, S., Rusinkiewicz, M., Scacchi, W., Wileden, J.,
and Wolf, A. (1996): Report from the NSF Workshop on Workflow and Process Automation
in Information Systems. Deptartment of Computer Science, University of Georgia: Athens,
GA.
10 Jorge Cardoso
4. Sommerville, I. (2000): Software Engineering: Addison-Wesley Pub Co, 2000. 693.
5. Ould, M.A. (1995): Business Processes: Modelling and analysis for re-engineering and
improvement. Chichester, England, 1995.: John Wiley & Sons, 1995.
6. Cardoso, J. and Teixeira, J.C. (1998): Workflow Management Systems: A Prototype for the
University of Coimbra. in 5th International Conference on Concurrent Engineering. Tokyo,
Japan. p. 83-87
7. Aalst, W.M.P.v.d. (1998): The Application of Petri Nets to Workflow Management. The
Journal of Circuits, Systems and Computers, 8(1): p. 21-66.
8. Jacobson, I. (1995): The Object Advantage: Business Process Reengineering With Object
Technology: Addison-Wesley, 1995.
9. Cardoso, J. (2003): Poseidon: A framework to assist Web process design based on business
cases. University of Madeira: Funchal. p. 21.
10. Cardoso, J., Sheth, A., and Miller, J. (2002): Workflow Quality of Service. in International
Conference on Enterprise Integration and Modeling Technology and International
Enterprise Modeling Conference (ICEIMT/IEMC’02). Valencia, Spain, Kluwer Publishers
11. Karnaugh, M. (1953): The Map Method for Synthesis of Combinational Logic Circuits.
Transaction IEEE, 72: p. 593-599.
12. McCluskey, E.J. (1956): Algebraic minimization and the design of two-terminal contact
networks. Bell System Technical Journal, 35: p. 1417--1444.
13. Aalst, W.M.P.v.d., Barros, A.P., Hofstede, A.H.M.t., and Kiepuszeski, B. (2000): Advanced
Workflow Patterns. in Seventh IFCIS International Conference on Cooperative Information
Systems. p. 18-29
14. Aalst, W.M.P.v.d., Workflow Verification: Finding Control-Flow Errors Using Petri-Net-
Based Techniques, in Business Process Management: Models, Techniques, and Empirical
Studies. 2000, ed. A. Oberweis, Springer-Verlag: Berlin. p. 161-183.
15. Cardoso, J. (2002): Stochastic Workflow Reduction Algorithm, LSDIS Lab, Department of
Computer Science, University of Georgia.
http://lsdis.cs.uga.edu/proj/meteor/QoS/SWR_Algorithm.htm
16. Miller, J.A., Cardoso, J.S., and Silver, G. (2002): Using Simulation to Facilitate Effective
Workflow Adaptation. in Proceedings of the 35th Annual Simulation Symposium
(ANSS'02). San Diego, California. p. 177-181
17. Casati, F., Fugini, M., Mirbel, I., and Pernici, B. (2002): WIRES: a Methodology for
Designing Workflow Applications. Requirements Engineering Journal, 7(2): p. 73-106.