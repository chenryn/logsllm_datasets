# HDFI: Hardware-Assisted Data-Flow Isolation

**Authors:** Chengyu Song, Hyungon Moon, Monjur Alam, Insu Yun, Byoungyoung Lee, Taesoo Kim, Wenke Lee, Yunheung Paek  
**Affiliations:**  
- *Georgia Institute of Technology* (Chengyu Song, Monjur Alam, Insu Yun, Byoungyoung Lee, Taesoo Kim, Wenke Lee)  
- *Seoul National University* (Hyungon Moon, Yunheung Paek)  
**Conference:** 2016 IEEE Symposium on Security and Privacy

## Abstract
Memory corruption vulnerabilities are a primary cause of many modern attacks. Current defense mechanisms are often inadequate; software-based approaches lack efficiency, while hardware-based methods lack flexibility. In this paper, we introduce **HDFI (Hardware-Assisted Data-Flow Isolation)**, a fine-grained data isolation mechanism that is broadly applicable and highly efficient. HDFI enforces isolation at the machine word level by virtually extending each memory unit with an additional tag defined by data-flow. This capability allows HDFI to enforce various security models, such as the Biba Integrity Model and the Bell–LaPadula Model.

We implemented HDFI by extending the RISC-V instruction set architecture (ISA) and instantiated it on the Xilinx Zynq ZC706 evaluation board. We ran several benchmarks, including the SPEC CINT 2000 benchmark suite. Our evaluation results show that the performance overhead caused by our hardware modifications is low (< 2%). Additionally, we developed or ported several security mechanisms to leverage HDFI, including stack protection, standard library enhancement, virtual function table protection, code pointer protection, kernel data protection, and information leak prevention. Our results demonstrate that HDFI is easy to use, imposes minimal performance overhead, and enables more elegant and secure solutions.

## 1. Introduction
Memory corruption vulnerabilities are a leading cause of many modern attacks. To mitigate these threats, various security features have been integrated into modern computer systems, such as NX-bit (No-eXecute), Supervisor Mode Execution Protection (SMEP), Supervisor Mode Access Prevention (SMAP), and Memory Protection Extension (MPX). While these hardware-based security features are efficient, they do not provide adequate protection against complex memory-corruption-based attacks. For example, NX-bit can prevent simple code injection but is ineffective against code-reuse attacks like return-to-libc, return-oriented programming (ROP), COOP, and non-control data attacks.

To address these new attack vectors, researchers have proposed additional hardware-based mechanisms. For instance, hardware-based shadow stacks protect return addresses from tampering [46, 59, 81], and hardware-based control-flow integrity (CFI) prevents code-reuse attacks [18, 23, 24, 41]. Other approaches aim to eliminate the root causes of memory corruption vulnerabilities [27, 51, 52, 77].

Our work also aims to prevent memory corruption exploits. We propose a new hardware feature that provides both flexibility and performance. Our key observation is that enforcing memory safety for an entire application is too expensive, even with hardware support. For example, WatchDogLite [52] imposes a 29% slowdown on SPEC CINT 2006 benchmarks. To reduce performance overhead, we divide memory into sensitive and non-sensitive regions, enforcing memory safety only over the sensitive region. This approach has two main advantages: sensitive data is usually smaller, reducing the number of checks and performance overhead, and static verification of memory operations over sensitive data is easier.

However, implementing this strategy on commodity hardware is challenging due to the lack of efficient, fine-grained data isolation mechanisms. Table I compares existing software-based and hardware-based isolation mechanisms, highlighting their limitations. The most efficient hardware-based mechanisms—segmentation in x86 and access domains in ARM—are absent in 64-bit mode, forcing a trade-off between security and performance. Even if these mechanisms were available, they would still be inadequate due to their coarse granularity, which requires data shadowing, introducing additional performance and memory overhead.

To overcome these limitations, we propose **HDFI (Hardware-Assisted Data-Flow Isolation)**, a fine-grained data isolation mechanism. HDFI enforces isolation at the machine word level by virtually extending each memory unit with an additional tag. This tag is defined by data-flow, allowing developers to enforce different security models. For example, to protect the integrity of sensitive data, HDFI can enforce the Biba Integrity Model. Similarly, for confidentiality, HDFI can enforce the Bell–LaPadula Model.

We implemented HDFI by extending the RISC-V ISA and instantiated it on the Xilinx Zynq ZC706 evaluation board. Our evaluation shows that the performance overhead is low (< 2%). We also developed and ported six security mechanisms to leverage HDFI, demonstrating its ease of use and effectiveness in enhancing security and performance.

## 2. Threat Model and Assumptions
In this work, we focus on preventing memory corruption-based attacks. We assume that software may contain one or more memory vulnerabilities that, once triggered, allow attackers to perform arbitrary memory reads and writes. We do not limit what attackers might do with this access, making our threat model comprehensive and realistic.

---

This revised version of the text is more structured, clear, and professional. It maintains the technical details while improving readability and coherence.