### 5.1 分支监视概览

分支监视是跟踪和记录CPU执行路径的基本手段，对软件优化和调试至关重要。在早期的CPU架构中，由于缺乏内部高速缓存（cache），所有内存读写操作必须通过前端总线进行。因此，使用逻辑分析仪等工具可以监控到CPU的所有内存读写动作，特别是取指操作（从特定内存地址读取指令）。特别是在CPU执行分支指令后，可以通过分析接下来的取指地址来确定CPU选择了哪个分支。对于没有高速缓存的传统处理器，可以通过观察前端总线来了解其执行路径。

然而，现代集成有高速缓存的处理器改变了这一情况。这类处理器会批量地将代码读入高速缓存，然后从高速缓存中读取、解码并执行指令。这种机制使得位于前端总线上的调试工具无法精确地观察到所有的取指操作，从而难以追踪CPU的执行轨迹。

为解决这一问题，奔腾处理器引入了一种特殊的总线事务——分支踪迹消息（Branch Trace Message, BTM）。当BTM功能启用时，CPU在每次执行分支或改变执行路径时都会发起一个BTM事务，将分支信息发送到前端总线上。这样，调试工具便可以通过监听和读取BTM消息来跟踪CPU的执行路径。

尽管硬件调试工具价格昂贵且设置复杂，P6处理器引入了通过内部寄存器记录分支信息的功能。只需进行必要的设置，CPU便会将分支信息记录到特定的寄存器中。不过，寄存器容量有限，于是奔腾4处理器进一步引入了通过特定内存区域记录分支信息的功能。本章后续部分将详细讨论这两种分支监视机制。

### 5.2 使用寄存器的分支记录

#### 5.2.1 LBR

P6处理器首次引入了使用MSR寄存器记录分支的方法，称为Last Branch Recording (LBR)。该方法能够记录最近一次分支的源和目标地址。奔腾4处理器对此进行了增强，增加了寄存器数量，以栈的形式保存多个分支记录，称为LBR栈 (LBR Stack)。

P6处理器设计了以下五个MSR寄存器来实现LBR机制：
- `LastBranchToIP` 和 `LastBranchFromIP` 寄存器用于记录分支。
- `LastExceptionToIP` 和 `LastExceptionFromIP` 寄存器用于记录异常。
- `DebugCtl` 寄存器控制新加入的调试功能，其格式如图5-2所示。

当发生分支时，`LastBranchFromIP` 记录分支指令的地址，`LastBranchToIP` 记录目标地址。如果发生异常或中断（除调试异常外），CPU会先将 `LastBranchToIP` 和 `LastBranchFromIP` 的内容复制到 `LastExceptionToIP` 和 `LastExceptionFromIP` 中，再更新 `LastBranchFromIP` 和 `LastBranchToIP` 以记录被打断的地址和异常处理程序的地址。

`DebugCtl` 寄存器虽然只有32位，但仅使用低7位，各比特位含义如下：
- **LBR**：启用LBR机制。置1时，处理器使用上述四个寄存器记录分支和异常位置。P6处理器在产生调试异常时会自动清除此位，防止调试异常处理函数内的分支覆盖原有结果。
- **BTF (Branch Trace Flag)**：启用按分支单步执行。置1时，CPU将标志寄存器EFLAGS的TF（陷阱标志）位视为“针对分支单步执行”。即当BTF和TF均为1时，在下一个分支指令执行后会产生调试异常。
- **PB0-PB3**：与CPU上的BP0#-BP3#引脚相对应。置1时，当检测到相应调试地址寄存器（DR0-DR3）定义的断点条件时，会设置对应的引脚；置0时，性能计数器值增加或溢出时，会反转对应引脚电平。
- **TR (Trace message enable)**：启用或禁止向前端总线发送分支踪迹消息（BTM）。置1时，CPU会在检测到分支、中断或异常时向FSB发送BTM消息，通知调试工具。启用此功能可能会影响CPU性能。

#### 5.2.2 LBR栈

P6处理器的LBR机制只能记录最近一次的分支和异常，而奔腾4处理器增强了这一功能，引入了“最近分支记录堆栈”（LBR栈），可以记录多次分支和异常。奔腾M处理器和Core系列处理器也支持LBR栈。

LBR栈是一个环形栈，由若干个用于记录分支地址的MSR寄存器（称为LBR MSR）和一个表示栈顶指针的MSR寄存器（称为MSR_LASTBRANCH_TOS）组成。CPU在将新的分支记录放入堆栈前会先递增TOS，当TOS达到最大值时会自动归零。

LBR栈的容量因CPU型号不同而异，目前产品的可能值为4、8、16或32。可通过CPUID指令获取CPU的Family和Model号，再根据Model号确定LBR MSR的数量。

以奔腾4 CPU为例：
- Model号为0～2的处理器有4个LBR MSR寄存器（MSR_LASTBRANCH_0～MSR_LASTBRANCH_3），每个寄存器长度为64位，高32位为目标地址（To），低32位为分支指令地址（From）。最多可记录4次最近的分支、中断或异常。
- Model号大于等于3的处理器有32个LBR MSR寄存器，分为16对（MSR_LASTBRANCH_0_FROM_LIP～MSR_LASTBRANCH_15_FROM_LIP 和 MSR_LASTBRANCH_0_TO_LIP～MSR_LASTBRANCH_15_TO_LIP），每个寄存器长度为64位，高32位保留未用，最多可记录16次最近的分支、中断或异常。

奔腾M处理器定义了8个LBR寄存器（MSR_LASTBRANCH_0～MSR_LASTBRANCH_7），地址为0x40～0x47。这些寄存器都是64位的，低32位记录From地址，高32位记录To地址。

Core微架构的CPU通常有8～64个LBR寄存器，分为4～32对（MSR_LASTBRANCH_0_FROM_IP～MSR_LASTBRANCH_x_FROM_IP 和 MSR_LASTBRANCH_0_TO_IP～MSR_LASTBRANCH_x_TO_IP），这些寄存器都是64位的，可以记录最近4～32次分支、中断或异常。

LBR寄存器中的内容可能因CPU型号不同而异。在P6处理器中，分支记录寄存器保存的是相对于当前代码段的偏移地址；在Pentium 4处理器中，LBR栈记录的是线性地址；在Core微架构的CPU中，可通过IA32_PERF_CAPABILITIES寄存器的0～5位（[5:0]，LBR_FMT）的值来判断具体信息，请参见IA手册卷3B的第17～18章。

#### 5.2.3 示例

为了演示如何使用LBR寄存器了解CPU的执行轨迹，我们编写了一个WinDBG扩展模块（DLL），名为LBR.DLL。执行这个模块的lbr命令，便可以访问和显示LBR寄存器的内容。清单5-1列出了演示性的源代码。完整的代码和项目文件在chap05\lbr目录下。

```c
// WinDBG扩展模型，用于读取LBR寄存器
#define LBR_COUNT 8
#define LBR_MSR_START_ADDR 0x40
#define MSR_LASTBRANCH_TOS 0x1c9
#define MSR_DEBUGCTLB      0x1d9

DECLARE_API(lbr)
{
    ULONG64 llDbgCtrl, llLBR;
    ULONG ulFrom, ulTo, ulTos;
    CHAR szSymbol[MAX_PATH];
    ULONG ulDisplacement;
    int nToRead;

    Version();
    ReadMsr(MSR_DEBUGCTLB, &llDbgCtrl);
    dprintf("MSR_DEBUGCTLB=%x\n", (ULONG)llDbgCtrl);
    llDbgCtrl &= 0xFFFFFFFE; // 清除LBR位, 位0
    WriteMsr(MSR_DEBUGCTLB, llDbgCtrl);
    dprintf("LBR bit is cleared now.\n");

    ReadMsr(MSR_LASTBRANCH_TOS, &llLBR);
    ulTos = llLBR & 0xF;
    dprintf("MSR_LASTBRANCH_TOS=%x\n", ulTos);

    nToRead = ulTos;
    for (int i = 0; i < LBR_COUNT; i++)
    {
        if (nToRead >= LBR_COUNT)
            break;

        ReadMsr(LBR_MSR_START_ADDR + nToRead, &llLBR);
        ulTo = (ULONG)(llLBR >> 32);
        ulFrom = (ULONG)llLBR;

        szSymbol[0] = '!';
        GetSymbol((PVOID)ulTo, (PUCHAR)szSymbol, &ulDisplacement);
        dprintf("MSR_LASTBRANCH_%x: [%08lx] %s+%x\n", nToRead, ulTo, szSymbol, ulDisplacement);

        szSymbol[0] = '!';
        GetSymbol((PVOID)ulFrom, (PUCHAR)szSymbol, &ulDisplacement);
        dprintf("MSR_LASTBRANCH_%x: [%08lx] %s+%x\n", nToRead, ulFrom, szSymbol, ulDisplacement);

        nToRead--;
        if (nToRead < 0)
            nToRead = LBR_COUNT - 1;
    }
}
```

运行示例：
```
!lbr.lbr
Access LBR (Last Branch Recording) registers of IA-32 CPU.
Version 1.0.0.2 by Raymond
MSR_DEBUGCTLB=1
LBR bit is cleared now.
MSR_LASTBRANCH_TOS=5
```

通过以上代码和示例，您可以详细了解如何使用LBR寄存器来跟踪CPU的执行路径。