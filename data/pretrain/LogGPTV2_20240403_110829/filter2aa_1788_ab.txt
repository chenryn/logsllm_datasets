 3  First embedded firmware 
void main(void) { 
    OSCCON = 0x73;  
    lcdInit(); 
    lcdDefconLogo(); 
    lcdCommand(0x80); 
    lcdChar(0); 
    lcdChar(1); 
    lcdChar(2); 
    lcdString(" Defcon"); 
    lcdCommand(0xC0); 
    lcdChar(3); 
    lcdChar(4); 
    lcdChar(5); 
    lcdString("mBed workshop"); 
    adInit(); 
    for (;;) { 
        lcdCommand(0x8B); 
        lcdChar((adRead() / 1000) % 10 + 48); 
        lcdChar((adRead() / 100) % 10 + 48); 
        lcdChar((adRead() / 10) % 10 + 48); 
        lcdChar((adRead() / 1) % 10 + 48); 
    } 
} 
9 
 4  What is a kernel? 
In computer science the kernel is the software part of the system responsible to implement the interface 
and manage the hardware and the application. The most critical hardware resources to be managed are the 
processor, the memory and I/O drivers. 
Another task that is commonly provided by the kernel is the process management. This is even more 
important in embedded context, when, in general, the processes have strict time requirements. 
When there is no kernel, all the responsibility of organizing the processes, hardware or application  
processes, is over the programmer. 
10 
 5  Kernel components 
In general a kernel has three main responsibilities: 
1) Manage and coordinate the processes 
execution using “some criteria” 
The “some criterea” can be the maximum execution time, the function's priorities, the event criticity, the 
programmed execution sequence among others. It is this criteria which distinguishes the preemptive kernel 
(which each process has a maximum time to be executed, if the time runs out the next process is started and 
when it finishes, or its time expire, the first process is recalled from the exact point were it was interrupt) from 
the cooperative (which each process will be executed until it ends and after it the next is called). As it is 
responsible to manage the process, it should have functions that allow the inclusion of a new process or the 
remove of an older one. 
As each process uses, internally, some amount of memory for its variables, the kernel should handle it to. 
It is the second kernel responsibility. 
2) Manage the free memory and coordinate 
the processes access to it 
The kernel should also be capable to inform to the process when a malloc() function could not be 
accomplished. 
Aside the memory, the processes may also need to get access to the I/O resources from the 
computer/microcontroler as serial ports, lcd displays, keyboards among others. The responsible to allow/deny 
the access from the processes to the hardware devices is the kernel. This is the third kernel responsibility: 
3) Intermediate the communication between the  
hardware drivers and the processes 
The kernel should provide an API which the processes can safely access the information available in the 
hardware, both to read and to write. 
11 
 6  Kernel Project 
 6.1  Why to develop our own kernel? 
Having your own kernel can improve home design while still giving the developers full control over the 
source. 
With the single-loop architecture, you need to re-test almost everything every time you reuse code. 
When the kernel is full tested, there is no problem in reuse. Even the applications have a better reuse rate as 
the kernel keeps the hardware abstraction layer even if the chip is changed. 
When planning to use a kernel in your new system development, always consider all alternatives, both 
paid and free. 
Even if the home design option was choosen start with a free project as basis. Both OpenRTOS and BRTOS 
are really small (BRTOS has only 7 code files, and only one is hardware dependent) and their licenses are more 
permissive (you can close the source code). Another great source information is the linux kernel 
(www.kernel.org). There are as much as 10k lines added daily! 
 6.2  Alternatives 
There are lots of options for moving from a kernel-less to a kernel design. Paid solutions have some 
benefits, mainly for the technical support. Below are presented some options with their descriptions. 
Windows Embedded Compact® is the Windows version for small computers and embedded systems. It is 
a modular real-time operating system with a kernel that can run in under 1 MB of memory. It is available for 
ARM, MIPS, SuperH and x86 processor architectures. The source code is available to modifications for the 
developer. 
VxWorks® is a real-time operating system. It has been ported and optmize to embedded systems, 
including x86 family, MIPS, PowerPC, Freescale ColdFire, Intel i960, SPARC, SH-4 and ARM. In its smallest option 
(fully static) have a footprint of just 36k. 
X RTOS®: this kernel is mainly aimed in Deeply Embedded Systems with severe temporal restriction and 
computer resources. It supports ARM and Power PC processors. 
uClinux is a derivative of Linux kernel intended for microcontrollers without Memory Management Units 
(MMUs). As an operating system it includes Linux kernel as well as a collection of user applications, libraries and 
tool chains. The kernel can be compiled to a footprint of just 2k. 
FreeRTOS kernel consists of only three or four C files (there are a few assembler functions included where 
needed). SafeRTOS is based on the FreeRTOS code base but has been updated, documented, tested and audited 
to enable its use in IEC 61508 safety related applications. 
BRTOS is a lightweight preemptive real time operating system designed for low end microcontrollers. It 
supports a preemptive scheduler, semaphores, mutexes, message queues and mailboxes. It is written mostly in 
C language, with little assembly code. There are ports to Coldfire V1, HCS08, RX600, MSP430, ATMEGA328/128 
and Microchip PIC18. It can be compiled to just 2KB of program memory and about 100bytes of RAM. 
 6.3  Monolithic kernel versus microkernel 
The main difference between these architectures are the amount of functions that are implemented 
inside the kernel space. By keeping a minimalistic approach, microkernels tend to use less resources from the 
cpu. Becouse the device drivers are now in the user space, microkernels tend to be less susceptible from drivers 
crash. It is also easier to maintain an microkernel because its small source code size, generally under 10.000 
12 
lines. As Jochen Liedtke stated: 
“A concept is tolerated inside the microkernel only if moving it outside the kernel, i.e., permitting 
competing implementations, would prevent the implementation of the system's required functionality.” 
 6.4  Kernel design decisions: 
The designer should consider some points before star the development of the kernel: 
I/O devices management: How should the kernel implement the device interface? Inside the kernel? 
Using devices drivers? Will it use a separated driver controller or it will be implicit in kernel activities? The direct 
access (application<>driver) will be possible? In which case? In case of hot-plug devices how the kernel will load 
the drive dynamically? 
Process management: The kernel context switch will be cooperative or preemptive? How the process can 
communicate with each other? Will a message queue be implemented? Should it have an shared memory? 
How to control its access? Will semaphores be available? Is there any need to implement process priority 
check? 
System safety: Is there any hardware safety item to be used (watchdog, protected memory)? Will 
hierarchical protection be used? If so, does the CPU support MMU or the design can go on with the slowdown 
of software protection checking? The system should try to close and restart an unanswered process 
automatically? 
Decide carefully, some of these decisions cannot be changed without a complete source code rewrite, 
other ones can be delayed until latter in the project. Bring the hardware responsible to help in this definition, 
some of the decisions are very hardware dependent. 
 6.5  This course decisions 
In this course we will present a simple non-preemptive, cooperative microkernel, without memory 
management using an device driver controller to isolate the devices drivers from the kernel. The processes will 
be scheduled based on their execution frequency necessities. 
13 
 7  Concepts 
Kernel development require some deep knowledge in programming and hardware/software issues. Some 
of these points will be presented ahead. 
 7.1  Function pointers 
In some situation we want our program to choose which function to execute, for example an image 
editor: use the function blur or the function sharpen at some image. Declaring both function: 
image Blur(image nImg){ 
 // Function implementation 
} 
image Sharpen(image nImg){  
 // Function implementation 
} 
We can build the image editor engine as: 
image imageEditorEngine(image nImg, int option){ 
 image temp; 
 switch(option){ 
case 1: 
temp = Sharpen(nImg); 
 break; 
 case 2: 
temp = Blur(nImg); 
 break; 
 } 
 return temp; 
} 
Its clear that we need to change the engine code if we need to add some more features. In general, 
changing the code means more tests and more bugs. 
Another option is to made the engine a little bit more generic by using function pointers. 
//declaracao do tipo ponteiro para função 
typedef image (*ptrFunc)(image nImg); 
//chamado pelo editor de imagens 
image imageEditorEngine(ptrFunc function, image nImg){ 
 image temp; 
 temp = (*function)(nImg); 
 return temp; 
} 
From the code we could note that the function receives now an pointer to function as parameter. This 
way we do not need to worry about adding features, the main code will be kept intact. One of the drawbacks is 
that all functions now must have the same signature, it means, they must receive the same type parameters in 
the same order and the return variable must be of the same type. 
Using function pointers concept we can than use the Blur and Sharpen functions in an easier way: 
//... 
 image nImage = getCameraImage(); 
 nImage = imageEditorEngine(Blur, nImagem); 
 nImage = imageEditorEngine(Sharpen, nImagem); 
//...  
The 
functions 
are 
passed 
as 
if 
they 
were 
variables. 
14 
By essentially being an pointer, we must dereference the variable before using the function: 
  temp = (*function)(nImg); 
We can also store the function passed as parameter as a conventional variable. This way we can call that 
function latter in the program (only the pointer is stored, no code is actually copied). 
The syntax function pointer declaration is somehow complex. Normally we use a typedef to make things 
clear. 
 7.2  First example 
In this first example we will build the main part of our kernel. It should have a way to store which 
functions are needed to be executed and in which order. To accomplish this we will use an vector of function 
pointers: 
//pointer function declaration 
typedef void(*ptrFunc)(void); 
//process pool 
static ptrFunc pool[4]; 
Our processes will be of ptrFunc type, i.e. they do not receive any parameters and do not return anything. 
Each process will be represented by a function. Here are three examples 
static void tst1(void) { printf("Process 1\n");} 
static void tst2(void) { printf("Process 2\n");} 
static void tst3(void) { printf("Process 3\n");} 
These processes just print their name on the console/default output. 
The kernel itself has three functions, one to initialize itself, one to add new process to the process pool, 
and one to start the execution. As it is supposed that the kernel never wears off, we build an infinite loop inside 
its execution function. 
//kernel variables 
static ptrFunc pool[4]; 
static int end; 
//protótipos das funções do kernel 
static void kernelInit(void); 
static void kernelAddProc(ptrFunc newFunc); 
static void kernelLoop(void); 
//funções do kernel 
static void kernelInit(void){ 
 end = 0; 
} 
static void kernelAddProc(ptrFunc newFunc){ 
 if (end <4){ 
pool[end] = newFunc; 
end++; 
 } 
} 
static void kernelLoop(void){ 
 int i; 
 for(i=0; i<end;i++){ 
(*pool[i])(); 
 } 
} 
In this first example the kernel only execute the functions that are given to it, in the order which they 
were called. There is no other control. The process pool size is defined statically. 
To use the kernel we should follow three steps: initialize the kernel, add the desired processes, and 
15 
execute the kernel.  
void main(void){ 
 kernelInit(); 
 kernelAddProc(tst1); 
 kernelAddProc(tst2); 
 kernelAddProc(tst3); 
 kernelLoop(); 
} 
 7.3  Structs 
Structs are composed variables. With them we can group lots of information and work with them as if 
they were one single variable. They can be compared with vectors, but each position can store a different type 
variable. Here is an example: 
typedef struct{ 
 unsigned short int age; 
 char name[51]; 
 float weight; 
}people; // struct declaration 
void main(void){ 
 struct people myself = {26, "Rodrigo", 70.5}; 
 //using each variable from the struct 
 printf("Age:    %d\n", myself.age); 
 printf("Name:   %s\n", myself.name); 
 printf("Weight: %f\n", myself.weight); 
 return 0; 
} 
To build a functional kernel, we need to aggregate more information about each process. We will make it 
through a struct. For now just the function pointer is enough. As more information is needed (as process ID or 
priority) we will add to the process struct. 
//function pointer declaration 
typedef char(*ptrFunc)(void); 
//process struct 
typedef struct { 
 ptrFunc function; 
} process; 
We should note that now every process must return a char. We will use it as returning condition indicating 
success or failure. 
 7.4  Circular buffers 
Buffers are memory spaces with the propose of storing temporary data. Circular buffers can be 
implemented using a normal vector with two indexes, one indicating the list start and other indicating the list 
end. 
The main problem with this implementation is to define when the vector is full or empty, as in both cases 
the start and the end index are pointing to the same place. 
There are at least 4 alternatives on how to resolve this problem. In order to keep the system simplicity we 
will keep the last slot always open, in this case if (start==end) the list is empty. 
16 
Below there is an example on how to cycle through all the vector an infinite number of times: 
#define CB_SIZE 10 
int circular_buffer[CB_SIZE]; 
int index=0; 
for(;;){ 
 //do anything with the buffer 
 circular_buffer[index] = index; 
 //increment the index 
 index = (index+1)%CB_SIZE; 
} 
To add one element to the buffer (avoiding overflow) we can implement a function like this: 
#define CB_SIZE 10 
int circular_buffer[CB_SIZE]; 
int start=0; 
int end =0; 
char AddBuff(int newData){ 
 //check if there is space to add any number 
 if ( ((end+1)%CB_SIZE) != start){ 
circular_buffer[end] = newData; 
end = (end+1)%CB_SIZE; 
return SUCCESS; 