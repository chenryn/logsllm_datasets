b
Each hash tree computed over each one-time signature has a root
value ri,e; we use ri,e to denote the root value that serves as single-
ASN public key for the one-time signature with the single-ASN pri-
vate key ci,e. We then build a hash tree over the ri,e values, and use
re to denote the root value of that tree. We call re an epoch public
key, since it can be used to verify all the one-time signatures in the
ASPATH protector within one epoch.
Each ASPATH protector would need to carry all the single-ASN
private keys to enable subsequent ASes to sign in their ASN into
the protector. To lower the communication overhead, we use a one-
way chain to link the single-ASN private keys—this approach has
the advantage that all subsequent single-ASN private keys can be
derived from a previous single-ASN private key. Hence, value c1,e
serves as the single-ASN private key for the ﬁrst ASN, and as the
seed value for the one-way hash chain which spans the subsequent
single-ASN private keys c2,e, c3,e, . . . , c(cid:3),e where ci+1,e = H[ci,e].
Figure 2 shows one ASPATH protector, securing an ASPATH
with up to four ASNs. The arrow from c1,0 to c2,0 in Figure 2
depicts the one-way function application: c2,0 = H[c1,0].
ASPATH Protector Use and Veriﬁcation.
In each epoch the
owner of a preﬁx uses one ASPATH protector to announce its pre-
ﬁx in an UPDATE message.
In the basic scheme, each one-time
signature is used to sign one ASN into the ASPATH protector. As
the ASPATH is passed in the UPDATE message, each AS uses the
next single-ASN private key to sign its ASN into the protector, re-
moving the current single-ASN private key ci,e by following the
one-way chain one step and passing ci+1,e = H[ci,e] to the next AS.
Based on the multi-epoch public key, an AS can verify an ASPATH
protector.
For example, consider three ASes with the following connectiv-
ity A ↔ B ↔ C. AS A signs H[A] with the HORS signature spanned
by value c1,0, and sends to B the signature along with c2,0.
We assume that B has an multi-epoch public key to verify r0,
the root of the hash tree. B can verify all the one-time signatures
in the ASPATH protector by recomputing all one-time signatures
and verifying that the ﬁnal root value matches r0. If successful, the
AS knows that all one-time signatures are correct, if not successful,
at least one of the values must be false.11 More concretely, B ﬁrst
veriﬁes the correctness of the one-time signature, and checks that
H[A] is correctly encoded in the ﬁrst HORS one-time signature.
Based on A’s one-time signature, B can compute value r1,0, and
based on value c2,0 it computes r2,0. B then follows the one-way
hash chain and computes c3,0 = H[c2,0], . . . , c(cid:3),0 and from those
single-ASN private keys it can compute r3,0, . . . , r(cid:3),0. Based on all
these values, B next computes the root of the hash tree, and veriﬁes
if it matches value r0. If it matches, it knows that all signatures are
correct.
B then signs H[(cid:8)A, B(cid:9)] with the one-time signature spanned by
c2,0, and sends on A’s and B’s signature along with c3,0 to C. To
allow further propagation of the UPDATE, B includes c3,0, thus al-
lowing C to advertise the route after appending its identiﬁer.
(cid:3)
values are used to prevent disclosing a neighboring b value when publishing
9In Section 5, we discuss our choice for n and m and the resulting security margin.
10The b
the b values in a signature; Section 4.2.2 presents more details on this.
11Unfortunately, it is not possible to determine which signature is false; however, be-
cause the previous SPV speaker should have veriﬁed the signatures before sending
them out, we can infer that the previous SPV speaker must be malicious. This reason-
ing does not apply, however, if the UPDATE is received from a legacy AS.
r0
r1
r2
r3
r4
r5
r6
r7
r8
r9
r10 r11 r12 r13 r14 r15
Figure 3: This ﬁgure shows a hash tree constructed over the
epoch public keys (root nodes of 16 ASPATH protectors). The
root node of this tree is the multi-epoch public key, which is
signed with the preﬁx public key to form the multi-epoch cer-
tiﬁcate.
Figure 3 shows the hash tree that enables authentication of mul-
tiple ASPATH protectors. The root value can be used to authenti-
cate the root value of each ASPATH protector, The internal nodes
of the tree needed to authenticate values within a given ASPATH
protector are included in the UPDATE.
By construction, our ASPATH protector secures the ASPATH
against modiﬁcations, in particular against route shortening. One
of the main advantages is the efﬁciency of authentication genera-
tion and veriﬁcation, as we discuss in Section 5. In addition, the
one-way hash function design enables several new properties not
achieved by previously proposed mechanisms. Consider an AS that
does not use SPV, but transparently forwards SPV values as part of
the BGP UPDATE, unaltered. If the next AS implements SPV, it
can construct the ASPATH protector as if the previous AS imple-
mented SPV, as no AS-speciﬁc private key is involved in updating
the ASPATH protector. This property is important for incremental
deployment.
(cid:3)
4.4 Advanced ASPATH Protector
The basic ASPATH protector has several drawbacks that we rem-
edy in this section. We discuss each drawback in turn and de-
scribe our countermeasure. The collection of all the countermea-
sures make up the advanced ASPATH protector.
Repeatable and Predictable Fraud. As we discuss
in
Section 4.2.3, one way to forge a one-time signature is to
was signed that has an identical
claim that a different message M
(cid:3)]), or that the
hash as the legitimate message M (so H[M] = H[M
(cid:3)] allows attacker to forge a valid signature given
encoding of H[M
the disclosed values of multiple one-time signatures. For example,
if C receives the UPDATE from B with ASPATH (cid:8)A, B(cid:9), it can
replace B with C if H[(cid:8)A, B(cid:9)] = H[(cid:8)A,C(cid:9)]. Similarly, if C receives
two ASPATHs (cid:8)A, B(cid:9) and (cid:8)A, F(cid:9) for the same preﬁx, it learns more
values of the second one-time signature and may be able to encode
H[(cid:8)A,C(cid:9)]. In both cases, if the condition is satisﬁed C will always
be able to forge a bogus ASPATH for all updates. As a counter-
measure, we add the epoch number e to each hash operation, so
instead of computing H[(cid:8)A, B(cid:9)] we compute H[e || (cid:8)A, B(cid:9)]. This
approach makes the probability of forgery independent between
epochs, so an attacker cannot deterministically cheat. Thus, if an
attacker can cheat with a low probability p, the probability that it
can cheat each time in x successive epochs is px.
Single Malicious AS Fraud.
In the basic ASPATH protector, an
attacker can easily forge a false ASPATH. Since the one-time signa-
ture is not binding the AS to sign its own ASN, a malicious AS can
sign an arbitrary ASN into the ASPATH protector before sending
it on to the next AS. However, this attack is easily prevented: the
receiving AS needs to verify that the sending AS is the last ASN in
the ASPATH.
Even with this rule, a malicious AS can still forge a false
ASPATH as follows. Consider that malicious AS C has two le-
gitimate neighbor ASes B and D that both implement SPV. When
C receives a preﬁx from B with the ASPATH (cid:8)A, B(cid:9), C can send the
forged ASPATH (cid:8)A, B, M,C(cid:9) to D. In the basic ASPATH protector,
C can simply use two one-time signatures to sign in M and C.
To prevent this attack, we require that the previous AS already
signs in the next AS into the ASPATH protector. (This approach is
similar to the route attestations in S-BGP, where an AS delegates
the right to forward an UPDATE to the following AS.) In the case
we describe above, when B forwards an UPDATE with ASPATH
(cid:8)A, B(cid:9) to C, B will sign H[e || (cid:8)A, B,C(cid:9)] into the one-time signature.
Moreover, when C forwards the UPDATE, D will verify that C’s
signature encodes H[e || (cid:8)A, B,C, D(cid:9)]. It is now clear that C cannot
cheat any more, as it would need to create an ASPATH such as
(cid:8)A, B,C, M,C(cid:9) which D could discard because it contains a loop.
Because each AS now signs the next ASN into an single-ASN
signature, we can optimize the efﬁciency of AS path prepending.
In particular, we specify that a node that wishes to include its ASN
more than once does not consume additional single-ASN signatures
for the additional ASNs, but rather includes them when it signs in
the next hop. For example, if B wishes to use AS path prepending
in the above example, then it signs H[e || (cid:8)A, B, B,C(cid:9)] into the one-
time signature.
Multi-path Truncation Attack.
If a malicious AS receives mul-
tiple UPDATEs with ASPATHs of different length, it may be able
to mount a multi-path truncation attack. For example, suppose
a router has an authenticator for the ASPATH (cid:8)A, B,C, D(cid:9), and
an authenticator for the ASPATH (cid:8)A, E, F, G, H, D(cid:9). From the
ﬁrst ASPATH, the router has the single-ASN private key for the
ASPATH protector representing the ﬁfth AS. The attacker can use
that private key to modify the second ASPATH; for example, the
attacker can change that ASPATH to (cid:8)A, E, F, G, D(cid:9), by using the
single-ASN private keys from the ﬁrst ASPATH to secure its own
place, and the ASPATH public values from the second ASPATH to
secure the path up to itself. However, the resulting truncated path
will be one AS longer than if the malicious AS would simply for-
ward the shorter ASPATH, but the longer (altered) ASPATH may
get precedence due to routing policy. In this section, we discuss a
novel technique for reducing the impact of an attacker who wishes
to truncate longer ASPATHs based on information learned from
shorter ASPATHs, which we call postmodiﬁcation.
In our postmodiﬁcation mechanism, we modify the signature
such that the quality of a single-ASN signature degrades as the sig-
nature travels farther from the signer. In particular, we added an
additional level of values into the ASPATH authenticator, to allow
for degradation of the private values without converting them into
public values. Previously, the hash tree was constructed over the
(cid:3)
(cid:3)
i, j,e values, and now we use these b
i, j,e values as “semi-private”
b
values for the purpose of postmodiﬁcation and add another layer
(cid:3)(cid:3)
], trading off computation overhead with
of values b
i, j,e
increased security.
(cid:3)
= H[b
i, j,e
We now describe the ASPATH postmodiﬁcation technique in
more detail, and then give a concrete example. As before, we re-
veal m private values in each one-time signature. In addition, an
AS degrades some private values of prior single-ASN signatures
into semi-private values. We use µi to denote the number of pri-
vate values that remain in the signature after i hops. When a private
value is removed, the corresponding semi-private value is added,
such that each signature always has a total of m values: µi private
values and m − µi semi-private values. These µi values are mono-
tonically decreasing: m = µ0 ≥ µ1 ≥ . . . ≥ µ∞ = 0.
We now give a concrete example of postmodiﬁcation. We as-
sume that n = 4, m = 2, µ0 = 2, µ1 = 1, µ2 = 0, and that we
are in epoch e = 0. Consider four ASes with the connectivity
re
ri,e
(cid:3)(cid:3)
b
i, j,e
(cid:3)
b
i, j,e
bi, j,e
c1,e
c2,e
c3,e
c4,e
Figure 4: This ﬁgure shows a diagram of one ASPATH
Protector using the postmodiﬁcation mechanism. The grey cir-
cles represent the values of the ASPATH Protector that an AS
receives in an UPDATE: the origin AS signs the ﬁrst two ASNs
with the one-time signature spanned by c1,e, the second AS
signs the ﬁrst three ASNs with the one-time signature spanned
by c2,e, etc. We describe the details on which values are dis-
closed in the text.
A ↔ B ↔ C ↔ D. Figure 4 shows the ASPATH protector that AS D
receives from C. AS A signs h = H[0 || (cid:8)A, B(cid:9)] with the HORS sig-
nature spanned by value c1,0 (private values b1,1,0 and b1,4,0 were
chosen, indicated by the black circles in the ﬁgure). These values
(cid:3)(cid:3)
(cid:3)(cid:3)
are then sent along with c2,0 to B together with b
1,2,0 and b
1,3,0
(which are needed to authenticate those values).
B computes the hash h = H[0 || (cid:8)A, B,C(cid:9)] which results in
the selection of b2,2,0 and b2,4,0 for the private values. Since
µ0 − µ1 = 1, B needs to degrade one of the private values from the
ﬁrst authenticator as part of the postmodiﬁcation. Again, based on
the hash value h, B deterministically selects one of the bi, j,e values,
(cid:3)
= H[b1,1,0] along with
picks b1,1,0 and thus forwards to C b
1,1,0
the remaining private values of the ASPATH protector. Figure 4
shows the ASPATH authenticator that D receives from C; where
both private values from the ﬁrst single-ASN signature have been
converted to semi-private values (µ2 = 0 so C degraded the value
b1,4,0), and C also degraded the value b2,4,0 from the second one-
time signature.
This toy example should make it intuitively clear that down-
stream ASes receive smaller sets of the private values. As we eval-
uate in Section 5, such postmodiﬁcation increases security by re-
ducing the probability that an AS can perform the truncation attack.
Integration with BGP
4.5
To integrate our mechanisms with BGP, we include an optional,
transitive path attribute that contains our authentication information
for each hop in the UPDATE’s ASPATH. We can use the Partial bit
in the attribute ﬂags to detect if there are any routers on the path
that do not speak SPV, as a router that does not understand the SPV
optional transitive attribute will set the Partial bit to indicate that it
does not recognize the attribute.
Aggregation SPV supports aggregation in the same way as does
S-BGP. In S-BGP, a BGP speaker aggregating two UPDATEs in-
cludes the authentication for both received UPDATEs and generates
a new ASPATH for the aggregated preﬁx. In SPV, we cannot eas-
ily create a new ASPATH, so instead we choose one of the aggre-
gated preﬁxes to carry the entire path. We then include the other
preﬁx, except that we do not include the ci,0 value from the bot-
tom hash chain, thus preventing any node from readvertising the
other preﬁx. For example, if AS E receives two preﬁxes x1 along
path (cid:8)A, B, E(cid:9) and x2 along path (cid:8)C, D, E(cid:9), it then chooses one of
these preﬁxes, possibly x1, to carry the entire path. It then prevents
further propagation of x2 by removing its bottom chain value ci,0.
When AS E propagates the aggregated block to AS F, it sends x1
with path (cid:8)A, B, E, F(cid:9) and x2 with path (cid:8)C, D, E(cid:9). AS F can see that
the paths join at E, and that the aggregation is valid. Choosing a
single branch in this way reduces the cost of authentication, with-
out compromising security. As in Murphy’s Internet-Draft [42], the
aggregator ﬁeld would be mandatory, and the common AS must
match the ASN in the aggregator ﬁeld.
SPV, like S-BGP, fully supports multihoming. As in BGP, a
multihomed subscriber speaks BGP to its two or more providers.
Each provider propagates these routes into the Internet, where each
AS uses local policy to select a route.
Securing Route Withdrawals To secure route withdrawals, we
rely on hop-by-hop authentication and policy. In particular, as in
BGP and S-BGP, an SPV router R should allow an AS A to with-
draw a route to preﬁx C if and only if AS A is a BGP peer and AS A
is R’s next-hop destination for packets sent to preﬁx C. That is, we
only accept withdrawals from a valid next-hop router. We do not
require that the AS prove that the withdrawn link is experiencing
some physical problem because doing so is very difﬁcult [27], and
because it undermines our goals of allowing routers to keep their
policy secret.
In S-BGP, route withdrawals are signed as part of the UPDATE
message, which is signiﬁcantly more expensive to verify than the
hop-by-hop authentication used by SPV. For example, with 1024-
bit RSA, a signature takes 401µs to verify, whereas a Message