title:JACKSTRAWS: Picking Command and Control Connections from Bot Traffic
author:Gr&apos;egoire Jacob and
Ralf Hund and
Christopher Kruegel and
Thorsten Holz
JACKSTRAWS: Picking Command and Control Connections from Bot Trafﬁc
Gregoire Jacob
University of California, Santa Barbara
PI:EMAIL
Christopher Kruegel
University of California, Santa Barbara
PI:EMAIL
Ralf Hund
Ruhr-University Bochum
PI:EMAIL
Thorsten Holz
Ruhr-University Bochum
PI:EMAIL
Abstract
A distinguishing characteristic of bots is their ability
to establish a command and control (C&C) channel. The
typical approach to build detection models for C&C traf-
ﬁc and to identify C&C endpoints (IP addresses and do-
mains of C&C servers) is to execute a bot in a controlled
environment and monitor its outgoing network connec-
tions. Using the bot trafﬁc, one can then craft signa-
tures that match C&C connections or blacklist the IP
addresses or domains that the packets are sent to. Un-
fortunately, this process is not as easy as it seems. For
example, bots often open a large number of additional
connections to legitimate sites (to perform click fraud
or query for the current time), and bots can deliberately
produce “noise” – bogus connections that make the anal-
ysis more difﬁcult. Thus, before one can build a model
for C&C trafﬁc or blacklist IP addresses and domains,
one ﬁrst has to pick the C&C connections among all the
network trafﬁc that a bot produces.
In this paper, we present JACKSTRAWS, a system that
accurately identiﬁes C&C connections. To this end, we
leverage host-based information that provides insights
into which data is sent over each network connection as
well as the ways in which a bot processes the informa-
tion that it receives. More precisely, we associate with
each network connection a behavior graph that captures
the system calls that lead to this connection, as well as
the system calls that operate on data that is returned.
By using machine learning techniques and a training
set of graphs that are associated with known C&C con-
nections, we automatically extract and generalize graph
templates that capture the core of different types of C&C
activity. Later, we use these C&C templates to match
against behavior graphs produced by other bots. Our
results show that JACKSTRAWS can accurately detect
C&C connections, even for novel bot families that were
not used for template generation.
1
Malware is a signiﬁcant threat and root cause for many
security problems on the Internet, such as spam, dis-
Introduction
tributed denial of service attacks, data theft, or click
fraud. Arguably the most common type of malware
today are bots. Compared to other types of malware,
the distinguishing characteristic of bots is their abil-
ity to establish a command and control (C&C) channel
that allows an attacker to remotely control and update a
compromised machine. A number of bot-infected ma-
chines that are combined under the control of a single
entity (called the botmaster) are referred to as a bot-
net [7, 8, 14, 37].
Researchers and security vendors have proposed
many different host-based or network-based techniques
to detect and mitigate botnets. Host-based detectors
treat bots like any other type of malware. These sys-
tems (e.g., anti-virus tools) use signatures to scan pro-
grams for the presence of well-known, malicious pat-
terns [43], or they monitor operating system processes
for suspicious activity [26]. Unfortunately, current tools
suffer from low detection rates [4], and they often in-
cur a non-negligible performance penalty on end users’
machines. To complement host-based techniques, re-
searchers have explored network-based detection ap-
proaches [15–18, 34, 41, 45, 49]. Leveraging the insight
that bots need to communicate with their command and
control infrastructure, most network-based botnet detec-
tors focus on identifying C&C communications.
Initially, models that match command and control
trafﬁc were built manually [15, 17]. To improve and
accelerate this slow and tedious process, researchers
proposed automated model (signature) generation tech-
niques [34, 45]. These techniques share a similar work
ﬂow (a work ﬂow that, interestingly, was already used
in previous systems to extract signatures for spreading
worms [25,27,29,31,39]): First, one has to collect traces
of malicious trafﬁc, typically by running bot samples
in a controlled environment. Second, these traces are
checked for strings (or token sequences) that appear fre-
quently, and can thus be transformed into signatures.
While previous systems have demonstrated some suc-
cess with the automated generation of C&C detectors
based on malicious network traces, they suffer from
three signiﬁcant shortcomings: The ﬁrst problem is that
bots do not only connect to their C&C infrastructure, but
frequently open many additional connections. Some of
the additional connections are used to carry out mali-
cious activity (e.g., scanning potential victims, sending
spam, or click fraud). However, in other cases, the trafﬁc
is not malicious per se. For example, consider a bot that
connects to a popular site to check the Internet connec-
tivity, or a bot that attempts to obtain the current time or
its external IP address (e.g., local system settings are un-
der the control of researchers who might try to trick mal-
ware and trigger certain behaviors; they are thus unreli-
able from the bot perspective [19, 35]). In most of these
cases, the malware trafﬁc is basically identical to trafﬁc
produced by a legitimate client. Of course, one can use
simple rules to discard some of the trafﬁc (scans, spam),
but other connections are much harder to ﬁlter; e.g., how
to distinguish a HTTP-based C&C request from a re-
quest for an item on a web site? Thus, there is a signif-
icant risk that automated systems produce models that
capture legitimate trafﬁc. Unfortunately, a ﬁltering step
can remove such models only to a certain extent.
To highlight the difﬁculty of ﬁnding C&C connections
in bot trafﬁc, we report on the analysis of a database that
was given to us by a security company. This database
contains network trafﬁc produced by malware samples
run in a dynamic analysis environment. Over a period
of two months (Sept./Oct. 2010), this company ana-
lyzed 153,991 malware samples that produced a total
of 593,012 connections, after removing all empty and
scan-related trafﬁc. A signiﬁcant majority (87.9%) of
this trafﬁc was HTTP, followed by mail trafﬁc (3.8%)
and small amounts of a wide variety of other protocols
(including IRC). The company used two sets of signa-
tures to analyze their trafﬁc: One set matches known
C&C trafﬁc, the other set matches trafﬁc that is known
to be harmless. This second set is used to quickly discard
from further analysis connections that are known to be
unrelated to any C&C activity. Such connections include
accesses to ad networks, search engines, or games sites.
Using these two signature sets, we found 109,600 mali-
cious C&C connections (18.5%), but also 69,211 benign
connections (11.7%). The remaining 414,201 connec-
tions (69.8%) were unknown; they did not match any
signature, and thus, likely consist of a mix of malicious
and harmless trafﬁc. This demonstrates that it is chal-
lenging to distinguish between harmless web requests
and HTTP-based C&C connections.
The second problem with existing techniques is that
attackers can confuse automated model (signature) gen-
eration systems: previous research has presented “noise
injection” attacks in which a malware crafts additional
connections with the sole purpose to thwart signature
extraction techniques [10, 11, 33]. A real-world exam-
ple for such a behavior can be found in the Pushdo mal-
ware family, where bots, in certain versions, create junk
SSL connections to more than 300 different web sites to
blend in with benign trafﬁc [1].
The third problem is that existing techniques do not
work when the C&C trafﬁc is encrypted. Clearly, it is
not possible to extract a content signature to model en-
crypted trafﬁc. However, even when the trafﬁc is en-
crypted, it would be desirable to add the C&C server
destinations to a blacklist or to model alternative net-
work properties that are not content-based. For this, it is
necessary to identify those encrypted malware connec-
tions that go to the C&C infrastructure and distinguish
them from unrelated but possibly encrypted trafﬁc, such
as legitimate, SSL-encrypted web trafﬁc.
The root cause for the three shortcomings is that ex-
isting approaches extract models directly from network
traces. Moreover, they do so at a purely syntactic level.
That is, model generation systems simply select ele-
ments that occur frequently in the analyzed network traf-
ﬁc. Unfortunately, they lack “understanding” of the
purpose of different network connections. As a result,
such systems often generate models that match irrele-
vant, non-C&C trafﬁc, and they incorrectly consider de-
coy connections. Moreover, in the case of encrypted
trafﬁc, no frequent element can be found at all.
To solve the aforementioned problems, we propose an
approach to detect the network connections that a mal-
ware program uses for command and control, and to dis-
tinguish these connections from other, unrelated trafﬁc.
This allows us to immediately consider the destination
hosts/domains for inclusion in a blacklist, even when the
corresponding connections are encrypted. Moreover, we
can feed signature generation systems with only C&C
trafﬁc, discarding irrelevant connections and making it
much more difﬁcult for the attacker to inject noise.
We leverage the key observation that we can use host-
based information to learn more about the semantics of
network connections. More precisely, we monitor the
execution of a malware process while it communicates
over the network. This allows us to determine, for each
request, which data is sent over the network and where
this data comes from. Moreover, we can determine how
the program uses data that it receives over the network.
Using this information, we can build models that cap-
ture the host-based activity associated with individual
network connections. Our models are behavior graphs,
where the nodes are system calls and the edges represent
data ﬂows between system calls.
We use machine-learning to build graph-based models
that characterize malicious C&C connections (e.g., con-
nections that download binary updates that the malware
later executes, or connections in which the malware up-
loads stolen data to a C&C server). More precisely, start-
ing from labeled sets of graphs that are related to both
known C&C connections and other, irrelevant malware
trafﬁc, we identify those subgraphs that are most char-
acteristic of C&C communication. In the next step, we
abstract from these speciﬁc subgraphs and produce gen-
eralized graph templates. Each graph template captures
the core characteristics of a different type or implemen-
tation of C&C communication. These graph templates
can be used to recognize C&C connections of bots that
have not been analyzed previously. Moreover, our tem-
plates possess explanatory capabilities and can help ana-
lysts to understand how a particular bot utilizes its C&C
channel (e.g., for binary updates, conﬁguration ﬁles, or
information leakage).
Our experiments demonstrate that our system can
generate C&C templates that recognize host-based ac-
tivity associated with known, malicious trafﬁc with high
accuracy and very few false positives. Moreover, we
show that our templates also generalize; that is, they de-
tect C&C connections that were previously unknown.
The contributions of this paper are the following:
• We present a novel approach to identify C&C com-
munication in the large pool of network connec-
tions that modern bots open. Our approach lever-
ages host-based information and associates mod-
els, which are based on system call graphs, with the
data that is exchanged over network connections.
• We present a novel technique that generalizes sys-
tem call graphs to capture the “essence” of, or
the core activities related to, C&C communication.
This generalization step extends previous work on
system call graphs, and provides interesting in-
sights into the purpose of C&C trafﬁc.
• We implemented these techniques in a tool called
JACKSTRAWS and evaluated it on 130,635 connec-
tions produced by more than 37 thousands malware
samples. Our results show that the generated tem-
plates detect known C&C trafﬁc with high accu-
racy, and less than 0.2% false positives over harm-
less trafﬁc. Moreover, we found 9,464 previously-
unknown C&C connections, improving the cover-
age of hand-crafted network signatures by 60%.
2 System Overview
Our system monitors the execution of a malware pro-
gram in a dynamic malware analysis environment (such
as Anubis [20], BitBlaze [40], CWSandbox [44], or
Ether [9]). The goal is to identify those network con-
nections that are used for C&C communication. To this
end, we record the activities (in our case, system calls)
on the host that are related to data that is sent over and
received through each network connection. These activ-
ities are modeled as behavior graphs, which are graphs
that capture system call invocations and data ﬂows be-
GET /bot/doit.php?v=3&id=ec32632b-29981-349-398...
Figure 1: Example of behavior graph that shows infor-
mation leakage. Underneath, the network log shows that
the Windows ID was leaked via the GET parameter id.
tween system calls. In our setting, one graph is asso-
ciated with each connection. As the next step, all be-
havior graphs that are created during the execution of a
malware sample are matched against templates that rep-
resent different types of C&C communication. When a
graph matches a template sufﬁciently closely, the corre-
sponding connection is reported as C&C channel.
In the following paragraphs, we ﬁrst discuss behavior
graphs. We then provide an overview of the necessary
steps to generate the C&C templates.
Behavior graphs. A behavior graph G is a graph where
nodes represent system calls. A directed edge e is in-
troduced from node x to node y when the system call