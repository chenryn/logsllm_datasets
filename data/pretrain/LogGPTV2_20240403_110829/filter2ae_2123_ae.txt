    --------------------    
    0a8377c8  "layout"
    $t4=00000001 $t5=00000002
    0bcc8870  00000000 ffffff82
    --------------------    
    0a815528  "info"
    $t4=00000001 $t5=00000001
    0bcc8868  00000000 ffffff82
    --------------------    
    0a81c4a8  "hidden"
    $t4=00000001 $t5=00000000
    0bd29758  00000000 ffffff82
    --------------------
5) 获取并保存了this后，接下来跟踪字节码的执行。
查看pc_([ebp-0x2C])指向的字节码，跟踪字节码的执行的步骤如下所示。
解释:
如果要一步步跟踪字节码的执行过程，首先通过[ebp-0x2C]得到当前的字节码，将16进制字节码换算成10进制，再在SpiderMonkey源码中的jsopcode.tbl查看对应的字节码的名称，根据字节码名称在SpiderMonkey源码中的Interpreter.cpp中查看对应字节码的处理流程。
以当前实验中的第一条语句this[“0”] = 0x5为示例。
①
通过[ebp-0x2C]发现当前字节码是0x41(65)，查询后发现是JSOP_THIS,windbg中直接输入g命令解释执行该字节码，准备执行下一个字节码的时候调试器又触发断点，此时通过[ebp-0x30]查看sp_指向的临时堆栈的栈顶。
可以看到，JSOP_THIS字节码执行完后，FrameRegs中的sp_指向的临时栈栈顶已经保存了this的值。
②
通过[ebp-0x2C]发现当前字节码是0x3e(62)，查询后发现是JSOP_ZERO,windbg中直接输入g命令解释执行该字节码，准备执行下一个字节码的时候调试器又触发断点，此时通过[ebp-0x30]查看临时栈栈顶。
    0:000> dd poi(@ebp-0x30)-0x8
    0b9e5e28  00000000 ffffff81
可以看到，JSOP_ZERO字节码执行完后，FrameRegs中的sp_指向的临时栈栈顶已经保存了整数0。
③
通过[ebp-0x2C]发现当前字节码是0xd7(215)，查询后发现是JSOP_INT8,windbg直接输入g命令解释执行该字节码，准备执行下一个字节码的时候调试器又触发断点，此时通过[ebp-0x30]查看临时栈栈顶。
    0:000> dd poi(@ebp-0x30)-0x8
    0b9e5e30  00000005 ffffff81
可以看到，JSOP_INT8字节码执行完后，FrameRegs中的sp_指向的临时栈栈顶已经保存了整数0x5。
④
通过[ebp-0x2C]发现当前字节码是0x38(56)，查询后发现是JSOP_SETELEM，windbg直接输入g命令执行解释该字节码，准备执行下一个字节码的时候调试器又触发断点，此时运行之前保存的打印this的所有属性的windbg脚本命令，结果如下（省略了大部分结果）。
    0:000> r @$t0 = 0xbd29740  ;
    0:000> r @$t1 = poi(@$t0) ;
    0:000> r @$t2 = poi(@$t0 + 0x8 );
    0:000> r @$t8 = poi(@$t1 + 0x10);
    0:000> .for(; @$t8 != 0; r @$t1 = @$t8;r @$t8 = poi(@$t1 + 0x10)) {r @$t3 = poi(@$t1 + 0x4);r @$t9 = 0;.catch {du poi(@$t3 + 0x4); r @$t9 = 0xaa};.if (@$t9 != 0xaa) {r @$t3};r @$t3 = poi(@$t1 + 0x8);r @$t4 = @$t3 >> 0n27;r @$t5 = @$t3 & 0x00ffffff;r @$t4, @$t5;.if(@$t5  r @$t0 = 0xbd29a38  ;
    0:000> r @$t1 = poi(@$t0) ;
    0:000> r @$t2 = poi(@$t0 + 0x8 );
    0:000> r @$t8 = poi(@$t1 + 0x10);
    0:000> .for(; @$t8 != 0; r @$t1 = @$t8;r @$t8 = poi(@$t1 + 0x10)) {r @$t3 = poi(@$t1 + 0x4);r @$t9 = 0;.catch {du poi(@$t3 + 0x4); r @$t9 = 0xaa};.if (@$t9 != 0xaa) {r @$t3};r @$t3 = poi(@$t1 + 0x8);r @$t4 = @$t3 >> 0n27;r @$t5 = @$t3 & 0x00ffffff;r @$t4, @$t5;.if(@$t5  bl
         0 e Disable Clear  64bc21bc     0001 (0001)  0:**** EScript!mozilla::HashBytes+0x2177c
    0:000> bd 0
    0:000> bl
         0 d Enable Clear  64bc21bc     0001 (0001)  0:**** EScript!mozilla::HashBytes+0x2177c
    0:000> g
    (4b38.3950): C++ EH exception - code e06d7363 (first chance)
    (4b38.3950): C++ EH exception - code e06d7363 (first chance)
6) 点击OK，弹出下一个对话框。
7)
此时可以知道app.alert(“1”)之前的Javascript代码对应的字节码肯定已经解释执行完毕，通过ctrl+break或者alt+delete强行中断到调试器。
8) 再次运行刚才运行过的Windbg脚本命令，结果如下。
    0:003> r @$t0 = 0xbd29a38  ;
    0:003> r @$t1 = poi(@$t0) ;
    0:003> r @$t2 = poi(@$t0 + 0x8 );
    0:003> r @$t8 = poi(@$t1 + 0x10);
    0:003> .for(; @$t8 != 0; r @$t1 = @$t8;r @$t8 = poi(@$t1 + 0x10)) {r @$t3 = poi(@$t1 + 0x4);r @$t9 = 0;.catch {du poi(@$t3 + 0x4); r @$t9 = 0xaa};.if (@$t9 != 0xaa) {r @$t3};r @$t3 = poi(@$t1 + 0x8);r @$t4 = @$t3 >> 0n27;r @$t5 = @$t3 & 0x00ffffff;r @$t4, @$t5;.if(@$t5 < @$t4) {dd @$t0+0x18+@$t5*8 L0x2;}.else {r @$t5 = @$t5-@$t4;dd @$t2+@$t5*8 L0x2;};.echo --------------------;}
    Memory access error at '); r @$t9 = 0xaa'
    $t3=00000009
    $t4=00000001 $t5=000000bd
    0b8ec948  00000000 ffffff83
    --------------------    
    Memory access error at '); r @$t9 = 0xaa'
    $t3=00000007
    $t4=00000001 $t5=000000bc
    0b8ec940  00000000 ffffff82
    --------------------    
    Memory access error at '); r @$t9 = 0xaa'
    $t3=00000005
    $t4=00000001 $t5=000000bb
    0b8ec938  51eb851f 40091eb8
    --------------------    
    Memory access error at '); r @$t9 = 0xaa'
    $t3=00000003
    $t4=00000001 $t5=000000ba
    0b8ec930  00000000 41f00000
    --------------------    
    Memory access error at '); r @$t9 = 0xaa'
    $t3=00000001
    $t4=00000001 $t5=000000b9
    0b8ec928  00000005 ffffff81
    --------------------    
    0a83c788  "removeLinks"
    $t4=00000001 $t5=000000b8
    0b8ec920  0bd24ab0 ffffff87
    --------------------
可以看到新增了几个属性，属性的id分别是9、7、5、3、1（属性的id右移1位的结果就是索引，比如这里分别对应索引4、3、2、1、0），值分别是false、undefined、3.14、0x100000000、0x5，和Javascript代码是一一对应的。
9) 输入命令g运行，再次点击对话框的OK，弹出下一个对话框。
10) 再次强行中断并运行Windbg脚本命令，结果如下。