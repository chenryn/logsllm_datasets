Call WSADuplicateSocketW to get a special
WSAPROTOCOL_INFO structure
Create a duplicate socket
Use the socket
OpenProcess(PROCESS_DUP_HANDLE, , pid)
NtQuerySystemInformation(SystemHandleInformation, ...)
NtDuplicateObject
NtQueryObject(ObjectNameInformation)
getpeername(handle, ...)
WSADuplicateSocketW(handle, ...)
WSASocketW(WSAPROTOCOL_INFO, ...)
recv(), send()
is in the address space of the source process so Shadow-
Move cannot directly operate on it, but ShadowMove can
directly use the duplicate handle (e.g., Handle 1’) because
it is created in the context of ShadowMove. Next, Shad-
owMove invokes WSADuplicateSocket to share Handle
1’ with itself. As a result, Handle 2 is created and put in
the dwProviderReserved ﬁeld of the WSAPROTOCOL_INFO
structure. Finally, ShadowMove invokes WSASocket with
the WSAPROTOCOL_INFO structure as one parameter, in order
to make Handle 2 a functional socket handle. Here since
WSADuplicateSocket and WSASocket are invoked in the
same process (i.e., ShadowMove), there is no need to pass
WSAPROTOCOL_INFO structure across processes.
3.4.3 Socket Duplication on Linux
Our design of socket duplication on Linux (or *NIX in
general) is different from its Windows counterpart. Due to
a stricter process isolation, it is not possible to duplicate a
socket from another process directly, even if the other pro-
cess is owned by the same user. However, socket sharing is
supported on Linux, but it requires cooperation between the
two processes. Since ShadowMove assumes that the victim
application is not cooperative, our solution is to force the vic-
tim application to cooperate by injecting code into its address
space to set up the sharing of a socket with the ShadowMove
process. To inject code into the victim application, we create
a launcher that would run the victim application as a child
process and then leverage ptrace to inject code, in the form
of a shared library. Finally, we put the launcher version ahead
of the original victim application in the command search path,
such that the user would invoke our launcher when he/she
intends to run the victim application.
We should note that the use of process injection can jeopar-
dize the stealthiness of the ShadowMove attack on Linux,
compared with ShadowMove on Windows. However, our
Linux design still has a good chance of evading state-of-the-
art defenses. We defer a detailed discussion to the evaluation
(Section 5).
Socket sharing on Linux. To share a socket, two processes
ﬁrst connect via a Unix domain socket, then the sender pro-
cess invokes sendmsg and passes the socket descriptor in the
input parameter, while the receiver invokes recvmsg and re-
trieves a (possibly different) socket descriptor from the output
parameter. When a socket descriptor is passed this way, the
underlying Linux kernel creates a new descriptor in the receiv-
ing process’ address space that refers to the same ﬁle table
entry within the kernel as the descriptor that was sent by the
Figure 4: Winsock Duplication
Figure 5: ShadowMove in Linux System
USENIX Association
29th USENIX Security Symposium    565
Source ProcessWS2_32.dllKernelDSOCKETmswsock.dllSOCKET_INFORMATIONUserAFD.syssocket handle contextWSASocket()WSPSocket()NtDeviceIoControlFile(IOCTL_AFD_SET_CONTEXT)Handle 1Source ProcessWS2_32.dllDSOCKETmswsock.dllSOCKET_INFORMATIONWSADuplicateSocket()NtDuplicateObject()WSPDuplicateSocket()Handle 1Handle 2Destination ProcessWS2_32.dllDSOCKETmswsock.dllSOCKET_INFORMATIONWSASocket()WSPSocket()NtDeviceIoControlFile(IOCTL_AFD_GET_CONTEXT)Handle 2Handle 2(through protocol_infostructure)Step 1Step 2Step 3sending process [54].
More speciﬁcally, there are four components for a Shad-
owMove attack on Linux, which are target process, shared
library, launcher, and ShadowMove (Figure 5).
The launcher injects a shared library into the target process
by using ptrace [32, 47], which has to attach to the target
process ﬁrst. The current Linux systems impose strict control
over ptrace. Speciﬁcally, by default the Yama Linux Security
Module (LSM) [3] only allows ptrace from a process with
sudo privilege, or from a parent to a child process. We use
the second option because for this we don’t need privilege
escalation. Therefore, our launcher runs the target application
as a child process and then attaches to the target process
using ptrace. After that, it invokes __libc_dlopen_mode
for loading the shared library into the target process. Our
launcher is based on an open source project [30].
We developed a prototype of the shared library, whose
constructor function (executed automatically when the library
is loaded) enumerates open sockets in the target process. For
each open socket, it makes a copy of that socket using dup
method, connects to the ShadowMove process through a Unix
domain socket, and shares the duplicated socket using that
channel. If there is no open socket, it sleeps for a while and
tries to ﬁnd open sockets again. To avoid blocking the main
thread of the target process, we create a new thread that is
dedicated to socket duplication.
To make the victim user run our launcher inadvertently
when he/she intends to run the target application, we give
the launcher the same name as the target application and
we ensure that our launcher is ahead of the target appli-
cation in the command search path, which can be done
by changing the PATH environment variable. To make the
attack stealthier, we can avoid changing the PATH envi-
ronment variable if any location on the current command
search path is (1) writable by the victim user and (2) be-
fore the location of the target application: in that case we
just need to copy our launcher in that writable location. Oth-
erwise, we would create a folder that appears benign (e.g.,
/home/alice/.npm-packages/bin that can be used by a be-
nign application called npm [8]), copy our launcher there, and
add the new folder location to the PATH environment variable
by adding export PATH=/path/of/the/launcher:$PATH
into the victim user’s .bashrc.
For example, if ftp is the target application then the
launcher will be named ftp. When the user tries to run FTP,
the launcher will be executed and it will run the original FTP
application as a child process.
3.4.4 The Race Between the Benign Application and the
Attack
We should note that in the proposed attack, the socket is
shared between the original client and the attacker, which can
cause a race condition in receiving and sending data from the
remote endpoint. The one who calls the recv function ﬁrst
Table 2: ShadowMove Predicates to Model Target Networks
Predicate
system
connected
committed
capability
Deﬁnition
system(ip_addr)
connected(src_ip, dst_ip, service)
comitted(src_ip, dst_ip, action)
capability(service, action).
will get the data from the input buffer and the one who calls
send function ﬁrst will send the data to the server. This may
result in reading partial responses from the server or sending a
garbled request to the server. To prevent such a possibility, at-
tackers can simply pause the client process temporarily while
they are sending/receiving data from the server and resume the
client process afterwards. To suspend the client process, the
attacker can pause all its threads by calling SuspendThread,
and to resume the client process, the attacker can resume all
its threads using ResumeThread.
3.5 Lateral Movement Planner (LMP)
The Lateral Movement Planner (LMP) can empower the
adversary to coordinate attack actions on multiple victim
systems that can optimize the attack effectiveness and stealth-
iness. For example, suppose the attacker in Figure 6 has com-
promised hosts A and B, which both connect to host C, but
their individual connections are not sufﬁcient for a lateral
movement (e.g., A’s connection can only copy malware, and
B’s connection can only execute malware). In this case, a
coordinated plan that involves both A and B (e.g., A copies
malware to C, then B remotely launches malware on C) would
allow a lateral movement to C, thus making the attack more
effective. For another example, if there exist multiple paths
to the target system, a coordinated plan would allow the at-
tacker to use the shortest path to send payload to / receive
data from the target, thus making the attack stealthier. We
assume that attackers look for a speciﬁc set of targets that can
be recognized when they are reached.
We formulate the attack planning problem in Prolog. We
uses the predicates in Table 2 to specify the current state of
the compromised network: system and connected specify the
reachable systems and their interconnections, and committed
deﬁnes the action that has been performed on a system by
a ShadowMove instance. For each protocol, we also use the
capability predicate to specify the actions that attackers can
do if they hijack the corresponding TCP connection.
Figure 6 illustrates an snapshot of system B’s (with IP
address 10.10.10.50) ShadowMove knowledge base, which
consists of a set of facts that represent a network with three
compromised systems and one target. This knowledge base is
constructed from the global view shared among all Shadow-
Move instances. LMP uses the following rules to determine
whether a speciﬁc operation can be carried out on a remote
system Y from a given system X.
r e m o t e O p e r a t i o n ( X, Y, Action , Route ):−
566    29th USENIX Security Symposium
USENIX Association
o r i g i n ( I ) ,
r e m o t e O p e r a t i o n ( I ,
committed ( _K ,
systemC , upload , _R ) ,
systemC , u p l o a d ) .
If based on its current knowledge base, no ShadowMove in-
stance has uploaded the ﬁle on the target, then system B
must wait until the upload operation is committed by one
of the ShadowMove instances, such as the one on system A.
To obtain a list of target systems that system B can launch
ShadowMove on, the ShadowMove instance on system B can
execute the following query:
f i n d a l l ( T a r g e t ,
is
not
returned ExecuteList
c o m m i t E x e c u t e O p e r a t i o n ( ’ 1 0 . 1 0 . 1 0 . 5 0 ’ , T a r g e t ) ,
E x e c u t e L i s t ) .
the
If
(e.g.,
[’10.10.10.100’]), an instance of ShadowMove can be
started on a new target system (e.g., 10.10.10.100). This is an
illustration of lateral movement that requires coordination
among different paths, which is only possible when a global
view of the compromised network is available.
3.6 Lateral Movement Actuator
empty
Lateral Movement Actuator (LMA) is a module manager
containing several actuation modules. Each of these mod-
ules is responsible for handling one protocol such as TDS
(Section 4.3). LMA can act both passively and actively. In
the passive mode, the module only reads from a socket by
passing MSG_PEEK ﬂag to recv API call. In this way, the
input buffer is not emptied, so the original process can read
the content. In the active mode, the module reads from the
socket without passing the MSG_PEEK ﬂag; hence the recv
call consumes the data in the input buffer. In this state, the
module also writes to the socket out buffer to send crafted
messages.
In some protocols, we need to learn a few secrets before
being able to craft valid messages (e.g., shellID for WinRM
in Section 4.4). In these scenarios, an actuator module starts
in the passive mode, snifﬁng the receiving messages to learn
such secret values. After learning all of such required data
elements, the actuator module can switch itself to active mode
and start communicating with the remote endpoint. It is worth
noting that LMA module can only read incoming messages;
it cannot read the outgoing messages as to the best of our
knowledge there is no such API that allows one to read from
the socket output buffer. In our current prototype, LMA has
three actuation modules for FTP, MS SQL, and WinRM pro-
tocols. However, one can add a new protocol to LMA by
implementing an interface called IPModule.
4 Prototypes for ShadowMove Actuators
We implement a prototype of the ShadowMove design on
Windows in 2,501 lines of C/C++ code. The lateral movement
planner is based on SWI-Prolog [14], a free implementation of
the programming language Prolog. The prototype [16] show-
cases common functionalities such as connection detection,
Figure 6: Example ShadowMove Network View and Knowl-
edge Base
c o n n e c t e d (X, Y, S ) ,
Route =[X | [ Y ] ] .
c a p a b i l i t y ( S , A c t i o n ) ,
r e m o t e O p e r a t i o n ( X, Y, Action , Route ):−
c o n n e c t e d (X, Z , S e r v i c e ) ,
c a p a b i l i t y ( S e r v i c e , A c t i o n ) ,
r e m o t e O p e r a t i o n ( Z , Y, Action , R) ,
Route =[X | R ] .
By using remoteOperation, a ShadowMove instance can
check whether there exists a path between two systems that
would allow them to perform a speciﬁc operation such as
execute or upload a ﬁle. For example, the attacker can execute
the following query:
r e m o t e O p e r a t i o n ( ’ 1 0 . 1 0 . 1 0 . 1 0 ’ ,
’ 1 0 . 1 0 . 1 0 . 1 0 0 ’ ,
’ upload ’ , R ) .
which returns [(cid:48)10.10.10.10(cid:48),(cid:48) 10.10.10.30(cid:48),(cid:48) 10.10.10.100(cid:48)].
This result means that an attacker who landed on 10.10.10.10
and has moved to 10.10.10.30 can copy malware from
10.10.10.30 to 10.10.10.100 via one of the ShadowMove
actuators.
We can use remoteOperation predicate to construct more
complex predicates such as commitExecuteOperation:
c o m m i t E x e c u t e O p e r a t i o n (X, Y)
:−
c o n n e c t e d (X, Y, Z ) ,
e x e c u t e ) , o r i g i n ( I ) ,
c a p a b i l i t y ( Z ,
r e m o t e O p e r a t i o n ( I , Y, upload , _R ) ,
committed ( _K , Y, u p l o a d ) .
In order to run ShadowMove on a target system from a
compromised system, not only there must be a connection
between these two systems that allows the ShadowMove in-
stance to perform execute operation, but the ﬁle must has also
been uploaded to that target system by one of the Shadow-
Move instances prior to the execute operation. For example
in Figure 6, system B can launch ShadowMove on system
C (target) if and only if (1) there is a connection that allows
system B to execute a ﬁle on system C:
c o n n e c t e d ( SystemB , SystemC , Z ) ,
c a p a b i l i t y ( Z ,
e x e c u t e )
and (2) the ShadowMove binary ﬁle has been uploaded on
system C:
USENIX Association
29th USENIX Security Symposium    567
socket duplication, network view synchronization, and lateral
movement planning; it also overcomes the challenges of ac-
tuation, i.e., how to make the injected packets conformant to
the respective protocols and yet useful for lateral movement
(such as uploading malware and launching malware), which
is speciﬁc to individual application protocols.
In this section, we present three ShadowMove actuators
that leverage FTP, MS SQL, and WinRM. The criteria for
choosing these protocols is their lack of support for message
origin integrity, as we discuss in Section 2.1. Speciﬁcally,
FTP and Microsoft SQL have no origin integrity enforcement,
and WinRM has inadequate origin integrity enforcement.
4.1 ShadowMove Instantiation
For each experiment, we ﬁrst prepare a target environment
that includes the victim applications, such as one machine
running a FTP client and another machine running a FTP
server. We conﬁgure the applications so that they run nor-
mally with their intended purposes. We launch ShadowMove
PoC in the victim client machine. We observe that the PoC
periodically detects candidate TCP connections to abuse once
they are established (the victim client application does not
have to start before the PoC), duplicates the corresponding
sockets, and determines the protocol running over the TCP
connections (e.g., FTP). The PoC periodically queries the
lateral movement planner module (by presenting its current
network view) and executes the actuator logic if the planner
returns the target of the next move (e.g., using the FTP con-
nection to copy the PoC to the FTP server). When the PoC
is started on the server machine, we see that it detects active
TCP connections (including the one with the client machine)
and duplicates the corresponding sockets. We further observe
that the PoC on the server exchanges “signal” messages with
the PoC on the client successfully, and then they exchange
their current network views. Upon doing that, the network
views on both machines are updated. Some time later, lateral
movement planner module is queried again to make the next
decision based on the new network view.
The scenario described above is common to all three actu-
ators presented in the rest of Section 4. Therefore, we omit
such details in the description of individual actuators. A demo