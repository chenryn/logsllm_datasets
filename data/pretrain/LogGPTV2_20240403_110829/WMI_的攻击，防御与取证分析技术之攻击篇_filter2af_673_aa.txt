# WMI 的攻击，防御与取证分析技术之攻击篇
|
##### 译文声明
本文是翻译文章，文章来源：wooyun
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
近日,FireEye 安全公司的高级逆向工程团队(FLARE)发布了一份标题为《 WMI 攻击,防御与取证分析技术 》的 PDF 文档,该文档页数多达 90
页,文档内容主要从攻击,防御和取证分析这三个角度分篇对 WMI
技术做了详细的描述。其中不乏有很多值得学习思考的地方。于是,我利用业余时间翻译整理了此文档,拿出来与大家共分享 :),如有纰漏,望各位不吝赐教。
为了对原文档内容进行全面的翻译和解读,我按照文章的分析角度对原文档进行了分段式的翻译,本篇文章是分段式里面的第一篇,其余两篇译文的标题分别为:
《 WMI 的攻击,防御与取证分析技术之防御篇 》
《 WMI 的攻击,防御与取证分析技术之取证分析篇 》
**0x00 WMI 简介**
WMI 的全称是 Windows Management Instrumentation,即 Windows 管理规范,在 Windows 操作系统中,随着
WMI 技术的引入并在之后随着时间的推移而过时,它作为一项功能强大的技术,从 Windows NT 4.0 和 Windows 95
开始,始终保持其一致性。它出现在所有的 Windows 操作系统中,并由一组强大的工具集合组成,用于管理本地或远程的 Windows 系统。
尽管已被大众所知并且从其创始以来,已经被系统管理员大量使用,但当WMI技术在震网病毒中被发现以后,它开始在安全社区变得非常流行。从那之后, WMI
在攻击中变得日益普及,其作用有执行系统侦察,反病毒和虚拟机检测,代码执行,横向运动,权限持久化以及数据窃取。
随着越来越多的攻击者利用 WMI 进行攻击,他将会是安全维护人员,事件响应人员,取证分析师必须掌握的一项重要技能,并且要明白如何发挥它的优势。本白皮书介绍了
WMI 技术,并且演示了在实际攻击当中使用 WMI 构造 POC 和如何使用 WMI 作为一个基本的 IDS 以及提出了如何在 WMI
存储库文件格式中进行取证分析。
**0x01 修订历史**
在 Win2K 之前的操作系统中,就已经支持了 WMI 技术,只是当时需要下载并安装一个开发包。从 Win2K 开始,系统自带了 WMI ,并且 WMI
成为了系统的一个重要组件。随着 XP、2003、Vista、Win7 等的发布, WMI 所能提供的功能也在不断的增强和完善中。
下面是操作系统版本中对应的 WMI 的版本:
Nt 4.0 1.01
Sms 2.0 1.1
Win2000 1.5
WinXP/2003 2.0
**0x02 WMI 体系结构**
WMI是微软实现的由分布式管理任务组(DMTF)发布的基于 Web
的企业管理(WBEM)和公共信息模型(CIM)标准。这两个标准的目的是提供工业不可知论者手段,收集和传播在企业中有关的任何托管组件中的信息。
在一个较高的水平上,微软所实现的这些标准可以总结如下:
**托管组件**
托管组件被表示为 WMI 对象 —— 表示高度结构化的操作系统数据的类实例。微软提供了丰富的 WMI
对象用来与操作系统相关的信息进行通信。例如:Win32_Process,Win32_Service,AntiVirusProduct,Win32_StartupCommand等等。
**使用 WMI 数据**
微软提供了几种方式来使用 WMI 数据和执行 WMI 方法。例如, PowerShell 提供了一种非常简单的方式与 WMI 进行交互。
**查询 WMI 数据**
所有的WMI对象都使用类似于一个 SQL 查询的语言称为 WMI 查询语言(WQL)。 WQL 能够很好且细微的控制返回给用户的 WMI 对象。
**填充 WMI 数据**
当用户请求特定的 WMI 对象时,WMI 服务 (Winmgmt) 需要知道如何填充被请求的 WMI 对象。这个过程是由 WMI 提供程序去实现的。WMI
提供程序是一个基于 COM 的 DLL 文件 ,它包含一个在注册表中已经注册的相关联的 GUID 。 WMI 提供程序的功能 ——
例如查询所有正在运行的进程,枚举注册表项等等。
当 WMI 服务填充 WMI 对象时,有两种类型的类实例:
动态对象和持久性对象。动态对象是在特定查询执行时在运行过程中生成的。例如,Win32_Process 对象就是在运行过程中动态生成的。持久性对象存储在位于
%SystemRoot%System32wbemRepository 的 CIM 数据库中,它存储着 WMI 类的实例,类的定义和命名空间的定义。
**结构化 WMI 数据**
绝大多数的 WMI 对象的架构是在托管对象格式 (MOF) 文件中描述的。MOF 文件使用类似于 C++ 的语法并为一个 WMI 对象提供架构。因此,尽管
WMI 提供程序产生了原始数据,但是 MOF 文件为其产生的数据提供了被格式化的模式。从安全维护人员的角度来看,值得注意的是, WMI 对象定义可以在没有
MOF 文件的情况下被创建。相反,他们可以使用 .NET 代码直接插入到 CIM 资料库中。
**远程传输 WMI 数据**
Microsoft 提供了两个协议用于远程传输 WMI 数据: 分布式组件对象模型 (DCOM) 和 Windows 远程管理 (WinRM)。
**执行 WMI 操作**
部分 WMI 对象包括可执行的方法。例如,攻击者进行横向运动时执行的一个常用方法是在Win32_Process 类中的静态 Create
方法,此方法可以快速创建一个新的进程。另外, WMI 提供了一个事件系统,使用户可以使用注册事件处理函数进行创建,修改或删除任何 WMI 对象实例。
图 1 提供了微软实现 WMI 的一个高级别概述以及微软实现的组件和实现的标准之间的关系。
图 1: WMI 体系结构的高级别概述
**  
**
**0** **x03 WMI 的类与命名空间**
WMI 代表着大多数与操作系统信息以及以对象的形式操作有关的数据。一个 WMI 对象是高度结构化定义的信息被如何表示的类的实例。在 MSDN
上,有很多常用的 WMI 类的详细介绍。例如,常见的、有据可查的 WMI 类是 Win32_Process。还有很多未文档化的 WMI 类,幸运的是,所有的
WMI 类都可以使用 WMI 查询语言 (WQL) 进行查询。
WMI
类的命名空间的层次结构非常类似于传统的,面向对象的编程语言的命名空间。所有的命名空间都派生自根命名空间,在用脚本语言查询对象并未显式指定命名空间时,微软使用
ROOTCIMV2 作为默认的命名空间。在下面的注册表项中包含所有 WMI 设置,也包括已定义的默认命名空间:
HKEY_LOCAL_MACHINESOFTWAREMicrosoftWBEM
可以使用下面的 PowerShell 代码递归查询所有的 WMI 类和它们各自的命名空间。
图 2:列举所有 WMI 类和命名空间的 PowerShell 示例代码
我们在 Windows 7 系统上测试后发现已经有 7950 个 WMI 类,这意味着有大量的操作系统数据可被检索。
下面是由上述脚本执行后返回的完整 WMI 类路径的一部分结果:
**0x04 查询 WMI**
WMI 提供了一种简单的语法用于查询 WMI 对象实例、 类和命名空间 — — [WMI 查询语言
(WQL)](https://msdn.microsoft.com/en-us/library/aa392902\(v=vs.85\).aspx)。
有三种类别的 WQL 查询:
1.实例查询 —— 用于查询 WMI 类的实例  
2.事件查询 —— 用于一个 WMI 事件注册机制,例如 WMI 对象的创建、 删除或修改  
3.元查询 —— 用于查询 WMI 类架构
实例查询
实例查询是最常见的用于获取 WMI 对象实例的 WQL 查询。基本的实例查询采用以下形式:
    SELECT [Class property name|*] FROM [CLASS NAME] 
以下查询将返回所有正在运行的进程的可执行文件名称中包含"Chrome"的结果。具体的说是,此查询将返回 Win32_Process
类的每个实例的所有属性的名称字段中包含字符串"Chrome"的结果。
    SELECT * FROM Win32_Process WHERE Name LIKE "%chrome%"
事件查询
事件查询提供了报警机制,触发事件的类。在 WMI 类实例被创建时被用于常用的事件查询触发器。事件查询将采取以下形式:
    SELECT [Class property name|*] FROM [INTRINSIC CLASS NAME] WITHIN [POLLING INTERVAL] 
    SELECT [Class property name|*] FROM [EXTRINSIC CLASS NAME] 
内部和外部的事件将在事件章节中进一步详细解释。
下面是交互式用户登录的事件查询触发器。根据[MSDN 文档描述](https://msdn.microsoft.com/en-us/library/aa394189\(v=vs.85\).aspx),交互式登录的LogonType值为 2。
    SELECT * FROM __InstanceCreationEvent WITHIN 15 WHERE TargetInstance ISA 'Win32_LogonSession' AND TargetInstance.LogonType = 2
下面是在可移动媒体插入时的事件查询触发器:
    SELECT * FROM Win32_VolumeChangeEvent WHERE EventType = 2
元查询
元查询提供一个 WMI 类架构发现和检查机制。元查询采用以下形式:
    SELECT [Class property name|*] FROM [Meta_Class
以下查询将列出所有以字符串 "Win32" 开头的 WMI 类:
    SELECT * FROM Meta_Class WHERE __Class LIKE "Win32%"
当执行任何 WMI 查询时,除非显式提供命名空间,否则将隐式使用默认的命名空间 ROOTCIMV2。
**0x05 与 WMI 进行交互**
Microsoft 和第三方供应商提供了丰富的客户端工具使您可以与 WMI 进行交互。以下是此类客户端实用程序的非详尽清单:
PowerShell
PowerShell 是功能极其强大的脚本语言,包含了丰富的与 WMI 进行交互的功能。截至 PowerShell V3,以下 cmdlet
(PowerShell 命令术语) 可用于与 WMI 进行交互:
Get-WmiObject
Get-CimAssociatedInstance
Get-CimClass
Get-CimInstance
Get-CimSession
Set-WmiInstance
Set-CimInstance
Invoke-WmiMethod
Invoke-CimMethod
New-CimInstance
New-CimSession
New-CimSessionOption
Register-CimIndicationEvent
Register-WmiEvent
Remove-CimInstance