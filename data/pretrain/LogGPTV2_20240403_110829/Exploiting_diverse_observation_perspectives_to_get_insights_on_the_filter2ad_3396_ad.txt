### 4.3. The Value of Propagation Context

When examining Figure 3, we can identify a significant number of cases where a behavioral cluster (B-cluster) is split into multiple malware clusters (M-clusters). To better understand the underlying reasons for these splits, we have selected two of the largest M-clusters and analyzed their associated B-clusters.

#### Behavioral Profiles and Execution Time
The behavioral profiles generated by Anubis are limited in terms of execution time. Each profile corresponds to an execution time of four minutes. While this duration may be sufficient to capture some aspects of the malware's behavior, it is often insufficient to fully understand the propagation dynamics, especially for bots whose behavior depends on external commands from a bot-herder. Honeypots and network traffic analysis can provide more comprehensive insights into these dynamics.

#### Temporal Evolution and IP Space Distribution
Looking at the right side of Figure 5, we can immediately see important differences in the size of infected populations and their distribution over the IP space. In this case, we observe rather small populations with a bursty activity pattern, indicating complex behaviors. For instance, the temporal evolution of one of the M-clusters shows the following sequence:

- **1517 - 1617**: Observed hitting network location A
- **1817**: Observed hitting network location B
- **2617**: Observed hitting network location B
- **2/8 - 4/8**: Observed hitting network location A
- **27/9**: Observed hitting network location B

In the first case, the different malware variants are associated with different population sizes, combined with the small coverage of the SGNET deployment. This results in smaller groups that account for only a few hits in the dataset.

#### Coordinated Behavior and Command & Control Channels
Such coordinated behavior suggests the presence of a Command & Control (C&C) channel. We have closely examined the behavioral profiles and gathered evidence of an IRC C&C server. While not all samples were executed during the activity period, we were able to associate most M-clusters with specific IRC servers. Table 2 shows how, in most cases, each M-cluster is characterized by connections to a specific IRC server.

| Server Address | Room Name | M-clusters |
|----------------|------------|------------|
| 67.43.226.242  | #las6      | 282, 70    |
| 67.43.232.34   | #kok8      | 263        |
| 67.43.232.35   | #kok6      | 23, 277    |
| 67.43.232.36   | #kham      | 170        |
| 67.43.232.36   | #kok2      | 37         |
| 67.43.232.36   | #kok6      | 195, 275   |
| 67.43.232.36   | #ns        | 234        |
| 72.10.172.211  | #las6      | 266        |
| 72.10.172.218  | #siwa      | 140        |
| 83.68.16.6     | #ns        | 112        |

Even when looking at distinct clusters operating on the same IRC channel, they are likely to be associated with the same botnet. The M-clusters reveal strong similarities: many IRC servers are hosted in the same /24 subnet, and the bot-herder sends commands from rooms with recurring names or patterns. This suggests the operation of multiple separate botnets by the same entity or organization.

#### Combining Clustering Techniques
The combination of malware clustering techniques based on both static and dynamic features, along with contextual information on their evolution, allows us to better understand how malware is developed and propagated. Our work highlights the importance of leveraging different sources of information for studying the threat economy and the driving forces behind it.

### 5. Conclusion

In this paper, we evaluate and combine different clustering techniques to improve our effectiveness in building intelligence on the threats and their economy. We take advantage of a freely accessible honeypot, SGNET, and propose a pattern recognition technique to explore the relationships between exploits, shellcodes, and malware classes. Despite the current level of sophistication, simple clustering techniques often work well in practice. We also show the importance of these techniques in detecting and "healing" known problems such as the availability of a command and control server.

Moreover, we offer insights into the relationships between different malware families and their propagation contexts. We demonstrate with practical examples how different vulnerabilities and polymorphic worm exploits can be effectively used to support intrusion detection and root cause analysis.

### Acknowledgments

This work has been partially supported by the European Commission through project FP7-ICT-216026-WOMBAT under the 7th framework program. The opinions expressed in this paper are those of the authors and do not necessarily reflect the views of the European Commission. We would like to thank the reviewers, Ludovic Me, and Marc Dacier for their insightful comments that led to substantial improvements in this work.

### References

[1] ANUBIS: A platform for the dynamic analysis of malware. http://anubis.iseclab.org, 2009.
[2] P. Baecher, M. Koetter, T. Holz, M. Dornseif, and F. Freiling. The Nepenthes Platform: An Efficient Approach to Collect Malware. In 9th International Symposium on Recent Advances in Intrusion Detection (RAID), September 2006.
[3] M. Bailey, J. Oberheide, J. Andersen, Z. M. Mao, F. Jahanian, and J. Nazario. Automated classification of internet malware. In 10th International Symposium on Recent Advances in Intrusion Detection (RAID'07), September 2007.
[4] U. Bayer, P. M. Comparetti, C. Hlauschek, and E. Kirda. Scalable, Behavior-Based Malware Clustering. In 16th Annual Network & Distributed System Security Symposium, 2009.
[5] U. Bayer, I. Habibi, D. Balzarotti, E. Kirda, and C. Kruegel. Insights into current malware behavior. In LEET'09: 2nd USENIX Workshop on Large-Scale Exploits and Emergent Threats, April 21, 2009, Boston, MA, USA, Apr 2009.
[6] U. Bayer, C. Kruegel, and E. Kirda. TTAnalyze: A Tool for Analyzing Malware. In 15th European Institute for Computer Antivirus Research (EICAR 2006) Annual Conference, April 2006.
[7] J. Canto, M. Dacier, E. Kirda, and C. Leita. Large scale malware collection: Lessons learned. In IEEE SRDS Workshop on Sharing Field Data and Experiment Measurements on Resilience of Distributed Computing Systems, 2008.
[8] E. Carrera. Pefile, http://code.google.com/p/pefile/.
[9] J. R. Crandall, Z. Su, and S. F. Wu. On deriving unknown vulnerabilities from zero-day polymorphic and metamorphic worm exploits. In 12th ACM conference on Computer and Communications Security, pages 235-248. ACM Press, 2005.
[10] F-Secure. Malware Information Pages: Allaple.a, http://www.f-secure.com/v-descs/allaplea.shtml. December 2006.
[11] M. Gheorghescu. An Automated Virus Classification System. In Virus Bulletin Conference, 2005.
[12] T. Holz, C. Willems, K. Rieck, P. Duessel, and P. Laskov. Learning and Classification of Malware Behavior. In Fifth Conference on Detection of Intrusions and Malware & Vulnerability Assessment (DIMVA 08), June 2008.
[13] K. Julisch. Clustering intrusion detection alarms to support root cause analysis. ACM Transactions on Information and System Security (T/SSEC), 6(4):443-471, 2003.
[14] J. Z. Kolter and M. A. Maloof. Learning to detect and classify malicious executables in the wild. J. Mach. Learn. Res., 7:2721-2744, 2006.
[15] T. Lee and J. J. Mody. Behavioral Classification. In EICAR Conference, 2006.
[16] C. Leita. Automated protocol learning for the observation of malicious threats. PhD thesis, Universit√© de Nice-Sophia Antipolis, December 2008.
[17] C. Leita and M. Dacier. SGNET: a worldwide deployable framework to support the analysis of malware threat models. In 7th European Dependable Computing Conference (EDCC 2008), May 2008.
[18] C. Leita and M. Dacier. SGNET: Implementation and reaction to O-day attacks. In IEEE/IFIP Network Operations and Management Symposium, April 2008.
[19] C. Leita, M. Dacier, and F. Massicotte. Automatic handling of protocol dependencies with ScriptGen based honeypots. In 9th International Symposium on Recent Advances in Intrusion Detection (RAID), Sep 2006.
[20] C. Leita, K. Mermoud, and M. Dacier. Scriptgen: an automated script generation tool for honeyd. In 21st Annual Computer Security Applications Conference, December 2005.
[21] C. Linn and S. Debray. Obfuscation for malware detection. In 23rd Annual Computer Security Applications Conference (ACSAC), 2007.
[22] A. Moser, C. Kruegel, and E. Kirda. Limits of static analysis for malware detection. In 23rd Annual Computer Security Applications Conference (ACSAC), 2007.
[23] G. Portokalidis, A. Slowinska, and H. Bos. Argos: an emulator for fingerprinting zero-day attacks. In ACM Sigops EuroSys, 2006.
[24] D. Smith. Allaple worm (ISC diary), http://isc.sans.org/diary.html?storyid=2451.
[25] VirusTotal, www.virustotal.com. 2007.
[26] G. Wicherski. pehash: A novel approach to fast malware clustering. In 2nd USENIX Workshop on Large-Scale Exploits and Emergent Threats, April 2009.
[27] T. Yetiser. Polymorphic viruses - implementation, detection, and protection, http://vx.netlux.org/lib/ayt01.html.