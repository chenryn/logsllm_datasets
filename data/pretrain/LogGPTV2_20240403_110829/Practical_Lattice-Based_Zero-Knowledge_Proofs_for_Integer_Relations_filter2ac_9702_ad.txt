as follows. When being applied to vector
v =(cid:0)v1(cid:107) . . .(cid:107)vm1 (cid:107) vm1+1(cid:107) . . .(cid:107)vm1+m2(cid:107)vm1+m2+1(cid:107) . . .(cid:107)vm1+m2+N(cid:107)
(cid:107) vm1+m2+N +1(cid:107) . . .(cid:107)vm1+m2+N +|T|(cid:1) ∈ Zd,
whose ﬁrst m1 + m2 + N blocks are of length 2 and last |T| blocks are of length 4,
it transforms these blocks as described below.
vi (cid:55)→ P 2
ci
(vi), ∀i ∈ [m1];
vm1+m2+k (cid:55)→ P 2
ck
vm1+m2+N +t (cid:55)→ P 4
cit ,cjt
(vm1+j), ∀j ∈ [m2];
cN +j
vm1+j (cid:55)→ P 2
(vm1+m2+k), ∀k ∈ [N ];
(vm1+m2+N +t), ∀t ∈ [|T| ].
Based on the equivalences observed in (3)-(4), it can be checked that the
following holds. For all b, c ∈ {0, 1}N +m2 , all v ∈ Zd,
v = ENC(b) ⇐⇒ Γc(v) = ENC(b + c mod 2).
(7)
Let us now present the protocol, based on the above notations and techniques.
First, we perform the following extensions for the secret objects:
(cid:40)∀k ∈ [N + m2] : sk = ext2(sk) ∈ {0, 1}2
∀(it, jt) ∈ T : yit,jt = ext4(sit, sjt) ∈ {0, 1}4.
(8)
Now, we will perform some transformations regarding equation (5). Observe
that, for each i ∈ [m1], if we form matrix Gi = [0n1 | gi] ∈ Zn1×2
, then
we will have Gi · si = gi · si mod q. Similarly, for each j ∈ [m2], if we form
Bj = [0n1 | bj] ∈ Zn1×2
, then we will have Bj · sN +j = bj · sN +j mod q.
Therefore, if we build matrix M1 = [G1 | . . . | Gm1 | B1 | . . . | Bm2] ∈
, equation (5) can be expressed as M1 · w1 = u1 mod q, where w1 =
Zn1×d1
q
q
Next, we will unify all the n2 equations in (6) into just one equation modulo 2,
(cid:1) ∈ {0, 1}d1 .
q
(cid:0) s1 (cid:107) . . . (cid:107) sm1 (cid:107) sN +1 (cid:107) . . . (cid:107) sN +m2
(cid:40)H(cid:96),k = (cid:2) 0 | h(cid:96),k
(cid:3) ∈ Z1×2
F(cid:96),t = (cid:2) 0 | 0 | 0 | f(cid:96),t
2
in the following manner. We form matrices
(cid:3) ∈ Z1×4
2
, ∀((cid:96), k) ∈ [n2] × [N ];
, ∀((cid:96), t) ∈ [n2] × [|T| ],
13
and note that H(cid:96),k · sk = h(cid:96),k · sk mod 2 and F(cid:96),t · yit,jt = f(cid:96),t · (sij · sit) mod 2.
Thus, (6) can be rewritten as:
H1,1 · s1 + . . . + H1,N · sN + F1,1 · yi1,j1 + ··· + F1,|T| · yi|T |,j|T | = v1 mod 2
H2,1 · s1 + . . . + H2,N · sN + F2,1 · yi1,j1 + ··· + F2,|T| · yi|T |,j|T | = v2 mod 2
...
...
...
Hn2,1 · s1 + ··· + Hn2,N · sN + Fn2,1 · yi1,j1 + ··· + Fn2,|T| · yi|T |,j|T | = vn2 mod 2.
Letting u2 = (v1, . . . , vn2)(cid:62) ∈ Zn2
2 , the above equations can be uniﬁed into
M2 · w2 = u2 mod 2,
(9)
where matrix M2 ∈ Zn2×d2
2
is built from H(cid:96),k, F(cid:96),t, and
w2 =(cid:0) s1 (cid:107) . . . (cid:107) sN (cid:107) yi1,j1 (cid:107) . . . (cid:107) yi|T |,j|T |
(cid:1) ∈ {0, 1}2N +4|T|.
(cid:0) s1 (cid:107) . . . (cid:107) sm1 (cid:107) sN +1 (cid:107) . . . (cid:107) sN +m2 (cid:107) s1 (cid:107) . . . (cid:107) sN (cid:107) yi1,j1 (cid:107) . . . (cid:107) yi|T|,j|T|
Now, let us construct the vector w = (w1(cid:107)w2) ∈ {0, 1}d, which has the form
(cid:1),
where its components blocks are as described in (8). Then, by our above deﬁnition
of encoding vectors, we have w = ENC(s).
The transformations we have done so far allow us to reduce the original
statement to proving knowledge of vector s ∈ {0, 1}N +m2 , such that the compo-
nent vectors w1 ∈ {0, 1}d1, w2 ∈ {0, 1}d2 of w = ENC(s) satisfy the equations
M1 · w1 = u1 mod q and M2 · w2 = u2 mod 2. The derived statement can be
handled in Stern’s framework, based on the following main ideas.
– To prove that w = ENC(s), we will use the equivalence (7). To this end,
we sample a uniformly random c ∈ {0, 1}N +m2 and prove instead that
Γc(w) = ENC(s + c mod 2). Seeing this, the veriﬁer is convinced in ZK that
w indeed satisﬁes the required constraint, thanks to the randomness of c.
– To prove that equations M1 · w1 = u1 mod q and M2 · w2 = u2 mod 2 hold,
we sample uniformly random r1 ∈ Zd1
M1 · (w1 + r1) = u1 + M1 · r1 mod q; M2 · (w2 + r2) = u2 + M2 · r2 mod 2.
2 , and demonstrate that
q , r2 ∈ Zd2
The interactive protocol. Our interactive protocol goes as follows.
– The public input consists of matrices M1, M2 and vectors u1, u2, which are
– The prover’s witness consists of the original secret vector s ∈ {0, 1}N +m2 and
constructed from the original public input, as discussed above.
vector w = (w1(cid:107)w2) = ENC(s) derived from s, as described above.
The prover P and the veriﬁer V interact as described in Figure 1. The protocol
uses the KTX string commitment scheme COM, which is statistically hiding
14
and computationally binding. For simplicity of presentation, for vectors w =
(cid:1) ∈ Zd and r =(cid:0)r1(cid:107)r2
(cid:0)w1(cid:107)w2
integer vector z =(cid:0)z1(cid:107)z2
(cid:1) ∈ Zd, we denote by w (cid:1) r the operation that
(cid:1). We note that, for all c ∈ {0, 1}N +m2, if t = Γc(w)
computes z1 = w1 + r1 mod q, z2 = w2 + r2 mod 2, and outputs d-dimensional
and s = Γc(r), then we have Γc(w (cid:1) r) = t (cid:1) s.
The described protocol can be seen as an improved version of a Stern-like
protocol presented in [46], in the following aspect. In the case Ch = 1, instead of
sending Γc(w) = ENC(c(cid:63)) - which costs d = 2(m1 + m2) + 2N + 4|T| bits, we let
the prover send c(cid:63) which enables the veriﬁer to compute the value ENC(c(cid:63)) and
which costs only N + m2 bits. Due to this modiﬁcation, the results from [46] are
not directly applicable to our protocol, and thus, in the proof of Theorem 1, we
will analyze the protocol from scratch.
1. Commitment: P samples c ← U ({0, 1}N +m2 ), r1 ← U (Zd1
Then P samples randomness ρ1, ρ2, ρ3 for COM, and sends CMT =(cid:0)C1, C2, C3
computes r = (r1(cid:107)r2), z = w (cid:1) r.
to V, where C1 = COM(c, M1 · r1 mod q, M2 · r2 mod 2; ρ1), and
q ), r2 ← U (Zd2
2 ), and
(cid:1)
C2 = COM(Γc(r); ρ2), C3 = COM(Γc(z); ρ3).
2. Challenge: V sends a challenge Ch ← U ({1, 2, 3}) to P.
3. Response: P sends RSP computed according to Ch, as follows:
- Ch = 1: RSP = (c(cid:63), v, ρ2, ρ3), where c(cid:63) = s + c mod 2 and v = Γc(r).
- Ch = 2: RSP = (b, x, ρ1, ρ3), where b = c and x = z.
- Ch = 3: RSP = (e, y, ρ1, ρ2), where e = c and y = r.
Veriﬁcation: Receiving RSP, V proceeds as follows:
– Ch = 1: Let t = ENC(c(cid:63)). Check that C2 = COM(v; ρ2), C3 = COM(t (cid:1) v; ρ3).
– Ch = 2: Parse x = (x1(cid:107)x2), where x1 ∈ Zd1
q and x2 ∈ Zd2
2 , and check that
C1 = COM(b, M1· x1− u1 mod q, M2· x2− u2 mod 2; ρ1), C3 = COM(Γb(x); ρ3).
– Ch = 3: Parse y = (y1(cid:107)y2), where y1 ∈ Zd1
q and y2 ∈ Zd2
2 , and check that
C1 = COM(e, M1 · y1 mod q, M2 · y2 mod 2; ρ1), C2 = COM(Γe(y); ρ2).
In each case, V outputs 1 if and only if all the conditions hold.
Fig. 1: The interactive protocol.
Theorem 1. Suppose that COM is a statistically hiding and computationally
binding string commitment. Then, the protocol described above is a statistical
ZKAoK for the considered relation, with perfect completeness, soundness error 2/3
and communication cost ζ + 2 + N + m2 + 2(m1 + m2)(cid:100)log2 q(cid:101) + 2N + 4|T|, where
ζ = O(n log n) is the total bit-size of CMT and two commitment randomness.
15
Proof. We ﬁrst analyze the completeness and eﬃciency of the protocol. Then we
prove that it is a zero-knowledge argument of knowledge.
Completeness. Suppose that the prover is honest and follows the protocol.
Then, observe that the veriﬁer outputs 1 under the following conditions.
1. t (cid:1) v = Γc(z). This conditions holds, since w = ENC(s), and by equiva-
lence (7), we have t = ENC(c(cid:63)) = ENC(s + c mod 2) = Γc(ENC(s)) = Γc(w).
Hence, t (cid:1) v = Γc(w) (cid:1) Γc(r) = Γc(w (cid:1) r) = Γc(z).
2. M1 · x1 − u1 = M1 · r1 mod q and M2 · x2 − u2 = M2 · r2 mod 2. These
two equations hold, because x1 = w1 + r1 mod q, x2 = w2 + r2 mod 2 and
M1 · w1 = u1 mod q, M2 · w2 = u2 mod 2.
Therefore, the protocol has perfect completeness.
Eﬃciency. Both prover and veriﬁer only have to carry out O(d) simple
operations modulo q and modulo 2. In terms of communication cost, apart
from ζ bits needed for transferring CMT and two commitment randomness,
the prover has to send a vector in {0, 1}N +m2, a vector in Zd1
q and a vec-
tor in Zd2
2 , while the veriﬁer only has to send 2 bits. Thus, the total cost is
ζ + 2 + N + m2 + 2(m1 + m2)(cid:100)log2 q(cid:101) + 2N + 4|T| bits. (When COM is the KTX
string commitment scheme, we have ζ = 3n(cid:100)log2 q(cid:101) + 2m.)
with a (possibly dishonest) veriﬁer (cid:98)V, such that, given only the public input, it
Zero-Knowledge Property. We construct a PPT simulator SIM interacting
challenge value that (cid:98)V will not choose.
outputs with probability negligibly close to 2/3 a simulated transcript that is
statistically close to the one produced by the honest prover in the real interaction.
The simulator ﬁrst chooses a random Ch ∈ {1, 2, 3} as a prediction of the
1 ∈ Zd1
2 ∈ Zd2
1(cid:107)w(cid:48)
2).
Case Ch = 1: The simulator uses linear algebra over Zq and Z2 to compute
q and w(cid:48)
vectors w(cid:48)
2 =
u2 mod 2. Let w(cid:48) = (w(cid:48)
2 ), and
computes r = (r1(cid:107)r2), z(cid:48) = w(cid:48) (cid:1) r. Then, it samples randomness ρ1, ρ2, ρ3 for
Next, it samples c ← U ({0, 1}N +m2), r1 ← U (Zd1
COM and sends the commitment CMT =(cid:0)C(cid:48)
1 = u1 mod q and M2 · w(cid:48)
q ), r2 ← U (Zd2
(cid:1) to (cid:98)V, where
2 such that M1 · w(cid:48)
1, C(cid:48)
2, C(cid:48)
3
1 = COM(c, M1 · r1 mod q, M2 · r2 mod 2; ρ1),
C(cid:48)
3 = COM(Γc(z(cid:48)); ρ3).
C(cid:48)
2 = COM(Γc(r); ρ2), C(cid:48)
Receiving a challenge Ch from (cid:98)V, the simulator responds as follows:
– If Ch = 2: Send RSP =(cid:0)c, z(cid:48), ρ1, ρ3
(cid:1).
(cid:1).
– If Ch = 3: Send RSP =(cid:0)c, r, ρ1, ρ2
– If Ch = 1: Output ⊥ and abort.
Case Ch = 2: SIM samples s(cid:48) ← U ({0, 1}N +m2 ) and computes w(cid:48) = ENC(s(cid:48)).
Next, it picks c ← U ({0, 1}N +m2 ), and r1 ← U (Zd1
2 ), and computes
q ), r2 ← U (Zd2
16
r = (r1(cid:107)r2), z(cid:48) = w(cid:48) (cid:1) r. Then, it samples randomness ρ1, ρ2, ρ3 for COM and
sends the commitment CMT =(cid:0)C(cid:48)
(cid:1) to (cid:98)V, where
1, C(cid:48)
2, C(cid:48)
3
1 = COM(c, M1 · r1 mod q, M2 · r2 mod 2; ρ1),
C(cid:48)
C(cid:48)
2 = COM(Γc(r); ρ2), C(cid:48)
3 = COM(Γc(z(cid:48)); ρ3).