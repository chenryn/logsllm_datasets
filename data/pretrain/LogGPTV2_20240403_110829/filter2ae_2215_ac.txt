      * `public String toSetSourceString(OgnlContext, Object)`
      * `public void dump(PrintWrite, String)`
      * `public int getIndexInParent()`
      * `public Node getNextSibling()`
      * `protected Object evaluateGetValueBody(OgnlContext, Object)`  
调用`getValueBody()`方法 _（如果已经求过值，且存在固定值，则直接返回固定值）_
      * `protected void evaluateSetValueBody(OgnlContext, Object, Object)`  
调用`setValueBody()`方法
      * `public final Object getValue(OgnlContext, Object)`  
调用`evaluateGetValueBody()`方法 _（子类不允许复写）_
      * `protected abstract Object getValueBody(OgnlContext, Object)`  
抽象方法 _（子类必须实现）_
      * `public final void setValue(OgnlContext, Object, Object)`  
调用`evaluateSetValueBody()`方法 _（子类不允许复写）_
      * `protected void setValueBody(OgnlContext, Object, Object)`  
抛出InappropriateExpressionException异常
      * `public boolean isNodeConstant(OgnlContext)`  
返回false
      * `public boolean isConstant(OgnlContext)`  
调用`isNodeConstant()`方法
      * `public boolean isNodeSimpleProperty(OgnlContext)`  
返回false
      * `public boolean isSimpleProperty(OgnlContext)`  
调用`isNodeSimpleProperty()`方法
      * `public boolean isSimpleNavigationChain(OgnlContext)`  
调用`isSimpleProperty()`方法
      * `public boolean isEvalChain(OgnlContext)`  
任意子节点的`isEvalChain()`结果为true则返回true，否则返回false
      * `public boolean isSequence(OgnlContext)`  
任意子节点的`isSequence()`结果为true则返回true，否则返回false
      * `public boolean isOperation(OgnlContext)`  
任意子节点的`isOperation()`结果为true则返回true，否则返回false
      * `public boolean isChain(OgnlContext)`  
任意子节点的`isChain()`结果为true则返回true，否则返回false
      * `public boolean isSimpleMethod(OgnlContext)`  
返回false
      * `protected boolean lastChild(OgnlContext)`
      * `protected void flattenTree()`
      * `public ExpressionAccessor getAccessor()`  
返回`_accessor`变量
      * `public void setAccessor(ExpressionAccessor)`  
设置`_accessor`变量
再来是ASTNode大家族：
  * ASTAssign
    * 表现形式
      * `one = two`
    * 实现/重写方法
      * `protected Object getValueBody(OgnlContext, Object)`  
右节点的计算结果作为result，传入左节点的`setValue()`方法，返回result
      * `public boolean isOperation(OgnlContext)`  
返回true
  * ASTChain
    * 表现形式
      * `one.two`
    * 实现/重写方法
      * `protected Object getValueBody(OgnlContext, Object)`  
遍历子节点计算
_（IndexedProperty类型调用OgnlRuntime.getIndexProperty()方法，其他调用getValue()方法）_
，且前后子节点成菊花链，返回最后一个子节点的计算结果
      * `protected void setValueBody(OgnlContext, Object)`  
遍历最后一个子节点外的其他子节点计算 _（基本同上）_ ，调用最后一个子节点的`setValue()`方法
_（IndexedProperty类型则是遍历到倒数第二个子节点时调用OgnlRuntime.setIndexedProperty()方法）_
      * `public boolean isSimpleNavigationChain(OgnlContext)`  
所有子节点的`isSimpleProperty()`结果都为true则返回true，否则返回false
      *             public bollean isChain(OgnlContext)
        1. 返回true
  * ASTConst
    * 表现形式
      * `null` _（null，字符串形式）_
      * `"one"` _（String类型）_
      * `'o'` _（Character类型）_
      * `0L` _（Long类型）_
      * `0B` _（BigDecimal类型）_
      * `0H` _（BigInteger类型）_
      * `:[ one ]` _（Node类型）_
    * 实现/重写方法
      * `public void setValue(Object)`  
设置`value`变量
      * `public Object getValue()`  
返回`value`变量
      * `protected Object getValueBody(OgnlContext, Object)`  
返回`value`变量
      * `public boolean isNodeConstant(OgnlContext)`  
返回true
  * ASTCtor
    * 表现形式
      * `new one[two]` _（默认初始化数组）_
      * `new one[] two` _（静态初始化数组）_
      * `new one()` _（无参对象）_
      * `new one(two, three)` _（含参对象）_
    * 实现/重写方法
      * `protected Object getValueBody(OgnlContext, Object)`  
遍历子节点计算，结果放入`args`数组变量，并传入`OgnlRuntime.callConstructor()`方法
_（如果是数组，则调用Array.newInstance()方法）_ ，返回实例化对象
  * ASTEval
    * 表现形式
      * `(one)(two)`
    * 实现/重写方法
      * `protected Object getValueBody(OgnlContext, Object)`  
左节点的计算结果作为expr，右节点的计算结果作为source，判断expr是否为Node类型，否则解析，结果作为node，source放入root中，并传入node计算
      * `protected void setValueBody(OgnlContext, Object, Object)`  
左节点的计算结果作为expr，右节点的计算结果作为target，判断expr是否为Node类型，否则解析，结果作为node，target放入root中，并传入node的`setValue()`方法
      * `public boolean isEvalChain(OgnlContext)`  
返回true
  * ASTKeyValue
    * 表现形式
      * `one -> two`
    * 实现/重写方
      * `protected Object getValueBody(OgnlContext, Object)`  
返回null
  * ASTList
    * 表现形式
      * `{ one, two }`
    * 实现/重写方法
      * `protected Object getValueBody(OgnlContext, Object)`  
遍历子节点计算，结果放入ArrayList对象，遍历结束后返回
  * ASTMap
    * 表现形式
      * `#@one@{ two : three, four : five }` _（存在类名）_
      * `#{ one : two, three : four }`
    * 实现/重写方法
      * `protected Object getValueBody(OgnlContext, Object)`  
根据类名实例化Map对象 _（如果没有类名就是默认的LinkedHashMap类型）_ ，遍历子节点，当前子节点 _（ASTKeyValue类型）_
为key，其计算结果为value，放入Map中
  * ASTMethod
    * 表现形式
      * `one()` _（无参方法）_
      * `one(two, three)` _（含参方法）_
    * 实现/重写方法
      * `protected Object getValueBody(OgnlContext, Object)`  
遍历子节点计算，结果放入`args`数组变量，并传入`OgnlRuntime.callMethod()`方法，如果结果为空 _（即无此方法）_
，则设置空方法执行结果，返回执行结果
      * `public boolean isSimpleMethod(OgnlContext)`  
返回true
  * ASTProject
    * 表现形式
      * `{ one }`
    * 实现/重写方法
      * `protected Object getValueBody(OgnlContext, Object)`  
遍历`ElementsAccessor.getElements()`结果，依次作为source传入第一个子节点计算，结果放入ArrayList对象，遍历结束后返回
  * ASTProperty
    * 表现形式
      * `one`
      * `[one]` _（Indexed类型）_
    * 实现/重写方法
      * `protected Object getValueBody(OgnlContext, Object)`  
调用`getProperty()`对第一个子节点求值，结果作为name传入`OgnlRuntime.getProperty()`，返回执行结果
      * `protected void setValueBody(OgnlContext, Object, Object)`  
调用`OgnlRuntime.setProperty()`方法
      * `public boolean isNodeSimpleProperty(OgnlContext)`  
返回第一个子节点的`isConstant()`结果
  * ASTSelect
    * 表现形式
      * `{? one }`
    * 实现/重写方法
      * `protected Object getValueBody(OgnlContext, Object)`  
遍历`ElementsAccessor.getElements()`结果，依次作为source传入第一个子节点计算，结果通过`OgnlOps.booleanValue()`判断真假，真则放入ArrayList对象，遍历结束后返回ArrayList
  * ASTSelectFirst
    * 表现形式
      * `{^ one }`
    * 实现/重写方法
      * `protected void getValueBody(OgnlContext, Object)`  
遍历`ElementsAccessor.getElements()`结果，依次作为source传入第一个子节点计算，结果通过`OgnlOps.booleanValue()`判断真假，真则放入ArrayList对象并跳出遍历，遍历结束后返回ArrayList
  * ASTSelectLast
    * 表现形式
      * `{$ one }`
    * 实现/重写方法
      * `protected void getValueBody(OgnlContext, Object)`  
遍历`ElementsAccessor.getElements()`结果，依次作为source传入第一个子节点计算，结果通过`OgnlOps.booleanValue()`判断真假，真则清空ArrayList对象并放入，遍历结束后返回ArrayList
  * ASTSequence
    * 表现形式
      * `one, two`
    * 实现/重写方法
      * `protected Object getValueBody(OgnlContext, Object)`  
遍历子节点计算，返回最后一个子节点的计算结果
      * `protected Object setValueBody(OgnlContext, Object, Object)`  
遍历最后一个子节点外的其他子节点计算，调用最后一个子节点的`setValue()`方法