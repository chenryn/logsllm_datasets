            [('method', 'String'), ('name', 'String'), ('age', 'Int'), ('data', 'Json'), ('data.name', 'String'), ('sada', 'Int')]
            '''
            param_list=[]
            query = parse.urlparse(http_request['url']).query
            if http_request['method'] == 'GET' and query!='':
                param_list.extend(self.process_param(query))
            elif http_request['method'] == 'POST' and http_request['body']!='':
                if query!='':param_list.extend(self.process_param(query))
                if self.type_param(http_request['body'])=='Json':
                    if type(http_request['body'])==type({}):
                        self.process_json(http_request['body'])
                    else:
                        self.process_json(json.loads(http_request['body']))
                    param_list.extend(self.list_data)
                else:
                    param_list.extend(self.process_param(http_request['body']))
            self.list_data=[]
            return param_list
        def callback_http_request(self,http_request,param,payload='',payload_num=0):
            '''
            返回设置payload后的http请求包
            :param http_request:
            :param param:
            :param payload:
            :param payload_num:
            :return:
            '''
            http_request=copy.deepcopy(http_request)
            if self.type_param(http_request['body'])=='Json':
                http_request['body']=json.loads(http_request['body'])
            url_process = parse.urlparse(http_request['url'])
            http_get_data = self.callback_param_http_request(copy.deepcopy(url_process.query), param, payload, payload_num)
            if http_request['method'] == 'GET' and url_process.query!='' and http_get_data!= {}:
                http_request['url'] = url_process.scheme + '://' + url_process.netloc + url_process.path + '?' + http_get_data[
                    'param_data']
                http_request=self.callback_set_json(http_request,http_get_data)
                return http_request
            elif http_request['method'] == 'POST' and http_request['body'] != 'Null':
                if url_process.query != '' and http_get_data!= {}:
                    http_request['url']=url_process.scheme+'://'+url_process.netloc+url_process.path+'?'+http_get_data['param_data']
                    http_request=self.callback_set_json(http_request,http_get_data)
                    return http_request
                if self.type_param(http_request['body'] )=='Json':
                    json_data=self.callback_json_http_request(http_request['body'],param,payload,payload_num)
                    http_request = self.callback_set_json(http_request, json_data)
                    http_request["body"] = json_data["data"]
                    return http_request
                elif http_request['body']!='Null' :
                    post_data = self.callback_param_http_request(copy.deepcopy(http_request["body"]), param, payload,payload_num)
                    if post_data!={}:
                        http_request = self.callback_set_json(http_request, post_data)
                        http_request["body"] = post_data["param_data"]
                        return http_request
            return http_request
    if __name__ == '__main__':
        test_json={"headers": {"Origin": "http://192.168.220.130", "Cookie": "PHPSESSID=1db5thrprbsm1nms5fer3fdj7c", "Accept": "*/*", "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4505.0 Safari/537.36", "Referer": "http://192.168.220.130/web_vul_test/test_sql.html", "Connection": "close", "Accept-Encoding": "gzip, deflate", "Content-type": "application/json", "Accept-Language": "zh-CN,zh;q=0.9", "Content-Length": "58"}, "method": "POST", "body": "{\"name\":\"lisi\",\"age\":50,\"data\":{\"name\":\"acccca\"},\"sada\":1}", "url": "http://192.168.220.130:80/web_vul_test/php_api/json_sql.php?method=sql_inj_json_insert_method&dsadas=aa1111111"}
        #test_json = {"headers": {"Cookie": "PHPSESSID=1db5thrprbsm1nms5fer3fdj7c", "Accept": "*/*", "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4505.0 Safari/537.36", "Referer": "http://192.168.220.130/web_vul_test/test_sql.html", "Connection": "close", "Accept-Encoding": "gzip, deflate", "Accept-Language": "zh-CN,zh;q=0.9"}, "method": "GET", "body": "null", "url": "http://192.168.220.130:80/web_vul_test/php_api/json_sql.php?as&fds=111"}
        #test_json={"headers": {"Origin": "http://192.168.220.130", "Cookie": "PHPSESSID=1db5thrprbsm1nms5fer3fdj7c", "Accept": "*/*", "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4505.0 Safari/537.36", "Referer": "http://192.168.220.130/web_vul_test/test_sql.html", "Connection": "close", "Accept-Encoding": "gzip, deflate", "Content-type": "application/x-www-form-urlencoded", "Accept-Language": "zh-CN,zh;q=0.9", "Content-Length": "36"}, "method": "POST", "body": "fname=Bill&lname=Gates&id=2&dasdsa=1", "url": "http://192.168.220.130:80/web_vul_test/php_api/json_sql.php?method=sql_inj_post_method&sa1=sada&aaa1=a1"}
        task=process_http_request()
        for item in task.callback_param_list(test_json):
            if item[1] != 'Json':
                print(item)
                print(task.callback_http_request(test_json, item[0], 'payload', 0))
以上为要用到的代码
### 案例解释1:
用burp抓包得到的GET请求:
    GET /web_vul_test/php_api/json_sql.php?method=sql_inj_get_method&id=1dasdsadsa&ida=13243234&id=1 HTTP/1.1
    Host: 192.168.220.130
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4505.0 Safari/537.36
    Accept: */*
    Referer: http://192.168.220.130/web_vul_test/test_sql.html
    Accept-Encoding: gzip, deflate
    Accept-Language: zh-CN,zh;q=0.9
    Connection: close
通过我的burp插件(这个之后写)处理后为:
    {
        "headers": 
        {
            "Accept": "*/*",
             "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML,like Gecko) Chrome/92.0.4505.0 Safari/537.36",
             "Referer": "http://192.168.220.130/web_vul_test/test_sql.html",
             "Connection": "close",
             "Accept-Encoding": "gzip,deflate",
             "Accept-Language": "zh-CN,zh;q=0.9"
        },
         "method": "GET",
         "body": "null",
         "url": "http://192.168.220.130:80/web_vul_test/php_api/json_sql.php?method=sql_inj_get_method&id=1dasdsadsa&ida=13243234&id=1"
    }
这个时候从漏洞检测的角度讲，我完全可以通过修改User-Agent/Referer/Cookie,之类的header参数值，进行些黑盒漏洞测试，当然我们要讲的不在这里，是在URL:[http://192.168.220.130:80/web_vul_test/php_api/json_sql.php?method=sql_inj_get_method&id=1dasdsadsa&ida=13243234&id=1](http://192.168.220.130:80/web_vul_test/php_api/json_sql.php?method=sql_inj_get_method&id=1dasdsadsa&ida=13243234&id=1)
的参数段，
method=sql_inj_get_method&id=1dasdsadsa&ida=13243234&id=1，web漏洞不考虑0/N-day的情况下，大部分漏洞都在这个地方，
我们以上的代码process_http_request.py 也就是为了处理这个地方。
如图所示，结果为
    method=sql_inj_get_method&id=1dasdsadsa&ida=13243234&id=1
    (参数名,参数值类型，参数值)
    ('method', 'String', 'sql_inj_get_method')
    ('id', 'String', '1dasdsadsa')
    ('ida', 'Int', '13243234')
    ('id', 'Int', '1')
那么我们取消掉图上注释执行结果:
    ('method', 'String', 'sql_inj_get_method')
    {'headers': {'Accept': '*/*', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4505.0 Safari/537.36', 'Referer': 'http://192.168.220.130/web_vul_test/test_sql.html', 'Connection': 'close', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'zh-CN,zh;q=0.9'}, 'method': 'GET', 'body': 'null', 'url': 'http://192.168.220.130:80/web_vul_test/php_api/json_sql.php?id=1dasdsadsa&ida=13243234&id=1&method=sql_inj_get_methodpayload', 'param_name': 'method', 'param_value': 'sql_inj_get_method', 'param_type': 'String'}
    ('id', 'String', '1dasdsadsa')
    {'headers': {'Accept': '*/*', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4505.0 Safari/537.36', 'Referer': 'http://192.168.220.130/web_vul_test/test_sql.html', 'Connection': 'close', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'zh-CN,zh;q=0.9'}, 'method': 'GET', 'body': 'null', 'url': 'http://192.168.220.130:80/web_vul_test/php_api/json_sql.php?id=1dasdsadsapayload&ida=13243234&id=1payload&method=sql_inj_get_method', 'param_name': 'id', 'param_value': '1', 'param_type': 'Int'}
    ('ida', 'Int', '13243234')
    {'headers': {'Accept': '*/*', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4505.0 Safari/537.36', 'Referer': 'http://192.168.220.130/web_vul_test/test_sql.html', 'Connection': 'close', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'zh-CN,zh;q=0.9'}, 'method': 'GET', 'body': 'null', 'url': 'http://192.168.220.130:80/web_vul_test/php_api/json_sql.php?id=1dasdsadsa&ida=13243234payload&id=1&method=sql_inj_get_method', 'param_name': 'ida', 'param_value': '13243234', 'param_type': 'Int'}
    ('id', 'Int', '1')
    {'headers': {'Accept': '*/*', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4505.0 Safari/537.36', 'Referer': 'http://192.168.220.130/web_vul_test/test_sql.html', 'Connection': 'close', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'zh-CN,zh;q=0.9'}, 'method': 'GET', 'body': 'null', 'url': 'http://192.168.220.130:80/web_vul_test/php_api/json_sql.php?id=1dasdsadsapayload&ida=13243234&id=1payload&method=sql_inj_get_method', 'param_name': 'id', 'param_value': '1', 'param_type': 'Int'}
请自行发现规律和理解下...
该代码主要用这两个方法:
  1. `callback_param_list` 方法为，遍历http的请求参数 并遍历返回 (参数名,参数值类型，参数值)
  2. `callback_http_request` 方法为:
    callback_http_request(burp转好的http request,要设置的参数名,payload,payload_num)
    payload_num  0为值后追加 1为替换 2为值前追加
然后返回设置好payload的http request。
### 案例解释2:
POST方式 JSON数据格式传参的http请求
    {
        "headers": 
        {
            "Origin": "http://192.168.220.130",
             "Accept": "*/*",
             "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML,
             like Gecko) Chrome/92.0.4505.0 Safari/537.36",
             "Referer": "http://192.168.220.130/web_vul_test/test_sql.html",
             "Connection": "close",
             "Accept-Encoding": "gzip,deflate",
             "Content-type": "application/json",
             "Accept-Language": "zh-CN,zh;q=0.9",
             "Content-Length": "58"
        },
         "method": "POST",
         "body": "
        {
            \"name\":\"lisi\",
            \"age\":50,
            \"data\":
            {
                \"name\":\"acccca\",
                \"data\":
                {
                    \"url\":\"http://www.qq.com\"
                }
            },
            \"sada\":1
        }
        ",
         "url": "http://192.168.220.130:80/web_vul_test/php_api/json_sql.php?method=sql_inj_json_insert_method"
    }
其实了和案例1 没有什么区别，就是GET和POST参数处理，支持处理 GET POST, a=1&b=c&asda=dsadsa
和JSON方式传参,并且遍历json N层json嵌套都可以。
## 漏洞检测案例
### 案例1 ssrf检测
关于案例而的实战应用，假设url参数名是一个ssrf漏洞， 实际黑盒漏洞挖掘中，我们需要手工换掉
为
在本代码中
执行结果:
    {'headers': {'Origin': 'http://192.168.220.130', 'Accept': '*/*', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4505.0 Safari/537.36', 'Referer': 'http://192.168.220.130/web_vul_test/test_sql.html', 'Connection': 'close', 'Accept-Encoding': 'gzip, deflate', 'Content-type': 'application/json', 'Accept-Language': 'zh-CN,zh;q=0.9', 'Content-Length': '58'}, 'method': 'POST', 'body': {'name': 'lisi', 'age': 50, 'data': {'name': 'acccca', 'data': {'url': 'http://www.ssrf.com'}}, 'sada': 1}, 'url': 'http://192.168.220.130:80/web_vul_test/php_api/json_sql.php?method=sql_inj_json_insert_method', 'param_name': 'data.data.url', 'param_value': 'http://www.qq.com', 'param_type': 'Url'}
然后我们二次重放这个http request，就是在进行SSRF漏洞检测了。
### 案例2 反射XSS检测
反射XSS的检测原理为判断响应包。
1，是否为http响应为可浏览器解析渲染的页面 如Response的`Content-Type:` 是html/xml之类，
2, http响应内容里是否存在有 请求包URL上可控的参数。
3，该可控参数是否可以执行JavaScript
    {
        "headers": 
        {
            "Accept": "*/*",
             "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML,
             like Gecko) Chrome/92.0.4505.0 Safari/537.36",
             "Referer": "http://192.168.220.130/web_vul_test/test_sql.html",
             "Connection": "close",
             "Accept-Encoding": "gzip,
             deflate",
             "Accept-Language": "zh-CN,
            zh;q=0.9"
        },
         "method": "GET",
         "body": "null",
         "url": "http://192.168.220.130:80/web_vul_test/php_api/json_sql.php?method=sql_inj_get_method&id=1dasdsadsa&ida=13243234&xss=xsss"
    }
假设如上请求包,URL上参数名为xss的符合
以上三个反射XSS的条件，是个反射型XSS漏洞，我们通过process_http_request.py来进行操作,
如图遍历所有参数 追加payload，并再重放http请求，就能检测到xss名是存在XSS漏洞的。
## END
_这篇就是很单纯的http请求包处理，属于漏洞检测的核心功能，配合burp/爬虫之类，用于自动化漏扫和被动式漏扫，方便自动化设置payload_
，web漏洞测试工具研发是很麻烦的，首先第一步得搞一个靶场，各种奇葩的靶场环境，并且有很多http，html，JavaScript，css, php,
nodejs, jsp之类奇奇怪怪的web场景案例，http协议上的各种奇怪问题,比如GraphQL方式传参，
以及响应包里的奇怪问题，甚至于为了覆盖检测某些奇葩业务还要考虑vbscript的靶场案例来满足扫描器的需求，还有响应内容的问题... 。
欢迎扫描器技术交流 wechat: guimaizi