46.if (socketUtil.getClient() != null) 
47.try
48.            {47.try
48.            { 
49.                socketUtil.getClient().close(); 
50.            } catch (IOException e) 
51.            { 
北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程
53.            } 
54.
55.    } 
56.
57.    @SuppressWarnings("unchecked") 
58.    @Override 
59.public Status process() throws EventDeliveryException 
60.    { 
61.        Status status = null; 
62.61.        Status status = null; 
62.
63.        // Start transaction 
64.        Channel ch = getChannel(); 
65.        Transaction txn = ch.getTransaction(); 
66.        txn.begin(); 
67.try
68.        { 
69.
70.            Event event = ch.take(); 
71.            //prepare the log data 
72.            String eventData = new String(event.getBody(), DEFAULT_E
NCODING);NCODING); 
73.            PrimitiveEvent primitiveEvent = new PrimitiveEvent(); 
74.            ValueType valueType = new ValueType(eventData, "string")
; 
75.            primitiveEvent.getAttributeMap().put("flumeeventdata", v
alueType); 
76.            Date date = new Date(); 
77.long time = date.getTime(); 
78.            primitiveEvent.setStart_ts(time); 
79.            primitiveEvent.setEnd_ts(time);80.
81.            //transfer data to cep server 
82.            String[] address = CEPServerSocketIpPort.split(":"); 
83.            socketUtil.setIp(address[0]); 
84.            socketUtil.setPort(address[1]); 
85.            socketUtil.setRetrynum(retrynum); 
86.            socketUtil.outputPrimitiveEvent(primitiveEvent); 
87.
88.
89.            txn.commit(); 
90.            status = Status.READY;90.            status = Status.READY; 
91.        } catch (Throwable t) 
92.        { 
北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程
93.            txn.rollback(); 
94.
95.            status = Status.BACKOFF; 
96.
97.if (t instanceof Error) 
98.            { 
99.throw (Error) t; 
100.            } 
101.        } finally
102.        { 
103.            txn.close(); 
104.        } 
105.return status;104.        } 
105.return status; 
106.    } 
107.} 
linux 的 flume 启动调用 sh 脚本即可，windows 中可参考下面脚本
[plain] view plaincopy 
1.set FLUME_HOME=E:\software\apache-flume-1.5.2-bin\apache-flume-1.5.2
-bin 
2.set JAVA_HOME=D:\Program Files\Java\jdk1.7.0_51 
3.set JAVA="%JAVA_HOME%\bin\java.exe" 
4.set JAVA_OPTS=-Xmx256m 
5.set CONF=%FLUME_HOME%\conf\flume-cep-conf.properties 
6.set AGENT=agent6.set AGENT=agent 
7.%JAVA%  %JAVA_OPTS% -Dflume.monitoring.type=http -Dflume.monitoring.
port=34545 -Dlog4j.configuration=file:\\\%FLUME_HOME%\conf\log4j.pro
perties -cp "%FLUME_HOME%\lib\*" org.apache.flume.node.Application -
f %FLUME_HOME%\conf\flume-cep-conf.properties -n %AGENT% 
flume-cep-conf.properties 
[plain] view plaincopy 
1.agent.sources = seqGenSrc 
2.agent.channels = memoryChannel2.agent.channels = memoryChannel 
3.agent.sinks = loggerSink 
4.
5.
北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程
7.agent.sources.seqGenSrc.type = seq 
8.
9.
10.# The channel can be defined as follows. 
11.agent.sources.seqGenSrc.channels = memoryChannel 
12.
13.
14.# Each sink's type must be defined 
15.agent.sinks.loggerSink.type = logger 
16.
17.
18.#Specify the channel the sink should use19.agent.sinks.loggerSink.channel = memoryChannel 
20.
21.
22.# Each channel's type is defined. 
23.agent.channels.memoryChannel.type = memory 
24.
25.
26.# Other config values specific to each type of channel(sink or sourc
e) 
27.# can be defined as well 
28.# In this case, it specifies the capacity of the memory channel 
29.agent.channels.memoryChannel.capacity = 100 
30.agent.sources = seqGenSrc30.agent.sources = seqGenSrc 
31.agent.channels = memoryChannel 
32.agent.sinks = loggerSink 
33.
34.
35.agent.sources.seqGenSrc.type = seq 
36.agent.sources.seqGenSrc.channels = memoryChannel 
37.agent.sources.seqGenSrc.type = exec 
38.agent.sources.seqGenSrc.command = cmd.exe /c echo test 
39.agent.sources.seqGenSrc.restart = true 
40.agent.sources.seqGenSrc.restartThrottle = 100041.agent.sources.seqGenSrc.batchSize = 100 
42.
43.
44.agent.sinks.loggerSink.type = com.sodbase.dataadaptor.flume.CEPServe
rSink 
45.agent.sinks.loggerSink.channel = memoryChannel 
46.agent.sinks.loggerSink.CEPServerSocketIpPort=localhost:12345 
47.agent.sinks.loggerSink.CEPServerSocketRetryNum=2 
北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程
49.
50.agent.channels.memoryChannel.type = memorycommand 可以用 tail 命令在监测日志，windows 下有 python 版的命令。
日志数据采集上来以后，数据分析和展示请参考 
  第 1.1 小节 2.1
小节有服务函数调用分析的例子，读者也可以定制自己的分析策略 APM 探针方式请参考 
CEP 因其高效的规则管理能力和卓越的定制化能力，常作为服务监控或应用监 控系统的核心。监控系统中，除了前文介绍的日志采集方法，还有一种 APM 探针的方法。APM 探针和日志采集一样不需要修改原有系统，同时能够得到一 些日志中不方便监测的数据。
本文示例基于 Java 探针。对其它开发语言如 PHP、.Net C#、HTML、Objective C 等构建的系统，探针原理类似。也是不改动原有系统的前提下，使用工具加一些监
测代码。
1. 示例操作步骤
（1）下载（“数据采集示例”），下载（“SODBASE Studio 示例模型”）服务器端 ，下载 。
（2）解压 SODBASE Studio 打开，导入 apm.sod 模型，作用就是把采集上来
的监测数据屏幕打印输出。
北京速德贝斯科技有限公司 WWW.SODBASE.COM
	 SODBASECEP 入门与进阶教程 在左侧模型列表中点击 apm，在工作面板右键，点击测试运行。
（ 3 ） 解 压 sodbase-dataadaptor-apm 工 程 ， 导 入 Eclipse 。 打 开
com.example.apm 包下的 TimeCostTest.java，它是被监测程序。
Run As Run Configuration...配置 VM Arguments，-javaagent:lib/apm.jar -Dpackagemonitored=com -Dcep_home=cep_home 
（4）输出结果
北京速德贝斯科技有限公司 WWW.SODBASE.COM（4）输出结果
北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程
在 SODBASE Studio 中可看到输出结果
2. 工作原理
2.1 探针程序
APM 探针的原理其实比较简单，主要因为现代编译解释虚拟机（JVM,.net 
framework 等）已经提供了一项功能：在不影响原程序的同时，可以在线增加一些
监测度量代码。
示例的探针程序的源代码也在 sodbase-dataadaptor-apm 工程中，使用了
Javassist 工具来在线添加监测代码。Javassist 几乎提供了编写探针用到的所
有功能。
例如，添加新的方法和类、修改系统类（rt.jar 中的类，当然要遵循 Oracle Java
的许可）、修改方法中的一部分（如打印异常堆栈传输到服务器）。使用之前建
议读者参考 Javassist 的官方教程。议读者参考 Javassist 的官方教程。
本文示例中用的是 javaagent方式,在启动被监测的时候加启动参数。lib/apm.jar 是探针程序 -Dpackagemonitored 是要监测的包前缀，-Dcep_home 是放置 SODBASE CEP 配置文件的目录。
另外，也可以在被监测程序运行过程中，通过进程 ID 来 Attach。具体方法读 者可参考 Java Instrumentation 相关文章。
2.2 传送数据到监测服务器
传送数据到监测服务器有两个挑战
（1）传送程序不能阻塞原来系统正常运行，因为需要是异步传输
（2）并不一定所有数据都要传送。选择需要的数据如执行时间超过 1 秒的数
据，或者定时传送统计数据
为解决这两个挑战，我们在探针采集端用了一个嵌入式 SODBASE CEP 引擎,
北京速德贝斯科技有限公司 WWW.SODBASE.COM北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程
从而实现了
（1）异步传输
（2）通过 cep_home/files/apmagent.xml 的 EPL 语句来控制数据传输
示例中目前是全部数据传输。如传输时间超过 1 秒的数据，可将 XML 中
SODSQL 修改为
[sql]  
1.CREATE QUERY apmagent SELECT * FROM T1:collectdata PATTERN T1 WHERE 	T1.timecost>1000  WITHIN 0 
EPL 写法请参考类 一文。
之前我们在一文直接用了 SocketUtil 类的 API 传输数据，这是因为 一定程度上解决了上述两个挑战。如果想进一 步升级，也建议采用本文嵌入式 SODBASE CEP 引擎方式。
2.3 图形展示和报表2.3 图形展示和报表
如果需要图形展示，可以参考 SODBASE View 中的 RESTful 接口，或者也可以将 数据输出入库（包括磁盘库或 memory 库），用 iReport 等工具生成报表。
2.4 APM 产品
目前有不少 APM 厂商，主要是两类。一类是云监测，用户的数据传到 APM 厂
商的服务器上去。云监测服务器端比较庞大，不适宜迁移到企业内部，但是使
用和计价都比较灵活。另一类是独立 APM 产品，适合放在企业内部。SODBASE CEP 既可以搭建云监测平台，也可以做独立 APM 产品。相对来说，SODBASE CEP 尤其合适监测平台放置在企业内部的场合，满足易定制、易维护的需求。
自己写输入输出适配器，只需要实现 OptimizedInputAdaptorI 和 OptimizedInputAdaptorI 就可以了。
北京速德贝斯科技有限公司 WWW.SODBASE.COM北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程
1.输入适配器
[java]  
1.package com.example; 
2.
3.import java.util.Date; 
4.
5.import zstreamplus.eventbuffer.PrimitiveEvent; 
6.import zstreamplus.eventbuffer.ValueType; 
7.
8.import com.sodbase.inputadaptor.OptimizedInputAdaptorI; 
9.
10.
11.publicclass MyInputAdaptor extends OptimizedInputAdaptorI 
12.{ 
13.
14.private String[] myParams; 