StormEvents
| partition hint.strategy=native by State 
    (
    sort by StartTime asc
    | scan with 
    (
        step hail: EventType == "Hail";
        step tornado: EventType == "Tornado" and StartTime - hail.StartTime  [!div class="nextstepaction"]
> Run the query
```kusto
let Events = datatable (Ts: timespan, Event: string) [
    0m, "A",
    1m, "Start",
    2m, "B",
    3m, "D",
    4m, "Stop",
    6m, "C",
    8m, "Start",
    11m, "E",
    12m, "Stop"
]
;
Events
| sort by Ts asc
| scan with_match_id=m_id with 
(
    step s1: Event == "Start";
    step s2: Event != "Start" and Event != "Stop" and Ts - s1.Ts  [!NOTE]
> An input record is evaluated against the steps in reverse order, from the last step (`s3`) to the first step (`s1`). 
#### Record 1
|Ts|Event|
|---|---|
|0m|"A"|
**Record evaluation at each step:**
* `s3`: **Check 1** isn't passed because the state of `s2` is empty, and **Check 2** isn't passed because `s3` lacks an active sequence.
* `s2`: **Check 1** isn't passed because the state of `s1` is empty, and **Check 2** isn't passed because `s2` lacks an active sequence.
* `s1`: **Check 1** is irrelevant because there's no previous step. **Check 2** isn't passed because the record doesn't meet the condition of `Event == "Start"`. **Record 1** is discarded without affecting the state or output.
**State:**
|step|m_id|s1.Ts|s1.Event|s2.Ts|s2.Event|s3.Ts|s3.Event|
|---|---|---|---|---|---|---|---|
|s1||||X|X|X|X|
|s2||||||X|X|
|s3||||||||
#### Record 2
|Ts|Event|
|---|---|
|1m|"Start"|
**Record evaluation at each step:**
* `s3`: **Check 1** isn't passed because the state of `s2` is empty, and **Check 2** isn't passed because `s3` lacks an active sequence.
* `s2`: **Check 1** isn't passed because the state of `s1` is empty, and **Check 2** isn't passed because `s2` lacks an active sequence.
* `s1`: **Check 1** is irrelevant because there's no previous step. **Check 2** is passed because the record meets the condition of `Event == "Start"`. This match initiates a new sequence, and the `m_id` is assigned. **Record 2** and its `m_id` (`0`) are added to the state and the output.
**State:**
|step|m_id|s1.Ts|s1.Event|s2.Ts|s2.Event|s3.Ts|s3.Event|
|---|---|---|---|---|---|---|---|
|s1|0|00:01:00|"Start"|X|X|X|X|
|s2||||||X|X|
|s3||||||||
#### Record 3
|Ts|Event|
|---|---|
|2m|"B"|
**Record evaluation at each step:**
* `s3`: **Check 1** isn't passed because the state of `s2` is empty, and **Check 2** isn't passed because `s3` lacks an active sequence.
* `s2`: **Check 1** is passed because the state of `s1` is nonempty and the record meets the condition of `Ts - s1.Ts  [!NOTE]
> There are now two active sequences in the state.
#### Record 8
|Ts|Event|
|---|---|
|11m|"E"|
**Record evaluation at each step:**
* `s3`: **Check 1** isn't passed because the state of `s2` is empty, and **Check 2** isn't passed because it doesn't meet the `s3` condition of `Event == "Stop"`.
* `s2`: **Check 1** is passed because the state of `s1` is nonempty and the record meets the condition of `Ts - s1.Ts < 5m`. This match causes the state of `s1` to be cleared and the sequence in `s1` to be promoted to `s2`. **Record 8** and its `m_id` (`1`) are added to the state and the output.
* `s1`: **Check 1** is irrelevant because there's no previous step, and **Check 2** isn't passed because the record doesn't meet the condition of `Event == "Start"`.
**State:**
|step|m_id|s1.Ts|s1.Event|s2.Ts|s2.Event|s3.Ts|s3.Event|
|---|---|---|---|---|---|---|---|
|s1||||X|X|X|X|
|s2|1|00:08:00|"Start"|00:11:00|"E"|X|X|
|s3|0|00:01:00|"Start"|00:03:00|"D"|00:04:00|"Stop"|
#### Record 9
|Ts|Event|
|---|---|
|12m|"Stop"|
**Record evaluation at each step:**
* `s3`: **Check 1** is passed because `s2` is nonempty and it meets the `s3` condition of `Event == "Stop"`. This match causes the state of `s2` to be cleared and the sequence in `s2` to be promoted to `s3`. **Record 9** and its `m_id` (`1`) are added to the state and the output.
* `s2`: **Check 1** isn't passed because the state of `s1` is empty, and **Check 2** isn't passed because `s2` lacks an active sequence.
* `s1`: **Check 1** isn't passed because there's no previous step. it passes **Check 2** because it meets the condition of `Event == "Start"`. This match initiates a new sequence in `s1` with a new `m_id`.
**State:**
|step|m_id|s1.Ts|s1.Event|s2.Ts|s2.Event|s3.Ts|s3.Event|
|---|---|---|---|---|---|---|---|
|s1||||X|X|X|X|
|s2||||||X|X|
|s3|1|00:08:00|"Start"|00:11:00|"E"|00:12:00|"Stop"|
#### Final output
|Ts|Event|m_id|
|---|---|---|
|00:01:00|Start|0|
|00:02:00|B|0|
|00:03:00|D|0|
|00:04:00|Stop|0|
|00:08:00|Start|1|
|00:11:00|E|1|
|00:12:00|Stop|1|