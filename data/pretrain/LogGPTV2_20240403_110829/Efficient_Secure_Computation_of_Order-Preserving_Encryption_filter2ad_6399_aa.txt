title:Efficient Secure Computation of Order-Preserving Encryption
author:Anselme Tueno and
Florian Kerschbaum
Efficient Secure Computation of Order-Preserving Encryption
Anselme Tueno
SAP Security Research
Karlsruhe, Germany
Florian Kerschbaum
University of Waterloo
Waterloo, Canada
ABSTRACT
Order-preserving encryption (OPE) allows encrypting data, while
still enabling efficient range queries on the encrypted data. Moreover,
it does not require any change to the database management system,
which makes OPE schemes very suitable for data outsourcing with
threats from weak adversaries. However, all OPE schemes are neces-
sarily symmetric limiting the use case to one client and one server.
Imagine a scenario where a Data Owner (DO) outsources encrypted
data to the Cloud Service Provider (CSP) and a Data Analyst (DA)
wants to execute private range queries on this data. Then either the
DO must reveal its encryption key or the DA must reveal the private
queries. In this paper, we overcome this limitation by allowing the
equivalent of a public-key OPE. We present a secure multiparty
protocol that enables secure range queries for multiple users. In
this scheme, the DA cooperates with the DO and the CSP in order
to order-preserving encrypt the private range queries without re-
vealing any other information to the parties. The basic idea of our
scheme is to replace encryption with a secure, interactive protocol.
In this protocol, we combine OPE based on binary search trees
with homomorphic encryption and garbled circuits (GC) achieving
security against passive adversaries with sublinear communication
and computation complexity. We apply our construction to differ-
ent OPE schemes including frequency-hiding OPE and OPE based
on an efficiently searchable encrypted data structure which can
withstand many of the popularized attacks on OPE. We implemen-
ted our scheme and observed that if the database size of the DO has
1 million entries it takes only about 0.3 s on average via a loopback
interface (1.3 s via a LAN and 15.6 s via a WAN with about 200 ms
round-trip time) to encrypt an input of the DA. Moreover, while
the related work has an overhead of 10 to 100 seconds compared
to a plaintext MySQL range query on a database with 10 million
entries, our scheme has an overhead of only 360 milliseconds.
CCS CONCEPTS
• Security and privacy → Cryptography; Management and
querying of encrypted data; • Computing methodologies →
Classification and regression trees.
KEYWORDS
Order-preserving Encryption; Multiparty Computation
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
© 2020 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-6750-9/20/06...$15.00
https://doi.org/10.1145/3320269.3384739
ACM Reference Format:
Anselme Tueno and Florian Kerschbaum. 2020. Efficient Secure Compu-
tation of Order-Preserving Encryption. In Proceedings of the 15th ACM
Asia Conference on Computer and Communications Security (ASIA CCS ’20),
October 5–9, 2020, Taipei, Taiwan. ACM, New York, NY, USA, 15 pages.
https://doi.org/10.1145/3320269.3384739
1 INTRODUCTION
Outsourcing data requires techniques that allow data owners to
maintain control over their data. Different techniques, such as Se-
cure Multiparty Computation (SMC) [11, 19, 31, 33, 47], Homo-
morphic Encryption (HE) [18, 36] or order-preserving encryption
[1, 7, 8, 25, 26, 38, 39], exist that allow to process encrypted data.
The distinction between DO and DA occurs in many cases of col-
laborative data analysis, data mining and machine learning. In such
scenarios, multiple parties need to jointly conduct data analysis
tasks based on their private inputs. As concrete examples from the
literature consider, e.g., supply chain management, collaborative
forecasting, benchmarking, criminal investigation, smart metering
[4, 5, 15, 24]. Although in these scenarios plaintext information
sharing would be a viable alternative, participants are reluctant
to share their information with others. This reluctance is quite
rational and commonly observed in practice. It is due to the fact
that the implications of the information are unknown or hard to
assess. Sharing this information could weaken their negotiation pos-
ition, impact customers’ market information by revealing corporate
performance and strategies or impact reputation [4, 5, 9].
In this paper, we overcome the limitation of private range query-
ing on order-preserving encrypted data by allowing the equivalent
of a public-key encryption. Our idea is to replace public-key en-
cryption with a secure, interactive protocol. Non-interactive binary
search on the ciphertext is no longer feasible, since every encryp-
tion requires the participation of the DO who can rate limit (i.e.,
control the rate of query sent by) the DA.
Since neither the DA wants to reveal his query value nor the
DO his encryption state (key), this is clearly an instance of a SMC
where two or more parties compute on their secret inputs without
revealing anything but the result. In an ideal world the DA and DO
would perform a two-party secure computation for the encryption
of the query value and then the DA would send the encrypted value
as part of an SQL query to the CSP. However, this two-party secure
computation is necessarily linear in the encryption state (key) and
hence the size of the database. Our key insight of this paper is
that we can construct an encryption with logarithmic complexity
in the size of the database by involving the CSP in a three-party
secure computation without sacrificing any security, since the CSP
will learn the encrypted query value in any case. One may assume
that in this construction the encryption key of the DO may be
outsourced to secure hardware in the CSP simplifying the protocol
to two parties, but that would prevent the DO from rate limiting the
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
Anselme Tueno and Florian Kerschbaum
encryption and the binary search attack would be a threat again,
even if the protocol were otherwise secure.
We call our protocol oblivious order-preserving encryption (OOPE).
We implemented it and an encoding by the DA takes 0.3 seconds
using the loopback interface, 1.3 seconds using a LAN and 15.6
seconds, using a WAN with about 200 ms round-trip time.
Our contributions are as follows:
ving encryption (OOPE). It allows a DA to execute private
range queries on an order-preserving encrypted database.
● First, we introduce a novel notion of oblivious order-preser-
● Then, we propose an OOPE scheme based on the mutable
● Since the schemes [26, 38] are deterministic, we also consider
● Finally, we implement and evaluate our scheme.
the case where the underlying OPE scheme is probabilistic
such as the frequency-hiding OPE of [25] or the OPE based
on an efficiently searchable encrypted data structure [27].
OPE schemes by Popa et al., and Kerschbaum and Schröpfer.
The remainder of the paper is structured as follows. We review
related work in Section 2 and preliminaries in Section 3 before
defining correctness and security of oblivious OPE in Section 4.
Section 5 describes our scheme for the case where the underlying
OPE scheme is deterministic. In Section 6 we discuss integer com-
parison and equality test with garbled circuit and how we use it in
our schemes. The non-deterministic case is handled in Section 7.
We discuss implementations details and evaluations in Section 8
before concluding our work in Section 9.
2 RELATED WORK
OPE can be classified into stateless and stateful schemes. The
concept was introduced in the database community by Agrawal et
al. [1]. The cryptographic study of Agrawal et al. [1] was initiated
by Boldyreva et al. [7], who proposed an ideal security definition
IND-OCPA1 for OPE. The authors proved that under certain impli-
cit assumptions IND-OCPA is infeasible to achieve. Their proposed
scheme was first implemented in the CryptDB tool of Popa et al. [39]
and attacked by Naveed et al. [35]. In [8], Boldyreva et al. further
improved the security by introducing modular OPE (MOPE) which
does not provide IND-OCPA. Stateless OPE has also been improved
by [34] (attacked by [16]) and [43]. However, they necessarily also
fail at providing ideal security.
Popa et al. avoided the impossibility result of [7] by storing the
encryption state at an honest-but-curious server [38]. Their scheme
(mOPE1) is an interactive protocol between the client and the server.
It achieves IND-OCPA by allowing ciphertexts of already-encrypted
values to change over time as new plaintexts are encrypted. The
state organizes the encoded values in a binary search tree (OPE-tree),
whose nodes are non-randomized AES ciphertexts of the corres-
ponding plaintext. The path from the root to the node encrypting x
is padded with 10 . . . 0 to the same length l and represents the order
or OPE Encoding of x. The server also maintains a table (OPE-table)
containing for each encrypted x the AES ciphertext and the OPE
Encoding. To encrypt a new value, the client and the server traverse
1IND-OCPA means indistinguishability under ordered chosen plaintext attacks and
requires that OPE schemes must reveal no additional information about the plaintexts
besides their order.
the tree together and occasionally re-balance it which allows some
ciphertexts to mutate.
maintains, for each plaintext x and the corresponding OPE encoding
To reduce the insertion cost of [38] Kerschbaum and Schröp-
fer proposed to store the state at the client [26]. In their scheme
(mOPE2), the client chooses a range{0, . . . , M} for the order and
y∈{0, . . . , M}, a pair∐︀x, ỹ︀ in the state. To insert a new plaintext x
the client finds two pairs∐︀xi , yĩ︀,∐︀xi+1, yi+1̃︀ in the state such that
xi ≤ x < xi+1 and insert x between xi and xi+1. The encryption
algorithm is keyless and the only secret information is the state
which grows with the number of encryptions of distinct plaintexts.
The client uses a dictionary to keep the state small and hence does
not need to store a copy of the data.
Poddar et al. avoid the interactive tree traversal by replacing each
node v of the OPE-tree with a prepared garbled circuit (GC). Let
AES.ENC(k,⋅), AES.DEC(k,⋅) be encryption and decryption func-
tions of AES with corresponding circuits denoted by AES.ENCc(k,⋅),
AES.DECc(k,⋅). Let CMP(⋅,v) be a comparison circuit for comput-
ing(︀x≤ v⌋︀, for some input x. Let N be a tree node that encodes
a plaintext v. The GC for N encodes AES.DECc(k,⋅), CMP(⋅,v),
AES.ENCc(kl ,⋅) and AES.ENCc(kr ,⋅), where k, kl , kr are respect-
AES.ENC(k, x), decrypts, compares and returns a garbled input for
either AES.ENC(kl , x) or AES.DEC(kr , x), and a bit left or right.
To encode a new plaintext x the client sends AES.ENC(kroot , x)
ively AES keys for node N and its left and right child nodes. Our
GC encodes only two comparison circuits and is relatively small.
To traverse node N on input x, the GC takes the garbled input of
and must replace all GCs on the traversed path after the encryption.
Deterministic OPE schemes [1, 7, 26, 38, 43] are vulnerable to
many attacks like: frequency analysis, sorting and cumulative attack
[21, 35]. To increase the security of OPE, Kerschbaum first intro-
duced in [25] a new security definition called indistinguishability
under frequency-analyzing ordered chosen plaintext attack (IND-
FAOCPA) that is strictly stronger than IND-OCPA. Second he pro-
posed a novel OPE scheme (mOPE3) that is secure under this new
security definition. The basic idea of this scheme is to random-
ize ciphertexts such that no frequency information from repeated
ciphertexts leaks. It borrows the ideas of [26], but re-encrypts the
same plaintext with a different ciphertext by traversing the tree
based on the outcome of a random coin. In subsequent independ-
ent analysis [21], mOPE3 has been shown to be significantly more
secure to the attacks against OPE (albeit not perfectly secure).
Roche et al. [41] build on the frequency-hiding idea of [25] to
propose a range query scheme that is tailored for scenarios of a large
number of insertions and a moderate number of range queries. Their
main technique is a lazy indexing using a novel B-tree structure
whose nodes consist of an unsorted buffer and a sorted list. In
contrast to previous scheme, the data is not sorted when inserting,
but just put in the unsorted buffer of the root. For range query server
and client run an interactive protocol. As a result, the scheme is
very efficient at insertion with non-persistent client storage and
lower communication cost. The scheme is, however, less efficient
when querying data and provides only a partial ordering.
In a subsequent work, Kerschbaum and Tueno [27] first intro-
duces a new security definition for encrypted data structure - called
IND-CPA-DS - that is stronger than IND-CPA (and hence stronger
than IND-FAOCPA). IND-CPA-DS is a provable security model
Efficient Secure Computation of Order-Preserving Encryption
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
that encompasses plaintext guessing attacks on OPE where the
attacker is able to break into a cloud system and steal the stored
data. IND-CPA-DS ensures that such an attack and even frequency
analysis, sorting and cumulative attacks by Naveed et al. [35] and
Grubbs et al. [21] will reveal no additional information to the ad-
versary. In [2], Amjad et al. address a similar security model for
searchable encryption. Kerschbaum and Tueno [27] then propose
an OPE scheme based on efficiently searchable encrypted data
structure (ESEDS-OPE) satisfying IND-CPA-DS-security. The con-
struction of ESEDS-OPE combines the benefits of three previous
order-preserving encryption schemes: mOPE1 [38], mOPE3 [25]
and MOPE [8]. First, ESEDS-OPE reuses the idea of managing the or-
der of ciphertexts in a stateful and interactive manner as in mOPE1
[38]. Second, it assigns a distinct ciphertext for each - even repeated
- plaintext as mOPE3 [25] does. But since mOPE3 partially leaks
the insertion order, ESEDS-OPE encrypts each plaintext - even re-
peated ones - using a probabilistic encryption algorithm before
inserting the resulting ciphertext using Kerschbaum’s random tree
traversal. Third, ESEDS-OPE applies the idea of rotating around
a modulus, however not on the plaintexts as in MOPE [8], but on
the ciphertexts. This is done by updating the modulus after each
encryption. Concretely, ESEDS-OPE maintains a list of ciphertexts
for each plaintext on the server. This list is sorted by the plain-
texts and rotated (on the ciphertexts) around a random modulus.
For encryption and search, the client (which owns the decryption
key) and the server run an interactive protocol to perform a binary
search on the encrypted data structure.
There exist other primitives such as symmetric searchable en-
cryption (SSE) [12, 22] and order-revealing encryption [10, 30] that
allow to search on encrypted data. They have higher security than
OPE, but they are less efficient and require change to existing applic-
ations. SSE basically consists of four algorithms. The probabilistic
key generation algorithm takes a security parameter and outputs
a master secret key. The probabilistic encryption algorithm takes
the master secret key and a plaintext and outputs a ciphertext. The
deterministic token generation algorithm takes the master secret
key and a keyword and outputs a search token. The deterministic
match algorithm takes a ciphertext and a search token and out-
puts 1 if the associated keyword to the search token matches the
associated plaintext to the given ciphertext. SSE can be used for
example by a data owner to outsource encrypted documents to the
cloud. Later, the data owner might want to search for documents
containing a specific keyword. Based on the keyword, it generates
and sends a search token to the cloud server which can use the
match algorithm to return all encrypted documents matching the
keyword [12]. As OPE, order-revealing encryption (ORE) allows
to efficiently perform range queries, sorting and filtering on en-
crypted data. An order-revealing encryption basically consists of
three algorithms. The probabilistic key generation algorithm takes
a security parameter and outputs a secret key. The probabilistic
encryption algorithm takes the secret key and a plaintext and out-
puts a ciphertext. The deterministic compare algorithm takes two
ciphertexts and outputs a bit whose value reveals the order between
the associated plaintexts [10, 30].
Ishai et al. [23] address a similar 3-party functionality and solve
it by proposing an SSE-like scheme. As us they split the solution in
two phases. In the first phase, the three parties jointly and privately
Figure 1: Illustration of the Problem: DO sends encrypted data to
CSP and retains encryption keys. DA holds a private decision tree that can
be represented as set of range queries. DA wants to perform data analysis
on DO’s encrypted data without revealing any information on the queries.
DO wants to maintain privacy of the data stored at CSP.
traverse a search tree to reveal to the DA pointers to the data that
match the query. In the second phase, the DA interacts with the
CSP to get the matching data. While traversing the search tree, the
parties combine SMC with 2-server private information retrieval
(PIR) to compute and select the next node in the tree, hiding DA’s
access pattern to both DO and CSP. The SMC is implemented with a
small garbled circuit whose size is similar to ours. Recall that in a 2-
server PIR, both servers (CSP and DO) have shares of the complete
database. In the query phase, the DA selects each matching data
individually using PIR. This, however, hides the access pattern up
to δ queries, where δ is a parameter defined by the DO and is used
to add dummy entries to the database such that the CSP cannot
decide if the DA is accessing a real data. After δ queries, the scheme
must either reinitialize the PIR state (which is linear in the size of
the database) or continue with access pattern leakage. The authors
recommend the later option because keeping hiding the access is
very expensive. Inserting new data requires a re-initialization of
the PIR state as well.
In Table 1, we summarized the comparison between range query
protocols, i.e., protocols that build on basic cryptographic building
blocks (such as OPE, PIR, SMC) to solve privacy preserving range