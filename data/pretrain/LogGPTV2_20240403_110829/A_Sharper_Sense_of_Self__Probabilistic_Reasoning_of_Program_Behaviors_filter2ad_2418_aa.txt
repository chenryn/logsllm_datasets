title:A Sharper Sense of Self: Probabilistic Reasoning of Program Behaviors
for Anomaly Detection with Context Sensitivity
author:Kui Xu and
Ke Tian and
Danfeng Yao and
Barbara G. Ryder
2016 46th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
A Sharper Sense of Self: Probabilistic Reasoning of
Program Behaviors for Anomaly Detection with
Context Sensitivity
Kui Xu, Ke Tian, Danfeng (Daphne) Yao and Barbara G. Ryder
Department of Computer Science
Virginia Tech
Email: {xmenxk, ketian, danfeng, ryder}@cs.vt.edu
Blacksburg, VA, USA
Abstract—Program anomaly detection models legitimate be-
haviors of complex software and detects deviations during execu-
tion. Behavior deviations may be caused by malicious exploits, de-
sign ﬂaws, or operational errors. Probabilistic detection computes
the likelihood of occurrences of observed call sequences. However,
maintaining context sensitivity in detection incurs high modeling
complexity and runtime overhead. We present a new anomaly-
based detection technique that is both probabilistic and 1-level
calling-context sensitive. We describe a matrix representation
and clustering-based solution for model reduction, speciﬁcally
reducing the number of hidden states in a special hidden Markov
model whose parameters are initialized with program analysis.
Our extensive experimental evaluation conﬁrms the signiﬁcantly
improved detection accuracy and shows that attacker’s ability to
conduct code-reuse exploits is substantially limited.
I. INTRODUCTION
The increasing stealth in modern exploits demands more
accurate and precise program behavior modeling to identify
malicious program behaviors. For example, code-reuse attacks
use existing libraries and instruction sequences from inside the
victim program’s memory to conduct malicious activities. This
technique allows attackers to bypass stack-based protection
and make arbitrary library and system calls.
Attackers use operating-system provided calls to construct
exploits. Therefore, modeling the call sequences of a program
for anomalous patterns can potentially detect exploits. This
approach is referred to as program anomaly detection in the
literature [1]. Program anomaly detection typically has two
phases of operation, i) constructing a model to capture the
legitimate behaviors of a program and ii) classifying observed
behaviors into benign or anomaly categories. Behavior devi-
ations may be caused by malicious exploits, design ﬂaws, or
operational errors.
Probabilistic program anomaly detection can compute the
likelihood of occurrences of observed call sequences. Several
such solutions exist based on hidden Markov model (HMM)
(e.g., [2, 3]). The detection provides quantitative measurement
for every observed call sequence. Most recently, researchers
demonstrated the use of static program analysis in combination
with HMM model to boost the detection accuracy [4]. In
these HMM models, the hidden states implicitly or explicitly
represent the state (or stage) of the execution; the observation
symbols correlate to the program events such as system calls
made. Hidden Markov models need to be trained with normal
program traces. The trained models can then be used to
recognize anomalies in new unknown segments.
Existing probabilistic solutions for program anomaly de-
tection are context-insensitive [4]. They do not distinguish
the context of an event. Context sensitivity is the ability to
recognize different calling context associated with a called
function, when monitoring program traces. Context informa-
tion increases the precision of program behavior modeling.
Various context information can be learned from runtime
execution. For example, Sekar et al. recorded program coun-
ters to distinguish same system calls [5]. They used pro-
gram counters to represent the state of the execution, while
constructing large ﬁnite state automata to recognize normal
program behaviors. FSA-based program anomaly detection
does not support probabilistic reasoning. VtPath model also
includes call stack information as context [6].
i.e.,
However, directly applying ﬁne-grained context-sensitive
approaches to Markov-based probabilistic models may result
in state explosion in the worst case,
the substantial
increase of model size to recognize calls with all possible
different contexts in a program. Having a large number of
states substantially slows down the model convergence and
classiﬁcation, reducing the timeliness of the detection. In
addition, as shown by researchers [4], behavioral models that
are constructed solely by learning from traces are inadequate,
because they may have high false positive rates due to incom-
plete traces.
We aim to design a program anomaly detection technique
that achieves the following goals:
• To probabilistically reason the likelihood of occurrence
of call sequences,
of each call,
served control ﬂows.
• To record and be able to distinguish the calling context
• To cover both statically feasible and dynamically ob-
Our model detects anomalies by classifying the call se-
quences during program executions, and the classiﬁcation is
978-1-4673-8891-7/16 $31.00 © 2016 IEEE
DOI 10.1109/DSN.2016.49
467
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:20:29 UTC from IEEE Xplore.  Restrictions apply. 
based on the probabilistic control-ﬂow representation of a
program. We propose a new approach for constructing such a
behavior model which incorporates both statically and dynam-
ically analyzed information from programs and the execution
traces. We also collect and maintain context information for
each call observation.
Our analysis tool statically extracts control-ﬂow graph and
call graph information from a program, which is transformed
into a rigorous context-sensitive and probabilistic represen-
tation by our algorithms. With the initialization of the ob-
tained static information, our customized classiﬁcation model
(namely the hidden Markov model) demonstrates much im-
proved model accuracy.
Compared to many existing approaches, our method does
not require any binary instrumentation. Our technical contri-
butions are highlighted as follows.
1) We present a program anomaly-based detection technique
that enables probabilistic reasoning on the likelihood
of occurrences of call sequences. Compared to related
solutions, our system supports 1-level calling-context
sensitivity. In our work, 1-level calling-context sensitivity
refers to the ability to distinguish the names of the imme-
diate caller functions that invoke system or library calls.
Distinguishing calling context of a function generates a
more expressive behavioral model and improves detection
accuracy. We utilize a compact matrix representation for
recording and estimating probabilities of context-sensitive
call transitions in a program. Values in the call-transition
matrix are used to statically enhance the classiﬁer, namely
hidden Markov model (HMM), speciﬁcally on the initial-
ization of hidden state and probability parameters.
2) We demonstrate the effectiveness of K-means clustering
in reducing the size of hidden Markov model and conse-
quently the training time, while maintaining high detec-
tion accuracy. This improvement is particularly important
for behavioral models with library calls, because of the
diverse context associated with library call invocations.
The similarity metric used for clustering is computed
between two vectors in the call-transition matrix. With
hidden states reduced to 1
3 of the original numbers
through clustering, the convergence of HMM models is
shortened substantially. We observe 75% to 89% reduc-
tion in the training time.
2 to 1
3) Our extensive experimental evaluation involves a large
number of program traces (> 4,000 test cases) and real-
world exploits from utility programs and server programs
proftpd and nginx. Our experimental results show
close to three orders of magnitude accuracy improvement
for library calls, and 10-time improvement for system
calls on average over context-insensitive counterparts. We
also show the low number of ROP gadgets in a program
under context-sensitive detection, far from being Turing
complete [7]. This limited expressiveness increases the
difﬁculty of successful ROP attacks.
We refer to our prototype as CMarkov, short for Context-
468
sensitive Markov. Based on the experimental ﬁndings, we
attribute the improved accuracy of our CMarkov models to
the effectiveness of our program-analysis-guided behavior
i) an informed set of initial HMM probability
modeling:
values (transition and emission probabilities and probability
distribution of hidden states), and a more optimized number
ii) a stronger enforcement on legitimate
of hidden states.
system and library calls with context sensitivity in the program
behavior model.
We demonstrate the combination of both static and dynamic
program information, and also the integration of context sen-
sitivity into one program behavior model. This new modeling
technique achieves high anomaly detection accuracy, advanc-
ing the state-of-the-art in program-behavior-modeling based
anomaly detection and providing more effective tools for cyber
defenders in battling against modern stealthy exploits.
II. TECHNICAL CHALLENGES AND SOLUTION OVERVIEW
A. Attack Model
Our approach monitors and enforces a program’s behaviors
embodied as system and library call sequences. We aim at
detecting attacks that violate a program’s normal control-
ﬂow executions. Such violations are common among both
i) conventional code-injection shellcode following a memory
corruption or Trojan horse, as well as ii) more subtle code-
reuse attacks (such as ROP, Return_to_libc). In general,
any uncommon execution of a program with altered control-
ﬂow can be potentially detected by our model.
The detection limitation may include advanced mimicry
attacks or attack sequences that are extremely short. A hand-
crafted mimicry attack was ﬁrst introduced in [8], where the
system calls are made in an order that is compatible with
the detection model, but can also perform malicious actions.
Although our model is not speciﬁcally designed to detect
general mimicry attacks (which is an open problem), it can
catch mimicries that involve the invocation of legitimate-yet-
rare calls or paths having low likelihoods of occurrences.
The quantitative measurement together with context-sensitivity
makes it difﬁcult for an attacker to develop an effective
mimicry attack call sequence.
B. Connecting Markov Model with Control Flow
A hidden Markov model (HMM) probabilistically represents
a Markov process consisting of unobserved interconnected
hidden states, which emit observable symbols [9] (syscall or
libcall in our case).
Deﬁnition 1: The control-ﬂow graph (CFG) of a function
is a directed graph, where nodes represent code blocks of
consecutive instructions identiﬁed by static program analysis,
and directed edges between the nodes represent execution
control ﬂow, such as conditional branches, and calls and
returns. Calls may be system calls, library calls or user-deﬁned
function calls.
The hidden Markov model in our work substantially differs
from regular HMM. Regular HMMs arbitrarily choose the hid-
den states and randomly initialize the probabilities. In contrast,
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:20:29 UTC from IEEE Xplore.  Restrictions apply. 
	






	






 


 






 
	 
 



 

 










	













 













! 
 
"
! 
 
"
!

"

Fig. 1. Examples of control-ﬂow graph for function f () in (a), call-transition
matrix in (b), transition probabilities in (c), and call-transition vectors in (d).
our HMM model is initialized with call transition information
extracted from static control-ﬂow analysis. This specialized
initialization is achieved with a technique originally proposed
in STILO model by Xu et al.
in [4]. STILO stands for
STatically InitiaLized markOv. The STILO approach requires
the static control-ﬂow analysis and probability estimation of
call transitions (described in CONTEXT IDENTIFICATION and
PROBABILITY FORECAST operations in Section III).
The signiﬁcance of STILO approach is its one-to-one map-
ping between calls made by a program and hidden states
in HMM. Its advantage is a more complete coverage of
both dynamic and static program behaviors in the classiﬁer.
However, their solution is context insensitive.
C. Context Sensitivity
Context-insensitive program anomaly detection models only
record names of calls, e.g., . Such context-
insensitive models rely on ﬂow sensitivity to capture the order
and frequency of normal call sequences, and detect anomalies
by identifying and classifying call sequence patterns.
system call
as
the
An improvement
is to record the caller
function of
environ-
each library or
ment. An observed call
invocation can be represented as
call_name@caller_function. Figure 1 gives such a 1-
level calling context-sensitive control-ﬂow graph. We demon-
strate the effectiveness and feasibility of such context infor-
mation in probabilistic program anomaly detection.
context
In the following example, S1 gives a normal call sequence
with the right context information, which is their caller func-
tion g and f. Suppose the corresponding program has a
vulnerability and fails to check the boundary before the read
call in function f, which would lead to a buffer overﬂow.
An exploitation uses this security ﬂaw and is able to launch
a code-reuse attack which intentionally makes the same call
sequence to avoid detection, but performs malicious activities.
is ﬂow-sensitive only, both
normal call sequence and abnormal call sequence are observed
For a detection model
that
the same as read→ read→ write→ execve, thus the
anomaly is not detected. Since code-reuse attack makes use
of the existing code inside the entire process memory,
it
is common that an attacker uses calls that are made from
different places within different caller functions. Although still
conforming to normal call sequence order, the incorrect caller
information as in S2 can be easily identiﬁed by a context-
sensitive model.
S1: normal call sequence:
... → read@g → read@f → write@f → execve@g → ...
S2: abnormal call sequence (code-reuse attack):
... → read@g → read@f → write@foo → execve@bar → ...
With calling context, one can distinguish normal call
sequence (top) from attack sequence (bottom).
Our solution records the caller context to library and system
calls, as they are the operations an attacker is more likely
to make use of in order to conduct malicious activities.
Recording context information to other internal functions of
a program potentially leads to a more precise representation
of the program. However, such a model would incur heavy
overhead during both analysis and runtime monitoring. We
choose to focus on characterizing library and system calls,
not internal functions.
D. Complexity Challenge and State Reduction
Distinguishing calling context substantially increases the
size of the behavior model, speciﬁcally the number of hidden
states in our statically initialized hidden Markov model. To
make the models converge in reasonable timeframes (e.g., a
day), we perform clustering on the aggregated call-transition
matrix (in Def. 5) of a program to identify similar call-
transition vectors (i.e., columns or rows in the matrix). The
similarity is measured in two aspects: i) the sets of incoming
and outgoing calls, ii) the distribution of probabilities from
the incoming and to the outgoing calls. Through clustering,
we merge similar call transitions in control-ﬂow graphs and
call graphs together, drastically reducing the size of the
corresponding hidden Markov model, and thus training time.
Details are described in Section III.
III. CLUSTERING-BASED STATE REDUCTION
A. Our Workﬂow
Major operations in our workﬂow are described below.
1) CONTEXT IDENTIFICATION: We parse the control-ﬂow
graphs of all functions and ﬁnd the system and library
calls. Each identiﬁed system or library call is assigned
additional context information to associate with its call
name. This context information is maintained throughout
our analysis to distinguish different calls to a function.
2) PROBABILITY FORECAST: Probability information is ex-
tracted from control-ﬂow graphs to statically estimate the
likelihoods of occurrence for call sequences. We use the
control-ﬂow graph of a function to compute a matrix that
469
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:20:29 UTC from IEEE Xplore.  Restrictions apply. 
represents the likelihoods of occurrence for sequences of
calls. We inline these matrices according to the call graph
to obtain a (larger) matrix for the entire program.
3) STATE REDUCTION AND INITIALIZATION: The call-
transition matrix of the program is used to initialize the
parameters of the hidden Markov model. The parameters
include the number of hidden states N, the collection
of observation symbols and its number M, emission
probability distribution matrix B representing likelihoods
of emitting observation symbols by hidden states, tran-
sition probability A among hidden states, and the initial
probability distribution π for hidden states.
State reduction is for models whose numbers of hidden
states are large (e.g., > 800). (Without reduction, N is
the total number of distinct calls in the program code.)
We use K-mean clustering to identify and merge similar
calls based on their call-transition vectors (in Def. 6),
before they are used to initialize the hidden states in the
HMM model. In our prototype, we choose K such that
the number of new hidden states is 1
2 of the original.
4) TRAIN AND CLASSIFY: We further train the model with
normal program traces to adjust the parameters of the
HMM classiﬁer, so that it recognizes dynamic program
behaviors. For classiﬁcation, given a segment of program
traces (in system call or library call), the model computes
the probability of the call segment.
3 to 1
Our model is both ﬂow-sensitive and 1-level calling-context
sensitive. The Markov model captures the order of execution of
statements in the program. Context information distinguishes
system or library calls to the same function name but from
different calling contexts (e.g., different call statements).
B. Probability Deﬁnitions
We give several types of probabilities used in our static
analysis operations. The deﬁnitions include the conditional
probability of adjacent CFG nodes, the reachability proba-
bility from the function entry, and transition probability for
a call pair. They are used to quantify a program’s statically
inferred control-ﬂow properties, in order to be compatible
with parameters of the probabilistic learning model. These
deﬁnitions follow the STILO model in [4]. We also deﬁne
the call-transition matrix of a function in Deﬁnition 5.
ij of adjacent
CFG nodes for a node pair (ni, nj) or (ni → nj) is the
probability of occurrence for node nj, conditioning on its
immediate preceding node ni has just been executed, i.e.,
P [nj|ni].
Deﬁnition 2: The conditional probability P c
Deﬁnition 3: The reachability probability P r
i
for a CFG
node ni is the likelihood of the function’s control ﬂow reaches
node ni, i.e., the likelihood of ni being executed within this
function.
Deﬁnition 4: The transition probability P
tf
ij of call pair
(ci, cj) in function f () is deﬁned as the likelihood of occur-
rence of the call pair during the execution of the function.
Each call c in the function is deﬁned and represented as
call_name@f in the context-sensitive model.
Deﬁnition 5: Call-transition matrix of a function f () stores
pair-wise call-transition probabilities of the function. The rows
and columns of the matrix correspond to calls that appear
in the control-ﬂow graph of the function, respectively. A cell
(i, j) stores the likelihood of occurrence for call pair (ci →
cj), i.e., transition probability P t
ij.
Examples of call-transition matrix and transition probability
for a context-sensitive CFG are given in Figure 1 (b) and (c),
respectively. These deﬁned probabilities are used as follows.
Our method ﬁrst
traverses the control-ﬂow graph of each
function to statically approximate the conditional probability
ij for each pair of adjacent nodes (n1 → n2). Then, based on
P c
conditional probabilities, we compute the reachability proba-
bility P r
for each node ni, which represents the likelihood
i
of ni being executed in the function. Finally, with these
reachability probabilities, we compute transition probabilities
for call pairs within each function. The transition probabilities
are further used to construct a call-transition matrix for each
corresponding function.
C. Reduction of Hidden States for Efﬁciency
A straightforward HMM initialization is to have a one-to-
one correlation between system or library calls and hidden