[23].
Observe that an obfuscation rand is safe with re-
spect to rlti if dist(rlti, ID(r0)) > rand, the proba-
bility that a obfuscation rand is safe can be calculated
using e−rand∗N .
Now, one can ensure that the minimum probability
of any obfuscation being safe is prsq as follows. We
ﬁrst use prsq to obtain an upper bound on rand: By
e−rand∗N ≥ prsq, we have, rand ≤ −loge(prsq)
. Hence,
if rand is chosen from a safe range (0, srg), where srg
= −loge(prsq)
, then all obfuscations are guaranteed to be
safe with a probability greater than or equal to prsq.
N
N
N
For instance, when we set prsq = 1−2−20 and N =
1 million nodes, srg = − loge(prsq)
= 2−40. Hence, on
a 128-bit Chord ring rand could be chosen from a range
of size srg = 2128 ∗ 2−40 = 288. Table 1 shows the
size of a prsq−safe obfuscation range srg for different
values of prsq. Observe that if we set prsq = 1, then srg
= − loge(prsq)
= 0. Hence, if we want 100% safety, the
obfuscation range srg must be zero, i.e., the token rlti
cannot be obfuscated.
N
Theorem 6.1 Let N denote the total number of nodes in
the system. Let dist(x, y) denote the distance between
two identiﬁers x and y on a Chord’s unit circle. Let
node r0 be the node that is the immediate predecessor for
an identiﬁer rlti on the anti-clockwise unit circle Chord
ring. Let ID(r0) denote the identiﬁer of the node r0.
88
14th USENIX Security Symposium
USENIX Association
otk
2
r’
otk
1
r
rlt
1 − prsq
srg
E[retries]
hardness (years)
−10
2
298
−10
2
238
−15
2
293
−15
2
233
−20
2
288
−20
2
228
−25
2
283
−25
2
223
−30
2
278
−30
2
218
Table 1: Lookup Identiﬁer obfuscation
Figure 3: Lookup Using File Identiﬁer
Obfuscation: Illustration
Then, the probability that the distance between identi-
ﬁers rlti and ID(r0) exceeds rg is given by Pr(dist(rlti,
ID(r0)) > x) = e−x∗N for some 0 ≤ x  0. We
ﬁrst discuss the motivation for detecting and repairing
unsafe obfuscations and then describe how to guarantee
good safety by our routing guard through a self-detection
and self-healing process.
We ﬁrst motivate the need for ensuring safe obfusca-
tions. Let node r be the result of a lookup on identiﬁer
rlti and node v (v 6= r) be the result of a lookup on
an unsafe obfuscated identiﬁer otki. To perform a ﬁle
read/write operation after locating the node that stores
the ﬁle f, the user has to present the location token rlti
to node v. If a user does not check for unsafe obfusca-
tion, then the ﬁle token rlti would be exposed to some
other node v 6= r. If node v were malicious, then it could
misuse the capability rlti to corrupt the ﬁle replica actu-
ally stored at node r.
We require a user to verify whether an obfuscated
identiﬁer is safe or not using the following check: An
obfuscated identiﬁer otki is considered safe if and only
if rlti ∈ (otki, ID(v)), where v = Γ(otki). By the deﬁ-
nition of v and otki, we have otki ≤ ID(v) and otki ≤
rlti (rand ≥ 0). By otki ≤ rlti ≤ ID(v), node v
should be the immediate successor of the identiﬁer rlti
and thus be responsible for it. If the check failed, i.e.,
rlti > ID(v), then node v is deﬁnitely not a succes-
sor of the identiﬁer rlti. Hence, the user can ﬂag otki
as an unsafe obfuscation of rlti. For example, refer-
ring Figure 3, otki
1, ID(r))
1
is safe because, rlti ∈ (otki
1), and otki
2
and r = Γ(otki
(otki
is unsafe because, rlti /∈
2, ID(r0)) and r0 = Γ(otki
2).
When an obfuscated identiﬁer is ﬂagged as unsafe,
the user needs to retry the lookup operation with a new
obfuscated identiﬁer. This retry process continues until
max retries rounds or until a safe obfuscation is found.
Since the probability of an unsafe obfuscation is extremely
small over multiple random choices of obfuscated tokens
(otki), the call for retry rarely happens. We also found
from our experiments that the number of retries required
is almost always zero and seldom exceeds one. We be-
lieve that using max retries equal to two would sufﬁce
even in a highly conservative setting. Table 1 shows the
expected number of retries required for a lookup opera-
tion for different values of prsq.
6.4 Strength of Routing guard
The strength of a routing guard refers to its ability to
counter lookup snifﬁng based attacks. A typical lookup
snifﬁng attack is called the range sieving attack.
In-
formally, in a range sieving attack, an adversary sniffs
lookup queries on the overlay network, and attempts to
deduce the actual identiﬁer rlti from its multiple obfus-
cated identiﬁers. We show that an adversary would have
to expend 228 years to discover a replica location token
rlti even if it has observed 225 obfuscated identiﬁers of
rlti. Note that 225 obfuscated identiﬁers would be avail-
able to an adversary if the ﬁle replica f i was accessed
once a second for one full year by some legal user of the
ﬁle f.
One can show that given multiple obfuscated identi-
ﬁers it is non-trivial for an adversary to categorize them
into groups such that all obfuscated identiﬁers in a group
are actually obfuscations of one identiﬁer. To simplify
USENIX Association
14th USENIX Security Symposium
89
the description of a range sieving attack, we consider
the worst case scenario where an adversary is capable of
categorizing obfuscated identiﬁers (say, based on their
numerical proximity).
We ﬁrst concretely describe the range sieving attack
assuming that prsq and srg (from Theorem 6.1) are pub-
lic knowledge. When an adversary obtains an obfus-
cated identiﬁer otki, the adversary knows that the ac-
tual capability rlti is deﬁnitely within the range RG =
(otki, otki + srg), where (0, srg) denotes a prsq−safe
range.
In fact, if obfuscations are uniformly and ran-
domly chosen from (0, srg), then given an obfuscated
identiﬁer otki, the adversary knows nothing more than
the fact that the actual identiﬁer rlti could be uniformly
and distributed over the range RG = (otki, otki + srg).
However, if a persistent adversary obtains multiple ob-
nid} that belong
fuscated identiﬁers {otki
to the same target ﬁle, the adversary can sieve the iden-
tiﬁer space as follows. Let RG1, RG2,··· , RGnid de-
note the ranges corresponding to nid random obfusca-
tions on the identiﬁer rlti. Then the capability of the
target ﬁle is guaranteed to lie in the sieved range RGs =
∩nid
j=1RGj. Intuitively, if the number of obfuscated iden-
tiﬁers (nid) increases, the size of the sieved range RGs
decreases. For all tokens tk ∈ RGs, the likelihood that
nid} are
the obfuscated identiﬁers {otki
obfuscations of the identiﬁer tk is equal. Hence, the ad-
versary is left with no smart strategy for searching the
sieved range RGs other than performing a brute force
attack on some random enumeration of identiﬁers tk ∈
RGs.
, ··· , otki
, ··· , otki
, otki
2
1
, otki
2
1
nid
Let E[RGs] denote the expected size of the sieved
. Hence,
range. Theorem 6.2 shows that E[RGs] = srg
if the safe range srg is signiﬁcantly larger than nid then
the routing guard can tolerate the range sieving attack.
Recall the example in Section 6 where prsq = 1− 2−20,
N = 106, the safe range srg = 288. Suppose that a
target ﬁle is accessed once per second for one year; this
results in 225 ﬁle accesses. An adversary who logs all
obfuscated identiﬁers over a year could sieve the range
to about E[|RGs|] = 263. Assuming that the adver-
sary performs a brute force attack on the sieved range,
by attempting a ﬁle read operation at the rate of one read
per millisecond, the adversary would have tried 235 read
operations per year. Thus, it would take the adversary
about 263/235 = 228 years to discover the actual ﬁle
identiﬁer. For a detailed proof of Theorem 6.2 refer to
our tech-report [23].
Table 1 summarizes the hardness of breaking the ob-
fuscation scheme for different values of prsq (minimum
probability of safe obfuscation), assuming that the ad-
versary has logged 225 ﬁle accesses (one access per sec-
ond for one year) and that the nodes permit at most one
ﬁle access per millisecond.
Discussion. An interesting observation follows from the
above discussion: the amount of time taken to break the
ﬁle identiﬁer obfuscation technique is almost indepen-
dent of the number of attackers. This is a desirable prop-
erty. It implies that as the number of attackers increases
in the system, the hardness of breaking the ﬁle capabili-
ties will not decrease. The reason for location key based
systems to have this property is because the time taken
for a brute force attack on a ﬁle identiﬁer is fundamen-
tally limited by the rate at which a hosting node permits
accesses on ﬁles stored locally. On the contrary, a brute
force attack on a cryptographic key is inherently paral-
lelizable and thus becomes more powerful as the number
of attackers increases.
Theorem 6.2 Let nid denote the number of obfuscated
identiﬁers that correspond to a target ﬁle. Let RGs de-
note the sieved range using the range sieving attack.
Let srg denote the maximum amount of obfuscation that
could be prsq−safely added to a ﬁle identiﬁer. Then,
the expected size of range RGs can be calculated by
E[|RGs|] = srg
.
nid
7 Location Inference Guards
Inference attacks over location keys refer to those at-
tacks wherein an adversary attempts to infer the location
of a ﬁle using indirect techniques. We broadly classify
inference attacks on location keys into two categories:
passive inference attacks and host compromise based in-
ference attacks. It is important to note that none of the
inference attacks described below would be effective in
the absence of collusion among malicious nodes.
7.1 Passive inference attacks
Passive inference attacks refer to those attacks wherein
an adversary attempts to infer the location of a target ﬁle
by passively observing the overlay network. We studied
two passive inference attacks on location keys.
90
14th USENIX Security Symposium
USENIX Association
The lookup frequency inference attack is based on
the ability of malicious nodes to observe the frequency
of lookup queries on the overlay network. Assuming
that the adversary knows the relative ﬁle popularity, it
can use the target ﬁle’s lookup frequency to infer its lo-
cation. It has been observed that the general popularity
of the web pages accessed over the Internet follows a
Zipf-like distribution [27]. An adversary may study the
frequency of ﬁle accesses by snifﬁng lookup queries and
match the observed ﬁle access frequency proﬁle with a
actual (pre-determined) frequency proﬁle to infer the lo-
cation of a target ﬁle. This is analogous to performing a
frequency analysis attack on old symmetric key ciphers
like the Caesar’s cipher [26].
The end-user IP-address inference attack is based on
assumption that the identity of the end-user can be in-
ferred from its IP-address by an overlay network node r,
when the user requests node r to perform a lookup on its
behalf. A malicious node r could log and report this in-
formation to the adversary. Recall that we have assumed
that an adversary could be aware of the owner and the
legal users of a target ﬁle. Assuming that a user accesses
only a small subset of the total number of ﬁles on the
overlay network (including the target ﬁle) the adversary
can narrow down the set of nodes on the overlay net-
work that may potentially hold the target ﬁle. Note that
this is a worst-case-assumption; in most cases it may not
possible to associate a user with one or a small number
IP-addresses (say, when the user obtains IP-address dy-
namically (DHCP [2]) from a large ISP (Internet Service
Provider)).
7.2 Host compromise based inference at-
tacks
Host compromise based inference attacks require the ad-
versary to perform an active host compromise attack be-
fore it can infer the location of a target ﬁle. We studied
two host compromise based inference attacks on loca-
tion keys.
The ﬁle replica inference attack attempts to infer the
identity of a ﬁle from its contents; note that an adversary
can reach the contents of a ﬁle only after it compromises
the ﬁle holder (unless the ﬁle holder is malicious). The
ﬁle f could be encrypted to rule out the possibility of
identifying a ﬁle from its contents. Even when the repli-
cas are encrypted, an adversary can exploit the fact that
all the replicas of ﬁle f are identical. When an adversary
compromises a good node, it can extract a list of identi-
ﬁer and ﬁle content pairs (or a hash of the ﬁle contents)
stored at that node. Note that an adversary could per-
form a frequency inference attack on the replicas stored
at malicious nodes and infer their ﬁlenames. Hence, if
an adversary were to obtain the encrypted contents of
one of the replicas of a target ﬁle f, it could examine
the extracted list of identiﬁers and ﬁle contents to obtain
the identities of other replicas. Once, the adversary has
the locations of cr copies of a ﬁle f, the f could be at-
tacked easily. This attack is especially more plausible on
read-only ﬁles since their contents do not change over a
long period of time. On the other hand, the update fre-
quency on read-write ﬁles might guard them ﬁle replica
inference attack.
File size inference attack is based on the assump-
tion that an adversary might be aware of the target ﬁle’s
size. Malicious nodes (and compromised nodes) report
the size of the ﬁles stored at them to an adversary. If
the size of ﬁles stored on the overlay network follows
a skewed distribution, the adversary would be able to
identify the target ﬁle (much like the lookup frequency
inference attack).
For a detailed discussion on inference attacks and
techniques to curb them please refer to our technical re-
port [23]. Identifying other potential inference attacks
and developing defenses against them is a part of our
ongoing work.
7.3 Location Rekeying
In addition to the inference attacks listed above, there
could be other possible inference attacks on a LocationGuard