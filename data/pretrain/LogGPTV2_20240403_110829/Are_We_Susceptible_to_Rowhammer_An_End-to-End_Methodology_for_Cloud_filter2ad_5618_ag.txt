[29] H. Gomez, A. Amaya, and E. Roa, “DRAM Row-hammer Attack
Reduction using Dummy Cells,” in NORCAS, 2016.
[30] S.-L. Gong, “Memory Protection Techniques for DRAM Scaling-
induced Errors,” Ph.D. dissertation, University of Texas at Austin, 2018.
[31] D. Goodin, “Once thought safe, DDR4 memory shown to be
https://arstechnica.com/information-
vulnerable
technology/2016/03/once-thought-safe-ddr4-memory-shown-to-be-
vulnerable-to-rowhammer/, 2016.
to Rowhammer,”
[32] Google Project Zero, “Exploiting the DRAM rowhammer bug to
gain kernel privileges,” https://googleprojectzero.blogspot.com/2015/
03/exploiting-dram-rowhammer-bug-to-gain.html, 2015.
is,
your
“Row Hammering: What
use
access
hackers
https://blogs.synopsys.com/committedtomemory/2015/03/09/row-
hammering-what-it-is-and-how-hackers-could-use-it-to-gain-access-
to-your-system/, 2015.
[33] M. Greenberg,
could
how
system,”
[34] Z. Greenﬁeld, K. S. Bains, S. Theodore, C. Mozak, and J. B. Halbert,
it
to
gain
and
“Row Hammer Condition Monitoring,” US Patent 8,938,573, 2015.
[35] D. Gruss, “Rowhammer Attacks: An Extended Walkthrough Guide,”
to
it
https://gruss.cc/ﬁles/sba.pdf, 2017.
[36] D. Gruss, M. Lipp, M. Schwarz, D. Genkin, J. Jufﬁnger, S. O’Connell,
W. Schoechl, and Y. Yarom, “Another Flip in the Wall of Rowhammer
Defenses,” in IEEE S&P, 2018.
[37] D. Gruss, C. Maurice, and S. Mangard, “Rowhammer.js: A Remote
Software-Induced Fault Attack in JavaScript,” in DIMVA, 2016.
[38] H. Hassan et al., “SoftMC: A Flexible and Practical Open-Source
Infrastructure for Enabling Experimental DRAM Studies,” in HPCA,
2017.
[39] Hewlett-Packard Enterprise, “HP Moonshot Component Pack Ver-
sion 2015.05.0,” http://h17007.www1.hp.com/us/en/enterprise/servers/
products/moonshot/component-pack/index.aspx, 2015.
[40] C.-S. Hou, Y.-X. Chen, J.-F. Li, C.-Y. Lo, D.-M. Kwai, and Y.-F.
Chou, “A Built-in Self-Repair Scheme for DRAMs with Spare Rows,
Columns, and Bits,” in ITC, 2016.
[41] Intel, “5th Generation Intel Core Processor Family Datasheet,”
https://www.intel.com/content/www/us/en/products/docs/processors/
core/5th-gen-core-family-datasheet-vol-1.html.
15
[42] ——, “6th Generation Intel Core Processor Family Datasheet,”
http://www.intel.com/content/www/us/en/processors/core/desktop-6th-
gen-core-family-datasheet-vol-1.html.
[43] ——, “8th Generation Intel Core Processor Families,” Vol. 1, pp. 21–
[44] ——, “Intel 64 and IA-32 Architectures Software Developer’s Manual,”
[45] ——, “Intel 64 and IA-32 Architectures Software Developer’s Manual,”
[46] ——, “Intel 64 and IA-32 Architectures Software Developer’s Manual,”
22, 2018.
Vol. 2B, pp. 4–92, 2018.
Vol. 2A, pp. 3–469, 2018.
Vol. 2C, pp. 5–568, 2018.
Vol. 2A, pp. 4–22, 2018.
Vol. 2A, pp. 3–529, 2018.
Vol. 2A, pp. 4–599, 2018.
Vol. 2A, pp. 3–141, 2018.
[47] ——, “Intel 64 and IA-32 Architectures Software Developer’s Manual,”
[48] ——, “Intel 64 and IA-32 Architectures Software Developer’s Manual,”
[49] ——, “Intel 64 and IA-32 Architectures Software Developer’s Manual,”
[50] ——, “Intel 64 and IA-32 Architectures Software Developer’s Manual,”
[51] Intel, “Intel 64 and IA-32 Architectures Optimization Reference
https://software.intel.com/en-us/forums/software-tuning-
Manual,”
performance-optimization-platform-monitoring/topic/712498, 2019.
[52] Intel, “Intel 64 and IA-32 Architectures Software Developer’s Manual,”
pp. 11–8, 2019.
[53] ——, “Memory Error Injection (MEI) Test Card and Utility,” https:
//designintools.intel.com/MEI Test Card and Utility p/stlgrn61.htm,
2019.
[54] Intel Developer Zone, “My summary of clﬂush and clﬂushopt,”
https://software.intel.com/en-us/forums/software-tuning-performance-
optimization-platform-monitoring/topic/712498, 2017.
[55] G. Irazoqui, T. Eisenbarth,
, and B. Sunar, “Systematic Reverse
Engineering of Cache Slice Selection in Intel Processors,” in DSD,
2015.
[56] G. Irazoqui, T. Eisenbarth, and B. Sunar, “MASCAT: Stopping Mi-
croarchitectural Attacks Before Execution,” IACR, 2016.
[57] S. Islam, A. Moghimi, I. Bruhns, M. Krebbel, B. Gulmezoglu, T. Eisen-
barth, and B. Sunar, “SPOILER: Speculative Load Hazards Boost
Rowhammer and Cache Attacks,” arxiv.org, 2019.
[58] N. Izzo, “Reliably Achieving and Efﬁciently Preventing Rowhammer
Attacks,” Ph.D. dissertation, Politecnico Milano, 2017.
[59] Y. Jang, J. Lee, S. Lee, and T. Kim, “SGX-Bomb: Locking Down the
Processor via Rowhammer Attack,” in SysTEX, 2017.
[60] JEDEC, Double Data Rate 3 (DDR3) SDRAM Standard, 2012.
[61] ——, Double Data Rate 4 (DDR4) SDRAM Standard, 2012.
[62] S. Ji, Y. Ko, S. Oh, and J. Kim, “Pinpoint Rowhammer: Suppressing
Unwanted Bit Flips on Rowhammer Attacks,” in Asia CCS, 2019.
[63] A. K. Jones, R. Melhem, and D. Kline, “Holistic Energy Efﬁcient
Crosstalk Mitigation in DRAM,” in IGSC, 2017.
[64] M. Jung, C. C. Rheinl´ander, C. Weis, and N. Wehn, “Reverse Engi-
neering of DRAMs: Row Hammer with Crosshair,” in MEMSYS, 2016.
[65] D. Kaseridis, J. Stuecheli, and L. Kurian John, “Minimalist Open-page:
A DRAM Page-mode Scheduling Policy for the Many-core Era,” in
MICRO, 2011.
[66] S. Khan, D. Lee, and O. Mutlu, “PARBOR: An Efﬁcient System-Level
Technique to Detect Data-Dependent Failures in DRAM,” in DSN,
2016.
[67] D.-H. Kim et al., “Architectural Support for Mitigating Row Hammer-
ing in DRAM Memories,” CAL, 2015.
[68] J. S. Kim, M. Patel, H. Hassan, and O. Mutlu, “Solar-DRAM: Reducing
DRAM Access Latency by Exploiting the Variation in Local Bitlines,”
in ICCD, 2018.
[69] Y. Kim, R. Daly, J. Kim, C. Fallin, J. H. Lee, D. Lee, C. Wilkerson,
K. Lai, and O. Mutlu, “Flipping Bits in Memory Without Accessing
Them: An Experimental Study of DRAM Disturbance Errors,” in ISCA,
2014.
[70] Y. Kim, D. Han, O. Mutlu, and M. Harchol-Balter, “ATLAS: A Scalable
and High-Performance Scheduling Algorithm for Multiple Memory
Controllers,” in HPCA, 2010.
[71] Y. Kim, V. Seshadri, D. Lee, J. Liu, and O. Mutlu, “A Case for
Exploiting Subarray-level Parallelism (SALP) in DRAM,” in ISCA,
2012.
[72] Y. Kim, W. Yang, and O. Mutlu, “Ramulator: A Fast and Extensible
DRAM Simulator,” in CAL, 2016.
[73] D. Kline, R. Melhem, and A. K. Jones, “Sustainable fault management
and error correction for next-generation main memories,” in IGSC,
2017.
[74] R. K. Konoth, M. Oliverio, A. Tatar, D. Andriesse, H. Bos, C. Giuffrida,
and K. Razavi, “ZebRAM: Comprehensive and Compatible Software
Protection Against Rowhammer Attacks,” in OSDI, 2018.
[75] K. Kraft, C. Sudarshan, D. M. Mathew, C. Weis, N. Wehn, and M. Jung,
“Improving the error behavior of DRAM by exploiting its Z-channel
property,” in DATE, 2018.
[76] A. Kwong, D. Genkin, D. Gruss, and Y. Yarom, “RAMBleed: Reading
Bits in Memory Without Accessing Them,” in IEEE S&P, 2020.
[77] M. Lanteigne, “How Rowhammer Could be Used to Exploit Weak-
nesses in Computer Hardware,” http://www.thirdio.com/rowhammer.
pdf, 2016.
[78] D. Lee, S. Khan, L. Subramanian, S. Ghose, R. Ausavarungnirun,
G. Pekhimenko, V. Seshadri, and O. Mutlu, “Design-Induced Latency
Variation in Modern DRAM Chips: Characterization, Analysis, and
Latency Reduction Mechanisms,” in SIGMETRICS, 2017.
[79] D. Lee, Y. Kim, V. Seshadri, J. Liu, L. Subramanian, and O. Mutlu,
“Tiered-Latency DRAM: A Low Latency and Low Cost DRAM
Architecture,” in HPCA, 2013.
[80] E. Lee, S. Lee, G. E. Suh, and J. H. Ahn, “TWiCe: Time Window
Counter Based Row Refresh to Prevent Row-Hammering,” CAL, 2018.
[81] J.-B. Lee, “Green Memory Solution,” http://aod.teletogether.com/sec/
20140519/SAMSUNG Investors Forum 2014 session 1.pdf, 2014.
[82] Lenovo, “Row Hammer Privilege Escalation,” https://support.lenovo.
com/us/en/product security/row hammer, March 2015.
[83] M. Lipp, M. T. Aga, M. Schwarz, D. Gruss, C. Maurice, L. Raab,
and L. Lamster, “Nethammer: Inducing Rowhammer Faults through
Network Requests,” arxiv.org, 2018.
[84] J. Liu, B. Jaiyen, Y. Kim, C. Wilkerson, and O. Mutlu, “An Experi-
mental Study of Data Retention Behavior in Modern DRAM Devices:
Implications for Retention Time Proﬁling Mechanisms,” in ISCA, 2013.
[85] J. Liu, B. Jaiyen, R. Veras, and O. Mutlu, “RAIDR: Retention-Aware
Intelligent DRAM Refresh,” in ISCA, 2012.
[86] J. D. McCalpin, “Topology and Cache Coherence in Knights Landing
and Skylake Xeon Processors,” 2018, Slides presented at IXPUG
Workshop (see Slide 7).
[87] P. Mosalikanti, C. Mozak, and N. Kurd, “High performance DDR
architecture in Intel Core processors using 32nm CMOS high-K metal-
gate process,” in IEEE VLSI-DAT, 2011.
[88] O. Mutlu, “The RowHammer Problem and Other Issues We May Face
as Memory Becomes Denser,” in DATE, 2017.
[89] O. Mutlu and J. S. Kim, “RowHammer: A Retrospective,” TCAD, vol.
Special Issue on Top Picks in Hardware and Embedded Security, 2019.
[90] O. Mutlu and T. Moscibroda, “Parallelism-aware Batch Scheduling:
Enhancing both Performance and Fairness of Shared DRAM Systems,”
in ISCA, 2008.
[91] K. Park, C. Lim, D. Yun, and S. Baeg, “Experiments and Root Cause
Analysis for Active-Precharge Hammering Fault in DDR3 SDRAM
Under 3× nm Technology,” Microelectronics Reliability, 2016.
[92] K. Park, D. Yun, and S. Baeg, “Statistical Distributions of Row-
Hammering Induced Failures in DDR3 Components,” Microelectronics
Reliability, 2016.
[93] PassMark
Software,
“MemTest86:
The
Standard Memory Diagnostic Utility,”
com/troubleshooting.htm, 2015.
Original
Industry
http://www.memtest86.
[94] P. Pessl, D. Gruss, C. Maurice, M. Schwarz, and S. Mangard,
“DRAMA: Exploiting DRAM Addressing for Cross-CPU Attacks,” in
USENIX Sec., 2016.
[95] D. Poddebniak, J. Somorovsky, S. Schinzel, M. Lochter, and P. R¨osler,
“Attacking Deterministic Signature Schemes using Fault Attacks,” in
IEEE S&P, 2018.
[96] R. Qiao and M. Seaborn, “A New Approach for Rowhammer Attacks,”
in HOST, 2016.
[97] K. Razavi, B. Gras, E. Bosman, B. Preneel, C. Giuffrida, and H. Bos,
“Flip Feng Shui: Hammering a Needle in the Software Stack,” in
USENIX Sec., 2016.
[98] S.-W. Ryu, K. Min, J. Shin, H. Kwon, D. Nam, T. Oh, T.-S. Jang,
M. Yoo, Y. Kim, and S. Hong, “Overcoming the Reliability Limitation
in the Ultimately Scaled DRAM using Silicon Migration Technique by
Hydrogen Annealing,” in IEDM, 2017.
[99] R. Schilling, M. Werner, P. Nasahl, and S. Mangard, “Pointing in the
Right Direction-Securing Memory Accesses in a Faulty World,” in
ACSAC, 2018.
[100] M. Schwarz, “DRAMA: Exploiting DRAM Buffers for Fun and Proﬁt,”
Graz University Technology, Master’s Thesis, 2016.
[101] M. Seaborn and T. Dullien, “Exploiting the DRAM rowhammer bug
to gain kernel privileges,” 2016, Slides presented at BlackHat.
[102] S. M. Seyedzadeh, A. K. Jones, and R. Melhem, “Counter-based Tree
Structure for Row Hammering Mitigation in DRAM,” CAL, 2017.
[103] SoftMC Source Code, https://github.com/CMU-SAFARI/SoftMC.
[104] M. Son, H. Park, J. Ahn, and S. Yoo, “Making DRAM Stronger Against
Row Hammering,” in DAC, 2017.
[105] A. Tatar, C. Giuffrida, H. Bos, and K. Razavi, “Defeating Software
Mitigations Against Rowhammer: A Surgical Precision Hammer,” in
RAID, 2018.
16
[106] A. Tatar, R. Krishnan, E. Athanasopoulos, C. Giuffrida, H. Bos, and
K. Razavi, “Throwhammer: Rowhammer Attacks over the Network and
Defenses,” in USENIX ATC, 2018.
[107] Uniﬁed EFI Forum, “Uniﬁed Extensible Firmware Interface Speciﬁca-
[112] S. Vig, S.-K. Lam, S. Bhattacharya, and D. Mukhopadhyay, “Rapid
Detection of Rowhammer Attacks using Dynamic Skewed Hash Tree,”
in HASP, 2018.
[113] Wikipedia, “DDR4 Command Encoding,” https://en.wikipedia.org/
EDL, 2019.
2016.
[117] D. Yun, M. Park, C. Lim, and S. Baeg, “Study of TID Effects on One
Row Hammering using Gamma in DDR4 SDRAMs,” in IRPS, 2018.
[118] Z. Zhang, Z. Zhan, D. Balasubramanian, X. Koutsoukos, and G. Karsai,
“Triggering Rowhammer Hardware Faults on ARM: A Revisit,” in
ASHES, 2018.
tion,” https://ueﬁ.org/speciﬁcations, 2017.
[108] ——, “Advanced Conﬁguration and Power Interface (ACPI) Speciﬁca-
tion (ver. 6.3),” https://ueﬁ.org/sites/default/ﬁles/resources/ACPI 6 3
ﬁnal Jan30.pdf, 2019.
[109] H. Usui, L. Subramanian, K. K. Chang, and O. Mutlu, “DASH:
Deadline-Aware High-performance Memory Scheduler for Heteroge-
neous Systems ﬁth Hardware Accelerators,” in TACO, 2016.
[110] V. Van Der Veen, Y. Fratantonio, M. Lindorfer, D. Gruss, C. Maurice,
G. Vigna, H. Bos, K. Razavi, and C. Giuffrida, “Drammer: Determin-
istic Rowhammer Attacks on Mobile Platforms,” in CCS, 2016.
[111] V. Van Der Veen, M. Lindorfer, Y. Fratantonio, H. P. Pillai, G. Vigna,
C. Kruegel, H. Bos, and K. Razavi, “GuardION: Practical Mitigation
of DMA-Based Rowhammer Attacks on ARM,” in DIMVA, 2018.
wiki/DDR4 SDRAM#Command encoding, 2019.
[114] Y. Xiao, X. Zhang, Y. Zhang, and R. Teodorescu, “One Bit Flips,
One Cloud Flops: Cross-VM Row Hammer Attacks and Privilege
Escalation,” in USENIX Sec., 2016.
[115] T. Yang and X.-W. Lin, “Trap-assisted DRAM Row Hammer Effect,”
[116] K. S. Yim, “The Rowhammer Attack Injection Methodology,” in SRDS,
17