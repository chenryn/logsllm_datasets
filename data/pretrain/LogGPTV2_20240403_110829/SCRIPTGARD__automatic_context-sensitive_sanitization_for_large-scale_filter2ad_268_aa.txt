# Title: ScriptGard: Automatic Context-Sensitive Sanitization for Large-Scale Legacy Web Applications

## Authors:
- Prateek Saxena, UC Berkeley, Berkeley, CA
- David Molnar, Microsoft Research, Redmond, WA
- Benjamin Livshits, Microsoft Research, Redmond, WA

## Abstract
We conducted an empirical analysis of sanitizer usage in a large-scale web application with over 400,000 lines of code and 23,244 methods, the largest such analysis to our knowledge. Our study revealed two novel classes of errors: context-mismatched sanitization and inconsistent multiple sanitization. These issues arise not from faulty sanitizers but from incorrect placement within the code. Most previous work on cross-site scripting (XSS) detection has focused on finding missing sanitizers in smaller applications. In large legacy applications, additional sanitization challenges emerge.

To address these errors, we introduce ScriptGard, a system for ASP.NET applications that can detect and correct the improper placement of sanitizers. ScriptGard serves both as a testing tool for developers and as a runtime mitigation technique. While many XSS mitigations have been studied, few consider both server and browser contexts, and most require significant changes to server-side code or browsers. ScriptGard, in contrast, can be incrementally retrofitted to legacy systems without altering the source code or requiring browser modifications. With our optimizations, ScriptGard incurs virtually no statistically significant overhead when used for mitigation.

## Categories and Subject Descriptors
- D.4.6 [Operating Systems]: Security and Protection—Invasive software
- D.1.2 [Programming Techniques]: Automatic Programming—Program transformation, program modification

## General Terms
- Security, Languages, Vulnerabilities

## Keywords
- Cross-site scripting, Runtime analysis, Web applications

## 1. Introduction
Web applications are increasingly popular, but they often suffer from cross-site scripting (XSS) and cross-channel scripting (XCS) attacks. These attacks exploit the injection of JavaScript code into unintended contexts, leading to stolen credentials and unauthorized actions.

Ideally, we would create systems inherently resistant to such attacks. Recent projects like Blueprint propose primitives for safe HTML encoding, but these techniques are difficult to apply to legacy web applications due to fundamental changes in how HTML is generated. Mitigations are needed for XSS attacks that can be incrementally applied to existing code.

### Prior Work
Previous research has primarily focused on missing sanitizers in relatively small applications. Our work targets much larger applications, analyzing a widely used web application with over 400,000 lines of code. This extensive analysis uncovered two new types of errors: context-mismatched sanitization and inconsistent multiple sanitization. These errors arise from the complex nesting of HTML contexts and shared data flow paths, which are not typically found in smaller applications.

### Consistent Sanitizer Placement
Context-mismatched sanitization errors occur when developers misplace sanitizers relative to the browser's parsing state. This mismatch can allow unintended characters to pass through. Additionally, we identified inconsistent multiple sanitization errors, where the order of applying sanitizers matters. For example, two sanitizers in our test application are non-commutative, meaning only one order is safe, yet both orders appear in practice.

We define the problem of consistent sanitizer placement as applying a sequence of sanitizers to untrusted input so that it is safe for all possible browser contexts. Prior work does not model browser contexts precisely, making it unable to detect these errors. Depending on the application's configuration and the adversary's control, these inconsistencies may or may not lead to XSS attacks, but they remain sanitization errors.

### ScriptGard
We developed ScriptGard, a system that detects and repairs these sanitization errors by automatically choosing the appropriate sanitizer. ScriptGard requires no changes to web browsers or server-side source code. Instead, it uses binary rewriting of server code to embed a browser model that determines the correct parsing context when HTML is output.

Unlike template-based systems like ASP.NET's web and HTML controls, ScriptGard performs context-sensitive sanitization, allowing developers to create custom nested HTML contexts without sacrificing consistency. During analysis, ScriptGard uses positive taint tracking, which is conservative and can detect non-traditional sources of untrusted data, such as event logs, which were recently exploited in a Google Analytics vulnerability.

ScriptGard can be used as a testing aid or as a runtime mitigation. As a testing aid, it identifies sanitizers that are incorrect for the runtime parsing context. As a runtime mitigation, ScriptGard can learn the correct sanitizers for different program paths during a training phase, reducing the need for full instrumentation in deployment.

### 1.1 Contributions
- **Testing for Sanitizer Placement Errors:** We identify and implement an analysis for context-mismatched and inconsistent multiple sanitization errors using server-side instrumentation and a browser model.
- **Runtime Auto-Sanitization:** We show how ScriptGard can determine and apply the correct sanitization at runtime with minimal overhead.
- **Evaluation and Empirical Study:** We evaluate ScriptGard on a large application, finding and correcting numerous sanitization errors.

### 1.2 Paper Organization
- **Section 2:** Describes the context-sensitive vulnerabilities ScriptGard addresses.
- **Section 3:** Provides an overview of the ScriptGard architecture.
- **Section 4:** Formalizes the vulnerabilities and provides a notion of correctness.
- **Section 5:** Details the implementation of ScriptGard.
- **Section 6:** Presents an experimental evaluation of our techniques.
- **Sections 7 and 8:** Discuss related work and conclude the paper.

## 2. Sanitizer Consistency
In this section, we explain the two new classes of sanitization errors observed in our empirical study. Even in widely deployed frameworks and libraries (e.g., Django, GWT, OWASP, .NET), recommended sanitizers do not always commute. For example, `EcmaScriptStringEncode` transforms characters that break out of JavaScript string literals, while `HtmlAttribEncode` HTML-entity encodes characters. These standard behaviors can lead to context-mismatched and inconsistent multiple sanitization errors if not correctly placed.

### Nesting of Contexts
The following diagram illustrates the nesting of contexts and the potential for sanitization errors:

```
HTML output
Nesting of contexts
- JavaScript String Literal,
  - document.write(`
- Html URI Attribute,
  - );
- Html URI Attribute,
- JavaScript Number
- Html URI Attribute
- JavaScript String Literal,
  - document.write(‘  ');
```

This nesting can lead to subtle errors if sanitizers are not correctly applied to each context.