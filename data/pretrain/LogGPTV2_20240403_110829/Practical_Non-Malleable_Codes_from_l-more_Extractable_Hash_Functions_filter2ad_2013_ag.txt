plies that D1 is statistically close to D2, (i.e., (gr, g(cid:104)r,c(cid:105), gar, ga(cid:104)r,c(cid:105)) is close to (gr, gr(cid:48)
)),
and thus Pr[E1] diﬀers by a negligible quantity under the two distributions.
In [11] the authors showed that H∗ is a 0-more extractable, which implies that the extractor
¯EH∗
extracts a pre-image for ˜v, with respect to h∗
z(cid:48) (i.e., event E1 happens), with overwhelming
¯Av
probability, under the distribution D2. Therefore, we conclude that event E1 happens with
overwhelming probability under the distribution D1. This completes the proof of the claim. (cid:4)
Claim 5.6. Let hz, Av, auxAv , EH
and auxE , be as they where deﬁned above. Then, for any
Av
As and message s, Pr[¬E2]  k + ω(log k).
(cid:4)
This completes the proof of the theorem.
10Here, we treat v, r, as special symbols, not integers.
21
5.3 Our resulting instantiation
By plugging Construction 5.8, as the underlying coding scheme to Construction 5.2, we receive
the following corollary.
Corollary 5.10. Under the DLog assumption and t-KEA, there exists a 1-more extractable,
collision resistant, hash function family Hk.
Proof. Let (Init, Enc, Dec) be the (kt, (2t + 4)k), RSS-NM code of Construction 5.8. Then we
construct Hk by plugging in (Init, Enc, Dec), as the underlying coding scheme to the hash function
family of Construction 5.2. Clearly, by Lemma 5.3, Hk is collision resistant as the underlying
encoding algorithm is injective. By Theorem 5.9, the underlying coding scheme is RSS-non-
malleable against Faﬀ, and moreover, for any message s, H∞ (Enc(s)) ≥ k + ω(log k). Thus, by
Theorem 5.4, Hk is 1-more extractable. This concludes the proof of this corollary.
(cid:4)
6 Constructing (cid:96)-more extractable hash
In the “(cid:96)-more” setting, the attacker is given v1, . . . , v(cid:96), hash values, and produces a new hash
value ˜v. Having the techniques from the “1-more” setting, one can easily argue the attack against
˜v (in the (cid:96)-more setting), can be reduced to an aﬃne attack against the codewords c1, . . . , c(cid:96), that
are related to v1, . . . , v(cid:96), respectively. In order to construct (cid:96)-more ECRH, for (cid:96) > 1, we generalize
the notion of RSS-NM codes, for multiple codewords. The generalization is a straightforward
extension of Deﬁnition 5.1, where the tampering function receives (cid:96) codewords and the simulator
needs to recover the message and randomness in case the output of the tampering function is not
among the given codewords. The formal is deﬁnition is given in Section A.4 of the Appendix.
Clearly, for (cid:96) = 1, the notion of multi-codeword RSS-NMC matches Deﬁnition 5.1. In order
to construct, (cid:96)-more ECRH, for (cid:96) > 1, we need an RSS-NM code, for the following function
class.
Deﬁnition 6.1 (The function class ¯F (cid:96)
aﬀ). We deﬁne the following function class
aﬀ = {f (x1, . . . , x(cid:96)) = f1(x1) + . . . + f(cid:96)(x(cid:96)) | fi ∈ Faﬀ}.
¯F (cid:96)
We present the following lemma.
Lemma 6.2. The code of Construction 5.8, (Enc, Dec), is a multi-codeword RSS-NM code
against ¯F (cid:96)
aﬀ, for (cid:96) > 1.
Proof. A proof sketch is given in Section B of the Appendix.
(cid:4)
In the “(cid:96)-more” setting the attacker receives vi = (g(cid:104)r,ci(cid:105), ga(cid:104)r,ci(cid:105)), i ∈ [(cid:96)], and constructs a