>>> wb.get_sheet_names()
['Sheet']
>>> wb.create_sheet()
>>> wb.get_sheet_names()
['Sheet', 'Sheet1']
>>> wb.create_sheet(index=0, title='First Sheet')
>>> wb.get_sheet_names()
['First Sheet', 'Sheet', 'Sheet1']
>>> wb.create_sheet(index=2, title='Middle Sheet')
>>> wb.get_sheet_names()
['First Sheet', 'Sheet', 'Middle Sheet', 'Sheet1']
create_sheet()方法返回一个新的 Worksheet 对象，名为 SheetX，它默认是工作
簿的最后一个工作表。或者，可以利用index和title关键字参数，指定新工作表的
索引或名称。
继续前面的例子，输入以下代码：
228 Python编程快速上手——让繁琐工作自动化
>>> wb.get_sheet_names()
['First Sheet', 'Sheet', 'Middle Sheet', 'Sheet1']
>>> wb.remove_sheet(wb.get_sheet_by_name('Middle Sheet'))
>>> wb.remove_sheet(wb.get_sheet_by_name('Sheet1'))
>>> wb.get_sheet_names()
['First Sheet', 'Sheet']
remove_sheet()方法接受一个Worksheet对象作为其参数，而不是工作表名称的字符
串。如果你只知道要删除的工作表的名称，就调用 get_sheet_by_name()，将它的返
回值传入remove_sheet()。
在工作簿中添加或删除工作表之后，记得调用save()方法来保存变更。
12.5.3 将值写入单元格
将值写入单元格，很像将值写入字典中的键。在交互式环境中输入以下代码：
>>> import openpyxl
>>> wb = openpyxl.Workbook()
>>> sheet = wb.get_sheet_by_name('Sheet')
>>> sheet['A1'] = 'Hello world!'
>>> sheet['A1'].value
'Hello world!'
如果你有单元格坐标的字符串，可以像字典的键一样，将它用于 Worksheet 对
象，指定要写入的单元格。
12.6 项目：更新一个电子表格
这个项目需要编写一个程序，更新产品销售电子表格中的单元格。程序将遍
历这个电子表格，找到特定类型的产品，并更新它们的价格。请从 http://nostarch.com/
automatestuff/下载这个电子表格。图12-3展示了这个电子表格。
图12-3 产品销售的电子表格
每一行代表一次单独的销售。列分别是销售产品的类型（A）、产品每磅的价格
（B）、销售的磅数（C），以及这次销售的总收入。TOTAL列设置为Excel公式，将
第12章 处理Excel电子表格 229
每磅的成本乘以销售的磅数，并将结果取整到分。有了这个公式，如果列B或C发
生变化，TOTAL列中的单元格将自动更新。
现在假设Garlic、Celery和Lemons的价格输入的不正确。这让你面对一项无聊
的任务：遍历这个电子表格中的几千行，更新所有garlic、celery和lemon行中每磅
的价格。你不能简单地对价格查找替换，因为可能有其他的产品价格一样，你不希
望错误地“更正”。对于几千行数据，手工操作可能要几小时。但你可以编写程序，
几秒钟内完成这个任务。
你的程序做下面的事情：
• 循环遍历所有行。
• 如果该行是Garlic、Celery或Lemons，更新价格。
这意味着代码需要做下面的事情：
• 打开电子表格文件。
• 针对每一行，检查列A的值是不是Celery、Garlic或Lemon。
• 如果是，更新列B中的价格。
• 将该电子表格保存为一个新文件（这样就不会丢失原来的电子表格，以防万一）。
第1步：利用更新信息建立数据结构
需要更新的价格如下：
Celery 1.19
Garlic 3.07
Lemon 1.27
你可以像这样编写代码：
if produceName == 'Celery':
cellObj = 1.19
if produceName == 'Garlic':
cellObj = 3.07
if produceName == 'Lemon':
cellObj = 1.27
这样硬编码产品和更新的价格有点不优雅。如果你需要用不同的价格，或针对
不同的产品，再次更新这个电子表格，就必须修改很多代码。每次修改代码，都有
引入缺陷的风险。
更灵活的解决方案，是将正确的价格信息保存在字典中，在编写代码时，利用
这个数据结构。在一个新的文件编辑器窗口中，输入以下代码：
#! python3
# updateProduce.py - Corrects costs in produce sales spreadsheet.
import openpyxl
wb = openpyxl.load_workbook('produceSales.xlsx')
sheet = wb.get_sheet_by_name('Sheet')
230 Python编程快速上手——让繁琐工作自动化
# The produce types and their updated prices
PRICE_UPDATES = {'Garlic': 3.07,
'Celery': 1.19,
'Lemon': 1.27}
# TODO: Loop through the rows and update the prices.
将它保存为 updateProduce.py。如果需要再次更新这个电子表格，只需要更新
PRICE_UPDATES字典，不用修改其他代码。
第2步：检查所有行，更新不正确的价格
程序的下一部分将循环遍历电子表格中的所有行。将下面代码添加到
updateProduce.py的末尾：
#! python3
# updateProduce.py - Corrects costs in produce sales spreadsheet.
--snip--
# Loop through the rows and update the prices.
 for rowNum in range(2, sheet.get_highest_row()): # skip the first row
 produceName = sheet.cell(row=rowNum, column=1).value
 if produceName in PRICE_UPDATES:
sheet.cell(row=rowNum, column=2).value = PRICE_UPDATES[produceName]
 w b.save('updatedProduceSales.xlsx')
我们从第二行开始循环遍历，因为第1行是标题。第1列的单元格（即列A）将
保存在变量produceName中。如果produceName的值是PRICE_ UPDATES字典中的一
个键，你就知道，这行的价格必须修改。正确的价格是PRICE_UPDATES[produceName]。
请注意，使用PRICE_UPDATES让代码变得多么干净。只需要一条if语句，而
不是像if produceName == 'Garlic'这样的代码，就能够更新所有类型的产品。因为代
码没有硬编码产品名称，而是使用PRICE_UPDATES字典，在for循环中更新价格，
所以如果产品销售电子表格需要进一步修改，你只需要修改 PRICE_UPDATES 字
典，不用改其他代码。
在遍历整个电子表格并进行修改后，代码将Workbook对象保存到updatedProduceSales.
xlsx。它没有覆写原来的电子表格，以防万一程序有缺陷，将电子表格改错。
在确认修改的电子表格正确后，你可以删除原来的电子表格。
你可以从http://nostarch.com/automatestuff/下载这个程序的完整源代码。
第3步：类似程序的思想
因为许多办公室职员一直在使用Excel电子表格，所以能够自动编辑和写入Excel
文件的程序，将非常有用。这样的程序可以完成下列任务：
• 从一个电子表格读取数据，写入其他电子表格的某些部分。
第12章 处理Excel电子表格 231
• 从网站、文本文件或剪贴板读取数据，将它写入电子表格。
• 自动清理电子表格中的数据。例如，可以利用正则表达式，读取多种格式的电
话号码，将它们转换成单一的标准格式。
12.7 设置单元格的字体风格
设置某些单元格行或列的字体风格，可以帮助你强调电子表格中重点的区域。
例如，在这个产品电子表格中，程序可以对potato、garlic和parsnip等行使用粗体。
或者也许你希望对每磅价格超过5美元的行使用斜体。手工为大型电子表格的某些
部分设置字体风格非常令人厌烦，但程序可以马上完成。
为了定义单元格的字体风格，需要从 openpyxl.styles 模块导入 Font()和 Style()
函数。
from openpyxl.styles import Font, Style
这让你能输入Font()，代替openpyxl.styles.Font()（参见2.8节“导入模块”，复
习这种方式的import语句）。
这里有一个例子，它创建了一个新的工作簿，将A1单元格设置为24点、斜体。
在交互式环境中输入以下代码：
>>> import openpyxl
>>> from openpyxl.styles import Font, Style
>>> wb = openpyxl.Workbook()
>>> sheet = wb.get_sheet_by_name('Sheet')
 >>> italic24Font = Font(size=24, italic=True)
 >>> styleObj = Style(font=italic24Font)
 >>> sheet['A'].style/styleObj
>>> sheet['A1'] = 'Hello world!'
>>> wb.save('styled.xlsx')
OpenPyXL模块用Style对象来表示单元格字体风格设置的集合，字体风格保存
在 Cell 对象的 style 属性中。将 Style 对象赋给 style 属性，可以设置单元格的字体
风格。
在这个例子中，Font(size=24, italic=True)返回一个 Font 对象，保存在italic24Font
中。Font()的关键字参数size 和 italic，配置了 Font 对象的 style 属性。这个 Font
对象被传递给Style(font=italic24Font)调用，该函数的返回值保存在styleObj中。如
果styleObj被赋给单元格的style属性，所有字体风格的信息将应用于单元格A1。
12.8 Font 对象
Font对象的style属性影响文本在单元格中的显示方式。要设置字体风格属性，就
向Font()函数传入关键字参数。表12-2展示了Font()函数可能的关键字参数。
232 Python编程快速上手——让繁琐工作自动化
表12-2 Font style属性的关键字参数
关键字参数 数据类型 描述
name 字符串 字体名称，诸如'Calibri'
或'Times New Roman'
size 整型 大小点数
bold 布尔型 True表示粗体
italic 布尔型 True表示斜体
可以调用Font()来创建一个Font对象，并将这个Font对象保存在一个变量中。
然后将它传递给Style()，得到的Style对象保存在一个变量中，并将该变量赋给Cell
对象的style属性。例如，下面的代码创建了各种字体风格：
>>> import openpyxl
>>> from openpyxl.styles import Font, Style
>>> wb = openpyxl.Workbook()
>>> sheet = wb.get_sheet_by_name('Sheet')
>>> fontObj1 = Font(name='Times New Roman', bold=True)
>>> styleObj1 = Style(font=fontObj1)
>>> sheet['A1'].style/styleObj
>>> sheet['A1'] = 'Bold Times New Roman'
>>> fontObj2 = Font(size=24, italic=True)
>>> styleObj2 = Style(font=fontObj2)
>>> sheet['B3'].style/styleObj
>>> sheet['B3'] = '24 pt Italic'
>>> wb.save('styles.xlsx')
这里，我们将一个Font对象保存在fontObj1中，并用它创建一个Style对象，
该对象保存在styleObj1中，然后将A1的Cell对象的style属性设置为styleObj。我
们针对另一个Font对象和Style对象重复这个过程，设置第二个单元格的字体风格。
运行这段代码后，电子表格中A1和B3单元格的字体风格将设置为自定义的字体风
格，如图12-4所示。
图12-4 带有自定义字体风格的电子表格
对于单元格A1，我们将字体名称设置为'Times New Roman'，并将bold设置为
true，这样我们的文本将以粗体Times New Roman的方式显示。我们没有指定大小，
所以使用openpyxl的默认值11。在单元格B3中，我们的文本是斜体，大小是24。
第12章 处理Excel电子表格 233
我们没有指定字体的名称，所以使用openpyxl的默认值Calibri。
12.9 公式
公式以一个等号开始，可以配置单元格，让它包含通过其他单元格计算得到的
值。在本节中，你将利用openpyxl模块，用编程的方式在单元格中添加公式，就像
添加普通的值一样。例如：
>>> sheet['B9'] = '=SUM(B1:B8)'
这将=SUM(B1:B8)作为单元格B9的值。这将B9单元格设置为一个公式，计算
单元格B1到B8的和。图12-5展示了它的效果。
图12-5 单元格B9包含了一个公式，计算单元格B1到B8的和
为单元格设置公式就像设置其他文本值一样。在交互式环境中输入以下代码：
>>> import openpyxl
>>> wb = openpyxl.Workbook()
>>> sheet = wb.get_active_sheet()
>>> sheet['A1'] = 200
>>> sheet['A2'] = 300
>>> sheet['A3'] = '=SUM(A1:A2)'
>>> wb.save('writeFormula.xlsx')
单元格A1和A2分别设置为200和300。单元格 A3设置为一个公式，求出A1
和A2的和。如果在Excel中打开这个电子表格，A3的值将显示为500。
也可以读取单元格中的公式，就像其他值一样。但是，如果你希望看到该公式
的计算结果，而不是原来的公式，就必须将 load_workbook()的 data_only 关键字参
数设置为True。这意味着Workbook对象要么显示公式，要么显示公式的结果，不