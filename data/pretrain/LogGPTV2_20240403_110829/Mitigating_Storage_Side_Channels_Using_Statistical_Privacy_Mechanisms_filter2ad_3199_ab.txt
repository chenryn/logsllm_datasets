ronments or shared server hosting environments running all
kinds of Linux distributions, and mobile devices running An-
droid. We assume the OS kernel and the root user of the
system are not compromised. Accordingly, security attacks
due to software vulnerabilities are beyond the scope of con-
sideration.
4.2 Design Overview
When a procfs ﬁle is open and read, the data read are cre-
ated on-the-ﬂy by the Linux kernel. To create the ﬁle data,
the kernel draws information from several data structures.
Examples include the task_struct structure that describes
a process or task in the system, and the mm_struct structure
that describes the virtual memory of a process.
One option to interfere with adversary inferences about
victim processes using values obtained from procfs would
be to add noise to those values directly, just before out-
putting them. Unfortunately, there are numerous outputs
from procfs with complex relationships among them, and
so we determined that adding noise to the underlying kernel
data-structure ﬁeld values used to calculate procfs outputs
would be a more manageable design choice. In particular,
there are fewer such ﬁelds, and while there remain relation-
ships among them (more on that below), they are reduced
in number and complexity.
1584Reference
Description
procfs ﬁles used
Underlying kernel data-structure ﬁelds
Jana et al. [25] Memory footprint and
context switches of a
browser process leak
website it visits
/proc//statm
/proc//status
/proc//schedstat
mm_struct.total_vm
mm_struct.shared_vm
task_struct.nvcsw
task_struct.nivcsw
/proc/uid_stat//tcp_rcv
/proc/uid_stat//tcp_snd
uid_stat.tcp_rcv
uid_stat.tcp_snd
/proc//statm
/proc//stat
/proc/uid_stat//tcp_rcv
/proc/uid_stat//tcp_snd
mm_struct.shared_vm
mm_struct.rss_stat.count[MM_FILEPAGES]
mm_struct.rss_stat.count[MM_ANONPAGES]
uid_stat.tcp_rcv
uid_stat.tcp_snd
task_struct.utime
task_struct.utime
Zhou et al. [44]
Sizes of network pack-
ets to/from Android
app leaks its activity
foreground
Chen et al. [14] Android
activity
identiﬁed
using shared memory,
CPU utilization time
and network activity
Lin et al. [28]
Use of software key-
board detected using
CPU utilization time
/proc//stat
Table 1: Selected attacks leveraging storage side channels in the procfs ﬁle system
So, in the design of dpprocfs, we treat updates to the
relevant per-process kernel data structures as constituting
a “database” x that represents the evolution of the process
since its inception. That is, consider a conceptual database
x to which a record is added each time one or more of a pro-
cess’ kernel data-structure ﬁelds changes. The columns of
x correspond to the numeric ﬁelds of the per-process kernel
data structures consulted by procfs. So, for example, the
mm_struct.total_vm ﬁeld, which indicates the total num-
ber of virtual memory pages of a process, is represented by
a column in x. As the process executes, a new record is ap-
pended to x anytime the value in one of these ﬁelds changes.
Each time a procfs ﬁle is read, the values returned are as-
sembled from what is, in eﬀect, the most recently added row
of the database x. We stress, however, that this database is
conceptual only, and does not actually exist in dpprocfs.
We design an algorithm to implement d-privacy per col-
umn of x (i.e., per data-structure ﬁeld), relying on Prop. 1 to
bound the information leaked from multiple columns simul-
taneously. Since each column of the database x corresponds
to a speciﬁc ﬁeld in a kernel data structure, our mechanism
is applied each time a ﬁeld in a protected data structure is
read by procfs code. For the remainder of this paper, we
adjust our notation so that the database x represents a sin-
gle column corresponding to that data-structure ﬁeld. We
refer to x[i] as the value of the last element of that column
(i.e., the ﬁeld in the kernel data structure corresponding to
the column) when the i-th access occurs (i.e., i = 1 is the
ﬁrst access to the data-structure ﬁeld).
Even to limit leakage from a single column, it is necessary
to decide on a distance metric d for which to implement
d-privacy. While we might not know exactly how the ad-
versary uses the procfs outputs to infer information about
a victim process, we can glean guidance from known at-
tacks. For example, Zhou et al. [44] discuss how they used
procfs output based on the uid_stat.tcp_snd ﬁeld to in-
fer when a victim sent a tweet (a la Twitter) as follows:
“a tweet is considered to be sent when the increment se-
quence is either (420|150, 314, 580–720) or (420|150, 894–
1034).” [44, Sec. 3.2] That is, their attack works by reading
from procfs four times in a short interval to obtain values
x[1], x[2], x[3], x[4] where x denotes the uid_stat.tcp_snd
ﬁeld, and deciding that a tweet was sent if either x[2]−x[1] ∈
{150, 420}, x[3]−x[2] = 314, and x[4]−x[3] ∈ {580, . . . , 720}
or x[2] − x[1] ∈ {150, 420} and x[3] − x[2] ∈ {894, . . . , 1034}.
So, to interfere with this attack, it is necessary to render
these readings from the “database” x indistinguishable from
readings from an alternative “database” x′ that reﬂects a run
in which no tweet was sent. This insight led us to choose
the following metric d∗ for enforcing privacy:
d∗(x, x′) = Xi≥1
|(x[i] − x[i − 1]) − (x′[i] − x′[i − 1])|
Proposition 3. d∗ is a metric.
The distance d∗ captures the distinguishability of consecu-
tive pairs of observations of a data-structure ﬁeld via procfs,
and so by deﬁning d∗ in this way (and choosing ǫ appropri-
ately), we ensure that a (d∗, ǫ)-private mechanism can hide
the diﬀerences between x and x′ that, e.g., enabled Zhou et
al. to identify a tweet being sent in their attack.
Moreover, adopting d∗ is plausibly of use in defending
against a much broader range of attacks, since d∗-privacy
implies dL1-privacy:
Proposition 4. If A is (d∗, ǫ)-private, then A is (dL1, 2ǫ)-
private.
Since any p-point metric space can be embedded in L1 dis-
tance with O(log p) distortion [1], making it diﬃcult to dis-
tinguish x and x′ with low d∗ (and hence L1) distance should
make it more diﬃcult to distinguish them via other distance
metrics, too.
One challenge of using d-privacy to protect information
from kernel data structures used in responding to procfs
reads is that the information obtained through procfs might
become inconsistent. That is, our mechanism might break
data-structure invariants on which the procfs code or the
clients of procfs rely. dpprocfs therefore reestablishes these
invariants on the d-private values prior to providing them to
procfs code. So, for example, since enforcing d-privacy adds
noise to the mm_struct.total_vm and mm_struct.shared_vm
values, the resulting values might fail to satisfy the invariant
mm_struct.total_vm ≥ mm_struct.shared_vm. dpprocfs
thus adjusts mm_struct.total_vm and mm_struct.shared_vm
to reestablish this invariant before permitting them to be
1585used by the procfs code.
In Sec. 4.4, we describe how
we generate the invariants for these kernel data structures
and how we reestablish those invariants on d-private values.
Note that these invariants are public information: they can
be extracted statically or dynamically via the same meth-
ods we obtain them, and post-processing d-private values
to reestablish these invariants does not impinge on their d-
privacy (cf., [24]).
4.3 d∗-Private Mechanism Design
In this section we describe the mechanism we use to imple-
ment d∗-privacy for the conceptual single-column database x
described above. This mechanism is due to Chan et al. [12],
though they considered only the case where x[i + 1] − x[i] ∈
{0, 1} and, moreover, diﬀerential privacy (so that x[i + 1] −
x[i] 6= x′[i + 1] − x′[i] for only one i), rather than d∗-privacy
as we do here. As such, our primary contribution is in prov-
ing that this mechanism generalizes to implement d∗-privacy
and does so for vectors over the natural numbers.
Let N denote the natural numbers and D(i) ∈ N denote
the largest power of two that divides i; i.e., D(i) = 2j if and
only if 2j |i and 2j+16 | i. Note that i = D(i) if and only if i
is a power of two. The mechanism A computes a value ˜x[i]
that is used in place of x[i] in the procfs code using the
recurrence
˜x[i] = ˜x[G(i)] + (x[i] − x[G(i)]) + ri
(1)
where x[0] = ˜x[0] = 0, Lap (b) denotes the Laplace distribu-
tion with scale b and location µ = 0, and
G(i) = 
ri ∼ 
0
i/2
if i = 1
if i = D(i) ≥ 2
i − D(i)
if i > D(i)
Lap¡ 1
ǫ¢
Lap³ ⌊log2 i⌋
ǫ
if i = D(i)
´ otherwise
(2)
(3)
So, for example, the ﬁrst eight queries to x result in the
$← Lap (b) denotes sam-
following return values, where ri
pling randomly according to the distribution Lap (b).
˜x[1] ← x[1] + r1
where r1
˜x[2] ← ˜x[1] + (x[2] − x[1]) + r2 where r2
˜x[3] ← ˜x[2] + (x[3] − x[2]) + r3 where r3
˜x[4] ← ˜x[2] + (x[4] − x[2]) + r4 where r4
˜x[5] ← ˜x[4] + (x[5] − x[4]) + r5 where r5
˜x[6] ← ˜x[4] + (x[6] − x[4]) + r6 where r6
˜x[7] ← ˜x[6] + (x[7] − x[6]) + r7 where r7
˜x[8] ← ˜x[4] + (x[8] − x[4]) + r8 where r8
$← Lap¡ 1
ǫ¢
$← Lap¡ 1
ǫ¢
$← Lap¡ 1
ǫ¢
$← Lap¡ 1
ǫ¢
$← Lap¡ 2
ǫ¢
$← Lap¡ 2
ǫ¢
$← Lap¡ 2
ǫ¢
$← Lap¡ 1
ǫ¢
Chan et al. characterize the amount of noise introduced
by the mechanism described above, which grows only loga-
rithmically in i, speciﬁcally:
Proposition 5
([12]). With probability at least 1 − δ,
|˜x[i] − x[i] | = O³(log 1
δ ) × (⌊log i⌋)3/2 × ǫ−1´.
Our main contribution as it relates to this mechanism de-
sign lies in showing the following result:
Proposition 6. The algorithm in Eqns. 1–3 is (d∗, 2ǫ)-
private.
4.4 Consistency Enforcement
The values provided to procfs code, once rendered d∗-
private by the mechanism described in Sec. 4.3, are pro-
cessed as usual by the procfs code to produce the values
served as the contents of the queried procfs ﬁles. By adding
noise to these values, however, it is possible that we cause
them to violate invariants on which the procfs code or the
reader of the procfs ﬁles depends. As such, prior to pro-
viding the d∗-private values to the procfs code, we process
these values to re-establish invariants on which this code
might depend.
Speciﬁcally, the invariants we reestablish are of two types,
namely one-ﬁeld or multiple-ﬁeld. A one-ﬁeld invariant holds
between the values of the same data-structure ﬁeld when
queried at two diﬀerent times. For example, the fact that
the task_struct.utime ﬁeld is monotonically nondecreasing
is a one-ﬁeld invariant. In contrast, a multiple-ﬁeld invariant
holds among the values of two or more data-structure ﬁelds
accessed at the same time, e.g., mm_struct.hiwater_rss <
mm_struct.shared_vm. There could also be invariants that
hold among the values of two or more data-structure ﬁelds
accessed at diﬀerent times, though we do not consider such
invariants here.
Techniques for invariant identiﬁcation range from static
(e.g., [45]) to dynamic (e.g., [22]) and combinations thereof
(e.g., [16]). While dpprocfs is agnostic to the method of
invariant generation, the type we explored for our proto-
type is dynamic.
Intuitively, in this approach we execute
the system under a variety of workloads, taking snapshots
of the relevant kernel data structures after they are updated.
We then post-process these snapshots to identify properties
that held consistently in all executions. Obviously we can-
not detect all such properties (there are inﬁnitely many that
could be inferred from ﬁnitely many traces), nor is identify-
ing all of them strictly necessary. (We return to this issue in
Sec. 7.) In Sec. 5.2, we detail the invariants that dpprocfs
enforces in our current implementation, though we stress
that these invariants can be generated through a combina-
tion of techniques—including manually.
Enforcing these invariants involves processing the data-
structure ﬁeld values output by the d∗-private mechanism
described in Sec. 4.3 to satisfy these invariants. More specif-
ically, any attempt to read from a procfs ﬁle will cause an
access to certain data-structure ﬁelds. The values in these
ﬁelds and in any other ﬁelds related to them by multi-ﬁeld
invariants (even transitively) are each subjected to the d∗-
private mechanism of Sec. 4.3, producing a noised value ˜x[i]
to replace the actual value x[i] in this, the i-th, access to
this ﬁeld. These outputs are then altered to satisfy relevant
single-ﬁeld and multiple-ﬁeld invariants, resulting in a ﬁnal
output ˆx[i] for further processing by the kernel routine that
produces the contents of the accessed procfs ﬁle.
In Sec. 5.3, we explore two ways of manipulating these
outputs to satisfy invariants. In the ﬁrst, to which we refer
as computing a heuristic solution to the invariants, dpprocfs
leverages a hand-implemented algorithm to deterministically
modify the outputs to conform. This method is very eﬃ-
cient, but might alter the outputs more than other ways of
satisfying the invariants might. In the second approach, to
which we refer as computing the nearest solution to the in-
1586variants, we generate an integer programming problem with
the invariants as constraints and an objective of minimizing
the total magnitude of the changes to the d∗-private out-
puts to conform to the invariants. We then feed this integer
program to a commercial solver (in our current implementa-
tion, CPLEX1) to compute an optimal solution. We stress
that both the heuristic and nearest solutions are computed
using invariants that an adversary can compute himself (i.e.,
are public), and so this post-processing does not erode the
d∗-privacy of these outputs.
5.
IMPLEMENTATION
We implemented dpprocfs as a suite of software tools in
Ubuntu Linux LTS 14.04 with kernel version 3.13.11. dp-
procfs consists of three components: a kernel extension,
which we call privfs, that enhances the procfs with d∗-
private mechanisms (as discussed in Sec. 4.3) without al-
tering its existing program interfaces; a software tool, in-
vgen, that automatically searches for invariants in kernel
data structures for maintaining procfs value consistency (as
discussed in Sec. 4.4); and a userspace daemon, privfsd,
that interacts with the kernel extension and facilitates con-
sistency enforcement in real time.
5.1 d∗-Private Mechanism Implementation