### 当匹配不到动态类型时进行虚调用

在 Graal 编译器中，当无法确定动态类型时，会执行虚调用。而在 C2 编译器中，如果类型 Profile 不完整，即时编译器将不会尝试条件去虚化，而是直接使用内联缓存或方法表。

## 总结与实践

今天我介绍了即时编译器去虚化的几种方法：
- **完全去虚化**：通过类型推导或类层次分析，将虚方法调用转换为直接调用。关键在于证明虚方法调用的目标方法是唯一的。
- **条件去虚化**：通过向代码中添加类型比较，将虚方法调用转换为一系列的类型测试及对应类型的直接调用。这依赖于 Java 虚拟机收集的类型 Profile。

在今天的实践环节中，我们将重现因类加载导致的去优化过程。以下是示例代码：

```java
// Run with java -XX:CompileCommand='dontinline JITTest.test' -XX:+PrintCompilation JITTest
public class JITTest {
    static abstract class BinaryOp {
        public abstract int apply(int a, int b);
    }

    static class Add extends BinaryOp {
        public int apply(int a, int b) {
            return a + b;
        }
    }

    static class Sub extends BinaryOp {
        public int apply(int a, int b) {
            return a - b;
        }
    }

    public static int test(BinaryOp op) {
        return op.apply(2, 1);
    }

    public static void main(String[] args) throws Exception {
        Add add = new Add();
        for (int i = 0; i < 100000; i++) {
            test(add);
        }
    }
}
```

### Compact Strings 在 Java 9 中的应用

在 Java 9 之前，字符串使用 `char` 数组存储，以支持非英文字符。然而，大多数 Java 程序中的字符串都是由 Latin1 字符组成的，每个字符仅需一个字节。因此，使用 `char` 数组会浪费大量内存。

Java 9 引入了 Compact Strings，当字符串仅包含 Latin1 字符时，使用单字节编码格式，从而提高内存使用效率。例如，在 `String.indexOf` 方法中，如果调用者和参数均为只包含 Latin1 字符的字符串，那么该方法将调用 `StringLatin1.indexOf` 方法。

以下是 `StringLatin1.indexOf` 方法的源代码：

```java
@HotSpotIntrinsicCandidate
public static int indexOf(byte[] value, byte[] str) {
    if (str.length == 0) {
        return 0;
    }
    if (value.length == 0) {
        return -1;
    }
    return indexOf(value, value.length, str, str.length, 0);
}

@HotSpotIntrinsicCandidate
public static int indexOf(byte[] value, int valueCount, byte[] str, int strCount, int fromIndex) {
    byte first = str[0];
    int max = (valueCount - strCount);
    for (int i = fromIndex; i <= max; i++) {
        if (value[i] != first) {
            while (++i <= max && value[i] != first);
        }
        if (i <= max) {
            int j = i + 1;
            int end = j + strCount - 1;
            for (int k = 1; j < end && value[j] == str[k]; j++, k++);
            if (j == end) {
                return i;
            }
        }
    }
    return -1;
}
```

### Intrinsic 与方法内联

在 HotSpot 虚拟机中，intrinsic 的实现方式有两种：
1. **独立的桩程序**：既可以被解释执行器利用，直接替换对原方法的调用；也可以被即时编译器利用，将代表对原方法的调用的 IR 节点替换为对这些桩程序的调用。这种形式的 intrinsic 较少，主要包括 `Math` 类中的一些方法。
2. **特殊的编译器 IR 节点**：仅能被即时编译器利用。在编译过程中，即时编译器会将对原方法的调用的 IR 节点替换成特殊的 IR 节点，并参与后续的优化过程。最终，即时编译器的后端将根据这些特殊的 IR 节点生成指定的 CPU 指令。大部分的 intrinsic 都是通过这种方式实现的。

这个替换过程是在方法内联时进行的。当即时编译器遇到方法调用节点时，它会查询目标方法是否是 intrinsic。如果是，则插入相应的特殊 IR 节点；如果不是，则进行原本的内联工作。也就是说，如果方法调用的目标方法是 intrinsic，即时编译器会直接忽略原目标方法的字节码，甚至根本不在乎原目标方法是否有字节码。即便是 native 方法，只要它被标记为 intrinsic，即时编译器便能够将其 "内联" 进来，并插入特殊的 IR 节点。

### 已有 intrinsic 简介

最新版本的 HotSpot 虚拟机定义了三百多个 intrinsic。其中，超过三成是 `Unsafe` 类的方法。我们通常不会直接使用 `Unsafe` 类的方法，而是通过 `java.util.concurrent` 包间接使用。例如，`Unsafe` 类中的 `compareAndSwap` 方法（在 Java 9+ 中更名为 `compareAndSet` 或 `compareAndExchange` 方法）在 X86_64 体系架构中会被替换为 `lock cmpxchg` 指令，即原子性更新指令。

除了 `Unsafe` 类的方法外，HotSpot 虚拟机中的 intrinsic 还包括以下几种：
1. **`StringBuilder` 和 `StringBuffer` 类的方法**：HotSpot 虚拟机会优化这些方法构造字符串的方式，以尽量减少需要复制内存的情况。
2. **`String` 类、`StringLatin1` 类、`StringUTF16` 类和 `Arrays` 类的方法**：HotSpot 虚拟机会使用 SIMD 指令对这些方法进行优化。例如，`Arrays.equals(byte[], byte[])` 方法原本是逐个字节比较，在使用 SIMD 指令后，可以放入 16 字节的 XMM 寄存器中（甚至是 64 字节的 ZMM 寄存器中）批量比较。
3. **基本类型的包装类、`Object` 类、`Math` 类、`System` 类中各个功能性方法，反射 API、`MethodHandle` 类中与调用机制相关的方法，压缩、加密相关方法**：这部分 intrinsic 较简单，这里不再详细展开。感兴趣的读者可以自行查阅资料或在文末留言。

如果你想知道 HotSpot 虚拟机定义的所有 intrinsic，可以直接查阅 OpenJDK 代码。[Java 12 的 intrinsic 列表](https://hg.openjdk.java.net/jdk/jdk12/file/5c7b5a0d5f5e/src/hotspot/share/runtime/intrinsic.cpp) 和 [Java 8 的 intrinsic 列表](https://hg.openjdk.java.net/jdk8/jdk8/hotspot/file/tip/src/share/vm/runtime/intrinsic.cpp) 可供参考。

### 总结与实践

今天我介绍了 HotSpot 虚拟机中的 intrinsic。HotSpot 虚拟机会将标注了 `@HotSpotIntrinsicCandidate` 注解的方法调用替换为基于特定 CPU 指令的高效实现。具体来说，intrinsic 的实现有两种：一是不常见的桩程序，可以在解释执行或即时编译生成的代码中使用；二是特殊的 IR 节点。即时编译器将在方法内联过程中，将对 intrinsic 的调用替换为这些特殊的 IR 节点，并最终生成指定的 CPU 指令。

HotSpot 虚拟机定义了三百多个 intrinsic。其中比较特殊的有 `Unsafe` 类的方法，基本上使用 `java.util.concurrent` 包便会间接使用到 `Unsafe` 类的 intrinsic。除此之外，`String` 类和 `Arrays` 类中的 intrinsic 也比较特殊。即时编译器将为之生成非常高效的 SIMD 指令。

在今天的实践环节中，你可以体验一下 `Integer.bitCount` intrinsic 带来的性能提升。以下是示例代码：

```java
// time java Foo
public class Foo {
    public static int bitCount(int i) {
        // HD, Figure 5-2
        i = i - ((i >>> 1) & 0x55555555);
        i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);
        i = (i + (i >>> 4)) & 0x0f0f0f0f;
        i = i + (i >>> 8);
        i = i + (i >>> 16);
        return i & 0x3f;
    }

    public static void main(String[] args) {
        int sum = 0;
        for (int i = Integer.MIN_VALUE; i <= Integer.MAX_VALUE; i++) {
            sum += bitCount(i);
        }
        System.out.println(sum);
    }
}
```

### 逃逸分析

我们知道，Java 中 `Iterable` 对象的 foreach 循环遍历是一个语法糖，Java 编译器会将该语法糖编译为调用 `Iterable` 对象的 `iterator` 方法，并用所返回的 `Iterator` 对象的 `hasNext` 和 `next` 方法来完成遍历。

例如，下面的 Java 代码使用 foreach 循环遍历一个 `ArrayList` 对象，其等价代码如下所示：

```java
public void forEach(ArrayList list, Consumer f) {
    Iterator iter = list.iterator();
    while (iter.hasNext()) {
        Object obj = iter.next();
        f.accept(obj);
    }
}
```

以下是涉及的 `ArrayList` 代码。可以看到，`ArrayList.iterator` 方法将创建一个 `ArrayList$Itr` 实例。

```java
public class ArrayList ... {
    public Iterator iterator() {
        return new Itr();
    }

    private class Itr implements Iterator {
        int cursor;       // index of next element to return
        int lastRet = -1; // index of last element returned; -1 if no such
        int expectedModCount = modCount;

        public boolean hasNext() {
            return cursor != size;
        }

        @SuppressWarnings("unchecked")
        public E next() {
            checkForComodification();
            int i = cursor;
            if (i >= size)
                throw new NoSuchElementException();
            Object[] elementData = ArrayList.this.elementData;
            if (i >= elementData.length)
                throw new ConcurrentModificationException();
            cursor = i + 1;
            return (E) elementData[lastRet = i];
        }

        final void checkForComodification() {
            if (modCount != expectedModCount)
                throw new ConcurrentModificationException();
        }
    }
}
```

因此，有些同学认为应当避免在热点代码中使用 foreach 循环，并且直接使用基于 `ArrayList.size` 和 `ArrayList.get` 的循环方式，以减少对 Java 堆的压力。以下是示例代码：

```java
public void forEach(ArrayList list, Consumer f) {
    for (int i = 0; i < list.size(); i++) {
        f.accept(list.get(i));
    }
}
```

希望这些改进使文档更加清晰、连贯和专业。