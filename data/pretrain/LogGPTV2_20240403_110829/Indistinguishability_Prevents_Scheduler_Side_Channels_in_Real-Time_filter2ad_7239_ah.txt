privacy in linear distributed control systems: Entropy minimizing mechanisms
and performance tradeoffs. IEEE Transactions on Control of Network Systems 4, 1
(2017), 118–130.
[60] Reinhard Wilhelm, Jakob Engblom, Andreas Ermedahl, Niklas Holsti, Stephan
Thesing, David Whalley, Guillem Bernat, Christian Ferdinand, Reinhold Heck-
mann, Tulika Mitra, Frank Mueller, Isabelle Puaut, Peter Puschner, Jan Staschulat,
and Per Stenström. 2008. The Worst-Case Execution-Time Problem—Overview of
Methods and Survey of Tools. ACM Transactions on Embedded Computing Systems
7, 3, Article 36 (May 2008), 53 pages. https://doi.org/10.1145/1347375.1347389
[61] M. Yoon, S. Mohan, C. Chen, and L. Sha. 2016. TaskShuffler: A Schedule Random-
ization Protocol for Obfuscation against Timing Inference Attacks in Real-Time
Systems. In 2016 IEEE Real-Time and Embedded Technology and Applications
Symposium (RTAS). 1–12. https://doi.org/10.1109/RTAS.2016.7461362
[62] Man-Ki Yoon, Bo Liu, Naira Hovakimyan, and Lui Sha. 2017. VirtualDrone:
virtual sensing, actuation, and communication for attack-resilient unmanned
aerial systems. In Proceedings of the 8th International Conference on Cyber-Physical
Systems. ACM, 143–154.
[63] Man-Ki Yoon, Mengqi Liu, Hao Chen, Jung-Eun Kim, and Zhong Shao. 2021.
Blinder: Partition-Oblivious Hierarchical Scheduling. In 30th USENIX Security
Symposium (USENIX Security 21). USENIX Association. https://www.usenix.org/
conference/usenixsecurity21/presentation/yoon
[64] Yuting Zhang and Richard West. 2006. Process-Aware Interrupt Scheduling and
Accounting. In Proc. of the 27th IEEE International Real-Time Systems Symposium.
A PROOF OF THEOREM 4.3
Proof. Let R 𝐽 (𝜏𝑖, 𝑗) = {R(𝜏𝑖, 𝑘)| 𝑗 ≤ 𝑘  (𝑠𝑖𝑧𝑒𝑎𝑟𝑟𝑎𝑦 − 1) then
𝑠𝑎𝑚𝑝𝑙𝑒 = −𝑎𝑟𝑟𝑎𝑦𝑃𝑃𝐹 [𝑟𝑎𝑑𝑖𝑑𝑥 − 𝑠𝑖𝑧𝑒𝑎𝑟𝑟𝑎𝑦]
𝑠𝑎𝑚𝑝𝑙𝑒 = 𝑎𝑟𝑟𝑎𝑦𝑃𝑃𝐹 [𝑟𝑎𝑑𝑖𝑑𝑥]
4
5 else
6
7 return 𝑠𝑎𝑚𝑝𝑙𝑒
Figure 12: Chart of the percent of function (PPF) based on a
Laplace distribution with 𝜖𝑖 = 100, Δ𝜂𝑖 = 190 and 𝐽𝑖 = 16 (the
same as that shown in Figure 4(b)). The dash line represents
the true PPF curve and the bars are reconstructed by the 100
PPF points stored in the PPF-based distribution array con-
verted using Algorithm 1.
B A LAPLACE RNG IN LINUX KERNEL
To create a Laplace distribution-based random number generator
in the Linux kernel, we convert the distribution’s PPF into an array
to store in the kernel code by using Algorithm 1. This algorithm
takes as input a function of PPF of the target distribution (centered
at 0) and the desired number of the points (𝑠𝑡𝑒𝑝𝑠) to convert into
an integer array as the output (𝑎𝑟𝑟𝑎𝑦𝑃𝑃𝐹 ). In this algorithm, the
PPF function takes as input a percentile value (ranged from 0 to
1.0) and gives the corresponding distribution sample value at the
given percentile. An example of the PPF function is provided in
Figure 12 as the dash curve. Line 3 computes the resolution of
the percentage each point in the array represents. Line4 to line
8 iterate through each of the computed percentile to obtain and
store the corresponding percent point value in the output array.
Line 9 returns the array which stores PPF points above the 50-th
percentile. In other words, the array contains only half part of the
distribution (as demonstrated by the bars shown in Figure 12). It is
done to save memory space as a Laplace distribution is symmetric.
We then use Algorithm 2 to obtain a random number from the PPF
array.
Algorithm 2 takes the aforementioned PPF array (𝑎𝑟𝑟𝑎𝑦𝑃𝑃𝐹 ) as
input and draws a random number that is equivalent to a random
draw from the underlying distribution. Line 2 obtains a random
number from a common random number generator (based on a