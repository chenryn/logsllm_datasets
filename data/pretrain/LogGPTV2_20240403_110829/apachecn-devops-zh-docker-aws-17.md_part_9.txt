VolumeBindingMode: Immediate
Events: 
```
创建存储类后，使用`kubectl patch`命令向存储类添加注释，将该类配置为默认类。可以看到，当运行`kubectl describe sc/gp2`命令查看存储类的详细信息时，`IsDefaultClass`属性被设置为`Yes`，确认新创建的类是集群的默认存储类。
有了这一点，**到多包**应用的 Kubernetes 配置现在有了一个默认存储类，可以应用于`todobackend-data`持久卷声明，该声明将基于存储类参数提供类型为`gp2`的 EBS 卷。
The `eksServiceRole` IAM role that you created earlier in this chapter includes the `AmazonEKSClusterPolicy` managed policy, which grants your EKS cluster the ability to manage EBS volumes. If you choose to implement your own custom IAM policies for the EKS service role, you must ensure that you include the various EC2 IAM permissions for managing volumes, such as `ec2:AttachVolume`, `ec2:DetachVolume`, `ec2:CreateVolumes`, `ec2:DeleteVolumes`, `ec2:DescribeVolumes`, and `ec2:ModifyVolumes` (this is not an exhaustive list). See [https://docs.aws.amazon.com/eks/latest/userguide/service_IAM_role.html](https://docs.aws.amazon.com/eks/latest/userguide/service_IAM_role.html) for details on the full list of IAM permissions that are granted by AWS-defined EKS service roles and managed policies.
# 配置对 AWS 弹性负载平衡器的支持
在本章的前面，当您为 todo back and 应用定义 Kubernetes 配置时，您为 todo back and 应用创建了一个类型为`LoadBalancer`的服务。我们讨论了负载平衡器的实现细节是特定于您的 Kubernetes 集群部署到的平台的，在 Docker Desktop 的情况下，Docker 提供了他们自己的负载平衡器组件，该组件允许服务暴露给您的开发机器上的本地网络接口。
使用 EKS 时，好消息是您不需要做任何事情来支持类型为`LoadBalancer`的服务–您的 EKS 集群将自动创建一个 AWS 弹性负载平衡器并将其与每个服务端点相关联，其中`AmazonEKSClusterPolicy`托管策略为此授予所需的 IAM 权限。
Kubernetes 确实允许您通过配置*注释*来配置`LoadBalancer`类型的特定于供应商的功能，这是一个元数据属性，给定的供应商在其目标平台上可以理解该属性，如果在不同的平台上部署，例如您的本地 Docker Desktop 环境，则可以忽略该属性。您可以在[https://kubernetes . io/docs/concepts/services-networking/service/# publishing-services-service-type](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types)上阅读关于这些注释的更多信息，下面的示例演示了如何将特定于 AWS 弹性负载平衡器的几个注释添加到`todobackend/k8s/app/deployment.yaml`文件中的服务定义中:
```
apiVersion: v1
kind: Service
metadata:
  name: todobackend
  annotations:
 service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
 service.beta.kubernetes.io/aws-load-balancer-connection-draining-enabled: "true"
 service.beta.kubernetes.io/aws-load-balancer-connection-draining-timeout: "60"
spec:
  selector:
    app: todobackend
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8000
  type: LoadBalancer
---
...
...
```
在前面的示例中，我们添加了以下注释:
*   `service.beta.kubernetes.io/aws-load-balancer-backend-protocol`:这配置后端协议。值`http`确保在传入请求上设置`X-Forward-For`头，以便您的网络应用可以跟踪客户端的 IP 地址。
*   `service.beta.kubernetes.io/aws-load-balancer-connection-draining-enabled`:这将启用连接排放。
*   `service.beta.kubernetes.io/aws-load-balancer-connection-draining-timeout`:指定连接清空超时。
需要注意的一点是，注释期望每个值都是一个字符串值，因此请确保引用布尔值，如`"true"`和`"false"`，以及任何数值，如`"60"`，如前面的代码所示。
# 部署示例应用
现在，您已经准备好将示例应用部署到 AWS，您可以通过首先切换到 todobackend 存储库并确保使用您在本章前面创建的`eks`上下文来完成:
```
todobackend> kubectl config use-context eks
Switched to context "eks".
todobackend> kubectl config get-contexts
CURRENT   NAME                 CLUSTER                      AUTHINFO             NAMESPACE
          docker-for-desktop   docker-for-desktop-cluster   docker-for-desktop
*         eks                  eks-cluster                  aws
```
# 创造机密
回想一下，应用和数据库服务都依赖于我们在本地 Docker Desktop 上下文中手动创建的机密，因此您首先需要在您的 EKS 上下文中创建这些机密:
```
> kubectl create secret generic todobackend-secret \
 --from-literal=MYSQL_PASSWORD="$(openssl rand -base64 32)" \
 --from-literal=MYSQL_ROOT_PASSWORD="$(openssl rand -base64 32)" \
 --from-literal=SECRET_KEY="$(openssl rand -base64 50)"
secret "todobackend-secret" created
```
# 部署数据库服务
现在，您可以部署数据库服务，该服务将根据您之前创建的默认存储类的配置，创建一个由 EBS 支持的新持久卷:
```
> kubectl apply -f k8s/db
service "todobackend-db" created
deployment.apps "todobackend-db" created
persistentvolumeclaim "todobackend-data" created
> kubectl get pv
NAME                                      CAPACITY STATUS  CLAIM                     STORAGECLASS
pvc-18ac5d3f-925c-11e8-89e1-06186d140068  8Gi      Bound   default/todobackend-data  gp2 
```
您可以看到创建了一个持久卷，如果您浏览到 AWS 控制台中的**服务** | **EC2** ，并从左侧的弹性块存储菜单中选择**卷**，您应该可以看到持久值对应的 EBS 卷:
![](img/30dc1bb5-7f02-4b95-9203-d31dc5359383.png)
查看 EBS 卷
请注意，Kubernetes 用许多标记来标记 EBS 卷，这些标记允许容易地识别哪个持久卷和持久卷声明与它相关联的给定 EBS 卷。
在 Kubernetes 仪表板中，您可以通过选择**工作负载** | **部署:**来验证`todobackend-db`部署正在运行
![](img/112c5cad-3258-4358-b836-c1fe352f41fc.png)
查看 EBS 卷
# 部署应用服务
数据库服务就绪后，您现在可以继续部署应用:
```
> kubectl apply -f k8s/app
service "todobackend" created
deployment.apps "todobackend" created
job.batch "todobackend-migrate" created
```
部署应用将执行以下任务:
*   创建运行数据库迁移的`todobackend-migrate`作业
*   创建`todobackend`部署，它运行一个 collectstatic initContainer，然后运行主 todobackend 应用容器
*   创建`todobackend`服务，该服务将部署带有 AWS ELB 前端的新服务
在 Kubernetes 仪表板中，如果您选择**发现和负载平衡** | **服务**并选择**到后台处理**服务，您可以查看该服务的每个内部端点，以及外部负载平衡器端点:
![](img/caeb39a5-d2a2-4864-b707-b2822a511d4f.png)
Viewing the todobackend service in the Kubernetes dashboard You can also obtain the external endpoint URL by running the `kubectl describe svc/todobackend` command.
如果单击外部端点 URL，您应该能够验证 todobackend 应用是否完全正常工作，所有静态内容是否正确显示，以及是否能够添加、删除和更新应用数据库中的 Todo 项目:
![](img/15a03619-bdd8-4854-875c-955fbad7f459.png)
Verifying the todobackend application
# 分解示例应用
分解示例应用非常简单，如下所示:
```
> kubectl delete -f k8s/app
service "todobackend" deleted
deployment.apps "todobackend" deleted
job.batch "todobackend-migrate" deleted
> kubectl delete -f k8s/db
service "todobackend-db" deleted
deployment.apps "todobackend-db" deleted
persistentvolumeclaim "todobackend-data" deleted
```
完成此操作后，您应该能够验证与 todo back and 服务关联的弹性负载平衡器资源以及 todo back and 数据库的 EBS 卷是否已被删除，前提是您已将默认存储类的回收策略配置为“删除”。当然，您还应该删除您在本章前面创建的工作节点栈和 EKS 集群栈，以避免不必要的费用。
# 摘要
在本章中，您学习了如何使用 Kubernetes 和 AWS 弹性 Kubernetes 服务(EKS)部署 Docker 应用。Kubernetes 已经凭借强大的开源社区成为领先的容器管理平台之一，随着 AWS 现在用 EKS 服务支持 Kubernetes 客户，Kubernetes 肯定会变得更加受欢迎。
您首先学习了如何在 Docker Desktop 中利用对 Kubernetes 的本机支持，这使得在本地启动和运行 Kubernetes 变得非常容易。您学习了如何创建各种核心 Kubernetes 资源，包括 pods、部署、服务、机密和作业，这些资源为在 Kubernetes 中运行应用提供了基本的构建块。您还学习了如何配置对持久存储的支持，利用持久卷声明将应用的存储需求从底层存储引擎中抽象出来。
然后向您介绍了 EKS，并学习了如何创建 EKS 集群和相关的支持资源，包括运行您的工作节点的 EC2 自动扩展组。您建立了对 EKS 集群的访问，并通过部署 Kubernetes 仪表板来测试集群是否正常工作，该仪表板为您的集群提供了丰富而强大的管理用户界面。
最后，您继续将 todobackend 应用部署到 EKS，其中包括与用于外部连接的 AWS 弹性负载平衡器(ELB)服务和用于提供持久存储的弹性块存储(EBS)的集成。这里的一个重要考虑是，除了添加一些注释来控制 todobackend 服务负载平衡器的配置之外，我们不需要修改之前在本地部署到 Docker Desktop 环境时创建的 Kubernetes 配置(这些注释在使用 Docker Desktop 时被忽略，因此被认为是“安全的”特定于供应商的配置元素)。您应该始终努力实现这一目标，因为它确保您的应用在不同的 Kubernetes 环境中具有最大的可移植性，并且可以独立于底层的 Kubernetes 平台轻松部署，无论是本地开发环境、AWS EKS 还是谷歌 Kubernetes 引擎(GKE)。
好吧，所有美好的事情都必须结束，现在是我说恭喜和感谢你完成这本书的时候了！很高兴写这本书，我希望你已经学会了如何利用 Docker 和 AWS 的力量来测试、构建、部署和操作你自己的容器应用。
# 问题
1.  对/错:Kubernetes 是 Docker 桌面 CE 的一个原生特性。
2.  您可以使用 commands 属性定义一个自定义命令字符串在 pod 定义中运行，并注意到 entrypoint 脚本容器不再执行。你如何解决这个问题？
3.  对/错:Kubernetes 包括三种节点类型——管理器、工作器和代理。
4.  对/错:Kubernetes 提供了与 AWS 应用负载平衡器的集成。
5.  对/错:Kubernetes 支持将 EBS 卷重新定位到集群中的其他节点。
6.  您可以使用什么组件向 web 应用公开 Kubernetes API？
7.  对/错:Kubernetes 支持与弹性容器注册表的集成。
8.  什么 Kubernetes 资源提供了可用于连接给定应用的多个实例的虚拟 IP 地址？
9.  什么 Kubernetes 资源适合运行数据库迁移？
10.  对/错:EKS 同时管理 Kubernetes 管理器节点和工作器节点。
11.  使用 EKS 时，默认存储类别提供什么类型的 EBS 存储？
12.  您希望每次部署 pod 时都运行一个任务，该任务需要在 pod 中启动主应用之前运行。你将如何实现这一点？
# 进一步阅读
有关本章所涵盖主题的更多信息，您可以查看以下链接:
*   什么是立方？:# t0]https://kubrites . io/docs/concepts/overview/what-is-kubrites/
*   立方教程:[https://立方教程. io/docs/tutorials/](https://kubernetes.io/docs/tutorials/)
*   kubernetes Pods:[https://kubernetes . io/docs/概念/工作负载/Pods/Pods-概述/](https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/)
*   Kubernetes 部署:[https://kubernetes . io/docs/概念/工作负载/控制器/部署/](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/)
*   kubernetes Jobs:[https://kubernetes . io/docs/concepts/workloads/controller/Jobs-运行到完成/](https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/)
*   Kubernetes 服务:[https://kubernetes . io/docs/concepts/Services-networking/service/](https://kubernetes.io/docs/concepts/services-networking/service/)
*   服务和 pod 的 DNS:[https://kubernetes . io/docs/concepts/Services-networking/DNS-pod-service/](https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/)
*   Kubernetes 机密:[https://kubernetes.io/docs/concepts/configuration/secret/](https://kubernetes.io/docs/concepts/configuration/secret/)
*   Kubernetes 卷:[https://kubernetes.io/docs/concepts/storage/volumes/](https://kubernetes.io/docs/concepts/storage/volumes/)
*   Kubernetes 持久卷:[https://kubernetes . io/docs/concepts/storage/Persistent-Volumes/](https://kubernetes.io/docs/concepts/storage/persistent-volumes/)
*   Kubernetes 存储类:[https://kubernetes . io/docs/concepts/Storage/Storage-class/](https://kubernetes.io/docs/concepts/storage/storage-classes/)
*   动态卷资源调配:[https://kubernetes . io/docs/concepts/storage/动态资源调配/](https://kubernetes.io/docs/concepts/storage/dynamic-provisioning/)
*   Kubernetes 命令参考:[https://Kubernetes. io/docs/reference/generated/Kubernetes/Kubernetes 命令](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands)
*   亚马逊 EKS 用户指南:[https://docs . AWS . Amazon . com/eks/latest/User Guide/what-is-eks . html](https://docs.aws.amazon.com/eks/latest/userguide/what-is-eks.html)
*   EKS 优化 AMI:[https://docs . AWS . Amazon . com/eks/latest/user guide/eks-优化-ami.html](https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html)
*   EKS 集群云信息资源参考:[https://docs . AWS . Amazon . com/AWS cloudinformation/latest/user guide/AWS-Resource-eks-Cluster . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-eks-cluster.html)