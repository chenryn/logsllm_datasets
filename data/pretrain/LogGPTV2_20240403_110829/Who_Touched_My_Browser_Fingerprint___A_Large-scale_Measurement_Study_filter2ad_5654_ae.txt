lated although the features themselves are not.
We show that although some features are not correlated directly,
the dynamics of those features may be implicitly. Our method-
ology of finding such correlation is as follows. We first rank all
the dynamics based on their popularity, i.e., the total number of
appearance, and then find dynamics in which two features come
together. We consider these two feature dynamics are potentially
correlated if these two features either do not come separately in
the dynamics database or appear less popular than the combined
one. We then manually inspect these two feature dynamics to un-
derstand whether they are correlated. Here are some examples of
such implicit correlations:
• Example 1: Cookie disabling/enabling is correlated with local-
Storage in Chrome Browser. That is, when cookie is enabled or
disabled in Chrome, localStorage will change as well. In total,
we have observed 347 Chrome instances that disable cookie and
localStorage together and 226 that enable them together. The
reason is that Chrome provides a single checkbox to disable
or enable both cookie and localStorage; interestingly, the dis-
abling/enabling of cookie and localStorage is not correlated in
378
IMC ’20, October 27–November 29, 2020, Virtual Event, USA
Song Li and Yinzhi Cao
(a) F1-Score
(b) Precision
(c) Recall
Figure 10: F1-Score, Precision and Recall of FP-Stalker for Top 10 Prediction (Note that we run both learning- and rule-based
FP-Stalker for 240 hours, which is ten full days; learning-based FP-Stalker is not scalable to a large dataset as acknowledged
in the paper as well).
Fingerprint 1:
User Agent: Mozilla/5.0 (Linux; Android 9; SM-N960U)
AppleWebKit/537.36 (KHTML, like Gecko)
Chrome/77.0.3865.92 Mobile Safari/537.36
...
Fingerprint 2:
User Agent: Mozilla/5.0 (X11; Linux x86_64)
AppleWebKit/537.36 (KHTML, like Gecko)
Chrome/77.0.3865.92 Mobile Safari/537.36
...
Fingerprint 1:
...
Support of Cookies: Yes
Support of localStorage: Yes
...
Fingerprint 2:
...
Support of Cookies: No
Support of localStorage: No
...
Fingerprint 1:
...
CPU Cores: 4
...
Fingerprint 2:
...
CPU Cores: 2
...
Fingerprint 1:
User Agent: Mozilla/5.0
(Linux; Android 7.0; SAMSUNG SM-J330F Build/NRD90M)
AppleWebKit/537.36 (KHTML, like Gecko)
SamsungBrowser/6.2 Chrome/56.0.2924.87
Mobile Safari/537.36
Fingerprint 2:
User Agent: Mozilla/5.0
(Linux; Android 7.0; SAMSUNG SM-G920F Build/NRD90M)
AppleWebKit/537.36 (KHTML, like Gecko)
SamsungBrowser/6.2 Chrome/56.0.2924.87
Mobile Safari/537.36
...
(a) A desktop page on a mobile browser
(b) Storages Disabled on Chrome
(c) Different CPU
Cores
(d) Two Browser Instances on Different Devices
Figure 11: False Positives and Negatives of both Rule- and Learning-based FP-Stalker ((a) and (b) are false negatives, as they
belong to the same browser instance but are not linked; (c) and (d) are false positives, as they are from different browser
instances but are linked together. We skip the same features between each 1 and 2 pair).
Firefox Browser, because there are two places to perform these
two actions.
• Example 2: The change of DirectX API levels in Firefox is cor-
related with Firefox updates among 57–60 on certain devices.
Specifically, we find the DirectX API level is downgraded to 9EX
when Firefox is updated to 58 or 59 on certain devices, and then
the level is back to 11 when Firefox is updated to 60. We suspect
that Firefox 57, a relatively buggy version [9], has some problem
using DirectX 11 on certain devices and therefore it falls back to
DirectX 9EX on Firefox 58 and 59. Then, Firefox 60 fixes some
bugs and therefore reuses DirectX 11.
• Example 3: The change of DirectX API levels in Chrome is cor-
related with Audio Card Sample Rate. Specifically, we find that
when Chrome’s GPU renderer is updated from Direct3D 9EX
to 11 on certain devices, the sample rate of its audio card will
also be updated from 44,100 to 48,000. The reason is that proba-
bly Chrome adopts DirectX to manage audio card and therefore
when DirectX is updated, audio card information is as well.
Except for those implicit correlations, Table 3 also shows cor-
relations related to browser or OS updates. There are three major
types of correlated features: canvas rendering results, font list and
plugin list. The canvas rendering results is the most common corre-
lation, because many browser and OS updates include new emojis
or text rendering. Specifically, we classify the dynamics in canvas
rendering results into four subtypes: text width, text details, emoji
types and emoji rendering. Text width means the width of the text
part of canvas rendering, which may changes if one letter is ren-
dered thinner or thicker; text details means some texture details of
the letter rendering; emoji types means the introduction of a new
emoji type; emoji rendering means some small changes, such as
smoothing of emojis.
Advice 7 [Better Fingerprinting Tool]: Existing fingerprint-
ing tools may include implicit or explicit feature correla-
tions to improve linking performance.
Insight 4: The timing of some fingerprint dynamics are cor-
related with real-world events, such as the release of browser
or OS updates.
Specifically, we show such trends in Figure 12, where the x-axis
is our deployment period and y-axis is the percentage of browser
instances with corresponding browser update related dynamics. For
example, 66 in Chrome sub-figure refers to fingerprint dynamics
that are related to an update to Chrome version 66. We marked each
379
Who Touched My Browser Fingerprint?
IMC ’20, October 27–November 29, 2020, Virtual Event, USA
browser may provide a piece of false, or called inconsistent, in-
formation in our study and our tool actually adopts this type of
inconsistency as a feature in the fingerprint. The number of such
inconsistencies is very small (less than 1% of browser instances).
Now let us look at some of these reasons that lead to inconsistencies.
First, the user may want to request a different version of a web page
on the device, e.g., a mobile device requesting for a desktop page.
This is the major reason in our measurement study that leads to
inconsistency and our analysis has already considered such scenar-
ios. Second, a browser, such as Tor Browser and Brave Browser, or
a privacy-preserving browser extension may conceal the browser’s
identity due to privacy reasons. The number of users having these
browsers or extensions are relatively small, thus having minimum
impacts on our measurement results. We will leave a measurement
of such privacy-preserving tools as our future work.
Third, we discuss the limitations of adopting browser IDs as
the ground truth. Although we consider it as a big improvement
over user ID and cookies, the adoption of browser ID leads to false
positives and negatives. For example, if one user has two identical
devices, we will falsely assign the same browser ID to browsers on
those two devices. For another example, there might exist some
rarely happened user agent changes that are not captured during
our study, leading to false negatives.
Fourth, we discuss attack traffic on the deployment website—This
is an orthogonal problem to the paper. Because the recorded traffic
belongs to users that are logged into the websites, the possibility of
attack traffic, such as credential stuffing, is low. Specifically, most
traffic related to credential stuffing is trying to log in with account
credentials instead of visiting the website normally.
Lastly, we talk about the usage of browser fingerprints in the
real-world. Although it is well known that browser fingerprints can
be used for web tracking, which may violate user privacy, recent
adoption of browser fingerprinting is sometimes to the opposite in
the realm of two factor authentication and bot detection [4]. The
intuition is simple: Browser fingerprints, just like cookies, have
two sides: one for tracking and the other for authentication. In
this measurement paper, we took a neutral view on how browser
fingerprints are used, but focused on how fingerprints may change
over time. It is the responsibility of those who deploy fingerprinting
to decide its usage and we give advices on both sides in the paper.
6 RELATED WORK
In this section, we discuss related work including the closest one
discussing fingerprint evolution/dynamics, web tracking and anti-
tracking.
6.1 Fingerprint Evolution/Dynamics
FP-Stalker [40] is the first work that considers fingerprint evolution
and designs an approach to link different browser fingerprints even
if they evolve over time. The major contribution of FP-Stalker is the
design and implementation of novel fingerprint linking algorithms,
i.e., both rule-based and learning-based approaches. To validate
their algorithms, FP-Stalker involves a relatively small dataset with
1,905 browser instances—as opposed to over 1 million in our paper
and over 300,000 if we only count users visiting the deployment
380
Figure 12: Percentage of browser instances with dynamics
related to browser updates over the entire period of our de-
ployment
important real-world event during our deployment period, such as
Chrome updates between 63 and 67, Firefox updates between 58
and 61, and Safari updates between 10.1.2 and 11.1.
There are two things worth noting. First, after each browser
release, there emerges a peak of fingerprint dynamics that lead to
an update to the latest version. This trend is the same for all three
browsers marked in the figure. Such updates are not immediate,
which usually take months to finish. Second, the updates for Safari
is usually slower than the ones for Firefox and Chrome. The reason
is that Firefox and Chrome updates are automatic—a user just needs
to restart the browser and update their browsers. As a comparison,
Safari updates require a user to click several buttons in app store
and therefore some users are reluctant of doing so.
Advice 8 [Better Fingerprinting Tool]: Existing fingerprint-
ing tools may consider the timings of real-world events to
improve linking performance.
5 DISCUSSIONS
We discuss several commonly-raised issues, such as ethics and fea-
ture inconsistency, in this paper. First, we obtained approval from
our Institutional Review Board (IRB) prior to conducting the re-
search. Our collected data via the deployment website may contain
human information. Specifically, the deployment website has an
agreement, i.e., a div element pointing to a legal document, stating
that the website may collect user information including browser
fingerprints and asking the users for their consent. During the sign-
up stage, the users will also see an additional webpage asking for
their consent of collecting fingerprint information. Since all the
fingerprinting data are accompanied with an anonymized user ID,
all the users in our study have at least seen the agreement twice
and agreed to be collected. That said, all the ethic issues are handled
through the deployment website via a standard procedure and the
collection process obeys the EU privacy legislation, e.g., GDPR,
which states that websites need to get visitors’ consent to store or
retrieve information on a computer, smartphone or tablet.
Second, feature inconsistencies have minimum impacts on our
measurement study due to their small numbers. Specifically, a
0%20%40%60%80%100%Chrome 63 Chrome 64 Chrome 65 Chrome 66 Chrome 67 Others6766656463620%20%40%60%80%100%Firefox 58 Firefox 59 Firefox 60 Firefox 61 Percentage of Changed Browser InstancesOthers6160595857520%20%40%60%80%100%iOS 11.2.1 iOS 11.2.2 iOS 11.2.5 iOS 11.2.6 iOS 11.3 iOS 11.4 11.411.311.2.611.2.511.2.211.2.1OthersMonth 1Month 2Month 3Month 4Month 5Month 6Month 7Month 8DateIMC ’20, October 27–November 29, 2020, Virtual Event, USA
Song Li and Yinzhi Cao
website for more than seven times, i.e., following their criteria—
collected from a group of users who install their browser extension.
After that, Pugliese et al. [37] also conduct another small-scale
study with 88,088 fingerprints belonging to 1,304 users to under-
stand users’ trackability. Together with the study, Pugliese et al.
propose a method, called feature stemming, to improve feature
stability—which performs better than FP-Stalker on the FP-Stalker
dataset. There are two potential issues of feature stemming. First,
we believe that although feature stemming improves stability, there
are still dynamics that need additional linking. Consider the exam-
ple of a user requesting a desktop page on a mobile device. The
user agents of two visits are drastically different, which cannot
be captured by feature stemming. Second, feature stemming, e.g.,
stripping off version substrings, increases the anonymous set size
of fingerprints, thus reducing fingerprintability in general.
As a general comparison with prior works on fingerprint evo-
lution, our measurement study is in a much larger scale and also
makes observations related to privacy and security, e.g., the leaks
of software updates. Furthermore, our measurement study shows
that both the learning- and rule-based FP-Stalker performs poorly
in terms of F1-Score and matching speed in our large-scale dataset.
6.2 Web Tracking
We present related work in web tracking from two perspectives:
cookie or super cookie-based and then browser fingerprinting. As
a general comparison, our measurement study is the first work
that classifies and measures dynamics in browser fingerprinting, a
special, second-generation web tracking, and then draws interesting
observations, such as dynamics-related privacy leaks.
6.2.1 Cookie or Super Cookie based Tracking. Many measurement
studies have been proposed before on the effectiveness or severe-
ness of Web tracking in general, such as these based on cookies
or other server-set identifiers. For example, Roesner et al. [38] per-
forms a comprehensive measurement study on web tracking and
proposes a classification framework. Lerner et al. [26] conduct an
archaeological study by measuring web tracking from 1996 to 2016
in Internet time machine. Soltani et al. and Ayenson et al. measure
how tracking companies can use non-cookie based stateful tracking
to regenerate deleted cookies [13, 39]. Metwalley et al. [28] adopt
an unsupervised method to detect user identifiers that could be
adopted for tracking purpose. Krishnamurthy et al. [21–24] gauge
the harm of web tracking and conclude that trackers may obtain
personal information, such as username and emails.
6.2.2 Browser Fingerprinting. Browser fingerprinting is the second
generation of web tracking. Yen et al. and Nikiforakis et al., as one
of the few early studies, discuss and measure the effectiveness of
fingerprinting [34, 47]. Acar et al. [11] conduct a large-scale study
canvas fingerprinting, evercookies, and the use of “cookie syncing”.
FPDetective [12] and Fifield el al. [19] both focus on the list of font
perspective in browser fingerprinting, e.g., FPDetective performs a
measurement study of millions of most popular websites using fonts
in the fingerprints. Similarly, Englehardt et al. [18] also conduct a
very large-scale study on one million websites about browser finger-
printing, which results in many new features, such as AudioContext.
Cao et al. [16] and Boda et al. [14] study a different angle of browser
fingerprinting, i.e., cross-browser fingerprinting. Vastel et al. [41]
study the inconsistencies in browser fingerprints and shows such
inconsistency brings additional entropy for fingerprinting. There
are also many works focusing on different perspectives of browser
fingerprinting, such as canvas-based [30], JavaScript engine [29, 31],
and hardware-based [32]. Particularly, Laperdrix et al. [25] designs
a website, called AmIUnique, and conduct a comprehensive study
on 17 attributes of browser fingerprinting.
In terms of measurement study, Gómez-Boix et al. [20], similar
to our study, deployed a fingerprinting tool on a real-world website
and studied the effectiveness of browser fingerprinting. Note that
their study adopts cookies as identifiers to differentiate browser
instances. However, to the contrary, our study reveals that both
users and browsers, such as Safari powered by Intelligent Tracking
Preventing, do delete cookies very often and therefore cookies
are unreliable in terms of serving as a ground-truth identifier. In
addition, their study focuses on the fingerprinting effectiveness but
not dynamics.
6.3 Anti-tracking
We also discuss existing anti-tracking from two aspects: defense
against cookie-based and anti-fingerprinting.
6.3.1 Defense against Cookie- or Supercookie-based Tracking. Share-
MeNot [38] is a browser add-on to defend against social media
button tracking, such as Facebook Like button. Private browsing
mode [44, 46] creates an isolated browser profile from the normal
ones so that the web user’s information, such as cookies, are not
preserved. Similarly, TrackingFree [35] proposes to isolate user’s
website visits via an indegree-bounded graph. The Do Not Track
(DNT) [43] header, an opt-out approach, allows a user to ask web-
sites not to track. On the other hand, Meng et al. [27] design a
client-side policy that empowers users to control whether to be
tracked. Intelligent Tracking Prevention [6] is an anti-tracking ap-
proach proposed by WebKit to automatically purge out tracking
cookies based on an ML-based detector.
6.3.2 Anti-fingerprinting. Tor Browser [36], a privacy-preserving
browser, make many fingerprinting features uniform so that they
stay the same across browsers. In addition to Tor Browser, which
strictly pursue privacy over functionality, some other browsers
often provide a privacy-enhancing mode to protect users from