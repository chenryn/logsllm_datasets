 语句的关键元素。
这里需要指出的是，将源代码编译成汇编语言，并没有唯一正确的方法。熟悉由某一特定的编译器生成的代码，并不能保证你能够识别使用一种截然不同的编译器（或者是相同编译器系列的不同版本）编译的高级结构。更重要的是，不能仅仅因为 IDA 无法生成注释，就断定某段代码不是switch
 语句。和你一样，IDA 也更加熟悉某些编译器的输出。你不能完全依赖 IDA 的分析功能来识别常用的代码和数据结构，而应随时准备应用你掌握的技能：对给定汇编语言的了解、你的编译器知识以及正确解释一个反汇编代码清单的搜索技巧。
20.2 RTTI实现
在第8 章中，我们讨论了 C++ RTTI（运行时类型识别），并指出：编译器实现RTTI时并没有标准的方法。至于如何自动识别二进制文件中与 RTTI有关的结构，IDA 的这项功能同样因所使用的编译器而异。毫不奇怪，对于使用 Borland编译器编译的二进制文件，IDA 在这方面的功能最为强大。对自动识别微软 RTTI数据结构感兴趣的读者，可以尝试使用 IDA Palace1
 中Igor Skochinsky 的IDC 脚本或者 Sirmabus2
 中的Class Informer 插件，这将在第 23 章中深入讨论。
1. 参见http://old.idapalace.net/idc/ms_rtti.zip
 。
2. 参见http://www.openrce.org/blog/browse/sirmabus
 。
要了解某一特定编译器如何嵌入 C++ 类的类型信息，一种简单的方法是编写一个利用包含虚函数的类的简单程序。编译该程序后，你就可以将得到的可执行文件加载到 IDA 中，并搜索包含程序所使用的类的名称的字符串。无论使用什么编译器构建二进制文件，RTTI数据结构始终会包含一个指向字符串的指针，该字符串则包含它所代表的类的名称。使用数据交叉引用，你将可以定位一个指向这类字符串的指针，并在那里找到候选的 RTTI数据结构。最后，你需要将候选的RTTI结构与相关类的虚表关联起来。要完成这个任务，最好的办法是从候选的 RTTI结构回溯数据交叉引用，直到到达一个函数指针表（虚表）。
20.3 定位main函数
如果你足够幸运，拥有你想要分析的 C/C++ 程序的源代码，那么，最好将 main
 函数作为你分析的起点，因为从理论上讲，这里是执行开始的地方。在分析二进制文件时，这是一个不错的策略。但是，如我们所知，编译器/链接器（及库的使用）增加了其他一些在 main
 函数之前执行的代码，这使得问题更加复杂。因此，如果认为程序作者所写的 main
 函数就是一个二进制文件的入口点，这往往并不准确。
实际上，所有程序都有一个 main
 函数，这仅仅是一个 C/C++ 编译器约定，而非在编写程序时的一个无法变通的规则。如果你曾经编写过 Windows GUI 应用程序，那么你一定熟悉 main
 函数的WinMain
 变体。分析 C/C++ 以外的程序时，你会发现，其他语言对它们的入口点函数使用其他的名称。无论它叫做什么，我们将这类函数统称为 main
 函数。
在第12 章中，我们讨论了 IDA 签名文件的概念，如何生成这些文件以及它们的应用。IDA利用特殊的启动签名来识别一个程序的 main
 函数。如果IDA 能够根据其签名文件中的一个启动顺序匹配一个二进制文件的启动顺序，那么，IDA 就能够基于它对已匹配启动例程的行为的理解，定位一个程序的 main
 函数。这种方法非常有效，除非 IDA 无法将一个二进制文件中的启动序列与已知的签名匹配起来。一般而言，程序的启动代码与生成该代码的编译器及该代码所针对的平台密切相关。
如第12 章所述，启动签名被集中在一起，存储在特定于二进制文件类型的签名文件中。例如，PE加载器使用的启动签名存储在 pe.sig 文件中，而 MS-DOS 加载器使用的启动签名则存储在exe.sig 文件中。IDA 拥有给定二进制文件类型的签名文件，并不能完全保证它能够识别这类程序的main
 函数。由于编译器的种类极其繁多，IDA 不可能提供每一种可能的签名，也就不可能拥有每一种启动顺序。
对于许多文件类型，如 ELF 和Mach-O，IDA 根本不包含任何启动签名。因此，IDA 也就不可能使用签名来定位一个 ELF 二进制文件中的 main
 函数（尽管如果这个函数叫做 main
 ，IDA 就能够找到它）。
这一节讨论的重点是你让明白一个事实：有时候，你必须自己设法定位一个程序的 main
 函数。在这类情况下，你需要采取一些方法了解程序如何调用 main
 函数。以一个经过一定程度的模糊处理的二进制文件为例，遇到这类文件，IDA 肯定无法匹配一个启动签名，因为启动例程本身也经过模糊处理。如果你努力对该文件进行去模糊处理（第 21 章的主题），你可能不但需要自己定位main
 函数，而且需要定位原始的启动例程。
在使用传统 main
 函数1
 的C 和C++ 程序中，启动代码的一个责任是设置main
 所需的栈参数、整数argc
 （命令行参数的数量）、字符指针数组argv
 （一个指针数组，这里的指针指向包含命令行参数的字符串）以及字符指针数组 envp
 （一个由指向字符串的指针构成的数组，这些字符串包含在程序调用时设置的环境变量）。下面的代码摘自一个动态链接、去除符号的FreeBSD 8.0 二进制文件，它说明 gcc 生成的启动代码如何在 FreeBSD 系统上调用main
 函数：
1. Windows GUI 应用程序需要WinMain
 函数而非main
 函数。有关WinMain
 的文档资料，请访问http://msdn2.microsoft.com/en-us/library/ms633559.aspx
 。
.text:08048365          mov     dword ptr [esp], offset _term_proc ; func  
.text:0804836C       ➋ call    _atexit  
.text:08048371       ➌ call    _init_proc  
.text:08048376          lea     eax, [ebp+arg_0]  
.text:08048379          mov     [esp+8], esi  
.text:0804837D          mov     [esp+4], eax  
.text:08048381          mov     [esp], ebx  
.text:08048384       ➊  call    sub_8048400  
.text:08048389       ➎  mov     [esp], eax      ; status  
.text:0804838C       ➍  call    _exit
在这段代码中，结果表明，调用 sub_804840
 （➊）实际上就是调用 main
 函数。这段代码是典型的启动顺序，因为它在调用 main之前调用了初始化函数（_atexit
 ➋和_init_proc
 ➌），而在main
 函数返回后调用了_exit
 函数（➍）。调用_exit
 可确保程序在 main
 函数返回时完全终止，而不是在调用_exit
 后终止。注意，传递给_exit
 的参数（➎）是 main
 函数在EAX
 中返回的值，因此，程序的退出代码为 main
 函数的返回值。
如果前面的程序为静态链接且去除了符号，那么，这时的启动例程将与前面例子中的启动例程的结构相同。但是，没有一个库函数会使用对我们有用的名称。这时，main
 函数仍然会“脱颖而出”，因为它是唯一一个使用3 个参数调用的函数。当然，尽早应用 FLIRT 签名还有助于还原许多库函数的名称，并使 main
 函数和前面的例子中一样凸显出来。
在不同的平台上运行时，同一个编译器可能会生成截然不同的代码，为证明这一点，我们看下面这个例子。它同样使用 gcc 创建，是一个动态链接、去除符号的、Linux 系统上的Linux 二进制文件：
.text:080482B0 start              proc near  
.text:080482B0                    xor     ebp, ebp  
.text:080482B2                    pop     esi  
.text:080482B3                    mov     ecx, esp  
.text:080482B5                    and     esp, 0FFFFFFF0h  
.text:080482B8                    push    eax  
.text:080482B9                    push    esp  
.text:080482BA                    push    edx  
.text:080482BB                 ➊  push    offset sub_80483C0  
.text:080482C0                 ➋  push    offset sub_80483D0  
.text:080482C5                    push    ecx  
.text:080482C6                    push    esi  
.text:080482C7                 ➌  push    offset loc_8048384  
.text:080482CC                    call    ___libc_start_main  
.text:080482D1                    hlt  
.text:080482D1 start              endp
在这个例子中，start
 仅仅调用了一个函数：__libc_start_main
 。调用__libc_start_ main
 的目的是执行在前面的 FreeBSD 例子中执行的所有任务，包括调用 main
 函数并最终调用 exit
 。由于__libc_start_main
 是一个库函数，因此，如果它知道 main
 函数的确切位置，肯定是通过它的一个参数（这里它似乎有 8 个参数）获知的。很明显，其中的两个参数➊和➋是函数指针，而第三个参数➌是.text
 节中的某个位置的指针。在这个代码清单中，有几条关于哪一个函数可能为main
 函数的线索，因此，你需要分析这 3 个可能位置的代码，以正确确定 main
 函数的位置。这可能是一种有益的练习。你可能还记得，传递给__libc_start_main
 的第一个参数（在栈的最顶端，因而最后被压入）实际上是一个指向 main的指针。有两个因素阻止 IDA 将loc_8048384
 确定为函数（它可能名为sub_8048384
 ）。第一个因素是它从未被直接调用，因此，loc_8048384
 绝不会是一条调用指令的目标。第二个因素是，虽然 IDA 基于已识别函数的“序言”，提供了它们的“启发”（这也是 sub_80483C0
 和sub_80483D0
 被确定为函数的原因，即使它们同样从未被直接调用），但是，loc_8048384
 （main函数）处的函数并没有使用 IDA 能够识别的“序言”。这段“惹事生非”的“序言”（包括注释）如下所示：
.text:08048384 loc_8048384:                        ; DATA XREF: start+17↑o  
.text:08048384         lea     ecx, [esp+4]       ; address of arg_0 into ecx  
.text:08048388         and     esp, 0FFFFFFF0h    ; 16 byte align esp  
.text:0804838B         push    dword ptr [ecx-4]  ; push copy of return address  
.text:0804838E        ➊ push    ebp                ; save caller's ebp  
.text:0804838F        ➋ mov     ebp, esp           ; initialize our frame pointer  
.text:08048391         push    ecx                ; save ecx  
.text:08048392        ➌ sub     esp, 24h           ; allocate locals
很明显，这段“序言”包含一个使用 EBP 作为帧指针的函数的传统“序言”的所有要素。首先保存调用方的帧指针（➊），然后为当前函数设置帧指针（➋），最后为局部变量分配空间（➌）。IDA 的问题在于，这些操作并非作为函数中的前几项操作而发生，因此 IDA 的“启发”失效。这时，要手动创建一个函数，操作起来非常简单（Edit ▶Functions ▶Create Function），但是，你应该小心监视 IDA 的行为。就像它起初无法识别该函数一样，它可能同样无法确定该函数使用EBP 作为帧指针。你需要编辑这个函数（ALT+P ），迫使 IDA 相信该函数使用一个基于 BP的帧，并对专门用于保存寄存器和局部变量的栈字节的数量进行调整。
和FreeBSD 二进制文件一样，如果前面的 Linux实例碰巧为静态链接，并且去除了符号，那么，它的起始例程将不会有任何变化，只是__libc_start_main
 函数将失去它的名称。这时，基于gcc 的Linux启动例程仅调用一个函数，且该函数的第一个参数为 main
 函数的地址，你仍然能够正确定位 main
 函数。
在Windows 平台上，C/C++ 编译器的数量（因而启动例程的数量）要更多一些。令人奇怪的是，在 Windows 平台上，我们可以利用分析 gcc 在其他平台上的行为所获得的知识。下面的启动例程摘自一个 gcc/Cygwin 二进制文件：
.text:00401000 start                proc near  
.text:00401000  
.text:00401000 var_28               = dword ptr -28h  
.text:00401000 var_24               = dword ptr -24h  
.text:00401000 var_20               = dword ptr -20h  
.text:00401000 var_2                = word ptr -2  
.text:00401000  
.text:00401000                      push    ebp  
.text:00401001                      mov     ebp, esp  
.text:00401003                      sub     esp, 28h  
.text:00401006                      and     esp, 0FFFFFFF0h  
.text:00401009                      fnstcw  [ebp+var_2]  
.text:0040100C                      movzx   eax, [ebp+var_2]  
.text:00401010                      and     ax, 0F0C0h  
.text:00401014                      mov     [ebp+var_2], ax  
.text:00401018                      movzx   eax, [ebp+var_2]  