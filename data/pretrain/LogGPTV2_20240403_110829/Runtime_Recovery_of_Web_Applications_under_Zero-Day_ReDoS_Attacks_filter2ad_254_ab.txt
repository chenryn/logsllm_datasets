learning model to classify requests and recover websites
after zero-day ReDoS attacks.
‚Ä¢ We design an online feedback loop for REGEXNET to
/(?:charset|encoding)\s*=\s*[‚Äô"]? *([\w\-]+)/i
(a) A vulnerable regular expression.
content-type:charset= ... x
(
is repeated by n times in the input.)
(b) A malicious input to trigger the vulnerability.
/(?:charset|encoding)\s*= (\s*[‚Äô"] *|\s*)([\w\-]+)/i
(c) A semantically equivalent regular expression without vulnerabilities.
Fig. 1. An illustration of a real-world vulnerable regular expression, its
exploits and semantically-equivalent, safe counterpart.
collect training data at runtime, continuously train its model
online, and automatically update its model to classify and
migrate requests, in face of adaptive, unknown attacks.
‚Ä¢ We implement a system prototype of REGEXNET and
demonstrate its effectiveness, responsiveness, and resiliency
with experiments on a testbed with a wide variety of real-
world ReDoS attacks on Node.js.
II. REGEXNET OVERVIEW
In this section, we start from a motivating example and ex-
plain the key ideas of REGEXNET in recovering web services
from ReDoS attacks. Then, we present the threat model of
REGEXNET and how REGEXNET is deployed in practice.
A. A Motivating Example
In this part, we illustrate a real-world vulnerable regular
expression in Fig. 1 and explain how it makes websites vulner-
able to ReDoS attacks. The vulnerable regular expression [5]
is applied upon every request to parse the accepted charset
in the HTTP header for encoding purposes. An adversary tar-
geting this vulnerable regular expression sends many requests
containing malicious payload (e.g., one shown in Fig. 1(b)) in
the charset HTTP header to the vulnerable website: each
request originated from the adversary will occupy the server
for a fairly long time and all these add up to a Denial of
Service (DoS) consequence.
We now explain why the regular expression in Fig. 1(a) is
vulnerable. The vulnerable part in this regular expression is
\s*[‚Äô ‚Äô‚Äô]? *, which matches strings with zero or more
of \s (metacharacter for whitespace, such as space, tab, and
carriage return), zero or one of ‚Äô and ‚Äô‚Äô, and zero or more
of
(space character with ASCII code 3210). The malicious
payload shown in Fig. 1(b) is a string with n space characters.
A space character can be either matched with \s or
. As
such, the matching process needs to split this string into two
parts, with one matching \s* and the other matching *.
Because there are (n + 1) different ways to split the string,
the regular expression engine needs to exhaust all the (n + 1)
combinations to Ô¨Ågure out
the string cannot be matched.
Since each combination takes O(n) time to match, the time
complexity to match this string is O(n2), i.e., super-linear.
B. Threat Model and Practical Deployment
Threat Model. REGEXNET‚Äôs threat model considers a website
hosting a web service as a potential victim. The victim
may deploy a vulnerable regular expression to match against
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:14 UTC from IEEE Xplore.  Restrictions apply. 
1576
Fig. 2. An explanation that REGEXNET can capture the correct logics of regular expression matching with O(n) time based on the example in Fig. 1.
incoming HTTP requests. The adversary is the client(s) of the
web server, which sends requests with malicious payloads for
ReDoS attacks. Borrowing classic terminologies in Cross-site
Scripting (XSS) attacks, we further classify ReDoS attacks
into two categories, i.e., reÔ¨Çected and stored, based on the
adversary‚Äôs behaviors.
First, a reÔ¨Çected ReDoS adversary keeps sending malicious
requests to the vulnerable web server. Each request may be
polymorphic in contents and origins, i.e., the adversary may
adopt different IP addresses and change the malicious payload
to avoid being detected. We call this attack reÔ¨Çected because
the ReDoS impacts are reÔ¨Çected back to other benign users of
the same service.
Second, a stored ReDoS adversary just sends one malicious
request to the vulnerable web server and then the request or
part of the contents are stored at the server side. Then, when
a benign user sends a request to the server, the stored contents
are fetched and matched against a vulnerable regular expres-
sion, leading to a DoS attack. For example, the adversary
may post a comment with malicious payloads on a blog and
the vulnerable regular expression is a Ô¨Ålter or a censorship
of illegal contents: Every benign request to the blog will
trigger the ReDoS attack. We call this attack stored because
the ReDoS payload is stored at the server-side database.
Practical Deployment. REGEXNET is provided as a software
appliance that is deployable on general-purpose servers at the
application layer of a web server to inspect all the web trafÔ¨Åc
after decryption. It is an appliance of network function virtual-
ization (NFV), and can be deployed together with other NFV
appliances. We consider two types of deployment models.
First, the direct deployment is via web service providers.
SpeciÔ¨Åcally, a provider runs an instance of our system co-
located with its web servers in the same datacenter to protect
itself from ReDoS attacks. Large-scale web service providers
with geographically-distributed datacenters need to run a sep-
arate instance of REGEXNET in each of its datacenters. These
REGEXNET instances communicate with each other to update
their learned models.
Second, a public cloud service provider can also deploy
REGEXNET via exposing APIs to the users of the public cloud,
and provide REGEXNET as a ReDoS recovery service for its
users. SpeciÔ¨Åcally, these APIs will provide a callback function
for each incoming web request‚Äîonce REGEXNET identiÔ¨Åes a
request as ReDoS trafÔ¨Åc, the callback function will be invoked
to alert cloud users to take corresponding actions. A cloud user
can also call the provided APIs to let the cloud provider know
that a request is benign or malicious so that the provider can
update the model. Note that the cloud service provider needs to
maintain a model for each user to avoid cross-contamination,
i.e., a model being polluted by other cloud users.
C. Key Ideas
Overview. The key idea of REGEXNET is to quickly analyze
all the requests to a web server and predict whether they will
lead to a signiÔ¨Åcantly long processing time: If so, REGEXNET
will migrate those requests to separate sandboxes and isolate
their impact from the rest for a fast recovery. The analysis
includes the request itself for reÔ¨Çected ReDoS and all the
responses from database queries for stored ReDoS. Next,
REGEXNET will directly isolate all the malicious requests
launched by a reÔ¨Çected ReDoS adversary; REGEXNET will
also isolate all
the requests viewing pages containing the
malicious payload injected by a stored ReDoS adversary. As a
result, all the normal services of the web server under reÔ¨Çected
ReDoS will be recovered; the services of pages with no stored
ReDoS payload are restored and pages with stored ReDoS
payload are isolated by REGEXNET.
Linear-time analysis of requests. Next, we describe how
REGEXNET achieves fast recovery via a quick analysis of all
requests. REGEXNET relies on deep neural networks (DNNs)
to learn the behaviors of matching regular expressions against
sequential data among consecutive characters with a few
samples just like few-shot learning and mimic such matching
during the classiÔ¨Åcation stage in a linear time.
Particularly, REGEXNET uses a linear-time DNN to match
malicious requests, instead of super-linear time regular ex-
pression matching. While this seems counterintuitive at Ô¨Årst
glance, our approach actually reÔ¨Çects how the malicious re-
quests should be matched in linear time using a semantically
equivalent regular expression without vulnerabilities. We use
the same example in Fig. 1 to illustrate why the solution works.
Fig. 1(c) shows a semantically equivalent regular expression
without vulnerabilities. The vulnerable part \s*[‚Äô ‚Äô‚Äô]? *
is divided into two parts, i.e., \s*[‚Äô ‚Äô‚Äô] *, and \s*. Each
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:14 UTC from IEEE Xplore.  Restrictions apply. 
1577
\s‚å¥‚Ä≤"ùúÄ\s‚å¥‚Ä≤"\sùúÄùúÄùúÄùúÄùúÄùúÄ(a) A vulnerable state machine (a failed matching of  n*‚å¥is O(n2)).(b) An equivalent, non-vulnerable state machine (the second path matches the vulnerable inputs).(c) An ideal, learned DNN capturing the vulnerable inputs,which mimics the second path in (b).i1==‚å¥‚Ä¶i1i2ini2==‚å¥in==‚å¥Unit 1Unit 2Unit nS1S2S1S2S3Sequence of spacesDNNpart matches any string in linear time, and thus this regular
expression eliminates the vulnerability that exists in Fig. 1(a).
We now use Fig. 2 to explain why a DNN can reÔ¨Çect
the matching of a semantically equivalent regular expression
without vulnerabilities in Fig. 1(c). Note that the Ô¨Ågure only
shows the portion related to the vulnerable part to simplify
the illustration. First, Fig. 2(a) shows the state machine of
the vulnerable regular expression in Fig. 1(a) to match a
malicious input. There are two states, i.e., S1 and S2, which
map to \s* and *. Since the space character matches both
states and there are (n + 1) possible combinations to partition
n space characters, the total matching time is O(n2). Sec-
ond, Fig. 2(b) shows the state machine of the semantically
equivalent regular expression without vulnerabilities to match
a malicious input. There are only two possible paths with
O(n) matching path: The malicious string does not match
the top path, and only matches the bottom path. Lastly, we
use Fig. 2(c) to show how a DNN can mimic the behavior of
the correct regular expression for linear-time matching. Each
unit in the DNN receives a character as input and the DNN is
trained to recognize sequences of spaces. Note that Fig. 2(c)
is a simpliÔ¨Åed illustration to show the main idea. The actual
model in REGEXNET uses a combination of embedding, 1-
d convolutional, spatial pyramid pooling and fully-connected
layers that can process variable-length input with linear time.
III. REGEXNET DESIGN
We describe the design of REGEXNET in this section.
A. REGEXNET Design Goals
REGEXNET is designed to recovery web services from zero-
day ReDoS attacks, with the following goals.
‚Ä¢ Effective. REGEXNET should effectively recover a web
service to resume processing of requests from normal clients
after a zero-day ReDoS attack by providing a comparable
throughput (in terms of requests processed per second) and
latency (in terms of processing latency of each request).
‚Ä¢ Responsive. REGEXNET should quickly react to a zero-day
ReDoS attack, and minimize the downtime of a web service
caused by the attack.
‚Ä¢ Resilient. REGEXNET should be resilient to different Re-
DoS attack types, no matter whether a ReDoS attack is
targeted at a known or unknown vulnerability.
‚Ä¢ Low overhead. REGEXNET should incur low overhead on
the throughput and latency of request processing.
‚Ä¢ Scalable and fault-tolerant. REGEXNET should be able to
scale out based on the amount of web trafÔ¨Åc, and tolerate
the failures of individual system components.
B. REGEXNET Architecture and WorkÔ¨Çows
Fig. 3 shows the overall architecture of REGEXNET.
REGEXNET, a ReDoS recovery system, is a software appli-
ance that recovers web servers under ReDoS attacks from
adversarial clients. REGEXNET relies on an online feedback
loop to train a customized DNN model, leverages the model
to detect malicious ReDoS requests, and then isolates them
Fig. 3. REGEXNET architecture.
to separate sandboxes‚Äîi.e., an elastic bounded (e.g., 10%)
fraction of server instances‚Äîto mitigate their impact on web
services. REGEXNET has a collector, which serves as a shim
layer running in each web server instance and collects in-
formation related to the request execution, such as database
query response and runtime execution time, for the feedback
loop. Another important module is a load balancer, which
spreads web requests over web servers, and copies them to
the DNN model for request classiÔ¨Åcation. We provide various
load balancing policies for REGEXNET, including round-robin
as default, so that all server instances will be equally utilized.
We now describe the workÔ¨Çow of REGEXNET.
1) Dispatching requests. The load balancer dispatches web
requests based on customized load balancing policies, and
copies the requests to the DNN-based detection module.
2) Intercepting database query response. The collector inter-
cepts all the queries to the database, records the responses
from the database, and then sends the query response back
to the DNN-based detection module.
3) Detecting and signaling. The DNN-based detection mod-
ule, taking both the request and the query response, clas-
siÔ¨Åes whether the request causes ReDoS, and then signals
the migrator to act based on the result. As an optimization,
when a database response is malicious, the detector can
associate it with the request, and directly classify the
following requests to reduce detection latency.
4) Migrating requests. The migrator, upon receiving the sig-
nal, notiÔ¨Åes the corresponding server instance to stop the
processing of the request, and sends it to a sandbox.
5) Collecting processing time. The collector collects the pro-
cessing time of each web request, and uses them to update
the detection model.
6) Updating the model. To close
the
feedback loop,
REGEXNET updates the model with the collected times.
Note that we choose to design and deploy REGEXNET on
the network layer due to two reasons. First, it does not impose
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:14 UTC from IEEE Xplore.  Restrictions apply. 
1578
Normal RequestReDoS AttackMigratorDNN(1) dispatchSandboxNormal executorCollector(1) copyOnline feedback loopLoad balancerRegexNet(4) migrate(3) detect& signal(6) model update(5) collect respond timeDatabaseDatabase query(2) collect query response(2) feed query response as inputsany latency overhead on benign requests in normal scenarios,
because REGEXNET does not interpose between clients and
web servers, and requests are copied to REGEXNET for pro-
cessing in parallel with normal processing at the web servers.
Once a ReDoS attack happens, while the web servers do spend
CPU resources on processing malicious requests, they are
immediately migrated to sandboxes to isolate their impact after
being classiÔ¨Åed as malicious by the detection module. The
CPU resources that can be consumed by the malicious requests
at the web servers are capped by the classiÔ¨Åcation time, which
is linear. And remember that even normal requests would take
linear time to be processed. Because in ReDoS attacks the
malicious requests are only a small portion of the total trafÔ¨Åc,
the system can quickly recover to resume its operation.
Second, it is application-agnostic and thus minimizes de-
ployment efforts. SpeciÔ¨Åcally, the deployment of REGEXNET
on the network layer eliminates the need for analyzing and
modifying the source code of applications or libraries. There-
fore, it simpliÔ¨Åes the deployment and can serve a wide range of
web applications. As a comparison, an alternative approach is
to deploy REGEXNET on the application layer with either the
application code or the library of regular expression matching.
This application-speciÔ¨Åc approach requires knowledge about
the application code, incurring additionally engineering efforts.
More importantly, the source code for certain applications and
libraries may not even be available.
C. DNN-based Detection Model
Model design. The detection module uses a DNN model to
detect ReDoS attacks. The DNN model takes a web request as
input and classiÔ¨Åes whether the request is benign or malicious.