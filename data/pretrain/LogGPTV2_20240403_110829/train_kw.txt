.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" fixme something could be added to this page (or exit(2))
.\" about exit_robust_list processing
.\"
.th get_robust_list 2 2021-03-22 linux "linux system calls"
.sh name
get_robust_list, set_robust_list \- get/set list of robust futexes
.sh synopsis
.nf
.br "#include " \
"   /* definition of " "struct robust_list_head" " */"
.br "#include " "   /* definition of " sys_* " constants */"
.b #include 
.pp
.bi "long syscall(sys_get_robust_list, int " pid ,
.bi "             struct robust_list_head **" head_ptr ", size_t *" len_ptr );
.bi "long syscall(sys_set_robust_list,"
.bi "             struct robust_list_head *" head ", size_t " len );
.fi
.pp
.ir note :
glibc provides no wrappers for these system calls,
necessitating the use of
.br syscall (2).
.sh description
these system calls deal with per-thread robust futex lists.
these lists are managed in user space:
the kernel knows only about the location of the head of the list.
a thread can inform the kernel of the location of its robust futex list using
.br set_robust_list ().
the address of a thread's robust futex list can be obtained using
.br get_robust_list ().
.pp
the purpose of the robust futex list is to ensure that if a thread
accidentally fails to unlock a futex before terminating or calling
.br execve (2),
another thread that is waiting on that futex is notified that
the former owner of the futex has died.
this notification consists of two pieces: the
.br futex_owner_died
bit is set in the futex word, and the kernel performs a
.br futex (2)
.br futex_wake
operation on one of the threads waiting on the futex.
.pp
the
.br get_robust_list ()
system call returns the head of the robust futex list of the thread
whose thread id is specified in
.ir pid .
if
.i pid
is 0,
the head of the list for the calling thread is returned.
the list head is stored in the location pointed to by
.ir head_ptr .
the size of the object pointed to by
.i **head_ptr
is stored in
.ir len_ptr .
.pp
permission to employ
.br get_robust_list ()
is governed by a ptrace access mode
.b ptrace_mode_read_realcreds
check; see
.br ptrace (2).
.pp
the
.br set_robust_list ()
system call requests the kernel to record the head of the list of
robust futexes owned by the calling thread.
the
.i head
argument is the list head to record.
the
.i len
argument should be
.ir sizeof(*head) .
.sh return value
the
.br set_robust_list ()
and
.br get_robust_list ()
system calls return zero when the operation is successful,
an error code otherwise.
.sh errors
the
.br set_robust_list ()
system call can fail with the following error:
.tp
.b einval
.i len
does not equal
.ir "sizeof(struct\ robust_list_head)" .
.pp
the
.br get_robust_list ()
system call can fail with the following errors:
.tp
.b efault
the head of the robust futex list can't be stored at the location
.ir head .
.tp
.b eperm
the calling process does not have permission to see the robust futex list of
the thread with the thread id
.ir pid ,
and does not have the
.br cap_sys_ptrace
capability.
.tp
.b esrch
no thread with the thread id
.i pid
could be found.
.sh versions
these system calls were added in linux 2.6.17.
.sh notes
these system calls are not needed by normal applications.
.pp
a thread can have only one robust futex list;
therefore applications that wish
to use this functionality should use the robust mutexes provided by glibc.
.pp
in the initial implementation,
a thread waiting on a futex was notified that the owner had died
only if the owner terminated.
starting with linux 2.6.28,
.\" commit 8141c7f3e7aee618312fa1c15109e1219de784a7
notification was extended to include the case where the owner performs an
.br execve (2).
.pp
the thread ids mentioned in the main text are
.i kernel
thread ids of the kind returned by
.br clone (2)
and
.br gettid (2).
.sh see also
.br futex (2),
.br pthread_mutexattr_setrobust (3)
.pp
.ir documentation/robust\-futexes.txt
and
.ir documentation/robust\-futex\-abi.txt
in the linux kernel source tree
.\" http://lwn.net/articles/172149/
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 2008 linux foundation, written by michael kerrisk
.\"     
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th pthread_attr_setdetachstate 3 2021-03-22 "linux" "linux programmer's manual"
.sh name
pthread_attr_setdetachstate, pthread_attr_getdetachstate \-
set/get detach state attribute in thread attributes object
.sh synopsis
.nf
.b #include 
.pp
.bi "int pthread_attr_setdetachstate(pthread_attr_t *" attr \
", int " detachstate );
.bi "int pthread_attr_getdetachstate(const pthread_attr_t *" attr ,
.bi "                                int *" detachstate );
.pp
compile and link with \fi\-pthread\fp.
.fi
.sh description
the
.br pthread_attr_setdetachstate ()
function sets the detach state attribute of the
thread attributes object referred to by
.ir attr
to the value specified in
.ir detachstate .
the detach state attribute determines whether a thread created using
the thread attributes object
.i attr
will be created in a joinable or a detached state.
.pp
the following values may be specified in
.ir detachstate :
.tp
.b pthread_create_detached
threads that are created using
.i attr
will be created in a detached state.
.tp
.b pthread_create_joinable
threads that are created using
.i attr
will be created in a joinable state.
.pp
the default setting of the detach state attribute in a newly initialized
thread attributes object is
.br pthread_create_joinable .
.pp
the
.br pthread_attr_getdetachstate ()
returns the detach state attribute of the thread attributes object
.ir attr
in the buffer pointed to by
.ir detachstate .
.sh return value
on success, these functions return 0;
on error, they return a nonzero error number.
.sh errors
.br pthread_attr_setdetachstate ()
can fail with the following error:
.tp
.b einval
an invalid value was specified in
.ir detachstate .
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br pthread_attr_setdetachstate (),
.br pthread_attr_getdetachstate ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008.
.sh notes
see
.br pthread_create (3)
for more details on detached and joinable threads.
.pp
a thread that is created in a joinable state should
eventually either be joined using
.br pthread_join (3)
or detached using
.br pthread_detach (3);
see
.br pthread_create (3).
.pp
it is an error to specify the thread id of
a thread that was created in a detached state
in a later call to
.br pthread_detach (3)
or
.br pthread_join (3).
.sh examples
see
.br pthread_attr_init (3).
.sh see also
.br pthread_attr_init (3),
.br pthread_create (3),
.br pthread_detach (3),
.br pthread_join (3),
.br pthreads (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 2006 justin pryzby 
.\"
.\" %%%license_start(permissive_misc)
.\" permission is hereby granted, free of charge, to any person obtaining
.\" a copy of this software and associated documentation files (the
.\" "software"), to deal in the software without restriction, including
.\" without limitation the rights to use, copy, modify, merge, publish,
.\" distribute, sublicense, and/or sell copies of the software, and to
.\" permit persons to whom the software is furnished to do so, subject to
.\" the following conditions:
.\"
.\" the above copyright notice and this permission notice shall be
.\" included in all copies or substantial portions of the software.
.\"
.\" the software is provided "as is", without warranty of any kind,
.\" express or implied, including but not limited to the warranties of
.\" merchantability, fitness for a particular purpose and noninfringement.
.\" in no event shall the authors or copyright holders be liable for any
.\" claim, damages or other liability, whether in an action of contract,
.\" tort or otherwise, arising from, out of or in connection with the
.\" software or the use or other dealings in the software.
.\" %%%license_end
.\"
.\" references:
.\"   glibc manual and source
.\"
.\" 2006-05-19, mtk, various edits and example program
.\"
.th rpmatch 3 2021-03-22 "gnu" "linux programmer's manual"
.sh name
rpmatch \- determine if the answer to a question is affirmative or negative
.sh synopsis
.nf
.b #include 
.pp
.bi "int rpmatch(const char *" response );
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br rpmatch ():
.nf
    since glibc 2.19:
        _default_source
    glibc 2.19 and earlier:
        _svid_source
.fi
.sh description
.br rpmatch ()
handles a user response to yes or no questions, with
support for internationalization.
.pp
.i response
should be a null-terminated string containing a
user-supplied response, perhaps obtained with
.br fgets (3)
or
.br getline (3).
.pp
the user's language preference is taken into account per the
environment variables
.br lang ,
.br lc_messages ,
and
.br lc_all ,
if the program has called
.br setlocale (3)
to effect their changes.
.pp
regardless of the locale, responses matching
.b \(ha[yy]
are always accepted as affirmative, and those matching
.b \(ha[nn]
are always accepted as negative.
.sh return value
after examining
.ir response ,
.br rpmatch ()
returns 0 for a recognized negative response ("no"), 1
for a recognized positive response ("yes"), and \-1 when the value
of
.i response
is unrecognized.
.sh errors
a return value of \-1 may indicate either an invalid input, or some
other error.
it is incorrect to only test if the return value is nonzero.
.pp
.br rpmatch ()
can fail for any of the reasons that
.br regcomp (3)
or
.br regexec (3)
can fail; the cause of the error
is not available from
.i errno
or anywhere else, but indicates a
failure of the regex engine (but this case is indistinguishable from
that of an unrecognized value of
.ir response ).
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br rpmatch ()
t}	thread safety	mt-safe locale
.te
.hy
.ad
.sp 1
.sh conforming to
.br rpmatch ()
is not required by any standard, but
is available on a few other systems.
.\" it is available on at least aix 5.1 and freebsd 6.0.
.sh bugs
the
.br rpmatch ()
implementation looks at only the first character
of
.ir response .
as a consequence, "nyes" returns 0, and
"ynever; not in a million years" returns 1.
it would be preferable to accept input strings much more
strictly, for example (using the extended regular
expression notation described in
.br regex (7)):
.b \(ha([yy]|yes|yes)$
and
.br \(ha([nn]|no|no)$ .
.sh examples
the following program displays the results when
.br rpmatch ()
is applied to the string given in the program's command-line argument.
.pp
.ex
#define _svid_source
#include 
#include 
#include 
#include 
int
main(int argc, char *argv[])
{
    if (argc != 2 || strcmp(argv[1], "\-\-help") == 0) {
        fprintf(stderr, "%s response\en", argv[0]);
        exit(exit_failure);
    }
    setlocale(lc_all, "");
    printf("rpmatch() returns: %d\en", rpmatch(argv[1]));
    exit(exit_success);
}
.ee
.sh see also
.br fgets (3),
.br getline (3),
.br nl_langinfo (3),
.br regcomp (3),
.br setlocale (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 1993 david metcalfe (PI:EMAIL)
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" references consulted:
.\"     linux libc source code
.\"     lewine's _posix programmer's guide_ (o'reilly & associates, 1991)
.\"     386bsd man pages
.\" modified sat jul 24 18:29:11 1993 by rik faith (PI:EMAIL)
.\" modified 11 june 1995 by andries brouwer (PI:EMAIL)
.th rewinddir 3  2021-03-22 "" "linux programmer's manual"
.sh name
rewinddir \- reset directory stream
.sh synopsis
.nf
.b #include 
.b #include 
.pp
.bi "void rewinddir(dir *" dirp );
.fi
.sh description
the
.br rewinddir ()
function resets the position of the directory
stream
.i dirp
to the beginning of the directory.
.sh return value
the
.br rewinddir ()
function returns no value.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br rewinddir ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1