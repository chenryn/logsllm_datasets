### 问题描述

以下是一个简单的Fortran函数 `breaksf2py`，它接受一个整数参数并返回其两倍的值：

```fortran
integer function breaksf2py(arg)
    integer, intent(in) :: arg
    breaksf2py = 2 * arg
end function breaksf2py
```

使用 `f2py` 编译该函数时，命令 `f2py -m foo breaksf2py.f90` 可以正常工作。然而，当尝试生成 `.pyf` 接口文件时，命令 `f2py -m foo -h foo.pyf breaksf2py.f90` 在 Python 3 的 `f2py` 版本中（测试了 3.2 和 3.3）会引发错误。

### 错误信息

以下是具体的错误信息：

```
Reading fortran codes...
Reading file 'breaksf2py.f90' (format:free)
Post-processing...
Block: foo
Block: breaksf2py
Post-processing (stage 2)...
Saving signatures to file "./foo.pyf"
Traceback (most recent call last):
  File "/usr/bin/f2py-3.2", line 24, in <module>
    main()
  File "/usr/lib64/python3.2/site-packages/numpy/f2py/f2py2e.py", line 590, in main
    run_main(sys.argv[1:])
  File "/usr/lib64/python3.2/site-packages/numpy/f2py/f2py2e.py", line 361, in run_main
    postlist=callcrackfortran(files,options)
  File "/usr/lib64/python3.2/site-packages/numpy/f2py/f2py2e.py", line 286, in callcrackfortran
    pyf=crackfortran.crack2fortran(postlist)
  File "/usr/lib64/python3.2/site-packages/numpy/f2py/crackfortran.py", line 2749, in crack2fortran
    pyf=crack2fortrangen(block)+'\n'
  File "/usr/lib64/python3.2/site-packages/numpy/f2py/crackfortran.py", line 2517, in crack2fortrangen
    ret=ret+crack2fortrangen(g,tab,as_interface=as_interface)
  File "/usr/lib64/python3.2/site-packages/numpy/f2py/crackfortran.py", line 2561, in crack2fortrangen
    vars=vars2fortran(block,block['vars'],argsl,tab+tabchar, as_interface=as_interface)
  File "/usr/lib64/python3.2/site-packages/numpy/f2py/crackfortran.py", line 2711, in vars2fortran
    lst = true_intent_list(vars[a])
  File "/usr/lib64/python3.2/site-packages/numpy/f2py/crackfortran.py", line 2612, in true_intent_list
    if c:
UnboundLocalError: local variable 'c' referenced before assignment
```

### 解决方案

虽然在 Python 3 中生成 `.pyf` 文件时会出现上述错误，但可以通过以下步骤绕过这个问题：

1. 使用 Python 2 的 `f2py` 生成 `.pyf` 文件：
   ```sh
   f2py-2.7 -m foo -h foo.pyf breaksf2py.f90
   ```

2. 使用生成的 `.pyf` 文件和 Python 3 的 `f2py` 进行编译：
   ```sh
   f2py-3.3 -m foo -c foo.pyf breaksf2py.f90
   ```

通过这种方式，可以成功地将 Fortran 函数与 Python 3 集成。