上面有讲这些数据需要发送26次，每次是2个bit，总共就是52个bit
上面是7个字节，总共是56个bit，还有4个bit怎么办，后面再说。
这个时候我们需要说说存储时间对的指针了。
地址0x9e38存储的时间对：
        {60，60，
    60，2700，
    120，60，
    240，60}
这个时间对分别是time on和time off
解释这两个概念时先计算一下PWM调制的周期时间
1/38400=26μs（微秒）
该MCU的系统时钟是46Mhz，这里使用了一个16位的通用定时器GPT TimerB
我们通过代码得知该PWM调制的占空比（duty cycle）是33.3%，什么是占空比，就是在一个PWM周期里面高电平占总电平的比例，如下图：
这个PWM的周期是26μs，高电平是8.84μs，所以占空比就是8.84/26=33.3%，也就是1/3，我们从代码里面也能看到。
这个PWM输出使用的是4号GPIO口，地址0x40022090是设置各个GPIO口置bit1的地方，这里赋值0x10刚好是置4号GPIO口bit1，也就是高电平，地址0x4001002c设置定时器时间，也就是这个高电平持续多长时间，后面0x400220a0是设置各个GPIO口清除bit1，也就是置bit0，这个是0x10，表示置4号GPIO口bit0，也就是进入低电平，设置定时器长度在地址0x4001002c，时长是高电平的2倍，这就是一个周期time
on的状态，通过计算我们能够得出一个周期高电平的时长。
系统时钟周期1/46000000
(46000000/38400/3.0)*( 1/46000000)=8.67μs
好了，继续回来上面的时间对Time on和time off
        {60，60，
    60，2700，
    120，60，
    240，60}
把每个数字乘以10，时间单位是微秒，这个10怎么来的，代码里面看到的，不知道原因（搞硬件的同学帮忙解释下）。
        {600，600，
    600，27000，
    1200，600，
    2400，600}
每对数字前的数字表示Time on，就是在这个数字的时间内，PWM信号周期性出现，后面的数字Time Off表示低电平没有PWM周期性变化。
这两个组合在一起的PWM信号就是表示数字信号里面的2个bit位，上面有提到
{600，600，代表bit 位‘0 0’
600，27000，代表bit 位‘0 1’
1200，600，代表bit 位‘1 0’
2400，600} ，代表bit 位‘1 1’
所以这个红外信号就是通过PWM的这种方法调制发射出去的，继续上面的例子，我们要发送的数据如下。
        {0xe2, 0x20,0x80,0x78,0x88,0x20,x10}
发送数据的顺序是LSB，就是从左到右开始发，比如0xe2的比特数据是
“ 11100010 ”
先发11，10，00，10对应的发送时间序列对就是
2400，600
1200，600
600， 600
1200，600
我们可以通过逻辑分析仪来看这些信号发送的情况
第一组发送的比特11
Time on 2400微秒（也就是2.4毫秒），我们观察到按照周期性变化的PWM信号长度就是2.4毫秒，低电平的时长就是600微秒左右
第二组发送的比特10
time on时长1200微秒，time off时长600微秒
第三组发送的比特00
time on时长600，time off时长600
第四组发送的比特10
time on时长1200微秒，time off 600微秒
好了，上面我们有提到要发送的数据是7个字节，56bit，但是只发送了26对也就是52bit，还有4bit怎么办，我们看最后一个字节0x10对应的比特位是00010000
因为最后4位都是bit0，所以直接低电平补位了（猜测）。
最后在14秒左右遍历了80组红外信号来尝试关闭远端的摇控电视
**  
**
**外置Flash篇**
我们似乎忘记了那个4MB的winbond的外置flash了，它的功能如下：
  6. 1\. 存储一些文字介绍信息
  7. 2\. 存储LCD文字显示映射码
  8. 3\. 存储启动的图片
  9. 4\. 存储了一个变量
如果dump外置flash？
先祭出我的神器FT2232h Min Module，用热风枪把外置flash吹下来，
然后夹住，连线如下图，SPI接口一一对应好就可以了。
通过软件flashrom来读取flash里面的内容
运行flashrom –p ft2232_spi:type=2232H,port=A –r flash_cc.bin  
LCD显示是通过硬件I2C协议写入数据，ASCII码和UNICODE显示逻辑如下  
汉字通过UTF8解码然后GBK编码后存储  
所以想在显示屏上面显示中文汉字，只需要把汉字UTF8解码然后GBK编码后放到相应的位置就可以了，例如  
>>> '谢君'.decode('utf8').encode('gbk')
'xd0xbbxbexfd'
这四个字节写入地址0x20001060处，然后写回内置flash就出来如下效果了。  
**  
**
**无线通信篇（RF）**
该板子带一个无线收发功能，中心频率是433.92Mhz，速率50Kbps，2-GFSK方式调制，该无线功能一直处于监听状态，当收到服务端发过来的相应命令的数据包时，会做相应的解析，并且发相应的包响应。
**这个无线功能有如下一些功能** ，我就挑选了几个：
广播请求客户端提交你们的用户id信息
广播请求客户端提交你们的通过关卡数的信息
**服务端器发送无线数据格式如下：**
0x00 0xaa无线通信前导码(preamble)
0x01 数据包payload长度
0x02 请求命令
0x03-0x04 header 0x5555或者0x2b2
0x05 序列号(seq)
0x06 地址
0x07 子命令
end 两个字节的数据包校验和
**客户端发送数据格式如下：**
0x00 0xaa前导码
0x01 数据包长
0x02 请求命令
0x03-0x04头部header 0x02 0xb2
0x05 对应服务端发过来的地址
0x06 子命令
0x7—需要提交的一些数据
end两个字节的校验和
**校验和算法：**
把字段数据包长度后面的数据，不包括校验和字段，每个字节数据相加结果再和校验和作比较。
我节选了几个数据交互对，由于我们现在不可能收到服务器发的数据，所以只能根据逆向代码来判断发送的内容是什么样的：
recv是来自服务器发的，send是我们的板子响应发出去的。
Seq是序列号，add是地址，各占一个字节
**请求提交你过了多少关：**
    recv 0xaa 0x06  0x02 0x55 0x55 seq add 0x01 chk1 chk2  
    send 0xaa 0x08 0x03 seq 0x02 0xb2 add 0x01 0xff 0x09 chk1 chk2
**请求提交板子的用户id，名字长度是16个字节：**
    recv 0xaa 0x06 0x02 0x55 0x55 seq add 0x03 chk1 chk2
    send 0x0a 0x16 0x03 seq 0x02 0xb2 add 0x03 username chk1 chk2
**其它：**
    recv  0xaa 0x06 0x04 0x02 0xb2 seq add  0x01 chk1 chk2
    send 0xaa 0x05 0x05 seq 0x02 0xb2 add chk1 chk2
**结论**
当然还有改进的空间，比如在解题算法代码上面，不要用明文存储答案，经过一些算法混淆处理，可以提高代码分析的门槛。
  1. 硬件上面的一些反调试对抗，可以考虑一些芯片硬件特性的支持，比如今年defcon上面使用的intel在quark d2000 x86芯片，里面有一个jtag的disable的OTP比特位，烧录设置后jtag硬件调试就不能用了。
  2. 相信他们在设计这块板子的时候也是付出了很多精力，逆向也是一个学习的过程，感谢。
  3.