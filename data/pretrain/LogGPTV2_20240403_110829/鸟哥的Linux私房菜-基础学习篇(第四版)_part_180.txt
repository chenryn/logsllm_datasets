include /etc/logrotate.d
# 将 /etc/logrotate.d/ 这个目录中的所有文件都读进来执行 rotate 的工作！
/var/log/wtmp {  /dev/null` 2> /dev/null || true
endscript
}
在上面的语法当中，我们知道正确的 logrotate 的写法为：
文件名：被处理的登录文件绝对路径文件名写在前面，可以使用空白字符分隔多个登录文件；
参数：上述文件名进行轮替的参数使用 { } 包括起来；
执行脚本：可调用外部指令来进行额外的命令下达，这个设置需与 sharedscripts .... endscript 设置合用才行。至于可用的环境为：
prerotate：在启动 logrotate 之前进行的指令，例如修改登录文件的属性等动作；
postrotate：在做完 logrotate 之后启动的指令，例如重新启动 （kill -HUP） 某个服务！
Prerotate 与 postrotate 对于已加上特殊属性的文件处理上面，是相当重要的执行程序！
那么 /etc/logrotate.d/syslog 内设置的 5 个文件的轮替功能就变成了：
该设置只对 /var/log/ 内的 cron, maillog, messages, secure, spooler 有效；
登录文件轮替每周一次、保留四个、且轮替下来的登录文件不进行压缩（未更改默认值）；
轮替完毕后 （postrotate） 取得 syslog 的 PID 后，以 kill -HUP 重新启动 syslogd
假设我们有针对 /var/log/messages 这个文件增加 chattr +a 的属性时， 依据 logrotate 的工作原理，我们知道，这个 /var/log/messages
将会被更名成为 /var/log/messages.1 才是。但是由于加上这个 +a 的参数啊，所以更名是不可能成功的！ 那怎么办呢？呵呵！就利用 prerotate
与 postrotate 来进行登录文件轮替前、后所需要作的动作啊！ 果真如此时，那么你可以这样修改一下这个文件喔！
[root@study ~]# vim /etc/logrotate.d/syslog
/var/log/cron
/var/log/maillog
/var/log/messages
/var/log/secure
/var/log/spooler
{
sharedscripts
prerotate
/usr/bin/chattr -a /var/log/messages
endscript
sharedscripts
postrotate
/bin/kill -HUP `cat /var/run/syslogd.pid 2> /dev/null` 2> /dev/null || true
/usr/bin/chattr +a /var/log/messages
endscript
}
看到否？就是先给他去掉 a 这个属性，让登录文件 /var/log/messages 可以进行轮替的动作， 然后执行了轮替之后，再给他加入这个属
性！请特别留意的是，那个 /bin/kill -HUP ... 的意义，这一行的目的在于将系统的 rsyslogd 重新以其参数文件 （rsyslog.conf） 的数据读入一
次！也可以想成是 reload 的意思啦！ 由于我们创建了一个新的空的记录文件，如果不执行此一行来重新启动服务的话， 那么记录的时候将会
发生错误呦！（请回到第十六章读一下 kill 后面的 signal 的内容说明）
好了，设置完成之后，我们来测试看看这样的设置是否可行呢？给他执行下面的指令：
[root@study ~]# logrotate [-vf] logfile
选项与参数：
-v ：启动显示模式，会显示 logrotate 运行的过程喔！
-f ：不论是否符合配置文件的数据，强制每个登录文件都进行 rotate 的动作！
范例一：执行一次 logrotate 看看整个流程为何？
[root@study ~]# logrotate -v /etc/logrotate.conf
reading config file /etc/logrotate.conf rotateCount is 52
dateext suffix '-20150820'
glob pattern '-[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]'
compressing log with: /bin/gzip
....（下面省略）....
# 看到否？整个 rotate 的动作就是这样一步一步进行的～
[root@study ~]# ll /var/log/messages*; lsattr /var/log/messages
-rw-------. 1 root root 143 Aug 20 01:45 /var/log/messages
-rw-------. 1 root root 167125 Aug 20 01:40 /var/log/messages-20150820
-----a---------- /var/log/messages <==主动加入 a 的隐藏属性啰！
上面那个 -f 具有“强制执行”的意思，如果一切的设置都没有问题的话，那么理论上，你的 /var/log 这个目录就会起变化啰！而且应该不
会出现错误讯息才对！嘿嘿！这样就 OK 了！很棒不是吗？！
由于 logrotate 的工作已经加入 crontab 里头了！所以现在每天系统都会自动的给他查看 logrotate 啰！不用担心的啦！只是要注意一下
那个 /var/log/messages 里头是否常常有类似下面的字眼：
Aug 20 01:45:34 study rsyslogd: [origin software="rsyslogd" swVersion="7.4.7" x-pid="2145" x-info="http://www.rsyslog.com"]
rsyslogd was HUPed
这说明的是 rsyslogd 重新启动的时间啦 （就是因为 /etc/logrotate.d/syslog 的设置之缘故！） 下面我们来进行一些例题的练习，让你更
详细的了解 logrotate 的功用啊！
假设前提是这样的，前一小节当中，假设你已经创建了 /var/log/admin.log 这个文件， 现在，你想要将该文件加上 +a 这个隐藏标签，而
且设置下面的相关信息：
登录文件轮替一个月进行一次；
该登录文件若大于 10MB 时，则主动进行轮替，不需要考虑一个月的期限；
保存五个备份文件；
备份文件需要压缩
那你可以怎么样设置呢？呵呵～很简单啊！看看下面的动作吧！
# 1. 先创建 +a 这个属性啊！
[root@study ~]# chattr +a /var/log/admin.log
[root@study ~]# lsattr /var/log/admin.log
-----a---------- /var/log/admin.log
[root@study ~]# mv /var/log/admin.log /var/log/admin.log.1
mv: cannot move `/var/log/admin.log' to `/var/log/admin.log.1': Operation not permitted