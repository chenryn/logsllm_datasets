配置 PHP
```bash
# 安装 PHP 源
rpm -ivh https://mirror.webtatic.com/yum/el7/epel-release.rpm
rpm -ivh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm
# 安装 PHP7.0
yum install -y php70w
yum install -y php70w-mysql
yum install -y httpd
# 重启 Apache
systemctl restart httpd
# 查看 PHP 版本
php -v
```
设置 wp-config.php 文件
```bash
cd wordpress
vim wp-config-sample.php
```
在标有 `// ** MySQL settings - You can get this info from your web host ** //` 下输入你的数据库相关信息
```
DB_NAME
    在第二步中为 WordPress 创建的数据库名称
DB_USER
    在第二步中创建的 WordPress 用户名
DB_PASSWORD
    第二步中为 WordPress 用户名设定的密码
DB_HOST
    第二步中设定的 hostname (通常是 localhost,但总有例外;参见编辑wp-config.php 文件中的"可能的 DB_HOST 值) .
DB_CHARSET
    数据库字符串,通常不可更改.
DB_COLLATE
    留为空白的数据库排序.
```
在标有 `* Authentication Unique Keys.` 的版块下输入密钥的值,保存 wp-config.php 文件,也可以不管这个
上传文件
接下来需要决定将博客放在网站的什么位置上:
- 网站根目录下 (如:http://example.com/)
- 网站子目录下 (如:http://example.com/blog/)
根目录
如果需要将文件上传到 web 服务器,可用 FTP 客户端将 wordpress 目录下所有内容 (无需上传目录本身) 上传至网站根目录
如果文件已经在 web 服务器中且希望通过 shell 访问来安装 wordpress,可将 wordpress 目录下所有内容 (无需转移目录本身) 转移到网站根目录
子目录
如果需要将文件上传到 web 服务器,需将 wordpress 目录重命名,之后用 FTP 客户端将重命名后的目录上传到网站根目录下某一位置
如果文件已经在 web 服务器中且希望通过shell访问来安装 wordpress,可将 wordpress 目录转移到网站根目录下某一位置,之后重命名 wordpress 目录
```bash
mv wordpress/* /var/www/html
setenforce 0    # 关闭 selinux
service httpd start
service firewalld stop
```
运行安装脚本
- 将 WordPress 文件放在根目录下的用户请访问:http://example.com/wp-admin/install.php
- 将 WordPress 文件放在子目录 (假设子目录名为 blog) 下的用户请访问:http://example.com/blog/wp-admin/install.php
- 访问 `http://xxx.xxx.xxx.xxx/wp-admin/setup-config.php` 下面就略了,自己照着页面上显示的来
---
### Mijisou
> 基于开源项目 Searx 二次开发的操作引擎
> 2019-11-17:不在推荐该开源项目,建议直接使用源项目 [searx](##searx)
**项目地址**
- https://github.com/entropage/mijisou
**依赖**
自行安装 python3 pip redis
**安装**
```bash
systemctl start redis
systemctl enable redis
git clone https://github.com/entropage/mijisou.git
cd mijisou && pip install -r requirements.txt
```
**配置**
```yml
vim searx/settings_et_dev.yml
general:
    debug : False # Debug mode, only for development
    instance_name : "123搜索" # displayed name
search:
    safe_search : 0 # Filter results. 0: None, 1: Moderate, 2: Strict
    autocomplete : "" # Existing autocomplete backends: "baidu", "dbpedia", "duckduckgo", "google", "startpage", "wikipedia" - leave blank to turn it off by default
    language : "zh-CN"
    ban_time_on_fail : 5 # ban time in seconds after engine errors
    max_ban_time_on_fail : 120 # max ban time in seconds after engine errors
server:
    port : 8888
    bind_address : "0.0.0.0" # address to listen on
    secret_key : "123" # change this!
    base_url : False # Set custom base_url. Possible values: False or "https://your.custom.host/location/"
    image_proxy : False # Proxying image results through searx
    http_protocol_version : "1.0"  # 1.0 and 1.1 are supported
cache:
    cache_server : "127.0.0.1" # redis cache server ip address
    cache_port : 6379 # redis cache server port
    cache_time : 30 # cache 30 s
    cache_type : "redis" # cache type
    cache_db : 0 # we use db 0 in dev env
ui:
    static_path : "" # Custom static path - leave it blank if you didn't change
    templates_path : "" # Custom templates path - leave it blank if you didn't change
    default_theme : entropage # ui theme
    default_locale : "" # Default interface locale - leave blank to detect from browser information or use codes from the 'locales' config section
    theme_args :
        oscar_style : logicodev # default style of oscar
# searx supports result proxification using an external service: https://github.com/asciimoo/morty
# uncomment below section if you have running morty proxy
result_proxy:
    url : ""  #morty proxy service
    key : Your_result_proxy_key
    server_name : ""
outgoing: # communication with search engines
    request_timeout : 2.0 # seconds
    useragent_suffix : "" # suffix of searx_useragent, could contain informations like an email address to the administrator
    pool_connections : 100 # Number of different hosts
    pool_maxsize : 10 # Number of simultaneous requests by host
# uncomment below section if you want to use a proxy
# see http://docs.python-requests.org/en/latest/user/advanced/#proxies
# SOCKS proxies are also supported: see http://docs.python-requests.org/en/master/user/advanced/#socks
#    proxies :
#        http : http://192.168.199.5:24000
#        http : http://192.168.199.5:3128
#        https: http://127.0.0.1:8080
# uncomment below section only if you have more than one network interface
# which can be the source of outgoing search requests
#    source_ips:
#        - 1.1.1.1
#        - 1.1.1.2
    haipproxy_redis:
      #host: 192.168.199.5
      #port: 6379
      #password: kckdkkdkdkddk
      #db: 0
engines:
  - name : duckduckgo
    engine : duckduckgo
    shortcut : ddg
  - name : duckduckgo images
    engine : duckduckgo_images
    shortcut : ddi
  - name : twitter
    engine : twitter
    shortcut : tw
  - name : mojeek
    shortcut: mjk
    engine: xpath
    paging : True
    search_url : https://www.mojeek.com/search?q={query}&s={pageno}
    results_xpath: /html/body//div[@class="results"]/ul[@class="results-standard"]/li
    url_xpath : ./h2/a/@href
    title_xpath : ./h2
    content_xpath : ./p[@class="s"]
    suggestion_xpath : /html/body//div[@class="top-info"]/p[@class="top-info spell"]/a
    first_page_num : 1
    page_size : 10
  - name : torrentz
    engine : torrentz
    shortcut : tor
    url: https://torrentz2.eu/
    timeout : 3.0
  - name : startpage
    engine : startpage
    shortcut : sp
    timeout : 6.0
  - name : baidu
    engine : baidu
    shortcut : bd
  - name : baidu images
    engine : baidu_images
    shortcut : bdi
  - name : baidu videos
    engine : baidu_videos
    shortcut : bdv
  - name : sogou images
    engine : sogou_images
    shortcut : sgi
  - name : sogou videos
    engine : sogou_videos
    shortcut : sgv
  - name : 360 images
    engine : so_images
    shortcut : 360i
  - name : bing
    engine : bing
    shortcut : bi
  - name : bing images
    engine : bing_images
    shortcut : bii
  - name : bing videos
    engine : bing_videos
    shortcut : biv
  - name : bitbucket
    engine : xpath
    paging : True
    search_url : https://bitbucket.org/repo/all/{pageno}?name={query}
    url_xpath : //article[@class="repo-summary"]//a[@class="repo-link"]/@href
    title_xpath : //article[@class="repo-summary"]//a[@class="repo-link"]
    content_xpath : //article[@class="repo-summary"]/p
    categories : it
    timeout : 4.0
    shortcut : bb
  - name : free software directory
    engine : mediawiki
    shortcut : fsd
    categories : it
    base_url : https://directory.fsf.org/
    number_of_results : 5
    search_type : title
    timeout : 5.0
  - name : gentoo
    engine : gentoo
    shortcut : ge
  - name : gitlab
    engine : json_engine
    paging : True
    search_url : https://gitlab.com/api/v4/projects?search={query}&page={pageno}
    url_query : web_url
    title_query : name_with_namespace
    content_query : description
    page_size : 20
    categories : it
    shortcut : gl
    timeout : 10.0
  - name : github
    engine : github
    shortcut : gh
  - name : stackoverflow
    engine : stackoverflow
    shortcut : st
  - name : wikipedia
    engine : wikipedia
    shortcut : wp
    base_url : 'https://en.wikipedia.org/'
locales:
    en : English
    ar : العَرَبِيَّة (Arabic)
    bg : Български (Bulgarian)
    cs : Čeština (Czech)
    da : Dansk (Danish)
    de : Deutsch (German)
    el_GR : Ελληνικά (Greek_Greece)
    eo : Esperanto (Esperanto)
    es : Español (Spanish)
    fi : Suomi (Finnish)
    fil : Wikang Filipino (Filipino)
    fr : Français (French)
    he : עברית (Hebrew)
    hr : Hrvatski (Croatian)
    hu : Magyar (Hungarian)
    it : Italiano (Italian)
    ja : 日本语 (Japanese)
    nl : Nederlands (Dutch)
    pl : Polski (Polish)
    pt : Português (Portuguese)
    pt_BR : Português (Portuguese_Brazil)
    ro : Română (Romanian)
    ru : Русский (Russian)
    sk : Slovenčina (Slovak)
    sl : Slovenski (Slovene)
    sr : српски (Serbian)
    sv : Svenska (Swedish)
    tr : Türkçe (Turkish)
    uk : українська мова (Ukrainian)
    zh : 简体中文 (Chinese, Simplified)
    zh_TW : 繁体中文 (Chinese, Traditional)
doi_resolvers :
  oadoi.org : 'https://oadoi.org/'
  doi.org : 'https://doi.org/'
  doai.io  : 'http://doai.io/'
  sci-hub.tw : 'http://sci-hub.tw/'
default_doi_resolver : 'oadoi.org'
sentry:
  dsn: https://PI:EMAIL/2
```
**运行+caddy 反代**
```bash
mv searx/settings_et_dev.yml searx/settings.yml
gunicorn searx.webapp:app -b 127.0.0.1:8888 -D  # 一定要在mijisou目录下运行
wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubiBackup/doubi/master/caddy_install.sh && chmod +x caddy_install.sh && bash caddy_install.sh
echo "www.你的域名.com {
 gzip
 tls PI:EMAIL
 proxy / 127.0.0.1:8888
}" >> /usr/local/caddy/Caddyfile
/etc/init.d/caddy start
# 如果启动失败可以看 Caddy 日志:tail -f /tmp/caddy.log
```
**opensearch**
```xml
vim /root/mijisou/searx/templates/__common__/opensearch.xml
  {{ instance_name }}
  a privacy-respecting, hackable metasearch engine
  UTF-8
  {{ urljoin(host, url_for('static', filename='img/favicon.png')) }}
   searx metasearch
  {% if opensearch_method == 'get' %}
  {% if autocomplete %}
  {% endif %}
  {% else %}
  {% if autocomplete %}
  {% endif %}
  {% endif %}
```
**修改**
配置文件中改下名字 `mijisou/searx/static/themes/entropage/img` 中的 logo 图标自己换一下
**管理**
```bash
ps -aux
看一下哪个是 gunicorn 进程
kill 杀掉
gunicorn searx.webapp:app -b 127.0.0.1:8888 -D  # 再次强调,在 /mijisou 目录下运行
```
**配合 Cloudflare 的 CDN**
1. Cloudflare 创建 site
2. 域名商改 nameserver
3. 修改 Caddy 配置
  ```bash
  echo "www.你的域名.com:80 {
  gzip
  proxy / 127.0.0.1:8888
  }" >> /usr/local/caddy/Caddyfile
  ```
**磁盘占用**
服务运行一段时间后, `/var/lib/redis` 路径下会有一些缓存文件(貌似),直接删了就行
**redis 报错**
如果出现 "MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk. Commands that may modify the data set are disabled. Please check Redis logs for details about the error. Resque" 可以尝试以下命令
```bash
$ redis-cli
> config set stop-writes-on-bgsave-error no
```
或
```
vim /etc/redis.conf