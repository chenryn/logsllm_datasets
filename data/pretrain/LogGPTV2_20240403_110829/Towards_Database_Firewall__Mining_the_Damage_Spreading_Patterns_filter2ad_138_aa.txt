title:Towards Database Firewall: Mining the Damage Spreading Patterns
author:Kun Bai and
Peng Liu
Towards Database Firewall: Mining the Damage Spreading Patterns
Kun Bai Peng Liu
College of Information Sciences and Technology
The Pennsylvania State University
University Park, PA 16802, USA
{kbai, pliu}@ist.psu.edu
Abstract
Access control and integrity constraints are well known ap-
proaches to ensure data integrity in commercial database systems.
However, due to operational mistakes, malicious intent of insiders
or vulnerabilities exploited by outsiders, data stored in a database
can still be compromised. When the database is under an attack,
rolling back and re-executing the damaged transactions are the
most used mechanisms during system recovery. This kind of mech-
anism either stops (or greatly restricts) the database service dur-
ing repair, which causes unacceptable availability loss or denial-
of-service for mission critical applications, or may cause serious
damage spreading during on-the-ﬂy recovery where many clean
data items are accidentally corrupted by legitimate new trans-
actions. To resolve this dilemma, we devise a novel mechanism,
called database ﬁrewall in this paper. This ﬁrewall is designed to
protect good data from being corrupted due to damage spreading.
Pattern mining and Bayesian network techniques are adopted in
the framework to mine frequent damage spreading patterns and to
predict the data integrity in the face of attack. Our approach pro-
vides a probability based strategy to estimate the data integrity on
the ﬂy. With this feature, the database ﬁrewall is able to enforce a
policy of transaction ﬁltering to dynamically ﬁlter out the potential
spreading transactions.
1 Introduction
Transactional processing systems (e.g., database sys-
tems) have become increasingly sophisticated and been
critical to most cyber infrastructures, such as banking, e-
Commerce, military combat-ﬁeld command centers, etc.
Data availability and integrity are crucial for these infras-
tructures. However, it is well known that system vulnerabil-
ities cannot be completely eliminated, and such vulnerabil-
ities can be exploited by skillful attackers.
The topic of surviving the database system from an at-
tack has recently received considerable attention because of
the increasingly critical role that database systems are play-
ing in web-based services. People have seen more and more
cyber attacks for a few reasons. For instance, more criti-
cal and valuable information is now processed through the
web, which is world wide accessible. In addition, an insuf-
ﬁciently protected web based service is not very difﬁcult to
break through [20].
In general, web-based OLTP systems are often a
combination of the following components: web servers,
databases, and application speciﬁc code (e.g., server-side
transaction procedures). Usually, on one hand, back-bone
software infrastructure (e.g., the web servers and database)
is developed by the experienced developers who have com-
prehensive knowledge of the security. On the other hand,
the application oriented code is often developed under tight
schedules by programmers who lack security training. Ex-
perience with data-intensive applications (e.g., credit card
billing, online stock trading) has shown that a variety of
attacks can successfully fool traditional protection mech-
anisms. As we will overview shortly in section 3, there
are many possible attacks that could cause the integrity and
availability of database systems to be compromised.
Authentication based access control,
integrity con-
straints [7], concurrency control, replication, and recovery
mechanisms are the major approaches deployed in current
database systems to guarantee the correctness, availability,
and integrity of the stored information and data. However,
these security techniques are very limited in dealing with
data corruption intrusions. For example, access control can
be subverted by the inside attacker or the outside attacker
who has assumed an insider’s identity. Integrity constraints
are weak at prohibiting plausible but incorrect data.
Once a database system is attacked, database systems
armed with current security technologies cannot continue
providing satisfactory services because the integrity of
some data objects is compromised. Simply identifying and
repairing these data objects by undoing and redoing still
cannot ensure the database integrity largely because of a no-
ticeable characteristic of transactional processing systems,
namely damage spreading. Suppose T1 is a malicious trans-
action and its writeset contains corrupted data objects. After
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006transaction T2, T3, T4 (also called spreading transactions)
read a data object oi that has been updated by T1 (in wT1),
data objects that are updated by T2, T3, T4 will also be com-
promised. In this way, the damage will spread out and we
say that the transactions T2, T3, T4 are affected directly or
indirectly by T1.
As we will see in section 2, current database security
technologies are very limited in handling damage spread-
ing. In this paper, we aim on the following question: When
a database system is identiﬁed to be under an attack by in-
trusion detection systems (IDS), how can “damage spread-
ing” be prevented while continuously providing data ser-
vices? We deal with transaction level attacks, and assume
that a good intrusion detection system with a bounded de-
tection latency is applied. These attacks leave a unique
ﬁngerprint after them, namely damage spreading pattern.
We propose a novel database ﬁrewall prototype in this pa-
per, and an algorithm to mine the frequent damage spread-
ing pattern, and an algorithm to dynamically estimate the
data integrity using frequent spreading patterns. With these
features, the database ﬁrewall is able to enforce a policy
of transaction ﬁltering to dynamically ﬁlter out the poten-
tial spreading transactions. Extensive experimental stud-
ies have been conducted to evaluate system prototype de-
veloped. It is shown by empirical results that the database
ﬁrewall can meet the requirements of continuously provid-
ing services in accordance with differential requirements of
data quality.
The rest of the paper is organized as follows. Related
work is addressed in section 2. Some deﬁnitions used in
this paper, the architecture of the database ﬁrewall, and an
example of how damage spreads are presented in section 3.
The framework of frequent spreading pattern mining is pre-
sented in section 4. The idea of predicting the integrity of
data objects using Bayesian network are presented in sec-
tion 5. Empirical studies are conducted in section 6. Con-
clusion and future work are included in section 7.
2 Related Work
Our database ﬁrewall prototype is built upon several re-
cent and ongoing researches to achieve the goal of dynam-
ically predicting dirtiness of data and preventing damage
from spreading by enforcing ﬁltering policies on the ﬂy.
First critical step towards our goal is intrusion detec-
tion (ID), which has attracted many researchers. Existing
methodologies of ID are in two categories, statistical pro-
ﬁle [12] and known patterns of attacks [13]. These ID sys-
tems indeed make the system attack-aware but not attack-
resistant. In addition, they focus on identifying attacks on
OS and computer networks and cannot be directly applied
to detect malicious transactions. Some works on database
ID [8][18][19] are suitable to detect malicious transactions
or abnormal behaviors in database systems. However, they
are unable to detect the damage spread by executing normal
transactions.
In [4], a fault tolerant approach is introduced to survive
and recover a database from attacks. A color scheme for
marking damage and a notion of integrity suitable for par-
tially damaged databases are proposed to develop a mecha-
nism by which databases under attack could still be safely
used. The assumption of this approach is that each data
object has an accurate initial damage mark. To overcome
these limitations, a broader perspective has been introduced,
namely an intrusion tolerance database system (ITDB) [5].
Unlike the color scheme approach, ITDB focuses on dy-
namically assigning the damage mark and dealing with the
negative impact of inaccurate damage marks. Some work
has been done on OS-level database survivability. In [6],
checksums are smartly used to detect data corruption.
Failure handling aims at guaranteeing the atomicity of
database systems. Checkpoint techniques [22] are widely
used to preserve the integrity of data stored in databases by
rolling back the whole database system to a speciﬁc time
point. However, all work, done by both malicious and in-
nocent transactions, will be lost. Attack recovery has dif-
ferent goals from failure handling. It focuses on malicious
transactions that have been successfully executed. For tra-
ditional database systems, Data oriented attack recovery
mechanisms [21] recover compromised data by directly lo-
cating the most recent untouched version of each corrupted
data, and transaction oriented attack recovery [3] mecha-
nisms do attack recovery by identifying the transactions that
are affected by the attack through read-write dependencies
and rolls back those affected transactions.
Many database attack recovery methods, such as [21]
and [3], stops the database service during repair. To
overcome this limitation, in [1], an advanced transaction-
oriented attack recovery algorithm is provided that unwinds
not only the effects of each malicious transaction but also
the effects of any innocent transaction. However, the al-
gorithm [1] does not prevent the damage from spreading
during the detection latency or the on-the-ﬂy recovery pro-
cess. To overcome this limitation, in [2], an innovative mul-
tiphase damage containment approach is proposed, which
proactively contains (i.e., blocks accesses to) all the data
records damaged during the detection latency instantly af-
ter the malicious transaction is detected. This approach can
guarantee that no damage caused by malicious transaction
Bi will spread to any new update. However, the limita-
tion of multiphase containment is that it can cost substantial
data availability loss due to the initial containment phase
of this method in which a lot data items can be mistakenly
contained. Moreover, it may take a substantial amount of
time for those mistakenly contained data items to be un-
contained. As a result, current database survivability tech-
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006niques cause the following dilemma: they either stop (or
greatly restricts) the database service during repair, which
causes unacceptable availability loss or denial-of-service
for mission critical applications, or may cause serious dam-
age spreading during on-the-ﬂy recovery where many clean
data items are accidentally corrupted by legitimate new
transactions..
TransID
0001
0002
. . .
0010
. . .
ReadSet
WriteSet
. . .
. . .
Timestamp
PatientID
050617
050890
061098
. . .
P1
P2
P1
. . .
Table 1. An Example of Attack History H A
i
3 Preliminaries
In this section, we ﬁrst review a few most critical secu-
rity vulnerabilities, then introduce a set of formal deﬁnitions
used in this paper, and ﬁnally show an example of the SQL
injection attack that can cause serious damage to a database
system.
3.1 The Threat Model
In this paper, we deal with transaction level attacks in
database systems. Transaction level attacks are not new.
They have been studied in a good number of researches
[4][11][14]. Transaction level attacks can be done through a
variety of ways. First, the attacks can be done through web
applications. Among the OWASP top ten most critical web
application security vulnerabilities [17], three out of the top
6 vulnerabilities can directly enable the attacker to launch a
malicious transaction, which are listed as follows: (1) Un-
validated Input; (2) Cross Site Scripting (XSS) Flaws; (3)
Injection Flaws. Second, the attacks can be done through
identity theft. Finally, the attacks can be done through in-
sider attacks and insider attacks can be a more often used
means in launching malicious transactions.
3.2 Overview And Motivation
i=1Ti; (2) , ..., Tk , ...},
lation , where t.id, c.id
and r.id denote the table, column, and row, respectively.
An itemset is deﬁned as a non-empty set of data objects.
We denote an access sequence as =  by an or-
dered list of itemsets sm=(o1o2...on), where sm⊆wm is an
itemset updated by a transaction Tm at transaction time t,
and on is a data object. In table 2, each row represents an
access sequence. Although the access of objects largely de-
pends on the goal of an attacker, how the damage spreads
is determined by the predeﬁned transaction scripts once the
attack is done. Given the attack histories H A
i , we observe
that attack histories of similar attacks have similar damage
spreading patterns. Hence, our research problem becomes
to discover the damage spreading patterns and use these pat-
terns to estimate the integrity of data objects when a new
attack is detected.
3.3 An Example of Causing Damage
Spreading
In this section, we provide an example of an SQL in-
jection attack that convinces the database application to run
SQL code that is not intended. The example is shown as
follows.
Example. SQL Injection Attack. Although end-users do not
interact with back-end database servers directly, if user input is
not sanitized correctly, it is possible that unauthorized users can
leverage the applications to corrupt the integrity of data objects
stored in back-end databases. As an illustration, consider the
transaction templates used in the real clinic OLTP application:
1. Templates: update Customer set TSales=TSales+ $amts,
. . . , Year Accu Amt= Year Accu Amt + $amty where
Cust Num = ’$pid’;
. . .
update Customer set Point =Point - $points,... where
Cust Num = ’$pid’;
2. Injection: $pid=’ OR Cust Num like ’100%
3. Result:
update Customer set TSales=TSales+ $amts,
. . . where Cust Num = ’ ’ OR Cust Num like ’100%’;. . .
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006Patient
PID
P1
P2
P3
P4
P5
(B D)
(D)
(D E)>
(E)>
(A)>
a Each character denotes a data object represented by a
triplet (t.id,r.id,c.id).
Table 2. An Example of An Attack History H A
i
Grouped By Patient ID and Sorted By Trans-
action Time
The transaction script shown above is originally to up-
date the purchase accumulated at that moment of a customer
and calculate the reward points accordingly. However, if the
input parameters are not escaped correctly before inserting
into the query templates, it allows the attackers to change
the query structure by injecting a piece of SQL statement.
Thus, the where-clause is always true and some data objects
that the malicious user is not allowed to access are modiﬁed.
3.4 Two Types of Damage Spreading Pat-
terns
Figure 1 shows an example of the frequent spreading
patterns from a clinic OLTP application after the SQL Injec-
tion Attack as mentioned in above section. We observe that
there are two types of spreading patterns. We name them
one-hop spreading, and multi-hop spreading, respectively.
In most applications, if we cluster the read and update oper-
ations on a database, we would typically ﬁnd that most up-
dates are “bounded” within the scope of a certain database
entity (e.g., a patient in a health care database). That is,
when the value of an attribute of an entity is changed, all
the inputs used in the update are typically read from the
same entity’s attributes. As a result, the set of reads and
updates clustered around each entity form a cluster of oper-
ations called an island in our model. Nevertheless, it should
be noticed that due to the various relationships between en-
tities, as well studied in the ER model, cross-island updates
are not uncommon, and in many applications cross-island
updates might even be dominant. In such an update, one en-
tity’s attributes are used in changing the value of an attribute
of another entity. As shown in ﬁgure 1, damage spreading
within each circle (an island) illustrates a one-hop spreading
pattern, such as . Damage spreading cross-
ing islands illustrates a multi-hop spreading pattern, such as
island a ⇒ island b.
1, ..., oa
Based on this observation, we discover that the attack
histories of similar attacks have similar damage spreading
patterns. It can be seen that if such frequent spreading pat-
terns are identiﬁed, pattern-based integrity estimation can
be applied and an access policy can be quickly and dynami-
a1
Island a
c1
b1
Island b
Table A
Island c
Table B
One-hop DS
Multi-hop DS
Figure 1. An Example of Two Types of Dam-
age Spreading
cally enforced to ﬁlter out potential damage spreading trans-
actions while the database system continuously provide ser-
vices in the face of an attack.
3.5 Database Firewall Architecture
As shown in ﬁgure 2, the database ﬁrewall architecture
is built upon the top of a traditional “off-the-shelf” DBMS.
In general, the database ﬁrewall has two major components:
ofﬂine and online. In ofﬂine manner, after the database sys-
tem is recovered from an attack, damage spreading patterns
are updated by mining the attack histories that are com-
bined the newest attack history with previous attack histo-
ries stored in Attack Histories. In online manner, once a new