### 6.4.1.4. System Calls

The PowerPC system call instruction is used by programs to generate a system call exception, which causes the processor to prepare and execute the system call handler in the kernel. The system call exception is synchronous. Hundreds of system calls form a well-defined set of interfaces that serve as entry points into the kernel for user programs.

#### POSIX
A standard set of system calls, along with their behavior, error handling, and return values, is defined by the Portable Operating System Interface (POSIX) standard. This standard defines an interface rather than its implementation. Mac OS X provides a large subset of the POSIX API.

The term "POSIX" was suggested by Richard Stallman. According to POSIX documentation, it should be pronounced as "pahz-icks," similar to "positive," and not as "poh-six" or other variations.

In summary, a hardware interrupt from an external device generates an external interrupt exception, a system call generates a system call exception, and other situations result in various types of exceptions.

### 6.4.2. Implementing System Entry Mechanisms

PowerPC exceptions are the fundamental means for propagating any kind of interrupt (other than ASTs), whether hardware- or software-generated. Before discussing how some of these exceptions are processed, let's examine the key components of the overall PowerPC exception-processing mechanism on Mac OS X:

- **Kernel Exception Vectors**: These reside in a designated memory area starting at physical memory address 0x0.
- **PowerPC Exception-Handling Registers**: These include SRR0, SRR1, and special-purpose registers like SPRG0, SPRG1, SPRG2, and SPRG3.
- **System Linkage Instructions**:
  - `rfid` (64-bit) and `rfi` (32-bit): Used for returning from interrupts.
  - `sc`: Used to cause a system call exception.
- **Machine-Dependent Thread State**: Includes memory areas called exception save areas, which are used for saving various types of context during exception processing.

A system linkage instruction connects user-mode and supervisor-mode software. For example, using the `sc` instruction, a program can call on the operating system to perform a service. Conversely, after performing the service, the operating system can return to user-mode software using another system linkage instruction, such as `rfid`.

### 6.4.2.1. Exceptions and Exception Vectors

The `__VECTORS` segment of the kernel executable (Figure 65) contains the kernel's exception vectors. As discussed in Chapter 4, BootX copies these vectors to their designated location (starting at 0x0) before transferring control to the kernel. These vectors are implemented in `osfmk/ppc/lowmem_vectors.s`.

**Figure 65. The Mach-O segment containing the exception vectors in the kernel executable**

```bash
$ otool -l /mach_kernel
...
Load command 2
cmd LC_SEGMENT
cmdsize 124
segname __VECTORS
vmaddr 0x00000000
vmsize 0x00007000
fileoff 3624960
filesize 28672
maxprot 0x00000007
initprot 0x00000003
nsects 1
flags 0x0
Section
sectname __interrupts
segname __VECTORS
addr 0x00000000
size 0x00007000
offset 3624960
align 2^12 (4096)
reloff 0
nreloc 0
flags 0x00000000
reserved1 0
reserved2 0
...
```

Table 51 lists various PowerPC processor exceptions and their details. Most exceptions are subject to one or more conditions; for example, most exceptions can occur only when no higher-priority exception exists. Similarly, exceptions caused by failed effective-to-virtual address translations can occur only if address translation is enabled. Depending on the specific hardware or whether the kernel is being debugged, some exceptions listed in Table 51 may be inconsequential.

**Figure 66. The kernel's exception vectors**

```assembly
; osfmk/ppc/lowmem_vectors.s
...
#define VECTOR_SEGMENT .section __VECTORS, __interrupts
VECTOR_SEGMENT
...
.globl EXT(lowGlo)
EXT(lowGlo):
.globl EXT(ExceptionVectorsStart)
EXT(ExceptionVectorsStart):
baseR:
...
. = 0x100 ; T_RESET
.globl EXT(ResetHandler)
.L_handler100:
...
. = 0x200 ; T_MACHINE_CHECK
.L_handler200:
...
. = 0x300 ; T_DATA_ACCESS
.L_handler300:
...
. = 0xC00 ; T_SYSTEM_CALL
.L_handlerC00:
...
```

The exception vectors for the x86 version of Darwin are implemented in `osfmk/i386/locore.s`.

### 6.4.2.2. Exception-Handling Registers

- **SRR0 (Machine Status Save/Restore Register 0)**: A special branch-processing register used to save machine status on interrupts and restore it upon return from interrupts. When an interrupt occurs, SRR0 is set to the current or next instruction address, depending on the nature of the interrupt.
- **SRR1**: Loaded with interrupt-specific information when an interrupt occurs and mirrors certain bits of the Machine State Register (MSR).
- **Special-Purpose Registers (SPRG0, SPRG1, SPRG2, SPRG3)**: Used as support registers in an implementation-dependent manner during exception processing. For example, the Mac OS X kernel uses SPRG2 and SPRG3 to save interrupt-time general-purpose registers GPR13 and GPR11, respectively, and SPRG0 to hold a pointer to the per_proc structure.

### 6.4.2.3. System Linkage Instructions

- **System Call**: When a system call is invoked from user space, GPR0 is loaded with the system call number, and the `sc` instruction is executed. The effective address of the instruction following the system call instruction is placed in SRR0, certain bit ranges of the MSR are placed into the corresponding bits of SRR1, certain bits of SRR1 are cleared, and a system call exception is generated. The processor then fetches the next instruction from the well-defined effective address of the system call exception handler.
- **Return from Interrupt**: `rfid` (return-from-interrupt-double-word) is a privileged, context-altering, and context-synchronizing instruction used to continue execution after an interrupt. Upon execution, the next instruction is fetched from the address specified by SRR0. The 32-bit counterpart is the `rfi` instruction.

### 6.4.2.4. Machine-Dependent Thread State

Each thread in the kernel contains a machine-dependent state, represented by a `machine_thread` structure. Figure 68 shows a portion of the `machine_thread` structure, including fields such as:

- **pcb and upcb**: Pointers to saved kernel-state and user-state contexts.
- **curctx, deferctx, and facctx**: Encapsulate the contexts for the floating-point and AltiVec facilities.
- **vmmCEntry and vmmControl**: Pointers to data structures related to the kernel's virtual machine monitor (VMM) facility.
- **ksp**: Points to the top of the thread's kernel stack or is zero.
- **PerProc**: Pointer to the current per-processor data.

**Figure 68. Structure for a thread's machine-dependent state**

```c
// osfmk/kern/thread.h
struct thread {
    ...
    struct machine_thread machine;
    ...
};

// osfmk/ppc/thread.h
struct facility_context {
    savearea_fpu *FPUsave; // FP save area
    savearea *FPUlevel; // FP context level
    unsigned int FPUcpu; // last processor to enable FP
    unsigned int FPUsync; // synchronization lock
    savearea_vec *VMXsave; // VMX save area
    savearea *VMXlevel; // VMX context level
    unsigned int VMXcpu; // last processor to enable VMX
    unsigned int VMXsync; // synchronization lock
    struct thread_activation *facAct; // context's activation
};

typedef struct facility_context facility_context;

struct machine_thread {
    savearea *pcb; // the "normal" save area
    savearea *upcb; // the "normal" user save area
    facility_context *curctx; // current facility context pointer
    facility_context *deferctx; // deferred facility context pointer
    facility_context facctx; // "normal" facility context structure
    struct vmmCntrlEntry *vmmCEntry; // pointer to current emulation context
    struct vmmCntrlTable *vmmControl; // pointer to VMM control table
    ...
    unsigned int ksp; // top of stack or zero
    unsigned int preemption_count;
    struct per_proc_info *PerProc; // current per-processor data
    ...
};
```

### 6.4.2.5. Exception Save Areas

Save areas are fundamental to xnu's exception processing. Key characteristics include:

- **Storage**: Save areas are stored in pages, with each page logically divided into an integral number of save area slots. A save area never spans a page boundary.
- **Addressing**: The kernel accesses save areas using both virtual and physical addressing. Low-level interrupt vectors refer to save areas using their physical addresses to avoid exceptions.
- **Allocation**: Save areas can be permanent or dynamically allocated. Permanent save areas are allocated at boot time, and eight "back-pocket" save areas are also allocated for emergencies.
- **Management**: Save areas are managed using two global free lists: the save area free list and the save area free pool. Each processor has a local list. The pool contains entire pages, with each slot within a page marked as free or otherwise.

A simple program can display some save-area-related sizes used by the kernel:

```c
// savearea_sizes.c
#include <stdio.h>
#include <stdlib.h>
#define XNU_KERNEL_PRIVATE
#define __APPLE_API_PRIVATE
#define MACH_KERNEL_PRIVATE
#include <mach/mach_types.h>

int main(void) {
    printf("Size of a save area structure in bytes = %ld\n", sizeof(savearea));
    printf("# of save areas per page = %ld\n", sac_cnt);
    printf("# of save areas to make at boot time = %ld\n", InitialSaveAreas);
    printf("# of save areas for an initial target = %ld\n", InitialSaveTarget);
    exit(0);
}
```

```bash
$ gcc -I /work/xnu -Wall -o savearea_sizes savearea_sizes.c
$ ./savearea_sizes
Size of a save area structure in bytes = 640
# of save areas per page = 6
# of save areas to make at boot time = 48
# of save areas for an initial target = 24
```

Structure declarations for the various save area types are contained in `osfmk/ppc/savearea.h`.

**osfmk/ppc/savearea.h**

```c
#ifdef MACH_KERNEL_PRIVATE
typedef struct savearea_comm {
    // ... fields common to all save areas
    // ... fields used to manage individual contexts
} savearea_comm;
#endif

#ifdef BSD_KERNEL_PRIVATE
typedef struct savearea_comm {
    unsigned int save_000[24];
} savearea_comm;
#endif

typedef struct savearea {
    savearea_comm save_hdr;
    // general context: exception data, all GPRs, SRR0, SRR1, XER, LR, CTR,
    // DAR, CR, DSISR, VRSAVE, VSCR, FPSCR, Performance Monitoring Counters,
    // MMCR0, MMCR1, MMCR2, and so on
    ...
} savearea;

typedef struct savearea_fpu {
    savearea_comm save_hdr;
    ...
} savearea_fpu;
```