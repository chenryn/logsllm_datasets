The purpose of `--filter` is to focus on only a few tests. This is way too
much noise:
    > deno test -A --filter "streaming api errors while streaming"
    Check file:///V:/dax/mod.test.ts
    Check file:///V:/dax/src/commands/args.test.ts
    Check file:///V:/dax/src/commands/mkdir.test.ts
    Check file:///V:/dax/src/commands/pwd.test.ts
    Check file:///V:/dax/src/commands/rm.test.ts
    Check file:///V:/dax/src/commands/test.ts
    Check file:///V:/dax/src/common.test.ts
    Check file:///V:/dax/src/console/confirm.test.ts
    Check file:///V:/dax/src/console/multiSelect.test.ts
    Check file:///V:/dax/src/console/progress/format.test.ts
    Check file:///V:/dax/src/console/progress/mod.test.ts
    Check file:///V:/dax/src/console/prompt.test.ts
    Check file:///V:/dax/src/console/select.test.ts
    Check file:///V:/dax/src/deps.test.ts
    Check file:///V:/dax/src/pipes.test.ts
    Check file:///V:/dax/src/request.test.ts
    running 1 test from ./mod.test.ts
    streaming api errors while streaming ...
    Uncaught error from ./mod.test.ts FAILED
    should get stdout when piped ... cancelled (0ms)
    should escape arguments ... cancelled (0ms)
    should not get stdout when inherited (default) ... cancelled (0ms)
    should not get stdout when null ... cancelled (0ms)
    should capture stdout when piped ... cancelled (0ms)
    should capture stdout when inherited and piped ... cancelled (0ms)
    should not get stderr when inherited only (default) ... cancelled (0ms)
    should not get stderr when null ... cancelled (0ms)
    should capture stderr when piped ... cancelled (0ms)
    should capture stderr when inherited and piped ... cancelled (0ms)
    should get combined stdout and stderr when specified ... cancelled (0ms)
    should not get combined stdout and stderr when not calling combined output ... cancelled (0ms)
    should error setting stdout after getting combined output ... cancelled (0ms)
    should throw when exit code is non-zero ... cancelled (0ms)
    should change the cwd, but only in the shell ... cancelled (0ms)
    allow setting env ... cancelled (0ms)
    allow setting multiple env ... cancelled (0ms)
    set var for command ... cancelled (0ms)
    variable substitution ... cancelled (0ms)
    stdoutJson ... cancelled (0ms)
    CommandBuilder#json() ... cancelled (0ms)
    stderrJson ... cancelled (0ms)
    should handle interpolation ... cancelled (0ms)
    should handle interpolation beside args ... cancelled (0ms)
    should handle providing array of arguments ... cancelled (0ms)
    raw should handle providing array of arguments ... cancelled (0ms)
    raw should handle text provided ... cancelled (0ms)
    raw should handle command result ... cancelled (0ms)
    command builder should build ... cancelled (0ms)
    build with extras ... cancelled (0ms)
    build with extras overriding the defaults ... cancelled (0ms)
    should handle boolean list 'or' ... cancelled (0ms)
    should handle boolean list 'and' ... cancelled (0ms)
    should support custom command handlers ... cancelled (0ms)
    should not allow invalid command names ... cancelled (0ms)
    should unregister commands ... cancelled (0ms)
    sleep command ... cancelled (0ms)
    test command ... cancelled (0ms)
    exit command ... cancelled (0ms)
    should provide result from one command to another ... cancelled (0ms)
    should actually change the environment when using .exportEnv() ... cancelled (0ms)
    exporting env should modify real environment when something changed via the api ... cancelled (0ms)
    cwd should be resolved based on cwd at time of method call and not execution ... cancelled (0ms)
    should handle the PWD variable ... cancelled (0ms)
    timeout ... cancelled (0ms)
    piping to stdin ... cancelled (0ms)
    streaming api not piped ... cancelled (0ms)
    streaming api then non-streaming should error ... cancelled (0ms)
    streaming api ... cancelled (0ms)
    streaming api errors while streaming ... cancelled (0ms)
    command args ... cancelled (0ms)
    command .lines() ... cancelled (0ms)
    shebang support ... cancelled (0ms)
    basic logging test to ensure no errors ... cancelled (0ms)
    setting logging ... cancelled (0ms)
    printCommand ... cancelled (0ms)
    environment should be evaluated at command execution ... cancelled (0ms)
    test remove ... cancelled (0ms)
    test mkdir ... cancelled (0ms)
    copy test ... cancelled (0ms)
    move test ... cancelled (0ms)
    pwd: pwd ... cancelled (0ms)
    progress ... cancelled (0ms)
    $.commandExists ... cancelled (0ms)
    $.commandExistsSync ... cancelled (0ms)
    $.stripAnsi ... cancelled (0ms)
    $.dedent ... cancelled (0ms)
    running 0 tests from ./src/commands/args.test.ts
    running 0 tests from ./src/commands/mkdir.test.ts
    running 0 tests from ./src/commands/pwd.test.ts
    running 0 tests from ./src/commands/rm.test.ts
    running 0 tests from ./src/commands/test.ts
    running 0 tests from ./src/common.test.ts
    running 0 tests from ./src/console/confirm.test.ts
    running 0 tests from ./src/console/multiSelect.test.ts
    running 0 tests from ./src/console/progress/format.test.ts
    running 0 tests from ./src/console/progress/mod.test.ts
    running 0 tests from ./src/console/prompt.test.ts
    running 0 tests from ./src/console/select.test.ts
    running 0 tests from ./src/deps.test.ts
    running 0 tests from ./src/pipes.test.ts
    running 0 tests from ./src/request.test.ts
     ERRORS 
    ./mod.test.ts (uncaught error)
    error: (in promise) Error: Exited with code: 1
              throw new Error(`Exited with code: ${code}`);
                    ^
        at CommandChild.pipedStdoutBuffer (file:///V:/dax/src/command.ts:545:17)
    This error was not caught from a test and caused the test runner to fail on the referenced module.
    It most likely originated from a dangling promise, event/timeout handler or top-level code.
     FAILURES
    ./mod.test.ts (uncaught error)
    FAILED | 0 passed | 68 failed | 90 filtered out (816ms)
    error: Test failed
At the minimum, we should remove all those "cancelled" test outputs and maybe
only say how many tests were ignored in a file with matches. For files with
zero matches, we could maybe have some progress message output that gets
overwritten and finalizes saying how many files were ignored.