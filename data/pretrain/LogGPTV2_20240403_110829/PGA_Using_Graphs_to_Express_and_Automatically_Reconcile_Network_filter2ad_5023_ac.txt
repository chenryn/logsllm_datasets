server EPs and the packets must pass through a DPI network
service. The implementation should also take care of for-
warding to the right destination EP which might be decided
at the source EP or at a network function box (e.g. load bal-
ancer). In the degenerate case where E and E’ are singletons,
B is the trivial predicate that always returns true, and P is the
empty path expression, an edge reduces to a speciﬁcation of
point-to-point forwarding.
A model can have multiple directed edges from an EPG,
as long as the edge classiﬁers cover non-overlapping ﬂow
spaces. Edge whitelist rules are stateful, such that the re-
verse trafﬁc on established connections (e.g. TCP) is also al-
lowed. Two types of edges can be speciﬁed. A whitelist edge
is depicted as a solid line and describes an allowed com-
munication, e.g., from IT to Engg in Fig. 3. A conditional
edge is depicted as a dotted line and speciﬁes a service chain
requirement which is instantiated if and only if the edge’s
match condition overlaps the classiﬁer of a whitelist edge in
a different policy graph. A conditional edge, by itself, does
not allow communication. Fig. 3(d) illustrates the utility
of conditional edges. The Data Center admin’s intent is not
to allow all communication from Campus to DC but to have
any communication allowed by any other graph pass through
the speciﬁed service chain. If no policy graph has a whitelist
edge from Campus to DC, then the service chain require-
ment is not needed in the fully composed policy graph.
4.2 Primitives Supporting Composition
Network Function Box Behavior: To enable automatic
composition of service function chains, PGA models need
to specify the packet processing behavior of each network
function box. For this, PGA uses the open source Pyretic
SDN language [34], and extends it to enable programming
based on EPGs. This allows a user to specify the full be-
havior of a network function box as a Pyretic program; we
term this white boxing. Whiteboxing is not a hard require-
ment. In cases where middleboxes are used for which the
internal logic is not known, we support gray boxing. Herein,
the corresponding network function box is described by a
Pyretic program that captures only the high-level bounding
behavior of the middlebox. For example, a commercial L7-
aware load balancer can be gray boxed as match(dstip
= Web.virtIP) » modify(dstip = Web.RIPs),
where Web.RIPs is a set of real IP addresses of destination
web server EPs and Web.virtIP is the exposed virtual ad-
dress of the web service. While the precise mapping of an
input packet to a destination IP address is not known, the
model accurately bounds the output header packet space of
the middlebox.
34We note that whiteboxing and grayboxing may not cover
every possible NFV scenario. The current PGA framework
does not consider network functions that duplicate and for-
ward packets along different paths; this also implies that a
network function box is allowed to modify the destination
address to only hosts within the destination EPG of the edge
that the box belongs to. Extending PGA to handle those
cases is our future work.
Label Mapping: Policy composition combines the EPGs
of one graph with EPGs of a second graph, potentially caus-
ing exponential growth in the size of the composed graph as
the number of graphs to be composed increases. Usually,
however, the vast majority of EPG combinations are mutu-
ally exclusive, i.e., it is impossible for any EP to belong to
both of the original EPGs that are being combined. For ex-
ample, if all IT dept. EPs are always located in the datacen-
ter and never in the campus network, then a combined EPG
that corresponds to EPs that are both in the IT dept. and in
the campus network is guaranteed to be the empty set and
thus does not need to be generated in the composed policy
graph. The label mapping input to PGA enables composi-
tion to avoid generating such impossible EPG combinations
by capturing the relationship between labels across different
label trees (e.g. tenant and location label trees). The label
mapping is a symmetric relation F ⊆ L × L, where L is the
set of all leaf labels. If labels (x, y) ∈ F , then a single EP
can be assigned both labels x and y. For example, the label
mapping shown in Fig. 3 indicates that an IT EP can also
be a Zone-A EP, i.e., the IT dept. is located in the network
Zone-A. For simplicity, the syntax used to specify the label
mapping can give only one side of the symmetric relation.
Also, it can use non-leaf labels as a shorthand for all of the
leaf label descendants. The detailed use of label mapping to
limit composition complexity is covered in §5.
Composition Constraints: A policy graph can ﬂexibly
specify constraints on the policy changes that are allowed
when the policy graph is to be composed with any other pol-
icy graph. Constraints can be speciﬁed for any ordered pair
of EPGs in a policy graph. The constraints can limit the ad-
dition of new classiﬁers that would allow additional trafﬁc
from source EPG to destination EPG. For example, a policy
that strictly allows only port 80 trafﬁc from a source EPG
to a destination EPG can use constraints to prohibit addi-
tional ports from ever being allowed even if they are allowed
for the same EPG pair by whitelists in other policy graphs.
Classiﬁer constraints can also limit the removal of allowed
trafﬁc as a result of composition.
Regarding service chain composition, the constraints can
limit the behavior of function boxes that are added to ser-
vice chains when the policy graph is composed with an-
other graph. Speciﬁcally, the constraints can place limits on
the packet header ﬁeld modiﬁcations and packet drop opera-
tions that additional function boxes can perform on packets.
Since the behavior of function boxes is modeled using our
extended Pyretic, composition analysis can check whether
adding a speciﬁc function box to a given service chain would
violate the constraints given by the policy graphs that are be-
ing composed together.
Match
port 80
port 88
*
Classiﬁer
Add Remove Drop
Function Box
Modify
N
N
DSCP=16,18,20
Y
N
Y
Table 1: Example composition constraints.
Table 1 shows example composition constraints from a
source EPG to a destination EPG. The table indicates that
port 80 trafﬁc cannot be disallowed through composition
with other graphs, and function boxes that are added can-
not drop packets but are allowed to modify the DSCP packet
ﬁeld to a set of speciﬁc values. The table also shows that
port 88 cannot be allowed through composition, but other-
wise all other trafﬁc can be allowed, with no restriction on
function boxes. Composition constraints could more gener-
ally be speciﬁed using a constraint language such as Prolog.
A commonly needed special case for composition con-
straints occurs when a policy graph speciﬁes that no addi-
tional trafﬁc should be allowed to or from a particular EPG.
Composition constraints can express that, i.e., in a policy
graph, all EPG ordered pairs that contain the EPG have the
constraint that composition is prohibited from changing the
range of allowed trafﬁc or the service chain. We can more
conveniently and concisely represent this set of constraints
by marking the EPG as “exclusive”. For example, the Qn
EPG in Fig. 3 is an exclusive EPG, preventing other policies
from thwarting the intention of the policy writer to redirect
all trafﬁc from quarantined hosts to a remediation server.
5. GRAPH COMPOSITION
A key goal of PGA is to enable policy writers to spec-
ify their policies independently and delegate the composition
process to the system. The system should compute the union
of all policies from the input graphs, subject to composition
constraints, to generate a composed graph. The composed
graph should be well-formed (§2), i.e., comprise purely mu-
tually exclusive EPGs to allow the PGA runtime to deter-
mine the unique EPG for each EP, and then apply the associ-
ated network policies to the EP (or determine that the EP is
not in any EPG and so no communication for it is allowed).
Composition in PGA is different from the union (parallel)
and sequential composition operators used in NetKAT [12]
and Pyretic [34]. Their union (parallel) operator applies each
of the constituent policies to a different copy of the input
packet and then computes the union of their output packets
while the sequential operator applies the output of one pol-
icy as input to the other. In PGA, we compute the union of
the policies themselves based on set theoretic Venn diagram
analysis. A PGA policy in a simpliﬁed form is a combina-
tion of match + action: EPG labels and edge classiﬁers form
the match space while edge types and service chains consti-
tute the action part. Conceptually, PGA composition takes
the union of the match spaces of the input graphs: inheriting
actions from the input graphs for the non-overlapping match
spaces, and combining actions for the overlapping (intersect-
ing) match spaces subject to composition constraints. Note
35that EPGs can have overlapping EP membership speciﬁed as
arbitrary Boolean expressions over the label space.
We accomplish this composition in two steps. We ﬁrst
normalize input graphs (§5.1) by transforming their EPGs
into an equivalent set of disjoint EPGs to easily identify the
overlapping space and generate well-formed policies in the
composed graph. We then compute the union of the nor-
malized graphs (§5.2) by creating directed edges equivalent
to the union of the original policies, except where doing
so would violate the invariants given by composition con-
straints. The overlapping policies, identiﬁed by a common
classiﬁer for the same src-dst EPG pair in the normalized
graphs, can require two service chains to be merged in the
union. We use composition constraints to select the network
function boxes to include in the combined service chain.
To select an appropriate service order, PGA detects depen-
dencies between function boxes based on modeling of their
packet processing behaviors, and use the dependencies to de-
termine valid orderings. Additionally, we detect possible re-
maining conﬂicts that should be ﬂagged to policy writers.
5.1 Normalization of Input Graphs
In normalization, we compute a set of globally disjoint
EPGs which represent the equivalence classes of endpoints
to which the same set of policies should be applied. We
then transform each input graph into an equivalent normal-
ized form where policies are expressed only with respect to
the newly computed EPGs.
The ﬁrst step is to translate input graph EPGs into EPGs
with globally disjoint membership. Second, composition
constraints from the input graph must be replicated and
merged to the normalized graph. Third, edge policies from
the input graph must be replicated and merged to the nor-
malized graph, subject to the composition constraints added
in the previous step.
The abstractions of label hierarchy and label mapping fa-
cilitate the translation of input graph EPGs into globally dis-
joint EPGs in the normalized graph. As described in §4,
label hierarchy captures the sets of mutually exclusive la-
bels. Each EPG in the input graph is ﬁrst split into locally
disjoint EPGs by algebraically rewriting the EPG’s member-
ship predicate expression into an equivalent positive disjunc-
tive normal form. Each term in the resulting expression de-
scribes a locally disjoint EPG. More speciﬁcally, we replace
each composite label in the expression with its leaf label
equivalents. Then, we expand the expression and remove
any negated labels by replacing them with the disjunction of
all the other sibling leaf labels in the hierarchy (since they
are mutually exclusive). Finally, we convert the expression,
which is now using only leaf labels in positive form, into
disjunctive normal form, i.e., ORing a collection of terms
where each term is the AND of leaf labels. Any conjunc-
tive term that has any mutually exclusive labels must be the
empty set, and so we delete these empty terms from the ex-
pression. Each remaining conjunctive term deﬁnes an EPG
that is disjoint within the same input graph.
To obtain globally disjoint EPGs, we may need to further
divide each locally disjoint EPG. We take each conjunctive
term and check the label mapping to identify all other poten-
tially related labels, i.e., labels that are transitively related
to the labels in the term. For example, if the term is label1
AND label2, we check the label mapping starting from each
of these labels and add the result to the conjunction. Sup-
pose this adds label3 AND label4 AND label5. If any of the
resulting labels are mutually exclusive, e.g., Nml and Qn,
we split the terms accordingly. For example, if label4 and
label5 are mutually exclusive, we form two terms: 1) label1
AND label2 AND label3 AND label4, and 2) label1 AND
label2 AND label3 AND label5. We continue splitting the
terms until no term has mutually exclusive labels. This ﬁnal
set of terms corresponds to globally disjoint EPGs.
Once the normalized EPGs are generated, composition
constraints from the input graph need to be replicated to the
normalized graph. In particular, suppose that EPG S in the
original input graph is translated to normalized EPGs S1, S2,
..., Sm, and input graph EPG D is normalized to EPGs D1,
D2, ..., Dn.
If the input graph has constraints for source
EPG S and destination EPG D, then the constraints must
be replicated in the normalized graph for ordered EPG pairs
(Si, Dj), ∀i = 1..m, ∀j = 1..n.
Composition constraints may need to be merged in addi-
tion to being replicated. If the original graph has constraints
for EPGs (G, H), and these EPGs overlap with EPGs (S, D),
then any constraint speciﬁed for (G, H) must be merged with
the constraint for (S, D) in order to construct the constraints
for the normalized EPGs that constitute the overlap. Merg-
ing composition constraints entails adopting the union of re-
strictive invariants of two overlapping constraints. However,
conﬂicts may be detected if an invariant from one composi-
tion constraint, e.g., never allow port 80 trafﬁc, is opposed
by an invariant from another composition constraint, e.g.,
never deny port 80 trafﬁc. Such conﬂicts are error condi-
tions ﬂagged to operators.
Finally, normalization replicates and merges edges from
the original graph’s EPG pairs to the normalized graph’s
EPG pairs to express equivalent policies. If EPG S has an
edge to EPG D in the original graph, then the original edge
is replicated to the normalized graph EPGs (Si, Dj), ∀i =
1..m, ∀j = 1..n. Any edges for (G, H) need to be merged
with those of (S, D) on the normalized EPG pairs that consti-
tute the overlap. This merging is governed by the (merged)
composition constraints.
5.2 Graph Union
In graph union, for each globally disjoint EPG that may
be in multiple normalized graphs with different policies, we
compute the union of those policies to obtain the ﬁnal pol-
icy that should be applied to its endpoints. This involves
merging whitelists and service chains from multiple edges
without violating each other’s constraints.
In normalized form, EPGs in two different graphs are ei-
ther disjoint or equal. Partial overlap is not possible. This
property enables multiple normalized graphs to be composed
together using a simple union operation. The composed graph
has the union of all the EPGs of the individual graphs. The
union operation also copies and merges composition con-
36straints and directed edges from the individual graphs to the
composed graph. Merging composition constraints is per-
formed identically as described in §5.1.
As edges from the individual graphs are added to the com-
posed graph, they are checked against the composition con-
straints for the source and destination EPGs. This check de-
termines whether an edge’s classiﬁer satisﬁes the constraints
or needs to be narrowed to be in compliance with them. If
a new edge passes this test with a non-null surviving clas-
siﬁer, then it may be added or merged with existing edges
from source to destination EPGs.
The ﬁrst step in merging the new edge is to ﬁnd the in-
tersection of its classiﬁer ﬂow space with the existing clas-
siﬁers. For the non-intersecting classiﬁer space of the new
edge, the new edge and its function boxes can be added di-
rectly, subject to function box composition constraints. For
any intersecting classiﬁer space, merging is needed. We
break down the intersecting space into a matching set of sub-
spaces in the existing policies and for the new edge. This al-
lows us to merge, for each subspace, one existing edge with
one new edge.
For each pair of edges that need to be merged, if either
edge has a service chain for the intersecting space, then ser-
vice function composition is required that combines function
boxes from the service chains of both edges. An important
challenge is to determine a proper ordering of the service
functions in the composed chain. PGA determines the order
by analyzing function box actions on different ﬂow spaces.
The analysis identiﬁes input-output dependencies between
different function boxes and constructs an ordering that is
consistent with the dependencies. In addition, the analysis
identiﬁes potential function box conﬂicts in which two boxes
perform apparently incompatible operations on a common
packet space. For example, if one function box drops all
packets in a packet space for which the other function box
has a byte counting action, then there is likely a conﬂict. Fi-
nally, a set of heuristics is used to further improve ordering
after satisfying detected dependencies and ﬂagging possible
conﬂicts.
The key to enabling PGA to compose and merge service
function chains automatically is that the packet processing
behavior of function boxes is explicitly exposed to the PGA