Thus VH and VL are representable in σ and ρ and stored in vH and
vL respectively. Lemma 3.1 allows us to generalize the semantics
of unsigned full-multiplication instructions in [18] naturally.
Figure 6 gives the semantics of the remaining CryptoLine in-
structions. Split instructions are another application of Lemma 3.1.
The unsigned uspl vH vL a n instruction splits the bit string for a of
an unsigned type into destinations vH and vL of the same type. The
n least significant bits are stored in vL and the remaining bits are
stored in vH . When a is of a signed type, sspl vH vL a n stores the
n least significant bits of a in the unsigned destination vL and the
remaining bits in the signed destination vH . The join instructions
are almost trivial with Lemma 3.1. The unsigned ujoin v aH aL
stores the concatenated bit strings of unsigned aH and aL in v of
the type 2 • ρ. The signed sjoin v aH aL stores the concatenation
of the signed aH and unsigned aL in v of the type 2 • σ.
The unsigned concatenation followed by left-shift instruction
ucshl vH vL aH aL n concatenates the bit strings of unsigned aH
with aL, shifts the concatenated bit string to the left by n bits, and
keeps the value in V . It then decomposes V into two parts VH and
VL with VL representable in ρ. If VH is also representable in ρ, the bit
strings representing VH and VL ÷ 2n are stored in the destinations
vH and vL of the type ρ respectively. Note that the n least significant
bits of VL are 0 and VL ÷ 2n shifts the bit string of VL by n bits to
the right. The signed variant scshl vH vL aH aL n concatenates the
signed bit string of aH with the unsigned bit string of aL, shifts the
concatenated bit string to the left by n bits, and keeps the value in V .
V is again decomposed into VH and VL with VL representable in the
type ρ of vL. If VH is representable in the compatible signed type
σ, the bit strings of VH and VL ÷ 2n are stored in the destinations
vH and vL of the types σ and ρ respectively. Both variants err if
VH is not representable in the type of vH .
The cast v@τ a updates v with the bit string representing the
value of a if the value is representable in the type τ of v. Otherwise,
it yields the error environment.
A predicate ϕ holds in an environment ϵ (written ϵ |= ϕ) if
ϕ evaluates to true by substituting its variables for the respective
values represented by their bit strings in their types. The assert P ∧∧
Q instruction checks if P ∧ Q holds in the current environment. If
not, the error environment is yielded. The assume P∧∧Q instruction
can only be executed when P ∧ Q holds in the environment.
3.4 Specification and Verification
Let P, P′ be algebraic predicates and Q, Q′ range predicates. We
write |= {P ∧ Q}Prog{P′ ∧ Q′} for the partial correctness of Prog
with the precondition P∧Q and postcondition P′∧Q′. That is, if P∧Q
Prog−→ ϵ′ with ϵ′ (cid:44) ⊥, then P′ ∧ Q′
holds in the environment ϵ and ϵ
must hold in the environment ϵ′ [13]. |= {P ∧ Q}Prog{P′ ∧ Q′}
only considers environments on termination and hence guaran-
tees the partial correctness of Prog. Given algebraic predicates
P, P′, range predicates Q, Q′, and a CryptoLine program Prog,
the CryptoLine verification problem is to determine whether |=
{P ∧ Q}Prog{P′ ∧ Q′} or not. In the remaining section, we briefly
describe our algorithm for the CryptoLine verification problem and
focus on our signed extension to the algorithm developed in [18].
3.4.1 Checking Safety and Range Properties. Recall that the error
environment is yielded if computation results are not representable
in destinations (Figure 5 and 6). Intuitively, the error environment is
yielded when over- or underflow arises in computation. In order to
detect over- and underflow, the CryptoLine verification algorithm
performs the safety check to ensure the absence of error environ-
ment. All over- and underflow in computation will be identified and
reported to programmers during verification. Although the idea
is simple, the safety check is proved to be a rather useful tool for
cryptography programming in practice.
For range properties in assertions or postconditions, the Cryp-
toLine verification algorithm simply formulates the negation of
the given range property in the bit vector theory of Satisfiability
Session 7D: Formal Analysis IIICCS ’19, November 11–15, 2019, London, United Kingdom1598ϵ
−−−−−−−−−−−→ ϵ[vH , vL (cid:55)→ VH , VL]
(vH , vL, a : ρ) VH × 2n + VL = [[a]]ρ
uspl vH vL a n
−−−−−−−−−−−→ ϵ[vH , vL (cid:55)→ VH , VL] (vH , a : σ; vL : ρ; σ∥ρ) VH × 2n + VL = [[a]]σ
sspl vH vL a n
ϵ
−−−−−−−−−−−→ ϵ′
ucshl vH vL aH aL n
ϵ
(vH , vL, aH , aL : ρ) V = ([[aH]]ρ
ϵ and ρ > Const
|
|
Var = (Type)Var
Var = Vec(ℓ) -v Vec(ℓ)
|
::= Type Var; | Type Var; Decls
::= Stmt; | Stmt; Stmts
::= Decls Stmts
x | y | z · · ·
Var | Const
Var = Op - Op
Var = Op w* Op
Var = Op > n shift op1 to the left or right by n bits respectively
and assign to x the result. x and op1 must be of the same type.
Since gimple statements are typed, type casting is essential. The
statement x = (T)y casts y to the type T and assigns the result to x.
In cryptography library binary codes, we find Single Instruction
Multiple Data (SIMD) assembly instructions are generated from
Session 7D: Formal Analysis IIICCS ’19, November 11–15, 2019, London, United Kingdom1600Table 1: Translation
gimpleCryptoLine
x = op1 + op2
x = op1 - op2
x = op1 * op2
x = op1 w* op2
x = op1 >> n
x = op1 << n
v1(ℓ) = v2(ℓ) +v v3(ℓ)
v1(ℓ) = v2(ℓ) -v v3(ℓ)
CryptoLine
adds dc x op1 op2
subs dc x op1 op2
mull dc x op1 op2
mull xH xL op1 op2
join x xH xL