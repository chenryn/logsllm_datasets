title:Systematic Analysis of Defenses against Return-Oriented Programming
author:Richard Skowyra and
Kelly Casteel and
Hamed Okhravi and
Nickolai Zeldovich and
William W. Streilein
Systematic Analysis of Defenses Against
Return-Oriented Programming ⋆
R. Skowyra, K. Casteel, H. Okhravi, N. Zeldovich, and W. Streilein
Boston University, MIT Lincoln Laboratory, and MIT CSAIL
Abstract. Since the introduction of return-oriented programming, increasingly
complex defenses and subtle attacks that bypass them have been proposed. Un-
fortunately the lack of a unifying threat model among code reuse security papers
makes it difﬁcult to evaluate the effectiveness of defenses, and answer critical
questions about the interoperability, composability, and efﬁcacy of existing de-
fensive techniques. For example, what combination of defenses protect against
every known avenue of code reuse? What is the smallest set of such defenses? In
this work, we study the space of code reuse attacks by building a formal model
of attacks and their requirements, and defenses and their assumptions. We use a
SAT solver to perform scenario analysis on our model in two ways. First, we ana-
lyze the defense conﬁgurations of a real-world system. Second, we reason about
hypothetical defense bypasses. We prove by construction that attack extensions
implementing the hypothesized functionality are possible even if a ‘perfect’ ver-
sion of the defense is implemented. Our approach can be used to formalize the
process of threat model deﬁnition, analyze defense conﬁgurations, reason about
composability and efﬁcacy, and hypothesize about new attacks and defenses.
1 Introduction
Since the introduction of return-oriented programming (ROP) by Shacham in 2007
[28], research in the code reuse space has produced a profusion of increasingly sub-
tle attacks and defenses. This evolution has resembled an arms race, with new attacks
bypassing defenses either by undermining their core assumptions (e.g. jump-oriented
programming [4] vs. returnless kernels [17]) or by exploiting imperfect implementation
and deployment (e.g. surgical strikes on randomization [26] vs. ASLR [33]). Defensive
techniques evolved in lockstep, attempting to more comprehensively deny attackers key
capabilities, such as G-Free’s [20] gadget-elimination techniques targeting classes of
free branch instructions rather than focusing on ret statements.
While substantial research has been conducted in this space, it is difﬁcult to deter-
mine how these defenses, based on different threat models, compose with one another to
protect systems, and how various classes of attack fare against both individual and com-
posed defenses. Techniques targeting ROP attacks may eliminate gadgets while doing
little against return-into-libc (RiL) code reuse attacks, for example. More comprehen-
sive defenses based on randomization have a history of being brittle when deployed in
the real world [26] [32] [29].
⋆ This work was sponsored by the Ofﬁce of the Assistant Secretary of Defense for Research and
Engineering.
2
Skowyra, Casteel, Okhravi, Zeldovich, & Streilein
In a perfect world, it would be possible to formalize the above techniques as being ef-
fective against or within the capability of a speciﬁc adversarial model. Every adversary
would have well-deﬁned power and capabilities, as in cryptographic proof techniques.
In the real world, however, the software security space seems too complex to encode
in a purely algorithmic threat model: one would need to include engineering practices,
address space layouts, kernel-user boundaries, system calls, library functions, etc.
In this paper we pursue a hybrid approach, performing a systematic analysis and
categorization of attacks and defenses using a formal model of the software security
space. Speciﬁcally, we model a set of known attacks and defenses as statements in
propositional logic about atomic variables corresponding to entities such as attacker ca-
pabilities (e.g. knowledge of function addresses) and defense prerequisites (e.g. access
to source code). We model only those aspects of software security which are utilized by
existing attacks and defenses, rather than trying to model the whole space.
This model-driven approach enables two important capabilities. First, we can use
SAT solvers to perform scenario analysis, in which a real-world system’s possible de-
fensive conﬁgurations can be automatically searched for insecure cases. This reduces to
constraining the SAT instance based on which defensive prerequisites are (not) allowed
on the target system (e.g. closed-source software prevents recompilation). The solver
can then determine which defenses are possible to deploy, and whether attacks are still
possible using this set of defenses. Note that this analysis is only with respect to exist-
ing attacks, and cannot be used in isolation as a comprehensive proof of security. It is
intended only to look for certiﬁably false conﬁgurations of system defenses.
Second, our model can be used to reason about hypothetical defense bypasses. Real-
world defenses like Data Execution Prevention (DEP), ASLR, and many control-ﬂow
protection mechanisms can be broken by either attacker actions (turning off DEP via
code reuse) or via poorly-engineered software (memory disclosure vulnerabilities [31]).
These breaks are accounted for in the model, but can be ignored to create a ‘perfect’
version of a defense. By doing so, it is possible to enumerate what known attacks are
rendered useless if the defense is perfected, and to hypothesize what extensions to those
attacks would be needed in order to bypass the defense entirely. We provide three hy-
potheses based around defenses which seem possible to perfect, and prove by construc-
tion that attack extensions implementing the hypothesized functionality are possible.
1. Currently, most malware uses ROP to disable DEP and then inject code. If DEP
is perfect, is ROP enough on its own to deploy practical malware payloads?
2. If libc is completely stripped of useful functions, are other common libraries
suitable for simple return-into-libc (RiL) code reuse attacks?
3. If libc is completely stripped of useful functions can RiL attacks which require
Turing-Completeness use other libraries?
We chose these defenses to bypass because they seem relatively ‘easy’ to perfect,
and may thereby instill a potentially false sense of security in users once deployed. We
prove by construction that each of these perfect defenses can be bypassed. For hypothe-
ses 1 and 2, we consider a successful attack to be one which can deploy at least one
of ﬁve malware payloads: a downloader, an uploader, a root inserter, a backdoor, or a
reverse backdoor. Note that both of these attacks are known, in principle, to be possible.
We would like to identify what capabilities are necessary in practice.
Systematic Analysis of Defenses Against ROP
3
The results we obtain for both Hypotheses 1 and 2 use simple, linear code sequences.
Hypothesis 3 is motivated by the realization that a bypass which works only on linear
code sequences is incomplete, as advanced attacks may require a fully Turing-Complete
language (ROP is already known to be Turing-Complete in most cases [6, 16, 25, 28]).
The remainder of this paper is structured as follows. §2 describes why we elected
to model the code reuse space using propositional logic and SAT solving. §3 provides
a brief background on modeling and ROP attacks. §4 presents the formal model of
attacks and defenses, as well as an explanation of which attacks and defenses have
been included. §5 describes the application of our model to scenario analysis, and §6
describes both the defense bypass technique and the speciﬁc bypasses mentioned above.
§7 concludes.
2 Motivation
The lack of a unifying threat model among code reuse defense papers makes it difﬁcult
to evaluate the effectiveness of defenses. The models chosen frequently overlap, but dif-
fer enough that defenses are difﬁcult to compare. New defenses are created to respond
to speciﬁc new attacks without considering the complete space of existing attacks and
defenses. While useful for mitigating speciﬁc threats (such as ROP gadgets in binaries),
it is not clear how these point defenses compose to provide a comprehensive defense.
This lack of standardized threat models and the lack of formalization of the prob-
lem domain has made it difﬁcult to answer critical questions about the interoperability
and efﬁcacy of existing defensive techniques. Speciﬁcally, it is difﬁcult to reason about
how multiple defenses compose with one another when deployed on the same system
and how the quality of a defensive technique is quantiﬁed. Frequently, for example,
a defense (e.g. a form of gadget elimination) eliminates some avenues of attack, but
does not address others (e.g. return-into-libc). Can another system be deployed to stop
these? Which one? What is the smallest set of such defenses which should be deployed
to protect against every known avenue of code reuse? Furthermore, how do these de-
fenses change when speciﬁc scenarios render defense prerequisites (e.g. virtualization,
recompilation, or access to source code) unavailable?
3 Background and Related Work
3.1 Modeling Using Propositional Logic
While the actual execution of code reuse attacks is complex, the ability to perform
one is reducible to a requirement for the presence of certain capabilities or features
in the victim process space. Return-into-libc attacks, for example, require that useful
functions (e.g. I/O functions, exec(), etc.) exist in the process space at a location known
to or learnable by the attacker, that control ﬂow can be redirected, etc. Each requirement
may also depend on others.
These dependency-chain-like relationships are easily captured using logical impli-
cation from the capability to its requirements. Implication is uni-directional; it can be
treated as a constraint on requirements such that if a capability is available (i.e. valued
4
Skowyra, Casteel, Okhravi, Zeldovich, & Streilein
to true) then the formula linking each requirement (conjunction, disjunction, etc.) must
evaluate to true. If that capability is not available, no constraint is placed on the valu-
ation of its requirements. Defenses can be treated similarly using negative implication:
if a defense is enabled, some set of associated capabilities must be disabled.
Using this framework (discussed in §4) a model of the code reuse attack space is
a series of statements linking defenses to their effects and prerequisites, and attacks to
their required capabilities. The intersection of all of these statements is a single formula
in propositional logic, constraining the possible valuations of all atomic variables.
On its own, this model does very little; it is merely a static context formalizing
certain relationships. However, other constraints can be added which, if the resulting
composed formula is satisﬁable, can provide useful insights. These constraints are them-
selves formulas of propositional logic, and can be used to evaluate either concrete de-
ployment scenarios (see §5) or to explore interesting hypothetical model extensions that
represent new attacks or attack extensions (see §6)
3.2 Code Reuse Attacks
Code reuse attacks were created as a response to protection mechanisms that prevent
code injection by preventing data execution [23] (enforcing W⊕X memory) or moni-
toring inputs to look for shellcode injection [24]. Unlike code injection attacks, which
redirect the program control ﬂow to code written by the attacker, code reuse attacks
redirect the control ﬂow to sections of existing executable code that are chosen by the
attacker. Code-reuse attacks are categorized based on the granularity of the sections
of reused code (called gadgets). The most commonly discussed types of code reuse
attacks are return-into-libc attacks and return-oriented programming (ROP) attacks. In
return-into-libc attacks [19], the gadgets are entire functions. Usually these functions
are system functions from libc such as exec, but they can be any complete function
from the program space. In ROP attacks [28], a gadget is a series of machine instruc-
tions terminating in a ret or a ret-like sequence, such as pop x followed by jmp *x
[7]. The ret instructions are used to transfer control from one gadget to the next to
allow attackers to construct complex attacks from the existing code (see Figure 1).
Although it has been shown to be pos-
sible in principle to create complete mal-
ware payloads using only code reuse at-
tacks [34] [28], attacks in the wild of-
ten use limited, ROP techniques to per-
form very speciﬁc operations, such as dis-
abling W⊕X, to allow a more general
subsequent attack. This may be as sim-
ple as calling a single function [9] or leak-
ing a single memory address [26]. After
W⊕X is disabled, an injected payload is
executed.
t
h
w
o
r
g
k
c
a
t
s
f
o
n
o
i
t
c
e
r
i
D
n
u
r
t
e
g
d
a
g
f
o
n
o
i
t
c
e
r
i
D
Address of Gn
...
Address of G1
Address of G2
Address of G1
Stack
XOR EAX, EBX
RET
Gadget 1
Gadget 2
ADD EBX, EDX
RET
...
DIV EDX, 0x02
ADD EDX, 0x01
RET
Gadget n
Fig. 1: Program stack with a ROP pay-
load, which executes xor %eax, %ebx;
add %ebx, %edx; xor %eax, %ebx; . . .
Defenses against code reuse attacks have focused on address space randomization
[27] [33] [38] [39] [11] [15], ROP gadget elimination [20] [17], and control ﬂow pro-
tection [8] [30] [1] [14]. A larger survey of existing defenses is given in §4.2.
Systematic Analysis of Defenses Against ROP
5
4 Code Reuse Attack Space Model
Our model of the code reuse attack space uses propositional logic formulas to encode
known avenues of attack as dependencies on statements about a process image, and
defenses as negative implications for these statements. We used both academic literature
and the exploit development community as a corpus from which to draw attacks and
defenses. SAT-solvers (or SMT-solvers to generate minimal solutions) can be used to
automate the search for attacks in an environment where certain defenses are deployed.
The model consists of a static context of attacker dependencies and defense points,
and takes as an input scenario constraints which specify system-speciﬁc facts (e.g. JIT
compilers are used or no source code is available). The model output is either an exam-
ple of how malware could be deployed (listing the capabilities used by the attacker, such
as return-to-libn techniques), or a statement of security that no malware can deployed
within the context of the attack space.
The evaluation is conducted by forcing the valuation of the variable corresponding
to successful malware deployment to be true. If the model is still satisﬁable, then a
satisfying instance corresponds to a speciﬁc potential attack. Consider, for example,
a system where DEP and ASLR are deployed. The SAT-solver will ﬁnd a satisfying
instance where ASLR is broken via one of several known techniques, enabling one of
several malware deployment techniques like ROP or return-into-libc. Furthermore, it is
simple to encode system-speciﬁc constraints which limit the set of deployable defenses
(e.g. the presence of Just-In-Time compilers which renders DEP unusable). This allows
for the analysis of concrete, real-world scenarios in which machine role or workload
limit the possible defenses which can be deployed.
4.1 Model Deﬁnition and Scope
An attack space model is an instance of propositional satisﬁability (PSAT) φ such that:
– Atoms{φ} consists of statements about the process image
– The literal m ∈ Atoms{φ} is true if and only if a malware payload can be deployed
in the process image
– There is some valuation µ |= φ if and only if µm = ⊤
– φ is a compound formula consisting of the intersection of three kinds of sub-formula:
1. A dependency ai → χ establishes the dependency of a the literal ai ∈