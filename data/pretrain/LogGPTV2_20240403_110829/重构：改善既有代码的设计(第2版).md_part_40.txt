const plan = aCustomer.billingPlan;
const customerName = aCustomer.name;
客户端1...
从“名字"开始：
function isUnknown(arg){
顶层作用域..
function createUnknowncustomer(） {
return{
{
 return (this._customer === "unknown") ? createunknowncustomer() : this._customer;
：3
return
return
 billingPlan: registry.billingPlans.basic,
 isUnknown: true,
name:
isUnknown: true,
name:
同样，我可以在字面量对象中创建一个嵌套的空支付记录对象：
接着是“计价套餐":
然后把"以标准方式应对特例"的地方都替换成使用特例字面量的值。首先
 weeksDelinquentInLastYear: 0, 
registry.billingPlans.basic,
---
## Page 370
客户端1...
字符串"unknown"。
const site = acquireSiteData();
加一个变换步骤即可。
其不可变。通常，我还是喜欢用类多一点。
const weeksDelinquent = aCustomer.paymentHistory.weeksDelinquentInLastYear;
客户端3...
范例：使用变换
customer:
customer:
location:
name: "Acme Boston",
7/ more
paymentHistory:
有时顾客的名字未知，此时标记的方式与前面一样：将customer字段标记为
 //more
 前面两个例子都涉及了一个类，其实本重构手法也同样适用于记录，只要增
客户端代码也类似，会检查“未知顾客"的情况：
假设我们的输入是一个简单的记录结构，大概像这样:
如果使用了这样的字面量，
site details
site
"unknown"
"Malden MA",
应该使用诸如object.freeze的方法将其冻结，使
---
## Page 371
客户端1...
function isunknown(acustomer) {
客户端1..
数据做任何处理。
（"umouyun === lawonsnoe） = zuanburaasyaam suo
客户端3...
const rawSite = acquireSiteData()
function enrichsite(inputSite） {
客户端2...
else customerName = aCustomer.name;
const acustomer = site.customer;
const
 return aCustomer === "unknown"
return
const acustomer
const
const rawSite = acquireSiteData();
(aCustomer,
 我首先要让site数据结构经过一次变换，目前变换中只做了深复制，没有对
然后对“检查未知顾客"的代码运用提炼函数（106）
site
 lots of intervening code ...
: aCustomer.paymentHistory.weeksDelinquentInLastYear;
registry.bill
aCustomer.biliingPlan;
lots
.cloneDeep(inputSite);
'"suednsoo, = awenuawonsno (.umouyun. =#=
site.customer;
ingPlans.basic
.customer
---
## Page 372
把“未知顾客的名字"的处理逻辑搬进增强函数。
Site数据。
function isUnknown(aCustomer) {
不动，所以现在的检查逻辑应该既能应对原来的site数据，也能应对增强后的
function enrichsite(aSite) {
const weeksDelinquent = (isUnknown(aCustomer)) ?
客户端3..
const plan = (isUnknown(aCustomer)) ?
客户端2...
function enrichsite(aSite) {
else customerName = acustomer.name;
let customerName;
else result.customer.isUnknown' = false;
if (isUnknown(result.customer)） result.customer = unknowncustomer;
const
const result =
 else return acustomer.isUnknown;
return result;
if (isunknown(result.customer)) result.customer = unknowncustomer;
const
isUnknown:
 isUnknown: true,
(isUnknown(aCustomer)) customerName = "occupant";
name:
测试，
随后修改检查特例的条件逻辑，
然后开始对site数据做增强，
 aCustomer.paymentHistory.weeksDelinquentInLastYear;
 aCustomer.billingPlan;
确保一切正常，
. cloneDeep(aSite);
_.cloneDeep(aSite);
"unknown"
）return true;
然后针对特例使用函数组合成变换（149）。首先
首先是给customer字段加上isUnknown属性。
开始使用新的属性。
原来的检查逻辑也保留
---
## Page 373
客户端3...
客户端2...
客户端1...
function enrichsite(aSite):
const plan = aCustomer.billingPlan;
function enrichsite(aSite）{
const customerName = acustomer.name,
constacustomer
const site = enrichsite(rawSite);
const rawSite = acquireSiteData();
if (isunknown(result.customer)) result.customer = unknowncustomer;
 const unknowncustomer = {
if (isUnknown(result.customer)) result.customer = unknowncustomer;
const result =
 return result;
return result;
else result.customer.isUnknown = false; 
const
return result;
else
const
paymentHistory:
name:
isUnknown:
weeksDelinquentInLastYear: 0,
再次测试，然后处理最后一处客户端代码
测试，
result
然后是“未知顾客的计价套餐”的处理逻辑。
.customer.isUnknown = false;
 registry.billingPlans .basic,
-.cloneDeep(aSite);
.cloneDeep(aSite);
.customer;
code
---
## Page 375
近的单元测试通常能更好地帮助调试，
是倾向于把断言留着。自测试的代码降低了断言在调试方面的价值，因为逐步逼
助。而且，因为它们在交流上很有价值，
是使用断言的唯一理由。
关完全禁月
使用断言明确标明这些假设。
少有一个不等于null。
例如，平方根计算只对正值才能进行，又例如，某个对象可能假设一组字段中至
误
出。
动机
if (this.discountRate)
base = base - (this.discountRate * base);
10.6引入断言
(this.discountRate)
我常看见有人鼓励用断言来发现程序中的错误。这固然是一件好事，
 有时程序员会以注释写出这样的假设，而我要介绍的是一种更好的技术-
常常会有这样一段代码：，
断言的失败不应该被系统任何地方捕捉。
断言是一个条件表达式，
这样的假设通常并没有在代码中明确表现出来，
用掉。
- (this.discountRate * base);
(Introduce Assertion)
，对当前状态做了何种假设。
。断言是一种很有价值的交流形式一
assert (assumption)
应该总是为真。
只有当某个条件为真时，该段代码才能正常运行。
但我仍然看重断言在交流方面的价值。
，即使解决了当下正在追踪的错误，我还
 整个程序的行为在有没有断言出现
如果它失败，
，你必须阅读整个算法才能看
另外断言对调试也很有帮
表示程序员犯了错
一它们告诉阅读者
，但却不
---
## Page 376
class Customer...
applyDiscount(aNumber） {
class Customer...
换成if-else的形式。
但在一个三元表达式中没办法很简单地插入断言，所以我首先要把这个表达式转
class Customer...
行为保持的。
else return aNumber - (this.discountRate * aNumber);
（discount rate），可以用于所有其购买的商品。
范例
做法
else
return
 assert(this.discountRate >= 0);
这里有一个假设：折扣率永远是正数。
:aNumber;
因为断言应该不会对系统运行造成任何影响，所以“加入断言"永远都应该是
现在我就可以轻松地加入断言了。
下面是一个简单的例子：折扣。
（!this
.discountRate) return aNumber; 
-(this.discountRate * aNumber)
- (this.discountRate * aNumber);
顾客（customer）会获得一个折扣率
我可以用断言明确标示出这个假设。
---
## Page 377
听来讽刺，只有当我认为断言绝对不会失败的时候，我才会使用断言。
个外部数据源有绝对的信心。断言是帮助我们跟踪bug的最后一招，所以，或许
可以借助提炼函数（106）手法。
理上面这样的条件逻辑时。所以我发现，很有必要去掉条件逻辑中的重复，通常
别有帮助。
class Customer...
数处发生断言失败，我还得先费力搞清楚非法的折扣率值起初是从哪儿放进去
有对输入值的检查都应该是程序的一等公民，
件，
号
set discountRate(aNumber)
的。
 this._discountRate = aNumber;
 我只用断言预防程序员的错误。
 也许是某处代码做数据转换时犯了错误。像这样的断言对于发现错误源头特
对这个例子而言，
只用来检查“必须为真"的条件。滥用断言可能会造成代码重复，尤其是在处
注意，
真正引起错误的源头有可能很难发现-
不要滥用断言。
 aNumber
我更愿意把断言放在设值函数上。
il aNumber >= 0);
，我不会使用断言来检查所有“我认为应该为真"的条
，如果要从某个外部数据源读取数据，
，而不能用断言实现-
一也许是输入数据中误写了一个减
。如果在applyDiscount函
一除非我对这
，那么所
---
## Page 378
再把它变回函数。
函数做了简化，不再需要将其作为命令对象了，
数变成对象，这样对函数体使用提炼函数（106）时会更容易。如果稍后我对该
个重构手法专门用于破解这个难题。我可以用以命令取代函数（337）将这个函
种灵活性。
到以查询取代参数（324）和以参数取代查询（327）。
应该调用一个函数获得，这是一个需要反复推敲的决定，推敲的过程中常常要用
整（319）将其聚拢。函数需要的一份信息，究竟何时应该作为参数传入、何时
（310）将其统一。但有些参数其实只是一个标记，根据这个标记的不同，函数
开。如果两个函数的功能非常相似、
这两类操作被混在一起，就会用将查询函数和修改函数分离（306）将它们分
何改进API，这时我便需要对API进行重构。
有时你会遇到一个特别复杂的函数，
我就会使用移除设值函数（331）
在函数间传递时，数据结构常会毫无必要地被拆开，我更愿意用保持对象完
 好的API会把更新数据的函数与只是读取数据的函数清晰分开。如果我看到
类是一种常见的模块形式。我希望尽可能保持对象不可变，
模块和函数是软件的骨肉，而API则是将骨肉连接起来的关节。
第11章重构API
只有一些数值不同，我可以用函数参数化
，围绕着它传入传出一大堆数据。最后两
 当调用者要求一个新对象时，我经常需
，可以用以函数取代命令（344）
所以只要有可
易于理解和
---
## Page 379
改动作中分离出来。
是尽量遵守，
为一条必须遵守的规则。就像对待任何东西一样，我并不绝对遵守它，不过我总
[s-]（on-）
他地方。这种函数的测试也更容易。
有价值的东西。我可以任意调用这个函数，
法。
动机
function totaloutstanding(） {
function getTotaloutstandingAndSendBill()
 return customer.invoices.reduce((total, each) => each.amount + total, 0);
from Modifier)
11.1将查询函数和修改函数分离
sendBill()
const result = customer.invoices.reduce((total, each) => each.amount + total, 0);
如果遇到一个“既有返回值又有副作用"的函数，我就会试着将查询动作从修
下面是一条好规则：任何有返回值的函数，都不应该有看得到的副作用-
明确表现出“有副作用"与“无副作用"两种函数之间的差异，
如果某个函数只是提供一个值，
，而它也回报我很好的效果。
个
简而言之，
 没有任何看得到的副作用，
，也可以把调用动作搬到调用函数的其
需要操心的事情少多了。
（Separate Query
，有些程序员甚至将此作
是个很好的想
那么这是一个很
---
## Page 380
function alertForMiscreant_(people) {
就已经够了）。