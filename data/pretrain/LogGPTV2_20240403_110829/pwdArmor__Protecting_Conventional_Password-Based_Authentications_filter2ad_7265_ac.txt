U
U
Limiting LEAK breaks pwdArmor relies on a DH key
exchange to generate κU,H and to prevent its passive obser-
vation. We assume the presence of pre-established, well-
known, well-tested generator/prime pairs (g, p) for a spec-
iﬁed key size (e.g., [20, 22]). This prevents M from in-
jecting a pair for which she can compute discrete logs5. H
ultimately decides on which pair to use for a speciﬁed run of
the framework. As RU is encrypted using κenc
U,H , a key that is
based, in part, on κU,H, E, who is limited to eavesdropping,
cannot mount successful LEAK breaks as each password
guess must also correctly guess the value of κU,H.
The deployment scenario dictates the difﬁcultly for M
to mount LEAK breaks. In Sclear, M can perform a DH-
MITM attack by substituting the value of gx sent by H with
. When M receives gy from U she can
its own value gx0
compute κU,H. Since she knows the DH component of κenc
U,H
she can verify ofﬂine password guesses by ﬁrst using the
guess to compute pwdver
U,H , and then check-
(·) contains the pass-
ing to see if the decryption of Eκenc
word guess. Note that a DH-MITM attack destroys the abil-
ity for U and H to establish the same value for κU,H and there-
fore relaying the encrypted RU will be detected by H as it
cannot successfully decrypt Eκenc
In Stunnel a LEAK break is only possible if U creates the
tunnel with M instead of H (i.e., succumbs to the certiﬁcate
trick). In this case, M will be able to perform the LEAK
break in the same manner described above for Sclear.
, deriving κenc
(·).
U,H
U,H
U
0
Preventing MITM breaks Although a DH-MITM at-
tack enables LEAK breaks, it destroys M’s ability to mount
MITM breaks as both U and H learn that something is
amiss. H knows this because it is unable to decrypt RU since
its value for κU,H is different from U’s value. U learns of this
as M cannot produce a valid MACκmac
(·), due to her lack
of knowledge of pwdver
. Due to these factors, given a sin-
gle run of the protocol to attack, M can choose to attempt
LEAK breaks or MITM breaks, but not both.
U,H
U
Recall that server-authenticated tunnels (e.g., TLS, SSH)
rely on users to detect MITM attacks. pwdArmor adds the
ability for H to detect MITM attacks, which were missed
(·). Therefore, in order
by U, by including IDH in Eκenc
to achieve MITM breaks, M must conceal its presence
from both U and H. Again, the difﬁcultly of this masquerade
depends on the scenario.
In Sclear conventional phishing/pharming-MITM attacks,
missed by U, should be detected by H since these attacks
5For example, p = 3, p − 1 is composed of only small prime factors,
U,H
and many cases of p = 2n [29].
448448
have difﬁcultly masking all of the network identiﬁers that
compose IDH. A routing-MITM attack in this scenario does
mask its presence effectively and therefore cannot currently
be detected by pwdArmor. Note that κother
U,H may be used to
establish a secure tunnel after the authentication completes,
and this tunnel would prevent even a routing-MITM attack
from achieving a MITM break.
In Stunnel the entity with which U is connected is iden-
tiﬁed by the certiﬁcate used in the server-authentication of
the tunnel. In order for H not to detect a MITM attack, M
would have had to authenticate to U as if it was the legiti-
mate H (e.g., in TLS/SSH this requires a proof of ownership
of H’s private key).
Compromise of Session Secrets
If U’s or H’s DH expo-
nent (x or y, respectively) is compromised, then M would
be able to compute κU,H from a recorded session and there-
fore perform a successful LEAK break.
The nonces (nU, nH) in this protocol are used in the same
manner as they are in IKEv2 [18] to create a seed key (κU,H)
from the result of the DH key exchange (gxy). These nonces
also enable U and H to reuse their DH parameters across
multiple sessions (e.g., for performance reasons) while en-
suring that each session is unique. Note that the forward
secrecy of κU,H is maintained only between sessions where
the DH values are not reused.
These nonces also introduce session-speciﬁc random-
ness from each participant to ensure the freshness of the
keys used in this session. Also, deriving session-speciﬁc,
purpose-speciﬁc symmetric keys using κU,H helps ensure
that if one of these keys is ever compromised, the effects
are limited to the scope of that key.
It is important to observe that since κother
is not used as
keying material in the resulting session, forward secrecy of
that session is dependent on whether the underlying Stunnel
method provides forward secrecy.
U,H
Compromise of Long-term Secrets
If pwdU is compro-
mised by M, she can impersonate U until the password is
changed. In Stunnel, if H’s private key is stolen by M, then
she can perform MITM breaks, however, it does not im-
prove her ability to directly learn pwdU and obtain a PWD
break. In pwdArmor, the ability to authenticate as the legit-
imate host within the context of the tunnel is only valuable
in that it more effectively convinces U to initiate an authen-
tication with M.
is compromised (e.g., H’s veriﬁer database is
stolen), then two attacks are possible. First, M’s posses-
U constitutes a LEAK break. Second, M can
sion of pwdver
perform a DH-MITM attack and obtain an unencrypted RU.
This attack is possible since M now knows both private
(·). For Type-0
components of κenc
U,H and can decrypt Eκenc
If pwdver
U
U,H
Figure 2. Modern web browsers can already prompt users for login information. The traditional HTTP
Authentication dialog (left) is mimicked by our integration (right) of pwdArmor into Firefox.
protocols this constitutes a PWD break. For Type-1 proto-
cols a MITM break is possible since M can re-encrypt RU
(and the correct value for IDH) using the appropriate key as
well as construct a valid value for MACκmac
(·).
U,H
5 Deployment Considerations
Client-side Support Due to the computational require-
ments of pwdArmor, client-side software support is essen-
tial. Existing systems (e.g., browsers, SSH clients, wireless
supplicants) must be updated in order to support pwdArmor.
Web browsers present an attractive avenue for incremen-
tal deployment, since, without intervention by browser ven-
dors, client-side support for pwdArmor can be provided via
browser extensions or zero-footprint clients (see Section 6).
To prevent M from circumventing the login process, pwdU
must be delivered directly to the client-side software and
not the server. This is not a problem for most client soft-
ware (e.g., SSH clients, wireless supplicants), however, it
is a signiﬁcant problem for web browsers, which typically
rely on a server-supplied HTML-based login page.
Entering login credentials through the browser’s chrome
is an attractive alternative to logins embedded in web pages
because it provides a consistent authentication experience
across all domains and avoids problems with malicious lo-
gin pages. Modern web browsers are already capable of
prompting users for login credentials (see Figure 2) when
they recognize a server’s request for HTTP Basic or Di-
gest authentication. This practice, however, is not widely
adopted by web sites.
Wireless Authentication Extensible Authentication Pro-
tocol (EAP) [1] provides a valuable framework for imple-
menting and deploying pwdArmor for wireless (and also
wired) network authentication in both Sclear and Stunnel
scenarios. Although EAP provides mechanisms to directly
bind authentication protocols to a secure tunnel (see Section
449449
7), this binding does not provide any guarantees if the host
is not properly authenticated (i.e., the user has been tricked
by a phisher). Therefore, pwdArmor is still useful as it pro-
tects against users negating the beneﬁts of the tunnel. Sup-
port for a new pwdArmor EAP method must be added to
the user’s wireless supplicant software and to the network
authentication server. For home users, it is preferable for
pwdArmor to be supported by the access points themselves
as opposed to requiring them to host a specialized authenti-
cation server attached to the access points (as it is typically
done in enterprise environments).
6
Implementation
We have developed libpwdarmor, a general pur-
pose library written in Java, that provides the functionality
needed to build client/server pwdArmor modules. This li-
brary creates and processes pwdArmor messages in binary
and human-readable formats (see Section 6.1), however, the
parent application is responsible for transporting these mes-
sages to their intended destination.
Currently, libpwdarmor supports HTTP Basic and
OTP authentication and the following veriﬁers:
• MD5-based BSD password algorithm (essentially, but
a bit more complicated than, the password hashed 1000
times; used by most Linux distributions to create the
password veriﬁers stored in /etc/shadow)
• Apache variant6 of the MD5-based BSD password al-
gorithm (used by the Apache web server to create veri-
ﬁer databases for use with HTTP Basic authentication)
• HTTP Digest H(A1) veriﬁer (the MD5 hash of “user-
name:realm:password”)
6Which only differs from the original algorithm by changing the
“magic” string from 1 to apr1.
HTTP Basic
(MD5-based BSD Veriﬁers)
OTP
“timv@atat”
HTTP Basic
(HTTP Digest Veriﬁers)
alg=apr1, salt=CGyXh...
alg=otp-sha1, seed=pongo, cnt=100
alg=http-digest, realm=Hoth
n/a
password
otp-sha1 99 pongo
AND FULL FAN GAFF BURT HOLM
n/a
password
n/a
IDU
α
C
RU
RH
Table 1. The pwdArmor message contents for speciﬁc conventional password protocols (nonces, DH
key exchange values, and encrypted values are omitted).
• MD5-based OTP veriﬁers (the nth truncated hash of
the seed and the password; these non-static veriﬁers
are updated after each successful authentication to the
(n − 1)th hash)
• SHA1-based OTP veriﬁers (same as above except the
result of the SHA-1 hash function is converted to little
endian before it is truncated).
HTTP Basic can be adapted to use any of these veriﬁers,
however, it only makes sense to use OTP authentication
with the OTP veriﬁers.
libpwdarmor adds a user options element (OU) to in-
form H of U’s supported DH groups and password proto-
cols as well as to request privacy protection for IDU. It also
adds a host options element (OH) to enable H to notify U of
the selected DH group and password protocol. This element
also includes a session identiﬁer that allows interaction with
H over a stateless transport mechanism.
As libpwdarmor supports a variety of underlying pro-
tocols, M could manipulate OH so that U will use the weak-
est password protocol or veriﬁer format she supports. This
has the potential to increase the efﬁciency of an ofﬂine
guessing attack (e.g., one hash with HTTP Digest veriﬁer
vs. 1000 hashes with MD5-based BSD password veriﬁer).
A relatively time-intensive P RF could be used to limit the
effectiveness of this attack.
Client-side Support We used libpwdarmor to create
a browser extension for Firefox. This extension recognizes
that a web site supports pwdArmor and transports the pwd-
Armor messages via HTTP headers. The extension uses
a similar modal dialog box as browsers currently use to
prompt users for login information (see Figure 2).
We also used libpwdarmor to create a signed Java
Applet. As zero-footprint clients, like Java Applets, involve
browsers running server-supplied code they cannot provide
the same assurances as a pure client-based approach, but are
attractive due to their portability. This applet is intended to
be loaded from a trusted source and then used to login to
any pwdArmor-enabled web site. After the applet is loaded
the user enters the web site she wants to authenticate to, or
selects from a previously established list, and enters her lo-
gin information. After the authentication is complete the
applet opens a new browser tab with the cookies it received
from the host and, thus, transfers the authenticated session
from the applet to the browser.
Server-side Support Server-side support is realized as
a Servlet Filter in Tomcat. This ﬁlter prevents access-