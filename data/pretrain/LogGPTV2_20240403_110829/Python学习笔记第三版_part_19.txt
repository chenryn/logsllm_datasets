>> 6 FOR_ITER 12 (to 20) # 调⽤用 __next__ 返回数据，结束则跳转。
8 STORE_FAST 0 (i)
10 LOAD_GLOBAL 0 (print)
12 LOAD_FAST 0 (i)
14 CALL_FUNCTION 1
16 POP_TOP
18 JUMP_ABSOLUTE 6 # 跳转，继续迭代。
>> 20 POP_BLOCK # 迭代结束。
>> 22 LOAD_CONST 0 (None)
24 RETURN_VALUE
从解释器内部实现看，GET_ITER 指令⾏为与 iter 函数类似。如⽬标对象实现了 __iter__ ⽅法，
则直接调⽤，否则尝试创建序列迭代包装。
设计意图
尽管列表、字典等容器类型实现了迭代器协议。但本质上，两者不属于同⼀层⾯。迭代器
不仅是⼀种数据读取⽅法，⽽更多是⼀种设计模式。
容器核⼼是存储，围绕数据提供操作⽅法，是与⽤户逻辑⽆关的开放类型。⽽迭代器重点
是逻辑控制。调⽤⽅发出请求，随后决策由迭代器决定。数据内敛，抽象和实现分离。
!176
学习笔记 . 第三版
2. 生成器
⽣成器（generator）是迭代器的进化版本，改以函数和表达式替代接⼜⽅法实现。⾮但简
化了编码过程，还提供更多控制⽤于复杂模型设计。
⽣成器函数特殊之处在于，其内部以 yield 返回迭代数据。与普通函数不同，⽆论内部逻
辑如何，它总是返回⽣成器对象。随后，可以普通迭代器⽅式操作。
def test():
yield 1
yield 2
>>> test()
>>> for i in test(): print(i)
1
2
每条 yield 语句对应⼀次 __next__ 调⽤。可分列多条，或出现在循环语句中。只要结束函
数流程，就相当于抛出迭代终⽌异常。
def test():
for i in range(10):
yield i + 100
if i >= 1: return
>>> x = test()
>>> next(x)
100
>>> next(x)
101
>>> next(x)
StopIteration
!177
学习笔记 . 第三版
子迭代器
如果数据源本⾝就是可迭代对象，那么可使⽤ yield from ⼦迭代器语句。其本质和 for 循
环内⽤ yield 并⽆不同，只是语法更加简练。
def test():
yield from "ab"
yield from range(3)
>>> for o in test(): print(o)
a
b
0
1
2
生成器表达式
⾄于⽣成器表达式，其规则与推导式完全相同，除了使⽤⼩括号。
>>> x = (i + 100 for i in range(8) if i % 2 == 0)
>>> x
 at 0x1062f5990>
可直接⽤做函数调⽤参数。
如果不是唯⼀参数，为避免语法错误，不能省略⼩括号。
def test(x):
print(x)
for i in x: print(i)
>>> test(i for i in range(3))
 at 0x105efff68>
0
!178
学习笔记 . 第三版
1
2
执行
相⽐普通迭代器，⽣成器执⾏过程稍显复杂。
⾸先，编译器会为⽣成器函数添加标记。对此类函数，解释器并不直接执⾏。⽽是将栈帧
和代码作为参数，创建⽣成器实例。
def test(n):
print("gen.start")
for i in range(n):
print(f"gen.yield {i}")
yield i
print("gen.resume")
>>> test.__code__.co_flags # generator
99
>>> inspect.isgeneratorfunction(test)
True
简单点说，就是以通⽤⽣成器类型为模版，实现迭代器协议。⾄于⽤户定制部分，则由栈
帧和代码对象完成。
>>> x = test(2)
>>> x.gi_frame.f_locals # 栈帧内存储函数调⽤用参数。
{'n': 2}
>>> x.gi_code # 关联⽤用户函数。
>>> x.__next__ # 实现迭代器器协议⽅方法。
!179
学习笔记 . 第三版
所谓函数调⽤，不过是错觉。这也算解释执⾏的好处，起码不⽤插⼊额外的汇编代码。接
下来，⽣成器对象在第⼀次 __next__ 调⽤时触发，进⼊⽤户函数执⾏。
>>> next(x)
gen.start
gen.yield 0
0
当执⾏到 yield 指令，在设置好返回值后，解释器保存线程状态，并挂起当前函数流程。
只有再次调⽤ __next__ ⽅法，才能恢复状态，继续执⾏。如此，以 yield 为切换分界线，
往复交替，直到函数结束。
执⾏状态保存在⽤户栈帧内，系统线程算是⽆状态多路复⽤，切换操作⾃然很简单。
>>> next(x)
gen.resume
gen.yield 1
1
>>> next(x)
gen.resume
StopIteration
generator
next start
yield 0
suspend
next resume
yield 1
suspend
resume
!180
学习笔记 . 第三版
方法
⽣成器另⼀进化特征，就是提供双向通信能⼒。⽣成器不再是简单的数据提供⽅，还可作
为接收⽅存在。甚⾄可在外部停⽌，或发送信号实现重置等⾃定义⾏为。
⽅法 send 除可向 yield 传送数据外，其他与 next 完全⼀致。不过发送之前，须确保⽣成器
已经启动。因为只有如此，才会进⼊函数执⾏流程，才会对外提供数据和交互。
def test():
while True:
v = yield 200
print(f"resume {v}")
>>> x = test()
>>> x.send(None) # 必须使⽤用 next 或 send(None) 启动⽣生成器器。
200
>>> x.send(100) # 可发送任何数据，包括 None，这与启动参数⽆无关。
resume 100
200
generator
send
none ...
段阶动启
yield 200
suspend
send
100 resume
v = yield
发收据数
print
yield 200
suspend
resume
!181
学习笔记 . 第三版
对⽣成器函数⽽⾔，挂起点是个安全位置，相关状态被临时冻结。⾄于交互⽅式，只要将
要发送数据，或者其他状态标记放置到栈帧指定位置，随后由解释器决定如何处理。⽐如
说调⽤ close ⽅法，解释器将终⽌⽣成器迭代。
该⽅法在⽣成器函数内部引发 GeneratorExit 异常，通知解释器结束执⾏。
此异常⽆法捕获，但不影响 finally 执⾏。
def test():
for i in range(10):
try:
yield i
finally:
print("fina.")
>>> x = test()
>>> next(x) # 启动⽣生成器器。
0
>>> x.close() # 终⽌止⽣生成器器。
fina.
>>> next(x) # 已经终⽌止。
StopIteration
还可像 send 发送数据那样，向⽣成器 throw 指定异常作为信号。
class ExitException(Exception): pass
class ResetException(Exception): pass
def test():
while True:
try:
v = yield
print(f"recv: {v}")
except ResetException:
print("reset.")
except ExitException:
print("exit.")
return
>>> x = test()
!182
学习笔记 . 第三版
>>> x.send(None) # 启动⽣生成器器。
>>> x.throw(ResetException) # 发出重置信号。
reset.
>>> x.send(1) # 可继续发送数据。
recv: 1
>>> x.throw(ExitException) # 发出终⽌止信号。
exit.
>>> x.send(2) # ⽣生成器器已终⽌止。
StopIteration
异常属于合理流程控制，不能和错误等同起来。
!183
学习笔记 . 第三版
3. 模式
借助⽣成器切换功能，改善程序结构设计。
生产消费模型
在不借助并发框架的情况下，轻松实现⽣产、消费协作。
消费者启动后，使⽤ yield 将执⾏权限交给⽣产者，等待其发送数据后激活处理。
如果有多个消费者，或数据处理时间较长，依然建议使⽤专业并发⽅案。
def consumer():
while True:
v = yield
print(f"consumer: {v}")
def producer(c):
for i in range(10, 13):
c.send(i)
c = consumer() # 创建消费者
c.send(None) # 启动消费者
producer(c) # ⽣生产者发送数据
c.close() # 关闭消费者
输出：
consumer: 10
consumer: 11
consumer: 12
消除回调
回调函数（callback）是常见异步接⼜设计⽅式。调⽤者在发起请求后，不再阻塞等待结
果返回，改由异步服务调⽤预先注册的函数来完成后续处理。
!184
学习笔记 . 第三版
尽管回调函数使⽤⼴泛，但不太招⼈喜欢，甚⾄有 “callback hell” 的说法。究其原因，主
要是回调⽅式让代码和逻辑碎⽚化，不利于阅读和维护。
设计⼀个简单异步服务⽰例，然后尝试⽤⽣成器清除回调函数。
import threading
import time
def target(request, callback):
s = time.time()
request() # 调⽤用请求函数。
time.sleep(2) # 模拟阻塞。
callback(f"done: {time.time() - s}") # 调⽤用回调函数，传⼊入结果。
def service(request, callback):
threading.Thread(target=target, args=(request, callback)).start()
def request(): # 任务请求模拟。
print("start")
def callback(x): # 任务结束通知。
print(x)
service(request, callback)
输出：
start
done: 2.003718137741089
⾸先，以⽣成器函数替代原来分离的两个函数。⽤ yield 分隔请求和返回代码，以便服务
可介⼊其中。
def request():
print("start") # 请求部分。
x = yield # 接收服务返回结果。
print(x)
接下来，改造服务框架，以⽣成器⽅式调⽤任务。
!185
学习笔记 . 第三版
def target(fn):