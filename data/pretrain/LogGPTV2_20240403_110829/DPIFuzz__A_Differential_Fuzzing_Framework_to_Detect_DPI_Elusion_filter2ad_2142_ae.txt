love Fangfan Li, Abbas Razaghpanah. November 2017. lib•erate, (n): a library
for exposing (traffic-classification) rules and avoiding them efficiently. In IMC
’17: Proceedings of the 2017 Internet Measurement Conference. ACM, 128–141.
https://dl.acm.org/doi/10.1145/3131365.3131376
[18] Fastly. 2017. Quicly: A QUIC implementation, written from the ground up to be
used within the H2O HTTP server. https://github.com/h2o/quicly
[19] Google. 2015. honggfuzz: Security oriented software fuzzer. https://github.com/
[20] Google. 2015. syzkaller: An unsupervised coverage-guided kernel fuzzer. https:
google/honggfuzz
//github.com/google/syzkaller
APPENDIX
Table 6 contains the transport parameter values used in the servers.
Table 7 contains the values for mutation probabilities defined in
Section 4.3. Table 8 contains a summary of the differences uncovered
by our fuzzer between different pairs of implementations.
Transport Parameter
initial_max_data
initial_max_stream_data_bidi_local
initial_max_stream_data_bidi_remote
initial_max_stream_data_uni
initial_max_streams_bidi
initial_max_streams_uni
max_idle_timeout
max_packet_size
ack_delay_exponent
Value
1048576
66560
66560
66560
2048
2048
60000
1500
3
Table 6: Transport Parameter Values
Probability Parameter
α1, α2
β, γ
ω
α3
Table 7: Probability Values
Value
2
3
1
2
1
3
0
[21] Erik Hjelmvik. 2020.
Sniffing Decrypted TLS Traffic with Security
Onion. https://www.netresec.com/?page=Blog&month=2020-01&post=Sniffing-
Decrypted-TLS-Traffic-with-Security-Onion
[22] Jeff Jarmoc. 2012. SSL/TLS Interception Proxies and Transitive Trust. In Black
Hat Europe. blackhat.
Strategies. In CCS. ACM.
[23] et al. Kevin Bock, George Hughey. 2019. Geneva: Evolving Censorship Evasion
[24] Konstantin Serebryany. 2011. Address Sanitizer. Google. https://github.com/
google/sanitizers/wiki/AddressSanitizer
[25] Erling Ellingsen Collin Jackson Lin-Shung Huang, Alex Rice. [n.d.]. Analyzing
Forged SSL Certificates in the Wild. In IEEE Symposium on Security and Privacy.
[26] LLVM. 2015. libFuzzer: a library for coverage-guided fuzz testing. http://llvm.org/
docs/LibFuzzer.html
[27] Mohammad Mannan Louis Waked and Amr Youssef. 2018. The Sorry State of
TLS Security in Enterprise Interception Appliances. (2018).
[28] Quentin De Coninck Maxime Piraux and Olivier Bonaventure. 2018. Observing
the Evolution of QUIC Implementations. In EPIQ’18: Proceedings of the Workshop
on the Evolution, Performance, and Interoperability of QUIC. https://doi.org/10.
1145/3284850.3284852
[29] Michal Zalewski. 2019. american fuzzy lop. Google. https://lcamtuf.coredump.
[30] Mozilla. 2019. Neqo: An Implementation of QUIC written in Rust. https://github.
[31] NetApp. 2016. Quant: QUIC implementation for POSIX and IoT platforms. https:
cx/afl/
com/mozilla/neqo
//github.com/NTAP/quant
[32] Mohammad Torabi Dashti Petar Tsankov and David Basin. 2012. SECFUZZ:
Fuzz-testing Security Protocols. In Proceedings of the 7th International Workshop
on Automation of Software Test (AST 2012). Zurich, Switzerland.
[33] Thomas Ptacek and Timothy Newsham. [n.d.]. Insertion, Evasion and Denial of
Service: Eluding Network Intrusion Detection. ([n. d.]).
[34] Ashish Kumar Lucian Cojocar Cristiano Giuffrida Herbert Bos Sanjay Rawat,
Vivek Jain. 2017. VUzzer: Application-aware Evolutionary Fuzzing. In NDSS
Symposium 2017.
[35] Philip D. Anderson Vern Paxson Sheharbano Khattak, Mobin Javed. 2013. Towards
Illuminating a Censorship Monitor’s Model to Facilitate Evasion. In 3rd USENIX
Workshop on Free and Open Communications on the Internet (FOCI ’13).
[36] D. Smallwood and A. Vance. 2011. Intrusion analysis with deep packet inspection:
increasing efficiency of packet based investigations. In International Conference
on Cloud and Service Computing. IEEE, 342–347.
[37] K. Xiong T. Chin and C. Hu. 2018. Phishlimiter: A phishing detection and
mitigation approach using software-defined networking. In IEEE Access, vol. 6.
Springer, 42516–42531.
[38] R. Tahboub and Y. Saleh. 2014. Data leakage/loss prevention systems (dlp). In
World Congress on Computer Applications and Information Systems (WCCAIS).
IEEE, 1–6.
[39] Roelof Du Toit. 2017. Responsibly Intercepting TLS and the Impact of TLS 1.3.
[40] Abhik Roychoudhury Van-Thuan Pham, Marcel Böhme. 2020. AFLNET: A Grey-
box Fuzzer for Network Protocols. In IEEE International Conference on Software
Testing, Verification and Validation (ICST). IEEE.
[41] et al. Zhongjie Wang, Shitong Zhu. 2020. SYMTCP: Eluding Stateful Deep Packet
Inspection with Automated Discrepancy Discovery. In NDSS Symposium 2020.
[42] Zhiyun Qian Chengyu Song Srikanth V. Krishnamurthy Zhongjie Wang, Yue Cao.
November 2017. Your state is not mine: a closer look at evading stateful internet
censorship. In IMC ’17: Proceedings of the 2017 Internet Measurement Conference.
ACM, 114–127. https://dl.acm.org/doi/10.1145/3131365.3131374
(2017).
343DPIFuzz: A Differential Fuzzing Framework to Detect DPI Elusion Strategies for QUIC
ACSAC 2020, December 7–11, 2020, Austin, USA
Seed Value
4373445819122772715
4373445819122772715
7253654666463259418
7253654666463259418
7253654666463259418
5224880393376231849
5224880393376231849
5224880393376231849
6867396659762739268
6867396659762739268
6867396659762739268
3544824671711368728
3544824671711368728
3544824671711368728
3544824671711368728
4471396090777236879
4471396090777236879
4471396090777236879
4471396090777236879
8969571667189322506
8969571667189322506
8969571667189322506
8969571667189322506
6399819732713312401
6399819732713312401
98269818471122413
3738301969304892419
3738301969304892419
3738301969304892419
8566626253336265389
8566626253336265389
8566626253336265389
423731078537465151
423731078537465151
423731078537465151
2730155016155308010
2730155016155308010
2730155016155308010
Generator
BSR
BSR
OO
OO
OO
BSR
BSR
BSR
FCSR
FCSR
FCSR
FCSR
FCSR
FCSR
FCSR
FCSR
BSR
FCSR
BSR
BSR
BSR
BSR
BSR
BSR
BSR
FCSR
FCSR
FCSR
FCSR
OO
OO
OO
BSR
BSR
BSR
BSR
BSR
BSR
IUT 1
QUICHE
QUICHE
QUICHE
MVFST
QUICHE
MVFST
MVFST
MVFST
QUANT
MVFST
NEQO
QUICLY
QUANT
MVFST
NEQO
QUANT
QUANT
QUANT
NEQO
NEQO
MVFST
QUANT
QUICLY
QUICHE
QUICHE
QUICHE
QUICHE
QUANT
MVFST
MVFST
MVFST
QUICHE
QUICHE
MVFST
QUICLY
QUICHE
QUANT
MVFST
IUT2
MVFST
Quicly
MVFST
QUICLY
QUICLY
QUICHE
QUICLY
NEQO
QUICHE
QUICHE
QUICHE
QUICHE
QUICLY
QUICLY
QUICLY
QUICHE
QUICLY
MVFST
QUANT
QUICHE
NEQO
NEQO
NEQO
QUICLY
MVFST
QUICLY
NEQO
NEQO
NEQO
QUICLY
QUICHE
QUICLY
QUANT
QUANT
QUANT
NEQO
NEQO
NEQO
Difference Category
Duplicate Packet Number
Duplicate Packet Number
Overlapping Offset Handling
Overlapping Offset Handling
Overlapping Offset Handling
Null Poninter Dereference
Null Poninter Dereference
Null Poninter Dereference
Heap use after free
Heap use after free
Heap use after free
Null Poninter Dereference
Null Poninter Dereference
Null Poninter Dereference
Null Poninter Dereference
Heap use after free
Heap use after free
Heap use after free
Heap use after free
Assertion Failed
Assertion Failed
Assertion Failed
Assertion Failed
Duplicate Packet Number
Duplicate Packet Number
Null Pointer Dereference
Assertion Failed
Assertion Failed
Assertion Failed
Overlapping Offset Handling
Overlapping Offset Handling
Overlapping Offset Handling
Heap use after free
Heap use after free
Heap use after free
Assertion Failed
Assertion Failed
Assertion Failed
Table 8: Summary of differences uncovered by the fuzzer. BSR -> Basic Stream Reassembly, FCSR -> Flow-Control-Aware Stream
Reassembly, OO -> Overlapping Offset
344