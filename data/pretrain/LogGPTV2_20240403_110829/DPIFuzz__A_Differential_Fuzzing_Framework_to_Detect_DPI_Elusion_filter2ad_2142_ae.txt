# References and Appendices

## References

1. **Fangfan Li, Abbas Razaghpanah. November 2017.**  
   **Title:** lib•erate, (n): a library for exposing (traffic-classification) rules and avoiding them efficiently.  
   **Conference:** IMC '17: Proceedings of the 2017 Internet Measurement Conference.  
   **Publisher:** ACM.  
   **Pages:** 128–141.  
   **DOI:** [10.1145/3131365.3131376](https://dl.acm.org/doi/10.1145/3131365.3131376)

2. **Fastly. 2017.**  
   **Title:** Quicly: A QUIC implementation, written from the ground up to be used within the H2O HTTP server.  
   **URL:** [GitHub Repository](https://github.com/h2o/quicly)

3. **Google. 2015.**  
   **Title:** honggfuzz: Security-oriented software fuzzer.  
   **URL:** [GitHub Repository](https://github.com/google/honggfuzz)

4. **Google. 2015.**  
   **Title:** syzkaller: An unsupervised coverage-guided kernel fuzzer.  
   **URL:** [GitHub Repository](https://github.com/google/syzkaller)

5. **Erik Hjelmvik. 2020.**  
   **Title:** Sniffing Decrypted TLS Traffic with Security Onion.  
   **URL:** [Blog Post](https://www.netresec.com/?page=Blog&month=2020-01&post=Sniffing-Decrypted-TLS-Traffic-with-Security-Onion)

6. **Jeff Jarmoc. 2012.**  
   **Title:** SSL/TLS Interception Proxies and Transitive Trust.  
   **Conference:** Black Hat Europe.  
   **Publisher:** blackhat.

7. **Kevin Bock, George Hughey. 2019.**  
   **Title:** Geneva: Evolving Censorship Evasion Strategies.  
   **Conference:** CCS.  
   **Publisher:** ACM.

8. **Konstantin Serebryany. 2011.**  
   **Title:** Address Sanitizer.  
   **Publisher:** Google.  
   **URL:** [GitHub Wiki](https://github.com/google/sanitizers/wiki/AddressSanitizer)

9. **Erling Ellingsen, Collin Jackson, Lin-Shung Huang, Alex Rice. [n.d.].**  
   **Title:** Analyzing Forged SSL Certificates in the Wild.  
   **Conference:** IEEE Symposium on Security and Privacy.

10. **LLVM. 2015.**  
    **Title:** libFuzzer: a library for coverage-guided fuzz testing.  
    **URL:** [Documentation](http://llvm.org/docs/LibFuzzer.html)

11. **Mohammad Mannan, Louis Waked, and Amr Youssef. 2018.**  
    **Title:** The Sorry State of TLS Security in Enterprise Interception Appliances.  
    **Year:** 2018.

12. **Quentin De Coninck, Maxime Piraux, and Olivier Bonaventure. 2018.**  
    **Title:** Observing the Evolution of QUIC Implementations.  
    **Conference:** EPIQ’18: Proceedings of the Workshop on the Evolution, Performance, and Interoperability of QUIC.  
    **DOI:** [10.1145/3284850.3284852](https://doi.org/10.1145/3284850.3284852)

13. **Michal Zalewski. 2019.**  
    **Title:** american fuzzy lop.  
    **Publisher:** Google.  
    **URL:** [Project Page](https://lcamtuf.coredump.cx/afl/)

14. **Mozilla. 2019.**  
    **Title:** Neqo: An Implementation of QUIC written in Rust.  
    **URL:** [GitHub Repository](https://github.com/mozilla/neqo)

15. **NetApp. 2016.**  
    **Title:** Quant: QUIC implementation for POSIX and IoT platforms.  
    **URL:** [GitHub Repository](https://github.com/NTAP/quant)

16. **Mohammad Torabi Dashti, Petar Tsankov, and David Basin. 2012.**  
    **Title:** SECFUZZ: Fuzz-testing Security Protocols.  
    **Conference:** Proceedings of the 7th International Workshop on Automation of Software Test (AST 2012).  
    **Location:** Zurich, Switzerland.

17. **Thomas Ptacek and Timothy Newsham. [n.d.].**  
    **Title:** Insertion, Evasion, and Denial of Service: Eluding Network Intrusion Detection.  
    **Year:** [n.d.]

18. **Ashish Kumar, Lucian Cojocar, Cristiano Giuffrida, Herbert Bos, Sanjay Rawat, Vivek Jain. 2017.**  
    **Title:** VUzzer: Application-aware Evolutionary Fuzzing.  
    **Conference:** NDSS Symposium 2017.

19. **Philip D. Anderson, Vern Paxson, Sheharbano Khattak, Mobin Javed. 2013.**  
    **Title:** Towards Illuminating a Censorship Monitor’s Model to Facilitate Evasion.  
    **Conference:** 3rd USENIX Workshop on Free and Open Communications on the Internet (FOCI ’13).

20. **D. Smallwood and A. Vance. 2011.**  
    **Title:** Intrusion analysis with deep packet inspection: increasing efficiency of packet-based investigations.  
    **Conference:** International Conference on Cloud and Service Computing.  
    **Publisher:** IEEE.  
    **Pages:** 342–347.

21. **K. Xiong, T. Chin, and C. Hu. 2018.**  
    **Title:** Phishlimiter: A phishing detection and mitigation approach using software-defined networking.  
    **Journal:** IEEE Access, vol. 6.  
    **Publisher:** Springer.  
    **Pages:** 42516–42531.

22. **R. Tahboub and Y. Saleh. 2014.**  
    **Title:** Data leakage/loss prevention systems (DLP).  
    **Conference:** World Congress on Computer Applications and Information Systems (WCCAIS).  
    **Publisher:** IEEE.  
    **Pages:** 1–6.

23. **Roelof Du Toit. 2017.**  
    **Title:** Responsibly Intercepting TLS and the Impact of TLS 1.3.

24. **Abhik Roychoudhury, Van-Thuan Pham, Marcel Böhme. 2020.**  
    **Title:** AFLNET: A Grey-box Fuzzer for Network Protocols.  
    **Conference:** IEEE International Conference on Software Testing, Verification and Validation (ICST).  
    **Publisher:** IEEE.

25. **Zhongjie Wang, Shitong Zhu, et al. 2020.**  
    **Title:** SYMTCP: Eluding Stateful Deep Packet Inspection with Automated Discrepancy Discovery.  
    **Conference:** NDSS Symposium 2020.

26. **Zhiyun Qian, Chengyu Song, Srikanth V. Krishnamurthy, Zhongjie Wang, Yue Cao. November 2017.**  
    **Title:** Your state is not mine: a closer look at evading stateful internet censorship.  
    **Conference:** IMC '17: Proceedings of the 2017 Internet Measurement Conference.  
    **Publisher:** ACM.  
    **Pages:** 114–127.  
    **DOI:** [10.1145/3131365.3131374](https://dl.acm.org/doi/10.1145/3131365.3131374)

## Appendix

### Table 6: Transport Parameter Values

| Transport Parameter                  | Value  |
|--------------------------------------|--------|
| initial_max_data                     | 1048576|
| initial_max_stream_data_bidi_local   | 66560  |
| initial_max_stream_data_bidi_remote  | 66560  |
| initial_max_stream_data_uni          | 66560  |
| initial_max_streams_bidi             | 2048   |
| initial_max_streams_uni              | 2048   |
| max_idle_timeout                     | 60000  |
| max_packet_size                      | 1500   |
| ack_delay_exponent                   | 3      |

### Table 7: Probability Values

| Probability Parameter | Value |
|-----------------------|-------|
| α1, α2                | 2     |
| β, γ                  | 3     |
| ω                     | 1     |
| α3                    | 2     |

### Table 8: Summary of Differences Uncovered by the Fuzzer

| Seed Value            | Generator | IUT 1       | IUT 2       | Difference Category               |
|-----------------------|-----------|-------------|-------------|-----------------------------------|
| 4373445819122772715   | BSR       | QUICHE      | MVFST       | Duplicate Packet Number           |
| 4373445819122772715   | BSR       | QUICHE      | Quicly      | Duplicate Packet Number           |
| 7253654666463259418   | OO        | QUICHE      | MVFST       | Overlapping Offset Handling       |
| 7253654666463259418   | OO        | MVFST       | QUICLY      | Overlapping Offset Handling       |
| 7253654666463259418   | OO        | QUICHE      | QUICLY      | Overlapping Offset Handling       |
| 5224880393376231849   | BSR       | MVFST       | QUICHE      | Null Pointer Dereference          |
| 5224880393376231849   | BSR       | MVFST       | QUICLY      | Null Pointer Dereference          |
| 5224880393376231849   | BSR       | MVFST       | NEQO        | Null Pointer Dereference          |
| 6867396659762739268   | FCSR      | QUANT       | QUICHE      | Heap use after free               |
| 6867396659762739268   | FCSR      | MVFST       | QUICHE      | Heap use after free               |
| 6867396659762739268   | FCSR      | NEQO        | QUICHE      | Heap use after free               |
| 3544824671711368728   | FCSR      | QUANT       | QUICLY      | Null Pointer Dereference          |
| 3544824671711368728   | FCSR      | MVFST       | QUICLY      | Null Pointer Dereference          |
| 3544824671711368728   | FCSR      | NEQO        | QUICLY      | Null Pointer Dereference          |
| 3544824671711368728   | FCSR      | QUICHE      | QUICLY      | Null Pointer Dereference          |
| 4471396090777236879   | FCSR      | QUANT       | MVFST       | Heap use after free               |
| 4471396090777236879   | FCSR      | QUANT       | NEQO        | Heap use after free               |
| 4471396090777236879   | FCSR      | QUANT       | QUICHE      | Heap use after free               |
| 4471396090777236879   | FCSR      | QUANT       | QUICLY      | Heap use after free               |
| 8969571667189322506   | BSR       | QUANT       | MVFST       | Assertion Failed                  |
| 8969571667189322506   | BSR       | QUANT       | QUICHE      | Assertion Failed                  |
| 8969571667189322506   | BSR       | QUANT       | NEQO        | Assertion Failed                  |
| 8969571667189322506   | BSR       | QUANT       | QUICLY      | Assertion Failed                  |
| 6399819732713312401   | BSR       | QUICHE      | MVFST       | Duplicate Packet Number           |
| 6399819732713312401   | BSR       | QUICHE      | QUICLY      | Duplicate Packet Number           |
| 98269818471122413     | BSR       | MVFST       | QUICHE      | Null Pointer Dereference          |
| 3738301969304892419   | BSR       | QUICHE      | MVFST       | Assertion Failed                  |
| 3738301969304892419   | BSR       | QUICHE      | QUICLY      | Assertion Failed                  |
| 3738301969304892419   | BSR       | QUICHE      | NEQO        | Assertion Failed                  |
| 8566626253336265389   | FCSR      | QUANT       | MVFST       | Overlapping Offset Handling       |
| 8566626253336265389   | FCSR      | QUANT       | QUICHE      | Overlapping Offset Handling       |
| 8566626253336265389   | FCSR      | QUANT       | QUICLY      | Overlapping Offset Handling       |
| 423731078537465151    | FCSR      | QUANT       | MVFST       | Heap use after free               |
| 423731078537465151    | FCSR      | QUANT       | QUICHE      | Heap use after free               |
| 423731078537465151    | FCSR      | QUANT       | QUICLY      | Heap use after free               |
| 2730155016155308010   | BSR       | QUANT       | MVFST       | Assertion Failed                  |
| 2730155016155308010   | BSR       | QUANT       | QUICHE      | Assertion Failed                  |
| 2730155016155308010   | BSR       | QUANT       | QUICLY      | Assertion Failed                  |

**Generator Abbreviations:**
- **BSR:** Basic Stream Reassembly
- **FCSR:** Flow-Control-Aware Stream Reassembly
- **OO:** Overlapping Offset

This structured format enhances readability and clarity, making it easier to reference and understand the information.