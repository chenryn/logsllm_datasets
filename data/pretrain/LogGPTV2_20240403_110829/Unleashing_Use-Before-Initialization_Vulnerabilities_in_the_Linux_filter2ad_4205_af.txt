### Mitigation Approaches for Memory Safety Errors

Over the past decade, several approaches have been proposed to mitigate the exploitation of memory safety errors. These approaches can be broadly categorized into hardware-assisted and software-based methods.

**Hardware-Assisted Approaches:**
- **Watchdog [32]** and its successor, **WatchdogLite [29]**, leverage hardware support to store and verify allocation metadata, thereby preventing use-after-free vulnerabilities.
- **DieHard [4]** and its successor, **DieHarder [34]**, focus on randomizing the location of heap objects to make dangling-pointer dereferences difficult to exploit. However, these techniques do not cover uninitialized use as a prevention target and are limited to heap objects, leaving stack-based uninitialized-use errors undetected.

**Software-Based Approaches:**
- **Softbound [30]** enforces spatial memory safety by storing base and bound information as metadata for every pointer.
- **CETS [31]** enforces temporal memory safety by assigning unique identifiers to each object, which are used to check if the object is still allocated upon pointer dereferencing.
- **StackArmor [10]** uses randomization to achieve memory safety for the stack, but like other randomization-based techniques, it is probabilistic and does not cover all cases.

### Discussion

#### Exploitability of Uninitialized-Use Vulnerabilities
Not all uninitialized-use vulnerabilities are exploitable. For targeted stack-spraying to be effective, the execution path that triggers an uninitialized-use vulnerability must not overwrite the prepared malicious data. To verify this, attackers can use kprobes to intercept the instruction using the uninitialized memory and check if the prepared data persists. Additionally, current deterministic stack spraying does not account for scenarios where the preparation of malicious data and the triggering of the uninitialized-use vulnerability occur within the same syscall. We ensure only that the prepared malicious data persists until the entry point of the syscall.

#### Porting to Other Programs
To apply deterministic stack spraying to other programs, such as JavaScript engines in web browsers, we need:
- An interface definition (e.g., the JavaScript API).
- A targeted symbolic execution engine (e.g., Kudzu [39]).
- A fuzzer (e.g., jsfunfuzz [1]).

Test suites for well-maintained programs can be used to generate test cases for symbolic execution and fuzzing. For exhaustive spraying, we only need to provide a function for allocating large memory and the size of available memory.

#### Improving Mitigation and Other Defenses
As discussed in §VII, zero-initializing all pointer-type fields for which the compiler cannot prove proper initialization before use can efficiently mitigate uninitialized-use exploits. This lightweight approach works in most cases but may have false negatives if a pointer depends on an uninitialized non-pointer value. Therefore, one possible improvement is to zero-initialize non-pointer values as well.

**Existing Broad-Spectrum Defenses:**
- **PaX’s STACKLEAK [46]** and **split kernel [20]** offer broader defense against uninitialized-use exploits but come with significant runtime overhead. A sophisticated inter-procedural and field-sensitive analysis is necessary to filter out safe allocations, which remains a challenging problem for future work.

**Defeating Targeted Stack-Spraying:**
- A mitigation against deterministic stack spraying is to randomly adjust the stack base upon syscall entry, making it difficult for malicious data from a previous syscall to overlap with an uninitialized variable in the vulnerable syscall. However, the entropy of such randomization is limited due to the small size of the kernel stack (8KB or 16KB).
- To detect exhaustive memory spraying, systems can monitor large amounts of process creations or large memory allocations. However, this technique can be stealthy by reducing the number of process creations and the size of memory allocations, and by probing more frequently.

### Conclusion

Uninitialized variables (uninitialized use) constitute a common type of memory error in the Linux kernel. While full memory safety techniques like SoftBound+CETS exclude uninitialized use as a prevention target, our research shows that uninitialized use is a severe attack vector. We have proposed a fully automated targeted stack-spraying approach, including deterministic and exhaustive memory spraying techniques. Exhaustive memory spraying controls 89% of the kernel stack on average, while deterministic stack spraying controls 32% of the frequently used stack region. To mitigate uninitialized-use exploits, we have also proposed a compiler-based mechanism that initializes potentially unsafe pointer-type fields with minimal performance overhead.

### Acknowledgment

We thank Chengyu Song, Taesoo Kim, Insu Yun, and the anonymous reviewers for their valuable feedback. This work was supported by the German Federal Ministry for Education and Research (BMBF) through funding for the Center for IT-Security, Privacy, and Accountability (CISPA). Kangjie Lu and Wenke Lee were supported in part by various grants and contracts from NSF, ONR, DHS, United States Air Force, DARPA, and ETRI MSIP/IITP.

### References

[References listed here, formatted and organized as per the original text.]

---

This optimized version aims to improve clarity, coherence, and professionalism, ensuring that the content is well-structured and easy to follow.