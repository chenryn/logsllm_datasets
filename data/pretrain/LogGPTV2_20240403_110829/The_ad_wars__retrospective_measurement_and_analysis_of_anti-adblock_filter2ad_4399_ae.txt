Types
all
all
all
all, literal
all, literal
all, literal
all, keyword
all, keyword
all, keyword
all, keyword
Table 2: Some features extracted from BlockAdBlock
JavaScript.
as abp and 0 in Table 2. Keyword features capture syntactic proper-
ties of JavaScript code such as clientHeight and clientWidth in
Table 2. In contrast, all features can contain text such as _checkBait
and _creatBait that represents names of variables, functions, etc.
Feature Selection. For these three types of feature sets, we extract
a total of 1,714,827, 1,211,029, and 16,620 distinct features. Note that
each feature is binary, i.e., its value is 1 or 0 depending on whether
the feature is present/absent in a script. We construct a vector space
to map scripts. Scripts with similar features are placed close to each
other as compared to scripts with dissimilar features. We construct
such a vector space by defining the mapping function as:
(cid:2)
ϕ : x → (ϕs (x))
s ∈S
ϕs (x) =
1
0
if x contains the feature s
otherwise
We map each script x to a vector space with the mapping function
ϕ. The mapping function ϕ assign 1 for a feature s that is present
in script x and 0 otherwise, and S is the set of all possible features.
Each instance of anti-adblocking and non anti-adblocking class is
mapped with a mapping function ϕ(x).
After constructing our feature space, we remove irrelevant fea-
tures. First, we remove features that do not vary much. To this end,
we compute variance of each feature and remove it if its variance
is less than 0.01. After applying this filter we are left with 68,510,
32,226, and 6,171 features for three types of feature sets. Second,
we also remove duplicate features. After applying this filters we
are left with 33,832, 12,974, and 5,785 features for three types of
feature sets. Third, since we still have a large number of features,
we want to select important features that strongly correlate with
either positive or negative class. We further filter the remaining
features using chi-square correlation [68].
χ 2 =
N × (AD − CB)2
(A + C) × (B + D) × (A + B) × (C + D)
Where N is the total number of scripts. A is the number of posi-
tive samples where the binary feature is present. B is the number
of negative scripts where the binary feature is present. C is the
number of positive samples where the binary feature is absent. D is
the number of negative samples where the binary feature is absent.
Based on chi-square values, we rank features in the order of their
importance. We select top 10K, 5K, 1K, and 100 features from three
types of feature sets for further analysis.
Classifier Training. We decide to use AdaBoost, a boosting al-
gorithm, due to the imbalance of anti-adblockers in the wild. Ad-
aBoost [46] is an ensemble classifier that aims to create a strong
meta-classifier from multiple weak classifiers. Models are built from
IMC ’17, November 1–3, 2017, London, United Kingdom
Iqbal et al.
the training data, each subsequent model attempts to correct the
errors from the previous model. AdaBoost is expressed as:
rate of 99.7% and the lowest FP rate of 3.2% for AdaBoost + SVM
classifier using top-1K features from the keyword feature set.
f (x) = siдn(ΣT
t =1
αt ht (x))
Here x is the input vector, ht (x) is the component classifier, and αt is
the weight of each classifier. The distribution of weights is uniform
at the start. At each cycle t, weight distribution is updated according
to the result of component classifier ht (x). Training samples that are
misclassified get higher weights. This process continues for T cycles
and the results are combined at the end. Component classifiers
with lower training errors get higher weights. We use SVM as the
component classifier for AdaBoost. AdaBoost with SVM using RBF
(Radial Basis Function) as its kernel tends to perform better for
imbalanced classification problems [54].
Results & Evaluation. Next we evaluate the effectiveness of classi-
fier using our labeled set of anti-adblocking and non anti-adblocking
scripts. To check the classifier performance we do 10-fold cross val-
idation. We use 9-folds as training samples and the remaining fold
as testing sample and repeat this process 10 times. We report results
in the form of True Positive (TP) rate and False Positive (FP) rate.
TP rate is the fraction of correctly classified anti-adblock scripts. FP
rate is the fraction of incorrectly classified non anti-adblock scripts.
Table 3 lists the classification results for different feature sets. We
include SVM without AdaBoost for baseline comparison. The TP
rate is above 99.2% for all configurations. The FP rate varies from
3.2% to 9.1% for different configurations. We achieve the highest TP
Classifier
#
Features
TP rate
(%)
FP rate
(%)
Feature set: all
AdaBoost + SVM 10K
AdaBoost + SVM 1K
AdaBoost + SVM 100
10K
SVM
1K
SVM
SVM
100
AdaBoost + SVM 10K
AdaBoost + SVM 1K
AdaBoost + SVM 100
10K
SVM
1K
SVM
SVM
100
AdaBoost + SVM 5K
AdaBoost + SVM 1K
AdaBoost + SVM 100
5K
SVM
1K
SVM
SVM
100
99.6
99.2
99.2
99.2
99.2
99.2
Feature set: literal
99.6
99.2
99.2
99.2
99.2
99.2
Feature set: keyword
99.6
99.7
99.2
99.2
99.2
99.2
3.9
8.9
8.9
8.6
8.9
8.4
3.9
9.1
8.9
8.4
8.9
8.6
3.7
3.2
8.9
8.4
8.4
8.6
Table 3: Accuracy of our machine learning based approach
in detecting anti-adblocking scripts.
We further test our model on anti-adblocking scripts detected
on Alexa top 100K live websites (§4.3). Out of 5,070 detected anti-
adblocking websites, we extract 2,701 unique anti-adblocking scripts.
We exclude the scripts in Alexa top 5K websites because they are
used to train our model. We classify the 2,701 extracted scripts
with the AdaBoost + SVM classification model with top-1K features
configuration. We achieve a TP rate of 92.5%.
Our machine learning approach can be used in an offline or an
online manner by adblockers. In the offline scenario, filter list au-
thors can periodically crawl popular websites and run our trained
model to identify new anti-adblock scripts. This will substantially
reduce the manual labor required by filter list authors in main-
taining filter lists as they only have to analyze the scripts detected
by our model. The manual analysis of anti-adblocking scripts by
filter list authors will help in reducing false positives that cause
site breakage. In the online scenario, our trained machine learning
model can be directly shipped in adblockers which would scan all
scripts to detect and remove anti-adblock scripts on the fly.
6 CONCLUSION
In this paper, we presented a retrospective measurement study of
anti-adblocking. We reported that anti-adblocking has significantly
increased over the last few years. Our analysis of anti-adblock filter
lists revealed limitations of manually curated filter lists. We note
that two popular anti-adblock filter lists are not only implemented
differently, they have different coverages and update frequency. We
also presented a machine learning based approach to automatically
identify anti-adblock scripts. Our proposed approach can be used
to augment the manual efforts filter list in an offline manner or
incorporated in adblockers for online detection.
The tussle playing out between online publishers and adblockers
is set to have a major impact on the Internet. Adblockers are chang-
ing the status quo of ad-driven monetization of online content and
services. We believe that the large-scale retrospective analysis of
anti-adblocking provided by our work is important to inform future
discussions surrounding adblocking, both technical and economic.
ACKNOWLEDGMENTS
We would like to thank our shepherd, Matteo Varvello, and the
anonymous reviewers for their useful feedback on this paper. This
work is supported in part by the National Science Foundation under
grant numbers 1715152 and 1719147, and by a seed grant from the
Data Transparency Lab (DTL).
REFERENCES
[1] Acceptable ads program. https://adblockplus.org/acceptable-ads.
[2] AdBlock. https://getadblock.com/.
[3] AdBlock, Chrome web store.
https://chrome.google.com/webstore/detail/
adblock/gighmmpiobklfepjocnamgkkbiglidom?hl=en-US.
[4] Adblock Plus. https://adblockplus.org/.
[5] Adblock Plus, Chrome web store. https://chrome.google.com/webstore/detail/
adblock-plus/cfhdojbkjhnklbpkdaibdccddilifddb.
[6] Adblock Plus, Mozilla Firefox add-on. https://addons.mozilla.org/en-US/firefox/
addon/adblock-plus/.
[7] Adblock rules list parser. https://github.com/shawa/adblockparser.
[8] Anti-Adblock Killer. https://github.com/reek/anti-adblock-killer.
[9] Anti-Adblock Killer List Forum. https://github.com/reek/anti-adblock-killer/
issues.
https://github.com/sitexw/BlockAdBlock/blob/master/
[47] M. Graham.
robots.txt meant
archives.
for
search engines don’t work
https://blog.archive.org/2017/04/17/
IMC ’17, November 1–3, 2017, London, United Kingdom
The Ad Wars
[10] BlockAdBlock.
blockadblock.js.
[11] Blockzilla. https://zpacman.github.io/Blockzilla/.
[12] Brave Browser. https://brave.com/.
[13] Cliqz Browser. https://cliqz.com/us/.
[14] Coalition for Better Ads. https://www.betterads.org/.
[15] Disconnect.me filter list. https://disconnect.me/.
[16] EasyList. https://easylist.to/.
[17] EasyList Forum. https://forums.lanik.us.
[18] EasyList
variants.
https://easylist.to/pages/
other-supplementary-filter-lists-and-easylist-variants.html.
[19] Fanboy’s Enhanced Tracking List. https://fanboy.co.nz/.
[20] Filter lists syntax. https://adblockplus.org/en/filter-cheatsheet.
[21] Firebug. http://getfirebug.com/.
[22] Ghostery. https://www.ghostery.com/.
[23] Ghostery, Chrome web store.
https://chrome.google.com/webstore/detail/
ghostery/mlomiejdfkolichcflejclcbmpeaniij?hl=en-US.
[24] Ghostery, Mozilla Firefox add-on. https://addons.mozilla.org/en-US/firefox/
addon/ghostery/.
[25] HAR File. https://en.wikipedia.org/wiki/.har.
[26] McAfee’s URL categorization service. https://www.trustedsource.org/.
[27] Mozilla Firefox. https://www.mozilla.org/en-US/firefox/.
[28] Mozilla Firefox tracker blocking. https://testpilot.firefox.com/experiments/
tracking-protection.
[29] NetExport. https://getfirebug.com/wiki/index.php/Firebug_Extensions.
[30] NoTrack Blocklist. https://github.com/quidsup/notrack.
[31] PageFair, 2017 Global Adblock Report. https://pagefair.com/downloads/2017/01/
PageFair-2017-Adblock-Report.pdf.
[32] Privacy Badger. https://www.eff.org/privacybadger.
[33] Privacy Badger, Chrome web store. https://chrome.google.com/webstore/detail/
privacy-badger/pkehgijcmpdhfbdbbnkijodmdjhbjlgp?hl=en-US.
[34] Privacy Badger, Mozilla Firefox add-on. https://addons.mozilla.org/en-US/firefox/
addon/privacy-badger17/.
[35] Selenium. http://docs.seleniumhq.org/.
[36] Truth In Advertising, Federal Trade Commission.
news-events/media-resources/truth-advertising/.
https://www.ftc.gov/
[37] Warning
removal
list.
https://easylist-downloads.adblockplus.org/
antiadblockfilters.txt.
[38] Wayback Machine. https://archive.org/web/.
[39] Wayback Machine API. https://archive.org/help/wayback_api.php.
[40] Wayback Machine Archive Details. https://archive.org/about/.
[41] YourAdChoices. http://youradchoices.com/.
[42] A. Bosworth.
A New Way to Control the Ads You See on Facebook,
https://newsroom.fb.com/news/2016/08/
and an Update on Ad Blocking.
a-new-way-to-control-the-ads-you-see-on-facebook-and-an-update-on-ad-blocking/,
2016.
[43] C. Curtsinger, B. Livshits, B. Zorn, and C. Seifert. ZOZZLE: Fast and Precise
In-Browser JavaScript Malware Detection. In USENIX Security Symposium, 2011.
[44] S. Englehardt and A. Narayanan. Online Tracking: A 1-million-site Measurement
and Analysis. In ACM Conference on Computer and Communications Security
(CCS), 2016.
[45] S. Englehardt, D. Reisman, C. Eubank, P. Zimmerman, J. Mayer, A. Narayanan,
and E. W. Felten. Cookies That Give You Away:The Surveillance Implications of
Web Tracking . In World Wide Web (WWW) Conference, 2015.
[46] Y. Freund and R. E. Schapire. A decision-theoretic generalization of on-line
In Journal of Computer and System
learning and an application to boosting.
Sciences, 1997.
for web
well
robots-txt-meant-for-search-engines-dont-work-well-for-web-archives/,
2017.
[48] D. Gugelmann, M. Happe, B. Ager, and V. Lenders. An Automated Approach
for Complementing Ad Blockers’ Blacklists. In Privacy Enhancing Technologies
Symposium (PETS), 2015.
[49] S. Ihm and V. S. Pai. Towards Understanding Modern Web Traffic.
In ACM
Internet Measurement Conference (IMC), 2011.
[50] M. Ikram, H. J. Asghar, M. A. Kaafar, A. Mahanti, and B. Krishnamurthy. To-
wards Seamless Tracking-Free Web:Improved Detection of Trackers via One-class
Learning . In Privacy Enhancing Technologies Symposium (PETS), 2017.
[51] B. Krishnamurthy and C. E. Wills. Privacy Diffusion on the Web: A Longitudinal
Perspective. In World Wide Web (WWW) Conference, 2009.
[52] A. Lerner, T. Kohno, and F. Roesner. Rewriting History: Changing the Archived
Web from the Present. In ACM Conference on Computer and Communications
Security (CCS), 2017.
[53] A. Lerner, A. K. Simpson, T. Kohno, and F. Roesner. Internet Jones and the Raiders
of the Lost Trackers: An Archaeological Study of Web Tracking from 1996 to
2016. In USENIX Security Symposium, 2016.
[54] X. Li, L. Wang, and E. Sung. AdaBoost with SVM-based component classifiers.
In Engineering Applications of Artificial Intelligence, 2007.
[55] M. Malloy, M. McNamara, A. Cahn, and P. Barford. Ad Blockers: Global Prevalence
and Impact. In ACM Internet Measurement Conference (IMC), 2016.
[56] J. Marshall. The Rise of the Anti-Ad Blockers. https://www.wsj.com/articles/
the-rise-of-the-anti-ad-blockers-1465805039, 2016.
[57] J. R. Mayer and J. C. Mitchell. Third-Party Web Tracking: Policy and Technology.
In IEEE Symposium on Security and Privacy, 2012.
[58] G. Merzdovnik, M. Huber, D. Buhov, N. Nikiforakis, S. Neuner, M. Schmiedecker,
and E. Weippl. Block Me If You Can: A Large-Scale Study of Tracker-Blocking
Tools. In IEEE European Symposium on Security and Privacy, 2017.
[59] M. H. Mughees, Z. Qian, and Z. Shafiq. Detecting Anti Ad-blockers in the Wild .
In Privacy Enhancing Technologies Symposium (PETS), 2017.
[60] R. Nithyanand, S. Khattak, M. Javed, N. Vallina-Rodriguez, M. Falahrastegar,
J. E. Powles, E. D. Cristofaro, H. Haddadi, and S. J. Murdoch. Adblocking and
Counter-Blocking: A Slice of the Arms Race. In USENIX Workshop on Free and
Open Communications on the Internet, 2016.
[61] E. Pujol, O. Hohlfeld, and A. Feldmann. Annoyed Users: Ads and Ad-Block Usage
in the Wild. In ACM Internet Measurement Conference (IMC), 2015.
[62] M. Z. Rafique, T. V. Goethem, W. Joosen, C. Huygens, and N. Nikiforakis. It’s
Free for a Reason: Exploring the Ecosystem of Free Live Streaming Services. In
Network and Distributed System Security Symposium (NDSS), 2016.
[63] S. Ramaswamy. Building a better web for everyone. https://www.blog.google/
topics/journalism-news/building-better-web-everyone/, 2017.
[64] F. Roesner, T. Kohno, and D. Wetherall. Detecting and Defending Against Third-
Party Tracking on the Web . In USENIX Symposium on Networked Systems Design
and Implementation (NDSI), 2012.
[65] G. Storey, D. Reisman, J. Mayer, and A. Narayanan. The Future of Ad Blocking:
An Analytical Framework and New Techniques. In arXiv:1705.08568, 2017.
[66] R. J. Walls, E. D. Kilmer, N. Lageman, and P. D. McDanie. Measuring the Impact
and Perception of Acceptable Advertisements. In ACM Internet Measurement
Conference (IMC), 2015.
[67] J. Wilander. Apple Safari Intelligent Tracking Prevention. https://webkit.org/
blog/7675/intelligent-tracking-prevention, 2017.
[68] Y. Yang and J. O. Pedersen. A Comparative Study on Feature Selection in Text
Categorization. In International Conference on Machine Learning, 1997.
[69] Z. Yu, S. Macbeth, K. Modi, and J. M. Pujol. Tracking the Trackers. In World Wide
Web (WWW) Conference, 2016.