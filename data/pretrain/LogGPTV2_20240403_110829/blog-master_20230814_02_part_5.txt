cd $TEMP_DIR/XLogMiner/walminer/
USE_PGXS=1 MAJORVERSION=14 make install
# https://github.com/pgspider/influxdb_fdw
# InfluxDB Foreign Data Wrapper for PostgreSQL.
cd /tmp
git clone --depth 1 https://github.com/pgspider/influxdb_fdw
cd /tmp/influxdb_fdw
go get github.com/influxdata/influxdb1-client/v2
git clone --depth 1 https://github.com/pgspider/influxdb-cxx
cd /tmp/influxdb_fdw/influxdb-cxx
cmake . -DINFLUXCXX_WITH_BOOST=OFF -DINFLUXCXX_TESTING=OFF
make install
cd /tmp/influxdb_fdw
make CC=gcc CXX=g++ USE_PGXS=1 with_llvm=no GO_CLIENT=1 CXX_CLIENT=1
make install CC=gcc CXX=g++ USE_PGXS=1 with_llvm=no GO_CLIENT=1 CXX_CLIENT=1
# https://github.com/HexaCluster/pg_dbms_metadata
# pg_dbms_metadata v1.0.0 - Oracle's DBMS_METADATA Compatibility for PostgreSQL DDL Extraction
cd /tmp
git clone --depth 1 https://github.com/HexaCluster/pg_dbms_metadata
cd /tmp/pg_dbms_metadata
make install USE_PGXS=1
# https://github.com/viggy28/pg_savior
# pg_savior is a PostgreSQL extension designed to prevent accidental data loss due to non-parameterized DELETE queries without a WHERE clause.
cd /tmp
git clone --depth 1 https://github.com/viggy28/pg_savior
cd /tmp/pg_savior
make install USE_PGXS=1
# https://github.com/dimitri/pgcopydb
# https://pgcopydb.readthedocs.io/en/latest/
apt-get install -y libgc-dev  
cd /tmp
git clone --depth 1 https://github.com/dimitri/pgcopydb
cd /tmp/pgcopydb
make -s clean
make -s -j4 install
cd /tmp
git clone --depth 1 https://github.com/supabase/supa_audit  
cd /tmp/supa_audit
USE_PGXS=1 make install
## plv8/Makefile  
##        ifeq ($(UNAME_S),Linux)  
##                SHLIB_LINK += -lrt -std=c++17  
#cd /tmp  
## apt-get install -y libtinfo5 build-essential pkg-config  
#git clone --depth 1 -b v3.2.2 https://github.com/plv8/plv8  
#cd /tmp/plv8  
#export SHLIB_LINK = " -lrt -std=c++17 "  
#EXECUTION_TIMEOUT=1 USE_ICU=1 USE_PGXS=1 PG_CONFIG=$(which pg_config) make
#EXECUTION_TIMEOUT=1 USE_ICU=1 USE_PGXS=1 PG_CONFIG=$(which pg_config) make install
# 安装HaloDB, 
groupadd -g 3000 halo  
useradd -u 3000 -g halo -m -d /home/halo -s /bin/bash halo  
cd /tmp
tar -zxvf halo_14.debian11.aarch64.tar.gz -C /home/halo/  
echo "#  add by digoal" >> /home/halo/.bashrc    
echo "alias rm='rm -i'" >> /home/halo/.bashrc    
echo "alias cp='cp -i'" >> /home/halo/.bashrc    
echo "alias ll='ls -larth'" >> /home/halo/.bashrc    
echo "alias mv='mv -i'" >> /home/halo/.bashrc    
echo "export HALO_HOME=/home/halo/product/dbms/14" >> /home/halo/.bashrc    
echo "export LD_LIBRARY_PATH=\$HALO_HOME/lib" >> /home/halo/.bashrc    
echo "export PGDATA=/home/halo/halodata" >> /home/halo/.bashrc    
echo "export PGHOST=\$PGDATA" >> /home/halo/.bashrc   
echo "export PGUSER=postgres" >> /home/halo/.bashrc   
echo "export PATH=\$HALO_HOME/bin:\$PATH" >> /home/halo/.bashrc    
echo "export PGPORT=1521" >> /home/halo/.bashrc    
# 初始化halodata 
su - halo -c "mkdir /home/halo/halodata" 
su - halo -c "chmod 700 /home/halo/halodata"  
su - halo -c "/home/halo/product/dbms/14/bin/initdb -D /home/halo/halodata -E UTF8 --lc-collate=C --lc-ctype=en_US.utf-8 -U postgres"
cd /home/halo/halodata
echo "host all all 0.0.0.0/0 scram-sha-256" >> ./pg_hba.conf
echo "standard_parserengine_auxiliary = on" >> ./postgresql.auto.conf		
echo "database_compat_mode = 'oracle'" >> ./postgresql.auto.conf	
echo "oracle.use_datetime_as_date = true" >> ./postgresql.auto.conf	
echo "transform_null_equals = off" >> ./postgresql.auto.conf	
echo "listen_addresses = '0.0.0.0'" >> ./postgresql.auto.conf		  
echo "port = 1521" >> ./postgresql.auto.conf				  
echo "max_connections = 2000" >> ./postgresql.auto.conf			  
echo "unix_socket_directories = '.'" >> ./postgresql.auto.conf	  
echo "shared_buffers = 128MB" >> ./postgresql.auto.conf			  
echo "dynamic_shared_memory_type = posix" >> ./postgresql.auto.conf	  
echo "vacuum_cost_delay = 0" >> ./postgresql.auto.conf			  
echo "bgwriter_delay = 20ms" >> ./postgresql.auto.conf			  
echo "bgwriter_lru_maxpages = 500" >> ./postgresql.auto.conf		  
echo "bgwriter_lru_multiplier = 5.0" >> ./postgresql.auto.conf		  
echo "max_parallel_workers_per_gather = 0" >> ./postgresql.auto.conf	  
echo "synchronous_commit = off" >> ./postgresql.auto.conf		  
echo "wal_compression = on" >> ./postgresql.auto.conf		  
echo "wal_writer_delay = 10ms" >> ./postgresql.auto.conf		  
echo "max_wal_size = 1GB " >> ./postgresql.auto.conf  
echo "min_wal_size = 80MB " >> ./postgresql.auto.conf  
echo "random_page_cost = 1.1" >> ./postgresql.auto.conf			  
echo "log_destination = 'csvlog'" >> ./postgresql.auto.conf		  
echo "logging_collector = on" >> ./postgresql.auto.conf		  
echo "log_truncate_on_rotation = on" >> ./postgresql.auto.conf		  
echo "log_timezone = 'Etc/UTC' " >> ./postgresql.auto.conf  
echo "autovacuum = on" >> ./postgresql.auto.conf			  
echo "autovacuum_vacuum_cost_delay = 0ms" >> ./postgresql.auto.conf	  
echo "vacuum_freeze_table_age = 750000000 " >> ./postgresql.auto.conf  
echo "vacuum_multixact_freeze_table_age = 750000000 " >> ./postgresql.auto.conf  
echo "datestyle = 'iso, mdy' " >> ./postgresql.auto.conf  
echo "timezone = 'Etc/UTC' " >> ./postgresql.auto.conf  
echo "lc_messages = 'en_US.UTF-8'" >> ./postgresql.auto.conf			  
echo "lc_monetary = 'en_US.UTF-8'" >> ./postgresql.auto.conf			  
echo "lc_numeric = 'en_US.UTF-8'" >> ./postgresql.auto.conf			  
echo "lc_time = 'en_US.UTF-8'" >> ./postgresql.auto.conf				  
echo "default_text_search_config = 'pg_catalog.english'" >> ./postgresql.auto.conf 
# 启动halo, 创建Oracle兼容性
# su - halo
# pg_ctl start
# psql -c "create extension aux_oracle cascade;"
# databend [在宇宙最强数据库镜像中部署databend](../202402/20240201_03.md)  
groupadd -g 3001 databend    
useradd -u 3001 -g databend -m -d /home/databend -s /bin/bash databend   
mkdir -p /var/log/databend  
mkdir -p /var/lib/databend/raft  
chown -R databend:databend /var/log/databend  
chown -R databend:databend /var/lib/databend  
# su - databend -c "curl -Z --connect-timeout 120 -m 36000 --retry 12000 --retry-delay 5 --retry-max-time 1200 --proto '=https' --tlsv1.2 -sSf -L https://sh.rustup.rs | sh -s -- -y"    
# su - databend -c "source /home/databend/.cargo/env"   
# echo "[source.crates-io]" >> /home/databend/.cargo/config  
# echo "replace-with = 'ustc'" >> /home/databend/.cargo/config            
# echo "    "  >> /home/databend/.cargo/config  
# echo "[source.ustc]"  >> /home/databend/.cargo/config            
# echo "registry = \"sparse+https://mirrors.ustc.edu.cn/crates.io-index/\"" >> /home/databend/.cargo/config  
echo "#  add by digoal" >> /home/databend/.bashrc      
echo "alias rm='rm -i'" >> /home/databend/.bashrc      
echo "alias cp='cp -i'" >> /home/databend/.bashrc      
echo "alias ll='ls -larth'" >> /home/databend/.bashrc      
echo "alias mv='mv -i'" >> /home/databend/.bashrc      
# echo ". /home/databend/.cargo/env" >> /home/databend/.bashrc    
cd /tmp   
# tar -zxvf databend-v1.2.307-aarch64-unknown-linux-gnu.tar.gz -C /home/databend/    
mkdir -p /home/databend/databend_software    
tar -zxvf databend-aarch64.tar.gz -C /home/databend/databend_software
tar -zxvf bendsql-aarch64-unknown-linux-gnu.tar.gz -C /usr/local/bin/
cd /home/databend/databend_software   
echo "  " >> ./configs/databend-query.toml  
echo "[[query.users]]" >> ./configs/databend-query.toml  
echo "name = \"root\"" >> ./configs/databend-query.toml  
echo "auth_type = \"no_password\"" >> ./configs/databend-query.toml  
chown -R databend:databend /home/databend/databend_software  
cd /tmp   
# su - databend -c "cargo install bendsql"  
# 启动databend
# su - databend
# cd /home/databend/databend_software
# ./scripts/start.sh
# 连接databend
# su - databend
# bendsql
# 停止databend
# su - databend
# cd /home/databend/databend_software
# ./scripts/stop.sh
cd $TEMP_DIR
cp plrust--1.1.sql /usr/share/postgresql/14/extension/
cp plrust.control /usr/share/postgresql/14/extension/
cp plrust.so /usr/lib/postgresql/14/lib/
cd /usr/lib/postgresql/14  
git clone --depth 1 https://github.com/swida/sqlbench  
cd /usr/lib/postgresql/14/sqlbench  
autoreconf -if  
./configure --with-postgresql="$PGHOME"  
C_INCLUDE_PATH=/usr/include/postgresql make  
C_INCLUDE_PATH=/usr/include/postgresql make install  
apt-get install -y libpcap-dev libnl-genl-3-dev  
cd /tmp  
git clone --depth 1 -b 8.4.0-stable https://github.com/ntop/PF_RING  
cd /tmp/PF_RING/userland/lib  
./configure && make  
make install  
cd /tmp  
git clone --depth 1 https://github.com/heterodb/pg-strom  
cd /tmp/pg-strom/arrow-tools  
PG_CONFIG=/usr/lib/postgresql/14/bin/pg_config C_INCLUDE_PATH=/tmp/PF_RING/kernel make  
PG_CONFIG=/usr/lib/postgresql/14/bin/pg_config C_INCLUDE_PATH=/tmp/PF_RING/kernel make install  
cd /usr/lib/postgresql/14  
git clone --depth 1 https://github.com/apache/madlib  
cd /usr/lib/postgresql/14/madlib  
mkdir build  
cd /usr/lib/postgresql/14/madlib/build  
cmake ..  
make -j 4  
# $BUILD_ROOT/src/bin/madpack -s madlib -p postgres -c [user[/password]@][host][:port][/database] install
# cd /tmp
# git clone --depth 1 -b apache-arrow-12.0.0 https://github.com/apache/arrow.git  
# cd /tmp/arrow/cpp  
# mkdir build-release  
# cd /tmp/arrow/cpp/build-release  
# cmake -DARROW_DEPENDENCY_SOURCE=BUNDLED ..  
# make -j4  
# make install  
# 
# cd /tmp
# apt-get install -y libcurl4-openssl-dev uuid-dev libpulse-dev  
# git clone --depth 1 -b 1.11.91 https://github.com/aws/aws-sdk-cpp  
# cd /tmp/aws-sdk-cpp  
# git submodule update --init --recursive --depth 1  
# mkdir build  
# cd /tmp/aws-sdk-cpp/build  
# cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_ONLY="s3;core"  
# make -j4  
# make install  
# 
# cd /tmp
# git clone --depth 1 -b v1.1.0 https://github.com/pgspider/parquet_s3_fdw  
# cd /tmp/parquet_s3_fdw  
# PG_CPPFLAGS="-Wno-register -D_GLIBCXX_USE_CXX11_ABI=0" USE_PGXS=1 make  
# PG_CPPFLAGS="-std=c++17 -Wno-register -D_GLIBCXX_USE_CXX11_ABI=0" USE_PGXS=1 make  
# PG_CPPFLAGS="-std=c++17 -Wno-register -D_GLIBCXX_USE_CXX11_ABI=0" USE_PGXS=1 make install  
# echo "/usr/local/lib" >>/etc/ld.so.conf  
# ldconfig 
```  
```  
vi 4.sh  
```  
```  
#!/bin/bash  
set -vx  
echo "* soft    nofile  1024000" >> /etc/security/limits.conf  
echo "* hard    nofile  1024000" >> /etc/security/limits.conf  
echo "* soft    nproc   unlimited" >> /etc/security/limits.conf  
echo "* hard    nproc   unlimited" >> /etc/security/limits.conf  
echo "* soft    core    unlimited" >> /etc/security/limits.conf  
echo "* hard    core    unlimited" >> /etc/security/limits.conf  
echo "* soft    memlock unlimited" >> /etc/security/limits.conf  
echo "* hard    memlock unlimited" >> /etc/security/limits.conf  
```  
```  
vi 5.sh  
```  
```  
#!/bin/bash  
set -vx  
export PG_HOME=/var/lib/postgresql  
. $PG_HOME/.bash_profile  
initdb -D $PGDATA -U postgres -E UTF8 --lc-collate=C --lc-ctype=en_US.UTF8  
cd $PGDATA  
echo "host all all 0.0.0.0/0 scram-sha-256" >> ./pg_hba.conf  
echo "listen_addresses = '0.0.0.0'" >> ./postgresql.auto.conf		  
echo "port = 1921" >> ./postgresql.auto.conf				  
echo "max_connections = 2000" >> ./postgresql.auto.conf			  