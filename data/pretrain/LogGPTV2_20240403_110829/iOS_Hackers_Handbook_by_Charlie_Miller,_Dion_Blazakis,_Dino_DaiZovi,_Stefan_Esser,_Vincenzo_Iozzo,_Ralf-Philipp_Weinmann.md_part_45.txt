cmp r0, #0
beq actually_eval
The next check just tests whether the pathname is within /private/var/
mobile/Library/Preferences. If it is, access is allowed; otherwise, the original
handler is called:
mov r0, sp
adr r1, preferences ;# “/private/var/mobile/Library/Preferences”
movs r2, #39 ;# len(preferences)
ldr r3, memcmp
blx r3
cmp r0, #0
bne actually_eval
cc1100..iinndddd 332233 44//1166//22001122 55::4477::4466 PPMM
324 Chapter 10 n Jailbreaking
The code to allow access writes this information back into the supplied data
structure, which is documented in more detail in Chapter 5.
allow:
# it’s not in /var/mobile but we have a path, let it through
add sp, #0x44
pop {r0}
movs r1, #0
str r1, [r0]
movs r1, #0x18
strb r1, [r0, #4]
pop {r1-r4, pc}
The rest of the code just passes execution back to the original function. We
will not discuss it here, because it is just standard API interception technique.
Clearing the Caches
Applying the previous kernel patches is straightforward because the whole kernel
image is in readable, writable, and executable memory. Therefore, the kernel-level
payload can write the patches over the original code, without the need to change
memory permissions. The only complication when patching the kernel is that
the CPU instruction and data caches have to be cleared, because otherwise the
modifi cations that result from the jailbreak might not be immediately active.
The iOS kernel exports two functions for this purpose that the exploit pay-
load should call every time it patches kernel code or data directly. To clear the
instruction cache, the invalidate_icache() function needs to be called. It
requires three parameters. The fi rst parameter is the address of the memory
area to invalidate, the second parameter is the length of this area, and the third
parameter should be 0.
The function to clear the data cache is called flush_dcache() and is called
with the same three parameters.
Clean Return
After privileges have been escalated and security features have been patched
out of the kernel, the only thing left is to leave the kernel space in a clean way
that will not destabilize the kernel or result in an immediate crash. Normally
this just requires restoring the general-purpose CPU registers to the values
before the kernel payload was called and then returning to the saved program
counter. In the case of a kernel stack buffer overfl ow, this might not be possible
because the actual values on the stack have been overwritten by the buffer
overfl ow. If this happens, it might be possible to return to one of the previous
stack frames that were not destroyed.
cc1100..iinndddd 332244 44//1166//22001122 55::4477::4466 PPMM
Chapter 10 n Jailbreaking 325
An alternative way to exit the kernel is to call the kernel function thread_
exception_return(). You need to fi nd this function by pattern scanning or by
scanning for its cross-references because there is no symbol for it in the kernel.
It is used inside the kernel to recover from exceptional situations that require
execution to end the current kernel thread when unwinding the stack frames is
not possible. It is, therefore, possible to use it to leave the kernel from an exploit
payload. However, whenever possible, the kernel should be left by returning to
the right stack frames, because otherwise it is not guaranteed that the kernel
is left in a stable state.
Summary
In this chapter we have given an insight into jailbreaking, something considered
a black box for the majority of people. We have introduced you to the reason-
ing behind using jailbroken phones, instead of factory phones or development
iPhones, for security research. We have discussed the assets and drawbacks of
different types of jailbreaks.
We analyzed the inner workings of the redsn0w jailbreak and walked you
through each step of the jailbreaking process. This should have made clear the
differences between jailbroken iPhones and factory phones from a usability
and security point of view.
We also documented the kernel patches applied by jailbreaks, and for each
of them we discussed the reasoning behind them, how to fi nd the address to
patch, and in what way to patch it. With this knowledge, it should be possible
for you to port the patches to future iOS versions, without having to rely on the
jailbreak community.
cc1100..iinndddd 332255 44//1166//22001122 55::4477::4466 PPMM
cc1100..iinndddd 332266 44//1166//22001122 55::4477::4466 PPMM
CHAPTER
11
Baseband Attacks
The communication stack for cellular networks in iOS devices is running on a
dedicated chip, the so-called digital baseband processor. Having control over the
baseband side of an iPhone allows an adversary to perform a variety of interest-
ing attacks related to the “phone” part of a device, such as monitoring incoming
and outgoing calls, performing calls, sending and intercepting short messages,
intercepting IP traffi c, as well as turning the iPhone into a remotely activated
microphone by activating its capability to auto-answer incoming calls. This
chapter explores how memory corruptions can be triggered in the baseband
software stack and how an attacker can execute custom code on the baseband
processor. To attack a device over the air, an adversary would operate a rogue
base station in close enough proximity to the target device such that the two
can communicate (see Figure 11.1).
But baseband attacks do not necessarily need to be remote attacks. For a long
time, the driving factor for memory corruption research in the baseband stack
was the demand for unlocking iPhones; in many countries iPhones are sold
at a subsidized price when users buy them bundled with a long-term contract
with a carrier. The downside of this practice is that the phone will work only
with SIM cards from the carrier that sold the phone. This check — the network
lock — is enforced in the baseband processor of the telephone, which talks to
the SIM card. The memory corruptions exploited in this context are described as
local vulnerabilities when contrasted to the vulnerabilities that can be exploited
over the air.
327
cc1111..iinndddd 332277 44//1166//22001122 55::4488::1177 PPMM
328 Chapter 11 n Baseband Attacks
This chapter is concerned only with attacks over the Global System for
Telecommunications (GSM) air interface and local attacks through the AT com-
mand parser. Although, in principle, attacks over the Code Division Multiple
Access (CDMA) air interface might be possible as well, hardware and software
for setting up rogue CDMA base stations is much harder to acquire, and attacks
against the Qualcomm CDMA stack have not been studied by us nor publicly
demonstrated by anyone else thus far. Similarly, although cellular networks
in generations later than GSM, such as Universal Mobile Telecommunications
Standard (UMTS) and Long Term Evolution (LTE), provide a much richer attack
surface, they are not considered in this chapter.
Target cellphone
Um interface
Rogue BTS operated by attacker Legitimate BTS operated by carrier
Figure 11.1: Basic scenario for a remote baseband attack
But before getting to the gist of the attacks we describe, we take a brief look at
the target environment. Just like the application processor, the baseband proces-
sor is an ARM-based CPU; however, it does not run iOS but rather a dedicated
real-time operating system (RTOS). Different generations of iPhones and iPads
use different baseband processors and RTOSes. Table 11.1 gives an overview of
which one is used in which device.
NOTE In fact, the baseband processor contains a processing unit other than
the CPU: a DSP for modulation/demodulation of the physical layer. In the
case of the S-Gold 2, this is a Teaklite core; in other cases, it is an ARM7TDMI
design.
cc1111..iinndddd 332288 44//1166//22001122 55::4488::1177 PPMM
Chapter 11 n Baseband Attacks 329
Table 12.1: Digital Baseband Processors used in iOS Devices
PROCESSOR DEVICES CHIP IS USED IN RTOS
Infi neon S-Gold 2 iPhone 2G Nucleus PLUS
(ARM 926) (Mentor Graphics)
Infi neon X-Gold 608 iPhone 3G/3GS, Nucleus PLUS
(ARM 926) iPad 3G (GSM) (Mentor Graphics)
Infi neon X-Gold 618 iPhone 4, ThreadX
(ARM 1176) iPad 2 3G (GSM) (Express Logic)
Qualcomm MDM6600 iPhone 4 (CDMA) REX on OKL4
(ARM 1136) iPad 2 3G (CDMA) (Qualcomm)
Qualcomm MDM6610 iPhone 4S REX on OKL4
(variation of MDM6600) (Qualcomm)
GSM Basics
GSM is a suite of standards for digital cellular communications. It was devel-
oped in the 1980s by the European Conference of Postal and Telecommunication
Administrators (CEPT); in 1992, development was moved over to the European
Telecommunications Standards Institute (ETSI). GSM is considered a second-
generation wireless telephony technology and is used to serve more than two
billion cellular subscribers in more than 200 countries.
The International Telecommunication Union (ITU) has assigned a total of 14
different frequency bands to the GSM technology; however, only four of them
are relevant. In North America, GSM-850 and GSM-1900 are used. In the rest
of the world, with the exception of South and Central America, GSM-900 and
GSM-1800 are used. In South America, GSM-850 and GSM-1900 are primarily
used; however, there are a number of exceptions. All of the GSM-enabled iOS
devices are quad-band devices supporting GSM-850, GSM-900, GSM-1800, and
GSM-1900. Regardless in which location you turn on your device, all channels
on all four bands will be scanned for valid signals.
Let us now quickly dissect the GSM protocol stack. On the physical layer,
GSM uses Gaussian Minimum Shift Keying (GMSK) as a modulation scheme;
the channels are 200KHz wide and use a bit rate of approximately 270.833 kbit/s.
Both Frequency Division Multiple Access (FDMA) and Time Division Multiple
Access (TDMA) are employed. To enable simultaneous sending and receiving, a
technique called Frequency Division Duplex is employed: Transmission between
the Mobile Station (MS) and the Base Transceiver Station (BTS) is achieved on
two different frequencies separated by a fi xed duplex distance for each band.
Data transmitted from the MS to the BTS is sent on the uplink; correspondingly,
cc1111..iinndddd 332299 44//1166//22001122 55::4488::1177 PPMM
330 Chapter 11 n Baseband Attacks
the opposite direction is called downlink. On top of the physical channels defi ned
by the preceding TDMA scheme, layer 1 of the air interface lays a number of
logical channels that are mapped onto the physical channels used by multiplex-
ing. Many different types of logical channels exist — which we do not describe
in further detail here — but they can be neatly split into two categories: traffi c
channels for the transport of user data and signaling channels that transport
signaling information, such as location updates, between the BTS and the MS.
Going up in the GSM protocol stack on the Um interface you arrive at layer
2, on which LAPDm, a derivative of ISDN’s LAPD (ITU Q.921) and reminiscent
of HDLC, is spoken. Data transmitted on layer 2 is encapsulated, using either
unnumbered information frames (if acknowledgment, fl ow control, and layer
2 error correction is not needed) or in information frames (positive acknowledg-
ment, fl ow control, and layer 2 error control provided). A layer 2 Connection
End Point (CEP) is denoted by so-called Data Link Connection Identifi ers (DLCI),
which are comprised of two elements: a Service Access Point Identifi er (SAPI)
and a Connection Endpoint Identifi er (CEPI).
The next layer of the cellular stack is layer 3, which is divided into three sublayers:
Radio Resource Management (RR), Mobility Management (MM), and Connection
Management (CM). The RR layer is responsible for the establishment of a link
between the MS and the MSC and allocates and confi gures dedicated channels for
this. The MM layer handles all aspects related to the mobility of the device, such
as location management, but also authentication of the mobile subscriber. The CM
layer can again be split into three distinct sublayers, which are not stacked on top
of each other but rather are side by side: Call Control (CC) is the sublayer respon-
sible for functions such as call establishment and teardown. The other sublayers
are Supplementary Services (SS) and Short Message Service (SMS). The last two
sublayers are independent of calls. See Figure 11.2 for an overview of the GSM
Um interface as served by the cellular stack running on the baseband processor.
CC SS SMS
Connection Management
Layer 3
Mobility Management
Radio Resource
Layer 2 (LAPDm)
Layer 1
Figure 11.2: GSM Um interface layers
cc1111..iinndddd 333300 44//1166//22001122 55::4488::1177 PPMM
Chapter 11 n Baseband Attacks 331
Setting up OpenBTS
In recent years, two open-source projects appeared that began building solu-
tions for setting up and running GSM networks. This has signifi cantly lowered
the entry cost for performing GSM security research; in fact, one could say that
this was the key event enabling baseband attacks to become practical for the
average hacker. Although the two projects — OpenBSC and OpenBTS — are
similar in their goals, they take different approaches. Whereas OpenBSC uses
existing, commercially available GSM base transceiver stations (BTSes) and acts
a base station controller (BSC), OpenBTS uses a software-defi ned radio — the
USRP platform — to run a GSM base station completely in software, including
modulation and demodulation. OpenBTS reduces the hardware cost of running
a GSM base station to less than USD 2000. Next, we detail how to set up your
own little GSM network for testing purposes.
NOTE GSM operates in a licensed frequency spectrum. Without having
obtained permission by the local regulation authority, it is illegal to operate
a GSM base station in almost any country. Please check with your legal coun-
sel and local regulating authorities and obtain the required license(s) before
continuing.
Hardware Required
OpenBTS uses a software-defi ned radio approach to implement the BTS side of
the Um interface. To operate a GSM network with OpenBTS, you currently need
a Universal Software Radio Peripheral (USRP) by Ettus Research, LLC (now
owned by National Instruments); in the future OpenBTS might have support
for an increased number of software-defi ned radios. A USRP contains several
analog-digital converters (ADCs) and digital-analog converters (DACs) con-
nected to an FPGA. This, in turn, communicates to the host computer through
a USB or a Gigabit-Ethernet interface, depending on the model. The actual RF
hardware is contained in so-called daughterboards that are mounted onto the
USRP mainboard. Ettus sells several transceiver daughterboards covering the
GSM frequency ranges, namely the RFX900 covering 750MHz to 1050MHz, the
RFX1800 covering 1.5GHz to 2.1GHz, and the WBX board covering 50MHz to
2.2GHz. All of these daughterboards can send and receive at the same time.
However, note that in the case of operating the USRP with a single daughter-
board, signifi cant leakage of the transmitted signal into the receive circuit occurs,
effectively limiting the range of your system. The recommended confi guration
is to run OpenBTS with two RFX daughterboards. Another thing to note is that
RFX1800 can be converted into RFX900 daughterboards by simply refl ashing their
EEPROM. However, the RFX900 daughterboards contain a fi lter that suppresses
the signal outside of the 900MHz ISM band (frequency range: 902–928 MHz).
cc1111..iinndddd 333311 44//1166//22001122 55::4488::1188 PPMM
332 Chapter 11 n Baseband Attacks
Therefore, if you bought an RFX900 daughterboard for the transmit side, you
either need to remove the ISM fi lter by de-soldering it or by restricting yourself
to the ARFCNs 975-988 in the EGSM900 band.
Unfortunately, the internal clock of the USRP devices is too imprecise to
allow reliable operation with anything but the most tolerant of cellphones.
Additionally, operating the USRP at 64MHz for GSM isn’t recommended; instead
you should use a multiple of the GSM bit symbol rate to make downsampling
more effi cient. For GSM, usually a reference clock of 13MHz (48 times the GSM
bit rate) or 26MHz is used to achieve this in handsets, and for the USRP the
most common option is to use a 52MHz clock. However, you can feed an exter-
nal clock signal to the USRP to deal with both of these issues. Please note that
feeding an external clock to a USRP1 needs a reclocking modifi cation of the
USRP1 motherboard that involves some surface mount soldering. These steps
are described on the ClockTamer installation page (https://code.google.
com/p/clock-tamer/wiki/ClockTamerUSRPInstallation). The ClockTamer is a
small clock generator with optional GPS synchronization that is manufactured
by a Russian company called FairWaves; at the same time, it is an open source
hardware project. This module fi ts neatly into the USRP enclosure.
For newer USRPs, such as the USRP2, the E1x0, N2x0, and B1x0 reclocking
modifi cations are not necessary; the clock signal can be simply fed into the
external clock input. However, note that to operate these you will need a version
of OpenBTS supporting UHD devices.
NOTE UHD devices are supported by default in OpenBTS 2.8 and later, but
not for OpenBTS 2.6. An OpenBTS 2.6 fork supporting UHD devices exists on
github: https://github.com/ttsou/openbts-uhd.
OpenBTS Installation and Confi guration
We show you how to install OpenBTS and set up a minimal confi guration
for playing the role of a malicious base station. The accompanying materials
for this book (www.wiley.com/go/ioshackershandbook) include a VirtualBox
image that installs all of the dependencies required to operate a USRP1 with a
52MHz clock on fi rst boot and then can be used as a self-contained playground
for testing baseband attacks.
The following is a unifi ed diff between the example confi guration included
in the OpenBTS 2.6 distribution and the confi guration used later in this chapter:
--- OpenBTS.confi g.example 2012-03-12 11:20:43.993739075 +0100