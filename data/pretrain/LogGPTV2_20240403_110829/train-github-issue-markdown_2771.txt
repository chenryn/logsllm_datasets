I saw several issues regarding this from a few years ago (#11898, #6191,
#8458), but I did not understand why didn't this go anywhere. The oldest one
is still opened, but no activity since 2016?
The problem is that when I create a `BufferGeometry` from `Geometry`, there
are a lot of duplicated vertices. Now, I know what you are thinking: normals
are different, there are UV seams etc. Alas this is not the case (as far as I
can tell).
For example, if I convert a `Sphere(Buffer)Geometry`:
    var geometry1 = new THREE.SphereBufferGeometry( 0.7, 10, 10 );
    var geometry2 = new THREE.Geometry().fromBufferGeometry(geometry1);
    var geometry3 = new THREE.BufferGeometry().fromGeometry(geometry2);
Then there are 4+ (!) times as many vertices in geometry3 than in geometry1.
What I actually want is the position-based merge function (`.mergeVertices`)
in the regular `Geometry` class. I started converting all my code to use
`BufferGeometry`, but some functionality is not available there (like the
merge). So I now want to convert my BufferGeometry to Geometry, parse it, and
get it back to BufferGeometry for rendering. But this happens with the vertex
count:
Shape | Original BG | Converted G | Converted BG | Indexed and merged BG  
---|---|---|---|---  
Plane | 4 | 4 | **6** | 4  
Box | 24 | 24 | **36** | 24  
Sphere | 121 | 121 | **540** | 119  
In the last column is the result from a merging and indexing function I
created. That function checks all the attributes from the vertices of an un-
indexed BG, removes duplicates and indexes it.
Live: http://tume-maailm.pri.ee/ylikool/muu/threejs/indexedBG/  
(counts are in the Console)
I don't know, maybe there are some models where the resulting BufferGeometry
cannot be indexed like that. But perhaps automatic indexing could be at least
some option somewhere?
##### Three.js version
  * Dev
  * r106
  * ...