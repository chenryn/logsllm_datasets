adjust the notion of confirmation so that Snow White does produce
certificates. An example would be to consider a block confirmed
when it belongs to a long chain of sufficient density (meaning that
it has members corresponding to most possible timeslots) that it
could not likely be produced by a (sufficiently bounded) adversary.
We will see further examples like this explained in greater depth
in Section 5. Theorem 5.6 implies much more generally that PoS
protocols can always be modified so as to produce certificates in
this way.
The punchline. Whether or not a permissionless blockchain pro-
tocol produces certificates comes down essentially to whether one
is working in the sized or unsized setting (e.g. whether the protocol
is PoS or PoW). This follows from the following results that we
described above:
(i) According to the results of [12], only protocols which work
in the sized setting can be secure in the partially synchronous
setting. According to Theorem 3.3, all such protocols produce
certificates.
(ii) Theorem 5.1 tells us that, in the synchronous and unsized
setting, protocols cannot produce certificates.
(iii) Theorem 5.6 tells us that all standard protocols in the sized
and synchronous setting can be recalibrated to produce cer-
tificates.
1.2 Related work
There are a variety of papers from the distributed computing litera-
ture that analyse settings somewhere between the permissioned
and permissionless settings as considered here. In [15], for example,
Okun considered a setting which a fixed number of processors com-
municate by private channels, where each processor may or may
not have a unique identifier, and where processors may or may not
be ‘port aware’, i.e. be able to tell which channel a message arrives
from. A number of papers [1, 6] have also considered the problem
of reaching consensus amongst unknown participants (CUP). In
the framework considered in those papers, the number and the
identifiers of other participants may be unknown from the start of
the protocol execution. A fundamental difference with the permis-
sionless setting considered here is that, in the CUP framework, all
participants have a unique identifier and the adversary is unable
to obtain additional identifiers to be able to launch a sybil attack
against the system, i.e. the number of identifiers controlled by the
adversary is bounded.
The Bitcoin protocol was first described in 2008 [14]. Since then,
a number of papers [10, 16] have developed frameworks for the
analysis of Bitcoin in which oracles are introduced for modelling
PoW. A more general form of oracle is required for modelling PoS
and other forms of permissionless protocol, however. In [12] a
framework was introduced that described a generalised form for
such oracles. We use that framework in this paper, but also develop
that framework in Sections 2.4, 2.5, 2.7, 2.8 and 4.3 to be appropriate
specifically for the analysis of blockchain protocols.
2 THE FRAMEWORK
We work within the framework of [12]. While we describe the
framework in its entirety here, we refer the reader to the the original
paper for further examples and explanations of the framework set-
up. Within Section 2, it is the definitions of Sections 2.4, 2.5, 2.7 and
2.8 that are new to this paper (all definitions of Sections 3, 4 and 5
are also new to this paper).
Most of this section can be briefly summed up as follows – all
undefined terms in the below will be formalised and defined in later
subsections.
• Protocols are executed by an unknown number of users,
each of which is formalised as a deterministic processor that
controls a set of public keys.
Session 4A: Modeling Blockchains and Distributed Ledgers CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1008• Processors have the ability to broadcast messages to all other
processors. The duration of the execution, however, may be
divided into synchronous or asynchronous intervals. During
asynchronous intervals, an adversary can tamper with mes-
sage delivery as they choose. During synchronous intervals
there is a given upper bound on message delivery time. We
then distinguish two synchronicity settings. In the synchro-
nous setting it is assumed that there are no asynchronous
intervals, while in the partially synchronous setting there
may be unpredictably long asynchronous intervals.
• Amongst all broadcast messages, there is a distinguished set
referred to as blocks, and one block which is referred to as
the genesis block. Unless it is the genesis block, each block B
has a unique parent block.
• To blackbox the process of user selection, whereby certain
users are selected and given the task of updating state, [12]
introduces two new notions: (1) Each public key is considered
to have a certain resource balance, which may vary over the
execution, and; (2) The protocol will also be run relative to a
permitter oracle, which may respond to this resource balance.
For a PoW protocol like Bitcoin, the resource balance of each
public key will be their (relevant) computational power at
the given timeslot.
• It is the permitter oracle which then gives permission to
broadcast messages updating state. To model Bitcoin, for ex-
ample, we sometimes have the permitter allow another user
to broadcast a new block, with the probability this happens
for each user being proportional to their resource balance.
• Liveness and security are defined in terms of a notion of con-
firmation for blocks. Roughly, a protocol is live if the number
of confirmed blocks can be relied on to increase during ex-
tended intervals of time during which message delivery is
reliable. A protocol is secure if rollback on confirmed blocks
is unlikely.
2.1 The computational model
Overview. There are a number of papers analysing Bitcoin [10, 16]
that take the approach of working within the language of the UC
framework of Canetti [5]. Our position is that this provides a sub-
stantial barrier to entry for researchers in blockchain who do not
have a strong background in security, and that the power of the
UC framework remains essentially unused in the subsequent anal-
ysis. Instead, we use a very simple computational model, which
is designed to be as similar as possible to standard models from
distributed computing (e.g. [9]), while also being adapted to deal
with the permissionless setting. We thus consider an information
theoretic model in which processors are simply specified by state
transition diagrams. A permitter oracle is introduced as a generali-
sation of the random oracle functionality in the Bitcoin Backbone
paper [10]: It is the permitter oracle’s role to grant permissions to
broadcast messages. The duration of the execution is divided into
timeslots. Each processor enters each timeslot t in a given state x,
which determines the instructions for the processor in that timeslot
– those instructions may involve broadcasting messages, as well as
sending requests to the permitter oracle. The state x′ of the proces-
sor at the next timeslot is determined by the state x, together with
the messages and permissions received at t.
Since we focus on impossibility results, we simplify the presen-
tation by making the assumption that we are always working in
the authenticated setting, in which processors have access to pub-
lic/private key pairs. This assumption is made purely for the sake
of simplicity, and the results of the paper do not depend upon it.
Formal description. For a list of commonly used variables and
terms, see Table 1 in the appendix. We consider a finite6 system
of processors. Each processor p is specified by a state transition
diagram, for which the number of states may be infinite. Amongst
the states of a processor are a non-empty set of possible initial states.
The inputs to p determine which initial state it starts in. If a variable
is specified as an input to p, then we refer to it as determined for
p, referring to the variable as undetermined for p otherwise. If a
variable is determined/undetermined for all p, we simply refer to it
as determined/undetermined. Amongst the inputs to p is an infinite
set Up of public keys, which are specific to p in the sense that
if U ∈ Up and U′ ∈ Up′ then U (cid:44) U′ when p (cid:44) p′. A principal
difference between the permissionless setting (as considered here)
and the permissioned setting (as studied in classical distributed
computing) is that, in the permissionless setting, the number of
processors is undetermined, and Up is undetermined for p′ when
p′ (cid:44) p.
Processors are able to broadcast messages. To model permission-
less protocols, such as Bitcoin, in which each processor has limited
ability to broadcast new blocks (and possibly other messages), we
require any message broadcast by p to be permitted for some public
key in Up: The precise details are as follows. We consider a real-
time clock, which exists outside the system and measures time in
natural number timeslots. The duration D is a determined variable
that specifies the set of timeslots (an initial segment of the natural
numbers) at which processors carry out instructions. At each times-
lot t, each processor p receives a pair (M, P ), where either or both
of M and P may be empty. Here, M is a finite set of messages (i.e.
strings) that have previously been broadcast by other processors.
We refer to M as the message set received by p at t, and say that
each message m ∈ M is received by p at timeslot t. P is referred to
as the permission set received by p at t. Formally, P is a set of pairs,
where each pair is of the form (U, M∗) such that U ∈ Up and M∗ is
a potentially infinite set of messages. If (U, M∗) ∈ P, then receipt of
the permission set P means that each message m ∈ M∗ may now be
permitted for U. This is complicated slightly by our need to model
the authenticated setting within an information theoretic model –
we do this by declaring that only p is permitted to broadcast mes-
sages signed by keys in Up. More precisely, m ∈ M∗ is permitted
for U if the following conditions are also satisfied:
• m is of the form (U, σ ) – thought of as ‘the message σ signed
by U’.
6In [12], a potentially infinite number of processors were allowed, but each processor
was given a single public key (identifier). Here, we will find it convenient to consider
instead a finite number of processors, each of which may control an unbounded number
of public keys.
Session 4A: Modeling Blockchains and Distributed Ledgers CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1009• For any ordered pair of the form (U′, σ ′) contained in (i.e.
which is a substring of) σ, either U′ ∈ Up, or else (U′, σ ′) is
contained in a message that has been received by p.
So, as suggested in the above, the latter bulleted conditions allow
us to model the fact that we work in the authenticated setting (i.e.
we assume the use of digital signatures) within an information
theoretic computational model.
To complete the instructions for timeslot t, p then broadcasts
a finite set of messages M′, each of which must be permitted for
some U ∈ Up, makes a request set R, and then enters a new state x′,
where x′, M′ and R are determined by the present state x and (M, P ),
according to the state transition diagram. The form of the request
set R will be described shortly, together with how R determines the
permission set received at by p at the next timeslot.
An execution is described by specifying the set of processors, the
duration, the initial states for all processors and by specifying, for
each timeslot t ≥ 1:
(1) The messages and permission sets received by each proces-
sor;
(2) The instruction that each processor executes, i.e. what mes-
sages it broadcasts, what requests it makes, and the new
state it enters.
We require that each message is received by p at most once for
each time it is broadcast, i.e. at the end of the execution it must
be possible to specify an injective function dp mapping each pair
(m, t ), such that m is received by p at timeslot t, to a triple (p′, m, t′),
such that t′  0.
Suppose that, after receiving messages and a permission set
at timeslot t, p’s message state is M0, and that M∗
0 is the set of
all messages that are permitted for p (i.e. for some U ∈ Up). We
consider two settings – the timed and untimed settings. The form of
each request r ∈ R made by p at timeslot t depends on the setting,
as specified below. While the following definitions might initially
seem abstract, shortly we will give examples to make things clear.
• The untimed setting. Here, each request r made by p must
be of the form (U, M, A), where U ∈ Up, M ⊆ M0 ∪ M∗
0, and
where A is some (possibly empty) extra data. The permit-
ter oracle will respond with a pair (U, M∗), where M∗ is a
set of strings that may be empty. The value of M∗ will be
assumed to be a probabilistic function of the determined
variables, (U, M, A), and of R (U, t, M ), subject to the condi-
tion that M∗ = ∅ if R (U, t, M ) = 0. If modelling Bitcoin, for
example, M might be a set of blocks that have been received
by p, or that p is already permitted to broadcast, while A spec-
ifies a new block extending the ‘longest chain’ in M. If the
block is valid, then the permitter oracle will give permission