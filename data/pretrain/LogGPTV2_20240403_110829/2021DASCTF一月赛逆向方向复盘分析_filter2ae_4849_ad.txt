3中断会触发的事件，这就是我们的目标。
其中一个变量`byte_432354`用于计数，但不是很清楚具体的作用。还是看关键函数`sub_413950`。将参数类型改为`struct
_DEBUG_EVENT *`后进行分析。
根据文章[中断点异常
STATUS_BREAKPOINT(0x80000003)](https://www.cnblogs.com/yilang/p/11937947.html)可知，值0x80000003代表STATUS_BREAKPOINT，中断指令异常，表示在系统未附加内核调试器时遇到断点或断言。
通常中断指令异常可以在以下条件下触发：
  1. 硬代码中断请求，如：asm int 3
  2. System.Diagnostics.Debugger.Break
  3. DebugBreak（）（WinAPI）
  4. 操作系统启用内存运行时检查，就像应用程序验证程序在堆损坏、内存溢出后会触发一样。
  5. 编译器可以有一些配置来启用未初始化的内存块和函数结束时应填充的内容（在重新运行..后的空白区域）。例如，如果启用/GZ，Microsoft VC编译器可以填充0xCC。0xCC实际上是asm int 3的操作码。所以如果某个错误导致应用程序运行到这样的块中，就会触发一个断点。
因此猜测可能在main函数中设置的`int 3`触发之前，还会由其他原因触发该调试事件两次，因此使用变量`byte_432354`来加以控制。
这里要注意，当`int 3`触发异常后，context中的eip已经指向了一下条指令，也就是`addr(int 3) + 1`。
因此这里处理的逻辑大致如下。
    eip = addr(insn(int 3))+1
    value = byte(eip)
    if value == 0xA8:
        eip += 9
    elif value == 0xB2:
        esp = 0x73FF8CA6
        eip += 1
    else:
        eip += 1
了解处理逻辑后，回到main函数进行patch。
例如这里int 3后一字节既不是0xA8也不是0xB2，则直接这一字节patch（int 3也一块patch）。
patch后，再去除简单的花指令，可以反编译可得到伪代码。
事实上，这里使用的是Debug Blocker反调试技术。该技术有如下优点：
  1. 防止代码调试。因子进程运行实际的源代码且已经处于调试之中，原则上就无法再使用其他调试器进行附加操作了。如该程序如果在main函数中直接下断点，会发现根本断不下来。因为这时子进程执行的代码，而父进程执行的调试循环则可以断下来。
  2. 能够控制子进程。调试器-被调试器者关系中，调试器具有很大权限，可以处理被调试进程的异常、控制代码执行流程。使得代码调试变得十分艰难。这也是这个程序所用到的，子进程使用`int 3`产生异常让父进程处理，从而破坏代码逻辑，且难以调试。
具体可见《逆向工程核心原理》第53章第7节以及第57章。
###  加密过程分析
首先调用`sub_41174E`函数，数组解密后输出`Please input the
flag:\n`，之后调用`sub_41193D`函数读取输入，并检查长度为32。之后将输入进行转储。
之后一个循环进行数据类型转换，将输入的数据类型由`char`变为`int`。之后调用函数`sub_41144C`，跟进。
可以发现`__debugbreak()`，说明这里也有int 3指令。查看汇编。
int 3指令后为0xB2，则要改变esp，即栈顶的值。栈顶的值就是最后int
3指令前最后push进栈的[ebp+var_8]，而该值又由mov指令赋值，则实质上就是将这个mov指令赋值的0x8E32CDAA改为0x73FF8CA6，进行patch。
就是将输入数据按int类型进行了简单的异或操作。
之后一个循环，又将异或结果的数据类型由int转换为char。
之后调用`sub_4110B9`函数。
该函数根据常数计算得到一个长度为8的int型数组。
回到main函数，之后又一个循环将生成的数组由int类型转换为char。
之后调用`sub_4115A0`函数，参数为输入的异或结果和生成的data数组，显然是再次进行了加密。
最后对加密结果进行逐字节比较。
查看加密函数。
可以看到tea加密常数，观察可以发现是xtea加密。密钥就是前面生成的data数组的前四个数据，`_byteswap_ulong`就是将数据又由char类型又转换为int类型。
每轮加密结束后，又对字节序做了交换，实质又是将加密结果由int类型转换为char类型。
综上，加密过程很简单，就是先进行异或，再xtea加密，中间伴随很多次数据类型转换。
而xtea的密钥数据，可以动调直接修改eip跳转到生成数据的`sub_4110B9`函数，运行查看内存得到。
###  exp
逆向写脚本得到flag。
    def tea_decipher(value, key):
        v0, v1 = value[0], value[1]
        k0, k1, k2, k3 = key[0], key[1], key[2], key[3]
        delta = 0x9e3779b9
        su = 0xc6ef3720
        for i in range(32):
            v1 -= ((v0>5) + k3) ^ (v0 + su)
            v1 &= 0xffff_ffff
            v0 -= ((v1>5) + k1) ^ (v1 + su)
            v0 &= 0xffff_ffff
            su = su - delta
        value[0] = v0
        value[1] = v1
    def char2int(s):
        data = []
        for i in range(len(s)//4):
            data.append((s[i*4]>24)
            s.append((data[i] & 0xff0000)>>16)
            s.append((data[i] & 0xff00)>>8)
            s.append((data[i] & 0xff))
        return s
    def xor(data):
        d = 0x73FF8CA6
        for i in range(8):
            data[i] ^= d
            d -= 0x50FFE544
            d &= 0xffff_ffff
    if __name__ == '__main__':
        res = [0xED, 0xE9, 0x8B, 0x3B, 0xD2, 0x85, 0xE7, 0xEB,
               0x51, 0x16, 0x50, 0x7A, 0xB1, 0xDC, 0x5D, 0x09,
               0x45, 0xAE, 0xB9, 0x15, 0x4D, 0x8D, 0xFF, 0x50,
               0xDE, 0xE0, 0xBC, 0x8B, 0x9B, 0xBC, 0xFE, 0xE1]
        key =  [0x82ABA3FE, 0x0AC1DDCA8, 0x87EC6B60, 0x0A2394568]
        dword_res = char2int(res)
        for i in range(0, len(dword_res), 2):
            tmp = [dword_res[i], dword_res[i+1]]
            tea_decipher(tmp, key)
            dword_res[i], dword_res[i+1] = tmp[0], tmp[1]
        xor(dword_res)
        flag = int2char(dword_res)
        print(''.join(map(chr,flag)))
        # Mesmerizing_And_Desirable_As_wjq
## 部分参考资料
[wp_by_Bxb0](https://www.anquanke.com/post/id/230816)
[wp_by_wjh](http://blog.wjhwjhn.com/archives/171/)
[wp_by_c10udlnk](https://c10udlnk.top/2021/02/02/wpFor-2021HWSTrial/)
[WOW64](https://baike.baidu.com/item/WOW64/2155695?fr=aladdin)
[WOW64最佳实现](https://www.jianshu.com/p/acf43755a042)
[WOW64!Hooks：深入考察WOW64子系统运行机制及其Hooking技术（上）](https://zhuanlan.zhihu.com/p/297691297)
[Win64
驱动内核编程-9.系统调用、WOW64与兼容模式](https://blog.csdn.net/u013761036/article/details/60892564)
[How to investigate Windows 32/64bit (WOW64)
transition](https://reverseengineering.stackexchange.com/questions/16200/how-to-investigate-windows-32-64bit-wow64-transition)
[Debugging WOW64](https://docs.microsoft.com/en-us/windows/win32/winprog64/debugging-wow64)
[天堂之门（Heaven’s Gate）技术的详细分析](https://www.freebuf.com/column/209983.html)
[汇编里看Wow64的原理](https://bbs.pediy.com/thread-221236.htm)