command accepted by pi in the epoch Rdec[l][in] for the
consensus instance in of object l. The initial values in
Rnd and Rdec are 0, while the ones in V dec are N U LL.
- Acks. It
is a multidimensional array used to collect
the ACKACCEPT messages sent as replies to ACCEPT
messages. The pair (cid:3)c, j(cid:4) is in the set Acks[l][in][e] iff
pi has received a ACKACCEPT with command c for the
consensus instance in of the object l in the epoch e.
- Cstructs. It is the most recent value of the command
structures delivered by pi. Its initial value is ⊥.
B. The Protocol
A command submitted to M 2P AXOS via the C-
PROPOSE(Cmd c) goes throughout four phases:
i) the
Coordination phase, whose pseudocode is presented in Al-
gorithm 1, which establishes whether the command can
be decided in two, three or more communication delays;
ii) the Accept phase, whose pseudocode is presented in
Algorithm 2, which requests the acceptance of the command
in a certain position with respect to the other submitted
commands; iii) the Decision phase, whose pseudocode is
presented in Algorithm 3, which decides the command’s
ﬁnal position, appends the command to the next Cstructs to
be delivered, and executes the delivery of the Cstructs; and
iv) the Acquisition phase, whose pseudocode is presented in
Algorithm 4, which executes a reconﬁguration of ownership,
if needed, in order to elect the node in charge of requesting
acceptance of the command.
1) Coordination phase (Algorithm 1): When a com-
mand c is proposed by node pi via C-PROPOSE(Cmd c),
M 2P AXOS coordinates the decision for c. For each object
l in c.LS such that there is no position in that is associated
with l and was decided for c, it adds the next available
position for l, i.e., LastDecided[l] + 1, to the ins set (line
2). Therefore if ins contains the pair (cid:3)l, in(cid:4), we say that pi
wants to participate to decide c in the consensus instance in
for l. In other words, M 2P AXOS tries to deliver command
c after all the commands c(cid:2) such that ∃(cid:3)l, in(cid:4) ∈ ins and
Decided[l][in(cid:2)] = c(cid:2), for some in(cid:2) < in.
If ins is not empty, M 2P AXOS executes one of three
possible phases for c, depending on whether c can be
160
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:37:37 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 1 M 2P AXOS: Coordination phase (node pi).
1: upon C-PROPOSE(Cmd c)
2:
l ∈ c.LS ∧ (cid:2)in :
Decided[l][in] = c}
Set ins ← { (cid:5)l, LastDecided[l] + 1(cid:6) :
if ins = ∅ then
if ISOWNER(pi, ins) = (cid:10) then
return
Array eps
∀(cid:5)l, in(cid:6) ∈ ins, eps[l][in] ← Epoch[l]
Bool acc ← AcceptP hase({}{}, c, ins, eps)
if acc = ⊥ then
trigger C-PROPOSE(c) to pi
else if |GETOWNERS(ins)| = 1 then
send PROPOSE(c) to pk ∈ GETOWNERS(ins)
wait(timeout) until ∀l ∈ c.LS, ∃in : Decided[l][in] = c
if ∃l ∈ c.LS, (cid:2)in : Decided[l][in] = c then
trigger C-PROPOSE(c) to pi
else
ACQUISITIONPHASE(c)
function Bool ISOWNER(Node pi, Set ins)
for all (cid:5)l, in(cid:6) ∈ ins do
if Owners[l] (cid:3)= pi then
return ⊥
return (cid:10)
function Set GETOWNERS(Set ins)
Set res ← ∅
for all (cid:5)l, in(cid:6) ∈ ins do
res ← res ∪ {Owners[l]}
return res
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
decided in two or three communication delays, or c needs a
reconﬁguration of the ownership relation.
In the ﬁrst case, if for each pair (cid:3)l, in(cid:4) in ins, pi is the
current owner of object l (lines 5 and 19–23), pi can execute
an Accept phase for command c in positions ins without
changing the epochs for those positions (lines 6–8). If that
phase succeeds then c will be eventually delivered by all
correct nodes in two communication delays; otherwise pi
restarts the Coordination phase (lines 9–10). We notice that
the value of the ﬁrst input parameter of the AcceptPhase
function is an empty array because in this case the node pi
does not request the acceptance of any other command dif-
ferent from c. As we will explain in detail in Section V-B2,
there are scenarios in which pi must prioritize the acceptance
of commands different from c.
In the second case, if for each pair (cid:3)l, in(cid:4) in ins, pk(cid:3)=i is
the current owner of object l (lines 11 and 25–29), pi can
request the execution of the Coordination phase for c to pk
(lines 12–13). In the best case, pk will execute lines 1–8 by
reaching a decision in two communication delays for c, so
by paying a total cost of three communication delays if we
take into account the forward of c from pi to pk. However,
to avoid blocking conditions (e.g., if pk crashed, and pi did
not detect the crash), if pi does not observe c as decided
in at least one position in for each object l in c.LS when
a conﬁgurable timeout expires (line 13), pi takes over and
re-executes the Coordination phase (lines 14–15).
In the third case (lines 16–17), neither pi nor any other
node pk(cid:3)=i have the necessary ownership to execute the
Accept phase for c. Therefore, pi forces a reconﬁguration of
the ownership by entering the Acquisition phase. So pi tries
to acquire the ownership on c.LS and, as we will explain
in Section V-B4, it also executes the Accept phase.
2) Accept phase (Algorithm 2): In this phase pi requests
the acceptance of a command in all the positions listed in ins
for the epochs in eps to a quorum of nodes (lines 8–9). In
the case where this phase starts at line 8 of Algorithm 1,
is c, namely the
the command that
command that pi is proposing (lines 5–7). Otherwise, this
is an Accept phase called during an Acquisition phase, and
pi needs to take into account the outcome of the ownership
reconﬁguration ﬁrst, i.e., toF orce.
is broadcast by pi
the Accept phase executed by pi
Although this last case will be clearer when we will
analyze the Acquisition phase in Section V-B4, we have to
notice that, due to the asynchrony of the system, M 2P AXOS
cannot prevent
to be
concurrent with the Accept phase executed by another node
pk for a command c(cid:2) conﬂicting with c. Indeed, if there
is some node that already accepted c(cid:2) for a certain pair
(cid:3)l, in(cid:4) ∈ ins, pi cannot ignore that, and it has to collaborate
for the decision of c(cid:2) in instance in (lines 3–4).
This phase can abort by returning ⊥ after having broadcast
the ACCEPT message if pi receives at least one negative
reply, i.e., an ACKACCEPT message marked as N ACK
(lines 10–11). Indeed, when a node receives an ACCEPT
message for a set of commands toDecide, a set ins of pairs
(cid:3)l, in(cid:4), and an array epochs eps (line 16), it can reply with a
N ACK if there exists at least an object l and a position in,
such that (cid:3)l, in(cid:4) ∈ ins, and the node already participated in
the consensus instance in for l by using an epoch number
greater than eps[l][in] (lines 23–24). This can obviously
happen when there is another node that is concurrently trying
to propose another command in position in for l.
Otherwise, if that is not the case (line 17–22), the node
can broadcast an ACKACCEPT message with ACK, and for
each (cid:3)l, in(cid:4) ∈ ins it also sets the following information:
the current owner of l is the sender of the ACCEPT (line
18); the last command accepted in (cid:3)l, in(cid:4) is toDecide[l][in]
(line 19); the greatest epoch in which the node has accepted
a value in (cid:3)l, in(cid:4) is eps[l][in] (line 20); and the greatest
epoch in which the node has participated for the consensus
instance (cid:3)l, in(cid:4) is eps[l][in] (line 21).
Therefore if pi receives at least a quorum of ACKACCEPT
messages marked as ACK for the commands in toDecide,
it can broadcast the ﬁnal decision toDecide via a DECIDE
message (lines 12–14).
3) Decision phase (Algorithm 3): In this phase a node pi
marks a command c as decided in instance in for a certain
object l, by setting Decided[l][in] to c (lines 4 and 10). This
happens in the following two cases.
First, if pi receives a DECIDE message for commands
toDecide and instances ins, such that (cid:3)l, in(cid:4) ∈ ins and
toDecide[l][in] = c (lines 1–4). Second, if pi receives at
least a quorum of ACKACCEPT messages marked as ACK
161
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:37:37 UTC from IEEE Xplore.  Restrictions apply. 
Quorum
function Bool ACCEPTPHASE(Array toForce, Cmd c, Set ins, Array eps)
Array toDecide
for all (cid:5)l, in(cid:6) ∈ ins : toF orce[l][in] = (cid:5)c(cid:2), −(cid:6) : c(cid:2) (cid:3)= N U LL do
if ∀(cid:5)l, in(cid:6) ∈ ins, toDecide[l][in] = N U LL then
Algorithm 2 M 2P AXOS: Accept phase (node pi).
1:
2:
3:
4:
5:
6:
7:
8:
9:
send ACCEPT((cid:5)toDecide, ins, eps(cid:6)) to all pk ∈ Π
Set replies ← receive ACKACCEPT((cid:5)ins, eps, toDecide, −(cid:6)) from
if ∃(cid:5)ins, eps, toDecide, N ACK(cid:6) ∈ replies then
toDecide[l][in] ← c(cid:2)
for all (cid:5)l, in(cid:6) ∈ ins do
toDecide[l][in] ← c
return ⊥
send DECIDE((cid:5)toDecide, ins, eps(cid:6)) to all pk ∈ Π
return (cid:10)
10:
11:
12:
13:
14:
15:
16: upon ACCEPT((cid:5)Array toDecide, int ins, Array eps(cid:6)) from pj
17:
18:
19:
20:
21:
22:
23:
24:
∀(cid:5)l, in(cid:6) ∈ ins, Owners[l] ← pj
∀(cid:5)l, in(cid:6) ∈ ins, V dec[l][in] ← toDecide[l][in]
∀(cid:5)l, in(cid:6) ∈ ins, Rdec[l][in] ← eps[l][in]
∀(cid:5)l, in(cid:6) ∈ ins, Rnd[l][in] ← eps[l][in]
send ACKACCEPT((cid:5)ins, eps, toDecide, ACK(cid:6)) to all pk ∈ Π
send ACKACCEPT((cid:5)ins, eps, toDecide, N ACK(cid:6)) to pj
if ∀(cid:5)l, in(cid:6) ∈ ins, Rnd[l][in] ≤ eps[l][in] then
else
else
for commands toDecide, instances ins and epochs eps, such
that (cid:3)l, in(cid:4) ∈ ins and toDecide[l][in] = c (lines 6–10).
if Decided[l][in] = N U LL then
for all (cid:5)l, in(cid:6) ∈ ins do
Decided[l][in] ← toDecide[l][in]
Algorithm 3 M 2P AXOS: Decision phase (node pi).
1: upon DECIDE((cid:5)Set toDecide, Set ins, Array eps(cid:6)) from pj
2:
3:
4:
5:
6: upon ACKACCEPT((cid:5)Set ins, Array eps, Array toDecide, ACK(cid:6))
7:
8:
Set Acks[l][in][eps[l][in]] ← Acks[l][in][eps[l][in]] ∪
if |Acks[l][in][eps[l][in]]|≥ sizeof (Quorum) ∧
{(cid:5)toDecide[l][in], j(cid:6)}
∧ Decided[l][in] = N U LL
for all (cid:5)l, in(cid:6) ∈ ins do
from pj
9:
then
Decided[l][in] ← c : (cid:5)c, −(cid:6) ∈ Acks[l][in][eps[l][in]]
10:
11:
12: upon (∃c : ∀l ∈ c.LS, ∃in : Decided[l][in] = c ∧
13:
14:
15:
16:
Cstructs ← Cstructs • c
trigger C-DECIDE(Cstructs)
for all l ∈ c.LS do
pi.lastDecided[l] + +
∧ in = LastDecided[l] + 1)
Furthermore, as soon as there exists a command c such
that c has been decided in some instance in associated with
an object l, for all l ∈ c.LS, M 2P AXOS checks whether it