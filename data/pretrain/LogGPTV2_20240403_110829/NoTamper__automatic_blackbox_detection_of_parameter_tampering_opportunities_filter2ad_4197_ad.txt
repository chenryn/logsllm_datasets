PhpNuke
OpenIT
LegalCase
smi-online.co.uk
wiley.com
garena.com
selfreliance.com
codemicro.com
Fo- Hostile
rms
5
3
1
1
1
1
3
2
1
1
1
1
1
Pote.
Inputs Oppo.
42
35
8
8
21
5
27
9
4
4
4
1
1
56
37
10
8
25
6
28
13
23
15
4
5
6
Exploit?
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
Conf. Conf.
FP
8
16
1
7
2
4
0
0
2
2
1
0
0
(cid:88)
(cid:88)
Lines
of Code
186,691
9,431
92,712
97,304
114,959
58,198
228,058
167,087
Application
Ezybiz
Mybloggie
OpenDB
SMF
OpenIT
Legalcase
PHP-Nuke
B2evolution
smi-online.co.uk
wiley.com
garena.com
selfreliance.com
codemicro.com
Files
Client-
Side
1,103 HTML+JS
59 HTML+JS
273 HTML+JS
166 HTML+JS
335 HTML+JS
195
HTML
1,745 HTML+JS
531
HTML+JS
HTML
HTML
HTML
HTML
HTML+JS
Use
Busn Mgt
Blog
Inventory
Forum
Support
Inventory
Content Mgt
Blog
Conference
Library
Gaming
Banking
Shopping
Table 4: Summary of NOTAMPER results (Opportunities:169,
Examined: 50, Conﬁrmed exploits: 9, False Positives:43 ).
Table 5: NOTAMPER analyzed 8 open source applications and 5
live websites
common sequence. Our procedure has linear complexity in its best
case and has quadratic worst-case complexity.
4.6 Implementation
The HTML analysis was implemented on top of the APIs pro-
vided by the HTML Parser2, speciﬁcally using visitors for 
and  tags. The JavaScript analysis was performed using
a modiﬁed Narcissus JavaScript engine-based symbolic evaluator.
Narcissus is a meta-circular JavaScript interpreter that uses Spider-
Monkey JavaScript engine’s interfaces.
The Input Generator was built as a wrapper around the solver
HAMPI[13] using the subroutine library Epilog3 for manipulating
logical expressions written in KIF4. It consisted of 1700 lines of
Lisp code.
The Opportunity Detector was primarily implemented in Java.
Based on inputs generated by the constraint solver, a Java-based
module relayed HTTP requests to the test server, saved the re-
sponses for processing, and implemented algorithm to compute the
difference rank.
5. EVALUATION
Test suite and setup. We selected 8 open source applications
and 5 live websites. To choose the open source applications, we vis-
ited http://opensourcescripts.com and found applica-
tions that are heavily reliant on web forms (mainly blogs, business
and management applications) and do not use AJAX. To choose the
live websites, we selected forms we used personally that seemed
likely to contain ﬂaws (e.g., one of the authors has an account at
the exploited bank). Table 5, provides some background details for
these applications. For open source applications, columns 2 and 3
show the lines of code and number of ﬁles, respectively. Column
4 shows the type of constraints enforced by the evaluated forms
and the last column shows the functionality provided by the ap-
plication. We deployed the applications on a Linux Apache web
server (2.8GHz Dual Intel Xeon, 6.0GB RAM) and our prototype
implementation NOTAMPER ran under Ubuntu 9.10 on a standard
desktop (2.45Ghz Quad Intel, 2.0GB RAM).
2http://htmlparser.sourceforge.net/
3http://logic.stanford.edu/
4http://www-ksl.stanford.edu/knowledge-sharing/kif/
5.1 Summary
Our experimental ﬁndings are summarized in Table 4. For each
application (column 1), the table includes the number of forms an-
alyzed (column 2), the number of hostile inputs NOTAMPER gen-
erated (column 3), the number of tampering opportunities (column
4), and whether or not we were able to conﬁrm a vulnerability for
that application (column 5). The last column lists the number of
conﬁrmed false positives.
When deployed by a web developer to analyze a web applica-
tion, column 4 is of primary interest. A developer need only look
through those hostile inputs that were accepted by the server, and
for each one manually decide whether or not the server is actually
vulnerable. When deployed by testers (blackhat team), they may
conﬁrm exploits by further experimenting with the accepted hostile
inputs. In a similar spirit, we tried to conﬁrm at least one exploit
in each application. The effort involved to examine 50 of the to-
tal 169 opportunities was moderate and required an undergraduate
student only a week of effort. We anticipate seasoned developers
and testers familiar with their applications to take much less time.
During this effort, we developed working exploits in 9 out of 13 ap-
plications. Below we highlight some of the exploits we discovered.
5.2 Details of Exploits
Unauthorized money transfers. The online banking website
www.selfreliance.com allows customers to transfer money be-
tween their accounts online. A customer logs onto the web site,
speciﬁes the amount of money to transfer, uses a drop-down menu
to choose the source account for the transfer, and uses another drop-
down menu to choose the destination account. Both drop-down
menus include all of the user’s account numbers.
It turns out that the server for this application did not validate
that the account numbers provided were drawn from the drop-down
menus. Thus, sending the server a request to transfer money be-
tween two arbitrary accounts succeeded, even if the user logged
into the system was an owner of neither account.
When NOTAMPER analyzed this form, it generated a hostile in-
put where one of the account numbers was a single zero. The server
response was virtually the same as the response to the benign in-
puts (where the account numbers were drawn from the drop-down
menus). Therefore, this input was ranked highly by NOTAMPER as
a potential vulnerability. When we attempted to conﬁrm the vul-
nerability, we were able to transfer $1 between two accounts of
unrelated individuals. (Note that if the server had checked for valid
account numbers but failed to ensure the user owned the chosen ac-
counts, NOTAMPER would not have discovered the problem; how-
615Application
SMF
Ezybiz
OpenDB
MyBloggie
B2evolution
PhpNuke
OpenIT
LegalCase
smi-online.co.uk
wiley.com
garena.com
selfreliance.com
codemicro.com
Formu.
Pote. HT-
Comp. Oppo. ML
28
19
8
8
8
4
21
3
2
4
4
1
0
17
28
29
23
47
6
20
13
36
20
10
9
12
42
35
8
8
21
5
27
9
4
4
4
1
1
JS Hid-
den
10
5
0
0
13
1
3
6
1
0
0
0
0
4
11
0
0
0
0
3
0
1
0
0
0
1
Table 6: Details of NOTAMPER results.
Figure 4: Graph illustrating the importance of hostile input
ranking, with bold triangles denoting thresholds used.
ever, if the human tester provided valid account numbers as hints,
NOTAMPER would have identiﬁed the problem.)
We note that this vulnerability could have signiﬁcant impact given
that the bank in question has over 30,000 customers. Further, a suc-
cessful exploit requires only the knowledge of victim account num-
bers, which are shared routinely when writing cheques. The bank
was contacted about this vulnerability and ﬁxed it in less than 24
hours, during which time the functionality for transferring money
was disabled completely. Furthermore, Selfreliance had licensed
the software that contained the vulnerability from ESP Solutions
(www.espsolution.net), who applied a global patch for all their
clients that utilized this functionality and additionally ﬁxed simi-
lar problems in their other key product FORZA that provides online
banking features.
Unlimited shopping rebates.
The online shopping website
www.codemicro.com sells computer equipment, e.g., hard drives,