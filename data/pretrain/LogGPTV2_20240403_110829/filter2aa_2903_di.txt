N
root@ELAR-Systems:/sys/kernel/debug/mali0/ctx/defaults# cat mem_pool_max_s
ize 
16384
第一个文件用于启用无限缓存（Infinite Cache）功能，当前值N代
表没有启用，使用命令echo Y > infinite_cache可以启用该功能。第二个
文件是显存池的最大页数，也是可以配置的。
12.6.4 SysFS下的虚拟文件
SysFS是Linux系统中的另一种虚拟文件系统，默认挂接在/sys目
录，每一类内核对象在该目录下都会有一个子目录，比如module、fs、
devices等。在devices/platform目录下会有一个类似下面这样的子目录。
/sys/devices/platform/ffa30000.gpu
其中有很多个文件和子目录，比如下面是在Tinker单板系统上观察
到的结果。
core_availability_policy  js_scheduling_period  power
core_mask                 js_softstop_always    power_policy
debug_command             js_timeouts           reset_timeout
devfreq                   mem_pool_max_size     soft_job_timeout
driver                    mem_pool_size         subsystem
driver_override           misc                  uevent
dvfs_period               modalias              utilisation
gpuinfo                   of_node               utilisation_period
ipa                       pm_poweroff
其中的每个虚拟文件是Kbase驱动程序使用DEVICE_ATTR宏定义
的一个设备属性，比如其中的gpuinfo就是通过如下代码定义的。
static DEVICE_ATTR(gpuinfo, S_IRUGO, kbase_show_gpuinfo, NULL);
其中，debug_command文件可以接受调试命令，与驱动交互，但是
在目前的公开版本中，仅支持dumptrace一条命令。
12.6.5 基于ftrace的追踪设施
函数追踪（function trace，ftrace）是Linux内核实现的一套事件追踪
设施。如果打开编译选项CONFIG_MALI_SYSTEM_TRACE，那么
Kbase驱动便会创建一套基于ftrace的追踪设施，包括一个追踪器和一系
列事件。
比如，在/sys/kernel/debug/tracing/events/mali子目录下会看到如下文
件。
enable filter mali_job_slots_event mali_mmu_as_in_use mali_mmu_as_released
mali_page_fault_insert_pages mali_pm_power_off mali_pm_power_on
使用trace_cmd record（-e指定事件）类似下面这样的命令可以开启
和记录上面的函数追踪事件。
trace_cmd record -e mali记录后，然后可以使用trace_cmd report来观
察事件的统计报告。
12.6.6 Kbase的追踪设施
值得特别介绍的是，Kbase驱动自己还实现了一套信息追踪设施，
其实现与prink类似，也是先分配一块内存区，然后循环使用。
为了避免与上面介绍的基于ftrace的追踪设施混淆，Kbase自己实现
的追踪设施称为Kbase追踪，事件定义在mali_linux_kbase_trace.h中。基
于ftrace的实践定义在mali_linux_trace.h中。
当使用了CONFIG_MALI_DEBUG选项编译后，DebugFS的mali0子
目录下会增加一个名叫mali_trace的文件，它就是用于观察环形缓冲区
内追踪信息的。
不过，必须要同时启用
CONFIG_MALI_MIDGARD_ENABLE_TRACE选项，才能观察到追踪
信息，不然缓冲区是空的，观察mali_trace什么也看不到。在代码内
部，启用这个编译选项后，才会定义KBASE_TRACE_ENABLE宏，其
定义如下。
#ifdef CONFIG_MALI_MIDGARD_ENABLE_TRACE
#define KBASE_TRACE_ENABLE 1
#endif
在Kbase的一些重要函数中可以看到类似下面这样产生事件的代
码。
KBASE_TRACE_ADD(kbdev, CORE_CTX_DESTROY, kctx, NULL, 0u, 0u);
如果定义了KBASE_TRACE_ENABLE，那么会把
KBASE_TRACE_ADD宏定义为kbasep_trace_add函数，后者会把信息写
到环形缓冲区。
例如，下面是电源管理模块中复位函数kbase_pm_do_reset的部分代
码。
static int kbase_pm_do_reset(struct kbase_device *kbdev)
{
    KBASE_TRACE_ADD(kbdev, CORE_GPU_SOFT_RESET, NULL, NULL, 0u, 0);
    kbase_reg_write(kbdev, GPU_CONTROL_REG(GPU_COMMAND),
                             GPU_COMMAND_SOFT_RESET, NULL);
函数内的KBASE_TRACE_ADD便用于产生Kbase追踪事件。后面
一句通过写硬件的控制寄存器来对GPU进行软复位。
可以使用cat mali_trace这样的简单命令来观察环形缓冲区内的事
件。比如，清单12-2是在Tinker单板系统上启用Kbase追踪后，再观察
mali_trace的部分结果。
清单12-2 观察Kbase追踪的事件记录
root@ELAR-Systems:/sys/kernel/debug/mali0# cat mali_trace 
3.316746,99,2,CORE_GPU_SOFT_RESET,  (null),,00000000,,,0x00000000
3.317534,114,0,CORE_GPU_IRQ,  (null),,00000000,,,0x00000100
3.317537,114,0,CORE_GPU_IRQ_CLEAR,  (null),,00000000,,,0x00000100
3.317537,114,0,CORE_GPU_IRQ_DONE,  (null),,00000000,,,0x00000100
3.317549,99,2,PM_CONTEXT_IDLE,  (null),,00000000,,0,0x00000000
3.317552,99,2,PM_CONTEXT_ACTIVE,  (null),,00000000,,1,0x00000000
3.323644,99,2,PM_CONTEXT_IDLE,  (null),,00000000,,0,0x00000000
3.324365,125,1,PM_CORES_POWERED,  (null),,00000000,,,0x00000000
3.324366,125,1,PM_CORES_POWERED_TILER,  (null),,00000000,,,0x00000000
3.324367,125,1,PM_CORES_POWERED_L2,  (null),,00000000,,,0x00000000
3.324368,125,1,PM_CORES_POWERED_TILER,  (null),,00000000,,,0x00000000
3.324371,125,1,PM_CORES_AVAILABLE,  (null),,00000000,,,0x00000000
3.324371,125,1,PM_CORES_AVAILABLE_TILER,  (null),,00000000,,,0x00000000
3.324371,125,1,PM_CORES_POWERED_L2,  (null),,00000000,,,0x00000000
3.324372,125,1,PM_CORES_POWERED,  (null),,00000000,,,0x00000000
3.324372,125,1,PM_CORES_POWERED_TILER,  (null),,00000000,,,0x00000000
3.324373,125,1,PM_DESIRED_REACHED,  (null),,00000001,,,0x00000000
3.324373,125,1,PM_DESIRED_REACHED_TILER,  (null),,00000000,,,0x00000000
3.324373,125,1,PM_WAKE_WAITERS,  (null),,00000000,,,0x00000000
3.324375,125,1,PM_GPU_OFF,  (null),,00000000,,,0x00000000
下面这行源代码描述了上面每一行的格式。
"Dumping trace:\nsecs,nthread,cpu,code,ctx,katom,gpu_addr,jobslot,refcount
,info_val");
也就是说，从左到右各列分别为：时间戳（启动以来的秒数，与
printk相同）、线程号、CPU编号、事件代码、上下文结构指针、与事
件关联的原子信息、GPU地址、任务的插槽号、引用计数以及附加信
息。
12.7 其他调试设施
本节将简要介绍与Mali GPU有关的其他调试设施，包括用于收集数
据的Caiman以及离线编译器等。
12.7.1 Caiman
与Gator类似，Caiman一词既可以指一种鳄鱼类的动物，也可以表
示一种军用车辆的名字。在ARM的工具链中，它也是用于采集数据
的，也是DS-5的一部分，不过它采集的数据种类主要是与电能有关的，
比如电压、电流等。
目前，Caiman支持两类硬件工具，一类是NI（National
Instruments）公司的数据采集器（DAQ），另一类是ARM电能探测器
（ARM Energy Probe），如图12-10（a）和（b）所示。
DS-5中包含了预编译好的Caiman程序。值得说明的是，Caiman程
序是和DS-5的Streamline运行在同一台机器上的，也就是运行在主机端
的，所以对于Windows版本的DS-5，安装的便是Windows版本的可执行
程序。
（a）NI公司的DAQ              （b）ARM电能探测器
图12-10 与Caiman配合的DAQ和ARM电能探测器
Caiman是开源的，其源代码参见GitHub网站。下载Caiman的源代
码后，会发现其中包含一个简单的协议文档，用于支持其他硬件工具。
12.7.2 devlib
Caiman需要依赖硬件工具，而且需要通过电线与目标系统连接才能
测量电压、电流等信息。这通常只能在实验室中对某些定制过的开放系
统进行测量，对于最终产品和用户环境就很难适用了。为此，ARM还
开发了一套名叫devlib的数据收集工具，既可以使用硬件工具，也可以
用纯软件的方式来采集电能信息，包括读取芯片的频率和芯片内部的计
数器等，这套工具名叫devlib。
在devlib中，有多个子项目，有的是Python脚本，有的是C/C++语言
的程序，其中之一叫readenergy，它是个命令行工具，基本用法如下。
readenergy [-t PERIOD] [-o OUTFILE]
这个小工具按指定的时间间隔读取Juno开发板上电能计数器
（Energy Counter）的信息，然后以CSV格式写到指定的输出文件中，
如果没有指定文件，就直接输出到终端。可以读取的信息包括GPU的电
流（gpu_current）和电压（gpu_voltage），以及系统其他关键部件的电
能信息。
12.7.3 Mali离线编译器
从ARM网站可以下载到为Mali GPU开发的离线编译器，使用这个
编译器可以在x86硬件平台上交叉编译运行在Mali GPU上的各类程序，
包括OpenGL ES（Embedded System）标准的各类着色器程序、OpenCL
程序和Vulkan标准的各类着色器程序。
下面以Windows版本的Mali离线编译器为例对其做简单介绍。
在安装目录中，可以找到Mali离线编译器的主程序，名叫
malisc.exe，它是个命令行工具，基本用法如下。
malisc [选项] 
例如，可以这样编译OpenGL ES的计算着色器。
malisc  samples\openglessl\shader.comp
如果没有特别指定文件类型，编译器会根据文件后缀进行判断，其
约定如表12-1所示。
表12-1 关于Mali离线编译器文件后缀的约定
后  缀
代表的文件
说  明
.vert
OpenGL ES Vertex Shader
顶点着色器
.frag
OpenGL ES Fragment Shader
片段着色器
.comp
OpenGL ES Compute Shader
计算着色器
.geom
OpenGL ES Geometry Shader
几何着色器
.tesc
OpenGL ES Tessellation Control Shader
曲面细分控制着色器
.tese
OpenGL ES Tessellation Evaluation Shader
曲面评估着色器
.cl
OpenCL Kernel
OpenCL的算核程序
可以通过-o选项指定输出文件，比如malisc -o comp.bin
samples\openglessl\shader.comp。
在编译时，malisc会输出编译器的使用情况，比如以下信息。
64 work registers used, 10 uniform registers used, spilling not used.
也会输出需要发射给不同处理单元的指令条数，并预估执行时所需
的时钟周期数，比如以下内容。
                        A       L/S     T
Instructions Emitted:   157     2       0
Shortest Path Cycles:   1.75    0       0
Longest Path Cycles:    157     2       0 -
行标题中的A代表算术单元，L/S代表加载和存储单元，T代表纹理
单元。第1行代表要在每种执行单元上执行的指令数。第2行代表估计所
需的最短时钟周期。第3行是估计的最长执行时间（时钟周期个数）。
可以通过-c参数来指定目标GPU，比如malisc -c Mali-T830
samples\openglessl\shader.comp。这会针对Midgard微架构的T830 GPU进
行编译并估算执行时间，上面的信息使用默认的G72 GPU。
12.8 缺少的调试设施
在本书介绍的四个厂商的GPU中，Mali GPU的软件工具链和调试设
施在功能上是最薄弱的。本节简要罗列目前还缺少的调试设施，希望本
书再版时情况会改变。
12.8.1 GPGPU调试器
GPGPU调试器堪称调试器软件领域的第1号工具。当GPU走上通用