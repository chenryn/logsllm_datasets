# 【技术分享】AtomBombing：一种新型的Windows代码注入技术

#### 译文声明
本文为翻译文章，原文来源：breakingmalware。具体内容及含义以原文为准。
**翻译者**：[Ox9A82](http://bobao.360.cn/member/contribute?uid=2676915949)
**稿酬**：250RMB（欢迎投稿！）
**投稿方式**：发送邮件至linwei#360.cn 或访问[网页版](http://bobao.360.cn/contribute/index)在线投稿。

最近，我们发现了一种名为“AtomBombing”的新代码注入技术，该技术利用了Windows系统的异步过程调用（APC）机制，并且目前尚不能被安全防护工具检测到。

代码注入作为黑客攻击中的一个重要手段已存在多年。关于代码注入及其在APT攻击中的应用，请参考：[http://blog.ensilo.com/atombombing-a-code-injection-that-bypasses-current-security-solutions](http://blog.ensilo.com/atombombing-a-code-injection-that-bypasses-current-security-solutions)

### 概述
为了绕过现有的安全产品，攻击者不断寻找新的、未知的方法来实现代码注入。而这些方法需要能够作用于各种不同的进程，而非仅限于特定的几个。下面介绍的就是这样一种新技术——AtomBombing。

AtomBombing的工作流程分为三个主要步骤：
1. **任意地址写入** - 在目标进程的地址空间内任意位置写入数据。
2. **执行** - 劫持目标进程的线程以运行第一步中写入的代码。
3. **恢复** - 清理并恢复第二步中被劫持的线程。

### AtomBombing 步骤详解

#### 第一步: 任意地址写入
我在研究过程中偶然发现了几个非常有趣的API函数：
- `GlobalAddAtom`：向全局原子表添加一个字符串，并返回唯一标识符（即原子）。
- `GlobalGetAtomName`：通过给定的原子检索对应的字符串副本。

使用`GlobalAddAtom`可以在全局原子表中存储一段空终止的缓冲区，此表对系统上的所有进程都是可访问的。接着，通过`GlobalGetAtomName`可以从任何进程中读取这个缓冲区。理论上讲，可以将包含shellcode的缓冲区加入全局原子表，并让目标进程通过`GlobalGetAtomName`将其复制到自己的内存空间中，从而避免直接使用`WriteProcessMemory`函数。

那么如何使目标进程调用`GlobalGetAtomName`呢？答案是利用线程异步过程调用（APC）。`QueueUserApc()`允许向指定线程的APC队列添加用户模式APC对象。但是由于`GlobalGetAtomName`需要三个参数而标准APC回调函数只接受一个参数，因此我们需要找到变通的方法。实际上，可以通过内部未公开的`NtQueueApcThread`系统调用来传递更多参数，具体实现请参见GitHub项目中的`main_ApcWriteProcessMemory`示例代码。

#### 第二步: 执行
在目标进程中分配RWX（读/写/执行权限）内存是一个挑战。虽然没有找到合适的函数可以直接通过APC调用来完成这项任务，但我们可以通过ROP（返回导向编程）来解决这个问题。首先，使用第一步的方法将shellcode写入RW段；然后构建一个ROP链来分配RWX内存，并将代码从RW段复制到新的RWX区域中执行。

查找RW段并不困难，在本示例中选择了`kernelbase`的数据部分之后的一块未使用空间。详情请查看GitHub上的`main_GetCodeCaveAddress`示例。

通过这种方式，AtomBombing成功实现了跨进程代码注入，同时避开了当前的安全解决方案。