consider a byte sequence t to be a token if it occurs in at
least λ fraction of suspicious ﬂows.
Multiset Signature Model We consider signatures that
are multi-sets of tokens. For example a signature could
be {‘host’,
‘0xDDA’,
‘0xDDA’, ‘0xDDA’} or equivalently denoted as {(‘host’,2),
(‘http://1.1’,1), (‘0xDDAF’,1), (‘0xDDA’,3)}. A ﬂow
matches this signature if it contains at least one occurrence
each of ‘http://1.1’ and ‘0xDDAF’, two occurrences of
token ‘host’, and three occurrences of token ‘0xDDA’,
where overlapping occurrences are counted separately.
‘0xDDAF’,
A ﬂow W is said to match a multi-set of tokens
{(t1, n1), . . . , (tk, nk)} if it contains at least nj copies of
tj as a substring. For a set of ﬂows A and a multi-set of
tokens T , let AT denote the largest subset of A such that
every ﬂow in AT matches T .
Note that a multiset signature does not capture any or-
dering information of tokens. While a worm author may
be constrained to include the invariant bytes in a speciﬁc
order, the ordering constraint makes the signature easy to
evade by inserting spurious instances of the invariant tokens
in the variant part. An example of such an attack called the
coincidental-pattern attack is discussed in [16].
Matching of Multiset Signatures Counting the number
of overlapping occurrences of a set of tokens in a ﬂow of
length (cid:6) can be done in time O((cid:6) + z) where z is the total
number of occurrences. This is achieved by using a key-
word tree as proposed by [2]. The keyword tree can be
constructed in time O(τ ) as a preprocessing step where τ
is the total length of all the distinct tokens in all the signa-
tures. Therefore, a set of signatures is ﬁrst preprocessed to
construct a keyword tree of all the distinct tokens. Then for
each incoming ﬂow, all the overlapping occurrences of the
tokens are counted in linear time. Given these counts, we
can check if the ﬂow matches any of the signatures. This
check can be done in time linear to the number of tokens
in all the signatures and can thus be used for high-speed ﬁl-
tering of network ﬂows. Currently, the improved hardware-
based approach [27] can archive 6 – 8Gb/s.
Architecture The worm ﬂow classiﬁer labels a ﬂow as ei-
ther worm or normal. The ﬂows labeled worms constitute
the suspicious trafﬁc pool while those labeled normal con-
stitute the normal trafﬁc pool. If the ﬂow classiﬁer is per-
fect, all the ﬂows in the suspicious pool will be worm sam-
ples. Then ﬁnding a multi-set signature amounts to simply
ﬁnding the tokens common to all the ﬂows in the suspicious
pool which can be done in linear time. However, in practice
ﬂow classiﬁers at the network level will have some false
positives and therefore the suspicious pool may have some
normal ﬂows as noise. Finding a signature from a noisy
suspicious pool makes the problem NP-Hard (Theorem 1).
3.1 Problem Formulation
Given a suspicious trafﬁc pool M and a normal traf-
ﬁc pool N , our goal is to ﬁnd a signature S that covers
most of the ﬂows in M (low false negative) but not many
in N (low false positive). Let FPS denote the false posi-
tive of signature S as determined by the given normal pool
and COVS denote the true positive of S or the fraction of
|NS |
|N | and
suspicious ﬂows covered by S. That is, FPS =
COVS =
Problem 1 (Noisy Token Multiset Signature Generation
(NTMSG)).
INPUT: Suspicious trafﬁc pool M = {M1, M2, . . .} and
normal trafﬁc pool N = {N1, N2, . . .}; value ρ  1
FP{ ˆt1,..., ˆtj } ≤ FP{ ˆt1,..., ˆtj−1 ,ti} ∀ j ∀ i > j − 1
We
In words, ˆt1 is the token with the smallest false positive
rate. The token which has the least false positive value in
conjunction with ˆt1 is ˆt2. Similarly for the rest of ˆti’s.
propose
a model Γ with
parameters k∗,
u(1), u(2), . . . , u(k∗) to characterize the invariant I.
The constraint
imposed by Γ(k∗, u(1), . . . , u(k∗)) on
I = { ˆt1, ˆt2, . . . , ˆtk} is that FP{ ˆt1,..., ˆtj } ≤ u(j) for j ≤ k∗;
k ≤ k∗ and the occurrence of ˆti in the normal trafﬁc pool
is independent of any other token.
In other words, the model makes the assumption that
there exists an ordering of tokens such that for each i, the
ﬁrst i tokens appear in only u(i) fraction of the normal traf-
ﬁc pool. Consider the following values for the u-parameters
for k∗ = 5: u(1) = 0.2, u(2) = 0.08, u(3) = 0.04,
u(4) = 0.02 and u(5) = 0.01. The constraint imposed by
the model is that the invariant for the worm contains at least
one token ˆt1 which occurs in at most 20% (u(1)) of normal
ﬂows. There also exists at least another token ˆt2 such that
at most 8% (u(2)) of the normal ﬂows contain both ˆt1 and
ˆt2. Similarly for the rest of u(j).
Note that the assumption is only on the invariant part
over which the attacker has no control. Such invariant bytes
can include protocol framing bytes, which must be present
for the vulnerable server to branch down the code path
where a software vulnerability exists; and the value used
to overwrite a jump target (such as a return address or func-
tion pointer) to redirect the servers execution. The attacker
is allowed full control over how to construct the worm ﬂow
as long as they contain the tokens in I. We also allow the
attacker to order the tokens in the invariant in any manner
though in some cases he may not enjoy such ﬂexibility.
In essence, the model imposes some uniqueness con-
straint on the tokens that comprise the worm invariant. This
uniqueness constraint is captured by the u-values as dis-
cussed above. If all the tokens in the worm invariant are
very popular in normal trafﬁc, then the proposed greedy
algorithm cannot be guaranteed to ﬁnd a good signature.
However, since the invariant content is not under the con-
trol of the worm author, such an assumption is reasonable.
We use experimental valuations to validate this and propose
some reasonable values for the u-values.
Algorithm 1 NTMSG(M,N )
1. S ← Φ
2. For i = 1 to k∗
(a) Find the token t such that FPS∪{t} ≤ u(i) and
|MS∪{t}| is maximized. If no such token exists,
then output ”No Signature Found”.
(b) S ← S ∪ {t}
(c) if FPS < ρ, then output S.
3. Output S.
4.1 Runtime Analysis
We ﬁrst execute a preprocessing stage which consists of
token extraction and labeling each token with the ﬂows in
M and N that it occurs in.
If (cid:6) is the maximum token
length, T the total number of tokens and m and n the to-
tal byte size of suspicious pool and the normal pool respec-
tively, then this can be achieved in time O(m + n + T (cid:6) +
T (|M| + |N |)) by making use of sufﬁx arrays [15].
Given T tokens, Algorithm 1 goes through at most k∗
iterations where k∗ is a model parameter. In each iterations,
for each token t we need to determine the false positive and
coverage of the signature obtained by including the token in
the current set. Using the labels attached to each token, this
can be achieved in time O(|M| + |N |). Therefore the run-
ning time of the algorithm is O(T (|M| + |N |)). Since |N |
is usually greater than |M|, we get a runtime of O(T ·|N |).
4.2 Attack Resilience Analysis
|M| = α·.
Let M1 be the set of true worm ﬂows in M and let
M2 = M \ M1. Let the fraction of worm trafﬁc ﬂows
in M be α, i.e. |M1|
Theorem
the
model
Γ(k∗, u(1), . . . , u(k∗)),
the invariant contains k∗
tokens Algorithm 1 outputs a signature SOU T such that
|M1
Under
if
adversary
2.
|
(cid:2)i
SOU T
|M1| ≥ 1 − σk∗ · (1−α)
α where σi =
j=1 u(j).
Proof. We prove the above by induction on the number of
iterations for the loop in Algorithm Model-Based-Greedy-
Set-Signature.
(cid:2)j
i=1 u(i)·(1 − α)·|M|.
Let H(j) denote the statement that after the j th iteration
S| ≥ α·|M| −
Base Case: j = 1. Let the token selected in the ﬁrst it-
eration be ˜t1. Since M{ ˆt1} ≥ α·|M|, M{ ˜t1} ≥ α·|M|.
|M1
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:47:34 UTC from IEEE Xplore.  Restrictions apply. 
Since FP{ ˜t1} ≤ u(1) and the distribution of tokens in
M2 is the same as that in N , |M2
| ≤ u(1)·|M2| =
u(1)·(1 − α)·|M|.
Therefore, |M1
| = |M{ ˜t1}| −
| ≥ α·|M| − u(1)·(1 − α)·|M|. Hence, H(0) is
| = |M{ ˜t1} \ M2
{ ˜t1}
{ ˜t1}
{ ˜t1}
|M2
true.
{ ˜t1}
Induction Step: H(j − 1) holds for some j, where 0 ≤
j − 1 ≤ k∗ − 1. Let the signature at the end of (j − 1)th
iteration be Sj−1. Let the token selected at the j th iteration
be ˜tj and let Sj = Sj−1 ∪ { ˜tj}. Let S(cid:4) = Sj−1 ∪ { ˆtj}
(cid:2)j−1
By induction hypothesis,
i=1 u(i)·(1 − α)·|M|.
S (cid:3)| = |M1
|M1
Since M1
|MS (cid:3) | ≥ |M1
Sj−1
Sj−1
|. Therefore,
|M1
Since ˜tj has the maximum coverage at
eration, |MSj
(cid:2)j−1
u(j)·(1−α)·|M|, |M1
Sj
Sj−1
i=1 u(i)·(1 − α)·|M|.
α·|M| −
| ≥ |MS (cid:3)| ≥ |M1
| ≥ |M1
Sj−1
| ≥ α·|M| −
{ ˆtj } = M1,
|.
Sj−1
the j th it-
| ≤
|−u(j)·(1−α)·|M| ≥
|. Since |M2
Sj