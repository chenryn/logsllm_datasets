title:Mitigating Information Leakage Vulnerabilities with Type-based Data
Isolation
author:Alyssa Milburn and
Erik van der Kouwe and
Cristiano Giuffrida
2022 IEEE Symposium on Security and Privacy (SP)
Mitigating Information Leakage Vulnerabilities with
Type-based Data Isolation
Alyssa Milburn†*, Erik van der Kouwe* and Cristiano Giuffrida*
†Intel
*Vrije Universiteit Amsterdam, The Netherlands
PI:EMAIL, {vdkouwe,giuffrida}@cs.vu.nl
5
7
6
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
Abstract—Information leakage vulnerabilities (or simply info
leaks) such as out-of-bounds/uninitialized reads in the architec-
tural or speculative domain pose a signiﬁcant security threat,
allowing attackers to leak sensitive data such as crypto keys. At
the same time, such vulnerabilities are hard to efﬁciently mitigate,
as every (even speculative) memory load operation needs to be
potentially instrumented against unauthorized reads. Existing
conﬁdentiality-preserving solutions based on data isolation label
memory objects with different (e.g., sensitive vs. nonsensitive)
colors, color load operations accordingly using static points-
to analysis, and instrument them to enforce color-matching
invariants at run time. Unfortunately, the reliance on conser-
vative points-to analysis introduces overapproximations that are
detrimental to security (or further degrade performance).
In this paper, we propose Type-based Data Isolation (TDI),
a new practical design point in the data isolation space to
mitigate info leaks. TDI isolates memory objects of different
colors in separate memory arenas and uses efﬁcient compiler
instrumentation to constrain loads to the arena of the intended
color by construction. TDI’s arena-based design moves the instru-
mentation from loads to pointer arithmetic operations, enabling
new aggressive speculation-aware performance optimizations and
eliminating the need for points-to analysis. Moreover, TDI’s color
management is ﬂexible. TDI can support a few-color scheme with
sensitive data annotations similar to prior work (e.g., 2 colors) or
a many-color scheme based on basic type analysis (i.e., one color
per object type). The latter approach provides ﬁne-grained data
isolation, eliminates the need for annotations, and enforces strong
color-matching invariants equivalent to ideal (context-sensitive)
type-based points-to analysis. Our results show that TDI can
efﬁciently support such strong security invariants, at average
performance overheads of <10% on SPEC CPU2006 and nginx.
I. INTRODUCTION
Despite advances in security engineering, information leak-
age vulnerabilities (or info leaks) remain a major security
threat. Modern systems software is riddled with info leak
bugs [59] and Spectre-based variations [32] have expanded
the already large attack surface. Unfortunately, existing mit-
igations that aim to signiﬁcantly reduce such attack surface
incur nontrivial performance costs. In this paper, we show such
costs are not fundamental and an efﬁcient, ﬁne-grained data
isolation strategy based on secure allocation and lightweight
compiler instrumentation can mitigate info leaks, with single-
digit performance overhead for practical cases of interest.
a) The info leak era: Info leaks based on spatial (out-of-
bounds, type confused reads) or temporal (uninitialized, use-
after-free reads) memory errors are crucial in modern software
†Alyssa currently works at Intel; this work was done at the VU.
exploitation [59]. Such vulnerabilities enable attackers to leak
private data such as crypto keys (e.g., Heartbleed [50]).
Moreover, they enable reliable ROP [60] by allowing attackers
to bypass mitigations such as ASLR and stack cookies, or
by leaking a massaged memory object location [59]. While
info leaks in the architectural domain have dominated software
exploitation in the last decade, the attack surface has recently
expanded to the speculative domain with Spectre [32]. Spectre-
BCB (Bounds Check Bypass) is a widespread example of an
out-of-bounds read vulnerability using speculative execution.
b) Mitigating info leaks: Mitigating info leaks in a
practical way is notoriously difﬁcult. Mitigations that en-
tirely eliminate the attack surface in the architectural (e.g.,
memory safety [74]) and speculative (e.g., load fencing [49])
domain are expensive and normally out of reach of the
performance budget available in production settings. More
practical conﬁdentiality-preserving solutions described in lit-
erature are based on data isolation: isolating memory objects
in the address space to make them inaccessible from other
objects vulnerable to info leaks [12], [15], [38], [51], [65].
Such solutions generally color memory objects and load
operations based on the color of the objects they are allowed
to access, as dictated by static points-to analysis. Loads are
then instrumented to enforce such color-matching invariants
at run time by means of pointer masking [15], [33], domain
switching [12], [33], [38], [51], [53], [62], [65] or run-time
checks [12], [15], [33]. Some (not all) of these techniques (e.g.,
pointer masking) are also Spectre-safe. Some coarse-grained
solutions use a few, often two (sensitive vs. nonsensitive)
colors set by user annotations (e.g., labeling an allocation
site for crypto keys as sensitive) [12], [15], [51], while other
ﬁne-grained solutions use many colors, based on the clusters
automatically determined by points-to analysis [7], [20], [62].
Regardless of the particular scheme, existing data isola-
tion techniques—barring those targeting very speciﬁc code
patterns [33]—rely on static points-to analysis to determine
the set of possible targets of load operations. Since such
analysis is conservative and context-insensitive (other than
having trouble scaling to large programs), the set of possible
targets is often largely overapproximated even in state-of-the-
art implementations such as SVF [63] or data isolation-tailored
ones such as DataShield’s [15]. Such overapproximations are
problematic for either security, as they lead to much weaker
color-matching invariants, or for performance, when additional
metadata-based run-time checks are used to compensate for
© 2022, Alyssa Milburn. Under license to IEEE.
DOI 10.1109/SP46214.2022.00016
1049
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:47 UTC from IEEE Xplore.  Restrictions apply. 
this weakness [7], [15]. Even without expensive run-time
checks, the cost of instrumenting pervasive load operations for
data isolation is nontrivial. For example, generic load pointer
masking-based solutions with only two colors incur over 17%
average overhead on SPEC CPU2006 [33].
c) TDI:
In this paper, we present Type-based Data
in the data isolation
Isolation (TDI), a new design point
space with strong performance and security guarantees against
both architectural and speculative info leak vulnerabilities.
TDI’s key insight is that we can eliminate expensive load-
based instrumentation and imprecise points-to analysis if we
rearrange the address space layout and constrain pointers
within speciﬁc address ranges. In particular, TDI allocates
independent memory regions (arenas) for each memory object
color, both on the heap and stack, and then uses lightweight
compiler instrumentation to ensure each pointer of any given
color stays within its arena (i.e., object color) by construction.
TDI’s design provides several beneﬁts compared to prior work.
First, our arena-based strategy moves the compiler instru-
mentation from loads to pointer arithmetic operations. Not
only does this eliminate any dependency on context-insensitive
points-to analysis (which would degrade precision and secu-
rity), it also provides much better performance. Intuitively,
since many load operations depend on the same (or similar)
computed pointers we can reason about,
this signiﬁcantly
reduces the number of instrumentation points. Moreover, as
we will show, such strategy is particularly amenable to other
optimizations, such as efﬁcient masking and the use of inter-
arena guard zones. While similar optimization techniques have
been explored by traditional SFI solutions [24], [35], [41],
[57], [73], we show that TDI’s unique pointer arithmetic de-
sign enables much more aggressive optimizations, signiﬁcantly
outperforming prior work. We also detail and address the
challenges of making our optimizations speculation-aware.
Second, our design (and instrumentation) is entirely agnostic
to the object coloring scheme. Speciﬁcally, TDI supports
arbitrary coarse- or ﬁne-grained (i.e., many-color) isolation
schemes—with colors determined by explicit user annotations
or static analysis—despite signiﬁcantly outperforming prior
(annotation-based) data isolation solutions limited to coarse-
grained (e.g., 2-color) schemes. By default, TDI uses simple
static type analysis [66] to isolate each individual object
type in its own arena. This scheme supports annotation-
free protection and provides very ﬁne-grained isolation—well
beyond object coloring based on the clusters determined by
points-to analysis used by WIT [7] and others [20], [62].
With such a scheme, architectural or speculative info leak
vulnerabilities cannot be exploited to leak data across any two
given object types. For example, a crypto key can never be
leaked by means of a vulnerable string or buffer of any other
type. We show that TDI can ﬂexibly protect such situations in
OpenSSL with both coarse- and ﬁne-grained coloring.
Third, our design eliminates the need for imprecise and
hard-to-scale points-to analysis altogether. Our masking in-
strumentation does not rely on any particular object coloring
scheme, as we simply constrain pointers within their predeter-
mined arena rather than attempting to enforce color-matching
invariants by reasoning about the targets of load operations.
This strategy matches the precision of the underlying object
coloring scheme, with no overapproximations. As a result, our
standard conﬁguration using per-type arenas can enforce color-
matching invariants equivalent to load-side counterparts using
ideal (context-sensitive) type-based points-to analysis.
To summarize, our contributions are:
• We design and implement a prototype1 of TDI, a low-
overhead Type-based Data Isolation system based on
lightweight compiler instrumentation.
• We explore the challenges of efﬁciently implement-
ing such instrumentation, presenting aggressive but
speculation-aware optimizations allowing TDI to be ap-
plied to real-world code with low performance overhead.
• We automate TDI’s object coloring using state-of-the-art
type analysis, resulting in a ﬁne-grained isolation system
that aggressively contains info leak vulnerabilities in both
the architectural and speculative domain.
• We evaluate our TDI prototype using standard bench-
marks and the modern nginx web server. Our results
show TDI incurs only single-digit average performance
overhead on SPEC CPU2006 and nginx.
II. THREAT MODEL
We assume a typical modern software exploitation scenario
with an attacker exploiting either spatial (out-of-bounds reads,
type confused reads) or temporal (uninitialized reads, use-
after-free reads) info leak vulnerabilities while all the standard
modern mitigations, such as ASLR, DEP, stack cookies, etc.,
are in place. The attacker has not (yet) achieved control-ﬂow
hijacking, and aims to leak private data (e.g., crypto keys) or
information needed to hijack control (e.g., pointers or stack
cookies). The attacker can exploit both classical and specula-
tive info leak vulnerabilities. A typical example in the former
category would be a classical out-of-bounds read with an
attacker-controlled value which is not bounds-checked before
being used to index an array. A typical example in the latter
category would be a speculative out-of-bounds read with an
attacker-controlled value which is only architecturally bounds-
checked before being used as an array index. An attacker may
speculatively bypass the bounds check and leak data using
a (e.g., cache) covert channel a la Spectre-BCB [32]. While
we mostly focus on speculative out-of-bounds reads used by
the widespread Spectre-BCB variant, all the other classical
info leak vulnerabilities exploited in the speculative domain
(e.g., speculative type confusion) are in scope. Other unre-
lated Spectre (e.g., Spectre-BTB [32]) or transient execution
variants (e.g., MDS [67]) are out of scope and addressed by
complementary (e.g., hardware) mitigations. We also consider
other vulnerabilities (e.g., memory corruption) out of scope.
III. OVERVIEW
TDI hardens C/C++ programs by preventing pointers from
escaping the memory area—‘arena’—in which they were
1Our current code can be found at https://github.com/vusec/typeisolation.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:47 UTC from IEEE Xplore.  Restrictions apply. 