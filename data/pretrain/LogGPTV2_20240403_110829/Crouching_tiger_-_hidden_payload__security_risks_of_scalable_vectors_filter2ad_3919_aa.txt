title:Crouching tiger - hidden payload: security risks of scalable vectors
graphics
author:Mario Heiderich and
Tilman Frosch and
Meiko Jensen and
Thorsten Holz
Crouching Tiger – Hidden Payload:
Security Risks of Scalable Vectors Graphics
Mario Heiderich
Tilman Frosch
Meiko Jensen
Chair for Network and Data
Chair for Network and Data
Chair for Network and Data
Security
Security
Security
Ruhr-University Bochum,
Ruhr-University Bochum,
Ruhr-University Bochum,
Germany
Germany
Germany
PI:EMAIL
PI:EMAIL
PI:EMAIL
Thorsten Holz
Chair for System Security
Ruhr-University Bochum,
Germany
PI:EMAIL
ABSTRACT
Scalable Vector Graphics (SVG) images so far played a rather
small role on the Internet, mainly due to the lack of proper
browser support. Recently, things have changed: the W3C
and WHATWG draft speciﬁcations for HTML5 require mod-
ern web browsers to support SVG images to be embedded
in a multitude of ways. Now SVG images can be embed-
ded through the classical method via speciﬁc tags such as
 or , or in novel ways, such as with 
tags, CSS or inline in any HTML5 document.
SVG ﬁles are generally considered to be plain images or
animations, and security-wise, they are being treated as such
(e.g., when an embedment of local or remote SVG images
into websites or uploading these ﬁles into rich web appli-
cations takes place). Unfortunately, this procedure poses
great risks for the web applications and the users utilizing
them, as it has been proven that SVG ﬁles must be consid-
ered fully functional, one-ﬁle web applications potentially
containing HTML, JavaScript, Flash, and other interactive
code structures. We found that even more severe problems
have resulted from the often improper handling of complex
and maliciously prepared SVG ﬁles by the browsers.
In this paper, we introduce several novel attack techniques
targeted at major websites, as well as modern browsers,
email clients and other comparable tools. In particular, we
illustrate that SVG images embedded via  tag and CSS
can execute arbitrary JavaScript code. We examine and
present how current ﬁltering techniques are circumventable
by using SVG ﬁles and subsequently propose an approach to
mitigate these risks. The paper showcases our research into
the usage of SVG images as attack tools, and determines its
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’11, October 17–21, 2011, Chicago, Illinois, USA.
Copyright 2011 ACM 978-1-4503-0948-6/11/10 ...$10.00.
impact on state-of-the-art web browsers such as Firefox 4,
Internet Explorer 9, and Opera 11.
Categories and Subject Descriptors
K.6.5 [Security and Protection]: Unauthorized access
General Terms
Security
Keywords
Scalable Vector Graphics; Web Security; Browser Security;
Cross Site Scripting; Active Image Injections
1.
INTRODUCTION
One of the factors behind the huge success of the World
Wide Web is its ability and capacity for viewing image ﬁles
within a web browser. Compared to the text-only formats,
an image can convey considerably more information. A typi-
cal browser supports many diﬀerent image ﬁle formats, such
as JPEG, PNG and GIF ﬁles, whilst the vast majority of
websites on the Web contain at least one graphic in either
one form or another. Since image ﬁles are complex and need
to be parsed and rendered before they can be displayed by
a browser, it comes as no surprise that the images have se-
curity implications. To give an example, there were sev-
eral cases in the past where the validation routine of im-
age libraries contained security ﬂaws leading to vulnerabili-
ties [1, 2, 4]. For this reason, we need to consider the risk of
images as the attack vectors.
One image format that has up till now received very lim-
ited scrutiny and little attention from the web development
community is Scalable Vector Graphics (SVG [5]). This fam-
ily of ﬁle formats comprises several speciﬁcations and spec-
iﬁcation drafts for composition and rendering of the vector
based images and graphics. SVG is based on XML and was
ﬁrst published by the W3C in 1999. SVG images have not
gained much traction from the web developers, as the sup-
port provided by major browsers was not consistent and only
239Several other attacks such as SVG-based cross site scripting
attacks or SVG chameleons (i.e., ﬁles that are interpreted
diﬀerently depending on how they are opened) are also de-
livered. AII attacks are particularly important, since they
are caused by faulty SVG implementations in modern brow-
sers, thus aﬀect all websites allowing users to embed exter-
nal images – thereby our research signiﬁcantly extends and
partly falsiﬁes the information available in the Browser Se-
curity Handbook, so far only covering risks connected to
browser-deployed SVG in plugin containers. Furthermore,
we discuss how current state-of-the-art ﬁltering techniques
are deceivable via using SVG ﬁles.
The basic idea behind all of our attacks is the fact that
SVG ﬁles can accommodate active content, whereby brow-
sers actually interpret this content due to its being standard-
compliant. This idea is related to similar attacks that take
advantage of code embedded in document formats [8, 13, 32]
and we show that SVG images can be turned into an attack
vector. In addition, we demonstrate the damaging potential
of SVG ﬁles embedding arbitrary data formats and show
how this property can be used to carry out attacks using
Adobe Reader, Java Runtime Engine and Flash Player vul-
nerabilities. We discuss the impact of our attack on modern
browsers such as Firefox 4, Internet Explorer 9, and Opera
11, showing that especially inline SVG grants new possibil-
ities for bypassing website- and browser based XSS ﬁlters.
To mitigate the risks introduced by SVG-based attacks,
we debate and evaluate several defense strategies. We show-
case a ﬁltering solution that is capable of removing potential
malicious content from a given SVG ﬁle. Our approach does
not break the functionality of the core features of fully in-
teractive and descriptive SVG images. Instead, we extend
an existing and widespread ﬁltering software to support ﬁl-
tering of illegitimate and malicious content from SVG ﬁles,
without damaging the benign ﬁle structure and contents.
We have formerly implemented a prototype of the system
and tested it with 105,509 SVG images obtained from Wiki-
pedia. We found that we can ﬁlter 98.5% of the ﬁles without
causing any diﬀerence in the visual appearance of the im-
age, and for the remaining 1.5% we determined the visual
deviation to be negligible in more than half of the cases.
In summary, we make the following contributions:
• We are the ﬁrst ones to demonstrate the security risks
tied to SVG ﬁles in the context of the World Wide Web
and comparable client-server environments. Further-
more, we argue that SVG ﬁles must not be perceived
as images, but rather full stack applications, provided
the cases of them being rendered by a web browser
or similar client software. This holds for SVG images
rendered via  and similar tags, as well as dis-
played as standalone ﬁle in modern web browsers.
• We show several innovative attack techniques illus-
trating the potential of maliciously crafted SVG ﬁles,
which we call Active Image Injection (AII). We exhibit
how SVG ﬁles can cause damage to major websites,
and discuss the damage potential of SVG ﬁles embed-
ding arbitrary data formats. The hereby discussed AII
attacks aﬀect a whole browser family, rendering any
website leaving user submitted images vulnerable if the
users visit it with the aﬀected web browsers. Moreover,
we show how inline SVG can be used to facilitate XSS
ﬁlter bypasses on current web browsers.
Figure 1: A classic GhostScript/SVG example
a small subset of SVG features had been known to work reli-
ably on a suﬃciently large base of the web browsers. Brow-
sers, like Firefox 1.5, already supported a decent subset of
SVG features in November 2005, showcasing SVGs such as
the famous GhostScript Tiger shown in Figure 1. This par-
ticular image is often used to illustrate the abilities of the
vector based graphics to display complex structures. Other
browsers, namely Internet Explorer, did not support SVG,
unless a user installed an external plug-in.
All this has signiﬁcantly changed with the recent appear-
ance of HTML5: the W3C and WHATWG draft speciﬁca-
tions for HTML5 require modern web browsers to support
SVG images’ embedment in a multitude of ways [25]. SVG
images can now for example be engrafted in a given doc-
ument either in the classical way via speciﬁc tags such as
 or  tags, or in the novel ways such as with
 tags or inline in any HTML5 document. Internet Ex-
plorer 9 currently supports a large subset of SVG features
as tests with the tech previews and available beta versions
show. Furthermore, both Firefox and Webkit-based brow-
sers, such as Chrome and Safari, as well as Opera, provide
thorough SVG support.
Hitherto, SVG is mainly used in the context of screen
and print design, as well as in the cartography and medical
imagery, which all can be attributed to the lack of proper
browser support [35]. This is however expected to change,
owing to the SVG support being implemented in all modern
web browsers, consequently lifting SVG ﬁles from being a
niche format for W3C compliant and plug-in-equipped brow-
sers only, to a widely used toolkit for enhancing images, dia-
grams and rich-text documents across the board. Depending
on the rendering client’s capabilities, an SVG ﬁle can con-
tain interactive and animated elements. Processing events
and raster images, embedding videos, and rich-text are also
feasible. Contrary to popular belief, SVG ﬁles should thus
not be considered to be plain images or animations, and it
is necessary to treat them as fully functional, one-ﬁle web
applications capable of potentially containing HTML, Java-
Script, Flash and other interactive code structures.
In this paper, we elaborate on the security risks of im-
proper SVG handling. We introduce several novel attack
techniques of using SVG images to target modern, real life
web applications (such as MediaWiki installations like Wiki-
pedia, DeviantArt, and other high proﬁle websites), as well
as their unsuspecting users. Speciﬁcally, in Section 3 we
present an Active Image Injection (AII) attack, in which
arbitrary JavaScript code can be delivered via SVG ﬁles.
240• We introduce a defense solution to prevent SVG-based
attacks by ﬁltering potentially malicious content from
a given SVG ﬁle. The large-scale evaluation results
suggest that this approach can successfully defeat AII
attacks on a practical level.
Furthermore, screen-readers can (theoretically) parse
SVG data and describe the shapes and visuals used by
the image, allowing a broader range of users to beneﬁt
from its contents. In contrast, raster-based images are
void of this kind of support.
2. SVG BASICS AND SPECIFICS
This section provides a brief overview of the SVG ﬁle for-
mat and discusses the attack surface enabled by this image
format, i.e., we illustrate the diﬀerent ways available for an
attacker to send arbitrary SVG ﬁles to a victim.
2.1 Overview and Beneﬁts
The Scalable Vector Graphics (SVG) ﬁle format was intro-
duced in 1999 when it was published by the W3C in an at-
tempt to combine the best of both the speciﬁcation drafts for
Precision Graphics Markup Language (PGML) developed
and published by Adobe, and the Vector Markup Language
(VML) developed and published by Microsoft, Autodesk,
Hewlett Packard, and others, all in 1998. SVG is a vec-
tor graphics format, i.e., it uses geometrical primitives such
as points, lines and curves to describe an image, while it
supports both static and dynamic content. The above men-
tioned static content and dynamic behavior are described in
an XML-based format, which implies that SVG ﬁles are in
fact text ﬁles.
The impact of SVG on the Internet can be described with
the following characteristics:
• Scalability: SVG ﬁles are, as the name indicates, scal-
able based on their nature as vector graphics. This
means that graphical output devices of any size can
render SVG images without signiﬁcant information loss
or facing deﬁciencies in display quality.
In times of
websites’ inhomogeneous output devices such as brow-
sers, feed- and screen readers, smartphones and Wire-
less Markup Language (WML) compatible cellphones,
this enables web developers to publish rich online doc-
uments without having to worry about the screen di-
mension of the device requesting the document.
• Openness: Unlike classical, raster-based image for-
mats, SVG ﬁles are neither stored in a binary format
nor is there a compression scheme rendering the actual
content of the ﬁle unreadable for the human eye. SVG
images can be enriched with meta-data and comments,
so that a (handicapped) human as well as a program
(e.g., a search engine or comparable parser) can ef-
fecively extract relevant information from the ﬁle in
question. In this case accessibility is ensured by storing
more descriptive information in a given ﬁle, compared
to the rather limited possibilities of image comments
provided by GIF and PNG ﬁles, or the embedded Ex-
changeable Image File Format (EXIF) data in RAW
and JPEG images. Note that gzipped SVG ﬁles (also
know as SVGZ) create an exception, for they do not
use compression as means to reduce the ﬁle size.
• Accessibility: Related to the aforementioned open-
ness, an SVG image can be enriched with suﬃcient