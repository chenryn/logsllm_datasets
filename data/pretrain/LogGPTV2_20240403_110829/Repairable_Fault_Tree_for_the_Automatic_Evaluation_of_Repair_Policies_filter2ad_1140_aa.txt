# Title: Repairable Fault Tree for the Automatic Evaluation of Repair Policies

## Authors:
- Daniele Codetta Raiteri, Dipartimento di Informatica, Università di Torino, Corso Svizzera 185, 10149 Torino, Italy
- Giuliana Franceschinis, Dipartimento di Informatica, Università del Piemonte Orientale, Spalto Marengo 33, 15100 Alessandria, Italy
- Mauro Iacono, Dipartimento di Ingegneria dell’Informazione, Seconda Università di Napoli, via Roma 29, 81031 Aversa (CE), Italy
- Valeria Vittorini, Dipartimento di Informatica e Sistemistica, Università di Napoli “Federico II”, via Claudio 21, 80125 Napoli, Italy

## Abstract
Fault trees are a well-established method for evaluating the dependability of complex systems. Various extensions have been proposed to enhance the original formalism, enabling more comprehensive design and assessment. This paper introduces an extension called Repairable Fault Trees (RFT), which allows designers to evaluate the impact of different repair policies on a system. The RFT formalism is integrated into a multi-formalism, multi-solution framework and is supported by a solution technique that leverages Generalized Stochastic Petri Nets (GSPN) to model the repair process. The modeling technique and solution process are illustrated through an example.

## 1. Introduction
Dependability in complex systems can be achieved through architectural means (e.g., redundancy) or by using repairable components with appropriate repair policies. Techniques like Fault Tree Analysis (FTA) help in designing and measuring system dependability by examining the system structure and relating the fault probability of the system to that of its basic components. FTA assumes state independence for the fault probabilities of basic components, where fault propagation depends only on the system's fixed structure. Extensions such as Dynamic Fault Trees (DFT) account for state-dependent fault probabilities, allowing for more complex scenarios, including spare parts and subsystem dependencies.

Other extensions, such as Parametric Fault Trees (PFT), better fit the evaluation technique to systems with high redundancy. Redundant components can mask faults, extend the correct operation period, or detect errors. Repairable or replaceable components improve system availability by recovering from faults. Modelling redundant and repairable systems requires further extensions, such as state-space based analysis techniques. An effective technique for modelling and evaluating repairable systems must efficiently handle transient behaviors and exploit combinatorial methods when possible.

In this paper, we propose an extension to the FT formalism, introducing a new element called the RepairBox (RB), which allows the inclusion of repair processes within the same formalism. This new element, part of the Repairable Fault Tree (RFT) formalism, does not alter the original FT structure but enables the evaluation of repair policies' effects on system availability. The RFT is supported by an enhanced solving technique that automatically translates RBs and affected subtrees into GSPN while minimizing state space analysis. Our extension can be generalized to PFTs using Stochastic Well-formed Nets (SWN) and to DFTs by defining a semantics for repair actions.

The paper is organized as follows: Section 2 discusses related work, Section 3 provides a formal definition of RFT, Section 4 describes the solution technique, Section 5 details three types of repair models, Section 6 presents an example, and Section 7 offers concluding remarks and future work.

## 2. Related Work
Fault trees are widely used, and several tools, such as SHARPE, support their analysis. PFTs provide a compact representation of symmetries and redundancies, and can be solved using SWNs. DFTs model various dependencies and require state space solutions, generating Markov chains. Tools like Galileo solve DFTs using modularization and multi-formalism approaches. The introduction of RBs in RFTs allows for cyclic behavior, enabling the recovery of components. The RFT formalism requires state space analysis for repairable subtrees, while non-repairable subtrees can be solved combinatorially. The OsMoSys framework implements our approach, hiding the multi-formalism complexity from the user. The DPRFT formalism combines DFT, PFT, and RFT, allowing for the analysis of dependencies in both failure propagation and repair processes.

## 3. Repairable Fault Trees (RFT)
A Fault Tree (FT) is a bipartite Directed Acyclic Graph (DAG) representing the relationship between system failure events and their causes. FTs consist of events and gates, with arcs indicating logical relationships. The top event (TE) is the unique node not input to any gate. Basic events represent primary failures, and cut sets are combinations of basic events leading to the TE. Minimal Cut Sets (MCS) are the smallest sets of events causing the TE. Gates (e.g., AND, OR, K out of N) define the logical behavior.

Formally, a FT is a 6-tuple \((E, G, A, T, \tau, \lambda)\), where:
- \(E\) is a set of events,
- \(G\) is a set of gates,
- \(A\) is a set of arcs,
- \(T\) is a set of gate types,
- \(\tau\) is a gate type function,
- \(\lambda\) is a failure rate function.

The RFT formalism extends this by adding RepairBoxes (RBs) to model repair processes, without altering the original FT structure. This allows for the evaluation of different repair policies and their impact on system availability.