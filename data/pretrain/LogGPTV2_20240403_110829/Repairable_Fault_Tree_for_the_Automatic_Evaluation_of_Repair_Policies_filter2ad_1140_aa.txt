title:Repairable Fault Tree for the Automatic Evaluation of Repair Policies
author:Daniele Codetta Raiteri and
Mauro Iacono and
Giuliana Franceschinis and
Valeria Vittorini
Repairable Fault Tree for the automatic evaluation of repair policies
Daniele Codetta Raiteri
Dipartimento di Informatica
Universit`a di Torino
Giuliana Franceschinis
Dipartimento di Informatica
Universit`a del Piemonte Orientale
Corso Svizzera 185, 10149 Torino, Italy
Spalto Marengo 33, 15100 Alessandria, Italy
PI:EMAIL
Mauro Iacono
Dipartimento di Ingegneria
dell’Informazione
Seconda Universit`a di Napoli
via Roma 29, 81031 Aversa (CE), Italy
PI:EMAIL
PI:EMAIL
Valeria Vittorini
Dipartimento di Informatica e Sistemistica
Universit`a di Napoli ”Federico II”
via Claudio 21, 80125 Napoli, Italy
PI:EMAIL
Abstract
Fault trees are a well known mean for the evaluation of
dependability of complex systems. Many extensions have
been proposed to the original formalism in order to en-
hance the advantages of Fault Tree Analysis for the de-
sign and assessment of systems. In this paper we propose
an extension, Repairable Fault Trees, which allows the de-
signer to evaluate the effects of different repair policies on
a repairable system: this extended formalism has been inte-
grated in a multi-formalism multi-solution framework, and
it is supported by a solution technique which transparently
exploits Generalized Stochastic Petri Nets (GSPN) for mod-
elling the repairing process. The modelling technique and
the solution process are illustrated through an example.
1. Introduction
Dependability issues in complex systems design can be
faced by architectural means (e.g. through redundancy), or
by using repairable components and proper repair policies,
or both. Dependability characteristics of a system can be
designed or measured by using proper techniques, such as
Fault Tree Analysis (FTA), which are based on an inspec-
tion of the system structure and relate the fault probabil-
ity of the system to that of the basic components. FTA is
founded on the hypothesis of state independence for fault
probabilities of basic components in the system. The fault
propagation must not depend on the system state but only
on its (ﬁxed) structure: gates are used to express such prop-
agation from the basic components, to the subsystems, up
to the whole system. Extensions to the basic Fault Trees
(FT) have been proposed to account for cases where the
fault probability is state dependent: one of them is Dynamic
Fault Trees (DFT) [7][10]. DFT extends FT with proper
state-dependent gates, in order to model more complex sit-
uations, e.g. the presence of spare parts in the system or de-
pendencies of a subsystem from another one. This exten-
sion has an impact at the analysis level, as discussed in the
paper. Other extensions have been proposed in the litera-
ture, to cope with both FT modelling and analysis complex-
ity when the system has an highly redundant architecture.
Component redundancy in a subsystem allows to increase
its dependability, a well-known technique is the N-modular
redundancy technique [13], and many variants of its basic
idea can be found in literature. The result of the applica-
tion of this approach to system design is fault masking (if
the fault is transient), a longer period of correct operation (if
the fault is permanent) or error detection (if the redundant
components are not intended to operate as spares) with con-
sequent system actions. Parametric Fault Trees (PFT) [2]
have been developed to better ﬁt the evaluation technique to
the redundant structure of the system. On the other side, re-
pairable (or replaceable) components can improve the avail-
ability of a system because faults that are generated in these
components can be recovered. Repairing or replacement of
components can give the system a longer lifetime and in-
crease its availability. The application of redundancy to re-
pairable (replaceable) subsystems allows to implement fault
masking in systems, achieving higher dependability at the
cost of an increased complexity. Modelling redundant and
repairable systems requires further extensions of the eval-
uation techniques: the possibility of modelling general re-
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:50:14 UTC from IEEE Xplore.  Restrictions apply. 
pair (replacement) policies requires to switch from the clas-
sic combinatorial analysis techniques for FT to state-space
based analysis techniques [3][2]. An effective technique for
modelling and evaluating repairable systems design must
be able to efﬁciently work at the state space level in order
to capture all the transient behaviours that happen when-
ever a fault is detected and proper action are started to re-
store the system. Moreover, the technique should be able
to exploit, whenever possible, the efﬁcient (combinatorial)
method commonly used for non-repairable systems. In this
paper we propose an extension of the FT formalism that en-
riches it with a new kind of element, namely the Repair-
Box, which allows the designer to include a representation
of the repairing processes within the same formalism. This
new element has no inﬂuence on structural analysis tech-
niques, because it does not substitute or modify the original
FT model structure, but it is able to allow the evaluation of
the effects of repair policies on the availability of a system.
The proposed new formalism, Repairable Fault Tree (RFT),
is supported by an enhanced solving technique, founded on
the automatic translation into Generalized Stochastic Petri
Nets (GSPN) [12] of both the RepairBox elements and the
subtrees of the FT affected by the repair actions, while keep-
ing as much as possible the evaluation process outside the
state space. Our extension can be generalized to PFTs by
using Stochastic Well-formed Nets (SWN) [4] in place of
GSPN. The extension to DFTs instead requires to deﬁne a
semantics for the repair action, able to take into account the
dependency existing between components connected to dy-
namic gates [3].
The paper is organized as follows: Section 2 brieﬂy dis-
cusses related work. Section 3 recalls the basics of Fault
Tree and provides a formal deﬁnition of the RFT formal-
ism. Section 4 contains the description of the solution tech-
nique that is based on the modularization of the RFT. Its
implementation is also discussed. In Section 5 three types
of repair models are described. In Section 6 the technique
is demonstrate through an example. Results are included to
show the potential of our extension for evaluating the repair
strategies effectiveness. Section 7 contains some closing re-
marks and future work.
2. Related work
Fault trees are widespread and several tools are available
for their analysis; one of them is included in the SHARPE
package [11] and is able to perform qualitative and quanti-
tative analysis on traditional FT. In order to give a compact
representation of symmetries and redundancies in the sys-
tem, PFT has been developed [2]; a PFT can be solved in the
state space by converting it in a High Level Coloured Petri
net in the form of a SWN [4]. This conversion is very di-
rect and allows a relevant reduction of the state space size.
In the FT and PFT formalisms, failure events are assumed to
be statistically independent; another extension of FT is DFT
in which several types of dependencies can be modelled;
some dynamic gates have been deﬁned [7][10] to represent:
functional dependencies, spare components and priorities
among failure events. DFT speciﬁcally requires the state
space solution, generating the corresponding Markov chain.
A tool named Galileo [6] has been developed to solve DFT
using modularization [8] [1] and multi-formalism solution.
FT, PFT and DFT model an acyclic behaviour since they as-
sume that a component, can change its state only once, from
working to failed; the model may become cyclic introducing
a new element called RepairBox (RB for short) to model
the recovery of a component or subsystem. In the RFT for-
malism, the RB generates a dependency on the nodes it is
applied to; so repairable subtrees in a RFT require a state
space solution, while non-repairable subtrees can be solved
in combinatorial way. To solve RFTs, we present a solu-
tion technique based on modularization and multi-solution
approach: RFTs are modularized and state-space analysis
of the repairable subtrees can be performed by convert-
ing them in Generalized Stochastic Petri Nets (GSPN), a
very ﬂexible formalism allowing to represent several repair
policies as presented in this paper. This approach is imple-
mented in the OsMoSys framework [15]; in the modulariza-
tion step, we consider both dependency due to shared nodes
in the tree [8], and dependency of the component states due
to the presence of a RB; modules (indipendent subtrees) are
classiﬁed depending on the solution method they require.
Other previously released tools support multi-formalism ap-
proach, such as the SHARPE package; in our implementa-
tion however, the presence of multiple formalisms is hid-
den to the user, who just builds the RFT and requires the
result: the translation of repairable modules in GSPN and
their solution is automatic. DFT, PFT and RFT can be com-
bined to generate the Dynamic Parametric Repairable Fault
Tree (DPRFT) formalism. In [3] a ﬁrst proposal of DPRFT
has appeared, allowing to combine dependencies in the fail-
ure propagation and in the repair process (for example the
repair of a component while it is replaced by a spare compo-
nent), however in [3] the RB semantics is investigated only
in the special case of its application to a dynamic gate, and
in this context it was only applied to basic events. In the
same work, parameterization has been fully exploited to re-
duce state space size when symmetries or redundancies are
present within dynamic gates, simplifying the analysis of
dependencies.
The idea of embedding RBs in the FT formalism was ﬁrst
proposed in [9]: the original contribution of the present pa-
per with respect to [9] is the formalization of the RFT def-
inition, the generalization of Repair Boxes (to include par-
tial repair and the notion of trigger event with some hints
for its generalization), the introduction of new repair fea-
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:50:14 UTC from IEEE Xplore.  Restrictions apply. 
tures and the deﬁnition of their GSPN semantics, and ﬁnally
a complete formalization and implementation of the modu-
lar multi-solution process.
3. Repairable Fault Trees (RFT)
A Fault Tree (FT) is a model representing the relation
between system failure events and their causes. In this pa-
per, fault trees are bipartite1 DAG (Directed Acyclic Graph)
whose nodes are either events ((cid:0)) or gates ((cid:1)). A logic cir-
cuit or a tree structure interpretation of the fault tree may be
assumed: we adopt the logic circuit interpretation of arc ori-
entation, so that arcs from an event node to a gate node are
inputs to the logical gate and arcs from a gate node to an
event node are outputs from the logical gate. A formal deﬁ-
nition of a FT used in the paper is in Tab. 1, where:
(cid:2)(cid:0) (cid:0) (cid:3)(cid:1) (cid:4) (cid:0) (cid:1) (cid:1)(cid:2) (cid:0) (cid:4) (cid:5)(cid:6), (cid:2)(cid:1) (cid:0) (cid:3)(cid:0) (cid:4) (cid:1) (cid:1) (cid:0)(cid:2) (cid:1) (cid:4) (cid:5)(cid:6)
(cid:0)(cid:2) (cid:0) (cid:3)(cid:1) (cid:4) (cid:0) (cid:1) (cid:0)(cid:2) (cid:1) (cid:4) (cid:5)(cid:6), (cid:1)(cid:2) (cid:0) (cid:3)(cid:0) (cid:4) (cid:1) (cid:1) (cid:1)(cid:2) (cid:0) (cid:4) (cid:5)(cid:6)
(cid:2) and (cid:2) are called the input and the output set of , re-
spectively.
A FT is depicted in Fig. 1. There is a unique node in (cid:0),
called top event (TE), which is not input to any gate node.
Basic events ((cid:0) (cid:7) (cid:0)) represent primary system failures that
cannot be broken down further in more elementary failure
causes. The basic events are leaves in the tree structure in-
terpretation of the FT. A combination of basic events which
leads to the TE is a cut set. A Minimal Cut Set (MCS) is a
cut set such that any proper subset of events in the MCS can-
not cause the TE. Gates can be of different types (e.g. AND,
OR, K out of N) reﬂecting to the gate behaviour.
is a set of events
is a set of gates
is a set of arcs
is a set of gate types
is a gate type function
is a failure rate function
A FT is a 6-tuple, (cid:4) (cid:5) (cid:0) (cid:0)(cid:2) (cid:1)(cid:2) (cid:5)(cid:2)  (cid:2) (cid:6)(cid:2) (cid:8)(cid:9) where:
(cid:0) (cid:0) (cid:3)(cid:1)(cid:0)(cid:2) (cid:1)(cid:1)(cid:2) (cid:7)(cid:7)(cid:7)(cid:2) (cid:1)(cid:6)
(cid:1) (cid:0) (cid:3)(cid:0)(cid:0)(cid:2) (cid:0)(cid:1)(cid:2) (cid:7)(cid:7)(cid:7)(cid:2) (cid:0)(cid:6)
(cid:5) (cid:7) (cid:0)  (cid:1) (cid:0)(cid:1)  (cid:0)
  (cid:0) (cid:3)(cid:5)(cid:2) (cid:6)(cid:2) (cid:7)(cid:7)(cid:7)(cid:2) (cid:6)
(cid:6) (cid:1) (cid:1) (cid:11)  
(cid:8)(cid:9) (cid:1) (cid:0) (cid:12) (cid:0) (cid:11) (cid:8)