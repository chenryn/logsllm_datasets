### 优化后的文本

```c
strcpy(outbuf, "GET / HTTP/1.0\r\n");
strcat(outbuf, host_header);
strcat(outbuf, "Connection: close\r\n\r\n");
err = SSL_write(ssl, outbuf, strlen(outbuf));
shutdown(sd, SHUT_WR); /* Send EOF to server */
printf("(7) Sent HTTP request over encrypted channel:\n\n%s\n", outbuf);

/**************************************************/
/* (8) Read back HTTP response from the SSL stack */
/**************************************************/
err = SSL_read(ssl, inbuf, sizeof(inbuf) - 1);
inbuf[err] = '\0';
printf("(8) Got back %d bytes of HTTP response:\n\n%s\n", err, inbuf);

/************************************************/
/* (9) All done, so close connection & clean up */
/************************************************/
SSL_shutdown(ssl);
close(sd);
SSL_free(ssl);
SSL_CTX_free(ctx);
printf("(9) All done, cleaned up and closed connection\n\n");
```

此示例是在Sun Solaris上编译和运行的，但它展示了SSL在许多操作系统平台上的工作原理。由于OpenSSL提供了强大的特性，包括加密、密钥管理和证书管理等，整个程序可以在几页C代码中实现。

以下是对该程序各部分的详细分析：

- **顶部包含文件**：程序顶部包含了用于支持TCP联网和SSL的头文件。
- **第1部分**：通过调用`SSL_CTX_new`创建本地上下文，以记录握手参数及其他与SSL连接相关的状态。
- **第2部分**：使用Unix的`gethostbyname`函数将命令行参数提供的主机名转换为IP地址。其他平台可能有不同的方法来实现这一功能。
- **第3部分**：通过创建本地套接字、设置远端地址信息并连接到服务器的443端口，建立一个TCP连接。
- **第4部分**：一旦TCP连接建立，使用`SSL_new`和`SSL_set_fd`将SSL层附加到TCP连接，并调用`SSL_connect`进行SSL握手。完成时，我们已经建立了一个已选择密码且交换过证书的安全SSL信道。
- **第5部分**：打印选中的批量加密算法。
- **第6部分**：打印从服务器返回的X.509证书中的部分信息，包括证书持有者和颁发证书的组织的信息。实际的SSL应用程序（如Web浏览器）会对证书进行完整性检查，以确保证书是正确签发且来自正确的主机。
- **第7部分**：使用`SSL_write`在SSL信道上发送简单的HTTP请求`GET / HTTP/1.0`，然后关闭连接的输出端。
- **第8部分**：使用`SSL_read`从连接读取响应，并将其打印到屏幕上。SSL层负责所有加密和解密工作，因此可以直接读写普通的HTTP命令。
- **第9部分**：进行清理工作，包括关闭SSL连接和释放资源。

更多关于OpenSSL库的信息，请参见[OpenSSL官方网站](http://www.openssl.org)。

### 执行OpenSSL客户端

下面显示了指向安全服务器时这个简单HTTP客户端的输出。在这个例子中，客户端指向了摩根士丹利的在线证券主页。在线交易公司广泛使用HTTPS。

```sh
% https_client clients1.online.msdw.com
(1) SSL context initialized
(2) 'clients1.online.msdw.com' has IP address '63.151.15.11'
(3) TCP connection open to host 'clients1.online.msdw.com', port 443
(4) SSL endpoint created & handshake completed
(5) SSL connected with cipher: DES-CBC3-MD5
(6) Server's certificate was received:
    Subject: /C=US/ST=Utah/L=Salt Lake City/O=Morgan Stanley/OU=Online/CN=clients1.online.msdw.com
    Issuer: /C=US/O=RSA Data Security, Inc./OU=Secure Server Certification Authority
(7) Sent HTTP request over encrypted channel:
    GET / HTTP/1.0
    Host: clients1.online.msdw.com:443
    Connection: close

(8) Got back 615 bytes of HTTP response:
    HTTP/1.1 302 Found
    Date: Sat, 09 Mar 2002 09:43:42 GMT
    Server: Stronghold/3.0 Apache/1.3.14 RedHat/3013c (Unix) mod_ssl/2.7.1 OpenSSL/0.9.6
    Location: https://clients.online.msdw.com/cgi-bin/ICenter/home
    Connection: close
    Content-Type: text/html; charset=iso-8859-1
    302 Found
    Found
    The document has moved here.
    Stronghold/3.0 Apache/1.3.14 RedHat/3013c Server at clients1.online.msdw.com Port 443

(9) All done, cleaned up and closed connection
```

只要完成了前四部分，客户端就拥有一条打开的SSL连接，可以查询连接状态、选择参数和检查服务器证书。在这个例子中，客户端和服务器协商使用DES-CBC3-MD5批量加密算法。可以看到服务器的证书属于美国犹他州盐湖城的摩根士丹利组织，并由RSA数据安全组织颁发，主机名为`clients1.online.msdw.com`，与请求相符。

一旦建立了SSL信道且客户端对站点的证书没有异议，就可以通过安全信道发送HTTP请求。在这个例子中，客户端发送了一条简单的`GET / HTTP/1.0`请求，并收到了302重定向响应，指示用户获取另一个URL。

### 通过代理以隧道形式传输安全流量

客户端通常会使用Web代理服务器代表它们访问Web服务器。例如，许多公司在公司网络和公共互联网之间放置一个代理（如图14-19所示）。代理是防火墙路由器唯一允许进行HTTP流量交换的设备，它可能会进行病毒检测或其他内容控制工作。

但是一旦客户端开始使用服务器的公钥对发往服务器的数据进行加密，代理就无法读取HTTP首部了！如果代理不能读取HTTP首部，就无法知道应该将请求转发到何处（如图14-20所示）。

为了使HTTPS与代理配合工作，需要进行一些修改以告知代理连接到何处。一种常用的技术是HTTPS SSL隧道协议。使用HTTPS隧道协议，客户端首先以明文形式告知代理它想要连接的安全主机和端口，以便代理能够理解这条信息。

HTTP通过新的扩展方法`CONNECT`来发送明文形式的端点信息。`CONNECT`方法告诉代理打开一条到指定主机和端口号的连接。完成后，直接在客户端和服务器之间以隧道形式传输数据。`CONNECT`方法是一条单行文本命令，提供了冒号分隔的安全原始服务器的主机名和端口号。`host:port`后面跟着一个空格和HTTP版本字符串，再后面是CRLF。接下来是零个或多个HTTP请求首部行，后面跟着一个空行。空行之后，如果建立连接的握手过程成功完成，就可以开始传输SSL数据了。下面是一个例子：

```http
CONNECT home.netscape.com:443 HTTP/1.0
User-agent: Mozilla/1.1N
```

在请求中的空行之后，客户端会等待来自代理的响应。代理会对请求进行评估，确保它是有效的，且用户有权请求这样一条连接。如果一切正常，代理会建立一条到目标服务器的连接。如果成功，就向客户端发送一条`200 Connection Established`响应。

```http
HTTP/1.0 200 Connection established
Proxy-agent: Netscape-Proxy/1.1
```

有关安全隧道和安全代理的更多信息，请参考8.5节。

### 更多信息

安全和密码学是非常重要且复杂的问题。如果你想了解更多有关HTTP安全性、数字加密技术、数字证书以及公开密钥基础设施方面的内容，可以从以下几个地方开始：

#### HTTP安全性

- **《Web安全与电子商务》**
  - 作者：Simson Garfinkel
  - 出版社：O’Reilly & Associates
  - 这是关于Web安全、SSL/TLS和数字证书的最佳入门书籍之一。
- **RFC 2818: HTTP Over TLS**
  - 说明了如何在SSL的后继协议——TLS之上实现安全HTTP。
- **RFC 2817: Upgrading to TLS Within HTTP/1.1**
  - 说明了如何使用HTTP/1.1中的升级机制在现有的TCP连接上启动TLS，从而使非安全和安全HTTP流量共享相同的知名端口（在这种情况下，使用的是HTTP的80端口，而不是HTTPS的443端口）。

#### SSL与TLS

- **RFC 2246: The TLS Protocol Version 1.0**
  - 对TLS协议版本1.0进行了规范，提供了因特网上通信的私密性。
- **Introduction to SSL**
  - 介绍了SSL协议。SSL最初是由网景公司开发的，已广泛应用于万维网上客户端和服务器间的认证及加密通信。
- **The SSL Protocol Version 3.0**
  - 网景公司1996年的SSL规范。
- **How SSL Works**
  - 网景公司对密钥加密技术的介绍。
- **OpenSSL项目**
  - 是一个合作开发项目，旨在开发一个强大、全功能的商业级开源工具集，实现SSL v2/v3和TLS v1协议以及强大的通用密码库。

#### 公开密钥基础设施

- **IETF PKIX工作组**
  - 组建于1995年，目的是开发一些因特网标准，支持基于X.509的公开密钥基础设施。
- **RFC 2459: Internet X.509 Public Key Infrastructure Certificate and CRL Profile**
  - 详细介绍了X.509 v3数字证书。

#### 数字密码学

- **《应用密码学》**
  - 作者：Bruce Schneier
  - 出版社：John Wiley & Sons
  - 这是一本经典的密码学书籍，适合实现者阅读。
- **《密码故事——人类智力的另类较量》**
  - 作者：Simon Singh
  - 出版社：Anchor Books
  - 这是一本有趣的密码学入门书籍，不是为技术专家编写的，而是一本生动的密码学历史读物。

### 第四部分

第四部分讲述的内容都与HTTP报文的实体主体和被实体主体作为货物承载的内容有关。

- **第15章**：讲述了HTTP内容的格式和语法。
- **第16章**：探讨了允许世界各地的人们相互交换内容的各种Web标准，这些内容由各种不同语言和字符集构成。
- **第17章**：讲解了各种用于协商可接受内容的机制。