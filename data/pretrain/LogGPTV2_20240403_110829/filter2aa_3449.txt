DesperateCat
题⽬环境
JDK8u311
Tomcat9.0.56
分析
⾸先拿到这个源码我们看什么
看web.xml，从这⾥我们发现只有⼀个类，简简单单⼏秒看完这个函数
不想贴代码了，占地⽅，总结说来提供了⼀个POST⽅法，这⾥能让我们去上传任意⽂件，配
合部分的任意内容，为什么是部分呢，请看下⾯
        ExportServlet
        org.rwctf.servlets.ExportServlet
        ExportServlet
        /export
脏数据达咩，并且这⾥也规定了编码格式UTF-8，所以也别想什么编码的trick了，那接下来我
们很容易想到是不是可以通过标签去搞事情呢，很遗憾不⾏
这⾥是单字符替换，写的也没⽑病，所以咋也别想太多绕过jsp啥的，这⾥很明显就是让我们
⽤el表达式了，但是，又来了新的问题，el表达式要想执⾏⽅法怎么办！！我们知道执⾏函数
⽅法是需要 () ，⽽这⾥也被过滤了
两个重要的Trick
这个后⾯回⽤到，当然我不想去分析为什么el表达式这样可以，有兴趣⾃⼰跟下源码
a["classes"]等价于a.getclasses()它会去去调⽤get开头的函数
同理我们也可以赋值
a["classes"] = "wsnd";他会去通过set赋值
还有炒冷饭学起来：Spring framework（cve-2010-1622）漏洞利⽤指南 | 空虚浪⼦⼼的灵魂 
(inbreak.net)
虽然不是靠这篇⽂章就能解决，但是我们也知道了利⽤ el api 3.0 的赋值操作覆盖某些属性的
值可能导致rce，接下来我们就来看看如何能让他rce呢
探索开始
String data = "DIRTY DATA AT THE BEGINNING " + content + " DIRTY DATA AT 
THE END";
            this.writeBytesToFile(saveFile, 
data.getBytes(StandardCharsets.UTF_8));
这⾥我们需要⽤到applicationScope，⾸先我们看看这⾥都有⼀些什么重要的属
性, ${applicationScope} 直接通过el是⾃带out.write的⽅便我们查看
这⾥我们暂时只需要关注 org.apache.jasper.compiler.StringInterpreter ，那么这
是什么呢
如何利⽤org.apache.jasper.compiler.StringInterpreter
⾸先我们需要知道这个org.apache.jasper.compiler.StringInterpreter到底是什么，它是⼀个接⼜，
那这个接⼜是⼲什么的呢，可以看到它的描述
Defines the interface for the String interpreter. This allows users to provide custom String 
interpreter implementations that can optimise String processing for an application by performing 
code generation for a sub-set of Strings.
翻译过来就是定义了字符串解释器的接⼜。这允许⽤户提供⾃定义的字符串解释器实现，通
过对字符串的⼦集进⾏代码⽣成，可以为应⽤程序优化字符串处理。很通俗易懂是吧，好的
我们继续
另外，在jsp的编译过程中，在 org/apache/jasper/compiler/Generator.java 中他会执
⾏ getStringInterpreter
继续跟⼊看看
这⾥从ApplicationContext上下⽂获取，之后看到上⾯那张图
createInstance 对这个获取到的类进⾏实例化
这是部分调⽤栈
那么如何让让jsp执⾏上⾯的编译呢，很简单，有两种⽅式：
1.初次启动tomcat的时候访问
2.若tomcat启动后，我们只需要再往⾥⾯写⼀个jsp访问即可
因此我们便很容易能想到接下来的操作，通过第⼆种⽅式啦，接下来我们只需要让
org.apache.jasper.compiler.StringInterpreter为我们的恶意类，如何赋值也很简单，通过
param.a 去去的get请求中的参数a的值，简简单单绕过双引号即可，或者cookie也⾏姿势太多
此时我们只需要传⼊
private static StringInterpreter createInstance(ServletContext context,
                                                String className) throws 
Exception {
  return (StringInterpreter) context.getClassLoader().loadClass(
    className).getConstructor().newInstance();
}
getStringInterpreter:54, StringInterpreterFactory 
(org.apache.jasper.compiler)
:3544, Generator (org.apache.jasper.compiler)
generate:3593, Generator (org.apache.jasper.compiler)
generateJava:257, Compiler (org.apache.jasper.compiler)
compile:391, Compiler (org.apache.jasper.compiler)
compile:367, Compiler (org.apache.jasper.compiler)
compile:351, Compiler (org.apache.jasper.compiler)
compile:605, JspCompilationContext (org.apache.jasper)
${applicationScope[param.a]=param.b}
a=org.apache.jasper.compiler.StringInterpreter&b=com.test.YYDS（这玩意⼉是我
写的恶意类）
好了这个问题解决了，接下来解决下⼀个问题，如何将恶意类加载进去呢，很简单
加载恶意类到JVM
我们只需要往we b.xml中写⼊⼀点不影响本⾝逻辑运⾏的东西即可，⽐如简简单单插⼊注释，
之后就会把 /WEB-INF/lib 下的jar包加载进来,看看关键逻辑，其他细节⾃⼰看
org.apache.jasper.servlet.TldScanner#scanJars
梳理利⽤思路
1.写⼀个恶意类并编译成jar
2.将这个jar⽂件上传到 /WEB-INF/lib 下
3.往web.xml当中随便插⼊点注释，使这个jar包加载到jvm
4.上传⼀个jsp⽂件内容为 ${applicationScope[param.a]=param.b} ,并⽤⼩⼿访问这个
jsp⽂件传⼊ a=org.apache.jasper.compiler.StringInterpreter&b=com.test.YYDS
后⾯为恶意类
5.再上传⼀个啥内容都⾏的jsp，⽬的是执⾏compile到关键地⽅，通过
StringInterpreterFactory.getStringInterpreter ，实例化恶意类
到了这⾥是不是更疑惑了，你不是有脏数据吗，怎么做jar呢，很好我也不知道，就卡在这⾥
了，但思路没错
结果
通过这个思路，确实计算器弹出来