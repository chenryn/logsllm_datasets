that read from other storage or from RPMB blocks outside this
range. Once all the cross-invocation ﬂows are identiﬁed, their
corresponding paths are pruned using the process described
in Phase 3 and the remaining paths are signaled as enabling
a type of HPE, based on the operation performed.
5.5 HOOPER Evaluation
Teegris binaries are analyzed using our symbolic analysis
tool HOOPER. Tracking cross-invocation data ﬂows enables
HOOPER to identify data leakage, compromise and the
various cryptographic oracles directly, instead of identifying
potential HPE vulnerabilities. Moreover, the execution paths
leading to each are provided for analysis and can be used to
easily reproduce the identiﬁed attacks. As a result, the manual
analysis time of four weeks can be reduced to 24 hours for
vulnerabilities reachable through symbolic execution.
In the case of each binary, the TZOS APIs are simulated
using symbolic procedures and HOOPER is conﬁgured to
track CA information through the TAs execution. For each
Teegris binary, HOOPER is conﬁgured to run for twenty-four
hours or until it cannot ﬁnd any new execution paths in ten
minutes. An overview of the vulnerabilities found using
HOOPER is presented in Table 5.
False Positives. HOOPER does not report any false positive
HPE attack during the 24 hour experiments. This is due to two
main reasons. First, legitimate data sharing between CAs via
TA APIs is not exceedingly common. During our manual analy-
sis, we identiﬁed one case not reached by HOOPER where data
Figure 4: Detecting cross-invocation data ﬂows
or compromise are reported along with their constrained and
input required to reproduce the attack vector.
5.4 HOOPER Implementation Details
The total codebase of HOOPER consists of 5088 LOC, 1324 of
which corresponds to emulating Teegris speciﬁc functionality,
including CA input data modeling and TZOS provided APIs
as SimProcedures. We implemented 71 SimProcedures
to emulate 68 external library calls and three intractable
methods encountered that caused state explosion. Note that
the majority of Teegris-speciﬁc code was pre-written for a
different memory-safety analysis.
Four TA storage methods discovered to be available
under Teegris: Global variable, Persistent Objects, Secure
Objects and RPMB blocks. The later three are all accessed
USENIX Association
29th USENIX Security Symposium    835
Phase 1Phase 1Phase 2Phase 2Phase 3Phase 3Symbolic ExecutionState MatchingVulnerability CheckingBugs foundTA binaryState interactionPath semanticsSimProceduresTrusted App Execution PathsEntryRPMB[Y] = outputoutput = RPMB[Y]X = inputoutput = XSend outputMatching global variableMatching storage locationBasic blocksPaths paired using global variable XPaths paired using shared RPMB storageCross-invocation flowsSimProceduresTrusted App Execution PathsEntryRPMB[Y] = outputoutput = RPMB[Y]X = inputoutput = XSend outputMatching global variableMatching storage locationBasic blocksPaths paired using global variable XPaths paired using shared RPMB storageCross-invocation flowsis intentionally shared between CAs. Speciﬁcally, at boot time,
a CA saves a set of secure boot ﬂags using a Utility TA, which
provides a read-only API for these values. Had HOOPER
reached this case, it would have constituted a false positive.
The second reason for the lack of false positives is that
most multi-tenant TAs that maintain session data exhibit
either CWE-639 or CWE-862, and thus are unable to securely
isolate data to a given session. Any inter-invocation ﬂows
found by HOOPER in such a TA would be true positives. For
multi-tenant TAs with proper session handling, HOOPER will
either need to be made aware of the session semantics, or it will
exhibit some false positives. However, manually analyzing
a relatively small set of false positives is still preferable to a
full manual analysis in the absence of the tool.
False Negatives. All nine Attestation TA HPE attack vectors
are signaled by the tool. In the case of Key Management TAs,
two out of six HPE attacks are signaled. Four of the HPE
attacks identiﬁed manually are not reported by HOOPER
because Phase 1 does not record their corresponding path
semantics. A series of path explosions during symbolic
execution leads to missing these semantics. Path explosions
represent an inherent limitation of symbolic execution which
occur when the number of feasible paths grows exponentially.
In the case of one Key Management TA, the path explosion
occurs during the exploration of a large number of complex TA
functions. This path explosion is generated once the symbolic
execution start exploring arbitrary one of the 23 API functions
present inside this binary. Most of these functions perform
cryptographic transformations (e.g., encryption, decryption,
integrity veriﬁcation) on symbolic data corresponding to CA in-
put and RPMB stored information. The two vulnerabilities we
have identiﬁed manually inside this TA are at the bottom of two
such functions. In order for HOOPER to identify these vulner-
abilities, both functions have to be completely explored during
Phase 1. In our 24 hour window experiments, the complex func-
tions containing the vulnerabilities have not been reached, lead-
ing to one data leakage and one data compromise false negative.
Complex input processing functions also lead to missing
another set of data leakage and data compromise HPE attacks
present in a second Key Management TA. This TA is designed
to receive serialized CA information. As a result, a decoding
operation takes place inside TA code, in the initial stages of
the CA input processing. The decoding function transforms
a provided CA buffer into data structures using a series of
loops. The iteration number for each loop is also extracted
from within the serialized buffer. This presents a problem
for the symbolic execution performed in Phase 1. Here the
CA provided buffer is made completely symbolic, including
the loop iteration numbers. This leads to each loop being
executed an arbitrary number of times. In consequence, the
symbolic execution slows to a crawl once these decoding
functions are reached. The data leakage and data compromise
vulnerabilities are located beyond these decoding functions
are never reached in our 24 hour window experiments.
Eight of the nine DRM HPE attacks are also reported by
HOOPER. In this case the HPE attack is missed due to the
semantics of the decryption oracle inside the DRM TA rather
than a path explosion problem. The decryption function inside
this TA does not explicitly decipher CA information itself.
Instead, it provides the addresses of the buffers corresponding
to the CA input and output to a cryptographic hardware using
an ioctl. This operation is not emulated faithfully yet in our
HOOPER prototype. As a result, the link between the CA
encrypted buffer containing the key and the information
deciphered using this key is lost during symbolic execution.
The DRM false negative is a consequence of not emulating
and tracking the external hardware decryption performed.
In summary, one false negative is a result of incomplete
reproduction of all Secure World OS APIs available to TAs.
The other four false negatives are a result of path explosion
encountered in more complex TA binaries and can be
addressed by incorporating in HOOPER advances in the ﬁeld
of symbolic execution. Solving the long-standing problem of
path explosion is out of scope for this work.
Finally, the HOOPER prototype only analyzes cross-
invocation data ﬂows between pairs of execution paths,
corresponding to the HPE attacks depicted in Section 3.3.
More complex HPE attacks could require performing a
series of TA API calls in a particular sequence. For example,
some TAs have an initialization call that allocates heap
memory, storing a pointer to that memory in the global section.
Subsequent calls then place session data in the heap memory.
Though we have not identiﬁed such HPEs, investigating their
presence is subject of future work.
6 Mitigations
The vulnerabilities detailed in Section 4.3 are present in TA
APIs that incorrectly manage CA provided information in
their cross-invocation states. Auth-Bypass and Missing-Auth
are caused by either missing or faulty session management.
Missing-Auth is due to the reliance on encrypted data stored
in attacker accessible locations. In this section, we review
potential mitigations for each HPE vector.
6.1 Protecting TA data stored in Normal
World
As described in Section 3.3, data leakage and data compromise
HPE attacks only require access permissions to communicate
with the corresponding vulnerable TA. In contrast, exploiting
HPE attack vectors corresponding to encryption oracles addi-
tionally require altering a victim’s ciphertext, while decryption
oracles require this ciphertext to be provided to the TA. In this
section we assess the difﬁculty for an attacker to access these ci-
phertexts stored inside Normal World and argue for increasing
their isolation in order to prevent their use in HPE attacks.
Under all three TZOSes studied, the internal ﬂash drive is
under the control of the Normal World OS. In consequence,
the TZOS cannot provide TAs with direct access to it. Instead,
when TAs want to persist information on the ﬂash drive, the
TA have to encrypt the respective information and rely on CAs
to store and retrieve it.
836    29th USENIX Security Symposium
USENIX Association
Table 5: HOOPER-detected HPE attacks. HOOPER-signaled HPE attack vectors / HPE attack vectors identiﬁed manually
TA Category
DRM
Key Management
Attestation
Data
leakage
2 / 2
1 / 3
1 / 1
Teegris
compromise
Data
2 / 2
1 / 3
0 / 0
HPE attack
Decryption
oracle
1 / 2
0 / 0
2 / 2
Encryption
oracle
1 / 1
0 / 0
1 / 1
Signing
oracle
2 / 2
0 / 0
5 / 5
Total
8 / 9
2 / 6
9 / 9
Maintaining TA sensitive information as ciphertexts on a
Normal World controlled ﬂash drives prevents attackers from
reading the contents within. However, the encryption does
not prevent attackers from altering or obtaining the respective
ciphertexts. Orthogonal protection methods are required in
order to prevent such unauthorized access. These protection
methods can only be provided from inside the Normal World,
because the Secure World cannot prevent access to data
maintained inside Normal World storage.
Our investigation of the devices running the extracted TA
binaries has revealed that most examined ciphertext ﬁles
are located inside folders within the efs partition. Access to
these ﬁles is guarded by SELinux policies. Thus processes
are prevented from accessing these ﬁles unless they belong to
one of the categories provided with access. However, we have
discovered ciphertexts mostly inherit the labels assigned to
folders inside the efs partition. As a result, numerous SELinux
labels are granted write or read permissions to these ciphertext
ﬁles. We have discovered a total of 157 SEAndroid labels have
read permissions to labels assigned to at least one ciphertext
ﬁle. 57 labels also have write permissions. In a particular
case, these labels even include all System Apps preinstalled on
the device (154 executables). Code-hijacking vulnerabilities
within any process executing under one of these labels would
be sufﬁcient for obtaining access to CA stored ciphertexts.
For example, among these labels there is a system process
that is permitted by Android to both communicate with TAs
and access all examined ciphertext ﬁles maintained inside the
efs partition. Previous work [13] details how vulnerabilities
inside this process have previously allowed attackers to send
malicious SMCs. In conjunction to access to ciphertexts, vul-
nerabilities in such a process would be sufﬁcient to exploit HPE
vulnerabilities related to encryption and decryption oracles.
In summary, our investigation regarding the security of CA
managed ciphertexts has revealed multiple vectors of obtain-
ing permissions to access or alter their corresponding ﬁles.
Increasing the isolation of these ciphertexts would help pre-
vent attackers from obtaining or altering the contents within.
For example, using ﬁner-grained SELinux policies [23, 24, 34]
or similar ﬁne-grained access control could help mitigate the ef-
fects of decryption and encryption oracle HPE vulnerabilities.
6.2 Resolving multi-tenant interference
Missing-Auth vulnerabilities occur when multiple CA have
access to a single-tenant designed TA. In this section we
present two solutions for addressing this issue: (1) revising
the TA’s design to use sessions for managing connections
incoming from multiple tenants or (2) restricting access to
such TAs to a single Normal World process.
In Teegris and Kinibi devices, the Normal World OS uses a
coarse-grained Linux policy to allow Normal World processes
to communicate with TAs. Under this policy CAs can connect
to any TA. Such instances can only receive requests from one
CA during their lifetime. Each CA that tries to connect to such
a single-tenant TA is provided with their own TA instance and
access is denied if no such instance can be provided.
Our evaluation of the two TZOSes shows that provid-
ing each CA a TA instance can help avoid introducing
Missing-Auth vulnerabilities. Under Teegris no Missing-Auth
vulnerabilities have been identiﬁed, as all TA binaries
examined either are conﬁgured as single-tenant instance or
manage incoming CA connections through sessions. In Kinibi,
Missing-Auth vulnerabilities have been only been identiﬁed
in TAs misconﬁgured to run as multi-tenant instances.
Normal World SELinux policies are also used in QSEE
devices to determine which Normal World process can access
TA-provided APIs. However, since QSEE lacks the support
for single-tenant TAs, all TAs are single instances that accept
incoming requests from all CAs. In consequence, under QSEE,
any TA that stores cross-invocation data in global variables is
required to use session management to prevent Missing-Auth
vulnerabilities.
In summary, all identiﬁed Missing-Auth vulnerabilities
can be resolved by introducing session management into
multi-tenant TAs. In the case of Kinibi, the exploitation of
these vulnerabilities can also be prevented by re-conﬁguring
the vulnerable TAs to execute as single-tenant instances.
6.3 Standardizing session management
The presence of Auth-Bypass vulnerabilities in TAs running
under all examined TZOSes indicates that relying on each
TA to implement proper session management is not ideal. The
Auth-Bypass vulnerabilities have to be individually identiﬁed
and ﬁxed by patching corresponding TA binary code.
In order to make multi-tenant TAs less prone to Auth-Bypass
vulnerabilities we propose each TZOS provides a library for
session management. Such a library would transfer the session
management responsibility from the individual TAs to the
TZOS. Auth-Bypass vulnerability would be eliminated once
library implements proper session management and all TAs
use it to manage CA connections. For example, the TZOS
speciﬁed methods
(e.g., TA_OpenSessionEntryPoint,
TA_InvokeCommandEntryPoint) for CA-TA communica-
tion could be restricted to single-tenant TAs. In the case
USENIX Association
29th USENIX Security Symposium    837
of multi-tenant TAs, these methods would be implemented
instead in a library like SMlib [21] provided back to TAs in
the form of APIs with inherent session management.
Under QSEE and Kinibi, the session management library
would have to be statically linked inside each TA binary. In
contrast, under Teegris, all TAs could use the same dynam-
ically loaded library (DLL). Using a DLL would facilitate
maintaining session management code, as only the library
would have to be updated instead of individual TA binaries.
6.4 Protecting CA information stored by TAs
HPE vulnerabilities are introduced when CA information is
stored inside attacker accessible resources. Thus, in order to
resolve these vulnerabilities, strict access control can help
both resolve existing HPE vulnerabilities and prevent them