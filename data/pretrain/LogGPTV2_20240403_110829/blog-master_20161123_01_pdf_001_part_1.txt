## 报告时间段: ```2016-11-24 10:51:14.744512``` ~ ```2016-11-24 10:57:04.081798```    
## 一、数据库性能分析
### 1. 当前数据库 TOP 10 SQL : total_cpu_time
calls | total_ms | min_ms | max_ms | mean_ms | stddev_ms | rows | shared_blks_hit | shared_blks_read | shared_blks_dirtied | shared_blks_written | local_blks_hit | local_blks_read | local_blks_dirtied | shared_blks_written | temp_blks_read | temp_blks_written | blk_read_time | blk_write_time | query
---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---
2039698 | 605331.386000053 | 0.015 | 848.727 | 0.296775005907738 | 2.85413485352702 | 2039698 | 99684751 | 2100 | 9136 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ```UPDATE pgbench_branches SET bbalance = bbalance + $1 WHERE bid = $2;```
2039698 | 268140.604000044 | 0.015 | 836.367 | 0.131460933922569 | 1.37900138114079 | 2039698 | 93195557 | 905 | 19774 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ```UPDATE pgbench_tellers SET tbalance = tbalance + $1 WHERE tid = $2;```
2039698 | 239609.501000186 | 0.023 | 836.052 | 0.117473028360085 | 4.50711811585977 | 2039698 | 11277885 | 2681 | 1571654 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ```UPDATE pgbench_accounts SET abalance = abalance + $1 WHERE aid = $2;```
2039698 | 49333.0009998656 | 0.006 | 464.647 | 0.0241864241667166 | 1.93941085447089 | 2039698 | 2109626 | 13067 | 14524 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ```INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP);```
2039698 | 34167.6909994584 | 0.009 | 16.797 | 0.0167513479936731 | 0.0366687321580847 | 2039698 | 8334249 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ```SELECT abalance FROM pgbench_accounts WHERE aid = $1;```
1 | 7511.361 | 7511.361 | 7511.361 | 7511.361 | 0 | 0 | 816723 | 3 | 6 | 0 | 0 | 0 | 0 | 0 | 225 | 211 | 0 | 0 | ```create table IF NOT EXISTS snap_pg_rel_space_bucket as select 1::int8 snap_id, now() snap_ts, current_database(), buk this_buk_no, cnt rels_in_this_buk, pg_size_pretty(min) buk_min, pg_size_pretty(max) buk_max from  (   select row_number() over (partition by buk order by tsize), tsize, buk, min(tsize) over (partition by buk),max(tsize) over (partition by buk), count(*) over (partition by buk) cnt from   (     select pg_relation_size(a.oid) tsize, width_bucket(pg_relation_size(a.oid),tmin-1,tmax+1,10) buk from     (       select min(pg_relation_size(a.oid)) tmin, max(pg_relation_size(a.oid)) tmax from pg_class a, pg_namespace c where a.relnamespace=c.oid and nspname !~ $$^pg_$$ and nspname<>$$information_schema$$     ) t, pg_class a, pg_namespace c where a.relnamespace=c.oid and nspname !~ $$^pg_$$ and nspname<>$$information_schema$$   ) t  ) t where row_number=1;```
1 | 3931.596 | 3931.596 | 3931.596 | 3931.596 | 0 | 0 | 909503 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ```create table IF NOT EXISTS snap_pg_hash_idx as select 1::int8 snap_id, now() snap_ts, current_database(),pg_get_indexdef(oid) from pg_class where relkind=$$i$$ and pg_get_indexdef(oid) ~ $$USING hash$$;```
1 | 2158.239 | 2158.239 | 2158.239 | 2158.239 | 0 | 0 | 223555 | 3 | 4 | 0 | 0 | 0 | 0 | 0 | 4682 | 4666 | 0 | 0 | ```create table IF NOT EXISTS snap_pg_table_bloat as select 1::int8 snap_id, now() snap_ts,    current_database() AS db, schemaname, tablename, reltuples::bigint AS tups, relpages::bigint AS pages, otta,   ROUND(CASE WHEN otta=0 OR sml.relpages=0 OR sml.relpages=otta THEN 0.0 ELSE sml.relpages/otta::numeric END,1) AS tbloat,   CASE WHEN relpages  $$information_schema$$   LEFT JOIN   (     SELECT       ma,bs,foo.nspname,foo.relname,       (datawidth+(hdr+ma-(case when hdr%ma=0 THEN ma ELSE hdr%ma END)))::numeric AS datahdr,       (maxfracsum*(nullhdr+ma-(case when nullhdr%ma=0 THEN ma ELSE nullhdr%ma END))) AS nullhdr2     FROM (       SELECT         ns.nspname, tbl.relname, hdr, ma, bs,         SUM((1-coalesce(null_frac,0))*coalesce(avg_width, 2048)) AS datawidth,         MAX(coalesce(null_frac,0)) AS maxfracsum,         hdr+(           SELECT 1+count(*)/8           FROM pg_stats s2           WHERE null_frac<>0 AND s2.schemaname = ns.nspname AND s2.tablename = tbl.relname         ) AS nullhdr       FROM pg_attribute att        JOIN pg_class tbl ON att.attrelid = tbl.oid       JOIN pg_namespace ns ON ns.oid = tbl.relnamespace        LEFT JOIN pg_stats s ON s.schemaname=ns.nspname       AND s.tablename = tbl.relname       AND s.inherited=false       AND s.attname=att.attname,       (         SELECT           (SELECT current_setting($$block_size$$)::numeric) AS bs,             CASE WHEN SUBSTRING(SPLIT_PART(v, $$ $$, 2) FROM $$#"[0-9]+.[0-9]+#"%$$ for $$#$$)               IN ($$8.0$$,$$8.1$$,$$8.2$$) THEN 27 ELSE 23 END AS hdr,           CASE WHEN v ~ $$mingw32$$ OR v ~ $$64-bit$$ THEN 8 ELSE 4 END AS ma         FROM (SELECT version() AS v) AS foo       ) AS constants       WHERE att.attnum > 0 AND tbl.relkind=$$r$$       GROUP BY 1,2,3,4,5     ) AS foo   ) AS rs   ON cc.relname = rs.relname AND nn.nspname = rs.nspname   LEFT JOIN pg_index i ON indrelid = cc.oid   LEFT JOIN pg_class c2 ON c2.oid = i.indexrelid ) AS sml order by wastedbytes desc limit 10;```
2039698 | 2024.84599996043 | 0 | 2.968 | 0.000992718529900034 | 0.00373028886295509 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ```END;```
1 | 1978.128 | 1978.128 | 1978.128 | 1978.128 | 0 | 0 | 223270 | 1 | 2 | 0 | 0 | 0 | 0 | 0 | 4682 | 4666 | 0 | 0 | ```create table IF NOT EXISTS snap_pg_index_bloat as select 1::int8 snap_id, now() snap_ts,    current_database() AS db, schemaname, tablename, reltuples::bigint AS tups, relpages::bigint AS pages, otta,   ROUND(CASE WHEN otta=0 OR sml.relpages=0 OR sml.relpages=otta THEN 0.0 ELSE sml.relpages/otta::numeric END,1) AS tbloat,   CASE WHEN relpages  $$information_schema$$   LEFT JOIN   (     SELECT       ma,bs,foo.nspname,foo.relname,       (datawidth+(hdr+ma-(case when hdr%ma=0 THEN ma ELSE hdr%ma END)))::numeric AS datahdr,       (maxfracsum*(nullhdr+ma-(case when nullhdr%ma=0 THEN ma ELSE nullhdr%ma END))) AS nullhdr2     FROM (       SELECT         ns.nspname, tbl.relname, hdr, ma, bs,         SUM((1-coalesce(null_frac,0))*coalesce(avg_width, 2048)) AS datawidth,         MAX(coalesce(null_frac,0)) AS maxfracsum,         hdr+(           SELECT 1+count(*)/8           FROM pg_stats s2           WHERE null_frac<>0 AND s2.schemaname = ns.nspname AND s2.tablename = tbl.relname         ) AS nullhdr       FROM pg_attribute att        JOIN pg_class tbl ON att.attrelid = tbl.oid       JOIN pg_namespace ns ON ns.oid = tbl.relnamespace        LEFT JOIN pg_stats s ON s.schemaname=ns.nspname       AND s.tablename = tbl.relname       AND s.inherited=false       AND s.attname=att.attname,       (         SELECT           (SELECT current_setting($$block_size$$)::numeric) AS bs,             CASE WHEN SUBSTRING(SPLIT_PART(v, $$ $$, 2) FROM $$#"[0-9]+.[0-9]+#"%$$ for $$#$$)               IN ($$8.0$$,$$8.1$$,$$8.2$$) THEN 27 ELSE 23 END AS hdr,           CASE WHEN v ~ $$mingw32$$ OR v ~ $$64-bit$$ THEN 8 ELSE 4 END AS ma         FROM (SELECT version() AS v) AS foo       ) AS constants       WHERE att.attnum > 0 AND tbl.relkind=$$r$$       GROUP BY 1,2,3,4,5     ) AS foo   ) AS rs   ON cc.relname = rs.relname AND nn.nspname = rs.nspname   LEFT JOIN pg_index i ON indrelid = cc.oid   LEFT JOIN pg_class c2 ON c2.oid = i.indexrelid ) AS sml order by wastedibytes desc limit 10;```
#### 建议
检查SQL是否有优化空间, 配合auto_explain插件在csvlog中观察LONG SQL的执行计划是否正确.  
### 2. TOP 10 size 表统计信息
current_database | nspname | relname | relkind | pg_relation_size | seq_scan | seq_tup_read | idx_scan | idx_tup_fetch | n_tup_ins | n_tup_upd | n_tup_del | n_tup_hot_upd | n_live_tup | n_dead_tup
---|---|---|---|---|---|---|---|---|---|---|---|---|---|---
```postgres``` | ```public``` | ```rum_test``` | r | 15 GB | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0.00000000000000000000 | 0.00000000000000000000
```postgres``` | ```public``` | ```gin_test``` | r | 15 GB | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0.00000000000000000000 | 0.00000000000000000000
```postgres``` | ```public``` | ```arr_test``` | r | 4340 MB | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0.00000000000000000000 | 0.00000000000000000000
```postgres``` | ```public``` | ```pgbench_accounts``` | r | 1395 MB | 0 | 0 | 4079396 | 4079396 | 0 | 2039698 | 0 | 1877887 | 10454088.000000000000 | 1254538.000000000000
```postgres``` | ```public``` | ```gist_test``` | r | 498 MB | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0.00000000000000000000 | 0.00000000000000000000
```postgres``` | ```public``` | ```btree_test``` | r | 422 MB | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0.00000000000000000000 | 0.00000000000000000000
```postgres``` | ```public``` | ```p2``` | r | 346 MB | 0 | 0 | -1 | -1 | 0 | 0 | 0 | 0 | 0.00000000000000000000 | 0.00000000000000000000
```postgres``` | ```public``` | ```p1``` | r | 346 MB | 0 | 0 | -1 | -1 | 0 | 0 | 0 | 0 | 0.00000000000000000000 | 0.00000000000000000000
```postgres``` | ```public``` | ```pgbench_history``` | r | 281 MB | 0 | 0 | -1 | -1 | 2039698 | 0 | 0 | 0 | 5291572.000000000000 | 0.00000000000000000000
```postgres``` | ```public``` | ```test_pg_part_single``` | r | 66 MB | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0.00000000000000000000 | 0.00000000000000000000
#### 说明
seq_scan, 全表扫描次数  
seq_tup_read, 全表扫描实际一共读取了多少条记录, 如果平均每次读取的记录数不多, 可能是limit语句造成的  
idx_scan, 索引扫描次数  
idx_tup_fetch, 索引扫描实际获取的记录数, 如果平均每次读取记录数很多, 说明数据库倾向使用索引扫描, 建议观察随机IO的性能看情况调整  
n_tup_ins, 统计周期内, 插入了多少条记录  
n_tup_upd, 统计周期内, 更新了多少条记录  
n_tup_hot_upd, 统计周期内, HOT更新(指更新后的记录依旧在当前PAGE)了多少条记录  
n_live_tup, 该表有多少可用数据  
n_dead_tup, 该表有多少垃圾数据  
#### 建议
经验值: 单表超过10GB, 并且这个表需要频繁更新 或 删除+插入的话, 建议对表根据业务逻辑进行合理拆分后获得更好的性能, 以及便于对膨胀索引进行维护; 如果是只读的表, 建议适当结合SQL语句进行优化.  
### 3. 全表扫描统计 , 平均实际扫描记录数排名前10的表
current_database | nspname | relname | relkind | pg_relation_size | seq_scan | seq_tup_read | idx_scan | idx_tup_fetch | n_tup_ins | n_tup_upd | n_tup_del | n_tup_hot_upd | n_live_tup | n_dead_tup
---|---|---|---|---|---|---|---|---|---|---|---|---|---|---
```postgres``` | ```pg_catalog``` | ```pg_constraint``` | r | 38 MB | 3 | 299868 | 11727 | 210786 | 2 | 0 | 2 | 0 | 1.00000000000000000000 | 2.0000000000000000
```postgres``` | ```__pg_stats__``` | ```snap_pg_statio_all_indexes``` | r | 16 MB | 2 | 100228 | -1 | -1 | 50114 | 0 | 0 | 0 | 50114.000000000000 | 0.00000000000000000000
```postgres``` | ```pg_catalog``` | ```pg_class``` | r | 17 MB | 16919 | 647986307 | 540644 | 388186 | 132 | 32 | 132 | 31 | 66.0000000000000000 | 139.0000000000000000
```postgres``` | ```pg_catalog``` | ```pg_index``` | r | 9032 kB | 45 | 1202791 | 108324 | 256166 | 34 | 0 | 34 | 0 | 17.0000000000000000 | 34.0000000000000000
```postgres``` | ```pg_catalog``` | ```pg_proc``` | r | 680 kB | 2 | 5936 | 1294 | 1900 | 16 | 7 | 16 | 7 | 10.0000000000000000 | 19.0000000000000000
```postgres``` | ```__pg_stats__``` | ```snap_pg_statio_all_tables``` | r | 232 kB | 2 | 1606 | -1 | -1 | 803 | 0 | 0 | 0 | 803.0000000000000000 | 0.00000000000000000000
```postgres``` | ```__pg_stats__``` | ```snap_pg_db_rel_size``` | r | 248 kB | 2 | 1466 | -1 | -1 | 733 | 0 | 0 | 0 | 733.0000000000000000 | 0.00000000000000000000
```postgres``` | ```pg_catalog``` | ```pg_statistic``` | r | 392 kB | 6 | 3110 | 337280 | 5644 | 125 | 145 | 154 | 136 | 542.0000000000000000 | 38.0000000000000000
```postgres``` | ```__pg_stats__``` | ```snap_pg_rel_age``` | r | 32 kB | 1 | 100 | -1 | -1 | 100 | 0 | 0 | 0 | 100.0000000000000000 | 0.00000000000000000000
```postgres``` | ```__pg_stats__``` | ```snap_pg_stat_statements``` | r | 64 kB | 1 | 42 | -1 | -1 | 42 | 0 | 0 | 0 | 42.0000000000000000 | 0.00000000000000000000
#### 说明
seq_scan, 全表扫描次数  
seq_tup_read, 全表扫描实际一共读取了多少条记录, 如果平均每次读取的记录数不多, 可能是limit语句造成的  
idx_scan, 索引扫描次数  
idx_tup_fetch, 索引扫描实际获取的记录数, 如果平均每次读取记录数很多, 说明数据库倾向使用索引扫描, 建议观察随机IO的性能看情况调整  
n_tup_ins, 统计周期内, 插入了多少条记录  
n_tup_upd, 统计周期内, 更新了多少条记录  
n_tup_hot_upd, 统计周期内, HOT更新(指更新后的记录依旧在当前PAGE)了多少条记录  
n_live_tup, 该表有多少可用数据  
n_dead_tup, 该表有多少垃圾数据  
#### 建议
平均扫描的记录数如果很多, 建议找到SQL, 并针对性的创建索引(统计分析需求除外).  
### 4. 未命中buffer , 热表统计
current_database | schemaname | relname | heap_blks_read | heap_blks_hit | idx_blks_read | idx_blks_hit | toast_blks_read | toast_blks_hit | tidx_blks_read | tidx_blks_hit
---|---|---|---|---|---|---|---|---|---|---
```postgres``` | ```pg_catalog``` | ```pg_proc``` | 1 | 1754 | 0 | 2833 | 10 | 262 | 0 | 312
```postgres``` | ```pg_catalog``` | ```pg_statistic``` | 6 | 6448 | 0 | 675060 | 0 | 23 | 0 | 14
```postgres``` | ```pg_catalog``` | ```pg_db_role_setting``` | 1 | 420 | 5 | 1036802 | 0 | 0 | 0 | 0
```postgres``` | ```pg_catalog``` | ```pg_shdescription``` | 2 | 25 | 3 | 10 | 0 | 0 | 0 | 0
```postgres``` | ```__pg_stats__``` | ```snap_list``` | 1 | 5 | 2 | 8 | 0 | 0 | 0 | 0