√
Figure 4. Permitted Communication. Each row indi-
cates whether the component in the left column may
communicate with the component in the top row. Note
that communication is not necessarily symmetric.
5. Security Analysis
CLAMP relies on trusted system components to enforce its
security properties. These CLAMP components have three
primary sources of attack robustness: a reduced trusted
computing base (TCB), a minimized interface for each
component of the TCB, and defense-in-depth. CLAMP
reduces its TCB by selecting only the code/policy it must
trust for data protection and extracting it from the web
server stack into small modules with minimal interfaces.
These smaller chunks are more amenable to static analysis
or audit and are more easily (re)written using programming
languages that facilitate secure coding. By reducing the
interfaces to trusted components, CLAMP minimizes their
attack surfaces and simpliﬁes their implementation. Fi-
nally, CLAMP incorporates defense-in-depth using a tiered
communication structure designed to enhance isolation
(Figure 4). The result is an architecture that requires the
compromise of at least two distinct component types (a
WebStack and a more trusted component) to gain access to
the database.
Below, we consider the security impact of an attacker
compromising each component (Compromise Result) in
CLAMP and each component’s vulnerability to an attack
(Attack Surface). We also consider additional attacks, such
as Denial-of-Service and covert channels.
5.1. Dispatcher
Compromise Result: Because the Dispatcher holds the
server’s SSL private key and terminates all SSL connec-
tions, its compromise gives an attacker complete control
over all active client sessions. An attacker could sniff
sensitive data including login credentials, and extract any
sensitive data the web application exposes during normal
operation. However, users who do not connect while the
Dispatcher is compromised are not at risk. Thus,
the
160
Dispatcher is in the TCB for active users. A Dispatcher
compromise does not help the attacker launch a subsequent
attack on the UA or the QR, since it
is not directly
connected to either component (Figures 2 and 4).
Attack Surface: The Dispatcher, which listens for incoming
SSL connections on a TCP port,
is the only CLAMP
component that is directly accessible from the Internet. Its
attack surface is limited to the VM OS’s TCP stack and
the SSL implementation running on top of it (in our case,
OpenSSL) since no other ports are externally accessible.
The Dispatcher application itself reads and writes socket
data without inspecting the contents.
5.2. Web server Virtual Machine (WebStack)
Compromise Result: The compromise of a WebStack ex-
poses any sensitive data that the WebStack has retrieved
from the database on behalf of the user. However, since
the WebStack is vulnerable to attacks only from the client
for whom it
is retrieving data, no invalid data access
occurs. Thus, the WebStack is not in CLAMP’s TCB. A
compromise of a WebStack may be a stepping stone to
attack the UA or QR.
Attack Surface: Vulnerabilities either in the HTTP server
itself or in web application code can lead to the compromise
of a WebStack. The size of its code base and the complexity
of the interface it exposes make the web server a prime
target for compromise. (This is the major class of attacks
that CLAMP is designed to thwart.) Because each user re-
ceives a fresh WebStack image independent of other clients
and because the Dispatcher sends trafﬁc from each SSL
connection to a unique WebStack that is isolated from all
other WebStacks, no party except the user herself can even
reach a particular WebStack. As a result, assuming that
the pristine WebStack does not contain malware, legitimate
users need not worry about other parties compromising
their WebStack.
5.3. User Authenticator (UA)
Compromise Result: A malicious UA can assign arbitrary
UID and class identiﬁer credentials to any WebStack. As
a result, an attacker that compromises both a WebStack
and the UA could let the WebStack iteratively masquerade
as each legitimate user, eventually extracting all sensitive
user information from the database. Note that without com-
promising a WebStack, the UA cannot communicate with
external systems. For web applications with an “admin”
class, a compromised UA could also escalate the privilege
of the malicious WebStack to increase information access.
As a result, the UA is included in CLAMP’s TCB.
Attack Surface: The UA is only reachable by an attacker
that has successfully compromised a WebStack. The UA’s
interface is extremely narrow: it accepts UDP data from
WebStacks consisting solely of user credentials. The UA
then passes this data to the application-speciﬁc user au-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:17:42 UTC from IEEE Xplore.  Restrictions apply. 
thentication code. Thus, the interface exposed to WebStacks
includes the IP/UDP stack of the OS and an easily veriﬁable
(fewer than 200 lines of code) authentication server.
5.4. Query Restrictor (QR)
Compromise Result: The QR has full access to the database,
meaning that its compromise exposes all of a web applica-
tion’s sensitive data. The QR is part of CLAMP’s TCB.
Attack Surface: Like the UA, network level access to the
QR interface is only possible via a compromised WebStack.
The QR receives simple network messages from the UA to
add WebStack-associations and from WebStacks to remove
associations. As with the UA, such simple server code per-
mits manual veriﬁcation. The QR interface, however, also
includes the code to proxy WebStack database connections.
Our analysis of the full-ﬂedged open source MySQL proxy
we use in our implementation suggests that a bare-bones
proxy capable of acting as a QR would require under 5,000
lines of code. Manually auditing and/or rewriting the proxy
in a robust programming language would be drastically
easier than a similar procedure for a WebStack and its
signiﬁcant server software stack.
The QR uses database views to enforce database access
policies. Unfortunately, speciﬁc database implementations
may have vulnerabilities that allow an attacker to gain full
access to a database from a view. While patches for the
database software will presumably be issued eventually, it
may actually be easier and faster to patch the QR until the
database patch can be tested and deployed.
5.5. Database
Compromise Result: A database compromise yields all
sensitive data to the attacker, so the database is also in
CLAMP’s TCB.
Attack Surface: The QR is the only module permitted to
communicate with the database. This provides defense-
in-depth, as a compromise of web server code neither
exposes database credentials nor provides a channel for
direct network communication with or attacks upon the
database server. An attacker must compromise at least two
components to gain direct access to the database.
5.6. Isolation Layer
Compromise Result: CLAMP must trust a security kernel,
in our prototype a VMM, both to isolate WebStacks from
each other and to protect trusted components like the UA
and QR. A compromised Isolation Layer could take over
these trusted components, exposing all sensitive data. The
Isolation Layer is in CLAMP’s TCB.
Attack Surface: When instantiated with a VMM, the Iso-
lation Layer is difﬁcult to compromise, since a malicious
guest OS sees only a well-deﬁned virtual hardware inter-
face. The code size of popular VMMs such as Xen [1]
is typically several orders of magnitude smaller than a
commodity OS, or security architectures that apply to the
OS (e.g., Flume [11] and SELinux [25,26]). Recent counts
estimate Xen at 83K lines of code [14] versus nearly 5
million for the Linux kernel [32]. While these numbers
can be reduced by trimming unnecessary functionality, the
Linux kernel is likely to remain signiﬁcantly larger than
the Xen VMM. Using a specialized microkernel, such
as L4 [6], would reduce the TCB by another order of
magnitude.
Another potential route to Isolation Layer compromise
is its management interface. Only the QR can access this
interface (in order to recycle WebStacks that have ﬁnished
a client session). Since a QR compromise already exposes
all sensitive data, the internal management interface does
not provide a useful attack vector.
5.7. Other Potential Attacks
Covert Channels and Side Channels. To prevent data
leaks, we must consider CLAMP’s vulnerability both to
covert channels (surreptitious communication between two
malicious entities) and to side channels (data leaked by an
honest party). Since users have no interest in using a covert
channel to leak their own data, and since a WebStack can
only be compromised by the user on whose behalf it is
acting, covert channels are not a primary concern.
However, we do not wish a compromised WebStack
to be able to extract sensitive data about other users
via side channels. To prevent such leaks, we rely on
the Isolation Layer. In our prototype, a VMM strictly
isolates the memory assigned to each WebStack and can
enforce strong performance isolation between VMs [1]. By
manipulating each VM’s perception of time, the VMM can
further limit the size of any side or covert channels that
may be present [8]. Thus, side channels will provide an
extremely limited amount of bandwidth.
Denial of Service (DoS) Attacks. Assigning each user to
her own WebStack potentially leaves CLAMP vulnerable
to resource exhaustion or DoS attacks. For example, an
attacker can keep a WebStack in memory by sending peri-
odic HTTP requests that simulate user activity. To consume
resources, the attacker must keep WebStacks in memory.
However, such attacks require the adversary to control a
considerable number of user accounts, as a WebStack is
only assigned after a user logs into the website. In security-
sensitive applications, a user’s account is often tied to a
real-world object or identity. For example, many banks
require a customer to be physically present to open an
account. This binding between an account and a physical
identity thwarts an attacker who tries to create hundreds
of accounts in order to waste resources on the server. DoS
attacks can also be mitigated by the Isolation Layer using
constraints on resources assigned to any one WebStack.
161
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:17:42 UTC from IEEE Xplore.  Restrictions apply. 
Even with these techniques to limit resource consump-
tion, CLAMP still requires more resources per user than an
insecure site. Still, we envision CLAMP’s use in scenarios
where security is a priority, and the extra computing
resources required to guarantee availability may be an
acceptable cost. For example, this is true of SSL-enabled
web servers today. Many web hosts have decided to devote
the extra resources needed for SSL, even to the point of
investing in special-purpose hardware (e.g., network cards
that ofﬂoad SSL computation). In the future, we plan to
investigate additional
techniques to further mitigate the
effects of DoS attacks.
Security with Shared Database Content. Some content
in web-application databases may be legitimately writable
by any client, and may later be returned to other clients
as HTML (e.g., user reviews). An attacker who injects
malicious HTML or javascript might be able to modify
the behavior of a web page so that it submits sensitive data
to an untrusted server. While “scrubbing” user-submitted
content could detect many such attacks, a more reliable
defense is to isolate user-generated content from poten-
tially sensitive content using iframe HTML elements –
an approach that is widely used in so-called “mash-up”
sites today [31]. Many sites with highly sensitive user data
already avoid shared user content, obviating this concern.
6. Implementation
implementation
We have developed a proof-of-concept
to osCom-
of the CLAMP architecture and applied it
merce [19], MyPhpMoney [3], and HotCRP [10]. os-
Commerce is an e-commerce web application currently
in use by over 14,000 online merchants [19], making it
(to the best of our knowledge) the most widely used
open-source e-commerce web application. MyPhpMoney
is a personal ﬁnance management application. HotCRP is
conference management software that has been employed
for numerous conferences (including this one) and allows
conference organizers to conﬁgure a wide range of options
to control information access. Below (and in our perfor-
mance evaluation in Section 7), we focus on the more
widely used osCommerce. We defer detailed discussion of
MyPhpMoney to Appendix A and HotCRP to Appendix B.
Below, we describe the implementation of each compo-
nent. We evaluate CLAMP’s performance in Section 7.
6.1. User Authenticator (UA)
Our experience creating User Authenticator modules for
osCommerce, MyPhpMoney, and HotCRP demonstrates
that “porting” an existing LAMP application to CLAMP is
simple. We implemented the UA in its own VM based on a
minimal Debian Linux installation. The UA is divided into
two components: (1) a generic UDP server that accepts re-
quests and communicates with the QR; and (2) application-
implements user authentication. The
speciﬁc code that
generic server is under 50 lines of PHP code and is used
for all web applications.
To implement authentication speciﬁc to osCommerce,
we readily identiﬁed three PHP ﬁles with login func-
tionality (login.php, create_account.php, and
admin/login.php) and moved the password checking
code to the UA. This involved less than 150 lines of code,
all of which were taken directly from osCommerce. In each
of the three PHP ﬁles, we replaced the login code with
three lines of PHP to make simple UDP calls to the UA
with authentication credentials.
MyPhpMoney and HotCRP proved similarly straightfor-
ward: the user authentication code was readily identiﬁed,
and each application required changes to fewer than 10
lines of code (see Appendices A and B).
6.2. Query Restrictor (QR)
Our QR is implemented as an extension to mysql-proxy,5
one of MySQL’s Enterprise Tools. The mysql-proxy is
designed to monitor and optionally transform the database
connections it proxies. Each event of signiﬁcance (e.g.,
initial handshake, authorization exchange, or SQL query)
prompts a call to a user-supplied Lua script. We modiﬁed
the proxy to improve its scalability. We also added func-
tionality to accept calls from the UA to add and remove
mappings between WebStack identities and user identities.
After trimming unused functionality, the proxy consists of
less than 5,000 lines.
We implemented the QR functionality as a Lua script
consisting of 294 lines of code. The Lua script tracks
the WebStack identities. When a WebStack ﬁrst connects,
the QR assigns it to a temporary database (preallocated
before the QR starts). The temporary database is populated
with views of the main database’s tables. These views are
represented internally by MySQL as select statements; thus,
they require little state, and they do not duplicate data.
if the user’s UID is 124,
Once a user logs in, the QR customizes the temporary
database’s views based on the WebStack’s identity and
the data access policy supplied by an administrator. For
example,
then the view of
the Orders table would be customized (using the SQL
command ALTER VIEW) such that it contains only rows
where user_id = 124. Subsequent connections from the
same WebStack are routed to the same temporary database
(avoiding customization) until the WebStack is recycled and
given a new identity.
Whenever the WebStack attempts to connect
to the
database machine, the QR rewrites the WebStack’s autho-
rization SQL commands to use a temporary MySQL user
who only has access to the temporary database assigned
to the WebStack. Thus, each WebStack sees only its own
5. http://forge.mysql.com/wiki/MySQL Proxy
162
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:17:42 UTC from IEEE Xplore.  Restrictions apply. 
temporary database, and cannot access any of the other tem-
porary databases or the main database itself. Hence, the QR
does not need to modify the WebStack’s database queries,
since they will be processed against the temporary database
that only contains sensitive information for the WebStack’s
user. In addition, because the views in the temporary
database have the same names as the tables in the original
database, all of the queries generated by the web application
work as they did before. Thus,
the QR’s functionality
is transparent to the code in the WebStacks. The QR’s
transparency enables QR reuse across web applications.
We use the same QR for osCommerce, MyPhpMoney, and
HotCRP by simply loading the appropriate policy ﬁles.
We also use existing database functionality to control
data modiﬁcations (update, insert, delete). By default, we
use existing database-level access restrictions to limit the
temporary MySQL user to SELECT statements, effectively
making the temporary database read-only. To allow modiﬁ-
cations, we can grant the MySQL user insert, update, and/or
delete rights on a per-table basis, a feature supported by all
major databases.
However, databases differ in how they handle writable
views. MySQL, Microsoft SQL Server, and Oracle
Database all permit writable views and support the stan-
dard SQL clause (WITH CHECK OPTION) during view
creation. This clause causes the database to automatically
check that all inserts and updates conform with the pred-
icate used to deﬁne the view. These databases do prohibit
modiﬁcations to views that use functions (e.g., SUM) that
destroy the one-to-one mapping between rows in the view
and rows in the underlying database. Fortunately, since
CLAMP uses views to present a subset of the existing rows
in the database, its view deﬁnitions do allow modiﬁcation.
In the case of link tables (discussed in Section 4.2),
MySQL’s view implementation will not allow the types of
restrictions we require. To work around these restrictions,
we currently duplicate the data in the link tables, using