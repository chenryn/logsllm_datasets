control, Jenkins will schedule both builds to be executed. However it will wait until the core build has
finished before starting the web application build.
game-of-life-core game-of-life-core
version 1.0.0-SNAPSHOT version 1.0.0
game-of-life-web game-of-life-web
version 1.0.0-SNAPSHOT version 1.0.0
revision 100 revision 101
Subversion revisions
Figure 5.5. The “Block build when upstream project is building” option is useful when a single commit
can affect several related projects
You can also override the default workspace used by Jenkins to check out the source code and build
your project. Normally, Jenkins will create a special workspace directory for your project, which can be
found in the project’s build job directory (see Section 3.13, “What’s in the Jenkins Home Directory”).
This works fine in almost all cases. However, there are times when you need to override this option,
and force Jenkins to use a special directory. One common example of this is if you want several build
jobs to all work successively in the same directory. You can override the default directory by ticking
the “Use custom workspace” option, and providing the path yourself. The path can be either absolute,
or relative to Jenkins’s home directory.
We will look at some of the other more advanced options that appear in this section later on in the book.
5.4. Configuring Source Code Management
In its most basic role, a Continuous Integration server monitors your version control system, and checks
out the latest changes as they occur. The server then compiles and tests the most recent version of the
code. Alternatively, it may simply check out and build the latest version of your source code on a regular
basis. In either case, tight integration with your version control system is essential.
Because of its fundamental role, SCM configuration options in Jenkins are identical across all sorts
of build jobs. Jenkins supports CVS and Subversion out of the box, with built-in support for Git, and
also integrates with a large number of other version control systems via plugins. At the time of writing,
SCM plugin support includes Accurev, Bazaar, BitKeeper, ClearCase, CMVC, Dimensions, Git, CA
Harvest, Mercurial, Perforce, PVCS, StarTeam, CM/Synergy, Microsoft Team Foundation Server, and
even Visual SourceSafe. In the rest of this section, we will look at how to configure some of the more
common SCM tools.
85
5.4.1. Working with Subversion
Subversion is one of the most widely used version control systems, and Jenkins comes bundled with
full Subversion support (see Figure 5.6, “Jenkins provides built-in support for Subversion”). To use
source code from a Subversion repository, you simply provide the corresponding Subversion URL—it
will work fine with any of the three Subversion protocols of (http, svn, or file). Jenkins will check that
the URL is valid as soon as you enter it. If the repository requires authentication, Jenkins will prompt
you for the corresponding credentials automatically, and store them for any other build jobs that access
this repository.
Figure 5.6. Jenkins provides built-in support for Subversion
By default, Jenkins will check out the repository contents into a subdirectory of your workspace, whose
name will match the last element in the Subversion URL. So if your Subversion URL is svn://localhost/
gameoflife/trunk, Jenkins will check out the repository contents to a directory called trunk in the build
job workspace. If you would prefer another directory name, just enter the directory name you want in
the Local module directory field. Place a period (“.”) here if you want Jenkins to check the source
code directly into the workspace.
Occasionally you may need to get source code from more than one Subversion URL. In this case, just
use the “Add more locations...” button to add as many additional repository sources as you need.
A well-designed build process should not modify the source code, or leave any extra files that might
confuse your version control system or the build process. Both generated artifacts and temporary files
(such as log files, reports, test data or file-based databases) should go in a directory set aside for this
purpose (such as the target directory in Maven builds), and/or be configured to be ignored by your
version control repository. They should also be deleted as part of the build process, once the build has
finished with them. This is also an important part of ensuring a clean and reproducible build process
—for a given version of your source code, your build should behave in exactly the same way, no matter
86
where or when it is run. Locally changed source code files, and the presence of temporary files, both
have the potential of compromising this.
You can fine-tune the way Jenkins obtains the latest source code from your Subversion repository by
selecting an appropriate value in the Check-out Strategy drop-down list. If your project is well-behaved,
however, you may be able to speed things up substantially by selecting “Use ‘svn update’ as much
as possible”. This is the fastest option, but may leave artifacts and files from previous builds in your
workspace. To be on the safe side, you may want to use the second option (“Use ‘svn update’ as much as
possible, with ‘svn revert’ before update”), which will systematically run svn revert before running
svn update. This will ensure that no local files have been modified, though it will not remove any
new files that have been created during the build process. Alternatively, you can ask Jenkins to delete
any unversioned or ignored files before performing an svn update, or play it safe by checking out a
full clean copy for each build.
Another very useful feature is Jenkins’s integration with source code browsers. A good source code
browser is an important part of your Continuous Integration setup. It lets you see at a glance what
changes triggered a given build, which is very useful when it comes to troubleshooting broken builds
(see Figure 5.7, “Source code browser showing what code changes caused a build”). Jenkins integrates
with most of the major source code browsers, including open source tools such as WebSVN and Sventon,
and commercial ones like Atlassian’s FishEye.
Figure 5.7. Source code browser showing what code changes caused a build
Jenkins also lets you refine the changes that will trigger a build. In the Advanced section, you can use
the Excluded Regions field to tell Jenkins not to trigger a build if only certain files were changed. This
field takes a list of regular expressions, which identify files that should not trigger a build. For example,
87
suppose you don’t want Jenkins to start a new build if only images have been changed. To do this, you
could use a set of regular expressions like the following:
/trunk/gameoflife/gameoflife-web/src/main/webapp/.*\.jpg
/trunk/gameoflife/gameoflife-web/src/main/webapp/.*\.gif
/trunk/gameoflife/gameoflife-web/src/main/webapp/.*\.png
Alternatively, you can specify the Included Regions, if you are only interested in changes in part of the
source code directory structure. You can even combine the Excluded Regions and Included Regions
fields—in this case a modified file will only trigger a build if it is in the Included Regions but not in
the Excluded Regions.
You can also ignore changes coming from certain users (Excluded Users), or with certain commit
messages (Excluded Commit Messages). For example, if your project uses Maven, you may want to
use the Maven Release Plugin to promote your application from snapshot versions to official releases.
This plugin will automatically bump up the version number of your application from a snapshot version
used during development (such as 1.0.1-SNAPSHOT) to a release (1.0.1), bundles up and deploys a
release of your application with this version number, and then moves the version on to the next snapshot
number (e.g., 1.0.2-SNAPSHOT) for ongoing development. During this process Maven takes care of
many SCM bookkeeping tasks, such as committing the source code with the release version number and
creating a tag for the released version of your application, and then committing the source code with
the new snapshot version number.
Now suppose you have a special build job for generating a new release using this process. The many
commits generated by the Maven Release Plugin would normally trigger off build jobs in Jenkins.
However, since the release build job is already compiling and testing this version of your application,
you don’t need Jenkins to do it again in a separate build job. To ensure that Jenkins does not trigger a
build for this case, you can use the Excluded Commit Messages field with the following value:
[maven-release-plugin] prepare release.*
This will ensure that Jenkins skips the changes corresponding to the new release version, but not those
corresponding to the next snapshot version.
5.4.2. Working with Git
Contributed by Matthew McCullough
Git1 is a popular distributed version control system that is a logical successor to Subversion2 and a
mind-share competitor to Mercurial3. Git support in Jenkins is both mature and full-featured. There are
a number of plugins that can contribute to the overall story of Git in Jenkins. We will begin by looking
at the Git plugin, which provides core Git support in Jenkins. We’ll discuss the supplemental plugins
shortly.
1 http://git-scm.com/
2 http://subversion.tigris.org/
3 http://mercurial.selenic.com/
88
5.4.2.1. Installing the plugin
The Git plugin is available in the Jenkins Plugin Manager and is documented on its own wiki page4.
The plugin assumes that Git (version 1.3.3 or later) has already been installed on your build server, so
you will need to make sure that this is the case. You can do this by running the following command
on your build server:
$ git --version
git version 1.7.1
Next, go back to Jenkins, check the corresponding check box in the Jenkins Plugin Manager page and
click the Install button.
5.4.2.1.1. System-wide configuration of the plugin
After installing the Git plugin, a small new set of configuration options will be available on the Manage
Jenkins#Configure System page (see Figure 5.8, “System-wide configuration of the Git plugin”). In
particular, you need to provide the path to your Git executable. If Git is already installed on the system
path, just put “git” here.
Figure 5.8. System-wide configuration of the Git plugin
5.4.2.1.2. SSH key setup
If the Git repository you are accessing uses SSH passphrase-less authentication—for example, if the
access address is similar to PI:EMAIL:matthewmccullough/some-repo.git—you’ll need
to provide the private half of the key as file ~/.ssh/id_rsa where ~ is the home directory of the user
account under which Jenkins is running.
The fingerprint of the remote server will additionally need to be placed in ~/.ssh/known_hosts to
prevent Jenkins from invisibly prompting for authorization to access this Git server for the first time.
Alternatively, if logging-in is enabled for the jenkins user, SSH into the Jenkins machine as jenkins
and manually attempt to Git clone a remote repository. This will test your private key setup and establish
the known_hosts file in the ~/.ssh directory. This is probably the simplest option for users unfamiliar
with the intricacies of SSH configuration.
4 http://wiki.hudson-ci.org/display/HUDSON/Git+Plugin
89
5.4.2.2. Using the plugin
On either an existing or a new Jenkins project, a new Source Code Management option for Git will be
displayed. From here, you can configure one or more repository addresses (see Figure 5.9, “Entering
a Git repo URL”). One repository is usually enough for most projects: adding a second repository can
be useful in more complicated cases, and lets you specify distinct named locations for pull and push
operations.
5.4.2.2.1. Advanced per-project source code management configuration
In most cases, the URL of the Git repository you are using should be enough. However, if you need
more options, click on the Advanced button (see Figure 5.10, “Advanced configuration of a Git repo
URL”). This provides more precise control of the pull behavior.
The Name of repository is a shorthand title (a.k.a. remote in Git parlance) for a given repository, that
you can refer to later on in the merge action configuration.
The Refspec is a Git-specific language5 for controlling precisely what is retrieved from remote servers
and under what namespace it is stored locally.
5.4.2.2.2. Branches to build
The branch specifier (Figure 5.11, “Advanced configuration of the Git branches to build”) is the wildcard
pattern or specific branch name that should be built by Jenkins. If left blank, all branches will be built.
At the time of this writing, after the first time saving a job with a blank branches to build setting, it is
populated with **, which means “build all branches.”
5 http://progit.org/book/ch9-5.html
90
Figure 5.9. Entering a Git repo URL
Figure 5.10. Advanced configuration of a Git repo URL
91
Figure 5.11. Advanced configuration of the Git branches to build
5.4.2.2.3. Excluded regions
Regions (seen in Figure 5.12, “Branches and regions”) are named specific or wildcard paths in the
codebase that, even when changed, should not trigger a build. Commonly these are noncompiled files
such as localization bundles or images, which, understandably might not have an effect on unit or
integration tests.
92
Figure 5.12. Branches and regions
5.4.2.2.4. Excluded users
The Git plugin also lets you ignore certain users, even if they make changes to the codebase that would
typically trigger a build.
This is not as spiteful as it sounds: excluded users are typically automated users, not human developers,
that happen to have distinct accounts with commit rights in the source control system. These automated
users often are performing small numeric changes such as bumping up version numbers in a pom.xml
file, rather than making actual logic changes. If you want to exclude several users, just place them on
separate lines.
5.4.2.2.5. Checkout/merge to local branch
There are times when you may want to create a local branch from the tree you’ve specified, rather than
just using a direct detached HEAD checkout of the commit’s hash. In this case, just specify your local
branch in the “Checkout/merge to a local branch” field.
This is a little easier to illustrate with an example. Without specifying a local branch, the plugin would
do something like this:
93
git checkout 73434e4a0af0f51c242f5ae8efc51a88383afc8a
On the other hand, if you use a local branch named mylocalbranch, Jenkins would do the following:
git branch -D mylocalbranch
git checkout -b mylocalbranch 73434e4a0af0f51c242f5ae8efc51a88383afc8a
5.4.2.2.6. Local subdirectory for repo
By default, Jenkins will clone the Git repository directly into the build job workspace. If you prefer to
use a different directory, you can specify it here. Note that the directory you specify is relative to the
build job workspace.
5.4.2.2.7. Merge before build
The typical recipe for using this option is to fold an integration branch into a branch more similar to
master. Keep in mind that only conflict-less merges will happen automatically. More complex merges
that require manual intervention will fail the build.
The resultant merged branch will not automatically be pushed to another repository unless the later push
post-build action is enabled.
5.4.2.2.8. Prune remote branches before build
Pruning removes local copies of remote branches that exist as a remnant of the previous clone, but are
no longer present on the remote. In short, this is cleaning the local clone to be in perfect sync with its
remote siblings.
5.4.2.2.9. Clean after checkout
Activate Git’s facilities for purging any untracked files or folders, returning your working copy to a
pristine state.
5.4.2.2.10. Recursively update submodules
If you are using Git’s submodule facilities in the project, this option lets you ensure that every submodule
is up-to-date with an explicit call to update, even if submodules are nested within other submodules.
5.4.2.2.11. Use commit author in changelog
Jenkins tracks and displays the author of changed code in a summarized view. Git tracks both the
committer and author of code distinctly, and this option lets you toggle which of those two usernames
is displayed in the changelog.
5.4.2.2.12. Wipe out workspace
Typically Jenkins will reuse the workspace, merely freshening the checkout as necessary and, if you
activated the “Clean after checkout” option, cleaning up untracked files. However, if you prefer to have
94
a completely clean workspace, you can use the “Wipe out workspace” option to delete and rebuild the
workspace from the ground up. Bear in mind that this may significantly lengthen the time it takes to
initialize and build the project.
5.4.2.2.13. Choosing strategy
Jenkins decides which branches to build based on a strategy (see Figure 5.13, “Choosing strategy”).
Users can influence this branch-search process. The default choice is to search for all branch HEADs. If
the Gerrit plugin is installed, additional options for building all Gerrit-notified commits are displayed.
Figure 5.13. Choosing strategy
5.4.2.2.14. Git executable
In the global options of Jenkins (see Figure 5.14, “Git executable global setup”), different Git
executables can be set up and used on a per-build basis. This is infrequently used, and only when the
clone or other Git operations are highly sensitive to a particular version of Git. Git tends to be very
version-flexible; slightly older repositories can easily be cloned with a newer version of Git and vice-
versa.
Figure 5.14. Git executable global setup
95
5.4.2.2.15. Repository browser
Like Subversion, Git has several source code browsers that you can use. The most common ones
are Gitorious, Git Web, or GitHub. If you provide the URL to the corresponding repository browser,
Jenkins will be able to display a link to the source code changes that triggered a build (see Figure 5.15,
“Repository browser”).
Figure 5.15. Repository browser
5.4.2.3. Build triggers
The basic Git plugin offers the ability to Poll SCM on a timed basis, looking for changes since the last
inquiry. If changes are found, a build is started. The polling log (shown in Figure 5.16, “Polling log”) is
accessible via a link on the left hand side of the page in the navigation bar when viewing a specific job.
It offers information on the last time the repository was polled and if it replied with a list of changes
(see Figure 5.17, “Results of Git polling”).
Figure 5.16. Polling log
96
The Git polling is distilled into a more developer-useful format that shows commit comments as well
as hyperlinking usernames and changed files to more detailed views of each.
Figure 5.17. Results of Git polling
Installing the Gerrit Build Trigger adds a Gerrit event option that can be more efficient and precise than
simply polling the repository.
5.4.2.3.1. Gerrit Trigger
Gerrit6 is an open source web application that facilitates code reviews7 for project source hosted on a
Git version control system. It reads a traditional Git repository, and provides a side-by-side comparison