这是针对幽灵和熔断安全漏洞的v2补丁，引入了`retpoline`技术通过`spectre_v2`参数控制。参数有多个配置选项，总结如下：
  * on，表示无论硬件如何，都开启
  * off，表示物理硬件如何，都关闭
  * auto，表示内核根据当前CPU model自动选择mitigation方法。参考的因素包括： 
    * cpu model
    * 是否有可用微码(也就是针对IBRS和IBPB提供的固件)
    * 内核配置选项CONFIG_RETPOLINE是否配置
    * 编译内核用的编译器是否提供了新的编译选项：-mindirect-branch=thunk-extern
  * retpoline/retpoline,generic/retpoline,amd 一共三种`RETPOLINE`选项，最后对应五种配置
参考：
###  ARM: HARDEN_BRANCH_PREDICTOR
这个配置选项是为了阻止分支预测攻击加固分支预测，针对CPU的分支预测攻击是控制分支预测执行攻击者精心构造的分支路径。通过清除内部分支预测的状态并限制某些情况下的预测逻，可以部分缓解这种攻击。
参考：
###  X86: spec_store_bypass_disable=on
这个配置选项控制是否开启对`Speculative Store Bypass`的加固以及采用什么方式加固。配置选项如下：
  * off，表示不开启任何加固
  * on，表示全局关闭CPU的`Speculative Store Bypass`优化
  * prctl，表示使用prctl进行加固
  * seccomp，表示使用seccomp进行加固
  * auto，表示自动选择加固方式，若系统支持seccomp框架，则默认采用 seccomp 加固方式，否则采用 prctl 加固方式
幽灵的v4版本开始利用`store buffer bypass`泄露信息，现代的CPU为了提升性能都会假设`store
buffer`中不存在当前内存地址的更新值，直接开始执行之后的指令，如果之后发现`store
buffer`中确实存在更新的值，就会丢弃之前执行的结果，然而这导致之前执行时已经泄露相关的信息。所以这里推荐的是直接关闭CPU的`Speculative
Store Bypass`优化。
参考：
###  ARM: ssbd=force-on
一个ARM架构针对`Speculative Store Bypass`的加固配置，控制`Speculative Store Bypass
Disable`的开关，和x86的配置比较相似。配置选项如下：
  * force-on，无条件对内核和用户空间开启加固
  * force-off，无条件对内核和用户空间关闭加固
  * kernel，开启对内核的加固，并且为用户空间提供用来加固的prctl接口，可以选择性的加固需要的地方。
参考：
###  X86: mds=full,nosmt
MDS（Microarchitectural Data Sampling，微架构的数据采样）攻击是利用处理器的预测执行，通过测信道获取`store
buffer`，`fill buffer`，`load
buffer`中的数据。通过这个攻击能从用户空间获得内核数据，但是由于攻击无法构造特定的内存地址以获取特定地址处的内存数据，因而只能通过采样的方式获取某一内存地址处对应的数据，攻击者需要收集大量数据才有可能推测出敏感数据。
这个配置的选项如下：
  * off，表示不开启MDS的加固
  * full，表示开启CPU buffer clear，但是不关闭SMT
  * full+nosmt，表示开启CPU buffer clear，同时会关闭SMT
而针对MDS攻击的加固主要是从内核态切换到用户态时对`store buffer`，`fill buffer`，`load
buffer`等缓存进行清空，另外还需要配合关闭SMT，以防止同一个核心上的辅助CPU重新填充这些缓存。
参考：  
###  X86: l1tf=full,force
L1TF（L1 Terminal Fault，L1终端错误）同样是利用CPU的预测执行来获取物理页的内容。Linux中使用PTE（page table
entry）来实现虚拟地址到物理地址之间的转换，PTE其中的PFN（page frame number）字段描述对应`page
frame`的物理地址，P（present）表示当前虚拟地址是否存在对应的物理地址，即是否为该虚拟地址分配了对应的 physical page
frame。进程在使用虚拟地址访问内存时，会首先找到该虚拟地址对应的 PTE，若 P 字段为 0，则会发生 page fault；若 P 字段为 1，根据
PFN 字段的值在 L1 data cache 中寻找是否存在缓存。
Intel 处理器在判断 P 标志位是否为 1 的时候，在判断尚未结束之前会预测执行之后的代码，即根据 PFN 字段的值在 L1 data cache
中寻找是否存在缓存。若缓存命中，那么通过 cache 侧信道攻击，攻击者就可以获取某一物理地址处的内存数据。
这个配置的选项如下：
  * off，表示不开启任何L1TF加固
  * flush，表示开启条件性的L1D flush加固，关闭SMT Disabling
  * flush+nowarn，同样开启L1D flush加固，关闭SMT Disabling，不会产生waring警告
  * flush+nosmt，表示开启条件性的L1D flush加固，开启SMT Disabling加固
  * full，表示开启无条件的L1D flush加固，开启SMT Disabling加固
  * full+force，与full效果相同，但无法通过sysfs接口在运行时动态开启或关闭L1D flush或者SMT Disabling
考虑到攻击的条件是对应物理地址在L1数据缓存中命中，那么每次在切换时把缓存清除即可。L1D flush是指在host
kernel每次进入guest之前，都清空L1的数据缓存，由于清除缓存会带来性能下降的问题，所以又分成条件性清除和无条件清除，无条件就是应用到每次的`VMENTER`都会进行清除，条件执行是当`VMEXIT`和`VMENTER`之间执行的代码都是不重要的路径时，不会执行清除操作。
参考：  
###  SLAB_FREELIST_RANDOM
开启配置选项会随机化slab的freelist，随机化用于创建新页的freelist为了减少对内核slab分配器的可预测性。这样能增加堆溢出攻击的难度。
参考：
###  SHUFFLE_PAGE_ALLOCATOR
开启配置选项会使得页分配器随机分配内存，页分配器的随机化分配过程会提高内存端缓存映射的平均利用率，并且随机化的过程也能让页面分配不可预测，能够搭配`SLAB_FREELIST_RANDOM`让整个分配过程更加难以预测。尽管随机化能提高缓存利用率，但会对没有缓存的情况产生影响，因此，默认情况下，只会在运行时检测到有内存缓存之后才会启用随机化，也可以使用内核命令行参数`page_alloc.shuffle`强制开启。
参考：
###  slab_nomerge
选项开启之后会禁止相近大小的slab合并，这个能有效防御一部分堆溢出的攻击，如果slab开启合并，被堆溢出篡改的slab块合并之后通常可以扩大攻击范围，让整个攻击危害更大。
参考：  
https://patchwork.kernel.org/project/kernel-hardening/patch/PI:EMAIL/
###  unprivileged_userfaultfd=0
这个标志位是控制低权限用户是否能使用`userfaultfd`系统调用，标志设置为1时，允许低权限用户使用，设置为0时禁止低权限用户使用，只有高权限用户能够调用。`userfaultfd`是Linux中处理内存页错误的机制，用户可以自定义函数处理这种事件，在处理函数没有结束之前，缺页发生的位置将会处于暂停状态，这会导致一些条件竞争漏洞的利用。所以最好的办法是只让高权限用户有使用的权限。
参考：https://patchwork.kernel.org/project/linux-fsdevel/patch/PI:EMAIL/
###  DEBUG_{LIST,SG,CREDENTIALS,NOTIFIERS,VIRTUAL}
这一组配置选项用于调试内核。
  * `DEBUG_LIST`：用于调试链表操作，开启之后会在链表操作中执行额外检查
  * `DEBUG_SG`：用于调试SG表的操作，开启之后会检查scatter-gather表，这个能帮助发现那些不能正确初始化SG表的驱动
  * `DEBUG_CREDENTIALS`：用于调试凭证管理，开启之后对凭证管理做调试检查，追踪`task_struct`到给定凭证结构的指针数量没有超过凭证结构的使用上限
  * `DEBUG_NOTIFIERS`：用于调试通知调用链，开启之后会检测通知调用链的合法性，这个选项对于内核开发人员非常有用，能确保模块正确的从通知链中注销
  * `DEBUG_VIRTUAL`：用于调试虚拟内存转换，开启之后在内存转换时会合法性检查（待确认）
参考：  
###  BUG_ON_DATA_CORRUPTION
开启配置选项会在检查到数据污染时触发一个bug，如果想要检查内核内存结构中的数据污染可以开启这个选项。能有效防御缓冲区溢出类漏洞。
参考：
###  STATIC_USERMODEHELPER
这个选项会强制所有的`usermodehelper`通过单一的二进制程序调用。在默认情况下，内核会通过`usermodehelper`的内核接口调用不同的用户空间程序，其中的一些会在内核代码中静态定义或者作为内核配置选项。然而，其中的另外一些是在运行时动态创建的或者在内核启动之后能修改。为了增强安全性，会重定向所有的调用到一个特定的不能改变的二进制程序上，这个程序的第一个参数是需要被执行的用户空间程序。
参考：https://patchwork.kernel.org/project/kernel-hardening/patch/PI:EMAIL/
###  LOCKDOWN_LSM
这个相关的`locked_down`能让LSM（Linux Security
Module）通过hook的方法锁定内核，阻止一些高危操作。比如加载未签名的模块，访问特殊文件`/dev/port`等等。
参考：
## 总结
内核防御机制多种多样，大体上较为通用的思路有限制权限的以SMEP，SMAP为代表，有做地址空间分离的，有通过随机化增加预测难度的，有插入特殊数据块或者检查返回地址防御缓冲区溢出的，有擦除混淆数据防止泄露的。最后可以看到Linux内核的很多优秀的防御机制都来自于`PaX/Grsecurity`，该组织提供的防御思路比各大厂商领先好几年，在学习之余不由得敬佩这20年来他们为内核防御做出的杰出贡献。
## Reference