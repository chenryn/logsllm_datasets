m=video 0 RTP/AVP 96
b=AS:79
a=3GPP-Adaptation-Support:1
a=rtpmap:96 X-SV3V-ES/90000
a=control:trackID=1
m=audio 0 RTP/AVP 97
b=AS:14
a=3GPP-Adaptation-Support:1
a=rtpmap:97 X-QDM/22050/2
a=control:trackID=2
a=x-bufferdelay:4.97
9955336633cc0022..iinndddd 5566 11//2255//0099 44::3399::4455 PPMM
Chapter 2 ■ Mac OS X Parlance 57
Next the client attempts to set up for the fi rst track.
SETUP rtsp://192.168.1.182/test.sdp/trackID=1 RTSP/1.0
CSeq: 2
Transport: RTP/AVP;unicast;client_port=6970-6971
x-retransmit: our-retransmit
x-dynamic-rate: 1
x-transport-options: late-tolerance=2.384000
User-Agent: QuickTime/7.4.1 (qtver=7.4.1;cpu=IA32;os=Mac 10.5.2)
Accept-Language: en-US
After some negotiations back and forth where the server issues OPTIONS
headers, the server fi nally responds with an OK and lists all of the necessary
parameters, such as port numbers and session IDs.
RTSP/1.0 200 OK
Server: QTSS/6.0.3 (Build/526.3; Platform/MacOSX; Release/Darwin
Streaming Server; State/Development; )
Cseq: 3
Session: 2239848818749704366
Cache-Control: no-cache
Date: Wed, 09 Jul 2008 15:19:11 GMT
Expires: Wed, 09 Jul 2008 15:19:11 GMT
Transport: RTP/AVP;unicast;source=192.168.1.182;client_port=6972-
6973;server_port=6970-6971
x-Transport-Options: late-tolerance=2.384000
x-Retransmit: our-retransmit
x-Dynamic-Rate: 1
The client can now begin playing the media.
PLAY rtsp://192.168.1.182/test.sdp RTSP/1.0
CSeq: 4
Range: npt=0.000000-
x-prebuffer: maxtime=2.000000
x-transport-options: late-tolerance=10
Session: 2239848818749704366
User-Agent: QuickTime/7.4.1 (qtver=7.4.1;cpu=IA32;os=Mac 10.5.2)
At this point, the media server begins streaming the actual contents of the
media to the client via RTP over UDP. The client can control this by using Real-
time Transport Control Protocol (RTCP). After the viewer fi nishes watching
the media, they may choose to pause or tear down the connection. Below is the
back-and-forth between client and server.
PAUSE rtsp://192.168.1.182/test.sdp RTSP/1.0
CSeq: 6
9955336633cc0022..iinndddd 5577 11//2255//0099 44::3399::4455 PPMM
58 Part I ■ Mac OS X Basics
Session: 2239848818749704366
User-Agent: QuickTime/7.4.1 (qtver=7.4.1;cpu=IA32;os=Mac 10.5.2)
RTSP/1.0 200 OK
Server: QTSS/6.0.3 (Build/526.3; Platform/MacOSX; Release/Darwin
Streaming Server; State/Development; )
Cseq: 6
Session: 2239848818749704366
TEARDOWN rtsp://192.168.1.182/test.sdp RTSP/1.0
CSeq: 7
Session: 2239848818749704366
User-Agent: QuickTime/7.4.1 (qtver=7.4.1;cpu=IA32;os=Mac 10.5.2)
RTSP/1.0 200 OK
Server: QTSS/6.0.3 (Build/526.3; Platform/MacOSX; Release/Darwin
Streaming Server; State/Development; )
Cseq: 7
Session: 2239848818749704366
Connection: Close
With the history of vulnerabilities in the handling of RTSP, it’s worth your
time to become familiar with this protocol. Your knowledge can be leveraged for
fuzzing or reverse engineering. As we did for .mov fi les, let’s use our knowledge
of the protocol to fi nd some important parts of the QuickTime binaries.
First we must fi nd the library (or application) that contains the RTSP parsing
code. For this, select something from the protocol you wouldn’t expect to see
anywhere else—for example, the term TEARDOWN. Trying to grep for this word
in the libraries that QuickTime Player is linked to, as we did before, fails.
$ otool -L QuickTime\ Player| xargs grep TEARDOWN 2> /dev/null
$
This is because QuickTime Player loads many libraries dynamically at
runtime, including the so-called QuickTime Components. Attaching to a
running QuickTime Player with GDB and issuing the info sharedlibrary
command reveals more of the libraries QuickTime actually uses (others are
loaded on demand).
(gdb) info sharedlibrary
The DYLD shared library state has not yet been initialized.
Requested State Current State
Num Basename Type Address Reason | | Source
| | | | | | | |
1 QuickTime Player - 0x1000 exec Y Y
/Applications/QuickTime Player.app/Contents/MacOS/QuickTime Player
(offset 0x0)
9955336633cc0022..iinndddd 5588 11//2255//0099 44::3399::4455 PPMM
Chapter 2 ■ Mac OS X Parlance 59
2 dyld - 0x8fe00000 dyld Y Y
/usr/lib/dyld at 0x8fe00000 (offset 0x0) with prefix “__dyld_”
3 AppKit F 0x95255000 dyld Y Y
/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit at
0x95255000 (offset -0x6adab000)
4 ApplicationServices F 0x904ac000 dyld Y Y
/System/Library/Frameworks/ApplicationServices.framework/Versions/A/
ApplicationServices at 0x904ac000 (offset -0x6fb54000)
5 Carbon F 0x90f06000 dyld Y Y
/System/Library/Frameworks/Carbon.framework/Versions/A/Carbon at
0x90f06000 (offset -0x6f0fa000)
…
126 ApplePixletVideo - 0x173fa000 dyld Y Y
/System/Library/QuickTime/ApplePixletVideo.component/Contents/MacOS/
ApplePixletVideo at 0x173fa000 (offset 0x173fa000)
127 RawCamera B 0x175d9000 dyld Y Y
/System/Library/CoreServices/RawCamera.bundle/Contents/MacOS/RawCamera
at 0x175d9000 (offset 0x175d9000)
128 QuickTimeImporters - 0x96120000 dyld Y Y
/System/Library/QuickTime/QuickTimeImporters.component/Contents/MacOS/
QuickTimeImporters at 0x96120000 (offset -0x69ee0000)
129 Unicode Encodings B 0x155ce000 dyld Y Y
/System/Library/TextEncodings/Unicode Encodings.bundle/Contents/MacOS/
Unicode Encodings at 0x155ce000 (offset 0x155ce000)
In this case there are 129 libraries loaded within the QuickTime process! The
RTSP code could be located in any one of them (or any combination of them).
Using your knowledge of the protocol, you can easily fi nd at least one that
contains some RTSP processing code:
$ find -X /System/Library/ -type f 2>/dev/null | grep ‘Contents/MacOS’ |
xargs grep TEARDOWN 2> /dev/null
Binary file
/System/Library//QuickTime/QuickTimeStreaming.component/Contents/MacOS
/QuickTimeStreaming matches
This could have been done with a simple grep, but the preceding command
executes faster. Firing up IDA Pro and loading this library quickly reveals por-
tions of the executable that deal with RTSP.
Following the cross-references (DATA and CODE) from the string
“TEARDOWN” leads to the call chain in Figure 2-17.
The QuickTime vulnerability (CVE-2007-6166) in the RTSP Content-Type
handling took place in a memory copy within the EngineNotifi cationProc.
Therefore, by knowing only a little about the protocol, it is possible to zero in
on the portions of the binary that process the protocol. There will be more on
exploiting this particular RTSP bug in Chapter 10, “Real-World Exploits,” and
more on reverse engineering in Chapter 6, “Reverse Engineering.”
9955336633cc0022..iinndddd 5599 11//2255//0099 44::3399::4455 PPMM
60 Part I ■ Mac OS X Basics
Figure 2-16: IDA Pro shows many important constants from the RTSP protocol and
where they are used in the binary.
EngineNotificationProc
MediaCondNotificationProc
RTSPEngine_SendRequest
“TEARDOWN”
Figure 2-17: Following cross-references from the “TEARDOWN” string leads to the
EngineNotificationProc function, among others.
9955336633cc0022..iinndddd 6600 11//2255//0099 44::3399::4455 PPMM
Chapter 2 ■ Mac OS X Parlance 61
Conclusion
Mac OS X uses a variety of Internet protocols and fi le formats. Most of these
are the same as you would fi nd in a Windows, Linux, or Solaris environment.
Nevertheless, Mac OS X does use a few Apple-developed or not-very-common
protocols and fi le formats. This chapter looked at a few of these, including
Bonjour, the QuickTime fi le format, and RTSP. It then showed how knowing
the protocol or fi le format can help you fi nd which libraries are utilized by Mac
OS X to process those protocols.
References
http://zeroconf.org
http://www.multicastdns.org/
http://files.multicastdns.org/draft-cheshire-dnsext-multi-
castdns.txt
http://www.mactech.com/articles/mactech/Vol.21/21.11/
AutomaticServiceDirectory/index.html
http://www.phrack.org/issues.html?issue=64&id=11
http://www.dns-sd.org/
http://tools.ietf.org/html/rfc2326
http://sourceforge.net/projects/pyzeroconf
http://developer.apple.com/documentation/QuickTime/QTFF/
qtff.pdf
http://www.cs.columbia.edu/~hgs/teaching/ais/slides/2003/
RTSP.pdf
http://projects.info-pull.com/moab/MOAB-01-01-2007.html
http://www.us-cert.gov/cas/techalerts/TA07-334A.html
http://aluigi.altervista.org/adv/quicktimebof-adv.txt
http://bardissi.wordpress.com/2008/01/11/zero-day-rtsp-hole-
menaces-quicktime-again/
http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6166
9955336633cc0022..iinndddd 6611 11//2255//0099 44::3399::4466 PPMM
9955336633cc0022..iinndddd 6622 11//2255//0099 44::3399::4466 PPMM
CHAPTER
3
Attack Surface
When looking for vulnerabilities or trying to secure a system, the fi rst step
is always to consider what parts of the system are exposed to attackers. This
exposed part of a system is called the attack surface. In this chapter you will learn
to look at the Mac OS X system and determine the code available to attackers,
including attackers able to send packets to the system in question (server-side
attacks) as well as attackers who can convince a Mac OS X user to connect to
them with some piece of software (client-side attacks). Special consideration will
be given to applications and pieces of the operating system that are exposed
out of the box or by default in Mac OS X.
Searching the Server Side
There are many interesting services and listening ports on Mac OS X Server.
Because so few computers in the world are running this operating system,
however, this book will stick to looking at the attack surface of the standard
Mac OS X.
At the lowest level, Mac OS X processes network traffi c. That is to say, there
may be bugs lurking in the IP stack in the operating system. Out of the box,
Mac OS X consumes TCP, UDP, ICMP, and other types of packets. Since this
low-level code is based on FreeBSD, it will probably be tough to fi nd a vulner-
ability in it, but you never know. Besides the wired protocol stack, there are
63
9955336633cc0033..iinndddd 6633 11//2255//0099 44::4400::2244 PPMM
64 Part I ■ Mac OS X Basics
also the drivers associated with Bluetooth and the wireless card. The associ-
ated code was all written by Apple, so perhaps there are vulnerabilities to fi nd
in it. Recall the big 2006 scandal in which David Maynor and Johnny “Cache”
Ellch allegedly found some bugs in the MacBook wireless drivers that allowed
them to take over any MacBook remotely. While the validity of this story was
never confi rmed, the best thing about attacking at these lowest levels is that if
it works, you automatically get root.
Since not everyone is into kernel-level bugs and exploits, the more obvious
place to look is at the applications that run in Mac OS X. In other words, look for
the open TCP and UDP ports and determine what applications are associated
with them. Out of the box, not many things are exposed to remote attackers.
The command in the following code snippet will list the processes that are
listening by default.
$ sudo lsof -P | grep IPv | grep -v localhost
ntpd 14 root 20u IPv4 0t0 UDP *:123
ntpd 14 root 21u IPv6 0t0 UDP *:123
ntpd 14 root 26u IPv4 0t0 UDP 192.168.1.4:123
mDNSRespo 21 _mdnsresponder 7u IPv4 0t0 UDP *:5353
mDNSRespo 21 _mdnsresponder 8u IPv6 0t0 UDP *:5353
configd 33 root 8u IPv4 0t0 UDP *:*
configd 33 root 11u IPv6 0t0 ICMPV6 *:*
SystemUIS 87 cmiller 9u IPv4 0t0 UDP *:*
cupsd 601 root 9u IPv4 0t0 UDP *:631
By examining the output, you can observe there are no open TCP ports. There
are three open UDP ports, however, which have ntpd, mDNSResponder, and
cupsd listening, respectively. Confi gd and SystemUIServer are not bound to
any particular port. The Network Time Protocol daemon, ntpd, is a well-known
open-source server. cupsd is the daemon responsible for printing on many UNIX
systems. It too is a well-known open-source server; however, the Common Unix
Printing System (CUPS) has a long history of security bugs. Looking closer at
the lsof output in the code example shows that cupsd is listening only on the
external interface on UDP port 631. This implies that only a small subset of the
functionality of CUPS is exposed by default (for instance, the administrative
web interface is not accessible). The remaining service, mDNSResponder, is the
only one of the three that is written by Apple and not widely used.
Because mDNSResponder is the only Apple-written daemon that processes
packets out of the box, the previous chapter looked briefl y at the protocol used by
it, as well as some of the source code from it. Apple is committed to having Bonjour
running out of the box on their systems, but they have done what they can to mini-
mize the resulting exposure. First, Bonjour doesn’t run as root, but rather as the
unprivileged _mdnsresponder user. Even more critically, though, this program is
run within a tightly controlled sandbox. ntpd is also run in a sandbox. (Curiously,
cupsd is not.) The following is the sandbox fi le for mDNSResponder.
9955336633cc0033..iinndddd 6644 11//2255//0099 44::4400::2255 PPMM
Chapter 3 ■ Attack Surface 65
(version 1)
; WARNING: The sandbox rule capabilities and syntax used in this file
are currently an
; Apple SPI (System Private Interface) and are subject to change at any
time without notice.
; Apple may in future announce an official public supported sandbox API,
but until then Developers
; are cautioned not to build products that use or depend on the sandbox
facilities illustrated here.
; Use “debug all” to log all operations examined by seatbelt, whether
allowed or not.
; Use “debug deny” to log only operations that are denied by seatbelt
; to discover what specific attempted operation is causing an exception.
;(debug all)
(debug deny)
; To help debugging, “with send-signal SIGFPE” will trigger a fake
floating-point exception,
; which will crash the process and show the call stack leading to the
offending operation.
; For the shipping version “deny” is probably better because it vetoes
the operation
; without killing the process.
(deny default)
;(deny default (with send-signal SIGFPE))
; Special exception: “send-signal” command does not apply to the mach-*
operations,
; so for those we have to use a plain unadorned “deny” instead
; (which means we may not get any notification of unintentional mach-*
denials)
(deny mach-lookup)
(deny mach-priv-host-port)
; Mach communications
; These are needed for things like getpwnam, hostname changes, &
keychain
(allow mach-lookup (global-name
“com.apple.bsd.dirhelper”
“com.apple.distributed_notifications.2”
“com.apple.ocspd”
“com.apple.mDNSResponderHelper”
“com.apple.SecurityServer”
“com.apple.SystemConfiguration.configd”
“com.apple.system.DirectoryService.libinfo_v1”
“com.apple.system.notification_center”))
9955336633cc0033..iinndddd 6655 11//2255//0099 44::4400::2255 PPMM
66 Part I ■ Mac OS X Basics
; Rules to allow the operations mDNSResponder needs start here
(allow network*) ; Allow networking, including
Unix Domain Sockets
(allow sysctl-read) ; To get hardware model
information
(allow file-read-metadata) ; Needed for dyld to work