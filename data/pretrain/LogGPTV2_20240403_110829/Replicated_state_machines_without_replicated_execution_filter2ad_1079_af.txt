In this experiment, the prover processes about 0.5 million
ERC-20 transfer transactions (in batches where each batch
is of size 1,100 transactions). The prover then produces a
πaudit by performing a linear scan over the entire state, which
in our workload is about ≈ 175,000 key-value tuples (i.e.,
account balances); the prover uses a chunk size of 12,288
tuples to produce πaudit in parallel (§3.2). The prover also
produces a πΔ, which in our experiment emits the entire
state (the chunk size here is 450 state changes). We pick
these parameters to reduce the prover’s and veriﬁer’s costs via
aggressive batching and to ensure that each of these proofs can
be veriﬁed with < 8·106 gas. We measure the prover’s time to
produce these proofs and state changes and then calculate the
total machine cost to run the prover. We also run the veriﬁer
as a smart contract and measure the veriﬁer’s costs, in terms
of gas, to verify these proofs and state changes.
Figure 9 depicts our results. The per-transaction gas costs
of Piperine’s veriﬁer are lower than the baseline by ≈ 5.4×.
The USD cost of Piperine’s prover is ≈ 250× smaller than
the USD cost of Piperine’s veriﬁer, so the 5.4× saving in gas
translates directly into a similar savings in USD terms.
Note that the prover’s cost to produce πaudit depends only
on the size of the state whereas the cost to process trans-
actions and to produce πΔ scale linearly in the number of
transactions. In the above experiment, πaudit is produced only
after processing 5 · 105 transactions, but on end-to-end per-
transaction costs, it accounts for only 0.09% and 0.03% of
the overall USD and network costs respectively, so producing
πaudit more frequently does not substantially affect our results.
Transaction sizes and network costs. As in the prior sub-
section, Piperine reduces the size of transactions by ≈ 2.7×.
We note that in Piperine the size of a transaction is dominated
by a single hash and the associated state changes, so it is
insensitive to the size of arguments to a smart contract’s API
or Ethereum’s digital signatures. Whereas, for an on-chain
contract in Ethereum, the size of transactions is dominated
by signatures and call arguments. Furthermore, as noted in
Section 4, Ethereum’s blocks are limited by the scarce supply
computation costs
instances
(#)
batch Ψtransfer 512
chunk Ψaudit
15
chunk ΨΔ
389
Piperine (/txn)
baseline (/txn)
prover
(s)
677.79
605.93
60.67
0.67
0
veriﬁer
(gas)
5561726
293377
6448764
9518
51668
total
(USD)
$5.6
$0.33
$6.44
0.96¢
5.17¢
network
(bytes)
35888
720
43856
62.9
170
FIGURE 9—The costs of the prover, the veriﬁer, and the baseline
along with network costs under Piperine and the baseline. As noted,
we assume 106 gas costs $1; the prover’s costs are based on a ma-
chine cost of 20.9¢/hour as reported by the cloud provider.
of gas, so Piperine’s reduction in per-transaction gas directly
translates to an increased number of transactions in each block
(improving Ethereum’s throughput). While Ethereum can
pack ≈ 150 ERC-20 transactions/block, Piperine-enhanced
ERC-20 can pack ≈ 850 transactions/block.
7 Related work
A set of works achieve higher throughput on blockchains by
changing the underlying consensus protocol, assumptions,
or guarantees. Bitcoin-NG [41] increases Bitcoin’s through-
put by using proof-of-work solely for leader election, whilst
enabling the leader to approve transactions at a higher rate.
However, this approach is vulnerable to double spending
in the short term by a non-rational malicious leader. Byz-
coin [50] strengthens Bitcoin-NG by electing a quorum of
nodes that in turn use PBFT [29], but it requires a super
majority of those elected nodes to be honest. Algorand [46]
selects a committee, as in Byzcoin, but using light-weight
veriﬁable random function, instead of proof-of-work. Un-
like Byzcoin, it assumes that the majority of currency in the
system is owned by honest nodes. The latter comes with its
own issues [42]. Instead of the randomized committee se-
lection, Arbitrum [48] allows parties to manually choose a
set of managers on a per-contract basis to monitor for cor-
rect execution. The blockchain accepts state transitions if
they are endorsed either by all the managers, or by one of
them and not disputed later. This requires active monitoring,
or trusting managers. A similar optimistic approach is fol-
lowed in other works [5, 44, 68, 78]. Other approaches for
accelerating blockchains include sharding [7, 51, 59, 84, 88],
multi-chaining [56, 77], off-chain state channels [39, 63], pay-
ment channels and networks [37, 60, 63, 69], and the use of
trusted execution environments [30, 58] (see a position pa-
per [36] for an overview). We highlight that Piperine operates
at a different level than these systems and can be used in
combination with any of them to further increase throughput
and achieve lower per-transaction costs.
Zerocash [14], Hawk [52], and Zexe [22] use proof ma-
chinery similar to Piperine’s, but they primarily focus on
privacy of transactions, rather than system scalability. Hawk
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:37:25 UTC from IEEE Xplore.  Restrictions apply. 
130
in particular relies on a manager to execute all the contract
computations and lacks mechanisms for state reconstruction,
which can lead to degraded performance and hindered live-
ness. Zerocash does not suffer from such liveness issues as it
does not rely on a manager (each user acts as a manager of
its own state) but supports only payment transactions. Zexe
extends Zerocash to support a richer model of ofﬂine com-
putation. Although, the on-chain cost of verifying a proof is
independent of the ofﬂine computation, it does not demon-
strate improved blockchain throughput or lower transaction
costs. Zether [28] offers privacy for amounts in a transaction
using commitments and range proofs. ZoKrates [40] offers
a programming toolchain similar to Piperine to support off-
blockchain computation with a veriﬁer running on Ethereum.
However, ZoKrates does not provide a veriﬁable storage prim-
itive nor guarantees liveness for off-chain state.
Unlike a traditional blockchain that increases in size over
time, Coda [61] proposes a constant-sized blockchain that
maintains a single Merkle root of the current state, using
recursive proofs [17]. Unfortunately, Coda lacks key liveness
properties: one cannot recover state or update Merkle proofs
from the blockchain information alone.
In concurrent work, StarkDEX [12] and StarkPay [23] pro-
pose a solution that is similar in spirit, yet qualitatively dif-
ferent from Piperine. In these proposals, the veriﬁer stores a
Merkle root of the state, and the prover transitions the ver-
iﬁer’s state by supplying a new Merkle root along with a
proof. This approach does not satisfy liveness as it lacks a
mechanism for an arbitrary entity to reconstruct the inter-
nal state of the system (i.e., the prover is trusted for data
availability). They allude to a future mechanism to “freeze”
the system when the prover fails, and in that circumstance,
clients can regain custody of their assets by providing suitable
Merkle proofs. However, for a client to construct such Merkle
proofs, the prover must be modiﬁed to produce a list of state
changes during transaction execution and those changes must
be persisted reliably (e.g., as in Piperine). In terms of mecha-
nisms, Piperine relies on the Groth16 proof system [47] for
proof generation and on set data structures for state, whereas
StarkDEX and StarkPay use zkSTARKs [13] and Merkle
trees, respectively. Prior performance reports [73, 82, 87]
show that both mechanisms employed by Piperine achieve
signiﬁcantly lower costs for the prover.
Unlike Stark-based proposals, Rollup [1, 26, 27, 85], an
ongoing project in the Ethereum community to build an off-
chain payment service, does not suffer from aforementioned
liveness issues. However, like Stark-based proposals, it relies
on Merkle trees as a storage primitive whereas Piperine em-
ploys set data structures; the latter enables concurrent transac-
tion processing and cheaper storage operations (§2). Based on
prior performance reports [73], this means Piperine’s prover
is cheaper than Rollup’s prover by small constant factors to
several orders of magnitude (depending on the hash function
employed by Rollup). This gap widens for state machines that
are more complex than a payment service.
Very recently, Ozdemir et al. [65] describe a new storage
primitive based on set accumulators for building veriﬁable
state machines. Unlike Piperine’s set-based storage, it does
not require the prover to produce a periodic πaudit (§2). How-
ever, with their primitive, each storage operation requires a
higher number of algebraic constraints than Piperine (small
constant factors depending on the batch size).
8 Discussion
Trusted setup. Piperine employs a proof machinery [47]
that requires a trusted setup: a trusted party must create cryp-
tographic material that depends on Ψ but not on inputs or
outputs to Ψ. Such a trusted setup can be executed by a
set of parties in a distributed protocol where at most one
party needs to be honest [16]. Designing an efﬁcient proof
machinery without trusted setup is a topic of ongoing re-
search [13, 31, 72, 82]; we plan to explore such a proof ma-
chinery in Piperine in the future.
Reducing the costs of the proof machinery further. In the
context of blockchains, we can drive down the cost of the
Piperine veriﬁer further by using an inexpensive hash function
(e.g., SHA-256). However, as discussed earlier, this increases
the prover’s costs by orders of magnitude. But, one can reduce
the prover’s monetary costs using GPU clusters, or serverless
computing, which offer cheaper computing cycles per USD.
9 Summary
We began this project with the following question: can we
reduce end-to-end costs in large-scale replicated systems by
delegating state machine executions? Our system, Piperine,
offers an afﬁrmative answer. Speciﬁcally, Piperine provides
a generic mechanism to reduce CPU and network costs of
a given RSM—under certain operating conditions about the
number of nodes and complexity of the delegated state ma-
chine. Furthermore, Piperine offers the ﬁrst mechanism to
execute transactions concurrently in an RSM built under an
open, permissionless model. Finally, Piperine demonstrates
the ﬁrst large-scale application of cryptographic proof ma-
chinery to reduce costs in a real-world system. As a result of
these, we believe this work represents progress.
Acknowledgments. We thank Sebastian Angel, Riad Wahby, and
the anonymous S&P reviewers for helpful comments that signiﬁ-
cantly improved the presentation of this work. Part of this work was
performed during Kirill Nikitin’s internship at Microsoft Research.
References
[1] Ethereum Roadmap. ZK-Rollups.
https://docs.ethhub.io/ethereum-roadmap/layer-2-
scaling/zk-rollups/.
[2] Ganache. https://truffleframework.com/ganache.
[3] Web3.py.
https://web3py.readthedocs.io/en/stable/.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:37:25 UTC from IEEE Xplore.  Restrictions apply. 
131
[4] STARK-friendly hash challenge.
[19] D. J. Bernstein, P. Birkner, M. Joye, T. Lange, and C. Peters.
https://starkware.co/hash-challenge/, Aug. 2019.
Twisted Edwards curves. In AFRICACRYPT, 2008.
[5] J. Adler. Minimal viable merged consensus.
https://ethresear.ch/t/minimal-viable-merged-
consensus/5617, June 2019.
[6] M. Ajtai. Generating hard instances of lattice problems
(extended abstract). In Proceedings of the ACM Symposium
on Theory of Computing (STOC), pages 99–108, 1996.
[7] M. Al-Bassam, A. Sonnino, S. Bano, D. Hrycyszyn, and
G. Danezis. Chainspace: A sharded smart contracts platform.
In Proceedings of the Network and Distributed System
Security Symposium (NDSS), 2018.
[8] M. Albrecht, L. Grassi, C. Rechberger, A. Roy, and T. Tiessen.
MiMC: Efﬁcient encryption and cryptographic hashing with
minimal multiplicative complexity. In Proceedings of the
International Conference on the Theory and Application of
Cryptology and Information Security (ASIACRYPT), 2016.
[9] E. Androulaki, A. Barger, V. Bortnikov, C. Cachin,
K. Christidis, A. D. Caro, D. Enyeart, C. Ferris, G. Laventman,
Y. Manevich, S. Muralidharan, C. Murthy, B. Nguyen,
M. Sethi, G. Singh, K. Smith, A. Sorniotti, C. Stathakopoulou,
M. Vukolic, S. W. Cocco, and J. Yellick. Hyperledger fabric:
A distributed operating system for permissioned blockchains.
In Proceedings of the ACM European Conference on
Computer Systems (EuroSys), pages 30:1–30:15, 2018.
[10] A. Arasu, K. Eguro, R. Kaushik, D. Kossmann, P. Meng,
V. Pandey, and R. Ramamurthy. Concerto: A high
concurrency key-value store with integrity. In Proceedings of
the ACM International Conference on Management of Data
(SIGMOD), 2017.
[11] M. Bellare and D. Micciancio. A new paradigm for
collision-free hashing: Incrementality at reduced cost. In
Proceedings of the International Conference on the Theory
and Applications of Cryptographic Techniques
(EUROCRYPT), 1997.
[12] E. Ben-Sasson. The STARK truth about DEXes. Stanford
Blockchain Conference, 2019.
[13] E. Ben-Sasson, I. Bentov, Y. Horesh, and M. Riabzev. Scalable
zero knowledge with no trusted setup. In Proceedings of the
International Cryptology Conference (CRYPTO), Aug. 2019.
[14] E. Ben-Sasson, A. Chiesa, C. Garman, M. Green, I. Miers,
E. Tromer, and M. Virza. Zerocash: Decentralized anonymous
payments from Bitcoin. In Proceedings of the IEEE
Symposium on Security and Privacy (S&P), 2014.
[15] E. Ben-Sasson, A. Chiesa, D. Genkin, E. Tromer, and
M. Virza. SNARKs for C: Verifying program executions
succinctly and in zero knowledge. In Proceedings of the
International Cryptology Conference (CRYPTO), Aug. 2013.
[16] E. Ben-Sasson, A. Chiesa, M. Green, E. Tromer, and M. Virza.
Secure sampling of public parameters for succinct zero