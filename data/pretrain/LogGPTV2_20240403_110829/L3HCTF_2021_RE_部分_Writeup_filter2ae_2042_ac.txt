      return decoder
    end
          local DEFAULT_ENCODER = (base64.makeencoder)()
          local DEFAULT_DECODER = (base64.makedecoder)()
          local char, concat = string.char, table.concat
          base64.encode = function(str, encoder, usecaching)
      -- function num : 0_4 , upvalues : DEFAULT_ENCODER, char, extract, concat
      if not encoder then
        encoder = DEFAULT_ENCODER
      end
      local t, k, n = {}, 1, #str
      local lastn = n % 3
      local cache = {}
      for i = 1, n - lastn, 3 do
        local a, b, c = str:byte(i, i + 2)
        local v = a * 65536 + b * 256 + c
        local s = nil
        if usecaching then
          s = cache[v]
          if not s then
            s = char(encoder[extract(v, 18, 6)], encoder[extract(v, 12, 6)], encoder[extract(v, 6, 6)], encoder[extract(v, 0, 6)])
            cache[v] = s
          end
        else
          s = char(encoder[extract(v, 18, 6)], encoder[extract(v, 12, 6)], encoder[extract(v, 6, 6)], encoder[extract(v, 0, 6)])
        end
        t[k] = s
        k = k + 1
      end
      if lastn == 2 then
        local a, b = str:byte(n - 1, n)
        local v = a * 65536 + b * 256
        t[k] = char(encoder[extract(v, 18, 6)], encoder[extract(v, 12, 6)], encoder[extract(v, 6, 6)], encoder[64])
      else
        do
          do
            if lastn == 1 then
              local v = str:byte(n) * 65536
              t[k] = char(encoder[extract(v, 18, 6)], encoder[extract(v, 12, 6)], encoder[64], encoder[64])
            end
            return concat(t)
          end
        end
      end
    end
          base64.decode = function(b64, decoder, usecaching)
      -- function num : 0_5 , upvalues : DEFAULT_DECODER, _ENV, char, extract, concat
      if not decoder then
        decoder = DEFAULT_DECODER
      end
      local pattern = "[^%w%+%/%=]"
      do
        if decoder then
          local s62, s63 = nil, nil
          for charcode,b64code in pairs(decoder) do
            if b64code == 62 then
              s62 = charcode
            else
              if b64code == 63 then
                s63 = charcode
              end
            end
          end
          pattern = ("[^%%w%%%s%%%s%%=]"):format(char(s62), char(s63))
        end
        b64 = b64:gsub(pattern, "")
        if usecaching then
          local cache = {}
        end
        local t, k = {}, 1
        local n = #b64
        local padding = (b64:sub(-2) == "==" and 2) or (b64:sub(-1) == "=" and 1) or 0
        for i = 1, padding > 0 and n - 4 or n, 4 do
          local a, b, c, d = b64:byte(i, i + 3)
          local s = nil
          if usecaching then
            local v0 = a * 16777216 + b * 65536 + c * 256 + d
            s = cache[v0]
            if not s then
              local v = decoder[a] * 262144 + decoder[b] * 4096 + decoder[c] * 64 + decoder[d]
              s = char(extract(v, 16, 8), extract(v, 8, 8), extract(v, 0, 8))
              cache[v0] = s
            end
          else
            do
              do
                do
                  local v = decoder[a] * 262144 + decoder[b] * 4096 + decoder[c] * 64 + decoder[d]
                  s = char(extract(v, 16, 8), extract(v, 8, 8), extract(v, 0, 8))
                  t[k] = s
                  k = k + 1
                  -- DECOMPILER ERROR at PC143: LeaveBlock: unexpected jumping out DO_STMT
                  -- DECOMPILER ERROR at PC143: LeaveBlock: unexpected jumping out DO_STMT
                  -- DECOMPILER ERROR at PC143: LeaveBlock: unexpected jumping out IF_ELSE_STMT
                  -- DECOMPILER ERROR at PC143: LeaveBlock: unexpected jumping out IF_STMT
                end
              end
            end
          end
        end
        if padding == 1 then
          local a, b, c = b64:byte(n - 3, n - 1)
          local v = decoder[a] * 262144 + decoder[b] * 4096 + decoder[c] * 64
          t[k] = char(extract(v, 16, 8), extract(v, 8, 8))
        else
          do
            if padding == 2 then
              local a, b = b64:byte(n - 3, n - 2)
              local v = decoder[a] * 262144 + decoder[b] * 4096
              t[k] = char(extract(v, 16, 8))
            end
            do
              return concat(t)
            end
          end
        end
      end
    end
          local strf = string.format
          local byte, char = string.byte, string.char
          local spack, sunpack = string.pack, string.unpack
          local app, concat = table.insert, table.concat
          local stohex = function(s, ln, sep)
      -- function num : 0_6 , upvalues : strf, byte, concat
      if #s == 0 then
        return ""
      end
      if not ln then
        return s:gsub(".", function(c)
        -- function num : 0_6_0 , upvalues : strf, byte
        return strf("%02x", byte(c))
      end
    )
      end
      if not sep then
        sep = ""
      end
      local t = {}
      for i = 1, #s - 1 do
        t[#t + 1] = strf("%02x%s", s:byte(i), i % ln == 0 and "\n" or sep)
      end
      t[#t + 1] = strf("%02x", s:byte(#s))
      return concat(t)
    end
          local hextos = function(hs, unsafe)
      -- function num : 0_7 , upvalues : _ENV, char
      local tonumber = tonumber
      if not unsafe then
        hs = (string.gsub)(hs, "%s+", "")
        if (string.find)(hs, "[^0-9A-Za-z]") or #hs % 2 ~= 0 then
          error("invalid hex string")
        end
      end
      return hs:gsub("(%x%x)", function(c)
        -- function num : 0_7_0 , upvalues : char, tonumber
        return char(tonumber(c, 16))
      end
    )
    end
          local stx = stohex
          local xts = hextos
          local ROUNDS = 64
          local keysetup = function(key)
      -- function num : 0_8 , upvalues : _ENV, sunpack, ROUNDS
      assert(#key == 16)
      local kt = {0, 0, 0, 0}
      kt[1] = sunpack(">I4I4I4I4", key)
      local skt0 = {}
      local skt1 = {}
      local sum, delta = 0, 2654435769
      for i = 1, ROUNDS do
        skt0[i] = sum + kt[(sum & 3) + 1]
        sum = sum + delta & 4294967295
        skt1[i] = (sum) + kt[((sum) >> 11 & 3) + 1]
      end
      do return {skt0 = skt0, skt1 = skt1} end
      -- DECOMPILER ERROR: 1 unprocessed JMP targets
    end
          local encrypt_u64 = function(st, bu)
      -- function num : 0_9 , upvalues : ROUNDS
      local skt0, skt1 = st.skt0, st.skt1
      local v0, v1 = bu >> 32, bu & 4294967295
      local sum, delta = 0, 2654435769
      for i = 1, ROUNDS do
        v0 = v0 + ((v1 > 5) + v1 ~ skt0[i]) & 4294967295
        v1 = v1 + (((v0) > 5) + (v0) ~ skt1[i]) & 4294967295
      end
      bu = (v0) I4I4I4I4", key)
应该是`luadec`反编译出错了，将其改为：
    kt[1], kt[2], kt[3], kt[4] = sunpack(">I4I4I4I4", key)
运行脚本，得到flag：  
`L3HCTF{20807a82-fcd7-4947-841e-db4dfe95be3e}`
## 总结
题目总体较难，中途不止一次被卡住，还要多学习。