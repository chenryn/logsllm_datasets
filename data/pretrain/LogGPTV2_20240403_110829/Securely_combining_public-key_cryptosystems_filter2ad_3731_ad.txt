vide the adversary with the same answers as D, even though
(like the adversary) it does not know the private keys of D.
We ﬁrst treat the OAEP+ scheme, and then give a sketch
of a proof for general plaintext-aware cryptosystems.
3.4.2 OAEP+
In this section, we prove the security of a combined public-
key scheme using OAEP+ [23]. An instance of the scheme
(cid:1)
uses a trapdoor permutation f , and three functions G, H, H
,
modeled as random oracles. The key generation algorithm
chooses a random trapdoor permutation f , whose inverse,
−1, is the private key. Given a plaintext x, the encryption
f
is performed as follows: (1) A random string r is chosen. (2)
(r||x), and t = H(s)⊕r. (3) Set the
Deﬁne s = (G(r)⊕x)||H
ciphertext to y = f (s||t). To decrypt a ciphertext y, the de-
−1(y), which
cryptor uses the private key to compute x = f
it parses as x = sL||sR||t, and then computes r = H(s) ⊕ t,
(r||x), then x is output
x = G(r)⊕ sL, and c = sR. If c = H
as the cleartext; otherwise the ciphertext is rejected.
(cid:1)
(cid:1)
Relation between keys: Next we prove that it is secure
to use OAEP+ in combination with a signature scheme hav-
−1 as (part of) its private key. This relation completely
ing f
deﬁnes the keys of OAEP+.
Simulating decryptions: The simulator interacts with
an adversary A and observes its behavior. The simulator
observes the lists of queries that A sends to the three func-
tions that are modeled as random oracles, and the answers
that A receives.
(Our proof does not require the simula-
tor to change the oracle responses to these queries.) Let
SG, SH , SH(cid:2) denote these lists. The simulator is required to
decrypt the given ciphertext y. In order to do so it follows
the operation of the decryption oracle deﬁned in Game G3
in [23].
In more detail, the simulator examines all the pairs of
) ⊕
) ∈ SH(cid:2) . For each pair it deﬁnes s
∗
∗
∗
∗
, x
(r
) ⊕ r
∗ ∈ SH it computes t
)||H
∗
∗
(cid:1)
∗
x
∗
and y
as the
decryption. It is proven in [23] that the answers of this ora-
cle are negligibly close to the answers of a decryption oracle
−1 of the scheme. This is
that knows the decryption key f
exactly the property we require of our simulator.
∗
= H(s
∗
= y, it stops and outputs x
∗||x
∗
(r
).
∗||t
= f (s
If s
). If y
= (G(r
∗
∗
3.4.3 Plaintext-Awareness in general
We give a sketch of a proof that a plaintext-aware en-
cryption scheme with private key d can be used safely in
combination with a diﬀerent scheme that uses d as part of
its private key. We describe this for the plaintext-awareness
deﬁnition given in [1], deﬁnition PA2.
Deﬁnition The deﬁnition of plaintext-awareness given
in [1] concerns an adversary B that is given a public key,
an oracle for a hash function H that is used by the encryp-
tion algorithm and is modeled as a random oracle, and an
encryption oracle that provides valid encryptions generated
with H as the hash function (but does not provide the cor-
responding plaintexts).
Let Π = (K, E, D) be an encryption scheme. Let B be an
adversary, and let KE be a “knowledge extractor” algorithm
whose running time is polynomial in the length of its inputs.
We describe an experiment of running B and then KE. Let
k be a positive integer.
1. Fix H as a random function from the domain of all
functions with input and output lengths as required
by the encryption algorithm.
2. Run the key generation algorithm to get (e, d) = K(1k).
3. Run the adversary B and record the following data:
(1) The queries that it makes to H, and the corre-
sponding answers. (2) The answers (ciphertexts) given
by the encryption oracle. (3)The ciphertext y gener-
ated by B. The ciphertext y will be a challenge for
221KE to decrypt. It must hold that y is not among the
answers given by the encryption oracle.
generation oracle with knowledge of the private key of the
signature scheme.
Deﬁne the success probability in this experiment to be
the probability that KE, given as input the key e and the
recorded data, outputs the same answer as a decryption or-
acle (which knows the private key) for the query y. The en-
cryption scheme Π is plaintext-aware if it provides chosen-
plaintext security in the sense of indistinguishability; and
there is a knowledge-extractor KE that, for any feasible ad-
versary B, has success probability negligibly close to 1.
Using a plaintext-aware encryption scheme as the
oracle cryptosystem Consider a plaintext-aware encryp-
tion cryptosystem, Enc, which is used in combination with
a signature scheme Sig. As in Deﬁnition 3, the combined
key-generation algorithm generates the keys ((e, d), (s, v)) so
that (e, d) and (s, v) might be related, but each pair alone is
distributed according to the distribution of the correspond-
ing cryptosystem. (We capture this relation by making the
most diﬃcult assumption for our proof, namely that d is
part of s).
We prove that the use of the plaintext-aware encryption
cryptosystem Enc does not degrade the security of the signa-
ture scheme Sig. We should therefore demonstrate that for
any adversary A that operates against the combined cryp-
tosystem and tries to break Sig, there is an adversary A(cid:1)
that runs against Sig alone and has a success probability
which is at most negligibly worse than the success probabil-
will run A as a black box, and
ity of A. The adversary A(cid:1)
should therefore answer the queries that A generates to a
decryption oracle of Enc.
The setting, including the probability distribution of the
key space, exactly ﬁts the deﬁnition of plaintext-awareness.
A(cid:1)
can therefore run the knowledge extractor KE which pro-
vides answers that are negligibly close to those of a decryp-
tion oracle for Enc. This ensures that the view that A sees
when it is run as a black box by A(cid:1)
is negligibly close to its
view when it runs against the combined scheme.
4. SECURITY IN THE PRESENCE OF SIG-
NATURE SCHEMES
This section describes several public-key signature schemes
that can be used in conjunction with a diﬀerent cryptosys-
tem, typically an encryption scheme, that uses related keys.
We prove that the use of the signature scheme does not af-
fect the security of the other cryptosystem. In other words,
the encryption scheme is the attacked cryptosystem and a
signature scheme is the oracle cryptosystem.
For each of these signature schemes, we specify a com-
bined scheme (as in Deﬁnition 3) by describing an encryp-
tion scheme (or a family of encryption schemes) with re-
lated keys; and we prove, following Deﬁnition 5, that the
combined scheme does not compromise the security of the
encryption scheme being used.
For each scheme we describe the relation that can hold be-
tween the keys of the two schemes without aﬀecting the se-
curity of the encryption scheme. As in §3, the proof method
is to show that an adversary for the encryption scheme gains
nothing by having access to the signature-generation oracle
and asking it to sign arbitrary messages of its choice. This is
demonstrated by constructing a simulator that has exactly
the same information as the adversary, and is able to give
answers that are indistinguishable from those of a signature-
4.1 Results
In the standard model we provide results for the Cramer-
Shoup and the Gennaro-Halevi-Rabin signature schemes. In
the random-oracle world we provide results for the El Gamal
signature scheme, as modiﬁed by Pointcheval and Stern [18]
to obtain security against adaptive chosen-message attacks,
for the RSA based PSS scheme of Bellare and Rogaway [3],
and for the Schnorr signature scheme [21]. The proof for the
Schnorr signature scheme will only be provided in the full
version of this paper, since it is similar to the other proofs
we describe in this section.
An interesting property of our constructions of signature
simulators is that none of the simulators has any knowledge
about any part of the private key of the signature scheme
whose signatures it simulates (in contrast to the simulators
for the encryption schemes in the standard model in §3,
where the simulators had partial knowledge of the private
keys). In the standard model the signature simulators are
able to do their job since the public keys are generated in a
special way that gives the simulators additional knowledge,
while preserving the original distribution of the keys. In the
random oracle model the simulators operate by setting the
output of the random oracle to appropriate values.
4.2 The Cramer-Shoup signature scheme
Cramer and Shoup proposed a signature scheme and proved
it to be secure against adaptive chosen-message attacks in
the standard model, under the strong RSA assumption [8].
The scheme is eﬃcient and does not require the signer to
maintain any state (unlike, e.g., the signature scheme of
Dwork and Naor [11], which is not stateless).
The strong RSA assumption is that given an RSA mod-
ulus n and a random z ∈ (Z/nZ)
∗
, it is infeasible to ﬁnd
r > 1 and y ∈ (Z/nZ)
such that yr = z mod n. The signa-
ture scheme also uses a hash function H which is collision-
intractable. The basic scheme operates as follows:
∗
(cid:1)
(cid:1)
Key generation: An RSA modulus n = pq is chosen (with
), where h, x ∈R
p, q prime). The public key is (n, h, x, e
(cid:1)
QRn (the set of quadratic residues mod n) and e
is a ran-
dom prime of appropriate length (as deﬁned in [8]). The
private key is (p, q).
prime e (cid:13)= e
(cid:1)
an x
tion ye = xhH(x
Signature generation: To sign a message m, a random
(cid:1) ∈ QRn are chosen. Compute
hH(m) mod n, and solve the equa-
(cid:1)
(cid:2)) mod n for y. The signature is (e, y, y
and a random y
satisfying (y
(cid:1)
= x
(cid:2)
)e
(cid:1)
(cid:1)
).
Signature veriﬁcation: Given (e, y, y
(cid:1)
is odd, of the right length, and diﬀerent from e
(cid:1)
compute x
yeh
), ﬁrst check that e
. Then
−H(m) mod n, and check whether x =
(cid:2)
(cid:1)
)e
= (y
(cid:2)) mod n.
−H(x
h
Relation between keys: We show that the Cramer-
Shoup signature scheme with a public key n can be used
in combination with a cryptosystem whose private key in-
cludes the factorization of n.
In the proof, the simulator
must forge signatures without knowing the factorization of
n. Note that the only step in which this knowledge is used
(cid:2)) in order to com-
is the extraction of the eth root of xhH(x
pute y, where e is chosen by the signature generation oracle.
The simulator can therefore deﬁne the other elements of the
public key so as to enable it to compute these roots. This
222can be accomplished in the following way. Suppose that the
simulator expects to be required to compute at most & sig-
natures. In order to compute x and h for the public key it
chooses in advance & random values e1, . . . , e(cid:18), and two ran-
dom values x0, h0 ∈ QRn. It deﬁnes x = xe1···e(cid:1)
mod n and
h = he1···e(cid:1)
as a random prime of
the length required by the original scheme. The public key
is (n, h, x, e
). The key has the same distribution as in the
original scheme, subject to the constraint that n is given.
(cid:1)
mod n. It also chooses e
(cid:1)
0
0
Operation of the simulator: When the simulator is
required to compute the ith signature, it chooses e = ei. It