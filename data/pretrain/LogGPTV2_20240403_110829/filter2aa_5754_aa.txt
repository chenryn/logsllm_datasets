.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLFAQ7 1"
.TH PERLFAQ7 7 "2003-11-25" "perl v5.8.3" "Perl Programmers Reference Guide"
.SH "NAME"
perlfaq7 \- 综合的问题 (2003/07/24 02:17:21)
.SH "DESCRIPTION 描述"
.IX Header "DESCRIPTION"
本节讨论综合的 Perl 语言问题，不适于在其他所有段落中讨论的问题
.Sh "我能拿到 Perl的 BNF/yacc/RE吗？"
.IX Subsection "Can I get a BNF/yacc/RE for the Perl language?"
没有 \s-1BNF\s0, 但是你可以从源代码的 perly.y 文件的 yacc 语法中自行归纳，如果你足够勇敢的话。语法依赖于非常智能的词法分析，因此也要准备好阅读 toke.c。
.PP
用 Chaim Frenkel的话：\*(L"Perl的语法无法被简化到可以用 BNF 表示。解析Perl的工作是分散于 yacc、lexer、烟雾和镜子之间。\*(R"
.Sh "$@%*这些符号是什么意思？我怎么知道何时该使用他们呢？"
.IX Subsection "What are all these $@%&* punctuation signs, and how do I know when to use them?"
它们都是类型限定符号，在 perldata 中详述：
.PP
.Vb 6
\&    $ 标量值，数字，字符串或引用
\&    @ 数组
\&    % 散列，关联数组
\&    & 子程序，也就是函数，过程，方法
\&    * 代表这个符号的所有类型。在版本4中，可以用作指针，但是在新的 perl 中可以只用引用就可以了
.Ve
.PP
有些其他的符号你可能会碰到但却不是指定形态用的有：
.PP
.Vb 2
\&    <> 这是用来从一个文件句柄里输入一份记录
\&    \e 取某样东西的引用
.Ve
.PP
注意  不是用来指定文件类型，亦非此句柄的名字。它只是 将<>这个运算符作用在 FILE这个句柄上。在标量上下文 (scalar context) 中，它自 FILE 把手一次读入一行 (嗯，该说一笔记录，参看 $/)，在序列情境 (list context)下，则一次将 全部的内容读 入。当对档案使用开、关或其它 <>之外的动作、或甚至只是提到把 手时，切记不要使用 <>。下面的用法是正确的：\f(CW\*(C`eof(FH)\*(C'\fR, \f(CW\*(C`seek(FH, 0,
2)\*(C'\fR 以及 \*(L"copying from \s-1STDIN\s0 to \s-1FILE\s0\*(R".
.Sh "字串加引号或使用分号及逗号是否绝对必要/还是完全没必要？"
.IX Subsection "Do I always/never have to quote my strings or use semicolons and commas?"
通常一个没有冠上形态符号的字 (bareword)是不需被纳入引号里的，但在大多数的情况下或许该这么做 (在 \f(CW\*(C`use strict\*(C'\fR 下则是必须的)。但由一个简单的字(不能是一个已定义的副函数之名称)所构成的索引值，和 \f(CW\*(C`=>\*(C'\fR 左端的运算子，都会被视为已纳入引号了：
.PP
.Vb 4
\&    这些                     和这些一样
\&    ------------            ---------------
\&    $foo{line}              $foo{"line"}
\&    bar => stuff            "bar" => stuff
.Ve
.PP
一个区块末端的分号可有可无，一个序列的最后一个逗号亦同。良好的写作风格 (参看perlstyle)中建议除了在单行程式 (one-liners)的情况外都将他们加上去：
.PP
.Vb 2
\&    if ($whoops) { exit 1 }
\&    @nums = (1, 2, 3);
.Ve
.PP
.Vb 7
\&    if ($whoops) {
\&        exit 1;
\&    }
\&    @lines = (
\&        "There Beren came from mountains cold",
\&        "And lost he wandered under leaves",
\&    );
.Ve
.Sh "我如何跳过一些传回值？"
.IX Subsection "How do I skip some return values?"
一种方法是将传回值当作序列来对待，然后用索引来指名其中的某个位置：
.PP
.Vb 1
\&        $dir = (getpwnam($user))[7];
.Ve
.PP
另一种方法就是在等号左端用 undef 作元素：
.PP
.Vb 1
\&    ($dev, $ino, undef, undef, $uid, $gid) = stat($file);
.Ve
.PP
也可以用一个列表片段来仅选择你需要的元素：
.PP
.Vb 1
\&        ($dev, $ino, $uid, $gid) = ( stat($file) )[0,1,4,5];
.Ve
.Sh "我如何暂时滤掉警告讯息？"
.IX Subsection "How do I temporarily block warnings?"
如果正在运行 Perl 5.6.0 或更高版本， \f(CW\*(C`use warnings\*(C'\fR 编用可以对警告如何产生进行很好的控制。参见 perllexwarn 中的细节
.PP
.Vb 4
\&    {
\&        no warnings;          # 暂时关掉警告讯息
\&        $a = $b + $c;         # 我知道这些变数可能未定义
\&    }
.Ve
.PP
如果运行旧版本的 Perl，变量 \f(CW$^W\fR (在 perlvar 中有记载) 控制了这个块的运行时警告：
.PP
.Vb 4
\&    {
\&        local $^W = 0;        # 暂时关掉警告讯息
\&        $a = $b + $c;         # 我知道这些变数可能未定义
\&    }
.Ve
.PP
注意，像所有的标点符号变数一样，目前不能对 \f(CW$^W\fR 用 my()，只能用 local()。
.Sh "什么是一个扩充?"
.IX Subsection "What's an extension?"
一种从 Perl呼叫编译好的 C程式码的方法。阅读 perlxstut是个多了解扩充(extensions)的好方法。
.Sh "为何 Perl运算子的优先顺序和 C的不一样？"
.IX Subsection "Why do Perl operators have different precedence than C operators?"
事实上它们是相同的。所有 Perl自 C借过来的运算子都具备与原来在 C 中相同的优先顺序。问题出在那些 C没有的运算子，特别是那些将其右方一律当成序列情境对待的函数，例如 print, chmod, exec等等。这类的函数被称作序列运算子(\*(L"list operators\*(R")，在 perlop的优先顺序表中就是这么称呼。
.PP
一个常犯的错误像是：
.PP
.Vb 1
\&    unlink $file || die "snafu";
.Ve
.PP
这会被解译器看成是：
.PP
.Vb 1
\&    unlink ($file || die "snafu");
.Ve
.PP
要避免此问题，须加上括号或是用超低优先的 \f(CW\*(C`or\*(C'\fR 运算子：