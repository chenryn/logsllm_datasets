x(cid:48)(cid:104)y (cid:67) e(cid:105) for the array x(cid:48) whose element at index y is replaced
by e. In the assertion case, we collect a veriﬁcation condition
(φ∧¬e) by pairing it with the label l of the assertion to pro-
vide a potentially violating sequence per assertion (line 11
in Algorithm 1). Observe that a VC consists of two parts: a
condition denoting a program state (φ) and a negation of a
safety condition (¬e). An unusual part in the syntax of FOL
is that each atomic formula can be annotated with either a
symbol ◦ or •. We introduce these symbols to simplify con-
straints by differentiating equalities from assignments and
assume statements (Section 3.1.2). These symbols will be
removed before invoking SMT solvers.
Next, we deﬁne T : T → FOL ×℘(L × FOL) → FOL ×
℘(L × FOL), a symbolic executor for a transaction t =
(i, f ,x, (a1,··· ,an)):
T(i, f ,x, (a1,··· ,an))(φ,Π) =
(RENAMEL(φ(cid:48),i),{(l, RENAMEL(F,i) | (l,F) ∈ Π(cid:48)})
where (φ(cid:48),Π(cid:48)) = sp(an) ◦ ··· ◦ sp(a1)(φ ∧ xe = x ∧ ϕ,Π).
RENAMEL is a function for differentiating local variables
with the same names in different transactions. More con-
cretely, RENAMEL renames all free variables in a given for-
mula, except for global variables, primed global variables,
and variables that are already renamed using other transac-
tion identiﬁers while processing previous transactions. For
example, if G = {a} (i.e., a is the only global variable in
a contract), RENAMEL(a(cid:48) = 0 ∧ b = 1 ∧ c(cid:48) = 2, j) outputs
(a(cid:48) = 0∧ b j = 0∧ c(cid:48)
j = 1), where a(cid:48) is not renamed since its
original unprimed version is the global variable a. Observe
that the procedure T proceeds in two steps. Firstly, given a
precondition and label-VC pairs Π, we obtain the postcon-
dition φ(cid:48) and the possibly updated pairs Π(cid:48), by symbolically
executing a1,··· ,an with sp. Secondly, we postprocess φ(cid:48) and
Π(cid:48) with RENAMEL. Note that we have additional precondi-
tions (xe = x and ϕ) in the ﬁrst step. xe = x is a constraint
for retrieving argument values for each transaction, where
xe is an entry-state variable for the formal input parameter
x (i.e., the state of x at the entry of each transaction). ϕ is a
conjunctive formula, which is a Solidity-speciﬁc constraint
for obtaining useful arguments. For example, conjuncts of ϕ
include msg.sender (cid:54)= 0 to avoid obtaining invalid values for
transaction senders. We assume that each conjunct of ϕ is la-
belled with •, to ensure that these constraints are not removed
by our simpliﬁcation technique (Section 3.1.2).
where (State,Π) = T(cid:48)(tn) ◦ ··· ◦ T(cid:48)(t0)((cid:86)
Finally, we deﬁne the procedure GENERATEVC that
performs symbolic execution over a transaction sequence
t0,t1,··· ,tn. GENERATEVC(t0,t1,··· ,tn) outputs (State,Π)
g∈G init(g), /0). A
symbolic executor T(cid:48) for a transaction ti is deﬁned as:
T(cid:48)(ti)(φ(cid:48)(cid:48),Π(cid:48)(cid:48)) =
(cid:26) (φ(cid:48),Π(cid:48))
(φ(cid:48), /0)
if i = n
otherwise
where (φ(cid:48),Π(cid:48)) = T(ti)(φ(cid:48)(cid:48),Π(cid:48)(cid:48)). Note that, given a transaction
sequence, we collect VCs from the last transactions only (i.e.,
when i = n) and do not redundantly collect VCs from prior
transactions, because further explorations of ti (i uint)) vari-
able, and y is an address type variable where addresses are
160-bit expressions in Solidity. Our technique transforms the
formula into its quantiﬁer-free version
x(cid:48)[y] = 0∧ x = x(cid:48)(cid:104)y (cid:67) 10(cid:105)∧¬(x[y] 
mapping(address => uint)), a Solidity developer may be
able to come up with approve function that frequently ap-
pears in ERC20-based token contracts (e.g., Figure 2 and
Figure 3).
i ···tn
i ···tn
i )··· ατ(tn
i )(cid:104)e(cid:105)(cid:104)e(cid:105) ∈(cid:98)T∗ | Ti = t0
Based on the observation, we obtain ﬁnal training corpus Y
i into a
by transforming each transaction sequence Ti = t0
corresponding word sequence:
Y = {(cid:104)s(cid:105)(cid:104)s(cid:105)ατ(t0
i ,i ∈ [1,m]}.
τ : Type → N is a type frequency table that maps each type
to the number of its occurrences from the collected trans-
action sequences {T1,··· ,Tm}. Speciﬁcally, we obtain τ by
counting type frequencies for global variables that are deﬁned
via assignments or used in assume statements within each
transaction in {T1,··· ,Tm}. Using τ, a word map ατ : T →(cid:98)T
abstracts a transaction to a word (an abstract form of a trans-
action), which is deﬁned as follows:
(cid:26) if t = (−, f0,−,−) then (cid:104)i(cid:105)
ατ(t) =
τ(t),U 1
else(cid:104)D1
τ (t),···,Dk
τ (t),···,U k
τ (t),P(t),E(t),X(t)(cid:105).
Note that the set of words (cid:98)T = {(cid:104)s(cid:105),(cid:104)e(cid:105),(cid:104)i(cid:105)} ∪ {0,1}2k+3.
That is, a word w ∈ (cid:98)T is either a pseudo-start word (cid:104)s(cid:105), a
pseudo-end symbol (cid:104)e(cid:105), a constructor word (cid:104)i(cid:105) for abstracting
initial transactions t0, or a boolean vector of 2k + 3 dimen-
sion. Further note that we consider only top k-th ranked types
from τ for generalization (i.e., we use τ as a criterion for iden-
tifying types that are important for abstract representations
of transactions). Let a be a sequence of atomic statements
of a transaction t (i.e., t = (−,−,−,a)). Di
τ (1 ≤ i ≤ k) is a
predicate (1 for true, 0 for false) that checks whether a global
variable, having a top i-th ranked type in τ, is deﬁned via
τ (1 ≤ i ≤ k) is a predicate that checks
assignments in a of t. U i
whether a global variable, having a top i-th ranked type in
τ, is used in assume statements in a. P, E, and X are addi-
tional, Solidity-speciﬁc feature predicates. P checks whether
a function f is annotated with payable keyword. E checks
whether a built-in function that sends Ethers (e.g., transfer)
exists in a. X checks whether a built-in function that destructs
a contract (selfdestruct, suicide) exists in a. Following
the convention of 3-gram models [23], we append pseudo
words (cid:104)s(cid:105)·(cid:104)s(cid:105) at the beginning of each word sequence and
append (cid:104)e(cid:105)·(cid:104)e(cid:105) at the end of each word sequence.
Example 2 Assume k = 2 and τ = [uint (cid:55)→ 10, bool (cid:55)→
3, uint8 (cid:55)→ 1]. Then, the transaction t3 in Example 1 is
represented as (cid:104)1,0,0,1,0,0,0(cid:105), because uint type global
variable is deﬁned (thus the ﬁrst component is set to 1), bool
type global variable is used in assume (thus the fourth com-
ponent is set to 1), and the function incX is not annotated
with payable keyword and does not have statements that
send Ethers or destruct the contract.
Discussion. Let us justify our design choices on the trans-
action representation in more detail. For initial transactions
t0 = (−, f0,−,−), we uniformly abstract them into the special
1368    30th USENIX Security Symposium
USENIX Association
τs and U i
word (cid:104)i(cid:105) for generalization; for virtually all smart contracts,
the main job of the constructor is to initialize global variables,
rather than performing other speciﬁc functionalities. Note
that, for Di
τs, we focus on types of global variables
and ignore types of local variables, because Ethereum smart
contracts are stateful and global states are affected by global
variables only. We consider Di
τs, P, E, and X in the represen-
tation, because they are important clues for understanding
semantic behaviors in Solidity contracts. As an example for
Di
τs, consider a transfer function that is one of the core func-
tions in ERC20 token contracts; it is common for a global
variable of type mapping (address=>uint) to be deﬁned,
because the transfer function is in charge of transferring
tokens from one’s balance to another. We also consider U i
τs
in the representation, because they are important clues for
inferring which transaction may have been called before. For
example, to disprove the assertion at line 17 of incX in Fig-
ure 4, we ﬁrst should set flag to true by invoking setFlag.
3.2.2 Using a Language Model
Let V ⊆(cid:98)T be a vocabulary, a set of known words from training
sentences Y (Section 3.2.1), i.e., V = {wi | w1···wm ∈ Y,i ∈
[1,m]}. Note that we can now compute vulnerable probabili-
ties using n-gram counts from Y . Guiding symbolic execution
with a language model is a two-step process.
Firstly, for a given transaction sequence t0···tn, we trans-
late the transaction sequence into a word sequence (cid:104)s(cid:105)·(cid:104)s(cid:105)·
w0···wn where wi = α(cid:48)
word map for handling unknown words:
τ : T →(cid:98)T is an extended
τ(ti). Here, α(cid:48)
(cid:26) ατ(t)
α(cid:48)
τ(t) =
argmaxw∈V similarity(ατ(t),w)
if ατ(t) ∈ V
if ατ(t) (cid:54)∈ V
where similarity(w1,w2) is a function that heuristically com-
putes the similarity between words: