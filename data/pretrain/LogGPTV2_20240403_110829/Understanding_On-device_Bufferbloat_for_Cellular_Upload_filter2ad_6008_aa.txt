title:Understanding On-device Bufferbloat for Cellular Upload
author:Yihua Guo and
Feng Qian and
Qi Alfred Chen and
Zhuoqing Morley Mao and
Subhabrata Sen
Understanding On-device Bufferbloat
For Cellular Upload
Yihua Guo†, Feng Qian(cid:92), Qi Alfred Chen†, Z. Morley Mao†, Subhabrata Sen‡
†University of Michigan
(cid:92)Indiana University
‡AT&T Labs – Research
{yhguo,alfchen,zmao}@umich.edu
PI:EMAIL
PI:EMAIL
ABSTRACT
Despite the extensive characterization of the growth of cellu-
lar network trafﬁc, we observe two important trends not yet
thoroughly investigated. First, fueled by the LTE technology
and applications involving wearable devices and device-to-
device (D2D) communication, device upload trafﬁc is in-
creasingly popular. Second, the multi-tasking and multi-
window features of modern mobile devices allow many con-
current TCP connections, resulting in potentially complex
interactions. Motivated by these new observations, we con-
duct to our knowledge the ﬁrst comprehensive characteriza-
tion of cellular upload trafﬁc and investigate its interaction
with other concurrent trafﬁc. In particular, we reveal rather
poor performance associated with applications running con-
currently with cellular upload trafﬁc, due to excessive on-
device buffering (i.e., on-device bufferbloat). This leads to
signiﬁcant performance degradation on real mobile appli-
cations, e.g., 66% of download throughput degradation and
more than doubling of page load times. We further system-
atically study a wide range of solutions for mitigating on-
device bufferbloat, and provide concrete recommendations
by proposing a system called QCUT to control the ﬁrmware
buffer occupancy from the OS kernel.
Keywords
Upload; Bufferbloat; Cellular Networks; Radio Firmware
1.
INTRODUCTION
The explosive growth of mobile devices and cellular net-
works shows no sign of slowing down. We notice two im-
portant trends not well explored in previous work, namely
user-generated trafﬁc and multi-tasking.
Permission to make digital or hard copies of all or part of this work for personal
or classroom use is granted without fee provided that copies are not made or
distributed for proﬁt or commercial advantage and that copies bear this notice
and the full citation on the ﬁrst page. Copyrights for components of this work
owned by others than ACM must be honored. Abstracting with credit is per-
mitted. To copy otherwise, or republish, to post on servers or to redistribute to
lists, requires prior speciﬁc permission and/or a fee. Request permissions from
permissions@acm.org.
IMC 2016, November 14-16, 2016, Santa Monica, CA, USA
c(cid:13) 2016 ACM. ISBN 978-1-4503-4526-2/16/11. . . $15.00
DOI: http://dx.doi.org/10.1145/2987443.2987490
On one hand, the mobile trafﬁc paradigm is undergoing
a shift from being dominated by download to a mix of both
download and upload, due to a wide range of emerging apps
enabling user-generated trafﬁc such as media content up-
load to social networks (e.g., Facebook videos), background
synchronization, cloud-based ofﬂoading, HD video chat,
machine-to-machine (M2M), and device-to-device (D2D)
communication, etc. The prevalence of upload is further
fueled by increasingly ubiquitous access to LTE networks,
which provides uplink bandwidth of up to 20Mbps.
On the other hand, the frequent use and rich function
of mobile devices give rise to multi-tasking, which en-
ables users to interact with multiple applications at the same
time. Previously, due to the limitation of mobile operat-
ing system and the device processing power, older phones
and Android systems only support a single application at
foreground interacting with the user. Newer phones allow
users to use multiple apps simultaneously (a.k.a. “multi-
window”). Even without multi-tasking, a single foreground
app can still trigger multiple concurrent TCP ﬂows. A re-
cent study [20] shows that around 28% of the time for each
mobile user there are concurrent TCP ﬂows.
Motivated by the above, in this paper, we conduct to our
knowledge the ﬁrst comprehensive, quantitative, and cross-
layer measurement study of cellular upload trafﬁc and its in-
teraction with concurrent trafﬁc, using combined approaches
of analyzing large network traces and conducting controlled
lab experiments. Our contributions consist of the following.
Characterization of upload trafﬁc (§3). We character-
ized the cellular upload trafﬁc by measuring its volume, du-
ration, rate, concurrency, and impact on latency from a large
network trace collected from an IRB-approved user study1
involving 15 users for 33 months. We found that although
the majority of today’s smartphone trafﬁc is still download,
the upload trafﬁc can be signiﬁcant. Upload can last for up
to 11 minutes with 226 MB of data transferred. In particu-
lar, the upload speed can achieve up to 12.8Mbps (median
2.2Mbps for 10MB+ ﬂows) in today’s LTE networks, fa-
1This study was conducted entirely with data collected
from active and passive measurements at the University of
Michigan and was approved by the University of Michi-
gan IRB (Institutional Review Board) approval number
HUM00111075.
303cilitating many applications that upload rich user-generated
trafﬁc. We also found that large upload tends to have higher
RTT, and upload trafﬁc may also increase the RTT experi-
enced by concurrent download.
An anatomy of on-device queuing for upload trafﬁc
(§4.1-§4.3). For cellular upload, we found a signiﬁcant frac-
tion of the end-to-end latency occurs on the end-host device
instead of in the network, due to the large buffer inside the
mobile device. Speciﬁcally, we made two key observations.
First, contrary to the common understanding [41, 22] that
(i) excessive queuing delay (a.k.a. “bufferbloat”) happens
mostly inside the network (or near-edge network elements),
and (ii) cellular upload trafﬁc is less likely to incur queu-
ing delay due to its low data rate, our ﬁndings suggest that
bufferbloat for upload trafﬁc can frequently occur on mobile
devices accessing diverse types of networks (HSPA, LTE,
and even Wi-Fi), across different devices. On-device buffer-
bloat can cause signiﬁcant latency increase up to 4 seconds,
or 100x of the network RTT, on off-the-shelf Android de-
vices. This implies that when an upload is in progress, the
on-device queuing delay in fact eclipses the network delay.
Second, we identiﬁed the root cause of such excessive on-
device queuing. It can happen at different layers including
application buffer, OS TCP buffer, and the Queuing Dis-
cipline (Qdisc) in the OS kernel.
In particular, we found
excessive queuing also frequently happens at the cellular
ﬁrmware buffer, whose occupancy can, for example, reach
up to 300KB while accounting for 49% of the end-to-end
delay when the uplink bandwidth is 2Mbps. More impor-
tantly, the cellular ﬁrmware buffer distinguishes itself from
other on-device buffers in that its occupancy plays a role in
the cellular control plane which in turn affects base station’s
scheduling decision and achievable uplink throughput.
Accurate achievable uplink throughput estimation
(§4.4). The excessive buffering at various layers makes ac-
curate estimation of achievable cellular uplink throughput
challenging. We found that surprisingly, using the same al-
gorithm, the throughput estimated at upper layers (TCP and
Qdisc) deviates from the lower-layer throughput estimation
by 136% and 70% on average. We proposed a method that
accurately infers the uplink throughput by leveraging lower-
layer information from cellular control-plane messages.
Quantifying the impact of uplink bufferbloat (§5). We
illustrated that large upload trafﬁc signiﬁcantly affects the
performance of concurrent TCP download, whose average
RTT is increased by 91% and average throughput is reduced
by 66%. We found such severe performance degradation
is predominantly caused by on-device buffers, because the
uplink ACK stream of TCP download shares the same Qdisc
and cellular ﬁrmware buffers with concurrent upload, and
is thus delayed mainly due to the on-device bufferbloat. We
further quantitatively demonstrated concurrent upload incurs
signiﬁcant user experience degradation on real applications,
including web browsing (219% to 607% increase of page
load time with concurrent upload), video streaming (57%
reduction of playback bitrate and frequent stalls), and VoIP.
Mitigating on-device bufferbloat (§6,§7). Due to the
uniqueness of on-device bufferbloat, we found existing mit-
igation solutions, such as changing TCP congestion control,
tuning TCP buffer size, reducing Qdisc sizes [7], prioritiz-
ing delay-sensitive trafﬁc, and applying Active Queue Man-
agement (e.g., CoDel [30] and PIE [34]) are not capable of
effectively mitigating the excessive buffering. This is be-
cause (i) they cannot be directly implemented at the cellular
device driver, and (ii) they are unaware of the interplay be-
tween the driver buffer and the cellular control plane. We
therefore designed and implemented a new solution called
QCUT to control the ﬁrmware buffer occupancy from the
OS kernel. QCUT is general (independent of a particular
driver implementation), lightweight, and effective. Our lab
experiments show that QCUT effectively reduces the cellular
ﬁrmware queuing delay by more than 96% while incurring
little degradation of uplink throughput. We deploy QCUT
on a user study involving 5 users for one week. The results
indicate QCUT signiﬁcantly improves the application QoE
when concurrent upload is present.
Although we identiﬁed the on-device bufferbloat problem
in today’s HSPA/LTE networks, we anticipate it continues to
affect future wireless technologies, whose uplink bandwidth
will remain below the downlink bandwidth (e.g., 50Mbps vs.
150Mbps for LTE Advanced [3]) causing the cellular uplink
to often remain the end-to-end bottleneck link. More impor-
tantly, higher network speed and cheaper memory facilitate
device vendors and cellular carriers to deploy larger buffers
that exacerbate on-device (and in-network) bufferbloat.
Paper Organization. After describing the experimental
methodology in §2, we conduct a measurement study of to-
day’s upload trafﬁc in §3. We reveal the on-device queuing
problem in §4, and quantify the impact of upload on mobile
apps in §5. We then describe how QCUT mitigates on-device
queuing in §6 and evaluate QCUT as well as existing mitiga-
tion strategies in §7. We discuss related work in §8 before
concluding the paper in §9.
2. EXPERIMENTAL METHODOLOGY
To comprehensively study cellular upload trafﬁc, we car-
ried out controlled lab experiments (§2.1) and analyzed data
collected from a user study with 15 participants (§2.2).
2.1 Controlled Local Experiments
We conduct controlled experiments using off-the-shelf
smartphones and commercial cellular networks. Our devices
consist of the following: (i) Samsung Galaxy S3 running An-
droid 4.4.4 with Linux kernel version 3.4.104, using Carrier
1’s LTE network2, (ii) Samsung Galaxy S4 running Android
4.2.2 with Linux kernel version 3.4.0, using Carrier 1’s LTE
network, (iii) Samsung Galaxy S3 running Android 4.0.4
with Linux kernel version 3.0.8, with access to Carrier 2’s
3G network and (iv) Nexus 5 running Android 6.0.1 with
Linux kernel version 3.4, using Carrier 1’s LTE network.
We also set up dedicated servers located at the University of
Michigan with 64-core 2.6GHz CPU, 128GB memory, 64-
bit Ubuntu 14.04 OS for experiments. Both mobile phones
2We anonymized three large U.S. cellular carriers’ names as
Carrier 1, 2, and 3.
304Figure 1: Trafﬁc volume distribution of user sessions.
and the servers use TCP CUBIC [19], the default TCP vari-
ant for Linux/Android, unless otherwise mentioned. We
conducted the experiments during off-peak hours. For each
setting, we repeat the experiment for at least 10 times and
report the average metrics unless otherwise noted.
For TCP throughput and RTT measurement, the mobile
device ﬁrst establishes a TCP connection to one of the ded-
icated servers. Then this TCP connection is used to trans-
fer random data without interruption. For bidirectional data
transfer (i.e., simultaneous upload and download) experi-
ments, the mobile device establishes two TCP connections
to two servers, one for download and the other for upload to
eliminate server-speciﬁc bottlenecks. To measure through-
put, we ignore the ﬁrst 10 seconds to skip the slow start pe-
riod and calculate the throughput every 500ms from trans-
ferred data.
2.2 Network Traces from a User Study
We also leveraged network traces collected from an
IRB-approved smartphone user study by distributing instru-
mented Samsung Galaxy S3 phones to 15 students. Each of
the 15 participants was also given unlimited LTE data plan.
The phones were instrumented with data collection software
(with very low runtime overhead). It continuously runs in
the background and collects full packet traces in tcpdump
format including both headers and payload. We collected
900GB of data in total from January 2013 to October 2015.
We used an idle timing gap of 1 minute to separate user ses-
sions of the same device.
3. UPLOAD TRAFFIC
MEASUREMENT
In this section, we perform a measurement study of upload
trafﬁc in today’s cellular networks, using the traces collected
from our user study (§2.2).