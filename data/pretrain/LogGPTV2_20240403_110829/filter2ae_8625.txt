**作者：且听安全  
原文链接：**
接上文：
> 第一部分：样本分析
>
> [CVE-2021-40444-Microsoft MSHTML远程命令执行漏洞分析（一）](https://paper.seebug.org/1792/)

在对网上流传的样本进行分析后，我尝试通过替换cab文件中的文件来复现该漏洞。使用的软件环境如下：
- Microsoft Word 2016 (版本 16.0.4266.1003)
- Windows 10 1909 (内部版本 18363.1734)

首先，在虚拟机中使用原始的docx文件进行复现测试。为了模拟攻击过程，我们修改了hosts文件，将域名解析指向127.0.0.1。接下来，我们将ministry.cab和side.html预先存放在一个名为e8c76295a5f9acb7的目录下，并在上级目录中用Python启动了一个HTTP服务，端口号设置为80。

打开恶意docx文件后，可以看到HTTP服务器记录了相应的下载请求。利用Process Monitor工具进一步观察Word在打开恶意样本时的行为，发现以下操作：
1. Word将side.html保存到临时目录，并重命名为side[1].htm。
2. ministry.cab被存储在另一个临时目录并重命名为ministry[1].cab，但很快被删除。
3. 在Temp目录下创建championship.inf文件。
4. 使用control.exe执行../../../AppData/Local/Temp/championship.inf，推测此时恶意代码已被成功运行（关于恶意代码的具体分析不在本文讨论范围内）。

随后，我们尝试替换ministry.cab内的文件以验证能否实际执行自定义代码。为此，重新生成了一个新的cab包，但初次尝试并未按预期释放messagebox.dll（Process Monitor未记录任何相关文件创建活动），这表明我们的方法存在问题。

于是，我将自定义dll改名为championship.inf再次尝试。这次虽然成功释放了文件，但位置并非直接位于Temp目录内，而是某个随机命名的子目录中，导致control.exe无法找到目标文件。

通过比较新旧两个ministry.cab的内容差异，发现原版文件名前缀包含“../”，从而使得它们能够被正确放置于Temp路径下。基于此发现，我重新制作了一个含有“../championship.inf”的cab文件，并利用二进制编辑器调整了CFFILE结构中cbFile字段的值——将其设置得比实际大小更大。经过上述修改后，championship.inf确实不再被自动删除，从而使恶意代码得以顺利执行。

实际上，当cbFile值超出cab文件的实际尺寸时，会触发异常情况，阻止系统正常清理championship.inf，进而允许后续攻击逻辑展开。关于这一现象背后更深层次的技术细节，请参阅后续章节中的漏洞成因分析部分。