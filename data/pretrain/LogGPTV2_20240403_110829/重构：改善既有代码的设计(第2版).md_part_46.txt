this
// rest of class..
constructor(name, 
测试。
this._monthlycost = monthlycost;
super();
请看下面的例子。
多数时候，
运行测试。然后大功告成。
monthlycost = monthlycost;
id
name = name;
之后我将这行公共代码提升至超类的构造函数中。
id;
再由各个子类完成额外的工作。但是，偶尔也需要将共用行为的
一个构造函数的工作原理都是这样：先（通过super调用）初始
id，
Pmonthiycost）{
，由于其中引用了一
---
## Page 435
class Employee...
class Manager...
constructor(name, grade) {
为grade字段赋值，而该字段只能在子类的构造函数中初始化。
finishconstruction(）:
finishconstruction()
get isPrivileged(）{
constructor(name, grade） {
assigncar(） {...}
get isPrivileged(）{...}
return this.-grade >4;
if (this.isPrivileged) this.assigncar(); // every subclass does this
this.
然后再使用函数上移（350）将提炼得到的函数提升至超类。
这里我无法简单地提升isPrivileged函数至超类，
在这种场景下，我可以对这部分公共代码使用提炼函数（106）
:-grade
= grade; 
因为调用它之前需要先
---
## Page 436
class Employee {...}
12.4函数下移（Push Down Method）
get quota {...}
反向重构：函数上移（350)
Employee
---
## Page 437
·将该函数从所有不需要它的那些子类中删除。
·删除超类中的函数。
条件表达式（272），只留些共用的行为在超类。
些子类需要这个函数时适用。如果超类不知晓这个信息，那我就得用以多态取代
·将超类中的函数本体复制到每一个需要此函数的子类中。
超类中挪走，
做法
动机
测试。
测试。
如果超类中的某个函数只与一个（或少数几个）子类有关，
 放到真正关心它的子类中去。这项重构手法只有在超类明确知道哪
，那么最好将其从
---
## Page 438
class Salesman extends Employee {
class Employee
12.5字段下移（Push Down Field)
ass
Engineer
反向重构：字段上移（353)
//Java
---
## Page 439
·测试。
·将该字段从超类中移除。
该字段的子类中。
·将该字段从所有不需要它的那些子类中删掉。
·测试。
做法
动机
在所有需要该字段的子类中声明该字段。
protected String quota;
如果某个字段只被一个子类（或者一小部分子类）用到，就将其搬移到需要
---
## Page 440
号、字符串或者数字。类型码的取值经常来自给系统提供数据的外部服务。
State/Strategy）
系的第一种工具是类型码字段-
动机
function createEmployee(name, type) {
function createEmployee(name, type) {
（工程师、
Subclasses)
 return new Employee(name, type);
12.6
switch
软件系统经常需要表现“相似但又不同的东西”，比如员工可以按职位分类
ca
反向重构：移除子类（369）
包含旧重构：提炼子类（Extract Subclass）
包含旧重构：
以子类取代类型码（Replace Type Code with
经理、
销售）
以State/Strategy取代类型码（Replace Type Code with
订单可以按优先级分类（加急、
一根据具体的编程语言，可能实现为枚举、符
type
me
常规）
。表现分类关
---
## Page 441
·测试。
·自封装类型码字段。
码（362）。
基本类型（174）把类型码包装成“员工类别"类，
职位类别就不能用在其他场合了。
出“工程师"和“经理"等子类型呢？直接的子类继承（前一种方案）比较简单，但
程师"成为“员工"的子类，还是应该在“员工"类包含“员工类别"属性、从后者继承
码的这个类，还是应该处理类型码本身呢？以前面的例子来说，我是应该让“工
型码取值正确时才使用该字段，不过子类的形式能更明确地表达数据与类型之间
这样的字段放到合适的子类中去。
对“销售"这类员工才有意义。此时我可以创建子类，然后用字段下移（361）把
入子类之后，我可以用以多态取代条件表达式（272）来处理这些函数。
果有几个函数都在根据类型码的取值采取不同的行为，多态就显得特别有用。
辑可以保留在构造函数里。
造函数，把选择器逻辑放在工厂函数里；如果选择间接继承的方案，选择器逻
·1
做法
的关系。
步，
改后执行测试。
针对每个类型码取值，重复上述“创建子类、添加选择器逻辑"的过程。每次修
 创建一个选择器逻辑，把类型码参数映射到新的子类。
使用函数下移（359）和以多态取代条件表达式（272）处理原本访问了类型码
测试。
去除类型码字段。
回该类型码的字面量值。
任选一个类型码取值，
 在使用以子类取代类型码时，我需要考虑一个问题：应该直接处理携带类型
另外，
引入子类。继承有两个诱人之处。首先，你可以用多态来处理条件逻辑。
如果选择直接继承的方案，就用以工厂函数取代构造函数（334）包装构
大多数时候，有这样的类型码就够了。但也有些时候，我可以再多往前一
有些字段或函数只对特定的类型码取值才有意义，
，为其创建一个子类。覆写类型码类的取值函数，令其返
。当然，我也可以加入验证逻辑，确保只有当类
另外，如果员工的类别是可变的，那么也不能
 然后对其使用以子类取代类型
，例如“销售目标"只
L
如
---
## Page 442
数取代构造函数（334），新建一个工厂函数以便安放选择器逻辑。
回适当的字面量值就行了。
的方案，
值函数了。
get type() {return this._type;}
class Employee...
class Employee...
L，
tostring()
(ad'stu}s） {awu·su}s、 ua} （)uso
 this._name = name;
范例
if
throw new Error(^Employee cannot be of type ${arg})
的函数。全部处理完后，就可以移除类型码的访问函数。
 它会与字段初始化逻辑相互纠缠，
我选择从工程师（"engineer"）这个类型码开始重构。
请注意，tostring函数的实现中去掉了this._type的下划线，改用新建的取
虽然JavaScript的构造函数也可以返回其他对象，
第一步是用封装变量（132）将类型码自封装起来.
这个员工管理系统的例子已经被用烂了．.
，也就是继承Employee类。子类很简单，只要覆写类型码的取值函数，返
{return
“${this._name}（${this.type});}
"manager",
搞得一团混乱。
：但如果把选择器逻辑放在这
：所以我会先运用以工厂函
我打算采用直接继承
---
## Page 443
class Employee...
一回事。
class Employee...
中的取值函数仍然保留）。
的状态，继续处理别的类型。我一次处理一
样我才能肯定：新建的子类真的被用到了。然后我把type函数的返回值改回正确
覆写的type函数，
function createEmployee(name, type） {
class Salesman extends Employee {
function createEmployee(name, type） {
this._type
this.validateType(type);
return new Employee(name, type);
switch (type)
return new Employee(name, type);
switch (type)
 测试，确保一切工作正常，我就可以移除验证逻辑，
case
全部修改完成后，
测试，确保一切运转正常。
case
然后我把选择器逻辑放在工厂函数中，从而开始使用新的子类。
"engineer": return new Engineer(name,
"engineer": return new Engineer(name, type);
type;
${this._name} (${this.type});}
，让它返回另外一
我就可以去掉类型码字段及其在超类中的取值函数（子类
Sal
 不过由于我的偏执，我随后会修改Engineer类中
一个值，
 type);
type
type);
再次执行测试，确保会有测试失败，这
一个类型，每次修改后都执行测试。
因为分发逻辑做的是同
---
## Page 444
constructor(name, type){
class Employee...
我可能需要允许员工类别动态调整，这也会导致不能使用直接继承的方案。
工"和“兼职员工"两个子类，所以不能再根据员工类别代码创建子类了。
数。到某个时候，已经没有代码使用类型码的访问函数了，我再用移除死代码
们。我会用以多态取代条件表达式（272）和函数下移（359）来处理这些访问函
望把这些函数也干掉，不过可能需要多花点儿时间，因为有其他函数使用了它
class Employe...
（237）给它们送终。
function createEmployee(name, type) {
constructor(name,
掉
function createEmployee(name, type) {
constructor(name, 
范例：使用间接继承
 this._name = name;
return new Employee(name, type);
switch
 还是前面这个例子，我们回到最起初的状态，
case
case
case
case
case
子类中获取类型码的访问函数-
现在，构造函数的类型参数已经没用了，用改变函数声明（124）把它干
"saiesman": return new Salesman(name, type)
（type）
"salesman": return new Saiesman(name, 
"engineer": return new Engineer(name, type);
manager
(type
type){
 type){
retur
new
Tanager
-get type函数-
 type);
不过这次我已经有了“全职员
一仍然留着。通常我会希
另外，
---
## Page 445
class Employee...
class Employee...
get capitalizedType(){
[!(6ue)adiaaotde mu = ad-: stu (6ue)adk 1as
get typeString() {return this._type.toString();}
validateType(arg) {
constructor(name, 
get
get capitalizedType(）{
 return this._type.charAt(0).toUpperCase() + this._type.substr(1).toLowerCase();
validateType(arg）{
return
this.type = type;
this
toString() {return this._value;}
return 
if
this.validateType(type);
 throw new Error(^Employee cannot be of type ${arg});
然后使用以子类取代类型码（362）的老套路，把员工类别代码变成子类。
type(
首先，我用以对象取代基本类型（174）包装类型码。
这次的toString函数要更复杂一点，以便稍后展示用。
{return this._type;}
name
eString. charAt(0) .toUppercase()
type){
"manager",
_type;
"salesman"] .includes(arg)
---
## Page 446
手法的名字。
所以就不再将其作为一个单独的重构手法了。
代类型码重构手法。现在我认为这是以间接继承的方式使用以子类取代类型码，
class EmployeeType...
class Employee...
移进去，例如我专门放在toString函数里的“名字大写"逻辑，就可以搬到超类。
get capitalizedName()
它，用来明确表达各个子类之间的关系。并且有一个超类，也方便把其他行为搬
class Salesman extends EmployeeType {
class Engineer extends EmployeeType {
set type(arg) {this._type = Employee.createEmployeeType(arg);}
class EmployeeType {
 return this.toString().charAt(0).toUpperCase()
toString(） {return‘