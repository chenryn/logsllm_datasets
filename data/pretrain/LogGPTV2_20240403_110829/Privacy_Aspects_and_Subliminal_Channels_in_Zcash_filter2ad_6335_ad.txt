B = hβ +m
i =0 aiui(x)+r δ
m
i =l +1 ai (βui (x)+α vi (x)+wi (x))+h(x)t(x)
i =0 aivi(x)+sδ
δ
i =0 aivi(x)+sδ
C = ˆC · As · ˆBr · д
−rsδ
• 0/1 ← Verifier(R, σ ,(a1, ..., al), π):
• Compute
l
i =0 ai (βui (x)+α vi (x)+wi (x))
γ
T = д
• Parse π = (A, B, C) and accept the proof if and only if
e(A, B) = e(дα , hβ)e(T , hγ )e(C, hδ)
Session 8C: Blockchain VICCS ’19, November 11–15, 2019, London, United Kingdom18208.2 The Inner Subliminal Channel
Suppose that a Prover, hereafter called “Subliminal Prover”, wishes
to send b-bits of information to a Verifier, that from now on we
will refer to as “Subliminal Verifier”. A Subliminal Prover cannot
directly communicate to a Subliminal Verifier, because otherwise
there is no need to use subliminal channels: when a message is
embedded, the Prover doesn’t know when it will be recovered and
he cannot warn the Verifier to recover the message from a specific
proof rather than another.
To overcome these limitations, in our constructions the Sublim-
inal Prover and Verifier share some secret auxiliary information,
denoted as aux, that permits the Verifier to distinguish a proof with
a subliminal message from an honest random proof generated for
the same statements.
We let ω : {0, 1}∗ → {0, 1}b and ξ : {0, 1}∗ → {0, 1} b
2 be two
uniformly distributed polynomial-time computable functions. The
abstract purpose of ω is to obtain the message to embed from the
statements of the proof, while ξ acts as a message extractor, that
is it recovers parts of the embedded message from the proof. To
both bind a subliminal message to some specific information and
to permit Subliminal Verifiers to recognize proofs with subliminal
messages embedded, we require that both ω and ξ take as input the
auxiliary information aux.
In short, for statement (a1, ..., al), we let
M = ω(aux, a1, .., al)
be the message that the Subliminal Prover would like to send to a
Subliminal Verifier, assuming they both know ω, ξ and aux.
As opposed to the Subliminal Prover, the Subliminal Verifier takes
as input a set Ω = {ωi}i∈I , for some index set I. Each function ωi
corresponds to a different method the Subliminal Prover can use
to obtain the subliminal message, especially in the case where the
Prover uses a unique ω = ωi associated to a user.
In order to embed and recover the subliminal message M, the
Prover and Verifier procedures are therefore modified as follows:
• π ← SubliminalProver(R, σ ,(a1, ..., am), ω, ξ , aux):
• Compute M = ω(aux, a1, .., al) and denote with m1, m2 the
first and the last b
• Randomly select r ← Zp until
2 bits of M, respectively.
i =0 aiui(x)(cid:1) ·(cid:0)дδ(cid:1)r(cid:1) = m1
i =0 aivi(x)(cid:1) ·(cid:0)hδ(cid:1)s(cid:1) = m2
B = hβ +m
• Randomly select s ← Zp until
ξ(cid:0)aux, a1, ..., al ,(cid:0)дα +m
ξ(cid:0)aux, a1, ..., al ,(cid:0)hβ +m
A = дα +m
ˆB = дβ +m
ˆC = д
• With the r , s obtained compute π = (A, B, C), where
i =0 aivi(x)+sδ
i =0 aiui(x)+r δ
m
i =l +1 ai (βui (x)+α vi (x)+wi (x))+h(x)t(x)
i =0 aivi(x)+sδ
C = ˆC · As · ˆBr · д
δ
−rsδ
• (0/1, M) ← SubliminalVerifier(R, σ , π ,(a1, ..., al), Ω, ξ , aux):
m2 = ξ(aux, a1, ..., al , B)
• Parse π = (A, B, C), and let
m1 = ξ(aux, a1, ..., al , A)
• If exists an ω ∈ Ω such that ω(aux, a1, ..., al) = (m1||m2),
recover M as
M = (m1||m2)
Otherwise, set M =⊥.
• Return ( Verifier(R, σ ,(a1, ..., al), π) , M )
8.3 The Outer Subliminal Channel
In Groth’s original scheme and in its corresponding Zcash Sapling
implementation, a user that possesses, for a certain statement, a
valid proof π = (A, B, C) is able to transform it into a different, but
still valid, proof π ′ = (A′, B′, C′) for the same statement.
The proof can be transformed using the following transforma-
1
˜r
tions, exploiting the multiplicative nature of the proof structure:
• Select random ˜r ∈ Zp and set
• Select random ˜s ∈ Zp and set
B′ = B · (hδ) ˜s
• Select random ˜r , ˜s ∈ Zp and set
B′ = B
˜r · (hδ) ˜s
C′ = C
C′ = A˜s · C
C′ = A˜s · C
A′ = A˜r
A′ = A
A′ = A˜r
B′ = B
It is straightforward to see that if π = (A, B, C) is accepted by
a Verifier, then π ′ = (A′, B′, C′) will be accepted as well: indeed,
considering the last transformation (the other two are special cases
of this), we have
′) = e(дα , hβ)e(T , hγ )e(C
′
e(A
, B
˜r ) = e(дα , hβ)e(T , hγ )e(A˜s · C, hδ)
˜r · (hδ) ˜s
⇔
⇔
e(A˜r , B
e(A, B)e(A˜s , hδ) = e(дα , hβ)e(T , hγ )e(A˜s , hδ)e(C, hδ) ⇔
, hδ)
′
˜r
1
1
e(A, B) = e(дα , hβ)e(T , hγ )e(C, hδ)
With similar techniques as employed in the Inner Subliminal
Channel, we show how these three transformations can be used to
embed a message into a valid proof π, thus creating another sub-
liminal channel that we will refer to as “Outer Subliminal Channel”.
We will demonstrate it using the 3rd proof transformation, but the
construction generalizes easily to the other two transformations.
Here we can also take advantage of parallel computation since
the randomized group elements A′ = A˜r and C′ = A˜s · C can be
computed independently.
We let again ω : {0, 1}∗ → {0, 1}b and ξ : {0, 1}∗ → {0, 1} b
2 be
two uniformly distributed polynomial-time computable functions
and for statement (a1, ..., al) and some auxiliary information aux,
we let M = ω(aux, a1, .., al) be the subliminal message a Subliminal
Prover would like to embed in a proof π for the statement (a1, .., al).
The new SubliminalProver and SubliminalVerifier procedures
are as follows:
• π ← SubliminalProver(R, σ ,(a1, ..., am), ω, ξ , aux):
˜π = ( ˜A, ˜B, ˜C) ← Prover(R, σ ,(a1, ..., am)).
•
• Compute M = ω(aux, a1, .., al) and denote with m1, m2 the
first and the last b
• Randomly select r ← Zp until
2 bits of M, respectively.
ξ(aux, a1, .., al , ˜Ar) = m1
• Randomly select s ← Zp until
ξ(aux, a1, .., al , ˜As · C) = m2
• With the r , s obtained compute π = (A, B, C), where
C = ˜As · C
r · (hδ) s
A = ˜Ar
B = ˜B
1
r
Session 8C: Blockchain VICCS ’19, November 11–15, 2019, London, United Kingdom1821• (0/1, M) ← SubliminalVerifier(R, σ , π ,(a1, ..., al), Ω, ξ , aux):
m2 = ξ(aux, a1, ..., al , C)
• Parse π = (A, B, C), and let
m1 = ξ(aux, a1, ..., al , A)
• If exists an ω ∈ Ω such that ω(aux, a1, ..., al) = (m1||m2),
recover M as
M = (m1||m2)
Otherwise, set M =⊥.
• Return ( Verifier(R, σ ,(a1, ..., al), π) , M )
8.4 Computational Complexity
We’ll now discuss the average number of operations required to
successfully embed a b-bits message M in a valid proof π, using
the Inner or the Outer Subliminal Channel, respectively. Both es-
timations are done assuming that ξ is uniformly distributed on
{0, 1} b
2 .
For the Inner Subliminal Channel, a b-bits message can be em-
bedded with an average cost of O(2 b
2 ) parallelizable step operations,
where each step consists of a scalar-point multiplication, a point ad-
dition and one ξ-evaluation. More precisely, O(2 b
2 ) step operations
are needed to find r and, similarly, O(2 b
2 ) operations are needed to
find s, such that the resulting A, B successfully embed the first and
the second half, respectively, of the subliminal message M.
i =0 aiui(x)(cid:1)·
(cid:0)дδ(cid:1)i; for i ∈ [0, 2 b
2 and let, as in the case for r, f (i) =(cid:0)дα +m
These costs directly derive from the hypothesis of the uniform
distribution of ξ and from the fact that both G1 and G2 are cyclic
groups of order p with loд2(p) >> b
2 . For example, fix a random
value M ∈ {0, 1} b
2 +1 − 1], f (i) will take distinct values and hence,
with high probability, ξ(aux, a1, ..., al , f (i)) will take all possible
2 +1 − 1]. This means that there is a
values in the interval [0, 2 b
2 +1 − 1] such that ξ(aux, a1, ..., al , f (j)) = m and to find it,
j ∈ [0, 2 b
2 +1−1
2 ξ ◦ f -evaluations are needed,
an average number of 2 b
2
that is an average cost of O(2 b
≈ 2 b
2 ) step operations.
Each step operation cost can be further improved to consists
only of a point addition and one ξ-evaluation; for example, in the
case of r, the Subliminal Prover can iteratively compute the values
(cid:40)
дα +m
Ai−1 · дδ
i =0 aiui(x)
Ai =
if i = 0
otherwise
until a preimage Ar for m1 with respect to ξ is found.
With similar arguments, it is easy to prove that, similarly as in
the Inner Subliminal Channel, embedding a b-bits message using
the Outer Subliminal Channel requires an average number of O(2 b
2 )
point additions and ξ-evaluations.
Note that for both proposed channels, each of the values r and s
can be searched in parallel: hence, if 2c computation units are avail-
2 −c)
able, M could be embedded with an average number of O(2 b
point additions and ξ-evaluations per unit.
8.5 Adversary Assumptions
In a lightweight wallet scenario, where proof generation is dele-
gated to a third-party Prover, subliminal channels could be mali-
ciously exploited to share a certain amount of information related
Local Wallet
Delegated Prover
k
π
Figure 4: Delegated proof π signed with user’s secret master
key k.
to users, thus permitting a wide variety of different activities such
as proof fingerprinting, user-tracing, leak of transaction data and
so on. Thus at stake is privacy and security of the user funds as
well as fungibility of the affected coin.
In our use case, a Subliminal Prover could embed in all gener-
ated proofs a unique tracing information related to the user that
requests the proof computation, and later share with some Sublimi-
nal Verifiers a certain auxiliary information aux that permits them
to perform tracing analysis only to a particular subset of users they
are authorized by the Prover to look at.
This is a realistic setting for an adversary in our case as well: the
Zcash developers are currently working on implementing delegated
proofs, where only the secret key and basic signing is done locally,
while the rest of the proof generation is delegated to another system.
In this setting, as shown in Figure 4, the adversary would not learn
the secret master key of the target (since it is stored only in the
wallet), but could still reveal, using one of the proposed subliminal
channels, some transaction-tagging information.
Furthermore, to remain undetectable, the attacker wishes to hide
its malicious activities and reduce the number of interactions with
its target and the environment to a minimal level: for example,
the attacker will not send any, even if encrypted, message to the
external world indicating that he is adopting a subliminal prov-
ing mechanism on the target’s machine, as this would be easily
detectable by network traffic analysis. Whitin this scenario, our
adversary would attack the proving system once, for example when
the software is installed, and will not require any further direct
interaction as long as the proving system remains malicious.
Aiming at fingerprinting proofs in order to permit later tracing
activities, a Subliminal Prover could proceed as follows:
• Associate to each user U a unique random n-bit key kU . Let
K = {kU }U be the set of all user keys.
• For t ∈ N+ let Ht be a t−bits cryptographic hash functions.
For example, if t ≤ 512, Ht(x) could be defined as the last t-bits
of BLAKE2b-512(x).
• Let E(M, k) be an easily computable algorithm that takes as input
a plaintext M, a key k and returns an output of b-bits. Depending
on the security property required for the subliminal channel, E
can differently model a Message Authentication Code, a Block Ci-
pher, a Public Key Encryption scheme and others. The following
description indeed, easily generalizes to all these cases.
• When the user U requests a proof π for statement (a1, ..., al), the
Subliminal Prover defines
aux = {E, kU , b, Ht}
Session 8C: Blockchain VICCS ’19, November 11–15, 2019, London, United Kingdom1822ξ(aux, a1, .., al , x) = H b
(x)
2
ω(aux, a1, ..., al) = E(a1 || ... || al , kU )
and executes
π ← SubliminalProver(R, σ ,(a1, ..., am), ω, ξ , aux)
Consequently, the Subliminal Verifier is able to link proofs to
users in the following way:
• The Subliminal Verifier receives from the Subliminal Prover the
aux = {E,Trace, b, Ht}
where Trace ⊆ K is the subset of keys associated to users he
whishes to trace.
• The Subliminal Verifiers defines
set
ξ(aux, a1, .., al , x) = H b
(x)
2
and let Ω
Ω = {ωkU (aux, a1, ..., al)}kU ∈T r ace
= {E(a1 || ... || al , kU )}kU ∈T r ace