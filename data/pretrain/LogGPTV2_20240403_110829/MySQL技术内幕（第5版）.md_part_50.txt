，必须使用括号里给出的列名，而不能使用视图定义的 SELECT 部分里列出的
category|minimum
0
James
James
Thomas
0
John
George
MIN(score.score)+1 AS span,
AS
grade_event.category,
fn FROM vpres2;
AS
total,
maximum,
count
8
9
8
9
'last_name'
maximum|spanItotal|average|count
20
6
201
in*field list'
39
3
8
2
2325180.1724
2425
383
425114.1667
14.1852
14.0370
78.2258
29
29
---
## Page 211
了一条SELECT语句，用于显示 sampdb数据库里的各个表的名字：
4.2.1复合语句和语句分隔符
的话题：如何写复合语句。
但是，在深入讲解与各个特定类型的存储程序有关的细节之前，我们首先要讨论一个它们共有
4.2
的多个行。在这种情况下，这个视图是不可更新的，因为无法辨别出应该更新底层表的哪一行。
对表中各列的简单引用，并且对视图某行的任何操作必须与底层表中某一行的操作相对应。例如，
那些行实现插入、更新或删除操作：
对于由单个SQL语句构成程序体的存储程序，在编写时没有特别要求。下面这个过程使用
本节主要描述如何编写和使用各种类型的存储程序：存储函数、存储过程、触发器和事件。
如果想要让一个视图可更新，那么必须让它直接映射到一个表上，它所选择的那些列必须是
不过，存储程序并不局限于是一条简单的声明。里面的代码可以包含多条SQL语句，并且
CREATE PROCEDURE sampdb_tables()
mysql> SELECT
mysql> UPDATE
mysql> SELECT
mysql> DELETE
mysql> INSERT INTO v (i) VALUES(4);
mySql>CREATE TABLE t（i INT);
有些视图是可更新的，也就是说，你可以通过操作视图，对底层表（underlying table）里的
使用存储程序
+------+
mysql>
i
12012-09-161Q
WHERE TABLE_SCHEMA
date
3
2
一
INSERT
TiFROMV;
vSETi=i+1;
iFROMV;
FROMVWHEREi CALL show_times(）;
mysql>
mysql> delimiter $
对于复合语句，在块内的语句之间必须使用分号“；”进行分隔。由于它同时又是客户端和
mysgl>
mysql>
BEGIN
CREATE PROCEDURE greetings()
ysql> delimiter EOF
2012-05-03 23:18:19
2012-05-0318:18:19
UTC Time
Local Time
SELECT CONCAT('Greetings,,user,!)AS greeting;
ENDIF;
SET user='earthling';
ENDIF;
DECLARE user CHAR(77)
第4章视图和存储程序
SET user=SUBSTRING_INDEX（user,'@,1）;
V
delimiter
V
CREATE PROCEDURE shoW_times()
use
ENDS
BEGIN
CREATE PROCEDURE show_times()
SELECT CURRENT_TIMESTAMP AS'LOcal Time';
(SELECT CURRENT_USER(））;
，如果存储程序的程序体包含了某些内部分号，那么在定义这个程序时，
>OTHEN
CHARACTER
#匿名用户
---
## Page 213
句里调用所有这些函数；另一种办法是使用一个存储过程，通过它的OUT参数“返回”这些值。
这些语句都自己调用了那个函数，不过存储函数也可以用在任何复杂的表达式里。
数，可以方便地执行它，而无需每次都写出所有的逻辑，并且可以像使用内建函数那样来调用它：
函数体。函数体至少要包含一条 RETURN语句，用来向调用者返回一个值。将一个计算定义为函
统出生于给定年份，并会返回统计值：
所区别，在给参数命名时将使用了前缀p_。）该函数使用了一个子查询，用于确定有多少位总
句来创建。它们的基本语法如下所示：
个结果集（函娄
程的情况有两种
函数。存储过程是使用CALL语句来调用的独立操作，不能用在表达式里。适合于使用存储过
4.2.2存储函数和存储过程
字来封闭每一个存储程序定义的程序体。
函数无法返回多个值。要让函数返回多个值，一种办法是编写多个函数，然后在同一条语
这个函数有一条用来表明其返回值数据类型的 RETURNS子句，以及一个用来计算那个值的
存储函数可以用CREATE FUNCTION 语句来创建；存储过程可以用 CREATEPROCEDURE语
存储函数常用在表达式里，它会执行计算并返回一个值，有点像COS（)或HEX（)这样的内建
mysql> SELEcT count_born_in_year(1913);
mysql> SELEcT count_born_in_year(1908);
mysql> CREATE FUNCTION count_born_in_year(p_year INT)
mysql> delimiter $
下面这个示例会创建一个函数，它带有一个表示年份的整数值参数。（为与表或列的名字有
CREATE PROCEDURE proc_name ([param_list])
CREATE FUNCTION func_name([param_list])
为保证风格的一致性，
END;
BEGIN
CREATE PROCEDURE do_nothing ()
count_born_in_year(1913)1
END;
BEGIN
count_born_in_year(1908)
routine_stmt
RETURNS type
DO SLEEP(1);
routine_stmt
->
V
V
ENDS
BEGIN
READS SQL DATA
RETURNS INT
数无法做到这一点)。
种：只需通过运算来实现某种效果或动作，不需要返回值；运算结果需要返回多
，即使在没有严格要求的情况下，你可能也会使用 BEGIN和 END 关键
n
一
4.2使用存储程序
13
---
## Page 214
服从这条限制。例如，有一条查询 member 表的语句调用了某个存储函数，那么不能在这个存
那个表进行修改。存储过程通常没有这个限制，但如果它们是从存储函数里面调用的，则需要
员”
成员行：
例程update_expiration（），会根据美史联盟成员的ID号，用给定的到期日期去更新相应的
被依次发送到客户端。
方式返回的，而是被发送给到了客户端。一个过程可以生成多个结果集，其中的每一个结果会
年份出生的总统有关的信息行：
任何RETURN 语句
的最好办法是，不要使用内建函数的名字来命名存储函数。
行限定，以避免出现歧义。例如，要在 sampdb 数据库里定义了一个名为 PI()的存储函数，则
问这些参数。更多相关信息请参考4.2.2.2节。
存储过程应该负责计算这些期望值，并把它们赋值给各个参数，在过程返回后，调用者即可访
会
194
到目前为止，所有的示例都只是在查询信息，
会显示一个结果集，而不会把计算结果作为其返回值。在结果集里，包含的是与每一位在给定
存储过程与存储函数很相似，不同之处在于它没有返回值。因此，它没有 RETURNS子句或
如果定义的存储函数与某个内建的函数同名，那么在调用它时必须用数据库名对函数名进
存储函数需要服从这样一条限制，即它们不能对调用该函数的那条语句正读取或正写入的
（NULL表示“永不过期"）：
下面的 update_expiration（）调用，会把成员的到期日期设置成明年的今天或者“终身成
CREATE PROCEDURE update_expiration (p_id INT UNSIGNED, p_date DATE)
在本例里，过程体执行了一条 SELECT 语句。如本例所示，语句的结果集并不是以过程值
mysql> CALL update_expiration(61,
END;
BEGIN
mysql> CALL show_born_in_year(1913);
mysql> CALL show_born_in_year(1908);
与存储函数有所不同，存储过程不能用在表达式里，只能通过CALL语句来调用它：
| first_name | last_name |birth
I first_name
mysql> delimiter;
mysql>
mysql> delimiter $
UPDATE member SET expiration = p_date WHERE member_id = p_id;
Richard M.I Nixon
Lyndon B.
第4章视图和存储程序
V
V
V
>BEGIN
ENDS
CREATE PROCEDURE show_born_in_year(p_year INT)
WHERE YEAR(birth) =P_year;
FROM president
SELEcT first_name,last_name,birth, death
句。
IJohnson
1last_name|birth
下面这个简单的存储过程与count_born_in_year（）函数很相似，只是它
|1908-08-2711973-01-22
1913-01-0911994-04-22
1913-07-14
CURDATE()+INTERVAL1 YEAR）;
death
death
，不过，存储例程也可用来修改表。下面这个