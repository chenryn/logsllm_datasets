    copa…    activity_swarm_web  replicated   1/1
      activity_web:latest  
    ```
9.  最后，打开你的网络浏览器，确认你可以从`http://localhost:8000/admin/`和`http://localhost:8000/photo_viewer/`访问网站。
全景徒步旅行应用的创建和设置方式类似于您在本章中已经完成的其他一些服务。
## 活动 9.02:在群运行时执行应用更新
**解决方案**:
我们可以通过多种方式进行这项活动。以下步骤详细介绍了一种方法:
1.  If you do not have a Swarm running, deploy the `docker-compose.yml` file you created in *Activity 9.01*, *Deploying the Panoramic Trekking App to a Single-Node Docker Swarm*:
    ```
    docker stack deploy --compose-file docker-compose.yml activity_swarm
    ```
    如您所见，这三项服务现在都在运行:
    ```
    Creating network activity_swarm_default
    Creating service activity_swarm_web
    Creating service activity_swarm_db
    ```
2.  In the same directory where you have performed the `stack deploy` command, open the `photo_viewer/templates/photo_index.html` file with your text editor and change line four to match the following details, basically adding the word `Patch` to the main heading:
    photo_index.html
    ```
    1 {% extends "base.html" %}
    2 {% load static %}
    3 {% block page_content %}
    4 Patch Panoramic Trekking App - Photo Viewer
    ```
    你可以在这里找到完整的代码[https://packt.live/3ceYnta](https://packt.live/3ceYnta)。
3.  构建一个新的映像，这次使用以下命令将映像标记为【T0:
    ```
    docker build -t activity_web:patch_1 .
    ```
4.  Deploy the patch to your Swarm web service using the `service update` command. Provide the image name and the service the update is going to be applied to as well:
    ```
    docker service update --image activity_web:patch_1 activity_swarm_web
    ```
    输出应该如下所示:
    ```
    …
    activity_swarm_web
    overall progress: 1 out of 1 tasks 
    1/1: running   [=======================================>] 
    verify: Service converged
    ```
5.  List the services running and verify that the new image is running as part of the `activity_swarm_web` service:
    ```
    docker service ls
    ```
    从输出中可以看到，web 服务不再用`latest`标记。它现在显示`patch_1`映像标签:
    ```
    ID         NAME                  MODE          REPLICAS
      IMAGE
    k6kh…      activity_swarm_db     replicated    1/1
      postgres:latest
    cu5p…      activity_swarm_web    replicated    1/1
      activity_web:patch_1
    ```
6.  Verify that the changes have been applied to the image by accessing `http://localhost:8000/photo_viewer/` and seeing that the heading now shows `Patch Panoramic Trekking App`:
    ![Figure 9.10: Patch version of the Panoramic Trekking App ](img/B15021_09_10.jpg)
图 9.10:全景徒步应用的补丁版本
在本活动中，您对全景徒步旅行应用进行了微小的更改，以便对服务进行滚动更新。然后，您将映像部署到运行环境中，并执行滚动更新以验证更改是否成功。标题中的更改表明滚动更新已成功执行。
# 10。KubernetesKubernetesKubernetesKubernetesKubernetesKubernetesKubernetesKubernetesKubernetesKubernetes
## 活动 10.01:在 Kubernetes 上安装全景徒步应用
**解决方案**:
可以通过以下步骤创建数据库和全景徒步旅行应用:
1.  Install the database with the following `helm` command:
    ```
    helm install database stable/postgresql --set postgresqlPassword=kubernetes
    ```
    这将为 PostgreSQL 安装多个 Kubernetes 资源，并显示如下摘要:
    ![Figure 10.23: Database installation ](img/B15021_10_23.jpg)
    图 10.23:数据库安装
    该输出首先列出与 Helm 图表相关的信息，如名称、部署时间、状态和版本，然后是与 PostgreSQL 实例相关的信息以及如何访问它。在 Helm 图表中，这是一种广泛接受的方法，用于在安装图表后提供此类信息。否则，将很难学习如何连接到 Helm 安装的应用。
2.  Create a `statefulset.yaml` file with the following content:
    ```
    apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      name: panoramic-trekking-app
    spec:
      serviceName: panoramic-trekking-app
      replicas: 1
      selector:
        matchLabels:
          app: panoramic-trekking-app
      template:
        metadata:
          labels:
            app: panoramic-trekking-app
        spec:
          containers:
          - name: nginx
            image: packtworkshops/the-docker-workshop:          chapter10-pta-nginx
            ports:
            - containerPort: 80
              name: web
            volumeMounts:
            - name: static
              mountPath: /service/static
          - name: pta
            image: packtworkshops/the-docker-workshop:          chapter10-pta-web
            volumeMounts:
            - name: static
              mountPath: /service/static
      volumeClaimTemplates:
      - metadata:
          name: static
        spec:
          accessModes: [ "ReadWriteOnce" ]
          resources:
            requests:
              storage: 1Gi
    ```
    该文件创建一个名为`panoramic-trekking-app`的状态集。在`spec`部分定义了两个容器，名称分别为`nginx`和`pta`。此外，体积索赔以名称`static`定义，并安装在两个容器上。
3.  Deploy the `panoramic-trekking-app` StatefulSet with the following command:
    ```
    kubectl apply -f statefulset.yaml
    ```
    这将为我们的应用创建一个状态集:
    ```
    StatefulSet.apps/panoramic-trekking-app created
    ```
4.  Create a `service.yaml` file with the following content:
    ```
    apiVersion: v1
    kind: Service
    metadata:
      name: panoramic-trekking-app
      labels:
        app: panoramic-trekking-app
    spec:
      ports:
      - port: 80
        name: web
      type: LoadBalancer
      selector:
        app: panoramic-trekking-app
    ```
    该服务定义有一个`LoadBalancer`类型来访问带有标签`app: panoramic-trekking-app`的容器。港口`80`将可以进入吊舱的`web`港口。
5.  Deploy the `panoramic-trekking-app` Service with the following command:
    ```
    kubectl apply -f service.yaml
    ```
    这将创建如下服务资源:
    ```
    Service/panoramic-trekking-app created
    ```
6.  Get the IP of the Service with the following command:
    ```
    minikube service panoramic-trekking-app --url
    http://192.168.64.14:32009
    ```
    按照以下步骤存储 IP 以访问全景徒步应用。
7.  Open the administration section of the Panoramic Trekking App in the browser with `http://$SERVICE_IP/admin`:
    ![Figure 10.24: Admin login view ](img/B15021_10_24.jpg)
    图 10.24:管理员登录视图
8.  Log in with the username `admin` and the password `changeme` and add new photos and countries:
    ![Figure 10.25: Admin setup view ](img/B15021_10_25.jpg)
    图 10.25:管理设置视图
9.  Open the Panoramic Trekking App at `http://$SERVICE_IP/photo_viewer` in the browser:
    ![Figure 10.26: Application view ](img/B15021_10_26.jpg)
图 10.26:应用视图
照片查看器应用显示照片和国家已从数据库中检索。它还表明应用设置正确，运行正常。
在本练习中，您已经将全景徒步旅行应用部署到了 Kubernetes 集群。您从使用 Helm 图表的数据库开始，然后为应用创建 Kubernetes 资源。最后，您从浏览器访问了该应用，并通过添加新照片对其进行了测试。在本练习结束时，您已经发现了如何使用正式的 Helm 图表来部署数据库，创建了一系列 Kubernetes 资源来连接数据库和部署应用，并从集群中收集信息来访问应用。活动中的步骤涵盖了部署在 Kubernetes 集群中的容器化应用的生命周期。
# 11 时。Docker 保安
## 活动 11.01:为全景徒步旅行应用设置 seccomp 配置文件
**解决方案**:
您可以通过多种方式创建`seccomp`配置文件，阻止用户执行`mkdir`、`kill`和`uname`命令。这些步骤展示了实现这一点的一种方法:
1.  如果本地还没有`postgres`映像，执行以下命令:
    ```
    docker pull postgres
    ```
2.  使用系统上的`wget`命令获取默认`seccomp`配置文件的副本。将您正在下载的文件命名为`activity1.json` :
    ```
    wget https://raw.githubusercontent.com/docker/docker/v1.12.3/profiles/seccomp/default.json - O activity1.json
    ```
3.  Remove the following three commands from the profile to allow us to further lock down our image. Open the `activity1.json` file with your favorite text editor and remove the following lines from the file. You should look to remove *lines 1500* to *1504* to remove the `uname` command, *669* to *673* to remove the `mkdir` command, and *lines 579* to *583* to remove the `kill` command from being available:
    ```
    1500                 {
    1501                         "name": "uname",
    1502                         "action": "SCMP_ACT_ALLOW",
    1503                         "args": []
    1504                 },
    669                 {
    670                         "name": "mkdir",
    671                         "action": "SCMP_ACT_ALLOW",
    672                         "args": []
    673                 },
    579                 {
    580                         "name": "kill",
    581                         "action": "SCMP_ACT_ALLOW",
    582                         "args": []
    583                 },
    ```
    您可以在以下链接找到修改后的`activity1.json`文件:[https://packt.live/32BI3PK](https://packt.live/32BI3PK)。
4.  使用`postgres`映像测试新配置文件，方法是在运行时分配一个新配置文件，在运行映像时使用`–-security-opt seccomp=activity1.json`选项:
    ```
    docker run --rm -it --security-opt seccomp=activity1.json postgres sh
    ```
5.  As you are now logged on to the running container, test the new permissions of the profile you have now assigned to the container. Perform a `mkdir` command to create a new directory on the system:
    ```
    ~ $ mkdir test
    ```
    该命令应显示一个`Operation not permitted`输出:
    ```
    mkdir: can't create directory 'test': Operation not permitted
    ```
6.  To test that you are no longer able to kill the running processes, you need to start something up. Start the `top` process and run it in the background. Do this by typing `top` into the command line and then adding `&`, before pressing *Enter* to run the process in the background. The following command then provides the process command (`ps`) to see what processes are running on the container:
    ```
    ~ $ top & ps
    ```
    从下面的输出可以看出，`top`进程运行为`PID 8`:
    ```
    PID   USER         TIME    COMMAND
     1    20002        0:00    sh
     8    20002        0:00    top
    10    20002        0:00    ps
    [1]+  Stopped  (tty output)       top
    ```
    注意
    基于`postgres`映像的容器中没有`ps`和`top`命令。但是，这不会导致任何问题，因为运行带有任何随机 pid 号的`kill`命令就足以证明不允许运行该命令。
7.  Kill the top process by using the `kill -9` command followed by the PID number of the process you want to kill. The `kill -9` command will try to force the command to stop:
    ```
    ~ $ kill -9 8
    ```
    你应该看到`Operation not permitted`:
    ```
    sh: can't kill pid 8: Operation not permitted
    ```
8.  Test the `uname` command. This is a little different from the other commands:
    ```
    ~ $ uname
    ```
    您将得到一个`Operation not permitted`输出:
    ```
    Operation not permitted
    ```
这是一个很好的活动，表明如果映像被攻击者访问，我们仍然可以做很多事情来限制对映像的处理。
## 活动 11.02:扫描您的全景徒步旅行应用映像以查找漏洞
**解决方案:**
我们可以通过多种方式扫描映像中的漏洞。以下步骤是实现这一点的一种方法，使用 Anchore 来验证`postgres-app`映像对于我们的应用来说是否安全:
1.  标记映像并将其推送到 Docker Hub 存储库中。在这种情况下，用我们的存储库名称标记`postgres-app`映像，并将其标记为`activity2`。我们还将其推送到我们的 Docker 中心仓库:
    ```
    docker tag postgres /postgres-app:activity2 ; docker push /postgres-app:activity2