2.1建立开发环境
为了构建Android应用程序或创建Android虚拟设备，我们需要配置开发环境，以便运行这
些应用程序。因此，我们需要做的第一件事是下载Java开发工具包（JDK），其中包括
Java运行时环境（JRE）：
1. 为了下载JDK，我们需要访
问 http://www.oracle.com/technetwork/java/javase/downloads/index.html，并根据我们所
在的平台下载JDK7。
就像下载它并运行下载的可执行文件一样简单。在以下屏幕截图中，你可以看到我的系
统上安装了Java：
2. 一旦我们下载并安装了JDK，我们需要在我们的系统上设置环境变量，以便可以从任何
路径执行Java。
对于Windows用户，我们需要右键单击 MyComputer（我的电脑）图标，然后选
择 Properties（属性）选项。
第二章准备实验环境
17
3. 接下来，我们需要从顶部选项卡列表中选择 Advancedsystemsettings（高级系统设置）
选项：
4. 一旦我们进入了 SystemProperties（系统属性）对话框，在右下角，我们可以看
到 EnvironmentVariables...（环境变量）选项。当我们点击它，我们可以看到另一个
窗口，包含系统变量及其值，在 Systemvariables（系统变量）部分下：
5. 在新的弹出对话框中，我们需要单击 Variables（变量）下的 PATH文本框，并键入
Java安装文件夹的路径：
第二章准备实验环境
18
对于MacOSX，我们需要编辑 /.bash_profile文件，并将Java的路径追加到 PATH变
量。
在Linux机器中，我们需要编辑 ./bashrc文件并附加环境变量行。这里是命令：
$nano~/.bashrc
$exportJAVA_HOME=`/usr/libexec/java_home-v1.6`orexportJAVA_HOME=`/usr/libex
ec/java_home-v1.7`
你还可以通过从终端运行以下命令来检查Java是否已正确安装和配置：
$java--version
6. 一旦我们下载并配置了Java的环境变量，我们需要执行的下一步是下
载 http://developer.android.com/sdk/index.html中提供的AndroidADT包。
ADT包是由Android团队准备的一个完整的包，包括配置了ADT插件，AndroidSDK工
具，Android平台工具，最新的Android平台和模拟器的Android系统映像的Eclipse。
这大大简化了早期下载和使用AndroidSDK配置Eclipse的整个过程，因为现在的一切
都已预先配置好了。
7. 一旦我们下载了ADT包，我们可以解压它，并打开Eclipse文件夹。
8. 启动时，ADT包将要求我们配置Eclipse的工作区。 workspace（工作空间）是所有
Android应用程序开发项目及其文件将被存储的位置。在这种情况下，我已将所有内容保
留默认，并选中 Usethisasthedefaultanddonotaskmeagain（使用此为默认值，
不再询问我）复选框：
第二章准备实验环境
19
9. 一旦完全启动，我们可以继续创建Android虚拟设备。Android虚拟设备是配置用于特
定版本的Android的模拟器配置。模拟器是与AndroidSDK软件包一起提供的虚拟设
备，通过它，开发人员可以运行正常设备的应用程序，并与他们在实际设备上进行交
互。这对于没有Android设备但仍然想创建Android应用程序的开发者也很有用。
注
这里要注意的一个有趣的特性是，在Android中，模拟器运行在ARM上，模拟的所有的事情
与真实设备完全相同。然而，在iOS中，我们的模拟器只是模拟环境，并不拥有所有相同组
件和平台。
2.2创建Android虚拟设备
为了创建Android虚拟设备，我们需要执行以下操作：
1. 访问Eclipse的顶部栏，然后点击Android图标旁边的设备图标。这将打开一个新
的 AndroidVirtualDeviceManager（Android虚拟设备管理器）窗口，其中包含所有虚
拟设备的列表。这是一个很好的选择，通过点击 New（新建）按钮，创建一个新的虚拟
设备。
2. 我们还可以通过从终端运行android命令并访问工具，然后管理AVD来启动Android虚
拟设备。或者，我们可以简单指定AVD名称，并使用模拟器 -avd[avd-name]命令来启
动特定的虚拟设备。
这会打开一个新窗口，其中包含需要为Android虚拟设备配置的所有属性（尚未创
建）。我们将配置所有选项，如下面的截图所示：
第二章准备实验环境
20
3. 一旦我们点击 OK并返回到AVD管理器窗口，我们将看到我们新创建的AVD。
4. 现在，只需选择新的AVD，然后单击 Start...（开始）来启动我们创建的虚拟设备。
它可能需要很长时间，来为你的第一次使用加载，因为它正在配置所有的硬件和软件配
置，来给我们真正的电话般的体验。
5. 在以前的配置中，为了节省虚拟设备的启动时间，选中 Snapshot复选框也是一个不错的
选择。
6. 一旦设备加载，我们现在可以访问我们的命令提示符，并使用android命令检查设备配
置。此二进制文件位于安装中的 /sdk/tools文件夹下的 adt-bundle文件夹中。
7. 我们还要设置位于 sdk文件夹中的 tools和 platform-tools文件夹的位置，就像我们之
前使用环境变量一样。
8. 为了获取我们系统中已连接（或加载）的设备的详细配置信息，可以运行以下命令：
第二章准备实验环境
21
androidlistavd
我们在下面的屏幕截图中可以看到，上面的命令的输出显示了我们系统中所有现有
Android虚拟设备的列表：
9. 我们现在将继续，使用ADB或AndroidDebugBridge开始使用设备，我们在上一章中
已经看到。我们还可以通过在终端中执行 emulator-avd[avdname]命令来运行模拟器。
2.3渗透测试实用工具
现在，让我们详细了解一些有用的Android渗透测试实用工具，如AndroidDebugBridge，
BurpSuite和APKTool。
AndroidDebugBridge
AndroidDebugBridge是一个客户端-服务器程序，允许用户与模拟器器或连接的Android
设备交互。它包括客户端（在系统上运行），处理通信的服务器（也在系统上运行）以及作
为后台进程在模拟器和设备上上运行的守护程序。客户端用于ADB通信的默认端口始终是
5037，设备使用从5555到5585的端口。
让我们继续，通过运行 adbdevices命令开始与启动的模拟器交互。它将显示模拟器已启动
并运行以及连接到ADB：
C:\Users\adi0x90\Downloads\adt-bundle\sdk\platform-tools>adbdevices
Listofdevicesattached
emulator-5554device
在某些情况下，即使模拟器正在运行或设备已连接，你也不会在输出中看到设备。在这些情
况下，我们需要重新启动ADB服务器，杀死服务器，然后再次启动它：
C:\Users\adi0x90\Downloads\adt-bundle\sdk\platform-tools>adbkill-server
C:\Users\adi0x90\Downloads\adt-bundle\sdk\platform-tools>adbstart-server
*daemonnotrunning.startingitnowonport5037*
*daemonstartedsuccessfully*
第二章准备实验环境
22
我们还可以使用 pm（包管理器）工具获取所有已安装的软件包的列表，这可以在ADB中使
用：
adbshellpmlistpackages
如下面的屏幕截图所示，我们将获得设备上安装的所有软件包的列表，这在以后的阶段可能
会有用：
此外，我们可以使用 dumpsysmeminfo然后是 adbshell命令，获取所有应用程序及其当前内
存占用的列表
我们还可以获取 logcat（这是一个读取Android设备事件日志的工具），并将其保存到特定
文件，而不是在终端上打印：
adblogcat-d-f/data/local/logcats.log
第二章准备实验环境
23
此处的 -d标志指定转储完整日志文件的并退出， -f标志指定写入文件而不是在终端上打
印。这里我们使用 /data/local位置，而不是任何其他位置，因为这个位置在大多数设备中
是可写的。
我们还可以使用 df命令检查文件系统以及可用空间和大小：
在AndroidSDK中还有另一个很棒的工具，称为MonkeyRunner。此工具用于自动化和测试
Android应用程序，甚至与应用程序交互。例如，为了使用10个自动化触摸，敲击和事件来
测试应用程序，我们可以在 adbshell中使用 monkey10命令：
root@generic:/#monkey10
monkey10
Eventsinjected:10
##Networkstats:elapsedtime=9043ms(0msmobile,0mswifi,9043msnotconnected)
这些是一些有用的工具和命令，我们可以在ADB中使用它们。我们现在将继续下载一些我们
将来使用的其他工具。
BurpSuite
我们将在接下来的章节中使用的最重要的工具之一是Burp代理。我们将使用它来拦截和分
析网络流量。应用程序中的许多安全漏洞可以通过拦截流量数据来评估和发现。在以下步骤
中执行此操作：
1. 我们现在从官方网站 http://portswigger.net/burp/download.html下载burp代理。下载
并安装后，你需要打开Burp窗口，它如以下屏幕截图所示。你还可以使用以下命令安
装Burp：
java–jarburp-suite.jar
我们在下面的截图中可以看到，我们运行了Burp并显示了默认界面：
第二章准备实验环境
24
2. 在BurpSuite工具中，我们需要通过单击 Proxy（代理）选项卡并访问 Options（选
项）选项卡来配置代理设置。
3. 在 Options选项卡中，我们可以看到默认选项被选中，这是 127.0.0.1:8080。这意味着
从我们的系统端口 8080发送的所有流量将由BurpSuite拦截并且在它的窗口显示。
4. 我们还需要通过选择默认代理 127.0.0.1:8080并单击 Edit（编辑）来检查隐藏的代理选
项。
5. 接下来，我们需要访问 Requesthandling（请求处理）选项卡，并选
中 Supportinvisibleproxying(enableonlyifneeded)（支持不可见代理（仅在需要时
启用））复选框：
6. 最后，我们使用 invisible选项运行代理：
第二章准备实验环境
25
7. 一旦设置了代理，我们将启动我们的模拟器与我们刚刚设置的代理。我们将使用以下模
拟器命令来使用 http-proxy选项：
emulator-avd[nameoftheavd]-http-proxy127.0.0.1:8080
我们可以在下面的截图中看到命令如何使用：
因此，我们已经配置了Burp代理和模拟器，导致所有的模拟器流量现在会通过Burp。在这
里，你在访问使用SSL的网站时可能会遇到问题，我们将在后面的章节中涉及这些问题。
APKTool
Android逆向工程中最重要的工具之一是APKTool。它为逆向第三方和封闭的二进制Android
应用程序而设计。这个工具将是我们在未来章节中的逆向主题和恶意软件分析的重点之一。
为了开始使用APKTool，请执行以下步骤：
1. 为了下载APKTool，我们需要访
问 https://code.google.com/p/android-apktool/downloads/list。
在这里，我们需要下载两个文件： apktool1.5.3.tar.bz2，其中包含apktool主二进制文
件，另一个文件取决于平台-无论是Windows，MacOSX还是Linux。
2. 一旦下载和配置完成，出于便利，我们还需要将APKTool添加到我们的环境变量。此
外，最好将APKTool设置为环境变量，或者首先将其安装在 /usr/bin中。然后我们可
以从我们的终端运行APKTool，像下面的截图这样：
第二章准备实验环境
26
总结
在本章中，我们使用AndroidSDK，ADB，APKTool和BurpSuite建立了Android渗透测试
环境。这些是Android渗透测试者应该熟悉的最重要的工具。