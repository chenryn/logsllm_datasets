the discussion on how to retroﬁt existing apps to utilize
DROIDCAP’s new security features to Section V-B.
1) Isolated processes:
Isolated processes are easily de-
clared in the app’s manifest and are realized as a service com-
ponent that has no privileges in the system and can be bound
to by the host app processes. By default, an isolated process
cannot retrieve any Binder handles from the CM and AMS and
also cannot successfully open any ﬁle handles. Thus, isolated
processes force the app developer to make an all-or-nothing
decision: either compartmentalized code executes with all
privileges of the ambient authority or with no privileges at all.
In DROIDCAP, the app developer can gradually increase the
privileges of an isolated process by passing Binder capabilities
to the bound service of the isolated process. Since the transient
UID does not matter for permission enforcement but only the
access rights of the process’s Binder capability, this provides
a path to the developer to start from a completely deprivileged
protection domain to build a least-privilege component. Adding
Capsicum to DROIDCAP would further allow delegation of ﬁle
handles to isolated processes.
2) Interstitial AdMob advertisements: Different security
extensions [52], [59], [29], [71] proposed privilege separation
for advertisement libraries and virtually all of them relied
on sandboxing the libraries in a separate app (UID) through
system modiﬁcations [52], [59], [71] or app rewriting [29].
We analyzed the most popular AdMob advertisement library
and found that for interstitial ads the library does not have
any tightly coupled operational or state dependencies with its
host app. Thus, interstitial ads can be deployed in a separate
Activity component that executes in its own process and that is
simply invoked by calling the Activity. With DROIDCAP, this
easily allows us to compartmentalize the app into a logical app
as depicted in Figure 7, where the advertisement library runs
in a separate process to which the host app delegates only a
subset of its privileges (here location) while withholding other
permissions (contacts). On DROIDCAP this is accomplished
using the Binder driver APIs or, more efﬁciently, using the
per-component use-permission attribute in the app manifest.
V. EVALUATION
In this section, we present the performance, security, and
functionality evaluation of DROIDCAP. We tested DROIDCAP
on different Android (6.0, 7.1, 8.0, 9.0) and Linux kernel
versions (3.4, 4.4, 4.9). However, all subsequent evaluations
11
Application Sandbox (UID)Logical ApplicationMain ProcessProcess 1Process 2Process 3ActivityServiceMain ActivityActivityServiceContacts PermissionLocation PermissionMain ActivitybecomesDelegate/revoke capabilitesAd libLocation CapabilityContacts CapabilityContacts CapabilityAd libLocation CapabilityTABLE I.
PERFORMANCE (IN CYCLES) FOR BINDER TRANSACTIONS.
System
Android
DroidCap
Mean
34,679
36,231
σ
46,360
53,786
Min
9,866
9,626
25%
Median
16,404
16,327
22,004
21,877
75%
32,961
34,314
Max
369,388
453,305
used Android 9 (android-9.0.0 r1) and a Linux kernel v4.9.
We ran all tests on a HiKey960 device that has an octa-core
1.8 GHz Cortex-A53 CPU and 3 GB RAM.
A. Performance Evaluation
For kernel and native layer micro-benchmarks, we used
the ARM Performance Monitoring Unit to capture CPU cycle
counts. Measurements at the application framework utilized the
system timer via System.nanoTime. Through all measurements,
CPU clock was ﬁxed at 1.875 GHz. All results are the average
computations of 50,000 trials, unless stated otherwise. All
margins of error are computed for a 95% conﬁdence level.
To compare DROIDCAP with stock Android, we measured
the required CPU cycles for 500k Binder transactions in the
Binder driver for both systems under equal setups, i.e., both
systems boot up, do not start any app, and execute a sequence
of taps on the screen using Android’s application exerciser
monkey to generate transactions. Since both measurement
series included a few extreme outliers (of three or more mag-
nitudes lower and higher than mean), we eliminated in both
series the measurements below the 5th percentile and above
the 95th percentile. Table I summarizes the overall results.
On average DROIDCAP induces an overhead of 3.44% (1,552
cycles) to transactions. A closer look at the types of transac-
tions reveals that 6.15% of all transactions contained Binder
handles and 10.67% contained Binder nodes—both of which
require more processing from the driver. The weighted average
considering the frequencies of transaction types is 1,538 cycles
or 3.41%. Using Mann-Whitney and Kolmogorov-Smirnov
tests, we can attribute those differences in means (U >1011,
p<.001) and frequency distribution (D=0.037, p<.001) to our
modiﬁcations. In general, both systems exhibit a very skewed
frequency distribution, a very large standard deviation, and a
median that is higher than the 75th percentile.
We performed further micro-benchmarks that separately
measure the operations of DROIDCAP to gain deeper insights
on the contributing factors to the overall overhead. Retrieving
and copying the access rights of the caller process to the
callee’s TLS adds a negligible overhead of 61.78 CPU cycles
(σ=26.77±0.37) in comparison to the 34,679 cycles consumed
for each Binder transaction in stock Android. However, once
the access rights are copied to the address space of the callee
process, it can use those information locally for access control
enforcement. To understand the positive impact of this feature
we consider the following two examples: First, the Contacts
content provider requires only 10.99µs (σ=4.14±0.1) to re-
trieve access rights from its TLS, decode them, and enforce
access control of READ and WRITE permissions, where in
stock Android it has to issue a round-trip IPC to the PMS
that takes 226.40µs (σ=51.16±1.14). Second, although LMS
is hosted on the same process as PMS, thus permissions checks
are answered process-locally, DROIDCAP achieves an almost
seven-fold gain (11.18µs) for access control in comparison to
the 77.02µs required for permissions checks in stock Android.
Fig. 8. Overhead for URI permission enforcement.
In the following, we consider the penalty incurred by
copying string permissions to callee’s TLS upon the invocation
of a Binder capability that carries them by focusing on URI
permissions as an example (see Figure 8). In general, this
is an expensive operation that produces a linearly increasing
overhead (slope=0.0142) with increasing number of delegated
URIs. Although this increase is considerable in comparison to
the average time of a Binder transaction, our measurements
show that DROIDCAP would still outperform stock Android
for overall access control enforcement when the calling process
holds delegated URIs of size 21.4kb or less. Since URIs are
strings, it is hard to give an exact number of URIs that have
to be delegated in DROIDCAP to incur a penalty. However, as
an example, a process that has been granted 53 URIs, each of
which is a 100 ASCII-characters long, would yield almost the
same overall overhead for access control check in DROIDCAP
(296.83µs) in comparison to the round-trip IPC check to the
AMS in stock Android (307.15µs). Unfortunately there exist
no statistics on the average number of delegated URIs between
apps, but we would argue that a developer who delegates this
amount of URIs might not follow best practices. If indeed this
high number of delegated URIs is needed, DROIDCAP might
require the app to make a lookup in the capability attribute
using ioctl calls to the Binder driver instead of copying them.
The average overhead of the Binder kernel module for del-
egating and revoking a Binder capability using bound services
and Intents is 562 (σ=427±3.72) and 2,851 (σ=2,396±22.57)
CPU cycles, respectively. Note that we ignore measuring the
user space overhead, because such operations are identical
to standard IPC operations where a Binder handle is being
transferred as part of the transaction data. Delegation and
revocation of a single string permission through direct ioctl
using a known PID of the delegatee or the Binder handle that
was previously delegated consumes on average 34,035 cycles
(σ=14,038±123), which translates to 17.72µs that are used for
looking up Binder reference(s) and string comparisons.
Speciﬁc to the current design of DROIDCAP is the reporting
of permissions from PMS to the CM. In worst case, where all
system permissions are granted to a single app, the aggregated
overhead of granting/revoking a new permission as measured
from the PMS is 36.51µs (σ=11.26±0.2µs). In general, re-
porting permissions is a rare operation because users tend to
grant apps permissions upon their request and rarely revoke
them afterwards. When processes request Binder capabilities
from the CM, DROIDCAP takes 0.29µs (σ=0.11µs) to com-
pute the access rights. A well designed app should perform this
operation only once over the lifespan of the calling process.
12
861703446881370274654921097221916439220100200300400500600700DroidCap: Encode and copy URIs to callee’s TLSDroidCap: Read, decode, and control accessStock Android: Permission check with AMS (IPC)Size of delegated URI permissions (bytes)Time (s)μB. Security Evaluation of Kontalk
We retroﬁtted an open source messaging app, called
Kontalk,
to use Binder capabilities. The app requests 24
permissions, 11 of which are dangerous, and it can access
the Internet. The app consists of 37 components and includes
about 30 third-party libraries.
We started compartmentalizing the app by executing each
component in its own process and then reconstructing the
connections between the components via IPC to preserve
app’s functionality. Unfortunately, compartmentalizing existing
apps is, in general, a hard problem [65], since components
might share a state, and requires app developers to adopt
distributed app development to build logical apps consisting
of different processes connected via message passing. Ideally,
app developers should be supported in this task of compart-
mentalizing their apps, for instance through new tools and
frameworks [26]. Android apps are not different in this regard.
Through dynamic and static analysis of the top apps on the
Google Play-Store, we found that none of those apps could be
automatically compartmentalized. We attribute that to several
programming practices that expect the app to run on a single
process and which are widely used in the analyzed apps, such
as (i) sharing class variables and singletons across components,
(ii) invoking app’s Binder services locally instead of binding
and invoking them over IPC, (iii) broadcasting messages within
the process using LocalBroadcastManager, and (iv) sharing
primitive data via SharedPreferences, which, by design, do not
synchronize reads and writes requests from different processes.
Thus, to compartmentalize apps, we need to replace those im-
peding practices with secure alternatives that are semantically
equivalent. Our strategy is to use a ContentProvider to share
primitive class variables and SharedPreferences data, bind to
local Binder services, and use explicit Intent broadcasts.
To identify the permissions that are used by each com-
ponent in Kontalk, we used an existing permission map [8]
and complemented it with missing permissions enforced at
the ﬁlesystem and the native layer. We ﬁnd that 17 out of
the 37 components do not need any permission. The other
20 components need between 1 to 8 permissions each. This
is a ﬁtting example of violating least privilege because in
the normal execution on stock Android, each component
and library inherits all granted permissions. After retroﬁtting
Kontalk to use Binder capabilities, every component runs with
least privileges. This also concerns the privileges of third-
party libraries included in those components, e.g., TrueTime
and BarcodeScanner inherited privileges were reduced to no-
permissions, and Camera and Internet, respectively. Using
Binder and Capsicum capabilities combined would further
reduce the BarcodeScanner privileges to only the Camera.
C. Backwards Compatibility
To evaluate DROIDCAP’s backward compatibility, we dy-
namically tested the top 50 apps of 44 categories on Play
using the monkey exerciser on stock Android and afterwards
on DROIDCAP. We ﬁxed the seed and the number of events
(1000) for the monkey to produce the exact sequence and
types of events for all apps. We ﬁltered all apps that already
crashed or failed to install on stock Android, which left a
test set of 1,752 apps. Our results show that about 2% of the
apps failed the test on DROIDCAP due to runtime exceptions,
which we manually inspected and found to not be caused
by DROIDCAP’s changes but uncontrolled variants, such as
network delays and resources loading time. This demonstrates
the backwards compatibility of DROIDCAP with existing apps.
VI. DISCUSSION
Different solutions for type enforcement, information ﬂow
control (IFC), and app virtualization also realize ﬁne-grained,
ﬂexible per-process/per-component privileges and consider the
delegation of access rights. However, despite their apparent
parallels to our work, their objectives differ from DROIDCAP’s:
that is providing app developers with a path for efﬁciently
compartmentalizing their apps and applying the principle of
least privilege to their apps’ components. Nevertheless, we ﬁnd
that there are great opportunities for Binder capabilities and
those solutions to complement each other.
Type enforcement: SELinux’ security types are assigned
to processes and not UIDs and hence restrict each process’
access rights. Research, such as FlaskDroid [15], has shown
how this type enforcement can be extended into the application
framework services and apps, also providing a per-process
permission enforcement. But, SELinux (or mandatory access
control in general) was not designed to support efﬁcient app
compartmentalization but to enforce static system policies that
are highly inﬂexible in practice and require administrative
intervention for updates. Moreover, SELinux types do not scale
as efﬁciently as capabilities, e.g., every possible permission
combination would require a dedicated security type, easily
causing a type explosion. Nevertheless, mandatory access
control (with SELinux on Android) has been considered as a
strong building block for capability systems [65], [38], which
enforces basic information ﬂow policies that can be statically
analyzed and that harden the trusted computing base for
capability management. Also in our integration of Capsicum,
we rely on the beneﬁcial combination of capabilities and
SELinux (see Section IV-E).
IFC: Different works (e.g., [45], [46], [70], [31]; see
Section III) address the intricate problem of controlling prop-
agation of sensitive data once it was released to another, data
processing app and preventing accidental or deliberate leakage
of that data. Data ﬂow labels, in most cases ﬂoating labels, on
apps (components) or processes determine which data the app
(component) or process can access or to which sinks data can
be leaked. The supported policies of those solutions are usually
very ﬂexible. However, the goal of controlling information ﬂow
differs from the access control a capability system aims at and,
hence, the existing IFC solutions do not ﬁt well for the setting
we are concerned with. For instance, delegation of access
rights in the IFC solutions is often coupled to label propagation
on explicit data ﬂows but does not ﬁt well
to delegating
or even representing access rights to call system services.
Further, labels are used to separate different security contexts
in memory and on storage for non-interference. Changing the
labels (e.g., endorsement) is usually tied to restarting the app
(component) or process, or poly-instantiating the app (compo-