runs/second to 1,153 runs/second. We ﬁnd that this loss is not
noticeable by a user. In contrast, popular extensions like LastPass
(with over a million users) drop the score to 1494 runs/second.
Second, we measured the performance overhead of ShadowCrypt
as the number of encrypted input/output elements changed. We
conducted these tests on an Intel Core i7 3.40GHz with 16GB of
RAM.
We created pages with between 1 and 1000 input elements and
between 1 and 1000 encrypted messages (each 5 characters long).
We measured the extra time ShadowCrypt takes to replace these
elements with their isolated shadows containing the cleartext.
Figure 9 and Figure 10 plot the median time overhead for 100
trials for each case. We ﬁnd that ShadowCrypt has an overhead
of 151 ms for 100 inputs and 24 ms for 100 encrypted messages.
The PGP variant was much slower at decrypting messages, taking 4
seconds on just 10 encrypted messages.
1101001000100001101001000Time taken to rewrite (ms)Number of input fields1101001000100001101001000Time taken to rewrite (ms)Number of encrypted strings1101001000100001101001000Time taken to rewrite (ms)Number of encrypted strings0.1110100100010000101001000100001000001000000Time taken to encrypt (ms)Message length (characters)0.1110100100010000101001000100001000001000000Time taken to encrypt (ms)Message length (characters)Application
Str
In
Reddit comments
page
Twitter user page
Facebook proﬁle
page
196
33
25
6
13
1
OH
(ms)
61
49
23
Load
(ms)
2,507
(2%)
3,017
(2%)
2,984
(1%)
Load2
(ms)
731 (8%)
1,492
(3%)
2,177
(1%)
Table 1: Load time of a typical page in popular web applications. “Str”
is the number of user-generated strings present on the page. “In” is the
number of text inputs on the page. “OH” is the estimated overhead from
using ShadowCrypt. “Load” is page load time (without ShadowCrypt) and
the overhead as a percentage of this time. “Load2” is the load time with the
cache populated and the overhead as a percentage of this time.
Application
OpenEMR
WordPress
Blogger
Tumblr
Reddit
Pinterest
Asana
Trello
Wunderlist
Etherpad classic
Gmail
Twitter
Facebook
Fields encrypted
freeform patient information
posts and comments
posts (plaintext only) and comments
text posts
text submissions and comments
submission descriptions and comments
task titles, descriptions, and comments
task titles, descriptions, and comments
tasks titles, descriptions, and comments
document and chat
subject and body
tweets
status updates and comments
Table 2: List of case studies that retained prominent application functionality
and the ﬁelds encrypted.
We tested the ShadowCrypt extension on a wide variety of pop-
ular applications that handle textual data, which is the focus of
ShadowCrypt. While encrypting data always impacts some appli-
cation functionality, we ﬁnd that for a broad range of applications,
encrypting textual data still retains prominent functionality.
ShadowCrypt’s contribution is providing the option of encrypting
text and putting the user back in control of her data. ShadowCrypt
is a general mechanism for secure input/output in web applications.
Our experience (discussed below) highlights the challenges and
limitations of moving to encrypted data for web applications. Fu-
ture work can investigate how we can enable lost functionality by
modifying application code.
7.1 Applications Retaining Prominent Func-
tionality
Table 2 lists 14 applications that retained prominent functionality
when we used them with ShadowCrypt. Table 2 also lists the data
encrypted with ShadowCrypt. After switching to encrypted data,
typical functionality affected includes targeted advertising and rich
text output. Encryption also disables application-mediated data
sharing; instead the user needs to explicitly share keys with users
she wants to share data with.
OpenEMR manages a database of patient data. Typical input
to the OpenEMR application is free-form text. ShadowCrypt was
able to encrypt all the free-form text ﬁelds including patient name,
symptoms, physician notes, and so on. We used the deterministic
encryption scheme to allow search, but this meant that non-keyword
searches stopped working. For example, searching for “Jo” would
previously return patients named “John,” but would not under our
deterministic encryption scheme. Nonetheless, this did demonstrate
that ShadowCrypt is scalable to applications with a large number of
user input ﬁelds with no additional effort.
We also tested publishing applications, namely WordPress, Red-
dit, Blogger, Tumblr, and Pinterest. For all these applications,
ShadowCrypt was able to support encrypted post-titles, posts, and
comments. Per Section 3.4, ShadowCrypt does disable rich-text
input/output including turning URLs in plaintext to links.
For all the applications above, the decrypted post title correctly
showed up in the page body. However, ShadowCrypt could not
replace the value in the title tag (shown in the tab/window bar),
since HTML does not allow markup (i.e., the shadow tree) in the
title element.
We also tested ShadowCrypt with popular task management appli-
cations such as Asana, Trello, and Wunderlist (each of which has
millions of users [1, 11, 15]). We used ShadowCrypt to encrypt any
textual task data. These three services all supported task descriptions
and comments, which we were able to encrypt with ShadowCrypt.
Additionally, all three of these services support realtime sync across
multiple clients, which continued to work.
ShadowCrypt did break Asana’s “diff” feature. Asana uses this
to highlight modiﬁcations to a particular task but in the case of
encrypted tasks, the server-side diff mangled the encoded ciphertext.
A possible solution for this issue is that ShadowCrypt offer a
platform for side-effect free computations; the server can provide
JavaScript code (e.g., diff) that ShadowCrypt could execute on the
decrypted data in an isolated environment. This solution could
also mitigate the formatting/sanitization issue discussed above. Of
course, this would require modiﬁcations to the application.
We also used Gmail with ShadowCrypt. We were able to use
ShadowCrypt to encrypt the subject and body of email messages.
Gmail was not able to serve relevant ads next to email threads; it
mistakenly showed ads related to short letter sequences present in
the ciphertext. One feature that broke due to ShadowCrypt was the
message preview in message lists (e.g., at the inbox)—the snippet
preview in the thread list view would truncate the body’s ciphertext
and ShadowCrypt refuses to decrypt the invalid ciphertext.
We also used ShadowCrypt to tweet on Twitter and post status
updates on Facebook. In both cases, ShadowCrypt successfully
encrypted and decrypted the messages. Since the servers do not
see the contents of the messages, they cannot detect “mentions” of
another user and send notiﬁcations. While it is trivial to modify
ShadowCrypt to not encrypt any word following an @-sign, it is not
clear whether users would understand the security implications of
this change.
Twitter’s length limitation combined with our lengthy ciphertext
encoding meant that using ShadowCrypt limited users to 45 charac-
ter tweets. A specialized encoding scheme will fare better,5 but we
did not investigate this further.
Encryption and Key Sharing. ShadowCrypt allows a user to
switch to encrypted data. The user can now choose the strength
of encryption and collaborators to share keys with. For example,
deterministic encryption schemes allow search functionality but
without the security offered by random encryption.
The user also needs to share keys with other users to share data.
For example, social applications such as Twitter, Facebook, Gmail
or any blogging application, the user will need to manually share
the encryption keys. While an additional step, it is a necessary one
to put the user back in control of her data.
5Recall that Twitter’s length limitation is really 140 Unicode code-
points, not ASCII characters.
Application
Google Drive
Spreadsheets
Google Drive Docs
Ofﬁce 365
Etherpad lite
Comments
cannot evaluate encrypted formulas;
static data only
custom keystroke-based input;
would require application redesign
to encrypt
Table 3: List of applications that did not work or had severe loss of function-
ality with ShadowCrypt.
In the case of applications like Wunderlist (for task management),
the need for sharing keys and the encryption strength depends on
the user. Often, users rely on task-management applications for
personal use without sharing their data with others. We also found
these list-based applications usable without search functionality.
Again, this is a user-speciﬁc decision.
7.2 Applications with degraded functionality
In other cases, turning on ShadowCrypt severely degraded applica-
tion functionality or ShadowCrypt was unable to achieve encryption
for textual data. Table 3 lists these applications and the reasons for
their lost functionality.
Spreadsheets. On using ShadowCrypt with the Google Drive
Spreadsheet application, we immediately hit an error: our cipher-
text encoding scheme surrounds the cipher-text with a sentinel value
that starts with an =-sign. The spreadsheet program interprets this
as an (invalid) formula and throws an error.
We were able to work around this by using a different sentinel
string. This experience does point to a fundamental issue: whatever
sentinel string we choose, we always run the risk of interfering with
some application.
The ShadowCrypt+Google Spreadsheets application works best
with textual data and Google Forms, which in turn ﬁll in data into
the spreadsheet. Using ShadowCrypt does break functionality like
sorting and arithmetic on numeric values.
Word Processing Applications. We tested Google Drive, Ofﬁce
365, Etherpad classic, and Etherpad lite. Of these, ShadowCrypt
only succeeded in encrypting the document in Etherpad classic.
On investigating further, we found that Google Drive Docs, Ofﬁce
365 Word, and Etherpad lite, did not rely on standard HTML input
widgets. Instead, these applications relied on keystroke events to
build their own text editing functionality. In view of such a design,
it is unlikely that a ShadowCrypt like system can ever work with
these applications without changes.
Further, while ShadowCrypt does work with Etherpad classic, it
does break the author attribution feature. Etherpad classic tries to
maintain the author information of each character in the document.
Due to the nature of random encryption, each changed character
appears as if the user rewrote the entire document. One direction for
future work is how to support such a design while still maintaining
the privacy of document content.
8. RELATED WORK
We provided a detailed comparison to closely related work in
Section 2.1. Here, we discuss literature we did not cover earlier.
Privly [39] is a browser extension that allows users to share en-
crypted text on existing web applications, somewhat like Shadow-
Crypt. Instead of storing encrypted text with the web application,
Privly stores the encrypted text on a third-party dedicated storage
server. Privly creates a hyperlink to the message with the decryption
key in the hyperlink’s fragment identiﬁer [33]. Privly sends this
hyperlink to the web application, in place of the text. Thus, the
decryption key is never sent to the storage server, but it is visible
to the web application’s client-side code. In contrast, ShadowCrypt
does not trust the web application with the decryption key. Addi-
tionally, Privly requires a dedicated storage server, which increases
the cost and reduces performance. Finally, Privly relies on replacing
hyperlinks with iframes that renders the decrypted text, which has
performance and usability limitations (Section 2.1).6
Virtru [48] is another browser extension, which focuses on email.
Virtru supports Outlook, Gmail, and Yahoo! Mail. Users of the
Virtru extension interact with Virtru’s own server to exchange en-
cryption keys. This allows the service to revoke access to messages
after they have been sent. ShadowCrypt, by contrast, is more gen-
eral, and targets any web application. ShadowCrypt users share keys
through any channel other than the untrusted site, so there is no way
to revoke access to a message that has already been sent.
A number of researchers proposed cryptographic constructs that
allow an untrusted server to “blindly” compute on encrypted user
data. Constructions for general functions include Fully Homomor-
phic Encryption [16], Functional Encryption [6, 42], Oblivious
RAM [21], and secure computation in either the circuit [51] or
the RAM model [23, 30]. Researchers have also proposed more
efﬁcient schemes for speciﬁc functionalities, such as searchable
encryption [7, 44].
While these schemes offer strong security guarantees, they have
a high performance cost and often require a rewrite of application
code handling encrypted data. As a result, we do not currently
rely on them but these schemes are not at odds with ShadowCrypt.
Applications that want to rely on such schemes only need to modify
their code and implement the scheme in ShadowCrypt as another
type of encryption algorithm.
Instead of relying on encrypted data in the cloud, another option