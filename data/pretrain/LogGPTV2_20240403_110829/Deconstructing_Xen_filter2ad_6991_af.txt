Guest
Iago Attack
10
Case Studies
XSA-111 (CVE-2014-8866). A piece of hypercall parameter translation code assumes that only the lower 32 bits of a
64-bit register variable are used, violation of which will trigger a BUG_ON that kills the hypervisor. This condition can be
deliberately violated by an HVM guest by temporarily changing to 64-bit mode and pass an invalid 64-bit parameter. In
Nexen, the vulnerable code runs in the context of a Xen slice because it can only be invoked by a memory management
hypercall. The modiﬁed BUG_ON logic will only kill current Xen slice VM when it is triggered.
XSA-44 (CVE-2014-1917). The logic processing SYSENTER instruction fails to clear NT ﬂag in EFLAGS register, which
will lead to a nested GP fault in some situations. This is considered by the original Xen a fatal fault, and will cause the
hypervisor to crash. In Nexen, the vulnerable code runs in the context of a Xen slice because it,is part of code emulation
subsystem. The modiﬁed GP fault handler will kill only the current Xen slice and VM in this situation.
CVE-2014-3967 (one of two CVEs in XSA-96). The implementation of a HVM control operation (HVMOP_inject_msi)
fails to do sufﬁcient check for possible conditions of an IRQ. This allows a NULL pointer to be de- referenced, which will
lead to a page fault that crashes the hypervisor. In Nexen, this piece of code runs in the context of a Xen slice because it
is part of code emulation subsystem. The modiﬁed page fault handler will kill only the current Xen slice and VM after
the fault.
XSA-5 (CVE-2011-3131). A VM directly controlling a PCI(E) device could issue DMA request to an invalid address.
Although this request will be properly rejected, the error handling logic is not preemptable and takes quite some time.
Repeating this invalid operation will live lock the CPU. In unmodiﬁed Xen, the hypervisor will probably be hung and
result in a DoS. In Nexen, this piece of code belongs to the I/O subsystem, which runs in Xen slice context. The CPU
under attack will be detected by the watchdog due to losing response for a long time. The NMI sent by the watchdog will
interrupt the task and its handler will kill the attacker’s Xen slice and VM.
XSA-74 (CVE-2013-4553). The two locks ’page_alloc_lock’ and ’mm_rwlock’ are not always taken in the same order.
A malicious guest could possibly trigger a deadlock due to this ﬂaw, leading to a host DoS in the unmodiﬁed Xen. In
Nexen, this piece of code, although deprecated now, should belong to domain control subsystem in Xen slice context. The
deadlock will cause one or more CPUs to lose response and trigger watchdog’s NMI. Its handler will kill the attacker’s
Xen slice and VM.
XSA-150 (CVE-2015-7970). Under certain circumstance, the hypervisor will search an HVM domain in Populate-on-
Demand mode for memory to reclaim. This operation runs without preemption. The guest VM could manipulate its
memory in a way that the search becomes a liner scanning, which will hang the hypervisor for a long time. In unmodiﬁed
Xen, this means a host DoS. In Nexen, this logic, belonging to memory management subsystem, works in the context of
Xen slice. Similar to previous examples, the task will be interrupted by watchdog’s NMI and the attacker’s Xen slice and
VM will get killed in the handler.
XSA-149 (CVE-2015-7969). The VCPU pointer array in a domain data structure is not freed on domain teardown. This
memory leak, when accumulated over time, could exhaust the host’s memory. In an unmodiﬁed Xen, this will lead to
host DoS. In Nexen, this leak will not accumulate overtime. The VCPU data structure, one of per-domain data structures,
is allocated by Nexen’s secure allocator and assigned to the domain’s Xen slice. Its memory region is recorded in the
allocator’s memory pool along with the domain’s ID. On domain teardown, the memory pool is traversed to search for all
memory regions bound to it. Leaked memory will be detected and recycled during this process.
XSA-108. Xen’s code emulation for APIC erroneously emulates read and write permissions for 1024 MSRs where there
are actually 256 MSRs. Although writing out of boundary is replaced by no-op which will do nothing, the read operation
can go beyond the page set up for APIC emulation and potentially get sensitive data from the hypervisor or other VMs. In
Nexen, this piece of code runs in the context of Xen slice because it is part of code emulation subsystem. Since sensitive
data of other VMs and the hypervisor are all hidden (unmapped) from the Xen slice, the attacker will either read her own
data or read an unmapped page, which leads to a page fault that kills her own VM and Xen slice.
XSA-52. This vulnerability appears on AMD CPU, which is different from Nexen’s platform. Given an equivalent
implementation on that platform, this attack can be stopped. XSAVE/XSTORE, commonly used to save and restore user
running state, is misused so that information other than FOP, FIP and FDP x87 registers are ignored while saving and
restoring states with a pending exception. This leaks the running state of previous VM to the attacker. In Nexen, the gate
keeper has an internal save for important running states. When returning to guest, registers not restored will be detected
and ﬁxed, which wipes the information left by the previous user.
In XSA-40, an incorrect stack pointer is set for the guest in an operation that can be triggered by a user program. In
unmodiﬁed Xen, a malicious user could crash the guest VM by triggering this bug.In Nexen, the incorrect value of stack
pointer will be detected and ﬁxed by the gate keeper before returning to the guest. The guest VM will keep working
normally.
In XSA-91, Xen fails to context switch the ’CNTKCTL_EL1 ’register, which allows a malicious guest to change the timer
conﬁguration of any other guest VM. This vulnerability appears on ARM platform.Given a system equivalent to Nexen
implemented on ARM, the malicious value of timer register will be detected and ﬁxed by the gate keeper before returning
to the victim guest VM. The guest VM will keep working normally.
TABLE X.
ANALYSIS OF ATTACKS NEXEN CAN NOT PREVENT
Analysis
This type of vulnerabilities results from the inherent error of codes in the shared part of the system, e.g., domain
building(XSA-83). Since the shared part is critical in our system and has relatively higher privilege, exploiting a bug
in this part will allow the attacker to do almost anything destructive towards the whole system. Due to the design of Nexen,
these destructive results can not be prevented.
Xen includes some features that are not essential for virtualization, e.g., PMU(XSA-163). Nexen currently does not consider
vulnerabilities in these parts. As a result, they are shared by the whole system by default and vulnerabilities in them can
lead to the compromising of the whole system. However, this problem can be solved by extending Nexen and covering
these features.
Nexen only limit memory usage of Xen slices and guest VMs. Other hardware resources are left uncontrolled and shared
by the whole system, e.g., disk (XSA-130). If an attacker wants to exhaust one of these resources, the host could crash.
They can be solved by extending our architecture to cover these non-memory resources and protect and isolate them in a
similar way as memory.
They are caused by bugs in hardware. For example, in XSA-9, after executing a certain sequence of safe operations, the
CPU could unexpectedly lock itself up. These vulnerabilities can not be avoided unless the manufacturer of the hardware
ﬁxes the bug or the system refuses to boot when detecting these problematic hardware.
The gate keeper monitors every transition between the hypervisor and guest VMs. Typically, if an attacker wants to attack
the guest VM kernel or leak some information to the guest, the running state of the VM will be compromised to carry
malicious or sensitive data. If the compromised data is simple enough so that a previous state and the operation number
are sufﬁcient to check the validity of a new data, Nexen can stop this attack. However, if the attack is well designed like
an Iago attack, which attacks without breaking the isolation, and verifying which requires a recomputing, Nexen can not
prevent it currently.
13
TABLE XI.
H/W S/W ENVIRONMENT
Host system
Xen 4.5
Host CPU
Intel Core i7-4470 @ 3.4GHz * 8
Host memory
16GB
Guest system
Ubuntu 16.04-1 (HVM)
Guest VCPU number
4
Guest memory
4GB
TABLE XII.
BENCHMARK CONFIGURATION
benchmark
round
conﬁg
IOzone
SPEC CPU2006
Kernel Compiling
iperf3
50
9
20
20
4KB block size, 20MB ﬁle size, 4 threads
real world workload
linux 4.7, default conﬁg
TCP package
where the frequency of both events dramatically drops, the
overhead of Nexen can be further reduced.
VII. RELATED WORK
Hypervisor Re-organization for Security. Besides the
systems mentioned in II-B, Nova [25] reorganized the hy-
pervisor to several per-VM hypervisors running in user mode
and one small privileged micro-hypervisor running in kernel
mode. The attacks from one VM can be limited in one per-
VM hypervisor. Min-V [23] uses reduce the TCB of the
hypervisor by removing all the unused code base dynamically,
which is called delusional boot. Min-V ﬁrst boots a guest
VM on a full-ﬂedged hypervisor, then takes a snapshot of
the VM and migrates it to the production platform with a
different hypervisor that disables all the virtual devices that
are not critical to running VMs, and restores the VM on
the new platform. SSC [10] proposes a solution to enable
multiple Dom0s, which is called “UDom0” that runs as user-
level service domains, and enforce the isolation between the
UDom0s. These works aimed to protect the hypervisor from
guest VMs by reducing the trusted computing base (TCB).
However, they only provide limited protection against attacks
from a malicious hypervisor.
Hypervisor Fault Tolerance. There are also many re-
searches that target hypervisor’s fault isolation and tolerance.
ReHype [20] tolerates hardware faults and hypervisor bugs by
microrebooting. It can preserve the state of all running VMs
so the recovery is transparent to the guest VMs. FTXen [18]
focuses on tolerating in-ﬁeld hardware errors of virtualization
software stack on relaxed hardware. It isolates the faults of
a relaxed core within the boundary of the guest VM running
on that core without affecting other VMs or the hypervisor.
Another way to isolate the fault
is nested virtualization,
e.g., the Turtles project [9] and CloudVisor [37]. Intel keeps
improving the hardware support for nested virtualization for
better performance, and recently Xen also adds support for
nested virtualization in its mainstream [16]. TinyChecker [30]
achieves similar goal with nested virtualization by adding
a small software layer for hypervisor failure detection and
recovery. These systems consider hardware faults and software
bugs instead of security vulnerabilities, thus they do not take
attacks like privilege escalation or bypassing the mechanism
of fault tolerance into consideration.
Hardware-assisted Hypervisor Security. NoHype [19],
[29] replaces the software hypervisor by hardware virtual-
ization extensions of processor and I/O devices. However
it loses the ﬂexibility of resource management brought by
virtualization. HyperSentry [5] leverages System Management
Mode (SMM) to protect the hypervisor’s control ﬂow. H-
SVM [17] and HyperWall [27] decouple memory management
and security protection. The hypervisor can manage all the
memory resource but cannot access the memory arbitrarily,
e.g., once some memory pages are assigned to a guest VM, the
hardware ensures that it cannot be accessed by the hypervisor
without explicitly sharing. Such design can effectively prevent
attacks from the hypervisor to guest VMs, but requires non-
trivial hardware modiﬁcations.
There are also many work on designing new hardware to
protect guest VMs from untrusted hypervisor [17], [28], [36].
Some of the design has already been deployed in commodity
hardware, e.g., Intel SGX [3], [15], [21]. Haven [8] success-
fully runs unmodiﬁed application inside enclave protected by
hardware from system software including operating system and
hypervisor. However, these systems usually consider the attack
from the malicious hypervisor, but does not consider some
types of attack against the hypervisor, e.g., the DoS attack
that crashes the entire host machine.
MMU Virtualization. HyperSafe [32] proposes a tech-
nique named non-bypassable memory lockdown that gathers
all the MMU operations to a speciﬁc module and deprivileges
other modules to do similar operations. HyperSafe focuses on
protection of hypervisor’s control ﬂow integrity (CFI), while
our system considers on Xen decomposition and deprivileging
besides CFI. Nested Kernel [14] further provides MMU vir-
tualization as a primitive of operating system to enhance the
security of all kinds of kernel modules. On ARM platform,
TZ-RKP [4] puts the MMU controller into a “secure world”
protected by ARM TrustZone [2]. SKEE [6] also depriving the
OS kernel from controlling MMU, but not using TrustZone for
better performance.
VIII. CONCLUSION
In this paper, we have conducted a systematic research on
all the 191 (effective) vulnerabilities published in Xen Security
Advisories (XSA), of which 144 (75.39%) are directly related
to the hypervisor itself. We then analyzed the distribution of
bugs among different components and consequences. Based on
the above analysis, we proposed a new architecture for Xen
hypervisor, named Nexen, that provides a way to deconstruct
Xen so that a malicious hypervisor cannot directly access the
data within a guest VM, and a malicious guest VM cannot
affect other VM or the host system. Nexen decomposes the
Xen hypervisor into different internal domains: multiple per-
VM slices and one shared service. Each internal domain has
least privilege and are isolated, so that even if one gets com-
promised, it will not affect other ones. We have implemented a
prototype of our design which can correctly handle 107 out of
144 vulnerabilities (74%). The performance evaluation results
also indicate that the overhead is negligible.
ACKNOWLEDGMENT
We thank the anonymous reviewers for their insight-
ful comments. This work is supported in part by National
14
Key Research and Development Program of China (No.
2016YFB1000104), China National Natural Science Founda-
tion (No. 61303011, 61572314 and 61525204), a research
grant from Huawei Technologies, Inc., National Top-notch
Youth Talents Program of China, Zhangjiang Hi-Tech pro-
gram (No. 201501-YP-B108-012), a foundation for the Author
of National Excellent Doctoral Dissertation of PR China
(TS0220103006), Singapore NRF (CREATE E2S2), NSF via
grant number CNS 1513687, and ONR via grant PHD.
REFERENCES
[1]
http://ipads.se.sjtu.edu.cn/xsa/.
[2] Tiago Alves and Don Felton. Trustzone: Integrated hardware and
software security. ARM white paper, 3(4):18–24, 2004.
[3]
Ittai Anati, Shay Gueron, Simon Johnson, and Vincent Scarlata.
novative technology for cpu based attestation and sealing.
volume 13, 2013.
In-
In HASP,
[4] Ahmed M Azab, Peng Ning, Jitesh Shah, Quan Chen, Rohan Bhutkar,
Guruprasad Ganesh, Jia Ma, and Wenbo Shen. Hypervision across
worlds: Real-time kernel protection from the arm trustzone secure
world.
the 2014 ACM SIGSAC Conference on
Computer and Communications Security, pages 90–102. ACM, 2014.
In Proceedings of
[5] Ahmed M Azab, Peng Ning, Zhi Wang, Xuxian Jiang, Xiaolan Zhang,
and Nathan C Skalsky. Hypersentry: enabling stealthy in-context
measurement of hypervisor integrity. In Proceedings of the 17th ACM
conference on Computer and communications security, pages 38–49.
ACM, 2010.
[6] Ahmed M Azab, Kirk Swidowski, Jia Ma Bhutkar, Wenbo Shen,
Ruowen Wang, and Peng Ning. Skee: A lightweight secure kernel-
level execution environment for arm. 2016.
[7] P. Barham, B. Dragovic, K. Fraser, S. Hand, T. Harris, A. Ho, R. Neuge-
bauer, I. Pratt, and A. Warﬁeld. Xen and the art of virtualization. In
Proc. SOSP. ACM, 2003.
[8] Andrew Baumann, Marcus Peinado, and Galen Hunt. Shielding ap-
plications from an untrusted cloud with haven. ACM Transactions on
Computer Systems (TOCS), 33(3):8, 2015.
[9] Muli Ben-Yehuda, Michael D Day, Zvi Dubitzky, Michael Factor,
Nadav Har’El, Abel Gordon, Anthony Liguori, Orit Wasserman, and
Ben-Ami Yassour. The turtles project: Design and implementation of
nested virtualization. In OSDI, volume 10, pages 423–436, 2010.
[10] Shakeel Butt, H Andrés Lagar-Cavilla, Abhinav Srivastava, and Vinod
Ganapathy. Self-service cloud computing. In Proceedings of the 2012
ACM conference on Computer and communications security, pages
253–264. ACM, 2012.
[11]
Intel Co. http://www.intel.com/content/www/us/en/processors/architectures-
software-developer-manuals.html.
[12] Patrick Colp, Mihir Nanavati, Jun Zhu, William Aiello, George Coker,
Tim Deegan, Peter Loscocco, and Andrew Warﬁeld. Breaking up
is hard to do: security and functionality in a commodity hypervisor.
In Proceedings of the Twenty-Third ACM Symposium on Operating
Systems Principles, pages 189–202. ACM, 2011.
[18] Xinxin Jin, Soyeon Park, Tianwei Sheng, Rishan Chen, Zhiyong Shan,
and Yuanyuan Zhou. Ftxen: Making hypervisor resilient to hardware
faults on relaxed cores. In 2015 IEEE 21st International Symposium
on High Performance Computer Architecture (HPCA), pages 451–462.
IEEE, 2015.
[19] E. Keller, J. Szefer, J. Rexford, and R.B. Lee. NoHype: virtualized
cloud infrastructure without the virtualization. In Proc. ISCA, 2010.
[20] Michael Le and Yuval Tamir. Rehype: enabling vm survival across
hypervisor failures. In ACM SIGPLAN Notices, volume 46, pages 63–
74. ACM, 2011.
[21] Frank McKeen, Ilya Alexandrovich, Alex Berenzon, Carlos V Rozas,
Hisham Shaﬁ, Vedvyas Shanbhogue, and Uday R Savagaonkar. Inno-
vative instructions and software model for isolated execution. In HASP,
page 10, 2013.
[22] Derek Gordon Murray, Grzegorz Milos, and Steven Hand. Improving
xen security through disaggregation.
In Proceedings of the fourth
ACM SIGPLAN/SIGOPS international conference on Virtual execution
environments, pages 151–160. ACM, 2008.
[23] Anh Nguyen, Himanshu Raj, Shravan Rayanchu, Stefan Saroiu, and
Alec Wolman. Delusional boot: securing hypervisors without massive
re-engineering.
In Proceedings of the 7th ACM european conference
on Computer Systems, pages 141–154. ACM, 2012.
[24]
Jerome H Saltzer and Michael D Schroeder.
The protection of
information in computer systems. Proceedings of the IEEE, 63(9):1278–
1308, 1975.
[25] U. Steinberg and B. Kauer. NOVA: A microhypervisor-based secure
In Proc. Eurosys, pages 209–222. ACM,
virtualization architecture.
2010.
[26] Michael M. Swift, Brian N. Bershad, and Henry M. Levy. Improving
the Reliability of Commodity Operating Systems. ACM Trans. Comput.
Syst., 23(1):77–110, February 2005.
[27]
[28]
[29]
J. Szefer and R.B. Lee. Architectural support for hypervisor-secure
virtualization. In Proc. ASPLOS, 2012.
J. Szefer and R.B. Lee. Architectural support for hypervisor-secure
virtualization. In Proceedings of ASPLOS, 2012.
Jakub Szefer, Eric Keller, Ruby B Lee, and Jennifer Rexford. Eliminat-
ing the hypervisor attack surface for a more secure cloud. In Proceed-
ings of the 18th ACM conference on Computer and communications
security, pages 401–412. ACM, 2011.
[30] Cheng Tan, Yubin Xia, Haibo Chen, and Binyu Zang. Tinychecker:
Transparent protection of vms against hypervisor failures with nested
virtualization. In IEEE/IFIP International Conference on Dependable
Systems and Networks Workshops (DSN 2012), pages 1–6. IEEE, 2012.
[31] Andrew S. Tanenbaum, Jorrit N. Herder, and Herbert Bos. Can We
Make Operating Systems Reliable and Secure? Computer, 39(5):44–
51, May 2006.
[32] Zhi Wang and Xuxian Jiang. Hypersafe: A lightweight approach
In 2010 IEEE
to provide lifetime hypervisor control-ﬂow integrity.
Symposium on Security and Privacy, pages 380–395. IEEE, 2010.
[33] Zhi Wang, Chiachih Wu, Michael Grace, and Xuxian Jiang. Isolating
commodity hosted hypervisors with hyperlock. In Proceedings of the
7th ACM european conference on Computer Systems, pages 127–140.
ACM, 2012.
[13] CVE.
Cve-2012-0217.
http://www.cve.mitre.org/cgi-
[34] Chiachih Wu, Zhi Wang, and Xuxian Jiang. Taming hosted hypervisors
bin/cvename.cgi?name=cve-2012-0217, 2012.
with (mostly) deprivileged execution. In NDSS. Citeseer, 2013.
[14] Nathan Dautenhahn, Theodoros Kasampalis, Will Dietz, John Criswell,
and Vikram Adve. Nested kernel: An operating system architecture for
intra-kernel privilege separation. ACM SIGPLAN Notices, 50(4):191–
206, 2015.
[15] Matthew Hoekstra, Reshma Lal, Pradeep Pappachan, Vinay Phegade,
and Juan Del Cuvillo. Using innovative instructions to create trustwor-
thy software solutions. In HASP, page 11, 2013.
[16] Nested
Virtualization
Support
in
Xen.
http://wiki.xenproject.org/wiki/Nested_Virtualization_in_Xen.
[17] Seongwook Jin, Jeongseob Ahn, Sanghoon Cha, and Jaehyuk Huh.
Architectural Support for Secure Virtualization under a Vulnerable
Hypervisor. In MICRO, 2011.
[35] Xen. https://xenbits.xen.org/xsa/, 2016.
[36] Yubin Xia, Yutao Liu, and Haibo Chen. Architecture support for
guest-transparent vm protection from untrusted hypervisor and physical
attacks. In HPCA, pages 246–257, 2013.
[37] Fengzhe Zhang, Jin Chen, Haibo Chen, and Binyu Zang. CloudVisor :
Retroﬁtting Protection of Virtual Machines in Multi-tenant Cloud with
Nested Virtualization. In Proc. SOSP, pages 203–216, 2011.
[38] Feng Zhou, Jeremy Condit, Zachary Anderson, Ilya Bagrak, Rob
Ennals, Matthew Harren, George Necula, and Eric Brewer. SafeDrive:
Safe and Recoverable Extensions Using Language-based Techniques. In
Proceedings of the 7th Symposium on Operating Systems Design and
Implementation, OSDI ’06, pages 45–60, Berkeley, CA, USA, 2006.
USENIX Association.
15