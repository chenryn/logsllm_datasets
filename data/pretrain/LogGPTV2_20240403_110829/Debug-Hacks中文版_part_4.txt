---
## Page 34
要启用整个系统的内核转储功能，首先需要将`ulimit -S -c`的值设置为`unlimited`。在早期版本中，只需在`/etc/initscript`中编写一个执行`ulimit`的脚本即可。然而，在最近的发行版中，多数系统已经不再使用`/etc/initscript`。以Fedora 9为例，可以按照以下步骤进行配置：

1. 编辑`/etc/profile`文件。
2. 在`/etc/sysctl.conf`中添加以下内容：
   ```bash
   kernel.core_pattern = |/usr/local/sbin/core_helper %t %e %p %C
   kernel.core_uses_pid = 0
   ```
3. 创建用户模式辅助程序`core_helper`，其内容如下：
   ```bash
   #!/bin/sh
   exec gzip - > /var/core/$1-$2-$3-$4.core.gz
   ```

通过这种方式，当发生内核转储时，会在`/var/core/`目录下生成压缩后的内核转储文件。

**示例：**
```bash
# 启用内核转储
ulimit -S -c unlimited > /dev/null 2>&1

# 查看生成的内核转储文件
$ ls /var/core/
1223269655-a.out-2834-18446744073709551615.core.gz
```

**注意：**
- 如果`kernel.core_uses_pid`设置为1，文件名末尾会添加`.PID`。
- 上述示例中，`kernel.core_uses_pid`设置为0，是因为我们改变了文件名中的PID位置。

---
## Page 35
### 表2-2 比特掩码对应的内存类型

| 比特 | 内存类型 |
| --- | --- |
| 0 | 匿名专用内存 |
| 1 | 匿名共享内存 |
| 2 | file-backed专用内存 |
| 3 | file-backed共享内存 |
| 4 | ELF文件映射（内核版本2.6.24以后的版本可以使用） |

从Linux内核版本2.6.23开始，可以通过`/proc/<pid>/coredump_filter`来选择性地转储各个进程的内存区段。这对于大规模应用程序尤其重要，因为它们通常使用多个进程和大量共享内存。如果所有进程都转储共享内存，会对磁盘造成巨大压力，并可能延长服务停止时间。

**设置方法：**
1. 使用比特掩码表示内存类型。
2. 例如，要跳过所有的共享内存区段，可以将`coredump_filter`设置为1。
3. 在`/etc/sysctl.conf`中添加以下设置：
   ```bash
   fs.suid_dumpable=1
   DAEMON_COREFILE_LIMIT='unlimited'
   ```

**示例：**
```bash
# 设置 coredump_filter
echo 1 > /proc/<pid>/coredump_filter

# 查看当前设置
cat /proc/<pid>/coredump_filter
```

**总结：**
- 通过`coredump_filter`可以排除不需要转储的内存区段。
- 最后重启系统以应用这些设置。

---
## Page 36
### GDB 调试器的基本使用方法

GDB 是 Linux 环境下的标准调试器，支持多种调试功能。以下是 GDB 的基本使用方法：

#### 准备
1. **编译带有调试信息的代码：**
   ```bash
   $ ./configure CFLAGS="-Wall -O2 -g"
   $ make
   ```

#### 启动 GDB
1. **启动 GDB：**
   ```bash
   $ gdb 可执行文件名
   ```
2. **通过 Emacs 启动 GDB：**
   ```bash
   M-x gdb
   ```

#### 设置断点
1. **设置断点：**
   ```bash
   (gdb) break 函数名
   (gdb) break 文件名:行号
   (gdb) break *地址
   (gdb) break +偏移量
   (gdb) break -偏移量
   ```

#### 运行程序
1. **运行程序：**
   ```bash
   (gdb) run 参数
   (gdb) start
   ```

#### 显示栈帧
1. **显示栈帧：**
   ```bash
   (gdb) backtrace
   (gdb) bt
   (gdb) where
   (gdb) info stack
   (gdb) info s
   ```

#### 显示变量
1. **显示变量：**
   ```bash
   (gdb) print 变量
   (gdb) p 变量
   ```

**示例：**
```bash
(gdb) b main
(gdb) run -a
(gdb) bt 3
```

**总结：**
- GDB 提供了丰富的调试功能，包括断点设置、继续运行等。
- 通过适当的设置，可以有效地调试复杂的程序。

---
## Page 37
### 优化选项对调试的影响

编译器提供了多种优化选项，可以显著提高程序的执行速度。然而，这些优化可能会导致调试时出现一些问题。以下是一些需要注意的事项：

1. **优化选项的影响：**
   - 优化可能会改变代码的执行顺序，使得调试时难以跟踪。
   - 局部变量可能被保存到寄存器中，无法直接显示其值。
   - 内联函数优化可能会去掉函数调用，使得在该函数上无法设置断点。

2. **建议：**
   - 在调试时，建议去掉优化选项。
   - 使用 `-g` 选项生成调试信息。
   - 使用 `-Werror` 选项将警告视为错误处理。

**示例：**
```bash
$ gcc -Wall -O2 -g -Werror -o my_program my_program.c
```

**总结：**
- 优化选项虽然可以提高性能，但会影响调试。
- 建议在调试时去掉优化选项，并生成调试信息。

---
## Page 38
### 断点和运行命令

GDB 提供了多种方式来设置断点和运行程序。以下是一些常用命令及其示例：

#### 设置断点
1. **设置断点：**
   ```bash
   (gdb) break 函数名
   (gdb) break 文件名:行号
   (gdb) break *地址
   (gdb) break +偏移量
   (gdb) break -偏移量
   ```

#### 运行程序
1. **运行程序：**
   ```bash
   (gdb) run 参数
   (gdb) start
   ```

**示例：**
```bash
(gdb) b iseq_compile
(gdb) b compile.c:516
(gdb) b *0x08116fd6
(gdb) b +3
(gdb) b main
```

**总结：**
- 通过 `break` 命令可以在函数名、行号或地址上设置断点。
- 使用 `run` 或 `start` 命令可以运行程序并暂停在断点处。

---
## Page 39
### 显示栈帧

GDB 提供了多种方式来显示程序的栈帧。以下是一些常用命令及其示例：

#### 显示栈帧
1. **显示所有栈帧：**
   ```bash
   (gdb) backtrace
   (gdb) bt
   (gdb) where
   (gdb) info stack
   (gdb) info s
   ```

2. **显示前 N 个栈帧：**
   ```bash
   (gdb) bt N
   (gdb) backtrace N
   ```

3. **显示最后 N 个栈帧：**
   ```bash
   (gdb) bt -N
   (gdb) backtrace -N
   ```

4. **显示所有栈帧及其局部变量：**
   ```bash
   (gdb) bt full
   (gdb) backtrace full
   ```

**示例：**
```bash
(gdb) bt 3
#0 vm_exec_core (th=0, initial=0) at vmexec.c:86
#1 iseq_setup (iseq=0x977dcf0, anchor=0xbfd5f01c) at compile.c:963
#2 iseq_translate_threaded_code (iseq=0x977dcf0) at compile.c:510
```

**总结：**
- 通过 `backtrace` 命令可以查看程序的调用栈。
- 可以指定显示前 N 个或最后 N 个栈帧。
- 使用 `bt full` 可以显示所有栈帧及其局部变量。

---
## Page 40
### 显示变量

GDB 提供了 `print` 命令来显示变量的值。以下是一些常用命令及其示例：

#### 显示变量
1. **显示变量：**
   ```bash
   (gdb) print 变量
   (gdb) p 变量
   ```

**示例：**
```bash
(gdb) p argc
$1 = 4
(gdb) p argv
$2 = (char **) 0xbfd5f264
```

**总结：**
- 通过 `print` 命令可以查看变量的值。
- 可以简写为 `p`。

---

希望这些优化后的文本能够更清晰、连贯和专业。如果有任何进一步的问题或需要更多帮助，请告诉我！