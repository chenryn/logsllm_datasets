# Xcode 7 Bitcode的工作流程及安全性评估
|
##### 译文声明
本文是翻译文章，文章来源：​Proteas of 360 Nirvan Team
译文仅供参考，具体内容表达以及含义原文为准。
**简介**
随着 Xcode 7 的发布,苹果为 Xcode 增加了一个新的特性 Bitcode [1]:
新的特性往往意味着新的攻击面。本文首先介绍什么是 Bitcode 及 Bitcode 相关的工作流程,在熟悉了 Bitcode 的工作流程后,接下来是评估
Bitcode 相关的攻击面,最后介绍针对各个攻击面的测试方法及目前的测试结果。
****
**什么是 Bitcode**
简单来说,Bitcode 是 LLVM-IR 在磁盘上的一种二进制表示形式。关于 Bitcode 详细描述,请参考[2],这里会用例子来让大家对
Bitcode 有个感性认识。
先写一个简单的 C 程序,功能是计算两个数的和,代码如下:
int add(int a, int b)
{
int c = a + b;
return c;
}  
---  
将如上程序保存为 add.c,然后我们将源程序编译成 Bitcode:
clang -emit-llvm -c add.c -o add.bc  
---  
执行如上命令会生成 add.bc,我们使用二进制编辑器打开生成的文件,查看文件内容:
由于 Bitcode 是 LLVM-IR 的二进制表示形式,如上图,在不了解编码方式的前提下基本不可读。下面我们把 Bitcode 转换成文本形式:
llvm-dis add.bc -o add.ll  
---  
用文本编辑器打开 add.ll,可以看到 add 函数的 LLVM-IR 内容如下:
; ModuleID = ‘add.bc’
target datalayout = “e-m:o-i64:64-f80:128-n8:16:32:64-S128”
target triple = “x86_64-apple-macosx10.11.0”
; Function Attrs: nounwind ssp uwtable
; 如下是 add() 对应的 LLVM-IR
; 可以注意到这种表示形式会申请很多变量,
; 感兴趣的同学可以了解下 Static Single Assignment (SSA)
define i32 @add(i32 %a, i32 %b) #0 {
%1 = alloca i32, align 4 ; 变量 1,4 字节空间,后续用来存放参数 a
%2 = alloca i32, align 4 ; 变量 2,4 字节空间,后续用来存放参数 b
%c = alloca i32, align 4 ; 变量 c,4 字节空间,后续用来存放结果 c
store i32 %a, i32* %1, align 4 ; 将 a 保存到变量 1 中
store i32 %b, i32* %2, align 4 ; 将 b 保存到变量 2 中
%3 = load i32, i32* %1, align 4 ; 将立即数 1 保存到变量 3 中
%4 = load i32, i32* %2, align 4 ; 将立即数 2 保存到变量 4 中
%5 = add nsw i32 %3, %4 ; 将变量 3 与变量 4 的和保存到变量 5 中
store i32 %5, i32* %c, align 4 ; 将变量 5 保存到结果 c 中
%6 = load i32, i32* %c, align 4 ; 将结果 c 保存到变量 6 中
ret i32 %6 ; 返回变量 6
}  
---  
对比源码与已经注释过的 add() 函数的 LLVM-IR 表示,大家应该对 LLVM-IR 有个感性认识了,下面我们一起看下 Bitcode 的工作流程。
**工作流程**
苹果关于工作流程的描述:” When you archive for submission to the App Store, Xcode compiles
your app into an intermediate representation. The App Store then compiles the
bitcode down into the 64- or 32-bit executables as necessary.”
如上的工作流程可以分为两个阶段:
1.在将应用上传到 AppStore 时,Xcode 会将程序对应的 Bitcode 一起上传。
2.AppStore 会将 Bitcode 重新编译为可执行程序,供用户下载。
下面会将 Bitcode 相关的完整的工作流程分解为如下几个问题或子过程并分别做说明:
1.Where is the Bitcode?
2.嵌入 Bitcode 的方法
3.从 Bitcode 生成可执行程序的方法
Where is the Bitcode?
参考苹果的描述,只有在 Archive 时才会生成 Bitcode,于是建立了一个测试工程:
执行 Archive,然后查看生成的包结构:
经过分析在如上的目录中并没有直接找到 Bitcode,接下来检查生成的 MachO。使用 MachOView 加载生成的 MachO,结果如下图:
从上图可以看到最终的可执行程序中多了 LLVM 相关的 Segment 与 Section。继续查看对应的 Section 的信息:
如上图,Section __bundle 中保存的是一个 xar 文档,提取出 xar 文档,然后使用如下命令解开文档:
解开:xar -x -f XXX.xar  
---  
解开后,可以看到 Bitcode 文件。
总结:程序对应的 Bitcode 被 Xcode 打包成 xar 文档,嵌入的 MachO 中。
下面我们看下在 MachO 中嵌入 Bitcode 的方法。
嵌入 Bitcode 的方法
方法一
通过对比 Archive 与非 Archive 时的编译参数,发现只要在如下图所示的位置添加编译参数:-fembed-bitcode,即可让 Xcode
普通编译时也在 MachO 中嵌入 Bitcode:
方法二
方法一虽然很方便,但是 IDE
做了太多工作,不便于理解具体过程,接下来我们自己编译可执行文件。从源代码生成可执行程序主要分为:编译、链接两个过程,为了控制这两个过程,下面会讲解
Makefile 的配置,及这两个过程用到的参数。
在使用 Makefile 编译 iOS 程序时,有些通用的配置,如下的通用配置,供大家参考:
SDK_iOS := $(shell xcodebuild -version -sdk iphoneos Path)
CC_iOS := $(shell xcrun –sdk iphoneos –find clang)
LD_iOS := $(CC_iOS)
SYS_ROOT = -isysroot $(SDK_iOS)
SDK_SETTINGS_iOS = $(SYS_ROOT) -I$(SDK_iOS)/usr/include
-I$(SDK_iOS)/usr/local/include
MIN_VER_iOS = -miphoneos-version-min=8.0
ARCH_iOS = -arch arm64  
---  
以 main.m 为例说明编译需要的参数:
CC_FLAGS_COMMON = -fblocks -std=gnu99 -fobjc-arc -g -fembed-bitcode
CC_FLAGS=-x objective-c $(ARCH_iOS) $(CC_FLAGS_COMMON)
COMPILE_iOS_OBJ=$(CC_iOS) $(MIN_VER_iOS) $(SDK_SETTINGS_iOS) $(CC_FLAGS)
$(COMPILE_iOS_OBJ) -c main.m -o main.o  
---  
将 main.o,AppDelegate.o,ViewController.o 链接成可执行程序的参数:
LDFLAGS=$(SYS_ROOT)
-dead_strip
-fembed-bitcode
-fobjc-arc -fobjc-link-runtime
LINK_iOS_BIN=$(LD_iOS) $(ARCH_iOS) $(MIN_VER_iOS) $(LDFLAGS)
LDFLAGS_CUSTOM=-framework Foundation -framework UIKit
$(LINK_iOS_BIN) $(LDFLAGS_CUSTOM) AppDelegate.o ViewController.o main.o -o
XBCTest  
---  
大家把如上的 Makefile 片段稍加修改,整理到一个 Makefile 文件中,就可以通过 make 命令嵌入 Bitcode 到可执行程序。
方法三
在这个方法中我们会将上面的步骤进一步分解,具体过程为:
源码àBitcodeàxarà可执行程序
源码àBitcode
在这个过程中我们将 iOS 应用的源码编译成 Bitcode,下面会 main.m 为例来说明使用的参数:
CC_FLAGS_COMMON_BC = $(CC_FLAGS_COMMON)
COMPILE_iOS_32_BC = $(CC_iOS) -cc1 -x objective-c $(CC_FLAGS_COMMON_BC)
-triple thumbv7-apple-ios8.0.0 -disable-llvm-optzns -target-abi apcs-gnu
-mfloat-abi soft $(SYS_ROOT)
COMPILE_iOS_64_BC = $(CC_iOS) -cc1 -x objective-c $(CC_FLAGS_COMMON_BC)
-triple arm64-apple-ios8.0.0 -disable-llvm-optzns -target-abi darwinpcs