beanalyzed.Finally,sincelibrariescanhavehundredsoffunctionsintheirAPI,wemustautomaticallygeneratetestscenariosandallowdeveloperstotweakthem,insteadofrequiringthemtowritetestsfromscratch.InthispaperweintroduceLFI,atoolforautomatedlibraryfaultinjection.Wewishtomakefaultinjectioneasytoadoptinthedevelopmentofgeneral-purposesoft-ware,whereprogrammersmustbeveryagileandaresub-jecttoconstraintsdifferentfromthoseencounteredinbuild-ingsafety-criticalsystems.LFIconsistsoftwoparts:apro-ﬁlerandacontroller.Theproﬁlerusesstaticanalysisoflibraries’binariestoextracttheirfaultproﬁlesandtode-terminethesidechannelsusedtocommunicatefailurein-formation(suchaserrnoinlibc).Theproﬁleralsogener-atesfaultinjectionscenarios.Thecontrollerusesproﬁlein-formationtosynthesizeaninterceptorlibrarythatcanthendriveautomatedinjectionoffaultscenarios.IntherestofthispaperweprovideanoverviewofLFI(§2),describetheLFIproﬁler(§3),faultscenariogen-eration(§4),andtheLFIcontroller(§5).WethenevaluateLFI(§6),surveyrelatedwork(§7),andconclude(§8).2.SystemOverviewThegoaloftheLFIfaultinjectoristogivetestersafast,easyandcomprehensivemethodtotestprogramrobustnessinthefaceoffailuresthatareexposedattheinterfacebe-tweensharedlibrariesandtheprogramsundertest.Ween-visionLFIbeingusednotonlybytestersandresearchersevaluatingtheirsoftwareprototypes,butalsobycustomerswhowanttovalidateclosed-sourceproducts,orinbench-marksthatcompareinasystematicwaythefault-toleranceofdifferentapplications.LFIcanalsobeusedasanexplo-rationtool,tounderstandthebehaviorofthird-partycode.LFIcanbedownloadedfromhttp://lfi.epfl.ch/.UsingLFIconsistsoftwosteps:(a)proﬁlethetargetap-plication’ssharedlibrariestodetermineasetofmeaningfulfaultstoinject,and(b)conductfaultinjectionexperimentsusingvariousfaultscenarios.ThisisreﬂectedinLFI’sar-chitecture(Figure1).TesterspointLFIatatargetapplicationandtheproﬁlerautomaticallyﬁndswhichsharedlibrariestheapplicationlinkstoandthenproﬁlesthem.Foreachlibrary,itdeter-minestheexportedfunctionsand,foreachexportedfunc-tion,thepossibleerrorreturnvalues—werefertothisin-formationasthelibrary’sfaultproﬁle.LFIdoesnotre-quiresymbolsandworksonbothstrippedandunstrippedlibraries;ofcourse,foralibrarytobeuseful,librariesmustprovidesymbolsfortheirexportedfunctionsignatures.Sinceproﬁlesareobtainedautomatically,testersdonotneedtobefamiliarwiththeinternalsofthelibraries.How-ever,iftheydohavesuchknowledgeoradditionaldomain-speciﬁcinformation,theycanalterthegeneratedproﬁlestoobtainfaster,moreaccurateresults(e.g.,byremovingfunc-tionsorfaultsthatarenotofinterest).libc.profilelibssl.profile...      Application(MySQL, Oracle, ...)LFI Controllerlibc.solibssl.so...Test workloadtest logfault replay scripts    LFIProfilerfault scenarioFigure1.ArchitectureoftheLFIfaultinjector.TheLFIcontrollerreceivesthesefaultproﬁlesandcom-binesthemwithafaultscenariospeciﬁcationtodrivethefaultinjection.Thecontrollerisatransparentshiminter-posedbetweentheapplicationandthelibraries;itinterceptsthecallstolibrariesandinjectsthedesirederrorcodes.Inordertobeuseful“outofthebox”,LFIautomaticallygen-eratesasetofsimplefaultscenarios—exhaustiveinjectionandrandominjection—so,inmanycases,testersneednotdoanymanualwork.Thescenarioscan,however,befreelymodiﬁedaftertheautomaticgeneration.Weshowin§6howrandomfaultinjectionfoundapreviously-unknownbuginPidgin,apopularinstantmessengerclient.TheoutputofLFIexperimentsisatestreportandgener-atedscriptsthatcanreplaytheinjections,enablingdevelop-erstodebugandtestinmoredetailthescenariosofinterest.Theresultsinthereportcanpinpointbugsorweakspotsinthetargetsoftwarethatmaybegoodtargetsforfurtherexamination.Thereplayscriptscanthenbeincorporatedinregressiontestsuitesofthetargetsystem.3.LFIProﬁlerTheinterfaceofalibraryconsistsofasetoffunctions“exported”toprogramsthatusethelibrary.TheLFIproﬁlerstaticallyanalyzesthelibrarytoidentifytheerrorreturnval-uesforeveryexportedfunction(§3.1).Somelibrariespro-videadditionaldetailsabouterrorconditionsthroughvari-oussideeffects;LFIidentiﬁesthesesidechannelsaswell(§3.2).TheLFIproﬁlerthenoutputsafaultproﬁle(§3.3).3.1.ReturnCodeAnalysisWedesignedLFItoworkdirectlyonthelibraries’bina-ries,becauserequiringaccesstosourcecodewouldhamperthepracticalityofLFI.First,sourcecodemaybeunavail-able,asisthecaseformostoftheDLLsonMicrosoftWin-dowssystems.Second,obtainingsourcecodematchingtheexactversionsofthelibrariesbeingusedmaybedifﬁcult978-1-4244-4421-2/09/$25.00 c(cid:13)2009 IEEE
381
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:37:24 UTC from IEEE Xplore.  Restrictions apply. 
(e.g.,theoriginalGNUlibccodeisslightlydifferentfromtheversionusedbyRedHatLinux,whichinturndiffersfromtheversionusedbyUbuntuLinux).Third,handlinglargesourcecodebasesforalltherequiredlibraries,witheachonehavingitsownsetofcompileandbuildrequire-ments,wouldinvolvesubstantialmanualwork.WebelievethiswoulddeterpractitionersfromadoptingLFI.TheLFIproﬁlerdisassemblesthelibraryandidentiﬁesallexportedfunctions,alongwiththedependentfunctions,i.e.,otherinternalorexportedfunctionsthatareinvokedbytheexportedfunctions.Dependenciesaredeterminedrecur-sively,bothwithinthesamelibraryandotherlibrariescalledbythecurrentone.Itthenconstructsforeachfunctionacontrolﬂowgraph(CFG),liketheoneshowninFigure2.LFIusesplatform-speciﬁctools,suchaslddandobjdumponLinuxandSolaris,anddumpbinonWindows.start08048524:  8048524:  push   ebp8048525:  mov    ebp,esp8048527:  sub    esp,0x10804852a:  cmp    DWORD PTR [ebp+0x8],0x0804852e:  jne    8048539 8048539:  cmp    DWORD PTR [ebp+0x8],0x1804853d:  jne    8048546 8048530:  mov    DWORD PTR [ebp-0x4],0x08048537:  jmp    8048546 8048546:  mov    eax,DWORD PTR [ebp-0x4]8048549:  leave  804854a:  ret    804853f:  mov    DWORD PTR [ebp-0x4],0x5Figure2.Asimpleexampleofacontrolﬂowgraphforanexportedlibraryfunction.Inmostlibraries,returncodesareconstants,typicallyde-ﬁnedwith#definedirectives;thesecodesendupstoredinamemorylocationorregister(werefertobothoftheseaslocations).Foreachassignmentofaconstanttoalocation,thestaticanalyzerlooksforthepathsthroughtheCFGthatpropagatethisconstanttothereturnlocationinanexitba-sicblock.Formostapplicationbinaryinterfaces(ABIs)thereturnvalueisplacedinawell-deﬁnedlocation.Forexam-ple,inthecaseoftheIntelABI,thereturnvalueisplacedintheeaxregister,soweneedtoﬁndthepathsthatpropagateconstantstothelasteaxwritebeforeareturninstruction.Tomakethispathsearchefﬁcient,theLFIproﬁlertrans-formstheCFGG(V,E),whichhasbasicblocksB1,B2,...asvertices,intoanothergraphG′(V′,E′),withV′=V×{l1,l2,...},whereliarethelocationstowhichconstantsarewritten.E′={(,)|(Bs,Bd)∈E∧liispropagatedtoljbyBs}.Wesayliis“propagated”toljbybasicblockBifthecontentofliisusedtocomputeandwritethecontentsofljwithinB.Forcallstodepen-dentfunctions,weconsiderallofthedependentfunction’sreturnvalues(determinedrecursively)tobepropagated.Theproﬁleridentiﬁesallwritestothereturnlocationprecedingareturninstructionandsearchesfromthispointinreverse,toﬁndallpathsinG′alongwhichconstantscanbepropagatedtothatlocation.Onecouldthinkofthisalgo-rithmasa“reverse”constantpropagation.Constantfoldingisnotnecessary,sincecompilersautomaticallydothiswhengeneratingthelibrarycode,sothedisassembledcodeoffersnoopportunityforfurtherfolding.Wehavenotencounteredanyproblemsrelatedtopointeraliasinginpractice;itap-pearsthatmoderncompilersprefertousethesamecanoni-callocationtorefertothesevariables.Toreducethesearchspace,theproﬁlergeneratesG′on-demand,onlyexpandingthenodesofinterest.Inordertoavoidinjecting“obvious”non-faults,LFIcanoptionallyapplytwoheuristics.First,ittriestodistinguishsuccessfromerrorreturns,toavoidinjectingsuccessre-turns;thisheuristicremoves0-returnvaluesfromallfunc-tionsforwhichmorethanoneconstantreturnvaluewerefound(ifonly0wasfound,itislikelyanullpointerre-turn).Second,theLFIproﬁlereliminatesshortfunctionsthatreturn1or0andonlycheckforconditionsofthetypeisFile();LFIinfersthatneitherreturnvaluereﬂectsafailure.Sincebothheuristicsareunsound,theyaredisabledbydefaultinLFI—weprefertoriskinjectingsomenon-faultsratherthanmissvalidfaults.AspecialtypeofdependencyoccursintheCandC++standardlibraries(libcandlibstdc++):theywrapkernelsystemcalls,somanydependentfunctionsresideintheker-nel.LFIthereforeperformsstaticanalysisonthekernelim-ageaswell,toidentifytheerrorcodesthatoriginateinthekernelandmaybepropagatedbythelibraries.AnalternativetotheLFIapproachistoobtainerrorre-turncodesbyparsingdocumentation.Thisapproachhastwomaindrawbacks.First,theanalysiscannotbeaccurate,becausedocumentationoftenusesnaturallanguagethatispotentiallyconfusing,suchas“thesameerrorsthatoccurforlink(2)canalsooccurforlinkat()”inthelinkatmanpage,or“returns0ifsuccessful,apositiveerrorcodeoth-erwise”inthelibxml2documentation.Second,documentationcanbeinconsistent.E.g.,themodifyldtmanpageclaimsthreepossiblereturnval-ues(EFAULT,EINVALandENOSYS),yettheLFIproﬁlerfoundafourthone(ENOMEM),conﬁrmedthroughcodein-spection.Wefoundsimilarinconsistenciesinlibxml2,wherehtmlParseDocumentisallegedtoonlyreturn0or-1forsuccess/failure,butitturnsoutitcanalsoreturn1insomefailurecases.Suchdisparitiesbetweendocumen-tationandrealitycanbetheverysourceofprogrambugs,978-1-4244-4421-2/09/$25.00 c(cid:13)2009 IEEE
382
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:37:24 UTC from IEEE Xplore.  Restrictions apply. 
soaneffectivefaultinjectiontoolmustbeawareofthem.LFI’sfaultproﬁlescouldbeimprovedbasedondocumen-tation,butthisrequiresmanualvetting.Itispossibletoavoidanalyzingexportedlibraryfunc-tionsthatthetargetprogramnevercalls,andthussavesomeproﬁlingtime.InLFIweoptedtoproﬁleallexportedfunc-tionsofalibrary,becauseproﬁlingisfastanyway(∼20sec-ondsforthebiggestlibraries),andwewishtoreuseproﬁlesacrossmultipleprogramsoncetheyhavebeengenerated.TheLFIproﬁlerisrelativelyportable:itobtainstheex-portedsymbolsforasharedobjectﬁle,disassemblesit,andbuildsthecontrolﬂowgraph—thesearestepsthatareper-formedusingstandardtoolsonmostgeneral-purposeplat-forms.TheCFGanalysesareindependentoftheABIandplatformfeatures.Aswillbeseenin§6.3,theLFIpro-ﬁlercurrentlyworksforthreeplatforms:Linux/x86,Win-dows/x86andSolaris/SPARC.Limitations:Faultproﬁlesmayincludefalsepositives,i.e.,returncodesthatcanbereturnedbythecorrespondingfunctiononlywhencertaincombinationsofargumentsareprovided.Forexample,thereadfunctioninlibccanreturn-1andseterrnotoEWOULDBLOCKonlywhenitispassedanasynchronousﬁledescriptor.Inferringtherelationshipbetweenargumentscanbedoneusingsymbolicexecution,butthecurrentLFIprototypedoesnotsupportthisyet.IndirectcallscanposeachallengetoLFI’sinter-proceduralconstantpropagationanalysis.Forsuchcases,theLFIcontrollercoulddynamicallyresolveindirectcallsatruntimeandinjectthereturncodescorrespondingtothefunctionbeingcalled.However,priorwork[17]andourownexperienceindicatesthatindirectcallsarehighlyun-common,eveninevent-drivenobject-orientedcode.More-over,ouranalysisofreallibrariesfoundthatonly2.28%(758outof33,122)ofindirectcallscouldactuallyaffecttheproﬁler’saccuracyinstaticerrorcodepropagation.Intheory,indirectbranchescanmakebuildingtheCFGhard.However,weanalyzed9,633functionsin30com-monlyusedlibrariesandfoundthatonly0.13%branches(104outof78,292)wereindirect.TheLFIprototypecur-rentlyignorestheresultingCFGincompleteness.LFImustbeabletodisassemblethelibrariesinordertoanalyzethem;thismaynotworkifthecodeisobfus-cated.Fortunately,[17]reportsthatover99%disassemblyaccuracycanbeachievedincommercialgradeapplications.SincetheLFIproﬁleranddisassemblerarelooselycoupled,itispossibletouseasgoodadisassemblerasisavailable.3.2.Side-EﬀectsAnalysisBesideserrorreturnvalues,libraryfunctionsmaycom-municatetocallersadditionalinformationregardingtheen-counterederror,viachannelssuchasoutputparameters,globalvariables,orthreadlocalstorage(TLS)variables,likeerrno.TheLFIproﬁlerautomaticallydiscoversandanalyzessuchsideeffects.Sharedlibrariesonmostplatformsconsistofposition-independentcode(PIC),i.e.,machinecodethatexecutesproperlyregardlessofwhereitisloadedinmemory.InPIC,allinstructionsreferringtomemoryaddressesuserelativeaddressing.Forexample,inLinux,theebx/ecxregistersareloadedwiththeinstructionpointerinthefunctionpro-logueandsubsequentlyusedasabaseaddressforaccess-ingglobalorTLSvariables.TheLFIproﬁlerstartsoutbyﬁndingthepossiblereturncodesandthenitscanstheba-sicblocksthatcontaintheconstantassignments,searchingforpossiblewritestoglobal/TLSvariables.Thesewritesareidentiﬁedbasedontheuseofthebaseaddressforcom-putingthememorylocationtowriteto;propagatingerrorcodestotheselocationsisconsideredasideeffect.WeillustratewithanexamplefromGNUlibc,whereafunctionsetstheerrnoTLSvariableandplacesthereturnvalueintheeaxregisterafterasyscallreturnedanerror:1.callf85962.addecx,0x7c91c3.movecx,DWORDPTR[ecx-0x20]4.addecx,DWORDPTRgs:0x05.xoredx,edx6.subedx,eax7.movDWORDPTR[ecx],edx8.oreax,0xffffffffLine1usesthestandardPICwayofobtainingthecurrentinstructionpointer.Inlines2-4,itcomputestheaddressoftheerrnovariable.Lines5and6computethevaluetobestoredinerrnoasthenegativevalueofeax,inaccordancewiththeLinuxsystemcallstandard,andline7storesthevalueintoerrno.Finally,line8setsthereturnvalueofthefunctionto-1.Theproﬁlerﬁrstﬁndsline8,thendetectsthesideeffectbyanalyzingthecontainingbasicblock;itconcludesthatexposingtheerrorrequirestheinjectortoplace-1ineaxandalsoseterrnoaccordingly.Wetakeasimilarapproachforsideeffectsreﬂectedinoutputarguments,i.e.,whenthefunctionwritestoad-dressespassedinasarguments.Suchoutputargumentsarealwaysfoundatawellknownlocation—positiveoff-setsfromthebasestackpointerwhenusingframepointersontheIA32architecture,orstack/registercombinationsingeneral—sotheLFIproﬁlerdetectswritestoaddressesob-tainedfromsuchpositiveoffsets.E.g.,onIA32,wemodi-ﬁedthealgorithmusedtodetectpossiblereturnvaluessuchthatitperformsaforwardsearchandlooksforconstantpropagationstolocationsoftheform[ebp+??],insteadofeax.Ifachainofbasicblocksthatsetsthereturnvaluealsointersectsachainofblocksthatpropagatesaconstanttoan[ebp+??]location,weconsiderittobeasideeffect.978-1-4244-4421-2/09/$25.00 c(cid:13)2009 IEEE
383
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:37:24 UTC from IEEE Xplore.  Restrictions apply. 