### Introduction

In this paper, we introduce LFI (Library Fault Injector), a tool designed for automated fault injection in software libraries. Given that libraries can contain hundreds of functions within their API, it is impractical to require developers to write test cases from scratch. Instead, LFI aims to automatically generate test scenarios and allow developers to tweak them as needed. Our goal is to make fault injection more accessible in the development of general-purpose software, where programmers must be agile and face constraints different from those encountered in building safety-critical systems.

LFI consists of two main components: a profiler and a controller. The profiler uses static analysis of library binaries to extract fault profiles and determine the side channels used to communicate failure information (e.g., `errno` in `libc`). The profiler also generates fault injection scenarios. The controller then uses this profile information to synthesize an interceptor library, which can drive the automated injection of fault scenarios.

The rest of the paper is organized as follows: We provide an overview of LFI in Section 2, describe the LFI profiler in Section 3, discuss fault scenario generation in Section 4, and detail the LFI controller in Section 5. We evaluate LFI in Section 6, survey related work in Section 7, and conclude in Section 8.

### System Overview

The primary objective of the LFI fault injector is to provide testers with a fast, easy, and comprehensive method to test the robustness of programs in the face of failures exposed at the interface between shared libraries and the programs under test. We envision LFI being used not only by testers and researchers evaluating software prototypes but also by customers who want to validate closed-source products or in benchmarks that systematically compare the fault-tolerance of different applications. LFI can also serve as an exploration tool to understand the behavior of third-party code.

LFI can be downloaded from [http://lfi.epfl.ch/](http://lfi.epfl.ch/). Using LFI involves two steps:
1. Profile the target application's shared libraries to determine a set of meaningful faults to inject.
2. Conduct fault injection experiments using various fault scenarios.

This process is reflected in LFI's architecture (Figure 1). Testers point LFI at a target application, and the profiler automatically identifies the shared libraries linked to the application and then profiles them. For each library, it determines the exported functions and, for each exported function, the possible error return values—this information is referred to as the library's fault profile.

LFI does not require symbols and works on both stripped and unstripped libraries. However, for a library to be useful, it must provide symbols for its exported function signatures. Since profiles are obtained automatically, testers do not need to be familiar with the internals of the libraries. However, if they have such knowledge or additional domain-specific information, they can modify the generated profiles to obtain faster, more accurate results (e.g., by removing functions or faults that are not of interest).

**Figure 1. Architecture of the LFI fault injector.**

The LFI controller receives these fault profiles and combines them with a fault scenario specification to drive the fault injection. The controller acts as a transparent shim interposed between the application and the libraries; it intercepts calls to the libraries and injects the desired error codes.

To be useful "out of the box," LFI automatically generates a set of simple fault scenarios—exhaustive injection and random injection—so, in many cases, testers need not do any manual work. These scenarios can, however, be freely modified after automatic generation. In Section 6, we show how random fault injection found a previously-unknown bug in Pidgin, a popular instant messenger client.

The output of LFI experiments is a test report and generated scripts that can replay the injections, enabling developers to debug and test in more detail the scenarios of interest. The results in the report can pinpoint bugs or weak spots in the target software that may be good targets for further examination. The replay scripts can then be incorporated into regression test suites of the target system.

### LFI Profiler

The interface of a library consists of a set of functions "exported" to programs that use the library. The LFI profiler statically analyzes the library to identify the error return values for every exported function (Section 3.1). Some libraries provide additional details about error conditions through various side effects; LFI identifies these side channels as well (Section 3.2). The LFI profiler then outputs a fault profile (Section 3.3).

#### 3.1 Return Code Analysis

We designed LFI to work directly on the libraries' binaries because requiring access to source code would hamper the practicality of LFI. First, source code may be unavailable, as is the case for most DLLs on Microsoft Windows systems. Second, obtaining source code matching the exact versions of the libraries being used may be difficult (e.g., the original GNU libc code is slightly different from the version used by Red Hat Linux, which in turn differs from the version used by Ubuntu Linux). Third, handling large source code bases for all the required libraries, each with its own set of compile and build requirements, would involve substantial manual work. We believe this would deter practitioners from adopting LFI.

The LFI profiler disassembles the library and identifies all exported functions, along with the dependent functions, i.e., other internal or exported functions that are invoked by the exported functions. Dependencies are determined recursively, both within the same library and other libraries called by the current one. It then constructs a control flow graph (CFG) for each function, similar to the one shown in Figure 2.

**Figure 2. A simple example of a control flow graph for an exported library function.**

In most libraries, return codes are constants, typically defined with `#define` directives; these codes end up stored in a memory location or register (we refer to both as locations). For each assignment of a constant to a location, the static analyzer looks for the paths through the CFG that propagate this constant to the return location in an exit basic block. For most application binary interfaces (ABIs), the return value is placed in a well-defined location. For example, in the case of the Intel ABI, the return value is placed in the `eax` register, so we need to find the paths that propagate constants to the last `eax` write before a return instruction.

To make this path search efficient, the LFI profiler transforms the CFG \( G(V, E) \), which has basic blocks \( B_1, B_2, \ldots \) as vertices, into another graph \( G'(V', E') \), with \( V' = V \times \{ l_1, l_2, \ldots \} \), where \( l_i \) are the locations to which constants are written. \( E' = \{ (B_s, B_d) | (B_s, B_d) \in E \land l_i \text{ is propagated to } l_j \text{ by } B_s \} \). We say \( l_i \) is "propagated" to \( l_j \) by basic block \( B \) if the content of \( l_i \) is used to compute and write the contents of \( l_j \) within \( B \). For calls to dependent functions, we consider all of the dependent function's return values (determined recursively) to be propagated.

The profiler identifies all writes to the return location preceding a return instruction and searches from this point in reverse, to find all paths in \( G' \) along which constants can be propagated to that location. One could think of this algorithm as a "reverse" constant propagation. Constant folding is not necessary since compilers automatically do this when generating the library code, so the disassembled code offers no opportunity for further folding.

We have not encountered any problems related to pointer aliasing in practice; it appears that modern compilers prefer to use the same canonical location to refer to these variables. To reduce the search space, the profiler generates \( G' \) on-demand, only expanding the nodes of interest.

To avoid injecting "obvious" non-faults, LFI can optionally apply two heuristics. First, it tries to distinguish success from error returns to avoid injecting success returns; this heuristic removes 0-return values from all functions for which more than one constant return value were found (if only 0 was found, it is likely a null pointer return). Second, the LFI profiler eliminates short functions that return 1 or 0 and only check for conditions of the type `isFile()`. LFI infers that neither return value reflects a failure. Since both heuristics are unsound, they are disabled by default in LFI—we prefer to risk injecting some non-faults rather than miss valid faults.

A special type of dependency occurs in the C and C++ standard libraries (`libc` and `libstdc++`): they wrap kernel system calls, so many dependent functions reside in the kernel. LFI therefore performs static analysis on the kernel image as well, to identify the error codes that originate in the kernel and may be propagated by the libraries.

An alternative to the LFI approach is to obtain error return codes by parsing documentation. This approach has two main drawbacks. First, the analysis cannot be accurate because documentation often uses natural language that is potentially confusing, such as "the same errors that occur for `link(2)` can also occur for `linkat()`" in the `linkat` man page, or "returns 0 if successful, a positive error code otherwise" in the libxml2 documentation. Second, documentation can be inconsistent. For example, the `modify_ldt` man page claims three possible return values (`EFAULT`, `EINVAL`, and `ENOSYS`), yet the LFI profiler found a fourth one (`ENOMEM`), confirmed through code inspection. We found similar inconsistencies in libxml2, where `htmlParseDocument` is alleged to only return 0 or -1 for success/failure, but it turns out it can also return 1 in some failure cases. Such disparities between documentation and reality can be the very source of program bugs, so an effective fault injection tool must be aware of them.

LFI's fault profiles could be improved based on documentation, but this requires manual vetting. It is possible to avoid analyzing exported library functions that the target program never calls, thus saving some profiling time. In LFI, we opted to profile all exported functions of a library because profiling is fast anyway (approximately 20 seconds for the largest libraries), and we wish to reuse profiles across multiple programs once they have been generated.

The LFI profiler is relatively portable: it obtains the exported symbols for a shared object file, disassembles it, and builds the control flow graph—these are steps that are performed using standard tools on most general-purpose platforms. The CFG analyses are independent of the ABI and platform features. As will be seen in Section 6.3, the LFI profiler currently works for three platforms: Linux/x86, Windows/x86, and Solaris/SPARC.

**Limitations:**
- Fault profiles may include false positives, i.e., return codes that can be returned by the corresponding function only when certain combinations of arguments are provided. For example, the `read` function in `libc` can return -1 and set `errno` to `EWOULDBLOCK` only when it is passed an asynchronous file descriptor. Inferring the relationship between arguments can be done using symbolic execution, but the current LFI prototype does not support this yet.
- Indirect calls can pose a challenge to LFI’s inter-procedural constant propagation analysis. For such cases, the LFI controller could dynamically resolve indirect calls at runtime and inject the return codes corresponding to the function being called. However, prior work [17] and our own experience indicate that indirect calls are highly uncommon, even in event-driven object-oriented code. Moreover, our analysis of real libraries found that only 2.28% (758 out of 33,122) of indirect calls could actually affect the profiler’s accuracy in static error code propagation.
- In theory, indirect branches can make building the CFG hard. However, we analyzed 9,633 functions in 30 commonly used libraries and found that only 0.13% branches (104 out of 78,292) were indirect. The LFI prototype currently ignores the resulting CFG incompleteness.
- LFI must be able to disassemble the libraries in order to analyze them; this may not work if the code is obfuscated. Fortunately, [17] reports that over 99% disassembly accuracy can be achieved in commercial-grade applications. Since the LFI profiler and disassembler are loosely coupled, it is possible to use as good a disassembler as is available.

#### 3.2 Side-Effects Analysis

Besides error return values, library functions may communicate additional information regarding the encountered error via channels such as output parameters, global variables, or thread-local storage (TLS) variables, like `errno`. The LFI profiler automatically discovers and analyzes such side effects.

Shared libraries on most platforms consist of position-independent code (PIC), i.e., machine code that executes properly regardless of where it is loaded in memory. In PIC, all instructions referring to memory addresses use relative addressing. For example, in Linux, the `ebx`/`ecx` registers are loaded with the instruction pointer in the function prologue and subsequently used as a base address for accessing global or TLS variables.

The LFI profiler starts by finding the possible return codes and then scans the basic blocks that contain the constant assignments, searching for possible writes to global/TLS variables. These writes are identified based on the use of the base address for computing the memory location to write to; propagating error codes to these locations is considered a side effect.

We illustrate with an example from GNU `libc`, where a function sets the `errno` TLS variable and places the return value in the `eax` register after a syscall returned an error:

```assembly
1. call f8596
2. add ecx, 0x7c91c
3. mov ecx, DWORD PTR [ecx-0x20]
4. add ecx, DWORD PTR gs:0x0
5. xor edx, edx
6. sub edx, eax
7. mov DWORD PTR [ecx], edx
8. or eax, 0xffffffff
```

Line 1 uses the standard PIC way of obtaining the current instruction pointer. In lines 2-4, it computes the address of the `errno` variable. Lines 5 and 6 compute the value to be stored in `errno` as the negative value of `eax`, in accordance with the Linux system call standard, and line 7 stores the value into `errno`. Finally, line 8 sets the return value of the function to -1.

The profiler first finds line 8, then detects the side effect by analyzing the containing basic block; it concludes that exposing the error requires the injector to place -1 in `eax` and also set `errno` accordingly.

We take a similar approach for side effects reflected in output arguments, i.e., when the function writes to addresses passed as arguments. Such output arguments are always found at a well-known location—positive offsets from the base stack pointer when using frame pointers on the IA32 architecture, or stack/register combinations in general—so the LFI profiler detects writes to addresses obtained from such positive offsets. For example, on IA32, we modified the algorithm used to detect possible return values such that it performs a forward search and looks for constant propagations to locations of the form `[ebp+??]`, instead of `eax`. If a chain of basic blocks that sets the return value also intersects a chain of blocks that propagates a constant to an `[ebp+??]` location, we consider it to be a side effect.