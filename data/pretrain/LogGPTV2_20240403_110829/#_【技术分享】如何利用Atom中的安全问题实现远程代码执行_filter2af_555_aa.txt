# 【技术分享】如何利用Atom中的安全问题实现远程代码执行
|
##### 译文声明
本文是翻译文章，文章来源：statuscode.ch
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
译者：[WisFree](http://bobao.360.cn/member/contribute?uid=2606963099)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**写在前面的话**
近期，我对GitHub所使用的文本编辑器-[Atom](https://atom.io/)进行了分析，并成功地在Atom中找到了多个安全漏洞。通过研究之后，我成功地利用这些漏洞实现了远程代码执行。
当我将漏洞信息通过[HackerOne](https://hackerone.com/github)上报给Atom的开发团队之后，这些漏洞已经在2017年10月12日发布的[Atom
v1.21.1](https://github.com/atom/atom/releases/tag/v1.21.1)中得到了修复。如果你想复现漏洞的话，可以参考GitHub上发布的旧版本代码【[传送门](https://github.com/atom/atom/releases/tag/v1.21.0)】。
**  
**
**Web安全问题影响了桌面端App**
Atom是基于Electron开发的，而Electron是一款用于开发桌面应用的跨平台框架，该框架使用的语言是JavaScript、HTML和CSS。
但是，这种框架也将某些常见的Web端安全问题带到了桌面端应用的身上，我们这里所指的安全问题就是跨站脚本漏洞（XSS）。由于整个应用程序的逻辑是基于JavaScript实现的，而一个跨站脚本漏洞就有可能导致攻击者实现任意代码执行。毕竟对于一款基于JavaScript实现的应用来说，攻击者能做到的跟开发者所能做的其实是差不多的。
当然了，我们也有很多方法来缓解Electron中的跨站脚本漏洞所带来的影响，但如果这些安全解决方案部署不当的话，它们还是有可能会被攻击者轻松绕过的。
**  
**
**使用内容安全策略缓解XSS**
在开始分析漏洞之前，我们先来看一看GitHub是如何缓解Atom中的XSS问题的。没错，GitHub使用的就是内容安全策略（CSP）。如果你分析过Atom中index.html文件的代码的话，你将会看到如下所示的部署策略：
注意上述代码中的script-src 'self' 'unsafe-eval'，即它允许同源的JavaScript以及使用eval()构建的代码运行，但是禁止任何内联JavaScript运行。
简而言之，在下面给出的样例中，只有“index.js”中的JavaScript代码可以被执行，而alert(1)无法执行，因为它属于内联JavaScript：
****
**Atom如何解析Markdown文件？**
在面对某些包含解析器或者预览功能的软件时，多花一些时间去研究相关组件往往会给我们带来意想不到的收获。在绝大多数场景中，软件的解析库一般都是使用某些第三方组件实现的，而且在实现这些组件的时候或多或少都会存在不同的安全问题。而组件的开发者跟使用者所想的也有可能不一样，比如说，开发者会假设提供给代码库的肯定是受信数据，而使用者可能会认为代码库会对不安全的数据进行过滤处理，这样也就导致了安全漏洞的产生。
所以，我首先要做的就是对Atom解析Markdown文件的过程进行分析，跟该组件相关的代码可以在GitHub的[atom/markdown-preview](https://github.com/atom/markdown-preview)找到。很快我便发现，Markdown解析器似乎还可以解析任意HTML文档：
接下来，我尝试注入了一段简单的JavaScript代码来判断Markdown代码库是否会过滤掉JavaScript代码。虽然内容安全策略在这里可以防止代码运行，但我这里只是想确认代码库是否实现了最基本的数据过滤（清洗）功能。事实证明，这里真的有…请大家看下面这张截图，其中的script语句没有显示在DOM之中：
在进行了简单的信息搜索之后，我发现“GitHub能够解析任意HTML文档”的这种功能实际上是他们故意这样设计的。因此，Markdown代码库才引入了这种[数据清洗模式](https://github.com/atom/markdown-preview/pull/73)（一种[自定义的数据过滤功能](https://github.com/atom/markdown-preview/blob/4c6584bbad62bd2fbb6fd08fab8888ad20596d03/lib/renderer.coffee#L51-L79)）：
    sanitize = (html) ->
               o = cheerio.load(html)
               o('script').remove()
               attributesToRemove = [
                 'onabort'
                 'onblur'
                 'onchange'
                 'onclick'
                 'ondbclick'
                 'onerror'
                 'onfocus'
                 'onkeydown'
                 'onkeypress'
                 'onkeyup'
                 'onload'
                 'onmousedown'
                 'onmousemove'
                 'onmouseover'
                 'onmouseout'
                 'onmouseup'
                 'onreset'
                 'onresize'
                 'onscroll'
                 'onselect'
                 'onsubmit'
                 'onunload'
               ]
               o('*').removeAttr(attribute) for attribute in attributesToRemove
               o.html()
虽然这种数据过滤功能的保护性非常的弱，但我们不能使用on-listener(例如onClickListener)来绕过它，因为它可能会触发内容安全策略，这将导致恶意Payload无法被执行。
但是，我们可以注入其他类型的HTML Payload，我们先认真看一看之前那张屏幕截图：
很明显，Atom是以协议file://执行的，那如果我们创建一个恶意HTML文件并将其嵌入在本地文件之中呢？如果可以的话，该文件将会被视作是Electron的本地文件所提供的（符合同源策略），因此我们的JavaScript代码将会被执行。
所以我在主文件夹中创建了一个名叫hacked.html的文件，文件内容如下所示：
接下来，我只需要在Markdown文档中使用一个iframe标签即可成功触发JavaScript代码：
**  
**
**配合本地DOM XSS**
但是我现在还无法执行任意JavaScript代码，因为还有一个问题没解决：即漏洞的利用需要大量的用户交互：
1\. 用户需要主动打开恶意的Markdown文档；
2\. 用户需要打开Markdown文档的预览窗口；
3\. 恶意Markdown文档还需要另一个包含恶意JavaScript代码的本地HTML文件存在；
而在真实的场景中，上述条件就显得有些牵强了。但是，如果我们能找到某个本地文件中存在DOM
XSS漏洞的话，不就可以了吗？而这种情况更加适用于真实场景下的漏洞利用过程。
所以，我打算对Atom所绑定的HTML文件进行分析。幸运的是，在macOS系统中，应用程序本身就是一堆代码和文件。所以我们可以直接在/Applications/Atom.app/Contents目录中访问Atom
bundle：
快速搜索bundle中的HTML文件后，我们得到了以下相关文件：
    ➜  Contents find . -iname "*.html"