本文翻译自：[An Intro to x86_64 Reverse
Engineering](https://leotindall.com/tutorial/an-intro-to-x86_64-reverse-engineering/)
系列第二篇：[其他练习](https://xz.aliyun.com/t/2492)
* * *
本文档通过一系列CrackMe程序介绍x86_64二进制逆向工程。逆向工程是了解已编译计算机程序的行为而无需获得其源代码的过程。
关于逆向工程已有很多优秀的教程，但它们主要是在32位x86平台上进行逆向。而现代计算机几乎都是64位的，因此本教程引入了64位的概念。
CrackMe是一类可执行文件，它（通常）由用户输入一个参数，程序对其进行检查，并返回一条消息，告知用户输入是否正确。
如果您喜欢本教程，请考虑支持我的[Patreon](https://www.patreon.com/leotindall)，这样我就可以更好地做教程。
# 前期准备
## 知识
本教程假定您对编程有一定的了解，但并不需要具备汇编，CPU架构和C编程的知识。 **您应该知道编译器的功能** ，但您不必知道如何实现它。同样，
**您应该知道寄存器是什么** ，但您不需要记住x86寄存器或指令。我反正不会去记这些。
如果您是一个熟练的程序员，但不知道汇编，我建议您看看[x86 Crash
Course](https://www.youtube.com/watch?v=75gBFiFtAb8)。这是一个10分钟的视频，可以让您了解本教程所需的背景知识。
## CrackMe程序
您可以在[GitHub](https://github.com/leotindall/crackmes)上找到文中讨论的CrackMe程序。克隆这个存储库，并且
_在不查看源代码的情况下_ ，使用`make crackme01` ,`make crackme02`,……构建所有CrackMe。
## 工具和软件
这些CrackMe仅适用于Unix系统，我使用Linux编写本教程。您需要安装开发环境的基本知识——C编译器（`gcc`）、对象检查工具（`objdump`，`objcopy`，`xxd`）等等。本教程还将教您如何使用[Radare2](http://radare.org/r/pics.html)，这是一个先进的开源逆向工程工具包。在Debian派生的系统上，您应执行以下命令：
    sudo apt install build-essential gcc xxd binutils
您可以在[这里](https://github.com/radare/radare2)安装Radare2。
对于其他系统，通过对应系统的包管理器安装相应的包即可。
# CrackMe解答
> **注意**
> ：在后面的解答中，我会讨论文件偏移。这些值在您的机器上可能会有所不同，但我一定会解释我是如何得到它们的。所以如果您对于某些偏移的值感到困惑，您只需搜索这个偏移量，看看我是如何得到它们的。
## crackme01.c
`crackme01.64`是一个相对简单的程序。运行后会显示如下输出
    $ ./crackme01.64
    Need exactly one argument.
随便给它一个参数，这里用了`lmao`：
    $ ./crackme01.64 lmao
    No, lmao is not correct.
这是预料之中的，我们不知道密码。当遇到这种情况时，我们应该首先考虑程序做了些什么。检查字符串是否正确的最简单方法是，将它与存储在二进制文件中的另一个字符串进行简单比较。二进制文件对我们来说可能看起来不透明，但实际上并非如此。和其他文件一样，它是一个充满了数据的文件，只是以一种特定的方式组合。
> **亲自尝试一下** ：用`cat`、`less`或者其他其他您喜欢的文本编辑器查看可执行程序。
如果我们只是简单地`cat`，我们会得到一堆乱码。有一个名为`strings`的标准Unix工具，它会尝试在给定文件中提取所有有效的字符串（字符串是可打印字符和空字符的组合）。
    $ strings ./crackme01.64
    /lib/ld-linux.so.2
    WXZd
    libc.so.6
    _IO_stdin_used
    __printf_chk
    puts
    __cxa_finalize
    __libc_start_main
    _ITM_deregisterTMCloneTable
    __gmon_start__
    _Jv_RegisterClasses
    _ITM_registerTMCloneTable
    GLIBC_2.3.4
    ...
    .dynamic
    .data
    .bss
    .comment
    .debug_aranges
    .debug_info
    .debug_abbrev
    .debug_line
    .debug_str
    .debug_loc
这里产生了 _很多_ 输出。我们可以从中找到一些有用的东西，现在我们只是寻找密码。
> **亲自尝试一下** ：在`strings`的输出中寻找密码。这是解决这个问题仅需的方法。
### 解答
这个问题中，您只需要滚动列表，然后就能发现下面几行：
    ...
    [^_]
    Need exactly one argument.
    password1
    No, %s is not correct.
    Yes, %s is correct!
    ;*2$"
    ...
您可以看到我们已经知道的两个字符串：`Need exactly one argument.`和`No, %s is not
correct..`请注意，`%s`是告诉C的`printf`函数打印字符串的控制字符串，并可以猜测最后会替换为我们在命令行输入的字符串。
在这两个字符串之间，我们发现有一个可疑的东西。来试试看：
    $ ./crackme01.64 password1
    Yes, password1 is correct!
成功了！您可能会惊讶于在二进制文件上简单地调用`strings`会产生这么多有用的知识。
> **练习** ：有一个名为`crackme01e.c`的文件可以使用相同的方法解决。编译并尝试解决它，巩固您的技能。
## crackme02.c
这个 CrackMe 稍微更难一些。您可以尝试上面的步骤，但会发现找到的密码是无效的！
> **亲自尝试一下** ：在接着阅读之前，试着想想为什么会这样。
我们用`objdump`来查看程序的实际行为。`objdump`是一个非常强大的二进制文件检查工具，您可能需要使用系统的包管理器进行安装。
二进制程序是一系列机器指令。`objdump`允许我们反汇编这些机器指令，并将它们表示为稍微更易读的汇编助记符。
在这个题目中，运行`objdump -d crackme02.64 -Mintel |
less`，我们将获得一个汇编指令清单。我通过`less`管道查看，因为它很长。
第一行告诉我们我们正在看什么：`crackme02.64: file format elf64-x86-64`。它是 Intel x86_64
（即AMD64） CPU 架构上的64位 ELF 可执行文件。在这之后有许多节（section），如下所示：
    Disassembly of section .init:
    0000000000000590 :
    590:   48 83 ec 08             sub    rsp,0x8
    594:   48 8b 05 3d 0a 20 00    mov    rax,QWORD PTR [rip+0x200a3d]        # 200fd8 
    59b:   48 85 c0                test   rax,rax
    59e:   74 02                   je     5a2 
    5a0:   ff d0                   call   rax
    5a2:   48 83 c4 08             add    rsp,0x8
    5a6:   c3                      ret
    ...
其中大多数的节是在编译后由链接器插入的，因此与检查密码的算法无关。我们可以跳过除`.text`节之外的所有内容。它开始是这样的：
    Disassembly of section .text:
    00000000000005e0 :
    5e0:   31 ed                   xor    ebp,ebp
    5e2:   49 89 d1                mov    r9,rdx
    5e5:   5e                      pop    rsi
    5e6:   48 89 e2                mov    rdx,rsp
    5e9:   48 83 e4 f0             and    rsp,0xfffffffffffffff0
    5ed:   50                      push   rax
    5ee:   54                      push   rsp
    ...
同样，这是链接器插入的函数。我们不关心任何与`main`函数无关的事情，所以继续滚动直到您看到：
    0000000000000710
    :
    710:   48 83 ec 08             sub    rsp,0x8
    714:   83 ff 02                cmp    edi,0x2
    717:   75 68                   jne    781
    719:   48 8b 56 08             mov    rdx,QWORD PTR [rsi+0x8]
    71d:   0f b6 02                movzx  eax,BYTE PTR [rdx]
    720:   84 c0                   test   al,al
    ...
在最左的一列中列出了每个指令的地址（十六进制）。往右一列是原始机器代码字节，表示为十六进制数对（两个十六进制数组成一组）。最后一列是 objdump
生成的等效汇编代码。
我们分解这个程序。首先是 sub rsp，0x8 ，这将堆栈指针向下移动8，在堆栈上为8个字节的变量分配空间。请注意， **我们对这些变量一无所知**
。这些空间可以表示8个字符，也可以是一个指针（它是64位可执行文件）。
接下来，有一个非常标准的 jump-if 条件：
    cmp    edi,0x2
    jne    781
如果您不知道这些指令的作用，可以去搜索。在这里，我们将`edi`寄存器与十六进制数2进行比较（`cmp`），如果它们不相等则跳转（`jne`）。
所以问题是，那个寄存器中存放了什么？这是一个Linux
x86_64可执行文件，因此我们可以查找调用约定（[Wikipedia](https://en.wikipedia.org/wiki/X86_calling_conventions#System_V_AMD64_ABI)）。发现`edi`是目标索引（Destination
Index）寄存器的低32位，是函数的第一个参数存放的位置。想想`main`函数是如何用C编写的，它的声明是：`int main（int argc，char
** argv）`。所以这个寄存器保存第一个参数：`argc`，就是程序的参数个数。
### 查找明文字符串
因此，这个比较跳转是检查程序是否有两个参数。（注意：第一个参数是程序的名称，所以它实际上检查是否有一个用户提供的参数。）如果不是，它会跳转到主程序的另一部分，在地址781：
    lea    rdi,[rip+0xbc]
    call   5c0 
    mov    eax,0xffffffff
    jmp    77c
在这里，我们将一个值的地址加载（`lea`）到`rdi`中（还记得吗，这是函数的第一个参数），然后调用一个地址是5c0的函数。看一下该行的反汇编：
    5c0: ff 25 02 0a 20 00 jmp QWORD PTR [rip+0x200a02] # 200fc8
`objdump`注释了这条指令，告诉我们它正在跳转到`libc`函数`puts`。该函数只需要一个参数：一个指向字符串的指针，然后将其打印到控制台。所以这段代码打印了一个字符串。但那是什么字符串？
要回答这个问题，我们需要查看载入到`rdi`中的内容。看看这条指令：`lea rdi,[rip + 0xbc]` 。这计算了指令指针（Instruction
Pointer ，指向下一条指令的指针）向前0xbc的地址，并将该地址存储在`rdi`中。
因此我们打印的是在此指令之前的0xbc字节中的内容。我们可以自己计算：0x788（下一条指令）+ 0xbc（偏移）= 0x845。
我们可以使用另一个标准Unix二进制工具来查看特定偏移量的原始数据：`xxd`。这个题目中，执行`xxd -s 0x844 -l 0x40
crackme02.64`。其中，`-s`是表示跳到（skip）指定位置，使输出从我们感兴趣的偏移开始。`-l`是指输出长度（length），使输出只有0x40个字符长，而不是整个文件的余下部分。可以看到：
    $ xxd -s 0x844 -l 0x40 crackme02.64