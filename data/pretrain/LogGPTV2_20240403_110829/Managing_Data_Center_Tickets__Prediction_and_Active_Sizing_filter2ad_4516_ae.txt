100
80
60
40
20
0
100
80
60
40
20
0
100
80
60
40
20
0
100
80
60
40
20
0
100
80
60
40
20
0
0
1
0
1
0
1
0
1
0
1
2
3
Time (hour)
2
3
Time (hour)
2
3
Time (hour)
2
3
Time (hour)
2
3
Time (hour)
4
5
4
5
4
5
4
5
4
5
Original
Resizing
Ticket Threshold
Fig. 12: Overtime plots of CPU utilization for VMs located
on Node 2, 3 and 4, with and without resizing.
throughput (the average number of successful served requests
per unit of time). For wiki-one, the mean response times
with resizing decrease from 20% (from 582 ms to 454 ms)
comparing to the original experiment, whereas throughputs are
maintained at almost the same levels. For wiki-two, throughput
increases by more than 20% (from 14 to 17 requests/sec) while
response time increases by 7% (from 915 ms to 979 ms). This
suggests that with ATM, the servers can fully serve the offered
load, meet good performance values, while at the same time
keeping the number of tickets to a minimum demonstrating
the ultimate goal of ATM.
VI. RELATED WORK
Ticketing systems are widely used to improve on system
dependability, e.g., slow responsiveness, failure [4], software
bugs [21], [22] and system misconﬁgurations [23]. Prior
344
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:17:56 UTC from IEEE Xplore.  Restrictions apply. 
RT
TPUT
)
s
m
(
T
R
n
a
e
M
800
640
480
320
160
0
RT
TPUT
50
40
30
20
10
)
c
e
s
/
t
s
e
u
q
e
r
(
T
U
P
T
n
a
e
M
1200
)
s
m
(
T
R
n
a
e
M
960
720
480
240
0
25
20
15
10
)
c
e
s
/
t
s
e
u
q
e
r
(
T
U
P
T
n
a
e
M
Original
Resizing
(a) wiki-one
0
5
0
Original
Resizing
(b) wiki-two
Fig. 13: Performance comparison for wiki-one and wiki-two:
original and resized with ATM.
art
in ticketing systems centers on two directions: derive
system management for software concurrency [21], database
systems [3], and distributed data-intensive systems [24] but
also to develop automatic detection systems for different
types of tickets, bugs [22] and software misconﬁgurations
by leveraging the rich correlation between conﬁguration en-
tries [23]. Machine learning has been used for automating
ticket resolution recommendation [25], [26], [9]. To the best
of our knowledge, there are no proactive methodologies for
preventing ticket issuing, with the exception of models for
database reconﬁguration [27]. The proposed ATM policy ﬁlls
this gap by not only deriving management insights for usage
ticket patterns, but also by developing novel prediction and
ticket avoidance strategies using VM resizing.
Time series prediction and analysis have been viewed as an
excellent way to develop proactive system management poli-
cies [28], [29]. Temporal models such as ARIMA models [10]
have been widely used to predict time series with strong sea-
sonality. Sophisticated neural network models show a strong
promise in capturing highly irregular time series at a cost of
long training overheads [30]. Time series clustering aims to
explore spatial dependency, either through their original series,
e.g., DTW [12], or extracted features [11], e.g., moments.
ATM combines spatial with temporal models to contain the
cost of neural network training and scales well for very large
numbers of time series.
Virtualization technology has become the industry standard
offering great opportunities to multiplex physical resources
over a large number of VMs. There are two ways to change
the efﬁciency of resource multiplex ratios: by sizing the virtual
resource capacities [31] and by dynamically consolidating
VMs [32]. While dynamically changing the degree of VM
consolidation is shown effective to take advantage of the time
variability of the workload [33], the overhead of migrating
VMs can greatly reduce its performance beneﬁts. On the
contrary, sizing resource of co-located VMs incurs less system
overhead [31]. A central question of multiplexing resources
is how to strike a good tradeoff of fairness and performance
for workloads, e.g., latency [34] and throughput [35]. Fairness
driven policies, e.g., max-min fairness, proportional fairness,
and bottleneck resource fairness [36], have been proposed for
various systems components, including storage systems [35]
and networks [37]. The sizing algorithm proposed in ATM
differs from related work by its objective to reduce the number
of usage tickets. While max-min fairness also reduces the
number of tickets, it cannot achieve this as effectively as ATM
since ticket reduction is a side-effect rather than a main focus.
VII. CONCLUDING REMARKS
We presented ATM, a methodology to achieve efﬁcient VM
resizing so as to reduce VM usage tickets that are issued in
production data centers. We have shown the effectiveness of
ATM in predicting usage series in production data centers by
exploiting spatial usage patterns of co-located VMs within
the same box and by using detailed prediction of a small
subset of the usage series, allowing the methodology to scale
well. This prediction drives the development of a VM resizing
policy that
is shown effective on a production trace and
a working prototype. In our future work we intend to use
ATM’s prediction abilities to drive online dynamic workload
management.
ACKNOWLEDGMENT
The research presented in this paper has been supported
by NSF grant CCF-1218758, EU commission FP7 GENiC
project (Grant Agreement No.608826), and the Swiss National
Science Foundation (project 200021 141002).
REFERENCES
[1] Y. Liang, Y. Zhang et al., “Bluegene/l failure analysis and prediction
models,” in Proceedings of the 36th IEEE/IFIP International Conference
on Dependable Systems and Networks (DSN), pp. 425–434. IEEE, 2006.
[2] I. Giurgiu, J. Bogojeska et al., “Analysis of labor efforts and their impact
factors to solve server incidents in datacenters,” in Proceedings of the
14th IEEE/ACM International Symposium on Cluster, Cloud and Grid
Computing (CCGrid), pp. 424–433.
IEEE, 2014.
[3] I. Giurgiu, A.-D. Almasi, and D. Wiesmann, “Do you know how
to conﬁgure your enterprise relational database to reduce incidents?”
in Proceedings of IFIP/IEEE International Symposium on Integrated
Network Management (IM), pp. 339–347.
IEEE, 2015.
[4] R. Birke, I. Giurgiu et al., “Failure analysis of virtual and physical
machines: patterns, causes and characteristics,” in Proceedings of the
44th IEEE/IFIP International Conference on Dependable Systems and
Networks (DSN), pp. 1–12.
IEEE, 2014.
[5] R. Birke, A. Podzimek et al., “State-of-the-practice in data center virtu-
alization: toward a better understanding of VM usage,” in Proceedings
of the 43rd IEEE/IFIP International Conference on Dependable Systems
and Networks (DSN), pp. 1–12.
IEEE, 2013.
[6] R. Birke, M. Bjoerkqvist et al., “(Big) data in a virtualized world:
volume, velocity, and variety in cloud datacenters,” in Proceedings of
the 12th USENIX Conference on File and Storage Technologies (FAST),
pp. 177–189. USENIX, 2014.
[7] J. Xue, F. Yan et al., “PRACTISE: robust prediction of data center time
series,” in Proceedings of the 11th International Conference on Network
and Service Management (CNSM), pp. 126–134.
IEEE, 2015.
[Online]. Available:
https://www.mediawiki.org/wiki/
[8] MediaWiki.
MediaWiki
[9] M. M. Botezatu, J. Bogojeska et al., “Multi-view incident ticket clus-
tering for optimal ticket dispatching,” in Proceedings of the 21th ACM
International Conference on Knowledge Discovery and Data Mining
(SIGKDD), pp. 1711–1720. ACM, 2015.
[10] C. Chatﬁeld, The analysis of time series: an introduction. CRC press,
2013.
[11] B. D. Fulcher and N. S. Jones, “Highly comparative feature-based
time-series classiﬁcation,” IEEE Transactions on Knowledge and Data
Engineering, vol. 26, no. 12, pp. 3026–3037, 2014.
[12] D. J. Berndt and J. Clifford, “Using dynamic time warping to ﬁnd
patterns in time series.” in KDD workshop, vol. 10, no. 16, pp. 359–370,
1994.
[13] L. Rokach and O. Maimon, “Clustering methods,” in Data mining and
knowledge discovery handbook. Springer, 2005, pp. 321–352.
345
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:17:56 UTC from IEEE Xplore.  Restrictions apply. 
[14] P. J. Rousseeuw, “Silhouettes: a graphical aid to the interpretation and
validation of cluster analysis,” Journal of Computational and Applied
Mathematics, vol. 20, pp. 53–65, 1987.
[15] M. Kutner, C. Nachtsheim, and J. Neter, Applied Linear Regression
Models. McGraw-Hill Education, 2004.
[16] L. Tassiulas and S. Sarkar, “Maxmin fair scheduling in wireless net-
works,” in Proceedings of the 21st IEEE International Conference on
Computer Communications (INFOCOM), vol. 2, pp. 763–772.
IEEE,
2002.
[17] A. Ghodsi, M. Zaharia et al., “Dominant resource fairness: fair allo-
cation of multiple resource types,” in Proceedings of the 8th USENIX
Symposium on Networked Systems Design and Implementation (NSDI),
pp. 323–336. USENIX, 2011.
[18] CPLEX Optimizer.
[Online]. Available:
http://www-01.ibm.com/
software/commerce/optimization/cplex-optimizer/index.html
[19] D. Pisinger, “A minimal algorithm for the multiple-choice knapsack
problem,” European Journal of Operational Research, vol. 83, no. 2,
pp. 394–410, 1995.
[20] CGROUPS.
Documentation/cgroups/cgroups.txt
[Online].
Available:
https://www.kernel.org/doc/
[21] S. Lu, S. Park et al., “Learning from mistakes: a comprehensive study on
real world concurrency bug characteristics,” in Proceedings of the 13th
International Conference on Architectural Support for Programming
Languages and Operating Systems (ASPLOS), pp. 329–339. ACM,
2008.
[22] A. Nistor, P.-C. Chang et al., “Caramel: detecting and ﬁxing performance
problems that have non-intrusive ﬁxes,” in Proceedings of the 37th
International Conference on Software Engineering (ICSE), pp. 902–912.
IEEE, 2015.
[23] J. Zhang, L. Renganarayana et al., “Encore: exploiting system environ-
ment and correlation information for misconﬁguration detection,” ACM
SIGPLAN Notices, vol. 49, no. 4, pp. 687–700, 2014.
[24] D. Yuan, Y. Luo et al., “Simple testing can prevent most critical failures:
an analysis of production failures in distributed data-intensive systems,”
in Proceedings of the 11th USENIX Symposium on Operating Systems
Design and Implementation (OSDI), pp. 249–265. USENIX, 2014.
[25] W. Zhou, L. Tang et al., “Resolution recommendation for event tickets
in service management,” in Proceedings of IFIP/IEEE International
Symposium on Integrated Network Management (IM), pp. 287–295.
IEEE, 2015.
[26] Q. Shao, Y. Chen et al., “Easyticket: a ticket routing recommendation
engine for enterprise problem resolution,” Proceedings of the VLDB
Endowment, vol. 1, no. 2, pp. 1436–1439, 2008.
[27] I. Giurgiu, M. Botezatu, and D. Wiesmann, “Comprehensible models
for reconﬁguring enterprise relational databases to avoid incidents,” in
Proceedings of the 24th ACM International Conference on Information
and Knowledge Management (CIKM), pp. 1371–1380. ACM, 2015.
[28] N. Tran and D. A. Reed, “Automatic ARIMA time series modeling for
adaptive I/O prefetching,” IEEE Transactions on Parallel Distributed
Systems, vol. 15, no. 4, pp. 362–377, 2004.
[29] Z. Zhuang, H. Ramachandra et al., “Capacity planning and head-
room analysis for taming database replication latency: experiences
with linkedin internet trafﬁc,” in Proceedings of the 6th ACM/SPEC
International Conference on Performance Engineering (ICPE), pp. 39–
50. ACM, 2015.
[30] R. Livni, S. Shalev-Shwartz, and O. Shamir, “On the computational
efﬁciency of training neural networks,” in Proceedings of
the 28th
Conference on Neural Information Processing Systems (NIPS), pp. 855–
863, 2014.
[31] S. Spinner, N. Herbst et al., “Proactive memory scaling of virtualized
applications,” in Proceedings of the 8th IEEE International Conference
on Cloud Computing (CLOUD), pp. 277–284.
IEEE, 2015.
[32] M. Wang, X. Meng, and L. Zhang, “Consolidating virtual machines
with dynamic bandwidth demand in data centers,” in Proceedings of
the 30th IEEE International Conference on Computer Communications
(INFOCOM), pp. 71–75.
IEEE, 2011.
[33] C. Delimitrou and C. Kozyrakis, “Quasar: resource-efﬁcient and QoS-
aware cluster management,” in Proceedings of the 19th International
Conference on Architectural Support for Programming Languages and
Operating Systems (ASPLOS), pp. 127–144. ACM, 2014.
[34] A. Gulati, A. Merchant, and P. J. Varman, “pClock: an arrival curve
based approach for QoS guarantees in shared storage systems,” in
Proceedings of the 33rd ACM SIGMETRICS International Conference
on Measurement and Modeling of Computer Systems, pp. 13–24. ACM,
2007.
[35] H. Wang and P. Varman, “Balancing fairness and efﬁciency in tiered
storage systems with bottleneck-aware allocation,” in Proceedings of
the 12th USENIX Conference on File and Storage Technologies (FAST),
pp. 229–242. USENIX, 2014.
[36] T. Bonald and J. Roberts, “Multi-resource fairness: objectives, algo-
rithms and performance,” in Proceedings of the 41st ACM SIGMETRICS
International Conference on Measurement and Modeling of Computer
Systems, pp. 31–42. ACM, 2015.
[37] A. Sridharan and B. Krishnamachari, “Maximizing network utilization
with max–min fairness in wireless sensor networks,” Wireless Networks,
vol. 15, no. 5, pp. 585–600, 2009.
346
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:17:56 UTC from IEEE Xplore.  Restrictions apply.