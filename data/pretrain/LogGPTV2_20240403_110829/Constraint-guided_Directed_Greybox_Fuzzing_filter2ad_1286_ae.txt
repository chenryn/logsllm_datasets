32.6 m
2.0 m
13.5 m
6.5 m
1.4 m
15.2 m
61.3 m
14.6 m
690.9 m
1.0 m
213.7 m
27.8 m
23.3 m
5.8 m
10.2 m
7.7 m
5.0 m
3.4x
4.2x
-
1.7x
13.8x
10.1x
0.6x
-
-
2.9x
44.2x
5.4x
-
-
2.9x
2.4x
9.4x
2.7x
0.9x
0.6x
1.4x
8.5x
7.9x
3.65x
Table 4: Crash reproduction time comparison with 2T+D. All reproduction times are cut off at 2000 minutes. Speedup is between the shortest
times of AFLGo and CAFL. Underlined times are the shortest. -: Not applicable. *: AFLGo fails to launch. †: Essentially equivalent to 1T. ‡:
Skipped due to the high instrumentation overheads.
7.3 PoC Generation
We compare the PoC generation time with 12 crashes. Similar
to §7.2, all constraints are automatically generated from the
patch changelog from git [9] and Mercurial [16].
We measure the PoC generation time with various con-
straint settings. In T, we set the target site to the sentinel
function, which ties the selected source locations as described
in §5.2. In T+D, we add the data condition created by the case
matching in §5.2. We set the same target sites for AFLGo.
Table 5 shows the PoC generation time in AFLGo and
CAFL. Overall, CAFL outperforms AFLGo by 3.65x on
average. With the data conditions determined by the case
C1, CAFL with T+D generally outperforms CAFL with T
and AFLGo, especially in GraphicsMagick 1.4 and jasper
1.900.12 with significant margins. This is because the case
C1 leverages the new exception checks in changelogs, which
strongly imply the condition of underlying crashes. CAFL
still performs better than AFLGo even with weaker cases (C2
and later), but in some cases, the data conditions adversely
affect the generation time (yasm 1.3.0).
8 Discussion
Use-cases with manually written constraints. While all
the evaluated cases in this paper are based on the auto-
generated constraints, there are several promising use-cases of
CDGF if developers write manual constraint descriptions. For
example, CDGF can be used to help developer’s debugging
process. If a developer wants to generate an input which fol-
lows a specific execution path, the developer can run CDGF
with the manual constraints with the representative target sties
in a desired order. As another example, developers may utilize
program-specific domain knowledge to seek for the root cause
of crashes. This can be done by adding suspicious target sites
or data conditions to the constraints automatically generated
with the crash dumps.
Bugs that require three or more constraints.
In some
cases, uninitialized values in use-of-uninitialized-value bugs
are mediated by a chain of store instructions, where each of
stores introduces additional constraint between the two fun-
damental constraints for creating and using the uninitialized
value. Among the bugs we evaluated, one use-of-uninitialized-
value bug is mediated by one store instruction, which makes it
require three constraints for creating, transferring, and using
the uninitialized value (jbig2_mmr.c:88 in jbig2dec v0.16).
Call-stack-overflow bugs may require multiple constraints
at the entry of the recurring function to make the execution
stack grow deeper. Unfortunately, we could not cover call-
stack-overflow bugs in our evaluation, as they often require
a high level of grammar fuzzing [19, 20], which CAFL does
not support at the moment.
Ineffective scenarios. The current auto-generated data con-
ditions may cause inefficiency if the cause of a crash is com-
pletely unrelated to the near-crash conditions. For example,
the uninitialized offsets causing some buffer-overflow crashes
are irrelevant to the distance derived by the out-of-bound data
condition. CAFL currently mitigates the problem with seed
scheduling (see §6.3), but how much inefficiency such a data
condition can cause needs further investigation.
3570    30th USENIX Security Symposium
USENIX Association
Program
Bug Location
Bug Type
Case
Data Condition
libming 0.4.8
libsndfile 1.0.28
GraphicsMagick 1.4
libtiff 4.0.9
jasper 1.900.12
jasper 1.900.13‡
libsixel 1.8.3
libtiff 4.0.7
libtiff 4.0.7
yasm 1.3.0
libtiff 4.0.7
libming 0.4.7
Average
decompile.c:398
pcm.c:670
pict.c:1114
pal2rgb.c:196
jas_seq.c:90
jas_seq.c:90
stb_image.h:5052
tiff2ps.c:2487
tif_unix.c:115
intnum.c:415
tif_fax3.c:413
parser.c:66
Use after free
Assertion failure
Assertion failure
Assertion failure
C1
Global buffer overflow C1
Heap buffer overflow
C1
Heap buffer overflow
C1
C1
C1
C1
C2
C2
C3
C3
C4
Heap buffer overflow
Heap buffer overflow
Heap buffer overflow
Heap buffer overflow
Use after free
act.p->Constant >poolcounter [6]
pchs >0 && pchs != mchs [5]
row_count+Max*2 >= 0x7fff [10]
tss_out / tss_in SIZE_MAX / x [11]
† [4]
xoff >= width || yoff >= height [3]
bits 8 [7]
cc + nc == tf_bytesperrow [13]
s = imagelength [2]
e->numterm != numterm [18]
bytes_read != stripsize [14]
AFLGo
*
*
>2000.0 m
25.1 m
9.4 m
10.6 m
*
4.5 m
32.6 m
1406.9 m
26.4 m
30.1 m
CAFL
T
64.3 m
214.9 m
>2000.0 m
1.8 m
18.4 m
1.6 m
24.4 m
114.3 m
11.4 m
107.1 m
35.5 m
26.5 m
T+D
45.2 m
205.3 m
121.0 m
8.7 m
1.0 m
2.0 m
21.0 m
20.3 m
17.5 m
219.1 m
31.2 m
-
Speedup
-
-
16.5x
13.9x
9.4x
6.6x
-
0.2x
2.9x
13.1x
0.8x
1.1x
3.65x
Table 5: PoC generation time comparison. All reproduction times are cut off at 2000 minutes. Underlined times are the shortest. *: AFLGo
fails to launch. †: Not applicable. ‡: Incompletely fixed crash at the same location in jasper 1.900.12.
CONSTRAINT %free:
site 
; free ()
CONSTRAINT %use:
site 
cond "%use.addr == %free.arg0"
Figure 11: Hypothetical use-after-free constraint template.
Bugs that require further research. Among the overflow
bugs, we have observed that global-buffer-overflow and buffer-
underflow bugs are merely benefited from the simple data
conditions used now. For global-buffer-overflow bugs, the
global buffers mostly serve as look-aside tables rather than
regular buffers, eliminating the arithmetic relation between
the access offset and the buffer boundary. For buffer-underflow
bugs, most programs access the beginning of the buffer so
commonly that the data conditions are unable to distinguish
inputs. Constructing more sophisticated data conditions for
these bugs requires further research.
Issue on distance of pointer conditions. The current defini-
tions of data conditions consider values as arithmetic entities,
whose distances can be derived from the arithmetic value
differences between them. However, we found there is yet
another class of data conditions that are not appropriate to be
handled with the arithmetic value differences. The represen-
tative case would be data conditions between pointers. The
pointer data conditions are problematic because, if two point-
ers point to different memory objects, their value differences
do not carry any semantic meaning.
As an example, Figure 11 shows an hypothetical con-
straint template for use-after-free bugs. Even if this con-
straint template has no syntactical problem, the data con-
dition cond "%use.addr == %free.arg0" makes little
sense, because the smaller integer error between %use.addr
and %free.arg0 does not mean they are more likely to be
pointing to the same memory object after mutation.
We noted that the similar problem arises in any tempo-
ral pointer bugs, such as double-free. To avoid this problem,
CAFL currently does not specify such pointer conditions for
temporal pointer bugs (nT), and resorts to the "fuzzy" nature
of fuzzing to find the crashing input. A reasonable distance
metric for pointer conditions still requires further research.
9 Related Work
Directed greybox fuzzing. AFLGo [21] and SemFuzz [44]
are the first DGF systems. Published about the same time,
they both drive the seed toward a set of target sites in a way
to shorten the distance of the seeds to them. Hawkeye [22]
improves DGF based on AFLGo by modifying the distance
definition to reflect the call trace. However, such conventional
DGF systems lack the concept of the ordered target sites
and data conditions, which results in the long fuzzing time
before exposing targeted crashes. ParmeSan [36] improves
distance measuring with dynamic control-flow graphs. Since
the distance metric of CDGF does not depend on the type
of control-flow graphs, CAFL can also be benefited from
dynamic control-flow graph.
Static analysis-assisted directed fuzzing. Some of the di-
rected fuzzing work attempt to leverage static analysis to
guide fuzzers toward desired locations. [29, 30] utilizes the
crashing execution paths presented by static analyzers rather
than the distance metric. [43] performs an online static analy-
sis to determine at which program location a seed becomes
unreachable to the target sites. Unfortunately, they either lack
the mechanism to facilitate the crash reproduction at the crash
location [43] or over-constrain the fuzzing to inaccurately
analyzed paths [29, 30].
Targeted analysis with symbolic execution. Compared to
fuzzing techniques, symbolic execution techniques have ad-
vantages in solving hard branch conditions. As such, hybrid
fuzzing techniques [42, 45] utilize the targeted symbolic exe-
cution, which specifically solve hard branch conditions where
the fuzzer is stuck. Moreover, [26] incorporates the targeted
symbolic execution to DGF and drills through hard branch
conditions where DGF is stuck. In this regard, CAFL can
leverage targeted symbolic execution particularly in solving
hard branch conditions. It is worth noting that this would re-
USENIX Association
30th USENIX Security Symposium    3571
quire handling well-known issues in performing symbolic
execution—e.g., environment modeling such as system/li-
brary calls and solving complex symbolic memory references.
ML-based directed fuzzing. NEUZZ [40] incorporates a
neural network model that predicts the branch coverage of
mutated seeds to increase the branch coverage. FuzzGuard
[47] adopts machine learning to improve the effectiveness of
DGF by filtering out the mutated inputs if the learned model
predicts a given input is unlikely to shorten the seed distance.
As stated in [47], FuzzGuard is orthogonal to DGF and can
be incorporated to any of targeted fuzzing systems.
Alternative distance metrics. Angora [23] incorporates the
distance of integer values to facilitate the branch condition
solving. [34] introduces a new distance metric that utilizes
the similarity between the call stack of the executed seed and
the use-after-free PoC input. Unfortunately, [34] is limited to
the vulnerability that belongs to the use-after-free family.
Domain-specific fuzzing. Rather than reaching the targeted
locations, some research allow users to manually determine
the high-level objective of the fuzzing. FuzzFactory [37] al-
lows a user to write a domain-specific seed creation rule,
which in turn creates the more beneficial seeds in favor of the
user-custom conditions. However, it lacks the general mech-
anism to auto-generate the conditions and drive the seeds
against them, such as distances.
PoC generation. [31] utilizes symbolic execution to discover
a concrete input that reaches the target program location, and
[24] generates PoC inputs using symbolic execution. 1dVul
[38] utilizes DGF and symbolic execution to generate the
1-day PoC for the patch-released vulnerability. Unlike [24,31,
38], CAFL does not require symbolic execution.
10 Conclusion
We present CDGF, an augmented DGF that combines the tar-
get sites with the data conditions to define constraints, and
attempts to satisfy the constraints in the specified order. We de-
fine the distance metric for a constraint sequence to prioritize
the seeds that better satisfy the constraints, and automatically
generate the constraints with seven types of crash dumps and
four types of patch changelogs. The evaluation shows the pro-
totype CDGF system CAFL outperforms the representative
DGF system AFLGo by 2.88x in 47 real-world crashes, and
better performs in PoC generation as the constraints are more
explicit.
11 Acknowledgment
This work was supported by SAMSUNG Research, Sam-
sung Electronics Co.,Ltd., and partly supported by National
Research Foundation (NRF) of Korea grant funded by the
Korean government MSIT (NRF-2019R1C1C1006095). The
Institute of Engineering Research (IOER) and Automation
and Systems Research Institute (ASRI) at Seoul National
University provided research facilities for this work.
References
[1] AFLGo official git repository. https://github.com/
aflgo/aflgo.
[2] CVE-2016-10268
patch changelog.
https:
//github.com/vadz/libtiff/commit/
5397a417e61258c69209904e652a1f409ec3b9df.
[3] CVE-2016-9390 patch changelog.
https://
github.com/jasper-software/jasper/commit/
ba2b9d000660313af7b692542afbd374c5685865.
[4] CVE-2017-7578 patch changelog. https://github.
com/libming/libming/issues/68.
[5] CVE-2017-8365
patch changelog.
https:
//github.com/erikd/libsndfile/commit/
fd0484aba8e51d16af1e3a880f9b8b857b385eb3.
[6] CVE-2018-8964
patch changelog.
https:
//github.com/libming/libming/commit/
3a000c7b6fe978dd9925266bb6847709e06dbaa3.
[7] CVE-2019-20056
patch changelog.
https:
//github.com/saitoha/libsixel/commit/
814f831555ea2492d442e784ab5d594f6a8e2e8d.
[8] Fine free file command. https://www.darwinsys.
com/file/.
[9] Git. https://git-scm.com/.
[10] GraphicsMagick
1.4
flow changelog.
net/p/graphicsmagick/code/ci/
8273307fa414bcd00926bf6ae45d11c53b617fe9/.