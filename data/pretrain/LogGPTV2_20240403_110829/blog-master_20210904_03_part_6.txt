1. Tablescan of EMP at a cost of 6:  
cost = cost of outer + cardinality of outer * cost of inner = 1 + 16 * 6 = 97 lines 3 to 5  
2. Scan of index 23575 on ENAME at a cost of 39:  
cost = 1 + 16 * 39 = 625 lines 6 to 9  
3. Scan of index 23576 on DEPTNO at a cost of 37:  
cost = 1 + 16 * 37 = 593 lines 10 to 13  
4. An “and-equal” access at a cost of 19:  
cost = 1 + 16 * 19 = 305 lines 14 to 16  
第17行CBO估算出这个JOIN结果集的记录数，它将被最为下一次join的输入。它的计算公式为  
Join cardinality:= outer  * inner  * join selectivity  
而join selectivity为  
join selectivity = 1/max[ NDV(t1.c1), NDV(t2.c2) ]  
* [ (card t1 - # t1.c1 NULLs) / card t1 ]  
* [ (card t2 - # t2.c2 NULLs) / card t2 ]  
Join cardinality只会被用于NL JOIN中，其他JOIN会采取不同办法。  
最后在18行，CBO将会列出成本最低的NL JOIN的方法。  
JOINS - SM  
SM Join  
Outer table:  
resc: 1 cdn: 16 rcz: 13 deg: 1 resp: 1  
Inner table: EMP  
resc: 6 cdn: 172 rcz: 9 deg: 1 resp: 6  
SORT resource Sort statistics  
Sort width: 3 Area size: 43008 Degree: 1  
Blocks to Sort: 1 Row size: 25 Rows: 16  
Initial runs: 1 Merge passes: 1 Cost / pass: 2  
Total sort cost: 2  
SORT resource Sort statistics  
Sort width: 3 Area size: 43008 Degree: 1  
Blocks to Sort: 1 Row size: 20 Rows: 172  
Initial runs: 1 Merge passes: 1 Cost / pass: 2  
Total sort cost: 2  
Merge join Cost: 10 Resp: 10  
SM Join (with index on outer)  
Access path: index (no sta/stp keys)  
INDEX#: 23577 TABLE: DEPT  
CST: 2 IXSEL: 1.0000e+000 TBSEL: 1.0000e+000  
Outer table:  
resc: 2 cdn: 16 rcz: 13 deg: 1 resp: 2  
Inner table: EMP  
resc: 6 cdn: 172 rcz: 9 deg: 1 resp: 6  
SORT resource Sort statistics  
Sort width: 3 Area size: 43008 Degree: 1  
Blocks to Sort: 1 Row size: 20 Rows: 172  
Initial runs: 1 Merge passes: 1 Cost / pass: 2  
Total sort cost: 2  
Merge join Cost: 10 Resp: 10  
在SM JOIN中成本为  
Cost of outer + cost of inner + sort cost for outer + sort cost for inner = 1+ 6 + 2 + 2 = 11.  
在这里CBO减去1所以最终等于10。在第2个SM JOIN的方法下通过了已经排序的索引，所以成本为 2 + 6 + 0 (no sort on outer) + 2 = 10.  
JOINS – HA  
HA Join  
Outer table:  
resc: 1 cdn: 16 rcz: 13 deg: 1 resp: 1  
Inner table: EMP  
resc: 6 cdn: 172 rcz: 9 deg: 1 resp: 6  
Hash join one ptn: 1 Deg: 1  
hash_area: 32 buildfrag: 33 probefrag: 1 ppasses: 2  
Hash join Resc: 8 Resp: 8  
Join result: cost: 8 cdn: 172 rcz: 22  
根据HA JOIN公式，计算出成本为  
(cost of accessing outer table)+ (cost of building hash table)+ (cost of accessing inner table )  
=1+6+1=8  
所以在这里HA JOIN会被选做最优化的执行路径，SQL语句将会最终走HA JOIN.  
多重JOIN:  
如果出现大于两个表进行JOIN的情况，那么会有更多的join顺序被考虑，4个表join的话会有24种join顺序，5个表的话会有120个join顺序，n个表会有n!个join顺序。由于估算每种join顺序都会耗费cpu，所以oracle用一个初始化参数optimizer_max_permutations来限制最大计算join顺序。若想了解多重join的更多信息，请搜索相关sql调整的资料。  
结论：  
10053是一个很好的理解CBO工作机制的工具，如果辅以10046事件查看执行计划，那么整个sql语句从解析到执行的过程都一目了然了。  
【原创】ORACLE 深入解析10053事件   
新年新说：  
新年伊始，2012年过去了，我们又踏上了2013年的，回顾2012我们付出了很多，辛勤和汗水换来了知识和友谊，当我们技术成长的时候我才发现长路漫漫，唯心可敬。一份耕耘一份收获，走技术之路是艰辛的 孤独的 漫长的，在此向刚入门的小伙子们，说一说心得体会。做好心理准备，可能你为了小小的虚荣心，为了生活所迫，才走上此路，但你也要走的洒脱 走的稳健，当你站在第一个里程碑时回顾来时路，你会发现你的收获是值得的，你的付出是有意思的，你才能有继续走下去的勇气。我要感谢 Alantany  tigerfish  海哥  张老师  飚哥  寅总 dingjun  晶晶 童mm 蓓蓓 还有 好多好多 帮助过我的人们，我的成长离不开你们的鼓励。飙完泪之后开始上干货吧：）  
ORACLE 深入解析10053事件  
本次我们主要讲解oracle 10053事件和实验，好多朋友可能对这个事件不是很熟悉，因为在日常运维中用到的不是很多。Oracle 10046和10053 都是非官方trace sql的方法，在官方文档上是找不到相关资料的，但在MOS上可以找到。sql_trace是官方推荐的trace sql的方法，在官方文档上是可以查询出来的。  
10053事件：用来描述oracle如何选择执行计划的过程，然后输出到trace文件里，共我们参考，因为我们经常看执行计划怎么执行的消耗了哪些资源，而不是常看执行计划怎么选择出来了的。  
10053场景：当SQL语句执行时走的是错误的执行计划，而又找不到原因时，这时请用10053来分析一下原因。  
10053特点：  
（1）只可以了解oracle执行计划的选择过程  
（2）无法获知代价的计算公式，因为这是oracle内部的商业机密，而且每个oracle版本的优化器计算公式都不相同差距还是蛮大的，不同版本的同一个语句的代价也不一样，优化器现在还不是很成熟，还有待完善。  
（3）在这个里面我们重点要了解的是“代价”是如何计算出来的，然后我们才能了解执行计划是如何选择的。  
（4）在10053中可以了解哪些因素影响sql的执行代价  
（5）oracle 8i cost等价IO资源消耗   9i以后cost等价IO+CPU+网络+等待事件+其他代价  
一般IO资源的权重比较大 CPU权重较小  
10053内容：  
参数区：初始化参数，隐含参数，这些参数可以左右oracle工作方式  
SQL区：执行的SQL语句，是否使用绑定变量，是否进行了转换操作  
系统信息区：操作系统统计信息  cpu主频 CPU执行时间 IO寻址时间 单块读时间 多块读时间  
对象统计信息区：  
数据访问方式：访问方式不一样计算代价的方法也不一样，全表扫描 走索引 多表关联 代价都不同  
关联查询：把每张表都作为驱动表去组合，择优选择“代价”最小的关联方式，与哪个表在前无关系  
代价的最后修正：oracle会对选择出来的代价再进行最后的修正，使其更准确一些，更合理一些  
选择出最终执行计划：这个过程是非常快速的，毫秒级就搞定啦  
实验环境  
LEO1@LEO1> select * from v$version;                     这是我的oracle edition  
BANNER  
--------------------------------------------------------------------------------  
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production  
PL/SQL Release 11.2.0.1.0 - Production  
CORE    11.2.0.1.0      Production  
TNS for Linux: Version 11.2.0.1.0 - Production  
NLSRTL Version 11.2.0.1.0 - Production  
1.验证全表扫描的成本计算公式，贴出执行计划和计算公式。  
LEO1@LEO1> col sname for a20  
LEO1@LEO1> col pname for a20  
LEO1@LEO1> col pual1 for a30  
LEO1@LEO1> col pual2 for a30  
LEO1@LEO1> select * from sys.aux_stats$;    查看操作系统统计信息  
SNAME              PNAME                  PVAL1    PVAL2  
-------------------- -------------------- ---------- ---------------------------------------------------  
SYSSTATS_INFO        STATUS                             COMPLETED  
SYSSTATS_INFO        DSTART                             08-15-2009 00:49  
SYSSTATS_INFO        DSTOP                              08-15-2009 00:49  
SYSSTATS_INFO        FLAGS                         1  
SYSSTATS_MAIN        CPUSPEEDNW            2657.0122    
SYSSTATS_MAIN        IOSEEKTIM                    10     
SYSSTATS_MAIN        IOTFRSPEED                 4096  
SYSSTATS_MAIN        SREADTIM        
SYSSTATS_MAIN        MREADTIM        
SYSSTATS_MAIN        CPUSPEED        
SYSSTATS_MAIN        MBRC        
SYSSTATS_MAIN        MAXTHR  
SYSSTATS_MAIN        SLAVETHR  
说明  
aux_stats$是sys管理员用户下的一个基表后缀为$，必须写schema才能查询到，所谓的基表就是给动态性能视图提供数据的原始表，由于基表非常重要，oracle规定不允许直接访问和修改基表，如果你比较了解这些那么另说了。这个表中记录了“操作系统统计信息”。Oracle会利用操作系统统计信息来修正执行计划的代价，也就是说这些信息是影响代价计算的因素之一。  
注意：如果oracle收集了操作系统统计信息，那么CBO采用工作量统计模式计算代价  
      如果oracle没有收集操作系统统计信息，那么CBO采用非工作量统计模式计算代价，看上面MBRC没有参数值就说明还没有收集操作系统统计信息  
这两个模式计算代价的公式是不同的。  
SNAME：是指操作系统统计信息  
PNAME：parameter name 参数名  
PVAL1：参数值  
PVAL2：参数值  
参数解释  
FLAGS：标志  
CPUSPEEDNW：非工作量统计模式下CPU主频，直接来自硬件  
IOSEEKTIM：IO寻址时间（毫秒），直接来自硬件  
IOTFRSPEED：IO传输速率（字节/毫秒）  
SREADTIM：读取单个数据块的平均时间  
MREADTIM：读取多个数据块的平均时间  
CPUSPEED：工作量统计模式下CPU主频，根据当前工作量评估出一个合理值  
MBRC：oracle收集完统计信息后评估出的一次多块读可以读几个数据块db_file_multiblock_read_count  
MAXTHR：最大IO吞吐量（字节/秒）  
SLAVETHR：平均IO吞吐量（字节/秒）  
后面这6个参数是在oracle收集完统计信息后才能得出的参数值，有什么用呢？我来解释一下下  
CBO在计算SQL语句的代价时，需要使用数据库对象例如表 索引 等对象统计数据，还要使用操作系统统计数据例如CPU周期 IO速度 数据块读时间等，选择花费时间最少的执行计划为最佳执行计划。  
Oracle使用dbms_stats.gather_system_stats存储过程来收集操作系统统计信息，收集来的数据存放在sys.aux_stats$表中，如果我们做了收集操作那么会有统计数据，如果没有做就没有统计数据，这两种计算代价的方法是不同的，后续会讲。  
dbms_stats.gather_system_stats语法  
execute  dbms_stats.gather_system_stats（  
gathering_mode varchar2 default ‘noworkload’  
interval integer default null,  
stattab varchar2 default null,  
statid varchar2 default null,  
statown varchar2 default null);  
解释  
gathering_mode 参数，默认值“noworkload”，还可以设置为“workload”含义  
noworkload：非工作量统计模式，收集上来的数据都是来自硬件  
workload：工作量统计模式，收集上来的数据需要在特定的数据库负载间隔内统计出来的，这样的数据才能真实反映出数据库的操作系统参数（需要执行sql测评出来）  
interval：可以指定收集统计信息的时间间隔，例如 5 收集5分钟的统计信息  
命令：execute dbms_stats.gather_system_stats(‘noworkload’,5);    
START和STOP关键字自己决定何时开始何时结束收集统计信息  
命令：execute dbms_stats.gather_system_stats(‘start’);  
上下两条指令间隔3分钟执行，然后把这3分钟的统计信息写入到sys.aux_stats$表里面  
execute dbms_stats.gather_system_stats(‘stop’);  
注意：上面有个MBRC参数我想多聊一下，它是初始化参数db_file_multiblock_read_count的简写中文翻译“一次读多少个数据块or一次多块读可以读几个数据块”，如果收集了统计信息那么CBO会用MBRC计算代价，如果没有收集统计信息CBO会用这个初始化参数db_file_multiblock_read_count计算代价。  
LEO1@LEO1> show parameter db_file_multiblock_read_count     这是我机器上参数默认值  
NAME                                 TYPE        VALUE  
------------------------------------ ----------- ------------------------------------------  
db_file_multiblock_read_count            integer       79  
LEO1@LEO1> show parameter db_block_size                   我们的一个块大小为8k  
NAME                                 TYPE        VALUE  
------------------------------------ ----------- ---------------------------------------------  
db_block_size                           integer      8192  
这个参数值并不是无限大的，大多数平台下的oracle都是128。一般oracle block size =8k  
128*8=1M，也就是说1M是大多数操作系统一次最大IO的限制，如果还有其他限制要从这1M里面扣除，初始化参数db_file_multiblock_read_count的最大值之所以定为128，也是为了保守策略。  
79*8k=632K  
测试  
LEO1@LEO1> drop table leo1 purge;                      清空环境  
Table dropped.  
LEO1@LEO1> create table leo1 as select * from dba_objects;   创建leo1表  
Table created.  
LEO1@LEO1> begin  
     dbms_stats.gather_table_stats(                      收集表的统计信息  
          wnname=>'leo1',                            用户名  