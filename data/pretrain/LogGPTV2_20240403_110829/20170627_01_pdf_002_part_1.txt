SP-GiST for PostgreSQL
User Manual
Version1.0
SP-GiSTv1.0 User Manual
Disclaimer
While every effort has been made to make this manual as complete and as
accurate as possible, no warranty or fitness is implied. The information provided
here is on an (cid:147)as is(cid:148) basis. The authors and the publisher shall have neither
liability nor responsibility to any person or entity with respect to any loss or
damages arising from the information contained in this manual.
Copyright Information
Copyright ' 2005, Purdue University , Computer Science Department
Permission is granted to copy, distribute and/or modify this document under the
terms of the GNU Free Documentation License, Version 1.2 or any later version
published by the Free Software Foundation; with no Invariant Sections, no Front-
Cover Texts, and no Back-Cover Texts. A copy of the license is included in the
section entitled "GNU Free Documentation License".
Acknowledgement
This material is based upon work supported by the National Science Foundation
under Grant No. IIS-0093116. Any opinions, findings, and conclusions or
recommendations expressed in this material are those of the author(s) and do
not necessarily reflect the views of the National Science Foundation.
Copyright'2005, Purdue University 2
SP-GiSTv1.0 User Manual
What is SP-GiST?
SP-GiST is a General Index Framework for Space Partitioning Trees. Check
http://www.cs.purdue.edu/spgist for details.
What is PostgreSQL ?
PostgreSQL is a highly extensible open source object-relational database
management system. Check http://www.postgresql.org for details.
What is SP-GiST for PostgreSQL ?
SP-GiST for PostgreSQL is an effort to introduce SP-GiST index access method
to PostgreSQL.
Copyright'2005, Purdue University 3
SP-GiSTv1.0 User Manual
TABLE OF CONTENTS
INSTALLATION..............................................................................................................5
System Requirements and Prerequisites....................................................................5
Download the source code............................................................................................5
Building and Installing SP-GiST for PostgreSQL.....................................................5
Quick Installation Instructions....................................................................................5
Detailed Installation Instructions................................................................................5
GETTING STARTED......................................................................................................9
Loading SP-GiST core and extensions modules.........................................................9
Creating indexes using SP-GiST access method........................................................9
WRITING SP-GIST EXTENSIONS............................................................................10
SP-GiST Extension Functions....................................................................................10
• Consistent().......................................................................................................10
• NN_Consistent()...............................................................................................11
• Penalty()............................................................................................................11
• Split()................................................................................................................12
CONTRIBUTION TO THE PROJECT.......................................................................13
Copyright'2005, Purdue University 4
SP-GiSTv1.0 User Manual
INSTALLATION
System Requirements and Prerequisites
SP-GiST for PostgreSQL sources are expected to build successfully on any Unix, or Unix-like
system, although it was only tested on Linux-x86 , Linux-amd64 , and SunOS 5.8.
PostgreSQL8.0 or later is required. Earlier versions of PostgreSQL are not supported.
Please note that building SP-GiST for PostgreSQL requires PostgreSQL server-side header files
to be installed.
Download the source code
SP-GiST for PostgreSQL sources can be downloaded at:
http://www.cs.purdue.edu/spgist/download.html
Since SP-GiST is still under development, it is a good idea to periodically check for new releases
of sources.
Building and Installing SP-GiST for PostgreSQL
Quick Installation Instructions
For the impatient, the following Unix commands untars, configure, build, and install SP-GiST for
PostgreSQL. ( replace xxxx with your distribution version )
gzip -cd spgist-xxxx.tgz | tar xvf -
cd spgist-xxxx
./configure --with-postgresql=/path/to/postgresql/installation
make
su
make install
If you are using SP-GiST in a production environment (do you really dare? ) you may need to use
make install-strip instead of make install.
For detailed description of the installation process please check the next section (cid:147)Detailed
Installation Instructions(cid:148).
Detailed Installation Instructions
You may skip this section if you don’t want to care about building and installation details or if
you are already familiar with the GNU tools.
The ‘configure’ shell script attempts to guess correct values for various system-dependent
variables used during compilation. It uses those values to create a ‘Makefile’ in each directory of
the package. It may also create one or more ‘.h’ files containing system-dependent definitions.
Finally, it creates a shell script ‘config.status’ that you can run in the future to recreate the current
configuration, a file ‘config.cache’ that saves the results of its tests to speed up reconfiguring, and
a file ‘config.log’ containing compiler output (useful mainly for debugging ‘configure’).
If you need to do unusual things to compile the package, please try to figure out how ‘configure’
could check whether to do them, and mail diffs or instructions to the address given in the
Copyright'2005, Purdue University 5
SP-GiSTv1.0 User Manual
‘README’ file, so they can be considered for the next release. If at some point ‘config.cache’
contains results you don’t want to keep, you may remove or edit it.
The file ‘configure.in’ is used to create ‘configure’ by a program called ‘autoconf’. You only need
‘configure.in’ if you want to change it or regenerate ‘configure’ using a newer version of
‘autoconf’.
The simplest way to compile this package is:
1. ‘cd’ to the directory containing the package’s source code and type ‘./configure’ to
configure the package for your system. If you’re using ‘csh’ on an old version of System
V, you might need to type ‘sh ./configure’ instead to prevent ‘csh’ from trying to execute
‘configure’ itself.
Running ‘configure’ takes awhile. While running, it prints some messages telling which features it
is checking for.
2. Type ‘make’ to compile the package.
3. Optionally, type ‘make check’ to run any self-tests that come with the package.
4. Type ‘make install’ to install the programs and any data files and documentation.
5. You can remove the program binaries and object files from the source code directory by
typing ‘make clean’. To also remove the files that ‘configure’ created (so you can compile
the package for a different kind of computer), type ‘make distclean’. There is also a
‘make maintainer-clean’ target, but that is intended mainly for the package’s developers.
If you use it, you may have to get all sorts of other programs in order to regenerate files
that came with the distribution.
Some systems require unusual options for compilation or linking that the ‘configure’ script does
not know about. You can give ‘configure’ initial values for variables by setting them in the
environment. Using a Bourne-compatible shell, you can do that on the command line like this:
CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure
Or on systems that have the ‘env’ program, you can do it like this:
env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure
You can compile the package for more than one kind of computers at the same time, by placing
the object files for each architecture in their own directory. To do this, you must use a version of
‘make’ that supports the ‘VPATH’ variable, such as GNU ‘make’. ‘cd’ to the directory where you
want the object files and executables to go and run the ‘configure’ script. ‘configure’
automatically checks for the source code in the directory that ‘configure’ is in and in ‘..’.
If you have to use a ‘make’ that does not support the ‘VPATH’ variable, you have to compile the
package for one architecture at a time in the source code directory. After you have installed the
package for one architecture, use ‘make distclean’ before reconfiguring for another architecture.
By default, ‘make install’ will install the modules in ‘/usr/local/postgresql/lib’. You can modify
that path according to your PostgreSQL installation by giving ‘configure’ the option ‘--with-
Copyright'2005, Purdue University 6
SP-GiSTv1.0 User Manual
postgresql=PATH’. Or you can update manually file (cid:145)configure.in(cid:146) and replace path (cid:145)/usr/local/(cid:146)
with your PostgreSQL path.
You can specify separate installation prefixes for architecture-specific files and architecture-
independent files. If you give ‘configure’ the option ‘--exec-prefix=PATH’, the package will use
PATH as the prefix for installing programs and libraries. Documentation and other data files will
still use the regular prefix.
In addition, if you use an unusual directory layout you can give options like ‘--bindir=PATH’ to
specify different values for particular kinds of files. Run ‘configure --help’ for a list of the
directories you can set and what kinds of files go in them.
If the package supports it, you can cause programs to be installed with an extra prefix or suffix on
their names by giving ‘configure’ the option ‘--program-prefix=PREFIX’ or ‘--program-
suffix=SUFFIX’.
Optional Features
=================
Some packages pay attention to ‘--enable-FEATURE’ options to ‘configure’, where FEATURE
indicates an optional part of the package. They may also pay attention to ‘--with-PACKAGE’
options, where PACKAGE is something like ‘gnu-as’ or ‘x’ (for the X Window System). The
‘README’ should mention any ‘--enable-’ and ‘--with-’ options that the package recognizes.
For packages that use the X Window System, ‘configure’ can usually find the X include and
library files automatically, but if it doesn’t, you can use the ‘configure’ options ‘--x-includes=DIR’
and ‘--x-libraries=DIR’ to specify their locations.
Specifying the System Type
==========================
There may be some features ‘configure’ can not figure out automatically, but needs to determine
by the type of host the package will run on. Usually ‘configure’ can figure that out, but if it prints
a message saying it can not guess the host type, give it the ‘--host=TYPE’ option. TYPE can
either be a short name for the system type, such as ‘sun4’, or a canonical name with three fields:
CPU-COMPANY-SYSTEM
See the file ‘config.sub’ for the possible values of each field. If ‘config.sub’ isn’t included in this
package, then this package doesn’t need to know the host type. If you are building compiler tools
for cross-compiling, you can also use the ‘--target=TYPE’ option to select the type of system they
will produce code for and the ‘--build=TYPE’ option to select the type of system on which you
are compiling the package.
Sharing Defaults
================