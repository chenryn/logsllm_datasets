# SP-GiST for PostgreSQL User Manual
## Version 1.0

### Disclaimer
Every effort has been made to ensure the accuracy and completeness of this manual. However, no warranty or fitness is implied. The information provided is on an "as is" basis. The authors and the publisher will not be liable for any loss or damages arising from the use of the information contained in this manual.

### Copyright Information
Copyright Â© 2005, Purdue University, Computer Science Department

Permission is granted to copy, distribute, and/or modify this document under the terms of the GNU Free Documentation License, Version 1.2 or any later version published by the Free Software Foundation, with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled "GNU Free Documentation License."

### Acknowledgement
This material is based upon work supported by the National Science Foundation under Grant No. IIS-0093116. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation.

### What is SP-GiST?
SP-GiST (Space Partitioning Generalized Search Tree) is a general index framework for space partitioning trees. For more details, visit [Purdue University's SP-GiST page](http://www.cs.purdue.edu/spgist).

### What is PostgreSQL?
PostgreSQL is a highly extensible open-source object-relational database management system. For more details, visit [the official PostgreSQL website](http://www.postgresql.org).

### What is SP-GiST for PostgreSQL?
SP-GiST for PostgreSQL is an initiative to introduce the SP-GiST index access method to PostgreSQL.

### Table of Contents
1. **Installation**
   - System Requirements and Prerequisites
   - Download the Source Code
   - Building and Installing SP-GiST for PostgreSQL
     - Quick Installation Instructions
     - Detailed Installation Instructions
2. **Getting Started**
   - Loading SP-GiST Core and Extensions Modules
   - Creating Indexes Using SP-GiST Access Method
3. **Writing SP-GiST Extensions**
   - SP-GiST Extension Functions
     - `Consistent()`
     - `NN_Consistent()`
     - `Penalty()`
     - `Split()`
4. **Contribution to the Project**

### Installation
#### System Requirements and Prerequisites
SP-GiST for PostgreSQL is expected to build successfully on any Unix or Unix-like system, although it has only been tested on Linux-x86, Linux-amd64, and SunOS 5.8. PostgreSQL 8.0 or later is required. Earlier versions are not supported. Note that building SP-GiST for PostgreSQL requires the PostgreSQL server-side header files to be installed.

#### Download the Source Code
You can download the SP-GiST for PostgreSQL source code from:
[http://www.cs.purdue.edu/spgist/download.html](http://www.cs.purdue.edu/spgist/download.html)

Since SP-GiST is still under development, it is advisable to check for new releases periodically.

#### Building and Installing SP-GiST for PostgreSQL
##### Quick Installation Instructions
For a quick installation, follow these steps (replace `xxxx` with your distribution version):
```sh
gzip -cd spgist-xxxx.tgz | tar xvf -
cd spgist-xxxx
./configure --with-postgresql=/path/to/postgresql/installation
make
su
make install
```
If you are using SP-GiST in a production environment, consider using `make install-strip` instead of `make install`.

##### Detailed Installation Instructions
You may skip this section if you are familiar with GNU tools or do not need detailed instructions.

The `configure` script attempts to guess correct values for various system-dependent variables used during compilation. It creates a `Makefile` in each directory, possibly one or more `.h` files containing system-dependent definitions, and a `config.status` script to recreate the current configuration. Additionally, it generates `config.cache` to speed up reconfiguration and `config.log` for debugging.

If you encounter unusual compilation issues, please try to determine how `configure` could handle them and send the details to the address given in the `README` file for consideration in the next release.

The simplest way to compile the package is:
1. Change to the directory containing the source code and run `./configure` to configure the package for your system.
2. Run `make` to compile the package.
3. Optionally, run `make check` to execute self-tests.
4. Run `make install` to install the programs, data files, and documentation.
5. To clean up, run `make clean`. For a more thorough cleanup, use `make distclean`. Developers may also use `make maintainer-clean`, but this may require additional programs to regenerate files.

Some systems may require unusual options for compilation or linking. You can set these in the environment before running `configure`:
```sh
CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure
```
or
```sh
env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure
```

To compile the package for multiple architectures, use a version of `make` that supports the `VPATH` variable, such as GNU `make`. Change to the desired directory and run `configure`.

By default, `make install` installs modules in `/usr/local/postgresql/lib`. You can specify a different path by using the `--with-postgresql=PATH` option with `configure`. Alternatively, you can manually update `configure.in` to replace `/usr/local/` with your PostgreSQL path.

You can specify separate installation prefixes for architecture-specific and architecture-independent files using the `--exec-prefix=PATH` option. For more specific directories, use options like `--bindir=PATH`. Run `configure --help` for a list of available directories.

Optional features can be enabled or disabled using `--enable-FEATURE` or `--with-PACKAGE` options. For X Window System packages, use `--x-includes=DIR` and `--x-libraries=DIR` to specify their locations.

If `configure` cannot guess the host type, use the `--host=TYPE` option. For cross-compiling, use `--target=TYPE` and `--build=TYPE` to specify the target and build systems, respectively.