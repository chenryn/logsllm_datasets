局结果是局部结果的简单求和，且局部结果互不相干，因此局部最优的策略也同样是全局最优的
策略。
2.2分配问题
455. Assign Cookies (Easy)
题目描述
有一群孩子和一堆饼干，每个孩子有一个饥饿度，每个饼干都有一个大小。每个孩子只能吃
最多一个饼干，且只有饼干的大小大于孩子的饥俄度时，这个孩子才能吃饱。求解最多有多少孩
子可以吃饱。
输人输出样例
输人两个数组，分别代表孩子的饥饿度和饼干的大小。输出最多有多少孩子可以吃饱的数
量。
Input: [1,2], [1,2,3]
Output: 2
在这个样例中，我们可以给两个孩子喂[1.2]、[1,3]、[2.3]这三种组合的任意一种。
题解
因为饥度最小的孩子最容易吃饱，所以我们先考虑这个孩子。为了尽量使得剩下的饼干可
以满足饥饿度更大的孩子，所以我们应该把大于等于这个孩子饥饿度的、且大小最小的饼干给这
个孩子。满足了这个孩子之后，我们采取同样的策略，考虑剩下孩子里饥饿度最小的孩子，直到
没有满足条件的饼干存在。
---
## Page 9
2.2分配问题
4/143 -
简面言之，这里的贫心策略是，给剩余孩子里最小饥饿度的孩子分配最小的能饱腹的饼干。
至于具体实现，因为我们需要获得大小关系，一个便捷的方法就是把孩子和饼干分别排序。
这样我们就可以从饥饿度最小的孩子和大小最小的饼干出发，计算有多少个对子可以满足条件。
注意对数组或宇符串排序是常见的操作，方便之后的大小比较：
注意在之后的讲解中，若我们该论的是对连续空间的变量进行操作，我们并不会明确区分数组
个数组[’a’，b'，'c']。
int findContentChildren(vector& children, vector& cookies) {
sort (children.begin() , children.end ());
sort (cookies.begin(), cookies.end());
int child = 0, cookie = 0;
while (child& ratings){
int size = ratings.size();
if (size  num(size, 1);
F
for (int i = 1; i ratings[i-1]){
num[i] = nun[i-1]  + 1;
for (int i = size - 1; i > 0; --i) {
if (ratings[i]>& intervals) {
if (intervals.empty())(
return 0;
int n = intervals.size ();
sort(intervals.begin(), intervals.end(), [] (vector a, vector b) {
return a[1] tvoSum(vector& numbers,int target) {
int 1 = O, r = numbers.size() - 1, sum;
while (1 {1 + 1,r + 1};
---
## Page 15
3.3归并两个有序数组
10/143 -
3.3归并两个有序数组
88. Merge Sorted Array (Easy)
题目描述
给定两个有序数组，把两个数组合并为一个。
输人输出样例
输入是两个数组和它们分别的长度m和n。其中第一个数组的长度被延长至m+n，多出的
n位被0填补。题目要求把第二个数组归并到第一个数组上，不需要开辟额外空间。
Input: nums1 - [1,2,3,0,0,0], m = 3, nums2 - [2,5,6], n = 3
Output: nums1 = [1,2,2,3,5,6]
题解
因为这两个数组已经排好序，我们可以把两个指针分别放在两个数组的末尾，即nums1的
m-1位和nums2的n-1位。每次将较大的那个数字复制到nums1的后边，然后向前移动一位，
因为我们也要定位nums1的末尾，所以我们还需要第三个指针，以便复制。
在以下的代码里，我们直接利用m和n当作两个数组的指针，再额外创立一个pos指针，起
始位置为m+n-1。每次向前移动m或n的时候，也要向前移动pos。这里需要注意，如果nums1
的数字已经复制完，不要忘记把nums2的数字继续复制：如果nums2的数字已经复制完，剩余
nums1的数字不需要改变，因为它们已经被排好序。
++a返回值为a+1。如果只是希望增加a的值，而不需要返回值，则推荐使用++a，其运行速度
会略快一些。
void merge(vectork nums1, int m, vector& nums2, int n) {
int pos = n-- + n-- - 1;
while (m >= 0 && n >= 0) {
nums1[pos--] - nums1[m]  > nums2[n]? nums1[m--] : nums2[n--];
while (n >= 0) {
nums1[pos--] - nums2[n--];
3.4快慢指针
142.Linked List Cycle II (Medium)
题目描述
给定一个链表，如果有环路，找出环路的开始点。
---
## Page 16
3.5滑动窗口
11/143 -
输人输出样例
输入是一个链表，输出是链表的一个节点。如果没有环路，返回一个空指针。
图3.1:题目142-输入样例
在这个样例中，值为2的节点即为环路的开始点。
如果没有特殊说明，LeetCode采用如下的数据结构表示链表。
struct ListNode {
ListNode *next;
int val;
ListNode(int x)
:val(x)，next (nullptr) {)
};
题解
对于链表找环路的问题，有一个通用的解法
快慢指针（Floyd判圈法）。给定两个指针，
分别命名为slow和fast，起始位置在链表的开头。每次fast 前进两步，slow前进一步。如果fast
可以走到尽头，那么说明没有环路：如果fast可以无限走下去，那么说明一定有环路，且一定存
在一个时刻slow和fast相遇，当slow和fast 第一次相遇时，我们将fast 重新移动到链表开头，并
让slow和fast每次都前进一步。当slow和fast 第二次相遇时，相遇的节点即为环路的开始点。
ListNode *detectCycle(ListNode *head) {
ListNode *slow = head, *fast - head;
//判断是否存在环路
do {
if (!fast ll!fast->next) return nullptr;
fast = fast->next->next;
slov = slou->next;
}uhile (fast != slov);
//如果存在，查找环路节点
fast = head;
while (fast != slov){
slov = slov->next;
return fast;
3.5滑动窗口
76.Minimum Window Substring (Hard)
---
## Page 17
3.6练习
12/143 -
题目描述
给定两个字符中S和T，求S中包含7所有字符的最短连续子字符中的长度，同时要求时间
复杂度不得超过O(n)。
输人输出样例
输入是两个字符中S和T，输出是一个S字符中的子中。
Input: S - "ADOBECODEBANC", T - "ABC"
Output:"BANC*
在这个样例中，S中同时包含一个A、一个B、一个C的最短子字符中是“BANC"，
题解
本题使用滑动窗口求解，即两个指针/和r都是从最左端向最右端移动，且的位置一定在
r的左边或重合。注意本题虽然在for循环里出现了一个while循环，但是因为 while 循环负责移
动指针，且1只会从左到右移动一次，因此总时间复杂度仍然是O（n）。本题使用了长度为128
的数组来映射字符，也可以用哈希表替代：其中chars表示目前每个字符缺少的数量，flag表示
每个字符是否在T中存在。
string minMindov(string S, string T) {
vector chars(128, 0);
vector f1ag(128, false);
//先统计T中的字符情况
for(int i = 0; i < T.size(); ++i) {
flag[T[i]] = true;