# Practical Context-Aware Permission Control for Hybrid Mobile Applications
**Author:** Kapil Singh  
**Affiliation:** IBM T.J. Watson Research Center  
**Email:** [Your Email]

## Abstract
The rapid growth of mobile computing has led to the development of new programming paradigms that facilitate the quick and easy creation of mobile applications. Hybrid frameworks, such as PhoneGap, allow developers to use web technologies to build applications with native access to device resources. However, these untrusted third-party applications often request access to user data and device resources, which can leave the content vulnerable to accidental or malicious leaks. Hybrid frameworks offer an opportunity to enhance the security of mobile platforms by providing an application-layer runtime to control application behavior.

In this work, we present a practical design for a novel framework called MobileIFC, aimed at building privacy-preserving hybrid applications for mobile platforms. We employ information flow models to control what untrusted applications can do with the information they receive. Our framework supports a fine-grained, context-sensitive permission model that enables users and developers to specify rich policies. We demonstrate the viability of our design through a prototype framework and evaluate its usability by developing sample applications using the framework's APIs. Our evaluation suggests that MobileIFC provides a practical and efficient security solution for hybrid mobile applications.

## 1. Introduction
The popularity of mobile computing has grown exponentially in recent years, driven by the availability of a vast application market that offers a wide range of functionalities, from banking to gaming to social networking. To capitalize on this growing consumer base, new services and applications are being developed rapidly by combining existing ones.

Most mobile operating systems (e.g., Android and iOS) use a capability-based permission system to mediate applications' access to device resources (e.g., camera) or user data (e.g., contact lists). The way permissions are granted varies: in Android, users approve permissions at installation time, while in iOS, approval is given at the first use.

However, the current permission model has two major limitations:
1. **Coarse-Grained and Inflexible**: The model lacks the flexibility to support rich security policies, such as conditional policies based on location. Additionally, permissions cannot be modified at runtime and require reinstallation of the application to include any changes.
2. **Insufficient Privacy Enforcement**: The model only provides access control over device resources but does not prevent applications from freely leaking sensitive information once they have been granted access.

To further facilitate rapid application development, new programming frameworks have emerged, allowing web technologies to be used for building native mobile applications. Frameworks like PhoneGap, Sencha, and Worklight enable automatic portability across multiple mobile platforms (e.g., Android, iOS, Blackberry). These hybrid applications, including popular ones like BBC’s Olympic coverage app and IGN’s Dominate, are on a "hypergrowth trajectory" and are expected to continue their upward trend with the entry of new major players into the market.

While these hybrid frameworks provide benefits in portability and ease of development, their potential for enhancing security has not been fully explored. They offer an interpretation layer or middleware where flexible security policies and enforcement mechanisms can be implemented to control applications' access to device resources. This approach does not require changes to the underlying operating system and is readily portable to multiple mobile platforms.

In this work, we focus on protecting user content from leaks by untrusted hybrid mobile applications. We propose and implement a new framework called MobileIFC (Mobile Information Flow Control), which leverages the mediation layer of the hybrid platform to enforce fine-grained, context-driven policies. MobileIFC allows users to specify mandatory security policies for their content while enabling applications to define more specific permission requirements. For example, a user can specify a policy like "Camera pictures taken at work should only be shared with company servers," and an application can specify a requirement like "Camera pictures are only shared with Picasa."

To enable context-aware policies, MobileIFC dynamically resolves the context of the device and/or application when resource access is requested. For instance, for location-driven policies, MobileIFC uses the geolocation API to determine the device's location before applying the associated security policies.

This paper makes the following contributions:
- **Addressing Security in Hybrid Applications**: We tackle the challenge of protecting user data in the fast-growing hybrid application market. Unlike existing solutions that rely on OS modifications, our solution is implemented at the application layer as an extension to hybrid frameworks, making it portable across multiple platforms. To the best of our knowledge, this is the first comprehensive permission framework for hybrid applications.
- **Rich Permission Model**: We propose a permission model that allows applications and users to specify fine-grained, context-aware policies.
- **Viability and Performance**: We develop a prototype framework, MobileIFC, to demonstrate the feasibility of our design and enable rich policy enforcement. We also illustrate the applicability of MobileIFC by developing representative applications (e.g., banking, healthcare, and financial management) and analyzing their performance and integration overheads.

## 2. Overview
MobileIFC is an architectural framework designed to execute hybrid mobile applications, allowing users to share their private mobile content with untrusted applications while preventing these applications from leaking sensitive information. The framework provides complete mediation for all communication to and from these applications at runtime, enabling users to administer fine-grained, context-aware policies that meet their privacy requirements.

Typical mobile applications leverage services provided by other applications on the device and network servers. As a result, they need to communicate with external entities to perform specific tasks. For example, a social networking app might communicate with www.cnn.com to fetch daily news and use the device's camera to post pictures.

Currently, applications are installed monolithically on the mobile OS and are isolated from each other and the underlying OS by default. The OS controls access to security-sensitive device resources, but this follows an all-or-nothing permission approach and does not support restricting access to specific external entities. Moreover, applications can define their own permissions, but this model is insufficient for transitive policy enforcement, leading to privilege escalation attacks.

Even if the current permission model is made more fine-grained, it still does not satisfy the principle of least privilege. An approved external entity, such as www.news.com, might not require any personal information, but the application can still (mistakenly or maliciously) share any available user information with it.

In the hybrid design, applications are hosted by a hybrid programming platform that provides APIs to expose the functionality available to native applications. The platform, along with the hosted hybrid application, is deployed on the underlying OS as a native application. The platform requests the desired permissions from the mobile OS and can selectively grant or revoke these permissions to the hybrid application based on finer-grained, context-aware policies.

The uniqueness of MobileIFC lies in its efficient information flow control techniques, which allow it to enforce fine-grained policies. We adapt concepts from previous work in the social networking domain to build MobileIFC for the hybrid application environment. Information flow control in MobileIFC is enforced by design, meaning that applications are redesigned to achieve effective and efficient information flow control. The applications are split into smaller, manageable chunks; each chunk is the smallest unit of application code on which policies are administered. A chunk is defined based on the information it accesses and the external entities it communicates with.

From the user's perspective, the applications appear monolithic. When adding an application, the user is presented with a manifest that specifies what private or sensor data the application needs and which external entities it will share this data with. For example, a social networking app's manifest would state that it shares camera pictures only with the social network's server. The user can make a more informed decision based on this information.

In addition to the approval-based approach, MobileIFC allows users to define their own privacy policies as functions of user/device resources (input), external entities (output), and device or application context (condition). For example, a user can specify that the device's camera should not be accessible to any application at work, thus revoking the social networking app's camera access at the user's work location.

### 2.1 Trust Relationships and Threat Model
In this work, we aim to secure a user's private information from leaks by malicious attackers. Our trust model is defined from the end-user's perspective, where a user represents both individuals and administrative entities (e.g., corporations) that manage data for employees and clients.

There are multiple parties involved in distributing and consuming a user's private information. First, the hybrid framework provides the necessary enforcement for a user's privacy policies and is trusted along with the underlying OS. Second, third-party mobile applications are untrusted by default. We assume that such applications can either be developed by malicious attackers to collect sensitive information or are benign but vulnerable to exploits that could lead to information leaks.

For an information leak to be considered successful, sensitive information must be passed to an unintended external entity. We consider three classes of external entities based on their trust level:
- **Untrusted Entities**: Default trust level; no sensitive information is shared.
- **Semi-Trusted Entities**: Approved by the user for data sharing; can receive only the sensitive information for which they are approved.
- **Trusted Entities**: Allowed to receive sensitive information and are expected to filter any sensitive content from their output before providing it to the application (i.e., act as a declassifier).

Our work focuses on preventing information leaks from untrusted third-party applications. It does not prevent approved external entities from using outside channels to share information once they have access to it. Therefore, we only consider leakage protection on the client side in multi-tier applications.

### 2.2 Policy Specification in MobileIFC
In this section, we use a representative banking application to illustrate how rich security policies can be defined and enforced in MobileIFC to prevent applications from leaking user content. The policies are expressed via fine-grained, context-aware permissions and other (possibly organization-specific) mandatory policies, which are enforced at runtime by the MobileIFC framework.

For example, a user can specify that the device's camera should not be accessible to any application at work, and a banking application can specify that camera pictures are only shared with the bank's server. These policies allow users to enforce their own privacy requirements and potentially prevent malicious behavior.

[Diagram: Example of Data Flow in a Banking Application]
- **Data Input**: Credentials, Camera, Account Info, Geolocation
- **Content Shown to the User**: Map, Account Info
- **External Entities**: bank.com, google.com

[Diagram: Data Flow in MobileIFC]
- **Data Input from MobileIFC**: Credentials, Camera, Account Info, Geolocation
- **Content Shown to the User**: Map, Account Info
- **Chunks**: C1, C2, C3
- **External Entities**: bank.com, google.com

This diagram illustrates how MobileIFC mediates the data flow between the user, the application, and external entities, ensuring that only approved flows are allowed.

---

This optimized text aims to improve clarity, coherence, and professionalism while maintaining the original content and intent.