title:Practical Context-Aware Permission Control for Hybrid Mobile Applications
author:Kapil Singh
Practical Context-Aware Permission Control for
Hybrid Mobile Applications
Kapil Singh
IBM T.J. Watson Research Center
PI:EMAIL
Abstract. The rapid growth of mobile computing has resulted in the
development of new programming paradigms for quick and easy devel-
opment of mobile applications. Hybrid frameworks, such as PhoneGap,
allow the use of web technologies for development of applications with
native access to device’s resources. These untrusted third-party appli-
cations desire access to user’s data and device’s resources, leaving the
content vulnerable to accidental or malicious leaks by the applications.
The hybrid frameworks present new opportunities to enhance the secu-
rity of mobile platforms by providing an application-layer runtime for
controlling an application’s behavior.
In this work, we present a practical design of a novel framework, named
MobileIFC, for building privacy-preserving hybrid applications for mo-
bile platforms. We use information ﬂow models to control what untrusted
applications can do with the information they receive. We utilize the
framework to develop a ﬁne-grained, context-sensitive permission model
that enables users and application developers to specify rich policies. We
show the viability of our design by means of a framework prototype. The
usability of the framework and the permission model is further evaluated
by developing sample applications using the framework APIs. Our eval-
uation and experience suggests that MobileIFC provides a practical and
performant security solution for hybrid mobile applications.
1
Introduction
With the development of new mobile platforms, such as Android and iOS,
mobile computing has shown exponential growth in popularity in recent years. A
major factor driving this growth is the availability of a huge application market
that provides rich functionality ranging from banking to gaming to social net-
working. To beneﬁt from the availability of a constantly growing consumer base,
new services and applications are being built from the composition of existing
ones at breakneck speed.
Most mobile operating systems currently use a capability-based permission
system that mediates applications’ access to device resources (such as camera)
or user’s data (such as contact lists). The operating system vary in the way the
permissions are granted. For example, users approve the permissions at install
time in Android while such approval is done at the time of ﬁrst use in iOS.
The permission model, in the current form, suﬀers from two major limi-
tations. First, the model is too coarse-grained and lacks ﬂexibility to support
rich security policies. For example, it does not allow conditional policies, such as
location-based policies, to control permissions. Moreover, the permissions cannot
be modiﬁed at runtime1 and requires an explicit reinstallation of the application
to include any changes. Second, the permission model only provides access con-
trol over the device resources by explicitly releasing corresponding capabilities to
the applications. However, access control policies are not suﬃcient in enforcing
the privacy of an individual: once an application is permitted access to a data
or a resource, it can freely leak this information anytime to an external entity
for personal gains.
To further facilitate quick application development, new programming frame-
works have emerged to allow web technologies to be used as building blocks for
native mobile applications. Such frameworks, such as PhoneGap [10], Sencha [11]
and Worklight [5], enable automatic portability of the application onto multiple
mobile platforms, such as Android, iOS, Blackberry, etc. A wide variety of such
hybrid applications have been developed using these frameworks including some
recent popular applications, such as BBC’s Olympic coverage application [2] and
IGN’s mobile social network Dominate [6]. The hybrid application market is “on
a hypergrowth trajectory” and is expected to continue its upward growth with
the entry of new major players into the market [23].
While these platforms are known to provide beneﬁts of portability and eas-
ier development, their usefulness to security has not been fully understood. In
essence, they provide an interpretation layer or middleware where ﬂexible secu-
rity policies and enforcement mechanisms can be realized to control applications’
access to device resources. The resources include personal user data such as con-
tact list, and the content generated by the use of device sensors such as camera
or GPS. The biggest advantage of hooking any security solution into this layer is
that it does not require any support from or changes to the underlying operating
system and the solution is readily portable to multiple mobile platforms.
In this work, we are concerned with protecting the user content from leaks
by untrusted (malicious or vulnerable) hybrid mobile applications. We propose
and implement a new framework, called MobileIFC (Mobile Information Flow
Control), that leverages the mediation layer of the hybrid platform to support
runtime enforcement of ﬁne-grained, context-driven policies. MobileIFC allows
the user to provide mandatory security policies for protection of his content,
while at the same time enabling mobile applications to be more speciﬁc about
their permission requirements. For example, the user can specify context-driven
policies such as “Camera pictures taken at work should only be shared with
company’s servers”. The applications can also specify ﬁner-grained permission
requirements such as “Camera pictures are only shared with Picasa”.
To enable context-aware policies, MobileIFC resolves the context of the device
and/or the application at runtime when resource access is requested by the
1 iOS 5+ enables control over certain permissions, such as contacts and geolocation,
after an application is installed.
application and permissions are subsequently adapted based on the resolved
context. For location-driven policies as an example, MobileIFC taps into the
geolocation API of the hybrid platform to resolve the location of the device
before deriving the associated security policies.
This paper makes the following contributions:
– We address the challenge of protecting user’s mobile data in the fast growing
hybrid application market. In contrast to the existing security solutions that
rely on OS modiﬁcations, our solution is realized at the application layer
as an extension to the hybrid frameworks and hence is readily portable to
multiple mobile platforms. To the best of our knowledge, we are the ﬁrst to
provide a comprehensive permission framework for hybrid applications.
– We propose a rich permission model that enables applications and users to
specify ﬁne-grained, context-aware policies.
– To show the viability of our design and enable rich policy enforcement, we
develop a novel framework, called MobileIFC, that redesigns applications to
support eﬀective information ﬂow control for hybrid applications and enables
context-dependent policy resolution at runtime. We illustrate the applica-
bility of MobileIFC by developing representative (banking, healthcare and
ﬁnancial management) applications on top of the framework and analyzing
its performance and integration overheads.
2 Overview
MobileIFC is an architectural framework for executing hybrid mobile appli-
cations that enables users to share their private mobile content with untrusted
applications. The framework, in turn, prevents these applications from leaking
users’ sensitive content. MobileIFC eﬀectively provides complete mediation for
all communication to and from these applications at runtime to enable users to
administer ﬁne-grained, context-aware policies that satisfy their privacy require-
ments.
Typical mobile applications leverage services rendered by other applications
on the device and by network servers. As a result, they need to communicate
with entities outside the MobileIFC system, called external entities, to perform
speciﬁc tasks. For example, a social networking application may communicate
with www.cnn.com to receive a daily news feed for the user. Additionally, it may
seek the device’s camera application to click and post the user’s picture on his
proﬁle.
Currently, applications are more-or-less monolithically installed on the mo-
bile OS and isolated from each other and from the underlying OS by default. The
OS controls access to security-sensitive device resources such as Internet access.
However, such access follows an all-or-nothing permission approach and does not
support restricting Internet access to only speciﬁc external entities. Moreover,
applications can also deﬁne their own permissions to control access to sensitive
interfaces that they expose to other applications. The application-centric permis-
sion model is not suﬃcient for transitive policy enforcement allowing privilege
escalation attacks as shown by the recent attacks [13, 15, 19].
Even after the current permission model is extended to make it ﬁne-grained,
access control, by itself, is not suﬃcient as it does not satisfy the principle of
least privilege: even if an approved external entity, e.g. www.news.com, requires
no user’s personal information, the application can (mistakenly or maliciously)
share with the external entity any piece of user information available to the
application.
In the hybrid design, applications are hosted by the hybrid programming
platform that provides a set of APIs to expose the functionality available to
native applications. The platform itself along with the hosted hybrid application
is deployed on the underlying OS as a native application. The platform requests
the desired access or permissions from the mobile OS using the permission model
supported by the OS. This makes the platform an ideal location to hook a
reference monitor that controls all its granted permissions. As a result, it can
selectively grant or revoke a subset of these permissions to the hybrid application
based on ﬁner-grained, context-aware policies.
The uniqueness of MobileIFC’s design is attributed to techniques that en-
able eﬃcient information ﬂow control within the framework, thus allowing it to
enforce ﬁne-grained policies. We adapt some of the concepts from previous work
in the social networking domain [27] to build MobileIFC suitable for the hybrid
application environment. Information ﬂow control in MobileIFC is enforced by
design, i.e., MobileIFC redesigns the applications in order to achieve eﬀective and
eﬃcient information ﬂow control. The applications are split into a set of chunks2;
a chunk being the smallest granularity of application code on which policies are
administered by MobileIFC. A chunk is chosen based on what information the
chunk has access to and what external entity it is allowed to communicate with.
From an end user’s perspective, the applications are monolithic as the user
does not know about the chunks. At the time of adding a particular application,
the user is presented with a manifest that states what piece of user’s private
or sensor data is needed by the application and which external entity will it be
sharing this data with. For example, the social networking application’s manifest
would specify that it shares any pictures it takes using the device’s camera with
only the social network’s server. Note that the application does not need to
reveal that it communicates with www.news.com as no user information is being
sent to www.news.com. The user can now make a more informed decision before
adding the application.
In addition to the approval-based approach, MobileIFC also allows the user to
deﬁne his own privacy policies as functions of user/device resources (as input),
external entities (as output), and device or application context (as associated
condition). For example, a user can specify that the device’s camera should not
be available to any application at work, thus revoking social networking appli-
cation’s camera access at user’s work location. Such user scenarios are realistic
in the real world as shown by a recent policy change at IBM regarding iPhone
Siri’s sharing of voice data with Apple’s servers [12].
2 We use the term chunks instead of components to diﬀerentiate from the component-
based architecture in Android.
Section 3 provides a detailed description of our design and how MobileIFC
ensures that only approved ﬂows are allowed. In this section, we present our trust
model (Section 2.1) and discuss how MobileIFC’s permission model enables rich
security policy speciﬁcation using some representative examples (Section 2.2).
We use Android as the mobile OS of choice for discussions, though our cross-
platform solution for hybrid applications is independent of any OS. We also use
open-sourced PhoneGap as our representative hybrid framework; the concepts
and solutions developed in our work can be similarly applied to other frameworks.
2.1 Trust Relationships and Threat Model
In this work, we are concerned with securing a user’s private information
from leaks by malicious attackers. Consequently, our trust model is deﬁned from
an end-user perspective. Note that in our framework, a user represents both
individuals seeking protection of their data and administrative entities, such as
corporations, which administer data for their employees and clients.
There are multiple parties that are involved in distributing and consuming
a user’s private information. First, the hybrid framework provide the necessary
enforcement for a user’s privacy policies and therefore is trusted in our framework
along with the underlying OS. Second, mobile applications that are developed
by third parties are untrusted by default. We assume that such applications can
either be developed by malicious attackers with the sole purpose of collecting
users’ sensitive information, or are benign yet vulnerable to exploits that could
result in information leaks.
For an information leak to be considered successful, the sensitive information
must be passed to an unintended external entity. In our design, we consider three
classes of external entities based on their associated trust. All external entities
are untrusted by default unless they are approved by the user for data sharing
(Section 3). Once approved, the external entity is considered semi-trusted, i.e.,
it may receive only the sensitive information for which it is approved. A trusted
entity is allowed to receive sensitive information and is furthermore expected to
ﬁlter any sensitive content from its output before providing it to the application.
In other words, a trusted entity must act as a declassiﬁer.
Our work prevents information leak of the content provided to the untrusted
third-party applications. It cannot prevent use of outside channels by the ap-
proved external entities to share information once such entities get access to the
information. This also implies that we only consider leakage protection on the
device (client) side in case of a multi-tier application.
2.2 Policy Speciﬁcation in MobileIFC
In this section, we use a representative banking application to show how
rich security policies can be deﬁned and enforced in MobileIFC to prevent ap-
plications from leaking user content. The policies are expressed via ﬁne-grained,
context-aware permissions along with other (possibly organization-speciﬁc) manda-
tory policies and subsequently enforced at runtime by the MobileIFC framework.
Note that while the mandatory policies allow the users to enforces their own
privacy requirements and potentially prevent malicious behavior, we anticipate
Data input
Content shown to the user
Credentials
Camera
Account Info
Geolocation
Map
bank.com
google.com
Data input from MobileIFC
Content shown to the user
Credentials
Camera
Geolocation
Credentials
Camera
Account Info
Geolocation
Map
bank.com
google.com
C1
C2
C3