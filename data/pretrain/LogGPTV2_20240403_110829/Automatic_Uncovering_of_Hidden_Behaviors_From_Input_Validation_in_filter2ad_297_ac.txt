a
r
o
t
S
l
a
c
o
L
s
e
u
l
a
V
l
a
n
r
e
t
x
E
File
getName()
getAbsolutePath()
SQLiteDatabase
rawQuery(String, String[])
openDatabase(String, CursorFactory, int)
SharedPreferences
getSharedPreferences(String, int)
getString(String, String)
Bundle
Intent
EditText
Editable
Socket
SSLSocket
getString(String)
getCharSequence(String)
getStringExtra(String)
getCharSequenceExtra(String)
getText()
toString()
getInputStream()
getInputStream()
TABLE II: The list of the system APIs used for uncovering
the types of the compared content.
by the system APIs. For example, if the string operation is
substring, we follow the standard procedure to obtain this
substring value. In doing so, we can eventually resolve the
string values of the compared content accordingly.
Pruning Compared Content That is Known by Users.
Recall that the primary objective of this study is to uncover
hidden behaviors, such as backdoors and blacklist secrets,
and these secrets should be unknown to the majority of
normal users. However, some of
the compared content
we resolved could come from visible user interfaces (e.g.,
EditText.setHint). Therefore, we have to prune the
resolved compared strings of which normal users are already
aware.
To this end, we need to understand the speciﬁc text of
which users are aware, before typing them into the input
ﬁeld. According to our observation, mobile apps often provide
sufﬁcient information in their interface where they ask users
to type text and mobile users rarely consult other materials
than descriptions displayed in the interface. In other words, the
majority of users are only aware of the descriptions from the
interface before typing text into input ﬁelds. In addition, these
descriptions could be either static strings existing in related
resource ﬁles associated with resource IDs or strings hardcoded
in the code that are dynamically loaded by invoking system
APIs (e.g., EditText.setHint) that can be obtained auto-
matically in the same way as described above. In either case,
if we identify the strings that come from these sources, we
exclude this comparison in our result.
C. Comparison Context Recovery
We have to use the comparison context, i.e., how a user
input is compared and its code dispatch behavior, to determine
the hidden behaviors (e.g., backdoors) and their types (e.g.,
censorship keywords). In general, the code dispatch of a user
input could have two attributes: (i) how many times a user
input is validated within a judgement block of a method,
and (ii) how many potential branches could be taken if the
validation is satisﬁed. These two attributes together can reveal
how a user input is validated in terms of deciding the code
execution ﬂow.
6
To simplify the description of the code dispatch context, we
present it in the form of a pair of these two attributes. Since we
are interested in understanding the overall quantity property of
an attribute (one, two, or more than two) rather than its exact
number, we mark each attribute as “one”, “two”, or “many”.
Meanwhile, since each satisﬁed condition can only produce
two branches (true or false), we consider it two actions. By
counting how many times an input is compared, and also how
many actions the comparison can generate, we can have (i)
one comparison and two actions, (ii) multiple comparisons
and two actions, and (iii) multiple comparisons and multiple
actions. More speciﬁcally, we classify dispatch behaviors as:
• One-to-Two Dispatch. This code dispatch indicates that
a user input is validated only once in a judgement block
within a method. Accordingly, there is only one desired
branch to be taken if the condition of user input validation
is satisﬁed. An example of such dispatch is the single if
block between line 6 and 9 shown in Figure 2.
• Many-to-Two Dispatch. This code patch means that a
user input is validated multiple times in a judgement
block. But there would be only one desired branch that
will be taken if any of these validations is satisﬁed. An
example of such a dispatch is presented in Figure 3, where
the user input is validated with every element in an array.
In this case, each comparison between the user input and
an element in the array is one condition. Consequently,
it has “many” conditions. However, regardless of which
condition is satisﬁed, there would be one desired dispatch
to be taken.
• Many-to-Many Dispatch. If there are multiple compar-
isons and multiple actions, then it means that a user input
is validated multiple times with different compared tar-
gets, and multiple outcomes can be generated depending
on the comparison. A representative example for such
dispatch is the switch-case block, where each action
is assigned to a unique case.
D. Secrets Uncovering
Having recovered code dispatches and the resolved com-
pared content for user input validation of interest, next our
Secret Uncovering component will use a set of speciﬁc policies
to uncover the hidden behaviors and secrets. In total, we have
deﬁned four policies to uncover four types of hidden behaviors:
secret access keys, master passwords, secret commands, and
blacklist secrets, based on the three types of different code
dispatch behaviors we have recovered.
(I). Uncovering hidden behaviors from one-to-two code
dispatch. With this type of code dispatch, since the user
input will only be validated once in a method of the app
and the compared content is also not known to the user, and
meanwhile there are only two outcome actions resulting from
the comparison, we can conclude it is likely that the user input
serves as a key to unlock a behavior and such a user input can
be considered a secret access key.
However, there are still caveats because in some apps,
there could be a normal service instead of a hidden service
that requires users to type text not shown in the UI for
further functionality. For example, in some puzzle game apps,
users could be asked to provide correct answers to go to the
next round. In such cases, users are also unaware of what
to enter. Fortunately, we can use another dimension of the
compared content, namely whether the compared content
is from an internal hardcoded string inside the app or not.
This is because for these interactive types of apps, especially
games, they would have made their compared target more
ﬂexible (e.g., coming from network servers) instead of directly
hardcoding them in the app (otherwise, it can easily lead to
game cheating). Therefore, we use the following policy to
decide whether there is a secret access key:
Identifying a Secret Access Key.
A secret access key is identiﬁed if (i) the code dispatch of a user input
validation is one-to-two and (ii) the compared content is a hardcoded
string inside the app.
(II). Uncovering secrets from many-to-two dispatch. In this
code dispatch, the user input is validated more than once in
a method and the satisfaction for different validations all lead
to the same program behavior. Meanwhile, for all of the val-
idations with the same user input, its compared content could
be from one source or multiple sources. Therefore, we further
break down this code dispatch context into two categories:
• Compared Content
from Multiple Sources. If the
compared content comes from multiple sources, then this
type of comparison illustrates a scenario where, within a
method, if a user input is equal to any value among mul-
tiple sources, the program will perform the same action.
In other words, each compared value can override others.
Therefore, if one of these values is a secret hardcoded
string, then such a string can be used to override other
sources of values to drive the app into the same state. Note
that the compared content from different sources indicates
that they are generated in different ways and their values
are supposed to be different. An example of such behavior
is shown in Figure 1, where a hardcoded string in the
comparison and also another source of input together
decide the branch outcome. Therefore, this behavior is
a hidden feature because normal users are unaware the
existence of such a string. Inspired by the actions from
Figure 1, we call this type of string a master password.
However, we do not have to explicitly use the password
type of EditText to decide this master password type of
backdoor, because the code pattern of (i) multiple sources
of compared content and (ii) a hardcoded string that
can override other input sources has already sufﬁciently
allowed us to decide it is a master password.
Identifying a Master Password.
A master password is uncovered if (i) the comparison context of user
input validation has the many-to-two code dispatch, (ii) the compared
content comes from multiple different sources, and (iii) one of the
compared content is a secret hardcoded string.
• Compared Content from the Same Source. If the
compared content is all from the same source, then this
type of comparison context presents a scenario where,
within a method, if a user input is equal to any value
of the compared content, the app will always move to
the same state. In other words, these compared content
7
items together form a list, and the user input is compared
with every item in the list to check equivalence. Each
equivalence results in the same program behavior. An
example of such comparison is shown in Figure 3, where
the app validates the user input with a blacklist to identify
the forbidden keywords. Therefore, the compared content
actually forms a blacklist, and we can use the following
policy to detect it.
Identifying a Blacklist Secret.
A blacklist secret is identiﬁed if (i) the comparison context of user
input validation has many-to-two code dispatch and (ii) the compared
content all come from the same source.
(III). Uncovering secrets from many-to-many dispatch. In
a many-to-many dispatch, the same user input is validated
with different compared values, either from the same source or
different sources. Meanwhile, if some of the compared content
is resolved as secret strings, then such a context indicates
that, within a method, a user input could take a value from
a set of secret strings and each string can trigger a different
program action. In other words, the value space of a user input
contains a subset of concrete strings whose values are unknown
to normal users, and each of them can drive the app into a
different state. Such behavior is very similar to a terminal that
accepts different commands. Therefore, we call these secret
strings secret commands and we use the following policy to
identify them.
Identifying a Secret Command.
A secret command is identiﬁed if (i) the comparison context of user input
validation has many-to-many code dispatch and (ii) the compared content
includes more than one hardcoded secret string.
V. EVALUATION
We have implemented a prototype of INPUTSCOPE atop
Soot [2] and LeakScope [46], with borrowed code from
FlowDroid [7] to statically detect the user-input validation,
reveal its contexts, and extract its compared content. In total,
INPUTSCOPE consists of around 5,500 lines of our own code.
In this section, we present the evaluation results. We ﬁrst
describe how the evaluation is set up in §V-A, and then present
our detailed evaluation results in §V-B.
A. Evaluation Setup
Dataset Collection. We collected the Android apps from three
different sources to evaluate INPUTSCOPE. The ﬁrst source
is Google Play, which is the largest world-wide Android app
market. To ensure a reasonable distribution of the apps, we
successfully crawled the top 100,000 free apps across all
categories based on number of installations at the end of April,
2019. The second source is from an alternative app store, Baidu
Market, from which we have crawled the top 20,000 free apps
during the same time period as our crawl of Google Play apps.
The third source is pre-installed apps, and we obtain 30,000
of them directly from over 1,000 Samsung ﬁrmware images,
which were downloaded from SamMobile7. Altogether, our
dataset consists of 150,000 mobile apps.
7https://www.sammobile.com/
Item
# Apps tested
# Apps containing equivalence checking
# Apps check empty input only
# Apps check non-empty input
# Apps contain backdoor secrets
% Apps in Google Play
% Apps in alternative Market
% Apps in pre-installed apps
# Apps - secret access keys
# Apps - master passwords
# Apps - secret privileged commands
# Apps contain blacklist secrets
% Apps in Google Play
% Apps in alternative Market
% Apps in pre-installed apps
Value
150, 000
114, 797
34, 958
79, 839
12, 706
6.86%
5.32%
15.96%
7, 584
501
6, 013
4, 028
1.98%
4.46%
3.87%
TABLE III: Overall statistics of the evaluation results.
Testing Environment. We use two servers to run our exper-
iments. One server runs Ubuntu 16.04 with 256 GB memory
and an Intel Xeon E5-2695 v4 CPU that crawls apps from
the Google Play and analyzes them with INPUTSCOPE, and