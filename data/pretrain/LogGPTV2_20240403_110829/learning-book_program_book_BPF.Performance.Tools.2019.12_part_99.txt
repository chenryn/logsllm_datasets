printf (*READ: d bytes\n*, retval) : }'
Some sample output from running the bigreads C program:
. /bigreads
dd5145[003] d... 2588681.534759: 0: READ: 2097152 bytes
dd-5145[003] d... 2588681.534942: 0: READ: 2097152 bytes
dd5145[003] d... 2588681.535085: 0: READ: 2097152 bytes
[ . - - ]
This output shows that a dd(1) command was used to issue three reads, each with a size of
two Mbytes. As with hello_world.c, extra fields are added to the output from the shared trace
buffer.
bigreads is split into separate kernel and user-level C files. This allows the kernel component
to be compiled separately to a file using BPF as the target architecture, and then the user
component reads that file and sends the BPF instructions to the kernel.
The kernel component, bigreads_kern.c, is:
1#1nclude
2finclude 
3#1nclude 
finclude *bpf_belpers.h*
8 1 first wrote this on 6-Jun-2014, when C was the highest-level lang)
BPF tools to use the latest BPF interfaces on 1-Aug-2019.
---
## Page 809
772
Appendix D
fdefine HIN_BYTES (1024 * 1024}
7
SEC (*kretprobe/vfs_read*)
9
Int bpf_nyprog (struct pt_regs *ctx)
10
rμu\,eeq ps iαx3x = [1ug xevo
12
int bytes = PT_REGs_RC(ctx)
13
1f (bytes >= HIX_BYTES) ↑
14
bpf_trace_printk (fnt, sizeof (fnt) , bytes, 0, 0) :
15
16
17
return 0;
18
1
19
char _license[] sEc (*license*) = *GPL*;
21 u32 _version SEC (*version*) = LINUX_VERSION_CODE;
Line 6 defines the bytes threshold.
Line 8 declares an ELF section named *kretprobe/vfs_read’, followed by a BPF program. This
will be seen in the final ELF binary. Some user-level loaders will use these section headers to
determine where to attach programs. The bitehist_user.c loader (covered in a moment) does
not, although this section header may stil be useful for debugging purposes.
Line 9 begins a function called for the kretprobe event. The struct pt_regs argument contains
register state and BPF context. From the registers, function arguments and return values can
be read. This struct pointer is also a required argument to a number of BPF helper functions
(see include/uapi/linux/bpf.h).
Line 11 declares a format string for use with printf().
Line 12 fetches the return value from the pt_regs struct register using a macro (it will map
long bytes = PT_REGS_RC(ctx) to ctx->rax on x86).
Line 13 performs the test.
0 sam sL Oxuud aoenjdq :uoouny Su88nqap e Stsn Suns pndno au spud [ au1
the output to a shared trace buffer and is only used here to keep this example short. It has the
same caveats as explained in Appendix C: it can clash with other concurrent users.
Lines 20 and 21 declare other necessary sections and values.
The user-level component, bigreads_user.c, is:
1// SPDX-License-Identifier: GPL-2.0
2#1nclude 
3
finclude 
4#include 
---
## Page 810
C BPF
773
5finclude 
6#1nclude 
7finclude 
#1nclude "bpt/1ibbpf .h"
10
/fuToex/bnqep/teurox/sAs/= Sasoeaα euTep#
11
12
Int main (1nt ac, char *argv [1)
13
1
14
stzuct bpf_object *ob}:
15
struct bpf_progran *prog
26
stzuct bpf_1ink *1ink,
17
struct rlinit lin = 
18
.rlin_cur = RLIN_INFINITY, 
19
rlin_max = RLIM_INEINITY,
20
char filenane[256];
21
22
23
snprintf (filename, sizeof (filenane) , *$s_kern.o*, argv[0]1
24
25
setrlimit (RLIMIT_MEMLOCK,slin) 
26
27
ob} = bpf_object_open (filenane) 
28
1f(1ibbpf_get_error [ob])) 1
29
printf (*ERRoR: failed to open prog: *§s*n*, strerror (errno)) 
30
return 1
31
32
33
(μpa/aqaxqo aqwexodpug[qoq = od
34
bpf_pzogran__set_type (prog, BPF_PROG_TYPE_KPRoBE) 
35
1f (bpf_object_1oad [obj))|
37
printf (*ERRoR: failed to load prog: *§s*,n*, strerror (errno)) 
38
return 1;
39
4 0
41
link = bpf_progran__attach_kprobe (prog, true /*retprobe*/, *vfs_read*) =
42
1f(1ibbpf_get_error (11nk) )
43
return 2
44
45
(,=dfda2exa/。 Sa0083α 。 4e>)wsg
46
47
bpf_link__destroy(link) 
---
## Page 811
774
Appendix D
48
bpf_object.__close (obj) ;
49
50
return 0
51
Lines 17 to 19 and 25 set RLIMIT_MEMLOCK to infinity, to avoid any BPF memory allocation
issues.
Line 27 creates a struct bpf_object to refer to the BPF components in the _kern.o file. This
sdeu pue sueroud dd adnu uequo eu poalqogdq
Line 28 checks that the bpf_object was initialized successfully.
Line 33 creates a struct bpf_program based on the BPF program that matches the section title
kretprobe/vfs_read", as set by SEC() in the kernel source.
Line 36 initializes and loads the BPF objects from the kernel file into the kernel, including all
maps and programs.
Line 41 attaches the earlier selected program to a kprobe for vfs_read(), and returns a bpf_link
object. This is later used on line 47 to detach the program.
Line 45 prints the shared trace buffer using system() to keep this tool short.
Line 48 unloads the BPF programs from the bpf_object from the kernel and frees all associated
resources.
These files can be added to samples/bpf and compiled by adding a bigreads target to the
samples/bpf/Makefile. The lines you need to add are (place each among similar lines in the
Makefile):
+ grep bigreads Makefile
speaxbtq =+ goxdoq
bigreads-objs := blgreads_user,0
slvays += bigreads_kern,o
Compiling and execution is the same as for the previous hello_world example. This time,
bigreads_uset.o reads. You can inspect it using readelf(1) or objdump(1):
there is a separate bigreads_kern.o file created containing the BPF program in a section that
+ objdump -h bigreads_kern.0
bigreads_kern,o:
file format elf64-little
Sections:
16x Xane
S12e
VKA
LNA
F1le off Algn
0text
000000000000000000000000000000000000000000402**2
CONTENTS, ALLOC, LOAD, READONILY, CODE
---
## Page 812
C BPF
775
1 kzetpzobe/vfs_read 000000a0000000000000000000000000000000000000402**3
CONTENTS, ALLOC, LOAD, READONLY, CODE
2 rodatastr1.1 0000000f 00000000000000000000000000000000 000000e02**0
CONTENTS, ALLOC, LOAD, READONLY, DATA
3 licen.se
00000004000000000000000000000000000000
000000ef 2**0
CONTENTS, ALLOC, LOAD, DATA
4 version
27000000000000000000000000000000000000000000000
CONTENTS, ALLOC, LOAD, DATA
5 :11vm_adrsig 000000300000000000000000000000000000000000001702**0
CONTENTS, READONLY, EXCLUDE
The “kretprobe/vfs_read* section is highlighted.
To turn this into a reliable tool, the bpf_trace_printk() must be replaced with print_bpf_output(),
which emits records to user space via a BPF map that accesses perf per-CPU ring buffers. The
kernel program will then include code such as the following (this uses the newer BTF-based
deceleration):
struct |
_uint (tyFe, BPF_MAF_TYPE_PERF_EVENT_ARRAY)
_ulnt(key_slze, slzeof (Int)）
_uint(vralue_size, sizeof (u321) 
] ny_nap SEC(",naps*);
[...]
bpf_perf_event_output (ctx, sny_nap, 0, sbytes, sizeof (bytes1)
Changes to the user-level program are more extensive: the system() call will be removedl, and
a function added to process the map output events. This function will then be registered
using perf_event_poller(). An example of this is in the Linux source samples/bpf directory:
trace_output_user.c.
Tool 3: bitehist
This tool is based on BCC bitehist.py from the Appendix C. It demonstrates output via BPF
maps, which it uses for storing a histogram of block device I/O sizes. Example output:
+./bitehist
Tzacing block I/o... Bit Ctrl-C to end.
C
there was a bulMfer per CPU. This max_entries setting has become the default for BPF_MAP_TYPE_PERF_EVENT_
ARRAX
---
## Page 813
776
Appendix D
kbytes
: count
distribution
4 -> T
: 11
|++............**
8 -> 15
: 24
16 -> 31
: 12
32 -> 63
: 10
64 -> 127
: 5
128 -> 255
: 4
|*****
Exlting and clearing kprobes...
As with bigreads, bitehist is composed of two C files: bitehist_kern.c and bitehist_uset.c. The full
source can be found at this book's website: http://www.brendangregg.com/bpf-performance-
tools-book.html. The following are excerpts.
From bitehist_kern.c:
[. . - ]
u32 index3
J ;
struct 1
_uint (tyFe, BPF_MAP_TYPE_HASB) :
_uint(nax_entries, 1024) ;
type (key, struct hist_key):
: (6uot *entes) ed/—
edeu*,)oss des"sq (
[ . - - ]
SEC(*kprobe/blk_account_io_complet.ion*)
Int bpf_progl (struct pt_regs *ctx)
Long inlt_val = 1
long *valuez
struct hist_key key = [];
xey. 1ndex = 1og21 (PT_REGS_PARH2 (ctx) / 1024) ;
yalue = bpf_nag_lookup_elen (6hist_nap, &key) :
1.f(value)
_sync_fetch_snd_add(ralve, 1) =
e1se
bpf_nap_update_elen (shist_nap, skey, sin.it_val, BPF_ANY) 
return 0
[ . - - ]
---
## Page 814
C BPF
777
This declares a map of type BPF_MAP_TYPE_HASH called hist_map: this style of declaration
will be propagated using BTE. The key is a struct hist_key that only contains a bucket index,
and the value is a long: the count for the bucket.
The BPF program reads the size from the second argument of blk_account_io_completion
using the PT_REGS_PARM2(ctx) macro. This is turned into a histogram bucket index using
log2() C function (not included here).
found, it is incremented using sync_fetch_and_add0. If it is not found, it is initialized using
A pointer to the value for that index is fetched using bpf_map_lookup_elem(). If a value is
bpf_map_update_elem().
From bitehist_user.c:
[qo xaogq n.1g
struct bpf_1ink *kprobe_1ink
deus deu"gdq 1on.1s
static void print_log2_hist (int fd, const char *type)
上
[...]
vhi1e (bpf_nap_get_next_key (fd, skey, snext_key) == 0)1
bpf_nap_lookup_elen (fd, &next_key, 6value) ;
Ind = next_key.index;
// logic to pcint the histogran
[ . - - ]
1
static void int_exit(int sig)
printf(*`n*)
(seqox* (deu) pdes"dq) su"zotu.d
bpf_link__destroy (kprobe_link) 
bpf_object._close [obj):
exit (0) =
Int main(int arge, char *azgv[1)
stzuct rlinit lin = {
rlin_cur = RLIM_INEIMITY,
.xlin_nax = RLIN_INFINITY,
rboxd. utxboxdda sonxxs
char fi1enane[256]
---
## Page 815
778
 Appendix D
snprintf (filename, sizeof (filenane), *§s_kern,o", argv[0]] 
setrlinit (RLIMIT_MEMLOCK, slin) 
obj = bpf_object,_open(filenane) 
1f (1ibbpf_get_error [ob))
return 1
prog = bpf_object_find_program_by_title (ob),
*kprobe/b1k_account_1o_conpletlon*) ≠
if (prog "= NULL)
return 2;
bpf_progran__set_type (prog, BPF_PROG_TrPE_KPRoBE) 
i.f (bpf_object,__1load (obj))1
printf ("ERRoR: Called to load prog: *sa*,n*, strerror[errno))=
return 3
′/goxdhex/ esteg*bo.d) eqoadxoeeuex6oxddq -xutteqoxdy
1f (1ibbpf_get_error [kprobe_11nk) )
return 4
if ((map = bpf_object_find_nap_by_nane (obj。 *hist_map*)) == MULL)
return 5
signal(SIGINT, Int_exit) 
printf(*Txacing block I/0... Bit Ctrl-C to end.\n") 
sleep (1) 
return 0
The main() program loads the BPF program using similar steps to bigreads.
A BPF map object is fetched using bpf_object_find_map_by_name(), and saved as the global
map variable that is later printed during int_exit().
int_exit() is a signal handler attached to SIGINT (Ctrl-C). After initializing the signal
handler, the main() program sleeps. When Ctrl-C is pressed, int_exit() is run, which calls the
print_log2_hist() function.
---
## Page 816
C BPF779
print_log2_hist() iterates over the map using a bpf_get_next_key0 loop calling
bpf_lookup_elem() to read each value. The rest of the function, elided here, turns the
keys and values into the printed histogram,
This tool can be compiled and run from the samples/bpf directory, using similar Makefile
additions as bigreads.
perfc
The Linux perf(1) utility has the ability to run BPF programs on events1 from one of two
interfaces:
 perf record: For running programs on events that can apply custom filters and emit
additional records to the perf.data file.
• perf trace: For “beautifying" trace output: using BPF programs to filter and enhance
the output of perf trace events e.g., showing a filename string on syscalls instead of just
a filename pointer [84]).
perf(1)'s BPF capabilities are rapidly growing, and there is currently a lack of documentation
on how to use them. The best source of documentation at the moment is a search of the
Linux kernel mailing list archives for the keywords *perf" and *BPE"
The following section demonstrates perf and BPF.
Tool 1: bigreads
bigreads is based on the same tool shown earlier, in the section *C Programs,* which traces
the return of vfs_read( and shows reads larger than one Mbyte. Here is some sample output to
show how it works:
+ perf record -e bpf-output/no-inherit,name=evt/ \
-e - /bigreads c/map:channel .event=evt/ -a
“C[ perf record: Noken up 1 tines to vzite data ]
[ perf record: Captured and vrote 0.255 MB perf.data (3 sanples)1
+ perf script
dd 31049 [009] 2652091,826549:
U
evt.:1
rfrcrrcfb5945e20 kretprobe_tranpoline+0x0
(/1ib/modules/5 .0, 0rc1vietusl/bui1d/vmlinux)
BPF output: 0000: 00 00 20 00 00 00 00 00
0008: 00 00 00 00
dd 31049 [009] 2652091,826718:
rfrfrrrb5945e2o kretprobe_tranpoline+0x0
evt.:1
(/1ib/modules/5. 0 0rc1victual/bui1d/vnl.inux)
10 perf(1) BPF support was first added by Wang Nan.
---