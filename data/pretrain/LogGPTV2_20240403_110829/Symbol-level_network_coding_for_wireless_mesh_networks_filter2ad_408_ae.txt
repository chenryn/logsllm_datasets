70
60
50
40
30
20
10
0
1%
1%
2%
2%
3%
3%
5%
5%
7%
7%
Mistake Rate
10%
10%
15%
15%
20%
20%
Figure 13: Impact of changing the mistake rate: The ﬁgure shows that
many mistake rate thresholds provide signiﬁcant throughput gains and
hence MIXIT performs reasonably well even if the network is conﬁgured
with a suboptimal threshold.
Method: We evaluate how the threshold on classifying clean sym-
bols affects throughput. As explained in §5, MIXIT has the ﬂexibility
s
w
o
F
l
i
f
o
n
o
i
t
u
b
i
r
t
s
D
e
v
i
t
a
u
m
u
C
l
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
Batch Size = 8
Batch Size = 12
Batch Size = 16
Batch Size = 32
 20
 40
 60
 80
 100
Flow Throughput (Kbits/s)
Figure 14: Impact of batch size: The ﬁgure shows the CDF of the
throughput achieved by MIXIT for different batch sizes. It shows that
MIXIT is largely insensitive to batch sizes.
to choose the threshold mistake rate γ. We vary this threshold and
compare the average throughput. For the Zigbee protocol, the PHY
symbol is 4 bits long, while the MIXIT symbol size is 6 bytes.
Results: Fig. 13 plots the average throughput across all source-
destination pairs for different mistake rates. The average throughput
surprisingly increases as we let more errors through! It peaks when
the mistake rate is around 5% and drops at higher error rates.
This may sound counter intuitive, but recall that we are talking
about a probability of error; if the router would know for sure which
PHY symbols are incorrect, the best it can do is to drop all incorrect
PHY symbols. But a PHY symbol that has a 5% chance of being in
error has also a 95% chance of being correct. For our topology, at 5%
mistake rate, the cost of correcting the error end-to-end balances the
opportunity of exploiting correct symbols that made it to their next
hops, maximizing the throughput.
The right mistake rate threshold depends on the network. We as-
sume that the administrator calibrates this parameter for her networks.
A large mistake rate like 30% does not make sense for any network.4
The results however show that a wide range of choices provide good
throughput and outperform packet-based opportunistic routing.
11.2.4
Impact of Batch Size
We evaluate whether MIXIT’s throughput is sensitive to batch size.
Fig. 14 plots the throughput for batch sizes of 8, 12, 16 and 32. The
throughput is largely insensitive to the batch size. The slight drop
off at lower batch sizes is primarily because of higher overhead. A
bigger batch size allows MIXIT to amortize the overhead over a
larger number of packets, increasing throughput. Insensitivity to
batch sizes allows MIXIT to vary the batch size to accommodate
different transfer sizes. For any transfer larger than 8 packets, MIXIT
shows signiﬁcant advantages. Shorter transfers can be sent using
traditional routing.
11.3 Multiple Flows
11.3.1 Throughput Comparison
Method: We run MIXIT, MORE and SPR in sequence, varying the
number of random active ﬂows in the network. The rest of the setup
is similar to the single ﬂow case. We run 50 experiments for each
choice of number of ﬂows, with each experiment repeated 5 times.
We calculate the average throughput for each run.
Results: Fig. 15 plots the average throughput for MIXIT, MORE,
and SPR with increasing number of ﬂows. We see that MIXIT’s
4Even under optimal conditions, it takes at least two symbols to correct each incorrect
symbol [30] and hence a mistake rate higher than 33% would never make sense.
)
s
/
s
t
i
b
K
(
t
u
p
h
g
u
o
r
h
T
k
r
o
w
t
e
N
.
g
v
A
MIXIT
MORE
SPR
120
100
80
60
40
20
0
1
1
2
2
No. of concurrent flows
3
3
4
4
5
5
Figure 15: Average throughput with multiple active ﬂows: The ﬁgure
shows that MIXIT’s throughput scales as offered load increases until
the network is saturated. MORE and SPR become similar as load in-
creases and perform worse than MIXIT because they cannot exploit con-
currency opportunities.
)
s
/
s
t
i
b
K
(
t
u
p
h
g
u
o
r
h
T
k
r
o
w
t
e
N
.
g
v
A
MIXIT
MIXIT-NCA
120
100
80
60
40
20
0
1
2
3
4
5
No. of concurrent flows
No. of concurrent flows
Figure 16: The role of congestion-aware forwarding: The ﬁgure shows
that congestion-aware forwarding is particularly important when the
number of active ﬂows is large.
throughput gain generally increases with load, and at its peak reaches
2.8× over MORE and 3.9× over SPR.
The higher gains as load increases are due to MIXIT’s ability
to aggressively exploit concurrency and perform congestion-aware
forwarding. Both MORE and SPR, which rely on carrier sense,
become conservative in accessing the medium as the number of ﬂows
increases. Thus, they cannot fully exploit the spatial diversity in the
network. MIXIT however, can maintain high levels of concurrency
because of its ability to deal with partially correct packets.
The throughput gains drop slightly as the network gets heavily
congested. The primary reason is hidden terminals, whose effect is
exacerbated by the fact that the USRP nodes, which perform all pro-
cessing in user mode on the PC, do not have support for synchronous
acks, and thus cannot quickly detect hidden terminals and backoff.
11.3.2
Impact of Congestion Aware Forwarding
Method: We evaluate the impact of MIXIT’s congestion-aware for-
warding component on performance. Node congestion is built into
MIXIT’s routing algorithm due to its use of the backlog parameter
Q(i), the number of symbols queued up at node i yet to be trans-
mitted. Nodes that are backlogged will not be assigned credits by
their upstream parents and thus trafﬁc will be routed around hotspots.
We compare this scheme with one where this component is disabled.
Speciﬁcally, parent nodes assign credits to their downstream nodes
based only on the path quality, i.e. based on the path ETS, and ig-
nore congestion information. We call this scheme MIXIT-NCA, for
MIXIT with ”No Congestion Aware” forwarding.
Results: Fig. 16 plots the average throughput for MIXIT and
MIXIT-NCA for increasing number of ﬂows. The ﬁgure shows that
congestion-aware forwarding accounts for 30% of the throughput
gain at high load. As load increases, the probability of the network
experiencing local hotspots increases. MIXIT-NCA does not route
around such hotspots, and insists on pushing the same amount of
information through regardless of congestion. MIXIT adaptively
routes around these hotspots and therefore increases throughput.
12 Conclusion
A key ﬁnding of MIXIT is that routers need not forward fully cor-
rect packets to achieve end-to-end reliability, and that loosening this
constraint signiﬁcantly increases network throughput. With MIXIT,
as long as each symbol in every transmitted packet is correctly re-
ceived by some downstream node, the packet is highly likely to be
delivered to the destination correctly. Designing a network that has
this attractive property is not an easy task because it needs to scalably
coordinate overlapping symbol receptions and cope with erroneous
symbol propagation. MIXIT solves these problems using a symbol-
level network code that has an end-to-end rateless error correction
component.
Instead of using link-layer error detection and recovery, MIXIT
treats the entire wireless network as a single logical channel whose
component links could run at high error rates. Because MIXIT can
cope with individually high error rates, it encourages an aggres-
sive MAC protocol that greatly increases concurrency compared to
CSMA.
Although MIXIT exploits cross-layer information, its architecture
is modular and layered: it can run atop any radio and PHY that
provide suitable conﬁdence hints, with the routers being oblivious
to the end-to-end error correction mechanism. The gains may vary
depending on the PHY and MAC used, but it can be used in any
multi-hop wireless network with the following properties:
1. Computational capabilities: The coding/decoding algorithms in
MIXIT are more demanding than traditional store and forward
networks. In our proof-of-concept software implementation on
software radios, the algorithms can achieve at most an effective
throughput of 4.7Mb/s. In [9], we describe a hardware implemen-
tation using shift registers, which is similar to traditional Reed-
Solomon (RS) hardware decoders. Because current RS decoders
can achieve speeds of 80 Gigabits per second [15], we believe that
computational considerations will not limit the applicability of our
algorithms at high data rates.
2. Memory: MIXIT’s nodes need to store packets from recent batches.
The default batch size is 16, and typically there are two or three
batches in ﬂight, requiring storage space of roughly 70 KBytes, a
modest amount for modern communication hardware.
The ideas in MIXIT may be applicable in sensor networks to
ship data to sink nodes. Because most trafﬁc in these networks is
uni-directional, data from different sensors can be coded together
to improve throughput. In addition, MIXIT could also be used to
multicast data in a mesh network. Because all destinations require
the same data, routers can keep transmitting coded data until all
destinations can decode them.
Acknowledgments
We thank Kyle Jamieson, Szymon Chachulski, and Robert Mor-
ris for their insightful comments. This work was supported by
DARPA-CBMANET and the National Science Foundation under
CNS-0627021, CNS-0721702 and CNS-0520032.
References
[1] S. Biswas and R. Morris. Opportunistic routing in multi-hop wireless networks. In
ACM SIGCOMM, Philadelphia, USA, 2005.
[2] S. Chachulski, M. Jennings, S. Katti, and D. Katabi. Trading structure for ran-
domness in wireless opportunistic routing. In ACM SIGCOMM, Kyoto, Japan,
2007.
[3] E. M. Gabidulin. Theory of codes with maximum rank distance. Probl. Inform.
Transm., pages 1–12, July 1985.
[4] J. Hagenauer and P. Hoecher. A Viterbi Algorithm with Soft-Decision Outputs and
its Applications. In IEEE GLOBECOM, Dallas, USA, 1989.
[5] T. Ho, R. Koetter, M. M´edard, D. Karger, and M. Effros. The Beneﬁts of Coding
over Routing in a Randomized Setting. In ISIT, Yokohoma, Japan, 2003.
[6] E. Inc. Universal software radio peripheral. http://ettus.com.
[7] S. Jaggi, M. Langberg, S. Katti, T. Ho, D. Katabi, and M. M´edard. Resilient
network coding in the presence of byzantine adversaries. In IEEE INFOCOM,
Alaska, USA, 2007.
[8] K. Jamieson and H. Balakrishnan. Ppr: Partial packet recovery for wireless
networks. In ACM SIGCOMM, Kyoto, Japan, 2007.
[9] S. Katti. Network Coded Wireless Architecture. PhD thesis, MIT, 2008.
[10] S. Katti, S. Gollakota, and D. Katabi. Analog network coding. In ACM SIGCOMM,
Kyoto, Japan, 2007.
[11] S. Katti, H. Rahul, D. Katabi, W. H. M. M´edard, and J. Crowcroft. XORs in the
Air: Practical Wireless Network Coding. In ACM SIGCOMM, Pisa, Italy, 2006.
[12] R. Koetter and F. Kschischang. Coding for errors and erasures in random network
coding. IEEE Transactions on Information Theory, 2007. To appear.
[13] R. Koetter and M. M´edard. An algebraic approach to network coding. IEEE/ACM
Transactions on Networking, Volume 11, Issue 5, Oct. 2003, Page(s):782 - 795.
[14] J. N. Laneman, D. N. C. Tse, and G. W. Wornell. Cooperative diversity in wireless
networks: Efﬁcient protocols and outage behavior. IEEE Trans. on Inform. Theory,
Volume 50, Issue 12, Dec. 2004 Page(s):3062 - 3080.
[15] H. Lee. A high-speed low-complexity reed-solomon decoder for optical com-
munications. IEEE Transactions on Circuits and Systems, 52(8):461–465, Aug.
2005.
[16] S. Lin and D. Costello. Error Control Coding. Prentice Hall, Uppser Saddle River,
NJ, 2004.
[17] F. J. McWilliams and N. J. A. Sloane. The Theory of Error-Correcting Codes.
North-Holland, 1977.
[18] A. Miu, H. Balakrishnan, and C. E. Koksal. Improving loss resilience with multi-
radio diversity in wireless networks. In ACM MobiCom, Cologne, Germany, 2005.
[19] B. Radunovic, C. Gkantsidis, P. Key, S. Gheorgiu, W. Hu, and P. Rodriguez.
Multipath code casting for wireless mesh networks. In CoNext, New York, USA,
2007.
[20] C. Reis, R. Mahajan, M. Rodrig, D. Wetherall, and J. Zahorjan. Measurement-
based models of delivery and interference in static wireless networks. In ACM
SIGCOMM, Pisa, Italy, 2006.
[21] G. Richter and S. Plass. Error and erasure decoding of rank-codes with a modiﬁed
berlekamp-massey algorithm. In 5th International ITG Conference on Source and
Channel Coding, Erlangen, Germany, 2004.
[22] S. Zhang, S. Liew, and P. Lam. Physical layer network coding. In ACM MOBICOM,
Los Angeles, USA, 2006.
[23] D. Silva, F. R. Kschischang, and R. Koetter. A rank-metric approach to error
control in random network coding. submitted, 2007.
[24] D. Son, B. Krishnamachari, and J. Heidemann. Experimental analysis of concurrent
packet transmissions in wireless sensor networks. In ACM SenSys, Boulder, USA,
2006.
[25] D. Tse and P. Vishwanath. Fundamentals of Wireless Communications. Cambridge
University Press, 2005.
[26] M. Vutukuru, K. Jamieson, and H. Balakrishnan. Harnessing exposed terminals in
wireless networks. In USENIX NSDI, San Francisco, USA, 2008.
[27] M. Wang, X. Weimin, and T. Brown. Soft Decision Metric Generation for QAM
with Channel Estimation Error. IEEE Transactions on Communications, 50(7):1058
– 1061, 2002.
[28] A. Willig, M. Kubisch, C. Hoene, and A. Wolisz. Measurements of a wireless link
in an industrial environment using an ieee 802.11-compliant physical layer. IEEE
Transaction on Industrial Electronics, 49(6), 2002.
[29] G. Woo, P. Kheradpour, and D. Katabi. Beyond the bits: Cooperative packet
recovery using phy information. In ACM MobiCom, Montreal, Canada, 2007.
[30] R. W. Yeung and N. Cai. Network error correction, part 1: Basic concepts and
upper bounds. Communications in Information and Systems, 6(1):19–35, 2006.