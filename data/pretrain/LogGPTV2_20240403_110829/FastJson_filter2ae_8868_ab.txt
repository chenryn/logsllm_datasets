        }
    }
可以发现在序列化时，`FastJson`会调用成员对应的`get`方法，被`private`修饰且没有`get`方法的成员不会被序列化，被`public`修饰的成员都会被序列化，并且序列化的结果是标准的`JSON`字符串。
### 自省
`JSON`标准是不支持自省的，也就是说根据`JSON`文本，不知道它包含的对象的类型。
`FastJson`支持自省，在序列化时传入类型信息`SerializerFeature.WriteClassName`，可以得到能表明对象类型的`JSON`文本。
`FastJson`的漏洞就是由于这个功能引起的。
使用方式
    public static String toJSONString(Object object, SerializerFeature... features)
Test.java
    import com.alibaba.fastjson.JSON;
    import com.alibaba.fastjson.serializer.SerializerFeature;
    public class Test {
        public static void main(String[] args) {
            User a = new User();
            System.out.println("===========================");
            String jsonstr_a = JSON.toJSONString(a, SerializerFeature.WriteClassName);
        }
    }
运行结果：
    User init() is called
    ===========================
    getAge1() is called
    getAge2() is called
    getName1() is called
    getName2() is called
    getProp1_1() is called
    getProp1_2() is called
    getProp2_1() is called
    getProp2_2() is called
    {
        "@type": "User",
        "age1": "a1",
        "age2": "a2",
        "name1": "rai4over1",
        "name2": "rai4over2",
        "name3": "rai4over3",
        "name4": "rai4over4",
        "prop1_1": {
            "@type": "java.util.Properties",
            "prop1_1": "1_1"
        },
        "prop1_2": {
            "@type": "java.util.Properties",
            "prop1_2": "1_2"
        },
        "prop1_3": {
            "@type": "java.util.Properties",
            "prop1_3": "1_3"
        },
        "prop1_4": {
            "@type": "java.util.Properties",
            "prop1_4": "1_4"
        },
        "prop2_1": {
            "@type": "java.util.Properties",
            "prop2_1": "2_1"
        },
        "prop2_2": {
            "@type": "java.util.Properties",
            "prop2_2": "2_2"
        }
    }
结果和上文相同，`JSON`字符串中新增`@type`字段名，用来表明指定反序列化的目标对象类型为`User`
##  反序列化
反序列化的函数为`JSON.parseObject`
### 非自省
使用方式
    public static  T parseObject(String text, Class clazz)
需要在`JSON.parseObject`中传入`Class clazz`
    import com.alibaba.fastjson.JSON;
    import com.alibaba.fastjson.JSONObject;
    import com.alibaba.fastjson.serializer.SerializerFeature;
    public class Test {
        public static void main(String[] args) {
            String jsonstr_a = "{\"age1\":\"a1\",\"age2\":\"a2\",\"age3\":\"a3\",\"age4\":\"a4\",\"name1\":\"rai4over1\",\"name2\":\"rai4over2\",\"name3\":\"rai4over3\",\"name4\":\"rai4over4\",\"prop1_1\":{\"prop1_1\":\"1_1\"},\"prop1_2\":{\"prop1_2\":\"1_2\"},\"prop1_3\":{\"prop1_3\":\"1_3\"},\"prop1_4\":{\"prop1_4\":\"1_4\"},\"prop2_1\":{\"prop2_1\":\"2_1\"},\"prop2_2\":{\"prop2_2\":\"2_2\"},\"prop2_3\":{\"prop2_3\":\"2_3\"},\"prop2_4\":{\"prop2_4\":\"2_4\"}}";
            System.out.println(jsonstr_a);
            System.out.println("===========================");
            User b = JSON.parseObject(jsonstr_a, User.class);
            System.out.println(b);  
        }
    }
运行结果：
    {"age1":"a1","age2":"a2","age3":"a3","age4":"a4","name1":"rai4over1","name2":"rai4over2","name3":"rai4over3","name4":"rai4over4","prop1_1":{"prop1_1":"1_1"},"prop1_2":{"prop1_2":"1_2"},"prop1_3":{"prop1_3":"1_3"},"prop1_4":{"prop1_4":"1_4"},"prop2_1":{"prop2_1":"2_1"},"prop2_2":{"prop2_2":"2_2"},"prop2_3":{"prop2_3":"2_3"},"prop2_4":{"prop2_4":"2_4"}}
    ===========================
    User init() is called
    setAge1() is called
    setAge3() is called
    setName1() is called
    setName3() is called
    setProp1_1() is called
    setProp1_3() is called
    setProp2_1() is called
    getProp2_2() is called
    setProp2_3() is called
    User{name1='rai4over1', name2='rai4over2', name3='rai4over3', name4='rai4over4', age1='a1', age2='null', age3='a3', age4='null', prop1_1={prop1_1=1_1}, prop1_2={prop1_2=1_2}, prop1_3={prop1_3=1_3}, prop1_4={prop1_4=1_4}, prop2_1={prop2_1=2_1}, prop2_2=null, prop2_3={prop2_3=2_3}, prop2_4=null}
在反序列化时，`String`类型会调用了全部的`setter`，但还额外调用了`getProp2_2`。`publibc`修饰的成员全部赋值，`private`修饰的成员则为`NULL`。
### 自省
`JSON.parseObject`除了传入`Class clazz`非自省反序列化，也同样有自省反序列化
    import com.alibaba.fastjson.JSON;
    import com.alibaba.fastjson.JSONObject;
    import com.alibaba.fastjson.parser.Feature;
    import com.alibaba.fastjson.serializer.SerializerFeature;
    public class Test {
        public static void main(String[] args) {
            String jsonstr_a = "{\"@type\":\"User\",\"age1\":\"a1\",\"age2\":\"a2\",\"age3\":\"a3\",\"age4\":\"a4\",\"name1\":\"rai4over1\",\"name2\":\"rai4over2\",\"name3\":\"rai4over3\",\"name4\":\"rai4over4\",\"prop1_1\":{\"@type\":\"java.util.Properties\",\"prop1_1\":\"1_1\"},\"prop1_2\":{\"@type\":\"java.util.Properties\",\"prop1_2\":\"1_2\"},\"prop1_3\":{\"@type\":\"java.util.Properties\",\"prop1_3\":\"1_3\"},\"prop1_4\":{\"@type\":\"java.util.Properties\",\"prop1_4\":\"1_4\"},\"prop2_1\":{\"@type\":\"java.util.Properties\",\"prop2_1\":\"2_1\"},\"prop2_2\":{\"@type\":\"java.util.Properties\",\"prop2_2\":\"2_2\"},\"prop2_3\":{\"@type\":\"java.util.Properties\",\"prop2_3\":\"2_3\"},\"prop2_4\":{\"@type\":\"java.util.Properties\",\"prop2_4\":\"2_4\"}}";
            System.out.println(jsonstr_a);
            System.out.println("===========================");
            //User b = JSON.parseObject(jsonstr_a, User.class);
            JSONObject b = JSON.parseObject(jsonstr_a);
            //Object b = JSON.parse(jsonstr_a);
            System.out.println(b);
        }
    }
运行结果
    {"@type":"User","age1":"a1","age2":"a2","age3":"a3","age4":"a4","name1":"rai4over1","name2":"rai4over2","name3":"rai4over3","name4":"rai4over4","prop1_1":{"@type":"java.util.Properties","prop1_1":"1_1"},"prop1_2":{"@type":"java.util.Properties","prop1_2":"1_2"},"prop1_3":{"@type":"java.util.Properties","prop1_3":"1_3"},"prop1_4":{"@type":"java.util.Properties","prop1_4":"1_4"},"prop2_1":{"@type":"java.util.Properties","prop2_1":"2_1"},"prop2_2":{"@type":"java.util.Properties","prop2_2":"2_2"},"prop2_3":{"@type":"java.util.Properties","prop2_3":"2_3"},"prop2_4":{"@type":"java.util.Properties","prop2_4":"2_4"}}
    ===========================
    User init() is called
    setAge1() is called
    setAge3() is called
    setName1() is called
    setName3() is called
    setProp1_1() is called
    setProp1_3() is called
    setProp2_1() is called
    getProp2_2() is called
    setProp2_3() is called
    getAge1() is called
    getAge2() is called
    getName1() is called
    getName2() is called
    getProp1_1() is called
    getProp1_2() is called
    getProp2_1() is called
    getProp2_2() is called
    {"prop1_3":{"prop1_3":"1_3"},"prop1_4":{"prop1_4":"1_4"},"name4":"rai4over4","prop1_1":{"prop1_1":"1_1"},"name3":"rai4over3","prop1_2":{"prop1_2":"1_2"},"prop2_1":{"prop2_1":"2_1"},"name2":"rai4over2","name1":"rai4over1","age1":"a1"}
调用了全部的`getter`方法，`setter`方法全部调用，但`getProp2_2`额外调用一次（共调用了两次）。
使用`JSON.parse`函数也同样能进行反序列化。
    import com.alibaba.fastjson.JSON;
    import com.alibaba.fastjson.JSONObject;
    import com.alibaba.fastjson.serializer.SerializerFeature;
    public class Test {
        public static void main(String[] args) {
            String jsonstr_a = "{\"@type\":\"User\",\"age1\":\"a1\",\"age2\":\"a2\",\"age3\":\"a3\",\"age4\":\"a4\",\"name1\":\"rai4over1\",\"name2\":\"rai4over2\",\"name3\":\"rai4over3\",\"name4\":\"rai4over4\",\"prop1_1\":{\"@type\":\"java.util.Properties\",\"prop1_1\":\"1_1\"},\"prop1_2\":{\"@type\":\"java.util.Properties\",\"prop1_2\":\"1_2\"},\"prop1_3\":{\"@type\":\"java.util.Properties\",\"prop1_3\":\"1_3\"},\"prop1_4\":{\"@type\":\"java.util.Properties\",\"prop1_4\":\"1_4\"},\"prop2_1\":{\"@type\":\"java.util.Properties\",\"prop2_1\":\"2_1\"},\"prop2_2\":{\"@type\":\"java.util.Properties\",\"prop2_2\":\"2_2\"},\"prop2_3\":{\"@type\":\"java.util.Properties\",\"prop2_3\":\"2_3\"},\"prop2_4\":{\"@type\":\"java.util.Properties\",\"prop2_4\":\"2_4\"}}";
            System.out.println(jsonstr_a);
            System.out.println("===========================");
            //User b = JSON.parseObject(jsonstr_a, User.class);
            //JSONObject b = JSON.parseObject(jsonstr_a);
            //User b = JSON.parseObject(jsonstr_a);
            Object b = JSON.parse(jsonstr_a);
            System.out.println(b);
        }
    }
运行结果：
    {"@type":"User","age1":"a1","age2":"a2","age3":"a3","age4":"a4","name1":"rai4over1","name2":"rai4over2","name3":"rai4over3","name4":"rai4over4","prop1_1":{"@type":"java.util.Properties","prop1_1":"1_1"},"prop1_2":{"@type":"java.util.Properties","prop1_2":"1_2"},"prop1_3":{"@type":"java.util.Properties","prop1_3":"1_3"},"prop1_4":{"@type":"java.util.Properties","prop1_4":"1_4"},"prop2_1":{"@type":"java.util.Properties","prop2_1":"2_1"},"prop2_2":{"@type":"java.util.Properties","prop2_2":"2_2"},"prop2_3":{"@type":"java.util.Properties","prop2_3":"2_3"},"prop2_4":{"@type":"java.util.Properties","prop2_4":"2_4"}}
    ===========================
    User init() is called
    setAge1() is called
    setAge3() is called
    setName1() is called
    setName3() is called
    setProp1_1() is called
    setProp1_3() is called
    setProp2_1() is called
    getProp2_2() is called
    setProp2_3() is called
    User{name1='rai4over1', name2='rai4over2', name3='rai4over3', name4='rai4over4', age1='a1', age2='null', age3='a3', age4='null', prop1_1={prop1_1=1_1}, prop1_2={prop1_2=1_2}, prop1_3={prop1_3=1_3}, prop1_4={prop1_4=1_4}, prop2_1={prop2_1=2_1}, prop2_2=null, prop2_3={prop2_3=2_3}, prop2_4=null}
反序列化时的`getter`、`setter`调用情况和非自省的一样，`getProp2_2`额外调用一次。
### Feature.SupportNonPublicField
对于没有`set`方法的`private`成员，反序列化时传递`Feature.SupportNonPublicField` 即可完成赋值。
    import com.alibaba.fastjson.JSON;
    import com.alibaba.fastjson.parser.Feature;
    public class Test {
        public static void main(String[] args) {
            String jsonstr_a = "{\"age1\":\"a1\",\"age2\":\"a2\",\"age3\":\"a3\",\"age4\":\"a4\",\"name1\":\"rai4over1\",\"name2\":\"rai4over2\",\"name3\":\"rai4over3\",\"name4\":\"rai4over4\",\"prop1_1\":{\"prop1_1\":\"1_1\"},\"prop1_2\":{\"prop1_2\":\"1_2\"},\"prop1_3\":{\"prop1_3\":\"1_3\"},\"prop1_4\":{\"prop1_4\":\"1_4\"},\"prop2_1\":{\"prop2_1\":\"2_1\"},\"prop2_2\":{\"prop2_2\":\"2_2\"},\"prop2_3\":{\"prop2_3\":\"2_3\"},\"prop2_4\":{\"prop2_4\":\"2_4\"}}";
            System.out.println(jsonstr_a);
            System.out.println("===========================");
            User b = JSON.parseObject(jsonstr_a, User.class, Feature.SupportNonPublicField);
            System.out.println(b);
        }
    }
运行结果：
    {"age1":"a1","age2":"a2","age3":"a3","age4":"a4","name1":"rai4over1","name2":"rai4over2","name3":"rai4over3","name4":"rai4over4","prop1_1":{"prop1_1":"1_1"},"prop1_2":{"prop1_2":"1_2"},"prop1_3":{"prop1_3":"1_3"},"prop1_4":{"prop1_4":"1_4"},"prop2_1":{"prop2_1":"2_1"},"prop2_2":{"prop2_2":"2_2"},"prop2_3":{"prop2_3":"2_3"},"prop2_4":{"prop2_4":"2_4"}}
    ===========================
    User init() is called
    setAge1() is called
    setAge3() is called
    setName1() is called
    setName3() is called
    setProp1_1() is called
    setProp1_3() is called
    setProp2_1() is called
    getProp2_2() is called
    setProp2_3() is called
    User{name1='rai4over1', name2='rai4over2', name3='rai4over3', name4='rai4over4', age1='a1', age2='a2', age3='a3', age4='a4', prop1_1={prop1_1=1_1}, prop1_2={prop1_2=1_2}, prop1_3={prop1_3=1_3}, prop1_4={prop1_4=1_4}, prop2_1={prop2_1=2_1}, prop2_2=null, prop2_3={prop2_3=2_3}, prop2_4={prop2_4=2_4}}
## 结论
根据几种输出的结果，可以得到每种调用方式的特点：
  * `parseObject(String text, Class clazz)` ，构造方法 + `setter` \+ 满足条件额外的`getter`
  * `JSONObject parseObject(String text)`，构造方法 + `setter` \+ `getter` \+ 满足条件额外的`getter`
  * `parse(String text)`，构造方法 + `setter` \+ 满足条件额外的`getter`
# Fastjson 1.2.24 远程代码执行&&TemplatesImpl 利用链
FastJson在`1.2.22` \- `1.2.24` 版本中存在反序列化漏洞，主要原因FastJson支持的两个特性：