gke-my-k8s-cluster-default-pool-4c20ec6b-rrvz   Ready                         1m        v1.7.3  
```
# 云提供商
GKE 还整合了与 GCP 基础设施深度集成的 Kubernetes 云提供商；例如，通过 VPC 路由覆盖网络，通过永久磁盘存储负载，以及通过 L4 负载平衡器服务。最好的部分是 L7 负载平衡器的入口。让我们看看它是如何工作的。
# 存储类
根据 AWS 上的 kops，GKE 还默认设置了 StorageClass，它使用持久磁盘:
```
$ kubectl get storageclass
NAME                 TYPE
standard (default)   kubernetes.io/gce-pd 
$ kubectl describe storageclass standard
Name:       standard
IsDefaultClass:   Yes
Annotations:      storageclass.beta.kubernetes.io/is-default-class=true
Provisioner:      kubernetes.io/gce-pd
Parameters: type=pd-standard
Events:             
```
因此，在创建永久卷声明时，它会自动将 GCP 永久磁盘分配为 Kubernetes 永久卷。关于持久卷声明和动态资源调配，请参考[第 4 章](04.html#3279U0-6c8359cae3d4492eb9973d94ec3e4f1e)、*使用存储和资源*:
```
$ cat pvc-gke.yml 
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
 name: pvc-gke-1
spec:
 storageClassName: "standard"
 accessModes:
 - ReadWriteOnce
 resources:
 requests:
 storage: 10Gi
//create Persistent Volume Claim
$ kubectl create -f pvc-gke.yml 
persistentvolumeclaim "pvc-gke-1" created
//check Persistent Volume
$ kubectl get pv
NAME                                       CAPACITY   ACCESSMODES   RECLAIMPOLICY   STATUS    CLAIM               STORAGECLASS   REASON    AGE
pvc-bc04e717-8c82-11e7-968d-42010a920fc3   10Gi       RWO           Delete          Bound     default/pvc-gke-1   standard                 2s
//check via gcloud command
$ gcloud compute disks list 
NAME                                                             ZONE               SIZE_GB  TYPE         STATUS
gke-my-k8s-cluster-d2e-pvc-bc04e717-8c82-11e7-968d-42010a920fc3  asia-northeast1-a  10       pd-standard  READY  
```
# L4 负载平衡器
与 AWS 云提供商类似，GKE 也支持对 Kubernetes 服务使用 L4 负载平衡器。只需将`Service.spec.type`指定为负载均衡器，GKE 就会自动设置配置 L4 负载均衡器。
请注意，L4 负载平衡器到 Kubernetes 节点之间对应的防火墙规则可以由云提供商自动创建。如果您想将您的应用快速公开到互联网上，这很简单，但足够强大:
```
$ cat grafana.yml 
apiVersion: apps/v1beta1
kind: Deployment
metadata:
 name: grafana
spec:
 replicas: 1
 template:
 metadata:
 labels:
 run: grafana
 spec:
 containers:
 - image: grafana/grafana
 name: grafana
 ports:
 - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
 name: grafana
spec:
 ports:
 - port: 80
 targetPort: 3000
 type: LoadBalancer
 selector:
 run: grafana
//deploy grafana with Load Balancer service
$ kubectl create -f grafana.yml 
deployment "grafana" created
service "grafana" created
//check L4 Load balancer IP address
$ kubectl get svc grafana
NAME      CLUSTER-IP     EXTERNAL-IP     PORT(S)        AGE
grafana   10.59.249.34   35.189.128.32   80:30584/TCP   5m
//can reach via GCP L4 Load Balancer
$ curl -I 35.189.128.32
HTTP/1.1 302 Found
Location: /login
Set-Cookie: grafana_sess=f92407d7b266aab8; Path=/; HttpOnly
Set-Cookie: redirect_to=%252F; Path=/
Date: Wed, 30 Aug 2017 07:05:20 GMT
Content-Type: text/plain; charset=utf-8  
```
# L7 负载平衡器(输入)
GKE 还支持 Kubernetes 入口，它可以设置 GCP L7 负载平衡器，根据 URL 向目标服务发送 HTTP 请求。您只需要设置一个或多个节点端口服务，然后创建入口规则来指向服务。在幕后，Kubernetes 自动创建和配置防火墙规则、运行状况检查、后端服务、转发规则和 URL 映射。
让我们首先创建使用 nginx 和 Tomcat 部署到 Kubernetes 集群的相同示例。这些服务使用绑定到节点端口的 Kubernetes 服务，而不是负载平衡器:
**![](img/00145.jpeg)**
此时，您无法访问服务，因为还没有防火墙规则允许从互联网访问 Kubernetes 节点。因此，让我们创建指向这些服务的 Kubernetes 入口。
You can use `kubectl port-forward  ` to access via the Kubernetes API server. For the preceding case, use `kubectl port-forward tomcat-670632475-l6h8q 10080:8080.`.
After that, open your web browser to `http://localhost:10080/` and then you can access Tomcat pod directly.
Kubernetes 入口定义与 GCP 后端服务定义非常相似，因为它需要指定 URL 路径、Kubernetes 服务名称和服务端口号的组合。所以在这个场景中，URL `/`和`/*`指向 nginx 服务，URL `/examples`和`/examples/*`也指向 Tomcat 服务，如下所示:
```
$ cat nginx-tomcat-ingress.yaml 
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
 name: nginx-tomcat-ingress
spec:
 rules:
 - http:
 paths:
 - path: /
 backend:
 serviceName: nginx
 servicePort: 80
 - path: /examples
 backend:
 serviceName: tomcat
 servicePort: 8080
 - path: /examples/*
 backend:
 serviceName: tomcat
 servicePort: 8080
$ kubectl create -f nginx-tomcat-ingress.yaml 
ingress "nginx-tomcat-ingress" created  
```
完全配置 GCP 组件(如运行状况检查、转发规则、后端服务和 url 映射)大约需要 10 分钟:
```
$ kubectl get ing
NAME                   HOSTS     ADDRESS           PORTS     AGE
nginx-tomcat-ingress   *         107.178.253.174   80        1m  
```
您也可以在 web 控制台上检查状态，如下所示:
![](img/00146.jpeg)
一旦完成 L7 负载平衡器的设置，您就可以访问负载平衡器的公共 IP 地址(`http://107.178.253.174/`)来查看 nginx 页面。除了访问`http://107.178.253.174/examples/`外，您还可以看到`tomcat example`页面。
在前面的步骤中，我们为 L7 负载平衡器创建并分配了一个临时的 IP 地址。但是，使用 L7 负载平衡器的最佳做法是分配一个静态 IP 地址，因为您还可以将域名系统(FQDN)与静态 IP 地址相关联。
为此，请更新入口设置，添加注释`kubernetes.io/ingress.global-static-ip-name`以关联 GCP 静态 IP 地址名称，如下所示:
```
//allocate static IP as my-nginx-tomcat
$ gcloud compute addresses create my-nginx-tomcat --global
//check assigned IP address
$ gcloud compute addresses list 
NAME             REGION  ADDRESS         STATUS
my-nginx-tomcat          35.186.227.252  IN_USE
//add annotations definition
$ cat nginx-tomcat-static-ip-ingress.yaml 
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
 name: nginx-tomcat-ingress
 annotations:
 kubernetes.io/ingress.global-static-ip-name: my-nginx- 
tomcat
spec:
 rules:
 - http:
 paths:
 - path: /
 backend:
 serviceName: nginx
 servicePort: 80
 - path: /examples
 backend:
 serviceName: tomcat
 servicePort: 8080
 - path: /examples/*
 backend:
 serviceName: tomcat
 servicePort: 8080
//apply command to update Ingress
$ kubectl apply -f nginx-tomcat-static-ip-ingress.yaml 
//check Ingress address that associate to static IP
$ kubectl get ing
NAME                   HOSTS     ADDRESS          PORTS     AGE
nginx-tomcat-ingress   *         35.186.227.252   80        48m  
```
所以，现在你可以通过一个静态的 IP 地址作为`http://35.186.227.252/` (nginx)和`http://35.186.227.252/examples/` (Tomcat)来访问入口。
# 摘要
在这一章中，我们讨论了谷歌云平台。基本概念与 AWS 类似，但部分政策和概念有所不同。尤其是谷歌容器引擎，因为使用 Kubernetes 作为生产级是非常强大的服务。Kubernetes 集群和节点管理相当容易，不仅安装，而且升级。云提供商也完全集成到 GCP，尤其是入口，因为它可以用一个命令配置 L7 负载平衡器。因此，如果您计划在公共云上使用 Kubernetes，强烈建议尝试 GKE。
下一章将提供一些新特性和替代服务的预览来对抗 Kubernetes。