中一些有趣的方面。对于用户名的概念，似乎
浏览器
存在三种不同的隐含表示。第一种表示是在浏
览器中，将用户名实现为一个字符串。第二种
OR
表示是在应用程序的服务器端，用户名是一个
字符串。第三种表示是在数据库中，它将用户
名实现为数据库中的某种数据类型（在本例中
为 varchar 类型)。
应用程序
查看右侧的数据映射，可以清楚地看到存
在着错误。虽然左侧从admin的映射看起来是
正确的，但在右侧的映射中使用一个完全不同
数据库
的值作为结束，这个值来自浏览器的输入。
图8-1从浏览器到数据库的数据映射
在上面的示例代码中，用户名和密码都是隐含概念(implicit concept)。领域驱动设计告诉我
们，无论何时只要一个隐含概念导致了间题，就应该使之成为一个显式概念（cxplicitconcept)。在
DDS中应该为每一个这样的概念引入一个类，并在任何需要使用这些概念的地方使用这些类。
294
---
## Page 309
第8章代码层防御
在Java中，可以创建Usemame 类，使用户名这个概念成为一个显式（explicit）的概念，Uscmame
类是一个值对象，代码如下所示：
public class Username (
private static Pattern USERNAME_PATTERN = Pattern. compile (*^ [a-z] (4, 20)$") ;
private final String usernamej
public Username (String username)(
if (1isValid (username))(
throw ne IllegalArgumentException (*Invalid username: * + username) :
this,username = username;
public static boolean isValid (String username) (
return USERNAME_PATTERN,matcher (username) ,matches () ;
1
在上面这个类中，我们对原始的字符串进行了封装，并在该对象的构造函数中执行了输入
检验。这带来了很多实际的好处。这样一米，无论在代码的任何位置，只要使用了Usemame
对象，根据输入检验规则，该对象就是有效的。在代码中不可能创建一个包含无效用户名的
Usemame 对象。这样一来，在代码中其他也涉及用户名处理的方法中，就可以避免重复的检
验逻辑。这种设计方式还简化了单元测试，因为我们只须对Usermame类的逻辑执行单元测试
即可。
采用这种方式构建的类还有另外一个好处，它简化了在代码的其他位置查找输入检验代码
的步骤，对于开发人员，只须简单地输入Usemame，IDE将显示出一个可能方法的列表，其中
就包含了Usemame类。对于任何类似的概念都可以采用这种办法进行处理，并将获得与之类
似的好处。当它直接连接到问题中的概念时，非常容易找出输入检验的功能，面无须在通用的
工具类或正则表达式列表中查找输入检验功能的代码。容易找到对应的概念还降低了重复、可
能出现的差异和错误实现的风险，在较大的代码库中很容易产生这些问题。
如果我们将输入验证和显式概念应用在映射图中，映射关系将如图8-2所示。现在，如果
所有内部调用都使用Usemame概念，在传递
给系统之前，任何作为字符申输入应用程序的
值都将被封装进一个Usemame 对象中，因此
浏览器
当数据进入我们的应用程序时可以拒绝无效的
值，而不是在整个代码中分散验证的逻辑或者
调用上述逻辑。
在Usermame类的实现中，我们使用了一
应用和序
个输入检验规则，只允许用户名为从a到z的
4至20个字符。接下来考虑一个略有不同的例
子。在该系统的新版本中，要求像usemame字
段一样支持email地址。这使得验证规则变得
复杂。RFC5322描述了email地址中有效的字
符，其中包含了很多用于SQL注入攻击的字符
数指库
最值得注意的是单引号字符。
图8-2在边界上阻止无效的数据
295
---
## Page 310
SQL注入攻击与防街（第2版）
虽然输入验证可以在边界上阻止某些攻击，但是当输入类型变得复杂时，对输入进行验证
就会变得困难。对于这些问题，常见的解决方案是对SQL常用的关键字设置黑名单，但这种
解决方案可能存在问题。尽管这可能对某些类型的数据有效，select和delete之类的单词是英
语中的SQL语言词汇，因此在数据正文中应该受到限制。在图8-3中可以看到，问题实际上并
非产生在从Web浏览器模型映射到应用程序模型时，而是发生在从应用程序模型映射到数据库
模型时。实际的bug是应用程序在将一个应用程序数据值映射到数据库中正确的数据值时发生
了错误。要解决这一问题，必须确保数据就是数据，面不会变成SQL控制流的一部分。简而
言之，数值应该就是数值、文本应该就是文本。解决这一映射问题最安全的办法就是直接使用
参数化语句，或者借助使用了参数化语句的抽象层。通过使用预处理语句，我们获得了一种可
信赖的标准方法，确保了数据保持为数据。这是一种内置于数据访问框架的功能，并与数据驱
动程序有关。如果在代码中的每一个地方都使用了参数化语句，就可以允许直接访间Usemame对
象中原始的 usermame字符串。可以将该字段的访间修饰符从private 改为 public：
public class Username {
publie final String username;
或者添加访间器：
return username/
或者重写toStringO方法以返回该值：
8Override
public String toString ()(
return usernane/
浏览器
OR
应用程序
bug
数据库
图8-3定位实际的 bug
296
---
## Page 311
第8章代码层防御
如果出于某些原因无法使用参数化语句，就需要对输出进行恰当的编码。数据库在如何实
现处理输入的问题上存在着差异，我们需要处理这些差异，这是使编码变得困难的一个因素。
一个数据库中良性的字符可能会在另一个数据库上产生问题。如果我们在开发过程中的不同阶
段（测试、QA和产品阶段）使用了不同的数据库，就特别容易产生这种问题。在使用输出编码
时，可以锁定对usermame 值的访问，并使用辅助方法进行编码：
public String asSQLSafeString()(
return Encoder.encodeForSQL (username) :
上面例子中的Encoder工具是一个类，我们实现了该类，并将如何对当前数据库的字符串
进行编码的所有逻辑都放在该类中。将字符串的编码逻辑放在一个独立的类中，这一点很重要，
它可以避免编码逻辑跨越多个类重复出现，以及随着时间的推移在编码功能上可能产生的实现
上的差异。
8.3使用参数化语句
前面几章介绍过，引发SQL注入最根本的原因之一是将SQL查询创建成字符串，然后发
给数据库执行。这一做法（通常称为动态字符串构造或动态SQL）是造成应用程序容易受到SQL
注入攻击的主要原因之一。
作为一种更加安全的动态字符串构造方法，大多数现代编程语言和数据库访问API可以使
用占位符或绑定变量来向SQL查询提供参数（面非直接对用户输入进行操作)。通常称之为参数
化语句，这是一种更安全的方法，可以避免或解决很多在应用中经常见到的SQL注入问题，
并可以在大多数常见的情形中使用参数化语句来替换现有的动态查询。参数化语句还拥有相对
现代数据库而言效率很高的优势，因为数据库可以根据提供的预备语句来优化查询，从而提高
后续查询的性能。
不过，值得注意的是，参数化语句是一种向数据库提供潜在的非安全参数的方法，通常作
为查询或存储过程调用。虽然它们不会修改传递给数据库的内容，但如果正在调用的数据库功
能在存储过程或函数的实现中使用了动态SQL，那么仍然可能出现SQL注入。Microsof SQL
Server和Oracle长期受该间题的困扰，因为它们之前附带安装了很多内置的易受SQL注入攻
击的存储过程。对于在实现中使用了动态SQL的数据库存储过程或函数来说，应该意识到这
是一个危险。还有一个间题要考虑到：此时已经存储在数据库中的恶意内容之后可能会在应用
程序的其他位置被使用，这将导致应用程序在那时受到SQL注入。我们在第7章的7.3节“利
用二阶SQL注入”中介绍过该内容。
下面是一个使用动态SQL的登录页面中易受攻击的伪代码示例。我们将在接下来的内容
中介绍如何在Java、C#和 PHP中参数化这段代码：
(oueuxesn_) asonbox - oueuxosn
Passvord = request ("password")
-,=oueuaesn 3d3x saesn Noa 、 LO3T3S。 = tbg
* + Username + ** AND
password-**+ Password + *1*
Result = Db,Execute (Sq1)
If (Result) /* successful login */
297
---
## Page 312
SQL注入攻击与防御（第2版）
工具与陷阱
哪些内容可以参数化，哪些不能？
并不是所有的SQL语句都可以参数化，特别是只能参数化数据值，而不能参数化
SQL标识符或关键字。因此，不能出现下列格式的参数化语句：
. -o     
遗憾的是，在线论坛中解决该问题的常见方法是在字符串中使用动态SQL，之后再
将其用于参数化查询，如下所示：
 +. -
上述示例最终会引入一个SQL注入问题，而之前尝试参数化语句时不会出现该问题。
一般来说，如果尝试以参数方式提供SQL标识符，则应该首先查看SQL以及访问
数据库的方式，之后再查看是否可以使用固定的标识符来重写该查询，使用动态SQL虽
然可能会解决该问题，但也可能反过来影响查询的性能，因为数据库将无法优化该查询。
8.3.1Java中的参数化语句
据库访问方法。JDBC支持多种多样的数据库访问方法，包括通过PreparedStatement类来使用
参数化语句。
下面是较早出现的易受攻击的例子，我们使用JDBC预处理语句对它进行了重写。请注意，
添加参数时（通过使用不同的sef函数，比如serSrring）指定了问号（？）占位符的编号位置
(从1开始)。
Connection con = DriverManager.getConnection(connectionString) ;
PreparedStatement lookupUsers = con.prepareStatement (sql) /
/ /将参数漆加到 SQL 查询中
lookupUser.setString(1, username);
//在位置1添加字符非
lookupUser.setString(2, password) ;
//在位置2泰加字符中
rs = lookupUser,executeQuery () /
在J2EE应用中，除了使用Java 提供的JDBC框架外，通常还可以使用附加的包来高效地
访问数据库。常用的访问数据库的持久化框架为Hibemate。
除了可以使用固有的 SQL功能和前面介绍的JDBC功能外，Hibermate还提供了自己的功
能来将变量绑定到参数化语句。Query对象提供了使用命名参数（使用冒号指定，例如：parameter)
或JDBC风格的间号占位符（?)的方法。
下面的例子展示了如何使用带命名参数的Hibermate：
+ GNV ereuxoen:=oweuzosn 383nM s1oen xOs& + Io3T3s。 = rbe 5uT11s
"password=:password";
298
---
## Page 313
第8章代码层防御
Query lookupUser - session,createQuery(sql);
//将参数添加到 SQL查询中
lookupUsers. setString("username", username) :
//添加 username
lookupUsers.setString (*passvord", password) :
//添加l password
List rs = lookupUser.1ist() ;
接下来的例子展示了如何在Hibermate的参数中，使用JDBC风格的问号占位符。请注意，
Hibermate从0开始而不是像JDBC那样从1开始对参数进行编号。因此，列表中的第一个参数
为0，第二个为1。
//将参数添加到SQL查询中
f (tbs)Axanooeaao*uotss9s = aosndnxoot Axeno
lookupUser,setString(0, username) ;
//都加 username
lookupUser.setString (1, password) ;
//都都 pass?ord
f ()aeTt*xesndnxooT = sx as17
8.3.2.NET（C#）中的参数化语句
Microsof.NET提供了很多不同的访问方式，它们使用ADO.NET框架来参数化语句。
ADO.NET还提供了附加的功能，可以进一步检查提供的参数，比如对提交的数据执行类型检
查等。
根据访问的数据库类型的不同，ADO.NET提供了4种不同的数据提供程序：用于Microsoft
SQL Server 的 System.Data.SqIClient，用于 Oracle 数据库的 System.Data.OracleClient，以及分别用
于OLE DB 和 ODBC 数据源的 System.Data.OleDb 和 System.Data.Odbc。您需要根据访间数据
库时使用的数据库服务器和驱动程序的不同来选择相应的提供程序，遗憾的是，不同数据提供
程序使用参数化语句的语法存在差异，尤其表现在语句和参数的指定方式上。表8-1列出了各
种数据提供程序指定参数的方式。
表8-1ADO.NET数据提供程序以及参数命名语法
数据提供程序
参数语法
System.Data.SqlClient
@parameter
System.Data.OracleClient
paramcter（只能位于参数化的SQL命令文本中）