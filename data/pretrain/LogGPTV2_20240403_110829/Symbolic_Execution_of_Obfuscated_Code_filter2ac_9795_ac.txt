in instruction 6 is necessarily 1. Since the value of the low
bit of r3 is constant and thus independent of the input, it
will be marked as untainted.
4.2 Handling Obfuscated Jumps
Given a conditional or indirect jump instruction I that is
controlled by a tainted (i.e., symbolic) value, we compute
the predicate corresponding to it as follows.
1. Identify the condition code ﬂags that control I:
• For a conditional jump this is obtained from the
jump condition of the instruction.
• For an unconditional jump this is obtained from
the tainted bits in the target address whose taint
marking is not ‘generic taint’.
Denote this set of ﬂags by C(I).
If C(I) = ∅ then I is an input-dependent indirect
jump that is not dependent any conditional jump in
the code. We currently do not handle this case.
2. The predicate corresponding to I is then given by
InstrPred(I) =
FlagCond(t)
(cid:94)
t∈C(I)
where FlagCond(t) is the condition associated with the
instruction and condition code ﬂag referred to by t (see
the previous section).
Let the path constraint up to the instruction prior to I be
π, then the path constraint up to and including I is given
by π ∧ InstrPred(I).
Example 4.1. The instruction sequence below is seman-
tically identical to that of Example 3.1. but expressed in
x86 syntax to illustrate how the analysis works. A ‘$’ preﬁx
on an operand, e.g., in instructions 5 and 6, indicates an
immediate operand.
1 call get input
2 test eax, eax
3 pushfd
4 pop ebx
5 and ebx, $0x40
6 mov ecx, $0x500000
7 or ebx, ecx
8 jmp ebx
Instruction 2 in this sequence assumes the standard calling
convention where return values are passed in register eax.
The taint propagation goes as follows.
After instruction 1, each bit in eax has the taint marking
generic taint.
After instruction 2, the condition code ﬂags in the EFLAGS
register are tainted as follows. Bit positions 0, 2, 6, 7, and
11, corresponding to the ﬂags Carry (CF), Parity (PF), Zero
(ZF), Sign (SF), and Overﬂow (OF), gets the taint markings
(cid:104)2, CF, 1(cid:105), (cid:104)2, PF, 1(cid:105), (cid:104)2, ZF, 1(cid:105), (cid:104)2, SF, 1(cid:105), and (cid:104)2, OF, 1(cid:105) respec-
tively (here, the instruction value ‘2’ refers to the position
of the instruction that set the ﬂag, and the polarity value 1
indicates that the bit has not been inverted).
The data movement instructions 3 and 4 simply copy the
taint marks of their source to their destination. Thus, after
instruction 3, the corresponding bits of the top word on
the stack get these taint markings, and similarly for the
register ebx after instruction 4. The resulting taint markings
of ebx are: ebx[0] (cid:55)→ (cid:104)2, CF, 1(cid:105); ebx[2] (cid:55)→ (cid:104)2, PF, 1(cid:105); ebx[6] (cid:55)→
(cid:104)2, ZF, 1(cid:105); ebx[7] (cid:55)→ (cid:104)2, SF, 1(cid:105); and ebx[11] (cid:55)→ (cid:104)2, OF, 1(cid:105).
After instruction 5, the only bit of ebx that is tainted
is ebx[6], which has the marking ebx[6] (cid:55)→ (cid:104)2, ZF, 1(cid:105). Af-
ter instruction 7, this bit position remains the only tainted
bit in ebx, with the same taint marking, (cid:104)2, ZF, 1(cid:105). From
the semantics of instruction 2, namely, test eax, eax, the
ﬂag condition for this taint marking is that register eax is
0. Thus, the instruction predicate for the indirect jump at
instruction 8 is that eax has the value 0 at instruction 2.
In this case, it is possible to reason about the possible
values of the tainted bits ﬂowing into the indirect jump, and
thereby identify the set of possible targets of the jump. From
the perspective of concolic analysis to generate alternative
inputs and improve code coverage, this is not really neces-
sary since it is enough to identify the instruction predicate
InstrPred() for the indirect jump. The ability to explicitly
identify the other possible targets of such obfuscated jumps
can be useful, however, for other related analyses of obfus-
cated code, such as incremental disassembly [28] and deob-
fuscation [46].
The following example shows how this approach can deal
with obfuscated conditional jumps.
Example 4.2. The code fragment below rephrases Ex-
ample 3.2 in x86 syntax. A ‘$’ preﬁx on an operand, e.g., in
instruction 5, indicates an immediate operand.
1 call get input
2 test eax, eax
3 pushfd
4 pop ebx
5 shr ebx, $4
6 push ebx
7 popfd
8 jpe L
Instructions 1–4 of this example are the same as in Example
4.1 and their analysis is similar to that shown above. Af-
ter instruction 4, the taint markings of ebx are: ebx[0] (cid:55)→
(cid:104)2, CF, 1(cid:105); ebx[2] (cid:55)→ (cid:104)2, PF, 1(cid:105); ebx[6] (cid:55)→ (cid:104)2, ZF, 1(cid:105); ebx[7] (cid:55)→
(cid:104)2, SF, 1(cid:105); and ebx[11] (cid:55)→ (cid:104)2, OF, 1(cid:105).
After instruction 5 (shr, shift right), the taint markings
for register ebx are updated to account for the shift. Thus,
ebx[2] (i.e., bit position 2) gets the taint marking (cid:104)2, ZF, 1(cid:105);
ebx[3] gets (cid:104)2, SF, 1(cid:105); and ebx[7] gets (cid:104)2, OF, 1(cid:105).
The data movement instructions 6 and 7 then copy the
resulting bits from ebx to EFLAGS, and their taint is propa-
gated correspondingly. In particular, after instruction 7 the
738condition code ﬂag at EFLAGS[2], namely, PF, gets the taint
marking for the corresponding position of ebx, i.e., (cid:104)2, ZF, 1(cid:105).
When the conditional jump in instruction 8 is encoun-
tered, the semantics of the jpe instruction specify that it
is taken if the PF ﬂag is 1. The taint mark for this ﬂag is
(cid:104)2, ZF, 1(cid:105), i.e., (since the polarity on the taint mark is 1) that
ZF = 1 from instruction 2. From the semantics of instruction
2, namely, test eax, eax, the ﬂag condition for this taint
marking is that register eax is 0.
Thus, the instruction predicate for the conditional jump
at instruction 8 is that eax has the value 0 at instruction 2.
4.3 Handling Symbolic Code
We detect symbolic code when an instruction writes a
tainted value to a memory location that forms part of a sub-
sequently executed instruction I. The way in which such a
write is handled depends on which portions of the instruc-
tion I become tainted as a result:
• If the opcode byte is tainted, then a diﬀerent input
can cause a diﬀerent instruction to be written into I’s
location and subsequently executed. While the total
number of other possible opcodes is quite large, for the
purposes of reasoning about input-dependent condi-
tional jumps we focus on control transfer instructions.
To this end, we construct an instruction predicate that
gives, as alternatives for the opcode byte(s) of I, all
of the binary opcodes for control transfer instructions
(direct and indirect unconditional jumps, conditional
jumps, and procedure calls and returns).
In this case it is also possible for part of all of the
operand bytes of I (and possibly the instruction fol-
lowing I) to be overwritten. However, our current im-
lementation focuses on identifying alternative inputs
that can cause a control transfer instruction to be cre-
ated in place of I since this is fundamental to identi-
fying and exploring alternative execution paths.
• If the opcode byte is not tainted but one or more other
bytes of the instruction are overwritten with tainted
bits, then the corresponding operands are ﬂagged as
tainted as the taint analysis proceeds from that point.
For example, suppose that an operand is overwritten
to become the immediate value 1. If any of the bits
involved in this are tainted, then in eﬀect the compu-
tation uses the instruction overwriting to conditionally
incorporate an input-dependent value into the compu-
tation, so the input-dependent value should be cons-
dered tainted.
5. EVALUATIONS
We evaluated the ideas presented in this paper using a
prototype system we have implemented. Our system (called
ConcoLynx) uses Pin [25] to collect execution traces;3 these
traces are then post-processed to propagate taint from sym-
bolic inputs. We ran our experiments on a Linux machine
running Ubuntu operating system with an Intel Core i7 (2.6
GHz) CPU with 8 cores and 6 gigabytes of memory.
We used two sets of programs for our evaluations:
3This choice of tracing tool is not fundamental to our ap-
proach so any other tracing tool can be adapted by our tech-
nique.
• The ﬁrst set consists of three small programs: simple-
if (shown in Figure 1(a)); bin-search, a binary search
program; and bubble-sort. The simple-if program takes
a single input which is marked symbolic in our analy-
sis. We ran bin-search on an array of size eight; and
only the number to be searched for within this array is
marked as symbolic. The bubble-sort program was run
on an array of size three where all the elements were
marked symbolic.
• The second set consists of four malicious programs
whose source code we obtained from VX Heavens [42].
Each of these programs demonstrates trigger-based be-
haviors based on some system calls: mydoom and net-
sky ae both check system time to execute their pay-
load if the current time meets the trigger condition;
assiral checks whether it is being debugged by call-
ing the API function IsDebuggerPresent() and then
takes diﬀerent execution paths based on the result; and
clibo checks Windows registry keys to check whether it
is running for the ﬁrst time in the system.
The toy programs in the ﬁrst set were deliberately chosen to
have a small amount of simple but nontrivial control ﬂow, so
as to make it easier to separate out the performance and pre-
cision eﬀects of code obfuscation on concolic analysis. The
small size and simple logical structure of these programs
were intended to provide a sort of lower bound on expec-
tations for concolic analyses. The programs in the second
set were chosen as representative samples of trigger-based
behavior in malware. We used source code because of the
requirements of the obfuscation tools listed below. For S2E,
the inputs to the programs were annotated with S2E’s APIs
to introduce symbolic inputs to the programs. For Vine,
the desired function calls were hooked to introduce taint to
programs. The goal was not so much to examine the latest
in trigger-based evasion behaviors in malware, but rather to
study the impact of code obfuscation on symbolic execution
under carefully controlled experimental conditions.
For each of the programs listed above, we examined the
behavior of ﬁve executables: the original program together
with four obfuscated versions obtained using four commer-
cial obfuscation tools: Code Virtualizer [30], EXECryptor
[38], VMProtect [41], and Themida [31]. These obfusca-
tion tools create obfuscated binaries for Windows operat-
ing system, so for collecting an execution trace, we ran the
obfuscated binaries along with Pin tool on a Windows XP
service pack 3 operating system running on VMware work-
station. Additionally, we built versions of the ﬁrst set of test
programs to incorporate symbolic code into the program’s
execution.
We compared ConcoLynx with two symbolic execution
systems, S2E [10] and Vine [37]. S2E is based on KLEE
and is built on top of the LLVM compiler and can discover
program states using symbolic execution and virtualization.
Vine is a static analysis tool based on Bitblaze and can an-
alyze traces collected with TEMU [37] where the traces are
taint annotated.
We performed two types of analysis. The ﬁrst experiment
looked at the eﬀect of obfuscation on the accuracy and the
eﬃcacy of the tools while the second examined the practi-
cality of the tools by looking at the cost that obfuscation
imposes on the symbolic analysis in terms of the time of
analysis and the number of queries which were submitted
739to the constraint solver. In our experiments with S2E, we
used the concolic execution conﬁguration with two path se-
lection strategies available in S2E: depth-ﬁrst and random
state search.
5.1 Efﬁcacy
Obfuscation Tool
System
ConcoLynx
Vine
S2E
(DFS)
S2E
(random)
Program
CV
(cid:88)
simple-if
(cid:88)
bin-search
bubble-sort (cid:88)
(cid:88)
assiral
(cid:88)
clibo
(cid:88)
mydoom
(cid:88)
netsky ae
Err
simple-if
Err
bin-search
bubble-sort Err
Err
assiral
Err
clibo
Err
mydoom
Err
netsky ae
(cid:88)
simple-if
(cid:88)
bin-search

bubble-sort
(cid:88)
assiral
(cid:88)
clibo
(cid:88)
mydoom
(cid:88)
netsky ae
(cid:88)
simple-if

bin-search

bubble-sort
(cid:88)
assiral
(cid:88)
clibo
(cid:88)
mydoom
(cid:88)
netsky ae
EC
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
VM
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
StpErr Err
StpErr Err
StpErr Err
StpErr Err
StpErr Err
StpErr Err
StpErr Err
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)














TH
(cid:88)
(cid:88)
(cid:88)
−
(cid:88)
(cid:88)
(cid:88)
Err
Err
Err
Err
Err
Err
Err
(cid:88)





(cid:88)






(cid:88)
Key: CV: Code Virtualizer; EC: EXECryptor; VM: VMProtect;
TH: Themida
(cid:88): tool produced at least one input
: timeout or fail to produce any results
StpErr: produced constraints crashed STP
Err: runtime error
Table 1: Eﬃcacy of analysis: Code coverage
5.1.1 Code Coverage
These experiments evaluate the extent to which symbolic
execution makes it possible to identify and explore diﬀerent
execution paths in obfuscated programs. Table 1 shows,
for each program, whether the symbolic analysis was able to
generate any alternative input that would cause the program
to take a diﬀerent execution path than it did in the analysis.
For the programs analyzed with our tool we have manually
veriﬁed that for each branch point in the program the alter-
native counter example would lead us to another execution
path in the program.
In our experiments, Vine generally failed to produce path
constraints on programs obfuscated using Code Virtualizer,
VMProtect and Themida: for these programs, it gave error
messages and exited and the Errin Table 1 corresponds to
this behavior. Vine was able to produce path constraints
for programs obfuscated using EXECryptor but even then
the constraints created by Vine, crashed the STP that is
shipped with the Vine tool.
As can be seen from the table, S2E was not able to pro-
duce any test case for programs obfuscated with VMPro-
tect and for most of the programs obfuscated with Themida.
Moreover, while S2E was able to generate some test cases
for many of the programs protected with Code Virtualizer
and EXECryptor, the test cases generated for programs ob-
fuscated using EXECryptor cases were redundant, meaning
that S2E generated multiple test cases that all resulted in
the same execution path being taken. The generation of such
redundant inputs can be a problem because it can use up
time and computational resources and thereby slow down