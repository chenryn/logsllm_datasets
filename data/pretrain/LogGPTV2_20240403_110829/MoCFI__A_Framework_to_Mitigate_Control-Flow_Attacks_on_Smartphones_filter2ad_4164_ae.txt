Flow Integrity: Principles, Implementations, and Applica-
tions. In ACM Conference on Computer and Communica-
tions Security (CCS), 2005.
[2] M. Abadi, M. Budiu, U. Erlingsson, G. C. Necula, and
M. Vrable. XFI: Software Guards for System Address
Spaces. In USENIX Symposium on Operating Systems De-
sign and Implementation (OSDI), 2006.
[3] P. Akritidis, C. Cadar, C. Raiciu, M. Costa, and M. Castro.
Preventing Memory Error Exploits with WIT. IEEE Sympo-
sium on Security and Privacy, 2008.
[4] Aleph One. Smashing the Stack for Fun and Proﬁt. Phrack
Magazine, 49(14), 1996.
[5] Anonymous. Once upon a free(). Phrack Magazine, 57(9),
2001.
[6] Apple Inc. Manual Page of dyld - the dynamic link
editor. http://developer.apple.com/library/
mac/#documentation/Darwin/Reference/
ManPages/man1/dyld.1.html, 2011.
[7] Apple
Inc.
Manual Page of mmap -
allocate
into memory.
or map ﬁles
memory,
http://developer.apple.com/library/
mac/#documentation/Darwin/Reference/
ManPages/man2/mmap.2.html, 2011.
devices
or
[8] ARM Limited. Procedure Call Standard for the ARM Ar-
chitecture. http://infocenter.arm.com/help/
topic/com.arm.doc.ihi0042d/IHI0042D_
aapcs.pdf, 2009.
[9] blexim. Basic Integer Overﬂows. Phrack Magazine, 60(10),
2002.
[10] E. Buchanan, R. Roemer, H. Shacham, and S. Savage. When
Good Instructions Go Bad: Generalizing Return-Oriented
Programming to RISC. In ACM Conference on Computer
and Communications Security (CCS), 2008.
[11] S. Checkoway, L. Davi, A. Dmitrienko, A.-R. Sadeghi,
H. Shacham, and M. Winandy. Return-oriented Program-
In ACM Conference on Computer
ming Without Returns.
and Communications Security (CCS), 2010.
[12] T. Chiueh and F.-H. Hsu. RAD: A Compile-Time Solution
to Buffer Overﬂow Attacks. In International Conference on
Distributed Computing Systems (ICDCS), 2001.
[13] comex. http://www.jailbreakme.com//#.
[14] C. Cowan, S. Beattie,
and P. Wagle.
PointguardTM: Protecting Pointers From Buffer Overﬂow
Vulnerabilities. In USENIX Security Symposium, 2003.
Johansen,
J.
[15] C. Cowan, C. Pu, D. Maier, H. Hintony, J. Walpole,
P. Bakke, S. Beattie, A. Grier, P. Wagle, and Q. Zhang.
StackGuard: Automatic Adaptive Detection and Prevention
In USENIX Security Sympo-
of Buffer-Overﬂow Attacks.
sium, 1998.
[16] L. Davi, A.-R. Sadeghi, and M. Winandy. ROPdefender:
A Detection Tool to Defend Against Return-Oriented Pro-
In ACM Symposium on Information,
gramming Attacks.
Computer and Communications Security (ASIACCS), 2011.
[17] J. Duart. Objective-C helper script. https://github.
com/zynamics/objc-helper-plugin-ida, 2010.
[18] A. Edwards, A. Srivastava, and H. Vo. Vulcan Binary Trans-
formation in a Distributed Environment. Technical Report
MSR-TR-2001-50, Microsoft Research, 2001.
[19] M. Egele, C. Kruegel, E. Kirda, and G. Vigna. PiOS: De-
tecting Privacy Leaks in iOS Applications. In Symposium on
Network and Distributed System Security (NDSS), 2011.
[20] A. Francillon and C. Castelluccia. Code Injection Attacks
In ACM Conference on
on Harvard-Architecture Devices.
Computer and Communications Security (CCS), 2008.
[21] M. Frantzen and M. Shuey. StackGhost: Hardware Facil-
In USENIX Security Symposium,
itated Stack Protection.
2001.
[22] G. Fresi Roglia, L. Martignoni, R. Paleari, and D. Bruschi.
Surgically Returning to Randomized lib(c). In Annual Com-
puter Security Applications Conference (ACSAC), 2009.
[23] gera. Advances in Format String Exploitation. Phrack Mag-
azine, 59(12), 2002.
[24] R. Hund, T. Holz, and F. C. Freiling. Return-Oriented
Rootkits: Bypassing Kernel Code Integrity Protection
Mechanisms. In USENIX Security Symposium, 2009.
[25] V. Iozzo and C. Miller. Fun and Games with Mac OS X and
[26] V.
iPhone Payloads. In Black Hat Europe, 2009.
Iozzo and R.-P. Weinmann.
PWN2OWN con-
test. http://blog.zynamics.com/2010/03/24/
ralf-philipp-weinmann-vincenzo-iozzo-own
-the-iphone-at-pwn2own/, 2010.
[27] M. Keith.
Android 2.0-2.1 Reverse Shell Exploit,
2010. http://www.exploit-db.com/exploits/
15423/.
[28] I. King.
Intel ﬁnally crack smartphones?
Will
http://www.businessweek.com/magazine/
content/11_25/b4233041946230.htm, 2011.
[29] V. Kiriansky, D. Bruening, and S. P. Amarasinghe. Secure
Execution via Program Shepherding. In USENIX Security
Symposium, 2002.
[30] T. Kornau. Return Oriented Programming for the ARM Ar-
chitecture. Master’s thesis, Ruhr-University Bochum, 2009.
http:
The /SAFESEH compiler ﬂag.
[31] Microsoft.
//msdn.microsoft.com/en-us/library/
9a89h429%28v=vs.80%29.aspx, 2011.
[32] C. Miller and D. D. Zovi. The Mac Hacker’s Handbook.
Wiley Publishing, 2009.
[33] C. Mulliner and C. Miller.
Injecting SMS Messages Into
Smart Phones for Security Analysis. In USENIX Workshop
on Offensive Technologies (WOOT), 2009.
[34] Nergal. The Advanced return-into-lib(c) Exploits: PaX Case
Study. Phrack Magazine, 58(4), 2001.
[35] B. Prince.
Security Expert Evades Apple’s Mobile Se-
http://s1.
curity Measures via iOS Vulnerability.
securityweek.com/apple-security-
expert-evades-apples-mobile-security-
measures-ios-vulnerability, 2011.
[36] D. Sehr, R. Muth, C. Bifﬂe, V. Khimenko, E. Pasko,
K. Schimpf, B. Yee, and B. Chen. Adapting Software Fault
Isolation to Contemporary CPU Architectures. In USENIX
Security Symposium, 2010.
[37] H. Shacham. The Geometry of Innocent Flesh on the Bone:
Return-into-libc Without Function Calls (on the x86).
In
ACM Conference on Computer and Communications Secu-
rity (CCS), 2007.
[38] H. Shacham, E. jin Goh, N. Modadugu, B. Pfaff, and
D. Boneh. On the Effectiveness of Address-space Random-
ization. In ACM Conference on Computer and Communica-
tions Security (CCS), 2004.
[39] Solar Designer. ”return-to-libc” attack. Bugtraq, 1997.
[40] A. Sotirov and M. Dowd. Bypassing Browser Memory Pro-
tections in Windows Vista - Setting back browser security by
10 years. http://www.phreedom.org/research/
bypassing-browser-memory-protections/,
2008.
[41] R. Wahbe, S. Lucco, T. E. Anderson, and S. L. Graham.
Efﬁcient Software-based Fault Isolation. ACM SIGOPS Op-
erating Systems Review, 27(5), 1993.
[42] Z. Wang and X. Jiang. HyperSafe: A Lightweight Approach
to Provide Lifetime Hypervisor Control-Flow Integrity. In
IEEE Symposium on Security and Privacy, 2010.
[43] R.-P. Weinmann. All Your Baseband Are Belong To Us.
hack.lu, 2010. http://2010.hack.lu/archive/
2010/Weinmann-All-Your-Baseband-Are
-Belong-To-Us-slides.pdf.
[44] S. Winwood and M. Chakravarty. Secure Untrusted Bina-
In 3rd international workshop on formal
ries – Provably!
aspects in security and trust, 2006.
[45] R. Wojtczuk. Defeating Solar Designer’s Non-executable
http://insecure.org/sploits/
Stack Patch.
non-executable.stack.problems.html, 1998.
[46] B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth, T. Or-
mandy, S. Okasaka, N. Narula, and N. Fullagar. Native
Client: A Sandbox for Portable, Untrusted x86 Native Code.
IEEE Symposium on Security and Privacy, 2009.
[47] B. Zeng, G. Tan, and G. Morrisett. Combining control-ﬂow
integrity and static analysis for efﬁcient and validated data
sandboxing. In ACM Conference on Computer and Commu-
nications Security (CCS). ACM, 2011.
[48] D. D. Zovi. Apple iOS Security Evaluation: Vulnerability
Analysis and Data Encryption. In Black Hat USA, 2011.
APPENDIX
In the following, we describe the implementation of our
trampolines, and present a return-oriented programming
payload that ASLR on iOS.
A. Trampoline Implementation
Listing 2 and 3 show the implementation of our ARM
and THUMB trampoline for all indirect branches (i.e., in-
direct calls / jumps, and returns). In contrast to the ARM
trampoline, the instruction which precedes the (replaced)
indirect branch is placed on the top of the THUMB trampo-
line. The subsequent instructions save the registers on the
stack, load the pointer to the patch structure into r1, and
the pointer to the speciﬁc validation routine in r2. Further-
more, sp is loaded into r0 so that the invoked validation
routine can access the register set of the current execution
state. Afterwards, the BLX instruction is used to invoke the
validation routine. Upon function return, all registers are
reset to their original state. Finally, the original branch in-
struction is executed. Note that we avoid setting lr for
indirect calls3 by transforming it to an indirect BX jump.
Otherwise, the called function would return to our trampo-
line, and not to the original caller.
c h a r customThumbTrampoline [ ] = {
/ / p r e v .
i n s t r u c t i o n
/ / push .w { r0−r12 , l r }
/ / mov r0 , sp
/ /
l d r .w r1 , [ pc , 1 2 ]
/ /
l d r .w r2 , [ pc , 1 2 ]
/ / b l x r 2
/ / pop .w { r0−r12 , l r }
/ / o r i g .
i n s t r u c t i o n
/ / ∗ p a t c h s t r u c t u r e
/ / ∗ v a l i d a t i o n r o u t i n e
0x00 , 0 xbf , 0 x00 , 0 xbf ,
0x2d , 0 xe9 , 0 x f f , 0 x5f ,
0x68 , 0 x46 ,
0x03 , 0 x49 ,
0x03 , 0 x4a ,
0x90 , 0 x47 ,
0xbd , 0 xe8 , 0 x f f , 0 x5f ,
0x00 , 0 x00 , 0 x00 , 0 x00 ,
0x00 , 0 x00 , 0 x00 , 0 x00 ,
0x00 , 0 x00 , 0 x00 , 0 x00
} ;
Listing 2. THUMB Trampoline
ul ong customARMTrampoline [ ] = {
0 x e 9 2 d 5 f f f ,
0 xe1a0000d ,
0 xe59f1010 ,
0 xe59f2010 ,
0 x e 1 2 f f f 3 2 ,
0 xe50d0004 ,
0 x e 8 b d 5 f f f ,
0 x00000000 ,
0 x00000000 ,
0 x00000000 ,
l d r
l d r
s tmf d sp ! ,{ r0−r12 , l r }
r1 , [ pc , 1 6 ]
r2 , [ pc , 1 6 ]
r0 , [ sp ,−4]
/ /
/ / mov r0 , sp
/ /
/ /
/ / b l x r 2
/ /
/ /
i n s t r u c t i o n
/ / o r i g .
/ / ∗ p a t c h s t r u c t u r e
/ / ∗ v a l i d a t i o n r o u t i n e
s t r
ldmfd sp ! ,{ r0−r12 , l r }
} ;
Listing 3. ARM Trampoline
Our generic trampolines for direct calls are implemented
in ARM (see Listing 4 and 5). Note that this does not raise
an interworking problem since direct calls are overwritten
with a BLX instruction.
l o n g E x t e r n a l C a l l T r a m p o l i n e [ ] = {
0 x e 9 2 d 5 f f f ,
0 xe1a0000d ,
0 xe59f1028 ,
0 x e 1 2 f f f 3 1 ,
0 xe50d0004 ,
0 x e 8 b d 5 f f f ,
0 xe1a0e00f ,
0 xe51df03c ,
0 xe92d000f ,
0 xe59f1010 ,
0 x e 1 2 f f f 3 1 ,
0 xe1a0e000 ,
0 xe8bd000f ,
0 x e 1 2 f f f 1 e ,
0 x00000000 ,
0 x00000000 ,
l d r
s tmf d sp ! ,{ r0−r12 , l r }
r1 , [ pc , # 4 0 ]
r0 , [ sp ,#−4]
/ /
/ / mov r0 , sp
/ /