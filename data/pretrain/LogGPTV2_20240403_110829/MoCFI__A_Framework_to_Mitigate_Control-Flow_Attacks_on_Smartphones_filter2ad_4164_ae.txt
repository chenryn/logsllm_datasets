### References

1. **Flow Integrity: Principles, Implementations, and Applications.** In *ACM Conference on Computer and Communications Security (CCS)*, 2005.

2. **M. Abadi, M. Budiu, U. Erlingsson, G. C. Necula, and M. Vrable.** *XFI: Software Guards for System Address Spaces.* In *USENIX Symposium on Operating Systems Design and Implementation (OSDI)*, 2006.

3. **P. Akritidis, C. Cadar, C. Raiciu, M. Costa, and M. Castro.** *Preventing Memory Error Exploits with WIT.* In *IEEE Symposium on Security and Privacy*, 2008.

4. **Aleph One.** *Smashing the Stack for Fun and Profit.* *Phrack Magazine*, 49(14), 1996.

5. **Anonymous.** *Once upon a free().* *Phrack Magazine*, 57(9), 2001.

6. **Apple Inc.** *Manual Page of dyld - the dynamic link editor.* [Online]. Available: http://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man1/dyld.1.html, 2011.

7. **Apple Inc.** *Manual Page of mmap - allocate into memory or map files, devices, or other objects into memory.* [Online]. Available: http://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man2/mmap.2.html, 2011.

8. **ARM Limited.** *Procedure Call Standard for the ARM Architecture.* [Online]. Available: http://infocenter.arm.com/help/topic/com.arm.doc.ihi0042d/IHI0042D_aapcs.pdf, 2009.

9. **blexim.** *Basic Integer Overflows.* *Phrack Magazine*, 60(10), 2002.

10. **E. Buchanan, R. Roemer, H. Shacham, and S. Savage.** *When Good Instructions Go Bad: Generalizing Return-Oriented Programming to RISC.* In *ACM Conference on Computer and Communications Security (CCS)*, 2008.

11. **S. Checkoway, L. Davi, A. Dmitrienko, A.-R. Sadeghi, H. Shacham, and M. Winandy.** *Return-oriented Programming Without Returns.* In *ACM Conference on Computer and Communications Security (CCS)*, 2010.

12. **T. Chiueh and F.-H. Hsu.** *RAD: A Compile-Time Solution to Buffer Overflow Attacks.* In *International Conference on Distributed Computing Systems (ICDCS)*, 2001.

13. **comex.** [Online]. Available: http://www.jailbreakme.com//#.

14. **C. Cowan, S. Beattie, J. Johansen, and P. Wagle.** *PointguardTM: Protecting Pointers From Buffer Overflow Vulnerabilities.* In *USENIX Security Symposium*, 2003.

15. **C. Cowan, C. Pu, D. Maier, H. Hintony, J. Walpole, P. Bakke, S. Beattie, A. Grier, P. Wagle, and Q. Zhang.** *StackGuard: Automatic Adaptive Detection and Prevention of Buffer-Overflow Attacks.* In *USENIX Security Symposium*, 1998.

16. **L. Davi, A.-R. Sadeghi, and M. Winandy.** *ROPdefender: A Detection Tool to Defend Against Return-Oriented Programming Attacks.* In *ACM Symposium on Information, Computer and Communications Security (ASIACCS)*, 2011.

17. **J. Duart.** *Objective-C helper script.* [Online]. Available: https://github.com/zynamics/objc-helper-plugin-ida, 2010.

18. **A. Edwards, A. Srivastava, and H. Vo.** *Vulcan Binary Transformation in a Distributed Environment.* Technical Report MSR-TR-2001-50, Microsoft Research, 2001.

19. **M. Egele, C. Kruegel, E. Kirda, and G. Vigna.** *PiOS: Detecting Privacy Leaks in iOS Applications.* In *Symposium on Network and Distributed System Security (NDSS)*, 2011.

20. **A. Francillon and C. Castelluccia.** *Code Injection Attacks on Harvard-Architecture Devices.* In *ACM Conference on Computer and Communications Security (CCS)*, 2008.

21. **M. Frantzen and M. Shuey.** *StackGhost: Hardware Facilitated Stack Protection.* In *USENIX Security Symposium*, 2001.

22. **G. Fresi Roglia, L. Martignoni, R. Paleari, and D. Bruschi.** *Surgically Returning to Randomized lib(c).* In *Annual Computer Security Applications Conference (ACSAC)*, 2009.

23. **gera.** *Advances in Format String Exploitation.* *Phrack Magazine*, 59(12), 2002.

24. **R. Hund, T. Holz, and F. C. Freiling.** *Return-Oriented Rootkits: Bypassing Kernel Code Integrity Protection Mechanisms.* In *USENIX Security Symposium*, 2009.

25. **V. Iozzo and C. Miller.** *Fun and Games with Mac OS X and iPhone Payloads.* In *Black Hat Europe*, 2009.

26. **V. Iozzo and R.-P. Weinmann.** *PWN2OWN contest.* [Online]. Available: http://blog.zynamics.com/2010/03/24/ralf-philipp-weinmann-vincenzo-iozzo-own-the-iphone-at-pwn2own/, 2010.

27. **M. Keith.** *Android 2.0-2.1 Reverse Shell Exploit, 2010.* [Online]. Available: http://www.exploit-db.com/exploits/15423/.

28. **I. King.** *Will Intel Finally Crack Smartphones?* [Online]. Available: http://www.businessweek.com/magazine/content/11_25/b4233041946230.htm, 2011.

29. **V. Kiriansky, D. Bruening, and S. P. Amarasinghe.** *Secure Execution via Program Shepherding.* In *USENIX Security Symposium*, 2002.

30. **T. Kornau.** *Return Oriented Programming for the ARM Architecture.* Master’s thesis, Ruhr-University Bochum, 2009. [Online]. Available: http://www.ruhr-uni-bochum.de/mediadb/kornau_timo.pdf.

31. **Microsoft.** *The /SAFESEH compiler flag.* [Online]. Available: http://msdn.microsoft.com/en-us/library/9a89h429%28v=vs.80%29.aspx, 2011.

32. **C. Miller and D. D. Zovi.** *The Mac Hacker’s Handbook.* Wiley Publishing, 2009.

33. **C. Mulliner and C. Miller.** *Injecting SMS Messages Into Smart Phones for Security Analysis.* In *USENIX Workshop on Offensive Technologies (WOOT)*, 2009.

34. **Nergal.** *The Advanced return-into-lib(c) Exploits: PaX Case Study.* *Phrack Magazine*, 58(4), 2001.

35. **B. Prince.** *Security Expert Evades Apple’s Mobile Security Measures via iOS Vulnerability.* [Online]. Available: http://s1.securityweek.com/apple-security-expert-evades-apples-mobile-security-measures-ios-vulnerability, 2011.

36. **D. Sehr, R. Muth, C. Biffl, V. Khimenko, E. Pasko, K. Schimpf, B. Yee, and B. Chen.** *Adapting Software Fault Isolation to Contemporary CPU Architectures.* In *USENIX Security Symposium*, 2010.

37. **H. Shacham.** *The Geometry of Innocent Flesh on the Bone: Return-into-libc Without Function Calls (on the x86).* In *ACM Conference on Computer and Communications Security (CCS)*, 2007.

38. **H. Shacham, E. Jin Goh, N. Modadugu, B. Pfaff, and D. Boneh.** *On the Effectiveness of Address-space Randomization.* In *ACM Conference on Computer and Communications Security (CCS)*, 2004.

39. **Solar Designer.** *"return-to-libc" attack.* *Bugtraq*, 1997.

40. **A. Sotirov and M. Dowd.** *Bypassing Browser Memory Protections in Windows Vista - Setting back browser security by 10 years.* [Online]. Available: http://www.phreedom.org/research/bypassing-browser-memory-protections/, 2008.

41. **R. Wahbe, S. Lucco, T. E. Anderson, and S. L. Graham.** *Efficient Software-based Fault Isolation.* *ACM SIGOPS Operating Systems Review*, 27(5), 1993.

42. **Z. Wang and X. Jiang.** *HyperSafe: A Lightweight Approach to Provide Lifetime Hypervisor Control-Flow Integrity.* In *IEEE Symposium on Security and Privacy*, 2010.

43. **R.-P. Weinmann.** *All Your Baseband Are Belong To Us.* *hack.lu*, 2010. [Online]. Available: http://2010.hack.lu/archive/2010/Weinmann-All-Your-Baseband-Are-Belong-To-Us-slides.pdf.

44. **S. Winwood and M. Chakravarty.** *Secure Untrusted Binaries – Provably!* In *3rd International Workshop on Formal Aspects in Security and Trust*, 2006.

45. **R. Wojtczuk.** *Defeating Solar Designer’s Non-executable Stack Patch.* [Online]. Available: http://insecure.org/sploits/non-executable.stack.problems.html, 1998.

46. **B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth, T. Ormandy, S. Okasaka, N. Narula, and N. Fullagar.** *Native Client: A Sandbox for Portable, Untrusted x86 Native Code.* In *IEEE Symposium on Security and Privacy*, 2009.

47. **B. Zeng, G. Tan, and G. Morrisett.** *Combining Control-Flow Integrity and Static Analysis for Efficient and Validated Data Sandboxing.* In *ACM Conference on Computer and Communications Security (CCS)*. ACM, 2011.

48. **D. D. Zovi.** *Apple iOS Security Evaluation: Vulnerability Analysis and Data Encryption.* In *Black Hat USA*, 2011.

### Appendix

#### A. Trampoline Implementation

Listings 2 and 3 show the implementation of our ARM and THUMB trampolines for all indirect branches (i.e., indirect calls, jumps, and returns). In contrast to the ARM trampoline, the instruction preceding the replaced indirect branch is placed at the top of the THUMB trampoline. The subsequent instructions save the registers on the stack, load the pointer to the patch structure into `r1`, and the pointer to the specific validation routine into `r2`. Additionally, `sp` is loaded into `r0` so that the invoked validation routine can access the register set of the current execution state. The `BLX` instruction is then used to invoke the validation routine. Upon function return, all registers are reset to their original state, and the original branch instruction is executed. Note that we avoid setting `lr` for indirect calls by transforming it into an indirect `BX` jump. Otherwise, the called function would return to our trampoline, not to the original caller.

```c
char customThumbTrampoline[] = {
    // prev. instruction
    // push {r0-r12, lr}
    // mov r0, sp
    // ldr r1, [pc, #12]
    // ldr r2, [pc, #12]
    // blx r2
    // pop {r0-r12, lr}
    // orig. instruction
    // * patch structure
    // * validation routine
    0x00, 0xbf, 0x00, 0xbf,
    0x2d, 0xe9, 0xff, 0x5f,
    0x68, 0x46, 0x03, 0x49,
    0x03, 0x4a, 0x90, 0x47,
    0xbd, 0xe8, 0xff, 0x5f,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00
};
```

**Listing 2. THUMB Trampoline**

```c
unsigned long customARMTrampoline[] = {
    0xe92d5fff, // stmfd sp!, {r0-r12, lr}
    0xe1a0000d, // mov r0, sp
    0xe59f1010, // ldr r1, [pc, #16]
    0xe59f2010, // ldr r2, [pc, #16]
    0xe12fff32, // blx r2
    0xe50d0004, // ldmfd sp!, {r0-r12, lr}
    0xe8bd5fff, // pop {r0-r12, lr}
    0x00000000, // orig. instruction
    0x00000000, // * patch structure
    0x00000000  // * validation routine
};
```

**Listing 3. ARM Trampoline**

Our generic trampolines for direct calls are implemented in ARM (see Listings 4 and 5). Note that this does not raise an interworking problem since direct calls are overwritten with a `BLX` instruction.

```c
long ExternalCallTrampoline[] = {
    0xe92d5fff, // stmfd sp!, {r0-r12, lr}
    0xe1a0000d, // mov r0, sp
    0xe59f1028, // ldr r1, [pc, #40]
    0xe12fff31, // blx r2
    0xe50d0004, // ldmfd sp!, {r0-r12, lr}
    0xe8bd5fff, // pop {r0-r12, lr}
    0xe1a0e00f, // mov lr, pc
    0xe51df03c, // ldr r1, [pc, #60]
    0xe92d000f, // stmfd sp!, {r0, lr}
    0xe59f1010, // ldr r1, [pc, #16]
    0xe12fff31, // blx r2
    0xe1a0e000, // mov lr, r0
    0xe8bd000f, // ldmfd sp!, {r0, lr}
    0xe12fff1e, // bx lr
    0x00000000, // orig. instruction
    0x00000000, // * patch structure
    0x00000000  // * validation routine
};
```

**Listing 4. ARM Direct Call Trampoline**

```c
// Additional code for Listing 5 if needed
```

**Listing 5. ARM Direct Call Trampoline (continued)**