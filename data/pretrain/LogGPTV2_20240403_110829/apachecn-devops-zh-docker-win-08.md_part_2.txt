我为一个简单的示例数据库这样做了，将模式和数据导出到一个名为`init-db.sql`的文件中。`dockeronwindows/ch08-mssql-with-schema:2e`的 Dockerfile 采用了 SQL 脚本，并将其打包成一个新的映像，带有一个引导 PowerShell 脚本，在您创建容器时部署数据库:
```
# escape=`
FROM dockeronwindows/ch03-sql-server:2e
SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop';"]
ENV sa_password DockerOnW!nd0ws
VOLUME C:\mssql
WORKDIR C:\init
COPY . .
CMD ./InitializeDatabase.ps1 -sa_password $env:sa_password -Verbose
HEALTHCHECK CMD powershell -command `
 try { `
  $result = invoke-sqlcmd -Query 'SELECT TOP 1 1 FROM Authors' -Database DockerOnWindows; `
  if ($result[0] -eq 1) {return 0} `
  else {return 1}; `
} catch { return 1 }
```
There's a `HEALTHCHECK` in the SQL Server image here, which is good practice—it lets Docker check whether the database is running correctly. In this case, the test will fail if the schema has not been created, so the container won't report as healthy until the schema deployment has completed successfully.
我可以用通常的方法从这个映像运行一个容器:
```
docker container run -d -p 1433 --name db dockeronwindows/ch08-mssql-with-schema:2e
```
通过发布端口`1433`，数据库容器在主机上的一个随机端口上可用，所以我用一个 SQL 客户端连接到数据库，并从脚本中看到模式和数据:
![](img/86e5cff3-5407-4e0f-a8f1-ae1bd82b2e7b.png)
这代表了一个应用数据库的全新部署，在这种情况下，我使用了 SQL Server 的开发版来计算我的模式，但是 SQL Server Express 用于实际的数据库，所有这些都在 Docker 中运行，没有本地的 SQL Server 实例。
如果您认为使用 SQL Server 认证是一种倒退，那么您需要记住 Docker 支持不同的运行时模型。您不会有一个运行多个数据库的 SQL Server 实例；如果凭据被泄露，他们都可能成为目标。每个 SQL 工作负载都在一个专用的容器中，有自己的一组凭据，因此每个数据库实际上有一个 SQL 实例，每个服务可能有一个数据库。
在 Docker 中运行可以提高安全性。除非需要远程连接到 SQL Server，否则不需要从 SQL 容器发布端口。任何需要数据库访问的应用都将作为容器在与 SQL 容器相同的 Docker 网络中运行，并且能够访问端口`1433`，而无需将其发布到主机。这意味着 SQL 只能由运行在同一个 Docker 网络中的其他容器访问，在生产中，您可以使用 Docker 机密来获取连接细节。
If you need to use Windows authentication with an AD account, you can still do that in Docker. Containers can be domain-joined when they start, so you can use service accounts for SQL Server instead of SQL Server authentication.
# 事件日志
您可以将本地计算机上的事件查看器连接到远程服务器，但是当前在 Windows Server Core 或 Nano Server 映像上没有启用远程事件日志服务。这意味着您不能使用事件查看器用户界面连接到容器并读取事件日志条目，但是您可以使用服务器管理器用户界面来做到这一点，我将在下一节介绍这一点。
如果您只想读取事件日志，可以针对正在运行的容器执行 PowerShell cmdlets 来获取日志条目。此命令从我的数据库容器中读取 SQL Server 应用的两个最新事件日志条目:
```
> docker exec db powershell `
 "Get-EventLog -LogName Application -Source MSSQL* -Newest 2 | Format-Table TimeWritten,Message"
TimeWritten          Message
-----------          -------
6/27/2017 5:14:49 PM Setting database option READ_WRITE to ON for database '...
6/27/2017 5:14:49 PM Setting database option query_store to off for database...
```
如果您无法通过其他方式诊断容器的问题，读取事件日志会很有用。但这种方法在运行几十或几百个容器时无法扩展。最好将感兴趣的事件日志中继到控制台，这样它们就被 Docker 平台收集了，你可以用`docker container logs`或者可以访问 Docker API 的管理工具来读取它们。
转发事件日志很简单，采用类似于[第 3 章](03.html)*中转发 IIS 日志的方法.NET 框架和。网络核心应用*。对于任何写入事件日志的应用，您可以使用启动脚本作为入口点，该脚本运行应用，然后进入读取循环——从事件日志中获取条目，并将其写入控制台。
这对于作为 Windows 服务运行的应用来说是一种有用的方法，微软已经在 SQL Server Windows 映像中使用了这种方法。Dockerfile 使用一个 PowerShell 脚本作为`CMD`，该脚本以一个循环结束，该循环调用相同的`Get-EventLog` cmdlet 将日志中继到控制台:
```
$lastCheck = (Get-Date).AddSeconds(-2) 
while ($true) { 
 Get-EventLog -LogName Application -Source "MSSQL*" -After $lastCheck | `
 Select-Object TimeGenerated, EntryType, Message 
 $lastCheck = Get-Date 
 Start-Sleep -Seconds 2 
}
```
该脚本每 2 秒读取一次事件日志，获取自上次读取以来的所有条目，并将它们写入控制台。该脚本在 Docker 启动的进程中运行，因此日志条目被捕获并可以由 Docker API 显示。
这不是一个完美的方法——它使用定时循环，只从日志中选择一些数据，这意味着将数据存储在容器的事件日志和 Docker 中。如果您的应用已经写入事件日志，并且您希望在不重建应用的情况下对其进行归档，则该选项有效。在这种情况下，您需要确保您有一个机制来保持您的应用进程运行，例如窗口服务，以及 Dockerfile 中的运行状况检查，因为 Docker 只监控事件日志循环。
# 服务器管理器
服务器管理器是一个很好的远程管理和监控服务器的工具，它可以很好地处理基于 Windows Server Core 的容器。您需要对 IIS 管理控制台采取类似的方法，在容器中配置具有管理员访问权限的用户，然后从主机进行连接。
就像使用 IIS 一样，您可以向映像添加一个脚本，这样就可以进行访问，以便在需要时运行它。这比总是在映像中启用远程访问更安全。脚本只需要添加一个用户，配置服务器允许管理员账户远程访问，并确保 **Windows 远程管理** ( **WinRM** )服务正在运行:
```
net user serveradmin "s3rv3radmin*" /add
net localgroup "Administrators" "serveradmin" /add
New-ItemProperty -Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System `
 -Name LocalAccountTokenFilterPolicy -Type DWord -Value 1
Start-Service winrm
```
我有一个展示这种方法的示例映像`dockeronwindows/ch08-iis-with-server-manager:2e`。它基于 IIS，并打包一个脚本，以便能够使用服务器管理器进行远程访问。Dockerfile 还公开了 WinRM、`5985`和`5986`使用的端口。我可以在后台启动运行 IIS 的容器，然后启用远程访问:
```
> > docker container run -d -P --name iis2 dockeronwindows/ch08-iis-with-server-manager:2e
9c097d80c08b5fc55cfa27e40121d240090a1179f67dbdde653c1f93d3918370
PS> docker exec iis2 powershell .\EnableRemoteServerManagement.ps1
The command completed successfully.
... 
```
您可以使用服务器管理器连接到容器，使用容器的 IP 地址，但是容器没有加入域。服务器管理器将尝试通过安全通道进行认证，但失败了，因此您将得到一个 WinRM 认证错误。要添加未加入域的服务器，您需要将其添加为受信任的主机。可信主机列表需要使用容器的主机名，而不是 IP 地址，因此首先我将获取容器的主机名:
```
> docker exec iis2 hostname
9c097d80c08b
```
我将把它作为一个条目添加到我的服务器的`hosts`文件中，在`C:\Windows\system32\drivers\etc\hosts`处:
```
#ch08 