title:ATRA: Address Translation Redirection Attack against Hardware-based
External Monitors
author:DaeHee Jang and
Hojoon Lee and
Minsu Kim and
Daehyeok Kim and
Daegyeong Kim and
Brent ByungHoon Kang
ATRA: Address Translation Redirection Attack against
Hardware-based External Monitors
Daehee Jang1, Hojoon Lee1, Minsu Kim1, Daehyeok Kim2, Daegyeong Kim1,
Brent Byunghoon Kang1
1Graduate School of Information Security
2Cyber Security Research Center
{daehee87, hjlee228, pshskms, dhkim7, daegyeong.kim, brentkang}@kaist.ac.kr
KAIST, Daejeon, Korea
ABSTRACT
Hardware-based external monitors have been proposed as a
trustworthy method for protecting the kernel integrity. We
introduce the design and implementation of Address Trans-
lation Redirection Attack (ATRA) that enables complete
evasion of the hardware-based external monitor that an-
chors its trust on a separate processor. ATRA circumvents
the external monitor by redirecting the memory access to
critical kernel objects into a non-monitored region. Despite
the seriousness of the ATRA issue, the address translation
integrity has been assumed in many hardware-based exter-
nal monitors and the possibility of its exploitation has been
suggested yet many considered hypothetical. We explore the
intricate details of ATRA, explain major challenges in real-
izing ATRA in practice, and address them with two types
of ATRA called Memory-bound ATRA and Register-bound
ATRA. Our evaluations with benchmarks show that ATRA
does not introduce a noticeable performance degradation to
the host system, proving practical applicability of the at-
tack to alert the researchers to seriously address ATRA in
designing future external monitors.
1.
INTRODUCTION
Kernel rootkit is a severe security threat to a system,
since they are capable of subverting the operating system
itself, compromising kernel objects, hijacking the kernel
control ﬂow by overwriting function pointers, and remain-
ing undetectable from in-host security measures. Prior re-
search eﬀorts to mitigate this can be classiﬁed into two cat-
egories based on their root-of-trust: hypervisor-based ap-
proaches [1–6] and hardware-based approaches [7–11]. How-
ever, hypervisor-based approaches are known to have a lim-
itation; since hypervisors are also a software layer, they can
be exposed to software vulnerabilities. Recently, a num-
ber of vulnerability in commodity hypervisors have been re-
ported [12–16]. Also, the monitors impose a burden on top
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage, and that copies bear this notice and the full ci-
tation on the ﬁrst page. Copyrights for third-party components of this work must be
honored. For all other uses, contact the owner/author(s). Copyright is held by the
author/owner(s).
CCS’14, November 3–7, 2014, Scottsdale, Arizona, USA.
ACM 978-1-4503-2957-6/14/11.
http://dx.doi.org/10.1145/2660267.2660303 .
of the overhead of the virtualization itself, as they lever-
age the virtualization functionalities to acquire monitoring
capabilities.
Alternatively, a few hardware-based external monitors
such as [7–11] have recently been introduced. In these ap-
proaches, the kernel integrity monitor runs on an indepen-
dent processor, which is external to the processor that the
monitored host runs on. This architectural isolation guar-
antees that any potential compromise on the monitored host
would not aﬀect the trustworthiness of the execution envi-
ronment for the monitor. Since the monitor does not share
its processor with the host, the monitor code can run as
often as needed, not taking up CPU cycles from the host.
Note that the Intel SMM (Systems Management Mode)
or ARM TrustZone can also provide a trustworthy execution
environment for the monitor code. However, such hardware-
assisted approach shares the same processor with the moni-
tored host, which would entail a context-switching overhead
for mode transition, and the monitor code runs by taking
up CPU cycles on the host processor. The normal opera-
tions on the host must wait until the monitor code yields
the shared processor.
Thus, as shown in recent burgeoning works [8–11], the
hardware-based external monitors are considered as eﬃcient
kernel integrity monitors. However, the current hardware-
based external monitor that runs on an independent proces-
sor is architected not to access the CPU states of the host’s
processor, which allows the adversary to completely evade
the monitoring. Their monitoring schemes are based on the
assumption that the virtual to physical memory mappings
of their targets of monitoring are intact throughout the host
system operation. This assumption exposes monitors to the
critical security threat that allows kernel rootkits to compro-
mise paging data structures and relocate important kernel
objects without incurring visible eﬀects on the virtual mem-
ory address space of the host.
Although hardware-based external monitors can try to de-
fend this attack by additionally observing such data struc-
tures in the physical memory, the attacker can still bypass
this additional eﬀort because hardware-based external mon-
itors cannot observe the CPU states of the host such as con-
trol registers. Despite the gravity of this problem, a number
of studies on external processor-based approaches which do
face this threat either underrated this limitation as hypo-
thetical [8, 11] or seemed not aware of it [9, 10].
In this paper, we present Address Translation Redirection
Attack (ATRA) which can entirely subvert the eﬀectiveness
of existing hardware-based external monitors. Speciﬁcally,
by presenting the design and implementation of ATRA, we
show that it is a practically feasible attack. In order to en-
able ATRA in practice, we found a few challenges including
the following:
• The attack should successfully circumvent hardware-
based external monitors while it manipulates the ad-
dress translation in the target system. By monitoring
additional known memory regions that contain the ker-
nel data structures needed for the address translation,
external monitors can be enhanced to detect ATRA that
touches monitored memory regions.
• The attack should not introduce a noticeable perfor-
mance degradation. Since ATRA modiﬁes some of the
core system functionalities such as the interrupt han-
dling, ATRA could induce a system-wide performance
degradation. Considering that one of the main purpose
of rootkit is to hide the existence from the system ad-
ministrator, a noticeable performance degradation is a
critical issue for the attacker.
We propose two types of ATRA: (i) Memory-bound
ATRA, (ii) Register-bound ATRA to address these chal-
lenges. Memory-bound ATRA relocates important kernel
objects and makes the entire system refer to the copy by at-
tacking the page table data structures of the OS kernel. In
addition, Register-bound ATRA manipulates the page table
related CPU states of the system. In Register-bound ATRA,
we devised a technique called Inter-Context Register Modi-
ﬁcation where a victim process is caused to update its own
CPU state with an attacker’s modiﬁed value either through
reloading the previously saved context or through execut-
ing the attack code that modiﬁes a register. As a consis-
tent entry point for persisting the ATRA eﬀect, we also en-
gage a few CPU registers that do not change across context-
switching between processes. We show that Register-bound
ATRA can completely circumvent the existing hardware-
based external monitors due to their limitations. We also
reported that they cannot reliably detect Memory-bound
ATRA due to the race condition for protecting dynamically
allocated kernel objects including page tables and to the
complexity of observing all possible attack vectors that are
available throughout the multiple steps involving address
translation for every pointer traversal and memory access.
Our contributions are summarized as below.
Despite the seriousness of the ATRA issue, previous de-
scriptions of the related concepts were a few sentences [2, 8–
11, 17–19]. To the best of our knowledge, this paper is the
ﬁrst work to explore the intricate details of ATRA and thor-
oughly describes the ATRA attack, which covertly controls
the virtual address translation mechanism by manipulating
CPU registers as well as page table related data structures,
and it also demonstrates that ATRA can make all the exist-
ing hardware-based external monitors ineﬀective.
We implement two ATRA-enabled kernel rootkit attacks
— system call table hooking attack and the LKM hiding at-
tack — without being detected by hardware-based external
monitors. Our performance evaluation with STREAM [20]
and UnixBench [21] show that ATRA does not induce a no-
ticeable performance degradation to the host system.
By showing the eﬀective and complete evading method
against existing hardware-based kernel integrity monitors,
we emphasize the importance of exploring more solid kernel
integrity monitoring schemes that are resilient to the ATRA-
based attacks, and hope that the researchers will pay more
serious attention to the ATRA threat, which have been often
ignored or considered as hypothetical.
2. BACKGROUND AND ATTACK MODEL
Before we explain the ATRA attack in detail, it is neces-
sary that the operating mechanism and the underlying as-
sumption of the existing hardware-based external monitors
are explained along with the attack model.
2.1 Attack Model
The objective of the adversary described in this paper
is to subvert the operating system under the presence of a
hardware-based external monitor. The attacker is assumed
to have obtained a root privilege of a victim system and tries
to deploy a rootkit which manipulates paging data struc-
tures to hijack the control, or hide itself from the entire sys-
tem and the hardware-based external monitor. The adver-
sary is assumed to have the capability to modify any kernel
object in memory. Note that the attacker is capable of mod-
ifying CPU register values whereas existing hardware based
external kernel integrity monitors are incapable of observing
any changes in such registers.
2.2 System Assumptions
We assume that a target system is protected by a
hardware-based external kernel integrity monitor that has
the capability of introspecting the target system’s physical
memory regions where kernel data structures are located.
It is important to note that the hardware-based external
monitor detects the existence of any write traﬃc or modi-
ﬁcation destined for the monitored memory region so that
it can protect any attempt to modify the important kernel
data structures stated above. If the regions to be monitored
are static (such as kernel codes and the system call table),
the address locations to be monitored can be set in advance.
However, for the dynamic kernel data structures, the ad-
dress locations to be monitored cannot be set in advance,
it must be determined after the dynamic memory object is
allocated.
ATRA is applicable to any multi-paging system, however,
for the brevity of ATRA discussion, we assume that the tar-
get system is based on the x86-32bit architecture with two-
level paging for its virtual memory management mechanism
and adopts Linux operating system.
In the x86 architec-
ture, the MMU performs address translation by referencing
the processor’s CR3 register and traverses in-memory data
structures such as the page tables. The CR3 is a base reg-
ister which contains the physical address of root page table
so called Page Global Directory (PGD). The MMU uses this
CR3 register to locate the physical address of the PGD and
traverses the page tables depending on the level of paging.
PGD holds 1024 entries that store the physical address of
page tables. These page tables, pointed by PGD entries, also
have 1024 entries of physical address of a page. Each page
table is referred to as PTE (Page Table Entries).1 MMU
obtains the physical address of the top-most entry in the
1In Linux kernel source code convention and its documen-
tations, PTE also signiﬁes a single entry in the page table.
For clarity of discussion in this paper, we use ‘PTE’ to refer
the page table, and ‘PTE entry’ for the entry.
PGD by referencing the CR3 register and begins page table
walking for the requested translation.
2.3 Operations of Existing Hardware-based
External Monitors
To the extent of our knowledge, the current hardware-
based external monitoring technology is limited to host
memory monitoring; they are not capable of monitoring
CPU states such as registers and ﬂags. Also, the seman-
tic gap between the host machine and external monitor in-
troduces a signiﬁcant challenge especially in locating the ob-
jects that need to be monitored in the host’s virtual memory.
These monitors focus on detecting kernel rootkits in a possi-
bly compromised kernel. However, they assume the integrity
of the kernel address translation [7–11] and this assumption
persists even in the recent works.
In case of Copilot [7], it relies on the addresses of kernel
symbols generated at compile time listed in the System.map
ﬁle. Also, it calculates the physical addresses of the mon-
itored regions by simply using the constant oﬀset between
the virtual addresses of the linear-mapped kernel region and
their corresponding physical addresses. That is, the physical
address of the kernel symbol in a linear-mapped region can
be calculated by subtracting the linear mapping oﬀset (i.e.,
0xC0000000 ). Vigilare [8] inherits this technique to deter-
mine the physical address of the monitored area that sup-
posedly contains the important static kernel code and data.
KI-Mon [9] and MGuard [10] also monitor kernel static re-
gion in a similar fashion.
Besides the page table integrity issues, the CPU registers
play a critical role in the virtual address translation of the
host. In fact, the registers serve as the root of page table
walking. CR3, for example, stores the physical address lo-
cation of the page directory for the process context that is
currently being executed by the CPU [22].
3. ADDRESS TRANSLATION
REDIRECTION ATTACK