Table 4. Transferred Trafﬁc vs. File Size
(Bytes)
We further examine the impact of the
memory size by instructing our testing de-
vices to access different video ﬁles with an
increasing ﬁle size. We use three different
YouTube videos. Videos are of different du-
rations but are encoded with the same data
rate. Table 4 shows the results we have ob-
tained. These results are the average results
over multiple experiments. This table shows
that devices with different physical memory
sizes have different trafﬁc efﬁciency. If we compare the results in a same row, we can
see that when the video ﬁle size becomes larger, the amount of redundant trafﬁc would
also increase. For example, from Table 4 we can see that the redundant trafﬁc for iPhone
4S is increased from 9% when accessing Video1 to more than 15% when accessing
Video2 and Video3.
Video3
657
29,503,221 38,517,389 53,405,910
42,379,164 57,176,659 90,445,044
42,322,498 74,442,375 86,933,886
37,702,143 47,460,396 72,388,936
32,248,384 44,538,836 61,731,408
Video1
360
Video2
480
Duration (sec)
File Size
iPod Touch
iPhone 3G
iPhone 3GS
iPhone 4S
3.2 Android and Stagefright
The study of iOS and AppleCoreMedia shows that the memory available to the playout
buffer of the mediaplayer is dynamically changing and it plays a critical role in the
entire streaming session. In this subsection, we examine if a different type of buffer
management method has been used in Android as Android devices have shown different
behaviors in accessing streaming media.
Starting from Android 2.3 Gingerbread, a new mediaplayer framework called Stage-
fright is used in Android. Similar to AppleCoreMedia, Stagefright also supports Pseudo
Streaming by using HTTP for requesting video data. On Android devices, a mobile user
can access video streaming services from either the mobile browser or applications
installed, similar to that on iOS devices. Stagefright is called when a video request
needs to be handled. From the server’s side, it can be identiﬁed with User-Agent of
stagefright/1.x (Linux;Android x.x.x). As we shall show later, Stage-
fright results in a completely different trafﬁc pattern from that of AppleCoreMedia.
To examine how Stagefright works on Android devices, we use our testing devices
to access the same 480-second YouTube video (36.7 MBytes) via their native browsers.
Again, for each experiment, we let the Android devices watch the entire video for 8
A Comparative Study of Android and iOS
111
(cid:39)(cid:82)(cid:90)(cid:81)(cid:79)(cid:82)(cid:68)(cid:71)
(cid:51)(cid:79)(cid:68)(cid:92)(cid:69)(cid:68)(cid:70)(cid:78)
(cid:27)(cid:19)
(cid:26)(cid:19)
(cid:25)(cid:19)
(cid:24)(cid:19)
(cid:23)(cid:19)
(cid:22)(cid:19)
(cid:21)(cid:19)
(cid:20)(cid:19)
(cid:12)
(cid:86)
(cid:72)
(cid:87)
(cid:92)
(cid:37)
(cid:48)
(cid:11)
(cid:3)
(cid:70)
(cid:76)
(cid:73)
(cid:73)
(cid:68)
(cid:85)
(cid:55)
(cid:3)
(cid:79)
(cid:68)
(cid:87)
(cid:82)
(cid:55)
(cid:39)(cid:82)(cid:90)(cid:81)(cid:79)(cid:82)(cid:68)(cid:71)
(cid:51)(cid:79)(cid:68)(cid:92)(cid:69)(cid:68)(cid:70)(cid:78)
(cid:27)(cid:19)
(cid:26)(cid:19)
(cid:25)(cid:19)
(cid:24)(cid:19)
(cid:23)(cid:19)
(cid:22)(cid:19)
(cid:21)(cid:19)
(cid:20)(cid:19)
(cid:27)(cid:19)
(cid:26)(cid:19)
(cid:25)(cid:19)
(cid:24)(cid:19)
(cid:23)(cid:19)
(cid:22)(cid:19)
(cid:21)(cid:19)
(cid:20)(cid:19)
(cid:12)
(cid:86)
(cid:72)
(cid:87)
(cid:92)
(cid:37)
(cid:48)
(cid:11)
(cid:3)
(cid:70)
(cid:76)
(cid:73)
(cid:73)
(cid:68)
(cid:85)
(cid:55)
(cid:3)
(cid:79)
(cid:68)
(cid:87)
(cid:82)
(cid:55)
(cid:27)(cid:19)
(cid:26)(cid:19)
(cid:25)(cid:19)
(cid:24)(cid:19)
(cid:23)(cid:19)
(cid:22)(cid:19)
(cid:21)(cid:19)
(cid:20)(cid:19)
Table 5. Android Devices Accessing a 36.7
MB YouTube Video
(cid:19)
(cid:19)
(cid:20)
(cid:22)
(cid:21)
(cid:25)
(cid:55)(cid:76)(cid:80)(cid:72)(cid:3)(cid:11)(cid:80)(cid:76)(cid:81)(cid:88)(cid:87)(cid:72)(cid:86)(cid:12)
(cid:23)
(cid:24)
(cid:26)
(cid:19)
(cid:27)
(cid:19)
(cid:19)
(cid:20)
(cid:22)
(cid:21)
(cid:25)
(cid:55)(cid:76)(cid:80)(cid:72)(cid:3)(cid:11)(cid:80)(cid:76)(cid:81)(cid:88)(cid:87)(cid:72)(cid:86)(cid:12)
(cid:23)
(cid:24)
(a) Nexus One
(b) Kindle Fire
(cid:26)
(cid:19)
(cid:27)
Name
# of HTTP
Received
Connections Trafﬁc (Bytes)
Nexus One
Kindle Fire
1
1
38,517,389
38,517,389
Re-downloaded
(Bytes)
0
0
Fig. 5. Trafﬁc Pattern of Android Devices Ac-
cessing a YouTube Video
minutes without any manual activities. Figure 5 shows the accumulative trafﬁc pattern
of our 2 different Android devices, Nexus One and Kindle Fire, with the corresponding
playback speed. We ﬁnd that downloading is explicitly and periodically paused during
the 8-minute playback. With multiple experiments conducted, we ﬁnd that although
the data burst length is different across Nexus One and Kindle Fire, such pausing and
resuming behaviors can be consistently observed.
Further inspection of the corresponding packet level workloads reveals that only one
single HTTP request is used to download the video ﬁle by both Nexus One and Kindle
Fire as shown in Table 5. When the downloading is paused, instead of terminating the
current TCP connection as AppleCoreMedia does, Stagefright sets the TCP window
size to 0, so that the server would not send any more packets to it. When it wants to
resume the downloading, it will send a TCP window update message, and the server
will start to deliver the data again. Moreover, we ﬁnd that the total trafﬁc amount is
always equal to the video ﬁle size, indicating no re-downloading of the beginning part.
This is also different from AppleCoreMedia.
Such different behaviors observed on Stagefright in these experiments and in the
server-side log motivate us to explore the underlying reasons. Next, we study the An-
droid source code to better understand how Stagefright works.
it
sets
a
this
enum {
= 65535,
};
Fig. 6. Code Snippet From
/libstagefright/include/NuCachedSource2.h
kPageSize
kDefaultHighWaterThreshold = 20 * 1024 * 1024,
kDefaultLowWaterThreshold = 4 * 1024 * 1024,
kDefaultKeepAliveIntervals = 15000000,
In the libstagefright frame-
work,
the underlying media
playout buffer is handled by
NuCachedSource2.cpp.
Basically,
HighWaterThreshold.
When the total buffer
reaches
threshold,
downloading would be paused. As the playback progresses, the buffer depletes.
When the to-be-played data in the buffer drops below another pre-deﬁned threshold
LowWaterThreshold, the downloading will be resumed. Figure 6 shows some
code snippet from the latest Stagefright source code we extract from the Android
base. We can see that buffer space is allocated in terms of 65,536 Bytes (64 KB).
When the total buffer size reaches 20 MB, downloading would be paused; when the
remaining not-played data is less than 4 MB, Stagefright will resume the downloading.
As the downloading is paused, in order to keep the connection with the server, it would
temporarily resume to download a PageSize (64 KB) of data every 15 seconds and
size
the
112
Y. Liu et al.
pause the downloading after that. This buffer management method well explains what
we have observed in both the server-side log and the client-side experiments.
Further studying the history of earlier versions in the Android code base, we ﬁnd
that the value of these 4 parameters shown in Figure 6 have changed over time. For
example, in the earliest version, the HighWaterThreshold was set to 3 MB, and
the LowWaterThreshold was 512 KB. This indicates as Android devices are get-
ting more physical memory, a larger amount of buffer is allocated to the mediaplayer.
Nevertheless, the HighWaterThreshold can be seen as the total buffer size used
by Stagefright on Android devices. That is, Stagefright would only use a ﬁxed amount
of memory despite different video ﬁle sizes, and that only a ﬁxed amount of video
data would be kept in the buffer. Compared to iOS, this is a simple and static buffer
management method.
In addition, different Android devices may use different values for these parameters
in their out-of-factory settings. For example, based on Figure 5, we can estimate that
the HighWaterThreshold for Nexus One is around 5 MB, while Kindle Fire uses
a larger value of about 13 MB. By analyzing the debugging log from these Android
devices, we are also able to get the accurate value of LowWaterThreshold, which
is 768 KB for Nexus One and 10 MB for Kindle Fire, respectively.
3.3 Comparisons
Through client-side experiments, we conﬁrm that Android devices often use a single
HTTP connection to download the video ﬁle unless there is manual interruption of cur-
rent playback. On the contrary, iOS devices always use multiple HTTP range requests
to download the video ﬁle. Buffer management wise, by analyzing the source code of
Android mediaplayer, we ﬁnd that Stagefright always uses a ﬁxed/preset amount of
memory for the playout buffer, while AppleCoreMedia of iOS devices always adjust
the playout buffer dynamically at runtime.
We believe such different buffer management policies have caused iOS and An-
droid devices to exhibit different behaviors when they are used to access stream-
ing videos. Stagefright would always and only store a ﬁxed amount (set by
HighWaterThreshold) of video data, and may download at most this amount of
video data ahead of the playback. If the user stops watching the video in the middle, at
most HighWaterThreshold amount of data may be wasted. But in normal stream-
ing sessions with few user manual inter-activities, Stagefright on Android devices al-
ways downloads the exact amount of data as the video size, while AppleCoreMedia on
iOS devices always tries to keep as much video data as possible in the buffer for user’s
experience, including re-downloading the beginning part. This results in a signiﬁcant
amount of redundant trafﬁc delivered to iOS devices.
4 Related Work
With the increasing video accesses from mobile devices, a lot of research has been
conducted to examine Internet mobile streaming, from the client’s perspective [2] [10],
the video server’s perspective [11], and the ISP’s perspective [12] [13]. For example, in
our prior work, we conduct extensive measurements from the client’s perspective about
the energy-efﬁciency of various streaming protocols used by mobile devices today [2].
A Comparative Study of Android and iOS
113
Li et al. present a detailed analysis of user behaviors and access patterns in mobile video
streaming from a server’s perspective [11].
Researchers have also studied how accesses from mobile devices and desktop com-
puters are served differently by the video service providers. For example, Rao et al.
characterize the trafﬁc pattern of YouTube and Netﬂix on both desktop computers and
mobile devices [10] . Finamore et al. [12] compare the playback performance of PC-
players and mobile-players accessing YouTube, and examine the potential causes for
the inferior performance of mobile-players.
Different from prior work, in this study, we focus on the streaming access perfor-
mance of two dominant types of mobile systems Android and iOS. We ﬁnd that the
different content requesting patterns and different playout buffer management policies
have caused these devices to have sharply different behaviors.
5 Conclusion
Internet mobile streaming has attracted signiﬁcant attention from both industry and re-
search community, due to the dominant streaming trafﬁc volume in the entire mobile
data trafﬁc. In this work, we focus on the Internet mobile streaming delivery to Android
and iOS devices, with an aim to investigate their performance when receiving Inter-
net streaming content. With both server-side log analysis and client-side experiment-
based investigations, we ﬁnd that Andriod and iOS mediaplayers are using different
content requesting approaches and different buffer management methods when access-
ing streaming content, which result in a non-trivial amount of redundant trafﬁc received
by iOS devices. This would lead to extra battery power consumption on iOS devices and
additional monetary cost if cellular networks have been used. Our study not only pro-
vides some guidelines for common mobile device users, but also offers some insights
for Internet streaming service providers and mobile mediaplayer developers.
Acknowledgements. We appreciate constructive comments from anonymous referees
and our shepherd Edmond W. W. Chan. The work is partially supported by NSF under
grants CNS-0746649, CNS-1117300, CCF-0915681, CCF-1146578.
References
1. Mobile/Tablet OS Market Share,
http://marketshare.hitslink.com/
operating-system-market-share.aspx?qprid=8&qpcustomd=1
2. Liu, Y., Guo, L., Li, F., Chen, S.: An Empirical Evaluation of Battery Power Consumption
for Streaming Data Transmission to Mobile Devices. In: Proc. of ACM Multimedia (2011)
3. YouTube, http://m.youtube.com/
4. Dailymotion, http://touch.dailymotion.com/
5. Veoh, http://www.veoh.com/iphone/
6. Trace, http://cs.gmu.edu/˜sqchen/open-access/pam13-trace.tgz
7. Vuclip-Chinese Cinema, http://www.vuclip.com/
8. Wireshark, http://www.wireshark.org
9. Fast Start,
http://www.microsoft.com/windows/windowsmedia/howto/articles/
optimize web.aspx#performance faststreaming
114
Y. Liu et al.
10. Rao, A., Legout, A., Lim, Y.-S., Towsley, D., Barakat, C., Dabbous, W.: Network Character-
istics of Video Streaming Trafﬁc. In: Proc. of ACM CoNext (2011)
11. Li, Y., Zhang, Y., Yuan, R.: Measurement and Analysis of a Large Scale Commercial Mobile
Internet TV System. In: Proc. of ACM IMC (2011)
12. Finamore, A., Mellia, M., Munafo, M., Torres, R., Rao, S.G.: YouTube Everywhere: Impact
of Device and Infrastructure Synergies on User Experience. In: Proc. of ACM IMC (2011)
13. Erman, J., Gerber, A., Ramakrishnan, K.K., Sen, S., Spatscheck, O.: Over The Top Video:
The Gorilla in Cellular Networks. In: Proc. of ACM IMC (2011)