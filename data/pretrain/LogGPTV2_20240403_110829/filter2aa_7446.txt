### Ethereum Storage插槽
以太坊数据存储会为合约的每项数据指定一个可计算的存储位置，存放在一个容量为 2^256 的超级数组中，数组中每个元素称为插槽，其初始值为 0。虽然数组容量的上限很高，但实际上存储是稀疏的，只有非零(空值)数据才会被真正写入存储。
```
# 插槽式数组存储
----------------------------------
|               0                |     # slot 0
----------------------------------
|               1                |     # slot 1
----------------------------------
|               2                |     # slot 2
----------------------------------
|              ...               |     # ...
----------------------------------
|              ...               |     # 每个插槽 32 字节
----------------------------------
|              ...               |     # ...
----------------------------------
|            2^256-1             |     # slot 2^256-1
----------------------------------
```
当数据长度是已知时，其具体的存储位置将在编译时指定，而对于长度不确定的类型（如动态数组、映射），则会按一定规则计算存储位置。以下是对不同类型变量的储存模型的具体分析。
### Ethereum Storage值类型
除映射和动态数组之外的所有类型，其数据长度都是已知的，如定长整型(`int`/`uint`/...), 地址(`address`), 定长浮点型(`fixed`/`ufixed`/...), 定长字节数组(`bytes1`-`bytes32`)，编译时将严格根据字段排序顺序，从位置 0 开始连续放置在存储中。如果可能的话，大小少于 32 字节的多个变量会被打包到一个插槽中，而当某项数据超过 32 字节，则需要占用多个连续插槽（`data.length / 32`）。规则如下：
- 存储插槽的第一项会以低位对齐（即右对齐）的方式储存。
- 基本类型仅使用存储它们所需的字节。
- 如果存储插槽中的剩余空间不足以储存一个基本类型，那么它会被移入下一个存储插槽。
- 结构和数组数据总是会占用一整个新插槽（但结构或数组中的各项，都会以这些规则进行打包）。
如以下合约：
```solidity
pragma solidity ^0.4.0;
contract C {
    address a;      // 0
    uint8 b;        // 0
    uint256 c;      // 1
    bytes24 d;      // 2
}
```
其存储布局如下：
```
-----------------------------------------------------
| unused (11) | b (1) |            a (20)           |  uint) a;` 的映射类型变量，就无法简单仿照值类型按顺序储存了。对于映射，其会根据上节提到的规则占据位置 `p` 处的一个插槽，但该插槽不会被真正使用。映射中的键 `k` 所对应的值会位于 `keccak256(k . p)`， 其中 `.` 是连接符。如果该值同时是一个非基本类型，则将 `keccak256(k . p)` 作为偏移量来找到具体的位置。
如以下合约：
```solidity
pragma solidity ^0.4.0;
contract C {
    mapping(address => uint) a;      // 0
    uint256 b;                       // 1
}
```
其存储布局如下：
```
-----------------------------------------------------
|                    reserved (a)                   |  "0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234"
```
参数：
- `address`：String - 要读取的地址
- `position`：Number - 存储中的索引编号
- `defaultBlock`：Number|String - 可选，使用该参数覆盖 web3.eth.defaultBlock 属性值
- `callback`：Function - 可选的回调函数, 其第一个参数为错误对象，第二个参数为结果。