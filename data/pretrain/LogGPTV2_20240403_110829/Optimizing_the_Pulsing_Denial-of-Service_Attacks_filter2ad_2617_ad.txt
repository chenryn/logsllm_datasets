for 100 seconds of simulated time, and an attack starts at time
10 seconds.
Fig. 13(a) shows the results for
. Notice that with throt-
tling, the rate of client requests that are successfully processed
is much closer to the original client request rate, than without
throttling (the averages are 3.8, 2.5 and 0.9 kbytes/s, respec-
tively). Fig. 13(b) shows the corresponding results for
,
and supports the same conclusions. Fig. 13(c) shows the web
client, attacker, and total trafﬁc arrival rate at the server, for
. Notice that our throttle negotiation algorithm is effec-
tive in keeping the actual server load between
and
.
VII. SYSTEM IMPLEMENTATION
We have an implementation of
router
software-programmable
throttling on
the CROSS/Linux
[9].
CROSS/Linux allows a pipeline of processing elements to
be ﬂexibly conﬁgured for ﬂows of network packets. Each
element is implemented in C++ as a Linux loadable kernel
module, and can be loaded and dynamically linked into a run-
ning kernel. An element initially not present at a router can also
router
YAU et al.: DEFENDING AGAINST DISTRIBUTED DENIAL-OF-SERVICE ATTACKS WITH MAX-MIN FAIR SERVER-CENTRIC ROUTER THROTTLES
39
, and the throttle leaky bucket size and token
the IP address of
rate. On receiving such a packet, CROSS/Linux checks if the
throttle element is already available at the local node. If not,
it uses anetd to fetch the throttle code from a designated code
server, and links the code dynamically into the kernel, without
disrupting existing services. When the throttle element has been
linked to the kernel, it is conﬁgured into the processing pipeline
– just before the IP forwarding path’s
of packets destined for
send onto the outgoing network interface. The element limits
to the token rate,
the long-term forwarding rate of packets for
and the maximum burst size to the leaky bucket size. Any excess
packets are dropped in the implementation.
A. Experimental Results
To measure the memory overhead of router throttle, we ﬁrst
load the CROSS/Linux router and the throttle modules into the
kernel. Then, using the /proc ﬁle system, we note the amount
of memory allocated as 540 kbytes. We then install up to 1000
throttles one by one, observing the increase in memory allocated
after each throttle installed. Fig. 14 plots the average memory
allocated, as a function of the number of throttles installed, over
several experiments. The results show that the memory allocated
increases largely linearly with the number of throttles, with an
average per-throttle memory of about 7.5 bytes.
throttling is not
We break down the delay of throttling into two components:
throttle lookup in the packet classiﬁer, and the delay due to
the throttle element itself. We found that the delay through the
throttle element is about 200 ns, independent of the number
of throttles installed. This small and relatively constant delay
shows that
inherently expensive. Throttle
lookup depends heavily on the performance of the packet
classiﬁer. We currently use a “naive” implementation that does
a linear search through all the installed ﬁlters. From Fig. 15,
notice that the “base” classiﬁer delay (i.e., without any created
ﬂows) is about 150 ns. Following that, the delay increases about
linearly with the number of throttles installed, reaching about
475 ns for 18 throttles. Notice, however, that throttle lookup
on IP destination addresses is not more complicated than IP
forwarding table lookup. Hence, leveraging related results in
scalable IP lookup (e.g., [19]) will much improve upon the
linear increase in delay.
To ascertain how the throttle overhead affects throughput, we
measure the maximum achievable forwarding rates of packets
through CROSS/Linux, with no throttled ﬂow, to up to 18 ﬂows
created for throttling. Fig. 16 shows the average number of
64-byte packets we can forward per second, as a function of
the number of throttled ﬂows.
VIII. RELATED WORK
Probabilistic IP marking is advanced by Savage et al. [16]
to identify attackers originating a denial-of-service attack, in
spite of source address spooﬁng. The analysis in [15] conﬁrms
the remark in [16] that their form of IP traceback may not be
highly effective for distributed DoS attacks. Subsequently, Song
and Perrig [17] improve upon the information convergence rate
that allows to reconstruct the attack graph (by eliminating false
positives when markers can be fragmented across packets), and
Fig. 13.
(a) Plot of (i) original client request rate, (ii) rate of successfully
processed client requests with level-10 router throttling, and (iii) rate of
successfully processed client requests without throttling, over time. (b) Plot of
(i) original client request rate, (ii) rate of successfully processed client requests
with level-9 router throttling, and (iii) rate of successfully processed client
requests without throttling, over time. (c) Plot of total, attacker, and web client
trafﬁc arrival rates at server, over time, for level-10 throttling.
be fetched on demand from a remote code repository, through
a modiﬁed version of the anetd daemon from DARPA’s active
network project.
In our implementation, a server, say , requests throttling at
a CROSS/Linux router by sending it an IP control packet with
the router alert option being set. The control packet speciﬁes
40
IEEE/ACM TRANSACTIONS ON NETWORKING, VOL. 13, NO. 1, FEBRUARY 2005
analysis on a per-packet basis. Also, it is not necessary for
attackers to spoof addresses in order to launch an attack.
The latter observation also limits the effectiveness of ingress
ﬁltering approaches [6].
Another approach, adopted by carriers such as AT&T, em-
ploys a monitoring infrastructure to detect attacker trafﬁc. Once
a network region is determined to be an originator of active
attacks, trafﬁc from the region is blackholed [1] and thus elim-
inated from the network. Their approach makes it a binary
decision whether a region is an originator of attack trafﬁc or
not. In our problem, setting the aggressiveness threshold for
the decision is not easy. Our approach assumes that aggres-
siveness is a matter of degrees, and hence looks at the more
ﬁne-grained control problem that regions may have a fraction
of the trafﬁc dropped according to how likely it is an attack
region.
A defense approach most similar to ours is proposed by
Mahajan et al. [13]. They describe a general framework for
identifying and controlling high bandwidth aggregates in a
network. As an example solution against DDoS attacks, an
aggregate can be deﬁned based on destination IP address, as
in our proposal. To protect good user trafﬁc from attacker
trafﬁc destined for the same victim server, they study recursive
pushback of max-min fair rate limits starting from the victim
server to upstream routers. Similar to level- max-min fairness,
pushback deﬁnes a global notion of max-min fairness. Unlike
level- max-min fairness, the pushback mechanism always
starts the resource sharing decision at the congestion point
under attack (e.g., the server), where good user trafﬁc may have
aggregated to a large volume and thus can be severely punished
(see Section VI-B.I). Such aggregation of normal user trafﬁc
has been observed to occur in practice [5].
Architecturally, our control algorithm is more of an
end-to-end approach initiated by the server, whereas the
proposal in Mahajan et al. [13] is more of a hop-by-hop ap-
proach in which routers participate more heavily in the control
decisions. Hence, our routers have simpliﬁed responsibilities,
when compared with [13] – they do not need to compute
server-centric max-min fair allocations, and are not required to
generate and send back status messages about current resource
state to the server.
The use of authentication mechanisms inside the network will
also help defend against DDoS attacks, e.g., IPsec [10]. Re-
cently, Gouda et al. [8] propose a framework for providing hop
integrity in computer networks. Efﬁcient alogrithms for authen-
tication and key exchanges are important research questions in
this class of solutions. It is possible to reﬁne the criteria used in
throttling for identifying attacker trafﬁc, such as [7], [18].
Lastly, our solution operates at a higher level than packet
scheduling techniques like fair queueing (e.g., WFQ [14]). Un-
like standard congestion control, our solution is not applied at
the point of congestion, but is proactive to avoid subsequent
aggregation of attack traffc. We also do not require routers to
exchange intricate control information (e.g., about resource or
congestion states) between each other, greatly simplifying the
deployment complexity. Our solution aims to achieve max-min
fairness across a potentially large number of ﬂows. Scalable
max-min fair allocation in such a situation is studied in [4],
Fig. 14. Router throttle memory overhead, as a function of the number of
throttles installed.
Fig. 15. Delay performance of router throttling, as a function of the number
of throttles installed.
Fig. 16. Throughput performance of router throttling, as a function of the
number of throttles installed.
reduces the time overhead in the reconstruction process itself,
for DDoS attacks. These algorithms expose the true attackers,
which supposedly facilitates defense actions that can then be
taken to curtail an attack. However, the required defense mech-
anisms are external to IP trackeback, which in and of itself offers
no active protection for a victim server.
To actively defend against attacks, analysis of routing infor-
mation can enable a router to drop certain packets with spoofed
source address, when such a packet arrives from an upstream
router inconsistent with the routing information. The approach
requires sophisticated and potentially expensive routing table
YAU et al.: DEFENDING AGAINST DISTRIBUTED DENIAL-OF-SERVICE ATTACKS WITH MAX-MIN FAIR SERVER-CENTRIC ROUTER THROTTLES
41
where the optimal sharing objective is relaxed to achieve sub-
stantial reductions in overhead.
IX. CONCLUSION
We presented a server-centric approach to protecting a server
system under DDoS attacks. The approach limits the rate at
which an upstream router can forward packets to the server, so
that the server exposes no more than its designed capacity to the
global network. In allocating the server capacity among the up-
stream routers, we studied a notion of level- max-min fairness,
which is policy-free and hence easy to deploy and manage.
Using a control-theoretic mathematical model, we studied
stability and convergence issues of router throttling under dif-
ferent system parameters. In addition, we evaluated algorithm
effectiveness using a realistic global network topology, and var-
ious models for attacker and good user distributions and behav-
iors. Our results indicate that the proposed approach can offer
signiﬁcant relief to a server that is being ﬂooded with malicious
attacker trafﬁc. First, for aggressive attackers, the throttle mech-
anism can preferentially drop attacker trafﬁc over good user
trafﬁc, so that a larger fraction of good user trafﬁc can make it to
the server as compared with no network protection. In particular,
for the case of aggressive attackers and large , level- max-min
fairness performs better than recursive pushback of max-min
fair rate limits previously proposed in the literature [13]. This is
especically the case when attackers are evenly distributed over
the network. Second, for both aggressive and “meek” attackers,
throttling can regulate the experienced server load to below its
design limit, so that the server can remain operational during a
DDoS attack. Moreover, our implementation results show that
throttling has low computation and memory overheads at a de-
ployment router.
Our results indicate that server-centric router throttling is a
promising approach to countering DDoS attacks, but several
nontrivial challenges remain that prevent its immediate deploy-
ment in the Internet. Our focus has been on DDoS attacks in
which attackers try to overwhelm a victim server by directing
an excessive volume of trafﬁc to the server. Other forms of at-
tacks are possible that do not depend on the sheer volume of
attack trafﬁc [12]. However, more sophisticated attack analysis
(e.g., intrusion detection) is usually feasible to deal with these
other forms of attacks.
[8] M. G. Gouda, E. N. Elnozahy, C. T. Huang, and T. M. McGuire, “Hop
integrity in computer networks,” in Proc. IEEE ICNP, Osaka, Japan,
Nov. 2000.
[9] S. C. Han, P. Zaroo, D. K. Y. Yau, P. Gopalan, and J. C. S. Lui, “Quality of
Service Provisioning for Composable Routing Elements,” Purdue Univ.,
West Lafayette, IN, Tech. Rep., 2002.
[10] S. Kent and R. Atkinson, “Security Architecture for the Internel Pro-
tocol,” IETF, RFC 2401, 1998.
[11] F. Liang, D. K. Y. Yau, and J. C. S. Lui, “On Defending Against Dis-
tributed Denial-of-Service Attacks With Server-Centric Router Throt-
tles,” Dept of Computer Sciences, Purdue University, West Lafayette,
IN, Tech. Rep. TR-01-008, 2001.
[12] G. de Vivo, M. de Vivo, and G. Isern, “Internet security attacks at the
basic levels,” ACM Oper. Syst. Rev., vol. 32, Apr. 1998.
[13] R. Mahajan, S. Bellovin, S. Floyd, J. Ioannidis, V. Paxson, and S.
Shenker, “Controlling High Bandwidth Aggregates in the Network,”
ACIRI and AT&T Labs Research, Tech. Rep. , 2001.
[14] A. K. Parekh and R. G. Gallager, “A generalized processor sharing ap-
proach to ﬂow control in integrated services networks: The single-node
case,” IEEE/ACM Trans. Networking, vol. 1, pp. 344–357, Jun. 1993.
[15] K. Park and H. Lee, “On the effectiveness of probabilistic packet
marking for IP traceback under denial of service attack,” in Proc. IEEE
INFOCOM, Anchorage, AK, 2001.
[16] S. Savage, D. Wetherall, A. Karlin, and T. Anderson, “Practical net-
work support for IP traceback,” in Proc. ACM SIGCOMM, Stockholm,
Sweden, Aug. 2000.
[17] D. Song and A. Perrig, “Advanced and authenticated techniques for IP
traceback,” in Proc. IEEE INFOCOM, Anchorage, AK, 2001.
[18] H. Wang, D. Zhang, and K. G. Shin, “Detecting SYN ﬂooding attacks,”
in Proc. IEEE INFOCOM, New York, NY, Jun. 2002.
[19] D. K. Y. Yau and X. Chen, “Resource management in software-pro-
grammable router operating systems,” IEEE J. Select. Areas Commun.,
vol. 19, no. 3, pp. 488–500, Mar. 2001.
David K. Y. Yau (M’97) received the B.Sc. (ﬁrst
class honors) degree from the Chinese University of
Hong Kong, and the M.S. and Ph.D. degrees from
the University of Texas at Austin, all in computer
sciences.
From 1989 to 1990, he was with the Systems
and Technology group of Citibank, NA. He was
the recipient of an IBM graduate fellowship, and
is currently an Associate Professor of Computer
Sciences at Purdue University, West Lafayette, IN.
His other research interests are in network security,
value-added services routers, and mobile wireless networking.
Dr. Yau received an NSF CAREER Award in 1999, for research on network
and operating system architectures and algorithms for quality of service provi-
sioning. He is a member of the ACM, and serves on the editorial board of the
IEEE/ACM TRANSACTIONS ON NETWORKING.
REFERENCES
[1] Blackhole Route Server and Tracking Trafﬁc on an IP Network [Online].
Available: http://www.secsup.org/Tracking
[2] TCP SYN Flooding and IP Spooﬁng Attacks. CERT Advisory CA-
96.21. [Online]. Available: http://www.cert.org/
[3] (1998) Smurf IP Denial-of-Service Attacks. CERT Advisory CA-1998-
01. [Online]. Available: www.cert.org/advisories/CA-98.01.html
[4] B. Awerbuch and Y. Shavitt, “Converging to approximated max-min
ﬂow fairness in logarithmic time,” in Proc. IEEE INFOCOM, San Fran-
cisco, CA, Mar. 1998.
[5] W. Fang and L. Peterson, “Inter-AS trafﬁc patterns and their implica-
tions,” in Proc. IEEE Global Internet Symp., Rio de Janeiro, Brazil, Dec.
1999.
[6] P. Ferguson and D. Senie, “Network Ingress Filtering: Defeating Denial
of Service Attacks Which Employ IP Source Address Spooﬁng,” IETF,
RFC 2827, 2000.
[7] A. Garg and A. L. N. Reddy, “Mitigation of DoS attacks through QoS
regulation,” in Proc. IEEE IWQoS, Miami Beach, FL, May 2002.
John C. S. Lui (SM’02) received the Ph.D. degree in
computer science from the University of California
at Los Angeles.
He worked in the IBM T. J. Watson Research
Laboratory and in the IBM Almaden Research
Laboratory/San Jose Laboratory before taking up an
academic position at the Chinese University of Hong
Kong. Currently, he is leading a group of research
students in the Advanced Networking and System
Research Group. His research encompasses both
systems and theory. His current research interests are
in theoretical/applied topics in data networks, distributed multimedia systems,
network security, OS design, mathematical optimization, and performance
evaluation.
Dr. Lui received the Vice-Chancellor’s Exemplary Teaching Award in 2001.
He is an Associate Editor of the Performance Evaluation Journal, a member of
the ACM, and an elected member of the IFIP WG 7.3. He serves as the TPC
co-chair of ACM Sigmetrics 2005.
42
IEEE/ACM TRANSACTIONS ON NETWORKING, VOL. 13, NO. 1, FEBRUARY 2005
Feng Liang received the B.S. and M.S. degrees in
optical instruments from Zhejiang University, P.R.
China, in 1989 and 1992, respectively, and the Ph.D.
degree in optical instruments from the Shanghai
Institute of Optics and Fine Mechanics, Chinese
Academy of Sciences, Beijing, in 1995.
He is currently a Professor of telecommunica-
tions at Zhejiang University of Technology. He has
authored and coauthored over 30 technical papers
in various journals. His current research interests
are in network security, QoS in WLAN, network
management systems, and multimedia communications.
Yeung Yam received the B.S. and M.S. degrees in
physics from the Chinese University of Hong Kong
and the University of Akron, Akron, OH, and the
M.S. and Sc.D. degrees in aeronautics and astronau-
tics from the Massachusetts Institute of Technology,
Cambridge, MA, in 1979 and 1983, respectively.
From 1985 to 1992, he was a Member of the
Technical Staff in the Control Analysis Research
Group of the Guidance And Control Section, Jet
Propulsion Laboratory, Pasadena, CA. He joined the
Chinese University of Hong Kong in 1992 and is
currently a Professor in the Department of Automation and Computer-Aided
Engineering. His research interests include analysis, design, and identiﬁcation
of control systems.