challenge x. In case h (cid:54)= , Extract should be executed
in reconstruction mode to recreate output z associated with
challenge x and helper data h. Note that, for the sake of
consistent notation, in this case we require h(cid:48) = h to be
returned by Extract.
Deﬁnition 3 (Creation Process): A creation
process
Create is a probabilistic procedure that, on input of a
creation parameter αCR, produces a physical component p
(Deﬁnition 1).
Deﬁnition 4 (Physical Function Infrastructure): A phys-
function infrastructure F refers to a ﬁxed creation
ical
process Create (Deﬁnition 3) and the set of all PF systems
PFS (Deﬁnition 2), where the physical component p is the
result of Create, i.e.,
FαCR = (Create,{PFSp,αPF,αEX : p ← Create(αCR)})
where αCR, αPF and αEX are ﬁxed.
(5)
C. Example
As a practical example of an implementation of a PF
system, we consider an SRAM PUF [25] as physical func-
tion and a fuzzy extractor [34] as the Extract procedure.
This example is used throughout this paper to illustrate the
practical relevance of the introduced formal properties (see
Figure 2). However, the generic nature of the introduced
model allows to apply it to a very broad class of physical
functions including all known types of PUF constructions.
Extract()ExtractionalgorithmHelperdatahExtractionparameterαEXEvaluationparameterαPFEval()p()PhysicalcomponentChallengesignal˜xResponsesignal˜yPhysicalFunction(PF)ResponseyEvaluationprocessPhysicalFunctionSystem(PFS)OutputzHelperdatah0ChallengexPhysicalFunctionInfrastructure(PFI)NoiseCreate()CreationprocessCreationparameterαCRvariabilityProductionh
Extractsetup()
= 
y
c
C =
BCH[255, 13, 59]
x
Eval()
Read power-up
values
˜x =
Address
˜y =
Data
p()
SRAM Memory
Physical Function:
SRAM PUF
x
z
h
Eval()
Read power-up
values
˜x =
Address
˜y =
Data
p()
SRAM Memory
Physical Function:
SRAM PUF
h
Extractreconstruct()
y
h
z
c(cid:48)
c
Decode
Physical Function System: SRAM PUF + Fuzzy Extractor
Physical Function System: SRAM PUF + Fuzzy Extractor
(a) Setup mode implementation of the PF system.
(b) Reconstruction mode implementation of the PF system.
Figure 2. An illustrative and practical example of a PF system implementation based on an SRAM PUF and a fuzzy extractor.
The behavior of an SRAM PUF is based on the power-up
values of SRAM memory cells. An SRAM memory address
range is considered as the challenge x to the PUF, and the
power-up values of these cells are considered as the PUF
response y. SRAM memory cells are typically implemented
on a silicon chip using a CMOS1 production process. The
parameter αCR of the SRAM PUF creation process includes,
among others, the different design options for an SRAM cell
and the controllable parameters of the CMOS production
process. The evaluation parameter αPF describes the settings
of the measurement process, e.g., typically the resolution
of the analog-to-digital converter. In the SRAM PUF, this
resolution is ﬁxed by construction to produce 1-bit values,
hence αPF is considered to be ﬁxed by design. Finally, the
extraction parameter αEX is used to describe the settable
options of the extractor such as the correction capabilities of
the used error correcting codes. For instance, in the example
described in Figure 2, αEX would be ﬁxed and speciﬁes a
BCH[255, 13, 59] error correcting code.
Experimental results by Guajardo et al. [25] show that
under normal conditions, consecutive power-ups of the same
SRAM memory differ on average only in 3.57% of the bits,
which can rise up to 12% when large environmental varia-
tions are taken into account. Two power-ups of distinctive
but identically implemented memories differ in 49.97% of
the bits, which is extremely close to the optimum of 50%.
These ﬁgures point out clearly the identifying properties of
this structure. For the extraction procedure, a fuzzy extractor
is used as introduced by Dodis et al. [34]. A further
discussion on the goal and operation of a typical fuzzy
extractor can be found in Section IV-C. The implementation
of this SRAM PUF-based PF system is shown in Figure 2.
1Complementary Metal-Oxide-Semiconductor
403
IV. ROBUSTNESS
A. Rationale
As explained in Section III, a PF might respond to
the same challenge with different responses, when queried
several times. However, if these responses are “similar”, it is
possible to overcome this problem by using an appropriate
extraction algorithm. By robustness, we refer to the property
that former outputs of a PF system can be reconstructed at
a later time. Obviously, a certain level of robustness is a
necessary prerequisite for using PF systems as functions in
the classical sense.
Robustness could refer to at least two properties: (i) the
ability to reconstruct the output of a PF system that has been
produced by the setup mode, or (ii) the ability to always
recreate the same output in reconstruction mode (that may be
different from the output in setup mode). We decided for the
ﬁrst option for two reasons: ﬁrst, one can show that a high
probability for (i) implies also a high probability for (ii).
Furthermore, (i) directly reﬂects the basic criterion that is
necessary in a typical PUF-based key generation scenario.
B. Formalization
Following the consideration mentioned above, we for-
mally deﬁne the robustness of a PF system as follows:
Deﬁnition 5 (Robustness): Let PFS be a PF system (Def-
inition 2) and let x ∈ X be a challenge. The challenge
robustness of PFS w.r.t. x is deﬁned as the probability
ρPFS(x) := Pr [(z, h) ← PFS(x, h) :
(z, h) ← PFS(x, )]
(6)
This means that robustness is the probability that an output
generated by Extract in reconstruction mode matches the
output generated earlier by Extract in setup mode.
In practice, the best estimate of the challenge robustness
is the sample mean over many evaluations of the same chal-
lenge on the same PF system. For cases where it is important
that each challenge has at least a certain robustness, the
notion of minimum robustness is introduced:
Deﬁnition 6 (Minimum Robustness of a PF System):
The minimum robustness of a PF system PFS (Deﬁnition 2)
w.r.t. to a set of challenges X (cid:48) ⊆ X is deﬁned as
PFS := min{ρPFS (x) : x ∈ X (cid:48)}
ρmin
(7)
In some cases it may be difﬁcult to estimate the minimum
robustness. Actually, from a practical point of view, it can be
sufﬁcient that the average challenge robustness over many
challenges of a PF system is high enough. This is where the
notion of average robustness comes in:
Deﬁnition 7 (Average Robustness of a PF System): The
average robustness of a PF system (Deﬁnition 2) w.r.t. a
set of challenges X (cid:48) ⊆ X is deﬁned as
ρavg
PFS :=
Pr[x $← X (cid:48)] · ρPFS (x)
(8)
(cid:88)
x∈X (cid:48)
So far we considered PF systems, where the underlying
physical function PF is ﬁxed. Moreover, it is important
to consider the probability of ﬁnding PF systems with
a certain minimum/average robustness within a given PF
infrastructure. The corresponding terminology is given in
the following deﬁnitions:
Deﬁnition 8 (Minimum Robustness of a PF Infrastructure):
Consider a PF infrastructure F = (Create,P) (Deﬁnition 4),
where P = {PFSp,αPF,αEX : p ← Create(αCR)}. The
minimum robustness of F is deﬁned as
ρminF := min(cid:8)ρmin
PFS : PFS ∈ P(cid:9)
(9)
Analogously, we deﬁne the average robustness of a PF
infrastructure as follows:
Deﬁnition 9 (Average Robustness of a PF Infrastructure):
Let F = (Create,P) be a PF infrastructure (Deﬁnition 4),
where P = {PFSp,αPF,αEX : p ← Create(αCR)}. The
average robustness of F is deﬁned as
ρavgF :=
Pr[PFS $← P] · ρavg
PFS
(10)
(cid:88)
PFS∈P
Here, PFS $← P denotes the event that a random physical
component p has been created, i.e., p ← Create(αCR), and
that a PF system PFS has been generated based on p, i.e.,
PFS = PFSp,αPF,αEX for a ﬁxed αPF and αEX.
C. Example
Consider the practical PF system implementation (based
on the SRAM PUF) described in Section III-C. For assessing
robustness, we are interested in the difference between
responses to the same challenge on the same PF, which
in this case is caused by thermal noise and uncontrollable
environmental variability. At large environmental ﬂuctua-
tions, the average percentage of differing bits in an SRAM
404
PUF response can go up to 12% [25], which is too high
for any practical cryptographic application. Industry-grade
implementations require an average robustness of at least
1− 10−6 to 1− 10−9 or even higher. To achieve this with an
SRAM PUF as physical function, an appropriate extraction
algorithm must be used.
Different techniques are possible to decrease the error rate
of PF responses. The typical choice is a fuzzy extractor [34],
which is an algorithm that can be used to increase the
robustness and the unpredictability of the responses of the
PF system. In this section, we focus on the former process,
which is called information reconciliation. The goal of an
information reconciliation algorithm is to generate with high
probability in the reconstruction phase the same output as
in the setup phase, ensuring a high robustness level as
deﬁned in Deﬁnition 5. The inputs to the reconciliation
algorithm, which are the responses of the physical function,
i.e., ysetup and yreconstruct, are not necessarily equal but can
be distorted by noise. A secondary requirement is that the
information reconciliation algorithm preserves as much of
the information as possible that is present in the input2. This
is necessary to provide acceptable levels of unclonability and
unpredictability as deﬁned in Section V and VI, respectively.
Obtaining a reliable and information-bearing result from
a noisy measurement implies the use of error-correcting
codes, which are the basis for most
information recon-
ciliation algorithms. Directly correcting the response of a
physical function is not possible since this typically is not a
noisy version of a code word but an arbitrary noisy vector.
Most information reconciliation algorithms deploy a clever
technique, which allows the use of decoding algorithms on
arbitrary words. A relatively simple but powerful construc-
tion is the code-offset method proposed by Dodis et al. [34].
The idea is to transform an arbitrary bit vector ysetup, which
represents the response of a physical function during the
setup phase,
to a random code word c of a predeﬁned
error correcting code. In the reconstruction phase, the same
transformation maps the noisy version of the PF response
to a noisy version of the code word, provided
yreconstruct
that the transformation is transitive and isometric. The noisy
code word can be decoded to the correct code word c if
the amplitude of the noise is smaller than the code’s error
correcting capability. The original PF evaluation during the
setup phase can now be easily recovered by applying the
inverse transition on the corrected code word c. Note that the
random transformation of a code word is chosen in the setup
phase and needs to be known in the reconstruction phase.
For the code-offset method, this transformation is deﬁned
by the vector difference (offset) h between the PF response
ysetup in the setup phase and the corresponding code word
c. This offset vector is called helper data. The helper data
2A trivial algorithm, which gives a constant output regardless of the
input, achieves perfect robustness but is not considered a good information
reconciliation algorithm since all information of the input is lost.
h does not disclose the full output z of the PF system3 to
challenge x and hence can be stored in plaintext format, e.g.,
in a public database or in an external non-volatile memory.
A practical example of a PF system based on an SRAM
PUF and an Extract algorithm using the code-offset tech-
nique is shown in Figure 2. The SRAM PUF generates
255-bit responses with an average bit-error rate of 12%
between consecutive responses to the same challenge of
the same PUF. The Extract algorithm transforms the PF
responses to a random code word of a BCH[255, 13, 59]
error-correcting code by computing the bitwise exclusive-
or of the PF response and an offset, as depicted in Fig-
ure 2(a). Assuming a binomial distribution for the num-
ber of errors in a single response, one can calculate that
Pr [HW(ysetup ⊕ yreconstruct) ≤ 58]  1 − 10−6 in this
to achieve an average robustness ρavg
example, all occurrences of 58 or less bit errors must be
correctable. The Extract algorithm achieves this since all
occurrences of 59 or less bit errors in a code word of the
BCH[255, 13, 59] code can be corrected successfully by the
decoder in the reconstruction phase, as shown in Figure 2(b).
By using this extraction algorithm, a 12%-noisy physical
function can be used to construct a PF system with an
average robustness of 1 − 10−6.
The code-offset method is powerful and generic. It can be
used as an Extract algorithm for every type of PUF imple-
mentation, provided that a suitable error-correcting code is