# A Formal Foundation for Secure Remote Execution of Enclaves

## Authors
- Pramod Subramanyan, University of California, Berkeley
- Rohit Sinha, University of California, Berkeley
- Ilia A. Lebedev, Massachusetts Institute of Technology
- Srinivas Devadas, Massachusetts Institute of Technology
- Sanjit A. Seshia, University of California, Berkeley

## Abstract
Recent proposals for trusted hardware platforms, such as Intel SGX and the MIT Sanctum processor, offer compelling security features but lack formal guarantees. We introduce a verification methodology based on a Trusted Abstract Platform (TAP), a formalization of idealized enclave platforms along with a parameterized adversary. We also formalize the notion of secure remote execution and present machine-checked proofs showing that the TAP satisfies the three key security properties required for secure remote execution: integrity, confidentiality, and secure measurement. We then present machine-checked proofs demonstrating that SGX and Sanctum are refinements of the TAP under certain parameterizations of the adversary, confirming that these systems implement secure enclaves for the stated adversary models.

### CCS Concepts
- Security and privacy â†’ Formal methods and theory of security; Security in hardware; Trusted computing; Information flow control

### Keywords
- Enclave Programs, Secure Computation, Formal Verification, Confidentiality, Integrity, Remote Attestation

## 1 Introduction
Applications running on typical computing platforms often include large, privileged software layers in their trusted computing base (TCB), such as the operating system (OS), hypervisor, and firmware. Vulnerabilities in these layers have been exploited to execute privileged malware, leading to severe consequences [1, 26, 35, 52, 64]. To address this, processor designers and vendors are developing CPUs with hardware primitives, such as Intel SGX and MIT Sanctum, which isolate sensitive code and data within protected memory regions called enclaves. These enclaves are inaccessible to other software on the machine, making them the only trusted components of an application. A well-programmed enclave can execute safely even if the privileged software layers are compromised.

Despite growing interest, there has been only informal security analysis of these new platforms, referred to as enclave platforms. This lack of formalization has several consequences:
- Developers of enclave programs cannot formally reason about the security of their programs.
- Incorrect use of hardware primitives can render enclave programs vulnerable to security breaches.
- Hardware designers cannot formally state security properties of their architectures or reason about potential vulnerabilities of enclaves running on their hardware.
- It is difficult to compare and contrast potential improvements to these platforms without a unified framework.
- As we move towards a world where enclave platforms are widespread, developers will likely rely on tools and libraries that provide a common API for enclave programs while supporting different target platforms. Reasoning about the security guarantees of such toolchains is challenging without a unified framework.

This paper addresses these gaps by presenting a unified formal framework to specify and verify the security properties of enclave platforms.

### 1.1 Contributions
This paper makes the following key contributions:
1. **Formalization of Enclave Execution**: We define the properties required for secure remote execution of enclaves in the presence of a privileged software adversary.
2. **Trusted Abstract Platform (TAP)**: We introduce an idealized abstraction of enclave platforms, including a parameterized adversary model. The TAP provides varying degrees of confidentiality.
3. **Decomposition of SRE**: We decompose the secure remote execution (SRE) property into a triad of integrity, confidentiality, and secure measurement properties, which are more easily formally verified using a theorem prover.
4. **Refinement-Based Methodology**: We present a refinement-based methodology for proving the SRE guarantee of enclave platforms and provide machine-checked proofs of refinement for models of SGX and Sanctum.

All our models and proof scripts are being made open-source [75] and are designed to be modular and extensible by the community.

## 2 Formal Model of Enclave Execution
An enclave platform implements primitives to create protected memory regions, called enclaves, that contain both code and data and are isolated from all other software in the system. The processor monitors all accesses to the enclave, ensuring that only code running within the enclave can access its memory. For example, Intel's SGX instructions enable the creation of user-mode enclaves in the hosting application's address space. Since the privileged software layers (OS/Hypervisor) cannot be trusted to modify enclave memory, the enclave platform allows the enclave to access the entire address space of the hosting application, enabling efficient I/O interaction with the external world. The external world can only transfer control to the enclave at statically-defined entry points.

In addition to isolated execution, the enclave platform implements primitives for generating attested statements. Code inside an enclave can get messages signed using a per-processor private key along with a hash-based measurement of the enclave. This allows other trusted entities to verify that messages originated from the desired enclave running on a genuine platform. We also assume the enclave platform implements a cryptographically secure random number generator, which the enclave can use for cryptographic operations such as key generation.

### 2.1 Formal Model of Enclave Programs
An enclave is launched with a set of code pages containing user-mode instructions and a set of data pages for private heap and stack space. This forms the initial state of the enclave, and the enclave platform includes a hash-based measurement of this initial state in all attested statements, allowing the user to verify that the enclave was launched in an expected initial state. The enclave's configuration includes:
- **Entrypoint**: The starting point of the enclave's execution.
- **Virtual Address Range (evrange)**: The range of virtual addresses that map to the enclave's protected memory.
- **Access Permissions (acl)**: Permissions for each address within evrange.

**Enclave Programs**: The user ships an enclave \( e = (inite, confige) \). Here, \( confige \) defines the enclave's entrypoint, virtual address range, and access permissions, while \( inite \) specifies the enclave's initial state at launch, including values of code and data pages within \( confige.evrange \).

We assume that the enclave's virtual address range and corresponding access permissions are the same for local and remote executions. This assumption ensures that enclave measurements return a predictable value. 

**Enclave State**: At any point in time, the machine is in some state \( \sigma \). The enclave's state \( Ee(\sigma) \) is a projection of the machine state and specifies the valuation of the following state variables:
- **Memory (vmem)**: A partial map from virtual addresses (within \( confige.evrange \)) to machine words.
- **General-Purpose Registers (regs)**: Indexed by a natural number.
- **Program Counter (pc)**: A virtual address.
- **Configuration (confige)**: Copied verbatim from \( e \) and remains constant throughout the enclave's execution.

**Enclave Inputs and Outputs**: In addition to the private state \( Ee(\sigma) \), an enclave accesses non-enclave memory for reading inputs and writing outputs, both of which are under adversary control. Addresses outside \( evrange \) can be read and modified by both the adversary and the enclave, so reads from these addresses return unconstrained values. The enclave may also invoke the enclave platform's primitive to get random numbers, treated as inputs. Therefore, we define the enclave's input \( Ie(\sigma) \) as \( \langle IRe(\sigma) \rangle \), where \( IRe(\sigma) \) is any random number provided by the platform in that step (or \( \epsilon \) if randomness was not requested), and \( IUe(\sigma) \) is the projection of the machine state that the enclave may read and the attacker may write. Similarly, we define the enclave's output \( Oe(\sigma) \) as a projection of the machine state that the enclave can write and the attacker may read.

**Enclave Execution**: Our semantics of enclave execution assumes that an enclave program is deterministic modulo the input \( Ie(\sigma) \), i.e., the next state of the enclave is a function of the current state \( Ee(\sigma) \) and input \( Ie(\sigma) \). This is not a restriction in practice, as both Sanctum and SGX enclaves interact with the external world via memory-based I/O.