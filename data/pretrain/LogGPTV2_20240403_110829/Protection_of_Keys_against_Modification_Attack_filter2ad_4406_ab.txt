ing functions so that by the time an attacker is able to infer 
some bits of the actual key, other bits  will  be destroyed.  In 
this way, the attacker would not be able to recover the entire 
key. 
In  this  section, we  illustrate  this idea  with  an  example 
that  employs a  voting  function  and  conclude  that  for  any 
deterministic decoding and wiring function, there would not 
be  any  real  benefit.  In  particular,  the  attacker  can  always 
break the scheme in o ( p )  time (where p is the length of the 
physical key). 
4.1.1  Voting Scheme 
A simple voting scheme can be set up as follows. We choose 
P to be three times the size of K. When a new device is to 
be  programmed  and  issued  with,  say,  an  n-bit  key,  K  = 
kokl . . . kn-l,  we create P as follows.  For each i, we will 
program three bits of P such that two of the bits are equal to 
ki and the third  is equal to the complement, F. These three 
bits will  be stored in locations P[3i], PI32 + 11, and P[3i + 
21.  However,  the  ordering of  these  three bits  (i.e.,  which 
one will  be  the  complement)  will  be  chosen  randomly  at 
device programming time. This defines the encode function 
in our model.  In addition, this scheme also defines p  = 371, 
Vi, Ai  = 3, and V i , j ,  wiringi(j)  = 3i + j  - 1. 
To re-derive  K from  P, we can use  the  voting function 
which  sets  ki  to be  the  majority  function  of  the  values in 
the (3i)",  (32 + l ) ' h ,  (32 + 2)*h locations of P. That is, 
decode;(P[3i], P[3i + 11, P[3i + 21)  = 
bit value which occurs most often in the triple 
Although  somewhat  more  complicated  than  the  previ- 
ous  approaches,  the  attacker  can  still  successfully  carry 
out an  EEPROM modification  attack on this scheme.  The 
only difference  is that the exact bit pattern  of P might not 
be  retrieved;  instead,  the  bit  pattern  of  a  modified  P will 
be  recovered  by  the  attacker.  This  is due to the  fact  that 
each decoding function, decodei, is many-to-one.  That is, 
decode,(l,l,O) = decodei(l,O,l)  = decodei(O,l,l)  = 
decode,(l, 1 , l )  =  1;  hence  bit  pattern  110 and  any  of 
its  permutations,  as  well  as  111 will  all  give  the  same 
result.  Similarly,  decodei(l,O, 0)  =  decodei(O,l,O)  = 
decodei(O,O, 1) = decodej(O,O, 0) = 0. There, therefore, 
exists a number of possible bit patterns, P’ that  evaluate to 
each K  under this scheme.  However,  this does not  affect 
the attack.  So long as the attacker obtains some P’ that  re- 
sults in the actual value of K, the attacker has succeeded. If 
during the EEPROM  modification attack, the attacker ever 
modifies too many bits, a different K  will  be generated and 
a  different output  will  be  observed.  At  that  point,  the  at- 
tacker can always correct the modified bit and go on. In this 
way,  a  usable P‘ (of  length  3 n )  can  be  found in  only one 
pass of the 3 n  bits.  Since (on average) half the key bits will 
need to be corrected, the expected number of probes in this 
attack is (4.5)n. 
Some may  think  that  the  situation  might  improve  if  a 
more  complicated  function  is  designed  and  more  redun- 
dancy is used in P. But the above attack indicates that once 
there is a change in the output of the device, the attacker in- 
fers the value of a bit in P. Thus, a modified P’ can be found 
in O(p) probes. This suggests the following proposition. 
Definition 1  A 
(K, P ,  &, W ,  73) in which 
1. K is the n-bit actual key space { 0 ,  l}” und K  E  K  is a 
protection 
scherne 
is 
a 
5-tuple 
n-bit key to be protected. 
2.  P is the p-bit physical key space  { O , l } P   and P  E  ‘P is 
the bit stream stored  in the EEPROM. 
3.  & is the set of encoding fittictioris and C  : K  3 ’P. 
4.  W is the wiritzgfiirictiori 
5.  ’D  is the decodirigfirricrion. 
Proposition 1  Forarivprotection scheme ( K ,  P ,  &, W ,  V), 
if  W and  ’D  are  known,  deterininistic functions,  then cin 
attacker can break rhe protecrion scheme (that is, to find K )  
in O ( p )  probes. 
The proof, which is left out of this conference version, is by 
induction on p .  
This  proposition  suggests  that  if  we  want  a  scheme 
that  costs  the  attacker  more  than  O ( p )  probes,  we  must 
have  something  secret.  Due  to  the  Kerckoff’s principle, 
we  would  not  consider  to  usc  secret  decoding  functions. 
Rather, we will make use of hidden wirings to help the pro- 
tection.  We  will  implement a  family  of  functions  via  the 
hidden wires so as to make the  attacker time-expensive  to 
find the particular function  instance being used. One possi- 
ble choice is the permutation. 
4.2. Permutation 
In this approach, the manufacturer chooses (as the batch 
key)  a  random  permutation  of  the n-bit key.  This permu- 
tation  is used  to form P at device programming time.  This 
29 
batch  key  is  a  very  sensitive information,  and  the  manu- 
facturer must  be  working  with  the  clients  (e.g.  banks)  to 
make sure that this information can only be accessed by the 
fewest possible personels.  Special management procedures 
must be designed to eliminate the possibilities of introduc- 
ing class I1 attackers. 
To restore the actual key K, the wirings are used to invert 
the  permutation.  From  the  attacker’s point  of view,  even 
though  he does not know the permutation, he can  proceed 
as follows. First, the attacker applies the original attack and, 
with  n probings,  finds the n bits  of  P.  At  this  point,  the 
attacker does not know the permutation. Hence, he does not 
know the actual key, K. However, if a secret-key encryption 
scheme  is used  in  the device and the encryption algorithm 
is known, then the  attacker can  find  the permutation in an 
additional  O ( n )  probes.  In  particular,  the  wiring  pattern 
can be found as follows. As the attacker knows the function 
of the device (e.g., encryption  using DES), he can find the 
device output corresponding to an arbitrarily selected input 
(using, e.g., a PC) using the following n (i.e., for DES n = 
56 ) actual keys:  0 . .  .01, 0 . .  . 10, ..., 10.. .O.  Call these 
n outputs a1, . . . , a,. 
After computing the ( ~ i ,  the attacker uses probes to write 
0 .  . .01 to the area storing P, operates the device, and com- 
pares  the encrypted  result  with  all  the  ai.  Since the  pro- 
tection  scheme is simply a permutation, one of the ai  will 
match.  Thus, the first  wiring line is identified.  Continuing 
with the remaining n - 1 patterns (0 . . . l o ,  . . ., 10. . . 0), all 
the wiring information can be revealed. Thus, the key  K is 
found in O ( n )  probes. 
4.3. Protection via m Permutations 
In  all  the  protection  attempts  described  above,  the  at- 
tacker  can  find  the  key  in  O ( n )  probes  (assuming p  is  a 
linear function of n). One may naturally wonder:  is it pos- 
sible to devise a scheme that can provide protection against 
the modification attack. 
In this subsection, we show that by cascading (i.e., taking 
permutations (form 2 2), we can 
the cross product of) 
achieve a design that will be more expensive for the attacker 
to perform the modification attack against. 
Consider the case where m = 2. We proceed as follows. 
p  = 2n. 
The device manufacturer chooses (randomly) two dis- 
tinct permutation functions n1 and n2. 
Let  K  be  the  n-bit  actual  key.  The  chip  will  store 
P = 7rl  (K) .n2(K) (where. denotes concatenation and 
in  this  paper,  we overload  the  notation  that  7ri(K)  = 
permuted K with ni). 
0  The  wirings  implement  the  the  inverses  of  both  per- 
In  particular,  wiringi(1)  =  .irl(i) and 
mutations. 
wiringi(2) = . i r p ( i )   + 72. 
0  To  restore  the  key,  we  require  that  for  each  z ,  
P[wiring,(l)] = P[wirzng,(2)]. That is,  if  all  n de- 
coding functions receive matching inputs, a key is out- 
put; otherwise an  error is given.  In  the case, where a 
key is output, decodez (z, z) = z. 
To  restore  the  wirings  w,, an  attacker can  proceed  as 
follows: 
Attack 
set all bits of P to 0 
loop fori from 0 to n - 1 
1 
2 
3 
4 
5 
6 
7 
8 
9 
10 
1 1  
12 
13 
14  loopend 
set bit i of P to 1 
loop f o r j  from 0 to n - 1 
set bit n + j  of P to 1 and test 
if (ok) then 
record the wiring 
reset bit  ri + j  of P to 0 
exit from this inner loop 
ifend 
reset bit n + j  of P to 0 
loopend 
reset bit i of P to 0 
On average, it will take  ( ( n  - 1) + 1)/2 = n / 2  trials to fix 
the Oth  wiring; ( n  - 1)/2 trials for the first wiring and so on. 
This arithmetic sum is of the order of n2/4. For example, 
with a 128-bit key, it is expected to take about 2”  probes to 
get the wiring information. 
To further  increase  this  number,  we  can  cascade more 
permutations.  From  our  investigations,  the  straightfor- 
ward modification of the above attack will take the attacker 
O(nm) probes to find K with m permutations. 
Proposition 2  Ifa protection scheme uses m different per- 
mutations, cascaded as above. a brute-force search will take 
O(nm) time for the attacker tojind K .  
The proof  follows directly  from the fact  that 
order O(nm). 
im-’ 
is of 
5. Proposed Protection Scheme 
5.1. Observation 
In  the  previous  section,  we  give  an  upper  bound  for 
breaking  a  whole  batch  of  cards  for  the  cascaded  m- 
permutation  protection  scheme.  Usually,  we  simply  need 
to crack a single card instead of the whole batch  of devices. 
With the above cascaded m-permutation  scheme, it is hard 
io break  the  whole batch  (i.e.  to infer the wiring  informa- 
tion), but this may not be true for the individual card where 
what we want to find is the key K. 
One weakness of the cascaded m-permutation scheme is 
that the number of occurrences of 0’s and 1’s are preserved, 
though their locations are permuted. This gives the attacker 
additional information (the number of 0’s and 1’s in key K) 
to exploit. Before we proceed to discuss this, the following 
definitions are introduced: 
Definition 2  A  permutation niatrix[4] corresponding  to a 
permutation  n is a matrix  &I,  which has the effect of per- 
muting a vector by  i~ when it ni~iltiplies the vector:  That is, 
M,K  = permuted K. 
A{,  will  be a n  x  n matrix  if  K  is of  length n, and  K 
is considered as a n x  1 column vector.  The matrix Ad,  = 
(m23)nxn 
can be derived from .ir by 
{  0 
1 
mI3 = 
i f j  = n(i) 
otherwise 
this  definition,  we  can  describe 
the  batch 
the  cascaded  m-permutation  as  a  m-tuples 
Using 
key  for 
(Ad,,  , Al,,  , . . . , Afnm ). 
5.2. The scheme 
To  remove  the  weaknesses  that  we  described  in  Sec- 
tion  5.1, we propose a scheme in which 
1.  the number of bit  occurrence  of  0’s and  1’s in  K  will 
be unknown to the attacker; 
2.  we do not  care  if  the  EEPROM  can  be  read  directly 
somehow. 
The motivation for this scheme is that instead of storing a 
concatenation of the permuted versions of K as P, we store 
for each Pi, a permuted version_of  K xor’ed with two inde- 
pendently  chosen n-bit words Ki  which  will  not be stored 
explicitly in  the card.  This will  lead us to devise  a scheme 
that satisfies the above two desired properties. 
The  basic  set-up  is  the  same  as  the  cascaded  m- 
permutation scheme but with the following amendments: 
1.  m must be odd and m 2 3 (this will be needed later in 
(3)) 
2.  P is  no  longer  M,,  K  . &I,,K.  . . Ad,,,,  K;  instead,  it 
will be P = PI . P2  . . . P,,  where 
30 
P,  =  M,,(K@Ki  CEK2) 
A
A
with KO = K,, 
In Section 5.3, we will show in property 3 that with this 