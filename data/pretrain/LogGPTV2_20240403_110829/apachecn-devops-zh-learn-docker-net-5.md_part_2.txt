    $ cd proxy-container
    $ nano Dockerfile
    FROM ubuntu
    RUN apt-get update && apt-get install -y nginx
    COPY nginx.conf /etc/nginx/nginx.conf
    RUN echo "daemon off;" >> /etc/nginx/nginx.conf
    EXPOSE 80
    CMD service nginx start
    ```
    在前面的 Dockerfile 中，我们使用了一个基本的 Ubuntu 映像，并安装了 nginx，将其暴露在端口 80 上。
9.  接下来，我们将创建一个定制的`nginx.conf`，它将覆盖默认的`nginx.conf`，以确保反向代理配置正确:
    ```
    user www-data;
    worker_processes 4;
    pid /var/run/nginx.pid;
    events {
     worker_connections 768;
     # multi_accept on;
    }
    http {
     server {
     listen           80;
     # Proxy pass to servlet container
     location / {
     proxy_pass      http://application-container:80;
     }
     }
    }
    ```
10.  构建代理 Docker 映像并将构建的映像推送到 Docker Hub 帐户:
    ```
    $ docker build -t my-dockerhub-username/proxy-image.
    $ docker push my-dockerhub-username/proxy-image
    ```
11.  通过导航到 **AWS 管理控制台**([https://aws.amazon.com/console/](https://aws.amazon.com/console/))可以部署 ECS 容器服务。
12.  单击左侧边栏中的**任务定义**，然后单击**创建新的任务定义**。
13.  给你的任务定义起个名字，比如`SecurityApp`。
14.  Next, click on **Add Container** and insert the name of the proxy web container pushed to the Docker Hub account, as well as the name of the application web container. View the contents of the JSON using **Configure via JSON** tab to see the task definition that you have created. It should be like this:
    ```
    Proxy-container:
    Container Name: proxy-container
    Image: username/proxy-image
    Memory: 256
    Port Mappings
    Host port: 80
    Container port: 80
    Protocol: tcp
    CPU: 256
    Links: application-container
    Application container:
    Container Name: application-container
    Image: username/amazon-ecs-sample
    Memory: 256
    CPU: 256
    ```
    点击**创建**按钮，部署应用。
15.  点击左侧边栏中的**集群**。如果默认群集不存在，请创建一个。
16.  启动一个 ECS 优化的 **亚马逊机器映像** ( **AMI** )，确保它有一个公共 IP 地址和一个互联网路径。
17.  当实例启动并运行时，导航至 **AWS 管理控制台**的 **ECS** 部分，点击**集群**，然后**默认**。现在，我们应该能够在 **ECS 实例**选项卡下看到我们的实例。
18.  从**自动气象站管理控制台**选项卡的左侧导航至**任务**定义，并单击**运行任务**。
19.  在下一页，确保集群设置为**默认**，任务数为 **1** ，然后点击**运行任务**。
20.  流程完成后，我们可以看到任务的状态从挂起状态变为绿色运行状态。
21.  点击 **ECS** 选项卡，我们可以看到前面创建的容器实例。通过点击它，我们将获得关于其公共 IP 地址的信息。通过浏览器点击这个公共 IP 地址，我们将能够看到我们的示例 PHP 应用。
# 了解 Docker 安全性 I–内核名称空间
名称空间为内核的全局系统资源提供了一个包装器，并使该资源在名称空间内的进程看来就像它们有一个独立的实例一样。全局资源变化对同一命名空间中的进程可见，但对其他进程不可见。容器被认为是内核命名空间的优秀实现。
Docker 实现了以下命名空间:
*   **pid 命名空间**:用于进程隔离( **PID** — **进程标识**)
*   **网络名称空间**:用于管理网络接口(**网络** — **网络**
*   **ipc 名称空间**:用于管理对 ipc 资源的访问( **IPC** — **进程间通信**)
*   **mnt 命名空间**:用于管理挂载点( **MNT** — **挂载**
*   **uts 命名空间**:用于隔离内核和版本标识符( **UTS** — **Unix 分时系统**
在 libcontainer 中添加命名空间支持需要在 GoLang 的系统层添加补丁([https://codereview . appspot . com/126190043/patch/140001/150001](https://codereview.appspot.com/126190043/patch/140001/150001)src/syscall/exec _ Linux . go)这样就可以为 PIDs、用户 UIDs 等维护新的数据结构。
## pid 命名空间
pid 命名空间隔离进程 id 号空间；不同 pid 名称空间中的进程可以具有相同的 pid。pid 名称空间允许容器提供功能，例如暂停/恢复容器中的一组进程，并将容器迁移到新的主机，同时容器内部的进程保持相同的 PID。
新命名空间中的 PID 以 PID 1 开始。内核需要配置名称空间的标志`CONFIG_PID_NS`才能工作。
pid 命名空间可以嵌套。除了初始(根)pid 命名空间之外，每个 pid 命名空间都有一个父级。pid 命名空间的父级是使用克隆或非共享创建命名空间的进程的 pid 命名空间。pid 命名空间形成一棵树，所有命名空间最终都追溯到根命名空间，如下图所示:
![pid namespace](img/00043.jpeg)
## 净命名空间
net 命名空间提供了与网络相关的系统资源的隔离。每个网络命名空间都有自己的网络设备、IP 地址、IP 路由表、`/proc/net`目录、端口号等等。
网络命名空间从网络角度来看，使容器变得有用:每个容器可以有自己的(虚拟)网络设备和自己的应用，它们绑定到每个命名空间的端口号空间；主机系统中合适的路由规则可以将网络分组定向到与特定容器相关联的网络设备。使用网络名称空间需要一个内核，该内核使用`CONFIG_NET_NS`选项([https://lwn.net/Articles/531114/](https://lwn.net/Articles/531114/))配置。
由于每个容器都有自己的网络命名空间，这基本上意味着它有自己的网络接口和路由表，所以 Docker 也直接利用网络命名空间来隔离 IP 地址、端口号等。
### 基本网络命名空间管理
网络名称空间是通过向`clone()`系统调用`CLONE_NEWNET`传递一个标志来创建的。但是，从命令行使用 IP 网络配置工具来设置和使用网络名称空间是很方便的:
```
# ip netns add netns1
```
该命令创建一个名为`netns1`的新网络命名空间。当 IP 工具创建网络命名空间时，它将在`/var/run/netns`下为其创建绑定挂载，这允许命名空间持久化，即使在其中没有进程运行时也是如此，并且便于对命名空间本身的操作。由于网络名称空间在准备使用之前通常需要相当多的配置，因此这个特性将受到系统管理员的赞赏。
`ip netns exec`命令可用于运行命名空间内的网络管理命令:
```
# ip netns exec netns1 ip link list
1: lo:  mtu 65536 qdisc noop state DOWN mode DEFAULT link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
```
该命令列出了命名空间内可见的接口。可以使用以下命令删除网络命名空间:
```
# ip netns delete netns1
```
此命令删除引用给定网络命名空间的绑定装载。但是，只要有任何进程在名称空间中运行，名称空间本身就会一直存在。
### 网络命名空间配置
新的网络命名空间将有一个环回设备，但没有其他网络设备。除了环回设备之外，每个网络设备(物理或虚拟接口、网桥等)只能存在于单个网络命名空间中。此外，物理设备(连接到真实硬件的设备)不能分配给根以外的名称空间。相反，可以创建虚拟网络设备(例如，虚拟以太网或虚拟以太网)并将其分配给一个名称空间。这些虚拟设备允许命名空间内的进程通过网络进行通信；正是配置、路由等决定了他们可以与谁通信。
首次创建时，新命名空间中的`lo`环回设备关闭，因此即使环回`ping`也会失败。
```
# ip netns exec netns1 ping 127.0.0.1
connect: Network is unreachable
```
在前面的命令中，我们可以看到，由于 Docker 容器的网络命名空间存储在单独的位置，因此需要创建一个符号链接到`/var/run/netns`，可以通过以下方式完成:
```
# pid=`docker inspect -f '{{.State.Pid}}' $container_id`
# ln -s /proc/$pid/ns/net /var/run/netns/$container_id
```
在本例中，这是通过打开该接口来完成的，这将允许 ping 通回送地址。
```
# ip netns exec netns1 ip link set dev lo up
# ip netns exec netns1 ping 127.0.0.1
 PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.
64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.052 ms
64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.042 ms
64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.044 ms
64 bytes from 127.0.0.1: icmp_seq=4 ttl=64 time=0.031 ms
64 bytes from 127.0.0.1: icmp_seq=5 ttl=64 time=0.042 ms
```
这仍然不允许`netns1`和根命名空间之间的通信。为此，需要创建和配置虚拟以太网设备。
```
# ip link add veth0 type veth peer name veth1
# ip link set veth1 netns netns1
```
第一个命令设置一对相连的虚拟以太网设备。发送到`veth0`的数据包将被`veth1`接收，反之亦然。第二个命令将`veth1`分配给`netns1`命名空间。
```
# ip netns exec netns1 ifconfig veth1 10.0.0.1/24 up
# ifconfig veth0 10.0.0.2/24 up
```
然后，这两个命令为这两个设备设置 IP 地址。
```
# ping 10.0.0.1
# ip netns exec netns1 ping 10.0.0.2
```
如先前的`ping`命令所示，双向通信现在是可能的。
不过，如前所述，名称空间不共享路由表或防火墙规则，因为运行路由和`netns1`中的`iptables -L`将证明:
```
# ip netns exec netns1 route
Kernel IP routing table
Destination   Gateway    Genmask        Flags    Metric Ref    Use Iface
10.0.0.0         *      255.255.255.0     U        0  0  0       veth1
# ip netns exec netns1 iptables -L
Chain INPUT (policy ACCEPT)
target     prot opt source               destination
Chain FORWARD (policy ACCEPT)
target     prot opt source               destination
Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination
```
## 用户命名空间
用户名称空间允许用户和组标识的每名称空间映射。这意味着用户名称空间内的进程的用户标识和组标识可能与其名称空间外的标识不同。一个进程可以在名称空间之外有一个非零的用户标识，同时在名称空间之内有一个零的用户标识。该进程对用户命名空间之外的操作没有权限，但在命名空间内具有根权限。
### 创建新的用户命名空间
用户命名空间通过在调用`clone()`或`unshare()`时指定`CLONE_NEWUSER`标志来创建:
`clone()`允许子进程与调用进程共享部分执行上下文，如内存空间、文件描述符表和信号处理程序表。
`unshare()`允许进程(或线程)分离其执行上下文中当前与其他进程(或线程)共享的部分。当使用`fork()`或`vfork()`创建一个新的进程时，执行上下文的一部分，如挂载命名空间，被隐式共享。
如前所述，Docker 容器非常类似于 LXC 容器，因为一组名称空间和控制组是为容器单独创建的。每个容器都有自己的网络栈和命名空间。除非容器没有权限访问，否则不允许它们访问其他主机套接字或接口。如果给容器提供主机网络模式，那么只有它能够访问主机端口和 IP 地址，这可能会对主机上运行的其他程序造成潜在威胁。
如下例所示，我们在容器中使用`host`网络模式，它能够访问所有主机桥:
```
docker run -it --net=host ubuntu /bin/bash
$ ifconfig
docker0   Link encap:Ethernet  HWaddr 02:42:1d:36:0d:0d
 inet addr:172.17.0.1  Bcast:0.0.0.0  Mask:255.255.0.0
 inet6 addr: fe80::42:1dff:fe36:d0d/64 Scope:Link
 UP BROADCAST MULTICAST  MTU:1500  Metric:1
 RX packets:24 errors:0 dropped:0 overruns:0 frame:0
 TX packets:38 errors:0 dropped:0 overruns:0 carrier:0
 collisions:0 txqueuelen:0
 RX bytes:1608 (1.6 KB)  TX bytes:5800 (5.8 KB)
eno16777736 Link encap:Ethernet  HWaddr 00:0c:29:02:b9:13
 inet addr:192.168.218.129  Bcast:192.168.218.255  Mask:255.255.255.0
 inet6 addr: fe80::20c:29ff:fe02:b913/64 Scope:Link
 UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
 RX packets:4934 errors:0 dropped:0 overruns:0 frame:0
 TX packets:4544 errors:0 dropped:0 overruns:0 carrier:0
 collisions:0 txqueuelen:1000
 RX bytes:2909561 (2.9 MB)  TX bytes:577079 (577.0 KB)
$ docker ps -q | xargs docker inspect --format '{{ .Id }}: NetworkMode={{ .HostConfig.NetworkMode }}'
52afb14d08b9271bd96045bebd508325a2adff98dbef8c10c63294989441954d: NetworkMode=host