accuracy while maintaining a low false positive rate.
2.1 Usage Scenarios
Cypider proposes a generic approach to investigate apps
similarity, which could have many usage scenarios. For ex-
ample, software binaries comparison, where the input is a set
of binaries, and the output would be the binary communities
that share similar features. A possible application here is
the authorship attribution where the community represents
a set of software binaries owned by the same individual. An-
other usage scenario of Cypider approach could be malware
detection and family attribution, where we try to boost the
overall malware investigation in general, in which we look
for communities of similar malicious binaries to infer their
malware family after the detection. In this paper, we target
the detection of Android malicious apps.
In the context of this research, Cypider has two main us-
age scenarios. In the ﬁrst scenario, Cypider can be applied
only on malicious Android apps. The aim is to speed up
the analysis process and attribute malware to their corre-
sponding families. Under the ﬁrst scenario, the overall mal-
ware analysis process is boosted by automatically identifying
malware families and minimizing the overall manual analy-
sis. The outcome of the previous process is the communities
of malicious apps. The attribution of a family to a given
community can be achieved by attributing a small set (one
app in most cases) among its malicious apps. On the other
hand, unassigned communities are considered as suspicious
apps that require manual investigation. However, the anal-
ysis can be done on only some samples of the suspicious
community considering they are highly similar. We could
divide the malware examination approaches into:
1. Semi-supervised Approach: This means that we have a
reference dataset of known malicious apps with complete in-
formation about their malware families. The input to Cypi-
der is the unknown malicious apps for (semi-) automatic in-
vestigation. Cypider will leverage the known malicious apps
in addition to the new unknown ones to produce malicious
communities. To this end, known malicious apps of the
same malware family tend to have the same community (a
strongly connected graph). Moreover, the unknown mali-
cious apps will most likely join a given community of known
malicious apps if they share the same family. Analogically,
the communities of the known malicious apps play the role of
a magnet for unknown ones, if they share the same features,
implying having the malware family.
2. Unsupervised Approach: Unsupervised means we do not
have any information about the suspicious apps entered to
Cypider. The aim is to investigate communities (or clusters
depending on the terminology; we prefer community because
it expresses better the strongly connected graph notion used
by Cypider to ﬁnd malicious apps) instead of a single mali-
cious app. Considering communities could drastically in-
crease the productivity of the security investigator. In this
paper, we focus on the unsupervised approach.
In the second scenario, Cypider is applied on mixed An-
droid apps (i.e., malicious or benign). Such dataset could
be the result of a preliminary suspiciousness app ﬁltering.
Therefore, a lot of false positives can be recorded; we as-
sume that benign apps - meaning false positives - constitute
50% − 75% of the actual suspicious apps. Based on the pre-
vious assumption, we could identify malicious Android apps
by detecting and extracting app communities that share a
common payload. We could understand that apps with high
similarity are most likely to be malicious. Moreover, Cypi-
der could help ﬁltering less suspicious apps (most likely to be
benign apps) that do not have any similarity with the sus-
picious apps of the current dataset. Notice that the previ-
ous approaches, i.e., Semi-supervised and Unsupervised ap-
proaches, could be applied on the mixed dataset to target
malware apps. It is important to note that the statistical
features could diﬀer from a use-case to another. However,
the overall approach of Cypider is the same in all the previous
applications. In our context, we focus on Android malicious
app detection and family attribution. More speciﬁcally, we
target to detect malicious apps without a prior knowledge
using the unsupervised approach.
3. METHODOLOGY
(cid:1)
(cid:20)(cid:9)(cid:6)(cid:9)(cid:18)(cid:17)(cid:15)(cid:21)
(cid:4)(cid:5)(cid:6)(cid:3)(cid:7)(cid:10)(cid:14)(cid:1)(cid:17)(cid:8)(cid:27)(cid:1)(cid:20)(cid:10)(cid:5)(cid:15)(cid:14)(cid:1)
(cid:25)(cid:22)(cid:26)(cid:26)(cid:3)(cid:6)(cid:8)(cid:7)(cid:30)(cid:13)(cid:14)(cid:8)(cid:6)(cid:31)(cid:9)(cid:5)(cid:11)(cid:5)(cid:8)(cid:6)(cid:7)
(cid:10)(cid:11)(cid:11)(cid:12)(cid:13)(cid:14)(cid:9)(cid:9)(cid:15)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:2)(cid:3)(cid:3)
(cid:16)(cid:17)(cid:18)(cid:19)(cid:17)(cid:15)(cid:14)
(cid:4)(cid:5)(cid:6)(cid:6)(cid:7)(cid:8)(cid:9)(cid:10)(cid:11)
(cid:12)(cid:9)(cid:8)(cid:13)(cid:14)(cid:15)(cid:3)(cid:15)(cid:9)(cid:8)(cid:10)
(cid:29)(cid:5)(cid:10)(cid:1)(cid:23)(cid:14)(cid:10)(cid:14)(cid:28)(cid:10)(cid:14)(cid:27)
(cid:23)(cid:14)(cid:10)(cid:14)(cid:28)(cid:10)(cid:14)(cid:27)
(cid:12)(cid:9)(cid:8)(cid:13)(cid:14)(cid:15)(cid:3)(cid:15)(cid:9)(cid:8)(cid:10)(cid:22)(cid:1)
(cid:9)(cid:9)(cid:9)(cid:9) (cid:10)(cid:9)(cid:9)(cid:9)(cid:9)(cid:9)(cid:9)(cid:9)
(cid:23)(cid:17)(cid:10)(cid:17)(cid:24)(cid:17)(cid:22)(cid:14)
(cid:2)(cid:3)(cid:4)(cid:5)(cid:4)(cid:6)(cid:7)(cid:8)(cid:6)(cid:9)
(cid:8)
(cid:2)(cid:25)(cid:26)(cid:2)(cid:25)(cid:26)
(cid:2)(cid:25)(cid:26)(cid:2)(cid:25)(cid:26)(cid:2)(cid:25)(cid:26)
(cid:2)(cid:25)(cid:26)(cid:2)(cid:25)(cid:26)
(cid:2)(cid:25)(cid:26)(cid:2)(cid:25)(cid:26)(cid:2)
(cid:2)(cid:25)(cid:26)(cid:2)(cid:25)(cid:26)(cid:2)(cid:25)(cid:26)
(cid:2)(cid:25)(cid:26)
(cid:10)(cid:19)(cid:20)(cid:13)(cid:14)(cid:9)(cid:4)(cid:7)(cid:3)(cid:5)(cid:9)(cid:13)
(cid:21)(cid:9)(cid:16)(cid:7)(cid:22)(cid:5)(cid:12)
(cid:10)(cid:16)(cid:7)(cid:8)(cid:17)(cid:9)(cid:13)(cid:18)(cid:4)(cid:7)(cid:4)(cid:12)(cid:9)(cid:7)
(cid:27)(cid:28)(cid:29)(cid:13)(cid:28)(cid:8)(cid:26)(cid:8)(cid:24)(cid:4)(cid:5)(cid:8)(cid:7)(cid:30)
(cid:23)(cid:4)(cid:24)(cid:8)(cid:16)(cid:8)(cid:22)(cid:3)(cid:12)
(cid:25)(cid:22)(cid:26)(cid:26)(cid:3)(cid:6)(cid:8)(cid:7)(cid:8)(cid:9)(cid:12)
Figure 1: Cypider Overview
Cypider framework uses a dataset of unlabeled apps (mali-
cious or mixed) in order to produce community ﬁngerprints
for the identiﬁed app communities. Cypider overall process
is achieved by performing the following steps, as illustrated
in Figure 1:
350
1. At the beginning of Cypider process, we need to ﬁlter
out the apps developed by the same author; we call
them sibling apps. We aim here to remove the noise of
having app communities of sibling apps because they
tend to have many similar features since authors reuse
components across diﬀerent apps. Cypider identiﬁes
sibling apps in the dataset based on their version, app
hash, and author signature (provided in the META-
INF directory in the APK ﬁle). Therefore, we only
keep apps with diﬀerent author identities since the ad-
versary favors to use multiple fake author identities to
prevent the removal of all apps in case of detected ma-
liciousness in one of them. Regarding multiple apps
with the same author, Cypider randomly selects one
app. Afterward, if the selected app is recognized as
malicious in the analysis results, Cypider will tag all
its sibling apps as malicious.
2. After ﬁltering the sibling apps, we need to derive from
the actual apps package a meaningful information that
could identify the app and help computing the similar-
ity against other apps. For this purpose, Cypider ex-
tracts statistical features from the apps, which could
be either benign or malicious depending on the usage
scenario. The feature engineering is the most criti-
cal part of the whole framework in the context of An-
droid malware detection usage scenario (Other usage
scenarios could have diﬀerent statistical features, but
the overall approach is the same). It is important to
mention that the selected features must be resilient
to the attacker’s deceiving techniques. To this end,
the features need to be broad enough to cover most of
the static characteristics of a given Android APK. The
broader the features are, the more resilient they are.
For our purposes, we leverage static analysis features
of the APK in the design of Cypider. In particular, we
extract them from each content category (classes.dex,
resources, assembly, etc.), as described in Section 4.
3. Relying on the extracted features from each content,
Cypider computes a ﬁxed length feature vector for each
content features. In order to reduce and normalize the
size of the feature vectors, we enable Cypider with a
machine learning preprocessing technique, namely fea-
ture hashing [45] (or hashing trick ), as presented in
Section 4.7. As a result, Cypider produces, from the
extracted features of the previous stage, multiple fea-
ture vectors with a small and ﬁxed size. The number
of the generated feature vectors depends on how many
APK contents are used in the feature extraction, i.e.,
each content type corresponds to one feature vector.
4. For eﬃcient comparison between the apps, we em-
power Cypider system with a highly scalable similarity
computation system based on locality-sensitive hash-
ing (LSH) [21] technique, which computes the similar-
ities between apps, as presented in Section 5. Given a
pair of apps, we compute the similarity between each
content feature vector from the previous stage to de-
cide if they are connected or not with respect to that
content. The result of this step is an undirected net-
work (or similarity network), where the nodes are An-
droid apps and the edges represent the high similarity
with respect to one content between the apps. For
similar apps, multiple connecting edges are expected.
Besides, the more the edges are, the higher the apps
are suspected to be malicious.
5. Cypider leverages the similarity network in order to de-
tect malicious apps communities. This step depends,
however, on the usage scenario (Section 2.1). For the
malicious apps, Cypider extracts highly connected apps
communities and then excludes these apps from the
dataset. The remaining apps (i.e., apps that are not
part of any community) are considered in another Cypi-
der malware detection iteration. We expect to get a
pure or near-pure community if the containing apps of
a given community have the same or almost the same
Android malware family respectively. In the case of a
mixed dataset, Cypider ﬁrst excludes all the app nodes
with degree 1 (i.e., the app is only self-similar), which
are most likely to be benign apps. Afterward, Cypider
extracts the apps of malicious communities.
The rest of apps will be considered in another Cypi-
der iteration. At this point, we expect to have some
benign communities as false positives. However, the
similarity network made Cypider’s decision explainable
because the security practitioner can track with re-
spect to which content these apps are similar. The
previous option could also help in sharpening the sta-
tistical features to prevent benign apps to be detected
in malicious communities. For community detection
(Section 6), we adopt a highly scalable algorithm [23]
to enhance Cypider’s community detection module.
6. To this end, we consider a set of malicious commu-
nities, each of which is most likely to be a malware
family or a subfamily. Cypider leverages these mali-
cious communities to generate the so-called community
ﬁngerprint (Section 7) that captures the app features
of a given detected community. Instead of using tra-
ditional crypto or fuzzy hashing of only one malware
instance, we leverage a model produced by a one-class
classiﬁer [43], which can provide a better-compressed
format of a given Android malware family. This model
is used to decide whether new malware apps are part of
this family or not. The results are multiple community
ﬁngerprints, each of which corresponds to a detected
community. The generated ﬁngerprints are stored in
the signature database for later use.
7. At this stage, Cypider is ready to start another detec-
tion iteration with a new dataset, including the rest of
unassigned apps from the previous iteration. The same
previous steps will be followed for the new iteration.
However, we ﬁrst check the feature vectors of the new
apps against the known malware communities ﬁnger-
print stored in the database. The matched apps to a
community ﬁngerprint are labeled as malicious with-
out adding them to the active dataset. Undetected
apps are added to the active dataset and are consid-
ered in the next iteration of the detection process.
We consider Cypider approach as an endless process, in
which we detect and extract communities from the active
dataset that always gets new apps (malware only or mixed)
on a daily basis, in addition to the rest of apps from the
previous iterations.
351
4. STATISTICAL FEATURES
In this section, we present the statistical features of An-
droid packaging (APK ). We only extract,
in this paper,
static features from each app APK ﬁle, in order to generate
the feature vectors than compute the similarity with other
apps feature vectors. In other words, the feature vector set
will be the input of the LSH similarity computation module
used to build the similarity network. As previously men-
tioned, the features should be broad enough to cover most
of the static content of the APK ﬁle. The features could
be categorized, based on the main APK content types, to i)
Binary features, which are related to byte-code (Dex ﬁle) of
the Dalvik virtual machine, where we consider the hex dump
of the Dex ﬁle along with the actual ﬁle. ii) Assembly fea-
tures, which are computed from the assembly of classes.dex.
iii) Manifest features, extracted from the Manifest [10] ﬁle,
which is vital in Android apps since it provides essential
information about the app to the Android OS. iv) APK fea-
tures, which include all the remaining APK ﬁle content, such
as resources and assets. In this section, we present the sta-
tistical features based on the adopted concept to extract
them (e.g., N-gram). For clarity, we ﬁrst start by recalling
the internal structure of Android packaging.
4.1 Android APK Format
Android Application Package (APK ) is the oﬃcial An-
droid packaging format, which is used for apps distribu-
tion and installation. By analogy, APK ﬁles are similar
to EXE installation ﬁles in Windows or RPM /DEB ﬁles in
Linux. More precisely, APK is a ZIP archive ﬁle, which
contains the diﬀerent components to run the app. The