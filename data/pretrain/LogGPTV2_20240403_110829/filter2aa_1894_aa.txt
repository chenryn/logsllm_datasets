# IOActive, Inc. Copyright ©2014. All Rights Reserved.

## Weird-Machine Motivated Practical Page Table Shellcode & Finding Out What's Running on Your System

### Shane Macaulay
**Director of Cloud Services, IOActive, Inc.**

## Killing the Rootkit! And How to Find Everything Running on Your System

- **Rootkit/APT Technique for Hiding Processes:**
  - Unlinking kernel structures (DKOM)
- **New 64-bit Detection Technique (Exclusive to DC22):**
  - System/platform-independent technique
  - Applicable to Linux, BSD, Windows, ARM64, and AMD64
  - Works by analyzing physical memory and properties of the MMU Virtual Memory system

## The Long Road

- In memory of Barnaby Jack: "It’s about the journey, not the destination."
- 13 Years Since ADMMutate:
  - [Slide URL](http://1drv.ms/1rEBMJF)
  - ADMMutate (last DC talk was about polymorphic shellcode)
  - Reflections: The more things change, the more they stay the same.
  - Thoughts on PT shellcode with ADMMutate
  - Attack is challenging, fun, and rewarding!
  - Defense is challenging and stressful.

## Abusing x for Fun and Profit

- Typically, the offensive side gets the most attention in the hacker scene.
- Defense often goes unnoticed but is crucial.
- Energizing the "D" (Defense) can be fun too!
- A defensive exploit:
  - Today, we are eliminating process-hiding rootkits across 64-bit OS/platforms.
  - DKOM is dead! Process hiding is dead!

## Also 13 Years Ago

- Other notable developments:
  - x86 assembler in Bash
    - "cLIeNUX": shasm, an assembler written in GNU Bash Version 2, which may work in other recent Unix-style shell command interpreters.

## Ideals

- Aim to identify all running code, including hacks and weird machines.
- Focus on real-world targets: hypervisor-monitored guests.
- Combine protection pillars: structure analysis, physical memory traversal, and integrity checking.

## Practical Concepts

- **Attacks: WeIrD MaChInE**
  - Lots of fun and highly esoteric.
- **Defense: Detecting Everything**
  - Home field advantage: Use a hypervisor.
  - Verifiability of device state (not vulnerable to platform attacks like BIOS, firmware, or UEFI).
  - Fault handler games do not work on snapshots; even extracting physical memory can be challenging.
  - Protection from virtualized environments (as discussed by Dino Dai Zovi), though it impacts performance when nested.

## Practical Page Table ShellCode: Motivations

- An attack devised to understand memory protection systems.
- Development required a deep understanding of system fault handling and low-level interactions between software and hardware on modern 64-bit platforms.
- Until Windows 7, page tables were directly executable (non-executable was opt-in/non-default).
- **The Page-Fault Weird Machine: Lessons in Instruction-less Computation**
  - Julian Bangert, Sergey Bratus, Rebecca Shapiro, Sean W. Smith (WOOT'13 Proceedings of the 7th USENIX Conference on Offensive Technologies).

## X64 Kernel Virtual Address Space

| Start                | End                  | Size   | Description                         | Notes                                      |
|----------------------|----------------------|--------|-------------------------------------|--------------------------------------------|
| FFFF0800`00000000    | FFFFF67F`FFFFFFFF    | 238TB  | Unused System Space                 | WIN9600 NOW USE & CAN CONTAIN +X AREAS     |
| FFFFF680`00000000    | FFFFF6FF`FFFFFFFF    | 512GB  | PTE Space                           | -X used to be executable (Win7)            |
| FFFFF700`00000000    | FFFFF77F`FFFFFFFF    | 512GB  | HyperSpace                          | 8.1 seems to have cleaned up here          |
| FFFFF780`00000000    | FFFFF780`00000FFF    | 4K     | Shared System Page                  |                                            |
| FFFFF780`00001000    | FFFFF7FF`FFFFFFFF    | 512GB-4K | System Cache Working Set           |                                            |
| FFFFF800`00000000    | FFFFF87F`FFFFFFFF    | 512GB  | Initial Loader Mappings             | Large Page (2MB) allocations               |
| FFFFF880`00000000    | FFFFF89F`FFFFFFFF    | 128GB  | Sys PTEs                            |                                            |
| FFFFF8A0`00000000    | FFFFF8BF`FFFFFFFF    | 128GB  | Paged Pool Area                     |                                            |
| FFFFF900`00000000    | FFFFF97F`FFFFFFFF    | 512GB  | Session Space                       |                                            |
| FFFFF980`00000000    | FFFFFA70`FFFFFFFF    | 1TB    | Dynamic Kernel VA Space             |                                            |
| FFFFFA80`00000000    | *nt!MmNonPagedPoolStart-1 | 6TB Max | PFN Database                        |                                            |
| *nt!MmNonPagedPoolStart | *nt!MmNonPagedPoolEnd | 512GB Max | Non-Paged Pool                      | DEFAULT NO EXECUTE                         |
| FFFFFFFF`FFC00000    | FFFFFFFF`FFFFFFFF    | 4MB    | HAL and Loader Mappings             |                                            |

## Page Table ShellCode Weird-Machine

- **Windows 7 and Earlier:**
  - Can we emit intended shellcode into the PTE area?
  - `VirtualAlloc()` from user space results in executable memory in the kernel.
  - Reserving memory causes a code-write operation into kernel space.
  - Example addresses and contents:
    - PXE at FFFFF6FB7DBEDF68, PPE at FFFFF6FB7DBEDF88, PDE at FFFFF6FB7DBF1008, PTE at FFFFF6FB7E201EA0.
    - Contains: 0000000000187063, 0000000134C04863, 0000000100512863, 000000002DC3B863.
    - PFNs: 187, 134c04, 100512, 2dc3b.

## PT SC WM Died with Win8

- This technique worked earlier than Windows 7, but it is no longer effective in Windows 8.
- Example call stack:
  - Child-SP: fffd000`2b34ecf8, RetAddr: fffff800`16066ee1, Call Site: nt!LOCK_WORKING_SET
  - Child-SP: fffd000`2b34ed00, RetAddr: fffff800`1603f5ad, Call Site: nt!MiSystemFault+0x911
  - Child-SP: fffd000`2b34eda0, RetAddr: fffff800`1615af2f, Call Site: nt!MmAccessFault+0x7ed
  - Child-SP: fffd000`2b34eee0, RetAddr: fffff6fb`77fde37a, Call Site: nt!KiPageFault+0x12f
  - Child-SP: fffd000`2b34f078, RetAddr: fffff800`01e423fe, Call Site: 0xfffff6fb`77fde37a
  - Child-SP: fffd000`2b34f080, RetAddr: fffff800`163ae3e5, Call Site: SIoctl!SioctlDeviceControl+0x27e
  - Child-SP: fffd000`2b34f9b0, RetAddr: fffff800`163aed7a, Call Site: nt!IopXxxControlFile+0x845
  - Child-SP: fffd000`2b34fb60, RetAddr: fffff800`1615c4b3, Call Site: nt!NtDeviceIoControlFile+0x56
  - Child-SP: fffd000`2b34fbd0, RetAddr: 00007ff9`c1b265ea, Call Site: nt!KiSystemServiceCopyEnd+0x13
  - 0000003a`ba9bf8f8, RetAddr: 00007ff9`bef92c83, Call Site: ntdll!NtDeviceIoControlFile+0xa

## What About the New Tool (Wanted PTShellcode Thingy)?

- Planned to expand on the PT shellcode concept.
- Considered as an ADMmutate update, .NET compiler, C macros, or a script host for RoP builder/engine/host.
- Application of the technique is mostly dead, requiring an info leak and possibly using Bash to write it.

## Some Peace of Mind – Really!

- **Cross-Platform AMD64 Process Detection Technique:**
  - Obsoletes process-hiding techniques used by all rootkits/malware.
  - Typical of APT (Advanced Persistent Threat) technology.
  - Detection can be used as a defensive attack pattern against all rootkits.

## The Big Picture: ProcDetect

- Decided to release a more advanced and useful tool today.
- **ProcDetect:**
  - Signed code example for AMD64 Windows.
  - Other platform/OS versions to follow.

## Attack vs. Defense

- **Defensive Window of Opportunity:**
  - Closing the door on process-hiding techniques today.
- **Defensive Tactics:**
  - New classes of defensive attack techniques.
  - Offensive forensics and automation.
  - Use process detection to post-process and detect any hidden process ever spawned.
  - Keep interesting/known memory dumps around.
  - Currently, there are no possible attacks against this technique ("WE FOUND YOU!").

## In-Memory Process Detection

- **Dumping Memory:**
  - Physically challenging.
- **Scanning vs. List Traversal:**
  - Scanning: Slow but high assurance.
  - Link/Pointer Traversal: Fast but easily confused.

## What Is a Process?

- A process is an address space configuration.
- A container for threads executed on a CPU.
- Threads share the address space.
- Integrity issues arise from code overwriting or injection.
- Hash checks can help verify integrity.

## Process Detection

- **Volatility to the Rescue:**
  - [Command Reference](https://code.google.com/p/volatility/wiki/CommandReference#psxview)
  - Compares logical identifiers:
    - PsActiveProcessHead linked list
    - EPROCESS pool scanning
    - ETHREAD pool scanning (then references the owning EPROCESS)

---

This version of the text is more organized, coherent, and professional, making it easier to read and understand.