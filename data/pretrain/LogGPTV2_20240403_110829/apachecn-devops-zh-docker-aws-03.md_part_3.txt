![](img/b934817f-04fb-44ab-8a4b-ba8ad803e9a3.png)
Switching roles
您现在应该注意到，AWS 控制台中的标题表明您必须承担管理员角色，并且您现在对您的 AWS 帐户拥有完全的管理权限:
![](img/582a79e0-cc9d-45da-ab8f-8e273dcb2a0a.png)
Assumed admin role For the remainder of this book, whenever you need to perform administrative tasks in your account, I will be assuming you have assumed the admin role as demonstrated in the previous screenshot.
# 创建 EC2 密钥对
如果您要在您的 AWS 帐户中运行任何 EC2 实例，则需要一个密钥设置任务来建立一个或多个 EC2 密钥对，对于 Linux EC2 实例，可以使用这些密钥对来定义 SSH 密钥对，从而授予您对 EC2 实例的 SSH 访问权限。
创建 EC2 密钥对时，将自动生成 SSH 公钥/私钥对，SSH 公钥作为命名的 EC2 密钥对存储在 AWS 中，相应的 SSH 私钥下载到您的本地客户端。如果您随后创建任何 EC2 实例，并在实例创建时引用一个命名的 EC2 密钥对，您将能够自动使用关联的 SSH 私钥来访问您的 EC2 实例。
SSH access to Linux EC2 instances requires you to use the SSH private key associated with the configured EC2 key pair for the instance, and also requires appropriate network configuration and security groups to permit access to the EC2 instance SSH port from wherever your SSH client is located.
要创建 EC2 密钥对，首先导航至 AWS 控制台中的**服务| EC2** ，从左侧菜单中的**网络&安全**部分选择**密钥对**，然后单击创建密钥对按钮:
![](img/52541551-506e-42ce-9fdf-02cfa8b5a6f9.png)
在这里，您已经配置了一个名为 admin 的 EC2 密钥对，单击“创建”按钮后，将创建一个新的 EC2 密钥对，SSH 私钥将下载到您的计算机上:
![](img/b793d0f0-fcb8-4f02-9283-228dcf9a540b.png)
此时，您需要将 SSH 私钥移动到计算机上的适当位置，并修改私钥文件的默认权限，如下所示:
```
> mv ~/Downloads/admin.pem ~/.ssh/admin.pem
> chmod 600 ~/.ssh/admin.pem
```
请注意，如果您没有使用 chmod 命令修改权限，当您尝试使用 SSH 密钥时，将出现以下错误:
```
> ssh -i ~/.ssh/admin.pem 192.0.2.1
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ WARNING: UNPROTECTED PRIVATE KEY FILE! @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Permissions 0644 for '/Users/jmenga/.ssh/admin.pem' are too open.
It is required that your private key files are NOT accessible by others.
This private key will be ignored.
Load key "/Users/jmenga/.ssh/admin.pem": bad permissions
```
# 使用 AWS 命令行界面
到目前为止，在本章中，您只与 AWS 控制台进行了交互，该控制台可从您的网络浏览器访问。尽管拥有 AWS 控制台访问权限非常有用，但在许多情况下，您可能更喜欢使用命令行工具，尤其是在需要自动化关键操作和部署任务的情况下。
# 安装 AWS 命令行界面
AWS 命令行界面是用 Python 编写的，因此您必须安装 Python 2 或 Python 3 以及 PIP Python 包管理器。
The instructions and examples used throughout this book assume a MacOS or Linux environment.
For instructions on how to set up the AWS CLI using Windows, refer to [https://docs.aws.amazon.com/cli/latest/userguide/awscli-install-windows.html](https://docs.aws.amazon.com/cli/latest/userguide/awscli-install-windows.html).
假设您已经满足这些先决条件，您可以使用`pip`命令在终端中安装 AWS CLI，如果已经安装，还可以使用`--upgrade`标志升级到最新的 AWS CLI 版本，以及使用`--user`标志避免修改您的系统库:
```
> pip install awscli --upgrade --user
Collecting awscli
  Downloading https://files.pythonhosted.org/packages/69/18/d0c904221d14c45098da04de5e5b74a6effffb90c2b002bc2051fd59222e/awscli-1.15.45-py2.py3-none-any.whl (1.3MB)
    100% |████████████████████████████████| 1.3MB 1.2MB/s
...
...
Successfully installed awscli-1.15.45 botocore-1.10.45 colorama-0.3.9 pyasn1-0.4.3 python-dateutil-2.7.3
```
Depending on your environment, if you are using Python 3, you may need to replace the `pip install` command with `pip3 install`.
如果您现在尝试运行 AWS CLI 命令，该命令将失败，这表明您必须配置您的环境:
```
> aws ec2 describe-vpcs
You must specify a region. You can also configure your region by running "aws configure".
```
# 创建 AWS 访问密钥
如果您按照前面代码中的建议运行`aws configure`命令，系统将提示您输入自动气象站访问密钥标识:
```
> aws configure
AWS Access Key ID [None]:
```
要使用 AWS 命令行界面和 AWS 软件开发工具包，您必须创建一个 AWS 访问密钥，这是一个由访问密钥标识和机密访问密钥值组成的凭据。要创建访问密钥，请打开 AWS 控制台中的 IAM 仪表板，从左侧菜单中选择**用户**，然后单击您的用户名。在**安全凭证**选项卡中的**访问密钥**部分下，单击**创建访问密钥**按钮，将打开一个对话框，允许您查看访问密钥标识和机密访问密钥值:
![](img/fcc8616b-3a14-43ac-8b78-b7449ca7fc29.png)
Access key credentials
记下访问密钥标识和机密访问密钥值，因为您需要这些值来配置您的本地环境。
# 配置 AWS 命令行界面
回到您的终端，您现在可以完成`aws configure`设置过程:
```
> aws configure
AWS Access Key ID [None]: AKIA***
AWS Secret Access Key [None]: d52A***
Default region name [None]: us-east-1
Default output format [None]:
```
如果您现在尝试运行之前尝试的`aws ec2 describe-vpcs`命令，该命令仍然失败；但是，错误是不同的:
```
> aws ec2 describe-vpcs
An error occurred (UnauthorizedOperation) when calling the DescribeVpcs operation: You are not authorized to perform this operation.
```
现在的问题是，您无权执行此命令，因为您刚刚创建的访问密钥已链接到您的用户帐户，您必须承担管理员角色才能获得管理权限。
# 配置 AWS 命令行界面以承担一个角色
此时，AWS CLI 正在您的用户帐户的上下文中运行，您需要将 CLI 配置为管理员角色，以便能够执行任何有用的操作。
当您运行`aws configure`命令时，AWS CLI 会在主目录中名为`.aws`的文件夹中创建两个重要文件:
```
> ls -l ~/.aws
total 16
-rw------- 1 jmenga staff 29  23 Jun 19:31 config
-rw------- 1 jmenga staff 116 23 Jun 19:31 credentials
```
`credentials`文件将您的 AWS 凭证保存在一个或多个命名配置文件中:
```
> cat ~/.aws/credentials
[default]
aws_access_key_id = AKIA***
aws_secret_access_key = d52A***
```
在前面的代码中，请注意`aws configure`命令创建了一个名为`default`的配置文件，并将访问密钥标识和机密访问密钥值存储在该文件中。作为一种最佳实践，尤其是当您使用多个 AWS 帐户时，我建议避免使用默认配置文件，因为如果您输入 AWS CLI 命令，AWS CLI 将默认使用此配置文件。您将很快了解如何使用命名配置文件来处理多个 AWS 帐户，如果您有默认配置文件，很容易意外忘记指定要处理的配置文件，并意外在默认配置文件引用的帐户中执行意外操作。我更喜欢根据您使用的帐户名称来命名每个配置文件，例如，在这里，我已经将凭据文件中的默认配置文件重命名为`docker-in-aws`，因为我已经命名了我的 AWS 帐户`docker-in-aws`:
```
[docker-in-aws]
aws_access_key_id = AKIA***
aws_secret_access_key = d52A***
```
AWS 命令行界面创建的另一个文件是`~/.aws/config`文件，演示如下:
```
[default]
