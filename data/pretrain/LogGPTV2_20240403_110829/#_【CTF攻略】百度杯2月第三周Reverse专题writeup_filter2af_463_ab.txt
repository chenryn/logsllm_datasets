    direc = [-17,17,-1,1]#[up,down,left,right]
    tab = 'BCDFGHJKMPQRTVWXY2346789'
    def de_vm(n):
        global tab
        if n  0:
            if n % 17 == 0:
                return tab[0xc]+tab[23-n/17]
            else:
                return tab[0xf]+tab[23-abs(n)]
    def simp(path):
        tmp = 0
        n_p = []
        for v in path:
            if v == tmp :
                n_p[-1] += v
            else:
                tmp = v
                n_p += [v]
        return n_p
    def search_path(pos,path,last_move):
        global t
        global over
        if pos == 271:
            flag = ''
            for v in simp(path):
                flag += de_vm(v)
            print flag
            over = 1
        if over == 1:
            return
        for v in direc:
            if pos+v in t and last_move+v != 0:
                search_path(pos+v,path+[v],v)
    t = []
    for i in xrange(289):
        tmp = d_6a0[i] ^ d_2c0[i]
        tmp -= d_410[i]
        tmp &= 0xff
        if tmp == d_550[i]:
            t += [i]
    s = ''
    for j in xrange(289):
        if j%17 == 0:
            s += 'n'
        if j in t:
            s += ' '
        else:
            s += '#'
    print s
    over = 0
    search_path(17,[],0)
**by ywway**
这题目坑比较多，，难度比较大，，刚开始的md5就干扰了我大半天，
怎么推理都不对，，后来细心看了一下，出题人将几个值给改掉了。
从 cin 处开始， 是读取字符串的。 然后做一个 变种 md5加密
刚开始以为达到这里就结束了， 就要爆破了。 后来发现还有一块代码用来判断这里的值。 sub_404820
有四张表， 来形成一个高级的迷宫
    (map4 ^ map1) - map2 == map
这一些值会形成一个迷宫
玩一下迷宫就可以把路径找出来， ， 这个还是有意思的
这里输入的有一位是控制上下左右，有一位是控制距离。并且一个是那个字符串前开始找，还有一位是从后往前找的
最后得到flag 为 X6T7X7W7X2T4V2T7V7T7V7T4X4T7XT
**Reverse-2 CrackMe-1**
* * *
**by poyoten**
先试运行下，随便输入，点check，程序似乎阻塞了一段时间。拖进IDA，查看字串，发现有"This is flag"等字样。如图
查看引用此字串的代码位置，其伪代码如图：
sub_401210调用的返回值如果为2345则弹出错误提示对话框，为751则提示正确，如果为5173则调用5173次sleep()，这也是之前试运行出现类似阻塞情况的原因。很明显关键算法在sub_401210中。
继续看sub_401210调用。代码比较长，我就不截图了。
大致过程为先加载一个常量数据到栈中，记为s1，取文本框的值，记为s2。
检查s1的长度不大于20，且s2的长度为s1长度的两倍。s1其实就是"BinGzLFormiChunQiu"，长度为18。所以输入长度就为36。
接着检查s1的字符在[a-z][A-Z]之间，s2的字符在[0-9][A-Z]之间。
再接着初始化两个大小为40的栈区，分别对s1和s2进行变换计算，结果存放于这两个刚初始完的栈区。
最后以4字节为单位进行两个结果栈区比较。如果40字节全部相同则返回751。
下面简单说个两个字串的变换计算。静态分析来看，两个字串计算是相对独立进行的。s1计算后生成相同长度的结果字串；s2两位一计算，最后生成与s1同长度的字串，s2的每两位通过调用sub_401000进行hex解码成单字节。其中的计算过程从代码看比较繁杂。
看到这样的代码，理清这个算法我是拒绝的。仔细分析下，不理算法应该是可以解的。有这么一个推想：s1的计算因为没有s2的参与，所以其结果应该是一个定值，所以先不用理会，后面动态查看就是；s2的计算是按字节进行，各字节独立，输入值的范围是00-FF,为了避免多解，其结果范围也必然是00-FF，而且是以某种规律一一对应的。如果把s2的256种输入对应的结果全部算出来，生成一张表，最后用s1的计算结果查表就可以得出s2。
为了验证推想的正确性，上OD验证下。 输入为"123456789012345678901234567890123456"时的结果为下：
输入为"111111111122222222223333333333444444"时的结果为下：
图中蓝标记的分别为s1和s2的计算结果。与想象得差不多。下面就是计算出00-FF对应的所有结果了，如图：
接下来就是查表了，得出结果为838EFBFFE7D9CDDFCFC4C1C5C7CFC9CBB3C9。
这是一种笨方法，但是有效。比较省时间的应该是改写程序，循环枚举了。
**by wangxiyu**
很容易找到关键判断逻辑
一排AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA输入进去之后发现是16个相同的结果，怀疑是两个为一组进行计算，并且互相独立。AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD
试了一下发现确实是互相独立。然后爆破就好
对应表：
    000102030405060708090A0B0C0D0E0F1011
    0x2f,0x86,0xfd,0xbc,0x5b,0x92,0x69,0x8,0x7,0x3e,0x35,0x14,0x53,0x4a,0x1,0x60,0x9f,0x36,
    12131415161718191A1B1C1D1E1F20212223
    0x6d,0xec,0xb,0x82,0x19,0xf8,0xb7,0x2e,0x25,0x84,0x43,0xba,0xb1,0xd0,0xcf,0xa6,0x1d,0xdc,
    2425262728292A2B2C2D2E2F303132333435
    0x7b,0xb2,0x89,0x28,0xa7,0xde,0x55,0x34,0xf3,0x6a,0xa1,0x0,0x3f,0xd6,0xd,0xc,0xab,0x22,
    363738393A3B3C3D3E3F4041424344454647
    0xb9,0x18,0x57,0x4e,0x45,0xa4,0x63,0xda,0x51,0x70,0x6f,0xc6,0x3d,0xfc,0x9b,0xd2,0xa9,0x48,
    48494A4B4C4D4E4F50515253545556575859
    0x47,0x7e,0x75,0x54,0x93,0x8a,0x41,0xa0,0xdf,0x76,0xad,0x2c,0x4b,0xc2,0x59,0x38,0xf7,0x6e,
    5A5B5C5D5E5F606162636465666768696A6B
    0x65,0xc4,0x83,0xfa,0xf1,0x10,0xf,0xe6,0x5d,0x1c,0xbb,0xf2,0xc9,0x68,0xe7,0x1e,0x95,0x74,
    6C6D6E6F707172737475767778797A7B7C7D
    0x33,0xaa,0xe1,0x40,0x7f,0x16,0x4d,0x4c,0xeb,0x62,0xf9,0x58,0x97,0x8e,0x85,0xe4,0xa3,0x1a,
    7E7F808182838485868788898A8B8C8D8E8F0x91,0xb0,0xaf,0x6,0x7d,0x3c,0xdb,0x12,0xe9,0x88,0x87,0xbe,0xb5,0x94,0xd3,0xca,0x81,0xe0,
    909192939495969798999A9B9C9D9E9FA0A1
    0x1f,0xb6,0xed,0x6c,0x8b,0x2,0x99,0x78,0x37,0xae,0xa5,0x4,0xc3,0x3a,0x31,0x50,0x4f,0x26,