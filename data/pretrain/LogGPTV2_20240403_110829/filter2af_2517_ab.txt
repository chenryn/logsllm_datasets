显而易见地这是一个非常离谱的值，通常此处通过 RegionSize 参数指向域的值确定分配虚拟内存的区域大小，而 0xfffffa8000000000
显然超过了正常用户地址空间的范围。
至于为什么会传入这样无效的值，继续向上探究：
    nt!NtSetInformationProcess:
    `041d659c fff3            push    rbx
    kd> r rdx
    rdx=0000000000000029
    kd> p
    nt!NtSetInformationProcess+0x2:
    `041d659e 56              push    rsi
    `041d659f 57              push    rdi
    `041d65a0 4154            push    r12
    `041d65a2 4155            push    r13
    `041d65a4 4156            push    r14
    `041d65a6 4157            push    r15
    `041d65a8 4881ec10030000  sub     rsp,310h
    `041d65af 488b052a44e8ff  mov     rax,qword ptr [nt!_security_cookie (`0405a9e0)]
    `041d65b6 4833c4          xor     rax,rsp
    `041d65b9 4889842400030000 mov     qword ptr [rsp+300h],rax
    `041d65c1 458bf9          mov     r15d,r9d
    `041d65c4 4d8be0          mov     r12,r8
    `041d65c7 4c8bd1          mov     r10,rcx
    `041d65ca 48894c2458      mov     qword ptr [rsp+58h],rcx
    `041d65cf 4c898424b0000000 mov     qword ptr [rsp+0B0h],r8
    `041d65d7 44897c2474      mov     dword ptr [rsp+74h],r15d
    `041d65dc 654c8b342588010000 mov   r14,qword ptr gs:[188h] ;; Get _KTHREAD pointer
    `041d65e5 4c89b42480000000 mov     qword ptr [rsp+80h],r14
    `041d65ed 418abef6010000  mov     dil,byte ptr [r14+1F6h] ;; PreviousMode
    `041d65f4 33f6            xor     esi,esi
    `041d65f6 403afe          cmp     dil,sil ;; PreviousMode == KernelMode
    `041d65f9 0f8461030000    je      nt!NtSetInformationProcess+0x3c3 (`041d6960)
    `041d6960 bb08000000      mov     ebx,8
    `041d6965 448d6bf9        lea     r13d,[rbx-7]
    `041d6969 e949fdffff      jmp     nt!NtSetInformationProcess+0x11a (`041d66b7)
    `041d66b7 83fa17          cmp     edx,17h
    `041d66ba 0f8f76010000    jg      nt!NtSetInformationProcess+0x299 (`041d6836)
    `041d6836 83fa27          cmp     edx,27h
    `041d6839 0f8e2f010000    jle     nt!NtSetInformationProcess+0x3d1 (`041d696e)
    `041d683f 83ea28          sub     edx,28h
    `041d6842 0f84c95f0600    je      nt! ?? ::NNGAKEGL::`string'+0x4ce75 (`0423c811)
    `041d6848 412bd5          sub     edx,r13d ; r13d=029h
    `041d684b 0f8573030000    jne     nt!NtSetInformationProcess+0x627 (`041d6bc4)
    `041d6851 4883cbff        or      rbx,0FFFFFFFFFFFFFFFFh
    `041d6855 4c3bd3          cmp     r10,rbx
    `041d6858 0f850b5f0600    jne     nt! ?? ::NNGAKEGL::`string'+0x4cdbf (`0423c769)
    `041d685e 4183ff28        cmp     r15d,28h
    `041d6862 0f85155f0600    jne     nt! ?? ::NNGAKEGL::`string'+0x4cdd3 (`0423c77d)
    `041d6868 403afe          cmp     dil,sil
    `041d686b 0f85d8030000    jne     nt!NtSetInformationProcess+0x6ac (`041d6c49)
    `041d6871 4c8bfe          mov     r15,rsi
    `041d6874 458b3424        mov     r14d,dword ptr [r12]
    `041d6878 4183fe40        cmp     r14d,40h
    `041d687c 0f87f15e0600    ja      nt! ?? ::NNGAKEGL::`string'+0x4cdc9 (`0423c773)
    `041d6882 418b44240c      mov     eax,dword ptr [r12+0Ch]
    `041d6887 410b442408      or      eax,dword ptr [r12+8]
    `041d688c 410b442404      or      eax,dword ptr [r12+4]
    `041d6891 0f85dc5e0600    jne     nt! ?? ::NNGAKEGL::`string'+0x4cdc9 (`0423c773)
    `041d6897 4983c410        add     r12,10h
    `041d689b 49393424        cmp     qword ptr [r12],rsi
    kd> r r12
    r12=fffff88003aefd98
    kd> p
    `041d689f 0f84215f0600    je      nt! ?? ::NNGAKEGL::`string'+0x4ce23 (`0423c7c6)
    `041d68a5 49ba1400000080f7ffff mov r10,0FFFFF78000000014h
    `041d68af 4d8b12          mov     r10,qword ptr [r10]
    `041d68b2 0f31            rdtsc
    `041d68b4 48c1e220        shl     rdx,20h
    `041d68b8 480bc2          or      rax,rdx
    `041d68bb 4c03d0          add     r10,rax
    `041d68be 4183e21f        and     r10d,1Fh
    `041d68c2 4503d5          add     r10d,r13d
    `041d68c5 4d8b1c24        mov     r11,qword ptr [r12] ;; 从r12指向地址取值赋给r11
    `041d68c9 4c899c24f8000000 mov     qword ptr [rsp+0F8h],r11 ;; 为[rsp+0F8h]变量赋值
    `041d68d1 65488b042588010000 mov   rax,qword ptr gs:[188h]
    `041d68da 488b4870        mov     rcx,qword ptr [rax+70h]
    `041d68de 0fbaa13c04000011 bt      dword ptr [rcx+43Ch],11h
    `041d68e6 0f823e010000    jb      nt!NtSetInformationProcess+0x48d (`041d6a2a)
    `041d68ec 4d8b4c2408      mov     r9,qword ptr [r12+8]
    `041d68f1 4c3bce          cmp     r9,rsi
    `041d68f4 0f85d65e0600    jne     nt! ?? ::NNGAKEGL::`string'+0x4ce2d (`0423c7d0)
    `0423c7d0 4983f920        cmp     r9,20h
    `0423c7d4 7217            jb      nt! ?? ::NNGAKEGL::`string'+0x4ce51 (`0423c7ed)
    `0423c7d6 498bc9          mov     rcx,r9
    `0423c7d9 e8423fc8ff      call    nt!RtlFindMostSignificantBit (`03ec0720)
    `0423c7de 0fbec8          movsx   ecx,al
    `0423c7e1 b83f000000      mov     eax,3Fh
    `0423c7e6 2bc1            sub     eax,ecx
    `0423c7e8 4c63c8          movsxd  r9,eax
    `0423c7eb eb04            jmp     nt! ?? ::NNGAKEGL::`string'+0x4ce55 (`0423c7f1)
    `0423c7f1 4983f935        cmp     r9,35h
    `0423c7f5 0f8739a2f9ff    ja      nt!NtSetInformationProcess+0x497 (`041d6a34)
    `0423c7fb e9faa0f9ff      jmp     nt!NtSetInformationProcess+0x35d (`041d68fa)
    `041d68fa 4d8d6c2410      lea     r13,[r12+10h]
    `041d68ff 4c896c2420      mov     qword ptr [rsp+20h],r13
    `041d6904 4533c0          xor     r8d,r8d
    `041d6907 498bd3          mov     rdx,r11
    `041d690a 418bca          mov     ecx,r10d
    `041d690d e8863e0000      call    nt!MiScanUserAddressSpace (`041da798)
    `041d6912 8bc8            mov     ecx,eax
    `041d6914 3bc6            cmp     eax,esi
    `041d6916 7c28            jl      nt!NtSetInformationProcess+0x3a3 (`041d6940)
    `041d6940 3bce            cmp     ecx,esi
    `041d6942 0f8cec000000    jl      nt!NtSetInformationProcess+0x497 (`041d6a34)
    `041d6a34 498d542410      lea     rdx,[r12+10h]
    `041d6a39 488932          mov     qword ptr [rdx],rsi
    `041d6a3c 410fbaee0d      bts     r14d,0Dh
    `041d6a41 c744242804000000 mov     dword ptr [rsp+28h],4
    `041d6a49 4489742420      mov     dword ptr [rsp+20h],r14d
    `041d6a4e 4c8d8c24f8000000 lea     r9,[rsp+0F8h] ;; 取[rsp+0F8h]变量的地址给r9寄存器
    `041d6a56 4d8b442408      mov     r8,qword ptr [r12+8]
    `041d6a5b 488bcb          mov     rcx,rbx
    `041d6a5e e87da4d0ff      call    nt!ZwAllocateVirtualMemory (`03ee0ee0)
    kd> p
    nt!NtSetInformationProcess+0x4c6:
    `041d6a63 8bc8            mov     ecx,eax
    kd> r rax
    rax=00000000c00000f2
    kd> r rsp
    rsp=fffff88003aef820
    kd> dq rsp+0x0f8 l1
    fffff880`03aef918  fffff800`00000000
    kd> dq fffff88003aefd98 l1
    fffff880`03aefd98  fffff800`00000000
函数定义：
    NTSTATUS
    NTAPI
    NtSetInformationProcess (
        IN HANDLE           ProcessHandle,
        IN PROCESSINFOCLASS ProcessInformationClass,
        IN PVOID            ProcessInformation,
        IN ULONG            ProcessInformationLength
        );
其中第二个参数是定义设置进程信息的类型。根据上面的指令执行路径得知，这次调用传递给该函数的第二个参数值为0x29，根据 PROCESSINFOCLASS
定义：
    typedef enum _PROCESSINFOCLASS {
        ...
        ProcessThreadStackAllocation = 0x29, // 0x29, 41
        ...
    } PROCESSINFOCLASS;
进程信息类型为 0x29 时表示设置进程的线程栈分配信息。
在这次 NtSetInformationProcess 函数调用中，可以看到传入 ZwAllocateVirtualMemory
函数的第四个参数来自它自身第三个参数 r8 寄存器指向的结构体对象基址 +10 偏移的域值。
第三个参数是 ProcessInformation，指向一个由调用者分配的缓冲区，作为用于提供指定的进程信息类型所需的各种数据的结构。
在该函数调用初期查看这个缓冲区中的数据：
    kd> dq 0xfffff880`03aefd88
    fffff880`03aefd88  00000000`00000000 00000000`00000000
    fffff880`03aefd98  fffff880`00000000 00000000`00000000
    fffff880`03aefda8  00000000`00000000 00000000`00000000
可以确定的是上级函数传入 NtSetInformationProcess 的第三个参数时缓冲区中的数据就是这样的，就是说偏移为 +10h 位置的域其值为
0xFFFFF88000000000 这种异常的值。
所以此时继续向上探究。在 nt!RtlCreateUserStack 函数首地址下断点捕获其调用路径：
    nt!RtlCreateUserStack:
    `041cf104 4c89442418      mov     qword ptr [rsp+18h],r8
    `041cf109 4889542410      mov     qword ptr [rsp+10h],rdx
    `041cf10e 48894c2408      mov     qword ptr [rsp+8],rcx
    `041cf113 53              push    rbx
    `041cf114 56              push    rsi