## 如何解决这五个问题？
### 问题一：如何规定远程调用的语法？客户端如何告诉服务端，我是一个加法，而另一个是乘法。我是用字符串"add"传给你，还是传给你一个整数，比如1 表示加法，2表示乘法？服务端该如何告诉客户端，我的这个加法，目前只能加整数，不能加小数，不能加字符串；而另一个加法"add1"，它能实现小数和整数的混合加法。那返回值是什么？正确的时候返回什么，错误的时候又返回什么？``{=html}
### 问题二：如果传递参数？我是先传两个整数，后传一个操作符"add"，还是先传操作符，再传两个整数？是不是像咱们数据结构里一样，如果都是UDP，想要实现一个逆波兰表达式，放在一个报文里面还好，如果是TCP，是一个流，在这个流里面，如何将两次调用进行分界？什么时候是头，什么时候是尾？别这次的参数和上次的参数混了起来，TCP一端发送出去的数据，另外一端不一定能一下子全部读取出来。所以，怎么才算读完呢？
### 问题三：如何表示数据？在这个简单的例子中，传递的就是一个固定长度的 int值，这种情况还好，如果是变长的类型，是一个结构体，甚至是一个类，应该怎么办呢？如果是int，不同的平台上长度也不同，该怎么办呢？在网络上传输超过一个 Byte 的类型，还有大端 Big Endian 和小端 LittleEndian 的问题。假设我们要在 32 位四个 Byte 的一个空间存放整数 1，很显然只要一个 Byte 放1，其他三个 Byte 放 0 就可以了。那问题是，最后一个 Byte 放 1呢，还是第一个 Byte 放 1 呢？或者说 1 作为最低位，应该是放在 32位的最后一个位置呢，还是放在第一个位置呢？最低位放在最后一个位置，叫作 Little Endian，最低位放在第一个位置，叫作Big Endian。TCP/IP 协议栈是按照 Big Endian 来设计的，而 X86 机器多按照Little Endian 来设计的，因而发出去的时候需要做一个转换。
### 问题四：如何知道一个服务端都实现了哪些远程调用？从哪个端口可以访问这个远程调用？假设服务端实现了多个远程调用，每个可能实现在不同的进程中，监听的端口也不一样，而且由于服务端都是自己实现的，不可能使用一个大家都公认的端口，而且有可能多个进程部署在一台机器上，大家需要抢占端口，为了防止冲突，往往使用随机端口，那客户端如何找到这些监听的端口呢？
### 问题五：发生了错误、重传、丢包、性能等问题怎么办？本地调用没有这个问题，但是一旦到网络上，这些问题都需要处理，因为网络是不可靠的，虽然在同一个连接中，我们还可通过TCP协议保证丢包、重传的问题，但是如果服务器崩溃了又重启，当前连接断开了，TCP就保证不了了，需要应用自己进行重新调用，重新传输会不会同样的操作做两遍，远程调用性能会不会受影响呢？
## 协议约定问题看到这么多问题，你是不是想起了我[第一节](https://time.geekbang.org/column/article/7581)讲过的这张图。![](Images/0dd096871c0b4c5849c3fb709f136573.png){savepage-src="https://static001.geekbang.org/resource/image/98/ab/984b421d4e13d42e2b0500d0427d94ab.jpg"}本地调用函数里有很多问题，比如词法分析、语法分析、语义分析等等，这些编译器本来都能帮你做了。但是在远程调用中，这些问题你都需要重新操心。很多公司的解决方法是，弄一个核心通信组，里面都是 Socket编程的大牛，实现一个统一的库，让其他业务组的人来调用，业务的人不需要知道中间传输的细节。通信双方的语法、语义、格式、端口、错误处理等，都需要调用方和被调用方开会商量，双方达成一致。一旦有一方改变，要及时通知对方，否则通信就会有问题。可是不是每一个公司都有这种大牛团队，往往只有大公司才配得起，那有没有已经实现好的框架可以使用呢？当然有。一个大牛 Bruce Jay Nelson 写了一篇论文[Implementing RemoteProcedureCalls](http://www.cs.cmu.edu/~dga/15-712/F07/papers/birrell842.pdf)，定义了RPC 的调用标准。后面所有 RPC 框架，都是按照这个标准模式来的。![](Images/d809f515ef3a41a2ed825102ed42f210.png){savepage-src="https://static001.geekbang.org/resource/image/85/25/8534c52daf3682cd1cfe5a3375ec9525.jpg"}当客户端的应用想发起一个远程调用时，它实际是通过本地调用本地调用方的Stub。它负责将调用的接口、方法和参数，通过约定的协议规范进行编码，并通过本地的RPCRuntime 进行传输，将调用网络包发送到服务器。服务器端的 RPCRuntime 收到请求后，交给提供方 Stub进行解码，然后调用服务端的方法，服务端执行方法，返回结果，提供方 Stub将返回结果编码后，发送给客户端，客户端的 RPCRuntime 收到结果，发给调用方Stub 解码得到结果，返回给客户端。这里面分了三个层次，对于用户层和服务端，都像是本地调用一样，专注于业务逻辑的处理就可以了。对于Stub 层，处理双方约定好的语法、语义、封装、解封装。对于RPCRuntime，主要处理高性能的传输，以及网络的错误和异常。最早的 RPC 的一种实现方式称为 Sun RPC 或 ONC RPC。Sun公司是第一个提供商业化 RPC 库和 RPC 编译器的公司。这个 RPC 框架是在 NFS协议中使用的。NFS（Network File System）就是网络文件系统。要使 NFS成功运行，要启动两个服务端，一个是 mountd，用来挂载文件路径；一个是nfsd，用来读写文件。NFS 可以在本地 mount一个远程的目录到本地的一个目录，从而本地的用户在这个目录里面写入、读出任何文件的时候，其实操作的是远程另一台机器上的文件。操作远程和远程调用的思路是一样的，就像操作本地一样。所以 NFS协议就是基于 RPC 实现的。当然无论是什么 RPC，底层都是 Socket 编程。![](Images/f0bb5270e2961e2fce143145871c7dbe.png){savepage-src="https://static001.geekbang.org/resource/image/2a/eb/2a0fd84c2d3dced623511e2a5226d0eb.jpg"}XDR（External DataRepresentation，外部数据表示法）是一个标准的数据压缩格式，可以表示基本的数据类型，也可以表示结构体。这里是几种基本的数据类型。![](Images/f65bd7b7a2ff4d7dd7593ded074659a9.png){savepage-src="https://static001.geekbang.org/resource/image/4a/af/4a649954fea1cee22fcfa8bdb34c03af.jpg"}在 RPC 的调用过程中，所有的数据类型都要封装成类似的格式。而且 RPC的调用和结果返回，也有严格的格式。-   XID 唯一标识一对请求和回复。请求为 0，回复为 1。-   RPC 有版本号，两端要匹配 RPC 协议的版本号。如果不匹配，就会返回    Deny，原因就是 RPC_MISMATCH。-   程序有编号。如果服务端找不到这个程序，就会返回 PROG_UNAVAIL。-   程序有版本号。如果程序的版本号不匹配，就会返回 PROG_MISMATCH。-   一个程序可以有多个方法，方法也有编号，如果找不到方法，就会返回    PROC_UNAVAIL。-   调用需要认证鉴权，如果不通过，则 Deny。-   最后是参数列表，如果参数无法解析，则返回 GABAGE_ARGS。![](Images/c6fb1a18fd13b189d69427bbdd913b35.png){savepage-src="https://static001.geekbang.org/resource/image/c7/65/c724675527afdbd43964bdf24684fa65.jpg"}为了可以成功调用 RPC，在客户端和服务端实现 RPC的时候，首先要定义一个双方都认可的程序、版本、方法、参数等。![](Images/8c055db28f4919b107ff3d23beb60712.png){savepage-src="https://static001.geekbang.org/resource/image/5c/58/5c3ebb31ac4415d7895247bf8758fa58.jpg"}如果还是上面的加法，则双方约定为一个协议定义文件，同理如果是 NFS、mount和读写，也会有类似的定义。有了协议定义文件，ONC RPC会提供一个工具，根据这个文件生成客户端和服务器端的 Stub 程序。![](Images/001569fbc50e8dd12ff6495117038933.png){savepage-src="https://static001.geekbang.org/resource/image/27/b9/27dc1ccd0481408055c87e0e5d8b02b9.jpg"}最下层的是 XDR文件，用于编码和解码参数。这个文件是客户端和服务端共享的，因为只有双方一致才能成功通信。在客户端，会调用 clnt_create 创建一个连接，然后调用 add_1，这是一个 Stub函数，感觉是在调用本地一样。其实是这个函数发起了一个 RPC 调用，通过调用clnt_call 来调用 ONC RPC的类库，来真正发送请求。调用的过程非常复杂，一会儿我详细说这个。当然服务端也有一个 Stub程序，监听客户端的请求，当调用到达的时候，判断如果是add，则调用真正的服务端逻辑，也即将两个数加起来。服务端将结果返回服务端的 Stub，这个 Stub 程序发送结果给客户端，客户端的Stub 程序正在等待结果，当结果到达客户端Stub，就将结果返回给客户端的应用程序，从而完成整个调用过程。有了这个 RPC的框架，前面五个问题中的前三个"如何规定远程调用的语法？""如何传递参数？"以及"如何表示数据？"基本解决了，这三个问题我们统称为**协议约定问题**。