        var V = (0,
        eval)(w);
        if (typeof V === i[6]) {
            for (var h in V) {
                if (V[i[7]](h) && typeof V[h] === i[8]) {
                    V[h][i[9]] = V[h][i[10]] = function() {
                        return i[2];
                    }
                    ;
                }
            }
        }
        (function x7(O) {
            if (typeof O === i[6]) {
                for (var p in O) {
                    if (O[i[7]](p)) {
                        if (typeof O[p] === i[8]) {
                            O[p][i[9]] = O[p][i[10]] = function() {
                                return i[2];
                            }
                            ;
                        } else if (typeof O[p] === i[6]) {
                            x7(O[p]);
                        }
                    }
                }
            }
        }
        )(V);
        if (typeof V !== i[11])
            V[i[9]] = V[i[10]] = function() {
                return i[2];
            }
            ;
        return V;
    } catch (O) {
        return function() {}
        ;
    }
我们将断点设在`var V = (0,eval)(w);`一句，在Watch区域监视w和c8i，然后重新运行代码，断在了第219行，可以看到w是一串乱码。
因此`eval`语句报错。  
上面这段代码使用了大量的变量用以混淆，实际上其流程是：获取到自身方法B的代码，并参与运算，得到一个w，然后运行w并捕获异常，若无异常，程序向下执行，最终返回对象V，若发生异常，则会导致返回一个空方法，导致`c8i`为空，从而使得后续代码调用`c8i`相关方法失败，显然这就是上面console报错的原因了。  
即，对原始代码的修改，如格式化、注释，都将导致`c8i`为空，但如果不修改，其代码片段开头的`debugger`将导致代码持续断在代码开头，无法向下运行，即使禁用断点，也会导致后面无法使用断点进行动态分析，从而增加分析的难度。  
为了解决这个问题，我们可以在格式化后的代码中注入原始代码字符串，由于代码原本是获取到自身代码，并转为字符串，因此我们只要将其替换为原始代码字符串即可。  
或者采用另外一种方法，即从开发者工具的代码虚拟机中调出`c8i`。  
由于未分析完全，第一种方法由于不知名的原因导致失败，我们采用了第二种方式。  
同样的，禁用断点，运行原始代码，esc调出console，查看`c8i`，点开其中任一方法，查看其定义。
进入定位B7的定义代码片段
成功在代码虚拟机里找到了`c8i`的完整定义。删除其中的`debugger`相关代码，并用该定义替换原先代码中`c8i`的定义。  
运行后也报了`module`的错，说明成功了。  
接下来修复`module`报错。  
定位代码为
    if (typeof module !== y && module[k]) {
根据上下文可判断其为flash相关代码，因此我在[GitHub](https://github.com/hotmit/django-lazifier/blob/83a1e54581758cee05cbaaa664fa6a3c49456760/django_lazifier/utils/static/lazifier/js/js-utils/js-utils.js)寻找了相关代码作为参考。  
向上查找y的定义`y = c8i.X4O("d8d8") ? "ShockwaveFlash.ShockwaveFlash" :
'undefined'`，修改为`undefined`  
修改后运行，错误如下
    true_orgin:515 Uncaught TypeError: p[A] is not a function
        at v (:515:19)
        at :519:13
        at :521:6
        at :597:2
定位代码如下
    g[p[A](K)] = O;    //即g.toBase64URI.activeXDetectRules(0)
查找A的定义`A = c8i.n4O("4a") ? "activeXDetectRules" : "charAt"`，修改为`charAt`
    g[p.charAt(K)] = O;
再次运行，错误如下
    true_orgin:1247 Uncaught TypeError: Cannot set property 'calculate' of undefined
        at :1247:31
定位到1247行的31列，其设置了`Challenge`对象的方法，根据提示可以看出是`Challenge`的`prototype`不存在导致的
    Challenge.prototype.calculate = function() {
跳转到`Challenge`的定义处
    var Challenge = c8i.k4O("b6d3") ? function(O) {
        this[c8i.X7O] = c8i.a4O("7a") ? O : "re_utob";
        this[c8i.y8O] = c8i.r4O("73") ? '-' : Base64;
    }
    : "version";
显然由于字符串不存在`prototype`属性从而报错，这里经过了一个三元运算，未被选择的正是正确代码段，我们将其更正为方法。  
再次运行，错误如下
    true_orgin:1247 Uncaught TypeError: this[c8i.y8O][c8i.n8O] is not a function
        at Challenge.calculate (:1247:43)
        at :1312:15
定位后确定是`calculate`方法有问题，格式化后代码如下
    Challenge.prototype.calculate = function() {
        this["data"] = this["instance"]["encode"](this["data"]);
        return this;
    }
向上查找，依然是`Challenge`方法有问题，`Challenge.instance.encode`方法不存在，修正后如下
    var Challenge = function(O) {
        this["data"] = O;
        this["instance"] = Base64;
    };
回过头看`calculate`的代码，大意是将`data`属性编码用base64，但由于Base64并未定义，相关代码需要修正，因此我们在相关调用编码的代码部分，手动赋值编码后的字符串。  
另外为了避免由于Base64未定义导致的报错，将`this["instance"] = Base64;`改成`this["instance"] =
"Base64";`。  
由于`calculate`方法无法使用，因此将断点设在`calculate`。
根据调用栈定位调用处，调用处代码美化后如下
    dummy["calculate"]()["secondRound"](versioncheck);
跟进查看dummy定义
    var dummy = new Challenge(navigator["userAgent"])
      , versioncheck = FlashDetect["installed"];
可以看到，其`data`属性即浏览器User-Agent，同时检测了Flash插件的安装情况。  
为避免不必要的麻烦，此处我们替换`navigator["userAgent"]`为准确UA字符串，同时开启chrome默认关闭的flash。  
至此，`dummy`对象的data属性保存了UA，并将`data`进行base64编码。  
继续跟进`secondRound`方法。
    Challenge.prototype.secondRound = function(O) {
        var p = "b64";
        this["data"] = O + this[p](this["data"]);
        this["data"] = this[p](this["data"]);
    }
我们再查找一下`b64`的定义
    Challenge.prototype.b64 = function(O) {
        return this["instance"]["data"](O);
    }
可以知道，其大意是返回data属性编码后的字串。  
则`secondRound`方法流程为：将`data`编码，再加入flash版本，再编码，替换`data`。  
完成后代码向下执行。
    var versioncheck = dummy["get"](), kj4kjhkj43w980 = "error.js";
其中`get`方法用于获取到`data`属性值。  
此时`versioncheck`为编码后的Flash版本和UA，代码向下执行。
    if (dummy["checkFirst"](versioncheck)) {
        kj4kjhkj43w980 = CryptoJS["SHA1"](dummy["lkslkj5lkj"]());
    }
其中`lkslkj5lkj`方法获取到的是浏览器UA。  
跟进`checkFirst`
    Challenge.prototype.checkFirst = function(O) {
        var p = "U2hvY2t3YXZlIEZsYXNoIDIwLjAgcjBWRmM1Tm1GWGVITlpVemd4VEdwQlowdEdaSEJpYlZKMlpETk5aMVJzVVdkT2FUUjRUM2xDV0ZReFl6Sk9RMnRuVVZoQ2QySkhWbGhhVjBwTVlWaFJkazVVVFROTWFrMHlTVU5vVEZOR1VrNVVRM2RuWWtkc2NscFRRa2hhVjA1eVlubHJaMUV5YUhsaU1qRnNUSHBSTTB4cVFYVk5hbFY1VG1rME5FMURRbFJaVjFwb1kyMXJkazVVVFROTWFrMHk="
          , N = "E5";
        if (c8i[N](O, p)) {
            return c8i.e8O;
        }
        return c8i.j7O;
    }
其中`c8i.E5`方法起到判断相等的作用。  
我们将p解码几次，即可得到要求的版本
    Shockwave Flash 20.0 r0
和
    Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.80 Safari/537.36
随后将UA用sha1计算，这里我们将其替换为所需的UA字串。
    kj4kjhkj43w980 = CryptoJS["SHA1"]("Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.80 Safari/537.36");
代码向下执行
    var suffix = new Array();
    suffix[c8i.q3] = parseInt(dummy["doGet"](c8i.b3));
    suffix[c8i.Q3] = parseInt(dummy["doGet"](c8i.h8O));
    suffix[c8i.W3] = dummy["doGet"](c8i.S8O);
    suffix[c8i.u3] = dummy["doGet"](c8i.X9);
    suffix[c8i.E3] = dummy["doGet"](c8i.s3);
    c8i[c8i.u9]();
    suffix[5] = suffix[5]["toString"]();
    if (c8i["U5"](suffix[5]["length"], 6) && c8i["p3"](CryptoJS["SHA1"](suffix[5]), "be084fcf0f18867dd613af99c8cff52bdfa6037f")) {
        kj4kjhkj43w980 += suffix[5] + ".js";
    }
方法`U5`和`p3`用于判断相等，`doGet`方法用于获取url中指定参数的值。  
这里`suffix[5]`由`suffix[c8i.q3] suffix[c8i.Q3] suffix[c8i.W3] suffix[c8i.u3]
suffix[c8i.E3]`计算得出，我们不再从url加入查询语句，直接为`suffix[5]`赋所需的值。
    if (c8i["U5"](suffix[5]["length"], 6) && c8i["p3"](CryptoJS["SHA1"](suffix[5]), "be084fcf0f18867dd613af99c8cff52bdfa6037f"))
由该判断语句可知，`suffix[5]`长度理应为6，且SHA1计算值为`be084fcf0f18867dd613af99c8cff52bdfa6037f`，根据上方相应代码，我们还可得知，`suffix[5]`为数字，根据以上提示，我们可以写出爆破算法，寻找该六位的数字，或者到相关解密站点进行解密。  
解得明文为124341。  
判断成功后，引入了变量`kj4kjhkj43w980`所代表的js文件。
代码段先定义了一个`r9i`对象，随后定义了相关方法。  
我们查看最后的判断分支。
`!error`和`alert alert-success`提示我们上面是正确的分支。  
试着调试运算开始处的代码：
    var flag = r9i.u4("25") ? r9i.D : '%20'
      , data = r9i.L4("141d") ? r9i.d : "No FLAG for you"
      , error = r9i.l4("58a3") ? "nKUp5vr4JC7zsxR3pI2dS7J" : r9i.f;
我们通过查看当前值可以发现，此时`data`赋值为`"No FLAG for
you"`，`error`赋值为`"nKUp5vr4JC7zsxR3pI2dS7J"`，由此将导致无法进入正确分支，因此我们需要修改代码。  
根据`data`和`error`的提示，我们将flag的赋值也进行修正，然后继续向下执行
    if (r9i["g"](aslkddalkj3("klsdslk2"), "Beast")) {    //如果url中参数klsdslk2值为Beast的话，进入这条分支
        var lkejtlkjw = r9i.J4("dd") ? "lkfejskl4kjlkfejskl4kjlkjtrlkfejskl4kjlkjtrlkfejskl4kjlkjtrlkfejskl4kjlkjtrlkfejskl4kjlkjtrlkfejskl4kjlkjtrlkfejskl4kjlkjtrlkfejskl4kjlkjtrlkfejskl4kjlkjtrlkfejskl4kjlkjtrlkfejskl4kjlkjtrlkfejskl4kjlkjtrlkfejskl4kjlkjtrlkfejskl4kjlkjtrlkfejskl4kjlkjtrlkfejskl4kjlkjtrlkfejskl4kjlkjtrlkfejskl4kjlkjtrlkfejskl4kjlkjtrlkfejskl4kjlkjtrlkfejskl4kjlkjtrlkfejskl4kjlkjtrlkfejskl4kjlkjtrlkfejskl4kjlkjtrlkfejskl4kjlkjtrlkfejskl4kjlkjtrlkfejskl4kjlkjtrlkfejskl4kjlkjtrlkfejskl4kjlkjtrlkfejskl4kjlkjtrlkfejskl4kjlkjtrlkfejskl4kjlkjtrlkjtr" : sdflkdsflklkjfddddd(r9i.o);
        data += r9i.I4("b71") ? r9i.S : "lkasdlkdsa";
    } else {
        var t = r9i.v4("bc") ? function(i) {
            data = r9i.S4("c8dc") ? i : "flag";
        }
        : ""
          , M = r9i.O4("13d") ? function(i) {
            error = i;
        }
        : "lkasdlkdsa";
        t(r9i.O);
        M(r9i.Q);
    }
当url中参数`klsdslk2`值为`Beast`时，可进入上方分支，考虑到标题为`Beauty and the
beast`，因此上方可能是正确代码段。此处url相关参数不参与任何计算，因此我们直接将其判断语句修改为true，进入上方语句。  
最后再根据报错和题目提示，改几处三元运算的赋值，即可拿到FLAG。  
最后在原页面运行相关代码段，可以看到flag被揭开的效果，呼应了次标题中的`reveal the flag`。
[Link](https://ringzer0team.com/challenges/211)