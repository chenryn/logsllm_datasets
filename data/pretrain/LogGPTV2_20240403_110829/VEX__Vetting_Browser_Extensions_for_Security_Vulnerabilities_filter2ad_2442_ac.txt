i=1
n pi
new ) nσ(cid:48)(cid:48) = fresh() = n 0
new dσ(cid:48)(cid:48) = ∅
n(cid:83)
new = fresh()
{(n 0
new , i, n pi
new )})
n(cid:83)
i=1
i=1
new , i)})
new , n 0
new )} ∪ (
n(cid:83)
i=1
where, d(cid:48) =
(∃(n(cid:48), i) ∈ dm σ.dσi )
(n pi
new , n 0
new ))
n(cid:83)
(f, σ) ⇓ σ(cid:48)(cid:48) nσ(cid:48)(cid:48) = ⊥ (e1, σ) ⇓ σ1
(f (e1, . . . , en), σ) ⇓ (ns σ, ⊥,
. . .
(en, σ) ⇓ σn
(FUN-CALL2)
dσi , fr σ, dm σ, tm σ))
i=1
Figure 3: Semantics for all core expressions except new.
graph where the new object node is linked to the proper-
ties with the labeled edges.
A function deﬁnition((FUN-DEF)) is treated in a simi-
lar fashion as the object literal, except that new summary
locations are created for each of the function arguments
new ). The function
and also for the return variable (i.e. n RET
body is evaluated with respect to the new heap. The re-
sult of the evaluation is the new heap with the function
summary attached to the node n RET
new . A function call(rule
(FUN-CALL1)) uses this summary to compute the node
and dependencies of the return value. The return value
of the function can be obtained by evaluating each of the
function argument expressions, and replacing the appro-
priate nodes in the function summary with the values re-
turned. If the function is not deﬁned, then the dependen-
cies of the return values are the union of dependencies of
the individual function parameters(rule (FUN-CALL2)).
A constructor expression (containing new) is similar to a
function call, where if the object being instantiated is re-
trieved from the local or the global scope, then a copy of
the graph starting with this object is created and returned.
Evaluating statements:
The statement semantics are given in Figure 4. A vari-
able declaration(VAR. DECL.) creates a new node in
the current scope. If the heap node for that variable al-
ready exists, it is replaced by this new node. The as-
signment statement (rules (ASSIGN1) and (ASSIGN2))
evaluates the left hand side and the right hand side ex-
pressions, replaces the node on the left hand side with
the node on the right hand side. Note that conditionals in
if-then-else and while statements are, of course,
not evaluated as our heaps are symbolic. The while state-
7
.
(skip, σ) ⇓ σ
(SKIP)
(C1, σ) ⇓ σ(cid:48)
(C2, σ(cid:48)) ⇓ σ(cid:48)(cid:48)
(C1; C2, σ) ⇓ σ(cid:48)(cid:48)
(SEQ)
(nσ, x, nx) ∈ fr σ
(var x, σ) ⇓ (ns, nσ, dσ, f r, dm σ, tm)
(VAR.DECL.)
(e, σ) ⇓ σ(cid:48)(cid:48)
(x, σ) ⇓ σx
(x := e, σ) ⇓ (ns, nσ, dσ, f r, dm, tm)
(ASSIGN1)
(e, σ) ⇓ σ(cid:48)(cid:48)
(x, σ) ⇓ σx
(x.f, σ) ⇓ σf
(x.f := e, σ) ⇓ σ(cid:48)
(ASSIGN2)
(S1, σ) ⇓ σ1
(if e then S1 else S2, σ) ⇓ (ns σ1 ∪ ns σ2 , nσ, dσ, fr σ1
(S1, σ) ⇓ σ(cid:48)
(S1, σ) ⇓ σ(cid:48)
(while e do S1 od , σ) ⇓ σ(cid:48) (WHILE1)
where, ns = (ns σ ∪ {nnew}) \ {nx}
f r = (fr σ \ {(nσ, x, nx)}) ∪ {(nσ, x, nnew )}
tm = tm σ ∪ {(nnew , nσ)}
where, ns = ns σx ∪ ns σ(cid:48)(cid:48)
f r = (fr σ(cid:48)(cid:48) \ {(nσ, x, nσx )}) ∪ {(nσ, x, nσ(cid:48)(cid:48) )}
dm = dm σ(cid:48)(cid:48)
tm = tm σ ∪ {(nσ(cid:48)(cid:48) , tm σx (nσx ))}
dσ(cid:48) = dσ
where, nσ(cid:48) = nσ
fr σ(cid:48) = (fr σ(cid:48)(cid:48) \ {(nσx , f, nσf )}) ∪ {(nσx , f, nσ(cid:48)(cid:48) )}
dm σ(cid:48) = dm σ(cid:48)(cid:48) ∪ {(nσ(cid:48)(cid:48) , y)|y ∈ dσx} ∪ {(nσx , y)|y ∈ dσ(cid:48)(cid:48)}
tm σ(cid:48) = tm σ ∪ {(nσ(cid:48)(cid:48) , nσx )}
(S2, σ) ⇓ σ2
∪ fr σ2
, dm σ1 ∪ dm σ2 , tm σ1 ∪ tm σ2 )
(COND)
(while e do S1 od , σ(cid:48)) ⇓ σ(cid:48)(cid:48)
(while e do S1 od , σ) ⇓ σ(cid:48)(cid:48)
(WHILE2)
(return e, σ) ⇓ (ns σ(cid:48) , nσ, dσ, fr σ(cid:48) ∪ {(nσ, RET, nσ(cid:48) )}, dm σ(cid:48) , tm σ(cid:48) )
(e, σ) ⇓ σ(cid:48)
(RET)
Figure 4: Statement semantics.
ment is interesting: we evaluate the while body till we
reach a ﬁxed point (or till we reach a ﬁxed number of
loop un-rollings) as depicted in (WHILE2). However,
notice that the abstract heap is also allowed to immedi-
ately go across a while-loop (WHILE1). The semantics
for the rest of the statements is standard.
Given the above rules for abstract heaps, we start ana-
lyzing the JavaScript program using an initial state con-
sisting of a global heap, represented by node nG. This
global heap consists of summaries for a few built-in ob-
jects like Array. We evaluate the rules either till we
converge on a least ﬁxed-point, or till we reach a preset
bound on the number of iterations.
4.2 Handling other features of JavaScript
Dynamic code: The eval method in JavaScript allows
execution of dynamically formed code, and is widely
used in browser extensions. While an accurate analysis
of the structure of dynamically created code is a research
topic in itself, and quite out of the scope of this paper,
we cannot simply ignore eval statements. Our approach
has been to implement a static constant-string analysis
for strings and subject the strings that are eval-ed to this
analysis. Our static analysis engine inserts these constant
strings into the code (as though it was static code), parses
it, and computes the ﬂows for them. Strings that are not
statically known but subject to eval are essentially ig-
nored, and this causes our tool to be unsound (see a later
note on unsoundness).
In most correct extensions, an
eval-ed statement is dynamically chosen from a set of
constant-strings or taken from trusted sources. Note that
if there is a ﬂow from an untrusted source to an eval,
VEX will catch this ﬂow, as it is a vulnerable ﬂow pat-
tern.
innerHTML: Modiﬁcations of the innerHTML of an
HTML page by the extension makes the analysis con-
siderably more complex. For instance, if a function
a() calls function b() that calls function c(), and
c()makes innerHTML modiﬁcations, it is hard to sum-
marize this effect in the summary of c(), as the source
of the ﬂow is not locally available. We handle this by cre-
ating a symbolic representation of the source, computing
summaries of innerHTML using this symbolic source,
and allowing outside methods to instantiate the symbolic
source to a concrete source in whichever context it be-
comes available.
Object properties accessed in the form of associative
arrays: In JavaScript, objects are treated as associative
arrays. This means that any property of the object can be
accessed using the array notation. Array indices could
be constant strings, which are then evaluated to get the
actual property being accessed; or they could be num-
bers, which indicate the property number that is being
8
accessed; or they could be variables, that could be in-
stantiated at run time. VEX treats these cases in a con-
servative manner. Whenever a property is created in the
node scope, its dependencies are added to the dependen-
cies of the node as shown in the (ASSIGN 2) rule in the
Figure 4. If we cannot evaluate the array index for any
reason, it would be sufﬁcient to retrieve the dependencies
of the object.
Functions that take arbitrary number of arguments:
Some functions in JavaScript can have variable numbers
of arguments. For example, the push method of the ar-
ray can be called with any number of arguments and the
arguments will be appended to the end of the array. To
handle this, the summary of the push method has a spe-
cial ﬁeld indicating that it can take variable number of
arguments and when the method is called, we conser-
vatively append the dependencies of all the arguments
to the dependency set of the node representing the array
object.
Browser’s DOM API and XPCOM components:
These objects are treated as uninitialized variables,
ﬁelds and functions. The rules (UNINITIALIZED VAR),
(UNINIT FLD) and (FUN-CALL2) can be applied to
their accesses. When we need to keep track of the usage
of certain components we introduce the component
API function arguments into the dependency set. For
example the RDF datasource is accessed using the
following command:
rdf = Components.classes
Our
analysis
[“@mozilla.org/rdf/rdf-service;1”]
.getService(Components.interfaces.nsIRDFService);
string
“@mozilla.org/rdf/rdf-service;1” and
variable
nsIRDFService into the dependency set of the left hand
side variable rdf.
introduces
the
the
4.3 Unsoundness and incompleteness
A static analysis tool like VEX is inherently conservative.
First, if VEX reports a ﬂow, there may be no such feasible
ﬂow in the program (i.e. VEX can have false positives).
Though VEX over-approximates ﬂows and tries to per-
form a sound analysis, there are several aspects of the
analysis which, if implemented soundly, will make the
tool throw too many infeasible ﬂows, making it useless
in practice.
Consider a program where there is an eval of a string
that is dynamically created and not determinable stati-
cally. Since this string can be assigned any value, it could
be any arbitrary program that can create ﬂows between
any of the variables in scope. A sound tool must nec-
essarily summarize the eval as causing ﬂows from all
9
variables to all nodes, which would generate plenty of
false positives and would essentially be useless. False
negatives (i.e. miss detecting programs that have a ﬂow),
are also possible because of the fact that we have several
uninitialized and unsummarized objects.
VEX has several sources of unsoundness and incom-
pleteness: handling of eval, handling of prototypes,
handling of higher-order functions, ﬁxed number of un-
rolls of loops, handling with-scoping, handling excep-
tions, etc.
5 Evaluation
5.1 VEX implementation
The VEX tool checks for two kinds of ﬂows: one from
injectable sources to executable sinks to check for script-
injection vulnerabilities, and the other, also modeled as
ﬂows, that checks for unsafe programming practices.
VEX is implemented in Java (∼ 2000 LOC), and uti-
lizes a JavaScript parser built using the ANTLR parser
generator for the JavaScript 1.5 grammar provided by
ANTLR [1]. ANTLR outputs Java-based Abstract Syn-
tax Trees (AST) for JavaScript ﬁles, and VEX walks
through the ASTs computing the ﬂow sets from all in-
teresting sources to all interesting sinks, in a single pass
analysis, using the static analysis described in Section 4.
For each sink object, VEX collects all the source objects
that ﬂow into it and checks for the occurrence of ﬂow
patterns. VEX reports these ﬂows to the user along with
the source and sink locations in the code.
Flow patterns checked: The current version of VEX
checks for the following three ﬂow patterns that capture
ﬂows from injectable sources to executable sinks:
- Content Doc to Eval: The source location is any point
where the program accesses the API
window.content.document, and the source
object is the object that is returned from this call.
The sink locations are eval statements and the sink
objects are the objects being eval-ed.
- Content Doc to innerHTML: The source location
and source objects for these ﬂows are the same
as above; the sink locations are the places where
the extension writes directly into the DOM us-
ing innerHTML commands, and the sink objects
are the objects being assigned by the innerHTML
command. These DOM elements may be exe-
cutable if they are in the chrome context.
- RDF to innerHTML: The source location and source
objects are given by any retrieval of RDF objects
(which are often injectable) and the sink locations
and sink objects are innerHTML commands as
above.
Furthermore, VEX searches for the following patterns
that characterize two documented unsafe programming
practices that could lead to security vulnerabilities:
- evalInSandbox object to == or !=: This
ﬂow is
meant
to detect an unsafe programming prac-
tice where an object retrieved by an eval in
a sandbox is subject to an == or != test (the
recommended practice is that such objects must
be tested with ===). The source location is hence
any evalInSandbox-statement and the corre-
sponding source objects are the objects returned by
the evalInSandbox call. The sink locations are
usages of == and !=, and the sink objects are the
objects that are subject to these comparisons.
- Method Call on wrappedJSObject: Objects
ob-
tained using wrappedJSObject() commands are
usually untrusted, and methods of such objects
should not be called. The source locations are hence
uses of wrappedJSObject() and source objects are
the objects returned by them. Sink locations are
methods calls and the sink objects are the objects
whose methods are called.
The VEX tool can, of course, be adapted to other kinds
of suspect ﬂows – source and sink locations are straight-
forward, and the source and sink objects must be speci-
ﬁed carefully as above.
5.2 Evaluation methodology
The extensions we analyzed were chosen as follows.
First, in October 2008, we built a suite of extensions
using a random sample of 1827 extensions from the
Mozilla add-ons web site, by downloading the ﬁrst exten-
sions in alphabetical order for all subject categories. In
November 2009, we downloaded 699 of the most popular
extensions. The two sets had 74 extensions in common,
for a total of 2452 extensions. Our suite includes multi-
ple versions of some extensions, allowing cross-version
comparisons. For instance, we found a vulnerability in a
new version of BEATNIK (see Section 5.4), though its au-
thors thought the vulnerabilities in the previous version
were ﬁxed.
We extracted the JavaScript ﬁles from these extensions
and ran VEX on them, using a 2.4GHz 64 bit x86 proces-
sor with a maximum heap size of 4GB for the JVM.
5.3 Experimental results
Finding ﬂows from injectible sources to executable
sinks: Figure 5 summarizes the experimental results
for ﬂows that are from injectible sources to executable
sinks (the ﬁrst three ﬂows outlined above). The ﬁrst
column is the number of extensions that syntactically
has code that could indicate such a ﬂow,
identiﬁed
using a grep-search. For the ﬂow “Content-doc to
Eval”, the grep was for the string ‘eval(’; for “Content-
doc to InnerHTML” ﬂows, the grep was for the string
‘innerHTML’; and for “RDF to InnerHTML” ﬂows,
the search was for both the strings “‘innerHTML” and
“@mozilla.org/rdf/rdf-service;1”. As the table shows,
this search ﬁnds hundreds of suspect extensions, far more
than can be examined manually.
The third column indicates the number of extensions
on which VEX reports an alert with corresponding ﬂows.
On an average, VEX took only 15.5 seconds per exten-
sion.
To look for potential attacks, we manually analyzed
most of the extensions with suspect ﬂows that VEX
alerted us on, spending about two hours per extension
on average.
The next column reports the number of extensions on
which we could engineer an attack based on the ﬂows
reported by VEX. We were able to attack six extensions,
of which only three extensions were already known to
be vulnerable. The attacks on Wikipedia Toolbar, Fizzle
version 0.5.1 and Fizzle version 0.5.2 extensions are new,
see Section 5.4 for more details.
The next column shows the extensions where the