implementation  we  assume  that  if  an  unauthorized  operation  is 
attempted,  an  appropriate  error  message  will  be  produced  in  the  next 
state. 
15  Strictly  speaking,  references  can  be  written  to  an  entity  without 
violating  translation  secure  only  if  they  are  not  displayed.  A  practical 
implementation  that  satisfies  the  spirit  of  this  policy  is  to  permit  the 
writing  of  references  to  an  entity  but  only  on  the  condition  that  the 
reference could have been displayed without violating translation secure. 
≠ CD (os*) or ∃ x ∈ dom(U), CU(xs) ≠ CU(xs*) or R(xs) 
≠  R(xs*)  (cid:3) 
(b) 
x ∈ dom(U)  and  RO(xs)  ≠  RO(xs*)  (cid:3)  us  =  xs  or 
security_officer ∈ RO(us). 
security_officer ∈ RO(us); 
and 
Definition  10.  A  transform  T  is  downgrade  secure  iff 
∀ u, i, s, s*: T(u, i, s)=s*, x ∈ dom(E(cid:8) (RF × {ûs})) and 
CE(xs) > CE(xs* ) (cid:3) downgrader ∈ RO(us). 
Definition 11. A transform T is release secure iff  ∀ u, 
i,  s,  s*:  T(u,  i,  s)=s*,  (T(xs)=RM  (cid:3)  T(xs*)=RM  and 
RE(xs*)=RE(xs))  and  (T(xs)≠RM  and  T(xs*)=RM  (cid:3) 
RE(xs*)=u,  ∃  r:  rs=  xs,  i  is  the  operation  , 
releaser ∈ RO(us) and T( xs) = DM). 
Definition 12. A transform is transform secure iff it is 
access  secure,  copy  secure,  CCR  secure,  translation 
secure, set secure, downgrade secure, and release secure. 
Definition  13.  A  history  is  secure  if  all  its  states  are 
state secure and its transform is transform secure.  
Definition 14. A system is secure if each of its histories 
is secure. 
5.2  Discussion 
the  most  basic  decision  we  made 
in 
Perhaps 
formalizing 
the  MMS  model  concerns  our  general 
conception of a computer system, in particular the relation 
between  a  system  state  and  a  system.  We  considered  a 
view  where  a  system  state  consists  of  entities  and  their 
relations,  and  where  a  system  adds  to  this  users  and  user 
operations  on  entities.  Hence,  all  restrictions  on  user 
properties  (in  particular, 
the  restriction  for  all  u, 
RO(u)⊆R(u))  are  included  in  the  definition  of  a  secure 
system. We chose instead to view the distinction between 
system states and systems in terms of static as opposed to 
dynamic  properties.  Static  properties  are  those  that  hold 
for  all  secure  states  and,  hence,  can  be  checked  by 
examining  a  state  in  isolation;  dynamic  properties  are 
those that hold for the relation between secure states and, 
hence,  can  be  checked  only  by  comparing  two  or  more 
states.  In  the  view  we  adopted,  all  static  security 
properties are included in the definition of a secure state.  
To  a  large  extent  the  choice  in  conceptualizations is a 
matter of taste. Bell and LaPadula [4] use the latter, while 
Feiertag  et  al.  [8]  lean  to  the  former.  By  minimizing  the 
notion of a secure state, the former view makes the Basic 
Security  Theorem  shorter.  The  deciding  factor  in  our 
adopting the latter view is that it makes it impossible for a 
system  to  undergo  a  security-relevant  change  without 
undergoing a change in state. 
Principal difficulties we encountered in formalizing the 
MMS  security  model  were  in  representing  "copy"  and 
"view,"  system  output,  and  the  notion  of  an  authorized 
operation. Assertion 3 (changes to objects) in the informal 
model  requires  formal  semantics  to  reflect  the  movement 
of 
information  between  entities,  while  assertion  4 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:55 UTC from IEEE Xplore.  Restrictions apply. 
(viewing)  requires  formal  semantics  to  reflect  making  an 
entity  visible  to  a  user.  Assertion  5  (accessing  CCR 
entities)  now  addresses  both  copying  and  viewing.  The 
semantics  for  "copy,"  embodied  in  the  definitions  of 
"potential  modification"  and  "contributing  factor,"  are 
based  on  a  broad  interpretation  of  "copy."  Information  is 
considered  to  be  copied,  not  only  if  it  is  directly  moved 
from one entity to another, but also if it contributes to the 
potential  modification  of  some other entity. For example, 
if an operation scans message file A and copies messages 
selected  by  a  filter  F  to  message  file  B,  both  A  and  F 
contribute  to  the  potential  modification  of  B  (and  are 
therefore  subject  to  the  constraints  imposed  by  copy 
secure and CCR secure), even if both A and F are empty. 
The  semantics  for  "view"  are  straightforward:  a  thing  is 
viewed  if  an  operation  makes  it  a  member  of  an  output 
container.  In  light  of  these  considerations,  we  have  used 
"access" instead of "view" in assertion 5.  
In  the  formalization,  system  output  is  interpreted  as  a 
set  of  containers;  other  entities,  parts  of  entities, 
references,  and  classifications  that  are  made  visible  to  a 
user  are  interpreted  as  being  copied  to  his  output 
container.  We  assume  that  in  any  implementation  the 
classifications  displayed  appear  close  to  the  entities  (or 
parts) they correspond to, but we have not formalized this 
assumption. References are explicitly included as a part of 
output  because  the  same  operation  applied  to  the  same 
entities  can  yield  different  results,  depending  on  how  the 
entities  are  referenced.  This  leads  to  the  constraint 
(translation  secure)  on  operations  that  produce  as  output 
direct references that are translations of indirect ones. To 
enforce 
the  system  must  recognize 
references as a particular kind of output. 
this  constraint, 
Formalizing  the  concept  of  an  authorized  operation  is 
difficult  because  the  semantics  of  authorized  operations 
are  unspecified.  Our  definition  of  access  secure  requires 
that,  if  an  operation  changes  the  system  state  (beyond 
producing  an  error  message  as  output),  then  for  each 
entity  in  the  set  of  operands  the  user  or  role,  operation, 
and  operand  index  must  appear  in  the  access  set. 
Unauthorized  operations  must  not  alter  the  system  state 
except to report that they are erroneous. 
5.3  Correspondence to the Informal Model 
Assertions  (2),  (4),  and  (7)  of  the  informal  model, 
concerning classification hierarchy, viewing, and labeling, 
are  incorporated  in  the  formal  definition  of  secure  state. 
They  correspond  respectively  to  the first three conditions 
a secure state must satisfy; the last two conditions require 
that  each  user's  current  role  set  must  be  a  subset  of  his 
authorized  role  set  and  that  the  current  security  level  of 
each  output  device  must  be  dominated  by  its  maximum 
allowed level. These last two conditions are implicit in the 
informal model. 
The  remaining  assertions  of  the  informal  model  have 
been  translated  into  constraints  on  the  system  transform. 
Assertion  (1)  {authorization)  corresponds  directly  to 
access  secure,  assertion  (6)  to  translation  secure,  and 
assertions  (8)-(10)  (setting,  downgrading,  and  releasing) 
correspond  respectively  to  set  secure, downgrade secure, 
and  release  secure.  Set  secure  restricts  the  permission  to 
set  device  classifications  and  user  role  sets  to  security 
officers and restricts permission to set a user's current role 
to  himself  or  a  security  officer.  Downgrade  secure 
contains  an  exception  for  ûs,  so  that  a  user  is  not 
prohibited  from  lowering  the  current  level  of  his  output 
device.  The  formal  statement  of  release  secure  makes 
explicit  the  requirement  that,  once  released,  a  message 
cannot have its type or releaser field altered. 
Assertions  (3)  and  (5)  correspond  to  copy  secure  and 
CCR secure. The definition of copy secure actually covers 
parts  of  both  assertion  3  and  assertion  4  because  output 
devices  are  treated  as  containers.  So,  if  entity  x  receives 
information from an object y, CE(x)≥ CE(y) (assertion 3), 
and  if  an  output  container  o  receives  information  from 
entity  x,  CE(o)≥CE(x)  (assertion  4).  CCR  secure 
corresponds  to  assertion  5,  under  the  interpretation  that 
having access to an entity is significant only if that entity 
is  a  contributing  factor  in  the  potential  modification  of 
another entity. 
5.4 
Storage Channels 
Because  we  have  defined  potential  modification  and 
contributing  factor  in  terms  of  changes  only  to  entities, 
the  constraints  imposed  by  copy  secure  and  CCR  secure 
do  not  apply  to  changes  made  to  functions  defined  on 
users (clearance, role set, and current role). Thus, there is 
the  potential  for  information  to  be  transferred  from  a 
higher  level  to  a  lower  one  through  these  functions. 
However,  changes  to  user  clearances  and  role  sets  are 
controlled by set secure; the normal user can change only 
his  current  role  set,  and  this  provides  a  channel  of  very 
limited bandwidth. 
Among  entities,  one  class  of  storage  channel  remains. 
Consider  two  entities  with  the  same  classification.  The 
model  permits  an  operation  to  modify  an  entity  function 
of one entity based on the value of the other entity. Since 
entity  functions  other  than  value  (i.e.,  containment  (H), 
classification,  access  set,  CCR  mark,  or  type)  have  no 
classifications, there is nothing in the model to prohibit a 
user  from  viewing  those  functions,  even  if  he  is  not 
cleared  to  see  the  entity's  value.  So  information  might 
flow  from  the  value  of  one  entity  to  the  access  set  of 
another  at  the  same  security  level  and  the  change  in 
access set could be observed by a user at a lower security 
level. 
Changes  in  H  offer  the  greatest  opportunity  for 
exploitation,  but  all  of  the  channels  offered  by  entity 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:55 UTC from IEEE Xplore.  Restrictions apply. 
functions  could  be  closed  by  attributing  the  classification 
of the entity value to the other entity functions as well. In 
practice,  the  semantics  of  message  system  commands 
should restrict these channels sufficiently so that this will 
be  unnecessary.  If  designers  should  find  the  constraints 
imposed  by 
the  present  definitions  of  potential 
modification  and  contributing  factor  too  confining,  these 
could  be  relaxed  by  restricting  their  coverage  to  a  subset 
of the entity functions. The price of such a change would 
be  the  increased  potential  for  storage  channels  using  the 
excluded  functions.  The  bandwidths  of  potential  storage 
channels  cannot  be  precisely  estimated  at  the  abstract 
level  of  the  formal  model,  yet  it  is  clear  that  the  value 
function  should  never  be  excluded  from  the  definitions. 
Of  the  other  entity  functions,  H  is  the  most  problematic 
both  because  message  system  operations  are  more  likely 
to  alter  H  than  the  other  entity  functions  and  because  a 
relatively  large  amount  of  information  could  be  encoded 
in a single change to H. 
5.5  A Basic Security Theorem for the Formal 
MMS Security Model 
In formalizations where a secure system is a collection 
of secure states, some feel that a Basic Security Theorem 
is  needed  to  show  the  restrictions  on  system  transforms 
that ensure that a system starting in a secure state will not 
reach  a  state  that  is  not  secure  [4].  Such  theorems  are  of 
little  practical  significance,  since  their  proofs  do  not 
depend on the particular definition of security provided by 
the model [18]. Further, in our approach such a theorem is 
not  pressing  since  the  concept  of  a  secure  system  is 
defined 
transform. 
Nevertheless, we do appeal to the notion of a secure state, 
and  some  readers  may  feel  that  some  form  of  Basic 
Security Theorem is needed. Those readers should find it 
trivial to prove the following analog of the Basic Security 
Theorem for our definition of a secure state. 
terms  of  a  secure 
largely 
in 
THEOREM. Every state of a system Σ is secure if s0 is 
secure and T meets the following conditions for all u, i, s, 
s*: T(u, i, s) = s* and for all x, y ∈ RF, w ∈ US: 
(1)  xs ∉ H(ys) and xs*  ∈ (ys*) (cid:3) CE( xs*) ≤ CE(ys*). 
(2)  xs ∈ H(ys) and CE(xs*) ≤/ CE(ys*) (cid:3) xs*  ∉ H(ys*). 
(3)  xs∉H(
wˆ ) and xs* ∈H(
s
ˆ
w ) (cid:3) CU(ws*)>_CE(xs* ). 
*
s
(4)  xs ∈H(
wˆ ) and CU(ws*)~CE(xs* ) (cid:3) x∉H(
s
ˆ
w ). 
*
s
(5)  (xs,  V(xs)) ∉ 
wˆ   and  (xs*  ,  V(xs*  ))  ∈ 
s
CE(xs*))∈ 
ˆ
w  
*
s
ˆ
w   (cid:3)  (xs*  , 