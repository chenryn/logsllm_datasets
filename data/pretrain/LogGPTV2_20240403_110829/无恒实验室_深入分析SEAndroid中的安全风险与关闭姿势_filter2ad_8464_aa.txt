# 无恒实验室|深入分析SEAndroid中的安全风险与关闭姿势
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 一、背景
SEAndroid是Google在Android系统上应用的一套以SELinux为基础核心的系统安全机制(下统称SElinux)。其最早发布于Android
4.3， 经过多年的发展， 目前已经成为了Android用户态安全的重要保障。
无恒实验室在近期的安全研究中，对于SELinux的攻击面和攻击方法有一些研究成果，特此分享给大家，希望与业内进行学习交流。
SELinux（Security-Enhanced Linux）
是美国国家安全局（NSA）主导开发的Linux内核安全模块，为内核提供了强制访问控制（MAC），项目于2000年发布到开源社区，并于2003年集成到上游
Linux 内核中。“所以说优秀的安全机制就是公开所有细节，依旧可以让攻击者束手无策 :)”
Linux默认的访问控制策略是 自主访问控制（DAC，可以通过下面两张图来直观了解一下DAC与MAC的区别：
（图片源自
[https://blog.csdn.net/headwind_/article/details/119704755）](https://blog.csdn.net/headwind_/article/details/119704755%EF%BC%89)
在DAC 中，对象的拥有者可以任意修改或授予此对象相应的权限，且进程理论上所拥有的权限与执行它的用户的权限相同；
这导致如果一个以root权限运行的进程被攻破， 攻击者就可以借此在系统中畅行无阻。
而在MAC 中， 为所有进程和文件都设置了安全上下文， 当用户执行某项操作时， 除了要通过DAC 的检查， 还需要符合MAC中制定的规则；
因此即便是root进程，其权限也会被限制在特定范围内，这虽然不能完全防御攻击，但可以将损失降到最低。
## 二、SElinux的实现
SElinux的实现依赖于Linux内核的安全模块框架（LSM），当内核对用户态访问做处理时，LPM会在
DAC检查之后预留钩子函数，SElinux就是通过此接口来实现MAC；因此Android平台权限是DAC+MAC，即两个权限管理独立存在，操作行为必须同时通过两种机制的检验才会被允许。
（[https://www.kernel.org/doc/ols/2002/ols2002-pages-604-617.pdf）](https://www.kernel.org/doc/ols/2002/ols2002-pages-604-617.pdf%EF%BC%89)
## 三、基本元素
###  3.1 标签
SElinux是一个基于标签的系统，所有的进程，文件，socket等都有标签。标签是一个四元组字符串user:role:type:level，其中我们主要关注的是type。
在 Android系统中，所有对象大致可以分为两类：
  * 一种是死的（文件、端口、系统属性等被调用对象），例如：u:object_r:proc:s0
  * 一种是活的（进程、App等调用资源的对象），例如：u:r:vendor_init:s0
查看标签的方法就是在常用命令后面加上-Z，如下：
    进程 ps -ZA
    u:r:vendor_init:s0 root 545 1 6728    2376   poll_sche+ 0 S init
    u:r:zygote:s0      root 678 1 4308756 142888 poll_sche+ 0 S zygote64
    文件 ls -lZ
    drwxr-x---  2 root shell u:object_r:rootfs:s0      4096 2009-01-01 00:00 sbin
    drwxr-xr-x 18 root root  u:object_r:vendor_file:s0 4096 2009-01-01 00:00 vendor
    属性 getprop -Z 
    [DEVICE_PROVISIONED]: [u:object_r:default_prop:s0]
    [aaudio.hw_burst_min_usec]: [u:object_r:exported_default_prop:s0]
###  3.2 规则
有了标签之后，还需要编写规则 来限制标签， 根据SELinux规范，完整的规则相关的语句格式为：rule_name source_type
target_type:class perm_set
  * rule_name 规则名 
    * allow ： 允许主体对客体进行操作
    * neverallow ：拒绝主体对客体进行操作
    * dontaudit ： 表示不记录某条违反规则的决策信息
    * auditallow ：记录某项决策信息，通常 SElinux 只记录失败的信息，应用这条规则后会记录成功的决策信息
  * source_type 主体 
    * Domain：一个进程或一组进程的标签。也称为域类型
  * target_type 客体 
    * Type：一个对象（例如，文件、套接字）或一组对象的标签
  * class 类别 
    * 要访问的对象的类型，例如文件、套接字等
    * 在system/sepolicy/private/security_classes中被定义
  * perm_set 动作集 
    * 要执行的操作，例如读取、写入等
    * 在system/sepolicy/private/access_vectors中被定义
下面结合例子说明一下：
    # 允许user域中的进程 读取 script标签中的file类型文件
    allow user script:file {read};
    # 不允许user域中的进程 写入 script标签中的file类型文件
    neverallow user script:file {write};
###  3.3 配置文件
SElinux编译后的标签和规则等文件会保存在每个分区的etc/selinux目录下：
    $ls -l system/etc/selinux
    drwxrwxr-x 2 root root    4096 12月  9 15:53 mapping/
    -rw-rw-r-- 1 root root   40561 12月 10 15:56 plat_file_contexts
    -rw-rw-r-- 1 root root    8614 12月 10 15:56 plat_hwservice_contexts
    -rw-rw-r-- 1 root root    7243 12月  9 15:53 plat_mac_permissions.xml
    -rw-rw-r-- 1 root root   48646 12月 10 15:56 plat_property_contexts
    -rw-rw-r-- 1 root root    1905 12月 10 15:56 plat_seapp_contexts
    -rw-rw-r-- 1 root root      65 12月 10 15:55 plat_sepolicy_and_mapping.sha256
    -rw-rw-r-- 1 root root 1623615 12月 10 15:55 plat_sepolicy.cil
    -rw-rw-r-- 1 root root   19798 12月 10 15:56 plat_service_contexts
    -rw-rw-r-- 1 root root  818418 12月 10 15:55 sepolicy_neverallows
其中 plat_sepolicy.cil中记录的是SElinux规则， plat_sepolicy_and_mapping.sha256为校验文件，
其余的文件中记录的都是标签数据。
## 四、SEAndroid安全风险
SElinux通过最大限度地限制系统中服务进程可访问的资源，以达到收敛攻击面，减小损失的目的；但其也不是万能的，开发遗留的调试接口、内核漏洞、错误的策略配置等问题都可能导致攻击者绕过SELinux的限制攻击系统。