dio based on DOF, and show experimentally how it can be used
to increase network capacity without harming other radios.
3. OVERVIEW & DESIGN
DOF operates on windows of raw samples from the ADC which do
not undergo any demodulation, decoding or synchronization. These
raw samples are processed to extract feature vectors, which are then
used to detect signal types, the corresponding spectrum occupancies
and the AoAs of the signals at the detector. Before discussing the
detailed design, we provide the high level intuition behind DOF.
3.1 Intuition
The key insight behind DOF is that almost every radio protocol
used for communication has hidden repeating patterns. For exam-
ple, an OFDM PHY (used in WiFi) has a cyclic preﬁx (CP) where at
the end of each OFDM symbol block, the symbols from the start are
repeated. The CP serves two purposes, ﬁrst it helps in avoiding inter-
symbol interference, and second it helps in preserving orthogonality
of the OFDM subcarriers [26]. Thus a CP is an important attribute of
the OFDM PHY itself, and necessary for its correct operation. Sim-
ilarly, every other protocol operating in the ISM band has repeating
patterns, that are unique and needed for their correct operation.
Note that these patterns are fundamental to the corresponding phys-
ical layers and are present in every packet (data, ACK and for every
bitrate). These patterns are not some quirk of a speciﬁc hardware im-
plementation or PHY layer parameter setting (e.g. different channel
transmission times for a 1500B packet based on what bitrate is used
in WiFi). Hence these patterns can potentially form a robust signature
that is invariant to differences in hardware or PHY layer parameters.
How can we use the existence of these hidden patterns to detect
the signal type, occupied spectrum and angle of arrival? We can use
the following key trick from cyclostationary signal analysis [9]: if a
signal has a repeating pattern, then if we correlate the received signal
against itself delayed by a ﬁxed amount, the correlation will peak
when the delay is equal to the period at which the pattern repeats.
Speciﬁcally, lets denote the raw signal samples we are receiving by
x[n]. Consider the following function
R(cid:11)
x ((cid:28) ) =
(cid:3)
x[n][x
[n (cid:0) (cid:28) ]]e
(cid:0)j2(cid:25)(cid:11)n
(1)
1X
n=(cid:0)1
For an appropriate value of (cid:28) corresponding to the time period
between the repeating patterns, the above value will be maximized,
since the random patterns in x[n] will be aligned. Further, these peak
values occur only at periodic intervals in n. Hence the second expo-
(cid:0)j2(cid:25)(cid:11)n is in effect computing the frequency (cid:11) at which
nential term e
this hidden pattern repeats. We deﬁne such a frequency as a pattern
frequency, and Eq. 1 is known as the Cyclic Autocorrelation Function
(CAF) [9] at a particular pattern frequency (cid:11) and delay (cid:28). The CAF
will exhibit a high value only for delays and pattern frequencies that
correspond to repeating patterns in the signal.
Figure. 1 shows the 2-D CAF plots for a received signal that has
WiFi and Zigbee signals interfering with each other. As explained
above, WiFi uses OFDM, and has a repeating cyclic preﬁx, as well as
other repeating patterns. In the CAF plot, we see spikes correspond-
ing to these repeating patterns at different pattern frequencies and
delays. Similarly, the Zigbee signal shows spikes at pattern frequen-
cies corresponding to how its pulse repeats. Note the stark difference
Figure 1: Cyclic Autocorrelation Function for WiFi and Zigbee - The
spikes at different pattern frequencies are due to the repeating OFDM
CP, and the repeating pulse on which QPSK symbols are modulated in
Zigbee.
in the locations of the spikes for pattern frequencies for WiFi and
Zigbee. The differentiability in spike locations enables DOF to dis-
tinguish both signals even when they are interfering with each other.
DOF uses the locations of these pattern frequencies as signatures
for different signal types. In the following sections we expand on this
insight and explain the design of the classiﬁer, spectrum occupancy
and AoA detection algorithms, which are DOF’s main and novel con-
tributions. However, to make these algorithms practical, we ﬁrst need
to efﬁciently evaluate the Cyclic Autocorrelation Function at the rel-
evant pattern frequencies. Hence we ﬁrst discuss DOF’s feature ex-
traction step, which borrows ideas from cyclostationary signal pro-
cessing to design an efﬁcient extraction algorithm.
4. DESIGN
DOF’s design consists of 4 stages and an overview of the architec-
ture is shown in Figure 2.
4.1 Feature Extraction
DOF’s feature extraction component computes feature vectors from
the digital samples delivered by the ADC. Our algorithm builds on a
rich body of prior work in cyclostationary signal analysis [9], and is
conceptually similar to recent work in whitespace radios that uses cy-
clostationary analysis to detect primary TV transmitters. Our main
contribution here is the adaptation of the algorithm to work for the
multitude of signals in the ISM band and an efﬁcient implementation
that works on a 100MHz wideband radio.
As described in 3.1 the feature extraction step is supposed to ﬁnd
the prominent pattern frequencies which represent the frequencies at
which repeating patterns manifest in the different PHYs. However,
instead of using the CAF deﬁned in Eq. 1, we use an equivalent rep-
resentation called the Spectral Correlation Function (SCF) [9]:
S(cid:11)
x (f ) =
(cid:28) =(cid:0)1 R(cid:11)
x ((cid:28) )e
(cid:0)j2(cid:25)(cid:28)
(2)
P1
The SCF is equal to the frequency transform of the CAF. Since fre-
quency transforms are unitary, both representations are equivalent. If
the CAF peaked for a certain value of (cid:28), then the SCF will peak for
a particular value of f that is inversely proportional to (cid:28). Intuitively,
the reason for this is that if a hidden pattern repeats at a lag of (cid:28), then
by deﬁnition it repeats for every integer multiple of (cid:28).
The reason for moving to the SCF is that it can be computed efﬁ-
ciently [21] for discrete time windows as follows
S(cid:11)
x (f ) =
1
L
XlN (f )X
lN (f (cid:0) (cid:11))
(cid:3)
(3)
L(cid:0)1X
l=0
232Figure 2: Overview of DOF showing the overall architecture and where it sits in the stack. Extracted features are ﬁrst classiﬁed by signal type and
then processed to determine which wireless degrees of freedom are in use. DOF then passes the distilled information up to the MAC layer which can
utilize the information as it sees ﬁt.
where XlN (f ) is the FFT of the received signal for the l’th time win-
dow of length N samples, (cid:3) is the complex conjugate, and the sum-
mation is over L consecutive time windows of the received signal.
The key thing to note in Eq 3 is that the SCF can be expressed as
a product of the FFTs of the received signal. Hence to compute the
SCF at any pattern frequency (cid:11), one just has to take the product of
the received signal’s FFT with itself albeit shifted in the frequency
domain by (cid:11). FFTs are very efﬁcient to implement in hardware [13],
and any wireless PHY that would use OFDM would already have
an FFT hardware module. Hence we believe that the SCF can be
easily computed using existing hardware. We compute and evaluate
the computational complexity and verify the above claim in Sec. 5.
Feature Extraction: Finally, we summarize DOF’s feature vector.
Given the universe of signal types to detect (WiFi, Zigbee, cordless
phones, microwaves and Bluetooth currently), we ﬁrst determine the
union of the unique sets of pattern frequency and frequency tuples
contained in each type’s signature. Let this union consist of the fol-
lowing M tuples, ((cid:11)1; f1); :::; ((cid:11)M ; fM ), then the feature vector ~F
is deﬁned as:
F (i) = (S(cid:11)i
x (fi))
8i = 1; : : : ; M
(4)
The components of the feature vector are values of the SCF at differ-
ent points, unique to the corresponding signal types.
4.2 Estimating Signal Type
DOF designs a novel decision tree based on SVMs [5] which al-
lows it to classify multiple component signal types in an interfered
signal using the extracted feature vectors. A SVM classiﬁer takes an
input feature vector, ~F , and predicts the signal type T if any that ex-
ists in the received signal. These classiﬁers are trained using a small
labeled dataset. It’s common to regularize the feature vectors using
a kernel function such as a Gaussian kernel [5] and project them to
higher dimensions to make the feature vectors belonging to different
types linearly separable, we use the same technique in DOF.
A naive method of using these classiﬁers is to train a SVM classi-
ﬁer using labeled data collected by transmitting from a particular ra-
dio and computing the corresponding feature vector from the received
signal, and doing so for different radio types and locations. However,
this generic off-the-shelf SVM design fails to work. The reason is
that DOF expects to accurately detect signal types even when the re-
ceived signal has multiple interfering signals in it. Interference sig-
niﬁcantly distorts feature vectors and throws off the SVM classiﬁer.
Speciﬁcally, the SCF for an interfered signal at a particular pattern
Figure 3: Detecting the Number of Signals - Asynchrony between pack-
ets causes differences in the L0 Norm of ~F
frequency (cid:11) can be shown to be equal to [9]:
S(cid:11)
X (f ) = a2S(cid:11)
X1 (f ) + b2S(cid:11)
X2 (f ) + R
(5)
where X1 and X2 are the interfering signals with amplitudes a and b.
R is a residual term representing cross-talk between the two signals.
Thus the feature vector will be a sum of the feature vectors if the
signals alone had been present without interference scaled according
to their respective powers, plus a term that represents the crosstalk.
The unique pattern frequencies for each component signal type are
retained, but after kernel regularization, the test feature vector itself
will not correspond to any of the training feature vectors the SVM
classiﬁer has been trained on.
One naive approach to this problem would be to train SVMs for
all possible combinations of signals. However, this approach quickly
gets out of hand, since the classiﬁer has to account for the fact that
the interfering signals will have different unknown powers, and con-
sequently the feature vectors will be clustered differently for each
combination of powers. Training classiﬁers for all possible signal
combinations and powers is prohibitively expensive.
4.2.1 Robust & Efﬁcient Classiﬁcation
DOF builds a decision tree that can efﬁciently identify multiple
component signal types in an interfering signal via two steps:
1) Exploiting Asynchrony: Transmissions from different nodes in
the real world rarely overlap with each other perfectly since transmis-
sions from two independent nodes will very likely be asynchronous
as shown in Fig. 3. DOF exploits this idea to compute two quan-
tities: the number of component signals in the received signal, and
their average individual power.
To determine how many signals are present, DOF uses the follow-
ing idea:
if a new signal starts interfering, then the feature vector
DOF extracts will start showing many new non-zero components due
[4.1] Feature Extraction[4.3] DOF Estimation(Spectrum Occupancy){(cid:2)(cid:3)(cid:4)(cid:5),(cid:7)	((cid:10))	}(cid:13)(cid:14)(cid:15)(cid:16)Asynchrony Detector/Power NormalizationSVM-1SVM-NCounter++. . .If ∆L0>ThresholdCounter--If ∆L00)DOF{(cid:2)(cid:3)(cid:4)(cid:5),(cid:7)(cid:29),(cid:30)(cid:31)}(cid:13)(cid:14)(cid:15)(cid:16){ }(cid:13)(cid:14)(cid:15)(cid:16)Forn = N{ ,(cid:2)(cid:3)(cid:4)(cid:5),(cid:7)(cid:29),(cid:30)(cid:31)}(cid:13)(cid:14)(cid:15)(cid:16)(cid:7)	((cid:10))ZigBeeOverlapping PacketsWiFiReceived SignaltL0 Norm of F(i)(cid:1)233to the unique features belonging to the new signal. Hence, we can use
the following algorithm to compute the number of interfering signals:
1. Keep track of the l0 norm (i.e. the number of non-zero compo-
nents) of the computed feature vector.
2. If the l0 norm exhibits a sudden shift, then declare a change
in the number of interfering signals.
If the l0 norm shift is
positive, then a new signal has started interfering, if the change
is negative, then one of the interfering signals has stopped.
The above algorithm begins by initializing the counter for the number
of signals to zero. Hence, the algorithm continuously keeps track of
the number of interfering signals at any point.
Second, DOF exploits the fact that the total power of the received
signal is equal to the sum of the powers of the constituent signals
and noise. Hence, as the received signal samples are received, DOF
keeps a moving window average of the power at that point. If DOF
detect a new signal, it estimates the power of the new signal, as the
new received signal power minus the received signal power before the
presence of a new signal was detected. Thus, DOF detects the number
of component signals, as well as their powers in the received signal.
It exploits this information in classifying the constituent signal types,
as we explain next.
2) Constructing the SVMs: DOF exploits knowledge of the number