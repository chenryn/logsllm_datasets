---
author: Cristiano L. Fontana
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 4992
date: '2020-02-29 11:48:00'
editorchoice: false
excerpt: 了解如何使用 Python 和 GNU Octave 完成一项常见的数据科学任务。
fromurl: https://opensource.com/article/20/2/python-gnu-octave-data-science
id: 11943
islctt: true
largepic: /data/attachment/album/202002/29/115004x09dgvckgwphsgrw.jpg
permalink: /article-11943-1.html
pic: /data/attachment/album/202002/29/115004x09dgvckgwphsgrw.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 11950
reviewer: wxy
selector: lujun9972
summary: 了解如何使用 Python 和 GNU Octave 完成一项常见的数据科学任务。
tags:
- 数据科学
thumb: false
title: 使用 Python 和 GNU Octave 绘制数据
titlepic: true
translator: heguangzhi
updated: '2020-02-29 11:48:00'
---
> 
> 了解如何使用 Python 和 GNU Octave 完成一项常见的数据科学任务。
> 
> 
> 
![](/data/attachment/album/202002/29/115004x09dgvckgwphsgrw.jpg)
数据科学是跨越编程语言的知识领域。有些语言以解决这一领域的问题而闻名，而另一些则鲜为人知。这篇文章将帮助你熟悉用一些流行的语言完成数据科学的工作。
### 选择 Python 和 GNU Octave 做数据科学工作
我经常尝试学习一种新的编程语言。为什么？这既有对旧方式的厌倦，也有对新方式的好奇。当我开始学习编程时，我唯一知道的语言是 C 语言。那些年的编程生涯既艰难又危险，因为我必须手动分配内存、管理指针、并记得释放内存。
后来一个朋友建议我试试 Python，现在我的编程生活变得轻松多了。虽然程序运行变得慢多了，但我不必通过编写分析软件来受苦了。然而，我很快就意识到每种语言都有比其它语言更适合自己的应用场景。后来我学习了一些其它语言，每种语言都给我带来了一些新的启发。发现新的编程风格让我可以将一些解决方案移植到其他语言中，这样一切都变得有趣多了。
为了对一种新的编程语言（及其文档）有所了解，我总是从编写一些执行我熟悉的任务的示例程序开始。为此，我将解释如何用 Python 和 GNU Octave 编写一个程序来完成一个你可以归类为数据科学的特殊任务。如果你已经熟悉其中一种语言，从它开始，然后通过其他语言寻找相似之处和不同之处。这篇文章并不是对编程语言的详尽比较，只是一个小小的展示。
所有的程序都应该在[命令行](https://en.wikipedia.org/wiki/Command-line_interface)上运行，而不是用[图形用户界面](https://en.wikipedia.org/wiki/Graphical_user_interface)（GUI）。完整的例子可以在 [polyglot\_fit 存储库](https://gitlab.com/cristiano.fontana/polyglot_fit)中找到。
### 编程任务
你将在本系列中编写的程序:
* 从 [CSV 文件](https://en.wikipedia.org/wiki/Comma-separated_values)中读取数据
* 用直线插入数据（例如 `f(x)=m ⋅ x + q`）
* 将结果生成图像文件
这是许多数据科学家遇到的常见情况。示例数据是 [Anscombe 的四重奏](https://en.wikipedia.org/wiki/Anscombe%27s_quartet)的第一组，如下表所示。这是一组人工构建的数据，当用直线拟合时会给出相同的结果，但是它们的曲线非常不同。数据文件是一个文本文件，以制表符作为列分隔符，开头几行作为标题。此任务将仅使用第一组（即前两列）。
![](/data/attachment/album/202002/29/122805h3yrs1dkrgysssxk.png)
### Python 方式
[Python](https://www.python.org/) 是一种通用编程语言，是当今最流行的语言之一（依据 [TIOBE 指数](https://www.tiobe.com/tiobe-index/)、[RedMonk 编程语言排名](https://redmonk.com/sogrady/2019/07/18/language-rankings-6-19/)、[编程语言流行指数](http://pypl.github.io/PYPL.html)、[GitHub Octoverse 状态](https://octoverse.github.com/)和其他来源的调查结果）。它是一种[解释型语言](https://en.wikipedia.org/wiki/Interpreted_language)；因此，源代码由执行该指令的程序读取和评估。它有一个全面的[标准库](https://docs.python.org/3/library/)并且总体上非常好用（我对这最后一句话没有证据；这只是我的拙见）。
#### 安装
要使用 Python 开发，你需要解释器和一些库。最低要求是：
* [NumPy](https://numpy.org/) 用于简化数组和矩阵的操作
* [SciPy](https://www.scipy.org/) 用于数据科学
* [Matplotlib](https://matplotlib.org/) 用于绘图
在 [Fedora](https://getfedora.org/) 安装它们是很容易的：
```
sudo dnf install python3 python3-numpy python3-scipy python3-matplotlib
```
#### 代码注释
在 Python中，[注释](https://en.wikipedia.org/wiki/Comment_(computer_programming))是通过在行首添加一个 `#` 来实现的，该行的其余部分将被解释器丢弃：
```
# 这是被解释器忽略的注释。
```
[fitting\_python.py](https://gitlab.com/cristiano.fontana/polyglot_fit/-/blob/master/fitting_python.py) 示例使用注释在源代码中插入许可证信息，第一行是[特殊注释](https://en.wikipedia.org/wiki/Shebang_(Unix))，它允许该脚本在命令行上执行:
```
#!/usr/bin/env python3
```
这一行通知命令行解释器，该脚本需要由程序 `python3` 执行。
#### 需要的库
在 Python 中，库和模块可以作为一个对象导入（如示例中的第一行），其中包含库的所有函数和成员。可以通过使用 `as` 方式用自定义标签重命名它们：
```
import numpy as np
from scipy import stats
import matplotlib.pyplot as plt
```
你也可以决定只导入一个子模块（如第二行和第三行）。语法有两个（基本上）等效的方式：`import module.submodule` 和 `from module import submodule`。
#### 定义变量
Python 的变量是在第一次赋值时被声明的：
```
input_file_name = "anscombe.csv"
delimiter = "\t"
skip_header = 3
column_x = 0
column_y = 1
```
变量类型由分配给变量的值推断。没有具有常量值的变量，除非它们在模块中声明并且只能被读取。习惯上，不应被修改的变量应该用大写字母命名。
#### 打印输出
通过命令行运行程序意味着输出只能打印在终端上。Python 有 [print()](https://docs.python.org/3/library/functions.html#print) 函数，默认情况下，该函数打印其参数，并在输出的末尾添加一个换行符：
```
print("#### Anscombe's first set with Python ####")
```
在 Python 中，可以将 `print()` 函数与[字符串类](https://docs.python.org/3/library/string.html)的[格式化能力](https://docs.python.org/3/library/string.html#string-formatting)相结合。字符串具有`format` 方法，可用于向字符串本身添加一些格式化文本。例如，可以添加格式化的浮点数，例如:
```
print("Slope: {:f}".format(slope))
```
#### 读取数据
使用 NumPy 和函数 [genfromtxt()](https://docs.scipy.org/doc/numpy/reference/generated/numpy.genfromtxt.html) 读取 CSV 文件非常容易，该函数生成 [NumPy 数组](https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html)：
```
data = np.genfromtxt(input_file_name, delimiter = delimiter, skip_header = skip_header)
```
在 Python 中，一个函数可以有数量可变的参数，你可以通过指定所需的参数来传递一个参数的子集。数组是非常强大的矩阵状对象，可以很容易地分割成更小的数组：
```
x = data[:, column_x]
y = data[:, column_y]
```
冒号选择整个范围，也可以用来选择子范围。例如，要选择数组的前两行，可以使用：
```
first_two_rows = data[0:1, :]
```
#### 拟合数据
SciPy 提供了方便的数据拟合功能，例如 [linregress()](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.linregress.html) 功能。该函数提供了一些与拟合相关的重要值，如斜率、截距和两个数据集的相关系数:
```
slope, intercept, r_value, p_value, std_err = stats.linregress(x, y)
print("Slope: {:f}".format(slope))
print("Intercept: {:f}".format(intercept))
print("Correlation coefficient: {:f}".format(r_value))
```
因为 `linregress()` 提供了几条信息，所以结果可以同时保存到几个变量中。
#### 绘图
Matplotlib 库仅仅绘制数据点，因此，你应该定义要绘制的点的坐标。已经定义了 `x` 和 `y` 数组，所以你可以直接绘制它们，但是你还需要代表直线的数据点。
```
fit_x = np.linspace(x.min() - 1, x.max() + 1, 100)
```
[linspace()](https://docs.scipy.org/doc/numpy/reference/generated/numpy.linspace.html) 函数可以方便地在两个值之间生成一组等距值。利用强大的 NumPy 数组可以轻松计算纵坐标，该数组可以像普通数值变量一样在公式中使用：
```
fit_y = slope * fit_x + intercept
```
该公式在数组中逐元素应用；因此，结果在初始数组中具有相同数量的条目。
要绘图，首先，定义一个包含所有图形的[图形对象](https://matplotlib.org/api/_as_gen/matplotlib.figure.Figure.html#matplotlib.figure.Figure)：
```
fig_width = 7 #inch
fig_height = fig_width / 16 * 9 #inch
fig_dpi = 100
fig = plt.figure(figsize = (fig_width, fig_height), dpi = fig_dpi)
```
一个图形可以画几个图；在 Matplotlib 中，这些图被称为[轴](https://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes)。本示例定义一个单轴对象来绘制数据点：
```
ax = fig.add_subplot(111)
ax.plot(fit_x, fit_y, label = "Fit", linestyle = '-')
ax.plot(x, y, label = "Data", marker = '.', linestyle = '')
ax.legend()
ax.set_xlim(min(x) - 1, max(x) + 1)
ax.set_ylim(min(y) - 1, max(y) + 1)
ax.set_xlabel('x')
ax.set_ylabel('y')
```
将该图保存到 [PNG 图形文件](https://en.wikipedia.org/wiki/Portable_Network_Graphics)中，有:
```
fig.savefig('fit_python.png')
```
如果要显示（而不是保存）该绘图，请调用：
```