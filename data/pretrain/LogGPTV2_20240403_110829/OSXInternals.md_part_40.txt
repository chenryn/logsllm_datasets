The following is an example of enabling Open Firmware password protection.
0 > password
Enter a new password: ********
Enter password again: ********
Password will be in place on the next boot! ok
0 > setenv security-mode full ok
0 >
When the security mode is set to either command or full, the ability to use snag keys is blocked: pressing
keys such as c, n, or t will not alter booting behavior. Similarly, pressing -v, -s, or will not
result in a verbose boot, single-user boot, or PRAM-reset, respectively.
The security-#badlogins firmware variable contains a total count of failed access attempts while the
security mode was set to command or full. Each time an incorrect password is entered at the Open
Firmware prompt, this counter is incremented by one.
The values of the security-related firmware variables can be examined or set from within Mac OS X by
using the nvram utility. However, setting security-password tHRough nvram is not recommended, as
the encoding scheme shown in Table 46 is not guaranteed to remain unchanged across firmware revisions.
Note that superuser access is required to view the contents of security-password.
$ sudo nvram -p | grep security
security-#badlogins 1
security-password %c4%c5%c4%cf
security-mode none
4.12.2. Recovering the Open Firmware Password
Open Firmware security is not foolproofit is meant to be only a deterrent. It is possible to reset, change,
and perhaps even recover the firmware password. The superuser can disable firmware security by using
the nvram utility to change the value of security-mode to none. The password may also be reset via
physical access to the inside of the computer.[27]
[27] The password may be reset by altering the memory configuration of the computer and
then resetting the PRAM.
4.13. Launching the Kernel
In Chapter 5, we will discuss system startup from the point where the kernel begins to execute. Let us
briefly examine the kernel binary to determine the starting point of the kernelthat is, the point at which
BootX transfers control.
The Mac OS X kernel is a Mach-O executable. Recall from Chapter 2 that we can use the otool
command-line program to view a Mach-O executable's header and load commands.
$ file /mach_kernel
/mach_kernel: Mach-O executable ppc
$ otool -hv /mach_kernel
/mach_kernel:
Mach header
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 66 of 86
magic cputype cpusubtype filetype ncmds sizeofcmds flags
MH_MAGIC PPC ALL EXECUTE 9 2360 NOUNDEFS
$ otool -l /mach_kernel
/mach_kernel:
Load command 0
cmd LC_SEGMENT
cmdsize 532
segname __TEXT
vmaddr 0x0000e000
vmsize 0x0034f000
...
Load command 2
cmd LC_SEGMENT
cmdsize 124
segname __VECTORS
vmaddr 0x00000000
vmsize 0x00007000
fileoff 3624960
filesize 28672
maxprot 0x00000007
initprot 0x00000003
nsects 1
flags 0x0
Section
sectname __interrupts
segname __VECTORS
addr 0x00000000
size 0x00007000
offset 3624960
align 2^12 (4096)
reloff 0
nreloc 0
flags 0x00000000
reserved1 0
reserved2 0
...
Load command 8
cmd LC_UNIXTHREAD
cmdsize 176
flavor PPC_THREAD_STATE
count PPC_THREAD_STATE_COUNT
... srr0 0x00092340 srr1 0x00000000
The SRR0 register contains the value 0x00092340 in the initial thread state of this particular kernel. The
code at this address is the entry point of the kernel. We can use nm to determine the symbol, if any, that
has this address.
$ nm /mach_kernel | grep 00092340
00092340 T __start
4.14. The BootCache Optimization
Mac OS X uses a boot-time optimization called BootCacheeffectively a smart read-ahead schemethat
monitors the pattern of incoming read requests to a block device and sorts the pattern into a play list,
which is then used to cluster reads into a private cache. Each play-list entry represents a disk region to be
cached and is specified as a { block address, length } pair. This "boot cache" is thereafter used to satisfy
incoming read requests if possible. The scheme also measures the cache-hit rate. The request pattern is
stored in a history list to allow the scheme to be adaptive. If the hit rate is too low, the caching is disabled.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 67 of 86
BootCache is only supported on the root device. It requires at least 128MB of physical RAM to be
automatically enabled. The BootCache kernel extension (BootCache.kext) registers a callback named
mountroot_post_hook() with the kernel to request notification of the mounting of the root file system.
The kernel extension has the OSBundleRequired property set to Local-Root, which marks it as a
requirement for mounting root on a local volume. Therefore, before a local root file system is mounted,
the kernel will ensure that the BootCache kernel extension is loaded.
BootCache's loadable read pattern is sorted and stored in the /var/db/BootCache.playlist file. Once
this pattern is loaded, the cache comes into effect. When a recorded read pattern is fetched, the cache is
disabled and the associated memory is freed. The entire process is invisible from the user and requires no
action on the latter's part. A user-level control utility called BootCacheControl can be used to start or
stop the cache, manipulate play lists, and view cache statistics.
$ sudo BootCacheControl -f /var/db/BootCache.playlist print
512-byte blocks
143360 4096
2932736 4096
3416064 4096
...
122967457792 512 prefetch
122967576576 4096
122967666688 4096
122967826432 4096
122968137728 4096
94562816 blocks
$ sudo BootCacheControl statistics
block size 512
initiated reads 2823
blocks read 176412
...
extents in cache 1887
extent lookups 4867
extent hits 4557
extent hit ratio 93.63%
hits not fulfilled 0
blocks requested 167305
blocks hit 158456
blocks discarded by write 0
block hit ratio 94.71%
...
4.15. Boot-Time Kernel Arguments
Arguments can be passed to the Mac OS X kernel through the boot-args NVRAM variable. The kernel
parses these arguments as it boots, and in some cases, kernel extensions refer to boot arguments too. In
this section, a large number of kernel arguments are tabulated. We will come across some of the
arguments, and the contexts in which they are used, in subsequent chapters. Only brief explanations are
provided in this section for the rest. Note the following points about the use of these arguments.
The set of available kernel arguments may change across kernel revisions. Therefore, some
arguments listed here may not be available on certain kernel versions. Conversely, some kernels
may support arguments that are not listed here.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 68 of 86
Many of these arguments are intended for debugging or developmental purposes only. However,
classifying them as appropriate or inappropriate for production use is an exercise in
subjectivityconsequently, the arguments are listed as is.
The arguments are roughly classified based on the purposes they serve. However, there may be
some overlap between these categories.
 The value of the boot-args variable can be programmatically obtained on Mac OS X through the
I/O Kit or the Mach user-level APIs. Moreover, as we saw earlier, the nvram utility displays the
contents of boot-args from the command line.
Table 47 lists arguments that affect the overall booting behavior of the system. Note that most of these
arguments are deprecated in Mac OS X 10.4 or newer.
Table 47. Kernel Arguments for Boot Behavior
Argument Description
-b The kernel sets RB_NOBOOTRC in its reboot flags
variable to indicate that /etc/rc.boot should not be
run. Deprecated.
-D mach_init starts in normal mode. Core dumps are not
taken for launched servers. Deprecated.
-d mach_init starts in debug mode, with extensive
logging. Core dumps are taken for any launched
servers that crash. On Mac OS X 10.4 or newer, this
argument causes the launchd program to daemonize
early during its initialization.
-F mach_init forks during initialization. Note that it
always forks if its process ID is 1. Deprecated.
-f This argument is passed to the init program to indicate
that a fast boot is desired. Deprecated.
-r mach_init registers itself in a previously running
copy of itself. Deprecated.
-s This specifies single-user mode.
-v This specifies a verbose boot.
-x The system attempts to boot conservatively in safe
mode.
Table 48 lists arguments that can be used to alter the kernel's allocation of key data structures.
Table 48. Kernel Arguments for Resource Allocation
Argument Description
ht_shift This argument is used to scale the hash table size
during system page table allocation. By default, the
kernel uses one page table entry group (PTEG) per
four physical pages. Positive values of ht_shift
make the hash table larger, and negative values make
it smaller.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 69 of 86
initmcl This specifies the number of mbuf clusters to allocate
during mbuf initialization.
mseg This sets the maximum descriptor-based DMA
(DBDMA) segment size.
nbuf This specifies the number of I/O buffers to allocate. It
defaults to 1% of physical memory pages, up to a
maximum of 8192 and a minimum of 256.
ncl This indicates the number of mbuf clusters used to
calculate the nmbclusters value, which is the number
of mapped clusters.
zsize This sets the target zone size used while allocating
address space for zones during virtual memory
subsystem initialization. It defaults to 25% of physical
memory, with 12MB and 768MB being the minimum
and maximum values, respectively.
Table 49 lists arguments that affect the behavior of the kernel's locking mechanisms.
Table 49. Kernel Arguments for Locking Behavior
Argument Description
dfnl Setting dfnl=1 disables the split funnel.
Removed in Mac OS X 10.4.
lcks This argument specifies various locking
options found in osfmk/ppc/locks.h and
osfmk/i386/locks.h.
mtxspin This sets the lock timeout in microseconds.
refunn This enables the "refunnel" hint. Removed in
Mac OS X 10.4.
Table 410 lists arguments that can be used either by themselves or in conjunction with other arguments to
specify the root device.
Table 410. Kernel Arguments for Root Devices
Argument Description
boot-uuid This argument specifies a root device by its UUID.
Used along with rd=uuid.
rd, rootdev This specifies the root device as a device string. A
string of the form /dev/diskY specifies a disk, where
Y is the slice. Similarly, a string of the form /dev/mdx
specifies a RAM disk, where x is a single-digit
hexadecimal number. Other alternatives include
cdrom, enet, and uuid.
rp, rootpath This indicates the booter-specified root path.
vndevice Setting vndevice=1 causes the kernel to use the
vnode disk driver instead of the disk image controller
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 70 of 86
(hdix) while accessing an image remotely. Note that
HTTP can be used only with hdix.
Table 411 lists arguments that affect the kernel's scheduling behavior.
Table 411. Kernel Arguments for Scheduling Behavior
Argument Description
idlehalt Setting idlehalt=1 causes the kernel to halt a CPU
core if no other thread in that core is active, causing
the core to go into a low-power mode. An x86-only
argument.
poll This argument sets the maximum poll quanta. Default
value is 2.
preempt This specifies the preemption rate in hertz. Default
value is 100.
unsafe This identifies the maximum unsafe quanta. Default
value is 800.
yield This is used to set the sched_poll_yield_shift
scheduling variable, which is used while computing
the time value for a polled depress thread yield.
Default value is 4.
Table 412 lists arguments that can be used to enable or disable certain hardware and software features. It
also lists arguments that are useful for various types of debugging.
Table 412. Kernel Arguments for Modifying Hardware/Software Properties and
Debugging
Argument Description
artsize Specifies the number of pages to be used for the
address resolution table (ART).
BootCacheOverride The BootCache driver is loadedbut does not runin the
case of a network boot. Setting
BootCacheOverride=1 overrides this behavior.
cpus Specifying cpus=N limits the number of CPUs to N,
which must be a number less than or equal to the
number of physically available CPUs.
ctrc Limits tracing to a specific processor (see the tb
argument).
dart Setting dart=0 turns off the system PCI address
mapper (DART) on 64-bit hardware. DART is
required on machines with more than 2GB of physical
memory but is enabled by default on all machines,
regardless of their memory sizes.
debug Specifies a variety of debug flags including those for
kernel-debugging behavior. See Table 413 for details
of these flags.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 71 of 86
diag Enables the kernel's built-in diagnostics API and its
specific features.
fhrdl1 Setting fhrdl1=1 forces hardware recovery of data
cache level 1 (L1 D-cache) errors. Deprecated (see the
mcksoft argument).
fill Specifies an integer value that is used to fill all
memory pages at boot time.
fn Alters the processor's force-nap behavior. Setting
fn=1 turns force-nap off; setting fn=2 turns force-nap
on.
_fpu Disables FPU features on the x86. A string value of
387 disables FXSR/SSE/SSE2, whereas a string value
of sse disables SSE2.
hfile Name of the hibernate file (also stored in the
kern.hibernatefile sysctl variable).
io Specifies I/O Kit debugging flags. In particular,
setting the kIOLogSynchronous bit (the value
0x00200000) ensures that the IOLog() function will
complete synchronously. Normally, IOLog() output
goes to a circular buffer that is emptied periodically.
kdp_match_mac Specifies a MAC address that is to be used by the
remote kernel-debugging protocol.
kdp_match_name Specifies a BSD network interface name that is to be