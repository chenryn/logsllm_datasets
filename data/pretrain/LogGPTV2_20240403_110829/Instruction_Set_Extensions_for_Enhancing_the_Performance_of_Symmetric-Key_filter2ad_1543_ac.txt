tions supporting round key generation and the round func-
tion have a signiﬁcant impact on execution cycles, yielding
speedups for DES by a factor of up to 17.3 in non-feedback
mode and 16.5 in feedback mode and speedups for Triple-
DES by a factor of up to 17.3 in non-feedback mode and
17.0 in feedback mode. Implementation of all of the instruc-
tion set extensions yields speedups for DES by a factor of
up to 32.6 in non-feedback mode and 30.2 in feedback mode
and speedups for Triple-DES by a factor of up to 32.8 in non-
feedback mode and 32.0 in feedback mode.
The use of the mmul16 instruction signiﬁcantly decreases
the IDEA execution cycle count. While key scheduling for
encryption is unaffected, the use of the mmul16 instruction
results in a decryption key scheduling speedup by a factor of
7.8. Similarly, the use of the mmul16 instruction results in
speedups of IDEA by up to a factor of 7.7 in non-feedback
mode and 7.1 in feedback mode.
The AES instruction set extensions aessbs and aessb4s
yielded either equivalent or reduced execution cycles for both
column-oriented and row-oriented implementations versus
the aessb and aessb4 instruction set extensions. Using one
S-Box led to the largest speedup for column-oriented imple-
mentations by up to a factor of 1.4 for encryption and 1.2 for
decryption. Using four S-Boxes led to the largest speedup
for row-oriented implementations by up to a factor of 1.9 for
encryption and 1.6 for decryption. However, the use of one
S-Box reduced the key scheduling execution cycles for row-
oriented implementations.
Incorporating only the gfmmul
instruction yields
speedups of up to a factor of 1.8 for encryption and 3.0
for decryption in the column-oriented implementations.
The original code used to implement the InvMixColumns
operation for decryption requires many more operations,
and thus cycles, versus the MixColumns operation used by
encryption. The use of the gfmmul instruction results in
up to a factor of 1.1 decrease in performance for encryp-
tion and 1.04 speedup for decryption in the row-oriented
implementations. This occurs because the MixColumns and
InvMixColumns operations operate on the columns of the
AES state, requiring additional cycles to rearrange the bytes
prior to being processed by the gfmmul instruction in the
row-oriented implementations. The effects of the byte rear-
rangement is such that the speedups of the column-oriented
implementations are signiﬁcantly larger than the speedups of
the row-oriented implementations when all of the instruction
set extensions are implemented and row-oriented imple-
mentations perform better when the gfmmul instruction is
combined with one S-Box instead of four S-Boxes. Column-
oriented implementations yield speedups by a factor of 4.0
for encryption and 6.6 for decryption using one S-Box while
row-oriented implementations yield speedups by a factor of
1.4 for encryption and 1.7 for decryption.
Operation
DES Key Sched
DES Enc ECB
DES Enc CBC
DES Dec ECB
DES Dec CBC
Triple-DES Key Sched
Triple-DES Enc ECB
Triple-DES Enc CBC
Triple-DES Dec ECB
Triple-DES Dec CBC
Base
Code
2917
4330
4342
4330
4343
8750
12993
13004
12993
13004
Permute
ISEs
2917
4215
4227
4215
4228
8750
12648
12659
12648
12659
Key and
f-Function
ISEs
9
252
263
250
263
24
752
764
751
764
All
ISEs
9
133
144
132
144
24
396
407
395
407
Table 4. DES and Triple-DES execution cycles
Table 7 details execution cycle counts for some combi-
nations of extensions are compared with results published
by the ISEC project [33]. Their work includes the use of
logic-based mappings as a choice of hardware implementa-
tion for the S-Boxes. The sbox and sbox4 instructions from
the ISEC project are equivalent to the aessbs and aessb4 in-
471471
4 S-Boxes GF Mult
Operation
Col Oriented Key Sched
Col Oriented Enc ECB
Col Oriented Enc CBC
Col Oriented Dec ECB
Col Oriented Dec CBC
Row Oriented Key Sched
Row Oriented Enc ECB
Row Oriented Enc CBC
Row Oriented Dec ECB
Row Oriented Dec CBC
Base
Code
588
1404
1468
1872
1936
564
1220
1284
1328
1392
1 S-Box
ISEs
176
764
828
1200
1264
256
620
684
692
756
Operation
Col Oriented Key Sched
Col Oriented Enc ECB
Col Oriented Enc CBC
Col Oriented Dec ECB
Col Oriented Dec CBC
Row Oriented Key Sched
Row Oriented Enc ECB
Row Oriented Enc CBC
Row Oriented Dec ECB
Row Oriented Dec CBC
Base
Code
519
1742
1768
2872
2899
669
1335
1361
1622
1649
1 S-Box
ISEs
376
1250
1276
2360
2387
606
926
952
1193
1220
ISEs
164
908
972
1408
1472
564
476
540
592
656
ISEs
346
1423
1449
2638
2665
669
717
743
1026
1053
1 S-Box and
GF Mult
ISEs
176
392
456
392
456
256
540
604
668
732
1 S-Box and
GF Mult
ISEs
376
435
462
435
462
606
751
778
1132
1159
4 S-Boxes and
GF Mult
ISEs
164
520
584
528
592
564
584
648
568
632
4 S-Boxes and
GF Mult
ISEs
346
549
576
561
588
669
971
998
964
991
ISEs
588
1052
1116
1048
1112
564
1328
1392
1296
1360
ISEs
519
962
989
963
990
669
1573
1600
1557
1584
Table 3. AES code size (bytes)
4 S-Boxes GF Mult
Table 6. AES execution cycles
Operation
Enc Key Sched
Dec Key Sched
Enc ECB
Enc CBC
Dec ECB
Dec CBC
Base
Code
894
43005
2580
2602
2577
2602
Modulo 216 + 1
Multiplication
ISE
894
5510
337
365
337
365
Table 5. IDEA execution cycles
structions presented in this research. The mixcol4 instruc-
tion uses an entire 32-bit word as input into an AES-speciﬁc
MixColumns/InvMixColumns functional unit.
In order to
address the ShiftRows operation, the instructions sbox4s
and mixcol4s combine an implicit ShiftRows operation with
SubBytes and MixColumns respectively. This functionality
is similar but not identical to the combination of the aessb4s
and gfmmul instructions.
Implementation
No Extensions (ISEC)
No Extensions (UML)
4 S-Boxes sbox4 (ISEC)
4 S-Boxes aessb4 (UML)
GF Mult mixcol4 (ISEC)
GF Mult gfmmul (UML)
sbox and mixcol4 (ISEC)
aessbs and gfmmul (UML)
sbox4s and mixcol4s (ISEC)
aessb4s and gfmmul (UML)
Enc
Cyc
1637
1335
1020
837
939
962
458
435
458
549
Enc
SU
1.0
1.0
1.6
1.6
1.7
1.4
3.6
3.1
3.6
2.4
Dec
Cyc
1955
1622
1435
1117
970
963
458
435
459
561
Dec
SU
1.0
1.0
1.4
1.5
2.0
1.7
4.3
3.7
4.3
2.9
Table 7. AES execution cycles comparison
and combinational logic used to compute the matrix product,
the Galois Field matrix multiplier is the largest of the added
hardware units. The implementation with all of the proposed
instruction set extensions leads to a total area increase over
the baseline conﬁguration by approximately 63%. The mod-
ulo 216 + 1 multiplier for IDEA was the single largest
contributor to decreases in the implementation’s maximum
operating frequency. A purely combinational design of the
multiplier had large path delays due to the carry-propagate
adder structure, yielding a maximum operating frequency of
only 72 MHz. The multiplier was modiﬁed to create a two
cycle instruction implementation to decrease the effect on
the processor clock frequency. With all extensions imple-
mented, the LEON2 processor implementation resulted in a
clock frequency of approximately 117 MHz, a 10% decrease
compared to the baseline implementation.
Baseline LEON2 Implementation
DES
Permutation
Keygen/f-Function