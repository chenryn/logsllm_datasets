in a set of APIs that can give web applications the ability to access de-
vice hardware via JavaScript. Some examples to these HTML5 APIs
are Geolocation and getUserMedia, which enable access to GPS
and to media devices such as camera and microphone, respectively.
When a web domain requests access to one of these devices, the user
should be prompted to grant access to this request. Starting from API
level 21, Android WebView provides support for these HTML5 APIs
and introduces mechanisms to grant or deny requests for accessing
device hardware. In order to handle requests from web origins, the
developer needs to make use of onGeolocationShowPrompt (for ge-
olocation), and onPermissionRequest (for media devices) to grant or
deny permission to the requests. In Listing 2, we show an example
of how HTML5 geolocation permission can be handled on Android.
Listing 3 shows how granting permissions for HTML5 request will
be combined with Android 6.0’s run time permissions. Evidently,
handling HTML5 requests can get cumbersome when combined
with Android 6.0’s run time permissions.
Listing 2: Granting access to HTML5 geolocation requests
@Override
public void onGeolocationPermissionsShowPrompt(String origin,
GeolocationPermissions.Callback callback) {
myCallback = callback; //myCallback is global
//If the permission is not yet granted, ask for it.
if (ContextCompat.checkSelfPermission(getApplicationContext(),
Manifest.permission.ACCESS_FINE_LOCATION)
!= PackageManager.PERMISSION_GRANTED) {
ActivityCompat.requestPermissions(thisActivity, new
String[]{Manifest.permission.ACCESS_FINE_LOCATION},
MY_PERMISSIONS_REQUEST_ACCESS_FINE_LOCATION);
} else { // Permission is already granted
callback.invoke(origin, true, false);
}
}
Listing 3: Run time permissions on Android
@Override
public void onRequestPermissionsResult(int requestCode,
String permissions[], int[] grantResults) {
switch (requestCode) {
case MY_PERMISSIONS_REQUEST_ACCESS_FINE_LOCATION: {
if (grantResults.length > 0 && grantResults[0] ==
PackageManager.PERMISSION_GRANTED) {
// permission was granted, do your location task
myCallback.invoke(myOrigin, true, false);
} else { // permission denied
// disable functionality depenging on this permission.
}
//Handle other permissions...
3. UNDERSTANDING THE PROBLEM
In this section, we will discuss the lack of access control in Java-
script bridges in WebView. We will argue that even though the
Android APIs for handling HTML5 requests provide the means to
perform limited origin-based access control (i.e., only for a subset
of the device resources), developers simply avoid leveraging that
due to the cumbersome and complex nature of the permission han-
dling APIs. Finally, we will present our case studies on two mature
and popular free Android apps that suffer from the nonexistence of
access control in WebViews.
3.1 Lack of Access Control in WebView
The vulnerabilities in WebViews have been investigated by previ-
ous work [1, 7, 8, 9, 10]. A recurrent and fundamental problem is
that there is no way of performing access control on the foreign code
executed within a WebView; any origin loaded into the WebView is
free to use the exposed JavaScript bridges. In particular, since the
origin information is not propagated to the app through the bridges,
the app developer has no control over the behavior of foreign code
and cannot make access decisions based on the real origin of the
invocation. With the introduction of API level 17, Android addressed
some critical problems of WebViews such as reﬂection-based attacks
by introducing Java annotations into the WebView API to limit the
extent of exposure. However, this does not completely solve the
problem as the foreign code loaded into the WebView still has the
same permissions as the host app, and it can exploit the exposed
parts of the JavaScript bridges to perform malicious activities such
as accessing system resources, getting the user’s private information,
and executing code that was meant for use only by the web domain
of the developer.
In order for a JavaScript bridge to be exploitable, the app must
load untrusted content into the associated WebView. An obvious
way is by allowing the WebView to navigate to untrusted websites or
to sites with untrusted content (e.g., iframe). Previous work shows
that navigation to untrusted sites is common among applications:
34% of the apps that use WebViews do allow the user to navigate
to third-party websites [1], and 42.5% of the apps that register a JS
interface allow the user to navigate to third-party websites or to web-
sites with untrusted content [8]. In order to verify these results, we
picked three top-selling Android apps that demonstrate the common
vulnerabilities identiﬁed by previous work: USPS, CVS Caremark,
and JobSearch by Indeed. Through manually analyzing their code,
we observed that developers do try to take precautions against the
attacks on JS bridges by loading pages from untrusted domains in
either the browser instead of the WebView (e.g., USPS app), or in
separate WebViews with limited functionality which they create for
this purpose (e.g., JobSearch app by Indeed). However, developers
can make mistakes while implementing the navigation control logic.
For example, in the USPS app, the developer checks if the loaded
URL contains “usps.com” rather than checking if the host’s domain
name matches “usps.com”, mistakenly allowing any non-USPS web-
site that partially matches “usps.com” (e.g., musps.com, uusps.com).
Additionally, developers might make wrong assumptions about the
navigation behavior of the WebView. We have identiﬁed that the
app developer might assume that the content provided to the Web-
View intrinsically does not allow navigation (i.e., it does not contain
hyperlinks) and provide the user with functionalities that can break
this assumption (e.g., allowing users to input hyperlinks) as in Job-
Search app by Indeed, or they simply do not foresee that a speciﬁc
WebView can be used by the user to navigate out of the trust-zone of
the app by just following the links on the web pages as in the CVS
Caremark app. We will examine the CVS Caremark and JobSearch
apps in more detail later in this section.
Although it may look like correct implementation of navigation
control would solve the JavaScript bridge exploitation issues (and
ﬁx the USPS app), we argue that it is simply an insufﬁcient measure
to protect JavaScript bridges. Even if developers implement all
navigation behavior correctly and do not allow the user to navigate
to untrusted web origins within the context of their apps, the pages
from trusted domains might include untrusted components such as
iframes, which also inherit the same permissions as the app and
have access to all the exposed bridges. Thus, the system does not
provide the necessary means for developers to completely protect
their apps against attacks on the JavaScript bridges.
3.2 Prevalence
While the current design of JavaScript bridges by default grants
access to a domain for all the exposed resources, for HTML5 APIs
the access model is exactly the opposite; the default behavior is
to deny all the requests by a domain for a permission unless the
onPermissionRequestResult and onPermissionsRequest or
onGeolocationPermissionPrompt methods are overridden by the app
developer. In order to better understand how this difference between
the JavaScript bridges and the HTML5 APIs affects the develop-
ers, we statically analyzed the top 1337 free Android applications
from 21 Google Play categories selected at our discretion. Table 1
depicts the prevalence of WebViews and how often WebView APIs
are used in these apps. Here, we distinguish ad and core WebViews
(WebView in the core of the app) based on our comprehensive list of
package names for ad libraries, and also give the cumulative result
including both uses of WebView. In line with the previous work [1,
8], we have observed that WebView is a commonly-used component
as around 92% of the applications in our dataset make use of it in
their core application code (i.e., not used by advertisement libraries).
Among the applications that include at least one WebView in their
core code, 77% of them use JavaScript interfaces, and 70% use event
handlers. However, it can be observed that there is a sudden drop
in the numbers when it comes to the use of HTML5 APIs. This
might be happening for two reasons. On the one hand, developers
generally do not wish to grant access to permission-protected re-
sources to external domains, and apps can operate without having
to rely on external web origins. On the other hand, even though
more than 85% of the apps in our dataset target API 21 or higher
and are able to handle HTML5 API requests, they simply decide
not to do so, possibly due to the complex request handling logic
of the HTML5 APIs. Since the majority of the apps require API
21 or higher, they need to comply with the run time permissions
introduced by Android 6.0. This means that each time they wish to
grant access to a web domain, they also need to check if the app
was granted the permission of interest by the user and, if not, they
must prompt the user to grant it. On top of this, they also need to
implement origin-based access control; hence, they need to main-
tain the necessary data structures and track user preferences. This
process is unnecessarily cumbersome. If the system provides the
necessary infrastructure to allow developers to uniformly declare
their security policies, this would minimize effort and reduce the
likelihood of errors, irrespective of the underlying channel (whether
that is a JavaScript interface, an event handler or an HTML5 API).
3.3 Case Studies
Previous work has shown how applications built with hybrid
frameworks suffer from JavaScript bridge vulnerabilities since hy-
brid frameworks rely on these bridges to give application code
access to device resources like the camera, contact list and so on [2,
3]. However, the problem is not constrained to hybrid applications.
In fact, an application that uses an embedded browser to display
web content and needs enhanced communication between the web
domain and the app, is susceptible to similar exploits. Here, we
investigate the understudied JavaScript bridge issues that exist in
non-hybrid applications. In particular, we present our analysis on
two widely-deployed applications distributed through the Google
Play store, which we found as suffering from JavaScript bridge
issues. Indeed, we show that the exposure of these bridges to adver-
saries can be detrimental to users’ privacy and can adversely affect
the application’s ﬂow. We have disclosed these issues to the devel-
opers of those apps but—at the time of writing—haven’t received a
response.
CVS Caremark. CVS Caremark is one of the Android apps offered
by the American pharmacy retail company CVS. It has been down-
loaded 100,000 times so far and currently has a rating of 3.6. It
allows users to track their prescription history, get reﬁlls or request
mail service for new prescriptions, and get information about drugs
and their interactions. In order to help their users with their medical
needs, the app requires them to register to the CVS system with
their name, health care ID, and email address. The app additionally
tracks some other personal information, including the user’s phar-
Used Web Features
WebView
JavaScript enabled
JavaScript Interfaces
@JavaScriptInterface
onJsPrompt
onJsAlert
onJsConﬁrm
onGeolocationPermissionsShowPrompt
onPermissionRequest
# (%) in core
1226 (92%)
1189 (89%)
945 (71%)
587 (44%)
857 (64%)
696 (52%)
699 (52%)
567 (42%)
32 (2%)
# (%) in ad
551 (41%)
495 (37%)
395 (30%)
328 (25%)
202 (15%)
259 (19%)
214 (16%)
169 (13%)
0 (0%)
# in both core and ad
544 (41%)
482 (36%)
361 (27%)
182 (14%)
172 (13%)
227 (17%)
184 (14%)
133 (10%)
0 (0%)
Total # (%)
1233 (92%)
1202 (90%)
979 (73%)
769 (58%)
887 (66%)
923 (69%)
883 (66%)
700 (52%)
32 (2%)
Table 1: Prevalence of WebViews and use of WebView APIs (#: absolute number, %: percentage)
macy preferences and location. Furthermore, the app implements
some functionality to check the login state of users, retrieve some
internal database IDs, perform UI functionality such as displaying
date pickers, and invoke the browser to load a given URL.
CVS Caremark app uses WebViews to render web content, and uti-
lizes JavaScript interfaces to enable a tight communication between
the app and CVS web servers. It registers two different interfaces
with the WebView, of classes WebViewJavascriptInterface and
JavaScriptWebBridge, and names the JavaScript objects associated
with these interfaces “native” and “WebJSInterface” respectively.
We observed that the “native” interface implements some of the
main functionalities of the app (e.g., scanning prescriptions, regis-
tering users etc.) with access to device resources and exposes user’s
private information. Hence, it is highly possible that this interface
was meant by the developer to be used for internal use only, that is
by trusted CVS domains. On the contrary, the “WebJSInterface” is
possibly meant to be used in a more generic context and by untrusted
domains; hence, it exposes functionalities more conservatively. How-
ever, this attempt to protect the app and device resources by creating
two interfaces is not useful, since both of these interfaces belong to
the same WebView instance, which is used to load all URLs. Hence,
the security of the app relies on implementing navigation control
correctly, by not allowing the app to navigate to untrusted domains
or to domains that might contain pages with untrusted elements. The
app simply does not make any attempt to mitigate the problem by im-
plementing navigation control to ﬁlter untrusted domains; hence, it
is vulnerable to JavaScript bridge attacks. Even if navigation control
was implemented correctly, this would not be enough to protect from
these attacks since even a trusted origin may include elements that
are of risky nature (e.g., iframe). We have successfully performed
an attack on this JavaScript interface bridge by navigating to our
attack URL which runs the code in 4. The attack domain was able
to retrieve personal information (like the user’s name, health care
ID, email address, pharmacy preference, and location) as well as
execute app functions such as using the camera on the victim device
for barcode scanning functionality and retrieving images of user’s
prescription drugs.
Job Search by Indeed. Job Search is an app released by Indeed, a
company that produces an employment-related search engine (in-
deed.com), to allow users to search for jobs on their Android devices.
The app is downloaded 10,000,000 times and has a rating of 4.1.
Most of the content displayed to the user in the app is fetched from
Indeed’s web domain (indeed.com) and rendered in a WebView. This
is done mainly to reuse the UI code of Indeed’s web domain in order
to reduce the app development effort and simplify maintenance of its
deployment. Similarly to the CVS Caremark app, JobSearch creates
and uses two types of WebView classes, one (of class IndeedWebView
that extends the WebView class) for internal use and another (of class