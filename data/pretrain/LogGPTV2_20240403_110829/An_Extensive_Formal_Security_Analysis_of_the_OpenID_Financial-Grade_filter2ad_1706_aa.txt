title:An Extensive Formal Security Analysis of the OpenID Financial-Grade
API
author:Daniel Fett and
Pedram Hosseyni and
Ralf K&quot;usters
(cid:19)(cid:17)(cid:18)(cid:26)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:1)(cid:52)(cid:90)(cid:78)(cid:81)(cid:80)(cid:84)(cid:74)(cid:86)(cid:78)(cid:1)(cid:80)(cid:79)(cid:1)(cid:52)(cid:70)(cid:68)(cid:86)(cid:83)(cid:74)(cid:85)(cid:90)(cid:1)(cid:66)(cid:79)(cid:69)(cid:1)(cid:49)(cid:83)(cid:74)(cid:87)(cid:66)(cid:68)(cid:90)
An Extensive Formal Security Analysis of the
OpenID Financial-grade API
Daniel Fett
yes.com AG
Pedram Hosseyni
University of Stuttgart, Germany
Ralf Küsters
University of Stuttgart, Germany
PI:EMAIL
PI:EMAIL
PI:EMAIL
Abstract—Forced by regulations and industry demand, banks
worldwide are working to open their customers’ online banking
accounts to third-party services via web-based APIs. By using
these so-called Open Banking APIs, third-party companies, such
as FinTechs, are able to read information about and initiate
payments from their users’ bank accounts. Such access to
ﬁnancial data and resources needs to meet particularly high
security requirements to protect customers.
One of the most promising standards in this segment is the
OpenID Financial-grade API (FAPI), currently under develop-
ment in an open process by the OpenID Foundation and backed
by large industry partners. The FAPI is a proﬁle of OAuth 2.0
designed for high-risk scenarios and aiming to be secure against
very strong attackers. To achieve this level of security, the FAPI
employs a range of mechanisms that have been developed to
harden OAuth 2.0, such as Code and Token Binding (including
mTLS and OAUTB), JWS Client Assertions, and Proof Key for
Code Exchange.
In this paper, we perform a rigorous, systematic formal analy-
sis of the security of the FAPI, based on an existing comprehensive
model of the web infrastructure—the Web Infrastructure Model
(WIM) proposed by Fett, Küsters, and Schmitz. To this end, we
ﬁrst develop a precise model of the FAPI in the WIM, including
different proﬁles for read-only and read-write access, different
ﬂows, different types of clients, and different combinations of
security features, capturing the complex interactions in a web-
based environment. We then use our model of the FAPI to
precisely deﬁne central security properties. In an attempt to
prove these properties, we uncover partly severe attacks, breaking
authentication, authorization, and session integrity properties.
We develop mitigations against these attacks and ﬁnally are able
to formally prove the security of a ﬁxed version of the FAPI.
Although ﬁnancial applications are high-stakes environments,
this work is the ﬁrst to formally analyze and, importantly, verify
an Open Banking security proﬁle.
By itself, this analysis is an important contribution to the
development of the FAPI since it helps to deﬁne exact security
properties and attacker models, and to avoid severe security risks
before the ﬁrst implementations of the standard go live.
Of independent interest, we also uncover weaknesses in the
aforementioned security mechanisms for hardening OAuth 2.0.
We illustrate that these mechanisms do not necessarily achieve
the security properties they have been designed for.
I. INTRODUCTION
Delivering ﬁnancial services has long been a ﬁeld exclusive
to traditional banks. This has changed with the emergence of
FinTech companies that are expected to deliver more than 20%
of all ﬁnancial services in 2020 [1]. Many FinTechs provide
services that are based on access to a customers online banking
account information or on initiating payments from a customers
bank account.
For a long time, screen scraping has been the primary
means of these service providers to access the customer’s
data at the bank. Screen scraping means that the customer
enters online banking login credentials at the service provider’s
website, which then uses this data to log into the customer’s
online banking account by emulating a web browser. The
service provider then retrieves account information (such as
the balance or recent activities) and can trigger, for example, a
cash transfer, which may require the user to enter her second-
factor authentication credential (such as a TAN) at the service
provider’s web interface.
Screen scraping is inherently insecure: ﬁrst of all, the service
provider gets to know all login credentials, including the
second-factor authentication of the customer. Also, screen
scraping is prone to errors, for example, when the website
of a bank changes.
Over the last years,
the terms API banking and Open
Banking have emerged to mark the introduction of standardized
interfaces to ﬁnancial institutions’ data. These interfaces enable
third parties, in particular FinTech companies, to access users’
bank account information and initiate payments through well-
deﬁned APIs. All around the world, API banking is being
promoted by law or by industry demand: In Europe, the
Payment Services Directive 2 (PSD2) regulation mandates
all banks to introduce Open Banking APIs by September
2019 [2]. The U.S. Department of the Treasury recommends
the implementation of such APIs as well [3]. In South Korea,
India, Australia, and Japan, open banking is being pushed by
large ﬁnancial corporations [4].
One important open banking standard currently under de-
velopment for this scenario is the OpenID Financial-grade
API (FAPI).1 The FAPI [5] is a proﬁle (i.e., a set of concrete
protocol ﬂows with extensions) of the OAuth 2.0 Authorization
Framework and the identity layer OpenID Connect to provide
a secure authorization and authentication scheme for high-
risk scenarios. The FAPI is under development at the OpenID
Foundation and supported by many large corporations, such
as Microsoft and the largest Japanese consulting ﬁrm, Nomura
Research Institute. The OpenID Foundation is also cooperating
1In its current form, the FAPI does not (despite its name) deﬁne an API
itself, but deﬁnes a security proﬁle for the access to APIs.
(cid:165)(cid:1)(cid:19)(cid:17)(cid:18)(cid:26)(cid:13)(cid:1)(cid:37)(cid:66)(cid:79)(cid:74)(cid:70)(cid:77)(cid:1)(cid:39)(cid:70)(cid:85)(cid:85)(cid:15)(cid:1)(cid:54)(cid:79)(cid:69)(cid:70)(cid:83)(cid:1)(cid:77)(cid:74)(cid:68)(cid:70)(cid:79)(cid:84)(cid:70)(cid:1)(cid:85)(cid:80)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:15)
(cid:37)(cid:48)(cid:42)(cid:1)(cid:18)(cid:17)(cid:15)(cid:18)(cid:18)(cid:17)(cid:26)(cid:16)(cid:52)(cid:49)(cid:15)(cid:19)(cid:17)(cid:18)(cid:26)(cid:15)(cid:17)(cid:17)(cid:17)(cid:23)(cid:24)
(cid:21)(cid:22)(cid:20)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:17 UTC from IEEE Xplore.  Restrictions apply. 
with other banking standardization groups: The UK Open
Banking Implementation Entity, backed by nine major UK
banks, has adopted the FAPI security proﬁle.
The basic idea behind the FAPI is as follows: The owner
of the bank account (resource owner, also called user in what
follows) visits some website or uses an app which provides
some ﬁnancial service. The website or app is called a client
in the FAPI terminology. The client redirects the user to the
authorization server, which is typically operated by the bank.
The authorization server asks for the user’s bank account
credentials. The user is then redirected back to the client with
some token. The client uses this token to obtain bank account
information or initiate a payment at the resource server, which
is typically also operated by the bank.
The FAPI aims to be secure against much stronger attackers
than its foundations, OAuth 2.0 and OpenID Connect: the FAPI
assumes that sensitive tokens leak to an attacker through the
user’s browser or operating system, and that endpoint URLs
can be misconﬁgured. On the one hand, both assumptions
are well motivated by real-world attacks and the high stakes
nature of the environment where the FAPI is to be used. On
the other hand, they directly break the security of OAuth 2.0
and OpenID Connect.
To provide security against such strong attackers, the FAPI
employs a range of OAuth 2.0 security extensions beyond those
used in plain OAuth 2.0 and OpenID Connect: the FAPI uses
the so-called Proof Key for Code Exchange (PKCE)2 extension
to prevent unauthorized use of tokens. For client authentication
towards the authorization server, the FAPI employs JWS Client
Assertions or mutual TLS. Additionally, OAuth token binding3
or certiﬁcate-bound access tokens4 can be used as holder-of-
key mechanisms. To introduce yet another new feature, the
FAPI is the ﬁrst standard to make use of the so-called JWT
Secured Authorization Response Mode (JARM).
The FAPI consists of two main so-called parts, here also
called modes, that stipulate different security proﬁles for read-
only access to resource servers (e.g., to retrieve bank account
information) and read-write access (e.g., for payment initiation).
Both modes can be used by conﬁdential clients, i.e., clients
that can store and protect secrets (such as web servers), and
by public clients that cannot securely store secrets, such
as JavaScript browser applications. Combined with the new
security features, this gives rise to many different settings and
conﬁgurations in which the FAPI can run (see also Figure 3).
This, the expected wide adoption, the exceptionally strong
attacker model, and the new security features make the FAPI
a particularly interesting, challenging, and important subject
for a detailed security analysis. While the security of (plain)
OAuth 2.0 and OpenID Connect has been studied formally
and informally many times before [6]–[21], there is no such
analysis for the FAPI—or any other open banking API—so
far. In particular, there are no results in the strong attacker
2Pronounced pixie, RFC 7636.
3https://tools.ietf.org/html/draft-ietf-oauth-token-binding-07
4https://tools.ietf.org/html/draft-ietf-oauth-mtls-11
model adopted for the FAPI, and there has been no formal
security analysis of the additional OAuth security mechanisms
employed by the FAPI (PKCE, JWS Client Assertions, mTLS
Client Authentication, OAuth Token Binding, Certiﬁcate-
Bound Access Tokens, JARM), which is of practical relevance
in its own right.
In this paper, we therefore study the security of the FAPI
in-depth, including the OAuth security extensions. Based on a
detailed formal model of the web, we formalize the FAPI with
its various conﬁgurations as well as its security properties. We
discover four previously unknown and severe attacks, propose
ﬁxes, and prove the security of the ﬁxed protocol based on
our formal model of the FAPI, again considering the various
conﬁgurations in which the FAPI can run. Importantly, this also
sheds light on new OAuth 2.0 security extensions. In detail,
our contributions are as follows:
Contributions of this Paper: We build a detailed formal
model of the FAPI based on a comprehensive formal model
of the web infrastructure proposed by Fett et al. in [22], which
we refer to as the Web Infrastructure Model (WIM). The WIM
has been successfully used to ﬁnd vulnerabilities in and prove
the security of several web applications and standards [6], [7],
[22]–[24]. It captures a wide set of web features from DNS
to JavaScript in unrivaled detail and comprehensiveness. In
particular, it accounts for the intricate inner workings of web
browsers and their interactions with the web environment. The
WIM is ideally suited to identify logical ﬂaws in web protocols,
detect a range of standard web vulnerabilities (like cross-site
request forgery, session ﬁxation, misuse of certain web browser
features, etc.), and even to ﬁnd new classes of web attacks.
Based on the generic descriptions of web servers in the WIM,
our models for FAPI clients and authorization servers contain
all important features currently proposed in the FAPI standards.
This includes the ﬂows from both parts of the FAPI, as well
as the different options for client authentication, holder-of-key
mechanisms, and token binding mentioned above.
Using this model of the FAPI, we deﬁne precise security
properties for authorization, authentication, and session in-
tegrity. Roughly speaking, the authorization property requires
that an attacker is unable to access the resources of another
user at a bank, or act on that user’s behalf towards the bank.
Authentication means that an attacker is unable to log in at
a client using the identity of another user. Session integrity
means that an attacker is unable to force a user to be logged
in at a client under the attackers identity, or force a user to
access (through the client) the attacker’s resources instead of
the user’s own resources (session ﬁxation).
During our ﬁrst attempts to prove these properties, we
discovered four unknown attacks on the FAPI. With these
attacks, adversaries can gain access to the bank account of
a user, break session integrity, and, interestingly, circumvent
certain OAuth security extensions, such as PKCE and Token
Binding, employed by the FAPI.
We notiﬁed the OpenID FAPI Working Group of the attacks
and vulnerabilities found by our analysis and are working
together with them to ﬁx the standard. To this end, we ﬁrst
(cid:21)(cid:22)(cid:21)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:17 UTC from IEEE Xplore.  Restrictions apply. 
developed mitigations against the vulnerabilities. We then,
as another main contribution of our work and to support
design decisions during the further development of the FAPI,
implemented the ﬁxes in our formal model and provided the
ﬁrst formal proof of the security of the FAPI (with our
ﬁxes applied) within our model of the FAPI, including all
conﬁgurations of the FAPI and the various ways in which the
new OAuth security extensions are employed in the FAPI (see
Figure 3). This makes the FAPI the only open banking API to
enjoy a thorough and detailed formal security analysis.
this Paper: We ﬁrst,
Our ﬁndings also show that (1) several OAuth 2.0 security
extensions do not necessarily achieve the security properties
they have been designed for and that (2) combining these
extensions in a secure way is far from trivial. These results are
relevant for all web applications and standards which employ
such extensions.
Structure of
in Section II, recall
OAuth 2.0 and OpenID Connect as the foundations of the
FAPI. We also introduce the new defense mechanisms that
set the FAPI apart from “traditional” OAuth 2.0 and OpenID
Connect ﬂows. This sets the stage for Section III where we go
into the details of the FAPI and explain its design and features.
In Section IV, we present the attacks on the FAPI (and the
new security mechanisms it uses), which are the results of our
initial proof attempts, and also present our proposed ﬁxes. The
model of the FAPI and the analysis are outlined in Section V,
along with a high-level introduction to the Web Infrastructure
Model we use as the basis for our formal model and analysis of
the FAPI. We conclude in Section VI. The appendix contains
further details. Full details and proofs are provided in our
technical report [25].
Browser (B)
Client (C)
Authorization Server (AS)
1 POST /start
POST /start
2 Response
Response
Redirect to AS /authorization_endpoint
Redirect to AS /authorization_endpoint
(client_id, redirect_uri, state)
(client_id, redirect_uri, state)
3 GET /authorization_endpoint (Authorization Request)
GET /authorization_endpoint (Authorization Request)
(client_id, redirect_uri, state)
(client_id, redirect_uri, state)
4 resource owner authenticates
resource owner authenticates
5 Response
Response
Redirect to C /redirect_uri (code, state)
Redirect to C /redirect_uri (code, state)
6 GET /redirect_uri (Authorization Response)
GET /redirect_uri (Authorization Response)
(code, state)
(code, state)
7 POST /token_endpoint (Token Request)
POST /token_endpoint (Token Request)
(code, client_id, [client authentication])
(code, client_id, [client authentication])
8 Response
Response
(access token)
(access token)
Authorization Server (AS)
Resource Server (RS)