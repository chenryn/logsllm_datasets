# An Extensive Formal Security Analysis of the OpenID Financial-Grade API

**Authors:**
- Daniel Fett, yes.com AG
- Pedram Hosseyni, University of Stuttgart, Germany
- Ralf Küsters, University of Stuttgart, Germany

## Abstract

Driven by regulations and industry demand, banks worldwide are working to open their customers' online banking accounts to third-party services via web-based APIs. These so-called Open Banking APIs enable third-party companies, such as FinTechs, to read information about and initiate payments from users' bank accounts. Access to financial data and resources must meet high security requirements to protect customers.

One of the most promising standards in this segment is the OpenID Financial-grade API (FAPI), currently under development by the OpenID Foundation with support from major industry partners. The FAPI is a profile of OAuth 2.0 designed for high-risk scenarios, aiming to be secure against strong attackers. To achieve this, the FAPI employs various mechanisms to harden OAuth 2.0, such as Code and Token Binding (including mTLS and OAUTB), JWS Client Assertions, and Proof Key for Code Exchange (PKCE).

In this paper, we perform a rigorous, systematic formal analysis of the FAPI's security based on the Web Infrastructure Model (WIM) proposed by Fett, Küsters, and Schmitz. We first develop a precise model of the FAPI in the WIM, including different profiles for read-only and read-write access, different flows, types of clients, and combinations of security features. We then use our model to define central security properties. In attempting to prove these properties, we uncover severe attacks that break authentication, authorization, and session integrity. We develop mitigations for these attacks and formally prove the security of a fixed version of the FAPI.

This analysis is a significant contribution to the FAPI's development, helping to define exact security properties and attacker models, and avoiding severe security risks before the standard's first implementations go live. Additionally, we uncover weaknesses in the security mechanisms used to harden OAuth 2.0, illustrating that these mechanisms do not necessarily achieve the intended security properties.

## I. Introduction

Traditionally, delivering financial services has been the exclusive domain of banks. However, the emergence of FinTech companies, expected to deliver over 20% of all financial services by 2020, has changed this. Many FinTechs provide services that require access to customers' online banking account information or the ability to initiate payments from their accounts.

Screen scraping, where service providers use customers' login credentials to log into their online banking accounts, has long been the primary means of accessing this data. This method is inherently insecure, as it exposes all login credentials, including second-factor authentication, and is prone to errors, such as when bank websites change.

In recent years, the terms "API banking" and "Open Banking" have emerged to denote the introduction of standardized interfaces to financial institutions' data. These interfaces enable third parties, particularly FinTech companies, to access users' bank account information and initiate payments through well-defined APIs. Globally, API banking is being promoted by law or industry demand. For example, the Payment Services Directive 2 (PSD2) in Europe mandates that all banks introduce Open Banking APIs by September 2019. Similar initiatives are underway in the U.S., South Korea, India, Australia, and Japan.

One important open banking standard under development is the OpenID Financial-grade API (FAPI). The FAPI is a profile of the OAuth 2.0 Authorization Framework and the identity layer OpenID Connect, designed to provide a secure authorization and authentication scheme for high-risk scenarios. It is supported by large corporations, such as Microsoft and Nomura Research Institute, and is being adopted by groups like the UK Open Banking Implementation Entity.

The FAPI aims to be secure against strong attackers, assuming that sensitive tokens can leak through the user's browser or operating system, and that endpoint URLs can be misconfigured. To achieve this, the FAPI uses several OAuth 2.0 security extensions, such as PKCE, JWS Client Assertions, mutual TLS, OAuth token binding, and certificate-bound access tokens. It also introduces the JWT Secured Authorization Response Mode (JARM).

The FAPI consists of two main parts: one for read-only access and another for read-write access. Both can be used by confidential and public clients, leading to many different configurations. This, combined with the strong attacker model and new security features, makes the FAPI an interesting and challenging subject for a detailed security analysis.

While the security of OAuth 2.0 and OpenID Connect has been studied extensively, there is no such analysis for the FAPI. In this paper, we provide a detailed formal analysis of the FAPI, including its OAuth security extensions. We build a formal model of the FAPI based on the Web Infrastructure Model (WIM) and define precise security properties for authorization, authentication, and session integrity. During our initial attempts to prove these properties, we discovered four previously unknown and severe attacks. We developed mitigations for these attacks and provided the first formal proof of the security of the FAPI with our fixes applied.

Our findings also show that several OAuth 2.0 security extensions do not necessarily achieve the security properties they were designed for, and combining these extensions securely is non-trivial. These results are relevant for all web applications and standards employing such extensions.

## II. Background

### OAuth 2.0 and OpenID Connect

OAuth 2.0 is an authorization framework that enables applications to obtain limited access to user accounts on an HTTP service. OpenID Connect is an identity layer built on top of OAuth 2.0, allowing clients to verify the identity of the end-user based on the authentication performed by an authorization server.

### New Defense Mechanisms in FAPI

The FAPI introduces several new defense mechanisms to enhance the security of OAuth 2.0 and OpenID Connect:
- **Proof Key for Code Exchange (PKCE)**: Prevents unauthorized use of tokens.
- **JWS Client Assertions**: Used for client authentication towards the authorization server.
- **Mutual TLS (mTLS)**: Provides strong client authentication.
- **OAuth Token Binding (OAUTB)**: Ensures that tokens are bound to the client's cryptographic key.
- **Certificate-Bound Access Tokens**: Binds access tokens to the client's certificate.
- **JWT Secured Authorization Response Mode (JARM)**: Enhances the security of the authorization response.

## III. The OpenID Financial-Grade API (FAPI)

### Overview

The FAPI is designed for high-risk scenarios, such as financial transactions. It assumes that sensitive tokens can leak through the user's browser or operating system and that endpoint URLs can be misconfigured. To address these threats, the FAPI employs a range of security mechanisms.

### Profiles and Flows

The FAPI includes two main profiles:
- **Read-Only Profile**: Allows read-only access to resource servers, e.g., to retrieve bank account information.
- **Read-Write Profile**: Allows read-write access, e.g., for payment initiation.

Both profiles can be used by:
- **Confidential Clients**: Can store and protect secrets, such as web servers.
- **Public Clients**: Cannot securely store secrets, such as JavaScript browser applications.

### Security Features

- **Client Authentication**: Uses JWS Client Assertions or mTLS.
- **Token Binding**: Uses OAUTB or certificate-bound access tokens.
- **Authorization Response**: Uses JARM.

## IV. Attacks and Mitigations

### Discovered Attacks

During our initial attempts to prove the security properties of the FAPI, we uncovered four previously unknown and severe attacks:
1. **Access to Bank Account**: Adversaries can gain unauthorized access to a user's bank account.
2. **Session Integrity Breakdown**: Adversaries can break session integrity, allowing them to impersonate the user.
3. **Circumvention of PKCE**: Adversaries can bypass the PKCE mechanism.
4. **Circumvention of Token Binding**: Adversaries can bypass token binding mechanisms.

### Mitigations

We developed the following mitigations for these attacks:
- **Enhanced Validation**: Strengthen validation of tokens and responses.
- **Improved Client Authentication**: Enhance client authentication mechanisms.
- **Secure Token Binding**: Ensure tokens are securely bound to the client's cryptographic key.

## V. Formal Model and Analysis

### Web Infrastructure Model (WIM)

The WIM, proposed by Fett et al., is a comprehensive formal model of the web infrastructure. It captures a wide set of web features, including DNS, JavaScript, and the intricate workings of web browsers. The WIM is ideal for identifying logical flaws in web protocols and detecting standard web vulnerabilities.

### FAPI Model

Based on the WIM, we developed a detailed formal model of the FAPI, including its various configurations and security features. This model allows us to define precise security properties for authorization, authentication, and session integrity.

### Security Properties

- **Authorization**: An attacker should be unable to access another user's resources at the bank or act on their behalf.
- **Authentication**: An attacker should be unable to log in at a client using another user's identity.
- **Session Integrity**: An attacker should be unable to force a user to log in under the attacker's identity or access the attacker's resources instead of their own.

### Proofs and Results

Using our formal model, we attempted to prove the security properties of the FAPI. During this process, we discovered the attacks mentioned earlier. We then implemented mitigations and provided the first formal proof of the security of the FAPI with these fixes applied.

## VI. Conclusion

This paper presents a rigorous, systematic formal analysis of the OpenID Financial-grade API (FAPI). We developed a detailed formal model of the FAPI based on the Web Infrastructure Model (WIM) and defined precise security properties. Our analysis uncovered previously unknown and severe attacks, and we developed mitigations for these attacks. We provided the first formal proof of the security of the FAPI with our fixes applied, making it the only open banking API to enjoy a thorough and detailed formal security analysis.

Additionally, our findings highlight that several OAuth 2.0 security extensions do not necessarily achieve the security properties they were designed for, and combining these extensions securely is non-trivial. These results are relevant for all web applications and standards employing such extensions.

## Appendix

The appendix contains further details, and full details and proofs are provided in our technical report [25].

---

**Figures and Diagrams**

- **Figure 1: FAPI Flow Diagram**
  - Browser (B)
  - Client (C)
  - Authorization Server (AS)
  - Resource Server (RS)

  1. **POST /start**
     - Client initiates the flow.
  2. **Response**
     - Redirect to AS /authorization_endpoint.
  3. **GET /authorization_endpoint (Authorization Request)**
     - User authenticates.
  4. **Response**
     - Redirect to C /redirect_uri with code and state.
  5. **GET /redirect_uri (Authorization Response)**
     - Client receives the code.
  6. **POST /token_endpoint (Token Request)**
     - Client requests an access token.
  7. **Response**
     - Client receives the access token.

---

**References**

[1] - [25] (References to the original sources and technical reports)