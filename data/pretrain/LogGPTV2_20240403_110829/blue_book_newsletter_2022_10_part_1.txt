# Activism
## [Antifascism](antifascism.md)
* New: [Add magazines and podcasts.](antifascism.md#magazines)
    Magazines:
    * [Hope not Hate](https://hopenothate.org.uk)
    * [Searchlight](https://www.searchlightmagazine.com/)
    Podcasts:
    * [Hope not Hate](https://hopenothate.org.uk/research/podcast/)
* New: [How to fight fascism.](antifascism.md#how-to-fight-fascism)
    There are many ways to fight it, the book [Todo el mundo puede ser Antifa: Manual practico para destruir el fascismo of Pol Andiñach](https://www.txalaparta.eus/es/libros/todo-el-mundo-puede-ser-antifa) gathers some of them.
    One way we've seen pisses them off quite much is when they are ridiculed and
    they evocate the image of incompetence. It's a fine line to go, because if it
    falls into a pity image then it may strengthen their victim role.
### [Antifascist Actions](antifascist_actions.md)
* New: [An open data initiative to map spanish hate crimes.](antifascist_actions.md#an-open-data-initiative-to-map-spanish-hate-crimes)
    The project [Crimenes de Odio](https://crimenesdeodio.info/es/) have created an open database of the hate crimes registered in the spanish state.
# Life Management
## [Calendar Management](calendar_management.md)
* New: Introduce Calendar Management.
    Since the break of my taskwarrior instance I've used a physical calendar to
    manage the tasks that have a specific date. Can't wait for
    the first version of [`pydo`](https://github.com/lyz-code/pydo) to be finished.
    The next factors made me search for a temporal solution:
    * It's taking longer than expected.
    * I've started using a nextcloud calendar with some friends.
    * I frequently use Google calendar at work.
    * I'm sick of having to log in Nexcloud and Google to get the day's
        appointments.
    To fulfill my needs the solution needs to:
    * Import calendar events from different sources, basically through
        the [CalDAV](http://en.wikipedia.org/wiki/CalDAV) protocol.
    * Have a usable terminal user interface
    * Optionally have a command line interface or python library so it's easy to make scripts.
    * Optionally it can be based in python so it's easy to contribute
    * Support having a personal calendar mixed with the shared ones.
    * Show all calendars in the same interface
    Looking at the available programs I found [`khal`](khal.md), which looks like
    it may be up to the task.
    Go through the [installation](khal.md#installation) steps and configure the
    instance to have a local calendar.
    If you want to sync your calendar events through CalDAV, you need to set
    [vdirsyncer](vdirsyncer.md).
# Coding
## Languages
### [Python](python.md)
* New: [Interesting sources.](python.md#interesting-sources)
    [Musa 550](https://musa-550-fall-2020.github.io/) looks like a nice way to learn how to process geolocation data.
### [Configure Docker to host the application](docker.md)
* New: [Update dockers with Renovate.](docker.md#with-renovate)
    [Renovate](renovate.md) is a program that does automated
    dependency updates. Multi-platform and multi-language.
* New: [Connect multiple docker compose files.](docker.md#connect-multiple-docker-compose-files)
    You can connect services defined across multiple docker-compose.yml files.
    In order to do this you’ll need to:
    * Create an external network with `docker network create `
    * In each of your `docker-compose.yml` configure the default network to use your
        externally created network with the networks top-level key.
    * You can use either the service name or container name to connect between containers.
### [Python Snippets](python_snippets.md)
* New: [Get an instance of an Enum by value.](python_snippets.md#get-an-instance-of-an-enum-by-value)
    If you want to initialize a pydantic model with an `Enum` but all you have is
    the value of the `Enum` then you need to create a method to get the correct
    Enum. Otherwise `mypy` will complain that the type of the assignation is `str`
    and not `Enum`.
    So if the model is the next one:
    ```python
    class ServiceStatus(BaseModel):
        """Model the docker status of a service."""
        name: str
        environment: Environment
    ```
    You can't do `ServiceStatus(name='test', environment='production')`. you need to
    add the `get_by_value` method to the `Enum` class:
    ```python
    class Environment(str, Enum):
        """Set the possible environments."""
        STAGING = "staging"
        PRODUCTION = "production"
        @classmethod
        def get_by_value(cls, value: str) -> Enum:
            """Return the Enum element that meets a value"""
            return [member for member in cls if member.value == value][0]
    ```
    Now you can do:
    ```python
    ServiceStatus(
        name='test',
        environment=Environment.get_by_value('production')
    )
    ```
* New: [Print datetime with a defined format.](python_snippets.md#print-datetime-with-a-defined-format)
    ```python
    now = datetime.now()
    today.strftime('We are the %d, %b %Y')
    ```
    Where the datetime format is a string built from [these directives](#parse-a-datetime-from-a-string).
* New: [Print string with asciiart.](python_snippets.md#print-string-with-asciiart)
    ```bash
    pip install pyfiglet
    ```
    ```python
    from pyfiglet import figlet_format
    print(figlet_format('09 : 30'))
    ```
    If you want to change the default width of 80 caracteres use:
    ```python
    from pyfiglet import Figlet
    f = Figlet(font="standard", width=100)
    print(f.renderText("aaaaaaaaaaaaaaaaa"))
    ```
* New: [Print specific time format.](python_snippets.md#print-specific-time-format)
    ```python
    datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%S')
    ```
    Code  Meaning Example
    %a  Weekday as locale’s abbreviated name. Mon
    %A  Weekday as locale’s full name.  Monday
    %w  Weekday as a decimal number, where 0 is Sunday and 6 is Saturday. 1
    %d  Day of the month as a zero-padded decimal number. 30
    %-d Day of the month as a decimal number. (Platform specific) 30
    %b  Month as locale’s abbreviated name. Sep
    %B  Month as locale’s full name.  September
    %m  Month as a zero-padded decimal number.  09
    %-m Month as a decimal number. (Platform specific)  9
    %y  Year without century as a zero-padded decimal number. 13
    %Y  Year with century as a decimal number.  2013
    %H  Hour (24-hour clock) as a zero-padded decimal number. 07
    %-H Hour (24-hour clock) as a decimal number. (Platform specific) 7
    %I  Hour (12-hour clock) as a zero-padded decimal number. 07
    %-I Hour (12-hour clock) as a decimal number. (Platform specific) 7
    %p  Locale’s equivalent of either AM or PM. AM
    %M  Minute as a zero-padded decimal number. 06
    %-M Minute as a decimal number. (Platform specific) 6
    %S  Second as a zero-padded decimal number. 05
    %-S Second as a decimal number. (Platform specific) 5
    %f  Microsecond as a decimal number, zero-padded on the left. 000000
    %z  UTC offset in the form +HHMM or -HHMM (empty string if the the object is naive).
    %Z  Time zone name (empty string if the object is naive).
    %j  Day of the year as a zero-padded decimal number.  273
    %-j Day of the year as a decimal number. (Platform specific)  273
    %U  Week number of the year (Sunday as the first day of the week) as a zero padded decimal number. All days in a new year preceding the first Sunday are considered to be in week 0.  39
    %W  Week number of the year (Monday as the first day of the week) as a decimal number. All days in a new year preceding the first Monday are considered to be in week 0.
    %c  Locale’s appropriate date and time representation.  Mon Sep 30 07:06:05 2013
    %x  Locale’s appropriate date representation. 09/30/13
    %X  Locale’s appropriate time representation. 07:06:05
    %%  A literal '%' character.  %
### [ICS](ics.md)
* New: Introduce ICS.
    [ics](https://icspy.readthedocs.io/en/stable/index.html) is a pythonic iCalendar
    library. Its goals are to read and write ics data in
    a developer-friendly way.
### [rich](rich.md)
* New: [Live display text.](rich.md#live-display-text)
    ```python
    import time
    from rich.live import Live
    with Live("Test") as live:
        for row in range(12):
            live.update(f"Test {row}")
            time.sleep(0.4)
    ```
    If you don't want the text to have the default colors, you can embed it all in
    a `Text` object.
### [Selenium](selenium.md)
* New: [Click on element.](selenium.md#click-on-element)
    Once you've opened the page you want to interact with `driver.get()`, you need
    to get the Xpath of the element to click on. You can do that by using your
    browser inspector, to select the element, and once on the code if you right
    click there is a "Copy XPath"
    Once that is done you should have something like this when you paste it down.
    ```python
    //*[@id=”react-root”]/section/main/article/div[2]/div[2]/p/a
    ```
    Similarly it is the same process for the input fields for username, password,
    and login button.
    We can go ahead and do that on the current page. We can store these xpaths as
    strings in our code to make it readable.
    We should have three xpaths from this page and one from the initial login.
    ```python
    first_login = '//*[@id=”react-root”]/section/main/article/div[2]/div[2]/p/a'
    username_input = '//*[@id="react-root"]/section/main/div/article/div/div[1]/div/form/div[2]/div/label/input'
    password_input = '//*[@id="react-root"]/section/main/div/article/div/div[1]/div/form/div[3]/div/label/input'
    login_submit = '//*[@id="react-root"]/section/main/div/article/div/div[1]/div/form/div[4]/button/div'
    ```
    Now that we have the xpaths defined we can now tell Selenium webdriver to click
    and send some keys over for the input fields.
    ```python
    from selenium.webdriver.common.by import By
    driver.find_element(By.XPATH, first_login).click()
    driver.find_element(By.XPATH, username_input).send_keys("username")
    driver.find_element(By.XPATH, password_input).send_keys("password")
    driver.find_element(By.XPATH, login_submit).click()
    ```
* New: [Bypass Selenium detectors.](selenium.md#bypass-selenium-detectors)
    Sometimes web servers react differently if they notice that you're using
    selenium. Browsers can be detected through different ways and some commonly used
    mechanisms are as follows:
    * Implementing captcha / recaptcha to detect the automatic bots.
    * Non-human behaviour (browsing too fast, not scrolling to the visible elements,
        ...)
    * Using an IP that's flagged as suspicious (VPN, VPS, Tor...)
    * Detecting the term HeadlessChrome within headless Chrome UserAgent
    * Using Bot Management service from [Distil
        Networks](http://www.distilnetworks.com/),
        [Akamai](https://www.akamai.com/us/en/products/security/bot-manager.jsp),
        [Datadome](https://datadome.co/product/).
    They do it through different mechanisms:
    * [Use undetected-chromedriver](selenium.md#use-undetected-chromedriver)
    * [Use Selenium stealth](selenium.md#use-selenium-stealth)
    * [Rotate the user agent](selenium.md#rotate-the-user-agent)
    * [Changing browser properties](selenium.md#changing-browser-properties)
    * [Predefined Javascript variables](selenium.md#predefined-javascript-variables)
    * [Don't use selenium](selenium.md#dont-use-selenium)
    If you've already been detected, you might get blocked for a plethora of other
    reasons even after using these methods. So you may have to try accessing the site
    that was detecting you using a VPN, different user-agent, etc.
* New: [Basic Selenium commands.](selenium.md#open-a-url)
    Open a URL:
    ```python
    driver.get("https://duckduckgo.com/")
    ```
    Get page source:
    ```python
    driver.page_source
    ```
    Get current url:
    ```python
    driver.current_url
    ```
### [Typer](typer.md)
* New: [Get the command line application directory.](typer.md#get-the-command-line-application-directory)
    You can get the application directory where you can, for example, save
    configuration files with `typer.get_app_dir()`:
    ```python
    from pathlib import Path