Relates to #3159, #4068, #2568, this branch, and this tool.
# Goals
  * Bundle _declarations_ for TS projects to allow a library to be consumed with a single TS file, despite being many modules internally. Because of complicated internal module dependencies which would rather not be exposed to the consumer, this should flatten the exported module types as best as it can. (Ideally, completely.)
# Proposal
When all of `--module`, `--out`, and `--declarations` are specified, the TS
compiler should emit a single amalgamated `.d.ts` (alongside its single output
js file). This `.d.ts` should be flattened compared to a concatenated `.d.ts`
file. It should report collisions caused by scoping issues and import aliasing
when flattening declarations into a single `declare module`. It should respect
access modifiers when generating the DTS (only exporting things explicitly
exported and types marked as public).
For example, given the following set of sources:  
`tsconfig.json`:
    {
      "compilerOptions": {
        "module": "commonjs",
        "declarations": true,
        "out": "mylib.js"
      }
    }
`a.ts`:
    export * from './b';
    export * from './c';
`b.ts`:
    export interface Foo {}
    export class Bar {
        constructor() {
            console.log('');
        }
        do(): Foo { throw new Error('Not implemented.'); }
    }
`c.ts`:
    export class Baz {}
should create the `.d.ts`:  
`mylib.d.ts`:
    declare module "mylib" {
      export interface Foo {}
      export class Bar {
        constructor()
        do(): Foo
      }
      export class Baz {}
    }
rather than:  
`mylib.d.ts`:
    declare module "mylib/a" {
      export * from "mylib/b";
      export * from "mylib/c";
    }
    declare module "mylib/b" {
      export interface Foo {}
      export class Bar {
        constructor()
        do(): Foo
      }
    }
    declare module "mylib/c" {
      export class Baz {}
    }
    declare module "mylib" {
      export * from "mylib/a";
    }
and should report a semantic error when the following is done:  
`a.ts`:
    export * from './b';
    export {Bar as Foo} from './b';
    export * from './c';
as there will be multiple members named `Foo` (an interface and a class),
since `b.ts` has exported interface `Foo`.
We should also have a semantic error when the following is changed from the
original:  
If we change `c.ts`:
    export class Baz {}
    export interface Foo {}
it should be an error in `a.ts` (since it's blanket exporting `b` and `c`),
and the error should suggest to alias either `c.ts`'s `Foo` or `b.ts`'s `Foo`
(or both) when reexporting them in `a`.
Internally, when flattening this aliasing becomes important - we need to track
usages of the two original `Foo`'s across the generated `.d.ts` and rename it
to the alias created when it is reexported.
Unfortunately, to maintain ES6 compatability, while we can warn about this
behavior with classes (since it's possible that a developer is unaware they're
overriding a prior export), we still need to support it (or do we? The spec
leads me to believe that attempting to export multiple members with the same
name - even via `export *` \- is an early syntax error). So it would be nice
to have a compiler flag to mark the same kind of thing with classes (or
namespaces) as an error, but also do the following by default:
We can do automatic name collision resolution, but that can result in
unpredictable (or convention-based) public member names... but it must be
done, I suppose. We could ignore reexported types since it's appropriate to do
so in ES6 (following `export *` declarations can override previously defined
members? maybe? system works this way at present - but that may just be system
relying on transpiler implementers to maintain ES6 semantics), then we would
need to create "shadowed" types at the appropriate level in the `.d.ts` \-
types whose original public access are overridden by later exports but whose
types are still required to describe public function argument or return types.
Naming these "shadowed" types could be difficult, but given that they only
exist for type information and not for access information, a common (re)naming
convention could be a desirable solution. Something akin to `_n`
when `n` is the shadowed type number for that type, and renaming the shadowed
type name to something else (`__n` and so on so long as the name
still exists) if that collides with another exported type. Classes used in
this way are rewritten to interfaces in the `.d.ts`, since a constructor
function likely isn't accessible for a shadowed class (at least not at its
generated exported type name).
Any feedback? There's a few alternatives to what I've suggested here, which is
possibly the most conservative approach in terms of ability to error early but
supporting ES6 semantics best. It's possible to silently ignore `interface`
name collisions and rename those automatically as well, but since they're TS
constructs and not ES6, I think it's okay to force more discipline in their
usage.
Something I've been considering is also rewriting `namespace`s as `interface`s
in the generated `.d.ts` in this way to further flatten/unify the types, but
this... might? not strictly be needed. I haven't come up with a strong case
for it.