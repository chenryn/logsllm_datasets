          /foo          s1:80
          /bar          s2:80
```
只要存在Service（s1，s2），Ingress Controller就会提供满足Ingress的特定负载均衡器的实现。完成这个步骤后，您将在Ingress的最后一列看到负载均衡器的地址。
### Name based virtual hosting（基于名称的虚拟主机）
Name-based virtual hosts为相同IP使用多个主机名。
```
foo.bar.com --|                 |-> foo.bar.com s1:80
              | 178.91.123.132  |
bar.foo.com --|                 |-> bar.foo.com s2:80
```
以下Ingress告诉后端负载均衡器根据 [Host header](https://tools.ietf.org/html/rfc7230#section-5.4) 进行路由请求。
```yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: test
spec:
  rules:
  - host: foo.bar.com
    http:
      paths:
      - backend:
          serviceName: s1
          servicePort: 80
  - host: bar.foo.com
    http:
      paths:
      - backend:
          serviceName: s2
          servicePort: 80
```
**默认后端** ：一个没有rule的Ingress，如上一节所示，所有流量都会发送到一个默认的backend。您可以使用相同的技术，通过指定一组rule和默认backend，来告诉负载均衡器找到您网站的404页面。如果您的Ingress中的所有Host都无法与请求头中的Host匹配，或者，没有path与请求的URL匹配，则流量将路由到您的默认backend。
### TLS
您可以通过指定包含TLS私钥和证书的 [secret](https://kubernetes.io/docs/user-guide/secrets) 来加密Ingress。目前，Ingress仅支持单个TLS端口443，并假定TLS termination（TLS终止）。如果Ingress中的TLS配置部分指定了不同的host，那么它们将根据通过SNI TLS扩展指定的主机名复用同一端口（如果你提供的Ingress Controller支持SNI）。TLS secret必须包含名为 `tls.crt` 和 `tls.key` 的密钥，其中包含用于TLS的证书和私钥，例如：
```yaml
apiVersion: v1
data:
  tls.crt: base64 encoded cert
  tls.key: base64 encoded key
kind: Secret
metadata:
  name: testsecret
  namespace: default
type: Opaque
```
在Ingress中引用这个secret会告诉Ingress Controller，使用TLS加密从客户端到负载均衡器器的channel：
```yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: no-rules-map
spec:
  tls:
  - secretName: testsecret
  backend:
    serviceName: s1
    servicePort: 80
```
请注意，不同Ingress Controller支持的TLS功能存在差距。请参阅有关 [nginx](https://git.k8s.io/ingress-nginx/README.md#https) 、 [GCE](https://git.k8s.io/ingress-gce/README.md#frontend-https) 或任何其他平台特定的Ingress Controller的文档，以了解TLS在您的环境中的工作原理。
### Loadbalancing
Ingress Controller启动时，会带上适用于所有Ingress的负载均衡策略设置，例如负载均衡算法、后端权重方案等。 更高级的负载均衡概念（例如：持续会话、动态权重）尚未通过Ingress公开。您仍然可以通过 [service loadbalancer](https://git.k8s.io/contrib/service-loadbalancer) 获得这些功能。随着时间的推移，我们计划将跨平台适用的负载均衡模式提取到Ingress资源中。
另外，尽管健康检查不直接通过Ingress暴露，但是在Kubernetes中存在parallel（并行）的概念，例如 [readiness probes](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/) ，可让您实现相同的最终结果。请查看特定Controller的文档，以了解他们如何处理健康检查（ [nginx](https://git.k8s.io/ingress-nginx/README.md) 、 [GCE](https://git.k8s.io/ingress-gce/README.md#health-checks) ）。
## Updating an Ingress
如果您想将新的Host添加到现有Ingress中，可通过编辑资源进行更新：
```shell
$ kubectl get ing
NAME      RULE          BACKEND   ADDRESS
test      -                       178.91.123.132
          foo.bar.com
          /foo          s1:80
$ kubectl edit ing test
```
将会弹出一个编辑器，让你修改现有yaml，修改它，添加新的Host：
```yaml
spec:
  rules:
  - host: foo.bar.com
    http:
      paths:
      - backend:
          serviceName: s1
          servicePort: 80
        path: /foo
  - host: bar.baz.com
    http:
      paths:
      - backend:
          serviceName: s2
          servicePort: 80
        path: /foo
..
```
保存yaml，就会更新API Server中的资源，这将会告诉Ingress Controller重新配置负载均衡器。
```shell
$ kubectl get ing
NAME      RULE          BACKEND   ADDRESS
test      -                       178.91.123.132
          foo.bar.com
          /foo          s1:80
          bar.baz.com
          /foo          s2:80
```
在一个被修改过的Ingress yaml文件上，调用 `kubectl replace -f` 也可实现相同的效果。
## Failing across availability zones（跨可用区的故障）
不同cloud provider之间，跨故障域的流量传播技术有所不同。有关详细信息，请查看Ingress Controller相关的文档。 有关在federated cluster中部署Ingress的详细信息，请参阅federation [doc](https://kubernetes.io/docs/concepts/cluster-administration/federation/) 。
## Future Work
- 各种模式的HTTPS/TLS支持（例如：SNI、re-encryption）
- 通过声明请求IP或主机名
- 结合L4和L7 Ingress
- 更多Ingress Controllers
请追踪 [L7 and Ingress proposal](https://github.com/kubernetes/kubernetes/pull/12827) （L7和Ingress提案），了解有关资源演进的更多细节，以及 [Ingress repository](https://github.com/kubernetes/ingress/tree/master) ，了解有关各种Ingress Controller演进的更多细节。
## Alternatives（备选方案）
有多种方式暴露Service，而无需直接涉及Ingress资源：
- 使用 [Service.Type=LoadBalancer](https://kubernetes.io/docs/concepts/services-networking/service/#type-loadbalancer) 
- 使用 [Service.Type=NodePort](https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport) 
- 使用 [Port Proxy](https://git.k8s.io/contrib/for-demos/proxy-to-service) 
- 部署 [Service loadbalancer](https://git.k8s.io/contrib/service-loadbalancer) 。这允许您在多个Service之间共享一个IP，并通过Service Annotation实现更高级的负载均衡。
## 原文