82
250
≤ 30
101
≤ 30
263
150
71
497
The difﬁculty of BDD is primarily determined by the lattice dimension, and the width
of the error relative to the (dimension-normalized) lattice determinant. Because 𝑅∨ is
isomorphic as a group to Z𝑛, we have that ℒ(⃗𝑎) is an ℓ𝑛-dimensional lattice; however,
by ignoring some coordinates we can view it as a 𝑑-dimensional lattice for any desired
𝑑 ∈ [𝑛, ℓ𝑛]. In order to most easily adapt the prior analyses for attacks on (Ring-)LWE,
we also implicitly rescale the canonical embedding (thereby rescaling both the lattice and
the error) by a factor of 𝛿𝑅 := vol(𝜎(𝑅))1/𝑛, so that the rescaled 𝑅∨ has unit volume, just
like Z𝑛. The determinant of the lattice is then 𝑞𝑑−𝑛—the same as for a 𝑑-dimensional LWE
lattice—and the error is distributed as a spherical Gaussian of parameter 𝑟′ := 𝛿𝑅 · 𝑟.
For Ring-LWR we proceed similarly, but because the rounding is done with respect the
decoding basis of 𝑅∨—which in general is not orthogonal in the canonical embedding—we
instead use the geometry given by identifying the decoding basis with the standard basis
of Z𝑛, and we model the rounding error in each coordinate as uniform in the interval
(− 𝑞
2𝑝). This makes the rounding error isotropic and gives 𝑅∨ unit volume, and therefore
yields the smallest ratio of error width to dimension-normalized determinant. Speciﬁcally,
2𝑝 , 𝑞
228
√
the lattice determinant is again 𝑞𝑑−𝑛, and the error has standard deviation 𝑞
12 in each
𝑝 /
coordinate, so we heuristically model it as a spherical Gaussian with parameter 𝑟′ :=
√︀𝜋/6.
𝑞
𝑝
7.4.2 Root-Hermite Factor
The quality of lattice vectors, and the concrete hardness of obtaining them, is often measured
by the Hermite factor: for a 𝑑-dimensional lattice ℒ, vector v ∈ ℒ has Hermite factor 𝛿𝑑
given by ‖v‖ = 𝛿𝑑 · vol(ℒ)1/𝑑; we call 𝛿 the root-Hermite factor. Experiments on random
lattices indicate that 𝛿 is a very good indicator of hardness in cryptographically relevant
dimensions. For example, 𝛿 ≈ 1.022 and 𝛿 ≈ 1.011 are efﬁciently obtainable by the LLL
and BKZ-28 algorithms (respectively) [GN08], whereas 𝛿 = 1.005 is considered far out of
practical reach for 𝑑 ≥ 500 [CN11]. To our knowledge, the best publicly demonstrated root-
Hermite factors for cryptographic dimensions are 𝛿 ≈ 1.00955 or more, on the Darmstadt
lattice challenges [Lin+10].
Assuming that the error is sufﬁciently “smooth” over the integers, which is the case for
all our challenges, the analyses of [MR09; LP11; LN13] show that one can solve LWE/BDD
with some not-too-small probability by obtaining a root-Hermite factor 𝛿 given by
lg 𝛿 =
lg2(𝐶𝑞/𝑟′)
4𝑛 lg 𝑞
.
(7.4.1)
Here the factor 𝐶 inﬂuences the success probability: larger values correspond to smaller
chance of success. For example, extrapolating from [LN13, Table 2] for 𝑛 ≤ 256, taking
𝐶 ∈ [1.7, 2.5] can yield probability ≈ 1 (depending on the exact dimension); 𝐶 ≈ 3.0
corresponds to probability ≈ 2−32; and 𝐶 ≈ 4.0 corresponds to probability ≈ 2−64. (These
are only rough estimates, and can be affected by the number of iterations, choice of pruning
strategy, etc.) In our estimates, for simplicity we always use 𝐶 = 2.0.
229
We use our root-Hermite factor estimates to classify each challenge into one of several
qualitative hardness categories. The category thresholds are given in Table 7.3.
Table 7.3: Root-Hermite factor thresholds for our qualitative hardness estimates. Each
challenge is classiﬁed according the largest applicable threshold (i.e., the weakest category.)
Class
Toy
Easy
𝛿 >
1.011
1.0095
Moderate
1.0075
Hard
1.005
Very Hard 1.0
7.4.3 BKZ Block Size
Another very good indication of hardness for a BDD instance is the smallest block size
needed for the success of the BKZ lattice-basis reduction algorithm [SE94; CN11]. This
parameter is a useful proxy for hardness because the runtime for BKZ is at least exponential
in the block size.
Heuristic algorithms exist to approximate the runtime of BKZ [CN11; Che13], but they
focus on the runtime of an SVP subroutine. This subroutine is called many times by the
BKZ algorithm, but there are no precise estimates for the number of calls, and hence no
very precise estimates for the total runtime of BKZ. Furthermore, the heuristic estimates
are for sufﬁciently large block sizes in high dimensions, while some of our challenges have
low dimension or can be attacked with a relatively small block size. Therefore, rather than
provide an imprecise “bits of security” estimate, we instead give the approximate block size
needed for the BKZ algorithm to successfully solve each challenge.
The “primal” form of the BKZ attack on LWE/BDD is most easily explained using
Kannan’s embedding technique, which converts a 𝑑-dimensional BDD instance with error ⃗𝑒
230
to a (𝑑 + 1)-dimensional SVP instance with a “planted” shortest vector (⃗𝑒, 1).12 When
BKZ is run with a large enough block size 𝑏, it successfully ﬁnds the planted shortest
vector. More speciﬁcally, by modeling the behavior of BKZ using the geometric series
assumption (GSA) [Sch03], and assuming the error is Gaussian with parameter 𝑟′, the
analysis of [Alk+16] shows that the attack succeeds when
𝑟′√︀𝑏/(2𝜋) ≤ 𝜅2𝑏−𝑑−1 · 𝑞1−𝑛/𝑑,
(7.4.2)
where 𝜅 = ((𝜋𝑏)1/𝑏 · 𝑏/(2𝜋𝑒))1/(2𝑏−2) is the GSA factor. We optimize our choice of
𝑑 ∈ [𝑛, ℓ𝑛] to minimize the block size needed for each challenge.
7.5
Implementation Notes
In this section we describe some of the lower-level technical details of our challenges, and
the operational security measures we used when generating them.
Beacon addresses. Every 60 seconds the NIST randomness beacon [11] announces a
512-bit string, which is identiﬁed by the corresponding (Unix) epoch, i.e., the number
of seconds elapsed since 1 January 1970 00:00:00 UTC. (The beacon epochs are always
divisible by 60.) For our cut-and-choose protocol, a beacon address is a pair (𝑠, 𝑖) consisting
of an epoch 𝑠 and a zero-indexed offset 𝑖 ∈ {0, . . . , 63 = 512/8 − 1}, which indexes the 𝑖th
byte of the beacon’s output string for epoch 𝑠.
Each of our challenges is associated with a distinct beacon address, which is used to
determine which of its 𝑁 = 32 instances will become the “ofﬁcial” one; the remainder will
have their secrets revealed in the cut-and-choose protocol (see section 7.2 for details). A
beacon address of (𝑠, 𝑖) means that the ofﬁcial instance will be the one indexed by the 𝑖th
12Alkim et al. [Alk+16], found that by adjusting the parameters appropriately, the best “dual” attack required
an almost identical block size as the primal attack, so we do not consider it here.
231
byte of the beacon value for epoch 𝑠, interpreted as an unsigned 8-bit integer and reduced
modulo 32. That is, we use the least-signiﬁcant 5 bits of the 𝑖th byte, and ignore the rest.
To ensure distinct beacon addresses, we generated our challenges to have sequentially
increasing addresses starting from epoch 1,471,449,600 (corresponding to 17 August 2016
12:00:00 EDT) and index zero. “Sequentially increasing” means that the index increments
from 0 to 63, after which the epoch increments (by 60) and the index is reset to zero.13
Randomness. As the source of randomness for generating each instance of our challenges,
we used the Haskell DRBG implementation [DuB15] of the NIST standard CTR-DRBG-AES-
128 [BK15] pseudorandom generator, with a 256-bit seed (“input entropy”). The seeds
themselves were derived using the Hash-DRBG-SHA-512 generator [BK15], seeded with
512 bits of system entropy. We would have preferred to use Hash-DRBG-SHA-512 for all
pseudorandomness, but its implementation in DRBG is much slower, and pseudorandom bit
generation is currently the main bottleneck in our implementation.
Operational security. A primary goal when generating our challenges and executing the
cut-and-choose protocol was to reduce the risk of unauthorized exﬁltration of the underlying
secrets, e.g., by malware or hacking.
We generated the challenges on a 2010 MacBook Pro laptop with a freshly installed
operating system, which was never connected to any network and had all network interfaces
disabled. We exclusively used write-once CD and DVD media for copying the challenge-
generator executable to the laptop, and the challenges and revealed secrets from the laptop.14
13Actually, there are two non-sequential “jumps” in the beacon addresses of our challenges, corresponding
to batches we created with different runs of the generator. However, all beacon addresses are distinct across all
our challenges.
14Because our executable requires compilers and external libraries to build, it was produced on a networked
machine. It is conceivable, but seems highly unlikely, that the resulting executable could contain malicious
code that manages to exﬁltrate secrets via the external media when we export the challenges and revealed
secrets. Unfortunately, this risk is inherent to our setup, because we must copy data from the laptop at some
point.
232
We enabled FileVault encryption for the user account storage. As an extra layer of
protection, we also created and stored the challenges and their secrets in a separately
encrypted volume (within user storage), which was kept unmounted except when the
challenges were being created or operated upon. The random passphrases for the user
account and encrypted volume were generated and stored non-electronically, and were
destroyed with ﬁre once the cut-and-choose protocol was completed. Finally, we wiped the
storage media with all-zeros. Therefore, we believe that the non-revealed secrets should be
completely unrecoverable (even by us), except by solving the corresponding challenges.
233
REFERENCES
[11]
[15]
[16]
[91]
[97]
NIST randomness beacon. http://www.nist.gov/itl/csd/ct/nist_
beacon.cfm, last retrieved Aug 2016. Sept. 2011.
NTRU challenge. https : / / www . securityinnovation . com / products /
ntru-crypto/ntru-challenge, last retrieved Aug 2016. 2015.
Ring-LWE challenges website. https://web.eecs.umich.edu/~cpeikert/
rlwe-challenges. 2016.
RSA factoring challenge. http://www.emc.com/emc- plus/rsa- labs/
historical/the-rsa-factoring-challenge-faq.htm, last retrieved Aug
2016. Mar. 1991.
Certicom ECC challenge. https : / / www . certicom . com / images / pdfs /
challenge-2009.pdf, last retrieved Aug 2016. Nov. 1997.
[AA16]
Jacob Alperin-Sheriff and Daniel Apon. Dimension-Preserving Reductions
from LWE to LWR. Cryptology ePrint Archive, Report 2016/589. http://
eprint.iacr.org/2016/589. 2016.
[AD97]
Miklós Ajtai and Cynthia Dwork. “A Public-Key Cryptosystem with Worst-
Case/Average-Case Equivalence”. In: STOC. 1997, pp. 284–293.
[AFG13] Martin R. Albrecht, Robert Fitzpatrick, and Florian Göpfert. “On the Efﬁcacy
of Solving LWE by Reduction to Unique-SVP”. In: ICISC. 2013, pp. 293–310.
[AG11]
[Age15]
Sanjeev Arora and Rong Ge. “New Algorithms for Learning in Presence of
Errors”. In: ICALP (1). 2011, pp. 403–415.
National Security Agency. Commercial National Security Algorithm Suite.
https://www.iad.gov/iad/programs/iad-initiatives/cnsa-suite.
cfm. Blog. 2015.
[Agg+15] Divesh Aggarwal et al. “Solving the Shortest Vector Problem in 2𝑛 Time Using
Discrete Gaussian Sampling”. In: STOC. 2015, pp. 733–742.
[Ajt04]
Miklós Ajtai. “Generating Hard Instances of Lattice Problems”. In: Quaderni
di Matematica 13 (2004). Preliminary version in STOC 1996, pp. 1–32.
234
[AKS01] Miklós Ajtai, Ravi Kumar, and D. Sivakumar. “A sieve algorithm for the
shortest lattice vector problem”. In: STOC. 2001, pp. 601–610.
[Alb+14] Martin R. Albrecht et al. Algebraic Algorithms for LWE. Cryptology ePrint
Archive, Report 2014/1018. http://eprint.iacr.org/2014/1018. 2014.
[Alb+15] Martin R. Albrecht et al. “On the complexity of the BKW algorithm on LWE”.
In: Designs, Codes and Cryptography 74.2 (2015), pp. 325–354.
[Alk+16]
Erdem Alkim et al. “Post-quantum Key Exchange - A New Hope”. In: USENIX
Security Symposium. 2016, pp. 327–343.
[Alw+13]
Joël Alwen et al. “Learning with Rounding, Revisited - New Reduction, Prop-
erties and Applications”. In: CRYPTO. 2013, pp. 57–74.
[AP13]
[AP14]
Jacob Alperin-Sheriff and Chris Peikert. “Practical Bootstrapping in Quasilin-
ear Time”. In: CRYPTO. 2013, pp. 1–20.
Jacob Alperin-Sheriff and Chris Peikert. “Faster Bootstrapping with Polyno-
mial Error”. In: CRYPTO. 2014, pp. 297–314.
[App+09] Benny Applebaum et al. “Fast Cryptographic Primitives and Circular-Secure
Encryption Based on Hard Learning Problems”. In: CRYPTO. 2009, pp. 595–
618.
[APS15] Martin R. Albrecht, Rachel Player, and Sam Scott. “On the concrete hardness
of Learning with Errors”. In: J. Mathematical Cryptology 9.3 (2015), pp. 169–
203.
[Bai+15]
Thomas Baignères et al. Trap Me If You Can – Million Dollar Curve. Cryp-
tology ePrint Archive, Report 2015/1249. http://eprint.iacr.org/2015/
1249. 2015.
[Ban+14] Abhishek Banerjee et al. “SPRING: Fast Pseudorandom Functions from
Rounded Ring Products”. In: FSE. 2014, pp. 38–57.
[Ban93]
Wojciech Banaszczyk. “New bounds in some transference theorems in the
geometry of numbers”. In: Mathematische Annalen 296.4 (1993), pp. 625–635.
[BCG15]
Joseph Bonneau, Jeremy Clark, and Steven Goldfeder. On Bitcoin as a public
randomness source. Cryptology ePrint Archive, Report 2015/1015. http :
//eprint.iacr.org/2015/1015. 2015.
[Ber+16]
Daniel J. Bernstein et al. NTRU Prime. Cryptology ePrint Archive, Report
2016/461. http://eprint.iacr.org/2016/461. 2016.
235
[BGV14]
Zvika Brakerski, Craig Gentry, and Vinod Vaikuntanathan. “(Leveled) Fully
Homomorphic Encryption without Bootstrapping”. In: TOCT 6.3 (2014). Pre-
liminary version in ITCS 2012, p. 13.
[BK15]
Elaine Barker and John Kelsey. Recommendation for random number gener-
ation using deterministic random bit generators. NIST Special Publication
800-90A, revision 1. June 2015.