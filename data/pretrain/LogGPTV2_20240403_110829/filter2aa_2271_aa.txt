# Extreme Privilege Escalation on Windows 8/UEFI Systems

**Authors:**
- Corey Kallenberg
- Xeno Kovah
- John Butterworth
- Sam Cornwell

**Affiliation:**
The MITRE Corporation

**Abstract:**
The UEFI specification has strengthened the integration between the operating system and platform firmware through the well-defined "Runtime Services" interface. This interface, more extensive than its BIOS predecessor, inadvertently expands the attack surface against platform firmware. Additionally, Windows 8 introduces an API that allows privileged userland processes to access this UEFI interface. Vulnerabilities in this interface can enable a privileged userland process to escalate its privileges from ring 3 to that of the platform firmware, thereby gaining permanent control over the powerful System Management Mode (SMM). This paper discusses two such vulnerabilities discovered in the UEFI open-source reference implementation and the techniques used to exploit them.

## Table of Contents
1. Introduction
2. Runtime Services
   2.1 Variable Interface
   2.2 Capsule Update
      2.2.1 Capsule Update Initiation
      2.2.2 PEI Phase Capsule Coalescing
      2.2.3 DXE Phase Capsule Processing
3. Capsule Update Vulnerabilities
   3.1 Coalescing Vulnerability
   3.2 Envelope Vulnerability
4. Capsule Update Exploitation
   4.1 Coalescing Exploitation
      4.1.1 Coalescing Exploitation Difficulties
      4.1.2 Descriptor Overwrite Approach
      4.1.3 Optimization Tricks
      4.1.4 Coalesce Exploitation Success
   4.2 Envelope Exploitation
   4.3 Exploitation From Windows 8
5. Leveraging The Attack
6. User Experience
7. Affected Systems
   7.1 OEM Firmware Instrumentation
   7.2 HP EliteBook 2540p F23 Case Study
   7.3 General Observations Regarding Affected Systems
8. Vendor Response
9. Recommendations
10. Related Work
11. Conclusion
12. Acknowledgments

## 1. Introduction
UEFI is rapidly replacing conventional BIOS in modern computers, driven in part by Microsoft's inclusion of UEFI firmware as recommended hardware for Windows 8. A key reason for this adoption is the enhanced security features provided by UEFI, such as Secure Boot, which protects against bootkit-style attacks that compromise the integrity of the NT kernel at load time. Starting with Windows Vista, 64-bit editions of Windows enforce the requirement that kernel drivers be signed with an Authenticode certificate, ensuring the integrity of ring 0 code in the Windows 8 x64 environment.

In post-exploitation scenarios, attackers may seek to inject a rootkit into ring 0 to gain significant control over the system. Due to Secure Boot and the signed driver requirement, attackers must now find a ring 3 to ring 0 privilege escalation exploit targeting a vulnerability in the NT kernel or a third-party driver. This paper explores a different method of post-exploitation privilege escalation, allowing the attacker to achieve permanent residence in the even more powerful System Management Mode (SMM).

### Figure 1: Plain Jane Post-Exploitation Privilege Escalation vs. Extreme Post-Exploitation Privilege Escalation
```
userspace
kernel
VMM
SMM
SPI flash
ring 3
ring 0
“ring -1”
“ring -2”
“ring -2.5”
```

This paper focuses on the UEFI Runtime Services interface as an attack surface. A successful attack on this interface can allow an attacker to permanently alter the UEFI firmware, enabling control over the early bootup process, including the configuration and initialization of SMM code. The paper highlights the UEFI Runtime Services as a new and viable attack surface by describing and exploiting two UEFI vulnerabilities discovered by the authors.

## 2. Runtime Services
UEFI provides a set of functions accessible to both the early boot environment and the operating system, known as "Runtime Services." These services include functions for resetting the system, modifying firmware environment variables, initiating firmware updates, and other tasks. Typically, these services are used by the operating system kernel. However, Windows 8 introduces an API that exposes a subset of the Runtime Services to administrator userland processes.

### 2.1 Variable Interface
The Runtime Services provide functions for accessing "EFI Variables," which are similar to operating system environment variables. EFI variables are typically consumed by the platform firmware during the boot-up process. Some EFI variables are created by the firmware to communicate information to the operating system, such as the platform language and boot media order.

The Runtime Services offer functions for reading, writing, creating, and enumerating EFI variables. Windows 8 also introduced the `SetFirmwareEnvironmentVariable` and `GetFirmwareEnvironmentVariable` functions for interacting with EFI variables from userland. These functions are callable from an administrator userland process with the `SE_SYSTEM_ENVIRONMENT_NAME` access token.

The EFI variable interface serves as a conduit for less-privileged domains (ring 3) to insert data for more-privileged domains (platform firmware) to consume. Historically, such interfaces have been prone to memory corruption vulnerabilities. For example, vulnerabilities have been discovered in some EFI variables, allowing bypassing Secure Boot or bricking the victim computer. This paper specifically examines memory corruption vulnerabilities found in the Intel UEFI reference implementation's parsing of the standard EFI variable, "CapsuleUpdateData."

### 2.2 Capsule Update
The platform firmware is stored on a SPI flash chip soldered onto the motherboard. Intel provides chipset flash protection mechanisms to protect the contents of the flash chip from even ring 0 code. UEFI standardizes the firmware update process through "capsule update" functionality, part of the Runtime Services.

The capsule update process seeds a firmware update capsule into RAM and performs a soft reset of the system. During a warm reset, the contents of RAM remain intact, allowing the capsule contents to survive for consumption by the firmware. The flash chip is unlocked during the reset. Early in the boot-up process, the firmware checks for the existence of a firmware update capsule. If one exists, the firmware verifies the update contents are signed by the OEM and, if so, writes the new firmware update to the still-unlocked flash. If the update cannot be cryptographically verified, or no update is pending, the firmware locks the flash protection registers to prevent further write access to the firmware.

### 2.2.1 Capsule Update Initiation
The capsule update process is initiated by calling the `UpdateCapsule` Runtime Service function.

```c
typedef EFI_STATUS (*UpdateCapsule)(
    IN EFI_CAPSULE_HEADER **CapsuleHeaderArray,
    IN UINTN CapsuleCount,
    IN EFI_PHYSICAL_ADDRESS ScatterGatherList OPTIONAL
);
```

The `ScatterGatherList` is an array of `EFI_CAPSULE_BLOCK_DESCRIPTOR` entries, each consisting of a capsule fragment data pointer and a capsule fragment size.

```c
typedef struct {
    UINT64 Length;
    union {
        EFI_PHYSICAL_ADDRESS DataBlock;
        EFI_PHYSICAL_ADDRESS ContinuationPointer;
    } Union;
} EFI_CAPSULE_BLOCK_DESCRIPTOR;
```

The operating system is responsible for fragmenting the contiguous update capsule to fit within the system's resource constraints. Each individual fragment of the update capsule is unsigned. The location of the `ScatterGatherList` is stored in an EFI Non-Volatile variable named "CapsuleUpdateData" and passed to the firmware during reboot. A warm reset is then performed.

### 2.2.2 PEI Phase Capsule Coalescing
The UEFI boot process is divided into several phases. The Pre-EFI Initialization (PEI) phase occurs early in the boot-up process and initializes the CPUs and main memory. In the PEI phase, the processing of the incoming capsule update image begins. If the platform is booting under a warm reset and the "CapsuleUpdateData" variable exists, the boot mode is changed to `BOOT_ON_FLASH_UPDATE`. The contents of the "CapsuleUpdateData" variable are interpreted as a physical address pointing to the `ScatterGatherList`.

Before further processing, the capsule update must be coalesced into its original form. The results of this process are visually depicted in Figure 2. After coalescing, further processing is deferred to the DXE phase.

### 2.2.3 DXE Phase Capsule Processing
The Driver Execution Environment (DXE) phase is responsible for the majority of system initialization. It continues processing the capsule image coalesced during the PEI phase. The capsule image contents are encapsulated in a series of envelopes providing contextual information about the update. A visual depiction is shown in Figure 3.

## 3. Capsule Update Vulnerabilities
### 3.1 Coalescing Vulnerability
### 3.2 Envelope Vulnerability

## 4. Capsule Update Exploitation
### 4.1 Coalescing Exploitation
#### 4.1.1 Coalescing Exploitation Difficulties
#### 4.1.2 Descriptor Overwrite Approach
#### 4.1.3 Optimization Tricks
#### 4.1.4 Coalesce Exploitation Success
### 4.2 Envelope Exploitation
### 4.3 Exploitation From Windows 8

## 5. Leveraging The Attack
## 6. User Experience
## 7. Affected Systems
### 7.1 OEM Firmware Instrumentation
### 7.2 HP EliteBook 2540p F23 Case Study
### 7.3 General Observations Regarding Affected Systems
## 8. Vendor Response
## 9. Recommendations
## 10. Related Work
## 11. Conclusion
## 12. Acknowledgments

---

This revised version aims to make the text more coherent, structured, and professional, while maintaining the technical depth and clarity of the original content.