User: 请回答以下安全问题密码哈希可以抵抗ASIC辅助破解，而不会有服务器DoS的风险。以前，身份验证系统将密码存储在明文中。这使得攻击者在有权访问泄露的密码文件的情况下登录帐户变得微不足道。
后来，对密码进行了一次散列处理，并存储了散列值。如果攻击者有泄露的密码文件，他可以尝试哈希猜测，如果哈希值匹配，则使用该猜测登录。
然后，密码在服务器上被加盐和散列数千次，加盐和产生的散列值被存储起来。如果攻击者有一个泄露的密码文件，他可以使用专门的ASIC进行散列猜测，如果猜测匹配，则使用该密码登录。
我们能做得更好吗？
我们能让密码破解变得如此困难吗？即使他有散列密码，他也不会比在服务器上测试密码获得主要优势（10倍）——即使他有专门的ASIC？我们能避免这种打开一种通过许多并行登录请求来拒绝服务器的方式吗？
我们可以假设攻击者可以访问散列密码，但他无法拦截服务器和客户端之间的通信。

Assistant: 有一些事情是可以做的，而且已经做了。
一种方法是利用TPM来创建服务器（理论上）不会泄露的秘密。在散列过程中，这个秘密被用于密码（我相信这个词是“胡椒”，而不是被视为公共信息的“盐”）。离线攻击者可以随意攻击此密码文件，但除非他们能够猜测存储在TPM模块中的服务器机密，否则他们没有任何可破解的东西。显然，这可以用任何类型的秘密来实现，但我指出TPM，因为它往往依赖于硬件解决方案来为这些数字提供安全性，这可能会使泄露秘密比丢失密码文件更困难。这与联邦调查局在试图解锁iPhone时公开存在的问题高度相关。他们需要的信息被锁在一个故意难以进入的芯片中。
另一种方法是使ASIC效率低下。ASIC的功能通常是可以对密码文件进行大规模并行攻击。您可以将哈希过程设计为消耗大量资源，而这些资源的并行化成本很高。有一些哈希算法就是为了做到这一点而设计的。一种常见的方法是使用内存密集型哈希例程，迫使ASIC设计者在内存库上花费大量的芯片不动产。
不过，从根本上讲，如果攻击者能够获得两台相当于你的服务器的计算机，他们可以以两倍于离线速度对其进行攻击。这是一个简单的信息论现实。然而，这些方法使您很难获得服务器的“等价物”。一种方法是创建一个难以复制的秘密。另一种方法是通过使用在硬件中不太容易并行的算法来实现这一点。
为了回应你对自己答案的评论，如果你让客户参与进来，让他们为你做计算，一些有趣的解决方案就会成为选择。考虑一下零知识证明。它们旨在表明你知道一个号码（或密码），而不透露除你知道号码之外的任何信息。如果服务器使用这些零知识协议中的一个来查询客户端，以确定客户端是否知道密码，那么服务器根本不需要知道任何关于密码的信息，因此没有密码文件可以泄露。最多，只有一个数据结构数据库可用于零知识协议，这些数据结构在数学上被证明不包含有关密码的信息（或者至少在统计上不包含任何信息）。获取此文件的攻击者能够验证连接到他们的客户端（！）是否是有效的客户端，但无法比您更好地破解密码——这根本不是。