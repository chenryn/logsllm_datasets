r be the maximum reward value, across all Si, that would be
returned to M if the given set was assembled into a block. She
discards any sets that do not return reward value r, and then
assembles the proof package from the remaining set with the
earliest average proof receipt time so that the mean remains
below tk.
III. ASSUMPTIONS AND METHODOLOGY
A. Threat Model
In this section, we list the set of known attacks that can
be carried out on Bobtail. Doublespend, selﬁsh mining, and
eclipse attacks exist on current blockchains, but the other two
are unique to Bobtail. Solutions to each attack, except eclipse,
are presented in subsequent sections.
Attacker Model. We assume a straightforward attacker model:
attackers are assumed to have some signiﬁcant proportion of
the network’s total mining power, but less than 50%. We are
interested in attacks on Bobtail’s design only, and thus we
assume the attacker ignores aspects of the blockchain that are
orthogonal, such as hacking into the systems of other miners.
Doublespend. In a doublespend attack [35, 37], the attacker
purchases off-chain goods or services from a merchant using
an on-chain transaction T . Assume the main chain ends with
block B0. Honest miners will add a sequence of blocks
H = H1, H2, . . . after B0, with transaction T appearing in
block H1. In the meantime, the attacker mines an alternate
fork, also beginning from B0, with a fraction q of the mining
power, producing blocks A = A1, A2, . . .. Block A1 contains
a transaction T (cid:48) that conﬂicts with T , allowing the attacker to
avoid paying the merchant. To thwart the attack, the merchant
selects a value z ≥ 0 and does not release the goods or services
until the length of H is at least z. Larger values of z decrease
the probability of success for the attacker. When z = 0, the
item is released immediately. The attacker withholds A until
its length is at least z + 1 and is also longer than the honest
miners’ fork. Upon announcement of A, the honest miners will
adopt it along with the conﬂicting transaction T (cid:48) instead of T .
Selﬁsh mining. A selﬁsh mining attack [23, 26, 41] is another
strategy where an attacker attempts to increase her proportion
of blocks (and rewards) to an amount above the proportion
she has of the network’s mining power by causing honest
miners to waste some of their work. We follow the attack as
described by Eyal and Sirer [23], which unfolds as follows.
The attacker withholds a secret chain A = A1, A2, . . . forked
from B0, releasing one block at a time only when she is ahead
by two, and continuing until honest miners are able to produce
a competing chain H = H1, H2, . . . of equal or greater length.
At this point, the attacker releases the remaining private portion
of A. If A is the same length as H at the time of release, then
some (non-empty) set of all miners (including the attacker)
will adopt A. Thus, A will be extended with some positive
probability, nullifying the work performed on chain H.
Doublespend and selﬁng mining attacks are the two most
fundamental attacks on blockchains. In both cases, because the
attacker is assumed to have a minority of the mining power,
in expectation, he cannot create a longer fork than that of the
honest miners. However, just like a person visiting a casino,
the attacker is seeking a short-term win. He is attempting to get
lucky and ﬁnd a series of blocks quickly while the honest miners
are relatively unlucky and discover blocks slowly, despite their
larger amount of mining power. Intuitively, the success of the
attacks lies in leveraging the inherent variance of mining. We
show how Bobtail’s low variance inter-block time defeats these
attacks in Section V.
Eclipse. Most public blockchains arrange fully validating
nodes (including miners) in a p2p network [17]. An attacker
eclipses [28] a peer in the network by conspiring to take over
all of its incoming and outgoing connections. By doing so,
the attacker can censor both the set of transactions and blocks
sent and received by the peer. As a result, the attacker can
effectively eliminate the hash rate of the targeted peer by
refusing to forward the peer’s blocks. For example, in Bitcoin,
if the peer has a signiﬁcant fraction of the hash rate, then it
becomes easier for the attacker to doublespend on the main
chain. Bobtail experiences the same susceptibility to eclipse
attacks as Bitcoin because the attacker can censor proofs the
same way he would censor blocks. In particular, an attacker
with fraction x of the hash rate who can eclipse fraction y of
the honest hash rate, will increase his effective hash rate from
x to x/(1 − y). We do not focus further on eclipse attacks in
this work because they amount to attacks on network topology
and management mechanisms, which are largely orthogonal
to the consensus mechanism developed by Bobtail. Moreover,
mitigations have been introduced [28] for the eclipse attack in
existing blockchains.
Proof withholding. This attack involves miner A declining to
publish some subset of her Bobtail proofs immediately after
they are generated. Instead, A withholds the proofs in order
to gain an informational advantage over the remaining miners,
H. While miner A sees all proofs, an honest miner in H sees
only proofs generated by members of H. A hopes that this
advantage will allow her to assemble some proof packages
4
with more than her fair share of proofs and ultimately lead to
an increase in her total reward. Section VIII-B describes how
honest Bobtail miners defeat this attack by using supporting
proofs and assembling blocks using the earliest arriving proofs.
Denial-of-Service. We distinguish denial-of-service (DoS)
attacks from proof withholding by the property that, for
the former, a miner elects not to release a complete block
when he is capable of doing so. Such an attack is clearly
disincentivized in current PoW protocols like Bitcoin because
of the opportunity cost associated with losing the mining reward.
However, opportunity cost is less obvious in Bobtail because
the proofs generated by a miner are eligible for inclusion in
multiple potential blocks.
B. Methodology
In this paper, our primary conclusions are based on
theoretical analysis, which are subsequently validated using a
detailed Monte Carlo simulation3. In the simulation, the mining
process is modeled as sampling from a uniform distribution
and comparing those samples against a target. For each trial,
we set a target and count the number of samples taken until the
target is reached. This procedure yields a valid approximation
of mining time assuming a constant hash rate, in which case
block generation times can be inferred from a count of hashes
performed. For each plot in the paper, we computed many
thousands of trials such that the 95% conﬁdence intervals
are sometimes too small to be shown or are represented as
(very small) intervals. Every point on each plot is a separate
set of trials to ensure independence. In some simulations
we measured block times only; in other simulations, sharing
the same code, we awarded coinbase and included network
delays required to examine the operation of the full Bobtail
protocol and operation. In our simulations, we do not model the
network topology, which is to say that all miners are nominally
connected in a clique. Nevertheless, we feel that the latencies
we introduce, where appropriate, are realistic for the networks
they model [24].
IV. LOW VARIANCE AND OTHER PROPERTIES
OF THE k-OS CRITERION
In this section, we derive the statistical characteristics of
Bobtail. Our primary goal is to prove that the inter-block time
variance decreases as O(1/k).
Roadmap. To derive the reduction in Bobtail’s inter-block
time variance, we proceed in four steps. We begin by laying
a statistical foundation upon which our results are built. In
Section IV-A, we derive an equation for Bobtail’s PoW target,
which is a function of k. In Section IV-B, we use the target
tk to derive an expression for the expected amount of time
it takes to mine a block, given k. In Section IV-C, we use
this expectation to calculate the inter-block time variance, and
ﬁnally, in Section IV-D, we compare as a ratio the variance
of mining with k > 1 to current systems (i.e., k = 1). The
primary challenge in this derivation is in linking the statistics
of PoW sample values with mining time. The former is dictated
directly by the protocol (through mining criterion wk  1 without adjusting the
target for k = 1, then the expected block time would increase:
the average of the k lowest order statistics has higher expected
value than the ﬁrst order statistic alone, so we expect that
more hashes are required for the average to fall below a given
value. Therefore, to keep the number of hashes expected to
ﬁnd a block constant as we increase k, the target tk appropriate
for each k should also be increased. In this subsection, we
determine the relationship between ti and tj, i (cid:54)= j, such that
the expected time to mine a block using criterion wi  0. Unfortunately,
it is difﬁcult to reason directly about T (Wk, tk), but it is
straightforward to reason about T (W (cid:48)
k, v). From Lemma 1, we
expect each V (cid:48)
to fall below v after exactly 1/r intervals. So
it must also be the case that T (W (cid:48)
r . Using reasoning
similar to that in Lemma 2, it can be shown that E[W (cid:48)
k] = v.
k is an unbiased estimator of Wk, and we
Therefore, k+1
expect that T (Wk, tk) = T ( k+1
k, tk). Finally, we have the
following.
k, v) = 1
2 W (cid:48)
i
2 W (cid:48)
(cid:16)
(cid:17)
T
Wk, (k+1)v
2
(cid:16) 2
(cid:17)
= T
= T (W (cid:48)
k+1 Wk, v
k, v)
= 1
r .
B. Estimating Mining Time
In this section, we derive a consistent estimator of block
mining time for mining statistic Wk assuming that tk = k+1
2 v
according to Lemma 3.
Consider the following choice of estimator for the overall
number of intervals required to ensure Wk  0, provided that tk is chosen
such that
Fig. 3: We measured the variance of Bobtail’s average proof of
work statistic using a Monte Carlo simulation and it has the same
values as predicted by Eq. 12 from Theorem 1. 95% c.i.’s are too
small to show.
(6)
2
(8)
2
required for Wk to fall below tk with
E[Yk] =
1
r
,
(10)
where r = vh/S.
PROOF: Beginning with Eq. 9 we have,