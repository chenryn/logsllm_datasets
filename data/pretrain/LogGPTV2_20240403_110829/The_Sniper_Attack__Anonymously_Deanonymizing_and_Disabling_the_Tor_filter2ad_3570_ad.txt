0:44
17:44
8 GiB
0:14
3:07
13:58
0:12
10:53
14:20
1:37
8:56
0:57
5:52
141:49
although the linear regression did not result in a strong cor-
relation (direct: r2=0.164, anonymous: r2=0.237), we believe
it provides a reasonable prediction of RAM consumption for
analysis purposes as we expect the actual time to disable the
groups of relays given in Table II to fall somewhere the times
given in the 1 GiB and 8 GiB columns.
Our analysis shows that the fastest guard and fastest exit
with 1 GiB of RAM can be disabled in just one minute
when using the direct attack, thereby disabling an expected
1.7 and 3.5 percent of paths in the Tor network, respectively.
When allotting 8 GiB of RAM for these relays, they can be
disabled in under 20 minutes in both attack modes. Perhaps
more strikingly, the entire group of the fastest 20 exits can
be disabled in just 29 minutes if each relay has only 1 GiB
of RAM, and in just under 4 hours if each relay has 8
GiB of RAM. (The anonymous attack takes slightly longer
in both cases.) This would be extremely disruptful to the
Tor network, causing roughly 35 percent of all paths to fail
and increasing load and congestion on the remaining relays.
Similarly, the group of the fastest 20 guards can be disabled
in just 45 minutes if allotting 1 GiB of RAM for each relay,
and just under 6 hours if allotting 8 GiB of RAM for each
(again, the anonymous attack takes slightly longer). This would
cause 19 percent of Tor paths to fail. Finally,
the attack
takes signiﬁcantly longer on the group of directory authorities,
since their lower bandwidth weights result in lower RAM
7
0.00.20.40.60.81.0Time(m)0.00.20.40.60.81.0RAMConsumed(MiB)20253035404550556005001000150020002500anonymous05001000150020002500direct10teams100circs5teams50circs1team10circs1team5circsnoattack05001000150020002500MeanTargetRAMConsumptionRate(KiB/s)0.00.20.40.60.81.0CumulativeFractiondirectanonymous020406080100MeanSniperBWConsumptionRates(KiB/s)0.00.20.40.60.81.0CumulativeFractiondirectTxanonymousTxdirectRxanonymousRxconsumption rates than the fastest relay groups. Note that
relays will likely be rebooted by their operators some time
after going down, however, all circuits they were carrying will
be lost and the attack could be relaunched against a relay as
soon it is available. This may effectively cause a relay to be
marked as unstable and not chosen by clients for their circuits.
IV. DEANONYMIZATION IN TOR
The Sniper Attack is more than just a threat to Tor’s avail-
ability: it can also be used as an attack on anonymity. Because
Tor accepts any willing relay into the network, an adversary
that runs relays can deanonymize a victim by controlling the
entry and exit relays and correlating the observed timing and
volume of a user’s trafﬁc entering the network with that leaving
the network shortly afterwards [11], [42].
To prevent an adversary running relays from eventually
being chosen for these positions, a user chooses a small set
of entry guards (Tor defaults to 3 guards), and begins all
circuits at one of these guards. This protects the user from
being directly observed as long as adversarial relays are not
chosen as guards. A guard is used for 30–60 days, at which
point a replacement is selected [21].
Thus a user’s guards are an attractive target for the Sniper
Attack. If few enough of a user’s guards are responsive (at most
1 in Tor), the user will select new guards as replacements. By
disabling the user’s guards, the adversary can cause the user
to choose new guards and hope that an adversarial relay is
among them. This process can be repeated until the adversary
succeeds.
This attack requires the adversary to identify the target’s
guards and to force her to choose new ones as soon as the
old ones are disabled. Doing so is particularly easy with
hidden services [34] because they create circuits on demand.
Therefore, we will describe and analyze the attack applied to
hidden services.
Deanonymizing Tor clients using the Sniper Attack is less
straightforward because they generally do not respond on
demand. However, in some signiﬁcant cases guards could be
identiﬁed and guard reselection initiated. For example, a user
downloading a large ﬁle could give the adversary enough time
to discover the guard using a congestion side channel [23],
[24], [33]. Furthermore, download managers and BitTorrent
clients generally automatically restart an interrupted download,
which would prompt guard reselection by Tor.
Finally, we note that in addition to deanonymization, the
adversary could use the Sniper Attack to attack Tor privacy
in other ways. For example, he could attack the exits of long-
lived circuits, such as IRC connections, in order to be chosen
as the replacement exit and discover the destination. He could
also attack exit relays that allow connections to certain ports
in order for adversarial relays to observe a larger fraction of
exit trafﬁc to such ports.
A. Deanonymizing Hidden Services
Hidden services provide responder anonymity for a persis-
tent service. Users are able to connect to the service through
Tor without knowing its location. Let H be a hidden service
and C be a client. H chooses a set I of Tor relays as
introduction points and creates persistant circuits to them. The
protocol for using a hidden service is (1) C chooses a Tor
relay R to serve as a rendezvous point and creates a circuit to
it; (2) C chooses an introduction point I, creates a Tor circuit
to it, and sends R to H through I; (3) H creates a circuit to
R; and (4) C and H communicate to each other over their
respective circuits to R.
To perform the anonymity attack on a targeted hidden
service, the adversary will need to control at least one relay
that can serve as a guard, and he will need to control another
relay that can serve as a rendezvous point. For an adversary’s
relay to be used as a guard, it must satisfy minimum uptime
and bandwidth requirements (roughly, its uptime must be at
least that of the median relay, and its bandwidth must be at
least the minimum of the median bandwidth and 250 KB/s [7]).
Any relay in the Tor network can serve as a rendezvous point.
The deanonymization attack proceeds in three phases:
1)
2)
3)
Identify the guards of the hidden service;
Disable the guards with the Sniper Attack; and
Test if the hidden service selected an adversarial relay
as a replacement guard, and repeat from 1) if not.
To describe these phases in detail, let GA be the adversarial
relay that can be used as a guard, RA be the adversarial relay
intended to be used as a rendezvous point, CA be an adversarial
Tor client, and H be the target hidden service.
Biryukov et al. describe an efﬁcient
Phase 1 (Identify Guards): A user can force H to select
a new circuit by requesting a new connection through a
rendezvous point. H chooses the circuit’s relays other than
the guard roughly at random weighted by bandwidth. Thus, by
requesting enough connections, the adversary will eventually
cause H to choose circuits such that, for every guard of H,
in some of those circuits the adversarial relay GA is the hop
after that guard. For these circuits, the adversary can directly
observe the guards’ identities, although he may not realize it.
technique for the
adversary to recognize when he is in such a situation [12]. The
rendezvous point RA sends a pattern of 50 PADDING cells to
H down the rendezvous circuit followed by a DESTROY cell.
If GA observes a pattern of 2 cells on a rendezvous circuit
from a hidden service and 52 cells on the same circuit to
the hidden service (the cells in excess of 50 are from circuit
construction), followed by a DESTROY cell shortly after one
is sent by RA, it concludes that the relay one hop closer to H
on the circuit is a guard of H. During experiments on the live
Tor network, Biryukov et al. observed no false identiﬁcations
using this method. They also note that the attack could be
performed without an adversarial rendezvous point, although
it would slow the attack because the rendezvous circuit must
extend to CA.
Using this method, the adversary can quickly, efﬁciently,
and perfectly identify all guards of H. Moreover, the discovery
process looks fairly innocuous to H, which only sees a series
of normal rendezvous requests. Of course, all such requests
are to the same rendezvous point, the connections may appear
abnormally fast, and no data is ever carried on the circuits. If
stealthiness is a goal, the attack could be mounted from CA
with normal rendezvous point selection, at a slower rate, and
including some typical data requests as cover. This would come
at the cost of some speed and efﬁciency. Note also that Øverlier
and Syverson [34] describe a less-efﬁcient method of guard
identiﬁcation that depends on performing trafﬁc correlation
that is less precise but is more robust to countermeasures.
Phase 2 (Disable Guards): Once H’s guards have been
identiﬁed, the adversary can use the Sniper Attack to cause
the Tor process of each guard to be killed. The attack can
be run against all guards in parallel to reduce the time of the
8
i=1 ti
1 + ti
2 + ti
attack to the time to kill just one guard. Moreover, attacking
the guards at the same time increases the length of time that
the guards remain simultaneously unavailable. Eventually, we
would expect the relay operator to notice that the Tor process
was killed and restart it.
Phase 3 (Test for Guard Selection): Once the hidden
service’s guards are disabled, the adversary can easily cause
new ones to be selected simply by connecting normally to the
service. Then he can determine if his guard GA was selected
by H using techniques very similar to those used to identify
guards in Phase 1. A difference is that he would look on the
circuits of GA for those with 3 cells from the circuit origin and
53 cells towards it before destruction. This step requires only
enough circuits that any given guard of H is sufﬁciently likely
to be used for at least one (e.g. with 35 circuits, the probability
of such a selection failing to occur is at most (2/3)35  10 6).
B. Evaluation
1) Time for Phase 1 (ti
attack time t can be expressed as t =Pr
The DoS Deanonymization Attack executes a number of
three-phase rounds until it succeeds. To estimate the time to
complete round i of the attack on hidden service H, let ti
1 be
2 be the time
the time to identify the guards of H (Phase 1), ti
to disable the guards of H (Phase 2), and ti
3 be the time to
test if H selected a malicious relay as a guard (Phase 3). Let r
be the number of rounds needed for the attack. Then the total
3. We
estimate t for the actual Tor network and various sizes of the
adversary, and use real Tor network data from Tor Metrics [8].
1): To identify the guards of H,
the adversary runs a malicious relay MA and creates enough
connections to H such that, for each guard G, a resulting
circuit from H to the rendezvous point uses MA as the middle
relay and G as the guard. The connections to H can be created
in parallel to speed up this phase. Let tc be the time from
initiating a connection to H until MA observes the cell pattern
that indicates its presence on a rendezvous circuit of H. Let
ci be the number of connections that are needed for MA to
observe all guards of H. Let ` be the number of connections
created in parallel. The time for this phase is then ti
1 = tcci/`.
To estimate tc and ci, we ran a hidden service experiment
in Shadow. During the experiment, a client repeatedly created
new connections to a hidden service and sent the 50-cell trafﬁc
signature used to recognize relays on the resulting circuit. Note
that we used the version of the attack in which the client
sends these cells rather than the rendezvous point. We recorded
the paths of these circuits and the time from initiation of the
connection until the service received the trafﬁc signature. Our
experiments were performed in two sessions, each with 10
client-server pairs run in parallel and with background trafﬁc.
During these experiments, 8319 connections to hidden
services were created. The average time between starting a
connection at the client and receiving the inserted cell pattern
at the server was 10.69s. The minimum time was 1.45s and the
maximum time was 319.87s. Thus we expect that tc = 10.69.
Our expectation for ci depends on the bandwidth of MA.
The higher the bandwidth is, the more likely that MA is
selected in a circuit and the lower that ci is. Thus we consider
a range of capacities for MA. Table III shows the average
number of connections that clients had to make to identify the
guards of H when we consider relays of different sizes to be
the malicious relay MA. The relays we select were chosen
middle relays with probabilities that range from 0.0026 to
TABLE III: Speed of Guard Identiﬁcation
Selection Prob.
as Middle
0.0026
0.0052
0.010
0.021
0.030
Tor BW
(MiB/s)
8.41
16.65
31.97
66.04
96.61
Avg # of Cxns to
Identify All Guards
598.00
357.33
227.94
141.74
118.40
t⇤1 (min),
` = 10
10.65
6.37
4.06
2.53
2.11
0.030. We estimate the bandwidth a Tor relay would need to be
to be selected with those probabilities using a linear regression
on the consensus weights and the estimated relay capacity. The
regression is on network data from 6/30/13. We can see that
for relays with bandwidth in the range of 8–100 MiB/s, the
average number of connections c⇤ needed to identify all guards
ranges from 598 to 118. c⇤ is a good estimate for c1, and as
the attack progresses through additional rounds the expectation
for ci only decreases as relays are disabled and the malicious
relay becomes a larger fraction of the active network. Thus we
can conservatively use c⇤ as the estimate for all ci.
We can then use t⇤1 = tcc⇤/` as a conservative estimate for
the time ti
1 to complete Phase 1 in round i. Table III shows this
time for ` = 10 parallel connections. We use this value of `
because our experiments consisted of 10 clients simultaneously
connecting to hidden services. However, we expect that many
more connections could be created in parallel without increas-
ing the connection time tc much because the time is dominated
by network latency and creating a connection uses relatively
little network bandwidth. This could potentially decrease t⇤1 to
as little as tc = 10.96s.
2) Time for Phase 2 (ti
2): During the ith round of a given
attack, the relay will have selected a set of guards (Tor uses
at most 3). We suppose that the Sniper Attack can be run in
parallel on all of these, and thus the time ti
2 to disable all of