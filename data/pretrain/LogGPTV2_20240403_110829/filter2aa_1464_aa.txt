1
针对Dynamic Link Library(DLL)攻击⼿法的深⼊
分析
1.Dynamic Link Library基础知识
1.1.DLL的结构
1.2加载DLL
1.2.1显式加载
1.2.2隐式加载
1.3.win常⽤dll及其功能简介
1.4.DLL如何加载
2.DLL劫持可能发⽣的⼏个场景
2.1.场景1:可以直接劫持某个应⽤的DLL
2.2.场景2:不存在DLL 劫持
2.3.场景3:DLL 搜索顺序劫持
2.4.其他
3.常⻅的DLL攻击利⽤⼿法
3.1.DLL 加载劫持进⾏钓⻥维权
3.1.1.实例1 Qbot(⼜名 Qakbot 或 Pinkslipbot)劫持Calc.exe的WindowsCodecs.dll
3.1.2.实例2 Kaseya 劫持MsMpEng.exe的mpsvc.dll
3.1.3.实例3 LuminousMoth APT劫持多个DLL进⾏利⽤
3.1.4.实例4 ChamelGang APT 劫持MSDTC进⾏维权
3.1.5.实例5 利⽤劫持Update.exe的CRYPTSP.dll进⾏维权
3.2.DLL 加载劫持进⾏提权
3.2.1 劫持任务计划程序服务加载的WptsExtensions.dll通过 PATH 环境变量进⾏提权
3.2.2.通过PrivescCheck检测⽬标上是否存在DLL劫持
3.2.3.劫持winsat.exe的dxgi.dll Bypass UAC
3.3.DLL 加载劫持进⾏终端杀软强对抗
3.3.1.实例1 劫持360杀毒
3.3.2.实例2 劫持卡巴斯基的wow64log.dll
4.部分使⽤DLL 劫持的APT
2
5.参考：
by-⽹空对抗中⼼-李国聪 
dll(dynamic-link library),动态链接库，是微软实现共享函数库的⼀种⽅式。动态链接，就是把⼀些常⽤
的函数代码制作成dll⽂件，当某个程序调⽤到dll中的某个函数的时候，windows系统才把dll加载到内存
中。也就是说当程序需要的时候才链接dll，所以是动态链接。 
简单的说，dll有以下⼏个优点： 
1)  节省内存。同⼀个软件模块，若是以源代码的形式重⽤，则会被编译到不同的可执⾏程序中，同时运
⾏这些exe时这些模块的⼆进制码会被重复加载到内存中。如果使⽤dll，则只在内存中加载⼀次，所有使
⽤该dll的进程会共享此块内存（当然，像dll中的全局变量这种东⻄是会被每个进程复制⼀份的）。 
1.Dynamic Link Library基础知识 
动态连接，就是把这些相通的功能、函数都放到⼀种特殊形式的windwos可执⾏⽂件中（dll），⽣成⼀
个DLL的时候，程序员需要写出，其中包含那些函数需由其他程序来访问。这个过程叫做对函数的“导
出”
创建windows程序的时候，专⻔的连接程序对程序的对象⽂件进⾏扫描，并⽣成⼀个列表，列出那些调
⽤的函数在那个DLL那个位置，指定各个函数所在位置的过程叫做对函数的“导⼊”
当程序运⾏的时候，⼀旦要求⽤到执⾏⽂件内部没有的函数，windows就会⾃动装载动态连接库，使应
⽤程序可以访问这些函数。此时，每个函数的地址都会解析出来，并且以动态的⽅式连接到程序⾥－－
这便是术语“动态连接”的由来。
另外还有⼀个好处，就是当你更新你的这个函数的版本和功能的时候，静态连接所需要做的⼯作是多少
（假设按windwos来说他有上千个这样的函数，⼀共有100多个程序来使⽤，那静态连接需要100000次
的更新，动态连接只需要1000次），从⽽也节省了内存的空间。
动态连接库不⼀定是DLL扩展名的，也可以是ocx、vbx、exe、drv 等等的
3
2)  不需编译的软件系统升级，若⼀个软件系统使⽤了dll，则该dll被改变（函数名不变）时，系统升级只
需要更换此dll即可，不需要重新编译整个系统。事实上，很多软件都是以这种⽅式升级的。例如我们经
常玩的星际、魔兽等游戏也是这样进⾏版本升级的。
3)  Dll库可以供多种编程语⾔使⽤，例如⽤c编写的dll可以在vb中调⽤。这⼀点上DLL还做得很不够，因
此在dll的基础上发明了COM技术，更好的解决了⼀系列问题。 
包含objbase.h头⽂件（⽀持COM技术的⼀个头⽂件）。⽤windows.H也可以。 
然后是⼀个DllMain函数 
1.1.DLL的结构 
#include 
#include 
BOOL APIENTRY DllMain(HANDLE hModule, DWORD dwReason, void* lpReserved)
{
    HANDLE g_hModule;
    switch(dwReason)
    {
    case DLL_PROCESS_ATTACH:
       cout  
#include   
void main(void)  
{  
typedef int(*pMax)(int a,int b);  
typedef int(*pMin)(int a,int b);  
HINSTANCE hDLL;  
PMax Max  
HDLL=LoadLibrary("MyDll.dll");//加载动态链接库MyDll.dll⽂件；  
Max=(pMax)GetProcAddress(hDLL,"Max");  
A=Max(5,8);  
Printf("⽐较的结果为%d\n"，a);  
FreeLibrary(hDLL);//卸载MyDll.dll⽂件；  
}  
6
这种⽅式在程序需要dll函数时再加载dll,程序运⾏时只是载⼊主程序,打开速度快. 
隐式加载就是在程序开始执⾏时就将DLL⽂件加载到应⽤程序当中。实现隐式加载很容易，只要将
导⼊函数关键字_declspec(dllimport)函数名等写到应⽤程序相应的头⽂件中就可以了。 
下⾯的例⼦通过隐式链接调⽤MyDll.dll库中的Min函数。⾸先⽣成⼀个项⽬为TestDll，在
DllTest.h、DllTest.cpp⽂件中分别输⼊如下代码： 
在创建DllTest.exe⽂件之前，要先将MyDll.dll和MyDll.lib拷⻉到当前⼯程所在的⽬录下⾯，也可以拷⻉到
windows的System⽬录下。如果DLL使⽤的是def⽂件，要删除TestDll.h⽂件中关键字extern "C"。
TestDll.h⽂件中的关键字Progam commit是要Visual C+的编译器在link时，链接到MyDll.lib⽂件，当
然，也可以不使⽤#pragma comment(lib，"MyDll.lib")语句，⽽直接在⼯程的Setting->Link⻚的
Object/Moduls栏填⼊MyDll.lib既可。 
1.2.2隐式加载 
//Dlltest.h  
#include"MyDll.h"  
#pragma comment(lib，"MyDll.lib")  
extern "C"_declspec(dllimport) int Max(int a,int b);  
extern "C"_declspec(dllimport) int Min(int a,int b);  
//TestDll.cpp  
#include"Dlltest.h"  
void main()  
{int a;  
a=min(8,10)  
printf("⽐较的结果为%d\n"，a);  
}  
7
这种⽅式在程序载⼊到内存时,就把dll中的代码加载过来,这样就会有静态链接存在的问题,即如果程序⽐较
⼤的话,感觉软件打开慢. 
Kernel32.dll 这个dll扩展出⼝于进程、内存、硬件、⽂件系统配置有关。 
Advapi32.dll 这是⼀个与系统服务以及注册表有关的函数。 
1.3.win常⽤dll及其功能简介 