### Alloy Specifications for Intent Hijack Vulnerability in Android

```java
malCmp.detailedPaths = malPath & malPath.source = IPC
malPath.sink in SensitiveSinks
```

**Listing 1.** Alloy specifications for the Intent Hijack vulnerability in Android.

### COVERT: Compositional Analysis of Android Inter-App and Inter-Component Security Vulnerabilities

COVERT is a tool designed to analyze Android applications for inter-app and inter-component security vulnerabilities. It uses static taint analysis to track sensitive data flows, ensuring high precision by being flow-, field-, and context-sensitive. This means it distinguishes between different program points, fields of heap objects, and calling contexts, respectively. However, for scalability, the analysis is not path-sensitive.

#### Taint Analysis

For single-component taint analysis, COVERT relies on FlowDroid [5]. For analyzing sensitive data paths across components, it performs a formal, compositional analysis, which is discussed in Section III-A2.

#### Permission Extraction

To ensure that permission policies are preserved during inter-component communication, COVERT compares the granted permissions of the caller component against the enforced permissions at the callee component. It uses API permission maps, particularly the PScout permission map [6], to determine the permissions used by each component. These maps specify the mappings between Android API calls/Intents and the required permissions.

### Formal Analyzer

COVERT employs lightweight formal analysis techniques, specifically Alloy [7], for modeling and analysis. The Formal Model Generator module translates app models into the Alloy specification language. These models are then combined with a formal specification of the application framework and checked for vulnerabilities. COVERT uses the Aluminum [8] extension of the Alloy Analyzer as the analysis engine, conducting exhaustive enumeration over a bounded scope of model instances.

#### Alloy Signatures

To perform compositional analysis, specific Alloy signatures are designed to model security properties. For example, Listing 1 expresses the Intent Hijack signature, which states that an implicit Intent containing sensitive data from a vulnerable component could be hijacked by a malicious component, leading to data leakage through a sensitive sink. If a signature is satisfied, the analyzer reports it as a vulnerability, along with details to help identify the root cause.

### Front-End Applications

To facilitate user interactions, COVERT provides desktop, mobile, and web-based front-end applications.

#### Desktop Client

The Desktop Client is a JavaFX [9] application that provides a graphical user interface for analyzing APK files. Users can download these files from online app stores or use the `adb` tool [10] to extract them from their devices. The application's features are detailed on COVERT’s website [11].

#### Mobile and Web-Based Applications

These applications work together to analyze installed apps on a mobile device and generate vulnerability reports. The mobile app retrieves information about installed apps, including package names and version codes, and sends this data to the back-end server. The web-based application allows users to access the analysis results using a device identifier as the access key.

### Scalability and Central Repository

To enhance scalability, COVERT maintains a central repository of app models. Before extracting a new app model, it checks the repository using the app's package name and version code. If the model already exists, it reuses the existing one for analysis.

### Example: Real-World Use Case

Figure 3 illustrates COVERT’s front-end desktop application after loading the results of back-end analysis for sample apps. Part (a) categorizes detected vulnerabilities based on inter-component classes identified by prior research [1], [3], such as Intent Hijack, Spoofing, and Data Leakage. Parts (b), (c), and (d) provide detailed elements of the vulnerabilities, potential exploit scenarios, and graphical overviews, respectively. Part (e) shows the decompiled source code of the vulnerable component for further inspection.

### Related Work

Several tools have been developed to identify inter-component vulnerabilities in Android, but they often do not consider inter-app security issues. COVERT, however, extends beyond single-app analysis, enabling a comprehensive compositional analysis of the system's overall security posture. Tools like DidFail [14] focus on tracking data flows between components but do not cover all aspects of data schemes, affecting their precision in inter-component path matching.

### Conclusion

COVERT is a powerful tool for detecting inter-app and inter-component security vulnerabilities in Android applications. It combines a back-end engine for formal model extraction and analysis with front-end applications for user interaction. Experimental results [2] confirm its ability to reveal previously unknown vulnerabilities in real-world Android apps.

### Acknowledgements

This work was supported by awards from the US Defense Advanced Research Projects Agency, the US National Security Agency, the US Department of Homeland Security, and the US National Science Foundation.

### References

[1] L. Davi, A. Dmitrienko, A.-R. Sadeghi, and M. Winandy, “Privilege escalation attacks on android,” in the 13th Intl. Conf. on Information Security, 2010, pp. 346–360.

[2] H. Bagheri, A. Sadeghi, J. Garcia, and S. Malek, “Covert: Compositional analysis of android inter-app permission leakage,” IEEE Transactions on Software Engineering (TSE), 2015.

[3] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner, “Analyzing inter-application communication in android,” in Proceedings of MobiSys, 2011, pp. 239–252.

[4] E. Bodden, “Inter-procedural data-flow analysis with ifds/ide and soot,” in Proceedings of SOAP. ACM, 2012, pp. 3–8.

[5] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. Le Traon, D. Octeau, and P. McDaniel, “Flowdroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for android apps,” in Proceedings of PLDI, 2014, pp. 259–269.

[6] K. W. Y. Au, Y. F. Zhou, Z. Huang, and D. Lie, “Pscout: Analyzing the android permission specification,” in Proceedings of CCS, 2012, pp. 217–228.

[7] D. Jackson, “Alloy: a lightweight object modelling notation,” TOSEM, vol. 11, no. 2, pp. 256–290, 2002.

[8] T. Nelson, S. Saghaﬁ, D. J. Dougherty, K. Fisler, and S. Krishnamurthi, “Aluminum: Principled scenario exploration through minimality,” in Proceedings of ICSE, 2013, pp. 232–241.

[9] Oracle, “JavaFX - The Available Rich Client Platform.” [Online]. Available: http://www.oracle.com/technetwork/java/javase/overview/javafx-platform-2158620.html

[10] Android, “Android Debug Bridge (ADB).” [Online]. Available: http://developer.android.com/tools/help/adb.html

[11] SDALab, “Covert Website.” [Online]. Available: www.sdalab.com/tools/covert

[12] D. Octeau, P. McDaniel, S. Jha, A. Bartel, E. Bodden, J. Klein, and Y. L. Traon, “Effective Inter-Component Communication Mapping in Android with Epicc: An Essential Step Towards Holistic Security Analysis,” in Proceedings of USENIX Security, 2013, pp. 543–558.

[13] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang, “Chex: statically vetting android apps for component hijacking vulnerabilities,” in Proceedings of CCS, 2012, pp. 229–240.

[14] W. Klieber, L. Flynn, A. Bhosale, L. Jia, and L. Bauer, “Android taint flow analysis for app sets,” in Proceedings of SOAP, 2014, pp. 1–6.