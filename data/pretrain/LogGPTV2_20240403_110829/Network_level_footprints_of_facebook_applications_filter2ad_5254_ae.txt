### Conclusions on Forwarding Delays

1. **Negligible Overhead of \( d_f \)**:
   - Our analysis indicates that the overhead introduced by \( d_f \) is negligible for typical applications.

2. **Linear Increase with Request Size**:
   - The delays in per-application OSN request forwarding increase linearly with the size of the request. Figure 12 illustrates this trend, showing that \( d_f \) increases steadily as the request sizes grow.
   - For each user request to a third-party application, Facebook appends a list of user-specific parameters to the URL and calculates a hash of these parameters before forwarding the modified request to the application server.
   - We hypothesize that the consistent increase in \( d_f \) is primarily due to internal transmission delays within the Facebook network. Notably, the plots for individual applications in Figure 12 do not overlap or cross, indicating distinct and consistent delay patterns. Although the differences are minimal for small request sizes, they become more pronounced for larger requests. These differences, however, are not correlated with the popularity of the applications.

3. **Invariance with Load**:
   - Per-application OSN request forwarding delays do not vary with the load (request arrival rate). An analysis of \( d_f \) from December 27, 2008, to January 23, 2009, for various request sizes did not reveal any significant relationship between third-party application usage and \( d_f \).
   - While \( d_f \) fluctuated over different times of the day and across days, the variations were neither appreciable nor consistent. However, our measurements only account for a fraction of the overall traffic on Facebook, limiting our ability to draw broader conclusions about the impact of overall Facebook Platform usage on \( d_f \).

### Summary
- Forwarding delays are relatively small for request sizes between 0â€“1Kb.
- These delays do not consistently vary with application usage (load) and increase linearly with increasing request sizes.
- Consequently, these delays have a minimal impact on users' interactions with third-party applications.

### OSN Response Processing Delays

As an intermediary, Facebook parses responses from third-party application servers before forwarding them to users, incurring additional processing delays (\( d_g \)). These delays can be influenced by the content type, content size, and characteristics of the target entity.

#### Key Observations:

1. **HTML vs. JavaScript Processing**:
   - Processing HTML content takes significantly less time than processing JavaScript. Using 200Kb of random HTML and 26Kb of JavaScript content, we found that \( d_g \) for HTML was 0.01ms/byte, compared to 0.04ms/byte for JavaScript. This difference is attributed to the more complex verification required for JavaScript content.

2. **FBML Content for Non-User Entities**:
   - The processing delay for FBML content targeting non-user entities (e.g., Facebook networks) remains consistent regardless of the target's popularity and over time. Experiments with 250 FBML network tags targeting both popular and less popular networks showed that \( d_g \) values were around 310ms, irrespective of the network's popularity. This consistency suggests the presence of a caching mechanism for FBML tags.

3. **FBML User Tag Processing**:
   - Processing delays for FBML user tags do not vary with the target users' popularity or network membership. Experiments with 250 FBML user tags targeting users in different regional networks and with varying numbers of friends did not show significant variations in \( d_g \).
   - The type of FBML tag significantly affects processing times. For example, FBML profile picture tags take the longest, while FBML user status tags take the shortest times. Figure 13 shows that \( d_g \) for FBML name tags is around 1,000ms, while for profile pictures and user statuses, it is approximately 1,350ms and 450ms, respectively. The high \( d_g \) values for profile pictures are likely due to the multiple sizes stored for each user's profile picture.

4. **Caching Effects**:
   - Caching has a significant effect on \( d_g \) for FBML user tags. Repeated experiments with the same set of target users showed lower delays, indicating that cached data plays a crucial role in reducing processing times.

5. **Linear Increase with Number of Tags**:
   - The processing time for OSN responses increases linearly with the number of FBML tags. This trend is consistent across different applications and target user characteristics, suggesting that Facebook does not parallelize the processing of FBML tags within individual requests.

6. **Time-of-Day Variations**:
   - OSN response processing delays vary with the time of day but are not consistently related to application usage (load). Morning periods generally show higher \( d_g \) values, while evening periods show lower values, with some anomalies observed.

7. **Significant Contribution to Total Time**:
   - OSN response processing delays constitute a significant portion of the total time per user request to third-party applications. For realistic average workloads and hypothetical scenarios, \( d_g \) values can be substantial and vary with the type of content. For example, for the most visited pages on the six Facebook applications, \( d_g \) ranges from 36.4% to 68.8% of the total time.

### Conclusion
- OSN response processing delays are a critical factor in the overall performance of user interactions with third-party applications on Facebook. These delays are influenced by the type and amount of content being processed and can be significantly reduced through effective caching mechanisms.