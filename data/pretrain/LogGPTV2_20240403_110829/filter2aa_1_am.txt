### 修改请求

在发送之前，请将“Accept-Language”头的值更改为“de”。

```http
GET / HTTP/1.1
Host: www.google.com
User-Agent: Mozilla/5.0
Accept-Language: de
Accept-Encoding: gzip, deflate
Connection: close
```

点击“转发”按钮将请求发送到Google的服务器。您应该会在浏览器窗口中看到德语版的Google主页（图4-10）。

**图4-10：德语版的Google主页**

如果您是德语使用者，可以反向进行测试：将“Accept-Language”头的值从“de”切换到“en”。您应该会看到英文版的Google主页。恭喜！您现在已经成功拦截、修改并通过代理转发了一个HTTP请求。

### Burp Intruder工具

Burp Intruder工具可以自动发送请求。如果您使用的是Burp的社区版本，那么Intruder将是一个有限制的试用版本。尽管如此，它仍然允许您执行诸如暴力破解等攻击，攻击者使用预先确定的值列表向服务器提交多个请求，并观察服务器是否会有不同的响应。例如，黑客如果获得了一个常用密码列表，可以通过反复提交所有常用密码的登录请求来尝试入侵您的账户。您可以通过在代理窗口中右键单击请求并选择“发送到Intruder”来将请求发送到Intruder。

在“Intruder”选项卡中的“目标屏幕”上，您可以指定要攻击的主机和端口（图4-11）。如果您从代理服务器转发请求，主机和端口将自动填充。

**图4-11：您可以在目标屏幕上指定要攻击的主机和端口。**

Intruder提供了多种方式来自定义攻击。对于每个请求，您可以选择使用的负载和负载位置。负载是您希望插入到请求特定位置的数据，而负载位置则指定了请求的哪些部分将被您选择的负载替换。例如，假设用户通过发送POST请求到`example.com/login`来登录`example.com`。在Burp中，这个请求可能如下所示：

```http
POST /login HTTP/1.1
Host: example.com
User-Agent: Mozilla/5.0
Accept: text/html,application/xhtml+xml,application/xml
Accept-Language: en-US
Accept-Encoding: gzip, deflate
Connection: close
username=vickie&password=abc123
```

POST请求正文包含两个参数：`username`和`password`。如果您试图暴力破解用户的帐户，可以更改请求的`password`字段并保持其他内容不变。要做到这一点，请在“位置”屏幕（图4-12）中指定有效载荷位置。要将请求的一部分添加到有效载荷位置，请突出显示文本，然后单击右侧的“添加”。

**图4-12：您可以在位置屏幕中指定有效载荷的位置。**

接下来，切换到“Payloads”屏幕（图4-13）。在这里，您可以选择要插入请求的有效载荷。要爆破登录密码，可以在此处添加常用密码列表。您还可以使用数字列表来爆破请求中的ID，或使用从互联网下载的攻击有效载荷列表。重新使用别人分享的攻击有效载荷可以帮助您更快地找到漏洞。我们将在第25章中更多地讨论如何使用重复使用的有效载荷来寻找漏洞。

**图4-13：在有效载荷屏幕上选择您的有效载荷列表。**

一旦您指定了这些内容，点击“开始攻击”按钮以启动自动化测试。Intruder将为您列出的每个有效载荷发送请求并记录所有响应。然后，您可以查看响应和响应代码，并寻找有趣的结果。

### Repeater工具

Repeater可能是您最常使用的工具（图4-14）。您可以使用它来修改请求并详细检查服务器响应。您还可以将有趣的请求添加到书签中以便以后返回。

虽然Repeater和Intruder都允许您操作请求，但这两种工具的用途非常不同。Intruder通过自动发送程序化修改的请求来自动化攻击，而Repeater则用于手动、详细地修改单个请求。

通过右键点击请求并选择“发送到Repeater”来发送请求。在Repeater屏幕左侧是请求。您可以在此修改请求，并在顶部单击“发送”将修改后的请求发送到服务器。相应的服务器响应将出现在右侧。

Repeater对于手动利用漏洞、尝试绕过过滤器以及测试针对同一端点的不同攻击方法非常有用。

**图4-14：Repeater适用于对请求的近距离审查和手动利用。**

### Decoder工具

Burp Decoder是一种方便的编码和解码工具，可用于处理请求和响应中的数据（图4-15）。我经常使用它来解码、操作和重新编码应用程序数据，然后将其转发给应用程序。

**图4-15：您可以使用解码器将应用程序数据解码，以读取或操作其明文。**

通过在任何请求或响应中突出显示一段文本块，然后右键单击该文本块并选择“发送到解码器”，将数据发送到解码器。使用右侧的下拉菜单指定用于编码或解码消息的算法。如果您不确定消息使用哪个算法进行编码，请尝试智能解码。Burp将尝试检测编码，并相应地解码消息。

### Comparer工具

Comparer是一种比较请求或响应的方式（图4-16）。它突出显示两个文本块之间的差异。例如，您可以使用它来检查参数差异如何影响您从服务器获取的响应。

通过在任何请求或响应中突出显示一段文本块，然后右键单击该文本块并选择“发送到比较器”，将数据发送到比较器。

**图4-16：比较器将突出显示两个文本块之间的差异。**

### 保存Burp请求

您还可以在Burp上保存请求和响应。只需右键单击任何请求，然后选择“复制URL”、“复制为curl命令”或“复制到文件”，将这些结果存储到该目标的笔记文件夹中。“复制URL”选项会复制请求的URL。“复制为curl命令”会将整个请求，包括请求方法、URL、头部和正文，复制为一个curl命令。“复制到文件”会将整个请求保存到一个单独的文件中。

### 笔记的重要性

在您开始寻找下一章的漏洞之前，快速给您一个建议：组织能力对于成功参与漏洞赏金计划至关重要。当您在大型目标上工作或同时攻击多个目标时，您从目标中收集到的信息可能会爆炸式增长并变得难以管理。

通常，您可能无法立即发现漏洞。相反，您会发现许多奇怪的行为和错误配置，它们目前无法被利用，但您以后可能会将其与其他行为结合在一起进行攻击。您需要用心记录任何新功能、错误配置、小错误和可疑的终端节点，以便您可以快速回来使用它们。

笔记也可以帮助您规划攻击。您可以追踪您的黑客进度、已经测试过的功能以及还需要检查的功能。这可以防止您反复测试同样的功能而浪费时间。

笔记的另一个好用处是记录您学到的漏洞信息。要记录每个漏洞的细节，如理论概念、潜在影响、攻击步骤和样本概念证明代码等。随着时间的推移，这将加强您的技术能力和建立一个技术库，如果需要时可以重新查看。

由于这些笔记往往数量庞大且杂乱无章，从一开始就保持有组织是很好的。我喜欢使用Sublime Text（https://www.sublimetext.com/）在纯文本文件中记录笔记，并通过将它们分类到目录中组织它们，为每个目标和主题创建子目录。

例如，您可以为每个目标创建一个文件夹，比如Facebook、Google或Verizon。然后，在每个文件夹中，创建文件以记录有趣的终端、新的和隐藏的特性、侦察结果、草稿报告和POCs。

寻找适合自己的笔记和组织策略。例如，如果您像我一样喜欢将笔记存储为纯文本，可以寻找一个您感觉最舒适的集成开发环境（IDE）或文本编辑器。有些人喜欢使用Markdown格式记录笔记。在这种情况下，Obsidian（https://obsidian.md/）是一个出色的工具，可以有序地显示笔记。如果您喜欢使用思维导图来组织您的思路，可以试试思维导图工具XMind（https://www.xmind.net/）。

将您的漏洞赏金笔记保存在集中的地方，比如外部硬盘或像Google Drive或Dropbox这样的云存储服务中，并不要忘记定期进行备份！

以下是几个帮助您记好笔记的小贴士：
- 记录任何奇怪的行为、新功能、错误配置、小错误和可疑的终端节点，以跟踪潜在的漏洞。
- 记录您的黑客进度、已经测试过的功能以及还需要检查的功能。
- 在学习过程中记录笔记：记录每个漏洞的信息，如其理论概念、潜在影响、攻击步骤和样本POC代码。
- 从一开始就保持笔记的组织性，以便在需要时能够轻松找到它们。
- 找到适合您的笔记和组织过程。您可以尝试使用Sublime Text、Obsidian和XMind等笔记工具，找到您喜欢的工具。

### Web Hacking Reconnaissance

攻击任何目标的第一步是进行侦察，或者简单地说，收集有关目标的信息。侦察是重要的，因为它是您确定应用程序攻击面的方式。为了最有效地寻找漏洞，您需要在决定最有效的方法之前发现攻击目标的所有可能方法。

例如，如果一个应用程序不使用PHP，那么就没有理由为其测试PHP漏洞；如果组织不使用Amazon Web Services（AWS），您就不应该浪费时间尝试破解其存储桶。通过了解目标的工作原理，您可以为发现漏洞建立坚实的基础。侦察技能是区分好的黑客和无效的黑客的关键。