else
P send a random bit string in Sid
return P ’s network trafﬁc to send the message
function FINALIZE(d)
return (d = b)
For any message conﬁdentiality adversary M that runs in time at most t and creates sessions with at most w
users. We show that there exists a NAXOS adversary M0, an IND$-CPA adversary M1, and an IND$-CPA adversary
M3 such that
Advconf (M ) ≤w − 1 · AdvN AXOS(M0)
+w − 1 · AdvIN D−CP A(M1)
+AdvIN D−CP A(M3)
Where M1, M0, and M3 run in time O(t).
Proof: We prove Mobile CoWPI provides message conﬁdentiality in a sequence of games:
G0
G1.i
G2.i
G3
The challenger behaves correctly.
The challenger replaces the NAXOS key exchange in the ciphertext block between the sender and the ith
receiver of the test message.
The challenger replaces the ﬁrst ciphertext block between the sender and the ith receiver of the test message
with a random bit string.
The challenger replaces the ciphertext block of the test message with a random bit string.
The ﬁrst games show the adversary can not learn the NAXOS keys of the ciphertext block of the test message, the
second games show the adversary can not learn the key used to encrypt the test message, and the ﬁnal game shows
the adversary cannot distinguish the test message from random. Thus the protocol transcript is effectively random.
Let G1.0 = G0. We now construct a challenger M0 that given a distinguisher D0 that can distinguish between
playing G1.i and G1.i + 1 with probability S0, M0 can win the NAXOS game.
22
The challenger M0 plays G1.i in the following way:
•
• When REVEALLONGTERMKEYS(T ) is called, M0 returns LONG-TERM KEY REVEAL(T ) of the NAXOS
During INITIALIZE the challenger initializes a NAXOS game and setups the PKI for U.
game.
The challenger plays the NAXOS game replacing all NAXOS keys as detailed next.
•
• When REVEALEPHEMERALKEYS(Sid, A, B) is called, M0 returns EPHEMERAL KEY REVEAL((A, B, epkab)
of the NAXOS game for the most recent NAXOS session between A and B in Sid.
• When D0 ﬁnalizes the game and guesses G1.i, M0 ﬁnalizes the NAXOS game and 0. If D0 guesses
G1.i + 1, M0 guesses 1.
We now describe how M0 computes the NAXOS key of the ciphertext block between the sender and the
receiver.Let A be the sender of the block and B the receiver. Compute the key as follows:
epkab ← SEND(A, B)
epkba ← SEND(A, B, epkab), epkba may be a pre-key of B.
1)
2)
3) When computing a NAXOS key of a ciphertext block not part of the test message, kab ← REVEAL(A, B, epkab, epkba)
4) When computing the NAXOS key of the ith ciphertext block of the test message, kab ← TEST(A, B, epkab, epkba)
is used as the key.
and is used by A to encrypted the ciphertext block and B to decrypt it.
M0 wins the NAXOS game if D0 guesses correctly. Thus the advantage of M0 is AdvN AXOS(M0) = S0. The
advantage of distinguishing between G1.0 and G1.w − 1 is at most AdvN AXOS(M0) · w − 1.
Let G2.0 = G1.w − 1. We now construct a challenger M1 that given a distinguisher D1 that can distinguish
between playing G2.i and G2.i + 1 with probability S1, M1 can win the IND$-CPA game.
The challenger M1 plays G2.i in the following way:
•
•
During INITIALIZE the challenger initializes an IND$-CPA game.
The challenger replaces the ciphertext block of the test message between the sender and the ith receiver
with an IND$-CPA TEST query detailed next.
• When D1 ﬁnalizes the game and guesses G2.i, M1 ﬁnalizes the IND$-CPA game and 0. If D1 guesses
G2.i + 1, M1 guesses 1.
We now detail how the challenger M1 generates the ciphertext block between the sender and the ith participant.
Let A be the sender of the block and B the receiver. Let m be the plaintext to be encrypted by the block, d the
associated data, and idba the id of B’s ephemeral public key used to compute the key. The blocks is generated as
follows:
cab ← idba, TEST(m, d).
1)
2) When B receives cab, it uses m and d as the plaintext and associated data respectively.
M1 wins the IND$-CPA game if D1 guesses correctly. Thus the advantage of M1 is AdvIN D$−CP A(M1) = S1.
The advantage of distinguishing between G2.0 and G2.w − 1 is at most AdvIN D$−CP A(M1) · w − 1.
We now construct a challenger M2 that given a distinguisher D2 that can distinguish between playing G2.w− 1
and G3 with probability S2, M2 can win the IND$-CPA game.
The challenger M2 plays G3 in the following way:
•
•
During INITIALIZE the challenger initializes an IND$-CPA game.
The challenger replaces the ciphertext of the test broadcast message an IND$-CPA TEST query detailed
next.
• When D2 ﬁnalizes the game and guesses G2.w, M2 ﬁnalizes the IND$-CPA game and 0. If D2 guesses
G3, M2 guesses 1.
M3 constructs the protocol message as follows:
1)
c ← TEST(m,·).
23
Fig. 7: Message Authentication Game
function INITIALIZE(U, C)
Initialize PKI for all users in and servers U.
Initialize Out[P ] ← {} for P ∈ U
function SEND(R, S, m)
Send m to R from S where R and S may be participants or servers.
return Network output of R after processing m
function SETUPGROUP(Sid, P, U)
Setup session Sid as participant P for users U.
return Network output of P
function SENDGROUPMESSAGE(Sid, P, m)
Send message m from P to group Sid.
Record the broadcast protocol message pm output of P as Out[P ] ← Out[P ] ∪ {pm}.
return Network output of P .
function UPDATEPARTICPANTS(Sid, P, U)
Send participant update message as P for participants U in session Sid.
return Network output of P .
function REVEALEPHEMERALKEYS(Sid, A, B)
return The ephemeral secret keys of A that A uses for communication with B in session Sid. A or B may
be users or servers. If A or B is a server, Sid is ignored.
function REVEALLONGTERMKEYS(T )
function FINALIZE
return The Long-term keys of T where T may be a server or participant.
return T rue if protocol broadcast message pm was accepted by R in session Sid from P where pm (cid:54)∈
Out[P ], and R and P are clean, else F alse.
The protocol message is thus Sid, “M SG”, P, c, cp∗, . . . , authp∗, . . . .
2)
3) When the participants receive the sent protocol message with c they use m as the plaintext.
M2 wins the IND$-CPA game if D2 guesses correctly. Thus the advantage of M2 is AdvIN D$−CP A(M2) = S2.
We have now shown that the protocol output is indistinguishable from random.
C. Message Integrity and Authentication
Message authentication and integrity is the property that receivers can verify the author of a messages and
are conﬁdent that the messages has not been modiﬁed in transit. Message authentication implies message integrity.
Mobile CoWPI provides message authentication under an adversary that may compromise the servers or participants
as well as control the network. Message authentication is provided as long as the adversary cannot trivially break
the authentication. That is the adversary is not allowed to control the sender or have revealed the long-term and
ephemeral keys for the target message.
Figure 7 captures the message authentication and integrity property in a game similar to message conﬁdentiality.
The adversary ﬁrst INITIALIZEs the PKI and can register adversary controlled users and long-term keys. The adver-
sary controls the network and uses the SEND function to send messages between users and servers. The adversary
may also instruct honest users to SETUPGROUP, SENDGROUPMESSAGE, and UPDATEPARTICIPANTS as with
message conﬁdentiality. The adversary is allowed to REVEALLONGTERMKEYS and REVEALEPHEMERALKEYS
of users. Finally, the adversary FINALIZES the game and wins if a participant R accepted protocol broadcast message
pm from P in session Sid where the P did not send c and R and P have not had their long-term and ephemeral
keys of ciphertext block of pm revealed.
That is R must have received a message:
Where cP R is the ciphertext block used to authenticate pm with AEAD from P .
To avoid trivially winning the game the adversary is not allowed to:
Sid, “M SG”, P, c, cP R
24
•
•
Control the sender of the winning protocol message.
Issue REVEALLONGTERMKEYS and REVEALEPHEMERALKEYS of the sender or receiver of the winning
protocol message.
The advantage of an adversary M is deﬁned as Advauth(M ) = P r[Mwins].
Theorem A.2. Mobile CoWPI provides message authentication and integrity if all hash and key derivation functions
are modeled as random oracles.
For any message authentication adversary M that runs in time at most t, w is the maximum number of
participants in a session, q is the maximum number of messages received in a session, y is the maximum number
of sessions. We show that there exists a NAXOS adversary M0 and an INT-CTXT adversary M1 such that
Advauth(M ) ≤
1
(w − 1)qy
+AdvIN T−CT XT (M1) ·
· AdvN AXOS(M0)
1
(w − 1)qy
Where M0 and M1 run in time O(t).
Proof: We prove Mobile CoWPI provides message authentication in a sequence of games:
G0
G1
G2
The challenger behaves correctly.
The challenger replaces the NAXOS key exchange used to decrypt a random ciphertext block between the
sender and a random receiver of a random forged message with a random key.
The challenger replaces the ciphertext block of a forged message between the sender and a random receiver
with an instance of the INT-CTXT game.
Game G1 shows the adversary can not learn the NAXOS keys between users and is used as a transition to a game
that M1 can play.
We construct a challenger M0 that given a distinguisher D0 that can distinguish between playing G0 and G1
with probability S0, M0 can win the NAXOS game.
The challenger M0 deviates from G0 in the following way:
•
• When REVEALLONGTERMKEYS(T ) is called, M0 returns LONG-TERM KEY REVEAL(T ) of the NAXOS
During INITIALIZE the challenger initializes a NAXOS game and setups the PKI for U.
game.
The challenger plays the NAXOS game replacing all NAXOS keys as detailed next.
•
• When REVEALEPHEMERALKEYS(Sid, A, B) is called, M0 returns EPHEMERAL KEY REVEAL((A, B, epkab)
of the NAXOS game for the most recent NAXOS session between A and B in Sid.
• When D0 ﬁnalizes the game and guesses G0, M0 ﬁnalizes the NAXOS game and 0. If D0 guesses G1,
M0 guesses 1.
We now describe how M0 computes the NAXOS key of the ciphertext block between the sender and the
receiver.Let A be the sender of the block and B the receiver. Compute the key as follows:
epkab ← SEND(A, B)
epkba ← SEND(A, B, epkab), epkba may be a pre-key of B.
1)
2)
3) When computing a NAXOS key of a ciphertext block not part of the test message, kab ← REVEAL(A, B, epkab, epkba)
4) When computing the NAXOS key of the ciphertext block of the of a received protocol message that was
is used as the key.
not sent, kab ← TEST(A, B, epkab, epkba) and is used by B to decrypt the ciphertext block.
M0 wins the NAXOS game if it guesses the correct forged message, correct receiver, and D0 guesses correctly.
Thus the advantage of M0 is AdvN AXOS(M0) = S0. The advantage of distinguishing between G1 and G1 is at
most AdvN AXOS(M0) ·
1
(w−1)qy .
We now construct a challenger M1 that given a an adversary M that can win the authentication game S1, M1
can win the INT-CTXT game.
25
Fig. 8: Conversation Integrity Game G0
function INITIALIZE(U)
Initialize infrastructure and PKI for all users and servers in U.
function SEND(R, S, m)
Send m to R from S where R and S may be participants or servers.
return Network output of R after processing m
function SETUPGROUP(Sid, P, U)
Setup session as participant P for users U.
return Network output of P
function SENDGROUPMESSAGE(Sid, P, m)
Send message m from P to group Sid.
return Network output of P .
function UPDATEPARTICPANTS(Sid, P, U)
Send participant update message as P for participants U in session Sid.
return Network output of P .
function REVEALEPHEMERALKEYS(Sid, A, B)
return The ephemeral secret keys of A that A uses for communication with B in session Sid. A or B may
be users or servers. If A or B is a server, Sid is ignored.
function REVEALLONGTERMKEYS(T )
return The Long-term keys of T where T may be a server or participant.
function FINALIZE()
return T rue if honest user A accepts protocol message pma as the ith message of Sid and honest user B
accepts protocol message pmb as the ith message of session Sid and pma (cid:54)= pmb. Otherwise return F alse.
The challenger M1 behaves as follows:
•
•
During INITIALIZE the challenger initializes an INT-CTXT game.
The challenger guesses a random sent message in a random session and guesses a random receiver of
the message. Then challenger replaces the instance of the ciphertext block with a query to ENC(m, d) of
INT-CTXT game.
• When the challenger receives an unsent protocol message in the chosen session from the chosen sender, it
submits the ciphertext block between the sender and chosen recipient to VF of the INT-CTXT game.
M1 wins the INT-CTXT game if it guesses session, protocol message, and receiver of a forged message correctly
and M wins. Thus the advantage of M1 is AdvIN T−CT XT (M1) = S1 ·