# 关键概念
> 原文：
当我们谈论 NoSQL 或分布式系统时，让我们看看一些关键概念
### CAP 定理
在 2000 年 ACM 的 PODC 研讨会上，Eric Brewer 提出了所谓的 CAP-theorem(CAP-theorem ),这是一个被大型网络公司和 NoSQL 社区广泛采用的主题。CAP 首字母缩写代表 **C** 一致性， **A** 可用性&T6】P 分割公差。
*   **一致性**
    它指的是系统在执行后的一致性。当一个源所做的写操作对该共享数据的所有读者都可用时，分布式系统被称为一致的。不同的 NoSQL 系统支持不同级别的一致性。
*   **可用性**
    它是指系统如何应对由于硬件和软件故障导致的不同系统的功能丧失。高可用性意味着当系统的某个部分由于故障或升级而停机时，系统仍然可以处理操作(读取和写入)。
*   **分区公差**
    它是系统在网络分区的情况下继续运行的能力。当一个故障导致两个或多个网络孤岛，系统暂时或永久无法通过孤岛相互通信时，就会发生网络分区。
布鲁尔声称，在共享数据系统中，人们最多只能选择这三个特征中的两个。CAP 定理指出，出于一致性、可用性和分区容差，只能对两个选项进行选择。大规模应用中越来越多的用例倾向于重视可靠性，这意味着可用性和冗余比一致性更有价值。因此，这些系统很难满足酸性。他们通过放松一致性要求(即最终一致性)来实现这一点。
**最终一致性**意味着随着时间的推移，所有的读者都将看到写入:“在稳定状态下，系统最终将返回最后写入的值”。因此，在更新过程中，客户端可能会面临数据不一致的状态。例如，在复制的数据库中，更新可以进行到一个节点，该节点将最新版本复制到包含修改的数据集的副本的所有其他节点，使得副本节点最终将具有最新版本。
NoSQL 系统支持不同级别的最终一致性模型。例如:
*   **读自己写的一致性**
    客户端将在更新完成后立即看到它们。读取操作可能会命中除写入节点之外的节点。但是，他们可能不会立即看到其他客户端的更新。
*   **会话一致性**
    客户端将在会话范围内看到对其数据的更新。这通常表示读取和写入发生在同一个服务器上。使用相同节点的其他客户端将收到相同的更新。
*   **偶然的一致性**
    如果以下条件成立，则系统提供因果一致性:由潜在因果关系相关的写操作被系统的每个进程按顺序看到。不同的进程可能以不同的顺序观察并发写入
如果对相同数据分区的并发更新不太可能，并且如果客户端不立即依赖于读取由它们自己或由其他客户端发出的更新，则最终一致性是有用的。
根据为系统(或部分系统)选择的一致性模型，确定请求的路由位置，例如复制副本。
**瓶盖替代品图解**
| 选择 | 特征 | 例子 |
| Consistency + Availability(放弃分区) | 2-phase commits 缓存失效协议 | Single-site databases Cluster databases 轻量级目录访问协议 xFS 文件系统 |
| Consistency + Partition tolerance(丧失可用性) | Pessimistic locking 使少数分区不可用 | 分布式数据库分布式锁定多数协议 |
| 可用性+分区容差(丧失一致性) | expirations/leases 冲突解决乐观 | DNSWeb 缓存 |
### 分布式系统中数据的版本控制
当数据分布在不同的节点上时，可以同时在不同的节点上对其进行修改(假设实施了严格的一致性)。并发更新的冲突解决出现了问题。一些流行的冲突解决机制有
*   **时间戳**
    这是最明显的解决方案。您根据时间顺序对更新进行排序，并选择最新的更新。然而，这依赖于基础设施不同部分之间的时钟同步。当系统的各个部分分布在不同的地理位置时，这变得更加复杂。
*   **乐观锁定**
    您将一个唯一的值(如时钟或计数器)与每次数据更新相关联。当客户机想要更新数据时，它必须指定需要更新哪个版本的数据。这意味着您需要跟踪数据版本的历史。
*   **矢量时钟**
    向量时钟被定义为来自每个节点的时钟值的元组。在分布式环境中，每个节点维护这样的时钟值的元组，该元组表示节点本身及其对等体/副本的状态。时钟值可以是从本地时钟或版本号导出的真实时间戳
![alt_text](img/48f3a4fb5ad556471eb7c045da0c56e2.png "Vector Clocks")
矢量时钟插图
与其他冲突解决机制相比，矢量时钟具有以下优势
1.  不依赖同步时钟
2.  临时推理不需要修订号的总排序
不需要在不同的节点上存储和维护数据的多个版本。
### 分割
当数据量超过单个节点的容量时，我们需要考虑拆分数据，为负载平衡和灾难恢复创建副本。根据基础设施的动态性，我们有几种方法可以采用。
1.  **内存缓存**
    这些是分区的内存数据库，主要用于临时数据。这些数据库通常被用作传统 RDBMS 的前台。最常用的数据从 rdbms 复制到内存数据库中，以便于快速查询，并减轻后端数据库的负担。一个非常常见的例子是 memcached 或 couchbase。
2.  **聚类**