title:From Byzantine Replication to Blockchain: Consensus is Only the Beginning
author:Alysson Bessani and
Eduardo Alchieri and
João Sousa and
Andr&apos;e Oliveira and
Fernando Pedone
2020 50th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
From Byzantine Replication to Blockchain:
Consensus is only the Beginning
Alysson Bessani∗, Eduardo Alchieri†, Jo˜ao Sousa∗, Andr´e Oliveira∗, Fernando Pedone‡
∗LASIGE, Faculdade de Ciˆencias, Universidade de Lisboa, Portugal
†Departamento de Ciˆencia da Computac¸˜ao, Universidade de Bras´ılia, Brasil
‡Universit`a della Svizzera Italiana, Lugano, Switzerland
Abstract—The popularization of blockchains leads to a resur-
gence of interest in Byzantine Fault-Tolerant (BFT) state machine
replication protocols. However, much of the work on this topic
focuses on the underlying consensus protocols, with emphasis
on their lack of scalability,
leaving other subtle limitations
unaddressed. These limitations are related to the effects of
maintaining a durable blockchain instead of a write-ahead log
and the requirement for reconﬁguring the set of replicas in
a decentralized way. We demonstrate these limitations using a
digital coin blockchain application and BFT-SMART, a popular
BFT replication library. We show how they can be addressed
both at a conceptual level, in a protocol-agnostic way, and by
implementing SMARTCHAIN, a blockchain platform based on
BFT-SMART. SMARTCHAIN improves the performance of our
digital coin application by a factor of eight when compared
with a naive implementation on top of BFT-SMART. Moreover,
SMARTCHAIN achieves a throughput 8× and 33× better than
Tendermint and Hyperledger Fabric, respectively, when ensuring
strong durability on its blockchain.
I. INTRODUCTION
Recent years have seen a resurgence of interest in state ma-
chine replication (SMR) protocols, speciﬁcally in the context
of permissioned blockchain systems [1]–[4]. Such protocols
are used to maintain a set of stateful replicas, which execute
the same set of requests in the same order, deterministically.
Byzantine Fault-Tolerant (BFT) state machine replication pro-
tocols such as PBFT [5] and its descendants [6]–[11] are
particularly relevant, as they implement the model properties
even in the presence of an adversary that may be able to
corrupt and control a fraction of the replicas. Such protocols
are a direct ﬁt for permissioned blockchains [12], where
every peer/replica is known and approved to participate in the
system. They are also a fundamental building block for some
recent high-performance permissionless or open blockchains
(e.g., [13]–[16]) that elect a subset of peers to be a transaction
processing committee running the BFT protocol.
Most of the recent research on BFT replication applied
to blockchain has focused on the scalability of the under-
lying consensus protocol [17]–[24], as most BFT protocols
described before were typically designed considering few
replicas. Nevertheless, there are other subtle but important
differences among the BFT state machine replication approach
and blockchains. While many replicated state machine pro-
tocols build an internal log of executed operations for state
synchronization after a leader change or a replica recovery, a
blockchain system differs from traditional SMR as such log
must (1) be written to stable storage to ensure durability, (2)
include the result of the transactions for auditing purposes, and
(3) be self-veriﬁable by any third party. Another key difference
is that while the vast majority of the literature about BFT SMR
assumes a static set of processes, in a blockchain consortium,
peers are expected to join and leave at any time, without the
need for an additional trusted party.
In this paper, we show that these differences lead to inherent
limitations, which we demonstrate by designing and running
a simple digital coin blockchain application on top of BFT-
SMART [25], a well-known BFT replication library. Our
experiments show that depending on how the blockchain is
implemented, and how much we are willing to trade in terms of
blockchain features for better integration with the SMR library,
the system throughput can go from 1.7k to 14.8k txs/sec.
Furthermore, we identify subtle issues related with trans-
actions persistence and blockchain forks. More speciﬁcally,
we show that it is possible to lose a sufﬁx of the committed
transaction history in case of a full crash of the system. This
calls into question the ﬁnality of permissioned blockchains
and makes them weaker in terms of durability than the
centralized transactional systems they are supposed to replace.
Additionally, we observe that blockchain forks might appear
as a side effect of run-time consortium reconﬁgurations since
compromised keys from past members of the consortium can
be used to generate such forks.
We show that
these limitations can be addressed at a
conceptual level in a protocol-agnostic way, by describing
novel mechanisms for efﬁciently logging transactions and their
immutable blocks and
results as a self-veriﬁable chain of
reconﬁguring the replica set in a secure and decentralized
way. These mechanisms are independent from the consensus
protocol employed to order transactions, being thus general
enough to be potentially useful for any blockchain system.
The
proposed
implemented
techniques were
on
SMARTCHAIN, a blockchain platform based on BFT-
SMART. SMARTCHAIN improves the performance of the
digital coin application by a factor of 8 when compared with
running it on top of BFT-SMART, and provides a performance
8× and 33× better than existing comparable production-level
blockchains like Tendermint [3] and Hyperledger Fabric [1],
respectively.
In summary, this paper makes the following contributions:
1) It identiﬁes three fundamental limitations of running
978-1-7281-5809-9/20/$31.00 ©2020 IEEE
DOI 10.1109/DSN48063.2020.00057
424
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:27:46 UTC from IEEE Xplore.  Restrictions apply. 
blockchain applications on top of “classical” BFT SMR
protocols: one related with potential performance issues,
and two related with the gap between the state machine
replication approach and blockchain requirements;
2) It introduces solutions for addressing these limitations,
namely: an efﬁcient design for transforming SMR logs
in blockchains, a protocol for increasing the durability
guarantee of the system, and new strategies for recon-
ﬁguring the replica set without opening breaches for
blockchain forks;
3) It describes SMARTCHAIN, an experimental permis-
sioned blockchain platform corresponding to the im-
plementation of these techniques, and its evaluation
showing it achieves signiﬁcant performance gains when
compared with similar systems.
The remainder of this paper is organized as follows. Sec-
tion II presents the relevant background on blockchain and
state machine replication, including BFT-SMART. Section III
presents our system and adversary model. The gap between
the SMR and blockchain is discussed in Section IV. The
SMARTCHAIN platform is described in Section V. Section VI
presents the experimental evaluation of SMARTCHAIN. Fi-
nally, some related works and concluding remarks are pre-
sented in Sections VII and VIII, respectively.
a valid block [28] (or an equivalent mechanism, e.g., Proof-of-
Stake [19], [31]) that is then disseminated to the network. The
key idea behind the permissionless consensus, employed in
Bitcoin and Ethereum, is to prevent an adversary from creating
new blocks faster than honest participants. The ﬁrst participant
that ﬁnds such a solution gets to append its block to the
ledger on all correct peers. Therefore, intuitively, as long as the
adversary controls less than half of the total computing power
present in the network, it is unable to tamper with the ledger.1
This phenomenon also enables participants to establish a total
order on the transactions by adopting the longest ledger with
a valid PoW as the de facto transaction history.
The PoW mechanism makes permissionless blockchains
slow and extremely energy demanding [29]. By contrast,
permissioned blockchains do not expend as many resources
and are able to reach better transaction latency and throughput.
This is because nodes participating in this type of ledgers
execute a traditional BFT consensus (e.g., PBFT [5]) to
decide on the next block to be appended to the ledger [12].
However, this approach requires a consortium of nodes that
know each other for executing the consensus protocol. In this
scenario, the bound on the adversary’s power is structural, not
computational, i.e., safety is ensured as long as the adversary
controls less than a fraction of the nodes (usually a third).
II. BACKGROUND
B. State Machine Replication
A. Blockchain
The concept of blockchain was introduced by Bitcoin to
solve the double spending problem associated with cryptocur-
rencies in open peer-to-peer networks [26]. A blockchain is an
open database that maintains a distributed ledger comprised by
a growing list of records called blocks, each of them containing
transactions executed by the system. This authenticated data
structure [27] consists of a sequence of blocks in which each
one contains the cryptographic hash of the previous block in
the chain. This ensures that block j cannot be forged without
also forging all subsequent blocks j + 1...i.
A distributed system implements a robust transaction ledger
(i.e., a blockchain) if it satisﬁes the following two properties
(adapted from [28]):
● Persistence: If a correct node reports a ledger that con-
tains a transaction tx in a block more than k blocks away
from the end of the ledger, then tx will eventually be
reported in the same position in the ledger by any honest
node of the system.
● Liveness: If a transaction is provided as input to all correct
nodes, then there exists a correct node who will eventually
report this transaction at a block more than k blocks away
from the end of the ledger.
Blockchain systems satisfy these properties abiding to either
the permissionless or permissioned models [29]. Permission-
less blockchains are maintained across peer-to-peer networks
in a completely decentralized and anonymous manner [26],
[30]. In order to determine the next block to append to the
ledger, peers need to execute a Proof-of-Work (PoW) to create
In the state machine replication approach [32], [33], an
arbitrary number of client processes issue requests to a set
of replicas. These replicas implement a stateful service that
receives these requests and updates its state accordingly to
the operation contained in the clients’ requests. Once enough
replicas transmit matching replies to the client, its invocation
returns the result computed by the service.
The goal of this technique is to make the service state
maintained by each replica evolve in a consistent way. In order
to achieve this behavior, it is necessary to satisfy the following
requirements [33]:
1) Any two correct replicas r and r′ start with state s0;
2) If any two correct replicas r and r′ apply operation o to
state S, both r and r′ will obtain state S′;
3) Any two correct replicas r and r′ execute the same
sequence of operations o0, ..., oi.
The ﬁrst two requirements can be easily fulﬁlled if the
service is deterministic, but
the last one requires a total
order broadcast primitive, which is equivalent to solving the
consensus problem [34].
C. The BFT-SMART Library
BFT-SMART [25] is an open-source library that imple-
ments a modular SMR protocol [35], as well as features such
as state transfer and group reconﬁguration. In this section
we describe these features as they are fundamental for any
practical deployment of SMR.
1In fact the speed of the network also affects the maximum adversarial
power tolerated, which is typically assumed to be much smaller than 50% [28].
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:27:46 UTC from IEEE Xplore.  Restrictions apply. 
425
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:6)(cid:7)(cid:9)(cid:7)
(cid:10)(cid:11)(cid:8)(cid:12)(cid:9)(cid:13)(cid:8)
(cid:2)(cid:18)(cid:19)(cid:22)(cid:23)(cid:24)
(cid:4)(cid:11)
(cid:4)(cid:12)
(cid:4)(cid:13)
(cid:4)(cid:16)
(cid:4)(cid:7)(cid:9)(cid:4)(cid:9)(cid:10)(cid:3)
(cid:6)(cid:7)(cid:8)(cid:5)(cid:3)
(cid:1)(cid:2)(cid:2)(cid:3)(cid:4)(cid:5)
Fig. 1: BFT-SMART ordering message pattern.
1) SMR protocol: BFT-SMART uses the Mod-SMaRt pro-
tocol to implement the SMR properties described in Sec-
tion II-B. Mod-SMaRt is a modular SMR protocol that works
by executing a sequence of consensus instances based on the
BFT consensus algorithm described in [36]. During normal
operation, the resulting communication pattern is similar to
the well-known PBFT protocol [5] (Figure 1). Each consensus
instance i begins with a leader replica proposing a batch
of client operations to be decided within that instance. All
replicas that receive the proposal verify if its sender is correct
by exchanging WRITE messages containing a cryptographic
hash of the proposed batch with all other replicas. If a replica
receives WRITE messages with the same hash from more than
two thirds of the replicas, it sends a signed ACCEPT message
to all others containing this hash. If a replica receives ACCEPT
messages for the same hash from more than two thirds of the
replicas, it delivers the corresponding batch as the decision for
this consensus instance, alongside a proof comprised by the
set of signed messages received in this last phase.
If the leader replica is faulty and/or the network experiences
a period of asynchrony, Mod-SMaRt may trigger a synchro-
nization phase to elect a new leader for the consensus instances
and synchronize all correct replicas [35].
2) State transfer: BFT-SMART also allows crashed repli-
cas to recover and resume execution. This is done by using an
intermediate layer between the Mod-SMaRt protocol and the
replicated service, which is responsible for triggering service
checkpoints and managing the request log.
The library provides two state transfer implementations in
this layer. One uses an approach similar to PBFT that consists
of storing the request log in memory which is periodically
truncated after a snapshot of the service state is created. A
recovering replica obtains the state by probing other replicas
about their last completed consensus instance and asking f +1
replicas to send the version of the state up to that instance.2
The other implementation is the durability layer described
in [37]. When this layer is enabled, BFT-SMART stores the
request log into stable storage to preserve the service state even
if all replicas fail by crashing. In order to write requests to disk
as efﬁciently as possible, delivered requests are written to the
durable log in parallel with their execution by the service. To
better exploit the large bandwidth of stable storage devices,
2In order to render this mechanism as efﬁcient as possible, only one replica
sends the entire state, while other f replicas send only a hash of it [5].
426
the system tries to write multiple batches at once, diluting
the cost of a synchronous write among many requests. More
speciﬁcally, the latency of writing one or ten request batches
in the stable log is similar, yet the throughput would ultimately
increase roughly by a factor of 10 in the latter [37].
This durability layer also enables replicas to execute check-
points at different moments of their execution and a collabo-
rative state transfer. These features alleviate the performance
degradation caused by checkpoint generation and state transfer
when the system is under heavy load.
3) Group Reconﬁguration: BFT-SMART provides mecha-
nisms for reconﬁguring the replica set. In particular, the recon-
ﬁguration mechanism assumes the existence of a distinguished
trusted client known as the View Manager, which uses the
aforementioned state machine protocol to issue updates to
the replica set. To change the current replica set (view) of
the system, the View Manager issues a signed reconﬁguration
request that is submitted just like any other client operation.
However, this request is never delivered to the application
and instead is used to update the view. Since these special
operations are also totally ordered, all replicas will observe
the same updates to the view along the system’s lifespan.
Once the View Manager receives conﬁrmation from the
current replicas that its update was executed, it notiﬁes the
joining replicas that they can start participating in the repli-
cation protocol. At this point, they invoke the state transfer
protocol
to retrieve the latest application state from other
replicas (as described previously) before actively participating
in the replication protocol. Once these replicas receive and
install the state, they are ready to process new requests.
III. SYSTEM MODEL
We consider a fully-connected distributed system composed
by a universe of processes U that can be divided in two
subsets: an inﬁnite set of replicas Π = {r1, r2, ...}, and an
inﬁnite set of clients C = {c1, c2, ...}. Clients access the
blockchain/SMR system maintained by a subset of the replicas
(a view) by sending their transactions to be executed and
appended to the blockchain maintained by these replicas. Each
process (client or server) of the system has a unique identiﬁer.
Servers and clients are prone to Byzantine failures. Byzantine
processes are said to be faulty. A process that is not faulty
is said to be correct. Each process has a permanent public-
private key pair and has access to cryptographic functions for
digital signatures and secure hashes. We assume all processes
can obtain the public keys of other processes by standard
means. Moreover, there are authenticated fair point-to-point
links connecting every pair of processes.
We assume further an eventually synchronous system
model [38]. This means the network may behave asyn-
chronously until some unknown instant T after which it
becomes synchronous, i.e., time bounds for computation and
communication shall be enforced after T .
a) Dynamic replica groups: During system execution, a
sequence of views is installed to account for replicas joining
and leaving. Process arrivals follow the inﬁnite arrival model
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:27:46 UTC from IEEE Xplore.  Restrictions apply. 
with bounded (and unknown) concurrency [39]. We assume
a non-empty initial view vinit known to all processes (e.g.,
which is written in the genesis block, as will be discussed
in later sections). The system current view cv represents the
most up-to-date view installed in the system, with its replicas
being the only ones that may participate in the execution of the
ordering protocol. We denote by cv.n the number of replicas
in cv and cv.f the number of replicas in cv allowed to fail,
being cv.f ≤ ⌊ cv.n−1
⌋. A replica that asks to leave the system