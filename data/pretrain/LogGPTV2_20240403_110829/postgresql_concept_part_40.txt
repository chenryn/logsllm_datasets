Name
MOVE—Movescursorposition
MOVE[direction][count]{IN|FROM}cursor
Description
MOVEallowsausertomovecursorpositionaspecifiednumberofrows. MOVEworkslikethe
FETCHcommand,butonlypositionsthecursoranddoesnotreturnrows.
RefertoFETCH fordetailsonsyntaxandusage.
Notes
MOVEisaPostgreslanguageextension.
RefertoFETCH for adescriptionof validarguments. RefertoDECLARE todefineacursor.
RefertoBEGIN,COMMIT,andROLLBACK forfurtherinformationabouttransactions.
Usage
Setupanduseacursor:
380 APPENDIXD. REFERENCEMANUAL
BEGIN WORK;
DECLARE liahona CURSOR FOR
SELECT * FROM films;
-- Skip first 5 rows:
MOVE FORWARD 5 IN liahona;
MOVE
-- Fetch 6th row in the cursor liahona:
FETCH 1 IN liahona;
FETCH
code | title | did | date_prod | kind | len
-------+--------+-----+-----------+--------+-------
P_303 | 48 Hrs | 103 | 1982-10-22| Action | 01:37
(1 row)
-- close the cursor liahona and commit work:
CLOSE liahona;
COMMIT WORK;
Compatibility
SQL92
There is no SQL92 MOVE statement. Instead, SQL92 allows one to FETCH rows from an
absolutecursorposition,implicitlymovingthecursortothecorrectposition.
D.62 NOTIFY
Name
NOTIFY—Signalsallfrontendsandbackendslisteningonanotifycondition
NOTIFYname
Inputs
notifyname Notifyconditiontobesignaled.
Outputs
NOTIFY Acknowledgementthatnotifycommandhasexecuted.
Notifyevents Eventsaredeliveredtolisteningfrontends;whetherandhoweachfrontendappli-
cationreactsdependsonitsprogramming.
D.62. NOTIFY 381
Description
The NOTIFY command sends a notify event to each frontend application that has previously
executedLISTENnotifynameforthespecifiednotifyconditioninthecurrentdatabase.
The information passedto the frontend for a notify eventincludesthe notify condition name
andthenotifyingbackendprocess’sPID.Itisuptothedatabasedesignertodefinethecondition
namesthatwillbeusedinagivendatabaseandwhateachonemeans.
Commonly, the notify condition nameisthesameasthe nameof some tablein thedatabase,
andthenotifyeventessentiallymeans“Ichangedthistable,takealookatittoseewhat’snew”.
But no such association is enforced by the NOTIFY and LISTEN commands. For example, a
databasedesignercoulduseseveraldifferentconditionnamestosignaldifferentsortsofchanges
toasingletable.
NOTIFYprovidesasimpleformofsignalorIPC(interprocesscommunication)mechanismfor
acollectionofprocessesaccessingthesamePostgresdatabase. Higher-levelmechanismscanbe
builtbyusingtablesinthedatabasetopassadditionaldata(beyondamereconditionname)from
notifiertolistener(s).
When NOTIFY is used to signal the occurrence of changes to a particular table, a useful
programmingtechniqueistoputtheNOTIFYinarulethatistriggeredbytableupdates. Inthis
way,notificationhappensautomaticallywhenthetableischanged,andtheapplicationprogrammer
can’taccidentallyforgettodoit.
NOTIFY interacts with SQL transactions in some important ways. Firstly, if a NOTIFY is
executedinsideatransaction,thenotifyeventsarenotdelivereduntilandunlessthetransactionis
committed. Thisisappropriate,sinceifthetransactionisabortedwewouldlikeallthecommands
withinittohavehadnoeffect,includingNOTIFY.Butitcanbedisconcertingifoneisexpecting
the notify events to be delivered immediately. Secondly, if a listening backend receives a notify
signalwhileitiswithinatransaction,thenotifyeventwillnotbedeliveredtoitsconnectedfrontend
untiljust afterthe transactioniscompleted(eithercommitted or aborted). Again, thereasoning
isthat if a notify were deliveredwithin a transactionthat was lateraborted, one would want the
notificationtobeundonesomehow—butthebackendcannot"takeback"anotifyonceithassent
ittothefrontend. Sonotifyeventsareonlydeliveredbetweentransactions. Theupshotofthisis
thatapplicationsusingNOTIFYforreal-timesignalingshouldtrytokeeptheirtransactionsshort.
NOTIFY behaves like Unix signals in one important respect: if the same condition name is
signaledmultipletimesinquicksuccession,recipientsmaygetonlyonenotify eventfor several
executionsof NOTIFY.Soitisabadideatodependonthenumberofnotifiesreceived. Instead,
useNOTIFYtowakeupapplicationsthatneedtopayattentiontosomething,anduseadatabase
object(suchasasequence)tokeeptrackofwhathappenedorhowmanytimesithappened.
ItiscommonforafrontendthatsendsNOTIFYtobelisteningonthesamenotifynameitself.
Inthatcaseitwillgetbackanotifyevent,justlikealltheotherlisteningfrontends. Dependingon
theapplicationlogic,thiscouldresultinuselesswork—forexample,re-readingadatabasetable
tofindthesameupdatesthatthatfrontendjustwroteout. InPostgres6.4andlater,itispossible
toavoidsuchextraworkbynoticingwhetherthenotifyingbackendprocess’sPID(suppliedinthe
382 APPENDIXD. REFERENCEMANUAL
notifyeventmessage)isthesameasone’sownbackend’sPID(availablefromlibpq). Whenthey
arethesame,thenotifyeventisone’sownworkbouncingback,andcanbeignored. (Despitewhat
wassaidintheprecedingparagraph,thisisasafetechnique. Postgreskeepsself-notifiesseparate
fromnotifiesarrivingfromotherbackends,soyoucannotmissanoutsidenotifybyignoringyour
ownnotifies.)
Notes
namecanbeanystringvalidasaname;itneednotcorrespondtothenameofanyactualtable. If
name isenclosedindouble-quotes,itneednotevenbeasyntacticallyvalidname,butcanbeany
stringupto31characterslong.
Insomepreviousreleasesof Postgres,namehadto beenclosedin double-quoteswhenitdid
notcorrespondtoanyexistingtablename,evenifsyntacticallyvalidasaname. Thatisnolonger
required.
In Postgres releases prior to 6.4, the backend PID deliveredin a notify message was always
the PID of the frontend’s own backend. So it was not possible to distinguish one’s own notifies
fromotherclients’notifiesinthoseearlierreleases.
Usage
Configureandexecutealisten/notifysequencefrompsql:
LISTEN virtual;
NOTIFY virtual;
Asynchronous NOTIFY ’virtual’ from backend with pid ’8448’ received.
Compatibility
SQL92
ThereisnoNOTIFYstatementinSQL92.
D.63 pgaccess
Name
pgaccess—Postgresgraphicalinteractiveclient
pgaccess[dbname]
Inputs
dbname Thenameofanexistingdatabasetoaccess.
D.63. PGACCESS 383
Outputs
Description
pgaccessprovidesagraphicalinterfaceforPostgreswhereyoucanmanageyourtables,editthem,
definequeries,sequencesandfunctions.
AnotherwayofaccessingPostgresthroughtclistousepgtclsh orpgtksh.
pgaccesscan:
• Openanydatabaseonaspecifiedhostatthespecifiedport,usernameandpassword.
• ExecuteVACUUM.
• Savepreferencesin˜/.pgaccessrcfile.
Fortables,pgaccesscan:
• Openmultipletablesforviewing,maxnrecords(configurable).
• Resizecolumnsbydraggingtheverticalgridlines.
• Wraptextincells.
• Dynamicallyadjustrowheightwhenediting.
• Savetablelayoutforeverytable.
• Import/exporttoexternalfiles(SDF,CSV).
• Usefiltercapabilities;enterfilterlikeprice>3.14.
• Specifysortorder;entermanuallythesortfield(s).
• Editinplace;doubleclickthetextyouwanttochange.
• Deleterecords;pointtotherecord,pressDelkey.
• Addnewrecords;savenewrowwithright-button-click.
• Createtableswithanassistant.
• Renameanddelete(drop)tables.
• Retrieveinformationontables,includingowner,fieldinformation,indices.
Forqueries,pgaccesscan:
• Define,editandstoreuserdefinedqueries.
• Saveviewlayouts.
384 APPENDIXD. REFERENCEMANUAL
• Storequeriesasviews.
• Executewithoptionaluserinputparameters;e.g.,select*frominvoiceswhereyear=[parameter
"Yearofselection"].
• Viewanyselectqueryresult.
• Runactionqueries(insert,update,delete).
• Constructqueriesusingavisualquerybuilderwithdrag&dropsupport,tablealiasing.
Forsequences,pgaccesscan:
• Definenewinstances.
• Inspectexistinginstances.
• Delete.
Forviews,pgaccesscan:
• Definethembysavingqueriesasviews.
• Viewthem,withfilteringandsortingcapabilities.
• Designnewviews.
• Delete(drop)existingviews.
Forfunctions,pgaccesscan:
• Define.
• Inspect.
• Delete.
Forreports,pgaccesscan:
• Generatesimplereportsfromatable(betastage).
• Changefont,sizeandstyleoffieldsandlabels.
• Loadandsavereportsfromthedatabase.
• Previewtables,samplepostscriptprint.
Forforms,pgaccesscan:
• Openuserdefinedforms.
D.64. PGTCLSH 385
• Useaformdesignmodule.
• Accessrecordsetsusingaquerywidget.
Forscripts,pgaccesscan:
• Define.
• Modify.
• Calluserdefinedscripts.
D.64 pgtclsh
Name
pgtclsh—PostgresTCLshellclient
pgtclsh[dbname]
Inputs
dbname Thenameofanexistingdatabasetoaccess.
Outputs
Description
pgtclshprovidesaTCLshellinterfaceforPostgres.
AnotherwayofaccessingPostgresthroughtclistousepgtksh orpgaccess.
D.65 pgtksh
Name
pgtksh—PostgresgraphicalTCL/TKshell
pgtksh[dbname]
Inputs
dbname Thenameofanexistingdatabasetoaccess.
386 APPENDIXD. REFERENCEMANUAL
Outputs
Description
pgtkshprovidesagraphicalTCL/TKshellinterfaceforPostgres.
AnotherwayofaccessingPostgresthroughTCListousepgtclshorpgaccess.
D.66 pg_ctl
Name
pg_ctl—Starts,stops,andrestartspostmaster
pg_ctl[-w][-Ddatadir][-ppath][-o"options"]start
pg_ctl[-w][-Ddatadir][-m[s[mart]|f[ast]|i[mmediate]]]stop
pg_ctl[-w][-Ddatadir][-m[s[mart]|f[ast]|i[mmediate]][-o"options"]restart
pg_ctl[-Ddatadir]status
Inputs
-w Wait for the database server to come up, by watching for creation of the pid file (PG-
DATA/postmaster.pid). Timesoutafter60seconds.
-Ddatadir Specifiesthedatabaselocationforthisdatabaseinstallation.
-ppath Specifiesthepathtothepostmasterimage.
-o"options" Specifiesoptionstobepasseddirectlytopostmaster.
The parametersare usuallysurrounded by singleor double quotes to ensurethat they are
passedthroughasagroup.
-mmode Specifiestheshutdownmode.
smart, s smartmodewaitsforalltheclientstologout. Thisisthedefault.
fast,f FastmodesendsSIGTERMtothebackends;thatmeansactivetransactionsgetrolled
back.
immediate, i ImmediatemodesendsSIGUSR1tothebackendsandletsthemabort. Inthis
case,databaserecoverywillbenecessaryonthenextstart-up.
start Startuppostmaster.
stop Shutdownpostmaster.
restart Restartthepostmaster,performingastop/startsequence.
status Showthecurrentstateofpostmaster.
D.66. PG_CTL 387
Outputs
pg_ctl:postmasterisstate(pid:#) Postmasterstatus.
Ifthereisanerrorcondition,thebackenderrormessagewillbedisplayed.
Description
pg_ctlisautilityforstarting,stoppingorrestartingpostmaster.
Usage
Startingpostmaster
Tostartuppostmaster:
$ pg_ctl start
If-w issupplied,pg_ctlwaitsforthedatabaseservertocomeup,bywatchingforcreationofthe
pidfile(PGDATA/postmaster.pid),forupto60seconds.
Parameterstoinvokepostmasteraretakenfromthefollowingsources:
• Pathtopostmaster: foundinthecommandsearchpath.
• Databasedirectory: PGDATAenvironmentvariable.
• Otherparameters: PGDATA/postmaster.opts.default.
postmaster.opts.defaultcontainsparametersforpostmaster.
Notethatpostmaster.opts.defaultisinstalledbyinitdbfromlib/postmaster.opts.default.sampleun-
derthePostgresinstallationdirectory(lib/postmaster.opts.default.sampleiscopiedfromsrc/bin/pg_-
ctl/postmaster.opts.default.samplewhileinstallingPostgres).
Tooverridethedefaultparametersyoucanuse-D,-pand-ooptions.
Anexampleofstartingthepostmaster,blockinguntilpostmastercomesupis:
$ pg_ctl -w start
Tospecifythepostmasterbinarypath,try:
$ pg_ctl -p /usr/local/pgsql/bin/postmaster start
Forapostmasterusingport5433,andrunningwithoutfsync,use:
$ pg_ctl -o "-o -F -p 5433" start
388 APPENDIXD. REFERENCEMANUAL
Stoppingpostmaster
$ pg_ctl stopstopspostmaster. Usingthe-mswitchallowsonetocontrolhowthebackendshuts
down. -wwaitsforpostmastertoshutdown. -mspecifiestheshutdownmode.
Restartingpostmaster
This is almost equivalent to stopping the postmaster then starting it again except that the pa-
rameters used before stopping it would be used too. This is done by saving them in $PG-
DATA/postmaster.optsfile. -w,-D,-m,-fast,-immediateand-ocanalsobeusedintherestarting
modeandtheyhavethesamemeaningsasdescribedabove.
Torestartpostmasterinthesimplestform:
$ pg_ctl restart
Torestartpostmaster,waitingforittoshutdownandtocomeup:
$ pg_ctl -w restart
Torestartusingport5433anddisablingfsyncafterrestarting:
$ pg_ctl -o "-o -F -p 5433" restart
postmasterstatus
Togetstatusinformationfrompostmaster:
$ pg_ctl status
Hereisasampleoutputfrompg_ctl:
pg_ctl: postmaster is running (pid: 13718)
options are:
/usr/local/src/pgsql/current/bin/postmaster
-p 5433
-D /usr/local/src/pgsql/current/data
-B 64
-b /usr/local/src/pgsql/current/bin/postgres
-N 32
-o ’-F’
D.67. PG_DUMP 389
D.67 pg_dump
Name
pg_dump—ExtractaPostgresdatabaseintoascriptfile
pg_dump[dbname]
pg_dump[-hhost][-pport][-ttable][-a][-c][-d][-D][-i][-n][-N][-o][-s][-u][
-v][-x][dbname]
Inputs
pg_dumpacceptsthefollowingcommandlinearguments:
dbname Specifiesthenameofthedatabasetobeextracted. dbnamedefaultstothevalueofthe
USERenvironmentvariable.
-a Dumpoutonlythedata,noschema(definitions).
-c Clean(drop)schemapriortocreate.
-d Dumpdataasproperinsertstrings.
-D Dumpdataasinsertswithattributenames
-i Ignoreversionmismatch betweenpg_dumpandthedatabaseserver. Sincepg_dumpknowsa
greatdealaboutsystemcatalogs,anygivenversionofpg_dumpisonlyintendedtoworkwith
thecorrespondingreleaseofthedatabaseserver. Usethisoptionifyouneedtooverridethe
versioncheck(andifpg_dumpthenfails,don’tsayyouweren’twarned).
-n Suppressdoublequotesaroundidentifiersunlessabsolutelynecessary. Thismaycausetrouble
loadingthisdumpeddataiftherearereservedwordsusedforidentifiers. Thiswasthedefault
behaviorforpg_dumppriortov6.4.
-N Includedoublequotesaroundidentifiers. Thisisthedefault.