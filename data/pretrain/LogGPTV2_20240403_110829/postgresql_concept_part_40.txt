### MOVE - Move Cursor Position

**Syntax:**
```sql
MOVE [direction] [count] {IN | FROM} cursor
```

**Description:**
The `MOVE` command allows a user to move the cursor position by a specified number of rows. It functions similarly to the `FETCH` command but only positions the cursor and does not return any rows.

**Notes:**
- `MOVE` is a PostgreSQL language extension.
- For details on valid arguments, refer to the `FETCH` command.
- Use the `DECLARE` command to define a cursor.
- For more information about transactions, refer to `BEGIN`, `COMMIT`, and `ROLLBACK`.

**Usage Example:**
```sql
BEGIN WORK;
DECLARE liahona CURSOR FOR
SELECT * FROM films;

-- Skip the first 5 rows:
MOVE FORWARD 5 IN liahona;

-- Fetch the 6th row in the cursor liahona:
FETCH 1 IN liahona;

-- Close the cursor liahona and commit the transaction:
CLOSE liahona;
COMMIT WORK;
```

**Output:**
```plaintext
 code | title  | did | date_prod  | kind  | len
-------+--------+-----+------------+-------+-------
 P_303 | 48 Hrs | 103 | 1982-10-22 | Action| 01:37
(1 row)
```

**Compatibility:**
- **SQL92:** There is no `MOVE` statement in SQL92. Instead, SQL92 allows one to `FETCH` rows from an absolute cursor position, implicitly moving the cursor to the correct position.

---

### NOTIFY - Signal Frontends and Backends

**Syntax:**
```sql
NOTIFY name
```

**Inputs:**
- `name`: The notify condition to be signaled.

**Outputs:**
- `NOTIFY`: Acknowledgment that the `NOTIFY` command has executed.
- `Notify Events`: Events are delivered to listening frontends. The reaction of each frontend application depends on its programming.

**Description:**
The `NOTIFY` command sends a notification event to each frontend application that has previously executed `LISTEN` for the specified notify condition in the current database. The information passed to the frontend includes the notify condition name and the notifying backend process's PID. It is up to the database designer to define the condition names used in a given database and what each one means.

Commonly, the notify condition name is the same as the name of some table in the database, and the notify event essentially means "I changed this table, take a look at it to see what's new." However, no such association is enforced by the `NOTIFY` and `LISTEN` commands. For example, a database designer could use several different condition names to signal different sorts of changes to a single table.

`NOTIFY` provides a simple form of interprocess communication (IPC) mechanism for processes accessing the same PostgreSQL database. Higher-level mechanisms can be built by using tables in the database to pass additional data (beyond a mere condition name) from the notifier to the listener(s).

When `NOTIFY` is used to signal changes to a particular table, a useful technique is to put the `NOTIFY` in a rule triggered by table updates. This way, notification happens automatically when the table is changed, and the application programmer cannot accidentally forget to do it.

**Transaction Interaction:**
- If a `NOTIFY` is executed inside a transaction, the notify events are not delivered until and unless the transaction is committed.
- If a listening backend receives a notify signal while it is within a transaction, the notify event will not be delivered to its connected frontend until just after the transaction is completed (either committed or aborted).

**Important Considerations:**
- If the same condition name is signaled multiple times in quick succession, recipients may get only one notify event for several executions of `NOTIFY`.
- It is common for a frontend that sends `NOTIFY` to be listening on the same notify name itself. In such cases, it can avoid unnecessary work by checking if the notifying backend process’s PID (supplied in the notify event message) is the same as its own backend’s PID (available from libpq). When they are the same, the notify event is the frontend's own work bouncing back and can be ignored.

**Notes:**
- `name` can be any string valid as a name; it need not correspond to the name of any actual table. If `name` is enclosed in double quotes, it need not even be a syntactically valid name but can be any string up to 31 characters long.
- In some previous releases of PostgreSQL, `name` had to be enclosed in double quotes when it did not correspond to any existing table name, even if syntactically valid as a name. This is no longer required.
- In PostgreSQL releases prior to 6.4, the backend PID delivered in a notify message was always the PID of the frontend’s own backend, making it impossible to distinguish one's own notifies from other clients' notifies.

**Usage Example:**
```sql
LISTEN virtual;
NOTIFY virtual;
```
**Output:**
```plaintext
Asynchronous NOTIFY 'virtual' from backend with pid '8448' received.
```

**Compatibility:**
- **SQL92:** There is no `NOTIFY` statement in SQL92.

---

### pgaccess - PostgreSQL Graphical Interactive Client

**Syntax:**
```sh
pgaccess [dbname]
```

**Inputs:**
- `dbname`: The name of an existing database to access.

**Description:**
`pgaccess` provides a graphical interface for PostgreSQL where you can manage your tables, edit them, define queries, sequences, and functions. Another way of accessing PostgreSQL through TCL is to use `pgtclsh` or `pgtksh`.

**Features:**
- Open any database on a specified host at the specified port, username, and password.
- Execute `VACUUM`.
- Save preferences in `~/.pgaccessrc` file.
- Manage tables:
  - Open multiple tables for viewing, max n records (configurable).
  - Resize columns by dragging the vertical gridlines.
  - Wrap text in cells.
  - Dynamically adjust row height when editing.
  - Save table layout for every table.
  - Import/export to external files (SDF, CSV).
  - Use filter capabilities; enter filter like `price > 3.14`.
  - Specify sort order; enter manually the sort field(s).
  - Edit in place; double-click the text you want to change.
  - Delete records; point to the record, press Del key.
  - Add new records; save new row with right-button click.
  - Create tables with an assistant.
  - Rename and delete (drop) tables.
  - Retrieve information on tables, including owner, field information, indices.
- Manage queries:
  - Define, edit, and store user-defined queries.
  - Save view layouts.
  - Store queries as views.
  - Execute with optional user input parameters; e.g., `select * from invoices where year = [parameter "Year of selection"]`.
  - View any select query result.
  - Run action queries (insert, update, delete).
  - Construct queries using a visual query builder with drag & drop support, table aliasing.
- Manage sequences:
  - Define new instances.
  - Inspect existing instances.
  - Delete.
- Manage views:
  - Define them by saving queries as views.
  - View them, with filtering and sorting capabilities.
  - Design new views.
  - Delete (drop) existing views.
- Manage functions:
  - Define.
  - Inspect.
  - Delete.
- Generate reports:
  - Generate simple reports from a table (beta stage).
  - Change font, size, and style of fields and labels.
  - Load and save reports from the database.
  - Preview tables, sample PostScript print.
- Manage forms:
  - Open user-defined forms.
  - Use a form design module.
  - Access record sets using a query widget.
- Manage scripts:
  - Define.
  - Modify.
  - Call user-defined scripts.

---

### pgtclsh - PostgreSQL TCL Shell Client

**Syntax:**
```sh
pgtclsh [dbname]
```

**Inputs:**
- `dbname`: The name of an existing database to access.

**Description:**
`pgtclsh` provides a TCL shell interface for PostgreSQL. Another way of accessing PostgreSQL through TCL is to use `pgtksh` or `pgaccess`.

---

### pgtksh - PostgreSQL Graphical TCL/TK Shell

**Syntax:**
```sh
pgtksh [dbname]
```

**Inputs:**
- `dbname`: The name of an existing database to access.

**Description:**
`pgtksh` provides a graphical TCL/TK shell interface for PostgreSQL. Another way of accessing PostgreSQL through TCL is to use `pgtclsh` or `pgaccess`.

---

### pg_ctl - Start, Stop, and Restart Postmaster

**Syntax:**
```sh
pg_ctl [-w] [-D datadir] [-p path] [-o "options"] start
pg_ctl [-w] [-D datadir] [-m [s[mart]|f[ast]|i[mmediate]]] stop
pg_ctl [-w] [-D datadir] [-m [s[mart]|f[ast]|i[mmediate]] [-o "options"] restart
pg_ctl [-D datadir] status
```

**Inputs:**
- `-w`: Wait for the database server to come up, by watching for creation of the pid file (`PGDATA/postmaster.pid`). Times out after 60 seconds.
- `-D datadir`: Specifies the database location for this database installation.
- `-p path`: Specifies the path to the postmaster image.
- `-o "options"`: Specifies options to be passed directly to postmaster. The parameters are usually surrounded by single or double quotes to ensure they are passed through as a group.
- `-m mode`: Specifies the shutdown mode.
  - `smart, s`: Smart mode waits for all the clients to log out. This is the default.
  - `fast, f`: Fast mode sends `SIGTERM` to the backends; active transactions get rolled back.
  - `immediate, i`: Immediate mode sends `SIGUSR1` to the backends and lets them abort. In this case, database recovery will be necessary on the next startup.

**Commands:**
- `start`: Startup postmaster.
- `stop`: Shutdown postmaster.
- `restart`: Restart the postmaster, performing a stop/start sequence.
- `status`: Show the current state of postmaster.

**Outputs:**
- `pg_ctl: postmaster is state (pid: #)`: Postmaster status.
- If there is an error condition, the backend error message will be displayed.

**Description:**
`pg_ctl` is a utility for starting, stopping, or restarting the postmaster.

**Usage Examples:**

**Starting Postmaster:**
```sh
$ pg_ctl start
```
- If `-w` is supplied, `pg_ctl` waits for the database server to come up, by watching for the creation of the pid file (`PGDATA/postmaster.pid`), for up to 60 seconds.
- Parameters to invoke postmaster are taken from the following sources:
  - Path to postmaster: found in the command search path.
  - Database directory: `PGDATA` environment variable.
  - Other parameters: `PGDATA/postmaster.opts.default`.
- `postmaster.opts.default` contains parameters for postmaster and is installed by `initdb` from `lib/postmaster.opts.default.sample` under the PostgreSQL installation directory.
- To override the default parameters, you can use `-D`, `-p`, and `-o` options.

Example:
```sh
$ pg_ctl -w start
$ pg_ctl -p /usr/local/pgsql/bin/postmaster start
$ pg_ctl -o "-o -F -p 5433" start
```

**Stopping Postmaster:**
```sh
$ pg_ctl stop
```
- Using the `-m` switch allows one to control how the backend shuts down.
- `-w` waits for the postmaster to shut down.
- `-m` specifies the shutdown mode.

Example:
```sh
$ pg_ctl -w -m fast stop
```

**Restarting Postmaster:**
```sh
$ pg_ctl restart
```
- This is almost equivalent to stopping the postmaster then starting it again, except that the parameters used before stopping it would be used too. This is done by saving them in `$PGDATA/postmaster.opts` file.
- `-w`, `-D`, `-m`, `-fast`, `-immediate`, and `-o` can also be used in the restarting mode and have the same meanings as described above.

Example:
```sh
$ pg_ctl -w restart
$ pg_ctl -o "-o -F -p 5433" restart
```

**Postmaster Status:**
```sh
$ pg_ctl status
```
- Sample output:
```plaintext
pg_ctl: postmaster is running (pid: 13718)
options are:
/usr/local/src/pgsql/current/bin/postmaster
-p 5433
-D /usr/local/src/pgsql/current/data
-B 64
-b /usr/local/src/pgsql/current/bin/postgres
-N 32
-o '-F'
```

---

### pg_dump - Extract a PostgreSQL Database into a Script File

**Syntax:**
```sh
pg_dump [dbname]
pg_dump [-h host] [-p port] [-t table] [-a] [-c] [-d] [-D] [-i] [-n] [-N] [-o] [-s] [-u] [-v] [-x] [dbname]
```

**Inputs:**
- `dbname`: Specifies the name of the database to be extracted. `dbname` defaults to the value of the `USER` environment variable.

**Options:**
- `-a`: Dump out only the data, no schema (definitions).
- `-c`: Clean (drop) schema prior to create.
- `-d`: Dump data as proper insert strings.
- `-D`: Dump data as inserts with attribute names.
- `-i`: Ignore version mismatch between `pg_dump` and the database server.
- `-n`: Suppress double quotes around identifiers unless absolutely necessary.
- `-N`: Include double quotes around identifiers. This is the default.

**Description:**
`pg_dump` is a utility for extracting a PostgreSQL database into a script file. It accepts various command-line arguments to customize the dump process.

**Usage Example:**
```sh
pg_dump mydatabase
```

**Notes:**
- `pg_dump` knows a great deal about system catalogs, so any given version of `pg_dump` is intended to work with the corresponding release of the database server.
- Use the `-i` option to override the version check, but be aware that using a mismatched version may cause issues.