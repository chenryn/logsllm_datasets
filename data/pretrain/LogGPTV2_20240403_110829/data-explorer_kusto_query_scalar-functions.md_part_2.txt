|[isfinite()](isfinite-function.md)|Returns whether input is a finite value (isn't infinite or NaN).|
|[isinf()](isinf-function.md)|Returns whether input is an infinite (positive or negative) value.|
|[isnan()](isnan-function.md)|Returns whether input is Not-a-Number (NaN) value.|
|[log()](log-function.md)|Returns the natural logarithm function.|
|[log10()](log10-function.md)|Returns the common (base-10) logarithm function.|
|[log2()](log2-function.md)|Returns the base-2 logarithm function.|
|[loggamma()](loggamma-function.md)|Computes log of absolute value of the gamma function.|
|[not()](not-function.md)|Reverses the value of its bool argument.|
|[pi()](pi-function.md)|Returns the constant value of Pi (Ï€).|
|[pow()](pow-function.md)|Returns a result of raising to power.|
|[radians()](radians-function.md)|Converts angle value in degrees into value in radians, using formula radians = (PI / 180) * angle-in-degrees.|
|[rand()](rand-function.md)|Returns a random number.|
|[range()](range-function.md)|Generates a dynamic array holding a series of equally spaced values.|
|[round()](round-function.md)|Returns the rounded source to the specified precision.|
|[sign()](sign-function.md)|Sign of a numeric expression.|
|[sin()](sin-function.md)|Returns the sine function.|
|[sqrt()](sqrt-function.md)|Returns the square root function.|
|[tan()](tan-function.md)|Returns the tangent function.|
|[welch_test()](welch-test-function.md)|Computes the p-value of the [Welch-test function](https://en.wikipedia.org/wiki/Welch%27s_t-test).|
## Metadata functions
|Function Name     |Description                                          |
|-------------------------|--------------------------------------------------------|
|[column_ifexists()](column-ifexists-function.md)|Takes a column name as a string and a default value. Returns a reference to the column if it exists, otherwise - returns the default value.|
|[current_cluster_endpoint()](current-cluster-endpoint-function.md)|Returns the current cluster running the query.|
|[current_database()](current-database-function.md)|Returns the name of the database in scope.|
|[current_principal()](current-principal-function.md)|Returns the current principal running this query.|
|[current_principal_details()](current-principal-details-function.md)|Returns details of the principal running the query.|
|[current_principal_is_member_of()](current-principal-is-member-of-function.md)|Checks group membership or principal identity of the current principal running the query.|
|[cursor_after()](cursor-after-function.md)|Used to access to the records that were ingested after the previous value of the cursor.|
|[estimate_data_size()](estimate-data-size-function.md)|Returns an estimated data size of the selected columns of the tabular expression.|
|[extent_id()](extent-id-function.md)|Returns a unique identifier that identifies the data shard ("extent") that the current record resides in.|
|[extent_tags()](extenttagsfunction.md)|Returns a dynamic array with the tags of the data shard ("extent") that the current record resides in.|
|[ingestion_time()](ingestion-time-function.md)|Retrieves the record's $IngestionTime hidden datetime column, or null.|
## Rounding functions
|Function Name     |Description                                          |
|-------------------------|--------------------------------------------------------|
|[bin()](bin-function.md)|Rounds values down to an integer multiple of a given bin size.|
|[bin_at()](bin-at-function.md)|Rounds values down to a fixed-size "bin", with control over the bin's starting point. (See also bin function.)|
|[ceiling()](ceiling-function.md)|Calculates the smallest integer greater than, or equal to, the specified numeric expression.|
## Conditional functions
|Function Name     |Description                                          |
|-------------------------|--------------------------------------------------------|
|[case()](case-function.md)|Evaluates a list of predicates and returns the first result expression whose predicate is satisfied.|
|[coalesce()](coalesce-function.md)|Evaluates a list of expressions and returns the first non-null (or non-empty for string) expression.|
|[iff()](./ifffunction.md)|Evaluate the first argument (the predicate), and returns the value of either the second or third arguments, depending on whether the predicate evaluated to true (second) or false (third).|
|[max_of()](max-of-function.md)|Returns the maximum value of several evaluated numeric expressions.|
|[min_of()](min-of-function.md)|Returns the minimum value of several evaluated numeric expressions.|
## Series element-wise functions
|Function Name     |Description                                          |
|-------------------------|--------------------------------------------------------|
|[series_abs()](series-abs-function.md)|Calculates the element-wise absolute value of the numeric series input.|
|[series_acos()](series-acos-function.md)|Calculates the element-wise arccosine function of the numeric series input.|
|[series_add()](series-add-function.md)|Calculates the element-wise addition of two numeric series inputs.|
|[series_asin()](series-asin-function.md)|Calculates the element-wise arcsine function of the numeric series input.|
|[series_atan()](series-atan-function.md)|Calculates the element-wise arctangent function of the numeric series input.|
|[series_ceiling()](series-ceiling-function.md)|Calculates the element-wise ceiling function of the numeric series input.|
|[series_cos()](series-cos-function.md)|Calculates the element-wise cosine function of the numeric series input.|
|[series_divide()](series-divide-function.md)|Calculates the element-wise division of two numeric series inputs.|
|[series_equals()](series-equals-function.md)|Calculates the element-wise equals (`==`) logic operation of two numeric series inputs.|
|[series_exp()](series-exp-function.md)|Calculates the element-wise base-e exponential function (e^x) of the numeric series input.|
|[series_floor()](series-floor-function.md)|Calculates the element-wise floor function of the numeric series input.|
|[series_greater()](series-greater-function.md)|Calculates the element-wise greater (`>`) logic operation of two numeric series inputs.|
|[series_greater_equals()](series-greater-equals-function.md)|Calculates the element-wise greater or equals (`>=`) logic operation of two numeric series inputs.|
|[series_less()](series-less-function.md)|Calculates the element-wise less (`<`) logic operation of two numeric series inputs.|
|[series_less_equals()](series-less-equals-function.md)|Calculates the element-wise less or equal (`<=`) logic operation of two numeric series inputs.|
|[series_log()](series-log-function.md)|Calculates the element-wise natural logarithm function (base-e) of the numeric series input.|
|[series_multiply()](series-multiply-function.md)|Calculates the element-wise multiplication of two numeric series inputs.|
|[series_not_equals()](series-not-equals-function.md)|Calculates the element-wise not equals (`!=`) logic operation of two numeric series inputs.|
|[series_pow()](series-pow-function.md)|Calculates the element-wise power of two numeric series inputs.|
|[series_sign()](series-sign-function.md)|Calculates the element-wise sign of the numeric series input.|
|[series_sin()](series-sin-function.md)|Calculates the element-wise sine function of the numeric series input.|
|[series_subtract()](series-subtract-function.md)|Calculates the element-wise subtraction of two numeric series inputs.|
|[series_tan()](series-tan-function.md)|Calculates the element-wise tangent function of the numeric series input.|
## Series processing functions
|Function Name     |Description                                          |
|-------------------------|--------------------------------------------------------|
|[series_cosine_similarity()](series-cosine-similarity-function.md)|Calculates the [cosine similarity](https://en.wikipedia.org/wiki/Cosine_similarity) of two numeric series.|
|[series_decompose()](series-decompose-function.md)|Does a decomposition of the series into components.|
|[series_decompose_anomalies()](series-decompose-anomalies-function.md)|Finds anomalies in a series based on series decomposition.|
|[series_decompose_forecast()](series-decompose-forecast-function.md)|Forecast based on series decomposition.|
|[series_dot_product()](series-dot-product-function.md)|Calculates the [dot product](https://en.wikipedia.org/wiki/Dot_product) of two numeric series.|
|[series_fill_backward()](series-fill-backward-function.md)|Performs backward fill interpolation of missing values in a series.|
|[series_fill_const()](series-fill-const-function.md)|Replaces missing values in a series with a specified constant value.|
|[series_fill_forward()](series-fill-forward-function.md)|Performs forward fill interpolation of missing values in a series.|
|[series_fill_linear()](series-fill-linear-function.md)|Performs linear interpolation of missing values in a series.|
|[series_fft()](series-fft-function.md)|Applies the Fast Fourier Transform (FFT) on a series.|
|[series_fir()](series-fir-function.md)|Applies a Finite Impulse Response filter on a series.|
|[series_fit_2lines()](series-fit-2lines-function.md)|Applies two segments linear regression on a series, returning multiple columns.|
|[series_fit_2lines_dynamic()](series-fit-2lines-dynamic-function.md)|Applies two segments linear regression on a series, returning dynamic object.|
|[series_fit_line()](series-fit-line-function.md)|Applies linear regression on a series, returning multiple columns.|
|[series_fit_line_dynamic()](series-fit-line-dynamic-function.md)|Applies linear regression on a series, returning dynamic object.|
|[series_fit_poly()](series-fit-poly-function.md)|Applies polynomial regression on a series, returning multiple columns.|
|[series_ifft()](series-ifft-function.md)|Applies the Inverse Fast Fourier Transform (IFFT) on a series.|
|[series_iir()](series-iir-function.md)|Applies an Infinite Impulse Response filter on a series.|
|[series_magnitude()](series-magnitude-function.md)|Calculates the [magnitude](https://en.wikipedia.org/wiki/Magnitude_(mathematics)#Euclidean_vector_space) of the numeric series.|
|[series_outliers()](series-outliers-function.md)|Scores anomaly points in a series.|
|[series_pearson_correlation()](series-pearson-correlation-function.md)|Calculates the Pearson correlation coefficient of two series.|
|[series_periods_detect()](series-periods-detect-function.md)|Finds the most significant periods that exist in a time series.|
|[series_periods_validate()](series-periods-validate-function.md)|Checks whether a time series contains periodic patterns of given lengths.|
|[series_seasonal()](series-seasonal-function.md)|Finds the seasonal component of the series.|
|[series_stats()](series-stats-function.md)|Returns statistics for a series in multiple columns.|
|[series_stats_dynamic()](series-stats-dynamic-function.md)|Returns statistics for a series in dynamic object.|
|[series_sum()](series-sum-function.md)|Calculates the sum of numeric series elements.|
## String functions
|Function Name     |Description                                          |
|-------------------------|--------------------------------------------------------|
|[base64_encode_tostring()](base64-encode-tostring-function.md)|Encodes a string as base64 string.|
|[base64_encode_fromguid()](base64-encode-fromguid-function.md)|Encodes a GUID as base64 string.|
|[base64_decode_tostring()](base64-decode-tostring-function.md)|Decodes a base64 string to a UTF-8 string.|
|[base64_decode_toarray()](base64-decode-toarray-function.md)|Decodes a base64 string to an array of long values.|
|[base64_decode_toguid()](base64-decode-toguid-function.md)|Decodes a base64 string to a GUID.|
|[countof()](countof-function.md)|Counts occurrences of a substring in a string. Plain string matches may overlap; regex matches don't.|
|[extract()](extract-function.md)|Get a match for a regular expression from a text string.|
|[extract_all()](extract-all-function.md)|Get all matches for a regular expression from a text string.|
|[extract_json()](extract-json-function.md)|Get a specified element out of a JSON text using a path expression.|
|[has_any_index()](has-any-index-function.md)|Searches the string for items specified in the array and returns the position of the first item found in the string.|
|[indexof()](indexof-function.md)|Function reports the zero-based index of the first occurrence of a specified string within input string.|
|[isempty()](isempty-function.md)|Returns true if the argument is an empty string or is null.|
|[isnotempty()](isnotempty-function.md)|Returns true if the argument isn't an empty string or a null.|
|[isnotnull()](isnotnull-function.md)|Returns true if the argument is not null.|
|[isnull()](isnull-function.md)|Evaluates its sole argument and returns a bool value indicating if the argument evaluates to a null value.|
|[parse_command_line()](parse-command-line-function.md)|Parses a Unicode command line string and returns an array of the command line arguments.|
|[parse_csv()](parse-csv-function.md)|Splits a given string representing comma-separated values and returns a string array with these values.|
|[parse_ipv4()](parse-ipv4-function.md)|Converts input to long (signed 64-bit) number representation.|
|[parse_ipv4_mask()](parse-ipv4-mask-function.md)|Converts input string and IP-prefix mask to long (signed 64-bit) number representation.|
|[parse_ipv6()](parse-ipv6-function.md)|Converts IPv6 or IPv4 string to a canonical IPv6 string representation.|
|[parse_ipv6_mask()](parse-ipv6-mask-function.md)|Converts IPv6 or IPv4 string and netmask to a canonical IPv6 string representation.|
|[parse_json()](parse-json-function.md)|Interprets a string as a JSON value and returns the value as dynamic.|
|[parse_url()](parse-url-function.md)|Parses an absolute URL string and returns a dynamic object contains all parts of the URL.|
|[parse_urlquery()](parse-url-query-function.md)|Parses a url query string and returns a dynamic object contains the Query parameters.|
|[parse_version()](parse-version-function.md)|Converts input string representation of version to a comparable decimal number.|
|[replace_regex()](replace-regex-function.md)|Replace all regex matches with another string.|