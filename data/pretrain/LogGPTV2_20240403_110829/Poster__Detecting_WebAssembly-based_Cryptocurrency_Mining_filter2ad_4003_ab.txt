toLoot.
Figure 2: The frequency distribution of top instructions of Tanks.
program’s trace in many different sequence intervals. The distri-
bution in each interval indicates the temporal mining speed. We
then compute a baseline average distribution that represents the
average mining speed of the sample mining program.
At runtime, we would compute in the same interval, which we
call the detection interval, a distribution of the same top Nдroup
groups of instructions of a Wasm thread. We then calculate its
cosine similarity score – score – with the baseline distribution. If
the score is close to 1, it is very likely that the thread is executing
similar code in that interval. We use a parameter Tc as the threshold
for comparing the similarity.
It is possible that a non-mining thread executes the same code
very shortly in the detection interval and then becomes inactive.
Therefore, instead of using the percentage to calculate the distri-
bution, we use the number of executed instructions divided by the
detection interval to represent the mining speed. Further, we would
compare the calculated mining speed – speed – with that of the
baseline speed – S. We would make a negative decision if the mining
speed is much smaller than the baseline speed. Specifically, we ob-
tain the standard deviation σ when calculating the baseline average
speed. We use a parameter Tσ to control the absolute detection
distance from the baseline speed. A positive decision is made if the
following inequality is true. We will discuss how to determine the
parameters Nдroup and Ninst next.
score ≥ Tc ∧ s ≥ S − Tσ σ
(1)
Studying parameters Nдroup and Ninst . We experiment with
2.2.1
different settings of Nдroup and Ninst to study the overhead and
accuracy of our method on a small-scale training set. For simplicity,
we use another mining program as the positive case and the Tank
game as the negative case.
100200300400500TraceSize/MB020406080100PercentageTop1Top2Top3Top4Top5Top6Top7Top8Top9Top10100200300400500TraceSize/MB020406080100PercentageTop1Top2Top3Top4Top5Top6Top7Top8Top9Top103 EVALUATION
We performed a preliminary experiment on Alexa top 100K websites
using our modified browser in June 2019. We found 87 websites
that included as least one Wasm script. Four websites were detected
by our method as cryptojacking websites, which leveraged the
same mining algorithm as CryptoLoot. We manually checked all
the 87 Wasm websites and confirmed our detection was accurate.
Further, we did not have any false negative websites, i.e., there
was no other website running the CryptoLoot mining algorithm.
Our results indicate that the subsequences of Wasm instruction
execution trace is potentially a reliable feature to identify similar
Wasm cryptojacking programs.
4 DISCUSSION AND FUTURE WORK
We evaluated the preliminary method of using the subsequences of
Wasm instruction execution traces to detect Wasm cryptojacking
programs. We have shown that the frequency distribution of the top
instruction groups can well represent the intrinsic mining behavior
of a Wasm program. However, our approach may not be obfuscation-
robust, although Wasm obfuscation is not widely observed yet. For
instance, the attacker may inject extra instructions, reverse the
order of instructions, or break a basic block into multiple smaller
ones to bypass our detection. We aim to improve our methodology
against possible Wasm obfuscation attacks in our future work.
ACKNOWLEDGMENT
The work described in this paper was partly supported by a grant
from the Research Grants Council of the Hong Kong Special Ad-
ministrative Region, China (CUHK 24209418).
REFERENCES
[1] 2018.
THE ILLICIT CRYPTOCURRENCY MINING THREAT.
//www.cyberthreatalliance.org/wp-content/uploads/2018/09/CTA-Illicit-
CryptoMining-Whitepaper.pdf.
https:
[2] Shayan Eskandari, Andreas Leoutsarakos, Troy Mursch, and Jeremy Clark. 2018.
A first look at browser-based Cryptojacking. In 2018 IEEE European Symposium
on Security and Privacy Workshops (EuroS&PW). IEEE, 58–66.
[3] Guardian. 2018. https://www.theguardian.com/technology/2017/sep/27/pirate-
bay-showtime-ads-websites-electricity-pay-bills-cryptocurrency-bitcoin.
[4] Geng Hong, Zhemin Yang, Sen Yang, Lei Zhang, Yuhong Nan, Zhibo Zhang, Min
Yang, Yuan Zhang, Zhiyun Qian, and Haixin Duan. 2018. How you get shot in the
back: A systematical study about cryptojacking in the real world. In Proceedings
of the 25th ACM Conference on Computer and Communications Security (CCS).
Toronto, Canada.
[5] Amin Kharraz, Zane Ma, Paul Murley, Charles Lever, Joshua Mason, Andrew
Miller, Nikita Borisov, Manos Antonakakis, and Michael Bailey. 2019. Outguard:
Detecting In-Browser Covert Cryptocurrency Mining in the Wild. In Proceedings
of the The Web Conference (WWW). San Francisco, CA.
[6] Radhesh Krishnan Konoth, Emanuele Vineti, Veelasha Moonsamy, Martina
Lindorfer, Christopher Kruegel, Herbert Bos, and Giovanni Vigna. 2018.
Minesweeper: An in-depth look into drive-by cryptocurrency mining and its
defense. In Proceedings of the 25th ACM Conference on Computer and Communi-
cations Security (CCS). Toronto, Canada.
[7] Hon Lau. 2017. Browser-based cryptocurrency mining makes unexpected return
from the dead. Sympantec Threat Intelligence (2017).
[8] Jan Rüth, Torsten Zimmermann, Konrad Wolsing, and Oliver Hohlfeld. 2018. Dig-
ging into browser-based crypto mining. In Proceedings of the Internet Measurement
Conference 2018. ACM, 70–76.
https://blog.trendmicro.com/trendlabs-security-
intelligence/malvertising-campaignabuses-googles-doubleclick-to-deliver-
cryptocurrency-miners/.
[9] TrendMicro.
2018.
[10] Wenhao Wang, Benjamin Ferrell, Xiaoyang Xu, Kevin W Hamlen, and Shuang
Hao. 2018. Seismic: Secure in-lined script monitors for interrupting cryptojacks.
In European Symposium on Research in Computer Security. Springer, 122–142.
[11] Mark Ward. 2018. http://www.bbc.com/news/technology-41518351.
Figure 3: The overhead for the positive case.
Figure 4: The overhead for the negative case.
To count an occurrence of the top Ninst instructions, we need
to insert four extra profiling instructions to the Wasm. We enable
the Linux-perf feature to dump the per-thread executed instruction
numbers to measure the overhead, which is the ratio of additional
instructions executed in a fixed CPU time. As is shown in Figure 3,
the overhead decreases significantly as Ninst increases or Nдroup
decreases for the positive case. For the negative case (Figure 4), the
overhead is very limited if we select a larger Ninst .
Table 2: The similarity score of the positive case.
9
Nдr oup
1
3
5
7
scor e
Ninst
1
3
5
7
9
0.930
0.930
0.935
0.932
0.934
0.947
0.928
0.929
0.948
0.939
0.943
0.941
0.929
0.937
0.948
0.946
0.945
0.947
0.933
0.928
0.930
0.930
0.933
0.934
0.935
Table 3: The similarity score of the negative case.
scor e
9
Ninst
Nдr oup
1
3
5
7
1
3
5
7
9
1.000
1.000
0.000
0.000
0.000
0.716
0.519
0.000
0.000
0.000
0.760
0.558
0.000
0.000
0.000
0.754
0.542
0.000
0.000
0.000
0.753
0.534
0.000
0.000
0.000
We present the similarity scores of the positive case and neg-
ative case in Table 2 and Table 3, respectively. We found that as
long as both Ninst and Nдroup are larger than 3, we could get rela-
tively good detection performance in this small-scale experiment.
Thus, we think the method can potentially perform well in de-
tecting Wasm programs running a known cryptocurrency mining
algorithm.
13579Ngroup051015202530CPUOverhead/%Ninst=1Ninst=3Ninst=5Ninst=7Ninst=913579Ngroup051015202530CPUOverhead/%Ninst=1Ninst=3Ninst=5Ninst=7Ninst=9