    host = againReqHeaders[1].split(' ')[1]
    analyzedrep = self._helpers.analyzeResponse(againRes)
    againResBodys = againRes[analyzedrep.getBodyOffset():].tostring()
这个方法是很重要的，以后会经常用到，不懂的可以多去搜下demo。
  * printError
不怎么用这个方法，感觉就和抛出一个自定义错误一样的。
示例：
    from burp import IBurpExtender,ICookie,IScannerCheck,IHttpListener
    class BurpExtender(IBurpExtender,ICookie,IScannerCheck,IHttpListener):
        def registerExtenderCallbacks(self, callbacks):
            self.callbacks = callbacks
            self.helpers = callbacks.getHelpers()
            self.callbacks.setExtensionName('IBurp')
            callbacks.registerScannerCheck(self)
            callbacks.registerHttpListener(self)
            callbacks.printError("123")
输出：
  * printOutput
emm，感觉这个方法就是为了代替使用print？
示例：
    class BurpExtender(IBurpExtender,ICookie,IScannerCheck,IHttpListener):
        def registerExtenderCallbacks(self, callbacks):
            self.callbacks = callbacks
            self.helpers = callbacks.getHelpers()
            self.callbacks.setExtensionName('IBurp')
            callbacks.registerScannerCheck(self)
            callbacks.registerHttpListener(self)
            callbacks.printOutput("123")
输出：
  * 一系列register
这些registerxxx的方法，我的个人理解就是你注册了某个类，你就可以重写某个类的方法，这些类的方法在使用burp进行某些特定操作时会自动调用。
以registerHttpListener为例：
从上图中可以看出，其注册的实际是IHttpListener这个接口，让我们来看看此接口下的方法：
官方描述是，任何Burp收到或发出的请求以及响应都将触发此方法，所以这个方法也同样可以用来当漏扫，只不过一般没人这么干，因为只有此方法执行完后，浏览器的页面才会返回结果。
示例：
    from burp import IBurpExtender,ICookie,IScannerCheck,IHttpListener
    class BurpExtender(IBurpExtender,ICookie,IScannerCheck,IHttpListener):
        def registerExtenderCallbacks(self, callbacks):
            self.callbacks = callbacks
            self.helpers = callbacks.getHelpers()
            self.callbacks.setExtensionName('IBurp')
            callbacks.registerHttpListener(self)
        def processHttpMessage(self, toolFlag, messageIsRequest, messageinfo):
            if toolFlag == 4 :
                if messageIsRequest:
                    return
                else:
                    print("you are loading:  " + messageinfo.getHttpService().toString())
此时当我们用burp代理发出请求时，就会自动调用该方法，输出如下：
  * 一系列remove
这些方法对应着上面的register，即删除插件所注册的某些接口。
字面翻译就可以啦。
  * saveBuffersToTempFiles
将IHttpRequestResponse对象的请求以及响应存储到临时文件中，确保其不存在于内存中。emmm不知道这个的作用是什么。
返回实现了IHttpRequestResponse接口的对象，我们可以调用如下方法：
  * saveConfigAsJson&&loadConfigFromJson
官方描述如上，我也不清楚是怎么使用的，不予介绍。
  * 一系列send
字面意思，就是把某个数据包发送到burp的某个模块里，这里以sendToRepeater为例：
    from burp import IBurpExtender,ICookie,IScannerCheck,IHttpListener
    class BurpExtender(IBurpExtender,ICookie,IScannerCheck,IHttpListener):
        def registerExtenderCallbacks(self, callbacks):
            self.callbacks = callbacks
            self.helpers = callbacks.getHelpers()
            self.callbacks.setExtensionName('IBurp')
            callbacks.registerHttpListener(self)
        def processHttpMessage(self, toolFlag, messageIsRequest, messageinfo):
            if messageinfo.getHttpService().getProtocol() == 'https://':
                is_https = 1
            else:
                is_https = 0
            headers = list(self.helpers.analyzeRequest(messageinfo).getHeaders())
            newMessage = self.helpers.buildHttpMessage(headers, None)
            self.callbacks.sendToRepeater(messageinfo.getHttpService().getHost(),messageinfo.getHttpService().getPort(),is_https,newMessage,None)
此时当burp代理发出请求或收到响应时，都会调用processHttpMessage，我在里边实现了一个简单的sendToRepeater方法，此时可以看到我的repeater里有巨多请求：
感觉这几个sendtoxxx的方法都需要配合button这样的监听事件来实现。
  * setExtensionName
顾名思义，就是用来设置插件名称的。
示例：
    class BurpExtender(IBurpExtender,ICookie,IScannerCheck,IHttpListener):
        def registerExtenderCallbacks(self, callbacks):
            self.callbacks = callbacks
            self.helpers = callbacks.getHelpers()
            self.callbacks.setExtensionName('IBurp')
此时插件的名称会展示在extender-extensions中：
  * setProxyInterceptionEnabled
没用过，不清楚如何使用，本地测试了一下也没搞明白。
  * unloadExtension
此方法用于从拓展中去除当前使用的拓展，即不使用该拓展，也是要配合button使用才有意义的。
  * updateCookieJar
没使用过。
* * *
以上即为IBurpExtenderCallbacks接口中实现的所有方法，在写这篇文章的时候，有的方法我也没使用过，写起来很费事，不过如果真的想了解burp插件的一套调用流程，这个接口是你必须要认真去阅读的。
参考：[Interface
IBurpExtenderCallbacks](https://portswigger.net/burp/extender/api/burp/IBurpExtenderCallbacks.html#updateCookieJar%28burp.ICookie%29)
### IContextMenuFactory
此接口由`IBurpExtenderCallbacks.registerContextMenuFactory()`注册，其需要实现的方法只有一个，返回的是IContextMenuInvocation的实例，可以调用其中的方法。
这个接口是用来实现菜单与一系列操作联合起来的，具体看个demo：
示例：
    class BurpExtender(IBurpExtender, IContextMenuFactory):
        def registerExtenderCallbacks(self, callbacks):
            self._callbacks = callbacks
            self._helpers   = callbacks.getHelpers()
            self._context   = None
            # set up the extension
            callbacks.setExtensionName('IBurp')
            callbacks.registerContextMenuFactory(self)
        def createMenuItems(self,invocation):
            menu= []
            menu.append(JMenuItem("Test Menu", None, actionPerformed=self.testmenu()))
            print(invocation.getSelectedMessages())
            return menu
        def testmenu(self):
            return 1
此时我在Burp的上下文菜单中创建了一个名为Test Menu的菜单，我重写他的
createMenuItems方法，此时在Burp的任意地方调用上下文菜单都会触发此方法。
实例效果：
可以看到这里出现了一个我们自定义的菜单选项，一般这个选项是要配合其他的操作来进行的，下面以sahildhar师傅的shodan信息探测插件来讲一下这个api要怎么用。
项目地址：[shodanapi.py](https://github.com/sahildhar/BurpExtenderPractise/blob/master/shodanapi.py)
在23行注册了此接口：`self.callbacks.registerContextMenuFactory(self)`
26-29行重写了此方法：
    def createMenuItems(self,invocation):
            menu_list = []
            menu_list.append(JMenuItem("Scan with Shodan",None,actionPerformed= lambda x, inv=invocation:self.startThreaded(self.start_scan,inv)))
            return menu_list
此时创建了一个菜单选项名为Scan with Shodan，而actionPerformed是用来指定点击了这个选项后会触发的方法。
此时点击这个菜单选项后会触发start_scan方法并传递invocation为参数进去。
35-48行是核心代码，也就是从shodan获取信息的方法：
    def start_scan(self,invocation):
            http_traffic = invocation.getSelectedMessages()
            if len(http_traffic) !=0:
                    service = http_traffic[0].getHttpService()
                    hostname = service.getHost()
                    ip = socket.gethostbyname(hostname)
                    req = urllib2.Request("https://api.shodan.io/shodan/host/"+ip+"?key=")
                    response = json.loads(urllib2.urlopen(req).read())
                    print "This report is last updated on  %s" % str(response['last_update'])
                    print "IP - %s" %str(response['ip_str'])
                    print "ISP - %s" %str(response['isp'])
                    print "City - %s" %str(response['city'])
                    print "Possible Vulns - %s" %str(response['vulns'])
                    print "Open Ports -  %s" % str(response['ports'])
我们知道invocation是IContextMenuInvocation的实例，所以我们可以调用其中的任何方法，让我们看看有哪些方法：
在代码中作者调用了getSelectedMessages方法，此方法返回调用上下文菜单时用户所选择的请求或响应的详细数据包，返回IHttpRequestResponse对象的实例。
有了IHttpRequestResponse的实例，我们就可以调用其中的方法，作者只是调用了getHttpService这个方法。
后面一系列操作就是取hostname，取ip，传给shodan，解析请求结果了。
如果细心看过前面内容的同学，就可以知道burp的菜单实际上都是可以用此方法进行创建的：
下面来演示一个Send to Repeater beta。
    from burp import IBurpExtender 
    from burp import IContextMenuFactory
    from javax.swing import JMenuItem
    from java.util import List, ArrayList
    class BurpExtender(IBurpExtender, IContextMenuFactory):
        def registerExtenderCallbacks(self, callbacks):
            self._callbacks = callbacks
            self._helpers   = callbacks.getHelpers()
            self._context   = None
            # set up the extension
            callbacks.setExtensionName('IBurp')
            callbacks.registerContextMenuFactory(self)
        def createMenuItems(self,invocation):
            menu_list = ArrayList()
            inv = invocation.getSelectedMessages()
            self.inv = inv
            menu_list.add(JMenuItem("send to repeater beta", actionPerformed=self.sendtorepeater))
            return menu_list
        def sendtorepeater(self,event):
            inv = self.inv[0]
            service = inv.getHttpService()
            host = service.getHost()
            port = service.getPort()
            protocol = service.getProtocol()
            if protocol == 'https':
                is_https = 1
            else:
                is_https = 0
            req = inv.getRequest()
            self._callbacks.sendToRepeater(host,port,is_https,req,None)
我首先注册了该接口并重写了createMenuItems方法，通过JMenuItem实现了一个按钮，当用户在按钮处释放光标后会触发actionPerformed指定的方法并传递给其event参数。
这个参数不需要管，我们只需要处理invocation就好，我通过getSelectedMessages来获取菜单所处的请求以及响应的详细信息，并通过数组取值的方式仅取出请求。后续实际上就是在利用IHttpRequestResponse接口以及IHttpService接口来获取一些我们需要的参数而已了。
最后使用`self._callbacks.sendToRepeater`方法将请求传递到repeater中。
实现效果：
点击后repeater就多了一项：
可以点击go来获取响应数据包：
### IContextMenuInvocation
这个接口在上文中其实已经介绍过了，当Burp在调用IContextMenuInvocation接口时，就会使用此到此接口，我们上文中一直用的invocation，其实就是IContextMenuInvocation的实例。
在这里我会详细的解释这个接口的每个参数是如何作用的。
首先看看此接口中定义的一些属性：
emmm其实这些都是类似toolflag一样的标志位，没什么好讲的，一般用于判断你想处理的请求是否是你想处理的请求。
这么说可能有点抽象，比如你想处理的是proxy的请求，却处理了response的请求，差不多就是这么个意思。
接着看看他的方法吧：
  * getInputEvent
这个一般不会用到，用来获取鼠标事件的一些详细信息，打印出来看看就知道了。
示例：
    class BurpExtender(IBurpExtender, IContextMenuFactory):
        def registerExtenderCallbacks(self, callbacks):
            self._callbacks = callbacks
            self._helpers   = callbacks.getHelpers()
            self._context   = None
            # set up the extension
            callbacks.setExtensionName('IBurp')
            callbacks.registerContextMenuFactory(self)
        def createMenuItems(self,invocation):
            menu_list = ArrayList()
            print(invocation.getInputEvent())
输出：
  * getInvocationContext
用来获取调用该菜单时的上下文，给个demo你就清楚啦：
    from burp import IBurpExtender 
    from burp import IContextMenuFactory
    from javax.swing import JMenuItem
    from java.util import List, ArrayList
    class BurpExtender(IBurpExtender, IContextMenuFactory):
        def registerExtenderCallbacks(self, callbacks):
            self._callbacks = callbacks
            self._helpers   = callbacks.getHelpers()
            self._context   = None
            # set up the extension
            callbacks.setExtensionName('IBurp')
            callbacks.registerContextMenuFactory(self)
        def createMenuItems(self,invocation):
            menu_list = ArrayList()
            print(invocation.getInvocationContext())
此时如果我在proxy_history中调用，打印出来的结果是6，其值实际上是对应着这里的：
同样的，也是相当于toolflag一样的作用。
  * getToolFlag
顾名思义，返回的是调用菜单时所处的工具的toolflag。
demo：
    from burp import IBurpExtender 
    from burp import IContextMenuFactory
    from javax.swing import JMenuItem
    from java.util import List, ArrayList
    class BurpExtender(IBurpExtender, IContextMenuFactory):
        def registerExtenderCallbacks(self, callbacks):
            self._callbacks = callbacks
            self._helpers   = callbacks.getHelpers()
            self._context   = None
            # set up the extension
            callbacks.setExtensionName('IBurp')
            callbacks.registerContextMenuFactory(self)
        def createMenuItems(self,invocation):
            menu_list = ArrayList()
            print(invocation.getToolFlag())
如果我在proxy_history中调用，打印出来的结果是4，对应着这块：
  * getSelectedIssues
此方法用于返回菜单中所选项的详细issue信息，一般在下图这个位置调用：
返回的是IScanIssue的实例，我们可以调用其中的方法来获取issue的详细信息比如名字啊啥的。
  * getSelectedMessages
此方法返回当前菜单所选项对应的HTTP请求以及响应的详细信息，返回的IHttpRequestResponse的实例，我们可以使用其中的方法来获取当前数据包中的详细信息，这个其实我在上面已经用过了，不了解的可以去看看。
  * getSelectionBounds
不常用，不做介绍。
### ICookie
留坑。
### IExtensionHelpers
这个接口很重要，会经常用到，如果仔细留意我上边的代码，就会发现我会在每个插件里写上一句：
    self._helpers   = callbacks.getHelpers()
getHelpers方法实际上就是获取此接口的实例，此接口中可使用的方法比较多，截不完，可以来这看：[Interface
IExtensionHelpers](https://portswigger.net/burp/extender/api/burp/IExtensionHelpers.html)
下面开始逐个介绍此接口中的每个方法。
  * analyzeRequest
此方法可传递三种形式的参数，返回的是IRequestInfo的实例，我们通常使用此方法来分析请求数据包。