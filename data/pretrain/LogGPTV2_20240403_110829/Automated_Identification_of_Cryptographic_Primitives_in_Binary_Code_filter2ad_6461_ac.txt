4
4
+
+
+
load4
load3
xor
8
esp
8
load2
+
+
load1
esp
8
load2
+
load1
2
xor
load4
2
xor
load4
sbox
shl
sbox
shl
+
load3
+
load3
xor
xor
Figure 4: During the normalization process three transformation rules can be applied to the DFG of Figure
3. For each, the initial state is recalled in dashed red and the result is given in dark green. From the left
to the right we successively perform: a constant simpliﬁcation, a common subexpression elimination and a
memory simpliﬁcation.
For that purpose we design two additional rewrite rules.
The ﬁrst rule merges consecutive associative operations in-
volving constant variables. The second rule distributes dis-
tributive couple of operations involving constant variables.
6. SIGNATURE
A signature is a distinctive subgraph shared between the
normalized DFG of every instance of an algorithm. Signa-
tures should be as complete and precise as possible in order
to reduce the number of false positives and to reveal ev-
ery feature of the algorithm that we might be interested in.
Since our objective is to precisely locate the algorithm and
its parameters, the signatures must cover the full length of
the algorithm and must not be limited to some speciﬁc frag-
ments. But conversely, signatures should not be too restric-
tive so as to match the largest range of possible implemen-
tations. Ideally the normalization process should be able to
transform any instance of an algorithm into a unique repre-
sentation. However, the level of analysis and understanding
required is sometimes far beyond the reach of our rewrite
rules. When it happens, one may favor a more generic sig-
nature that leaves the part subject to variations unspeciﬁed
rather than to multiply the number of required signatures.
6.1 Signature Creation
We currently do not implement an automatic mechanism
to create new signatures, and they have to be generated
manually. Obviously, this requires some knowledge of the
assembly language and a good understanding of the algo-
rithm implementation. However, there is no prerequisite
regarding the normalization process in theory. In fact, to be
compliant with the rewrite rules, a signature can always be
normalized after its creation, like any other DFG.
6.2 Macro Signature
Despite the normalization step and careful signature de-
signs, multiple signatures are sometimes required to cover a
wide range of implementations. In such cases, to reduce their
number, we introduce macro signatures to model context-
free graph grammar. The key idea is to append to the
DFG a special vertex every time a signature is detected. It
makes possible to issue higher level queries through macro
signatures containing reference to signatures that have al-
ready been encountered. More formally a macro signature
is a graph containing usual DFG vertices (terminal symbols)
and also vertices representing other signatures (non termi-
nal symbols). We use a bottom-up parsing algorithm relying
on a subgraph isomorphism solver (discussed in Section 7).
Starting from the signatures containing only terminal sym-
bols, a special vertex is appended to the DFG every time an
instance of a signature is found. These vertices are labeled
according to their corresponding signature. Notice that dif-
ferent signatures can result in vertices of equal labels. A
macro signature s1 can be searched when every signature s2
such that s1 ⇒ s2 was searched.
Macro signature are of high interest to reduce the num-
ber of signatures that need to be tested. In fact, variations
that aﬀect disjoint parts of a DFG can be searched indepen-
dently. Let us assume an algorithm divided into n disjoint
parts, each of them with ai, 1 ≤ i ≤ n diﬀerent ways of be-
ing implemented. Without macro signatures, the number of
signatures that have to be tested to cover the full algorithm
i=1 ai. However, using macro signatures, each part can
be searched independently, covering every case with only
i=1 ai signatures. A practical example is given in Section
is(cid:81)n
(cid:80)n
8.1.
Additionally, macro signatures may be used to break down
leading to better perfor-
large graphs into smaller ones,
mances. This strategy is illustrated in Section 8.2.
6.3 Example
We continue the running example and create a signature
for our toy cipher. Assuming we want to locate the param-
eters of our algorithm, the signature should at least contain
208one vertex for each of them: the plaintext, the key and the
ciphertext and at least a path linking them together. Al-
though macro signatures were far from being mandatory in
that case, we intentionally choose to use one for illustrating
purpose. We ﬁrst create a signature that covers the access
to the substitution box (address computation plus memory
read). This signature is then reused in another signature
where the two xor operations and the parameters’ vertices
have been appended. This second signature is complete and
should be able to accurately identify our algorithm. These
signatures and the way they match the normalized DFG of
Figure 4 are shown in Figure 5. A speciﬁc label ∗ is used
for input variables. This label can be matched with any
other label (it is mandatory for input variables since they
may have produced by any operation). The two steps of the
parsing process are illustrated in Figure 5. First, on the left
hand side the substitution box signature is being searched.
Second, on the right hand side after appending a new vertex
(drawn in a rounded rectangle with the label sig1) corre-
sponding to the successfull match of the ﬁrst signature, the
complete signature is being searched.
7. SUBGRAPH ISOMORPHISM
This is the ﬁnal step of our solution. Given a normalized
DFG and a set of signatures, we want to know which sig-
natures are contained in the DFG. To this end we use the
subgraph isomorphism algorithm proposed by Ullmann [27].
A short description of this algorithm is given as follows.
As a reminder, a graph GA = {VA, EA} is a subgraph
of GB = {VB, EB} if VA ⊂ VB and EA ⊂ EB. A graph
GA = {VA, EA} is said to be isomorphic to GB = {VB, EB}
if there is a function f : VA (cid:55)→ VB such that: (v, w) ∈
EA ⇔ (f (v), f (w)) ∈ EB. Given a signature S = {VS, ES}
and a normalized DFG D = {VD, ED}, we want to ﬁnd all
subgraphs of D that are isomorphic to S. With respect to
the above deﬁnitions, our problem can be reformulated as
follows: we want to enumerate every function f : VS → VD
such that:
(v, w) ∈ ES ⇒ (f (v), f (w)) ∈ ED
(1)
Subgraph isomorphism can be achieved using a rather sim-
ple depth-ﬁrst tree-search procedure. For each vertices of the
signature: v ∈ VS, we maintain a set of possible assignment
called Av. Av is initialized with vertices of D that have
the same label than v. The algorithm works by recursively
picking one element in each possible assignment sets such
that condition 1 hold true. The f function is deﬁned by:
f (v) = u where u is the vertex that has been picked in Av.
Ullmann introduced an additional reﬁnement procedure
that takes advantage of the vertices that have already been
picked to reduce the possibilities for future picks. Let v and
w be vertices of S such that (v, w) ∈ ES. Given x ∈ Au,
if there is no vertex y ∈ Aw such that (x, y) ∈ ED, then
x can be removed from Av.
In fact, picking x from Av
will necessarily break condition 1. Every time an element
is removed or picked from one of the possible assignment
sets, we apply this new criteria trying to remove as many
elements as possible from the other possible assignment sets.
A pseudo code for Ullmann subgraph isomorphism algorithm
is given in Algorithm 1.
Despite a high theoretical complexity (the subgraph iso-
morphism problem is NP complete) we were able to achieve
acceptable performance using Ullmann algorithm in our con-
Algorithm 1 Ullmann Subgraph Isomorphism
1: function Subgraph Isomorphism(S, D)
∀v ∈ VS initialize Av. ∆ ← {Av, v ∈ VS}
2:
f is undeﬁned for every vertex of VS
3:
Recursive Search(S, D, f, ∆)
4:
5: end function
else
if ∀v ∈ VS, f (v) is deﬁned then
f deﬁnes a valid subgraph isomorphism ◊
Update(∆)
pick v ∈ VS such that f (v) is undeﬁned
while Av (cid:54)= ∅ do
6: function Recursive Search(S, D, f, ∆)
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18: end function
pick u ∈ Av. f (v) ← u
Recursive Search(S, D, f, copy(∆))
remove u from Av and set f (v) undeﬁned
end while
end if
for all (v, w) ∈ ES | f (v) is undeﬁned do
if f is deﬁned for w then
Aw ← {f (w)}
end if
if {y ∈ VD, (x, y) ∈ ED} ∩ Aw = ∅ then
for all x ∈ Av do
19: function Update(∆)
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31: end function
end for
end for
end if
remove x from Av
Update(∆) return
text. Experimental data regarding the execution time are
presented and discussed in Section 8.2.
8. EXPERIMENTAL EVALUATION
The goal of the experimental evaluation is to demonstrate
the validity of our approach. It involves two claims in par-
ticular: ﬁrst that the normalization process is able to eﬀec-
tively remove implementation variations, and second that it
is possible to create graph signatures that match every in-
stance of an algorithm once normalized. For that purpose,
we have implemented a prototype and run it on multiple test
programs. As a ﬁrst evaluation of our method, we thought
it was more relevant to analyze the performance on syn-
thetic samples rather than to directly confront our prototype
with real life programs. Synthetic samples are convenient to
thoroughly evaluate the solution in well controlled environ-
ments. Furthermore as mentioned in Section 3 our method
takes preselected fragments of binary code as input.
It is
clear that the prototype performances depend more on the
fragment’s code rather than on the fragment’s origin. Thus
synthetic samples sound perfectly relevant for our testing
purpose.
Although we do not address the problem of fragment ex-
traction in our work, we list here few heuristics that can be
used as front end ﬁlters to extract candidates. These heuris-
tics are taken from the related works discussed in Section 2.
209DFG
SBox Signature
esp
8
load2
+
load1
2
xor
sbox
shl
+
load3
xor
*
shl
+
load
r p h
o m o
s
I
DFG
esp
8
load2
+
load1
Complete Signature
(plaintext)
(key)
*
*
2
xor
sbox
shl
Isomorph
xor
sig1
+
sig1