160th byte changed
2017-02-22 10:35:49
?
2015-04-06 13:54:33
?
2015-04-06 13:54:33
71st byte changed
2017-06-09 14:17:20
254th byte missing
2017-06-09 14:18:39
254th byte changed
2017-06-09 14:21:50
254th byte changed
2016-01-07 13:54:10
230th byte changed
2017-06-09 14:23:09
87th byte changed
2017-06-09 14:50:32
254th byte changed
2017-06-09 14:51:51
?
2017-11-03 23:59:59
92nd byte changed
2017-06-09 14:53:29
2017-06-09 14:54:41
128th byte changed
2017-11-03 23:59:59 MSB as a minimum
2017-11-03 23:59:59
2017-11-03 23:59:59 MSB as a minimum
2017-11-03 23:59:59 MSB as a minimum
?
Table 2: Corrupted public keys from jTOP SLE78-powered ID card certiﬁcates. N: modulus length in bits. Work: amount of work
done to factorize modulus. N-res: residual length of modulus after known factors removed. Factors: number of factors found and
length of minimal / maximal factor found.
We were able to fully factorize one of these corrupted pub-
lic keys – the key issued in digital signature certiﬁcate to
Svetlana B. The modulus consisted of 7 factors (9-bit, 15-bit,
21-bit, 39-bit, 53-bit, 153-bit and 1762-bit). The probabilis-
tic YAFU ECM factorization process took 60 hours (work
t40.80) on a Core PI:EMAIL CPU using 2 cores. We
calculated the private exponent d in the RSA multi-prime set-
ting and, as a proof-of-concept, successfully forged a digital
signature on an empty ﬁle. The digital signature, as expected,
passed validation by the state-provided digital signature veri-
ﬁcation software (see Figure 17).
6.2
Incident response
We informed RIA about the corrupted public keys and the
successful factorization of Svetlana’s key in the meeting on
2017-02-06. At that time, 8 out of 15 initially identiﬁed certiﬁ-
cates were already revoked, possibly because the cardholders
found that the cryptographic functionality did not work and
applied for a new card.
On 2017-02-22, the certiﬁcates of Svetlana’s ID card were
suspended. In the meantime, RIA performed computations
using their resources to verify our ﬁndings and to identify
more corrupted keys in the full certiﬁcate database.
Only on 2017-06-09, the certiﬁcates of affected ID cards
(including those of Svetlana) were revoked and PPA, under
warranty, issued the cardholders new ID cards. Since the
Figure 17: Digital signature forged using factorized key of
Svetlana B.
defect in the chip could not be excluded, the replacement ID
card was also issued to Lennart, who on 2016-07-01, in a PPA
customer service point, had already successfully renewed his
keys using the renewal procedure intended for replacement
of certiﬁcates with incorrectly encoded public keys.
USENIX Association
29th USENIX Security Symposium    1797
Since the source of the corruption was not known, as a
measure, trial division with small primes was implemented to
discover corrupted moduli in the ID card production process.
Unfortunately, as the corrupted key of Raja shows, the small-
est factor of the corrupted key can be quite large and hence
cannot be discovered by this method.
The risk was ﬁnally mitigated on 2017-11-03, when all
RSA keys of jTOP SLE78-powered ID cards were revoked
due to the discovery of the ROCA ﬂaw, and manufacturing
of jTOP SLE78-powered ID cards switched to ECC keys.
A similar corruption cannot also be excluded for ECC keys,
however, we have veriﬁed that all ECC keys in our dataset
have EC points that are on the curve, and a random corruption
resulting in the EC point that is on the curve will not provide
advantage in deriving the corresponding private key.
It is important to note that the anomaly of 2040-bit RSA
moduli had already been discovered by the manufacturer in
August 2015, as new ID cards, with the expiration date of the
original cards, were produced for 2 out of the 3 cardholders
(Raja and Svetlana S.) on 2015-08-24 and 2015-09-04. For
unknown reasons the case of Raisa was missed by the manu-
facturer. For her, the replacement ID card was only issued on
2017-06-09 after we informed the authorities of the corrupted
public keys.
In 2015 the case was not handled as a security issue, since
the certiﬁcates containing the corrupted keys were revoked
only after the cardholders visited PPA to obtain the replace-
ment card. This is yet another example of a serious anomaly
in the ID card production process being mitigated by simply
issuing a replacement ID card, without ﬁnding the root cause
and without analyzing its scale and security impact.
6.3 Cause of data corruption
After Nemec et al. [18] published a method to detect moduli
vulnerable to the ROCA attack, we tried to recover the cor-
rupted moduli by modifying the modulus until the ROCA key
detection test returned a positive result. We were able to suc-
cessfully recover the corruption for 13 keys. We found that in
the case of 2040-bit RSA moduli, the byte 0x81 (100000012)
was missing in different positions for each modulus. In the
case of 2048-bit RSA moduli, the byte 0x80 (100000002) in
different positions for each modulus, was replaced with byte
0x00 (000000002). We did an exhaustive search modifying
up to 4 bits in any bit position and modifying up to 3 bytes in
any byte position, but were not able to recover corruption for
any additional keys.
The corruption of the public key could have occured at
any point up to its inclusion in the certiﬁcate. The corruption
could have also occured due to a fault in the chip, for example,
the chip failing to generate or correctly store the generated
key under some speciﬁc operational conditions (such as tem-
perature or voltage). We note, however, that these security
chips are claimed to implement a set of measures to detect
and prevent corruption even when the chip is under hostile
environmental conditions [49].
We contacted Lennart, the owner of the affected ID card,
who then shared a screenshot he had sent to the ID card
customer support on 2016-01-15, showing a Mozilla Firefox
43.0.4 error message “Peer reports failure of signature veriﬁca-
tion or key exchange (SSL_ERROR_DECRYPT_ERROR_ALERT)”
that appeared after trying to perform TLS client certiﬁcate
authentication to a server. This error means that the ID card
was able to produce a signature, but the server failed to verify
the signature using the corrupted public key from the authen-
tication certiﬁcate.
The signature was likely created using a valid private key,
since the private key operations in CRT form do not use
the modulus, but p and q. Had p or q been corrupted, the
modulus (which is the product of p and q) would be more
severely corrupted than a single bit change as we found above.
The existence of valid RSA private keys on these cards does
not exclude the possibility that the corruption of the modulus
occured while the modulus was being read or written in the
memory. The lost byte in the 2040-bit moduli case, however,
is difﬁcult to explain by memory corruption inside the chip.
In summer 2018, we contacted Inﬁneon to ask whether
they had heard of similar incidents with the product, and if
not, would they completely rule out the possibility that the
corruption could have ocurred due to a fault in the chip. To
cite Inﬁneon: “We are not aware of any process within our
system (neither software nor hardware) that could result in
such a change.” [50].
Without any additional evidence available, we put forward
the hypothesis that the corruption occured in the manufac-
turer’s personalization line during the communication be-
tween the card and the reader. The lost byte in the case of
2040-bit moduli could be explained by retransmission failure
of an incorrectly received byte in the APDU transmission
over byte-oriented T=0 protocol. For 4 out of the 13 moduli,
for which the corruption was recovered, we see that the 254th
byte (the second most signiﬁcant byte) of the moduli had been
corrupted. In case of T=0 protocol, this would correspond to
the second character transmitted after the procedure byte, as-
suming that a 256-byte modulus was returned by the chip in
a single APDU response. Since the manufacturer’s personal-
ization line uses special-purpose hardware, such faults cannot
be ruled out.
6.4 Prevention and detection measures
In traditional PKI deployments, the risk of including a cor-
rupted public key in the certiﬁcate is mitigated by employing
the PKCS#10 [51] standard that requires the certiﬁcate sign-
ing request (CSR) to be signed using the corresponding pri-
vate key. In this case, the CA considered this requirement un-
1798    29th USENIX Security Symposium
USENIX Association
necessary, relying on publicly undocumented organizational
measures, which the manufacturer is required to implement
to ensure the manufacturer’s possession of the corresponding
private key (Section 3.2.1.1 in [32]). As we now see, these
unknown organizational measures, in practice, proved to be
insufﬁcient to provide the assurance a signed CSR would have
provided.
Regardless of whether the moduli were corrupted inside
the chip or in the transmission from the chip, the lesson here
is that even for personalization performed in a trusted environ-
ment, the integrity of critical APDU data should be protected
by transmitting it over a MAC-protected secure channel. Had
this been the case, the source of the corruption would have
been located with cryptographic precision.
To avoid this and other personalization faults where a
wrong certiﬁcate or a certiﬁcate with an incorrect public key is
loaded into the card, the card should perform an internal sign-
verify sanity check to verify that the public key in the loaded
certiﬁcate corresponds to the private key the card stores.
6.5 Valid RSA moduli from unknown source
We put forward the hypothesis that the 4 certiﬁcates issued
for the ID cards of Vladislav and Pirgit, actually do contain
valid RSA keys, but these keys have not been generated by
the corresponding ID cards.
We base this hypothesis on the fact that contrary to all other
certiﬁcates from Table 2, these certiﬁcates have been issued
in the certiﬁcate renewal process in a PPA customer service
point and not in the initial ID card personalization process.
We see that 3 of these keys have MSBs of modulus that are
not in the range 144–168 generated by jTOP SLE78 platform,
but all 4 are in the range 144–255, which corresponds to the
range for RSA keys generated by the manufacturer outside
the ID card (Section 5.1.4).
It seems that due to some unknown failure, for these ID
cards, the manufacturer’s backend performed the renewal pro-
cess assuming that they are powered by the jTOP SLE66
platform. The keys were generated and corresponding cer-
tiﬁcates were activated without detecting that the renewal
process (including the key import) was not successful. With-
out any other evidence available, we will only be able to prove
or disprove this hypothesis once factorization of these moduli
becomes feasible.
In the context of eIDAS, key management is the responsi-
bility of the CA. The fact that the manufacturer’s malpractice
was not discovered in the internal and external audits of the
CA shows the limited level of assurance these audits provide.
Compliance violations are also frequent issues among
web browser CAs [52]. The browser vendors, however, re-
quire CAs to publish detailed reports of discovered violations
thereby forcing CAs to investigate the incidents and improve
their practices [53, 54]. In the event CAs show lack of trust-
worthiness, they can be distrusted by the browsers [55].
Similarly, the EU member states are required to establish
supervisory bodies exercising state supervision over trust ser-
vice providers’ compliance to the requirements of eIDAS. In
the case of the Estonian ID card, applying coercive measures
might be hindered by the fact that the ID card manufacturer
(and hence the CA) is the government’s contractual partner on
which the state is dependent until at least the 5-year ID card
manufacturing contract expires. Nevertheless, the ﬁndings
of this work show that the state cannot rely on the security
guarantees provided in the ID card manufacturing contract
and instead should seek effective means of oversight, either
through public policy or the terms of ID card manufacturing
contract.
Overall, the ﬁndings of this paper provide yet another exam-
ple (see [18, 46] for others) that it is not sustainable to blindly
trust the security of the manufacturing process. From the
technical perspective, we suggest looking for fault-tolerant
designs, for example, those involving threshold cryptogra-
phy [56–58]. These designs should seek to provide effec-
tive means to prevent accidental failures and ensure that in-
tentional malice would require higher conspiracy from the
manufacturer and hence increase the risk of detection and
attribution.
Unfortunately, we have not seen fundamental changes in
the organization and execution of the Estonian ID card manu-
facturing process, therefore incidents like these, in one form
or another, are destined to happen again. We hope, however,
that the public knowledge of these incidents have changed the
perception of the ID card as being infallible. This should now
allow the construction of better security systems and legal
rules which are able to deal with potential security failures of
the ID card.
Acknowledgments
7 Discussion and conclusions
All the issues, except for the manufacturer’s decision to breach
the security requirements by generating keys outside the ID
card, could have been avoided by improved security engineer-
ing practices. While the ﬂaws of duplicate public keys and
corrupted public keys were discovered by the manufacturer,
they were not sufﬁciently investigated and led to repeated
incidents.
We thank Arne Ansper for the idea to use ROCA vulnerable
moduli detection tests to recover the corrupted public keys,
Alex Halderman for the initial ID card certiﬁcate dataset (De-
cember 2012), owners of the affected ID cards who provided
information and participated in the experiments, and those
persons who provided comments and feedback for this paper.
This research was supported by the European Regional De-
velopment Fund through the Estonian Centre of Excellence
in ICT Research under grant number EU48684.
USENIX Association
29th USENIX Security Symposium    1799
References
[1] Estonian Information System Authority. ID card usage
statistics inferred from queries to OCSP service, 2019.
[2] ERR News.
Police claim 152 million from
producer Gemalto, September 2018.
ID card
https://news.err.ee/864523/police-claim-
152-million-from-id-card-producer-gemalto.
[3] Arnis Parsovs. Practical Issues with TLS Client Cer-
tiﬁcate Authentication. In Proceedings of the Network
and Distributed System Security Symposium (NDSS),
San Diego, CA, February 2014. http://dx.doi.org/
10.14722/ndss.2014.23036.
[4] ID Help Centre. I’ve received encrypted document, how
can I decrypt it?, October 2018. https://www.id.ee/
index.php?id=38893.
[5] The European Parliament and the Council of the
Regulation 910/2014 on elec-
European Union.
tronic identiﬁcation and trust services for electronic
in the internal market and repeal-
transactions
ing Directive 1999/93/EC, 2014.
https://eur-
lex.europa.eu/legal-content/EN/TXT/?uri=
uriserv:OJ.L_.2014.257.01.0073.01.ENG.
[6] ORGA Kartensysteme GmbH. MICARDO Public
Chip Card Operating System Version 2.1 User Manual,
September 2001. https://cybersec.ee/storage/
mic21_druck.pdf.
[7] ID Süsteemide AS. EstEID card speciﬁcation v2.01
(in Estonian), November 2002. http://www.id.ee/
public/EstEID_Spetsifikatsioon_v2.01.pdf.