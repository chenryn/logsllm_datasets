MQCHAR QMName[MQ_Q_MGR_NAME_LENGTH+1] = "";
MQCHAR LogEvQ[MQ_Q_NAME_LENGTH] = "SYSTEM.ADMIN.LOGGER.EVENT";
MQHOBJ hEventQueue = MQHO_UNUSABLE_HOBJ;
PMQCHAR pBuffer = NULL;
printf("\n/*************************************/\n");
printf("/* Sample Logger Event Monitor start */\n");
printf("/*************************************/\n");
/********************************************************************/
/* Parse any command line options */
/********************************************************************/
if (argc > 1)
{
strncpy(QMName, argv[1], (size_t)MQ_Q_MGR_NAME_LENGTH);
}
pBuffer = (PMQCHAR)malloc(MAX_MESSAGE_LENGTH);
if (pBuffer == NULL)
{
printf("Can't allocate %d bytes\n", MAX_MESSAGE_LENGTH);
goto MOD_EXIT;
}
/********************************************************************/
50 Monitoring and Performance for IBM MQ
/* Connect to the specified (or default) queue manager */
/********************************************************************/
MQCONN( QMName,
&hConn,
&CompCode,
&Reason);
if (Reason != MQRC_NONE)
{
printf("MQCONN ended with reason code %" Int32 "d\n", Reason);
goto MOD_EXIT;
}
/********************************************************************/
/* Open the logger event queue for input */
/********************************************************************/
strncpy(ObjDesc.ObjectQMgrName, QMName, MQ_Q_MGR_NAME_LENGTH);
strncpy(ObjDesc.ObjectName, LogEvQ, MQ_Q_NAME_LENGTH);
MQOPEN( hConn,
&ObjDesc,
MQOO_INPUT_EXCLUSIVE,
&hEventQueue,
&CompCode,
&Reason );
if (Reason != MQRC_NONE)
{
printf("MQOPEN failed for queue manager %.48s Queue %.48s Reason: %" Int32 "d\n",
ObjDesc.ObjectQMgrName,
ObjDesc.ObjectName,
Reason);
goto MOD_EXIT;
}
else
{
/******************************************************************/
/* Start processing event messages */
/******************************************************************/
ProcessPCF(hConn, hEventQueue, pBuffer);
}
MOD_EXIT:
if (pBuffer != NULL)
{
free(pBuffer);
}
/********************************************************************/
/* Close the logger event queue */
/********************************************************************/
if (hEventQueue != MQHO_UNUSABLE_HOBJ)
{
MQCLOSE(hConn, &hEventQueue, MQCO_NONE, &CompCode, &Reason);
}
/********************************************************************/
/* Disconnect */
/********************************************************************/
if (hConn != MQHC_UNUSABLE_HCONN)
{
MQDISC(&hConn, &CompCode, &Reason);
}
return 0;
}
/******************************************************************************/
/* Function: ProcessPCF */
/******************************************************************************/
/* */
/* Input Parameters: Handle to queue manager connection */
/* Handle to the opened logger event queue object */
/* Pointer to a memory buffer to store the incoming PCF */
/* message */
/* */
/* Output Parameters: None */
/* */
/* Logic: Wait for messages to appear on the logger event queue and display */
/* their formatted contents. */
/* */
IBM MQ Monitoring and performance 51
/******************************************************************************/
static void ProcessPCF(MQHCONN hConn,
MQHOBJ hEventQueue,
PMQCHAR pBuffer)
{
MQCFH * pCfh;
MQCFST * pCfst;
MQGMO Gmo = { MQGMO_DEFAULT };
MQMD Mqmd = { MQMD_DEFAULT };
PMQCHAR pPCFCmd;
MQLONG CompCode = MQCC_OK;
MQLONG Reason = MQRC_NONE;
MQLONG MsgLen;
PMQCHAR Parm = NULL;
Gmo.Options = MQGMO_WAIT +
MQGMO_CONVERT +
MQGMO_FAIL_IF_QUIESCING;
Gmo.WaitInterval = MQWI_UNLIMITED; /* Set timeout value */
/********************************************************************/
/* Process response Queue */
/********************************************************************/
while (Reason == MQRC_NONE)
{
memcpy(&Mqmd.MsgId, MQMI_NONE, sizeof(Mqmd.MsgId));
memset(&Mqmd.CorrelId, 0, sizeof(Mqmd.CorrelId));
MQGET( hConn,
hEventQueue,
&Mqmd,
&Gmo,
MAX_MESSAGE_LENGTH,
pBuffer,
&MsgLen,
&CompCode,
&Reason );
if (Reason != MQRC_NONE)
{
switch(Reason)
{
case MQRC_NO_MSG_AVAILABLE:
printf("Timed out");
break;
default:
printf("MQGET ended with reason code %" Int32 "d\n", Reason);
break;
}
goto MOD_EXIT;
}
/******************************************************************/
/* Only expect PCF event messages on this queue */
/******************************************************************/
if (memcmp(Mqmd.Format, MQFMT_EVENT, MQ_FORMAT_LENGTH))
{
printf("Unexpected message format '%8.8s' received\n", Mqmd.Format);
continue;
}
/*******************************************************************/
/* Build the output by parsing the received PCF message, first the */
/* header, then each of the parameters */
/*******************************************************************/
pCfh = (MQCFH *)pBuffer;
if (pCfh->Reason != MQRC_NONE)
{
printf("-----------------------------------------------------------------\n");
printf("Event Message Received\n");
Parm = ParmToString(pCfh->Command);
if (Parm != NULL)
{
printf("Command :%s \n",Parm);
}
else
{
printf("Command :%" Int32 "d \n",pCfh->Command);
52 Monitoring and Performance for IBM MQ
}
printf("CompCode :%" Int32 "d\n" ,pCfh->CompCode);
Parm = ParmToString(pCfh->Reason);
if (Parm != NULL)
{
printf("Reason :%s \n",Parm);
}
else
{
printf("Reason :%" Int32 "d \n",pCfh->Reason);
}
}
pPCFCmd = (PMQCHAR) (pCfh+1);
printf("-----------------------------------------------------------------\n");
while(pCfh->ParameterCount--)
{
pCfst = (MQCFST *) pPCFCmd;
switch(pCfst->Type)
{
case MQCFT_STRING:
Parm = ParmToString(pCfst->Parameter);
if (Parm != NULL)
{
printf("%-32s",Parm);
}
else
{
printf("%-32" Int32 "d",pCfst->Parameter);
}
fwrite(pCfst->String, pCfst->StringLength, 1, stdout);
pPCFCmd += pCfst->StrucLength;
break;
default:
printf("Unrecognised datatype %" Int32 "d returned\n", pCfst->Type);
goto MOD_EXIT;
}
putchar('\n');
}
Sample output
This application produces the following form of output:
/*************************************/
/* Sample Logger Event Monitor start */
/*************************************/
-----------------------------------------------------------------
Event Message Received
Command :Logger Event Command
CompCode :0
Reason :Logger Status
-----------------------------------------------------------------
Queue Manager Name CSIM
Current Log Extent AMQA000001
Restart Log Extent AMQA000001
Media Log Extent AMQA000001
Log Path QMCSIM
-----------------------------------------------------------------
Related concepts
“Logger event usage” on page 49
Use this page to view how you can use logger events to determine the log extents that are no longer
required for queue manager restart, or media recovery.
“Command event usage” on page 47
IBM MQ Monitoring and performance 53
Use this page to view how you can use command events to generate an audit trail of the commands that
have run
Related reference
“Logger event generation” on page 48
Use this page to view the situations that cause logger events to be generated and to understand the
circumstances in which logger events are not generated
Authority configuration events
Authority configuration events are output when a change is made from any of the security control
operations through the command line, MQSC, PCF, or corresponding IBM i commands.
The event data contains the following information:
Origin information
comprises the queue manager from where the change was made, the ID of the user that made the
change, and how the change came about, for example by a console command.
Context information
a replica of the context information in the message data from the command message.
Context information is included in the event data when the command was entered as a message on
the SYSTEM.ADMIN.COMMAND.QUEUE queue.
Authority Record identity
comprises the profile name, and object type of the authority record.
Object attributes
comprises the values of all the attributes in the authority record.
In the case of change authority record events, two messages are generated, one with the information
before the change, the other with the information after the change.
Every event message that is generated is placed on the SYSTEM.ADMIN.CONFIG.EVENT queue.
Related reference
“Event types” on page 11
Use this page to view the types of instrumentation event that a queue manager or channel instance can
report
Authority configuration event generation
Use this page to view the situations that cause authority configuration events to be generated, and to
understand the circumstances in which authority configuration events are not generated.
Authority configuration events notify you about changes to the attributes of an authority record. There are
three types of authority configuration event:
• Change Authority Record
• Delete Authority Record
• Refresh Authority Record
An authority event message is put to the configuration event queue, when the CONFIGEV queue manager
attribute is set to ENABLED and any of the following commands, or their MQSC equivalent, are issued,
even if there is no actual change to the authority record:
• Delete Authority Record PCF command
• Set Authority Record PCF command
• setmqaut control command
• RVKMQMAUT CL command
• GRTMQMAUT CL command
54 Monitoring and Performance for IBM MQ
When authority configuration events are not generated
The authority configuration event messages are not generated in the following circumstances:
• When a command fails
• When a queue manager encounters an error trying to put a message on the event queue, in which case
the command completes, but no event message is generated
• When creating or deleting a queue manager
• When an object is deleted regardless of the AUTHREC option on the delete command. The
corresponding command event shows that operation, which does not apply to the authority record
for individual users.
Related concepts
“Command events” on page 45
Command events are notifications that an MQSC, or PCF command has run successfully.
Related reference
REFRESH QMGR
Sample program to monitor instrumentation events on
Multiplatforms
amqsevt formats the instrumentation events that a queue manager can create, and is supplied with IBM
MQ for Multiplatforms. The program reads messages from event queues, and formats them into readable
strings.
As a sample program, both source and binary are provided. The sample is provided on all the
Multiplatforms, including IBM i.
The single binary file amqsevt (or amqsevt.exe) is shipped in the samples fileset and is installed in the
samples bin (tools\c\samples\bin or bin64) directory.
The source files amqsevta.c is also shipped in the samples fileset, and is installed in the samples
directory, that is, tools\c\samples on Windows.
Note that the program can read from multiple event queues, and subscribe to multiple topics, by using
MQCB to retrieve the messages.
When running as a client, the sample can connect to any queue manager including z/OS.
Attention: You can use the program without specifying any parameters, in which case the program
attempts to connect to the default queue manager and read messages from the standard set of
event queues (SYSTEM.ADMIN.*.EVENT).
In this situation, the program waits forever for messages, until you press the Enter key to end the
program.
However, you are more likely to use the program with the various options described.
IBM MQ Monitoring and performance 55
Syntax
amqsevt
-m QMgrName
1
-r Reconnection Options d Reconnect Disabled
r Reconnect
m Reconnect Queue manager
-b Browse Messages -c Connect as Client
-d Print Definitions without formatting -u User ID
2 2
-w Wait Time -t Topic -q Queue
-o 
Notes:
1 Available only when being used as a client
2 Queues and topics can have multiple entries
Optional parameters
-m QueueManagerName
Specify a specific queue manager for reading events.
-r Reconnection Options
Auto reconnection options when used as a client. The possible values are:
d
Reconnect the client disabled
r
Reconnect the client
m
Reconnect the queue manager
-b
Browse records only, rather than destructively reading the messages
-c
Selects connection as a client.
-d
Selects the printing mode used in the second example. The MQI constants are printed exactly as they
appear in the header files.
-u User ID
Specify a specific user and causes a prompt to appear requesting a password
-w Wait
Causes the program to exit if no event messages have arrived within the number of seconds specified.
Note that, if you do not specify a time, the program only ends normally when you press the Enter key.
56 Monitoring and Performance for IBM MQ
-t Topic and
-q Queue
Both the -q and -t options can be given multiple times on the command line.
Therefore, it is possible to read from some standard queues and also from topics (if events are being
sent to them) from a single run of the program.
If no queues or topics are named on the command line, the default event queues are opened.
Note: The program detects if it has connected to a z/OS queue manager as a client, and changes the
default set of event queues appropriately, as z/OS does not have the SYSTEM.ADMIN.LOGGER.EVENT
queue.
When topics are used, the program uses a non-durable subscription with a managed queue so that
everything gets cleaned out when it exits.
-o 