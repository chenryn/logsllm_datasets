title:RILAnalyzer: a comprehensive 3G monitor on your phone
author:Narseo Vallina-Rodriguez and
Andrius Aucinas and
M&apos;ario Almeida and
Yan Grunenberger and
Konstantina Papagiannaki and
Jon Crowcroft
RILAnalyzer: a Comprehensive 3G Monitor On Your Phone
Narseo
∗
Vallina-Rodriguez
ICSI
PI:EMAIL
Andrius Aucinas
Computer Laboratory
University of Cambridge
Mario Almeida
Telefonica Research
PI:EMAIL
PI:EMAIL
Yan Grunenberger
Telefonica Research
PI:EMAIL
Konstantina
Papagiannaki
PI:EMAIL
Telefonica Research
Jon Crowcroft
Computer Laboratory
University of Cambridge
PI:EMAIL
ABSTRACT
The popularity of smartphones, cloud computing, and the
app store model have led to cellular networks being used
in a completely diﬀerent way than what they were designed
for. As a consequence, mobile applications impose new chal-
lenges in the design and eﬃcient conﬁguration of constrained
networks to maximize application’s performance. Such dif-
ﬁculties are largely caused by the lack of cross-layer under-
standing of interactions between diﬀerent entities - applica-
tions, devices, the network and its management plane. In
this paper, we describe RILAnalyzer, an open-source tool
that provides mechanisms to perform network analysis from
within a mobile device. RILAnalyzer is capable of record-
ing low-level radio information and accurate cellular net-
work control-plane data, as well as user-plane data. We
demonstrate how such data can be used to identify previ-
ously overlooked issues. Through a small user study across
four cellular network providers in two European countries
we infer how diﬀerent network conﬁgurations are in reality
and explore how such conﬁgurations interact with applica-
tion logic, causing network and energy overheads.
Categories and Subject Descriptors
C.2.3 [Computer-communication networks]: Network
OperationsNetwork Monitoring
General Terms
Design, Measurement, Performance
Keywords
Energy, Mobile, Radio, Cellular, Networks, RNC
∗
at the University of Cambridge.
This work was done while the author was a PhD student
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
IMC ’13 Barcelona, Spain
Copyright 2013 ACM 978-1-4503-1953-9/13/10 ...$15.00.
http://dx.doi.org/10.1145/2504730.2504764.
1.
INTRODUCTION
The success of mobile apps has exposed new issues for
end-users (battery life, erratic connectivity), and network
providers (coverage and dynamic load management) that
were not initially expected on its design. As opposed to
wired and WiFi networks, cellular networks have clearly sep-
arated control-plane for signaling traﬃc and user-plane for
user traﬃc respectively. Unfortunately, as previous research
has revealed [1,2], the control plane directly impacts on user
plane performance and vice-versa.
The way applications use the network aﬀect its control-
plane by increasing signaling traﬃc. The eﬀects also depend
on the network conﬁguration. On one hand, the goal is to
minimize the network load and improve spectrum eﬃciency.
On the other hand, inappropriate network conﬁgurations
can decrease the battery life of the handset and increase
its communication latency. The two factors are not orthog-
onal and it is necessary to take into account both the way
applications use the network (i.e. user plane) as well as the
way network conﬁguration aﬀects applications (i.e. control
plane) to alleviate network and energy ineﬃciencies.
In order to understand application-network dynamics and
their inter-dependencies, it is important to follow a cross-
layer approach that spans from applications and user events,
to the behavior of the control-plane. A major challenge
for such analysis is accessing the diﬀerent layers: neither
control-plane information is generally exposed by the radio
driver to the mobile OS (only from within the operator),
nor user and application events other than network packets
are sent to the mobile operator. As a consequence, most
of the previous research has been performed either thanks
to privileged access to internal and proprietary data from
mobile carriers [3–5], expensive test-beds [2] and diagnostic
tools [6], or by emulating low-level control-plane events on
the terminal [7]. In this paper, we present RILAnalyzer, a
software and handset-oriented approach that enables gather-
ing of accurate control-plane and user-plane data, including
any layer on the protocol stack, “in the wild” with real users
traﬃc load, and network conﬁgurations.
Firstly, we review the classical vantage points in cellu-
lar network research, including low-level diagnostic tools.
We discuss their capability and openness in capturing the
ground truth in terms of control plane events, user plane,
as well as their scope in terms of scale and layers. Previous
research is classiﬁed based on the type of data and vantage
point they use in their analysis. Secondly, we present an
Vantage point
1. Cellular network components
2. GGSN and IP Core
3. Mobile OS
4. Engineering tools
Control plane User plane
Ground truth
Inferred
Inferred
Ground truth
(cid:2)
(cid:2)
Scale
Large
Large
Medium
Small
Process ID OS/User events
Access
Reverse DNS
(cid:2)
(cid:2)
Operator/Vendor
Operator/Vendor
Open
Licensed/Open
Table 1: Comparison of the diﬀerent vantage points used for characterizing cellular networks and mobile application perfor-
mance along six diﬀerent axis.
(cid:19)(cid:48)(cid:41)(cid:42)(cid:27)(cid:35)(cid:19)(cid:27)(cid:40)(cid:46)(cid:27)(cid:40)(cid:1)
(cid:19)(cid:25)(cid:40)(cid:27)(cid:27)(cid:36)(cid:1)(cid:41)(cid:42)(cid:23)(cid:42)(cid:27)(cid:1)
(cid:18)(cid:10)(cid:13)(cid:2)(cid:36)(cid:23)(cid:34)(cid:48)(cid:49)(cid:27)(cid:40)(cid:2)(cid:25)(cid:43)(cid:46)(cid:32)(cid:42)(cid:48)(cid:1)
(cid:20)(cid:6)(cid:13)(cid:6)(cid:17)(cid:9)(cid:16)(cid:15)(cid:22)(cid:1)(cid:7)(cid:18)(cid:2)(cid:14)(cid:6)(cid:21)(cid:16)(cid:18)(cid:12)(cid:1)
(cid:23) (cid:43) (cid:37) (cid:36) (cid:1)
(cid:13) (cid:37) (cid:25)
(cid:8) (cid:41) (cid:35) (cid:4) (cid:27) (cid:34)(cid:34)
(cid:16)(cid:27)(cid:35)(cid:4)(cid:37)(cid:35)(cid:35)(cid:23)(cid:36)(cid:26)(cid:1)(cid:54)(cid:18)(cid:27)(cid:39)(cid:45)(cid:27)(cid:41)(cid:42)(cid:55)(cid:1)
(cid:20)(cid:27)(cid:34)(cid:27)(cid:38)(cid:31)(cid:37)(cid:36)(cid:48)(cid:1)
(cid:14)(cid:23)(cid:36)(cid:23)(cid:30)(cid:27)(cid:40)(cid:1)
(cid:18)(cid:10)(cid:13)(cid:1)
(cid:54)(cid:18)(cid:10)(cid:13)(cid:11)(cid:51)(cid:18)(cid:10)(cid:13)(cid:5)(cid:55)(cid:1)
(cid:4)(cid:37)(cid:36)(cid:42)(cid:40)(cid:37)(cid:34)(cid:53)(cid:17)(cid:34)(cid:23)(cid:36)(cid:27)(cid:1)(cid:26)(cid:23)(cid:42)(cid:23)(cid:1)(cid:1)
(cid:54)(cid:10)(cid:17)(cid:4)(cid:1)(cid:3)(cid:32)(cid:36)(cid:26)(cid:27)(cid:40)(cid:55)(cid:1)
(cid:3)(cid:9)(cid:8)(cid:13)(cid:11)(cid:9)(cid:7)(cid:15)(cid:10)(cid:7)(cid:2)(cid:8)(cid:4)(cid:1)(cid:7)(cid:9)(cid:5)(cid:5)(cid:6)(cid:8)(cid:5)(cid:1)
(cid:14)(cid:12)(cid:4)(cid:11)(cid:15)(cid:10)(cid:7)(cid:2)(cid:8)(cid:4)(cid:1)(cid:7)(cid:9)(cid:5)(cid:5)(cid:6)(cid:8)(cid:5)(cid:1)
(cid:3)(cid:16)(cid:16)(cid:20)(cid:1)
(cid:15)(cid:27)(cid:42)(cid:47)(cid:37)(cid:40)(cid:33)(cid:13)(cid:37)(cid:30)(cid:19)(cid:27)(cid:40)(cid:46)(cid:32)(cid:25)(cid:27)(cid:1)
(cid:17)(cid:23)(cid:25)(cid:33)(cid:27)(cid:42)(cid:52)(cid:17)(cid:10)(cid:5)(cid:1)
(cid:36)(cid:29)(cid:37)(cid:30)(cid:1)
(cid:54)(cid:17)(cid:23)(cid:40)(cid:41)(cid:27)(cid:40)(cid:55)(cid:1) (cid:17)(cid:23)(cid:25)(cid:33)(cid:27)(cid:42)(cid:1)
(cid:32)(cid:38)(cid:42)(cid:23)(cid:24)(cid:34)(cid:27)(cid:41)(cid:1)
(cid:17)(cid:23)(cid:25)(cid:33)(cid:23)(cid:30)(cid:27)(cid:1)(cid:36)(cid:23)(cid:35)(cid:27)(cid:1)(cid:28)(cid:37)(cid:40)(cid:1)(cid:17)(cid:10)(cid:5)(cid:1)
(cid:17)(cid:23)(cid:25)(cid:33)(cid:23)(cid:30)(cid:27)(cid:14)(cid:23)(cid:36)(cid:23)(cid:30)(cid:27)(cid:40)(cid:1)
Figure 2: Data ﬂow between the diﬀerent components
Plane
Control
Data
Data
Cellular technology (GPRS/UMTS/HSPA), RNC
state, number of HSPA channels, SNR indicators
(e.g. RSCP and EC/IO), Cell ID
Screen state, transport/network layer header, IP
header, process ID owning socket
Table 2: Data collected by RILAnalyzer.
data on an external terminal for processing. This makes it
diﬃcult to correlate between control-plane information and
on-device logs, as well as perform “in situ” experiments.
Overall, some vantage points can oﬀer privileged access
to the network’s ground truth at the expense of gathering
limited data across the layers or geographical areas, diﬀer-
ent operators, number of events captured etc. By leverag-
ing terminal capabilities, one could achieve open and decent
accuracy across multiple levels (UI events, application, OS
events), but even in that case, OS and network design, and
current monitoring tools make performing experiments out
of the research lab unrealistic. This leaves out an interesting
possibility: how can nearly complete, integrated ground truth
knowledge be obtained at the terminal level in the wild?
4.
INTRODUCING RILANALYZER
To overcome the limitations described above, we imple-
mented RilAnalyzer for rooted Android devices with In-
tel/Inﬁneon XGold chipsets. The tool is publicly available
at [18]. Some of the most popular Android devices (e.g.
Samsung Galaxy SII/SIII) use this chipset. Figure 2 and
Table 2 describe its software architecture and the informa-
tion it collects. As opposed to other analysis based on data
collected from the OS [15, 19], our implementation allows
for gathering and correlation of user, application, and OS
events with control and user-plane data in a single memory
space from within the mobile handset.
Control-plane logging: Most mobile platforms are shipped
with a dedicated modem chip which runs a real-time ﬁrmware
in isolation. The main OS of the phone (e.g. Android)
communicates with the baseband using the Radio Interface
Layer (RIL). A typical Android’s RIL spans across three dif-
ferent software sub-components: high-level RILJ (Java mod-
ule that exposes RIL interface at the Android framework
level), the low-level vendor RIL library (that implements
vendor-speciﬁc messages communication with the modem
serial interface), and a RIL Daemon (that runs in memory
and translates packets and commands between RILJ and
vendor RIL). Although developers can access events such
as ongoing calls and the type of cellular network with the
public APIs exposed by RILJ, the OS is not capable of ac-
cessing directly any control-plane information such as RNC
states [1]. This information by default stays in the ﬁrmware.
The communication between RILJ and vendor RIL hap-
pens through special commands (similar to AT commands
for PSTN modems) handled by the RILD. Some modems,
including those in highly popular Android devices (e.g. Sam-
sung Galaxy SII/SIII) also facilitate a way of sending spe-
cial, and chipset-dependent commands to the vendor RIL
for ﬁeld-test and debugging measurements reserved to radio
engineers. In the case of Samsung’s XGold-based handsets,
this information is displayed on a foreground application
that is launched by entering *#*#197328640#*#* on the di-
aler. Among many other low-level information, it provides
access to RF status (e.g. RNC state, HSPA channels), signal-
ing traﬃc, and control-plane information such as the band
of radio access technology (RAT) by converting GUI events
into special commands used to poll the radio modem for
speciﬁc control-plane data.
Although multiple control-plane events can be obtained
with such codes, they are not publicly documented. As a re-
sult, we had to identify the necessary requests triggering the
information we were interested on by adding hooks on RILJ.
In particular, we are interested in logging RNC states, which
are obtained through the code *#*#0011#*#*. Furthermore,
any application that interacts with RIL has to use speciﬁc
radio system permissions, and use non-public RILJ’s meth-
ods to send OemCommands to RIL Daemon on a request/reply
basis. To overcome these limitations, we implemented a sys-
tem tool that runs in the background and polls the modem
at the maximum frequency the device responds at, approx-
imately every second (1291 ± 119 ms).
User-plane logging: To log user-plane information we