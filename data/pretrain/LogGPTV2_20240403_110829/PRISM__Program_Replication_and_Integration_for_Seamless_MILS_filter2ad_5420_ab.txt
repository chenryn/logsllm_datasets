Figure 4. Actual ﬁle structure
The Veriﬁer checks whether BLP security policy will be
preserved by a patch received from an SLS partition. If so,
the Patcher applies that patch to the canonical representation
of a ﬁle. This ﬁle may be stored within a dedicated MLS
ﬁle system or hosted using encryption in an SLS enclave.
The Releaser strips high-level content to produce sanitised
versions of a canonical MLSDoc that are appropriate for
any target security level. This life cycle is easiest to explain
starting with a trusted release.
284
0: 4d 4c 53 44 49 46 46 00 61 a0 61 84 df 28 c2 86
10: 30 c3 8a 9b 01 16 48 1a 05 00 00 00 18 00 00 00
20: 00 00 00 00 20 10 00 00 6c 0d 00 00 05 01 00 00
30: 00 00 00 00 af 01 00 00 00 00 00 00 00 00 00 00
MLSDIFF.a.a..(..
0.....H.........
.... ...l.......
................
MLS Patch file
Header:
MLSDIFF
0x0
61a06184df28c28630c38a9b0116481a
magic:
flags:
uuid:
version: 5
ctrl:
diff:
file:
24 (0x18)
0 (0x0)
4128 (0x1020)
Control Table:
Diff
Extra
Skip
-------------------------------
0
0
3436
431
261
0
Extra:
40: 3c 77 3a 70 3e 3c 77 3a 70 50 72 3e 3c 77 3a 73
50: 70 61 63 69 6e 67 20 77 3a 61 66 74 65 72 3d 22
60: 31 30 30 22 20 77 3a 62 65 66 6f 72 65 3d 22 31
70: 30 30 22 2f 3e 3c 2f 77 3a 70 50 72 3e 3c 77 3a
80: 72 3e 3c 77 3a 74 3e 28 53 29 20 4f 50 45 52 41
90: 54 49 4f 4e 20 46 4f 52 54 49 54 55 44 45 20 53
a0: 4f 55 54 48 3a 20 54 68 65 20 46 69 72 73 74 20
b0: 55 53 20 41 72 6d 79 20 47 72 6f 75 70 2c 20 63
c0: 6f 6d 6d 61 6e 64 65 64 20 62 79 20 4c 74 2e 20
d0: 47 65 6e 2e 20 50 61 74 74 6f 6e 20 61 6e 64 20
e0: 77 68 69 63 68 20 69 73 20 61 6d 61 73 73 65 64
f0: 20 69 6e 20 4b 65 6e 74 2c 20 77 69 6c 6c 20 63
100: 72 6f 73 73 20 74 68 65 20 45 6e 67 6c 69 73 68
110: 20 43 68 61 6e 6e 65 6c 20 61 6e 64 20 6c 61 6e
120: 64 20 61 74 20 50 61 73 20 64 65 20 43 61 6c 61
130: 69 73 2e 3c 2f 77 3a 74 3e 3c 2f 77 3a 72 3e 3c
140: 2f 77 3a 70 3e
(S) OPERA
TION FORTITUDE S
OUTH: The First
US Army Group, c
ommanded by Lt.
Gen. Patton and
which is amassed
in Kent, will c
ross the English
Channel and lan
d at Pas de Cala
is.
Figure 5. Example patch ﬁle based on difference between Secret and Top
Secret views in Figure 6
should be applied to, a control table specifying the list of
copies (as “diff”s with null bytes), insertions (“extra”) and
deletions (“skip”), and an extra section containing the strings
of data to be inserted.
In this case the patch translates as: (1) copy the ﬁrst 3436
bytes from the original ﬁle; (2) insert the ﬁrst 261 bytes
from the extra section; (3) delete the next 0 bytes that were
in the original; and (4) copy the remaining 431 bytes; with
no further insertions or deletions.
When a patch is received by the TCB, the trusted veriﬁer
checks that any changes to the canonical document will
modify data only at the security level associated with that
partition, thus enforcing a BLP security policy with “strong
tranquillity” [5]. The content of lower or higher-level objects
may not be modiﬁed. At
the canonical MLSDoc level,
however, lower-level objects may be split to make way for
insertions of higher-level objects, and higher-level objects
may be reordered as described below. Importantly, though,
when using paranoid mode none of the splits or reorderings
caused by an edit will be observable in the sanitised lower-
level versions of the ﬁle produced by the trusted releaser; the
lower-level views of a ﬁle will remain completely unchanged
and hence no covert data channels are introduced.
Conceptually,
the veriﬁer will allow any sequence of
objects (or parts of objects at the end points) at the security
level of the current edit session to be copied or moved
intact and embedded within an at-level or lower-level ob-
285
ject anywhere else in the canonical MLSDoc. Any higher-
level objects not actually present in the content of the diff
transaction will be included by the TCB when applying the
patch; hence higher-level objects will automatically follow
the lower-level object in which they are embedded if the
lower-level object is moved.
In paranoid mode,
if the low-level bytes immediately
adjacent to both sides of a higher-level object are deleted,
then the higher-level object will be orphaned, as it
is
assumed to be highly likely that the the lower-level object in
which the higher-level object resided has been deleted. These
orphans could be collected at the end of each security level’s
section, with the COTS add-in making them available for
review and recovery under interactive user control. The use
of convenience mode can avoid this problem, since the TCB
can be made explicitly aware of moved or deleted markers.
The patcher expands the original MLSDoc into a byte
array with two interleaved vectors, one containing the data
channel and the other containing the associated security
labels. Next it applies the MLSDiff to the data channel,
striding over the associated classiﬁcation labels. Any data
copied into the updated MLSDoc remains bytewise labelled
by its original classiﬁcation stream, while inserted data is
labelled by the security level of the incoming MLSDiff.
Despite the apparent complexity of this processing, it is
actually quite easy for the trusted veriﬁer to test whether
BLP strong tranquility holds for any given edit. The BLP test
simply compares the before and after copies of the MLSDoc
to ensure that the data content in all lower-level sections
is identical; and that the order and length of object table
references for lower-level objects remains unchanged. This
test is required to prevent the high level from sending an
arbitrary message to low by copying low-level data bytes,
and ensures any reordering or deletion of low-level data is
initiated from the low level.
V. CROSS DOMAIN INFRASTRUCTURE
To provide a complete picture of the end-to-end pro-
cessing that PRISM requires, we brieﬂy describe the cross
domain infrastructure that we used to prototype our solution
on an Annex Minisec platform; although other cross domain
transfer solutions such as those listed on the UCDMO Cross
Domain Baseline [1] could instead be used.
The Minisec based cross domain infrastructure is con-
structed from a chain of components with one end start-
ing in an untrusted partition and the other terminating in
the TCB. The untrusted modules include an application-
speciﬁc add-in or a ﬁle system monitor plus an application-
speciﬁc translator, a user-space ﬁle system module called
mlsfs and a communication module called xferd. The
TCB hosts a small collection of Annex OCRM objects to
marshal data and perform the requisite trusted processing.
This includes a low-level communication end-point called
ChannelManager, a partner xferd, a per-security level
EnclaveHAL that holds the authorities associated with a
particular untrusted partition, cryptographic support func-
tions, canonical ﬁle storage, and PRISM’s trusted veriﬁca-
tion, patch and release modules.
The application-speciﬁc add-in fulﬁlls two functions. It
translates incoming at-level canonical MLSDoc ﬁles into
an application readable format; and translates at-level edits
into outgoing MLSDiff patches. Both the incoming MLSDoc
ﬁles and outgoing MLSDiff patches are wrapped in simple,
well-formatted cpio archive ﬁles that are respectively read
from and saved to the mlsfs ﬁle system. The paired xferd
processes ferry these transactions, in whichever direction is
appropriate, between the untrusted partition and the TCB.
Using mlsfs to decouple the application-speciﬁc add-in
from xferd allows the add-ins to operate on top of a
ﬁlesystem based abstraction. This allows the untrusted cross
domain transfer code to be centralised in one place; and
to also be hosted on a server within an enclave, with the
untrusted add-ins interfacing to the cross domain transfer
mechanism from across the network via standard ﬁle system
sharing technologies like SMB or NFS.
VI. MS WORD SUPPORT
Using our PRISM architecture we were able to construct
an MLS document editing system using Microsoft Word as
the untrusted document editor hosted in the independent
system-high domains. This enables users to create ﬁne
grained MLS documents using a highly familiar COTS
document editing system.
Microsoft Ofﬁce 2003 introduced a single ﬁle XML
format for documents called WordprocessingML. We chose
this format as a basis for our work as it is human readable,
and because its use of XML made it both easy to interface
with MLSDoc and adaptable to future revisions of Microsoft
Ofﬁce or similar software.
WordprocessingML ﬁles consist of a root element
w:wordDocument containing several schemata, whose
namespaces are referred to by short preﬁxes on element
names. The most common preﬁxes are w: (Word) and o:
(Ofﬁce). The root element and its ﬁrst-level sub-elements
need to appear in the document at all security levels, so
these should be located at the lowest security-level of the
document. Common ﬁrst-level sub-elements include:
o:DocumentProperties
Contains document metadata common to Microsoft
Ofﬁce applications such as author, title, word count
and edit time.
w:fonts
Contains the set of fonts used in the document.
w:styles
Contains the set of styles used in the document.
w:docPr
Contains document property metadata speciﬁc to
Microsoft Word.
w:body
This is where the main content of the document
appears and is therefore the part that most needs
to contain data at differing security levels. It is the
only essential component of the document.
The top-level metadata objects contained within the root
element maintain settings for features used in the rest of
the document. If these are treated as MLS there is the
possibility that a feature introduced at a high level ﬁrst (for
example tables) but later used at the low level may result in
ambiguous duplication that might confuse Word’s operation.
A simple, low-tech solution to this problem is to simply
create documents at the lowest level using a template that
contains any features that will be used.
A. MLSDiff Patch generation
To generate an MLSDiff patch for an updated Wordpro-
cessingML ﬁle, the untrusted add-in transforms the new
XML document into a canonical format and compares it with
the old one from the MLSDoc container that it originally
received from the TCB. Rather than using the BSDiff
algorithm to generate the patch directly, the untrusted add-
in uses an XML aware diff algorithm to detect changes and
then translate these into the simple MLSDiff patch format
for further processing by the TCB.
We adapted a C♯ .NET XML difference engine called
XML Diff [16] for this purpose. This implements an XML
tree edit distance algorithm that generates an XML Diff
Language (XDL) diffgram of the differences between the
two versions of an XML document. We selected this package
because it is able to represent subtree moves, compares
well with other algorithms in terms of performance and
precision [19], and because its .NET implementation is well
suited to incorporation in a Word add-in.
B. File Format Work-Arounds
Because of the cross-linked structure of Wordprocess-
ingML ﬁles, we did encounter several cases where user edits
initiated at a higher security level would modify formatting
instructions stored at lower security levels of the document.
These modiﬁcations would then become embedded in the
next MLSDiff patch sent to the TCB, causing a BLP policy
violation and patch rejection.
We found that these problems could be worked around
by simply ﬁltering out, or otherwise modifying, problematic
XML tags and allowing Word to reconstruct these elements
at ﬁle load time. This was accomplished using only 100
lines of XSLT. Listing 1 shows a fragment of this XSLT
stylesheet containing representative templates for achieving
these transformations. While the modiﬁcations we discuss
consist of only a selection of the issues triggered by the test
documents and version of Word that we used in develop-
ment, we believe they are indicative of the types of issues
286
I n p a r t i c u l a r
s o r t
s e l e c t = ” name ( ) ” />
s e l e c t = ” . ” />
e v e r y t h i n g
s e l e c t = ” name ( ) ” />
Listing 1. XSLT Stylesheet fragment for transforming a Microsoft Word
2003 WordprocessingML formatted document into an MLSDoc compatible
form.
that would need to be dealt with to fully adapt Word for
MLSDoc compatibility.
Problem: Node /w:wordDocument/o:Document-
Properties has the following ﬁelds that are frequently
updated:
o:Created
When the user selects “save as”.
o:Revision
Incremented each time the document is saved.
o:LastSaved
Updated each time the document is saved.
o:LastPrinted
Updated with the last
printed if it was printed during an edit session.
time the document was
o:TotalTime