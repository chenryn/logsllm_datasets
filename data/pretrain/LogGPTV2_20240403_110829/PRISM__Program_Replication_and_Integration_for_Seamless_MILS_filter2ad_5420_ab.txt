### Figure 4: Actual File Structure

The Verifier checks whether the BLP (Bell-LaPadula) security policy is preserved by a patch received from an SLS (Single-Level Security) partition. If the policy is maintained, the Patcher applies the patch to the canonical representation of the file. This file may be stored within a dedicated MLS (Multi-Level Security) file system or hosted using encryption in an SLS enclave. The Releaser then strips high-level content to produce sanitized versions of the canonical MLSDoc that are appropriate for any target security level. This lifecycle is best explained starting with a trusted release.

#### Example of a Patch File
```
0: 4d 4c 53 44 49 46 46 00 61 a0 61 84 df 28 c2 86
10: 30 c3 8a 9b 01 16 48 1a 05 00 00 00 18 00 00 00
20: 00 00 00 00 20 10 00 00 6c 0d 00 00 05 01 00 00
30: 00 00 00 00 af 01 00 00 00 00 00 00 00 00 00 00
MLSDIFF.a.a..(..
0.....H.........
.... ...l.......
................
```

#### MLS Patch File Header
- **Magic:** MLSDIFF
- **Flags:** 0x0
- **UUID:** 61a06184df28c28630c38a9b0116481a
- **Version:** 5
- **Ctrl:** 24 (0x18)
- **Diff:** 0 (0x0)
- **File:** 4128 (0x1020)

#### Control Table
- **Diff:** 0
- **Extra:** 0
- **Skip:** 3436
- **Insertions (Extra):** 431
- **Deletions (Skip):** 261

#### Extra Section
```
40: 3c 77 3a 70 3e 3c 77 3a 70 50 72 3e 3c 77 3a 73
50: 70 61 63 69 6e 67 20 77 3a 61 66 74 65 72 3d 22
60: 31 30 30 22 20 77 3a 62 65 66 6f 72 65 3d 22 31
70: 30 30 22 2f 3e 3c 2f 77 3a 70 50 72 3e 3c 77 3a
80: 72 3e 3c 77 3a 74 3e 28 53 29 20 4f 50 45 52 41
90: 54 49 4f 4e 20 46 4f 52 54 49 54 55 44 45 20 53
a0: 4f 55 54 48 3a 20 54 68 65 20 46 69 72 73 74 20
b0: 55 53 20 41 72 6d 79 20 47 72 6f 75 70 2c 20 63
c0: 6f 6d 6d 61 6e 64 65 64 20 62 79 20 4c 74 2e 20
d0: 47 65 6e 2e 20 50 61 74 74 6f 6e 20 61 6e 64 20
e0: 77 68 69 63 68 20 69 73 20 61 6d 61 73 73 65 64
f0: 20 69 6e 20 4b 65 6e 74 2c 20 77 69 6c 6c 20 63
100: 72 6f 73 73 20 74 68 65 20 45 6e 67 6c 69 73 68
110: 20 43 68 61 6e 6e 65 6c 20 61 6e 64 20 6c 61 6e
120: 64 20 61 74 20 50 61 73 20 64 65 20 43 61 6c 61
130: 69 73 2e 3c 2f 77 3a 74 3e 3c 2f 77 3a 72 3e 3c
140: 2f 77 3a 70 3e
(S) OPERATION FORTITUDE SOUTH: The First US Army Group, commanded by Lt. Gen. Patton and which is amassed in Kent, will cross the English Channel and land at Pas de Calais.
```

### Application of the Patch
1. Copy the first 3436 bytes from the original file.
2. Insert the first 261 bytes from the extra section.
3. Delete the next 0 bytes from the original.
4. Copy the remaining 431 bytes.

When a patch is received by the TCB (Trusted Computing Base), the trusted verifier ensures that any changes to the canonical document only modify data at the security level associated with that partition, enforcing a BLP security policy with "strong tranquillity" [5]. Lower or higher-level objects' content may not be modified. At the canonical MLSDoc level, lower-level objects can be split to make way for insertions of higher-level objects, and higher-level objects can be reordered. However, in paranoid mode, no splits or reorderings caused by an edit will be observable in the sanitized lower-level versions of the file produced by the trusted releaser. The lower-level views of a file remain completely unchanged, preventing covert data channels.

### Conceptual Operation
The verifier allows any sequence of objects (or parts of objects at the end points) at the security level of the current edit session to be copied or moved intact and embedded within an at-level or lower-level object anywhere else in the canonical MLSDoc. Any higher-level objects not present in the diff transaction will be included by the TCB when applying the patch, ensuring they follow the lower-level object if it is moved.

In paranoid mode, if the low-level bytes immediately adjacent to both sides of a higher-level object are deleted, the higher-level object will be orphaned. These orphans can be collected at the end of each security level's section, with the COTS add-in making them available for review and recovery under interactive user control. Convenience mode avoids this problem by making the TCB explicitly aware of moved or deleted markers.

### Patching Process
The patcher expands the original MLSDoc into a byte array with two interleaved vectors: one containing the data channel and the other containing the associated security labels. It then applies the MLSDiff to the data channel, striding over the associated classification labels. Data copied into the updated MLSDoc retains its original classification, while inserted data is labeled by the security level of the incoming MLSDiff.

Despite the complexity, the trusted verifier can easily test whether BLP strong tranquility holds for any given edit. The BLP test compares the before and after copies of the MLSDoc to ensure that the data content in all lower-level sections is identical and that the order and length of object table references for lower-level objects remain unchanged. This test prevents the high level from sending arbitrary messages to the low level by copying low-level data bytes and ensures any reordering or deletion of low-level data is initiated from the low level.

### Cross-Domain Infrastructure
To provide a complete picture of the end-to-end processing required by PRISM, we briefly describe the cross-domain infrastructure used to prototype our solution on an Annex Minisec platform. Other cross-domain transfer solutions, such as those listed on the UCDMO Cross Domain Baseline [1], could also be used.

The Minisec-based cross-domain infrastructure consists of a chain of components, with one end in an untrusted partition and the other in the TCB. Untrusted modules include an application-specific add-in or a file system monitor, an application-specific translator, a user-space file system module called `mlsfs`, and a communication module called `xferd`. The TCB hosts a small collection of Annex OCRM objects to marshal data and perform trusted processing, including a low-level communication endpoint called `ChannelManager`, a partner `xferd`, a per-security level `EnclaveHAL` that holds the authorities associated with a particular untrusted partition, cryptographic support functions, canonical file storage, and PRISMâ€™s trusted verification, patch, and release modules.

### Application-Specific Add-In
The add-in translates incoming at-level canonical MLSDoc files into an application-readable format and translates at-level edits into outgoing MLSDiff patches. Both the incoming MLSDoc files and outgoing MLSDiff patches are wrapped in simple, well-formatted cpio archive files, read from and saved to the `mlsfs` file system. The paired `xferd` processes ferry these transactions between the untrusted partition and the TCB.

Using `mlsfs` to decouple the application-specific add-in from `xferd` allows the add-ins to operate on top of a filesystem-based abstraction, centralizing the untrusted cross-domain transfer code in one place. This also enables hosting the untrusted add-ins on a server within an enclave, interfacing with the cross-domain transfer mechanism via standard file system sharing technologies like SMB or NFS.

### Microsoft Word Support
Using our PRISM architecture, we constructed an MLS document editing system using Microsoft Word as the untrusted document editor hosted in independent system-high domains. This enables users to create fine-grained MLS documents using a highly familiar COTS document editing system.

Microsoft Office 2003 introduced a single-file XML format for documents called WordprocessingML. We chose this format as it is human-readable and easy to interface with MLSDoc and adaptable to future revisions of Microsoft Office or similar software.

#### WordprocessingML File Structure
- **Root Element:** `w:wordDocument`
- **Common Prefixes:**
  - `w:` (Word)
  - `o:` (Office)
- **First-Level Sub-Elements:**
  - `o:DocumentProperties`: Contains document metadata common to Microsoft Office applications.
  - `w:fonts`: Contains the set of fonts used in the document.
  - `w:styles`: Contains the set of styles used in the document.
  - `w:docPr`: Contains document property metadata specific to Microsoft Word.
  - `w:body`: Main content of the document, containing data at differing security levels.

#### Top-Level Metadata Objects
These maintain settings for features used in the rest of the document. If treated as MLS, there is a possibility of ambiguous duplication. A simple solution is to create documents at the lowest level using a template that contains any features that will be used.

### MLSDiff Patch Generation
To generate an MLSDiff patch for an updated WordprocessingML file, the untrusted add-in transforms the new XML document into a canonical format and compares it with the old one from the MLSDoc container. Instead of using the BSDiff algorithm, the untrusted add-in uses an XML-aware diff algorithm to detect changes and translate them into the MLSDiff patch format for further processing by the TCB.

We adapted a C# .NET XML difference engine called XML Diff [16] for this purpose. This implements an XML tree edit distance algorithm that generates an XML Diff Language (XDL) diffgram of the differences between two versions of an XML document. We selected this package due to its ability to represent subtree moves, good performance and precision [19], and its .NET implementation suitable for incorporation in a Word add-in.

### File Format Work-Arounds
Due to the cross-linked structure of WordprocessingML files, user edits at a higher security level can modify formatting instructions stored at lower security levels, causing BLP policy violations and patch rejections. These issues can be resolved by filtering out or modifying problematic XML tags, allowing Word to reconstruct these elements at file load time. This was achieved using 100 lines of XSLT. Listing 1 shows a fragment of this XSLT stylesheet.

#### Problematic Fields
- **Node `/w:wordDocument/o:DocumentProperties`:**
  - `o:Created`: Updated when the user selects "save as."
  - `o:Revision`: Incremented each time the document is saved.
  - `o:LastSaved`: Updated each time the document is saved.
  - `o:LastPrinted`: Updated with the last printed time if the document was printed during an edit session.
  - `o:TotalTime`: Tracks the total time spent editing the document.

```xml
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:template match="@*|node()">
    <xsl:copy>
      <xsl:apply-templates select="@*|node()"/>
    </xsl:copy>
  </xsl:template>
  <xsl:template match="o:Created | o:Revision | o:LastSaved | o:LastPrinted | o:TotalTime">
    <xsl:element name="{name()}">
      <xsl:apply-templates select="@*|node()"/>
    </xsl:element>
  </xsl:template>
</xsl:stylesheet>
```

This XSLT fragment demonstrates how to handle problematic fields, ensuring compatibility with MLSDoc.