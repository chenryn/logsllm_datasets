:::
使用以下命令从任何排序约束中删除资源。
``` screen
pcs constraint order remove resource1 [resourceN]...
```
:::
:::
::: section
::: titlepage
# []{#ch-resourceconstraints-HAAR.html#s1-colocationconstraints-HAAR}资源共存 {.title}
:::
[]{#ch-resourceconstraints-HAAR.html#idm140680349192368
.indexterm}[]{#ch-resourceconstraints-HAAR.html#idm140680352244816
.indexterm}[]{#ch-resourceconstraints-HAAR.html#idm140680352749008
.indexterm}[]{#ch-resourceconstraints-HAAR.html#idm140680352747744
.indexterm}[]{#ch-resourceconstraints-HAAR.html#idm140680352655600
.indexterm}
共存约束决定一个资源的位置取决于另一个资源的位置。
在两个资源间创建 colocation
约束具有重要的副作用：它会影响分配给节点资源的顺序。这是因为您无法相对于资源
B 来放置资源 A，除非您知道资源 B 的位置。因此，当创建 colocation
约束时，您必须考虑是将资源 A 与资源 B 共处，还是将资源 B 与资源 A 共处。
在创建 colocation 约束时要记住的是，假设资源 A 与资源 B
在一起，在决定哪个节点要选择资源 B 时，集群也会考虑资源 A 的首选项。
以下命令创建了 colocation 约束。
``` screen
pcs constraint colocation add [master|slave] source_resource with [master|slave] target_resource [score] [options]
```
有关 master 和从资源的详情请参考
["多状态资源：具有多个模式的资源"一节](#ch-advancedresource-HAAR.html#s1-multistateresource-HAAR "多状态资源：具有多个模式的资源"){.xref}。
[表 7.4 "Colocation
约束的属性"](#ch-resourceconstraints-HAAR.html#tb-colocationconstraint-options-HAAR "表 7.4. Colocation 约束的属性"){.xref}.
总结了配置 colocation 约束的属性和选项。
::: table
[]{#ch-resourceconstraints-HAAR.html#tb-colocationconstraint-options-HAAR}
**表 7.4. Colocation 约束的属性**
::: table-contents
  项                描述
  ----------------- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  source_resource   colocation 源。如果约束不满意，集群可能决定完全不允许该资源运行。
  target_resource   colocation 目标。集群将决定优先放置此资源的位置，然后决定放置源资源的位置。
  分数              正数值表示资源应该在同一个节点上运行。负值表示资源不应在同一节点上运行。值 +`INFINITY`{.literal} （默认值）表示 *`source_resource`* 必须在与 *`target_resource`* 相同的节点上运行。值 -`INFINITY`{.literal} 表示 *`source_resource`* 不得在与 *`target_resource`* 相同的节点上运行。
:::
:::
::: section
::: titlepage
## []{#ch-resourceconstraints-HAAR.html#_mandatory_placement}强制放置 {.title}
:::
当约束分数为 `+INFINITY 或 -INFINITY`{.literal} ``{=html}
时，就会发生强制放置。在这种情况下，如果约束无法满足，则不允许
*`source_resource`* 运行。对于 `score=INFINITY`{.literal}，这包括
*`target_resource`* 没有激活的情况。
如果您需要 `myresource1`{.literal} 始终与 `myresource2`{.literal}
在同一台机器中运行，您可以添加以下约束：
``` screen
# pcs constraint colocation add myresource1 with myresource2 score=INFINITY
```
由于使用了 `INFINITY`{.literal}，如果 `myresource2`{.literal}
无法在任何群集节点上运行（出于某种原因），则将不允许
`myresource1`{.literal} 运行。
或者，您可能想要配置相反的集群，其中 `myresource1`{.literal} 无法与
`myresource2`{.literal} 在同一计算机上运行。在这种情况下，使用
`分数=-INFINITY`{.literal}
``` screen
# pcs constraint colocation add myresource1 with myresource2 score=-INFINITY
```
同样，通过指定
`-INFINITY`{.literal}，约束会绑定。因此，如果唯一要运行的地方是
`myresource2 已经是`{.literal}，则 `myresource1`{.literal}
可能无法在任何位置运行。
:::
::: section
::: titlepage
## []{#ch-resourceconstraints-HAAR.html#_advisory_placement}公告放置 {.title}
:::
如果强制放置是 \"must\" 和 \"must not\"，则公告放置是 \"I would prefer
if\" 的替代。对于分数大于 `-INFINITY`{.literal} 且少于
`INFINITY`{.literal}
的限制，群集将尝试满足您的希望，但如果您的替代方案是停止某些集群资源，则可能会忽略它们。公告共存限制可与配置的其他元素组合，以像强制一样运作。
:::
::: section
::: titlepage
## []{#ch-resourceconstraints-HAAR.html#s2-unorderedresourcesets-HAAR}资源共存集合 {.title}
:::
如果您的配置需要创建一组在一起并启动的资源，您可以配置包含这些资源的资源组，如
["资源组"一节](#ch-clustresources-HAAR.html#s1-resourcegroups-HAAR "资源组"){.xref}
所述。然而，在有些情况下，配置需要作为资源组共存的资源是不合适的：
::: itemizedlist
-   您可能需要托管一组资源，但这些资源不一定要按顺序启动。
-   您可能有一个资源 C，它必须与资源 A 或 B 共同启动，但 A 和 B
    之间没有关系。
-   您可能有资源 C 和 D 必须和资源 A 和 B 在一起，但 A 和 B
    之间没有关系，C 和 D 之间没有关系。
:::
在这些情况下，您可以使用 [**pcs constraint colocation set
命令在一组或一组资源中创建 colocation 约束。**]{.command}
您可以使用 [**pcs constraint colocation set**]{.command}
命令为一组资源设置以下选项。
::: itemizedlist
-   `顺序`{.literal}，它可以设为 `true`{.literal} 或
    `false`{.literal}，以指示集合成员是否必须相互在一起。
    将 `sequential`{.literal} 设置为 `false`{.literal}
    允许此集合的成员与稍后列出的另一个集合在一起，无论此集合中的哪个成员处于活动状态。因此，只有在约束里列出另一个集合之后，这个选项才有意义，否则约束无效。
-   `角色`{.literal}，它可以设置为
    `Stopped`{.literal}、Start`ed`{.literal}、`master`{.literal} 或
    `Slave`{.literal}。有关多状态资源的详情请参考
    ["多状态资源：具有多个模式的资源"一节](#ch-advancedresource-HAAR.html#s1-multistateresource-HAAR "多状态资源：具有多个模式的资源"){.xref}。
:::
您可以按照 [**pcs constraint colocation set 命令的
`setoptions`{.literal} 参数为一组资源设置**]{.command} 以下约束选项。
::: itemizedlist
-   `kind`{.literal}，以指示如何强制实施约束。有关这个选项的详情请参考
    [表 7.3
    "顺序约束的属性"](#ch-resourceconstraints-HAAR.html#tb-orderconstraint-options-HAAR "表 7.3. 顺序约束的属性"){.xref}。
-   `对称`{.literal}，指示停止资源的顺序。如果为
    true（默认值），按相反顺序停止资源。默认值为： `true`{.literal}
-   `ID`{.literal}，为您定义的约束提供名称：
:::
当列出集合的成员时，每个成员都与其前一个处于共同位置。例如：\"set A B\"
表示 \"B 与 A
共存\"。但是，当列出多个集合时，每个集合都与后面的组在一起。例如：\"set
C D sequential=false set A B\" 表示 \"set C D（其中 C 和 D
间没有关系）与 set A B 在一起（其中 B 与 A 在一起）\"。
以下命令在一组或一组资源上创建了 colocation 约束。
``` screen
pcs constraint colocation set resource1 resource2 [resourceN]... [options] [set resourceX resourceY ... [options]] [setoptions [constraint_options]]
```
:::
::: section
::: titlepage
## []{#ch-resourceconstraints-HAAR.html#s2-rmvecolocateconstraint-HAAR}删除重新定位限制 {.title}
:::
使用以下命令删除使用 *`source_resource`* 的 colocation 约束。
``` screen
pcs constraint colocation remove source_resource target_resource
```
:::
:::
::: section
::: titlepage
# []{#ch-resourceconstraints-HAAR.html#s1-constraintlist-HAAR}显示限制 {.title}
:::
您可以使用一些命令来显示已经配置的约束。
以下命令列出所有当前位置、顺序和 colocation 约束。
``` screen
pcs constraint list|show
```
以下命令列出所有当前位置限制。
::: itemizedlist
-   如果指定了
    `资源`{.literal}，则每个资源会显示位置限制。这是默认的行为。
-   如果指定了 `节点`{.literal}，则每个节点会显示位置限制。
-   如果指定了特定资源或节点，则只显示那些资源或节点的信息。
:::
``` screen
pcs constraint location [show resources|nodes [specific nodes|resources]] [--full]
```
以下命令列出所有当前排序限制。如果指定了 `--full`{.literal}
选项，显示内部约束 ID。
``` screen
pcs constraint order show [--full]
```
以下命令列出所有当前的 colocation 约束。如果指定了 `--full`{.literal}
选项，显示内部约束 ID。
``` screen
pcs constraint colocation show [--full]
```
以下命令列出引用特定资源的约束。
``` screen
pcs constraint ref resource ...
```
:::
:::
[]{#ch-manageresource-HAAR.html}
::: chapter
::: titlepage
# []{#ch-manageresource-HAAR.html#ch-manageresource-HAAR}第 8 章 管理集群资源 {.title}
:::
本章介绍了可以用来管理集群资源的各种命令。它提供关于以下步骤的信息。
::: itemizedlist
-   ["手动在集群中移动资源"一节](#ch-manageresource-HAAR.html#s1-manually_moving_resources-HAAR "手动在集群中移动资源"){.xref}
-   ["因为失败而移动资源"一节](#ch-manageresource-HAAR.html#s1-failure_migration-HAAR "因为失败而移动资源"){.xref}
-   ["启用、禁用和禁止集群资源"一节](#ch-manageresource-HAAR.html#s1-resource_control-HAAR "启用、禁用和禁止集群资源"){.xref}
-   ["禁用 monitor
    操作"一节](#ch-manageresource-HAAR.html#s1-monitordisable-HAAR "禁用 monitor 操作"){.xref}
:::
::: section
::: titlepage
# []{#ch-manageresource-HAAR.html#s1-manually_moving_resources-HAAR}手动在集群中移动资源 {.title}
:::
[]{#ch-manageresource-HAAR.html#idm140680355419968
.indexterm}[]{#ch-manageresource-HAAR.html#idm140680346071504
.indexterm}[]{#ch-manageresource-HAAR.html#idm140680343483936
.indexterm}[]{#ch-manageresource-HAAR.html#idm140680365186912
.indexterm}
您可以覆盖集群并强制资源从其当前位置移动。当您要做到这一点时有两个问题：
::: itemizedlist
-   当某个节点处于维护状态时，您需要将该节点上运行的所有资源移至不同节点
-   当需要移动单独指定的资源时
:::
要将节点上运行的所有资源移动到另一个节点，需要使该节点处于待机模式。有关将集群节点放在待机节点的详情请参考
["待机模式"一节](#ch-clusteradmin-HAAR.html#s2-standbymode-HAAR "待机模式"){.xref}。
您可以用下列方式之一移动独立指定的资源。
::: itemizedlist
-   您可以使用 [**pcs resource move**]{.command}
    命令将资源从当前运行的节点中移出，如
    ["从当前节点移动资源"一节](#ch-manageresource-HAAR.html#s2-moving_resources_resourcemove-HAAR "从当前节点移动资源"){.xref}
    所述。
-   您可以使用 [**pcs resource relocate run**]{.command}
    命令将资源移至首选节点，具体由当前的集群状态、限制、资源位置和其他设置决定。有关这个命令的详情请参考
    ["将资源移动到首选节点"一节](#ch-manageresource-HAAR.html#s2-moving_resources_relocate-HAAR "将资源移动到首选节点"){.xref}。
:::
::: section
::: titlepage
## []{#ch-manageresource-HAAR.html#s2-moving_resources_resourcemove-HAAR}从当前节点移动资源 {.title}
:::
要将资源从当前运行的节点中移动，请使用以下命令，指定定义的
*`resource_id`*。如果要指定在哪个节点上运行您要移动的资源，指定
**`destination_node`**。
``` screen
pcs resource move resource_id [destination_node] [--master] [lifetime=lifetime]
```
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}