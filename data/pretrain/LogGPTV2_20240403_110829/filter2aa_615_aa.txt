# Linux Containers: Future or Fantasy?

## Aaron Grattafiori
### Technical Director, NCC Group (formerly iSEC Partners, Matasano Security, Intrepidus Group)
#### DEF CON 23

**Background:**
- Information security and penetration testing
- Neg9/CTF
- Worked at iSEC Partners for 5.5 years, NCC Group for 0.1 years
- Notable projects: Hacking Samsung Smart TVs (Black Hat USA 2013, Toorcon), Macs in the age of the APT (Black Hat USA 2011, Source)

---

### Disclaimer
These slides are intended to be used in conjunction with the corresponding presentation or whitepaper. The information provided is designed for presentation purposes and may not be 100% complete regarding risks, recommendations, and findings.

---

### Introduction
**Who Am I?**

---

### Story One: The Server
Bob's Ruby on Rails app, SQL database server, or WordPress plugin gets compromised. He wants to add security, but how?

**Traditional Methods:**
- **Chroot:** Still used today, but broken if you have root.
  - Example: `mkdir("ncc"); chroot("ncc"); chdir("../..");` (vulnerable)
- **SELinux:** Made by NSA, complex type system for MLS systems, good support on RHEL.
  - Challenges: Complexity, Linus Torvalds' criticism, `setenforce 0` problem.
- **grsecurity:** An alternative to MAC.
- **Full Virtual Machines (QEMU, KVM, ESX):** Recent Xen/QEMU updates, VM for single process not practical.

---

### Story Two: The Client
"Gulenn" talks to a potential source named "citizenfour." He can't use a Chromebook due to paranoia about Google.

**Client-Side Security:**
- "Malware is just for Windows."
- "OSX sucks, it’s insecure."
- Linux: Super secure, right?
- Webkit or Gecko bugs can compromise TBB.
- Pidgin and libpurple have a poor track record.
- LiveCDs are stale by definition.

---

### Story Three: The Embedded
Margaret is in charge of embedded security at D-LINK, Belkin, etc. She wants to isolate the web app, wpa_supplicant, and DLNA stack. Tired of CSRF-able arbitrary code execution via buggy input validation.

**Embedded Security:**
- Everything runs as root.
- No security added due to cost constraints.
- Difficult to virtualize or segment ARM/MIPS within a router.
- How can we improve IoT security?

---

### Common Themes
- **Attack Surface:** Matters more than anything else.
- **Sandboxes and Containers:** Allow us to pick our battles; they should be the rule, not the exception.
- **Improvement Areas:** Server, desktop, and embedded security for Linux.

---

### New Approaches
**Paul Smecker's Analogy:**
- "They exited out the front door. They had no idea what they were in for. Now they're staring at six men with guns drawn. It was a fucking ambush."
- "This was a fucking bomb dropping on Beaver Cleaverville. For a few seconds, this place was Armageddon!"
- "What if it was just one guy with six guns?"

**New Idea:**
- What if it wasn’t one CPU with multiple kernels, but one kernel with multiple userlands?

---

### OS Virtualization
- **OpenVZ, Linux Vservers, FreeBSD Jails, OpenBSD/NetBSD Sysjail, Solaris Zones, HP UX Containers, AIX Workload Partitions:** Fundamentally less secure than hardware virtualization.
- **Hardware vs. Software Virtualization:**
  - Hardware virtualization creates software emulation for almost everything.
  - Software or OS virtualization partitions a single kernel and attempts to restrict or control access to hardware.
- **Security Concerns:**
  - Hardware virtualization is even less secure than physically different hardware.
  - We don't want to depend on a single method for security.

---

### Namespaces
- **Plan9 Namespaces:** http://www.cs.bell-labs.com/sys/doc/names.html
- **Linux Kernel Namespaces:**
  - MOUNT, NET, UTS, USER, PID
  - Functions: `clone(2)`, `set_ns(2)`, `unshare(2)`
- **Examples:**
  - MOUNT Namespace: Per process view of files, disks, NFS.
  - IPC Namespace: System V IPC objects.
  - UTS Namespace: `uname(2)`, `setdomainname(2)`, `sethostname(2)`.
  - PID Namespace: Process IDs start at 1, can be nested.
  - NETWORK Namespace: Separate network device, IP, MAC, routing table, firewall.
  - USER Namespace: Important for securing containers, high-risk area of the kernel.

---

### Capabilities
- **Capabilities List:**
  - `CAP_NET_ADMIN`, `CAP_SYS_PCAP`, `CAP_SYS_MODULE`, `CAP_SYS_RAWIO`, `CAP_MKNOD`, `CAP_NET_BIND_SERVICE`, `CAP_SYSLOG`, `CAP_NET_RAW`, `CAP_DAC_READ_SEARCH`, `CAP_MAC_ADMIN`, `CAP_SYS_PTRACE`, `CAP_SETGID`, `CAP_SETUID`, `CAP_SYS_BOOT`, `CAP_SYS_TIME`, `CAP_SYS_CHROOT`, `CAP_AUDIT_WRITE`, `CAP_WAKE_ALARM`, `CAP_SYS_ADMIN`
- **Pros and Cons:**
  - Pros: Kernel developers adding capabilities.
  - Cons: Busy and lazy kernel developers.
  - Result: Semi-working capabilities model.
- **Examples:**
  - Dropping capabilities: `$ ls –l /bin/ping`, `$ cp /bin/ping /tmp`, `$ sudo setcap cap_net_raw=p /tmp/ping`

---

### Control Groups (cgroups)
- **Features:**
  - Hierarchical and inheritable.
  - Controls different subsystems (Dev, CPU, Mem, I/O, Network).
  - `ulimit` on steroids.
- **Configuration:**
  - `/sys/fs/cgroup`
  - Main configuration: `/etc/cgrules.conf`, `/etc/cgconfig.conf`
- **Tools:**
  - `cgexec`, `cgmanager`
  - Container platforms make it easy.

---

### Putting It All Together
- **Namespaces:** Logically isolate kernel elements.
- **Capabilities:** Help enforce namespaces and reduce undesired privileges.
- **Cgroups:** Limit hardware resources.

**Linux Containers:**
- Better than chroot.
- Still not full virtualization.

**Container Platforms:**
- LXC, Docker, CoreOS rkt, Heroku, Flockport, Kubernetes, Joyent, etc.
- Beyond `ro`, `nodev`, `noexec`, `nosuid`.
- Bind, Overlay, Union, CoW, Versioning, even `sshfs`.

**Mount Options:**
- Self-hosted PaaS systems.
- Amazon EC2, Google App Engine, Rackspace, Heroku.

**Current Usage:**
- **Servers:**
  - ChromeOS and the Chrome browser.
  - Limited use in Android.
  - Some Linux distros.
  - Sandboxing tools: minijail, mbox.
- **Clients:**
  - Similar to servers.

**LXC Configuration Example:**
```plaintext
lxc.rootfs = /var/lib/lxc/defcon-ctf/rootfs
lxc.utsname = isec
lxc.start.auto = 1
lxc.mount.entry = /lib lib none ro,bind,nodev 0 0
lxc.mount.entry = /lib64 lib64 none ro,bind,noexec 0 0
lxc.cgroup.tasks.limit = 256
lxc.cgroup.devices.deny = a
lxc.cgroup.devices.allow = b 9:0 r
lxc.cgroup.memory.limit_in_bytes = 4000000
```

---

### Conclusion
Linux containers offer a promising future for improving security across servers, desktops, and embedded systems. By leveraging namespaces, capabilities, and cgroups, we can create more secure and isolated environments. However, it's important to continue exploring and refining these technologies to address their inherent limitations and risks.