Linux Containers: Future or Fantasy? 
Aaron Grattafiori 
Technical Director 
NCC Group (aka iSEC Partners/Matasano Security/Intrepidus Group) 
DEF CON 23 
Infosec, pentesting, Neg9/CTF 
iSEC Partners for 5.5 years 
   NCC Group for 0.1 years 
Hacking Samsung Smart TVs @ BH USA 2013, Toorcon, etc 
Macs in the age of the APT @ BH USA 2011, Source, etc 
2015 
NCC Group 
2 
whoami 
These slides are not intended to be 
consumed without the corresponding 
presentation or whitepaper. The 
information contained within is designed 
for presenting and not 100% completeness 
with regards to risks, recommendations, 
findings, etc. 
2015 
NCC Group - INTERNAL 
3 
Disclaimer 
2015 
NCC Group 
4 
whoami 
2015 
NCC Group 
5 
Story One: The Server 
Bob’s Ruby on Rails app gets popped 
or his SQL database server is compromised  
or his Wordpress plugin gives RCE 
or …. 
He wants to add security... But how? 
2015 
NCC Group 
6 
Once Upon a Time 
OLD 
The tried and true still used today 
Broken if you have root 
2015 
NCC Group 
7 
Chroot ? 
mkdir(“ncc"); 
chroot(“ncc"); 
chdir("../..");  oh no… 
chroot("."); 
2015 
NCC Group 
8 
Chroot  
2015 
NCC Group 
9 
SELinux ? 
NSA made it 
Complex type system for MLS systems 
Good support on RHEL  
2015 
NCC Group 
10 
SELinux ? 
Complexity 
Linus Torvalds problem 
The setenforce 0 problem 
Kernel enforces it: Kernel gotta kernel  
2015 
NCC Group 
11 
SELinux (and other MAC)  
Well you’ve protected the kernel, apps and 
helped prevention memory corruption and 
hardened against other attacks but… 
2015 
NCC Group 
12 
OK, No MAC but grsecurity! 
2015 
NCC Group 
13 
Full Virtual Machines? 
QEMU, KVM or ESX escapes 
Recent Xen/QEMU  
updates anyone? 
VM for single process?  
Nope. 
2015 
NCC Group 
14 
Full Virtual Machines  
2015 
NCC Group 
15 
Story Two: The Client 
“Gulenn” talks to a potential 
source named “citizenfour” 
He can’t use a Chromebook 
because he is paranoid of Google 
2015 
NCC Group 
16 
Once Upon a Time 
“Malware is just for Windows” 
“OSX sucks, it’s insecure” 
Linox is like… super sakure right? 
2015 
NCC Group 
17 
Hey, just use Linux! 
He’s one webkit or gekco bug away from a 
TBB compromise. What app sandboxes? 
Pidgin and libpurple don’t have a great 
track record 
LiveCDs are stale code by definition 
2015 
NCC Group 
18 
aaaaannnnddd broken… 
2015 
NCC Group 
19 
Story Three: The Embedded 
Margaret is in charge of embedded security 
at D-LINK, Belkin,  
She wants to add isolation between the 
web app, wpa_supplicant and DLNA stack 
Tired of having CSRF-able arbitrary code 
execution via buggy input validation 
2015 
NCC Group 
20 
Once Upon a Time 
Everything runs as root 
No security is added (because $$$) 
You can’t easily virtualize or segment 
ARM/MIPS within a router, but is there 
nothing we can do to improve IoT? 
2015 
NCC Group 
21 
Margret isn’t alone! 
2015 
NCC Group 
22 
What do these stories have in common? 
Attack surface matters almost more than anything else 
Sandboxes and containers at least let us pick our 
battles: they should be the rule not the exception ( Props to 
Google Chrome Browser, Adobe Reader X, Apple Seatbelt, Google ChromeOS, etc) 
How can we work to improve server, desktop and 
embedded security for Linux ? 
2015 
NCC Group 
23 
What do these stories have in common? 
2015 
NCC Group 
24 
We have to try something new 
Paul Smecker: They exited out the front door. They had 
no idea what they were in for. Now they're staring at six 
men with guns drawn. It was a fucking ambush. 
NCC Group - INTERNAL 
2015 
25 
Paul Smecker: This was a fucking bomb dropping on 
Beaver Cleaverville. For a few seconds, this place was 
Armageddon! 
NCC Group - INTERNAL 
2015 
26 
Officer Greenly: What if 
it was just one guy with 
six guns? 
NCC Group - INTERNAL 
2015 
27 
Paul Smecker: Why don't 
you let me do the 
thinking, huh, genius? 
NCC Group - INTERNAL 
2015 
28 
But Greenly was right… it was “il Duce” 
NCC Group - INTERNAL 
2015 
29 
2015 
NCC Group 
30 
What if it wasn’t one cpu with multiple kernels, but  
one kernel with multiple userlands? 
2015 
NCC Group 
31 
OpenVZ 
Linux Vservers 
FreeBSD Jails 
OpenBSD/NetBSD Sysjail 
Solaris Zones 
HP UX Containers 
AIX Workload Partitions 
Fundamentally less secure than 
hardware virtualization 
2015 
NCC Group 
32 
A little bit about OS Virtualization 
Hardware virtualization creates 
software emulation for pretty much 
everything 
Software or OS virtualization 
partitions a single kernel and 
attempts to restrict or control access 
to hardware 
2015 
NCC Group 
33 
OS vs Hardware Virtualization 
Hardware virtualization is 
even fundamentally less 
secure than physically 
different hardware… 
(surrounded by guys with guns and fences) 
2015 
NCC Group 
34 
But we don’t want to depend on a single 
method for security … 
2015 
NCC Group 
35 
Namespaces 
2015 
NCC Group 
36 
Namespaces 
http://www.cs.bell-labs.com/sys/doc/names.html 
Plan9 
2015 
NCC Group 
37 
Namespaces 
Linux Kernel 
MOUNT 
NET 
UTS 
USER 
PID 
clone(2) 
set_ns(2) 
unshare(2) 
2015 
NCC Group 
38 
It all starts with a CLONE(2) 
“Kernel Execution Context” 
CLONE_NEWNS: Added in 2.4.19 kernel 
Per user / via PAM 
Per process view of files, disks, NFS 
2015 
NCC Group 
39 
MOUNT Namespace 
CLONE_NEWIPC: Added in 2.6.19 
“System 4 IPC objects” 
2015 
NCC Group 
40 
IPC Namespace 
CLONE_NEWUTS: Added in 2.6.19 
uname(2), setdomainname(2), 
sethostname(2) 
2015 
NCC Group 
41 
UTS Namespace 
CLONE_NEWPID: Added in 2.6.24 
Process IDs start at 1 
Can be nested 
2015 
NCC Group 
42 
PID Namespace 
2015 
NCC Group 
43 
PID NS example 
$ lxc-create –t busybox –n foo ; lxc-start –n foo 
$ lxc-attach -n foo -- ps 
PID   USER     COMMAND 
    1 root     init 
 5 root     /bin/sh 
   10 root     ps 
2015 
NCC Group 
44 
CLONE_NEWNET: Added in 2.6.24 
Separate network device, IP, MAC, 
routing table, firewall 
2015 
NCC Group 
45 
NETWORK Namespace 
CLONE_NEWUSER: Added in 2.6.23 
but finished 3.8  
Important for actually securing 
containers 
… also a high risk area of the kernel :/ 
2015 
NCC Group 
46 
USER Namespace 
$ lxc-attach -n foo -- sh 
BusyBox v1.21.1 (Ubuntu 1:1.21.0-1ubuntu1) built-in shell 
(ash) … 
$ id 
uid=0(root) gid=0(root) 
$ sleep 1337 
2015 
NCC Group 
47 
USER NS example 
100000   17110  0.0  0.0   2184  260 pts/14   S+   12:03   0:00 sleep 1337 
2015 
NCC Group 
48 
Capabilities 
2015 
NCC Group 
49 
root 
CAP_NET_ADMIN 
CAP_SYS_PCAP 
CAP_SYS_MODULE 
CAP_SYS_RAWIO 
CAP_MKNOD 
CAP_NET_BIND_SERVICE 
CAP_SYSLOG 
CAP_NET_RAW 
CAP_DAC_READ_SEARCH 
CAP_MAC_ADMIN 
CAP_SYS_PTRACE 
CAP_SETGID 
CAP_SETUID 
CAP_SYS_BOOT 
CAP_SYS_TIME 
CAP_SYS_CHROOT 
CAP_AUDIT_WRITE 
CAP_WAKE_ALARM 
CAP_SYS_ADMIN 
Pros: Kernel devs adding them  
Cons: Busy (and lazy) kernel devs  
Result: Semi-working capabilities model!  
2015 
NCC Group 
50 
Capabilities 
CAP_NET_ADMIN 
CAP_NET_RAW 
CAP_NET_BIND_SERVICE 
CAP_SYS_RESOURCE 
CAP_SYS_PTRACE 
CAP_SYS_RAWIO 
CAP_KILL 
2015 
NCC Group 
51 
Examples of Capabilities 
What should be dropped ? 
2015 
NCC Group 
52 
Dropping Capabilities 
Everything! 
What if I leave just “CAP_FOO” enabled? 
It depends… 
$ ls –l /bin/ping 
-rwsr-xr-x 1 root root 44168 May 7 2014 /bin/ping 
2015 
NCC Group 
53 
Fixing ping 
$ cp /bin/ping /tmp ; ls –l /tmp/ping 
-rwxr-xr-x 1 root root 44168 Mar 18 11:02 /tmp/ping 
$ /tmp/ping localhost 
ping: icmp open socket: Operation not permitted 
$ sudo setcap cap_net_raw=p /tmp/ping 
2015 
NCC Group 
54 
Fixing ping 
$ getcap /tmp/ping 
/tmp/ping = cap_net_raw+p 
$ /tmp/ping localhost 
PING localhost (127.0.0.1) 56(84) bytes of data 
64 bytes from localhost (127.0.0.1): icmp_seq ... 
SYS_CHROOT     NET_RAW 
SYS_MODULE 
SYS_RAWIO      NET_ADMIN 
SYS_PTRACE     
MAC_ADMIN      CAP_MKNOD 
MAC_OVERRIDE  
DAC_READ_SEARCH 
2015 
NCC Group 
55 
Some Dangerous Capabilities 
* Perform a range of system  administration  operations  including:  
quotactl(2), 
mount(2),  umount(2),  swapon(2),  swapoff(2),  sethostname(2),  and 
setdomain‐ 
name(2); 
* perform privileged syslog(2) operations (since Linux 2.6.37, 
CAP_SYSLOG  should 
be used to permit such operations); 
* perform VM86_REQUEST_IRQ vm86(2) command; 
* perform IPC_SET and IPC_RMID operations on arbitrary System V 
IPC objects; 
* perform operations on trusted and security Extended Attributes 
(see attr(5)); 
* use lookup_dcookie(2); 
* use   ioprio_set(2)   to  assign  IOPRIO_CLASS_RT  and  (before  
Linux  2.6.25) 
IOPRIO_CLASS_IDLE I/O scheduling classes; 
* forge UID when passing socket credentials; 
* perform administrative operations on many device drivers. 
2015 
NCC Group 
56 
CAP_SYS_ADMIN == root 
* exceed /proc/sys/fs/file-max, the system-wide  limit  on  the  
number  of  open files,  in  system  calls that open files (e.g., 
accept(2), execve(2), open(2), pipe(2)); 
* employ CLONE_* flags that create new namespaces with clone(2) 
and unshare(2); 
* call perf_event_open(2); 
* access privileged perf event information; 
* call setns(2); 
* call fanotify_init(2); 
* perform KEYCTL_CHOWN and KEYCTL_SETPERM keyctl(2) 
operations; 
* perform madvise(2) MADV_HWPOISON operation; 
* employ the TIOCSTI ioctl(2) to insert characters into the input 
queue of a ter‐ 
minal other than the caller's controlling terminal. 
* employ the obsolete nfsservctl(2) system call; 
* employ the obsolete bdflush(2) system call; 
* perform various privileged block-device ioctl(2) operations; 
* perform various privileged filesystem ioctl(2) operations; 
See False Boundaries and Arbitrary Code Execution post by Spender 
https://forums.grsecurity.net/viewtopic.php?f=7&t=2522 
2015 
NCC Group 
57 
Control groups 
Hierarchical and inheritable 
Controls different subsystems  
 (Dev, CPU, Mem, I/O, Network) 
ulimit on steroids 
2015 
NCC Group 
58 
cgroups 
Controlling access to resources 
based on subgroups: 
devices, CPU, I/O, Mem, … 
Filling some gaps of namespaces 
2015 
NCC Group 
59 
cgroups 
Controlling cgroups is typically 
performed via a virtual filesystem: 
/sys/fs/cgroup 
Main configuration (besides 
container configs): 
/etc/cgrules.conf, 
/etc/cgconfig.conf 
2015 
NCC Group 
60 
cgroups 
cgexec 
cgmanager 
Container platforms make it easy 
2015 
NCC Group 
61 
cgroups 
2015 
NCC Group 
62 
Putting that all together… 
Namespaces logically isolate kernel elements 
Capabilities help enforce namespaces and 
reduce undesired privileges 
Cgroups limit hardware resources 
2015 
NCC Group 
63 
Putting it all together… 
Linux Containers 
Better than chroot! 
Still not virtualization… 
2015 
NCC Group 
64 
Enter: Containers (LXC, Docker, 
CoreOS rkt, Heroku, Flockport, Kubernets, 
Joyant, etc) 
Beyond ro, nodev, noexec, nosuid 
Bind, Overlay, Union, CoW, 
Versioning, even sshfs 
2015 
NCC Group 
65 
Mount options 
Self-hosted PaaS systems 
Amazon EC2 
Google App Engine 
Rackspace, Heroku 
2015 
NCC Group 
66 
Namespaces, Capabilities and Cgroups: 
where are they now on Linux servers? 
ChromeOS and the Chrome browser 
Limited use in Android 
Some Linux distros 
Sandboxing tools: minijail, mbox 
2015 
NCC Group 
67 
Namespaces, Capabilities and Cgroups: 
where are they now on Linux clients? 
2015 
NCC Group 
68 
LinuX Containers: LXC 
lxc.rootfs = /var/lib/lxc/defcon-ctf/rootfs 
lxc.utsname = isec 
lxc.start.auto = 1 
lxc.mount.entry = /lib lib none ro,bind,nodev 0 0 
lxc.mount.entry = /lib64 lib64 none ro,bind,noexec 0 0 
2015 
NCC Group 
69 
LXC: Template: Basics 
lxc.cgroup.tasks.limit = 256 
lxc.cgroup.devices.deny = a 
lxc.cgroup.devices.allow = b 9:0 r 
lxc.cgroup.memory.limit_in_bytes = 4000000  
2015 