ACKs were generated, and sets the congestion window to
cwnd(t+
. The
server then enters fast recovery mode (Figure 5) until receipt
of an ACK for new data (i.e., on segment i + k + 1, in Fig-
ure 6). Since triple duplicate ACKs were not generated due
+ 3 and thresh = cwnd(t0)
0 ) = cwnd(t
2
−
0 )
2
to congestion, ACK segments for all pending segments at
time t0 eventually arrive at the server. Once ACK acknowl-
edging new data arrives, the congestion window is deﬂated
(step (3.c), Figure 5), i.e., set to half of its value before the
receipt of three duplicate ACKs, i.e., cwnd = thresh, and
the server enters congestion avoidance phase during which
the sending rate grows linearly (step (2.a), Figure 5).
3.2. ACK Duplication Attack: Analysis
We consider a (ρ, 3)-limited duplicating stealth adver-
sary (see Figure 2), with constant delays; notice we require
σ = 3 since the attack requires the adversary to duplicate
three3 ACK segments. Attacker can repeat the attack once
every T = 3/ρ seconds; we refer to T as the length of each
attack epoch (or the frequency of attack epochs), i.e., the
time elapsed between two consecutive duplications of three
ACK segments by the attacker. We analyse the operation of
TCP in the T seconds from one duplication to the next.
In Claim 1, we show that when connection is under
packet duplication attack, average steady state congestion
window cwndAT K
ρ·RT T (average conges-
tion window growth between attack epochs is in Figure 7).
M AX is bounded by
6
3Injecting more than 3 duplicate segments will not have the maximal
ampliﬁcation effect.
i+2k+k/2i+2k+3i+2k+k/2ServerClientAttackerACK: i+ki+k+1i+2k+1i+2k+2i+ki+kACK: i+kACK: i+kcwnd/2i+2k+3ACK: i+kACK: i+k+1ACK: i+2k+1ACK: i+2k+2cwnd=k+1ACK: i+2k+3ACK: i+2k+3ACK: ii...i+1ACK: i+1......ACK: i+5k/2cwnd=k+2t0t0,0t0+RTT#Pending segments before 3 dup ACKs, at (time t0—) is cwnd(t0—)Fast retransmitcwnd(t0+)=cwnd(t0—)/2+3Sender cannot transmit new segmentst0,cwnd/2cwnd((t0+RTT)—) t0) ﬁrst legitimate ACK segment sent by the re-
ceiver after ﬁrst attack epoch, arrives. Since we assume con-
stant delays, the ﬁrst ACK arriving at time t0,1 is essentially
a legitimate ACK generated by the receiver with a higher se-
quence number than the ACK duplicated by the attacker. As
a result the server will exit fast recovery, will set the con-
gestion window to cwnd(t0,1) = cwnd(t
thus deﬂating
2
the congestion window, and will enter a CA phase during
−
0 )
4Average TCP window depends on the operating system and conﬁgu-
ration. Typical bound on window size, e.g., on windows 7, is 256KB.
Figure 7: Average congestion window size cwnd at steady state,
if TCP connection is under packet duplication attack when no
anti-replay window is employed (see Figure 6), resulting in data
transfer rate of at most cwndAT K
ρ . Note that the growth
of window size is discrete, i.e., upon each packet arrival. When
T = RT T , cwnd = 3 and throughput is at most
= 6
RT T
M AX
3
RT T .
which the congestion window increases linearly, approxi-
mately by one segment during each RTT; analysis of lin-
ear congestion window growth is presented in Figure 4, and
holds: cwnd(t + RT T )  T
RT T The window size decreases between each
subsequent attack epoch; this is due to the fact that
the duration between attack epochs does not sufﬁce for
congestion window to restore its size.
cwnd(ti)
≤ T
2
RT T The congestion window size is restored
between each attack epoch; this occurs when steady
state is reached.
Conside the case where cwnd(ti) > 2T
RT T ; congestion
window size decreases between each two subsequent at-
tack epochs ti and ti+1:
at each attack epoch holds:
cwnd(ti+1) + 1 ≤ cwnd(ti). Once cwnd(ti) ≤ 2T
RT T ,
congestion window between attack epochs ti and ti+1 is:
cwnd(ti) < cwnd(ti+1) + 1, and the steady state win-
then cwnd(ti+1) ≤ cwnd(ti) <
dow size is reached;
cwnd(ti−1), where cwnd(ti−1) is congestion window right
before steady state, and cwnd(ti) < cwnd(ti+1) + 1. (cid:3)
3.3. Data Packets Duplication Attack: Stealth DoS
on Channel without Anti-Replay Mechanism
Packets duplication attack is symmetric to ACKs dupli-
cation attack presented in Section 3.1. In order to achieve
performance reduction, attacker tricks the receiver into gen-
erating duplicate ACKs by duplicating packets. Attacker in-
jects three duplicate copies of a previously sent packet. As
deﬁned in [20], TCP receiver acknowledges every packet
received, thus three duplicate packets trigger three dupli-
cate ACKs at the receiver. Upon receipt of three consecutive
duplicate ACKs sender performs fast retransmit and slows
down its sending rate.
Attack on data packets duplication, albeit similar in na-
ture to attack on ACKs, serves several purposes: it may be
the case that the attacker can only duplicate and inject pack-
ets in one direction, in which packets ﬂow and not in the
direction in which ACKs ﬂow, i.e., can inject segments sent
from server to client but cannot inject segments from client
to server, e.g., if the attacker is located in one network and
can only duplicate and inject packets in that same network,
or if ingress ﬁltering mechanism is employed. Another pur-
pose is related to assumptions on the power of the attacker:
duplicating packets attack can be carried out by a much
weaker (slower), attacker, than the attacker that mounts du-
plicating ACKs attack, since it does not require attacker to
inject the duplicates in limited time frame. In packets du-
plication attack attacker can inject segments that are much