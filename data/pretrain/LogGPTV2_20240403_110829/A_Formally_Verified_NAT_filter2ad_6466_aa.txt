title:A Formally Verified NAT
author:Arseniy Zaostrovnykh and
Solal Pirelli and
Luis Pedrosa and
Katerina J. Argyraki and
George Candea
Arseniy Zaostrovnykh
EPFL, Switzerland
PI:EMAIL
A Formally Verified NAT
Solal Pirelli
EPFL, Switzerland
PI:EMAIL
Luis Pedrosa
EPFL, Switzerland
PI:EMAIL
Katerina Argyraki
EPFL, Switzerland
PI:EMAIL
George Candea
EPFL, Switzerland
PI:EMAIL
ABSTRACT
We present a Network Address Translator (NAT) written in C and
proven to be semantically correct according to RFC 3022, as well
as crash-free and memory-safe. There exists a lot of recent work
on network verification, but it mostly assumes models of network
functions and proves properties specific to network configuration,
such as reachability and absence of loops. Our proof applies directly
to the C code of a network function, and it demonstrates the absence
of implementation bugs. Prior work argued that this is not feasible
(i.e., that verifying a real, stateful network function written in C
does not scale) but we demonstrate otherwise: NAT is one of the
most popular network functions and maintains per-flow state that
needs to be properly updated and expired, which is a typical source
of verification challenges. We tackle the scalability challenge with a
new combination of symbolic execution and proof checking using
separation logic; this combination matches well the typical structure
of a network function. We then demonstrate that formally proven
correctness in this case does not come at the cost of performance.
The NAT code, proof toolchain, and proofs are available at [58].
ACM Reference format:
Arseniy Zaostrovnykh, Solal Pirelli, Luis Pedrosa, Katerina Argyraki, and George
Candea. 2017. A Formally Verified NAT. In Proceedings of SIGCOMM ’17, Los
Angeles, CA, USA, August 21-25, 2017, 14 pages.
DOI: https://doi.org/10.1145/3098822.3098833
1 INTRODUCTION
This work is about designing and implementing software network
functions (NFs) that are proven to be secure and correct. Software
NFs have always been popular in low-rate environments, such as
home gateways or wireless access points. More recently, they have
also appeared in experimental IP routers [20] and industrial mid-
dleboxes [8] that support multi-Gbps line rates. Moreover, we are
witnessing a push for virtual network functions that can be de-
ployed on general-purpose platforms on demand, much like virtual
machines are being deployed in clouds.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
SIGCOMM ’17, August 21-25, 2017, Los Angeles, CA, USA
© 2017 Copyright held by the Owner/Author. Publication rights licensed to ACM.
ISBN 978-1-4503-4653-5/17/08...$15.00
DOI: https://doi.org/10.1145/3098822.3098833
1
There exists a lot of prior work on network verification, but,
to the best of our knowledge, none that reasons about both the
security and semantic correctness of NF implementations. Most
of that work relies on models of NFs that are different from their
implementations, hence it cannot reason about the latter (although
we should note that NF models can be very effective in reasoning
about network configuration [24, 25, 30–32, 38, 39, 46, 52, 55, 59]).
One exception is Dobrescu et al. [19], which introduced the notion
of software data-plane verification, and which proves low-level
properties for NF implementations written in Click (i.e., C++) [35].
That work, however, cannot prove semantic correctness of stateful
NFs, because it does not reason about state. For instance, even
though Dobrescu et al. prove crash-freedom and bounded execution
for a specific NAT implementation, they cannot prove that it is
semantically correct, due to not having a way to reason about the
content of the flow table (e.g., whether entries are added or expired
correctly).
Our contribution is a NAT function, written in C and using the
DPDK packet-processing library [21], which we prove to implement
the semantics specified in RFC 3022 [53] and to be crash-free and
memory-safe. We chose this particular NF because it is arguably
one of the most popular ones, yet it has proven hard to get right
over time: the NAT on various Cisco devices can be crashed [17] or
hung [15] using carefully crafted inputs; similar problems exist in
Juniper’s NAT [16], the NAT in Windows Server [40], and NATs
based on NetFilter [18]. Moreover, like many NFs, NATs maintain
per-flow state that needs to be properly updated and expired, which
is a typical source of verification challenges.
We implemented our NAT in C, because this is the language
typically used for high-performance packet processing, and it ben-
efits from a rich and stable ecosystem that includes DPDK. Given
that we anyway wrote our NAT from scratch—and our approach,
in general, requires refactoring—we did consider using a more
verification-friendly language. In the end, however, we considered
that NF developers are more likely to adopt our toolset if it allows
them to code in a familiar language and leverage existing expertise
and tools, even if they have to follow extra constraints (such as
using a specific library of data structures) and annotate their code.
Recent work argues that verifying the C implementation of a real,
stateful NF is infeasible with symbolic execution [55], but we show
that it can be done if symbolic execution is combined with other
verification techniques.
The rationale behind our approach is that different verification
techniques are best suited for different types of code. The beauty of
symbolic execution [9] lies in its ease of use: it enables automatic
code analysis, hence can be used by developers without verification
SIGCOMM ’17, August 21-25, 2017, Los Angeles, CA, USA
A. Zaostrovnykh, S. Pirelli, L. Pedrosa, K. Argyraki, and G. Candea
expertise. The challenge with symbolic execution is its notorious
lack of scalability: applying it to real C code typically leads to path
explosion [19, 55]. The part of real NF code that typically leads to
unmanageable path explosion is the one that manipulates state.
Hence, we split NF code into two parts: (1) A library of data
structures that keep all the “difficult” state, which we then formally
prove to be correct—this takes time and formal methods expertise,
but can be amortized if the library is re-used across multiple NFs;
and (2) stateless code that uses the library, which we automatically
and quickly verify using symbolic execution. The challenge lies in
combining the results of these two verification techniques, and for
that we developed a technique we call “lazy proofs”. A lazy proof
consists of sub-proofs structured in a way that top-level proofs
proceed assuming lower level properties, and the latter are proven
lazily a posteriori. For example, symbolic execution requires the use
of models that must be correct; we first do the symbolic execution
and only afterward validate automatically the correctness of the
models. This approach enables us to avoid having to prove that our
models are universally valid—which is hard—but instead only prove
that they are valid for the specific NF and the specific properties
we verified earlier with symbolic execution. This is much easier.
We show that formally verifying the correctness of our NAT does
not come at the price of performance: compared to an unverified
NAT written on top of DPDK, our verified NAT offers similar la-
tency and less than 10% throughput penalty. Any DPDK-based NAT
we experimented with, verified or not, significantly outperformed
NetFilter, the popular Linux built-in NAT.
The rest of the paper is structured as follows: after providing
background (§2), we illustrate our approach with a simple exam-
ple (§3), state formally what we proved about our NAT (§4), describe
our verification process (§5), and report on our experimental evalua-
tion (§6). Then we discuss limitations and future work (§7), present
related work (§8), and conclude (§9).
2 BACKGROUND
Our work falls in the general area of “data-plane verification.” This
term is typically used to denote two different types of approaches:
One category of work treats as one big data plane the combination
of the configured data planes of network devices in a network,
and reasons about network properties (reachability, loops, etc.)—
we refer to this as “network verification.” An orthogonal category
reasons about properties of the data-plane software running on
individual devices, and reasons about software properties (crash
freedom, bounded execution time, memory safety, etc.)—we refer
to this as “NF verification.” In network verification, the goal is to
demonstrate that a particular property (e.g., that a packet with
certain header features will always reach a given destination) holds
in a specific network with particular NFs configured and connected
in a particular way. In NF verification, the goal is to prove that
a particular property (e.g., there exists no input packet that can
trigger a buffer overflow in the NF) holds for all networks and
workloads, i.e., regardless of how the NF is configured or connected.
There is a rich body of work on network verification [24, 25, 30–
32, 38, 39, 46, 52, 55, 59]. In contrast, there is much less work on NF
verification [19].
2
The success of network verification depends on the success of
NF verification: Network verification relies on models of the NFs
that compose the network, whether these models are informally
captured in an RFC or more formally in a SEFL model [55], NICE
model [10], etc. However, a model-based proof that a packet will
always reach a destination is trivially invalidated by an implemen-
tation bug in a middlebox that causes that packet to be dropped, in
violation of the model. There are ways of testing whether such a
model is faithful to a given implementation [55], but there is a big
gap between testing and verification: a successfully tested model
can still exhibit behaviors that do not occur in the implementation,
and vice versa. NF verification can, however, ensure that an NF
implementation deployed in the real network is indeed faithful to
the model used for verifying the network.
Our work belongs to the category of NF verification and aims
to improve the state of the art on two fronts: (1) verify high-level
semantic properties, such as the correct implementation of an RFC,
and (2) verify NFs that are stateful. Dobrescu et al. [19] did verify a
stateful NAT, but proved only low-level properties (crash freedom
and bounded execution), therefore not encountering some of the
harder challenges of stateful NFs. We aim to resolve these chal-
lenges, while not placing on operators the burden of writing or
adapting models, and at the same time keeping the NF implemen-
tations’ performance in the same ballpark as that of non-verified
NFs. In this paper we report on our first step in this effort: the
development of a stateful, well-performing NF, which we prove to
implement the NAT semantics as understood from RFC 3022, in
addition to being free of crashes, memory bugs, leaks, and other
low-level properties.
3 THE VIGOR APPROACH
To verify our NAT, we developed a verification toolchain that we
call Vigor, which includes a library of verified data structures, called
libVig. We envision the software development process with Vigor
to revolve around three distinct developer roles with a clear sep-
aration of concerns: libVig developers, standards developers who
write contracts in formal logic to specify public standards, and NF
developers who implement these standards with verified NFs. The
first two roles require expertise in software verification and formal
methods, but their time and effort investment can be amortized
across the many NFs that share common components and imple-
ment the same standards in different ways. Developers in the latter
role, however, should need little to no expertise in verification. It
is they who are the true beneficiaries of Vigor, as they can now
write code that they prove correct with relative ease. In this paper,
the authors took on all three roles, but we envision that eventually
the roles could be taken on by different specialized teams or even
different organizations.
We illustrate the use and functioning of Vigor with a trivially
simple NF that implements the discard protocol [48]: an infinite
loop receives packets from one interface, discards the ones sent to
port 9, and forwards the rest through another interface.
Code. The NF developer does two extra things relative to writing
standard code: she annotates loops and encapsulates state in libVig
data structures that Vigor can reason about. Fig. 1 shows our verified
implementation. It includes an annotated event loop (VIGOR_LOOP
A Formally Verified NAT
SIGCOMM ’17, August 21-25, 2017, Los Angeles, CA, USA
on l.6) and a ring buffer (r on l.4) for absorbing bursts, which is
accessed through four calls (ll.9, 11, 12, 13). Network interaction
happens via three functions: receive (l.10) non-blockingly reads
an inbound packet and stores it in the output argument, returning
success or failure; can_send (l.12) checks if a new packet can be
sent; and send (l.14) sends the packet pointed to by its argument.
struct packet p;
struct ring *r = ring_create(CAP);
if (!r) return 1;
while(VIGOR_LOOP(1))
{
loop_iteration_begin(&r);
if (!ring_full(r))
ring_pop_front(r, &p);
send(&p);
}
loop_iteration_end(&r);
1 #define CAP 512
2 int main() {
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19 }
}
return 0;
if (receive(&p) && p.port != 9)
ring_push_back(r, &p);
if (!ring_empty(r) && can_send()) {
Figure 1: Verified implementation of the discard protocol.
Loop invariants. Our verification process requires loop invari-
ants to reason about the effect of loops. Currently, the NF developer
writes these invariants manually, in formal logic (Fig. 2, ll.1-5) and
in C (ll.7-9). In future work, we hope to be able to extract them
automatically from the code using existing techniques [23, 47], or