machine and then leaked it via Internet.
A malicious Trojan was downloaded as an Outlook attachment and the enclosed macro
was triggered by Excel to create a fake “java.exe”, and the malicious “java.exe” further
SQL exploited a vulnerable server to start cmd.exe in order to create an info-stealer.
An attacker utilized an Apache server to trigger the Shellshock vulnerability in Bash
multiple times. In each round, she started several Linux commands and cleared Bash
history in the end.
An attack downloaded the netcat utility and used it to open a Backdoor, from which a
port scanner was then downloaded and executed.
A student downloaded midterm scores from Apache, and uploaded a modiﬁed version.
A server administrator created a directory under another user’s home directory,
and downloaded the illegal ﬁles to the directory.
Malicious source ﬁles were downloaded and then compiled.
An attack stole user account information from passwd ﬁle, compressed it using gzip
and transferred the data to a remote machine.
References
Motivating Example
CVE-2008-0081
CVE-2014-6271
Persistent Netcat
Backdoor [32]
ProTracer [9]
ProTracer [9]
Xu et al. [25]
Xu et al. [25]
TABLE II: Examples of Normal Activities That Connect the Malicious Activities to Benign Ones and Cause Graph Explosion.
Noise Source
sshd-run-parts
Activity
Reason to Interleave
Cascade Forking
Program Behavior
sshd-ypserv
Cascade Forking
.bash history
Multiple Reads
Explorer
Multiple Writes
Conditional
Program Behavior
Shared Log File
Shared GUI
Program
Description of Scenario
Upon receiving ﬁle transferring request, SSH daemon starts a large number of
routine processes to update messages (e.g., motd) used for user interaction.
When a global account requests a SSH connection, SSHD checks user credential
from directory service (i.e., NIS) via ypserv, which forks tons of child processes.
Once an attacker has cleared the .bash history to erase her attack footprints, the
same history ﬁle will further get read by all future benign Bash terminals.
Once an attacker has dropped some malware to a local directory, the ﬁle Properties
are viewed in Explorer by a normal user, who later uncompresses a ZIP ﬁle and
therefore creates many ﬁles using 7ZIP from the same Explorer.
TABLE III: Forward Tracking Results.
Attack Case
Critical
Events
Data Theft
Phishing Email
Shellshock
Netcat Backdoor
Cheating Student
Illegal Storage
wget-gcc
passwd-gzip-scp
13
148
25
14
37
12
25
15
Rare
CE
12
148
23
14
33
10
23
11
Baseline
All
297
3282
11252
1355
7526
8048
6415
2718
FNR
0%
0%
0%
0%
62%
0%
0%
40%
CE
13
148
25
14
14
12
25
9
CE
13
148
25
14
37
12
25
15
Prio
All
297
3282
11262
1361
7201
8201
6742
2364
FNR
0%
0%
0%
0%
0%
0%
0%
0%
via PRIOTRACKER. As a comparison, we also run baseline
forward-tracker on the same cases. We run both trackers for
one day 1 on each case.
We summarize the results in Table III. Based upon our
full knowledge of the attack workﬂow, we manually collect
the ground truth of these attack. Particularly, critical events
(“CE”) indicate the number of essential causal dependencies
in an attack. Transitional events such as bash (cid:32) bash, which
are caused by the underlying system rather than the attack, are
not interesting and thus excluded. Among these CEs, we count
the ones that occur infrequently (“Rare CE”), i.e., the rareness
score is greater than our conﬁgured threshold (i.e. θ = 0.1).
For the baseline forward-tracker and PRIOTRACKER, We count
the CEs and all dependencies discovered within the time limit
(“All”) and compute the false negative rate (“FNR”), which is
the proportion of missed CEs, respectively.
From Table III, we can see that only two incidents (“Data
1Note that the time limit for tracking is conﬁgurable and can be extended
to capture stealthier attackers. We empirically conﬁgure their values at this
point, and we leave the systematic investigation and optimization of these
parameters to future work.
Theft” and “Phishing Email”) have the same total number
of tracked dependencies for baseline and PRIOTRACKER,
indicating that the other incidents cannot complete tracking all
causalities within one day, despite the moderate size of attack
traces. Nevertheless, we ﬁnd that PRIOTRACKER captures all
the crucial attack causalities within the time limit, whereas
the baseline tracker misses 62% and 40% critical events in
“Cheating Student” and “passwd-gzip-scp” cases, respectively,
due to its intensive computation of noisy dependencies. We
also observe that most of CEs are rare, which justiﬁes our
choice to prioritize rare events in the causality tracking.
Since all attack cases are conducted in normal noisy
enterprise environment, the resulting graphs are up to 600
times larger than essential attack traces. We exemplify the
noisy activities that link malicious traces to normal ones in
Table II. These noises are interleaved with attack activities
fundamentally due to inherent program logic, globally shared
logs and central user interfaces that access both malware and
benign ﬁles.
9
TABLE IV: Elapsed Analysis Time When 100%, 90% and 50% Attack Traces Have Been Revealed, and Average Elapsed Time.
Attack Case
Data Theft
Phishing Email
Shellshock
Netcat Backdoor
Cheating Student
Illegal Storage
wget-gcc
passwd-gzip-scp
Runtime (100%CEs)
Baseline
16.76s
1m2s
2m3s
8.83s
> 1d
27m51s
42m9s
> 1d
Prio
2.62s
1m4s
12.08s
1.28s
40m21s
14m10s
6m23s
1m24s
Runtime (90%CEs)
Baseline
14.01s
1m1s
2m2s
8.81s
> 1d
26m27s
29m45s
> 1d
Prio
2.48s
28.48s
11.83s
1.23s
40m19s
14m10s
5m54s
1m23s
Runtime (50%CEs)
Baseline
Avg. Runtime for All CEs
Baseline
Prio
2.03s
28.47s
6.48s
0.90s
35m14s
13m51s
5m48s
42s
6.29s
45.90s
37.45s
6.85s
NA
15m31s
18m31s
NA
4.03s
1m
15.16s
7.01s
> 1d
14m3s
12m5s
3m32s
Prio
1.55s
27.51s
9.13s
0.88s
24m47s
12m39s
5m37s
57s
TABLE V: Ordinal of the Events, Upon Analyzing Which, 100%, 90% and 50% of Attack Traces Have Been Revealed, and
Average Ordinal of All Critical Events.
Ordinal (100%CEs)
Baseline
Avg. Ordinal of All CEs
Baseline
Attack Case
Data Theft
Phishing Email
Shellshock
Netcat Backdoor
Cheating Student
Illegal Storage
wget-gcc
passwd-gzip-scp
174
3281
11255
1347
>7526
3971
4820
>2718
Prio
31
3281
35
35
5481
70
610
210
Ordinal (90%CEs)
Prio
Baseline
27