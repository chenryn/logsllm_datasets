context.write（new Text（"grandchild"），new Text（"grandparent"））；
time++；
}
int grandchildnum=0；
String grandchild[]=new String[10]；
int grandparentnum=0；
String grandparent[]=new String[10]；
Iterator ite=values.iterator（）；
while（ite.hasNext（））
{
String record=ite.next（）.toString（）；
int len=record.length（）；
int i=2；
if（len==0）continue；
char relationtype=record.charAt（0）；
String childname=new String（）；
String parentname=new String（）；
//获取value-list中value的child
while（record.charAt（i）！='+'）
{
childname=childname+record.charAt（i）；
i++；
}
i=i+1；
//获取value-list中value的parent
while（i＜len）
{
parentname=parentname+record.charAt（i）；
i++；
}
//左表，取出child放入grandchild
if（relationtype=='1'）{
grandchild[grandchildnum]=childname；
grandchildnum++；
}
else{//右表，取出parent放入grandparent
grandparent[grandparentnum]=parentname；
grandparentnum++；
}
}
//grandchild和grandparent数组求笛卡儿积
if（grandparentnum！=0＆＆grandchildnum！=0）{
for（int m=0；m＜grandchildnum；m++）{
for（int n=0；n＜grandparentnum；n++）{
context.write（new Text（grandchild[m]），new Text（grandparent[n]））；
//输出结果
}
}
}
}
}
public static void main（String[]args）throws Exception{
Configuration conf=new Configuration（）；
String[]otherArgs=new GenericOptionsParser（conf, args）.getRemainingArgs（）；
if（otherArgs.length！=2）{
System.err.println（"Usage：wordcount＜in＞＜out＞"）；
System.exit（2）；
}
Job job=new Job（conf，"single table join"）；
job.setJarByClass（STjoin.class）；
job.setMapperClass（Map.class）；
job.setReducerClass（Reduce.class）；
job.setOutputKeyClass（Text.class）；
job.setOutputValueClass（Text.class）；
FileInputFormat.addInputPath（job, new Path（otherArgs[0]））；
FileOutputFormat.setOutputPath（job, new Path（otherArgs[1]））；
System.exit（job.waitForCompletion（true）?0：1）；
}
}
5.5 多表关联
 5.5.1 实例描述
多表关联和单表关联类似，它也是通过对原始数据进行一定的处理，从其中挖掘出关心的信息。下面进入这个实例。
输入是两个文件，一个代表工厂表，包含工厂名列和地址编号列；另一个代表地址表，包含地址名列和地址编号列。要求从输入数据中找出工厂名和地址名的对应关系，输出工厂名-地址名表。
样例输入：
factory：
factoryname addressed
Beijing Red Star 1
Shenzhen Thunder 3
Guangzhou Honda 2
Beijing Rising 1
Guangzhou Development Bank 2
Tencent 3
Bank of Beijing 1
address：
addressID addressname
1 Beijing
2 Guangzhou
3 Shenzhen
4 Xian
样例输出：
factoryname addressname
Bank of Beijing Beijing
Beijing Red Star Beijing
Beijing Rising Beijing
Guangzhou Development Bank Guangzhou
Guangzhou Honda Guangzhou
Shenzhen Thunder Shenzhen
Tencent Shenzhen
5.5.2 设计思路
多表关联和单表关联相似，都类似于数据库中的自然连接。相比单表关联，多表关联的左右表和连接列更加清楚，因此可以采用和单表关联相同的处理方式。Map识别出输入的行属于哪个表之后，对其进行分割，将连接的列值保存在key中，另一列和左右表标志保存在value中，然后输出。Reduce拿到连接结果后，解析value内容，根据标志将左右表内容分开存放，然后求笛卡儿积，最后直接输出。
这个实例的具体分析参考单表关联实例，下面给出代码。
5.5.3 程序代码
程序代码如下：
package cn.edu.ruc.cloudcomputing.book.chapter05；
import java.io.IOException；
import java.util.*；
import org.apache.hadoop.conf.Configuration；
import org.apache.hadoop.fs.Path；
import org.apache.hadoop.io.IntWritable；
import org.apache.hadoop.io.Text；
import org.apache.hadoop.mapreduce.Job；
import org.apache.hadoop.mapreduce.Mapper；
import org.apache.hadoop.mapreduce.Reducer；
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat；
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat；
import org.apache.hadoop.util.GenericOptionsParser；
public class MTjoin{
public static int time=0；
public static class Map extends Mapper＜Object, Text, Text, Text＞{
//在Map中先区分输入行属于左表还是右表，然后对两列值进行分割，
//连接列保存在key值，剩余列和左右表标志保存在value中，最后输出
public void map（Object key, Text value, Context context）throws
IOException, InterruptedException{
String line=value.toString（）；
int i=0；
//输入文件首行，不处理
if（line.contains（"factoryname"）==true||line.contains（"addressID"）==true）{
return；
}
//找出数据中的分割点
while（line.charAt（i）＞='9'||line.charAt（i）＜='0'）{
i++；
}
if（line.charAt（0）＞='9'||line.charAt（0）＜='0'）{
//左表
int j=i-1；
while（line.charAt（j）！=''）j--；
String[]values={line.substring（0，j），line.substring（i）}；
context.write（new Text（values[1]），new Text（"1+"+values[0]））；
}
else{//右表
int j=i+1；
while（line.charAt（j）！=''）j++；
String[]values={line.substring（0，i+1），line.substring（j）}；