title:Vulnerability Analysis of MMS User Agents
author:Collin Mulliner and
Giovanni Vigna
Vulnerability Analysis of MMS User Agents
Collin Mulliner and Giovanni Vigna
University of California, Santa Barbara, USA
{mulliner,vigna}@cs.ucsb.edu
Abstract
The Multimedia Messaging Service (MMS) is becoming
more popular, as mobile phones integrate audio and video
recording functionality. Multimedia messages are delivered
to users through a multi-step process, whose end-points
are the MMS User Agents that reside on the users’ mobile
phones. The security of these components is critical, be-
cause they might have access to private information and, if
compromised, could be leveraged to spread an MMS-based
worm. Unfortunately, the vulnerability analysis of these
components is made more difﬁcult by the fact that they are
mostly closed-source and the testing has to be performed
through the mobile phone network, which makes the testing
time-consuming and costly. This paper presents a novel
approach to the security testing of MMS User Agents. Our
approach takes into account the effects of the infrastructure
on the delivery of MMS messages and then uses a virtual
infrastructure to speed up the testing process. Our testing
approach was able to identify a number of previously
unknown vulnerabilities, which, in one case, allowed for
the execution of arbitrary code.
Keywords: Mobile devices, Mobile phones, Multimedia
Messaging Service, Vulnerability Analysis, Fuzzing.
1 Introduction
Multimedia messaging is becoming increasingly popu-
lar among mobile phone users. Almost all new mobile
phones support multimedia messaging, with the exception
of phones speciﬁcally targeting the low-cost market.
In
addition, mobile phone service providers heavily subsi-
dize multimedia messaging-enabled phones, because ser-
vice fees represent an additional source of revenue.
Unfortunately,
the Multimedia Messaging Service
(MMS) is also open to abuse, and several mobile phone
viruses exist which use multimedia messages to spread.
None of the currently known mobile phone viruses exploit
actual vulnerabilities, and, instead, they rely on social engi-
neering techniques to spread from phone to phone. How-
ever, it is just a matter of time before phone-based mal-
ware will be able to exploit ﬂaws in mobile phone appli-
cations to spread from device to device without requiring
any user action. Therefore, it is necessary to develop tools
and techniques to improve the security of mobile phone ap-
plications.
In this paper, we present a novel approach to the vulnera-
bility analysis of MMS User Agents, which are MMS client
applications. To the best of our knowledge, no attempt has
been made before to analyze or test Multimedia Messaging
Service User Agents for vulnerabilities.
Analyzing mobile phone applications is difﬁcult for sev-
eral reasons. First of all, these applications lack decent doc-
umentation, and, in addition, mobile phone operating sys-
tems often do not provide sophisticated development kits
or support for debugging. Further, analyzing a service like
MMS requires access to a special infrastructure, namely the
phone service network. As a consequence, the testing is
costly (because one has to pay a fee for each message sent)
and time-consuming (because of the delays introduced by
the infrastructure).
We addressed these problems by building a virtual MMS
system that fully simulates MMS message transfer to and
from smart phone User Agents. The virtual MMS system is
completely software-based and can be easily used by others
who intend to perform the same kind of testing.
Vulnerability analysis of MMS User Agents was con-
ducted using fuzzing. We chose fuzzing as the testing tech-
nique because we did not have access to the source code of
the target application. In this paper, we present a detailed
study of the MMS message format and the possibilities for
fuzzing it. Further, we present our fuzzing methodology and
the fuzzing tool we have developed. Our approach is gen-
eral enough to be reusable for analyzing other MMS User
Agent implementations.
So far, we have found several buffer overﬂow vulner-
abilities in the tested MMS User Agent implementation,
some of which are security critical, because they allow
one to manipulate the program counter of the application’s
process. We exploited one of the vulnerabilities to inject
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:30:50 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006arbitrary code on the target device using an MMS message.
This exploits represents the ﬁrst mobile phone-related
remote code-injection attack.
The contributions of this paper are the following:
• We introduce a novel methodology to test MMS-based
applications that takes into account the sanitization
characteristics of the MMS infrastructure.
• We developed a testing environment that allows one to
perform MMS User Agent testing at higher speeds and
without costs.
• We developed a tool that performs security testing of
MMS User Agents through fuzzing. The tool found a
number of previously-unknown vulnerabilities.
• We developed the ﬁrst MMS-based remote exploit for
mobile phones.
The rest of this paper is structured as follows: Section 2
presents related work. Section 3 describes the MMS archi-
tecture, its components, and how messages are transferred
between clients. Section 4 gives an overview of what an
MMS User Agent is, how it works, and some speciﬁcs of
the User Agent implementation we tested.
In Section 5,
we identify the various inputs to a User Agent and describe
our virtual MMS system. In Section 6 we present our MMS
fuzzing tool, the methodology, and the results of our fuzzing
approach. Section 7 presents a SMIL-based MMS exploit
against PocketPC-based phones and in Section 8 we brieﬂy
conclude.
2 Related Work
Previous research on MMS client security was mostly
conducted by companies that develop anti-virus products
to detect malware that spreads over MMS messages (e.g.,
Commwarrior [5]). These viruses do not exploit vulnera-
bilities in the MMS software. Rather, they rely on social
engineering techniques to lure the user into executing a ma-
licious payload.
The tools developed so far use simple signature-based
techniques to detect malicious SMS and MMS messages ei-
ther on the phone or in the infrastructure. These tools suffer
from the same limitations of OS-based anti-malware tools:
a signature-based approach can only detect known malware
based on samples collected “in the wild,” and, thus, needs
continuous updating.
Other research works mainly focused on two compo-
nents of the mobile phone infrastructure: the Short Mes-
sage Service (SMS) and the Wireless Application Protocol
(WAP) [19]. Three studies were performed on different mo-
bile phone models from different manufacturers [8, 3, 11],
which revealed problems with the handling of binary SMS
messages that lead phones to hang or reboot. These bugs
could be used for Denial-of-Service (DoS) attacks against
the vulnerable devices.
A study on the security of the SMS infrastructure [16]
revealed that SMS messages sent from the Internet could
be used to perform a Distributed Denial-of-Service (DDoS)
attack against the mobile communication infrastructure of
a large city. The attack leverages the delays in the store-
and-forward message delivery architecture to overload the
network. The study clearly demonstrated the difference
between standard vulnerability analysis techniques and the
novel techniques that need to be employed when testing ap-
plications over mobile phone networks.
Multiple security studies have been conducted on the
WAP infrastructure, covering both client-side and server-
side components of the architecture. Of particular inter-
est are FuzzServer [10] and the PROTOS [12] test suite,
which demonstrated the effectiveness of fuzzing in the se-
curity testing of mobile phone infrastructure components.
FuzzServer [10] is a very simple fuzzer to analyze the gate-
way components of the WAP infrastructure by generating
faulty headers ﬁelds (e.g., containing unusually long strings
or strings containing formatting directives) in response to
queries from a WAP gateway. The goal of these messages
is to generate in the gateway application faults that might
be associated with exploitable ﬂaws. The PROTOS [12] test
suite is a general fuzzing framework, which supports a num-
ber of different protocols. PROTOS uses message gram-
mars to generate test cases that are likely to trigger faults
in the tested application. In 2000, the creators of PROTOS
conducted a study on multiple WAP Gateways and WAP-
based browsers and managed to ﬁnd ﬂaws in most tested
products [9].
Even though the results obtained are promising, both
the aforementioned approaches do not address the security
analysis issues that are characteristic of mobile phone in-
frastructures. In particular, our approach takes into account
the modiﬁcation and sanitization performed by the infras-
tructure to perform more focused security testing. In addi-
tion, our work focuses on the MMS infrastructure, which
has been overlooked by previous research. We believe that
there is a great need for effective tools that support third-
party security testing of mobile phones and mobile phone
network components. The rest of this paper presents a novel
testing approach for this class of applications and a tool
based on the approach.
3 The MMS Architecture
The goal of the Multimedia Messaging Service (MMS)
is to support the exchange of messages between User Agent
applications, which usually reside on mobile phones and are
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:30:50 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006[A](cid:13)
  P O S T   ) (cid:13)
S e n d   ( (cid:13)W S P (cid:13)/
(cid:13)
(cid:13)W T P (cid:13)
S
R
P
G
WAP(cid:13)
Gateway(cid:13)
PushProxy(cid:13)
SMSC(cid:13)
 H
T
T
P P
O
S
T(cid:13)
MMSC(cid:13)
MMS(cid:13) Relay(cid:13)
MMS(cid:13) Server(cid:13)
e   ( (cid:13)W S
(cid:13)
S
P (cid:13)/(cid:13)W T
R
P
G
v
R e t ri e
[B](cid:13)
N
otific
atio
n ((cid:13)S
M
S(cid:13)/(cid:13)W
a
p
P
u
s
 )(cid:13)
h(cid:13)
WAP(cid:13)
Gateway(cid:13)
PushProxy(cid:13)
T   ) (cid:13)
P (cid:13)  G E
H
T
T
P G
E
T(cid:13)
N
otific
atio
n(cid:13)
N
o
t
i
f
i
c
a
t
i
o
n
(
(cid:13)W
a
p
P
u
s
h
)
(cid:13)
(cid:13)
SMSC(cid:13)
MMSC(cid:13)
MMS(cid:13) Relay(cid:13)
MMS(cid:13) Server(cid:13)
Figure 1. The MMS architecture and the mes-
sage send process.
Figure 2. The MMS architecture and the mes-
sage retrieval process.
operated by the users.
The MMS architecture is almost completely IP-based,
and relies on both the HTTP [6] protocol and the proto-
cols deﬁned by the WAP architecture [19]. These proto-
cols, in turn, rely on the transport mechanisms provided by
the phone network to interact with the User Agent on the
mobile phone.
The delivery of messages between User Agents is carried
out by four components: the MMS Server, the MMS Relay,
the WAP Gateway/PushProxy, and the Short Message Ser-
vice Center (SMSC). The MMS Server and MMS Relay
together are commonly referred to as the Multimedia Mes-
sage Service Center (MMSC). The components and their
relationships are shown in Figures 1 and 2 and explained
hereinafter.
MMS Server. The MMS Server is responsible for storing
the messages sent from the users and for deciding
when the messages should be delivered to the recip-
ients (e.g., based on service-level agreement parame-
ters).
MMS Relay. The MMS Relay handles the actual message
transfer using a number of different mechanisms, de-
pending on the characteristics of the recipient. More
precisely, it will use the WAP Gateway/PushProxy if
the message is intended for a mobile phone user in the
same network, an SMTP server if the message is in-
tended for an email account, and the MMS Relay of
another provider if the message is intended for a user
of another network.
WAP Gateway/PushProxy. The WAP Gateway/Push-
Proxy has two functions. First, it serves as a gateway
between the user’s mobile phone and the HTTP-based
infrastructure. Second, it serves as a WAP PushProxy
and delivers notiﬁcations (via WAP Push messages)
that are used to notify the user that a multimedia
message is ready to be retrieved.
SMSC. The MMS Relay and the WAP PushProxy deliver
WAP Push notiﬁcations to the user phones via the
SMSC (Short Message Service Center).
3.1 MMS Message Transfer
The process of transferring an MMS message between
a sender (A) and a receiver (B) is separated into two parts:
send and retrieve. The send process, carried out by A, is
shown in Figure 1, while the retrieval process, carried out
by B, is shown in Figure 2. Our description assumes that
both users’ phones are using a GPRS connection in order to
access the IP-based network of the phone service provider,
and some details are omitted for clarity (e.g., the use of sta-
tus information messages). A complete description of the
delivery process can be found in [20, 22]. The message
types mentioned in the description below are explained in
more detail in the next section.
When sending an MMS, the user ﬁrst creates a message
and then requests the User Agent to deliver the message
to the intended recipient. The User Agent then sends a
WTP/WSP POST to the WAP gateway, which translates the
WTP/WSP POST into an HTTP POST and forwards it to
the MMS Relay.
The MMS Relay receives the message and then forwards
it to the MMS Server. After that, the MMS Relay sends the
reply to the POST request back to the User Agent using the
WAP gateway as an intermediary. The reply contains infor-
mation about the success or failure of the message submis-
sion. If the submission is successful, the reply contains a
reference code that can be used later to match delivery no-
tiﬁcations with a previously-sent message. The MMS mes-
sage type used for sending a message is M-Send.req and the
message type of the conﬁrmation is M-Send.conf.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:30:50 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006Transaction
Request Type
Result Type
Field Name
Content
Encoding
Sending a message
Receiving a message
New message notiﬁcation
Delivery Report
Acknowledgment
M-Send.req
WTP/WSP/HTTP Get.req
M-Notification.ind
M-Delivery.ind
M-Acknowledge.ind
M-Send.conf
M-Retrieve.conf
M-NotifyResp.ind
Table 1. MMS message types.
X-Mms-Message-Type