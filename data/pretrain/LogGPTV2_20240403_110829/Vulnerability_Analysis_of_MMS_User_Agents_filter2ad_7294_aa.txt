# Vulnerability Analysis of MMS User Agents

**Authors: Collin Mulliner and Giovanni Vigna**  
**Affiliation: University of California, Santa Barbara, USA**  
**Email: {mulliner, vigna}@cs.ucsb.edu**

## Abstract
The Multimedia Messaging Service (MMS) is gaining popularity as mobile phones increasingly integrate audio and video recording capabilities. MMS messages are delivered through a multi-step process, with the end-points being the MMS User Agents on users' mobile phones. The security of these components is critical, as they may have access to private information and, if compromised, could be used to spread MMS-based worms. Unfortunately, vulnerability analysis of these components is challenging due to their closed-source nature and the need to perform testing through the mobile phone network, which is both time-consuming and costly. This paper introduces a novel approach to the security testing of MMS User Agents. Our method considers the effects of the infrastructure on MMS message delivery and uses a virtual infrastructure to expedite the testing process. Our testing approach identified several previously unknown vulnerabilities, one of which allowed for the execution of arbitrary code.

**Keywords:** Mobile devices, Mobile phones, Multimedia Messaging Service, Vulnerability Analysis, Fuzzing

## 1. Introduction
Multimedia messaging is becoming increasingly popular among mobile phone users. Almost all new mobile phones support multimedia messaging, except those targeting the low-cost market. Additionally, mobile phone service providers heavily subsidize multimedia messaging-enabled phones because service fees represent an additional source of revenue.

Unfortunately, the Multimedia Messaging Service (MMS) is also open to abuse, and several mobile phone viruses exist that use multimedia messages to spread. None of the currently known mobile phone viruses exploit actual vulnerabilities; instead, they rely on social engineering techniques to spread from phone to phone. However, it is only a matter of time before phone-based malware will exploit flaws in mobile phone applications to spread without requiring any user action. Therefore, it is necessary to develop tools and techniques to improve the security of mobile phone applications.

In this paper, we present a novel approach to the vulnerability analysis of MMS User Agents, which are MMS client applications. To the best of our knowledge, no prior attempt has been made to analyze or test MMS User Agents for vulnerabilities.

Analyzing mobile phone applications is difficult for several reasons. First, these applications often lack proper documentation, and mobile phone operating systems frequently do not provide sophisticated development kits or debugging support. Furthermore, analyzing a service like MMS requires access to a special infrastructure, namely the phone service network. As a result, testing is costly (due to fees for each message sent) and time-consuming (due to delays introduced by the infrastructure).

We addressed these problems by building a virtual MMS system that fully simulates MMS message transfer to and from smartphone User Agents. The virtual MMS system is entirely software-based and can be easily used by others who intend to perform similar testing.

Vulnerability analysis of MMS User Agents was conducted using fuzzing. We chose fuzzing as the testing technique because we did not have access to the source code of the target application. In this paper, we present a detailed study of the MMS message format and the possibilities for fuzzing it. We also present our fuzzing methodology and the fuzzing tool we developed. Our approach is general enough to be reusable for analyzing other MMS User Agent implementations.

So far, we have found several buffer overflow vulnerabilities in the tested MMS User Agent implementation, some of which are security-critical, as they allow manipulation of the program counter of the application's process. We exploited one of the vulnerabilities to inject arbitrary code on the target device using an MMS message. This represents the first mobile phone-related remote code-injection attack.

The contributions of this paper are:
- A novel methodology to test MMS-based applications that takes into account the sanitization characteristics of the MMS infrastructure.
- A testing environment that allows for faster and cost-free MMS User Agent testing.
- A tool that performs security testing of MMS User Agents through fuzzing, which identified several previously unknown vulnerabilities.
- The first MMS-based remote exploit for mobile phones.

The rest of this paper is structured as follows: Section 2 presents related work. Section 3 describes the MMS architecture, its components, and how messages are transferred between clients. Section 4 provides an overview of what an MMS User Agent is, how it works, and specifics of the User Agent implementation we tested. Section 5 identifies the various inputs to a User Agent and describes our virtual MMS system. Section 6 presents our MMS fuzzing tool, the methodology, and the results of our fuzzing approach. Section 7 discusses a SMIL-based MMS exploit against PocketPC-based phones, and Section 8 concludes the paper.

## 2. Related Work
Previous research on MMS client security was primarily conducted by companies developing anti-virus products to detect malware that spreads via MMS messages (e.g., Commwarrior [5]). These viruses do not exploit vulnerabilities in the MMS software but rely on social engineering techniques to lure the user into executing a malicious payload.

The tools developed so far use simple signature-based techniques to detect malicious SMS and MMS messages either on the phone or in the infrastructure. These tools suffer from the same limitations as OS-based anti-malware tools: a signature-based approach can only detect known malware based on samples collected "in the wild" and thus needs continuous updating.

Other research has focused on two components of the mobile phone infrastructure: the Short Message Service (SMS) and the Wireless Application Protocol (WAP) [19]. Three studies were performed on different mobile phone models from different manufacturers [8, 3, 11], revealing issues with the handling of binary SMS messages that could cause phones to hang or reboot. These bugs could be used for Denial-of-Service (DoS) attacks against vulnerable devices.

A study on the security of the SMS infrastructure [16] revealed that SMS messages sent from the Internet could be used to perform a Distributed Denial-of-Service (DDoS) attack against the mobile communication infrastructure of a large city. The attack leverages the delays in the store-and-forward message delivery architecture to overload the network. The study clearly demonstrated the difference between standard vulnerability analysis techniques and the novel techniques needed when testing applications over mobile phone networks.

Multiple security studies have been conducted on the WAP infrastructure, covering both client-side and server-side components. Of particular interest are FuzzServer [10] and the PROTOS [12] test suite, which demonstrated the effectiveness of fuzzing in the security testing of mobile phone infrastructure components. FuzzServer [10] is a simple fuzzer that analyzes the gateway components of the WAP infrastructure by generating faulty header fields (e.g., containing unusually long strings or strings with formatting directives) in response to queries from a WAP gateway. The goal is to generate faults in the gateway application that might be associated with exploitable flaws. The PROTOS [12] test suite is a general fuzzing framework supporting multiple protocols. PROTOS uses message grammars to generate test cases likely to trigger faults in the tested application. In 2000, the creators of PROTOS conducted a study on multiple WAP Gateways and WAP-based browsers, finding flaws in most tested products [9].

Although the results are promising, both approaches do not address the security analysis issues characteristic of mobile phone infrastructures. Specifically, our approach considers the modifications and sanitizations performed by the infrastructure to conduct more focused security testing. Additionally, our work focuses on the MMS infrastructure, which has been overlooked by previous research. We believe there is a significant need for effective tools that support third-party security testing of mobile phones and mobile phone network components. The rest of this paper presents a novel testing approach for this class of applications and a tool based on this approach.

## 3. The MMS Architecture
The goal of the Multimedia Messaging Service (MMS) is to support the exchange of messages between User Agent applications, which usually reside on mobile phones and are operated by the users.

The MMS architecture is almost entirely IP-based and relies on both the HTTP [6] protocol and the protocols defined by the WAP architecture [19]. These protocols, in turn, rely on the transport mechanisms provided by the phone network to interact with the User Agent on the mobile phone.

The delivery of messages between User Agents is carried out by four components: the MMS Server, the MMS Relay, the WAP Gateway/PushProxy, and the Short Message Service Center (SMSC). The MMS Server and MMS Relay together are commonly referred to as the Multimedia Message Service Center (MMSC). The components and their relationships are shown in Figures 1 and 2 and explained below.

### 3.1 MMS Components
- **MMS Server**: The MMS Server is responsible for storing the messages sent from the users and deciding when the messages should be delivered to the recipients (e.g., based on service-level agreement parameters).
- **MMS Relay**: The MMS Relay handles the actual message transfer using different mechanisms depending on the recipient's characteristics. It will use the WAP Gateway/PushProxy if the message is intended for a mobile phone user in the same network, an SMTP server if the message is intended for an email account, and the MMS Relay of another provider if the message is intended for a user of another network.
- **WAP Gateway/PushProxy**: The WAP Gateway/PushProxy serves two functions. First, it acts as a gateway between the user’s mobile phone and the HTTP-based infrastructure. Second, it serves as a WAP PushProxy, delivering notifications (via WAP Push messages) to notify the user that a multimedia message is ready to be retrieved.
- **SMSC**: The MMS Relay and the WAP PushProxy deliver WAP Push notifications to the user phones via the SMSC (Short Message Service Center).

### 3.2 MMS Message Transfer
The process of transferring an MMS message between a sender (A) and a receiver (B) is divided into two parts: send and retrieve. The send process, carried out by A, is shown in Figure 1, while the retrieval process, carried out by B, is shown in Figure 2. Our description assumes that both users' phones are using a GPRS connection to access the IP-based network of the phone service provider, and some details are omitted for clarity (e.g., the use of status information messages). A complete description of the delivery process can be found in [20, 22]. The message types mentioned in the description below are explained in more detail in the next section.

When sending an MMS, the user first creates a message and then requests the User Agent to deliver the message to the intended recipient. The User Agent sends a WTP/WSP POST to the WAP gateway, which translates the WTP/WSP POST into an HTTP POST and forwards it to the MMS Relay.

The MMS Relay receives the message and forwards it to the MMS Server. After that, the MMS Relay sends the reply to the POST request back to the User Agent using the WAP gateway as an intermediary. The reply contains information about the success or failure of the message submission. If the submission is successful, the reply includes a reference code that can be used later to match delivery notifications with a previously-sent message. The MMS message type used for sending a message is M-Send.req, and the message type of the confirmation is M-Send.conf.

| Transaction | Request Type | Result Type | Field Name | Content Encoding |
|-------------|--------------|-------------|------------|------------------|
| Sending a message | M-Send.req | M-Send.conf | - | - |
| Receiving a message | M-Retrieve.req | M-Retrieve.conf | - | - |
| New message notification | M-Notification.ind | M-NotifyResp.ind | - | - |
| Delivery Report | M-Delivery.ind | - | - |
| Acknowledgment | M-Acknowledge.ind | - | - |

**Table 1. MMS message types.**

**X-Mms-Message-Type**