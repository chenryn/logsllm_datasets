# Poster: Towards Formal Verification of DIFC Policies

**Authors:**
- Zhi Yang<sup>1,2</sup>
- Lihua Yin<sup>1</sup>
- Miyi Duan<sup>1</sup>
- Shuyuan Jin<sup>1</sup>

**Affiliations:**
- <sup>1</sup>Institute of Computing Technology, Chinese Academy of Sciences, Beijing 100190, China
- <sup>2</sup>Institute of Electronic Technology, Information Engineering University, Zhengzhou 450004, China

**Contact:**
{yangzhi, yinlihua, duanmiyi, jinshuyuan}@software.ict.ac.cn

---

## Abstract

Decentralized Information Flow Control (DIFC) is a recent innovation that enhances the flexibility of traditional information flow models. However, this flexibility also introduces challenges in specifying and managing DIFC policies. Formal verification techniques can significantly improve the current state of the art in policy specification and management. We demonstrate that the general problem of verifying DIFC policies is NP-hard, and several subcases remain NP-complete. We propose a model checking approach to address these problems and present experimental results that validate the effectiveness of our approach.

**Categories and Subject Descriptors:**
- D.4.6 [OPERATING SYSTEMS]: Security and protection – Access controls, Information flow Controls

**General Terms:**
- Security, Verification

**Keywords:**
- DIFC, verification, formal method, NP-hard, model checking

---

## 1. Introduction

Classical Information Flow Control (IFC) has often been overly restrictive, hindering the development of useful systems. IFC typically requires a single administrator to set all system-wide policies, which becomes challenging when multiple third-party applications are running, as it is difficult for the administrator to understand each application's detailed security requirements. Decentralized Information Flow Control (DIFC) [1] addresses this by allowing processes to transfer privileges and declassify information in a decentralized manner.

However, realistic policies do not simply fall into DIFC models. A significant challenge in information-flow security arises from the complexity of managing security policies. Administrators must not only understand the desired security policies but also know how to formalize them using annotations. Additionally, DIFC allows subjects to dynamically change authorization states by manipulating their own or others' labels. These mechanisms can lead to a lack of confidence in whether the resulting policy configurations enforce the desired objectives.

To protect the secrecy and integrity of systems, a fundamental question in DIFC safety is: "Given the policy specification, can information ever flow from one subject (object) to another?" This is an analysis of information propagation, aiming to check whether the system maintains desirable security properties in all states. Security properties are formulated from a set of access control policies, and formal verification techniques can be used to ensure the consistency of the access control specification. Security analysis provides answers to queries about whether an undesirable state is reachable or if all reachable states satisfy the desirable properties.

Previous work on DIFC verification includes Chaudhuri et al. [8], who presented EON, a logic-programming language and tool for modeling and analyzing dynamic access control models in Asbestos and Windows Vista systems. Harris et al. [9] introduced an abstraction method for model checking, focusing on automatically extracting and checking models of applications. However, these approaches apply only to subcases without transferring privileges and do not analyze the computational complexity of DIFC policy verification.

In this work, we study the computational complexity of policy verification for Asbestos [2], HiStar [3], and Flume [4]. We also examine the factors contributing to this complexity.

---

## 2. Problem Complexity

### 2.1 Definition of DIFC Policy Verification

Decentralized declassification and transferring privileges complicate information flow analysis. While declassifying information (downgrading sensitivity labels on data) can violate traditional information flow policies, its use is generally limited to trusted subjects. However, implementing this limitation is challenging. First, there is potential for abuse, where sensitive information can be released through channels intended for less sensitive data [5][6]. For example, login programs may return the login result, which can be exploited to encode and release sensitive information. Second, administrators may need to grant declassification abilities for availability reasons, even if the subjects are not fully trusted. Third, in DIFC systems, subjects can independently grant their own abilities, including declassification capabilities, to other subjects, making it difficult to ensure the trustworthiness of new declassifiers. Our analysis assumes that declassifiers may release any information they know, and information flows are subject only to DIFC rules.

### 2.2 Complexity of the Problem for Flume

Flume uses tags and labels to track data as it flows through a system. Let \( \mathcal{T} \) be the set of all possible tags. Labels are subsets of \( \mathcal{T} \). Each process \( P \) maintains a secrecy label \( P_S \) and an integrity label \( P_I \). For a tag \( t \), capabilities are denoted as \( +t \) (add \( t \) to the label) and \( -t \) (remove \( t \) from the label). A process \( P \) with \( t \in P_S^+ \) can add \( t \) to its label, and a process \( P \) with \( t \in P_S^- \) can remove \( t \) from its label.

In Flume, for a process \( P \), let the label \( L \) be \( P_S \) or \( P_I \), and let \( L' \) be the requested new value of \( L \). The change from \( L \) to \( L' \) is safe if and only if:
- \( P_O \subseteq L' \)
- \( L' \subseteq P_I \)

The information flow from process \( p \) to process \( q \) is safe if:
- \( p_D = q_D \)
- \( p_O \subseteq q_I \)

Further, a process \( P \) can grant capabilities to another process \( Q \) as long as \( P \) can send a message to \( Q \). \( P \) can also subtract capabilities from \( P_O \) as it sees fit.

Based on the problem definition and the Flume model, we have the following conclusions:

**Theorem 1:** The problem of policy verification in the Flume system is NP-hard.

**Theorem 2:** The problem of policy verification in the Flume system, without processes granting their abilities to others, is NP-complete.

We use the reduction method to prove these theorems.

---

This work was supported by the National Natural Science Foundation of China under Grant No. 61070186. Copyright is held by the author/owner(s). CCS'11, October 17–21, 2011, Chicago, Illinois, USA. ACM 978-1-4503-0244-9/10/10.