title:Poster: towards formal verification of DIFC policies
author:Zhi Yang and
Lihua Yin and
Miyi Duan and
Shuyuan Jin
POSTER: Towards Formal Verification of DIFC Policies 
Zhi Yang1,2, Lihua Yin1, Miyi Duan 1, Shuyuan Jin1 
1 Institute of Computing Technology, Chinese Academy of Sciences, Beijing 100190, China 
2 Institute of Electronic Technology, Information Engineering University, ZhenZhou 450004,China 
{yangzhi, yinlihua, duanmiyi, jinshuyuan}@software.ict.ac.cn   
ABSTRACT 
Decentralized  information  flow  control  (DIFC)  is  a  recent 
important  innovation  with  flexible  mechanisms  to  improve  the 
availability of traditional information flow models. However, the 
flexibility of DIFC models also makes specifying and managing 
DIFC  policies  a  challenging  problem.  The  formal  policy 
verification techniques can improve the current state of the art of 
policy  specification  and  management.  We  show  that  in  general 
these problems of policy verification of the main DIFC systems 
are NP-hard, and show that several subcases remain NP-complete. 
We  also  propose  an  approach  of  model  checking  to  solve  these 
problems. Experiments are presented to show that this approach is 
effective.  
Categories and Subject Descriptors 
D.4.6 [OPERATING SYSTEMS]: Security and protection –
Access controls, Information flow Controls 
General Terms 
Security, Verification 
Keywords 
DIFC, verification, formal method, NP-hard, model checking 
1.  INTRODUCTION 
The  classical  information  flow  control  (IFC)  has  often  been 
overly restrictive, preventing useful systems from  being  built.  It 
intends  that  a  single  administrator  sets  all  the  system-wide 
policies. When a system run multiple third-party applications, it is 
difficult  for  the  administrator  to  understand  every  application’s 
detailed security requirements. DIFC [1]promises to support such 
situations  by  allowing  processes  to  transfer  privileges  to  others 
and declassify information in a decentralized way. 
important  challenge 
However, realistic policies do not just and simply fall into the 
DIFC  models.  A  perhaps  most 
for 
information-flow security stems from the difficulty of managing 
complex  security  policies.  Administrators  need  to  not  only 
understand what the desired security policies are, but know how 
to  formalize  those  policies  using  annotations.  Moreover,  DIFC 
permits subjects to change the authorization states dynamically by 
manipulating  their  own  labels  or  others  subject’s  labels  within 
This  work  was  supported  by  the  National  Natural  Science 
Foundation of China under Grant No. 61070186 
Copyright is held by the author/owner(s). 
CCS’11, October 17–21, 2011, Chicago, Illinois, USA. 
ACM 978-1-4503-0244-9/10/10. 
Thus, 
state  and 
the  current  authorization 
their  capabilities.  These  mechanisms  often  make  administrators 
lack  confidence  in  whether  the  resulting  policy  configurations 
indeed enforce the desired objectives. 
to  protect  secrecy  and 
integrity  of  systems,  a 
fundamental question of DIFC safety is to answer the following: 
“Given 
the  policy 
specification,  will  information  can  ever  flow  from  a  subject 
(object)  to  another  subject  (object)?”  It  is  an  analysis  of 
information  propagation.  Such  security  analysis  aims  to  check 
whether the system maintains desirable security properties in all 
the  states.  The  security  properties  are  formulated  from  a  set  of 
access control policies. A formal verification technique then can 
be  used 
the  consistency  of  an  access  control 
specification.  Security  analysis  provides  answers  to  the  queries 
whether  an  undesirable  state  is  reachable  or  all  the  reachable 
states satisfy the desirable properties. 
to  ensure 
in  EON  can  be  reduced 
There has been previous work on verification of DIFC systems. 
Chaudhuri et al. [8] presented a logic-programming language and 
tool,  called  EON,  to  model  and  analyze  dynamic  access  control 
models  of  the  Asbestos  and  Windows  Vista  systems.  Query 
evaluation 
to  decidable  query 
satisfiability in a fragment of Datalog. Harris et al. [9] presented a 
method of abstraction that allows a model checker to verify policy 
soundly 
that  manipulate  potentially 
unbounded  sets  of  processes.  Their  approach  focuses  on 
automatically  extracting  and  checking  models  of  applications. 
Harris  et  al  [10]  also  studied  how  to  instrument  DIFC  code 
automatically,  given  only  an  uninstrumented  program  and  some 
policies.  Nevertheless,  their  approaches  apply  only  to  subcases 
without  transferring-privileges.  In  addition,  few  of  these  studies 
analyze 
the  computational  complexity  of  DIFC  policy 
verification.  
for  DIFC  programs 
In this work, we study the computational complexity of policy 
verification of Asbestos [2], HiStar[3] and Flume[4]. Further, we 
study the factors that contribute to the complexity.. 
2.  PROBLEM Complexity 
2.1  Definition of DIFC Policy verification 
As  mentioned  above,  decentralized  declassification  and 
transferring-privileges  complicate  the  information  flow  analysis. 
Since  declassifying  information  (downgrading  the  sensitivity 
labels  on  the  data)  may  violate  traditional  information  flow 
policies,  in  general  its  use  is  limited  to  appropriately  trusted 
subjects.  However,  it  is  difficult  to  implement  this  addition. 
Firstly,  there  is  the  potential  for  the  channel  to  be  abused  to 
release more sensitive information than that intended [5][6]. For 
example, most login programs of operation systems will return the 
login  result  whether  the  visitor  supplies  right  password  or  error 
password.  It  is  a  kind  of  declassification.  However,  an  internal 
user can encode the sensitive information of the system into the 
873password and release it to external users through the channel [5]. 
Secondly,  in  some  cases,  administrators  have  to  give  some 
subjects  the  ability  of  declassifying  on  account  of  availability 
other  than  these  subjects  being  trust.  The  third  one  is  in  DIFC 
systems,  subjects  can  independently  grant  their  own  abilities, 
including declassification capabilities, to other subjects. It is very 
difficult  to  guarantee  the  trust  of  these  new  declassifiers  when 
reliable  trust  evaluation  mechanisms  are  absent.  Therefore,  our 
analysis  assumes  that  declassifiers  may  release  any  information 
they  know  and  information  flows  are  only  subject  to  the 
constraints of the DIFC rules.  
2
,
i
q
1
1+iv
iv  and 
process 
,  not  only  the  information  flow 
 is  legal  in  terms  of  DIFC  rules,  but  also iv  
from iv to
1+iv
and
1+iv
The problem of reachability analysis is a decision problem.  
2.2  Complexity of the Problem for Flume  
Policy Verification  
are ready for the communication link. 
Flume uses tags and labels to track data as it flows through a 
system. Let Τ be the set of all the possible tags. Labels are subsets 
PS ,  an  integrity 
of Τ .  Each  process P maintains  a  secrecy  label
PO .  For  tag  t,  capabilities  are 
label
 can add t to its label. 
denoted  +t and −t
A process P with
. A process P with
t ∈−
 can remove t from its label.  
,  and  a  capability  set
t ∈+
PO
PI
PO
'
+
}
POLL
−⊆−
In Flume, for a process P , let the label L be PS  or PI
'L  be the requested new value of L . The change from  L  to 
safe  if  and  only  if: 
,  where 
=
=
to
and
, and let 
'L  is 
POLL'
PO  
 and 
+⊆−
+
t
t
|{
}
. The information flow from p  
−
only 
if 
D
D
=
P
PO  to process q 
.Further, a process P can grant capabilities in 
so  long  as  P  can  send  a  message  to  Q.  P  can  also  subtract 
capabilities from 
PO
∈
 is 
D
O
,
−
P
safe 
I
t
t
|{
q
I
D
p
t
∈∧
O
∈
and 
PO as it sees fit. 
if
t
t
|{
, where 
−⊇
D
S
q
O
S
∈
p
O
U
}
⊆
−
U
P
P
P
+
+
q
q
q
p
p
According  to  the  problem  definition  and  the  Flume  model 
definition, we have the following conclusions. 
Theorem  1  The  problem  of  policy  verifications  of  Flume 
system is NP-hard.  
That  processes  grants  their  abilities  to  others  seems  to  be  a 
main  factor  that  causes  the  exponential-time  complexity,  while 
the  next  theorem  shows  that  it  still  takes  exponential  time, 
preventing processes from granting their abilities to others. 
Theorem  2  The  problem  of  policy  verifications  of  Flume 
system without processes granting their abilities to others is NP-
complete.  
We use the reduction method to prove these two theorems. The 