which is packed using UPX. In the experiment, our proto(cid:173)
type located malicious call sites in the section UP X1 of its
executable, and set the attribute of the section to read-only.
Rerunning the executable produced an exception which re(cid:173)
vealed the malicious instruction mov [edi ] ,eax. Our
static analyzer chopped the executable using that instruction
to generate vanilla malware. Further study shows that the
chop extracted actually describes the unpack loop of UPX.
3.3 Performance
We measured the performance of our implementation:
infection detection took 73s for MyDoom.D and 66s for
KidLogger; signature generation took 60s for MyDoom.D
and 6s for KidLogger. As a comparison, Panorama [34]
takes 15 to 25 minutes to detect one malware sample.
4 Discussion and Limitations
The current design of AGIS could be evaded by mal(cid:173)
ware that penetrates the operating system (OS) kernel and
those capable of countering dynamic analysis. For exam(cid:173)
ple, malware can check the SSDT to detect the presence of
the kernel monitor and remove its executables. In addition,
an infection might deliberately delay running its malicious
payload or condition the execution of malicious activities
on environmental factors.
Our current implementation only monitors malware's in(cid:173)
teraction with the OS, which are observable from system
calls. However, some infections are in the form of add(cid:173)
ons to a legitimate application and so their interactions with
the application does not go through the OS (e.g., spyware
based on Brower Helper Objects [16]). Our implementa(cid:173)
tion will let these behaviors slip under the radar. While
our implementation will not detect such malware, recent re(cid:173)
search [16, 19] suggests there is no essential technical bar(cid:173)
rier to wrapping the interactions in a technology like AGIS.
Dealing with metamorphic malware is a challenge for
AGIS that we are continuing to explore. Theoretically it is
possible to develop a metamorphic malware that thoroughly
modifies the way it accomplishes its mission for every in(cid:173)
fection. In practice, however, many malware authors build
their metamorphic or polymorphic malware using the mu(cid:173)
tation engines developed by third parties. As discussed in
Section 2.3, AGIS is tolerant of several obfuscations com(cid:173)
mon to such tools.
As discussed in Section 2.3, the AGIS implementation
is limited in its ability to identify the locations of API calls
by malware that forges return addresses in its stack frames
and performs these calls using indirect jumps. This prob(cid:173)
lem can be mitigated through dynamic analysis. For ex(cid:173)
ample, we can use static analysis to identify indirect jumps
and then instrument the code before them to help identify
their jump targets at runtime. Dynamic slicing techniques
can also be applied to extract the chop when obfuscations
confound static analysis.
1-4244-2398-9/08/$20.00 ©2008 IEEE
244
DSN 2008: Li et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:16:20 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
5 Related Work
Techniques for automatic generation of malware signa(cid:173)
tures have been intensively studied [28, 17, 14, 24, 22, 30,
23, 21, 7, 6, 8, 33, 20]. However, existing research mainly
focuses on generation of exploit signatures which reflect the
intrusion vectors malware employs to break into a vulnera(cid:173)
ble system. Such signatures are designed for preventing an
exploit, not for detecting an already infected system. Infec(cid:173)
tion signatures are used to detect infections, which serves to
complement exploit signatures.
Only limited research has been conducted to automate
infection signature generation. The first automatic tool for
generating virus signatures was proposed by Kephart and
Arnold [13]. Their approach extracts a prevalent byte se(cid:173)
quence from infected files which serve as "goats" to at(cid:173)
tract infection from a virus in a sandboxed environment.
This method does not handle metamorphic malware well
and heavily relies on the replication property of viruses.
By comparison, AGIS can generate signatures for non(cid:173)
replicating infections, and is tolerant to some forms of meta(cid:173)
morphic malware. Wang et al. [31] recently proposed Net(cid:173)
Spy, a network-based technique for generating spyware sig(cid:173)
natures. NetSpy intercepts spyware's communication with
spyware companies, and extracts prevalent strings from its
messages.
In contrast, AGIS is a host-based technique,
which complements NetSpy with the host information re(cid:173)
lated to an infection's behaviors.
Recently, Kirda et al. proposed a behavior-based spy(cid:173)
ware detection technique [16, 9] which applies dynamic
analysis to detect suspicious communications between an
IE browser and its Browser Helper Object plug-ins, and then
analyzes the binaries of suspicious plug-ins to identify the
library calls which may lead to leakage of user's inputs. Al(cid:173)
though this approach shares some similarity with AGIS, it
is for detection only, not for signature generation. In addi(cid:173)
tion, its focus is BHO-based spyware, versus the standalone
spyware that AGIS targets.
The taint-analysis technique AGIS uses to construct in(cid:173)
fection graphs resembles those proposed for other purposes
such as tracking intrusion steps and recovering a compro(cid:173)
mised system. BackTracker [15] traces an intrusion back
to the point it entered the system. Process Coloring [12]
is another system designed for a similar purpose. Back-to(cid:173)
the-Future [10] offers a system repair technique to restore
an infected system using a log recording infected files and
registry entries.
With the objective of malware detection, Panorama [34]
tracks how taint information flows among system objects
at an instruction level.
In contrast, our approach tracks
taint propagation at a coarser granularity (system calls) and
so potentially overestimates taint propagation. Our ex(cid:173)
perimental results shown that such overestimation has not
introduced any additional false positives in the detection
phase. Moreover, our coarser approach enables AGIS to run
with less performance overhead. Besides detection, our ap(cid:173)
proach also generates infection signatures. MetaAware [35]
describes an approach to identify metamorphic malware by
extracting and matching code patterns that are used to ex(cid:173)
ecute system calls. Proposed independently, the signature
generation step of AGIS is similar to the code pattern ex(cid:173)
traction step of MetaAware. Compared to MetaAware, our
approach can detect unknown malware, while our approach
doesn't focus on an algorithm to match signatures. The two
approaches can complement each other.
6 Conclusions
In this paper, we presented AGIS, a host-based technique
for automatic generation of infection signatures. AGIS
tracks the activities of suspicious code inside a honeypot
to detect malware, and identifies a set of malicious behav(cid:173)
iors that characterizes the infection. Dynamic and static
analyses are used to automatically extract the instruction se(cid:173)
quences responsible for these behaviors. A range of infec(cid:173)
tion signatures can be constructed using these sequences,
from regular-expression signatures for legacy scanners to
vanilla malware for a static analyzer [4]. Our empirical
study demonstrates the efficacy of the approach.
Acknowledgements
This work was supported in part by the National Sci(cid:173)
ence Foundation Cyber Trust program under Grant No.
CNS-0716292.
References
[1] S. Bhansali, W.-K. Chen, S. de Jong, A. Edwards, R. Mur(cid:173)
ray, M. Drinic;, D. Mihocka, and 1. Chau. Framework for
instruction-level tracing and analysis of program executions.
In VEE '06: Proceedings of the second international confer(cid:173)
ence on Virtual execution environments, pages 154-163,2006.
[2] D. Brumley, 1. Newsome, D. Song, H. Wang, and S. Jha. To(cid:173)
wards automatic generation of vulnerability-based signatures.
In Proceedings of the 2006 IEEE Symposium on Security and
Privacy, 2006.
[3] M. Christodorescu and S. Jha. Testing malware detectors. In
ISSTA '04: Proceedings of the 2004 ACM SIGSOFT interna(cid:173)
tional symposium on Software testing and analysis, pages 34(cid:173)
44, New York, NY, USA, 2004. ACM Press.
[4] M. Christodorescu and S. Jha. Static analysis of executables
In Usenix Sexurity Symposium,
to detect malicious patterns.
August 2003.
[5] M. Christodorescu, S. Jha, S. A. Seshia, D. Song, and R. E.
Bryant. Semantics-aware malware detection. In SP '05: Pro(cid:173)
ceedings of the 2005 IEEE Symposium on Security and Pri(cid:173)
vacy, pages 32-46, Washington, DC, USA, 2005. IEEE Com(cid:173)
puter Society.
1-4244-2398-9/08/$20.00 ©2008 IEEE
245
DSN 2008: Li et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:16:20 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
[6] M. Costa, J. Crowcroft, M. Castro, A. I. T. Rowstron, L. Zhou,
L. Zhang, and P. T. Barham. Vigilante: end-to-end contain(cid:173)
ment of internet worms. In Proceedings ofSOSP, pages 133(cid:173)
147, 2005.
[7] 1. R. Crandall and F. T. Chong. Minos: Control data attack
In Proceedings of
prevention orthogonal to memory model.
MICRO, pages 221-232, 2004.
[8] 1. R. Crandall, Z. Su, and S. F. Wu. On deriving unknown
vulnerabilities from zero-day polymorphic and metamorphic
In CCS '05: Proceedings of the 12th ACM
worm exploits.
conference on Computer and communications security, pages
235-248, New York, NY, USA, 2005. ACM Press.
[9] M. Egele, C. Kruegel, E. Kirda, H. Yin, and D. Song. Dy(cid:173)
In To appear in the 2007 USENIX
namic spyware analysis.
Annual Technical Conference.
[10] F. Hsu, H. Chen, T. Ristenpart, 1. Li, and Z. Suo Back to
the future: A framework for automatic malware removal and
system repair. In ACSAC '06: Proceedings ofthe 22nd Annual
Computer Security Applications Conference on Annual Com(cid:173)
puter Security Applications Conference, pages 257-268, 2006.
[11] G. Hunt and D. Brubacher. Detours: Binary interception
of Win32 functions. In Proceedings of the 3rd USENIX Win(cid:173)
dows NT Symposium(WIN-NT-99, pages 135-144, Berkeley,
CA, July 12-15 1999. USENIX Association.
[12] X. Jiang, A. Walters, F. Buchholz, D. Xu, Y.-M. Wang, and
E. H. Spafford. Provenance-aware tracing of worm break-in
and contaminations: A process coloring approach. In Proceed(cid:173)
ings ofIEEE International Conference on Distributed Comput(cid:173)
ing Systems (ICDCS 2006), 2006.
[13] 1. O. Kephart and W. C. Arnold. Automatic extraction of
In Proceedings of the 4th Virus
computer virus signatures.
Bulletin International Conference, pages 178-184, 1994.
[14] H.-A. Kim and B. Karp. Autograph: Toward automated,
distributed worm signature detection. In Proceedings of 13th
USENIX Security Symposium, pages 271-286, San Diego, CA,
USA, August 2004.
[15] S. T. King and P. M. Chen. Backtracking intrusions. In SOSP
'03: Proceedings of the nineteenth ACM symposium on Oper(cid:173)
ating systems principles, pages 223-236, 2003.
[16] E. Kirda, C. Kruegel, G. Banks, G. Vigna, and R. A. Kem(cid:173)
merer. Behavior-based spyware detection. In Proceedings of
USENIX Security Symposium 2006, 2006.
[17] C. Kreibich and 1. Crowcroft. Honeycomb: creating intru(cid:173)
sion detection signatures using honeypots. SIGCOMM Com(cid:173)
puter Communication Review, 34(1):51-56, 2004.
[18] B. A. Kuperman, C. E. Brodley, H. Ozdoganoglu, T. N. Vi(cid:173)
jaykumar, and A. Jalote. Detection and prevention of stack
buffer overflow attacks. Commun. ACM, 48(11):50-56,2005.
[19] Z. Li, X. Wang, and 1. Y. Choi. Spyshield: Preserving pri(cid:173)
vacy from spy add-ons. In RAID, pages 296-316, 2007.
[20] Z. Liang and R. Sekar. Fast and automated generation of
attack signatures: a basis for building self-protecting servers.
In CCS '05: Proceedings of the 12th ACM conference on
Computer and communications security, pages 213-222, New
York, NY, USA, 2005. ACM Press.
[21] 1. Newsome, D. Brumley, and D. Song. Vulnerability(cid:173)
specific execution filtering for exploit prevention on commod(cid:173)
ity software. In Proceedings of the 13th Annual Network and
Distributed Systems Security Symposium, 2006.
[22] 1. Newsome, B. Karp, and D. Song. Polygraph: Automat(cid:173)
In Pro(cid:173)
ically generating signatures for polymorphic worms.
ceedings of IEEE Symposium on Security and Privacy, pages
226- 241, Okaland, CA, USA, May 2005.
[23] 1. Newsome and D. Song. Dynamic taint analysis for au(cid:173)
tomatic detection, analysis, and signature generation of ex(cid:173)
In Proceedings of the 12th
ploits on commodity software.
Annual Network and Distributed System Security Symposium,
San Diego, CA, USA, Feburary 2005.
[24] G. Portokalidis and H. Bos. SweetBait: Zero-hour worm
detection and containment using honeypots. Technical Report
IR-CS-015, Vrije Universiteit Amsterdam, May 2005.
[25] T. Reps and G. Rosay. Precise interprocedural chopping. In
SIGSOFT '95: Proceedings of the 3rd ACM SIGSOFT sym(cid:173)
posium on Foundations of software engineering, pages 41-52,
1995.
[26] R. Sekar and P. Uppuluri. Synthesizing fast intrusion detec(cid:173)
tion/prevention systems from highlevel specificationsn. In Pro(cid:173)
ceedings of USENIX Security Symposium, pages 63-78, 1999.
[27] S. Sidiroglou and A. D. Keromytis. Countering network
worms through automatic patch generation. IEEE Security and
Privacy, 3(6):41-49, 2005.
[28] S. Singh, C. Estan, G. Varghese, and S. Savage. Automated
In Proceedings of OSDI, pages 45-60,
worm fingerprinting.
2004.
[29] Symantec. The digital immune system. ht t P : / / www •
syrnantec.com/avcenter/reference/dis.tech.
brief .pdf.
[30] Y. Tang and S. Chen. Defending against internet worms:
In Proceedings of IEEE INFO(cid:173)
A signature-based approach.
COM, Miami, Florida, USA, May 2005.
[31] H. Wang, S. Jha, and V. Ganapathy. Netspy: Automatic gen(cid:173)
In ACSAC '06: Pro(cid:173)
eration of spyware signatures for nids.
ceedings of the 22nd Annual Computer Security Applications
Conference on Annual Computer Security Applications Con-
ference, pages 99-108, 2006.
[32] Y.-M. Wang, R. Roussev, C. Verbowski, A. Johnson, M.-W.
Wu, Y. Huang, and S.-Y. Kuo. Gatekeeper: Monitoring auto(cid:173)
start extensibility points (aseps) for spyware management". In
USENIX LISA 2004, 2004.
[33] 1. Xu, P. Ning, C. Kil, Y. Zhai, and C. Bookholt. Auto(cid:173)
matic diagnosis and response to memory corruption vulnera(cid:173)
bilities. In CCS '05: Proceedings of the 12th ACM conference
on Computer and communications security, pages 223-234,
New York, NY, USA, 2005. ACM Press.
[34] H. Yin, D. Song, E. Manuel, C. Kruegel, and E. Kirda.
Panorama: Capturing system-wide information flow for mal(cid:173)
In Proceedings of the 14th
ware detection and analysis.
ACM Conferences on Computer and Communication Security
(CCS'07), October 2007.
[35] Q. Zhang and D. S. Reeves. Metaaware: Identifying meta(cid:173)
morphic malware. In ACSAC, pages 411-420,2007.
1-4244-2398-9/08/$20.00 ©2008 IEEE
246
DSN 2008: Li et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:16:20 UTC from IEEE Xplore.  Restrictions apply.