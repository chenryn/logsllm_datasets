title:StateDroid: Stateful Detection of Stealthy Attacks in Android Apps
via Horn-Clause Verification
author:Mohsin Junaid and
Jiang Ming and
David Chenho Kung
StateDroid: Stateful Detection of Stealthy Attacks in Android
Apps via Horn-Clause Verification
Mohsin Junaid
Independent Researcher
PI:EMAIL
The University of Texas at Arlington
The University of Texas at Arlington
David Kung
PI:EMAIL
Jiang Ming
PI:EMAIL
ABSTRACT
Profit-driven cyber-criminals are motivated to prolong Android
malware’s lifetime by hiding malicious behaviors from raising sus-
picion. Stealthy malware has become an emerging challenge to
Android security as it can remain undetected for quite a long time.
However, traditional defense techniques are insufficient in face of
this new threat. Our in-depth study on published malware analysis
reports and corresponding code analysis leads to three key obser-
vations: 1) a stealthy attack goes through multiple states; 2) state
transitions are caused by a sequence of attack actions; 3) an attack
action typically involves several Android APIs on different objects.
These insights motivate us to design a two-layer finite state ma-
chine (FSM) model, named StateDroid, to depict multi-step stealthy
attacks in terms of state transitions. Our goal is to reason about
various stealthy attacks from an Android app in one pass. However,
the heterogeneous characteristics of attack actions make automatic
construction of accurate detection model a challenging work. To
overcome this obstacle, StateDroid abstracts the semantics of An-
droid APIs and attacks as Horn clauses, and then it automatically
constructs the two-layer FSM model via Horn-clause verification.
We have developed an open-source prototype of StateDroid and
evaluated it extensively with ground truth dataset, 1, 505 Google
Play apps, and 1, 369 malicious apps, respectively. The encoura-
ging experimental results demonstrate the efficacy of StateDroid.
Our study shows stealthy attacks have been quite common among
new-generation malware such as notorious ransomware, and we
even identify 7.5% of recent Google Play apps exhibit unexpected
stealthy behaviors.
CCS CONCEPTS
• Security and privacy → Mobile and wireless security; Software
security engineering;
KEYWORDS
Stateful Detection, Stealthy Attacks in Android Apps, Android
Malware Analysis, Horn-Clause Verification, Formal Reasoning,
Finite State Machine
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
© 2018 Association for Computing Machinery.
ACM ISBN 978-1-4503-6569-7/18/12...$15.00
https://doi.org/10.1145/3274694.3274707
ACM Reference Format:
Mohsin Junaid, Jiang Ming, and David Kung. 2018. StateDroid: Stateful
Detection of Stealthy Attacks in Android Apps via Horn-Clause Verification.
In 2018 Annual Computer Security Applications Conference (ACSAC ’18),
December 3–7, 2018, San Juan, PR, USA. ACM, New York, NY, USA, 12 pages.
https://doi.org/10.1145/3274694.3274707
1 INTRODUCTION
As one of the most popular mobile OS [43], Android attracts a large
number of malware [38] with various malicious intents ranging
from leakage of private information [21, 25, 59] to taking over com-
plete control of the device [22, 32]. Driven by the rich profit, these
malware attacks are becoming stealthier over time to maximize the
long-term payoffs [33, 50, 51]. It was reported that more than 50% of
existing Android malware exhibit stealthy behaviors to camouflage
telltale signs [29]. In addition to the original malicious behaviors,
a stealthy attack typically takes extra measures to hide itself from
being visible [44, 47]. For example, the first publicly known stealthy
malware, Android.HeHe [60], carefully takes a set of actions to
achieve stealth. As a result, it is able to intercept victims’ calls and
text messages without raising suspicion, and only one out of 47
anti-virus scanners labels it as malicious at that time [20]. Based
on our in-depth study on published malware analysis reports, rele-
vant Android documentation, and corresponding code analysis, we
observe that a typical stealthy attack reveals the following three
key features.
(1) A successful stealthy attack passes through a series of states
(e.g., ringer-silent state) before reaching its final attack state
(e.g., intercept incoming calls).
(2) The state transitions are accomplished by a sequence of
actions executed in a specific order (e.g., mute the ringer and
then block a phone call), and missing any action can thwart
the attack.
(3) An attack action involves invocation of many API calls on
several objects, and it may further depend upon the specific
order or input values of API calls.
The underneath detection models of the previous work are in-
sufficient to capture sophisticated stealthy attacks that involve
multiple states. For example, silently blocking incoming calls requi-
res several actions performed in a certain order to accomplish, and
traditional control-flow/data-flow models [6, 7, 30, 49] may miss
this attack. The above three observations motivate us to take advan-
tage of formal methods of specification and analysis. We propose a
two-layer Finite State Machine (FSM) model to automatically detect
stealthy behaviors. FSMs have been commonly used as an event-
driven formal method to represent and simulate the execution flow
in software design [9, 26, 55] and software testing [13, 16, 24]. Since
a stealthy attack is accomplished by executing a set of actions in
198
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Mohsin Junaid, Jiang Ming, and David Kung
a certain order, an FSM model can aptly describe the temporal or-
der among attack actions. Typically, an FSM is represented as a
graph, where the nodes are the states and the edges indicate the
state transitions. In our method, an attack is represented by the
top-level FSM, called Attack State Machine (ASM), in which a state
describes the status of an attack based on a number of executed
actions. A transition between two states represents the involved
action. StateDroid reports the detection of an attack when an ASM
reaches its final or attack state, that is, when the last action of the
attack action sequence is executed.
However, several challenges are raised when detecting attack
actions, because the implementation of each action is affected by
many factors, such as API calls on several objects, the order of
API call sequence, and specific input values. Moreover, objects can
also be passed down to multiple classes or methods, and tracing
object states is a non-trivial task as well. It demands updating
object states correctly based on the APIs invoked upon them. To
tackle these problems, we introduce another layer of FSM, Object
State Machine (OSM), to keep track of object states. An OSM is
maintained for each object and is updated based on invoked APIs
that we are interested in. The OSM will report the detection of an
action if an API call completes the action functionality. The common
limitation of model checking based security analysis is that it is hard
to construct an advanced detection model automatically [10, 12, 23,
34]. Another key technical contribution of this paper is to apply
formal reasoning to the construction of our two-layer FSM model.
In particular, we abstract Android API semantics, action effects, and
malicious intents as Horn clauses [52]. Then we can automatically
generate ASMs or OSMs via Horn-clause verification [8, 45].
We have developed the proposed FSM method, called StateDroid,
as a static analysis framework. Current implementation of State-
Droid generates 122 related API call events, leading to the detection
of 42 actions. Based on them, StateDroid is able to automatically
construct corresponding Attack State Machines to detect stealthy
attacks. We have evaluated StateDroid on ground truth (labeled)
samples, 1, 369 malicious apps, and 1, 505 Google Play apps, re-
spectively. The tested malicious apps, including now-infamous
ransomware (e.g., WannaLocker [53] and LockDroid [14]), come
from three different malware repositories. The experimental re-
sults show that StateDroid is able to effectively detect actions and
action-sequence based stealthy attacks. Interestingly, we also find
out stealthy behaviors from 117 recent Google Play apps, and some
of them have been removed from Google Play store when writing
this paper. In addition, the comparative evaluation shows that State-
Droid outperforms existing tools (i.e., FlowDroid [7], AsDroid [29],
and Dexteroid [30]) in terms of better accuracy. Our evaluation
demonstrates that StateDroid can be applied as a diagnostic tool to
dissecting Android malware’s stealthy behavior. The contributions
of this paper are as follows.
• We have proposed an attack-action-driven, two-layer FSM
model to effectively detect actions and action-sequence based
stealthy attacks. Our method depicts the key features of
complicated stealthy attacks and exhibits high accuracy.
• Modeling domain-specific security problems as temporal
logic formulas is the key to harnessing the full power of
formal reasoning. We have designed novel techniques to
automatically constructing our two-layer FSM model via
Horn-clause verification.
• We have implemented a prototype of StateDroid (11K lines
of code) and evaluated it with a sizeable scale dataset. State-
Droid’s source code and ground truth dataset are available
at (https://github.com/mohsinjuni/statedroid).
2 BACKGROUND AND MOTIVATION
In this section, we first provide background information for Android
app fundamentals and stealthy attacks. Next, we present a real-
world malware snippet as the motivating example. At last, we will
discuss the challenges to stealthy attack detection.
2.1 Background
Android Lifecycle and Callbacks: Android apps are developed
using four basic components: activity, service, content provider, and
broadcast receiver [3]. Each component has a lifecycle consisting
of phases that it goes through during its lifetime. For example, an
activity undergoes three phases when it becomes visible, partially
visible, and completely invisible to the user [4]. These phase chan-
ges occur due to events triggered upon the component. Android
allows developers to update application resources (e.g., initialize
or save data) during these phase changes. They can register cal-
lback methods or callbacks to listen to these changes. Based on
a triggered event, the system invokes these callbacks in a certain
order according to the component’s lifecycle. These callbacks are
called component lifecycle callbacks. For example, when an activity
becomes visible after being created, three callbacks (onCreate(),
onStart() and onResume()) are invoked in the given order. Other
types of callbacks include: (i) user-interface (UI) callbacks, which
are invoked by Android in response to user-interaction triggered
events, and (ii) miscellaneous callbacks, which are invoked due to in-
ternal or external events1. App developers implement the callbacks
to provide app-specific functionality, while attackers implement the
callbacks for malicious purposes. In particular, attacks are launched
through API calls from callback functions. Therefore, accurately
modeling all callbacks and related developer-defined methods are
crucial to detect attacks.
Android APIs: Android OS is implemented in Java and allows ap-
plications to access resources through API calls. Like Java programs,
API calls may change the receiver object’s state, which will further
affect the API call output. Thus, maintaining receiver object states
assists in the modeling and analysis of Android app behaviors. In
contrast, existing static analysis approaches that do not consider
receiver objects and their states may lead to false alarms or missed
attacks.
Stealthy Attacks: Stealthy attacks in Android apps are attacks
that execute additional actions to hide their malicious behaviors.
Malicious behaviors range in functionalities such as blocking, ans-
wering or making phone calls in the background, leaking sensitive
information (e.g., SMS and call logs), and recording audio or video
files. Hiding actions may involve modifying device settings such as
WiFi, mobile data (e.g., 4G LTE), ringer mode, audio stream volume,
1An internal event is triggered by the Android OS when a certain condition (e.g., low
memory) gets true; an external event is triggered upon the app from outside the OS
such as an incoming phone call.
199StateDroid
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Figure 1: StateDroid architecture.
and vibration. Stealthy attacks typically execute their malicious
intents and hiding actions in a specific order.
Action: An action performs an app-specific functionality. For ex-
ample, sending an SMS message is an action. An action could be
implemented by invoking a set of API calls on several receiver
objects in a given order.
Object State: The state of an object is defined by its internal data
or attribute values at some point in time.
2.2 Motivating Example
back to normal mode. Source code for these actions is highligh-
ted as red in Listing 1. The first and last actions, when executed
in the given order, hide the malicious behavior from the user. To
intercept incoming phone calls, this malware registers a broadcast
receiver IncomeCallAndSmsReceiver. Upon receiving a call, the
system invokes its onReceive() lifecycle callback and executes the
attack code. Lines 5–6 get access to audio manager service and set
device ringer to silent mode, and then phone call is blocked using
Java reflection on lines 10–14. At last, line 20 restores the ringer to
normal mode.
Listing 1: A stealthy attack in Android.HeHe malware.
1 public class IncomeCallAndSmsReceiver extends BroadcastReceiver {
2
3
4
...
if ((( String ) ( obj )). equalsIgnoreCase ( TelephonyManager .
public void onReceive ( Context contxt , Intent paramIntent ){
EXTRA_STATE_RINGING ) && TelephonyUtils . isBlockPhone (
getHelper ( context1 ) , s)){
AudioManager audMgr = (AudioManager)contxt.getSystemService("audio");
audMgr.setRingerMode(0);
LogUtils . debug (" IncomeCallAndSmsReceiver " , " Ringtone Silent ");
try {
LogUtils . info (" IncomeCallAndSmsReceiver " , ( new StringBuilder () )
. append (" end call call : "). append (s). toString () );
TelephonyManager telMgr = (TelephonyManager)
contxt.getSystemService("phone");
Method itMthd = TelephonyManager.class.getDeclaredMethod( "getITelephony",
(Class[])null);
itMthd.setAccessible(true);
ITelephony iTelephony = ((ITelephony)itMthd.invoke(telMgr,(Object[]) null));
iTelephony.endCall();
}
catch ( Context contxt )
{
LogUtils . error (" IncomeCallAndSmsReceiver " , " end call failure ." ,
5
6
7
8
9
10
11
12
13
14
15
16
17
18
contxt );
}
audMgr.setRingerMode(2);
}
...
19
20
21
22
23
24 }
}
We have performed a comprehensive study on published mal-
ware analysis reports such as Android Malware List [18], Android
developers documentation, and relevant code analysis. Our study
results in three common features of stealthy attacks as shown in
Section 1. We present here a real-world case of stealthy attack from
Android.HeHe malware [20, 60]. This attack automatically blocks
incoming phone calls and hides itself by silencing the device rin-
ger. Upon receiving an incoming phone call, the malware executes
three actions in a specific order: (i) set device ringer to silent mode;
(ii) block or disconnect incoming phone call; (iii) set device ringer
2.3 Challenges
As the motivating example illustrates, a stealthy attack is accom-
plished by a series of actions, and each action consists of one or
more API calls on different Android objects. For example, silencing
the ringer involves two API calls on two different objects (lines 5–6:
contxt and audMgr), and blocking an incoming call contains five
API calls on three Android objects (lines 10–14: contxt, itMthd,
and iTelephony). Note that these APIs do not need to be called
strictly one after another — they may be invoked from different
conditional/iterative blocks of different attacker-defined (callback)
functions. Besides, the states of the Android objects affect the API
calls as well. For example, the API calls on lines 6 and 20 depend
on the state of the audMgr object, defined on line 5.
An Android app contains numerous API calls but only a few
of them are involved in an attack. Thus, how to detect the API
calls and the invocation order that launch the attack is challenging
as well. Furthermore, the semantic gap problem of low-level APIs
presents another barrier; that is, individual APIs do not necessarily
represent application-specific functionalities such as silencing the