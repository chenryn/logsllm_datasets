this task, one simply needs to be able to automatically elicit TCP SYN segments
from a variety of hosts, keep track of the values set in the SYN segment, and
then use an active OS ﬁngerprinting tool, such as nmap, to identify the operating
system. We do this with a tool that scans the Internet at large for hosts running
FTP servers that accept anonymous connections2. Luckily, there are many of
these. The tool connects to the FTP server, attempts to negotiate and verify
active transfer mode (since most FTP servers default to passive), and invokes
the LIST command to obtain a directory ﬁle listing. This results in a TCP SYN
segment sent from the FTP server to the listening port sent by the FTP client,
as shown in Figure 2.
The tool uses libpcap[23] to catch all initial SYN segments with a TCP
destination port equal to the port number sent in the FTP LIST command,
and gathers the ﬁelds and values present in the SYN segment. It then detects its
fragment reassembly policy and overlapping TCP segment policy using the same
methods described in [1]. This is done by sending specially crafted IP fragments
and TCP segments across the same TCP connection and observing how the host
responds. The tool then attempts to identify the host OS type by forking oﬀ
an nmap process. If nmap fails to identify the host operating system, we will still
know how that stack resolves network protocol ambiguities. Having knowledge of
the host operating system is really only useful as eye candy to an administrator.
2 It is also possible to exploit the gnutella protocol by creating a lightweight client to
connect to the network and both accept connections and send PUSH descriptors to
elicit TCP SYN segments. This would nicely complement the set of SYNs from FTP
servers, which are primarily high-end OS’s.
198
G. Taleck
Minimal FTP Client
FTP Server
TCP Connect
USER anonymous
PASS PI:EMAIL
PORT ip,ip,ip,ip,port,port
LIST
Look for TCP SYN Segment with 
destination port PORT
QUIT
FTP Banner sent
Anonymous access ok
Login successful
PORT command successful
LIST data sent to port PORT
Connection closed
Fig. 2. Sample network dialogue between a minimal FTP client and an FTP server to
elicit a TCP SYN segment from the server.
By polling many hosts, we can also weed out bogus entries where adminis-
trators have set up the host to fool nmap by using methods described in Section
3.3. Since this tool really requires no human interaction, it can continuously poll
new IP’s and re-poll old ones.
4.2 Eliciting TCP SYNACKs
The process of eliciting TCP SYNACK segments from a host is much simpler.
This only requires that the host have at least one unﬁltered port open. Existing
active OS ﬁngerprinting tools, such as nmap and queso, utilize a number of TCP
tests against open ports to evaluate the network stack behavior. We also utilize
these tests, and additionally, make more extensive use of TCP options.
The most prevalent TCP options used in common, modern operating sys-
tems are the Maximum Segment Size (mss), Selective Acknowledgment (sackok),
Timestamping (timestamp), and the Window Scaling (wscale) options. nmap
ﬁrst exploited the use of these options as the default set to actively examine
stack implementations in nmap. Fyodor mentions that TCP options are “truly a
gold mine in terms of leaking information”[7]. However, nmap fails to fully mine
the information available via these options.
TCP Options Tests. Using these four most common TCP options, 16 new
nmap-like tests are created. Once a host is found with at least one open port, 16
Ambiguity Resolution via Passive OS Fingerprinting
199
Table 1. Enumeration of the possible combinations of TCP options, padded appropri-
ately with nop options .
# Possible combinations of TCP options
1 mss 1460
2 timestamp nop nop
3 sackok nop nop
4 wscale 0 nop
5 wscale 0 nop sackok nop nop
6 wscale 0 nop mss 1460
7 wscale 0 nop timestamp nop nop
8 sackok nop nop mss 1460
9 sackok nop nop timestamp nop nop
10 mss 1460 timestamp nop nop
11 timestamp nop nop sackok nop nop wscale 0 nop
12 mss 1460 sackok nop nop wscale 0 nop
13 mss 1460 timestamp nop nop wscale 0 nop
14 mss 1460 timestamp nop nop sackok nop nop
15 mss 1460 timestamp nop nop sackok nop nop wscale 0 nop
TCP SYN segments are sent with the 24 diﬀerent possible combinations of TCP
options, as shown in Table 1
We can encode options ordering to simplify a later lookup to an int com-
parison. A bit-ﬁeld can be used to identify the options present in the client’s
SYN segment. Since we use the most prevalent options, (timestamp, mss, ws-
cale, sackok), we only need bits bits, and can encode them as shown in Table
2.
These tests allow us to build 16 sub-tables for SYNACK lookups. When
a lookup is requested for a SYNACK, we take the encoded value of the TCP
options present in the SYN segment, as shown in Table 2, for which the SYNACK
corresponds, and hash into one of the 16 sub-tables to match the SYNACK TCP
and IP values.
The TCP Timestamp. Another ambiguous bit of behavior was discovered
during testing. This has to do with network stack implementations of the TCP
Timestamp option.
RFC 1323 speciﬁes the requirement for using TCP timestamps as a method to
calculate “reliable round-trip time estimates”[18] between two connected hosts.
Speciﬁcally, section 3.2 states:
“The Timestamp Echo Reply ﬁeld (TSecr) is only valid if the ACK bit is set
in the TCP header; if it is valid, it echos a timestamp value that was sent by
the remote TCP in the TSval ﬁeld of a Timestamps option. When TSecr is not
valid, its value must be zero.”
However, some operating systems do not set the TSecr ﬁeld to the TSval
given in the sent TCP SYN segment of a SYNACK reply, where the sent SYN
200
G. Taleck
Table 2. Encoding of TCP options present in TCP SYN segments: bit 3: timestamp,
2: wscale, 1: sackok, 0: mss.
TCP options
Bits Value
0000
no options
0001
mss
0010
sackok
0011
sackok mss
0100
wscale
0101
wscale mss
0110
wscale sackok
0111
wscale sackok mss
1000
timestamp
1001
timestamp mss
1010
timestamp sackok
1011
timestamp sackok mss
1100
timestamp wscale
1101
timestamp wscale mss
timestamp wscale sackok
1110
timestamp wscale sackok mss 1111
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
segment contained a non-zero TSval ﬁeld. This is not necessarily a violation of
the speciﬁcation, but it does provide useful information that can be used to
diﬀerentiate operating systems when monitored passively.
Window Sizes. Additionally, some stacks will adjust their initial window size
depending on whether the timestamp or other options were requested by the
client. Table 3 illustrates some diﬀerences and similarities between operating
systems and the initial window size.
Table 3. Initial Window Sizes (WS) of various operating systems with and without
the TCP timestamp (TS) option requested.
Operating System
WS without TS WS with TS
Linux 2.4.0
Microsoft Windows NT4.0
MacOS 10.1
OpenBSD 3.3
FreeBSD 2.2
FreeBSD 4.6
5840
64240
32768
64240
16384
57344
5792
65160
33000
65160
17520
57344
Ambiguity Resolution via Passive OS Fingerprinting
201
5 Implementation
The current version of the NFR IDS sensor implements both IP fragment and
TCP overlapping segment ambiguity resolution. Concerning IP fragmentation,
ﬁve common variations exist [1]:
– BSD: left-trim incoming fragments to existing fragments with a lower or
equal oﬀset; discard if they overlap completely
– BSD-Right: Same as BSD, except right-trim existing fragments when a new
fragment overlaps
– Linux: Same as BSD, except only fragments with a lower oﬀset are trimmed
– First: always accept the ﬁrst value received
– Last: always accept the last value received.
The IP fragment reassembly engine implements all ﬁve of the observed poli-
cies described in [1]. The TCP Re-sequencing engine emulates the BSD and Last
policies also described in [1]. The rest of this section describes how the sensor
utilizes the ﬁngerprint tables at runtime.
5.1 Performing a Lookup Operation
During runtime, TCP SYN and SYNACK values for TCP traﬃc seen by the
IDS are kept in a cache. The cache is keyed by IP address, so if an entry already
exists its values are overwritten.
Once it is deemed necessary to perform a lookup of a particular IP address
to determine its operating system type (this event is triggered by an ambiguity
on the wire), we ﬁrst need to see if any cached SYN or SYNACK information
is available in the cache. If SYN information is available, we can perform a
lookup of the SYN values in the SYN table containing the mappings. If SYNACK
information is available for that particular IP (corresponding to a server process),
then we take the encoded value of the TCP options present in the SYN segment,
as shown in Table 2, corresponding to the SYNACK, and hash into one of 16