### Maximal Sustained Throughput and TCP Reassembly Performance

On the left, we present the maximal sustained throughput of the Forwarding Engines (FEs) as derived from the given data. At 600 MHz, all FEs can process common-case traffic at a Gigabit rate, except for Ruler. A single Ruler instance can only handle 170 Mbit. Consequently, five combined Ruler engines can achieve a maximum of 850 Mbit, which is depicted in the figure as "5x Ruler." By merging Reception and Transmission, we can obtain the additional engine needed to achieve full Gigabit processing.

#### PDU Byte Description
- **Reception**: 313 cycles
- **TCP reassembly**: 1178 cycles
- **Ruler**: 628 cycles
- **Transmission**: 740 cycles

A single-threaded cycle count provides a lower bound on the per-segment overhead, as it excludes memory contention costs. However, for TCP, this represents the worst-case scenario for overall throughput because a single thread spends much of its time waiting for memory. Multi-threading, which enables latency hiding, significantly improves throughput.

### Indirect Stream Reassembly vs. Copy-Based Reassembly

The performance of indirect stream reassembly compared to copy-based reassembly is an important consideration. We conducted a head-to-head comparison using a host-based Streamline function, as no copy-based method is available on the micro-engines. The two functions share most of their code, differing only in their data bookkeeping methods. As shown in Figure 4 (right), indirect reassembly outperforms copy-based reassembly, with the computational overhead being noticeable only for the smallest packets.

### Ruler Overhead

The third row in Table 5.1 shows the overhead in cycles for Ruler. As expected, the costs scale linearly with the amount of data, with the cost per Protocol Data Unit (PDU) being negligible. The function is computation-bound: fetching 64 bytes from memory takes approximately 120 cycles, while processing these bytes costs an order of magnitude more. For this reason, multi-threading is not enabled for Ruler.

### Prospector Benchmark

We benchmarked Prospector on the XScale, as it has not yet been ported to the micro-engines. Figure 5 (left) compares the throughput of Prospector to that of a payload-scanning function (Aho-Corasick). Two versions of Prospector are presented: the basic algorithm, which needs to access all header data, and an optimized version (Pro+) that skips unimportant data. The optimized version relies on HTTP requests being TCP segment-aligned, which, although not specified, is expected to be the case in practice.

Each method processes four requests:
1. A benign HTTP GET request that is easily classified.
2. A malicious GET request that requires complete scanning.
3. Two POST requests of different lengths.

In the case of the malicious GET, all bytes must be processed. Since Aho-Corasick is faster here than both versions of Prospector, we can see that under equal memory strain, Prospector incurs additional computational overhead. However, in the other three cases, where not all bytes need to be touched, protocol deconstruction is more efficient than scanning. This efficiency gap increases with the size of the payload, as seen in the longest POST request. Additionally, skipping remaining headers after classification can significantly improve worst-case performance, as demonstrated by the benign GET request.

Even without message bodies, Prospector's performance consistently exceeds 18,000 requests per second, making it suitable for inline protection of many common services.

### Macro Benchmark

Our final experiment evaluates the pipeline in hardware. We connected our board to a mirrored communication between three computers, allowing us to test peak throughput without interfering with the active TCP control flow. The traffic was generated using `ab`, a benchmarking tool for Apache. The maximum achievable rate was 940 Mbits, as shown in Figure 5 (right).

With six micro-engines, we can process all traffic, but we had to temporarily remove the transmission unit to free up the sixth micro-engine. The presented numbers are worst-case estimates based on crude dropped traffic statistics, and actual performance could be up to 20% higher.

### Discussion

#### Limitations

The presented solution is a combination of various components. While powerful as a whole, there are areas for improvement. For example, Ruler can accept most Snort rules through our `snort2ruler` compiler, but some expressions remain unsupported. In Prospector, we do not currently block format string attacks, although this is possible in principle and is under development. Additionally, the flow-based Intrusion Detection System (IDS) (stage 5) is currently simplistic and needs enhancement. Finally, while we have implemented a robust set of network-based intrusion prevention methods, there are still more options to explore.