### 三、结构化异常处理（SEH）示例

```c
__try {
    // 受保护的代码
    value = *ptr;
}
__except (EXCEPTION_EXECUTE_HANDLER) {
    value = -1;
}
```

**清单3：Windows上的结构化异常处理（SEH）示例及其对应的过滤器**

在上述代码中，如果指针 `ptr` 指向的位置不可读，则将 `value` 设置为 `-1`；如果该位置可读，则将其内容赋值给 `value`。通过将过滤表达式设置为 `EXCEPTION_EXECUTE_HANDLER`，可以确保所有类型的异常都由异常处理器处理。

任何异常都会触发相应的过滤表达式的评估，以确定适当的处理方式。过滤器可以：
- 简单地恢复程序执行（即完全忽略异常）；
- 将控制流转移到异常处理器；
- 将异常传递给下一个处理器。

过滤器在二进制级别上实现为单独的函数，并在 SEH 结构中引用。如果异常未被处理且操作系统认为其是致命的，将导致程序终止。这同样适用于由扫描尝试生成的访问违规。如果攻击者能够控制受保护代码块中的解引用操作，并且相应的过滤器允许处理或忽略访问违规，那么她就能够扫描任意内存。

为了自动定位潜在的内存预言机，我们首先需要收集所有可用的异常处理器及其受保护的代码区域。这是通过静态分析目标二进制文件来完成的。然后，我们丢弃那些无法处理访问违规的异常处理器。为此，我们对过滤器函数进行符号执行。最终得到的一组潜在代码位置将使用前面描述的工具进行分析：我们现在针对的是受保护的代码位置，而不是系统 API。

### C. 吞没的异常

进一步研究后，我们还添加了第三类可能的内存预言机，这是之前未涵盖的。有些情况下，异常会被静默忽略。这里我们不考虑程序的异常处理器简单地忽略故障并继续执行的情况，也不考虑系统 API 检测到错误但用户程序未检查错误状态的情况。尽管结果相同，都是抑制内存故障，但这些方法会将错误状态传递给用户程序，只是用户程序没有对其采取行动。而吞没的异常则不会向用户程序提供任何反馈，表明发生了异常。例如，在用户-内核-用户回调 [10] 中，异常处理机制不能支持上下文切换，导致调用程序无法检测到异常的发生。我们在分析中不考虑这类抗崩溃原语。

### 四、实现

以下简要概述我们的框架实现，并说明设计选择的原因。详细的实现细节请参见相关技术报告 [27]。

#### A. Linux 上的系统调用

此异常处理器可用于探测内存地址，前提是攻击者控制了 `ptr` 的值。在这种情况下，无论发生何种异常（包括访问违规），`value` 都会被设置为 `-1`。

在 Linux 上，我们使用动态污点跟踪来隔离可行的候选对象。我们针对常见的服务器应用程序运行测试用例，以确保足够的代码覆盖率。由于我们重用了测试用例，并希望对其他应用程序进行少量修改即可支持，因此选择了最小侵入性的方法。服务器程序通过 libdft [25] 进行插桩——一个数据流跟踪库，我们扩展了字节粒度的污点跟踪——客户端程序由我们的监控应用程序控制。监控程序可以发送自定义命令来控制污点状态和使指针参数无效。测试运行结束后，我们将获得一份潜在的抗崩溃原语列表，其中包含哪些参数在测试运行期间有效或无效的详细信息。然后手动验证此列表以消除误报。

#### B. Windows API 函数

由于 Windows API 对错误状态的定义不如 Linux 系统调用接口统一，我们需要自行隔离适当的目标函数。为此，我们使用模糊测试方法来收集一组能够优雅处理无效指针参数的函数。然后，我们使用动态插桩框架 DynamoRIO [19] 来查找这些函数在目标应用程序中的使用情况。最后，我们使用启发式方法减少调用站点列表，只保留有潜力的候选对象。在分析阶段结束时，需要手动验证结果以排除误报，主要是指针参数是短暂存在的栈变量或易失性堆位置的情况，因此攻击者无法控制它们。

#### C. 异常处理器

除了系统级候选对象外，我们还针对特定于应用程序的内存预言机形式的异常处理器。为此，我们利用了一个事实：在 64 位 Windows 下，应用程序中的每个函数都需要在异常调用堆栈中提供堆栈展开信息。因此，我们可以解析相应的 `.pdata` 段并检索可执行模块中的所有异常处理器列表。然后，我们使用符号执行和 SMT 求解器 Z3 [32] 来筛选出允许处理所有异常或至少处理访问违规的异常过滤器。经过这个分析步骤后，我们重用为 API 函数跟踪开发的分析方法，并针对异常处理器覆盖的代码进行分析。最后，我们再次手动验证结果。

### 五、评估结果

基于我们的原型实现，我们现在讨论在 Linux 和 Windows 二进制可执行文件上的分析结果。

#### A. Linux 上的系统调用

我们使用广泛使用的服务器应用程序在 Linux 上评估了我们的框架。特别是，我们使用标准测试套件运行了以下服务器程序：Nginx 1.9、Cherokee 1.2、Lighttpd 1.4 和 Memcached 1.4。我们专注于这些流行的服务器程序，因为它们都能处理多个连接。攻击者可以简单地使用一个连接来探测内存地址（使用发现的抗崩溃原语），并使用另一个连接来行使任意读/写原语并修改探测连接的状态。

为了完整性，我们还考虑了每新连接都在独立工作进程中处理的服务器程序，重点关注 PostgreSQL 9.0。在这种情况下，攻击者只能使用单个连接来探测和修改程序状态。虽然利用起来通常更复杂（可能更难恢复所需的连接状态以探测新的内存地址），但我们仍然在实践中找到了可用的原语。需要注意的是，我们的目标仅仅是让工作进程不崩溃，优雅的进程终止对我们来说就足够了。由于工作进程在服务完请求后预期会终止，这并不构成任何异常行为。

表 I 显示了框架报告的所有候选对象。如图所示，许多候选对象在我们自动更改目标内存位置时会导致段错误。我们已经通过手动检查确认了框架正确标记了所有这些情况。尽管有许多无效的候选对象，但我们的框架在所有服务器程序中发现了可用的抗崩溃原语（通过手动验证确认的两个潜在候选对象）。

总共四个候选对象被框架指示为有效候选对象。我们确认了框架正确标记了所有这些情况，除了 Memcached 上的有效候选对象实际上是一个误报（用红色非圆圈加号表示）。手动检查显示，连接处理线程在候选系统调用 `epoll_wait` 返回错误代码后退出，而服务器继续运行——这目前被我们的框架解释为正确的行为。然而，后续连接永远不会被已终止的连接处理线程处理，因此该原语实际上对于多次探测尝试是不可用的。这个误报可以通过检查连接处理线程的状态来简单消除，但我们的当前原型还不支持这种通用策略。从我们的分析中，我们在 Nginx 的 `recv`、Cherokee 和 PostgreSQL 的 `epoll_wait` 以及 Lighttpd 和 Memcached 的 `read` 中找到了可用的候选对象。我们将在第六部分中举例说明如何将这些候选对象用作抗崩溃原语。

#### B. Windows API 函数

我们首先需要在 Windows 上收集抗崩溃的 API 函数。我们从 MSDN 库中提取了 20,672 个 API 函数，其中 11,521 个（55.7%）至少包含一个指针参数。因此，只有这些函数作为输入用于我们的自定义 API 模糊测试。结果，我们在 Windows 7 和 10 上找到了 400 个抗崩溃原语候选函数。

接下来，我们试图在执行路径上定位这些函数，以 Internet Explorer 11（64 位）在 Windows 10 上为例。为此，我们在访问 Alexa.com [1] 上排名前 500 的网站时记录了所有目标 API 函数的调用。此外，我们运行了浏览器和 JavaScript 基准测试 [2]，[44] 以增加代码覆盖率。只有 25 个抗崩溃 API 函数出现在执行路径上。最后，我们使用分析脚本来确定这些函数是否从 JavaScript 上下文中触发。我们找到了 12 个具有此特征的函数。

要成为一个可用的抗崩溃原语，我们必须从 JavaScript 触发它们并控制它们的参数；此外，我们还必须能够拦截返回值。为了分析这两个属性，我们创建了指令跟踪并分析了生成的执行路径。不幸的是，所有候选对象在手动分析后都被排除了，因为所有指针参数对于我们来说都是不可用的。原因有三个。首先，大多数函数是查询函数（例如，`GetPwrCapabilities`），通常通过提供栈分配的结构来调用。如果这样的指针无效，则栈指针会被破坏，导致非法内存访问并导致程序终止。其次，剩余候选对象中的大多数指针参数在目标函数外部被解引用，这也导致非法内存访问。第三，我们无法控制某些候选对象的指针参数，因为这些指针是易失性堆指针，内存中没有存储之前的引用。

这一 Windows API 函数的负面结果并不意味着使用我们的方法无法构造抗崩溃原语。测试用例的覆盖率会影响代码路径分析后被排除的函数数量：只有 25 个候选 API 函数在执行路径上被观察到。进一步提高代码覆盖率的工作可能会带来更多的候选对象，从而产生抗崩溃原语。

表 II：Internet Explorer 11 运行期间由 C 特定处理器保护的独特代码位置的数量。出现在执行路径上的代码位置来自符号执行（SB）后的集合。

| DLL       | 受保护的程序代码数量 |
|-----------|---------------------|
| user32    |                     |

希望这些优化后的文本能更好地传达您的意图。如果有任何进一步的需求，请随时告诉我！