# Ectouch2.0 分析解读代码审计流程
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x1 目录结构
显示目录结构:`tree -L 2 -C -d`
    ├── _docs
    ├── admin //默认后台目录
    │   ├── help
    │   ├── images
    │   ├── includes
    │   ├── js
    │   ├── styles
    │   └── templates
    ├── api
    │   └── notify
    ├── data //静态资源和系统缓存、配置目录
    │   ├── assets //静态资源目录    
    │   ├── attached //附件目录
    │   ├── backup //备份目录
    │   ├── caches //缓存目录
    │   ├── captcha //验证码图片
    │   ├── certificate //验证
    │   ├── codetable
    │   ├── ipdata
    │   ├── migrates
    │   ├── print
    │   ├── session
    │   ├── sqldata
    │   └── template
    ├── include //核心目录
    │   ├── apps //主程序(模块目录)
    │   ├── base //基础程序
    │   ├── classes //类文件
    │   ├── config //配置文件
    │   ├── helpers //助手函数
    │   ├── languages //语言包
    │   ├── libraries //主类库
    │   ├── modules //模块
    │   └── vendor //第三方扩展类
    ├── install //安装模块
    │   ├── sqldata
    │   └── templates
    ├── plugins //插件程序目录
    │   ├── connect
    │   ├── editor
    │   ├── integrates
    │   ├── payment
    │   ├── shipping
    │   └── wechat
    └── themes //系统默认模版目录
        └── ecmoban_zsxn
参考链接:
[ectouch第二讲之 文件结构](https://www.bbsmax.com/A/pRdB84OPJn/)
这样就可以确定重点是:`include` 文件夹
## 0x2 路由分析
入口文件`index.php`->引导文件`bootstrap.php`->`urlRoute()`路由解析->`dispatc()`路由调度
为了方便理解,我在这里分析下路由(这里有两种模式)
因为一般模式mvc都会用
`/index.php?m=admin&c=index&a=index`
所以在这里分析 **兼容模式下** 路由规则:
26-24 lines
            $varPath        =   C('VAR_PATHINFO');//c函数是获取配置参数的值
            $varModule      =   C('VAR_MODULE');
            $varController  =   C('VAR_CONTROLLER');
            $varAction      =   C('VAR_ACTION');
            $urlCase        =   C('URL_CASE_INSENSITIVE');
            if(isset($_GET[$varPath])) { // 判断URL里面是否有兼容模式参数
                $_SERVER['PATH_INFO'] = $_GET[$varPath]; //获取r=xx的内容给$_SERVER['PATH_INFO']
                unset($_GET[$varPath]); //释放变量
            }
41-59 lines
            $depr = C('URL_PATHINFO_DEPR'); //兼容模式分隔符 r
            define('MODULE_PATHINFO_DEPR',  $depr);    
            if(empty($_SERVER['PATH_INFO'])) {
                $_SERVER['PATH_INFO'] = '';
                define('__INFO__','');
                define('__EXT__','');
            }else{
                define('__INFO__',trim($_SERVER['PATH_INFO'],'/')); //去除多余的/
                // URL后缀
                define('__EXT__', strtolower(pathinfo($_SERVER['PATH_INFO'],PATHINFO_EXTENSION))); //获取文件后缀之后的内容
                $_SERVER['PATH_INFO'] = __INFO__; 
                if (__INFO__ && !defined('BIND_MODULE') && C('MULTI_MODULE')){ // 获取模块名
                    $paths      =   explode($depr,__INFO__,2);//切割__INFO__
                    $module     =   preg_replace('/.' . __EXT__ . '$/i', '',$paths[0]);//处理后缀
                    $_GET[$varModule]       =   $module;
                    $_SERVER['PATH_INFO']   =   isset($paths[1])?$paths[1]:'';
                }                   
            }
62-67 lines
             define('_PHP_FILE_', rtrim($_SERVER['SCRIPT_NAME'],'/'));//当前脚本文件目录 
            define('__SELF__',strip_tags($_SERVER[C('URL_REQUEST_URI')]));//URI(path+fragment)
            // 获取模块名称
            define('APP_NAME', defined('BIND_MODULE')? strtolower(BIND_MODULE) : self::getModule($varModule)); //getModule函数得到模块名 APP_NAME定义
            C('_APP_NAME', APP_NAME);
为了方便理解我继续跟进`getModule`函数
         */
        static private function getModule($var) { 
            $module = (!empty($_GET[$var])?$_GET[$var]:DEFAULT_APP); //前面处理的结果
            unset($_GET[$var]);//释放变量
            if($maps = C('URL_MODULE_MAP')) { //模块映射规则 默认跳过
                if(isset($maps[strtolower($module)])) {
                    // 记录当前别名
                    define('MODULE_ALIAS',strtolower($module));
                    // 获取实际的模块名
                    return ucfirst($maps[MODULE_ALIAS]);
                }elseif(array_search(strtolower($module),$maps)){
                    // 禁止访问原始模块
                    return   '';
                }
            }
            return strip_tags(strtolower($module)); //返回模块名
        }
70-86 lines
            if( APP_NAME && is_dir(APP_PATH.APP_NAME)){
                // 定义当前模块路径
                define('MODULE_PATH', APP_PATH.APP_NAME.'/');
                // 加载模块配置文件
                if(is_file(MODULE_PATH.'config/config.php'))
                    C(load_config(MODULE_PATH.'config/config.php'));
                // 加载模块函数文件
                if(is_file(MODULE_PATH.'helpers/function.php'))
                    include MODULE_PATH.'helpers/function.php';
                // 加载模块的扩展配置文件
                load_ext_file(MODULE_PATH);
            }else{
                E('模块不存在:'.APP_NAME);
            }
    这个作者的注释很明白 就是MODULE_PATH ->模块目录 + APP_NAME  ->模块名
107-150 lines
    if('' != $_SERVER['PATH_INFO'] && (!C('URL_ROUTER_ON') ||  !Route::check()) ){   // 检测路由规则 如果没有则按默认规则调度URL
                // 去除URL后缀
                $_SERVER['PATH_INFO'] = preg_replace(C('URL_HTML_SUFFIX')? '/.('.trim(C('URL_HTML_SUFFIX'),'.').')$/i' : '/.'.__EXT__.'$/i', '', $_SERVER['PATH_INFO']);
                $depr   =   C('URL_PATHINFO_DEPR'); //'-'
                $paths  =   explode($depr,trim($_SERVER['PATH_INFO'],$depr)); 
                if(!defined('BIND_CONTROLLER')) {// 获取控制器
                    if(C('CONTROLLER_LEVEL')>1){// 控制器层次 
                        $_GET[$varController]   =   implode('/',array_slice($paths,0,C('CONTROLLER_LEVEL')));
                        $paths  =   array_slice($paths, C('CONTROLLER_LEVEL'));
                    }else{
                        $_GET[$varController]   =   array_shift($paths); //取第一个作为控制器
                    }
                }
                // 获取操作
                if(!defined('BIND_ACTION')){
                    $_GET[$varAction]  =   array_shift($paths); //数组第二个为操作
                }
                // 解析剩余的URL参数
                $var = array(); //空
                if(C('URL_PARAMS_BIND') && 1 == C('URL_PARAMS_BIND_TYPE')){
                    $var = $paths; // URL参数按顺序绑定变量
                }else{
                    preg_replace_callback('/(w+)/([^/]+)/', function ($match) use (&$var) {
                        $var[$match[1]] = strip_tags($match[2]);
                    }, implode('/', $paths));
                }
                $_GET = array_merge($var,$_GET);  //合并变量
            }
            // 获取控制器和操作名
            define('CONTROLLER_NAME',   defined('BIND_CONTROLLER')? BIND_CONTROLLER : self::getController($varController,$urlCase)); 
            define('ACTION_NAME',       defined('BIND_ACTION')? BIND_ACTION : self::getAction($varAction,$urlCase));
            // 当前控制器的UR地址
            $controllerName    =   defined('CONTROLLER_ALIAS')? CONTROLLER_ALIAS : CONTROLLER_NAME;
            define('__CONTROLLER__',__MODULE__.$depr.(defined('BIND_CONTROLLER')? '': ( $urlCase ? parse_name($controllerName) : $controllerName )) );
            // 当前操作的URL地址
            define('__ACTION__',__CONTROLLER__.$depr.(defined('ACTION_ALIAS')?ACTION_ALIAS:ACTION_NAME));
            //保证$_REQUEST正常取值
            $_REQUEST = array_merge($_POST,$_GET);
简单跟进`getController` `getAction`
和前面一样重点是
`$controller = (!empty($_GET[$var])? $_GET[$var]:DEFAULT_CONTROLLER);`
和
`$action = !empty($_POST[$var]) ? $_POST[$var] :
(!empty($_GET[$var])?$_GET[$var]:DEFAULT_ACTION);`
没有映射规则就直接返回上面处理好的变量值了。
所以说这个`Dispatcher.php`文件主要作用是获取然后定义了三个变量:
`APP_NAME` 模块名
`CONTROLLER_NAME` 控制器名
`ACTION_NAME` 动作名
然后回到调用路由的页面`boostrap.php`引导页面
向下读就知道是怎么利用变量上面进行路由调用。
    urlRoute(); //这里是上面调用的路由调度
    try {
        /* 常规URL */
        defined('__HOST__') or define('__HOST__', get_domain());
        defined('__ROOT__') or define('__ROOT__', rtrim(dirname($_SERVER["SCRIPT_NAME"]), '\/')); 
        defined('__URL__') or define('__URL__', __HOST__ . __ROOT__);//地址栏url
        defined('__ADDONS__') or define('__ADDONS__', __ROOT__ . '/plugins');
        defined('__PUBLIC__') or define('__PUBLIC__', __ROOT__ . '/data/assets');
        defined('__ASSETS__') or define('__ASSETS__', __ROOT__ . '/data/assets/' . APP_NAME);
        /* 安装检测 */
        if (! file_exists(ROOT_PATH . 'data/install.lock')) {
            header("Location: ./install/");
            exit();
        }
        /* 控制器和方法 */
        $controller = CONTROLLER_NAME . 'Controller'; //这里传入的控制器名字拼接了'Controller'
        $action = ACTION_NAME; //操作名字就是前面的操作名字
        /* 控制器类是否存在 */
        if (! class_exists($controller)) { 
            E(APP_NAME . '/' . $controller . '.class.php 控制器类不存在', 404);
        }
        $controller = class_exists('MY_'. $controller) ? 'MY_'. $controller : $controller;
        $obj = new $controller();
        /* 是否非法操作 */
        if (! preg_match('/^[A-Za-z](w)*$/', $action)) { //这里正则匹配过滤一下只能是字母
            E(APP_NAME . '/' . $controller . '.class.php的' . $action . '() 方法不合法', 404);
        }
        /* 控制器类中的方法是否存在 */
        if (! method_exists($obj, $action)) {
            E(APP_NAME . '/' . $controller . '.class.php的' . $action . '() 方法不存在', 404);
        }
        /* 执行当前操作 */
        $method = new ReflectionMethod($obj, $action);
        if ($method->isPublic() && ! $method->isStatic()) {
            $obj->$action();
        } else {
            /* 操作方法不是Public 抛出异常 */
            E(APP_NAME . '/' . $controller . '.class.php的' . $action . '() 方法没有访问权限', 404);
        }
    } catch (Exception $e) {
        E($e->getMessage(), $e->getCode());
    }
正常调用简化下流程:`$obj = new $controller();`-> `$obj->$action()` 这样就成功调用
**0x0用例子总结一下调用规则:**
`http://127.0.0.1:8888/ecshop/upload/mobile/?r=admin-index-index`
调用的是:
`ecshop/upload/mobile/include/apps/admin/controllers/indexController` 下的
index方法
但是`class IndexController extends AdminController`
又是`AdminController`的子类,然后一层层继承,然后上层构造函数就会判断访问权限决定代码是否能执行到这里。
## 0x3 了解系统参数与底层过滤情况
####  0x3.1 原生GET,POST,REQUEST
> 测试方法:
>
> ​ 找个外部方法
>
> 
>
> 然后随便传递值进去看看情况怎么样,如果有过滤就重新跟一次
>
> 
>
> 可以看到过滤了`` `'` ,还做了实体化处理
粗读了入口文件,没发现有获取参数并且过滤地方,这个时候就可以跑去读基类`构造函数`寻找定义了
`include/apps/common/BaseController.class.php`
        public function __construct() {
            parent::__construct();
            $this->appConfig = C('APP');
            if ($this->_readHtmlCache()) {
                $this->appConfig['HTML_CACHE_ON'] = false;
                exit;
            }
            $this->_initialize(); //跟进这里
            $this->_common();
            Migrate::init();
        }
        private function _initialize() {
            //初始化设置
            ............
            //对用户传入的变量进行转义操作
            if (!get_magic_quotes_gpc()) {
                if (!empty($_GET)) {
                    $_GET = addslashes_deep($_GET);
                }
                if (!empty($_POST)) {
                    $_POST = addslashes_deep($_POST);
                }
                $_COOKIE = addslashes_deep($_COOKIE);
                $_REQUEST = addslashes_deep($_REQUEST);
         ..................
        }
//跟进`addslashes_deep`
    function addslashes_deep($value) {
        if (empty($value)) {
            return $value;
        } else {
            return is_array($value) ? array_map('addslashes_deep', $value) ://递归过滤数组值  addslashes($value);