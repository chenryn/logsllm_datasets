title:Zone Poisoning: The How and Where of Non-Secure DNS Dynamic Updates
author:Maciej Korczynski and
Michal Kr&apos;ol and
Michel van Eeten
Zone Poisoning: The How and Where of Non-Secure
DNS Dynamic Updates
Maciej Korczy´nski
Delft University of
Technology
The Netherlands
PI:EMAIL
Michał Król
Université de Technologie
de Compiègne
France
PI:EMAIL
Michel van Eeten
Delft University of
Technology
The Netherlands
PI:EMAIL
ABSTRACT
This paper illuminates the problem of non-secure DNS
dynamic updates, which allow a miscreant to manipu-
late DNS entries in the zone ﬁles of authoritative name
servers. We refer to this type of attack as to zone
poisoning. This paper presents the ﬁrst measurement
study of the vulnerability. We analyze a random sam-
ple of 2.9 million domains and the Alexa top 1 mil-
lion domains and ﬁnd that at least 1,877 (0.065%) and
587 (0.062%) of domains are vulnerable, respectively.
Among the vulnerable domains are governments, health
care providers and banks, demonstrating that the threat
impacts important services. Via this study and subse-
quent notiﬁcations to aﬀected parties, we aim to im-
prove the security of the DNS ecosystem.
Keywords
Domain Name System; zone poisoning; dynamic up-
dates; measurement; security
1.
INTRODUCTION
The Domain Name System (DNS) provides a critical
service for all Internet applications that depend on do-
main names. Over the years, a variety of threats have
emerged that undermine the trustworthy resolution of
domain names into IP addresses. Two well-known at-
tacks are cache poisoning [21] and malicious name res-
olution services [23, 16]. What these attacks share in
common is that they compromise the resolution path
somewhere between the user and the authoritative name
server for a domain.
Permission to make digital or hard copies of all or part of this work for personal
or classroom use is granted without fee provided that copies are not made or
distributed for proﬁt or commercial advantage and that copies bear this notice
and the full citation on the ﬁrst page. Copyrights for components of this work
owned by others than ACM must be honored. Abstracting with credit is per-
mitted. To copy otherwise, or republish, to post on servers or to redistribute to
lists, requires prior speciﬁc permission and/or a fee. Request permissions from
permissions@acm.org.
IMC 2016, November 14-16, 2016, Santa Monica, CA, USA
c(cid:13) 2016 ACM. ISBN 978-1-4503-4526-2/16/11. . . $15.00
DOI: http://dx.doi.org/10.1145/2987443.2987477
In this study, we explore an attack against the au-
thoritative end of the path: the zone ﬁle of the authori-
tative name server itself. We detail how the vulnerable-
by-design, non-secure DNS dynamic update protocol
extension potentially allows anyone who can reach an
authoritative name server to update the content of its
zone ﬁle. The attacker only needs to know the name of
the zone and the name server for that zone. The vul-
nerability was indicated already in 1997 by Vixie et al.
in RFC 2136 [38], but its relevance in the current DNS
landscape has not been recognized nor studied.
We refer to this type of attack as to zone poisoning.
In the simplest version of an attack, a miscreant could
replace an existing A or MX resource record (RR) in a
zone ﬁle of an authoritative server and point the domain
name to an IP address under control of an attacker.
We already know that criminals are interested in hack-
ing DNS records of legitimate domains from the practice
of domain shadowing, where registrant credentials are
compromised in order to create a large volume of subdo-
mains of a legitimate domain. They are used for, among
other things, distributing malware exploit kits [13]. A
more ambitious vector is hacking the registrars directly,
as illustrated by the attack of Syrian Electronic Army
on Melbourne IT, the registrar for the New York Times
and Twitter [10].
In contrast to these attacks, zone
poisoning does not require compromising registrants or
registrars, but is as simple as sending a single RFC-
compliant DNS dynamic update packet to a misconﬁg-
ured server.
We present the ﬁrst study to detail this vulnerabil-
ity and measure its prevalence in the wild. Our main
contributions are summarized as follows:
• We analyze the root cause of non-secure dynamic up-
dates and how they can be exploited.
• We measure which domains allow non-secure dynamic
updates in a random sample of 1% from 286 million
domains and ﬁnd that 0.065% is vulnerable. Surpris-
ingly, we ﬁnd a similar rate (0.062%, meaning 587
domains) for the Alexa top 1 million domains.
• Alarmingly, we ﬁnd a signiﬁcant number of domains
of national governments, universities, and businesses,
including nine domains belonging to banks in Europe,
Middle East, and Asia, from the domain of a pri-
vate banking ﬁrm to a domain belonging to one of
the largest banks in the world.
• We ﬁnd signiﬁcant concentrations of the vulnerabil-
ity: securing the zone ﬁles of just 10 providers would
reduce the prevalence of the issue with 88.6% in the
random sample.
• We observe suspicious domains among the vulnerable
population, but ﬁnd no direct evidence of ongoing at-
tacks.
• We ﬁnd that most vulnerable servers are running Win-
dows DNS, NLnetLabs NSD, and ISC BIND.
The objective of this paper is to strengthen the se-
curity of DNS. We notiﬁed all operators of non-secure
servers discovered during our measurements.
2. BACKGROUND
The DNS protocol was initially designed to support
queries of a statically conﬁgured database. Most of the
data in the system was updated manually and expected
to change only slowly [30]. However, with the intro-
duction of dynamic allocation of network addresses to
hosts [18], a more dynamic update mechanism for DNS
became essential.
2.1 Dynamic Updates in DNS
DNS dynamic update speciﬁcations have been intro-
duced by Vixie et al. in RFC 2136 [38] in 1997. Follow-
ing this speciﬁcation, one can add or delete any type of
RR, such as A, AAAA, CNAME, or NS. The proposed UP-
DATE message complies with the standard DNS message
format (cf. RFC 1035 [31]).
it veriﬁes:
When a primary master server that supports dynamic
updates receives an update request,
i) if
all prerequisites deﬁned by the requestor are met (e.g.
check whether a speciﬁc record does or does not ex-
ist) and ii) whether restrictions are set regarding which
hosts are allowed to make updates and, if so, whether
those restrictions are met. If no restrictions are deﬁned,
anyone who knows the name of the zone and the name
server for that zone is capable of updating its content.
This constitutes a serious technological vulnerability in-
dicated by Vixie et al. in RFC 2136 [38]. If the request
is sent to an authoritative slave server, it is expected
that it will be forwarded towards the primary server
that is able to modify the zone ﬁle.
2.2 Secure DNS Dynamic Updates
Vixie et al. strongly recommended the use of security
measures such as those described in RFC 2137 [14] (su-
perseded by RFC 3007 [39]). If secure communication
is not implemented, it is expected that an authoritative
server accepts the dynamic updates only from a stat-
ically conﬁgured IP address of, for example, a DHCP
server [38].
In RFC 2137, Donald Eastlake describes
how to use the DNS Security Extensions (DNSSEC) [15]
to restrict dynamic updates to authorized entities based
on cryptographic keys [14]. However, using the public
key mechanism is less eﬃcient and harder to manage.
Three years after the introduction of DNS dynamic up-
dates, Vixie et al. proposed an eﬃcient, lightweight al-
ternative to authenticate dynamic updates: Secret Key
Transaction Authentication for DNS (TSIG), which is
based on shared secret keys and message authentication
code (MAC) [34].
2.3 Implementations
We now analyze common implementations of DNS
dynamic updates, paying special attention to the de-
fault protocol conﬁgurations.
BIND: Berkeley Internet Name Domain (BIND) is open
source and the most widely used DNS software on the
Internet [19]. Version 8, released in 1997, ﬁrst included
a dynamic DNS component [20, 37]. In BIND 8 and 9,
dynamic updates are disabled by default. An adminis-
trator can add allow-update in the zone conﬁguration
and specify the hosts that are allowed to update records.
An address match list can include entire subnetworks
or the built-in argument any, that allows all hosts to
make dynamic updates. Since BIND 8.2, released in
1999, the address match list supports TSIG. The basic
conﬁguration is still supported, however. Since BIND
9.1, slave servers are allowed to forward dynamic up-
dates to a master server (RFC 2136 [9]). These can
use address match lists similar to those of the master,
meaning that non-secure conﬁgurations provide an ad-
ditional path for a miscreant, as updates forwarded by
the slave will be accepted by the master, regardless of
the original requestor.
Microsoft DNS: Windows 2000 is the ﬁrst operating
system developed by Microsoft that supported DNS dy-
namic updates [28]. The server can be conﬁgured either
as standard primary or as Microsoft’s Active Directory–
integrated zone [26]. Windows 2000 and its successors,
i.e. Windows Server 2003 [25], 2008 [29], and 2012
[27], all support secure dynamic updates. They im-
plement an extended TSIG algorithm (RFC 3645 [24]).
When an administrator creates an Active Directory–
integrated zone, by default the server allows only se-
cure updates via extended TSIG. However, the server
can also be conﬁgured for no or non-secure dynamic
updates. More importantly, the secure update func-
tionality is not available for standard primary zones. In
any primary zone conﬁgured for DNS dynamic updates,
anyone can modify zones.
Other Implementations: As indicated in RFC 2137
[14], any zone ﬁle allowing dynamic updates is less se-
cure than the one conﬁgured statically. Some of the
popular open-source authoritative servers such as Name
Server Daemon (NSD) developed by NLnet Labs [32],
DJBDNS created by Daniel J. Bernstein [12], or Un-
logic Eagle DNS [33] do not support dynamic updates.
However, the functionality is sometimes added via ex-
ternal tools1,2. PowerDNS has recently added the dy-
namic update component. According to the documen-
tation, by default all IP ranges are allowed to perform
updates [35]. Our lab experiments (cf. Section 4.1) re-
veal, however, that by default only loopback IP space
can make dynamic updates.
In short: common implementations not only support
vulnerable conﬁgurations, such as accepting requests
from all hosts, but some are vulnerable by default. Of
the two common security mechanisms, TSIG-variants
and address match lists, only the former provides a re-
liable defense to malicious updates. Since the attack
only needs a single UDP packet, an attacker can guess
and spoof source IP addresses on the match list. This
risk could be mitigated by restricting dynamic updates
to the TCP protocol only.
3. THREAT MODEL
We refer to an attack that exploits non-secure dy-
namic updates as zone poisoning. This attack itself is
nothing more than sending a single RFC-compliant pack-
et. The requirements are: i) non-secure updates are al-
lowed by an authoritative server for a given zone ii) the
miscreant knows the name of a zone and its name server.
An attacker can replace existing A or MX RRs in a zone
ﬁle and point the domain to an IP address controlled
by the attacker and potentially running a fake web or
mail server. This would hijack the domain and allow the
attacker to determine where clients or their emails go.
A miscreant could also abuse the reputation of a legit-
imate domain (e.g. onlineshopping.com) and add an
extra A RR to an existing zone ﬁle that associates an
IP address of a fake web server with a malicious sub-
domain (e.g. paypal.account.onlineshopping.com).
An interesting variant is to delegate a malicious sub-
domain of a legitimate domain to the criminal’s own
DNS server. This would allow him to generate as many
new subdomains as needed, without making additional
update requests.
Non-secure updates could also be abused to acquire a
Domain Validated (DV) SSL certiﬁcate for the vulnera-
ble domain name, to be used in impersonation attacks.
DV SSL certs are validated and provisioned automati-
cally using a system of “challenge-response” emails. The
attacker could re-route the conﬁrmation message to the
contact email listed in WHOIS via a dynamic update for
the mail server domain.
4. METHODOLOGY
4.1 Lab Experiments
We performed lab experiments to establish if and
how the protocol allows unauthorized dynamic updates,
1https://www.sixxs.net/wiki/NSD
2http://www.thismetalsky.org/projects/dhcp dns
in particular adding, deleting and modifying existing
records in the zone. We selected BIND 9.8.4 and Pow-
erDNS 4.0.0-alpha2 as case studies, as both implemen-
tations are non-commercial and widely used. We con-
ﬁgured master servers for our domain name (e.g., exam-
ple.com) and we tested various conﬁguration setups as
explained in Section 2.3. To perform updates, we used
both the standard Linux nsupdate3 command and our
own scanner (see Section 4.2). Updates were sent from
both legitimate and spoofed source IP addresses on the
address match list.
The update requests successfully added and deleted
A, AAAA, NS, MX, PTR, SOA and TXT RRs corresponding
to the domain name (example.com), as well as extra
records for subdomain names (researchdelft.example
.com). This way, we were also able to replace a pre-
existing A RR (example.com) that had been manually
added to the zone ﬁle at the beginning of the study.
More speciﬁcally, using dynamic updates, we ﬁrst added
an extra A record that associated the domain name with
a new IP address, and then removed the original one.
Finally, for BIND we also conﬁgured the slave server to
forward updates towards the master. As expected, the
changes were accepted by the master even though the