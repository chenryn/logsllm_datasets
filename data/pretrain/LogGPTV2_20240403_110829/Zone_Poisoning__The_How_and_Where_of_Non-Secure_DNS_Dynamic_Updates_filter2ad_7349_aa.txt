# Zone Poisoning: The How and Where of Non-Secure DNS Dynamic Updates

**Authors:**
- Maciej Korczynski, Delft University of Technology, The Netherlands
- Michał Król, Université de Technologie de Compiègne, France
- Michel van Eeten, Delft University of Technology, The Netherlands

## Abstract
This paper examines the vulnerability posed by non-secure DNS dynamic updates, which can be exploited to manipulate DNS entries in the zone files of authoritative name servers. We term this type of attack "zone poisoning." This study presents the first comprehensive measurement of the prevalence of this vulnerability. We analyzed a random sample of 2.9 million domains and the Alexa top 1 million domains, finding that at least 0.065% (1,877 domains) and 0.062% (587 domains) are vulnerable, respectively. Among the vulnerable domains are those belonging to governments, healthcare providers, and banks, highlighting the critical nature of the threat. Our goal is to enhance the security of the DNS ecosystem through this study and subsequent notifications to affected parties.

**Keywords:** Domain Name System, zone poisoning, dynamic updates, measurement, security

## 1. Introduction
The Domain Name System (DNS) is essential for all Internet applications that rely on domain names. Over the years, various threats have emerged that compromise the trustworthy resolution of domain names into IP addresses. Two well-known attacks are cache poisoning [21] and malicious name resolution services [23, 16]. These attacks typically target the resolution path between the user and the authoritative name server.

In this study, we focus on an attack targeting the authoritative end of the path: the zone file of the authoritative name server itself. We detail how the inherently insecure DNS dynamic update protocol extension allows anyone who can reach an authoritative name server to update its zone file content. The attacker only needs to know the name of the zone and the name server for that zone. This vulnerability was noted as early as 1997 by Vixie et al. in RFC 2136 [38], but its significance in the current DNS landscape has not been fully recognized or studied.

We refer to this type of attack as "zone poisoning." In a simple attack, an adversary could replace an existing A or MX resource record (RR) in the zone file of an authoritative server, redirecting the domain name to an IP address controlled by the attacker. Criminals already exploit DNS records of legitimate domains through domain shadowing, where registrant credentials are compromised to create numerous subdomains for distributing malware [13]. More ambitious attacks involve hacking registrars directly, as seen in the Syrian Electronic Army's attack on Melbourne IT, the registrar for the New York Times and Twitter [10].

Unlike these attacks, zone poisoning does not require compromising registrants or registrars; it is as simple as sending a single RFC-compliant DNS dynamic update packet to a misconfigured server.

Our main contributions include:
- Analyzing the root cause of non-secure dynamic updates and their exploitation.
- Measuring the prevalence of non-secure dynamic updates in a random sample of 1% from 286 million domains, finding that 0.065% are vulnerable. Surprisingly, a similar rate (0.062%, or 587 domains) was found among the Alexa top 1 million domains.
- Identifying a significant number of vulnerable domains belonging to national governments, universities, and businesses, including nine bank domains in Europe, the Middle East, and Asia.
- Noting that securing the zone files of just 10 providers would reduce the prevalence of the issue by 88.6% in the random sample.
- Observing suspicious domains among the vulnerable population, though no direct evidence of ongoing attacks was found.
- Finding that most vulnerable servers run Windows DNS, NLnetLabs NSD, and ISC BIND.
- Notifying all operators of non-secure servers discovered during our measurements.

## 2. Background
### 2.1 Initial Design and Evolution of DNS
The DNS protocol was initially designed to support queries of a statically configured database. Data updates were manual and infrequent [30]. However, with the introduction of dynamic allocation of network addresses to hosts [18], a more dynamic update mechanism became necessary.

### 2.2 Dynamic Updates in DNS
Vixie et al. introduced DNS dynamic update specifications in RFC 2136 [38] in 1997. This specification allows adding or deleting any type of RR, such as A, AAAA, CNAME, or NS. When a primary master server receives an update request, it verifies if all prerequisites defined by the requester are met and whether restrictions are set regarding which hosts can make updates. If no restrictions are defined, anyone who knows the name of the zone and the name server for that zone can update its content. This constitutes a serious technological vulnerability, as noted in RFC 2136 [38].

### 2.3 Secure DNS Dynamic Updates
Vixie et al. strongly recommended using security measures described in RFC 2137 [14] (superseded by RFC 3007 [39]). If secure communication is not implemented, an authoritative server should accept dynamic updates only from a statically configured IP address, such as a DHCP server [38]. Donald Eastlake described in RFC 2137 how to use DNS Security Extensions (DNSSEC) [15] to restrict dynamic updates to authorized entities based on cryptographic keys [14]. However, using public key mechanisms is less efficient and harder to manage. Vixie et al. later proposed a lightweight alternative: Secret Key Transaction Authentication for DNS (TSIG), based on shared secret keys and message authentication code (MAC) [34].

### 2.4 Implementations
#### BIND
Berkeley Internet Name Domain (BIND) is open-source and the most widely used DNS software on the Internet [19]. Version 8, released in 1997, first included a dynamic DNS component [20, 37]. In BIND 8 and 9, dynamic updates are disabled by default. An administrator can enable updates by adding `allow-update` in the zone configuration and specifying allowed hosts. Since BIND 8.2, the address match list supports TSIG. Since BIND 9.1, slave servers can forward dynamic updates to a master server (RFC 2136 [9]). Non-secure configurations provide an additional path for attackers, as updates forwarded by the slave will be accepted by the master, regardless of the original requester.

#### Microsoft DNS
Windows 2000 is the first operating system developed by Microsoft that supported DNS dynamic updates [28]. The server can be configured as a standard primary or as a Microsoft Active Directory–integrated zone [26]. Windows 2000 and its successors (Windows Server 2003 [25], 2008 [29], and 2012 [27]) all support secure dynamic updates via an extended TSIG algorithm (RFC 3645 [24]). By default, Active Directory–integrated zones allow only secure updates. However, standard primary zones can be configured for non-secure updates, allowing anyone to modify zones.

#### Other Implementations
As indicated in RFC 2137 [14], any zone file allowing dynamic updates is less secure than one configured statically. Some popular open-source authoritative servers, such as Name Server Daemon (NSD) by NLnet Labs [32], DJBDNS by Daniel J. Bernstein [12], and Unlogic Eagle DNS [33], do not support dynamic updates. However, the functionality is sometimes added via external tools. PowerDNS recently added dynamic update support, allowing all IP ranges to perform updates by default [35]. Our lab experiments (Section 4.1) reveal that, by default, only loopback IP space can make dynamic updates.

In summary, common implementations not only support vulnerable configurations but some are vulnerable by default. While TSIG-variants and address match lists are common security mechanisms, only the former provides a reliable defense against malicious updates. Since the attack requires only a single UDP packet, an attacker can guess and spoof source IP addresses on the match list. This risk can be mitigated by restricting dynamic updates to the TCP protocol only.

## 3. Threat Model
We refer to an attack exploiting non-secure dynamic updates as "zone poisoning." This attack involves sending a single RFC-compliant packet. The requirements are: i) non-secure updates are allowed by an authoritative server for a given zone, and ii) the attacker knows the name of the zone and its name server.

An attacker can replace existing A or MX RRs in a zone file, redirecting the domain to an IP address controlled by the attacker, potentially running a fake web or mail server. This hijacks the domain and allows the attacker to determine where clients or their emails go. Additionally, an attacker could abuse the reputation of a legitimate domain (e.g., onlineshopping.com) by adding an extra A RR to an existing zone file, associating an IP address of a fake web server with a malicious subdomain (e.g., paypal.account.onlineshopping.com).

Another variant is delegating a malicious subdomain of a legitimate domain to the criminal’s own DNS server, allowing the creation of numerous new subdomains without additional update requests. Non-secure updates can also be abused to acquire a Domain Validated (DV) SSL certificate for the vulnerable domain name, used in impersonation attacks. DV SSL certificates are validated and provisioned automatically using a system of "challenge-response" emails. The attacker could reroute the confirmation message to the contact email listed in WHOIS via a dynamic update for the mail server domain.

## 4. Methodology
### 4.1 Lab Experiments
We conducted lab experiments to determine if and how the protocol allows unauthorized dynamic updates, specifically adding, deleting, and modifying existing records in the zone. We selected BIND 9.8.4 and PowerDNS 4.0.0-alpha2 as case studies, as both are non-commercial and widely used. We configured master servers for our domain (e.g., example.com) and tested various configurations as explained in Section 2.3. To perform updates, we used the standard Linux `nsupdate` command and our own scanner (see Section 4.2). Updates were sent from both legitimate and spoofed source IP addresses on the address match list.

The update requests successfully added and deleted A, AAAA, NS, MX, PTR, SOA, and TXT RRs corresponding to the domain name (example.com), as well as extra records for subdomain names (researchdelft.example.com). This allowed us to replace a pre-existing A RR (example.com) that had been manually added to the zone file at the beginning of the study. Using dynamic updates, we first added an extra A record that associated the domain name with a new IP address and then removed the original one. For BIND, we also configured the slave server to forward updates to the master. As expected, the changes were accepted by the master even though the original requestor was not on the address match list.