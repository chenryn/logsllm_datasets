### 第15章 Puppet 架构扩展与分布式

#### 241. 架构扩展与分布式

为了提升Puppet Master的性能并支持更多的节点，可以采用多种方法和策略。本章节将介绍几种常见的架构组合方式。

#### 15.2.3 Nginx+Passenger 模式

通过使用Nginx和Passenger，可以显著提高Puppet Master的处理能力。以下是具体的配置步骤：

1. **安装Passenger和Nginx**
   ```bash
   sudo gem install rake rack passenger
   wget http://nginx.org/download/nginx-1.3.11.tar.gz
   tar zxf nginx-1.3.11.tar.gz
   cd nginx-1.3.11
   ```

2. **编译安装Nginx并加载Passenger模块**
   ```bash
   ./configure --user=daemon --group=daemon --prefix=/usr/local/nginx_passenger/ --with-http_ssl_module --add-module='/usr/lib64/ruby/gems/1.8/gems/passenger-3.0.19/ext/nginx'
   make && sudo make install
   ```

3. **创建Rack目录并配置Rack应用**
   ```bash
   sudo mkdir -p /etc/puppet/rack/public
   cp /usr/share/puppet/ext/rack/files/config.ru /etc/puppet/rack/
   sudo chown -R puppet:puppet /etc/puppet/rack/
   ```

4. **配置Nginx**
   编辑`/usr/local/nginx_passenger/conf/nginx.conf`文件，添加以下内容：
   ```nginx
   server {
       listen 8140 ssl;
       server_name puppet.domain.com;
       ssl_certificate /var/lib/puppet/ssl/certs/puppet.domain.com.pem;
       ssl_certificate_key /var/lib/puppet/ssl/private_keys/puppet.domain.com.pem;
       ssl_client_certificate /var/lib/puppet/ssl/certs/ca.pem;
       ssl_verify_client optional;
       ssl_verify_depth 1;
       ssl_session_cache shared:SSL:128m;
       ssl_session_timeout 5m;
       ssl_ciphers SSLV2:-LOW:-EXPORT:RC4+RSA;
       ssl_prefer_server_ciphers on;
       ssl_crl /var/lib/puppet/ssl/ca/ca_crl.pem;

       root /etc/puppet/rack/public;
       passenger_enabled on;
       passenger_set_cgi_param HTTP_X_CLIENT_VERIFY $ssl_client_verify;
       passenger_set_cgi_param HTTP_X_CLIENT_DN $ssl_client_S_dn;
       error_log /var/log/nginx/puppet_error.log;
       access_log /var/log/nginx/puppet_access.log;
   }
   ```

5. **启动Nginx**
   ```bash
   /usr/local/nginx_passenger/sbin/nginx
   ```

6. **验证配置**
   查看Master的日志和Apache服务的日志以确认配置正确：
   ```bash
   tail /var/log/httpd/access_log
   tail /var/log/message
   ```

7. **查看Passenger状态**
   ```bash
   sudo passenger-status
   ```

#### 15.3 架构扩展之多台Puppet Master

在某些情况下，单台Puppet Master可能无法满足需求。可以通过横向扩展来提供更多的处理能力。以下是几种常见的组合方式：

1. **组合方式一：CA与Master在同一服务器**
   - 适用于单机房扩容。
   - 所有服务器主机名相同。
   - 后端Puppet Master采用Webserver替代WEBRick以提升性能。
   - 客户端证书由负载均衡器上的CA颁发。

2. **组合方式二：Master与CA位于独立服务器，利用HTTP负载均衡器代理转发CA请求**
   - CA和Catalog请求分别转发到不同的服务器。
   - 负载均衡器存在单点故障，且扩展不方便。
   - 不适合多机房跨运营商部署。

3. **组合方式三：Master与CA位于独立服务器，利用DNS轮询或分区域解析至Master**
   - 通过DNS扩展达到多机房部署。
   - 配置较复杂。

4. **组合方式四：CA和Master位于独立服务器，并指定CA服务器和Master服务器**
   - 客户端通过配置`ca_server`指定CA服务器。
   - 主机名可以相同也可以不同，建议一个集群内的Master主机名相同。
   - 增加Master或故障时需要安装好软件，并配置相同的证书文件。

5. **组合方式五：共享一个证书**
   - 共享一个证书文件需要将证书文件分发至客户端。
   - 集群内Master主机名不同时，增加一台Master服务器需要在CA服务器上重新授权。

通过这些组合方式，可以有效地扩展Puppet Master的处理能力，并提高系统的可靠性和可维护性。