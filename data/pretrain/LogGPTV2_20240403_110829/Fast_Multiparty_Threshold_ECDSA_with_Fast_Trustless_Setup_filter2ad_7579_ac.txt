We now describe our protocol. The players run on input G, g the cyclic group used by the DSA
signature scheme. We assume that each player Pi is associated with a public key Ei for an additively
homomorphic encryption scheme E.
4 For the simple range proof that a, b  q8 in practice
anyway so the improvement in the size of N is irrelevant for ECDSA.
10
Rosario Gennaro and Steven Goldfeder
4.1 Key generation protocol
– Phase 1. Each Player Pi selects ui ∈R Zq; computes [KGCi, KGDi] = Com(gui) and broadcast
KGCi. Each Player Pi broadcasts Ei the public key for Paillier’s cryptosystem.
– Phase 2. Each Player Pi broadcasts KGDi. Let yi be the value decommitted by Pi. The player
Pi performs a (t, n) Feldman-VSS of the value ui, with yi as the “free term in the exponent”
i yi. Each player adds the private shares received during the
n Feldman VSS protocols. The resulting values xi are a (t, n) Shamir’s secret sharing of the
The public key is set to y = (cid:81)
secret key x =(cid:80)
i ui. Note that the values Xi = gxi are public.
– Phase 3 Let Ni = piqi be the RSA modulus associated with Ei. Each player Pi proves in ZK
that he knows xi using Schnorr’s protocol [34] and that he knows pi, qi using any proof of
knowledge of integer factorization (e.g. [32])
4.2 Signature Generation
We now describe the signature generation protocol, which is run on input m (the hash of the
message M being signed) and the output of the key generation protocol described above. We note
that the latter protocol is a t-out-of-n protocol (and thus the secret key x is shared using (t, n)
Shamir secret-sharing).
Let S ⊆ [1..n] be the set of players participating in the signature protocol. We assume that
|S| = t. For the signing protocol we can share any ephemeral secrets using a (t, t) secret sharing
scheme, and do not need to use the general (t, n) structure. We note that using the appropriate
Lagrangian coeﬃcients λi,S each player in S can locally map its own (t, n) share xi of x into a
i∈S wi. Since Xi = gxi and λi,S are public values, all
the players can compute Wi = gwi = X λi,S
– Phase 1. Each Player Pi selects ki, γi ∈R Zq; computes [Ci, Di] = Com(gγi) and broadcast Ci.
i
(t, t) share of x, wi = (λi,S)(xi), i.e. x =(cid:80)
Deﬁne k =(cid:80)
i∈S ki, γ =(cid:80)
.
i∈S γi. Note that
(cid:88)
(cid:88)
i,j∈S
i,j∈S
kγ =
kx =
kiγj mod q
kiwj mod q
– Phase 2. Every pair of players Pi, Pj engages in two multiplicative-to-additive share conversion
subprotocols
• Pi, Pj run MtA with shares ki, γj respectively. Let αij [resp. βij] be the share received by
player Pi [resp. Pj] at the end of this protocol, i.e.
Player Pi sets δi = kiγi +(cid:80)
of kγ =(cid:80)
j(cid:54)=i αij +(cid:80)
kiγj = αij + βij
j(cid:54)=i βji. Note that the δi are a (t, t) additive sharing
• Pi, Pj run MtAwc with shares ki, wj respectively. Let µij [resp. νij] be the share received
i∈S δi
by player Pi [resp. Pj] at the end of this protocol, i.e.
Player Pi sets σi = kiwi +(cid:80)
of kx =(cid:80)
j(cid:54)=i µij +(cid:80)
– Phase 3. Every player Pi broadcasts δi and the players reconstruct δ = (cid:80)
i∈S σi
j(cid:54)=i νji. Note that the σi are a (t, t) additive sharing
i∈S δi = kγ. The
kiwj = µij + νij
players compute δ−1 mod q.
Fast Multiparty Threshold ECDSA with Fast Trustless Setup
11
– Phase 4. Each Player Pi broadcasts Di. Let Γi be the values decommitted by Pi who proves in
ZK that he knows γi s.t. Γi = gγi using Schnorr’s protocol [34].
The players compute
R = [
Γi]δ−1
i∈S
γi)k−1γ−1
= gγk−1γ−1
= gk−1
(cid:89)
i∈S
(cid:88)
i∈S
(cid:88)
i∈S
= g((cid:80)
(cid:88)
i∈S
and r = H(cid:48)(R).
– Phase 5. Each player Pi sets si = mki + rσi. Note that
si = m
ki + r
σi = mk + rkx = k(m + xr) = s
i ρi.
aborts.
broadcasts ˜Ci.
Com(Vi, Ai) and broadcasts ˆCi.
and Aρi
• (5B) Player Pi broadcasts ˆDi and proves in ZK that he knows si, (cid:96)i, ρi such that Vi = Rsig(cid:96)i
i∈S Vi (this should be
• (5C) Player Pi computes Ui = V ρi and Ti = A(cid:96)i. It commits [ ˜Ci, ˜Di] = Com(Ui, Ti) and
i∈S Ai.
valid signature the players abort, otherwise they accept and end the protocol.
i.e. the si are a (t, t) sharing of s.
• (5A) Player Pi chooses (cid:96)i, ρi ∈R Zq computes Vi = Rsig(cid:96)i, Ai = gρi, and [ ˆCi, ˆDi] =
i (cid:96)i and ρ =(cid:80)
Let (cid:96) =(cid:80)
i . If a ZK proof fails, the protocol aborts. Let V = g−my−r(cid:81)
V = g(cid:96)) and A =(cid:81)
• (5D) Player Pi broadcasts ˜Di to decommit to Ui, Ti If (cid:81)
i∈S[Ti] (cid:54)= (cid:81)
• (5E) Otherwise player Pi broadcasts si. The players compute s =(cid:80)
to the last phase is for the players to reveal si and reconstruct s =(cid:80)
Si = Rsi and check that (cid:81)
a random value g(cid:96)i . Let Vi = Rsig(cid:96)i. Then (cid:81)
Let us explain the intuition behind Phase 5. To avoid expensive ZK proofs, we are potentially
reconstructing an incorrect signature, which is then checked and possibly rejected. A naive approach
i si. But, for reasons that
will become clear in the proof, this is not provably secure—the intuitive reason being that if the
adversary makes the protocol fail by outputting an invalid signature the values si held by the
good players may give him valuable information.5 Naively this could be done by ﬁrst broadcasting
i Si = Rs = gmyr according to the DSA veriﬁcation algorithm. But
for similar reasons, this step makes the proof fail. So in our protocol the players mask Rsi with
i Vi = Rsg(cid:96) and therefore V = g(cid:96). The players
cannot reveal g(cid:96)i to check the correctness of V as this would “de-mask” Rsi so we “randomize” the
“aggregate” value to U = g(cid:96)ρ. Alongside the players compute g(cid:96)ρ via a distributed “Diﬃe-Hellman”
exchange. If this distributed randomized signature veriﬁcation carries out, then it is safe to release
the shares si, but if the signature does not verify then the protocol aborts here and the values si
held by the good players are never revealed in the clear.
i∈S si. If (r, s) is not a
i∈S Ui the protocol
4.3 The Zero-Knowledge Proofs
In step (5B) a player P outputs V = Rsg(cid:96) and A = gρ and must prove that he knows s, (cid:96), ρ
satisfying the above relationship. The proof for A is the classic Schnorr’s proof. For the value V a
classic (honest-veriﬁer) ZK proof for this task is as follows:
– The Prover chooses a, b ∈R Zq and sends α = Ragb
– The Veriﬁer sends a random challenge c ∈R Zq
– The Prover answers with t = a + cs mod q and u = b + c(cid:96) mod q.
– The Veriﬁer checks that Rtgu = αV c
5 We do not have an attack but we do not see a way to make a proof work either.
12
Rosario Gennaro and Steven Goldfeder
4.4 Security Proof
In this section we prove the following
Theorem 1. Assuming that
– The DSA signature scheme is unforgeable;
– The Strong RSA Assumption holds;
– KG, Com, Ver, Equiv is a non-malleable equivocable commitment scheme;
– the DDH Assumption holds
then our threshold DSA scheme in the previous section is unforgeable.
The proof of this theorem will proceed by a traditional simulation argument, in which we show
that if there is an adversary A that forges in the threshold scheme with a signiﬁcant probability,
then we can build a forger F that forges in the centralized DSA scheme also with a signiﬁcant
probability.
So let’s assume that there is an adversary A that forges in the threshold scheme with probability
larger than  ≥ λ−c.
We assume that the adversary controls players P2, . . . , Pt+1 and that P1 is the honest player.
We point out that because we use concurrently non-malleable commitments (where the adversary
can see many commitments from the honest players) the proof also holds if the adversary controls
less than t players and we have more than 1 honest player. So the above assumption is without
loss of generality.
Because we are assuming a rushing adversary, P1 always speaks ﬁrst at each round. Our sim-
ulator will act on behalf of P1 and interact with the adversary controlling P2, . . . , Pn. Recall how
A works: it ﬁrst participates in the key generation protocol to generate a public key y for the
threshold scheme. Then it requests the group of players to sign several messages m1, . . . , m(cid:96), and
the group engages in the signing protocol on those messages. At the end with probability at least
 the adversary outputs a message m (cid:54)= mi and a valid signature (r, s) for it under the DSA key y.
This probability is taken over the random tape τA of A and the random tape τ1 of P1. If we denote
with A(τA)P1(τ1) the output of A at the end of the experiment described above, we can write
P robτ1,τA [ A(τA)P1(τ1) is a forgery ] ≥ 
We say that an adversary random tape τA is good if
P robτ1 [ A(τA)P1(τ1) is a forgery ] ≥ 
2
By a standard application of Markov’s inequality we know that if τA is chosen uniformly at random,
the probability of choosing a good one is at least 
2 .
We now turn to building the adversary F that forges in the centralized scheme. This forger
will use A as a subroutine in a “simulated” version of the threshold scheme: F will play the role
of P1 while A will control the other players. F will choose a random tape τA for A: we know that
2 it will be a good tape. From now on we assume that A runs on a good
with probability at least 
random tape.
F runs on input a public key y for the centralized DSA scheme, which is chosen according to
the uniform distribution in G. The ﬁrst task for F is to set up an indistinguishable simulation of
the key generation protocol to result in the same public key y.
Similarly every time A requests the signature of a message mi, the forger F will receive the real
signature (ri, si) from its signature oracle. It will then simulate, in an indistinguishable fashion, an
execution of the threshold signature protocol that on input mi results in the signature (ri, si).
Because these simulations are indistinguishable from the real protocol for A, the adversary will
output a forgery with the same probability as in real life. Such a forgery m, r, s is a signature on
a message that was never queried by F to its signature oracle and therefore a valid forgery for F
as well. We now turn to the details of the simulations.
Fast Multiparty Threshold ECDSA with Fast Trustless Setup
13
4.5 Simulating the key generation protocol
The simulation Sim-Key-Gen is described below. On input a public key y = gx for DSA the forger
F plays the role of P1 as follows. The forger F also runs on input a public key E for which he does
not know the matching secret key (this is necessary for when we have to make a reduction to the
semantic security of the Paillier encryption scheme).
Simulation: Repeat the following steps (by rewinding A) until A sends valid messages (i.e. a correct
decommitment) for P2, . . . , Pn on both iterations.
– F (as P1) selects a random value u1 ∈ Zq, computes [KGC1, KGD1]= Com(gu1) and broadcasts
KGC1. A broadcast commitments KCGi for i > 1;
– Each player Pi broadcasts KGDi; let yi be the decommitted value and the accompanying
Feldman-VSS (F will follow the protocol instructions). Each player broadcasts Ei. F broacasts
E1 = E.
– Let yi the revealed commitment values of each party. F rewinds the adversary to the decom-
y ·(cid:81)n
.
i
mitment step and
• changes the opening of P1 to
i=2 y−1
• simulates the Feldman-VSS with free term ˆy1
point (this could be ⊥ if the adversary refused to decommit).
– The adversary A will broadcasts
– The players compute ˆy =(cid:81)n
ˆKGDi. Let ˆyi be the committed value revealed by A at this
i=1 ˆyi (set to ⊥ if any of the ˆyi are set to ⊥ in the previous step).