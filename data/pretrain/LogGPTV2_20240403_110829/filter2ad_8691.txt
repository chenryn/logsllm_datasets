# 【技术分享】让我们一起来消灭CSRF跨站请求伪造（上）

#### 译文声明
本文为翻译文章，原文来源于medium.com。具体内容及含义以原文为准。

**译者：[WisFree](http://bobao.360.cn/member/contribute?uid=2606963099)**  
预估稿费：200 RMB  
投稿方式：发送邮件至linwei#360.cn 或登录网页版在线投稿

**传送门**
[【技术分享】让我们一起来消灭CSRF跨站请求伪造（下）](http://bobao.360.cn/learning/detail/4618.html)

### 前言
如今已是2017年，相信各位对 **CSRF**（跨站请求伪造）已有所了解。多年来，关于该话题的讨论和文档已经相当丰富，许多流行的网站开发框架也实现了相应的缓解方案。然而，以下几点因素仍导致CSRF成为Web应用程序中常见的安全漏洞：
1. 遗留应用缺乏CSRF保护；
2. 某些框架内置的CSRF防护机制存在缺陷；
3. 应用程序未使用已验证的安全框架保护机制；
4. 新应用程序未采用提供CSRF保护功能的现代框架。

在这篇文章中，我们将深入探讨CSRF的工作原理及其防范措施。随后，我们还将介绍一种无需修改源代码即可应用于现有应用程序的安全解决方案，并测试一种针对cookie的新扩展。如果这种扩展能成为通用标准，将有助于消除大多数场景下的跨站脚本漏洞。相关代码和测试样例已在[GitHub库](https://www.github.com/jrozner/csrf-demo)中提供，欢迎下载。

### 攻击机制详解
简而言之，CSRF攻击允许攻击者强迫目标用户代表其发送HTTP请求。此类攻击主要发生在客户端（如Web浏览器），此时用户发送的应用信息被认为是可信的，从而导致攻击成功。要理解这种攻击，需关注以下三个关键因素：不安全的HTTP方法、浏览器对cookie的处理以及跨站脚本漏洞（XSS）。

根据HTTP标准，方法分为安全和不安全两类。安全方法（GET、HEAD、OPTIONS）用于只读操作，而不安全方法（POST、PUT、PATCH、DELETE）则用于资源的修改、创建和删除。不幸的是，HTTP方法本身的操作可以被忽略或篡改。

浏览器对HTTP标准支持不足是导致HTTP方法误用的主要原因。在XML HTTP Request (XHR)流行之前，除了GET和POST外，其他方法依赖特定框架和代码库实现。这种限制模糊了不同HTTP方法之间的界限，虽然不足以单独造成CSRF攻击，但也增加了防范难度。此外，浏览器处理cookie的方式也为CSRF提供了便利条件。

HTTP最初设计为无状态协议，即每个请求独立于其他请求。为了支持复杂Web应用，引入了cookie来维持请求间的状态。浏览器全局Cookie可在多个实例、窗口和标签间共享，用户依赖浏览器自动向每个请求发送cookie。由于cookie可访问且缺乏防篡改保护，会话管理责任转到了服务器端。服务器生成唯一标识符存储于cookie中，每次请求时浏览器都会发送此标识符，服务器据此判断会话有效性。会话终止后，服务器丢弃标识符，后续使用该标识符的请求均视为无效。

问题在于浏览器如何管理cookie。cookie由一系列属性组成，其中最重要的是Domain属性。它限制cookie仅适用于特定主机，防止敏感信息（如会话标识符）被恶意网站窃取。然而，Domain属性并不遵循同源策略（SOP），仅简单比较cookie和请求中的域名。这意味着任何不同源请求只要携带相应主机的cookie即可发起请求。在此情况下，只有正确使用安全和不安全的HTTP方法才能确保安全性。更多关于同源策略的信息，请参阅[这里](https://en.wikipedia.org/wiki/Same-origin_policy)。

最后一个重要因素是跨站脚本（XSS）漏洞。XSS使攻击者能够控制JavaScript或HTML，向目标用户展示DOM内容。若应用程序存在XSS漏洞，则几乎无法抵御CSRF攻击。本文所述及大多数应用程序依赖的防范措施在这种情况下将失效。

### 攻击执行
既然我们已经了解了成功实施CSRF攻击所需的关键要素，接下来将详细探讨其工作机制。如果你还未搭建测试环境，请按照[GitHub库](https://www.github.com/jrozner/csrf-demo)中的说明进行设置并运行示例。

我们将讨论三种主要类型的CSRF攻击：
1. **资源包含（Resource inclusion）**：最常见的类型之一，攻击者通过控制HTML标签中的资源（如图片、视频、音频等）实现攻击。这种攻击利用浏览器加载URL的能力，不需要XSS，仅限于GET请求。
2. **基于表单（Form-based）**：当正确使用安全HTTP方法时，攻击者创建一个表单诱骗用户提交。表单内嵌JavaScript代码段，快速且隐秘地提交表单，用户难以察觉。由于浏览器处理cookie的方式存在问题，表单可托管于任意网站，只要用户已通过有效cookie登录，攻击即可成功。
3. **XMLHttpRequest（XHR）**：较为罕见，因其实现条件苛刻。现代Web应用广泛使用XHR，因此需要专门构建防御措施。由于同源策略限制，基于XHR的CSRF通常通过XSS Payload实现。如果没有跨域资源共享（CORS），XHR只能向特定源发送请求，限制了攻击者的Payload托管途径。

### 总结
在接下来的文章中，我们将详细介绍如何在实际开发环境中部署有效的CSRF解决方案。敬请关注我们的最新文章。

---

希望这些优化能让您的文章更加清晰、连贯和专业。如果有进一步的需求，请随时告知！