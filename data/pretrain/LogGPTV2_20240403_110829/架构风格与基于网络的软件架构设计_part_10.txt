件设备）的远程调用的应用中，在这些应用中，效率和网络交互的频率并不是很值得关注。
3.7 局限
每一种架构风格都推崇在组件之间的一种特定的交互类型。当组件跨广域网（wide-area
network）分布时，对于网络的使用或误用会严重影响应用的可用性。通过以架构风格对于
架构属性的影响（尤其是对于一个分布式超媒体系统的基于网络的应用的性能的影响）来刻
画架构，我们得以有能力选择更加适合于此类应用的软件设计。然而，对于所选择的分类方
第3章 基于网络的架构风格 34
法，这里存在着一些局限。
第一个局限是这里的评估是特别为分布式超媒体的需求而量身定制的。例如，如果通信
的内容是细粒度的控制消息，那么管道和过滤器风格的很多优良品质就不复存在；而且如果
通信需要用户的交互，管道和过滤器风格根本就不适用。同样地，如果对客户端请求的响应
完全没有被缓存，那么分层缓存风格只会增加延迟，而不会带来任何好处。这种类型的区别
并没有出现在这个分类中，只能在对于每种风格的讨论中非形式化地加以探讨。我相信这个
局限能够通过对每一种类型的通信问题创建单独的分类表格来加以解决。问题领域的例子包
括：大粒度的数据获取、远程信息监视、搜索、远程控制系统、以及分布式处理。
第二个局限是对于架构属性的分组。在一些情况下，识别出一个架构属性所导致的一些
特殊的方面，例如可理解性和可验证性，要比将它们笼统地混在简单性的标题下更好。尤其
是对于那些有可能以损失可理解性为代价改善可验证性的风格而言。然而，将一个有很多抽
象概念的属性作为单个度量手段也是有价值的，因为我们并不想使这个分类过于特殊化，以
至于不存在影响相同属性类别的两种风格。一种解决方案就是在分类中既包括特殊的属性，
也包括概括的属性。
尽管如此，这些最初的调查和分类，对于任何可能解决这些局限的更进一步的分类来说，
是一个必需的先决条件。
3.8 相关工作
3.8.1 架构风格和模式的分类方法
与本章最直接相关的研究领域是架构风格和架构级模式（architecture-level patterns）的
识别和分类。
Shaw [117]描述了一些架构风格，后来Garlan和Shaw[53]对这些风格进行了扩展。
Shaw和Clements[122]提出了这些风格的初步分类，Bass等人[9]重复了他们的工作，其中使
用了以控制和数据（control and data issues）为坐标轴的二维的、表格化的分类策略，按照以
下的功能类别加以组织：在风格中使用哪种组件和连接器；在组件之间如何共享、分配和转
移控制；数据如何通过系统来进行通信；数据和控制如何交互；何种类型的推理机制是与该
风格相兼容的。这种分类方法的主要目的是标识风格的特征，而不是帮助对风格进行比较。
它总结出一组少量的“经验法则”，作为一种形式的设计指导。
与本章不同的是，Shaw和Clements[122]的分类并没有为应用软件的设计师提供一种有
用的方法，来帮助他们对于设计进行评估。问题是建造软件的目的并不是建造一种具有特殊
的形状、拓扑或者组件类型的系统，以这种方式来对分类加以组织，并不能够帮助设计师找
到符合他们的需要的架构风格。它也混淆了风格之间的本质区别和那些只具有次要重要性的
其他问题，并且模糊了风格之间的来源关系。进一步讲，它并没有将焦点放在任何特殊的架
构类型上，例如基于网络的应用。最后，它无法描述出风格能够如何组合和将它们组合之后
的效果。
Buschmann和Meunier[27]描述了一种根据抽象的粒度、功能、结构原则来组织模式的
分类方案（classification scheme）。根据抽象的粒度（granularity of abstraction）将模式划分
为三个分类：架构框架（architectural frameworks，用于架构的模板）、设计模式（design
patterns）和习惯用法（idioms）。他们的分类解决的一些问题与本文所解决的问题相同，例
如分离关注点和导致架构属性的结构原则（structural principles），但是仅仅覆盖了两种这里
所描述的架构风格。他们的分类后来又被Buschmann等人[28]进行了相当大的扩展，后面的
这份文献讨论了广泛得多的的架构模式，以及它们与软件架构的关系。
Zimmer[137]使用一个以设计模式之间的关系为基础的图表，来组织设计模式，这使得
第3章 基于网络的架构风格 35
理解Gamma等人[51]的目录中的模式的全部结构更加容易。然而，被分类的模式并不是架
构模式，分类仅仅是排他性地基于起源或使用关系，而不是基于架构属性。
3.8.2 分布式系统和编程范例
Andrews[6]调查了分布式程序中的过程（processes in a distributed program ）如何通过消
息传递来进行交互。他定义了并发程序、分布式程序、一个分布式程序中的各种过程（过滤
器、客户端、服务器、对等体（peers））、交互范例（interaction paradigms）、以及通信频
道。交互范例代表了软件架构风格中与通信相关的方面。他描述了通过过滤器（管道和过滤
器）网络的单向数据流、客户-服务器、心跳（heartbeat）检测、探测/回应（probe/echo）、
广播、标记传递（token passing）、复制服务器（replicated server）、以及带有任务包（bag
of tasks）的复制工人（replicated worker）。然而，他从在单个任务上互操作的多个过程的观
点来进行表述，而不是通用的基于网络的架构风格。
Sullivan和Notkin[126]提供了一个对于隐式调用研究的调查，并且描述了对隐式调用的
应用，以改善软件工具套件的可进化性品质（evolution quality）。Barrett等人[8]通过建造一
个用来进行比较的框架，然后查看某些系统如何符合此框架，提供了对基于事件的集成机制
的调查。Rosenblum和Wolf[114]调查了一个用于Internet规模的事件通知的设计框架。所有
这些都是与EBI风格的范围和需求相关的，而没有为基于网络的系统提供解决方案。
Fuggetta等人[50]提供了对于移动代码范例的一个彻底的调查和分类。本章建立在他们
的工作之上并进行了扩展：我将移动代码风格与其他基于网络的风格进行了比较，并将它们
放在单一的框架和架构定义集合之中。
3.8.3 中间件
Bernstein[22]将中间件定义为包括了标准编程接口和协议的分布式系统服务。这些服务
被称为中间件，是因为它们扮演了一个位于操作系统和网络软件之上、特定行业的应用软件
之下的中间层。Umar[131]提供了对于中间件的广泛的分析。
关于中间件的架构研究聚焦于在现成的（off-the-shelf）中间件中集成组件的问题和影响。
Di Nitto和Rosenblum[38]描述了对于中间件和预定义组件（predefined components）的使用
如何影响正在开发的系统的架构，以及反过来，对于特定架构的选择如何限制了对于中间件
的选择。Dashofy等人[35]讨论了以C2风格来使用中间件。
Garlan等人[56]指出了在现成的组件中的一些架构假设，检查了创建者在创建用于架构
设计的Aesop工具[54]的过程中重用子系统时存在的问题。他们将问题分类为能够造成架构
不匹配的四个主要的假设：组件的特性（nature of components）、连接器的特性（nature of
connectors）、全局架构的结构（global architectural structure）、以及构建过程（construction
process）。
3.9 小结
本章在一个分类框架中，提供了一个对基于网络的应用的常见架构风格的调查。当将架
构风格应用于一种作为原型的基于网络的超媒体系统的架构时，将会导致一系列架构属性，
这个分类框架根据这些架构属性，来对每种架构风格进行评估。在下面的表3-6列出了全部
的分类。
下一章使用从这个调查和分类中所获得的洞察力，推导出开发和评估一种架构风格的方
法，用来对改进现代万维网架构的设计加以指导。
第3章 基于网络的架构风格 36
表3-6：评估总结
风格 继承 网 用 效 可 简 可 可 可 可 可 可 可 可
络 户 率 伸 单 进 扩 定 配 重 见 移 靠
性 可 缩 性 化 展 制 置 用 性 植 性
能 觉 性 性 性 性 性 性 性
察
性
能
PF ± + + + + +
UPF PF - ± ++ + + ++ ++ +
RR ++ + +
$ RR + + + +
CS + + +
LS - + + + +
LCS CS+LS - ++ + ++ + +
CSS CS - ++ + + + +
C$SS CSS+$ - + + ++ + + + +
LC$SS LCS+C$SS - ± + +++ ++ ++ + + + +
RS CS + - + + -
RDA CS + - - + -
VM ± + - +
REV CS+VM + - ± + + - + -
COD CS+VM + + + ± + + -
LCODC LC$SS+ - ++ ++ +4+ +±+ ++ + + + ± + +
$SS COD
MA REV+COD + ++ ± ++ + + - +
EBI + -- ± + + + + - -
C2 EBI+LCS - + + ++ + + ++ ± + ±
DO CS+CS - + + + + + - -
BDO DO+LCS - - ++ + + ++ - +
第4章 设计Web架构：问题与洞察力 37
第 4 章 设计 Web 架构：问题与洞察力
本章介绍了万维网架构的需求和一些问题，这些问题是在对万维网的关键通信协议进行
设计和对提议的改进进行评估的过程中遇到的。从对基于网络的超媒体系统的架构风格的调
查和分类过程中获得的洞察力，使我有能力推导出开发一种架构风格的方法，用来对改进现
代万维网架构的设计加以指导。
4.1 万维网应用领域的需求
Berners-Lee[20]写到：“Web的主要目的是旨在成为一种共享的信息空间（a shared
information space），人们和机器都可以通过它来进行沟通。”我们需要的是一种人们用来
保存和构造他们自己的信息的方式，无论信息在性质上是永久的还是短暂的，这样信息对于
他们自己和其他人都是可用的，并且能够引用和构造由其他人保存的信息，而不必每个人都
保持和维护一份本地的副本。
这个系统最初所希望的最终用户是分布在世界各地，通过Internet连接的各个大学和政
府的高能物理研究实验室。他们的机器是各种不同种类的终端、工作站、服务器和超级计算