*-)            221928355      887834546      690209569      140649690      
>:*            707429706      361667628      890981899      628576789      
>.O        22338651       744151297      421884827      680423420      
        761583139      274093669      579566114      968424306      
         762261539      665199139      29749796       589314027      
:-D            813417897      516749674      198678296      492384881      
:))            692507260      933243641      910076492      177113479      
:.-)           706350257      208220064      561827765      973675855      
(-:            460728977      389190842      848053504      746993263      
>;->           2871890        469626441      251807800      158741716      
:^o            861438792      24236048       616330095      273007266      
:-9            959789499      631364945      414035584      939194517      
So, what is the most friendly face?
```
It's quite clear what we need to do: calculate `(lip point**nose point)**(eyes point**forehead point) mod Face_index` for each of the emojis and then send back to the server the one with highest score.
First optimization we can do is trivial, and comes directly from modular arithmetics:
`(a**b) mod n = ((a mod n)**b) mod n`
And of course `pow(a,b,n)` is much faster than `a**b` to calculate.
The real struggle is the second part - how to optimize calculation of `b`.
After a while we came up with an idea, that if certain conditions were met, we could actually use Euler theorem here.
Euler theorem says that if `a` and `n` are `co-prime` then `a**phi(n) mod n = 1`.
This is useful, because `1**x` is always 1.
This would mean, that we could simplify our `b` to `b mod phi(n)`.
For example we want to calculate `7**222 mod 10`:
1. `phi(10) = (2-1)*(5-1) = 4`
2. `7**222 mod 10 = 7**(4*55) * 7**2 mod 10 = (7**4 mod 10)**55 * 7**2 mod 10 = 1**55 * 7**2 mod 10 = 7**2 mod 10`
3. We could also simply notice that `222 mod 4 = 2` and thus `7**222 mod 10 = 7**2 mod 10`
We can apply the same logic here, and re-write the equation:
```
(lip point**nose point) = a
(eyes point**forehead point) = b
Face_index = n
(lip point**nose point)**(eyes point**forehead point) mod Face_index = a**b mod n
a**b mod n = (a mod n)**b mod n
a**b mod n = a**(b mod phi(n)) mod n
a**b mod n = (a mod n)**(b mod phi(n)) mod n = pow(a%n, b%phi(n), n)
a**b mod n = pow(pow(lip point, nose point, Face_index), pow(eyes point, forehead point, phi(Face_index)), mod Face_index)`
```
Keep in mind, this is all true only if `a` and `n` are `co-prime`, but we simply assumned they would be.
Solver written in python is:
```python
import re
from crypto_commons.generic import factor
from crypto_commons.netcat.netcat_commons import nc, receive_until_match, send
from crypto_commons.rsa.rsa_commons import get_fi_repeated_prime
def main():
    s = nc("misc04.grandprix.whitehatvn.com", 1337)
    while True:
        data = receive_until_match(s, "So, what is the most friendly face\?", 5.0)
        print(data)
        modulus = int(re.findall("Face_index: (\d+)", data)[0])
        primes = factor(modulus)[0]
        phi = 1
        for prime in set(primes):
            k = primes.count(prime)
            phi *= get_fi_repeated_prime(prime, k)
        max = (0, "")
        for dataset in re.findall("(.*?)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)", data):
            face, lip, nose, eye, fore = dataset
            a = pow(int(lip), int(nose), modulus)
            b = pow(int(eye), int(fore), phi)
            result = pow(a, b, modulus)
            if result > max[0]:
                max = (result, face)
        print("sending", max)
        send(s, max[1])
        send(s, str(max[0]))
    pass
main()
```
Which gives us: `WhiteHat{^.^_M4th_Math_Chin3se_Rema1nder_The0rem_&_Euler's_ThEorem_M@th_MAth_^/^}`