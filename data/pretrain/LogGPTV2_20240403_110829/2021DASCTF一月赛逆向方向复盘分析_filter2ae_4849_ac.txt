        s = binascii.unhexlify(hex(m)[2:])
        flag += s
    print(flag.decode())
## Enigma
###  主逻辑分析
直接看主函数。
根据各函数的参数初步确定函数功能。
`sub_1E1050`->`printf`  
`sub_1F1ED7`->`system`  
`sub_1E10C0`->`fscanf`  
`sub_1E1170`->`sprintf`
可以分析出程序的大致逻辑。即先打开一个inp文件，相当于我们的输入。读入`input`数据到`byte_237A4C`。之后调用`loc_1E18F0`函数，这里ida未能正确识别为函数，应该是进行了某种特殊处理，之后就将`byte_237A28`中的数据以十六进制格式依次转储到Buffer、enc文件中。
则调用的`loc_1E18F0`函数应该就是关键的加密代码，`byte_237A28`就是加密结果，现在enc文件数据已知，分析出`loc_1E18F0`所进行的加密过程即可得到flag。
###  异常反调试与虚拟机
跟进`encrypt`函数可以发现指令难以识别，而且调用了`SetUnhandledExceptionFilter`函数。
查阅文档[SetUnhandledExceptionFilter](https://docs.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-setunhandledexceptionfilter)。我们可以知道，这个函数使应用程序能够取代进程的每个线程的顶级异常处理程序。
调用此函数后，如果在未调试的进程中发生异常，并且异常进入未处理的异常筛选器，则该筛选器将调用由`lpTopLevelExceptionFilter`参数指定的异常筛选器函数。
我们在ida中`F9`尝试运行，发现会报错。
之后程序断在地址0x1E1901，即`call SetUnhandledExceptionFilter`后。
因此我们可以知道，这里的反调试手段是通过故意设置无法识别的指令来触发异常，使得程序走向由`SetUnhandledExceptionFilter`函数参数设置的异常筛选器函数，从而继续执行。
接下来分析参数设置的异常筛选器函数`sub_1E1630`。
函数整体看起来十分混乱，这时因为ida并没有正确识别函数的参数。根据文档我们可以知道该异常筛选器函数语法类似`UnhandledExceptionFilter`函数，只有一个类型为`LPEXCEPTION_POINTERS`的参数。则我们选择该函数`y`进行`set
type`，并`n`进行重命名。之后可以得到意义明确的伪代码。
可以看出`exception->ContextRecord->Eip`就是我们触发异常的地址。跟进`sub_1E11B0`函数，可以发现就是简单的取异常地址之后的值。跟进有具有参数`excption->ContextRecord`的各个函数，根据文档[GetExceptionInformation
macro](https://docs.microsoft.com/en-us/windows/win32/debug/getexceptioninformation)和[EXCEPTION_POINTERS
structure](https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-exception_pointers)我们可以知道该参数的类型为`PCONTEXT` ，再次`y`进行设置。可以得到意义明确的伪代码。
可以发现不同函数就是对寄存器进行不同的操作。寄存器号由`byte(eip+3)`决定，操作值为`byte(eip+4)`或1、-1（case2和case3）。
可以看出这其实就是一个简单的虚拟机。异常筛选器函数`sub_1E1630`就是dispatcher，每次触发异常时eip+2即为opcode。每一个case对应一个handle。不同handle进行不同的处理。
之后我们回到之前的`encrypt`函数，选取后`c`为代码，发现时不时就有一个0xC7，结合虚拟机逻辑查看汇编分析可知0xC7FF就是用来专门触发异常处理的。
可以选择一个个进行分析后patch。
也可以根据异常和虚拟机的逻辑，写脚本依次得到触发每个异常时执行的指令。（根据`alt+b`搜索异常特征`C7 FF`得到地址范围）
    from idaapi import *
    start_addr = 0x1E1900
    end_addr = 0x1E1A00
    reg_dic = {1:'eax',2:'ebx',3:'ecx',4:'edx',5:'esi'}
    op = {0:'add',1:'add',2:'add',3:'add',4:'and',5:'or',6:'xor',7:'shl',8:'shr'}
    num = 0
    for addr in range(start_addr,end_addr,1):
        data = get_byte(addr)
        if data == 0xC7:
            data = get_byte(addr+1)
            if data == 0xFF:
                # 触发异常
                num += 1
                print('instruction '+str(num) + ':',end='')
                opcode = get_byte(addr+2)
                reg = get_byte(addr+3)
                if opcode == 2:
                    value = 1
                elif opcode == 3:
                    value = -1
                else:
                    value = get_byte(addr+4)
                print('{0} {1},{2}'.format(op[opcode],reg_dic[reg],value))
之后依次找到0xC7处进行patch，多余字节patch为nop，`p`为函数后`F5`得到伪代码。就可以清晰完整的看出加密的过程。
###  加密过程分析
可以看出，先循环生成一组32个数据，之后根据生成数据对`input`进行交换，之后循环左移3位，再与固定数据进行循环异或，就得到了最终的输出。（不要忘了enc中是数据的十六进制形式）
###  exp
据此写逆向脚本即可得到flag。
    output = '938b8f431268f7907a4b6e421301b42120738d68cb19fcf8b26bc4abc89b8d22'
    output = bytes.fromhex(output) # 16进制格式文本还原为数据
    xor_data = list(map(ord,'Bier'))
    # 还原异或操作
    rol_res = []
    rol_res.append(output[0])
    for i in range(1,32,1):
        rol_res.append(xor_data[i%len(xor_data)]^output[i]^rol_res[i-1])
    # 还原移位操作
    swap_res = []
    for i in range(32):
        swap_res.append((rol_res[i]>>3)|((rol_res[(i+31)%32]<<5)&0xff))
    # 还原交换操作
    d = 0
    num = []
    for i in range(32):
        d = (d+17)&0x1f
        num.append(d)
    inp = [0]*32
    for i in range(0,32,2):
        inp[num[i]] = swap_res[num[i+1]]
        inp[num[i+1]] = swap_res[num[i]]
    print(''.join(map(chr,inp)))
    # B0mb3_L0nd0n_m0rg3n_um_v13r_Uhr.
## child_protect
###  Debug Blocker
进入main函数，太短了估计是没有反汇编成功，`__debugbreak()`说明出现`int 3`指令，接下来查看汇编。
可以看到`int 3`指令后直接`retn`，这使得我们不能正确反编译main函数。后面还有大量数据没识别为代码。将其转换为代码。
无法反编译，则不能很快确定程序的主要逻辑，多处出现int
3指令，显然不能直接patch掉那么简单，应该有相应的异常处理。那么接下来就要确定程序是如何处理的这个int
3异常，从而将main函数反编译，得到程序主逻辑。
既然不在main函数里，那应该就在main之前的运行时环境初始化部分。从start开始跟进`_tmainCRTStartup()`函数。
注意到这个`cinit()`函数，应该就是c运行时环境的初始化。
跟进可以发现`initterm_e`函数，查看依次执行的函数。
依次跟进可疑函数。首先查看`sub_411785`函数。
调用了一个`IsProcessorFeaturePresent(0xA)`函数，并将返回值保存。查看交叉引用，这个返回值似乎没什么用。
再查看`sub_4118D9`函数。
首先调用`CreateMutexA`函数创建一个名为`Global\AUUZZ`的互斥体对象。之后调用`GetLastError`函数，由于此时未发生错误，返回值为0，进入else语句，创建了一个子进程并保存子进程的句柄和id。则当子进程再次创建互斥体变量时，由于父进程已经创建并存在同名互斥体对象，所以LastError值为B7（ERROR_ALREADY_EXISTS），从而将设置变量为1标志这时运行的是子进程。
则这个函数之后存在两个进程。之后分析`sub_4110E6`函数。
如果是子进程，则什么都不执行。最终去执行main函数。
若是父进程，则调用`DebugActiveProcess`函数使父进程作为调试器附加到子进程并调试它。
之后调用`sub_411415`函数。
其实就是调试循环，父进程调试器通过`WaitForDebugEvent`函数获取调试事件，通过`ContinueDebugEvent`继续被调试进程的执行。
dwDebugEventCode描述了调试事件的类型，共有9类调试事件：
value | meaning  
---|---  
CREATE_PROCESS_DEBUG_EVENT | 创建进程之后发送此类调试事件，这是调试器收到的第一个调试事件。  
CREATE_THREAD_DEBUG_EVENT | 创建一个线程之后发送此类调试事件。  
EXCEPTION_DEBUG_EVENT | 发生异常时发送此类调试事件。  
EXIT_PROCESS_DEBUG_EVENT | 进程结束后发送此类调试事件。  
EXIT_THREAD_DEBUG_EVENT | 一个线程结束后发送此类调试事件。  
LOAD_DLL_DEBUG_EVENT | 装载一个DLL模块之后发送此类调试事件。  
OUTPUT_DEBUG_STRING_EVENT | 被调试进程调用OutputDebugString之类的函数时发送此类调试事件。  
RIP_EVENT | 发生系统调试错误时发送此类调试事件。  
UNLOAD_DLL_DEBUG_EVENT | 卸载一个DLL模块之后发送此类调试事件。  
其中值为3的是CREATE_PROCESS_DEBUG_EVENT，即调试器收到的第一个调试事件。值为5的是EXIT_PROCESS_DEBUG_EVENT，代表子进程结束，则父进程return后调用`ExitProcess`函数结束本进程。值为1的是EXCEPTION_DEBUG_EVENT，即发生异常时的调试事件，也就是之前main函数中遇到的int