• Set G = ⟨𝐺⟩
• Output pp := (G, 𝐺, 𝐹, 𝛾, 𝛾𝑞, ˜𝑞)
KeyGen(G, 𝐺, 𝐹, 𝛾, 𝛾𝑞):
• Sample 𝑘 ← Z ˜𝑞
• Compute 𝐻 = 𝐺𝑘
• Return 𝑝𝑘 = 𝐻 and 𝑠𝑘 = 𝑘
Encrypt(𝑝𝑘, 𝑚 ∈ Z𝑞):
• Sample 𝑟 ← Z ˜𝑞
• Compute 𝐶1 = 𝐺𝑟 and 𝐶2 = 𝜓𝑞(𝐻𝑟) · 𝐹𝑚
• Return 𝐶 = (𝐶1, 𝐶2)
Decrypt(𝑠𝑘, (𝐶1, 𝐶2)):
• Return SolveDL(𝐶2 · 𝜓𝑞(𝐶𝑘
1)−1)
Figure 5: Modified fast variant of CL
2 = (𝑍 ★)𝑘′ · 𝐹𝑚𝑏 .
𝑞 with 𝑟′ ← Z ˜𝑞. The challenge ciphertext is made
1 = 𝜑𝑞(𝑍 ★) and 𝐶★
Hyb0: This is the original IND-CPA game.
Hyb1: The public key is computed as follows: first sample 𝑘′ ← Z ˜𝑞
and set 𝐻 = 𝜑𝑞(𝛾)𝑘′.
Hyb2: Let 𝑍 ★ = 𝛾𝑟′
up as follows: 𝐶★
Hyb3: We change the definition of 𝑍 ★: 𝑍 ★ = 𝛾𝑟′ with 𝑟′ ← Z𝑞 ˜𝑞.
We now argue the indistinguishability of the hybrids.
Hyb0 ≡ Hyb1: In Hyb1, 𝐻 = 𝜑𝑞(𝛾)𝑘′
= 𝜑𝑞(𝛾)𝑘𝑞 = 𝐺𝑘 for some
𝑘 ∈ Z𝑠 since gcd(𝑠, 𝑞) = 1. Furthermore, 𝑘 and 𝑘′ follow the same
distribution in Z𝑠. Therefore, the public key has the right form.
Note that the simulator does not know the “correct” secret key 𝑘.
Hyb1 ≡ Hyb2:
= 𝜑𝑞(𝛾)𝑞𝑟 = 𝐺𝑟 for a 𝑟 that
In Hyb2, 𝐶★
satisfies 𝑟′ = 𝑞𝑟 mod 𝑠. Again, it exists since gcd(𝑞, 𝑠) = 1. On the
other hand, 𝐶★
𝑞 ) = 𝜑𝑞(𝛾)𝑟′
· 𝐹𝑚𝑏 .
1 = 𝜑𝑞(𝛾𝑟′
2 = 𝛾𝑟′𝑘′
= 𝛾𝑘′𝑟′
But 𝜓𝑞(𝐻𝑟) = 𝜓𝑞(𝜑𝑞(𝛾)𝑘′)𝑟 = 𝜓𝑞(𝜑𝑞(𝛾))𝑘′𝑟 .
Since 𝜓𝑞(𝜑𝑞(𝑎)) = 𝑎𝑞 for all 𝑎 ∈ 𝐶𝑙(Δ𝐾), this is equal to 𝛾𝑘′𝑟𝑞 =
𝛾𝑘′𝑟𝑞
. This means that 𝐶★ = (𝐺𝑟 ,𝜓𝑞(𝐻𝑟) · 𝐹𝑚𝑏 is a genuine
𝑞
ciphertext of 𝑚𝑏 for the public key 𝐻.
Hyb2 ≈𝑐 Hyb3: The indistinguishability follows from reduction
against the HSM𝐶𝐿 assumption.
We now prove that 𝐶★ perfectly hides 𝑏 in Hyb3. From the challenge
1 = 𝜑𝑞(𝛾)𝑟′ where 𝑟′ ← Z𝑞 ˜𝑞. As 𝜑𝑞(𝛾) is of
ciphertext one gets 𝐶★
𝑞
𝑞
order 𝑠, from an information theoretical point of view, the only
information known from the adversary on 𝑟′ is modulo 𝑠. But 𝑟′ is
closed to uniform modulo 𝑞𝑠, and gcd(𝑞, 𝑠) = 1, so 𝑟′ modulo 𝑞 is
still uniformly distributed for the adversary.
·𝐹𝑚𝑏+𝑟′𝑘′.
As 𝑟′𝑘′ remains uniform modulo 𝑞 it acts as a one-time pad on 𝑚𝑏
(note that 𝑘′ ≠ 0 with overwhelming probability) , which means
that the challenge ciphertext does not reveal any information on
𝑚𝑏.
2 = (𝛾𝑟′)𝑘′·𝐹𝑚𝑏 = (𝛾𝑞·𝐹)𝑟′𝑘′·𝐹𝑚𝑏 = 𝛾𝑟′𝑘′
Eventually, 𝐶★
𝑞
□
D SECURITY ANALYSIS OF CCA TIMED
COMMITMENT
In this section we present the formal proof for the security of our
CCA Timed commitment construction Figure 3.
⌊log ˜𝑞⌋ +1). Compute 𝑟 :=𝛼
Proof of Theorem 5.6. The proof for CCA security proceeds
by defining a series of hybrid distributions and then arguing about
the indistinguishability of the neighbouring experiments.
Hyb0: This is identical to the original CCA experiment, except that
we fix the bit 𝑏 = 0.
Hyb1: In this hybrid we compute the NIZK proof for the challenge
commitment using the simulator (Sim0, Sim1).
Hyb2: In this hybrid we compute, for all 𝑖 ∈ [𝛼] (where 𝛼 :=
⌊log ˜𝑞⌋ + 1), (𝑐𝑖,0, 𝑐𝑖,1) and ( ˜𝑐𝑖,0, ˜𝑐𝑖,1) as encryptions of 0 in the chal-
lenge commitment. I.e., we fix 𝑟𝑖 = 0, regardless on the value of
𝑟.
˜𝑘 for some uniformly at
Hyb3: In this hybrid we sample ˜𝐾 as a ˜𝐺
random integer ˜𝑘 from Z ˜𝑞.
Hyb4: Here we change the way we simulate the oracle O. On input
a valid commitment 𝑐, instead of using Solve(𝑍) to solve the puzzle,
use ˜𝑘 to decrypt ( ˜𝑐𝑖,0, ˜𝑐𝑖,1) to obtain 𝑟𝑖, for 𝑖 ∈ [𝛼] (where 𝛼 :=
𝑖=1 2𝑖 ·𝑟𝑖. Now recover 𝑚 from (𝑍1, 𝑍2)
by computing SolveDL(𝑍2 · 𝜓𝑞(𝐻𝑟)−1).
Hyb5: We switch 𝑍 in the challenge ciphertext from PGen(pp, 𝑚0)
to PGen(pp, 𝑚1).
Hyb6 . . . Hyb9: We revert the changes made in hybrids Hyb4 . . .
Hyb1.
Observe that Hyb9 is identical to the CCA experiment, except with
the bit 𝑏 fixed to 𝑏 = 1. To conclude the proof, we now argue on
the indistinguishability of the hybrid executions.
Hyb0 ≈𝑐 Hyb1: This follows from the zero-knowledge property of
the NIZK proofs.
Hyb1 ≈𝑐 Hyb2: The indistinguishability follows from a standard
hybrid argument (over each 𝑖 ∈ [2 · 𝛼], where 𝛼 := ⌊log ˜𝑞⌋ + 1)
and a reduction against the DDH assumption (cf. Theorem B.1
and Theorem B.2).
Hyb2 ≡ Hyb3: The two hybrids define two identical distributions,
so the change here is only syntactical.
Hyb3 ≈𝑐 Hyb4: The only difference between the two hybrids is in
the simulation of the oracle O, therefore the two hybrids differ
only in the case that the output of O differs on some input query
of the adversary. Observe that this can happen only if the value 𝑟
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2679extracted in Hyb4 is not the randomness used in generating (𝑍1, 𝑍2),
i.e., 𝐺𝑟 ≠ 𝑍1.
By the simulation-soundness of the NIZK, for 𝛼 := ⌊log ˜𝑞⌋ + 1,
(cid:33)
(cid:32)
=
𝑖=1
𝐺, 𝐾,
𝐺, 𝐾,
𝑐2𝑖
𝑖,0,
𝛼
we have that
𝑖=1
𝐺𝑠𝑖 ·2−𝜌𝑖 ·2𝑖
𝛼
(cid:32)
𝛼
(cid:16)𝐺, 𝐾, 𝐺𝛼
(cid:16)𝐺, 𝐾, 𝐺𝑠′
, 𝐾𝑠′ · 𝐺𝛼
with 𝑠′ =𝛼
𝐺𝛼
𝑖=1 𝑠𝑖2−𝜌𝑖 ·2𝑖
𝑖=1
=
=
𝐾𝑠𝑖 ·2−𝜌𝑖 ·2𝑖 · 𝐺𝑟𝑖 ·2𝑖 · 𝑍−1
1
,
𝑖,1 · 𝑍−1
𝑐2𝑖
𝛼
1
𝑖=1 𝑠𝑖2−𝜌𝑖 ·2𝑖 · 𝐺𝛼
, 𝐾𝛼
(cid:17) ∈ L2
𝑖=1 𝑟𝑖 ·2𝑖 · 𝑍−1
1
𝑖=1
𝑖=1 𝑟𝑖 ·2𝑖 · 𝑍−1
1
(cid:33)
(cid:17)
𝑖=1 𝑠𝑖2−𝜌𝑖 · 2𝑖, which in particular means
𝑖=1 𝑟𝑖 ·2𝑖
= 𝑍1
and therefore (𝑟1, . . . , 𝑟𝛼) is the bit decomposition of the discrete
logarithm of 𝑍1 in base 𝐺. Furthermore, we have that ( ˜𝑐𝑖,0, ˜𝑐𝑖,1)
encrypts the same bit as (𝑐𝑖,0, 𝑐𝑖,1), for all 𝑖 ∈ [𝛼]. It follows that de-
crypting (𝑐𝑖,0, 𝑐𝑖,1) yields a valid bit decomposition of 𝑟, the discrete
logarithm of 𝑍1 in base 𝐺, except with negligible probability.
Hyb4 ≈𝑐 Hyb5: The indistinguishability follows from a reduction
to the hiding property of the time-lock puzzle. The only non-trivial
aspect of the reduction is the running time needed to answer the
queries of the adversary to the oracle O. Note however that the
running time of the simulated oracle is independent of T, so the
running time of the reduction is only a polynomial (in 𝜆) factor
slower than that of the adversary.
Indistinguishability of the hybrids Hyb5 . . . Hyb9 follows along the
same lines. This concludes the proof for CCA security.
The proof for verifiability follows from the soundness of the
NIZK proof system. Notice that the winning condition of the verifi-
ability property requires TVfy(crs, 𝑐, 𝜋) = 1 and 𝑐 ∉ TCom(crs, 𝑚).
The latter condition means that the commitments is not well-formed
according to TCom. Therefore, it must be the case that Vfy(crs, stmt,
𝜋) = 1 and one of the following holds:
(𝐺, 𝐾) ∉ L1
(cid:32)
𝛼
𝑖=1
𝛼
𝑖=1
𝐺, 𝐾,
𝑐2𝑖
𝑖,0,
𝑖,1 · 𝑍−1
𝑐2𝑖
1
∉ L2
(cid:33)
(𝐺, 𝐾, ˜𝐺, ˜𝐾, {𝑐𝑖,0, 𝑐𝑖,1, ˜𝑐𝑖,0, ˜𝑐𝑖,1}𝑖∈[𝛼]) ∉ L3
where 𝛼 := ⌊log ˜𝑞⌋+1. The above event immediately contradicts the
soundness of at least one of the NIZK proof systems that we use for
the languages. We can therefore conclude that the probability with
which the above event occurs is at most negligible in the security
parameter. This concludes the proof for verifiability.
□
E EFFICIENT NIZK PROTOCOLS
Let 𝛼 := ⌊log ˜𝑞⌋ + 1. We consider the statement
stmt = (𝑍1, 𝑍2, 𝐺, 𝐾, ˜𝐺, ˜𝐾, {𝑐𝑖,0, 𝑐𝑖,1, ˜𝑐𝑖,0, ˜𝑐𝑖,1}𝑖∈[𝛼])
as defined in Section 5. For simplicity we split the statement that
we want to prove in the following languages:
or
or
• Language L1 contains all statements stmt1 := (𝐺, 𝐾) such that
𝐾 is generated by 𝐺, defined as
(cid:110)(𝐺, 𝐾)(cid:12)(cid:12)(cid:12) ∃ 𝑘, 𝜌 s.t. 𝐾 = 𝐺𝑘·2−𝜌(cid:111) .
L1 :=
• Language L2 contains statements