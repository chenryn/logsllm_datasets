存储到“常量池”里。常量池是一个由数组组成的表，类型为 cp_info constant_pool[]，用来存储程序中使
用的各种常量，包括 Class/String/Integer 等各种基本 Java 数据类型，详情参见 The Java Virtual Machine 
Specification 4.4 节。 
并非只有 JVM 如此处理常量。像 MIPS、ARM 以及其他的 RISC 型的 CPU 都不能在 32 位的 opcode
中封装 32 位常量，因此包括 MIPS 和 ARM 在内的 RISC 类型的 CPU 都得分步骤构建这些数值，或者将其
保存在数据段中。有关范例可以参考本书的 28.3 节或者 29.1 节。 
在 MIPS 的概念中也有传统意义上的常量池，不过它的名字则叫做“数据缓冲池（文字池）/literal pool”。
这种文字池与可执行程序中的“.lit4/.lit8”数据段相对应。数据段.lit4 用于保存 32 位的单精度浮点常数，
而.lit8 则用于保存 64 位的双精度浮点常数。 
我们来试试其他类型的数据。 
布尔型 Boolean: 
public class ret 
{ 
        public static boolean main(String[] args) 
        { 
                return true; 
        } 
}   
  public static boolean main(java.lang.String[]); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=1, locals=1, args_size=1 
         0: iconst_1 
         1: ireturn 
当返回值为 Ture 时，JVM bytecode 层面的返回值就是整数 1。像 C/C++一样，Java 程序同样会把布尔
型数值保存在 32 位的栈中。虽然说“逻辑真”和“整数 1”的数值完全相同，但是我们不可能把布尔值当
作整数值使用、也不可能把整数值当作布尔值使用。既定的类文件事先声明了数值的数据类型，而且这些
数据类型会在程序运行时被实时检查。  
16 位的短整数型也是一样： 
public class ret 
{ 
        public static short main(String[] args) 
        { 
                return 1234; 
        } 
}   
  public static short main(java.lang.String[]); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=1, locals=1, args_size=1 
         0: sipush         1234 
         3: ireturn 
还有字符型： 
public class ret 
{ 
        public static char main(String[] args) 
        { 
                return 'A'; 
        } 
}   
  public static char main(java.lang.String[]); 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
584 
逆向工程权威指南（下册） 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=1, locals=1, args_size=1 
         0: bipush          65 
         2: ireturn 
指令 bipush 的意思是 push byte（保存字节）。Java 环境中的 car 型数据是 16 位的 UTF-16 字符，同短
整数型数据一样同属于 16 位 short 型短数据。但是大写字母 A 的 ASCII 码是十进制数 65，而且我们可以
用指令将一个字节的数压入栈中。 
下面我们来看看 byte（字节）： 
public class retc 
{ 
        public static byte main(String[] args) 
        { 
                return 123; 
        } 
}   
  public static byte main(java.lang.String[]); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=1, locals=1, args_size=1 
         0: bipush         123 
         2: ireturn 
也许读者有些疑问：既然这些数据在运行的时候都是当作 32 位整型数据处理的，那么为什么还要不厌
其烦地把它们声明为 16 位的数据类型呢？另外，字符型 char 数据与 short 短整数型的数值也是相同的，为什
么还要刻意地把它声明为字符型 char 数据呢？ 
答案也很简单，是为了增加数据类型的控制以及增加源代码的可读性。Char 字符型的限定符虽然在数
值上与 short 短型整数相同，但是只要一看到 char 字符型的限定，我们立刻会联想到它是一个 UTF16
的字符集，而不会把它当作其他类型的方式去理解。在遇到被限定符 short 修饰的数据类型时，我们自
然而然地就会把它理解为 16 位数据。同理，应当使用 boolean 声明的数据就不要把它声明为 C 语言风
格的 int 型数据。 
我们还可以通过限定符 long 声明 JAVA 的 64 位的整数型数据： 
public class ret3 
{ 
        public static long main(String[] args) 
        { 
                return 1234567890123456789L; 
        } 
}  
指令清单 54.4  常量池 
... 
   #2 = Long 1234567890123456789l 
... 
  public static long main(java.lang.String[]); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=2, locals=1, args_size=1 
         0: ldc2_w          #2                     // long 1234567890123456789l 
         3: lreturn 
上述 64 位常量同样位于程序的常量池部分。它被 ldc2_w 指令提取之后，再由 lreturn（long return）指
令回传给调用方函数。ldc2_w 指令也能够从常量池里提取双精度浮点数（同样是 64 位常量）。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 54 章  Java 
585 
public class ret 
{ 
        public static double main(String[] args) 
        { 
                return 123.456d; 
        } 
}  
指令清单 54.5  常量池 
... 
   #2 = Double                123.456d 
... 
  public static double main(java.lang.String[]); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=2, locals=1, args_size=1 
        0: ldc2_w          #2  
// double 123.456d 
        3: dreturn 
这里的指令 dreturn 代表 return double，意思是返回双精度常数。 
最后，我们举一个单精度浮点数的例子。单精度浮点常数的后面有一个限定符 f，而双精度数的限定
符则是字母 d。字母 f 是 float 的缩写，而 d 则是 double 的缩写。 
public class ret 
{ 
        public static float main(String[] args) 
        { 
                return 123.456f; 
        } 
}  
指令清单 54.6  常量池 
... 
   #2 = Float             
123.456f 
... 
  public static float main(java.lang.String[]); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=1, locals=1, args_size=1 
         0: ldc             #2                      // float 123.456f 
         2: freturn 
同为从常量池提取 32 位数据的指令，“提取整数”和“提取浮点数”的指令都是 ldc。而指令 freturn
代表的是 return float，声明了返回值为单精度浮点数。 
最后，我们来看看如果什么数也不返回时情况会是怎么样的，也就是 return 指令后不带任何参数。 
public class ret 
{ 
        public static void main(String[] args) 
        { 
                return; 
        } 
}   
  public static void main(java.lang.String[]); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=0, locals=1, args_size=1 
         0: return 
没有返回值的函数，最后只有一条 return 指令。它不返回任何值，只是把程序控制流递交给调用方函
异步社区会员 dearfuture(15918834820) 专享 尊重版权
586 
逆向工程权威指南（下册） 
数。根据函数最后一条返回值处理指令，我们就能比较容易地推导出函数返回值的数据类型。 
54.3  简单的计算函数 
我们继续来看看简单的计算函数： 
public class calc 
{ 
        public static int half(int a) 
        { 
                return a/2; 
        } 
}  
这里我们看到的是一个除以 2 的简单计算函数，用到的指令是 iconst_2。我们来分析一下这几条
指令： 
  public static int half(int); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=2, locals=1, args_size=1 
         0: iload_0 
         1: iconst_2 
         2: idiv 
         3: ireturn 
首先，iload_0 指令是提取外来的第 0 个函数参数，再把它压入栈中，而 iconst_2 指令则是将数值 2 压入
栈中。这两个指令执行完后，函数栈的存储内容将如下所示：  
      +---+ 
TOS ->| 2 | 
      +---+ 
      | a | 
      +---+ 
TOS 是“Top Of Stack”的缩写，即栈顶。 
idiv 指令则是从栈顶取出这两个值并进行除非运算，然后把返回的结果保存在栈顶。 
      +--------+ 
TOS ->| result | 
      +--------+ 
ireturn 指令则会提取栈顶的数据、把它作为返回值回传给调用方函数。 
下面我们来看看双精度的除法的运算指令： 
public class calc 
{ 
        public static double half_double(double a) 
        { 
                return a/2.0; 
        } 
}  
指令清单 54.7  常量池 
... 
   #2 = Double               2.0d 
... 
  public static double half_double(double); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=4, locals=2, args_size=1 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 54 章  Java 
587 
         0: dload_0 
         1: ldc2_w         #2  
// double 2.0d 
         4: ddiv 
         5: dreturn 
双精度浮点数的运算指令和单精度浮点数的指令十分相似。在提取常量时，它使用的指令时 ldc2_w。
此外，所有的三条运算指令（dload_0、ddiv 以及 dreturn）都带有前缀 d，这个限定符表明操作数属于双精
度浮点数 double。 
下面我们来看看含有两个参数的函数情况： 
public class calc 
{ 
        public static int sum(int a, int b) 
        { 
                return a+b; 
        } 
}   
  public static int sum(int, int); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=2, locals=2, args_size=2 
         0: iload_0 
         1: iload_1 
         2: iadd 
         3: ireturn 
指令 iload_0 用于提取第一个函数参数 a，而 iload_1 则用于导入第二个函数参数 b。在执行完这两条指
令之后，栈内数据如下图所示：  
      +---+ 
TOS ->| b | 
      +---+ 
      | a | 
      +---+ 
而指令 iadd 的含义则是将两个参数中的数值相加，并将结果保存在栈顶 TOS 中。 
      +--------+ 
TOS ->| result | 
      +--------+ 
如果我们将以上函数的两个参数的数据类型更换成 long 类型的话： 
        public static long lsum(long a, long b) 
        { 
                return a+b; 
        } 
我们看到的字节码则会变为： 
public static long lsum(long, long); 
  flags: ACC_PUBLIC, ACC_STATIC 
  Code: 
    stack=4, locals=4, args_size=2 
       0: lload_0 
       1: lload_2 
       2: ladd 
       3: lreturn 
第二条 lload 指令会提取外来的第二个参数。指令后缀直接从 0 递增到 2，是因为 long 型数据是 64 位
的数据，它正好占有两个 32 位数据的存储位置（即后文介绍的“参数槽”）。 
下面我们来看看一个更加复杂的例子： 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
588 
逆向工程权威指南（下册） 
public class calc 
{ 
        public static int mult_add(int a, int b, int c) 
        { 
                return a*b+c; 
        } 
}   
  public static int mult_add(int, int, int); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=2, locals=3, args_size=3 
         0: iload_0 
         1: iload_1 
         2: imul 
         3: iload_2 
         4: iadd 
         5: ireturn 
第一步的运算是乘法，乘积的结果存放在栈顶 TOS 中。 
      +---------+ 
TOS ->| product | 
      +---------+ 
指令 iload_2 将第三个参数压入栈中参加运算： 
      +---------+ 
TOS ->|     c     | 
      +---------+ 
      | product | 
      +---------+ 
现在就能采用指令 iadd 进行加法求和运算了。 
54.4  JVM 的内存模型 
前面提到过，在 x86 和其他底层运行平台上，栈通常用于传递参数的参数、存储局部变量。而我们这
里要提到的 JVM 略有不同。 
JVM 的内存模型可分为： 
 局部变量数组（Local Variable Array，LVA）。它用来存储外来的函数参数和局部变量。iload_0 一类指
令的作用是从 LVA 中提取数值，而 istore 则可以将数值保存在 LVA 里。函数会从第 0 个参数槽（不
涉及 this 指针的函数）或第 1 个参数槽（涉及传递 this 指针的函数）依次读取各项外来参数，然
后分配局部变量的存储空间。 
每个参数槽（args slot）都是 32 位存储单元，因此，数据类型为 long（长）或者 double（双）的
参数数据都会占用两个参数槽。 
 操作数栈即俗称的（java）“栈”，用于存储计算操作数，或者向被调用方函数传递参数。Java 程
序不能直接运行于 x86 那样的底层硬件环境，因此它必须通过明确的入栈、出栈指令才能访问自
己的栈，不能像汇编指令那样直接对栈寻址。 
 堆。堆主要用于存储对象和数组。 
以上 3 种内存模型相互独立、互相隔离。 
54.5  简单的函数调用 
Math.random()函数可以产生从 0.0～1.0 之间的任意（伪）随机数。因此，如欲生成 0.0～0.5 之间的随
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 54 章  Java 