2015 IEEE Symposium on Security and Privacy, pages 640–656. IEEE,
2015.
[79] Tianwei Zhang, Yinqian Zhang, and Ruby B. Lee. Cloudradar: A real-
time side-channel attack detection system in clouds. In RAID, 2016.
APPENDIX A
SCRIPT FOR CONFIGURING CPU FREQUENCY
#!/bin/bash
if [ $# -ne 1 ] ; then
echo "Incorrect number of arguments" >&2
echo "Usage $0 " >&2
echo "Example $0 1.6GHz" >&2
exit
fi
sudo cpupower -c all frequency-set -u $1
sudo cpupower -c all frequency-set -d $1
APPENDIX B
EXAMPLE FAULT FOR RSA-CRT
The following 2048-bit RSA key was taken from the Intel
example code:
n = 0xBBF82F090682CE9C2338AC2B9DA871F7368D07E
ED41043A440D6B6F07454F51FB8DFBAAF035C02AB61EA4
8CEEB6FCD4876ED520D60E1EC4619719D8A5B8B807FAFB
8E0A3DFC737723EE6B4B7D93A2584EE6A649D060953748
834B2454598394EE0AAB12D7B61A51F527A9A41F6C1687
FE2537298CA2A8F5946F8E5FD091DBDCB
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:04:35 UTC from IEEE Xplore.  Restrictions apply. 
1480
e = 0x11
d = 0xA5DAFC5341FAF289C4B988DB30C1CDF83F31251
E0668B42784813801579641B29410B3C7998D6BC465745
E5C392669D6870DA2C082A939E37FDCB82EC93EDAC97FF
3AD5950ACCFBC111C76F1A9529444E56AAF68C56C092CD
38DC3BEF5D20A939926ED4F74A13EDDFBE1A1CECC4894A
F9428C2B7B8883FE4463A4BC85B1CB3C1
The following ciphertext x decrypts to y = xd
(mod n):
x = 0x1253E04DC0A5397BB44A7AB87E9BF2A039A33D1
E996FC82A94CCD30074C95DF763722017069E5268DA5D1
C0B4F872CF653C11DF82314A67968DFEAE28DEF04BB6D8
4B1C31D654A1970E5783BD6EB96A024C2CA2F4A90FE9F2
EF5C9C140E5BB48DA9536AD8700C84FC9130ADEA74E558
D51A74DDF85D8B50DE96838D6063E0955
y = 0xEB7A19ACE9E3006350E329504B45E2CA82310B2
6DCD87D5C68F1EEA8F55267C31B2E8BB4251F84D7E0B2C
04626F5AFF93EDCFB25C9C2B3FF8AE10E839A2DDB4CDCF
E4FF47728B4A1B7C1362BAAD29AB48D2869D5024121435
811591BE392F982FB3E87D095AEB40448DB972F3AC14F7
BC275195281CE32D2F1B76D4D353E2D
Injecting a fault during the ﬁrst half of the RSA-CRT
computation on the i3-7100U-A at 1 GHz with -225 mV un-
dervolting, the following faulty y(cid:3) was obtained in one of our
experiments:
y(cid:3) = 0xAA105EAFB6BDD9E5A15443729670B70F0428891
03E023428F37B1CEFFAECC91292772652E2016AA5955DF
DA6FD5B685AE062A32DEA9C9E99F516370BE2ED4EF48A3
C3513E4026E5DE3647267A83C9C245A72EA9F4D8C2B373
A8CE70047C922A108807197A6BC15A1DF31E06FCD5521A
A00ECC0B3A2A5BCDDE5A8B7B5AAD3015F
FURTHER EXAMPLES FOR AES-NI AESENC FAULTS
APPENDIX C
[Enclave] plaintext: 4C96DD4E44B4278E6F49FCFC8FCFF5C9
[Enclave] round key: BE7ED6DB9171EBBF9EA51569425D6DDE
[Enclave] ciphertext1: 0D42753C23026D11884385F373EAC66C
[Enclave] ciphertext2: 0D40753C23026D11884385F373EAC66C
[Enclave] plaintext: 2A89F789FAE690774FB2FC04DC8EB7BE
[Enclave] round key: E420AFB5B6ECE976B7A55812705DC2A7
[Enclave] ciphertext1: A2A556F8BBE848CA125E110507DC2E0E
[Enclave] ciphertext2: A2A756F8BBE848CA125E110507DC2E0E
[Enclave] plaintext: D15DBCAA47A8D62B281FFCF9CEF49F5D
[Enclave] round key: FF27B41E3A0F2D9215F4AF61F394C3E8
[Enclave] ciphertext1: 2203E7B64DEE0F3133FBE61E451F43FD
[Enclave] ciphertext2: 2201E7B64DEE0F3133FBE61E451F43FD
[Enclave] plaintext: A67DBE59F885B1AD4F20FE212A2F1767
[Enclave] round key: A4A28B5577F4D771C19B20A90B0CFA98
[Enclave] ciphertext1: 70E2C1040C009C78D64952B4F5B2777A
[Enclave] ciphertext2: 70E0C1040C009C78D64952B4F5B2777A
[Enclave] plaintext: 7815CBC04D8FB2A3B464946A9E9B5596
[Enclave] round key: 596FA60CC6496FD3E9E2B41DF701BA3D
[Enclave] ciphertext1: 19C386B99889F93DC16C0D8E3FE3804A
[Enclave] ciphertext2: 1DC386B99889F93DC16C0D8E3FE3804A
APPENDIX D
RUNNING DFA AGAINST AES-NI
Based on the fault described in Section IV-C, the input ﬁle
fault.txt to the DFA implementation from https://github.
com/Daeinar/dfa-aes should contain the following line:
BDFADCE3333976AD53BB1D718DFC4D5A DE49E9284A625
F72DB87B4A559E814C4
This fault was obtained on the i7-8650U-A with -195 mV
undervolting at 1.9 GHz.
We ran the DFA implementation on four cores, knowing
that the fault is in byte one as follows:
./dfa 4 1 fault.txt
This yields 595 key candidates for this particular example,
including the correct secret key value 0x000102030405060
708090a0b0c0d0e0f.
APPENDIX E
EXAMPLES OF EGETKEY FAULTS
All samples in this appendix were collected on the i3-
7100U-C running at 2 GHz with -134 mV of undervolting.
KEY_ID
= 1966dd54d49f568111ae77074bf14522
860942817065d0cebc7370bd9e5d9549
KEY_OK
= 9ed9a757b4bfe29e90833f4b40df4fb7
KEY_FAULT = 745a2d0054b0f7e2542c1bcd502f7ad5
KEY_ID
= 728210dc53f1f22b24e79be5fc375f42
421f9dcb67cb6bac29a7caf9aad94cb6
KEY_OK
= 6049723afc45f7eb1728cd7eb1b7ea66
KEY_FAULT = 43e1ed22d58729db1e4def53a882a3f9
The following correct/faulty values were obtained for a ﬁxed
key ID (a47171...). The ﬁrst faulty key (760e5d...) was
observed numerous times over different runs, while the second
faulty value (37535d...) only occured in one experiment.
KEY_ID
= a4717110f732e75fa4f021ae3fbb6da8
bbb55e1a8b38dc74e4554749b7ad141f
KEY_OK
= 11fea22c14125fd11de205ca3df643be
KEY_FAULT = 760e5d0a50d4ce4a6b5859f58c42b62c
KEY_ID
= a4717110f732e75fa4f021ae3fbb6da8
bbb55e1a8b38dc74e4554749b7ad141f
KEY_OK
= 11fea22c14125fd11de205ca3df643be
KEY_FAULT = 37535d4ff210de92917cc931a1fe7c08
APPENDIX F
EXAMPLES OF EREPORT FAULTS
All samples in this appendix were collected on the i3-
7100U-C running at 2 GHz with -134 mV of undervolting.
=== Local attestation REPORT: ’REPORT_OK’ ===
CPU_SVN:
MISC_SEL:
MRENCLAVE:
MRSIGNER:
0x0809ffffff0200000000000000000000
0x0
0x144833bab7d6d1a98154da987f2634b1
682311384613dc08d7334e53291eb524
0xf088eb845e3f5fd691e807942a423dc6
5f421c35d79d5a60c019367a72e38170
PROD_ID/SVN: 0x0/0x0
DATA:
0x41414141414141414141414141414141
41414141414141414141414141414141
41414141414141414141414141414141
41414141414141414141414141414141
0xe754cdfebe332605944c1813fa2416ed
00000000000000000000000000000000
0x5ab280f46073878588ce8e537888caaa
KEY_ID:
MAC:
=== Local attestation REPORT: ’REPORT_FAULT’ ===
CPU_SVN:
MISC_SEL:
MRENCLAVE:
MRSIGNER:
0x0809ffffff0200000000000000000000
0x0
0x144833bab7d6d1a98154da987f2634b1
682311384613dc08d7334e53291eb524
0xf088eb845e3f5fd691e807942a423dc6
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:04:35 UTC from IEEE Xplore.  Restrictions apply. 
1481
PROD_ID/SVN: 0x0/0x0
DATA:
KEY_ID:
MAC:
5f421c35d79d5a60c019367a72e38170
0x41414141414141414141414141414141
41414141414141414141414141414141
41414141414141414141414141414141
41414141414141414141414141414141
0xe754cdfebe332605944c1813fa2416ed
00000000000000000000000000000000
0xb58acd215557ed3bddb7f648173d8bde
REFERENCE LAUNCH ENCLAVE IMPLEMENTATION
APPENDIX G
In this appendix, we provide the full C source code and
compiled assembly for the minimalist launch enclave applica-
tion scenario presented in Section V-A. We loosely based our
implementation on the open-source reference launch enclave
code (psw/ae/ref_le) provided by Intel as part of its SGX
SDK [35]. Our custom launch enclave enforces a simple
launch control policy by only returning valid launch tokens for
known enclave authors. Speciﬁcally, the enclave maintains a
global ﬁxed-length array of known enclave authors (identiﬁed
by the respective MRSIGNER values) plus whether or not they
are allowed access to the long-term platform provisioning key.
After the global white list has been initialized to all zeroes,
our implementation should never return 1.
/* Minimal example implementation based on  */
typedef struct _ref_le_white_list_entry_t
{
sgx_measurement_t
uint8_t
mr_signer;
provision_key;
} ref_le_white_list_entry_t;
#define REF_LE_WL_SIZE
0x8D1EE
ref_le_white_list_entry_t g_ref_le_white_list_cache[
REF_LE_WL_SIZE] = { 0 };
void init_wl(void)
{
memset(g_ref_le_white_list_cache, 0x00, sizeof(
ref_le_white_list_entry_t) * REF_LE_WL_SIZE);
}
int check_wl_entry(size_t idx, sgx_measurement_t *mrsigner,
int provision)
{
/*
* XXX the following array index compiles to a
* multiplication that can be faulted..
*/
ref_le_white_list_entry_t *current_entry = &
g_ref_le_white_list_cache[idx];
/*
* Our exemplary launch policy requires that the
* enclave author is white listed, plus is optionally
* allowed access to the platform provisioning key.
*/
if (memcmp(&(current_entry->mr_signer), mrsigner,
sizeof(sgx_measurement_t)) == 0)
{
return (provision ? current_entry->provision_key
: 1);
}
return 0;
}
int get_launch_token(size_t *it, sgx_measurement_t mrsigner
, int provision)
{
}
for (size_t i = 0; i < REF_LE_WL_SIZE; i++)
{
if (check_wl_entry(i, &mrsigner, provision))
{
return 1;
}
/* NOTE: we explicitly leak the loop iteration
* here for simplicity; real-world adversaries
* could use a #PF side-channel or count
* instructions w precise single-stepping
*/
*it = i;
}
/* For simplicity, we only return true or false and do
not compute the actual launch token. */
return 0;
For completeness, we also provide a disassembled version
of the relevant check_wl_entry function, as compiled with
gcc v7.4.0 (optimization level -Os):
check_wl_entry:
imul
push
push
lea
mov
mov
sub
add
mov
callq
xor
test
jne
test
mov
je
movzbl 0x20(%rbx),%edx
$0x21,%rdi,%rdi
%rbp
%rbx
g_ref_le_white_list_cache(%rip),%rbx
%edx,%ebp
$0x20,%edx
$0x8,%rsp
%rdi,%rbx
%rbx,%rdi
memcmp
%edx,%edx
%eax,%eax
1f
%ebp,%ebp
$0x1,%edx
1f
1:
mov
pop
pop
pop
retq
%edx,%eax
%rdx
%rbx
%rbp
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:04:35 UTC from IEEE Xplore.  Restrictions apply. 
1482