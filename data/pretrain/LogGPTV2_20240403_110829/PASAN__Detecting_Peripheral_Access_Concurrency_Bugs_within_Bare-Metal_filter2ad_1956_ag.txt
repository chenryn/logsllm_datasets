which are already well-developed in emulator development
communities [38, 87]. To overcome full emulation require-
ments, some recent works have been proposed [41, 51, 53].
While Pretender [53] still requires the original hardware to
record the MMIO’s activity, both P2IM [51] and Halucina-
tor [41] cannot correctly handle some hardware devices such
as DMA. Finally, none of these studies emulated any device
attached to the I/O which limits the coverage of the anal-
ysis results. Overall, unlike PASAN, the dynamic analysis
approaches in the prior art are limited by the requirement
of signiﬁcant engineering efforts in generating analysis envi-
ronments with actual boards and specialized hardware (e.g.,
GDB, Bluetooth, or client devices). Furthermore, both static
and dynamic analysis approaches focus on program crash,
memory corruption and known security threats.
8 Conclusion
Concurrency bugs in embedded platforms (e.g., RAVs) may
cause a variety of safety and security issues (i.e., from physical
system failure to security critical data corruption). Unfortu-
nately, detection of concurrency bugs is especially challenging
in embedded platforms due to the intricate interplay of the
bus-level and peripheral-level state machines. In this paper,
we propose PASAN, a device-agnostic static analysis-based
approach which addresses this challenge. PASAN detects pe-
ripheral access concurrency bugs automatically by pursuing
a transaction-aware and address-range-aware strategy. We
validate the capabilities of PASAN by evaluating it on seven
real-world embedded platforms, and discover a total of 17 con-
currency bugs in three different platforms. We have reported
these ﬁndings to the corresponding parties.
Acknowledgment
We thank the anonymous reviewers for their valuable com-
ments. This work was supported in part by ONR under Grants
N00014-20-1-2128 and N00014-17-1-2045. Any opinions,
ﬁndings, and conclusions in this paper are those of the authors
and do not necessarily reﬂect the views of the ONR.
References
[1] Dirty cow (cve-2016-5195), 2016. https://dirtycow.ninja.
[2] grbl — An open source, embedded, high performance g-code-parser
and CNC milling controller ported to stm32f4, 2016. https://github.
com/deadsy/grbl_stm32f4.
[3] 3DR IRIS+, 2018. https://3dr.com/support/articles/iris.
[4] Intel Aero, 2018. https://software.intel.com/en-us/aero.
[5] MAVLink Micro Air Vehicle Communication Protocol, 2018. https:
//mavlink.io.
[6] Parrot Bebop2, 2018. https://www.parrot.com/global/drones/
parrot-bebop-2.
[7] syzkaller - linux syscall fuzzer, 2018. https://github.com/google/
syzkaller.
[8] CMSIS System View Description, 2019.
pack/doc/CMSIS/SVD/html/index.html.
http://www.keil.com/
[9] Cve-2019-6471,
cve-2019-6471.
2019.
https://kb.isc.org/docs/
[10] List of 862 race conditions in the cve database, 2019. http://cve.
mitre.org/cgi-bin/cvekey.cgi?keyword=race+condition.
[11] ArduPilot, 2020. http://ardupilot.org.
[12] Blue Pill — STM32F103C8T6, 2020. https://stm32-base.org/
boards/STM32F103C8T6-Blue-Pill.html.
[13] Codesonar c/c++ - sast when safety and security matter, 2020. https:
//www.grammatech.com/codesonar-cc.
[14] Contiki-NG: The OS for Next Generation IoT Devices, 2020. https:
//github.com/contiki-ng/contiki-ng.
[15] Coverity scan - static analysis, 2020. https://scan.coverity.com.
[16] Cve-2020-0030, 2020. http://cve.mitre.org/cgi-bin/cvename.
cgi?name=CVE-2020-0030.
264    30th USENIX Security Symposium
USENIX Association
[17] Cve-2020-3941, 2020. http://cve.mitre.org/cgi-bin/cvename.
cgi?name=CVE-2020-3941.
[18] Direct Comms with SPI/I2C bus, 2020. https://ardupilot.github.
io/MAVProxy/html/modules/devop.html.
[19] Flawﬁnder, 2020. https://dwheeler.com/flawfinder.
[20] frama-c: Software analyzers, 2020. https://frama-c.com.
[21] Infer - a static analysis tool for java, c++, objective-c, and c., 2020.
https://fbinfer.com.
[22] Micro SD Card Module Mini TF Card Adapter with SPI In-
https://www.amazon.com/
terface Driver Module, 2020.
Geekstory-Module-Adapter-Interface-Arduino/dp/
B07X478BPL.
[23] Pixhawk 1 Flight Controller, 2020. https://docs.px4.io/v1.9.0/
en/flight_controller/pixhawk.html.
[24] Polyspace: Automated static code analysis using formal methods
for c/c++ and ada, 2020. https://www.mathworks.com/products/
polyspace.
[25] Polyspace bug ﬁnder reference, 2020. https://www.mathworks.
com/help/pdf_doc/bugfinder/bugfinder_ref.pdf.
[26] RaceFlight — Performance, stability and ease of use for STM32F4 and
more, 2020. https://github.com/rs2k/raceflight.
[27] RetDec: a retargetable machine-code decompiler based on LLVM,
2020. https://github.com/avast/retdec.
[28] RIOT — The friendly OS for IoT, 2020. https://www.riot-os.org.
[29] rusEFI — a GPL open source engine control unit, 2020. https:
//rusefi.com.
[30] Sast-coverity-datasheet, 2020.
https://www.synopsys.
com/content/dam/synopsys/sig-assets/datasheets/
SAST-Coverity-datasheet.pdf.
[31] TS100 — soldering iron ﬁrmware, 2020. https://github.com/
Ralim/ts100.
[32] Verifast, 2020. https://github.com/verifast/verifast.
[33] Jia-Ju Bai, Yu-Ping Wang, Julia Lawall, and Shi-Min Hu. Dsac: Effec-
tive static analysis of sleep-in-atomic-context bugs in kernel modules.
In Proceedings of the 2018 USENIX Annual Technical Conference
(ATC), 2018.
[34] Tiffany Bao, Jonathan Burket, Maverick Woo, Rafael Turner, and David
Brumley. Byteweight: Learning to recognize functions in binary code.
In Proceedings of the 23rd USENIX Security Symposium (USENIX
Security), 2014.
[35] Fabrice Bellard. Qemu, a fast and portable dynamic translator. In
Proceedings of the USENIX Annual Technical Conference, FREENIX
Track (ATC), 2005.
[36] Gérard Berry and Georges Gonthier. The esterel synchronous pro-
gramming language: Design, semantics, implementation. Science of
computer programming, 19(2):87–152, 1992.
[37] Nicholas Carlini, Antonio Barresi, Mathias Payer, David Wagner, and
Thomas R Gross. Control-ﬂow bending: On the effectiveness of control-
ﬂow integrity. In Proceedings of the 24th USENIX Security Symposium
(USENIX Security), 2015.
[38] Daming D Chen, Maverick Woo, David Brumley, and Manuel Egele. To-
wards automated dynamic analysis for linux-based embedded ﬁrmware.
In Proceedings of the 25th Annual Symposium on Network and Dis-
tributed System Security (NDSS), 2016.
[39] Jiongyi Chen, Wenrui Diao, Qingchuan Zhao, Chaoshun Zuo, Zhiqiang
Lin, XiaoFeng Wang, Wing Cheong Lau, Menghan Sun, Ronghai Yang,
and Kehuan Zhang. Iotfuzzer: Discovering memory corruptions in
In Proceedings of the 27th Annual
iot through app-based fuzzing.
Symposium on Network and Distributed System Security (NDSS), 2018.
[40] Qiu-Liang Chen, Jia-Ju Bai, Zu-Ming Jiang, Julia Lawall, and Shi-Min
Hu. Detecting data races caused by inconsistent lock protection in de-
vice drivers. In Proceedings of the IEEE 26th International Conference
on Software Analysis, Evolution and Reengineering (SANER), 2019.
[41] Abraham Clements, Eric Gustafson, Tobias Scharnowski, Paul Grosen,
David Fritz, Christopher Kruegel, Giovanni Vigna, Saurabh Bagchi,
and Mathias Payer. Halucinator: Firmware re-hosting through abstrac-
tion layer emulation. In Proceedings of the 29th USENIX Security
Symposium (USENIX Security), 2020.
[42] Ernie Cohen, Markus Dahlweid, Mark Hillebrand, Dirk Leinenbach,
Michał Moskal, Thomas Santen, Wolfram Schulte, and Stephan Tobies.
Vcc: A practical system for verifying concurrent c. In Proceedings
of the International Conference on Theorem Proving in Higher Order
Logics (TPHOLs), 2009.
[43] Lucian Cojocar, Jonas Zaddach, Roel Verdult, Herbert Bos, Aurélien
Francillon, and Davide Balzarotti. Pie: parser identiﬁcation in embed-
ded systems. In Proceedings of the 31st Annual Computer Security
Applications Conference (ACSAC), 2015.
[44] Jake Corina, Aravind Machiry, Christopher Salls, Yan Shoshitaishvili,
Shuang Hao, Christopher Kruegel, and Giovanni Vigna. Difuze: In-
terface aware fuzzing for kernel drivers. In Proceedings of the 2017
ACM SIGSAC Conference on Computer and Communications Security
(CCS), 2017.
[45] Andrei Costin, Jonas Zaddach, Aurélien Francillon, and Davide
Balzarotti. A large-scale analysis of the security of embedded
ﬁrmwares. In Proceedings of the 23rd USENIX Security Symposium
(USENIX Security), 2014.
[46] Drew Davidson, Benjamin Moench, Thomas Ristenpart, and Somesh
Jha. Fie on ﬁrmware: Finding vulnerabilities in embedded systems
using symbolic execution. In Proceedings of the 22nd USENIX Security
Symposium (USENIX Security), 2013.
[47] Peng Di and Yulei Sui. Accelerating dynamic data race detection
using static thread interference analysis. In Proceedings of the 7th
International Workshop on Programming Models and Applications for
Multicores and Manycores (PMAM), 2016.
[48] Sushant Dinesh, Nathan Burow, Dongyan Xu, and Mathias Payer.
Retrowrite: Statically instrumenting cots binaries for fuzzing and sani-
tization. In Proceedings of the 41st IEEE Symposium on Security and
Privacy (IEEE S&P), 2020.
[49] Steven HH Ding, Benjamin CM Fung, and Philippe Charland.
Asm2vec: Boosting static representation robustness for binary clone
search against code obfuscation and compiler optimization. In Pro-
ceedings of the 40th IEEE Symposium on Security and Privacy (IEEE
S&P), 2019.
[50] Dawson Engler and Ken Ashcraft. Racerx: Effective, static detection
In Proceedings of the 9th ACM
of race conditions and deadlocks.
Symposium on Operating Systems Principles (SOSP), 2003.
[51] Bo Feng, Alejandro Mera, and Long Lu. P2im: Scalable and hardware-
independent ﬁrmware testing via automatic peripheral interface model-
ing. In Proceedings of the 29th USENIX Security Symposium (USENIX
Security), 2020.
[52] Eléonore Goblé. Taint analysis for automotive safety using the llvm
compiler infrastructure. 2019.
[53] Eric Gustafson, Marius Muench, Chad Spensky, Nilo Redini, Aravind
Machiry, Yanick Fratantonio, Davide Balzarotti, Aurélien Francillon,
Yung Ryn Choe, Christophe Kruegel, and Giovanni Vigna. Toward the
analysis of embedded ﬁrmware through automated re-hosting. In Pro-
ceedings of the 22nd International Symposium on Research in Attacks,
Intrusions and Defenses (RAID), 2019.
[54] Dae R Jeong, Kyungtae Kim, Basavesh Shivakumar, Byoungyoung
Lee, and Insik Shin. Razzer: Finding kernel race bugs through fuzzing.
In Proceedings of the 40th IEEE Symposium on Security and Privacy
(IEEE S&P), 2019.
USENIX Association
30th USENIX Security Symposium    265
[55] Baris Kasikci, Cristian Zamﬁr, and George Candea. Racemob: Crowd-
sourced data race detection. In Proceedings of the Twenty-Fourth ACM
Symposium on Operating Systems Principles, 2013.
[56] Taegyu Kim, Chung Hwan Kim, Altay Ozen, Fan Fei, Zhan Tu, Xiangyu
Zhang, Xinyan Deng, Dave (Jing) Tian, , and Dongyan Xu. From
control model to program: Investigating robotic aerial vehicle accidents
with mayday. In Proceedings of 29th USENIX Security Symposium
(USENIX Security), 2020.
[57] Taegyu Kim, Chung Hwan Kim, Junghwan Rhee, Fan Fei, Zhan Tu,
Gregory Walkup, Xiangyu Zhang, Xinyan Deng, and Dongyan Xu.
Rvfuzzer: Finding input validation bugs in robotic vehicles through
control-guided testing. In Proceedings of 28th USENIX Security Sym-
posium (USENIX Security), 2019.
[58] Volodymyr Kuznetsov, Vitaly Chipounov, and George Candea. Testing
closed-source binary device drivers with ddt. In Proceedings of the
2010 USENIX Annual Technical Conference (ATC), 2010.
[59] Y. Kwon, J. Yu, B. Cho, Y. Eun, and K. Park. Empirical analysis of
mavlink protocol vulnerability for attacking unmanned aerial vehicles.
IEEE Access, 6:43203–43212, 2018.
[60] Leslie Lamport. Time, clocks, and the ordering of events in a distributed
system. 2019.
[61] Chris Lattner and Vikram Adve. LLVM: A Compilation Framework
for Lifelong Program Analysis & Transformation. In Proceedings of
the International Symposium on Code Generation and Optimization
(CGO), 2004.
[62] Alexander Lochmann, Horst Schirmeier, Hendrik Borghorst, and Olaf
Spinczyk. Lockdoc: Trace-based analysis of locking in the linux kernel.
In Proceedings of the Fourteenth EuroSys Conference 2019, 2019.
[63] Kangjie Lu and Hong Hu. Where does it go? reﬁning indirect-call
targets with multi-layer type analysis. In Proceedings of the 2019 ACM
SIGSAC Conference on Computer and Communications Security, pages
1867–1881, 2019.
[64] Aravind Machiry, Chad Spensky, Jake Corina, Nick Stephens, Christo-
pher Kruegel, and Giovanni Vigna. Dr.checker: A soundy analysis
for linux kernel drivers. In Proceedings of the 26th USENIX Security
Symposium (USENIX Security), 2017.
[65] Nicholas D Matsakis and Felix S Klock. The rust language. ACM
SIGAda Ada Letters, 34(3):103–104, 2014.
[66] Friedemann Mattern et al. Virtual time and global states of distributed
systems. In Proceedings of the Workshop on Parallel and Distributed
Algorithms, 1988.
[67] Nicholas Nethercote and Julian Seward. Valgrind: A Framework for
Heavyweight Dynamic Binary Instrumentation. In Proceedings of the
28th ACM SIGPLAN Conference on Programming Language Design
and Implementation (PLDI), 2007.
[68] Esko Nuutila and Eljas Soisalon-Soininen. On ﬁnding the strongly
connected components in a directed graph. Information Processing
Letters, 49(1):9–14, 1994.
[69] Peter O’Hearn. Separation logic. Communications of the ACM,
62(2):86–95, 2019.
[70] Matthew J Renzelmann, Asim Kadav, and Michael M Swift. Symdrive:
testing drivers without devices. In Proceedings of the 10th USENIX
Symposium on Operating Systems Design and Implementation (OSDI),
2012.
[71] Nils Rodday. Hacking a professional drone. Blackhat ASIA, 2016.
[72] Sergej Schumilo, Ralf Spenneberg, and Hendrik Schwartke. Don’t trust
your usb! how to ﬁnd bugs in usb device drivers. Blackhat Europe,
2014.
[73] Konstantin Serebryany and Timur Iskhodzhanov. Threadsanitizer: Data
race detection in practice. In Proceedings of the Workshop on Binary
Instrumentation and Applications (WBIA), 2009.
[74] Yan Shoshitaishvili, Ruoyu Wang, Christophe Hauser, Christopher
Kruegel, and Giovanni Vigna. Firmalice-automatic detection of au-
thentication bypass vulnerabilities in binary ﬁrmware. In Proceedings
of the 24th Annual Symposium on Network and Distributed System
Security (NDSS), 2015.
[75] Dokyung Song, Felicitas Hetzelt, Dipanjan Das, Chad Spensky, Yeoul
Na, Stijn Volckaert, Giovanni Vigna, Christopher Kruegel, Jean-Pierre
Seifert, and Michael Franz. Periscope: An effective probing and
In Proceedings
fuzzing framework for the hardware-os boundary.
of the 28th Annual Symposium on Network and Distributed System
Security (NDSS), 2019.
[76] Yulei Sui and Jingling Xue. SVF: Interprocedural Static Value-ﬂow
Analysis in LLVM. In Proceedings of the 25th International Confer-
ence on Compiler Construction (CC), 2016.
[77] Seyed Mohammadjavad Seyed Talebi, Hamid Tavakoli, Hang Zhang,
Zheng Zhang, Ardalan Amiri Sani, and Zhiyun Qian. Charm: Fa-
cilitating dynamic analysis of device drivers of mobile systems. In
Proceedings of the 27th USENIX Security Symposium (USENIX Secu-
rity), 2018.
[78] V. Vojdani, K. Apinis, V. Rõtov, H. Seidl, V. Vene, and R. Vogler. Static
race detection for device drivers: The goblint approach. In Proceedings
of the 31st IEEE/ACM International Conference on Automated Software
Engineering (ASE), 2016.
[79] Jan Wen Voung, Ranjit Jhala, and Sorin Lerner. Relay: static race
detection on millions of lines of code. In Proceedings of the the 6th
joint meeting of the European software engineering conference and the
ACM SIGSOFT symposium on The foundations of software engineering
(ESEC/FSE), 2007.
[80] Shuai Wang, Pei Wang, and Dinghao Wu. Reassembleable disas-
sembling. In Proceedings of the 24th USENIX Security Symposium
(USENIX Security), 2015.
[81] S Bharadwaj Yadavalli and Aaron Smith. Raising binaries to llvm
ir with mctoll. In Proceedings of the 20th ACM SIGPLAN/SIGBED
International Conference on Languages, Compilers, and Tools for Em-
bedded Systems (LCTES), 2019.
[82] Jonas Zaddach, Luca Bruno, Aurelien Francillon, Davide Balzarotti,
et al. Avatar: A framework to support dynamic security analysis of
embedded systems’ ﬁrmwares. In Proceedings of the 23rd Annual
Symposium on Network and Distributed System Security (NDSS), 2014.
[83] Qiang Zeng, Dinghao Wu, and Peng Liu. Cruiser: Concurrent heap
buffer overﬂow monitoring using lock-free data structures. In Pro-
ceedings of the 32nd ACM SIGPLAN Conference on Programming
Language Design and Implementation (PLDI), 2011.
[84] Tong Zhang, Changhee Jung, and Dongyoon Lee. Prorace: Practi-
In Proceedings of the
cal data race detection for production use.
Twenty-Second International Conference on Architectural Support for
Programming Languages and Operating Systems (ASPLOS), 2017.
[85] Tong Zhang, Dongyoon Lee, and Changhee Jung. Txrace: Efﬁcient
data race detection using commodity hardware transactional memory.
In Proceedings of the Twenty-First International Conference on Archi-
tectural Support for Programming Languages and Operating Systems
(ASPLOS), 2016.
[86] Tong Zhang, Wenbo Shen, Dongyoon Lee, Changhee Jung, Ahmed M
Azab, and Ruowen Wang. Pex: A permission check analysis framework
for linux kernel. In Proceedings of 28th USENIX Security Symposium
(USENIX Security), 2019.
[87] Yaowen Zheng, Ali Davanian, Heng Yin, Chengyu Song, Hongsong
Zhu, and Limin Sun. Firm-aﬂ: High-throughput greybox fuzzing of iot
ﬁrmware via augmented process emulation. In Proceedings of the 28th
USENIX Security Symposium (USENIX Security), 2019.
266    30th USENIX Security Symposium
USENIX Association