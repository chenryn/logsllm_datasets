relkind                | r    
remain_ages_xid        | 199739848    
remain_ages_mxid       |     
xid_lower_to_minage    | 0    
mxid_lower_to_minage   | 0    
vacuum_trigger_freeze1 | YES    
vacuum_trigger_freeze2 | NOT    
reloptions             |     
v1                     | 200000000    
v2                     | 400000000    
v3                     | 0    
v4                     | 0    
v5                     | 200    
v6                     | 150000000    
v7                     | 0    
v8                     | -1    
v9                     | 0    
v10                    | 200    
autovacuum             | on    
-[ RECORD 3 ]----------+-------------------------------------------    
sz                     | 192 kB    
reloid                 | information_schema.sql_languages    
relkind                | r    
remain_ages_xid        | 199739848    
remain_ages_mxid       |     
xid_lower_to_minage    | 0    
mxid_lower_to_minage   | 0    
vacuum_trigger_freeze1 | YES    
vacuum_trigger_freeze2 | NOT    
reloptions             |     
v1                     | 200000000    
v2                     | 400000000    
v3                     | 0    
v4                     | 0    
v5                     | 200    
v6                     | 150000000    
v7                     | 0    
v8                     | -1    
v9                     | 0    
v10                    | 200    
autovacuum             | on    
-[ RECORD 4 ]----------+-------------------------------------------    
sz                     | 192 kB    
reloid                 | information_schema.sql_packages    
relkind                | r    
remain_ages_xid        | 199739848    
remain_ages_mxid       |     
xid_lower_to_minage    | 0    
mxid_lower_to_minage   | 0    
vacuum_trigger_freeze1 | YES    
vacuum_trigger_freeze2 | NOT    
reloptions             |     
v1                     | 200000000    
v2                     | 400000000    
v3                     | 0    
v4                     | 0    
v5                     | 200    
v6                     | 150000000    
v7                     | 0    
v8                     | -1    
v9                     | 0    
v10                    | 200    
autovacuum             | on    
-[ RECORD 5 ]----------+-------------------------------------------    
sz                     | 192 kB    
reloid                 | information_schema.sql_parts    
relkind                | r    
remain_ages_xid        | 199739848    
remain_ages_mxid       |     
xid_lower_to_minage    | 0    
mxid_lower_to_minage   | 0    
vacuum_trigger_freeze1 | YES    
vacuum_trigger_freeze2 | NOT    
reloptions             |     
v1                     | 200000000    
v2                     | 400000000    
v3                     | 0    
v4                     | 0    
v5                     | 200    
v6                     | 150000000    
v7                     | 0    
v8                     | -1    
v9                     | 0    
v10                    | 200    
autovacuum             | on    
```    
## 统计SQL    
例如每隔100万个事务, 统计一下有多少表, 多少容量会参与FREEZE, 会导致读多少IO, 写IO多少?    
```    
create view v_freeze_stat as    
select     
wb,                                                     -- 第几个BATCH, 每个batch代表流逝100万个事务     
cnt,                                                    -- 这个batch 有多少表    
pg_size_pretty(ssz) as ssz1,                            -- 这个batch 这些 表+TOAST+索引 有多少容量    
pg_size_pretty(ssz) as ssz2,                            -- 这个batch FREEZE 会导致多少读IO    
pg_size_pretty(ssz*3) as ssz3,                          -- 这个batch FREEZE 最多可能会导致多少写IO (通常三份 : 数据文件, WAL FULL PAGE, WAL)    
pg_size_pretty(min_sz) as ssz4,                         -- 这个batch 最小的表多大    
pg_size_pretty(max_sz) as ssz5,                         -- 这个batch 最大的表多大    
pg_size_pretty(avg_sz) as ssz6,                         -- 这个batch 平均表多大    
pg_size_pretty(stddev_sz) as ssz7,                      -- 这个batch 表大小的方差, 越大, 说明表大小差异化明显    
min_rest_age,                                           -- 这个batch 距离自动FREEZE最低剩余事务数    
max_rest_age,                                           -- 这个batch 距离自动FREEZE最高剩余事务数    
stddev_rest_age,                                        -- 这个batch 距离自动FREEZE剩余事务数的方差, 越小，说明这个batch触发freeze将越平缓, 越大, 说明这个batch将有可能在某些点集中触发freeze (但是可能集中触发的都是小表)    
corr_rest_age_sz,                                       -- 表大小与距离自动freeze剩余事务数的相关性，相关性越强(值趋向1或-1) stddev_rest_age 与 sz7 说明的问题越有价值    
round(100*(ssz/(sum(ssz) over ())), 2)||' %' as ratio   -- 这个BATCH的容量占比，占比如果非常不均匀，说明有必要调整表级FREEZE参数，让占比均匀化    
from         
(    
select a.*, b.* from     
(    
select     
  min(least(remain_ages_xid, remain_ages_mxid)) as v_min,   -- 整个数据库中离自动FREEZE的 最小 剩余事务ID数    
  max(least(remain_ages_xid, remain_ages_mxid)) as v_max    -- 整个数据库中离自动FREEZE的 最大 剩余事务ID数    
from v_freeze    
) as a,    
LATERAL (  -- 高级SQL    
select     
width_bucket(    
  least(remain_ages_xid, remain_ages_mxid),     
  a.v_min,    
  a.v_max,    
  greatest((a.v_max-a.v_min)/1000000, 1)   -- 100万个事务, 如果要更改统计例如，修改这个值即可    
) as wb,      
count(*) as cnt,     
sum(pg_total_relation_size(reloid)) as ssz,     
stddev_samp(pg_total_relation_size(reloid) order by least(remain_ages_xid, remain_ages_mxid)) as stddev_sz,     
min(pg_total_relation_size(reloid)) as min_sz,     
max(pg_total_relation_size(reloid)) as max_sz,     
avg(pg_total_relation_size(reloid)) as avg_sz,     
min(least(remain_ages_xid, remain_ages_mxid)) as min_rest_age,     
max(least(remain_ages_xid, remain_ages_mxid)) as max_rest_age,     
stddev_samp(least(remain_ages_xid, remain_ages_mxid) order by least(remain_ages_xid, remain_ages_mxid)) as stddev_rest_age,     
corr(least(remain_ages_xid, remain_ages_mxid), pg_total_relation_size(reloid)) as corr_rest_age_sz     
from v_freeze     
group by wb     
) as b     
) t     
order by wb;      
```    
返回解释如下    
```    
 wb | cnt  |   sz1   |   sz2   |  sz3  |  sz4   |   sz5   |   sz6   |   sz7   | min_rest_age | max_rest_age | stddev_rest_age |  corr_rest_age_sz   |  ratio      
----+------+---------+---------+-------+--------+---------+---------+---------+--------------+--------------+-----------------+---------------------+---------    
  1 | 2083 | 13 GB   | 13 GB   | 38 GB | 32 kB  | 6326 MB | 6380 kB | 184 MB  |    199739848 |    199890546 |  18826.08737805 | -0.0818846238277424 | 70.96 %    
  2 |    2 | 5311 MB | 5311 MB | 16 GB | 224 kB | 5311 MB | 2655 MB | 3755 MB |    199999996 |    199999996 |               0 |                     | 29.04 %    
(2 rows)    
```    
占比不均匀，有必要调整表级freeze参数。    
```    
-[ RECORD 1 ]----+--------------------    
wb               | 1                     -- 第几个BATCH, 每个batch代表流逝100万个事务     
cnt              | 2083                  -- 这个batch 有多少表    
ssz1             | 13 GB                 -- 这个batch 这些 表+TOAST+索引 有多少容量                                               
ssz2             | 13 GB	         -- 这个batch FREEZE 会导致多少 读IO                                                       
ssz3             | 38 GB	         -- 这个batch FREEZE 最多可能会导致多少 写IO (通常三份 : 数据文件, WAL FULL PAGE, WAL)     
ssz4             | 32 kB	         -- 这个batch 最小的表多大                                                                
ssz5             | 6326 MB	         -- 这个batch 最大的表多大                                                                
ssz6             | 6380 kB	         -- 这个batch 平均表多大                                                                  
ssz7             | 184 MB                -- 这个batch 表大小的方差, 越大, 说明表大小差异化明显    
min_rest_age     | 199739846             -- 这个batch 距离自动FREEZE最低 剩余事务数                                                                                                                             
max_rest_age     | 199890544		 -- 这个batch 距离自动FREEZE最高 剩余事务数                                                                                                                             
stddev_rest_age  | 18826.08737805	 -- 这个batch 距离自动FREEZE剩余事务数的方差, 越小，说明这个batch触发freeze将越平缓, 越大, 说明这个batch将有可能在某些点集中触发freeze (但是可能集中触发的都是小表)    
corr_rest_age_sz | -0.0818849525050259   -- 表大小与距离自动freeze剩余事务数的相关性，相关性越强(值趋向1或-1) stddev_rest_age 与 sz7 说明的问题越有价值    
ratio            | 70.96 %               -- 这个BATCH的容量占比，占比如果非常不均匀，说明有必要调整表级FREEZE参数，让占比均匀化    
-[ RECORD 2 ]----+--------------------    
wb               | 2    
cnt              | 2    
ssz1             | 5311 MB    
ssz2             | 5311 MB    
ssz3             | 16 GB    
ssz4             | 224 kB    
ssz5             | 5311 MB    
ssz6             | 2655 MB    
ssz7             | 3755 MB    
min_rest_age     | 199999994    
max_rest_age     | 199999994    
stddev_rest_age  | 0    
corr_rest_age_sz |     
ratio            | 29.04 %    
```    
## 明细SQL    
观察每个BATCH内的距离freeze剩余年龄、表大小分布       
该表在该batch中的容量占比      
```    
create view v_freeze_stat_detail as      
select     