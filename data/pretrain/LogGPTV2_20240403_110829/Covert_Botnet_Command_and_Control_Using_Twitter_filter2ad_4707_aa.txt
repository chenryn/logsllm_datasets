title:Covert Botnet Command and Control Using Twitter
author:Nick Pantic and
Mohammad Iftekhar Husain
Covert Botnet Command and Control Using Twitter
Nick Pantic
Cal Poly Pomona
3801 W Temple Ave
PI:EMAIL
Pomona, CA
Mohammad I Husain
Cal Poly Pomona
3801 W Temple Ave
PI:EMAIL
Pomona, CA
ABSTRACT
Botnets are one of the primary threats in computer security today.
They are used for launching denial of service attacks, sending spam
and phishing emails, and collecting private information. However,
every botnet requires coordination. In order to initiate an attack, a
botmaster must communicate to all of the bots in the network. In
this paper, we present a steganographic system that demonstrates
the feasibility of the social networking website Twitter as a bot-
net command and control center that an attacker could use to reli-
ably communicate messages to a botnet with low latency and nearly
perfect rate of transmission. Our system generates plausible cover
messages based on a required tweet length determined by an en-
coding map that has been constructed based on the structure of the
secret messages. The system considers both the input symbol fre-
quencies (e.g. English letter frequencies) as well as the tweet length
posting frequencies for constructing the encoding maps. A tech-
nique for automatically generating Twitter account names based on
Markov chains is also presented so that the bots can connect to new
accounts if the existing botmaster account is unavailable. All the
experiments were performed using the 7.3M actual tweets from
3.7K veriﬁed accounts collected by the tweet parser developed by
us. We have evaluated the efﬁcacy of the system using Emulab and
usability of the system through Amazon’s Mechanical Turk with
promising results. An analysis of the steganographic security of
the proposed system has also been provided. By demonstrating
how a botmaster might perform such communication using online
social networks, our work provides the basis to detect and prevent
emerging botnet activities.
Keywords
Twitter, Denial of Service, Social Network, Botnet, Command and
Control, Steganography
1.
INTRODUCTION
Computing and interconnectivity have spread through modern
society as electricity and plumbing have in the past, to become al-
most entirely ubiquitous. Indeed, it is not uncommon for a single
person to possess numerous computing devices of varying power
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’15, December 07 - 11, 2015, Los Angeles, CA, USA
c(cid:13) 2015 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ISBN 978-1-4503-3682-6/15/12. . . $15.00
DOI: http://dx.doi.org/10.1145/2818000.2818047
and portability, ranging from handheld smartphones and tablets to
notebooks and desktop computers. Although these devices appear
different, they are all essentially the same. They act as general pur-
pose computers that connect to the Internet to communicate with
other devices across the globe.
Cyber-criminals make use of this vast global Internet by installing
or convincing users to install malicious software, or malware, on to
their devices that allow the criminals to control them remotely. A
collection of these “zombie” computers is called a botnet. Botnets
are one of the most prominent modern computer security threats
[17] and are often used for various forms of cyber crime such as
sending spam emails or performing denial-of-service (DoS) attacks
against other computer networks. In fact, the botnet threat spreads
beyond what we commonly refer to as computing devices. In the
new internet-of-things (IoT), many common household appliances
that contain embedded computers are being connected to the Inter-
net. A recent news story showed that these smart appliances, such
as refrigerators, were being used to distribute spam email1.
The design and communication patterns of these botnet can vary
dramatically, as they are created by cyber-criminals with the intent
of hiding their presence. Social networks have exploded in the past
few years in the same way that the Internet and the web before
them. Today, popular social networks like Twitter and Facebook
have hundreds of millions of users interacting and communicat-
ing in real time. Even with the extremely large user bases, these
services are rarely ever unavailable and will transmit the communi-
cations at an incredible speed. From this information, a clever at-
tacker will recognize that these networks are well suited for crafting
cyber attacks such as controlling an existing botnet. They can take
advantage of the infrastructure, speed of transmission, and large
userbase in which to hide to control the bots. This paper provides a
proof of concept of this type of botnet communication that is hid-
den within the social network Twitter.
Understanding how attackers communicate with botnets is vital
for botnet defense. If the attacker cannot coordinate the bots, they
will be unable to utilize the network. As is common with computer
security research, researching both attack and defense can be use-
ful. Before a proper defense can be made, new attacks must be un-
derstood. Botnets are capable of attacking the availability of a sys-
tem using attacks such as DoS, where the bot ﬂood a network with
requests to cause it to become unresponsive to real trafﬁc. These
attacks are especially dangerous because it is difﬁcult to distinguish
between these fake requests and authentic trafﬁc trying to use the
network. In order to stop these attacks, it is best to be able to crip-
ple the botnet before it can begin. Therefore, understanding how an
attacker might attempt to coordinate these bots is essential.
1http://www.proofpoint.com/about-us/press-releases/01162014.
php
In this paper, our goal is to develop a method of coordinating bots
in a botnet that uses a stego-system over a popular social network,
Twitter, using only meta data for communication. This covert chan-
nel can also be used for arbitrary communication of relatively short
messages outside of the realm of botnet command and control. By
utilizing steganography, we hide the existence of the botnet con-
trol communication from the outside world while also utilizing the
power of the popular social networking website to ensure timely
delivery of the messages.
Towards that, we have ﬁrst developed a stego-system leveraging
the Twitter social network platform. This system can be used for
secret communication between various parties for many domains.
Next, we have implemented a botnet command and control (C&C)
communication system that utilizes the stego-system. This C&C
system communicates entirely through the stego-system allowing
the botmaster to control each of the bots. We have also developed
a technique for automatically generating Twitter account names
based on Markov chains so that the bots can connect to new ac-
counts if the existing botmaster account is unavailable. Finally,
we have evaluated the efﬁcacy and performance of both the stego-
system and botnet C&C. All the experiments were performed using
the 7.3M actual tweets from 3.7K veriﬁed accounts collected by
the tweet parser developed by us. We have evaluated the efﬁcacy of
the system using Emulab and usability of the system through Ama-
zon’s Mechanical Turk with promising results. We have also pro-
vided a detailed steganographic security analysis of the proposed
system.
This paper is structured as follows: section 2 contains a broad
literature review of the various techniques that are used in the de-
velopment of the research. Section 3 describes the structure and im-
plementation of the stego-system, botnet-cc, and other components
of the system. Section 4 discusses the experiments conducted and
the evaluation of the results of the experiments including stegano-
graphic security analysis. Section 6 contains our concluding re-
marks and future work related to the paper.
2. BACKGROUND
2.1 Steganography and Steganalysis
Conﬁdentiality has been well established as a security criterion
[7]. Essentially, conﬁdentiality is the preservation of authorized
access and disclosure to information [5]. In most cases, conﬁden-
tiality is sufﬁcient for protecting information from disclosure. For
example, when using online banking, it is important to conceal the
contents of the communications so that no others can impersonate
either yourself or the bank or otherwise obtain your private banking
information, but it is not usually important to hide the fact that you
are performing the online banking. However, there are situations
where it is not only important to hide the contents of communica-
tion, but also the fact that communication has taken place at all.
This is the undetectability criterion of security, deﬁned by Pﬁtz-
mann and Hansen [16] as the criterion of being able to determine if
a message even exists.
Just as cryptography is the science related to conﬁdentiality,
steganography is the science related to undetectability [1]. Also, as
cryptanalysis is the analysis of cryptographic techniques and how
to break them [20], steganalysis is the study of steganographic tech-
niques and ﬁnding hidden information [1]. From the deﬁnitions of
both cryptography and cryptanalysis, we can deduce that a cryp-
tographic system can be considered broken when an attacker can
determine the contents of the communication, also called the plain-
text. Therefore, we can consider a steganographic system (stego
system) broken when an attacker can determine that secret com-
Botmaster
C&C
C&C
Bot
Bot
Bot
Bot
Bot
···
Figure 1: Botnet C&C for a centralized botnet with multiple C&C
centers.
munication has taken place, that is the attacker has detected the
communication, even if they have not determined the contents of
the message [1].
2.2 Botnets
Botnet software is a type of malicious software (malware) that
is most often placed on a victim’s computer silently. Unlike tradi-
tional malware, however, the botnet software communicates with
a botmaster or bot-herder that coordinates potentially thousands or
even millions of other infected machines, called bots or zombies,
in other attacks. Once created, a botnet can be used for harvesting
personal information on a global scale, or causing signiﬁcant denial
of service attacks to even the largest organizations [11].
Every botnet must have a command and control (C&C) system
that directs the bots to perform their attacks. Zeidanloo and Manaf
[22] have separated botnet C&C systems in to three groups. Some
botnets use centralized C&C centers where the botmaster can con-
trol all bots directly. Other botnets use a peer to peer C&C system,
where bots communicate with each other. In addition to receiving
commands, many botnets must communicate information back to
the botmaster, especially if their goal is to obtain the private in-
formation of the user whose computer hosts the botnet software.
Finally, some botnets use a hybrid approach.
In the centralized model, communication between the bots and
botmaster is often done using an IRC channel or over HTTP. This
was the original botnet C&C model used. Because the system is
centralized, the C&C center acts as a single point of failure for the
botnet. When using IRC, the botmaster will create an IRC channel
on their server and the bots will then connect to the server to com-
municate with the botmaster. From this IRC channel, the botmaster
could command all bots to initiate a DDoS attack on an enemy. If
the botnet communicates over HTTP, it gains the advantage that
HTTP trafﬁc is not suspicious in general, because it is the protocol
used for web trafﬁc [22]. A centralized approach may also main-
tain several C&C centers to improve communications and prevent
having a single point of failure, as shown in ﬁgure 1.
Although most botnets use IRC or HTTP to communicate di-
rectly, the botnet designed for this paper will communicate over a
social network. This concept has been discussed in some previous
work, for example in [19], a method of C&C over Twitter is dis-
cussed, however the commands are sent directly as the content of
the tweets instead of by using a covert channel. A botnet has been
designed to use steganography over a online social network [12],
but it uses image steganography to embed messages in the images
posted normally by the victim. It requires that other bots in the bot-
net be on computers socially connected to the victim via the online
social network.
3. METHODOLOGY
3.1 Twitter Covert Channel
3.1.1 The Stego System
To perform the botnet command and control communication, a
covert channel (stego system) that communicates using the Twitter
social network has been developed. This covert channel is similar
to Desoky’s [4] noiseless steganography and utilizes the cover gen-
eration paradigm, however there are some differences. Even in the
noiseless steganography systems, the secret messages are usually
embedded in to the actual data of the cover objects. For example,
in graph steganography, the plotted data contains the secret mes-
sage. In this system, where the cover objects are tweets, the secret
message is not contained in the data of the tweet (the text), instead
it is contained in the metadata of the tweet (the length). Metadata
refers to “data about data.” All data has some metadata associated
with it, but this metadata is not explitictly stored. It is inferred from
the existing data. The tweet’s data is the text. The tweet also has
metadata such as the time it was posted, the user account, and the
length of the text posted. Additional metadata could include the
letter frequencies of the posted text or the number of spaces in the
text.
Because this system differs from existing steganographic sys-
tems, we will deﬁne the parts of this system as follows:
1. The set of possible cover messages, X ∗, is the set of possible
tweets, which is the set of messages of up to 140 UTF-82
characters.
2. The set of possible secret messages, M, can be deﬁned as
Σ∗, where the Σ notation is taken from the formal languages
domain, and refers to an alphabet of symbols, where the sym-
bols can be arbitrarily deﬁned. For example, one implemen-
tation may use Σ = {a, b, c, . . . , z} (the English alphabet).
3. The set of possible keys, K, is the set of numbers that can be
valid pseudo-random keys for the implementation.
In our
case, the implementation uses the Java programming lan-
guage’s java.util.Random3 class, which uses 48 bit keys.
4. The Embed and Generate functions are combined. In our
implementation we generate reasonable cover messages to
have appropriate metadata that contains the secret message.
5. The Extract function will also require a Decode step,
described below.
6. For convenience, we will also use the following notation for
the set of natural numbers up to 140: N140 = {1, 2, . . . , 140}.
Similarly, if we use Nn, it means the natural numbers from 1
to n. Unless otherwise stated, we assume 0 (cid:54)∈ N.
The overall system is shown in ﬁgure 2, where the numbered
components were implemented for the channel.
The secret message is embedded by utilizing the length of the
posted tweets, by character count. Because a tweet can have a
length of up to 140 characters, the length value can store just over
2https://dev.twitter.com/docs/counting-characters
3http://docs.oracle.com/javase/8/docs/api/java/util/Random.html
Figure 2: Overview of Twitter covert channel, where the numbered
components were implemented for the channel.
k
mi
Encode
Decode
mi
n ∈ N140
n ∈ N140
Generate
x(mi)
Extract
Figure 3: Modiﬁed stego system diagram for Twitter covert chan-
nel.
7 bits of information per tweet. However, embedding 7 bits of in-
formation per tweet is not reasonable in practice. Certain length
tweets rarely appear on Twitter so seeing, for example, many tweets
of length one or two on a single account would be suspicious. To
solve these problems, we can use a one-to-many encoding tech-
nique to hide information in the tweet lengths. We will modify the
normal stego system deﬁnition to include the following functions: