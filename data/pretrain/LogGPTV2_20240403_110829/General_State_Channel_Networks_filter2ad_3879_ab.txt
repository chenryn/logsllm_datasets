important direction for future work to improve our construction
and optimize these timings, possibly using the techniques of [24].
Further related work. One of the first proposals for building pay-
ment channels is due to Decker [11], who in particular also intro-
duced a construction for duplex payment channels. An alternative
proposal for payment channel networks has been given by Miller
et al. [24]. In this work, the authors show how to reduce the pes-
simistic timings to constant time (i.e., independent of the length of
the channel path). It is an interesting question for future work to
combine the techniques from [24] with the channel virtualization.
Several works focus on privacy in channel networks, path finding
or money re-balancing in payment channels [19, 21, 31]. In particu-
lar, [12, 21, 24] also provide a UC-based security analysis of their
γ4
γ3
γ1
P2
P1
P3
P4
γ2
P5
P6
Figure 1: Example of a recursive construction of a virtual
state channel γ4 (of length 5) between P1 and P6.
constructions. Channel constructions based on the sequence num-
ber maturity (that we also use in this paper) have been mentioned
already in [29], and recently described in more detail (as “stateful
duplex off-chain micropayment channels”) by Bentov et al. in [8].
Another challenge in building and maintaining complex channel
networks is the fact that parties have to continuously watch what
happens on the blockchain regarding the state of their channels.
This problem can be addressed using so-called watchtowers [22, 27],
to which users can outsource the task of watching the blockchain.
1.2 Organization of the paper
We begin with an informal description of our state channel con-
struction in Sec. 2, where we explain how state channels are created
and how they can be used. Due to the page limit, the complete pro-
tocol description is given in the the full version of this paper [13],
but the specification, which, we believe is more important for fu-
ture work, e.g., for protocol design, is presented in details in the
main body (see Sec. 4). We introduce the necessary formalism and
present security and efficiency properties required from a general
state channel in Sec. 3. Our modular approach of building state
channels is discussed in Sec. 5. Finally, we conclude in Sec. 6.
2 STATE CHANNEL CONSTRUCTION
Before we proceed to the more technical part of this work, let us give
an intuitive explanation of our virtual state channel construction.
We would like to emphasize that the description of our approach
as presented in this section is very simplified and excludes many
important technicalities. Formal definitions, detailed explanations
of our protocols, and their full description are presented in Sections
3—5, Appx. A and in the full version of this paper [13]. As already
mentioned in Sec. 1.1, we follow a recursive approach, which is
shown for the case of 6 parties on Fig. 1 where we consider parties
P1, . . . , P6, with each Pi being connected with Pi +1 via a ledger state
channel Pi ⇔ Pi +1. To build a virtual state channel γ4 := P1 ↔ P6,
we first create a virtual state channel γ1 := P1 ↔ P3 using ledger
state channels P1 ⇔ P2 and P2 ⇔ P3. Then a virtual state channel
γ2 := P4 ↔ P6 is created using ledger state channels P4 ⇔ P5 and
P5 ⇔ P6. The other virtual state channels are created recursively,
as follows: first, channel γ3 := P1 ↔ P4 is created using the virtual
state channel γ1 and the ledger state channel P3 ⇔ P4, and then
channel γ4 is created using the virtual state channels γ3 and γ2.
Ledger state channels – an overview. The terminology for ledger
state channels is given in Sec. 3. and their construction is discussed
in detail in Appx. A.1.
Session 5C: Blockchain 2CCS’18, October 15-19, 2018, Toronto, ON, Canada951Below we explain only the main idea of the ledger state chan-
nel construction. A ledger state channel δ between Alice and Bob
allows them to execute off-chain instances of some contract code
C. An example could be a lottery game contract Clot, where each
user deposits 1 coin and then one user is randomly chosen to re-
ceive 2 coins. Technically, this is implemented using the standard
cryptographic method based on commitment schemes (see, e.g.,
[6]), where the execution of the contract happens in the following
steps: first the parties deposit their coins in the contract instance
(call the resulting initial state of the game G0)4, then Alice sends to
the contract her commitment to a random bit rA ∈ {0, 1} (which
results in state G1), afterwards Bob sends his random bit rB ∈ {0, 1}
to the contract (denote the resulting state G2). Then, Alice opens
her commitment, the final state G3 is computed, and 2 coins are
given to Alice if rA ⊕ rB = 0, or to Bob (otherwise). Finally, the
contract instance terminates. Technically, the previous steps are
implemented via function calls. For example: sending a bit rB by
Bob can be implemented as function call Reveal(rB) (where Reveal
is a function available in Clot that stores rB in the storage of the
contract).
As described in Sec. 1, two parties create a ledger state channel
by deploying a state channel contract, (SCC), in which each party
locks some amount of coins. Once the ledger state channel δ is
established, parties can open instances of the contract code C in
the channel and execute them. For example the parties can open a
channel in which each of them locks 10 coins and then run several
instances of the lottery contract Clot in this channel. Every contract
instance locks 1 coin of each party (from the coins that are locked
in channel δ). A locked coin cannot be used for any other contract
instance in δ. Once the contract instance terminates, the coins are
unlocked and distributed back to the channel δ according to the
rules of C. The state channel contract on the blockchain guarantees
that if something goes wrong during the off-chain execution (parties
disagree on a state of some contract instance, one of the parties
stops communicating, etc.), they can always fairly resolve their
disagreement and continue the execution via the state channel
contract on the blockchain.
Off-chain contract execution in the ledger state channels. Let us
now take a closer look how the off-chain contract execution is done
via the ledger state channel. Let C be a contract code, and let G
denote the (dynamically changing) instance of C that is executed
in δ. To deploy G both parties agree on the initial state G0 of G.
The parties then exchanging signatures on (G0, 0). The rest of the
execution is done by exchanging signatures on further states of G
together with indices w that denote the version numbers. Assume
that Alice wants to call a function f (with some parameters m) in
the contract instance. Let (Gw , w) be the last state of the contract
instance G on which the parties exchanged their signatures. She
then (1) computes locally the new value Gw +1 of the state, by calling
f (m) on Gw , and then (2) sends signed (Gw +1, w + 1) together with
f and m to Bob. Bob checks if Alice’s computation was correct, and
if yes then he replies with his signature on (Gw +1, w + 1). When
4A reader familiar with Ethereum may object that “simultaneous” contract instance
deployment is not allowed (as Ethereum does not support “multi-input” transactions).
We stress that the example above illustrates a contract that is run “inside of a channel”
(not on blockchain) and is compatible with our construction.
the instance G terminates, the coins resulting from this execution
are distributed between the parties according to the outcome of the
game.
For example if G is an instance of the lottery contract Clot de-
scribed above then the states of the game are G0, G1, G2 and G3.
Since the first move of the game is done by Alice, she locally com-
putes the new state G1 and sends it to Bob together with her com-
mitment to rA and her signature on (G1, 1). Then Bob replies with
his signature on (G1, 1). Thereafter, Bob makes his move, i.e., he
computes G2, sends signed (G2, 2) together with his random bit rB
to Alice, and so on. Note that the interaction of the parties with
the contract instance is always “local”, i.e., the parties themselves
compute the new states of G and then just exchange signatures.
As long as both Alice and Bob are honest, everything is done
without any interaction with the blockchain. If, however, one party
cheats (e.g. by refusing to communicate), the other party can always
ask the SCC contract to finish the game. The version number w is
used to make sure that SCC gets always the latest state of the game.
More concretely: the contract is constructed in such a way that if a
malicious party submits an old state, then the other party can always
“overwrite” this state by providing a signed state of the contract
instance with a higher version number. Once the SCC contract learns
the latest state Gw , the game can be finished (starting from Gw )
on-chain via SCC.
Virtual state channels – an overview. As described above, the
virtual state channels are constructed recursively “on top” of the
ledger state channels. Suppose that Alice and Bob want to run some
contract code C (e.g. the lottery game) in an off-chain way in γ.
This time, however, they do not have an open ledger state channel
between each other. Instead, both Alice and Bob have a channel
with a third party, which we call Ingrid. Denote these channels α
and β respectively. With the help of Ingrid but without interacting
with the blockchain, Alice and Bob can open a virtual state channel
γ that has the same functionality and provides the same guarantees
as if it would be a ledger state channel between them. In particular,
Alice and Bob are allowed to create a contract instance of C in
their channel γ and execute it just by communicating with each
other (i.e. play their game without talking to any third party or the
blockchain).
Recall that in case of the ledger state channels every dispute
between Alice and Bob is resolved by the state channel contract,
SCC. For the virtual state channel γ the role of such a “judge” is
played by Ingrid. The main difference from the previous case is
that, unlike SCC (that is executed on the ledger), Ingrid cannot be
trusted, and in particular, she may even collude with a corrupt
Alice or Bob. In order to prevent parties from cheating, we create
special contracts in each of the ledger state channels α and β. Their
code will be called “virtual state channel contract” (VSCC) and their
instances will be denoted να and νβ , respectively. The instances να
provides security guarantees for Alice, and νβ for Bob. In addition,
both contract instances together provide guarantees for Ingrid. The
contract code VSCC has to depend on the code C since it needs to
interpret the code C in case the parties enter into a dispute (see
below). Note that SCC depends on VSCC, and hence, indirectly, on C.
This dependence is summarized in Fig. 2.
Session 5C: Blockchain 2CCS’18, October 15-19, 2018, Toronto, ON, Canada952γ
C
Alice
α
VSCC
Ingrid
VSCC
β
Bob
SCC
Blockchain
SCC
Figure 2: Construction of a virtual state channel γ1 of length
2 in which a contract instance of C is created.
Creating the virtual state channel. Let us explain the virtual state
channel creation in more detail. In the first step Alice and Bob
inform Ingrid about their intention to use her as an intermediary
for their virtual state channel γ. Alice does so by proposing to open
an instance να of VSCC in the channel α. This instance will contain
all information about the virtual state channel γ (for example: how
many coins each party wants to lock in the channel). In some sense
να can be viewed as a “copy” of the virtual state channel γ in which
Ingrid plays the role of Bob — for example, if the initial balance in
γ is 1 coin for Alice and 5 coins for Bob, then Alice would lock 1
coin and Ingrid 5 coins in να . Symmetrically, Bob proposes a new
instance νβ of VSCC in the ledger state channel β that can be viewed
as a “copy” of the virtual state channel γ in which Ingrid plays the
role of Alice. In the example above, Ingrid would lock 1 coin and
Bob 5 coins in νβ . If Ingrid receives both proposals and she agrees
to be the intermediary of the virtual state channel γ, she confirms
both requests.
Contract execution in the virtual state channel γ . The off-chain
contract execution in the virtual state channel is performed exactly
in the same way as in case of the ledger state channels (see para-
graph “Off-chain contract execution in the ledger state channels”
above). That is, as long as both Alice and Bob are honest, they
execute a contract instance G by exchanging signatures on new
versions of the game states without talking to Ingrid at all, and
without updating να and νβ . The case when Alice and Bob disagree
needs to be handled differently, since the parties cannot contact
the blockchain contract, but have to resolve this situation using
the channels α and β that they have with Ingrid. Consider, for ex-
ample, the situation when, in the scenario described above, Bob
is malicious and stops communicating with Alice, i.e. he does not
send back his signature on (Gw +1, w + 1). In this situation, Alice
has to make her move “forcefully” by using the channel α she has
with Ingrid. More concretely, she will execute the contract instance
να . It is very important to stress that the virtual state channel con-
struction uses this instance in a black-box way, i.e., when describing
the protocols for virtual state channel execution this protocol uses
the execution of να in a black-box way via the interface of the
underlying channel. Internally, of course this is done by a protocol
between Alice and Ingrid realizing the off-chain execution of να
(as long as Alice and Ingrid are honest).
First, Alice starts the “state registration procedure”. The goal is to
let να know that she has a disagreement with Bob, and to convince
να that Gw is the latest state of the contract instance G. To this end,
she sends to να the state (Gw , w, sB), where sB is Bob’s signature on
(Gw , w). She does it by calling a function “register” (see Step 1 on
Fig. 3). Of course να has no reason to believe Alice that this is really
the latest state of G. Therefore να forwards this message to Ingrid5,
that, in turn, calls a function “register(Gw , w, sB)” of the contract
instance νβ in channel β (see Step 2). Bob now replies (in Step 3)
to νβ with his latest version of the contract instance (i.e. he calls
“register(Gw′, w′, sA)”, where sA is Alice’s signature). When Ingrid
learns about Bob’s version from νβ , she forwards this information
to να (see Step 4). Suppose that w > w′, i.e., Alice is honest, and
Bob is cheating by submitting and old version of the instance (the
other case is handled analogously). Then, both να and νβ decide
that (Gw , w) is the latest version of G (i.e. they “register Gw ”).
From the point of view of Ingrid, the most important security
feature of this procedure is that there is a consensus among να and
νβ about the latest state of G (even is Alice and Bob are both dis-
honest and playing against her). This consensus will be maintained
during the entire execution of G in instances να and νβ . This is
important, as otherwise she could lose coins.6 This invariant will be
maintained throughout the rest of the “forced execution procedure”.
After the state registration is over, Alice calls (in Step 5, Fig. 3)
a function “execute(f (m))” of να , “asking” να to execute f (m) on
the contract instance G starting from the registered state (Gw , w).
Since we want to maintain the “consensus invariant” mentioned
above, we cannot simply let να perform this execution immediately
after it receives this call. This is because some contracts may allow
both parties to call functions at the same time7, and Bob could