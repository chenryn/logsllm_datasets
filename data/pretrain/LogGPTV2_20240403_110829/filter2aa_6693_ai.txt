.B \-m68040
输出 68040 的 目标码.  
如果 编译器 按 基于 68040 的 系统 配置, 这个 选项 就是 缺省选项.
.TP
.B \-m68020\-40
输出 68040 的 目标码, 但是 不使用 新指令. 生成 的 代码 可以 在 68020/68881 
上, 也可以 在 68030 或 68040 上 较有效地 运行.
.TP
.B \-mfpa
输出 包含 SUN FPA 浮点指令 的 目标码.
.TP
.B \-msoft\-float
输出 包含 浮点库调用 的 目标码.
.I 警告:
所需的库 不是 GNU CC 的 组成部分. 一般说来 GCC 使用 该机型 本地 C 编译器 的
相应部件, 但是 作 交叉编译 时 却不能 直接 使用. 你 必须 自己 管理 提供 合适的
函数库 用于 交叉编译.
.TP
.B \-mshort
认为 \c
.B int\c
\& 类型 是 16 位宽, 相当于 \c
.B short int\c
\&.
.TP
.B \-mnobitfield
不使用 位域 (bit-field) 指令.  `\|\c
.B \-m68000\c
\&\|' 隐含指定了
`\|\c
.B \-mnobitfield\c
\&\|'.
.TP
.B \-mbitfield
使用 位域指令.  `\|\c
.B \-m68020\c
\&\|' 隐含指定了
`\|\c
.B \-mbitfield\c
\&\|'.  如果 你 使用 未改装的 gcc, 这就是 默认选项.
.TP
.B \-mrtd
采用 另一种 函数调用约定, 函数 接受 固定 数目的 参数, 用 \c
.B rtd
指令 返回, 该指令 返回时 弹出 栈内的 参数. 这个 方法 能够 使 调用者
节省 一条 指令, 因为 他 这里 不需要 弹出 参数.
.Sp
这种 调用约定 不兼容 UNIX 的 正常 调用. 因此 如果 你 需要 调用 UNIX
编译器 编译的 库函数, 你 就不能 使用 这个选项.
.Sp
此外, 所有 参数数量 可变地 函数 必须 提供 函数原型 (包括 \c
.B printf\c
\&); 否则 编译器 会生成 错误的 调用 代码.
.Sp
另外, 如果 调用 函数 时 携带了 过多的 参数, 编译器 将 生成 严重错误的
代码. (正常情况下, 多余的 参数 被 安全无害的 忽略.)
.Sp
68010 和 68020 处理器 支持 \c
.B rtd\c
\& 指令, 但是 68000 不支持.
.PP
下面是 针对 VAX 定义 的 `\|\c
.B \-m\c
\&\|' 选项:
.TP
.B \-munix
禁止 输出 某些 跳转指令 (\c
.B aobleq\c
\& 等等), VAX 的 UNIX 汇编器 无法 跨越 长范围 (long ranges) 进行 处理.
.TP
.B \-mgnu
如果 使用 GNU 汇编器, 则 输出 那些 跳转指令, 
.TP
.B \-mg
输出 g-format 浮点数, 取代 d-format.
.PP
下面是 SPARC 支持的 `\|\c
.B \-m\c
\&\|' 选项开关:
.PP
.B \-mfpu
.TP
.B \-mhard\-float
输出 包含 浮点指令 的 目标码. 这是 缺省选项.
.PP
.B \-mno\-fpu
.TP
.B \-msoft\-float
输出 包含 浮点库调用 的 目标码.
.I 警告:
没有 为 SPARC 提供 GNU 浮点库. 一般说来 使用 该机型 本地 C 编译器 的
相应部件, 但是 不能 直接 用于 交叉编译. 你 必须 自己 安排, 提供 用于
交叉编译 的 库函数.
.Sp
.B \-msoft\-float
改变了 输出文件 中的 调用约定; 因此 只有 用 这个 选项 编译
.I 整个
程序 才有 意义.
.PP
.B \-mno\-epilogue
.TP
.B \-mepilogue
使用
.B \-mepilogue
(缺省) 选项 时, 编译器 总是 把 函数 的 退出 代码 放在 函数 的 尾部.
任何 在 函数 中间 的 退出 语句 (例如 C 中的 return 语句) 将 产生出 
跳转指令 指向 函数 尾部.
.Sp
使用
.BR \-mno\-epilogue 
选项 时, 编译器 尽量 在 每个 函数 退出点 嵌入 退出 代码.
.PP
.B \-mno\-v8
.TP
.B \-mv8
.TP
.B \-msparclite
这三个 选项 选择 不同种类 的 SPARC 系统.
.Sp
默认情况下 (除非 特别为 Fujitsu SPARClite 配置), GCC 生成 SPARC v7 目标码.
.Sp
.B \-mv8
生成 SPARC v8 目标码. 他 和 v7 目标码 唯一的 区别 是, 编译器 生成 整数乘法
和 整数除法 指令, SPARC v8 支持 该指令, 而 v7 体系 不支持.
.Sp
.B \-msparclite
生成 SPARClite 目标码. 增加了 SPARClite 支持的 整数乘法, 整数除法单步扫描
(integer divide step and scan (ffs)) 指令. v7 体系 不支持 这些 指令.
.PP
.B \-mcypress
.TP
.B \-msupersparc
这两个 选项 选择 处理器 型号, 针对 处理器 进行 代码 优化.
.Sp
.B \-mcypress
选项 (默认项) 使 编译器 对 Cypress CY7C602 芯片 优化 代码, 
SparcStation/SparcServer 3xx 系列 使用 这种 芯片. 该选项 也 适用于 老式的
SparcStation 1, 2, IPX 等 机型..
.Sp
.B \-msupersparc
选项 使 编译器 对 SuperSparc 处理器 优化 代码, 
SparcStation 10, 1000 和 2000 系列 使用 这种 芯片. 同时 该选项 启用
完整的 SPARC v8 指令集.
.PP
下面是 针对 Convex 定义 的 `\|\c
.B \-m\c
\&\|' 选项:
.TP
.B \-mc1
输出 C1 的 目标码. 当 编译器 对 C1 配置时, 这是 默认选项.
.TP
.B \-mc2
输出 C2 的 目标码. 当 编译器 对 C2 配置时, 这是 默认选项.
.TP
.B \-margcount
在 每个 参数列表 的 前面 放置 一个 参数计数字 (argument count word). 
某些 不可移植 的 Convex 和 Vax 程序 需要 这个 参数计数字.
(调试器 不需要 他, 除非 函数 带有 变长参数 列表; 这个 信息 存放在 符号表 中.)
.TP
.B \-mnoargcount
忽略 参数计数字. 如果 你 使用 未改装 的 gcc, 这是 默认 选项.
.PP
下面是 针对 AMD Am29000 定义 的 `\|\c
.B \-m\c
\&\|' 选项:
.TP
.B \-mdw
生成的 目标码 认为 DW 置位, 就是说, 字节 和 半字 操作 由 硬件 直接 支持.
该选项 是 默认选项.
.TP
.B \-mnodw
生成的 目标码 认为 DW 没有 置位.
.TP
.B \-mbw
生成的 目标码 认为 系统 支持 字节 和 半字 写操作. 该选项 是 默认选项.
.TP
.B \-mnbw
生成的 目标码 认为 系统 不支持 字节 和 半字 写操作. 该选项 隐含 开启 了 `\|\c
.B \-mnodw\c
\&\|' 选项.
.TP
.B \-msmall
使用 小内存模式, 小内存模式 假设 所有 函数 的 地址 位于 某个 256 KB 段内,
或者 所有 函数 的 绝对地址 小于 256K. 这样 就可以 用 \c
.B call\c
\& 指令 代替 \c
.B const\c
\&, \c
.B consth\c
\&, \c
.B calli\c
\& 指令 序列.
.TP
.B \-mlarge
假设 不能 使用 \c
.B call\c
\& 指令; 这是 默认选项.
.TP
.B \-m29050
输出 Am29050 的 目标码.
.TP
.B \-m29000
输出 Am29000 的 目标码. 这是 默认选项.
.TP
.B \-mkernel\-registers
生成的 目标码 引用 \c
.B gr64-gr95\c
\& 寄存器 而不是
.B gr96-gr127\c
\& 寄存器. 该选项 可以 用于 编译 内核代码, 内核 需要 一组 全局寄存器,
这些 全局寄存器 和 用户模式 使用的 寄存器 完全无关.
.Sp
注意, 使用 这个 选项 时, `\|\c
.B \-f\c
\&\|' 选项 中的 寄存器名字 必须是 normal, user-mode, names.
.TP
.B \-muser\-registers
使用 普通 全局寄存器集 \c
.B gr96-gr127\c
\&.  这是 默认选项.
.TP
.B \-mstack\-check
在 每次 堆栈 调整 后 插入 一条 \c
.B _\|_msp_check\c
\& 调用. 这个选项 常用于 内核代码.
.PP
下面是 针对 Motorola 88K 体系 定义 的 `\|\c
.B \-m\c
\&\|' 选项:
.TP
.B \-m88000
生成的 目标码 可以 在 m88100 和 m88110 上 正常工作.
.TP
.B \-m88100
生成的 目标码 在 m88100 上 工作的 最好, 但也可以 在 m88110 上 运行.
.TP
.B \-m88110
生成的 目标码 在 m88110 上 工作的 最好, 可能 不能 在 m88100 上 运行.
.TP
.B \-midentify\-revision
在 汇编器 的 输出端 包含 一条 \c
.B ident\c
\& 指令, 记录 源文件名, 编译器名字 和 版本, 时标, 以及 使用的 编译选项,
.TP
.B \-mno\-underscores
在 汇编器 的 输出端, 符号名字 前面 不添加 下划线. 默认情况 是 在 每个
名字 前面 增加 下划线 前缀.
.TP
.B \-mno\-check\-zero\-division
.TP
.B \-mcheck\-zero\-division
早期 型号 的 88K 系统 在 除零操作 上 存在 问题, 特定情况下 许多 机器
无法 自陷. 使用 这些 选项 可以 避免包含 (或 可以 显明包含) 附加的 代码, 
这些代码 能够 检查 除零错, 发送 例外信号. GCC 所有 88K 的 配置 默认 使用 `\|\c
.B \-mcheck\-zero\-division\c
\&\|' 选项.
.TP
.B \-mocs\-debug\-info
.TP
.B \-mno\-ocs\-debug\-info
包含 (或忽略) 附加的 调试信息 (关于 每个 栈架结构 中 寄存器 的 使用),
88Open Object Compatibility Standard, \*(lqOCS\*(rq, 对 此信息 做了 说明.
GDB 不需要 这些 额外信息.
DG/UX, SVr4, 和 Delta 88 SVr3.2 的 默认配置 是 包含 调试信息, 其他
88k 机型 的 默认配置 是 忽略 这个信息.
.TP
.B \-mocs\-frame\-position
.TP
.B \-mno\-ocs\-frame\-position
强制 (或 不要求) 把 寄存器值 存储到 栈架结构 中的 指定位置 (按 OCS 的说明).
DG/UX, Delta88 SVr3.2 和 BCS 的 默认配置 使用 `\|\c
.B \-mocs\-frame\-position\c
\&\|' 选项; 其他 88k 机型 的 默认配置 是 `\|\c
.B \-mno\-ocs\-frame\-position\c
\&\|'.
.TP
.B \-moptimize\-arg\-area
.TP
.B \-mno\-optimize\-arg\-area
控制 如何 在 堆栈结构 中 存储 函数参数. `\|\c
.B \-moptimize\-arg\-area\c
\&\|' 节省 空间, 但是 有可能 宕掉 某些 调试器 (不是 GDB). `\|\c
.B \-mno\-optimize\-arg\-area\c
\&\|' 证实 比 标准选项 好. 默认情况下 GCC 不优化 参数域.
.TP
.B \-mshort\-data\-\c
.I num
通过 和 \c
.B r0\c
\& 关联, 产生 较小的 数据引用 (data reference), 这样 就可以 用 单指令
调入 一个 数值 (而不是 平常的 双指令). 用户 通过 选项中的 \c
.I num\c
\& 控制 改变 哪种 数据引用. 例如, 如果 你 指定了 `\|\c
.B \-mshort\-data\-512\c
\&\|', 那么 受影响的 数据引用 是 小于 512 字节 的 数据移动. \c
.B \-mshort\-data\-\c
.I num\c
选项 对 大于 64K 的 \c
.I num \c
无效.
.PP
.B \-mserialize-volatile
.TP
.B \-mno-serialize-volatile
产生, 或 不产生 代码 来保证 对 易变内存访问 的 结果一致.
.Sp