# An Empirical Study of Web Resource Manipulation in Real-World Mobile Applications

**Authors:**
- Xiaohan Zhang, Yuan Zhang, Qianqian Mo, Hao Xia, Zhemin Yang, Min Yang (Fudan University)
- Xiaofeng Wang (Indiana University, Bloomington)
- Long Lu (Northeastern University)
- Haixin Duan (Tsinghua University)

**Publication:**
- [Proceedings of the 27th USENIX Security Symposium](https://www.usenix.org/conference/usenixsecurity18/presentation/zhang-xiaohan)
- **Date:** August 15â€“17, 2018
- **Location:** Baltimore, MD, USA
- **ISBN:** 978-1-939133-04-5
- **Open Access Sponsored by:** USENIX

## Abstract

Mobile applications have become the primary means for accessing web services. Both Android and iOS platforms offer in-app web browsers that facilitate integration with web services through a set of web resource manipulation APIs. Previous research has highlighted the attack surfaces of these APIs and proposed several defense mechanisms. However, no prior work has provided evidence of real-world attacks, measured their impact, or evaluated the effectiveness of proposed defenses against actual threats.

This paper aims to fill this gap with a large-scale empirical study of web resource manipulation behaviors in real-world Android applications. We define the problem as cross-principal manipulation (XPM) of web resources and develop an automated tool, XPMChecker, to detect XPM behaviors. Analyzing 80,694 apps from Google Play, we find that 49.2% of manipulation cases are XPM, 4.8% of apps exhibit XPM behaviors, and over 70% of XPM behaviors target top web sites. More alarmingly, we identified 21 apps with clear malicious intent, such as stealing and abusing cookies, collecting user credentials, and impersonating legitimate entities. This is the first study to demonstrate the presence of XPM threats in real-world apps, and we also confirm these threats in iOS apps. Our experiments show that popular web service providers are largely unaware of such threats. Our findings contribute to a better understanding of these threats and the development of more effective and usable countermeasures.

## 1. Introduction

Today, different web services are often integrated into a single mobile application to provide users with more flexible and powerful capabilities. Mainstream mobile platforms, including Android and iOS, feature in-app web browsers like WebView (Android) and UIWebView/WKWebView (iOS) to run web content. These platforms also provide web resource manipulation APIs to customize browser behavior and enhance web app functionalities. For example, both Android and iOS offer the `evaluateJavascript` API, which allows host apps to inject JavaScript code into web pages and retrieve results. However, these APIs lack origin-based access control, enabling host apps to manipulate web resources from any origin managed by the WebView. This can lead to severe security and privacy threats.

Previous work has discussed these threats, but no empirical study has quantified their prevalence or impact in real-world applications. Existing defensive mechanisms have been evaluated using hand-crafted attack samples, without considering real-world deployment requirements. This paper addresses these gaps by conducting a large-scale empirical study on real-world Android apps, as they are easily collected in large volumes and dominate the mobile market.

## 2. Problem Definition

### 2.1 Motivating Example

Consider two apps: App A, the official Facebook app, and App B, a standalone chatting app called "Chatous." Both apps use WebView to load `www.facebook.com` and use the `CookieManager.getCookie` API to get cookies. While it is normal for App A and the Facebook Login SDK (App B) to access Facebook cookies, it is suspicious for Chatous (App B) to do so. Manual inspection confirmed that Chatous abuses Facebook cookies to collect user data.

### 2.2 Cross-Principal Manipulation (XPM)

We define the security principal of the manipulating code as the App Principal (AP) and the security principal of the manipulated web resource as the Web Principal (WP). Inspired by the same-origin policy, we define Cross-Principal Manipulation (XPM) as when the AP is not the same as the WP at a web resource manipulation point. The equation for recognizing XPM is:

\[ \text{IS XPM}(mp) := \text{AP}_{mp} \neq \text{WP}_{mp} \]

### 2.3 Web Resource Manipulation APIs

Both Android and iOS provide numerous web resource manipulation APIs, which can be categorized into four types based on the type of manipulated web resources:

1. **Local Storage Manipulation APIs**: These APIs allow access to sensitive data stored locally, such as HTTP cookies, Web Storage, and Web SQL Database. For example, `CookieManager.getCookie(String url)` can retrieve cookies for any domain.
2. **Web Content Manipulation APIs**: These APIs enable injection of JavaScript code into web pages, granting privileges of the injected domain. For example, `evaluateJavascript`.
3. **Web Address Manipulation APIs**: These APIs manage the current URL of the WebView, such as `onPageFinished` and `shouldOverrideUrlLoading`.
4. **Network Traffic Manipulation APIs**: These APIs control network requests, such as `shouldInterceptRequest` and `shouldStartLoadWithRequest`.

## 3. Methodology

To systematically understand the threats of web resource manipulation, we developed XPMChecker, an automated tool designed to recognize XPM behaviors in real-world apps. The key challenges include identifying multiple principals within an app, extracting the principal of the manipulating code, and determining if the principals match. XPMChecker is not intended to detect all possible XPMs but is designed for large-scale measurement studies.

## 4. Results and Findings

Applying XPMChecker to 80,694 apps from 48 categories in Google Play, we found that:

- 49.2% of manipulation points are cross-principal.
- 4.8% of apps have XPM behaviors.
- 63.6% of cross-principal manipulation points originate from libraries.
- Over 70% of XPM points manipulate top popular web services.

Most XPM behaviors are necessary for improving usability, but some implement OAuth implicit flow insecurely. We confirmed the presence of XPM behaviors with malicious intent in both Android and iOS apps, including stealing cookies, collecting user credentials, and impersonating legitimate parties. Our experiments also revealed that most web service providers are unaware of these risks and cannot effectively prevent users from accessing sensitive pages in WebView.

## 5. Conclusion

This paper makes the following contributions:

- **Definition of XPM**: We define the threats in web resource manipulation as cross-principal manipulation and perform a large-scale study of such threats in real-world apps.
- **Automated Tool**: We design an automatic tool, XPMChecker, to identify cross-principal manipulations in Android apps, overcoming several non-trivial challenges.
- **New Insights**: Our study provides strong evidence for the presence of XPM behaviors with malicious intent in real-world apps, showing that the problem is more severe than previously thought and exists in both Android and iOS. Our findings and evaluations of current defense mechanisms bring new insights for future defense design.

By providing a comprehensive understanding of XPM threats, our work highlights the need for more effective and practical defense mechanisms in the mobile ecosystem.