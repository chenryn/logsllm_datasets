title:An Empirical Study of Web Resource Manipulation in Real-world Mobile
Applications
author:Xiaohan Zhang and
Yuan Zhang and
Qianqian Mo and
Hao Xia and
Zhemin Yang and
Min Yang and
Xiaofeng Wang and
Long Lu and
Hai-Xin Duan
An Empirical Study of Web Resource Manipulation 
in Real-world Mobile Applications
Xiaohan Zhang, Yuan Zhang, Qianqian Mo, Hao Xia, Zhemin Yang,  
and Min Yang, Fudan University; Xiaofeng Wang, Indiana University, Bloomington; 
Long Lu, Northeastern University; Haixin Duan, Tsinghua University
https://www.usenix.org/conference/usenixsecurity18/presentation/zhang-xiaohan
This paper is included in the Proceedings of the 
27th USENIX Security Symposium.
August 15–17, 2018 • Baltimore, MD, USA
ISBN 978-1-939133-04-5
Open access to the Proceedings of the 27th USENIX Security Symposium is sponsored by USENIX.An Empirical Study of Web Resource Manipulation in Real-world Mobile
Applications
Xiaohan Zhang1,4, Yuan Zhang1,4, Qianqian Mo1,4, Hao Xia1,4, Zhemin Yang1,4, Min Yang1,2,3,4,
Xiaofeng Wang5, Long Lu6, and Haixin Duan7
1School of Computer Science, Fudan University
2Shanghai Institute of Intelligent Electronics & Systems
3Shanghai Institute for Advanced Communication and Data Science
4Shanghai Key Laboratory of Data Science, Fudan University
5Indiana University Bloomington , 6Northeastern University , 7Tsinghua University
Abstract
Mobile apps have become the main channel for access-
ing Web services. Both Android and iOS feature in-
app Web browsers that support convenient Web service
integration through a set of Web resource manipulation
APIs. Previous work have revealed the attack surfaces of
Web resource manipulation APIs and proposed several
defense mechanisms. However, none of them provides
evidence that such attacks indeed happen in the real
world, measures their impacts, and evaluates the pro-
posed defensive techniques against real attacks.
This paper seeks to bridge this gap with a large-scale
empirical study on Web resource manipulation behaviors
in real-world Android apps. To this end, we ﬁrst deﬁne
the problem as cross-principal manipulation (XPM) of
Web resources, and then design an automated tool named
XPMChecker to detect XPM behaviors in apps. Through
a study on 80,694 apps from Google Play, we ﬁnd that
49.2% of manipulation cases are XPM, 4.8% of the
apps have XPM behaviors, and more than 70% XPM
behaviors aim at top Web sites. More alarmingly, we
discover 21 apps with obvious malicious intents, such as
stealing and abusing cookies, collecting user credentials
and impersonating legitimate parties. For the ﬁrst time,
we show the presence of XPM threats in real-world apps.
We also conﬁrm the existence of such threats in iOS
apps. Our experiments show that popular Web service
providers are largely unaware of such threats. Our
measurement results contribute to better understanding
of such threats and the development of more effective
and usable countermeasures.
1
Introduction
Nowadays, different Web services are usually integrated
together to provide users with more ﬂexible and powerful
capabilities. These integrated services are mostly deliv-
ered to the mobile platform today, with multiple services
built into a single app. For the convenience of such
an integration, mainstream mobile platforms (including
Android and iOS) feature in-app Web browsers to run
Web content. Examples of the browsers include Web-
View [9] for Android and UIWebView/WKWebView for
iOS [8, 10]. For simplicity of presentation, we call them
WebViews throughout the paper.
Based on WebViews, mobile systems further provide
app developers with Web resource manipulation APIs
to customize browser behaviors and enrich Web app
functionalities. For example, Android and iOS both have
an API named evaluateJavascript that allows host apps
to inject JavaScript code into the Web pages and get
the result. However, these Web resource manipulation
APIs lack origin-based access control, which means
application code can manipulate Web resources from all
origins managed by the WebView through these APIs.
For example, if a host app has a WebView which loads
“www.facebook.com”, then it can use evaluateJavascript
API to run JavaScript in the Facebook Web pages and get
user data from Facebook. As a result, this capability of
cross-origin manipulation would lead to severe security
and privacy threats to user data.
Some previous work have discussed this kind of
threats in the context of integrating WebView to mobile
apps. Luo et al. [32, 33] showed that malicious apps
can attack WebView by injecting JavaScript code,
snifﬁng and hijacking Web navigation events [32], and
hijacking touch events at the Web pages [33]. Chen et
al. [16] and Mohammed et al. [43] also demonstrated
OAuth protocol can be attacked by a malicious app.
Meanwhile, defensive mechanisms [41, 43, 20] have
also been proposed to regulate the accesses from host
apps to Web resources.
Despite the existing works, there lacks an empirical
study to understand how severe this problem is in real-
world. In fact, none of existing work provides evidences
for the presence of such threats.
Instead, they discuss
the attacks conceptually. Furthermore, existing defensive
USENIX Association
27th USENIX Security Symposium    1183
systems are evaluated with hand-crafted attack samples,
without considering the special requirements in real-
world deployment. Overall speaking, lacking such an
empirical study may make us misunderstand the impact
of the problem and limit the practicalness of proposed
solutions.
This paper seeks to perform a large-scale empirical
study on real-world apps to systematically understand
the existence and impact of such threats. Since Android
apps are easy to be collected in a large volume and
Android platform dominates the mobile market, our
empirical study is based on Android platform.
First, since not all manipulations cause security is-
sues, we need a clear deﬁnition about the threat in
Web resource manipulation.
Inspired by the same-
origin policy in Web platforms, we deﬁne the threats
in Web resource manipulation as cross-principal
manipulation (XPM). In our deﬁnition, only manipu-
lating code from a different principal to the manipulated
Web resource will be ﬂagged as suspicious.
Second, to allow measuring the Web resource manip-
ulation problem on a large scale, we further design a tool
to automatically recognize XPM behaviors in real-world
apps. The key challenges are that:
there are multiple
principals inside an app;
there is no obvious way to
extract the principal of the manipulating code; it is hard
to determine whether the principal of the manipulating
code and that of the manipulated Web resource are the
same. Our proposed tool, named XPMChecker, features
several new techniques to automatically recognize XPMs
in apps. Note that XPMChecker is not aimed to reliably
detect all possible cross-principal manipulations.
In-
stead, it is designed for a large-scale measurement study.
Thus, we do not consider a future attacker who tries to
evade XPMChecker.
Finally, we apply XPMChecker to analyze 80,694
apps from 48 categories in Google Play. Our evaluation
shows that XPMChecker achieves high precision and
recall in recognizing XPM behaviors. To systematically
understand the threats of Web resource manipulation,
we conduct several experiments and studies from these
perspectives: the prevalence of the XPM behaviors, the
breakdown of XPM behaviors, the awareness of such
risks to service providers and the implications to current
defenses. Our study leads to several insightful ﬁndings
for the community to understand the impact of Web
resource manipulation problem, conﬁrms the threat of
XPM behaviors with real-world samples and calls into
rethinking of existing defensive mechanisms.
Findings. We ﬁnd that 49.2% of manipulation points
are cross-principal, 4.8% of apps have XPM behaviors,
63.6% of cross-principal manipulation points originate
from libraries, and more than 70% of XPM points manip-
ulate top popular Web services. We also ﬁnd that most of
XPM behaviors are necessary to improve the usability for
mobile users, some XPM behaviors implement OAuth
implicit ﬂow in an unsafe way, and we conﬁrm the Web
resource manipulation behaviors with obvious malicious
intents for the ﬁrst time in real-world Android apps
and iOS apps. More speciﬁcally, we ﬁnd apps can
abuse Web resource manipulation APIs to steal cookies,
collect user credentials and impersonate the identities
of legitimate parties, and a large number of users have
been affected. We also perform several experiments to
test the awareness of such risks to service providers,
and ﬁnd that most Web service providers are unaware
of these risks and can not effectively prevent users from
accessing sensitive pages in WebView.
Finally, our
measurement results also actuate us to rethink existing
defensive mechanisms and propose new suggestions for
future defense design.
In summary, we make the following contributions.
• We deﬁne the threats in Web resource manipula-
tion as cross-principal manipulation (XPM), and
perform a large-scale study of such threats in real-
world apps.
• We design an automatic tool which overcomes
several non-trivial challenges to identify cross-
principal manipulations in Android apps.
• We present new results and ﬁndings based on a
study of 80,694 apps. Our results provide strong
evidences for the presence of XPM behaviors with
obvious malicious intents in real-world apps, and
show that this problem is more severe than we think
and exists in both Android and iOS. Our ﬁndings
and evaluations on current defense mechanisms also
bring new insights for future defense design.
2 Web Resource Manipulation
This paper seeks to understand the threats of Web re-
source manipulation in real-world apps. Although this
kind of threats have been conceptually described in
existing work [32, 33, 43, 16], none of them system-
atically deﬁnes this problem. To support a large-scale
measurement study, we need to clearly deﬁne the threats
in Web resource manipulation.
2.1 Motivating Example
We use a motivating example to ease the illustration of
the security issues during Web resource manipulation.
As shown in Figure 1, there are two apps, where app
A is the ofﬁcial Facebook app and app B is a stand-
alone chatting app called “Chatous”. App B incorporates
Facebook Login SDK to support user login with their
1184    27th USENIX Security Symposium
USENIX Association
as App Principal (AP), and the security principal
of the manipulated Web resource as Web principal
(WP). Inspired by the same-origin policy in Web plat-
forms, we study the threats in Web resource manip-
ulation by considering both the app principal and the
Web principal.
Speciﬁcally, we deﬁne the concept
of Cross-Principal Manipulation (XPM) of Web
resources, when the app principal is not the same as
the Web principal at a Web resource manipulation point.
According to its deﬁnition, whether a Web resource
manipulation point (named as mp) is XPM can be rec-
ognized with the following equation.
IS XPM(mp) := APmp (cid:54)= W Pmp
(1)
Threat Model. This paper studies the threats in Web
resource manipulation. We consider the host app is not
trusted, i.e. it may attack the Web resources by stealing
sensitive data, breaking code/data integrity, etc. In our
threat model, there are two kinds of attackers in the host
app: the host app itself and the incorporated third-party
libraries/SDKs. We assume the underlying operating
system and Java runtime is trusted and not compromised.
A fraudulent attacker may use low-level techniques such
as directly manipulating the process memory, to evade
analysis and detection. However, we do not consider
such low-level attacks that may be performed by host
apps, since Web resource manipulation APIs are widely
supported by mainstream mobile platforms. This pa-
per focuses on measuring the security impact of Web
resource manipulation APIs in real-world applications,
while does not aim to study all kinds of threats in app-
web interaction, which has been well-studied by existing
work [32, 33, 17, 23, 36, 48].
Besides, we only consider Web resource manipulation
problem in apps using system-provided Web browsers,
i.e. WebView on Android and UIWebView/WKWe-
bView on iOS. Certainly, host apps may use hybrid
frameworks such as Cordova [1] or customized browsers
such as customized Chromium [7],
to integrate Web
services. Considering WebViews has standard interfaces,
good compatibility and widely used by most apps, our
study mainly focuses on WebView platform. Actually,
a similar deﬁnition of cross-principal Web resource ma-
nipulation can be given for these hybrid platforms.
2.3 Web Resource Manipulation APIs
Figure 1 gives an example of Web resource manipulation
using CookieManager.getCookie API in Android plat-
form. However, the cross-manipulation problem is not
speciﬁc to this API and not limited to Android platform.
Actually, both Android and iOS provide plenty of Web
resource manipulation APIs that can be used by the
host apps to manipulate the integrated Web resources,
Figure 1: A motivating case where three classes in two
apps use CookieManager.getCookie API to get cookies
from www.facebook.com.
Facebook accounts. There are three Java classes (C1, C2
and C3) in the two apps which use WebViews to load
www.facebook.com and use CookieManager.getCookie
API to get cookies from www.facebook.com.
For C1 which belongs to the ofﬁcial Facebook app
and C2 which belongs to the ofﬁcial Facebook Lo-
gin SDK, it is quite normal for them to access cook-
ies from www.facebook.com. However, since C3 be-
longs to “Chatous” which is a different party to Face-
book, it is quite susipicious for C3 to get cookies from
www.facebook.com. After a manual inspection on C3,
we conﬁrm that “Chatous” abuses Facebook cookies to
collect user data in Facebook (more details are discussed
in Section 4.3.3).
The insight of this example is that when Web resources
are manipulated by app code, if the manipulating code
and the manipulated Web resource belong to the same
party, it can be regarded as quite normal. However,
if they do not originate from same party, it may bring
threats to the manipulated Web resources.
2.2 Problem Deﬁnition
The above example demonstrates the threats when Web
resource manipulation APIs are used by a security prin-
cipal to manipulate Web resources belong to another
security principal. To clearly deﬁne this problem, this
section introduces some new concepts.
Cross Principal Manipulation. We deﬁne where app
code use Web resource manipulation APIs to manipu-
late Web resources as Web Resource Manipulation
Points. At each Web resource manipulation point,
there are two participated parties, i.e. the manipulating
code and the manipulated Web resource. We desig-
nate the security principal of the manipulating code
USENIX Association
27th USENIX Security Symposium    1185
 !"#$%&’(#)*$$+&+(,(-(&.,/ 0"#$%&’(#)*$$+&1-,)2-(3&4,131,5 6"#$%&#7(,$89&#7(,$89&%(-(:)29&;(#)*$$+1)?@AAB@"B;(#)*$$+BC’’1#1(3B@DD@AAB."B 7(,$89B(DDBB(-EB)%*)EE)EB;(#)*$$+BFGH:), $$+1)I(cid:263)’(#)*$$+&#$%(cid:264)J???&’(#)*$$+&#$%Table 1: Representative Web resource manipulation APIs on Android and iOS.
Web Resources
Local Storage
Web Content
Web Address
Android WebView
CookieManager.getCookie
loadUrlJs1,
evaluateJavascript
onPageFinished,
shouldOverrideUrlLoading
iOS UIWebView
NSHTTPCookieStorage
iOS WKWebView
WKWebsiteDataStore
stringByEvaluatingJavascriptFromString
evaluateJavascript
\
\
Network Trafﬁc
shouldInterceptRequest
shouldStartLoadWithRequest
decidePolicyForNavigationAction,
decidePolicyForNavigationResponse
1 void loadUrl(String url) is an API that loads the given “url”. However, it can also be used to load JavaScript into the Web page when the “url” is some JavaScript code.
In this paper we only consider the latter usage as Web resource manipulation API, and name it “loadUrlJs” to differ from the former usage.
including quite sensitive resources, such as local storage
and network trafﬁc.
To better understand the impact of the problem of
cross-principal Web resource manipulation, we perform
a thorough study of the WebView APIs provided by
Android and iOS platform. According to the type
of the manipulated Web resources, we classify these
APIs into the following four categories and select some
representative APIs for both platforms in Table 1.
1. Local Storage Manipulation APIs. WebView may
keep sensitive data on the local storage of the
device, such as HTTP cookies, Web Storage1 and
Web SQL Database. For example, attackers can
use CookieManager.getCookie(String url) to get the
cookies for any domain speciﬁed by “url”.
2. Web Content Manipulation APIs. Web content
includes HTML, JavaScript and CSS of Web sites.
For example, attackers can use evaluateJavascript
API to inject JavaScript code into Web pages and
get the privileges of the injected domain.
3. Web Address Manipulation APIs. Web address is
the current URL for the WebView which contains