               Sort Key: tbl_user_2.id  
               ->  Foreign Scan on public.tbl_user_2  (cost=100.00..146.12 rows=1204 width=44)  
                     Output: tbl_user_2.info, tbl_user_2.crt_time, tbl_user_2.id  
                     Remote SQL: SELECT id, info, crt_time FROM public.tbl_user  
         ->  Sort  (cost=850.83..861.60 rows=4308 width=52)  
               Output: tbl_log2_0.id, tbl_log2_0.orderid, tbl_log2_0.info, tbl_log2_0.crt_time  
               Sort Key: tbl_log2_0.id  
               ->  Append  (cost=100.00..590.78 rows=4308 width=52)  
                     ->  Foreign Scan on public.tbl_log2_0  (cost=100.00..142.31 rows=1077 width=52)  
                           Output: tbl_log2_0.id, tbl_log2_0.orderid, tbl_log2_0.info, tbl_log2_0.crt_time  
                           Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_0  
                     ->  Foreign Scan on public.tbl_log2_1  (cost=100.00..142.31 rows=1077 width=52)  
                           Output: tbl_log2_1.id, tbl_log2_1.orderid, tbl_log2_1.info, tbl_log2_1.crt_time  
                           Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_1  
                     ->  Foreign Scan on public.tbl_log2_2  (cost=100.00..142.31 rows=1077 width=52)  
                           Output: tbl_log2_2.id, tbl_log2_2.orderid, tbl_log2_2.info, tbl_log2_2.crt_time  
                           Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_2  
                     ->  Foreign Scan on public.tbl_log2_3  (cost=100.00..142.31 rows=1077 width=52)  
                           Output: tbl_log2_3.id, tbl_log2_3.orderid, tbl_log2_3.info, tbl_log2_3.crt_time  
                           Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_3  
   ->  Merge Join  (cost=1058.55..1453.58 rows=25934 width=92)  
         Output: tbl_log3_0.id, tbl_log3_0.orderid, tbl_log3_0.info, tbl_log3_0.crt_time, tbl_user_3.info, tbl_user_3.crt_time  
         Merge Cond: (tbl_user_3.id = tbl_log3_0.id)  
         ->  Sort  (cost=207.73..210.74 rows=1204 width=44)  
               Output: tbl_user_3.info, tbl_user_3.crt_time, tbl_user_3.id  
               Sort Key: tbl_user_3.id  
               ->  Foreign Scan on public.tbl_user_3  (cost=100.00..146.12 rows=1204 width=44)  
                     Output: tbl_user_3.info, tbl_user_3.crt_time, tbl_user_3.id  
                     Remote SQL: SELECT id, info, crt_time FROM public.tbl_user  
         ->  Sort  (cost=850.83..861.60 rows=4308 width=52)  
               Output: tbl_log3_0.id, tbl_log3_0.orderid, tbl_log3_0.info, tbl_log3_0.crt_time  
               Sort Key: tbl_log3_0.id  
               ->  Append  (cost=100.00..590.78 rows=4308 width=52)  
                     ->  Foreign Scan on public.tbl_log3_0  (cost=100.00..142.31 rows=1077 width=52)  
                           Output: tbl_log3_0.id, tbl_log3_0.orderid, tbl_log3_0.info, tbl_log3_0.crt_time  
                           Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_0  
                     ->  Foreign Scan on public.tbl_log3_1  (cost=100.00..142.31 rows=1077 width=52)  
                           Output: tbl_log3_1.id, tbl_log3_1.orderid, tbl_log3_1.info, tbl_log3_1.crt_time  
                           Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_1  
                     ->  Foreign Scan on public.tbl_log3_2  (cost=100.00..142.31 rows=1077 width=52)  
                           Output: tbl_log3_2.id, tbl_log3_2.orderid, tbl_log3_2.info, tbl_log3_2.crt_time  
                           Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_2  
                     ->  Foreign Scan on public.tbl_log3_3  (cost=100.00..142.31 rows=1077 width=52)  
                           Output: tbl_log3_3.id, tbl_log3_3.orderid, tbl_log3_3.info, tbl_log3_3.crt_time  
                           Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_3  
(101 rows)  
Time: 1.692 ms  
master=> explain verbose select * from tbl_log order by id limit 1;  
                                                  QUERY PLAN                                                     
---------------------------------------------------------------------------------------------------------------  
 Limit  (cost=1600.32..1600.39 rows=1 width=52)  
   Output: tbl_log0_0.id, tbl_log0_0.orderid, tbl_log0_0.info, tbl_log0_0.crt_time  
   ->  Merge Append  (cost=1600.32..2774.54 rows=17232 width=52)  
         Sort Key: tbl_log0_0.id  
         ->  Foreign Scan on public.tbl_log0_0  (cost=100.00..146.46 rows=1077 width=52)  
               Output: tbl_log0_0.id, tbl_log0_0.orderid, tbl_log0_0.info, tbl_log0_0.crt_time  
               Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_0 ORDER BY id ASC NULLS LAST  
         ->  Foreign Scan on public.tbl_log0_1  (cost=100.00..146.46 rows=1077 width=52)  
               Output: tbl_log0_1.id, tbl_log0_1.orderid, tbl_log0_1.info, tbl_log0_1.crt_time  
               Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_1 ORDER BY id ASC NULLS LAST  
         ->  Foreign Scan on public.tbl_log0_2  (cost=100.00..146.46 rows=1077 width=52)  
               Output: tbl_log0_2.id, tbl_log0_2.orderid, tbl_log0_2.info, tbl_log0_2.crt_time  
               Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_2 ORDER BY id ASC NULLS LAST  
         ->  Foreign Scan on public.tbl_log0_3  (cost=100.00..146.46 rows=1077 width=52)  
               Output: tbl_log0_3.id, tbl_log0_3.orderid, tbl_log0_3.info, tbl_log0_3.crt_time  
               Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_3 ORDER BY id ASC NULLS LAST  
         ->  Foreign Scan on public.tbl_log1_0  (cost=100.00..146.46 rows=1077 width=52)  
               Output: tbl_log1_0.id, tbl_log1_0.orderid, tbl_log1_0.info, tbl_log1_0.crt_time  
               Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_0 ORDER BY id ASC NULLS LAST  
         ->  Foreign Scan on public.tbl_log1_1  (cost=100.00..146.46 rows=1077 width=52)  
               Output: tbl_log1_1.id, tbl_log1_1.orderid, tbl_log1_1.info, tbl_log1_1.crt_time  
               Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_1 ORDER BY id ASC NULLS LAST  
         ->  Foreign Scan on public.tbl_log1_2  (cost=100.00..146.46 rows=1077 width=52)  
               Output: tbl_log1_2.id, tbl_log1_2.orderid, tbl_log1_2.info, tbl_log1_2.crt_time  
               Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_2 ORDER BY id ASC NULLS LAST  
         ->  Foreign Scan on public.tbl_log1_3  (cost=100.00..146.46 rows=1077 width=52)  
               Output: tbl_log1_3.id, tbl_log1_3.orderid, tbl_log1_3.info, tbl_log1_3.crt_time  
               Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_3 ORDER BY id ASC NULLS LAST  
         ->  Foreign Scan on public.tbl_log2_0  (cost=100.00..146.46 rows=1077 width=52)  
               Output: tbl_log2_0.id, tbl_log2_0.orderid, tbl_log2_0.info, tbl_log2_0.crt_time  
               Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_0 ORDER BY id ASC NULLS LAST  
         ->  Foreign Scan on public.tbl_log2_1  (cost=100.00..146.46 rows=1077 width=52)  
               Output: tbl_log2_1.id, tbl_log2_1.orderid, tbl_log2_1.info, tbl_log2_1.crt_time  
               Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_1 ORDER BY id ASC NULLS LAST  
         ->  Foreign Scan on public.tbl_log2_2  (cost=100.00..146.46 rows=1077 width=52)  
               Output: tbl_log2_2.id, tbl_log2_2.orderid, tbl_log2_2.info, tbl_log2_2.crt_time  
               Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_2 ORDER BY id ASC NULLS LAST  
         ->  Foreign Scan on public.tbl_log2_3  (cost=100.00..146.46 rows=1077 width=52)  
               Output: tbl_log2_3.id, tbl_log2_3.orderid, tbl_log2_3.info, tbl_log2_3.crt_time  
               Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_3 ORDER BY id ASC NULLS LAST  
         ->  Foreign Scan on public.tbl_log3_0  (cost=100.00..146.46 rows=1077 width=52)  
               Output: tbl_log3_0.id, tbl_log3_0.orderid, tbl_log3_0.info, tbl_log3_0.crt_time  
               Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_0 ORDER BY id ASC NULLS LAST  
         ->  Foreign Scan on public.tbl_log3_1  (cost=100.00..146.46 rows=1077 width=52)  
               Output: tbl_log3_1.id, tbl_log3_1.orderid, tbl_log3_1.info, tbl_log3_1.crt_time  
               Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_1 ORDER BY id ASC NULLS LAST  
         ->  Foreign Scan on public.tbl_log3_2  (cost=100.00..146.46 rows=1077 width=52)  
               Output: tbl_log3_2.id, tbl_log3_2.orderid, tbl_log3_2.info, tbl_log3_2.crt_time  
               Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_2 ORDER BY id ASC NULLS LAST  
         ->  Foreign Scan on public.tbl_log3_3  (cost=100.00..146.46 rows=1077 width=52)  
               Output: tbl_log3_3.id, tbl_log3_3.orderid, tbl_log3_3.info, tbl_log3_3.crt_time  
               Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_3 ORDER BY id ASC NULLS LAST  
(52 rows)  
Time: 1.264 ms  
master=> explain verbose select * from tbl_log join tbl_user using (id) where id=1;  
                                                       QUERY PLAN                                                          
-------------------------------------------------------------------------------------------------------------------------  
 Nested Loop  (cost=200.00..621.07 rows=120 width=92)  
   Output: tbl_log0_0.id, tbl_log0_0.orderid, tbl_log0_0.info, tbl_log0_0.crt_time, tbl_user_0.info, tbl_user_0.crt_time  
   ->  Append  (cost=100.00..494.35 rows=20 width=52)  
         ->  Foreign Scan on public.tbl_log0_0  (cost=100.00..123.56 rows=5 width=52)  
               Output: tbl_log0_0.id, tbl_log0_0.orderid, tbl_log0_0.info, tbl_log0_0.crt_time  
               Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_0 WHERE ((id = 1))  
         ->  Foreign Scan on public.tbl_log0_1  (cost=100.00..123.56 rows=5 width=52)  
               Output: tbl_log0_1.id, tbl_log0_1.orderid, tbl_log0_1.info, tbl_log0_1.crt_time  
               Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_1 WHERE ((id = 1))  
         ->  Foreign Scan on public.tbl_log0_2  (cost=100.00..123.56 rows=5 width=52)  
               Output: tbl_log0_2.id, tbl_log0_2.orderid, tbl_log0_2.info, tbl_log0_2.crt_time  
               Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_2 WHERE ((id = 1))  
         ->  Foreign Scan on public.tbl_log0_3  (cost=100.00..123.56 rows=5 width=52)  
               Output: tbl_log0_3.id, tbl_log0_3.orderid, tbl_log0_3.info, tbl_log0_3.crt_time  
               Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_3 WHERE ((id = 1))  
   ->  Materialize  (cost=100.00..125.23 rows=6 width=44)  
         Output: tbl_user_0.info, tbl_user_0.crt_time, tbl_user_0.id  
         ->  Append  (cost=100.00..125.20 rows=6 width=44)  
               ->  Foreign Scan on public.tbl_user_0  (cost=100.00..125.17 rows=6 width=44)  
                     Output: tbl_user_0.info, tbl_user_0.crt_time, tbl_user_0.id  
                     Remote SQL: SELECT id, info, crt_time FROM public.tbl_user WHERE ((id = 1))  
(21 rows)  
Time: 1.018 ms  
```  
## 小结  
在同一个vpc内的所有rds pg实例，可以互联互通。甚至和mysql实例也能互联互通。  
利用PostgreSQL的postgres_fdw, partition table的接口，可以实现数据库的分库分表。但是目前还不是特别的完善，未来PG社区可能会在这个形态下发力(bruce 多次公开分享了社区使用postgres_fdw做sharding的想法)，在性能、功能方面实现更完美的操作。  
- 目前这周方案使用起来较为复杂  
- 如果是简单的增删改查操作，PG单库已经可以提供很强的能力 [《PostgreSQL 11 1万亿 tpcb 性能测试 on 阿里云ECS + ESSD + zfs/lvm2条带 + block_size=32K》](../201809/20180919_01.md)    
- 如果业务确定要用分库分表，一定要明确是分析业务，还是oltp业务。    
- oltp 业务建议使用citus, antdb这样的形态  
- （或者应用层决策分库，例如很多paas类场景，例如企业erp，每个企业对应一套数据库，没有跨企业的数据操作，所以可以用schema或database隔离企业数据，在业务层面实现简单分库分表效率是最高的），  
- ap业务建议使用greenplum。   
## 参考  
[《阿里云 RDS PostgreSQL 云盘版支持 mysql_fdw - 直接读写mysql数据，作为小型实时数据仓库》](../201911/20191112_03.md)    
[《阿里云RDS PG 11开放dblink, postgres_fdw权限》](../201910/20191023_01.md)    
https://www.postgresql.org/docs/12/postgres-fdw.html  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")