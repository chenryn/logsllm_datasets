### 优化后的文本

#### 1. 引言
当用户从Wikipedia跳转到YouTube时，即使用户是匿名的，服务提供商（SP）仍能通过跨站请求了解到用户之前访问过Wikipedia。因此，SP可以获取关于用户在其他SP上的行为信息。为了解决这一问题，Brickell和Li [8] 提出了一种方法来不可链接地撤销被破坏的可信平台模块（TPMs）[34]。尽管他们的研究重点在于撤销被破坏的硬件而非将不良用户列入黑名单，但其构造与我们的方案相似。两种解决方案均使用协议来证明多个离散对数的不等性，以证明用户未被撤销或列入黑名单。然而，他们的签名并未绑定验证者的身份，且仅一次认证就可能导致全局撤销。相比之下，我们的方案允许验证者之间共享或不共享黑名单条目，从而提供更多的隐私保护。此外，他们的方案基于RSA，而我们的方案则基于配对。

#### 2. 结论
我们论证了需要支持匿名黑名单和主观评判的匿名凭证系统，并且不需要依赖能够去匿名化（或关联）用户的可信第三方。所有先前的解决方案要么依赖于可信第三方，要么对不当行为有严格的定义。我们提供了第一个同时提供匿名黑名单、主观评判并消除对可信第三方依赖的密码学构造，这些第三方有能力撤销用户的隐私。

#### 3. 致谢
本研究得到了安全技术研究所的部分资助，项目编号为2005-DD-BX-1091，由司法援助局颁发；以及国家科学基金会的资助，项目编号为CNS-0524695。本文观点和结论不一定代表资助方的意见。

#### 4. 参考文献
[1] G. Ateniese, J. Camenisch, M. Joye, and G. Tsudik. A practical and provably secure coalition-resistant group signature scheme. In CRYPTO, volume 1880 of LNCS, pages 255–270. Springer, 2000.
[2] G. Ateniese, D. X. Song, and G. Tsudik. Quasi-efficient revocation in group signatures. In Financial Cryptography, volume 2357 of LNCS, pages 183–197. Springer, 2002.
[3] M. H. Au, S. S. M. Chow, and W. Susilo. Short e-cash. In INDOCRYPT, volume 3797 of LNCS, pages 332–346. Springer, 2005.
[4] M. H. Au, W. Susilo, and Y. Mu. Constant-size dynamic k-TAA. In SCN, volume 4116 of LNCS, pages 111–125. Springer, 2006.
[5] M. Bellare and P. Rogaway. Random oracles are practical: a paradigm for designing efficient protocols. In Proceedings of the 1st ACM conference on Computer and communications security, pages 62–73. ACM Press, 1993.
[6] D. Boneh, X. Boyen, and H. Shacham. Short group signatures. In CRYPTO, volume 3152 of LNCS, pages 41–55. Springer, 2004.
[7] D. Boneh and H. Shacham. Group signatures with verifier-local revocation. In ACM Conference on Computer and Communications Security, pages 168–177. ACM, 2004.
[8] E. Brickell and J. Li. Enhanced privacy ID: A direct anonymous attestation scheme with enhanced revocation capabilities. Cryptology ePrint Archive, Report 2007/194, 2007. http://eprint.iacr.org/.
[9] J. Camenisch, S. Hohenberger, M. Kohlweiss, A. Lysyanskaya, and M. Meyerovich. How to win the clonewars: efficient periodic n-times anonymous authentication. In ACM Conference on Computer and Communications Security, pages 201–210. ACM, 2006.
[10] J. Camenisch, S. Hohenberger, and A. Lysyanskaya. Compact e-cash. In EUROCRYPT, volume 3494 of LNCS, pages 302–321. Springer, 2005.
[11] J. Camenisch, S. Hohenberger, and A. Lysyanskaya. Balancing accountability and privacy using e-cash (extended abstract). In SCN, volume 4116 of LNCS, pages 141–155. Springer, 2006.

...

#### 附录：安全游戏
我们使用基于游戏的方法来正式定义安全性。对手的能力通过一组状态共享的oracle进行建模，这些oracle的状态表示为`state`。`state`包含三个计数器`m`, `n` 和 `a`，初始值为0，以及六个集合`UP`, `UA`, `UB`, `SP`, `SA`, `AA`，初始值为空集。以下描述了各个oracle的功能：

- **P-Join**：模拟诚实用户与诚实GM之间的注册协议。调用时，`n`增加1，设置`state := state || <n, transn, credn>`，其中`transn`是注册协议的记录，`credn`是生成的用户凭证。返回`(transn, n)`给对手，并将`n`添加到`UP`中。
- **A-Join**：模拟恶意用户与诚实GM之间的注册协议。调用时，`n`增加1，设置`state := state || <n, transn, ⊥>`，其中`transn`是协议记录。将`n`添加到`UA`中，并返回`n`给对手。
- **B-Join**：模拟诚实用户与恶意GM之间的注册协议。调用时，`n`增加1，设置`state := state || <n, ⊥, credn>`，其中`credn`是由对手发出的凭证。将`n`添加到`UB`中，并返回`n`给对手。
- **Corrupt(i)**：允许对手破坏一个诚实用户。调用时，`i`从`UB`或`UP`中移除，并添加到`UA`中。返回用户`i`的凭证`credi`及其在任何通信尝试中使用的随机数。
- **Add-SP**：允许对手向系统中引入一个SP。调用时，`m`增加1，将其添加到`SP`中，并返回`m`给对手。
- **P-Auth(i, j)**：输入`i`和`j`，如果`i ∈ UP ∪ UB`且`j ∈ SP`，则使用`credi`与`SPj`生成认证记录`πa`。记录`(πa, a)`到`state`中，并返回给对手。`a`增加1。
- **A-Auth(j)**：输入`j ∈ SP`，oracle代表诚实的`SPj`与恶意用户进行认证协议。认证记录`πa`在协议执行后记录到`state`中，并返回`a`给对手。将`a`添加到`AA`中，并增加1。
- **B-Auth(i, j)**：输入`i`和`j`，如果`i ∈ UB ∪ UP`，则oracle代表诚实用户与恶意`SPj`进行认证协议。如果`j ∉ SA`，则将`j`从`SP`中移除并添加到`SA`中。认证记录`πa`在协议执行后记录到`state`中，并返回`a`给对手。`a`增加1。
- **AddToBL(i, j)**：输入`i`和`j`，如果`i ∈ UA`，则将用户`i`添加到`SPj`的黑名单中。
- **RemoveFromBL(j, τ)**：输入`j`和票证`τ`，从`SPj`的黑名单中移除票证`τ`。

#### A.1 完整性
以下是挑战者`C`和对手`A`之间的游戏，用于正式定义完整性。

- **Setup Phase**：`C`选择足够大的安全参数，生成公钥`gpk`和私钥`gsk`，并将它们传递给`A`。
- **Probing Phase**：`A`可以查询所有oracle，除了`P-Join`。
- **Challenge Phase**：在某个时刻，`A`输出`i0`, `i1`, `j`，使得`i0, i1 ∈ UB`。`C`抛一枚公平硬币`b ∈ {0, 1}`。根据`j`是否属于`SP`，`A`调用`P-Auth`或`B-Auth` oracle，但不指定`i`。`C`使用`ib`回答。
- **Probing Phase 2**：`A`可以继续像在`Probing Phase`中一样进行查询。
- **End Game Phase**：`A`输出一个猜测位`b′`。`A`赢得游戏的条件是`b = b′`且满足以下至少一个条件：
  - **Case I**：在探测阶段，`A`从未调用`AddToBL(i, j)`，使得`πi`是从用户`i0`或`i1`的认证记录。在探测阶段2中，`A`从未调用`AddToBL(i, j)`，使得`i = P-Auth(ib, j)`或`i = B-Auth(ib, j)`。
  - **Case II**：在探测阶段，`A`调用`AddToBL(i1, j)`和`AddToBL(i2, j)`，使得`πi1`和`πi2`分别是来自用户`i0`和`i1`的认证记录。`A`没有调用`RemoveFromBL(j, Extract(πi2))`。在探测阶段2中，`A`从未调用`RemoveFromBL(j, Extract(πi))`，使得`i = P-Auth(ib, j)`或`i = B-Auth(ib, j)`。

#### A.2 匿名性
以下是挑战者`C`和对手`A`之间的游戏，用于正式定义匿名性。

- **Setup Phase**：`C`选择足够大的安全参数，生成公钥`gpk`和私钥`gsk`，并将它们传递给`A`。
- **Probing Phase**：`A`可以查询所有oracle，除了`P-Join`。
- **Challenge Phase**：在某个时刻，`A`输出`i0`, `i1`, `j`，使得`i0, i1 ∈ UB`。`C`抛一枚公平硬币`b ∈ {0, 1}`。根据`j`是否属于`SP`，`A`调用`P-Auth`或`B-Auth` oracle，但不指定`i`。`C`使用`ib`回答。
- **Probing Phase 2**：`A`可以继续像在`Probing Phase`中一样进行查询。
- **End Game Phase**：`A`输出一个猜测位`b′`。`A`赢得游戏的条件是`b = b′`且满足以下至少一个条件：
  - **Case I**：在探测阶段，`A`从未调用`AddToBL(i, j)`，使得`πi`是从用户`i0`或`i1`的认证记录。在探测阶段2中，`A`从未调用`AddToBL(i, j)`，使得`i = P-Auth(ib, j)`或`i = B-Auth(ib, j)`。
  - **Case II**：在探测阶段，`A`调用`AddToBL(i1, j)`和`AddToBL(i2, j)`，使得`πi1`和`πi2`分别是来自用户`i0`和`i1`的认证记录。`A`没有调用`RemoveFromBL(j, Extract(πi2))`。在探测阶段2中，`A`从未调用`RemoveFromBL(j, Extract(πi))`，使得`i = P-Auth(ib, j)`或`i = B-Auth(ib, j)`。

#### A.3 不可伪造性
以下是挑战者`C`和对手`A`之间的游戏，用于正式定义不可伪造性。

- **Setup Phase**：`C`选择足够大的安全参数，生成公钥`gpk`和私钥`gsk`，并将它们传递给`A`。
- **Probing Phase**：`A`可以查询所有oracle，除了`P-Join`。
- **End Game Phase**：`A`输出`i`，使得`i ∈ UB`。`A`赢得游戏的条件是满足以下至少一个条件：
  - **Case I**：`A`输出`j`。`A`调用`P-Auth(i, j)`或`B-Auth(i, j)`，使得认证记录表明认证尝试失败。在探测阶段，`A`从未调用`AddToBL(k, j)`，使得`πk`是从用户`i`的认证记录。
  - **Case II**：设`Si = {Extract(π)}`，其中`π`是任何涉及用户`i`的`P-Auth`或`B-Auth`查询中的认证记录。`A`输出`πA`，使得`πA`是任何`A-Auth`或`B-Auth`查询的记录，并且`Extract(πA) ∈ Si`。

希望这些修改能使文本更加清晰、连贯和专业。如果有进一步的修改需求，请告诉我。