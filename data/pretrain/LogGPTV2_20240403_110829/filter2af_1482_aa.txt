本文是[《Writing ARM Shellcode》](https://azeria-labs.com/writing-arm-shellcode/)的翻译文章。
# 用ARM编写SHELLCODE简介
学习本教程的先决条件是对ARM程序集有基本了解（在第一个教程系列“[ARM程序集基础知识](https://azeria-labs.com/writing-arm-assembly-part-1/)”中有介绍）。在本部分中，您将学习如何运用所学的知识在ARM组件中创建一个简单的shellcode。
本教程中使用的示例是在ARMv6 32位处理器上编译的。 如果您无法访问ARM设备，可以按照本教程创建自己的环境并在VM中模拟Raspberry
Pi发行版：[使用QEMU模拟Raspberry Pi](https://azeria-labs.com/emulate-raspberry-pi-with-qemu/)。
本教程适用于那些考虑运行自动shellcode生成器以及想要学习如何在ARM程序集中编写shellcode的人。 毕竟了解它如何在底层下工作,
并完全控制结果比简单地运行工具更有趣，不是吗？在需要绕过shellcode检测算法或在自动化工具可能不能处理的其他限制的情况下，在汇编中编写自己的shellcode是非常有用的。
好消息是，熟悉这个过程后，这项技能可以很容易地学到。
在本教程中，我们将使用以下工具（默认情况下，大多数工具都安装在Linux发行版上）：
  * [GDB](https://www.gnu.org/software/gdb/) \- 我们选择的调试器
  * [GEF](https://github.com/hugsy/gef) \- GDB增强功能，强烈推荐（由[@ _hugsy_](https://twitter.com/_hugsy_)开发）
  * [GCC](https://gcc.gnu.org/) \- Gnu编译器集合
  * [as](https://sourceware.org/binutils/docs/as/) \- 汇编程序
  * [ld](https://sourceware.org/binutils/docs/ld/) \- 链接器
  * [strace](https://strace.io/) \- 跟踪系统调用的实用程序
  * [objdump](https://sourceware.org/binutils/docs/binutils/objdump.html) \- 用于检查反汇编中的空字节
  * [objcopy](https://sourceware.org/binutils/docs/binutils/objcopy.html) \- 从ELF二进制文件中提取原始shellcode
请确保能在ARM环境中编译并运行本教程中的所有示例。
在开始编写shellcode之前，您需要了解一些基本原则，例如：
  1. 让您的shellcode保持紧凑，不要有空字节
  2. 原因：我们正在编写shellcode，并使用它来利用缓冲区溢出等内存损坏漏洞。例如在一些`strcpy`函数造成的缓冲区溢出漏洞中, strcpy()的工作是复制数据，在收到空字节后停止复制。 当我们使用这个溢出来控制程序流时，如果strcpy命中空字节，它将停止复制shellcode，我们的利用就会不起作用。
  3. 避免库函数调用和绝对内存地址
  4. 原因：为了使我们的shellcode尽可能通用，我们不能依赖需要特定依赖关系的库调用和依赖于特定环境的绝对内存地址。
编写shellcode的过程包括以下步骤：
1、了解您要使用的系统调用  
2、找出系统调用号码和您选择的系统调用函数所需的参数  
3、使shellcode有效化  
4、将shellcode转换为Hex字符串
# 理解系统调用
在深入研究第一个shellcode之前，让我们来编写一个能输出字符串的简单ARM汇编程序。
第一步是查找我们想要使用的系统调用，这个时候应该使用“write”。
可以在[Linux手册页](http://www.manpages.info/linux/write.2.html)中找到此系统调用的原型：
    ssize_t write(int fd, const void *buf, size_t count);
从像C这样的高级编程语言的角度来看，这个系统调用示例如下：
    const char string[13] = "Azeria Labs\n";
    write(1, string, sizeof(string)); // Here sizeof(string) is 13
从这个原型中可以看到我们需要以下参数：
  * fd - STDOUT的1
  * buf - 指向字符串的指针
  * count - 要写入的字节数 - > 13
  * 要写入的系统调用数 - > 0x4
对于前3个参数，可以使用R0，R1和R2。 对于系统调用，我们需要使用R7并将0x4移入其中。
    mov r0, #1 @ fd 1 = STDOUT
    ldr r1, string @ loading the string from memory to R1
    mov r2, #13 @ write 13 bytes to STDOUT 
    mov r7, #4 @ Syscall 0x4 = write()
    svc #0
通过使用以上的代码片段，ARM组装程序如下所示：
    .data
    string: .asciz "Azeria Labs\n" @ .asciz adds a null-byte to the end of the string
    after_string:
    .set size_of_string, after_string - string
    .text
    .global _start
    _start:
       mov r0, #1 @ STDOUT
       ldr r1, addr_of_string @ memory address of string
       mov r2, #size_of_string @ size of string
       mov r7, #4 @ write syscall
       swi #0 @ invoke syscall
    _exit:
       mov r7, #1 @ exit syscall
       swi 0 @ invoke syscall
    addr_of_string: .word string
在数据部分，我们通过从字符串后面的地址减去字符串开头的地址来计算字符串的大小。
当然，如果我们可以手动计算字符串大小并将结果直接放入R2中，则无需这样做。另外，使用系统调用号为1的exit()来退出程序。
编译并执行：
    azeria@labs:~$ as write.s -o write.o && ld write.o -o write
    azeria@labs:~$ ./write
    Azeria Labs
酷。 现在我们已经了解了这个过程，接下来让我们更详细地研究它，并在ARM程序集中编写一个简单的shellcode。
# 1.跟踪系统调用
对于我们的第一个例子，我们将采用以下简单函数并将其转换为ARM程序集：
    #include 
    void main(void)
    {
        system("/bin/sh");
    }
第一步是确定此函数需要的系统调用以及系统调用所需的参数。 可以使用'strace'对OS内核的系统调用进行跟踪。  
将上面的代码保存在文件中，然后在运行strace命令之前编译它。
    azeria@labs:~$ gcc system.c -o system
    azeria@labs:~$ strace -h
    -f -- follow forks, -ff -- with output into separate files
    -v -- verbose mode: print unabbreviated argv, stat, termio[s], etc. args
    --- snip --    azeria@labs:~$ strace -f -v system
    --- snip --    [pid 4575] execve("/bin/sh", ["/bin/sh"], ["MAIL=/var/mail/pi", "SSH_CLIENT=192.168.200.1 42616 2"..., "USER=pi", "SHLVL=1", "OLDPWD=/home/azeria", "HOME=/home/azeria", "XDG_SESSION_COOKIE=34069147acf8a"..., "SSH_TTY=/dev/pts/1", "LOGNAME=pi", "_=/usr/bin/strace", "TERM=xterm", "PATH=/usr/local/sbin:/usr/local/"..., "LANG=en_US.UTF-8", "LS_COLORS=rs=0:di=01;34:ln=01;36"..., "SHELL=/bin/bash", "EGG=AAAAAAAAAAAAAAAAAAAAAAAAAAAA"..., "LC_ALL=en_US.UTF-8", "PWD=/home/azeria/", "SSH_CONNECTION=192.168.200.1 426"...]) = 0
    --- snip --    [pid 4575] write(2, "$ ", 2$ ) = 2
    [pid 4575] read(0, exit
    --- snip --    exit_group(0) = ?