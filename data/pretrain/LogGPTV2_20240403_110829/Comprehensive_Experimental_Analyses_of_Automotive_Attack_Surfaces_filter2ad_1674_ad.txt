the use of half-width bits in the synchronization header)
and were able to infer that data is sent in packets of up
to 1024-bytes, divided into 22-byte frames which are
divided into two 11-byte segments. We inferred that a
CRC and ECC were both used to tolerate noise. Search-
ing the disassembled code for known CRC constants
quickly led us to determine the correct CRC to use, and
the ECC code was identiﬁed in a similar fashion. For
reverse-engineering the header contents, we interposed
on the aqSend call (used to transmit messages), which
allowed us to send arbitrary multi-frame packets and
consequently infer the sequence number, multi-frame
identiﬁer, start of packet bit, ACK frame structure, etc.
We omit the many other details due to space constraints.
Given our derived protocol speciﬁcation, we then
implemented an aqLink-compatible software modem in C
using a laptop with an Intel ICH3-based modem exposed
as an ALSA sound device under Linux. We veriﬁed the
modulation and formatting of our packet stream using
the debugging log described earlier.
Finally, layered on top of the aqLink modem is the
telematics unit’s own proprietary command protocol that
allows the TCC to retrieve information about the state of
the car as well as to remotely actuate car functions. Once
the Gateway program decodes a frame and identiﬁes it as
a command message, the data is then passed (via an RPC-
like protocol) to another telematics unit program which
is responsible for supervising overall telematics activities
and implementing the command protocol (henceforth,
the Command program). We reverse-engineered enough
of the Gateway and Command programs to identify a
candidate vulnerability, which we describe below.
Vulnerabilities in the Gateway. As mentioned earlier,
the aqLink code explicitly supports packet sizes up to
1024 bytes. However, the custom code that glues aqLink
to the Command program assumes that packets will never
exceed 100 bytes or so (presumably since well-formatted
command messages are always smaller). This leads to
another stack-based buffer overﬂow vulnerability that we
veriﬁed is exploitable. Interestingly, because this attack
takes place at the lowest level of the protocol stack, it com-
pletely bypasses the higher-level authentication checks
implemented by the Command program (since these
checks themselves depend on being able to send packets).
There is one key gap preventing this exploit from
working in practice. Namely, the buffer overﬂow we
chose to focus on requires sending over 300 bytes to
the Gateway program. Since the aqLink protocol has
a maximum effective throughput of about 21 bytes a
second, in the best case, the attack requires about 14
seconds to transmit. However, upon receiving a call, the
Command program sends the caller an authentication
request and, serendipitously, it requires a response within
12 seconds or the connection is effectively terminated.
Thus, we simply cannot send data fast enough over an
unauthenticated link to overﬂow the vulnerable buffer.
While we identiﬁed other candidate buffer overﬂows
of slightly shorter length, we decided instead to focus on
the authentication problem directly.
Vulnerabilities in authentication. When a call is placed
to the car and data mode is initiated, the ﬁrst command
message sent by the vehicle is a random, three byte au-
thentication challenge packet and the Command program
authentication timer is started. In normal operation, the
TCC hashes the challenge along with a 64-bit pre-shared
key to generate a response to the challenge. When
waiting for an authentication response, the Command
program will not “accept” any other packet (this does
not prevent our buffer overﬂow, but does prevent sending
other command messages). If an incorrect authentication
response is received, or a response is not received within
the prescribed time limit, the Command program will
send an error packet. When this packet is acknowledged,
the unit hangs up (and it is not possible to send any
additional data until the error packet is acknowledged).
After several failed attempts to derive the shared
key, we examined code that generates authentication
challenges and evaluates responses. Both contained errors
that together were sufﬁcient to construct a vulnerability.
First, we noted that the “random” challenge implemen-
tation is ﬂawed. In most situations, this nonce is static and
identical on the two cars we tested. The key ﬂaw is that
the random number generator is re-initialized whenever
the telematics unit starts — such as when a call comes
in after the car has been off — and it is seeded each time
with the same constant. Therefore, multiple calls to a car
while it is off result in the same expected response. Con-
sequently, an attacker able to observe a response packet
(e.g., via snifﬁng the cellular link during a TCC-initiated
call) will be able to replay that response in the future.
The code parsing authentication responses has an even
more egregious bug that permits circumvention without
observing a correct response. In particular, there is a ﬂaw
such that for certain challenges (roughly one out of every
256), carefully formatted but incorrect responses will be
interpreted as valid. If the random number generation is
not re-initialized (e.g., if the car is on when repeatedly
called) then the challenge will change each time and 1
out of 256 trials will have the desired structure. Thus,
after an average of 128 calls the authentication test can be
bypassed, and we are able to transmit the exploit (again,
without any indication to the driver). This attack is more
challenging to accomplish when the car is turned off
because the telematics unit can shut down when a call
ends (hence re-initializing the random number generator)
before a second call can reach it.
To summarize, we identiﬁed several vulnerabilities in
how our telematics unit uses the aqLink code that, to-
gether, allow a remote exploit. Speciﬁcally, there is a
discrepancy between the set of packet sizes supported by
the aqLink software and the buffer allocated by the telem-
atics client code. However, to exploit this vulnerability
requires ﬁrst authenticating in order to set the call timeout
value long enough to deliver a sufﬁciently long payload.
This is possible due to a logic ﬂaw in the unit’s authenti-
cation system that allows an attacker to blindly satisfy the
authentication challenge after approximately 128 calls.
Concrete realization. We demonstrate and evaluate
our attack in two concrete forms. First, we implemented
an end-to-end attack in which a laptop running our
custom aqLink-compatible software modem calls our
car repeatedly until it authenticates, changes the timeout
from 12 seconds to 60 seconds, and then re-calls our
car and exploits the buffer overﬂow vulnerability we
uncovered. The exploit then forces the telematics unit
to download and execute additional payload code from
the Internet using the IP-addressable 3G data capability.
We also found that the entire attack can be imple-
mented in a completely blind fashion — without any
capacity to listen to the car’s responses. Demonstrating
this, we encoded an audio ﬁle with the modulated
post-authentication exploit payload and loaded that ﬁle
onto an iPod. By manually dialing our car on an ofﬁce
phone and then playing this “song” into the phone’s
microphone, we are able to achieve the same results and
compromise the car.
5 Remote Exploit Control
Thus far we have described the external attack surface
of an automobile and demonstrated the presence of
vulnerabilities in a range of different external channels.
An adversary could use such means to compromise
a vehicle’s systems and install code that takes action
immediately (e.g., unlocking doors) or in response to
some environmental trigger (e.g., the time of day, speed,
or location as exported via the onboard GPS).
However, the presence of wireless channels in the
modern vehicle qualitatively changes the range of options
available to the adversary, allowing actions to be remotely
triggered on demand, synchronized across multiple
vehicles, or interactively controlled. Further, two-way
channels permit both remote monitoring and data exﬁl-
tration. In this section, we broadly evaluate the potential
for such post-compromise control, characterize these
capabilities, and evaluate the capabilities via prototype
implementations for TPMS, Bluetooth, FM RDS and Cel-
lular channels. Our prototype attack code is delivered by
exploiting one of the previously described vulnerabilities
(indeed, any exploit would work). Table 2 summarizes
these results, again with our assessment of the effort
required to discover and implement the capability.
TPMS. We constructed two versions of a TPMS-based
triggering channel. One installs code on another ECU
(the telematics ECU in our case, although any ECU would
do) that monitors tire pressure signals as the TPMS ECU
broadcasts them over the CAN bus. The presence of a
particular tire pressure reading then triggers the payload;
the trigger tire pressure value is not expected to be found
in the wild but must instead be adversarially transmitted
over the air. For our second example, the attack reﬂashes
the TPMS ECU via CAN and installs code onto it that will
detect speciﬁc wireless trigger packets and, if detected,
will send pre-programmed CAN packets directly over the
car’s internal network. Both attacks required a custom
TPMS packet generator (described below). The latter
attack also required signiﬁcant reverse engineering efforts
(e.g., we had to write a custom IDA Pro module for
disassembling the ﬁrmware, and we were highly memory
constrained, so that the resulting attack ﬁrmware —
hand-written object code — needed to re-use code space
originally allocated for CRC veriﬁcation, the removal of
which did not impair the normal TPMS functionality).
To experimentally verify these triggers, we reverse-
engineered the 315 MHz TPMS modulation and framing
protocol (far simpler than the aqLink modem) and then im-
plemented a USRP software radio module that generates
the appropriate wireless signals to activate the triggers.
Bluetooth. We modiﬁed the Bluetooth exploit code on
the telematics ECU to pair, post compromise, with a
special MAC address used by the adversary and accept
her commands (either triggering existing functionality
or receiving new functionality). We did not explore
exﬁltrating data via the two-way Bluetooth channel, but
we see no reason why it would not be possible.
FM RDS. Using the CD-based ﬁrmware update attack
we developed earlier, we reﬂashed the media player ECU
to send a pre-determined set of CAN packets (our pay-
load) when a particular “Program Service Name” message
arrives over the FM RDS channel. We experimentally
veriﬁed this with a low-power FM transmitter driven by
a Pira32 RDS encoder; an attacker could communicate
over much longer ranges using higher power. Table 2 lists
the cost for this attack as medium given the complexity
of programming/debugging in the media player execution
environment (we bricked numerous CD players before
ﬁnalizing our implementation and testing on our car).
Cellular. We modiﬁed our telematics exploit payload
to download and run a small (400 lines of C code) IRC
client post-compromise. The IRC client uses the vehicle’s
high bandwidth 3G data channel to connect to an IRC
server of our choosing, self-identiﬁes, and then listens
for commands. Subsequently, any commands sent to this
IRC server (from any Internet connected host) are in turn
transmitted to the vehicle, parsed by the IRC client, and
then transmitted as CAN packets over the appropriate
bus. We further provided functionality to use this channel
in both a broadcast mode (where all vehicles subscribed
to the channel respond to the commands) or selectively
(where commands are only accepted by the particular
vehicle speciﬁed in the command). For the former, we
experimentally veriﬁed this by compromising two cars
(located over 1,000 miles apart), having them both join
the IRC channel, and then both simultaneously respond
to a single command (for safety, the command we sent
simply made the audio systems on both cars chime).
Finally, the high-bandwidth nature (up to 1 Mbps at
times) of this channel makes it easy to exﬁltrate data. (No
special software is needed since ftp is provided on the
host platform.) To make this concrete we modiﬁed our
attack code for two demonstrations: one that periodically
“tweets” the GPS location of our vehicle and another that
records cabin audio conversations and sends the recorded
data to our servers over the Internet.
6 Threat Assessment
Thus far we have considered threats primarily at a
technical level. Previously, we have shown that gaining
access to a car’s internal network provides sufﬁcient
means for compromising all of its systems (including
lights, brakes, and engine) [14]. In this paper, we have
further demonstrated that an adversary has a practical
opportunity to effect this compromise (i.e., via a range
of external communications channels) without having
physical access to the vehicle. However, real threats
ultimately have some motive as well: a more concrete
goal that is achieved by exploiting the capability to attack.
This leaves unanswered the crucial question: Just how
serious are the threats? Obviously, there are no clear
ways to predict such things, especially in the absence
of any known attacks in the wild. However, we can
reason about how the capabilities we have identiﬁed
can be combined in service to known goals. While one
Channel
TPMS (tire pressure)
TPMS (tire pressure)
Bluetooth
FM radio (RDS channel)
Cellular
Range
Short
Short
Short
Long
Global
Implemented Control / Trigger
Predeﬁned tire pressure sequences causes telematics unit to send CAN
packets
TPMS trigger causes TPMS receiver to send CAN packets
Presence of trigger MAC addresses allows remote control
FM RDS trigger causes radio to send CAN packets
IRC command-and-control (botnet) channel allows broadcast and
single-vehicle control
Exﬁltration
No
Cost
Low-Medium
No
Yes∗
No
Yes
Medium
Low
Medium
Low
Table 2: Implemented control and trigger channels. The Cost column captures the approximate effort to develop this
post-compromise control capability. The Exﬁltration column indicates whether this channel can also be used to exﬁltrate
data. For (∗), we did not experimentally verify data exﬁltration over Bluetooth.
can easily envision hypothetical “cyber war” or terrorist
scenarios (e.g., infect large numbers of cars en masse
via war dialing or a popular audio ﬁle and then, later,
trigger them to simultaneously disengage the brakes
when driving at high speed), our lack of experience with
such concerns means such threats are highly speculative.
Instead, to gauge whether these threats create practical
risks, we consider (brieﬂy) how the raw capabilities we
have identiﬁed might affect two scenarios closer to our
experience: ﬁnancially motivated theft and third-party
surveillance.
Theft. Using any of our implemented exploit capabilities
(CD, PassThru, Bluetooth, and cellular), it is simple
to command a car to unlock its doors on demand, thus
enabling theft. However, a more visionary car thief
might realize that blind, remote compromise can be used
to change both scale and, ultimately, business model.
For example, instead of attacking a particular target
car, the thief might instead try to compromise as many
cars as possible (e.g., by war dialing). As part of this
compromise, he might command each car to contact a
central server and report back its GPS coordinates and
Vehicle Identiﬁcation Number (VIN). The IRC network
described in Section 5 provides just this capability. The
VIN in turn encodes the year, make and model of each car
and hence its value. Putting these capabilities together,
a car thief could “sift” through the set of cars, identify
the valuable ones, ﬁnd their location (and perhaps how
long they have been parked) and, upon visiting a target
of interest then issue commands to unlock the doors and
so on. An enterprising thief might stop stealing cars
himself, and instead sell his capabilities as a “service”
to other thieves (“I’m looking for late model BMWs or
Audis within a half mile of 4th and Broadway. Do you
have anything for me?”) Careful readers may notice
that this progression mirrors the evolution of desktop
computer compromises: from individual attacks, to mass
exploitation via worms and viruses, to third-party markets
selling compromised hosts as a service.
While the scenario itself is today hypothetical, we have
evaluated a complete attack whereby a thief remotely
disables a car’s security measures, allowing a unskilled
accomplice to enter the car and drive it away. Our attack
directs the car’s compromised telematics unit to unlock
the doors, start the engine, disengage the shift lock
solenoid (which normally prevents the car from shifting
out of park without the key present), and spoof packets
used in the car’s startup protocol (thereby bypassing the
existing immobilizer anti-theft measures11). We have
implemented this attack on our car. In our experiments
the accomplice only drove the “stolen” car forward and
backward because we did not want to break the steering
column lock, though numerous online videos demonstrate
how to do so using a screwdriver. (Other vehicles have
the steering column lock under computer control.)
Surveillance. We have found that an attacker who has
compromised our car’s telematics unit can record data
from the in-cabin microphone (normally reserved for
hands-free calling) and exﬁltrate that data over the con-
nected IRC channel. Moreover, as said before, it is easy
to capture the location of the car at all times and hence
track where the driver goes. These capabilities, which
we have experimentally evaluated, could prove useful
to private investigators, corporate spies, paparazzi, and
others seeking to eavesdrop on the private conversations
within particular vehicles. Moreover, if the target vehicle
is not known, the mass compromise techniques described
in the theft scenario can also be brought to bear on this