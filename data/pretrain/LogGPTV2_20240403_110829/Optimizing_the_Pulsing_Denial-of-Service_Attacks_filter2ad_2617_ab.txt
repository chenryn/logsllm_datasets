IV. THROTTLE ALGORITHMS
A. Baseline Algorithm
We Ô¨Årst present a baseline algorithm in which each router
throttles trafÔ¨Åc for
by forwarding only a fraction
(
is in effect. In adjusting
) of the trafÔ¨Åc. The fraction
is taken to be one when
according to current
no throttle for
server congestion, the algorithm mimics TCP congestion con-
is reduced by a multiplicative factor when
trol. SpeciÔ¨Åcally,
is congested and sends the router a rate reduction signal. It
‚Äì subject to the condition
has extra capacity and sends the router a
is increased by an additive constant
that
rate increase signal.
‚Äì when
The baseline algorithm that
runs is speciÔ¨Åed in Fig. 2. It is
to be invoked when either (i) the current server load (measured
as trafÔ¨Åc arrival rate to ) crosses
, or (ii) a throttle is in effect
32
IEEE/ACM TRANSACTIONS ON NETWORKING, VOL. 13, NO. 1, FEBRUARY 2005
Fig. 2. Baseline throttle algorithm speciÔ¨Åcation.
Fig. 3. Fair throttle algorithm speciÔ¨Åcation.
TABLE I
TRACE OF THE THROTTLE FRACTION f AND SERVER
LOAD FOR THE BASELINE ALGORITHM
TABLE II
TRACE OF THROTTLE RATE AND ACHIEVED SERVER
LOAD FOR THE FAIR ALGORITHM
. In case (i), mul-
and the current server load drops below
ticasts a rate reduction signal to
; in case (ii), it multicasts
a rate increase signal. The algorithm can take multiple rounds
is achieved. Also, if the server
until a server load within
, and the next rate increase signal raises the
load is below
server load by an insigniÔ¨Åcant amount (i.e., by less than ), we
remove the throttle. The monitoring window should be set to
be somewhat larger than the maximum round trip time between
.
and a router in
In the example network shown in Fig. 1, let the number above
) denote the current rate at which the host
. The number above each router denotes the
each host (except
sends trafÔ¨Åc to
offered rate of trafÔ¨Åc at the router, destined for
. Also, let
,
, and
exceeds
. Initially, the total
,
offered load to
, and hence the baseline throttle
. A rate reduction signal causes each
algorithm is invoked at
, resulting in a server load of
router to drop half of the trafÔ¨Åc for
. The next rate reduction signal causes
29.95, still higher than
the server load to drop below
, at 14.975 and a rate increase
signal to be sent, raising the server load to 17.97. Finally, another
rate increase signal raises the server to 20.965, which is within
B. Fair Throttle Algorithm
The baseline algorithm is not fair because it penalizes all
routers equally, irrespective of whether they are greedy or well
behaving. We now present a fair throttle algorithm that installs at
, a uniform leaky bucket rate (i.e., the throttle
each router in
. Fig. 3 speci-
rate) at which the router can forward trafÔ¨Åc for
determines the throttle rate to be
Ô¨Åes the algorithm by which
is the current throttle rate to be
installed. In the speciÔ¨Åcation,
used by . It is initialized to
is
either some small constant, say 2, or an estimate of the number
. We use a constant
of throttle points typically needed in
if a throttle is in effect and the
, to ramp up
additive step,
current server load is below
.
, where
to a leaky bucket with rate
. This will cause a router in
The fair throttle algorithm is to be invoked as with the baseline
throttle
algorithm. Each time it is called, it multicasts a rate-
to regulate trafÔ¨Åc des-
to
tined for
. The algorithm may
to an
then continue in the while loop that iteratively adjusts
appropriate value. Notice that the additive increase/multiplica-
tive decrease iterative process aims to keep the server load in
whenever a throttle is in effect. The termination con-
in the fair algorithm are the same as in
ditions and choice of
the baseline algorithm.
.
Table I shows how and the server load change at each round
of the algorithm. When the algorithm terminates, the forwarding
rates at the deployment routers (from top to bottom of the Ô¨Ågure)
are 8.708, 0.077, 5.4285, 6.2055, 0.2135 and 0.3325, respec-
tively. The algorithm achieves a server load within the target
range of [18, 22]. However, it does not achieve level- max-min
fairness, since some router is given a higher rate than another
router, even though the latter has unmet demands.
to
We apply the fair throttle algorithm to the previous example
, and
scenario in Fig. 1. We initialize
and the ag-
use an additive step of one. Table II shows how
gregate server load evolve. When the algorithm is Ô¨Årst invoked
drops to 31.78.
with throttle rate 10, the aggregate load at
Since the server load still exceeds
, the throttle rate is halved
, to 16.78. As a result,
to 5, and the server load drops below
the throttle rate is increased to 6, and the server load becomes
19.78. Since 19.78 is within the target range [18, 22], the throttle
YAU et al.: DEFENDING AGAINST DISTRIBUTED DENIAL-OF-SERVICE ATTACKS WITH MAX-MIN FAIR SERVER-CENTRIC ROUTER THROTTLES
33
of how the throttle signal
forwarding trafÔ¨Åc rates
time.
, the throttle rate
, for
, and the
, change over
In general, the server
as
a function of the aggregate trafÔ¨Åc workload and the hysteresis
control limits
. The throttle signal generation is:
generates a throttle signal
if
if
otherwise.
(1)
Fig. 4. High-level description of mathematical model for router throttling.
algorithm terminates. When that happens, the forwarding rates
of trafÔ¨Åc for
at the deployment routers (from top to bottom in
the Ô¨Ågure) are 6, 0.22, 6, 6, 0.61, and 0.95, respectively. This is
the max-min fair allocation of a rate of 19.78 among the deploy-
ment routers, showing that level- max-min fairness is achieved
(in the sense of DeÔ¨Ånition 1).
V. GENERAL MATHEMATICAL MODEL
Router throttling is a feedback control strategy. To better
understand its stability and convergence behavior, we formulate
its control-theoretic model. Using the model, we explore how
different system parameters, including feedback delays, the
hysteresis control limits
, and the number and het-
erogeneity of trafÔ¨Åc sources, can impact system performance.
We point out that our mathematical model can also provide
a general framework for studying various multi-source Ô¨Çow
control problems.
In other words, a throttle signal of
gregate received trafÔ¨Åc rate at
1 indicates that the aggregate received trafÔ¨Åc rate is below
Note that when the aggregate trafÔ¨Åc rate is within
throttle signal will be off (i.e.,
indicates that the ag-
and a signal of
.
, the
is above
).
A. Mathematical Model for the Fair Throttle Algorithm
Let us consider the fair throttle algorithm. (Because of space
constraint, we do not present the analysis of the baseline algo-
rithm in this paper. The interested reader is referred to our tech-
nical report [11].) In this case, the server generates a throttle
, which is a function of the
signal
and
aggregate server workload, the hysteresis control limits
. The differential equation
, and the additive step size
as the throttle rate
expressing the change in the throttle rate is
Essentially, when the server discovers that the aggregate
by .
, it will reduce
by half. The objective is to achieve an
trafÔ¨Åc is below
Otherwise, if the aggregate trafÔ¨Åc is above
the throttle rate
aggregate server load within
, it will increase the throttle rate
.
, where
sources and
Fig. 4 gives a high-level description of our mathematical
model for router throttling. We model each deployment router
as a source of trafÔ¨Åc for
is the server to be protected.
Let there be
be the instantaneous offered
trafÔ¨Åc rate from router
at time . Given a throttle
algorithm and a throttle signal
forward
from , router
trafÔ¨Åc for
. The instantaneous
forwarding rate
is a function of the offered trafÔ¨Åc rate,
computed by a rate adjustment
module deployed at router , according to the throttle algorithm
used.
at an instantaneous rate
, and a throttle rate
has for
,
Given
from each deployment router in
computes and sends the throttle signal
receives
. Based on the aggregate
an aggregate trafÔ¨Åc rate of
rate,
to all the
routers in
. Notice that the throttle signal may arrive at
different routers at different times. We model heterogeneous
delays from to different routers in
. SpeciÔ¨Åcally, we let
. We use
a set of coupled differential equations to model the dynamics
denote the network delay from to router
Upon receiving the throttle rate
its forwarding trafÔ¨Åc rate,
expressing the change in
, router
adjusts
, to . The differential equation
is
and
for
the forwarding trafÔ¨Åc rate
. Note that the rate of change of
is a function of the throttle rate
and the offered trafÔ¨Åc rate
. If the throttle rate
is larger than the offered trafÔ¨Åc rate, then there is no
. On the
, then we throttle
.
is overloaded (i.e.,
, the
need to throttle and the change is simply
is smaller than
other hand, if
and the change in the forwarding trafÔ¨Åc rate is
Theorem 1: Assume that the server
the aggregate received trafÔ¨Åc rate is above
throttle rate by server
) at time
is
(2)
34
IEEE/ACM TRANSACTIONS ON NETWORKING, VOL. 13, NO. 1, FEBRUARY 2005
Fig. 5. System performance for U = 1100, L = 900, and various  step sizes.
is a constant equal to
where
initial value of the throttle rate at time
rate at router
can be closely approximated by
and
is the
. The forwarding trafÔ¨Åc
. The network delay for each of these sinusoidal
sources is 50 ms. The last ten sources are square-pulse sources
wherein
for
for
(3)
for
for each of these square-pulse sources is 50 ms.
and
. The network delay
Proof: Please refer to [11].
Theorem 2: Assume that the server
the aggregate received trafÔ¨Åc rate is below
throttle rate by server
is
is underloaded (i.e.,
, the
) at time
(4)
. The forwarding trafÔ¨Åc
can be closely approximated by
where
rate at router
is a constant equal to
(5)
Proof: Please refer to [11].
B. Mathematical Analysis
We now study the stability and convergence properties of
router throttling. Since the basline algorithm cannot attain the
max-min fairness property, we only present results for the fair
throttle algorithm. In our presentation, all time units are in sec-
onds, except otherwise stated. In the experiments, we consider
100 heterogeneous sources. The Ô¨Årst eighty are constant sources
. In each experiment, ten
wherein
of these constant sources are switched off at
and are
and
activated again at
each of the constant sources is 100 ms. The next ten sources
for
are sinusoidal sources wherein
. The network delay between
for
and
Experiment 1: Handling of heterogeneous sources and
system stability. Fig. 5 illustrates the results for the Ô¨Årst exper-