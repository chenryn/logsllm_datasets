timestamps or other associated data, and, like any cryptosystem,
it is possible for it to be abused in ways that damage security.
For example, the platform could damage deniability by including a
unique id in each message’s metadata and keeping a public database
of hashes of ids used in authentic messages.
Limitations. Any system aimed at finding the source of a for-
warded message faces certain non-technical limitations. Both our
scheme and prior work on traceback [32] track the source of mes-
sages that are forwarded using a messaging app’s “forward” feature.
However, a user could also re-type a message instead of forwarding
it using the app, at which point the message appears to be a fresh
message which happens to have the same content. Thus the actual
guarantee of a scheme that finds the source of a message is that it
finds the first person to send the message that was later forwarded,
not its real-world author.
As discussed in [15], a more significant issue raised by schemes
that find the source of a message is that they allow a user to reveal
information about someone other than their immediate conversa-
tion partner. This is a fundamental component of the functionality,
but it should be weighed carefully whether the potential modera-
tion benefit of such a feature outweighs the privacy risk. Part of
our goal in designing source-tracking is to minimize the risk posed
compared to traceback. For example, consider the case where a
journalist reports a piece of misinformation to a platform. A trace-
back scheme would, in the process of revealing the source of the
misinformation, also reveal the identity of the user who forwarded
it to the journalist. Source-tracking does not reveal the path taken
by a message, so only the original sender of the message would be
revealed.
Finally, both our work and traceback rely on the platform being
aware of the identity of the parties sending and receiving a mes-
sage at the time the message is sent. This information is currently
required by most end-to-end encrypted messaging systems in or-
der to deliver messages, so our schemes do not impose additional
metadata-collection or retention requirements on these systems.
However, it remains an important problem for future work to de-
velop source-tracking schemes that do not even require this minimal
metadata at the time of message delivery.
3 FORMALIZING SOURCE-TRACKING
We now formalize the syntax and security definitions for a source-
tracking scheme. We begin by describing some notation we will
use throughout the rest of the paper.
Let 𝑥 ← 𝐹(𝑦) denote the assignment of the output of 𝐹(𝑦) to
𝑥, and let 𝑥 ←R 𝑆 denote assignment to 𝑥 of an element sampled
uniformly random from set 𝑆. We use A𝐻 to denote that A has
oracle access to some function 𝐻. A function negl(𝑥) is negligible if
for all 𝑐 > 0, there is a 𝑥0 such that for all 𝑥 > 𝑥0, negl(𝑥) < 1
𝑥𝑐 . We
omit 𝑥 if the parameter is implicit. Throughout the paper we also
omit an implicit security parameter 𝜆. Finally, we use ⊥ to indicate
an empty message or special character indicating failure.
Interactive protocols. We define an interaction between two par-
ties using the notation
(𝑜𝑢𝑡1, 𝑜𝑢𝑡2) ← ⟨𝑃1(secret params), 𝑃2(secret params)⟩(public params)
Where the first party acts according to the protocol defined by 𝑃1
and has access to the secret parameters of 𝑃1 as well as all public
parameters, and the second party acts according to 𝑃2 with access
to the public parameters as well as its analogous secrets.
Tables and sets. Our security definitions use tables to keep track
of important information about adversary queries. Tables are de-
noted with a capital 𝑇 and a subscript name, and store key/value
pairs. To add a key/value pair to a table, we use the notation
𝑇 [𝑘𝑒𝑦] ← 𝑣𝑎𝑙𝑢𝑒. To retrieve a value corresponding to a partic-
ular key from a table, we use the notation 𝑣𝑎𝑙𝑢𝑒 → 𝑇 [𝑘𝑒𝑦]. We
use standard set notation to check if a key is included in a table
(𝑘𝑒𝑦 ∈ 𝑇 ). Sets are similar to tables, but only store a set of values.
We add values 𝑣1, ..., 𝑣𝑘 to a set S with S.𝑎𝑑𝑑(𝑣1, ..., 𝑣𝑘).
3.1 Source-Tracking Syntax and Correctness
A source-tracking scheme 𝑆𝑇 consists of six algorithms: KGen,
NewUser, AuthMsg, FwdMsg, RecMsg, and Report, where the lat-
ter five are interactive protocols between a user and the messag-
ing platform. Source-tracking involves users 𝑈1, ..., 𝑈𝑛, each repre-
sented by a unique identifier, e.g., a username or long-term public
key taken from some set U, and a platform 𝑃.
In contrast with prior work, which operates independently of the
underlying end-to-end encrypted messaging scheme [32], we allow
source-tracking schemes to make use of the underlying messaging
scheme as a black box. We see this as striking a happy medium
where source-tracking can take advantage of the security benefits
already provided by the messaging scheme while still being easy to
deploy on top of existing applications. Although modern end-to-
end encrypted messaging protocols provide many useful security
properties [1, 7, 25], our constructions will only rely on them to
provide authenticated encryption and protect against replay attacks.
To abstract away the details of the underlying messaging scheme,
we will assume the existence of a messaging oracle
E = (send(𝑚, 𝑈𝑠, 𝑈𝑟), receive(𝑐𝑡, 𝑈𝑠, 𝑈𝑟))
that sends and authenticates messages between users using the un-
derlying end-to-end encryption scheme the source-tracking scheme
is associated with.
The syntax of a source-tracking scheme is defined as follows:
Session 5C: Messaging and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1486• KGen(𝑝𝑝) → (pk, sk): The platform runs this algorithm at sys-
tem setup. It takes in public parameters 𝑝𝑝 and outputs a platform
key pair (pk,sk).
• NewUser is an interactive protocol between a new user and the
messaging platform to register that user in the system. It is rep-
resented by the pair of algorithms 𝑈𝑛𝑒𝑤, 𝑃𝑛𝑒𝑤:
(𝑎𝑑,U′) ← ⟨𝑈𝑛𝑒𝑤, 𝑃𝑛𝑒𝑤(sk,U)⟩(𝑈𝑛, pk)
Where U is the set of currently registered users, (pk, sk) is the
platform’s key pair, and 𝑈𝑛 is the user information or id associated
with the new user. We assume that the user runs a separate
protocol to register with the underlying messaging scheme as
needed. Optionally, 𝑈𝑛𝑒𝑤 can add additional private inputs, e.g.,
a secret used to prove its identity.
On success, the protocol should return some authoring data 𝑎𝑑
to the user that can be used to send messages and the updated
membership set U′ to the platform.
While we define this function interactively in our security defi-
nitions for maximum flexibility, a non-interactive function run
by the platform suffices for both of our schemes. For ease of
notation in the first scheme, which uses no authoring data, we
will denote the non-interactive version of this protocol as the
function 𝑛𝑒𝑤𝑈 𝑠𝑒𝑟(𝑈𝑖, sk), run by the platform, which returns
only the new set of users U or ⊥ on failure.
• AuthMsg is an interactive protocol between a user authoring a
message and the platform, represented by the pair of interactive
algorithms
((𝑎𝑑′, 𝑒), (𝑝𝑑, 𝑒)) ← ⟨𝑈𝑎𝑢𝑡ℎ(𝑚𝑠𝑔), 𝑃𝑠𝑒𝑛𝑑(sk, md)⟩(𝑈𝑠, 𝑈𝑟 , pk)
where 𝑚𝑠𝑔 is a tuple (𝑚, ad), 𝑚 is the plaintext being sent, and
𝑎𝑑 (“authoring data”) is any associated data required to send a
message.
The platform has secret inputs sk, its secret key, and report meta-
data md that it wants to recover if the message is later reported.
Both algorithms receive the identities of the sender and receiver
as well as the platform public key. Upon successful completion of
the protocol, the sender gets updated authoring data 𝑎𝑑′ that it
can store for authoring future messages, and the platform receives
platform data 𝑝𝑑 to be used when the message is delivered to its
recipient. Both parties receive the message identifier 𝑒 for the
message sent using the underlying messaging platform E.
• FwdMsg is an interactive protocol between a user forwarding a
message and the platform, represented by interactive algorithms
((fd′, 𝑒), (𝑝𝑑, 𝑒)) ← ⟨𝑈𝑓 𝑤𝑑(𝑚𝑠𝑔), 𝑃𝑠𝑒𝑛𝑑(sk, md)⟩(𝑈𝑠, 𝑈𝑟 , pk)
where each algorithm’s inputs and outputs are identical to AuthMsg
except that 𝑚𝑠𝑔 = (𝑚, fd), where fd (“forwarding data”) repre-
sents associated data required to forward a message, and the
user’s output is updated forwarding data fd′ to be used if the
user wishes to forward the same message again.
We note that because the platform shouldn’t be able to distinguish
between an authored and a forwarded message, the platform pro-
tocol 𝑃𝑠𝑒𝑛𝑑 is identical to the platform’s protocol for an authored
message. The report metadata (md) is only included if the mes-
sage is new, so in this case it is passed to the forwarding function
but remains unused.
• RecMsg is an interactive protocol between a user receiving a
message and the platform, represented by the pair of interactive
algorithms
((𝑚, fd),⊥) ← ⟨𝑈𝑟𝑒𝑐, 𝑃𝑟𝑒𝑐(sk, 𝑝𝑑)⟩(𝑈𝑠, 𝑈𝑟 , 𝑒, pk)
The platform has access to its secret key sk and the transac-
tion data 𝑝𝑑 generated when the message was sent (from either
AuthMsg or FwdMsg), and both user and platform have access to
the sending and receiving users’ identities, the message identifier
for the message sent by the underlying message scheme, and the
platform’s public key. Upon successful completion, the receiving
user gets the message plaintext 𝑚 and forwarding data fd that it
can use to forward or report the message in the future.
• Report: This is an interactive protocol between a user who would
like to report a received message and the platform, represented
by the pair of interactive algorithms
(fd′, (𝑈 , md)) ← ⟨𝑈𝑟𝑒𝑝(fd), 𝑃𝑟𝑒𝑝(sk)⟩(𝑚, pk)
where the user knows the forwarding data fd for the message it
would like to report, the platform knows the platform secret key,
and both participants have access to the platform public key and
the plaintext 𝑚 of the message being reported. Upon successful
completion, the platform gets the source user identity 𝑈 and
associated metadata md for the reported message. Optionally,
the reporting user could get new forwarding data fd’ used to
forward the message again in the future, but we do not require
use of this in either of our schemes.
We define correctness for a source-tracking scheme as follows.
Definition 3.1. A source-tracking scheme 𝑆𝑇 is correct if when all
users and the platform are honest (i.e. follow the protocols and don’t
try to forward or report messages that they have not received), all
protocols will fail with zero probability, messages will be delivered
as intended, and if a user reports a message to the platform, the
platform can recover the identity of the original author of the
message as well as the metadata that the platform included at the
time of authoring with probability one.
3.2 Confidentiality
Confidentiality guarantees that a source-tracking scheme does not
break the privacy of the underlying end-to-end encryption system
or leak more forwarding metadata than the underlying messaging
system to either the platform or to users. We formalize this by
defining user confidentiality, which ensures that a malicious user
cannot learn more about other users’ messaging activity than it
could without the source-tracking scheme, and platform confiden-
tiality, which makes the same guarantee for the platform before
a message is reported and additionally requires that, even after a
report, the platform learns only the source and associated metadata
of a reported message and nothing more.
We present definitions for both tree-linkable and tree-unlinkable
user confidentiality. For the platform, we only define tree-linkable
platform confidentiality because the platform can set the report
metadata to be unique for each forwarding tree, allowing it to
distinguish between two forwarding trees with the same plaintext
when messages are reported. Note that tree-linkability/unlinkability
for the platform is only relevant when a report is made: the security
Session 5C: Messaging and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1487guarantee for unreported messages is identical in the two settings.
For simplicity, we present our definitions without allowing for
adaptive corruption of users.
User Confidentiality. We define a security game for user confi-
dentiality in Figure 1 with respect to a source tracking scheme 𝑆𝑇 ,
an adversary A, and an underlying messaging scheme E.
Intuitively, the user confidentiality game allows an adversary
to assume the identity of a malicious user and simulate messaging
activity with access to the view of that user. An adversary is given
the ability to forward an arbitrary number of message pairs to
adversary-controlled users. Only one message from each pair is
actually forwarded, and the adversary wins if it can determine
which of the two messages was sent.
To prevent trivial wins, the game requires that within a pair,
messages have the same plaintext and have been sent to the adver-
sary by the same honest user, although the forwarding history of
the two messages, including their original source, can differ. The
tree-linkable version of the game adds the additional restriction
that the forwarding trees of the queried messages must either be
the same tree, always be previously queried together, or have never
before been sent to the malicious user. While the adversary cannot
make calls to the challenge with two different message plaintexts,
the game still captures basic unlinkability because an adversary
can make two or more calls to the challenge, allowing it to receive
multiple different messages along paths of its choice.
This game is constructed by giving the adversary access to a
number of oracles it can use to simulate activity in a messaging
system. The getUser function allows the adversary to create an
arbitrary number of malicious (adversary-controlled) users, which
are stored in the set U𝑚𝑎𝑙, as well as honest users that it does not
control, which are stored in Uℎ𝑜𝑛𝑒𝑠𝑡. goodAuth and goodFwd allow
the adversary to send messages between users it does not control,
while malSend and malRec allow an adversary to send messages
between an honest user and a malicious user. The adversary is also
given oracles send(·, 𝑈 , ·) and receive(·, ·, 𝑈) to send and receive
messages from the adversary-controlled users 𝑈 ∈ U𝑚𝑎𝑙 in the
underlying encrypted messaging scheme. In all cases, the adversary