7000
集群
I一一一
7000
处于同—个集群
7000
7002
图 17-1
同一个集群
三个独立的节点
(7001
7002
7001
1
7001
---
## Page 251
他节点（包括主节点和从节点）都创建一个相应的clusterNode 结构，以此来记录其他
节点当前的配置纪元、节点的IP 地址和端口号等等。
17.1.2集群数据结构
及 cluster.h/clusterState 结构里面，接下来的一节将对这三种数据结构进行介绍。
将它们保存到了cluster.h/clusterNode 结构、cluster.h/clusterLink结构，以
redisClient 结构来保存客户端的状态，至于那些只有在集群模式下才会用到的数据，节点
组件，比如说：
cluster-enabled配置选项是否为 yes 来决定是否开启服务器的集群模式，如图17-6所示。
17.1.1
MEET命令的实现原理。
每个节点都会使用一个clusterNode 结构来记录自己的状态，并为集群中的所有其
clusterNode 结构保存了一个节点的当前状态，比如节点的创建时间、节点的名字
节点（运行在集群模式下的Redis服务器）会继续使用所有在单机模式中使用的服务器
一个节点就是一个运行在集群模式下的 Redis 服务器，Redis 服务器在启动时会根据
口节点会继续使用文件事件处理器来处理命令请求和返回命令回复。
本节接下来的内容将介绍启动节点的方法、与集群有关的数据结构，以及CLUSTER
除止
口
口
D
口
口节点会继续使用时间事件处理器来执行 serverCron 函数，而 serverCron 函数
此之外，节点会继续使用redisServer结构来保存服务器的状态，使用
节点会继续使用 Lua脚本环境来执行客户端输人的 Lua脚本。
节点会继续使用复制模块来进行节点的复制工作。
节点会继续使用发布与订阅模块来执行PUBLISH、SUBSCRIBE等命令。
节点会继续使用 RDB 持久化模块和 AOF 持久化模块来执行持久化工作。
节点会继续使用数据库来保存键值对数据，键值对依然会是各种不同类型的对象。
节点是否断线，或者检查是否需要对下线节点进行自动故障转移等。
群模式下需要执行的常规操作，例如向集群中的其他节点发送 Gossip 消息，检查
又会调用集群模式特有的clusterCron 函数。clusterCron 函数负责执行在集
启动节点
成为一个节点
图17-6服务器判断是否开启集群模式的过程
选
cluster-enabied
项的值为yes？
启动服务器
开启服务器的单机（standalone）模式
成为一个普通 Redis 服务器
否
第17章
集
群+247
---
## Page 252
248·第三部分多机数据库的实现
所需的有关信息，比如套接字描述符，输人缓冲区和输出缓冲区：
节点的状态：
)clusterLink;
typedef struct clusterLink {
clusterNode 结构的 link 属性是一个clusterLink 结构，该结构保存了连接节点
 struct clusterNode
struct clusterNode *node;
/}与这个连接相关联的节点，
sds rcvbuf;
//输入缓冲区，保存着从其他节点接收到的消息。
！！输出缓冲区，
int fd;
//TCP套接字描述符
// 连接的创建时间
// 保存连接节点所需的有关信息
//节点的端口号
char ip[REDIS_IP_STR_LENl;
//节点的IP地址
uint64_t configEpoch;
//节点当前的配置纪元，
char name[REDIS_CLUSTER_NAMELEN];
//创建节点的时间
sds sndbuf;
二
使
用
点标识
如 68eef66df23420a5862208ef5bla7005b806f2ff
，保存着等待发送给其他节点的消息（message）)。
A
用于实现故障转移
，如果没有的话就为NULL
---
## Page 253
当前状态（为了空间考虑，图中省略了clusterNode 结构的一部分属性）：
clusterState 结构，这个结构从节点7000的角度记录了集群以及集群包含的三个节点的
配置纪元，诸如此类：
角下，集群目前所处的状态，例如集群是在线还是下线，集群包含多少个节点，集群当前的
客户端的，而 clusterLink 结构中的套接字和缓冲区则是用于连接节点的。
缓冲区，这两个结构的区别在于，redisClient 结构中的套接字和缓冲区是用于连接
节点 7001和节点7002也会创建类似的clusterState 结构：
口结构的 nodes 字典记录了集群目前包含的三个节点，这三个节点分别由三个
口 结构的 size 属性的值为0，表示集群目前没有任何节点在处理槽，因此结构的
口 结构的 currentEpoch 属性的值为 O，表示集群当前的配置纪元为 0。
以前面介绍的7000、7001、7002三个节点为例，图17-7展示了节点7000创建的
最后，每个节点都保存着一个clusterState 结构，这个结构记录了在当前节点的视
 clusterState;
typedef struct clusterState 1
个节点都是主节点。
state 属性的值为 REDIS_CLUSTER_FAIL，这表示集群目前处于下线状态。
redisClient 结构和 clusterLink 结构都有自己的套接字描述符和输入、输出
clusterNode 结构，这两个节点是节点 7000已知的在集群中的其他节点。
结构，而字典中的另外两个指针则分别指向代表节点7001和代表节点7002的
clusterNode 结构表示，其中 myself指针指向代表节点 7000的clusterNode
!.··
dict *nodes;
11 集群中至少处理著一个槽的节点的数量 
int state;
//集群当前的状态：是在线还是下线
//集群当前的配置纪元，用于实现故障转移
clusterNode *myself;
//指向当前节点的指针
redisClient 结构和 clusterLink 结构的相同和不同之处 
第17章
群+249
---
## Page 254
250·第三部分多机数据库的实现
点 B添加到节点 A当前所在的集群里面：
17.1.3
通过向节点A发送CLUSTER MEET命令，客户端可以让接收命令的节点A将另一个节
口 而在节点7002 创建的clusterState 结构中，myself 指针将指向代表节点7002
口不过在节点 7001 创建的 clusterState 结构中，myself 指针将指向代表节点
7001 的clusterNode 结构，而节点 7000 和节点 7002 则是集群中的其他节点。
的clusterNode 结构，而节点 7000和节点 7001则是集群中的其他节点。
CLUSTERMEET 命令的实现
REDIS_CLUSTER_FAIL
currentEpoch
clusterState
nodes
size
state
图17-7节点 7000 创建的clusterState 结构
"9dfb...5c26"
"5154...2939"
nodes
REDIS_NODE_MASTER
REDIS_NODE_MASTER
REDIS_NODE_MASTER
"9dfb
"68ee.
"127.0.0.1*
configEpoch
clusterNode
"127.0.0.1"
configEpoch
clusterNode
"127.0.0.1"
configEpoch
"5154.
clusterNode
port
flags
flags
name
flags
7002
ip
7001
1od
7000
port
ip
ip
..f2ff"
.5c26"
...2939"
---
## Page 255
任何槽：
一个集群里面，
数据库中有任何一个槽没有得到处理，那么集群处于下线状态（fail）。
理0个或最多16384个槽。
17.2
点也与节点B进行握手，最终，经过一段时间之后，节点B会被集群中的所有节点认识。
点 B可以知道节点A已经成功地接收到了自己返回的 PONG 消息，握手完成。
点A可以知道节点B已经成功地接收到了自己发送的MEET 消息。
建一个 clusterNode 结构，并将该结构添加到自已的clusterState.nodes 字典里面。
一条 MEET 消息（message）。
clusterState.nodes 字典里面。
将来的进一步通信打好基础：
在上一节，我们使用CLUSTERMEET命令将7000、7001、7002三个节点连接到了同
3）如果一切顺利，节点B将接收到节点A发送的MEET 消息，节点B会为节点 A创
当数据库中的16384个槽都有节点在处理时，集群处于上线状态（ok）；相反地，如果
Redis 集群通过分片的方式来保存数据库中的键值对：集群的整个数据库被分为16384
2）之后，节点A将根据CLUSTER MEET命令给定的IP 地址和端口号，向节点 B 发送
之后，节点A会将节点B的信息通过 Gossip 协议传播给集群中的其他节点，让其他节
1）节点A会为节点B创建一个 clusterNode 结构，并将该结构添加到自己的
图17-8展示了以上步骤描述的握手过程。
7）如果一切顺利，节点 B 将接收到节点A返回的 PING 消息，通过这条 PING 消息节
6）之后，节点A将向节点B返回一条PING 消息。
5）如果一切顺利，节点A将接收到节点 B返回的 PONG 消息，通过这条 PONG 消息节
4）之后，节点B将向节点A返回一条PONG 消息。
收到命令的节点A将与节点B进行握手（handshake），以此来确认彼此的存在，并为
CLUSTER MEET  
槽指派
，不过这个集群目前仍然处于下线状态，因为集群中的三个节点都没有在处理
客户端
CLUSTER MEET
发送命令
图17-8节点的握手过程
节点A
返回 PING 消息
返回 PONG 消息
发送MEET消息
节点B
第17章
群·251
---
## Page 256
252·第三部分多机数据库的实现
被指派给了相应的节点，集群进人上线状态：
将槽5001至槽10000指派给节点7001负责：
给节点负责：
9dfb4c4e016e627d9769e4c9bb0d4fa208e65c26 127.0.0.1:7002 master - 0 1388317426165
cluster_stats_messages_received:2617
cluster_size:3
cluster_slots_ok:16384
cluster_slots_assigned:16384
127.0.0.1:7000> CLUSTER INFO
当以上三个CLUSTERADDSLOTS命令都执行完毕之后，数据库中的16384个槽都已经
然后将槽10001至槽16383指派给7002负责：
为了让7000、7001、7002三个节点所在的集群进人上线状态，我们继续执行以下命令
68eef66df23420a5862208ef5bla7005b806f2ff 127.0.0.1:7001 master - 0 1388316665850
举个例子，执行以下命令可以将槽0至槽5000指派给节点7000负责：
CLUSTER ADDSLOTS  [slot ...]
通过向节点发送CLUSTER ADDSLOTS命令，我们可以将一个或多个槽指派（assign）
127.0.0.1:7000> CLUSTER NODES
cluster_known_nodes:3
cluster_state:ok
OK
127.0.0.1:7002> CLUSTER ADDSLOTS 10001 10002 10003 10004 ... 16383
OK
51549e625cfda318ad27423a3le7476fe3cd2939 :0 myself,master - 0 0 0 connected 0-5000
9dfb4c4e016e627d9769e4c9bb0d4fa208e65c26 127.0.0.1:7002 master - 0 1388316664849
127.0.0.1:7000> CLUSTER NODES
cluster_stats_messages_received:28
cluster_stats_messages_sent:110
cluster_current_epoch:0
cluster_slots_fail:0
cluster_slots_pfail:0
cluster_slots_ok:0
127.0.0.1:7000> CLUSTER INFO
0 connected
0 connected
---
## Page 257
位的值都为1，而其余所有二进制位的值都为0，这表示节点负责处理槽1、3、5、8、9、10。
1，其余所有二进制位的值都为0，这表示节点负责处理槽0至槽7。
编号，并根据索引i上的二进制位的值来判断节点是否负责处理槽i：
节，共包含16384个二进制位。
17.2.1
息的方法，之后再介绍CLUSTER ADDSLOTS命令的实现。
Redis以0为起始索引，16383为终止索引，对slots 数组中的16384个二进制位进行
图17-10展示了另一个slots 数组示例：这个数组索引1、3、5、8、9、10 上的二进制
图17-9展示了一个 s1ots 数组示例：这个数组索引0至索引 7上的二进制位的值都为
口 如果 slots 数组在索引i 上的二进制位的值为 0，那么表示节点不负责处理槽 i。
 如果 slots 数组在索引i 上的二进制位的值为 1，那么表示节点负责处理槽 i。
slots 属性是一个二进制位数组（bit array），这个数组的长度为 16384 /8=2048个字
clusterNode 结构的 slots 属性和 numslot 属性记录了节点负责处理哪些槽:
本节接下来的内容将首先介绍节点保存槽指派信息的方法，以及节点之间传播槽指派信
struct clusterNode {
51549e625cfda318ad27423a31e7476fe3cd2939 :0 myself,master - 0 0 0 connected 0-5000
字节
*
68eef66df23420a5862208ef5b1a7005b806f2ff 127.0.0.1:7001 master - 0 1388317427167
索引
字节
值
0 connected 5001-10000
0 connected 10001-16383
int numslots;
unsigned char slots [16384/8];
记录节点的槽指派信息
0
。
 slots[0]
2
3
slots[0]
41
3
[s678910
4
5
图17-10另一个 s1ots数组示例
图17-9一个 slots 数组示例
0
。
8
9