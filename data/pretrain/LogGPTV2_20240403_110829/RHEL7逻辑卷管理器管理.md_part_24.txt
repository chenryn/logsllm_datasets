```
::: para
通过查看 `/etc/lvm/archive`{.filename} 目录，应该可以找到被覆盖的物理卷
UUID。在文件 ` VolumeGroupName_xxxx.vg`{.filename}
中查找该卷组最后的有效归档 LVM 元数据。
:::
::: para
另外，还可以找到失活的卷并设定 `partial`{.option}
（`-P`{.option}）选项，这样就可以找到丢失的被破坏的物理卷的 UUID。
:::
``` screen
# vgchange -an --partial
  Partial mode. Incomplete volume groups will be activated read-only.
  Couldn't find device with uuid 'FmGRh3-zhok-iVI8-7qTD-S5BI-MAEN-NYM5Sk'.
  Couldn't find device with uuid 'FmGRh3-zhok-iVI8-7qTD-S5BI-MAEN-NYM5Sk'.
  ...
```
::: para
使用 `pvcreate`{.command} 的 `--uuid`{.option} 和
`--restorefile`{.option} 选项恢复物理卷。下面的例子使用上述 UUID
`FmGRh3-zhok-iVI8-7qTD-S5BI-MAEN-NYM5Sk`{.literal} 将
`/dev/sdh1`{.literal} 设备标记为物理卷。这个命令使用
`VG_00050.vg`{.literal}
中的元数据信息，即使用该卷组最新的好归档元数据恢复物理卷标签。`restorefile`{.option}
参数让 `pvcreate`{.command}
生成与卷组中旧的物理卷兼容的新物理卷，确保新的元数据不会被放在包含旧的物理卷元数据的区域（这有可能发生。例如：如果原始
`pvcreate`{.command}
命令使用了控制元数据放置位置的命令行参数，或者使用了应用不同默认选项的软件版本创建物理卷时，就会发生这种情况）。`pvcreate`{.command}
命令仅覆盖 LVM 元数据区域，不会影响现有的数据区域。
:::
``` screen
# pvcreate --uuid "FmGRh3-zhok-iVI8-7qTD-S5BI-MAEN-NYM5Sk" --restorefile /etc/lvm/archive/VG_00050.vg /dev/sdh1
  Physical volume "/dev/sdh1" successfully created
```
::: para
然后就可以使用 `vgcfgrestore`{.command} 命令恢复卷组的元数据。
:::
``` screen
# vgcfgrestore VG
  Restored volume group VG
```
::: para
现在可以显示逻辑卷。
:::
``` screen
# lvs -a -o +devices
  LV     VG   Attr   LSize   Origin Snap%  Move Log Copy%  Devices
  stripe VG   -wi--- 300.00G                               /dev/sdh1 (0),/dev/sda1(0)
  stripe VG   -wi--- 300.00G                               /dev/sdh1 (34728),/dev/sdb1(0)
```
::: para
下面的命令激活卷并显示激活的卷。
:::
``` screen
# lvchange -ay /dev/VG/stripe
[root@link-07 backup]# lvs -a -o +devices
  LV     VG   Attr   LSize   Origin Snap%  Move Log Copy%  Devices
  stripe VG   -wi-a- 300.00G                               /dev/sdh1 (0),/dev/sda1(0)
  stripe VG   -wi-a- 300.00G                               /dev/sdh1 (34728),/dev/sdb1(0)
```
::: para
如果磁盘中的 LVM
元数据至少使用了覆盖其数据的空间大小，这个命令可以恢复物理卷。如果覆盖元数据的数据超过了元数据区域，那么就有可能损害到卷中的数据。此时可以使用
`fsck`{.command} 命令修复那些数据。
:::
:::
::: section
::: titlepage
# [⁠]{#troubleshooting.html#physvolreplace}6.5. 替换丢失的物理卷 {.title}
:::
[]{#troubleshooting.html#idm140426171938112 .indexterm}
::: para
如果物理卷失败或者需要替换，则可以标记一个新的物理卷来替换那个已经在现有卷组中丢失的物理卷，过程与修复物理卷元数据相同，详见
[第 6.4 节
"恢复物理卷元数据"](#troubleshooting.html#mdatarecover){.xref}。您可以使用
`vgdisplay`{.command} 命令的 `--partial`{.option} 和
`--verbose`{.option} 选项显示不再出现的物理卷的 UUID
和大小。如果想要使用同样大小的物理卷进行替换，则可以使用
`pvcreate`{.command} 命令，选项为 `--restorefile`{.option} 和
`--uuid`{.option} 初始化与丢失的物理卷有相同 UUID
的新设备。然后就可以使用 `vgcfgrestore`{.command} 命令恢复卷组的元数据。
:::
:::
::: section
::: titlepage
# [⁠]{#troubleshooting.html#lost_PV_remove_from_VG}6.6. 从卷组中删除丢失的物理卷。 {.title}
:::
[]{#troubleshooting.html#idm140426175165104 .indexterm}
::: para
如果丢失了物理卷，则可以用 `vgchange`{.command} 命令的
`--partial`{.option} 选项激活卷组中剩下的物理卷。可以使用
`vgreduce`{.command} 命令的 `--removemissing`{.option}
选项删除所有使用卷组中那些物理卷的逻辑卷。
:::
::: para
建议运行 `vgreduce`{.command} 命令，使用 `--test`{.option}
选项确定要破坏的数据。
:::
::: para
如果立即使用 `vgcfgrestore`{.command}
命令将卷组的元数据恢复到之前的状态，则与大多数 LVM
操作一样，`vgreduce`{.command} 命令在某种意义上是可逆的。例如：如果使用
`vgreduce`{.command} 命令的 `--removemissing`{.option} 参数，而不带
`--test`{.option}
参数，就可以找到要保留的已删除逻辑卷。此时仍可用替换物理卷，并使用另一个
`vgcfgrestore`{.command} 命令将卷组返回到之前的状态。
:::
:::
::: section
::: titlepage
# [⁠]{#troubleshooting.html#nofreeext}6.7. 逻辑卷没有足够的可用扩展 {.title}
:::
[]{#troubleshooting.html#idm140426154380912 .indexterm}
::: para
虽然根据 `vgdisplay`{.command} 或者 `vgs`{.command}
命令的输出结果，您认为有足够的扩展，但此时如果创建逻辑卷，则可能得到这样的出错信息"Insufficient
free
extents（没有足够的可用扩展）"。这是因为这些命令采用十进制处理数字以便提供可读的输出结果。要指定确切的大小，请使用可用物理扩展计数，而不是用字节来计算逻辑卷的大小。
:::
::: para
在默认情况下，`vgdisplay`{.command} 命令的输出结果提示可用物理扩展的行。
:::
``` screen
# vgdisplay
  --- Volume group ---
  ...
  Free  PE / Size       8780 / 34.30 GB
```
::: para
另外还可以使用 `vgs`{.command} 的 `vg_free_count`{.option} 和
`vg_extent_count`{.option} 参数显示可用扩展和扩展的总数。
:::
``` screen
# vgs -o +vg_free_count,vg_extent_count
  VG     #PV #LV #SN Attr   VSize  VFree  Free #Ext
  testvg   2   0   0 wz--n- 34.30G 34.30G 8780 8780
```
::: para
有 8780 个可用物理扩展，现在可以运行以下命令，使用小写 l
选项使用扩展而不是字节作为单位：
:::
``` screen
# lvcreate -l 8780 -n testlv testvg
```
::: para
这样就会使用卷组中的所有可用扩展。
:::
``` screen
# vgs -o +vg_free_count,vg_extent_count
  VG     #PV #LV #SN Attr   VSize  VFree Free #Ext
  testvg   2   1   0 wz--n- 34.30G    0     0 8780
```
::: para
另外还可用通过使用 `lvcreate`{.command} 命令的 `-l`{.option}
参数，使用卷组中一定比例的剩余可用空间扩大逻辑卷。详情请参考
[第 4.4.1 节
"创建线性逻辑卷"](#LVM_CLI.html#create_linear_volumes){.xref}。
:::
:::
:::
[]{#device_mapper.html}
::: appendix
::: titlepage
# [⁠]{#device_mapper.html#device_mapper}附录 A. 设备映射器（Device Mapper） {.title}
:::
::: para
Device Mapper
是一个为卷管理提供构架的内核驱动程序。它提供一个创建映射设备的通用方法，该设备可作为逻辑卷使用。它并不具体了解卷组或者元数据格式。
:::
::: para
Device Mapper 是很多高级技术的基础。除 LVM 外，Device Mapper 多路径和
`dmraid`{.command} 命令也使用 Device Mapper。Device Mapper
的应用程序界面是 `ioctl`{.command} 系统调用。用户界面是
`dmsetup`{.command} 命令。
:::
::: para
LVM 逻辑卷是使用 Device Mapper
激活的。每个逻辑卷都会被转换成映射的设备，每个片段都会被转换成映射列表中描述设备的一行。Device
Mapper
支持各种映射目标，包括线性映射、条带映射和错误映射。例如：两张磁盘可连成一个带一对线性映射的逻辑卷，每个映射对应一个磁盘。当
LVM 创建卷时，它会生成一个底层 device-mapper 设备，使用
`dmsetup`{.command}
命令可对其进行查询。有关映射列表中设备格式的详情，请参考 [第 A.1 节
"设备表映射"](#device_mapper.html#dm-mappings){.xref}。有关使用
`dmsetup`{.command} 命令查询某个设备的详情，请参考 [第 A.2 节 "dmsetup
命令"](#device_mapper.html#dmsetup){.xref}。
:::
::: section
::: titlepage
# [⁠]{#device_mapper.html#dm-mappings}A.1. 设备表映射 {.title}
:::
::: para
映射设备是根据指定如何使用支持的设备表映射映射设备的每个逻辑扇区的表格定义。映射设备表由以下格式行组成：
:::
``` screen
start length mapping [mapping_parameters...]
```
::: para
在设备映射表的第一行中，*`start`* 参数必须等于 0。每行中的 *`start`* +
*`length`* 参数必须与下一行的 *`start`*
相等。在映射表中指定哪个映射参数取决于在该行中指定的 *`mapping`* 类型。
:::
::: para
Device Mapper 的大小总是以扇区（512 字节）为单位指定。
:::
::: para
将某个设备指定为 Device Mapper 的映射参数后，就可以在该文件系统（比如
`/dev/hda`{.literal}）中根据其设备名称进行参考，或者在使用
*`major`*:*`minor`* 格式时根据主要号码和次要号码进行参考。首选
major:minor 格式，因为这样可避免查找路径名。
:::
::: para
以下显示了某设备的映像表示例。在这个表中有四个线性目标：
:::
``` screen
0 35258368 linear 8:48 65920
35258368 35258368 linear 8:32 65920
70516736 17694720 linear 8:16 17694976
88211456 17694720 linear 8:16 256
```
::: para
每行的前两个参数是片段起始块以及该片段的长度。下一个关键字是映射目标，在此示例中全部是
`linear`{.literal}。该行的其余部分由用于 `linear`{.literal}
目标的参数组成。
:::
::: para
下面的小节描述了以下映射的格式：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    线性映射
    :::
-   ::: para
    条带映射
    :::
-   ::: para
    镜像映射
    :::
-   ::: para
    快照和原始快照映射
    :::
-   ::: para
    错误映射
    :::
-   ::: para
    零映射
    :::
-   ::: para
    多路径映射
    :::
-   ::: para
    加密映射
    :::
:::
::: section
::: titlepage
## [⁠]{#device_mapper.html#linear-map}A.1.1. 线性映射目标 {.title}
:::
::: para
线性映射目标将块的连续行映射到另一个块设备中。线性目标的格式如下：
:::
``` screen
start length linear device offset
```
::: variablelist
[*`start`*]{.term}
:   ::: para
    虚拟设备中的起始块
    :::
[*`length`*]{.term}
:   ::: para
    这个片段的长度
    :::
[*`device`*]{.term}
:   ::: para
    块设备，被该文件系统中的设备名称或者主号码和副号码以
    *`major`*:*`minor`* 的格式参考
    :::
[*`offset`*]{.term}
:   ::: para
    该设备中映射的起始偏移
    :::
:::
::: para
以下示例显示了起始块位于虚拟设备 0，片段长度为 1638400，major:minor
号码对为 8:2，起始偏移为 41146992 的线性目标。
:::
``` screen