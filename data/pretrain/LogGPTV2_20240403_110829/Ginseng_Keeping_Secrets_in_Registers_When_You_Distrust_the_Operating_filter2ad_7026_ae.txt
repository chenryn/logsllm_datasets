as cleartext and as a result, are vulnerable to an untrusted OS.
Using Ginseng, we revise them so that the secrets are stored in
their secure stacks and never enter the memory in the Normal
world as plaintext.
1) Two-factor Authenticator: The two-factor authenticator,
based on RFC 6238 [33], enables a service provider to test
a user’s credentials with both a regular password and a time-
based onetime password (OTP) that changes every 30 seconds.
To use the two-factor authentication, the service provider and
the user share a secret key and generate the OTP by performing
HMAC-SHA1 on the current time and the key. At the user end,
the authenticator in a mobile device can encrypt the key in a ﬁle
system. However, to generate an OTP, the authenticator must
decrypt and store the key in the memory, making it vulnerable
to a compromised OS.
TABLE III.
OVERHEAD BREAKDOWN (CYCLE)
Kernel page table walk and call site protection are dominant overhead factors
d
a
e
h
r
e
v
O
Baseline
Kernel page table walk
Call site protection
Exception redirection
GService overhead
Total
Authenticator
37 K
45,356 K
680 K
(17 times)
9 K
(0.13 times)
851 K
46,933 K
wpa supplicant
219 M
23 M
45 M
6,429 M
1,640 M
(131,078 40,988 times)
6 M
78.52 times)
411 M
6 M
(99.40
661 M
7,361 M
(na¨ıve)
2,299 M
(optimized)
Classiﬁer
1.7 M
11.3 M
4.4 M
(137 times)
0.4 M
(5.4 times)
1.7 M
19.6 M
applying Ginseng to it
took us a trivial amount of time.
The authenticator processes a key and reversible intermediate
keys in four sensitive functions, so we added the sensitive
keyword at ten places of these functions. Ginseng protects
the key read from GService. We have tested its correctness
by logging into popular web sites, Facebook, Amazon, and
Twitter, and it can be used for workstation login through
PAM [59].
Performance: As shown in Table III, Ginseng imposes an
overhead of 46 896 K cycles to the authenticator. The kernel
page table walk constitutes 97 % of the overhead. It is because
GService walks the kernel page table four times for four
sensitive functions. The call site protection causes 1.5 % of the
overhead due to 17 times of function calls within the sensitive
functions. Since its binary size is 10 KB and sensitive data
resides in registers only for 831 us, we observe no page fault
and only two interrupts during the 15 iterations. The exception
redirection causes the overhead of 9 K cycles on average.
Although the overhead due to the kernel page table walk is
seemingly high, it is less than 50 ms and, more importantly,
onetime overhead when the sensitive functions are ﬁrst called.
Afterwards, when the authenticator generates a new OTP, the
overhead becomes 1540 K cycles, less than 2 ms.
2) wpa supplicant: wpa supplicant
is used by numerous Linux systems,
is open-source soft-
ware that
including
Ubuntu and Android, to connect to a wireless network us-
ing the Wi-Fi Protected Access (WPA) protocol. Vanilla
wpa supplicant reads a cleartext password from a conﬁguration
ﬁle or a network manager [26] and saves it in the memory. It
derives the key for encryption/decryption from the password.
Because the password is stored as cleartext, it is vulnerable to
an untrusted OS.
Development effort: The Ginseng-enabled wpa supplicant
saves the password in GService; the conﬁguration ﬁle only
contains the UUID to retrieve it. We modify 25 SLOC out of
400 K SLOC in wpa supplicant so that it reads UUID for a
password from the conﬁguration ﬁle. We also modify 90 SLOC
out of 513 K SLOC in OpenSSL so that OpenSSL protects
the password with Ginseng. We import BoringSSL’s assembly
implementation of SHA1 like in two-factor authenticator. It
took one day for the ﬁrst author, who was unfamiliar with
wpa supplicant and OpenSSL, to apply Ginseng.
Development effort: We implement the authenticator with
100 lines of C code and 150 lines of assembly implementation
of SHA1 imported from the Google BoringSSL project. Since
we implemented the authenticator without Ginseng ourselves,
Performance: We measure CPU cycles and time span from
its start to when the WPA association is completed. We discuss
the performance in a na¨ıve implementation in this section and
defer discussion on an optimized implementation to VI-C.
11
In the na¨ıve implementation, the call site protection causes
90 % of the overhead. This is because wpa supplicant calls a
sensitive function that repeatedly calls libc and other sensitive
functions. This leads to 131 K function calls and constitutes
six billion cycles for the call site protection. The kernel page
table walk introduces the same amount of overhead as that of
the two-factor authenticator because both have four sensitive
functions. Its binary size and running time, 4.2 MB and 20 sec
respectively, lead to more exception redirections. During the
20 sec execution, we observe two types of exceptions, instruc-
tion and data aborts (a.k.a. page fault) and per-core timer
interrupts. This exception redirection constitutes 0.1 % of the
overhead. GService contributes 9 % of the overhead due to
the repeated entries to and exits from sensitive functions, and
internal storage (de)allocation thereof.
3) Learned Classiﬁer (Decision Tree): Decision trees are
light-weight classiﬁers that are widely used in practice [52].
A node in a tree selects an attribute of data based on the
criteria and branches down to a leaf node for classiﬁcation.
The tree is an important intellectual property by the software
vendor since it often requires valuable training dataset and
efforts [69]. The software vendor often includes the tree in
the software package distributed to users, e.g., installed in
a smartphone. While the tree can be encrypted in storage,
it must be decrypted to classify data. Once in memory, its
conﬁdentiality or integrity can be compromised by the OS [51].
As the criteria in tree nodes, i.e., attributes to be chosen at a
node, determine a decision tree, Ginseng protects criteria in
each node of a decision tree.
Development effort: We adopt
the C4.5 decision tree
implementation used by recent works on model security [12],
[24] and use Ginseng to protect
the information on what
attribute to be chosen at a decision node. We only need to
add six lines of code into the 5 K SLOC for declaring a single
sensitive variable and reading the attribute information to the
variable.
Performance: We train the tree with the voting dataset
supplied with the implementation. As shown in Table III, 63 %
of the overhead is due to the kernel page table walk and 25 %
is for the call site protection. During the 15 iterations, we
observe 81 exceptions which constitutes 2 % of the overhead.
The implementation has a single sensitive function which is
recursively called with no other function calls; thus, the 137
call site protections are only for recursive calls. The total
overhead due to Ginseng is 18 M cycles; however, 63 % of the
overhead is a one-time overhead due to the kernel page table
walk, and the reoccurring overhead of 7 M cycles is less than
10 ms and barely perceptible when used interactively [61].
4) Nginx web server: Many IoT devices such as IP camera
and wireless router [35], [48], [71] embed a web server, Nginx.
For secure communications, the web server uses the Transport
Layer Security (TLS) protocol, which derives session keys
from a master key and uses them to encrypt and decrypt
communications. Although OpenSSL, a TLS library used by
Nginx, sanitizes session keys when a session ends, it saves the
the master key in the memory for ﬁve minutes for session
resumption [39], which is vulnerable to a compromised OS.
In our modiﬁcation, we protect the
master key and derive the session keys without storing the
Development effort:
master key in the memory. We modify 200 SLOC in OpenSSL
so that it reads the master key from GService. We again import
BoringSSL’s assembly implementation of SHA512, which is
used for SHA384 and has 980 SLOC. The modiﬁcation is
necessary largely due to limitations in our compiler prototype,
which does not yet support an array with sensitive data. As a
result, we have to manually modify OpenSSL to break down
a 48-byte master key in an array into multiple variables. A
full-ﬂedged compiler supporting large or complex data types
will eliminate this manual effort; and we believe extending
the compiler for this only requires engineering effort. It took
two days for the ﬁrst author to apply Ginseng despite the
complexity of OpenSSL.
Performance: We perform Apache benchmark (ab) 10 000
times on transferring 1-1024 KB. We do not observe any
meaningful difference. For example, when we send 1 KB
data over HTTPS,
the vanilla web server processes 31.18
transaction per sec and the Ginseng-enabled server processes
31.35 transaction per second. This is because network and
ﬁle system activities readily mask Ginseng’s overhead. We
note related efforts aiming at x86-based systems such as
Fides [68] and TrustVisor [44] incur measurable overhead, up
to 16 % [68] for the Apache web server.
C. Optimizing Ginseng’s overhead
Following our experience of applying Ginseng to the above
applications and quantifying its overhead, we now discuss
ways that Ginseng’s overhead can be reduced. Ginseng’s
recurring overhead mainly comes from the use of secure stacks.
Two factors determine the cost of secure stack uses: the number
of function calls within a sensitive function, the number and
size of sensitive variables within a sensitive function.
The number of function calls inside a sensitive function
determines the overhead from call site protection. For exam-
ple, in wpa supplicant (VI-B2), the overhead with the na¨ıve
implementation increases the execution time by 4 sec. The third
row of Table III shows that 90 % of the overhead comes from
multiple call sites repeatedly invoked in loops. To reduce the
overhead due to the 131 K call site protections, we reduce the
number of call sites within sensitive functions by inlining the
small callees, e.g., memset() and memcpy(). This reduces the
overhead by 75 %, from 6.4 B cycles to 1.6 B cycles as shown
in the table.
When sensitive variables are many or large (V-A), the
compiler may have to spill some of them to the secure stack,
incurring an overhead similar to that of call site protection.
Therefore, developers should leverage their knowledge about
their apps to minimize the number and size of sensitive
variables (III-B). For example, in wpa supplicant, the Wi-Fi
password cannot be reversely engineered from a derived key
of 32 bytes. Therefore, there is no need to protect the derived
key.
Ginseng incurs a onetime overhead when walking the
kernel page table to protect the code integrity of a sensitive
function. This overhead is determined by the number of
sensitive functions (IV-B). By aggregating multiple sensitive
functions into one, one can reduce this onetime overhead.
For example, we aggregate the four sensitive functions of
into two to reduce the overhead from the
wpa supplicant
12
kernel page table walk by 50 %, as shown in the second row
of Table III. However, such aggregation creates a sensitive
function with more sensitive registers, which increases register
pressure and may need higher recurring overhead. There-
fore, developers must balance between onetime and recurring
overheads using their knowledge of the app and the number
of sensitive registers allowed by the compiler. For example,
when aggregating sensitive functions of wpa supplicant, we
are wary that the compiler allows up to seven sensitive registers
(V-A). Thus, we aggregate sensitive functions only when the
aggregation does not lead to more than seven sensitive registers
in the aggregated function.
VII. RELATED WORK
Ginseng protects sensitive data against the untrusted OS,
with a ﬁne granularity to reduce the overhead. Ginseng also
protects the data against cold-boot attacks without trusting the
OS. In this section, we discuss how previous works protect
sensitive data against the untrusted OS and cold-boot attacks.
A. Protecting secrets against untrusted OS
1) App Logic in Isolated Execution Environment: Previous
works provide a special, isolated execution environment based
on a higher privilege mode, e.g., hypervisor mode, or hardware
security extension, i.e., Intel SGX. The environment is inac-
cessible to the rest of the system and provides protections on
code and data in it [8]. Thus, previous works run applications
with sensitive data or their sensitive parts in this isolated
environment. Ginseng does not provide such an execution
environment; instead, it protects only sensitive data by keeping
them in registers. By not protecting insensitive data, Ginseng
reduces the overhead of protection. Using registers, Ginseng
also protects sensitive data against Iago attacks [13], which
compromise an application through manipulated system call
return values.
One can protect an unmodiﬁed application by simply
running it inside an isolated environment. However, blindly
protecting the entire application imposes high overhead, which
motivates us to focus on only sensitive data. Overshadow [14]
uses a hypervisor to present different memory views to the
OS and a protected application, a technique called memory
cloaking. CloudVisor [73] extends this idea to virtual ma-
chines; trusted software in the hypervisor mode interposes
interactions between guest VMs and the existing VMM that
is deprivileged from the hypervisor mode to the kernel mode.
These hypervisor-based solutions are susceptible to the Iago
attack and incur prohibitively high overhead due to excessive
intervention for memory cloaking. SICE [5] constructs an iso-
lated execution environment using the x86 system management
mode (SMM) and a RAM resizing feature available only in
AMD processors. Moreover, it must suspend the OS when the
isolated application is running, incurring additional overhead.
Recent hardware extensions allow an isolated execution en-
vironment to be constructed with lower overhead. For example,
Intel SGX supports such isolated environments as enclaves.
Haven [8] runs a protected application in a dedicated enclave
together with a trusted library OS. Panoply [64] reduces the
TCB size by removing the OS from the enclave; instead, it
provides a thin container in the enclave through which an
application in the enclave can access the OS outside of the en-
clave. Ryoan [32] extends the isolated execution environment
supported by Intel SGX to a distributed system. However, the
use of SGX enclave still incurs signiﬁcant overhead, up to
34× [50], because enclave exits are expensive. SCONE [3]
and Eleos [50] reduce this overhead. Unlike Haven, SCONE
excludes the library OS from the enclave and issues asyn-
chronous system calls through shared memory to avoid enclave
exits. Eleos goes even further by handling page faults within an
enclave through ActivePointers [62] and avoids enclave exits
due to page faults.
All these works have a common problem, which motivates
Ginseng: while protecting sensitive data,
they also protect
insensitive data and as a result, incur disproportionally high
overhead. For example, despite clever optimization, Eleos