new data in the $SRAT named data stream of the $Bitmap metadata file. The
$SRAT data stream contains a data structure that tracks each Reserve area,
including the number of reserved and used clusters. An application can query
information about Storage Reserve areas through the
FSCTL_QUERY_STORAGE_RESERVE file system control code and can
delete a Storage Reserve using the FSCTL_DELETE_STORAGE_RESERVE
code.
After a Storage Reserve area is defined, the application is guaranteed that
the space will no longer be used by any other components. Applications can
then assign files and directories to a Storage Reserve area using the
NtSetInformationFile native API with the
FileStorageReserveIdInformationEx information class. The NTFS file system
driver manages the request by updating the in-memory reserved and used
clusters counters of the Reserve area, and by updating the volume’s total
number of reserved clusters that belong to NTFS reservations. It also stores
and updates the on-disk $STANDARD_INFO attribute of the target file. The
latter maintains 4 bits to store the Storage Reserve area ID. In this way, the
system is able to quickly enumerate each file that belongs to a reserve area by
just parsing MFT entries. (NTFS implements the enumeration in the
FSCTL_QUERY_FILE_LAYOUT code’s dispatch function.) A user can
enumerate the files that belong to a Storage Reserve by using the fsutil
storageReserve findByID command, specifying the volume path name and
Storage Reserve ID she is interested in.
Several basic file operations have new side effects due to Storage
Reserves, like file creation and renaming. Newly created files or directories
will automatically inherit the storage reserve ID of their parent; the same
applies for files or directories that get renamed (moved) to a new parent.
Since a rename operation can change the Storage Reserve ID of the file or
directory, this implies that the operation might fail due to lack of disk space.
Moving a nonempty directory to a new parent implies that the new Storage
Reserve ID is recursively applied to all the files and subdirectories. When the
reserved space of a Storage Reserve ends, the system starts to use the
volume’s free available space, so there is no guarantee that the operation
always succeeds.
EXPERIMENT: Witnessing storage reserves
Starting from the May 2019 Update of Windows 10 (19H1), you
can look at the existing NTFS reserves through the built-in
fsutil.exe tool:
Click here to view code image
C:\>fsutil storagereserve query c:
Reserve ID:       1
Flags:            0x00000000
Space Guarantee:  0x0               (0 MB)
Space Used:       0x0               (0 MB)
Reserve ID:       2
Flags:            0x00000000
Space Guarantee:  0x0               (0 MB)
Space Used:       0x199ed000        (409 MB)
Windows Setup defines two NTFS reserves: a Hard reserve (ID
1), used by the Setup application to store its files, which can’t be
deleted or replaced by other applications, and a Soft reserve (ID 2),
which is used to store temporary files, like system logs and
Windows Update downloaded files. In the preceding example, the
Setup application has been already able to install all its files (and
no Windows Update is executing), so the Hard Reserve is empty;
the Soft reserve has all its reserved space allocated. You can
enumerate all the files that belong to the reserve using the fsutil
storagereserve findById command. (Be aware that the output is
very large, so you might consider redirecting the output to a file
using the > operator.)
Click here to view code image
C:\>fsutil storagereserve findbyid c: 2
...
********* File 0x0002000000018762 *********
File reference number   : 0x0002000000018762
File attributes         : 0x00000020: Archive
File entry flags        : 0x00000000
Link (ParentID: Name)   : 0x0001000000001165: NTFS Name    :
Windows\System32\winevt\Logs\OAlerts.evtx
Link (ParentID: Name)   : 0x0001000000001165: DOS Name     : 
OALERT~1.EVT
Creation Time           : 12/9/2018 3:26:55
Last Access Time        : 12/10/2018 0:21:57
Last Write Time         : 12/10/2018 0:21:57
Change Time             : 12/10/2018 0:21:57
LastUsn                 : 44,846,752
OwnerId                 : 0
SecurityId              : 551
StorageReserveId        : 2
Stream                  : 0x010  ::$STANDARD_INFORMATION
    Attributes          : 0x00000000: *NONE*
    Flags               : 0x0000000c: Resident | No clusters 
allocated
    Size                : 72
    Allocated Size      : 72
Stream                  : 0x030  ::$FILE_NAME
    Attributes          : 0x00000000: *NONE*
    Flags               : 0x0000000c: Resident | No clusters 
allocated
    Size                : 90
    Allocated Size      : 96
Stream                  : 0x030  ::$FILE_NAME
    Attributes          : 0x00000000: *NONE*
    Flags               : 0x0000000c: Resident | No clusters 
allocated
    Size                : 90
    Allocated Size      : 96
Stream                  : 0x080  ::$DATA
    Attributes          : 0x00000000: *NONE*
    Flags               : 0x00000000: *NONE*
    Size                : 69,632
    Allocated Size      : 69,632
    Extents             : 1 Extents
                        : 1: VCN: 0 Clusters: 17 LCN: 
3,820,235
Transaction support
By leveraging the Kernel Transaction Manager (KTM) support in the kernel,
as well as the facilities provided by the Common Log File System, NTFS
implements a transactional model called transactional NTFS or TxF. TxF
provides a set of user-mode APIs that applications can use for transacted
operations on their files and directories and also a file system control
(FSCTL) interface for managing its resource managers.
 Note
Windows Vista added the support for TxF as a means to introduce atomic
transactions to Windows. The NTFS driver was modified without actually
changing the format of the NTFS data structures, which is why the NTFS
format version number, 3.1, is the same as it has been since Windows XP
and Windows Server 2003. TxF achieves backward compatibility by
reusing the attribute type ($LOGGED_UTILITY_STREAM) that was
previously used only for EFS support instead of adding a new one.
TxF is a powerful API, but due to its complexity and various issues that
developers need to consider, they have been adopted by a low number of
applications. At the time of this writing, Microsoft is considering deprecating
TxF APIs in a future version of Windows. For the sake of completeness, we
present only a general overview of the TxF architecture in this book.
The overall architecture for TxF, shown in Figure 11-54, uses several
components:
■    Transacted APIs implemented in the Kernel32.dll library
■    A library for reading TxF logs
(%SystemRoot%\System32\Txfw32.dll)
■    A COM component for TxF logging functionality
(%SystemRoot\System32\Txflog.dll)
■    The transactional NTFS library inside the NTFS driver
■    The CLFS infrastructure for reading and writing log records
Figure 11-54 TxF architecture.
Isolation
Although transactional file operations are opt-in, just like the transactional
registry (TxR) operations described in Chapter 10, TxF has an effect on
regular applications that are not transaction-aware because it ensures that the
transactional operations are isolated. For example, if an antivirus program is
scanning a file that’s currently being modified by another application via a
transacted operation, TxF must ensure that the scanner reads the
pretransaction data, while applications that access the file within the
transaction work with the modified data. This model is called read-committed
isolation.
Read-committed isolation involves the concept of transacted writers and
transacted readers. The former always view the most up-to-date version of a
file, including all changes made by the transaction that is currently associated
with the file. At any given time, there can be only one transacted writer for a
file, which means that its write access is exclusive. Transacted readers, on the
other hand, have access only to the committed version of the file at the time
they open the file. They are therefore isolated from changes made by
transacted writers. This allows for readers to have a consistent view of a file,
even when a transacted writer commits its changes. To see the updated data,
the transacted reader must open a new handle to the modified file.
Nontransacted writers, on the other hand, are prevented from opening the
file by both transacted writers and transacted readers, so they cannot make
changes to the file without being part of the transaction. Nontransacted
readers act similarly to transacted readers in that they see only the file
contents that were last committed when the file handle was open. Unlike
transacted readers, however, they do not receive read-committed isolation,
and as such they always receive the updated view of the latest committed
version of a transacted file without having to open a new file handle. This
allows non-transaction-aware applications to behave as expected.
To summarize, TxF’s read-committed isolation model has the following
characteristics:
■    Changes are isolated from transacted readers.
■    Changes are rolled back (undone) if the associated transaction is
rolled back, if the machine crashes, or if the volume is forcibly
dismounted.
■    Changes are flushed to disk if the associated transaction is committed.
Transactional APIs
TxF implements transacted versions of the Windows file I/O APIs, which use
the suffix Transacted:
■    Create APIs CreateDirectoryTransacted, CreateFileTransacted,
CreateHardLinkTransacted, CreateSymbolicLinkTransacted
■    Find APIs FindFirstFileNameTransacted, FindFirstFileTransacted,
FindFirstStreamTransacted
■    Query APIs GetCompressedFileSizeTransacted,
GetFileAttributesTransacted, GetFullPathNameTransacted,
GetLongPathNameTransacted
■    Delete APIs DeleteFileTransacted, RemoveDirectoryTransacted
■    Copy and Move/Rename APIs CopyFileTransacted,
MoveFileTransacted
■    Set APIs SetFileAttributesTransacted
In addition, some APIs automatically participate in transacted operations
when the file handle they are passed is part of a transaction, like one created
by the CreateFileTransacted API. Table 11-10 lists Windows APIs that have
modified behavior when dealing with a transacted file handle.
Table 11-10 API behavior changed by TxF
API Name
Change
CloseHandle
Transactions aren’t committed until all 
applications close transacted handles to the file.
CreateFileMapping, 
MapViewOfFile
Modifications to mapped views of a file part of a 
transaction are associated with the transaction 
themselves.
FindNextFile, 
ReadDirectoryChan
ges, 
GetInformationByH
andle, GetFileSize
If the file handle is part of a transaction, read-
isolation rules are applied to these operations.
GetVolumeInformati
on
Function returns 
FILE_SUPPORTS_TRANSACTIONS if the 
volume supports TxF.
ReadFile, WriteFile
Read and write operations to a transacted file 
handle are part of the transaction.
SetFileInformationB
yHandle
Changes to the FileBasicInfo, FileRenameInfo, 
FileAllocationInfo, FileEndOfFileInfo, and 
FileDispositionInfo classes are transacted if the 
file handle is part of a transaction.
SetEndOfFile, 
SetFileShortName, 
SetFileTime
Changes are transacted if the file handle is part 
of a transaction.
On-disk implementation
As shown earlier in Table 11-7, TxF uses the
$LOGGED_UTILITY_STREAM attribute type to store additional data for
files and directories that are or have been part of a transaction. This attribute
is called $TXF_DATA and contains important information that allows TxF to
keep active offline data for a file part of a transaction. The attribute is
permanently stored in the MFT; that is, even after the file is no longer part of
a transaction, the stream remains, for reasons explained soon. The major
components of the attribute are shown in Figure 11-55.
Figure 11-55 $TXF_DATA attribute.
The first field shown is the file record number of the root of the resource
manager responsible for the transaction associated with this file. For the
default resource manager, the file record number is 5, which is the file record
number for the root directory (\) in the MFT, as shown earlier in Figure 11-
31. TxF needs this information when it creates an FCB for the file so that it
can link it to the correct resource manager, which in turn needs to create an
enlistment for the transaction when a transacted file request is received by
NTFS.
Another important piece of data stored in the $TXF_DATA attribute is the
TxF file ID, or TxID, and this explains why $TXF_DATA attributes are
never deleted. Because NTFS writes file names to its records when writing to
the transaction log, it needs a way to uniquely identify files in the same
directory that may have had the same name. For example, if sample.txt is
deleted from a directory in a transaction and later a new file with the same
name is created in the same directory (and as part of the same transaction),
TxF needs a way to uniquely identify the two instances of sample.txt. This
identification is provided by a 64-bit unique number, the TxID, that TxF
increments when a new file (or an instance of a file) becomes part of a
transaction. Because they can never be reused, TxIDs are permanent, so the
$TXF_DATA attribute will never be removed from a file.
Last but not least, three CLFS (Common Logging File System) LSNs are
stored for each file part of a transaction. Whenever a transaction is active,
such as during create, rename, or write operations, TxF writes a log record to
its CLFS log. Each record is assigned an LSN, and that LSN gets written to
the appropriate field in the $TXF_DATA attribute. The first LSN is used to
store the log record that identifies the changes to NTFS metadata in relation
to this file. For example, if the standard attributes of a file are changed as part
of a transacted operation, TxF must update the relevant MFT file record, and
the LSN for the log record describing the change is stored. TxF uses the
second LSN when the file’s data is modified. Finally, TxF uses the third LSN
when the file name index for the directory requires a change related to a
transaction the file took part in, or when a directory was part of a transaction
and received a TxID.
The $TXF_DATA attribute also stores internal flags that describe the state
information to TxF and the index of the USN record that was applied to the
file on commit. A TxF transaction can span multiple USN records that may
have been partly updated by NTFS’s recovery mechanism (described
shortly), so the index tells TxF how many more USN records must be applied
after a recovery.
TxF uses a default resource manager, one for each volume, to keep track
of its transactional state. TxF, however, also supports additional resource
managers called secondary resource managers. These resource managers can
be defined by application writers and have their metadata located in any
directory of the application’s choosing, defining their own transactional work
units for undo, backup, restore, and redo operations. Both the default
resource manager and secondary resource managers contain a number of
metadata files and directories that describe their current state:
■    The $Txf directory, located into $Extend\$RmMetadata directory,
which is where files are linked when they are deleted or overwritten
by transactional operations.
■    The $Tops, or TxF Old Page Stream (TOPS) file, which contains a
default data stream and an alternate data stream called $T. The default
stream for the TOPS file contains metadata about the resource
manager, such as its GUID, its CLFS log policy, and the LSN at
which recovery should start. The $T stream contains file data that is
partially overwritten by a transactional writer (as opposed to a full
overwrite, which would move the file into the $Txf directory).
■    The TxF log files, which are CLFS log files storing transaction
records. For the default resource manager, these files are part of the
$TxfLog directory, but secondary resource managers can store them
anywhere. TxF uses a multiplexed base log file called $TxfLog.blf.
The file \$Extend\$RmMetadata\$TxfLog\$TxfLog contains two
streams: the KtmLog stream used for Kernel Transaction Manager
metadata records, and the TxfLog stream, which contains the TxF log
records.
EXPERIMENT: Querying resource manager
information
You can use the built-in Fsutil.exe command-line program to query
information about the default resource manager as well as to create,
start, and stop secondary resource managers and configure their
logging policies and behaviors. The following command queries
information about the default resource manager, which is identified
by the root directory (\):
Click here to view code image
d:\>fsutil resource info \
Resource Manager Identifier :      81E83020-E6FB-11E8-B862-
D89EF33A38A7
KTM Log Path for RM:  
\Device\HarddiskVolume8\$Extend\$RmMetadata\$TxfLog\$TxfLog:
:KtmLog
Space used by TOPS:   1 Mb
TOPS free space:      100%
RM State:             Active
Running transactions: 0
One phase commits:    0
Two phase commits:    0
System initiated rollbacks: 0
Age of oldest transaction:  00:00:00
Logging Mode:         Simple
Number of containers: 2
Container size:       10 Mb
Total log capacity:   20 Mb
Total free log space: 19 Mb
Minimum containers:   2
Maximum containers:   20
Log growth increment: 2 container(s)
Auto shrink:          Not enabled
RM prefers availability over consistency.
As mentioned, the fsutil resource command has many options
for configuring TxF resource managers, including the ability to
create a secondary resource manager in any directory of your
choice. For example, you can use the fsutil resource create
c:\rmtest command to create a secondary resource manager in the
Rmtest directory, followed by the fsutil resource start c:\rmtest
command to initiate it. Note the presence of the $Tops and
$TxfLogContainer* files and of the TxfLog and $Txf directories in
this folder.
Logging implementation
As mentioned earlier, each time a change is made to the disk because of an
ongoing transaction, TxF writes a record of the change to its log. TxF uses a
variety of log record types to keep track of transactional changes, but
regardless of the record type, all TxF log records have a generic header that
contains information identifying the type of the record, the action related to
the record, the TxID that the record applies to, and the GUID of the KTM
transaction that the record is associated with.
A redo record specifies how to reapply a change part of a transaction
that’s already been committed to the volume if the transaction has actually
never been flushed from cache to disk. An undo record, on the other hand,
specifies how to reverse a change part of a transaction that hasn’t been
committed at the time of a rollback. Some records are redo-only, meaning
they don’t contain any equivalent undo data, whereas other records contain
both redo and undo information.
Through the TOPS file, TxF maintains two critical pieces of data, the base
LSN and the restart LSN. The base LSN determines the LSN of the first valid
record in the log, while the restart LSN indicates at which LSN recovery
should begin when starting the resource manager. When TxF writes a restart