## 沉浸式学习PostgreSQL|PolarDB 12: 如何快速构建 海量 逼真 测试数据   
### 作者    
digoal    
### 日期    
2023-09-06    
### 标签    
PostgreSQL , PolarDB , 数据库 , 教学    
----    
## 背景    
欢迎数据库应用开发者参与贡献场景, 在此[issue](https://github.com/digoal/blog/issues/121)回复即可, 共同建设《沉浸式数据库学习教学素材库》, 帮助开发者用好数据库, 提升开发者职业竞争力, 同时为企业降本提效.    
- 系列课程的核心目标是教大家怎么用好数据库, 而不是怎么运维管理数据库、怎么开发数据库内核. 所以面向的对象是数据库的用户、应用开发者、应用架构师、数据库厂商的产品经理、售前售后专家等角色.    
本文的实验可以使用永久免费的阿里云[云起实验室](https://developer.aliyun.com/adc/scenario/exp/f55dbfac77c0467a9d3cd95ff6697a31)来完成.    
如果你本地有docker环境也可以把镜像拉到本地来做实验:    
x86_64机器使用以下docker image:    
- [《amd64 image》](../202307/20230710_03.md)    
ARM机器使用以下docker image:    
- [《arm64 image》](../202308/20230814_02.md)    
## 业务场景1 介绍: 如何快速构建 海量 逼真 测试数据    
### 实现和对照      
#### 传统方法 设计和实验       
传统数据库测试通常使用标准套件tpcc,tpch,tpcb生成测试数据, 而当我们需要根据不同的业务场景来设计测试数据的特征, 并根据特征生成比较逼真的大规模数据时, 往往不太容易, 需要针对需求开发程序来实现.  
另外, 传统数据库的测试模型也比较简单, 通常只能使用标准的tpcc,tpch,tpcb压测软件来实现测试. 无法根据特定业务需求来进行模拟压测.    
#### PolarDB|PG新方法1 设计和实验    
一、如何生成各种需求、各种类型的随机值     
1、100到500内的随机数  
```  
postgres=# select 100 + random()*400 ;  
      ?column?        
--------------------  
 335.81542324284186  
(1 row)  
```  
2、100 到500内的随机整数  
```  
postgres=# select 100 + ceil(random()*400)::int ;  
 ?column?   
----------  
      338  
(1 row)  
```  
3、uuid  
```  
postgres=# select gen_random_uuid();  
           gen_random_uuid              
--------------------------------------  
 84e51794-e19c-40c1-9f8a-2dd80f29bc7a  
(1 row)  
```  
4、md5  
```  
postgres=# select md5(now()::text);  
               md5                  
----------------------------------  
 5af6874991f7122e8db67170040fe0f7  
(1 row)  
postgres=# select md5(random()::text);  
               md5                  
----------------------------------  
 744094f5f76f66afe4fbacb663ae03dc  
(1 row)  
```  
5、将任意类型转换为hashvalue  
```  
\df *.*hash*  
postgres=# select hashtext('helloworld');  
  hashtext    
------------  
 1836618988  
(1 row)  
```  
6、随机点  
```  
postgres=# select point(random(), random());  
                  point                    
-----------------------------------------  
 (0.1549642173067305,0.9623178115174227)  
(1 row)  
```  
7、多边形  
```  
postgres=# select polygon(path '((0,0),(1,1),(2,0))');  
       polygon         
---------------------  
 ((0,0),(1,1),(2,0))  
(1 row)  
```  
8、路径  
```  
postgres=# select path '((0,0),(1,1),(2,0))';  
        path           
---------------------  
 ((0,0),(1,1),(2,0))  
(1 row)  
```  
9、50到150的随机范围  
```  
postgres=# select int8range(50, 50+(random()*100)::int);  
 int8range   
-----------  
 [50,53)  
(1 row)  
postgres=# select int8range(50, 50+(random()*100)::int);  
 int8range   
-----------  
 [50,108)  
(1 row)  
```  
10、数组  
```  
postgres=# select array['a','b','c'];  
  array    
---------  
 {a,b,c}  
(1 row)  
```  
```  
SELECT ARRAY(SELECT ARRAY[i, i*2] FROM generate_series(1,5) AS a(i));  
              array  
----------------------------------  
 {{1,2},{2,4},{3,6},{4,8},{5,10}}  
(1 row)  
```  
11、随机数组  
```  
create or replace function gen_rnd_array(int,int,int) returns int[] as $$  
  select array(select $1 + ceil(random()*($2-$1))::int from generate_series(1,$3));  
$$ language sql strict;  
```  
```  
-- 10个取值范围1到100的值组成的数组  
postgres=# select gen_rnd_array(1,100,10);  
         gen_rnd_array            
--------------------------------  
 {4,70,70,77,21,68,93,57,92,97}  
(1 row)  
```  
下面10个参考:   
- https://www.cnblogs.com/xianghuaqiang/p/14425274.html  
12、生成随机整数 —— Generate a random integer  
```  
-- Function:  
  -- Generate a random integer  
-- Parameters:  
  -- min_value: Minimum value  
  -- max_value: Maximum value  
create or replace function gen_random_int(min_value int default 1,  max_value int default 1000) returns int  as  
$$  
begin  
    return min_value + round((max_value - min_value) * random());  
end;  
$$ language plpgsql;  
```  
```  
select gen_random_int();  
select gen_random_int(1,10);  
```  
13、生成随机字母字符串 —— Generate a random alphabetical string  
```  
-- Function:  
  -- Generate a random alphabetical string  
-- Parameters:  
  -- str_length: Length of the string  
  -- letter_case: Case of letters. Values for option: lower, upper and mixed  
create or replace function gen_random_alphabetical_string(str_length int default 10, letter_case text default 'lower') returns text as  
$body$  
begin  
    if letter_case in ('lower', 'upper', 'mixed') then  
        return  
        case letter_case   
            when 'lower' then array_to_string(array(select substr('abcdefghijklmnopqrstuvwxyz',(ceil(random()*26))::int, 1) FROM generate_series(1, str_length)), '')  
            when 'upper' then array_to_string(array(select substr('ABCDEFGHIJKLMNOPQRSTUVWXYZ',(ceil(random()*26))::int, 1) FROM generate_series(1, str_length)), '')  
            when 'mixed' then array_to_string(array(select substr('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',(ceil(random()*52))::int, 1) FROM generate_series(1, str_length)), '')  
            else array_to_string(array(select substr('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',(ceil(random()*52))::int, 1) FROM generate_series(1, str_length)), '')  
       end;  
    else  
        RAISE EXCEPTION 'value % for parameter % is not recognized', letter_case, 'letter_case'  
        Using Hint = 'Use "lower", "upper" or "mixed". The default value is "lower"', ERRCODE ='22023';  
    end if;  
end;  
$body$  
language plpgsql volatile;  
```  
```  
select gen_random_alphabetical_string(10);  
select gen_random_alphabetical_string(letter_case => 'lower');  
```  
14、生成随机字符串 —— Generate a random alphanumeric string  