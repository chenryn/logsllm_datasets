syntax, defining the appearance of , , and  tags:
img {
border-size: 1px;
border-style: solid;
}
span, div {
color: red;
}
Selectors can reference a particular type of a tag (such as img), a
period-prefixed name of a class of tags (for example, .photos, which will apply
to all tags with an inline class=photos parameter), or a combination of both
(img.company_logo). Selector suffixes such as :hover or :visited may also be used
to make the selector match only under certain circumstances, such as when
the mouse hovers over the content or when a particular displayed hyperlink
has already been visited before.
So-called complex selectors2 are an interesting feature introduced in CSS2
and extended in CSS3. They allow any given ruleset to apply only to tags with
particular strings appearing in parameter values or that are positioned in a par-
ticular relation to other markup. One example of such a selector is this:
a[href^="ftp:"] {
/* Styling applicable only to FTP links. */
}
88 Chapter 5
NOTE Oh, while we are at it: As evident in this example, C-style /*...*/ comment blocks are
permitted in CSS syntax anywhere outside a quoted string. On the flip side, //-style
comments are not recognized at all.
Property Definitions
Inside the { … } block that follows a selector, as well as inside the style param-
eter attached to a specific tag, any number of name: value rules can be used to
redefine almost every aspect of how the affected markup is displayed. Visibil-
ity, shape, color, screen position, rendering order, local or remote typeface,
and even any additional text (content property supported on certain pseudo-
classes) and mouse cursor shape are all up for grabs.* Simple types of auto-
mation, such as counters for numbered lists, are available through CSS rules
as well.
Property values can be formatted as the following:
 Raw text This method is used chiefly to specify numerical values (with
optional units), RGB vectors and named colors, and other predefined
keywords (“absolute,” “left,” “center,” etc.).
 Quoted strings Single or double quotes should be placed around
anynonkeyword values, but there is little consistency in how this rule is
enforced. For example, quoting is not required around typeface names
or certain uses of URLs, but it is necessary for the aforementioned content
property.
 Functional notation Two parameter-related pseudo-functions are
mentioned in the original CSS specification: rgb(...), for converting indi-
vidual RGB color values into a single color code, and url(...), required for
URLs in most but not all contexts. On top of this, several more pseudo-
functions have been rolled out in recent years, including scale(...),
rotate(...), or skew(...).
A proprietary expression(...) function is also available in Internet
Explorer; it permits JavaScript statements to be inserted within CSS. This
function is one of the most important reasons why attacker-controlled
stylesheets can be a grave security risk.
@ Directives and XBL Bindings
In addition to selectors and properties, several @-prefixed directives are rec-
ognized in stand-alone stylesheets. All of them modify the meaning of the
stylesheet; for example, by specifying the namespace or the display media that
the stylesheet should be applied to. But two special directives also affect the
behavior of the parsing process. The first of these is @charset, which sets the
charset of the current CSS block; the other is @import, which inserts an exter-
nal file into the stylesheet.
* The ability to redefine mouse cursors using an arbitrary bitmap has predictably resulted in
some security bugs. An oversized cursor combined with script-based mouse position tracking
could be used to obscure or replace important elements of the browser UI and trick the user
into doing something dangerous.
Cascading Style Sheets 89
The @import directive itself serves as a good example of the idiosyncrasies
of CSS parsing; the parser views all of the following examples as equivalent:
@import "foo.css";
@import url('foo.css');
@import'foo.css';
In Firefox, external content directives, including JavaScript code, may be
also loaded from an external source using the -moz-binding property, a vendor-
specific way to weave XML Binding Language3 files (an obscure method of
providing automation to XML content) into the document. There is some talk
of supporting XBL in other browsers, too, at which point the name of the prop-
erty would change and the XSS risk may or may not be addressed in some way.
NOTE As can be expected, the handling of pseudo-URLs in @import, url(...) and other CSS-
based content inclusion schemes is a potential security risk. While most current browsers
do not accept scripting-related schemes in these contexts, Internet Explorer 6 allows them
without reservations, thereby creating a code injection vector if the URL is not vali-
dated carefully enough.
Interactions with HTML
It follows from the discussion in the previous chapter that for any stylesheets
inlined in HTML documents, HTML parsing is performed first and is com-
pletely independent of CSS syntax rules. Therefore, it is unsafe to place certain
HTML syntax characters inside CSS properties, as in the following example,
even when quoted properly. A common mistake is permitting this:
Gotcha!');
}
We’ll discuss a way to encode problematic characters in stylesheets shortly,
but first, let’s have a quick look at another very distinctive property of CSS.
Parser Resynchronization Risks
An undoubtedly HTML-inspired behavior that sets CSS apart from most
other languages is that compliant parsers are expected to continue after
encountering a syntax error and restart at the next matching curly bracket
(some superficial nesting-level tracking is mandated by the spec). In particu-
lar, the following stylesheet snippet, despite being obviously malformed, will
still apply the specified border style to all  tags:
a {
$$$ This syntax makes absolutely no sense $$$
!(@*#)!!@ 123
}
90 Chapter 5
img {
border: 1px solid red;
}
This unusual behavior creates an opportunity to exploit parser incom-
patibilities in an interesting way: If there is any way to derail a particular CSS
implementation with inputs that seem valid to other parsers, the resynchro-
nization logic may cause the attacked browser to resume parsing at an incor-
rect location, such as in the middle of an attacker-supplied string.
A naïve illustration of this issue may be Internet Explorer’s support for
multiline string literals. In this browser, it is seemingly safe not to scrub CR
and LF characters in user-supplied CSS strings, so some webmasters may
allow it. Unfortunately, the same pattern will cause any other browser to
resume at an unexpected offset and interpret the evil_rule ruleset:
some_benign_selector {
content: 'Attacker-controlled text...
} evil_rule { margin-left: -1000px; }';
}
The support for multiline strings is a Microsoft-specific extension, and
the aforementioned problem is easily fixed by avoiding such noncompliant
syntax to begin with. Unfortunately, other desynchronization risks are intro-
duced by the standard itself. For example, recall complex selectors: This
CSS3 syntax makes no sense to pre-CSS3 parsers. In the following example,
an older implementation may bail out after encountering an unexpected
angle bracket and resume parsing from the attacker-supplied evil_rule
instead:
a[href^='} evil_rule { margin-left: -1000px; }'] {
/* Harmless, validated rules here. */
}
The still-popular browser Internet Explorer 6 would be vulnerable to this
trick.
Character Encoding
To make it possible to quote reserved or otherwise problematic characters
inside strings, CSS offers an unorthodox escaping scheme: a backslash (\)
followed by one to six hexadecimal digits. For example, according to this
scheme, the letter e may be encoded as “\65”, “\065”, or “\000065”. Alas, only
the last syntax, “\000065”, will be unambiguous if the next character happens
to be a valid hexadecimal digit; encoding “teak” as “t\65ak” would not work
as expected, because the escape sequence would be interpreted as “\65A”, an
Arabic sign in the Unicode character map.
Cascading Style Sheets 91
To avoid this problem, the specification embraces an awkward compro-
mise: A whitespace can follow an escape sequence and will be interpreted as
a terminator, and then removed from the string (e.g., “t\65 ak”). Regrettably,
more familiar and predictable fixed-length C-style escape sequences such as
\x65 cannot be used instead.
In addition to the numerical escaping scheme, it is also possible to place
a backslash in front of a character that is not a valid hexadecimal digit. In this
case, the subsequent character will be treated as a literal. This mechanism is
useful for encoding quote characters and the backslash itself, but it should
not be used to escape HTML control characters such as angle brackets. The
aforementioned precedence of HTML parsing over CSS parsing renders this
approach inadequate.
In a bizarre twist, due to somewhat ambiguous guidance in the W3C drafts,
many CSS parsers recognize arbitrary escape sequences in locations other than
quote-enclosed strings. To add insult to injury, in Internet Explorer, the sub-
stitution of these sequences apparently takes place before the pseudo-function
syntax is parsed, effectively making the following two examples equivalent:
color: expression(alert(1))
color: expression\028 alert \028 1 \029 \029
Even more confusingly, in a misguided bid to maintain fault tolerance,
Microsoft’s implementation does not recognize backslash escape codes inside
url(...) values; this is, once more, to avoid hurting the feelings of users who
type the wrong type of a slash when specifying a URL.
These and similar quirks make the detection of known dangerous CSS
syntax extremely error prone.
92 Chapter 5
Security Engineering Cheat Sheet
When Loading Remote Stylesheets
 You are linking the security of your site to the originating domain of the stylesheet. Even
in browsers that do not support JavaScript expressions inside stylesheets, features such as
conditional selectors and url(...) references can be used to exfiltrate portions of your site.4
 When in doubt, make a local copy of the data instead.
 On HTTPS sites, require stylesheets to be served over HTTPS as well.
When Putting Attacker-Controlled Values into CSS
 Strings and URLs inside stand-alone blocks. Always use quotes. Backslash-escape all con-
trol characters (0x00–0x1F), “\”, “”, “{“, “}”, and quotes using numerical codes. It is
also preferable to escape high-bit characters. For URLs, consult the cheat sheet in Chap-
ter 2 to avoid code injection vulnerabilities.
 Strings in style parameters. Multiple levels of escaping are involved. The process is error
prone, so do not attempt it unless absolutely necessary. If it is unavoidable, apply the above
CSS escaping rules first and then apply HTML parameter encoding to the resulting string.
 Nonstring attributes. Allow only whitelisted alphanumeric keywords and carefully vali-
dated numerical values. Do not attempt to reject known bad patterns instead.
When Filtering User-Supplied CSS
 Remove all content outside of functional rulesets. Do not preserve or generate user-
controlled comment blocks, @-directives, and so on.
 Carefully validate selector syntax, permitting only alphanumerics; underscores; white-
spaces; and correctly positioned colons, periods, and commas before “{”. Do not permit
complex text-matching selectors; they are unsafe.
 Parse and validate every rule in the { … } block. Permit only whitelisted properties with
well-understood consequences and confirm that they take expected, known safe values.
Note that strings passed to certain properties may sometimes be interpreted as URLs even
in the absence of a url(...) wrapper.
 Encode every parameter value using the rules outlined earlier in this section. Bail out on
any syntax abnormalities.
 Keep in mind that unless specifically prevented from doing so, CSS may position user
content outside the intended drawing area or redefine the appearance of any part of the
UI of your application. The safest way to avoid this problem is to display the untrusted
content inside a separate frame.
When Allowing User-Specified Class Values on HTML Markup
 Ensure that user-supplied content can’t reuse class names that are used for any part of the
application UI. If a separate frame is not being used, it’s advisable to maintain separate
namespace prefixes.
Cascading Style Sheets 93
B R O W S E R - S I D E S C R I P T S
The first browser scripting engine debuted in Netscape
Navigator around 1995, thanks to the work of Brendan
Eich. The integrated Mocha language, as it was origi-
nally called, gave web developers the ability to manip-
ulate HTML documents, display simple, system-level
dialogs, open and reposition browser windows, and use
other basic types of client-side automation in a hassle-
free way.
While iterating through beta releases, Netscape eventually renamed
Mocha LiveScript, and after an awkward branding deal was struck with Sun
Microsystems, JavaScript was chosen as the final name. The similarities
between Brendan’s Mocha and Sun’s Java were few, but the Netscape Cor-
poration bet that this odd marketing-driven marriage would secure JavaScript’s
dominance in the more lucrative server world. It made this sentiment clear
in a famously confusing 1995 press release that introduced the language to
the world and immediately tried to tie it to an impressive range of random
commercial products:1
Netscape and Sun Announce JavaScript, the Open, Cross-
Platform Object Scripting Language for Enterprise Networks
and the Internet
[ . . . ]
Netscape Navigator Gold 2.0 enables developers to create and edit
JavaScript scripts, while Netscape LiveWire enables JavaScript pro-
grams to be installed, run and managed on Netscape servers, both
within the enterprise and across the Internet. Netscape LiveWire
Pro adds support for JavaScript connectivity to high-performance
relational databases from Illustra, Informix, Microsoft, Oracle and
Sybase. Java and JavaScript support are being built into all Netscape
products to provide a unified, front-to-back, client/server/tool
environment for building and deploying live online applications.
Despite Netscape’s misplaced affection for Java, the value of JavaScript
for client-side programming seemed clear, including to the competition. In
1996 Microsoft responded by shipping a near-verbatim copy of JavaScript in
Internet Explorer 3.0 along with a counterproposal of its own: a Visual Basic–
derived language dubbed VBScript. Perhaps because it was late to the party,
and perhaps because of VBScript’s clunkier syntax, Microsoft’s alternative
failed to gain prominence or even any cross-browser support. In the end,
JavaScript secured its position in the market, and in part due to Microsoft’s
failure, no new scripting languages have been attempted in mainstream
browsers since.
Encouraged by the popularity of the JavaScript language, Netscape
handed over some of the responsibility for maintaining it to an independent
body, the European Computer Manufacturers Association (ECMA). The new
overseers successfully released ECMAScript, 3rd edition in 19992 but had
substantially more difficulty moving forward from there. The 4th edition, an
ambitious overhaul of the language, was eventually abandoned after several
years of bickering between the vendors, and a scaled-down 5th edition,3 pub-
lished in 2009, still enjoys only limited (albeit steadily improving) browser
support. The work on a new iteration, called “Harmony,” begun in 2008, still
has not been finalized. Absent an evolving and widely embraced standard,
vendor-specific extensions of the language are common, but they usually
cause only pain.
Basic Characteristics of JavaScript
JavaScript is a fairly simple language meant to be interpreted at runtime. It has
vaguely C-influenced syntax (save for pointer arithmetic); a straightforward
classless object model, said to be inspired by a little-known programming lan-
guage named Self; automatic garbage collection; and weak, dynamic typing.
JavaScript as such has no built-in I/O mechanisms. In the browser, lim-
ited abilities to interact with the host environment are offered through a set
96 Chapter 6
of predefined methods and properties that map to native code inside the
browser, but unlike what can be seen in many other programming languages,
these interfaces are fairly limited and purpose built.
Most of the core features of JavaScript are fairly unremarkable and
should be familiar to developers already experience with C, C++, or, to a
lesser extent, Java. A simple JavaScript program might look like this:
var text = "Hi mom!";
function display_string(str) {
alert(str);
return 0;
}
// This will display "Hi mom!".
display_str(text);
Because it is beyond the scope of this book to provide a more detailed
overview of the semantics of JavaScript, we’ll summarize only some of its more
unique and security-relevant properties later in this chapter. For readers look-
ing for a more systematic introduction to the language, Marijn Haverbeke’s
Eloquent JavaScript (No Starch Press, 2011) is a good choice.
Script Processing Model
Every HTML document displayed in a browser—be it in a separate window
or in a frame—is given a separate instance of the JavaScript execution envi-
ronment, complete with an individual namespace for all global variables and