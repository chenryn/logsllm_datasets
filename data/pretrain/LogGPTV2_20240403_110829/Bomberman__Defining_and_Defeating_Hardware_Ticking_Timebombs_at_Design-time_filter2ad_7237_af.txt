### Crafting Test Vectors with High SSC Coverage

Crafting test vectors that effectively target specific Sequential State Cells (SSCs) is equivalent to achieving high SSC coverage. Bomberman provides verification engineers with two key sources of information to facilitate this process:

1. **Circuit DFG**: The Data Flow Graph (DFG) (Fig. 11 in Appendix C) illustrates the control path that exercises a specific SSC.
2. **SSC Classification Output**: This output indicates whether suspicious SSCs have or have not been exercised.

By leveraging these insights, Bomberman guides verification engineers in creating test vectors that achieve high coverage, adhering to Bomberman's invariants (Properties 1 and 2 in §IV-A). This minimizes false positives. For example, when analyzing the OR1200 processor in §VI-B, we observed that designer-provided test vectors [49] did not exercise several Control and Status Registers (CSRs). By referencing Bomberman’s output, we identified the (non-)suspicious SSCs and crafted test vectors to exercise them.

### Latches

For Bomberman to locate Triggered Trojan Triggers (TTTs) in a hardware design, it first identifies all SSCs by recognizing signals in the design’s Hardware Description Language (HDL) that are inferred as flip-flops during synthesis (§V-A). However, flip-flops are not the only components that can store state; latches can also be used. Including latches in sequential hardware designs is generally considered bad practice because they can induce unwanted timing errors. HDL compilers in synthesis Computer-Aided Design (CAD) tools issue warnings when they infer latches, highlighting potential TTTs. To support such practices, Bomberman’s data-flow graph generation compiler back-end is designed to recognize latches as well.

### TTT Identification in Physical Layouts

Bomberman is designed to integrate into existing front-end verification tool-chains for processing hardware designs (Fig. 2). Under a different threat model, where untrusted back-end designers are involved, it may be necessary to analyze physical layouts for TTTs. Bomberman can analyze physical layouts if the layout (GDSII) file is first reverse-engineered into a gate-level netlist. Several reverse-engineering tools, as noted by Yang et al. [28], can perform this task. Bomberman also requires HDL device models for all devices in the netlist (e.g., NAND gates), which provide information about a device’s input and output signals, essential for creating a DFG. These models are typically included in the process technology IP portfolio purchased by front-end designers.

### Memories

Bomberman handles memories, or large arrays of SSCs, in the same way it handles flip-flop-based SSCs. It creates a DFG of the addressable words within a memory block to manage state explosion when locating distributed SSCs. For memories that require word-aligned accesses, Bomberman generates a coalesced SSC for every word. For memories that allow unaligned accesses, which are less common, Bomberman generates a coalesced SSC for every word and multiple word-sized distributed SSCs by sliding a word-sized window across every adjacent memory word pair. In both cases, Bomberman’s DFG filtering mechanism significantly reduces the set of potentially suspicious SSCs.

### Limitations

Bomberman can detect all TTTs with zero false negatives, within the constraints of our definition (§IV-A). However, these constraints impose certain limitations. First, if an attacker knows Bomberman is in use, they might alter their Trojan to repeat a value to avoid detection. They could do this by adding an extra state bit to the SSC(s) that does not repeat a value or by adding additional logic that resets the SSC(s) upon recognizing specific circuit behavior. The first scenario would be detected by Bomberman, as it describes a distributed SSC. The second scenario, however, describes a data-based (cheat code) Trojan [13], which Bomberman cannot detect. Data-based Trojans are better addressed by techniques targeting rarely used activation signals [9], [10] or comparator inputs [8] (Tab. I).

Second, Bomberman cannot detect TTTs that use analog SSCs, like the A2 Trojan [28], as there is no concept of analog SSCs in front-end designs. Detecting such Trojans requires knowledge of the physical layout and is best addressed during circuit layout [54].

### Related Work

The implantation, detection, and prevention of hardware Trojans across various design phases have been extensively studied. Attacks range from design-time attacks [7], [22], [27], [55] to layout-level modifications at fabrication time [28]–[30]. On the defensive side, most work focuses on post-fabrication Trojan detection [37]–[43], [54], [56], [57], given that many hardware design houses outsource their designs for fabrication. As hardware complexity increases, reliance on third-party IP [3] raises concerns about the trustworthiness of the design process. Thus, there is ongoing work in both detecting [8]–[10], [35], [36] and preventing [11], [13] design-time Trojans.

### Conclusion

Bomberman is an effective, threat-specific defense against TTTs. Unlike previous work, it does not aim to be a panacea for all design-time Trojans. Instead, it defines the behavioral characteristics of TTTs and develops a complete defense capable of identifying all TTT variants as defined. Across four open-source hardware designs, Bomberman detects all six TTT variants with less than 1.2% false positives.

Bomberman demonstrates the power of threat-specific verification and aims to inspire future threat-specific defenses against hardware Trojans and common hardware bugs. By combining Bomberman with existing design-time Trojan defenses [8]–[10], [13], and future threat-specific defenses, we aim to create a robust barrier against design-time attackers.

### Acknowledgments

We thank the anonymous reviewers and our shepherd, Stefan Katzenbeisser, for their thoughtful feedback that enhanced the quality of this paper.

### Distribution Statement

This material is based upon work supported by the Under Secretary of Defense for Research and Engineering under Air Force Contract No. FA8702-15-D-0001. Additionally, the work reported in this paper was supported in part by the US National Science Foundation under Grant CNS-1646130 and Graduate Research Fellowship Program under Grant DGE 1256260, as well as the US Army Research Office under Grant W911NF-21-1-0057. Any opinions, findings, conclusions, or recommendations expressed in this paper are those of the authors and do not necessarily reflect the views of the funding agencies.

### References

[References remain unchanged as they are already formatted correctly.]