          tabname=>'leo1',                             表名  
          cascade=>true,                               级联操作  
          estimate_percent=>null,                       全表采样  
          method_opt=>'for all columns size 1');   不作直方图分析，减小代价计算的影响  
end;  
/  
  2    3    4    5    6    7    8    9    
PL/SQL procedure successfully completed.  
LEO1@LEO1> show parameter db_file_multiblock_read_count        
NAME                                 TYPE        VALUE  
------------------------------------ ----------- ------------------------------  
db_file_multiblock_read_count           integer     79  
LEO1@LEO1> alter session set db_file_multiblock_read_count=16;    把多块读参数修改成16方便计算  
Session altered.  
LEO1@LEO1> show parameter db_file_multiblock_read_count  
NAME                                 TYPE        VALUE  
------------------------------------ ----------- ------------------------------  
db_file_multiblock_read_count           integer     16  
LEO1@LEO1> select * from sys.aux_stats$;         没有收集操作系统统计信息  
SNAME                PNAME                     PVAL1 PVAL2  
-------------------- -------------------- ---------- ------------------------------  
SYSSTATS_INFO        STATUS                          COMPLETED  
SYSSTATS_INFO        DSTART                          08-15-2009 00:49  
SYSSTATS_INFO        DSTOP                           08-15-2009 00:49  
SYSSTATS_INFO        FLAGS                         1  
SYSSTATS_MAIN        CPUSPEEDNW            2657.0122  
SYSSTATS_MAIN        IOSEEKTIM                    10  
SYSSTATS_MAIN        IOTFRSPEED                 4096  
SYSSTATS_MAIN        SREADTIM  
SYSSTATS_MAIN        MREADTIM  
SYSSTATS_MAIN        CPUSPEED  
SYSSTATS_MAIN        MBRC  
SYSSTATS_MAIN        MAXTHR  
SYSSTATS_MAIN        SLAVETHR  
我们没有收集操作系统统计信息，所以CBO采用了非工作量统计模式(noworkload)来计算代价  
LEO1@LEO1> select blocks from user_tables where table_name='LEO1';   LEO1表总数据块为1051  
    BLOCKS  
------------------  
      1051  
LEO1@LEO1> set autotrace trace explain  
LEO1@LEO1> select * from leo1;  
Execution Plan  
----------------------------------------------------------  
Plan hash value: 2716644435  
--------------------------------------------------------------------------  
| Id  | Operation         | Name | Rows  | Bytes | Cost (%CPU)| Time     |  
--------------------------------------------------------------------------  
|   0 | SELECT STATEMENT  |      | 71968 |  6817K|   233   (1)| 00:00:03 |  
|   1 |  TABLE ACCESS FULL| LEO1  | 71968 |  6817K|   233   (1)| 00:00:03 |  
--------------------------------------------------------------------------  
全表扫描的成本等于233，其中CPU代价占整个权重百分比的1%  
###################################################################################  
成本的计算公式如下：  
Cost = (  
       #SRds * sreadtim +  
       #MRds * mreadtim +  
       CPUCycles / cpuspeed  
       ) / sreadtime  
#SRds - number of single block reads    单块读的次数  
#MRds - number of multi block reads    多块读的次数  
#CPUCyles - number of CPU cycles      一个CPU周期  
sreadtim - single block read time       读取单个数据块的平均时间  
mreadtim - multi block read time      读取多个数据块的平均时间  
cpuspeed - CPU cycles per second     CPU周期/秒  
注意：如果oracle收集了操作系统统计信息，那么CBO采用工作量统计模式计算代价  
      如果oracle没有收集操作系统统计信息，那么CBO采用非工作量统计模式计算代价我们现在处于“非工作量统计模式”  
#SRds=0,因为是全表扫描，单块读为0，全都使用的是多块读  
#MRds=表的块数/多块读参数=1051/16=65.6875  
mreadtim=ioseektim+db_file_multiblock_count*db_block_size/iotftspeed=10+16*8192/4096=42  
sreadtim=ioseektim+db_block_size/iotfrspeed=10+8192/4096=12  
CPUCycles 等于 PLAN_TABLE里面的CPU_COST  
LEO1@LEO1> explain plan for select * from leo1;  
Explained.  
LEO1@LEO1> select cpu_cost from plan_table;  
  CPU_COST  
-----------------  
  38430873  
cpuspeed 等于 CPUSPEEDNW= 2657.0122  
COST=65.6875*42/12+38430873/2657.0122/12/1000(毫秒换算成秒)=229.90625+1.20532=231.11157  
229.90625 是IO代价  
1.20532   是CPU代价  
手工计算出来的COST用四舍五入等于232，和我们看到的233有差别，这是由于隐含参数_table_scan_cost_plus_one参数造成的  
LEO1@LEO1> conn / as sysdba        切换到sys用户才能查看隐含参数  
SYS@LEO1> SELECT x.ksppinm NAME, y.ksppstvl VALUE, x.ksppdesc describ FROM x$ksppi x,x$ksppcv y  
  WHERE x.inst_id = USERENV ('Instance')  
   AND y.inst_id = USERENV ('Instance')  
   AND x.indx = y.indx  
   AND x.ksppinm LIKE '%_table_scan_cost_plus_one%';  2    3    4    5    
NAME                     VALUE        DESCRIB  
----------------------------------------------------------------------------------------------------------------------------------------------  
_table_scan_cost_plus_one    TRUE         bump estimated full table scan and index ffs cost by one  
根据该参数的描述，在table full scan和index fast full scan的时候会将cost+1 即 232+1=233  
我们把_table_scan_cost_plus_one参数禁用看看cost变化  
SYS@LEO1> alter session set "_table_scan_cost_plus_one"=false;    禁用  
Session altered.  
SYS@LEO1> SELECT x.ksppinm NAME, y.ksppstvl VALUE, x.ksppdesc describ FROM x$ksppi x,x$ksppcv y  
  WHERE x.inst_id = USERENV ('Instance')  
   AND y.inst_id = USERENV ('Instance')  
   AND x.indx = y.indx  
   AND x.ksppinm LIKE '%_table_scan_cost_plus_one%';  2    3    4    5    生效  
NAME                     VALUE        DESCRIB  
----------------------------------------------------------------------------------------------------------------------------------------------  
_table_scan_cost_plus_one    FALSE        bump estimated full table scan and index ffs cost by one  
SYS@LEO1> select * from leo1.leo1;  
Execution Plan  
----------------------------------------------------------  
Plan hash value: 2716644435  
--------------------------------------------------------------------------  
| Id  | Operation         | Name | Rows  | Bytes | Cost (%CPU)| Time     |  
--------------------------------------------------------------------------  
|   0 | SELECT STATEMENT  |      | 71968 |  6817K|   232   (1)| 00:00:03 |  
|   1 |  TABLE ACCESS FULL| LEO1  | 71968 |  6817K|   232   (1)| 00:00:03 |  
--------------------------------------------------------------------------  
这次得到的COST等于232，与计算值正好匹配，这是禁用隐含参数的结果  
SYS@LEO1> alter session set db_file_multiblock_read_count=32;   我们修改一下多块读参数  
Session altered.  
SYS@LEO1> select * from leo1.leo1;  
Execution Plan  
----------------------------------------------------------  
Plan hash value: 2716644435  
--------------------------------------------------------------------------  
| Id  | Operation         | Name | Rows  | Bytes | Cost (%CPU)| Time     |  
--------------------------------------------------------------------------  
|   0 | SELECT STATEMENT  |      | 71968 |  6817K|   204   (1)| 00:00:03 |  
|   1 |  TABLE ACCESS FULL| LEO1  | 71968 |  6817K|   204   (1)| 00:00:03 |  
--------------------------------------------------------------------------  
#SRds=0,因为是全表扫描，单块读为0，全都使用的是多块读  
#MRds=表的块数/多块读参数=1051/32=32.84375  
mreadtim=ioseektim+db_file_multiblock_count*db_block_size/iotftspeed=10+32*8192/4096=74  
sreadtim=ioseektim+db_block_size/iotfrspeed=10+8192/4096=12  
CPUCycles=38430873  
cpuspeed 等于 CPUSPEEDNW= 2657.0122  
COST=32.84375*74/12+38430873/2657.0122/12/1000(毫秒换算成秒)= 202.53645+1.20532=203.74177  
四舍五入等于204，与执行计划中COST=204相一致  
小结：从实验中可以得出，oracle 11gR2中，全表扫描非工作量统计模式下COST计算公式依然和9i/10g一样，没有变化。同时我们也看到了IO成本占整个代价权重的极大部分，是影响SQL效率的主要因素，需要我们多关注。  
2.给出B-tree索引 Unique scan的成本计算公式，贴出执行计划和计算公式。  
CBO各种类型成本计算公式如下：  
全表扫描  
Full table scan cost= HWM/dbf_mbrc   
索引唯一扫描  
Unique scan cost = blevel +1  
索引快速全扫描  
Fast Full Scan cost=leaf_blocks/adj_mbrc  
只访问索引，不访问原表扫描  
Index-only cost = Blevel + effective index selectivity * leaf_blocks  
索引范围扫描  
Range Cost = Blevel + effectivity index selectivity* leaf_blocks   
                           + effective table selectivity * clustering_factor  
嵌套循环关联  
nested loop join cost =outer access cost + (inner access cost * outer cardinality)  
排序合并关联  
sort merge join cost = outer access cost + inner access cost + sort costs  
哈希关联  
hash join cost = (outer access cost * # of hash partitions) + inner access cost  
实验  
LEO1@LEO1> drop table leo2 purge;                       清理环境  
Table dropped.  
LEO1@LEO1> create table leo2 as select * from dba_objects;   创建leo2表  
Table created.  
LEO1@LEO1> create index idx_leo2 on leo2(object_id);        创建idx_leo2  
Index created.  
LEO1@LEO1> begin  
     dbms_stats.gather_table_stats(                      收集表的统计信息  
          wnname=>'leo1',                            用户名  
          tabname=>'leo2',                             表名  
          cascade=>true,                               级联操作  
          estimate_percent=>null,                       全表采样  
          method_opt=>'for all columns size 1');   不作直方图分析，减小代价计算的影响  
end;  
/  
  2    3    4    5    6    7    8    9    
PL/SQL procedure successfully completed.  
必须要做分析，如果表没有分析，下面统计信息就没有了  
LEO1@LEO1> select index_name,blevel,leaf_blocks,clustering_factor,num_rows,distinct_keys from dba_indexes where index_name='IDX_LEO2';  
INDEX_NAME   BLEVEL LEAF_BLOCKS CLUSTERING_FACTOR   NUM_ROWS DISTINCT_KEYS  
------------------------------ ---------- ----------- ----------------- ---------- ----------------------- -----------------  
IDX_LEO2      1      159         1076                71968     71968  
BLEVEL：索引层数  1表示就1层  
LEAF_BLOCKS：索引树的叶子块数  159  
CLUSTERING_FACTOR：索引聚簇因子  
NUM_ROWS：有索引的行数    71968和数据行数相匹配  
DISTINCT_KEYS：不同的索引键值  71968  
LEO1@LEO1> select count(*) from leo2;  
  COUNT(*)  
-----------------  
     71968  
LEO1@LEO1> select * from leo2 where object_id=10000;  
Execution Plan  
----------------------------------------------------------  
Plan hash value: 2495991774  
----------------------------------------------------------------------------------------  
| Id  | Operation                   | Name     | Rows  | Bytes | Cost (%CPU)| Time     |  
----------------------------------------------------------------------------------------  
|   0 | SELECT STATEMENT            |          |     1 |    97 |     2   (0)| 00:00:01 |  
|   1 |  TABLE ACCESS BY INDEX ROWID | LEO2     |     1 |    97 |     2   (0)| 00:00:01 |  
|*  2 |   INDEX UNIQUE SCAN         | IDX_LEO2 |     1 |       |     1   (0)| 00:00:01 |  
----------------------------------------------------------------------------------------  
COST=2，其中CPU代价=0，等值查询与索引的条数无关，消耗CPU资源可以忽略不计  
Predicate Information (identified by operation id):  
---------------------------------------------------  