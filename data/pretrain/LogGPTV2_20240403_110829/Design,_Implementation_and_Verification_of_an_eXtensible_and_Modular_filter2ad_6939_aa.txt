# Title: Design, Implementation, and Verification of an eXtensible and Modular Hypervisor Framework

## Authors:
- Amit Vasudevan
- Sagar Chaki
- Limin Jia
- Jonathan M. McCune
- James Newsome
- Anupam Datta

### Affiliations:
- *Carnegie Mellon University (CyLab)
- †Carnegie Mellon University (SEI)
- ‡Google Inc.
- §Independent Consultant

## Abstract
We present the design, implementation, and verification of XMHF, an eXtensible and Modular Hypervisor Framework. XMHF is designed to achieve three primary goals: modular extensibility, automated verification, and high performance. The framework includes a core that provides common functionality for hypervisor-based security architectures and supports extensions that augment this core with additional security or functional properties while preserving the fundamental hypervisor security property of memory integrity. We verify the memory integrity of the XMHF core, which consists of 6018 lines of code, using a combination of automated and manual techniques. The model checker CBMC automatically verifies 5208 lines of C code in about 80 seconds using less than 2GB of RAM. We manually audit the remaining 422 lines of C code and 388 lines of assembly language code, which are stable and unlikely to change during further development. Our experiments indicate that XMHF's performance is comparable to popular high-performance general-purpose hypervisors for the single guest it supports.

**Keywords:** Hypervisor Framework, Memory Integrity, Verification, Hypervisor Applications ("Hypapps")

## I. Introduction
Hypervisor-based architectures have been extensively explored in recent years to improve system security [1]–[16]. These systems provide various security and functional properties, such as secrecy of security-sensitive application code and data [7], trusted user and application interfaces [2, 4, 13], application integrity and privacy [3, 5, 10, 11, 17], debugging support [8], malware analysis, detection, and runtime monitoring [6, 9, 14–16], and trustworthy resource accounting [1]. Many of these solutions are designed from scratch to achieve a low Trusted Computing Base (TCB) while providing specific security and functionality within an operating system or another hypervisor [2–10]. Other approaches leverage existing general-purpose virtualization solutions (e.g., Xen, VMware, Linux KVM) for convenience but do not necessarily require such functionality [1, 11, 13–17].

XMHF is an open-source eXtensible and Modular Hypervisor Framework available at: http://xmhf.org. It serves as a platform for security-oriented hypervisor research and development. Observing that many hypervisor-based security solutions rely on common core functionality given a particular CPU architecture, XMHF provides this core functionality while supporting extensions that can offer custom hypervisor-based solutions ("hypervisor applications" or "hypapps") for specific functional and security properties. The core of XMHF has a small TCB, and all extensions reuse the core, avoiding the need for re-implementation. The XMHF design enables automated verification of relevant security properties and ensures that these properties are preserved as extensions (hypapps) are added, provided they manipulate security-sensitive state using prescribed interfaces. Additionally, XMHF's performance is comparable to popular high-performance general-purpose hypervisors for the single guest it supports.

XMHF supports a single full-featured commodity guest OS ("rich" guest). This design decision is made to achieve our goals of modular extensibility, automated verification, and high performance. XMHF leverages hardware virtualization primitives to allow the guest direct access to all performance-critical system devices and device interrupts, reducing hypervisor complexity and TCB while promising high guest performance. The single-guest model allows XMHF to be designed for sequential execution, making automated verification more tractable.

The focus of our verification efforts is memory integrity, a fundamental hypervisor security property. Memory integrity ensures that hypervisor memory regions can only be modified by intended instructions, preventing malicious modifications that could compromise the isolation of memory pages. Memory integrity is essential for realizing other important security goals, such as data secrecy and availability of the hypervisor and guests.

We call our design methodology DRIVE – "Designing hypervisors for Rigorous Integrity VEriﬁcation." DRIVE consists of a set of hypervisor properties and system invariants. Some properties and invariants are guaranteed by the hardware and system architecture, while others are verified via automated techniques. DRIVE makes explicit which properties and invariants must be verified, assumed, or guaranteed, enabling a synergy between architecture and automated analysis to ensure hypervisor memory integrity.

Several efforts have been made to verify security-relevant properties of hypervisor systems [18–21], but these approaches rely on theorem proving and are less automated. XMHF is architected such that the portions requiring manual re-auditing are small, stable, and unlikely to change during development. We emphasize automated verification of the parts of the XMHF code base subject to change, such as guest event handling and new hypapps. This fulfills the design goal of XMHF to serve as a framework for developers to build specific hypapps without sacrificing memory integrity.

The XMHF implementation currently supports both Intel and AMD x86 hardware virtualized platforms and can run unmodified legacy multiprocessor capable OSes such as Windows and Linux. The XMHF core has a TCB of 6018 SLoC, and its performance is comparable to popular high-performance general-purpose hypervisors. We verify the memory integrity of XMHF following the DRIVE methodology. Most of the DRIVE verification conditions are discharged using the software model checker CBMC [22]. Out of the 6018 lines of code, CBMC automatically verifies 5208 lines in about 80 seconds using less than 2GB of RAM. We manually audit the remaining 422 lines of C code and 388 lines of assembly language code, which we anticipate will remain mostly unchanged during further development. The manual audits include constructs that CBMC cannot verify, such as loops iterating over entire page tables, platform hardware initialization and interaction, and concurrent threads coordinating multiple CPUs.

Our contributions are as follows:
- We present the DRIVE methodology for designing, developing, and verifying hypervisor memory integrity (§III).
- We design and implement XMHF, a hypervisor framework based on DRIVE that supports modular development of future hypapps (§IV).
- We verify the memory integrity of the XMHF runtime implementation using DRIVE and show how to discharge the DRIVE verification conditions on XMHF using the software model checker CBMC [22] (§V).
- We carry out a comprehensive performance evaluation of XMHF (§VI).

## II. Goals, Background, and Attacker Model

### A. Modular Development and Verification
Our overarching goal is to create a hypervisor framework that promotes the development of custom hypapps while allowing the verification of security properties. We focus on verifying memory integrity, a fundamental security property and a major component of tamperproofness. This enables the development of hypapps without worrying about low-level infrastructure or the hypervisor's memory integrity.

We aim for a minimal TCB hypervisor design that enables automatic verification of its implementation. Accordingly, we propose a rich single-guest execution model. XMHF supports only a single guest that directly accesses and manages platform devices after initialization. XMHF consists of a core and small supporting libraries, which are extended and leveraged by each hypapp to implement its functionality. Our specific design goals are:
1. **Modular Core and Modular Extensibility**: The XMHF core is built in a modular way, handling a set of events from the guest (e.g., hypercall, nested page-faults) using distinct event handlers. Each event is handled sequentially, either directly by the XMHF core or handed over to a hypapp handler, which performs the desired functionality by leveraging a set of APIs exposed by XMHF. This modular extensibility allows a hypapp to extend XMHF to offer custom features and desired properties.
2. **Verifiability**: The rich single-guest model results in reduced hypervisor complexity and TCB. XMHF's modular core design allows independent automated analysis of the event handlers, which constitute the runtime attack surface. It enables a software model checker to ignore irrelevant code (e.g., via slicing) when verifying a particular property.
3. **Performance**: The rich single-guest model promises high guest performance as all performance-critical system devices and device interrupts are directly handled by the guest without XMHF's intervention.

### B. Hardware Virtualization Primitives
We focus on the following hardware virtualization primitives offered by the system platform, supported by current x86 platforms [23, 24], and also making their way into embedded ARM architectures [25]:
- The CPU executes in two modes, each with a separate address space: (a) host-mode (privileged mode) where the hypervisor executes, and (b) guest-mode (unprivileged mode) where the guests execute.
- At system boot time, the hypervisor can execute a designated piece of code in complete isolation.
- At system runtime, the hardware provides mechanisms to ensure that all accesses to system memory are subjected to an access control mechanism.
- The execution state of the guest is maintained in a data structure that is inaccessible and/or access-controlled from unprivileged mode.
- The hypervisor can associate intercept handlers with certain events caused by a guest (e.g., instructions, I/O operations, exceptions, and interrupts). The hardware ensures that upon the occurrence of an event, the following sequence of actions occurs: (1) the execution state of the guest is saved, (2) execution is switched to host mode, (3) the intercept handler for the event is executed, (4) execution is switched back to guest mode, and (5) the execution state of the guest is restored, and guest execution is resumed.

### C. Attacker Model
We consider attackers who do not have physical access to the CPU, memory, and chipset (our hardware TCB). Other system devices and the guest constitute the attacker. This is a reasonable model since most attacks today are mounted by malicious software or system devices. An attacker can attempt to access memory during hypervisor initialization, from within the guest and using system devices, or via hypervisor intercept handlers triggered by the guest.

### D. System Assumptions
We assume that our hardware TCB provides correct functionality and that the hypervisor has control flow integrity (CFI), i.e., the control flow during the execution of the hypervisor respects its source code. Ensuring CFI for systems software is an orthogonal challenge to verifying memory integrity. As future work, we plan to reinforce XMHF with CFI and verify its correctness. We also assume that a hypapp built on top of XMHF uses the prescribed XMHF core APIs (e.g., changing guest memory protections and performing chipset I/O) and does not write to arbitrary code and data. These assumptions are required to ensure the memory integrity property of XMHF. We plan to explore modular verification of the XMHF core composed with hypapps as future work.

We model the virtualized system as a tuple \( V = (H, G, D, M) \), where \( H \) is the hypervisor, \( G \) represents the guest, \( D \) represents devices, and \( M \) is the hypervisor memory containing both hypervisor code and data. Both \( G \) and \( D \) are attacker-controlled. We omit the guest memory, which is separate from \( M \) and irrelevant to memory integrity, from the model. DRIVE consists of a set of properties about \( H \), system invariants, and a proof that if \( H \) satisfies those properties, then the invariants hold on all executions of \( V \). This, in turn, implies the memory integrity of \( H \) in \( V \).

### A. Hypervisor Properties Required by DRIVE
DRIVE identifies the following six properties that restrict the hypervisor design and implementation, response to the attacker's actions, and writes to memory:
- **Modularity (MOD)**: Upon hypervisor initialization, control is transferred to a function `init()`. When an intercept is triggered, the hardware transfers control to one of the intercept handlers `ih1(), ..., ihk()`.
- **Atomicity (ATOM)**: This property ensures the atomicity of initialization and intercept handling on the CPU(s). It consists of two sub-properties: 
  - **ATOMinit**: At the start of \( V \)'s execution, `init()` runs completely in a single-threaded environment before any other code executes.
  - **ATOMih**: The intercept handlers `ih1(), ..., ihk()` always execute in a single-threaded environment.
- **Memory Access Control Protection (MPROT)**: \( H \) uses a memory access control mechanism \( MacM \). All \( MacM \)-related state is stored in \( M \). \( MacM \) consists of two parts: (1) \( MacMG \) for the guest, and (2) \( MacMD \) for the devices.