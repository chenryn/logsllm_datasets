Next, IOFindBSDRoot() queries the I/O Registry as follows.
 It checks whether the /chosen node contains the boot-uuid property. If so, it sets the matching dictionary to that of the boot-uuid-
media property of the IOResources class.
 If the previous step failed, it looks for the rootpath property of /chosen. If the property is found, it sets the look variable to point to the
property's data.
 If the previous step failed, it looks for the boot-file property of /options. If the property is found, it sets the look variable to point to
the property's data.
 If the first character of the user-specified root device, if any, is the asterisk character, it indicates that the root device should not be
network-based. It sets the forceNet variable to false and increments the look pointer by one character. Consequently, it will attempt to
parse the specified root device from the next character onward. Moreover, it will not consider the value it may have retrieved
from /chosen or /options in the previous steps.
 If there is no asterisk character in the user-specified root device, it looks for the /net-boot property in the device tree. If the property is
found, forceNet is set to true.
IOFindBSDRoot() then checks for the property named RAMDisk in the /chosen/memory-map node. If the property is found, its data specifies
the base address and size of a RAM disk. IOFindBSDRoot() calls mdevadd() [bsd/dev/memdev.c] to find a free RAM disk slot and add a
pseudo disk device whose path is of the form /dev/mdx, where x is a single-digit hexadecimal number. Note that if IOFindBSDRoot() is called
multiple times, it builds the RAM disk only oncethe first time it is called. For a RAM disk to be used as the root device, the root device
specification in the boot arguments must contain the BSD name of the RAM disk device to use. IOFindBSDRoot() then checks whether the
contents of rdBootVar are of the form /dev/mdx, and if so, it calls mdevlookup() [bsd/dev/memdev.c] to retrieve the device numbera dev_t
data type that encodes the major and minor numbersfrom the device ID (the x in mdx). If a RAM disk device is found, IOFindBSDRoot() sets
the outgoing flags (oflags) value to 0, indicating that this is not a network root device, and returns success.
If the look pointer is nonzero, that is, if IOFindBSDRoot() had previously found content in either rootpath (/chosen) or boot-file
(/options), IOFindBSDRoot() checks the content to see if it begins with the string "enet". If so, it deems the root as a network device;
otherwise, it defaults to a disk device. However, if forceNet is true, IOFindBSDRoot() also treats the content as a network device.
In the case of a network device, IOFindBSDRoot() calls IONetworkNamePrefixMatching() [iokit/bsddev/IOKitBSDInit.cpp] to retrieve
the matching dictionary for the device. In the case of a disk, it calls IODiskMatching() [iokit/bsddev/IOKitBSDInit.cpp] instead. If this
retrieval fails, it tries a few other alternativessuch as the followingto construct a matching dictionary for the root device.
 If the first two characters of the root specifier are 'e' and 'n', it calls IONetworkNamePrefixMatching()
[iokit/bsddev/IOKitBSDInit.cpp] on the less restrictive prefix "en".
 If the root specifier contains the prefix "cdrom", it calls IOCDMatching() [iokit/bsddev/IOKitBSDInit.cpp]. Note that in the case of a
CD-ROM, IOFindBSDRoot() later attempts to look for an Apple_HFS partition type on the device.
 If the root specifier is the string "uuid", it looks for the boot-uuid boot argument, which must specify the UUID of the boot volume.
 In the absence of a more specific root device, it calls IOBSDNameMatching() [iokit/bsddev/IOKitBSDInit.cpp] to look for a device of
any kind with the specified BSD name.
 If all else fails, it calls IOService::serviceMatching() [iokit/Kernel/IOService.cpp] to match any type of storage media device
with the content type Apple_HFS.
IOFindBSDRoot() then goes into a loop, calling IOService::waitForService() with the matching dictionary it has constructed. It waits for
the matching service to be published with a timeout of ROOTDEVICETIMEOUT (60 seconds). If the service fails to get published, or if this is the
tenth time IOFindBSDRoot() is being called, a failed boot icon is displayed, followed by a "Still waiting for root device" log message.
If an Apple_HFS "child" was explicitly requested, such as in the case of a CD-ROM device, IOFindBSDRoot() waits for child services to finish
registering and calls IOFindMatchingChild() [iokit/bsddev/IOKitBSDInit.cpp] on the parent service to look for a child service whose
Content property is Apple_HFS. Alternatively, if the boot volume was specified via its UUID, IOFindBSDRoot() looks for the boot-uuid-
media property of the service it has found.
IOFindBSDRoot() checks whether the matched service corresponds to a network interfacethat is, whether it is a subclass of
IONetworkInterface. If so, it calls IORegisterNetworkInterface() [iokit/bsddev/IOKitBSDInit.cpp] on the service to name and
register the interface with the BSD portion of the kernel. Specifically, the IONetworkStack service is published, and the network device's unit
number and path are set as properties of this service. In the case of a non-network root device, such device registration is done later and is
triggered from user space.
At this point, if IOFindBSDRoot() has a successfully matched service, it retrieves the BSD name, the BSD major number, and the BSD minor
number from the service. If there is no service, IOFindBSDRoot() falls back to using en0the primary network interfaceas the root device and
sets the oflags (outgoing flags) parameter's lowest bit to 1, indicating a network root device.
As shown in Figure 520, before setconf() returns to bsd_init(), it sets the mountroot function pointer to netboot_mountroot if a network
root device was indicated, and to NULL otherwise. bsd_init() calls vfs_mountroot() [bsd/vfs/vfs_subr.c] to actually mount the root file
system.
// bsd_init() in bsd/kern/bsd_init.c
...
setconf();
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh90B0.htm 20.08.2007
Chapter 5. Kernel and User-Level Startup Page 39 of 59
...
if (0 = (err = vfs_mountroot()))
break;
#if NFSCLIENT
if (mountroot == netboot_mountroot) {
printf("cannot mount network root, errno = %d\n", err);
mountroot = NULL;
if (0 = (err = vfs_mountroot()))
break;
}
#endif
...
vfs_mountroot() first calls the function pointed to by the mountroot function pointer (if the pointer is not NULL) and returns the result.
// vfs_mountroot()
...
if (mountroot != NULL) {
error = (*mountroot)();
return (error);
}
...
vfs_mountroot() creates a vnode for the root file system's block device. It then iterates over the entries in vfsconf [bsd/vfs/vfs_conf.c]the
global list of configured file systems.
// bsd/vfs/vfs_conf.c
...
static struct vfsconf vfsconflist[] = {
// 0: HFS/HFS Plus
{ &hfs_vfsops, ... },
// 1: FFS
{ &ufs_vfsops, ... },
// 2: CD9660
{ &cd9660_vfsops, ... },
...
};
...
struct vfsconf *vfsconf = vfsconflist;
...
vfs_mountroot() looks at each entry of the vfsconflist array and checks whether that vfsconf structure has a valid vfc_mountroot field,
which is a pointer to a function that mounts the root file system for that file system type. Since vfs_mountroot() goes through the list starting
from the beginning, it attempts the HFS/HFS Plus file system first, followed by FFS,[34] and so on. In particular, for the typical case of a local,
HFS Plus root file system, vfs_mountroot() will call hfs_mountroot() [bsd/hfs/hfs_vfsops.c].
[34] Berkeley Fast File System.
// vfs_mountroot() in bsd/vfs/vfs_subr.c
...
for (vfsp = vfsconf; vfsp; vfsp = vfsp->vfc_next) {
if (vfsp->vfc_mountroot == NULL)
continue;
...
if ((error = (*vfsp->vfc_mountroot)(...)) == 0) {
...
return (0);
}
vfs_rootmountfailed(mp);
if (error != EINVAL)
printf("%s_mountroot failed: %d\n", vfsp>vfc_name, error);
}
...
In the case of a network root device, netboot_mountroot() [bsd/kern/netboot.c] is called. It first determines the root devicethe network
interface to useby calling find_interface() [bsd/kern/netboot.c]. Unless the rootdevice global variable contains a valid network
interface name, the list of all network interfaces is searched for the first device that is not a loopback or a point-to-point device. If such a device
is found, netboot_mountroot() brings it up. It then calls get_ip_parameters() [bsd/kern/netboot.c], which looks for the dhcp-response
and bootp-response propertiesin that orderof the /chosen entry in the I/O Registry. If one of these properties has any data,
get_ip_parameters() calls dhcpol_parse_packet() [bsd/netinet/dhcp_options.c] to parse it as a DHCP or BOOTP packet and to
retrieve the corresponding options. If successful, this provides the IP address, netmask, and router's IP address to be used for the boot. If no data
was retrieved from the I/O Registry, netboot_mountroot() calls bootp() [bsd/netinet/in_bootp.c] to retrieve these parameters using
BOOTP. If there is no router, netboot_mountroot() enables proxy ARP.
netboot_mountroot() then calls netboot_info_init() [bsd/kern/netboot.c] to set up root file system information, which must come
from one of the following sources (in the given order):
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh90B0.htm 20.08.2007
Chapter 5. Kernel and User-Level Startup Page 40 of 59
 The rp boot argument
 The rootpath boot argument
 The bsdp-response property of /chosen
 The bootp-response property of /chosen
If none of these sources provides valid information, booting fails.
A root file system for network booting can be a traditional NFS mount, or it can be a remote disk image mounted locally. The latter can use one
of two mechanisms: the BSD vndevice interface (a software disk driver for vnodes) and Apple's Disk Image Controller (also called hdix). Even
when a remote disk image is mounted locally, the image must still be accessed remotely, either using NFS (both vndevice and hdix) or HTTP
(hdix only). The kernel prefers to use hdix, but you can force it to use vndevice by specifying vndevice=1 as a boot argument. The following
are some examples of root file system specifiers for network booting (note that a literal colon character in the specifier must be escaped using a
backslash character):
nfs::[:]
nfs:10.0.0.1:/Library/NetBoot/NetBootSP0:Tiger/Tiger.dmg
nfs:10.0.0.1:/Volumes/SomeVolume\:/Library/NetBoot/NetBootSP0:Tiger/Tiger.dmg
http://
http://10.0.0.1/Images/Tiger/Tiger.dmg
BSD uses an I/O Kit hookdi_root_image() [iokit/bsddev/DINetBootHook.cpp]to use the services of the Apple Disk Image Controller
driver. This hook causes the com.apple.AppleDiskImageController resource to explicitly load by setting its load property to true.
Once the root file system is successfully mounted, there is exactly one entry on the list of mounted file systems. bsd_init() sets the
MNT_ROOTFS bit (defined in bsd/sys/mount.h) of this entry to mark it as the root file system. bsd_init() also calls the file system's VFS_ROOT
operation to retrieve its root vnode, a pointer to which is thereafter held in the global variable rootvnode. If the VFS_ROOT operation fails, there
is a kernel panic. An additional reference to this vnode is added so that it is always busy, and consequently, cannot be normally unmounted.
bsd_init() sets process 0's current directory vnode pointer to rootvnode.
If the root file system is being mounted over the network, additional setup may be required at this point in certain scenarios. The
netboot_setup() [bsd/kern/netboot.c] function is called for this purpose. For example, if the root file system image is being mounted using
vndevice, netboot_mountroot() does not actually mount the file system contained in the vndevice nodenetboot_setup() mounts it.
5.7.7. Creating Process 1
bsd_init() performs the following actions after mounting the root file system.
 It sets process 0's start time and the kernel's boot time to the current time.
 It initializes process 0's running time (the p_rtime field of the proc structure) to zero.
 It calls devfs_kernel_mount() [bsd/miscfs/devfs/devfs_vfsops.c] to "manually" mount the device file system on /dev/.
 It calls siginit() [bsd/kern/kern_sig.c] to initialize process 0's signal state, which includes marking signals that are to be ignored.
 It calls bsd_utaskbootstrap() [bsd/kern/bsd_init.c], which arranges for the first user-space program to run.
 If there is a post-mount-root hook functionmountroot_post_hook()registered with the kernel, bsd_init() invokes it. We saw in
Chapter 4 that the BootCache kernel extension uses this hook.
 It drops the kernel funnel.
bsd_utaskbootstrap() clones a new process from process 0 by calling cloneproc() [bsd/kern/kern_fork.c], which in turn calls procdup
() [bsd/kern/kern_fork.c]. Since procdup() is a BSD-level call, creating a new process results in the creation of a new Mach task with a
single thread. The new process, which has a process ID of 1, is marked runnable by cloneproc(). bsd_utaskbootstrap() points the
initproc global variable to this process. It then calls act_set_astbsd() [osfmk/kern/thread_act.c] on the new thread to post an
asynchronous system trap (AST), with the "reason" for the trap being AST_BSD (defined in osfmk/kern/ast.h). An AST is a trap delivered to a
thread when it is about to return from an interrupt context, which could have been due to an interrupt, a system call, or another trap.
act_set_astbsd() calls thread_ast_set() [osfmk/kern/ast.h] to set the AST by atomically OR'ing the reason bits with the thread
structure's one or more pending ASTs [osfmk/kern/thread.h]. bsd_utaskbootstrap() finishes by calling thread_resume()
[osfmk/kern/thread_act.c] on the new thread, which awakens the thread.
ast_check() [osfmk/kern/ast.c] is called to check for pending ASTsfor example, in thread_quantum_expire()
[osfmk/kern/priority.c], after the quantum and priority for a thread are recomputed. It propagates the thread's ASTs to the processor. Before
the thread can execute, a pending AST causes ast_taken() [osfmk/kern/ast.c]the AST handlerto be called. It handles AST_BSD as a special
case by clearing the AST_BSD bit from the thread's pending ASTs and calling bsd_ast() [bsd/kern/kern_sig.c]. AST_BSD is used for other
purposes besides kernel startup; therefore, bsd_ast() is called in other scenarios too. bsd_ast() maintains a Boolean flag to remember
whether BSD initialization has completed and calls bsdinit_task() [bsd/kern/bsd_init.c] the first time it is called.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh90B0.htm 20.08.2007
Chapter 5. Kernel and User-Level Startup Page 41 of 59
// bsd/kern/kern_sig.c
void
bsd_ast(thread_act_t thr_act)
{
...
static bsd_init_done = 0;
...
if (!bsd_init_done) {
extern void bsdinit_task(void);
bsd_init_done = 1;
bsdinit_task();
}
...
}
bsdinit_task() [bsd/kern/bsd_init.c] performs the following key operations in the given order.
 It sets the current process's name to init.
 It calls ux_handler_init() [bsd/uxkern/ux_exception.c] to initialize the Unix exception handler.[35] This creates a kernel thread that
runs ux_handler() [bsd/uxkern/ux_exception.c]. Its job is to translate Mach exceptions to Unix signals. Both the host exception port
and the task special port are set to the ux_exception_port global Mach port.
[35] We will discuss exception handling in Chapter 9.
 It calls get_user_regs() [osfmk/ppc/status.c] to create a new, default user state context. It then sets the per-thread uthread
structure's uu_ar0 pointerthe address of the saved user-state GPR0to the newly created context.
 It sets the bsd_hardclockinit global variable to 1, which starts the BSD "hardware" clockthat is, the bsd_hardclock()
[bsd/kern/kern_clock.c] function starts performing work instead of simply returning.
 It sets the global variable bsd_init_task to the current task. This may be used latersay, in a debug buildto identify whether a task is the
init task. For example, if TRap() [osfmk/ppc/trap.c], the high-level trap handler, detects that there has been an exception in the init
task, it treats it seriously and provides a detailed debugging dump containing the exception code, subcode, contents of general-purpose
and several special-purpose registers, and a stack trace. This debugging data is stored in a special global buffer,
init_task_failure_data [osfmk/kern/bsd_kern.c], whose contents are zeroed by bsdinit_task().
 It sets up the system shared region (see Section 5.7.8).
 It calls load_init_program() [bsd/kern/kern_exec.c] to launch the first user-space program (see Section 5.8).
 It sets the app_profile global variable to 1, which enables application profiling as part of the kernel's working set detection subsystem.
[36]
[36] We will discuss this subsystem in Chapter 8.
5.7.8. Shared Memory Regions
The kernel can maintain one or more shared memory regions that can be mapped into each user task's address space. The
shared_region_task_mappings structure [osfmk/vm/vm_shared_memory_server.h] is used for tracking a shared-region task mapping. The
kernel keeps track of these regions by environment, where an environment is a combination of a file system base (the fs_base field), and a
system identifier (the system field). The global variable that holds the default environment's shared regions is defined in
osfmk/vm/vm_shared_memory_server.c.
// osfmk/vm/vm_shared_memory_server.h
struct shared_region_task_mappings {
mach_port_t text_region;
vm_size_t text_size;
mach_port_t data_region;
vm_size_t data_size;
vm_offset_t region_mappings;
vm_offset_t client_base;
vm_offset_t alternate_base;
vm_offset_t alternate_next;
unsigned int fs_base;
unsigned int system;
int flags;
vm_offset_t self;
};
...
typedef struct shared_region_task_mappings *shared_region_task_mappings_t;
typedef struct shared_region_mapping *shared_region_mapping_t;
...
// Default environment for system and fs_root
#define SHARED_REGION_SYSTEM 0x1
...
#define ENV_DEFAULT_ROOT 0
...
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh90B0.htm 20.08.2007
Chapter 5. Kernel and User-Level Startup Page 42 of 59
// osfmk/vm/vm_shared_memory_server.c
shared_region_mapping_t default_environment_shared_regions = NULL;
...
bsdinit_task() defines the system region to be the one whose fs_base and system fields are equal to ENV_DEFAULT_ROOT and the processor
type, respectively. The processor typeas contained in the cpu_type field of the per-processor structureis retrieved by calling cpu_type()
[osfmk/ppc/cpu.c]. bsdinit_task() looks for the system region on the list of default environment shared regions. If it fails to find the region,
it calls shared_file_boot_time_init() [osfmk/vm/vm_shared_memory_server.c] to initialize the default system region. Recall that
shared_file_boot_time_init() would previously have been called by kernel_bootstrap_thread(). We saw that
shared_file_boot_time_init() calls shared_file_init() [osfmk/vm/vm_shared_memory_server.c] to allocate two 256MB shared
regionsone for text and the other for datafor mapping into task address spaces. shared_file_init() also sets up data structures for keeping
track of virtual address mappings of loaded shared files. osfmk/mach/shared_memory_server.h defines the addresses of the shared text and
data regions in a client task's address space.[37]
[37] In this context, the kernel is the shared memory server and a task is the client.
// osfmk/mach/shared_memory_server.h
#define SHARED_LIBRARY_SERVER_SUPPORTED
#define GLOBAL_SHARED_TEXT_SEGMENT 0x90000000
#define GLOBAL_SHARED_DATA_SEGMENT 0xA0000000
#define GLOBAL_SHARED_SEGMENT_MASK 0xF0000000
#define SHARED_TEXT_REGION_SIZE 0x10000000
#define SHARED_DATA_REGION_SIZE 0x10000000
#define SHARED_ALTERNATE_LOAD_BASE 0x90000000
You can use the vmmap command to display the virtual memory regions allocated in a process and thus see the entities that may be mapped at
the shared addresses.
$ vmmap -interleaved $$
...
__TEXT 90000000-901a7000 [ 1692K] r-x/r-x SM=COW ...libSystem.B.dylib
__LINKEDIT 901a7000-901fe000 [ 348K] r--/r-- SM=COW ...libSystem.B.dylib
__TEXT 901fe000-90203000 [ 20K] r-x/r-x SM=COW ...libmathCommon.A.dylib
__LINKEDIT 90203000-90204000 [ 4K] r--/r-- SM=COW ...libmathCommon.A.dylib
__TEXT 92c9b000-92d8a000 [ 956K] r-x/r-x SM=COW ...libiconv.2.dylib
__LINKEDIT 92d8a000-92d8c000 [ 8K] r--/r-- SM=COW ...libiconv.2.dylib
__TEXT 9680f000-9683e000 [ 188K] r-x/r-x SM=COW ...libncurses.5.4.dylib
__LINKEDIT 9683e000-96852000 [ 80K] r--/r-- SM=COW ...libncurses.5.4.dylib
__DATA a0000000-a000b000 [ 44K] rw-/rw- SM=COW ...libSystem.B.dylib
__DATA a000b000-a0012000 [ 28K] rw-/rw- SM=COW ...libSystem.B.dylib
__DATA a01fe000-a01ff000 [ 4K] r--/r-- SM=COW ...ibmathCommon.A.dylib
__DATA a2c9b000-a2c9c000 [ 4K] r--/r-- SM=COW ...libiconv.2.dylib
__DATA a680f000-a6817000 [ 32K] rw-/rw- SM=COW ...libncurses.5.4.dylib
__DATA a6817000-a6818000 [ 4K] rw-/rw- SM=COW ...libncurses.5.4.dylib
...
5.8. Launching the First User-Space Program
As BSD initialization concludes, load_init_program() [bsd/kern/kern_exec.c] is called to launch the first user program, which is
traditionally /sbin/init on Unix systems but is another init program on Mac OS X.[38] The function first attempts to execute /sbin/launchd.
If that fails, it attempts /sbin/mach_init. If that too fails, it prompts the user for a pathname to the program to run. The kernel uses getchar()
[bsd/dev/ppc/machdep.c] to read the name character by character, echoing each character read. getchar() uses cngetc() and cnputc()
[osfmk/console/ppc/serial_console.c], which are wrappers around the now established console I/O operations.
[38] /sbin/launchd is the default init program beginning with Mac OS X 10.4.
load_init_program() allocates a page of memory in the current task's map. It populates the page with a null-terminated list of arguments that
have been collected so far in a string variable. argv[0] contains the init program's null-terminated name (e.g., /sbin/launchd), argv[1]
contains an argument string that has a maximum size of 128 bytes (including the terminating NUL character), and argv[2] is NULL. Examples of
arguments passed to the init program include those indicating safe (-x), single-user (-s), and verbose (-v) booting modes. An execve_args
structure [bsd/sys/exec.h] is populated so that execve() can be called from within the kernel, while pretending as if it were called from user
space. Consequently, these arguments are first copied out to user space, since the execve() system call expects its arguments to be there.
// bsd/kern/kern_exec.c
static char *init_program_name[128] = "/sbin/launchd";
static const char *other_init = "/sbin/mach_init";
char init_args[128] = "";