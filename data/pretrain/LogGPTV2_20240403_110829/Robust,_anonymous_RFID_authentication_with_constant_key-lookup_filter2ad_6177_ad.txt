### Response to a Challenge and Modes of Operation

- **Mode 0**: When the tag has received confirmation, it operates in Mode 0.
- **Mode 1**: In this mode, the tag generates entrapment pseudonyms on-the-fly using the function \( g(k; q \parallel IV \parallel ctr) \). Since there are only a limited number of such values (which eventually recycle), the tag must defend against fly-by attacks from rogue readers attempting to exhaust these values. A simple defense is to use a time-delay mechanism, as described in [vLBdM07]. This extends the recycling period by several orders of magnitude, effectively thwarting such attacks. However, this may not prevent entrapment attacks, where the tag's responses can eventually be linked. Unlinkability is restored once the tag is mutually authenticated by the server, at which point the tag updates its seed \( q \).

### Protocol Description

Refer to Figure 2 for the protocol flow:

1. **First Pass**:
   - The server challenges the tag with a random value \( c \).
   - If the tag previously received confirmation (Mode 0), it updates its pseudonym \( ps \) and computes three values \( \gamma_0, \gamma_1, \gamma_2 \) using the PRF \( g(k, ps, c) \):
     - \( \gamma_0 \) is used for future pseudonym updates.
     - \( \gamma_1 = \text{auth} \) serves as an authenticator.
     - \( \gamma_2 = \text{conf} \) is used for confirmation.
   - The tag responds with \( ps \parallel \text{auth} \).
   - If the tag has not received confirmation (Mode 1), it uses a different pseudonym computed on-the-fly with seed \( q \).

2. **Server Verification**:
   - The server uses a key-lookup database \( DB \) to disambiguate \( ps \) and checks the authenticator \( \text{auth} \).
   - If the authenticator is correct, the server sends \( \text{conf} \) to the tag.
   - The server then updates the pseudonyms, ensuring synchronization with the tag:
     - \( ps = r_{\text{cur}} \) indicates the tag is not under attack.
     - \( ps = r_{\text{old}} \) or \( ps = q_i \) (where \( i \in \{ \text{old}, \text{cur} \} \)) indicates the tag did not receive confirmation, with the latter indicating an entrapment attack by an unauthorized reader.
   - In the case of an entrapment attack, the server updates the seed \( q \) to \( \gamma_0 \) to maintain unlinkability.

3. **Tag Update**:
   - If the tag receives confirmation, it updates the pseudonym \( r \) if in Mode 0, otherwise it updates the seed \( q \).

This protocol differs from O-FRAP [vLBdM07] in that the values \( r \) and \( q \) stored in the tag's non-volatile memory are always synchronized with those in the server's database \( DB \), allowing for constant key-lookup.

### Security Considerations

- **Disabling Attacks**: The protocol addresses disabling attacks by relaxing the requirement for unlinkable privacy, but linkability is restricted to entrapment attacks where the tag is physically restricted or closely tracked.
- **Security Framework**: Based on O-FRAP, which is proven secure in the UC framework, the main difference is the use of entrapment pseudonyms that eventually recycle but remain pseudo-random until exhausted.
- **Theorem**:
  - **Bounded Interrogations**: If the maximum number of uninterrupted interrogations \( m \) is bounded by a constant \( c \), the protocol achieves one-way authentication with strong privacy and supports constant key-lookup.
  - **Unbounded Interrogations**: If \( m \) is not constant, the protocol achieves one-way authentication with linkable privacy and supports constant key-lookup.

### Implementation and Extensions

- **Efficiency**: The protocol requires only a PRF, which can be implemented with a PRNG, making it highly efficient and adaptable to EPC Gen2 standards.
- **Forward-Secrecy**: To support forward-secrecy, the key can be updated whenever the pseudonym is, requiring additional non-volatile memory for key storage.
- **Key-Exchange**: The protocol can be extended to support key-exchange, as in O-FRAKE [vLBdM07].

### Conclusion

To make RFID systems with strong security and privacy a reality, a practical solution that considers availability and scalability is essential. This paper introduces a scalability compiler that transforms challenge-response RFID authentication protocols into scalable versions with the same functionality and security. We demonstrate how to achieve security and privacy with constant lookup cost within the universally composable security model, requiring only a few hundred additional GEs of circuit area. By weakening the restriction on unlinkable privacy, we present a provably secure anonymous RFID authentication protocol that supports scalable lookup and minimizes privacy loss due to linkability.

### References

[AO05], [BDJR97], [BvLdM06], [Can95], [Can00], [Can01], [CKM94], [Dim05], [DR02], [EPC], [FDW04], [FWR05], [GGM86], [HM04], [Jue04], [LH06], [MSW06], [MvOV96], [OSK03], [Rab79], [Sha07], [SWE03], [Tsu06], [vLBdM07]

---

This revised version aims to provide a clearer, more coherent, and professional presentation of the original text.