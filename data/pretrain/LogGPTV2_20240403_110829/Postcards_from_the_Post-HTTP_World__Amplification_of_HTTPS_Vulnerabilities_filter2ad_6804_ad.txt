615
2,279
47
816
96
inclusion of scripts sent over tainted channels in the top-level
document may fully compromise integrity. The only protection
mechanism available in modern browsers against the latter
threat is Subresource Integrity (SRI) [2], a relatively recent
web standard which allows websites to bind to 
tags an integrity attribute storing a cryptographic hash
of the script which is expected to be included by them. If
the included script does not match the hash, the script is not
executed, so SRI can be used to prevent the threats of script
injection via network attacks.
The two integrity attacks above are equally dangerous and
the most severe ones in terms of security, because they grant
to the attacker active scripting capabilities on the web page,
which we can thus deem as compromisable.
Deﬁnition 1 (Compromisable Page). A page is compromisable
if and only if any of the following conditions holds:
1) the page is received from a tainted channel;
2) the page includes scripts in the top-level document from
tainted channels without using SRI.
Notice that the deﬁnition does not refer to Content Security
Policy (CSP) [93], a web standard which can be used to
prevent the execution of inline scripts and restrict content
inclusion on web pages by means of a white-listing mech-
anism. In fact, CSP is ineffective against network attackers:
if a page is compromisable because it is received from a
tainted channel, the attacker may just strip away the CSP
headers and  tags to disable the protection; if instead a
page is compromisable because it includes scripts from tainted
channels, observe that CSP does not prevent the replacement
of legitimate scripts with arbitrary malicious contents.
A second class of threats we are interested in allows SOP
bypasses through compromisable pages. If a host contains at
least one compromisable page, SOP becomes largely inef-
fective at defending it, because the attacker may get active
scripting capabilities in its web origin and get access e.g.,
to its cookies and web storage. This motivates the following
deﬁnition.
Deﬁnition 2 (Compromisable Host). A host is compromisable
iff it is possible to retrieve a compromisable page from it.
Finally, besides these obvious threats, it is worth noticing
that there are also other integrity attacks which are subtler
than script injection, but may achieve results as severe as
page compromise under speciﬁc circumstances. For example:
(i) the inclusion of stylesheets and web fonts can be used to
perform scriptless attacks, which may enable the exﬁltration of
conﬁdential information stored in the DOM [41]; (ii) the in-
clusion of Scalable Vector Graphics (SVG) images using tags
like  may lead to the injection of malicious HTML
and JavaScript contents [40]; (iii) the inclusion of iframes can
lead to exploitations against the top-level document via the
postMessage API [81]; (iv) the result of an XMLHttpRequest
can be passed to a function like eval, which converts strings
into executable code and thus enables script injection [91].
To comprehensively characterize the pages suffering from
these potential integrity issues, we leverage the Mixed Con-
tent [92] speciﬁcation, which deﬁnes the reference security
policy for the inclusion in HTTPS pages of contents delivered
over HTTP channels. The key idea to uniformly capture
these attacks is to reuse the deﬁnition of blockable request
introduced in the Mixed Content speciﬁcation, which mandates
that compliant browsers must prevent HTTPS pages from
sending this type of requests over HTTP channels.
Deﬁnition 3 (Blockable Request). A request is blockable if
and only if it is not requesting any of the following resources:
1) images loaded via  or CSS;
2) video loaded via  and ;
3) audio loaded via  and .
We similarly consider blockable requests over tainted chan-
nels as a possible source of integrity attacks, which leads to
the following deﬁnition of low integrity page.
Deﬁnition 4 (Low Integrity Page). A page has low integrity
if and only if any of the following conditions holds:
1) the page is compromisable;
2) the page includes sub-resources (other than scripts) via
blockable requests sent over tainted channels.
Low integrity pages which only satisfy the second condition
do not necessarily provide active scripting capabilities to the
attacker, yet they might still pose signiﬁcant security threats
in speciﬁc scenarios. That said, in the next sections we will
often reason about the integrity of web pages to characterize
additional web application attacks and our analysis will always
be optimistic, i.e., we will assume that the attacker gets active
scripting capabilities only in compromisable web pages and
not in low integrity pages. We will also dispense with poten-
tial information leakages enabled by scriptless attacks [41],
because they are not easy to exploit and depend on the details
(cid:19)(cid:25)(cid:25)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:53 UTC from IEEE Xplore.  Restrictions apply. 
of speciﬁc web technologies. This conservative approach will
limit the number of false positives in our security analysis.
TOP SCRIPT PROVIDERS INTRODUCING INTEGRITY FLAWS
TABLE II
B. Experimental Results
The homepages of the 10,000 crawled websites included
sub-resources from 32,642 hosts. Our analysis exposed 977
low integrity pages (9.8%),
including 898 compromisable
pages where an attacker can get active scripting capabilities.
Examples of major security-sensitive websites whose home-
page was found compromisable include e-shops (alibaba.com,
aliexpress.com, tmall.com), online banks (bankia.es, deutsche-
bank.de, sparkasse.at, icicibank.com), social networks (mys-
pace.com, linkedin.com, last.fm) and other prominent services
(verizon.com, webex.com, livejournal.com).
Out of 898 compromisable pages,
there are 238 pages
received from tainted channels and 660 pages including scripts
from tainted channels. Although the security dangers of these
two cases are the same, the latter cases are particularly intrigu-
ing, because they show that the majority of the compromisable
pages (73.5%) is harmed by the inclusion of external scripts.
Since the majority of these scripts is hosted on domains which
are not under the direct control of the embedding pages, SRI
is the way to go to mitigate their threats: unfortunately, SRI
is only used in 329 pages (3.3%) and does not prevent any
page compromise in our dataset. Rather, we observe that there
are 25 pages using SRI on some script tags, but are still
compromisable because SRI is not deployed on all the script
tags including contents from tainted channels.
Based on the previous considerations on external scripts, it
is noteworthy that there exist popular script providers which
are deployed on top of vulnerable HTTPS implementations,
thus severely harming the integrity of a very large number
of websites which include contents from them. Table II re-
ports the most popular script providers which allow for the
establishment of tainted channels, along with the number of
the Alexa websites which include at least one script from
them in their top-level document. These numbers show that by
targeting only a couple of carefully chosen hosts, an attacker
can fully undermine the integrity of a much larger number
of websites, thus making integrity attacks cost-effective. For
instance, consider the LinkedIn Insight Tag, a JavaScript code
that enables the collection of visitors’ data on webpages
which include it and provides web analytics for LinkedIn
ad campaigns. The script is loaded from a tainted channel
served on snap.licdn.com (second row of Table II), which
is vulnerable to MITM attacks due to a host affected by
ROBOT at rewards.wholefoodsmarket.com,
that presents a
valid certiﬁcate for snap.licdn.com. The inclusion of this
script threatens the integrity of 126 websites among the ones
we analyzed, including notable examples such as auth0.com,
britishairways.com, linode.com and teamviewer.com.
VI. AUTHENTICATION CREDENTIALS
In this section, we discuss the import of (partially) leaky
and tainted channels on the security of common authentication
credentials, i.e., passwords and cookies.
Script Provider
hm.baidu.com
snap.licdn.com
ads.pubmatic.com
zz.bdstatic.com
cdn.tagcommander.com
tag.baidu.com
geid.wbtrk.net
cdn.wbtrk.net
cdn.blueconic.net
dup.baidustatic.com
Including Websites
188
126
47
39
37
20
19
19
14
12
A. Security Analysis
In a typical web session, a website authenticates a user by
checking her access credentials in the form of a username and
a password. Upon their successful veriﬁcation, the website
stores in the user’s browser a set of session cookies, which
are automatically attached to the next requests sent to the
website in order to authenticate them. There are quite a few
well-known security threats in this common scenario [17] and
vulnerable HTTPS implementations may severely compromise
the security of web sessions. For example, if a user’s password
is disclosed to the attacker, the attacker will become able to
start new sessions on the user’s behalf and impersonate her
at the website. Moreover, web session security requires both
the conﬁdentiality and the integrity of session cookies: lack of
the former allows the attacker to hijack the user’s session [16],
while lack of the latter allows the attacker to force the user in
the attacker’s session [94]. Though the latter threat is easily
underestimated, it may have serious security consequences on
many web applications: for instance, e-payment websites may
be targeted by such attacks to fool honest users into storing
their credit card numbers in an attacker-controlled session.
Conﬁdentiality of Passwords: A critical requirement for the
conﬁdentiality of passwords is that they are only input on
HTTPS pages and only sent over HTTPS channels. Modern
web browsers indeed warn users when these security impor-
tant requirements are not met [72]. Unfortunately, vulnera-
ble HTTPS implementations may make this security check
insufﬁcient: password conﬁdentiality cannot be ensured when
the password is sent over a leaky channel or entered into a
compromisable web page where the attacker can get active
scripting capabilities, thus becoming able to leak the password
from the DOM.
Deﬁnition 5 (Low Conﬁdentiality Password). A password
has low conﬁdentiality if and only if any of the following
conditions holds:
1) the password is submitted over a leaky channel;
2) the page where the password is input is compromisable.
Notice that partially leaky channels cannot be exploited
to steal passwords, because the secret repetition assumption
required by such side-channels is not satisﬁed by them.
Conﬁdentiality of Cookies: The conﬁdentiality of cookies
against network attackers can be enforced by means of the
(cid:19)(cid:25)(cid:26)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:53 UTC from IEEE Xplore.  Restrictions apply. 
Secure attribute, because browsers ensure that Secure cookies
are only sent on HTTPS channels and only made accessible
to scripts running in HTTPS pages [6]. However, this defense
mechanism becomes useless when HTTPS does not provide
the expected security guarantees: for example, even partially
leaky channels may be sufﬁcient to disclose the content of
Secure cookies, since cookies are automatically attached by
browsers and thus satisfy the secret repetition assumption
required by attacks like POODLE-TLS. Moreover, compro-
misable pages can be exploited to steal Secure cookies by
means of malicious scripts which exﬁltrate them, unless these
cookies are also protected with the HttpOnly attribute, which
prevents script accesses to them.
To make this intuition more precise, given a cookie c, we
let hosts(c) note the set of the hosts matching the domains
which are entitled to access the content of c, as prescribed by
RFC 6265 [6]. Intuitively, c is attached to a request towards
h if and only if h ∈ hosts(c).
Deﬁnition 6 (Low Conﬁdentiality Cookie). A cookie c set by
the host h has low conﬁdentiality if and only if any of the
following conditions holds:
1) there exists a host h(cid:2) ∈ hosts(c) which allows for the
2) c does not have the HttpOnly attribute set and there exists
establishment of partially leaky channels;
a compromisable host h(cid:2) ∈ hosts(c).
Notice that breaking the conﬁdentiality of a single session
cookie may not be enough to let the attacker hijack the sessions
of legitimate users, because websites may use multiple cookies
for authentication purposes [20]. However, if all the session
cookies of a website have low conﬁdentiality, we have deﬁnite
evidence that there is room for session hijacking.
Integrity of Cookies: Cookie integrity has notoriously been
a major problem on the Web for many years, because cookies
do not provide isolation by protocol, hence HTTP trafﬁc can
be abused to forge cookies which are indistinguishable from
legitimate cookies set over HTTPS [6]. Also, cookies can be
set by potentially untrusted related domains, i.e., domains that
share a common sufﬁx which is not included in the Public
Sufﬁx List.6 The recommended way to enforce cookie integrity
against network attacks on the current Web is conﬁguring
HSTS so that all the hosts entitled to set cookies can only
be contacted over HTTPS [94]. An alternative approach is
using cookie preﬁxes,7 a recent addition to web browsers
which can be used to prevent the setting of cookies over
HTTP (when the
Secure- preﬁx appears in the cookie name)
and, potentially, also from untrusted related domains (when
Host- preﬁx appears in the cookie name, preventing
the
cookie sharing between related domains). Unfortunately, these
defenses might fail when HTTPS suffers from cryptographic
ﬂaws, because compromisable hosts would allow the attacker
to break cookie integrity by corrupting HTTPS trafﬁc;
in