contain the certiﬁcates’ common names.
Figure 4: AirDrop BLE advertisement format showing seman-
tics and values of individual bytes.
(Un)authenticated Connections
3.3
AirDrop will always try to set up what we call an authenti-
cated connection. Such a connection can only be established
between users with an Apple ID and that have each other in
their address books. Authentication involves multiple certiﬁ-
cates and CAs that we depict in Fig. 3. In order to authenticate,
a device needs to prove that it “owns” a certain contact identi-
ﬁer ci such as email address or phone number associated with
its Apple ID, while the verifying device checks whether it
has ci in its address book. When establishing a TLS connec-
tion, AirDrop uses a device-speciﬁc Apple-signed certiﬁcate
σUUID containing a UUID. σUUID is issued when a user logs
into the device with its Apple ID. The UUID is not tied to any
contact identiﬁers, so AirDrop uses an Apple-signed record
data “blob” RD containing the UUID and all contact identi-
ﬁers c1, . . . ,cn that are registered with the user’s Apple ID in
a hashed form. This record data is retrieved once from Apple
and then presented for any subsequent AirDrop connection.
Formally, RD is a tuple:
RD = UUID,SHA2 (c1) , . . . ,SHA2 (cn)
.
(4)
The signed record data RDσ additionally includes a signature
and a certiﬁcate chain (Fig. 3):
RDσ = RD,sign (σVR,RD) ,σVR,σAAI2
,
(5)
where sign (σ,X) is the signature of σ over X. When authenti-
cating, a node computes SHA2 over each contact identiﬁer in
its address book and compares them with the hashes contained
in the presented RDσ and veriﬁes that the UUID matches the
certiﬁcate of the current TLS connection. The latter effec-
tively prevents reuse of RDσ by an attacker using a different
TLS certiﬁcate.
AirDrop transparently treats a connection as unauthenti-
cated if the sender or receiver fails to provide an Apple-signed
TLS certiﬁcate or valid record data. This means that AirDrop
will establish an unauthenticated connection with devices that
use a self-signed certiﬁcate and provide no record data. While
AirDrop’s authentication mechanism appears to be crypto-
graphically well-designed, we show in Section 7 how to down-
grade an authenticated connection to an unauthenticated one
and launch a MitM attack on the data transfer.
4 Activating AWDL on Devices in Proximity
Some of the attacks demonstrated in this work require the
targets’ AWDL interface to be active, which is typically not
the case since an application has to request activation explic-
itly [79]. We have found that the BLE discovery mechanism
integrated with AirDrop (see Section 3) can be exploited to
activate all AWDL devices in proximity. Devices in everyone
mode will enable AWDL immediately after receiving any
AirDrop BLE advertisement. We analyze the theoretical per-
formance of brute forcing the truncated contact hash values in
AirDrop’s BLE advertisements (Fig. 2) to activate the AWDL
interfaces of targets in the default contacts-only mode. Finally,
we build a PoC leveraging a low-cost ($20) BBC micro:bit
device and experimentally conﬁrm that the attack is feasible
in practice with a target response time of about one second
for devices that have 100 contact identiﬁers in their address
book.
4.1 AirDrop BLE Advertisements
We show the actual BLE advertisement frames [17, Vol. 3,
Sec. 11] that AirDrop uses including four contact identiﬁer
hashes in Fig. 4. They are broadcast as non-connectable
undirected advertising (ADV_NONCONN_IND). The frames use
manufacturer-speciﬁc data ﬁelds that have ﬁxed values except
for the contact hashes. In fact, we found that the contact hashes
are the ﬁrst two bytes of the SHA2 digest of the sender’s con-
tact identiﬁers that are also included in the record data (see
Section 3.3). If the sender has less than four identiﬁers, the
remaining contact hash ﬁelds are set to zero. Due to the short
length, it appears feasible to use brute force to try all possible
values.3
3Note that the sender still has to provide the complete hash during the
HTTPS handshake before the receiver accepts the data on an authenticated
connection.
40    28th USENIX Security Symposium
USENIX Association
Apple Root CA σRAApple Application Integration CA σAAIApple ApplicationIntegration 2 CA σAAI2com.apple.idms.appleid.prd. σUUIDApple ID Validation Record  σVRSigned byApple owns private keyUser owns private keyProtects TLS connectionSigns record dataTable 1: Symbols
SYMBOL DESCRIPTION
S
C
w
i
iPHY
r
n
p (p j)
Contact hash search space
Contacts in the target’s address book
Target’s BLE scan window
Target’s BLE scan interval
Attacker’s BLE PHY injection interval
Effective contact hash brute force rate
Tried hash values per scan window
Hit probability after one (or j) scans
4.2 Brute Force Analysis
We assume that the attacker does not know the target’s con-
tacts and, thus, attempts to enable the target’s AWDL interface
using brute force. As the target has at least one contact identi-
ﬁer (the address book contains at least the user’s own Apple
ID), the attacker needs to try S = 216 = 65536 hashes in the
worst case. Thus, the challenge for the attacker is to quickly
send a large number of BLE advertisements while the target is
conducting a BLE scan. In the following, we analyze how fast
the attacker can deplete the search space and how successful
they would be. We start investigating the results for a single
BLE scan window and then extend our analysis to multiple
scan intervals.
One Scan Window. Let the attacker inject BLE advertise-
ment frames at the physical layer with an interval of iPHY.
Further, consider that the attacker has a single radio and that
BLE uses three advertisement channels [17]. Also, recall that
an AirDrop BLE frame has room for four contact hashes.
Then, the attacker’s effective brute force rate r can be calcu-
lated as:
r =
4
3· iPHY
.
(6)
Now, we can compute the number of hash values n that the
attacker can inject per scan window w [17] as:
n = w· r .
(7)
Let X be a random variable, and P(X = k) denote the proba-
bility that the target “sees” k known contact hashes during one
scan window. Since the attacker moves through the search
space sequentially, we can formulate the problem using the
urn model in drawing without replacement mode which re-
sults in a hypergeometric distribution. We get:
(cid:1)
(cid:0)n
(cid:1)(cid:0)S−n
(cid:1)
(cid:0)S
C−k
C
k
P(X = k) =
.
(8)
In particular, the attacker only requires one hit to activate the
target’s AWDL interface whose probability we call p:
(cid:0)n
0
C−0
C
p = P(X ≥ 1) = 1− P(X = 0)
= 1−
C
(cid:1)(cid:0)S−n
(cid:1)
(cid:0)S−n
(cid:1)
(cid:0)S
(cid:1) .
(cid:1) = 1−
(cid:0)S
(cid:1) ≈ nk
Using the Stirling’s approximation(cid:0)n
= 1− (S− n)
(cid:19)C
= 1−(cid:16)
SC
p ≈ 1− (S−n)
(cid:18)S− n
can simplify Eq. (9) as:
= 1−
C!
SC
C!
C
C
(cid:17)C
C
S
1− n
S
(9)
k
k! for k << n, we
.
(10)
Multiple Scan Intervals. BLE devices perform scans regu-
larly at a ﬁxed interval i [17]. Let Y be a random variable
indicating that the attacker has a hit (Y = 1) or not (Y = 0)
during one scan. We assume that the attacker does not know
when the target’s scan window starts and, therefore, that Y
is i.i.d. between scans.4 Let j indicate the target’s jth scan
since the attacker started their brute force attack. Then, the
probability that the attacker had k hits after j scans is given
by a binomial distribution:
P(Y = k) =
pk(1− p) j−k .
(11)
(cid:18) j
(cid:19)
k
Again, the attacker needs at least one hit whose probability
we denote as p j (note that p1 = p):
p j = P(Y ≥ 1) = 1− P(Y = 0) = 1− (1− p) j .
(12)
With Eq. (10), we get:
p j ≈ 1−(cid:16)
1− n
S
(cid:17) jC
.
(13)
We know that j depends on the time since the attack started
and the target’s BLE scan interval i (the target performs one
BLE scan of length w per interval). Let t denote the attack
duration, then j ≤ (cid:98)t/i(cid:99). Finally, we denote the success prob-
ability at time t as
p(t) ≈ 1−(cid:16)
1− wr
S
(cid:17)tC/i
.
(14)
Jailbreaking BLE Advertisements
4.3
The Bluetooth standard imposes a minimum advertisement
interval5 of 100 ms for non-connectable undirected adver-
tising [17, Vol. 6, Sec. 4.4.2.2], which we found is usually
4If the attacker knew the start of each scan window, they could follow a
better strategy by only sending advertisements while the target is performing
a scan. This way, they would deterministically succeed after they had gone
through S once.
5The BLE advertisement interval accounts for a frame transmission on
each of the three advertisement channels.
USENIX Association
28th USENIX Security Symposium    41
uint8_t *le_adv = airdrop_init_template()
for (uint16_t h = 0; /* loop */; h += 4) {
airdrop_set_hashes(le_adv, h, h+1, h+2, h+3);
for (uint16_t chan = 37; chan < 40; chan++) {
le_adv_tx(le_adv, chan);
sleep(0.625 /* in milliseconds */); } }
Figure 5: C pseudo code of our BLE brute force attack
enforced in the BLE ﬁrmware. By complying to the stan-
dard, the attacker would need at least 216 = 27 minutes to
iterate through the entire search space once. If the attacker
had access to the BLE physical layer to control and sched-
ule individual transmissions, they could circumvent the stan-
dard’s restrictions and, thus, iterate through the search space
much faster. To this end, we extend an open source BLE
ﬁrmware [65] for the Nordic nRF51822 [63] chipset to im-
plement our brute force attack. In principle, our attack imple-
mentation is very simple and shown in Fig. 5. We use a send
interval of iPHY = 0.625 ms resulting in r = 2133.3 s-1 which
allows the attack to iterate through S in only 216/ f = 30.72 s.
By using three BLE radios (one for each advertisement chan-
nel), we could reduce this time to 10.24 s. However, we show
that using one radio is sufﬁcient in practice.
4.4 Target Response Times Micro Benchmark
We measure the target response time, i. e., the time it takes for
a target to turn on its AWDL interface when being exposed
to our attack. In particular, we measure the response time for
a contacts-only receiver that has 10, 100, and 1000 contact
identiﬁers in their address book. In addition, we include ref-
erence measurements for a receiver in everyone mode under
the same attack.
Setup. For the experiment, we use a Wi-Fi sniffer (Broadcom
BCM4360) to receive AWDL AFs and a $20 micro:bit de-
vice [58] to inject BLE advertisements. To get the response
times, we start a brute force attack and measure the time until
we receive the ﬁrst AF from the target. We then stop the attack
and wait until the target stops sending AFs which means that
the AWDL interface has turned off. Then, we start over to
collect 50 measurements per setting.
Results. We show the results for an iPhone 8 (iOS 12) in
Fig. 6. The plot also includes the analytical response time
distribution based on Eq. (14), assuming a BLE scan window
w and interval i of 30 ms and 300 ms, respectively.6. We can
make several observations: (1) Our analytical model does not
capture our experimental results precisely but approximates
them within an order of magnitude which is sufﬁcient for our
purposes. (2) The median response time of targets with only
10 contact identiﬁers in their address book is 10 seconds and
6https://lists.apple.com/archives/bluetooth-dev/2014/
Sep/msg00001.html
Figure 6: Time it takes until target turns on its AWDL inter-
face after being exposed to our brute force attack.
decreases to about 1 second when more contacts are available.
We found that a user has more than 136 contacts on average
based on a user study that we describe in Section 5.2. (3)
This means that the brute force attack is feasible for scenarios
where the target will be in the attacker’s communication range
for a few seconds.