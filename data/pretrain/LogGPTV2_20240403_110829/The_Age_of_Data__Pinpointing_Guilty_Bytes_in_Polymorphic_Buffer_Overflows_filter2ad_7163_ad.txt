### 3. Overflow Analysis

#### 3.1 Detecting Stale Data
To determine if `addrA`'s value was stale at the time of overflow, we compare its `AllocAgeStamp` with the current `AgeStamp` of the buffer `buf`. If `addrA`'s `AllocAgeStamp` is older, it indicates that the data in `addrA` was stale when the overflow occurred. This suggests that we have identified the beginning of a vulnerable buffer.

#### 3.2 Fresh Data Handling
If `PFT(addrB)` is set to 1 and `addrA` contains fresh data, we set `FTS(addrB)` and unset `PFT(addrB)`. Since `addrA` and `buf` together form an area that conforms to all the properties of a crucial region (as per Observation 1), we treat `addrA` as part of the tainted buffer. Note that we cannot detect whether `addrA` belongs to a distinct variable. Most compilers, including GCC, allocate stack memory for multiple local variables at once, making it difficult to discern boundaries between successive buffers. Similarly, on the heap, memory is allocated for a structure as a whole, rather than for individual fields separately.

#### 3.3 Detection of Fresh Taint
When we encounter a byte with `FTS` set to 1, we conclude that `addrA`'s value was fresh at the time of overflow, indicating it belongs to the vulnerable buffer. Depending on the application's behavior between the overflow and detection, we may either add unrelated taints to the crucial tainted memory region or spot a contradiction with Observations 1-3, leading us to revert to the last correct byte, `addrB`.

The first possibility (adding unrelated taints) occurs only if:
- We reach a buffer entirely filled with network data.
- The area between this buffer and `addrB` appears as an unrelated tainted gap.
- The entire region, including the buffer, the unrelated tainted gap, and the crucial tainted memory region, adheres to Observations 1-3.

Even in this unlikely scenario, we can only incur false negatives, never false positives, since the unrelated tainted buffer must be completely filled.

#### 3.4 Discontinuity at Buffer Bottom
We have not discussed what happens if the discontinuity in the vulnerable buffer reaches the buffer's bottom. In principle, the analysis is similar to the one presented above. However, we may miss part of the crucial tainted memory region, as the bottom part of the vulnerable buffer gets overwritten.

### 4.9 Signature Generation

After identifying the malicious data in memory and generating a one-to-one mapping with bytes in the network trace, we generate signatures capable of identifying polymorphic buffer overflow attacks. Using knowledge about the protocol governing the malicious traffic, we list the protocol fields that include the crucial tainted memory region. Due to possible excess of tainted data in rare scenarios described in Section 4.8, we include a protocol field in a signature if it contains the violation address or if a cohesive part of it, including at least one boundary, can be mapped to the indicated malicious data. These fields are called critical.

#### 4.9.1 Vulnerabilities vs. Attacks
We generate signatures for stack and heap overflows by specifying the vulnerability rather than the attack itself. This is done by indicating the protocol fields that should collectively satisfy a condition. Specifically, the signature specifies that the fields should collectively have a length `L` that does not exceed a maximum, to prevent overflows of important values in memory.

In the simple case with only one protocol field responsible for the attack, `L` describes the distance between the beginning of the protocol field and the position in the network trace that contains the value that overwrites the target. Otherwise, `L` is augmented with the lengths of the remaining critical fields. In both cases, `L` is greater than or equal to the length of the vulnerable buffer. Signatures can be checked by a protocol dissector (similar to Ethereal) that yields the fields in a flow.

#### 4.9.2 Heap Overflows and Malformed Length Fields
For heap corruption attempts that manipulate a length field, signatures need to relate the critical fields to the length field. After determining the crucial tainted memory region `buf` of length `l`, we check in the network trace for the length value `la` provided by the attacker. If `la` is bigger than `l`, we specify that a message contains an attack if the cumulative length of the critical fields is less than `la` with the length field greater than or equal to `la`. If `la < l`, we must be more cautious, as the value provided by the attacker might describe the number of integers or other structures. For now, we describe the malicious message similarly to static-length buffer overflows, requiring conformity of the length value with the actual size of the protocol fields. Thus, as a value for `L`, we provide the length field. To ensure the signature is correct, we verify it by checking whether Prospector spots an illegal operation if we send a message with critical fields filled with arbitrary bytes slightly exceeding the length field.

#### 4.9.3 Final Form of Prospector's Signatures
Every signature consists of a sequence of value fields and critical fields. A value field specifies that a field in the protocol should have a specific value. For example, in the HTTP protocol, a value field may specify that the method should be GET for the signature to match. Critical fields, on the other hand, should collectively satisfy some condition, such as having a total length that is less or not less than `L`. We can also set boundaries on given fields, as in the case of heap overflows based on malformed messages.

### 4.10 Double-Free Errors
We added a module to Prospector to handle double-free attacks. Memory managers can be exploited if a programmer frees a pointer that was already freed. Double-free errors do not share the characteristics of heap-corruption attacks, as they do not overflow a buffer, and thus require special treatment.

Double-free exploits may overwrite any location, resembling complex heap corruption attacks. When a violation is detected, the memory region that held the vulnerable buffer is often reused and contains unrelated data. To address this, whenever `free` or `realloc` is called, we check for a potential double-free error, ensuring the given memory location points to the beginning of an allocated buffer. If not, we store the adjacent tainted memory region for possible later use.

### 5. Implementation Details

#### 5.1 Prospector Tagging
To manage memory tagging, Argos introduces a structure similar to page directories in Linux, consisting of pagemaps and bytemaps. A pagemap is an array where each entry corresponds to a bytemap keeping tags for a particular physical page. Initially, only the pagemap is allocated. Bytemaps are added on demand when tainted data is copied to a particular physical page for the first time. The network offset tags associated with each byte are 32 bits. To support signature generation, we doubled the tag size, yielding an additional 32 bits. Of these 32 bits, one bit is designated for the PFT and FTS indicators, one bit for the red marker denoting critical data on the heap, and the remaining 29 bits for the age stamp.

Age stamps are used only to compare tainted data, so they need only be incremented if a given value was used as a tag to mark tainted data. As most functions and processes never touch such data, the age stamp may remain untouched, causing it to wrap much more slowly.

Qemu translates all guest instructions to host native instructions by dynamically linking blocks of functions that implement the corresponding operations. To track tainted data being copied to memory, we instrument the store function to perform the operations of keeping track of age stamps and setting the extra indicators (PFT and FTS) described in Section 4.5. Here, we also check whether the destination memory location is not marked as red, which indicates an overflow and possibly a complex heap corruption attack, leading to a dump of the adjacent tainted memory.

#### 5.2 Stale Red Markers
To handle complex heap corruption attacks, we mark bytes surrounding allocated chunks of memory as red. If tainted data is written to a red region, it indicates illegal operations, triggering a memory region dump. As applications may not release all allocated memory, we may end up with stale red markers, potentially leading to unnecessary dumps. We solve this problem by removing false red indicators.

First, we keep counters indicating the number of red markers associated with each physical page in memory. For user stack or kernel memory, we monitor new entries added to the TLB. We keep a table of physical pages associated with the identifier of the last process using it. Whenever a new entry corresponding to a kernel address or the user stack is added to the TLB buffer, we check if the page has a new owner and ensure it does not contain any red markers. For the heap, we cannot use this method, as dynamically allocated memory can be shared between processes. Thus, whenever a new buffer is allocated, we ensure its contents do not contain any red regions. We check the counter of red markers associated with the given page and, if necessary, clean the memory.

### 6. Evaluation

#### 6.1 Effectiveness
To test our analysis and signature generation, we launched several real and hand-crafted attacks against Linux on top of Argos. We used the Metasploit framework and Milw0rm for launching attacks. While we tested Prospector with many types of attacks, we illustrate how Prospector handles four representative stack and two heap overflow attacks. These are all real attacks exploiting real services.

**PeerCast Stack Overflow:**
A remote overflow exists in PeerCast v0.1216 and earlier. It fails to perform correct bounds checks on parameters passed in a URL, resulting in a stack-based overflow. An overly long query overwrites EIP stored on the stack. Our analysis engine correctly separated stale data on the stack, encountering a 4-byte discontinuity in the critical tainted memory region. The final signature follows:
```
(application: PeerCast, version: v0.1212,
(type: value_field, name: method, value: GET),
(type: critical_field, name: query),
(type: length, value: 476))
```

**Subversion Stack Overflow:**
There is a remote overflow in Subversion 1.0.2, which fails to bounds check when calling `sscanf()` to decode old-styled date strings. In our experiment, an overly long weekday overwrites EIP stored on the stack. The resulting signature follows:
```
(application: Subversion, version: 1.0.2,
(type: value_field, name: command, value: get-dated-rev),
(type: critical_field, name: weekday),
(type: length, value: 20))
```

**AlsaPlayer Stack Overflow:**
A remote buffer overflow exists in AlsaPlayer 0.99.76 and earlier. A long "Location" field triggers an overflow in the reconnect function in `reader/http/http.c`. Our analysis engine encountered a 4-byte discontinuity in the critical tainted memory region. The final signature follows:
```
(application: AlsaPlayer, version: v0.99.76,
(type: value_field, name: response_header, value: Location),
(type: critical_field, name: Location Header),
(type: length, value: 1032))
```