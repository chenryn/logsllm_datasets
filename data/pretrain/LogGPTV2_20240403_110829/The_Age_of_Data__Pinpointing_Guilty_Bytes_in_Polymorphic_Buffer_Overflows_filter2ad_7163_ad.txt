compare this age stamp with AllocAgeStamp of buf to
conclude that at the time of overﬂow addrA’s value was
stale, so we have just encountered the beginning of the
vulnerable buﬀer.
3. Overﬂow: PFT(addrB) is equal to 1, addrA
contains fresh data; we set FTS(addrB) and unset
PFT(addrB). Since addrA merged with buf together
form an area that conforms to all the properties of a
crucial region (see Observation 1), we will treat addrA
as a part of the tainted buﬀer we are looking for. Note
that we cannot detect that addrA belongs to a distinct
variable. Most compilers (including gcc) allocate stack
memory for a few local variables at once, making it
impossible to see the boundaries between successive
buﬀers. Similarly, on the heap, memory is allocated
for a structure as a whole, rather than for the indi-
vidual ﬁelds separately. Detection: We come across
a byte with FTS set to 1. Regardless of the existence
of the stored age stamp of the memory location below
it, we will conclude that at the moment of overﬂow
addrA’s value was fresh, and so is supposed to belong
to the vulnerable buﬀer. Depending on the application
behavior between the moment of overﬂow and that of
detection, we will end up either adding unrelated taints
to the crucial tainted memory region or spotting a con-
tradiction with Observations 1-3 and reversing to the
last correct byte encountered, addrB. The ﬁrst possi-
bility comes true only if (a) we reach a buﬀer that is
totally ﬁlled with network data, (b) the possible area
between this buﬀer and addrB appears exactly like an
unrelated tainted gap, and (c) additionally, the whole
region containing the buﬀer, the unrelated tainted gap,
and the crucial tainted memory region is in accordance
with Observations 1-3. Note however, that even in this
unlikely case we could only incur false negatives, and
never false positives, since the unrelated tainted buﬀer
needs to be ﬁlled totally.
We have not discussed what happens if the disconti-
nuity in the vulnerable buﬀer reaches the buﬀer’s bot-
tom. In principle, the analysis is analogous to the one
presented above. What is worth noting, is the fact
that we miss part of the crucial tainted memory re-
gion, since the bottom part of the vulnerable buﬀer
gets overwritten.
4.9 Signature Generation
After the preceding steps have identiﬁed the mali-
cious data in memory and generated a one-to-one map-
ping with bytes in the network trace, we generate sig-
natures capable of identifying polymorphic buﬀer over-
ﬂow attacks. Using knowledge about the protocol gov-
erning the malicious traﬃc, we ﬁrst list the protocol
ﬁelds including the crucial tainted memory region. Due
to possible excess of tainted data in rare scenarios de-
scribed in Section 4.8, we include a protocol ﬁeld in a
signature either if it contains the violation address, or
if a cohesive part of it including at least one boundary
can be mapped to the indicated malicious data. We
call these ﬁelds critical.
Note that vulnerable code usually handles speciﬁc
protocol ﬁelds. Thus, attackers wishing to exploit a
certain vulnerability within this code, embed the attack
in these protocol ﬁelds. If values in such ﬁelds contain
more bytes than can be accommodated by the buﬀer,
an overﬂow is sure to occur.
4.9.1 Vulnerabilities rather than attacks
We generate signatures for stack and heap overﬂows
by specifying the vulnerability rather than the attack
itself. We do so by indicating the protocol ﬁelds that
should collectively satisfy a condition.
In particular,
in the current version the signature speciﬁes that the
ﬁelds should collectively have a length L that does not
exceed some maximum, lest they overﬂow important
values in memory.
In the simple case with only one
protocol ﬁeld responsible for the attack, L describes
the distance between the beginning of the protocol ﬁeld
and the position in the network trace that contains
the value that overwrites the target. Otherwise, L is
augmented with the lengths of the remaining critical
ﬁelds. In both cases L is greater or equal to the length
of the vulnerable buﬀer. Signatures can be checked by
a protocol dissector (similar to Ethereal) that yields
the ﬁelds in a ﬂow.
Heap overﬂows founded on malformed length
As mentioned earlier, for heap corruption attempts
that manipulate a length ﬁeld signatures need to re-
late the critical ﬁelds to the length ﬁeld. Thus, after
495495
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:39:37 UTC from IEEE Xplore.  Restrictions apply. 
having determined the crucial tainted memory region
buf of length l, we check in the network trace for the
length value la provided by the attacker. If it is bigger
than l, we specify that a message contains an attack if
the cumulative length of the critical ﬁelds is less than la
with the length ﬁeld greater or equal la. In the second
scenario, with la < l, we must be more cautious, since
the value provided by the attacker does not need to de-
ﬁne the number of bytes, but it could describe amount
of integers or any other structures. For now we de-
scribe the malicious message similarly as in the case of
overﬂows regarding static-length buﬀers, requiring con-
formity of the length value with the actual size of the
protocol ﬁelds. Thus as a value for L we provide the
length ﬁeld. To assure that the signature is correct we
need to verify it by checking whether Prospector spots
an illegal operation if we send a message with criti-
cal ﬁelds ﬁlled with arbitrary bytes in the size slightly
exceeding length field.
If it appears we are wrong,
the only thing we can do is use the semantics of the
protocol for a description of the length ﬁeld.
ﬁelds By
handling multiple
ﬁelds,
Multiple
Prospector ﬁxes and generalizes the signature gener-
ation in Covers [16]. Also, unlike Covers, we do not
require the protocol dissector to match the granularity
in which the application works with protocol mes-
sages. The granularity of the dissector may be larger
or smaller than that of the application. For instance,
the dissector may indicate that a message contains two
ﬁelds F 1 and F 2, while the application copies them
in one in a single buﬀer in one go (essentially treating
them as a single ﬁeld F ).
False positives Observe that whenever an applica-
tion with a given vulnerability receives network data
containing the corresponding critical ﬁelds with a col-
lective length exceeding L bytes, it will not ﬁt in the
application buﬀer, even if it does not contain any mali-
cious data. Consequently passing it to the application
would be inappropriate. In other words, regardless of
content, the signatures will not incur false positives in
practice. However, in an unlikely scenario it is pos-
sible that we cannot correctly determine the crucial
tainted memory region, missing a protocol ﬁeld. This
may happen if the gap in crucial tainted memory re-
gion reaches the beginning of the buﬀer, and contains
an extra protocol ﬁeld not encountered before. Notice
however, that when we analyze a heap corruption at-
tack which overwrote control data (a red region) on
the heap, we will not miss any protocol ﬁelds, since the
memory dump is performed at the moment of corrup-
tion.
496496
Polymorphism By focusing on properties like ﬁeld
length, the signatures are independent of the actual
content of the exploit and hence resilient to polymor-
phism. By focusing on the vulnerabilities, they also
detect attacks with diﬀerent payloads. Such behavior
is quite common, especially if part of the payload is
stored in the same vulnerable buﬀer. As the signatures
generated by Prospector identify vulnerabilities, they
are application speciﬁc. As a result, we may gener-
ate a signature that causes control ﬂow diversion in a
speciﬁc version of an application, but there is no guar-
antee that this is also the case for a diﬀerent version of
the same application. In other words, we need precise
information about the software we want to protect.
Value ﬁelds The critical ﬁelds and the condition
that should be satisﬁed constitute the ﬁrst, unpolished
signature. In practice, however, we may want to char-
acterize more precisely what messages constitute an
attack. For instance, when the URL ﬁeld is the critical
ﬁeld that overﬂows a buﬀer in a Webserver, it may be
that the overﬂow only works on GET requests and not
for POST requests. In our protocol-speciﬁc approach
we therefore add a protocol module that determines
per protocol which ﬁelds may be considered important
(e.g., the request type in HTTP) and should therefore
be added to the signature. We call such ﬁelds value
ﬁelds as explained in the next section.
Before specifying the signatures, however, we em-
phasize that making less speciﬁc signatures is greatly
facilitated when the attack is ﬁngerprinted, i.e., if we
know which bytes contributed to the attack. To con-
tinue the example, we could simply try to see if the
overﬂow also works for POST request, by crafting a
POST message with a similar URL ﬁeld. We expect
much of this process can automated, although we have
not yet attempted to do so.
4.9.2 The ﬁnal form of Prospector’s signatures
Every signature consists of a sequence of value ﬁelds
and critical ﬁelds. A value ﬁeld speciﬁes that a ﬁeld
in the protocol should have this speciﬁc value. For
instance, in the HTTP protocol a value ﬁeld may spec-
ify that the method should be GET for this signature
to match, or it could provide the name of a vulnerable
Windows .dll. Critical ﬁelds, on the other hand, should
collectively satisfy some condition. For instance, they
should collectively have a length that is less/not less
than L. We can also put some boundaries on given
ﬁelds, like in the case of heap overﬂows based on mal-
formed messages. Example signatures can be found in
Section 6.1.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:39:37 UTC from IEEE Xplore.  Restrictions apply. 
4.10 Double-free errors
We added a module to Prospector to make it deal
with double free attacks. Memory managers are some-
times exploited when a programmer makes the mistake
of freeing a pointer that was already freed. Double-
free errors do not share the characteristics of heap-
corruption attacks in the sense that they do not over-
ﬂow a buﬀer, and so when considering the analysis they
require special treatment.
Double-free exploits may overwrite any location, re-
sembling the complex heap corruption attacks. Sim-
ilarly, it is highly probable that when a violation is
detected, the memory region that was holding the vul-
nerable buﬀer is reused and contains unrelated data.
To deal with this issue, whenever free (or realloc) is
called, we check for a potential double free error, as-
suring that the given memory location indeed points
to the beginning of an allocated buﬀer. Otherwise we
store the adjacent tainted memory region for possible
later use.
5 Implementation details
In this section, we discuss main aspects of our im-
plementation of Prospector on Linux using an x86 em-
ulator based on Qemu.
5.1 Prospector tagging
To deal with memory tagging Argos introduces a
structure similar to page directories in Linux consisting
of pagemaps and bytemaps. A pagemap is an array,
where each entry corresponds to a bytemap keeping
tags for a particular physical page. Here Argos stores
all tags on the guest operating system memory, e.g.,
the network oﬀsets that serve as taint tags. Initially
only the pagemap is allocated. Bytemaps are added
on demand, when tainted data is copied to a particular
physical page for the ﬁrst time. The network oﬀset
tags associated with each byte are 32 bits. To support
signature generation we doubled the size of the tag,
yielding an additional 32 bits. Of these 32 bits, we
designate one bit for the PFT and FTS indicators, one
bit for the red marker denoting critical data on the
heap, and the remaining 29 bits for the age stamp.
We emphasize that age stamps serve only to compare
tainted data, so they need only be incremented if a
given value was used as a tag to mark tainted data. As
most functions and indeed most processes never touch
such data, the age stamp may remain untouched. As
a result, the age stamp will wrap much more slowly.
Qemu translates all guest instructions to host native
instructions by dynamically linking blocks of functions
that implement the corresponding operations. With
the aim of tracking tainted data being copied to mem-
ory we instrument the store function to perform the
operations of keeping track of age stamps and setting
the extra indicators (PFT and FTS) described in Sec-
tion 4.5. Here we also check whether the destination
memory location is not marked as red (which indicates
an overﬂow and perhaps a complex heap corruption
attack, and therefore leads to a dump of the adjacent
tainted memory).
5.2 Stale red markers
As mentioned earlier, to handle complex heap cor-
ruption attacks, we mark bytes surrounding allocated
chunks of memory as red.
If tainted data is written
to a red region, this indicates illegal operations which
trigger bookkeeping: the memory region is dumped.
As we cannot rely on applications releasing all allo-
cated memory, we may end up with stale red markers,
possibly leading to unnecessary dumps of memory re-
gions. We describe here how we solve this problem by
removing false red indicators.
First of all, we keep counters indicating the number
of red markers associated with each physical page in
memory. To deal with the problem in the case of pages
for the user stack or kernel memory, we monitor new
entries added to the TLB as follows. We keep a table of
physical pages associated with the identiﬁer of the last
process using it. Whenever a new entry correspond-
ing to a kernel address or the user stack is added to
the TLB buﬀer, we check whether the page has a new
owner, and if so, we make sure that it does not contain
any red markers. If so, we know that neither the user
stack nor kernel memory contains the markers.
For the heap we cannot use this method, since
dynamically allocated memory can easily be shared
between processes, which could remove our markers.
Thus, whenever a new buﬀer is allocated, we assure
that its contents do not contain any red regions. First,
we check the counter of red markers associated with
the given page and, if necessary, clean the memory.
6 Evaluation
We evaluate Prospector along two dimensions: ef-
fectiveness and performance. While performance is not
critical for a honeypot, it needs to be fast enough to
generate signatures in a timely fashion.
497497
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:39:37 UTC from IEEE Xplore.  Restrictions apply. 
6.1 Eﬀectiveness
To test our analysis and signature generation, we
launched a number of real attacks (as well as hand-
crafted ones) against Linux on top of Argos. We
have not experimented with Microsoft Windows since
a small part of the functionality in Prospector is OS-
i.e., malloc and free function interposition
speciﬁc,
and (partly) process switch monitoring. For launch-
ing attacks, we used the Metasploit framework2 and
Milw0rm3. While we have tested Prospector with
many types of attack, in this section we illustrate how
Prospector deals with four representative stack- and
two heap overﬂow attacks. These are all real attacks,
exploiting real services.
PeerCast Stack Overﬂow A remote overﬂow ex-
ists in PeerCast v0.1216 and earlier [29].
It fails to
perform correct bounds checks on parameters passed in
a URL, resulting in a stack-based overﬂow. An overly
long query overwrites EIP stored on the stack. Our
analysis engine correctly separated stale data on the
stack. A 4-byte discontinuity in the critical tainted
memory region was encountered. The ﬁnal signature
follows:
( a p p l i c a t i o n : PeerCast , v e r s i o n : v0 . 1 2 1 2 ,
( t y p e : v a l u e f i e l d , name : method , v a l u e : GET) ,
( t y p e :
( t y p e :
f i e l d , name : q u e r y ) ,
l e n g t h , v a l u e : 4 7 6 ) ) .
c r i t i c a l
c r i t i c a l
Subversion Stack Overﬂow There is a remote
overﬂow in Subversion 1.0.2 [22] which fails to bounds
check when calling sscanf() to decode old-styled date
strings.
In our experiment, an overly long week day
overwrites EIP stored on the stack. The resulting sig-
nature follows:
( a p p l i c a t i o n : S u b v e r s i o n , v e r s i o n : 1 . 0 . 2 ,
( t y p e : v a l u e f i e l d , name : command ,
v a l u e : g e t−dated−r e v ) ,
( t y p e :
( t y p e :
f i e l d , name : week day ) ,
l e n g t h , v a l u e : 2 0 ) ) .
c r i t i c a l
c r i t i c a l
AlsaPlayer Stack Overﬂow A remote buﬀer over-
ﬂow exists in AlsaPlayer 0.99.76 and earlier [18]. A
long “Location” ﬁeld triggers an overﬂow in the recon-
nect function in reader/http/http.c. Our analysis en-
gine encountered a 4-byte discontinuity in the critical
tainted memory region. The ﬁnal signature follows:
( a p p l i c a t i o n : A l s a P l a y e r , v e r s i o n : v . 0 . 9 9 . 7 6 ,
( t y p e : v a l u e f i e l d , name :
r e s p o n s e h e ad e r ,
v a l u e : L o c a t i o n ) ,
( t y p e :
( t y p e :
c r i t i c a l
c r i t i c a l
f i e l d , name : L o c a t i o n Header ) ,
l e n g t h , v a l u e : 1 0 3 2 ) ) .
2The Metasploit Project, http://www.metasploit.com.
3Milw0rm, www.milw0rm.com
498498