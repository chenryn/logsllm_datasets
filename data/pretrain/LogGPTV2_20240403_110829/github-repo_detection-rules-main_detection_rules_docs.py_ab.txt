        summary_header = textwrap.dedent(f"""
        [[prebuilt-rule-{self.base_name}-prebuilt-rules-{self.base_name}-summary]]
        [role="xpack"]
        == Update v{self.registry_version_str}
        This section lists all updates associated with version {self.registry_version_str} of the Fleet integration *Prebuilt Security Detection Rules*.
        [width="100%",options="header"]
        |==============================================
        |Rule |Description |Status |Version
        """).lstrip()  # noqa: E501
        rule_entries = []
        for rule in self.included_rules:
            title_name = name_to_title(rule.name)
            status = 'new' if rule.id in self.new_rules else 'update' if rule.id in self.updated_rules else 'deprecated'
            description = rule.contents.to_api_format()['description']
            version = rule.contents.autobumped_version
            rule_entries.append(f'|> '
                                f'| {description} | {status} | {version} \n')
        summary_lines = [summary_header] + rule_entries + ['|==============================================']
        summary_str = '\n'.join(summary_lines) + '\n'
        summary.write_text(summary_str)
    def generate_rule_details(self):
        for rule in self.included_rules:
            rule_detail = IntegrationRuleDetail(rule.id, rule.contents.to_api_format(), {}, self.base_name)
            rule_path = self.package_directory / f'{self.prebuilt_rule_base}-{name_to_title(rule.name)}.asciidoc'
            rule_path.write_text(rule_detail.generate())
    def generate_manual_updates(self):
        """
        Generate manual updates for prebuilt rules downloadable updates and index.
        """
        updates = {}
        # Update downloadable rule updates entry
        today = datetime.today().strftime('%d %b %Y')
        updates['downloadable-updates.asciidoc'] = {
            'table_entry': (
                f'|> | {today} | {len(self.new_rules)} | '
                f'{len(self.updated_rules)} | '
            ),
            'table_include': (
                f'include::downloadable-packages/{self.base_name}/'
                f'prebuilt-rules-{self.base_name}-summary.asciidoc[leveloffset=+1]'
            )
        }
        updates['index.asciidoc'] = {
            'index_include': (
                f'include::detections/prebuilt-rules/downloadable-packages/{self.base_name}/'
                f'prebuilt-rules-{self.base_name}-appendix.asciidoc[]'
            )
        }
        # Add index.asciidoc:index_include in docs/index.asciidoc
        docs_index = self.package_directory.parent.parent.parent.parent / 'index.asciidoc'
        docs_index.write_text(docs_index.read_text() + '\n' + updates['index.asciidoc']['index_include'] + '\n')
        # Add table_entry to docs/detections/prebuilt-rules/prebuilt-rules-downloadable-updates.asciidoc
        downloadable_updates = self.package_directory.parent.parent / 'prebuilt-rules-downloadable-updates.asciidoc'
        new_content = updates['downloadable-updates.asciidoc']['table_entry'] + '\n' + self.update_message
        self.add_content_to_table_top(downloadable_updates, new_content)
        # Add table_include to/docs/detections/prebuilt-rules/prebuilt-rules-downloadable-updates.asciidoc
        downloadable_updates.write_text(downloadable_updates.read_text() +  # noqa: W504
                                        updates['downloadable-updates.asciidoc']['table_include'] + '\n')
    def add_content_to_table_top(self, file_path: Path, new_content: str):
        """Insert content at the top of a Markdown table right after the specified header."""
        file_contents = file_path.read_text()
        # Find the header in the file
        header = '|Update version |Date | New rules | Updated rules | Notes\n'
        header_index = file_contents.find(header)
        if header_index == -1:
            raise ValueError("Header not found in the file")
        # Calculate the position to insert new content
        insert_position = header_index + len(header)
        # Insert the new content at the insert_position
        updated_contents = file_contents[:insert_position] + f"\n{new_content}\n" + file_contents[insert_position:]
        # Write the updated contents back to the file
        file_path.write_text(updated_contents)
    def generate(self) -> Path:
        self.generate_appendix()
        self.generate_summary()
        self.generate_rule_details()
        self.generate_manual_updates()
        return self.package_directory
class IntegrationRuleDetail:
    """Rule detail page generation."""
    def __init__(self, rule_id: str, rule: dict, changelog: Dict[str, dict], package_str: str):
        self.rule_id = rule_id
        self.rule = rule
        self.changelog = changelog
        self.package = package_str
        self.rule_title = f'prebuilt-rule-{self.package}-{name_to_title(self.rule["name"])}'
        # set some defaults
        self.rule.setdefault('max_signals', 100)
        self.rule.setdefault('interval', '5m')
    def generate(self) -> str:
        """Generate the rule detail page."""
        page = [
            AsciiDoc.inline_anchor(self.rule_title),
            AsciiDoc.title(3, self.rule['name']),
            '',
            self.rule['description'],
            '',
            self.metadata_str(),
            ''
        ]
        if 'note' in self.rule:
            page.extend([self.guide_str(), ''])
        if 'query' in self.rule:
            page.extend([self.query_str(), ''])
        if 'threat' in self.rule:
            page.extend([self.threat_mapping_str(), ''])
        return '\n'.join(page)
    def metadata_str(self) -> str:
        fields = {
            'type': 'Rule type',
            'index': 'Rule indices',
            'severity': 'Severity',
            'risk_score': 'Risk score',
            'interval': 'Runs every',
            'from': 'Searches indices from',
            'max_signals': 'Maximum alerts per execution',
            'references': 'References',
            'tags': 'Tags',
            'version': 'Version',
            'author': 'Rule authors',
            'license': 'Rule license'
        }
        values = []
        for field, friendly_name in fields.items():
            value = self.rule.get(field) or self.changelog.get(field)
            if isinstance(value, list):
                str_value = f'\n\n{AsciiDoc.bulleted_list(value)}'
            else:
                str_value = str(value)
            if field == 'from':
                str_value += ' ({ref}/common-options.html#date-math[Date Math format], see also >)'
            values.extend([AsciiDoc.bold_kv(friendly_name, str_value), ''])
        return '\n'.join(values)
    def guide_str(self) -> str:
        return f'{AsciiDoc.title(4, "Investigation guide")}\n\n\n{AsciiDoc.code(self.rule["note"], code="markdown")}'
    def query_str(self) -> str:
        # TODO: code=sql - would require updating existing
        return f'{AsciiDoc.title(4, "Rule query")}\n\n\n{AsciiDoc.code(self.rule["query"])}'
    def threat_mapping_str(self) -> str:
        values = [AsciiDoc.bold_kv('Framework', 'MITRE ATT&CK^TM^'), '']
        for entry in self.rule['threat']:
            tactic = entry['tactic']
            entry_values = [
                AsciiDoc.bulleted('Tactic:'),
                AsciiDoc.bulleted(f'Name: {tactic["name"]}', depth=2),
                AsciiDoc.bulleted(f'ID: {tactic["id"]}', depth=2),
                AsciiDoc.bulleted(f'Reference URL: {tactic["reference"]}', depth=2)
            ]
            techniques = entry.get('technique', [])
            for technique in techniques:
                entry_values.extend([
                    AsciiDoc.bulleted('Technique:'),
                    AsciiDoc.bulleted(f'Name: {technique["name"]}', depth=2),
                    AsciiDoc.bulleted(f'ID: {technique["id"]}', depth=2),
                    AsciiDoc.bulleted(f'Reference URL: {technique["reference"]}', depth=2)
                ])
                subtechniques = technique.get('subtechnique', [])
                for subtechnique in subtechniques:
                    entry_values.extend([
                        AsciiDoc.bulleted('Sub-technique:'),
                        AsciiDoc.bulleted(f'Name: {subtechnique["name"]}', depth=2),
                        AsciiDoc.bulleted(f'ID: {subtechnique["id"]}', depth=2),
                        AsciiDoc.bulleted(f'Reference URL: {subtechnique["reference"]}', depth=2)
                    ])
            values.extend(entry_values)
        return '\n'.join(values)
def name_to_title(name: str) -> str:
    """Convert a rule name to tile."""
    initial = re.sub(r'[^\w]|_', r'-', name.lower().strip())
    return re.sub(r'-{2,}', '-', initial).strip('-')
@dataclass
class UpdateEntry:
    """A class schema for downloadable update entries."""
    update_version: str
    date: str
    new_rules: int
    updated_rules: int
    note: str
    url: str
@dataclass
class DownloadableUpdates:
    """A class for managing downloadable updates."""
    packages: List[UpdateEntry]
    @classmethod
    def load_updates(cls):
        """Load the package."""
        prebuilt = load_etc_dump("downloadable_updates.json")
        packages = [UpdateEntry(**entry) for entry in prebuilt['packages']]
        return cls(packages)
    def save_updates(self):
        """Save the package."""
        sorted_package = sorted(self.packages, key=lambda entry: Version.parse(entry.update_version), reverse=True)
        data = {'packages': [asdict(entry) for entry in sorted_package]}
        save_etc_dump(data, "downloadable_updates.json")
    def add_entry(self, entry: UpdateEntry, overwrite: bool = False):
        """Add an entry to the package."""
        existing_entry_index = -1
        for index, existing_entry in enumerate(self.packages):
            if existing_entry.update_version == entry.update_version:
                if not overwrite:
                    raise ValueError(f"Update version {entry.update_version} already exists.")
                existing_entry_index = index
                break
        if existing_entry_index >= 0:
            self.packages[existing_entry_index] = entry
        else:
            self.packages.append(entry)
class MDX:
    """A class for generating Markdown content."""
    @classmethod
    def bold(cls, value: str):
        """Return a bold str in Markdown."""
        return f'**{value}**'
    @classmethod
    def bold_kv(cls, key: str, value: str):
        """Return a bold key-value pair in Markdown."""
        return f'**{key}**: {value}'
    @classmethod
    def description_list(cls, value: Dict[str, str], linesep='\n\n'):
        """Create a description list in Markdown."""
        return f'{linesep}'.join(f'**{k}**:\n\n{v}' for k, v in value.items())
    @classmethod
    def bulleted(cls, value: str, depth=1):
        """Create a bulleted list item with a specified depth."""
        return f'{"  " * (depth - 1)}* {value}'
    @classmethod
    def bulleted_list(cls, values: Iterable):
        """Create a bulleted list from an iterable."""
        return '\n* ' + '\n* '.join(values)
    @classmethod
    def code(cls, value: str, language='js'):
        """Return a code block with the specified language."""
        return f"```{language}\n{value}```"
    @classmethod
    def title(cls, depth: int, value: str):
        """Create a title with the specified depth."""
        return f'{"#" * depth} {value}'
    @classmethod
    def inline_anchor(cls, value: str):
        """Create an inline anchor with the specified value."""
        return f''
    @classmethod
    def table(cls, data: dict) -> str:
        """Create a table from a dictionary."""
        entries = [f'| {k} | {v}' for k, v in data.items()]
        table = ['|---|---|'] + entries
        return '\n'.join(table)
class IntegrationSecurityDocsMDX:
    """Generate docs for prebuilt rules in Elastic documentation using MDX."""
    def __init__(self, release_version: str, directory: Path, overwrite: bool = False,
                 historical_package: Optional[Dict[str, dict]] =
                 None, new_package: Optional[Dict[str, TOMLRule]] = None,
                 note: Optional[str] = "Rule Updates."):
        self.historical_package = historical_package
        self.new_package = new_package
        self.rule_changes = self.get_rule_changes()
        self.included_rules = list(itertools.chain(self.rule_changes["new"],
                                                   self.rule_changes["updated"],
                                                   self.rule_changes["deprecated"]))
        self.release_version_str, self.base_name, self.prebuilt_rule_base = self.parse_release(release_version)
        self.package_directory = directory / self.base_name
        self.overwrite = overwrite
        self.note = note
        if overwrite:
            shutil.rmtree(self.package_directory, ignore_errors=True)
        self.package_directory.mkdir(parents=True, exist_ok=overwrite)