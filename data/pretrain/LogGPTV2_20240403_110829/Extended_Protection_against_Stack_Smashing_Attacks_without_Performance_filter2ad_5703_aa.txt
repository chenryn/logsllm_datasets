title:Extended Protection against Stack Smashing Attacks without Performance
Loss
author:Yves Younan and
Davide Pozza and
Frank Piessens and
Wouter Joosen
Extended protection against stack smashing attacks without performance loss
Yves Younan1
Davide Pozza2
Frank Piessens1
Wouter Joosen1
1DistriNet, Dept. of Computer Science
Katholieke Universiteit Leuven
Celestijnenlaan 200a, B3001 Leuven, Belgium
c.so Duca degli Abruzzi 24, I10129 Torino, Italy
E-mail: 1{yvesy,frank,wouter}@cs.kuleuven.ac.be PI:EMAIL
2Dip. di Automatica e Informatica
Politecnico di Torino
Abstract
In this paper we present an efﬁcient countermeasure
against stack smashing attacks. Our countermeasure does
not rely on secret values (such as canaries) and protects
against attacks that are not addressed by state-of-the-art
countermeasures. Our technique splits the standard stack
into multiple stacks. The allocation of data types to one of
the stacks is based on the chances that a speciﬁc data ele-
ment is either a target of attacks and/or an attack vector. We
have implemented our solution in a C-compiler for Linux.
The evaluation shows that the overhead of using our coun-
termeasure is negligible.
1
Introduction
Buffer overﬂow vulnerabilities are a signiﬁcant threat to
the security of a system. Most of the existing buffer over-
ﬂow vulnerabilities are located on the stack, and the most
common way for attackers to exploit such a buffer overﬂow
is to use it to modify the return address of a function. By
making the return address point to code they injected into
the program’s memory as data, they can force the program
to execute any instructions with the privilege level of the
program being attacked [2].
According to the NIST’s National Vulnerability
Database [22], 584 buffer overﬂow vulnerabilities were re-
ported in 2005, making up 12% of the 4852 vulnerabilities
reported that year. In 2004 the amount of reported buffer
overﬂow vulnerabilities was 341 (14% of 2352). This
means that while the amount of reported vulnerabilities
has almost doubled in the past year buffer overﬂows still
remain an important source of attack. 418 of the 584 buffer
overﬂows reported last year had a high severity rating, this
makes up 21% of the 1923 vulnerabilities rated with a high
severity level. They also make up 42% of the vulnerabilities
which allow an attacker to gain administrator access to a
system.
Stack-based buffer overﬂows have traditionally made up
the largest bulk of these buffer overﬂows, and are the ones
most easily exploited by attackers. Many countermeasures
have been devised that try to prevent code injection attacks
[33]. Several approaches attempt to solve the vulnerabil-
ities entirely [17, 4, 15, 23, 24, 32], however, they gener-
ally suffer from a substantial performance impact. Other
types of countermeasures have been developed with bet-
ter performance results that speciﬁcally target stack-based
buffer overﬂows. These countermeasures can be divided
into four categories. The ﬁrst category [12, 13] offers pro-
tection by using a random value, which must be kept secret
from an attacker, if the program leaks this information (e.g.
through a ’buffer over-read’ or a format string vulnerability)
the protection can be bypassed entirely. A second category
[29, 10, 5, 31] copies the return address and the saved frame
pointer, and compares or replaces them when the function
returns. While this protects against the return address being
overwritten, it does not protect other information stored on
the stack (e.g. pointers) which could be used by an attacker
to execute arbitrary code. A third category tries to correct
the library functions that are typically the source of an over-
ﬂow (e.g. strcpy) [5], however, this does not protect against
buffer overﬂows which could occur at a different place in
the program (e.g. an overﬂow caused by a loop). A fourth
category tries to make attacks harder by modifying the op-
erating system [26, 28, 6, 16, 7] or hardware [31, 20].
In this paper we present a new approach for protecting
against stack based buffer overﬂows by separating the stack
into multiple stacks. This separation is done according to
the type data stored on the stack. Each stack is protected
from writing into the other stack by a guard page1. Our
countermeasure offers equal or better performance results
than the countermeasures in the categories discussed earlier
and does not suffer from some of their weaknesses: it does
not rely on random numbers and protects pointers as well as
1A guard page is page of memory where no permission to read or to
write has been set. Any access to such a page will cause the program to
terminate.
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006the return address and frame pointer. In [34] we describe a
more global approach to separating control ﬂow data from
regular data and in [35] we discuss applying it to the heap
to separate the metadata from the regular data.
The paper is structured as follows: section 2 brieﬂy de-
scribes the technical details of the stack-based buffer over-
ﬂow, some representative countermeasures and their weak-
nesses. Section 3 discusses the design and implementation
of our countermeasure. Section 4 evaluates our counter-
measure in terms of performance and security. In section
5 we discuss limitations and possible improvements for our
approach and describe ongoing work. Section 6 compares
our approach to existing countermeasures, while section 7
presents our conclusions.
2 Stack-based buffer overﬂows
Buffer overﬂows are the result of an out of bounds write
operation on an array. In this section we brieﬂy recap how
an attacker could exploit such a buffer overﬂow on an array
that is allocated on the stack.
When an array is declared in C, space is reserved for
it and the array is manipulated by means of a pointer to
the ﬁrst byte. At run-time no information about the array
size is available and most C-compilers will generate code
that will allow a program to copy data beyond the end of
an array, overwriting adjacent memory space. If interesting
information is stored somewhere in such adjacent memory
space, it could be possible for an attacker to overwrite it.
On the stack this is usually the case: it stores the addresses
to resume execution at after a function call has completed
its execution, i.e. the return address.
For example, on the IA32-architecture the stack grows
down (i.e. newer function call have their variables stored
at lower address than older ones). The stack is divided
into stackframes. Each stackframe contains information
about the current function: arguments to a function that was
called, registers whose values must be stored across func-
tion calls, local variables, the saved frame pointer and the
return address. An array allocated on the stack will usu-
ally be contained in the section of local variables of a stack-
frame. If a program copies data past the end of this array
it will overwrite anything else stored before it and thus will
overwrite other data stored on the stack, like the return ad-
dress.
Several countermeasures were designed against this at-
tack: ranging from bounds checkers to operating system
changes. Many of these are discussed in section 6. Here, we
discuss two of the mostly used countermeasures that protect
against this attack.
StackGuard [12] was designed to be an efﬁcient protec-
tion against this type of attack: it protects the return address
by placing a randomly generated value (called a canary) be-
Figure 1. Indirect pointer overwriting attack
tween the saved frame pointer and the local variables on the
stack. This canary would be generated at program start up
and would be stored in a global variable. When a function
is called, the countermeasure would put a copy of the ca-
nary onto the stack after the saved frame pointer. Before
the function returns, the canary stored on the stack will be
compared to the global variable, if they differ, the program
will be terminated. If an attacker would want to overwrite
the return address, he would have to know the canary, so he
could write past it. A signiﬁcant problem with this approach
is the fact that the program can not leak the canary, if it did,
the attacker could just write the correct value back on the
stack and the protection would be bypassed.
Figure 1 depicts the stack layout of a program protected
with StackGuard and illustrates an attack called indirect
pointer overwriting [8]. This attack consists of exploiting
a local buffer to overwrite a pointer p1 stored in the same
stackframe and to make the pointer refer to the return ad-
dress. When the pointer is later dereferenced for writing, it
will overwrite the return address rather than the value it was
originally pointing to. If attackers can control the value that
the program would write via the pointer, they can modify
the return address to point to their injected code.
ProPolice [13] attempts to protect against this type of at-
tack by reorganizing the local variables stored in each stack-
frame: all arrays are stored before all other local variables
in each stackframe. This prevents an attacker from using an
overﬂow to overwrite a pointer and using an indirect pointer
Return address f0Saved frame pointer f0Local variables f0Arguments f1Return address f1Saved frame pointer f1BufferInjected codeHigher addressesLower addressesLocal variables f1  f0:int i1...call f1...  f1:int *p1;char buffer[]...overﬂow()*p1 = ......Pointer p112Canary f1Canary f0CodeProceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006overwrite to bypass the protection.
However, as mentioned earlier, this type of protection
has some limitations:
if a program leaks the canary (e.g.
through a format string vulnerability or a ’buffer over-
read’), the protection can be bypassed completely. Another
point of attack would be to use a buffer overﬂow to over-
write an array of pointers in a program or to use a structure
that contains a buffer but no pointers to overwrite another
structure that does contain such a pointer. It will also not
protect against memory that is allocated with the alloca2
call, if an overﬂow occurs in memory allocated using this
call, it could be used to perform an indirect pointer over-
write.
In the next section we discuss our approach which aims
to better protect against these type of attacks, while still pre-
serving or improving the performance of the previously de-
scribed countermeasures.
3 The multiple stacks countermeasure to
protect against buffer overﬂow vulnerabil-
ities
This section describes the approach of the multiple
stacks countermeasure by describing the basic concepts be-
hind its design, as well as how it was implemented.
3.1 Approach
The stack stores several kinds of data: some data is re-
lated to control ﬂow, such as stored registers, but it also
stores regular data like the local variables of a function.
However, this regular type of data can sometimes also be
used by an attacker to inject code if it is modiﬁed (e.g.
pointers could allow indirect pointer overwriting). Other
data could be used to perform an attack if it is misused.
In this section we describe an approach which separates
the stack into multiple stacks based on two criteria: how
valuable data is to an attacker when it is a target for attack
and the risk of the data being used as an attack vector (i.e.
misused to perform an attack). These properties are not mu-
tually exclusive: some data could be both a target and a vec-
tor. So, we must evaluate all possible data types and place
them in categories according the risk of being an attack vec-
tor and the effective value.
We can assign data a ranking based on its risk of being an
attack vector and the value it has as a target. Data can have
a low, medium, or high ranking for both properties (e.g. the
return address has high target value because attackers gen-
erally want to overwrite it, and a low vector value because it
2alloca is used to dynamically allocate space on the stack, it behaves in
much the same way as malloc call, except that the memory it allocates will
be released when the function returns.
Table 1. Attack vector versus attack target
categories
Vector/Target
Low
Medium
High
Low Medium High
cat. 3
cat. 1
cat. 2
cat. 5
cat. 5
cat. 6
cat. 2
cat. 3
cat. 4
can’t be attacked directly). Based on these rankings we can
divide the data into different categories. This is illustrated
in Table 1, where we use six categories.
In principle, one could always argue for other categories
or combinations. However, we decided on limiting these
categories to six based on how we perceive the combined
risk/value resulting from the combination of attack vector
risk and attack target value. We believe that the presented
set of six categories is a strong trade-off. Our main objective
is to show that a multiple stacks countermeasure (based on
several categories) can be supported efﬁciently.
Category one contains highly valuable data and there is
only a low risk of it being used as an attack vector. This
is the main category that we wish to protect from buffer
overﬂows.
Category two represents two cells from the summary ta-
ble: data which has a low risk of being an attack vector, but
a medium target value, and data which has a medium risk of
being a vector, but is also a high-value target. We consider
both these two types of data to have a comparable combined
risk/value.
Category three contains data which has a medium risk of
being a vector, but is also only a medium-value target. We
have supplemented it with data which has the least impor-
tance in our countermeasure: low on vector-risk and low on
target-value. Mainly, it does not matter where this type of
information is placed since it needs no protection and can’t
be used to attack. As such, we decided on placing it in a
middle category.
Category four contains data which has a high risk of be-
ing an attack vector, but which is also a medium-value tar-
get. So, there is some need for protection.
Category ﬁve contains data which has a high or medium
risk of being a vector, but has only low value as a target. It
contains both high and medium risk data, because the data
needs to be isolated from higher-value targets, but does not
need to be protected.
Category six is the hardest data to protect. It is both a
high-value target and has a high risk of being used as an
attack vector. We place it in a separate category because it
needs both extra protection and needs to be protected from.
We can now decide what information to put in each of
these categories by assigning them rankings of their target-
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006value and attack vector-risk.
The Return address is the most obvious target for attack:
if an attacker can modify it, he can easily execute in-
jected code. However, an attacker does not directly
control the return address, so it is an unlikely vector.
• Attack target: High; Attack vector: Low
Other saved registers on the stack, like the saved frame
pointer and the caller-save and callee-save registers
could be used to attack a program [19]. So, all these
are valuable targets, but generally an attacker can not
use them to mount an attack.
• Attack target: High; Attack vector: Low
Pointers can contain reference functions or data. If a func-
tion pointer is overwritten, an attacker can directly ex-
ecute inject code. If a data pointer is overwritten, an
attack could use indirect pointer overwriting, so these
are very likely targets for attacks. However, they can
not be used as an attack vector, unless they can modi-
ﬁed by an attacker.
• Attack target: High; Attack vector: Low
Integers can sometimes be used to store pointers or in-
dexes to pointer operations, so they can be considered
attack targets. They are not attack vectors in the sense
that they could directly overwrite other information on
the stack.
• Attack target: Medium; Attack vector: Low
Floating types are not valuable targets because they will
not generally contain information that could lead to
code injection (either directly or indirectly). They are
also unlikely attack vectors because they can’t be used
directly to overwrite adjacent memory locations.
• Attack target: Low; Attack vector: Low
Arrays are assigned different
target values and attack
vector-risks depending on their type:
Arrays of pointers are valuable targets, because they
contain pointers, and as such could be used to
perform an indirect pointer overwrite, if modi-
ﬁed. However, there is also a chance that an op-
eration on an array of pointers could lead to writ-
ing outside the bounds of the array. Thus, there is
a risk of it being used as an attack vector as well.
However, these type of arrays are not generally
used with functions that are prone to buffer over-
ﬂows (e.g. strcpy and related functions), so this
risk is not as high as with arrays of characters.
• Attack target: High; Attack vector: Medium
Arrays of characters are the traditional arrays that
are most vulnerable to buffer overﬂows. The risk
of them being used as an attack vector is high,