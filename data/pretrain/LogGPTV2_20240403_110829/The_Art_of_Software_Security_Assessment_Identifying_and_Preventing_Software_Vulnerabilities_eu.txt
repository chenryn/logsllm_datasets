An attacker could submit a _target parameter like this: 
../../../WEB-XML/web.xml%00 
This parameter causes the JSP interpreter to include the web.xml configuration file. 
File Uploading 
File uploading vulnerabilities often catch developers by surprise. Many Web 
applications allow users to upload a file to the Web server, and these files are often 
stored in a directory in the Web tree. If you can manipulate the uploaded filename so 
that it has an extension mapped to a scripting language handler, you might be able to 
run arbitrary code on the Web server. 
Say you're black box testing a financial application that allows users to upload a 
transaction file to the Web server, which then parses and transfers the file to an 
application server. Users couldn't control the filename, but they might be able to 
control the file extension. With a little bit of detective work, you could determine that 
the temporary directory holding the file is located in the Web tree. After the 
groundwork has been laid, the attack is straightforward: A quick ASP script takes a 
command from the query string and runs it through a command shell. The script is 
uploaded to the Web system as a transaction file with an extension of .asp. The file is 
saved to a temporary directory with a random filename. Then the following request is 
made directly to the temporary file: 
https://www.test.com/uploads/apptemp/JASD1232.asp?cmd= 
The temporary file is run through the ASP handler, and the specified command runs 
on the Web server. Also, think about server-side includes in the context of file 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1077 
uploading. If users can upload or edit an .shtml file, they can insert SSI tags that 
could cause the Web server to read files and run commands of their choosing. 
XML Injection 
XML injection refers to inserting XML metacharacters into XML data with the intent 
of manipulating the meaning of an XML document or attempting to exploit the XML 
parser. This problem often happens in multitier Web applications in which one tier 
communicates with another by using XML documents (such as Web Services). If the 
document is constructed so that it doesn't use user-supplied input securely, attackers 
might be able to perform multiple attacks. This kind of issue can also arise when an 
XML document is uploaded from the local machine to the Web application as part of 
normal processing. 
In general, when an application constructs an XML document, it can do it by using a 
programmatic API, such as the W3C Document Object Model (DOM), or simply by 
using normal text-manipulation functions. As a reviewer, you need to test any APIs 
the application developer uses to make sure user-supplied input is escaped correctly. 
Programmatic APIs are usually safe. However, if you see text-manipulation functions 
used to construct XML documents, you should pay close attention. For example, take 
a look at the following Visual Basic code: 
strAuthRequest = _ 
  "" & _ 
  "" & Login & "" & _ 
  "" & Password & "" & _ 
  "" 
This code has an authentication request formed by using text concatenation. If users 
have control of the Login and Password variables, they can place XML metacharacters 
such as  in the data and potentially alter the request's meaning. 
Attackers have a few options for leveraging an XML injection vulnerability. The most 
straightforward option is to modify the request so that it performs something that 
security mechanisms would otherwise prevent. Another approach is attacking the 
XML parser itself. An XML parser written in C has the potential for buffer overflows or 
other types of problems. XML parsers have also been reported to be vulnerable to 
multiple denial-of-service conditions, which could be triggered through an injection 
vector. 
Another general form of attack is the XML external entities (XXE) attack. If 
attackers can submit a document to the target's XML parser, they can try to make the 
XML parser attempt to retrieve a remote XML document. The easiest way to initiate 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1078 
this attack is to provide an XML document with a DOCTYPE tag that references the URL 
of interest. For example, attackers could submit the following XML document: 
If the XML parser is configured to perform schema validation, it attempts to connect 
to 1.2.3.4 on port 1234 and issue a GET request. This request could cause the XML 
parser to attempt to connect to various ports from the target server's perspective. 
Attackers might be able to use these connection attempts for port scanning, 
depending on the parser's timeout behavior. They could also attempt to read in files 
from the file system or network, if they can devise a mechanism for viewing the 
results of the parsing error. 
To understand why this can be an issue, consider an XML parser attempting to resolve 
a file:// URL via Windows networking. This connection attempt causes the server to 
try to authenticate and, therefore, expose itself to an SMB proxy attack from the 
attacker's machine. Another potential exploitation vector is trying to make outgoing 
connections that could create holes in stateful firewalls. For example, attackers could 
instruct the XML parser to attempt to connect to port 21 on their machine. If the 
firewall allows the outgoing FTP connection and attackers can get the XML parser to 
issue the PORT command, the stateful firewall might interpret the command as 
signifying a legitimate FTP data connection and open a corresponding connection 
back through the firewall. 
XPath Injection 
XML Path (XPath) Language is a query language that applications can use to 
programmatically address parts of XML documents. It's often used to extract 
information from an XML document. If the XPath query is dynamically constructed 
based on user input, extracted information could be taken from unintended parts of 
the document. The most common cause of XPath injection in Web applications is a 
large XML configuration file containing instructions for page transitions or page 
flowsoften used by the Controller component of an MVC application. The Web 
application, after completing a task, looks up the next page to be displayed in this 
configuration file, often using user-supplied information as part of the query. The Web 
application might use a query like this: 
$XPathquery = "/app1/chicago/".$language."/nextaction"; 
If users can supply a component of the query, they can use ../ characters and XPath 
query specifications to form something akin to a directory traversal attack. For 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1079 
instance, the following value for $language backs up two components in the document, 
and then chooses the first child component, that child's second component, and that 
child's first child component: 
= 
If you discover an XPath injection vulnerability during a review, you can use these 
position components to iterate through each possible result in the document. For 
example, a vulnerable query component ending with the NUL byte ('\0') could allow 
an attacker to fully explore the XML document without worrying about the information 
being appended to the XPath query. 
Cross-Site Scripting 
Cross-site scripting (XSS) has acquired a somewhat negative image over the years 
because of enthusiastic researchers flooding mailing lists with arguably low-risk 
attacks, but it's an interesting type of exposure. The root of the problem is that 
Web-based applications, Web servers, and middleware often allow users to submit 
HTML that's subsequently replayed by the Web server. This can allow attackers to 
indirectly launch an attack against another client of the Web site. 
Note 
Cross-site scripting is abbreviated as XSS because the obvious acronym, CSS, is 
already used for cascading style sheets. 
For example, say you have an ASP page like this: 
Hi there ! 
If you supply a name parameter in the query string, this page echoes it back to you. 
Say an attacker enters the following query in a Web browser: 
http://localhost/test.asp?name= 
When the page is displayed, it has an alert message box saying "hi," as shown in 
Figure 17-6. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1080 
Figure 17-6. Cross-site scripting message box 
How could attackers use this message box to perform an attack? They could take 
many approaches, but look at a simple example for now. Say an attacker sent this 
query: 
[View full width](? [????.]) 
http://localhost/test.asp?name=jim! 
Enter%20Secret%20Password: 
The attacker would get a response from the Web server that looks something like 
Figure 17-7. 
Figure 17-7. Cross-site scripting response 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1081 
The attacker created a form that looks like it belongs to the official site, but it actually 
tells the browser to send the information to the evil Web server at 1.2.3.4. You might 
be wondering why this attack is important, as anyone submitting this link is 
effectively attacking himself. This kind of attack can be initiated in a few ways, but the 
classic example is a link in an HTML-enabled e-mail. If attackers could hide the 
contents of the URI enough that it appears legitimate to end users, recipients could 
easily click the URI and end up at the attackers' official-looking page. 
Changing page contents is a viable attack vector, but it's actually one of the less 
severe routes. This attack becomes more serious when you consider the injection of 
client-side browser scripts, such as JavaScript, client-side ActiveX objects, or Java 
applets. In general, these client-side technologies are limited in what they can do, as 
they're intended to be sandboxed from the client's machine. If a rogue Web server 
owner could easily instruct the client's browser to move files around or run programs, 
the Internet would be in a world of hurtand it occasionally is when browser bugs have 
this effect. So these scripting languages aren't generally useful for attacking an OS, 
but they do give attackers access to the contents of the Web page the scripts are part 
of. 
For example, a user is tricked into supplying HTML that's then injected into a Web 
page displayed by www.bank.com. This means the injected HTML can pull data from 
the www.bank.com Web page, and with a trick or two, attackers can get the Web 
client to send this data to the evil Web server. The following example shows the 
quintessential form of the attack, cookie-stealing: 
[View full width](? [????.]) 
"> 
Any cookies sent to www.bank.com are also sent to the www.evil.com Web server by 
the injected script code. This would almost certainly include a session key or other 
information that an attacker might be interested in. 
Note 
The HTTP TRACE method can cause a variation of an XSS attack known as a cross-site 
tracing (XST) attack. It takes advantage of a Web server that supports the trACE 
method to simply parrot back a malicious entity body in the context of the targeted 
site. This attack is prevented operationally by simply disabling the TRACE method on 
the Web server. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1082 
Cross-site scripting vulnerabilities can be divided into two categories. The first, often 
called reflected, reflexive, or first order cross-site scripting, is the most widely 
understood variety. The attacker's client request actually contains the malicious 
HTML, and the server parrots it back. The previous example is of this variety. The 
second type is known as stored (second order) cross-site scripting. It occurs when a 
Web site stores input from a user usually in a database, file, memory, and so on. The 
actual attack happens later when that input is retrieved from storage and presented 
to the client. Stored cross-site scripting can be even more dangerous than the 
reflected kind, because it does not require an attacker to trick a user into clicking 
through a link. The attack simply runs when victims view pages on a vulnerable site. 
One particularly humorous example of a stored cross-site scripting vulnerability is 
provided by a worm that propagated across the popular social networking site 
myspace.com in February of 2005. An individual known as Samy exploited a stored 
cross-site scripting vulnerability to add himself as a friend to any member viewing his 
profile. (His explanation of the exploit is available at 
http://namb.la/popular/tech.html.) The exploit script propagates by embedding itself 
in every new friend's profile, ensuring an exponential growth in the affected users. 
Within a few hours of release, Samy was friends with most of the myspace.com 
community, whether they liked him or not. No damage was done, and to this day no 
legal action has been taken for the prank, but this incident certainly demonstrates the 
dangers of stored cross-site scripting vulnerabilities. 
Threading Issues 
Web technologies can use several different threading models. If any global data or 
variables exist across threads, security vulnerabilities can result if they aren't used in 
a thread-safe fashion. This type of vulnerability tends to surface most often in Java 
servlet code with Java class variables. Some specific examples are discussed in 
Chapter 18(? [????.]). 
C/C++ Problems 
Lower-level security issues, such as buffer overflows and format string vulnerabilities, 
aren't likely to occur in the high-level languages commonly used for Web applications. 
However, it's worth testing for them because C and C++ components tend to work 
their way into Web applications fairly regularly. You often see this lower-level code 
used in the following situations: 
Web applications that use NSAPI or ISAPI for performance reasons 
Web applications with ISAPI or NSAPI filters for front-end protection 
Web interfaces that are primarily wrappers to commercial applications 
Web interfaces that make use of external COM objects 
Web interfaces to older business objects, business applications, and legacy 
databases that require C/C++ components as middleware 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1083 
Surprisingly, buffer overflows can occasionally occur in an ASP or a Java Web site. 
They're usually the result of C/C++ code used in a nonobvious manner in the 
back-end processing. If the system contains multiple tiers or interfaces with 
technology you don't have full specifications on, you should consider testing oriented 
toward C/C++ issues. 
8.4.8 Harsh Realities of the Web 
Web applications generally aren't in an advantageous security position, and securing 
these systems can be an uphill battle. This statement might seem unduly harsh, but 
as Web security audits consistently show, things just aren't pretty on the Web. 
The bottom line is that the security of the whole system determines whether a Web 
application can be compromised. In other words, the security of the Web application 
depends not only on the Web application code, but also on the security and 
configuration of the Web server, the servlet engine, application servers, Web 
application frameworks, other third-party components and middleware, the database 
security, the server's OS, and the firewall configuration. A source code review of a 
Web application in isolation, although certainly of value, examines only a portion of 
the attack surface. 
This section attempts to draw on historical patterns and personal experience to come 
up with realistic expectations of the security environment the current average 
enterprise Web infrastructure provides. These maxims might seem unduly harsh or 
pessimistic, but they represent the rules of the game as it exists today. 
You can't trust the Web server: The Web platforms are complex, rapidly changing 
products that generally have had poor security track records. To be fair, Apache and 
OpenSSL have held up reasonably well, with only a few remotely exploitable bugs in 
the past couple of years, and IIS 6.0 looks promising in its default deny configuration. 
However, this track record isn't that encouraging, and nearly every other Web server 
has a fairly poor security history. Unfortunately, it doesn't matter how secure your 
Web application code is if an attacker can easily compromise your Web server. 
Reality: Chances are good that the Web server platform hosting the application you're 
reviewing has its own vulnerabilities. This isn't unexpected, as most complex 
software probably has dormant security bugs. It's important, however, to be aware of 
this potential for vulnerabilities and account for it in your planning and risk analysis. 
In addition, keeping up to date on vendor patches is critical. 
Note 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1084 
As a reviewer, you should research the security of your Web software and make sure 
you aren't exposed to any known issues. One helpful resource is the Security Focus 
vulnerability database (www.securityfocus.com), which often has enough 
information for you to test the issue yourself. Going to the Credit page of the 
vulnerability entry and looking up the original post that described the problem is 
useful, as researchers' posts are always more technical than vendor advisories. 
If you have the time and motivation, you can try to find vulnerabilities in the software 
on your own. This endeavor isn't as fruitless as it might seem, as there are probably 
plenty of surprising vulnerabilities in Web framework code. 
Also, if you need to find the versions of software running on a Web server, try using 
netcat or TELNET to connect to port 80 and issue a simple HEAD request, like this: 
HEAD / HTTP/1.0 
Usually, you get a banner from the Web server that tells you the version of Web 
server software you're running, and often you get the versions of other components. 
Attackers can get your server-side source code: Source-code disclosure 
vulnerabilities in Web servers and Web server connectors have been common 
through the years. One of the authors, for example, found several source-code 
disclosure vulnerabilities more than five years ago in Java Web Server, based on 
tricks such as running files through different servlets and appending characters to the 
end of filenames, such as %00 and %2e. What's scary is that these types of tricks still 
work today against commercial enterprise products. 
If the Web server doesn't have a source-code disclosure vulnerability, there's a good 
chance of one resulting from the interaction of different layers of technology in its 
setup. There's also a possibility that JSP forwarding, XML injection, or some other 
mechanism in the Web application can be exploited to retrieve fragments of 
server-side source code. 
Reality: The application should be designed around the premise that attackers will 
eventually be able to view server-side source code. Source code shouldn't contain 
sensitive information, and the site should be secure enough that exposure of 
technical functionality shouldn't matter. If you want to explore the possibility of 
retrieving server-side source code, check the Security Focus vulnerability database 
(www.securityfocus.com) mentioned in the auditing tip. 
Attackers can find a way to discover configurations or download 
configuration files: Application configuration files usually consist of flat text files or 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1085 
XML documents in directories just outside the Web tree or in directories within the 
Web tree that have some form of protection. There have consistently been 
vulnerabilities that allow attackers to retrieve these files or use various techniques to 
explore the Web server's configuration. These vulnerabilities mean debug 
functionality, prototype code, development testing interfaces, support interfaces, and 
administrative interfaces that are present but hidden by a layer of obscurity are likely 
to be discovered. Furthermore, sensitive information in configuration files is probably 
at risk of exposure. 
Reality: There shouldn't be any script files, servlet mappings, or handlers in the 
production environment that you don't want anonymous Internet attackers exploring. 
As a reviewer, you definitely want to focus on anything that looks like unnecessary 
content, as it usually isn't as well vetted as the mainstream code. 
Attackers can find all the files in the Web tree: Many vulnerabilities have allowed 
attackers to retrieve directory indexes or enumerate files and directories in the Web 
tree. They can range from vulnerabilities in Web servers to configuration issues to 
application-specific exposures. Attackers could also perform a brute-force or 
dictionary attack looking for content, or look for specific files, such as tar files, Oracle 
logs, versioning logs, and other types of common files left behind by developers. 
Reality: There should be nothing in the Web tree except documents you intend the 
Web server to serve. You can expect attackers to eventually find any files in the Web 
tree. That means include files, programming notes, debugging code, and any other 
development artifacts should be removed or stored outside the web tree. 
Reverse-engineering Java classes is easy: Java class files are usually stored in 
archives or directories just outside the Web tree. If attackers leverage a vulnerability 
that allows them to download these class files, they effectively have the Java source 
code to the application. Java class files can be reverse-engineered to a state that's 
effectively equivalent to the source form. The reversed source files don't contain 
comments, and some local variable names are lost, but otherwise, they are quite 