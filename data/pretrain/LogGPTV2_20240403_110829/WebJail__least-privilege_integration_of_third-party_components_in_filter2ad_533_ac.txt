7
8
9
10
11
12
13 myAdvice = makeAdvice ( [ ’ f o o ’ ,
14
15
return f a l s e ;
r e g i s t e r A d v i c e ( myFunction , myAdvice ) ;
d i s a b l e A d v i c e R e g i s t r a t i o n ( ) ;
} ;
}
’ ba r ’ ] ) ;
Figure 3: Example advice function construction and weaving
The construction of a rather generic example advice func-
tion is shown in Figure 3. The listing shows a function
makeAdvice, which returns an advice function as a closure
containing the whitelist. Whenever the advice function is
called for a function to which the ﬁrst argument (vp[0]) is
either ‘foo’ or ‘bar’, then the original function is executed.
Otherwise, the advice function returns false.
Note that in the example, ROindexOf and ROapply are
used. These functions were introduced to prevent prototype
poisoning attacks against the WebJail infrastructure. They
provide the same functionality as indexOf and apply, except
that they have the JSPROP_READONLY and JSPROP_PERMANENT
attributes set so they can not be modiﬁed or deleted.
Next, each (advice, operation) pair is passed on to the deep
aspect weaving layer to achieve the deep aspect weaving.
5.3 Deep aspect weaving layer
The deep aspect weaving layer makes sure that all code-
paths to an advised function pass through its advice func-
tion. Although the code from WebJail is the ﬁrst code to
run in a WebJail iframe, we consider the scenario that there
can be code or objects in place that already reference the
function to be advised. It is necessary to maintain the ex-
isting references to a function, if they exist, so that advice
weaving does not break code unintentionally.
The implementation of the deep aspect weaving layer is
inspired by ConScript. To register deep advice, we intro-
duce a new function called registerAdvice, which takes 2
arguments: the function to advise (also referred to as the
‘original’ function) and its advice function. Line 14 of Fig-
ure 3 illustrates the usage of the registerAdvice function.
In Spidermonkey, Mozilla’s JavaScript engine, all Java-
Script functions are represented by JSFunction objects. A
JSFunction object can represent both a native function, as
well as a JIT compiled JavaScript function. Because Web-
Jail enforces policies on JavaScript APIs and all of these are
implemented with native functions, our implementation only
considers JSFunction objects which point to native code2.
The process of registering advice for a function is schemat-
ically illustrated in Figure 4. Consider a native function
2Although WebJail could be implemented for non-native
functions as well.
(a) Before weaving
(b) After weaving
Figure 4: Schematic view of deep aspect weaving.
At weaving time, the value of the function pointer in Func
(which points to OrigCode) and a reference to Adv are backed
up inside the Func object. The function pointer inside Func
is then directed towards the Trampoline function, which is
an internal native C++ function provided by WebJail.
At function invocation time, the Trampoline function will
be called as if it were the original function (OrigCode). This
function can retrieve the values backed up in the weaving
phase. From the backed up function pointer pointing to
OrigCode, a new anonymous JSFunction object is created.
This anonymous function, together with the current this
object and the arguments to the Trampoline function are
passed to the advice function Adv. Finally, the result from
the advice function is returned to the calling code.
In reality, the registerAdvice function is slightly more
complicated. In each JSFunction object, SpiderMonkey al-
locates 2 private values, known as “reserved slots”, which
can be used by Firefox to store opaque data. As shown in
Figure 4, the reserved slots of Func (hatched diagonally) are
backed up in the weaving phase together with the other val-
ues. During invocation time, these reserved slots are then
restored into the anonymous function mentioned earlier.
Note that all code that referenced Func still works, al-
though calls to this function will now pass through the ad-
vice function Adv ﬁrst. Also note that no reference to the
original code OrigCode is available. The only way to call
this code is by making use of the advice function.
To prevent any other JavaScript code from having access
to the registerAdvice function, it is disabled after all ad-
vice from the policy has been applied. For this purpose,
WebJail provides the disableAdviceRegistration function,
which disables the use of the registerAdvice function in the
current JavaScript context.
6. EVALUATION
6.1 Performance
We performed micro-benchmarks on WebJail to evalu-
ate its performance overhead with regard to page load-time
and function execution. The prototype implementation is
built on Mozilla Firefox 4.0b10pre, and compiled with the
GNU C++ compiler v4.4.4-14ubuntu5. The benchmarks
were performed on an Apple MacBook Pro 4.1, with an In-
tel Core 2 Duo T8300 CPU running at 2.40GHz and 4GB
of memory, running Ubuntu 10.10 with Linux kernel version
2.6.35-28-generic.
JSFunctionFuncOrigCodeJSFunctionAdvTrampolineOrigCodeJSFunctionAdvTrampolineJSFunctionFunc6.1.1 Page load-time overhead
To measure the page load-time overhead, we created a
local webpage (main.html) that embeds another local page
(inner.html) in an iframe with and without a local policy
ﬁle. inner.html records a timestamp (new Date().getTime()))
when the page starts and stops loading (using the body on-
load event). WebJail was modiﬁed to record the starttime
before anything else executes, so that policy retrieval, load-
ing and application is taken into account. After the results
are submitted, main.html reloads.
We averaged the results of 1000 page reloads. Without
WebJail, the average load-time was 16.22ms (σ = 3.74ms).
With WebJail, the average is 23.11ms (σ = 2.76ms).
6.1.2 Function execution overhead
Similarly, we used 2 local pages (main.html and inner.html)
to measure function execution overhead. inner.html mea-
sures how long it takes for 10000 iterations of a piece of
code to execute. We measured 2 scenarios: a typical XML-
HttpRequest invocation (constructor, open and send func-
tions) and a localStorage set and get (setItem and getItem).
Besides measuring a baseline without WebJail policy, we
measured each scenario when restricted by 3 diﬀerent poli-
cies: “allow all”, “allow none” and a whitelist with 5 values.
The averages are summarized in Table 2.
Baseline
“Allow all”
“Allow none”
Whitelist
XMLHttpRequest
1.25 ms
1.25 ms (+ 0%)
0.07 ms (- 94.4%)
1.33 ms (+ 6.4%)
localStorage
0.37 ms
0.37 ms (+ 0%)
0.04 ms (- 89.2 %)
0.47 ms (+ 27%)
Table 2: Function execution overhead
To conclude, we have registered a negligible performance
penalty for our WebJail prototype: a page load-time of 7ms,
and an execution overhead in case of sensitive operations
about 0.1ms.
6.2 Security
As discussed in Subsection 5.3, the registerAdvice func-
tion disconnects an available function and makes it available
only to the advice function. Because of the use of deep as-
pects, we can ensure that no other references to the original
function are available in the JavaScript environment, even if
such references already existed before registerAdvice was
called. We have successfully veriﬁed this full mediation of
the deep aspects using our prototype implementation.
Because advice functions are written in JavaScript and the
advice function has the only reference to the original func-
tion, it would be tempting for an attacker to attack the Web-
Jail infrastructure. The retrieval and application of a Web-
Jail policy happens before any other code is executed in the
JavaScript context. In addition, the registerAdvice func-
tion is disabled once the policy has been applied. The only
remaining attack surface is the advice function during its
execution. The advice functions constructed by the advice
construction layer are functionally equivalent to the exam-
ple advice function created in Figure 3. We know of 3 attack
vectors: prototype poisoning of Array.prototype.indexOf
and Function.prototype.apply, and toString redeﬁnition
on vp[0] (the ﬁrst argument to the example advice function
in Figure 3). By introducing the readonly copies ROindexOf
and ROapply (See Subsection 5.2), we prevent an attacker
from exploiting the ﬁrst 2 attack vectors. The third vector,
toString redeﬁnition, was veriﬁed in our prototype imple-
mentation and is not an issue because toString is never
called on the argument vp[0].
6.3 Applicability
To test the applicability of the WebJail architecture, we
have applied our prototype implementation to mainstream
mashup platforms, including iGoogle and Facebook. As part
of the setup, we have instrumented responses from these
platforms to include secure composition policies, by auto-
matically injecting a policy attribute in selected iframes.
Next, we have applied both permissive composition poli-
cies as well as restricted composition policies and veriﬁed
that security-sensitive operations for the third-party compo-
nents were executed as usual in the ﬁrst case, and blocked
in the latter case. For instance, as part of the applicability
tests, we applied WebJail to control Geolocation function-
ality in the Google Latitude[11] component integrated into
iGoogle, as well as external communication functionality of
the third-party Facebook application “Tweets To Pages”[14]
integrated into our Facebook page.
7. DISCUSSION AND FUTURE WORK
In the previous sections, we have showed the feasibility
of the WebJail architecture via a prototype implementation
in Firefox, and evaluated the performance, security and ap-
plicability. By applying micro-benchmarks, we measured a
negligible overhead, we discussed how the WebJail architec-
ture achieves full mediation via deep aspect weaving, and we
brieﬂy illustrated the applicability of WebJail in mainstream
mashup platforms.
In this section, we will discuss some points of attention
in realizing least-privilege integration in web mashups and
some opportunities for further improvements.
First, the granularity chosen for the secure composition
policies for WebJail is primarily driven by the ease of con-
ﬁguration for the mashup integrator. We strongly believe
that the category level of granularity increases the adoption
potential by integrators and browsers, for instance compared
to semantically rich and expressive security policies as is cur-
rently the case in wrapper approaches or ConScript. In fact,
we chose to introduce this policy abstraction to let the in-
tegrator focus on the “what” rather than the “how”. A next
step could be to deﬁne policy templates per mashup compo-
nent type (e.g. advertisement and geotagging components).
Nevertheless, more ﬁne-grained policies could also be ap-
plied to achieve least-privilege integration, but one should
be aware of the potential risk of creating an inverse sand-
box. The goal of a least-privilege integration architecture,
such as WebJail, is to limit the functionality available to a
(possibly) malicious component. In case the policy language
is too expressive, an attacker could use this technology to
achieve the inverse. An attacker could integrate a legitimate
component into his website and impose a malicious policy
on it. The result is eﬀectively a hardcoded XSS attack in
the browser. For instance, the attacker could introduce an
advice that leaks all sensitive information out of a legitimate
component as part of its least-privilege composition policy
without being stopped by the Same-Origin Policy.
One particular area where we see opportunities for more
ﬁne-grained enforcement are cross-domain interactions. On-
going research on Cross-Site Request Forgery (CSRF) [5,
6, 28, 20] already diﬀerentiates between benign and poten-
tially malicious cross-domain requests, and restricts the lat-
ter class as part of a browser extension. This line of research
could be seen as complementary to the presented approach,
and a combination of both would allow a more ﬁne-grained
enforcement for cross-domain interactions.
Second, a possible technique to escape a modiﬁed Java-
Script execution context in an iframe, would be to open
a new window and execute JavaScript in there. We have
anticipated this attack by hardcoding policies for e.g. the
window.open function. This is however not the best ap-
proach. The upcoming HTML 5 specs include the sand-
box attribute for iframes. This speciﬁcation states that a
sandbox should prevent content from creating new auxil-
iary browsing contexts. Mozilla Firefox does not support
the sandbox attribute yet. The hardcoded policy for win-
dow.open is a quick ﬁx while we are working on our own full
implementation of the sandbox attribute in Mozilla Firefox.
Another way to escape WebJail is to access the window
object of the parent or a sibling frame and make use of
the functions in that JavaScript context (e.g. parent.nav-
igator.geolocation.getCurrentPosition). In such a sce-
nario, accessing another JavaScript context falls under the
Same-Origin Policy and will only be possible if both the
caller and callee are in the same origin. To avoid this at-
tack, the WebJail implementation must restrict access to
sensitive operations in other execution contexts under the
Same-Origin Policy.
Thirdly, the categories in the policy ﬁles of WebJail are
a result of a study of the sensitive JavaScript operations in
the new HTML5 APIs. Most of the HTML5 APIs are work-
ing drafts and might change in the future. The category list
in WebJail is therefore an up-to-date snapshot, but might
be subject to change in the future. Even after the speciﬁ-
cations for HTML5 are oﬃcially released, the functionality
in browsers might keep changing. To cope with this evolv-
ing landscape, WebJail can easily be extended to support
additional categories and APIs as well.
Finally, the WebJail architecture is tailored to support
least-privilege integration in mashups that are built via iframe-
integration. An interesting future track is to investigate how
to enable browsers to support least-privilege script-inclusion
integration as well. Since in such a scenario, one can not
build on the fact that a separate execution context is cre-
ated, we expect this to be a challenging trajectory.
8. RELATED WORK
There is a broad set of related work that focuses on the
integration of untrusted JavaScript code in web applications.
JavaScript subsets.
A common technique to prevent undesired behavior is to
restrict the untrusted code (i.e. the third-party component)
to a safe subset of JavaScript. The allowed operations within
the subset prevent the untrusted code from obtaining ele-
vated privileges, unless explicitly allowed by the integrator.
ADSafe[3] and FBJS[31] requires third-party components
to be written in a JavaScript subset that is known to be
safe. The ADSafe subset removes several unsafe features
from JavaScript (e.g. global variables, eval, ...) and pro-
vides safe alternatives through the ADSAFE object. Caja[23],
Jacaranda[15] and Live Labs’ Websandbox[22] take a diﬀer-
ent approach. Instead of heavily restricting the developer’s
language, they transform the JavaScript code into a safe
version. The transformation process is based on both static
analysis and rewriting to integrate runtime checks.
These techniques eﬀectively support client-side least-privilege
integration of mashup components. The main disadvan-