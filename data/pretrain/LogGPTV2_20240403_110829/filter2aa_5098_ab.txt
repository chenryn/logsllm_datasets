>>> li.append(2)
>>> li
[1, 2]
>>> li.append(4)
>>> li
[1, 2, 4]
>>> li.append(3)
>>> li
[1, 2, 4, 3]
```
### List Slicing {.col-span-2 .row-span-3}
Syntax of list slicing:
```python
a_list[start:end]
a_list[start:end:step]
```
#### Slicing
```python
>>> a = ['spam', 'egg', 'bacon', 'tomato', 'ham', 'lobster']
>>> a[2:5]
['bacon', 'tomato', 'ham']
>>> a[-5:-2]
['egg', 'bacon', 'tomato']
>>> a[1:4]
['egg', 'bacon', 'tomato']
```
#### Omitting index
```python
>>> a[:4]
['spam', 'egg', 'bacon', 'tomato']
>>> a[0:4]
['spam', 'egg', 'bacon', 'tomato']
>>> a[2:]
['bacon', 'tomato', 'ham', 'lobster']
>>> a[2:len(a)]
['bacon', 'tomato', 'ham', 'lobster']
>>> a
['spam', 'egg', 'bacon', 'tomato', 'ham', 'lobster']
>>> a[:]
['spam', 'egg', 'bacon', 'tomato', 'ham', 'lobster']
```
#### With a stride
```python
['spam', 'egg', 'bacon', 'tomato', 'ham', 'lobster']
>>> a[0:6:2]
['spam', 'bacon', 'ham']
>>> a[1:6:2]
['egg', 'tomato', 'lobster']
>>> a[6:0:-2]
['lobster', 'tomato', 'egg']
>>> a
['spam', 'egg', 'bacon', 'tomato', 'ham', 'lobster']
>>> a[::-1]
['lobster', 'ham', 'tomato', 'bacon', 'egg', 'spam']
```
### Remove
```python
>>> li = ['bread', 'butter', 'milk']
>>> li.pop()
'milk'
>>> li
['bread', 'butter']
>>> del li[0]
>>> li
['butter']
```
### Access
```python
>>> li = ['a', 'b', 'c', 'd']
>>> li[0]
'a'
>>> li[-1]
'd'
>>> li[4]
Traceback (most recent call last):
  File "", line 1, in 
IndexError: list index out of range
```
### Concatenating  {.row-span-2}
```python
>>> odd = [1, 3, 5]
>>> odd.extend([9, 11, 13])
>>> odd
[1, 3, 5, 9, 11, 13]
>>> odd = [1, 3, 5]
>>> odd + [9, 11, 13]
[1, 3, 5, 9, 11, 13]
```
### Sort & Reverse {.row-span-2}
```python
>>> li = [3, 1, 3, 2, 5]
>>> li.sort()
>>> li
[1, 2, 3, 3, 5]
>>> li.reverse()
>>> li
[5, 3, 3, 2, 1]
```
### Count
```python
>>> li = [3, 1, 3, 2, 5]
>>> li.count(3)
2
```
### Repeating
```python
>>> li = ["re"] * 3
>>> li
['re', 're', 're']
```
Python Flow control
------------
### Basic
```python
num = 5
if num > 10:
    print("num is totally bigger than 10.")
elif num >> a = 330
>>> b = 200
>>> r = "a" if a > b else "b"
>>> print(r)
a
```
### else if
```python
value = True
if not value:
    print("Value is False")
elif value is None:
    print("Value is None")
else:
    print("Value is True")
```
Python Loops
--------
### Basic
```python
primes = [2, 3, 5, 7]
for prime in primes:
    print(prime)
```
Prints: 2 3 5 7
### With index
```python
animals = ["dog", "cat", "mouse"]
# enumerate() adds counter to an iterable
for i, value in enumerate(animals):
    print(i, value)
```
Prints: 0 dog 1 cat 2 mouse
### While
```python
x = 0
while x  100:
        print("%d is bigger than 100" %n)
        break
else:
    print("Not found!")
```
Also see: [Python Tips](https://book.pythontips.com/en/latest/for_-_else.html)
Python Functions
--------
### Basic
```python
def hello_world():  
    print('Hello, World!')
```
### Return
```python
def add(x, y):
    print("x is %s, y is %s" %(x, y))
    return x + y
add(5, 6)    # => 11
```
### Positional arguments
```python
def varargs(*args):
    return args
varargs(1, 2, 3)  # => (1, 2, 3)
```
### Keyword arguments
```python
def keyword_args(**kwargs):
    return kwargs
# => {"big": "foot", "loch": "ness"}
keyword_args(big="foot", loch="ness")
```
### Returning multiple
```python
def swap(x, y):
    return y, x
x = 1
y = 2
x, y = swap(x, y)  # => x = 2, y = 1
```
### Default Value
```python
def add(x, y=10):
    return x + y
add(5)      # => 15
add(5, 20)  # => 25
```
### Anonymous functions
```python
# => True
(lambda x: x > 2)(3)
# => 5
(lambda x, y: x ** 2 + y ** 2)(2, 1)
```
Python Modules
--------
### Import modules
```python
import math
print(math.sqrt(16))  # => 4.0
```
### From a module
```python
from math import ceil, floor
print(ceil(3.7))   # => 4.0
print(floor(3.7))  # => 3.0
```
### Import all
```python
from math import *
```
### Shorten module 
```python
import math as m
# => True
math.sqrt(16) == m.sqrt(16)
```
### Functions and attributes
```python
import math
dir(math)
```
Python File Handling
----------
### Read file
#### Line by line
```python
with open("myfile.txt") as file:
    for line in file:
        print(line)
```
#### With line number
```python
file = open('myfile.txt', 'r')
for i, line in enumerate(file, start=1):
    print("Number %s: %s" % (i, line))
```
### String
#### Write a string
```python
contents = {"aa": 12, "bb": 21}
with open("myfile1.txt", "w+") as file:
    file.write(str(contents))
```
#### Read a string
```python
with open('myfile1.txt', "r+") as file:
    contents = file.read()
print(contents)
```
### Object
#### Write an object
```python
contents = {"aa": 12, "bb": 21}
with open("myfile2.txt", "w+") as file:
    file.write(json.dumps(contents))
```
#### Read an object
```python
with open('myfile2.txt', "r+") as file:
    contents = json.load(file)
print(contents)
```
### Delete a File
```python
import os
os.remove("myfile.txt")
```
### Check and Delete
```python
import os
if os.path.exists("myfile.txt"):
    os.remove("myfile.txt")
else:
    print("The file does not exist")
```
### Delete Folder
```python
import os
os.rmdir("myfolder")
```
Python Classes & Inheritance
--------
### Defining
```python
class MyNewClass:
    pass
# Class Instantiation
my = MyNewClass()
```
### Constructors
```python
class Animal:
    def __init__(self, voice):
        self.voice = voice
cat = Animal('Meow')
print(cat.voice)    # => Meow
dog = Animal('Woof') 
print(dog.voice)    # => Woof
```
### Method
```python
class Dog:
    # Method of the class
    def bark(self):
        print("Ham-Ham")
charlie = Dog()
charlie.bark()   # => "Ham-Ham"
```
### Class Variables  {.row-span-2}
```python
class MyClass:
    class_variable = "A class variable!"
# => A class variable!
print(MyClass.class_variable)
x = MyClass()
# => A class variable!
print(x.class_variable)
```
### Super() Function {.row-span-2}
```python
class ParentClass:
    def print_test(self):
        print("Parent Method")
class ChildClass(ParentClass):
    def print_test(self):
        print("Child Method")
        # Calls the parent's print_test()
        super().print_test() 
```          
--- 
```python
>>> child_instance = ChildClass()
>>> child_instance.print_test()
Child Method
Parent Method
```
### repr() method
```python
class Employee:
    def __init__(self, name):
        self.name = name
    def __repr__(self):
        return self.name
john = Employee('John')
print(john)  # => John
```
### User-defined exceptions
```python
class CustomError(Exception):
    pass
```
### Polymorphism
```python
class ParentClass:
    def print_self(self):
        print('A')
class ChildClass(ParentClass):
    def print_self(self):
        print('B')
obj_A = ParentClass()
obj_B = ChildClass()
obj_A.print_self() # => A
obj_B.print_self() # => B
```
### Overriding 
```python
class ParentClass:
    def print_self(self):
        print("Parent")
class ChildClass(ParentClass):
    def print_self(self):
        print("Child")
child_instance = ChildClass()
child_instance.print_self() # => Child
```
### Inheritance
```python
class Animal: 
    def __init__(self, name, legs):
        self.name = name
        self.legs = legs
class Dog(Animal):
    def sound(self):
        print("Woof!")
Yoki = Dog("Yoki", 4)
print(Yoki.name) # => YOKI
print(Yoki.legs) # => 4
Yoki.sound()     # => Woof!
```
Miscellaneous
----------
### Comments
```python
# This is a single line comments.
```
```python
""" Multiline strings can be written
    using three "s, and are often used
    as documentation.
"""
```
```python
''' Multiline strings can be written
    using three 's, and are often used
    as documentation.
'''
```
### Generators
```python
def double_numbers(iterable):
    for i in iterable:
        yield i + i
```
Generators help you make lazy code.
### Generator to list
```python
values = (-x for x in [1,2,3,4,5])
gen_to_list = list(values)
# => [-1, -2, -3, -4, -5]
print(gen_to_list)
```
### Handle exceptions {.col-span-3}
```python
try:
    # Use "raise" to raise an error
    raise IndexError("This is an index error")
except IndexError as e:
    pass                 # Pass is just a no-op. Usually you would do recovery here.
except (TypeError, NameError):
    pass                 # Multiple exceptions can be handled together, if required.
else:                    # Optional clause to the try/except block. Must follow all except blocks
    print("All good!")   # Runs only if the code in try raises no exceptions
finally:                 # Execute under all circumstances
    print("We can clean up resources here")
```