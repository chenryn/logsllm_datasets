# Java安全漫谈笔记
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> 最开始看过p师傅这个项目，之后就有点忘了，其实也说实话之前看的时候没有太懂，于是现在在来学习一下顺便记录一下心得体会。
## 反射 1
java反射的函数
    public void execute(String className, String methodName) throws Exception {
         Class clazz = Class.forName(className);//获取一个类
         clazz.getMethod(methodName).invoke(clazz.newInstance());//
    }
  * 获取类的⽅法： forName
  * 实例化类对象的⽅法： newInstance
  * 获取函数的⽅法： getMethod
  * 执⾏函数的⽅法： invoke
forName有两个函数重载：
  * Class forName(String name)
  * Class forName(String name, **boolean** initialize, ClassLoader loader)
    Class.forName(className)
    // 等于
    Class.forName(className, true, currentLoader)
`这里第二函数中的第二个参数表示是否初始化，而这里的是否初始化是告诉Java虚拟机是否执⾏”类初始化“。`其中， static {}
就是在”类初始化”的时候调⽤的，⽽ {} 中的代码会放在构造函数的 super()
后⾯，但在当前构造函数内容的前⾯。所以说我们如果控制一个恶意类，使用forName(“恶意类”)去获得就可能执行恶意代码。
red.java
    package ref;
    public class ref {
        public static void main(String[] args) throws Exception {
            String name = "ref.exp";
            Class.forName(name);//获得class
        }
    }
exp.java
    package ref;
    public class exp {
        static {
            try {
    //            Runtime.getRuntime().exec("calc");
            Runtime rt =Runtime.getRuntime();
            String[] commands = {"calc"};
            Process pc = rt.exec(commands);
            pc.waitFor();//对象的进程结束才返回调用
            }catch (Exception e){
             //do nothing
            }
        }
    }
## 反射 2
class.newInstance() 的作用就是 **调用这个类的无参构造函数，这个比较好理解** (如果类构造函数是私有的就利用不成功)
原因是 Runtime 类的构造方法是私有的。而这种模式是 **单例模式** 。
Runtime类就是单例模式，我们只能通过 Runtime.getRuntime() 来获取到 Runtime 对
象。所以payload为
    Class clazz = Class.forName("java.lang.Runtime");
    clazz.getMethod("exec", String.class).invoke(clazz.getMethod("getRuntime").invoke(clazz), "calc.exe");
这里用到了 getMethod 和 invoke 方法。
**getMethod** 的作用是通过反射获取一个类的某个特定的公有方法。而后面的 **String.class**
表示该方法接受的参数，为什么要写？是因为java中存在重载(既相同的方法可能会接受不同的参数)
**invoke** 的作用是执行方法，它的第一个参数是：
如果这个方法是一个普通方法，那么第一个参数是类对象
如果这个方法是一个静态方法，那么第一个参数是类
所以正常执行方法是 [1].method([2], [3], [4]…) ，其实在反射里就是method.invoke([1], [2], [3],
[4]…) 。
**这里的方法就是exec()是一个普通方法**
所以invoke的第一个参数就是类对象
Payload分解一下就是:
    Class clazz = Class.forName("java.lang.Runtime");//获得类
    Method Method = clazz.getMethod("exec", String.class);//获得exec方法
    Method getRuntime = clazz.getMethod("getRuntime");//获得getRuntime方法
    Object runtime = getRuntime.invoke(clazz);//实例化getRuntime方法
    Method.invoke(runtime,"calc");//反射执行
## 反射 3
如果一个利用类，是有参构造方法，并且没有单例模式里的静态方法。那怎么办？？
如： **ProcessBuilder**
这里我们就需要使用另一个反射方法 **getConstructor**
getConstructor接收的参数是 **构造函数**
列表类型，因为构造函数也支持重载，所以必须用参数列表类型才能唯一确定一个构造函数。(也就是需要指明参数类型)，获取到构造函数后，我们使用newInstance来执行。(实例化类对象的⽅法)
这里我们使用反射来获取其构造函数，然后调用start() 来执行命令：
    Class clazz = Class.forName("java.lang.ProcessBuilder");
    ((ProcessBuilder) clazz.getConstructor(List.class).newInstance(Arrays.asList("calc.exe"))).start();
其实我们可以清楚的看到利用构造函数然后实例化了这个ProcessBuilder类
这里虽然可以执行成功，不过利用漏洞写exp的时候没有进行强行转换 **ProcessBuilder**
所以我们应该使用反射来执行命令。
    Class clazz = Class.forName("java.lang.ProcessBuilder");
    clazz.getMethod("start").invoke(clazz.getConstructor(List.class).newInstance(Arrays.asList("calc.exe")));
    //方法.invoke(类的实例化)
通过 getMethod(“start”) 获取到start方法，然后 invoke 执行， invoke 的第一个参数就是
ProcessBuilder Object了。
在上面我们使用的构造函数参数类型是 **List** ，但是ProcessBuilder类的构造方法支持接收俩个参数类型。见最上面的图片。
**另一个是String…** 。而这个类型其实是数组。
> 这又涉及到Java里的可变长参数（varargs）了。正如其他语言一样，Java也支持可变长参数，就是当你定义函数的时候不确定参数数量的时候，可以使用
> … 这样的语法来表示“这个函数的参数个数是可变的”
>
> 对于可变长参数，Java其实在编译的时候会编译成一个数组，也就是说，如下这两种写法在底层是等价的（也就不能重载）：
>
> public void hello(String[] names) {}
>
> public void hello(String…names) {}
所以对于反射来说，如果要获取的目标函数里包含可变长参数，其实我们认为它是数组就行了。还有一个小问题：在调用 newInstance
的时候，因为这个函数本身接收的是一个可变参数，我们传给ProcessBuilder的也是一个可变长参数，二者叠加为一个二维数组，所以整个Payload如下
    Class clazz = Class.forName("java.lang.ProcessBuilder");
    ((ProcessBuilder)clazz.getConstructor(String[].class).newInstance(new
    String[][]{{"calc.exe"}})).start();
不过我们这里还是需要将其转换成反射类型的payload。
    Class clazz = Class.forName("java.lang.ProcessBuilder");//反射
    clazz.getMethod("start").invoke(clazz.getConstructor(String[].class).newInstance(new String[][]{{"calc"}}));
还记得前面我们利用的Runtime类？我们是使用的 **单例模式** (用 Runtime.getRuntime()来
获取对象)来生成的payload，而避免了私有的构造函数利用。
就涉及到 getDeclared 系列的反射了，与普通的 getMethod 、 getConstructor 区别是：
  * getMethod 系列方法获取的是当前类中所有公共方法，包括从父类继承的方法
  * getDeclaredMethod 系列方法获取的是当前类中“声明”的方法，是实在写在这个类里的，包括私有的方法，但从父类里继承来的就不包含了
getDeclaredMethod 的具体用法和 getMethod 类似， getDeclaredConstructor
的具体用法和getConstructor 类似。
这样我们就可以利用 **Runtime** 这个类的构造函数(虽然是私有的)来实例化对象，进而执行命令：
    Class clazz = Class.forName("java.lang.Runtime");
    Constructor m = clazz.getDeclaredConstructor();//获得构造函数
    m.setAccessible(true);//设置构造函数为可访问
    clazz.getMethod("exec", String.class).invoke(m.newInstance(), "calc.exe");
可见，这里使用了一个方法 setAccessible ，这个是必须的。我们在获取到一个私有方法后，必须用setAccessible
修改它的作用域，否则仍然不能调用。
## RMI 1
RMI全称是Remote Method
Invocation，远程⽅法调⽤。从这个名字就可以看出，他的⽬标和RPC其实是类似的，是让某个Java虚拟机上的对象调⽤另⼀个Java虚拟机中对象上的⽅法，只不过RMI是Java独有的⼀种机制。`RMI`用于构建分布式应用程序，`RMI`实现了`Java`程序之间跨`JVM`的远程通信。
下面我们实验一下
**RMIServer.java**
    package rmi;
    import java.rmi.Naming;
    import java.rmi.Remote;
    import java.rmi.RemoteException;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.server.UnicastRemoteObject;
    public class RMIServer {
        public interface IRemoteHelloWorld extends Remote{
            // 继承了 java.rmi.Remote 的接⼝
            public String hello() throws RemoteException;
            //中定义我们要远程调⽤的函数，⽐如这⾥的 hello()
    //        public String exec() throws  RemoteException;
        }
        public class RemoteHelloWorld extends UnicastRemoteObject implements IRemoteHelloWorld{
            protected RemoteHelloWorld() throws RemoteException{
                super();
            }//⼀个实现了此接⼝的类
            public String hello() throws RemoteException{
                System.out.println("call from 10.23.71.34.....");
                return "hello world";
            }
    //        public String exec() throws RemoteException{
    //            System.out.println("call from 10.23.71.34.....");
    //            try {
    //                Runtime.getRuntime().exec("calc");
    //            } catch (IOException e) {
    //                e.printStackTrace();
    //            }
    //            return "nice";
    //        }
        }
        private void start() throws Exception{
            RemoteHelloWorld h = new RemoteHelloWorld();
            LocateRegistry.createRegistry(1099);
            Naming.rebind("rmi://127.0.0.1:1099/Hello",h);