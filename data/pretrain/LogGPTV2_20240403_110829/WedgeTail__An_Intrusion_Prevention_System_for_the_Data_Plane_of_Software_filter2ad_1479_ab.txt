ity enables a compromised forwarding device the capability
to overload the controller with requests causing a Denial of
Service (DoS) attack.
Third, securing programmable soft-switches such as Open
vSwitches is more challenging compared to hardware equiva-
lents. The former run atop of end host servers and are more
susceptible to attacks compared with the hardware switches,
which is harder for an attacker to physically access.
Our fourth argument is that the SDN security domain is a
moving target with the protocols and standards undergoing
constant changes. For example, several controllers have al-
ready been proposed with varying speciﬁcations, which are
undergone constant updates. Hence, relying on the capabil-
ities of one would limit practicality on another. The same
argument is also valid on the OpenFlow [2] standard.
Figure 1: Forwarding devices in ISP Network. The red devices
are misbehaving. The green links are expected paths.
Fifth, motivated by performance advantages such as lower
latency response to network events and better protocol stan-
dardization such as for encryption, MAC learning and codec
control message (CCM) exchanges, proposals have been made
to delegate more control to the SDN data plane [33]. The
increased authority improves the network’s fault tolerance
with the continuation of basic network operations under fail-
ing controllers. However, this increases the vulnerability of
the network to traditional attacks and expands the range of
attacks a compromised device may launch against the net-
work.
Considering the aforementioned factors and the limita-
tions of existing work such as SPHINX (see § 1), we posit
the ‘must-have’ features of an eﬀective solution against ma-
licious forwarding devices to include:
1) Minimum reliance on pre-deﬁned rules/policies for detec-
tion: to be able to detect unknown attacks exploiting either
hardware or software vulnerabilities of forwarding devices,
2) Ability to systematically and autonomously prioritize for-
warding devices for inspection: to improve detection perfor-
mance and success rate,
3) Capability to distinguish malicious forwarding actions
and localize maliciousness: to avoid executing conﬂicting
and redundant policies when responding to threats,
4) Programmability for responding to threats: to be able to
customize response when detecting threats, and
5) Causing minimal disruption to the network performance
when detecting and responding to threats: so the proposed
solution is practical for real-world network deployment.
The rest of this paper describes how we address each of
the aforementioned requirements in our proposed solution,
WedgeTail.
4.1 Overview
As shown in Figure 1, WedgeTail is composed of two main
parts namely, Detection Engine (§6) and Response Engine
(§7). The former listens to OpenFlow messages exchanged
between the control and data plane and by doing so main-
tains a virtual replica of the network, which is used to com-
pute the expected packet trajectories. The Response En-
gine, however, is placed as an application on top of the con-
troller and submits policies to the network operating system,
which makes the ﬁnal decision on how, and whether, to ap-
ply them.
Now, assume an ISP network with AARNet Setup traﬃc
ﬂow as shown in Figure 1. Using its integrated HSA com-
ponent, WedgeTail retrieves 10010x10 ∪ 10011x10 as the
851header space of packets that can be sent from Forwarding
Device (FD) a to c1, or F D(a) → F D(c1), on P orti. Com-
posing the history attributes of the propagation graph it
learns that the Expected Packet Trajectories between these
two nodes is as follows:
F D(a) → F D(b) → F D(c) → {F D(d) OR F D(i)} →
F D(e) → F D(c1) – shown in green colour in Figure 1.
The main intuition behind WedgeTail is that whenever the
Actual Packet Trajectories are not a subset of the Expected
Packet Trajectories, one or more of the forwarding devices
in the packet path may be malicious – recall that in §3 ‘ma-
licious’ was extended to cover faulty and misconﬁgured too.
For instance, in Figure 1, the red colored trajectory is a
non-allowed trajectory and F D(b) is malicious.
Algorithm 1 presents WedgeTail’s workﬂow. On each run,
WedgeTail inspects the whole network on a speciﬁc port
– out of the designated target ports. The detection en-
gine entails Find-Target-Forwarding-Devices() and Scan-for-
Attacks(), which provide input to the main protection engine
function, Isolate-Forwarding-Device().
Algorithm 1 WedgeTail Detection and Response
Response Policy RP
Select P orti ∈ {Port}
Find-Target-Forwarding-Devices (P orti)
Select F D(i) ∈ {Target Forwarding Devices}
for all P orti ∈ {Port} do
Scan-for-Attacks (F D(i))
if F D(i) is ‘Malicious’ then
Isolate-Forwarding-Device (RP, F D(i))
end if
end for
5. TARGET IDENTIFICATION
5.1 Trajectory Creation
Deﬁnition of Trajectory: We ﬁrst deﬁne the notion
of trajectory, denoted as T R hereon, in the context of our
work. A packet trajectory is the route a uniquely identiﬁable
packet takes while traversing a network from one forwarding
device to another. We consider diﬀerent paths for the same
packet as distinctive trajectories. In other words, a packet
may be routed through various paths in respect to network
conﬁgurations and condition on each iteration. For instance,
as shown in Figure 1, a packet traversing through green line
from F D(a) to F D(e) may be routed through F D(i) or
F D(d) depending on the QoS requirements. However, mul-
tiple repetitions of the same path for the same packet is only
regarded as one trajectory.
Retrieving the Actual Packet Trajectories: We pro-
pose two alternative solutions to retrieve the packet trajec-
tories. As succinctly reviewed in §2, NetSight is a recently
proposed network troubleshooting solution that allows re-
trieving all the forwarding devices that a packet visited while
traversing the network. Therefore, if NetSight was deployed
in a network, a convenient approach would be to query
for each packet header route and create the trajectories.
This may be achieved by integrating a simple module for
WedgeTail, which uses existing API provided by NetSight.
Our preferred method to retrieves the actual trajectories is
through NetSight.
An alternative approach would be for WedgeTail to run a
deterministic hash function over the packet header and use
Figure 2: Forwarding devices in ISP network. The dotted lines
represent traﬃc paths.
this hash to track packet as it traverses the network (i.e. gen-
erating labels). The choice of an appropriate hash function
would be crucial for this matter as is selecting the proper
packet header values. To achieve this, we use the packet
hashing function used in [12]. We then pick packet header
values such as source address, destination address from IP
header and source port and destination port in TCP header.
All the values used for the hashing are shown in Figure 3.
Note that in practice the labels can be quite small (e.g., 20
bit) – although the size of the packet labels depends on the
speciﬁc situation. Evidently, in this case, the overhead to
collect trajectory samples is small since the traﬃc that has
to be collected from nodes only consists of such labels (plus
some auxiliary information) [12].
An issue to consider is that in the unlikely case that col-
lisions were to occur, WedgeTail’s performance will not be
aﬀected. This is because such collisions will break the or-
der of forwarding devices when retrieving trajectories and
will result in invalid trajectories. Moreover, we envision the
hashing-based solution to be used as an alternative where
NetSight is not available and at most within small networks,
where collisions are much less likely to occur.
5.2 Scanning Zones
WedgeTail prioritizes forwarding devices for its inspection.
The core idea is that the analysis has to begin from the for-
warding devices that the majority of packets encounter while
traversing the network. To identify these, WedgeTail keeps
track of trajectories for all packets on all ports over time
and identiﬁes the most commonly involved forwarding de-
vices by looking at the denser regions. For instance, looking
at Figure 2 and the drawn trajectories, it is evident that
F D(b), F D(g) and F D(f ) are more commonly encountered
by packets. Indeed, identifying these is much more compli-
cated in a large network with a huge number of trajectories.
Therefore, WedgeTail reduces this large set into a repre-
sentative sample that encapsulates the most commonly vis-
ited forwarding devices. Formally, let T R[F D(i), F D(j)] de-
note the set of all the trajectories traversing between F D(i)
and F D(j) for all packets on all ports. Accordingly, de-
ﬁne {T R(N )} as the set of all trajectories in network N, or
{T R(N )} = {T R[F D(i), F D(j)]|∀(F D(i), F D(j)) ∈ N}.
Denote {T R(N )}(cid:48) as a subset of {T R(N )}, which if in-
spected by WedgeTail without loss of generality results in de-
tecting compromised forwarding devices. Indeed, such sam-
pling is challenging due to the complexity of packet routing
(e.g.
lack of ordering, lack of compact representation). To
852trajectory is not a subset of the expected trajectories, a ma-
licious forwarding device is detected.
Formally, let A denote the total ordered set of actual for-
warding devices for a packet traversing from target F D(i) to
F D(j) and E the ordered set of expected forwarding devices
for the same trajectory. If A (cid:54)⊆ E then F D(i) is malicious.
The comparison logic can be extended to diﬀerentiate be-
tween the four types of malicious actions (see §3) as follows:
Algorithm 2 Attack Detection Algorithm
Scan-for-Attacks(F D(i), P ortPi) {
Status S = Check-State-Change();
File F = Dataplane-Conﬁgrautions-Snapshot(S);
while Check-State-Change() == S do
List L = F.ForwardingDevices() – F D(i)
for all F D(j) ∈ L do
Packet P ck;
Trajectory Actual, Expected;
Pck.Source() = F D(i);
Pck.Destination() = F D(j);
P ck = Find-Packet(Pck.Source,
Pck.Destination);
Expected = HSA-Trajectory(P ck);
Actual = Actual-Trajectory(P ck);
if Actual (cid:54)= Expected then
Identify-Attack(F D(i), P ort(i));
end if
end for
end while
}
Here, without loss of generality we assume, there exists
only one valid trajectory between two forwarding devices.
1. Packet Replay: Occurs when a forwarding device
sends a copy of the packet to a third destination as well
as the intended destination. Figure 1 shows a packet repli-
cation attack example, where F D(b) replicates packets to
F D(f ) which in turn an attacker may use to forward some,
or all, of traﬃc to a machine under his control. A forwarding
device that replays packets(s) enables an attacker to execute
attacks such as surveillance and authentication attacks.
Detection: Let F D(k) be a forwarding device other than
F D(i)andF D(j). A(cid:48) be the set of forwarding devices in the
actual path excluding F D(k), or A−{F D(k)}. If ∃F D(k) ∈
A : F D(k) (cid:54)∈ E and A(cid:48) ⊆ E then WedgeTail detects a packet
replay attack.
2. Packet Misrouting: Occurs when a packet is di-
verged from the original destination and does not reach its
intended destination. This may be used to launch an attack
against network availability or as part of more complicated
threats. For example, by forming a triangle routing and
creating routing loop resulting in packet TTL value expira-
tion the network congestion may result in a partial, or total,
shutdown of the network.
Let F D(k) be a forwarding device other
than {F D(i), F D(j)} and A(cid:48) be the set of forwarding de-
vices in the actual path excluding F D(k), or A − {F D(k)}.
If ∃F D(k) ∈ A : F D(k) (cid:54)∈ E and A(cid:48) (cid:54)⊆ E then WedgeTail
detects a packet misrouting attack.
Detection:
3. Packet Dropping: A compromised forwarding de-
vice that drops packets creates a black or gray hole in the
network.
In the former, it drops all the packets, and in
the latter, it drops packets periodically or retransmission
of packets or drops packets randomly. Packet dropping is
Figure 3: Packet header ﬁelds used for labeling.
automatically compute this, in an optimised and unsuper-
vised way, WedgeTail adapts the Unsupervised Trajectory
Sampling technique proposed in [35].
The three-step Unsupervised Trajectory Sampling solu-
tion proposed in [35] may be summarized as follows. The
ﬁrst step involves adopting a symbolic representation of tra-
jectories to model all of the collected trajectories in an ap-
proximate way as vectors. The symbolic representation is
lossless in terms of mobility patterns and improves the speed
of computation. Thereafter, on top of the representation,
each trajectory is represented using a continuous function
that implicitly describes the representativeness of each con-
stituent part of it with respect to all of the collected tra-
jectories. Symbolic Trajectory algorithm, or SyTra, is used
to improve the initial representation of each trajectory by
relaxing its vector representation.
‘The idea is to adopt a
merging algorithm that identiﬁes the maximal time period
wherein the mobility pattern of each trajectory is preserved,
while in this augmented period it presents uniform behav-
ior in terms of representativeness’ [35].
In the third step,
an automatic method for trajectory sampling, known as T-
Sampling, based on the representativeness of the trajectories
is used. T-Sampling takes into account not only the most
(i.e., dense, frequent) but also the least representatives. This
is an important aspect of this work, which makes it the best
match for our requirements.
In fact, alternative sampling
techniques suﬀer from shortcomings that limit their appli-
cation for WedgeTail. For example, [4,5] are explorative and
supervised sampling techniques that assume a priori knowl-
edge of the underlying trajectories. Alternatively, [14, 27]
downsize the collection of trajectories and fail to select tra-
jectories important for mobility patterns.
Once the most commonly visited forwarding devices are
extracted from the network they are allocated the highest
priority of inspection and the remaining forwarding devices
are assigned a lower priority for inspection.
6. ATTACK DETECTION
The main attack detection algorithm (Scan-for-Attacks)
is presented in Algorithm 2. The algorithm takes as input
both a target forwarding device and a port and returns a ma-
licious node detailing its malicious action. First, a snapshot
of all network forwarding device conﬁgurations is retrieved.
Accordingly, the trajectories that a packet may take against
each of the other forwarding devices, and the control plane,
is computed – Note that the packets required for creating