服务器上进行这些标准的逻辑转换。这可能成为严重的负担。
实际问题：从Facebook平台API获取数据要比获取内部数据的开销
大很多。
随着应用越来越多地使用外部数据平台，诸如带宽占用、CPU负载
和请求延迟等因素很快累积起来。难道我们没有在自己的单个应用
栈的数据层中对此进行优化吗？没有技术让我们通过一次调用取得
多个数据集吗？如果在这个数据层中进行选择、限制和排序，结果
会怎样？
数据解决方案：类似内部数据采用的模式，实现外部数据访问模
式：一种查询服务。
Facebook的解决方案称为FQL，我们将在6.3.2节中详细介绍。FQL
很像SQL，但它将平台数据转换成字段和表，而不是简单松散地定
义为XMLschema中的对象。这让开发者能够在Facebook的数据上使
用标准的数据查询语义，这种方式可能与他们取得自已数据的方式
一样。同时，将计算推到平台一端的好处与将操作通过SQL推到数
据层的好处是相似的。在这两种情况下，并发者有意识地避免了在
应用逻辑中进行这种处理的代价。FQL代表了基于Facebook的内部
数据的另一项数据架构改进，是标准的黑盒Web服务的进步。但是
首先，我们先来看一种容易而明显的方法，它让开发者能够消除多
次数据请求的来回并销，同时我们也要说明为什么这是不够的。
6.3.1批量方法调用
对于负载问题最简单的解决方案，就是类似于Facebook的
batch.runAPI方法。这消除了多次通过HTTP栈对
1005
---
## Page 1007
http://api.facebook.com进行调用的来回开销，一批接受多个方法调用
的输入，一次返回输出的多棵XML树。在客户端，这个过程转变成
类似例6-12中的代码。
例6-12：批量方法调用
$facebook->api_client->begin_batch () ;
$friends=&$facebook->api_client->friends_get () ;
$notifications=&$facebook- >api_client- >
notifications_get () :
$facebook->api_client->end_batch () ;
在Facebook平台的PHP5客户端库中，end_batch实际上是向平台服务
器发起请求，取得所有结果，并针对每个结果更新引用的变量。这
重我们从一次用户会话中批量获取了用户数据。通常，人们用批量
查询机制将许多设置操作归为一组，如大量的Facebook个人描述更
新，或大量突发的用户通知。
这些批量操作很有效，但这也揭示了这种批量操作的主要问题。问
题是，每次调用必须与其他调用的结果无关。对多个不同用户的批
量操作通常具备这种特点，但有一种常见的情况仍然不能处理，即
使用一次调用的结果作为下次调用的输入。例6-13展示了不能利用
批量机制的一种常见情况。
例6-13：批量机制的不正确用法
$fields=array ('uid, 'name', 'books', 'pic', 'current_locati
on '):
$facebook->api_client->begin_batch () ;
$friends=&$facebook->api_client->friends_get () ;
$user_info=&$facebook->api_client->
users_getInfo (Sfriends, $fields) : //NO!
$facebook->api_client->end_batch ();
1006
---
## Page 1008
当客户端发出users_getlnfo请求时，Sfriends的内容显然还不存在。
FQL模型优雅地解决了这个问题和其他问题。
6.3.2FQL
FQL是一种简单的查询语言，它包装了Facebook的内部数据。输出
的格式通常与Facebook平台API的输出格式一样，但输入超出了简
单的RPC库的模型，变成了SQL的查询模型：命名的表和字段，包
含已知的关系。像SQL一样，这种技术添加了选择实例或范围的能
力，从数据行中选择字段子集的能力，并通过嵌套查询将更多的工
作推到数据服务器端，避免了通过RPC栈进行多次调用。
举个例子，如果期望的输出是所有用户中我朋友的"uid"、“name”、
“book”、“pic"和"current_location"字段，在我们的纯API模型中，我
们会使用例6-14中的过程。
例6-14：在客户端串联方法调用
：（uOT
$friend_uids=$facebook->api_client->friends_get () ;
$user_infos=users_getInfo ($friend_uids, $fields) ;
这导致了对数据服务器的多次调用（这里是2次），更大的延迟，
更大的失败可能性。相反，对于查看用户编号8055（实际上是你
的），我们在例6-15中写出这样的FQL语法并进行一次调用。
例6-15：利用FQL在服务器端串联方法调用
$fql="sELECT uid, name, books, pic, current_location FROM
profile
WHERE uid IN (SELECT uid2 from friends where uid1=8055) ";
$user_infos=$facebook->api_client->fql_query ($fql) ;
1007
---
## Page 1009
我们在概念上将users_getlnfo引用到的数据视为一个表，它基于一个
索引（uid），包含一些可选择的字段。如果正确地扩展，这种新的
语法可以支持一些新的数据访问能力：
限定范围查询（例如根据事件发生的时间）。
嵌套查询（SELECTfields_1FROMtableWHEREfieldIN（SELECT
fields_2FROM......））。
结果集大小限制和排序。
FQL的架构
开发者通过fql_queryAPI来调用FQL。问题的要点是在FQL的命名
“表”和“字段”中，统一外部API的命名“对象"和"属性”。我们仍然继
承了标准API的流程：通过内部方法取得数据，应用跟这个方法的
API调用相关的规则，然后根据第6.2.1节介绍的Thrif系统，转换到
输出。对于每个数据读取API方法，在FQL中都有一个对应的“表”，
代表了这次查询背后的数据抽象。例如，API方法users_getnfo，它
提供给定用户ID的姓名、照片、书籍和当前位置等字段，在FQL中
它就表现为用户表和对应的字段。fql_query的输出实际上也符合标
准API的输出（如果修改XSD来允许省略对象小的字段），所以在
用户表上调用fql_query返回的输出与相应的users_getinfo调用是等价
的。事实上，像user_getlnfo这样的调用在Facebook的服务器端通常
是实现为FQL调用的！
注意：在编写本章时，FQL只支持SELECT，不支持INSERT、
UPDATE、REPLACE、DELETE和其他操作，所以只有读取方法可
以通过FQL来实现。大多数操作这类数据的Facebook平台API方法现
在是只读的。
我们从这个用户表开始，以它为例，创建FQL系统来支持对它的查
询。在平台的各个数据抽象层之下（内部调用、users_getlnfo外部
API调用，以及新的FQL的用户表），想象Facebook在自己的数据库
中有一个名为"user"的表（例6-16）。
例6-16：Facebook数据表示例
1008
---
## Page 1010
>describe user:
| Field|Type|Keyl
|uid|bigint (20) |PRI1
|name |varchar (255) |1
Ipic|varchar (255) 11
|books|varchar (255) 11
|loc_cityl varchar (255) 11
|loc_state|varchar (255) 11
|loc_country|varchar (255) 11
|loc_ziplint (5) 11
在Facebook的程序栈中，支持我们访问这个表的方法是：
function user_get_info ($uid)
它在我们选择的语言（PHP）中返回一个对象，通常此后再应用隐
私逻辑，并展现在http://facebook.com上。我们的Web服务实现做的
事情相当类似，将Web请求的GET/POST内容转给这样一个调用，得
到类似的栈对象，应用隐私逻辑，然后通过Thrift将它变成一个XML
响应（图6-2）。
我们可以在FQL中将user_get_info包装起来，实际实现这个模型，将
表、字段、内部函数和隐私组织成一个逻辑上的、可重复的形式。
下面是例6-15中的FQL调用创建的一些关键对象，以及描述它们的
关系的方法。讨论所有的字符串解析、语法实现、可选索引、交集
1009
---
## Page 1011
查询和实现许多不同的组合表达式（比较、“in"语句、交集、非交
集）超出了本章的范围。这里我们只是关注面向数据的部分：FQL
中数据的对应字段和表对象的高层规范，并将查询输入语句转换每
个字段的can_see和evaluate函数（例6-17）。
例6-17：FQL字段和表示例
class FQLField{
//e.g.table="user", name="current_location"
public function__construct ($user, $app_id, $table, $name)
public function can_see ($id) (..)
/ /mapping: "index"id->Thrift-compatible data object
public function evaluate ($id) (...)
上
class FQLTable{
//a static list of contained fields:
//mapping:()->（'books'=>'FQLUserBooks'，'pic'-
>'FQLUser Pic ', ..)
public function get_fields () (...)
上
FQLField和FQLTable对象构成了这个访问数据的新方法。FQLField
包含了针对数据的逻辑，将“行”（如用户ID）和查看者的信息（用
户和apP_id）转换成我们内部的栈数据调用。在此之上，我们确保
隐私评估利用要求的can_see方法得以正确实现。在我们处理一个请
求时，我们可以在内存中为每个命名的表格（“user"）创建这样一
个FQLTable对象，为每个命名的字段创建一个FQLField对象（为
1010
---
## Page 1012
中的每个FQLField对象一般会使用底层相同的数据访问程序（在下
面的例子里，是user_get_info），虽然不一定是这样—这只是一个方
便的接口。例6-18展示了用户表中典型的字符串字段的例子。
例6-18：将核心数据库映射到FQL字段定义
//base object for any simple FQL field in the user table.
class FQLStringUserField extends FQLField{
public function__construct ($user, $app_id, $table, $name)
public function evaluate ($id)(
//call into internal function
$info=user_get_info ($id) ;
if ($info&&isset($info[$this->name]) ){
return$info[$this->name] :
上
return null:
{
public function can_see ($id) {
//call into internal function
return can_see （$id, $user, $table， $name);
上