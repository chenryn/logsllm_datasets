white area is visible to the attacker, while the grey area is not. Data leaving
a hardware enclave is encrypted, but memory addresses are not encrypted.
are malicious and want to learn the queries of other users:
users submit their queries to the enclave, which executes the
queries correctly and privately for each user. A malicious user
cannot learn the query of another user. Supporting multiple
users is difﬁcult with traditional ORAM systems because they
need users to follow an ORAM protocol correctly [6], else
they affect each other’s privacy.
We also demonstrate the viability of Oblix for three existing
applications that can beneﬁt from private search indices. Two
of these three applications require support for multiple users.
We show how Oblix supports these applications with latencies
on the order of a few milliseconds. Since search indices are
basic building blocks, we expect Oblix to have further useful
applications.
Private contact discovery for Signal.
Signal [2] is an
encrypted messaging system that recently introduced a service
for private contact discovery: users can query the service
to determine which contacts in their phone also use Signal,
without revealing their contact list to Signal’s servers. The
service performs a full scan of Signal’s database within an
SGX enclave to ensure obliviousness at the server [44]. We
show that Oblix provides a solution with lower latency. For
every contact in the user’s list, Oblix performs a logarithmic
search in the database instead of a linear scan.
Anonymizing Google’s Key transparency. Google’s Key
Transparency [1, 46] enables users to discover public keys of
other users. The service guarantees the integrity of the retrieved
public key, but does not provide anonymity: the server learns
the identity of the user whose key it returns. We show that
Oblix can be used to anonymize Key Transparency with low
latency. In particular, we show that Oblix provides an order-
of-magnitude improvement in latency compared to a baseline
approach that offers the same level of security.
Oblivious searchable encryption. As discussed above, many
searchable encryption (SE) schemes suffer from a long line
of attacks [4, 10, 26, 30, 34, 42, 53, 79] that exploit access
patterns. We use Oblix to augment the security of searchable
encryption by eliminating the leakage from access patterns.
We evaluate the augmented SE scheme over the entire Enron
email corpus [19] and show that it can support reads/writes
with a latency of a few milliseconds.
II. SYSTEM OVERVIEW
We provide an overview of Oblix. Fig. 2 shows the archi-
tecture of the system: multiple users interact with a server
equipped with a hardware enclave. (While our implementation
uses Intel SGX enclaves, Oblix’s design only requires an
abstract notion of an enclave.) The data stored on the server
is encrypted with a key held in the enclave. Each user uses
remote attestation [35] to ensure that it is communicating
with a correctly-setup enclave and establishes a secure (TLS)
connection with that enclave. Over this secure channel, the
user then sends search, insert, or delete queries to the server,
which responds after running Oblix’s protocols.
Oblix exposes to applications the interface of a search index
expressed as a sorted multimap (see Fig. 1). This index maps
a key k to an array of sorted and distinct values (v1, . . . , vn).
For example, if one wants to use this index to search words in
documents, one maps each word w (the key) to a list of pairs
(si, di), where di is the identiﬁer of the document containing
w and si is a relevance score for that document. As discussed,
the scores enable meaningful selection of the top-r documents
for a search query, and thus aid in hiding the result size by
returning a ﬁxed number of results. Concretely, DOSM provides
the function Map.Find(k, i, j) → (vi, . . . , vj), which returns
the i-th through j-th values for a key k. The user application
can make multiple requests to the same key k for different
intervals, and Oblix does not reveal to the attacker that the
requests are for the same key or interval. Nevertheless, the
user application must exercise caution when issuing many
simultaneous requests for the same key to prevent the attacker
from correlating them due to their timing. Like in prior work
on searchable encryption, we focus only on the design of the
search index, and recommend standard and complementary
techniques [64] to retrieve documents matching a search.
A. Threat model
a) Server: We employ a general and expressive attacker
model for a hardware enclave (see Fig. 2). The attacker can
perform any hardware attack it wishes on the memory and on
the memory bus, but cannot attack the processor in any way,
and cannot glean any information from inside the processor
(including processor keys). This attacker controls the server’s
software stack outside of the enclave, including the OS.
With respect to memory access patterns, we assume that
the adversary can observe (and modify) memory addresses
and (encrypted) data on the memory bus, in memory, or in
secondary storage (as in Fig. 2). We divide access patterns
into two types: access patterns to data and access patterns
to code [69, 75]. The doubly-oblivious algorithms of Oblix
prevent leakage of both types of access patterns assuming only
a simple “oblivious swap” primitive. Our source code carefully
implements these algorithms, but we do not ensure that the ﬁnal
binary hides all access patterns to code because external factors
like compiler optimizations and cache replacement policies
inﬂuence how instructions are fetched into cache. Preventing
these factors from introducing data-dependent code accesses
281
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:38:06 UTC from IEEE Xplore.  Restrictions apply. 
is out of the scope of this paper; complementary prior work
exists that can aid in this task [31, 41].
At the same time, Oblix considers as out of scope any
side-channel leakage from within the enclave (e.g., cache-
timing, branch predictor-based, power analysis, or other timing
attacks) [9, 32, 29, 49, 58, 71], as well as rollback attacks
[65]. Techniques to mitigate such attacks are complementary
to Oblix, and many proposed solutions [14, 16, 31, 59, 60] can
be applied to Oblix. Finally, denial-of-service attacks are out
of scope: we do not prevent a cloud provider from destroying
all client data or denying access to it. Doing so is not in the
provider’s interest, as clients can choose a different provider.
Oblix achieves protection against modiﬁcation attacks (e.g.,
attacker modiﬁes data or queries) via Merkle hash trees [47]
both by using Intel SGX’s built-in integrity tree and by
employing a separate hash tree for data stored outside. These
techniques are standard, so in the rest of this paper, we do not
elaborate further on them and focus only on how we protect
against passive attackers via our (doubly-)oblivious protocols.
b) Client: In Oblix, a client can also misbehave: the client
can release its own queries or query results if it wishes, but
it cannot affect the privacy of the queries or results of other
clients. If a client wants to protect its query privacy, the client
should faithfully follow Oblix’s protocol.
III. PRELIMINARIES
We use two cryptographic building blocks: Path ORAM [64]
and oblivious data structures [74]. In the next two sub-sections,
we recall aspects of these schemes that are relevant to this paper.
Below and throughout this paper, we consider algorithms that
receive and update a client state; we use the notation “mut st”
to emphasize that the state variable st is mutable.
A. Path ORAM
Path ORAM [64] is a type of ORAM protocol [27]. It enables
a client to perform oblivious reads and writes to external
(server) memory with low bandwidth and latency.
The external (server) memory is arranged in a binary tree
of N buckets; each bucket stores C blocks of B bits each.
The client maintains two data structures: (i) a position map
Positions, which assigns to each block identiﬁer bid a leaf lf
in the aforementioned tree such that block bid is stored by
one of the buckets on the path from the root to lf; (ii) a stash
Stash, which maps block identiﬁers to blocks for all blocks
that have not yet been evicted. (The same block identiﬁer may
appear in Positions and Stash.) When using Path ORAM for
oblivious data structures (see Section III-B), the client does not
store Positions in full, but only a small portion of it, reducing
the size of the client’s state to constant.
Below, we summarize how the client can initialize the
external memory (via ORAM.Init), and then read blocks (via
ORAM.ReadBlock), modify them, and write them back (via
ORAM.Evict). This high-level summary will be useful later.
1 ) → st. On input a
• Initialization: ORAM.InitS
maximum number of blocks m, and a list of initial blocks
(m, [bli]n
1 (with n ≤ m), ORAM.Init initializes the server S with
[bli]n
2log((cid:2)m/C(cid:3)) buckets, and outputs the initial client state st.
(mut st, bid, lf) → bl.
• Read a block: ORAM.ReadBlockS
On input client state st, a block identiﬁer bid, and leaf lf,
ORAM.ReadBlock fetches all blocks on the path from the
root to lf, inserts these blocks into st.Stash, and outputs the
block bl in this path having identiﬁer bid. Furthermore, it
assigns bid a new random leaf in st.Positions (ensuring that
the next access to this block fetches a random path).
(mut st, [lfi]n
The client can arbitrarily modify the contents of blocks in Stash.
To write back modiﬁed blocks, the client runs ORAM.Evict on
input all leaves [lfi]n
1 fetched via ORAM.ReadBlock since the
last ORAM.Evict call. Informally, eviction reconstructs paths
for these leaves using blocks in Stash, and then writes these
paths back to the server. Eviction is designed to ensure that
Stash has a bounded size, which is crucial for efﬁciency.
• Stash eviction: ORAM.EvictS
1 ). On input
client state st and a list of leaves [lfi]n
1 , ORAM.Evict
constructs buckets on the paths deﬁned by [lfi]n
1 , as follows.
Proceeding layer-by-layer in the ORAM tree, starting from
the leaf layer to the root layer, for each block in Stash,
determine whether the block may reside in a bucket on this
layer (as determined by the corresponding leaf in Positions
and whether there is space in that bucket). If so, the block
is evicted from the stash into that bucket. Any blocks that
are not evicted remain in Stash. The ﬁnal set of buckets is
then written back to external memory.
We deﬁne security for Path ORAM in Appendix B.
B. Framework for oblivious data structures
Oblivious data structures (ODS) [74] is a framework for
designing oblivious analogues of data structures that can be
expressed as trees of bounded degree. This property is captured
by the next deﬁnition.
Deﬁnition 1. A data structure has tree-like accesses if it is
represented via nodes storing (data and) pointers to other
nodes such that: (i) every node has a unique predecessor (a
node pointing to it); (ii) every operation accesses a unique
root node before any other node; (iii) every operation accesses
a non-root node’s predecessor before it accesses the node.
The ﬁrst step of using the ODS framework is to express
the desired functionality via a data structure that has tree-like
accesses; this could mean modifying an existing data structure
or designing one from scratch.
The second step is an initialization procedure that converts
an instance of this plaintext data structure into its oblivious
counterpart as follows. The client converts plaintext data
structure nodes into ODS nodes by replacing all plaintext
pointers with ODS pointers. (These depend on the underlying
ORAM scheme. For example, when using Path ORAM, an ODS
pointer is a pair ptr = (bid, lf) consisting of a block identiﬁer
and a leaf.) Afterwards, the client encrypts and outsources all
ODS nodes to the (untrusted) server, while retaining only the
root’s ODS pointer. Deﬁnition 1 ensures that the client does
not need to store other pointers.
282
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:38:06 UTC from IEEE Xplore.  Restrictions apply. 
Subsequently, when executing an operation on the data
structure, the client runs a special start procedure, then uses
an access procedure to obliviously perform all the memory
accesses required by the operation, and then runs a ﬁnalize
procedure. To access a certain node, the client follows pointers
from the root to the node; throughout, the client updates
positions and data as required by the data structure operation.
• Initialization: ODS.InitS
rt). On
input a maximum number of nodes m, a list of data structure
nodes [nodei]n
1 , and an index irt for the “root” of the data
structure in this list, ODS.Init converts the nodes in [nodei]n
1
to ODS nodes, initializes the server and outputs initial client
state st and an ODS pointer ptr
, irt) → (st, ptr
(m, [nodei]n
1
rt for the root.
• Start: ODS.Start(mut st, ptr
rt). On input the current client
rt, ODS.Start updates the
• Access: ODS.AccessS
state st and the root’s pointer ptr
state to use rt for future invocations of ODS.Access.
(mut st, op) → res. On input
the
current client state st, and operation type op, ODS.Access
outputs the operation result res (and updates the state st).
There are four operation types.
– Read: op = read(ptr) and res = node. Takes as input a
pointer and outputs the node at the pointer.
– Insert op = ins(node) and res = ptr. Takes as input a
node to insert and outputs a pointer to it.
– Delete: op = del(ptr) and res = ⊥. Takes as input a
pointer to a node to delete and outputs ⊥.
– Write: op = write(node, ptr) and res = ⊥. Takes as
input a node to write and a pointer to it, and outputs ⊥.
• Finalize: ODS.FinalizeS
rt. On
input current client state st, the (possibly updated) data
structure root node, and an upper bound bound on the
number of ORAM.ReadBlock operations to be performed,
ODS.Finalize invokes ORAM.ReadBlock on dummy inputs
enough times to make the total number of reads equal to
bound, and outputs an updated root pointer ptr
(mut st, node, bound) → ptr
rt.
We deﬁne security of ODS schemes in Appendix C.
IV. OBLIVIOUS SORTED MULTIMAPS
Our oblivious sorted multimap (OSM) enables a client to
outsource a certain type of key-value map to an untrusted server
so that the map remains encrypted and, yet, the client can still
perform search, insert, and delete operations with small cost
(in latency and bandwidth) without revealing which key-value
pairs of the map were accessed. This notion extends previous
notions such as oblivious maps [55, 74].
The following sub-sections are organized as follows: in
Section IV-A we deﬁne sorted multimaps, the data structure
supported by OSM; in Section IV-B we deﬁne OSM schemes;
in Section IV-C we informally describe our construction of an
OSM scheme. We provide more details in Appendix A.
A. Sorted multimaps
A sorted multimap Map is a data structure that maps a key
k ∈ {0, 1}(cid:2)k to a (possibly empty) list of sorted and distinct