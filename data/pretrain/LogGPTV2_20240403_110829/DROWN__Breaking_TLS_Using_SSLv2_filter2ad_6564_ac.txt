unpadded data in the RSA plaintext cd
0. Otherwise,
mk0 is a randomly generated sequence of 5 bytes.
3. The attacker re-connects to the server with the
same RSA ciphertext c0. The server responds
with another ServerVerify message that contains
the current challenge encrypted using the current
server_write_key. If the decrypted RSA cipher-
694  25th USENIX Security Symposium 
USENIX Association
6
TLSClientTLSClientAttackAlgorithmAttackAlgorithmTLSServerTLSServerClientHello ServerHelloCertificateServerHelloDoneClientHello ServerHelloClientMasterKeyClientHello Finished CertificateFinishedServerHelloDoneRecord TLS 1.2 handshakeChosen-ciphertext attack...SSLv2ServerSSLv2ServerBleichenbacher OracleBreak 40-bitencryptionBreak 40-bitencryptioncRSAc'RSAcRC2kRC2m?ServerVerifyClientKeyExchangetext was valid, the attacker can use mk0 to decrypt a
correct challenge value from the ServerVerify
message. Otherwise, if the ServerVerify message
does not decrypt to challenge, the RSA ciphertext
was invalid, and mk0 must have been random.
Thus we can instantiate an oracle OSSLv2-export using
the procedure above; each oracle query requires two
server connections and 240 decryption attempts in the
simplest case. For each oracle call OSSLv2-export(c), the
attacker learns whether c is valid, and if so, learns the
two most significant bytes 0x00 02, the sixth least sig-
nificant 0x00 delimiter byte, and the value of the 5 least
significant bytes of the plaintext m.
4.2 TLS decryption attack
In this section, we describe how the oracle described in
Section 4.1 can be used to carry out a feasible attack to
decrypt passively collected TLS ciphertexts.
As described in Section 3, we consider a server that
accepts TLS connections from clients using an RSA pub-
lic key that is exposed via SSLv2, and an attacker who is
able to passively observe these connections.
We also assume the server supports export cipher suites
for SSLv2. This can happen for two reasons. First, the
same server operators that fail to follow best practices in
disabling SSLv2 [40] may also fail to follow best prac-
tices by supporting export cipher suites. Alternatively,
the server might be running a version of OpenSSL prior
to January 2016, in which case it is vulnerable to the
OpenSSL cipher suite selection bug described in Sec-
tion 7, and an attacker may negotiate a cipher suite of his
choice independent of the server configuration.
The attacker needs access to computing power suffi-
cient to perform a 250 time attack, mostly brute forcing
symmetric key encryption. After our optimizations, this
can be done with a one-time investment of a few thousand
dollars of GPUs, or in a few hours for a few hundred
dollars in the cloud. Our cost estimates are described
in Section 4.3.
4.2.1 Constructing the attack
The attacker can exploit the SSLv2 vulnerability follow-
ing the generic attack outline described in Section 3.2,
consisting of several distinct phases:
0. The attacker passively collects 1,000 TLS hand-
shakes from connections using RSA key exchange.
1. They then attempt to convert the intercepted TLS
ciphertexts containing a 48-byte premaster secret
to valid RSA PKCS#1 v1.5 encoded ciphertexts
containing five-byte messages using the fractional
trimmers described in Section 3.2.1, and querying
OSSLv2-export. The attacker sends the modified ci-
phertexts to the server using fresh SSLv2 connec-
tions with weak symmetric ciphers and uses the
ServerVerify messages to deduce ciphertext va-
lidity as described in the previous section. For each
queried RSA ciphertext, the attacker must perform
a brute force attack on the weak symmetric cipher.
The attacker expects to obtain a valid SSLv2 cipher-
text after roughly 10,000 oracle queries, or 20,000
connections to the server.
2. Once the attacker has obtained a valid SSLv2 RSA
ciphertext c1 = me
1, they use the shifting technique
explained in Section 3.2.2 to find an integer s1 such
that m2 = m1 · 2−40 · s1 is also SSLv2 conformant.
Appendix A.4 contains more details on this step.
3. The attacker then applies the shifting technique again
to find another integer s2 such that m3 = m2·2−40·s2
is also SSLv2 conformant.
4. They then search for yet another integer s3 such that
m3 · s3 is also SSLv2 conformant.
5. Finally, the attacker can continue with our adapted
Bleichenbacher iteration technique described in Sec-
tion 3.2.3, and decrypts the message after an ex-
pected 10,000 additional oracle queries, or 20,000
connections to the server.
6. The attacker can then transform the decrypted plain-
text back into the original plaintext, which is one of
the 1,000 intercepted TLS handshakes.
The rationale behind the different phases. Bleichen-
bacher’s original algorithm requires a conformant mes-
sage m0, and a multiplier s1 such that m1 = m0 · s1 is also
conformant. Naïvely, it would appear we can apply the
same algorithm here, after completing Phase 1. However,
the original algorithm expects s1 to be of size about 224.
This is not the case when we use fractions for s1, as the
integer s1 = ut−1 mod N will be the same size as N.
Therefore, our approach is to find a conformant mes-
sage for which we know the 5 most significant bytes; this
will happen after multiple rotations and this message will
be m3. After finding such a message, finding s3 such that
m4 = m3 · s3 is also conformant becomes trivial. From
there, we can finally apply the adapted Bleichenbacher
iteration technique as described in Appendix A.5.
4.2.2 Attack performance
The attacker wishes to minimize three major costs in the
attack: the number of recorded ciphertexts from the victim
client, the number of connections to the victim server, and
the number of symmetric keys to be brute forced. The
requirements for each of these elements are governed
by the set of fractions to be multiplied with each RSA
ciphertext in the first phase, as described in Section 3.2.1.
Table 1 highlights a few choices for F and the resulting
performance metrics for 2048-bit RSA keys. Appendix A
provides more details on the derivation of these numbers
USENIX Association  
25th USENIX Security Symposium  695
7
Optimizing Cipher-
texts
12,743
1,055
4,036
2,321
906
for
offline work
offline work
compromise
online work
online work
|F|
1
10
2
3
8
SSLv2 Offline
work
249.64
250.63
249.98
251.99
252.25
connections
50,421
46,042
41,081
38,866
39,437
Table 1: 2048-bit Bleichenbacher attack complexity.
The cost to decrypt one ciphertext can be adjusted by
choosing the set of fractions F the attacker applies to
each of the passively collected ciphertexts in the first
step of the attack. This choice affects several parameters:
the number of these collected ciphertexts, the number of
connections the attacker makes to the SSLv2 server, and
the number of offline decryption operations.
Key size Phase 1 Phases 2–5
1024
2048
4096
4,129
6,919
18,286
4,132
12,468
62,185
Total Offline
work
250.01
250.76
252.16
queries
8,261
19,387
80,471
Table 2: Oracle queries required by our attack.
In
Phase 1, the attacker queries the oracle until an SSLv2
conformant ciphertext is found. In Phases 2–5, the at-
tacker decrypts this ciphertext using leaked plaintext.
These numbers minimize total queries.
In our attack,
an oracle query represents two server connections.
and other optimization choices. Table 2 gives the expected
number of Bleichenbacher queries for different RSA key
sizes, when minimizing total oracle queries.
4.3 Implementing general DROWN with GPUs
The most computationally expensive part of our general
DROWN attack is breaking the 40-bit symmetric key, so
we developed a highly optimized GPU implementation of
this brute force attack. Our first naïve GPU implementa-
tion performed around 26MH/s, where MH denotes the
time required for testing one million possible values of
mksecret. Our optimized implementation runs at a final
speed of 515MH/s, a speedup factor of 19.8.
We obtained our improvements through a number of
optimizations. For example, our original implementation
ran into a communication bottleneck in the PCI-E bus
in transmitting candidate keys from CPU to GPU, so we
removed this bottleneck by generating key candidates
on the GPU itself. We optimized memory management,
including storing candidate keys and the RC2 permutation
table in constant memory, which is almost as fast as a
register, instead of slow global memory.
We experimentally evaluated our optimized implemen-
tation on a local cluster and in the cloud. We used it to
execute a full attack of 249.6 tested keys on each platform.
The required number of keys to test during the attack is
a random variable, distributed geometrically, with an ex-
pectation that ranges between 249.6 and 252.5 depending
on the choice of optimization parameters. We treat a full
attack as requiring 249.6 tested keys overall.
Hashcat. Hashcat [20] is an open source optimized
password-recovery tool. The Hashcat developers allowed
us to use their GPU servers for our attack evaluation. The
servers contain a total of 40 GPUs: 32 Nvidia GTX 980
cards, and 8 AMD R9 290X cards. The value of this
equipment is roughly $18,040. Our full attack took less
than 18 hours to complete on the Hashcat servers, with
the longest single instance taking 17h9m.
Amazon EC2. We also ran our optimized GPU code
on the Amazon Elastic Compute Cloud (EC2) service.
We used a cluster composed of 200 variable-price “spot”
instances: 150 g2.2xlarge instances, each containing
one high-performance NVIDIA GPU with 1,536 CUDA
cores and 50 g2.8xlarge instances, each containing four
of these GPUs. When we ran our experiments in January
2016, the average spot rates we paid were $0.09/hr and
$0.83/hr respectively. Our full attack finished in under 8
hours including startup and shutdown for a cost of $440.
4.4 OpenSSL SSLv2 cipher suite selection bug
General DROWN is a protocol flaw, but the population
of vulnerable hosts is increased due to a bug in OpenSSL
that causes many servers to erroneously support SSLv2
and export ciphers even when configured not to. The
OpenSSL team intended to disable SSLv2 by default in
2010, with a change that removed all SSLv2 cipher suites
from the default list of ciphers offered by the server [36].
However, the code for the protocol itself was not re-
moved in standard builds and SSLv2 itself remained en-
abled. We discovered a bug in OpenSSL’s SSLv2 ci-
pher suite negotiation logic that allows clients to select
SSLv2 cipher suites even when they are not explicitly
offered by the server. We notified the OpenSSL team of
this vulnerability, which was assigned CVE-2015-3197.
The problem was fixed in OpenSSL releases 1.0.2f and
1.0.1r [36].
5 Special DROWN
We discovered multiple vulnerabilities in recent (but not
current) versions of the OpenSSL SSLv2 handshake code
that create even more powerful Bleichenbacher oracles,
and drastically reduce the amount of computation required
to implement our attacks. The vulnerabilities, designated
CVE-2016-0703 and CVE-2016-0704, were present in
the OpenSSL codebase from at least the start of the reposi-
tory, in 1998, until they were unknowingly fixed on March
696  25th USENIX Security Symposium 
USENIX Association
8
4, 2015 by a patch [28] designed to correct an unrelated
problem [11]. By adapting DROWN to exploit this spe-
cial case, we can significantly cut both the number of
connections and the computational work required.
5.1 The OpenSSL “extra clear” oracle
Prior
to the fix, OpenSSL servers improperly al-
lowed the ClientMasterKey message to contain
clear_key_data bytes for non-export ciphers. When
such bytes are present, the server substitutes them for
bytes from the encrypted key. For example, consider the
case that the client chooses a 128-bit cipher and sends
a 16-byte encrypted key k[1],k[2], . . . ,k [16] but, contrary
to the protocol specification, includes 4 null bytes of
clear_key_data. Vulnerable OpenSSL versions will
construct the following master_key:
[00 00 00 00 k[1] k[2] k[3] k[4] . . . k[9] k[10] k[11] k[12]]
This enables a straightforward key recovery attack
against such versions. An attacker that has intercepted
an SSLv2 connection takes the RSA ciphertext of the
encrypted key and replays it in non-export handshakes to
the server with varying lengths of clear_key_data. For
a 16-byte encrypted key, the attacker starts with 15 bytes
of clear key, causing the server to use the master_key:
[00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 k[1]]
The attacker can brute force the first byte of the en-
crypted key by finding the matching ServerVerify mes-
sage among 256 possibilities. Knowing k[1], the attacker
makes another connection with the same RSA ciphertext
but 14 bytes of clear key, resulting in the master_key:
[00 00 00 00 00 00 00 00 00 00 00 00 00 00 k[1] k[2]]
The attacker can now easily brute force k[2]. With
only 15 probe connections and an expected 15· 128 =
1,920 trial encryptions, the attacker learns the entire
master_key for the recorded session.
As this oracle is obtained by improperly sending unex-
pected clear-key bytes, we call it the Extra Clear oracle.
This session key-recovery attack can be directly con-
verted to a Bleichenbacher oracle. Given a candidate
ciphertext and symmetric key length (cid:29)k, the attacker sends