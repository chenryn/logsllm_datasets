# []{#setting-your-routing-protocols_configuring-and-managing-networking.html#setting-your-routing-protocols_configuring-and-managing-networking}第 43 章 为您的系统设置路由协议 {.title}
:::
这部分论述了如何使用 `自由范围路由`{.literal} （`FRRouting`{.literal} 或
`FRR`{.literal}）功能为您的系统启用和设置所需的路由协议。
::: section
::: titlepage
# []{#setting-your-routing-protocols_configuring-and-managing-networking.html#intro-to-frr_setting-your-routing-protocols}FRRouting 介绍 {.title}
:::
`Free Range Routing`{.literal} （`FRRouting`{.literal} 或
`FRR`{.literal}）是一个路由协议堆栈，由 `AppStream`{.literal}
软件仓库中的 `frr`{.literal} 软件包提供。
`FRR`{.literal} 代替了以前的 RHEL 版本中使用的
`Quagga`{.literal}。因此，`FRR`{.literal} 提供基于 TCP/IP
的路由服务，并支持多个 IPv4 和 IPv6 路由协议。
支持的协议包括：
::: itemizedlist
-   边框网关协议（`BGP`{.literal}）
-   Intermediate System to Intermediate System (`IS-IS`{.literal})
-   Open Shortest Path First(`OSPF`{.literal})
-   协议依赖多播(`PIM`{.literal})
-   路由信息协议(`RIP`{.literal})
-   下一代路由信息协议(`RIPng`{.literal})
-   Enhanced Interior Gateway Routing Protocol (`EIGRP`{.literal})
-   Next Hop Resolution Protocol (`NHRP`{.literal})
-   双向检测(`BFD`{.literal})
-   Policy-based Routing (`PBR`{.literal})
:::
FRR 是下列服务的集合：
::: itemizedlist
-   `zebra`{.literal}
-   `bgpd`{.literal}
-   `isisd`{.literal}
-   `ospfd`{.literal}
-   `ospf6d`{.literal}
-   `pimd`{.literal}
-   `ripd`{.literal}
-   `ripngd`{.literal}
-   `eigrpd`{.literal}
-   `nhrpd`{.literal}
-   `bfdd`{.literal}
-   `pbrd`{.literal}
-   `staticd`{.literal}
-   `fabricd`{.literal}
:::
如果安装了
`frr`{.literal}，系统可充当专用路由器，该路由器可使用路由协议与其它路由器在内部或外部网络中交换路由信息。
:::
::: section
::: titlepage
# []{#setting-your-routing-protocols_configuring-and-managing-networking.html#setting-up-frrouting_setting-your-routing-protocols}设置 FRRouting {.title}
:::
本节介绍如何设置自由范围路由（FRRouting 或 FRR）。
::: itemizedlist
**先决条件**
-   请确定在您的系统中安装了 `frr`{.literal} 软件包：
:::
``` literallayout
# dnf install frr
```
::: orderedlist
**步骤**
1.  编辑 `/etc/frr/daemons`{.literal}
    配置文件，并为您的系统启用所需的守护进程。
    例如，要启用 `ripd`{.literal} 守护进程，请包含以下行：
    ``` literallayout
    ripd=yes
    ```
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    `zebra`{.literal} 守护进程必须总是被启用，因此您必须设置
    `zebra=yes`{.literal} 才能使用 `FRR`{.literal}。
    :::
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    默认情况下，`/etc/frr/daemons`{.literal} 包含所有守护进程的
    `[daemon_name]=no`{.literal}
    条目。因此，所有守护进程都被禁用，在新的系统安装后启动
    `FRR`{.literal} 将无效。
    :::
2.  启动 `frr`{.literal} 服务：
    ``` literallayout
    # systemctl start frr
    ```
3.  另外，您还可以在引导时自动启动 `FRR`{.literal} ：
    ``` literallayout
    # systemctl enable frr
    ```
:::
:::
::: section
::: titlepage
# []{#setting-your-routing-protocols_configuring-and-managing-networking.html#changing-frrs-configuration_setting-your-routing-protocols}修改 FRR 的配置 {.title}
:::
本节描述：
::: itemizedlist
-   设置 `FRR`{.literal} 后如何启用附加守护进程
-   设置 `FRR`{.literal} 后如何禁用守护进程
:::
::: itemizedlist
**先决条件**
-   `FRR`{.literal} 设置，如 [设置 FRR
    所述](#setting-your-routing-protocols_configuring-and-managing-networking.html#setting-up-frrouting_setting-your-routing-protocols "设置 FRRouting"){.link}。
:::
::: orderedlist
**步骤**
1.  编辑 `/etc/frr/daemons`{.literal} 配置文件，并将所需守护进程的行改为
    `yes`{.literal}，而不是 `no`{.literal}。
    例如，要启用 `ripd`{.literal} 守护进程：
    ``` literallayout
    ripd=yes
    ```
2.  重新载入 `frr`{.literal} 服务：
    ``` literallayout
    # systemctl reload frr
    ```
:::
:::
::: section
::: titlepage
# []{#setting-your-routing-protocols_configuring-and-managing-networking.html#modifying-a-configuration-of-a-particular-daemon_setting-your-routing-protocols}修改特定守护进程的配置 {.title}
:::
使用默认配置，`FRR`{.literal} 中的每个路由守护进程都只能充当普通路由器。
要进行守护进程的额外配置，请使用以下步骤。
::: orderedlist
**步骤**
1.  在 `/etc/frr/`{.literal}
    目录中，为所需守护进程创建一个配置文件，并将该文件命名如下：
    ``` literallayout
    [daemon_name].conf
    ```
    例如，若要进一步配置 `eigrpd`{.literal} 守护进程，请在上述目录中创建
    `eigrpd.conf`{.literal} 文件。
2.  使用所需内容填充新文件。
    有关特定 `FRR`{.literal} 守护进程的配置示例，请查看
    `/usr/share/doc/frr/`{.literal} 目录。
3.  重新载入 `frr`{.literal} 服务：
    ``` literallayout
    # systemctl reload frr
    ```
:::
:::
:::
[]{#testing-basic-network-settings_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#testing-basic-network-settings_configuring-and-managing-networking.html#testing-basic-network-settings_configuring-and-managing-networking}第 44 章 测试基本网络设置 {.title}
:::
这部分论述了如何执行基本网络测试。
::: section
::: titlepage
# []{#testing-basic-network-settings_configuring-and-managing-networking.html#using-the-ping-utility-to-verify-the-ip-connection-to-other-hosts_testing-basic-network-settings}使用 ping 程序验证 IP 到其他主机的连接 {.title}
:::
`ping`{.literal} 实用程序将 ICMP
数据包发送到远程主机。您可以使用此功能来测试 IP
与不同主机的连接是否正常工作。
::: itemizedlist
**流程**
-   将主机的 IP 地址放在同一子网中，如您的默认网关：
    ``` literallayout
    # ping 192.0.2.3
    ```
    如果命令失败，请验证默认网关设置。
-   在远程子网中指定主机的 IP 地址：
    ``` literallayout
    # ping 198.162.3.1
    ```
:::
如果命令失败，请验证默认网关设置，并确保网关在连接的网络间转发数据包。
:::
::: section
::: titlepage
# []{#testing-basic-network-settings_configuring-and-managing-networking.html#using-the-host-utility-to-verify-name-resolution_testing-basic-network-settings}使用 host 实用程序验证名称解析 {.title}
:::
这个步骤描述了如何在 Red Hat Enterprise Linux 中验证名称解析。
::: itemizedlist
**步骤**
-   使用 `host`{.literal} 实用程序来验证名称解析是否正常工作。例如：要将
    `client.example.com`{.literal} 主机名解析为 IP 地址，请输入：
    ``` literallayout
    # host client.example.com
    ```
:::
如果命令返回错误，如 `连接超时`{.literal} 或
`无法访问服务器`{.literal}，请验证您的 DNS 设置。
:::
:::
[]{#assembly_running-dhclient-exit-hooks-using-networkmanager-a-dispatcher-script_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#assembly_running-dhclient-exit-hooks-using-networkmanager-a-dispatcher-script_configuring-and-managing-networking.html#assembly_running-dhclient-exit-hooks-using-networkmanager-a-dispatcher-script_configuring-and-managing-networking}第 45 章 使用 NetworkManager a 分配程序脚本运行 dhclient 退出 hook {.title}
:::
您可以使用 NetworkManager 分配程序脚本执行 `dhclient`{.literal} 退出
hook。
::: section
::: titlepage
# []{#assembly_running-dhclient-exit-hooks-using-networkmanager-a-dispatcher-script_configuring-and-managing-networking.html#con_the-concept-of-networkmanager-dispatcher-scripts_assembly_running-dhclient-exit-hooks-using-networkmanager-a-dispatcher-script}NetworkManager 分配程序脚本的概念 {.title}
:::
在发生网络事件时，`NetworkManager-dispatcher`{.literal}
服务会按字母顺序执行用户提供的脚本。这些脚本通常是 shell
脚本，但可以是任何可执行脚本或应用程序。您可以使用分配程序脚本来调整您无法使用
NetworkManager 管理的与网络相关的设置。
您可以在以下目录中存储分配程序脚本：
::: itemizedlist
-   `/etc/NetworkManager/dispatcher.d/`{.literal} ： `root`{.literal}
    用户可以编辑分配程序脚本的一般位置。
-   `/usr/lib/NetworkManager/dispatcher.d/`{.literal}:
    对于预先部署的不可变分配程序脚本。
:::
为了安全起见，`NetworkManager-dispatcher`{.literal}
服务只有在满足以下条件时才执行脚本：
::: itemizedlist
-   脚本归 `root`{.literal} 用户所有。
-   该脚本仅可由 `root`{.literal} 读取并可写入。
-   `setuid`{.literal} 位没有在脚本上设置。
:::
`NetworkManager-dispatcher`{.literal} 服务使用两个参数运行每个脚本：
::: orderedlist
1.  操作所发生的设备的接口名称。
2.  当接口被激活时，如 `up`{.literal} 的操作。
:::
`NetworkManager(8)`{.literal} man page 中的 `Dispatcher 脚本`{.literal}
部分提供了在脚本中可以使用的操作和环境变量的概述。
`NetworkManager-dispatcher`{.literal} 服务一次运行一个脚本，但从主
NetworkManager
进程中异步运行。请注意，如果对脚本排队了，服务将始终运行它，即使后续事件使它已过时。但是，`NetworkManager-dispatcher`{.literal}
服务运行脚本，它们是引用
`/etc/NetworkManager/dispatcher.d/no-wait.d/`{.literal}
中的文件的符号链接，而无需立即等待对之前脚本的终止，且并行处理。
::: itemizedlist
**其他资源**
-   `NetworkManager(8)`{.literal} man page 中的
    `Dispatcher 脚本`{.literal} 部分
:::
:::
::: section
::: titlepage
# []{#assembly_running-dhclient-exit-hooks-using-networkmanager-a-dispatcher-script_configuring-and-managing-networking.html#proc_creating-a-networkmanager-dispatcher-script-that-runs-dhclient-exit-hooks_assembly_running-dhclient-exit-hooks-using-networkmanager-a-dispatcher-script}创建运行 dhclient 退出 hook 的 NetworkManager 分配程序脚本 {.title}