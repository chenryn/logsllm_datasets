include Marketplace apps for this study.
of
the
introduction
unpredictable
errors
second,
in Android
4.0. Fig.
third and fourth largest
However, the most signiﬁcant ﬁnding from this study
environment-
is
dependent
3
shows
exception
that
the
in Android 4.0 are android.view.Window
types
(26.83%),
Manager$BadTokenException
java.lang. IllegalStateException (23.56%),
and
(3.12%).
java.lang.RuntimeException
These exceptions are almost non-existent
in Android
2.2. A dominant reason for these crashes was garbage
collection, where resources allocated to activities were
released—a severe side-effect being restart of the Android
system_server. It was observed that the same fuzzed
Intent sent to the same component at a different time point
in the experiment did not always cause the failure, or
caused a different failure. The exact manifestation depended
on the state of the device (the Emulator of the device to be
more precise).
Another
important point
presence
is
the
by
the
thrown
component
of
java.lang.IllegalArgumentException,
java.lang.SecurityException,
exceptions
to
input
of
framework
erroneous
to note for Android 2.2
typically
calling
e.g.,
that
notify
or
the
state,
are
It
is the responsibility of
exception handling, however
java.lang.UnsupportedOperationException
the calling function to
etc.
implement proper
such
behavior is often missing in standard Android components.
3) System Crash from User Level Applications: Another
signiﬁcant discovery from our experiments was the cas-
cading failure of the Android runtime system. We found
a total of three Activities in the built-in applications that
caused Android’s system_server to restart. Due to the
sensitive nature of these bugs and their potential security
impact on millions of Droid users, we shall not disclose
the names of the applications or the Activities in this
forum. Instead, we use the generic name ActivityX for
purposes of explanation. All of the failures occurred due
to NullPointerExceptions. Upon inspection of the
conﬁguration ﬁles of these activities, it was revealed that
all these activities run under the “system” process of An-
droid (i.e. system_server). When these activities tried
to access some ﬁelds inside an Intent, they did not catch
the NullPointerException, which crashed the current
thread and eventually sent Signal 9 (SIGKILL) to Android
system_server. A special concern is that to test these
components JarJarBinks did not need any extra permission
at install time. Thus, potentially, any user level application
is capable of sending the malformed Intents to these vul-
nerable Activities, causing the entire device to crash. Such
promiscuous use of privileged operations is a concern for
millions of customers using Android 2.2/2.3 handsets.
Figure 5. Code responsible for crash of ActivityX, which eventually causes
the entire device to crash
Let us take a look at
this crash (refer Fig. 4) showed an error at
the stack trace for one of
these crashes. This crash occurred when we sent an In-
tent {act=ACTION_PACKAGE_DATA_CLEARED cmp=
android/.ActivityX} to the Activity. The stack trace
for
line
58 of the source ﬁle ActivityX.java. The relevant
code snippet
is shown in Fig. 5. This code tries to
read the extra ﬁeld EXTRAS_ACCOUNT. However, since
our Intent did not specify an Extras ﬁeld, it raises a
NullPointerException. This uncaught NPE kills the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:17:27 UTC from IEEE Xplore.  Restrictions apply. 
Figure 4. Partial stack trace of crash of ActivityX, which eventually causes the entire device to crash
thread of this activity and eventually the process, which, in
this case, is system_server. The problem can be avoided
by verifying that the extras object in line 57 is not null
before accessing it, or by handling the exception gracefully.
The severity of this bug lies in its ability to crash Android
system_server, in other words, to render the device
unusable till the Android runtime is restarted.
B. Results for Implicit Intents
In experiment A, we sent
implicit Intents that appli-
cations had opted in to receive but we left all unspec-
iﬁed ﬁelds blank, e.g., when a ﬁlter only restricts the
Action, there is no Category, Data, or Extras ﬁeld
set. Overall, the HTC phone had 211 applications regis-
tered from which we could derive 1910 Intent-ﬁlters. For
each Intent-ﬁlter, we sent out exactly one Intent matching
the ﬁlter through startActivity(). Note that some
of these Intent-ﬁlters are registered by Services, hence,
sending a matching Intent through startActivity()
simply results in an ActivityNotFoundException.
Those Intents
that were delivered to an application,
crashed 5 of the recipients. 12 unexpected exceptions oc-
curred during the experiment, which are exceptions other
than ActivityNotFound or any ﬂavor of security ex-
ception. Most
frequent exception was once again the
NullPointerException followed by IOException
and Resources$NotFoundException. All three are
the result of insufﬁcient input validation either causing a
missing value to get dereferenced (NPE) or, even worse,
propagated as an argument to a IO or resource loading call.
At the end of the experiment, the phone crashed with a
system reboot in 50% of the cases due to cascading failures.
Even though the number of failures is not large relative to
the number of applications tested, it has to be pointed out
that all Intents we sent are completely valid according to
what a sender is able to ﬁnd out through the Intent-ﬁlters.
The problem arises from the fact that there is a signiﬁcant
amount of unspeciﬁed assumptions about the Intents that the
receivers take for granted and fail to verify (e.g., a speciﬁc
information in the Extras data being present).
Experiment B goes a step further by combining all valid
combination of Action and Category, thereby, signiﬁ-
FREQUENCY DISTRIBUTION OF CRASHES WITH IMPLICIT INTENTS BY
Table II
EXCEPTION TYPE
Exception Type
NullPointerException
IOException
RuntimeException
ArrayIndexOutOfBoundsException
android.content.res.Resources$NotFoundException
ClassCastException
TimeoutException
com.sprint.internal.SystemPropertiesException
IllegalArgumentException
#Crashes
32
22
13
6
4
3
1
1
1
cantly enlarging the number of Intents sent.
From the Intent-ﬁlters, we were able to derive 643 distinct
Actions and 37 Categories that were used in at least
one of the ﬁlters. For each application, we now generated
all possible combinations of Action and Category that
were valid according to the ﬁlter. The experiment consis-
tently crashed the phone after 26 out of the 211 applications
tested. This happened even though we set the delay between
the Intents to 2 seconds to allow for manual interaction
(e.g., closing dialog boxes) and thereby avoiding resource
exhaustion.
is
shown
types
exception
From this small set of 26 tested applications, we
the spe-
observed 83 exceptions. The distribution of
ciﬁc
II with
in Table
NullPointerException and IOException again
being the most frequent ones. Overall, 14 applications
crashed during the experiment and showed a dialog to the
user and only half of them were actually targeted directly,
i.e., were the applications from which the ﬁlter was derived.
The majority of the applications (including basic apps like
Clock, Internet, Gallery, etc.) were most likely affected due
to collateral failures, e.g., an Intent matching more than one
ﬁlter and getting routed to more than one component.
C. Discussions
Our experiments have so far revealed three important as-
pects of Android—ﬁrst is the presence of many components
with poor exception handling code (most of these relate
to NullPointerExceptions), second is the prevalence
of environment-dependent errors in Android 4.0, and third
is the presence of privileged components with unrestricted
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:17:27 UTC from IEEE Xplore.  Restrictions apply. 
access. The ﬁrst problem can be addressed by a methodical
training of developers on good exception handling practices.
Application developers should always check for exceptional
conditions when dealing with inputs (Intents) from external
sources. Resolution of the second and third problems need
more work at the Android framework level. The third issue
also exposes some potential problems with Android’s default
policy for process-assignment of an application component.
At present a component X in application A can run in the
process of application B if A and B are signed with the same
developer key. Despite signature-based permissions,
this
may pose a problem for vendors that build custom ROMs.
If a component (C) of this custom build is permitted to run
as privileged process, it may wreak havoc like ActivityX in
a similar fashion (note that component C and the kernel of
this build are signed with the same key). A potential solution
is to restrict accessibility of component C with an explicit
permission, in other words, every component running in a
privileged process must be protected by explicit permissions.
JJB Limitations: Apart from its handling of new tasks
and alert dialogues (where a tester must manually close
these), JJB has another limitation—it cannot distinguish
between thread hang, resource exhaustion, and UI wait.
Detecting thread hangs in response to a malformed Intent
would require knowledge of a component’s life cycle which
is currently not visible in logs generated by logcat. Our
future work would look into adding this capability in JJB.
V. ANDROID IPC DESIGN RECOMMENDATIONS
The key challenge in making Intents more robust is the
lack of a formal schema. Intents are effectively untyped;
their application-level type is only determined by a String
identiﬁer but
is not reﬂected by the Java type system.
Therefore, there is no explicit contract between a sender
and a receiver of an Intent and mutual agreement is expected
among the two about what format of data a speciﬁc Intent
needs to have and what an invalid message is. Additional
data is stored in a map-like data structure that is not fully
type safe either. The data structure keeps separate key spaces
for values of different types and provides typed methods
for adding and retrieving data but it is again not formally
speciﬁed what the expected additional values are and which
type they are supposed to have. It is up to the author of
the receiver code to perform the input validation, which is
a repetitive and error-prone task. To make matters worse,
primitive types are stored and retrieved as actual primitives,
which means that in the absence of the value the result is
the neutral element of the type, e.g., false in the case
of a boolean value. The absence of a primitive value in the
extra data is therefore not detectable by the receiver. Another
problem arises from software evolution. Implicit message
formats are hard to keep consistent across different versions
of the applications, especially within an ecosystem where
components are contributed by different sources. There is no
way to version a speciﬁc Intent or to indicate compatibility
between a sender and a receiver.
A. Subtyping/POJO Approach
One way to make the message format more explicit and
therefore possible to capture for an automated message
veriﬁcation system is to use subclasses for Intents instead of
a single ﬂat type. Extra data belonging to a message would
be expressed as ﬁelds of the subtype. In the spirit of Plain
Old Java Objects (POJOs), there would be getters and setters
for the ﬁeld. As a side effect, the Java compiler can now
do automatic type checking since the messages use a type
schema that the compiler is able to understand and enforce.
What this approach does not achieve is further constraints on
the values of data. For instance, there is no way to enforce a
certain reference-type value to be not null or a numeric value
to be always smaller than 10. Furthermore, there is currently
no way in Java to express version information of classes in
a standardized and accessible way. The cost for using the
subtyping approach is that the total footprint of the platform
is slightly increased since every Intent type now becomes a
separate class in a separate ﬁle.
With a little experiment we found that a single class
(subclass of Intent) with 3 ﬁelds (String, int, URL) having
bean-like setters and getters adds 273 bytes to the footprint
of an Android application, while the increase in size for a
class with 6 ﬁelds is 403 bytes. Considering a handset where
we have 200 Intent types, this implies a 80KB additional
footprint for turning all these Intents into Subtypes with 6