by Amazon appstore itself and the other by the PMS.
Attack on PIA (Step 4). To prevent the target apk from being
replaced while the permission consent dialogue is displayed to
the user, the PIA records the hash checksum of the target apk’s
manifest before the consent dialogue and veriﬁes it prior to
installation. However, as we can see, this measure cannot
defend against the attack on Step 3, since the windows between
the integrity check and the follow-up step can still be reliably
captured. Actually, the protection does not even work on Step
4, which it was designed to secure: what the adversary can
do is simply substituting a malicious APK for the original
one using the same manifest (e.g., a Phishing version of a
bank app) to completely defeat the defense. This vulnerability
demonstrates the complexity of AIT and the fact that designing
protection without fully understanding the root cause of the
problem cannot succeed. In Section V, we present a new
solution that is practical and effective.
Privilege escalation. Through unauthorized app installation,
our research further shows that
the adversary can acquire
higher privileges, including system level privileges. Speciﬁ-
cally, on Android, any apps signed with the manufacturer’s
platform key are given system permissions at the signature
protection level. By leveraging the way the platform key is
used in Android, we found that the adversary can silently
install system apps onto the user’s device, as elaborated below.
One way to gain a higher privilege is to deliberately install
a vulnerable system app signed with the same platform key
as the victim’s device and then exploit it after installation.
Since Android does not allow the existence of two apps with
the same package name, this can only be done in the absence
of the patched version of the vulnerable app, which is found
to be feasible in our research: due to the fragmentation of
Android, numerous devices of the same vendor are available
on the market, each with a different set of system apps. Most
importantly, those apps and many others in the Play store
are all signed with a single platform key, which gives the
adversary a lot of attack opportunities. In our research, we ran
our malware that stealthily installed vulnerable Teamviewer
and later exploited it using the techniques reported by Check
Point [25] to gain system privileges.
Another path for privilege escalation is to exploit Hare
(Hanging Attribute Reference) permission. Hare permission
is a permission that
is used to guard user resources but
has not been deﬁned by any app on a device. The problem
has been found on popular Android devices by the prior
research [21]. Using GIAs an attacker can create a Hare
situation by deliberately installing a system app that uses a
permission undeﬁned by any legitimate app on the device,
which enables the malware to grab the permission by deﬁning
it. As a result, the attacker can utilize the permission to access
the resource it is not supposed to touch. In our research,
we successfully implemented this attack through installing
a Hare-creating system app (S-Voice and Link) on Galaxy
Note 3. The attack enables the malicious app to hijack
com.vlingo.midas.contacts.permission.READ,
com.vlingo.midas.contacts.permission.WRITE
permission and use them to steal the user’s contacts. The
scope and impact of the problem are discussed in Section IV.
C. Exploiting DM (AIT Step 2)
As mentioned earlier, at the center of the APK download
step is a download manager, which is typically the default
AOSP DM. To use the DM, an app provides the URL of
the target apk and the destination ﬁle path as inputs, and
receives an ID from the DM to later retrieve the ﬁle and related
information or delete the ﬁle through the DM. During this
process, the DM enforces a set of security policies, binding
the requesting app’s package name to the ID and also to the
ﬁle path the app is authorized to access, further ensuring that
the path points to either the /sdcard or its cache folder.
However, we found in our research that the ﬁle path can
be symbolic, which brings in another TOCTOU risk. Note
that from Android’s perspective, symbolic paths have to be
supported, since they are extensively used, including the SD-
Card directory /sdcard. The problem is that this approach
also gives the adversary an opportunity to change the link,
pointing to a different directory after the check, if the access
control has not been well managed.
The attack. Indeed, our study shows that such an attack can
actually succeed on the Android’s DM. Speciﬁcally, we show
that our attack app was able to escalate its privilege by ﬁrst
requesting the DM to download a ﬁle to a symbolic path A
pointing to an authorized location (e.g., somewhere on the SD-
Card) and once the download is completed (indicating that
the security check on A is done) re-mapping A to a different
physical path B where the app does not have the right to access
but the DM has. As a result, the attacker can acquire the DM’s
privilege to retrieve other apps’ ﬁles or even delete them.
We veriﬁed the vulnerability in Android 4.4 and 6.0. The
consequence of our attack is serious: our attack app was able
to delete any ﬁles the DM is allowed to remove, including
the DM’s database, which caused a denial-of-service attack
on Google Play; further, the attacker acquired any ﬁles the
DM had access to, including ﬁles the DM downloaded and
even the DM’s database. Interestingly in Android 6.0, the DM
actually checks the physical path of a symbolic link right
407
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:04:31 UTC from IEEE Xplore.  Restrictions apply. 
before processing an access request. However, there still exists
a gap between the check and the actual processing of the
request, which can be exploited to redirect the link to another
path. In our study, we ran a process that continuously changed
the mapping of the links, trying to capture the window. We
successfully attacked the DM as shown in our demo [8]. This
problem is serious because it enables a malicious app with no
permission to tamper with the ﬁles even in the internal storage
(considered to be secure).
The information leaked through this channel not only
informs the adversary an ongoing app installation operation,
which can be utilized to launch the hijacking attack mentioned
above (Section III-B), but also leads to the disclosure of other
sensitive information, including Android’s secret URL tokens
that might be used to gain unauthorized access to the Play
store, though its detailed use is kept secret by Google. Our
ﬁndings reported to Google are rated as a high-severity issue.
The issue has been ﬁxed with our help.
D. Attacking Installer Interface (AIT Step 1)
At the AIT invocation step, an installer is activated by
an Intent
that initiates the whole installation process. Our
research shows that even this simple boot-strapping step is
full of security risks, vulnerable to a redirect Intent attack on
the installer’s user interface (UI) and code injection through
its Intent processing interface. Speciﬁcally, an installer can
be invoked by another app (the AIT initiator) through an
Intent and its UI can be directed by the Intent to the activity
displaying the app recommended by the initiator. The trouble,
as found in our research, is that a subsequent Intent sent
by a background app can cause a new UI change before
the former can be perceived by the user. By exploiting this
weakness, the background malware can cheat the user into
installing a malicious app from the appstore. It is important
to note that this attack is different from the well-known UI
Phishing attacks [28, 37] in which malware launches its own
fake activity to cover the foreground app’s UI; such an old
trick cannot cause the user to install a wrong app, since the
malware’s own fake activity cannot trigger any installation
transaction without the proper permission. On the other hand,
Redirect Intent attack leverages the victim app’s (Google Play
in our case) activity and does not require any fake activity.
Because of the difference, previously proposed protection
such as
[22] does not work against our attack. Actually,
the weakness behind the new attack is fundamental, coming
from the design of Android’s ActivityManagerService,
which allows the background app to redirect the installer’s UI
within a very short time frame (see our demo [8]) without
providing the Intent recipient (the installer here) the origin
of the redirection Intent. As a result, whenever the user is
redirected from an app she trusts, very likely she will also
trust the app it recommends, without knowing that the UI has
actually been stealthily changed to display a different app.
Further, we found that the implementations of some popu-
lar appstores’ Intent processing interfaces have not been well
thought out, missing proper authentication about the sender of
the Intent. Note that Android does not provide a mechanism
to let the Intent receiver ﬁnd out the sender’s identity. The
consequence is that they could blindly act on the commands
included in the Intent, installing malicious apps or deleting
legitimate apps on behalf of the adversary. Following we
describe the exploits we performed on popular appstore apps.
Redirect Intent attack. In our work, all appstore apps were
vulnerable to the redirect Intent attack. A prominent example is
Facebook app’s invocation of Google Play for installing Face-
book Messenger. Such an invocation, goes through Activi
tyManagerService that utilizes the parameters within the
Intent to direct Google Play to show the right UI. The key to a
successful attack is the timing: the malware in the background
needs to know exactly when Facebook app sends the Intent to
Google Play. For this purpose, we utilized a side channel: the
malware continuously polls /proc//oom_adj (zero
when the app is in the foreground) to monitor the victim app
(Facebook in this case). As soon as Facebook app leaves the
foreground and Google Play takes its place, the malware also
sends an Intent to Google Play, asking it to display a Facebook
Messenger looking like app. This transition is invisible to the
user, as demonstrated in our demo [8]. Note that this attack
requires the adversary to have knowledge of the legitimate app
that is requested to be installed (the Facebook Messenger app
in this case). This is needed for the adversary to prepare a
repackaged version or similarly looking version on Google
Play. As we show in Section IV, a large number of apps
redirect to predictable legitimate apps and thus are vulnerable
to the redirect Intent phishing attack.
Command injection. We found Amazon appstore app to be
vulnerable to command injection attacks because its public
activity com.amazon.venezia.Venezia receives other apps’ In-
tent for referring users to other apps. Speciﬁcally, the problem
is caused by Amazon’s MainActivity, whose WebView
component supports a Javascript-Java bridge which enables
Javascript services on Amazon cloud to run Java services on
a mobile device to perform app installation/uninstallation. The
problem is that the activity fails to authenticate the origin of
the Intent and check whether it includes Javascript code. As a
result, it blindly executes the commands activated by the script.
In our research, we ran a background app that sends an Intent
using single top mode, which ensures that Amazon app’s
activity would not be destroyed and recreated. As Amazon app
received the Intent, it ran the script within the message and
silently installed/uninstalled any app. We found that through
this approach, a malware can actually invoke any private
services of Amazon app, substantially escalating its privilege.
Further we discovered a security-critical problem in Xiaomi
appstore. The appstore utilizes a broadcast receiver to get mes-
sages pushed from the cloud, which can command it to install
or uninstall apps. However, the appstore never authenticates
the messages it receives. As a result, we were able to send
an Intent to the receiver, causing the appstore to silently
install an app we chose without being noticed by the user.
We broadcasted an Intent with a forged payload destined to
be captured by Xiaomi Appstore’s broadcast receiver. The
forged payload2, included the app id and package name of
the malicious app stored on Xiaomi appstore and due to
the absence of authentication the malicious app was silently
installed to the victim’s device.
2{"jsonContent":"{"type":"app", "appId":"xxx",
"packageName":"xxx"}"}
408
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:04:31 UTC from IEEE Xplore.  Restrictions apply. 
IV. MEASUREMENT
In this section, we report a large scale measurement study
to investigate the scope and magnitude of GIA threats.
A. Methodology and Data
Factory image and app collection. To understand the po-
tential security risks, which come from the prevalence of
INSTALL_PACKAGES within vulnerable pre-installed apps
and the management of platform keys, we crawled factory
images from Samsung-updates [16], ofﬁcial Xiaomi [20] and
Huawei [11]. We selected the images from Android 4.0.3 to
5.1, which covered 95.7% (as of Nov 2, 2015) of the devices
that visited Google Play [3]. Among those, we downloaded
1,239 Samsung images for 849 different device models, 382
Xiaomi images for 149 devices and 234 Huawei images for
135 devices. Such images include 231 distinct regional codes,
covering 79 countries and various carriers across the world.
From those factory images, we extracted 206,674 distinct
(based on md5) pre-installed apps, together with their sig-
natures (under their /META-INF) and the certiﬁcates of the
platform keys within the images (from framework resources).
In addition, we analyzed top 13,500 free apps (with 12,750
unique ones) from Google Play (top 500 free apps from 27
categories) to understand the impacts of the GIA threats.
Furthermore, to ﬁnd out how many apps in appstores are
signed by vendors’ platform keys, we extracted signatures from
1.2 million apps downloaded from 33 appstores, including
400,000 Google Play apps.
Finding potentially vulnerable installers. Finding poten-
tially vulnerable installers turns out to be more complicated
than it appears to be. A straight-forward solution, using an
information ﬂow analysis to identify the use of insecure
external resources for installation3, does not work well in
practice, due to the complexity of the analysis. Speciﬁcally,
we tried to build a static tool upon Flowdroid [23] to ﬁnd
out whether an installer is actually using the SD-Card to
install apps. However, the attempt failed on many apps due
to the limitations of Flowdroid. Among the 43 apps we
tested, 14% was stopped by incomplete Control-Flow Graphs,
another 14% failed because tainted data propagated through the
handlemessage(message) API that cannot be tracked
with the call graph provided by Flowdroid and 42% were dis-
rupted by the bugs in Flowdroid. Moreover, to cover different
implementation details of installers, we would need to consider
all channels each AIT modules can use to communicate with
others (Java reﬂection, Handler and etc.), which turns out to
be too complicated and unreliable for a measurement study.
research:
To address the issue, we leveraged a unique observa-