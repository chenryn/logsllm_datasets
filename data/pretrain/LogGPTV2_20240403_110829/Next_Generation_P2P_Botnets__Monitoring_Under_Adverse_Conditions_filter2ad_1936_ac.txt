to nodes joining and leaving based on the same distribution the active popula-
tion is approximated throughout the simulation period. Given these drawbacks
of life-time churn, all existing churn generators present severe drawbacks with
regard to a realistic simulation of churn in P2P botnets.
5.2 The BotChurn (BC) Generator
Based on the aforesaid shortcomings of existing churn simulation models, we
develop BC, a novel approach to simulate P2P botnet churn based on real world
measurements. To overcome the drawbacks of existing churn generators, BC
focuses on addressing the following three features: (i) individual distributions for
life- and down-times of nodes, (ii) support for existing P2P churn measurements,
and (iii) independently adjustable active and overall population parameters.
Next Generation P2P Botnets: Monitoring Under Adverse Conditions
521
Support for distinct Weibull distributions for life- and down-times:
One approach to overcome the issue of having a single distribution for life- and
down-times would be to use two diﬀerent distributions as it is done for the Pareto
churn model [28]. However, obtaining accurate measurements of down-times is
often not possible as many P2P botnets do not provide unique identiﬁers [6,18].
Therefore, it is diﬃcult to accurately measure when a node rejoins a system.
As an alternative, BC is based on a life-time and an inter-arrival distribution.
Theoretically, any probability distribution function can be used. However, we
currently support only the Weibull distribution for life-time and inter-arrival
measurements as it is found best suited for churn in P2P systems [11,23]. In
contrast to life-time churn, BC starts with all nodes being inactive. Based on
the times drawn from the inter-arrival distribution, a random inactive node is
activated. Upon activation, a life-time value is assigned based on the life-time
distribution. Once a bot’s life-time comes to an end, it becomes inactive. This is
a continuous process, where inactive bots will eventually rejoin the system based
on the inter-arrival cycle.
Calculation of the average active population: One issue that needs to be
addressed by our approach, is that whenever a node needs to be activated, an
inactive node must be available to join the network. Therefore, the overall bot
population needs to be larger than the average active population of the simulated
botnet. This requires that we ﬁrst calculate the average active number of bots
based on the two input distributions.
According to the law of large numbers, with suﬃciently long simulation time
τ, with τ → ∞, the average inter-arrival time of nodes joining the system
will converge towards the mean of the inter-arrival distribution. Therefore, the
arrival-rate Ra will eventually converge towards the mean. However, the number
of nodes leaving the system is dependent on the life-time distribution and the
number of nodes active in the system. If we consider the average life-time λ and
an active number of nodes Na, on average nodes will go oﬀ-line at a rate of λ
Na .
We can therefore calculate the average active population by identifying the
active population Na, at which the average departure-rate Rd is equal to the
average arrival-rate Ra. This is achieved by solving Eq. 1.
Ra = Rd =
λ
Na
⇒ Na =
λ
Ra
(1)
Independent active- and overall-populations: Lastly, we want to address
the need for an independently adjustable overall- and active-population. In BC,
the overall-population can be set to any desired value. However, as discussed
earlier, it should be bigger than the desired active-population.
Adjusting the active population requires additional eﬀort. In more details, it
is necessary to modify at least one of the two distributions, as the active popu-
lation is directly related to both inter-arrival and life-time distributions. While
522
L. B¨ock et al.
this means that we modify the values obtained from real world measurements,
this is often necessary to experiment with diﬀerent sizes of botnets.
To adjust the active population, we can modify either the inter-arrival or
the life-time Weibull distribution. As the reported measurements of Karuppayah
[11] showed high similarity in the ﬁtting of Weibull life-time distributions for
botnets of diﬀerent sizes, we maintain the input life-time distribution without
any modiﬁcation. Furthermore, it is not very likely that the size of a botnet has
a direct inﬂuence on the life-time behavior of its individual nodes.
Therefore, we have to adjust the inter-arrival distribution to accommodate
an adjustable active population. To adjust a Weibull distribution, one can either
choose its shape β or scale α parameter. To change the real world measurements
as little as possible, we want to change the parameter that is less similar across all
botnets measured in [11]. The shape parameter of the reported inter-arrival dis-
tributions ranges from 0.61 to 1.04, whereas the scale parameter varies between
0.6801 and 160.2564. As the diﬀerence between the scale parameters is bigger
across the measured botnets, we choose to modify the scale parameter α, while
keeping the shape parameter β unaltered. With this modiﬁcation, we can choose
any desired active population value as an input to Eq. 1 and obtain the required
arrival rate Ra.
6 Evaluation
Within this section, we present the evaluation of BotChurn (BC) and the inﬂu-
ence of MM on monitoring resistance and resilience of botnets. Furthermore, an
analysis on the eﬀectiveness of monitoring in adverse conditions is also provided.
6.1 Datasets and Evaluation Metrics
In our evaluation, we utilize three datasets: (i) real world churn measurements
of Sality and ZeroAccess botnets, (ii) real world graphs of the Sality botnet and
(iii) a simulated dataset consisting of 1, 458 combinations of diﬀerent parame-
ters.
The real-world churn measurements, that we obtained from [11], consist of
inter-arrival and life-time distributions. In this paper, we focus on three par-
ticular measurements. These are the ZeroAccess 16465 (ZA65) including non-
superpeers, i.e., bots behind NAT or ﬁrewalls, ZeroAccess 16471 (ZA71) and
Sality version three (SalityV3). The details for these datasets are given in Table 2.
The real-world snapshots of the Sality botnet were taken from [9]. The
authors, present an analysis on the graph characteristics and resilience of the
Sality and ZeroAccess botnets. The metrics used in their analysis are the number
of nodes, number of edges, degree, in-degree, out-degree, density, global cluster-
ing coeﬃcient, average path length and the diameter of the botnet. We utilize
their publicly available snapshot of the Sality botnet to compare it against our
simulated botnet topologies. More speciﬁcally, we utilize the dataset to compare
Next Generation P2P Botnets: Monitoring Under Adverse Conditions
523
Table 2. Churn measurements by [11]; weibull parameters as tuples (shape, scale).
ZeroAccess 71
(ZA71)
ZeroAccess 65 including
non-super peers (ZA65)
Sality v3
(SalityV3)
Inter-Arrival: Ra(β, α)
Life-Time: λ(β, α)
(0.95, 3.0769)
(1.04, 3.8023)
(0.21, 76.9231) (0.18, 12.21)
Active Population (Na) 165
1037
(0.66, 5.814)
(0.28,
1139.3174)
1963
the graph characteristics and resilience reported by Haas et al. [9] against those
from the generated topologies.
Our last dataset is generated using our simulation framework1. We simulated
1, 458 diﬀerent parameter combinations with 20 repetitions for a duration of 75
days each. Table 3, presents all parameter types and their values. The parame-
ters used in our simulations consist of the churn model, the MM parameters as
discussed in Sect. 4, the number of MDs and the active and overall population.
It is important to note, that the maximum NL-size is not independently
varied but instead dependent on the Neighborlist Minimum Threshold (NLMT).
In an analysis on the inﬂuence of each individual parameter, we found that
the NL-size itself only has a minor inﬂuence on the resilience or monitoring
resistance. The reason for this is, that bots only search for additional neighbors
if the NLMT is reached. Therefore, we set the NL-size to be twice as large as the
NLMT. Furthermore, we adjusted the overall population in relation to the active
population. We chose to use a factor of three, four or ﬁve, as our simulations
of the churn model have shown, that the simulated graphs are most similar to
the real world graphs at an overall population about four times larger than the
active population.
Table 3. Parameter combinations used for the evaluation.
Parameter
Churn Model
Value
SalityV3, ZA65, ZA71
Membership Management Interval (MMI)
30 m, 1 h, 2 h
Max NL-size
2x NLMT
Neighborlist Minimum Threshold (NLMT) 10, 25, 50
Neighborlist Reply Size (NLRS)
1, 5, 10
Neighborlist Reply Preference (NLRP)
Latest, Random
Number of MDs
Active Population (Na)
Overall Population (Nt)
1, (10, 50, 200, 500)
1963, 1037, 165
x3, x4, x5 Active Population
1 https://git.tk.informatik.tu-darmstadt.de/SPIN/BSF.
524
L. B¨ock et al.
To evaluate our work, we utilize the network resilience and monitoring resis-
tance metrics. We measure the resilience of a botnet similarly to [9]. Iteratively
the bot with the highest in-degree is removed from the botnet, until the ratio
of nodes disconnected from the largest weakly connected component exceeds a
threshold t ∈ [0, 1]. Therefore, the GraphResilience(t) denotes the fraction of
bots that need to be removed, to have more than t% of the remaining bots dis-
connected from the botnet. Within our evaluation, we consider a threshold of
t = 0.5, as it was least aﬀected by outliers. The monitoring resistance indicates
the diﬃculty of monitoring a botnet, i.e., the fraction of the overall population
that could not be enumerated. We deﬁne monitoring resistance ρ in Eq. 2, based
on the overall-population Nt, and μ the information obtained by an MD.
ρ = 1 − |μ|
|Nt|
(2)
6.2 Simulation Setup
Within this subsection, we introduce our simulation setup. Overall we introduce
three separate experiments: (i) an evaluation of BC, (ii) an analysis of the MM
on monitoring resistance and network resilience, and (iii) an evaluation on how
utilizing multiple MDs increases the intelligence gathered through monitoring.
For the evaluation of BC, we intend to investigate two research topics. First,
the warm-up time required to reach the desired active population, and second,
whether the generated topologies are more similar to the real-world characteris-
tics reported in [9] than those created with OverSim’s life-time churn generator.
To compare the two churn generators with the real world dataset, we run 24
simulations of the Sality botnet with each of them. To match the active popula-
tion of the real world Sality graph provided by Haas et al. [9], we set the target
active population to 1, 422. In addition, to compare the diﬀerence between the
graph characteristics of the real world Sality botnet and the simulated topolo-
gies, we use the mean absolute error. The Mean Absolute Error (MAE) allows us
to calculate the average diﬀerence between the graph characteristics of the sim-
ulated and real world dataset. To ensure, that the parameters are in comparable
value ranges when calculating the error, we normalized all values through feature
scaling. Furthermore, we compare the graphs with regard to their resilience.
To analyze the eﬀects of each MM parameter with regard to monitoring resis-
tance and botnet resilience we use our simulated dataset (see Table 3). Further-
more, to highlight the inﬂuence of each parameter, we analyze and discuss each
of them individually. Every simulation is run for a period of 75 days, with the
MD joining after 40 days. After the entire simulation time, we took a snapshot
of the graph and then analyzed its monitoring resistance and graph resilience.
We expect, that a single MD will not yield enough intelligence to conduct
successful monitoring in adverse conditions. This raises the question about how
we can improve the knowledge obtained by monitoring operations. One approach
is to broaden the information obtained via monitoring by increasing the number
of MDs. To analyze the eﬀects of aggregating the information of multiple MDs,
Next Generation P2P Botnets: Monitoring Under Adverse Conditions
525
(a) MAE at diﬀerent populations.
(b) Graph resilience comparison.
Fig. 1. Comparison of life-time churn, BC and the real world Sality botnet graph.
we repeated the simulations with the most monitoring resistant and resilient
MM parameter combinations, i.e., under the most adverse conditions. To keep
the number of MDs within a realistic range, we ran the simulations with 10, 50,
200 and 500 deployed MDs. Note that, 500 is close to the highest number of
sensors ever reported (512) to be used to monitor a botnet [2].
6.3 Results
In this subsection, we present the results of our evaluation.
BotChurn (BC) evaluation. Before the comparison between simulated and
real world graphs, we evaluated the warm-up period required by BC to reach
the desired active population. The results for all three investigated churn models
indicate, that the active population is reached within less than 40 days.
Figure 1a, depicts the mean absolute error between simulated graphs and a
real world Sality snapshot obtained from [9]. The results clearly indicate, that the
graphs generated with BC are closer to the real world botnet. Furthermore, our
churn generator performs best at an overall population between 5, 500 to 6, 500.
This is about twice as much as the overall population in life-time churn, which
does not allow to adapt the overall population. While the error for BC generated
botnets may still seem high, we want to point out that the error is dominated
by only two out of 13 graph properties. In fact, the average path length and
diameter are so similar throughout all graphs, that due to the normalization
even slight changes cause large errors. For BC at a population of 6000, the
average path length is 1.7045 compared to 1.5149 in Sality and the diameters