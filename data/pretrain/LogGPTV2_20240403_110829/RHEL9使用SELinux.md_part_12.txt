    ``` screen
    $ grep -r "logging_write_generic_logs" /usr/share/selinux/devel/include/ | grep .if
    /usr/share/selinux/devel/include/system/logging.if:interface(`logging_write_generic_logs',`
    ```
9.  检查接口的定义：
    ``` screen
    $ cat /usr/share/selinux/devel/include/system/logging.if
    ...
    interface(`logging_write_generic_logs',`
            gen_require(`
                    type var_log_t;
            ')
            files_search_var($1)
            allow $1 var_log_t:dir list_dir_perms;
            write_files_pattern($1, var_log_t, var_log_t)
    ')
    ...
    ```
10. 在这个示例中，您可以使用推荐的接口。在您的类型强制文件中添加对应的规则：
    ``` screen
    $ echo "logging_write_generic_logs(mydaemon_t)" >> mydaemon.te
    ```
    另外，您可以添加这个规则而不是使用接口：
    ``` screen
    $ echo "allow mydaemon_t var_log_t:file { open write getattr };" >> mydaemon.te
    ```
11. 重新安装策略：
    ``` screen
    # ./mydaemon.sh
    Building and Loading Policy
    + make -f /usr/share/selinux/devel/Makefile mydaemon.pp
    Compiling targeted mydaemon module
    Creating targeted mydaemon.pp policy package
    rm tmp/mydaemon.mod.fc tmp/mydaemon.mod
    + /usr/sbin/semodule -i mydaemon.pp
    ...
    ```
:::
::: orderedlist
**验证**
1.  检查您的应用程序是否受 SELinux 限制，例如：
    ``` screen
    $ ps -efZ | grep mydaemon
    system_u:system_r:mydaemon_t:s0 root        8150       1  0 17:18 ?        00:00:00 /usr/local/bin/mydaemon
    ```
2.  验证您的自定义应用程序不会导致任何 SELinux 拒绝：
    ``` screen
    # ausearch -m AVC -ts recent
    ```
:::
::: itemizedlist
**其他资源**
-   `sepolgen(8)`{.literal}, `ausearch(8)`{.literal},
    `audit2allow(1)`{.literal}, `audit2why(1)`{.literal},
    `sealert(8)`{.literal}, 和 `restorecon(8)`{.literal} man pages
:::
:::
::: section
::: titlepage
# []{#writing-a-custom-selinux-policy_using-selinux.html#proc_creating-a-local-selinux-policy-module_writing-a-custom-selinux-policy}创建本地 SELinux 策略模块 {.title}
:::
在活跃的 SELinux 策略中添加特定的 SELinux 策略模块可以修复 SELinux
策略的某些问题。您可以使用此流程修复
[红帽发行注记](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/){.link}
中介绍的特定已知问题，或实施特定的
[红帽解决方案](https://access.redhat.com/solutions){.link}。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
只用红帽提供的规则。红帽不支持使用自定义规则创建 SELinux
策略模块，因为这不会超出
[产品支持覆盖范围](https://access.redhat.com/support/offerings/production/soc/){.link}。如果您并不是相关系统的专家，请联系红帽销售代表并请求咨询服务。
:::
::: itemizedlist
**先决条件**
-   `setools-console`{.literal} 和 `audit`{.literal} 软件包进行验证。
:::
::: orderedlist
**步骤**
1.  使用文本编辑器打开新的 `.cil`{.literal} 文件，例如：
    ``` screen
    # vim .cil
    ```
2.  从已知问题或红帽解决方案中插入自定义规则。
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    不要自己编写规则。仅使用特定已知问题或红帽解决方案中提供的规则。
    :::
    例如，要实现 [SELinux 拒绝 cups-lpd 对 RHEL 解决方案中的 cups.sock
    的读访问权限](https://access.redhat.com/solutions/5729251){.link}，请插入以下规则：
    ``` screen
    (allow cupsd_lpd_t cupsd_var_run_t (sock_file (read)))
    ```
    请注意，您可以使用两个 SELinux 规则语法之一： Common Intermediate
    Language(CIL)和 m4。例如，CIL 中的
    `(allow cupsd_lpd_t cupsd_var_run_t (sock_file (read)))`{.literal}
    等同于 m4 中的以下内容：
    ``` screen
    module local_cupslpd-read-cupssock 1.0;
    require {
        type cupsd_var_run_t;
        type cupsd_lpd_t;
        class sock_file read;
    }
    #============= cupsd_lpd_t ==============
    allow cupsd_lpd_t cupsd_var_run_t:sock_file read;
    ```
3.  保存并关闭该文件。
4.  安装策略模块：
    ``` screen
    # semodule -i .cil
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    当使用 `# semodule -i`{.literal}
    来删除您创建的本地策略模块时，请参考不带 `.cil`{.literal}
    后缀的模块名称。要删除本地策略模块，请使用
    `# semodule -r `{.literal}。
    :::
5.  重启与规则相关的任何服务：
    ``` screen
    # systemctl restart 
    ```
:::
::: orderedlist
**验证**
1.  在 SELinux 策略中搜索相关的允许规则：
    ``` screen
    # sesearch -A --source= --target= --class= --perm=,
    ```
    其中 ``{.literal} 是源 SELinux
    类型，``{.literal} 是目标 SELinux
    类型，``{.literal} 是安全类或对象类名称，``{.literal}
    和 ``{.literal} 规则的特定权限。
    例如，[SELinux denies cups-lpd read access to cups.sock in
    RHEL](https://access.redhat.com/solutions/5729251){.link} 解决方案：
    ``` screen
    # sesearch -A --source=cupsd_lpd_t --target=cupsd_var_run_t --class=sock_file --perm=read
    allow cupsd_lpd_t cupsd_var_run_t:sock_file { append getattr open read write };
    ```
    最后一行现在应包含 `read`{.literal} 操作。
2.  验证相关服务受 SELinux 限制：
    ::: orderedlist
    1.  确定与相关服务相关的进程：
        ``` screen
        $ systemctl status 
        ```
    2.  检查上一命令输出中列出的进程的 SELinux 上下文：
        ``` screen
        $ ps -efZ | grep 
        ```
    :::
3.  验证该服务是否不会导致任何 SELinux 拒绝：
    ``` screen
    # ausearch -m AVC -ts recent
    ```
:::
::: itemizedlist
**其他资源**
-   [第 5 章 *故障排除与 SELinux
    相关的问题*](#troubleshooting-problems-related-to-selinux_using-selinux.html "第 5 章 故障排除与 SELinux 相关的问题"){.xref}
:::
:::
::: section
::: titlepage
# []{#writing-a-custom-selinux-policy_using-selinux.html#_additional_resources_3}其他资源 {.title}
:::
::: itemizedlist
-   [SELinux Policy
    Workshop](http://redhatgov.io/workshops/selinux_policy/){.link}
:::
:::
:::
[]{#creating-selinux-policies-for-containers_using-selinux.html}
::: chapter
::: titlepage
# []{#creating-selinux-policies-for-containers_using-selinux.html#creating-selinux-policies-for-containers_using-selinux}第 9 章 为容器创建 SELinux 策略 {.title}
:::
Red Hat Enterprise Linux 9 提供了使用 `udica`{.literal} 软件包为容器生成
SELinux 策略的工具。通过
`udica`{.literal}，您可以创建一个定制的安全策略来更好地控制容器如何访问主机系统资源，如存储、设备和网络。这可让强化容器部署以避免出现安全问题，并简化了规范合规性的实现和维护。
::: section
::: titlepage
# []{#creating-selinux-policies-for-containers_using-selinux.html#introduction-to-udica_creating-selinux-policies-for-containers}udica SELinux 策略生成器介绍 {.title}
:::
为了简化为自定义容器创建新 SELinux 策略，RHEL 9 提供了 `udica`{.literal}
工具。您可以使用此工具基于容器的 JavaScript Object
Notation（JSON）文件创建策略，该文件包含 Linux
功能、挂载点和端口定义。因此，该工具将使用检查结果生成的规则与从指定
SELinux 通用中间语言（CIL）块继承的规则合并。
使用 `udica`{.literal} 为容器生成 SELinux 策略的过程有三个主要部分：
::: orderedlist
1.  以 JSON 格式解析容器规格文件
2.  根据第一部分的结果查找合适的允许规则
3.  生成最终 SELinux 策略
:::
在解析阶段，`udica`{.literal} 会查找 Linux 功能、网络端口和挂载点。
根据结果，`udica`{.literal} 检测到容器需要哪些 Linux
功能，并创建一个允许所有这些功能的 SELinux
规则。如果容器绑定到一个特定端口，`udica`{.literal} 使用 SELinux
用户空间库来获取通过检查容器使用的端口的正确 SELinux 标签。
之后，`udica`{.literal}
检测到哪些目录被挂载到主机中的容器文件系统名称空间中。
CIL 的块继承功能允许 `udica`{.literal} 创建 SELinux
模板，[*允许规则*]{.emphasis}专注于特定操作，例如：
::: itemizedlist
-   [*允许访问主目录*]{.emphasis}
-   [*允许访问日志文件*]{.emphasis}
-   [*允许访问与 Xserver 的通讯*]{.emphasis}。
:::
这些模板称为块，最终 SELinux 策略通过合并这些块来创建。
::: itemizedlist
**其他资源**
-   [使用 udica 红帽博客为容器生成 SELinux
    策略](https://www.redhat.com/en/blog/generate-selinux-policies-containers-with-udica){.link}
:::
:::
::: section
::: titlepage
# []{#creating-selinux-policies-for-containers_using-selinux.html#creating-and-using-an-selinux-policy-for-a-custom-container_creating-selinux-policies-for-containers}为自定义容器创建和使用 SELinux 策略 {.title}
:::
要为自定义容器生成 SELinux 安全策略，请按照以下步骤执行。
::: itemizedlist
**先决条件**
-   已安装用于管理容器的 `podman`{.literal} 工具。如果没有，使用
    `dnf install podman`{.literal} 命令。
-   一个自定义 Linux 容器 - 本例中是 [*ubi8*]{.emphasis}。
:::
::: orderedlist
**步骤**
1.  安装 `udica`{.literal} 软件包：
    ``` screen
    # dnf install -y udica
    ```
    或者，安装 `container-tools`{.literal}
    模块，它提供一组容器软件包，包括 `udica`{.literal} ：
    ``` screen
    # dnf module install -y container-tools