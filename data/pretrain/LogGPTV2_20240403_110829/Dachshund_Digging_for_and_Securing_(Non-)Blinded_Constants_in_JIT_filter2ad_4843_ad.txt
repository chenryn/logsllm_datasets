head of two popular and large JavaScript libraries, jQuery
(version 2.2.3) and AngularJS (version 1.5.5). These libraries
are commonly embedded in typical Web applications and
are relatively large compared to other custom JavaScript
implementations (jQuery has 259 kB, AngularJS 1.1 MB).
Moreover, both of these libraries also provide the compressed
(i.e., “miniﬁed”) versions to reduce the download size (jQuery
86 kB, AngularJS 158 kB). For the evaluation, we rewrote
these libraries (both compressed and uncompressed) 200 times.
We measured the time required to rewrite these libraries,
including all steps (RW1) up to (RW3). The results of the
evaluation are presented in the following.
9
zlib In order to test the performance of the compiler, zlib uses
eval. This causes the rewrite time of our rewriter to be
added to the runtime of the script, as the code passed
to eval needs to be rewritten dynamically. Additionally,
the compiled zlib script extensively uses integer constants
that further degrade the performance.
CodeLoad This benchmark measures how quickly a Java-
Script engine can execute a script after loading it. Code-
Load uses eval to compile JQuery and Closure libraries
and therefore again includes the rewriting time.
While the use of dynamic code (like in eval) degrades
performance, we cannot exclude such code from our rewriter,
as it would give a possibility to the attacker to enter con-
stants using dynamic code. However, the experiments have
shown that it is mainly dynamic code rewriting that causes
performance impacts, and libraries that do not leverage such
dynamic code have an acceptable overhead. Without the two
poorly-performing benchmarks, the overhead decreases to 12%
in Chrome and 13% in Edge. Note that
the overhead of
popular libraries could be eliminated by whitelisting (and
thus not rewriting) trusted scripts, as our threat model
is
only relevant to non-trusted and attacker-controlled JavaScript
inputs. Alternatively, our rewriter could cache popular libraries
after they have been already rewritten to provide them to the
client without any rewriting overhead.
To put things into perspective, we now compare the perfor-
mance of our scheme with the performance of a non-optimized
JIT compiler. The intuition here is that our suggested attack
technique against Chrome relies on abusing output of the
optimizing compiler. Disabling the optimizing compiler thus is
a viable alternative to protect against attacker-induced gadgets.
Therefore, we performed another experiment and also included
Chrome with a disabled optimizing compiler (by running
Chrome with the V8 ﬂags noopt and nocrankshaft).
Figure 7 shows the complete list of all Octane benchmarks,
running in three modiﬁcations of Chrome: (i) original, (ii)
original with proxy (i.e., rewritten JavaScript), and (iii) with
the optimizing compiler disabled. As can be seen, with the
exception of the two libraries that require rewriting of dynamic
code, our proposed solution outperforms the disabled optimizer
by around a factor of eight and thus seems to be the preferable
option.
scripts
Although the overhead for dynamic
seems
signiﬁcant, our JavaScript rewriter usually completes in a
matter of milliseconds. Rewriting a JavaScript library as big
as jQuery takes, on average, less than 60 ms (see Figure 5).
This can be further improved by incorporating caching in
our proxy, using hashes of the dynamic script as a key. This
way, for example, when compiling a jQuery library 100
times using eval (e.g., as done in CodeLoad), the rewriter
spends 60 ms on the initial request and serves the subsequent
requests without any delay caused by the rewriting process.
5
4
1
1
0
1
)
s
m
(
e
m
T
i
e
t
i
r
w
e
R
150
100
50
0
Uncompressed
Miniﬁed
3
6
1
5
AngularJS
JQuery
Fig. 5. Averaged times for rewriting JavaScript libraries
·104
Orig
Proxy
5
9
4
,
6
2
0
2
8
,
0
2
5
4
2
,
4
2
8
2
5
,
8
1
e
r
o
c
S
e
n
a
t
c
O
e
g
a
r
e
v
A
2
1
0
Chrome
Edge
Fig. 6. Averaged Octane scores in Chrome and Edge
The miniﬁed versions of the libraries took less time to be
rewritten. On average, rewriting AngularJS took 145 ms and
101 ms for the uncompressed and miniﬁed versions, respec-
tively. Rewriting jQuery took 63 ms and 51 ms, respectively
(see Figure 5). We argue that this overhead of a mere 100 ms
is acceptable to typical Web users, as network latencies and
bandwidth constraints are more signiﬁcant when loading these
libraries. In addition, note that rewriting is a one-time effort
and the rewritten JavaScript library can be cached by the proxy
as well as on the client side. Such caching mechanisms are part
of COTS browsers and require no further client software mod-
iﬁcations. Finally, rewriting multiple scripts simultaneously is
an effort that can be trivially parallelized to further improve
performance.
3) Runtime Overhead: Next, we evaluate the runtime over-
head that is incurred on the client side due to the modiﬁed
JavaScript code. To this end, we leverage Octane, a commonly-
used benchmark framework for JavaScript engines [40]. For
the evaluation, we took the averaged scores from 5 runs of
Octane benchmarks. JavaScript runtime showed the follow-
ing results: Figure 6 illustrates the performance comparisons
between the original and the rewritten engine. The unit is
the score measured by the Octane benchmarks, and higher is
better. On average, we measure 21% performance decrease in
Chrome and 24% in Edge. The average overhead is signiﬁcant,
but performance is mainly degraded by a few outliers in the
benchmark suite, such as:
10
e
r
o
c
S
e
n
a
t
c
O
6
4
2
0
·104
8
2
9
,
3
2
5
9
2
,
4
2
1
3
9
,
0
5
9
8
6
,
0
5
Orig
Proxy
NoOpt
8
1
1
,
8
3
5
5
9
,
6
3
0
8
2
,
0
2
2
5
1
,
5
1
8
8
1
,
1
8
8
3
,
1
4
0
7
,
2
8
8
9
,
2
5
3
8
,
8
2
0
9
7
,
8
2
6
9
2
,
8
9
5
2
,
3
2
7
8
2
,
3
2
2
9
2
,
6
1
5
0
1
,
3
0
0
1
,
3
2
5
0
,
2
4
6
9
,
3
9
4
9
,
1
3
4
3
,
2
0
6
9
,
1
1
3
5
5
,
0
1
1
9
0
,
7
4
5
7
,