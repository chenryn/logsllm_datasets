# Small World with High Risks: A Study of Security Threats in the npm Ecosystem

**Authors:**
- Markus Zimmermann, TU Darmstadt
- Cristian-Alexandru Staicu, TU Darmstadt
- Cam Tenny, r2c
- Michael Pradel, TU Darmstadt

**Publication:**
This paper was presented at the 28th USENIX Security Symposium, held from August 14â€“16, 2019, in Santa Clara, CA, USA. The proceedings are available under the ISBN 978-1-939133-06-9, and open access is sponsored by USENIX.

## Abstract
The popularity of JavaScript has led to a vast ecosystem of third-party packages available via the npm (Node Package Manager) registry. The open nature of npm has fueled its growth, providing over 800,000 free and reusable software packages. However, this openness also introduces significant security risks, as evidenced by recent incidents where single packages compromised or attacked software running on millions of computers. This paper systematically analyzes security risks in the npm ecosystem by examining package dependencies, maintainers, and publicly reported security issues. We find that individual packages can impact large parts of the ecosystem, and a small number of maintainer accounts could be used to inject malicious code into the majority of all packages. Additionally, many packages depend on vulnerable code due to a lack of maintenance. Our results highlight the presence of single points of failure and the threat posed by unmaintained packages. We discuss several mitigation techniques, such as trusted maintainers and total first-party security, and analyze their potential effectiveness.

## 1. Introduction
JavaScript has become one of the most widely used programming languages. To support JavaScript developers, npm provides hundreds of thousands of free and reusable code packages. The npm platform includes an online database for searching packages and a package manager that resolves and installs dependencies. Since its inception in 2010, npm has grown to over 800,000 packages, making it the primary source of third-party JavaScript packages for both client-side and server-side applications.

The npm ecosystem is designed to be open, allowing users to freely share and reuse code. Reusing a package is as simple as invoking a command, which downloads and installs the package and its dependencies. Sharing a package is equally straightforward, with no restrictions or checks. This openness has enabled npm's growth, providing packages for a wide range of use cases.

However, npm's openness comes with security risks. For example, in March 2016, the removal of the `left-pad` package caused a large percentage of packages to become unavailable due to their dependency on it. In July 2018, the compromise of the `eslint-scope` package allowed an attacker to release a malicious version that tried to send local files to a remote server.

These incidents raise questions about whether they are isolated cases or indicative of a broader problem. Given npm's popularity, understanding its weak points is crucial for securing the ecosystem. In this paper, we systematically study security risks in npm by analyzing package dependencies, maintainers, and publicly reported security issues. Our analysis is based on a set of metrics defined on the package dependency graph and its evolution over time. Our study involves 5,386,239 package versions, 199,327 maintainers, and 609 publicly known security issues.

## 2. Security Risks in the npm Ecosystem
To provide context for our study, we describe some security-relevant aspects of the npm ecosystem and introduce several threat models.

### 2.1 Particularities of npm
#### Locked Dependencies
In npm, dependencies are declared in a `package.json` file, which specifies the name of the dependent package and a version constraint. The version constraint can either be a specific version or a range of compatible versions. Each time an npm package is installed, its dependencies are resolved to a specific version, which is automatically downloaded and installed. To ensure uniform installation, npm introduced `package-lock.json`, which locks transitive dependencies to specific versions. However, this approach means that if a vulnerability is fixed in a dependency, the patched version is not installed until the `package-lock.json` file is regenerated.

#### Heavy Reuse
Recent work suggests that code reuse in npm differs significantly from other ecosystems. One characteristic of npm is the high number of transitive dependencies. For example, the Express.js web framework transitively depends on 47 other packages, compared to the Spring web framework in Java, which depends on only ten other packages.

#### Micropackages
Another characteristic of npm is the heavy reliance on micropackages, which consist of only a few lines of source code. These packages increase the attack surface and contribute to the excessive fragmentation of the npm codebase.

#### No Privilege Separation
Unlike the Java security model, JavaScript does not provide privilege separation between code loaded from different packages. Any third-party package has full privileges of the entire application, and many npm packages run outside of a browser on the Node.js platform, which does not provide a sandbox.

#### No Systematic Vetting
The process of discovering vulnerabilities in npm packages is still in its early stages. Known vulnerabilities are mostly reported by individuals through manual analysis or research. There is no systematic vetting process for code published on npm.

#### Publishing Model
To publish a package, a developer must create an account on the npm website and run the `npm publish` command in a folder containing a `package.json` file. The user who first published the package is added to the maintainers set and can release future versions. Additional maintainers can be added. Notably, there is no requirement for a link to a public version control system, leading to potential confusion and stealthy attacks targeting npm accounts.

### 2.2 Threat Models
The unique security properties of npm enable several scenarios for attacking users of npm packages. The following discusses threat models that correspond to past attacks or potential future threats.

#### Malicious Packages (TM-mal)
Adversaries may publish packages containing malicious code on npm, tricking users into installing or depending on them. For example, in 2018, the `eslint-scope` incident involved a malicious package that deployed its payload at installation time through an automatically executed post-installation script. Other methods for hiding malicious behavior, such as downloading and executing payloads at runtime under certain conditions, are also possible.

#### Exploiting Unmaintained Legacy Code (TM-leg)
As with any large code base, npm contains vulnerable code, some of which is documented in public vulnerability databases. If a vulnerable package remains unfixed, an attacker can exploit it in applications that depend on it. Abandoned packages and the common practice of locking dependencies can prevent applications from using fixed versions even when they are available.

#### Package Takeover (TM-pkg)
An adversary may convince a maintainer to transfer ownership of a package or compromise a maintainer's account to gain control of a package. This allows the adversary to release malicious versions of the package.

## 3. Findings
Our overall findings indicate that the densely connected nature of the npm ecosystem introduces several weak spots:

- **Large Attack Surface:** Installing an average npm package implicitly trusts 79 third-party packages and 39 maintainers.
- **Highly Influential Packages:** Popular packages directly or indirectly influence many other packages, making them potential targets for injecting malware.
- **Small Number of Critical Maintainers:** Some maintainers have an impact on hundreds of thousands of packages, meaning a small number of compromised accounts could inject malware into the majority of all packages.
- **Growing Influence:** The influence of individual packages and maintainers has been continuously growing, increasing the risk of malware injection attacks.
- **Vulnerable Dependencies:** A significant percentage (up to 40%) of all packages depend on code with at least one publicly known vulnerability.

## 4. Mitigation Strategies
Given these findings, we discuss several mitigation strategies and analyze their potential effectiveness:

- **Trusted Maintainers:** Implementing a vetting process to yield trusted maintainers could halve the risk imposed by compromised maintainers. About 140 such maintainers out of over 150,000 could achieve this.
- **Code Vetting:** Vetting the code of new releases of certain packages could reduce the security risk, though slightly slower than trusting maintainers. Trusting the top 300 packages would reduce the risk by half.
- **Perfect First-Party and Third-Party Security:** Achieving "perfect first-party security" and "perfect third-party security" for highly downloaded or frequently depended upon packages would be ideal, though infeasible for all packages. 

In conclusion, our study highlights the need for improved security measures in the npm ecosystem. By implementing these mitigation strategies, we can reduce the risk of security threats and better protect the vast and important software ecosystem that npm supports.