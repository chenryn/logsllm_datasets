title:Small World with High Risks: A Study of Security Threats in the
npm Ecosystem
author:Markus Zimmermann and
Cristian-Alexandru Staicu and
Cam Tenny and
Michael Pradel
Small World with High Risks: 
A Study of Security Threats in the npm Ecosystem
Markus Zimmermann and Cristian-Alexandru Staicu, TU Darmstadt; Cam Tenny, r2c; 
Michael Pradel, TU Darmstadt
https://www.usenix.org/conference/usenixsecurity19/presentation/zimmerman
This paper is included in the Proceedings of the 28th USENIX Security Symposium.August 14–16, 2019 • Santa Clara, CA, USA978-1-939133-06-9Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX.Small World with High Risks:
A Study of Security Threats in the npm Ecosystem
Markus Zimmermann
Department of Computer Science
TU Darmstadt
Cristian-Alexandru Staicu
Department of Computer Science
TU Darmstadt
Cam Tenny
r2c
Department of Computer Science
Michael Pradel
TU Darmstadt
Abstract
The popularity of JavaScript has lead to a large ecosystem
of third-party packages available via the npm software pack-
age registry. The open nature of npm has boosted its growth,
providing over 800,000 free and reusable software packages.
Unfortunately, this open nature also causes security risks, as
evidenced by recent incidents of single packages that broke
or attacked software running on millions of computers. This
paper studies security risks for users of npm by systematically
analyzing dependencies between packages, the maintainers
responsible for these packages, and publicly reported secu-
rity issues. Studying the potential for running vulnerable or
malicious code due to third-party dependencies, we ﬁnd that
individual packages could impact large parts of the entire
ecosystem. Moreover, a very small number of maintainer ac-
counts could be used to inject malicious code into the majority
of all packages, a problem that has been increasing over time.
Studying the potential for accidentally using vulnerable code,
we ﬁnd that lack of maintenance causes many packages to de-
pend on vulnerable code, even years after a vulnerability has
become public. Our results provide evidence that npm suffers
from single points of failure and that unmaintained pack-
ages threaten large code bases. We discuss several mitigation
techniques, such as trusted maintainers and total ﬁrst-party
security, and analyze their potential effectiveness.
1 Introduction
JavaScript has become one of the most widely used program-
ming languages. To support JavaScript developers with third-
party code, the node package manager, or short npm, provides
hundreds of thousands of free and reusable code packages.
The npm platform consists of an online database for search-
ing packages suitable for given tasks and a package manager,
which resolves and automatically installs dependencies. Since
its inception in 2010, npm has steadily grown into a collection
of over 800,000 packages, as of February 2019, and will likely
grow beyond this number. As the primary source of third-party
JavaScript packages for the client-side, server-side, and other
platforms, npm is the centerpiece of a large and important
software ecosystem.
The npm ecosystem is open by design, allowing arbitrary
users to freely share and reuse code. Reusing a package is as
simple as invoking a single command, which will download
and install the package and all its transitive dependencies.
Sharing a package with the community is similarly easy, mak-
ing code available to all others without any restrictions or
checks. The openness of npm has enabled its growth, provid-
ing packages for any situation imaginable, ranging from small
utility packages to complex web server frameworks and user
interface libraries.
Perhaps unsurprisingly, npm’s openness comes with secu-
rity risks, as evidenced by several recent incidents that broke
or attacked software running on millions of computers. In
March 2016, the removal of a small utility package called
left-pad caused a large percentage of all packages to become
unavailable because they directly or indirectly depended on
left-pad.1 In July 2018, compromising the credentials of the
maintainer of the popular eslint-scope package enabled an
attacker to release a malicious version of the package, which
tried to send local ﬁles to a remote server.2
Are these incidents unfortunate individual cases or ﬁrst
evidence of a more general problem? Given the popularity
of npm, better understanding its weak points is an important
step toward securing this software ecosystem. In this paper,
we systematically study security risks in the npm ecosystem
by analyzing package dependencies, maintainers of packages,
and publicly reported security issues. In particular, we study
the potential of individual packages and maintainers to impact
the security of large parts of the ecosystem, as well as the
ability of the ecosystem to handle security issues. Our analysis
is based on a set of metrics deﬁned on the package dependency
graph and its evolution over time. Overall, our study involves
5,386,239 versions of packages, 199,327 maintainers, and
1https://www.infoworld.com/article/3047177/javascript/
how-one-yanked-javascript-package-wreaked-havoc.html
2https://github.com/eslint/eslint-scope/issues/39
USENIX Association
28th USENIX Security Symposium    995
609 publicly known security issues.
The overall ﬁnding is that the densely connected nature of
the npm ecosystem introduces several weak spots. Speciﬁ-
cally, our results include:
• Installing an average npm package introduces an implicit
trust on 79 third-party packages and 39 maintainers, cre-
ating a surprisingly large attack surface.
• Highly popular packages directly or indirectly inﬂuence
many other packages (often more than 100,000) and are
thus potential targets for injecting malware.
• Some maintainers have an impact on hundreds of thou-
sands of packages. As a result, a very small number
of compromised maintainer accounts sufﬁces to inject
malware into the majority of all packages.
• The inﬂuence of individual packages and maintainers
has been continuously growing over the past few years,
aggravating the risk of malware injection attacks.
• A signiﬁcant percentage (up to 40%) of all packages
depend on code with at least one publicly known vulner-
ability.
Overall, these ﬁndings are a call-to-arms for mitigating se-
curity risks on the npm ecosystem. As a ﬁrst step, we discuss
several mitigation strategies and analyze their potential effec-
tiveness. One strategy would be a vetting process that yields
trusted maintainers. We show that about 140 of such maintain-
ers (out of a total of more than 150,000) could halve the risk
imposed by compromised maintainers. Another strategy we
discuss is to vet the code of new releases of certain packages.
We show that this strategy reduces the security risk slightly
slower than trusting the involved maintainers, but it still scales
reasonably well, i.e., trusting the top 300 packages reduces
the risk by half. If a given package passes the vetting process
for maintainers and code, we say it has “perfect ﬁrst-party
security”. If all its transitive dependencies pass the vetting
processes we say that it has “perfect third-party security”.
If both conditions are met, we consider it a “fully secured
package”. While achieving this property for all the packages
in the ecosystem is infeasible, packages that are very often
downloaded or that have several dependents should aim to
achieve it.
2 Security Risks in the npm Ecosystem
To set the stage for our study, we describe some security-
relevant particularities of the npm ecosystem and introduce
several threat models.
2.1 Particularities of npm
Locked Dependencies
In npm, dependencies are declared
in a conﬁguration ﬁle called package.json, which speciﬁes
the name of the dependent package and a version constraint.
The version constraint either gives a speciﬁc version, i.e., the
dependency is locked, or speciﬁes a range of compatible ver-
sions, e.g., newer than version X. Each time an npm package
is installed, all its dependencies are resolved to a speciﬁc
version, which is automatically downloaded and installed.
Therefore, the same package installed on two different ma-
chines or at two different times may download different ver-
sions of a dependency. To solve this problem, npm introduced
package-lock.json, which developers can use to lock their tran-
sitive dependencies to a speciﬁc version until a new lock ﬁle
is generated. That is, each package in the dependency tree is
locked to a speciﬁc version. In this way, users ensure uniform
installation of their packages and coarse grained update of
their dependencies. However, a major shortcoming of this ap-
proach is that if a vulnerability is ﬁxed for a given dependency,
the patched version is not installed until the package-lock.json
ﬁle is regenerated. In other words, developers have a choice
between uniform distribution of their code and up-to-date
dependencies. Often they choose the later, which leads to a
technical lag [12] between the latest available version of a
package and the one used by dependents.
Heavy Reuse Recent work [11, 18] provides preliminary
evidence that code reuse in npm differs signiﬁcantly from
other ecosystems. One of the main characteristic of the npm
ecosystem is the high number of transitive dependencies. For
example, when using the core of the popular Spring web
framework in Java, a developer transitively depends on ten
other packages. In contrast, the Express.js web framework
transitively depends on 47 other packages.
Micropackages Related to the reuse culture, another inter-
esting characteristic of npm is the heavy reliance on packages
that consist of only few lines of source code, which we call
micropackages. Related work documents this trend and warns
about its dangers [1, 19]. These packages are an important
part of the ecosystem, yet they increase the surface for certain
attacks as much as functionality heavy packages. This exces-
sive fragmentation of the npm codebase can thus lead to very
high number of dependencies.
No Privilege Separation In contrast to, e.g., the Java se-
curity model in which a SecurityManager3 can restrict the
access to sensitive APIs, JavaScript does not provide any kind
of privilege separation between code loaded from different
packages. That is, any third-party package has the full privi-
leges of the entire application. This situation is compounded
by the fact that many npm packages run outside of a browser,
in particular on the Node.js platform, which does not provide
any kind of sandbox. Instead, any third-party package can
access, e.g., the ﬁle system and the network.
3https://docs.oracle.com/javase/6/docs/api/java/lang/
SecurityManager.html
996    28th USENIX Security Symposium
USENIX Association
No Systematic Vetting The process of discovering vulner-
abilities in npm packages is still in its infancy. There currently
is no systematic vetting process for code published on npm.
Instead, known vulnerabilities are mostly reported by indi-
viduals, who ﬁnd them through manual analysis or in recent
research work, e.g., injection vulnerabilities [30], regular ex-
pression denial of service [9,29], path traversals [16], binding
layer bugs [6].
Publishing Model
In order to publish a package, a devel-
oper needs to ﬁrst create an account on the npm website. Once
this prerequisite is met, adding a new package to the repos-
itory is as simple as running the “npm publish” command
in a folder containing a package.json ﬁle. The user who ﬁrst
published the package is automatically added to the main-
tainers set and hence she can release future versions of that
package. She can also decide to add additional npm users as
maintainers. What is interesting to notice about this model
is that it does not require a link to a public version control
system, e.g., GitHub, hosting the code of the package. Nor
does it require that persons who develop the code on such
external repositories also have publishing rights on npm. This
disconnect between the two platforms has led to confusion4
in the past and to stealthy attacks that target npm accounts
without changes to the versioning system.
2.2 Threat Models
The idiosyncratic security properties of npm, as described
above, enable several scenarios for attacking users of npm
packages. The following discusses threat models that either
correspond to attacks that have already occurred or that we
consider to be possible in the future.
Malicious Packages (TM-mal) Adversaries may publish
packages containing malicious code on npm and hence trick
other users into installing or depending on such packages. In
2018, the eslint-scope incident mentioned earlier has been
an example of this threat. The package deployed its payload
at installation time through an automatically executed post-
installation script. Other, perhaps more stealthy methods for
hiding the malicious behavior could be envisioned, such as
downloading and executing payloads only at runtime under
certain conditions.
Strongly related to malicious packages are packages that
violate the user’s privacy by sending usage data to third par-
ties, e.g., insight5 or analytics-node6. While these libraries
are legitimate under speciﬁc conditions, some users may not
want to be tracked in this way. Even though the creators of
these packages clearly document the tracking functionality,
transitive dependents may not be aware that one of their de-
pendencies deploys tracking code.
4http://www.cs.tufts.edu/comp/116/archive/spring2018/
etolhurst.pdf
5https://www.npmjs.com/package/insight
6https://www.npmjs.com/package/analytics-node
Exploiting Unmaintained Legacy Code (TM-leg) As
with any larger code base, npm contains vulnerable code,
some of which is documented in public vulnerability
databases such as npm security advisories7 or Snyk vulnerabil-
ity DB8. As long as a vulnerable package remains unﬁxed, an
attacker can exploit it in applications that transitively depend
on the vulnerable code. Because packages may become aban-
doned due to developers inactivity [8] and because npm does
not offer a forking mechanism, some packages may never be
ﬁxed. Even worse, the common practice of locking dependen-
cies may prevent applications from using ﬁxed versions even
when they are available.
Package Takeover (TM-pkg) An adversary may convince