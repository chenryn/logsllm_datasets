and it is considered strong otherwise.
5.5. Results
37
How many known vulnerabilities are in the dependencies, sorted by low, moderate, high, and critical
vulnerabilities as reported by npm audit?
Furthermore, the following statistics are collected on the web preferences Electron offers (see Section 3.2.1).
For each setting, the checks determine whether it is enabled or disabled explicitly by the developers or im-
plicitly through the defaults set by Electron, taking into account the actual version of Electron used by the
app.
Context isolation (defined as webPreferences.contextIsolation)
Chromium DevTools (defined as webPreferences.devTools)
Node integration (defined as webPreferences.nodeIntegration (which is the most common method),
webPreferences.nodeIntegrationInWorker and webPreferences.nodeIntegrationInSubFrames
or as the nodeintegration and nodeintegrationinsubframes attributes of a  tag in
HTML)
Remote module (defined as webPreferences.enableRemoteModule)
Sandbox (defined as webPreferences.sandbox)
Web security (defined as webPreferences.webSecurity or the disablewebsecurity attribute of a
 tag in HTML)
To collect these statistics, a wrapper was developed that iterates over the apps previously added to
the database and runs both Electronegativity and npm audit for each one to then aggregate the desired
statistics and write them into the database.
5.5. Results
The results from analysing the 1,204 apps are presented here.
Electron versions In total, 198 different versions of Electron were encountered, starting from 1.0.0 up to
10.0.0-beta.3. For 221 apps, no version could be detected from any of the sources considered for this
check (package.json, package-lock.json and yarn.lock files as well as installed packages). Table
5.1 shows the ten most common versions and Figure 5.1 shows the distribution of the different major
versions.
Looking at the individual releases suggests healthy framework update practices at first glance with
version 9.0.5, which was the latest stable release when the apps were downloaded, also being the one
which was encountered most often with 38 times. Versions 9.0.4 and 9.0.0 take up the second and
fourth ranks with 27 and 20 occurrences respectively. However, version 1.7.5 is in rank three and
ranks five and six are taken up by versions 1.6.2 and 1.8.4, respectively. This hints at a frequent
use of old and deprecated versions, which is further confirmed by looking at the distribution of the
different major versions.
Here, the first major version takes the definitive lead with 287 occurrences. Major versions 8 and
9 follow with 136 and 110 occurrences, respectively. The other major versions all saw similar use,
occurring in 60 to 90 apps each.
This observation is worrying with regards to Electron’s supported versions policy: Only the latest
three major versions are supported at any given time [76]. Therefore, only those versions will receive
security fixes. There are known high severity vulnerabilities for all major versions up to 8, some with
fixes only available for the latest minor versions of the stable branches [77].
5.5. Results
38
Figure 5.1.: Number of apps found using the respective major Electron version. The ? labels the apps with an
undetected version. The versions marked orange were already out of support when the apps were
downloaded. Version 10 was still in beta.
1
2
3
4
5
6
7
8
9
10
0
100
200
300
?
Major version
Count
Table 5.1.: Frequency of individual Electron releases in the scanned apps with their respective release dates [78].
The versions in bold were not supported anymore when the apps were downloaded.
Version
Count
Release date
9.0.5
38
2020-06-22
9.0.4
27
2020-06-12
1.7.5
26
2017-07-17
9.0.0
20
2020-05-19
1.6.2
19
2017-03-01
1.8.4
19
2018-03-16
1.8.8
17
2020-04-30
2.0.8
17
2018-08-22
8.0.0
17
2020-02-03
8.3.0
17
2020-05-15
Types of sites loaded Electron apps can load local and remote sites using loadFile() and loadURL(). In
total, 197 remotely and 1,273 locally loaded sites were detected across all apps. 110 sites were loaded
using a custom protocol (like app://). These are most likely also local sites. For 1,043 calls, it couldn’t
be determined what kind of site was loaded due to the static nature of this analysis. In these cases,
the loaded URL depended on environment variables and arguments to functions for example. Further,
there were 698 apps with at least one locally loaded site (not including custom protocols) compared
to 163 apps with at least one remotely loaded site. Only 51 of those 163 apps loading remote sites
didn’t load any local sites. This suggests that most Electron apps actually ship with local sites instead
of just wrapping existing websites.
Protocol handlers In total, 263 protocol handler registrations were found across all apps. Note that this
may include duplicates if different handlers are registered based on certain conditions for example.
148 apps registered at least one protocol handler.
5.5. Results
39
XSS risks Electron apps need to make sure not to let an attacker control the HTML and JavaScript on
a page. This can easily go wrong when passing user-controlled data to a dangerous function like
executeJavascript() and document.write() or assigning such data to a dangerous property like
element.innerHTML. In total, 5,180 such calls or assignments using data that was not a literal were
found, with 546 apps including at least one such call or execution. Note that not all of these findings
are exploitable but their use is nonetheless discouraged, and they provide a good starting point for a
manual analysis.
Code execution risks Similarly, dangerous calls to functions like Node.js’ child_process.exec() and
child_process.spawn() (only if options.shell === true for the latter) can allow an attacker
to execute malicious code on the user’s system. 902 of those calls were found in total and 150 apps
included at least one such call. Again, this doesn’t necessarily mean that these apps are exploitable.
shell.openExternal() In total, 1,988 potentially dangerous calls to shell.openExternal() were found,
with 571 apps including at least one such call. A “dangerous” call in this context means passing
something other than a string literal. Therefore, the numbers do include false positives, but they
still give a good indication of the prevalence of problems related to shell.openExternal() and the
findings are helpful for the manual analysis.
CSPs In 1,105 of the 1,204 apps scanned, no CSP was found at all. 211 CSPs were found in total. Of
those, 136 were classified as weak and 54 as maybe weak by Google’s CSP evaluator with only 21
being classified as strong. 5 CSPs could not be parsed, either because they were invalid or because
they used some templating engine to build the final CSP.
Known vulnerabilities in the dependencies For 202 apps, analysing the dependencies failed. Figure 5.2
shows how many known vulnerabilities were found in the dependencies per app, grouped by low,
moderate, high, and critical severity. Clearly, vulnerabilities of low severity are the most common by
far. These vulnerabilities are usually hard to exploit and have little impact. In addition, some of them
are likely not relevant for the end user as the counts include vulnerabilities in the devDependencies,
which are only used on the developer’s computer and not included in the final executable.
The other severities occur far less often. While there are some outliers, the average Electron app
doesn’t include any dependencies with critical vulnerabilities.
Web preferences Figure 5.3 shows the distributions of which web preferences are commonly used. For each
preference, the supplied settings were classified as either “secure” or “insecure” and it was recorded
whether the app explicitly set the preference or relied on the default value.
The results clearly show the importance of secure defaults. For all preferences other than Node
integration, the vast majority of apps didn’t change the defaults. In the case of the web security
setting, this means that most apps are therefore secure in this regard. For settings like context
isolation and sandbox, it’s the opposite though with most apps using insecure settings which will
make exploitation easier.
Node integration, on the other hand, changed to a secure default in Electron 5. The results of this
change are visible with a larger percentage of apps using the new default. An even larger percentage
however opted to explicitly enable Node integration, most likely so as not to have to migrate their
apps. In the future, similar distributions are to be expected for settings like context isolation when
these defaults also change.
5.5. Results
40
Figure 5.2.: Number of known vulnerabilities in the dependencies per app, sorted by low, moderate, high and critical
severity. The graph on the right simply omits the vulnerabilities classified as low severity, which otherwise
make the other severities hard to see. Outliers are omitted in both graphs.
Low
Moderate
High
Critical
0
200
400
600
800
Count
Moderate
High
Critical
0
10
20
30
Count
Figure 5.3.: Number of apps found using the security-relevant web preference settings at least once. For context
isolation, sandbox and web security, ‘secure’ means true, for the others, it means false. Apps may be
counted more than once if they have multiple windows with different preferences.
Context isolation
DevTools
Node integration
Remote module
Sandbox
Web security
0
250
500
750
1,000
1,250
Count
explicitly secure
implicitly secure
explicitly insecure
implicitly insecure
6. Manual Analysis
After the automated analysis, a few apps were also analysed manually to validate the findings and gain an
insight into how easy it is to exploit Electron apps. All discovered exploitable vulnerabilities were reported
to the developers. In total, six vulnerabilites were reported, all allowing for remote code execution, with
one already fixed as of the time of writing.
To select the apps for analysis, all scanned apps were sorted by the number of issues reported by Elec-
tronegativity. This is of course not an actual indicator of security problems as the tool was modified to also
report secure practices for this thesis. It does however give a first idea of which apps might be interesting
to look at further. Due to time constraints, only open source apps were considered. Finally, only apps with
an apparent way of delivering payloads (like the ability to send messages, share items, or load remote sites)
were considered.
6.1. RCE in Jitsi Meet Electron
Jitsi Meet is an open source video conferencing software that organizations can deploy on their own servers
and that is frequently recommended as an alternative to proprietary solutions [79]. Jitsi Meet Electron is
the oﬀicial desktop client implemented using Electron that can be used both with the oﬀicial meet.jit.si
server as well as any third-party instance.
The results from the Electronegativity run revealed the following use of shell.openExternal():1
mainWindow.webContents.on('new-window', (event, url, frameName) => {
const target = getPopupTarget(url, frameName);
if (!target || target === 'browser') {
event.preventDefault();
shell.openExternal(url);
}
});
This hooks the creation of new windows to instead pass the URL to shell.openExternal() unless a
popup target other than browser is registered for the URL and frame name of the new window. These
popup targets are however only used to handle windows that should always stay on top2 and are thus not
a security check.
As mentioned before, the app can be used with third-party servers. As such, it is possible for an attacker
to inject a malicious call to window.open() into the pages of their Jitsi Meet instance that will then
allow them to pass arbitrary URLs to shell.openExternal() when a user uses their server with the app.
The dangers of this were already explained in Section 4.2. In the case of this app, the attack surface was
somewhat limited insofar as the external server is loaded through an  and opening file: URLs
was thus blocked. However, all the other protocols could still be used as discussed. For example, a smb:
1Code
from
https://github.com/jitsi/jitsi-meet-electron/blob/7b2b0c4e710bb626b9d886bb8c283357b223c23b/main.
js#L209-L216.
2See:
https://github.com/jitsi/jitsi-meet-electron-utils/blob/ba851e726b62e93bdcd7ec69414a9c90e3412d58/
alwaysontop/index.js#L5-L10
6.2. RCE in Desktop App for CMS
42
URL to a .desktop file on a remote server allowed for RCE on Xubuntu 20.04.
The attack surface was further extended by the recent introduction of a protocol handler that allows
linking to rooms on external servers (using jitsi-meet://jitsi.attacker.tld/dangerous-room) [80].
An attacker could use a link like this to lead a user to use their server without having to set the server
URL in the app preferences.
The vulnerability was reported to the developers on June 28, 2020. It was tested using the latest release
of the app at that time, version 2.2.0. A fix was implemented on June 30, 2020 by filtering the URLs that
may be passed to shell.openExternal() to only allow HTTP(S) URLs.3 The fix was released in version
2.3.0 on July 2, 2020.
Additionally, the app exposed the shell.openExternal() function on the window object which could be
accessed from the renderer process as context isolation is disabled. This was not a critical problem as the
remote site is only loaded in an  and thus doesn’t have access to the app’s window object. However,
if an attacker somehow managed to achieve XSS in the renderer process, they could use this to escalate it
into RCE. As there were no uses of the exposed function in the code, a recommendation to remove it was
also included in the report. This was also implemented by the developers in the same commit.
Similar issues have also been found in Rocket.Chat Desktop and Wire Desktop, both allowing for RCE.
These have been reported on July 15, 2020. As of the time of writing, they have not been fixed yet and can
thus not be described in more detail here.
6.2. RCE in Desktop App for CMS