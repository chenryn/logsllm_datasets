### 优化后的文本

#### 伪代码部分
```plaintext
Upon deliver ⟨PERSIST, bNum, ⟨r, lbHash⟩σr⟩ do
    Cert[bNum] ← Cert[bNum] ∪ {⟨r, lbHash⟩σr}

if valid(recTx, recProof, nKeysx[]) then
    Upon totalOrderDeliver ⟨VIEW, cid, recTx, recProof, nKeys[]⟩ do
        Txs[bNum] ← ⟨recTx, recProof, nKeys[]⟩
        asyncWriteBC(⟨cid, Txs[bNum], nKeys[]⟩)
        updates cv according to recTx
        Res[bNum] ← ⟨recTx.senderId, cv⟩
        asyncWriteBC(Res[bNum])
        closeBlock(hash(Txs[bNum]), hash(Res[bNum]))
        send ⟨REPLY, cv⟩ to recTx.senderId
        lRec ← bNum
        checkpoint()
        bNum + +
        if (bNum % CHECKPOINT_PERIOD) = 0 then
            checkpoint()

Procedure checkpoint()
    lCkp ← bNum
    resetCached()
    lSnapshot ← takeSnapshot()
    asyncWriteSN(lSnapshot)

Upon deliver ⟨ST REQ, cid, stateReq⟩ do
    lastTxs ← get transactions from lCkp + 1 to cid from the cache
    send ⟨ST REP, cid, lastTxs, lSnapshot⟩ to stateReq.senderId
```

#### 文本部分
**系统概述**

在接收到 `⟨PERSIST, bNum, ⟨r, lbHash⟩σr⟩` 消息时，将 `Cert[bNum]` 更新为 `Cert[bNum] ∪ {⟨r, lbHash⟩σr}`。如果 `recTx`, `recProof`, 和 `nKeysx[]` 验证通过，则在接收到 `⟨VIEW, cid, recTx, recProof, nKeys[]⟩` 消息时，更新 `Txs[bNum]` 为 `⟨recTx, recProof, nKeys[]⟩`，并异步写入区块链。根据 `recTx` 更新 `cv`，并将结果 `Res[bNum]` 设置为 `⟨recTx.senderId, cv⟩`，然后异步写入区块链。关闭当前区块，并发送 `⟨REPLY, cv⟩` 给 `recTx.senderId`。更新 `lRec` 为 `bNum`，并进行检查点操作。增加 `bNum`，如果 `bNum` 是 `CHECKPOINT_PERIOD` 的倍数，则再次执行检查点操作。

检查点过程包括更新 `lCkp` 为 `bNum`，重置缓存，获取快照，并异步写入快照。当接收到 `⟨ST REQ, cid, stateReq⟩` 消息时，从缓存中获取从 `lCkp + 1` 到 `cid` 的交易记录，并发送 `⟨ST REP, cid, lastTxs, lSnapshot⟩` 给请求者。

**成员排除处理**

排除成员的过程与上述类似，但需要等待来自大多数节点的交易确认。

**快照和状态转移**

快照数据存储在区块链之外的不同文件中（第54行）。状态转移请求会返回最近的快照以及自上次检查点以来缓存的区块链数据（第55-57行）。

**性能评估**

我们在BFT-SMART上实现了SMARTCHAIN，并进行了多项实验：(1) 比较不同区块链持久化策略的性能；(2) 将SMARTCHAIN的性能与其他类似系统（如Tendermint和Hyperledger Fabric）进行比较；(3) 理解系统在重新配置、崩溃和恢复等事件下的行为。

**实验设置和方法**

实验环境配置了14台连接到1Gbps交换网络的机器。每台机器配置了Ubuntu Linux 16.04.5 LTS操作系统和JRE 1.8.0，运行在Dell PowerEdge R410服务器上。每台机器配备32 GB内存和两个四核2.27 GHz Intel Xeon E5520处理器（支持16个硬件线程），以及一个146 GB SCSI HDD（Seagate Cheetah ST3146356SS）。实验最多使用10个副本，分布在不同的物理机上。此外，2400个客户端进程均匀分布在其他四台机器上。

SMARTCHAIN配置的最大批处理大小（区块大小）为512笔交易。实验分为两个阶段：第一阶段是生成新币的MINT操作，第二阶段是将生成的币转移到新地址的SPEND操作。每个客户端发出最多1000个MINT和SPEND请求。本文仅报告SPEND的结果，因为两种类型的交易结果相当。

每次实验中，吞吐量在每个10k操作间隔时测量。从收集的数据中，丢弃变异值最大的20%的数据，计算平均值。标准偏差始终低于500 txs/sec。

**实验结果**

本节展示了实验结果，分为三个子集，对应于评估目标。

a) **比较不同的区块链策略**：我们比较了不同区块链持久化保证的系统性能：SMARTCHAIN配置了同步存储写入（强变体和弱变体分别为0-Persistence和1-Persistence）、异步存储写入（强变体和弱变体均为λ-Persistence），以及仅内存存储（强变体和弱变体均为∞-Persistence）。作为基准，还展示了BFT-SMART的高效持久性层[37]的结果，该层不实现区块链（第IV-A节）。图6显示了所有这些配置在不同联盟规模下以及是否使用签名的情况下的吞吐量结果。

结果显示，签名验证是对性能影响最大的因素，其次是存储策略。对于n=4且使用签名的情况，SMARTCHAIN的吞吐量分别约为12k和14k txs/sec（强变体和弱变体）。当禁用签名时，这些值分别增加到约18k和26k txs/sec（强变体和弱变体）。注意，交易的大小使得纯BFT-SMART（N设置）的吞吐量达到33k txs/sec，远低于系统在几字节交易时的80k txs/sec [25]。

在我们的实验中，联盟规模对具有更强保证的配置（签名和同步写入）的性能影响较小，在所有持久性策略中都是如此。这表明在这种情况下，共识协议并不是瓶颈。相反，瓶颈是将账本写入磁盘的时间和执行签名验证的时间。然而，预计BFT-SMART共识协议的可扩展性不足将在更大的组中成为瓶颈[24]。

同样，结果显示，强区块链变体中的额外PERSIST阶段对系统性能的影响不大，因为这种设置的结果仅比弱变体低13%。

b) **与其他系统的比较**：表II将SMARTCHAIN的性能与另外两个知名的BFT区块链系统Tendermint [3, 49, 50] 和 Hyperledger Fabric [1] 进行了比较。两者都配置了BFT排序服务[40]。对于两种变体，SMARTCHAIN配置为使用签名和同步写入。Tendermint和Hyperledger Fabric也都配置为最大持久性。最后，所有系统都配置了四个副本来容忍单个拜占庭故障。

表II显示，SMARTCHAIN的性能显著优于竞争系统。Tendermint使用类似于SMaRtCoin的应用层和排序层分离架构，性能结果也相似（第IV-A节）。尽管其他工作报道了更高的Hyperledger Fabric吞吐量（例如，大约1k txs/sec [51]），但在我们的测试环境中只能达到最高381 txs/sec。

c) **重新配置、崩溃和恢复**：图7显示了在不同事件下，使用签名和同步写入的SMARTCHAIN强变体的行为，有600个客户端访问系统。在这个实验中，系统配置了8百万UTXO，代表比特币网络当前UTXO数量的10%，导致状态为1GB。

我们可以观察到，吞吐量在所有客户端开始运行后逐渐增加，大约在第7秒。在第120秒，副本4加入系统，由于协议中使用了较大的仲裁机制，吞吐量下降。在第240秒，副本3崩溃，这对吞吐量没有影响，随后在第360秒恢复。在第442秒，副本执行了一个耗时23秒的检查点操作。在此期间，吞吐量几乎降为零。可以通过配置副本来在执行的不同时间点进行检查点以减少其对整体系统性能的影响[37]。最后，在第480秒，副本4离开系统，吞吐量回到实验开始时的水平。

注意，在加入或恢复后，副本大约需要60秒来从其他副本获取并安装1GB的状态（图7中的绿色点）。在这段时间内，由于副本必须将其状态发送给加入或恢复的副本，吞吐量略有下降。通过使用检查点和状态转移，副本可以比其他不采用此技术的系统更快地加入系统。例如，目前一个节点必须处理223GB（9080186个区块）的区块链才能加入以太坊网络[53]，即使修剪旧状态也是如此。基于这一观察，图8显示了在不同检查点周期和区块链大小下，更新副本所需的处理时间。检查点提高了重新配置的性能，因为加入的节点只需处理最后一个检查点之后的日志交易。

**相关工作**

自从比特币问世并广泛采用以来，关于许可链和无许可链平台的研究大量涌现。这些研究大多集中在多种区块链共识类型上，但很少深入讨论区块链的持久性和去中心化联盟重新配置的问题。

a) **持久性**：最流行的区块链的规模、延迟和概率终结性导致了一种特定的持久性解决方案。