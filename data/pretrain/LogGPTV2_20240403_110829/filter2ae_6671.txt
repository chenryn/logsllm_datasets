# 无需括号与分号的XSS技术
##### 译文声明
本文为翻译文章，原文作者为portswigger，来源网站为portswigger.net。请注意，译文仅供读者参考，具体含义和表达以英文原文为准。

几年前，我发现了一种在JavaScript中调用函数而无需使用括号的技术。该方法结合了`onerror`事件处理器和`throw`语句。其基本原理是首先设置`onerror`处理器为您希望执行的函数，随后通过`throw`语句传递参数给这个函数。每当JavaScript抛出异常时，都会触发`onerror`处理器；此时，`throw`语句创建了一个包含特定表达式的自定义异常，并将其传递给`onerror`处理器处理。由于`throw`是一个独立的语句，通常需要在赋值给`onerror`之后添加一个分号来开始新的语句。

在一个过滤掉括号和分号的网站上，我认为可以利用上述技巧绕过限制。最直接的方法是在大括号内定义块级作用域，在其中设定`onerror`处理器，接着在同一行或新行中无分号地执行`throw`操作：
```javascript
{
  window.onerror = function() { /* 您想执行的功能 */ };
  throw '参数';
}
```
尽管这种方法有效，但我探索了更简洁的方式。考虑到`throw`接受一个表达式作为参数，因此可以在`throw`内部完成对`onerror`的赋值。这样做的好处在于，因为表达式的最后一个部分会被传送到`onerror`处理器，所以能够成功地调用目标函数并传递参数。

值得注意的是，在Chrome浏览器中尝试运行这类代码时，“Uncaught”会作为异常信息的一部分被前置到发送给处理器的字符串前。我的早期博客介绍过一种变通方案：通过在字符串前加上等号(`=`)并将“Uncaught”视为变量名来执行任意JavaScript代码。例如：
```javascript
window.onerror = eval;
throw '=alert(1337)';
```
这段代码能在Chrome下正常运作，但在Firefox里，由于异常信息前面多出了"uncaught exception "字样，导致语法错误。为解决这个问题，我进行了进一步的研究。

实验发现，直接在控制台执行`throw`命令并不能重现`onerror/throw`的效果，这是因为控制台输出代替了正常的异常处理器行为。当使用`Error`构造函数在Firefox中创建异常时，虽然不会出现额外的文本前缀，但由于需要使用括号调用，这对我们当前的问题帮助不大。于是，我转向研究`Error`对象本身，试图找到替代方案。经过一番努力后，最终确定只需要几个关键属性即可模拟原始`Error`对象的行为，从而实现在Firefox中的跨站脚本攻击（XSS）：

```javascript
var e = {
  name: "Error",
  message: "My message",
  fileName: "file.js"
};
throw e;
```

此外，我还注意到可以通过设置`fileName`属性向Firefox发送第二个参数。此发现公布于社交媒体后，得到了[@terjanq](https://github.com/terjanq "@terjanq") 和 [@cgvwzq](https://github.com/cgvwzq "@cgvwzq") 等安全研究人员的关注，他们提出了更多创新性的解决方案，包括完全移除`throw`语句的需求等。