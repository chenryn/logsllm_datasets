在工单追踪器中，讨论了新的提议之后，就是在代码上做工作的时候了。你在本地书写代码，一旦你完成了你的第一个版本，提交你的代码并且推送到你的 GitLab 仓库。你基于 Git 的管理策略可以在 [GitLab 流](https://about.gitlab.com/2014/09/29/gitlab-flow/)中被提升。
#### 第一次提交
在你的第一次提交信息中，你可以添加涉及到工单号在其中。通过这样做你可以将两个阶段的开发工作流链接起来：工单本身以及关于这个工单的第一次提交。
这样做，如果你提交的代码和工单属于同一个项目，你可以简单的添加 `#xxx` 到提交信息中（LCTT 译注：`git commit message`），`xxx`是一个工单号。如果它们不在一个项目中，你可以添加整个工单的整个URL（`https://gitlab.com///issues/`）。
```
git commit -m "this is my commit message. Ref #xxx" 
```
或者
```
git commit -m "this is my commit message. Related to https://gitlab.com///issues/"
```
当然，你也可以替换 `gitlab.com`，以你自己的 GitLab 实例来替换这个 URL。
**注：** 链接工单和你的第一次提交是为了通过 [GitLab 周期分析](https://about.gitlab.com/2016/10/25/gitlab-workflow-an-overview/#feedback)追踪你的进展。这将会衡量计划执行该工单所采取的时间，即创建工单与第一次提交的间隔时间。
#### 合并请求
一旦将你的改动提交到功能分支，GitLab 将识别该修改，并且建议你提交一次 合并请求   Merge Request （MR）。
每一次 MR 都会有一个标题（这个标题总结了这次的改动）并且一个用 [Markdown](https://docs.gitlab.com/ee/user/markdown.html) 书写的描述。在描述中，你可以简单的描述该 MR 做了什么，提及任何工单以及 MR（在它们之间创建联系），并且，你也可以添加个[关闭工单模式](https://docs.gitlab.com/ce/administration/issue_closing_pattern.html)，当该 MR 被**合并**的时候，相关联的工单就会被关闭。
例如:
```
## 增加一个新页面
这个 MR 将会为这个项目创建一个包含该 app 概览的 `readme.md`。
Closes #xxx and https://gitlab.com///issues/
预览：
![预览新页面](#image-url)
cc/ @Mary @Jane @John
```
当你创建一个如上的带有描述的 MR，它将会：
* 当合并时，关闭包括工单 `#xxx` 以及 `https://gitlab.com///issues/`
* 展示一张图片
* 通过邮件提醒用户 `@Mary`、`@Jane`，以及给 `@John`
你可以分配这个 MR 给你自己，直到你完成你的工作，然后把它分配给其他人来做一次代码复审。如果有必要的话，这个 MR 可以被重新分配多次，直到你覆盖你所需要的所有复审。
它也可以被标记，并且添加一个[里程碑](https://about.gitlab.com/2016/10/25/gitlab-workflow-an-overview/#milestones)来促进管理。
当你从图形界面而不是命令行添加或者修改一个文件并且提交一个新的分支时，也很容易创建一个新的 MR，仅仅需要标记一下复选框，“以这些改变开始一个新的合并请求”，然后，一旦你提交你的改动，GitLab 将会自动创建一个新的 MR。
![commit to a feature branch and add a new MR from the UI](/data/attachment/album/201705/13/140915x1iad3huvap6iimp.png)
**注：** 添加[关闭工单样式](https://docs.gitlab.com/ce/administration/issue_closing_pattern.html)到你的 MR 以便可以使用 [GitLab 周期分析](https://about.gitlab.com/2016/10/25/gitlab-workflow-an-overview/#feedback)追踪你的项目进展，是十分重要的。它将会追踪“CODE”阶段，衡量第一次提交及创建一个相关的合并请求所间隔的时间。
**新功能：** 我们已经开发了[审查应用](https://about.gitlab.com/2016/10/22/gitlab-8-13-released/#ability-to-stop-review-apps)，这是一个可以让你部署你的应用到一个动态的环境中的新功能，在此你可以按分支名字、每个合并请求来预览改变。参看这里的[可用示例](https://gitlab.com/gitlab-examples/review-apps-nginx/)。
#### WIP MR
WIP MR 含义是 **在工作过程中的合并请求**，是一个我们在 GitLab 中避免 MR 在准备就绪前被合并的技术。只需要添加 `WIP:` 在 MR 的标题开头，它将不会被合并，除非你把 `WIP:` 删除。
当你改动已经准备好被合并，编辑工单来手动删除 `WIP:` ，或者使用就像如下 MR 描述下方的快捷方式。
![WIP MR click to remove WIP from the title](/data/attachment/album/201705/13/140915v7wmc2lz7bwcfpbm.png)
**新功能：** `WIP` 模式可以通过[斜线命令](https://docs.gitlab.com/ce/user/project/slash_commands.html) `/wip` [快速添加到合并请求中](https://about.gitlab.com/2016/10/22/gitlab-8-13-released/#wip-slash-command)。只需要在评论或者 MR 描述中输入它并提交即可。
#### 复审
一旦你创建一个合并请求，就是你开始从你的团队以及合作方收取反馈的时候了。使用图形界面中的差异比较功能，你可以简单的添加行内注释，以及回复或者解决它们。
你也可以通过点击行号获取每一行代码的链接。
在图形界面中可以看到提交历史，通过提交历史，你可以追踪文件的每一次改变。你可以以行内差异或左右对比的方式浏览它们。
![code review in MRs at GitLab](/data/attachment/album/201705/13/140915x4fm7b44mbr7mk5z.png)
**新功能：** 如果你遇到合并冲突，可以快速地[通过图形界面来解决](https://about.gitlab.com/2016/08/22/gitlab-8-11-released/#merge-conflict-resolution)，或者依据你的需要修改文件来修复冲突。
![mr conflict resolution](/data/attachment/album/201705/13/140918p3w5mfi22qf1mktb.gif)
### 构建、测试以及发布
[GitLab CI](https://about.gitlab.com/gitlab-ci/) 是一个强大的内建工具，其作用是[持续集成、持续发布以及持续分发](https://about.gitlab.com/2016/07/22/gitlab-8-10-released/#bulk-subscribe-to-issues)，它可以按照你希望的运行一些脚本。它的可能性是无止尽的：你可以把它看做是自己运行的命令行。
它完全是通过一个名为 `.gitlab-ci.yml` 的 YAML 文件设置的，其放置在你的项目仓库中。使用 Web 界面简单的添加一个文件，命名为 `.gitlab-ci.yml` 来触发一个下拉菜单，为不同的应用选择各种 CI 模版。
![GitLab CI templates - dropdown menu](/data/attachment/album/201705/13/140918g28u2sso8zbbqz6u.png)
#### Koding
Use GitLab's [Koding integration](https://about.gitlab.com/2016/08/22/gitlab-8-11-released/#koding-integration) to run your entire development environment in the cloud. This means that you can check out a project or just a merge request in a full-fledged IDE with the press of a button.
可以使用 GitLab 的 [Koding 集成](https://about.gitlab.com/2016/08/22/gitlab-8-11-released/#koding-integration)功能在云端运行你的整个云端开发环境。这意味着你可以轻轻一键即可在一个完整的 IDE 中检出以个项目，或者合并一个请求。
#### 使用案例
GitLab CI 的使用案例：
* 用它来[构建](https://about.gitlab.com/2016/04/07/gitlab-pages-setup/)任何[静态网站生成器](https://about.gitlab.com/2016/06/17/ssg-overview-gitlab-pages-part-3-examples-ci/)，并且通过 [GitLab Pages](https://pages.gitlab.io/) 发布你的网站。
* 用它来[发布你的网站](https://about.gitlab.com/2016/08/26/ci-deployment-and-environments/) 到 `staging` 以及 `production` [环境](https://docs.gitlab.com/ce/ci/yaml/README.html#environment)。
* 用它来[构建一个 iOS 应用](https://about.gitlab.com/2016/03/10/setting-up-gitlab-ci-for-ios-projects/)。
* 用它来[构建和发布你的 Docker 镜像](https://about.gitlab.com/2016/08/11/building-an-elixir-release-into-docker-image-using-gitlab-ci-part-1/)到 [GitLab 容器注册库](https://about.gitlab.com/2016/05/23/gitlab-container-registry/)。
我们已经准备一大堆 [GitLab CI 样例工程](https://docs.gitlab.com/ee/ci/examples/README.html)作为您的指南。看看它们吧！
### 反馈：周期分析
当你遵循 GitLab 工作流进行工作，你的团队从点子到产品，在每一个[过程的关键部分](https://about.gitlab.com/2016/09/21/cycle-analytics-feature-highlight/)，你将会在下列时间获得一个 [GitLab 周期分析](https://about.gitlab.com/solutions/cycle-analytics/)的反馈：
* **Issue**： 从创建一个工单，到分配这个工单给一个里程碑或者添加工单到你的工单看板的时间。
* **Plan**： 从给工单分配一个里程碑或者把它添加到工单看板，到推送第一次提交的时间。
* **Code**： 从第一次提交到提出该合并请求的时间。
* **Test**： CI 为了相关合并请求而运行整个过程的时间。
* **Review**： 从创建一个合并请求到合并它的时间。
* **Staging**： 从合并到发布成为产品的时间。
* **Production（Total）**： 从创建工单到把代码发布成[产品](https://docs.gitlab.com/ce/ci/yaml/README.html#environment)的时间。
### 加强
#### 工单以及合并请求模版
[工单以及合并请求模版](https://docs.gitlab.com/ce/user/project/description_templates.html)允许你为你的项目去定义一个特定内容的工单模版和合并请求的描述字段。
你可以以 [Markdown](https://docs.gitlab.com/ee/user/markdown.html) 形式书写它们，并且把它们加入仓库的默认分支。当创建工单或者合并请求时，可以通过下拉菜单访问它们。