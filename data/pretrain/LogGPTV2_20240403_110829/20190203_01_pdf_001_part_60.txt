file named pubserver.log. The log file is deleted and a new one is created
each time the log file reaches the size limit set by logging.file.size.
 Specify a value of 2 or greater to enable log file rotation. All log file names have
an integer suffix (for example, pubserver.log.0, pubserver.log.1,
pubserver.log.2).
When log file rotation is enabled, the log file with the greatest integer suffix contains the
oldest messages. When there are enough messages to generate every file in the history
rotation, the oldest messages are in pubserver.log.n-1 where n is the setting of
logging.file.count. Log file pubserver.log.0 is the current, active log file
containing the most recent messages.
When log file rotation is enabled and the current, active log file (pubserver.log.0)
reaches the size specified by logging.file.size, then the following events occur:
 The log file containing the oldest messages (pubserver.log.n-1) is deleted.
 Each remaining log file is renamed with the next greater integer suffix
(pubserver.log.m is renamed to pubserver.log.m+1 with m varying from 0
to n-2).
 A new, active log file is created (pubserver.log.0).
mtk.logging.file.size
Note: This option applies to the publication server only.
Set the mtk.logging.file.size option to control the maximum file size (in
megabytes) of the Migration Toolkit log file.
mtk.logging.file.size=n
The default value is 50 megabytes.
mtk.logging.file.count
Note: This option applies to the publication server only.
Set the mtk.logging.file.count option to control the number of files in the log file
rotation history of the Migration Toolkit log file.
mtk.logging.file.count=n
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 666
EDB Postgres Replication Server User’s Guide
The default value for n is 20.
A non-zero value of n specifies the maximum number of history log files that are to be
created.
 Specify a value of 0 to disable log file rotation and create a single, limited size log
file named mtk.log. The log file is deleted and a new one is created each time
the log file reaches the size limit set by mtk.logging.file.size.
 Specify a value of 1 or greater to enable log file rotation. All log file names have
an integer suffix (for example, mtk.log.1, mtk.log.2).
When log file rotation is enabled, the log file with the greatest integer suffix contains the
oldest messages. When there are enough messages to generate every file in the history
rotation, the oldest messages are in mtk.log.n where n is the setting of
mtk.logging.file.count.
Log file mtk.log is the current, active log file containing the most recent messages.
When the current, active log file (mtk.log) reaches the size specified by
mtk.logging.file.size, then the following events occur:
 The log file containing the oldest messages (mtk.log.n) is deleted.
 Each remaining log file with a suffix is renamed with the next greater integer
suffix (mtk.log.m is renamed to mtk.log.m+1 with m varying from 1 to n-1).
 Log file mtk.log is renamed to mtk.log.1.
 A new, active log file is created (mtk.log).
10.4.1.2 Replacing Null Characters
Note: The options described in this section apply to the publication server only.
A character consisting of binary zeros (also called the null character string) and
represented as 000 in octal or 0x00 in hexadecimal can result in errors when attempting
to load such data into a Postgres character column.
You may get the following error in the Migration Toolkit log file when performing a
snapshot replication of an Oracle table that contains the null character string:
Loading Table Data in 8 MB batches...
Disabling FK constraints & triggers on edb.null_test before truncate...
Truncating table NULL_TEST before data load...
Disabling indexes on edb.null_test before data load...
Loading Table: NULL_TEST ...
Error Loading Data into Table: NULL_TEST: ERROR: invalid byte sequence for
encoding "UTF8": 0x00
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 667
EDB Postgres Replication Server User’s Guide
Where: COPY null_test, line 2
The same circumstance may also produce the following error in the Migration Toolkit log
file:
Loading Table Data in 8 MB batches...
Disabling FK constraints & triggers on edb.null_clob before truncate...
Disabling indexes on edb.null_clob before data load...
Loading Large Objects into table: NULL_CLOB ...
[NULL_CLOB] Migrated 1 rows.
com.edb.util.PSQLException: Zero bytes may not occur in string parameters.,
Skipping Batch
If any of these errors occur, you can set an option that will convert each null character
encountered in character columns of the source tables to a space character, or to any other
character of your choice, before loading the target tables.
Note: This option does not alter null characters encountered in columns with binary data
types such as Oracle RAW and BLOB data types.
Set the following option:
replaceNullChar=true
This option results in the substitution of a space character for each null character
encountered in the source character data.
If you want to use a character other than a space character to replace each null character,
use the following option in addition to replaceNullChar=true.
nullReplacementChar=char
char is a single character you want to substitute for the null character. For example, the
following combination will replace each null character with the hash symbol #.
replaceNullChar=true
nullReplacementChar=#
10.4.1.3 Schema Migration Options
Note: The option described in this section applies to the subscription server only.
The option in this section controls how certain aspects of the publication database schema
are migrated to the subscription database.
skipCheckConst
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 668
EDB Postgres Replication Server User’s Guide
By default, column CHECK constraints from publication tables are migrated to the
subscription table definitions when the subscription is created. Set this option to true if
you do not want CHECK constraints as part of the subscription table definitions.
Setting this option to true is useful if the CHECK constraint is based on a built-in
function supported by the publication database server, and this built-in function does not
exist in the subscription database server.
skipCheckConst={true | false}
The default value is false.
10.4.1.4 Replicating Oracle Partitioned Tables
Note: The option described in this section must be set to the same value for both the
publication server and the subscription server.
Note: This feature applies only for subscriptions in an Advanced Server database. It does
not apply to subscriptions in a PostgreSQL database.
In Oracle, table partitioning provides the capability to store table rows in different
physical locations (tablespaces) according to a rule defined on the table.
The most common types of Oracle table partitioning are the following:
 Range Partitioning. Ranges of values defined on a column determine which
tablespace a row is stored.
 List Partitioning. A list of values defined on a column determines which
tablespace a row is stored.
 Hash Partitioning. An algorithm on a column generates a hash key, which
determines which tablespace a row is stored.
Note: If you are using Advanced Server, table partitioning using Oracle compatible table
partitioning syntax is an available feature. See the section on table partitioning in the
Database Compatibility for Oracle Developer’s Guide for information. See Section 7.10
for information on including Postgres partitioned tables in a replication system. The
importPartitionAsTable option described in this section applies only to table
partitioning in an Oracle database.
The importPartitionAsTable option controls what happens when an Oracle
partitioned table is part of the publication.
importPartitionAsTable={true | false}
The default value is false.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 669
EDB Postgres Replication Server User’s Guide
Depending upon the Oracle partitioned table type and the setting of the
importPartitionAsTable option one of the following may occur:
 A set of inherited tables is created in Advanced Server to which the Oracle
partitioned table is replicated. The rows can be stored in different physical
locations.
 A plain, single table with no inheritance is created in Advanced Server to which
the Oracle partitioned table is replicated. All rows are stored in one physical
location.
 No table is created in Advanced Server for the Oracle partitioned table, and an
error message is written to the Migration Toolkit log file.
When importPartitionAsTable=false (the default setting), the following occurs:
 A list partitioned table is replicated as a set of inherited Advanced Server tables.
 A range partitioned table is replicated as a set of inherited Advanced Server
tables.
 A hash partitioned table is not replicated to Advanced Server, and an error
message is written to the Migration Toolkit log file.
Note: If there are subscription tables created as sets of Advanced Server inherited tables,
then you must also set the enableConstBeforeDataLoad option in the publication
server configuration file to true. See Section 10.4.1.6 for information on the
enableConstBeforeDataLoad option.
When importPartitionAsTable=true, the following occurs:
 A list partitioned table is replicated as a single Advanced Server table with no
inheritance.
 A range partitioned table is replicated as a single Advanced Server table with no
inheritance.
 A hash partitioned table is replicated as a single Advanced Server table with no
inheritance.
Setting the importPartitionAsTable option to true allows you to replicate a
broader range of Oracle partitioned table types, but as normal Advanced Server tables
without simulating partitions by using inheritance.
10.4.1.5 Specifying a Custom URL for an Oracle JDBC Connection
Note: The option described in this section applies to the publication server only.
By default the xDB Replication Server supports the basic thin client URL pattern for an
Oracle JDBC connection. If there is a requirement to specify custom connectivity
credentials, specify the advanced URL using the following option.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 670
EDB Postgres Replication Server User’s Guide
oraJDBCCustomURL=customURL_string
The following is an example of custom connectivity to an Oracle database.
oraJDBCCustomURL=jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=
$HOST)(PORT=$PORT))(CONNECT_DATA=(SERVICE_NAME
=$SERVICE_NAME)(SERVER=DEDICATED)))
The parameters prefixed with a dollar sign ($) are dynamically replaced based on the
actual connection values specified when adding the Oracle publication database (see
Section 5.2.2). Alternatively, the parameters prefixed with a dollar sign can be replaced
by hardcoded values in the URL string in which case these hardcoded values override
what is specified when adding the publication database.
10.4.1.6 Snapshot Replication Options
Note: The options described in this section apply to the publication server only unless
otherwise specified.
The server configuration options discussed in this section apply to snapshot replications.
escapeTabDelimiter
When JDBC COPY is used in snapshot replication, the data delimiter between column
values is an escaped tab character (\t). Set this option to false if you do not want to
escape the tab delimiter character.
escapeTabDelimiter={true | false}
The default value is true.
mtkCopyDelimiter
When JDBC COPY is used in snapshot replication, the data delimiter between column
values is an escaped tab character (\t). Set this option to change the data delimiter
character.
mtkCopyDelimiter=c
c denotes the single replacement character for the data delimiter.
The default value is \t.
enableConstBeforeDataLoad
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 671
EDB Postgres Replication Server User’s Guide
The enableConstBeforeDataLoad option controls whether or not table constraints,
including triggers, are re-enabled before loading data into target tables. The default
process is that the tables are loaded first, and then the constraints are enabled afterwards.
Activate this option if there are triggers that affect how data is loaded into the target
tables.
If there are target tables created as sets of Postgres inherited tables resulting from
partitioned Oracle source tables, then this option must be enabled.
enableConstBeforeDataLoad={true | false}
The default value is false.
10.4.1.7 Assigning an IP Address for Remote Method Invocation
Note: The option described in this section applies to the publication server and the
subscription server.
For Linux only:
An alternative method to modifying the /etc/hosts file so that the host name is
associated with a non-loopback IP address as discussed in Section 5.1.6.2 is to specify the
network IP address using the java.rmi.server.hostname option.
In the publication server configuration file, set this option to the network IP address of
the host running the publication server.
In the subscription server configuration file, set this option to the network IP address of
the host running the subscription server.
java.rmi.server.hostname=xxx.xxx.xx.xxx
For example, instead of modifying the /etc/hosts file to look like the following for a
publication or subscription server running on host 192.168.2.19:
#127.0.0.1 localhost.localdomain localhost
192.168.2.19 localhost.localdomain localhost
You can set the IP address in the server configuration file as shown by the following:
#On Linux machines, the localhost to real IP may not give correct results. Hence
#users are advised to override the following property with server IP address
java.rmi.server.hostname=192.168.2.19
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 672
EDB Postgres Replication Server User’s Guide
10.4.1.8 Using pgAgent Job Scheduling
Note: The option described in this section applies to the publication server only.
Note: Using pgAgent job scheduling has significance only if Postgres is the publication
database.
Note: You must have pgAgent installed and running on the host where the publication
database resides.
When the pgdbschedule option is set to true, xDB Replication Server uses the
pgAgent job scheduler instead of the default Quartz job scheduler.
When activated, pgAgent takes over the following scheduling tasks from Quartz:
 Scheduling shadow table history cleanup in the publication database. See Section
7.5.1 for information on scheduling shadow table history cleanup.
 Scheduling transaction set creation. A transaction set creation job is scheduled to
run every hour to create transaction sets from the updates on the source tables.
Transaction sets are applied to the target tables.
Unlike the Quartz scheduler, pgAgent can still run and perform its tasks even if the
publication server is not running.
pgdbschedule={true | false}
The default value is false.
10.4.1.9 Forcing Immediate Shadow Table Cleanup
Note: The option described in this section applies to the publication server only.
A cleanup job is provided that can be run on demand or on a schedule to remove dead
(processed) tuples from the shadow tables (see Section 7.5).
However, to perform even quicker cleanup scheduling, turn on this option to force the
cleanup of shadow tables after every synchronization replication.
postSyncShadowTableCleanup={true | false}
The default value is false.
10.4.1.10 Setting Event History Cleanup Threshold
The event history cleanup job is scheduled to run every day at 12 AM to remove
completed, historical, event and replication history data from the control schema
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 673
EDB Postgres Replication Server User’s Guide
xdb_events, xdb_events_status, xdb_pub_replog, and
xdb_pub_table_replog tables that are older than n days. By default the history data
older than seven days is removed.
Specify a value of 0 to cleanup all, completed, event history and replication history data,
regardless of its age.
See Section 7.5.4 for information on cleaning up event and replication history.
historyCleanupDaysThreshold=n
The default value is 7 days.
10.4.1.11 DDL Change Replication Table Locking
Note: The option described in this section applies to the publication server only.
When the DDL change replication process is invoked, each affected table in the
replication system is acquired in turn with an exclusive lock before the DDL change is
applied to the table.
Set ddlChangeTableLock to false if you do not want an exclusive lock placed on the
table before applying the DDL change. This option should be set to false only if there
are no write transactions expected on the target table. If write transactions do occur, they
may not be recorded by the replication system.
See Section 7.8 for information on DDL change replication.
ddlChangeTableLock={true | false}
The default value is true.
10.4.1.12 Persisting Zero Transaction Count Replication History
Note: The option described in this section applies to the publication server only.
If you wish to maintain zero transaction count records in the replication history after the
publication server is restarted, set persistZeroTxRepEvent to true. Otherwise, zero
transaction count records are no longer available once the publication server is restarted.
See Section 7.4 for information on viewing replication history.
persistZeroTxRepEvent={true | false}
The default value is false.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 674
EDB Postgres Replication Server User’s Guide
10.4.1.13 Skipping Grants of Table Level User Privileges on MMR
Target Tables
Note: This option applies to the publication server only.
When creating non-MDN nodes in a multi-master replication system, the publication
server creates the publication tables and their corresponding shadow tables in the non-
MDN node database.
When skipTablePrivileges is set to false, which is the default value, the database
user privileges on the publication tables in the master definition node are granted to the
same database users on the publication tables in the newly created non-MDN node.
The required privileges are also granted to these database users on the corresponding
shadow tables in the non-MDN node so these database users can perform updates on the
publication tables and the changes are recorded in the corresponding shadow tables. This
enables proper synchronization replication of any such changes.
This granting of privileges occurs only for database users with privileges on the master
definition node publication tables at the time the non-MDN node is defined using the
xDB Replication Console or the xDB Replication Server CLI.
If you do not want the publication server to grant these database user privileges to the
non-MDN publication tables and shadow tables when defining the non-MDN node, set
skipTablePrivileges to true. In this case, you must explicitly grant the privileges
on the publication tables and corresponding shadow tables in the non-MDN node for any
database user that you wish to provide update access to on these tables. See Step 2 of
Section 5.1.4.3 for information regarding the required privileges.
This usage would typically be for the case where different database users are to access
the non-MDN node publication tables than the database users who access the master
definition node publication tables.
skipTablePrivileges={true | false}