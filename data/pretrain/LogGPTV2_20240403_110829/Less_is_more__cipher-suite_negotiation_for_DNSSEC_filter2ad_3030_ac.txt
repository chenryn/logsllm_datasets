of stronger cryptography and adoption of new cryptographic
ciphers, which currently the zone operators are hesitant to
support, but also to mitigate the interoperability and over-
head problems associated with DNSSEC.
2.3 Attacks on (Oversized) DNSSEC Responses
We discuss two potential abuses of ‘oversized’, large signed-
DNS responses:
for ampliﬁcation Denial-of-Service (DoS)
attacks, and to manipulate responses, in particular, for cache-
poisoning. We argue that part of the problem is partially
due to the design of DNSSEC, which results in transmission
of potentially unnecessary keys and signatures, especially
if domains decide to support multiple keys and algorithms
(as is highly desirable), and we propose possible (long-term)
solutions.
We note that oversized DNSSEC responses can be ex-
ploited mainly when served over UDP, hence one simple
countermeasure is to only use TCP for long responses. In-
deed, this is done by some large servers, most notably of
the com and net top-level domains. Notice, however, that
the use of TCP increases overhead on both network and
server, for all responses - which can be signiﬁcant. Further-
more, [12, 8] recently showed that clients that retrieve DNS
records over TCP have high failure rates. We hope future
research will result in UDP-based solutions, avoiding this
overhead.
Ampliﬁcation Attacks. The size of DNSSEC responses
signiﬁcantly exceeds the size of traditional DNS responses.
Such responses are often abused by attackers to launch am-
pliﬁcation DoS attacks [17] to clog victim networks and hosts.
In a DNS ampliﬁcation DoS attack, the attacker sends to
one or more DNS servers many requests, with spoofed (fake)
source IP address of the victim. Name servers respond to
such requests by sending (much larger) responses to the IP
address that originated the DNS request. The ampliﬁcation
factor is the ratio between the number of response bytes
sent by the amplifying (benign) DNS server, to the number
of request bytes sent by hosts controlled by the attacker, in
the corresponding requests. With DNSSEC, the ratio can be
as high as a hundred. Indeed, while DNSSEC deployment is
still very limited, it has already been abused in the largest
DoS attacks in the recent years, with reported bandwidths of
100Gbps in 2010, 60Gbps in 2011 and 2012 (Arbor Networks
Report) and 300Gbps (launched in 2013 against Spamhaus
and Cloudﬂare).
Sometimes, the victim of the DNS ampliﬁcation attack is
the amplifying DNS server itself, which wastes computation
and network resources on sending the (ampliﬁed) response
packets; however, more often, the victim is a network or
host, which receives the responses. DNS servers use vari-
ous mechanisms, to prevent their abuse as vectors in am-
pliﬁcation attacks, in particular, to avoid wasting their own
resources due to such attacks. In fact, the concern for am-
pliﬁcation attacks, may be one of the considerations against
adoption of DNSSEC by zones.
Defences for name servers against their abuse as ampliﬁers
include:
• Imposing a maximal quota of queries from the same
source IP address. This defence may help against at-
tacks against a remote host or network, using the same
(or related) IP addresses, but not against attacks on
the amplifying server itself, where the source IP ad-
dress is not important. Furthermore, this defense fails
if there are many spoofed IP addresses, connected via
the same victim network, as in the Coremelt attack
[20]. Finally, DNS request quotas are prone to false-
positives, i.e., identiﬁcation of a benign sending re-
solver as an attacker.
• Challenge-response mechanisms, mostly based on redi-
rection of the request to another domain name, where
the new domain name includes a random challenge
(‘nonce’) used to ensure that the request did not con-
tain a spoofed IP address. However, existing designs,
e.g., [2, 21, 6], either do not support DNSSEC valida-
tion or are not widely deployed.
• As mentioned above, some servers, most notably those
serving the large top-level domains com and net, de-
fend against this threat by sending long responses over
TCP rather than over UDP.
Attacks on Fragmented Responses. DNSSEC re-
sponses are often large enough, that they can exceed the
(cid:22)(cid:24)(cid:19)
MTU of networks in the path from the name server to the
resolver (see size measurements in Figure 1) and hence, get
fragmented by the name server or by a router along the path.
Ironically, an attacker can exploit fragmented DNS re-
sponses for IP defragmentation cache-poisoning: by sending
spoofed fragments, the attacker can trick the defragmenta-
tion mechanism into reassembling them together with the
fragments sent by the legitimate source (name server).
IP defragmentation cache-poisoning can be applied for
DoS attacks, disrupting resolver to name server communi-
cation, for name server pinning, or even for DNS cache-
poisoning, [4, 19].
(Note that other DNS poisoning tech-
niques are known, e.g., [3, 5].) Furthermore, due to the
currently-common case of permissive validation, the resolvers
will accept and cache the altered (reassembled) DNS re-
sponses.
3. HOP-BY-HOP CIPHER-SUITE
NEGOTIATION FOR DNSSEC
In this section we present the design for a cipher-suite
negotiation mechanism for DNSSEC. According to our de-
sign, resolvers signal to name servers the list of ciphers that
they support and the name servers select the strongest ci-
pher from the list and return only the keys and signatures
that correspond to the selected option. Recently, [RFC6975]
standardised new options in EDNS0 enabling clients to sig-
nal the supported ciphers to the name servers. The sig-
naling of deployed ciphers allows zone operators to deter-
mine whether they can adopt new cryptographic algorithms.
However, the zones would still have to support the other al-
gorithms, to serve resolvers which have not adopted the new
cipher.
We design cipher-suite negotiation mechanism, that utilises
the signaling of the supported ciphers to produce a full
ﬂedged cipher-suite negotiation mechanism. Our design does
not require changes to the DNS software or protocol, and
can be easily integrated into the existing DNS infrastruc-
ture. We implemented our cipher-suite negotiation mecha-
nism as two separate user space modules, cipher-suite client
and cipher-suite server (Section 3.3). The modules, along
with a DNS transaction supporting cipher-suite negotiation,
are illustrated in Figure 4. The modules are conﬁgured to
capture all DNS requests and responses exchanged between
the resolver and the name server, and to perform cipher-suite
negotiation between the resolver and the name server. The
outcome is that the server only returns the cryptographic
material that corresponds to the strongest cipher that was
negotiated.
Furthermore, our design uses the DNS packets themselves
for signaling of the supported cryptographic options and
thus does not add an additional round trip of communi-
cation. According to our design, the resolvers signal the
cryptographic options via an EDNS0 OPT resource record,
[RFC6891], Section 3.1. EDNS0 is already supported by
the resolvers and name servers and is a prerequisite require-
ment for adoption of DNSSEC. EDNS0 was designed to al-
low adoption of new mechanisms, such as DNSSEC, by util-
ising existing EDNS ﬁelds; see Section 4 for background.
Our mechanism requires a modiﬁcation of the current sig-
nature procedure dnssec-keygen which currently signs each
DNS record in a zone ﬁle which all the supported keys. We
show how to extend it to enable cipher-suite negotiation, in
Section 3.2.
To test our implementation, we extended the dig (domain
information groper) DNS lookup utility2, with support for
signaling of a list of ciphers.
To integrate support of cipher suite also into the process
of signing the zone ﬁle - instead of signing the same zone ﬁle
with multiple ciphers, we create separate copies of the zone
ﬁle, such that each copy corresponds to a single cipher.
We next describe the cipher-suite mechanism, the imple-
mentation of the prototype and its evaluation.
3.1 Extending EDNS0 with New
Cipher-Suite Options
EDNS0, [RFC6891], was designed to provide extra space
for new ﬂags and codes. We propose a new EDNS0 Exten-
sion Mechanism to negotiate a DNSSEC cipher option for
a transaction between a resolver and a name server. Since
EDNS0 is compatible with legacy servers that do not sup-
port new options, our cipher-suite negotiation mechanism is
also interoperable with existing resolvers and name servers.
To signal support of cipher-suite negotiation, we intro-
duce a new (cipher-suite ok) CO bit in the extended ﬂags of
the EDNS0 OPT record, see Figure 5. Resolver requests to
perform cipher-suite negotiation by setting the CO bit in the
EDNS0 OPT record, in the DNS request. We also reserve
two new record types: ciphers and cipher. When signaling
the CO bit, the resolver also places in the EDNS0 a list of
cryptographic ciphers, that it supports, in the ciphers ﬁeld,
to convey the ciphers to the name server. A name server that
supports cipher-suite negotiation mechanism responds with
the CO bit set, and also places the selected cipher, from the
ciphers list, into the cipher ﬁeld in the EDNS0 record of
the DNS response. The name server also places in ciphers
ﬁeld a list of cryptographic algorithms which the zone (for
which it is authoritative) supports, along with a digital sig-
nature, stored in RRSIG record, over the server’s ciphers list,
to prevent downgrade attacks.
The algorithms conveyed in records ciphers and cipher
are encoded as numbers. Each algorithm in DNSSEC con-
tains a code number that corresponds to a DNSSEC pub-
lic key (stored in DNSKEY record). The Delegation Signer
(DS) and Hashed Authenticated Denial of Existence (NSEC3)
use digests (hashed values as part of their resource record
data). These hash algorithms also have code numbers. These
codes signal to validating resolvers which cryptographic al-
gorithm was used to generate the digital signature and the
hash digest.
Next to each cipher number, we also add a priority number
in ascending order (highest priority is 1). In order to ensure a
deterministic outcome from the ciphers negotiation process,
the cipher-suite client must assign diﬀerent priorities to each
ciphers that it supports (and cannot assign the same priority
to two distinct ciphers); e.g., in case a number of ciphers are
considered equally secure by the resolver or by the target
zone.
3.2 Splitting the Zone File
When supporting a number of cryptographic options, zone
operators sign, typically using dnssec-keygen procedure,
the same zone ﬁle with a number of algorithms. The signing
process of DNSSEC creates a signature per each RR set, i.e.,
2dig is a tool for performing DNS lookup by interrogating
DNS name servers, and displaying the responses.
set of resource records of the same type; for instance, all the
name servers (NS) records (of a speciﬁc domain) are signed
as a single unit, and for each supported cryptographic op-
tion a signature is attached to NS RR set. When a number
of cryptographic options are supported (as is typically the
case) a number of signatures are created and attached to
the RR set. The same applies to other DNS records, such as
DNSKEY, i.e., all the DNSKEY RR set is signed with all the
supported algorithmic options. As a result, DNS responses
typically contain a number of signatures (that correspond
to all supported cryptographic ciphers) for each RR set that
they return.
Similarly to [7], to encorporate support for cipher-suite
negotiation, we extended the dnssec-keygen procedure, to
generate a separate zone ﬁle, per each cryptographic cipher
that the zone supports. Our ednssec-keygen (extended
dnssec-keygen) performs the same number of signing op-
erations as would have been performed by dnssec-keygen.
However, instead of signing the same zone ﬁle with diﬀerent
ednssec-keygen(ciphers, zone_file){
signed_zone_file1 = dnssec-keygen(ciphers[1], zone_file)
signed_zone_file2 = dnssec-keygen(ciphers[2], zone_file)
signed_zone_file3 = dnssec-keygen(ciphers[3], zone_file)
return (for i to ciphers: return signed_zone_file_i)
}
keys (which results in a zone ﬁle where every RR set is cou-
pled with a set of signatures per each supported cipher), it
creates a separate copy of the zone ﬁle for each supported
cryptographic cipher. Each resulting RR set in a signed
zone ﬁle contains the signature that corresponds only to the
cipher which was used to sign that copy of the zone ﬁle.
3.3 Cipher-Suite Negotiation Protocol
The steps of the protocol are illustrated in Figure 4. In
step 2, cipher-suite client receives a DNS request (sent by
the resolver in step 1). Cipher-suite client adds a list of sup-
ported ciphers to the ciphers ﬁeld, of the EDNS0 record
(in the additional section of a DNS request). Upon receipt
of a DNS request, in step 3, with the CO bit set, cipher-
suite server performs cipher-suite negotiation according to
the preferences speciﬁed by the resolver and those supported
by the zone, and forwards the request to a zone ﬁle that cor-
responds to the selected cipher. The name server retrieves
the DNS records from the correct zone ﬁle and sends a re-
sponse, step 5. Upon receipt of a response from the name
server, cipher-suite server attaches the list of ciphers which
the name server supports, along with a signature over that