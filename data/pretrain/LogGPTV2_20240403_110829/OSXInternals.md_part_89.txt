process structure. This flag is set during a fork() or a vfork() and indicates that a process has
fork()'ed but not execve()'d.
It generates a kdebug trace record.
 If the p_pflag field of the process structure has the P_PPWAIT flag set, it indicates that the parent is
waiting for the child to exec or exit. If the flag is set (as it would be in the case of a vfork()),
exec_mach_imgact() clears it and wakes up the parent.
On a successful return from exec_mach_imgact(), or any other image activator, execve() generates a
kauth notification of type KAUTH_FILEOP_EXEC. Finally, execve() frees the pathname buffer it used with
namei(), releases the executable's vnode, frees the memory allocated for execve() arguments, and
returns. In the case of an execve() after a vfork(), execve() sets up a return value for the calling thread
and then resumes the thread.
7.5.2. Fat (Universal) Binaries
A fat binary contains Mach-O executables for multiple architectures. For example, a fat binary may
encapsulate 32-bit PowerPC and 64-bit PowerPC executables. The exec_fat_imgact()
[bsd/kern/kern_exec.c] activator handles fat binaries. Note that this activator is byte-order neutral. It
performs the following actions.
It ensures that the binary is fat by looking at its magic number.
It looks up the preferred architecture, including its offset, in the fat file.
It reads a page of data from the beginning of the desired architecture's executable within the fat file.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 102 of 107
 It returns a special error that would cause execve() to retry execution using the encapsulated
executable.
7.5.3. Interpreter Scripts
The exec_shell_imgact() [bsd/kern/kern_exec.c] activator handles interpreter scripts, which are
often called shell scripts since the interpreter is typically a shell. An interpreter script is a text file whose
content has # and ! as the first two characters, followed by a pathname to an interpreter, optionally
followed by whitespace-separated arguments to the interpreter. There may be leading whitespace before
the pathname. The #! sequence specifies to the kernel that the file is an interpreter script, whereas the
interpreter name and the arguments are used as if they had been passed in an execve() invocation.
However, the following points must be noted.
 The interpreter specification, including the #! characters, must be no more than 512 characters.
 An interpreter script must not redirect to another interpreter scriptit will cause an ENOEXEC error
("Exec format error") if it does.
However, note that it is possible to execute plaintext shell scriptsthat is, those that contain shell commands
but do not begin with #!. Even in this case, the execution fails in the kernel and execve() returns an
ENOEXEC error. The execvp(3) and execvP(3) library functions, which invoke the execve() system call,
actually reattempt execution of the specified file if execve() returns ENOEXEC. In the second attempt,
these functions use the standard shell (/bin/sh) as the executable, with the original file as the shell's first
argument. We can see this behavior by attempting to execute a shell script containing no #! charactersfirst
using execl(3), which should fail, and then using execvp(3), which should succeed in its second
attempt.
$ cat /tmp/script.txt
echo "Hello"
$ chmod 755 /tmp/script.txt # ensure that it has execute permissions
$ cat execl.c
#include 
#include 
int
main(int argc, char **argv)
{
int ret = execl(argv[1], argv[1], NULL);
perror("execl");
return ret;
}
$ gcc -Wall -o execl execl.c
$ ./execl /tmp/script.txt
execl: Exec format error
$ cat execvp.c
#include 
#include 
int
main(int argc, char **argv)
{
int ret = execvp(argv[1], &(argv[1]));
perror("execvp");
return ret;
}
$ gcc -Wall -o execvp execvp.c
$ ./execvp /tmp/script.txt
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 103 of 107
Hello
exec_shell_imgact() parses the first line of the script to determine the interpreter name and arguments
if any, copying the latter to the image parameter block. It returns a special error that causes execve() to
retry execution: execve() looks up the interpreter's path using namei(), reads a page of data from the
resultant vnode, and goes through the image activator table again. This time, however, the executable
must be claimed by an activator other than exec_shell_imgact().
Note that setuid or setgid interpreter scripts are not permitted by default. They can be enabled by setting
the kern.sugid_scripts sysctl variable to 1. When this variable is set to 0 (the default),
exec_shell_imgact() clears the setuid and setgid bits in the ip_origvattr (invocation file attributes)
field of the image parameter block. Consequently, from execve()'s standpoint, the script is not
setuid/setgid.
$ cat testsuid.sh
#! /bin/sh
/usr/bin/id -p
$ sudo chown root:wheel testsuid.sh
$ sudo chmod 4755 testsuid.sh
-rwsr-xr-x 1 root wheel 23 Jul 30 20:52 testsuid.sh
$ sysctl kern.sugid_scripts
kern.sugid_scripts: 0
$ ./testsuid.sh
uid amit
groups amit appserveradm appserverusr admin
$ sudo sysctl -w kern.sugid_scripts=1
kern.sugid_scripts: 0 -> 1
$ ./testsuid.sh
uid amit
euid root
groups amit appserveradm appserverusr admin
$ sudo sysctl -w kern.sugid_scripts=0
kern.sugid_scripts: 1 -> 0
7.6. Launching Applications
Users typically create new processes by launching applications through the graphical user interfacefor
example, through the Finder or the Dock. The Launch Services framework, which is a subframework of
the Application Services umbrella framework, provides primary support for application launching.
Launch Services allows programmatic opening of executables, documents,[22] and other entities either by
file system references or by URL references. The framework provides functions such as the following.
[22] A document is launched by running the appropriate executable to handle the document.
 LSOpenFSRef() opens a file residing on a local or remote volume.
LSOpenFromRefSpec(), which is a more general function than LSOpenFSRef(), is called by the
latter.
 LSOpenCFURLSpec() opens a URL. Note that a URL could be a file: URL that refers to a file on a
volume.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 104 of 107
LSOpenFromURLSpec(), which is a more general function than LSOpenCFURLSpec(), is called by
the latter.
The Cocoa NSWorkspace class uses the Launch Services framework to launch applications. Launch
Services eventually performs a fork() and an execve().
7.6.1. Mapping Entities to Handlers
Applications can register themselves with Launch Services to advertise their ability to open documents of
a certain type. Such ability can be specified by file extension, by URL scheme, and, more appropriately,
through a generalized data identifier scheme called Uniform Type Identifiers (UTIs).[23] We will look at
UTIs in the next section.
[23] Although UTI support was introduced in Mac OS X 10.3, comprehensive UTI support is
available only beginning with Mac OS X 10.4.
Typically, registration with Launch Services occurs automatically, without requiring any action from the
user. For example, it could occur at the following times:
When the system is booted
When a user logs in
When the Finder locates a new application, such as on a newly mounted disk imagesay, one that has
been downloaded from the Internet
When examining the output of the ps command, you can see that the parent of processes corresponding to
GUI-based applications is the WindowServer program. When a user launches a GUI-based application
through the Finder, Launch Services sends a message to WindowServer, which in turns calls fork() and
execve() to run the requested application. You can use the kdebug program from Chapter 6 to monitor
the invocation of fork() by WindowServer.
In particular, the AppServices startup item
(/System/Library/StartupItems/AppServices/AppServices) runs the lsregister programa
support tool that resides within the Launch Services framework bundleto load the Launch Services
registration database. lsregister can also dump the contents of a registration database fileeach user has
a separate database stored as /Library/Caches/com.apple.LaunchServices-*.csstore. Figure 761
shows an example of using lsregister.
Figure 761. Dumping the Launch Services registration database
$ lsregister -dump
Checking data integrity......done.
Status: Database is seeded.
...
bundle id: 44808
path: /Applications/iWork/Keynote.app
name: Keynote
identifier: com.apple.iWork.Keynote
version: 240
mod date: 5/25/2005 19:26:46
type code: 'APPL'
creator code: 'keyn'
sys version: 0
flags: apple-internal relative-icon-path ppc
item flags: container package application extension-hidden native-app
scriptable
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 105 of 107
icon: Contents/Resources/Keynote.icns
executable: Contents/MacOS/Keynote
inode: 886080
exec inode: 1581615
container id: 32
library:
library items:
--------------------------------------------------------
claim id: 30072
name: Keynote Document
role: editor
flags: apple-internal relative-icon-path package
icon: Contents/Resources/KeyDocument.icns
bindings: .key, .boom, .k2
--------------------------------------------------------
claim id: 30100
name: Keynote Theme
role: viewer
flags: apple-internal relative-icon-path package
icon: Contents/Resources/KeyTheme.icns
bindings: .kth, .bth, .kt2
...
Consider the situation when an application wants to handle a document or URL type that is already
registered in the Launch Services database. Launch Services considers several aspects before selecting a
candidate. A handler explicitly specified by the user takes the highest precedence. An application on the
boot volume is preferred over applications on any other volumesthis is important to avoid running
potentially malicious handlers from untrusted volumes. Similarly, an application on a local volume is
preferred over those on remote volumes.
7.6.2. Uniform Type Identifiers
A Uniform Type Identifier (UTI) is a Core Foundation stringfor example, "public.html" or
"com.apple.quicktime-image"that uniquely identifies an abstract type. Mac OS X uses UTIs to
describe data types and file formats. In general, a UTI can be used to describe arbitrary type information
about in-memory or on-disk entities, such as aliases, files, directories, frameworks, other bundles, and
even in-transit data. Since UTIs provide a consistent mechanism for tagging data, services and
applications should use UTIs to specify and recognize data formats that they support. The following are
examples of using UTIs.
Applications can use UTIs to register with Launch Services the document types they wish to handle.
The UTI API is part of the Launch Services API.
The Pasteboard Manager can use UTIs to specify flavors for items it holds, where a flavor identifies
a particular data type. Each pasteboard item can be represented by one or more flavors, allowing
different applications to retrieve the item's data in formats convenient to them.
Navigation Services allows the use of UTIs for filtering file types.
A UTI string is syntactically similar to a bundle identifier. UTIs are written using a reverse DNS naming
scheme, with certain top-level UTI domains being reserved for Apple's use.[24] For example, Apple
declares types that it controls with identifiers in the com.apple domain. Public typesthat is, those types
that either are public standards or are not controlled by an organizationare declared with identifiers in the
public domain. Third parties should use Internet domains they own for declaring their UTIsfor example,
com.companyname. The use of a reverse DNS naming scheme ensures uniqueness without centralized
arbitration.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 106 of 107
[24] Such domains are outside the current IANA top-level Internet domain name space.
The Apple-reserved domain dyn is used for dynamic identifiers that are automatically created on the fly
when a data type with no declared UTI is encountered. The creation of dyn UTIs is transparent to users.
An example of a file whose content type is a dyn UTI is a .savedSearch filethese files correspond to
Smart Folders and contain raw Spotlight queries.
The information property list file of /System/Library/CoreServices/CoreTypes.bundle contains
specifications of various standard UTIs. For example, we can list the public types contained in that file as
follows:
$ cd /System/Library/CoreServices/CoreTypes.bundle
$ awk '{ if (match ($1, /public\.[^
UTTypeConformsTo
public.text
UTTypeDescription
HTML text
UTTypeIdentifier
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 107 of 107
public.html
UTTypeIconFile
SomeHTML.icns
UTTypeReferenceURL
http://www.apple.com
UTTypeTagSpecification
com.apple.nspboard-type
Apple HTML pasteboard type
com.apple.ostype
HTML
public.filename-extension
html
htm
shtml
shtm
public.mime-type
text/html