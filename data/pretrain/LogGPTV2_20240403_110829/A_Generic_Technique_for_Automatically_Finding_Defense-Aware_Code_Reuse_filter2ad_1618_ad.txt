### Chapter 1: Introduction

Buffer overflows and other memory vulnerabilities have been exploited by attackers for more than two decades [22]. Initially, these attacks involved injecting new code (often referred to as shellcode, as it typically spawned an attacker-controlled shell on the victim's machine) into memory and then overwriting control flow data (such as a return address or function pointer) to redirect execution to the injected code [29]. In response, compilers and operating systems implemented various defenses, including:

- **W^X Memory**: This defense prevents attackers from executing newly injected code by ensuring that memory pages are either writable or executable, but not both [33] [42].
- **Shellcode Detection**: This technique monitors inputs for potential shellcodes [31].
- **Code Signing**: This ensures that all executed code has been verified [11] [10].

As a countermeasure to these defenses, attackers developed code reuse attacks [8] [27], which leverage existing code in the process memory rather than injecting new code. These attacks circumvent defenses designed to prevent code injection by using existing, legitimate code in malicious ways.

The evolution of code reuse attacks and defenses has resembled an arms race, with new attacks continuously emerging to circumvent existing defenses. For example, jump-oriented programming (JOP) [6] was developed to bypass returnless kernels [26], and surgical strikes on randomization [32] were used to defeat Address Space Layout Randomization (ASLR) [39]. Defensive techniques have evolved in parallel, aiming to more comprehensively deny attackers key capabilities. For instance, G-Freeâ€™s [28] gadget-elimination techniques target classes of free branch instructions rather than just `ret` statements.

Despite extensive research in this area, it remains challenging to determine how different defenses, based on varying threat models, complement each other to protect systems. Techniques targeting Return-Oriented Programming (ROP) attacks may be less effective against return-into-libc (RiL) code reuse attacks, for example. Therefore, it is essential not only to evaluate whether a specific defense successfully eliminates targeted attacker capabilities but also to assess whether eliminating those capabilities is sufficient to prevent malicious behavior.

### Systematic Analysis and Categorization

In this thesis, we perform a systematic analysis and categorization of attacks and defenses using a formal model of the software security space. Specifically, we represent the attacker's goal of deploying malware as a satisfiability instance, where vulnerabilities and other attacker capabilities are represented as literals, specific attacks as compound formulas of those literals, and defenses as additional dependencies on the capabilities and attacks. This model helps identify gaps in current defenses and evaluates the effectiveness of proposed defense techniques. We also develop two new attacks that bypass existing defenses:

1. **Pure ROP Attack**: This attack demonstrates that ROP can be used to cause a broad range of malicious behaviors.
2. **Return-to-libn Attack**: This attack extends the scope of previous attacks that required access to libc to include more libraries.

### Control Flow Integrity (CFI) Defenses

We investigate the claim that defenses enforcing control flow integrity (CFI) provide a complete defense against code reuse attacks [9]. CFI works by limiting program control flow to a statically determined graph consisting only of control transfers that might occur during normal program execution. Using a graph to model the set of possible behaviors of programs protected by CFI, we show that it is possible to construct code reuse attacks that achieve malicious behavior using only control transfers allowed by existing CFI enforcement systems [47]. We demonstrate this by building several code reuse payloads for Lynx, a simple web browser, including a call to `system`, a downloader, an uploader, and a root inserter, which work in the presence of CFI systems.

### Main Contributions

The main contributions of this thesis are:

- **Systematic Model**: We develop a systematic model to analyze the code reuse attack and defense space.
- **New Attacks**: Based on the model, we build attacks that bypass existing code reuse defenses.
- **CFI Modeling**: We investigate and model the control flow graphs enforced by CFI defenses.
- **CFI Bypass Attacks**: We construct code reuse attacks that work within these control flow graphs.

### Thesis Structure

- **Chapter 2**: Provides background and a history of code reuse attacks.
- **Chapter 3**: Describes the defenses proposed and implemented to protect against code reuse attacks.
- **Chapter 4**: Details our systematic model, its applications, and several results.
- **Chapter 5**: Discusses control flow enforcement systems and describes a system for searching the space of control transfers allowed by those systems.
- **Chapter 6**: Describes actual attacks that work around control flow enforcement systems.
- **Chapter 7**: Concludes the thesis.

### Chapter 2: Code Reuse Attack Background

#### Buffer Overflows

A buffer overflow vulnerability is a programming bug that allows an attacker to write past the end of a buffer, overwriting other data stored on the stack. Since control flow data such as function pointers and return addresses are stored on the stack, the attacker can exploit this to redirect the program's control flow. Similar attacks apply to heap-allocated spaces and control data stored on the heap. These vulnerabilities were initially used by attackers [29] to inject and execute malicious code. Defenses were introduced to prevent this, such as W^X memory [30] and input monitoring to detect potential malicious payloads [31].

#### Code Reuse Attacks

Code reuse attacks were developed as a response to protections that prevent code injection. Like code injection attacks, they begin with an attacker overflowing a buffer on the stack or heap and overwriting control flow data. However, instead of redirecting control flow to new code, code reuse attacks redirect it to existing executable code in the program space. Advanced techniques allow attackers to chain multiple sections of code (gadgets) to create complex payloads. Code-reuse attacks are categorized based on the granularity of the reused code (gadgets). The most common types are return-into-libc attacks and return-oriented programming (ROP) attacks.

#### Return-into-Libc

In return-into-libc attacks [27], gadgets are entire functions. An attacker with control of the stack can call a sequence of functions with chosen arguments. Typically, these functions are system functions from the C standard library (libc), such as `exec`. Nearly every C program links to libc, which provides significant system functionality, including network access, file system access, and a wrapper to the system call interface. This makes it possible to implement many payloads using only libc functions, which are portable across different vulnerable programs. It has been shown that Turing-complete behavior can be achieved using only function calls from libc [40].

#### Return Oriented Programming (ROP)

In ROP attacks [34], a gadget is a series of machine instructions ending in a `ret` or a similar sequence, such as `pop x; jmp *x` [9]. The `ret` instructions transfer control from one gadget to the next, allowing attackers to construct complex attacks from existing code (see Figure 2-1). On processors with variable-length instructions, ROP gadgets can come from unintended instructions caused by transferring control into the middle of an instruction [34]. The x86 instruction set, in particular, is very dense, making it likely that a random byte stream contains valid x86 instructions. Gadgets must end in a `ret` to enable control transfer. In x86, `ret` is represented by a single byte (C3), making gadgets common enough to build useful malware.

It has been demonstrated that complete malware payloads can be created using only code reuse attacks [34], even with limited available code [19]. However, real attacks often use ROP to perform specific operations, such as disabling W^X, to facilitate a more general subsequent attack. This may involve calling a single function [14] or leaking a single memory address [32]. Once W^X is disabled, an injected payload can be executed.

#### Memory Disclosure and Breaking Randomization Systems

Many defenses randomize the layout of the process address space to prevent attackers from predicting the locations of functions and gadgets [18] [23] [33] [39] [44] [45]. However, techniques exist to allow attackers to gather enough information about the address space to construct effective code reuse payloads. Current randomization systems randomize the base addresses of executables and linked libraries [30] [33], while the relative addresses of code within the program and linked libraries remain fixed. Shacham et al. [35] show that it is relatively easy for an attacker to use brute force to guess the address of one function (e.g., `sleep`) and then calculate the base address of the library and, consequently, the addresses of the rest of the code.