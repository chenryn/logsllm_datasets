24 => 0x080484a4;
f1d1 0xc (tesp)
25
18080x0
: 8*#8+080x0
fxch lat (1)
26
27
 0>8080x0
fcnovbe tst (1), 1st
fucoml tst (1), lst
28
29
: *e>8+080x0
1 098080x0
fstp ist (1)
30 End of asseabler dunp.
ret
31 (gdb) n1
---
## Page 232
214
逆向工程权威指南（上册）
32 0x080484a8 1n d,nax []
33(gdb) info float
35 =>R6: Va11d
34
R7: Yalid
0x3fff9999999999999800 +1 . 199999999999999956
0x4000d999999999999800
+3. 399999999999999911
36
R4: Bspty
R5: Empty
0x00000000000000000000
37
0x000
R3: Empty
39
40
Kdeg 1t8
R2: Empty
0×00000000000000000000
41
Kqdag 108
0x00000000000000000000
ipzog snseas Eb
42
0x3000
45 Control Word:
44
0x037E IM DH ZM OM UM PM
TOP: 6
46
PC: Extended Precision (64-bits)
47
RC: Round to nearest
48 Tag Word:
0x73:0x080484a4
0x0fff
50 Operand Pointer:
49 Instruction Pointer:
0x7b: 0xbffff118
52 (gdb) n1
51 0pcode:
0000X0
53 0x080484aa in d_nax ()
54 (gdb) Info float
56 =>R6: Valid
55
R7: Valid
0x4000d999999999999800 +3 . 399999999999999911
Ox3fff9999999999999800
+1. 199999999999999956
57
R4: Enpty
R5: Espty
0x000
1000000000
59
R3:Enpty
0x00000000000000000000
1000000000
60
R2: Enpty
R1: Enpty
0x0C
62
R0: Empty
0x00000
63
0x00000000000000000000
64 Status Word:
0x3000
66 Control Word:
65
0x037E IM DM ZM OM UM PM
TOP: 6
67
PC: Extended Precision (64bits)
68
RC: Bound to nearest
70 Instruction Pointer:
:paog be 69
0x73:0x080484a8
0x0fff
71 Operand Pointer:
ox7b:0xbffff118
72 0pcode:
0×0000
74 Dump of assenbler code for function d_max:
73
(gdb) disas Seip
75
76
0x080484a4 :
0x080484a0 :
f1d1 0xc(tesp)
f1d1 0x4(tesp)
77
0x080484a8 :
[xch lst (1)
78
=>
1 ##$8b080x0
fcnovbe sst (1),ist
fucomi 8st (1), st
79
0x080484ac :
80
81
: 9e>8+080x0
0x080484b0 :
Estp lst (1)
82 End of assesbler dump
ret
84 0x080484ac in d_max ()
83(gdb) ni
85 (gdb) info registers
86 eax
87 ecx
0x1
88 edx
oxbffff1c4
1073745468
0x8048340
1208225792
134513472
89 ebx
0xb7fbfo00
91 ebp
90
esp
oxbffff10c
oxbffff128
0xbffff10c
oxbffff128
92 esi
93 edi
0x0
0x0
Q
94 eip
0x80484ac
0xB0484ac 
95 eflags
96 cs
0x203
[ CF IF ]
97 39
0x73
115
0x7b
123
98 ds
0x7b
123
---
## Page 233
第17章FPU
215
99 es
0x7b
123
100 f8
0x0
101
0x33
0
51
0x080484ae in d_max ()
(gdb)n1
104 (gdb) info float
103
106
105
=>R6: Va1id
R7: Valid
0x4000d999999999999800 +3. 399999999999999911
R5: Enpty
0x4000d999999999999800
1166666666666666633+
107
R4: Enpty
0x00000000000000000000
109
80T
R3:
dug
0x:00
000
110
R1:E
R2:
Enpty
Enpty
0x00000000000000000000
111
112
RO: Enpty
0x000
ETT
000000
114 Status Mord:
0x3000
115
Control Word:
0x037E IM DM ZM OM UM PM
TOP:6
116
117
PC: Extended Precision (64=bits)
119 Tag Word:
1.18
0xofff
RC: Round to nearest
120
Instruction Pointer1
0x73:0x080484ac
121
Operand Pointer:
8t173319x0:,x0
123
(gdb) disas Seip
Opcode:
0x0000
1.25
0x080484a0 :
f1d1 0x4 (tesp)
126
0x080484a4 1
f1d] 0xc(tesp)
127
: 8e8+080x0
fxch lst(1)
128
0x080484aa :
0x080484ac :
fcmovbe st (1), st
fuconi st(1), st
129
130
=> 0x080484ae :
0x080484b0 :
fstp lst(1)
132 End of assenb1er dunp
131
ret
134 0x080484b0 in d_max ()
133
(gdb)n1
135
136
(qp6)
=>R7:
info float
R6:
PTTEA
0x4000d999999999999800
+3, 399999999999999911
LET
Erpty
139
138
R4:Enpty
R51
Kqdug
0x000
Kdx3
0x0000000
140
R2:
R3:
dug
0x00000000000000000000
142
141
0x000
R1:
dug
00000
144
143
Aqdug 108
145
:paog snteas
0x3800
147
146
0x037E IM DM ZM CM UM PM
TOP: 7
Control Mord:
PC: Extended Precision (64-bits)
149
BC: Round to nearest
150 Tag Word:
Instruction Pointer:
152 0perand Pointer:
151
0x73:0x080484ae
153 0pcode:
0x7b:0xbffff118
154
(gdb)quit
0x0000
155 A debugging session is active.
157
156
Inferior 1[process 30194] wi11 be ki1led.
159 Quit anyway? (y or n) y
158
160 dennisfubuntuvn: ~/polygons
使用“ni”指令可以执行头两条FLD指令。
再使用第33行的指令检查FPU寄存器的状态。
前文（17.5.1节）介绍过，FPU寄存器属于循环缓冲区的逻辑构造，它实际上不是标准的栈结构。所以GDB
---
## Page 234
216
逆向工程权威指南（上册）
不会把寄存器名称显示为助记符“ST（x)”，而是显示出FPU寄存器的内部名称，Rx。第35行所示的箭头表示
该行的寄存器是当前的栈项。您可从第44行的“StatusWord/状态字”里找到栈项寄存器的编号。本例中栈项状
态字为6，所以栈项是6号内部寄存器。
在第54行处，FXCH指令交换了变量a和变量b的数值。
在执行过第83行的FUCOM1指令后，我们可在第95行看到CF为1。
第104行，FCMOVBE指令复制变量b的值。
第136行的FSTP指令会调整栈项，也会弹出一个值。而后TOP的值变为7，FPU栈指针指向第7寄存器。
17.7.2ARM
Optimizing Xcode 4.6.3 (LLVM) (ARM mode)
指令清单 17.16Optimizing Xcode 4.6.3 (LLVM) (ARM mode)
VMOV
D16, R2, R3  b
AOKA
VCMPE,F64
D17, R0, R1  a
D17, D16
VMOVGT, F64
SHRA
APSR_nzcV, FPSCR 
VMOV
D16, D17 ; copy *a* to D16
R0, R1, D16
BX
LR
这段程序的代码很简短。函数把输入变量存储到D17、D16寄存器之后，使用VCMPE指令比较这两个变量
的值与x86处理器相仿，ARM处理器也有自己的状态寄存器和标识寄存器、其协作处理器也存在相关的FPSCR。
虽然ARM模式的指令集存在条件转移指令，但是它的条件转移指令都不能直接访问协作处理器的状
态寄存器。这个特点和x86系统相同。所以，ARM平台也有专门的指令把协作处理器的4个标识位（N、
Z、C、V）复制到通用状态寄存器的ASPR寄存器里，即VMRS 指令。
VMOVGT是FPU上的MOVGT指令，在操作数大于另一个操作数时进行赋值操作。这个指令的后缓
GT 代表 “Greater Than”。
如果触发了VMOVGT指令，则会把D17里变量α的值复制到D16寄存器里。
否则，D16寄存器将会保持原来的变量a的值。
倒数第二条指令VMOV的作用是制备返回值，它把D16寄存器里64位的值拆分为1对32的值，并
分别存储于通用寄存器R0和R1里。
Optimizing Xcode 4.6.3 (LLVM) (Thumb2 mode)
使用Xcode 4.6.3（开启优化选项）、以Thumb-2模式编译上述程序可得到如下所示的指令。
指令清单 17.17Optimizing Xcode 4.6.3 (LLVM) (Thumb2 mode)
VMOV
D16, R2, B3 : b
NOKA
D17, R0, R1 ; a
VCXPE.P64
D17, D16
VMRS
LDLI
APSR_nzcv, FPSCR
VMOVGT,F64
AOKA
R0, R1, D16
D16, D17
BX
Thumb-2模式的代码和ARM模式的程序大体相同。确实，很多ARM模式的指令都存在对应的依相
应条件才会执行的衍生指令。
但是Thumb模式没有这种衍生的执行条件指令。Thumb模式的opcode只有16位。这个空间存储不下
条件判断表达式所需的那4位的存储空间。
① ARM 平台的 Floating-Point Status and Control Register
---
## Page 235
第17章FPU
217
而扩充后的Thumb-2指令集则没有上述缺陷，它们可以封装Thumb模式欠缺的条件判断表达式。
在IDA显示的汇编指令清单里，我们可以看到Thumb-2模式的代码里也出现VMOVGT指令。
此处的实际指令是VMOV指令，IDA为其添加了一GT后缓。为了直观地体现前面那条指令“ITGT”
的条件判断作用，IDA在此使用了伪指令。
IT指令与所谓的if一then语句存在明确的对应关系。在IT指令之后的指令（最多4条指令），相当于
在then语句模块里的一组条件运行指令。在本例中“ITGT”的涵义是：如果前面比较的数值，第一个值
“大于/GreaterThan”第二个值，则执行后续模块的1条指令。
我们来看下“愤怒的小鸟（iOS版）”里的代码片段。
指令清单 17.18Angry BirdsClassic
ITEBE
VMOVEQ
VHOVNE
R2, R3, D16
R2, R3, D17
BLX
_objc_msg5end : not prefLxed
“ITE”是“if-then-else”的缩写。这个指令后有两条指令：第一条就是then模块，第二条就是else模块。
我们再从“愤怒的小鸟”里找段更为复杂的代码。
指令清单 17.19Angry Birds Classic
ITTTT E0
M0VBQ
R0, R4
ADDEQ
POPEQ.￥
SP, SP, #0x20
POPEQ
(R8, R10)
BLX
(R4R7, PC)
_stack_chk_fai1 : not prefixed
- 1 
确实有ITEEE EQ这种形式的指令，代表“if-hen-else-else-else-else”。在解析到这条指令后，IDA会给其后的
5条指令依次添加下述后级：
EQ
NE
NE
-NE
我们继续分析“愤怒的小鸟”里的其他程序片段。
指令清单 17.20Angry BirdsClassic
CMP .W
ITTE 1E
RO,OxFFFFFFFF
SUBLE,W
R10, R0, 1
NEGLE
R0, R0
LOAOK
R10,R0
SAOK
CBZ
R0, loc_1E7E32 : not prefixed
R6, #0
: not prefixed
ITTELE表示如果“小于或等于/LE(LessorEqual)”的条件成立，则执行then模块的2条指令，否则
（“大于”情况下）执行else模块的第3条指令。
虽然1-T-E类型的指令可以有多个T和多个E，但是编译器还没有聪明到按需分配所有排列组合的程序。以“愤
怒的小鸟”（iOS经典版）为例，那个时候的编译器只能分配“IT,ITE,ITTITTE,ITTT,ITTTT”这儿种判断语句。调
查IDA生成的汇编指令清单就可以验证这点。在生成汇编指令清单文件的时候，启用相关选项IDA同步输出每条
---