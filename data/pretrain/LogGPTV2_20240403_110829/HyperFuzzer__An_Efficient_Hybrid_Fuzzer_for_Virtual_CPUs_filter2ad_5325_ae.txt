generation or solving. Despite of its simplicity, AFL was shown to
find many bugs missed by pure blackbox random fuzzing.
Hybrid fuzzing [17, 35, 39, 48, 50, 53] combines graybox fuzzing
techniques with whitebox fuzzing. The goal is to explore trade-offs
to determine when and where simpler techniques are sufficient
to obtain good code coverage, and use more complex techniques,
like symbolic execution and constraint solving, only when the
simpler techniques are stuck. HFL [35] brings hybrid fuzzing to the
kernel space by performing dynamic symbolic execution based on
hardware emulation [19] and handling kernel-specific challenges
such as inferring system call dependencies.
As the first efficient hybrid fuzzer for virtual CPUs, HyperFuzzer
has two main differences when compared with HFL. First, they
have different fuzzing targets. To fuzz hypervisors, HyperFuzzer
performs hypervisor-only analysis by focusing on the hypervisor
execution over a single VM trap. Second, HyperFuzzer leverages
hardware tracing to achieve precise and efficient symbolic execution
by using NSE while HFL is based on hardware emulation.
8.2 Hypervisor Testing
Amit et al. [14] adapts Intel’s tools for testing a physical CPU to
virtual CPUs implemented by a hypervisor. The CPU testing tool
generates a sequence of random instructions to execute on the
virtual CPU and checks for architectural state divergences in com-
parison to a reference implementation such as a CPU simulator.
The tool does not take any feedback from the hypervisor execution
(i.e., blackbox testing), but relies on its intimate awareness of x86
architecture to generate comprehensive test cases.
MultiNyx [24] systematically generates test cases for a hypervi-
sor by applying dynamic symbolic execution to the whole system.
To do so, MultiNyx runs the hypervisor on an instrumented Bochs
Session 2A: Fuzzing and Bug Finding CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea376emulator [3], which itself runs on top of the Pin binary instrumen-
tation framework [38]. MultiNyx combines traces across multiple
levels to realize the dynamic symbolic execution for test case gen-
eration. This leads to high performance overhead because of the
emulation cost and the complexity in reasoning about multi-level
traces for symbolic execution.
PokeEMU [40] performs symbolic execution on a high-fidelity
emulator (e.g., Bochs) to generate test cases for other virtual CPU
implementations (e.g., hypervisors). PokeEMU does not reason
about the execution of the system under test. Therefore, a corner
case that is only present in the hypervisor may not be uncovered
based on the analysis of a different virtual CPU implementation.
Hyper-Cube [44] implements a blackbox hypervisor fuzzer based
on a custom operating system running a custom bytecode inter-
preter. Hyper-Cube’s blackbox nature makes it less likely to hit hy-
pervisor bugs involving complex conditions. Furthermore, Hyper-
Cube does not mutate the VM’s architectural state in which the
bytecode gets interpreted. This can limit its testing coverage as the
hypervisor depends on the VM’s architectural state when emulating
an operation.
Nyx [45] is a coverage-guided graybox hypervisor fuzzer. It runs
a target hypervisor in a guest VM via nested virtualization, and
records its coverage using Intel PT. It relies on Hyper-Cube to
drive the workload, so it shares the same limitation that the VM’s
architectural environment is not mutated. Furthermore, its lack
of whitebox fuzzing for precise input generation limits its search
space. In fact, Nyx has been reported to only find bugs in ring-3 I/O
device emulation code in QEMU (not in KVM’s virtual CPU code
running in ring-0).
As discussed in §2, in order to catch tricky virtual CPU bugs, Hy-
perFuzzer must be able to mutate a VM’s entire state (e.g., modify
the GDT) and generate precise inputs based on dynamic symbolic
execution (e.g., generate the RDTSC opcode). Hypervisor fuzzers
like Hyper-Cube and Nyx do not meet either requirement. There-
fore, they would miss the 6 bugs described in §6.5 that require
symbolic execution and/or VM state mutation.
8.3 Hardware Tracing
Intel PT [32, Chap. 35] is today’s most practical hardware tracing
technology. It can record complete control flow with low perfor-
mance overhead and without modifying the tracing target. It can
also record fine-grained timestamps. Intel PT has been used in the
following scenarios.
Fuzzing. Several systems [18, 46, 52] use Intel PT to enable
coverage-guided graybox fuzzing. kAFL [46] implements a coverage-
guided fuzzer for arbitrary OS kernels running inside a VM by
enabling hardware tracing, such as Intel PT, from the hypervisor.
kAFL has only been applied to OS kernel components and is limited
to coverage-guided fuzzing. PTRIX [18] combines AFL with Intel
PT to fuzz commercial-off-the-shelf (COTS) program binaries in
an efficient manner. It achieves high efficiency by mapping highly-
compressed Intel PT traces to code coverage without reconstructing
the exact control flow. PTFuzz [52] enables graybox binary-only
fuzzing by taking the control flow recorded by Intel PT as the feed-
back. It overcomes the inaccurate coverage representation in AFL
by using the actual transitions between basic blocks logged in the
control-flow trace.
Pointer Analysis. SNORLAX [34] uses the control flow recorded
by Intel PT to perform points-to analysis and use its timestamps
to determine thread interleaving. Compared with traditional static
pointer analysis, this hardware-assisted approach limits the analysis
to the recorded execution path and achieves higher accuracy.
Reverse Debugging. REPT [20, 26] is a reverse debugging tool
based on Intel PT. It can infer data values based on the control
flow recorded by Intel PT and the final program state captured in
a memory dump. Despite its ability in recovering an approximate
execution history, REPT cannot be directly applied to hybrid fuzzing
because taking a memory dump for each run is too expensive.
Failure Reproduction. This is an important and hard problem in
software engineering. Existing failure reproduction techniques [33,
51] face the challenge of path explosion and high overhead due
to the extra logging. Execution Reconstruction (ER) [54] is a new
production failure reproduction technique which harnesses failure
reoccurrences to iteratively perform hardware-assisted control/data
tracing and symbolic execution which identifies what key data
should be logged for a successful failure reproduction.
A common theme shared by previous work on pointer analysis,
reverse debugging and failure reproduction is that the recorded
execution path can achieve better accuracy than traditional static
analysis that has to examine all possible execution paths. In con-
trast, HyperFuzzer leverages Intel PT for whitebox fuzzing: starting
from an incomplete execution history (i.e., only the control flow),
HyperFuzzer is able to reconstruct enough of the execution to per-
form dynamic symbolic execution, path constraint generation and
solving that is nearly as precise as traditional approaches that rely
on a complete execution history.
9 CONCLUSION
We have presented HyperFuzzer, the first efficient hybrid fuzzer
for virtual CPUs. HyperFuzzer achieves both efficiency and pre-
cision by leveraging hardware tracing to record the control flow
of the hypervisor efficiently, and by introducing a new fuzzing
technique called Nimble Symbolic Execution to perform precise
symbolic execution by using only the recorded control flow and
the fuzzing input. We implemented a prototype of HyperFuzzer for
Microsoft Hyper-V hypervisor. Our experiments show that Hyper-
Fuzzer achieves high fuzzing throughput, and can identify and flip
most input-dependent branches. More importantly, HyperFuzzer
has found 11 previously unknown virtual CPU bugs in the Hyper-V
hypervisor, and all of them were confirmed and fixed.
ACKNOWLEDGMENTS
We thank our shepherd, Yajin Zhou, and other reviewers for their
insightful feedback. We are very grateful for all the help from our
colleagues at Microsoft. In particular, Aditya Bhandari, Alexander
Grest, David Hepkin, Daniel King, Eric Lee, Sunil Muthuswamy,
Sai Ganesh Ramachandran, Bruce Sherwin, David Zhang provided
tremendous help and valuable perspectives for integrating Hyper-
Fuzzer with the Windows Hyper-V hypervisor and resolving the
bugs found by HyperFuzzer. We also thank Hangchen Yu for his
internship work on enabling Intel PT tracing of the hypervisor.
Session 2A: Fuzzing and Bug Finding CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea377bounty-hyper-v.
[8] Ventures into Hyper-V - Fuzzing hypercalls. https://labs.f-secure.com/blog/
ventures-into-hyper-v-part-1-fuzzing-hypercalls.
[9] Viridian Fuzzer. https://github.com/FSecureLABS/ViridianFuzzer.
[10] XenFuzz. https://www.openfoo.org/blog/xen-fuzz.html.
[11] Attacking the VM Worker Process. https://msrc-blog.microsoft.com/2019/09/11/
REFERENCES
[1] American Fuzzy Lop. https://github.com/google/AFL.
[2] AWS Nitro System. https://aws.amazon.com/ec2/nitro/.
[3] Bochs x86 PC emulator. http://bochs.sourceforge.net/.
[4] Fuzzing Para-virtualized Devices in Hyper-V. https://msrc-blog.microsoft.com/
2019/01/28/fuzzing-para-virtualized-devices-in-hyper-v/.
[5] Hyperseed. https://github.com/Microsoft/MSRC-Security-Research/blob/master/
presentations/2019_02_OffensiveCon/2019_02%20-%20OffensiveCon%20-
%20Growing%20Hypervisor%200day%20with%20Hyperseed.pdf.
[6] KVM Unit Tests. https://www.linux-kvm.org/page/KVM-unit-tests.
[7] Microsoft Hyper-V Bounty Program. https://www.microsoft.com/en-us/msrc/
attacking-the-vm-worker-process/.
[12] https://github.com/MSRSSP/hyperfuzzer-seeds.
[13] Eyad Alkassar, Mark A Hillebrand, Wolfgang Paul, and Elena Petrova. 2010. Auto-
mated Verification of a Small Hypervisor. In Proceedings of the Third International
Conference on Verified Software: Theories, Tools, and Experiments (VSTTE).
[14] Nadav Amit, Dan Tsafrir, Assaf Schuster, Ahmad Ayoub, and Eran Shlomo. 2015.
Virtual CPU Validation. In Proceedings of the 25th ACM Symposium on Operating
Systems Principles (SOSP).
[15] Cristian Cadar, Daniel Dunbar, and Dawson Engler. 2008. KLEE: Unassisted and
Automatic Generation of High-Coverage Tests for Complex Systems Programs.
In Proceedings of the 8th USENIX Conference on Operating Systems Design and
Implementation (OSDI).
[16] Cristian Cadar, Vijay Ganesh, Peter M. Pawlowski, David L. Dill, and Dawson R.
Engler. 2006. EXE: Automatically Generating Inputs of Death. In Proceedings of
the 13th ACM Conference on Computer and Communications Security (CCS).
[17] Yaohui Chen, Peng Li, Jun Xu, Shengjian Guo, Rundong Zhou, Yulong Zhang,
Tao Wei, and Long Lu. 2020. SAVIOR: Towards Bug-Driven Hybrid Testing. In
Proceedings of the 41st IEEE Symposium on Security and Privacy.
[18] Yaohui Chen, Dongliang Mu, Jun Xu, Zhichuang Sun, Wenbo Shen, Xinyu Xing,
Long Lu, and Bing Mao. 2019. Ptrix: Efficient Hardware-Assisted Fuzzing for
COTS Binary. In Proceedings of the 14th ACM Asia Conference on Computer and
Communications Security.
[19] Vitaly Chipounov, Volodymyr Kuznetsov, and George Candea. 2011. S2E: A
Platform for In-Vivo Multi-Path Analysis of Software Systems. In Proceedings
of the 16th International Conference on Architectural Support for Programming
Languages and Operating Systems (ASPLOS).
[20] Weidong Cui, Xinyang Ge, Baris Kasikci, Ben Niu, Upamanyu Sharma, Ruoyu
Wang, and Insu Yun. 2018. REPT: Reverse Debugging of Failures in Deployed
Software. In Proceedings of the 13th USENIX Symposium on Operating Systems
Design and Implementation (OSDI).
[21] Mike Dahlin, Ryan Johnson, Robert Bellarmine Krug, Michael McCoyd, and
William Young. 2011. Toward the Verification of a Simple Hypervisor. In Pro-
ceedings of the 10th International Workshop on the ACL2 Theorem Prover and its
Applications.
[22] Leonardo De Moura and Nikolaj Bjørner. 2008. Z3: An Efficient SMT Solver. In
Proceedings of the 14th International conference on Tools and Algorithms for the
Construction and Analysis of Systems (TACAS). Springer, 337–340.
[23] Bassem Elkarablieh, Patrice Godefroid, and Michael Y. Levin. 2009. Precise Pointer
Reasoning for Dynamic Test Generation. In Proceedings of the 18th International
Symposium on Software Testing and Analysis (ISSTA).
[24] Pedro Fonseca, Xi Wang, and Arvind Krishnamurthy. 2018. MultiNyx: a Multi-
Level Abstraction Framework for Systematic Analysis of Hypervisors. In Pro-
ceedings of the Thirteenth EuroSys Conference.
[25] J. E. Forrester and B. P. Miller. 2000. An Empirical Study of the Robustness
of Windows NT Applications Using Random Testing. In Proceedings of the 4th
USENIX Windows System Symposium. Seattle.
[26] Xinyang Ge, Ben Niu, and Weidong Cui. 2020. Reverse Debugging of Kernel
Failures in Deployed Systems. In Proceedings of the 2020 USENIX Annual Technical
Conference (ATC’20). 281–292.
[27] Patrice Godefroid. 2011. Higher-Order Test Generation. In Proceedings of ACM
SIGPLAN 2011 Conference on Programming Language Design and Implementation
(PLDI).
[28] Patrice Godefroid. 2020. Fuzzing: Hack, Art, and Science. Communications of the
ACM 63, 2 (February 2020), 70–76.
[29] Patrice Godefroid, Nils Klarlund, and Koushik Sen. 2005. DART: Directed Auto-
mated Random Testing. In Proceedings of the 2005 ACM SIGPLAN Conference on
Programming Language Design and Implementation (PLDI).
[30] Patrice Godefroid, Michael Y Levin, and David Molnar. 2008. Automated White-
box Fuzz Testing. In Proceedings of the 16th Annual Network and Distributed
System Security Symposium (NDSS).
[31] Ronghui Gu, Zhong Shao, Hao Chen, Xiongnan Newman Wu, Jieung Kim, Vilhelm
Sjöberg, and David Costanzo. 2016. CertiKOS: An Extensible Architecture for
Building Certified Concurrent OS Kernels. In Proceedings of the 12th USENIX
Symposium on Operating Systems Design and Implementation (OSDI).
[32] Intel Corporation. Intel 64 and IA-32 Architectures Software Developer’s Manual,
Volume 3. https://software.intel.com/content/www/us/en/develop/articles/intel-
sdm.html.
[33] Wei Jin and Alessandro Orso. 2012. BugRedux: Reproducing Field Failures for In-
House Debugging. In Proceedings of the 34th International Conference on Software
Engineering (ICSE).
[34] Baris Kasikci, Weidong Cui, Xinyang Ge, and Ben Niu. 2017. Lazy Diagnosis of
In-Production Concurrency Bugs. In Proceedings of the 26th ACM Symposium on
Operating Systems Principles (SOSP).
[35] Kyungtae Kim, Dae R Jeong, Chung Hwan Kim, Yeongjin Jang, Insik Shin, and
Byoungyoung Lee. 2020. HFL: Hybrid Fuzzing on the Linux Kernel. In Proceedings
of the 28th Network and Distributed Systems Security Conference (NDSS).
[36] Gerwin Klein, Kevin Elphinstone, Gernot Heiser, June Andronick, David Cock,
Philip Derrin, Dhammika Elkaduwe, Kai Engelhardt, Rafal Kolanski, Michael
Norrish, et al. 2009. seL4: Formal verification of an OS kernel. In Proceedings of
the 22nd ACM Symposium on Operating Systems Principles (SOSP).
[37] Dirk Leinenbach and Thomas Santen. 2009. Verifying the Microsoft Hyper-V
hypervisor with VCC. In Proceedings of the International Symposium on Formal
Methods.
[38] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Artur Klauser, Geoff
Lowney, Steven Wallace, Vijay Janapa Reddi, and Kim Hazelwood. 2005. Pin:
Building Customized Program Analysis Tools with Dynamic Instrumentation.
ACM SIGPLAN Notices 40, 6 (2005), 190–200.
[39] Rupak Majumdar and Koushik Sen. 2007. Hybrid Concolic Testing. In Proceedings
of the 29th International Conference on Software Engineering (ICSE). IEEE, 416–426.
[40] Lorenzo Martignoni, Stephen McCamant, Pongsin Poosankam, Dawn Song, and
Petros Maniatis. 2012. Path-Exploration Lifting: Hi-Fi Tests for Lo-Fi Emulators.
In Proceedings of the Seventeenth International Conference on Architectural Support
for Programming Languages and Operating Systems (ASPLOS).
https://docs.microsoft.com/en-us/
virtualization/hyper-v-on-windows/reference/hyper-v-architecture.
Hyper-V Architecture.
[41] Microsoft.
[42] Barton P. Miller, Louis Fredriksen, and Bryan So. 1990. An empirical study of the
reliability of UNIX utilities. Commun. ACM 33, 12 (Dec 1990).
[43] Florent Saudel and Jonathan Salwan. 2015. Triton: A Dynamic Symbolic Execution
Framework. In Symposium sur la sécurité des technologies de l’information et des
communications. 31–54.
[44] Sergej Schumilo, Cornelius Aschermann, Ali Abbasi, Simon Wörner, and Thorsten
Holz. 2020. HYPER-CUBE: High-Dimensional Hypervisor Fuzzing. In Proceedings
of the 28th Network and Distributed Systems Security Conference (NDSS).
[45] Sergej Schumilo, Cornelius Aschermann, Ali Abbasi, Simon Wörner, and Thorsten
Holz. 2021. Nyx: Greybox Hypervisor Fuzzing using Fast Snapshots and Affine
Types. In Proceedings of the 30th USENIX Security Symposium. Virtual Event.
[46] Sergej Schumilo, Cornelius Aschermann, Robert Gawlik, Sebastian Schinzel, and
Thorsten Holz. 2017. kAFL: Hardware-Assisted Feedback Fuzzing for OS Kernels.
In Proceedings of the 26th USENIX Security Symposium. 167–182.
[47] Yan Shoshitaishvili, Ruoyu Wang, Christopher Salls, Nick Stephens, Mario Polino,
Audrey Dutcher, John Grosen, Siji Feng, Christophe Hauser, Christopher Kruegel,
and Giovanni Vigna. 2016. SoK: (State of) The Art of War: Offensive Techniques
in Binary Analysis. In Proceedings of the 37th IEEE Symposium on Security and
Privacy (Oakland).
[48] Nick Stephens, John Grosen, Christopher Salls, Andrew Dutcher, Ruoyu Wang,
Jacopo Corbetta, Yan Shoshitaishvili, Christopher Kruegel, and Giovanni Vi-
gna. 2016. Driller: Augmenting Fuzzing Through Selective Symbolic Execution.
In Proceedings of the 24th Network and Distributed System Security Symposium
(NDSS).
[49] Michael Sutton, Adam Greene, and Pedram Amini. 2007. Fuzzing: Brute Force
Vulnerability Discovery. Addison-Wesley.
[50] Insu Yun, Sangho Lee, Meng Xu, Yeongjin Jang, and Taesoo Kim. 2018. QSYM : A
Practical Concolic Execution Engine Tailored for Hybrid Fuzzing. In Proceedings
of the 27th USENIX Security Symposium.
[51] Cristian Zamfir and George Candea. 2010. Execution Synthesis: A Technique for
Automated Debugging. In Proceedings of the 5th European Conference on Computer
Systems (EuroSys).
[52] Gen Zhang, Xu Zhou, Yingqi Luo, Xugang Wu, and Erxue Min. 2018. PTFuzz:
Guided Fuzzing with Processor Trace Feedback. IEEE Access 6 (2018), 37302–
37313.
[53] Lei Zhao, Yue Duan, Heng Yin, and Jifeng Xuan. 2019. Send Hardest Problems
My Way: Probabilistic Path Prioritization for Hybrid Fuzzing. In Proceedings of
the 27th Network and Distributed System Security Symposium (NDSS).
[54] Gefei Zuo, Jiacheng Ma, Andrew Quinn, Pramod Bhatotia, Pedro Fonseca, and
Baris Kasikci. 2021. Execution Reconstruction: Harnessing Failure Reoccurrences
for Failure Reproduction. In Proceedings of the 42nd ACM SIGPLAN International
Conference on Programming Language Design and Implementation (PLDI’21). Vir-
tual Event.
Session 2A: Fuzzing and Bug Finding CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea378