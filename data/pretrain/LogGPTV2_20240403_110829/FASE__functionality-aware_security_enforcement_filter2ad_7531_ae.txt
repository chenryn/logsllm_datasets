### Enhanced Text

Approximately 10% of the cases achieve side-effect-free enforcement. In future work, we plan to enhance FASE with inference capabilities, enabling the synthesis of functionality constraints from both static and dynamic (sandboxed) analysis of the application's execution. Additionally, we aim to expand the concept of functionality-aware security enforcement beyond information flow, such as in access control.

### Acknowledgments

We extend our gratitude to our shepherd, Nick Nikiforakis, and the anonymous reviewers for their invaluable feedback. Some of the icons used in this work were designed by Freepik from Flaticon.

### References

[1] XPrivacy. www.xprivacy.eu/.

[2] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. L. Traon, D. Octeau, and P. McDaniel. FlowDroid: Precise Context, Flow, Field, Object-Sensitive, and Lifecycle-Aware Taint Analysis for Android Apps. In PLDI, 2014.

[3] http://asm.ow2.org.

[4] T. H. Austin and C. Flanagan. Multiple Facets for Dynamic Information Flow. In POPL, 2012.

[5] T. H. Austin, J. Yang, C. Flanagan, and A. Solar-Lezama. Faceted Execution of Policy-Agnostic Programs. In PLAS, 2013.

[6] C. Brabrand, R. Giegerich, and A. Møller. Analyzing Ambiguity of Context-Free Grammars. In CIAA, 2007.

[7] http://www.brics.dk/grammar/.

[8] E. Chin and D. Wagner. Efficient Character-Level Taint Tracking for Java. In SWS, 2009.

[9] https://code.google.com/p/dex2jar/.

[10] W. Enck, P. Gilbert, B. Chun, L. P. Cox, J. Jung, P. McDaniel, and A. N. Sheth. TaintDroid: An Information-Flow Tracking System for Real-Time Privacy Monitoring on Smartphones. In OSDI, 2010.

[11] V. Ganesh, A. Kiezun, S. Artzi, P. Guo, P. Hooimeijer, and M. Ernst. HAMPI: A String Solver for Testing, Analysis, and Vulnerability Detection. In CAV, 2011.

[12] M. Gordon, D. Kim, J. Perkins, L. Gilham, N. Nguyen, and M. Rinard. Information-Flow Analysis of Android Applications in DroidSafe. In NDSS, 2015.

[13] W. G. J. Halfond, A. Orso, and P. Manolios. Using Positive Tainting and Syntax-Aware Evaluation to Counter SQL Injection Attacks. In FSE, 2006.

[14] J. Henriksen, J. Jensen, M. Jørgensen, N. Klarlund, B. Paige, T. Rauhe, and A. Sandholm. Mona: Monadic Second-Order Logic in Practice. In TACAS, 1995.

[15] P. Hooimeijer, B. Livshits, D. Molnar, P. Saxena, and M. Veanes. Fast and Precise Sanitizer Analysis with BEK. In USENIX Security, 2011.

[16] P. Hooimeijer and W. Weimer. A Decision Procedure for Subset Constraints over Regular Languages. In PLDI, 2009.

[17] J. Hopcroft and J. Ullman. Introduction to Automata Theory, Languages, and Computation. Addison-Wesley, 1979.

[18] P. Hornyack, S. Han, J. Jung, S. Schechter, and D. Wetherall. These Aren’t the Droids You’re Looking For: Retrofitting Android to Protect Data from Imperious Applications. In CCS, 2011.

[19] B. Livshits and S. Chong. Towards Fully Automatic Placement of Security Sanitizers and Declassifiers. In POPL, 2013.

[20] M. Mohri and M. Jan Nederhof. Regular Approximation of Context-Free Grammars Through Transformation, 2000.

[21] M.-J. Nederhof. Practical Experiments with Regular Approximation of Context-Free Languages. Computational Linguistics, 2000.

[22] OWASP Web Application Security Project, https://www.owasp.org/.

[23] OWASP. Path Traversal Attack. https://www.owasp.org/index.php/Path_Traversal.

[24] OWASP Mobile Security Project, https://www.owasp.org/index.php/OWASP_Mobile_Security_Project.

[25] S. Rasthofer, S. Arzt, and E. Bodden. A Machine-Learning Approach for Classifying and Categorizing Android Sources and Sinks. In NDSS, 2014.

[26] S. Rasthofer, S. Arzt, E. Lovat, and E. Bodden. DroidForce: Enforcing Complex, Data-Centric, System-Wide Policies in Android. In ARES, 2014.

[27] Uniform Resource Identifiers (URI): Generic Syntax, http://www.ietf.org/rfc/rfc2396.txt.

[28] P. Saxena, D. Molnar, and B. Livshits. ScriptGard: Automatic Context-Sensitive Sanitization for Large-Scale Legacy Web Applications. In CCS, 2011.

[29] D. Schreckling, J. Posegga, J. Köstler, and M. Schaff. Kynoid: Real-Time Enforcement of Fine-Grained, User-Defined, and Data-Centric Security Policies for Android. In WISTP, 2012.

[30] T. Tateishi, M. Pistoia, and O. Tripp. Path- and Index-Sensitive String Analysis Based on Monadic Second-Order Logic. In ISSTA, 2011.

[31] O. Tripp and J. Rubin. A Bayesian Approach to Privacy Enforcement in Smartphones. In USENIX Security, 2014.

[32] J. Yang, K. Yessenov, and A. Solar-Lezama. A Language for Automatically Enforcing Privacy Policies. In POPL, 2012.

[33] A. Yip, X. Wang, N. Zeldovich, and M. F. Kaashoek. Improving Application Security with Data Flow Assertions. In SOSP, 2009.

[34] Y. Zheng, X. Zhang, and V. Ganesh. Z3-str: A Z3-Based String Solver for Web Application Analysis. In FSE, 2013.

### Appendix

#### A. Test Subjects Details

In Figure 8, we provide statistics about the selected apps. For each app, we list the number of source and sink APIs, source and sink call sites, and detected sensitive information flows.

#### B. Formal Semantics of the FASE DSL

Here, we formalize the semantics of the FASE Domain-Specific Language (DSL). We assume a standard environment \(\Delta \in \text{Env} : \text{Vars} \to \text{Objs} \cup \text{Prims}\) that maps variables to objects (including strings) and primitive values. For readability, we do not model the heap, and we assume that field identifiers are dereferenced in the standard way. The labeling function \(\tau \in \text{Lab} : \text{Objs} \cup \text{Prims} \to \mathcal{P}(\text{Labels})\) maps objects and primitives to their labels, as described in Section 3.2. We designate the label \(l_{\perp} \in \text{Labels}\) to represent public/trusted data. We overload \(\tau\) and write \(\tau(x)\), where \(x \in \text{Vars}\) is a variable, for \(\tau(\Delta(x))\), i.e., \(\tau(x)\) returns the label assigned to the object/primitive value stored at \(x\). A state \(\sigma = (\Delta, \tau) \in \text{Env} \times \text{Lab}\) defines the current environment and labeling function.

An application constraint maps a sink \(snk\), a state \(\sigma\), and a variable \(x\) to a set of strings encoded as a regular expression \(r\). We define the derivation of \(r\) below.

Given a state \(\sigma\) and a string \(v\), the relation \(\vdash\) defines the grounding of symbolic regular expressions \(r_{\text{sym}}\), i.e., regular expressions that contain variables and the keyword `val`, to concrete regular expressions \(r_{\text{conc}}\); see Figure 10. The keyword `val` evaluates to the string \(v\), constant strings \(s\) evaluate to \(s\), and variables \(x\) evaluate to \(\Delta(x)\). Composite regular expressions are evaluated recursively.

The satisfaction relation \(\models\) given in Figure 9 formalizes the evaluation of conditions for a given state \(\sigma\).

We define the block \(\text{block}(\sigma, x, l) \subseteq \mathbb{N} \times \mathbb{N}\) as follows:
Given a state \(\sigma\), a variable \(x\), and a label \(l\), we define \((i, j) \in \text{block}(\sigma, x, l)\) if and only if the substring \(x[i, j]\) is a uniformly labeled block with label \(l\).

\[
(i, j) \in \text{block}(\sigma, x, l) \iff \tau(x[i, j]) = l \land \tau(x[i - 1]) \neq l \land \tau(x[j + 1]) \neq l
\]

A pair \((i, j)\) is contained in \(\text{block}(\sigma, x, l)\) if and only if the substring \(x[i, j]\) is a uniformly labeled block with label \(l\).

#### Figure 8: Information about the Android Apps Used in Our Experiments

| App Name                | Package Name                        | Source APIs | Sink APIs | Sources | Sinks | Sensitive Flows |
|-------------------------|-------------------------------------|-------------|-----------|---------|-------|-----------------|
| Candy Crush Saga        | com.king.candycrushsaga             | 103         | 95        | 54      | 92    | 1647            |
| Yellow Pages            | com.avantar.wny                     | 33          | 64        | 55      | 54    | 579             |
| Paper Toss              | com.bfs.papertoss                   | 55          | 61        | 67      | 61    | 667             |
| Smiley Pops             | com.boolbalabs.smileypops           | 80          | 71        | 51      | 80    | 1505            |
| Coffee Finder           | com.brennasoft.findastarbucks       | 89          | 95        | 87      | 95    | 1545            |
| Bump                    | com.bumptech.bumpga                  | 51          | 80        | 64      | 948   | 2194            |
| iHeartRadio             | com.clearchannel.iheartradio.controller2 | 27          | 279       | 36      | 279   | 594             |
| SmartTacToe             | com.dynamix.mobile.SmartTacToe      | 31          | 316       | 87      | 316   | 906             |
| AccuWeather             | com.accuweather                     | 64          | 286       | 72      | 286   | 1139            |
| Antsmasher              | com.bestcoolfungames.antsmasher     | 24          | 956       | 44      | 956   | 2236            |
| aiMinesweeper           | artfulbits.aiMinesweeper            | 40          | 1683      | 44      | 1683  | 1545            |
| Cat Hair Saloon         | com.coolfish.cathairsalon           | 44          | 1060      | 60      | 1060  | 550             |
| Tiny Flashlight         | com.devuni.flashlight               | 44          | 550       | 70      | 550   | 602             |
| Celebrity Care          | com.g6677.android.cbaby             | 91          | 602       | 97      | 602   | 499             |
| Mako Mobile             | com.goldtouch.mako                  | 81          | 499       | 54      | 499   | 594             |
| Video Poker             | com.infimosoft.videopoker           | 80          | 2194      | 80      | 2194  | 2194            |
| Check: Bill Pay         | com.netgate                         | 44          | 2236      | 44      | 2236  | 2236            |
| Princess Nail Salon     | com.g6677.android.pnailspa.apk      | 49          | 2194      | 61      | 2194  | 2194            |
| Extreme Droid Jump      | com.electricsheep.edj               | 61          | 2194      | 71      | 2194  | 2194            |
| Transparent Screen      | com.digisoft.TransparentScreen      | 64          | 2194      | 95      | 2194  | 2194            |

#### Figure 9: Satisfaction Relation Between States and Conditions

\[
\begin{array}{ll}
\sigma \models \text{Cond} & \text{if } \text{bool\_op}(\Delta(x_1), \ldots, \Delta(x_k)) \neq \text{false} \\
(Δ, τ) \models \text{bool\_op}(x_1, \ldots, x_k) & \text{if } \sigma \not\models c \\
\sigma \models c_1 \land \sigma \models c_2 & \text{if } \sigma \models (c_1 \land c_2) \\
\sigma \models (\neg c) & \text{if } \sigma \not\models c \\
\end{array}
\]

#### Figure 10: Grounding Symbolic Regular Expressions

Let \(R^{\star}\) denote the regular expression that accepts all strings. We write \((x \mid l \mid r)\) for \((\text{constrain } x \mid l \mid r)\) to avoid clutter. Given an expression \((x \mid l \mid r)\), a state \(\sigma = (\Delta, \tau)\), a variable \(x\), and \(p, q \in \mathbb{N}\), we define \(\alpha\) as follows:

\[
\alpha((x \mid l \mid r), \sigma, x[p, q]) = 
\begin{cases}
x[p, q] & \text{if } \tau(x[p, q]) = l_{\perp} \\
R^{\star} & \text{if } \tau(x[p, q]) \neq l \\
r_1 \cdot r_2 \cdot r_3 & \text{otherwise}
\end{cases}
\]

where for some \((i, j) \in \text{block}(\sigma, x, l)\), we have:

\[
\begin{aligned}
r_1 &= \alpha((x \mid l \mid r), \sigma, x[p, i]) \\
r_2 &= \sigma, x[i, j] \vdash r \Downarrow r_2 \\
r_3 &= \alpha((x \mid l \mid r), \sigma, x[j, q])
\end{aligned}
\]

Here, \(\alpha\) evaluates a substring \(x[p, q]\) to itself if it is not labeled, to the accept-all regular expression \(R^{\star}\) if \(x[p, q]\) is a block assigned with a label other than the one in the constraint, and otherwise it recursively evaluates its labeled blocks. We write \(\alpha((x \mid l \mid r), \sigma, x)\) as a shorthand for \(\alpha((x \mid l \mid r), \sigma, x[0, \text{len}(x)])\).

The semantics of a set \(A\) of constraints is defined as:

\[
[[A]](\sigma, snk, x) = \bigcap_{(snk \text{ if } c \text{ then } x \mid l \mid r) \in A \land \sigma \models c} \alpha((x \mid l \mid r), \sigma, x)
\]

\([[A]]\) returns the intersection of all applicable constraints. We note that our synthesizer translates the regular expressions into Deterministic Finite Automata (DFAs) and then uses the standard algorithm for intersecting DFAs; see Section 5.

\[
\sigma, v \vdash r_{\text{sym}} \Downarrow r_{\text{conc}}
\]
\[
\sigma, v \vdash s \Downarrow s
\]
\[
\sigma, v \vdash x \Downarrow \Delta(x)
\]
\[
\sigma, v \vdash \text{str\_op}(x_1, \ldots, x_n) \Downarrow \text{str\_op}(\Delta(x_1), \ldots, \Delta(x_n))
\]
\[
\sigma, v \vdash r \Downarrow r_c
\]
\[
\sigma, v \vdash \text{val} \Downarrow v
\]
\[
\sigma, v \vdash r^{\star} \Downarrow (r_c)^{\star}
\]
\[
\sigma, v \vdash (r \cdot r') \Downarrow (r_c \cdot r'_c)
\]
\[
\sigma, v \vdash (r + r') \Downarrow (r_c + r'_c)
\]

This concludes the enhanced and more professional version of your text.