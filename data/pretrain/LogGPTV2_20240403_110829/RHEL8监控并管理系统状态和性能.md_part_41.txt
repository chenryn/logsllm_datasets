::: table
[]{#tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance.html#idm139675572681696}
**表 32.1. chrt 命令的策略选项**
::: table-contents
  短选项           长选项                描述
  ---------------- --------------------- --------------------------------------
  `-f`{.literal}   `--fifo`{.literal}    将调度设置为 `SCHED_FIFO`{.literal}
  `-o`{.literal}   `--other`{.literal}   将调度设置为 `SCHED_OTHER`{.literal}
  `-r`{.literal}   `--rr`{.literal}      将调度设置为 `SCHED_RR`{.literal}
:::
:::
:::
::: section
::: titlepage
# []{#tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance.html#changing-the-priority-of-service-during-the-boot-process_tuning-scheduling-policy}在引导过程中更改服务的优先级 {.title}
:::
利用 `systemd`{.literal}
服务，可以为启动过程中启动的服务设置实时优先级。[*单元配置指令*]{.emphasis}
用于在启动过程中更改服务的优先级。
引导过程优先级更改通过使用 service 部分中的以下指令来完成：
::: variablelist
[`CPUSchedulingPolicy=`{.literal}]{.term}
:   为已执行的进程设置 CPU 调度策略。它用于设置
    `其他`{.literal}、`fifo`{.literal} 和 `rr`{.literal} 策略。
[`CPUSchedulingPriority=`{.literal}]{.term}
:   为已执行的进程设置 CPU 调度优先级。可用的优先级范围取决于所选 CPU
    调度策略。对于实时调度策略，可以使用 `1`{.literal} （最低优先级）和
    `99`{.literal} （最高优先级）之间的整数。
:::
以下流程描述了如何在引导过程中使用 `mcelog`{.literal}
服务更改服务的优先级。
::: orderedlist
**先决条件**
1.  安装 tuned 软件包：
    ``` screen
    # {PackageManagerCommand} install tuned
    ```
2.  启用并启动 tuned 服务：
    ``` screen
    # systemctl enable --now tuned
    ```
:::
::: orderedlist
**流程**
1.  查看正在运行的线程的调度优先级：
    ``` literallayout
    # tuna --show_threads
                          thread       ctxt_switches
        pid SCHED_ rtpri affinity voluntary nonvoluntary             cmd
      1      OTHER     0     0xff      3181          292         systemd
      2      OTHER     0     0xff       254            0        kthreadd
      3      OTHER     0     0xff         2            0          rcu_gp
      4      OTHER     0     0xff         2            0      rcu_par_gp
      6      OTHER     0        0         9            0 kworker/0:0H-kblockd
      7      OTHER     0     0xff      1301            1 kworker/u16:0-events_unbound
      8      OTHER     0     0xff         2            0    mm_percpu_wq
      9      OTHER     0        0       266            0     ksoftirqd/0
    [...]
    ```
2.  创建补充 `mcelog`{.literal}
    服务配置文件，并在该文件中插入策略名称和优先级：
    ``` screen
    # cat  /etc/systemd/system/mcelog.system.d/priority.conf
    >
    [SERVICE]
    CPUSchedulingPolicy=_fifo_
    CPUSchedulingPriority=_20_
    EOF
    ```
3.  重新载入 `systemd`{.literal} 脚本配置：
    ``` screen
    # systemctl daemon-reload
    ```
4.  重启 `mcelog`{.literal} 服务：
    ``` screen
    # systemctl restart mcelog
    ```
:::
::: itemizedlist
**验证步骤**
-   显示由 `systemd`{.literal} 问题设置的 `mcelog`{.literal} 优先级：
    ``` literallayout
    # tuna -t mcelog -P
    thread       ctxt_switches
      pid SCHED_ rtpri affinity voluntary nonvoluntary             cmd
    826     FIFO    20  0,1,2,3        13            0          mcelog
    ```
:::
::: itemizedlist
**其它资源**
-   `systemd(1)和`{.literal} `tuna(8)`{.literal} man page
-   [优先级范围的描述](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/monitoring_and_managing_system_status_and_performance/tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance#priority-map_tuning-scheduling-policy){.link}
:::
:::
::: section
::: titlepage
# []{#tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance.html#priority-map_tuning-scheduling-policy}优先级映射 {.title}
:::
优先级按组定义，某些组专用于某些内核功能。对于实时调度策略，可以使用
`1`{.literal} （最低优先级）和 `99`{.literal} （最高优先级）之间的整数。
下表描述了优先级范围，可用于设置进程的调度策略。
::: table
[]{#tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance.html#idm139675425958112}
**表 32.2. 优先级范围的描述**
::: table-contents
  优先级    线程               描述
  --------- ------------------ -------------------------------------------------------------------------------------------------------
  1         低优先级内核线程   此优先级通常保留用于只需要超过 `SCHED_OTHER`{.literal} 的任务。
  2 - 49    可供使用           用于典型应用优先级的范围。
  50        默认 hard-IRQ 值    
  51 - 98   高优先级线程       将此范围用于定期执行的线程，且必须具有快速响应时间。不要将此范围用于 CPU 绑定线程，因为您将造成中断。
  99        watchdogs 和迁移   必须以最高优先级运行的系统线程。
:::
:::
:::
::: section
::: titlepage
# []{#tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance.html#tuned-cpu-partitioning-profile_tuning-scheduling-policy}tuned cpu-partitioning 配置集 {.title}
:::
为了针对对延迟敏感的工作负载调整 Red Hat Enterprise Linux
8，红帽建议使用 `cpu-partitioning`{.literal} TuneD 配置集。
在 Red Hat Enterprise Linux 8
之前，低延迟红帽文档描述了实现低延迟调优所需的众多低级别步骤。在 Red Hat
Enterprise Linux 8 中，您可以使用 `cpu-partitioning`{.literal} TuneD
配置集更有效地执行低延迟调优。该配置集可根据单个低延迟应用程序的要求轻松自定义。
下图是演示如何使用 `cpu-partitioning`{.literal} 配置集的示例：本例使用
cpu 和 node 布局。
::: figure
[]{#tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance.html#cpu-partitioning_tuning-scheduling-policy}
**图 32.1. 图 cpu-partitioning**
::: figure-contents
::: mediaobject
![CPU 分区](images/cpu-partitioning.png)
:::
:::
:::
您可以使用以下配置选项在
`/etc/tuned/cpu-partitioning-variables.conf`{.literal} 文件中配置
cpu-partitioning 配置集：
::: variablelist
[使用负载均衡隔离 CPU]{.term}
:   在 cpu-partitioning 图中，编号为 4 到 23 的块是默认的隔离
    cpus。内核调度程序的进程负载平衡在这些 CPU
    上启用。它专为需要内核调度程序负载平衡的多个线程的低延迟进程设计。
    您可以使用
    `isolated_cores=cpu-list 选项在 /etc/tuned/cpu-partitioning-variables.conf`{.literal}
    文件中配置 cpu-``{=html} partitioning 配置集，它列出了 CPU
    来隔离将使用内核调度程序负载均衡的 CPU。
    隔离 CPU 列表用逗号分开，也可以使用破折号来指定范围，如
    `3-5`{.literal}。此选项是必需的。此列表中缺少的任何 CPU
    都会自动被视为内务 CPU。
[没有负载均衡的隔离 CPU]{.term}
:   在 cpu-partitioning 图中，编号为 2 和 3 的块是隔离的
    cpu，不提供任何其他内核调度程序进程负载均衡。
    您可以使用
    `no_balance_cores=cpu-list 选项在 /etc/tuned/cpu-partitioning-variables.conf`{.literal}
    文件中配置 cpu-``{=html} partitioning 配置集，它会列出 CPU
    来隔离不使用内核调度程序负载均衡的 CPU。
    指定 `no_balance_cores`{.literal} 选项是可选的，但此列表中的所有
    cpus 都必须是 `isolated_cores 列表中列出的 cpus`{.literal} 的子集。
    使用这些 CPU 的应用程序线程需要单独固定到各个 cpu。
[内务 CPU]{.term}
:   任何未在 `cpu-partitioning-variables.conf`{.literal} 文件中隔离的
    cpu 都会自动被视为 housekeeping cpu。在内务 CPU
    上，允许执行所有服务、守护进程、用户进程、可移动内核线程、中断处理程序和内核定时器。
:::
::: itemizedlist
**其它资源**
-   `tuned-profiles-cpu-partitioning(7)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance.html#using-the-tuned-cpu-partitioning-profile-for-low-latency-tuning_tuning-scheduling-policy}使用 TuneD cpu-partitioning 配置集进行低延迟调整 {.title}
:::
此流程描述了如何使用 TuneD 的 `cpu-partitioning`{.literal}
配置集为低延迟调整系统。它使用了低延迟应用的示例，它可以使用
`cpu-partitioning`{.literal} 和 CPU 布局，如
[cpu-partitioning](#tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance.html#cpu-partitioning_tuning-scheduling-policy "图 32.1. 图 cpu-partitioning"){.link}
图中所述。
在这种情况下，应用程序使用：
::: itemizedlist
-   从网络读取数据的专用读取线程将固定到 CPU 2。
-   处理这个网络数据的大量线程将被固定到 CPU 4-23。
-   将处理的数据写入网络的一个专用写入线程将固定到 CPU 3。
:::
::: itemizedlist
**先决条件**
-   您已使用
    `yum install tuned -profiles-cpu-partitioning 命令安装 cpu`{.literal}
    -partitioning``{=html} TuneD 配置集。
:::
::: orderedlist
**流程**
1.  编辑 `/etc/tuned/cpu-partitioning-variables.conf`{.literal}
    文件并添加以下信息：
    ``` screen
    # Isolated CPUs with the kernel’s scheduler load balancing:
    isolated_cores=2-23
    # Isolated CPUs without the kernel’s scheduler load balancing:
    no_balance_cores=2,3
    ```
2.  设置 `cpu-partitioning`{.literal} TuneD 配置集：
    ``` screen
    # tuned-adm profile cpu-partitioning
    ```
3.  重启
    重新启动后，系统将根据 cpu-partitioning
    图中的隔离，调优为低延迟。应用可以使用 taskset
    将读取器和写入线程固定到 cpus 2 和 3，并将 cpus 4-23
    上的其余应用线程固定到 cpus 2 和 3。
:::
::: itemizedlist
**其它资源**
-   `tuned-profiles-cpu-partitioning(7)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance.html#customizing-the-cpu-partitioning-tuned-profile_tuning-scheduling-policy}自定义 cpu-partitioning TuneD 配置集 {.title}
:::
您可以扩展 TuneD 配置集进行额外的调优更改。
例如，cpu `-partitioning`{.literal} 配置集将 cpus 设置为使用
`cstate=1`{.literal}。要使用 `cpu-partitioning`{.literal}
配置文件，但还需要将 CPU cstate1 从 cstate1 更改为
cstate0，以下步骤描述了名为 [*my_profile*]{.emphasis} 的新 TuneD
配置集，它继承了 `cpu-partitioning`{.literal} 配置文件，然后设置 C
state-0。
::: orderedlist
**流程**
1.  创建 `/etc/tuned/my_profile`{.literal} 目录：
    ``` screen
    # mkdir /etc/tuned/my_profile
    ```
2.  在此目录中创建 `tuned.conf`{.literal} 文件，并添加以下内容：
    ``` screen
    # vi /etc/tuned/my_profile/tuned.conf
    [main]
    summary=Customized tuning on top of cpu-partitioning
    include=cpu-partitioning
    [cpu]
    force_latency=cstate.id:0|1
    ```
3.  使用新配置集：
    ``` screen