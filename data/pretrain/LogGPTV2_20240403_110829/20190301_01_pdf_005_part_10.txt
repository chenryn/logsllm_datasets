remove a message from a queue.
RETRYDELAY A DOUBLE PRECISION value that specifies the number of seconds after a
ROLLBACK that the server will wait before retrying a message.
RETENTION A DOUBLE PRECISION value that specifies the number of seconds that a
message will be saved in the queue table after dequeueing.
Example
The following command creates a queue named work_order that is associated with a
queue table named work_order_table:
CREATE QUEUE work_order QUEUE TABLE work_order_table (RETRIES 5, RETRYDELAY
2);
The server will allow 5 attempts to remove a message from the queue, and enforce a retry
delay of 2 seconds between attempts.
See Also
ALTER QUEUE, DROP QUEUE
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 113
Database Compatibility for Oracle® Developers
Reference Guide
2.3.28 CREATE QUEUE TABLE
Advanced Server includes extra syntax (not offered by Oracle) with the CREATE QUEUE
TABLE SQL command. This syntax can be used in association with DBMS_AQADM.
Name
CREATE QUEUE TABLE-- create a new queue table.
Synopsis
Use CREATE QUEUE TABLE to define a new queue table:
CREATE QUEUE TABLE name OF type_name [ ( { option_name
option_value } [, ... ] ) ]
where option_name and the corresponding option_value can be:
option_name option_value
SORT_LIST priority, enq_time
MULTIPLE_CONSUMERS FALSE, TRUE
MESSAGE_GROUPING NONE, TRANSACTIONAL
STORAGE_CLAUSE TABLESPACE tablespace_name, PCTFREE integer,
PCTUSED integer, INITRANS integer, MAXTRANS
integer, STORAGE storage_option
Where storage_option is one or more of the following:
MINEXTENTS integer, MAXEXTENTS integer,
PCTINCREASE integer, INITIAL size_clause, NEXT,
FREELISTS integer, OPTIMAL size_clause,
BUFFER_POOL {KEEP|RECYCLE|DEFAULT}.
Please note that only the TABLESPACE option is enforced; all
others are accepted for compatibility and ignored. Use the
TABLESPACE clause to specify the name of a tablespace in
which the table will be created.
Description
CREATE QUEUE TABLE allows a superuser or a user with the
aq_administrator_role privilege to create a new queue table.
If the call to CREATE QUEUE TABLE includes a schema name, the queue table is created in
the specified schema. If no schema name is provided, the new queue table is created in
the current schema.
The name of the queue table must be unique from the name of any other queue table in
the same schema.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 114
Database Compatibility for Oracle® Developers
Reference Guide
Parameters
name
The name (optionally schema-qualified) of the new queue table.
type_name
The name of an existing type that describes the payload of each entry in the queue
table. For information about defining a type, see CREATE TYPE.
option_name option_value
The name of any options that will be associated with the new queue table, and the
corresponding value for the option. If the call to CREATE QUEUE TABLE includes
duplicate option names, the server will return an error. The following values are
accepted:
SORT_LIST Use the SORT_LIST option to control the dequeueing order of the
queue; specify the names of the column(s) that will be used to sort the
queue (in ascending order). The currently accepted values are the
following combinations of enq_time and priority:
enq_time. priority
priority. enq_time
priority
enq_time
Any other value will return an ERROR.
MULTIPLE_CONSUMERS A BOOLEAN value that indicates if a message can have more than one
consumer (TRUE), or are limited to one consumer per message (FALSE).
MESSAGE_GROUPING Specify none to indicate that each message should be dequeued
individually, or transactional to indicate that messages that are
added to the queue as a result of one transaction should be dequeued as
a group.
STORAGE_CLAUSE Use STORAGE_CLAUSE to specify table attributes.
STORAGE_CLAUSE may be TABLESPACE tablespace_name,
PCTFREE integer, PCTUSED integer, INITRANS integer,
MAXTRANS integer, STORAGE storage_option
Where storage_option is one or more of the following:
MINEXTENTS integer, MAXEXTENTS integer, PCTINCREASE
integer, INITIAL size_clause, NEXT, FREELISTS
integer, OPTIMAL size_clause, BUFFER_POOL
{KEEP|RECYCLE|DEFAULT}.
Please note that only the TABLESPACE option is enforced; all others are
accepted for compatibility and ignored. Use the TABLESPACE clause to
specify the name of a tablespace in which the table will be created.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 115
Database Compatibility for Oracle® Developers
Reference Guide
Example
You must create a user-defined type before creating a queue table; the type describes the
columns and data types within the table. The following command creates a type named
work_order:
CREATE TYPE work_order AS (name VARCHAR2, project TEXT, completed BOOLEAN);
The following command uses the work_order type to create a queue table named
work_order_table:
CREATE QUEUE TABLE work_order_table OF work_order (sort_list (enq_time,
priority));
See Also
ALTER QUEUE TABLE, DROP QUEUE TABLE
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 116
Database Compatibility for Oracle® Developers
Reference Guide
2.3.29 CREATE ROLE
Name
CREATE ROLE -- define a new database role
Synopsis
CREATE ROLE name [IDENTIFIED BY password [REPLACE old_password]]
Description
CREATE ROLE adds a new role to the Advanced Server database cluster. A role is an
entity that can own database objects and have database privileges; a role can be
considered a “user”, a “group”, or both depending on how it is used. The newly created
role does not have the LOGIN attribute, so it cannot be used to start a session. Use the
ALTER ROLE command to give the role LOGIN rights. You must have CREATEROLE
privilege or be a database superuser to use the CREATE ROLE command.
If the IDENTIFIED BY clause is specified, the CREATE ROLE command also creates a
schema owned by, and with the same name as the newly created role.
Note that roles are defined at the database cluster level, and so are valid in all databases
in the cluster.
Parameters
name
The name of the new role.
IDENTIFIED BY password
Sets the role‟s password. (A password is only of use for roles having the LOGIN
attribute, but you can nonetheless define one for roles without it.) If you do not
plan to use password authentication you can omit this option.
Notes
Use ALTER ROLE to change the attributes of a role, and DROP ROLE to remove a role. The
attributes specified by CREATE ROLE can be modified by later ALTER ROLE commands.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 117
Database Compatibility for Oracle® Developers
Reference Guide
Use GRANT and REVOKE to add and remove members of roles that are being used as
groups.
The maximum length limit for role name and password is 63 characters.
Examples
Create a role (and a schema) named, admins, with a password:
CREATE ROLE admins IDENTIFIED BY Rt498zb;
See Also
ALTER ROLE, DROP ROLE, GRANT, REVOKE, SET ROLE
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 118
Database Compatibility for Oracle® Developers
Reference Guide
2.3.30 CREATE SCHEMA
Name
CREATE SCHEMA -- define a new schema
Synopsis
CREATE SCHEMA AUTHORIZATION username schema_element [ ... ]
Description
This variation of the CREATE SCHEMA command creates a new schema owned by
username and populated with one or more objects. The creation of the schema and
objects occur within a single transaction so either all objects are created or none of them
including the schema. (Please note: if you are using an Oracle database, no new schema
is created – username, and therefore the schema, must pre-exist.)
A schema is essentially a namespace: it contains named objects (tables, views, etc.)
whose names may duplicate those of other objects existing in other schemas. Named
objects are accessed either by “qualifying” their names with the schema name as a prefix,
or by setting a search path that includes the desired schema(s). Unqualified objects are
created in the current schema (the one at the front of the search path, which can be
determined with the function CURRENT_SCHEMA). (The search path concept and the
CURRENT_SCHEMA function are not compatible with Oracle databases.)
CREATE SCHEMA includes subcommands to create objects within the schema. The
subcommands are treated essentially the same as separate commands issued after creating
the schema. All the created objects will be owned by the specified user.
Parameters
username
The name of the user who will own the new schema. The schema will be named
the same as username. Only superusers may create schemas owned by users
other than themselves. (Please note: In Advanced Server the role, username,
must already exist, but the schema must not exist. In Oracle, the user
(equivalently, the schema) must exist.)
schema_element
An SQL statement defining an object to be created within the schema. CREATE
TABLE, CREATE VIEW, and GRANT are accepted as clauses within CREATE
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 119
Database Compatibility for Oracle® Developers
Reference Guide
SCHEMA. Other kinds of objects may be created in separate commands after the
schema is created.
Notes
To create a schema, the invoking user must have the CREATE privilege for the current
database. (Of course, superusers bypass this check.)
In Advanced Server, there are other forms of the CREATE SCHEMA command that are not
compatible with Oracle databases.
Examples
CREATE SCHEMA AUTHORIZATION enterprisedb
CREATE TABLE empjobs (ename VARCHAR2(10), job VARCHAR2(9))
CREATE VIEW managers AS SELECT ename FROM empjobs WHERE job = 'MANAGER'
GRANT SELECT ON managers TO PUBLIC;
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 120
Database Compatibility for Oracle® Developers
Reference Guide
2.3.31 CREATE SEQUENCE
Name
CREATE SEQUENCE -- define a new sequence generator
Synopsis
CREATE SEQUENCE name [ INCREMENT BY increment ]
[ { NOMINVALUE | MINVALUE minvalue } ]
[ { NOMAXVALUE | MAXVALUE maxvalue } ]
[ START WITH start ] [ CACHE cache | NOCACHE ] [ CYCLE ]
Description
CREATE SEQUENCE creates a new sequence number generator. This involves creating
and initializing a new special single-row table with the name, name. The generator will
be owned by the user issuing the command.
If a schema name is given then the sequence is created in the specified schema, otherwise
it is created in the current schema. The sequence name must be distinct from the name of
any other sequence, table, index, or view in the same schema.
After a sequence is created, use the functions NEXTVAL and CURRVAL to operate on the
sequence. These functions are documented in Section 2.4.9.
Parameters
name
The name (optionally schema-qualified) of the sequence to be created.
increment
The optional clause INCREMENT BY increment specifies the value to add to the
current sequence value to create a new value. A positive value will make an
ascending sequence, a negative one a descending sequence. The default value is 1.
NOMINVALUE | MINVALUE minvalue
The optional clause MINVALUE minvalue determines the minimum value a
sequence can generate. If this clause is not supplied, then defaults will be used.
The defaults are 1 and -263-1 for ascending and descending sequences,
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 121
Database Compatibility for Oracle® Developers
Reference Guide
respectively. Note that the key words, NOMINVALUE, may be used to set this
behavior to the default.
NOMAXVALUE | MAXVALUE maxvalue
The optional clause MAXVALUE maxvalue determines the maximum value for
the sequence. If this clause is not supplied, then default values will be used. The
defaults are 263-1 and -1 for ascending and descending sequences, respectively.
Note that the key words, NOMAXVALUE, may be used to set this behavior to the
default.
start
The optional clause START WITH start allows the sequence to begin anywhere.
The default starting value is minvalue for ascending sequences and maxvalue
for descending ones.
cache
The optional clause CACHE cache specifies how many sequence numbers are to
be preallocated and stored in memory for faster access. The minimum value is 1
(only one value can be generated at a time, i.e., NOCACHE), and this is also the
default.
CYCLE
The CYCLE option allows the sequence to wrap around when the maxvalue or
minvalue has been reached by an ascending or descending sequence
respectively. If the limit is reached, the next number generated will be the
minvalue or maxvalue, respectively.
If CYCLE is omitted (the default), any calls to NEXTVAL after the sequence has
reached its maximum value will return an error. Note that the key words, NO
CYCLE, may be used to obtain the default behavior, however, this term is not
compatible with Oracle databases.
Notes
Sequences are based on big integer arithmetic, so the range cannot exceed the range of an
eight-byte integer (-9223372036854775808 to 9223372036854775807). On some older
platforms, there may be no compiler support for eight-byte integers, in which case
sequences use regular INTEGER arithmetic (range -2147483648 to +2147483647).
Unexpected results may be obtained if a cache setting greater than one is used for a
sequence object that will be used concurrently by multiple sessions. Each session will
allocate and cache successive sequence values during one access to the sequence object
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 122
Database Compatibility for Oracle® Developers
Reference Guide
and increase the sequence object‟s last value accordingly. Then, the next cache-1 uses of
NEXTVAL within that session simply return the preallocated values without touching the
sequence object. So, any numbers allocated but not used within a session will be lost
when that session ends, resulting in "holes" in the sequence.
Furthermore, although multiple sessions are guaranteed to allocate distinct sequence
values, the values may be generated out of sequence when all the sessions are considered.
For example, with a cache setting of 10, session A might reserve values 1..10 and return
NEXTVAL=1, then session B might reserve values 11..20 and return NEXTVAL=11 before
session A has generated NEXTVAL=2. Thus, with a cache setting of one it is safe to
assume that NEXTVAL values are generated sequentially; with a cache setting greater
than one you should only assume that the NEXTVAL values are all distinct, not that they
are generated purely sequentially. Also, the last value will reflect the latest value reserved
by any session, whether or not it has yet been returned by NEXTVAL.
Examples
Create an ascending sequence called serial, starting at 101:
CREATE SEQUENCE serial START WITH 101;
Select the next number from this sequence:
SELECT serial.NEXTVAL FROM DUAL;
nextval
---------
101
(1 row)
Create a sequence called supplier_seq with the NOCACHE option:
CREATE SEQUENCE supplier_seq
MINVALUE 1
START WITH 1
INCREMENT BY 1
NOCACHE;
Select the next number from this sequence:
SELECT supplier_seq.NEXTVAL FROM DUAL;
nextval
---------
1
(1 row)
See Also
ALTER SEQUENCE, DROP SEQUENCE
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 123
Database Compatibility for Oracle® Developers
Reference Guide
2.3.32 CREATE SYNONYM
Name
CREATE SYNONYM -- define a new synonym
Synopsis
CREATE [OR REPLACE] [PUBLIC] SYNONYM [schema.]syn_name
FOR object_schema.object_name[@dblink_name];
Description
CREATE SYNONYM defines a synonym for certain types of database objects. Advanced
Server supports synonyms for:
 tables
 views
 materialized views
 sequences
 stored procedures
 stored functions
 types
 objects that are accessible through a database link
 other synonyms
Parameters:
syn_name
syn_name is the name of the synonym. A synonym name must be unique within
a schema.
schema
schema specifies the name of the schema that the synonym resides in. If you do
not specify a schema name, the synonym is created in the first existing schema in
your search path.
object_name
object_name specifies the name of the object.
object_schema
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 124
Database Compatibility for Oracle® Developers
Reference Guide
object_schema specifies the name of the schema that the referenced object
resides in.
dblink_name
dblink_name specifies the name of the database link through which an object is
accessed.
Include the REPLACE clause to replace an existing synonym definition with a new
synonym definition.
Include the PUBLIC clause to create the synonym in the public schema. The CREATE
PUBLIC SYNONYM command, compatible with Oracle databases, creates a synonym that
resides in the public schema:
CREATE [OR REPLACE] PUBLIC SYNONYM syn_name FOR
object_schema.object_name;
This just a shorthand way to write:
CREATE [OR REPLACE] SYNONYM public.syn_name FOR
object_schema.object_name;
Notes
Access to the object referenced by the synonym is determined by the permissions of the
current user of the synonym; the synonym user must have the appropriate permissions on
the underlying database object.
Examples
Create a synonym for the emp table in a schema named, enterprisedb:
CREATE SYNONYM personnel FOR enterprisedb.emp;
See Also
DROP SYNONYM
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 125
Database Compatibility for Oracle® Developers
Reference Guide
2.3.33 CREATE TABLE
Name
CREATE TABLE -- define a new table
Synopsis
CREATE [ GLOBAL TEMPORARY ] TABLE table_name (
{ column_name data_type [ DEFAULT default_expr ]
[ column_constraint [ ... ] ] | table_constraint } [, ...]
)
[ ON COMMIT { PRESERVE ROWS | DELETE ROWS } ]
[ TABLESPACE tablespace ]
where column_constraint is:
[ CONSTRAINT constraint_name ]
{ NOT NULL |
NULL |
UNIQUE [ USING INDEX TABLESPACE tablespace ] |
PRIMARY KEY [ USING INDEX TABLESPACE tablespace ] |
CHECK (expression) |
REFERENCES reftable [ ( refcolumn ) ]
[ ON DELETE action ] }
[ DEFERRABLE | NOT DEFERRABLE ] [ INITIALLY DEFERRED |
INITIALLY IMMEDIATE ]
and table_constraint is: