### 2.3.28 CREATE QUEUE

**Name:**
CREATE QUEUE -- Create a new queue.

**Synopsis:**
Use the `CREATE QUEUE` command to define a new queue:
```sql
CREATE QUEUE queue_name QUEUE TABLE queue_table_name (RETRIES retries, RETRYDELAY delay, RETENTION retention);
```

**Parameters:**
- **queue_name:** The name of the new queue.
- **queue_table_name:** The name of the queue table associated with the queue.
- **RETRIES:** A DOUBLE PRECISION value that specifies the number of attempts the server will make to remove a message from the queue.
- **RETRYDELAY:** A DOUBLE PRECISION value that specifies the number of seconds the server will wait before retrying a message after a ROLLBACK.
- **RETENTION:** A DOUBLE PRECISION value that specifies the number of seconds a message will be saved in the queue table after it has been dequeued.

**Example:**
The following command creates a queue named `work_order` that is associated with a queue table named `work_order_table`:
```sql
CREATE QUEUE work_order QUEUE TABLE work_order_table (RETRIES 5, RETRYDELAY 2);
```
In this example, the server will allow 5 attempts to remove a message from the queue, and enforce a retry delay of 2 seconds between attempts.

**See Also:**
- `ALTER QUEUE`
- `DROP QUEUE`

**Copyright:**
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved.

---

### 2.3.29 CREATE ROLE

**Name:**
CREATE ROLE -- Define a new database role.

**Synopsis:**
```sql
CREATE ROLE role_name [IDENTIFIED BY password [REPLACE old_password]];
```

**Description:**
The `CREATE ROLE` command adds a new role to the Advanced Server database cluster. A role can own database objects and have database privileges. The newly created role does not have the LOGIN attribute, so it cannot be used to start a session. Use the `ALTER ROLE` command to grant the role LOGIN rights. You must have the `CREATEROLE` privilege or be a database superuser to use the `CREATE ROLE` command.

If the `IDENTIFIED BY` clause is specified, the `CREATE ROLE` command also creates a schema owned by, and with the same name as, the newly created role.

Roles are defined at the database cluster level and are valid in all databases in the cluster.

**Parameters:**
- **role_name:** The name of the new role.
- **IDENTIFIED BY password:** Sets the role's password. (A password is only useful for roles with the LOGIN attribute, but you can still define one for roles without it.) If you do not plan to use password authentication, you can omit this option.

**Notes:**
- Use `ALTER ROLE` to change the attributes of a role.
- Use `DROP ROLE` to remove a role.
- Use `GRANT` and `REVOKE` to add and remove members of roles that are being used as groups.
- The maximum length limit for role names and passwords is 63 characters.

**Example:**
Create a role (and a schema) named `admins` with a password:
```sql
CREATE ROLE admins IDENTIFIED BY Rt498zb;
```

**See Also:**
- `ALTER ROLE`
- `DROP ROLE`
- `GRANT`
- `REVOKE`
- `SET ROLE`

**Copyright:**
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved.

---

### 2.3.30 CREATE SCHEMA

**Name:**
CREATE SCHEMA -- Define a new schema.

**Synopsis:**
```sql
CREATE SCHEMA AUTHORIZATION username schema_element [ ... ]
```

**Description:**
This variation of the `CREATE SCHEMA` command creates a new schema owned by `username` and populated with one or more objects. The creation of the schema and objects occurs within a single transaction, ensuring that either all objects are created or none of them, including the schema. (Note: If you are using an Oracle database, no new schema is created; the `username` and therefore the schema must pre-exist.)

A schema is essentially a namespace: it contains named objects (tables, views, etc.) whose names may duplicate those of other objects existing in other schemas. Named objects are accessed either by qualifying their names with the schema name as a prefix or by setting a search path that includes the desired schema(s). Unqualified objects are created in the current schema (the one at the front of the search path, which can be determined with the function `CURRENT_SCHEMA`). (The search path concept and the `CURRENT_SCHEMA` function are not compatible with Oracle databases.)

The `CREATE SCHEMA` command includes subcommands to create objects within the schema. These subcommands are treated essentially the same as separate commands issued after creating the schema. All the created objects will be owned by the specified user.

**Parameters:**
- **username:** The name of the user who will own the new schema. The schema will be named the same as the `username`. Only superusers may create schemas owned by users other than themselves. (Note: In Advanced Server, the role `username` must already exist, but the schema must not. In Oracle, the user, equivalently the schema, must exist.)
- **schema_element:** An SQL statement defining an object to be created within the schema. `CREATE TABLE`, `CREATE VIEW`, and `GRANT` are accepted as clauses within `CREATE SCHEMA`. Other kinds of objects may be created in separate commands after the schema is created.

**Notes:**
- To create a schema, the invoking user must have the `CREATE` privilege for the current database. (Of course, superusers bypass this check.)
- In Advanced Server, there are other forms of the `CREATE SCHEMA` command that are not compatible with Oracle databases.

**Example:**
```sql
CREATE SCHEMA AUTHORIZATION enterprisedb
    CREATE TABLE empjobs (ename VARCHAR2(10), job VARCHAR2(9))
    CREATE VIEW managers AS SELECT ename FROM empjobs WHERE job = 'MANAGER'
    GRANT SELECT ON managers TO PUBLIC;
```

**Copyright:**
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved.

---

### 2.3.31 CREATE SEQUENCE

**Name:**
CREATE SEQUENCE -- Define a new sequence generator.

**Synopsis:**
```sql
CREATE SEQUENCE name [ INCREMENT BY increment ]
[ { NOMINVALUE | MINVALUE minvalue } ]
[ { NOMAXVALUE | MAXVALUE maxvalue } ]
[ START WITH start ] [ CACHE cache | NOCACHE ] [ CYCLE ]
```

**Description:**
The `CREATE SEQUENCE` command creates a new sequence number generator. This involves creating and initializing a new special single-row table with the specified name. The generator will be owned by the user issuing the command.

If a schema name is given, the sequence is created in the specified schema; otherwise, it is created in the current schema. The sequence name must be distinct from the name of any other sequence, table, index, or view in the same schema.

After a sequence is created, use the functions `NEXTVAL` and `CURRVAL` to operate on the sequence. These functions are documented in Section 2.4.9.

**Parameters:**
- **name:** The name (optionally schema-qualified) of the sequence to be created.
- **INCREMENT BY increment:** The optional clause `INCREMENT BY increment` specifies the value to add to the current sequence value to create a new value. A positive value will make an ascending sequence, a negative one a descending sequence. The default value is 1.
- **NOMINVALUE | MINVALUE minvalue:** The optional clause `MINVALUE minvalue` determines the minimum value a sequence can generate. If this clause is not supplied, then defaults will be used. The defaults are 1 and -2^63-1 for ascending and descending sequences, respectively. Note that the key words `NOMINVALUE` may be used to set this behavior to the default.
- **NOMAXVALUE | MAXVALUE maxvalue:** The optional clause `MAXVALUE maxvalue` determines the maximum value for the sequence. If this clause is not supplied, then default values will be used. The defaults are 2^63-1 and -1 for ascending and descending sequences, respectively. Note that the key words `NOMAXVALUE` may be used to set this behavior to the default.
- **START WITH start:** The optional clause `START WITH start` allows the sequence to begin anywhere. The default starting value is `minvalue` for ascending sequences and `maxvalue` for descending ones.
- **CACHE cache:** The optional clause `CACHE cache` specifies how many sequence numbers are to be preallocated and stored in memory for faster access. The minimum value is 1 (only one value can be generated at a time, i.e., `NOCACHE`), and this is also the default.
- **CYCLE:** The `CYCLE` option allows the sequence to wrap around when the `maxvalue` or `minvalue` has been reached by an ascending or descending sequence, respectively. If the limit is reached, the next number generated will be the `minvalue` or `maxvalue`, respectively. If `CYCLE` is omitted (the default), any calls to `NEXTVAL` after the sequence has reached its maximum value will return an error. Note that the key words `NO CYCLE` may be used to obtain the default behavior, however, this term is not compatible with Oracle databases.

**Notes:**
- Sequences are based on big integer arithmetic, so the range cannot exceed the range of an eight-byte integer (-9223372036854775808 to 9223372036854775807). On some older platforms, there may be no compiler support for eight-byte integers, in which case sequences use regular INTEGER arithmetic (range -2147483648 to +2147483647).
- Unexpected results may be obtained if a cache setting greater than one is used for a sequence object that will be used concurrently by multiple sessions. Each session will allocate and cache successive sequence values during one access to the sequence object and increase the sequence object's last value accordingly. Then, the next `cache-1` uses of `NEXTVAL` within that session simply return the preallocated values without touching the sequence object. So, any numbers allocated but not used within a session will be lost when that session ends, resulting in "holes" in the sequence.
- Furthermore, although multiple sessions are guaranteed to allocate distinct sequence values, the values may be generated out of sequence when all the sessions are considered. For example, with a cache setting of 10, session A might reserve values 1..10 and return `NEXTVAL=1`, then session B might reserve values 11..20 and return `NEXTVAL=11` before session A has generated `NEXTVAL=2`. Thus, with a cache setting of one, it is safe to assume that `NEXTVAL` values are generated sequentially; with a cache setting greater than one, you should only assume that the `NEXTVAL` values are all distinct, not that they are generated purely sequentially. Also, the last value will reflect the latest value reserved by any session, whether or not it has yet been returned by `NEXTVAL`.

**Examples:**
- Create an ascending sequence called `serial`, starting at 101:
  ```sql
  CREATE SEQUENCE serial START WITH 101;
  ```
  Select the next number from this sequence:
  ```sql
  SELECT serial.NEXTVAL FROM DUAL;
  ```
  Output:
  ```
  nextval
  ---------
  101
  (1 row)
  ```

- Create a sequence called `supplier_seq` with the `NOCACHE` option:
  ```sql
  CREATE SEQUENCE supplier_seq
  MINVALUE 1
  START WITH 1
  INCREMENT BY 1
  NOCACHE;
  ```
  Select the next number from this sequence:
  ```sql
  SELECT supplier_seq.NEXTVAL FROM DUAL;
  ```
  Output:
  ```
  nextval
  ---------
  1
  (1 row)
  ```

**See Also:**
- `ALTER SEQUENCE`
- `DROP SEQUENCE`

**Copyright:**
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved.

---

### 2.3.32 CREATE SYNONYM

**Name:**
CREATE SYNONYM -- Define a new synonym.

**Synopsis:**
```sql
CREATE [OR REPLACE] [PUBLIC] SYNONYM [schema.]syn_name FOR object_schema.object_name[@dblink_name];
```

**Description:**
The `CREATE SYNONYM` command defines a synonym for certain types of database objects. Advanced Server supports synonyms for:
- Tables
- Views
- Materialized views
- Sequences
- Stored procedures
- Stored functions
- Types
- Objects accessible through a database link
- Other synonyms

**Parameters:**
- **syn_name:** The name of the synonym. A synonym name must be unique within a schema.
- **schema:** Specifies the name of the schema that the synonym resides in. If you do not specify a schema name, the synonym is created in the first existing schema in your search path.
- **object_name:** Specifies the name of the object.
- **object_schema:** Specifies the name of the schema that the referenced object resides in.
- **dblink_name:** Specifies the name of the database link through which an object is accessed.
- **REPLACE:** Include the `REPLACE` clause to replace an existing synonym definition with a new synonym definition.
- **PUBLIC:** Include the `PUBLIC` clause to create the synonym in the public schema. The `CREATE PUBLIC SYNONYM` command, compatible with Oracle databases, creates a synonym that resides in the public schema:
  ```sql
  CREATE [OR REPLACE] PUBLIC SYNONYM syn_name FOR object_schema.object_name;
  ```
  This is a shorthand way to write:
  ```sql
  CREATE [OR REPLACE] SYNONYM public.syn_name FOR object_schema.object_name;
  ```

**Notes:**
- Access to the object referenced by the synonym is determined by the permissions of the current user of the synonym; the synonym user must have the appropriate permissions on the underlying database object.

**Example:**
Create a synonym for the `emp` table in a schema named `enterprisedb`:
```sql
CREATE SYNONYM personnel FOR enterprisedb.emp;
```

**See Also:**
- `DROP SYNONYM`

**Copyright:**
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved.

---

### 2.3.33 CREATE TABLE

**Name:**
CREATE TABLE -- Define a new table.

**Synopsis:**
```sql
CREATE [ GLOBAL TEMPORARY ] TABLE table_name (
    { column_name data_type [ DEFAULT default_expr ]
      [ column_constraint [ ... ] ] | table_constraint } [, ...]
)
[ ON COMMIT { PRESERVE ROWS | DELETE ROWS } ]
[ TABLESPACE tablespace ]
```

**where column_constraint is:**
```sql
[ CONSTRAINT constraint_name ]
{ NOT NULL |
  NULL |
  UNIQUE [ USING INDEX TABLESPACE tablespace ] |
  PRIMARY KEY [ USING INDEX TABLESPACE tablespace ] |
  CHECK (expression) |
  REFERENCES reftable [ ( refcolumn ) ]
  [ ON DELETE action ] }
[ DEFERRABLE | NOT DEFERRABLE ] [ INITIALLY DEFERRED | INITIALLY IMMEDIATE ]
```

**and table_constraint is:**
```sql
[ CONSTRAINT constraint_name ]
{ UNIQUE ( column_name [, ... ] ) [ USING INDEX TABLESPACE tablespace ] |
  PRIMARY KEY ( column_name [, ... ] ) [ USING INDEX TABLESPACE tablespace ] |
  CHECK (expression) |
  FOREIGN KEY ( column_name [, ... ] ) REFERENCES reftable [ ( refcolumn [, ... ] ) ]
  [ ON DELETE action ] [ DEFERRABLE | NOT DEFERRABLE ] [ INITIALLY DEFERRED | INITIALLY IMMEDIATE ] }
```

**Description:**
The `CREATE TABLE` command creates a new table in the database. The table is created in the specified schema, or in the current schema if no schema is specified. The table name must be unique within the schema.

**Parameters:**
- **table_name:** The name of the new table.
- **column_name:** The name of a column in the table.
- **data_type:** The data type of the column.
- **DEFAULT default_expr:** The default value for the column.
- **column_constraint:** A constraint applied to a specific column.
- **table_constraint:** A constraint applied to the entire table.
- **ON COMMIT { PRESERVE ROWS | DELETE ROWS }:** Specifies the action to take on rows in a temporary table at the end of each transaction.
- **TABLESPACE tablespace:** Specifies the tablespace in which the table will be created.

**Constraints:**
- **NOT NULL:** Ensures that the column cannot contain null values.
- **NULL:** Allows the column to contain null values.
- **UNIQUE:** Ensures that all values in the column are unique.
- **PRIMARY KEY:** Ensures that all values in the column are unique and not null.
- **CHECK (expression):** Ensures that the expression is true for all rows in the table.
- **REFERENCES reftable [ ( refcolumn ) ] [ ON DELETE action ]:** Ensures that the column references a column in another table, and specifies the action to take when a referenced row is deleted.
- **DEFERRABLE | NOT DEFERRABLE:** Specifies whether the constraint can be deferred until the end of the transaction.
- **INITIALLY DEFERRED | INITIALLY IMMEDIATE:** Specifies whether the constraint is checked immediately or deferred until the end of the transaction.

**Example:**
Create a table named `employees` with columns for `id`, `name`, and `salary`:
```sql
CREATE TABLE employees (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    salary DECIMAL(10, 2) CHECK (salary > 0)
);
```

**See Also:**
- `ALTER TABLE`
- `DROP TABLE`

**Copyright:**
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved.