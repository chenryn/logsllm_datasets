(s, w) ∈ R. Bellare and Goldreich give the standard deﬁnition
of proofs of knowledge in their work “On Deﬁning Proofs
of Knowledge” [60]. They deﬁne knowledge error, which
intuitively denotes the probability that
the veriﬁer accepts
even when the prover does not know a witness. It has been
shown [61] that a sigma protocol satisfying special soundness
is a proof of knowledge with negligible knowledge error in
the length of the challenge, as stated next.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:14:48 UTC from IEEE Xplore.  Restrictions apply. 
1754
Theorem 1. Let P be a sigma protocol for relation R with
challenge length t. Then P is a proof of knowledge with
knowledge error 2−t.
We brieﬂy give the formal deﬁnition of a sigma protocol
here for completeness:
Deﬁnition 1. Sigma Protocol: A protocol P is said to be a
sigma protocol for relation R if:
Form: P is of the appropriate 3-move form, that is the prover
P sends a message, then the veriﬁer V sends a challenge,
P sends a reply, and ﬁnally V decides to accept or reject
based on the statement and the three messages.
Completeness: If P and V follow the protocol on a statement
x and private input w where (x, w) ∈ R, the veriﬁer
always accepts.
(cid:3)
, z
(a, e, z), (a, e
e (cid:9)= e
(cid:3)
Special soundness: For any statement x and any pair
(cid:3)) of accepting conversations on x, with
, one can efﬁciently compute w s.t. (x, w) ∈ R.
Honest-veriﬁer zero-knowledge: There exists a polynomial-
time simulator M, which on statement x and random e
outputs an accepting conversation of the form (a, e, z),
with the same probability distribution as conversations
between the honest P and V on input x.
We ignore most of the details of how this is transcribed into
Coq, for details see [49]. We will, however, give the deﬁnition
of honest-veriﬁer zero-knowledge since we have updated this
property. We stress again that Haines et al.’s results hold under
the updated deﬁnition and we have included the updated Coq
proofs in our code repository. The idea of the deﬁnition is to
show that the multiset of transcripts produced by the honest
runs and the simulator are equivalent by describing the ﬁrst
multiset as a function of the honest parties on the set of
randomness (Sig.R) and the second multiset as a function
of the simulator on the set of responses (Sig.T); it then
sufﬁces to show a bijection (Sig.simMap) between the set
of randomness and set of responses such that the output of
the respective functions are equal. The old deﬁnition (below)
clearly captures that the output of the respective functions
are equal. but the second condition in the deﬁnition is only
sufﬁcient if the set of response and the set of randomness
have the same cardinality. Note that it also conditioned on
the relationship (Sig.Rel) being true where the deﬁnition
should be conditioned on the transcript accepting.
Class SigmaProtocol (Sig: Sigma.form E) := {
...
honest_verifier_ZK:
forall (s: Sig.S) (w: Sig.W) (r: Sig.R) (e: E),
Sig.Rel s w = true ->
(Sig.P1(Sig.V0 (Sig.P0 s r w) e) r w) =
Sig.simulator s (Sig.simMap s r e w) e
forall (t: Sig.T),
/\
exists r: Sig.R, t = (Sig.simMap s r e w);
...
In the new deﬁnition (below) we ﬁx both issues. We make use
of the result that function f from X to Y is bijective iff there
exists a function g such that forall x in X, g(f(x)) = x and
forall y in Y, f(g(y)) = y. Recall that our aim is show that the
function Sig.simMap from Sig.R to Sig.T11 is bijective
and we do this by introducing its inverse Sig.simMapInv
and requiring that the aforementioned properties hold.
Class SigmaProtocol (Sig : Sigma.form E) := {
...
honest_verifier_ZK :
forall (s : Sig.S)(w : Sig.W)(e : E)(r : Sig.R)(t : Sig.T),
(Sig.V1 (Sig.P1(Sig.V0 (Sig.P0 s r w) e) r w) = true ->
(Sig.P1(Sig.V0 (Sig.P0 s r w) e) r w) =
Sig.simulator s (Sig.simMap s w e r) e) /\
Sig.simMapInv s w e (Sig.simMap s w e r) = r /\
Sig.simMap s w e (Sig.simMapInv s w e t) = t;
...
}.
Haines et al. [49] observed that the ﬂow of the proof for the
Terelius-Wikstr¨om mix net [13], [16], is particularly amenable
to machine-checking once sigma protocols are well handled.
First, we prove that the accepting transcripts allow us to ex-
tract witnesses satisfying some sub-statements, which follows
easily from the special soundness of the underlying sigma
protocol. Second, we prove that, given witnesses to these sub-
statements, we can produce a witness for the correctness of
the shufﬂe. The deﬁnition of soundness used for the Terelius-
Wikstr¨om mix net is a generalisation of special soundness
for sigma protocols; as with special soundness, it make no
reference to probabilities. In Section V we comment upon the
knowledge error implicit in the deﬁnition.
The limitation of Haines et al.’s work on sigma protocols is
that it only provides a formal proof for the interactive variant;
in practice, however, the non-interactive variant is what is used.
To make an interactive sigma protocol non-interactive the most
common approach is to use the Fiat-Shamir transform [33].
They claim that “While the Fiat-Shamir transform is out of
scope, our explicit formalisation for sigma protocols makes
clear what information needs to go into the transform. If the
transform is instantiated using the full transcript up to the
point of the challenge in our scheme then these issues are
avoided.” Our work on mix nets inherits this limitation since
it is based on an underlying sigma protocol.
IV. GENERIC CLASS OF ENCRYPTION SCHEMES
Anyone familiar with the proof of the Terelius-Wikstr¨om
mix net will see that it will work for a variety of cryptosystems,
though exactly which cryptosystems it will work for is not
always clear. Furthermore, for the optimised variant of the mix
net which is used in practice, no one has ever provided—to our
knowledge—a concrete classiﬁcation of the cryptosystems for
which it works. We provide the ﬁrst such classiﬁcation which,
while not exhaustive, does capture most/all of the encryption
schemes used with the mix net in practice.
Beyond the basic structure of an encryption scheme we
will require three additional properties. First, that the scheme
is homomorphic. Secondly, that the message space forms an
Abelian group and lastly that there exists a ﬁeld which behaves
“nicely” on the randomness space of the encryption scheme.
The homomorphic property allow us to take the product of
vectors of ciphertexts and know what the resulting ciphertext’s
11Sig.simMap is a family of such functions parameterised on s, w, e.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:14:48 UTC from IEEE Xplore.  Restrictions apply. 
1755
message and randomness will be (if we know the message and
randomness of the input). The commutative properties (of the
ring and the group) ensure that the product of the vector is
the same regardless of the order of elements in the vector of
ciphertexts; these two properties ensure that product of the
input of the mix net will be equal to the product of the output
of the mix net up to the randomness used to re-encrypt. Finally
the ﬁeld which behaves “nicely” on the randomness space will
be used as the challenge space for the proof of shufﬂe.
The only suggested encryption schemes, of which the au-
thors are aware, for the Terelius-Wikstr¨om mix net which are
not covered by our generic class are variants of the Paillier
encryption scheme [62]. It would seem most of the variants of
Paillier can be included in a generalisation of our class which
requires only that the overwhelming majority of the elements
(in what was previously a ﬁeld) are invertible.
A
2.
(Terelius-Wikstr¨om
Our description is fairly verbose; we will ﬁrst give it in
somewhat standard cryptographic notation and then give the
Coq code in the appendix. The reader will note that we
don’t describe any privacy property of the encryption scheme
but only algebraic properties. No privacy properties of the
scheme are required for the privacy of the proof of shufﬂe;
however, the scheme should satisfy indistinguishably under
chosen plaintext attack (IND-CPA) to provide privacy to the
overall mix net. Machine checking the privacy of the overall
mix net is out of the scope of this work.
Deﬁnition
compatible)
encryption scheme Σ is a tuple of PPT algorithms
(Σ.KeyGen, Σ.Enc, Σ.Dec, Σ.KeyMatch), such that:
• the ciphertext space C is a group under some operation,
the randomness space R is a ring (usually the integers
modulo n, where n is either prime or semi-prime) and
the ciphertext space is a module with respect
to the
randomness space;
• the message space M forms an Abelian group;
• the KeyGen algorithm deﬁnes a set of public and secret
key pairs (PK,SK) from which one is uniformly selected:
(P K ∈ PK, SK ∈ SK) ←r Σ.KeyGen();
• The Enc algorithm takes a public key P K, message m
and randomness r and returns a ciphertext CT from C:
that is, ∀P K ∈ PK,∀m ∈ M,∀r ∈ R, CT ∈ C ←
Σ.EncP K(m, r)
• The Dec algorithm takes a ciphertext CT ∈ C and SK ∈
SK and returns either a message m ∈ M or null (⊥):
that is, ∀CT ∈ C, Σ.DecSK(c) → m ∈ M or m = ⊥;
• Correctness: ∀P K, SK,
(P K ∈ PK, SK ∈
then ∀m ∈ M, r ∈
SK) ←r Σ.KeyGen(),
R, Σ.DecSK(Σ.EncP K(m, r)) = m;
• Homomorphic: ∀P K ∈ PK,∀m, m
(cid:3) ∈ R,
(cid:3)) ∗ Σ.EncP K(m, r) = Σ.EncP K(m ·
(cid:3) ∈ M,∀r, r
if
(cid:3)
Σ.EncP K(m
(cid:3));12
(cid:3)
m
, r + r
, r
• there exists a ﬁeld which forms a vector space with the ci-
phertext space. Further the ﬁeld and ring satisfy, for some
operator, the axioms in VectorSpaceModuleSameGroup.
12The exact operations represented by ∗, · and + are fairly ﬂexible.
Having deﬁned the encryption scheme, it is fairly straight-
forward to deﬁne both the computational and decisional vari-
ants of re-encryption, where the re-encryption is evidenced by
knowledge of the randomness used to re-encrypt.
A. Class preserved under Composition
Before we discuss the composability of encryption schemes,
we will ﬁrst take an aside. Ciphertexts are not the only thing
which one may want to mix securely; it is also common to
mix commitments. To deal with this, we deﬁne a module
called Mixable which sufﬁces for mixing but has less structure
than an encryption scheme. This module capture commitments
and other less structured objects which we may wish to be
mixed. The deﬁnition of the encryption scheme enforces that
all encryption schemes are Mixable but the inverse is not
necessarily true.
We have proved in Coq that given any Mixable, and any
natural number n, if you do n lots of the mixable pairwise, that
is you take the product groups of all the spaces, the result is
still within the class mixable. This is important because often
in practice in e-voting, and other applications, the senders
submit more than one ciphertext which needs to be shufﬂed
in parallel. That is, the input for m senders is n ciphertexts
each, these are shufﬂed so that the output is m packets of
n ciphertexts, the mix net hides which sender corresponds to
which output packet but the veriﬁability ensures that not only
are the underlying messages the same but that the ciphertext
groupings are preserved. We have also proved that given any
two Mixables if you do all operation pairwise this is still
a Mixable. Again, this is important because in practice it
is common to mix different schemes together; everlasting
privacy e-voting schemes in particular mix ciphertexts and
commitments together. Both of these results are not particu-
larly surprising, though the exact characterisation might be, but
a machine-checked proof of them is very useful in increasing
the applicability of the work since it allows more complicated
“mixables”, and hence mix nets to be automatically generated
from simpler mixables. The exact description of how this
works in Coq can been seen in our Coq source.
V. OPTIMISED TERELIUS-WIKSTR ¨OM MIX NET
Recall that the homomorphic properties of the encryption
systems in question ensure that if each of the mixers perform
a shufﬂe then the output is guaranteed to be a shufﬂe; it then
sufﬁces for each mix server to prove that it behaved correctly.
A proof of shufﬂe provides exactly that functionality.
The optimised Terelius-Wikstr¨om mix net is a relatively
straightforward, if verbose, zero-knowledge proof for the cor-
rectness of a shufﬂe of the initial input. More properly, it could
be called a zero-knowledge argument for the correctness of a
shufﬂe since an adversary can efﬁciently make proofs even
if the shufﬂe is not correct, provided that the adversary can
break the binding property of the commitment scheme used.
Of course, if the commitment scheme is chosen such that the
binding property is hard then the proof works as expected.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:14:48 UTC from IEEE Xplore.  Restrictions apply. 
1756
Private Input
(cid:3)
1, ..., e
N ) ∈ C, and a
(cid:3)
g, h, h1, ..., hN ∈ G, two vectors of
ciphertexts e = (e1, ..., eN ) ∈ C and
e(cid:3) = (e
permutation matrix commitment
c = (c1, ..., cN ).
: Permutation matrix
M = (mi,j) ∈ ZN×N
r = (r1, ..., rN ) ∈ ZN
q
q s.t.
mi,j
cj = grj
, and
i
(cid:3)
randomness r(cid:3) = (r
1, ..., r
s.t. e
i, j ∈ [1, N ].
N ) ∈ R
(cid:3)
(cid:3)
(cid:3)
i = eπ(i)Σ.EncP K(1, r
π(i)), for
, randomness
(cid:3)N
i=1 h
The (common) mistake of making the binding property
weak and hence breaking the mix net has occurred in the
SwissPost system for national elections in Switzerland and
many less signiﬁcant systems. It is easier to prove that the
commitments are binding in Coq and we have done so.
However, it is more challenging to prove that the commit-
ment parameters are generated correctly; we comment on the
feasibility of this in the future work section (VIII-A).
A. Intuition
Algorithm 1: Terelius-Wikstr¨om proof of shufﬂe
Common Input: Commitment parameters
q
randomly and hands
(cid:3)
N ) = Mu and then chooses