### Email Encryption and Decryption Process

1. The original email body is encrypted using Bob's public key (k+<sub>Bob</sub>). The one-time symmetric key (k) used for this encryption is also encrypted with Bob's public key.
2. The original email body is replaced with the encrypted body and the encrypted one-time key, i.e., the message body now contains E(k, body) and E(k+<sub>Bob</sub>, k).
3. The encrypted values can be declassified to be visible by the server without compromising Bob’s privacy.
4. Finally, the email is sent to the SMTP server, which then forwards it to the POP3 server.

### Reading Email

1. Bob retrieves his email from a POP3 server using the `MailReader` class.
2. After connecting to the server, the mail reader fetches each email and examines the label field in the header (e.g., "Label: bob").
3. The header information remains public, but the email body must be decrypted and reclassified according to the label field.
4. To decrypt the email, Bob's private key (k-<sub>Bob</sub>) is required. Since Bob has access to his own private key, it can be read from the file system. If another user attempts to impersonate Bob, the decryption will fail due to the lack of the private key.
5. Decrypting the email body with Bob's private key automatically raises the plaintext's security level to "bob." Now that the body is safely within the Jif sandbox, it can be decrypted without fear of leakage.
6. Finally, since the user running the mail reader is Bob, the email can be displayed on Bob's terminal.

### Tools for Policy and Application Development

#### 5.1 Policy Tools

Jif lacks a policy management infrastructure. We developed such an infrastructure consisting of two components:
- A runtime policy store that provides dynamic access to principals.
- A policy compiler that automatically generates principals and initializes the policy store.

We describe the policy language and compiler more fully and formally in a recent, prior work [12], including a proof of correctness and the security properties they maintain. In this work, we have made the policy infrastructure more robust and useful in a distributed system by binding principals to public/private key pairs.

**Policy Language Syntax:**

```plaintext
principal p ::= alice | bob | ...
declassiﬁer D ::= method1 | method2 | ...
delegation trust stmt ::= p -> p
policy stmts Stmt ::= (Del | Allow)*
Del ::= p -> p
Allow ::= p allows D(p) | p allows None
```

**Policy Compiler:**

The policy compiler interprets the policy specification, given in a separate file, and generates the associated Jif code. This code provides functions for creating and inserting principals into the policy store, as well as authorizing declassifiers trusted by the principals.

**Example:**

A security research lab could design a policy where all members are listed, and their public keys are certified by the lab’s certificate authority. Emails can be sent freely within the lab, while external emails are handled by a separate filter that imposes the lab’s policy (e.g., adding a disclaimer, limiting outgoing messages, auditing, etc.).

**Cryptographic Principals:**

Cryptography ensures data confidentiality and maintains the consistency and integrity of principals across Jif applications. This is achieved through:
- Encrypting email bodies.
- Associating principals with public keys (certificates).

We created a JPmail-specific certificate authority (CA) for certificate signing and verification. Public keys are validated using the CA's public key before being associated with a principal.

**Integration with the File System:**

To integrate the delegations and authorizations defined in our policy with the local file system, we augmented the Jif compiler’s runtime environment. We introduced a method to delegate from a `NativePrincipal` to a non-native principal, associating the user running the program with one of our internal principals. This association is authenticated by checking the user's signed certificate and the associated private key.

#### 5.2 Practical Tools for Software Engineering

**Integrated Development Environment (IDE):**

To address the limitations of the current development environment, we developed an IDE for Jif, integrating it with the open-source Eclipse platform. This IDE reduces the edit/compile/repair development cycle by quickly tagging syntax errors, missing exceptions, import statements, and security label violations. It also supports syntax highlighting and version control integration.

**Declassifiers:**

Declassifiers play a key role in providing security guarantees. They allow controlled declassification of information, which is essential for realistic security-typed applications. We built a library of declassifiers for use in Jif applications, including those for encryption and auditing. These declassifiers can be reused in other applications and serve as blueprints for developers.

### Evaluation

Based on our experience implementing the JPmail email client, we evaluate the use of Jif and suggest improvements for future developers. Preliminary timing measurements indicate that the overhead of Jif, especially for I/O-bound applications like email, is not significant. The main slowdown is caused by encryption, which could be improved by offloading it to the operating system, e.g., using IPsec.

**Security and Usability:**

Jif provides a strong basis for ensuring the correctness of security policy implementation. For example, the policy that "the body of an email should be visible only to the authorized senders and receivers" is enforced by examining the labels on emails and cross-checking with the policy file. The `smtp.MailSenderCrypto` class and the `readMessage` method ensure that the email body is relabeled and encrypted appropriately based on the recipient's policy.

**Sensitive Data:**

For sensitive data like keys and passwords, the analysis is simpler because they are not dynamically labeled. Passwords are labeled when a `MailSenderCrypto` object is created, and they can only be declassified through an MD5 filter. This prevents insecure practices like sending passwords in plaintext over the network.

However, Jif's security analysis has limitations. For example, the SMTP and POP3 protocols' password authentication, which uses nonces to prevent replay attacks, is not encoded in Jif labels. We must trust in the protocol's implementation to handle these aspects.

### Conclusion

JPmail demonstrates the effectiveness of Jif in building secure and usable applications. The tools and infrastructure we developed, including the policy compiler and IDE, significantly enhance the development process and ensure the correct implementation of security policies. Future work will focus on addressing the limitations and further improving the usability and security of Jif-based applications.