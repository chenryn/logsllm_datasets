---
author: Tim Anderson
category: 软件开发
comments_data:
- date: '2019-08-06 07:45:56'
  message: 读起来感觉怪怪的
  postip: 211.162.238.220
  username: 7th [Chrome 76.0|GNU/Linux]
- date: '2019-12-21 15:08:51'
  message: 翻译有点难受，不过排版好评。也挺通俗易解，点赞
  postip: 103.218.216.108
  username: 来自亚太地区的 Chrome 79.0|Windows 10 用户
- date: '2020-05-18 15:17:37'
  message: 最终哲学看不懂
  postip: 218.200.160.82
  username: 来自四川成都的 Chrome 81.0|Mac 10.13 用户
- date: '2020-07-29 15:03:41'
  message: 能不装逼码？有话好好说。
  postip: 58.213.65.74
  username: 来自江苏南京的 Chrome 81.0|Windows 10 用户
count:
  commentnum: 4
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 14639
date: '2019-03-29 01:15:04'
editorchoice: true
excerpt: 我们坚持使用 web 系统可以理解或不需要太多努力就能理解的特殊格式，而且对人类可读性特别有用的格式。每个都有各自的优缺点和适当的用例场景。
fromurl: https://www.zionandzion.com/json-vs-xml-vs-toml-vs-cson-vs-yaml/
id: 10664
islctt: true
largepic: /data/attachment/album/201903/29/011449ffhh8gydrzbthadg.jpg
permalink: /article-10664-1.html
pic: /data/attachment/album/201903/29/011449ffhh8gydrzbthadg.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 我们坚持使用 web 系统可以理解或不需要太多努力就能理解的特殊格式，而且对人类可读性特别有用的格式。每个都有各自的优缺点和适当的用例场景。
tags:
- XML
- JSON
- YAML
thumb: false
title: JSON、XML、TOML、CSON、YAML 大比拼
titlepic: true
translator: GraveAccent
updated: '2019-03-29 01:15:04'
---
![](/data/attachment/album/201903/29/011449ffhh8gydrzbthadg.jpg)
### 一段超级严肃的关于样本序列化的集合、子集和超集的文字
我是一名开发者，我读代码，我写代码，我写会写代码的代码，我写会写出供其它代码读的代码的代码。这些都非常火星语，但是有其美妙之处。然而，最后一点，写会写出供其它代码读的代码的代码，可以很快变得比这段文字更费解。有很多方法可以做到这一点。一种不那么复杂而且开发者社区最爱的方式是数据序列化。对于那些不了解我刚刚抛给你的时髦词的人，数据序列化是从一个系统获取一些信息，将其转换为其它系统可以读取的格式，然后将其传递给其它系统的过程。
虽然[数据序列化格式](https://en.wikipedia.org/wiki/Comparison_of_data_serialization_formats)多到可以埋葬哈利法塔，但它们大多分为两类：
* 易于人类读写，
* 易于机器读写。
很难两全其美，因为人类喜欢让我们更具表现力的松散类型和灵活格式标准，而机器倾向于被确切告知一切事情而没有二义性和细节缺失，并且认为“严格规范”才是它们最爱的口味。
由于我是一名 web 开发者，而且我们是一个创建网站的机构，我们将坚持使用 web 系统可以理解或不需要太多努力就能理解的特殊格式，而且对人类可读性特别有用的格式：XML、JSON、TOML、CSON 以及 YAML。每个都有各自的优缺点和适当的用例场景。
### 事实最先
回到互联网的早期，[一些非常聪明的家伙](https://en.wikipedia.org/wiki/Standard_Generalized_Markup_Language#History)决定整合一种让每个系统都能理解的标准语言，并创造性地将其命名为 标准通用标记语言   Standard Generalized Markup Language （简称 SGML）。SGML 非常灵活，发布者也很好地定义了它。它成为了 XML、SVG 和 HTML 等语言之父。所有这三个都符合 SGML 规范，可是它们都是规则更严格、灵活性更少的子集。
最终，人们开始看到非常小、简洁、易读且易于生成的数据的好处，这些数据可以在系统之间以编程的方式共享，而开销很小。大约在那个时候，JSON 诞生了并且能够满足所有的需求。而另一方面，其它语言也开始出现以处理更多的专业用例，如 CSON，TOML 和 YAML。
### XML：不行了
原本，XML 语言非常灵活且易于编写，但它的缺点是冗长，人类难以阅读、计算机非常难以读取，并且有很多语法对于传达信息并不是完全必要的。
今天，它在 web 上的数据序列化的用途已经消失了。除非你在编写 HTML 或者 SVG，否则你不太能在许多其它地方看到 XML。一些过时的系统今天仍在使用它，但是用它传递数据往往太重了。
我已经可以听到 XML 老爷爷开始在它们的石碑上乱写为什么 XML 是了不起的，所以我将提供一个小小的补充：XML 可以很容易地由系统和人读写。然而，真的，我的意思是荒谬的，很难创建一个可以规范的读取它的系统。这是一个简单美观的 XML 示例：
```
Gambardella, Matthew
XML Developer's Guide
Computer
44.95
2000-10-01
An in-depth look at creating applications
with XML.
```
太棒了。易于阅读、理解、写入，也容易编码一个可以读写它的系统。但请考虑这个例子：
```
b"> ]>
" />
b b 
  ?> c --> d
```
这上面是 100% 有效的 XML。几乎不可能阅读、理解或推理。编写可以使用和理解这个的代码将花费至少 36 根头发和 248 磅咖啡渣。我们没有那么多时间或咖啡，而且我们大多数老程序员们现在都是秃头。所以，让它活在我们的记忆里，就像 [css hacks](https://www.quirksmode.org/css/csshacks.html)、[IE 6 浏览器](http://www.ie6death.com/) 和[真空管](https://en.wikipedia.org/wiki/Vacuum_tube)一样好了。
### JSON：并列聚会
好吧，我们都同意，XML = 差劲。那么，好的替代品是什么？ JavaScript 对象表示法   JavaScript Object Notation ，简称 JSON。JSON（读起来像 Jason 这个名字） 是 Brendan Eich 发明的，并且得到了伟大而强力的 [JavaScript 意见领袖](https://twitter.com/BrendanEich/status/773403975865470976) Douglas Crockford 的推广。它现在几乎用在任何地方。这种格式很容易由人和机器编写，按规范中的严格规则[解析](https://en.wikipedia.org/wiki/Parsing#Parser)也相当容易，并且灵活 —— 允许深层嵌套数据，支持所有的原始数据类型，及将集合解释为数组或对象。JSON 成为了将数据从一个系统传输到另一个系统的事实标准。几乎所有语言都有内置读写它的功能。
JSON语法很简单。方括号表示数组，花括号表示记录，由冒号分隔的两个值分别表示属性或“键”（在左边）、值（在右边）。所有键必须用双引号括起来：
```
  {
    "books": [
      {
        "id": "bk102",