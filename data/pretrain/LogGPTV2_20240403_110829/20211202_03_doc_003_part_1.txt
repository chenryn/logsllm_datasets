Advanced SQL
02 — Standard and Non-Standard Data Types
Torsten Grust
Universität Tübingen, Germany
1 ┆ Data Types in (Postgre)SQL
The set of supported data types in PostgreSQL is varied:1
SELECT string_agg(t.typname, ' ') AS "data types"
FROM pg_catalog.pg_type AS t
WHERE t.typelem = 0 AND t.typrelid = 0;
┌────────────────────────────────────────────────────────┐
│ data types |
├────────────────────────────────────────────────────────┤
| bool bytea char int8 int2 int4 regproc text oid tid ␍|
| oid tid xid cid json xml pg_node_tree pg_ddl_command ␍|
| smgr path polygon float4 float8 abstime reltime ␍|
┊ tinterval unknown circle money macaddr inet cidr ⋯ ┊
└────────────────────────────────────────────────────────┘
1 See https://www.postgresql.org/docs/9.6/static/datatype.html
2 ┆ SQL Type Casts
Convert type of value ‹e› to ‹τ› at runtime via a type cast:
CAST (‹e› AS ‹τ›) ⎫ (SQL standard)
‹e› :: ‹τ› ⎬ equivalent (PostgreSQLism, cf. FP)
‹τ›(‹e›) ⎭ (if ‹τ› valid func name)
Type cast can fail at runtime.
⚠
SQL performs implicit casts when the required target type
is unambiguous (e.g. on insertion into a table column):
INSERT INTO T(a,b,c,d) VALUES (6.2, NULL, 'true', '0')
! ! ! !
-- implicitly casts to: int text boolean int
Literals (Casts From text)
SQL supports literal syntax for dozens of data types in
terms of casts from type text:
CAST ('‹literal›' AS ‹τ›) ⎫ succeeds if ‹literal› has a
'‹literal›' :: ‹τ› ⎬ valid interpretation as ‹τ›
‹τ› '‹literal›' ⎭ (without cast ⇒ type text)
Embed complex literals (e.g., dates/times, JSON, XML,
geometric objects) in SQL source.
Casts from text to ‹τ› attempted implicitly if target
type ‹τ› known. Also vital when importing data from text
or CSV files (input conversion). ✎
3 ┆ Text Data Types
char -- ≡ char(1)
char(‹n›) -- fixed length, blank (␣) padded if needed
varchar(‹n›) -- varying length ≤ n characters
text -- varying length, unlimited
Length limits measured in characters, not bytes.
(PostgreSQL: max size ≅ 1 Gb. Large text is “TOASTed.”)
Length limits are enforced:
1. Excess characters (other than ␣) yield runtime errors.
2. Explicit casts truncate to length ‹n›.
char(‹n›) always printed/stored using ‹n› characters: pad
with ␣. Trailing blanks removed before computation. ✎
⚠
4 ┆ NUMERIC:2 Large Numeric Values with Exact Arithmetics
scale
456
numeric(‹precision›, ‹scale›) 1234567.890
7────8────9
precision (# of digits)
Shorthand: numeric(‹precision›,0) ≡ numeric(‹precision›).
numeric ≡ "∞ precision” (PostgreSQL limit: 100000+).
Exact arithmetics, but computationally heavy. ✎
Leading/trailing 0s not stored ⇒ variable-length data.
2 Synonymous: decimal.
5 ┆ Timestamps and Time Intervals
interval t₂ - t₁
time
timestamp t₁ timestamp t₂
Types: timestamp ≡ (date, time). Casts between types:
timestamp➝time/date ✔, date➝timestamp assumes 00:00:00.
Optional timezone support: ‹τ› with time zone or ‹τ›tz.
Type interval represents timestamp differences.
Resolution: timestamp/time/interval: 1 µs, date: 1 day.
Date/Time Literals: PostgreSQL
Literal input and output: flexible/human-readable ✎,
affected by SET datestyle='{German,ISO},{MDY,DMY,YMD}'
)─────+────, )─────+────,
output input
timestamp literal ≡ '‹date literal›␣‹time literal›'
interval literal (fields optional, ‹s› may be fractional)
≡ '‹n›years ‹n›months ‹n›days ‹n›hours ‹n›mins ‹s›secs'
Special literals:
timestamp: 'epoch', '[-]infinity', 'now'
date: 'today', 'yesterday', 'tomorrow'
Computing with Time
Timestamp arithmetic via +, - (interval also *, /):
SELECT ('now'::timestamp - 'yesterday'::date)::interval
interval
1 day 17:27:47.454803
PostgreSQL: Extensive library of date/time functions
including: ✎
timeofday() ( yields text)
⚠
extract(‹field› from ･)
make_date(･,･,･), make_time(⋯), make_timestamp(⋯)
comparisons (=, > (shift left/right), get_bit(･,･), set_bit(･,･)
String-like operations: || (concatenation), length(･),
bit_length(･), position(･ in ･), --.
8 ┆ Binary Arrays (BLOBs)
Store binary large object blocks (BLOBs; /, ♫♬ in column B
of type bytea) in-line with alpha-numeric data. BLOBs remain
uninterpreted by DBMS:
Table T
(cid:42247) K B "# bytea P (cid:42247)
⋮ ⋮ ⋮
kᵢ / pᵢ
kⱼ ♫♬ pⱼ
⋮ ⋮ ⋮
Typical setup:
BLOBs stored alongside identifying key data (column K).
Additional properties (meta data, column(s) P) made
explicit to filter/group/order BLOBs.
Encoding/Decoding BLOBs ✎
Import/export bytea data via textual encoding (e.g.,
base64) or directly from/to binary files:
base64
decoder encode(･,'base64') ──┬───────┬──
♬♫♬♫♩♬♫♩♪♩♫ 'UklGRjC6DAB ⋯ │ B │ ⋯
♫♪♩♬♩♩♪♫♪♩♪ XQVZFZm10I⋯' ──┼───────┼──
base64 decode(･,'base64') ⋯ │ ♫♬ │ ⋯
7────8────9 encoder 7────8────9 ⦙ ⦙
binary data base64 text string 7────8────9
bytea column
UDF read_blob(･), lo_import(･)
File I/O performed by DBMS server (paths, permissions).
⚠
9 ┆ Ranges (Intervals)
Given lower and/or upper bounds ‹ℓ›, ‹u› of an ordered type
‹τ› ∈ {int4,int8,num(eric),timestamp,date}, construct range
literals of type ‹τ›range via
[‹ℓ›,‹u›] ‹ℓ› ≤ x ≤ ‹u› ⁅──────────⁆
[‹ℓ›,‹u›) ‹ℓ› ≤ x  p r₃ <@ r₁ contains, contained by
┊ ┊ ┊ r₁ -|- r₂ is adjacent to