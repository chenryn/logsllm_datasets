### DEF CON USA 2019
**Alexandre Borges – Malware and Security Researcher**

#### Using WinDbg for .NET Malware Analysis

WinDbg is an excellent tool for analyzing .NET malware, providing a deeper understanding of the code or at least a basic comprehension.

**Installing SOSEX Extension:**
- Download the appropriate version from:
  - 64-bit: [http://www.stevestechspot.com/downloads/sosex_64.zip](http://www.stevestechspot.com/downloads/sosex_64.zip)
  - 32-bit: [http://www.stevestechspot.com/downloads/sosex_32.zip](http://www.stevestechspot.com/downloads/sosex_32.zip)
- Unzip the file and copy it to your WinDbg installation directory, e.g., `C:\Program Files (x86)\Windows Kits\10\Debuggers\x64` or `C:\Program Files (x86)\Windows Kits\10\Debuggers\x86`.

**Attaching WinDbg:**
- Attach WinDbg to either a running application (the .NET malware) or a saved dump.
- Note that the Common Language Runtime (CLR) process is composed of:
  - System Domain
  - Shared Domain
  - Default Domain
- Code running in one domain cannot access resources in another application domain.

#### Analyzing .NET Malware Execution
- **Entry Point:** 
  - Use `dumpbin /headers malware1.exe` to find the entry point (e.g., `0x25B05A`).
  - The execution flow is as follows:
    - Malware execution starts.
    - Windows loaders find the PE’s entry point.
    - Jump to `mscoree.dll`.
    - Call to `CorExeMain`.
    - Return to the assembly’s entry point.
  - Disassemble `CorExeMain()` from the start.
  - Alternatively, use `sxe ld mscorwks.dll ; g` to set a breakpoint.

#### Listing CLR Domains
- List the domains of the CLR process as previously discussed.

#### Analyzing Assemblies
- Used assemblies provide insights into the application.

#### Checking Managed Exceptions
- Check managed exceptions in each thread.
- Switch to thread 5.
- Managed threads: 0, 2, 5, 10, and 14.

#### Managed Stack Trace
- Check the managed stack trace for thread 0.

#### Managing Threads
- Get a list of managed threads using the `-special` option for additional information.
- Check the unmanaged stack trace for the current thread.
- COM Threading Model:
  - STA: Single Thread Apartment
  - MTA: Multi Thread Apartment
- Thread state:
  - `0x0`: Newly initialized thread.
  - `0x020`: Can enter a Join.
  - `0x200`: Background thread.

#### Disassembling JIT Code
- Check if the instruction pointer address belongs to JIT code and find the Method Descriptor.
- Disassemble the code.

#### Analyzing MethodDesc and EEClass
- Check the managed stack.
- Display information about the `MethodDesc` structure.
- Dump the `MethodDesc` structure at the given address.
- Method definition: Metadata token consists of a Table Reference (1 byte) and a Table Index (3 bytes).

#### Displaying EEClass Structure
- Display information about the `EEClass` structure associated with a type.

#### Dumping Object Content
- Dump the object content, which in this case is a value type.

#### Method Table Information
- Dump information about the Method Table.
- Display a list of all methods.
- PreJIT compiled code.
- Type definition: `EEClass` data structure is similar to the method table but stores less frequently used fields.

#### Module and Assembly Information
- Dump information about a specific module.
- Data accessed and/or updated less frequently.
- Data accessed and/or updated very frequently.
- Data used to help COM operations.

#### MethodTable and EEClass Structures
- Display the `MethodTable` and `EEClass` structures.

#### Compilation Types
- PreJIT: pre-compiled code.
- JIT: compiled code.
- NONE: code not yet compiled by the JIT.

#### Setting Breakpoints and Displaying Structures
- Set a breakpoint on code that is not JIT yet.
- Display the `MethodTable` and `EEClass` structures of `test.Client.Verbinden` method.
- Display the `MethodDesc` structure information.

#### Dumps and Stack Walking
- Dump arrays.
- Perform stack walking and display managed objects from the current thread.

#### Value Types and Reference Types
- Value Type: 1
- Reference: 0
- Method Table of the field.

#### Garbage Collection Overview
- During allocation requests:
  - If the maximum expected memory for Gen 0 is exceeded, collect non-rooted objects and promote rooted objects to Gen 1.
  - The same approach applies to Gen 1 and Gen 2.
  - If Gen 2 is exceeded, the GC adds a new segment to Gen 2.
  - Objects in Gen 0 and Gen 1 are short-lived.
  - Reference chain to the object from the stack and handle tables.

#### Finalization Queue
- The Finalization Queue contains objects with finalizers (`Finalize()`).
- When an object in the Finalization Queue becomes rootless, the GC moves it to the f-reachable queue, where it is considered garbage but still alive.

#### Heap Fragmentation
- Excessive or long-time pinned handles can cause CLR heap fragmentation.

#### Process and Heap Analysis
- Dump the process for later analysis.
- Look for strings in the managed heap.
- Show information about locks.
- Make it easier to find deadlocked threads.
- Display information about a type or variable.
- Some malware samples fail due to deadlocks. Use the `DumpObj` command to find additional information about the thread.
- CCW: COM Callable Wrapper.
- RCW: Runtime Callable Wrapper, which intercepts, manages the object’s lifetime, and transitions between managed and native code.

#### Synchronization Techniques
- Events work as synchronization objects.
- When an event is signaled, the waiting thread (using `WaitForSingleObject()`) starts its execution.
- Auto reset: Automatically resets the event to a non-signaled state after releasing the thread.
- Manual reset: The event remains signaled until manually reset.
- Other synchronization techniques include Semaphores, ReaderWriterLock, and Mutex.
- Show specific-object handle information.

#### Investigating the Current Stack
- Always investigate the current stack for interesting strings.

#### Heap and Method Table Analysis
- Use `!DumpHeap -stat` to get objects and their metadata stored in the heap.
- Limit the output to the specified type name.
- Display information about the method table.

#### Boxing and Unboxing
- Boxing: Converts a value type to an object reference.
- Unboxing: Converts an object reference back to a value type.
- Use `!DumpIL` to display the IL instructions of a method.

#### Finding Valuable Strings
- Use `!DumpHeap -strings` to find valuable strings.
- Unrecognized strings may be related to banks.

#### Conclusion
- Surprise... is it malicious? 
- For more information, visit: [https://github.com/alexandreborges/malwoverview](https://github.com/alexandreborges/malwoverview)

**Acknowledgments:**
- DEF CON staff for their kindness.
- Attendees for reserving time to attend the talk.
- "Security is like a drunk: while walking back-and-forth, he always proceeds halfway through the remaining distance, but he never gets there."
- Remember: the best part of life is people.

**About Alexandre Borges:**
- Malware and Security Researcher.
- Speaker at various conferences including DEF CON USA 2018, DEF CON China 2019, CONFidence Conference 2019 (Poland), HITB 2019 Amsterdam, BSIDES 2019/2018/2017/2016, H2HC 2016/2015, BHACK 2018.
- Consultant, Instructor, and Speaker on Malware Analysis, Memory Analysis, Digital Forensics, and Rootkits.
- Reviewer member of The Journal of Digital Forensics, Security, and Law.
- Referee on Digital Investigation: The International Journal of Digital Forensics & Incident Response.

**Contact Information:**
- Twitter: [@ale_sp_brazil](https://twitter.com/ale_sp_brazil), [@blackstormsecbr](https://twitter.com/blackstormsecbr)
- Website: [http://www.blackstormsecurity.com](http://www.blackstormsecurity.com)
- LinkedIn: [http://www.linkedin.com/in/aleborges](http://www.linkedin.com/in/aleborges)
- E-mail: [PI:EMAIL]

**Blackstorm Security:**
- We offer some of the best training courses around the world.

**Thank you for attending my talk!**