漏洞特征： SPRING_ENDPOINT  
这个类是一个Spring的控制器。所有方法的注解都在RequestMapping（还有一些简化注解在GetMapping, PostMapping,
PutMapping, DeleteMapping, 和
PatchMapping），这些方法都能被远程访问到。这些类应该被严格的分析，以保证暴露给远程的方法是安全的，不会被攻击者轻易攻击。
# Spring关闭 CSRF保护
漏洞特征： SPRING_CSRF_PROTECTION_DISABLED  
对于标准的web应用程序来讲，关闭Spring的CSRF保护显然是不安全的。  
禁用此保护的有效使用场景是服务器暴露一个可以改变状态的接口，这个接口仅可以被非浏览器操控。
**不安全的配置**
    @EnableWebSecurity
    public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
        @Override
        protected void configure(HttpSecurity http) throws Exception {
            http.csrf().disable();
        }
    }
引用：  
[Spring Security Official Documentation: When to use CSRF
protection](https://docs.spring.io/spring-security/site/docs/current/reference/html/csrf.html#when-to-use-csrf-protection)  
[OWASP: Cross-Site Request Forgery](https://docs.spring.io/spring-security/site/docs/current/reference/html/csrf.html#when-to-use-csrf-protection)  
[OWASP: CSRF Prevention Cheat Sheet](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet)  
[CWE-352: Cross-Site Request Forgery
(CSRF)](https://cwe.mitre.org/data/definitions/352.html)
# Spring 中不受CSRF限制的RequestMapping
漏洞特征： SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING  
通过默认的映射所有的HTTP请求方法都会被RequestMapping注解。可是，http请求中的GET, HEAD, TRACE,
和OPTIONS（可能会导致tokens被泄露）方法不会默认开启csrf保护。所以，被RequestMapping注解的可以改变状态的方法和 POST,
PUT, DELETE, 或者 PATCH这些http请求方法都会受到csrf攻击。
有漏洞的代码：
    @Controller
    public class UnsafeController {
        @RequestMapping("/path")
        public void writeData() {
            // State-changing operations performed within this method.
        }
    }
解决方案（Spring Framework 4.3和更新的版本）
    @Controller
    public class SafeController {
        /**
         * For methods without side-effects use @GetMapping.
         */
        @GetMapping("/path")
        public String readData() {
            // No state-changing operations performed within this method.
            return "";
        }
        /**
         * For state-changing methods use either @PostMapping, @PutMapping, @DeleteMapping, or @PatchMapping.
         */
        @PostMapping("/path")
        public void writeData() {
            // State-changing operations performed within this method.
        }
    }
解决方案（在Spring Framework 4.3之前的版本）
    @Controller
    public class SafeController {
        /**
         * For methods without side-effects use either
         * RequestMethod.GET, RequestMethod.HEAD, RequestMethod.TRACE, or RequestMethod.OPTIONS.
         */
        @RequestMapping(value = "/path", method = RequestMethod.GET)
        public String readData() {
            // No state-changing operations performed within this method.
            return "";
        }
        /**
         * For state-changing methods use either
         * RequestMethod.POST, RequestMethod.PUT, RequestMethod.DELETE, or RequestMethod.PATCH.
         */
        @RequestMapping(value = "/path", method = RequestMethod.POST)
        public void writeData() {
            // State-changing operations performed within this method.
        }
    }
引用：  
Spring Security Official Documentation: Use proper HTTP verbs (CSRF
protection))  
OWASP: Cross-Site Request Forgery  
[OWASP: CSRF Prevention Cheat Sheet](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet)  
[CWE-352: Cross-Site Request Forgery
(CSRF)](https://cwe.mitre.org/data/definitions/352.html)
# 潜在的注入（custom）
漏洞特征： CUSTOM_INJECTION  
扫描工具所识别的函数存在注射问题。应验证输入并争取转义。
有漏洞的代码：
    SqlUtil.execQuery("select * from UserEntity t where id = " + parameterInput);
wiki在线有很详细的教程关于[如何配置custom](https://github.com/find-sec-bugs/find-sec-bugs/wiki/Custom-signatures)
引用：  
[WASC-19: SQL
Injection](http://projects.webappsec.org/w/page/13246963/SQL%20Injection)  
[OWASP: Top 10
2013-A1-Injection](https://www.owasp.org/index.php/Top_10_2013-A1-Injection)  
[OWASP: SQL Injection Prevention Cheat
Sheet](https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet)  
[OWASP: Query Parameterization Cheat Sheet
](https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet)  
[CAPEC-66: SQL Injection](http://capec.mitre.org/data/definitions/66.html)  
[CWE-89: Improper Neutralization of Special Elements used in an SQL Command
('SQL Injection')](http://cwe.mitre.org/data/definitions/89.html)
# 潜在的sql注入
漏洞特征：SQL_INJECTION  
输入进sql查询的数据应该通过严格的检查。在预编译中绑定参数可以更容易的缓解sql注入带来的危害。或者，每一个参数应该被正确的转义。  
有漏洞的代码：
    createQuery("select * from User where id = '"+inputId+"'");
解决方案：
    import org.owasp.esapi.Encoder;
    createQuery("select * from User where id = '"+Encoder.encodeForSQL(inputId)+"'");
引用（sql注入）  
[WASC-19: SQL
Injection](http://projects.webappsec.org/w/page/13246963/SQL%20Injection)  
[CAPEC-66: SQL Injection](http://capec.mitre.org/data/definitions/66.html)  
[CWE-89: Improper Neutralization of Special Elements used in an SQL Command
('SQL Injection')](http://cwe.mitre.org/data/definitions/89.html)  
[OWASP: Top 10
2013-A1-Injection](https://www.owasp.org/index.php/Top_10_2013-A1-Injection)  
[OWASP: SQL Injection Prevention Cheat
Sheet](https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet)  
[OWASP: Query Parameterization Cheat
Sheet](https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet)
# 在Turbine中潜在的sql注入
漏洞特征：SQL_INJECTION_TURBINE  
输入进sql查询的数据应该通过严格的检查。在预编译中绑定参数可以更容易的缓解sql注入带来的危害。或者，每一个参数应该被正确的转义。  
Turbine API 提供DSL在java代码中构建查询  
有漏洞的代码：
    List BasePeer.executeQuery( "select * from Customer where id=" + inputId );
解决方案（使用Criteria DSL）：
    Criteria c = new Criteria();
    c.add( CustomerPeer.ID, inputId );
    List customers = CustomerPeer.doSelect( c );
解决方案（使用特殊方法）：
    Customer customer = CustomerPeer.retrieveByPK( new NumberKey( inputId ) );
解决方法（使用OWASP提供的编码方法）
    import org.owasp.esapi.Encoder;
    BasePeer.executeQuery("select * from Customer where id = '"+Encoder.encodeForSQL(inputId)+"'");
引用(Turbine)：  
[Turbine Documentation: Criteria
Howto](https://turbine.apache.org/turbine/turbine-2.1/howto/criteria-howto.html)  
引用（sql注入）  
[WASC-19: SQL
Injection](http://projects.webappsec.org/w/page/13246963/SQL%20Injection)  
[CAPEC-66: SQL Injection](http://capec.mitre.org/data/definitions/66.html)  
[CWE-89: Improper Neutralization of Special Elements used in an SQL Command
('SQL Injection')](http://cwe.mitre.org/data/definitions/89.html)  
[OWASP: Top 10
2013-A1-Injection](https://www.owasp.org/index.php/Top_10_2013-A1-Injection)  
[OWASP: SQL Injection Prevention Cheat
Sheet](https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet)  
[OWASP: Query Parameterization Cheat
Sheet](https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet)
# 潜在的SQL/HQL注入(Hibernate)
漏洞特征：SQL_INJECTION_HIBERNATE  
输入进sql查询的数据应该通过严格的检查。在预编译中绑定参数可以更容易的缓解sql注入带来的危害。或者，可以使用Hibernate的Criteria。  
有漏洞的代码：
    Session session = sessionFactory.openSession();
    Query q = session.createQuery("select t from UserEntity t where id = " + input);
    q.execute();
解决方案：
    Session session = sessionFactory.openSession();
    Query q = session.createQuery("select t from UserEntity t where id = :userId");
    q.setString("userId",input);
    q.execute();
动态查询参数法解决方案（Hibernate Criteria）
    Session session = sessionFactory.openSession();
    Query q = session.createCriteria(UserEntity.class)
        .add( Restrictions.like("id", input) )
        .list();
    q.execute();
引用(Hibernate)  
[Hibernate Documentation: Query
Criteria](https://docs.jboss.org/hibernate/orm/3.3/reference/en/html/querycriteria.html)  
[Hibernate Javadoc: Query
Object](https://docs.jboss.org/hibernate/orm/3.2/api/org/hibernate/Query.html)  
[HQL for pentesters: Guideline to test if the suspected code is
exploitable.](http://blog.h3xstream.com/2014/02/hql-for-pentesters.html)  
引用（sql注入）  
[WASC-19: SQL
Injection](http://projects.webappsec.org/w/page/13246963/SQL%20Injection)  
[CAPEC-66: SQL Injection](http://capec.mitre.org/data/definitions/66.html)  
[CWE-89: Improper Neutralization of Special Elements used in an SQL Command
('SQL Injection')](http://cwe.mitre.org/data/definitions/89.html)  
[OWASP: Top 10
2013-A1-Injection](https://www.owasp.org/index.php/Top_10_2013-A1-Injection)  
[OWASP: SQL Injection Prevention Cheat
Sheet](https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet)  
[OWASP: Query Parameterization Cheat
Sheet](https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet)
# 潜在的sql/JDOQL注入(JDO)
漏洞特征：SQL_INJECTION_JDO  
输入进sql查询的数据应该通过严格的检查。在预编译中绑定参数可以更容易的缓解sql注入带来的危害。  
有漏洞的代码：
    PersistenceManager pm = getPM();
    Query q = pm.newQuery("select * from Users where name = " + input);
    q.execute();