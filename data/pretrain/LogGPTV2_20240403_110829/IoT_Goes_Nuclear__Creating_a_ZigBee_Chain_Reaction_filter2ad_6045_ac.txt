5.2. Persistence of code execution in the Philips Hue
system
We explored two methods to achieve persistence in code
execution
1) Exploiting a software vulnerability.
2) Using the ZigBee OTA feature.
The Philips Hue lightbulbs are very hard targets for ﬁnding
and exploiting software vulnerabilities. They use processors
with Harvard architecture that does not allow for code
execution from memory. We are forced to use only ROP
(Return-oriented programming) attacks that require knowl-
edge of the code and customization for each model. Instead
we looked at the possibility of exploiting the ZigBee Over-
the-Air Upgrading Cluster standard [19]. As this standard
allows a lot of customization for different vendors, we
wanted to record and analyze a Philips Hue software update.
Unfortunately there was no software update available to any
of the models we had in our possession. We wrote a python
script using our ZLL testing framework that allowed us to
impersonate a lightbulb and to change our version, MAC
address and so on. Searching online we found out several
different older Hue models that had software updates in the
past. By looking at recordings for the models we had, we
found the translation between the Human readable software
version and the hex code that the OTA standard requires to
send over the air. For example in our Lux model the software
version is 66012040 – 66 0 12040 – 0x42 0x00 0x2f08
– 0x42 0x00 0x2f 0x08. Using the API we instructed the
bridge to complete the OTA process with our impersonation
code. The ﬁrmware image that we recorded was not de-
pendent on our impersonated lightbulb MAC address. This
brought us to the conclusion that the software is protected by
a single key that is shared at least between all the lamps from
a speciﬁc model. Implementing asymmetric cryptography
is currently uncommon in this type of products (as can
be seen in several OTA implementations such as Atmel’s
BitCloud [23] and Texas Instruments’ Crypto-Bootloader
[24]). Assuming that only symmetric cryptography is used,
recovering the encryption and authentication keys from one
Philips Hue lightbulb will allow us to do a software update
to any other lightbulb (at least from the same model) and
thus load our own malicious code.
5.2.1. Understanding the Philips OTA image structure.
As there were no software update yet available for one of
the new models2, we looked for a way to create our own
2. Firmware updates for these bulbs were released before this paper was
published, but at the time this work was completed they were not available.
201
OTA image. We used our impersonation code to retrieve all
available OTA image ﬁles for the older models. We then
noticed that the new models rejected the old ﬁrmwares. We
have reversed engineered the Philips OTA image structure.
With some trial and error we manipulated an old ﬁrmware
image, to be compatible with the hardware type and image
size range expected by the new Atmel model. As the light
uses the external SPI ﬂash to store the update Image, we
used a SPI sniffer to record and understand the commu-
nication between the processor and ﬂash during the OTA
process. To start an OTA image veriﬁcation process all we
need is to set a ﬂag on the ﬂash and put the image in a
speciﬁc offset in the ﬂash. During power on, the processor
checks the ﬂag, and if it is set, it starts to read and then
verify the OTA image.
5.2.2. Extracting encryption and signature keys. To be
able to create a valid malicious software update, we had
to understand the cryptographic primitives used to encrypt
and sign the update ﬁrmware, and extract the keys used. As
mentioned in [9], Philips had set all of the ATMegaRF anti
debug fuses, to disable external reading of the program and
keys saved internally. In section 6 we describe how we were
able to break Philips bootloader using side-channel power
analysis.
5.3. Lateral movement - spreading the worm
To be able to carry out a software update on a lightbulb,
we must ﬁrst be on the same network and share the same
key. This can be done either by snifﬁng the Touchlink pro-
tocol when new lamps are added, or by forcing the lightbulb
to join our own network. As the ZLL secret master key was
leaked, we can use the Touchlink commissioning protocol to
take over lamps. However we are limited by the protocol’s
proximity check mechanism which forces us to be very close
to the attacked light (as discussed in section 3.2.1). Previous
methods to cause a key exchange in the network or to force
the light to join a new network required either very close
physical proximity or a customized hardware with much
stronger transmission power [7], [8], and in that case we
will not be able to use one standard light to infect another
light. To implement our worm we have to ﬁnd a way to
do this from a long distance using normal power levels.
In section 7 we show how we accomplished this with the
Philips Hue lamps.
6. Breaking Philips’ cryptographic bootloader
with Correlation Power Analysis
6.1. Counter with CBC-MAC encryption mode
CCM [25] is an authenticated encryption mode used to
sign and encrypt data. It is used in IPSEC [26], TLS 1.2 [27]
and the IEEE 802.15.4 [28] upon which ZigBee is based. As
seen in Figure 7 the inputs to the CCM mode are a nonce
N, data that is authenticated but not encrypted A, and plain
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:22:14 UTC from IEEE Xplore.  Restrictions apply. 
data that is encrypted and authenticated P. Both A and P are
signed using CBC MAC, where the data to be authenticated
is shown as B.
To encrypt data the nonce is ﬁrst combined with an
incrementing counter, giving the input S to the ECB mode
AES encryption to create a CTR (counter based) key stream
Y. This key stream Y is XORd with P and the resulting CBC
MAC tag to encrypt these two blocks. It is important to note
that the same key is used both for the CBC MAC and CTR
encryption.
6.2. Differential Power Analysis (DPA)
Side channel power analysis measures the power con-
sumed by a digital device as it performs operations. With
this attack it is possible to infer something about the data
being processed by the device, which was ﬁrst demonstrated
as a method of breaking cryptographic algorithms by Kocher
et al. [29].
Side channel power analysis gives us an ability to de-
termine certain secret ‘intermediate’ values. For example
knowing the input and the output of one of the SBOX
operations enables us to recover part of the key
While DPA may refer to both a speciﬁc technique and
a general ﬁeld, we will use DPA in this paper to refer to
the original difference of means method of partitioning a
number of power traces into two different sets from [29].
The difference of means relies on splitting power traces
into two sets: one where an assumed intermediate bit is ‘1’,
and another set where the assumed intermediate value is ‘0’.
By subtracting the means of these sets, we can determine the
true value of an intermediate bit. This is shown in practice
in Figure 6, which shows the recovery of one byte of an
AES-CTR output, with the use of the XOR operation. At a
speciﬁc point (around sample 6952 here), we do a threshold
if the difference is positive or negative. It can be seen from
the ﬁgure the difference is very pronounced and in practice
can be reliably recovered. This is then simply repeated for
all 16 bytes.
Note the difference of means shows such a large spike
only at the moment in time the manipulation is occurring.
Other times show no noticeable difference – notice for
example samples 6990 and onward in Figure 6. In practice
it is possible to recover this from a black-box device with
unknown timings, such as we accomplished in this paper.
6.3. Correlation Power Analysis (CPA)
The subsequently published CPA attack by Brier et al.
[30] uses a more complex leakage assumption, such as
the one that the number of bits set to ‘1’ on a data bus
has a linear relationship with the power consumption at
the moment on time the data is manipulated. Rather than
requiring an attack to determine a single bit at a time, the
CPA attack makes it possible to rapidly determine the value
of an entire byte. The CPA attack is especially effective
when targeting the output of non-linear functions, such as
the output of the S-Box operation in AES.
202
Figure 6. Bitwise DPA attack on AES-CTR ‘pad’, where all 8 bits are
recovered.
Figure 7. CCM encryption mode
This work will use both the original bitwise difference-
of-means DPA attack for determining the result of certain
XOR operations (such as the AES-CTR ‘key stream’), and
the byte-wise CPA attack for breaking the AES hardware
accelerator.
6.4. Understanding Philips OTA image crypto-
graphic primitives
Our initial assumption was that Philips used the CCM
encryption mode for the OTA image. This enables them to
reuse the CCM code from the Zigbee encryption, which was
also used in an old TI cryptographic bootloader implemen-
tation, that could have been used as a reference to their
implementation in the older TI based models.
When we started this work, the newer bulbs based on
the Atmel ATMega2564RFR2 did not have an OTA update
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:22:14 UTC from IEEE Xplore.  Restrictions apply. 
released. Instead we used an image for the CC2530 bulbs
as a reference. To perform the bootload process, the new
(encrypted) image is programmed in the SPI ﬂash. On boot
the bulb will ﬁrst check a ﬂag to indicate if an OTA update
is pending; if so, it reads the entire image to verify the
signature. Then it reads the image a second time to actually
perform the ﬂash programming. We determined this based
on (1) modifying the image – which would invalidate the
signature – causes the bulb to perform only the ﬁrst read,
and (2) the second read-through contains gaps which align
with the expected ﬂash memory page-erase process required
when actually programming.
As we
knew the
leakage mode
for
engine, we
the AT-
Mega2564RFR2 AES hardware
targeted
the newer hardware. The CC2530 OTA upgrade ﬁle was
modiﬁed by changing the hardware type and image ﬁle
size to ﬁt the requirements of the bootloader on the new
hardware, so the bootloader on the ATMega2564RFR2
would attempt
actual
veriﬁcation will fail as this was not a valid OTA image for
this platform, meaning we were able to perform this attack
without having access to a valid ﬁrmware image.
the veriﬁcation process. The
The hardware AES engine on the ATMega2564RFR2
has a unique signature which makes detecting the location
of AES straightforward. Looking at the power traces of the
veriﬁcation process we could notice two AES operations for
each 16 byte block, which supported the CCM assumption
as shown in the top portion of Figure 8.
In addition, we performed a DPA attack where the leak-
age assumption is simply the input data itself being loaded.
This shows locations where the input data is manipulated
(this will also track linear changes to the data, such as an
XOR operation). We notice the input data is manipulated
after the ﬁrst AES operation and before the second AES
operation as in the lower part of Figure 8.
This would be consistent with the ﬁrst AES operation
being CTR mode, the output of CTR mode being a pad
which is XORd with the input data to decrypt the block.
The decrypted data is then fed into the CBC block. Note
the XORs of the input data still generate the high difference
spikes, as the input data is effectively being XORd with
constants (either the AES-CTR output with the same CTR
input, or the CBC output).
6.5. CPA attack against the CCM CBC MAC ver-
iﬁcation
Under the CCM assumption, we had to ﬁnd a way to
break the mode of operation under the following limitations:
1) We have no knowledge of the key
2) We have no knowledge of the encryption nonce
3) We have no knowledge of the signature IV or associ-
ated data.
4) We have no sample of a valid encrypted message.
5) Our target won’t accept messages larger than around
214 encryption blocks.
We will ﬁrst summarize the existing related work on
breaking AES-CCM.
6.5.1. Previous work on AES-CTR and AES-CCM.
Performing power analysis on AES-CTR mode is made
more complicated as the majority of the bytes are constant
(the nonce), and only the counter bytes vary. A standard
ﬁrst-order CPA attack is only able to recover the key-bytes
where the associated input bytes vary, meaning that at most
two bytes of the counter are recovered. A solution to this
was presented by Jaffe, where Jaffe performs the attack over
multiple AES rounds [13].
Jaffe’s technique of performing the attack over multiple
rounds allows recovery of a combination of the AES Round-
Key XORd with either the constant plain-text or the output
of the previous round. This allows us to ignore the unknown
constant values, as they will eventually be removed [13].
The AES-CTR attack requires 216 encryptions, to ensure
power traces are recorded for all values of all 16 bits of the
counter. While Jaffe reports the attack may succeed with a
smaller subset of these 216 traces, the subset will include
traces from throughout the set, such that even if a set of 214
traces pulled from the larger set was sufﬁcient, capturing
only 214 consecutive traces will not provide enough data.
The leakage observed by the hardware AES peripheral
is such that leakage occurs before the S-Box operation, and
it is not possible to reliably perform the attack using the
output of the S-Box. Had the output of the S-Box leaked,
it would have been possible to recover higher-order bits of
the key for which there is no associated toggling of higher-
order bits of input data, due to the non-linear property of
the S-Box.
The AES-CCM as used in IEEE 802.15.4 was speciﬁ-
cally broken by O’Flynn and Chen, which used a modiﬁed
version of Jaffe’s attack [12]. Rather than use successive
encryptions with AES-CTR, O’Flynn used the known map-
ping of input data to the AES-CTR nonce to allow him to
perform power measurements where 4 bytes of the nonce
are varied, but the AES-CTR counter is constant.
As in Jaffe, this required O’Flynn to perform multiple
rounds of CPA attacks as the key was progressively recov-
ered. For every round-key recovered, some work is needed to
validate that it appears to be correct as well, since any error
will compound. This was done by looking for correlation
spikes for round i + 1, when comparing various candidates
for round key i. O’Flynn did not use the AES-CBC portion
of the AES-CCM process and instead only broke the AES-
CTR portion.
A solution to the general problem of unknown counter
inputs is also given by Hanley et al. where a template
attack can be performed even with completely unknown
input to the AES block [31]. This attack has the downside of
worse performance (in terms of number of traces required)
compared to a known plaintext (or ciphertext) attack.
Because our target only accepted about 214 16-byte
blocks, we had limited ability to use the existing AES-CTR
attacks. We also were unaware of the nonce format – if we
had a known mapping of some input data ﬁeld to AES-CTR
none, the attack in [13] as used by [12] would have been
possible.