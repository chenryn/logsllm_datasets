goes in the other direction. We are not aware of a scenario
where this difference is important for reasonably small B.
The function Lb,B leaks strictly more information than LB
(actually Lb), but
it also does not appear to be harmful.
Finally, Lm,b,B leaks this type of size information and the
number of keywords m. The number m seems to be the
most useful information for an adversary, but in prior work it
has been considered acceptable. It is possible to modify the
scheme to avoid leaking exactly m, say by storing blocks of
a different size in the dictionary.
IV. DYNAMIC CONSTRUCTIONS
We extend our static SSE constructions to support changes
to the database. Our dynamic SSE constructions will consist of
a statically encrypted database EDB using any of the schemes
described above, and an auxiliary encrypted database EDB+
which is maintained to be of the form of a basic dictionary-
based scheme. The EDB+ is initially empty and changes as
updates happen.
ADD-ONLY SCHEME: Π+
Πbas, denoted Π+
add, edit+ inputs from the client during Update. Π+
bas
simpler and possibly interesting in its own right.
bas. We start with an extension of
bas that supports additions only, meaning
is
To support additions we use a dictionary γ+ which is
initially empty and to which a pair (", d) is added with each
keyword addition; here " is a label computed from the keyword
and a keyword-speciﬁc counter, and d is the encryption of
the record id involved in the addition operation. Search for a
keyword w is performed by the server by ﬁrst searching γ as
in the static case, then re-computing all labels corresponding
to w in γ+. The latter labels are computed using a w-speciﬁc
key provided by the client and a running counter.
Note that addition operations involving keyword w require
the client to know the current value of the w-speciﬁc counter.
the scheme maintains a dictionary δ associating
For this,
each keyword that was ever added via edit+ or add with its
current counter value. δ can be stored at the client or stored
at the server and retrieved by the client for performing update
operations. We formalize a scheme Π+
bas where the client stores
locally the dictionary δ and discuss below a stateless variant.
We assume throughout that the client never tries to add a
record/keyword pair that is already present - it is easy, but
messy, to extend our scheme and the leakage proﬁle to handle
this.
In Π+
bas, Setup(DB) is exactly as in Πbas except that the
client also initializes δ to be an empty dictionary and keeps it
as state, and the server initializes an empty dictionary γ+ that
is stored with EDB. We next give the update protocol.
Update: We only specify the protocol with client input op ∈
{add, edit+}. The parties work exactly the same on either
type of operation. The client has input id, Wid. It starts by
deriving key K+ ← F (K, 3)2, and proceeds as follows:
For w ∈ Wid:
2 ← F (K+, 2’w).
1 ← F (K+, 1’w), K+
Set K+
c ← Get(δ, w); If c = ⊥ then c ← 0
Set " ← F (K+
c++ ; Insert (w, c) into δ
Add (", d) to L in lexicographic order
1 , c) ; d ← Enc(K+
2 , id)
Send L to the server.
When inserting (w, c) into δ, we assume that it will overwrite
any previous entry (w, ·) if it exists.
Finally,
the server adds each (", d) ∈ L to γ+. This
completes the update protocol.
To complete Π+
bas we describe the protocol Search.
2We use input 3 for domain separation to K+ make independent of each
keyword-speciﬁc K1 = F (K, 1"w) and K2 = F (K, 2"w).
8
Search: On input w, the client sets K+ ← F (K, 3) and
proceeds:
K1 ← F (K, 1’w), K2 ← F (K, 2’w)
K+
Send (K1, K2, K+
1 ← F (K+, 1’w), K+
1 , K+
2 ← F (K+, 2’w)
2 ) to the server.
Upon receiving the message, the server computes its output as
follows:
For c = 0 until Get returns ⊥,
d ← Get(γ, F (K1, c)) ; m ← Dec(K2, d)
Parse and output id in each m
For c = 0 until Get returns ⊥,
d ← Get(γ+, F (K+
Parse and output id in each m.
1 , c)) ; m ← Dec(K+
2 , d)
Intuitively, the server is repeating the search procedure from
twice: Once with (K1, K2) and γ, and then with
Πbas
(K+
2 ) and γ+.
1 , K+
LEAKAGE PROFILE FOR Π+
bas. Let us ﬁrst give some intuition
for the leakage of Π+
bas. Initially the leakage is exactly like
Πbas, where only the size of DB is leaked. Upon an edit+ or
add query, if the keywords being added were not previously
searched for, then the server learns nothing other than number
of record/keyword pairs added (not even the if the operation
was edit+ vs. add). If, however, one (or more) of the keywords
were previously searched for, then the server can reuse its keys
from before to detect the presence of these keywords (this type
of leakage is inherent when the keys provided to the server for
searching are deterministically generated and the same each
time). The leakage on a search is similar to before, except
now for record/keyword pairs in γ+ the server can recognize
when they were added. The order for pairs in γ generated at
setup time is still hidden, however.
We proceed with the formal deﬁnition of L+ for adaptive
security. Amongst its state, it will keep a list Q describing
all queries issued so far, where an entry of Q is of the form
(i, op, . . .), meaning a counter, the operation type, and then the
one or more inputs to the operation.
On initial input DB, L+ creates a state consisting of a
counter i ← 0, an empty list Q and DB, and a set ID initialized
to contain all of the identiﬁers in DB. Let us deﬁne the search
pattern sp(w, Q) of a keyword with respect to Q to be the
indices of queries that searched for the keyword w, i.e.
sp(w, Q) = {j : (j, srch, w) ∈ Q}.
For an identiﬁer id and keyword w, the add pattern of id, w
with respect to Q is the indices that added w to the document
id, i.e.
ap(id, w, Q) = {j : (j, add, id, Wid) ∈ Q, w ∈ Wid}
∪{ j : (j, edit+, id, Wid) ∈ Q, w ∈ Wid}.
Finally, we let the add pattern of keyword w with respect to Q
and ID be the set of all identiﬁers to which w was ever added
(via a add or edit+ operation) along with the indices showing
when they were added. That is,
AP(w, Q, ID) = {(id, ap(id, w, Q)) : id ∈ ID, ap(id, w, Q) -= ∅}.
L+ produces outputs for the initial query, edit+ and add
updates, and search queries as follows:
•
•
•
On initial input DB it saves state as deﬁned above and
outputs N = !w∈W |DB(w)|.
For a search query w, L+ appends (i, srch, w) to Q
and increments i. Then it outputs sp(w, Q), DB(w), and
AP(w, Q, ID).
Update queries for edit+ and add operations are han-
dled similarly. For a query (edit+/add, id, Wid), L+ ﬁrst
appends (i, edit+/add, id, Wid) to Q, adds id to ID, and
increments i. It outputs |Wid| and the (lexicographically
ordered) set of search patterns
{sp(w, Q) : w ∈ Wid}.
If any of the search patterns was non-empty, then it also
outputs id.
While subtle in its formulation, L+ is essentially the best
possible leakage for an SSE scheme that generates the same
search keys on repeated searches.
In words,
the search query leakage includes sp(w, Q)
and DB(w) for obvious reasons. The add pattern of w,
AP(w, Q, ID), is the set of id matching w added later along
with “history” information ap(id, w, Q) indicating when they
added. The order information represents that the server can
look at γ+ and see when each id was added by rewinding and
re-running searches. For updates Π+
bas leaks only the size of the
update if the added keywords have not been searched for. If
any of them have been searched for, then the server learns that
“a keyword with search pattern sp(w, Q) was added” via the
set of search patterns in the update leakage. Finally it learns
the id being updated because it has the ability to search for
any of its keywords. Each of these leakage components is
unavoidable for a deterministic SSE scheme, and we regard
them as minimal.
We can now state our security for the add-only scheme. A
proof will appear in the full version.
Theorem 6: Π+
bas is correct and L+-secure against non-
adaptive attacks if F is a secure PRF and (Enc, Dec) is RCPA-
secure.
STATELESS CLIENT VARIANT. Above, the client keeps a dic-
tionary δ containing one counter per keyword that is added
after initialization. We could modify the scheme so that the
client is stateless by storing δ in encrypted form at the server
and having the client download and re-encrypt all of δ for each
update (note that the size of δ is as the number of distinct
keywords added via add and edit+ and not the total number
of keywords in the set W). In this variant the server will learn
how many new keywords are added each time by watching if
δ grows. We leave a formal version of this scheme to the full
version.
DYNAMIC SCHEME Πdyn
bas . We now augment the Πbas scheme
with del and edit− operations to obtain our fully dynamic
scheme Πdyn
bas . We will implement deletions by maintaining a
revocation list and having the server discard results that have
been revoked.
To delete a record/keyword pair (id, w) from the server’s
storage, the client will generate a pseudorandom revocation
identiﬁer and send it to the server. During searches, the client
will give the server a key that allows it to recompute revocation
identiﬁers, which it will then use to ﬁlter out deleted results.
This complicates our addition protocols. To add a pair that was
previously deleted, the protocol must “unrevoke” that pair by
having the server delete its revocation identiﬁer.
We now formally specify Πdyn
bas . Setup is exactly the same
as Π+
bas, except that the server also initializes an empty set
Srev. As a data structure, Srev will support additions, deletions,
and membership testing.
Update: We ﬁrst describe how to handle client
inputs
with op ∈{
input
as
(del/edit−, id, Wid), and ﬁrst derives a key K− = F (K, 4)3,
and then computes
del, edit−}. The
client
takes
For w ∈ Wid do
1 ← F (K−, w), revid ← F (K−
K−
Add revid to Lrev in lexicographic order
1 , id)
Send Lrev to the server.
The server receives Lrev and adds each revid to Srev. This
completes Update for the del and edit− operations.
Next we deﬁne Update for op ∈{ add, edit+}. On input
(add/edit+, id, Wid), the client performs a computation similar
to the list L computation in Π+
bas, except that it also includes
the appropriate revid values. It then awaits a response from the
server specifying which additions resulted in a true addition
and which caused an “unrevocation”, and uses this information
to increment the correct counters.
In code, the client sets K− ← F (K, 4) and does the
following:
For w ∈ Wid:
2 ← F (K+, 2’w)
1 ← F (K+, 1’w) ; K+
1 ← F (K−, w)
K+
K−
c ← Get(δ, w); If c = ⊥ then c ← 0
" ← F (K+
revid ← F (K−
Add (", d, revid) to L in lexicographic order
1 , c) ; d ← Enc(K+
1 , id)
2 , id)
Send L to the server.
The server generates its response r ∈{ 0, 1}|L| as follows.
For the i-th pair (", d, revid) ∈ L in order, if revid ∈ Srev, it
sets the i-th bit of r to 1 and deletes revid from Srev. Else, it
clears that bit to 0 and adds (", d) to γ. Finally, it sends r to
the client.
Now the client increments the counters for keywords corre-
sponding to 0 bits in r. It processes the keywords w ∈ Wid in
order of their labels in L. For the i-th keyword w in that order,
if the i-th bit of r is 0 it computes c ← Get(δ, w), increments
c, and inserts (w, c) into δ. This completes the update protocol.
The last component of Πdyn
bas is the search protocol.
Search: On client input w, it sets K− = F (K, 4), K−
F (K−, w), and then computes (K1, K2, K+
2 ) as in Π+
1 , K+
1 =
bas.
3As with K+ the input 4 is for domain separation only.
9
1 , K+
2 , K−
It sends (K1, K2, K+
1 ) to the server. The server
computes the result identiﬁers using the ﬁrst four keys exactly
as in Π+
bas, except before outputting each id it computes
revid = F (K−
1 , id) and tests if revid ∈ Srev. If so, it discards
id instead of outputting it.
LEAKAGE FUNCTION. We now deﬁne the leakage proﬁle
Ldyn. It will maintain a list of query information Q and set
of identiﬁers ID like L+ from above. Below we use the same
deﬁnitions for sp, ap, AP as in L+, and deﬁne the following
analogous patterns dp, DP for deletions:
dp(id, w, Q) = {j : (j, del, id, Wid) ∈ Q, w ∈ Wid}
∪{ j : (j, edit−, id, Wid) ∈ Q, w ∈ Wid}.
and DP(w, Q, ID) =