K
otherwise,
Definition 13 (pq-dm-dspr). In the following let H be a keyed
hash function as defined above. We define the advantage of any
adversary A = (A1, A2) against dm-dspr of H. The definition is
parameterized by the number of targets p.
(A) def
= max{0, succ − triv},
where
Advdm-dspr
succ =Pr(cid:2){Ki}p
triv =Pr(cid:2){Ki}p
H,p
1 ← A1( ); {Mi}p
(j, b) ← A2({(Ki , Mi)}p
1 ← A1( ); {Mi}p
(j, b) ← A2({(Ki , Mi)}p
1 ←R ({0, 1}α)p;
1) : SPKj(Mj) = b ∧ DIST({Ki}p
1 ←R ({0, 1}α)p;
1) : SPKj(Mj) = 1 ∧ DIST({Ki}p
1)(cid:3);
1)(cid:3);
1) is defined as in Definition 2.
and where DIST({Ki}p
We define the pq-dm-dspr insecurity of a keyed hash function
against p-target, time-ξ adversaries as the maximum advantage of
any (possibly quantum) adversary A with p targets and running
time ≤ ξ:
InSecpq-dm-dspr (H; ξ , p) = maxA Advdm-dspr
H,p
(A) .
Theorem 14. Let H be a hash function as in Construction 5 and
Th the tweakable hash function constructed by Construction 5. Then
the advantage of any time-ξ (quantum) adversary A against sm-dspr
of Th is bounded by
Advsm-dspr
Th,p
(A) ≤ InSecpq-dm-spr (H; ξ , p)
Proof. The reduction MA works exactly the same as in the
proof of Theorem 9 with the single difference that here MA just
forwards A’s output. The extraction procedure in the proof of
Theorem 9 shows that a collision under the function simulated
towards A implies the existence of a collision under H. Hence,
MA is correct with the same probability as A. There also is no
difference between triv for the two cases (which would imply a
difference in advantage) as SPP ,Tj(Mj) = SPKj(M
□
⊕
j ).
In the case of Construction 6 we again only achieve sm-dspr
with tweak advice, but again this is sufficient for the use in the
context of hash-based signatures.
Theorem 15. Let H1 and H2 be hash functions as in Construction 6
and Th the tweakable hash function constructed by Construction 6.
Then the advantage of any time-ξ (quantum) adversary A against
sm-dspr of Th with tweak advice is bounded by
Advsm-dspr
Th,p
(A) ≤ InSecpq-dm-dspr (H; ξ , p) ,
when modeling H2 as quantum-accessible random oracle and not
giving A1 access to this oracle.
Proof. Again, the reduction MA works exactly the same as
in the corresponding sm-tcr case, discussed in the proof of Theo-
rem 10. Again, the single difference is that MA just forwards A’s
output in this case. The argument that MA is correct whenever A
is correct and that the values of triv do not differ carries over from
□
the proof of Theorem 14.
For Construction 7 it is an open research question to prove
sm-dspr security. We conjecture the following bound.
Conjecture 16. Let H be a hash function as in Construction 7,
modeled as quantum-accessible random oracle and Th the tweakable
hash function constructed by Construction 7. Then the advantage of
any (quantum) adversary A making at most q-queries to H, against
sm-dspr of Th is bounded by
Advsm-dspr
(A) ≤ O(q2/2n),
when A1 is not given access to the random oracle.
Th,p
The reasoning behind this bound is similar to the reasoning
behind the hardness of dm-dspr given in Table 5. The difference
here is that the adversary is allowed to choose messages and tweaks
while the public parameters are hidden instead of choosing the
function keys and getting the messages afterwards. However, given
that we are considering a random oracle, the adversary does not
gain any advantage from being able to partially determine the
challenges in either way. This is the case as the behavior of the
functions is hidden from it until after the challenge generation.
3 THE SPHINCS+ FRAMEWORK
We now describe the SPHINCS+ framework. We roughly follow
the description in the SPHINCS+ submission to NIST [4], often
citing it literally in sections where precise definitions are required.
3.1 Cryptographic (Hash) Function Families
SPHINCS+ makes use of several different function families with
cryptographic properties. This description will use them generically,
and we defer giving specific instantiations to Section 6.
SPHINCS+ applies the multi-target mitigation technique from
[33] using the abstraction of tweakable hash functions from above.
In addition to several tweakable hash functions, SPHINCS+ makes
use of two PRFs and a keyed hash function. Input and output length
are given in terms of the security parameter n and the message-
digest length m, both to be defined more precisely below.
Tweakable hash functions. The constructions described in this
work are built on top of a collection of tweakable hash functions
with one function per input length. For SPHINCS+ we fix P =
{0, 1}n and T = {0, 1}256, limit the message length to multiples
of n, and use the same public parameter for the whole collection
of tweakable hash functions. We write Thℓ : {0, 1}n × {0, 1}256 ×
{0, 1}ℓn → {0, 1}n, for the function with input length ℓn.
There are two special cases which we rename for consistency
with previous descriptions of hash-based signature schemes: F :
{0, 1}n × {0, 1}256 × {0, 1}n → {0, 1}n, F def
= Th1; H : {0, 1}n ×
{0, 1}256 × {0, 1}2n → {0, 1}n, H def
Pseudorandom functions and the message digest. SPHINCS+
makes use of a pseudorandom function PRF for pseudorandom
= Th2.
Session 9D: SignaturesCCS ’19, November 11–15, 2019, London, United Kingdom2134key generation, PRF : {0, 1}n × {0, 1}256 → {0, 1}n, and a pseudo-
random function PRFmsg to generate randomness for the message
compression: PRFmsg : {0, 1}n × {0, 1}n × {0, 1}∗ → {0, 1}n . To
compress the message to be signed, we use an additional keyed
hash function Hmsg that can process arbitrary length messages:
Hmsg : {0, 1}n × {0, 1}n × {0, 1}n × {0, 1}∗ → {0, 1}m .
3.2 WOTS+
WOTS+ [30] is a one-time signature scheme: a private key must be
used to sign exactly one message. When it is reused to sign multiple
messages, security quickly degrades [14].
Parameters. WOTS+ has two parameters n and w. n is the security
parameter; it is the message length as well as the length of a private
key element, public key element, and signature element in bits. w
is the Winternitz parameter; it can be used to make a trade-off
between signing time and signature size: a higher value implies a
smaller, slower, signature. w is typically restricted to 4, 16 or 256.
Define len1 = ⌈n/log(w)⌉ and len2 = ⌊log(len1(w−1))/log(w)⌋ + 1.
The sum of these, len, represents the number of n-bit values in an
uncompressed WOTS+ private key, public key, and signature.
The WOTS+ key pair. In the context of SPHINCS+, the WOTS+
private key is derived from a secret seed SK.seed that is part of
the SPHINCS+ private key, and the address of the WOTS+ key pair
within the hypertree, using PRF.
The corresponding public key is derived by applying F iteratively
for w repetitions to each of the n-bit values in the private key,
effectively constructing len hash chains. Here, F is parameterized
by the address of the WOTS+ key pair, as well as the height of the
F invocation and its specific chain, in addition to a seed PK.seed
that is part of the SPHINCS+ public key.
In contrast to previous definitions of WOTS+, and as a direct
consequence of the use of tweakable hash functions to mitigate
multi-target attacks, we do not use so-called ℓ-trees to compress
the WOTS+ public key. Instead, the public key is compressed to an
n-bit value using a single tweakable hash function call to Thlen.
We use ‘WOTS+ public key’ to refer to the compressed public key.
WOTS+ signature and verification. An input message m is in-
terpreted as len1 integers mi, between 0 and w − 1. We compute a
i =1 (w − 1 − mi) over these values, represented as
checksum C = Σlen1
string of len2 base-w values C = (C1, . . . , Clen2). This checksum is
necessary to prevent message forgery: an increase in at least one
mi leads to a decrease in at least one Ci and vice-versa.
Using these len integers as chain lengths, the chaining function
F is applied to the private key elements. This leads to len n-bit
values that make up the signature. The verifier can then recompute
the checksum, derive the chain lengths, and apply F to complete
each chain to its full length. This leads to the chain heads that are
hashed using Thlen to compute the n-bit public key.
3.3 The hypertree
We first describe a single-tree hash-based signature that is essen-
tially equivalent to the XMSS construction [16]. We then extend
this to a multi-tree setting, in the same style as XMSSMT [32].
Figure 2: The authentication path to authenticate the fifth
leaf is shown in gray.
A single tree. To be able to sign 2h′ messages, the signer derives
2h′ WOTS+ public keys. We use these keys as leaf nodes. To con-
struct a binary tree, one repeatedly applies H on pairs of nodes,
parameterized with the unique address of this application of H as
well as the public seed PK.seed. We consider such a tree to be of
height h′, corresponding to the number of H applications to move
from the leaves to the root. The root of this tree is what will now
briefly serve as the public key of the single tree scheme.
One of the WOTS+ leaf nodes is used to create a signature on
an n-bit message. Simply publishing the WOTS+ signature is not
sufficient, as the verifier also requires information about the rest of
the tree. For this, the signer includes the so-called ‘authentication
path’ (see Figure 2). The verifier first derives the WOTS+ public
key from the signature, and then uses the nodes included in the
authentication path to reconstruct the root node.
A tree of trees. To make it sufficiently unlikely that random selec-
tion of a leaf node repeatedly results in the same leaf node being
selected, a SPHINCS tree needs to be considerably large.
Rather than increasing h′ (and incurring the insurmountable
cost of computing 2h′ WOTS+ public keys per signing operation),
we create a hypertree. For a more detailed discussion on this con-
struction, refer to the paper introducing SPHINCS [9, Section 1].
This construction serves as a certification tree. The WOTS+ leaf
nodes of the trees on the bottom layer are used to sign messages
(or, in our case, FTS public keys), while the leaf nodes of trees on
all other layers are used to sign the root nodes of the trees below.
The WOTS+ signatures and authentication paths from a leaf at the
bottom of the hypertree to the root of the top-most tree constitutes
an authentication path. See Figure 1 on page 2 for an illustration.
Crucially, all leaf nodes of all intermediate trees are determinis-
tically generated WOTS+ public keys that do not depend on any
of the trees below it. This means that the complete hypertree is
purely virtual: it never needs to be computed in full. During key
generation, only the top-most subtree is computed to derive the
public key. We define the total tree to be of height h and the number
of intermediate layers to be d, retroactively setting h′ to be h/d.
3.4 FORS
As the few-time signature scheme in SPHINCS+, we define FORS:
Forest of Random Subsets, an improvement of HORST [9]. FORS
security is captured in Section 4, where we introduce a new security
notion for hash functions for this very reason. The new security
notion strengthens the notion of target subset resilience as previ-
ously used to analyze HORS and HORST. FORS is defined in terms
of integers k and t = 2a, and can be used to sign strings of ka bits.
pkSession 9D: SignaturesCCS ’19, November 11–15, 2019, London, United Kingdom2135Table 1: Overview of the number of function calls we require
for each operation. We omit the single calls to Hmsg, PRFmsg,
and Thk for signing and single calls to Hmsg and Thk for ver-
ification as they are negligible when estimating speed.
keypair
2h/dw · len
2h/d − 1
2h/d · len
2h/d
F
H
PRF
Thlen
sign
kt + d(2h/d)w · len
k(t − 1) + d(2h/d − 1)
kt + d(2h/d) · len + 1
d2h/d
verify
k + dw · len
k log t + h
–
d
First, we pseudorandomly generate a randomizer R, based on the
message and SK.prf. R can optionally be made non-deterministic by
adding additional randomness OptRand. This may counteract side-
channel attacks that rely on collecting several traces for the same
computation. Note that setting this value to the all-zero string (or
using a low-entropy value) does not negatively affect the pseudoran-
domness of R. Formally, we say that R = PRF(SK.prf, OptRand, M).
R is part of the signature. Using R, we then derive the index of
the leaf node that is to be used, as well as the message digest as
(MD||idx) = Hmsg(R, PK.seed, PK.root, M).
In contrast to SPHINCS, this method of selecting the index is
publicly verifiable, preventing an attacker from freely selecting a
seemingly random index and combining it with a message of their
choice. Crucially, this counteracts multi-target attacks on the few-
time signature scheme. As the index can now be computed by the
verifier, it is no longer included in the signature.
3.6 Theoretical Performance Estimates
In the following section we provide formulas to estimate computa-
tional cost and data sizes for a given SPHINCS+ parameter set.
Key Generation. Generating the key seeds for SPHINCS+ requires
three calls to a random number generator. For the leaves of the
top tree we need to perform 2h/d WOTS+ key generations (len
calls to PRF to generate the sk and w · len calls to F for the pk),
and we have to compress the WOTS+ public key (one call to Tlen).
Computing the root of the top tree requires (2h/d − 1) calls to H.
Signing. For randomization and message compression we need
one call to PRF, PRFmsg and Hmsg. The FORS signature requires
kt calls to PRF and F. To compute the root of the k binary trees
of height log t, we add k(t − 1) calls to H and one call to Thk to
combine them. For the authentication paths, we compute d trees
similarly to key generation. This implies d(2h/d) times len calls to
PRF and w · len calls to F for the leaves, d(2h/d) calls to Thlen for
key compressions, and d(2h/d − 1) calls to H for the nodes in the
trees.
Verification. We first compute the message hash using Hmsg. We
need to perform one FORS verification, which requires k calls to
F, k log t calls to H and one call to Thk to hash the roots. Next, we
verify d layers in the hypertree, which takes < w · len calls to F
and one call to Thlen each per WOTS+ signature verification, as
well as dh/d calls to H for the d root computations.
Figure 3: An illustration of a FORS signature with k = 6 and
a = 3, for the message 100 010 011 001 110 111.
The FORS key pair. The FORS private key consists of kt random
n-bit values, grouped together into k sets of t values each. In the
context of SPHINCS+, these values are deterministically derived
from SK.seed using PRF and the address of the key in the hypertree.
To construct the FORS public key, we first construct k binary
hash trees on top of the sets of private key elements. Each of the
t values is used as a leaf node, resulting in k trees of height a. We
use H, addressed using the location of the FORS key pair in the
hypertree and the unique position of the hash function call within
the FORS trees. As in WOTS+, we compress the root nodes using a
call to Thk. The resulting n-bit value is the FORS public key.
FORS signatures. Given a message of ka bits, we extract k strings
of a bits. Each of these bit strings is interpreted as the index of a
single leaf node in each of the k FORS trees. The signature consists of
these nodes and their respective authentication paths (see Figure 3).
The verifier reconstructs each of the root nodes using the au-