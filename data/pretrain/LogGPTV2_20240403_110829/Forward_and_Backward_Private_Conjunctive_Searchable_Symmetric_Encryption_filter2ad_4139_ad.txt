tag to indicate whether a certain operation (either addition or
deletion) involving a given keyword-ﬁle pair has occurred or
not, which in turn allows the XSet to be dynamic and forward
privacy-preserving.
However, where we improve over BDXT is in achieving a
stronger notion of backward privacy by minimizing leakages
during searches, as discussed subsequently. A crucial role in
this regard is played by the dynamic blinding factor α in
ODXT, which can also be computed on-the-ﬂy with every up-
date operation. In other words, unlike OXT [9] and HXT‘[29],
we completely avoid the need for any pre-computation at setup.
By involving the operation op ∈ {add, del} in the generation
of both the cross tags and the blinding factors, we now allow
both the TSet and XSet to be updated dynamically in tandem
while preserving forward privacy. In particular, our TSet now
differs signiﬁcantly from that in MITRACONJ in its contents
and also the manner in which it is updated. The concept of
dynamic blinding factors does not appear in MITRA, or for
that matter, any existing dynamic conjunctive SSE scheme.
As demonstrated subsequently, dynamic blinding factors ad-
ditionally allow oblivious reconstruction of cross tags during
conjunctive searches, which suppresses leakages and paves
the way for strong backward privacy guarantees. Hence, the
introduction of dynamic blinding factors is another novel
technical contribution of this work.
Oblivious Conjunctive Search. We now elucidate the overall
idea for oblivious conjunctive search. Unlike in BDXT, where
the s-term in a conjunctive query was chosen to be the keyword
with the least frequency, in ODXT, we choose the s-term to be
the keyword involved in the least number of update operations.
We note, however, that in real-life databases a keyword that
occurs across fewer documents is also likely to be involved
in fewer update operations, especially in systems where an
update operation takes an entire ﬁle for addition/deletion.
Additionally, the client no longer needs two separate data
structures UpdateCnt and DBCnt to keep track of both the
number of update operations involving a keyword and the
9
number of documents actually containing it.
Suppose that in a conjunctive query q = (w1 ∧ . . . ∧ wn),
w1 is the keyword involved in the least number of update
operations. Let (op, (idj, w1)) be the cntth update operation
involving w1 and suppose that the server is able to compute
each cross-tag xtagi,j,op for wi ∈ {w2, . . . , wn}. In that
case,
the server is able to check each such cross-tag for
membership in the XSet dictionary, and let the client know
the corresponding outcomes.
For example, if the cntth update operation was an insert
operation, the client learns exactly how many insertion opera-
tions involving idj and keywords among w1, . . . , wn have been
executed so far. Similarly, if this was a deletion operation, the
client learns exactly how many deletion operations involving
idj and keywords among w1, . . . , wn have been executed.
Once the client gets this information from the server, it
can compute the ﬁnal list of document identiﬁers as follows:
among all document identiﬁers that appear in operations in-
volving w1, retain those that satisfy both of the following:
It has been inserted for every keyword w1, . . . , wn,
It has not been deleted for any keyword w1, . . . , wn
•
•
The challenge is to allow the server to compute the cross-
tags obliviously, i.e., without explicitly learning the actual
identiﬁer-operation pair (idj, op), via a single message re-
ceived from the client.
Oblivious Cross-Tag Computation. To enable this, the client
does the following: for the cntth update operation involving
the keyword w1,
it sends to the server the corresponding
TSet address (same as in BDXT) along with an additional
(permuted) set of cross-tokens {xtokeni,cnt}i∈[n] where for
each i ∈ [n], we have
xtokeni,cnt = gFp(KX ,wi)·Fp(KZ ,w1||cnt).
Now recall that the TSet address corresponding to the
cntth update operation involving w1 stores an additional pre-
computed blinding factor α, where
α = Fp(KY , idj||op) · (Fp(KZ, w1||cnt))−1.
It is easy to see that given a cross-token xtokeni,cnt and the
blinding factor α, the server can compute the cross-tag as:
xtagi,j,op = gFp(KX ,wi)·Fp(KY ,idj||op) = (xtokeni,cnt)α.
In other words, without ever learning what the underlying
identiﬁer idj or the underlying operation op was, the server
obliviously computes the relevant cross-tag involving the key-
word wi and the pair (idj, op). Note that we explicitly use the
fact that xtagi,j,op and α share the same sub-terms pertaining
to the pair (idj, op) to enable this oblivious computation.
To see why this is useful, recall that in BDXT, the second
round of communication between the client and the server
essentially involved the client explicitly computing and sending
across the relevant xtag values to the server. In ODXT, we
save this additional round of communication by allowing the
client and the server to engage in a specially designed single-
round protocol where the server directly gets the xtag values.
Parse sk = (KT , KX ) and st = UpdateCnt
Use UpdateCnt to identify keyword with least updates (assumed to
be w1 w.l.o.g)
Initialize stokenList to an empty list
Initialize xtokenList1, . . . , xtokenListUpdateCnt[w1] to empty lists
For j = 1 to UpdateCnt[w1]:
Set saddrj = F (KT , w1||j||0)
Set stokenList = stokenList ∪ {saddrj}
For i = 2 to n:
i)
ii)
End For
Randomly permute the tuple-entries of xTagListj
Set xtokeni,j = gFp (KX ,wi)·Fp (KZ ,w1||j)
Set xtokenListj = xtokenListj ∪ {xtokeni,j}
Client
1)
2)
3)
4)
5)
6)
7)
Server
a)
b)
c)
d)
e)
End For
Send (stokenList, xtokenList1, . . . , xtokenListUpdateCnt[w1]) to the
server
1)
2)
3)
Parse EDB = (TSet, XSet)
Initialize sEOpList to an empty list
For j = 1 to stokenList.size:
a)
b)
c)
d)
e)
Set cntj = 1
Set (svalj , αj ) = TSet[stokenList[j]]
For i = 2 to n:
i)
ii)
iii)
End For
Set sEOpList = sEOpList ∪ {(j, svalj , cntj )}
Set xtokeni,j = xtokenListj [i]
Compute xtagi,j = (xtokeni,j )αj
If XSet[xtagi,j ] = 1, then set cntj = cntj + 1
4)
5)
End For
Send sEOpList to the client
Client: Final Output Computation
1)
2)
Initialize IdList to an empty list
For (cid:96) = 1 to sEOpList.size:
a)
b)
c)
d)
Let (j, svalj , cntj ) = sEOpList[(cid:96)]
Recover (idj||opj ) = svalj ⊕ F (KT , w1||j||1)
If opj is add and cntj = n then set sIdList = sIdList∪
{idj}
Else if opj is del and cntj > 0 then set sIdList =
sIdList \ {idj}
3)
4)
End For
Output IdList
Figure 9: ODXT. SEARCH (sk, st, q = (w1 ∧ . . . ∧ wn); EDB)
The oblivious computation described above constitutes the core
of this protocol. Beyond this, the rest of the search operation
proceeds along the same lines as BDXT.
Putting these ideas together, we get the ODXT protocol,
as described across Figures 7, 8 and 9.
Server Storage. The server stores the dictionaries TSet and
XSet. Note that during setup, the TSet and XSet dictionaries
are both initialized to be empty. After N updates, the storage
requirement at
the server grows linearly to O(N λ), since
each update operation adds a O(λ)-sized entry of the form
(addr, α, val) to TSet and a O(λ)-sized cross-tag entry of the
form (xtag, 1) to XSet. In other words, the storage requirement
at the server grows linearly with the number of update opera-
tions on the dataset. This is exactly as in the BDXT scheme
described earlier.
Client Storage. ODXT approximately halves the local storage
requirement at the client as compared to BDXT. In ODXT,
the client locally stores only a single array UpdateCnt, as
opposed to both UpdateCnt and DBCnt in BDXT. This makes
10
the client storage requirements for ODXT comparable to the
na¨ıve adaptation of MITRA, as well as other dynamic SSE
schemes supporting single keyword search [5], [6], [10], [37].
Note that during setup, this array is initialized to empty.
After N updates, the storage requirement at the client grows
as O(|W| · log N ), |W| is the size of the keyword dictionary,
which is typically upper-bounded by some large pre-deﬁned
constant. In other words, the storage requirement at the client
grows logarithmically with the number of update operations.
Search Performance. ODXT requires a single round of
communication between the client and the server during con-
junctive searches. The computational overheads at both the
client and the server, as well as the communication overheads,
scale with O(n·|Upd(w1)|). First of all, this is still a signiﬁcant
improvement over the na¨ıve adaptation over MITRA whenever
there is a query term in the conjunction with relatively small
frequency of updates.
While searches in BDXT incur lower computational over-
head in the asymptotic sense, it is worth observing that in real-
life databases, a keyword that occurs across fewer documents is
also likely to be involved in fewer update operations, especially
in systems where an update operation takes an entire ﬁle
for addition/deletion. So for real-life databases, the s-terms
for BDXT and ODXT are likely to be the same for most
conjunctive queries, and the number of updates on the s-
term is unlikely to be signiﬁcantly larger than the number of
documents currently containing it.
D. Leakage Proﬁle of ODXT (Informal)
We now present an informal overview of the leakage proﬁle
for ODXT.
Update Leakages. Updates in ODXT are leakage-free. This is
because during updates, the server only sees a TSet (address,
value) pair and a cross-tag, all of which are generated using
PRFs and appear only once under the assumption that ﬁle
identiﬁers are never repeated4. This in turn implies that ODXT
is forward private.
Search Leakages. Next, we informally summarize the leak-
ages incurred by ODXT during conjunctive searches.
Output Leakage: The server learns the ﬁnal set of document
identiﬁers in the conjunction, since we assume that the client
sends these in the clear to retrieve the corresponding docu-
ments.
s-term Leakage: The server learns the number of update
operations involving the s-term w1, as well as the time stamp
for each such operation.
Common s-Term Leakage: The server learns if two (or more)
conjunctive queries have the same s-term w1. This is because,
for all queries where the s-term is w1, the client sends across
the same set of (or a superset of the same set of) stoken
values corresponding to update records involving w1 in the
TSet dictionary.
4This assumption is made in several existing forward and backward private
SSE schemes for single keyword search, most notably in the constructions of
Bost et al. [6] and Chamani et al. [10], including the original MITRA scheme.
x-term Leakage: For each update operation (opj, (idj, w1))
involving the s-term w1, the server learns the total number of
update operations of the form (opj, (idj, wi)) for each x-term
wi ∈ {w2, . . . , wn}, as well the corresponding time stamp for
each such operation.
Common x-Term Leakage: The server learns if two queries
with (possibly distinct) s-terms w1 and w(cid:48)
1 share a common
x-term wi, provided that the update histories for w1 and w(cid:48)
1
involve at least one common document identiﬁer idj. This
is because when processing these queries, the server would
encounter a common cross-tag xtagi,j.
Improvements over BDXT. It is easy to see that ODXT
improves signiﬁcantly over BDXT in terms of leakage. To
begin with, in ODXT, the server does not learn the frequency
of the s-term, i.e., |DB(w1)|; it only learns the number of
update operations involving the s-term, i.e., |Upd(w1)|. This is
exactly as in the na¨ıve adaptation of MITRA to the conjunctive
setting. On the other hand, in BDXT, the server learns both
|Upd(w1)| and |DB(w1)|.
in ODXT,
learn which
cross-tag pairs in the XSet dictionary correspond to the same
identiﬁer-keyword pair. Learning this information would re-
quire the server to be able to correlate cross-tags generated
across different update operations, which is computationally
infeasible since the PRF Fp hides any such correlation. Conse-
quently, it does not learn the exact number of keywords among
w2, . . . , wn that each document in DB(w1) contains. This is
a major improvement over BDXT, where the server was able
to learn this information.
the server does not
Moreover,
E. Formalizing the Leakage Proﬁle of ODXT
In this section, we formally describe the leakage proﬁle
for ODXT and prove its forward and backward privacy.
Intuitively, a dynamic conjunctive SSE scheme is forward
and backward private if: (a) an update operation reveals no
additional information about a conjunctive search operation
that took place at an earlier time, and (b) if a search operation
on a conjunction q = (w1 ∧ . . . ∧ wn) reveals no information
about certain deletion operations on (w1, . . . , wn) that took
place at an earlier time. We formally establish below that
ODXT achieves this notion of forward and backward privacy.
Let Q be a list with the following types of entries:
•
•
(t, w): search query on keyword w at timestamp t.
(t, op, (id, w)): update query op ∈ {add, del} on
identiﬁer-keyword pair (id, w) at timestamp t.
Output Leakages. For any keyword w, we deﬁne TimeDB(w)
to be the function that returns the list of all ﬁle identiﬁers
containing w that have not yet been deleted, along with their
respective timestamps of insertion. More formally, we have
TimeDB(w) = {(t, id) | (t, add, (id, w)) ∈ Q
and
∀t(cid:48) : (t(cid:48), del, (id, w)) /∈ Q}
We overload notation to deﬁne TimeDB(q) for any conjunctive
query q = (w1 ∧ . . . ∧ wn) as
TimeDB(q) = {({ti}i∈[n], id) | (ti, add, (id, wi)) ∈ Q
∀t(cid:48) : (t(cid:48), del, (id, wi)) /∈ Q}
and
11
In other words, TimeDB(q) returns the list of identiﬁers
corresponding to documents containing w1, . . . , wn that have
not yet been deleted, along with their respective timestamps of
insertion. Intuitively, TimeDB(q) captures the output leakage
for q.
s-Term Leakages. For any keyword w, we deﬁne Upd(w)
to be the function that returns the timestamps of all update
operations on w. More formally, we have
Upd(w) = {t | ∃(op, id) : (t, op, (id, w)) ∈ Q}.
Intuitively, for a conjunctive query q = (w1∧ . . .∧ wn), where
w1 is the s-term, Upd(w1) captures all s-term leakages for q.
x-Term Leakages. Next, we again overload notation to deﬁne
Upd(w1, w2) for any pair of keywords (w1, w2) as
Upd(w1, w2) = {(t1, t2) | ∃(op, id) : (t1, op, (id, w1)) ∈ Q
and
(t2, op, (id, w2)) ∈ Q}
In other words, Upd(w1, w2) returns the timestamps of all
update operations on w1 and w2 that involve the same doc-
ument
identiﬁer. Intuitively, for a conjunctive query q =
(w1 ∧ . . . ∧ wn), where w1 is the s-term, {Upd(w1, wi)}i∈[n]
captures all x-term leakages for q.
For ease of representation, we combine the s-term and
x-term leakages from a given query as follows: we further
overload notation to deﬁne Upd(q) for q = (w1 ∧ . . . ∧ wn),
where w1 is the s-term, as
Upd(q) = Upd(w1) ∪
Upd(w1, wi)
.
(cid:32) n(cid:91)
i=2
(cid:33)
(cid:1) ,
ODXT Leakage Proﬁle. We are now ready to formally deﬁne
the leakage proﬁle for ODXT as:
LODXT =(cid:0)LSETUP
ODXT,LSEARCH
ODXT ,LUPD
ODXT
where
•
•
•
Finally, we state the following theorem for the security of
LSETUP
ODXT = ⊥.
LUPD
ODXT(op, (id, w)) = ⊥.
LSEARCH
ODXT (q) = (TimeDB(q), Upd(q)).
ODXT.
Theorem-1 (Security of ODXT). Assuming that F and Fp
are secure PRFs and the decisional Difﬁe-Hellman assumption
holds over the group G, ODXT is adaptively-secure with
respect to a leakage function LODXT.
The detailed proof appears in the full version of the paper [31]
due to lack of space.
F. Forward Privacy of ODXT
In this section, we formally describe the forward privacy
guarantees of ODXT. According to the formal deﬁnition
introduced by Bost et al. [6], a dynamic conjunctive SSE
scheme that is adaptively secure with respect to a leakage
proﬁle
L =(cid:0)LSETUP,LSEARCH,LUPD(cid:1) ,
12
is said to be adaptively forward private if there exists a stateless
function L(cid:48) such that for any arbitrary triplet (op, id, w), we