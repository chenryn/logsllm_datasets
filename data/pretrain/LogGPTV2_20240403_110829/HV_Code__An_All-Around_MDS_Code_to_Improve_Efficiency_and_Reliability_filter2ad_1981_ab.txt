array codes. By performing the XOR operations instead of
ﬁnite ﬁeld arithmetic, they outperform Reed-Solomon Code
on the metrics of realization and efﬁciency. Both of them
utilize the horizontal parity and diagonal parity to realize
their constructions and RDP makes some differences when
building the diagonal parity to achieve a better performance.
Horizontal codes own an advantage that it can be built
on any number of disks, but they usually cannot approach
optimal update complexity.
The Vertical Codes of RAID-6 Systems: Rather than
separating the storage of data elements and parity elements,
vertical codes store them together in the disk.
X-Code [7] (as shown in Fig. 2) is construed over p disks
(p is a prime number) by using both diagonal parity and
anti-diagonal parity. HDP-Code [3] is proposed to balance
the load in a stripe by employing horizontal-diagonal parity,
in which the diagonal parity element joins the calculation of
horizontal parity element. H-Code [10] optimizes the partial
stripe writes to continuous data elements. It gathers the
horizontal parity elements on a dedicated disk and spreads
the (p − 1) anti-diagonal parity elements over other p disks.
P-Code [8] (as shown in Fig. 3) is organized by using
vertical parity. Its parity calculation follows the simple rule
of i + j = k, where Pi and Pj are two involved parities of
a data element and k is the id of the disk where the data
element resides on. Nevertheless, determining the involved
parities of a speciﬁed data element is a bit complex in P-
Code. For example, for a data elements in disk #1, it may
join either the generations of P2 and P6, or the computations
of P3 and P8. To determine the parity tuples of E3,1, one has
552
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:59:30 UTC from IEEE Xplore.  Restrictions apply. 
to know the parity tuples of E2,1, to ensure these two data
elements are assigned with the generation of different parity
elements. This manipulation is so troublesome that one has
to sacriﬁce additional storage capacity to keep a mapping
table for a fast parity location, otherwise a considerable
computation overhead (the complexity is O(p2)) will be
wasted for every lookup operation. This tedious lookup
operation will also lead to the complexity of O(p5) when
addressing single disk reconstruction.
C. The Remained Problems of Existing MDS Codes
Though the continuous efforts are made to greatly pro-
mote the diversity and maturity of RAID-6 storage systems,
most of the existing works cannot simultaneously address the
following problems. These problems will potentially threaten
the system reliability and degrade the system performance.
Load Balancing: Given the unbalanced I/O to a disk array
will extend the operation time and even hurt the system
reliability by causing uneven burden to disks, the study of
balancing I/O to disks has been considered for a period of
time [11] [3].
The traditional method adopts ”stripe rotation” (i.e., rota-
tionally choose the disk to serve as the parity disks among
different stripes) to uniformly distribute I/O request across
all
the stripes. This method only takes effect when the
workload is uniform among the stripes, which actually does
not accord with all the I/O distributions in the real appli-
cation. In the scenario that different stripes have different
access frequencies, even the ”stripe rotation” is applied, the
stripe hosting hotter (resp. colder) data will receive more
(resp. less) access requests, still causing unbalanced I/O
distribution. Therefore, to well balance the load, a better
method is to evenly disseminate the parity elements among
the stripe.
For RDP Code [4], EVENODD Code [5], Liberation
Code [9], and H-Code [10], which require dedicated disk
to place the parity elements, will easily cause non-uniform
I/O distribution.
Partial Stripe Writes: The partial stripe writes to contin-
uous data elements is a frequent operation, such as backup
and virtual machine migration. As a data element is usually
associated with the generation of 2 parity elements in RAID-
6 codes, an update to a data element will also renew at least 2
related parity elements. This property also awards horizontal
parity an advantage that the update to the data elements in a
row only needs to update the shared horizontal parity once.
For X-Code [7], in which any two continuous data ele-
ments do not share a common parity element, therefore the
partial stripe writes will induce more extra write requests
to the parity elements compared to the codes utilizing
horizontal parity.
For RDP Code [4] and EVENODD Code [5], the partial
stripe writes to continuous data elements will put a heavy
update burden to the disk hosting diagonal parities. For
example, when E1,2, E1,3 and E1,4 are updated in Figure 1,
then disk #5 will only need to update E1,5 while disk #6 has
to update E2,6, E3,6 and E4,6, respectively. This unbalanced
I/O distribution will easily delay the write operation and
even threaten the system reliability by making some disks
tired out.
For HDP Code [3], its high update complexity will induce
considerable I/O requests. Moreover, it does not make any
optimization in the case of continuous writes across rows.
Recovery Cost for Disk Failure: The recovery of RAID-6
systems can be classiﬁed into the single disk failure recovery
and the reconstruction of double disk failure.
For the single disk recovery, a general way ﬁrstly pro-
posed by Xiang et al [22] is repair the invalid elements
by mixing two kinds of parity chains subjecting to the
maximum overlapped elements to be retrieved, so as to
achieve the minimum recovery I/O. For example, suppose
the disk #1 is disabled in Figure1, then recover E1,1 and E2,1
by using horizontal and diagonal parity chain respectively
can make E1,2 overlapped and save one element’s retrieval.
The rebuild cost by adopting this method is greatly reduced
but still relates to the length of parity chain. Due to the long
parity chain in the existing codes, there is still room for
reconstruction efﬁciency improvement.
Different from the selective retrieval in single disk recov-
ery, double disk recovery demands to fetch all the elements
in the survived disks. Though different codes have various
layouts, the time to read all the remained elements into the
main memory is the same if the parallel read is applied.
Moreover, by utilizing the parallel technology, the failed
elements locating at different recovery chains can be simul-
taneously reconstructed. For example, in Fig. 5, the element
E6,3 and E5,3 that are not in the same recovery chain can
be rebuilt at the same time. Therefore, the parallelism of
recovery chains is critical in double disk reconstructions.
Among the existing MDS array codes, RDP Code [4] can
only serially execute this process and all of HDP Code [3],
H-Code [10] and P-Code [8] achieve low parallelism of this
repair by building only two recovery chains.
Degraded Read Efﬁciency: Degraded read operation is
seriously considered when the system devotes to providing
timely responses for user’s read requests, even there happens
to be a corrupted disk. In this case, additional elements are
usually taken to recover the corrupted element to ensure the
smooth proceeding of this read operation. Suppose the disk
#1 fails in Figure 1, and the elements E1,1, E1,2, and E1,3
are requested at that time, then extra elements E1,4 and E1,5
will be also attached to re-calculate the failed element E1,1
by the horizontal parity chain. This example also reveals the
horizontal parity owns an advantage to the degraded read
efﬁciency, because some of the requested elements (e.g.,
E1,2 and E1,3) may involve in the re-calculation of the
corrupted element (e.g., E1,1) with great probability.
For X-Code [7] and P-Code [8], based on diagonal/anti-
553
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:59:30 UTC from IEEE Xplore.  Restrictions apply. 
Table I
THE FREQUENTLY USED SYMBOLS
Description
the prime number
modular arithmetic, i mod p
the element at the i-th row and j-th column
the sum of XOR operation among the elements {Ei,j}
the length of continuous data elements to write
if k := (cid:2) i
(cid:3)p, then (cid:2)k · j(cid:3)p = (cid:2)i(cid:3)p
j
Symbols
p
(cid:2)(cid:3), (cid:2)i(cid:3)p
Ei,j
(cid:2) {Ei,j}
L
(cid:2) i
(cid:3)p
j
diagonal parity and vertical parity respectively, behave a bit
frustratingly on degraded read when compared to the codes
constructed on horizontal parity.
Another inﬂuence factor to the degraded read performance
is the length of parity chain. Longer parity chain probably
incurs more unplanned read elements. Derived from this
excuse, EVENODD Code [5], RDP Code [4], H-Code [10],
and HDP Code [3] still easily introduce a considerable
amount of additional I/O requests.
III. HV CODE FOR AN ARRAY OF p-1 DISKS
To simultaneously address the above remaining limitation-
s, an all-around RAID-6 MDS array code should satisfy the
following conditions: 1) be expert in balancing the load; 2)
optimize the performance of partial stripe writes to contin-
uous data; 3) be efﬁcient to deal with single (resp. double)
disk failure (resp. failures); 4) have a good performance on
degraded read operation; 5) retain the optimal properties,
such as encode/decode/update efﬁciency.
To this end, we propose an MDS code named HV Code,
which makes use of horizontal parity and vertical parity and
can be constructed over (p− 1) disks (p is a prime number).
Before presenting the construction of HV Code, we ﬁrst list
the frequently used symbols in Table I.
A. Data/Parity Layout and Encoding of HV Code
A stripe of HV Code can be represented by a (p − 1)-
row-(p − 1)-column matrix with a total number of (p −
1) × (p − 1) elements. There are three kinds of elements in
the matrix: data elements, horizontal parity elements, and
vertical parity elements. Suppose Ei,j(1 ≤ i, j ≤ p − 1)
denotes the element at the i-th row and j-th column. In HV
Code, the horizontal parity elements and the vertical parity
elements are calculated by the following equations.
Horizontal parity element encoding:
Ei,(cid:2)2i(cid:3)p
:=
Ei,j
(j (cid:5)= (cid:6)2i(cid:7)p, j (cid:5)= (cid:6)4i(cid:7)p)
Vertical parity element encoding:
Ei,(cid:2)4i(cid:3)p
:=
Ek,j
(j (cid:5)= (cid:6)8i(cid:7)p, j (cid:5)= (cid:6)4i(cid:7)p)
p−1(cid:3)
j=1
p−1(cid:3)
j=1
(cid:4)
k, j, i should satisfy the condition: (cid:6)2k + (cid:6)4i(cid:7)p(cid:7)p = j. This
expression can also be simpliﬁed as (cid:6)2k + 4i(cid:7)p = j. Then
we can obtain k according to the following equations.
1
1
2
(cid:7)p :=
k := (cid:6) j − 4i
2(cid:6)j − 4i(cid:7)p
2 ((cid:6)j − 4i(cid:7)p + p)
((cid:6)j − 4i(cid:7)p = 2t)
((cid:6)j − 4i(cid:7)p = 2t + 1)
Notice that if u satisﬁes the condition (cid:6)u · j(cid:7)p = (cid:6)i(cid:7)p,
j(cid:7)p. Fig. 4 shows the layout
then we express u as u := (cid:6) i
of HV Code for a 6-disk array (p = 7). A horizontal parity
element (represented in horizontal shadow) and a vertical
parity element (represented in vertical shadow) are labeled
in every row and every column.
Figure 4(a) illustrates the process of encoding the horizon-
tal parity elements. By following Equation (1), the horizontal
parity elements can be calculated by simply performing
modular arithmetic and XOR operations on the data ele-
ments with the same shape. For example, the horizontal
parity element E1,2 (the row id i = 1) can be calculated
by E1,1 ⊕ E1,3 ⊕ E1,5 ⊕ E1,6. The vertical parity element
E1,4 (i = 1) should not be involved in the encoding of E1,2,
because E1,4 is at the (cid:6)4i(cid:7)p-th column.
Figure 4(b) shows the process of encoding a vertical parity
element. Every vertical parity element is calculated by the
data elements with the same shape according to Equation (2).
For example, to calculate the vertical parity element E1,4
(the row id i = 1), we should ﬁrst pick out the involved data
elements {Ek,j} based on Equation (2). When j = 1, then
j = (cid:6)8i(cid:7)p, which violates the requirements in Equation (2).
2 (cid:7)p := (cid:6)−1(cid:7)p := 6 and
When j = 2, then k := (cid:6) j−4i
E6,2 is positioned. By tracking this path,
the following
data elements (i.e., E3,3, E4,5, and E1,6) are then fetched.
Second, by performing XOR operations among these data
elements, the vertical parity element E1,4 will be computed
as E1,4 := E6,2 ⊕ E3,3 ⊕ E4,5 ⊕ E1,6.
B. Construction Process
Based on the layout and encoding principle, we take the
following steps to construct HV Code.
1) partition the disk according to the layout of HV Code
and label the data elements in each disk;
2) encode the horizontal parity elements and the vertical
parity elements respectively according to Equation (1)
and Equation (2).
C. Proof of Correctness
We mainly prove HV Code is correct when applied in
one stripe and the correctness over multiple stripes can be
similarly deduced. We ﬁrst propose the following lemma and
theorem. This proof method is also adopted by [3] and [10].
(1)
(2)
554
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:59:30 UTC from IEEE Xplore.  Restrictions apply. 
(a) Horizontal Parity Encoding: a horizontal par-
ity element can be calculated by XOR operations
among the data elements in the same row. For
example, E1,2 := E1,1 ⊕ E1,3 ⊕ E1,5 ⊕ E1,6.