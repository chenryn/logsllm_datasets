the purpose of encryption, addresses this issue. However,
it speciﬁes a large feature set, of which the added value
is debatable (multiple passwords per range, multiple ranges,
see Section II-B for details), in particular, if we take the
complexity of correctly implementing such a feature set into
account. On top of that, the speciﬁcation offers no guidance
on how the key derivation scheme should be designed that
supports this feature set. This lack of guidance combined with
many required features is a source of issues, listed below.
1) DEKs are not derived from the passwords: Obviously,
the password should be required in order to obtain the DEK,
and this requirement should be cryptographically enforced by
deriving the encryption key from the password. The absence
of this property results in a situation where the conﬁdentiality
(cid:24)(cid:21)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:15 UTC from IEEE Xplore.  Restrictions apply. 
of user data no longer depends on secrets. All the information
required to recover the user data is stored on the drive itself
and can be retrieved. We believe that the complexity of TCG
Opal
in combination with the absence of implementation
guidance contributes to conceiving a design in which the DEK
ultimately does not depend on the user password.
2) Single DEK used for the whole disk: A naive imple-
mentation of the Opal standard uses a single DEK for the
entire drive, and store an encrypted variant of it for each
password, whereas a proper implementation produces different
DEKs for each range. On the surface, doing so may seem
only a minor issue. Indeed, access to at least one range is
still required. However,
the (probably) most popular Opal
management software, BitLocker, leaves the global range un-
protected in order to allow the partition table to be accessible.
Consequently, no secret (password) is needed to access the
DEK and can potentially be retrieved from the device, in effect
compromising the other ranges. The Opal standard is the root
cause of this class of issues since it is the only standard that
speciﬁes multiple independent ranges.
3) ATA Master password re-enabling: The ATA security
feature set deﬁnes both a User and Master password (see
section II-B), with the possibility to revoke the Master pass-
word’s permission to access the drive’s contents,
i.e. by
setting the MASTER PASSWORD CAPABILITY bit to Maximum.
Ideally, doing so would trigger the erasure of all key material
allowing the DEK to be derived from the Master password.
The aforementioned permission can also be reinstated using
the User password. As such, the key material should also be
restored. However, at that particular point in time, the drive
does not have the possession of the cleartext Master password,
rendering this operation nontrivial to implement. Theoretically,
the issue can be addressed, e.g. by keeping an encrypted copy
of the aforementioned key material using the User password as
the key. However, doing so prevents the Master password from
being changed independently of the User password. This can
again be addressed by introducing another constant key and
encrypting it using the Master password. In practice, however,
all drives included in our study simply keep the key material
available at all times.
B. Design issues
The issues listed in this category are design issues of which
we believe do not arise from (a lack of) speciﬁcation.
1) Wear leveling: SSDs use ﬂash memory for data storage.
A property of ﬂash memory is that it can be subject to a limited
number of write-erase-cycles before becoming unreliable. In
order to prolong the service life of the device, wear leveling
is applied. It works by arranging data so that erasures and re-
writes are evenly distributed across the medium. Thus, mul-
tiple writes to the same logical sector typically trigger writes
to different physical sectors. Older copies of a sector remain
stored until overwritten (although not directly retrievable by
the end user). Wear-levelling can be applied to key information
as well. Suppose that the DEK is stored unprotected, after
which a password is set by the end user, overwriting the
unprotected DEK with an encrypted variant. Due to wear
leveling, the unprotected variant may still be retrievable.
2) Power-saving mode: DEVSLP: DEVSLP is a feature that
allows SATA drives to go into a low power ‘device sleep’
mode when sent the appropriate signal. The ATA standard is
not explicit about how power consumption reduction is to be
achieved. A manufacturer may freely choose, for example, to
have the drive write its internal state to non-volatile storage
and subsequently power down the RAM. The drive complies
to the standard as long as it can become operational within
20ms of receiving the wake-up signal. Suppose that a drive
indeed writes its internal state to non-volatile memory. Then
care must be taken that the state from non-volatile memory
is erased upon wake-up, or else an attacker may be able to
extract the DEK from the last stored state.
C. Implementation issues
Lastly, we list issues that are not inherently caused by the
design. Rather, they are issues that potentially occur due to
implementation mistakes.
1) Lack of entropy in randomly generated DEKs: The only
way for the end user to affect
the DEK is by triggering
randomization of it. This raises the question if sufﬁcient
random entropy is available during the DEK generation. Prin-
cipally, the environment wherein SSDs are deployed allows
for sufﬁcient entropy to be acquired [16]. Example entropy
sources include the drive’s temperature sensor and I/O requests
from the host PC. Storing and restoring the random pool
upon reboots should not be an issue since we are concerned
with storage devices. However, random number generators in
embedded devices have seen a number of issues. [17].
2) General implementation issues: All the issues depicted
above in this section apply in particular to hardware-based
disk encryption. However, potential implementation issues in
software-based encryption may also apply. Examples include
re-use of the initialization vectors and using an insecure
mode of operation. Many software-based solutions, such as
VeraCrypt and later versions of Microsoft BitLocker, use
the XTS mode of operation. A description of XTS is given
below. The XTS, or XEX Tweakable Block Cipher with Ci-
phertext Stealing [18], mode of operation was designed for
cryptographic protection of data on storage devices of ﬁxed
length data units. It is an instantiation of Rogaway’s XEX
(XOR Encrypt XOR) tweakable block cipher [19], extended
with ciphertext stealing to support arbitrary length inputs.
Furthermore, XEX mode uses a single key for both encryption
and tweaking, whereas XTS mode uses two independent keys.
XTS mode provides conﬁdentiality for the protected data.
Authentication is not provided, because one of the design goals
is to provide encryption without data expansion. In the absence
of authentication or access control, the best one can do is to
ensure that any alteration of the ciphertext will completely
randomize the plaintext, and rely on the application that uses
this transform to include sufﬁcient redundancy in its plaintext
to detect and discard such random plaintexts. In light of
(cid:24)(cid:22)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:15 UTC from IEEE Xplore.  Restrictions apply. 
this, XTS provides more protection than other conﬁdentiality-
only modes against manipulation of the encrypted data. The
XTS mode of operation has received criticism [20], [21]. An
important point is that the granularity to which an attacker
has the ability to randomize plaintexts must equal the cipher’s
block size which is in the case of AES 16 bytes. Ferguson has
designed a native diffuser function that addresses this problem
for application in BitLocker [22]. In the same publication, XTS
is not mentioned, but LRW mode with the same limitation is
criticized.
V. METHODOLOGY
In order to assess how well hardware encrpytion in SSDs
performs in practice, we argue that we should analyze its
implementations. This is, in our opinion, the most realistic
measure. Such an analysis is inherently a somewhat ad-hoc
process, since implementations vary wildly among manu-
facturers and models. However, to the extent possible, we
document a generic approach that is applied to every device
subject to analysis. We will describe each step:
A. Obtaining a ﬁrmware image
The difﬁculty of obtaining a ﬁrmware image from an SSD
varies greatly among manufacturers and models. Below, we
list a few examples.
1) Downloading a ﬁrmware update: Most manufacturers
distribute ﬁrmware updates for their SSDs, by making them
available for download from their website or through their SSD
management utility. For all the drives we studied, ﬁrmware up-
dates consist of the entire ﬁrmware image. Firmware updates
downloaded from a manufacturer’s website often comprise of a
bootable ISO image, containing an operating system, ﬁrmware
update utility, and the ﬁrmware image itself. A special com-
mand is used by the update utility to apply the update, for ATA
it is the 0X92 DOWNLOAD MICROCODE command. Extracting
the ﬁrmware from the ISO image is typically straightforward.
Obtaining a ﬁrmware image distributed through SSD manage-
ment utility typically requires more effort, but is certainly not
impossible. For example, the utility may apply obfuscation
on its communication channels and/or ﬁrmware images that
require some reverse engineering in order to remove. Some
manufacturers use encrypted ﬁrmware images; the image is
transferred to the drive, and subsequently decrypted by the
drive itself. We can let the drive decrypt these images, and
retrieve the decrypted image from the drive (see V-A2).
2) Extract the running ﬁrmware: Sometimes, a copy of the
running ﬁrmware can be extracted. This can be achieved e.g.
by using the device’s debugging capabilities (see below), or by
exploiting a vulnerability in the handling of storage interface
commands. In effect, this allows one to extract the currently
running ﬁrmware from the device’s RAM.
B. Gaining low level control over the device
A ﬁrmware image allows for static analysis. However,
the possibility of dynamic analysis through e.g. JTAG is a
signiﬁcant advantage. It allows us to quickly conﬁrm (or
refute) assumptions and ﬁndings resulting from static analysis.
Furthermore, in case weaknesses are found in the crypto-
graphic scheme, a means of low level control is often required
in order to exploit them.
1) JTAG: JTAG allows full control over a device. We
can halt/resume the CPU, read/modify registers, place break-
points, read/write arbitrarily within the address space, and
execute arbitrary code. Some SSDs expose a JTAG debug-
ging interface on their PCBs. Standardized pin layouts exist,
though, manufacturers may opt for a proprietary one. The
JTAGulator [23] allows us to automatically determine whether
a set of pins speak the JTAG protocol.
2) Unsigned code execution: Some SSD manufacturers dis-
able the JTAG feature of the storage controller. In the absence
of JTAG, a suitable alternative is the ability to execute arbitrary
code on the storage controller, as it allows for essentially
the same capabilities. However, all drives in our study have
countermeasures in place to prevent this, such as cryptographic
signature veriﬁcation of ﬁrmware updates.
Still, various means of gaining code execution exist, such as
vendor-speciﬁc commands, memory corruption, storage chip
access, or a fault-injection attack. These are described below.
Vendor-speciﬁc commands Most manufacturers implement
vendor-speciﬁc commands for diagnostic purposes. Through
static analysis of ﬁrmware images, we found examples in
which a command exists that allows for arbitrary values to be
written to a memory address of choice. This can be leveraged
into code execution, e.g. by overwriting a function pointer.
Memory corruption Memory corruption vulnerabilities can
in many situations be leveraged into unsigned code execution,
a stack-based buffer overﬂow is an example of this.
Storage chip access A more invasive technique for gaining
unsigned code execution is by using an external reader device
to make modiﬁcations to the currently installed ﬁrmware.
The NAND ﬂash chips usually contain the user-accessible
storage and ﬁrmware. They typically come as BGA packages,
requiring them to be desoldered from the PCB in order
to attach them to a reader. Alternatively, many SSDs also
contain NOR ﬂash, connected through SPI (Serial Peripheral
Interface). SPI ﬂash chips usually expose their pins on the out-
side, therefore not requiring them to be desoldered. Typically,
the NOR ﬂash contains the drive’s capacity, serial number,
error logs, and more. In some occasions, it contains the boot
loader. Unsigned code execution becomes possible by making
modiﬁcations to it.
Fault injection attack
Finally, although beyond the scope
of this paper, a fault injection attack may be used to achieve
unsigned code execution. E.g., a clock glitch during a cryp-
tographic signature check can be introduced by physical
interference (power or electro-magnetic), tricking the drive
into accepting a ﬁrmware update with an invalid signature. In
order to successfully mitigate such an attack, both hardware
and software countermeasures are necessary. To the best of our
knowledge, no SSD on the market has these countermeasures.
(cid:24)(cid:23)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:15 UTC from IEEE Xplore.  Restrictions apply. 
C. Analyzing the ﬁrmware
Once a ﬁrmware image for a particular drive is acquired,
we analyze it. The ﬁle format used for ﬁrmware images
differs between manufacturers. The images are usually divided
in sections. Section information, such as the size, memory
address, and offset in the ﬁle, is usually contained within
the image header. In some cases,
the section information
is immediately apparent by inspection. In other cases, some
reverse engineering is needed. Once the sector information is
uncovered, the ﬁrmware image can be loaded into a disassem-
bler and analysis tool, such as IDA Pro.
When reverse engineering SSD ﬁrmwares, a good starting
point is identifying the ATA dispatch table, i.e. an array of
data structures containing at least the ATA opcode and the
address of the function that implements it. All drives in our
study implement the ATA standard in a way similar to this.
Once the table is identiﬁed, the implementation of any desired
command can be studied by analyzing the code located at the
respective address.
For each of the possible issues given in Section IV, we
attempt to ﬁnd out whether the drive is susceptible to it by
studying the relevant code.
Security evaluation: The MX100 has critical security issues
in both the ATA security and TCG Opal
implementation.
Namely,
the DEK is not derived from the password. We
demonstrated in practice that, by modifying the password
validation routine in RAM through JTAG, the MX100 unlocks
with any password. This applies to both ATA security and
TCG Opal. With the current key derivation scheme, per-range
keys are encrypted using a single key. Thus, introducing a
cryptographic dependency on the password would still allow
any credential to unlock all ranges. No random entropy issues
nor wear leveling issues were identifed.
Furthermore, a vendor-speciﬁc command allows for arbi-
trary modiﬁcations within the address space. This enables
malware with remote access to the host PC to infect the
drive’s ﬁrmware, allowing it to hide itself and/or to survive
re-installation of the host PC’s OS.
Attack strategy: In order to to recover the data from a locked
MX100 drive, we connect a JTAG debugging device. Then, we
use it to modify the password validation routine in RAM so
that it always validates successfully. Finally, we unlock the
drive as normal, with an arbitrary password. The strategy is
the same for both ATA security and TCG Opal.
VI. CASE STUDIES
B. Crucial MX200
A. Crucial MX100
The Crucial (Micron) MX100 is a SATA SSD released in
2014. It supports ATA security, as well as TCG Opal, both
version 1 and 2. The controller used is the Marvell 88SS9189,
which houses a dual-core ARM CPU. Firmware updates are
available for download through Micron’s website. They come
as a Linux-based bootable ISO image. The ﬁrmware image is
stored within the ISO image, and is sent unmodiﬁed to the
drive. The ﬁrmware image is cryptographically signed using
2048-bit RSA and SHA256. The signature veriﬁcation is based
on mbedTLS’s rsa_pkcs1_verify function. The MX100
has a JTAG interface that can be used to connect a debugging
device. The standardized ARM14 JTAG pin layout is used.
Findings:
In this section, we present our ﬁndings with
The TCG Opal
respect to both ATA security and TCG Opal.
ATA security. We found that the implementation of the
ATA F2h SECURITY UNLOCK command passes the incoming
password to the SHA256 hash function, and compares the
output to another buffer. If they match, the drive unlocks.
However, the original password buffer remains unused during
this process. Hence, the DEK is not derived from the password.
TCG Opal.
implementation works in