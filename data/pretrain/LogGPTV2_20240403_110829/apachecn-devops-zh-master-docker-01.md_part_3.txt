```
$ docker container run hello-world
```
不管你在什么主机上运行 Docker，同样的事情也会在 Linux、macOS 和 Windows 上发生。Docker 会下载`hello-world`容器镜像然后执行，一旦执行就停止容器。
您的终端会话应该如下所示:
![](img/8835f878-d366-4d53-b18d-dd6987b23916.png)
让我们尝试一些更冒险的东西—让我们通过运行以下两个命令来下载并运行 nginx 容器:
```
$ docker image pull nginx
$ docker container run -d --name nginx-test -p 8080:80 nginx
```
两个命令中的第一个命令下载 nginx 容器映像，第二个命令使用我们拉的`nginx`映像在后台启动一个名为`nginx-test`的容器。它还将主机上的端口`8080`映射到容器上的端口`80`，使我们在`http://localhost:8080/`的本地浏览器可以访问它。
从下面的截图中可以看出，在所有三种操作系统类型上，命令和结果完全相同。这里我们有 Linux:
![](img/a4840240-de2f-457d-b638-ab11bb857ad6.png)
这是 macOS 上的结果:
![](img/017655c0-a14c-48b0-8487-3d8072dca595.png)
这是它在 Windows 上的外观:
![](img/beb936ac-71fc-4f9b-ad05-00ab198855ca.png)
在接下来的三章中，我们将更详细地了解如何使用 Docker 命令行客户端。现在，让我们通过运行以下命令来停止并移除我们的`nginx-test`容器:
```
$ docker container stop nginx-test
$ docker container rm nginx-test
```
如您所见，在我们安装了 Docker 的所有三个主机上运行简单 nginx 容器的体验完全相同。我相信你可以想象，试图在三个平台上都没有 Docker 这样的东西的情况下实现这一点是一个挑战，也是每个平台上非常不同的体验。传统上，这是当地发展环境不同的原因之一。
# Docker 和容器生态系统
如果你一直在关注 Docker 和容器的崛起，你会注意到，在过去的几年里，Docker 网站上的消息传递一直在慢慢变化，从关于什么是容器的标题，到更多地关注 Docker 作为一家公司提供的服务。
这种情况的核心驱动因素之一是，传统上一切都被归为“Docker”，这可能会令人困惑。现在，人们不需要那么多关于什么是容器或他们可以用 Docker 解决的问题的教育，该公司需要尝试并开始将自己与其他支持各种容器技术的公司区分开来。
所以，让我们试着解开 Docker 的所有东西，包括以下内容:
*   **开源项目**:Docker 启动了几个开源项目，现在由一个很大的开发者社区维护。
*   **Docker CE 和 Docker EE** :这是构建在开源组件之上的免费使用和商业支持的 Docker 工具的核心集合。
*   **Docker，Inc.** :这是为了支持和开发 Docker 核心工具而成立的公司。
我们还将在后面的章节中研究一些第三方服务。与此同时，让我们从开源项目开始，更详细地了解每一个项目。
# 开源项目
Docker，Inc .在过去两年里一直致力于开源，并向各种开源基金会和社区捐赠了大量核心项目。这些项目包括:
*   **莫比项目**是 Docker Engine 所基于的上游项目。它提供了组装一个功能齐全的容器系统所需的所有组件。
*   **Runc** 是一个用于创建和配置容器的命令行界面，并且是按照 OCI 规范构建的。
*   **容器**是一个容易嵌入的容器运行时。这也是莫比项目的核心组成部分。
*   **LibNetwork** 是一个为容器提供联网的 Go 库。
*   **公证**是一个客户端和服务器，旨在为已签名的容器映像提供一个信任系统。
*   **HyperKit** 是一个工具包，允许您将虚拟机管理程序功能嵌入到自己的应用中，目前它只支持 macOS 和 Hypervisor.framework。
*   **VPNKit** 为 HyperKit 提供 VPN 功能。
*   **DataKit** 允许您使用类似 Git 的工作流编排应用数据。
*   **SwarmKit** 是一个工具包，允许你使用与 Docker Swarm 相同的 raft 共识算法构建分布式系统。
*   **LinuxKit** 是一个框架，允许你构建和编译一个小型的可移植的 Linux 操作系统来运行容器。
*   **InfraKit** 是一个工具集合，您可以使用它来定义运行您的 LinuxKit 生成的发行版的基础设施。
就他们自己而言，你可能永远不会使用单个组件；然而，提到的每个项目都是由 Docker，Inc .维护的工具的一个组成部分。我们将在最后一章对这些项目进行更深入的讨论。
# CE 对接器和 EE 对接器
Docker，Inc .提供并支持许多工具。有些我们已经提到过，有些我们将在后面的章节中介绍。在我们完成第一章之前，我们应该对将要使用的工具有一个概念。其中最重要的是核心的 Docker 引擎。
这是 Docker 的核心，我们将介绍的所有其他工具都使用它。我们已经在本章的 Docker 安装和 Docker 命令部分使用了它。Docker Engine 目前有两个版本；有 Docker **企业版** ( **EE** )和 Docker **社区版** ( **CE** )。我们将在本书中使用 Docker CE。
从 2018 年 9 月开始，Docker CE 稳定版的发布周期将为一年两次，这意味着它将有 7 个月的维护周期。这意味着您有足够的时间来审查和规划任何升级。在撰写本文时，Docker CE 发布的当前时间表是:
*   **Docker 18.06 CE** :这是 Docker CE 季度发布的最后一期，发布于 2018 年 7 月 18 日。
*   **Docker 18.09 CE** :本次发布，定于 2018 年 9 月下旬/10 月上旬，是 Docker CE 半年发布周期的首次发布。
*   **Docker 19.03 C**E:2019 年首款支持的 Docker CE 定于 2019 年 3/4 月发布。
*   **Docker 19.09 CE**:2019 年第二个支持的版本定于 2019 年 9/10 月发布。
除了 Docker CE 的稳定版本，Docker 还将通过夜间存储库(正式的 Docker CE Edge)提供 Docker 引擎的夜间构建，并通过 Edge 渠道提供 Mac Docker 和 Windows Docker 的每月构建。
Docker 还提供以下工具和服务:
*   **Docker Compose** :允许定义和共享多容器定义的工具；详见[第五章](05.html)、*Docker 作曲*。
*   **Docker 机**:在多个平台上推出 Docker 主机的工具；我们将在[第 7 章](07.html)、*Docker 机器*中介绍这一点。
*   **Docker Hub**:Docker 映像的存储库，将在接下来的三章中介绍。
*   **Docker 商店**:Docker 官方图片和插件以及授权产品的店面。同样，我们将在接下来的三章中讨论这个问题。
*   **Docker Swarm** :多主机感知编排工具，在[第 8 章](08.html)*Docker Swarm*中有详细介绍。
*   **Mac 的 Docker**:我们在本章已经介绍了 Mac 的 Docker。
*   **Windows 的 Docker**:这一章我们已经介绍了 Windows 的 Docker。
*   **亚马逊网络服务的 Docker**:针对 AWS 的最佳实践 Docker Swarm 安装，在[第 10 章](10.html)中介绍，在公共云中运行*Docker*。
*   **Docker for Azure** :针对 Azure 的最佳实践 Docker Swarm 安装，在[第 10 章](10.html)中介绍，在公共云中运行 *Docker。*
# Docker 公司。
Docker，Inc .是为开发 Docker CE 和 Docker EE 而成立的公司。它还为 Docker EE 提供基于 SLA 的支持服务。最后，他们为那些希望将现有应用纳入 Docker 的“传统应用现代化”计划的公司提供咨询服务。
# 摘要
在本章中，我们介绍了一些您应该已经知道(或现在知道)的基本信息，以便在后面的章节中使用。我们复习了什么是 Docker 的基础知识，以及它与其他主机类型相比的表现。我们检查了安装程序，它们如何在不同的操作系统上运行，以及如何通过命令行控制它们。请务必记住查看安装程序的要求，以确保您为操作系统使用正确的安装程序。
然后，我们开始使用 Docker，并发出一些基本命令来帮助您开始。我们将在未来的章节中查看所有的管理命令，以更深入地了解它们是什么，以及如何和何时使用它们。最后，我们讨论了 Docker 生态系统和每个不同工具的职责。
在接下来的章节中，我们将了解如何构建基本容器，我们还将深入研究 Dockerfiles 和存储映像的位置，以及使用环境变量和 Docker 卷。
# 问题
1.  从哪里可以下载 Mac 的 Docker 和 Windows 的 Docker？
2.  我们使用了什么命令来下载 NGINX 映像？
3.  哪个开源项目是核心 Docker Engine 的上游？
4.  稳定的 Docker CE 版本的支持生命周期有几个月？
5.  您会运行哪个命令来了解关于 Docker 容器命令子集的更多信息？
# 进一步阅读
在本章中，我们提到了以下虚拟机管理程序:
*   macOS 虚拟机管理程序框架:[https://developer.apple.com/reference/hypervisor/](https://developer.apple.com/reference/hypervisor/)
*   hyper-V:[https://www . Microsoft . com/en-GB/云平台/服务器-虚拟化](https://www.microsoft.com/en-gb/cloud-platform/server-virtualization)
我们引用了 Docker 的以下博客文章:
*   docker cli 重构博客 post:【https://blog . docker . com/2017/01/whats-new-in-docker-1-13/
*   Docker 扩展支持公告:[https://blog . docker . com/2018/07/extending-Support-cycle-docker-community-edition/](https://blog.docker.com/2018/07/extending-support-cycle-docker-community-edition/)
接下来，我们讨论了以下开源项目:
*   莫比项目:[https://mobyproject.org/](https://mobyproject.org/)
*   runc:https://github . com/open containers/runc
*   容器 d:[https://container d . io/](https://containerd.io/)
*   LibNetwork(利比亚网络)；[https://github . com/docker/libnetwork](https://github.com/docker/libnetwork)
*   公证员:[https://github.com/theupdateframework/notary](https://github.com/theupdateframework/notary)
*   超集:t0 https://github . com/Moby/hyperkit
*   vpnket:https://github . com/Moby/vpnket
*   datakit:https://github . com/Moby/datakit
*   swamkit:https://github . com/dock/swamkit
*   linuxkit:https://github . com/linuxkit/linuxkit
*   infra kit:https://github . com/dock/infra kit
*   OCI 规格:[https://github.com/opencontainers/runtime-spec/](https://github.com/opencontainers/runtime-spec/)
最后，本章开头提到的模因可以在这里找到:
*   *在 Dev，Ops 问题中工作正常现在*-[http://www . developer mes . com/2013/12/13/工作正常-Dev-Ops-问题-现在/](http://www.developermemes.com/2013/12/13/worked-fine-dev-ops-problem-now/)