1ib/codec/codec.o:../mp3_player/1ib/codec/codec.c../mp3_player/1ib/codec/
codec.c../mp3_player/include/codec/codec.h
Implicit rule search has been done.
#
Implicit/static pattern stem:1ib/codec/codec'
#Last modified2004-04-01 22:04:08.40625
File has been updated.
#Successfully updated.
commands to execute （built-in):
$(COMPILE.C)$（OUTPUT_OPTION）$<
中间文件与后缀规则会被标示为Notatarget，其余是工作目标。每个文件将会包含注
释，用以指出make是如何处理此规则的。被找到的文件在被显示的时候将会通过标准
的vpath搜索来找出其路径。
最后一个区段被标示为VPATHSearchPaths，列出了VPATH的值以及所有的vpath模
式。
对于大规模使用eval以及用户自定义函数来建立复杂的变量和规则的makefile来说，
查看它们的输出结果通常是确认宏是否已被扩展成预期值的唯一方法。
---
## Page 256
246
第十二章
--warn-undefined-variables
这个选项会使得make在未定义的变量被扩展时显示警告信息。因为未定义的变量会被
扩展成空字符串，这常见于变量名称打错而且很长一段时间未被发现到。这个选项有个
问题，这也是为什么我很少使用这个选项的原因，那就是许多内置规则都会包含未定义
的变量以作为用户自定义值的挂钩。所以使用这个选项来运行make必然会产生许多不
是错误的警告信息，而且对用户的makefile没有什么用处。例如：
make --warn-undefined-variables -n
makefile:35:warning:undefined variable MAKECMDGOALS
makefile:45:warning:undefined variable CFLAGS
makefile:45:warning: undefined variable TARGET_ARCH
makefile:35:warning: undefined variable MAKECMDGOALS
make:warning:undefined variable CFLAGS
make: warning: undefined variable TARGET_ARCH
make:warning:undefined variableCFLAGS
make:warning:undefined variable TARGET_ARCH
make:warning:undefined variable LDFLAGS
make:warning:undefined variable TARGET_ARCH
make: warning: undefined variable LOADLIBES
make: warning:undefined variable LDLIBS
不过，此命令在需要捕获此类错误的某些场合上可能非常有用。
--debug选项
当你需要知道make如何分析你的依存图时，可以使用--debug选项。除了运行调试
器，这个选项是让你获得最详细信息的另一个方法。你有五个调试选项以及一个修饰符
可用，分别是：basic、verbose、implicit、jobs、all以及makefile。
如果调试选项被指定成--debug，就是在进行basic调试：如果调试选项被指定成
-d，就是在进行all调试；如果要使用选项的其他组合，则可以使用--debug=optionl，
option2这个以逗号为分隔符的列表，此处的选项可以是下面任何一个单词（实际上，
make只会查看第一个字母）：
basic
这是所提供的信息最不详细的基本调试功能。启用时，make会输出被发现尚未更
新的工作目标并更新动作的状态。它的输出会像下面这样：
File all does not exist.
File app/player/play_mp3 does not exist.
File app/player/play_mp3.o doesnot exist.
Must remaketarget app/player/piay_mp3.o.
---
## Page 257
makefile的调试
247
gcc...../mp3_piayer/app/player/play_mp3.c
Successfully remade target file app/player/play_mp3.o.
verbose
这个选项会设定basic选项，以及提供关于“哪些文件被分析、哪些必要条件不
需要重建等”的额外信息：
File all does not exist.
Considering target file app/player/play_mp3.
File app/player/play_mp3 does not exist.
Considering target file app/player/play_mp3.o.
File app/player/play_mp3.o does notexist.
Pruning file../mp3_player/app/player/play_mp3.c.
Pruningfile../mp3_player/app/player/play_mp3.c.
Pruningfile../mp3_player/include/piayer/play_mp3.h.
Finished prerequisites of target file app/player/play_mp3.o.
Must remake target app/player/play_mp3.o.
gcc...../mp3_player/app/player/play_mp3.c
Successfully remade target file app/player/play_mp3.o.
Pruning file app/player/play_mp3.o.
implicit
这个选项会设定basic选项，以及提供关于“为每个工作目标搜索隐含规则”的
额外信息：
File all does not exist.
File app/player/play_mp3 does not exist.
Looking for an implicit rule for app/player/play_mp3.
Trying pattern rule with stem play_mp3.
Trying implicit prerequisite app/player/play_mp3.o.
Foundan implicit rule for app/player/play_mp3.
File app/player/play_mp3.o does not exist.
Looking for an implicit rulefor app/player/play_mp3.o.
Trying pattern rule with stemplay_mp3.
Trying implicitprerequisite app/player/play_mp3.c.
Foundprerequisite app/player/play_mp3.casVPATH../mp3_player/app/
p1ayer/play_mp3.c
Foundan implicit rule for app/player/play_mp3.o.
Must remake target app/player/play_mp3.o.
gcc...../mp3_player/app/player/play_mp3.c
Successfully remade target file app/player/play_mp3.o.
jobs
这个选项会输出被make调用的子进程的细节，它不会启用basic选项的功能。
Got a SIGCHLD;1 unreaped children.
gcc...../mp3_player/app/player/play_mp3.c
Live chi1d 0x10033800 （app/player/play_mp3.o)PID 576
Got a SIGCHLD;1 unreaped children.
Reaping winning child 0x10033800 PID 576
Removing chi1d 0x10033800 PID576from chain.
---
## Page 258
248
第十二章
all
这会启用前面的所有选项，当你使用-a选项时，默认会启用此功能。
makefile
它不会启用调试信息，直到makefile被更新一一这包括更新任何的引l人文件。如
果使用此修饰符，make会在重编译makefile以及引l人文件的时候，输出被选择的
信息。这个选项会启用basic选项，al1选项也会启用此选项。
编写用于调试的代码
如你所见，并没有太多的工具可用来调试makefile，你只有几个方法可以输出若干可能
有用的信息。当这些方法都不管用时，你就得将makefile编写成可以尽量减少错误发生
的机会，或是可以为自己提供一个舞台来协助你进行调试。
这一节所提供的建议被我（有点随意地）分类成：良好的编码习惯、具保护功能的编码
以及调试技术等部分。然而一些特殊的项目，像是检查命令的结束状态，可能会被放在
良好的编码习惯中或是具保护功能的编码中，做这样的分类适当地反映出了趋势所在。
将焦点好好地放在makefile上，尽量避免简单行事。采用具保护的编码以避免makefile
被非预期的事件和环境状态所影响。最后，当缺陷出现时，使用你可以找到的用来压制
它们的每个诀窍。
“简洁就是美”（KeepItSimple）的原则（http://www.catb.org/~esr/jargon/html/K/KISS-
Principle.html）是所有良好设计的核心所在。正如你在前面几章所看到的，makefile马
上就会变得很复杂一即使是一般的工作，比如依存关系的产生。要对抗“在你的编
译系统中加人越来越多的功能”的潮流，你将会失败，但如果你只是不经思索地加入你
所发现的每个功能，失败并不会比你这么做的后果还糟。
良好的编码习惯
以我的经验来说，大部分的程序员都不会把makefile作为程序来写，因此，他们不会像
编写C++或Java时那样细心。事实上，make语言是一个完整的非程序语言。如果可靠
性和可维护性对你的编译系统来说很重要，那么请小心编写你的makefile，并且尽量遵
守良好的编码习惯。
编码健全的makefile的重点之一就是检查命令的返回状态。当然，make将会自动检查
简单的命令，但是makefile通常会使用可能不会处理失败状态的复合命令：
do:
cdi-dont-exist;\
echo*.c
---
## Page 259
makefile的调试
249
运行时，此makefile并不会因为有错误发生而终止运行，尽管这是一个必然会发生的错
误：
Smake
cd i-dont-exist;\
echo*.c
/bin/sh:line 1:cd:i-dont-exist:No such file or directory
*.c
此外，当文件名匹配表达式（globbingexpression）找不到任何的.c文件时，它会不动
声色地返回文件名匹配表达式。一个比较好的做法，就是在你编码此命令脚本时，使用
shell的功能来检查以及防止错误：
SHELL = /bin/bash
do:
cdi-dont-exist &&\
shopt -s nuliglob &&
echo*.c
现在cd的错误会被正确传送到make，所以echo命令不会被执行，而且make会因为
有错误发生而终止运行。此外，设定bash的nullglob选项，将会使得文件名匹配模式
在找不到文件时返回空字符串。（当然，你的应用程序可能比较喜欢文件名匹配模式。）
$make
cd i-dont-exist &&\
echo*.c
/bin/sh:line 1:cd:i-dont-exist:No such file or directory
make:*** [do] Error 1
另一个良好的编码习惯，就是将你的代码编排成最具可读性的形式。我所看过的
makefile，多半编排得很差，这必然会造成难以阅读的情况。下面这两段代码哪一个比
较容易阅读？
_MKDIRS:=S（she11 ford in S（REQUIRED_DIRS):do [I-d$Sd\
1]11mkdir-p$sd;done)
或：
_MKDIRS := $(she11
for d inS（REQUIRED_DIRS);
op
[[-dssd1]1Imkdir-p$sd;\
done)
如果你像大部分人那样，你将会觉得第一段代码比较难分析，不容易找到分号，很难计
算有儿句语句。这些都是必须注意到的地方。在命令脚本中，你会遇到的语法错误，多
半是由于漏掉了分号、反斜线或是其他的分隔符，比如管道（pipe）和逻辑运算符。
---
## Page 260
250
第十二章
此外请注意，并非任何分隔符被漏掉都会产生错误。例如，下面的错误都不会产生shell
的语法错误：
TAGS:
cdsrc\
ctags --recurse
disk_free:
echo"Checking free disk space...*\
df.1awk(print$s4}
把命令编排得具有可读性，将会让以上所提到的错误很容易被发现。编排用户自定义函
数的时候可以采用内缩的做法。有时候，宏扩展后的结果中，额外的空格将会造成问题。
如果是这样，你可以将它的编排结果封装在strip函数的调用中。编排一长串值时，你
可以让每个值自成一行。在每个工作目标的前面加上注释，可以提供简介以及说明参数
列表。
下一个良好的编码习惯就是大量使用变量来保存常用的值。如同在程序中一样，过度使
用文字值将会造成重复的程序代码，以及导致维护困难与缺陷。变量的另一个优点是在
执行期间，你可以基于调试的目的，让make把它们给显示出来。稍后你将会在“调试
技术”一节中看到一个不错的命令行界面。
具保护功能的编码
具保护功能的代码，就是如果你的假设或预计有一个是错误的（if测试结果永远为假、
assert函数决不会失败或追踪代码）才会执行的代码，这让你能够查看make内部工
作的状态。
事实上，你已经在本书其他地方看到过此类代码，不过为了方便起见，此处会重复加以
描述。
确认检查就是具保护功能代码的最佳范例。如下的代码范例可用来确认当前所运行的
make版本是否为3.80：
NEED_VERSION:=3.80
S(if S(fi1ter $(NEED_VERSION),$(MAKE_VERSION)),,
S(error You must be running make version $(NEED_VERSIoN).))
对JaVa应用程序来说，它可用来检查CLASSPATH中的文件。
进行确认的代码还可以用来确认某个东西是否为真，比如前一节用来创建目录的代码就
是这样。
---
## Page 261
makefile的调试
251
另一个重要的具保护功能的编码技术，就是使用“流程控制”一节所定义的assert函数。
下面是其中的若干版本：
S(call assert,condition,message)
define assert
$（if $1,,$（error Assertion failed: S2))
endef
#S(call assert-file-exists,wildcard-pattern)
define assert-file-exists
S(cal1 assert,$（wildcard $1),$1 does not exist)
endef
#$(call assert-not-null,make-variable)
define assert-not-null
$(call assert,$(S1),The variable “$1*is null)
endef
我发现在makefile中到处声明assert的调用，是找出漏掉和打错的参数以及违反其他
假定的既便宜又有效的方法。
#$（debug-enter)
debug-enter =S(if S(debug_trace),\
S（warning Entering S0($(echo-args))))
#$(debug-leave)
debug-leave = S（if $(debug_trace),S（warning Leaving $0))
comma:=，
.（o）.'..qns）s=sb-oyo
$（foreacha,123456789,*$（$a)*))