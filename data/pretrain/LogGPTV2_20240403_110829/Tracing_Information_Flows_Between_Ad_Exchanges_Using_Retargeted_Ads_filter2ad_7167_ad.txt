ing to a particular retargeted ad. To categorize a given
publisher-side chain, we must also consider the corre-
sponding shopper-side chains rooted at shop.
6.1.1 Categorization Rules
Case 1: Direct Matches.
The first chain type that
we define are direct matches. Direct matches are the
simplest type of chains that can be used to serve a re-
targeted ad. As shown in Figure 7, for us to categorize a
publisher-side chain as a direct match, it must be exactly
length two, with a direct resource inclusion request from
pub to d. d receives any cookies they have stored on the
persona inside this request, and thus it is trivial for d to
identify our persona.
On the shopper-side, the only requirement is that d ob-
served our persona browsing shop. If d does not observe
our persona at shop, then d would not serve the persona
a retargeted ad for shop. d is able to set a cookie on our
persona, allowing d to re-identify the persona in future.
We refer to direct matching chains as “trivial” because
it is obvious how d is able to track our persona and serve
a retargeted ad for shop. Furthermore, in these cases
no user information needs to be shared between ad ex-
changes, since there are no ad auctions being held on the
publisher-side.
Case 2: Cookie Matching.
The second chain type
that we define are cookie matches. As the name implies,
chains in this category correspond to instance where an
auction is held on the publisher-side, and we observe
direct resource inclusion requests between the SSP and
DSP, implying that they are matching cookies.
As shown in Figure 7, for us to categorize a publisher-
side chain as cookie matching, s and d must be adjacent
at the end of the chain. On the shopper-side, d must ob-
serve the persona at shop. Lastly, we must observe a
request from s to d or from d to s in some chain before
the retargeted ad is served. These requests capture the
moment when the two ad exchanges match their cook-
ies. Note that s → d or d → s can occur in a publisher- or
shopper-side chain; in practice, it often occurs in a chain
rooted at shop, thus fulfilling both requirements at once.
For the purposes of our analysis, we distinguish be-
tween forward (s → d) and backward (d → s) cookie
matches. Figure 2 shows an example of a forward cookie
match. As we will see, many pairs of ad exchanges en-
gage in both forward and backward matching to maxi-
mize their opportunities for data sharing. To our knowl-
edge, no prior work examines the distinction between
forward and backward cookie matching.
Case 3: Indirect Matching.
The third chain type
we define are indirect matches. Indirect matching occurs
when an SSP sends meta-data about a user to a DSP, to
help them determine if they should bid on an impression.
With respect to retargeted ads, the SSP tells the DSPs
about the browsing history of the user, thus enabling the
DSPs to serve retargets for specific retailers, even if the
DSP never directly observed the user browsing the re-
tailer (hence the name, indirect). Note that no cookie
matching is necessary in this case for DSPs to serve re-
targeted ads.
As shown in Figure 7, the crucial difference between
cookie matching chains and indirect chains is that d
never observes our persona at shop; only s observes
our persona at shop. Thus, by inductive reasoning, we
must conclude that s shares information about our per-
sona with d, otherwise d would never serve the persona
a retarget for shop.
Case 4: Latent Matching.
The fourth and final chain
type that we define are latent matches. As shown in Fig-
ure 7, the defining characteristic of latent chains is that
neither s nor d observe our persona at shop. This begs the
question: how do s and d know to serve a retargeted ad
for shop if they never observe our persona at shop? The
most reasonable explanation is that some other ad ex-
change x that is present in the shopper-side chains shares
this information with d behind-the-scenes.
We hypothesize that the simplest way for ad exchanges
to implement latent matching is by having x and d share
the same unique identifiers for users. Although x and
d are different domains, and are thus prevented by the
SOP from reading each others’ cookies, both ad ex-
changes may use the same deterministic algorithm for
generating user IDs (e.g., by relying on IP addresses or
browser fingerprints). However, as we will show, these
synchronized identifiers are not necessarily visible from
the client-side (i.e., the values of cookies set by x and d
may be obfuscated), which prevents trivial identification
of latent cookie matching.
490  25th USENIX Security Symposium 
USENIX Association
10
Type
Direct
Forward Cookie Match
Backward Cookie Match
Indirect Match
Latent Match
No Match
Unclustered
Chains
1770
24575
19388
2492
5362
775
% Chains
8449
5%
25873
69%
24994
55%
178
7%
15%
343
183
2%
Clustered
%
24%
73%
70%
1%
1%
1%
Table 1: Results of categorizing publisher-side chains,
before and after clustering domains.
Note:
Although we do not expect to see cases 3 and
4, they can still occur. We explain in § 6.1.2 that in-
direct and latent matching is mostly performed by do-
mains belonging to the same company. The remaining
few instances of these cases are probably mislabeled be-
haviorally targeted ads.
6.1.2 Categorization Results
We applied the rules in Figure 7 to all 35,448 publisher-
side chains in our dataset twice. First, we categorized
the raw, unmodified chains; then we clustered domains
that belong to the same companies, and categorized the
chains again. For example, Google owns youtube.com,
doubleclick.com, and 2mdn.net; in the clustered ex-
periments, we replace all instances of these domains with
google.com. Appendix A.1 lists all clustered domains.
Table 1 presents the results of our categorization. The
first thing we observe is that cookie matching is the most
frequent classification by a large margin. This conforms
to our expectations, given that RTB is widespread in
today’s ad ecosystem, and major exchanges like Dou-
bleClick support it [17]. Note that, for a given (s, d)
pair in a publisher-side chain, we may observe s → d and
d → s requests in our data, i.e., the pair engages in for-
ward and backward cookie matching. This explains why
the percentages in Table 1 do not add up to 100%.
The next interesting feature that we observe in Table 1
is that indirect and latent matches are relatively rare (7%
and 15%, respectively). Again, this is expected, since
these types of matching are more exotic and require a
greater degree of collaboration between ad exchanges to
implement. Furthermore, the percentage of indirect and
latent matches drops to 1% when we cluster domains. To
understand why this occurs, consider the following real-
world example chains:
Publisher-side: pub → rubicon → googlesyndication
Shopper-side: shop → doubleclick
According to the rules in Figure 7, this appears to be a
latent match, since Rubicon and Google Syndication do
not observe our persona on the shopper-side. However,
after clustering the Google domains, this will be clas-
sified as cookie matching (assuming that there exists at
least one other request from Rubicon to Google).
The above example is extremely common in our
dataset: 731 indirect chains become cookie match-
ing chains after we cluster the Google domains alone.
Importantly, this finding provides strong evidence that
Google does in fact use latent matching to share user
tracking data between its various domains. Although this
is allowed in Google’s terms of service as of 2014 [26],
our results provide direct evidence of this data sharing
with respect to serving targeted ads. In the vast major-
ity of these cases, Google Syndication is the DSP, sug-
gesting that on the server-side, it ingests tracking data
and user identifiers from all other Google services (e.g.,
DoubleClick and Google Tag Manager).
Of the remaining 1% of chains that are still classified
as indirect or latent after clustering, the majority appear
to be false positives. In most of these cases, we observe
s and d doing cookie matching in other instances, and
it seems unlikely that s and d would also utilize indirect
and latent mechanisms. These ads are probably misla-
beled behaviorally targeted ads.
The final takeaway from Table 1 is that the number of
uncategorized chains that do not match any of our rules
is extremely low (1-2%). These publisher-side chains are
likely to be false positives, i.e., ads that are not actually
retargeted. These results suggest that our image labeling
approach is very robust, since the vast majority of chains
are properly classified as direct or cookie matches.
6.2 Cookie Matching
The results from the previous section confirm that cookie
matching is ubiquitous on today’s Web, and that this in-
formation sharing fuels highly targeted advertisements.
Furthermore, our classification results demonstrate that
we can detect cookie matching without relying on se-
mantic information about cookie matching mechanisms.
In this section, we take a closer look at the pairs of ad
exchanges that we observe matching cookies. We seek
to answer two questions: ﬁrst, which pairs match most
frequently, and what is the directionality of these rela-
tionships? Second, what fraction of cookie matching re-
lationships will be missed by the heuristic detection ap-
proaches used by prior work [43, 2, 54, 21]?
Who Is Cookie Matching?
Table 2 shows the top 25
most frequent pairs of domains that we observe match-
ing cookies. The arrows indicate the direction of match-
ing (forward, backward, or both). “Ads” is the number
of unique retargets served by the pair, while “Chains”
is the total number of associated publisher-side chains.
We present both quantities as observed in our complete
dataset (containing 5,102 retargets), as well as the subset
USENIX Association  
25th USENIX Security Symposium  491
11
Participant 1
Participant 2
criteo ↔ googlesyndication
criteo ↔ doubleclick
criteo ↔ adnxs
criteo ↔ googleadservices
criteo ↔ rubiconproject
criteo ↔ servedbyopenx
mythings ↔ mythingsmedia
criteo ↔ pubmatic
doubleclick ↔ steelhousemedia
mathtag ↔ mediaforge
netmng ↔ scene7
criteo ↔ casalemedia
criteo ↔ clickfuse
criteo ↔ bidswitch
doubleclick ↔ googlesyndication
googlesyndication ↔ adsrvr
rubiconproject ↔ steelhousemedia
amazon-adsystem ↔ ssl-images-amazon
googlesyndication ↔ steelhousemedia
adtechus → adacado
googlesyndication ↔ 2mdn
atwola → adacado
adroll ↔ adnxs
googlesyndication ↔ adlegend
adnxs ↔ esm1
All Data
AMT Only
←: US
↔: E, US
←: US
←: US
←: E, US
Heuristics
↔: US
↔: E, US
↔: E, US
↔: US
Ads
370
220 →: E, US ←: DC, US
174
214 →: E, US
113
71
→: E, US
1
37 →: E, US
16
→: US
13
32
→: E
31 →: E, US
62
13
15 →: E, US
24
19
7
16
18
18
5
7
20
0
↔: US
↔: US
↔: US
↔: E
-
-
-
←: -
←: US
←: US
→: US
-
-
-
←: -
←: -
→: US
Chains
9090
3610
3263
2184
1586
707
478
363
362
360
267
200
195
126
112
107
86
98
47
36
40
32
31
31
46
Ads
1887
1144
1066
1030
749
460
52
246
27
124
162
119
81
99
78
29
30
33
22
18
19
6
8
22
1
Chains