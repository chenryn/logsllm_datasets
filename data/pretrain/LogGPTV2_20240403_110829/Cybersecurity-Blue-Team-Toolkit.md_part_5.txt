------------------------------------------------------------------------
:::
:::
```{=html}
```
Here are two more commands to try:
-   [`ipconfig /displaydns`: This may scroll for a while because this is
    a record of all the domain names and their IP addresses you have
    visited on a host.]{#c01.xhtml#c01-li-0016}
-   [`ipconfig /flushdns`: If you start encountering HTML 404 error
    codes, you may need to flush your cache clean. This will force your
    host to query nameservers for the latest and greatest
    information.]{#c01.xhtml#c01-li-0017}
:::
::: section
[]{#c01.xhtml#c01-sec-0007}
## NSLookup {#c01.xhtml#head-2-6}
The main use of `nslookup` is to help with any DNS issues you may have.
You can use it to find the IP address of a host, find the domain name of
an IP address, or find mail servers on a domain. This tool can be used
in an interactive and a noninteractive mode. In [Lab
1.3](#c01.xhtml#c01-fea-0004){#c01.xhtml#R_c01-fea-0004}, you\'ll use
`nslookup`.
```{=html}
```
::: {.top .hr}
------------------------------------------------------------------------
:::
::: {.section .feature3}
[]{#c01.xhtml#c01-fea-0004}
### [LAB 1.3](#c01.xhtml#R_c01-fea-0004){role="doc-backlink"}: NSLOOKUP {#c01.xhtml#head-2-7}
::: section
[]{#c01.xhtml#c01-sec-0008}
1.  [Open a command prompt or a terminal
    window.]{#c01.xhtml#c01-li-0018}
2.  [To work in interactive mode, type `nslookup` at the prompt and
    press Enter. You will get an `nslookup` prompt, as you see in
    [Figure 1.4](#c01.xhtml#c01-fig-0004){#c01.xhtml#R_c01-fig-0004}. To
    escape the prompt, press Ctrl+C.]{#c01.xhtml#c01-li-0019}
    ![[**[Figure 1.4](#c01.xhtml#R_c01-fig-0004){#c01.xhtml#c01-fig-0004
    role="doc-backlink"}:**]{.figureLabel} Using
    `nslookup`](Images/c01f004.jpg){.center width="269" height="94"}
3.  [To work in noninteractive mode, type `nslookup www.example.com` at
    the prompt to acquire DNS information for the specific
    []{#c01.xhtml#Page_8 .pagebreak title="8" role="doc-pagebreak"}site
    such as [Figure
    1.5](#c01.xhtml#c01-fig-0005){#c01.xhtml#R_c01-fig-0005}.]{#c01.xhtml#c01-li-0020}
    ![[**[Figure 1.5](#c01.xhtml#R_c01-fig-0005){#c01.xhtml#c01-fig-0005
    role="doc-backlink"}:**]{.figureLabel} Using `nslookup` on a
    URL](Images/c01f005.jpg){.center width="420" height="200"}
4.  [Now try `nslookup` with one of the IP addresses displayed in your
    terminal window attributed to
    [`www.wiley.com`](http://www.wiley.com). This will do a reverse
    lookup for the IP address and resolve to a domain
    name.]{#c01.xhtml#c01-li-0021}
5.  [To find specific type assets, you can use
    `nslookup –querytype=mx www.example.com`. In [Figure
    1.6](#c01.xhtml#c01-fig-0006){#c01.xhtml#R_c01-fig-0006}, you see
    the result of using `qureytype=mx`.]{#c01.xhtml#c01-li-0022}
    ![[**[Figure 1.6](#c01.xhtml#R_c01-fig-0006){#c01.xhtml#c01-fig-0006
    role="doc-backlink"}:**]{.figureLabel} Using `nslookup` with
    `‐querytype=mx`](Images/c01f006.jpg){.center width="497"
    height="397"}
Instead of `–querytype=mx`, you can use any of the following:
  --------- ----------------------------------------------------------
  `HINFO`   Specifies a computer\'s CPU and type of operating system
  `UNIFO`   Specifies the user information
  `MB`      Specifies a mailbox domain name
  `MG`      Specifies an email group member
  `MX`      Specifies the email server
  --------- ----------------------------------------------------------
:::
::: {.bottom .hr}
------------------------------------------------------------------------
:::
:::
```{=html}
```
:::
::: section
[]{#c01.xhtml#c01-sec-0009}
## Tracert {#c01.xhtml#head-2-8}
[]{#c01.xhtml#Page_9 .pagebreak title="9" role="doc-pagebreak"}So, now
you know that all machines that are on a network need to have an IP
address. I live in Denver, Colorado, and one of my best friends, Ryan,
lives in Albuquerque, New Mexico. When I send him a message, it does not
travel from my house through the wires directly to his house. It goes
through "hops" (and not the beer kind, unfortunately for him). These
hops are the routers between us.
Tracert is a cool diagnostic utility. It will determine the route the
message takes from Denver to Albuquerque by using ICMP echo packets sent
to the destination. You\'ve seen ICMP in action before---with the `ping`
command.
ICMP is one of the Internet\'s original protocols used by network
devices to send operational information or error messages. ICMP is not
usually used to send data between computers, with the exception of
`ping` and `traceroute`. It is used to report errors in the processing
of datagrams.
Each router along the path subtracts the packets TTL value by 1 and
forwards the packet, giving you the time and the intermediate routers
between you and the destination. Tracert will print the trace of the
packet\'s travels.
Why is this an important part of your toolkit? This is how you find out
where a packet gets stopped or blocked on the enterprise network. There
may be a router with a configuration issue. Firewalls can be configured
to filter packets. Perhaps your website is responding slowly. If packets
are being dropped, this will be displayed in the tracert as an asterisk.
This is a good tool when you have many paths that lead to the same
destination but several intermediary routers are involved.
One caveat before [Lab
1.4](#c01.xhtml#c01-fea-0005){#c01.xhtml#R_c01-fea-0005}: As I mentioned
previously, most of my strengths lie in Windows machines. If you are on
a Linux or Mac/Unix‐type operating system (OS), then you will want to
use the tool `traceroute`. The commands `tracert` and `traceroute` are
basically the same thing. The difference lies in which OS you are
troubleshooting. If you want to get supremely technical, in Linux the
command sends a UDP packet. In Windows, it sends an ICMP echo request.
```{=html}
```
::: {.top .hr}
------------------------------------------------------------------------
:::
::: {.section .feature3}
[]{#c01.xhtml#c01-fea-0005}
### [LAB 1.4](#c01.xhtml#R_c01-fea-0005){role="doc-backlink"}: TRACERT {#c01.xhtml#head-2-9}
::: section
[]{#c01.xhtml#c01-sec-0010}
1.  [Open a command prompt or a terminal
    window.]{#c01.xhtml#c01-li-0023}
2.  [At the command prompt, type `tracert 8.8.8.8` and press
    Enter.]{#c01.xhtml#c01-li-0024}
In [Figure 1.7](#c01.xhtml#c01-fig-0007){#c01.xhtml#R_c01-fig-0007}, you
can see the hops my machine takes to reach that public Google DNS
server. How many hops does yours take?[]{#c01.xhtml#Page_10 .pagebreak
title="10" role="doc-pagebreak"}
![[**[Figure 1.7](#c01.xhtml#R_c01-fig-0007){#c01.xhtml#c01-fig-0007
role="doc-backlink"}:**]{.figureLabel} Using `tracert`, counting
hops](Images/c01f007.jpg){.center width="646" height="318"}
1.  [Now try `tracert –d 8.8.4.4`.]{#c01.xhtml#c01-li-0025}
This is another public Google DNS server, but now tracert will not try
to resolve DNS while counting the hops.
1.  [For fun, try `tracert 127.0.0.1`. Why is it only one
    hop?]{#c01.xhtml#c01-li-0026}
:::
::: {.bottom .hr}
------------------------------------------------------------------------
:::
:::
```{=html}
```
:::
::: section
[]{#c01.xhtml#c01-sec-0011}
## NetStat {#c01.xhtml#head-2-10}
Mathematical statistics is the collection, organization, and
presentation of data to be used in solving problems. When you analyze
statistics, you are going to use probability to fix issues. For example,
in a room of 23 people, there is a 50 percent probability that two of
those people share the same birthday. In cybersecurity, a birthday
attack is a type of cryptographic attack that exploits the math behind
the birthday statistic. This attack can be used to find collisions in a
hash function. In our world of networking, learning your network
statistics can be quite valuable.
NetStat is a network utility tool that displays networking connections
(incoming and outgoing), routing tables, and some other details such as
protocol statistics. It will help you gauge the amount of network
traffic and diagnose slow network speeds. Sounds simple, yes? From a
cybersecurity standpoint, how quickly can you tell which ports are open
for incoming connections? What ports are currently in use? What is the
current state of connections that already exist?
The output from the `netstat` command is used to display the current
state of all the connections on the device. This is an important part of
configuration and troubleshooting. NetStat also has many parameters to
choose from to answer the questions presented in the previous paragraph.
One thing to remember about the parameters discussed next is that when
you type them into your `cmd` shell, you can literally squish them
together. For example, when I am teaching my Metasploit Pro class, we
launch a proxy pivot via a Meterpreter shell and scan another network
segment. (That might sound like gibberish now, but just
[]{#c01.xhtml#Page_11 .pagebreak title="11" role="doc-pagebreak"}finish
the book.) How do you know what is actually transpiring on the
compromised system? Using the `netstat` command and the options `–a` for
all and `–n` for addresses and ports, you will have a list of all active
network conversations this machine is having, as shown in [Figure
1.8](#c01.xhtml#c01-fig-0008){#c01.xhtml#R_c01-fig-0008}.
![[**[Figure 1.8](#c01.xhtml#R_c01-fig-0008){#c01.xhtml#c01-fig-0008
role="doc-backlink"}:**]{.figureLabel} NetStat finding active
connections](Images/c01f008.jpg){.center width="521" height="421"}
To translate the figure, when running `netstat` on your host, you may
see both 0.0.0.0 and 127.0.0.1 in this list. You already know what a
loopback address is. A loopback address is accessible only from the
machine you\'re running `netstat` on. The 0.0.0.0 is basically a "no
particular address" placeholder. What you see after the 0.0.0.0 is
called a *port*.
One of my favorite explanations of ports is that you have 65,536 windows
and doors in your network ranging from 0 to 65,535. Computers start
counting at 0. Network admins are constantly yelling, "Shut the windows
and close the doors---you\'re letting the data out!" Ports can be TCP or
UDP. Simply put, TCP means there is a connection made between the host
and the destination. UDP doesn\'t worry about whether there is a
connection made. Both TCP and UDP have 65,535 ports available to them.
This was the highest number that could be represented by a 16‐bit, or
2‐byte, number. You may see this represented mathematically as 2^16^ --
1.
The Internet Assigned Numbers Authority (IANA) maintains an official
assignment of port numbers for specific uses. Sometimes this list
becomes antiquated at the same time new technologies are becoming
available. Some of the most common ones you might see are the
"well‐known" ports, which are 0--1023. Looking at the list in the
previous figure, you see this machine is listening on port 135. Port 135
is traditionally used for a service called `epmap/loc‐srv`. That should
tell you, among other things in [Figure 1.8](#c01.xhtml#c01-fig-0008),
that this is a []{#c01.xhtml#Page_12 .pagebreak title="12"
role="doc-pagebreak"}Windows host. When a Windows host wants to connect
to an RPC service on a remote machine, it checks for port 135.
The next port that is listening is 443. Most IT professionals memorize
this port early in their career. Port 443 is Hypertext Transfer Protocol
over TLS/SSL---better known as HTTPS. HTTPS is the authentication of a
website that is being accessed and protecting the confidentiality of the
data being exchanged. Ports from 1023 all the way up to 49151 are
"registered" ports. Above that, you have dynamic or private ports.
NetStat is an abbreviation for "network statistics." If a host is not
listening on the correct port for a specific service, then no
communication can occur. Take another step in your network path, and
these ports may be listening, but this does not mean that a firewall is
allowing the traffic to get to the device. To test that hypothesis, you
can temporarily disable your host‐based firewall causing the networking
issue.
Among my favorite `netstat` commands are the statistics options shown in
[Figure 1.9](#c01.xhtml#c01-fig-0009){#c01.xhtml#R_c01-fig-0009}. In
[Lab 1.5](#c01.xhtml#c01-fea-0006){#c01.xhtml#R_c01-fea-0006}, you\'ll
use the `netstat` command.[]{#c01.xhtml#Page_13 .pagebreak title="13"
role="doc-pagebreak"}
![[**[Figure 1.9](#c01.xhtml#R_c01-fig-0009){#c01.xhtml#c01-fig-0009
role="doc-backlink"}:**]{.figureLabel} NetStat
statistics](Images/c01f009.jpg){.center width="462" height="678"}
```{=html}
```
::: {.top .hr}
------------------------------------------------------------------------
:::
::: {.section .feature3}
[]{#c01.xhtml#c01-fea-0006}
### [LAB 1.5](#c01.xhtml#R_c01-fea-0006){role="doc-backlink"}: NETSTAT {#c01.xhtml#head-2-11}