多的getter方法来取得新增的状态。
是的。两种做法都有各自的优点。我注意到Java内置
的Observer模式两种做法都支持。
真的吗？我们得去瞧瞧
太好了，或许我会看到一个“拉”的好例子，因而改
变我的想法。
什么？我们会有意见相同的一天？不会吧！
你现在的位置
63
---
## Page 100
Java内置的观察者模式
使围Java内置的
观察者模式
有了Java内置的支持，
到目前为止，我们已经从无到有地完成了
你只需要扩展（继承）0b-
观察者模式，但是，JavaAPI有内置的观
servable，并告诉它何时该通知
观察者，一切就完成了，剩下的
察者模式。java.util包（package）内包含最
事API会帮你做。
基本的Observer接口与Observable类，这和
我们的Subject接口与Observer接口很相似。
Observer接口与Observable类使用上更方便，
因为许多功能都已经事先准备好了。你甚至
可以使用推（push）或拉（pull）的方式传
送数据，稍后就会看到这样的例子。
为了更了解java.uitl.Observer和java.util.
Observable，看看下面的图，这是修改后的
气象站00设计。
这个看起来应该很熟悉
为了精简起见，我
其实，它和之前的类图
们在此没有把
Observa6le类追踪所有的观
完全一样。
DisplayElement接
察老，并逐知他们。
给制出来，但是所
O6serva6le是一个
terfaceo
有的布告板仍然必
Observable
Observer
“类”，而不是
()jeAesqOppe
update()
须实现此接口。
一个接口，所以
deleteObserver()
△
WeatherData扩展了
notifyObservers()
setChanged()
O6serva6le主题。
GeneralDisplay
StatisticsDisplay
ForecastDisplay
update()
update()
update()
display0)
display0
display)
WeatherData
getTemperature()
getHumidty()
7
个
这个方法你可能会
getPressure()
觉得隔生，我们等
具体的观察老所定义的update（）方法需爱做出一些
一下就会说明…
改变，但是基本上还是一样的想法：有一个共同的
这就是我们以前所称的“主题”
Observer接口，提供了一个被主题调用的pdate（）方
（Subject），从今以后也可以改称
法。
为“可观察老”（Observa6le）。我们
不需要在此提供resister()、remove(）和
notityO6senvets(）方法，固为我们已经从超
类继承了这些行为。
64
第2章
---
## Page 101
观察者模式
Java内置的观察者模式如何运作
Java内置的观察者模式运作方式，和我们在气象站中的实现类似，但有一些小差异。最明
显的差异是WeatherData（也就是我们的主题）现在扩展自Observable类，并继承到一些增
加、删除、通知观察者的方法（以及其他的方法）。Java版本的用法如下：
如何把对象变成观察者
如同以前一样，实现观察者接口（java.uitl.Observer），然后调用任何Observable对
象的addObserverO方法。不想再当观察者时，调用deleteObserverO方法就可以了。
可观察者要如何送出通知.
首先，你需要利用扩展java.util.Observable接口产生“可观察者”类，然后，需要两
个步骤：
①先调用setChanged0方法，标记状态已经改变的事实。
当通知时，此版本可以
②然后调用两种notifyObservers(方法中的一个：
传送任何的数据对象给
每一个观察者。
notifyobservers()
或notifyobservers（object arg)
观察者如何接收通知…
同以前一样，观察者实现了更新的方法，但是方法的签名不太一样：
dataobjec
update(Observable o, Object arg)
>
主题本身当作第一个变量。
好让观察者知道是哪个主
这正是传入notiyO6servers（）的数据对象。
题通知它的。
如果没有说明则为空。
notifyObservers（arg）方法。否则，观察者就必须从可观察者对象中“拉”（pull）数据。
如何拉数据？我们再做一遍气象站，你很快就会看到。
你现在的位置》
65
---
## Page 102
幕后花絮
等等，在开跆讨论
拉数据之前，我想知道
setChanged(）方法是怎么一回
事？为什么以前不需要
它？
setChanged(方法用来标记状态已经改变的事实，好让notifyObserversO知道当它被调
用时应该更新观察者。如果调用notifyObserversO之前没有先调用setChangedO，观察者
就“不会”被通知。让我们看看Observable内部，以了解这一切：
setChanged(）方法把changed标志设
setChangedO{
changed = true
tre。
notifyObservers(Objectarg){
motiyObservets(）只金在
Observable类的伪
if（changed)（
代码
for every observer on thelist{
call update (this, arg)
察者。
changed =false
在通知观察者之后，把
changed标志设回salse。
notifyObserversO{
notifyObservers(null)
1
这样做有其必要性。setChangedO方法可以让你在更新观察者时，有更多的弹性，你可以更
适当地通知观察者。比方说，如果没有setChanged(方法，我们的气象站测量是如此敏锐，
以致于温度计读数每十分之一度就会更新，这会造成WeatherData对象持续不断地通知观察
者，我们并不希望看到这样的事情发生。如果我们希望半度以上才更新，就可以在温度差
距到达半度时，调用setChangedO，进行有效的更新。
你也许不会经常用到此功能，但是把这样的功能准备好，当需要时马上就可以使用。总之，
你需要调用setChanged()，以便通知开始运转。如果此功能在某些地方对你有帮助，你可能
也需要clearChanged（方法，将changed状态设置回false。另外也有一个hasChanged（方法，
告诉你changed标志的当前状态。
66
第2章
---
## Page 103
观察者模式
利用内置的支持重做气象站
首先，把WeatherData改成使用
java.util.observable
记得要导入（import）正确的
②
我们不再需要追踪观察老了，也不
Observer/Observable.
3
我们现在正在继承
需要管理注册与剧除（让超类代劳
Observable。
即可）。所以我们把注册、添加
通知的相关代码别隐。
import java.util.Observable;
import java.util.observer;
public class WeatherData extends Observable{
4
我们的构造器不再需要为了
private float temperature;
private float humidity;
记住观察者们而建立数据结
private float pressure;
构了。
public WeatherData()(}
★注意：我们没有调用
public void measurementsChanged() (
notisyO6servers(）传送数据对
setChanged();
象，这表示我们采用的做法
notifyobservers ();
★
是“拉”。
public void setMeasurements(float temperature, float/humidity, float pressure){
this.temperature = temperature;
this.humidity = humidity;
this.pressure = pressure;
5
在误用notisuObserves（）之前，要先调
measurementsChanged () ;
用setChansed（）来指示状态已经改变
public float getTemperature()(
return temperature;
1
public float getHumidity()
return humidity;
这些并不是新方法，只是因为我们
6
要使用“拉”的做法，所以才提醒
public float getPressure() {
return pressure;
你有这些方法。察者会利用这些方
法取得WeatherData对象的状态。
你现在的位置
67
---
## Page 104
重做目前状况布告板
现在，让我们重做CurrentConditionsDisplay
再说一连，记得要导入（impo:t）正确的
Observen/Obsetvable
②我们现在正在实现java.util.Observet接口。
import java.util.observable;
import java.util.observer;
public class CurrentConditionsDisplay implements Observer, DisplayElement {
Observable observable;
现在构造器常墓一
private float temperature;
Obserwable它参数，并将
private float humidity;
CurrentCondi-tionsDisplay对
public CurrentConditionsDisplay(Observable observable)(
象誉记成为观察者。
this.observable = observable;
observable.addobserver(this);
1
改资update（）方法，增
public void update(Observable obs, Object arg)
加O6serva6le和数据对
if (obs instanceof WeatherData){
象作为参数。
WeatherData weatherData =(WeatherData)obs;
this.temperature =weatherData.getTemperature()
this.humidity = weatherData.getHumidity();
display() ;
public void display(){
5
在update（）中：先确定可
System.out.println("Current conditions:"+temperature
+"F degrees and "+ humidity +"% humidity");
观察老属于WeatherData类
型.然后利用setter方法
获取温度和溶度测量值
最后调用display（）。
68
第2章
---
## Page 105
代码帖
观察者模式
ForecastDisplay类的代码小纸片在冰箱上被弄乱了。你能够重
新排列它们，好恢复原来的样子吗？有些大括号掉到地上了，
因为太小捡起来不易，所以如果你觉得需要大括号时，可以自
行加上。
public ForecastDisplay(Observable
display() ;
observable)
observable.addobserver (this) ;
if (observable instanceof WeatherData)
public class ForecastDisplay implements
Observer, DisplayElement {
public void display()(
//这里显示代码
 weatherData.getPressu
lastPressure
currentPressure
private float currentPressure
private float lastPressure;
=29.92f；
WeatherData weatherData
(WeatherData) observable;
public void update (Observable observable,
Object arg)(
import java,util,0bservable;
import java.util.observer;
你现在的位置》
69
---
## Page 106
测试驱动
运行新的代码
让我们运行新的代码，以确定它是对的.
File EditWindow Help TryTihisAtH
%java WeatherStation
Forecast:Improving weather on the way!
Avg/Max/Min temperature=80.0/80.0/80.0
Current conditions:80.0F degrees and 65.0%humidity
Forecast:Watch out for cooler,rainyweather
Avg/Max/Min temperature=81.0/82.0/80.0
Current conditions:82.0F degrees and 70.0%humidity
Forecast:More of the same
Avg/Max/Min temperature=80.0/82.0/78.0
Current conditions:78.0F degrees and 90.0% humidity
%o
嗯！你注意到差别了吗？再看一次·..
你会看到相同的计算结果，但是奇怪的地方在于，文字输出的次序不一样。怎么
会这样呢？在继续之前，请花一分钟的时间思考
不要依赖于观察者被通知的次序
java.uitl.Observable实现了它的notifyObservers(方法，这导致了通知观察者的次
序不同于我们先前的次序。谁也没有错，只是双方选择不同的方式实现罢了。
但是可以确定的是，如果我们的代码依赖这样的次序，就是错的。为什么呢？因
为一旦观察者/可观察者的实现有所改变，通知次序就会改变，很可能就会产生错
误的结果。这绝对不是我们所认为的松耦合。
70
第2章
---
## Page 107
观察者模式
难递java.util.observ
able递反了我们的00设计原
则：针对接口编程，而非针
对实现编程？
java.util.Observable的黑暗面
是的，你注意到了！如同你所发现的，可观察者是一个“类”而不是一个“接
口”，更糟的是，它甚至没有实现一个接口。不幸的是，java.util.Observable的实现
有许多问题，限制了它的使用和复用。这并不是说它没有提供有用的功能，我们只
是想提醒大家注意一些事实。
Observable是一个类
你已经从我们的原则中得知这不是一件好事，但是，这到底会造成什么问题呢？
首先，因为Observable是一个“类”，你必须设计一个类继承它。如果某类想同时
具有Observable类和另一个超类的行为，就会陷人两难，毕竞Java不支持多重继承。
这限制了Observable的复用潜力（而增加复用潜力不正是我们使用模式最原始的动
机吗？）。
再者，因为没有Observable接口，所以你无法建立自己的实现，和Java内置的
ObserverAPI搭配使用，也无法将java.util的实现换成另一套做法的实现（比方说，
Observable将关键的方法保护起来
如果你看看ObservableAPI，你会发现setChangedO方法被保护起来了（被定义成
protected）。那又怎么样呢？这意味着：除非你继承自Observable，否则你无法
创建Observable实例并组合到你自己的对象中来。这个设计违反了第二个设计原
则：“多用组合，少用继承”。
做什么呢？
如果你能够扩展java.util.Observable，那么Observable“可能”可以符合你的需求。
PD
否则，你可能需要像本章开头的做法那样自已实现这一整套观察者模式。不管用
哪一种方法，反正你都已经熟悉观察者模式了，应该都能善用它们。
你现在的位置
71
---
## Page 108
观察者与Swing
在JDK中，还有哪些地方可以找到
观察者模式
在JDK中，并非只有在java.util中才能找到观察者模式，其实在JavaBeans和