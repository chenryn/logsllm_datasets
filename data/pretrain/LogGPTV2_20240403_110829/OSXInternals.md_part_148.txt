### Audio CD and Track Names

When an audio CD is mounted, the system attempts to retrieve the names of the audio tracks on the disc. If this process fails, the default names "Audio CD" and "Audio Track" are used for the album and track names, respectively. The `mount` utility uses the `mount()` system call to pass these names to the `cddafs` kernel extension, which creates a file system view from the audio tracks on the disc. Each track's filename follows the format `.aiff`, and the album name is used as the volume name. Additionally, the kernel extension creates an in-memory file called `.TOC.plist`, which appears in the root directory along with the track files and contains XML-formatted table-of-contents data for the disc.

**Note:** CD-DA stands for Compact Disc Digital Audio.

Example:
```sh
$ cat /Volumes/Joshua Tree/.TOC.plist
...
Sessions
First Track
1
Last Track
11
Leadout Block
226180
Session Number
1
Session Type
0
Track Array
...
```

### deadfs: Revocation of Access

The `deadfs` file system facilitates the revocation of access, such as to a controlling terminal or a forcibly unmounted file system. The `revoke()` system call invalidates all open file descriptors referring to a given pathname, causing the corresponding vnode to be dissociated from the underlying file system. Thereafter, the vnode is associated with `deadfs`. The `launchd` program uses `revoke()` to prepare a controlling terminal while starting a session.

The VFS layer (see Section 11.6) uses the `vclean()` function [bsd/vfs/vfs_subr.c] to dissociate the underlying file system from a vnode. This involves removing the vnode from any mount list, purging the name-cache entry, cleaning any associated buffers, and eventually reclaiming the vnode for recycling. The vnode is then "moved" to the dead file system (`deadfs`), and its vnode operations vector is set to that of the dead file system.

**Code Example:**
```c
// bsd/vfs/vfs_subr.c
static void
vclean(vnode_t vp, int flags, proc_t p)
{
    ...
    if (VNOP_RECLAIM(vp, &context))
        panic("vclean: cannot reclaim");
    ...
    vp->v_mount = dead_mountp; // move to the dead file system
    vp->v_op = dead_vnodeop_p; // vnode operations vector of the dead file system
    vp->v_tag = VT_NON;
    vp->v_data = NULL;
    ...
}
```

Most operations in `deadfs` return an error, with a few exceptions:
- `close()` trivially succeeds.
- `fsync()` trivially succeeds.
- `read()` returns end-of-file for character devices but an `EIO` error for all others.

### devfs: Device File System

The device file system (`devfs`) provides access to the kernel's device namespace in the global file system namespace, allowing device entries to be dynamically added and removed. The I/O Kit's `IOStorageFamily` uses `devfs` functions to add and remove block and character nodes corresponding to media devices as they are attached and detached.

`devfs` is allocated, initialized, and mounted from within the Mac OS X kernel during BSD initialization. By default, it is mounted on the `/dev/` directory. Additional instances can be mounted later from user space using the `mount_devfs` program.

Example:
```sh
$ mkdir /tmp/dev
$ mount_devfs devfs /tmp/dev
$ ls /tmp/dev
bpf0 ptyte ttyr4
bpf1 ptytf ttyr5
...
$ umount /tmp/dev
```

During bootstrapping, VFS initialization iterates over each built-in file system, calling the file system's initialization function, which is `devfs_init()` [bsd/miscfs/devfs/devfs_vfsops.c] for `devfs`. Shortly afterward, the kernel mounts `devfs`. `devfs_init()` creates device entries for the following devices: `console`, `tty`, `mem`, `kmem`, `null`, `zero`, and `klog`.

`devfs` redirects most of its vnode operations to `specfs` (see Section 11.7.16).

### fdesc: File Descriptor File System

The `fdesc` file system, typically mounted on `/dev/fd/`, provides a list of all active file descriptors in the calling process. For example, if a process has descriptor number `n` open, the following two function calls will be equivalent:

```c
int fd;
...
fd = open("/dev/fd/n", ...); /* case 1 */
fd = dup(n); /* case 2 */
```

In Mac OS X versions older than 10.4, the `/etc/rc` startup script mounts the `fdesc` file system as a union mount on `/dev/`. Starting with Mac OS X 10.4, `fdesc` is mounted by `launchd` instead.

**Code Example:**
```c
// launchd.c
...
if (mount("fdesc", "/dev", MNT_UNION, NULL) == 1)
...
```

The mount point in `launchd`'s invocation of the `mount()` system call is `/dev/` (not `/dev/fd/`). The `fd/` directory is maintained by the `fdesc` file system as one of the entries in its root directory. Besides `fd/`, it also maintains three symbolic links: `stdin`, `stdout`, and `stderr`, which point to `fd/0`, `fd/1`, and `fd/2`, respectively. Multiple instances of `fdesc` can exist.

Example:
```sh
$ mkdir /tmp/fdesc
$ mount_fdesc fdesc /tmp/fdesc
$ ls -l /tmp/fdesc
total 4
dr-xr-xr-x 2 root wheel 512 Oct 23 18:33 fd
lr--r--r-- 1 root wheel 4 Oct 23 18:33 stderr -> fd/2
lr--r--r-- 1 root wheel 4 Oct 23 18:33 stdin -> fd/0
lr--r--r-- 1 root wheel 4 Oct 23 18:33 stdout -> fd/1
```

The functionality of `fdesc` is similar to Linux's `/proc/self/fd/` directory, which allows a process to access its own open file descriptors. Linux systems also have `/dev/fd/` symbolically linked to `/proc/self/fd/`.

### specfs and fifofs: Special Files and Named Pipes

Special files (devices) and named pipes (fifos) can reside on any file system that supports such files. Although the host file system maintains the names and attributes of special files, it may not handle the operations performed on them. Many operations relevant for regular files may not make sense for special files. Additionally, multiple special files with the same major and minor numbers may exist with different pathnames on a file system or even on different file systems. It must be ensured that each of these files (essentially a device alias) unambiguously refers to the same underlying device.

Ideally, accesses to device files should be directly mapped to their underlying devices, i.e., to the respective device drivers. The `specfs` layer, introduced in SVR4, provides a solution: it implements special-file vnode operations that can be used by any file system. For example, a block or character special file on an HFS+ volume, when HFS+ needs a new vnode during a lookup operation, calls `hfs_getnewvnode()` [bsd/hfs/hfs_cnode.c]. This function checks if it is a fifo or a special file and arranges for the vnode to be created with the appropriate vnode operations table.

**Code Example:**
```c
// bsd/hfs/hfs_cnode.c
int
hfs_getnewvnode(struct hfsmount *hfsmp, ...)
{
    ...
    if (vtype == VFIFO )
        vfsp.vnfs_vops = hfs_fifoop_p; // a fifo
    else if (vtype == VBLK || vtype == VCHR)
        vfsp.vnfs_vops = hfs_specop_p; // a special file
    else
        vfsp.vnfs_vops = hfs_vnodeop_p; // use HFS+ vnode operations
    ...
    if ((retval = vnode_create(VNCREATE_FLAVOR, VCREATESIZE, &vfsp, ...))) {
        ...
    }
}
```

Both `fifofs` and `specfs` are file system layers, not file systems. They cannot be mounted, unmounted, or seen by users.

### synthfs: In-Memory File System

`synthfs` is an in-memory file system that provides a namespace for creating arbitrary directory trees. It can be used for synthesizing mount points, such as when booting from a read-only device that may not have a spare directory for use as a mount point. `synthfs` allows the creation of directories and symbolic links (but not files).

Although `synthfs` source is part of the xnu source, the default Mac OS X kernel does not include `synthfs` as a compiled-in file system. In such cases, you must first compile `synthfs`.

Example:
```sh
$ lsvfs # ensure that synthfs is available
Filesystem Refs Flags
-------------------------------- ----- ---------------
ufs 0 local
...
synthfs 0
$ ls -F /Volumes/ReadOnly # a read-only volume
mnt/ root/ boot/ ...
$ ls -F /Volumes/ReadOnly/mnt # subdirectory of interest
$ sudo mkdir /Volumes/ReadOnly/mnt/MyDir # cannot create a new directory
mkdir: /Volumes/ReadOnly/mnt: No such file or directory
$ mount_synthfs synthfs /Volumes/ReadOnly/mnt # mount synthfs
$ mount
...
 on /Volumes/ReadOnly/mnt (nodev, suid, mounted by amit)
$ sudo mkdir /Volumes/ReadOnly/mnt/MyDir # try again
$ ls -F /Volumes/ReadOnly/mnt # now a directory can be created
MyDir/
$ umount /Volumes/ReadOnly/mnt # cannot unmount synthfs because of MyDir/
umount: unmount(/Volumes/ReadOnly/mnt): Resource busy
$ sudo rmdir /Volumes/ReadOnly/mnt/MyDir # remove MyDir/
$ umount /Volumes/ReadOnly/mnt # now synthfs can be unmounted
$
```

If it is required to keep a `synthfs` mount point's existing contents visible, you can mount `synthfs` with the `union` option (see Section 11.7.18).

### union: Union Mounting

The `union` mount file system conceptually extends `nullfs` by not hiding the files in the "mounted on" directory but rather merging the two directories (and their trees) into a single view. In a union mount, duplicate names are suppressed. A lookup locates the logically topmost entity with that name.

Example:
```sh
$ hdiutil create -size 16m -layout NONE -fs HFS+ \
volname Volume1 /tmp/Volume1.dmg
...
$ hdiutil create -size 16m -layout NONE -fs HFS+ \
volname Volume2 /tmp/Volume2.dmg
...
$ hdiutil attach -nomount /tmp/Volume1.img
/dev/disk10 Apple_HFS
$ hdiutil attach -nomount /tmp/Volume2.img
/dev/disk11 Apple_HFS
$ mkdir /tmp/union
$ mount -t hfs /dev/disk10 /tmp/union
$ echo 1 > /tmp/union/a.txt
$ umount /dev/disk10
$ mount -t hfs /dev/disk11 /tmp/union
$ echo 2 > /tmp/union/a.txt
$ echo 2 > /tmp/union/b.txt
$ umount /dev/disk11
$ mount -t hfs -o union /dev/disk10 /tmp/union
$ mount -t hfs -o union /dev/disk11 /tmp/union
$ ls /tmp/union # contents will be union of Volume1 and Volume2
a.txt b.txt
$ cat /tmp/union/a.txt # this should come from Volume2 (the top volume)
2
$ umount /dev/disk11 # let us unmount Volume2
$ ls /tmp/union # we should only see the contents of Volume1
a.txt
$ cat /tmp/union/a.txt # this should now come from Volume1
1
$ umount /dev/disk10
```

We can also union-mount the volumes in the opposite order and verify whether doing so causes `a.txt` to come from `Volume1` instead.

### volfs: Volume ID File System

The `volfs` file system is a virtual file system that exists over the VFS of another file system. It serves the needs of two different Mac OS X APIs: the POSIX API and the Carbon File Manager API. While the POSIX API uses Unix-style pathnames, the Carbon API specifies a file system object by a triplet consisting of a volume ID, a containing folder ID, and a node name. `volfs` makes it possible to use the Carbon API atop a Unix-style file system.

By default, `volfs` is mounted on the `/.vol` directory. Each mounted volume is represented by a subdirectory under `/.vol`, provided the volume's file system supports `volfs`. HFS+ and HFS support `volfs`, whereas UFS does not.

In Mac OS X versions prior to 10.4, `volfs` is mounted by `/etc/rc` during system startup. Beginning with Mac OS X 10.4, it is mounted by `launchd`.

Example:
```sh
$ mount
/dev/disk1s3 on / (local, journaled)
devfs on /dev (local)
fdesc on /dev (union)
 on /.vol
...
$ ls -li /.vol
total 0
234881029 dr-xr-xr-x 2 root wheel 64 Oct 23 18:33 234881029
```

In this example, `/.vol` contains only one entry, which corresponds to the root volume. Generally, reading directory entries at the topmost level in a `volfs` instance will return a list of all mounted volumes that support `volfs`. Each directory's name is the decimal representation of the corresponding device number (`dev_t`). Given a device's major and minor numbers, the value of `dev_t` can be constructed using the `makedev()` macro.

**Code Example:**
```c
#define makedev(x,y) ((dev_t)(((x) << 24) | (y)))
```

Let us compute the device number of the disk in our current example and verify that its `volfs` entry indeed has that name.

Example:
```sh
$ ls -l /dev/disk1s3
brw-r----- 1 root operator 14, 5 Oct 23 18:33 /dev/disk1s3
$ perl -e 'my $x = (14 << 24) | 5; print "$x\n"'
234881029
```

If we know a file's ID and the volume ID of its containing volume, we can access the file through `volfs`. As we will see in Chapter 12, a file's inode number (as reported by `ls -i`) is its HFS+ file ID in most cases.