was not. As a further example, Miller in (securityevaluators.com/files/
slides/cmiller_CSW_2010.ppt) found 281 unique PDF-induced crashes of
Safari in OS X but only 22 (7.8 percent) crashed MobileSafari.
Here is another font-related PDF crash that triggers on OS X but not on iOS.
This vulnerability is unpatched at the time of this writing:
Process: Safari [58082]
Path: /Applications/Safari.app/Contents/MacOS/Safari
Identifier: com.apple.Safari
Version: 5.1.1 (7534.51.22)
Build Info: WebBrowser-7534051022000000~3
Code Type: X86-64 (Native)
Parent Process: launchd [334]
Date/Time: 2011-12-05 09:46:10.589 -0600
OS Version: Mac OS X 10.7.2 (11C74)
Report Version: 9
Crashed Thread: 0 Dispatch queue: com.apple.main-thread
Exception Type: EXC_BAD_ACCESS (SIGSEGV)
Exception Codes: KERN_INVALID_ADDRESS at 0x0000000000000000
VM Regions Near 0:
-->
__TEXT 00000001041ab000-00000001041ac000
[ 4K] r-x/rwx SM=COW
/Applications/Safari.app/Contents/MacOS/Safari
Application Specific Information:
objc[58082]: garbage collection is OFF
Thread 0 Crashed:: Dispatch queue: com.apple.main-thread
0 libFontParser.dylib 0x00007fff8dd079dd
TFormat6UTF16cmapTable::Map(unsigned short
const*,
unsigned short*, unsigned int&) const + 321
1 libFontParser.dylib 0x00007fff8dd07a9f
TcmapEncodingTable::MapFormat6(TcmapTableData
const&, unsigned char const*&, unsigned int,
unsigned short*, unsigned int&) const + 89
2 libFontParser.dylib 0x00007fff8dce9f71
TcmapEncodingTable::Map(unsigned char const*&,
unsigned int, unsigned short*, unsigned int&)
const
+ 789
3 libFontParser.dylib 0x00007fff8dd197b9
FPFontGetTrueTypeEncoding + 545
cc0066..iinndddd 115500 44//1166//22001122 55::4455::2200 PPMM
Chapter 6 n Fuzzing iOS Applications 151
Another issue you might fi nd is that fi les that cause a crash on a desktop
system require too many resources for the mobile device. This doesn’t tell you
whether or not the bug is in iOS, just that the particular fi le may be too large to
render completely. If the bug looks interesting enough on the desktop, it may be
worth your time to strip the PDF down to a more manageable size while trying
to keep the bug intact. This may require a signifi cant amount of work and pos-
sibly a full understanding of the vulnerability. It might not even be possible. To
demonstrate this issue, here is an older crash on the desktop:
Process: Safari [11068]
Path: /Applications/Safari.app/Contents/MacOS/Safari
Identifier: com.apple.Safari
Version: 4.0 (5530.17)
Build Info: WebBrowser-55301700~2
Code Type: X86 (Native)
Parent Process: launchd [86]
Date/Time: 2009-06-15 13:14:04.182 -0500
OS Version: Mac OS X 10.5.7 (9J61)
Report Version: 6
Anonymous UUID: FE533568-9587-4762-94D2-218B84ACA99C
Exception Type: EXC_BAD_ACCESS (SIGBUS)
Exception Codes: KERN_PROTECTION_FAILURE at 0x0000000000000050
Crashed Thread: 0
Thread 0 Crashed:
0 com.apple.CoreGraphics 0x913ba9c1
CGImageSetSharedIdentifier + 78
1 com.apple.CoreGraphics 0x919d3b28
complex_draw_patch + 3153
2 com.apple.CoreGraphics 0x919d5782
cg_shading_type6_draw + 7154
3 com.apple.CoreGraphics 0x919e7bc8
CGShadingDelegateDrawShading + 354
4 libRIP.A.dylib 0x95fd7750
ripc_DrawShading + 8051
5 com.apple.CoreGraphics 0x9142caa7
CGContextDrawShading + 100
If you run the same PDF on the iOS, the browser disappears as if it crashed.
However, it is not because of a crash, but rather because the device’s limited
resources are being exhausted. Here is the report of the problem:
Incident Identifier: FEB0AB3C-CB16-4B4E-A66A-FD27A9F2F7DE
CrashReporter Key: 96fe78ade92e4beeeee112a637133bb905f07623
OS Version: iOS OS 3.0 (7A341)
cc0066..iinndddd 115511 44//1166//22001122 55::4455::2200 PPMM
152 Chapter 6 n Fuzzing iOS Applications
Date: 2009-06-15 11:18:39 -0700
Free pages: 244
Wired pages: 6584
Purgeable pages: 0
Largest process: MobileSafari
Processes
Name UUID Count resident pages
MobileSafari 
5110 (jettisoned) (active)
From this information, it is impossible to tell if the code on the phone
contains the vulnerability or not. However, it is not all bad news. It is pos-
sible to fi nd some real iOS bugs with this approach. Figure 6-2 shows a crash
report on Mac OS X.
Figure 6.2: A crash report in OS X
Figure 6-3 shows the same crash (with nearly identical backtrace in iOS).
cc0066..iinndddd 115522 44//1166//22001122 55::4455::2200 PPMM
Chapter 6 n Fuzzing iOS Applications 153
Figure 6.3: The same report in iOS
Quick Look Fuzzing
For a quick and dirty start, fuzzing Safari in the hopes that MobileSafari will have
the same vulnerabilities works well. But they are actually different programs,
and if you want to continue the approach of fi shing for iOS bugs by fuzzing OS
X, you’re going to have to do some things differently. Consider the way Microsoft
Offi ce fi le formats (.xls, .ppt, .doc, .docx, and so on) are handled by the two
browsers. Safari prompts the user to download the fi le. MobileSafari automatically
parses and renders it. Therefore, you won’t be able to fuzz the way MobileSafari
handles Offi ce fi les by fuzzing Safari. This is important because these are fi le
formats that Microsoft Offi ce can’t handle in a secure manner, and those are the
only fi le formats that Offi ce cares about. You wouldn’t expect iOS to fare much
better for a format that is not its main concern. In fact, the .ppt format was used
to win the Pwn2Own 2011 contest against the iPhone by two authors of this book.
If you attach gdb to MobileSafari, you’ll observe that the fi rst time an Offi ce
document is loaded, a particular library is loaded, named Offi ceImport. Later,
when fuzzing, you can confi rm this is the library that handles Offi ce documents
because you’ll see crashes inside it.
cc0066..iinndddd 115533 44//1166//22001122 55::4455::2200 PPMM
154 Chapter 6 n Fuzzing iOS Applications
...
165 OfficeImport F 0x38084000 dyld Y Y
/System/Library/PrivateFrameworks/OfficeImport.framework/
OfficeImport at 0x38084000 (offset 0x6c6000)
/System/Library/PrivateFrameworks/OfficeImport.framework/
OfficeImport” at 0x38084000]
If you know OS X very well, you know that there is a way to preview Offi ce
documents, in Finder or as attachments in Mail.app, by highlighting them
and pressing the space bar. This previewing capacity is compliments of Quick
Look. Quick Look can be controlled on the command line using the qlmanage
program. For example,
qlmanage -p good.ppt
renders the requested presentation to the screen. A look at qlmanage in a debugger
shows the same library that you saw inside MobileSafari:
173 OfficeImport F 0x1062b0000 dyld Y Y
/System/Library/PrivateFrameworks/OfficeImport.framework/
Versions/A/OfficeImport at 0x1062b0000 (offset 0x1062b0000)
Therefore, to fuzz MobileSafari’s Offi ce document fuzzing capabilities, it is
mostly suffi cient to fuzz qlmanage. Keep in mind that in some instances crashes
don’t always correspond between qlmanage and iOS (or the iOS simulator, which
we’ll discuss next). For example, a crash in qlmanage might not be present in
MobileSafari. However, this seems relatively rare and is probably due more to
slightly different library versions rather than because they have different code
or functionality. With only minor changes to the PDF fuzzer, you can produce a
PPT fuzzer that should fi nd bugs in iOS. Figure 6-4 shows an example of a crash
you might fi nd.
Figure 6.4: A crash report from an invalid PPT file
cc0066..iinndddd 115544 44//1166//22001122 55::4455::2211 PPMM
Chapter 6 n Fuzzing iOS Applications 155
Fuzzing with the Simulator
The iOS SDK comes with an iOS simulator This simulator provides you with
the convenience of running and testing applications developed with the SDK
without having to use an actual hardware device. You might think this would
be an ideal situation for fuzzing because you could fuzz iOS on any Mac OS X
system with many processes in parallel. Additionally, with virtualization, you
could run multiple instances of OS X systems (and hence multiple simulator
instances) on each physical computer. However, the simulator, which is shown
in Figure 6-5, turns out to be less than ideal for fuzzing.
Figure 6.5: The iOS simulator
You can fi nd the simulator binary at /Developer/Platforms/ iPhoneSimulator
.platform/Developer/Applications/iPhone Simulator.app.
For the sake of discussion, let’s stick to (Mobile)Safari, because that is what
you fuzzed earlier in the chapter.
A look through the SDK reveals that there is something akin to a stripped-
down iOS fi lesystem at /Developer/Platforms/iPhoneSimulator.platform/
cc0066..iinndddd 115555 44//1166//22001122 55::4455::2211 PPMM
156 Chapter 6 n Fuzzing iOS Applications
Developer/SDKs/iPhoneSimulator5.0.sdk. For the rest of this section, all fi les
will be relative to this directory:
$ ls -1
Applications
Developer
Library
SDKSettings.plist
System
usr
Looking in the Applications folder provides the fi rst clue as to why the simu-
lator isn’t going to be ideal for fuzzing:
$ ls -1 Applications/
AdSheet.app
Camera.app
Contacts~ipad.app
Contacts~iphone.app
DataActivation.app
Game Center~ipad.app
Game Center~iphone.app
MobileSafari.app
MobileSlideShow.app
Photo Booth.app
Preferences.app
TrustMe.app
Web.app
WebSheet.app
iPodOut.app
wakemonitor
There isn’t a large number of applications in the simulator. For example, there
is no iTunes or MobileMail — two defi nite targets for fuzzing. At least they have
MobileSafari, which is one of the best applications to fuzz. However, looking
closer at the simulated MobileSafari shows some other problems.
Take a closer look at MobileSafari for the simulator. You can find it at
Applications/MobileSafari.app/MobileSafari.
$ file MobileSafari.app/MobileSafari
MobileSafari.app/MobileSafari: Mach-O executable i386
This program is an x86 binary and isn’t built for the ARM architecture. It runs
directly on the processor on which the simulator is running. This means that
quite a few differences between this version of MobileSafari and the version on
an actual iOS are likely. Looking at the process list on the Mac OS X computer,
you can see it running:
$ ps aux | grep MobileSafari
cmiller 78248 0.0 0.7 852436 29344 ?? S 9:17AM
/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/
iPhoneSimulator5.0.sdk//Applications/MobileSafari.app/MobileSafari
cc0066..iinndddd 115566 44//1166//22001122 55::4455::2222 PPMM
Chapter 6 n Fuzzing iOS Applications 157
In fact, you can see all the simulator-related processes that are running. These
include processes like
n AppIndexer
n searchd
n SpringBoard
n apsd
n SimulatorBridge
n aggregated
n BTServer
n locationd
n mediaremoted
n ubd
n MobileSafari
You can see what makes this MobileSafari binary different from the actual
Safari by looking at the libraries it depends on. Some of these include
n JavaScriptCore
n WebKit
n UIKit
n SpringBoardServices
n CoreTelephony
n Twitter
Some of the libraries listed here are found in Safari as well, and some are not,
including the last four in the list. These libraries are referenced from the iOS
fi lesystem and not the root of the underlying host.
So, obviously, the simulator is not an exact copy of the hardware device. It
is different from the device in a few other ways, too. It doesn’t have the same
resource limitations. It used to be that there were fi le types, like SVG, that the
simulator couldn’t open but the actual device could. At the very least, the simu-
lator lacks the memory protections of the hardware devices, and you will not
be able to test things closely tied to the hardware like SMS (which you learn
about later in this chapter).
The biggest obstacle to using the simulator is probably the fact that the simula-
tor is not jailbroken. That is, you cannot easily launch applications in it, which
is a fundamental requirement of fuzzing.
If you want to fuzz the simulator despite these diffi culties, you’ll fi nd that
crash reports for this MobileSafari end up in the usual spot on the Mac OS X host,
~/Library/Logs/CrashReporter, because this is really just an x86 application.
cc0066..iinndddd 115577 44//1166//22001122 55::4455::2222 PPMM
158 Chapter 6 n Fuzzing iOS Applications
So, you can try fuzzing the simulator, but it is different enough to be diffi cult
and you shouldn’t entirely trust the results. Anyway, why fuzz the simulator,
when you can fuzz the actual device?
Fuzzing MobileSafari
You can fuzz MobileSafari in pretty much the same way as you fuzz Safari on
a Mac OS X computer. The main differences are that the crash fi les show up
in a slightly different place, there is no open binary, and MobileSafari cannot
be started from the command line. Of course, due to hardware limitations, the
fuzzing goes much slower as well.
Selecting the Interface to Fuzz
You can fi nd a variety of things on MobileSafari to choose for fuzzing. Although
the attack surface is smaller than Mac OS X, it is still quite signifi cant in size.
One interesting idea is to choose a Microsoft Offi ce fi le format because it is
automatically parsed in iOS but not in Mac OS X. Perhaps this means that Apple
has not audited it as heavily. This section demonstrates fuzzing on MobileSafari
by using the .ppt PowerPoint format.
Generating the Test Case
For test-case generation, you use the fuzz_buffer function used while fuzzing
PDFs. One difference is that you’ll want to generate test cases on your desktop
and send them to the iOS device, since the iOS device is a bit weak computa-
tionally. Therefore, this will again be a mutation-based approach to fuzzing.
In just a bit, you’ll get to see a generation-based approach.
Fuzzing and Monitoring MobileSafari
In iOS, crashes for processes that run as user mobile end up in /private/var/
mobile/Library/Logs/CrashReporter. The last MobileSafari crash will be
linked from the fi le LatestCrash-MobileSafari.plist.
To get something that works like the open binary on Mac OS X, you have to
use a small helper program that causes MobileSafari to render a web page for
you. You can borrow sbopenurl from https://github.com/comex/sbsutils/
blob/master/sbopenurl.c.
NOTE Thanks @Gojohnnyboi for spotting this.
#include 