by re-encrypting the ﬁrst part with the attached Incompa-
rable Public Key and then transforming the Incomparable
Public Key so that it is equivalent to, but computationally
indistinguishable from its previous form. Although some of
our techniques are similar to those of Golle et al., we fo-
cus on how anonymity is aﬀected by the contents of public
keys whereas they augment ciphertexts for re-encryption in
mix-nets.
Several systems [19, 9, 20, 5, 17, 4, 7] are useful for pro-
viding sender anonymity. These systems could be used in a
complementary fashion with Incomparable Public Keys. A
sender could use the Incomparable Public Key to encrypt
the message and then use one of these systems to deliver
the encrypted message to a multicast address.
2The sender could attach a tag to each message to specify
which key should be used to decrypt that message, but then
these tags would leak information to an eavesdropper.
3.
INCOMPARABLE PUBLIC KEYS
We have discussed how the encryption scheme is an essen-
tial element in protecting receiver anonymity. To achieve re-
ceiver anonymity we must use an asymmetric key cryptosys-
tem that has the same or similar eﬃciency as other asym-
metric cryptosystems and does not allow multiple senders to
be able to determine if they are encrypting messages for the
same receiver. In this section we outline the requirements
for an Incomparable Public Key scheme.
3.1 Incomparable Public Key Requirements
We specify three requirements that an Incomparable Pub-
lic Key scheme should have. (Formal deﬁnitions appear in
Appendix A.)
3.1.1 Generation of Incomparable Public Keys
The holder of a secret key must be able to generate a large
number of public encryption keys such that any message
encrypted with any of these public keys can be decrypted
by one secret key. We call two public keys equivalent if they
can be used to encrypt messages for the same secret key.
Public keys must have the property that they cannot be
tested for equivalence without access to the corresponding
secret key(s). A holder of the secret key must be able to
generate a practically inexhaustible number of these keys.
When attempting to determine if two keys are equiva-
lent the adversary may try several diﬀerent attacks including
combining the keys and observing the receiver’s response to
messages. Such a threat model is valid when Incomparable
Public Keys are used in applications such as Key-Exchange
protocols (see Section 4.2) where the anonymous receiver
will respond to messages. To account for these types of at-
tacks we give the adversary access to a decryption oracle
in our formal model (Appendix A). This deﬁnition con-
stitutes a very strong model of security for Incomparable
Public Keys.
For simplicity, we create schemes that are semantically se-
cure, but we claim that it is possible to add security against
adaptive chosen ciphertext attacks [15] to our schemes.
3.1.2 Key-Privacy
There must be no way of determining if two encrypted
messages were encrypted with the same key. We extend
Bellare et al.’s [1] deﬁnition of Key-Privacy to account for
the possibility that two public keys are equivalent. We for-
mally deﬁne the Key-Privacy property in Appendix A.2. If
the Key-Privacy property holds then a network eavesdrop-
per will be unable to identify two encrypted messages as
having been encrypted with the same key.
3.1.3 Efﬁciency
The eﬃciency of an Incomparable Public Key scheme must
be similar to other asymmetric key schemes. Any scheme in
which the work performed to decrypt a message grows with
the number of equivalent public keys that might have pos-
sibly been used to encrypt the message is not acceptable.
3.2 ElGamal Implementation
We make novel use of the ElGamal cryptosystem to real-
ize an Incomparable Public Key scheme. To create a new
Incomparable Public Key a receiver chooses a random gen-
erator g and creates the key as (g, ga) where a is the private
key of the receiver. To construct another Incomparable Pub-
lic Key the receiver chooses another generator h at random
and creates the key (h, ha). These keys are equivalent in
function, but a pair of them is indistinguishable from a non-
equivalent pair under the Decisional Diﬃe-Hellman (DDH)
assumption. Our scheme’s security relies on the number
theoretic DDH assumption in the Random Oracle model.
We detail our scheme in the rest of this section and oﬀer a
formal proof of correctness in Appendix B.
2
3.2.1 Structure of Keys
All receivers share a prime p where q = p−1
is also a
prime. A newly created public key is an ElGamal public
key (g, ga) where g is a randomly chosen quadratic residue
∗
in Z
p. The receiver stores the key (g, ga) in a hash table
to record it as being valid. (The records of distributed keys
will be used when decrypting a message.) Alternatively, the
receiver could keep a private MAC key to itself and give a
MAC of the key to the sender that would validate the key.
This would alleviate the receiver from the task of recording
every key it creates.
3.2.2 Encryption
Suppose a sender holds an Incomparable Public Key (g, ga).
(The key he holds is one of possibly several Incomparable
Public Keys corresponding to the private key a.) To en-
crypt a message the sender will ﬁrst randomly choose a key
K for a symmetric cipher. He will then encrypt the message
as (gr, garK),H(r), EK(r, (g, ga), message). H is a secure
random hash function, r is the random exponent used in the
ElGamal part of the encryption, and EK denotes a random
encryption with a symmetric cipher. (The cipher must be
semantically secure and should use part of K to authenticate
the encryption [2].) This encryption method uses ElGamal
with a cryptographic envelope. (K will need to be mapped
∗
from the quadratic residues of Z
p to a symmetric cipher
key.)
3.2.3 Decryption
Suppose a message is received of the form ((d, e), h, M).
Decryption will proceed as follows.
1. Let K = e
da . Use K to decrypt the envelope M. This
decryption gives us r, (g, ga), message.
2. Check that h = H(r) and that the public key is recorded
as a valid one.
3. Check that gr = d where (g, ga) is the key in the en-
velope.
4. If any of these checks fail disregard the message, oth-
erwise the decryption is message.
In the encryption process the encryptor uses the hash
function to prove knowledge of encryption factors for the
public key he was given. Since all valid public keys are
recorded, two encryptors cannot combine two public keys to
form a valid hybrid key to encrypt with. We note that this
attack would be possible in a simpler scheme that did not
record valid public keys.
3.2.4 Key-Privacy
Encryption and decryption proceed in exactly the same
way as in standard ElGamal with the addition of a crypto-
graphic envelope and a hash function. Since the symmetric
encryption key used each time is fresh and the encryption
is randomized it will not compromise Key-Privacy. Bellare
et al. demonstrate that encryption in ElGamal meets this
criterion [1].
3.2.5 Efﬁciency
In the process of decryption, if the message is not rejected
before step three the decryption algorithm will require one
more exponentiation to ﬁnish the validity check. Messages
not intended for the receiver will be rejected before this point
(unless maliciously created) so the extra cost will only be
borne by the intended receiver. Since the exponentiation
will dominate the running time, the cost of decryption will
be about double that of standard ElGamal when decrypting
a message intended for that receiver. When a receiver at-
tempts to decrypt a message intended for someone else, the
decryption attempt will be about the same cost as standard
ElGamal.
The cost for encryption will be approximately the same
as in standard ElGamal.
3.3 An Implementation Using General
Assumptions
The implementation in the previous section is an eﬃcient
construction of an Incomparable Public Key scheme. The
proof is heuristic since it is in the Random Oracle model.
We note that a similar scheme can be derived from general
assumptions, with no need for the Random Oracle model,
but with a minor added cost in running time. This is a
two-key scheme based on the two-key paradigm of Naor
and Young [13].
In this method the Incomparable Public
Key will consist of two randomly generated ElGamal Keys
(g1, ga
2). An encrypted message will be of the form
(gr
2), message). We
1, gar
2, gbr
give a detailed description of this construction and a proof
of security in Appendix C.
3.4 Light Version for Passive Receivers
2 K), EK(r, (g1, ga
1 ), (g2, gb
1 K), (gr
1 ), (g2, gb
We created our deﬁnition with a threat model that in-
cluded receivers replying to senders. In some circumstances
a receiver will receive messages and not give any indica-
tion to a sender whether messages were received correctly
or not. In this case we can relax our deﬁnition to not in-
clude a decryption oracle. We call receivers that behave like
this Passive Receivers.
A lighter version of our protocol exists for Passive Re-
ceivers. The key is again a randomly generated ElGamal key
(g, ga), but the ciphertext is just (g, garK), EK(message).
The proof of incomparability is derived directly from the
Decisional Diﬃe-Hellman assumption.
4.
INCOMPARABLE PUBLIC KEYS
IN PRACTICE
4.1 Comparison with Other Methods
In this section we consider some alternative cryptographic
methods that might hope to achieve anonymity in the same
way as Incomparable Public Keys. We examine the signiﬁ-
cant diﬀerences between each of these and an Incomparable
Public Key scheme and ﬁnd that each of the alternative
methods considered in this section is deﬁcient in some re-
spect compared to our method.
For each technique we will assume that the message is sent
to a multicast address.
4.1.1 Standard Asymmetric Key Scheme
One encryption alternative to using Incomparable Public
Keys is to use a standard asymmetric key scheme for en-
cryption. The receiver could generate one asymmetric key
pair and distribute the public key to all senders. However,
this allows the senders to determine that they are sending
to the same receiver, in violation of the requirements. If the
receiver leaks some information about its identity to each
sender, this method would allow the senders to aggregate
that information and learn too much about the receiver’s
identity.
4.1.2 Several Independent Symmetric Keys
Another alternative is to give each sender a unique sym-
metric encryption key, and have the receiver try decrypt-
ing each message with each of these symmetric keys.
In
this approach, decryption time is linear in the number of
senders; however if there are not too many senders the per-
formance might still be better than an Incomparable Public
Key scheme, which uses asymmetric key operations. An-
other problem is that if an adversary gained access to the
sender’s key he would be able to read all messages sent by
that sender in the past.
4.1.3 Several Independent Public Keys
We could take a similar approach to the one above by
having the receiver generate a fresh asymmetric key-pair for
every sender. The receiver would give a new public key to
every sender and keep the new secret key. Then for every
message sent to the multicast address the receiver would
need to try all possible decryption keys until one worked
or all were exhausted. If an adversary gained access to the
sender’s key he would still be unable to read past messages
sent by the sender. In all other respects this method has all
of the drawbacks of the previous one.
4.1.4 Message Markers
Another possible method would be for the receiver to give
the senders a marker for identifying their messages and a
unique (symmetric or asymmetric) encryption key to de-
crypt messages. These markers could be used by the receiver
to determine which decryption key to use. This technique
has the advantage that the receiver need not waste time de-
crypting messages that are not intended for him and that at
most one decryption is needed.
The same marker cannot be used twice without alerting
an eavesdropper that the two messages have the same des-
tination, so a fresh marker would need to be generated and
used for each message. This requirement of a fresh marker
creates a need for synchronization between sender and re-
ceiver, which would apparently require additional message
traﬃc between them that could endanger anonymity. For
example, if the markers are random nonces, then communi-
cation would have to be two-way, so that the receiver could
periodically send along new nonces.
4.1.5 Summary of Comparisons
Through these comparisons we can see the advantages
of using an Incomparable Public Key scheme to realize an
anonymous identity. First, an Incomparable Public Key
scheme allows true receiver anonymity as opposed to pseudo-
anonymity. Second, the work spent per message does not in-
crease with the number of potential senders of the message.
An anonymous identity that uses Incomparable Public Keys
can be used repeatedly to encrypt and send messages with-
out communication from the receiver. Finally, using an In-
comparable Public Key scheme is robust in the face of mes-
sage loss. If any number of messages are lost, the receiver
will still be able to read the next one that gets through.
4.2 Efﬁciency in Practice
We analyze the eﬃciency of receiving messages in a sys-
tem that uses Incomparable Public Keys as follows. Suppose
there are r receivers on a channel and (for simplicity) n mes-
sages are sent to each particular receiver per second. Then
each receiver will need to perform rn decrypt operations
per second. (ElGamal (1024 bit) decryption in a particu-
lar software package was measured to take ∼ 5.8ms on an
850Mhz Celeron processor [6]. This implies that a conven-
tional machine can decrypt about 170 messages per second.)
One can see how there is a simple trade-oﬀ of anonymity,
measured by r, and eﬃciency, measured by n. Suppose an
Incomparable Public Key scheme were not used and an in-
dependent public/private key pair were generated for every
possible sender of a message. If there were m senders per
receiver then the eﬃciency would go down by approximately
a factor of m as all m private keys would have to be tried
for each incoming message.3
This analysis applies to a simple multicast channel. In-
comparable Public Keys can also be used in other environ-
ments. For example, the protocol P 5 is a peer-to-peer sys-
tem that allows participants to tradeoﬀ eﬃciency in com-
munication for increased anonymity by placing themselves
in certain communication groups [18]. The eﬃciency analy-
sis in these systems is more complicated, but if Incompara-
ble Public Keys are used, then each receiver only needs to
execute one decryption operation per incoming message.
4.2.1 Secure Sessions via SKEME Key Exchange
In practice, parties will often initiate a key exchange using
public-key cryptography to derive a temporary shared sym-
metric key. The parties can then communicate over a secure
session using the shared symmetric key. The communica-
tion over the session will then be eﬃcient since symmetric
key cryptography is used.
Incomparable Public Keys can be used to initiate secure
key exchanges. We illustrate this by describing how the
popular SKEME [11] key exchange protocol can be modiﬁed
to include Incomparable Public Keys. The SKEME protocol
is diagrammed in Figure 1. In the diagrammed version the
initiator, I, engages in a Diﬃe-Hellman key exchange. The
initiator veriﬁes the Diﬃe-Hellman component sent from the
responder is authentic using public key encryption.
We can use Incomparable Public Keys to protect respon-
der anonymity. In the ﬁrst step the initiator will send the
initiation message to a multicast address and encrypt it with
an Incomparable Public Key. Of all the listeners on the mul-
ticast channel only the intended responder will be able to
correctly decrypt the message.
3This is not exactly true because after a successful decryp-
tion of a message the receiver would not try any more of
its keys. However, as r becomes large this approximation
becomes correct.
After the completion of these steps the parties will share a
session key. In continuing the session the initiator will send
messages to the multicast channel. However, the responder
still has the problem of determining which session messages
that were encrypted with symmetric key messages belong
to him. One of the alternative methods listed in Section 4.1