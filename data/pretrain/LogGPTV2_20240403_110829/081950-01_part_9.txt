1 # encoding=utf-8
2
3 import time
4
5 with open('tmp.txt', 'rb') as f:
6 f.seek(0, 2) # 将光标移动至文件末尾
7 while True: # 实时显示文件新增加的内容
8 line = f.read()
9 if line:
10 print(line.decode('utf-8'), end='')
11 else:
12 time.sleep(0.2) # 读取完毕后短暂的睡眠
当tmp.txt追加新的内容时，新内容会被程序立即打印出来。
2. 大文件的读取
当文件较小时，我们可以一次性全部读入内存，对文件的内容做出任意修改，再保存至磁
盘，这一过程会非常快。
【示例2-4】如下代码将文件a.txt中的字符串str1替换为str2。
1 with open('a.txt') as read_f,open('.a.txt.swap','w') as write_f:
2 data=read_f.read() #全部读入内存,如果文件很大,则会很卡
3 data=data.replace(‘str1’,'str2') #在内存中完成修改
4
5 write_f.write(data) #一次性写入新文件
6
7 os.remove('a.txt')
8 os.rename('.a.txt.swap','a.txt')
当文件很大时，如GB级的文本文件，上面的代码运行将会非常缓慢，此时我们需要使用
文件的可迭代方式将文件的内容逐行读入内存，再逐行写入新文件，最后用新文件覆盖源文件。
【示例2-5】对大文件进行读写。
1 import os
2 with open('a.txt') as read_f,open('.a.txt.swap','w') as write_f:
3 for line in read_f: # 对可迭代对象f逐行操作，防止内存溢出
4 line=line.replace(‘str1’,'str2')
5 write_f.write(line)
6 os.remove('a.txt')
7 os.rename('.a.txt.swap','a.txt')
本示例中的大文件为a.txt，当我们打开文件时，会得到一个可迭代对象read_f，对可迭代
对象进行逐行读取，可防止内存溢出，也会加快处理速度。
处理大数据还有多种方法，如下：
65
Python自动化运维快速入门
（1）通过read(size)增加参数，指定读取的字节数。
while True:
block = f.read(1024)
if not block:
break
（2）通过readline，每次只读一行。
while True:
line = f.readline()
if not line:
break
file对象常用的函数参见表2-3。
表2-3 file对象常用的函数
函数 功能
file.close() 关闭文件。关闭后文件不能再进行读写操作
file.flush() 刷新文件内部缓冲，直接把内部缓冲区的数据立刻写入文件，而不是被
动等待输出缓冲区写入
file.fileno() 返回一个整型的文件描述符（file descriptor FD 整型），可以用在如os
模块的read方法等一些底层操作上
file.isatty() 如果文件连接到一个终端设备，则返回 True，否则返回 False
file.next() 返回文件下一行
file.read([size]) 从文件读取指定的字节数，如果未给定或为负，则读取所有
file.readline([size]) 读取整行，包括 "\n" 字符
file.readlines([sizeint]) 读取所有行并返回列表，若给定sizeint>0，则返回总和为sizeint字节的
行, 实际读取值可能比 sizeint大， 因为需要填充缓冲区
file.seek(offset[, whence]) 设置文件当前位置
file.tell() 返回文件当前位置
file.truncate([size]) 根据size参数截取文件，size参数可选
file.write(str) 将字符串写入文件，没有返回值
file.writelines(sequence) 向文件写入一个序列字符串列表，如果需要换行，则加入每行的换行符
3. 序列化和反序列化
什么是序列化和反序列化呢？我们可以这样简单地理解：
 序列化：将数据结构或对象转换成二进制串的过程。
 反序列化：将在序列化过程中所生成的二进制串转换成数据结构或对象的过程。
Python的pickle模块实现了基本的数据序列和反序列化。通过pickle模块的序列化操作，
我们能够将程序中运行的对象信息保存到文件中并永久存储。通过 pickle 模块的反序列化操
作，我们能够从文件中创建上一次程序保存的对象。
基本方法如下：
pickle.dump(obj, file, [,protocol])
66
第2章 基础运维
该方法实现序列化，将对象obj保存至文件中。
x=pickle.load(file)
该方法实现反序列化，从文件中恢复对象，并将其重构为原来的Python对象。
注解：从file中读取一个字符串，并将其重构为原来的Python对象。
【示例2-6】序列化实例（example_serialize.py）。
1 # encoding:utf-8
2
3
4 import pickle
5
6 # 使用pickle模块将数据对象保存到文件
7
8 # 字符串
9 data0 = "hello world"
10 # 列表
11 data1 = list(range(20))[1::2]
12 # 元组
13 data2 = ("x", "y", "z")
14 # 字典
15 data3 = {"a": data0, "b": data1, "c": data2}
16
17 print(data0)
18 print(data1)
19 print(data2)
20 print(data3)
21
22 output = open("data.pkl", "wb")
23
24 # 使用默认的protocol
25 pickle.dump(data0, output)
26 pickle.dump(data1, output)
27 pickle.dump(data2, output)
28 pickle.dump(data3, output)
29 output.close()
上述代码将不同的Python对象依次写入文件，并打印对象的相关信息，运行结果如图2.5
所示。
图2.5 运行结果
【示例2-7】反序列化演示（example_deserialization.py）。
67
Python自动化运维快速入门
1 # encoding=utf-8
2
3 import pickle
4
5 # 使用pickle模块从文件中重构Python对象
6 pkl_file = open("data.pkl", "rb")
7
8 data0 = pickle.load(pkl_file)
9 data1 = pickle.load(pkl_file)
10 data2 = pickle.load(pkl_file)
11 data3 = pickle.load(pkl_file)
12
13 print(data0)
14 print(data1)
15 print(data2)
16 print(data3)
17
18 pkl_file.close()
上述代码从文件中依次恢复序列化对象，并打印对象的相关信息，运行结果如图2.6所示。
图2.6 运行结果
可以看出运行结果与序列化实例运行的结果完全一致。
2.1.3 读写配置文件
配置文件是供程序运行时读取配置信息的文件，用于将配置信息与程序分离，这样做的好
处是显而易见的：例如在开源社区贡献自己源代码时，将一些敏感信息通过配置文件读取；提
交源代码时不提交配置文件可以避免自己的用户名、密码等敏感信息泄露；我们可以通过配置
文件保存程序运行时的中间结果；将环境信息（如操作系统类型）写入配置文件会增加程序的
兼容性，使程序变得更加通用。
Python内置的配置文件解析器模块configparser提供ConfigParser类来解析基本的配置文
件，我们可以使用它来编写Python程序，让用户最终通过配置文件轻松定制自己需要的Python
应用程序。
常见的pip配置文件如下。
[global]
index-url = https://pypi.doubanio.com/simple
trusted-host = pypi.doubanio.com
【示例2-8】现在我们编写一个程序来读取配置文件的信息（read_conf.py）。
1 # encoding=utf-8
68
第2章 基础运维
2
3 import configparser
4
5 config = configparser.ConfigParser() # 实例化ConfigParser类
6
7 config.read(r"c:\users\xx\pip\pip.ini") # 读取配置文件
8 print("遍历配置信息:")
9 for section in config.sections(): # 首先读取sections
10 print(f"section is [{section}]")
11 for key in config[section]: # 讲到每个section的键和值
12 print(f"key is [{key}], value is [{config[section][key]}]") # 打印键和
值
13
14 print("通过键获取相应的值:")
15 print(f"index-url is [{config['global']['index-url']}]")
16 print(f"trusted-host is [{config['global']['trusted-host']}]")
上述代码通过实例化 ConfigParser 类读取配置文件，遍历配置文件中的 section 信息及其
键值信息，通过索引获取值信息。在命令窗口执行python read_conf.py得到如图2.7所示的运
行结果。
图2.7 运行结果图
【示例2-9】将相关信息写入配置文件（write_conf.py）。
1 # encoding=utf-8
2 import configparser
3
4 config = configparser.ConfigParser()
5 config["DEFAULT"] = {
6 "ServerAliveInterval": "45",
7 "Compression": "yes",
8 "CompressionLevel": "9",
9 }
10 config["bitbucket.org"] = {}
11 config["bitbucket.org"]["User"] = "hg"
12 config["topsecret.server.com"] = {}
13 topsecret = config["topsecret.server.com"]
14 topsecret["Port"] = "50022" # mutates the parser
15 topsecret["ForwardX11"] = "no" # same here
16 config["DEFAULT"]["ForwardX11"] = "yes"
17 with open("example.ini", "w") as configfile: #将上述配置信息config写入文件
example.ini
69
Python自动化运维快速入门
18 config.write(configfile)
19
20 with open("example.ini", "r") as f: #读取example.ini 验证上述写入是否正确
21 print(f.read())
上述write_conf.py通过实例化ConfigParser类增加相关配置信息，最后写入配置文件。执
行python write_conf.py，运行结果如图2.8所示。
图2.8 运行结果
从上面读写配置文件的例子可以看出，configparser 模块的接口非常直接、明确。请注意
以下几点：
 section名称是区分大小写的。
 section下的键值对中键是不区分大小写的，config["bitbucket.org"]["User"]在写入时会
统一变成小写user保存在文件中。
 section 下的键值对中的值是不区分类型的，都是字符串，具体使用时需要转换成需
要的数据类型，如int(config['topsecret.server.com'][ 'port'])，值为整数50022。对于一
些不方便转换的，解析器提供了一些常用的方法，如getboolean()、getint()、getfloat()
等，如 config["DEFAULT"].getboolean('Compression'))的类型为 bool，值为 True。用
户可以注册自己的转换器或定制提供的转换方法。
 section的名称是[DEFAULT]时，其他section的键值会继承[DEFAULT]的键值信息。
如本例中config["bitbucket.org"]['ServerAliveInterval'])的值是45。
2.1.4 解析 XML 文件
XML的全称是eXtensible Markup Language，意为可扩展的标记语言，是一种用于标记电
子文件使其具有结构性的标记语言。以XML结构存储数据的文件就是XML文件，它 被设计
用来传输和存储数据。例如有以下内容的xml文件：
George
John
70
第2章 基础运维
Reminder
Don't forget the meeting!
其内容表示一份便签，来自John，发送给George，标题是Reminder，正文是Don't forget
the meeting!。XML本身并没有定义note、to、from等标签，是生成xml文件时自定义的，但
我们仍能理解其含义。XML文档仍然没有做任何事情，它仅仅是包装在 XML 标签中的纯粹
信息。我们编写程序来获取文档结构信息就是解析XML文件。
Python有三种方法解析XML：SAX、DOM、ElementTre。
1. SAX （simple API for XML )
SAX 是一种基于事件驱动的 API，使用时涉及两个部分，即解析器和事件处理器。解析
器负责读取XML文件，并向事件处理器发送相应的事件（如元素开始事件、元素结束事件）。
事件处理器对相应的事件做出响应，对数据做出处理。使用方法是先创建一个新的XMLReader
对象，然后设置 XMLReader 的事件处理器 ContentHandler，最后执行 XMLReader 的 parse()
方法。
 创建一个新的 XMLReader 对象，parser_list 是可选参数，是解析器列表
xml.sax.make_parser( [parser_list] )。
 自定义事件处理器，继承ContentHandler类，该类的方法可参见表2-4。
表2-4 ContentHandler类的方法
名称 功能
characters(content) 从行开始，遇到标签之前，存在字符，content的值为这些字符串。从一个
标签，遇到下一个标签之前， 存在字符，content 的值为这些字符串。从
一个标签，遇到行结束符之前，存在字符，content的值为这些字符串。标
签可以是开始标签，也可以是结束标签
startDocument() 文档启动时调用
endDocument() 解析器到达文档结尾时调用
startElement(name, attrs) 遇到XML开始标签时调用，name是标签的名字，attrs是标签的属性值字
典
endElement(name) 遇到XML结束标签时调用
执行XMLReader的parse()方法：
xml.sax.parse( xmlfile, contenthandler[, errorhandler])
参数说明：
 xmlstring：xml字符串。
 contenthandler：必须是一个ContentHandler的对象。
 errorhandler：如果指定该参数，errorhandler必须是一个SAX ErrorHandler对象。
【示例2-10】下面来看一个解析XML的例子。example.xml内容如下：
71