# 【技术分享】绕过最新微软Edge补丁并继续欺骗地址栏加载恶意警告页面

#### 译文声明
本文是翻译文章，原文来源：brokenbrowser.com
原文地址：[点击访问](https://www.brokenbrowser.com/spoof-addressbar-malware/)

译文仅供参考，具体内容及含义以原文为准。

**翻译者**：overXsky  
**稿费**：200RMB  
**投稿方式**：发送邮件至 linwei#360.cn 或登录网页版在线投稿

## 概述
本周二，微软发布了一个重要的补丁 [MS17-006](https://technet.microsoft.com/library/security/MS17-006)，修复了多个严重的安全漏洞，极大地提升了Edge浏览器的安全性和开发者的声誉。然而，我仍然希望微软能够说服那些坚持使用旧版IE政策的人，或者至少公开解释为什么他们对IE的维护漠不关心——要么废除它，要么保护它。

如果你还没有阅读之前的文章《[使用恶意软件警告欺骗地址栏](https://www.brokenbrowser.com/spoof-addressbar-malware/)》，建议你在继续阅读本文之前先浏览一下。（注：有[中文版本](http://www.freebuf.com/articles/web/122924.html)）

## 超快速回顾
微软Edge允许我们加载一些包含HTML页面的内部资源，例如 `acr_error.htm` 可以加载，而 `BlockSite.htm` 却不行。这是因为后者可以轻松地欺骗内部恶意软件警告消息和地址栏。几个月前，我们通过在URL中将句点替换为转义副本的方法绕过了这一限制。现在这个漏洞已被修复，Edge开发者在进行检查和字符串比较操作之前会先解码我们的欺骗URL。因此，我们需要找到一种新的方法来绕过这个补丁。

## 当前缺少符号文件
许多微软的公开符号尚未上传，这使得我们在短时间内无法完成出色的分析。但不用担心，我们会尽力并成功绕过这个问题。记住，我们的目标是绕过这个补丁，而不是纠结于等待微软推送符号文件。

## 查找并分析“BlockSite.htm”字符串
我们知道在Edge代码中的某个地方存在对“BlockSite.htm”的字符串比较操作。我们将Edge附加到调试器上，找到这个字符串并在该位置设置内存断点，以观察哪段代码读取了它。

下面的JavaScript代码甚至没有打开新窗口就抛出了“ACCESS_DENIED”异常：
```javascript
window.open("ms-appx-web://microsoft.microsoftedge/assets/errorpages/BlockSite.htm");
```
Edge阻止内部URL的行为是合理的，因为这个特定的错误页面可以从哈希或查询字符串中接受参数，从而给攻击者提供了欺骗地址栏和页面内容的机会。

我们的目标是再次愚弄Edge打开该URL。这次我们使用以下URL（经过编码的句点和尾部的facebook，以便在内存中更容易找到字符串）：
```javascript
window.open("ms-appx-web://microsoft.microsoftedge/assets/errorpages/BlockSite%2ehtm?BlockedDomain=facebook.com");
```

接下来，我们将附加Edge进程并查找`BlockSite.htm`字符串，搜索范围限制在`EdgeHtml.dll`模块中，因为大部分Edge代码都在这里。这只是个猜测，如果没有找到结果，我们可以尝试搜索其他模块，甚至所有Edge文件。

成功加载正确的Edge进程后，我们需要知道模块的起始和结束位置，以便在内存中进行确定范围的搜索。
```shell
0:029> lm m edgehtml
Browse full module list
start               end                 module name
00007fff`54ba0000   00007fff`5614d000   edgehtml
```

现在可以在该地址范围内执行搜索命令来查找感兴趣的字符串。Windbg语法可能看起来有些复杂，但以下指令的意思是：“s”执行搜索命令，“[1]”只返回地址信息，“u”表示目标是Unicode字符串，后面的64位地址是查找范围，要查找的字符串是“BlockSite”。
```shell
0:029> s -[1]u 00007fff`54ba0000 00007fff`5614d000 "BlockSite"
0x00007fff`55d90846
0x00007fff`55d90944
0x00007fff`55e52c02
```

完美！WinDBG立即返回了三个结果。让我们验证这些结果是否正确，使用`du`命令查看这些地址的内容。
```shell
0:029> du 0x00007fff`55d90846; du 0x00007fff`55d90944; du 0x00007fff`55e52c02
00007fff`55d90846 "BlockSite.htm"
00007fff`55d90944 "BlockSite.htm"
00007fff`55e52c02 "BlockSite.htm"
```

这非常令人兴奋。让我们在这三处分别设置断点，看看谁访问了该字符串。
```shell
ba r1 0x00007fff`55d90846
ba r1 0x00007fff`55d90944
ba r1 0x00007fff`55e52c02
g
```

很好。现在回到我们的JavaScript代码并尝试打开恶意URL。
```javascript
window.open("ms-appx-web://microsoft.microsoftedge/assets/errorpages/BlockSite%2ehtm?BlockedDomain=facebook.com");
```

哇！立即到达断点处。现在已经回到了WinDbg，看看我们得到了什么结果。
```shell
Breakpoint 0 hit
KERNELBASE!lstrlenW+0x18:
00007fff`74f6e2c8 75f6 jne KERNELBASE!lstrlenW+0x10 (00007fff`74f6e2c0) [br=1]
```

看上去我们正处于内核模块中。我们的目标是找出EdgeHtml模块中哪段代码引用了`BlockSite`字符串。让我们先看看最近的5次调用栈轨迹。
```shell
0:013> k 5
# Child-SP RetAddr Call Site
00 000000d3`14df8de8 00007fff`74f70244 KERNELBASE!lstrlenW+0x18
```

通过这种方式，我们可以逐步深入，最终找到绕过补丁的方法。