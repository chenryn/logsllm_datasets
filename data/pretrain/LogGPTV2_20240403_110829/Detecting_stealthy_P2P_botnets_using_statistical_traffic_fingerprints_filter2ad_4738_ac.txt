T-Bittorrent-2
Fingerprints
1 1 145 319, UDP
1 1 109 100, UDP
1 1 146 340, UDP
5 3 346 170, TCP
1 1 145 310, UDP
1 1 145.01 317.66, UDP
1 1 109 100, UDP
1 1 146 342, UDP
5 3 346 170, TCP
2 2 466 461, UDP
Trace
Skype
Fingerprints
1 1 74.58 60, UDP
1 1 78 60, UDP
1 1 75 60, UDP
1 1 76 60, UDP
1 1 79 60, UDP
Table IV: Summaries of Fingerprint Clusters
ˆ𝑇𝑃 2𝑃 =
active time (𝑇𝑃 2𝑃 ) of a P2P application as
max(𝑇 (𝐹 𝐶1), ..𝑇 (𝐹 𝐶𝑗), ..𝑇 (𝐹 𝐶𝑘)).
𝑖 , .., 𝐹 𝐶 𝑗
If the ratio 𝑟(ℎ) = ˆ𝑇𝑃 2𝑃
𝑇𝑠𝑦𝑠
As illustrated in Table III, the estimated active time
> Θ𝑃 2𝑃 , we say that ℎ is
running a persistent 𝑃 2𝑃 application, and add it to a set
P of candidate P2P bots. Host ℎ will then be input to our
botnet detection algorithm (see Section III-D), where ℎ will
be represented by a set of persistent ﬁngerprint clusters for
ℎ, denoted as 𝐹 𝐶𝑝(ℎ) ={𝐹 𝐶 1
𝑘} where 𝑇 (𝐹 𝐶𝑖) >
Θ𝑃 2𝑃 for any 𝐹 𝐶𝑖 ∈ 𝐹 𝐶𝑝(ℎ).
ˆ𝑇𝑃 2𝑃
is the same as the actual active time (𝑇𝑃 2𝑃 ) of the P2P
ˆ𝑇𝑃 2𝑃 can accurately
application, which demonstrates that
approximate 𝑇𝑃 2𝑃 . As we can see from Table III, when we
leave a P2P application running for as long as the machine
is on (24 hours for this particular experiment) we obtain
a ratio 𝑟(ℎ) = 1. Therefore, we decided to conservatively
set Θ𝑃 2𝑃 = 0.5. 𝑁𝑐𝑙𝑢𝑠𝑡 in Table III illustrates the size of
𝐹 𝐶𝑝(ℎ), the number of ﬁngerprint clusters (𝐹 𝐶s) whose
𝐵𝐺𝑃 (𝐹 𝐶) > Θ𝑏𝑔𝑝 and 𝑇 (𝐹 𝐶) > Θ𝑝2𝑝.
D. P2P Botnet Detection Algorithm
Once we have identiﬁed the set P of candidate P2P bots,
we apply our botnet detection algorithm. At this stage, our
objective is to differentiate between legitimate persistent P2P
clients and P2P bots. As we mentioned at the beginning of
Section III, our detection approach is based on the following
observations: i) bots that belong to the same botnet use
the same P2P protocol and network, and ii) the set of
peers contacted by two different bots have a large overlap,
compared to peers contacted by two P2P clients connected to
the same legitimate P2P network. Accordingly, we look for
P2P clients that are running the same protocol and connect
to the same P2P network, and whose sets of contacted des-
tination IPs overlap signiﬁcantly. We do so by introducing
a measure of similarity between the ﬁngerprint clusters, and
then grouping P2P clients according to similarities between
their respective ﬁngerprint clusters.
We proceed as follows. For each host ℎ ∈ P, we
consider the set of persistent ﬁngerprint clusters 𝐹 𝐶𝑝(ℎ) =
{𝐹 𝐶1, .., 𝐹 𝐶𝑘} (see Section III-B). For each 𝐹 𝐶𝑖 ∈
𝐹 𝐶𝑝(ℎ), we compute the average number of bytes sent,
𝐵𝑦𝑡𝑒𝑠,𝑖, and received, 𝐵𝑦𝑡𝑒𝑟,𝑖, in all ﬂows in 𝐹 𝐶𝑖 (remem-
ber that each ﬁngerprint cluster 𝐹 𝐶𝑖 is a cluster of ﬂows).
Also, for each cluster 𝐹 𝐶𝑖 we extract the set of peers Π𝑖, i.e.,
the set of all destination IPs for the ﬂows in 𝐹 𝐶𝑖. Therefore,
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:47:04 UTC from IEEE Xplore.  Restrictions apply. 
126Fingerprints
1 1 145 319, UDP
1 1 109 100, UDP
outgoing content
d1:ad2:id20:. . . ﬁnd node1:. . . :y1:qe
d1:ad2:id20:. . . ﬁnd node1:. . . :y1:qe
d1:ad2:id20:. . . ﬁnd node1:. . . :y1:qe
d1:ad2:id20:. . . :ping1:. . . :y1:qe
d1:ad2:id20:. . . :ping1:. . . :y1:qe
d1:ad2:id20:. . . :ping1:. . . :y1:qe
ﬂows
1
2
. . .
1
2
. . .
Table V: Payload of ﬂows in a ﬁngerprint cluster of Bittorrent
incoming content
d1:rd2:id20:. . . nodes208:. . . :y1:re
d1:rd2:id20:. . . nodes208:. . . :y1:re
d1:rd2:id20:. . . nodes208:. . . :y1:re
d1:rd2:id20:. . . :y1:re
d1:rd2:id20:. . . :y1:re
d1:rd2:id20:. . . :y1:re
description
peer discovery
ping/pong
each ﬁngerprint cluster 𝐹 𝐶𝑖 can be summarized by the tuple
(𝐵𝑦𝑡𝑒𝑠,𝑖, 𝐵𝑦𝑡𝑒𝑟,𝑖, Π𝑖). This allows us to deﬁne a notion of
distance between ﬁngerprint clusters. In practice, we deﬁne
two separate distance functions as follows
i) 𝑑𝑏𝑦𝑡𝑒𝑠(𝐹 𝐶𝑖, 𝐹 𝐶𝑗) =
√
(𝐵𝑦𝑡𝑒𝑠,𝑖 − 𝐵𝑦𝑡𝑒𝑠,𝑗)2 + (𝐵𝑦𝑡𝑒𝑟,𝑖 − 𝐵𝑦𝑡𝑒𝑟,𝑗)2
ii) 𝑑𝐼𝑃 𝑠(𝐹 𝐶𝑖, 𝐹 𝐶𝑗) = 1 − ∣Π𝑖∩Π𝑗∣
∣Π𝑖∪Π𝑗∣
and then we deﬁne the distance between two hosts ℎ𝑎 and
ℎ𝑏 as
𝑑𝑖𝑠𝑡(ℎ𝑎, ℎ𝑏) = min
𝑖,𝑗
(
𝑖
, 𝐹 𝐶 (𝑏)
𝜆 ∗ 𝑑𝑏𝑦𝑡𝑒𝑠(𝐹 𝐶 (𝑎)
+ (1− 𝜆) ∗ 𝑑𝐼𝑃 𝑠(𝐹 𝐶 (𝑎)
𝑚𝑎𝑥𝐵 − 𝑚𝑖𝑛𝐵
𝑖
𝑗 ) − 𝑚𝑖𝑛𝐵
)
, 𝐹 𝐶 (𝑏)
𝑗 )
where
𝑖
𝑖
𝑘
, 𝐹 𝐶 (𝑏)
𝑗 )
, 𝐹 𝐶 (𝑏)
𝑗 )
is the 𝑘-th ﬁngerprint cluster of host ℎ𝑥
∙ 𝐹 𝐶 (𝑥)
∙ 𝑚𝑖𝑛𝐵 = min𝑖,𝑗 𝑑𝑏𝑦𝑡𝑒𝑠(𝐹 𝐶 (𝑎)
∙ 𝑚𝑎𝑥𝐵 = max𝑖,𝑗 𝑑𝑏𝑦𝑡𝑒𝑠(𝐹 𝐶 (𝑎)
∙ 𝜆 is a predeﬁned constants, which we set to 𝜆 = 0.5.
After computing the distance between each pair of hosts
(i.e., each pair of candidate P2P bots in set P), we apply
hierarchical clustering, and group together hosts according to
the distance deﬁned above. In practice, the hierarchical clus-
tering algorithm will produce a dendrogram (a tree-like data
structure) as shown in Figure 5. The dendrogram expresses
the “relationship” between hosts. The closer two hosts are,
the lower level they are connected at in the dendrogram. Two
P2P bots in the same botnet should have small distance and
thus are connected at lower level (forming a dense cluster).
Even if these P2P bots’ trafﬁc is overlapped with trafﬁc of
legitimate P2P applications, the distance between two bot-
compromised hosts is decided by the minimum distance of
their respective ﬁngerprint clusters. Since the distances of
ﬁngerprint clusters from botnet P2P protocols have smaller
distance compared to those from legitimate P2P protocols
(due to bots’ large overlap of peer IPs),
the minimum
distance will stem from ﬁngerprint clusters of P2P bots
instead of legitimate P2P applications. Therefore, two bot-
compromised hosts running legitimate P2P applications will
still exhibit small distance. We then classify hosts in dense
clusters as P2P bots, and discard all other clusters and the
related hosts, which we classify as legitimate P2P clients.
In practice, we cut the dendrogram at Θ𝑏𝑜𝑡 (Θ𝑏𝑜𝑡 ∈ [0, 1])
of the maximum dendrogram height (Θ𝑏𝑜𝑡 ∗ ℎ𝑒𝑖𝑔ℎ𝑡𝑚𝑎𝑥).
To set Θ𝑏𝑜𝑡, we consider the following two assumptions:
a) we assume we do not have a labeled data set of botnet
trafﬁc; b) we assume that the distance between two legit-
imate P2P applications is much larger than that between
two bots belonging to the same botnet (as motivated above).
Therefore, we conservatively set Θ𝑏𝑜𝑡 = 0.95.
IV. EVALUATION
In this section we present an evaluation of the effective-
ness of our stealthy P2P botnet detection system.
A. Experimental Setup
We evaluated the performance of our detection system
using real-world network trafﬁc, including trafﬁc collected
from our academic network, trafﬁc generated by popular P2P
applications, and live P2P botnet trafﬁc.
The trafﬁc we collected from our academic network came
from a span port mirroring all trafﬁc crossing the gateway
router (around 200-300Mbps) for the college networks. We
used Argus [1] to efﬁciently collect network ﬂow infor-
mation of the trafﬁc between internal and external networks
for one entire day. Along with various ﬂow statistics we also
recorded the ﬁrst 200 bytes of each ﬂow payload, which we
used to identify known legitimate P2P clients within our
network. To reduce the volume and noise in our network
traces, we excluded all trafﬁc related to email servers, DNS
servers, and planetlab nodes from our botnet detection
analysis. The DNS trafﬁc was collected simultaneously with
the network ﬂow information, using dnscap, to keep track
of all the domain-to-IP mappings needed to perform trafﬁc
volume reduction. Overall, we observed 953 active hosts, as
reported in Table VI. We refer to the trafﬁc collected from
our academic network as 𝑁 𝐸𝑇𝐶𝑜𝐶.
In order to establish some ground truth in terms of what
hosts are running P2P applications, we used a signature-
based approach by matching the signatures from [11] onto
the ﬁrst 200 bytes of each network ﬂow. We further manually
investigated each of these hosts to eliminate false positives
(we found some spurious signature matches deriving from
trafﬁc towards SMTP servers that we were not able to pre-
ﬁlter, and a few web requests towards our departmental
website). After manual validation, we identiﬁed a total
of 3 hosts that were running Bittorrent , which in
the following we denoted as “BT1@C”, “BT2@C” and
“BT3@C”. Furthermore, there exists no signature that can
match P2P trafﬁc generated by Skype, since Skype com-
munications are encrypted. However, using the statistical
trafﬁc ﬁngerprints, we were able to identify 5 likely Skype
clients within our network (we discuss this in more detail in
Section IV-C1), denoted as “Skype1@C”, “Skype2@C”, ..,
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:47:04 UTC from IEEE Xplore.  Restrictions apply. 
127Trace
t-c
Trace
t-dns
duration
24h
duration
24h
# of TCP / UDP ﬂows
61,745,989 / 20,226,837
# of domains
328,965
# of clients
953
# of IPs
268,753
Table VI: Trafﬁc statistics for our academic network.
Trace
Bittorrent-1/2
Limewire-1/2
Emule-1/2
Skype-1/2
Ares-1/2
Dur
24 hr
24 hr
24 hr
24 hr
5 hr
# of ﬂows
250960/297785
229215/638103
58941/110821
88927/49541
17566/21756
# of Dst IPs
17337/17657
11602/64994
6649/14554
10699/6264
1918/3118
Avg Flow Size
68310/350205
1003/2038
124267/22681
514/1988
69373/24755
Table VII: Traces of Popular P2P Applications
“Skype5@C”. We refer to the network traces corresponding
to these 8 P2P clients as 𝑁 𝐸𝑇𝑃 2𝑃 @𝐶𝑜𝐶. One possible
reason why we found only a few (fewer than expected) P2P
hosts is that our college network is well-managed and the
usage of ﬁle sharing applications is highly discouraged. In
addition, the vast majority of the hosts we have monitored
are desktops managed by the college, where regular users
have no permission to install software including Skype.
In order to increase the number and diversity of P2P nodes
in our network, we ran 5 popular P2P applications, whose
name and version are listed in Table I. We ran each of
the 5 P2P applications in two different (virtual) hosts for
several hours (e.g., 24 or 5 hours) simultaneously. Each host
was represented by a WindowsXP (virtual) machine with a
public IP address selected within a /24 network. Given a
P2P application among the 5 we considered, we manually
interacted with one instance (on one host) to simulate
typical human-driven application usage behavior, and we
fed the second instance of the application (on the second
host) with automatically generated user-interface input. This
artiﬁcial user input was simulated using a AutoIt [2]
script that randomly selects contents to be downloaded or
uploaded using the P2P application at random time intervals.
Therefore, overall we obtained 10 additional network traces
related to trafﬁc generated by P2P applications (Table VII
shows some statistics related to these network traces). We
refer to these network traces as 𝑁 𝐸𝑇𝑃 2𝑃 .
In addition, we were able to obtain network traces for two
popular P2P botnets, Storm and Waledac. Both traces
were collected by purposely running Storm and Waledac
malware samples in a controlled environment, and record-
ing their network behavior. The Storm traces included
13 different bot-compromised hosts, while the Waledac
included 3 different bot-compromised hosts, as shown in
Table VIII. It is worth noting that both traces were collected
at a time when the two botnets were fully active, before
any successful takedown attempt was carried out by law
enforcement or network operators. We refer to these network
traces as 𝑁 𝐸𝑇𝑏𝑜𝑡𝑠.
B. Experimental Design
We structured our experiments in ﬁve parts:
1) Evaluate the effectiveness of identifying and proﬁling
P2P applications using statistical ﬁngerprint clusters.
Trace
Waledac
Storm
duration
24hr
24hr
size
1.1G
4.8G
# of bots
3
13
Table VIII: Traces of Botnets
(see Section IV-C1)
2) Evaluate the detection performance by pretending that
a number of machines in our network have been
compromised with either Storm or Waledac (Sec-
tion IV-C2).
3) Determine whether our system is able to detect P2P
bots running on compromised machines that are also
running legitimate P2P clients at the same time (Sec-
tion IV-C3).
4) Estimate the detection performance in special cases,
where only two bots or no bot (e.g., a “clean” network)
appear in the monitored networks (Section IV-C4).
5) Analyze the effect of system parameters 𝐶𝑛𝑡𝑏𝑖𝑟𝑐ℎ and
Θ𝑏𝑜𝑡 (Section IV-C5).
We prepared four data sets for evaluation, 𝐷1, 𝐷2, 𝐷′
1
and 𝐷′
2. We obtained 𝐷1 as follows: For each host (denoted
as ℎ𝑝2𝑝) of both16 P2P bots (in 𝑁 𝐸𝑇𝑏𝑜𝑡𝑠) and 10 P2P
applications (in 𝑁 𝐸𝑇𝑃 2𝑃 ), we randomly selected one host
(denoted as ℎ𝐶𝑜𝐶) from trace 𝑁 𝐸𝑇𝐶𝑜𝐶, and we overlaid
ℎ𝑝2𝑝’s trafﬁc to the ℎ𝐶𝑜𝐶’s trafﬁc. We aligned the start
time of the ℎ𝐶𝑜𝐶’s trafﬁc according to the start time of
its corresponding ℎ𝑝2𝑝’s trafﬁc. If the duration of ℎ𝐶𝑜𝐶’s
trafﬁc was 𝑡ℎ and that of ℎ𝑝2𝑝 was 𝑡𝑝, where 𝑡ℎ > 𝑡𝑝,
we only kept the ﬁrst 𝑡𝑝 of ℎ𝐶𝑜𝐶’s trafﬁc. In effect, we
simulated the scenario where the P2P bots/applications are
running persistently in the underlying hosts. 𝐷1 represents
the scenario that a host is compromised by a P2P bot and
some legitimate P2P applications are active in the same
monitored network.
For 𝐷2, we randomly selected half (8) of the P2P bots
from 𝑁 𝐸𝑇𝑏𝑜𝑡𝑠. Then for each of the 5 P2P applications
we ran, we randomly selected one out of its two traces
from 𝑁 𝐸𝑇𝑃 2𝑃 and overlaid its trafﬁc to the trafﬁc of a
randomly selected host from 𝑁 𝐸𝑇𝐶𝑜𝐶. We further randomly
chose 3 P2P hosts from 𝑁 𝐸𝑇𝑃 2𝑃 @𝐶𝑜𝐶 identiﬁed in the ﬁrst
experiment (Section IV-C1). We ﬁnally overlaid each of 8
P2P bot traces to each of the selected 8 P2P traces (5 from
𝑁 𝐸𝑇𝑃 2𝑃 and 3 from 𝑁 𝐸𝑇𝑃 2𝑃 @𝐶𝑜𝐶), as illustrated in the
ﬁrst two columns in Table IX. 𝐷2 represents the scenario
that a host, which is compromised by a P2P bot, has an
active legitimate P2P application running at the same time.
1 to represent a “clean” network, where no host
is compromised by P2P bots. We get 𝐷′
1 by simply removing
all the hosts overlaid with bots’ traces from 𝑁 𝐸𝑇𝑏𝑜𝑡𝑠. In
order to get 𝐷′
2, we randomly select hosts compromised by
two bots for each botnet from 𝐷2 and discard the rest of the
hosts overlaid by the traces from 𝑁 𝐸𝑇𝑏𝑜𝑡𝑠. So𝐷 ′
2 represents
the scenario in which only two bots from each botnet exist
in the monitored network.
We use 𝐷′
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:47:04 UTC from IEEE Xplore.  Restrictions apply. 