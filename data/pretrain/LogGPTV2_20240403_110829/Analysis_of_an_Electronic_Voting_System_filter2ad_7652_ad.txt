be checked for legitimacy by the back-end server).
D. Key management and other cryptographic issues with the
vote and audit records
Unlike the other data stored on the voting terminal, both
the vote records and the audit logs are encrypted and check-
summed before being written to the storage device. Unfortu-
3As an example of what might happen if the party afﬁliations were listed
incorrectly, we note that, according to a news story at http://www.
gcn.com/vol19_no33/news/3307-1.html, in the 2000 New Mexico
presidential election, over 65,000 votes were incorrectly counted because a
worker accidentally had the party afﬁliations wrong. (We are not claiming
this worker had malicious intent, nor are we implying that this error had an
effect on the results of the election.)
Proceedings of the 2004 IEEE Symposium on Security and Privacy (S&P’04)  
1081-6011/04 $ 20.00 © 2004 IEEE 
nately, neither the encrypting nor the checksumming is done
with established, secure techniques. This section summarizes
the issues with Diebold’s use of cryptography in protecting the
vote records and audit logs, and then return to consequences
of Diebold’s poor choices in subsequent subsections. (Recall
that we have already discussed the lack of cryptography in
other potions of the system.)
KEY MANAGEMENT. All of the data on a storage device is
encrypted using a single, hardcoded DES [22] key:
#define DESKEY ((des_key*)"F2654hD4")
Note that this value is not a hex representation of a key,
nor does it appear to be randomly generated. Instead, the
bytes in the string “F2654hD4” are fed directly into the DES
key scheduler. It is well-known that hard-coding keys into a
program’s source code is a bad idea: if the same compiled
program image is used on every voting terminal, an attacker
with access to the source code, or even to a single program
image, could learn the key and thus read and modify voting
and auditing records. The case with the Diebold system is even
worse: from the CVS logs, we see this particular key has been
used without change since December 1998, when the CVS
tree for AccuVote-TS version 3 began, and we assume that
the key was in use much before that. Although Jones reports
that the vendor may have been aware of the key management
problems in their code since at least 1997 [16], [17], our
ﬁndings show that the design ﬂaw was never addressed. The
SAIC analysis of Diebold’s system [27] agrees that Diebold
needs to redesign their cryptography architecture. The most
appropriate solution will likely involve the use of hardware
cryptographic coprocessors.
(In a similar fashion, Diebold’s voter, administrator, and
ender cards use a hardcoded 8-byte password ED 0A ED 0A ED
0A ED 0A (hexadecimal) to authenticate the voting terminals
to the smartcards, transmitted in cleartext. The smartcards are
discussed in Section III.)
“ENCRYPTION.” Even if proper key management were to be
implemented, however, many problems would still remain.
First, DES keys can be recovered by brute force in a very short
time period [12]. DES should be replaced with either triple-
DES [26] or, preferably, AES [8]. Second, DES is being used
in CBC mode which requires a random initialization vector to
ensure its security. The implementation here always uses zero
for its IV. This is illustrated by the call to DesCBCEncrypt
in TSElection/RecordFile.cpp; since the second to
last argument is NULL, DesCBCEncrypt will use the all-
zero IV.
DesCBCEncrypt((des_c_block*)tmp,
(des_c_block*)record.m_Data, totalSize,
DESKEY, NULL, DES_ENCRYPT);
To correctly implement CBC mode, a source of “strong”
random numbers must be used to generate a fresh IV for each
encryption [2]. Suitably strong random numbers can be derived
from many different sources, ranging from custom hardware
to accumulated observations of user behavior.
“MESSAGE AUTHENTICATION.” Before being encrypted, a
16-bit cyclic redundancy check (CRC) of the plaintext data is
computed. This CRC is then stored along with the ciphertext
in the ﬁle and veriﬁed whenever the data is decrypted and
read. This process in handled by the ReadRecord and
WriteRecord functions in TSElection/RecordFile.
cpp. Since the CRC is an unkeyed, public function, it does
not provide any meaningful integrity protection for the data.
In fact, by storing it in an unencrypted form, the purpose of
encrypting the data in the ﬁrst place (leaking no information
about the contents of the plaintext) is undermined. Standard
industry practice would be to ﬁrst encrypt the data to be
stored and then to compute a keyed cryptographic checksum
(such as HMAC-SHA1 [1]) of the ciphertext [3], [19]. This
cryptographic checksum could then be used to detect any
tampering with the plaintext. Note also that each entry has
a timestamp, which can be used to detect reordering, although
sequence numbers should also be added to detect record
deletion.
E. Tampering with election results and linking voters with
their votes
A likely attack target are the voting records themselves.
When stored on the device, the voting records are “encrypted”
as described in Section IV-D. If the votes are transmitted
to a back-end authority over a network connection, as ap-
pears to be the case in at least some areas, no cryptogra-
phy is used: the votes are sent in cleartext. In particular,
CTransferResultsDlg::OnTransfer() writes ballot
results to an instance of CDL2Archive, which then writes
the votes in cleartext to a socket without any cryptographic
checksum. If the network connection is via a cable modem or a
dedicated connection, then the adversary could be an employee
at the local ISP. If the voting terminals use a dialup connection
directly to the tabulating authority’s network, then the risk
of such an attack is less, although still not inconsequential.
A sophisticated adversary, e.g., an employee of the local
phone company, could tap the phone line and intercept the
communication.
TAMPERING WITH ELECTION RESULTS. In Section IV-B we
showed that an adversary could alter election results by
modifying ballot deﬁnition ﬁles, and in Section IV-C we
showed that an adversary could inject fake votes to a back-
end tabulating authority by impersonating a legitimate voting
terminal. Here we suggest another way to modify the election
result: modify the voting records ﬁle stored on the device.
Because of the poor cryptography described in Section IV-D,
an attacker with access to this ﬁle would be able to generate or
change as many votes as he or she pleased. Furthermore, the
adversary’s modiﬁed votes would be indistinguishable from
the true votes cast on the terminal. The attack described here
is more advantageous to an adversary than the attacks in
Section IV-B and Section IV-C because it leaves no evidence
that an attack was ever mounted (whereas the attacks in
Section IV-B and Section IV-C could be discovered but not
necessarily corrected as part of a post-election auditing phase).
Proceedings of the 2004 IEEE Symposium on Security and Privacy (S&P’04)  
1081-6011/04 $ 20.00 © 2004 IEEE 
If the votes are sent
to the back-end authority over a
network, then there is another vector for an adversary to
modify the election results. Speciﬁcally, an adversary with the
ability to tamper with the channel could introduce new votes
or modify existing votes. Such an attacker could, for example,
decrease one candidate’s vote count by some number while
increasing another’s candidate’s count by the same number.
Of course, to introduce controlled changes such as these to
the votes, the attacker would beneﬁt from some knowledge
of the structure of the protocol used between the terminals
and the back-end server. This form of tampering might later
be detected by comparing the memory storage cards to data
transmitted across the networks, although the memory storage
cards themselves might also be subject to tampering. (We
brieﬂy comment that these network attacks could be largely
circumvented with the use of standard cryptographic tools,
such as SSL/TLS.)
LINKING VOTERS WITH THEIR VOTES. From analyzing the
code, we learned that each vote is written sequentially to the
ﬁle recording the votes. This fact provides an easy mechanism
for an attacker, such as a poll worker with access to the
voting records, to link voters with their votes. A poll worker
could surreptitiously track the order in which voters use the
voting terminals. Later, in collaboration with other attackers
who might intercept the “encrypted” voting records, the exact
voting record of each voter could be reconstructed.
If the results are transmitted over a network, as is the case in
at least some jurisdictions, then physical access to the voting
results is not even necessary. Recall that, when transmitted
over the network, the votes are sent in unencrypted, cleartext
form.
“RANDOMIZED” SERIAL NUMBERS. While the voter’s iden-
tity is not stored with the votes, each vote is given a serial
number in order to “randomize” the votes after they are
uploaded to the back-end tabulating authority. As we noted
above, randomizing the order of votes after they are up-
loaded to the the tabulating authority does not prevent the
possibility of linking voters to their votes. Nevertheless, it
appears that the designers wanted to use a cryptographically
secure pseudorandom number generator to generate serial
numbers for some post-processing purposes. Unfortunately,
the pseudorandom number generator they chose to use (a
linear congruential generator) is not cryptographically secure.
Moreover, the generator is seeded with static information about
the voting terminal and the election.
- used to generate ballot serial numbers
// LCG - Linear Conguential Generator
//
// A psuedo-random-sequence generator
// (per Applied Cryptography, by Bruce Schneier,
// Wiley, 1996)
#define LCG_MULTIPLIER 1366
#define LCG_INCREMENTOR 150889
#define LCG_PERIOD 714025
static inline int lcgGenerator(int lastSN)
{
return ::mod(((lastSN * LCG_MULTIPLIER)
+ LCG_INCREMENTOR), LCG_PERIOD);
}
It is interesting to note that the code’s authors apparently
decided to use an linear congruential generator because it
appeared in Applied Cryptography [26] even though in the
same work it is advised that such generators should not be
used for cryptographic purposes.
F. Audit logs
Each entry in a plaintext audit log is simply a timestamped,
informational text string. There appears to be no clear pattern
for what is logged and what is not. The whole audit log is en-
crypted using the insecure method described in Section IV-D.
An adversary with access to the audit log ﬁle could easily
change its contents.
At the time that the logging occurs, the log can also be
printed to an attached printer. If the printer is unplugged,
off, or malfunctioning, no record will be stored elsewhere to
indicate that the failure occurred. The following code from
TSElection/Audit.cpp demonstrates that the designers
failed to consider these issues:
if (m_Print && print) {
CPrinter printer;
// If failed to open printer then just return.
CString name = ::GetPrinterPort();
if (name.Find(_T("\\")) != -1)
name = GetParentDir(name) + _T("audit.log");
if (!printer.Open(name, ::GetPrintReverse(),
FALSE))
::TSMessageBox(_T("Failed to open printer "
"for logging"));
else {
[ do the printing ]
}
}
If the cable attaching the printer to the terminal is exposed,
an attacker could create discrepancies between the printed log
and the log stored on the terminal by unplugging the printer
(or, by simply cutting the cable).
G. Attacking the start of an election
Although good election processes would dictate installing
the ballot deﬁnition ﬁles well before the start of the election,
we can imagine scenarios in which the election ofﬁcials must
reinstall ballot ﬁles shortly before the start of an election, and
do not have time to distribute the deﬁnition ﬁles manually.4
One option for the election ofﬁcials would be to download
the ﬁles over the Internet. In addition to the problems we
have outlined, we caution against relying on such an approach,
as an adversary could mount a traditional Internet denial-
of-service attack against the election management’s server
and thereby prevent the voting terminals from acquiring their
ballot deﬁnition ﬁles in time for the election. Even a general
idea of the range of Internet addresses used by the election
administration would be sufﬁcient for an attacker to target a
large-scale distributed denial of service (DDoS) attack.
4In recent elections, we have seen cases where politicians passed away or
withdrew from the race very close to the election day.
Proceedings of the 2004 IEEE Symposium on Security and Privacy (S&P’04)  
1081-6011/04 $ 20.00 © 2004 IEEE 
Of course, we acknowledge that there are other ways to
postpone the start of an election at a voting location that
do not depend on Internet DDoS attacks (e.g., ﬂat tires for
all poll workers for a given precinct, or other acts of real-
world vandalism). Unlike such traditional attacks, however,
(1) the network-based attack is relatively easy for anyone
with knowledge of the election system’s network topology
to accomplish; (2) this attack can be performed on a very
large scale, as the central distribution point(s) for ballot
deﬁnitions becomes an effective single point of failure; and
(3) the attacker can be physically located anywhere in the
Internet-connected world, complicating efforts to apprehend
the attacker. Such attacks could prevent or delay the start of
an election at all voting locations in a state. We note that
this attack is not restricted to the system we analyzed; it is
applicable to any system that downloads its ballot deﬁnition
ﬁles using the Internet or otherwise relies upon the Internet.
V. SOFTWARE ENGINEERING
When creating a secure system, getting the design right is
only part of the battle. The design must then be securely
implemented. We now examine the coding practices and
implementation style used to create the voting system. This
type of analysis can offer insights into future versions of the
code. For example, if a current implementation has followed
good implementation practices but is simply incomplete, one
would be more inclined to believe that future, more complete
versions of the code would be of a similar high quality. Of
course, the opposite is also true, perhaps even more so: it is
very difﬁcult to produce a secure system by building on an
insecure foundation.
Of course, reading the source code to a product gives only
an incomplete view into the actions and intentions of the
developers who created that code. Regardless, we can see the
overall software design, we can read the comments in the code,
and, thanks to the CVS repository, we can even look at earlier
versions of the code and read the developers’ commentary as
they committed their changes to the archive.
A. Code legacy
Inside cvs.tar we found multiple CVS archives. Two
of the archives, AccuTouch and AVTSCE, implement full
voting terminals. The AccuTouch code, corresponding to
AccuVote-TS version 3, dates from December 1998 to August
2001 and is copyrighted by “Global Election Systems, Inc.,”
while the AVTSCE code, corresponding to the AccuVote-TS
version 4 system, dates from October 2000 to April 2002 and
is copyrighted by “Diebold Election Systems, Inc.” (Diebold
acquired Global Election Systems in September 2001.5) Al-
though the AccuTouch tree is not an immediate ancestor
of the AVTSCE tree (from the CVS logs, the AVTSCE tree
is actually an import of another AccuTouch-CE tree that
we do not have), the AccuTouch and AVTSCE trees are
related, sharing a similar overall design and a few identical
5http://dallas.bizjournals.com/dallas/stories/2001/
09/10/daily2.html
Proceedings of the 2004 IEEE Symposium on Security and Privacy (S&P’04)  
1081-6011/04 $ 20.00 © 2004 IEEE 
ﬁles. From the comments, some of the code, such as the
functions to compute CRCs and DES, date back to 1996 and
a company later acquired by Global Election Systems called
“I-Mark Systems.” We have already remarked (Section IV-D)
that the same DES key has been hardcoded into the system
since at least the beginning of the AccuTouch tree.
B. Coding style
While the system is implemented in an unsafe language6
(C++),
the code reﬂects an awareness of avoiding such
common hazards as buffer overﬂows. Most string operations
already use their safe equivalents, and there are comments
reminding the developers to change others (e.g., should
really use snprintf). While we are not prepared to
claim that there are no exploitable buffer overﬂows in the
current code, there are at the very least no glaringly obvious
ones. Of course, a better solution would have been to write the
entire system in a safe language, such as Java or Cyclone [15].
In such a language we would be able to prove that large classes
of attacks,
including buffer overﬂows and type-confusion