curely isolated in a single instance of Boxify. Since
the Broker fully controls all inter-component commu-
nication between the sandboxed apps, it is able to
not only separate diﬀerent apps from one another but
also to allow controlled collaboration between them.
Further, Boxify has the ability to execute apps that
are not regularly installed on the phone: Since Boxify
executes other apps by dynamically loading their
code into one of its own processes and handles all the
interaction between the sandboxed application and
the OS, there is no need to register the untrusted app
with the Android system. Hence, applications can
be installed into, updated, or removed from Boxify
without involving the PackageInstaller or having
system privileges. A potential application of these
features are application containers (e.g., enterprise
app domain, see §5.4).
4.2 Target
The Target process contains four main entities
(see Figure 6): The SandboxService (1) provides the
Broker with a basic interface for starting and termi-
nating apps in the sandbox. It is also responsible for
setting up the interceptors for Binder IPC (2) and
syscalls (3), which transparently forward calls issued
by the untrusted application to the Broker.
1) SandboxService. Isolated processes on Android
are realized as speciﬁcally tagged Service compo-
nents (see §2). In Boxify each Target is implemented
as such a tagged SandboxService component of the
Boxify app. When a new Target should be spawned, a
new, dedicated SandboxService is spawned. The Sand-
USENIX Association  
24th USENIX Security Symposium  697
boxService provides an IPC interface that enables the
Broker to communicate with the isolated process and
to call two basic lifecycle operations for the Target:
prepare and terminate. The Broker invokes the
prepare function to initialize the sandbox environ-
ment for the execution of a hosted app. As part
of this preparation, the Broker and Target exchange
important conﬁguration information for correct op-
eration of the Target, such as app meta-information
and Binder IPC handles that allow bi-directional IPC
between Broker and Target. The terminate function
shuts down the application running in the sandbox
and terminates the Target process.
The biggest technical challenge at this point was
“How to execute another third-party application within
the running isolated service process?” Naïvely, one
could consider, for instance, a warm-restart of the app
process with the new application code using the exec
syscall. However, we discovered that the most elegant
and reliable solution is to have the Broker initially im-
itate the ActivityManager by instructing the Target
process to load (i.e., bind) another application to its
process and afterwards to relay any lifecycle events
between the actual application framework and the
newly loaded application in the Target process. The
bind operation is supported by the standard Android
application framework and used during normal app
startup. The exact procedure is illustrated in Fig-
ure 7. The Broker ﬁrst creates a new SandboxService
process ( 1 ), which executes with the privileges of an
isolated process. This step actually involves multiple
messages between the Broker process, the Target pro-
cess and the system server, which we omitted here for
the sake of readability. As a result, the Broker process
receives a Binder handle to communicate with the
newly spawned SandboxService. Next, the Broker uses
this handle to instruct the SandboxService to prepare
the loading of a sandboxed app ( 2 ) by setting up
the Binder IPC interceptor and syscall interceptor
(using the meta-information given as parameters of
the prepare call). The SandboxService returns the
Binder handle to its ApplicationThread to the Bro-
ker. The application thread is the main thread of a
process containing an Android runtime and is used
by the ActivityManager to issue commands to An-
droid application processes. At this point, the Broker
emulates the behavior of the ActivityManager ( 3 )
by instructing the ApplicationThread of the Target
with the bindApplication call to load the target app
into its Android runtime and start its execution. By
default, it would be the ActivityManagerService
as part of the application framework that uses this
call to instruct newly forked and specialized Zygote
processes to load and execute an application that
System Server
Broker
Target
1
bindService()
System creates isolated process
and starts SandboxService
Binder SandboxService
2
SandboxService.prepare()
IPC & Syscall
interceptions are set up
Binder ApplicationThread
3
ApplicationThread.bindApplication()
Untrusted application
is started
6
ApplicationThread.
scheduleLaunchActivity()
Activity is started
Create Mapping
Broker Activity  Target Activity
4
ActivityManager.startActivity()
System allocates Activity
resources
5
ApplicationThread.
scheduleLaunchActivity()
Resolve Mapping
Broker Activity  Target Activity
e
s
a
h
P
p
u
t
r
a
t
S
e
s
a
h
P
y
t
i
v
i
t
c
A
h
c
n
u
a
L
Figure 7: Process to load an app into a Target process
and to launch one its Activities.
should be started. After this step, the sandboxed
app is executing.
As an example how a sandboxed app can be used,
we brieﬂy explain how an Activity component of
the sandboxed app can be launched, e.g., as result
of clicking its entry in a launcher. As explained
in §4.3, the Virtualization Layer creates a mapping
from generic Boxify components to Target compo-
nents.
In this case, it maps the Activity compo-
nent of Target to an Activity component of Boxify.
The Broker requests the Activity launch from the
ActivityManager in the SystemServer ( 4 ), which
allocates the required resources. After allocation,
it schedules the launch of the Activity component
by signaling the ApplicationThread of the targeted
app ( 5 ), which in this case is the Boxify app. Thus,
the Virtualization Layer resolves the targeted Activity
component and relays the signal to the corresponding
Target process ( 6 ).
2) Binder IPC Interceptor. Android applications
use the Binder IPC mechanism to communicate with
the (remote) components of other applications, in-
cluding the application framework services and apps.
In order to interact via Binder IPC with a remote
component, apps must ﬁrst acquire a Binder han-
dle that connects them to the desired component.
698  24th USENIX Security Symposium 
USENIX Association
To retrieve a Binder handle, applications query the
ServiceManager, a central service registry, that al-
lows clients to lookup system services by their com-
mon names. The ServiceManager is the core mech-
anism to bootstrap the communication of an ap-
plication with the Android application framework.
Binder handles to non-system services, such as ser-
vices provided by other apps, can be acquired from
the core framework services, most prominently the
ActivityManager.
Boxify leverages this choke point in the Binder
IPC interaction to eﬃciently intercept calls to the
framework in order to redirect them to the Bro-
ker. To this end, Boxify replaces references to the
ServiceManager handle in the memory of the Target
process with references to the Binder handle of the
Broker (as provided in the prepare function). These
references are constrained to a few places and can be
reliably modiﬁed using the Java Reﬂection API and
native code. Consequently, all calls directed to the
ServiceManager are redirected to the Broker pro-
cess instead, which can then manipulate the returned
Binder objects in such a way that any subsequent in-
teractions with requested services are also redirected
to the Broker. Furthermore, references to a few core
system services, such as the ActivityManager and
PackageManager, that are passed by default to new
Android app runtimes, need to be replaced as well.
By modifying only a small number of Binder handles,
Boxify intercepts all Binder IPC communication. The
technique is completely agnostic of the concrete inter-
face of the redirected service and can be universally
applied to all Binder interactions.
3) Syscall Interceptor. For system call inter-
ception, we rely on a technique called libc hook-
ing (used, for instance, also in [59]). Applications
use Android’s implementation of the Standard C
library Bionic libc to initiate system calls. With
libc hooking, we eﬃcently intercept calls to libc
functions and redirect these calls to a service client
running in the Target process. This client forwards
the function calls via IPC to a custom service compo-
nent running in the Broker. Due to space constraints,
we refer to [7] for a detailed technical explanation of
libc hooking.
In contrast to the IPC interception, which redirects
all IPC communication to the Broker, the syscall in-
terception is much more selective about which calls
are forwarded: We do not redirect syscalls that would
be anyway granted to an isolated process, because
there is no security beneﬁt from hooking these func-
tions: a malicious app could simply remove the hook
and would still succeed with the call. This exception
applies to calls to read world-readable ﬁles and to
Process boundaries
Target A
Target B
API
Layer
Core Logic
Layer
B
R
O
K
E
R
Virtualization
Layer
IPC Receiver
Syscall Recv
Srv Stub
(AMS)
Service
PEP
...
...
Srv Stub
(Location)
Service
PEP
Core
Services
Syscall
PEP
Policy
Module
Component Broker
Binder IPC
Syscall
Figure 8: Architecture of the Broker.
most system calls that operate purely on ﬁle descrip-
tors (e.g. read, write). Naturally, by omitting the
indirection via our Broker, these exempted calls per-
form with native performance. However, Boxify still
hooks calls that are security-critical and that are not
permitted for isolated processes, such as system calls
to perform ﬁle system operations (e.g. open, mkdir,
unlink) and network I/O (socket, getaddrinfo). For
a few calls, such as ﬁle operations, whose success
depends on the given parameter, the syscall intercep-
tion is parameter-sensitive in its decision whether or
not to forward this operation to the Broker.
4.3 Broker
The Broker is the main application process of Boxify
and is thus not subject to the restrictions imposed by
the isolated process. It holds all platform permissions
assigned to the Boxify app and can normally interact
with the Android middleware. The Broker acts as
a mandatory proxy for all interactions between the
Target processes and the Android system and thus
embodies the reference monitor of Boxify. These
interactions are bi-directional: On the one hand, the
untrusted app running in the Target process issues
IPC and syscalls to the system; on the other hand,
the Android middleware initiates IPC calls to Target
(e.g., basic lifecycle operations) and the Broker has
to dispatch these events to the correct Target.
The Broker is organized into three main layers
(see Figure 8): The API Layer (4) abstracts from the
concrete characteristics of the Android-internal IPC
interfaces to provide compatibility across diﬀerent
Android versions. It bridges the semantic gap be-
tween the raw IPC transactions forwarded by the
Target and the application framework semantics of
the Core Logic Layer (5), which implements the funda-
mental mechanics of the virtual runtime environment
that Boxify provides. All interaction with the system
happens through the Virtualization Layer (6), which
translates between the virtual environment inside of
USENIX Association  
24th USENIX Security Symposium  699
Boxify and the Android system on the outside. In the
following, we will look at every layer in more detail.
4) API Layer. The API Layer is responsible for
receiving and unwrapping the redirected syscall pa-
rameters from the Syscall Interceptor in the Target
and relaying them to the Core Logic Layer for monitor-
ing and execution. More importantly, it transforms
the raw Binder IPC parcels received from the IPC
Interceptor into a representation agnostic of the An-
droid version.
In order to (eﬃciently) sandbox applications at
the Binder IPC boundary, Boxify must semantically
interpret the intercepted Binder parcels. However,
intercepted parcels are in a raw representation that
consists only of native types that the kernel mod-
ule supports and the sender marshalled all higher-
level objects (e.g., Java classes) to this representa-
tion. This impedes an eﬃcient sandboxing. To solve
this problem, Boxify leverages the default Android
toolchain for implementing Binder-based RPC pro-
tocols: To ensure that sender and receiver can actu-
ally communicate with each other, the receiver must
know how to unmarshal the raw parcel data (exactly
like Boxify). Android supports the developers in
this process through the Android Interface Deﬁnition
Language (AIDL), which allows deﬁnitions of Binder
interfaces very similar to Java interfaces, including
the names and signatures of remotely callable func-
tions. The Android SDK toolchain generates the
required boilerplate marshalling code from AIDL def-
initions both for the receiver (Stub) and the sender
(Proxy). For system services, these Stubs are auto-
matically generated during system build and Boxify
uses the generated Stubs (which ship with Android
OS and are conveniently accessible to third-party
application) to unmarshal the raw Binder IPC parcel
back to their application framework semantic (i.e.,
Java objects, etc). In essence, this allows us to gen-
erate the API layer of the Broker in an almost fully-
automatic way for each Android version on which
Boxify is deployed. Since Boxify is in full control of
the Binder handles of the encapsulated app (i.e., calls
to the ServiceManager, ActivityManager, etc.), it
can eﬃciently determine which Binder handle of the
app addresses which system service and hence which
Stub must be used to correctly unmarshal the raw
Binder parcel intercepted from each handle.
However, the exact structure of the unmarshalled
data and the functions (name and signature) depend
entirely on the AIDL ﬁle. Since the system service
interfaces describe the internal Android API, these
interfaces change frequently between Android ver-
sions. Hence Boxify would have to implement each
possible version of a Stub for every available Android
version. Since this Stub implementation, in contrast
to the marshalling logic, can not be automated, this
complicates eﬃcient sandboxing of apps across multi-
ple Android versions. Consequently, it is desirable to
transform the unmarshalled IPC data into a version-
agnostic representation and then implement each
Stub once and for all for this version. To accomplish
this in Boxify, we borrow ideas from Google’s pro-
prietary SafeParcel class: In contrast to the regular
Binder parcel, the SafeParcel carries structural in-
formation about the data stored in it, which allows
the receiver of an IPC request to selectively read
parts of the payload without knowing its exact struc-
ture. We achieve the same result by transforming
the version-dependent parcel into a version-agnostic
key-value store (where keys are the parameter names
of methods declared in the interface deﬁnitions) and
adapting the Core Logic Layer and Stub implementa-
tions to work with these version-agnostic data stores.
Thus, while the API layer is version-dependent and
automatically generated for each Android version,
the remaining layers of Broker are version-agnostic
and implemented only once.
5) Core Logic Layer. The Core Logic Layer pro-
vides essential functionality required to run apps on
Android by replicating a small subset of the func-
tionality that Android’s core system services pro-
vide. Most prominently, this layer provides a mini-
mal implementation of the PackageManager, which