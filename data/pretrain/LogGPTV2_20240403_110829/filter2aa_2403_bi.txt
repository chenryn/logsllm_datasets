           MOVS    r4,#1 
|L0.4| 
           MOVS    r1,r4 
           ADR     r0,|L0.24| 
           BL   
__2printf 
           ADDS 
r4,r4,#3 
           CMP  
r4,#0x64 
           BLT     |L0.4| 
           MOVS    r0, #0 
           POP     {r4,pc} 
           ENDP 
           DCW      0x0000 
|L0.40| 
           DCB      "%d\n",0 
指令清单 14.30  Optimizing GCC 4.9 (ARM64) 
main: 
           stp     x29, x30, [sp, -32]! 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 14 章  循    环 
169 
           add     x29, sp, 0 
           stp     x19, x20, [sp,16] 
           adrp    x20, .LC0 
           mov     w19, 1 
           add     x20, x20, :lo12:.LC0 
.L2: 
           mov     w1, w19 
           mov     x0, x20 
           add     w19, w19, 3 
           bl      printf 
           cmp     w19, 100 
           bne     .L2 
           ldp     x19, x20, [sp,16] 
           ldp     x29, x30, [sp], 32 
           ret 
.LC0: 
           .string "%d\n" 
指令清单 14.31  Optimizing GCC 4.4.5 (MIPS) (IDA) 
main: 
var_18   
= -0x18 
var_10   
= -0x10 
var_C    
= -0xC 
var_8    
= -8 
var_4    
= -4 
lui      
$gp, (__gnu_local_gp >> 16) 
addiu    
$sp, -0x28 
la       
$gp, (__gnu_local_gp & 0xFFFF) 
sw       
$ra, 0x28+var_4($sp) 
sw       
$s2, 0x28+var_8($sp) 
sw       
$s1, 0x28+var_C($sp) 
sw       
$s0, 0x28+var_10($sp) 
sw       
$gp, 0x28+var_18($sp) 
la       
$s2, $LC0        # "%d\n" 
li       
$s0, 1 
li       
$s1, 0x64  # 'd' 
loc_30:           
# CODE XREF: main+48 
lw       
$t9, (printf & 0xFFFF)($gp) 
move     
$a1, $s0 
move     
$a0, $s2 
jalr     
$t9 
addiu    
$s0, 3 
lw       
$gp, 0x28+var_18($sp) 
bne      
$s0, $s1, loc_30 
or       
$at, $zero 
lw       
$ra, 0x28+var_4($sp) 
lw       
$s2, 0x28+var_8($sp) 
lw       
$s1, 0x28+var_C($sp) 
lw       
$s0, 0x28+var_10($sp) 
jr       
$ra 
addiu    
$sp, 0x28 
$LC0:    
.ascii   "%d\n"         # DATA XREF: main+20 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 1155 章
章    CC 语
语言
言字
字符
符串
串的
的函
函数
数  
15.1 strlen() 
本章是循环控制语句的具体应用。通常，strlen()函数由循环语句 while()语句实现。参照 MSVC 标准库
对 strlen()函数的定义方法，我们讨论下述的程序： 
int my_strlen (const char * str) 
{ 
         const char *eos = str; 
         while( *eos++ ) ; 
         return( eos - str - 1 ); 
} 
int main()  
{ 
         // test 
         return my_strlen("hello!"); 
}; 
15.1.1 x86 
Non-optimizing MSVC 
使用 MSVC 2010 编译上述程序可得到： 
_eos$ = -4                
; size = 4 
_str$ = 8                 
; size = 4 
_strlen PROC 
    push    ebp 
    mov     ebp, esp 
    push    ecx 
    mov     eax, DWORD PTR _str$[ebp] ; 将指针指向字符串 
    mov     DWORD PTR _eos$[ebp], eax ; 指向局部变量 eos 
$LN2@strlen_: 
    mov     ecx, DWORD PTR _eos$[ebp] ; ECX=eos 
    ; take 8-bit byte from address in ECX and place it as 32-bit value to EDX with sign extension 
    movsx   edx, BYTE PTR [ecx]         
    mov     eax, DWORD PTR _eos$[ebp] ; EAX=eos 
    add     eax, 1                       ; EAX++ 
    mov     DWORD PTR _eos$[ebp], eax ; EAX 还原为 EOS 
    test    edx, edx                     ; EDX = 0 ? 
    je      SHORT $LN1@strlen_          ; yes, then finish loop 
    jmp     SHORT $LN2@strlen_          ; continue loop 
$LN1@strlen_: 
    ; here we calculate the difference between two pointers 
    mov    eax, DWORD PTR _eos$[ebp] 
    sub    eax, DWORD PTR _str$[ebp] 
    sub    eax, 1        
; subtract 1 and return result 
    mov    esp, ebp 
    pop    ebp 
    ret    0 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 15 章  C 语言字符串的函数 
171 
_strlen_ ENDP 
这里出现了两个新指令：MOVSX 和 TEST。 
此处，MOVSX 指令从内存中读取 8 位（单字节）数据，并把它存储到 32 位寄存器里。MOVSX 是
MOV with Sign-Extend 的缩写。在把小空间数据转换为大空间数据时，存在填充高位数据的问题；本例中，
MOVSX 将用原始数据的 8 位数据填充 EDX 寄存器的低 8 位；如果原始数据是负数，该指令将使用 1 填充
第 8 到第 31 位（高 24 位），否则使用 0 填充高 24 位。 
这是为了保证有符号型数据在类型转换后的数值保持不变。 
根据 C/C++标准，char 类型数据是 signed（有符号型）数据。现在设想一下把 char 型数据转换为 int
型数据（都是有符号型数据）的情况：假如 char 型数据的原始值是－2（0xFE），直接把整个字节复制到 int
型数据的最低 8 位上时，int 型数据的值就变成 0x000000FE，以有符号型数据的角度看它被转换为 254 了，
而没有保持原始值－2。－2 对应的 int 型数据是 0xFFFFFFFE。所以，在把原始数据复制到目标变量之后，
还要使用符号标志位填充剩余的数据，而这就是 MOVSX 的功能。 
本书第 30 章会更为详细地介绍有符号型数据的表示方法。 
虽然不太确定寄存器是否有必要分配 EDX 寄存器专门保存 char 型数据，看上去它只使用了寄存器的
低 8 位空间（相当于 DL）。显然，编译器根据自身的寄存器分配规则进行了相应分配。 
您将在后面看到“TEST EDX，EDX”指令。本书会在第 19 章详细介绍 TEST 指令。在本例中，它的
功能是检查 EDX 的值是否是零，并设置相应的标志位。 
Non-optimizing GCC 
使用 GCC 4.4.1（未启用优化选项）编译上述程序，可得到： 
public strlen 
strlen           proc near 
eos              
= dword ptr -4 
arg_0            = dword ptr  8 
                  push     ebp 
                  mov      ebp, esp 
                  sub      esp, 10h 
                  mov      eax, [ebp+arg_0] 
                  mov      [ebp+eos], eax 
loc_80483F0: 
                   mov      eax, [ebp+eos] 
                  movzx   eax, byte ptr [eax] 
                  test     al, al 
                   setnz   al 
                  add      [ebp+eos], 1 
                  test     al, al 
                  jnz      short loc_80483F0 
                  mov      edx, [ebp+eos] 
                  mov      eax, [ebp+arg_0] 
                   mov      ecx, edx 
                  sub      ecx, eax 
                  mov      eax, ecx 
                  sub      eax, 1 
                  leave 
                  retn 
strlen           endp 
GCC 编译的结果和 MSVC 差不多。这里它没有使用 MOVSX 指令，而是用了 MOVZX 指令。MOVZX
是 MOV with Zero-Extent 的缩写。在将 8 位或 16 位数据转换为 32 位数据的时候，它直接复制原始数据到
目标寄存器的相应低位，并且使用 0 填充剩余的高位。拆文解字的角度来看，这条指令相当于一步完成了
“xor eax, eax”和“mov al，[源 8/16 位数据]”2 条指令。 
另一方面，编译器可以生成“mov al, byte ptr [eax] / test al, al”这样的代码，但是这样一来 EAX 寄存器的高
异步社区会员 dearfuture(15918834820) 专享 尊重版权
172 
逆向工程权威指南（上册） 
位将会存在随机的噪声。不如说，这就是编译器的短板所在——在它生成汇编代码的时候，它不会照顾汇编代
码的（人类）可读性。严格说来，编译器编译出来的代码本来就是给机器运行的，而不是给人阅读的。 
本例还出现了未介绍过的 SETNZ 指令。从前面一条指令开始解释：如果 AL 的值不是 0，则“test al, al”
指令会设置标志寄存器 ZF=0；而 SETNZ（Not Zero）指令会在 ZF＝0 的时候，设置 AL＝1。用白话解说，
就是：如果 AL 不等于 0，则跳 到 loc_80483F0 处。编译器转译出来的代码中，有些代码确实没有实际意义，
这是因为我们没有开启优化选项。 
Optimizing MSVC 
使用 MSVC（启用优化选项/Ox /Ob0）编译上述程序，可得到如下所示的指令。 
指令清单 15.1  Optimizing MSVC 2012 /Ob0 
_str$ = 8                        
; size = 4 
_strlen PROC 
         mov     edx, DWORD PTR _str$[esp-4]  
;用 EDX 作字符串指针 
         mov     eax, edx                        
;  复制到 EAX 
$LL2@strlen: 
         mov     cl, BYTE PTR [eax]  
; CL = *EAX 
         inc     eax                   
; EAX++ 
         test    cl, cl                
; CL==0? 
         jne     SHORT $LL2@strlen     
; no, continue loop 
         sub     eax, edx              
; 计算指针的变化量 
         dec     eax                    
; decrement EAX 
         ret     0 
_strlen ENDP 
优化编译生成的程序短了很多。不必多说，只有在函数较短且局部变量较少的情况下，编译器才会做
出这种程度的优化。 
inc/dec 指令就是递增、递减指令，换句话说它们相当于运算符“＋＋”“−−”。 
Optimizing MSVC + OllyDbg 
我们使用 OllyDbg 打开 MSVC 优化编译后的可执行文件。程序在进行第一次迭代时的情况如图 15.1 所示。 
图 15.1  OllyDbg：第一次迭代 
OllyDbg 识别出了循环结构，并且用方括号把整组循环体指令标示了出来。如需 OllyDbg 在内存窗口
里显示对应的数据，可用右键单击 EAX 寄存器，然后选择“Follow in Dump”，OllyDbg 将自动滚动到对应
的地址。在内存数据的显示窗口里，我们可以看到字符串“hello！”。字符串会用数值为零的字节做结尾，
在零之后的数据就是随机的噪音数据。如果 OllyDbg 发现某个寄存器的值是指向这片内存地址（某处）的
指针，它就会把对应的字符串提示出来。 
然后不停地按 F8 键，等待循环体进入下一次循环。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 15 章  C 语言字符串的函数 
173 
如图 15.2 所示，EAX 寄存器的值是个指针，它指向字符串的第二个字符的地址。 
图 15.2  OllyDbg：第二次迭代 
继续按 F8 键，等待循环语句执行完毕。 
如图 15.3 所示，EAX 寄存器里的指针最终指向了数值为零的字符串终止字符。在循环过程中，EDX
寄存器的值始终没有发生变化，它一直是字符串首地址的指针。在循环语句结束后，程序即将计算两个指
针的差值。 
图 15.3  OllyDbg：即将计算指针（地址）之间的差值 
把这两个寄存器的值（指针）相减，再减去 1，就可得到字符串的长度，如图 15.4 所示。 
图 15.4  OllyDbg：EAX 递减 
经计算，指针之间的差值为 7。实际上我们的字符串“hello！”只有 6 个字节，算上结束标志字节才是
7 个字节。很明显字符串以外的那个数值为零的字节不应当纳入字符串的长度，所以函数最后做了递减运
算，把这个字节去掉。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
174 
逆向工程权威指南（上册） 
Optimizing GCC 
使用 GCC 4.4.1 编译（启用优化选项“－O3”）上述程序，可得到： 
public strlen 
strlen           proc near 
arg_0            = dword ptr  8 
push     ebp 
mov      ebp, esp 
mov      ecx, [ebp+arg_0] 
mov      eax, ecx 
loc_8048418: 
movzx   edx, byte ptr [eax] 
add      eax, 1 
test     dl, dl 
jnz      short loc_8048418 
not      ecx 
add      eax, ecx 
pop      ebp 
retn 
strlen  
endp 
GCC 编译的结果和 MSVC 差不多，主要区别体现在 MOVZX 指令上。 
即使把这条 MOVZX 指令替换为“mov dl, byte ptr [eax]”也没问题。 
GCC 编译器的代码生成器这样做，或许是为了便于“记住”整个寄存器已经分配给了 char 型变量，
以保证寄存器的高地址位（bits）不会含有噪音数据。 
接下来将要介绍的是 NOT 指令。NOT 指令对操作数的所有位（bit）都进行非运算。可以说，这条指
令和 XOR ECX, 0xffffffffh 指令等价。“not ecx”的结果与某数相加，相当于某数减去 ECX 和 1。在程序开
始的时候，ECX 保存了字符串首个字符的地址（指针），EAX 寄存器存储的是终止符的地址。对 ECX 求
非、再与 eax 相加，就是在计算 eax−ecx−1 的值。这种运算可以得到正确的字符串长度。 
其中的数学问题，请参见第 30 章。 
换句话说，在执行完循环语句之后，函数进行了如下操作： 
ecx=str; 
eax=eos; 
ecx=(-ecx)-1;  
eax=eax+ecx 
return eax 
它得到的结果与下述运算完全相同： 
ecx=str; 