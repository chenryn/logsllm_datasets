# Mahimahi: A Lightweight Toolkit for Reproducible Web Measurement

**Authors:**  
Ravi Netravali, Anirudh Sivaraman, Keith Winstein, Somak Das, Ameesh Goyal, and Hari Balakrishnan  
MIT Computer Science and Artificial Intelligence Laboratory  
{ravinet, anirudh, keithw, somakrdas, ameesh, hari}@csail.mit.edu

## Abstract
This demonstration introduces Mahimahi, a lightweight toolkit designed for reproducible web measurement. Mahimahi records websites and replays them under emulated network conditions. The toolkit is structured as a set of composable UNIX shells, including RecordShell and ReplayShell for recording and replaying web pages, and DelayShell and LinkShell for network emulation. Additionally, Mahimahi provides a corpus of recorded websites, benchmark results, and link traces (available at https://github.com/ravinet/sites).

Mahimahi improves upon previous record-and-replay frameworks in three key ways:
1. **Multi-Origin Preservation:** It maintains the multi-origin nature of web pages, which is present in approximately 98% of the Alexa U.S. Top 500.
2. **Isolation:** Mahimahi isolates its own network traffic, allowing multiple instances to run concurrently without impacting the host machine or collected measurements.
3. **Flexibility:** It is not inherently tied to browsers and can be used to evaluate various applications.

A demonstration of Mahimahi recording and replaying a web page over an emulated link is available at http://youtu.be/vytwDKBA-8s. The source code and instructions for using Mahimahi are available at http://mahimahi.mit.edu/.

## Categories and Subject Descriptors
C.4 [Performance of Systems]: Measurement Techniques; H.3.5 [Information Storage and Retrieval]: Online Information Services

## Keywords
Page Load Time, Record-and-Replay, Web Measurements

## 1. Introduction
Mahimahi is a toolkit that evaluates the performance of techniques aimed at improving web speed under different network conditions. This is of interest to network protocol designers, web developers, and browser developers who need to understand the impact of new protocols, website optimizations, and changes to DOM and JavaScript parsers on page load times. Mahimahi is structured as a set of UNIX shells, each of which is described below.

## 2. Mahimahi's Shells
### RecordShell
RecordShell (Figure 1a) records HTTP data during actual page loads and stores it on disk for subsequent replay. It spawns a man-in-the-middle proxy with an HTTP parser on the host machine to store and forward all HTTP(S) traffic to and from an application running within RecordShell. At the end of a page load, a recorded folder contains a file for each request-response pair. RecordShell is compatible with any unmodified browser because recording is done transparently without modifying browser settings.

### ReplayShell
ReplayShell (Figure 1b) mirrors a website using content recorded by RecordShell. It accurately emulates the multi-origin nature of websites by spawning an Apache 2.4.6 web server for each distinct IP/port pair seen during recording. To operate transparently, ReplayShell binds its Apache web servers to the same IP address and port number as their recorded counterparts. Each distinct server IP has a separate virtual interface. All browser requests are handled by one of ReplayShell's servers, each of which can access the entire recorded content for the site. The Apache configuration redirects incoming requests to a CGI script, which compares each request to the set of all recorded request-response pairs to locate a matching response.

### DelayShell
DelayShell emulates a link with a fixed minimum one-way delay. All packets to and from an application running inside DelayShell are stored in a packet queue. A separate queue is maintained for packets traversing the link in each direction. Each packet is released from the queue after the user-specified one-way delay, enforcing a fixed per-packet delay.

### LinkShell
LinkShell is used to emulate a link using packet-delivery traces. It can emulate both time-varying links, such as cellular links, and links with a fixed link speed. When a packet arrives, it is placed into either the uplink or downlink packet queue. LinkShell releases packets from each queue based on the corresponding packet-delivery trace. Each line in the trace represents a packet-delivery opportunity: the time at which an MTU-sized packet will be delivered in the emulation.

## 3. Suitability for Accurate Measurement
### Low Overhead
Mahimahi imposes low overhead on page load time measurements. Figure 2 shows that when loading 500 websites in our corpus, DelayShell with 0 ms delay imposes only a 0.15% overhead on median page load time compared to ReplayShell alone, while LinkShell with a 1000 Mbits/s trace adds 1.5% overhead.

### Reproducibility
Table 1 summarizes the distribution of page load times when loading two web pages, www.cnbc.com and www.wikihow.com, 100 times each on two separate host machines. The mean page load times for each site are less than 0.5% apart across the two machines, suggesting that Mahimahi produces comparable results on different host machines. The standard deviations are all within 1.6% of their means, indicating consistent results on a single host machine.

## 4. Novelty
### Multi-Origin Web Pages
Unlike other tools, ReplayShell preserves the multi-origin nature of websites, which is critical for accurate measurement of page load times. Using our corpus of recorded sites, we computed the distribution of physical servers per website in the Alexa U.S. Top 500. The median number of servers is 20, while the 95th percentile is 51. Only 9 web pages use a single server.

To evaluate the impact of not capturing the multi-origin nature of websites, we modified ReplayShell to serve all content from a single web server. Table 2 shows the median and 95th percentile difference in page load time between when multi-origin nature is and is not preserved, over nine different network configurations. Although the page load times are comparable over a 1 Mbit/s link, not capturing the multi-origin nature yields significantly worse performance at higher link speeds.

We further illustrate the importance of multi-origin preservation by comparing measurements collected using ReplayShell to real page load times on the web. Figure 3 shows the distribution of page load times when loading www.nytimes.com 100 times on the web and inside ReplayShell with and without multi-origin preservation. For fair comparison, we recorded the minimum round trip time to www.nytimes.com for each page load on the web and used DelayShell to emulate this for each page load with ReplayShell. ReplayShell with multi-origin preservation yields page load times that more accurately resemble page load times collected on the internet. The median page load time is 7.9% larger than the internet measurements, which is less than the 29.6% discrepancy when the multi-origin nature is not preserved.

### Isolation
Each namespace created by Mahimahi is separate from the host machine’s default namespace and every other namespace. Processes running inside the namespace of a Mahimahi tool are completely isolated from those running outside. This means that host machine traffic does not affect the measurements reported by Mahimahi, and Mahimahi’s network emulation does not affect traffic outside of Mahimahi’s network namespaces. This enables many different configurations to be concurrently tested on the same host machine, and in complete isolation from each other. In contrast, web-page-replay modifies DNS resolution on the host machine and affects all traffic from the host machine.

### Beyond Browsers
Although most existing record-and-replay frameworks only replay browser page loads, Mahimahi’s design allows it to replay any application that uses HTTP. For instance, a mobile device emulator, such as for Android [2], can be used to analyze and measure mobile application performance.

## References
[1] http://code.google.com/p/web-page-replay.  
[2] http://developer.android.com/tools/devices/emulator.html.  

**Figures and Tables:**
- **Figure 1:** Arrows indicate the direction of traffic.
- **Figure 2:** DelayShell’s and LinkShell’s low overhead.
- **Figure 3:** Multi-origin preservation yields measurements closer to the web.
- **Table 1:** Mean ± standard deviation for page load times across machines.
- **Table 2:** 50th, 95th percentile page load time difference without multi-origin preservation.