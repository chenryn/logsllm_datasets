---
tags: ['计算机网络']
books: [
  {name: '计算机网络:自顶向下方法'}
]
---
# 运输层
- 运输层的功能：为不同主机上的进程提供逻辑通信 
**运输层与网络层的关系**：网络层为运输层提供服务，运输层构建在网络层之上
## 运输层协议
- TCP
- UDP
运输层通过Socket端口来实现多路复用与多路分解
## UDP
- 对发送时间以及发送内容控制能力更强
- 无连接
- 无状态
- 分组首部小
- 支持一对一、一对多、多对一和多对多的交互通信
虽然 UDP 不提供可靠交付，但在某些情况下 UDP 确是一种最有效的工作方式（一般用于即时通信），比如： QQ 语音、 QQ 视频 、直播等等
### UDP首部
![2020379295](/assets/2020379295.jpg)
- 校验和：通过对数据部分的比特进行累加得到
## TCP
面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流，每一条 TCP 连接只能是点对点的
### TCP首部
![20203793059](/assets/20203793059.png)
序号：对字节流进行编号，序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401
确认号：期望收到的下一个报文段的序号，例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701
数据偏移：也就是首部的长度
- RST/SYN/FIN 用于连接的建立与拆除
- URG 代表是上层紧急数据
- ACK 确认
- PSH 尽快交给应用层
窗口：窗口值作为接收方让发送方设置其发送窗口的依据
### RTT 估计
一个报文段从发送再到接收到确认所经过的时间称为往返时间 RTT
```java
均值RTT = 0.875 * 均值RTT + 0.125 * 样本RTT
```
这个估值可以被用来作为超时的参考，如果小于这个值，会造成不必要的重传
另外一种超时间隔的实现是当发生超时时，超时间隔取上次超时间隔的两倍，这是一种简单的拥塞控制，根链路层的指数回避很像
### 可靠数据传输
一个可靠的数据传输协议要素：检验和、序号、定时器、肯定与否定确认
#### 原理
使用基于停等操作的可靠传输协议效率不高，一个分组必须等到ACK后下一个分组才能开始传送
![停等操作](/assets/屏幕截图%202021-07-13%20160141.png)
为提高效率，可使用流水线操作，流水线操作要求发送接收方具有缓存n个分组的能力，出现差错时，有两种方式来进行恢复，
![流水线发送与确认](/assets/屏幕截图%202021-07-13%20160320.png)
分别是回退N步(GBN)
![GBN滑动窗口](/assets/屏幕截图%202021-07-13%20160653.png)
GBN通过累积确认的方式来确认已接收到的分组位置，以及重传已发送但还未确认的分组来进行错误恢复。
![202269153457](/assets/202269153457.png)
和选择重传(SR)，发送方仅重传怀疑接收方出错的分组，相比GBN重传大量分组，选择重传发送的分组较少
![屏幕截图 2021-07-13 161611](/assets/屏幕截图%202021-07-13%20161611.png)
![屏幕截图 2022-06-09 153945](/assets/屏幕截图%202022-06-09%20153945.png)
![20203795214](/assets/20203795214.png)
TCP使用以下方式保证可靠传输：
1. 应用数据被分割成 TCP 认为最适合发送的数据块。这个值被称为MTU, 由于以太网的帧大小为1500，所以一个典型值为1460
2. TCP 给发送的每一个包进行编号，接收方对数据包进行排序，把有序数据传送给应用层。
校验和： TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。
3. TCP 的接收端会丢弃重复的数据。
4. 流量控制： TCP 连接的每一方都有固定大小的缓冲空间，TCP的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议。 （TCP 利用滑动窗口实现流量控制）
5. 拥塞控制： 当网络拥塞时，减少数据的发送。
6. ARQ协议： 也是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组。
7. 超时重传： 当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。
### ARQ协议
通过使用确认和超时这两个机制，在不可靠服务的基础上实现可靠的信息传输
#### 停止等待ARQ协议
每发完一个分组就停止发送，等待对方确认（回复ACK）。如果过了一段时间（超时时间后），还是没有收到 ACK 确认，说明没有发送成功，需要重新发送，直到收到确认后再发下一个分组
#### 连续ARQ协议
发送方维持一个发送窗口，凡位于发送窗口内的分组可以连续发送出去，而不需要等待对方确认
### 流量控制
- 滑动窗口
![2020379557](/assets/2020379557.jpg)
接收方通过在报文段中添加接口窗口字段来进行双方之间的速度匹配
接收方发送的确认报文中的win窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据，也就是背压机制
早期的win字段最大值也就说65535，后面在 TCP 扩展部分也就是 TCP Options 里面，增加一个 Window Scale 的字段，它表示原始 Window 值的左移位数，最高可以左移 14 位，左移一位等于原始win值乘以2的一次方
如果发送方一直没有收到 ACK，随着数据不断被发送，很快可用窗口就会被耗尽。在这种情况下，发送方也就不会继续发送数据了，这种发送端可用窗口为零的情况称为“零窗口”
为了防止零窗口造成的无法发送数据，需要设置一个零窗口定时器，时间一到就询问接收端窗口是否可用
### 拥塞控制
拥塞控制就是为了防止过多的数据注入到网络中，这样就可以使网络中的路由器或链路不致于过载
为了进行拥塞控制，TCP 发送方要维持一个 拥塞窗口(cwnd) 的状态变量。拥塞控制窗口的大小取决于网络的拥塞程度，并且动态变化
#### 原则
- 报文段丢失时发送方降低速率
- 未确认报文段确认到达时，发送方增加速率
- 带宽探测，尝试性发送数据，来判断拥塞程度
#### 慢启动
慢开始算法的思路是当主机开始发送数据时 较好的方法是先探测一下，即由小到大逐渐增大发送窗口
![20203795753](/assets/20203795753.jpg)
不断增加直到超时或者拥塞窗口增长到慢启动阈值，超时后将cwnd（拥塞窗口）/2
但这种方式似乎在连接前期会很慢，对于一些响应性需求极高的服务，可以通过部署一台距离用户物理空间较近的前端服务器，这台前端服务器通过一个较大的窗口连接后端服务器来降低延迟
#### 拥塞避免
让拥塞窗口cwnd缓慢增大，即每经过一个往返时间RTT就把发送放的cwnd加1个单位
同样，发生超时也会将cwnd/2
![202288164835](/assets/202288164835.webp)
#### 快重传与快恢复
为了减少丢包重传所浪费的空耗时间
- 快重传：，一旦发送方收到 3 次重复确认（加上第一次确认就一共是 4 次），就不用等超时计时器了，直接重传这个报文
- 快恢复：在遇到拥塞点之后，通过快速重传，就不再进入慢启动，从减半的拥塞窗口开始，进行线性增长
![20203710029](/assets/20203710029.png)
![快恢复](/assets/202288165412.webp)
### 公平性