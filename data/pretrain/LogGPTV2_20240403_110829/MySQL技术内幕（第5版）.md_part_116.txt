USAGE 权限的具体用法是：在全局级“授予”此权限、指定账户名，并提供此账户非权限的新
让你更改某个账户的特性，而非那些与权限有关的特性，同时还可以保证原有的权限不受影响。
13.2.2.2使用“无权限”的USAGE权限
或列的名字时，所有与该表或列相关联的权限都不会被更新。
识符（不是作为字符串）引起来。例如：
WITH子句只允许与GRANTOPTION一起使用。更多信息请参考13.2.7节。
代理用户拥有被代理用户的所有权限。下面这条语句能够让clint 拥有bart 的权限：
权限除外)：
库级的ALTERROUTINE和EXECUTE 权限，或者针对单个的例程进行权限分配（CREATEROUTINE
个括号，并把受该权限限制的那些列列在其中。
有列出任何列），以及紧跟在UPDATE关键字之后的括号里所列出的那些列的更新权限。
们的地址进行更改。用于建立这个MySQL账户的语句如下所示：
理所拥有的写访问权限便相当有限，仅可以在人们更新其成员资格时更新其有效期，以及对他
你的助理，
使用各种与列特定相关的权限会很有用处。假设，你在美史联盟工作，现在有位志愿者想要估
权限分配。当你想让表中某些列对某位用户不可见时，或者当某位用户只能修改特定的列时，
权限说明符USAGE表示的是“无权限”。
在GRANT语句里，如果需要将数据库名、表名或列名用引号引起来，则需要将它们作为标
授予 PROXY 权限的语法受一定的限制：必须单独指定它，不允许使用 REQUIRE子句，并且
PROXY权限不能应用于特定的操作。实际上，它可以让一个用户成为另一个用户的代理。
如果想让某个账户可以对存储例程（即函数和过程）进行操作，则可以使用全局级或数据
如果想要在一条GRANT语句里授予多个列级的权限，则必须在每种权限的名字后面放置-
MySQL允许客户端使用SSL协议来建立安全连接，该协议会对客户端和服务器之间的数据
GRANT
GRANT USAGE
权限表里的行不会“随同”数据库对象的重命名操作一起变化。例如，
GRANT SELEcT, UPDATE (expiration,street,city,state′,zip)
GRANT EXECUTE ON PROCEDURE sampdb.count_students TO 'wilbur'@localhost';
GRANT语句授予那位新助手的权限包括整个member表的读取权限（因为在SELECT后面没
GRANT
GRANT
如果想要
qpdures、No
GRANT SELECT,INSERT,DELETE,UPDATE ONSampdb.*TO'jennie'@'%;
要求账户使用安全连接
USAGE
USAGE
为你减轻一点负担。于是，你决定让这位新助理拥有包含成员信息的member表的
息要实现比数据库级更细的访问控制，则可以对各个表，甚至是表里的各个列，进行
要在不影响某个账户权限的前提下，改变账户密码，要求用户必须使用SSL进
*.*T
UPDATE
**
TO
account
account
To'assistant'@'localhost';
WITH MAX_CONNECTIONS_PER_HOUR 10;
REQUIRESSL;
TO
，它可能看上去不是很有用，但其实不然。它可以
wilbur'@'localhost
13.2管理MySQL用户账户
，当更改某个给定表
487
助
做
---
## Page 508
默认值，但是对于当前拥有SSL要求的账户，
有者相匹配的证书：
它可用来测试 SSL连接。使用openssl 命令可以显示出证书的签发者和持有者：
句中的ISSUER或 SUBJECT 选项进行设定。ISSUER和 SUBJECT 分别代表证书的签发者和持有
进行连接，而不用过多地指定用户必须使用的安全连接类型：
周期来执行加密和解密操作。
身份认证信息的方式。安全连接提供了一层额外的保护方式，但是其代价就是需要额外的CPU
流进行加密，使它们不会以明文形式进行传送。此外，X509可被用作客户端通过SSL连接提供
488
可以用 REQUIRE子句来指定安全连接需求。使用REQUIRE SSL 则可以要求用户只用 SSL
在使用REQUIRE子句时，还需注意以下几点。
如果想要显式地表明无需使用安全连接，
也可以使用 REQUIRE子句来表明连接必须使用某种特定的密码类型来进行加密：
GRANT ALL ON sampdb.* TO 'eladio'@%.example.com'
GRANT ALL ON sampdb.*TOeladio'@%.example.com'
下面这条GRANT语句表明，当客户端在使用该账户来进行连接时，
subject=/C=US/ST=WI/L=Madison/O=sampdb/OU=client/CN=sampdb
% openssl x509 -issuer -subject -noout -in client-cert.pem
则可以使用REQUIRE要求客户端的X509证书必须具备某些特征。这些特征由REQUIRE
REQUIREX509只会要求证书内容是有效的，而不会对其做过多约束。如果还想更严格
GRANT ALL ON sampdb.* TO 'eladio'@%.example.com' REQUIRE. X509;
如果想更严格一点，可以要求客户端提供一份有效的X509证书：
口
口
口
REQUIRE CIPHERDHE-RSA-AES256-SHA';
AND SUBJECT
连接使用的接口都由主机内部处理，并且通信不会跨外部网络。
务器建立的连接，或者与网络环回接口IP地址127.0.0.1（或：：1）建立的连接。这些
样的账户所包含的连接类型只会涉及通过UNIX套接字文件、命名管道或共享内存与服
没有多大意义。这种连接不会被窥探，因此对它们进行加密不会带来任何好处。像这
如果某个账户在连接服务器时不需要经过外部网络，那么对账户使用REQUIRE子句便
许使用安全连接。
和客户端程序的配置都支持SSL，即使没有要求使用安全连接，所有的用户仍然会被允
使用REQUIRE子句，只能表明某个账户是否必须使用安全连接进行连接。只要服务器
SSL，那么该账户最终将无法使用。
如果指定某个账户必须使用SSL进行连接，但服务器或客户端程序中的某一方不支持
息请参考13.5节。
配置MySQL，使其支持SSL，并且以某种方式启动服务器和客户端程序。更多相关信
上并不会为客户端程序提供使用该账户进行安全连接的方式。为建立安全连接，必须
在执行要求账户使用安全连接的GRANT语句时，只会对这个账户建立某种约束。它实际
第13章安全性与访问控制
'/C=US/ST=WI/L=Madison/O=sampdb/OU=client/CN=sampdb';
/C=US/ST=WI/I
Madison/O=
，可以使用REQUIRE NONE。这是创建新账户时的
可以通过它来去除该要求。
ampdb/OU=CA/CN=sampdb
，必须提供与签发者和持
---
## Page 509
为非零值时会对账户能够同时建立的连接数进行限制。
时连接次数的限制：
那么司
有所有访问权限，但是每小时最多只允许连接10次和执行200条语句（其中最多只能更新50次）：
的所有连接所涉及的语句都会算到该账户头上。
行更新的数量进行限制。用户无法通过多个服务器连接的方式来突破这些限制，因为给定账户
13.2.2.5
的所有权限进行转授。对该账户所能转授的具体权限，你无法进行明确地限定。
如果你为某个账户授予了某个级别的GRANTOPTION权限，则此账户可以把自己在该级别拥有
用户
意
sales数据库的所有表进行管理的权限，那么可以像下面这样创建此账户：
例如，想让 alicia 用户能够从big-corp.com域里的任何一台主机连接服务器，并拥有对
据库的访问。具体做法是，把对该数据库的全部权限授予其所有者，包括GRANT OPTION 权限。
但是，在使用此子句时，你自己必须要拥有GRANTOPTION权限。
13.2.2.4让账户拥有管理权限
所有拥有RELOAD权限的管理账户都能通过执行FLUSHUSER_RESOURCES语句重置当前的
使用 wITH子句可以指定这些限制。下面这条语句会建立一个账户，它对 sampdb 数据库拥
MySQL的授权系统让你可以对账户每小时连接服务器的次数、每小时可以执行的语句或进
让某个账户拥有GRANTOPTION权限的一个原因是，它可以让数据库的所有者控制对该数
资源上限MAX_USER_CONNECTIONS 控制的是账户能够同时建立连接的最大数量。如果这
GRANT USAGE ON*,*TO'spike'@'localhost
如果想让某个账户把自己的权限转授给其他账户，可以指定WITH GRANTOPTION子句。
可以通过把限制值设置为零的方式去除该限制。例如，
每个选项的默认值都为零，其含义是“无限制”。因此，
在 WITH子句里，各个资源管理选项的顺序无关紧要。
GRANTOPTION权限可以应用到等于或低于被授予权限级别的所有权限，而不是单个权限。
在GRANT 语句里，ALL只能单独使用，不能与其他权限说明符列在一起。
GRANT ALL,GRANT OPTION ON sales.* TO 'alicia@%.big-corp.com';
不过，像下面这样的语句却行不通：
另一种授予GRANTOPTION 权限的方法是，把它直接写在GRANT语句的开头部分：
授予了SELECT权限，但是另外一个用户拥有GRANTOPTION权限以及除SELECT权限以外
两个拥有GRANTOPTION 权限的用户可以彼此将自己的权限授予对方。如果只向其中一个
WITH MAX_CONNECTIONS_PER_HOUR O;
事实上，WITHGRANTOPTION子句可让你把授权访问的权限委托给另一个用户。但是请注
MAX_UPDATES_PER_HOUR 50;
WITH MAX_CONNECTIONS_PER_HOUR 10 MAX_QUERIES_PER_HOUR 200
限制账户的资源占用
，下面这条语句将取消对 spike 每小
13.2管理MySQL用户账户
如果对某个账户进行了资源限制，
489
---
## Page 510
这时，只能使用带USAGE的GRANT语句将那个上限值设置为零（即“无限制"）：
明不再需要使用SSL进行连接：
户全局级的USAGE 权限（已有权限保持不变），并在其中包含一个REQUIRE NONE子句，以表
行连接，但是没有一种REVOKE 语法能够撤销该需求。这时，就需要执行GRANT 语句，授予账
是REVOKE语句(参考13.2.1节)。
限列设置为'N'，而不会删除该行。也就是说，REVOKE语句不会彻底删除一个账户，这意味着
么MySQL会分别删除权限表db、tables_priv,columns_priv、procs_priv或proxies_priv
拥有对mysql数据库的INSERT权限。
语句中的privileges部分中显式指定它：
移除该账户对已有行进行修改的权限：
REQUIRE和WITH子句：
语句的有些相似，不同之处在于，前者用FROM子句替换了TO子句，并且没有 auth_info、
13.2.4
13.2.3
则同样会重置其资源上限值。
账户可以再次进行连接和执行语句。如果对某个账户执行了可以设置其资源上限的GRANT语句，
490
该账户仍然能够连接服务器。如果想要彻底删除某个账户，则必须使用DROPUSER 语句，而不
有些矛盾的是，有些“撤销”操作必须使用GRANT语句。例如，某个账户必须使用 SSL进
与该账户相对应的行。撤销账户的所有全局级权限，会将其在user 表里对应的那一行的权
类似地，如果要限制某个用户的资源占用，那么也不能使用 REVOKE 语句来删除这些限制。
如果你撤销账户在数据库、表、列或例程级别上的所有权限，或者撤销它的代理权限，那
GRANT USAGE ON*.*TO aCcount
请注意，这个语法里没有ON子句。在执行它时，必须具备全局级权限CREATE USER 或者
如果想要撤销某个权限，你必须先自己拥有该权限，并且还必须拥有GRANT OPTION 权限。
GRANT OPTION 权限并未包括在ALL权限里。要想从自账户权限中撤销它，
要撤销某个用户的部分或全部权限，
GRANT USAGE ON *.*TO aCCount REQUIRE NONE;
REVOKE ALL,GRANT OPTION FROM aCCOunt;
下面这条语句可以撤销账户在各个级别所拥有的全部权限：
REVOKE GRANT OPTION ON sales.* FROMalicia'@'%.big-corp.com';
REVOKE DELETE,UPDATE ON Sampdb.*FROMboris'@'localhost';
GRANT ALLON sampdb.*TOboris'@'localhost';
REVoKE privileges[(columns)]ON what FROM account;
SHOW GRANTS FOR CURRENT_USER(）;
如果想查看自己的权限，可以使用下面两条语句当中的任何一条：
SHOW GRANTS FOR'sampadm'@localhost';
要查看账户所拥有的权限，
SHOW GRANTS;
WITH MAX_CONNECTIONS_PER_HOUR O MAX_QUERIES_PER_HOUR 0
第13章安全性与访问控制
撤销权限
显示账户权限
可以使用SHOWGRANTS语句：
，可以使用 REVOKE语句。REVOKE 语句的语法与GRANT
，可以在REVOKE
---
## Page 511
OLD_PASSWORD（）把密码重置为旧格式，并防止它使用旧格式密码进行连接。自MySQL5.6.5
的散列格式。对于以旧格式存储的那些值，其长度为16，并且不是以“”字符打头，因此使
想要把没有密码也不使用身份认证插件的账户查找出来，需要使用下面这个查询：
有的数据库和表），或者使用 SHOW STATUS 和 SHOWVARIABLES 来监视服务器的运行状况。
许匿名用户进行连接也可能会使它拥有一些访问权限，从而能够到处收集各种信息（如你所拥
13.2.6避免访问控制风险
停止服务器，然后在不使用权限表进行验证的情况下重启服务器。相关操作过程请参考12.2.6节。
通常你必须先以 root身份连接服务器才能修改 root 密码。如果你不知道密码，则需要先强行
此时，可以以明文方式指定密码，而不必使用PASSWORD（）函数：
码。
句的格式相同，并且它不用显式地刷新权限：
值和User 值，然后刷新权限：
13.2.5
把不需要身份认证的账户都找出来，然后选择是删除它们，还是要求它们进行身份认证。
把全局变量 sql_mode 的值设置为 NO_AUTO_CREATE_USER 模式，以防止 GRANT 语句创建
就不需要这样做了，因为 secure_auth 在默认情况下就是启用的。
本节将描述在权限分配时需要注意的一些事项，以及因选择不当而带来的各种风险。
如果你因忘记root密码而需要重置它，并且无法连接服务器，那么你会遇上大麻烦，因为
更改或重置账户密码的一种办法是，使用UPDATE语句来标识该账户在 User表行中的 Host
(3）使用SETPASSWORD对拥有旧格式密码的所有账户进行密码重置。
(2）随后在重启服务器时，总是启用 secure_auth 系统变量。这样可以防止客户端使用
(1）如果old_passwords系统变量被设置为1（即为oN），则在重启服务器时禁用它。
如果这些语句标识出了某些账户，那么：
SELECT Host,
不要允许用原始的（MySQL4.1之前）散列格式存储密码，要将它们更改为目前更为安全
SET PASSWORD FOR aCCount=PASSWORD（'paSSWord'）;
要删除这类账户，可以使用DROPUSER语句。如果要求进行认证，则可以为其分配一个密码：
避免创建匿名账户（即拥有空用户名的账户）。即使他们没有足够的权限直接造成破坏，允
另一种不太常用的密码修改方法是，使用带IDENTIFIED BY子句的 GRANT USAGE 语句。
如果想要修改其他账户的密码，那么你必须拥有mySql数据库的UPDATE权限。
只要你不以匿名用户身份进行连接，便总是可以使用SETPASSWORD语句来修改自己的密
mySql> SET PASSWORD FOR'boris'@'localhost'=PASSWORD（'silicon'）;
不过，使用SETPASSWORD语句更简单，
mysql>
mysql>u
MAX_UPDATES_PER_HOURO;
更改密码或重置丢失的密码
FLUSH PRIVILEGES;
WHERE User='boris'AND Host='localhost';
UPDATE user SET Password=PASSWORD ('silicon')
，因为在指定账户时使用的格式与其他账户管理语
13.2管理MySQL用户账户
491
---