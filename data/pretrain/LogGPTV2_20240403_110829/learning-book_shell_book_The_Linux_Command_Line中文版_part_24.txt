### 挂载CD-ROM

首先，我们创建一个新的挂载点并将其挂载到系统上。使用 `-t` 选项来指定文件系统类型：

```bash
[root@linuxbox -]# mkdir /mnt/cdrom
[root@linuxbox -]# mount -t iso9660 /dev/hdc /mnt/cdrom
```

之后，我们可以通过这个新的挂载点查看 CD-ROM 的内容：

```bash
[root@linuxbox -]# cd /mnt/cdrom
[root@linuxbox cdrom]# ls
```

当我们尝试卸载 CD-ROM 时，可能会遇到以下问题：

```bash
[root@linuxbox cdrom]# umount /dev/hdc
umount: /mnt/cdrom: device is busy
```

这是因为在卸载设备时，如果有用户或进程正在使用该设备，则无法成功卸载。在这种情况下，我们的工作目录正是 CD-ROM 的挂载点，导致设备处于忙碌状态。解决方法是先切换到其他目录再尝试卸载：

```bash
[root@linuxbox cdrom]# cd
[root@linuxbox -]# umount /dev/hdc
```

现在，设备已成功卸载。

### 卸载的重要性

使用 `free` 命令可以查看内存使用情况的统计信息，其中有一个叫做 "buffers" 的统计值。计算机系统设计的目标是尽可能快地运行，而慢速设备（如打印机）会成为瓶颈。早期个人电脑时代，在多任务处理尚未普及的情况下，这个问题尤为突出。例如，当打印文档时，计算机会停下来等待打印机完成，从而变得不可用。为了解决这个问题，引入了打印机缓存。这是一种包含 RAM 的设备，位于计算机和打印机之间。计算机将数据快速发送到缓存区，然后继续执行其他任务，而打印机则从缓存中以较慢的速度获取数据进行打印。

缓存在计算机系统中被广泛应用，以提高性能。操作系统会在真正与慢速设备交互之前，尽可能多地读取或写入内存中的数据。在 Linux 系统中，你可能会注意到系统似乎使用了比实际需要更多的内存，这是因为 Linux 正在利用所有可用的内存作为缓存。这允许对存储设备进行快速写入，因为写入物理设备的操作被延迟，数据暂时堆积在内存中。随后，操作系统会定期将这些数据写入物理设备。

卸载一个设备意味着将所有剩余的数据写入设备，确保其可以安全移除。如果未正确卸载就移除设备，可能导致数据丢失或文件系统损坏。

### 确定设备名称

有时，确定设备名称可能比较困难。在过去，设备通常固定在一个位置且不会移动。但随着硬件配置变得更加动态，Linux 系统也变得更灵活。在现代 Linux 桌面系统中，设备通常会被自动挂载。然而，在某些环境中（如服务器），我们需要手动确定设备名称。

查看 `/dev` 目录下的内容可以帮助我们了解设备命名模式。例如：

- `/dev/fd*`：软盘驱动器
- `/dev/hd*`：旧系统中的 IDE (PATA) 磁盘
- `/dev/lp*`：打印机
- `/dev/sd*`：SCSI 磁盘
- `/dev/sr*`：光盘（CD/DVD 读取器和刻录机）

此外，还有一些符号链接（如 `/dev/cdrom`、`/dev/dvd` 和 `/dev/floppy`）指向实际的设备文件，方便使用。如果你的系统不支持自动挂载可移动设备，可以通过实时查看 `/var/log/messages` 文件来确定设备名称。例如，插入一个 USB 设备后，内核会发现并探测该设备，并在日志中显示相关信息。

一旦知道了设备名称，就可以挂载它。例如，挂载一个闪存驱动器：

```bash
[ne@linuxbox -]$ sudo mkdir /mnt/flash
[ne@linuxbox -]$ sudo mount /dev/sdb1 /mnt/flash
```

### 创建新的文件系统

假设我们要重新格式化一个闪存驱动器，从 FAT32 格式改为 Linux 本地文件系统。这涉及两个步骤：创建新的分区布局（可选）和在闪存上创建新的空文件系统。

**注意**：在下面的练习中，我们将格式化一个闪存驱动器，请确保使用一个不包含重要数据的驱动器，因为它将被擦除！同时，请务必确认指定了正确的设备名称，否则可能会误格式化错误的驱动器！

#### 使用 `fdisk` 操作分区

`fdisk` 工具允许我们在底层直接与磁盘设备交互。我们可以使用它来编辑、删除和创建分区。首先，卸载设备（如果需要），然后调用 `fdisk` 程序：

```bash
[ne@linuxbox -]$ sudo umount /dev/sdb1
[ne@linuxbox -]$ sudo fdisk /dev/sdb
```

程序启动后，输入 `m` 查看菜单。输入 `p` 可以打印当前设备的分区表。例如：

```plaintext
Disk /dev/sdb: 16 MB, 16006656 bytes
1 heads, 31 sectors/track, 1008 cylinders
Units = cylinders of 31 * 512 = 15872 bytes
Device Boot Start End Blocks Id System
/dev/sdb1 2 1008 15608+b v95 FAT32
```

在这个例子中，我们看到一个 16MB 的设备只有一个分区（`/dev/sdb1`），标识为 Windows 95 FAT32 分区。为了更改分区类型，我们可以使用 `t` 命令并输入新的 ID 号（如 `83` 表示 Linux 分区）：

```plaintext
Command (m for help): t
Selected partition 1
Hex code (type L to list codes): 83
Changed system type of partition 1 to 83 (Linux)
```

完成修改后，输入 `w` 将分区表写入设备并退出程序。

#### 使用 `mkfs` 创建新文件系统

接下来，我们使用 `mkfs` 工具在闪存驱动器上创建一个新的 ext3 文件系统：

```bash
sudo mkfs -t ext3 /dev/sdb1
```

这样，我们就成功地在闪存驱动器上创建了一个新的 ext3 文件系统。