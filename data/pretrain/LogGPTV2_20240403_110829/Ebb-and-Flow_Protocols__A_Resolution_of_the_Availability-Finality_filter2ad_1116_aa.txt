title:Ebb-and-Flow Protocols: A Resolution of the Availability-Finality
Dilemma
author:Joachim Neu and
Ertem Nusret Tas and
David Tse
Ebb-and-Flow Protocols:
A Resolution of the Availability-Finality Dilemma
Joachim Neu
PI:EMAIL
Ertem Nusret Tas
PI:EMAIL
David Tse
PI:EMAIL
Abstract—The CAP theorem says that no blockchain can be
live under dynamic participation and safe under temporary
network partitions. To resolve this availability-ﬁnality dilemma,
we formulate a new class of ﬂexible consensus protocols, ebb-
and-ﬂow protocols, which support a full dynamically available
ledger in conjunction with a ﬁnalized preﬁx ledger. The ﬁnalized
ledger falls behind the full ledger when the network partitions but
catches up when the network heals. Gasper, the current candidate
protocol for Ethereum 2.0’s beacon chain, combines the ﬁnality
gadget Casper FFG with the LMD GHOST fork choice rule
and aims to achieve this property. However, we discovered an
attack in the standard synchronous network model, highlighting
a general difﬁculty with existing ﬁnality-gadget-based designs. We
present a construction of provably secure ebb-and-ﬂow protocols
with optimal resilience. Nodes run an off-the-shelf dynamically
available protocol, take snapshots of the growing available ledger,
and input them into a separate off-the-shelf BFT protocol to
ﬁnalize a preﬁx. We explore connections with ﬂexible BFT and
improve upon the state-of-the-art for that problem.
I. INTRODUCTION
A. The Availability-Finality Dilemma
Distributed consensus is a 40-year-old ﬁeld. In its classical
state machine replication formulation, clients (e.g., merchants)
issue transactions (e.g., payments) to be shared with nodes
(e.g., the servers implementing a distributed payment system)
who communicate among each other via an unreliable network
and seek to reach agreement on a common ledger (e.g.,
sequence of payments). In the standard permissioned setting,
the number of nodes is assumed to be known, ﬁxed and each
node is always awake, actively participating in the consensus
protocol. One important novelty blockchains have brought into
this ﬁeld is the notion of dynamically available protocols:
consensus systems that can support an unknown number of
nodes each of which can go to sleep and awake dynamically.
Dynamic availability is a useful property of a consensus
protocol, particularly in a large-scale setting with many nodes
not all of which are active at the same time. Nakamoto’s Proof-
of-Work (PoW) longest chain protocol [2] is perhaps the ﬁrst
such dynamically available consensus protocol. The amount
of mining power is varying in time and the system is live and
safe as long as less than 50% of the online hashrate belongs to
adversary miners. The longest chain design was subsequently
adapted to support dynamic availability in permissioned [3]
and Proof-of-Stake (PoS) settings [4]–[6]. Supporting dynamic
availability is more challenging in these settings. Earlier works
The authors contributed equally and are listed alphabetically. Contact: DT.
need to assume all adversary nodes are awake at the beginning
[3], [6] or a trusted setup for nodes to join the network [4],
[5], but recently it has been shown that these restrictions can
be removed using veriﬁable delay functions [7].
One limitation of dynamically available protocols is that
they are not tolerant to network partition: when the network
partitions, honest nodes in a dynamically available protocol
will think that many nodes are asleep, continue to conﬁrm
transactions, and thus is not safe.1 This is in contrast to per-
missioned BFT protocols designed for partially synchronous
networks, such as PBFT [8], Tendermint [9], [10], Hotstuff
[11] and Streamlet [12]. This type of protocols is the basis for
permissioned blockchains such as Libra [13], [14] and PoS
blockchains such as Algorand [15], [16]. In these protocols,
a quorum of two-thirds of the signatures of all the nodes
is required to ﬁnalize transactions, and hence is safe under
network partition. On the other hand, these protocols are not
live under dynamic availability: when many nodes are asleep,
there is not enough of a quorum for the consensus protocol
to proceed and it will get stalled. In fact, it is impossible for
any protocol to be both safe under network partition and live
under dynamic participation: individual nodes in the network
cannot distinguish between the two scenarios to act differently.
This intuition is formalized in [3] and its connection to the
CAP theorem [17] was made precise recently in [18]. In
light of this, protocol designers see themselves faced with
an availability-ﬁnality dilemma: whether to favor liveness
under dynamic participation or safety under network partition.
Hence, consensus protocols are typically classiﬁed as liveness-
favoring or safety-favoring [19].
B. Ebb-and-Flow Protocols
For inspiration on a way to resolve this dilemma,
let
us revisit another important aspect of Nakamoto’s longest
chain protocol: the k-deep conﬁrmation rule. In this protocol,
all miners work on the longest chain, but different clients
can choose different values of k to determine how deep a
block should be in the longest chain to conﬁrm it. A client
who chooses a larger value for k is a more conservative
client, believing in a more powerful attacker or wanting
more reliability, and its ledger is a preﬁx of that of a more
1In this paper, network partition can equally mean a catastrophic physical
disconnection among the nodes, or perhaps a less rare situation where many
adversary nodes are not communicating with the honest nodes but building a
chain in private.
aggressive client which chooses a smaller value of k. Hence, in
contrast to classic consensus protocols, Nakamoto’s protocol
supports multiple (nested) ledgers rather than only a single
one. This concept of ﬂexible consensus is formalized and
further developed in [20], where different clients can make
different assumptions about the synchronicity of the network
as well as the power of the adversary.
The CAP theorem says no protocol can support clients that
simultaneously want availability and ﬁnality. Inspired by the
idea of ﬂexible consensus, we can instead seek a ﬂexible
protocol that supports two types of clients: conservative clients
who favor ﬁnality and want to be safe under network partition,
and more aggressive clients who favor availability and want
to be live under dynamic availability. A conservative client
will only trust a ﬁnalized ledger, which is a preﬁx of a longer
dynamically available ledger (or, available ledger for short)
believed by a more aggressive client. The ﬁnalized ledger
falls behind the available ledger when network partitions,
but catches up when the network heals. This ebb-and-ﬂow
property avoids a system-wide determination of availability
versus ﬁnality and instead leaves this decision to the clients.
C. Understanding Gasper
Gasper [21] is the current candidate protocol for Ethereum
2.0’s beacon chain. The Gasper protocol is complex, combin-
ing the ﬁnality gadget Casper FFG [22] with the LMD (Latest
Message Driven) GHOST fork choice rule in a handcrafted
way. One motivation for our work is to understand Gasper’s
design goals. As far as we can gather, two of its main goals
are:
1) Ability to ﬁnalize certain blocks in the blockchain [21, p.
1]. In addition to network partition tolerance, ﬁnalization
also allows accountability through slashing of protocol
violators.
2) Support of a highly available distributed ledger which
does not halt even when ﬁnality is not achieved [23],
[24], [21, Section 8.7]. Availability is a central feature of
the existing global Ethereum blockchain.
Although the sense in which Gasper aims to simultaneously
achieve these two goals is not speciﬁed in [21], we do know
from the CAP theorem that no protocol can ﬁnalize all blocks
and be a highly available ledger at the same time. Thus, we
believe that the ebb-and-ﬂow property is a good formulation of
Gasper’s design goals. In this context, the role of the ﬁnality
gadget is to ﬁnalize a preﬁx of the ledger and the role of LMD
GHOST is to support availability.
In [21], Gasper’s ﬁnalized ledger is shown to be safe.
However, it is claimed to be live only under a non-standard
stochastic network delay model. Following the standards ad-
vocated by [25] for the design and analysis of blockchain
protocols, we analyzed Gasper under a standard security
model, and found it to be insecure. In particular, we discovered
a liveness attack on Gasper in the standard synchronous model
where messages can be delayed arbitrarily by the adversary
up to a known network delay bound. Moreover, because this
liveness attack is a balancing attack causing the votes to split
txs
Π
2
txs
Πsac
snap-
shots
Πlc
Πbft
LOGlc
LOGbft
LOG
LOGda
LOGﬁn
(a) State machine replication
(b) Snap-and-Chat
Fig. 1.
(a) A consensus protocol Π implementing state machine replication
receives transactions txs as inputs from the environment and outputs an
ever-increasing ordered ledger of transactions LOG. (b) A snap-and-chat
protocol produced by our construction, Πsac, receives transactions txs from
the environment and outputs two ever-increasing ledgers LOGda and LOGﬁn
by running a dynamically available protocol Πlc and a partially synchronous
protocol Πbft in parallel. The inputs to Πlc are environment’s transactions
but the inputs to Πbft are snapshots of the output ledger of Πlc from the
nodes’ views. The dashed line signiﬁes that nodes use the output of Πlc as
side information in Πbft to boycott the ﬁnalization of invalid snapshots.
Enough awake
Network partition
|LOGﬁn|
|LOGda|
Awake honest nodes
Liveness threshold
200
100
]
s
k
l
b
[
h
t
g
n
e
l
r
e
g
d
e
L
0
75
70
67
65
60
t
s
e
n
o
h
e
k
a
w
A
0
500
1,000
1,500
2,000
2,500
3,000
3,500
Time [s]
Fig. 2. A simulated run of an example snap-and-chat protocol (combining
longest chain and Streamlet [12]) under dynamic participation and network
partition. The lengths of the two ledgers are plotted over time. During network
partition or when few nodes are awake, the ﬁnalized ledger falls behind the
available ledger, but catches up after the network heals or when a sufﬁcient
number of nodes wake up. See Section IV for details on the simulation setup.
between two parallel chains, this attack also denies the safety
of the available ledger even when there is no network partition.
D. A Provably Secure Construction with Optimal Resilience
In this work, we make two contributions. First we deﬁne
what an ebb-and-ﬂow protocol
is and its desired security
property. While the goals of an ebb-and-ﬂow protocol have
been informally discussed to motivate ﬁnality-gadget-based
designs such as Gasper and a few others (e.g., [26]), to the
best of our knowledge these informal goals have not been
translated into a mathematically deﬁned security property.
to Gasper’s handcrafted design,
Second, we provide a construction of a class of protocols,
which we call snap-and-chat protocols, that provably satisﬁes
the ebb-and-ﬂow security property with optimal resilience.
In contrast
the snap-and-
chat construction uses an off-the-shelf dynamically available
protocol2 Πlc and an off-the-shelf partially synchronous BFT
protocol Πbft (Figure 1). Nodes execute the protocol by
executing the two sub-protocols in parallel. The Πlc sub-
protocol takes as inputs transactions txs from the environment
and outputs an ever-increasing ledger LOGlc. Over time, each
node takes snapshots of this ledger based on its own current
view, and input these snapshots into the second sub-protocol
Πbft to ﬁnalize some of the transactions. The output ledger
LOGbft of Πbft is an ordered list of such snapshots. To create
the ﬁnalized ledger LOGﬁn of transactions, LOGbft is ﬂattened
(i.e., all snapshots included in LOGbft are concatenated) and
sanitized so that only the ﬁrst appearance of a transaction
remains. Finally, LOGﬁn is prepended to LOGlc and sanitized
to form the available ledger LOGda. A simulated run of an
example snap-and-chat protocol is shown in Figure 2.
Even though honest nodes following a snap-and-chat proto-
col input snapshots of the (conﬁrmed) ledger LOGlc into Πbft,
an adversary could, in an attempt to break safety, input an
ostensible ledger snapshot which really contains unconﬁrmed
transactions. This motivates the last ingredient of our con-
struction: in the Πbft sub-protocol, each honest node boycotts
the ﬁnalization of snapshots that are not conﬁrmed in Πlc in
its view. An off-the-shelf BFT protocol needs to be modiﬁed
to implement this constraint. We show that fortunately the
required modiﬁcation is minor in several example protocols,
including PBFT [8], Hotstuff [11] and Streamlet [12]. When
any of these slightly modiﬁed BFT protocols is used in
conjunction with a permissioned longest chain protocol [3]–
[5], we prove a formal security property for the resulting snap-
and-chat protocol, which is our deﬁnition of the desired goal
of an ebb-and-ﬂow protocol.
Theorem (Informal). Consider a network environment where:
1) Communication is asynchronous until a global stabi-
lization time GST after which communication becomes
synchronous, and
2) honest nodes sleep and wake up until a global awake time
GAT after which all nodes are awake. Adversary nodes
are always awake.
Then
1) (P1 - Finality): The ﬁnalized ledger LOGﬁn is guaranteed
to be safe at all times, and live after max{GST, GAT},
provided that
the nodes are
adversarial.
fewer than 33% of all
2Longest chain protocols are representative members of this class of
protocols, hence the notation Πlc, but this class includes many other protocols
as well.
3
Snap-and-Chat
Flexible BFT [20]
Blum et al. [27]
Impossible
k
r
o
w
t
e
n
c
n
y
s
y
l
l
a
i
t
r
a
P
n
3
n
4
0
0
n
3
n
2
Synchronous network
Fig. 3. The ﬂexible BFT protocol can simultaneously support clients who
can tolerate f adversaries in a synchronous environment and clients who can