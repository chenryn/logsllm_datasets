以下是优化后的文本，使其更加清晰、连贯和专业：

---

**参考文献**

[29] Yue Duan, Mu Zhang, Abhishek Vasisht Bhaskar, Heng Yin, Xiaorui Pan, Tongxin Li, Xueqiang Wang, and X. Wang. 《基于全系统仿真的Android（解）打包器的系统研究》。NDSS, 2018.

[30] Yu Feng, Saswat Anand, Isil Dillig, and Alex Aiken. 《Apposcopy: 基于静态分析的Android恶意软件语义检测》。FSE, 2014.

[31] Sean Ford, Marco Cova, Christopher Kruegel, and Giovanni Vigna. 《恶意Flash广告的分析与检测》。ACSAC, 2009.

[32] Manuel Gomez-Rodriguez, David Balduzzi, and Bernhard Schölkopf. 《揭示扩散网络的时间动态》。ICML, 2011.

[33] Amit Goyal, Francesco Bonchi, and Laks V.S. Lakshmanan. 《社交网络中的影响力概率学习》。WSDM, 2010.

[34] Mariano Graziano, Davide Canali, Leyla Bilge, Andrea Lanzi, and Davide Balzarotti. 《从公共动态分析沙箱中挖掘恶意软件情报》。USENIX Security, 2015.

[35] Mahmoud Hammad, Joshua Garcia, and Sam Malek. 《大规模实证研究：代码混淆对Android应用和反恶意软件产品的影响》。ICSE, 2018.

[36] Heqing Huang, Cong Zheng, Junyuan Zeng, Wu Zhou, Sencun Zhu, Peng Liu, Suresh Chari, and Ce Zhang. 《基于大规模数据驱动的公共恶意软件扫描平台上的Android恶意软件开发研究》。BigData, 2016.

[37] Médéric Hurier, Guillermo Suarez-Tangil, Santanu Kumar Dash, Tegawendé F. Bissyandé, Yves Le Traon, Jacques Klein, and Lorenzo Cavallaro. 《Euphony: Android恶意软件的反病毒厂商标签统一》。MSR, 2017.

[38] Colin C. Ife, Yun Shen, Steven J. Murdoch, and Gianluca Stringhini. 《恶意文件传递生态系统的纵向测量》。AsiaCCS, 2019.

[39] Luca Invernizzi, Stanislav Miskovic, Ruben Torres, Christopher Kruegel, Sabyasachi Saha, Giovanni Vigna, Sung-Ju Lee, and Marco Mellia. 《Nazca: 大规模网络中的恶意软件分发检测》。NDSS, 2014.

[40] Alex Kantchelian, Michael Carl Tschantz, Sadia Afroz, Brad Miller, Vaishaal Shankar, Rekha Bachwani, Anthony D. Joseph, and J. D. Tygar. 《更好的恶意软件基准：反病毒厂商标签加权技术》。AISec, 2015.

[41] Amin Kharraz, Sajjad Arshad, Collin Mulliner, William Robertson, and Engin Kirda. 《Unveil: 大规模自动化检测勒索软件的方法》。USENIX Security, 2016.

[42] Doowon Kim, Bum Jun Kwon, and Tudor Dumitraş. 《认证恶意软件：Windows代码签名PKI中的信任破坏度量》。CCS, 2017.

[43] Doowon Kim, Bum Jun Kwon, Kristián Kozák, Christopher Gates, and Tudor Dumitraş. 《破碎的盾牌：Windows代码签名PKI中的撤销有效性度量》。USENIX Security, 2018.

[44] Eugene Kolodenker, William Koch, Gianluca Stringhini, and Manuel Egele. 《Paybreak: 针对加密勒索软件的防御》。AsiaCCS, 2017.

[45] Deguang Kong and Guanhua Yan. 《基于结构信息的判别恶意软件距离学习及其自动分类》。KDD, 2013.

[46] David Korczynski and Heng Yin. 《通过代码注入和代码重用攻击捕获恶意软件传播》。CCS, 2017.

[47] Platon Kotzias, Leyla Bilge, and Juan Caballero. 《通过按安装付费服务测量PUP的流行度和分布》。USENIX Security, 2016.

[48] Bum Jun Kwon, Jayanta Mondal, Jiyong Jang, Leyla Bilge, and Tudor Dumitraş. 《下载器图分析视角下的恶意软件分发》。CCS, 2015.

[49] Stevens Le Blond, Adina Uritesc, Cédric Gilbert, Zheng Leong Chua, Prateek Saxena, and Engin Kirda. 《通过NGO视角看定向攻击》。USENIX Security, 2014.

[50] Bo Li, Phani Vadrevu, Kyu Hyung Lee, and Roberto Perdisci. 《JSGraph: 通过高效跟踪实时浏览器JavaScript执行重构Web攻击》。NDSS, 2018.

[51] Li Li, Tegawendé F. Bissyandé, Damien Octeau, and Jacques Klein. 《反射感知的Android应用程序静态分析》。ASE, 2016.

[52] Gen Lu and Saumya Debray. 《针对Web恶意软件防御的弱点》。DIMVA, 2013.

[53] Long Lu, Vinod Yegneswaran, Phillip Porras, and Wenke Lee. 《Blade: 一种抵御驱动式恶意软件感染的攻击无关方法》。CCS, 2010.

[54] Guozhu Meng, Yinxing Xue, Chandramohan Mahinthan, Annamalai Narayanan, Yang Liu, Jie Zhang, and Tieming Chen. 《Mystique: 通过演化Android恶意软件来审计反恶意软件工具》。AsiaCCS, 2016.

[55] Aziz Mohaisen and Omar Alrawi. 《AV-Meter: 反病毒扫描和标签评估》。DIMVA, 2014.

[56] Nick Nikiforakis, Steven Van Acker, Wannes Meert, Lieven Desmet, Frank Piessens, and Wouter Joosen. 《Bitsquatting: 利用位翻转进行攻击或获利？》。WWW, 2013.

[57] Peng Peng, Limin Yang, Linhai Song, and Gang Wang. 《揭开VirusTotal黑箱：在线钓鱼扫描引擎分析》。IMC, 2019.

[58] Moheeb Abu Rajab, Lucas Ballard, Noe Lutz, Panayiotis Mavrommatis, and Niels Provos. 《CAMP: 内容无关的恶意软件保护》。NDSS, 2013.

[59] Neil Rubenking. 《Check Point ZoneAlarm Free Antivirus+》。https://www.pcmag.com/review/322439/check-point-zonealarm-free-antivirus-2017.

[60] Armin Sarabi and Mingyan Liu. 《使用深度学习表征互联网主机群体：一种通用且轻量级的数值嵌入方法》。IMC, 2018.

[76] Liang Wang, Antonio Nappa, Juan Caballero, Thomas Ristenpart, and Aditya Akella. 《WhoWas: IaaS云上Web部署的度量平台》。IMC, 2014.

[61] Sebastian Schrittwieser, Stefan Katzenbeisser, Johannes Kinder, Georg Merzdovnik, and Edgar Weippl. 《通过混淆保护软件：能否跟上代码分析的进步？》。ACM Computing Surveys (CSUR), 2016.

[62] Edward J. Schwartz, Cory F. Cohen, Michael Duggan, Jeffrey Gennari, Jeffrey S. Havrilla, and Charles Hines. 《使用逻辑编程从编译后的可执行文件中恢复C++类和方法》。CCS, 2018.

[63] Marcos Sebastián, Richard Rivera, Platon Kotzias, and Juan Caballero. 《AVClass: 用于大规模恶意软件标记的工具》。RAID, 2016.

[64] Mahmood Sharif, Jumpei Urakawa, Nicolas Christin, Ayumu Kubota, and Akira Yamada. 《通过用户行为预测即将暴露于恶意内容的风险》。CCS, 2018.

[65] Linhai Song, Heqing Huang, Wu Zhou, Wenfei Wu, and Yiying Zhang. 《从大量恶意软件中学习》。APSys, 2016.

[66] Michael Spreitzenbarth, Felix Freiling, Florian Echtler, Thomas Schreck, and Johannes Hoffmann. 《Mobile-Sandbox: 深入查看Android应用程序》。SAC, 2013.

[67] Nedim Šrndić and Pavel Laskov. 《基于层次文档结构的恶意PDF文件检测》。NDSS, 2013.

[68] Vince Steckler. 《Avast和AVG合二为一》。https://blog.avast.com/avast-and-avg-become-one.

[69] Gianluca Stringhini, Oliver Hohlfeld, Christopher Kruegel, and Giovanni Vigna. 《收割者、僵尸网络主控者和垃圾邮件发送者：垃圾邮件领域中不同角色的关系》。AsiaCCS, 2014.

[70] Bo Sun, Akinori Fujino, and Tatsuya Mori. 《海报：利用沙箱日志自动生成恶意软件分析报告》。CCS, 2016.

[71] Kurt Thomas, Elie Bursztein, Chris Grier, Grant Ho, Nav Jagpal, Alexandros Kapravelos, Damon McCoy, Antonio Nappa, Vern Paxson, Paul Pearce, Niels Provos, and Moheeb Abu Rajab. 《大规模广告注入：评估欺骗性广告修改》。S&P, 2015.

[72] Kurt Thomas, Juan A. Elices Crespo, Ryan Rasti, Jean-Michel Picod, Cait Phillips, Marc-André Decoste, Chris Sharp, Fabio Tirelo, Ali Tofigh, Marc-Antoine Courteau, et al. 《调查商业按安装付费及不受欢迎软件的分发》。USENIX Security, 2016.

[73] Ke Tian, Steve T. K. Jan, Hang Hu, Danfeng Yao, and Gang Wang. 《大海捞针：在野外追踪精英钓鱼域名》。IMC, 2018.

[74] Zacharias Tzermias, Giorgos Sykiotakis, Michalis Polychronakis, and Evangelos P. Markatos. 《结合静态和动态分析检测恶意文档》。EuroSec, 2011.

[75] Haoyu Wang, Zhe Liu, Jingyue Liang, Narseo Vallina-Rodriguez, Yao Guo, Li Li, Juan Tapiador, Jingcun Cao, and Guoai Xu. 《超越Google Play: 中国Android应用市场的大型比较研究》。IMC, 2018.

[77] Pei Wang, Qinkun Bao, Li Wang, Shuai Wang, Zhaofeng Chen, Tao Wei, and Dinghao Wu. 《移动应用混淆的大规模实证研究》。ICSE, 2018.

[78] Michelle Y. Wong and David Lie. 《Tiro: 应对Android运行时混淆》。USENIX Security, 2018.

[79] Christian Wressnegger and Konrad Rieck. 《回顾三年来的Flash恶意软件》。EuroSec, 2017.

[80] Mingyuan Xia, Lu Gong, Yuanhao Lyu, Zhengwei Qi, and Xue Liu. 《有效的实时Android应用程序审核》。S&P, 2015.

[81] Ke Xu, Yingjiu Li, Robert H. Deng, and Kai Chen. 《DeepReﬁner: 应用深度神经网络的多层Android恶意软件检测系统》。EuroS&P, 2018.

[82] Zhaoyan Xu, Antonio Nappa, Robert Baykov, Guangliang Yang, Juan Caballero, and Guofei Gu. 《AutoProbe: 使用动态二进制分析自动主动探测恶意服务器》。CCS, 2014.

[83] Yinxing Xue, Junjie Wang, Yang Liu, Hao Xiao, Jun Sun, and Mahinthan Chandramohan. 《通过攻击行为建模检测和分类恶意JavaScript》。ISSTA, 2015.

[84] Wei Yang, Deguang Kong, Tao Xie, and Carl A. Gunter. 《对抗环境下的恶意软件检测：利用Android应用程序中的特征演变和混淆》。ACSAC, 2017.

[85] Mu Zhang, Yue Duan, Heng Yin, and Zhiruo Zhao. 《基于加权上下文API依赖图的语义感知Android恶意软件分类》。CCS, 2014.

[86] Yibing Zhongyang, Zhi Xin, Bing Mao, and Li Xie. 《DroidAlarm: 全面的静态分析工具，用于检测Android提权恶意软件》。AsiaCCS, 2013.

[87] Ziyun Zhu and Tudor Dumitraş. 《Chainsmith: 通过挖掘威胁情报报告自动学习恶意活动的语义》。EuroS&P, 2018.

**附录**

**表3: 9个高声誉引擎及其引用论文。Kaspersky和Symantec分别在两篇论文中被提及。**
- Kaspersky [22, 71]
- Symantec [22, 45]
- AVG [71]
- F-Secure [22]
- Ikarus [22]
- McAfee [45]
- Microsoft [45]
- ESET-NOD32 [45]
- Sophos [71]

**表4: 种子勒索软件文件及其在2019年6月1日被检测到的引擎数量（共65个引擎）**
| MD5 | 引擎数量 |
| --- | --- |
| 40c5113e35dd653ca1fc1524d51da408 | 56 |
| 5dc58c702f21ba786e3a51eb8c37bd14 | 56 |
| 8b6bc16fd137c09a08b02bbe1bb7d670 | 52 |
| bbd4c2d2c72648c8f871b36261be23fd | 49 |

**表5: 同时拥有VirusTotal和桌面版本的引擎**
- Ad-Aware
- Avast
- AVG
- Avira
- BitDefender
- CAT-QuickHeal
- ClamAV
- Vipre
- Webroot
- Zillya
- ZoneAlarm
- CMC
- Comodo
- ESET-NOD32
- F-Prot
- F-Secure
- GData
- Ikarus
- Jiangmin
- K7AntiVirus
- Kaspersky
- Kingsoft
- Malwarebytes
- McAfee
- Microsoft (Windows Defender)
- MicroWorld-eScan
- NANO-Antivirus
- Panda
- Qihoo-360
- Rising
- SUPERAntiSpyware
- Symantec (Norton)
- TACHYON
- Tencent
- TotalDefense
- TrendMicro

**图16: Cluster-I（第5.1节）中五个引擎对示例文件几乎相同的检测结果。MD5: 2efcdc93a9de94b1604f6665d2a0589a。**
- (a) MicroWorld-eScan
- (b) Emsisoft
- (c) GData
- (d) Ad-Aware
- (e) BitDefender

**图18: 引擎聚类的树状图。x轴显示距离阈值。较短的距离表示两个引擎具有更相似的标签序列。距离小于阈值的集群逐渐合并在一起。**

**图17: 0→1翻转的活跃影响图。权重<0.25的边被移除。A到B的边越粗表示A对B的影响越大。节点越大表示其影响力越大。**
- (a) Microsoft
- (b) McAfee

**图19: Cluster-II（第5.1节）中两个引擎对示例文件几乎相同的检测结果。MD5: bffa5f6881f9abfed54037b446e34b94。**

---

希望这些优化能够使你的文档更加清晰、连贯和专业。如果需要进一步的帮助，请随时告知。