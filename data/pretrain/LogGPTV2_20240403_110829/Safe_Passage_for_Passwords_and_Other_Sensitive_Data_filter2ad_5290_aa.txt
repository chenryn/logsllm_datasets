title:Safe Passage for Passwords and Other Sensitive Data
author:Jonathan M. McCune and
Adrian Perrig and
Michael K. Reiter
Safe Passage for Passwords and Other Sensitive Data∗
Jonathan M. McCune Adrian Perrig
Michael K. Reiter
CyLab / Carnegie Mellon University
University of North Carolina at Chapel Hill
{jonmccune,perrig}@cmu.edu
PI:EMAIL
Abstract
The prevalence of malware such as keyloggers and screen
scrapers has made the prospect of providing sensitive infor-
mation via web pages disconcerting for security-conscious
users. We present Bumpy, a system to exclude the legacy
operating system and applications from the trusted com-
puting base for sensitive input, without requiring a hyper-
visor or VMM. Bumpy allows the user to specify strings of
input as sensitive when she enters them, and ensures that
these inputs reach the desired endpoint in a protected state.
The inputs are processed in an isolated code module on the
user’s system, where they can be encrypted or otherwise
processed for a remote webserver. We present a prototype
implementation of Bumpy.
1
Introduction
Today, a security-conscious user who wants to verify
that her input is not observed by malicious code during a
sensitive online ﬁnancial transaction faces an impasse. Key-
loggers can capture a user’s typed input and screen scrapers
can process the content displayed to the user to obtain sen-
sitive information such as credit card numbers.
These malware exploit the vulnerabilities that are en-
demic to the huge computing base that is trusted to secure
our private information. Today’s popular operating systems
employ monolithic kernels, meaning that a vulnerability in
any part of the OS renders users’ sensitive data insecure re-
gardless of what application they may be running. On top
of this untrustworthy OS sits a complex and monolithic web
browser, which faces protection and assurance challenges
similar to those of the OS. It is not surprising that trusting
∗This research was supported in part by CyLab at Carnegie Mellon un-
der grant DAAD19-02-1-0389 from the Army Research Ofﬁce, and grants
CNS-0509004 and CT-0756998 from the National Science Foundation,
by the iCAST project, National Science Council, Taiwan under the Grants
No. (NSC95-main) and No. (NSC95-org), and by gifts from AMD and In-
tel. The views and conclusions contained here are those of the authors and
should not be interpreted as necessarily representing the ofﬁcial policies
or endorsements, either express or implied, of AMD, ARO, CMU, Intel,
NSF, or the U.S. Government or any of its agencies.
this software stack for the protection of private data in web
transactions often leads to data compromise.
We present Bumpy, a system for protecting a user’s sen-
sitive input intended for a webserver from a compromised
client OS or compromised web browser. We consider a
user who desires to provide strings of information (e.g., a
credit card number or mailing address) to a remote web-
server (e.g., her bank) by entering it via her web browser.
We focus on user input to web pages, although our tech-
niques can also be applied to local applications. Bumpy is
able to protect this sensitive user input by reducing the req-
uisite trusted computing base to exclude the legacy OS and
applications without requiring a hypervisor or VMM.
Bumpy employs two primary mechanisms. First, the ini-
tial handling of all keystrokes is performed in a special-
purpose code module that is isolated from the legacy OS
using the Flicker [18] system. Second, we establish the con-
vention that sensitive input begin with the secure attention
sequence @@, so that a user can indicate to this module that
the data she is about to type is sensitive. These sensitive
inputs are released to the legacy platform only after being
encrypted for the end webserver or otherwise processed to
protect user privacy [10, 11, 25].
Bumpy allows the remote webserver to conﬁgure the na-
ture of the processing performed on user input before it is
transmitted to the webserver, and automatically isolates the
conﬁgurations and data-handling for mutually distrusting
webservers. The webserver for which the user’s current in-
put will be processed can receive a TCG-style attestation
that the desired input protections are in-place, potentially
allowing the webserver to offer additional services to users
with improved input security.
In order for the user to determine the website for which
her input will be encrypted, she requires some trusted dis-
play to which the input-handling module can send this in-
formation. Since the client computer display cannot be
trusted in our threat model, we explore the use of a sepa-
rate user device, or Trusted Monitor, that receives such indi-
cators from the input-handling module, authenticates them
(using digital signatures) and displays them to the user.
Our prototype implementation of Bumpy demonstrates
both the practicality of our approach and the fact that com-
modity hardware already offers nearly the full set of func-
tionality needed to achieve these protections. In fact, the
only compromise we make in our implementation is us-
ing an embedded Linux system as an encrypting USB In-
terposer, as we have been unable to locate keyboards or
mice offering programmable encryption. We also leverage
a smartphone as a Trusted Monitor for the user. However,
we emphasize that the emergence of encrypting keyboards
and far simpler devices to serve as a Trusted Monitor would
sufﬁce to remove any bloat from Bumpy’s TCB. Bumpy is
achievable without any client-side trusted software of com-
plexity even close to that of a general-purpose OS, VMM,
or hypervisor.
2 Related Work
We discuss prior work on trusted devices for sensitive
user actions, split application architectures, trusted window
managers, password processing, and TCB minimization.
The most closely related work is our prior work called
Bump1 in the Ether (BitE) [21]. BitE circumvents the
legacy input path by leveraging encryption by user input
devices (e.g., an encrypting keyboard), just as Bumpy does.
However, BitE retains the legacy OS and Window Manager
in its TCB, is tailored to local applications, and performs
attestations to its correct functioning based on a static root
of trust. In contrast, Bumpy dramatically reduces the TCB
for input by leveraging a dynamic root of trust for each in-
put event, works for sensitive input to websites, and sup-
ports secure post-processing of sensitive input (e.g., pass-
word hashing).
Borders and Prakash propose a Trusted Input Proxy
(TIP) as a module in a virtual machine architecture where
users can indicate data as sensitive using a keyboard escape
sequence [5]. Users are presented with a special dialog box
where they can enter their sensitive data, after which it is
injected into the SSL session by the TIP. Again, however,
the TCB of TIP includes a VMM and OS, whereas Bumpy’s
TCB includes neither.
The Zone Trusted Information Channel (ZTIC [12]) is
a recently-announced device with a dedicated display and
the ability to perform cryptographic operations. Its purpose
is to conﬁrm online banking transactions in isolation from
malware on the user’s computer. This device is appropriate
for use as a Trusted Monitor in Bumpy.
Bumpy separates the process of accepting user input into
trusted and untrusted parts, and thus can be viewed as im-
plementing a type of privilege separation [28]. Several
variations of this theme have been explored in the litera-
ture. Balfanz and Felten [2] describe the need for “splitting
trust” and argue that hand-held computers can make effec-
tive smart cards since they have a distinct user interface
1We derive the name Bumpy from Bump in the Ether.
that is not subject to malware on the user’s host computer.
Sharp et al. explore an architecture where applications run
on a trusted platform and export both a trusted and an un-
trusted display [31]. They also consider split web applica-
tions where all sensitive operations are conﬁrmed on a mo-
bile device [30], and where the mobile device serves as the
trusted portion of a physically separate, but logically com-
posed browsing experience [29]. Bumpy optionally uses
the separate Trusted Monitor as a veriﬁer and indicator for
the input framework, rather than as a platform for execution
of portions of a split application or as an input device. But
perhaps more importantly, the TCB of Bumpy is far smaller
than in these other works, and in fact Bumpy can be viewed
as extreme in this respect.
Trusted window managers have also been proposed as a
solution to sensitive input and screen content. A compelling
recent example is Nitpicker [9], but it currently requires
changing operating systems and porting existing legacy ap-
plications. Bumpy remains compatible with existing legacy
operating systems, to the extent that they meet the require-
ments for Flicker [18] (i.e., it may be necessary to install a
kernel module or driver).
Ross et al. developed PwdHash, an extension for the
Firefox web browser that hashes users’ typed passwords in
combination with the domain serving the page to produce a
unique password for every domain [25]. The PwdHash al-
gorithm adapts earlier work by Gabber et al. on protecting
users’ privacy while browsing the web [10,11]. Chiasson et
al. identify usability problems with PwdHash, speciﬁcally,
that it provides insufﬁcient feedback to the user regarding
the status of protections [7]. We extend this work in two
ways. First, we implement the PwdHash algorithm as one
possible transformation of sensitive data in Bumpy, with a
much smaller TCB than the web browser and OS that must
be trusted with PwdHash. Second, we leverage a Trusted
Monitor to provide feedback to the user regarding the sta-
tus of her input. Validating the efﬁcacy of our feedback
mechanisms with a user study remains the subject of future
work; this paper presents the design and implementation.
Bumpy builds on Flicker, an architecture that leverages
the Trusted Computing concept of Dynamic Root of Trust to
enable execution of a special-purpose code module (called
a Piece of Application Logic, or PAL) while including only
a few hundred lines of additional code in its TCB [18]. Re-
mote attestation technology based on the Trusted Platform
Module (TPM [34]) can be used to convince a remote party
that precisely this code module and nothing else executed
during a Flicker session. Flicker supports protocols for es-
tablishing authentic communication between a PAL and a
remote entity, and it is architected such that the code that
generates attestations need not be trusted. Additional back-
ground information on the underlying Trusted Computing
technologies can be found in Appendix A.
Flicker-capable
Computer
Operating
System
PoPr
PreP
T P M
Web
Server
n
s i o
n
e
t
x
E
Web Browser
Primary Display
Application
Domain
Favicon
Encrypting Mouse & Keyboard
Trusted Monitor
Internet
Figure 1. Logical ﬂow through the major components of the Bumpy system. The OS, web browser,
and browser extension are untrusted.
3 Overview
Appendix A provides additional background on the relevant
technologies, which are widely available today.
We detail our goals and assumptions, introduce the user
experience, and provide an overview of our design and the
major system components of Bumpy (Figure 1).
3.2 User Experience
3.1 Goals and Assumptions
Goals. Our goals are to protect keystrokes from a poten-
tially malicious legacy input system while retaining a seam-
less user experience, and to offer assurance to both the re-
mote webserver and the user herself that input is protected.
To the remote webserver, we provide an attestation that the
user’s input was protected with Bumpy, including the pres-
ence of encryption-capable input devices. To the user, we
provide an indicator of whether it is safe to enter sensitive
input. Bumpy achieves this without breaking compatibil-
ity with existing operating systems and without requiring a
hypervisor or VMM.
Assumptions and Threat Model. We consider the user’s
OS and applications (including the web browser and its ex-
tensions) to be malicious. We assume the user has a trust-
worthy mobile device to serve as a Trusted Monitor and
input devices (keyboard and mouse) capable of encryption.
We also assume the remote webserver to which the user
wishes to direct her input is uncompromised, and that the
certiﬁcate authority (CA) that issues the webserver’s SSL
certiﬁcate is similarly uncompromised.
We leverage the Flicker system to protect sensitive code
executing on the user’s computer [18]. As such, the user’s
computer must meet the hardware requirements for Flicker:
a version 1.2 TPM, and a CPU and chipset capable of estab-
lishing a Dynamic Root of Trust, also known as late launch.
We are striving to make Bumpy usable by non-experts to
protect sensitive input. Our mechanism employs a conven-
tion for entering sensitive information, and a trustworthy in-
dication of the destination for that information. This indica-
tion is conveyed via an external display, called the Trusted
Monitor (Figure 1). It is our intention that the Trusted Mon-
itor will help to alleviate some of the usability problems
(e.g., a lack of feedback) identiﬁed for password managers
such as PwdHash [7], although we leave a formal usability
study as future work.
In the common case, the user experience with Bumpy
follows this sequence:
1. The user signals that she is about to enter sensitive
information by pressing @@. Note that this can be
thought of as a convention, e.g., “my passwords should
always start with @@.”
2. The Trusted Monitor beeps to acknowledge the recep-
tion of @@ in the PreP, and updates its display to show
the destination of the user’s upcoming sensitive input.
3. The user types her sensitive data. Bumpy does not
change this step from the user’s perspective.
4. The user performs an action that signals the end of sen-
sitive input (e.g., presses Tab or Enter, or clicks the
mouse). Bumpy does not change this step from the
user’s perspective.
While users are accustomed to typing their passwords
without seeing the actual characters on-screen (e.g., the
characters appear as asterisks), most other sensitive data is
displayed following entry. Given our desire to remove the
legacy OS from the input TCB and the threat of malicious
screen scrapers, this echoing to the main display must be
prevented by Bumpy. The usability of entering relatively
short sequences of characters (e.g., credit card numbers)
under these conditions may remain acceptable to concerned
users, but it is not ideal. We perceive this as the price one
must pay for secure input with an untrusted OS.
For those users employing a Trusted Monitor of sufﬁ-
cient capability, sensitive keystrokes can be echoed there
for validation by the user. While this partially eliminates
the challenge of entering input “blind,” a minimal Trusted
Monitor would still make it impractical to compose lengthy
messages.
3.3 Technical Overview
We now summarize the main components of Bumpy.
In Figure 1, solid arrows represent logical communica-