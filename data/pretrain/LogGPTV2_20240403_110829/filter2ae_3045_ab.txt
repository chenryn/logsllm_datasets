            } catch (IOException ignore) {
                /* can't happen, but be deterministic anyway. */
                hash = -1;
            } catch (NoSuchAlgorithmException complain) {
                throw new SecurityException(complain.getMessage());
            }
            return hash;
    }
  * Object
对应不同的场景会不一样，基本上都是一些参数序列化之后的结果
    * 对bind 来说就是String和remote参数
    * 对lookup来说就是String类型的name
    * 对dirty来说就是ObjID，Lease等类型参数
    * 对于自己写的implemnt就是调用时传的参数
反序列化漏洞基本都是发生在反序列化这些参数的时候（还有部分是主动发起rmi请求，反序列返回值的时候出的问题），后面的一些安全措施也是在这上面做的手脚，比如lookup参数只是String类型，在8u242之后就只序列化String类型的，这样就把lookup这条攻击链给断了。dirty的参数类型也是固定的，在jep290的时候就被限制了。但是用户自己写的方法参数类型可能多种多样，不方便限制，所以基本到现在最新的JDK就只剩这一条路了，这条路在8u242也对String类型参数进行了特殊处理。
上面对发送的报文类型介绍基本上差不多了。
所以可以根据上面的介绍，自己写个socket直接发送上面的数据。
这个实现在
主要参考了
的实现
下面开始介绍返回报文。
红色框出来的也是序列化的内容
  * returnVale
    * 0x51
  * returnType
有两种一种是normal的return一种是exception的return
    * 0x01
      * `(TransportConstants.NormalReturn`
    * 0x02
      * `TransportConstants.ExceptionalReturn`
  * uuid
    * 还不清楚干啥的
  * Object
    * 就是返回的具体内容，可能是调用的返回值，也可能是Exception
对返回的解析也是在
只对lookup的情况进行了解析。
OK，到这里协议我们已经分析完了。
## RMI 攻击面
  1. 8u121之前，可以通过bind，lookup，dgc等方式攻击Registry端口等直接反序列化
  2. 8u232之前，可以通过lookup发送一个UnicastRef对象，在反序列化的时候进行一次rmi链接，配合JRMPListener进行攻击。
  3. 8u242之前，可以通过lookup发送一个UnicastRefRemoteObject对象，在反序列化的时候进行一次rmi链接，配合JRMPListener进行攻击。
  4. 如果自己写的implement中method包含非primitive类型的参数（8u242之后string也不行），也能进行反序列化攻击。
限制
  * 1，2，3，4都需要本地包含gadgets
  * 2，3 需要能出网
  * 1，2，3都可以直接攻击Registry端口(1099), 4还需要额外的端口
  * 4 需要知道具体的方法，所以还需要有源码，还要能访问非1099端口
下面贴了attackRmi的几种攻击方法，具体的原理请阅读参考链接，openjdk链接是相对应版本改进的代码。
## AttackRegistryByBindAndAnnotationInvocationHandler
条件：
  * 
由于`bind(String, Remote)`
第一个参数必须是string，第二个必须是Remote，不能直接把conmoncollections的payload放进去。
ysoserial中RMIRegistryExploit是通过动态代理，把payload塞到`sun.reflect.annotation.AnnotationInvocationHandler`
的`memberValues`。
如果直接发包，发送的时候直接在Object那个位置，贴上我们序列化的payload就可以了，不需要再用动态代理转成相应的类型。下面几个实现都是直接发包的。
## AttackRegistryByDGC
条件：
  * 
## AttackRegistryByLookupAndUnicastRef
条件：
  * 
## AttackRegistryByLookupAndUnicastRefRemoteObject
条件：
  * 
## AttackServerByNonPrimitiveParameter
条件：
  * = jdk8u242
    * 除primitive type和String以外的类型可被利用
## attackRmi 实现
刚开始是想用python socket直接发包，因为原先用python
socket写过东西，交互写起来更顺手，但是拼接序列化内容的时候出问题了。我原先直接用的是`ObjectOutputStream`
进行的序列化，但是rmi中用的是`sun.server.rmi.MarshalOutputStream`。
后来意外发现了ysoserial的JRMPclient的实现，然后就在开始用java的socket写，在makeDgcCall的基础上改进。刚开始用jdk自带的`sun.server.rmi.MarshalOutputStream`
没有问题，但是传`UnicastRefRemoteObject`
对象的时候，发现死活传不过去，后来发现jdk自带的`sun.server.rmi.marshalOutputStream`
会进行replaceObject，后来就直接换成了ysoserial中的`MarshalOutputStream` 这样就没啥问题了。
在实现`AttackServerByNonPrimitiveParameter`
遇到了其他问题，比如刚开始不知道咋获取objid，后来跟代码的时候发现在lookup返回的对象里面，然后通过反射将其值读出来。但是要是想用lookup的时候，本地必须要先有个interface，要不然lookup在收到返回数据反序列化的时候会报`classnotfound`，这里我重写了`sun.server.rmi.MarshalOutputStream`的`resolveProxyClass`
，遇到不存在的`interface`换成用以`MockInterface`为接口的动态代理类。
    protected Class resolveProxyClass(String[] interfaces){
            Class clazz;
            try{
                clazz = Class.forName(interfaces[0]);
            }catch (ClassNotFoundException e){
                ObjID id = new ObjID(new Random().nextInt()); // RMI registry
                TCPEndpoint te = new TCPEndpoint("127.0.0.1", 2333);
                UnicastRef refObject = new UnicastRef(new LiveRef(id, te, false));
                RemoteObjectInvocationHandler myInvocationHandler = new RemoteObjectInvocationHandler(refObject);
                MockInterface proxy = (MockInterface) Proxy.newProxyInstance(MockInterface.class.getClassLoader(), new Class[] { MockInterface.class, Remote.class }, myInvocationHandler);
                clazz = proxy.getClass();
                return clazz;
            }
            try {
                return super.resolveProxyClass(interfaces);
            }catch (Exception ee){
                ee.printStackTrace();
            }
            return clazz;
        }
我能想到解决这个问题的方法有三个
  * 自己解析那段bytes，从中提取出ip，port，objid
  * 重写`resolveProxyClass`方法
  * 加载前通过defineclass，把相应的interface.Class加载进来。
最后考虑到自己java水平不太行，我用了重写`resolveProxyClass`这种方法，但是感觉第一种方法可能更好，有空实现一下。
## attackRmi 使用方法
  1. 把代码clone下来
        git clone https://github.com/waderwu/attackRmi.git
  2. 然后用idea打开，添加第三方库ysoserial
  3. 然后编辑相应的文件，更改参数就可以运行了。
欢迎大家报Bug或者PR，当然也欢迎Star！
## 其他
那篇blackhat提了其他攻击面，但是我没看太懂，它里面提到了通过控制num和http可以绕过rebind检查地址的限制，这个没看太懂。希望会的能教教我。
## 参考链接
  * 
  * 
  * 
  * 
  * 
  * 