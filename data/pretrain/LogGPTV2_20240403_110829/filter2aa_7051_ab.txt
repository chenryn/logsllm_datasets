       size(matchedNode.list) AS len
```
Properties can be lists of strings, numbers or booleans.
```
list[$idx] AS value,
list[$startIdx..$endIdx] AS slice
```
List elements can be accessed with idx subscripts in square brackets. Invalid indexes return null. Slices can be retrieved with intervals from start_idx to end_idx, each of which can be omitted or negative. Out of range elements are ignored.
```
UNWIND $names AS name
MATCH (n {name: name})
RETURN avg(n.age)
```
With UNWIND, any list can be transformed back into individual rows. The example matches all names from a list of names.
```
MATCH (a)
RETURN [(a)-->(b) WHERE b.name = 'Bob' | b.age]
```
Pattern comprehensions may be used to do a custom projection from a match directly into a list.
```
MATCH (person)
RETURN person { .name, .age}
```
Map projections may be easily constructed from nodes, relationships and other map values.
### Maps
```
{name: 'Alice', age: 38,
 address: {city: 'London', residential: true}}
```
Literal maps are declared in curly braces much like property maps. Lists are supported.
```
WITH {person: {name: 'Anne', age: 25}} AS p
RETURN p.person.name
```
Access the property of a nested map.
```
MERGE (p:Person {name: $map.name})
  ON CREATE SET p = $map
```
Maps can be passed in as parameters and used either as a map or by accessing keys.
```
MATCH (matchedNode:Person)
RETURN matchedNode
```
Nodes and relationships are returned as maps of their data.
```
map.name, map.age, map.children[0]
```
Map entries can be accessed by their keys. Invalid keys result in an error.
### Predicates
```
n.property <> $value
```
Use comparison operators.
```
toString(n.property) = $value
```
Use functions.
```
n.number >= 1 AND n.number (m)
```
Ensure the pattern has at least one match.
```
NOT (n)-[:KNOWS]->(m)
```
Exclude matches to (n)-[:KNOWS]->(m) from the result.
```
n.property IN [$value1, $value2]
```
Check if an element exists in a list.
### List predicates
```
all(x IN coll WHERE x.property IS NOT NULL)
```
Returns true if the predicate is true for all elements in the list.
```
any(x IN coll WHERE x.property IS NOT NULL)
```
Returns true if the predicate is true for at least one element in the list.
```
none(x IN coll WHERE x.property IS NOT NULL)
```
Returns true if the predicate is false for all elements in the list.
```
single(x IN coll WHERE x.property IS NOT NULL)
```
Returns true if the predicate is true for exactly one element in the list.
### CASE
```
CASE n.eyes
 WHEN 'blue' THEN 1
 WHEN 'brown' THEN 2
 ELSE 3
END
```
Return THEN value from the matching WHEN value. The ELSE value is optional, and substituted for null if missing.
```
CASE
 WHEN n.eyes = 'blue' THEN 1
 WHEN n.age  $value]
```
A filtered list of the elements where the predicate is true.
```
[x IN list WHERE x.prop <> $value | x.prop]
```
A list comprehension that filters a list and extracts the value of the expression for each element in that list.
```
reduce(s = "", x IN list | s + x.prop)
```
Evaluate expression for each element in the list, accumulate the results.
### Functions
```
coalesce(n.property, $defaultValue)
```
The first non-null expression.
```
timestamp()
```
Milliseconds since midnight, January 1, 1970 UTC.
```
id(nodeOrRelationship)
```
The internal id of the relationship or node.
```
toInteger($expr)
```
Converts the given input into an integer if possible; otherwise it returns null.
```
toFloat($expr)
```
Converts the given input into a floating point number if possible; otherwise it returns null.
```
toBoolean($expr)
```
Converts the given input into a boolean if possible; otherwise it returns null.
```
keys($expr)
```
Returns a list of string representations for the property names of a node, relationship, or map.
```
properties($expr)
```
Returns a map containing all the properties of a node or relationship.
### Path functions
```
length(path)
```
The number of relationships in the path.
```
nodes(path)
```
The nodes in the path as a list.
```
relationships(path)
```
The relationships in the path as a list.
```
[x IN nodes(path) | x.prop]
```
Extract properties from the nodes in a path.
### Spatial functions
```
point({x: $x, y: $y})
```
Returns a point in a 2D cartesian coordinate system.
```
point({latitude: $y, longitude: $x})
```
Returns a point in a 2D geographic coordinate system, with coordinates specified in decimal degrees.
```
point({x: $x, y: $y, z: $z})
```
Returns a point in a 3D cartesian coordinate system.
```
point({latitude: $y, longitude: $x, height: $z})
```
Returns a point in a 3D geographic coordinate system, with latitude and longitude in decimal degrees, and height in meters.
```
distance(point({x: $x1, y: $y1}), point({x: $x2, y: $y2}))
```
Returns a floating point number representing the linear distance between two points. The returned units will be the same as those of the point coordinates, and it will work for both 2D and 3D cartesian points.
```
distance(point({latitude: $y1, longitude: $x1}), point({latitude: $y2, longitude: $x2}))
```
Returns the geodesic distance between two points in meters. It can be used for 3D geographic points as well.
Neo4j Functions
---------
### Temporal functions
```
date("2018-04-05")
```
Returns a date parsed from a string.
```
localtime("12:45:30.25")
```
Returns a time with no time zone.
```
time("12:45:30.25+01:00")
```
Returns a time in a specified time zone.
```
localdatetime("2018-04-05T12:34:00")
```
Returns a datetime with no time zone.
```
datetime("2018-04-05T12:34:00[Europe/Berlin]")
```
Returns a datetime in the specified time zone.
```
datetime({epochMillis: 3360000})
```
Transforms 3360000 as a UNIX Epoch time into a normal datetime.
```
date({year: $year, month: $month, day: $day})
```
All of the temporal functions can also be called with a map of named components. This example returns a date from year, month and day components. Each function supports a different set of possible components.
```
datetime({date: $date, time: $time})
```
Temporal types can be created by combining other types. This example creates a datetime from a date and a time.
```
date({date: $datetime, day: 5})
```
Temporal types can be created by selecting from more complex types, as well as overriding individual components. This example creates a date by selecting from a datetime, as well as overriding the day component.
```
WITH date("2018-04-05") AS d
RETURN d.year, d.month, d.day, d.week, d.dayOfWeek
```
Accessors allow extracting components of temporal types.
### Duration functions
```
duration("P1Y2M10DT12H45M30.25S")
```
Returns a duration of 1 year, 2 months, 10 days, 12 hours, 45 minutes and 30.25 seconds.
```
duration.between($date1,$date2)
```
Returns a duration between two temporal instances.
```
WITH duration("P1Y2M10DT12H45M") AS d
RETURN d.years, d.months, d.days, d.hours, d.minutes
```
Returns 1 year, 14 months, 10 days, 12 hours and 765 minutes.
```
WITH duration("P1Y2M10DT12H45M") AS d
RETURN d.years, d.monthsOfYear, d.days, d.hours, d.minutesOfHour
```
Returns 1 year, 2 months, 10 days, 12 hours and 45 minutes.
```
date("2015-01-01") + duration("P1Y1M1D")
```
Returns a date of 2016-02-02. It is also possible to subtract durations from temporal instances.
```
duration("PT30S") * 10
```
Returns a duration of 5 minutes. It is also possible to divide a duration by a number.
### Mathematical functions
```
abs($expr)
```
The absolute value.
```
rand()
```
Returns a random number in the range from 0 (inclusive) to 1 (exclusive), [0,1). Returns a new value for each call. Also useful for selecting a subset or random ordering.
```
round($expr)
```
Round to the nearest integer; ceil() and floor() find the next integer up or down.
```
sqrt($expr)
```
The square root.
```
sign($expr)
```
0 if zero, -1 if negative, 1 if positive.
```
sin($expr)
```
Trigonometric functions also include cos(), tan(), cot(), asin(), acos(), atan(), atan2(), and haversin(). All arguments for the trigonometric functions should be in radians, if not otherwise specified.
```
degrees($expr), radians($expr), pi()
```
Converts radians into degrees; use radians() for the reverse, and pi() for Ï€.
```
log10($expr), log($expr), exp($expr), e()
```
Logarithm base 10, natural logarithm, e to the power of the parameter, and the value of e.
### String functions
```
toString($expression)
```
String representation of the expression.
```
replace($original, $search, $replacement)
```
Replace all occurrences of search with replacement. All arguments must be expressions.
```
substring($original, $begin, $subLength)
```
Get part of a string. The subLength argument is optional.
```
left($original, $subLength),
  right($original, $subLength)
```
The first part of a string. The last part of the string.
```
trim($original), lTrim($original),
  rTrim($original)
```
Trim all whitespace, or on the left or right side.
```
toUpper($original), toLower($original)
```
UPPERCASE and lowercase.
```
split($original, $delimiter)
```
Split a string into a list of strings.
```
reverse($original)
```
Reverse a string.
```
size($string)
```
Calculate the number of characters in the string.
### Relationship functions
```
type(a_relationship)
```
String representation of the relationship type.
```
startNode(a_relationship)
```
Start node of the relationship.
```
endNode(a_relationship)
```
End node of the relationship.
```
id(a_relationship)
```
The internal id of the relationship.
### Aggregating functions
```
count(*)
```
The number of matching rows.
```
count(variable)
```
The number of non-null values.
```
count(DISTINCT variable)
```
All aggregating functions also take the DISTINCT operator, which removes duplicates from the values.
```
collect(n.property)
```
List from the values, ignores null.
```
sum(n.property)
```
Sum numerical values. Similar functions are avg(), min(), max().
```
percentileDisc(n.property, $percentile)
```
Discrete percentile. Continuous percentile is percentileCont(). The percentile argument is from 0.0 to 1.0.
```
stDev(n.property)
```
Standard deviation for a sample of a population. For an entire population use stDevP().
Neo4j Schema Operations
------
### INDEX
```
CREATE INDEX FOR (p:Person) ON (p.name)
```
Create an index on nodes with label Person and property name.
```
CREATE INDEX index_name FOR ()-[k:KNOWS]-() ON (k.since)
```
Create an index on relationships with type KNOWS and property since with the name index_name.
```
CREATE INDEX FOR (p:Person) ON (p.surname)
OPTIONS {indexProvider: 'native-btree-1.0', indexConfig: {`spatial.cartesian.min`: [-100.0, -100.0], `spatial.cartesian.max`: [100.0, 100.0]}}
```
Create an index on nodes with label Person and property surname with the index provider native-btree-1.0 and given spatial.cartesian settings. The other index settings will have their default values.
```
CREATE INDEX FOR (p:Person) ON (p.name, p.age)
```
Create a composite index on nodes with label Person and the properties name and age, throws an error if the index already exist.
```
CREATE INDEX IF NOT EXISTS FOR (p:Person) ON (p.name, p.age)
```
Create a composite index on nodes with label Person and the properties name and age if it does not already exist, does nothing if it did exist.
```
CREATE LOOKUP INDEX lookup_index_name FOR (n) ON EACH labels(n)
```
Create a token lookup index with the name lookup_index_name on nodes with any label .
```
CREATE LOOKUP INDEX FOR ()-[r]-() ON EACH type(r)
```
Create a token lookup index on relationships with any relationship type.
```
CREATE FULLTEXT INDEX node_fulltext_index_name FOR (n:Friend) ON EACH [n.name]
OPTIONS {indexConfig: {`fulltext.analyzer`: 'swedish'}}
```
Create a fulltext index on nodes with the name node_fulltext_index_name and analyzer swedish. Fulltext indexes on nodes can only be used by from the procedure db.index.fulltext.queryNodes. The other index settings will have their default values.
```
CREATE FULLTEXT INDEX rel_fulltext_index_name FOR ()-[r:HAS_PET|BROUGHT_PET]-() ON EACH [r.since, r.price]
```
Create a fulltext index on relationships with the name rel_fulltext_index_name. Fulltext indexes on relationships can only be used by from the procedure db.index.fulltext.queryRelationships.
```
SHOW INDEXES
```
List all indexes.
```
MATCH (n:Person) WHERE n.name = $value
```
An index can be automatically used for the equality comparison. Note that for example toLower(n.name) = $value will not use an index.