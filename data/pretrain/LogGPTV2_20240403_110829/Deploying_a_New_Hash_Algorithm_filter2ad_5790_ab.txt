cate, the sender should therefore use their certiﬁcate with
the corresponding algorithm. If the recipient has multiple
certiﬁcates, the sender should use the one created using the
strongest algorithm. For the reasons indicated above, we do
not recommend sending multiple certiﬁcates in this case.
The choice of which certiﬁcate to send would be sim-
pler yet if the recipient’s certiﬁcate indicated which algo-
rithms it was capable of using. Although this not currently
possible the S/MIME working group is currently consider-
ing a draft [34] that would allow certiﬁcates to contain an
SMIMECapabilities [26] extension for the owner of the cer-
tiﬁcate. This information could include information about
allowed digest algorithms.
4.2 Subsequent Messages
Once an S/MIME implementation has received a signed
message from a peer, it is in a much better position to es-
timate the sender’s capabilities. For clarity, say that Alice
has received a signed message from Bob. With high prob-
ability Bob can verify signatures produced with whatever
algorithm(s) it used to digest its own message. If this is a
new (strong) algorithm then all is good and Alice should
herself use that algorithm.
If Bob used an old (weak) algorithm, then Alice at least
knows that she can communicate with Bob using that algo-
rithm. However, it is still possible that Bob has a Switch-
hitting implementation. S/MIME has a standard way for
Bob to signal this fact using the SMIMECapabilities signa-
ture attribute, which includes a (potentially partial) list of
the algorithms that Bob supports. Bob can send a message
using SHA-1 but include an SMIMECapabilities attribute
indicating that he also supports SHA-512. If this attribute is
included, it is always signed, thus preventing the introduc-
tion of a false attribute.
We recommend that when Switch-hitting implementa-
tions send messages using weak algorithms they include
an indication that they also support a stronger algorithm.
There is no point in including such an indication if you are
sending with the stronger algorithm, since that algorithm is
preferred and a recipient which cannot process the stronger
algorithm cannot verify that you also support the weak one.
Because the SMIMECapabilities attribute is part of the
signerInfo element, it is not included in messages which are
unsigned. However, if Alice receives an encrypted message
from Bob, she knows that he was able to verify the certiﬁ-
cate that he used to encrypt to her. Therefore, if she wishes
to sign future messages she should digest using whatever
algorithm was used to produce that certiﬁcate.
4.3 Attacks
In this section, we consider the problem of protecting
Switch-hitting implementations during the transition period
when it is impractical to turn off support for the old algo-
rithms. There are three basic scenarios:
• The attacker does not have a valid certiﬁcate and pri-
vate key for either peer.
• The attacker has acquired a valid (but false) certiﬁcate
and knows the private key.
• The attacker is one of the communicating parties.
4.3.1 Attacks Without a Valid Certiﬁcate
If the attacker does not have the private key for a valid cer-
tiﬁcate, then his ability to mount attacks, even on older di-
gest algorithms, is fairly minimal unless he can compute
preimages.2 Clearly, an attacker who can compute preim-
ages can undetectably modify messages in transit. In this
case, the only defense is to stop using the affected algo-
rithm. Note that senders cannot prevent this attack by mul-
tiply signing their messages; S/MIME multiple signatures
are parallel and independent, so the attacker can simply strip
the strong signature. Receivers must stop accepting an al-
gorithm where computing preimages is possible.
4.3.2 Attacks Using a Valid Certiﬁcate
If the attacker has the private key for a certiﬁcate with a
valid signature containing the identity of one of the peers—
for instance obtained using an improved version of the
Lenstra construction—he can impersonate that peer. This
would allow him to forge messages that appear to be from
that peer. It may also allow him to convince the other peer
to encrypt messages using his fake certiﬁcates. The only
certain countermeasure here is to stop accepting the com-
promised algorithm. One partial workaround would be for
the victim to refuse to accept certiﬁcates dated after the time
when the algorithm was compromised. This is a defense
against collision attacks, but if the attacker can generate
2nd preimages, then he can forge a certiﬁcate with an arbi-
trary date and bypass this countermeasure. Another partial
workaround is to store copies of previously used peer cer-
tiﬁcates (as with SSH [38, 39]), thus reducing the window
of exposure to the ﬁrst exchange of messages.3
2An attacker who can compute preimages is likely to be able to forge
certiﬁcates. However, it is possible that an attacker could compute preim-
ages but without ﬁne enough control to forge a speciﬁc certiﬁcate.
3Note that it’s common to store a digest of the certiﬁcate rather than the
certiﬁcate itself. This obviously leaves one open to preimage attacks if the
4.3.3 The Attacker is One of the Communicating Par-
ties
If it is easy to ﬁnd collisions in a hash, then being one of
the communicating parties—or at least in a position to sub-
stantially control the message contents—confers substan-
tial advantage to the attacker. In particular, it allows him
to cheat in contexts where an S/MIME signature is to be
veriﬁed by a third party. The basic scenario is described in
Section 2: two versions of a document are prepared, one
innocuous and one malicious. One or both of the parties
signs the innocuous version and then the attacker convinces
the third party that the victim signed the malicious version.
This attack can be mounted regardless of which party does
the actual signing. The key is for the attacker to be allowed
to prepare the document to be signed, since the colliding
pair must be generated together.
In order to mount this attack on a Switch-hitting peer,
the attacker must represent that he only supports the broken
algorithm, thus forcing the signature to be performed using
that algorithm. However, since supporting only old algo-
rithms is a legitimate conﬁguration, this is extremely easy
to achieve. The victim has the choice of using that algo-
rithm or not communicating at all.
This attack is extremely difﬁcult to defend against in
standard systems. Bob can defend against being conned by
preparing the ﬁnal document version and inserting enough
randomness near the beginning (e.g., in a dummy ﬁeld) to
make it infeasible for Alice to have generated a collision.4
However, this is complex and not supported by typical ap-
plication software. Moreover, Alice should be suspicious of
this request, since it allows Bob to mount a collision attack
himself. A more general defense is for the parties to jointly
agree on random values once the document content is ﬁxed,
but this is even more complex for ordinary users.5 S/MIME
implementations could of course do this automatically, but
if one is willing to modify implementations it is easier to
simply add strong algorithms.
We stress that this attack is very real and very practical
if MD5 is used.
Because defense against this attack is difﬁcult, in con-
texts when users are signing messages that might be veriﬁed
by a third party, it is better to simply insist on using a strong
algorithm. Similarly, third parties should be extremely sus-
picious when they are asked to rely on signatures that use
weak algorithms, especially MD5. Note that as with the
attacker can manage to get a certiﬁcate with the same digest (not easy, be-
cause he must also simultaneously attack the CA’s digesting process which
covers different data). If a digest is being stored, it might be wise to store
a keyed hash using some locally known key instead.)
4From a security perspective this is inferior to randomized hashing [10]
but doesn’t require changing the S/MIME implementation on either side.
5Kelsey and Kohno presented a “Herding” attack at the CRYPTO ’05
rump session that allows cheating in this scenario, but the effort level (287
for MD5, 2108 for SHA-1) far exceeds that of ordinary collision ﬁnding.
Lucks/Daum attack, close inspection of such messages gen-
erally will reveal their unusual structure and so this attack
can only be mounted when the documents in question will
be subject to only casual (or automatic) scrutiny.
5 TLS
TLS [6] is a standard channel security protocol which
lives above the transport layer (where the OSI session layer
sits). Originally designed for Web security [29],
it is
now widely used for other application protocols including
SIP [33] and SMTP [17]. The most common TLS deploy-
ment involves an anonymous client connecting to a server
and using the server’s certiﬁcate and public RSA key for key
exchange. There are ﬁve major places digest algorithms are
used in TLS:
• In the per-record MAC.
• In the certiﬁcates used by client and server.
• In the digitally-signed element.
• In the PRF (pseudo-random function) used to make
keying material.
• In the Finished message
TLS contains an extensive framework for algorithm ne-
gotiation, using the concept of “cipher suites”. A ci-
pher suite consists of a triple specifying the key estab-
lishment mechanism, the symmetric encryption algorithm
used to encrypt trafﬁc, and the message digest used to
provide trafﬁc message integrity. For instance, the ci-
pher suite TLS RSA WITH RC4 128 MD5 indicates RSA
key exchange, encryption with RC4-128, and message in-
tegrity with a MAC based on MD5 (in TLS this is HMAC-
MD5 [20].)
Unfortunately, this mechanism is only useful for negoti-
ating the record MAC. Although there is a mechanism for
negotiating client certiﬁcate type, it does not include digest
algorithm and the other algorithms cannot be negotiated. In-
deed, the PRF, ServerKeyExchange, and ClientVerify mes-
sages are not parametrized, but rather are speciﬁed directly
in the standard. In order to accomodate newer digest algo-
rithms in these cases we must extend TLS.
5.1 MAC Functions
Negotiating the MAC in TLS is straightforward. Each
cipher suite speciﬁes the digest function function to be used
as the basis for the MAC. So, in principle all that needs to
be done is to deﬁne a new set of cipher suites with stronger
hash algorithms. Note that because TLS uses HMAC, the
current collision-only attacks most likely do not represent a
threat, thus making this a low priority upgrade.
5.2 Server Certiﬁcates
5.4 The Digitally-Signed Element
The most important element of TLS to upgrade is the
server certiﬁcate. Because certiﬁcates are automatically
veriﬁed, they are the cryptographic technique most threat-
ened by current digest attacks. TLS client certiﬁcates are
rare; by contrast, virtually every TLS server has a certiﬁ-
cate.
We assume that during the transition period, each server
will have two certiﬁcates, one created with an old hash (typ-
ically SHA-1 or MD5) and one created with a new hash.
The client can then indicate to the server that it can pro-
cess the new certiﬁcate. There are two potential techniques
for doing this: an overloaded cipher suite and a TLS exten-
sion [3]. The TLS extension approach is probably superior
in that it preserves protocol cleanliness—the hash functions
in the TLS cipher suite offers do not refer to the certiﬁcate.
Moreover, there are performance reasons for the client to
prefer to use the older hash algorithms for MAC functions:
SHA-1 is much faster than SHA-256, and the MAC func-
tions do not need to be upgraded immediately.
Note that this does not address the problem of DSA,
which, as noted previously, cannot be used with any algo-
rithm other than SHA-1. The cleanest solution for DSA is
simply to to treat it as a new algorithm and deﬁne a new set
of cipher suites that specify a newer version of DSA (e.g.,
DSA2).
5.3 Client Certiﬁcates
TLS client certiﬁcates are much less commonly used, al-
though some organizations are using them. For example,
the US government is now issuing client certiﬁcates for es-
tablishing user identities [18, 24]. However, in the case
where client authentication is used, it is desirable to have
a way for the server to indicate which hashes it would like
the client to use. This is a fairly simply protocol engineering
matter with two obvious alternatives:
• Add new values to the certiﬁcate types ﬁeld of
For instance, an
the CertiﬁcateRequest message.
rsa sign sha256 type could be created.
• Use extension values.
Each of these approaches has advantages and disadvan-
tages. The CertiﬁcateRequest approach keeps all the infor-
mation about the certiﬁcates that the client should produce
together but creates the risk of risk of combinatoric explo-
sion of certiﬁcate types values (only 256 such values are
available). The alternative approach is for the server to use
an extension indicating which hash algorithms it accepts.
This is less elegant, but removes the combinatoric explo-
sion problem. Neither approach is superior from a security
perspective.
There are two places in TLS where data is explicitly dig-
itally signed:
the CertiﬁcateVerify and the ServerKeyEx-
change. In both places, the signature is accomplished us-
ing the “digitally-signed element”. (“Digitally signed ele-
ment” is the TLS term for a data element protected by a
signature.) When the signature algorithm is DSA, the input
is as expected—a SHA-1 digest of the data to be signed.
However, when the signature algorithm is RSA, the input is
something unusual: the MD5 and SHA-1 digests of the in-
put are concatenated and fed directly into the RSA signature
algorithm with PKCS#1 padding, but without DigestInfo
wrapping. This is not a negotiatiable algorithm but rather
is wired into the speciﬁcation.
This unusual construction raises the question of what the
target construction should be. The original rationale for the
dual hash construction was to provide security in the face
of compromise of either hash. However, in practice this has
been partially undercut by the common heritage of SHA-1
and MD5. A practical attack on SHA-1 could potentially
extend to compromising the MD5/SHA-1 pair. The general
feeling in the TLS community is that a single negotiated
digest would be a better choice.
The best choice here is probably to have the digitally-
signed element use the same algorithm as was used to sign
the certiﬁcate of the party doing the signing (the client for
the CertiﬁcateVerify and the server for the ServerKeyEx-
change). This avoids the creation of a new negotiable op-
tion, thus reducing protocol complexity. In principle this
could lead to interoperability problems if the certiﬁcate sys-
tem has different capabilities than the TLS implementation.
However, we’re skeptical that the number of real implemen-
tations with this problem would be large enough to justify
the additional complexity.
This change can either be implemented by having cipher
suites that use strong algorithms (i.e., new cipher suites) use
the newer digitally-signed construction or by changing the
behavior of all cipher suites in a new version of TLS. Due to
the low urgency of this change, we recommend the cleaner
approach of creating a new TLS version.
5.5 PRFs
TLS uses a hash function-based PRF to create the key-
ing material from the PreMaster Secret and Master Secret.
It is also used to compute the Finished messages which are
used to secure the TLS negotiation against downgrade at-
tack. Compromise of the PRF might potentially allow an
attacker to determine the keying material or mount a down-
grade attack.
The TLS PRF is actually two PRFs, both based on
HMAC, with one using MD5 and the other using SHA-1.
Like the digitally-signed element, the TLS PRF is explic-
itly speciﬁed in the standard and not negotiable.6 This con-
struction, while somewhat over-complex, is provably secure
under the assumption that either HMAC-SHA1 or HMAC-
MD5 are secure pseudorandom functions [19]. Because the
current attacks do not affect the security of HMAC, upgrad-
ing the PRF is a low-priority task. However, we brieﬂy con-
sider methods here.
The two basic methods for negotiating the PRF algo-
rithm are to use the negotiated cipher suite or to create a
new extension. In the ﬁrst case, whatever digest algorithm
was negotiated for the cipher suite would also be used as
the basis for the PRF. This has the obvious drawback that it
ties TLS to the basic HMAC-X structure of the PRF. If this
construction were found to be insecure (despite the proofs
of security), then it would not be possible to negotiate a new
construction. By contrast, while using an extension adds
complexity it would allow substitution of the construction
without creating a new version of TLS.
We are skeptical that this increased ﬂexibility justiﬁes
the added complexity of deﬁning a new extension. In view
of the security proofs for HMAC and its wide use in TLS,
it seems likely that any attack on HMAC would imply com-
promise of the underlying digest function and result in the
compromise of key elements of the system (message MACs,
certiﬁcates, etc.), thus necessitating a new revision of TLS
in any case. It would be straightforward to revise the PRF
at that time.
PRFs have similar roll-out issues to those described in