• Is an object disinfection error suﬃcient for the occur-
rence of tle? ∀(H4 ⇒ IWoS)
This property does not hold for T. In fact, there are no
cases in which the failure of H4 alone is suﬃcient for the
failure of the tle (see Fig. 4).
IWoS
MoT
SH
CP/R
CP
CR
CT
VW
H1
IW H3
IT
H2
CIO
IT
MH1
H1
H4
Figure 4: (Sub)tree for property 3 (excerpt from Fig. 2).
• Are at least 2 human errors suﬃcient for the occur-
rence of tle? ∀(Vot≥2 (H1 , . . . , H5) ⇒ IWoS)
Two or more human errors are not suﬃcient for the
occurrence of IWoS (see Fig. 5). However, we can further
investigate the role of human errors in the occurrence of
tle by asking which mcss require the presence of human
errors: (cid:2)(MCS(IWoS) ∧ H1) ∨ . . . ∨ (MCS(IWoS) ∧ H5)(cid:3).
By doing so we would obtain twelve mcss. In spite of
CP/R
CP
CR
CT
DT
IWoS
MoT
AT
SH
CVT
VW
H1
IW H3
IT
H2 CIW
CIO
CIS
IW
MV
H1
IW
PP
H1
IT
MH1
IS
MH2
H1
H4
H1
H5
Figure 5: Tree for property 4 (excerpt from Fig. 2).
assessing the importance of human errors in the failure
of tle, the resulting number of mcss can be slightly
overwhelming to perform an accurate evaluation on. Thus,
we might focus our assessment on single human errors. Our
scope can be reﬁned by the following property:
• What are all the mcss for tle that include errors
in disinfecting objects? (cid:2)MCS(IWoS) ∧ H4 (cid:3)
Choosing a single error — e.g., H4 — allows us to narrow
our objective and better isolate failure causes. By this
query, we obtain all the mcss that include H4,
i.e.,
all the ways in which an infected worker can join the
workplace (tle) due to a series of actions containing a
disinfection error (see Fig. 4): {IW , H3 , IT , H1 , H4 , VW}
and {IT , H2 , H1 , H4 , VW}. This analysis uncovered a
potentially worrying mcs, heavy on human errors and
with only two other elements needed to trigger a system-
level failure,
i.e., the existence of a vulnerable worker
(VW ) and an infected object used by the team (IT):
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:18:37 UTC from IEEE Xplore.  Restrictions apply. 
450
{IT , H2 , H1 , H4 , VW}. Knowing this can prompt modi-
ﬁcations in the workplace to mitigate the uncovered risk.
error
the occurrence of tle?
not
suﬃcient
to prevent
committing
human
• Is
any
∃MPS(IWoS)[H1 (cid:15)→ 0, H2 (cid:15)→ 0, H3 (cid:15)→ 0,
ei∈BE\{H1 ,...,H5}
H4 (cid:15)→ 0, H5 (cid:15)→ 0, ei (cid:15)→ 1]
The path set we are trying to construct in the formula
above is not minimal, i.e., there are ways to prevent the
occurrence of tle by only addressing human errors (see
Fig. 5), but including all ﬁve of them is not a minimal way
to do so. In this setting, a counterexample would be con-
structed following pattern2. In this case, the two vectors
represented by the following mpss are constructed: {H1}
and {H2 , H3}. This means that if we can guarantee that
either H1 is not committed or H2 alongside H3 are not
committed we will be sure that IWoS will not fail, i.e., an
infected worker joining the team can be prevented either
by respecting the outbreak procedures or by operational
disinfection and detection of COVID on the workplace.
• What are all the minimal ways to prevent the occur-
rence of tle? (cid:2)MPS(IWoS)(cid:3)
search on minimal
extend our
can further
We
the mpss. This
the tle to all
to prevent
ways
IWoS: {IW , IT},
the mpss
for
query returns all
{IW , H2},
{IW , H4 , IS, UT},
{IW , H4 , H5 , UT},
{IT , PP, IS, AB, MV , UT},
{H3 , IT},
{H3 , H2},
{IT , PP, H5 , AB, MV , UT}, {PP, H4 , IS, AB, MV , UT},
{PP, H4 , H5 , AB, MV , UT}, {H1} and {VW}. In doing
so, we uncover interesting additional ways to prevent
the occurrence of tle, e.g., the mps with a single
element {VW} or the ones with only two bes {IW , H2},
{IW , IT} and {H3 , IT}. Some of these mpss are of
particular interest since they do not depend on human
errors. This could further inform risk mitigation decisions,
e.g., trying to reduce the risk of a vulnerable worker
joining the team VW .
• Are a contact with an infected object and a contact
with an infected surface always independent scen-
arios? IDP(CIO, CIS)
As a last step, we might want to assess some events
in our tree for their independence. E.g., considering the
dependency between coming in contact with an infected
object and with an infected surface
(see excerpt on the right). By apply-
ing IDP we discover that CIO and
CIS are not independent. In fact, if
we return the inﬂuencing basic events
IBEs for the two elements it becomes
clear that their truth values both de-
pend on H1, i.e., on the respect of
outbreak procedures.
CT
CIO
MH1
MH2
CIS
H1
H5
H4
H1
IT
IS
• Is physical proximity superﬂuous for the occurrence
of tle? SUP(PP)
Finally, we can check whether physical proximity is su-
perﬂuous for tle (see Fig. 6). PP and IWoS are not
independent: in fact, there are cases in which the failure
of IWoS depends on the value of PP. Thus, PP is not a
superﬂuous element in T and must not be removed from
its leaves.
IWoS
CP/R
MoT
SH
CP
CR
CT
DT
AT
CVT UT
VW
H1
IW H3
IT
H2 CIW
IW
PP
IW
PP
H1
Figure 6: Tree for property 9 (excerpt from Fig. 2).
VIII. Conclusions and Future Work
Conclusions: We presented BFL, a Boolean logic for
fts that enables the construction of complex queries
that capture many relevant scenarios. BFL is a ﬂexible
yet powerful logic: as a testimony of this usefulness we
showcased an application of BFL to a COVID19-related
ft. Our logic can easily express properties and it can
query fts to account for diverse settings and what-if
situations: speciﬁed properties can then be checked via
the model checking algorithms we presented. Finally, we
presented an algorithm to generate counterexamples which
helps in narrowing the gap between the expressive power
of BFL and real-life usability.
Future work: Our work opens several relevant perspect-
ives for future research. First, it makes sense to extend
BFL to model probabilities. Fault trees analysis often
involves the computation of probabilistic dependability
metrics, such as the system reliability, availability and
mean time to failure, etc. A probabilistic fault tree logic
will allow users to perform such quantitative analysis.
Secondly,
it is foreseeable to extend BFL in order to
consider dynamic gates in fts. To handle dynamic gates
in dynamic fts it would be very natural to have a logic
that can express temporal properties, moving more in the
direction of LTL [8] or CTL [7] or their timed variants
TLTL [33] and TCTL [34]. Moreover, a step towards
usability can be achieved through the development of a
Domain Speciﬁc Language for BFL: in doing so, we would
near the gap between the theoretical development of our
logic and the need of practitioners for useful tools. Lastly,
applying an implementation of this logic to an industrial
case study could further propel the development of BFL
by providing hands-on feedback from engineers and risk
managers acquainted with FTA.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:18:37 UTC from IEEE Xplore.  Restrictions apply. 
451
[21] OMG, OMG Uniﬁed Modeling Language (OMG UML),
Superstructure, Version 2.4.1, Object Management Group
Std., Rev. 2.4.1, August 2011.
[Online]. Available: http:
//www.omg.org/spec/UML/2.4.1
[22] J. Simmonds, R. V. D. Straeten, V. Jonckers, and T. Mens,
“Maintaining consistency between UML models using descrip-
tion logic,” Obj. Logiciel Base données Réseaux, vol. 10, no. 2-3,
pp. 231–244, 2004. DOI: 10.3166/objet.10.2-3.231-244
[23] D. Berardi, D. Calvanese, and G. D. Giacomo, “Reasoning on
UML class diagrams,” Artif. Intell., vol. 168, no. 1-2, pp. 70–
118, 2005. DOI: 10.1016/j.artint.2005.05.003
[24] M. D. Walker, “Pandora: a logic for the qualitative analysis of
temporal fault trees,” Ph.D. dissertation, Univ. of Hull, 2009.
[25] C. A. Ericson, “Fault tree analysis,” in Sys. Safety Conf., vol. 1,
pp. 1–9, 1999.
[26] T. Bakeli, A. A. Haﬁdi et al., “Covid-19 infection risk manage-
ment during construction activities: An approach based on fault
tree analysis (fta),” Journal of Emergency Management, vol. 18,
no. 7, pp. 161–176, 2020.
[27] H. R. Andersen, “An introduction to binary decision diagrams,”
Lecture notes, IT University of Copenhagen, p. 5, 1997.
[28] C. E. Budde and M. Stoelinga, “Eﬃcient algorithms for quant-
itative attack tree analysis,” in 2021 IEEE 34th Computer
Security Foundations Symposium (CSF), pp. 1–15, 2021. DOI:
10.1109/CSF51468.2021.00041
[29] M. Ben-Ari, Mathematical logic for computer science. Springer
Science & Business Media, 2012.
[30] K. Brace, R. Rudell, and R. Bryant, “Eﬃcient implementation
of a bdd package,” in 27th ACM/IEEE Design Automation
Conference, pp. 40–45, 1990. DOI: 10.1109/DAC.1990.114826
[31] L. Jimenez Roa, T. Heskes, T. Tinga, and M. Stoelinga, “Auto-
matic inference of fault tree models via multi-objective evolu-
tionary algorithms,” 2021, available at: http://arxiv.org/abs/
2204.03743.
[32] C. Dehnert, S. Junges, J. Katoen, and M. Volk, “A storm
is coming: A modern probabilistic model checker,” in CAV,
R. Majumdar and V. Kuncak, Eds., vol. 10427, pp. 592–600.
Springer, 2017. DOI: 10.1007/978-3-319-63390-9_31
[33] J.-F. Raskin, “Logics, automata and classical theories for decid-
ing real time,” Ph.D. dissertation, Facultés universitaires Notre-
Dame de la Paix, Namur, 1999.
[34] R. Alur, C. Courcoubetis, and D. Dill, “Model-checking in dense
real-time,” Information and computation, vol. 104, no. 1, pp. 2–
34, 1993.
References
[1] E. Ruijters and M. Stoelinga, “Fault tree analysis: A sur-
vey of the state-of-the-art in modeling, analysis and tools,”
Computer Science Review, vol. 15–16, pp. 29–62, 2015. DOI:
10.1016/j.cosrev.2015.03.001
[2] M. Stamatelatos, W. Vesely, J. Dugan, J. Fragola, J. Minarick,
and J. Railsback, “Fault tree handbook with aerospace applic-
ations,” NASA Oﬃce of Safety and Mission Assurance, 2002.
[3] International Standardization Organization, “ISO/DIS 26262:
https://www.iso.org/
safety,”
Road
functional
standard/68383.html, 2018.
vehicles,
[4] S. Nicoletti, M. Stoelinga, and E. Hahn, “A Logic to
reason about Fault Trees.
Interview Report,” Available
online, https://www.utwente.nl/en/eemcs/fmt/research/ﬁles/
ft-logic-interview-domain-expert.pdf.
[5] A. Rauzy, “New algorithms for fault trees analysis,” Reliability
Engineering & System Safety, vol. 40, no. 3, pp. 203–211, 1993.
DOI: 10.1016/0951-8320(93)90060-C
[6] M. Bouissou, “An ordering heuristic for building binary decision
diagrams from fault-trees,” in RAMS, pp. 208–214, 1996.
[7] E. Clarke and E. Emerson, “Design and synthesis of synchron-
isation skeletons using branching time temporal logic,” in Logic
of Programs, vol. 31, pp. 52–71, 1981.
[8] A. Pnueli, “The temporal logic of programs,” in FOCS, pp. 46–
57. IEEE Computer Society, 1977. DOI: 10.1109/SFCS.1977.32
[9] H. Hansson and B. Jonsson, “A logic for reasoning about time
and reliability,” Formal Aspects Comput., vol. 6, no. 5, pp. 512–
535, 1994. DOI: 10.1007/BF01211866
[10] Z. Ognjanovic, “Discrete linear-time probabilistic logics: Com-
pleteness, decidability and complexity,” J. Log. Comput.,
vol. 16, no. 2, pp. 257–285, 2006. DOI: 10.1093/logcom/exi077
[11] M. Bozzano, A. Cimatti, J. Katoen, V. Y. Nguyen, T. Noll, and
M. Roveri, “Safety, dependability and performance analysis of
extended AADL models,” Comput. J., vol. 54, no. 5, pp. 754–
775, 2011. DOI: 10.1093/comjnl/bxq024
[12] D. Déharbe, S. Shankar, and E. M. Clarke, “Model check-
ing VHDL with CV,” in Formal Methods in Computer-Aided
Design, ser. Lecture Notes in Computer Science, G. Go-
palakrishnan and P. J. Windley, Eds., vol. 1522, pp. 508–514.
Springer, 1998. DOI: 10.1007/3-540-49519-3_33
[13] C. E. Budde, C. Dehnert, E. M. Hahn, A. Hartmanns, S. Junges,
and A. Turrini, “JANI: Quantitative model and tool interac-
tion,” in TACAS, ser. LNCS, vol. 10206, pp. 151–168. Springer,
2017. DOI: 10.1007/978-3-662-54580-5_9
[14] M. Z. Kwiatkowska, G. Norman, and D. Parker, “PRISM
4.0: Veriﬁcation of probabilistic real-time systems,” in CAV,
ser. LNCS, vol. 6806, pp. 585–591.
Springer, 2011. DOI:
10.1007/978-3-642-22110-1_47
[15] A. Thums and G. Schellhorn, “Model checking FTA,” in FME
2003, ser. LNCS, K. Araki, S. Gnesi, and D. Mandrioli, Eds., vol.
2805, pp. 739–757, 2003. DOI: 10.1007/978-3-540-45236-2_40
[16] P. Bieber, C. Castel, and C. Seguin, “Combination of fault tree
analysis and model checking for safety assessment of complex
system,” in EDCC-4, vol. 2485, pp. 19–31.
Springer, 2002.
DOI: 10.1007/3-540-36080-8_3
[17] M. Volk, S. Junges, and J. Katoen, “Fast dynamic fault
tree analysis by model checking techniques,” IEEE Trans.
Ind. Informatics, vol. 14, no. 1, pp. 370–379, 2018. DOI:
10.1109/TII.2017.2710316
[18] H. Boudali, P. Crouzen, and M. Stoelinga, “Dynamic fault
tree analysis using input/output interactive markov chains,”
in DSN, pp. 708–717.
IEEE Computer Society, 2007. DOI:
10.1109/DSN.2007.37
[19] E. Ábrahám, B. Becker, C. Dehnert, N. Jansen, J. Katoen,
and R. Wimmer, “Counterexample generation for discrete-time
markov models: An introductory survey,” in Formal Methods
for Exec. Softw. Models, vol. 8483, pp. 65–121, 2014. DOI:
10.1007/978-3-319-07317-0_3
[20] G. T. Leavens, A. L. Baker, and C. Ruby, “JML: A notation for
detailed design,” in Behavioral Speciﬁcations of Businesses and
Systems. Springer, 1999, vol. 523, pp. 175–188.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:18:37 UTC from IEEE Xplore.  Restrictions apply. 
452