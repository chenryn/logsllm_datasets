约束、视图与事务
当视图使用完毕
不需要使用视图后，请利用DROPVIEW语句清理空间。语法很
简单：
DROPVIEWpb_dimes;
没有盘问题
没有蠢问题
没有蠢问题
问：可以查看已创建的视图吗？
CHECKCONSTRAINT与视图很有帮助。但如果有两个人
同时改变同一个列，又会发生什么事呢？
用SHOWTABLES就能看到所有视图与表。也因为视图就
像表，所以使用DESC即可现察它的结构。
transaction）开始讲起。不过，先看看需要提一点现金
的 Mrs. Humphries 吧。
不会返回任何数据。MySQL会阻止我们却除视图，除
当数据库的使用者不只一人
非它有底层表，但我们却可以却除与视图有关的表。有
些RDBMS另有不同反应。各位最好直接试验会发生的情
时，CHECKCONSTRAINT与
况。一般而言，最好先卸除视图，然后再卸除它依据的表。
视图均有助于维护控制权。
当前位置
477
---
## Page 510
疯狂交易
当乖乖的数据库发生了人间惨剧
Mrs.Humphries想从她的支票账户中转存1.000元至存
款账户。她走向ATM……..
她检查支票账户和存款账户的余额。支票账户有1.000
元，存款账户有30元。
1OOO SRAOLERNS
3O SRAOLEANS
IN CHECKING
IN SRUINGS
她选择要做的事。
TRRNSFER IOOO SRAOLEONS
FROA CHECKING TO SRVINGS
她按下按钮。
电源恢复后。
CHECKING
SRUINGS
她再次检查支票账户和存款账户的余额。
OSRAOLERNS
3OSRAOLERNS
IN CHECKING
IN SRUINGS
此时ATM铃声大响，
画面突然变黑。断电了。
在哪儿？在哪儿？
Mrs.Humphries的钱到哪里去了？
478
第11章
---
## Page 511
约束、视图与事务
ATM里发生了什么事
ATM：我是只小小鸟，飞就飞、叫就叫，自由逍遥…
DATAVILLE
ATM：啊，MRS.ETHELP.HUMPHRIES来了。您好，MRS.ETHELP
SAVINGS&LOAN
HUMPHRIES(ACCOUNT_ID38221)
Mrs.Humphries：告诉我，我有多少钱。
ATM:我想下—SELECT BALRNCE FRON CHECKINGUHERE
ACC0UNT_10 = 38221:
T
SELECT BALANCE FROn SAVINGS UHERE ACCOUNT_IO= 38221:)
所以支票账户有1.000元，存款账户有30元。
Mrs.Humphries：从支票账户里转1.000元到存款账户。
ATM：MRS.HUMPHRIES，您的要求真是复杂。但我们照做：
(CHECKING_BAL>1000。嗯，她有足够的钱可以转账。）
>（从支票账户里移出1.000元）
这时突然断电。
(INSERTBEEEP......)
ATM:
ATM:
ATM: ZZZZZZZ
ATM：（打呵欠）
ATM：啊，MRS.ETHELP.HUMPHRIES来了。您好，MRS.ETHELP.
HUMPHRIES (ACCOUNT_ID 38221)
Mrs.Humphries：告诉我，我有多少钱。
ATM:我想-下-ISELECTBALANCEFRON CHECKINGUHERE
ACC0UNT_10-38221:SELECTBALANCEFROMSAVINGSWHERE
ACCOUNT_ID = 38221)
所以支票账户有0元，存款账户有30元。
ATM：噢噢！痛！你在砸我的屏幕！MRS.ETHELP.HUMPHRIES再见！
该如何防止ATM忘记Mrs.Humphries
的交易里的INSERT操作？
同时，在镇上的另一边……
当前位置
479
---
## Page 512
疯狂交易第二集
ATM发生更多麻烦
John和Mary共用一个账户。某个周五，他们分别到不同的ATM取款
机同时打算取出300元。
为John 和 Mary 的共
1st National
Savings
同账户记账的数据库。
账户余额：
350元
ATM：嗨，John，又见到你了。你以为我
ATM：Mary！你好啊！
是造币的吗？
John：我的账户余额有多少？
Mary：我的账户余额有多少？
ATM：我想下——[SELECT
ATM：我想—下—[SELECT
CHECKING_BRL FROn ACCOUNTS:)
CHECKING_BAL FROA ACCOUNTS:)
350元。
350元。
John：给我300元。
[电话铃声响起】
ATM：无情的人，只把我当成自动取款
Mary在皮包里摸索着电话。
机，拿了钱就跑得不见人影。
Mary：给我300元。
ATM：遵命。
钱）
350元
（CHECKING_BAL>300。她还有足够的钱）
（从账户里移出300元）
（从CHECKING_BAL里减去300)
50元
（从账户里移出300元）
John拿了钱就走了。
（从CHECKING_BAL里减去300)
-250元
ATM：从来不打电话、从来不写封信.
一切就从这里开
ATM：这个账户严重透支了。
再会，绝情的John。
始出现问题。
480
第11章
---
## Page 513
约束、视图与事务
如累一系列SQL语句能以组的方式一起执
行，而且在发生意外时SQL语句还能回到尚
未执行前的状态，那该有多好啊？这可能
只是我在临人说梦吧。
当前位置
481
---
## Page 514
事务解剖课
并非痴人说梦，而是事务
事务（transaction）是一群可完成一组工作的SQL语句。以Mrs.
Humphries的惨剧为例，事务由转账所需的所有SQL语句构成：
如果账户余额>=1000
从支票账户减去1000
这三项操作形成一组工
为存款账户加上1000
作，也就是一个事务。
John与Mary同时试着执行相同事务：
John与Mary同时试着取出300元。
如果账户余额>=300
如果账户余额>=300
从账户里减去300
从账户里减去300
奉上300元现金
奉上300元现金
2ohn利用Cebt Bank
ATM进行的事务
Maty 利用[st National
Savins Bank ATM 进
账户余额：
的事务
350元
以 John 与 Mary 为例，1st National Saving Bank ATM 不
应该有权操作账户，甚至不该查询余额，应该等到Left
BankATM的事务完成并释放对账户的锁定后。
在事务过程中，如果所有步骤无法不
受干拢地完成，则不该完成任何单一
步骤。
482
第11章
---
## Page 515
约束，视图与事务
经典ACID检测
为了帮助你判断SQL步骤是否为一个事务，可以借助ACID。这个简称
由四个字符组成，是判断一组SQL语句是否构成一个事务的四个原则：
ACID:ATOMICITY
原子性。事务里的每一个步骤都必须完成，否则只能都不完成。不1
的钱才会因为停电而凭空消失。
ACID:CONSISTENCY
一致性。事务完成后应该维持数据库的一致性。在完成两组金钱事
ICID
务后，钱的数量应该符合账户余额的情况。在第一个案列中，钱应
该转入存款账户；在第二个案例中，则应该换成现金。不该有钱消
失了。
ACID:ISOLATION
隔离性。表示每次事务都会看到具有一致性的数据库，无论其他事
务有什么行动。John与Mary的案例就是在这一点上出错的：Mary
的ATM可以看到账户余额，同时John的ATM正在完成事务。Mary
根本不该看到账户余额，至少也该看到“交易正在处理中”之类的|
信息。
ACID:DURABILITY
持久性。事务完成后，数据库需要正确地存储数据并保护数据免受
断电或其他威胁的伤害。通常把事务记录存储在主数据库以外的地
方。如果Mrs.Humphries的事务记录能存储在别的地方，她的1.000
元或许就不会消失了。
当前位置
483
---
## Page 516
在SQL中管理事务
SQL帮助你管理事务
让我们以极度简单的银行数据库为例，数据库由
checking
开户者表、支票账户表与存款账户表构成：
users
account_id
P!uno
balance
表中或许还有更多列，
last_name
大家可以自己想象。
first_name
phone
savings
email
account_id
address
有三种SQL事务工具可以保障账户的安
balance
全：
RDBMS从这一点开始迪
START TRANSACTION;
踪程序代码。
迪露SQL的行为。
STARTTRANSACTION持续追踪后续所
有SQL语句，直到你输入COMMIT或
ROLLBACK为止。
你的程序代码
?
等到我们满象后再提交（
COMMIT;
COMMJT）所有程序代码
满意程序代码造成的改变
造成的改变。
后，可对数据库COMMST
如果所有语句都已经妥当，改变后的
改变….
结果似乎也不错，那么请输入COMMIT，
让一切改变成真。
回滚，回到事务开始前
ROLLBACK;
的状态。
………若是不满急，则可以
ROLLBACK至程序代码执行
前的状态。
如果改变结果不太对劲，ROLLBACK
你的程序代码
可以逆转过程，让每件事回到START
开始前的状态
TRANSACTION前的状态。
开始的位置
在你COMMIT之前数据库都不会发生任何改变
484
第11章
---
## Page 517
约束、视图与事务
ATM里应该发生什么事
ATM：我是只小小鸟，飞就飞、叫就叫，自由逍遥……
ATM：啊，MRS.ETHEL P. HUMPHRIES来了。您好，MRS.ETHEL P
DATAVILLE
HUMPHRIES (ACCOUNT_ID 38221)
SAVINGS & LOAN
Mrs.Humphries：告诉我，我有多少钱。
ATM:我想—下——[SELECT BRLANCE FROA CHECKINGUHERE
ACC0UNT_1D ± 38221:
SELECT BRLANCE FRO∩ SAINGS UHERE ACCOUNT_ID - З822I:J
所以支票账户有1.000元，存款账户有30元。
Mrs.Humphries：从支票账户里转1.000元到存款账户里。
ATM：MRS.HUMPHRIES，您的要求真是复杂。但我们照做：
（事务开始：
SELECT BRLANCE FROA CHECKING UHERE ACCOUNT_ID+
(1228E
ATM：她的支票账户里有1.000元，继续事务。
ATM: (UPDATE CHECKING SET BRLANCE =BALANCE- 1OOO
UHERE ACC0UNT_10 = 38221:1
ATM启动备用电源：回滚事务：
这时突然断电。
ATM:
ATM:
ATM: ZZZZZZZ
ATM：（打呵欠）
ATM：啊，MRS.ETHELP.HUMPHRIES 来了。您好，MRS.ETHELP.
HUMPHRIES (ACCOUNT_ID 38221)
Mrs.Humphries：告诉我，我有多少钱。
章好有ROLLBACK机制，
ATM:我想—下-ISELECTBALANCEFRONCHECKINGUHERE
COMMJT语句并未执行
RCC0UNT_1D -38221:
所以一切都没改变。
SELECT BALRNCE FRON SAUINGS UHERE ACCOUNT_ID -38221;)
所以支票账户有1.000元，存款账户有30元。
当前位置》
485
---
## Page 518
MySQL与事务
如何让事务在MySQI
下运作
节省时间的命令
查看第183页上我们用于创建表的程序代码，还有SHOWC名ATE_TABL&my,
在MySQL下使用事务前，你需要先采用正确
cont.act.s 近与提供的下到 SQL. 代码,两老并非完余相间，但如最把下面这段代
的献略期CRIATKTABL命令中，最比的结聚会是一释的，反操号成激据位置不老
的存储引擎（storageengine）。存储引l擎是
要到除。但如果删除的话，看起束会更干净。
存储所有数据库内容和结构的背后功臣。有
DEATT 1RE 分成.
些存储引擎允许事务，有些则不行。
CREATE TABLE
关E& MUL
回想第4章看到的语句：
1ast_name* varchar(30) default NULL,
first_Name varchar (20) default NULL,
列是著可e+ nl,
SHOW CREATE TABLE my_COntaCtS;
emai1 varchar(50) default NULL,
gender? char (1) default NULL,
birthday~ date default NULL,
profession: varchar(50) default NULL,
1ocation varchar(50) default NULL,
status varchar(20) default NULL,
现在，我们要好好地关
interests varchar(100) default NULL,
seeking varchar(100) default NULL,
心存储引擎。
)ENGINE=MyISAM DEFAULT CHARSET=latin1
虽然我们能清理SQL代码
你不需要担心结束括号后的
（删除最后一行文字和反
文字，它说明了数据如何存
撤号），但不能只累复制
储，以及使用的字符集。目
和粘贴亲创建表。
前用默认值就够了。
点前检置：
185
存储引擎必须是BDB或InnoDB，
两种支持事务的引擎之一。
BDB与InnoDB是两种RDBMS在幕后存储数
放松
据的可能方式。
这些就是存储引擎，使用其中一种可确保事务能够使
用。请参考其他相关书籍，了解MySQL的各种存储引I
擎之间的差异。
对现在的目标而言，从两种引擎中选择任一种都可以
改变存储引擎，请用这段语法：
ALTER TABLE yourtable TYPE = InnoDB;
486
第11章
---
## Page 519
约束、视图与事务
现在动手试试看
假设我们把小猪存钱罐表中的pennies都升级为
quarters。
请大家利用本章稍早的piggy_bank表来动手尝
试下列程序代码。第一次先使用ROLLBACK，暂时
不对表造成永人性的改变：
START TRANSACTION;
SELECT * FROM piggy_bank;
UPDATE piggy_bank set coin ='Q'where coin=‘P';
SELECT*FROMpiggy_bank； 1950;
2
3
ROLLBACK;
START TRANSACTION;
id
coin
coin_year
UPDATE piggy_bank set coin ='D'where coin='Q
1
2
AND coin_year > 1980;
3
COMMIT;
4
START TRANSACTION;
id
coin
coin_year
UPDATE piggy_bank set coin ='p'where coin ='N
1
2
AND coin_year > 1970;
3
4
COMMIT;
答案在第492页。
488
第11章
---
## Page 521
约束、视图与事务
没有蠢问题
没有蠢问题
以在数据库里实现影响数据的查询，又不会在做错事
时无法挽救对表做的改变。但记得在改变完成后输
吗？COMMIT与ROLLBACK可以独立运作吗？
入COMMIT或ROLLBACK。
答：
必须用START TRANSACTION告诉RDBMS
问：
：为什么需要COMMIT与ROLLBACK？
“事务开始”、才能追踪事务开始的地方并知道恢复的
程度。
答：
RDBMS会记录事务过程中的每个操作，称
问：
可以使用STARTTRANSACTION来测试查
为事务日志（transaction log）、操作越多、日志越大。
事务最好留待真正需要恢原功能时使用，以避免存储空
询吗？
间的浪费，也避免了RDBMS花费太多精力来追踪我
们的每个操作。
我还是需要阻止其他人接融某些表。像最近扇围
的会计师，他们应该只能看到薪咨表。而显我也