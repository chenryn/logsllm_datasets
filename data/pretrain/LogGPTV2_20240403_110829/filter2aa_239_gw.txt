有了此声明，就可以通过请求下面的URL来调用Greeting动作方法，并在URL中为
name参数传递一个值：http://localhost:18770/Home/Greeting? name=Stephanie。
为了使用更易于记忆的链接，可以使用路由信息来指定参数。Greeting2动作方法指定
了参数id：
    public string Greeting2(string id) =>
      HtmlEncoder.Default.Encode($"Hello, {id}");
这匹配默认路由{controller}/{action}/{id? 
}，其中id指定为可选参数。现在可以使用
此链接，id参数包含字符串Matthias:http://localhost:5000/Home/Greeting2/Matthias。
动作方法也可以声明为带任意数量的参数。例如，可以在Home控制器中添加带两个
参数的Add动作方法：
    public int Add(int x, int y) => x + y;
可以使用如下URL来调用此动作，以填充x和y参数的值：
http://localhost:18770/Home/Add? x=4&y=5。
使用多个参数时，还可以定义一个路由，以在不同的链接中传递值。下面的代码段显
示了路由表中定义的另一个路由，它指定了填充变量x和y的多个参数（代码文件
MVCSampleApp/Startup.cs）：
    app.UseMvc(routes =
      Content("Hello World", "text/plain");
为了返回JSON格式的数据，可以使用Json方法。下面的示例代码创建了一个Menu对
象：
    public IActionResult JsonDemo()
    {
      var m = new Menu
      {
        Id = 3,
        Text = "Grilled sausage with sauerkraut and potatoes",
        Price = 12.90,
        Date = new DateTime(2016, 3, 31),
        Category = "Main"
      };
      return Json(m);
    }
Menu类定义在Models目录中，它定义了一个包含一些属性的简单POCO类（代码文件
MVCSampleApp/Models/Menu.cs）：
    public class Menu
    {
      public int Id {get; set; }
      public string Text {get; set; }
      public double Price {get; set; }
      public DateTime Date {get; set; }
      public string Category {get; set; }
    }
客户端可在响应体内看到这些JSON数据，现在它们可轻松地用作JavaScript对象：
    {"Id":3, "Text":"Grilled sausage with sauerkraut and potatoes",
     "Price":12.9, "Date":"2016-03-31T00:00:00", "Category":"Main"}
通过使用Controller类的Redirect方法，客户端接收HTTP重定向请求。之后，浏览器会
请求它收到的链接。Redirect方法返回一个RedirectResult（代码文件
MVCSampleApp/Controllers/Result-Controller.cs）：
    public IActionResult RedirectDemo() => Redirect("http://www.cninnovation.com"
);
通过指定到另一个控制器和动作的重定向，也可以构建对客户端的重定向请求。
RedirectToRoute返回一个RedirectToRouteResult，它允许指定路由名称、控制器、动作和
参数。这会构建一个在收到HTTP重定向请求时返回客户端的链接：
    public IActionResult RedirectRouteDemo() =>
      RedirectToRoute(new {controller = "Home", action="Hello"});
Controller基类的File方法定义了不同的重载版本，返回不同的类型。这个方法可以返
回FileContentResult、FileStreamResult和VirtualFileResult。不同的返回类型取决于使用的
参数，例如使用字符串返回VirtualFileResult，使用流返回FileStreamResult，使用字节数组
返回FileContentResult。
下一个代码段返回一幅图像。创建一个Images文件夹，添加一个JPG文件。为了让接
下来的代码段执行，在wwwroot目录中创建一个Images文件夹并添加文件Matthias.jpg。样
例代码返回一个VirtualFileResult，用第一个参数指定文件名。第二个参数用MIME类型
image/jpeg指定contentType参数：
    public IActionResult FileDemo() =>
      File("～/images/Matthias.jpg", "image/jpeg");
41.4节演示了如何返回不同的ViewResult变体。
41.3.4 使用Controller基类和POCO控制器
到目前为止，创建的所有控制器都派生自基类Controller。ASP.NET MVC 6也支持
POCO（Plain Old CLR Objects）控制器，它们不派生自这个基类。因此，可以使用自己的
基类来定义自己的控制器类型层次结构。
从Controller基类中可以得到什么？有了这个基类，控制器可以直接访问基类的属
性。表41-1描述了这些属性和它们的功能。
表41-1
POCO控制器没有Controller基类，但要访问这些信息，它仍然很重要。下面的代码段
定义了一个派生自object基类的POCO控制器（可以使用自己的自定义类型作为基类）。
为了用POCO类创建ActionContext，可以创建一个该类型的属性。POCOController类使用
ActionContext作为这个属性的名称，类似于Controller类所采用的方式。然而，只拥有一个
属性并不能自动设置它。需要应用ActionContext特性。使用这个特性注入实际的
ActionContext。Context属性直接访问ActionContext中的HttpContext属性。在UserAgentInfo
动作方法中，使用Context属性访问和返回请求中的User-Agent标题信息（代码文件
MVCSampleApp/Controllers/POCOController.cs）：
    public class POCOController
    {
      public string Index() =>
        "this is a POCO controller";
      [ActionContext]
      public ActionContext ActionContext {get; set; }
      public HttpContext Context => ActionContext.HttpContext;
      public ModelStateDictionary ModelState => ActionContext.ModelState;
      public string UserAgentInfo()
      {
        if (Context.Request.Headers.ContainsKey("User-Agent"))
        {
        return Context.Request.Headers["User-Agent"];
        }
        return "No user-agent information";
      }
    }
41.4 创建视图
返回给客户端的HTML代码最好通过视图指定。对于本节的示例，创建了
ViewsDemoController。视图都在Views文件夹中定义。ViewsDemo控制器的视图需要一个
ViewsDemo子目录，这是视图的约定（代码文件
MVCSampleApp/Controllers/ViewDemoController.cs）：
      public ActionResult Index() => View();
  注意： 另一个可以搜索视图的地方是Shared目录。可以把多个控制器使用的
视图（以及多个视图使用的特殊部分视图）放在Shared目录中。
在Views目录中创建ViewsDemo目录后，可以使用Add | New Item并选择MVC View
Page项模板来创建视图。因为动作方法的名称是Index，所以将视图文件命名为
Index.cshtml。
动作方法Index使用没有参数的View方法，因此视图引擎会在ViewsDemo目录中寻找
与动作同名的视图文件。控制器中使用的View方法有重载版本，允许传递不同的视图名
称。此时，视图引擎会寻找与在View方法中传递的名称对应的视图。
视图包含HTML代码，其中混合了一些服务器端代码。下面的代码段包含默认生成的
HTML代码（代码文件MVCSampleApp/Views/ViewsDemo/Index.cshtml）：
    @{
      Layout = null;
    }
      Index
服务器端代码使用Razor语法（即有@符号）编写。41.4.2节将讨论这种语法。在那之
前，先看看如何从控制器向视图传递数据。
41.4.1 向视图传递数据
控制器和视图运行在同一个进程中。视图直接在控制器内创建，这便于从控制器向视
图传递数据。为传递数据，可使用ViewDataDictionary。该字典以字符串的形式存储键，
并允许使用对象值。ViewDataDictionary可以与Controller类的ViewData属性一起使用，例
如向键值为MyData的字典传递一个字符串：ViewData["MyData"] = "Hello"。更简单的语
法是使用ViewBag属性。ViewBag是动态类型，允许指定任何属性名称，以向视图传递数
据（代码文件MVCSampleApp/Controllers/SubmitDataController.cs）：
    public IActionResult PassingData()
    {
      ViewBag.MyData = "Hello from the controller";
      return View();
    }
  注意： 使用动态类型的优势在于，视图不会直接依赖于控制器。第16章详细
介绍了动态类型。
在视图中，可以用与控制器类似的方式访问从控制器传递的数据。视图的基类
WebViewPage定义了ViewBag属性（代码文件
MVCSampleApp/Views/ViewsDemo/PassingData.cshtml）：
      @ViewBag.MyData
41.4.2 Razor语法
前面提到，视图包含HTML和服务器端代码。在ASP.NET MVC中，可以使用Razor语
法在视图中编写C#代码。Razor使用@字符作为转换字符。@字符之后的代码是C#代码。
使用Razor语法时，需要区分返回值的语句和不返回值的方法。返回的值可以直接使
用。例如，ViewBag.MyData返回一个字符串。该字符串直接放到HTML的div标记内：
    @ViewBag.MyData
如果要调用没有返回值的方法或者指定其他不返回值的语句，则需要使用Razor代码
块。下面的代码块定义了一个字符串变量：
    @{
      string name = "Angela";
    }
现在，使用转换字符@，即可通过简单的语法使用变量：
    @name
使用Razor语法时，引擎在找到HTML元素时，会自动认为代码结束。在有些情况
中，这是无法自动看出来的。此时，可以使用圆括号来标记变量。其后是正常的代码：
    @(name)
, Stephanie
foreach语句也可以定义Razor代码块：
    @foreach
(var item in list)
    {
      The item name is @item.
    }
  注意： 通常，使用Razor可自动检测到文本内容，例如它们以角括号开头或
者使用圆括号包围变量。但在有些情况下是无法自动检测的，此时需要使用@：来显
式定义文本的开始位置。
41.4.3 创建强类型视图
使用ViewBag向视图传递数据只是一种方式。另一种方式是向视图传递模型，这样可
以创建强类型视图。
现在用动作方法PassingAModel扩展ViewsDemoController。这里创建了Menu项的一个
新列表，并把该列表传递给基类Controller的View方法（代码文件
MVCSampleApp/Controllers/ViewsDemo-Controller.cs）：
      public IActionResult PassingAModel()
      {
        var menus = new List
        {
          new Menu
          {
          Id=1,
          Text="Schweinsbraten mit Knödel und Sauerkraut",
          Price=6.9,
          Category="Main"
          },
          new Menu
          {
          Id=2,
          Text="Erdäpfelgulasch mit Tofu und Gebäck",
          Price=6.9,
          Category="Vegetarian"
          },
          new Menu
          {
          Id=3,
          Text="Tiroler Bauerngröst'l mit Spiegelei und Krautsalat",
          Price=6.9,
          Category="Main"
          }
        };
        return View(menus);
      }
当模型信息从动作方法传递到视图时，可以创建一个强类型视图。强类型视图使用
model关键字声明。传递到视图的模型类型必须匹配model指令的声明。在下面的代码段
中，强类型的视图声明了类型IEnumerable，它匹配模型类型。因为Menu类在名称
空间MVCSampleApp.Models中定义，所以这个名称空间用using关键字打开。
通过.cshtml文件创建的视图的基类派生自基类RazorPage。有了模型，基类的类型就
是RazorPage；在下面的代码段中，基类是RazorPage>。这
个泛型参数又定义了类型IEnumerable的Model属性。代码段使用基类的Model属
性，在@foreach中遍历Menu项，为每个菜单显示一个列表项（代码文件
MVCSampleApp/ViewsDemo/PassingAModel.cshtml）：
    @using MVCSampleApp.Models
    @model IEnumerable
    @{
      Layout = null;
    }
      PassingAModel
        @foreach (var item in Model)
        {
          @item.Text
        }
根据视图需要，可以传递任意对象作为模型。例如，编辑单个Menu对象时，模型的
类型将是Menu。在显示或编辑列表时，模型的类型可以是IEnumerable。
运行应用程序并显示定义的视图时，浏览器中将显示一个菜单列表，如图41-2所示。
图41-2
41.4.4 定义布局
通常，Web应用程序的许多页面会显示部分相同的内容，如版权信息、徽标和主导航
结构。到目前为止，所有的视图都包含完整的HTML内容，但有一种更简单的方式管理共
享的内容，即使用布局页面。
为了定义布局，应设置视图的Layout属性。为了定义所有视图的默认属性，可以创建
一个视图启动页面。需要把这个文件放在Views文件夹中，使用MVC View Start Page项模
板创建它。这将创建_ViewStart.cshtml文件（代码文件
MVCSampleApp/Views/_ViewStart.cshtml）：
    @{
      Layout = "_Layout";
    }
如果所有视图都不需要使用布局，则可以将Layout属性设置为null：
    @{
      Layout = null;
    }
1．使用默认布局页
使用MVC View Layout Page项模板可以创建默认的布局页面。可以在Shared文件夹中
创建这个页面，这样它就可用于不同控制器的所有视图。项模板MVC View Layout Page创