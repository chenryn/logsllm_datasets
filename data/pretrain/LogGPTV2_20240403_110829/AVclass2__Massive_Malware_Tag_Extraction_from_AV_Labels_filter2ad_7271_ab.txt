family tag. Aliases enable identifying when different vendors use
different tokens to capture the same concept. A tagging rule may
also define that a token maps to multiple tags if the token captures
multiple concepts. For example, the token ircbot maps to tags irc
and bot. It is possible to define a tagging rule that maps a token
to a tag that is identical to the token. For example, the downloader
token maps to the downloader tag. However, there is no need to
define such rules as they are implicitly handled.
A tagging rule should map a token to the most specific tags
possible. For example, a tagging rule could map token addrop to
the adware tag, the grayware tag, or both of them. In this case, it
is best to map it to the adware tag because the default taxonomy,
detailed in Section 2.2, captures that adware is a child of grayware.
The expansion step below takes care of making explicit the implicit
relationships between tags in the taxonomy. Thus, there is no need
to assign the grayware tag explicitly at this point.
A tagging rule can also define that a token maps to an empty set
of tags. We call such tokens generic because they do not provide
useful information. Generic tokens are discarded during tagging.
Example generic tokens are malicious and application. It is impor-
tant to highlight that generic tokens in AVclass2 are different from
generic tokens in the original AVclass. In AVclass, a generic to-
ken provided no information about the family a sample belongs
to. In AVclass2, a generic token provides no useful information
at all (family or other). Thus, many tokens that were considered
generic by AVclass will be assigned tags by AVclass2, e.g., dldr
was a generic token in AVclass, but produces tag downloader in AV-
class2. In fact, generic tokens in AVclass are used as seeds to build
the default taxonomy for AVclass2, as explained in Section 2.2.
When a token has not been seen before, it will not have a tagging
rule defined for it. In this case, the token should not be discarded
because it may still provide useful information, e.g., it may capture
a newly discovered family. Thus, unknown tokens are passed to
the expansion step.
Expansion. The expansion step uses expansion rules that define
that a tag implies a set of other tags, where the original tag is in-
cluded in the expanded set. For example, the worm class tag can be
expanded to include the selfpropagate behavior tag, since a worm
self-propagates by definition. Expansion rules allow to more accu-
rately capture how many AV engines capture the same concept in
their labels. For example, prior to expansion, AVclass2 may output
that the worm tag is assigned by two engines and selfpropagate
by another three. After expansion, AVclass2 can output that self-
propagate is assigned by five engines. More importantly, expansion
rules help increase search coverage. For example, if 95% of samples
with the virut family tag also have the virus class tag, the update
module will output an expansion rule from virut to virus. Using
that expansion rule, an extra 5% of virut samples will be added the
virus tag and thus will show up in searches for virus samples.
There exist two types of expansion rules: intra-category and
inter-category. Intra-category rules are implicitly defined by the
parent-child relationships in the input taxonomy. They capture that
a tag in one category implies other tags in the same category. For
instance, the taxonomy may define that the adware class tag is a
child of the grayware class tag. Thus, a sample tagged as adware
can also be tagged as grayware. Inter-category rules capture that a
tag from one category implies other tags from a different category.
They make explicit otherwise implicit tag relationships, e.g., to add
the filemodify behavior to the virus class tag, as a virus by definition
modifies infected files, or to add the spam behavior to a bot family
known to send spam such as conficker. Both inter-category and
intra-category expansion rules can be automatically identified by
the update module. In addition, an analyst can provide AVclass2
with its own expansion rules based on domain knowledge.
2.2 Taxonomy
AVclass2 takes as input a taxonomy that defines parent-child re-
lationships between the tags used by the tagging rules. AVclass2
ships with a default taxonomy so that it can be used out-of-the-box.
The taxonomy supported by AVclass2 is structured as a tree. The
first level underneath the root comprises categories. Each category
forms its own subtree where nodes are tags and edges capture
parent-child relationships between tags. Figure 2 shows a simpli-
fied taxonomy with only a handful of tags under each of the four
default categories: behavior (BEH), class (CLASS), file properties
(FILE), and family (FAM). Some categories such as FAM have no
intermediate (i.e., non-leaf) tags, they simply contain a set of tags
with no structure. Other categories contain intermediate tags that
capture parent-child relationships. For example, the CLASS cate-
gory contains intermediate tag grayware indicating that adware
and casino are classes of grayware. Some intermediate tags only
provide structure and are not useful for indexing. These appear
capitalized, e.g., OS.
By design, AVclass2 assumes that the input taxonomy is incom-
plete and will not contain all malware-related concepts, not even
all concepts that may appear in AV labels. We believe that building
a closed malware taxonomy that contains all malware-related con-
cepts is a futile effort, as it is nearly impossible to be complete and
ACSAC 2020, December 7–11, 2020, Austin, USA
Silvia Sebastián and Juan Caballero
Figure 2: A simple taxonomy with all four categories in the default taxonomy, but only a small subset of its tags.
Table 1: Summary of the default taxonomy.
Category Tags
BEH
44
Leaf
38
CLASS
FAM
FILE
32
894
95
23
894
88
Intermediate
browsermodify, infosteal, killproc, min-
ing, sms
adware, bot, dialer, grayware, hoax,
miner, tool, virus, worm
-
exploit, FILETYPE, installer, OS, packed,
PROGLANG, signed
malware continuously evolves, requiring constant updates to any
taxonomy. Instead, a key property of AVclass2 is that it supports
previously unknown concepts, not yet in the tagging rules and
taxonomy. When an unknown token, i.e., a token without a tagging
rule, appears in an AV label, AVclass2 will keep it and potentially
include it in the output, marking it as having an unknown (UNK)
pseudo-category. Another key property of AVclass2 is that the
taxonomy is provided as a separate input, so that it can be easily
modified. Thus, we say that AVclass2 uses an open taxonomy that
while incomplete, can be refined using the update module or in a
collaborative manner.
A tag can be represented by its name or by its path in the taxon-
omy up to the category it belongs to. For example, the adware tag
can also be represented as CLASS:grayware:adware.
Default taxonomy. AVclass2 provides a default taxonomy, which
organizes concepts that commonly appear in AV labels. Since the
default taxonomy is included in the open source release of AVclass2,
users can share their updates collaboratively. The default taxonomy
is summarized in Table 1. It comprises of over 1,000 tags split into
the four categories in Figure 2, which we detail next.
• Behavior (BEH). Captures how the malware behaves, e.g.,
infosteal, sendssms, spam, mining. Behaviors manifest during
a sample’s execution. However, once encoded in an AV la-
bel, they can be extracted by AVclass2 without the need to
execute the sample.
• Class (CLASS). Malware classes are widely used to capture
malware characteristics such as specific behaviors or distri-
bution methods. Common malware classes are worm, virus,
ransomware, and downloader. A malware family can belong
to multiple malware classes. For example, wannacry was
both ransomware and worm. A problematic class is trojan.
Originally, this class captured a distribution method, namely
that the sample fooled the user by claiming fake function-
ality. However, nowadays trojan is the default class used
by AV vendors for samples without a more specific class.
Thus, we believe it currently holds little meaning and should
be considered generic. For this reason, AVclass2 by default
considers trojan a generic token, but the analyst can easily
modify this behavior.
• File properties (FILE). Comprises of static file properties
including the file type (e.g., pdf, flash, msword), the operating
system under which the sample executes (e.g., android, linux,
windows), the packer used for obfuscation (e.g., pecompact,
themida, vmprotect), and the programming language used to
code the sample (e.g., autoit, delphi, java).
• Family (FAM). The malware family of the sample. The de-
fault taxonomy does not include parent-child relationships
between malware families, i.e., no intermediate family tags.
Family relationships could be added to the taxonomy using
malware lineage approaches [15, 22].
The starting point to build the default taxonomy was the file
with generic tokens in the AVclass repository. In AVclass, generics
were common tokens in AV labels that do not provide family infor-
mation. That differs from AVclass2 where generics are tokens that
do not provide any useful information, family or other. Our insight
was that the AVclass generics contained much useful non-family
information such as malware classes, behaviors, and file proper-
ties. To build the seed taxonomy, we examined AVclass generics,
manually classifying them into the four tag categories above, or
as generics that provide no useful information. After that initial
manual effort, we refined the seed taxonomy by running the update
module on different datasets, incorporating the newly found tags
and relationships, as well as adjusting any conflicts it identifies.
Table 1 summarizes the current status of the default taxonomy.
2.3 Update Module Overview
Malware is an ever-evolving ecosystem where new concepts keep
appearing. Over time, known families exhibit new behaviors and
file properties (e.g., novel obfuscations); new families are introduced
with their corresponding aliases; and novel malware classes are
occasionally created. Furthermore, new relations among known
concepts are learned by the community increasing our knowledge
base such as which families belong to a certain class or exhibit a
specific behavior. Keeping AVclass2 up-to-date with this natural
RootBEHminingbitcoinminingphishingCLASSgraywareadwarecasinoviruswormFILEpackednspackthemidasignedOSandroidwindowsbundleFAMvirutzbotFigure2:Asimpletaxonomywithallfourcategoriesinthedefaulttaxonomy,butonlyasmallsubsetofitstags.Table1:Summaryofthedefaulttaxonomy.CategoryTagsLeafIntermediateBEH4438browsermodify,infosteal,killproc,min-ing,smsCLASS3223adware,bot,dialer,grayware,hoax,miner,tool,virus,wormFAM894894-FILE9588exploit,FILETYPE,installer,OS,packed,PROGLANG,signedmalwarecontinuouslyevolves,requiringconstantupdatestoanytaxonomy.Instead,akeypropertyofAVclass2isthatitsupportspreviouslyunknownconcepts,notyetinthetaggingrulesandtaxonomy.Whenanunknowntoken,i.e.,atokenwithoutataggingrule,appearsinanAVlabel,AVclass2willkeepitandpotentiallyincludeitintheoutput,markingitashavinganunknown(UNK)pseudo-category.AnotherkeypropertyofAVclass2isthatthetaxonomyisprovidedasaseparateinput,sothatitcanbeeasilymodified.Thus,wesaythatAVclass2usesanopentaxonomythatwhileincomplete,canberefinedusingtheupdatemoduleorinacollaborativemanner.Atagcanberepresentedbyitsnameorbyitspathinthetaxon-omyuptothecategoryitbelongsto.Forexample,theadwaretagcanalsoberepresentedasCLASS:grayware:adware.Defaulttaxonomy.AVclass2providesadefaulttaxonomy,whichorganizesconceptsthatcommonlyappearinAVlabels.SincethedefaulttaxonomyisincludedintheopensourcereleaseofAVclass2,userscansharetheirupdatescollaboratively.ThedefaulttaxonomyissummarizedinTable1.Itcomprisesofover1,000tagssplitintothefourcategoriesinFigure2,whichwedetailnext.•Behavior(BEH).Captureshowthemalwarebehaves,e.g.,infosteal,sendssms,spam,mining.Behaviorsmanifestduringasample’sexecution.However,onceencodedinanAVla-bel,theycanbeextractedbyAVclass2withouttheneedtoexecutethesample.•Class(CLASS).Malwareclassesarewidelyusedtocapturemalwarecharacteristicssuchasspecificbehaviorsordistri-butionmethods.Commonmalwareclassesareworm,virus,ransomware,anddownloader.Amalwarefamilycanbelongtomultiplemalwareclasses.Forexample,wannacrywasbothransomwareandworm.Aproblematicclassistrojan.Originally,thisclasscapturedadistributionmethod,namelythatthesamplefooledtheuserbyclaimingfakefunction-ality.However,nowadaystrojanisthedefaultclassusedbyAVvendorsforsampleswithoutamorespecificclass.Thus,webelieveitcurrentlyholdslittlemeaningandshouldbeconsideredgeneric.Forthisreason,AVclass2bydefaultconsiderstrojanagenerictoken,buttheanalystcaneasilymodifythisbehavior.•Fileproperties(FILE).Comprisesofstaticfilepropertiesincludingthefiletype(e.g.,pdf,flash,msword),theoperatingsystemunderwhichthesampleexecutes(e.g.,android,linux,windows),thepackerusedforobfuscation(e.g.,pecompact,themida,vmprotect),andtheprogramminglanguageusedtocodethesample(e.g.,autoit,delphi,java).•Family(FAM).Themalwarefamilyofthesample.Thede-faulttaxonomydoesnotincludeparent-childrelationshipsbetweenmalwarefamilies,i.e.,nointermediatefamilytags.Familyrelationshipscouldbeaddedtothetaxonomyusingmalwarelineageapproaches[15,22].ThestartingpointtobuildthedefaulttaxonomywasthefilewithgenerictokensintheAVclassrepository.InAVclass,genericswerecommontokensinAVlabelsthatdonotprovidefamilyinfor-mation.ThatdiffersfromAVclass2wheregenericsaretokensthatdonotprovideanyusefulinformation,familyorother.OurinsightwasthattheAVclassgenericscontainedmuchusefulnon-familyinformationsuchasmalwareclasses,behaviors,andfileproper-ties.Tobuildtheseedtaxonomy,weexaminedAVclassgenerics,manuallyclassifyingthemintothefourtagcategoriesabove,orasgenericsthatprovidenousefulinformation.Afterthatinitialmanualeffort,werefinedtheseedtaxonomybyrunningtheupdatemoduleondifferentdatasets,incorporatingthenewlyfoundtagsandrelationships,aswellasadjustinganyconflictsitidentifies.Table1summarizesthecurrentstatusofthedefaulttaxonomy.2.3UpdateModuleOverviewMalwareisanever-evolvingecosystemwherenewconceptskeepappearing.Overtime,knownfamiliesexhibitnewbehaviorsandfileproperties(e.g.,novelobfuscations);newfamiliesareintroducedwiththeircorrespondingaliases;andnovelmalwareclassesareoccasionallycreated.Furthermore,newrelationsamongknownconceptsarelearnedbythecommunityincreasingourknowledgebasesuchaswhichfamiliesbelongtoacertainclassorexhibitaspecificbehavior.KeepingAVclass2up-to-datewiththisnaturalAVclass2: Massive Malware Tag Extraction from AV Labels
ACSAC 2020, December 7–11, 2020, Austin, USA
Tokenization. Takes as input an AV label and outputs the list of
tokens the label contains. The tokenization in AVclass2 is almost
identical to that of AVclass and we refer the reader to the original
paper for details [35]. The only significant difference is that AV-
class2 does not filter out short tokens (less than four characters)
during tokenization, but rather after tagging. This enables AVclass
to extract tags from short tokens that correspond to well-known
concepts, e.g., irc, bot. Figure 3b shows the tokens obtained in our
running example.
Tagging. Takes as input the tokens obtained from the tokenization
and the input tagging rules. For each input token, if a tagging rule
exists for the token, it applies it to obtain a list of tags. If the token
is generic, it is removed. If no tagging rule exists for the token, it is
kept. It outputs a list of identified tags and any remaining unknown
tokens. Figure 3c shows the tagging output. Some tokens have been
replaced by their tags, e.g., token win by tag windows and token
risktool by tags grayware and tool. Other tokens have been dropped
as generic (e.g., trojan) or because they are short (e.g., eq).
Expansion. Takes as input the file with expansion rules, the tax-
onomy, and the tags output by the tagging. For each tag, if an
expansion rule exists for it, it applies the rule to obtain a larger list
of target tags that replaces the tag. Unknown tokens are not affected
by the expansion. The expansion first applies the inter-category
expansion rules provided as input to AVclass2. Next, it applies
the implicit intra-category expansion rules due to the parent-child
tag relationships in the taxonomy. For example, in our running
example tag bitcoinminer implies tag CLASS:miner.
Output. For each tag and unknown token, AVclass2 counts the
number of AV labels where it appears. This count can be interpreted
as a confidence score. Tags and unknown tokens that appear in the
label of at most one AV engine are removed. This filters random
unknown tokens that earlier steps may have missed, as the likeli-
hood that those appear in labels from multiple AV engines is low,
as well as very low confidence tags.
The output of AVclass2 is the list of tags and unknown tokens
along with their confidence score. Figure 3e shows the output of
our running example where unknown token skodna, as well as tag
FILE:os:windows, have been removed because they only appeared
in one label. AVclass2 also provides a compatibility mode with
AVclass to output the most likely family for each sample, which
corresponds to the highest ranked family tag or unknown token.
i.e., FAM:bebeg in our running example.
4 UPDATE MODULE
The update process comprises of two steps. When labeling a dataset,
AVclass2 outputs co-occurrence statistics between tags and un-
known tokens. The larger the dataset, the higher confidence in the
identified co-occurrence statistics. The update module takes as in-
put the co-occurrence statistics, the taxonomy, and the tagging and
expansion rules. It performs two substeps: identifying strong rela-
tions and converting strong relations into updates to the input files.
The process of generating co-occurrence statistics and identifying
strong relations is similar to the one used by AVclass to detect alias
relations [35]. The novel part of the update module is the recursive
process and update rules used to automatically generate updates to
the taxonomy, tagging rules, and expansion rules.
Figure 3: Running example.
evolution is a challenge. It requires to constantly evolve the tax-
onomy, tagging rules, and expansion rules with new concepts and
previously unknown relations. Those new concepts will appear
in the output of AVclass2 as unknown tokens, not present in the
taxonomy and tagging rules. Manually categorizing those unknown
tokens does not scale to the huge numbers of new samples a secu-
rity vendor may observe each day. We need automatic approaches
to keep labeling and tagging tools up-to-date.
To this end, AVclass2 provides an update module to automati-
cally update the input taxonomy, tagging rules, and expansion rules
with new concepts and relations. The update module first identifies
co-occurrence relations of tokens in AV labels. Co-occurrence in AV
labels was introduced in VAMO [32] and later used in AVClass [35]
and Euphony [9] to identify family aliases. But, the update module
in AVclass2 takes this concept a step further by introducing a novel
recursive process that first identifies relations between unknown
tokens and tags and then uses a set of learning rules to classify
those relations and propose updates to the taxonomy, tagging rules,
and expansion rules.
3 LABELING MODULE
The labeling module takes as input the AV labels assigned by mul-