certificates at high risk. Fortunately, our dataset does not contain
any valid leaf-mix XS-Certs.
4 DATASETS AND METHODOLOGY
The analysis in this paper is based on a dataset of certificates used
in the wild. The certificates are passively collected from the out-
going SSL/TLS connections on all ports of several universities and
research networks mainly located in North America. Beyond public
data (e.g., CT Logs), it also contains certificates that are not publicly
available (e.g., user or private certificates) and thereby enables us to
take a broad yet unseen perspective on cross-signing. Our dataset
spans a period of more than 7 years, starting February 2012 and
ending August 2019, covering more than 300 billion TLS connec-
tions. For a broad view on CA certificates, we extend this dataset
with CA certificates from CT logs2 (those logs used by crt.sh [57]).
The passive data collection effort was cleared by the respective
responsible party at every contributing institution. Our collection
effort focuses on machine to machine communication and excludes
or anonymizes sensitive information. See Appendix A for details.
We release the toolchain [45] that enables the analysis of the
cross-signing relationships of X.509 certificates from any source
(e.g., Censys [33] or CT logs [57]). Since that part of our data set
derived from passive measurements is subject to NDAs and contains
private certificates that are not contained in public repositories, we
are unable to release our data set. Our toolchain can, however, be
used to reproduce our analysis using other data sources, e.g., CT.
We validate certificates using our custom validation logic which
closely mirrors the way browsers perform certificate validation. We
build potential paths using name-matching between subject and
issuer fields. Unlike browsers, we build all possible paths from a
certificate to root certificates3. We do not just search for the shortest
possible path. To this end, we check each path separately by passing
the complete path to OpenSSL for validation and using only the
specific root certificate for this path as trust anchor. We obtain the
earliest and latest possible validity dates based on the not before
and not after dates of the path’s certificates and use these for the
validation. We also check if a path is valid given the path-length-
constraints of its CA certificates. To obtain validity information for
2These contain 156,315 CA certificates, however, 147,439 of them are used for Google
Certificate Transparency (Precert Signing) which we exclude from our analysis. Further
2,635 are already included in our passive dataset. CT thus adds 6,241 CA certificates.
3Due to computational complexity, we base our evaluation for some CT certificates on
all paths of length 12 or smaller (multiple million paths per certificate); for the vast
majority of certificates, also longer paths were validated and used.
Figure 2: Cross-signing types. We observe many root, inter-
mediate and leaf XS-Certs in our dataset. Luckily, leaf-mix
XS-Certs remain a theory: We find no such problematic case.
not before field should correspond to the issuance date [67]. As, e.g.,
GoDaddy allows for a renewal of certificates up to 120 days prior to
expiration, we require certificates to have an overlapping validity
period of at least 121 days to be considered cross-signs.
3.2 Cross-signing: Classification
For our analysis of cross-signing and corresponding risks for the
PKI, we classify XS-Certs into 4 types. These types depend on the
type of certificates in the XS-Cert. We illustrate this in Figure 2.
Root XS-Certs. A root XS-Cert comprises at least two CA cer-
tificates of different issuers. At least one of them is part of a root
store (cf. Figure 2a). When CAs use the term cross-signing, they
typically refer to this type. This approach extends trust to root
stores that do not include a CA’s root certificate and can extend a
CA’s trust to more applications or operating systems. Likewise, an
already trusted root can bootstrap trust in a new CA certificate by
cross-signing it. Moreover, CAs can start to use a new CA certificate
without disrupting compatibility with old applications that do not
receive root store updates. However, as we will discuss later, such
cross-signs increase the complexity of removing trust in certificates
that are part of a root store. Trust paths can inadvertently remain
valid via paths using other certificates of the XS-Cert (Section 5.1).
Intermediate XS-Certs. Intermediate XS-Certs contain two or
more intermediate CA certificates from different issuers, but no root
store certificate (cf. Figure 2b). They are similar to root XS-Certs,
but no certificate in the XS-Cert is directly trusted by root store
maintainers. The same benefits (bootstrapping, large trust coverage,
and compatibility with old applications) apply. Additionally, CAs
without an own root certificate may employ such cross-signing to
root trust in multiple CAs, and thus achieve independence from a
single business partner. However, intermediate XS-Certs also are
problematic if certificate revocations are not thoroughly applied to
all certificates of a XS-Cert (cf. Section 5.1).
Leaf XS-Certs. Leaf XS-Certs contain only leaf certificates (cf.
Figure 2c). This could in principle be used in cases where some client
CALrootstorerootstore(c) Leaf XS-Cert(b) Intermediate XS-Cert(d) Leaf-Mix XS-Cert(a) Root XS-CertCertificates inXS-Certequalin subject andpublic key.CA certLeaf certXS-CertiCALCACACACACACACACACALLCALLLCACACACACACACACCS ’20, November 9–13, 2020, Virtual Event, USA
Jens Hiller, Johanna Amann, and Oliver Hohlfeld
a certificate, all found paths and validity period(s) of the certificate
are mapped to the corresponding root store versions—based on the
trust status of a path’s root certificate in root stores over time.
We use the root stores of major operating systems, web browsers,
and grid networks and consider certificate additions as well as
removals across their versions. Specifically, we use the root stores
of Microsoft [30], Apple (iOS, OSX) [49], Google (Android) [40],
Mozilla (Firefox, Linux distributions) [62], and the grid computing
PKI [36]. We also include the PKIs of the governments of the United
States [41], Australia [69], Switzerland [86], Oman [72], Netherlands
[73], Japan [71], India [70], and Estonia [5].
We test for revocations based on browser revocation lists, i.e.,
Mozilla’s OneCRL, Google’s CRLSets and blacklist, Apple’s lists
of blocked certificates, and Microsoft’s root store program. We
also use revocation status information from crt.sh for CA CRLs
and Microsoft’s disallowedcert.stl blacklist to cross-check with the
former web browser or operating system revocation mechanisms.
Our dataset includes 225,243,355 certificates of which 23,504,394
are valid4 (720 only due to inclusion in a root store; 23,503,674 have
a valid path to a root store). We focus our analysis on these valid
certificates. They split into 9,197 CA certificates, 23 self-signed
X509v1 certificates, 3 self-signed X509v3 certificates using legacy
extensions to show their CA status, and 23,495,171 leaf certificates.
793 certificates are included in at least one of our used root stores
(all 694 self-signed CA certificates, the 23 self-signed X509v1 and 3
X509v3 legacy certificates, and 73 not self-signed CA certificates;
All the latter 73 certificates are already valid due to their root store
inclusion but additionally provide paths to other trusted roots).
To give a short overview of our dataset: We see 526 of the 793 root
certificates being used—meaning that we found another certificate
that was signed by them in our dataset. In total, we find more
than 9.3 billion valid paths between the certificates in our dataset.
The longest path is 17 certificates long (including root and leaf).
We find 63 certificates with this path length. In the entirety of
our measurement, the root CA against which we can validate the
most certificates was the IdenTrust DST Root CA X3 (with 8,473,760
certificates). This is probably driven by their cross-sign of Let’s
Encrypt which we will detail later in this paper. The Let’s Encrypt
ISRG Root X1 follows as a close second with 8,382,825 certificates.
The CA to which we can find most unique paths is the Comodo
AddTrust External CA Root CA. For this root, we can find 3.7 billion
different validation paths for a total of 5,966,846 distinct certificates.
The maximum number of different validation paths (as in different
paths through the CA ecosystem through which we could validate
it) for a CA certificate we found was 45,225,135. These paths provide
validity for the intermediate IdenTrust Global Common Root CA 1.
Taking a look at cross-signs, we find a total of 47,543 XS-Certs.
These split into 86 root, 236 intermediate, and 47,221 leaf XS-Certs5.
For the remainder of this paper, we focus our analysis on root and
intermediate CA certificates as these cross-signs impact the trust of
thousands or millions of leaf-certificates. We however note that it is
4 147,439 invalid certificates are for Google Certificate Transparency Precert Signing
(excluded from analysis). Most other invalid certificates are a side effect of observing
real Internet traffic: 70% are used for user authentication in the grid and not trusted
by CAs. Auto-generated certificates for Tor or WebRTC account for 17% and 1%,
respectively. 9% are self-signed. The remaining 3% comprise IoT and firewall certificates.
Earlier studies already found invalid certificates to be common in the web [26].
5The number of leaf XS-Certs is solely based on our passive dataset.
interesting that there is a significant number of leaf XS-Certs which
may bring along the same problems as cross-signed CA certificates,
e.g., incomplete revocation. We note that CRLite [54] (now being
integrated in Firefox) potentially enables large scale revocation for
leaf certificates—by reducing the overhead for CRL updates with
efficient Bloom filter-based incremental updates.
No clear phenomenon explains the leaf XS-Certs: For 63% of
leaf XS-Certs, one CA issued all certificates (multiple CAs: 37%).
DigiCert is involved in 67% of leaf XS-Certs (45% of those stem
from Symantec before DigiCert acquired it), followed by GoDaddy
(10%) and Comodo (8%). Let’s Encrypt, however, is involved in only
significantly less than 1% of cases. In future work it might be worth
trying to explore the motivation behind these cases.
When analyzing the root and intermediate XS-Certs, we find
internal and external cross-signs. Internal XS-Certs comprise only
certificates that have been issued within the same CA group, i.e.,
issuer and certificate owner are controlled by the same entity. For
example, we find the two largest CA groups, Comodo6 and Dig-
iCert, to internally cross-sign certificates within and across their
subsidiary CAs, both considered internal cross-signing.
External XS-Certs cross boundaries of CA groups, i.e., issuer
and certificate owner of at least one certificate of the XS-Cert are
controlled by different entities. These are particularly interesting as
issuing CAs take responsibility for the actions of the resulting inter-
mediates [63]; whereas the information flow between organizations
may be limited, challenging fast and thorough revocation.
We find internal and external cross-signing for both, root (58 in-
ternal / 28 external) as well as intermediate (70 / 166) XS-Certs. For
intermediate CA certificates, we find 124 cases where the organiza-
tion does not have their own root certificate. These organizations
are completely dependent on the cross-signs from their issuers.
In addition to these XS-Certs, we also identify 97,240 cases of
certificate re-issuances. Certificate re-issuances are similar to cross-
signing: there are several certificates using the same subject and
key. The difference to XS-Certs is that the validity periods of these
certificates overlap only slightly or not at all (note that key-reuse
across certificates with different subjects clearly distinguishes from
cross-signing). We only consider cases as XS-Certs if their cer-
tificate’s validities overlap for 121 or more days (cf. Section 3.1)
and exclude re-issuances from our following discussion. Notably,
certificate re-issuing is prevalent for leaf certificates (97,233) and al-
most non-existent when root (1) or intermediate (6) certificates are
involved. We still analyzed the latter, but found them uninteresting.
5 CROSS-SIGNS IN THE WILD
In this section, we systematically analyze the use of cross-signing
in existing PKIs. To identify the different categories of cross-signing
and their motivation, we start off from its primary goal: extending
certificate trust—exploiting all derived trust paths in our dataset.
We combine the derived validity status in root stores (over time)
with revocation data and enrich this with knowledge on ownership
and (governmental-)control over CAs, and algorithmic properties
of certificates. We overview the identified categories in Table 1 with
their number of occurrence in our dataset(s). We focus on (i) the
6By Comodo, we refer to the CA business, which was recently renamed to Sectigo to
avoid naming confusion with the separate company Comodo Group [29]
The Boon and Bane of Cross-Signing: Shedding Light on a Common Practice in Public Key Infrastructures
CCS ’20, November 9–13, 2020, Virtual Event, USA
Table 1: Observed XS-Certs by category. Numbers marked
with ∗ are based on manual investigation of the passive
dataset. A XS-Cert can count to multiple categories.
 Valid after revocation
 PKI barrier breaches
○ Bootstrapping
+⧸- Expanded trust (new stores / longer time)
+⧸- Alternative paths
+⧸-
+⧸- Ownership change
(cid:13) Backdating
(cid:13) Missing transparency
Support of multiple signature algorithms
16
7
57
64 / 46
155
23
35
7
2
∗
∗
∗
∗
∗
bad : potential and exploited security problems (Sections 5.1 -
5.2), (ii) the good ○: ease bootstrapping of new CAs (Section 5.3),
(iii) cases with pros and cons [+⧸-], e.g., the transition to new crypto-
graphic algorithms (Sections 5.4 - 5.6), and (iv) the ugly (cid:13) behavior
due to problematic practices and lacking transparency (Section 5.7).
5.1 Valid Paths After Revocations
Cross-signs significantly complicate the revocation of CA certifi-
cates. When a CA certificate is revoked, all of its cross-signs need to
be revoked as well. A single remaining unrevoked cross-sign means
that a valid path to a trusted root still exists—and all certificates
of the revoked CA can still be validated. As we will show in this
section, cross-signing repeatedly caused incomplete revocations, or
even added new valid trust paths for already revoked certificates.
We next empirically study this problem of valid paths after revo-
cation that adds an additional layer of complexity to the already
fragile revocation mechanisms in PKIs. We focus our discussion
on cross-signs that caused incomplete revocations for WoSign and
DigiNotar as well as incomplete revocations in vendor-controlled
CRLs (especially Mozillas’ OneCRL and Googles’ CRLSet).
5.1.1 The WoSign and StartCom Ban. WoSign was distrusted by
major root store holders after a series of misbehaviors [64] (see
Figure 3 for a timeline of events). WoSign did not announce the
acquisition of the StartCom CA in time. It also evaded rules for
distrusting SHA1-signed certificates issued after January 1st 2016
by backdating the not before date7 of certificates they issued. As a
result, Mozilla set up a special not before rule, i.e., for certificates that
were issued after October 21, 2016, Mozilla distrusted paths that
end in a WoSign or StartCom root [96]. In January 2018, Mozilla
completely removed these roots [96, 97]. Google performed similar
actions, removing WoSign and StartCom roots around September
2017 [92, 93], as did Apple and Microsoft [4, 88].
By analyzing cross-signs, we observe that WoSign certificates
were cross-signed by Comodo subsidiaries, Certplus, Unizeto Cer-
tum, and StartCom. Furthermore, in April 2017—after Google and
Mozilla set up not before rules for certificates issued by WoSign and
StartCom—the widely trusted Certinomis - Root CA cross-signed
the StartCom EV SSL ICA (see Figure 3). The StartCom EV SSL ICA
intermediate was issued a few days before by StartCom Certification
7The certificate’s not before date defines from which time on the certificate is valid,
but it is also used as an indicator for the issuance date of the certificate [67].
SHA1 deprecated
SHA1 deprecated
1 Jan
1 Jan