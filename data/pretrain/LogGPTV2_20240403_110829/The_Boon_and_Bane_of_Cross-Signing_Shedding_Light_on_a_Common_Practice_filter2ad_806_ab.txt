### 4. DATASETS AND METHODOLOGY

The analysis in this paper is based on a dataset of certificates collected from real-world SSL/TLS connections. The dataset was passively gathered from outgoing SSL/TLS traffic on all ports of several universities and research networks, primarily located in North America. In addition to public data (e.g., Certificate Transparency (CT) logs), the dataset includes non-public certificates (e.g., user or private certificates), providing a unique and comprehensive perspective on cross-signing. The dataset spans over seven years, from February 2012 to August 2019, and covers more than 300 billion TLS connections.

To enhance the scope of our CA certificate analysis, we augmented the dataset with CA certificates from CT logs, specifically those used by crt.sh [57]. This extended dataset contains 156,315 CA certificates, of which 147,439 are for Google Certificate Transparency (Precert Signing) and were excluded from our analysis. After excluding duplicates, the additional CA certificates from CT logs amount to 6,241.

The passive data collection was approved by the responsible parties at each contributing institution. Our collection process focuses on machine-to-machine communication and excludes or anonymizes sensitive information. For more details, see Appendix A.

We have released a toolchain [45] that enables the analysis of cross-signing relationships in X.509 certificates from various sources (e.g., Censys [33] or CT logs [57]). Due to non-disclosure agreements (NDAs) and the presence of private certificates not found in public repositories, we cannot release the full dataset. However, our toolchain can be used to reproduce our analysis with other data sources, such as CT logs.

### 4.1 Certificate Validation

We validate certificates using a custom validation logic that closely mirrors the validation process used by web browsers. We build potential trust paths by matching the subject and issuer fields. Unlike browsers, which typically search for the shortest valid path, we construct all possible paths from a certificate to root certificates. Each path is validated separately using OpenSSL, with the specific root certificate as the trust anchor. We determine the earliest and latest possible validity dates based on the "not before" and "not after" dates of the path's certificates. We also check if a path is valid given the path-length constraints of its CA certificates.

For some CT certificates, due to computational complexity, we evaluate paths up to a length of 12 (multiple million paths per certificate). For the majority of certificates, longer paths were also validated and used. The "not before" field should correspond to the issuance date [67]. Since some CAs, like GoDaddy, allow for certificate renewal up to 120 days before expiration, we require certificates to have an overlapping validity period of at least 121 days to be considered cross-signed.

### 3.2 Cross-Signing: Classification

For our analysis of cross-signing and its associated risks to the Public Key Infrastructure (PKI), we classify XS-Certs into four types, depending on the type of certificates involved. These types are illustrated in Figure 2.

#### Root XS-Certs
A root XS-Cert consists of at least two CA certificates from different issuers, with at least one being part of a root store (Figure 2a). This type of cross-signing extends trust to root stores that do not include a CA’s root certificate, thereby extending the CA’s trust to more applications or operating systems. It can also bootstrap trust in a new CA certificate by cross-signing it. Additionally, CAs can use a new CA certificate without disrupting compatibility with older applications that do not receive root store updates. However, such cross-signs complicate the removal of trust in certificates that are part of a root store, as trust paths may inadvertently remain valid via other certificates in the XS-Cert (Section 5.1).

#### Intermediate XS-Certs
Intermediate XS-Certs contain two or more intermediate CA certificates from different issuers but no root store certificate (Figure 2b). They are similar to root XS-Certs but are not directly trusted by root store maintainers. The benefits include bootstrapping, broad trust coverage, and compatibility with old applications. CAs without their own root certificate may use such cross-signing to achieve independence from a single business partner. However, incomplete revocations can be problematic if not applied to all certificates in the XS-Cert (Section 5.1).

#### Leaf XS-Certs
Leaf XS-Certs contain only leaf certificates (Figure 2c). While less common, they can be used in scenarios where a client requires multiple certificates. Our dataset does not contain any valid leaf-mix XS-Certs, indicating that such problematic cases are rare.

### 5. CROSS-SIGNS IN THE WILD

In this section, we systematically analyze the use of cross-signing in existing PKIs. We identify different categories of cross-signing and their motivations, starting with the primary goal of extending certificate trust. We combine the derived validity status in root stores (over time) with revocation data and enrich this with knowledge on ownership and control over CAs, and algorithmic properties of certificates. Table 1 summarizes the identified categories and their occurrences in our dataset.

#### 5.1 Valid Paths After Revocations

Cross-signs significantly complicate the revocation of CA certificates. When a CA certificate is revoked, all of its cross-signs must also be revoked. A single unrevoked cross-sign means that a valid path to a trusted root still exists, allowing all certificates of the revoked CA to remain valid. This section examines the problem of valid paths after revocation, which adds an additional layer of complexity to already fragile revocation mechanisms in PKIs.

##### 5.1.1 The WoSign and StartCom Ban

WoSign and StartCom were distrusted by major root store holders due to a series of misbehaviors [67]. WoSign did not timely announce the acquisition of StartCom and backdated the "not before" date of certificates issued after January 1, 2016, to evade rules for distrusting SHA1-signed certificates. As a result, Mozilla set up a special "not before" rule, distrusting paths ending in a WoSign or StartCom root after October 21, 2016. In January 2018, Mozilla completely removed these roots [96, 97]. Google, Apple, and Microsoft took similar actions around September 2017 [92, 93, 4, 88].

By analyzing cross-signs, we observed that WoSign certificates were cross-signed by Comodo subsidiaries, Certplus, Unizeto Certum, and StartCom. Furthermore, in April 2017—after Google and Mozilla set up "not before" rules—the widely trusted Certinomis - Root CA cross-signed the StartCom EV SSL ICA (Figure 3). This intermediate was issued a few days before by StartCom Certification, highlighting the complexity and potential security issues introduced by cross-signing.