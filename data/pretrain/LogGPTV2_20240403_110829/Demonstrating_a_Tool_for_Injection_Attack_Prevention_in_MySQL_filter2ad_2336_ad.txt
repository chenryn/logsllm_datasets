### Protection Mechanisms

In this demonstration, we focus on injection attacks where protection mechanisms are in place, as the cases of unsanitized inputs are well-known. The activation of SEPTIC within MySQL will block these attacks, thereby defending the application from injection vulnerabilities.

### IV. Demonstration Setup

The demonstration is based on the application scenario described in the previous section. The setup, illustrated in Figure 7, involves two computers and one Ethernet switch. One computer represents both the web and DBMS servers, each running in a separate virtual machine. The other computer acts as the client. Specifically, the computers represent the following entities:
- MySQL DBMS server, including the SEPTIC mechanism (1 virtual machine)
- Apache web server with ModSecurity, Zend engine, and the web application (1 virtual machine)
- A browser to access the web application and tools for performing SQLI attacks, such as sqlmap (1 machine)

Displays from SEPTIC and ModSecurity are used to show events related to these protection mechanisms. For SEPTIC, we developed an event log that records all actions taken by the mechanism, including query model creation, query processing, and attack detection. This log is integrated into the logger module.

The demonstration consists of five phases:
1. **Exploitation of Semantic Mismatch**: Demonstrates the vulnerability despite sanitization.
2. **Enhanced Protection with ModSecurity**: Shows the impact of adding a WAF.
3. **SEPTIC Training**: Illustrates the training process.
4. **SEPTIC Attack Detection**: Demonstrates the detection of attacks.
5. **Comparison of ModSecurity and SEPTIC**: Compares the effectiveness of both mechanisms.

### A. Attacks with Sanitization Function Protection

In the first phase, no external protection mechanisms are enabled. The application is only protected by the sanitization functions provided by the PHP language. We demonstrate that the application remains vulnerable to certain attacks, even with these sanitization functions in place.

### B. Attacks with Additional ModSecurity Protection

In the second phase, ModSecurity is activated to enhance the application's protection. After enabling ModSecurity and restarting the web server, the same attacks from the first phase are executed again. Some previously successful attacks are now blocked by ModSecurity, while others still succeed, indicating false negatives. Blocked attacks are logged by ModSecurity, and the outcomes of those that pass through are displayed in the browser. At the end of this phase, ModSecurity is disabled, and the web server is restarted.

### C. Training SEPTIC

In the third phase, SEPTIC is configured for training mode, and the MySQL server is restarted to apply this configuration. The SEPTIC status display confirms the new mode. We train SEPTIC by inserting benign inputs into the application forms. These inputs reach existing queries in the application, which are then sent to MySQL. SEPTIC creates a query model for each new query and stores it with a unique identifier. The SEPTIC events log records the addition of these query models. For repeated queries, SEPTIC does not create a new model if one already exists, as shown in the SEPTIC events display.

### D. SEPTIC Protection

In this phase, SEPTIC is set to prevention mode, which blocks and logs attacks. After restarting MySQL, the persistent query models are loaded, and the SEPTIC status display confirms the change. Using the same injection attacks from the first two phases, we demonstrate that SEPTIC detects and blocks all of them without false negatives. The SEPTIC events log records the construction of query structures, generation of query identifiers, discovery of query models, comparison of structures, and detection of attacks (SQLI or stored injection). For SQLI attacks, it also logs whether they are structural or syntactical. When SEPTIC flags an attack, the query is dropped, and its execution is stopped in MySQL, visible in the browser. Additionally, we show that benign inputs do not trigger any false positives, ensuring that queries are executed as expected.

### E. ModSecurity versus SEPTIC

In the final phase, we compare the results of both protection mechanisms. We observe that ModSecurity does not protect the application from all injected attacks, while SEPTIC detects and blocks all attacks without false positives.

### V. Conclusions and Discussion

This demonstration illustrates how injection attacks can compromise an application, even when following secure coding best practices and using web application firewalls. We use a non-trivial PHP web application with entry point sanitization and ModSecurity to show that semantic mismatch flaws can still be exploited. Adding SEPTIC to MySQL mitigates these issues by handling queries just before execution, providing better protection with low overhead.

### Acknowledgment

This work was partially supported by the EC through project FP7-607109 (SEGRID) and by national funds through Fundação para a Ciência e a Tecnologia (FCT) with references UID/CEC/50021/2013 (INESC-ID) and UID/CEC/00408/2013 (LaSIGE).

### References

[1] S. Bandhakavi, P. Bisht, P. Madhusudan, and V. N. Venkatakrishnan. CANDID: Preventing SQL injection attacks using dynamic candidate evaluations. In Proceedings of the 14th ACM Conference on Computer and Communications Security, pages 12–24, Oct. 2007.

[2] S. W. Boyd and A. D. Keromytis. SQLrand: Preventing SQL injection attacks. In Proceedings of the 2nd Applied Cryptography and Network Security Conference, pages 292–302, 2004.

[3] G. T. Buehrer, B. W. Weide, and P. Sivilotti. Using parse tree validation to prevent SQL injection attacks. In Proceedings of the 5th International Workshop on Software Engineering and Middleware, pages 106–113, Sept. 2005.

[4] E. Cecchet, V. Udayabhanu, T. Wood, and P. Shenoy. Benchlab: An open testbed for realistic benchmarking of web applications. In Proceedings of the 2nd USENIX Conference on Web Application Development, 2011.

[5] GreenSQL. http://www.greensql.net.

[6] W. Halfond and A. Orso. AMNESIA: Analysis and monitoring for neutralizing SQL-injection attacks. In Proceedings of the 20th IEEE/ACM International Conference on Automated Software Engineering, pages 174–183, Nov. 2005.

[7] W. Halfond, A. Orso, and P. Manolios. WASP: Protecting web applications using positive tainting and syntax-aware evaluation. IEEE Transactions on Software Engineering, 34(1):65–81, 2008.

[8] Info Security. SQL Injection Flaw Found in Mossack Fonseca CMS, Apr. 2016. http://www.infosecurity-magazine.com/news/sql-injection-flaw-mossack-fonseca/.

[9] A. Lerner, J. Skorupa, and D. Ciscato. Gartner Inc. Magic quadrant for application delivery controllers. 2016.

[10] W. Masri and S. Sleiman. SQLPIL: SQL injection prevention by input labeling. Security and Communication Networks, 8(15):2545–2560, 2015.

[11] I. Medeiros, M. Beatriz, N. F. Neves, and M. Correia. Hacking the DBMS to prevent injection attacks. In Proceedings of the Sixth ACM Conference on Data and Application Security and Privacy, pages 295–306, Mar. 2016.

[12] Percona toolkit. https://www.percona.com.

[13] PHP Address Book. http://php-addressbook.sourceforge.net.

[14] T. Pietraszek and C. V. Berghe. Defending against injection attacks through context-sensitive string evaluation. In Proceedings of the 8th International Conference on Recent Advances in Intrusion Detection, pages 124–145, 2005.

[15] Refbase. http://http://www.refbase.net.

[16] Quinta. http://www.navigators.di.fc.ul.pt/wiki/Quinta.

[17] K. Z. Snow, F. Monrose, L. Davi, A. Dmitrienko, C. Liebchen, and A.-R. Sadeghi. Just-in-time code reuse: On the effectiveness of fine-grained address space layout randomization. In Proceedings of the IEEE Symposium on Security and Privacy, pages 574–588, 2013.

[18] S. Son, K. S. McKinley, and V. Shmatikov. Diglossia: Detecting code injection attacks with precision and efficiency. In Proceedings of the 20th ACM Conference on Computer and Communications Security, pages 1181–1192, 2013.

[19] Sqlmap. https://github.com/sqlmapproject/testenv/tree/master/mysql.