title:DNS Cache Poisoning Attack: Resurrections with Side Channels
author:Keyu Man and
Xin'an Zhou and
Zhiyun Qian
DNS Cache Poisoning Attack: Resurrections with Side Channels
Keyu Man
PI:EMAIL
University of California, Riverside
Riverside, CA, USA
Xin’an Zhou
PI:EMAIL
Riverside, CA, USA
University of California, Riverside
University of California, Riverside
Zhiyun Qian
PI:EMAIL
Riverside, CA, USA
ABSTRACT
DNS is one of the fundamental and ancient protocols on the Internet
that supports many network applications and services. Unfortu-
nately, DNS was designed without security in mind and is subject
to a variety of serious attacks, one of which is the well-known DNS
cache poisoning attack. Over the decades of evolution, it has proven
extraordinarily challenging to retrofit strong security features into
it. To date, only weaker versions of defenses based on the principle
of randomization have been widely deployed, e.g., the randomiza-
tion of UDP ephemeral port number, making it hard for an off-path
attacker to guess the secret. However, as it has been shown recently,
such randomness is subject to clever network side channel attacks,
which can effectively derandomize the ephemeral port number.
In this paper, we conduct an analysis of the previously over-
looked attack surface, and are able to uncover even stronger side
channels that have existed for over a decade in Linux kernels. The
side channels affect not only Linux but also a wide range of DNS
software running on top of it, including BIND, Unbound and dns-
masq. We also find about 38% of open resolvers (by frontend IPs)
and 14% (by backend IPs) are vulnerable including the popular DNS
services such as OpenDNS and Quad9. We have extensively vali-
dated the attack experimentally under realistic configuration and
network conditions and showed that it works reliably and fast.
CCS CONCEPTS
• Security and privacy → Network security; Operating systems
security; • Networks → Cross-layer protocols; Naming and ad-
dressing.
KEYWORDS
DNS, cache poisoning, side channel, attack, ICMP, fragment
ACM Reference Format:
Keyu Man, Xin’an Zhou, and Zhiyun Qian. 2021. DNS Cache Poisoning
Attack: Resurrections with Side Channels. In Proceedings of the 2021 ACM
SIGSAC Conference on Computer and Communications Security (CCS ’21),
November 15–19, 2021, Virtual Event, Republic of Korea. ACM, New York, NY,
USA, 15 pages. https://doi.org/10.1145/3460120.3486219
1 INTRODUCTION
Domain Name System (DNS) is one of the most important infras-
tructures of the modern Internet. It translates the human-readable
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
© 2021 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-8454-4/21/11.
https://doi.org/10.1145/3460120.3486219
domain names into machine-readable IP addresses. This basic func-
tionality has also now been used by various security services such
as email authentication [35], routing security (e.g., RPKI [42]), and
even certificate issuance where proof of domain ownership is the
common method to acquire certificates [5] . As a result, compro-
mising DNS can lead to catastrophic security failures with a wide
range of consequences [20] (e.g., man-in-the-middle attacks and
fake TLS certificates being issued [13]).
Despite its critical role, DNS has been a fragile part of the security
chain. Historically, efficiency was the primary consideration of DNS,
leading to the design of a single query and response over UDP,
which is still the primary mechanism used today. Although security
features like DNSSEC and DNS cookies have been standardized,
they are not widely deployed due to backward compatibility. This
led to a series of DNS cache poisoning attacks [33, 36, 45] that allow
an off-path attacker to poison a DNS cache with a malicious record
to map a domain to an arbitrary IP address. The earliest such attack
dates back to 1997 [58]. In 2008, Dan Kaminsky identified a way to
bypass the standard bailiwick checks [36]. Recently, a side-channel
based DNS cache poisoning attack [45], dubbed SADDNS [1, 45],
was developed that can effectively derandomize the ephemeral port
in a DNS query.
In SADDNS, the key insight is that a shared resource, i.e., ICMP
global rate limit shared between the off-path attacker and victim,
can be leveraged to send spoofed UDP probes and infer which
ephemeral port is used. Unfortunately, it is unclear how many more
such side channels exist in the network stack. In this paper, we
explore a non-conventional type of port scan packets, i.e., ICMP
packets which are by design error messages and cannot solicit
any explicit response. This is distinct from SADDNS where it has
considered UDP packets which are conventional port scan packets.
Even though it is known that ICMP can interact with UDP/TCP [4,
48], e.g., shutting down a socket (with an ICMP port unreachable
message), it is not immediately obvious how ICMP probes can allow
an off-path attacker to infer the ephemeral port number selected
for a UDP socket. Surprisingly, we uncover novel side channels
that have been lurking in the Linux network stack for over a decade
and yet were not previously known.
The successful exploitation of these side channels in the context
of DNS hinges on the subtle interactions among three different
layers, i.e., ICMP, UDP, and application. Interestingly, due to the
lack of documentation and awareness, such interactions are often
neglected and misconceived, leading to many exploitable scenarios.
In addition to novel side channels, we also find that ICMP messages
can be used to DoS DNS transactions, indirectly assisting the cache
poisoning attack.
We have comprehensively characterized the impact of the side
channels. They affect the most popular DNS software including
BIND, Unbound, and dnsmasq running on top of Linux. In addition,
 This work is licensed under a Creative Commons Attribution-ShareAlike International 4.0 License. CCS '21, November 15–19, 2021, Virtual Event, Republic of Korea. © 2021 Copyright held by the owner/author(s). ACM ISBN 978-1-4503-8454-4/21/11. https://doi.org/10.1145/3460120.3486219  Session 12C: Traffic Analysis and Side Channels CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3400We summarize our contributions as the followings:
we estimate that they affect 13.85% of open resolvers. Finally, we
evaluate the end-to-end attack on the latest BIND resolver and a
home router and find that it is reliable and takes only minutes to
succeed. To mitigate the attack, we suggest setting proper socket
options, randomizing the caching structure, and rejecting specific
ICMP messages when possible.
• We discovered novel side channels that allow us to use ICMP
• We thoroughly analyzed the root cause of the discovered side
channels and developed powerful DNS cache poisoning attacks
based on that.
• We measured their impact in the real world and proposed corre-
probes to scan UDP ephemeral ports.
sponding mitigations.
2 BACKGROUND
In this section, we will introduce the necessary background re-
garding the two types of UDP ephemeral ports that an attacker
would want to scan to conduct the DNS cache poisoning attack. We
will then introduce the ICMP messages that interact with UDP in
interesting ways.
2.1 Public-facing and Private-facing UDP Ports
Traditionally, port scans refer to scanning server ports as the inten-
tion is to infer which services are running. However, in the context
of DNS cache poisoning attacks, the goal is to scan ephemeral
ports instead (more details are provided in §3). Interestingly, as
well summarized in [45], unlike TCP, UDP ephemeral ports can
be further divided into two types: (1) public-facing and (2) private-
facing. This is due to the stateless nature of UDP, as stated in RFC
8085 [41]. Specifically, if a client sends a UDP packet by invoking
sendto() with a specific remote IP as an argument, the client OS
will in fact accept packets from “any IPs” when it subsequently
invokes recvfrom(). Therefore, by default, any UDP ephemeral
port will become public-facing. Only if the client explicitly invokes
connect() will the OS reject packets from all but the one “con-
nected” remote IP [41]. This effectively makes the ephemeral port
private-facing.
As shown in the prior work [45], public-facing ephemeral ports
are generally easier to scan. Interestingly, whether an ephemeral
port is public-facing also has ramifications with regard to the new
side channels we identify. We will describe them later in §4.4.
2.2 ICMP Messages and Impact on UDP
As first introduced in RFC 792 [48], ICMP is a diagnostic protocol
used to signal errors during the delivery of IP packets. This can
happen, for example, when a router discards the packet and return
an ICMP TTL expired message back to the source after it detects
that the TTL of the forwarded packets reaches zero. To allow the
source to distinguish which packets have encountered errors, a
partial copy of the packet is embedded in the ICMP message, which
includes the source and destination address, source and destina-
tion port. According to recent RFCs [27], the source should accept
such messages only if the wrapped four-tuple matches an existing
socket. Upon validating the correctness of such an ICMP message,
depending on the nature of the error and the socket options set
by the application, the source may ignore the error, remedy the
situation by taking actions in the OS kernel (e.g., updating routing
entries) and/or reporting the error to the application layer through
the socket interface.
Below we describe a few relevant ICMP message types that have
interesting interactions with UDP:
• Fragment Needed Such messages are typically sent by a router
to signal the source that the size of its packet has exceeded the
MTU of the next hop [4, 47]. Specifically, they are called “frag-
mentation needed and DF set” or “packet too big” for IPv4 and
IPv6 respectively. The desired MTU is included in the message
so that the source OS can take actions, e.g., updating its PMTU
cache for the corresponding destination, and reducing the size
of all future packets with the same destination address.
• Redirect Redirect messages [48, 56] are usually sent back to
the source by the next-hop router (e.g., gateway) to signal a
shorter route to a destination. After the source receives such
a message, it will update its routing table and route all future
packets to that destination through the new gateway, which is
specified in the redirect packet. This message is only supposed to
be sent by the gateway, and therefore, the OS of the source usually
checks the source IP of the ICMP message before accepting the
redirection [56].
• Host/Port Unreachable Such messages are used to signal the
source that the original packet was sent to the wrong host or port
and thus cannot be delivered [4, 48]. According to RFCs [4, 12],
upon receiving such messages, the OS must notify the application
as long as a socket is found based on the embedded four-tuple in
the ICMP message.
Figure 1: DNS Hierarchy
3 THREAT MODEL AND WORKFLOW
In this section, we will describe the general threat model used in
DNS cache poisoning attacks.
DNS Hierarchy and Attack Targets. Figure 1 shows a typical
DNS Hierarchy. The stub resolver (usually provided by OS) runs
on an individual client and acts as a proxy—it only forwards the
query to the upstream DNS server without resolving the query
itself. The sole purpose of the stub resolver is to provide the local
cache to speed up DNS queries from the same host. In the next layer
up, DNS forwarders are also caching proxies—common in home
and business gateways (e.g., Wi-Fi router) [6, 40, 54], but they serve
multiple clients in a LAN. At the highest layer, DNS resolvers finally
perform the real name resolution task by recursively consulting
the name servers, where the actual DNS records are stored. Re-
solvers are usually operated by ISPs or tech companies (e.g., 8.8.8.8
operated by Google) and generally serve many more clients. As
a result, DNS resolvers are the most prolific and impactful attack
Stub ResolverForwarderResolverAuthoritativeName Server= CacheSession 12C: Traffic Analysis and Side Channels CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3401targets. Furthermore, some resolvers, e.g., those offered by Google
and Cloudflare, are even open to the public and are accessible by
everyone, making them more accessible to attackers as well.
Nevertheless, since stub resolvers, forwarders and resolvers are
all equipped with DNS caches, they are all potentially subject to
DNS cache poisoning attacks. [9, 32, 59] proposed the cache poi-
soning attacks that only work against DNS forwarders instead of
resolvers, because they exploited the unique position or design
goals of the forwarder. Specifically, [9, 32] assume the attacker is
under the same NAT gateway as the forwarder, however However,
resolvers are not usually behind NAT. [59] is based on the fact that
the forwarders rely on the resolvers to perform the bailiwick check
and thus become vulnerable. To our knowledge, there are only
two practical attacks [33, 45] that can work against the resolver
in the past decade and SADDNS [45] is the only one using side
channels to launch poisoning attacks (which no longer works as
the vulnerability is already patched). In this paper, we will intro-
duce novel side-channel-based cache poisoning attacks that affect
all DNS servers in the hierarchy. Our discussion focuses on DNS
forwarders and resolvers.
Assumptions. Generally, an attacker needs two main capabilities
to launch the attack:
(1) The ability to trigger one or more queries from the target
DNS server (forwarder or resolver). This is trivially satisfiable if the
DNS server is publicly accessible. In practice, there are hundreds of
thousands of them (see §5.2), including the popular ones such as
1.1.1.1 and 8.8.8.8. If the DNS server is private, the attacker would
need to join the network directly or indirectly. For example, there
are various open networks in coffee shops and airports which allow
an attacker to easily join. It is also possible that an attacker can
trick a victim client in a private network to visit a malicious website
where malicious scripts can execute and trigger DNS queries.
(2) The ability to send packets with spoofed IP addresses. This
is because the goal of the attack is to inject malicious records to
either the forwarder or resolver, and such rogue responses have to
come from a host that they contacted before, i.e., either the resolver
or the name server. This requirement is also not difficult to satisfy.
As shown in a 2019 report [44], there are still 30.5% and 32.1% of
ASes in the world that do not block packets with spoofed source
IPv4 and IPv6 addresses respectively, which renders the attack still
feasible today.
Workflow. Taking the resolver attack as an example, the attacker
is off-path, i.e., unable to modify or eavesdrop on the traffic between
the resolver and the name server. The first step of the attack is to
turn the resolver into a state where it is willing to accept responses
from the name server. This can be achieved by simply sending
a query to the resolver. After that, the attacker tries to forge a
response packet and send it back to the victim resolver to poison
the cache. However, in order for the rogue response to be accepted
by a modern DNS resolver, several things have to match (there are
additional defenses that may be optionally and rarely deployed as
we will discuss in §8.3): (1) The source IP of the response should be
the name server. Since the attacker controls the domain name in the
query, the corresponding name server can be easily looked up ahead
of time. (2) The 16-bit destination port number in the response has
to match the ephemeral port that is typically randomly generated