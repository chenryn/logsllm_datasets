commit block 𝐵 by epoch 𝑒.
(i)
17
Session 12D: Decentralized Cryptographic Protocols CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3518Leader validity: all the honest nodes have a block in Q(𝐿𝑒).
(ii)
(iii) Output consistency: all the honest nodes output the same
randomness 𝑅𝑒, output O𝑒, and
leader for epoch 𝑒 + 1.
(iv) Leader consistency: all the honest nodes choose the same
Proof. We prove the theorem by induction on epochs.
Base case for epoch 𝑒 = 1 to 𝑒 = 𝑡 + 1. (ii) should hold for the first
𝑡 + 1 leaders because we fill Q(𝑝𝑖) with 𝑚 = 1 values for all nodes
𝑝𝑖 ∈ P during the setup phase. Additionally, from Definition 4.1,
no leaders repeat in the first 𝑡 + 1 epochs, thereby proving (ii) for
the base case. (iii) and (iv) hold since the first 𝑡 + 1 outputs only
use the seed values, and pre-agreed upon shares from Q from the
setup phase. At epoch 𝑒 = 𝑡 + 1, from the proof for (iv) for the
base cases, we know that all nodes agree on the leaders for epochs
1 ≤ 𝑒′ ≤ 𝑡 + 1. Therefore, if some honest node commits block 𝐵1
from epoch 𝑒 = 1, then all honest nodes will commit 𝐵1 by epoch
𝑒 = 𝑡 + 1, because at least one leader in some epoch 1 ≤ 𝑒′ ≤ 𝑡 + 1
must be honest, and from Fact B.6 all honest nodes commit the
block proposed in 𝑒′ and therefore directly or indirectly commit 𝐵1.
Therefore, by epoch 𝑒 = 𝑡 + 1 all honest nodes commit 𝐵1, thereby
proving (i) for the base cases.
Induction hypothesis. The statements hold until epoch 𝑒 − 1.
Induction step. Proof for (i). From the induction hypothesis for
(iv), we have that all the leaders until epoch 𝑒 are consistent and
at epoch 𝑒 − 1, and from the induction hypothesis for (i) all honest
nodes would have committed all the blocks for epoch 𝑒′ < 𝑒 − 1 − 𝑡
by consistent leaders up to epoch 𝑒 − 1. Now, at epoch 𝑒 all honest
nodes need to decide on the block 𝐵 proposed in epoch 𝑒 − 𝑡 − 1. In
epochs 𝑒 − 𝑡 − 1 ≤ 𝑒′ < 𝑒, there is one epoch 𝑒′ whose leader 𝐿𝑒′ is
honest, from Fact B.6, all honest nodes commit 𝐵 in epoch 𝑒′, thus
proving the hypothesis for (i).
Proof for (ii). By the induction hypothesis for (iv), the leader of
epoch 𝑒 and all previous epochs is agreed upon. Let 𝐿𝑒 be the leader
for epoch 𝑒. Then 𝐿𝑒 must have committed a block in some epoch
< 𝑒 − 𝑡, or during the setup. If 𝐿𝑒 was never the leader, then the
hypothesis (ii) is trivially satisfied. Let 𝑒′ < 𝑒 − 𝑡 be the latest epoch
in which 𝐿𝑒 was the leader last. If 𝐿𝑒 proposed a block in some
epoch 𝑒′ < 𝑒 − 𝑓 , then from the proof for (i) for epoch 𝑒, all nodes
agree on the same block for epoch 𝑒′. If no block proposed in epoch
𝑒′ is added to the chain by epoch 𝑒′ + 𝑡 < 𝑒 , then from our leader
selection rule (in Definition 4.1), no honest node will derive 𝐿𝑒 as
the leader as 𝐿𝑒 ∈ P𝑟 . Therefore, (ii) also holds for epoch 𝑒.
Proof for (iii). The randomness 𝑅𝑒 depends on choosing a commit-
ted value to be reconstructed. The output O𝑒 depends on 𝑅𝑒 and
{O𝑒−1, . . . , O𝑒−𝑡}. By the induction hypothesis for (iii), all honest
nodes agree on O𝑒−1, . . . , O𝑒−𝑓 . Moreover, by the induction hypoth-
esis for (iv), they also choose the same leader 𝐿𝑒 for epoch 𝑒. Thus,
if we can prove that all honest nodes agree upon the value from 𝐿𝑒
that is reconstructed in epoch 𝑒, then agreement on O𝑒 is trivial.
From the proof of (i) and (ii), we know that there is a block 𝑏ℎ that is
enqueued in the queue Q(𝐿𝑒) for 𝐿𝑒, which all honest nodes agree
on, and therefore obtain the same 𝑅𝑒 for epoch 𝑒. Thus, (iii) holds
true for epoch 𝑒.
Proof for (iv). The leader derivation depends on the candidate set
L𝑒, outputs of the last 𝑡 iterations {O𝑒−1, . . . , O𝑒−𝑡}, and the recon-
structed randomness 𝑅𝑒 in epoch 𝑒. By the induction hypothesis
for (iv), and proof of (iii), the output of the last 𝑓 iterations and
that of epoch 𝑒 is agreed upon. From the proof of (i), (ii), and the
induction hypothesis for (iv), all honest nodes have the same L𝐿𝑎𝑠𝑡
and P𝑟 . From (iii), all honest nodes derive the same leader for epoch
𝑒 + 1.
□
Theorem B.10 (Secure PVSS). Assuming a secure PVSS scheme
PVSS, the GRandPiper protocol is a secure publicly verifiable secret
sharing protocol with the dealer as the leader of an epoch, and the
rest of the nodes as the verifiers.
(2) Guessing the secret. The probability of an adversary winning
(1) Breaking the underlying PVSS scheme PVSS. Since PVSS
Proof Sketch. We already know that our SMR is secure against
a 𝑡-bounded adversary assuming a secure digital signature scheme,
𝑞-SDH and a random oracle 𝐻. Given a secure suite of algorithms
in PVSS, on a high level we do not reveal any new information.
To formally prove it, consider the view 𝑉𝑖 of any honest node 𝑝𝑖.
:= (PVSS.(cid:174)𝐸, PVSS.pk𝑖, PVSS.𝜋). In the underlying
It observes 𝑉𝑖
PVSS scheme PVSS, the view of a node is also 𝑉𝑖. An adversary A
that can successfully violate the secrecy property from GRandPiper
can do so by:
satisfies Definition 2.5, this can occur with negl(𝜅) probability.
this way is negl(𝜅).
Correctness. Let 𝐿𝑒 be an honest leader for epoch 𝑒. Then its pro-
posed block that shares 𝑅𝑒 is always committed (from Fact B.6).
Thus when the secret is reconstructed in the beacon protocol (Fig-
ure 4) all the honest nodes will output 𝑅𝑒 with a high probability
of 1 − negl(𝜅) (from the underlying PVSS algorithm).
Commitment. If 𝐿𝑒 is Byzantine, then either all the honest nodes
commit to one of the blocks 𝐵ℎ proposed, or ⊥ by epoch 𝑒 + 𝑡 + 1.
Therefore, the commitment property is satisfied by our protocol.
From the underlying scheme PVSS, there is a negligible probability
negl(𝜅) for two correct nodes 𝑝𝑖 and 𝑝 𝑗 to output different 𝑠∗
𝑖 ≠
𝑠∗
𝑗 ≠ ⊥.
(Public) Verifiability. This property holds true with high probability
from the underlying PVSS scheme PVSS as the views are identical.
The probability is over the choice of randomness for the verifier. □
Concrete instantiations. Consider instantiating GRandPiper us-
ing SCRAPE [17]. We can show a reduction from an adversary
breaking the IND1-secrecy [31] property in GRandPiper into an
adversary that can break the secrecy property from SCRAPE (which
in turn shows a reduction to DDH or DBS assumptions [17, Sec.3,
Sec.4]). In the simulation, since the adversary is static, pick ran-
dom public keys for the 𝑛 − 𝑡 honest nodes, and use A to run an
instance of GRandPiper using the input secrets. When A wins, we
can directly break the IND1-Secrecy property.
Remark. There are no known adaptively secure PVSS protocols.
It is not the case that there are attacks on existing PVSS schemes
when assuming an adaptive adversary, it is just that the existing
proof techniques fail to show security against adaptive adversaries.
Lemma B.11 (Rushing Adversary Advantage). For any epoch 𝑒 ≥ 1,
a rushing adversary can reconstruct output O𝑒 at most 2Δ time before
the honest nodes.
Proof. An honest node sends its secret shares in epoch 𝑒 when
its epoch-timer𝑒−1 expires. Let node 𝑝𝑖 be the earliest honest node
18
Session 12D: Decentralized Cryptographic Protocols CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3519whose epoch-timer𝑒−1 expires and node 𝑝𝑖 sends its secret share at
time 𝜏. A rushing adversary may instantaneously receive the share
and reconstruct the output 𝑂𝑒 at time 𝜏.
Due to the Δ delay among the honest nodes entering epoch 𝑒,
the other honest nodes may send their secret shares only at time
𝜏 + Δ which arrives at all the honest nodes by time 𝜏 + 2Δ. In the
worst case, the honest nodes can reconstruct only at time 𝜏 + 2Δ.
Thus, a rushing adversary can reconstruct output O𝑒 at most 2Δ
time before honest nodes.
□
Lemma B.12 (Guaranteed Beacon Output). For any epoch 𝑒 ≥ 1,
all the honest nodes output a new beacon output O𝑒.
Proof. By Theorem B.9 part (iv), all the honest nodes have
consistent leaders. Let node 𝑝𝑖 be the leader of epoch 𝑒. The honest
nodes output a new beacon output in each epoch 𝑒 if Q(𝑝𝑖) ≠ ⊥.
Suppose for the sake of contradiction Q(𝑝𝑖) = ⊥ in epoch 𝑒. Observe
that nodes update Q(𝑝𝑖) with secret proposed in epoch 𝑒′ (with
𝑒′ < 𝑒 − 𝑡) when 𝑝𝑖 was an epoch leader in epoch 𝑒′ by epoch 𝑒
and node 𝑝𝑖 did not propose any secrets in epoch 𝑒′. However, if
𝑝𝑖 did not propose in epoch 𝑒′, 𝑝𝑖 would have been removed from
the candidate leader set for epoch 𝑒 and would not be epoch leader
for epoch 𝑒 and honest nodes would not use Q(𝑝𝑖) in epoch 𝑒. A
contradiction. Thus, all the honest nodes send shares for secret
shared in Q(𝑝𝑖) and all the honest nodes will receive 𝑡 + 1 valid
shares to reconstruct a common randomness 𝑅𝑒 and output O𝑒. □
Lemma B.13 (Bias-Resistance). For any epoch 𝑒 ≥ 1, the probability
that a 𝑡 bounded adversary A can fix any 𝑐 bits of the GRandPiper
beacon output O𝑒 is negl(𝑐) + negl(𝜅).
Proof Sketch. The output in any epoch 𝑒 is O𝑒 which is the
hash 𝐻(𝑅𝑒, O𝑒−1, . . . , O𝑒−𝑡). Assume that some static adversary
A wants to bias 𝑐 bits of O𝑒. Now there is at least one honest
leader in epoch 𝑒′ where 𝑒 − 𝑡 ≤ 𝑒′ ≤ 𝑒. WLOG, assume that the
leader at epoch 𝑒′ = 𝑒 − 𝑡 is honest. Then the output of epoch 𝑒′ is
known only in epoch 𝑒′ within 2Δ time of entering the epoch 𝑒′
(from Lemma B.12). Therefore, a rushing adversary A can know
the O𝑒′ at max 2Δ before an honest node enters epoch 𝑒′ (from
Lemma B.11). But the adversary has to choose all 𝑅𝑒′′ before epoch
𝑒′, where 𝑒 − 𝑡 < 𝑒′′ ≤ 𝑒, so that it can bias O𝑒. But all blocks
containing 𝑅𝑒′′ are committed before the epoch 𝑒′, since 𝑅𝑒′′ comes
from the blocks previously proposed by the leaders before epoch
𝑒′ at the start (or during the setup). Thus all blocks containing
𝑅𝑒′′ are proposed before observing 𝑅𝑒′, which is guaranteed to be
secret for a honest node against A (from the secrecy property of
Theorem B.10) except with negligible probability negl(𝜅). Thus,
an adversary A can do no better than negl(𝑐) + negl(𝜅) to fix 𝑐
bits.
□
Lemma B.14 (GRandPiper unpredictability). Assuming a secure
PVSS scheme PVSS and SMR protocol, the GRandPiper random beacon
protocol is an 𝑂(min(𝜅, 𝑡))-absolute unpredictable random beacon
protocol against a static adversary.
Proof Sketch. Since the leaders are chosen using the beacon
outputs, the probability that the adversary’s nodes are chosen in
an epoch 𝑒 is 𝑡/𝑛 < 1/2. The probability that 𝑐 consecutive leaders
(cid:1)/(𝑛 − 𝑡)𝑐 < 2−𝑐 for 3 < 𝑐 < 𝑡 and is
are Byzantine is therefore(cid:0)𝑡
𝑐
exponentially decreasing in 𝑐. The expected value of 𝑐 is ⌈log 2⌉ = 2.
If 𝑐 = 𝑡 + 1, the probability is already negl(𝜅) (from the probability
of breaking secrecy of secrets shared by honest nodes). Thus, for
a given security parameter 𝜅, a static adversary cannot predict
the output with better than negl(𝜅) probability in min(𝜅, 𝑡) + 1
epochs.
□
Theorem B.15 (GRandPiper secure random beacon). GRand-
Piper protocol is a 𝑂(min(𝜅, 𝑡))-secure random beacon protocol as-
suming a static adversary.
Proof. The proof follows from Lemma B.13 for bias-resistance,
Lemma B.12 for guaranteed output delivery, and Lemma B.14 for
unpredictability.
□
B.3 BRandPiper Security Analysis
Theorem B.16 (Security of iVSS). The verifiable secret sharing
scheme proposed in Figure 6 is a secure verifiable secret sharing scheme
assuming a bulletin board.
Proof Sketch. Consider any secure VSS scheme VSS. The view
𝑉𝑖 of an honest node is 𝑉𝑖 := (VSS.C, VSS.s𝑖, VSS.𝜋𝑖) to every node
𝑝𝑖 in both VSS and the iVSS protocol. Any 𝑡-bounded adversary
with access to 𝑡 views in both the protocols, has an equal probability
of extracting the secret. The case where the adversary forges the
digital signatures to obtain 𝑡+1 acks, which happens with negligible
probability, is an extra case to consider for the commitment and
correctness properties.
Formally, assume a secure VSS scheme satisfying Definition 2.4.
Secrecy: If the dealer 𝐿 is honest, then no honest node will blame
and the maximum number of blames is at most 𝑡. Thus, only up to
𝑡 blames will be opened privately by the leader. Therefore, the view
𝑉𝑇 of an adversary corrupting 𝑇 ⊂ [𝑛] nodes with |𝑇 | ≤ 𝑡 has the
same view in both the protocols.
Correctness: If the dealer 𝐿 is honest, then all honest nodes have
their shares for the secret 𝑠, and similar to eVSS, will output the
same secret 𝑠 except with negl(𝜅) probability, where the probability
is over forging digital signatures.
Commitment: If an ack certificate is formed, irrespective of the
leader being honest or Byzantine, at least one honest node has not
observed ≥ 𝑡 + 1 blames, and has received valid shares for every