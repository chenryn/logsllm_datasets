title:Verifying Web Applications Using Bounded Model Checking
author:Yao-Wen Huang and
Fang Yu and
Christian Hang and
Chung-Hung Tsai and
D. T. Lee and
Sy-Yen Kuo
Verifying Web Applications Using Bounded Model Checking* 
Yao-Wen Huang12, Fang Yu2, Christian Hang3, Chung-Hung Tsai1, D. T. Lee12, Sy-Yen Kuo1 †
1Department of Electrical Engineering,
2Institute of Information Science, 
National Taiwan University, 
Taipei 106, Taiwan. 
PI:EMAIL
Academia Sinica, 
Taipei 115, Taiwan 
{ywhuang,yuf,dtlee}@iis.sinica.edu.tw
3LuFG Informatik II, 
RWTH Aachen, Ahornstr, 
55, 52074 Aachen, Germany 
PI:EMAIL
Abstract
The  authors  describe  the  use  of  bounded  model 
checking  (BMC)  for  verifying  Web  application  code. 
Vulnerable  sections  of  code  are  patched  automatically 
with  runtime  guards,  allowing  both  verification  and 
assurance  to  occur  without  user  intervention.  Model 
checking  techniques  are  relatively  complex  compared  to 
the  typestate-based  polynomial-time  algorithm  (TS)  we 
adopted  in  an  earlier  paper,  but  they  offer  three 
benefits—they  provide  counterexamples,  more  precise 
models,  and  sound  and  complete  verification.  Compared 
to conventional model checking techniques, BMC offers a 
more  practical  approach 
to  verifying  programs 
containing large numbers of variables, but requires fixed 
program  diameters  to  be  complete.  Formalizing  Web 
application  vulnerabilities  as  a  secure  information  flow 
problem with fixed diameter allows for BMC application 
without 
BMC-produced 
counterexamples, errors that result from propagations of 
the  same  initial  error  can  be  reported  as  a  single  group 
rather than individually. This offers two distinct benefits. 
First, together with the counterexamples themselves, they 
allow  for  more  descriptive  and  precise  error  reports. 
Second,  it  allows  for  automated  patching  at  locations 
where  errors  are  initially  introduced  rather  than  at 
locations  where  the  propagated  errors  cause  problems. 
Results from a TS-BMC comparison test using 230 open-
source  Web  applications  showed  a  41.0%  decrease  in 
runtime instrumentations when BMC was used. In the 38 
vulnerable  projects  identified  by  TS,  BMC  classified  the 
TS-reported  980  individual  errors  into  578  groups,  with 
each group requiring a minimal set of patches for repair. 
drawback. 
Using 
1. Introduction
As World Wide Web usage expands to cover a greater 
number of B2B (business-to-business), B2C (business-to-
————————————————
†   Corresponding author: Sy-Yen Kuo. Email: PI:EMAIL 
Tel: +886-2-2363-5251 ext 444. Fax: +886-2-2367-1909. 
*  This research was supported in part by the National Science Council,  
Taiwan under grants NSC 92-2213-E-002-011, NSC-93-2422-H-001-
0001, and NSC-92-2213-E-001-024.
increasingly 
client),  healthcare,  and  e-government  services, 
the 
reliability  and  security  of  Web  applications  has  become 
an 
important  concern.  A  number  of 
deployment-phase  mechanisms  have 
recently  been 
examined as a means of assuring the quality attributes of 
Web  applications.  One  widely-adopted  approach 
to 
maintaining reliability is applying replication strategies to 
existing  Web  applications—that  is,  enhancing  them  with 
fault-tolerance  features  [28].  To  assure  security  for 
existing Web applications, Scott and Sharp [24] proposed 
using  gateways  that  filter  invalid  and  malicious  input  at 
the  application  level.  A  primary  advantage  of  these  two 
deployment-phase  mechanisms  is  their  ability  to  provide 
immediate assurance of Web application quality, but their 
main  drawback  is  that  they  blindly  protect  against 
unpredicted  behavior  without  investigating  the  actual 
defects that compromise quality.
To  assess  Web  application  quality,  Merzbacher  and 
Patterson  [18]  created  a  Web  application  reliability 
assessment  mechanism  based  on  user-experience 
modeling,  and  Huang  et  al.  [13]  designed  a  similar 
security  assessment  framework  that  combined  user-
behavior simulation with user-experience modeling. Both 
efforts  serve  as  examples  of  black-box  testing.  When 
compared  with  deployment-phase  protection  techniques, 
these  approaches  emphasize  assessment  over  blind 
assurance,  thus  allowing  for  software  improvements. 
However,  they  have  at  least  two  disadvantages:  they  do 
not provide immediate quality assurance, and they cannot 
guarantee  the  identification  of  all  flaws.  Providing  a 
sound  guarantee  requires  the  formalization  of  Web 
application bugs and the application of formal verification 
techniques.
We recently used a combination of static and runtime 
techniques  to  create  a  holistic  approach  to  ensuring  Web 
application quality [14]. The tool that resulted—which we 
named WebSSARI  (Web  application  Security  via  Static 
Analysis and Runtime Inspection)—aimed to a) statically 
verify  existing  Web  application  code  without  any 
additional  annotation  effort;  and  b)  automatically  protect 
potentially defective sections of code after verification. In 
the project, we formalized Web application vulnerabilities 
as  a  secure  information  flow  problem,  and  based  our 
verification  algorithm  (TS)  on  Strom  and  Yemini’s 
typestate  [26]—a  compile-time  technique  for  verifying 
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:49:16 UTC from IEEE Xplore.  Restrictions apply. 
and 
[22], 
availability 
program  reliability.  In  many  cases,  formal  verification 
algorithms  for  reliability  and  security  verify  similar  or 
identical  sets  of  program  characteristics.  Strom  and 
typestate  enhances  program  reliability  by 
Yemini’s 
detecting 
(at  compile-time)  syntactically 
legal  but 
semantically undefined execution sequences that can lead 
to  unpredictable  behavior.  Two  examples  that  they  give 
are  reading  variables  before  they  are  initialized  and 
dereferencing  pointers  after  their  corresponding  dynamic 
objects  are  already  deallocated.  In  information  security, 
the  primary  objectives  are  to  protect  confidentiality, 
integrity, 
and  null-pointer 
dereferences  are  viewed  as  major  causes  for  denial-of-
service  vulnerabilities 
that  compromise  availability. 
Furthermore,  Strom  and  Yemini’s  typestate  essentially 
allows  for  flow-sensitive  tracking  of  program  variable 
states—that  is,  for  each  appearance  of  a  variable  at  a 
program  point,  it  determines  the  subset  of  allowable 
operations in that specific context. This directly addresses 
the  problem  of  secure  information  flow  discussed  in 
Section  2.3.  In  this  project,  we  base  our  verification  on 
BMC,  which  allows  for  precise  compile-time  estimation 
of runtime state and thus offers significant improvements 
over TS. For our experimental tests, we decided to verify 
security  vulnerabilities  rather  than  reliability  attributes, 
although  in  practice  our  method  can  be  used  for  both 
purposes.
identified 
WebSSARI  automatically  inserts  runtime  guards  in 
potentially insecure sections of code, meaning that a piece 
of  Web  application  code  will  be  secured  immediately 
after  WebSSARI  processing  even  in  the  absence  of 
programmer  intervention.  However,  since  our  initial 
typestate-based  (TS)  algorithm  sacrificed  accuracy  for 
speed,  it  only  identified  program  points  that  violated 
safety  policies,  and  was  not  capable  of  providing 
traces.  We 
counterexample 
two  major 
drawbacks from this deficiency:
1. Runtime guards were inserted at program points where 
safety  violations  might  have  occurred  (symptoms)  rather 
than  at  points  that  induced  errors  (causes  [2]).  Our 
security  policy  stated  that  tainted  data  could  not  be  used 
as arguments for calling sensitive functions. Using our TS 
algorithm  meant  that  runtime  guards  were  inserted  at 
potentially vulnerable function call sites, with the guards 
sanitizing  the  tainted  variables  before  they  were  used  as 
arguments to call sensitive functions. However, following 
an  initial  induction,  a  single  piece  of  tainted  data  was 
capable  of 
snowballing  process  of 
propagation and tainting of other data, with the number of 
tainted  variables  growing  exponentially  as  the  program 
executed.  Without  counterexamples,  we  had  to  insert  a 
sanitization  routine  for  each  instance  of  variable  usage 
error.  A  more  efficient  strategy  would  be  to  use  an 
algorithm  capable  of  giving  counterexample  traces  to 
identify the point where the tainting process begins and to 
sanitize the data before it propagates.
triggering  a 
2.  It  is  very  difficult  for  a  programmer  to  validate  a 
reported  error,  since  any  tainting  path  can  potentially 
spread  to  numerous  function  calls.  According  to  our 
initial  experiments, 
reduces 
WebSSARI’s potential for practical use. It took two of us 
four days to manually verify all reported vulnerabilities—
a  labor-intensive  task  that  canceled  the  benefits  resulting 
from the tool’s automated features. 
this  drawback 
largely 
A  simple  strategy  for  creating  counterexample  traces 
is  to  adopt  model  checking  techniques,  but  they  are 
considered  very  expensive  in  terms  of  both  time  and 
space  complexities.  BMC  offers  a  more  practical 
approach to verifying programs containing large numbers 
of  variables,  but  requires  fixed  program  diameters  to  be 
complete  [16].  Since  we  formalize  Web  application 
vulnerabilities as a secure information flow problem with 
fixed diameter, our BMC provides a sound and complete 
verification  mechanism 
offering 
counterexamples. Furthermore, since it utilizes zChaff [19] 
(an  efficient  SAT  solver  that  has  been  used  with  many 
industrial  projects),  it  also  benefits  from  zChaff’s  many 
optimization techniques. 
capable 
of 
potential 
the  counterexample 
In  this  paper  we  showed  how  automated  Web 
application  safety  verification  and  assurance  can  benefit 
from 
traces,  completeness,  and 
soundness  associated  with  a  BMC-based  approach. 
Counterexamples  and  completeness  allow  for  more 
detailed and informative error reports, thus enhancing the 
practical 
of  WebSSARI.  Furthermore, 
counterexamples  allow  for  more  precise  identification  of 
locations that require repair, which increases the precision 
of both the error report generation and the runtime guard 
instrumentation  processes.  Completeness  and  precise 
instrumentations 
in  reduced  runtime 
overhead. Soundness guarantees the absence of bugs. 
We  previously  tested  our  TS  algorithm  against  230  real-
world  Web 
from 
SourceForge.net;  69  were  identified  as  having  defective 
code.  After  notifying  the  developers,  we  received  38 
acknowledgements  and  promises  of  patches.  For  the 
present project, we implemented a BMC with zChaff [19] 
(a mature SAT solver) and tested it against the same 230 
projects  (consisting  of  1,140,091  statements).  The  BMC-
based approach reduced the number of effective insertions 
by 41.0% compared to our TS-based results. 
together  result 
downloaded 
applications 
2. Web Application Vulnerabilities 
As most Web application vulnerabilities arise from the 
use of untrusted data without sanitization, it is possible to 
provide  an  automated  patch  by  inserting  sanitization 
routines  at  necessary  program 
locations.  A  major 
contribution  of  this  paper  lies  in  using  counterexample 
traces  to  reduce  the  number  of  inserted  sanitization 
routines. To make clear how this strategy works, we must 
first  describe  how  Web  application  vulnerabilities  arise 
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:49:16 UTC from IEEE Xplore.  Restrictions apply. 
and how we formalize it. Since we will only provide brief 
descriptions of the most widely exploited vulnerability—
script  injection—readers  are  referred  to  Scott  and  Sharp 
[24],  Curphey  et  al.  [10],  OWASP  (Curphey  et  al.)  [20] 
[10], and Meier et al. [17] for more details.
construct  SQL  commands,  resulting  in  the  execution  of 
arbitrary  SQL  commands  given  by  an  attacker.  The 
example below is based on a vulnerability we discovered 
in ILIAS  Open  Source,  a  popular  Web-based  learning 
management system. 
2.1. Cross-Site Scripting (XSS) 
One severe type of XSS involves the uploading of data 
by a user, which is then stored for later delivery by a Web 
application  without  performing  any  type  of  sanitization. 
Consider  the  following  example:  a  commercial  online 
auction site hosts a ticket service for users to get support, 
report bugs, and submit feature requests. Messages posted 
by  users  are  submitted  to  a  server-side  script  that  inserts 
them  into  a  backend  database.  Support  tickets  and  bug 
reports  can  only  be  read  by  the  website’s  support 
personnel,  but  feature  requests  can  be  read  by  all  users. 
When  viewing  tickets,  a  request  is  sent  to  a  server-side 
script that retrieves corresponding data from the backend 
database and constructs HTML output. If a user submits a 
bug  report  (or  a  feature  request)  that  contains  a  piece  of 
malicious script, the script will be delivered to the support 
personnel  (or  other  users)  on  behalf  of  the  Web  server. 
This  grants  rights  that  the  script  normally  would  not 
receive.  Figure  1  presents  a  simplified  version  of  a 
vulnerability  that  our  WebSSARI  discovered  in  PHP
Support Tickets.
$query="INSERT INTO tickets_tickets(tickets_id, “. 
“tickets_username,tickets_subject, tickets_question) “. 
“VALUES(‘$_SESSION['username']’, ‘$_POST['ticketsubject'],’”. 
”’$_POST['message']’)";
$result = @mysql_query($query);
Figure 1. A XSS vulnerability found in PHP Support Tickets 
code for ticket submission. 
Note 
that  user 
input  values  “ticketsubject”  and 
“message”  have  been  inserted  into  the  database  without 
sanitization.  An  example  of  code  from  PHP  Support 
Tickets that uses the backend database to generate HTML 
output  for  displaying  tickets  is  shown  in  Figure  2.  Since 
the  value  “tickets_subject”  (containing  untrusted  data 
submitted  by  the  user)  is  used  without  sanitization  to 
construct HTML output, the code is vulnerable to XSS. 
$query="SELECT tickets_id, tickets_username,
tickets_subject FROM tickets_tickets"; 
$result = @mysql_query($query); 
WHILE ($row = @mysql_fetch_array($result)) { 
  extract($row); 
  echo"$tickets_username$tickets_subject"
}
Figure 2. Simplified code for displaying the tickets. 
2.2. SQL Injection 
Considered  more  severe  than  XSS,  SQL  injection 
vulnerabilities  occur  when  untrusted  values  are  used  to 
$sql="INSERT INTO track_temp VALUES('$HTTP_REFERER');"
mysql_query($sql);
Figure 3. A simplified SQL injection vulnerability found in 
ILIAS Open Source.
In Figure 3, $HTTP_REFERER (a global variable set 
by  the  Web  server  to  indicate  the  referrer  field  of  an 
HTTP  request)  is  used  to  construct  an  SQL  command. 
The  referrer  field  of  an  HTTP  request  is  an  untrusted 
value  given  by  the  HTTP  client;  an  attacker  can  set  the 
field to: 
');DROP TABLE ('users 
This will cause the code in Figure 3 to construct the $sql 
variable as:
INSERT INTO track_temp VALUES(''); 
DROP TABLE ('users');
Table  “users”  will  be  dropped  when  this  SQL 
command  is  executed.  This  technique,  which  allows  for 
the  arbitrary  manipulation  of  backend  database, 
is 
responsible for the majority of successful Web application 
attacks. During our experimentation with WebSSARI, we 
found  that  developers  who  acknowledged  that  variables 
from  HTTP  requests  should  not  be  trusted  tended  to 
forget that the same holds true for the referrer field, user 
cookies,  and  other  types  of  information  collected  from 
HTTP requests. 
2.3. Specifying Web Application Reliability and 
Security Policies 
According  to  our  examples,  compromises  in  integrity 
lead  to  compromises  in  confidentiality  and  availability. 
When  untrusted  data  is  used  to  construct  trusted  output 
without  sanitization,  violations  in  data  integrity  occur, 
leading  to  escalations  in  access  rights  that  result  in 
availability  and  confidentiality  compromises.  There  is  a 
clear  need  for  a  mechanism  that  specifies  and  enforces 
legal  information  flow  policies  within  Web  application 
programs.  This  can  be  achieved  by  assigning  a  “state” 
that  represents  a  variable’s  current  trust  level.  The 
challenge  is  to  design  a  compile-time  algorithm  that 
predicts  variable  runtime  states  at  each  program  point—
similar to the requirement for enforcing certain reliability 
policies. Strom and Yemini’s [26] typestate algorithm for 
enhancing  software  reliability  (i.e.,  checking  for  un-
initialized  variables  and  illegal  pointer  dereferences)  is 
one  example  of  an  algorithm  that  offers  compile-time 
tracking of variable states. 
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:49:16 UTC from IEEE Xplore.  Restrictions apply. 
3. Verification algorithm 
Most Web applications are written in script languages, 
including PHP, ASP, Perl, and Python [15]. We designed 
our  verification  algorithm  to  take  advantage  of  the 
imperative, deterministic, and sequential characteristics of 
these  programming  languages.  In  our  information  flow 
model,  we  associate  every  program  variable  x  with  a 
safety type tx, which represents the current safety level of 
x.  To  verify  a  program,  we  first  generate  an  abstract 
interpretation  (AI)  of  a  program  [9]  that  retains  the 
program’s  information  flow  properties.  We  then  use 
bounded  model  checking  to  verify  the  correctness  of  all 
possible safety states of the AI. 
3.1. Information Flow Model 
To  allow  for  arithmetic  on  variable  safety  types,  we 
followed  Denning’s  [12]  model  and  made  the  following 
assumptions:
1. Each variable is associated with a safety type. 
2. T = 
3. T  is  partially  ordered  by  (cid:100),  which  is  reflexive, 
(cid:87)is a finite set of safety types. 
(cid:87) (cid:87) (cid:87)(cid:34)
{ ,
1
}n
2
,
,
transitive, and antisymmetric. For 
(cid:87) (cid:87) (cid:143) ,
,1 2 T
 iff 
(cid:32)
(cid:87) (cid:87)
2
1
(cid:31)
 and 
(cid:100)
(cid:87) (cid:87)
2
1
(cid:100)
 iff 
,
2
(cid:100)
(cid:87) (cid:87)
1
(cid:122)
(cid:87) (cid:87)
1
2
(cid:87) (cid:87)
1
2
  and
4. (T, (cid:100))  forms  a  complete  lattice  with  a  lower  bound (cid:3704)
,  and  an  upper  bound  (cid:70) such
(cid:87) (cid:87)
1
2
 and 
(cid:100)(cid:3704)
(cid:87)
.
such  that 
T, (cid:87)
(cid:5) (cid:143)
that
T, (cid:87)
(cid:5) (cid:143)
(cid:100)(cid:70) .
(cid:87)
These  assumptions  imply  that  a  greatest  lower  bound 