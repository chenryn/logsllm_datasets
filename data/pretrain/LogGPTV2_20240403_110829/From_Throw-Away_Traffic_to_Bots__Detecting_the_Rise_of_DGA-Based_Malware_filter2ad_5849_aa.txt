title:From Throw-Away Traffic to Bots: Detecting the Rise of DGA-Based Malware
author:Manos Antonakakis and
Roberto Perdisci and
Yacin Nadji and
Nikolaos Vasiloglou and
Saeed Abu-Nimeh and
Wenke Lee and
David Dagon
From Throw-Away Trafﬁc to Bots:
Detecting the Rise of DGA-Based Malware
Manos Antonakakis‡,∗, Roberto Perdisci†,∗, Yacin Nadji∗,
Nikolaos Vasiloglou‡, Saeed Abu-Nimeh‡, Wenke Lee∗ and David Dagon∗
‡Damballa Inc., †University of Georgia
{manos,nvasil,sabunimeh}@damballa.com , PI:EMAIL
∗Georgia Institute of Technology
{yacin.nadji, wenke}@cc.gatech.edu, PI:EMAIL
Abstract
Many botnet detection systems employ a blacklist of
known command and control (C&C) domains to detect
bots and block their trafﬁc. Similar to signature-based
virus detection, such a botnet detection approach is static
because the blacklist is updated only after running an ex-
ternal (and often manual) process of domain discovery.
As a response, botmasters have begun employing domain
generation algorithms (DGAs) to dynamically produce a
large number of random domain names and select a small
subset for actual C&C use. That is, a C&C domain is ran-
domly generated and used for a very short period of time,
thus rendering detection approaches that rely on static
domain lists ineffective. Naturally, if we know how a do-
main generation algorithm works, we can generate the
domains ahead of time and still identify and block bot-
net C&C trafﬁc. The existing solutions are largely based
on reverse engineering of the bot malware executables,
which is not always feasible.
In this paper we present a new technique to detect ran-
domly generated domains without reversing. Our insight
is that most of the DGA-generated (random) domains
that a bot queries would result in Non-Existent Domain
(NXDomain) responses, and that bots from the same bot-
net (with the same DGA algorithm) would generate sim-
ilar NXDomain trafﬁc. Our approach uses a combination
of clustering and classiﬁcation algorithms. The cluster-
ing algorithm clusters domains based on the similarity in
the make-ups of domain names as well as the groups of
machines that queried these domains. The classiﬁcation
algorithm is used to assign the generated clusters to mod-
els of known DGAs. If a cluster cannot be assigned to a
known model, then a new model is produced, indicating
a new DGA variant or family. We implemented a pro-
totype system and evaluated it on real-world DNS trafﬁc
obtained from large ISPs in North America. We report
the discovery of twelve DGAs. Half of them are variants
of known (botnet) DGAs, and the other half are brand
new DGAs that have never been reported before.
1
Introduction
Botnets are groups of malware-compromised ma-
chines, or bots, that can be remotely controlled by an
attacker (the botmaster) through a command and control
(C&C) communication channel. Botnets have become
the main platform for cyber-criminals to send spam, steal
private information, host phishing web-pages, etc. Over
time, attackers have developed C&C channels with dif-
ferent network structures. Most botnets today rely on
a centralized C&C server, whereby bots query a prede-
ﬁned C&C domain name that resolves to the IP address
of the C&C server from which commands will be re-
ceived. Such centralized C&C structures suffer from the
single point of failure problem because if the C&C do-
main is identiﬁed and taken down, the botmaster loses
control over the entire botnet.
To overcome this limitation, attackers have used P2P-
based C&C structures in botnets such as Nugache [35],
Storm [38], and more recently Waledac [39], Zeus [2],
and Alureon (a.k.a. TDL4) [12]. While P2P botnets
provide a more robust C&C structure that is difﬁcult to
detect and take down, they are typically harder to imple-
ment and maintain. In an effort to combine the simplicity
of centralized C&Cs with the robustness of P2P-based
structures, attackers have recently developed a number
of botnets that locate their C&C server through automat-
ically generated pseudo-random domains names. In or-
der to contact the botmaster, each bot periodically exe-
cutes a domain generation algorithm (DGA) that, given
a random seed (e.g., the current date), produces a list of
candidate C&C domains. The bot then attempts to re-
solve these domain names by sending DNS queries un-
til one of the domains resolves to the IP address of a
C&C server. This strategy provides a remarkable level
of agility because even if one or more C&C domain
names or IP addresses are identiﬁed and taken down, the
bots will eventually get the IP address of the relocated
C&C server via DNS queries to the next set of automat-
ically generated domains. Notable examples of DGA-
based botnets (or DGA-bots, for short) are Bobax [33],
Kraken [29], Sinowal (a.k.a. Torpig) [34], Srizbi [30],
Conﬁcker-A/B [26], Conﬁcker-C [23] and Murofet [31].
A defender can attempt to reverse engineer the bot mal-
ware, particularly its DGA algorithm, to pre-compute
current and future candidate C&C domains in order to
detect, block, and even take down the botnet. However,
reverse engineering is not always feasible because the bot
malware can be updated very quickly (e.g., hourly) and
obfuscated (e.g., encrypted, and only decrypted and exe-
cuted by external triggers such as time).
In this paper, we propose a novel detection system,
called Pleiades, to identify DGA-based bots within a
monitored network without reverse engineering the bot
malware. Pleiades is placed “below” the local recursive
DNS (RDNS) server or at the edge of a network to mon-
itor DNS query/response messages from/to the machines
within the network. Speciﬁcally, Pleiades analyzes DNS
queries for domain names that result in Name Error re-
sponses [19], also called NXDOMAIN responses, i.e., do-
main names for which no IP addresses (or other resource
records) exist. In the remainder of this paper, we refer
to these domain names as NXDomains. The focus on
NXDomains is motivated by the fact that modern DGA-
bots tend to query large sets of domain names among
which relatively few successfully resolve to the IP ad-
dress of the C&C server. Therefore, to automatically
identify DGA domain names, Pleiades searches for rela-
tively large clusters of NXDomains that (i) have similar
syntactic features, and (ii) are queried by multiple po-
tentially compromised machines during a given epoch.
The intuition is that in a large network, like the ISP net-
work where we ran our experiments, multiple hosts may
be compromised with the same DGA-bots. Therefore,
each of these compromised assets will generate several
DNS queries resulting in NXDomains, and a subset of
these NXDomains will likely be queried by more than
one compromised machine. Pleiades is able to automat-
ically identify and ﬁlter out “accidental”, user-generated
NXDomains due to typos or mis-conﬁgurations. When
Pleiades ﬁnds a cluster of NXDomains, it applies statis-
tical learning techniques to build a model of the DGA.
This is used later to detect future compromised ma-
chines running the same DGA and to detect active do-
main names that “look similar” to NXDomains resulting
from the DGA and therefore probably point to the botnet
C&C server’s address.
Pleiades has the advantage of being able to discover
and model new DGAs without labor-intensive malware
reverse-engineering. This allows our system to detect
new DGA-bots before any sample of the related malware
family is captured and analyzed. Unlike previous work
on DNS trafﬁc analysis for detecting malware-related [4]
or malicious domains in general [3, 6], Pleiades lever-
ages throw-away trafﬁc (i.e., unsuccessful DNS resolu-
tions) to (1) discover the rise of new DGA-based botnets,
(2) accurately detect bot-compromised machines, and (3)
identify and block the active C&C domains queried by
the discovered DGA-bots. Pleiades achieves these goals
by monitoring the DNS trafﬁc in local networks, without
the need for a large-scale deployment of DNS analysis
tools required by prior work.
Furthermore, while botnet detection systems that fo-
cus on network ﬂow analysis [13, 36, 44, 46] or require
deep packet inspection [10, 14] may be capable of de-
tecting compromised machines within a local network,
they do not scale well to the overwhelming volume of
trafﬁc typical of large ISP environments. On the other
hand, Pleiades employs a lightweight DNS-based moni-
toring approach, and can detect DGA-based malware by
focusing on a small fraction of all DNS trafﬁc in an ISP
network. This allows Pleiades to scale well to very large
ISP networks, where we evaluated our prototype system.
This paper makes the following contributions:
• We propose Pleiades,
the ﬁrst DGA-based bot-
net identiﬁcation system that efﬁciently analyzes
streams of unsuccessful domain name resolutions,
or NXDomains, in large ISP networks to automati-
cally identify DGA-bots.
• We built a prototype implementation of Pleiades,
and evaluated its DGA identiﬁcation accuracy over
a large labeled dataset consisting of a mix of NX-
Domains generated by four different known DGA-
based botnets and NXDomains “accidentally” gen-
erated by typos or mis-conﬁgurations. Our experi-
ments demonstrate that Pleiades can accurately de-
tect DGA-bots.
• We deployed and evaluated our Pleiades prototype
in a large production ISP network for a period of 15
months. Our experiments discovered twelve new
DGA-based botnets and enumerated the compro-
mised machines. Half of these new DGAs have
never been reported before.
The remainder of the paper is organized as follows.
In Section 2 we discuss related work. We provide an
overview of Pleiades in Section 3. The DGA discovery
process is described in Section 4. Section 5 describes the
DGA classiﬁcation and C&C detection processes. We
elaborate on the properties of the datasets used and the
way we obtained the ground truth in Section 6. The ex-
perimental results are presented in Section 7 while we
discuss the limitations of our systems in Section 8. We
conclude the paper in Section 9.
2 Related Work
Dynamic domain generation has been used by mal-
ware to evade detection and complicate mitigation, e.g.,
Bobax, Kraken, Torpig, Srizbi, and Conﬁcker [26]. To
uncover the underlying domain generation algorithm
(DGA), researchers often need to reverse engineer the
bot binary. Such a task can be time consuming and re-
quires advanced reverse engineering skills [18].
The infamous Conﬁcker worm is one of the most ag-
gressive pieces of malware with respect to domain name
generation. The “C” variant of the worm generated
50,000 domains per day. However, Conﬁcker-C only
queried 500 of these domains every 24 hours. In older
variants of the worm, A and B, the worm cycled through
the list of domains every three and two hours, respec-
tively. In Conﬁcker-C, the length of the generated do-
mains was between four and ten characters, and the do-
mains were distributed across 110 TLDs [27].
Stone-Gross et al. [34] were the ﬁrst to report on do-
main ﬂuxing. In the past, malware used IP fast-ﬂuxing,
where a single domain name pointed to several IP ad-
dresses to avoid being taken down easily. However, in
domain ﬂuxing malware uses a domain generation al-
gorithm to generate several domain names, and then at-
tempt to communicate with a subset of them. The au-
thors also analyzed Torpig’s DGA and found that the
bot utilizes Twitter’s API. Speciﬁcally, it used the sec-
ond character of the most popular Twitter search and
generated a new domain every day.
It was updated to
use the second character of the 5th most popular Twitter
search. Srizbi [40] is another example of a bot that uti-
lizes a DGA by using unique magic number. Researchers
identiﬁed several unique magic numbers from multiple
copies of the bot. The magic number is XOR’ed with the
current date and a different set of domains is generated.
Only the characters “q w e r t y u i o p a s d f” are used
in the generated domain names.
Yadav et. al. proposed a technique to identify botnets
by ﬁnding randomly generated domain names [42], and
improvements that also include NXDomains and tempo-
ral correlation [43]. They evaluated their approaches by
automatically detecting Conﬁcker botnets in an ofﬂine
dataset from a Tier-1 ISP in South Asia in the ﬁrst paper,
and both the ISP dataset and a university’s DNS logs in
the second.
Villamarin-Salomon and Brustoloni [37] compared
two approaches to identify botnet C&Cs. In their ﬁrst
approach, they identiﬁed domains with high query rates
or domains that were temporally correlated. They used
Chebyshev’s inequality and Mahalanobis distance to
identify anomalous domains. In their second approach,
they analyzed recurring “dynamic” DNS replies with
NXDomain responses. Their experiments showed that
the ﬁrst approach was ineffective, as several legitimate
services use DNS with short time-to-live (TTL) values.
However, their second approach yielded better detection
and identiﬁed suspicious C&C domains.
Pleiades differs from the approaches described above
in the following ways. (A) Our work models ﬁve differ-
ent types of bot families including Conﬁcker, Murofet,
Sinowal, and Bobax. (B) We model these bot families us-
ing two clustering techniques. The ﬁrst utilizes the distri-
bution of the characters and 2-grams in the domain name.
The second relies on historical data that shows the rela-
tionship between hosts and domain names. (C) We build
a classiﬁcation model to predict the maliciousness of do-
mains that deviate from the two clustering techniques.
Unlike previous work, our approach does not require
active probing to maintain a fresh list of legitimate do-
mains. Our approach does not rely on external reputa-
tion databases (e.g., DNSBLs); instead, it only requires
access to local DNS query streams to identify new clus-
ters of DGA NXDomains. Not only does our approach
identify new DGAs, but it also builds models for these
DGAs to classify hosts that will generate similar NXDo-
mains in the future. Furthermore, among the list of iden-
tiﬁed domains in the DGAs, our approach pinpoints the
C&C domains. Lastly, we note that our work is comple-
mentary to the larger collection of previous research that
attempts to detect and identify malicious domain names,
e.g., [3, 4].
3 System Overview
In this section, we provide a high-level overview of
our DGA-bot detection system Pleiades. As shown in
Figure 1, Pleiades consists of two main modules: a DGA
Discovery module, and a DGA Classiﬁcation and C&C
Detection module. We discuss the roles of these two
main modules and their components, and how they are
used in coordination to actively learn and update DGA-
bot detection models. We describe these components in
more detail in Sections 4 and 5.
3.1 DGA Discovery
The DGA Discovery module analyzes streams of un-
successful DNS resolutions, as seen from “below” a local
DNS server (see Figure 1). All NXDomains generated by
network users are collected during a given epoch (e.g.,
one day). Then, the collected NXDomains are clustered
according to the following two similarity criteria: (1) the
domain name strings have similar statistical characteris-
tics (e.g., similar length, similar level of “randomness”,
similar character frequency distribution, etc.) and (2) the
domains have been queried by overlapping sets of hosts.
The main objective of this NXDomain clustering process
is to group together domain names that likely are auto-
matically generated by the same algorithm running on
multiple machines within the monitored network.
DGA Classiﬁcation and C&C Detection
Compromised
Hosts Report
C&C Detection
legitimate
domains
known 
DGA-botnet
domains
6
DGA Discovery
5
DGA Classiﬁer