# Ghost in the Droid: Possessing Android Applications with ParaSpectre
## Presenter: Jeff Dileo (chaosdata)
### DEFCON 25

---

## Introduction

### Overview
- **Topic**: Injecting JRuby into Android applications to hook functionality.
- **Relevance**:
  - For those who reverse-engineer Android apps.
  - For developers who find the Android debugging stack lacking.
  - For enthusiasts of Ruby and/or REPLs.

### Example: Interactive Shells
```ruby
$ irb
irb(main):001:0> puts "This is a REPL"
This is a REPL
=> nil
irb(main):002:0>
```

```python
$ python
Python 2.7.11 (default, Mar 1 2016, 18:47:52)
[GCC 4.2.1 Compatible Apple LLVM 6.1.0 (clang-602.0.53)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> print "This is also a REPL"
This is also a REPL
>>>
```

---

## Motivation

- **Context**: Reversing multiple complex Android applications.
- **Challenge**: Writing hooks for an obfuscated Korean chat app used primarily by Japanese users.
- **Pain Points**:
  - Tedious and tricky to figure out nested obfuscated objects.
  - Need for a more interactive and efficient debugging environment.

---

## Original Plan

- **Objective**: Convert interesting functions into REPLs.
- **Benefits**:
  - Interactive shell access.
  - Easier exploration and manipulation of application state.

---

## Android Function Hooking

### LD_PRELOAD
- **Description**: Traditional function hooking technique.
- **Steps**:
  - Set `LD_PRELOAD` to override dynamically linked native functions.
  - Inject a native function early in app startup.
- **Requirements**:
  - Root access.
- **Example**:
```c
#include <dlfcn.h>
#include <stdlib.h>
#include <unistd.h>

static int (*_real_rand)(void) = NULL;

__attribute__((constructor))
static void setup() {
    _real_rand = (int(*)(void))dlsym(RTLD_NEXT, "rand");
}

int rand() {
    if(access(".ps3mode", F_OK) != -1) {
        return 4;
    }
    return (*_real_rand)();
}
```

### Frida
- **Description**: Uses JavaScript for function hooks.
- **Features**:
  - Hooks for native code and Java.
  - Injection via root daemon, LD_PRELOAD, or APK modification.
- **Requirements**:
  - Root access (if not modifying APK).
- **Example**:
```javascript
Java.perform(function() {
    var File = Java.use('java.io.File');
    File.exists.implementation = function() {
        if(this.path.value == '/system/xbin/su') {
            return false;
        }
        return this.exists();
    }
});
```

### Xposed
- **Description**: Modifies Zygote to load hook code early.
- **Features**:
  - API for registering further hooks.
  - Hooks require reflection due to different classloaders.
- **Requirements**:
  - Ability to modify the system image.
- **Example**:
```java
public class XposedEntry implements IXposedHookLoadPackage {
    @Override
    public void handleLoadPackage(XC_LoadPackage.LoadPackageParam lpp) throws Throwable {
        if (!lpp.packageName.equals("...")) {
            return;
        }
        ClassLoader singledexcl = lpp.classLoader;
        try {
            // Hook logic
        } catch (Throwable t) {
            // Exception handling
        }
    }
}
```

---

## ParaSpectre

### Etymology
- **Para-**: From Ancient Greek παρά (pará, "beside; next to, near, from; against, contrary to").
- **Introspection**: From Middle French, Old French inspeccion, Latin inspectiō ("examination, inspection").
- **Spectre**: From French spectre, Latin spectrum ("appearance, apparition").
- **Parasect**: Combination of parasite and insect.
- **ParaSpectre**: Combines all the above.

### Description
- **Function**: A method hooking tool for Android.
- **Features**:
  - Injects a JRuby interpreter into a target process.
  - Configures method matching selectors using JSON.
  - Hooks call into custom Ruby code or drop into an interactive in-process Ruby REPL.
  - Implemented using Xposed.
  - Provides first-class access to the Java runtime environment and classloaders.
  - Ensures arbitrary app packages can be hooked at device startup.
  - Hook reloading requires only restarting the application/process.

### Capabilities
- **Method Matching**:
  - Select methods for hooking with varying specificity.
  - Filters using an intersection of provided selectors.
  - Matches by class name, superclass, implemented interfaces, method name, argument type, return type, and exception signature.
- **Ruby Integration**:
  - Solid scripting language with minimal setup.
  - Good Java interop with classloader injection.
  - No need for reflection; write the code directly.
  - Define subclasses/impls for app-defined classes/interfaces.
- **Runtime Exploration**:
  - Use Pry REPL for inspecting and manipulating application state.
  - Hooks drop into a Pry REPL if they don’t return early.

### Features
- **Connect-back REPLs**:
  - Uses a modified version of pry-remote.
  - Adds support for specifying client and daemon ports, Unix domain sockets, and authentication.
  - Opens each connect-back REPL in a new tmux window.
- **Configuration Editor Web Application**:
  - Raw Jetty Servlet web app running on Android.
  - Usable from a mobile browser.
  - Supports a hook editing workflow without requiring `adb push`.
  - Tracks edits in an on-device Git repo.
  - Basic access controls using API keys.

### Design
- **Overview**:
  - Loads hook configuration data.
  - Reads configuration files from the main ParaSpectre app directory.
  - Sets up a JRuby environment on Android.
  - Iterates through all classes in the target application’s classloader chain.
  - Uses Xposed to set up hooks on matching classes/methods.

### Performance Tricks
- **JRuby Initialization**:
  - Pre-dexed JRuby JAR loaded into the classloader during Zygote init.
  - Stored under `/data/dalvik-cache/paraspectre` due to SEAndroid policies.
  - JRuby scripting containers initialized separately in each hooked app.
  - Initial run of Ruby code in an initialized container takes several seconds.
- **Class Searching and Matching**:
  - Saves time by iterating through class names in the app’s own DEX files.
  - Bypasses worst-case path in `ClassLoader::loadClass` by invoking `findClass` directly.
  - Still runs into classloader global lock, preventing multithreaded class iteration.

### Results
- **JRuby Container Initialization**:
  - Reduced from 29 seconds to near-instantaneous.
- **Class Matching Overhead**:
  - Generally unobservable on single DEX applications.
  - Larger applications like `com.facebook.katana` may take 30 seconds for class iteration.

### Demos and Future Work
- **Demos**: Available soon at [GitHub](https://github.com/nccgroup/paraspectre).
- **Current Limitations**:
  - DRuby protocol security concerns.
  - Adding gems not supported yet.
- **Future Work**:
  - Gem JAR file upload API.
  - UI overhaul for creating, editing, and managing hooks.
  - Android 7/N+ compatibility.
  - Address SEAndroid changes and improve security.

### Greetz
- Thanks to: aleks, arkos, bones, justin, nabla, niko, weber.

### Questions?
- Contact: PI:EMAIL
- Twitter: @ChaosDatumz

---

Thank you for your attention!