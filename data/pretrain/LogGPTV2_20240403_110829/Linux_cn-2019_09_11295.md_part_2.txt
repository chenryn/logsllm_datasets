新版本的 `timestamp` 模块现在 *需要* 一个 `msg` 参数。这很重要，因为你的第一个应用程序将无法运行，因为它没有将字符串传递给 `timestamp.Timer` 函数：
```
$ python3 ./sleeptest.py
Testing Python sleep()...
Traceback (most recent call last):
  File "./sleeptest.py", line 8, in &lt;module&gt;
    timestamp.Timer()
TypeError: Timer() missing 1 required positional argument: 'msg'
```
你能修复你的 `sleeptest.py` 应用程序，以便它能够与更新后的模块一起正确运行吗？
### 变量和函数
通过设计，函数限制了变量的范围。换句话说，如果在函数内创建一个变量，那么这个变量 *只* 在这个函数内起作用。如果你尝试在函数外部使用函数内部出现的变量，就会发生错误。
下面是对 `response.py` 应用程序的修改，尝试从 `timestamp.Timer()` 函数外部打印 `msg` 变量：
```
#!/usr/bin/env python3
from mymodularity import timestamp
print("Press the RETURN key. Count to 3, and press RETURN again.")
input()
timestamp.Timer("Started timer at ")
print("Count to 3...")
input()
timestamp.Timer("You slept for ")
print(msg)
```
试着运行它，查看错误：
```
$ python3 ./response.py
Press the RETURN key. Count to 3, and press RETURN again.
Started timer at 1560719527.7862902
Count to 3...
You slept for 1560719528.135406
Traceback (most recent call last):
  File "./response.py", line 15, in &lt;module&gt;
    print(msg)
NameError: name 'msg' is not defined
```
应用程序返回一个 `NameError` 消息，因为没有定义 `msg`。这看起来令人困惑，因为你编写的代码定义了 `msg`，但你对代码的了解比 Python 更深入。调用函数的代码，不管函数是出现在同一个文件中，还是打包为模块，都不知道函数内部发生了什么。一个函数独立地执行它的计算，并返回你想要它返回的内容。这其中所涉及的任何变量都只是 *本地的*：它们只存在于函数中，并且只存在于函数完成其目的所需时间内。
#### Return 语句
如果你的应用程序需要函数中特定包含的信息，那么使用 `return` 语句让函数在运行后返回有意义的数据。
时间就是金钱，所以修改 `timestamp` 函数，以使其用于一个虚构的收费系统：
```
#!/usr/bin/env python3
import time
def Timer(msg):
    print(str(msg) + str(time.time() ) )
    charge = .02
    return charge
```
现在，`timestamp` 模块每次调用都收费 2 美分，但最重要的是，它返回每次调用时所收取的金额。
以下一个如何使用 `return` 语句的演示：
```
#!/usr/bin/env python3
from mymodularity import timestamp
print("Press RETURN for the time (costs 2 cents).")
print("Press Q RETURN to quit.")
total = 0
while True:
    kbd = input()
    if kbd.lower() == "q":
        print("You owe $" + str(total) )
        exit()
    else:
        charge = timestamp.Timer("Time is ")
        total = total+charge
```
在这个示例代码中，变量 `charge` 为 `timestamp.Timer()` 函数的返回，它接收函数返回的任何内容。在本例中，函数返回一个数字，因此使用一个名为 `total` 的新变量来跟踪已经进行了多少更改。当应用程序收到要退出的信号时，它会打印总花费：
```
$ python3 ./charge.py
Press RETURN for the time (costs 2 cents).
Press Q RETURN to quit.
Time is 1560722430.345412
Time is 1560722430.933996
Time is 1560722434.6027434
Time is 1560722438.612629
Time is 1560722439.3649364
q
You owe $0.1
```
#### 内联函数
函数不必在单独的文件中创建。如果你只是针对一个任务编写一个简短的脚本，那么在同一个文件中编写函数可能更有意义。唯一的区别是你不必导入自己的模块，但函数的工作方式是一样的。以下是时间测试应用程序的最新迭代：
```
#!/usr/bin/env python3
import time
total = 0
def Timer(msg):
    print(str(msg) + str(time.time() ) )
    charge = .02
    return charge
print("Press RETURN for the time (costs 2 cents).")
print("Press Q RETURN to quit.")
while True:
    kbd = input()
    if kbd.lower() == "q":
        print("You owe $" + str(total) )
        exit()
    else:
        charge = Timer("Time is ")
        total = total+charge
```
它没有外部依赖（Python 发行版中包含 `time` 模块），产生与模块化版本相同的结果。它的优点是一切都位于一个文件中，缺点是你不能在其他脚本中使用 `Timer()` 函数，除非你手动复制和粘贴它。
#### 全局变量
在函数外部创建的变量没有限制作用域，因此它被视为 *全局* 变量。
全局变量的一个例子是在 `charge.py` 中用于跟踪当前花费的 `total` 变量。`total` 是在函数之外创建的，因此它绑定到应用程序而不是特定函数。
应用程序中的函数可以访问全局变量，但要将变量传入导入的模块，你必须像发送 `msg` 变量一样将变量传入模块。
全局变量很方便，因为它们似乎随时随地都可用，但也很难跟踪它们，很难知道哪些变量不再需要了但是仍然在系统内存中停留（尽管 Python 有非常好的垃圾收集机制）。
但是，全局变量很重要，因为不是所有的变量都可以是函数或类的本地变量。现在你知道了如何向函数传入变量并获得返回，事情就变得容易了。
### 总结
你已经学到了很多关于函数的知识，所以开始将它们放入你的脚本中 —— 如果它不是作为单独的模块，那么作为代码块，你不必在一个脚本中编写多次。在本系列的下一篇文章中，我将介绍 Python 类。
---
via: 
作者：[Seth Kenlon](https://opensource.com/users/seth/users/xd-deng/users/nhuntwalker/users/don-watkins) 选题：[lujun9972](https://github.com/lujun9972) 译者：[MjSeven](https://github.com/MjSeven) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出