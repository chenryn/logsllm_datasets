Goldreich [14] deﬁnes security in the semi-honest model.
The view V IEW Π(x, y) of a party during protocol Π on this
party’s input x and the other party’s input y is its input x,
the outcome of its coin tosses and the messages received
during the execution of the protocol.
Definition 1. We say a protocol Π computing f (x, y) is
secure in the semi-honest model, if for each party there exist
a polynomial-time simulator S given the party’s input and
output is computationally indistinguishable from the party’s
view V IEW Π(x, y):
S(x, f (x, y)) c= V IEW Π(x, y)
FairPlay programs are secure in the semi-honest model by
construction. L1 programs need to be proven secure man-
ually, but can also implement more eﬃcient protocols. Ag-
garwal et al.’s protocol is secure, if (correctly) implemented
in L1.
Semi-honest security ensures conﬁdentiality except what
can be inferred from one’s input and output. This inference
is the basis of our optimization. We construct a program
analysis technique for FairPlay programs that infers what
705program Median {
f u n c t i o n Output o u t
( I n p u t
i n ) {
v a r B o o l e a n a , d ;
v a r Elem
b , c ;
a = i n . a l i c e . x <= i n . bob . x ;
b = a ? i n . a l i c e . y :
c = a ? i n . bob . x
:
i n . a l i c e . x ;
i n . bob . y ;
4
9
d = b <= c ;
o u t . a l i c e = d ? b : c ;
o u t . bob
= d ? b : c ;
14
}
}
Listing 6: Single Static Assignment Form
We also unroll all loops – in SFDL loops have a constant
number of iterations –, inline all functions – in SFDL there
is no recursion –, and transform all if statements to condi-
tional assignments. A conditional assignment has the form
of Listing 5 where the variable a is assigned either the value
of c or d depending on the truth value of the condition b.
Furthermore, we resolve complex expressions and trans-
form all expressions into 3-operand code (except conditional
assignments which have four operands). Each statement
takes two operands (and an operator) as input and assigns
the result (a new) operand as output.
The result of our SSA transform is depicted in Listing 6.
We have omitted the type declarations for brevity as they
are the same as in Listing 1. The challenge for our inference
is now to determine that both Boolean variables, a and d,
are (always) known to both, Alice and Bob, if they know
their respective input and output.
3.4 Inference
Our inference algorithm (under-)estimates the knowledge
about variables given one’s input and output. In the notion
of information ﬂow, we try to determine whether there is an
inevitable ﬂow of information from the input to that variable
or from that variable to the output. We diﬀer from language-
based information ﬂow [29] which tries to detect and prevent
possible information ﬂows. One particular challenge in our
inference is therefore that the ﬂow of information may occur
diﬀerently as possible ﬂows depending on the state of pro-
gram, but does occur inevitably in all possible states. We
address this challenge by using a more powerful logic.
Furthermore, all (sensible) secure computations involve a
declassiﬁcation (release) of private information. Assuming
that information ﬂow is admissible, our inference algorithm
indicates the earliest possible declassiﬁcation operation in
order to later increase the performance of the protocol. We
present the details in Section 3.5.
3.4.1 Epistemic Modal Logic
We use epistemic modal logic (EML) [16] to reason about
the knowledge of the protocol participants. Let p be a propo-
sition which can be either true (p) or false (¬p). We consider
a single agent (either Alice or Bob) and use the modal op-
erator K to denominate its knowledge. When we write
Kp
we mean that the agent knows p. EML only considers truth-
ful knowledge, i.e.
Kp ⇒ p
Although the agent’s knowledge is certain, the agent might
consider diﬀerent possible worlds. A possible world is an in-
terpretation of propositions assigning them a truth value.
One of the possible worlds is the real world, but the agent
cannot diﬀerentiate between them. For example, let W1 and
W2 be two diﬀerent, possible worlds. A proposition p might
be true in world W1, but false in world W2. We write
W1 (cid:15) p
W2 (cid:15) ¬p
As already mentioned we consider one agent at a time
and using the possible worlds we can deﬁne the meaning of
knowledge. Let there be n possible worlds W1, . . . , Wn. If
and only if the proposition p is true in all possible worlds,
then the agent knows p. We write
Wj (cid:15) Kp ⇔ ∀(1 ≤ i ≤ n)Wi (cid:15) p
This implements one of the simplest Kripke structures [20].
Introducing “logical and” for complex propositions φ and ψ
we can summarize our simpliﬁed EML variant as
if p is assigned true in W
if W 2 φ
W (cid:15) p
W (cid:15) ¬φ
W (cid:15) φ ∧ ψ if W (cid:15) φ and W (cid:15) ψ
W (cid:15) Kφ
if for all Wi (cid:15) φ
3.4.2 Traces
In the remainder of this section we will consider wlog Al-
ice as the agent. We create possible worlds by tracing the
program. Each possible world contains one trace of the pro-
gram. The trace is a set of propositions where each propo-
sition is generated by a possible assignment in the program.
For integers we follow the assumption by Aggarwal et
al. and assume that each input is unique. This assump-
tion is not essential in our inference and can be easily lifted
by adapting the algorithm to generate the traces. No fur-
ther changes are necessary, but Aggarwal et al.’s protocol
is then insecure and our running example no longer works.
We therefore trace each integer variable in Alice’s input as a
unique identiﬁer from the set {A1, . . . , An}. We trace each
integer variable in Bob’s input as the identiﬁer B. Boolean
variables may be traced as either true or f alse.
a = i n . a l i c e . x + i n . bob . y
Listing 7: Integer Assignment
An assignment creates a new entry in the trace. An as-
signed integer variable is added to the trace with the inter-
section of the identiﬁers of its operands (with ⊥ marking the
empty set). In Listing 7 we add to the trace the proposition
W (cid:15) a = ⊥
a = i n . a l i c e . x < i n . bob . y
Listing 8: Boolean Assignment
Each Boolean assignment with integer operands doubles
the number of possible worlds. For each existing world W
706W (cid:15) a = f alse
W (cid:15) b = A1
W (cid:15) c = B
W (cid:15) d = f alse
W (cid:15) out.alice = B
Figure 2: Trace
we create a new world W ′. In the example of Listing 8 we
add to the trace of world W the proposition
W (cid:15) a = true
In world W ′ we copy all of the previous trace (except, of
course, the trace of a) of the world W and then add the
proposition
W ′ (cid:15) a = f alse
For Boolean assignments with Boolean operands we opti-
mize this to a single proposition in all possible worlds by
evaluating the expression.
Conditional assignments as in Listing 5 interpret the truth
assignment of the condition. In worlds with the proposition
b = true we add a proposition for a with the trace of c and in
worlds with the proposition b = f alse we add a proposition
for a with the trace of d.
In our example of the median computation (Listing 6) we
get four possible worlds: one for each trace of a and d. We
show one of the four traces in Figure 2.
Each variable is a proposition. The proposition is true in
a possible world, if the contents of a variable is known to
Alice in this world, i.e. under the assumption of a speciﬁc
trace.
If a variable a is known to Alice in all worlds, i.e.
proposition a is true, then then the proposition Ka is true
and we add the label {A} to the variable.
It is important to note that we consider all possible traces.
This may include invalid traces of unreachable code. Since
we perform static analysis, we must either over- or under-
estimate the reachable code. By considering all unreachable
code our analysis is safe. An additional, invalid trace can
only reduce the set of labels of a variable, since even in the
invalid trace the variable must be known to Alice in order
to result in a label {A} for the variable.
3.4.3 Rules
Initially only input and output are known to Alice (in all
worlds). Further knowledge needs to be inferred via rules.
We present these rules in this section.
Rules are logical deductions of propositions. Our rules are
true in all worlds, although they might make a reference to
a trace proposition. Let φ, ψ and χ be propositions. We
write
or
as a shortcut for
φ ∧ ψ ⇒ χ
φ ψ
χ
¬((φ ∧ ψ) ∧ ¬χ)
We use the SSA form of the program and for each state-
ment we add several rules. As we try to infer additional
knowledge about program variables from input and output,
we can distinguish two types of rules. Forward rules try to
infer knowledge about the result of a statement from knowl-
edge about its input. Backward rules try to infer knowledge
about the input of a statement from knowledge about its re-
sult and maybe partial input. Forward and backward rules
are true and applied concurrently during the logical infer-
ence. Only their combination enables us to make the nec-
essary inferences. We have rules for expressions (3 operand
code), conditional assignments, symbolic computation and
previous knowledge.
Expressions.
a = b + c
d = e ∗ f
Listing 9: Expression Assignment
The forward rule for expressions is simple. If both operands
are known then, then the assigned variable is known. For
the example in Listing 9 we write
c
b
a
e
f
d
The backward rules for expressions are already more com-
plex. Whether there is a backward rule depends on the
operator. For addition (+) and subtraction (−) there are
backward rules.
a c
b
a b
c
But for multiplication (∗) and (integer) division (/) there
are none. This is for safety reasons. While in (modular)
addition and subtraction it is always possible to compute
the inverse, this is not always the case for multiplication
and division. Consider multiplication by 0: the result is 0
independent of the value of the other operand.
Conditional Assignment.
The forward rule for conditional assignments is similar.
Nevertheless we distinguish between the two possible worlds
by making a reference to the trace proposition. Consider
the example in Listing 5: we construct the following forward
rules
b
b = true
a
c
b
b = f alse d
a
For conditional assignments there are two diﬀerent back-
ward rules. One for the assigned operand and one for the
condition. The backward rules for the operands are as fol-
lows.
b = true a
c
b = f alse a
d
We emphasize that these rules do not require knowledge of
the condition. This is safe (as we will show at the example of
oblivious transfer in Section 4.1), since the conclusion is only
true in half of the possible worlds and therefore no further
inference on labels is feasible.
The backward rule for the condition is our most complex
rule. For its understanding we need to consider a speciﬁc
world (trace). For example, consider the trace of Figure 2
and the conditional assignment in line 12 of the correspond-
ing Listing 6. It is the ﬁnal output assignment for Alice of
the median computation.
707Our intuition is the following: If the agent Alice knows
the assigned variable (out.alice) and the trace of the variable
(out.alice = B) only occurs in possible worlds with a speciﬁc
condition (d = f alse), then the agent knows the condition.
In other words: Alice can infer the condition from observing
the known and unique output for that condition. This rule
combines our tracing, backward rules and EML. We can
express the uniqueness of the trace as Alice’s knowledge
K(out.alice = B ⇒ d = f alse)
Recall that the modal operator K ranges over all possible
worlds. The entire rule for the example is as follows
out.alice
out.alice = B K(out.alice = B ⇒ d = f alse)
d
In the median example this means that Alice knows that
in the last comparison her value was larger, because the
output is a value of Bob. Recall that she can distinguish her
and Bob’s values, because all inputs are distinct.
Symbolic Computation.
In addition to the evaluation of statements we need to
perform some symbolic computation. We can infer addi-
tional knowledge about the program’s state by manipulating
its symbols. Particularly, we introduce propositions for the
lower-than relation into our inference.
Let a and b be two variables. Then the (true) proposition
lt a b means that (in this possible world)
lt a b ⇔ a < b
c = z ? y : x ;
a = b <= c ;
d = e ? f
: c ;
3
Listing 10: Comparison Example
First, we need to tie the symbolic computation to the
program. Consider the example in Listing 10. We deduce
a proposition lt c b, if a = f alse is in the trace and the
variable a is known to the agent Alice.
a a = f alse
lt c b
We also deduce knowledge about program variables from
symbolic knowledge. We can omit the trace proposition,
since our deduction of symbolic knowledge is always correct
and safe.
lt c b
a
We need to take care of conditional assignments and track
variable renaming. Variable tracking works, again, back-
ward and forward. In the example of Listing 10 we write
e = f alse
lt c b
z = f alse
lt c b
lt d b
lt x b