network driver for the default interface of lwIP, s.t. lwIP routes
all IP packets of the client app through the tunnel module.
On the gateway-side, the SENG server creates a virtual IP-
level network interface which it will later use for routing trafﬁc
of shielded apps and receiving packets destined for them.
Afterwards, the SENG server sets up a welcome socket and
waits for incoming tunnel connections by internal or external
SENG runtime instances.
Tunnel Preparation. After initialization, the SENG run-
time generates credentials and the enclave report for the se-
cure tunnel to the SENG server. The tunnel module uses
DTLS (RFC 6347), which has well-documented end-to-end
protection guarantees. We chose UDP-based DTLS over TLS
as it requires less state and is faster, which improves scalabil-
ity, and as the reliability and ordering guarantees of TLS are
not required [20]. For tunneled TCP connections, the TCP/IP
stacks of the communication endpoints—namely SENG run-
time and target server—already guarantee reliable, in-order
packet delivery. For tunneled UDP streams, both communica-
tion partners have to resolve packet reordering in the applica-
tion protocol anyway, and the choice of DTLS thus does not
weaken any security guarantees.
To couple remote attestation with the end-to-end protection
of DTLS, the tunnel module generates a fresh RSA key pair
(Kenc,K−1
enc) and binds the public key Kenc as user data to the
enclave report—following the idea of Knauth et al. [32]. The
local Intel Quoting Enclave (QE) transforms the report into
a veriﬁable, signed quote using the attestation key. After re-
ceiving the signed remote attestation report via an attestation
service, the tunnel module uses the RSA keys (Kenc,K−1
enc) to
generate an X.509 client certiﬁcate and embeds the attestation
report with corresponding signature as extra ﬁelds.
Note that the tunnel module must not be able to directly
communicate with external Attestation Services, e.g., Intel
Attestation Service (IAS), to request the signed remote attes-
tation report. Local and on-path adversaries could exploit the
unprotected headers of the IAS connection as covert channel
and leak information (violating SR6). To solve this dilemma,
we can (i) let the enclave send the signed quote to the SENG
server, which in turn performs the IAS communication itself,
or (ii) operate an internal attestation service in the DMZ, and
let the enclave submit the quote to the AS via TLS [50].
Tunnel Establishment. The SENG runtime now connects
to the SENG server via a mutually authenticated DTLS con-
nection. For server authentication, the runtime uses the pinned
server public key Ksrv. For client authentication and remote at-
testation, the SENG server checks the validity and signature of
the attestation report and matches the embedded user data with
the certiﬁcate key Kenc. The SENG server then veriﬁes if the
report data belongs to a shielded application in the allowlist.
Technically, the enclave measurement contains the Graphene-
SGX library and memory-mapped manifest: mrenclave ←
measuresgx(graphene,MF). The manifest MF contains secure
hashes h(·) for all dependencies of the SENG runtime and
shielded app, including the runtime library, the pinned server
key Ksrv, the app’s binary and libraries, as well as other pro-
tected ﬁles: MF := {h(sengrt),h(Ksrv),h(app),h(lib1), ...}.
The ﬁle system shield enforces ﬁle integrity based on the
hashes [9]. The inclusion of the manifest in the measurement
results in a unique enclave identity (mrenclave) for each bun-
dle of LibOS, SENG, and client app. Therefore, the SENG
server can directly link the report to the exact version of the
shielded app. If the app was veriﬁed, the SENG server knows
that the DTLS tunnel is attested and established with a valid
SGX enclave. Finally, the SENG server looks up the app-
speciﬁc IP subnet based on the app’s identity (mrenclave) and,
optionally, host IP and assigns a unique IP address from the
subnet to the SENG runtime instance (cf. Section 5.3). The
SENG runtime takes over the reported IP conﬁguration, and
Graphene-SGX loads the app and transfers control to it.
6.2 Network Trafﬁc Shielding
Redirecting IP Packets to the Tunnel. SENG needs to
protect the whole network trafﬁc of shielded applications.
Graphene-SGX links the client apps against a patched ver-
sion of the standard C library where syscalls are replaced by
calls to LibOS-internal handler functions. This allows us to
fully-transparently wrap and shield system calls. The SENG
runtime provides own handlers which shadow all network
I/O functions, as shown in Figure 4. The SENG handlers
transparently redirect all socket API functions of the client
app to the respective lwIP functions, s.t. the app can perform
760    29th USENIX Security Symposium
USENIX Association
DNS variants, e.g., DNSSEC, DNS over TLS (DoT) or DNS
over HTTPS (DoH)4. Second, we provide trusted versions of
conﬁguration ﬁles used by third party DNS libraries for look-
ing up information like the name server IP (“resolv.conf”) or
protocol-speciﬁc port numbers (“/etc/services”). We leverage
the ﬁle system shield of the LibOS to protect the integrity of
the ﬁles. Third, all DNS queries sent via standard resolver
functions or third party libraries eventually pass lwIP and are
therefore tunneled through the protected DTLS tunnel.
6.4 Application-Grained Policy Enforcement
SENG enables the perimeter ﬁrewall to apply app-grained
network policies whenever shielded trafﬁc is routed through
the gateway. App trafﬁc reaches the gateway only through
SENG’s virtual network interface and the SENG server for-
wards trafﬁc to an app tunnel only if it matches the assigned
enclave IP. Therefore, the gateway can identify outbound traf-
ﬁc as shielded iff received from SENG’s network interface and
routes inbound trafﬁc destined for enclave IPs to the SENG
server. In the process, the ﬁrewall on the gateway enforces
app-grained policies as network policies on the app-speciﬁc
enclave IP subnets (cf. Section 5.3). To prevent imperson-
ation attacks via IP spooﬁng, the SENG server drops tunneled
app trafﬁc with mismatching enclave IP and the ﬁrewall drops
enclave trafﬁc not arriving through SENG’s network interface.
6.5 Shielded Servers
So far, we took it for granted that all shielded apps are clients.
However, SENG also supports shielded server apps. SENG
server sockets work analogously to default server sockets.
However, with SENG, the gateway can now fully control (i) if
an enclave can expose server functionality, and if so, (ii) which
clients are allowed to contact the enclave. Similar to client
policies, server policies restrict communication to shielded
clients or speciﬁc enclaves only (app-grained policies).
Once created, SENG server sockets are reachable through
the gateway under the assigned enclave IPs. Recall that en-
claves can either have public (globally routable) or private
(RFC 1918) IP addresses. In case of public addresses, the en-
clave’s server socket is immediately exposed. If the enclave’s
IP is private, yet should be reachable from external clients,
the gateway uses destination NATing to expose the service.
7 Security Analysis
We now discuss how adversaries could attempt to attack
SENG. Table 3 summarizes the attacks and respective de-
fense mechanisms. We discuss why the protection from the
above adversaries implies the fulﬁllment of the security goals
of Subsection 5.1 and therefore solves the initial challenges.
4RFC 4033, RFC 8484 and RFC 7858
Figure 4: Overview of the SENG Runtime Components
network I/O only through the SGX-internal user space stack.
lwIP manages all connections of the app and uses the tunnel
module for receiving and sending the associated IP packets.
Sending Packets. When the shielded app sends data, lwIP
crafts corresponding IP packets and passes them to the tunnel
module. The tunnel module wraps the IP packets with DTLS
and forwards them through the attested tunnel to the SENG
server. For transferring the DTLS records, the tunnel module
uses the LibOS to perform the actual UDP send operation via
the untrusted OS. Figure 4 shows the app’s data ﬂow and high-
lights that only the DTLS records cross the SGX boundary.
The end-to-end security protection of DTLS prevents attacks
by local or MITM attackers. The SENG server receives the
DTLS records, decrypts contained IP packets and then passes
them through the virtual network interface to the gateway
network stack. The gateway then applies app-grained ﬁrewall
rules (Section 6.4) and routes the packets to the target server.
Receiving Packets. For inbound trafﬁc, the SENG server
receives the corresponding IP packets from the gateway
through the virtual network interface. The SENG server uses
the target address to look up the DTLS connection to the re-
spective shielded client app and tunnels them back. The tunnel
module receives and decrypts the IP packets and puts them
into the lwIP inbox queue. lwIP then processes the packets
and passes the contained app data to the shielded app.
6.3 DNS Resolution Shielding
Without further precautions, the enclave would fully rely on
the host OS to resolve domains. Local system-level attack-
ers could thus launch severe redirection attacks and redirect
trafﬁc of shielded apps to IP addresses of their choice. To
tackle this problem, SENG shields DNS lookups of client ap-
plications via three complementary actions. First, the SENG
runtime redirects the respective standard library functions
(e.g., getaddrinfo) to lwIP and conﬁgures lwIP to use a
trusted DNS resolver located at the gateway or in the DMZ.
The trusted resolver can then securely query internal DNS
servers or contact trusted external ones via integrity-protected
USENIX Association
29th USENIX Security Symposium    761
SENG ServerLinux KernelSENG RuntimeSocket HandlersClient Application (binary, libs)Kernel SpaceUser SpacelwIPtunnel moduleSGX EnclaveApp dataIP packetsDTLS recordsSGX boundarySystem calls (incl. UDP send/recv):untrusted:trustednon-socket APIsGraphene-SGXTarget / Goal
Shielded App
SENG’s Tunneling
and Access Control
App Connections
Information Leaks
and Remote Control
App Interfaces
SENG’s Policies
Central Gateway
Adversaries
Sys
Sys
Sys
Sys
Sys, Mc2gw
Sys, Mc2gw
Sys, Mc2gw
Sys, Mc2gw
Sys, Mc2gw, Mgw2srv
Sys, Mc2gw
Attack
A01: Code/Data Tampering
A02: File Tampering
A03: LibOS Modiﬁcation
A04: Fake/Custom Enclave
A05: Client Impersonation
A06: Server Impersonation
A07: Attacking SENG’s Keys
A08: Tunnel Tampering
A09: DNS Spooﬁng
A10: Internal Conn. Tampering
A11: External Conn. Tampering Mgw2srv
Internal
A12: Direct Info Leak
A13: Direct Remote Control
External
Internal + External
A14: Covert Channel (Header)
Internal + External
A15: Covert Channel (Timing)
Sys
A16: Steering Shielded Apps
A17: Privilege Escalation
Malicious Enclave
Sysgw
A18: Gateway Compromise
Defense Mechanisms
SGX Enclave
File System Shield
Attest + Allowlist
Attest + Pinning + Allowlist
Key Binding + Trafﬁc Auth.
Pinning + DTLS
SENG’s Key Management
DTLS + Trusted TCP/IP Stack
SENG’s DNS Shield
DTLS Tunnel + DMZ
(Enforce Apps w/ Sec. Comm.)
SENG’s Shielding and Policies
SENG’s Shielding and Policies
SENG’s Tunneling + DTLS
(Adopt Time Masking)
(Secure I/O + Caller IDs)
Trafﬁc Auth. + Policies
(TEE-protected Srv+FW+NIC)
Secure?
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
((cid:88))
(cid:88)
(cid:88)
(cid:88)
((cid:88))
((cid:88))
(cid:88)
((cid:88))
Table 3: Assessment of attacks on SENG and its respective countermeasures, following the attacker models deﬁned in Section 7.
Adversary Types. With reference to Figure 1 (see page 3),
SENG faces several types of adversaries: (i) a system-level
attacker (“Sys”), which fully controls the enclave’s OS inter-
actions (including trafﬁc), (ii) MITM attackers in the internal
or external client subnetwork (depending on the client’s loca-
tion), who can fully control the trafﬁc between the client and
SENG server (“Mc2gw”), (iii) MITM attackers on the path be-
tween the gateway and the server (either internal or external)
(“Mgw2srv”), (iv) an internal attacker inside the organization
who aims to leak sensitive data (“Internal”), and ﬁnally, (v)
an external attacker outside of the organization who aims to
sneak data (or malware commands) into the network (“Ex-
ternal”). We will use these attacker models to discuss how
SENG protects against 18 security-critical attacks.
A01: Code/Data Tampering (SR1). Sys may aim to hi-
jack the shielded app code, tamper with the runtime data or
leak sensitive information like tunnel keys. The hardware-
enforced protection of Intel SGX blocks all unauthenticated
access to enclave memory and therefore prevents such attacks.
A02: File Tampering (SR1). Furthermore, the ﬁle system
shield uses the manifest MF to check the integrity of the
SENG runtime, pinned SENG server key Ksrv, application
binary and all its dependencies (e.g. libs, conﬁg ﬁles), such
that any attempt to tamper ﬁles is detected and blocked.
A03: LibOS Modiﬁcation (SR2-4). Patching the LibOS
binary or its manifest to replace loaded ﬁles, e.g., the client
app, or the pinned SENG server key Ksrv, is possible, but