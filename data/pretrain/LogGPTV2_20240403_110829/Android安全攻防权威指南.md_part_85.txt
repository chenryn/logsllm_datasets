以及替换或增加一些资源。这些特点使其成为修改系统运行时的强大开发概架，可以用于任何应
用程序以及Android 框架自身。更多信息参见：http:/forum.xda-developers.com/showthread.php?t
1574401。
A.4.4CydiaSubstrate
Cydia SubstrateforAndroid通过将Substrate扩展注人目标进程的内存，帮助开发者对已有的
应用程序进行修改。
---
## Page 397
附录A工具381
Substrate的功能与XPosed框架非常类似，不过它不需要替换任何系统组件就能工作。此外，
它可以将我们自已的代码注人每个单独的进程。这也就意味着，它既可以hookDalvk方法，也
可以hook本地代码。Substrate提供了一组文档详尽的核心API，用于对C和Java进程进行修改。
更多信息参见：www.cydiasubstrate.com。
A.5静态分析工具
本节主要介绍有助于对Android应用程序进行静态分析的工具。由于Dalvik（Android独有
的Java虚拟机实现）字节码可以很容易地被翻译为Java字节码，因此这里介绍的一些工具并不
是专门为Android所编写的。
A.5.1Smali和Baksmali
Smali是一个用于Dalvik可执行文件（DEX）格式的汇编器。Baksmali则是对应的Dalvik字
节码反汇编器。Smali完整地支持DEX格式的所有功能，包括注解、调试信息和代码行信息等。
Smali语法由Jasmin和dedexer演化而来。Jasmin是Java事实上的标准汇编语言格式，dedexer
是另一个支持Dalvik操作码的DEX文件反汇编器。关于Smali的更多信息可以参考：
https://code.google.com/p/smali/
A.5.2Androguard
Androguard是一个使用Python编写的开源逆向工程和逆向分析框架。它可以将Android的二
进制XML格式转换成可读的XML，还包括一个可以直接将Dalvik字节码反编译为Java源代码
的 Dalvik反编译器（DAD）。
Androguard可以反汇编、反编译以及修改DEX文件和ODEX文件（优化后的 Dalvik可执行
文件），并将其完全转为Python对象。它特意用模块化的形式开发，便于集成到其他项目中去。
它还可以操作代码块、指令和权限等对象，进行静态代码分析。关于Androguard的更多信息参
见: https://ode.google.com/p/androguard/。
A.5.3apktool
apktool是一个开源的Java工具，用于对Android应用程序进行逆向工程。它将APK文件
中包含的资源文件解码为其原始形态，即人类可读的XML格式。它还使用Smali将其中包含的
所有类和方法进行反汇编并输出。
用apktoo1将应用程序解码后，可以在其输出的结果上进一步加工，如修改资源文件或改
变程序行为。例如，可以翻译其中的资源字符串，或者修改资源文件以改变该程序的主题。在
Smali代码中，可以增加新的功能，或者修改已有功能的行为。完成这些修改后，可以再次使用
apktoo1从这些解码并修改过的文件中构建出一个新的APK文件。更多信息参见：https://code
google.com/p/android-apktool/。
---
## Page 398
382附录A工具
A.5.4 dex2jar
dex2jar 是使用Java编写的开源项目，提供了一组操作Android DEX文件和Java CLASS
文件的工具。
使用dex2jar的主要目的是将DEX或ODEX文件转换为JavaJAR包格式。这样就可以使
用已有的任意Java反编译器对其进行反编译，不需要这些反编译器专门针对Android字节码设计。
dex2jar的其他特性还包括在class文件和Jasmin格式汇编语言之间进行汇编和反汇编，对
DEX文件中的字符串进行解密，以及对APK文件进行签名等。它还支持对包、类、方法和域的
名字进行自动重命名；如果字节码是用ProGuard混淆过的，那么这个功能尤其有用。详细信息
可以参考：https://code.google.com/p/dex2jar/。
A.5.5jad
jad（Java Decompiler）是一个用于Java语言的、闭源的、不再维护的反编译器。jad通过命
令行界面将CLASS文件转换为可读的Java源代码。
jad通常和dex2jar一起使用，对没有源代码的Android应用程序进行反编译。下载地址是：
http://varaneckas.com/jad/。
A.5.6JD-GUI
JD-GUI是一个从CLASS文件中重新构造出Java源代码的闭源Java反编译器，提供了—个
图形化界面用于浏览反编译得到的源代码。
JD-GUI也通常与dex2jar结合用于反编译Android应用程序，充当jad的替换工具或者互
补工具。JD-GUI反编译的质量有候优于jad，有时次于jad。更多信息参见：。
A.5.7JEB
JEB是一个闭源的、商业的Dalvik字节码反编译器，用于将AndroidDEX文件转换为可读的
Java源代码。
与Androguard 的反编译器 DAD 类似，JEB在创建Java 源代码时不需要用 dex2jar对 DEX
文件进行转换。JEB的主要优势是，它是一个交互式的反编译器。可以用于检查交叉引用，在代
码和数据之间导航，并且通过交互式地对方法、域、类和包名进行重命名来处理ProGuard的混
淆。关于JEB的更多信息可以参考：www.android-decompiler.com/。
A.5.8Radare2
Radare2是一个操控二进制文件的开源跨平台逆向工程框架。它由一个高度脚本化的十六进
制编辑器和一个支持多种后端的输入输出解析层构成，包含一个调试器、一个流分析器、一个
汇编器、一个反汇编器、多个代码分析模块、一个二进制diff工具、一个进制转换器、一个shellcode
开发辅助工具、一个二进制信息提取工具和一个基于块的哈希工具。虽然Radare2是一个多目
---
## Page 399
附录A工具383
的的通用工具，但是用于Android逆向工程时，对反汇编Dalvik字节码或者分析私有二进制块
尤为有用。
由于Radare2支持多种架构和平台，可以在Android设备或计算机上运行它。下载地址是：
www.radare.org/。
A.5.9IDA Pro和Hex-Rays Decompiler
交互式反汇编器（InteractiveDisAssembler，IDA）是支持多种二进制格式和处理器类型的私
有反汇编器和调试器。它提供了许多特性，例如自动化代码分析、开发插件的 SDK和分析脚本
支持等。从6.1版开始，IDA的Pro版本就包含了一个Dalvik处理器模块，用于反汇编Android
字节码。
Hex-RaysDecompiler反编译器是IDAPro的一个插件，用于将x86和ARM可执行文件的反
汇编输出结果进一步转换为人类可读的类C伪代码。更多信息参见：htps://www.hex-rays.com/。
A.6应用程序测试工具
本节介绍的工具和附录A其他小节介绍的工具有所不同，它们主要用于对Android应用软件
进行安全测试和漏洞分析。
A.6.1Drozer（Mercury）框架
Drozer（之前叫Mercury）是一个用于Android 的漏润挖掘和利用框架。它可以自动检查
Android应用软件中的一些共性特征，例如暴露的activity、暴露的 service、暴露的broadcast receiver
和暴露的contentprovider。此外，它还可以测试应用软件的其他一些缺陷，例如SQL注人、shared
user ID、打开的 debuggable 标志等。Drozer 的详细信息参见：http:/mwr.to/mercury
A.6.2 iSEC Intent Sniffer和alntent Fuzzer
iSECIntent Sniffer 和 Intent Fuzzer是 iSEC Partners 开发的两款工具，在Android设备上运行
协助安全研究人员监控和捕获广播的 intent。它们通过对broadcastreceiver、service和activity组
件进行模棚测试，发现其中的缺陷。更多信息参见：https://www.isecpartners.com/tools/mobile
secunity.aspx。
A.7硬件安全工具
使用各类专门的工具，可以让基于接触式访问的嵌人式设备攻击过程变得更为容易。这些工
具通常由定制设备及其软件共同组成，一般针对特定的需求面制造。无论是针对Android设备还
是其他的嵌人式设备，这些工具都会让你如虎添翼。
---
## Page 400
384附录A工具
A.7.1Segger J-Link
Segger的J-Link设备是一个中间层JTAG 调试探头，可以用于操作多种支持JTAG的设备。
更多信.息参见：http:/www.segger.com/debug-probes.html。
A.7.2JTAGulator
在识别设备上未知测试点的用途时，Joe Grand的JTAGulator设备可以节省许多时间。只需
用线与待测试点连接起来，它就能自动判断出每一个针脚的作用。更多信息参见：
/ot[/oopuod/uooropnseoppuumwm/:d
A.7.3OpenOCD
OpenOCD（OpenOn-ChipDebugger）软件是一个面向多种JTAG设备的开源解决方案。有
了它，我们可以使用更使宜的斤AG适配器，快速地将代码修改为所需的样子。更多信息参见：
http://openocd.sourceforge.net/
A.7.4Saleae
Saleae的逻辑分析器用于实时监控电子信号。Saleae的特性包括实时解码和支持多种协议，
从而让电路数据的监控过程更加轻松有趣。更多信息参见：http://www.saleae.com/。
A.7.5 Bus Pirate
Bus Pirate是Dangerous Prototypes开发的一款开源硬件设备，可以让我们与设备直接"对话”。
它通过使用多种标准协议和命令行界面，实现了对芯片的调试、编程和质询。更多信息参见：
http://dangerousprototypes.com/bus-pirate-manual/
A.7.6 GoodFET
Travis Goodspeed开发的GoodFET是一款开源的flash模拟工具和JTAG适配器。它在很多方
面都类似于Bus Pirate，但是基于不同的硬件。更多信息参见：http://goodfet.sourceforge.net/。
A.7.7Total Phase Beagle USB
TotalPhase的USB分析仪产品线可以帮助我们监控以多种速度经过USB连接的数据。它包
含了定制化软件，就算传输的数据格式是特殊定制的，对数据通信进行解码也变得较为容易。更
多信息参见：http://www.totalphase.com/protocols/usb/。
A.7.8Facedancer21
Travis Goodspeed的 Facedancer21是一款开源的硬件设备，用于模拟 USB从设备或USB主
---
## Page 401
附录A工具385
设备（USBHost模式）在与另一个USB设备配对连接之后，可以用Python编写模拟代码、以
任意方式响应那个设备。因此，可以用它对USB进行模棚测试，或者模拟任何想象得到的USB
设备。更多关于Facedancer 的信息参见：http://goodfet.sourceforge.net/hardware/facedancer21/，可
以从这里购买到已经组装好的硬件：http://int3.cc/products/facedancer21。
A.7.9TotalPhaseBeagle I°C
Total Phase的IC主机适配器产品线用于通过IC总线接口与外设进行通信。它通过USB接
口插入主机，提供了定制软件用于简化1C通信。更多信息参见：http://www.totalphase.com
protocols/i2c/。
A.7.10Chip Quik
ChipQuik焊膏可以用于移除电路板的表面贴装器件。由于标准焊锡会瞬间凝固，熔点较高
的ChipQuik焊膏可以使焊锡长时间保持液体状态，从而便于将各个零件拆除出来。关于ChipQuik
的更多信息参见：http:/www.chipquikinc.com/，所有电子设备供应商几平均有销售。
A.7.11热风枪
一把电吹风机。
A.7.12XeltekSuperPro
Xeltek公司的SuperPro产品线用于读写各类不同的闪存存储。Xeltek生产了多种适配器，用
于支持许多不同的形状系数，并且提供专门的软件让这些读写操作变得更为容易。关于Xeltek
产品的更多信息参见：http://www.xeltek.com/。
A.7.13IDA
Hex-Rays公司的IDA产品让我们可以深入了解闭源软件。它有一个受限的免费版本和一个
Pro版本。Pro版本支持多种指令集和二进制文件格式。可以从https://www.hex-rays.com/products
ida/index.shtml了解到更多IDA的信息并下载免费版本。
---
## Page 402
附录B
开源代码库
Android操作系统的绝大部分代码是开源的。尽管这个系统有一部分组件是闭源的，但依然
有相当多的系统代码以宽松的开源许可（BSD或Apache）或以对修改进行开源的开源许可（GPL）
发布。由于GPL的限制，这个生态系统中的许多设备厂商必须保证将其对源代码的修改公开发
布出来。附录B主要介绍这些可以公开获得的Android设备构建源代码。
B.1谷歌
正如第1章所述，谷歌是Android系统的发起者。谷歌秘密地开发Android新版本，然后在
该版本发布时将代码贡献到AOSP（AndroidOpenSourceProject）。谷歌提供了许多文档来说明如
何访问这些代码，不过为了方便读者，本书再次进行介绍。
B1.1.AOSP
AOSP由许多Git仓库构成，这叁仓库包括Android系统中所有开源的代码。这里简直就是
“贩卖”Android中所有东西的大超市，也是OEM构建固件镜像的上游起点。除了各类运行时组
件的源代码，AOSP还提供了一个完整的构建环境，以及NDK和SDK的源代码，等等。我们甚
至可以从AOSP中编译出完整的Nexus设备镜像文件，不过其中几个组件仅以二进制形式提供。
每个Android设备都有两块主要的组件：平台（platform）和内核（kemel）。对Nexus 设备
面言，这两块组件都已经被完整地包含在AOSP中了。AOSP仓库曾经和Linux内核源代码存放
在一起，现在则改为存放在谷歌自己的服务器上，URL是：https://android-googlesource.com/。
AOSP使用一个名为repo的专门工具来组织和管理这些Git仓库。在谷歌的官方文档中，可
以找到这个工具的使用方法并下载完整的源代码：http://source.android.com/source/downloading.
html。
除了将整个AOSP代码库或其中部分代码下载到本地，谷歌还通过GoogleCode站点提供了
个源代码浏览工具：https://code.google.com/p/android-source-browsing/。
第10章已经介绍，内核的源代码仓库是根据其支持的系统芯片（System-on-Chip，SoC）来
划分的。这些 SoC包括德州仪器TI的OMAP、高通的 MSM、三星的 Exynos、Nvidia 的 Tegra
以及模拟器（goldfish）。这些仓库的上游源代码由各个SoC厂商自己维护，不过谷歌还存储了用