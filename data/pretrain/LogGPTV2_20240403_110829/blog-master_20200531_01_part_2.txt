clean:  
    rm extern.o main.o  
    rm main  
```  
#### 29、static 修饰   
https://www.runoob.com/w3cnote/c-static-effect.html  
https://blog.csdn.net/keyeagle/article/details/6708077  
https://blog.csdn.net/m0_37789800/article/details/80370556  
https://www.cnblogs.com/hellocby/p/3543989.html  
在C语言中，static的字面意思很容易把我们导入歧途，其实它的作用有三条。  
（1）先来介绍它的第一条也是最重要的一条：隐藏。  
对于函数来讲，static的作用仅限于隐藏，而对于变量，static还有下面两个作用。  
（2）static的第二个作用是保持变量内容的持久。存储在静态数据区的变量会在程序刚开始运行时就完成初始化，也是唯一的一次初始化。  
共有两种变量存储在静态存储区：全局变量和static变量，只不过和全局变量比起来，static可以控制变量的可见范围，说到底static还是用来隐藏的。  
```  
#include   
int fun(void){  
    static int count = 10;    // 事实上此赋值语句从来没有执行过, 静态存储区的内容, 刚开始运行时初始化了   
    return count--;  
}  
int count = 1;  
int main(void)  
{      
    printf("global\t\tlocal static\n");  
    for(; count   
int a;  
int main(void)  
{  
    int i;  
    static char str[10];  
    printf("integer: %d;  string: (begin)%s(end)", a, str);  
    return 0;  
}  
```  
程序的运行结果如下  
```  
integer: 0; string: (begin)(end)  
```  
最后对static的三条作用做一句话总结。首先static的最主要功能是隐藏，其次因为static变量存放在静态存储区，所以它具备持久性和默认值0。  
#### 30、const 修饰   
const 推出的初始目的，正是为了取代预编译指令，消除它的缺点，同时继承它的优点。  
https://baike.baidu.com/item/CONST/1036  
```  
（1）可以定义const常量，具有不可变性。  
  例如：const int Max=100; Max++会产生错误;  
（2）便于进行类型检查，使编译器对处理内容有更多了解，消除了一些隐患。  
  例如： void f(const int i) { .........} 编译器就会知道i是一个常量，不允许修改；  
（3）可以避免意义模糊的数字出现，同样可以很方便地进行参数的调整和修改。 同宏定义一样，可以做到不变则已，一变都变！  
  如（1）中，如果想修改Max的内容，只需要它修改成：const int Max=you want;即可！  
（4）可以保护被修饰的东西，防止意外的修改，增强程序的健壮性。 还是上面的例子，如果在函数体内修改了i，编译器就会报错；  
  例如： void f(const int i) { i=10;//error! }  
（5） 可以节省空间，避免不必要的内存分配。 例如：  
  #define PI 3.14159 //常量宏  
  const double Pi=3.14159; //此时并未将Pi放入ROM中 ......  
  double i=Pi; //此时为Pi分配内存，以后不再分配！  
  double I=PI; //编译期间进行宏替换，分配内存  
  double j=Pi; //没有内存分配  
  double J=PI; //再进行宏替换，又一次分配内存！  
  const定义常量从汇编的角度来看，只是给出了对应的内存地址，而不是像#define一样给出的是立即数，所以，const定义的常量在程序运行过程中只有一份拷贝，而#define定义的常量在内存中有若干份拷贝。  
（6） 提高了效率。  
  编译器通常不为普通const常量分配存储空间，而是将它们保存在符号表中，这使得它成为一个编译期间的常量，没有了存储与读内存的操作，使得它的效率也很高。  
例：为什么下面的例子在使用一个const变量来初始化数组，ANSI C的编译器会报告一个错误呢？  
const int n = 5;  
int a[n];  
答案与分析：  
1）这个问题讨论的是“常量”与“只读变量”的区别。常量，例如5， "abc"，等，肯定是只读的，因为常量是被编译器放在内存中的只读区域，当然也就不能够去修改它。而“只读变量”则是在内存中开辟一个地方来存放它的值，只不过这个值由编译器限定不允许被修改。C语言关键字const就是用来限定一个变量不允许被改变的修饰符（Qualifier）。上述代码中变量n被修饰为只读变量，可惜再怎么修饰也不是常量。而ANSI C规定数组定义时长度必须是“常量”（C99标准，数组下标可以用变量来表示），“只读变量”也是不可以的，“常量”不等于“不可变的变量”。但是在C++中，局部数组是可以使用变量作为其长度的。  
2）但是在标准C++中，这样定义的是一个常量，这种写法是对的。实际上，根据编译过程及内存分配来看，这种用法本来就应该是合理的，只是ANSI C对数组的规定限制了它（实际上用GCC或VS2005编译以上代码，确实没有错误产生，也没有给出警告）。  
3）那么，在ANSI C中用什么来定义常量呢？答案是enum类型和#define宏，这两个都可以用来定义常量。  
例：下面的代码编译器会报一个错误，请问，哪一个语句是错误的呢？  
typedef char * const pStr;  
char string[4] = "bbc";  
const char *p1 =" string"; //1式  
const pStr p2 =" string"; //2式  
p1++;  
p2++;  
答案与分析：  
问题出在p2++上。  
1）const使用的基本形式： const type m;限定m不可变。替换基本形式中的m为1式中的*p1，替换后const char *p1;限定*p1不可变，当然p1是可变的，因此问题中p1++是对的。替换基本形式中的type为2式中的pStr，替换后const pStr m;限定m不可变，题中的pStr就是一种新类型，因此问题中p2不可 [1]  变，p2++是错误的。  
例一  
下面分别用const限定不可变的内容是什么？  
1）const在前面  
const int nValue； //int是const  
const char *pContent; //char是const, pContent可变  
const char* const pContent; //pContent和*pContent都是const  
2）const在后面，与上面的声明对等  
int const nValue; //nValue是const  
char const * pContent; //*pContent是const, pContent可变  
char* const pContent; //pContent是const,*pContent可变  
char const* const pContent; //pContent和*pContent都是const  
答案与分析：  
const和指针一起使用是C语言中一个很常见的困惑之处，在实际开发中，特别是在看别人代码的时候，
常常会因为这样而不好判断作者的意图，下面讲一下我的判断原则：  
const只修饰其后的变量，至于const放在类型前还是类型后并没有区别。
如：const int a和int const a都是修饰a为const。注意*不是一种类型，如果*pType之前是某类型，那么pType是指向该类型的指针  
一个简单的判断方法：指针运算符*，是从右到左，那么如：char const * pContent，可以理解为char const (* pContent)，即* pContent为const，而pContent则是可变的。  
例二  
int const * p1,p2;  
p2是const；(*p1)是一整体，因此(*p1)是const，但p1是可变的。int * p1,p2只代表p1是指向整型的指针，
要表示p1、p2都是指针是需写成int * p1,* p2。所以无论是* const p1,p2还是const * p1,p2，里面的*都是属于p1的。  
例三  
int const * const p1,p2;  
p2是const，是前一个const修饰的，*p1也被前一个const修饰，而p1被后一个const修饰。  
例四  
int * const p1,p2;  
p1是const，（* const p1）是整体，所以const不修饰p2。  
例五  
指针指向及其指向变量的值的变化  
const在*的左边，则指针指向的变量的值不可直接通过指针改变（可以通过其他途径改变）；
在*的右边，则指针的指向不可变。简记为“左定值，右定向”。  
1）指针指向的变量的值不能变，指向可变  
int x = 1;  
int y = 2;  
const int* px = &x;  
int const* px = &x; //这两句表达式一样效果  
px = &y; //正确，允许改变指向  
*px = 3; //错误，不允许改变指针指向的变量的值  
2）指针指向的变量的值可以改变，指向不可变  
int x = 1;  
int y = 2;  
int* const px = &x;  
px = &y; //错误，不允许改变指针指向  
*px = 3; //正确，允许改变指针指向的变量的值  
3）指针指向的变量的值不可变，指向不可变  
int x = 1;  
int y = 2;  
const int* const px = &x;  
int const* const px = &x;  
px = &y; //错误，不允许改变指针指向  
*px = 3; //错误，不允许改变指针指向的变量的值  
```  
#### 31、C语言标准  
C语言最初由 Dennis Ritchie 于 1969 年到 1973 年在 AT&T 贝尔实验室里开发出来，
主要用于重新实现 Unix 操作系统。此时，C语言又被称为 K&R C。其中，K 表示 Kernighan 的首字母，而 R 则是 Ritchie 的首字母。  
C90 标准:   
由于C语言被各大公司所使用（包括当时处于鼎盛时期的 IBM PC），因此到了 1989 年，
C语言由美国国家标准协会（ANSI）进行了标准化，此时C语言又被称为 ANSI C。  
而仅过一年，ANSI C 就被国际标准化组织 ISO 给采纳了。此时，C语言在 ISO 中有了一个官方名称——ISO/IEC 9899: 1990。其中：  
- 9899 是C语言在 ISO 标准中的代号，像 C++ 在 ISO 标准中的代号是 14882；  
- 而冒号后面的 1990 表示当前修订好的版本是在 1990 年发布的。  
C99标准:   
在随后的几年里，C语言的标准化委员会又不断地对C语言进行改进，到了 1999 年，正式发布了 ISO/IEC 9899: 1999，简称为 C99 标准。  
C11标准:   
2007 年，C语言标准委员会又重新开始修订C语言，到了 2011 年正式发布了 ISO/IEC 9899: 2011，简称为 C11 标准。  
编译器不一定完全支持所有标准, 或者编译时使用参数指定兼容什么标准.   
gcc 帮助文档  
```  
       -std=  
Determine the language standard.   This option is currently only supported when compiling C or C++.  
The compiler can accept several base standards, such as c90 or c++98, 
and GNU dialects of those standards, such as gnu90 or gnu++98.  
When a base standard is specified, the  
compiler accepts all programs following that standard plus those using 
GNU extensions that do not contradict it.  For example, -std=c90 
turns off certain features of GCC that are  
incompatible with ISO C90, such as the "asm" and "typeof" keywords, 
but not other GNU extensions that do not have a meaning in ISO C90, such as omitting the middle term of a "?:"  
expression. On the other hand, when a GNU dialect of a standard is 
specified, all features supported by the compiler are enabled, even when those features change the meaning of  
the base standard.  As a result, some strict-conforming programs 
may be rejected.  The particular standard is used by -Wpedantic to identify which features are GNU extensions  
given that version of the standard. For example -std=gnu90 -Wpedantic 
warns about C++ style // comments, while -std=gnu99 -Wpedantic does not.  
A value for this option must be provided; possible values are  
c90  
c89  
iso9899:1990  
Support all ISO C90 programs (certain GNU extensions that conflict with ISO C90 are disabled).   
Same as -ansi for C code.  
iso9899:199409  
ISO C90 as modified in amendment 1.  
c99  
c9x  
iso9899:1999  
iso9899:199x  
ISO C99.  Note that this standard is not yet fully supported; 
see  for more information.  
The names c9x and iso9899:199x are deprecated.  
c11  
c1x  
iso9899:2011  
ISO C11, the 2011 revision of the ISO C standard.  
Support is incomplete and experimental.  The name c1x is deprecated.  
```  
#### 32、typedef  
typedef 关键字，使用它来为类型取一个新的名字。  
```  
typedef char * const pStr;   
typedef unsigned char BYTE;   
```  
#### 33、其他  
```  
#include  
#define  
#undef  
#ifdef  
#ifndef  
#else  
#endif  
#if defined  
#elif defined  
#else  
#endif  
```  
## 参考  
https://www.cprogramming.com/tutorial/c-tutorial.html  
好习惯 https://www.cprogramming.com/how_to_learn_to_program.html?inl=pf  
https://www.cprogramming.com/beginner_programming_mistakes.html  
gbd 使用 https://www.cprogramming.com/gdb.html  
https://www.cprogramming.com/debuggers.html  
https://blog.csdn.net/gatieme/article/details/44678447  
https://www.cnblogs.com/Lunais/p/5991135.html  
https://www.cnblogs.com/zhongguo135/p/9489081.html  
https://www.runoob.com/w3cnote/c-static-effect.html  
https://baike.baidu.com/item/CONST/1036  
http://c.biancheng.net/view/143.html  
https://www.zhihu.com/question/23477473  
https://faq.cprogramming.com/cgi-bin/smartfaq.cgi  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")