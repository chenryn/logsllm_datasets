 0.92
 0.9
 0.88
 0.86
 0.84
 0.82
 0.8
Less than 30 days
30
Spamtrap 1
Spamtrap 2
Organization
50
60
40
Days to Listing
Figure 3: Time-to-listing for the Spamhaus blacklist for IP ad-
dresses that were unlisted at the time spam was received, but
were eventually blacklisted. Note: y-axis starts at 0.8.
based on email sending patterns, rather than the reputation of an IP
address alone.
2.3 The Case for Behavioral Blacklisting
Although individual IP addresses’ sending behavior may change
across time, we posit
that (1) the sending patterns exhibited
by spammers are sufﬁciently different from those of legitimate
senders; and (2) those patterns become more evident when email
senders can be observed across many receiving domains. Based
on these two hypotheses, the rest of the paper proposes a sys-
tem called SpamTracker, which proactively blacklists email senders
based on the set of domains they target. SpamTracker relies on a
technique that we call behavioral blacklisting, which attempts to
classify based on their network behavior, rather than their identity
or the contents of the emails they send. While individual IP ad-
dresses may be ephemeral, they may exhibit “familiar” spamming
patterns (i.e., similar to those of already well-known spamming IP
addresses) that become evident when sending patterns are observed
across multiple domains.
3. CLUSTERING ALGORITHM
SpamTracker uses a spectral clustering algorithm proposed and
analyzed by Kannan et al. [18] and made efﬁcient in practice by
Cheng et al. [7]. Section 3.1 presents an overview of the spectral
clustering approach, and Section 3.2 describes how we apply spec-
tral clustering within SpamTracker.
3.1 Spectral Clustering
Spectral clustering refers to partitioning algorithms that rely on
the principal components of the input. There are generally two basic
variants which can be viewed as (a) one-shot or (b) recursive. Given
an object-feature matrix A with the goal of clustering the objects
(rows) of A, a one-shot algorithm would ﬁnd the top few singular
vectors of A (say k) and either project to their span or create a
cluster for each one by assigning each row to that vector in which
it has the largest component. A recursive algorithm, on the other
hand, uses one singular vector to partition the rows and recurses on
the two parts. We focus on this type of algorithm.
The method in Cheng et al. [7] (“EigenCluster”) has two phases:
a top-down divide phase and a bottom-up merge phase. In the divide
phase, the algorithm normalizes a given nonnegative input matrix so
that all rows have the same sum, then computes the second largest
right singular vector. It sorts the rows according to their compo-
nents in this vector and partitions this sequence at the point where
the corresponding cut has minimum conductance (among the n− 1
possible cuts of the sequence). The conductance of a partition is the
total weight of entries across the partition divided by the smaller
P|c|
i=1 M(cid:2)
|c|
c(i)
cavg =
where M(cid:2)
c(i) is the submatrix comprising the rows of cluster c. In
the classiﬁcation stage, SpamTracker accepts a 1 × d vector r that
corresponds to the recent behavior of an IP. It then calculates a score
S(r) for this queried IP address using the following equation.
sim(r, c) =
r · cavg
|cavg|
(1)
Intuitively, sim(r, c) measures the similarity of the row vector r to
cluster c by performing an inner product of r with the normalized
average of rows in cluster c. A cluster that has a similar set of target
domains as r would have a large inner product.
We calculate the spam score S(r) as the maximum similarity of
r with any of the clusters.
S(r) = max
sim(r, c).
c
(2)
S can be used to ﬁlter or greylist (i.e., temporarily reject with the
assumption that a legitimate mail sender will eventually retry) spam
by a mail service provider at or before the SMTP dialogue stage. We
set a threshold such that if the row for an IP that is looked up has
score higher than the threshold, it is ﬂagged as spam. The threshold
can be different for each cluster.
Querying an IP address is inexpensive: only Equations 1 and 2
need to be computed per lookup. The next section explains the de-
sign of SpamTracker in detail and the optimizations we use to im-
prove the lookup speed and the overall robustness of the system.
4. DESIGN
This section describes how SpamTracker can be integrated into
an existing email infrastructure. We present a brief overview of the
system and then describe in detail its two basic operations: (1) com-
puting the clusters that form the basis of the classiﬁer; and (2) clas-
sifying a new IP address when it arrives.
4.1 Overview
The spectral clustering algorithm in Section 3.2 serves as the
back-end of SpamTracker. The behavioral classiﬁer that accepts
lookups from mail servers and assigns scores to the queried senders
forms the front-end. Figure 5 shows the high-level design of Spam-
Tracker and the interaction between the back-end (which performs
clustering and classiﬁcation operations) and the interface to mail
servers (which receives email sending patterns as input to the clus-
tering algorithm and answers queries about the status of any partic-
ular IP address); to an ordinary mail server, the interface to Spam-
Tracker looks like any other DNS-based blacklist, which has the
advantage that existing mail servers need only to be reconﬁgured to
incorporate SpamTracker into spam ﬁltering decisions. We discuss
how SpamTracker can be incorporated into existing infrastructure
in Section 6.2.
SpamTracker’s clustering algorithms rely on the assumption that
the set of domains that each spammer targets is often more stable
than the IP addresses of machines that the spammer uses to send the
mail. Rather than maintaining reputations of senders according to
their IP addresses, SpamTracker uses the vector representing how
a sender sends trafﬁc across domains, r, as a “behavioral ﬁnger-
print” and determines whether this ﬁngerprint resembles a known
spamming cluster. Section 4.2 describes how SpamTracker builds
clusters of known spammers, and Section 4.3 explains how Spam-
Tracker determines whether an email sender’s sending patterns re-
semble one of these clusters.
Figure 4: An IP× IP matrix of related spam senders; IP ad-
dresses that send mail to similar sets of domains are grouped
into distinct clusters; the intensity of a pixel at (i,j) indicates i’s
similarity to j.
of the total weights incident to each side [18, 33]. After ﬁnding
the partition, it recurses on each side until only singletons remain.
This completes the divide phase, whose end result is a tree (the root
represents all the rows, the leaves are individual rows). The merge
phase ﬁnds a tree-respecting partition, i.e., one where every clus-
ter corresponds to the entire subtree attached at some node of the
tree. For many objective functions, it does this by dynamic pro-
gramming, in a bottom-up fashion. The speciﬁc function we use for
the merge phase is called correlation clustering [7].
3.2 SpamTracker: Clustering Email Senders
SpamTracker classiﬁes an email sender purely based on its send-
ing behavior, ignoring content and variable handles for classiﬁca-
tion such as dynamically-allocated IP addresses. The intuition be-
hind SpamTracker is that sending patterns of spamming hosts are
similar to other senders and remain relatively stable, even as the
IP addresses (or actual systems) that are sending the emails change.
Consider the case of a spamming bot: Whatever the particular spam-
ming behavior of a spamming bot, it is likely to be similar to other
bots in its own botnet. Because botmasters in large botnets have
only coarse-grained control over their bots [26], spamming patterns
of bots will typically be similar across targeted domains even if each
bot sends low volumes of spam to each domain. Thus, clustering
spammers based on their sending patterns provides a way for their
early detection, irrespective of their particular identities (e.g., the IP
address) or blacklisting status. It follows from the above that, spam
sent from even a newly-enlisted bot (i.e., from an IP address that
has not been observed to send spam) will likely be caught by Spam-
Tracker because its behavior will cluster it with other known bots
in the botnet.
The SpamTracker algorithm proceeds in two stages: (1) clus-
tering and (2) classiﬁcation. In the unsupervised clustering stage,
SpamTracker accepts as input a n × d × t tensor M, where n is
the number of IP addresses that sent email to any of d domains
within any of t particular time windows. Thus, M (i, j, k) denotes
the number of times IP address i sent email to domain j in time
slot k. SpamTracker ﬁrst collapses the time axis to obtain an n × d
matrix M(cid:2)
:
tX
M(cid:2)(i, j) =
M (i, j, k).
k=1
It clusters the matrix M(cid:2)
using the spectral clustering algorithm
described in Section 3.1. The output of the clustering stage is the set
of clusters of IP addresses C = C1, C2, . . . , Ck, where ∪k
i=1Ci =
IPs in M and Ci ∩ Cj = φ for i (cid:4)= j. Logically, the set C consists
of groups of IPs in M that have similar behavior in their target
domains. Each cluster is associated with a trafﬁc pattern, obtained
by averaging the rows corresponding to IPs that fall in the cluster.
For a cluster c, we call this vector cavg.
4.2 Clustering
SpamTracker uses the spectral clustering algorithm from Sec-
tion 3.1 to construct the initial set of clusters. SpamTracker’s clus-
tering takes as input email sending patterns about conﬁrmed spam-
mers (i.e., the volume of email that each conﬁrmed spamming IP
address sends across some set of domains) over some time window
to construct the matrix M (i, j, k). This input requires two compo-
nents: (1) an initial “seed list” of bad IP addresses; and (2) email
sending patterns for those IP addresses. This section describes in
turn how SpamTracker might be able to acquire this type of data.
Data about spamming IP addresses is easy to obtain, and Spam-
Tracker could use any such initial list of IP addresses to “bootstrap”
its initial clusters. For example, an Internet Service Provider (ISP)
that uses conventional SpamAssassin [35] ﬁlters to ﬁlter spam could
use that list of IP addresses as its initial spammer IP addresses to be
used for the basis for clustering.
The sending patterns of each of the spamming IP addresses is
more difﬁcult to obtain because it requires visibility into the emails
that many domains have received. Our evaluation of SpamTracker
(Section 5) uses an email hosting provider’s decisions about early
mail rejects from hundreds of domains to compute these clusters,
but, in practice, other systems like SpamTracker could also likely
gain access to such data.
To build the rows in M for each spamming IP address, participat-
ing domains could submit IP addresses that they have conﬁrmed to
be spammers as they do with blacklists, but based on our ﬁndings
of the “low and slow” sending patterns of spammers (Section 2),
SpamTracker will be most effective if it maintains sending patterns
across domains for as many IP addresses as possible and subse-
quently clusters based on some subset of those that are labelled
as spam by at least one domain. Fortunately, SpamTracker could
obtain these sending patterns from receiving mail servers’ queries
to the classiﬁer4, at least from some subset of trusted domains.5
Speciﬁcally, a lookup for IP address a from domain d is a reason-
able indicator that a has sent email to d, so SpamTracker can build
vectors for all such addresses a and later build the matrix M from
just those addresses that are conﬁrmed to be spammers.
4.3 Classiﬁcation
SpamTracker maintains a vector representing the sending pattern,
r, for each IP address a compiled from reports from the mail servers
of participating domains. SpamTracker collects these sending pat-
terns as mail servers from trusted participating domains perform
lookups to SpamTracker on address a, using the same method for
collecting these patterns for all IP addresses during the clustering
phase (described in Section 4.2).
Given an r for some IP address a, SpamTracker returns a score
S(r) (computed using Equation 2, Section 3.2) whose magni-
tude determines how closely this ﬁngerprint resembles a conﬁrmed
spamming pattern (i.e., cluster). SpamTracker can simply return
S(r) to the querying mail server, which can then incorporate this
score into its existing mail ﬁltering rules. An important beneﬁt of
the classiﬁcation process is that S(r) can be computed using only
an IP address’s r vector and the cavg rows for the spam clusters,
both of which can be replicated and distributed (providing robust-
ness against attack, as well as load balance). Clustering requires
‘r’ vectors from as many IP addresses as possible; even though
it requires aggregating sending information from many sending
domains (and, hence, from potentially many SpamTracker repli-
4Note that the query mechanism needs a way of ﬁnding the email
domain name of the organization performing the query. DNS re-
verse lookups, or extra information in the query packets, could pro-
vide such a mechanism.
5Because previous work has observed that bots occasionally per-
form reconnaissance queries against blacklists [29], we cannot as-
sume that all queries to the blacklist reﬂect the receipt of email by
a mail server.
Figure 5: The high-level design of SpamTracker. The cluster-
ing component of SpamTracker accepts information about email
senders as an IP ×domain×time tensor and computes clusters
of related senders (and corresponding average vectors). The
classiﬁcation component accepts queries for IP addresses and
returns a score, S(r), for the IP’s behavior.
cas), this aggregation and clustering can be performed on a slower
timescale than classiﬁcation.
4.4 Tracking Changes in Sending Patterns
SpamTracker must recompute new clusters as sending patterns
change. Our implementation of SpamTracker reclusters at ﬁxed
intervals, but in practice SpamTracker might only recluster when
sending patterns no longer map to any existing clusters. Re-
clustering cost (time, memory, CPU) increases with larger input ma-
trices, so clustering on very large time windows may be impractical.
We use an efﬁcient re-clustering method that preserves historical in-
formation but keeps clustering cost approximately constant. At the
beginning of each clustering phase, we add all average rows from
the previous clustering stage scaled by the size of the cluster each
row represents, which produces the effect of clustering on the input
of both stages without the added cost.
5. EVALUATION
This section describes the evaluation of SpamTracker. In a real
deployment, SpamTracker could compute clusters based on send-
ing patterns across many domains for some time interval. To emu-
late this scenario, we construct the SpamTracker classiﬁer by con-
structing M (i, j, k) from the email logs of a large organization that
manages mail servers for hundreds of domains. We use the matrix
for time window at [t, t + Δt) to build the classiﬁer, and the data