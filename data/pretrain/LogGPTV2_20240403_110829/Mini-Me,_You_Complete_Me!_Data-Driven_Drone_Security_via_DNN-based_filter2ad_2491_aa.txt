title:Mini-Me, You Complete Me! Data-Driven Drone Security via DNN-based
Approximate Computing
author:Aolin Ding and
Praveen Murthy and
Luis Garcia and
Pengfei Sun and
Matthew Chan and
Saman A. Zonouz
Mini-Me, You Complete Me! Data-Driven Drone Security
via DNN-based Approximate Computing
University of Southern California ISI
Luis Garcia
PI:EMAIL
Saman Zonouz
Rutgers University
Aolin Ding
Rutgers University
PI:EMAIL
Praveen Murthy
Swirlds Inc.
PI:EMAIL
Pengfei Sun
F5 Networks
PI:EMAIL
Matthew Chan
Rutgers University
PI:EMAIL
PI:EMAIL
ABSTRACT
The safe operation of robotic aerial vehicles (RAV) requires effective
security protection of their controllers against cyber-physical at-
tacks. The frequency and sophistication of past attacks against such
embedded platforms highlight the need for better defense mecha-
nisms. Existing estimation-based control monitors have tradeoffs,
with lightweight linear state estimators lacking sufficient cover-
age, and heavier data-driven learned models facing implementation
and accuracy issues on a constrained real-time RAV. We present
Mini-Me, a data-driven online monitoring framework that mod-
els the program-level control state dynamics to detect runtime
data-oriented attacks against RAVs. Mini-Me leverages the internal
dataflow information and control variable dependencies of RAV
controller functions to train a neural network-based approximate
model as the lightweight replica of the original controller programs.
Mini-Me runs the minimal approximate model and detects mali-
cious control state deviation by comparing the estimated outputs
with those outputs calculated by the original controller program. We
demonstrate Mini-Me on a widely adopted RAV physical model as
well as popular RAV virtual models based on open-source firmware,
ArduPilot and PX4, and show its effectiveness in detecting five
types of attack cases with an average 0.34% space overhead and
2.6% runtime overhead.
CCS CONCEPTS
• Security and privacy → Intrusion/anomaly detection and
malware mitigation; • Computer systems organization→ Em-
bedded and cyber-physical systems.
KEYWORDS
Robotic Vehicle, Cyber-physical System Security, Intrusion Detec-
tion, Control Semantics, Neural Networks, Control Estimation
ACM Reference Format:
Aolin Ding, Praveen Murthy, Luis Garcia, Pengfei Sun, Matthew Chan,
and Saman Zonouz. 2021. Mini-Me, You Complete Me! Data-Driven Drone
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
RAID ’21, October 6–8, 2021, San Sebastian, Spain
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-9058-3/21/10...$15.00
https://doi.org/10.1145/3471621.3471869
Security via DNN-based Approximate Computing. In 24th International
Symposium on Research in Attacks, Intrusions and Defenses (RAID ’21), Oc-
tober 6–8, 2021, San Sebastian, Spain. ACM, New York, NY, USA, 14 pages.
https://doi.org/10.1145/3471621.3471869
1 INTRODUCTION
Robotic aerial vehicles (RAVs), such as drones, are a type of au-
tonomous cyber-physical system (CPS). RAVs are typically an inter-
connected integration of sensing, actuation, and control algorithms.
The sensor components perceive the physical environment state,
and controllers carry out system-wide automatic operations relying
on processor-based algorithms and control logic. The calculated
output values are sent to underlying actuators, e.g., the motors of
a drone. RAVs have been adopted in a wide range of public and
civilian applications such as package delivery services [10, 18] and
urban planning [41]. Meanwhile, the widely available RAVs face
substantive emergent threats stemming from cyber-physical vulner-
abilities. The most common types of vulnerabilities are categorized
as either control-flow attacks or data-oriented attacks.
Control-flow attacks originate from a software vulnerability and
enable attackers to substitute or subvert the program’s logic by hi-
jacking its control flow. The traditional control-flow attacks includ-
ing code reuse attacks [62, 73] and control flow hijacking [22, 70] are
well studied and defended by classic security solutions such as con-
trol flow integrity [15, 30, 76] and memory protection [17, 28, 47, 51,
58, 81]. Data-oriented1 attacks exploit the RAV’s attack surfaces ex-
isting on the external sensor readings and remote configuration in-
terfaces [48, 49]. GPS and sensor spoofing attacks [31, 46, 68, 74, 79]
demonstrate that vulnerable sensor systems could lead to unsafe
controller misbehaviors in consumer-grade RAVs.
Since the physical attacks and control semantic bugs are ex-
posed as new challenging security threats, research efforts [25, 27,
37, 49, 59] have been made to counter the data-oriented threats
involving both physical components and control parameters. Gen-
erally, defenses aim to detect any model trajectory discrepancies
by modeling the drone’s operational behaviors. The models are
either formally derived or data-driven. Classical control modeling
approaches [16, 27, 37] are used to estimate a vehicle’s characteris-
tics and control algorithms, but only using a linear control model
to estimate a limited number of state variables lacks sufficient com-
pleteness. Meanwhile, formal verification works [35, 57, 84] have
1We mainly focus on data-oriented attacks as the external physical attacks and internal
control parameter attacks against RAV cyber-physical components that will eventually
impact the physical operation of the RAV, leading to unsafe flight modes.
428leveraged formal software methods to verify controller semantics
before executing a safety-critical control program. However, of-
fline verification approaches often suffer from the state-space (e.g.,
execution path) explosion problem as complexity scales and their
non-negligible overheads often outweigh the potential protection
for RAVs–especially when considering real-time constraints.
Recently, more works have leveraged advancements in machine
learning (ML) to capture the dynamic, non-linear behavior of com-
plex cyber-physical systems and detect abnormalities [14, 24, 40, 44,
60, 71]. However, these systems typically treat the cyber-physical
dynamics as a blackbox, i.e., the associated deep learning models
aim to capture the input-to-output relationships of the entire CPS.
First, such models require large amounts of training data to capture
all the control states with all possible contingencies. More critically,
the prior ML-based estimation works only consider the sensor-
measured control dynamics and configurable control parameters
without exploring any intermediate controller semantics. Thus they
can only detect discrepancies at a macro-scale for the overall sys-
tem, but they cannot pinpoint the compromised cyber-physical
module that leads to this failure. Moreover, these solutions barely
pay attention to real-time constraints when performing on-board
intrusion detection especially on embedded systems like RAVs.
In this paper, we propose Mini-Me, a runtime solution to mon-
itor end-to-end control logic execution through changes in state
variable (i.e., from control state inputs to calculated actuation out-
puts). Mini-Me can detect data-oriented exploits, which includes
the external physical attacks (e.g., sensor/signal spoofing attacks)
and internal control parameter manipulations (e.g., deciding control
variables in essential control logic) leading to unsafe physical states.
Mini-Me protects the RAV against these attacks by running a ma-
chine learning-based approximate computing model to compare the
expected control state outputs and perceived outputs. In particular,
Mini-Me is able to learn and approximate more advanced control
algorithms (e.g., high-order and non-linear portion), which are usu-
ally represented as linear components in control state estimation
works [27, 37] without adequate attention to its comprehensiveness
examination. Mini-Me is designed to create a lightweight replica of
a concrete control software snippet with respect to the transparent
model construction, which is underemphasized in previous learning-
based intrusion detectors. Meanwhile, the model construction in
Mini-Me successfully responds to the “data hunger" demands of
training an accurate and converged learning model.
Mini-Me first identifies the control algorithms associated with
vehicle dynamics. Then Mini-Me utilizes the dataflow analysis to
determine the state variable changes and their mutual dependencies
in the targeted controller software segment. Based on the identified
controller variables, Mini-Me collects the training dataset in benign
experiments and trains an adaptive neural network (NN) model to
approximate the logic behaviors of the target controller snippet,
which owns identical semantics but in different representations.
Mini-Me simplifies the trained model and deploys it in a RAV for
online monitoring. Mini-Me detects the RAV’s operational abnor-
mality by validating the deviation of the expected state outputs
from the approximate model and the perceived outputs from the
running control logic.
The contributions of the paper are as follows:
Figure 1: RAV vehicle dynamics and main control loop
• We present a novel, on-board intrusion detector utilizing
program-level dataflow analysis to define and construct se-
mantically similar approximate models for the RAV’s linear
and nonlinear controller programs.
• We design a lightweight neural network model with explain-
able architecture that can be optimized for practical RAV
deployments.
• We validate our proposed online monitoring framework
against different attack scenarios amidst multiple RAVs’ run-
time flight missions.
The structure of this paper is as follows: Section 2 provides
background on the RAV control model and program-level dataflow
analysis. Section 3 presents the limitations of previous works and
challenges which motivate our overall design and the threat model
of our work. Section 4 describes the prototype design of our solution
and technical details. Section 5 presents the experiment setup and
practical attack cases on multiple physical and virtual RAVs [11, 12].
Section 7 gives a overview of related work in the RAV security
domain. We summarize our works and conclude in Section 8.
2 BACKGROUND
In this section, We briefly present the generic RAV control models
(e.g, quad-copter) and program-level dataflow analysis.
2.1 RAV Control Model
The RAV control model is an integration of vehicle dynamics and
control algorithms. The vehicle dynamics reflects the attitude and
movement of a RAV, which encompass six degrees of freedom
(6DoF) including the three axes (x, y, z) and the three rotation di-
rections (roll: ϕ, pitch: θ and yaw: ψ) as shown in Fig 1. Linear
and nonlinear controllers are utilized to control the RAV’s position,
attitude, velocity and movements for each corresponding axis. For
instance, the cascaded PID controllers adjust the RAV’s attitude by
tuning the control inputs in a closed loop. In a typical implementa-
tion of the RAV control model, the main control loop receives the
sensor measurements (e.g., accelerator, gyroscope) and calculates
the next control outputs in the controller module (e.g., proportional-
integral-derivative: PID) based on the observed current state. Then
the actual signals will be sent to actuators (e.g., motors) to control
the vehicle’s operations. In a flight mission (e.g., path following),
these modules execute periodically until the completeness of the
mission (e.g., arrive at the last waypoint).
2.2 Dataflow Analysis
To investigate the internal variable changes and dependencies in
RAV controller algorithms, the dataflow analysis is used to deter-
mine the inputs and outputs of specific code snippets by collecting
2
Sensor ModuleController ModuleActuator Module!"#!"#429semantic information with reverse engineering tools. Dataflow
analysis covers all paths through the program including infeasible
paths. To carry out dataflow analysis [19, 32, 65], the first step is
to generate a control flow graph (CFG), a directed graph in which
nodes correspond to statements and edges represent possible exe-
cution paths. Considering traversal directions between the basic
blocks, dataflow analysis can be naturally classified into forward
analysis and backward analysis. Reaching-Definition Analysis is a
typical forward dataflow analysis schema, in which dataflow has
the same direction as control flow. The basic dataflow information
at each program point includes the define and the use of variables.
An assignment operation or value modification defines a variable
at that point. Meanwhile, an operation making a read reference
to a variable uses it. If one variable is defined first then used after
previous definition, this use-after-define indicates it could be a inter-
mediate variable (e.g., temporary variable in value propagation). For
a practical dataflow analysis, it usually starts with every instruction
and computes its use and define sets at that each program point. In
a basic block consisting of multiple instructions, it can merge all
the dataflow information in an iterative updating framework and
eventually determine the broader scope of the input and output sets
for that entire basic block. By using such dataflow analysis, we can
precisely track the value changes of those control state variables
(e.g., roll angle, control gains) in RAVs, which provides the surface
to learn and approximate their operational behaviors.
3 MOTIVATION AND THREAT MODEL
Limitations of Existing Detection Methods. The safe and robust
operation of RAVs relies on the various linear and nonlinear con-
trol subsystems. An obvious manner to check controller states is
adding redundancy or duplication of the controller to provide a
failsafe backup. However, in many cases, and especially in a RAV,
duplication of the entire controller is infeasible in such resource-
constrained embedded systems. Therefore, a state estimator is com-