```
We managed to draw an X somewhere. This must be the equivalent of coloring a Nonogram cell. With a good share of trial and error we can map the different instructions available:
| Instruction | Encoding |
| ----------- | -------- |
| Do nothing  | 0b000    |
| Move right  | 0b001    |
| Move up     | 0b010    |
| Go to 0     | 0b011    | 
| Move left   | 0b100    |
| Move down   | 0b101    |
| Set white   | 0b110    |
| Set black   | 0b111    |
But if there are only 8 3-bit instructions, why is there need for 3 whole bytes? Well, that must be the reason the field is called "instructions" and not "instruction" - instructions can be chained and up to 8 instructions can be sent at a time.
All that's left is to send the appropriate instructions to solve the puzzle:
```python
from enum import Enum
from pwn import *
# https://github.com/fmakdemir/nonogram-solver/blob/master/nonogramsolver.py
import nonogramsolver
import requests
import json
import io
from unittest.mock import patch, mock_open
BASE_URL = "http://puzzle.shieldchallenges.com"
def get_puzzles():
    res = {}
    r = requests.get(f"{BASE_URL}/api/puzzle")
    puzzles = r.json()
    for puzzle in puzzles["puzzles"]:
        res[str(puzzle["id"])] = puzzle
    return res
def translate_puzzle(service_format):
    nonogram_solver_format = {
        "r" : [[int(x) for x in row.strip(" ").split(" ")] for row in service_format["rows"].split(",")],
        "c" : [[int(x) for x in column.strip(" ").split(" ")] for column in service_format["columns"].split(",")],
    }
    return nonogram_solver_format
def solve(puzzle):
    with log.progress('Solving Nonogram...'):
        puzzle_data = json.dumps(translate_puzzle(puzzle))
        with patch("builtins.open", mock_open(read_data = puzzle_data)) as mock_file:
            solver = nonogramsolver.NonogramSolver(mock_file)
            solver.solve()
            return solver
def print_solution(solution):
    print("")
    print(str(solution).replace("X", u"\u2588\u2588").replace(".", "  "))
    print("")
def get_token(puzzle_id):
    r = requests.get(f'{BASE_URL}/api/token', 
        json = {"username": "Test_User",
                "password": "SecretPassw0rd", 
                "puzzle_id": puzzle_id
        })
    resp_json = r.json()
    return resp_json["token"]
def send_command(puzzle_id, token, command):
   r = requests.patch(f'http://puzzle.shieldchallenges.com/api/puzzle/{puzzle_id}',
   json = {"instructions": f"{command:06X}"}, 
   headers = {
      'Authorization': 'Bearer {}'.format(token),
      'Content-Type': 'application/json'
   })
   return r.json()
class Instructions(Enum):
    DO_NOTHING  = 0b000
    MOVE_RIGHT  = 0b001
    MOVE_UP     = 0b010
    GO_TO_ZERO  = 0b011
    MOVE_LEFT   = 0b100
    MOVE_DOWN   = 0b101
    SET_WHITE   = 0b110
    SET_BLACK   = 0b111
COMMAND_BYTE_LENGTH      = 3
BITS_PER_BYTE            = 8
INSTRUCTION_BIT_LENGTH   = 3
INSTRUCTIONS_PER_COMMAND = COMMAND_BYTE_LENGTH * BITS_PER_BYTE // INSTRUCTION_BIT_LENGTH
def main():
    puzzles = get_puzzles()
    print("Available puzzles:")
    for puzzle in puzzles.values():
        print(f'\t{puzzle["id"]}: {puzzle["name"]}')
    puzzle_id = ""
    while puzzle_id not in puzzles.keys():
        puzzle_id = input("Please enter requested puzzle ID: ").strip()
    print(f"Selected puzzle: {puzzles[puzzle_id]['name']}")
    solution = solve(puzzles[puzzle_id])
    print_solution(solution)
    instructions = [Instructions.GO_TO_ZERO]
    for row in range(len(solution.NONO)):
        for col in range(len(solution.NONO[row])):
            if solution.NONO[row][col] == 1:
                instructions.append(Instructions.SET_BLACK)
            instructions.append(Instructions.MOVE_RIGHT)
        instructions.append(Instructions.MOVE_DOWN)
    log.info(f"Number of instructions: {len(instructions)}")
    token = get_token(puzzle_id)
    with log.progress('Sending instructions...') as p:
        while ( (len(instructions) > 0) and (token is not None) ):
            command = 0
            try:
                for i in range(INSTRUCTIONS_PER_COMMAND):
                    instruction = instructions.pop(0)
                    command = command << INSTRUCTION_BIT_LENGTH
                    command |= instruction.value
            except IndexError:
                pass
            p.status(f"Raw command: {command:06X}")
            resp_json = send_command(puzzle_id, token, command)
            token = resp_json.get("token", None)
    log.success(f"Flag: {resp_json['flag']}")
if __name__ == "__main__":
    main()
```
Output:
```console
root@kali:/media/sf_CTFs/shabak/Puzzle# python3 solve.py
Available puzzles:
    0: SpaceInvaders
    1: X
    2: 1337
    3: TopSecret
    4: StarOfDavid
    5: QR
Please enter requested puzzle ID: 0
Selected puzzle: SpaceInvaders
[+] Solving Nonogram...: Done
    ██          ██
      ██      ██
    ██████████████
  ████  ██████  ████
██████████████████████
██  ██████████████  ██
██  ██          ██  ██
      ████  ████
[*] Number of instructions: 155
[+] Sending instructions...: Done
[+] Flag: Try_Harder
root@kali:/media/sf_CTFs/shabak/Puzzle# python3 solve.py
Available puzzles:
    0: SpaceInvaders
    1: X
    2: 1337
    3: TopSecret
    4: StarOfDavid
    5: QR
Please enter requested puzzle ID: 3
Selected puzzle: TopSecret
[+] Solving Nonogram...: Done
                  ██████████████
              ████████████████████████
          ██████  ████    ████  ████████
        ████████  ████    ████        ████
      ████  ████  ████    ████          ████
    ██████  ████  ████    ████            ████
  ████████  ████  ████    ████              ████
  ████████  ████  ████    ████              ████
  ██  ████  ████  ████    ████                ████
████  ████  ████  ████    ████                ████
████  ████  ████  ████    ████                ████
████████    ████  ████    ████                ████
██████      ████  ████    ████                ████
████      ████    ████    ████                ████
████  ████████    ████    ████                ████
██████████        ████    ████                ████
██████          ████      ████                ████
  ████      ██████      ████                ████
  ██████████████        ████                ████
    ████████        ██████                ████
      ████        ██████                ████
        ████  ████████                ██████
          ████████                ██████
            ██████████████████████████
                ██████████████████
[*] Number of instructions: 910
[+] Sending instructions...: Done
[+] Flag: FLAG{S01ving_Puzz13s_Is_Fun!}
```