    110 * flag[28] + 23 * flag[28] * flag[28] + 32 * flag[28] * flag[28] * flag[28] + 127 == 32241127
    58 * flag[29] + 123 * flag[29] * flag[29] + 22 * flag[29] * flag[29] * flag[29] + 44 ==  26829959
    122 * flag[30] + 60 * flag[30] * flag[30] + 92 * flag[30] * flag[30] * flag[30] + 65 == 123191485
    88 * flag[31] + 36 * flag[31] * flag[31] + 38 * flag[31] * flag[31] * flag[31] + 38 == 52423340
    80 * flag[32] + 72 * flag[32] * flag[32] + 127 * flag[32] * flag[32] * flag[32] + 44 == 109544069
    13 * flag[33] + 23 * flag[33] * flag[33] + 94 * flag[33] * flag[33] * flag[33] + 28 == 158732224
    80 * flag[34] + 24 * flag[34] * flag[34] + 46 * flag[34] * flag[34] * flag[34] + 79 == 63215689
    100 * flag[35] + 101 * flag[35] * flag[35] + 75 * flag[35] * flag[35] * flag[35] + 104 == 112439900
    96 * flag[36] + 8 * flag[36] * flag[36] + 4 * flag[36] * flag[36] * flag[36] + 49 == 5142577
    14 * flag[37] + 89 * flag[37] * flag[37] + 113 * flag[37] * flag[37] * flag[37] == 113891400
    9 * flag[38] + 82 * flag[38] * flag[38] + 18 * flag[38] * flag[38] * flag[38] + 74 == 16173729
    56 * flag[39] + 14 * flag[39] * flag[39] + 117 * flag[39] * flag[39] * flag[39] + 70 == 113667811
    53 * flag[40] + 49 * flag[40] * flag[40] + 89 * flag[40] * flag[40] * flag[40] + 94 == 100648486
    6 * flag[41] + 23 * flag[41] * flag[41] + 38 * flag[41] * flag[41] * flag[41] + 22 == 34898585
    29 * flag[42] + 72 * flag[42] * flag[42] + 21 * flag[42] * flag[42] * flag[42] + 43 == 28054245
    16 * flag[43] + 90 * flag[43] * flag[43] + 68 * flag[43] * flag[43] * flag[43] + 105 == 96665961
    73 * flag[44] + 116 * flag[44] * flag[44] + 102 * flag[44] * flag[44] * flag[44] + 51 == 119364366
    101 * flag[45] + 15 * flag[45] * flag[45] + 13 * flag[45] * flag[45] * flag[45] + 34 == 17975263
    59 * flag[46] + 72 * flag[46] * flag[46] + 52 * flag[46] * flag[46] * flag[46] + 83 == 70089773
    50 * flag[47] + 22 * flag[47] * flag[47] + 55 * flag[47] * flag[47] * flag[47] + 41 == 83944866
    77 * flag[48] + 42 * flag[48] * flag[48] + 119 * flag[48] * flag[48] * flag[48] + 110 == 134321206
    91 * flag[49] + 38 * flag[49] * flag[49] + 126 * flag[49] * flag[49] * flag[49] + 64 == 146289319
    113 * flag[50] + 113 * flag[50] * flag[50] + 119 * flag[50] * flag[50] * flag[50] + 22 == 168616582
    24 * flag[51] + 88 * flag[51] * flag[51] + 98 * flag[51] * flag[51] * flag[51] + 30 == 192784280
    96 * flag[52] + 12 * flag[52] * flag[52] + 74 * flag[52] * flag[52] * flag[52] + 104 == 104'''
    constraints = constraints.split('\n')
    template = '''
    for (int i = 0; i 
    int main() {
       char flag[256] = {0};
    '''
    for i, constraint in enumerate(constraints):
       code += template % (i, constraint, i)
    code += '''
       return 0;
    }
    '''
    with open("solve.c", "w+") as f:
       f.write(code)
用以上代码获得爆破的c代码，编译运行后得到flag：  
### SimpleBBS
登陆用户名处注入，没有过滤。直接从flag表的flag库中获取flag。使用substring分两次得到flag。  
### SimpleServerInjection
根据提示得知Ssi漏洞。百度得到常见payload。执行命令等都不行。  
只有include可直接包含flag。  
### SimpleExtensionExplorerInjection&&SimplePrintEventLogger
分析源码发现。可以使用xml方式提交。修改请求头中的json为xml。然后使用源码中demo里的格式提交。并插入xxe代码。本题flag在flagvvvvvaaaagegsgag2333中。Flag文件中的是另一题xxe的flag。  
直接读取：  
### AzureRSA
> 刚开始用m^14代替m,得到pow(m,14,n1),pow(m,14,n2), 中国剩余定理类似,得到m^14 mod c N(N=p1 _q1_
> q2)然而找不到这样的解.后来换了思路,将m^14降低为m^2,即m^e1modn1modq1 = c1 mod q1 ,m^e2modn2modq2=
> c2mod q2 这样,gcd(e1/2,q1)=1,gcd(e2/2,q2)=1,可以解出m^2 mod q1 =cc1 和m^2 mod q2
> =cc2,直接crt,然后开平方得到flag
    In [39]: n1=0xcfc59d54b4b2e9ab1b5d90920ae88f430d39fee60d18dddbc623d15aae645e4e50db1c07a02d472b2eebb075a547618e1154a15b1657fbf66ed7e714d23ac70bdfba4c809bbb1e27687163cb09258a07ab2533568192e29a
        ...: 3b8e31a5de886050b28b3ed58e81952487714dd7ae012708db30eaf007620cdeb34f150836a4b723L
        ...: e1=0xfae3aL
        ...: c1=0x81523a330fb15125b6184e4461dadac7601340960840c5213b67a788c84aecfcdc3caf0bf3e27e4c95bb3c154db7055376981972b1565c22c100c47f3fa1dd2994e56090067b4e66f1c3905f9f780145cdf8d0fea88a45ba
        ...: e5113da37c8879c9cdb8ee9a55892bac3bae11fbbabcba0626163d0e2e12c04d99f4eeba5071cbeaL
        ...: n2=0xd45304b186dc82e40bd387afc831c32a4c7ba514a64ae051b62f483f27951065a6a04a030d285bdc1cb457b24c2f8701f574094d46d8de37b5a6d55356d1d368b89e16fa71b6603bd037c7f329a3096ce903937bb0c4f112
        ...: a678c88fd5d84016f745b8281aea8fd5bcc28b68c293e4ef4a62a62e478a8b6cd46f3da73fa34c63L
        ...: e2=0x1f9eaeL
        ...: c2=0x4d7ceaadf5e662ab2e0149a8d18a4777b4cd4a7712ab825cf913206c325e6abb88954ebc37b2bda19aed16c5938ac43f43966e96a86913129e38c853ecd4ebc89e806f823ffb802e3ddef0ac6c5ba078d3983393a91cd7a1
        ...: b59660d47d2045c03ff529c341f3ed994235a68c57f8195f75d61fc8cac37e936d9a6b75c4bd2347L
        ...: 
    In [40]: p = libnum.gcd(n1,n2)
    In [41]: q1 =n1/p
    In [42]: q2 =n2/p
    In [43]: cc1 = c1%q1
    In [44]: cc2 = c2%q1
    In [45]: d1 = libnum.invmod(e1/2,q-1)
    ---------------------------------------------------------------------------    NameError                                 Traceback (most recent call last)
     in ()
    ----> 1 d1 = libnum.invmod(e1/2,q-1)
    NameError: name 'q' is not defined
    In [46]: d1 = libnum.invmod(e1/2,q1-1)
    In [47]: cc2 = c2%q2
    In [48]: d1 = libnum.invmod(e2/2,q2-1)
    In [49]: d1 = libnum.invmod(e1/2,q1-1)
    In [50]: d2 = libnum.invmod(e2/2,q2-1)
    In [51]: m1 = pow(cc1,d1,q1)
    In [52]: m2 = pow(cc2,d2,q2)
    In [53]: m1
    Out[53]: 9145934804009004487552719748503822228920165925511590860348810016302826482806451163145078607458075363428884414552198356056125262348182137376201366786492784L
    In [54]: m2
    Out[54]: 3589561559133514136369704927243000433305585821117657920415578960870812553872371912746609007780318541077484059092980022388170364677662870890767576651886698L
    In [55]: libnum.solve_crt([m1,m2],[q1,q2])
    Out[55]: 13168369367234198437872749539018271419400232176904300158681951658443746540951392343907618182877829683142536637493048355562258888677328011329896313460691230736511412015403100140418455192352174969825494293642608716519887040771398966236396051002414138381164735834544781497250458993707685568567680611380013766409L
    In [56]: gmpy2.iroot(1316836936723419843787274953901827141940023217690430015868195165844374654095139234390761818287782968314253663749304835556225888867732801132989631346069123073651141201540
        ...: 3100140418455192352174969825494293642608716519887040771398966236396051002414138381164735834544781497250458993707685568567680611380013766409L,2)
    Out[56]: 
    (mpz(3628824791476463449712710601919239191346461224846499372572231062657711924665917840593543722030898280547854987832315368435069026877456799815879585534390653L),
     True)
    In [57]: libnum.n2s(3628824791476463449712710601919239191346461224846499372572231062657711924665917840593543722030898280547854987832315368435069026877456799815879585534390653L)
    Out[57]: 'EIS{Comm0n_Div15or_plus_CRT_is_so_easy|cb2733b9e69ab3a9bd526fa1}'
### gogogo
> strings gogogo.pcapng|grep gogogo -C 5  
>  可以定位到流量包中ftp有gogogo.png,猜测该文件就是flag,定位到该流量,提取png,得到flag:  
>
> 
### Checkin
>
> 先用getchars.py把验证码的所有字符全部保存，再肉眼识别所有的字符，重命名成资源文件保存在compares目录里，最后用solve.py暴力破解验证码。  
>
> 
>
> getchars.py
    #!/usr/bin/env python
    # for save all characters as the resource of captchas
    # then recognize the letters and use them to compare the captchas
    # it takes me almost a full of an hour, what a damn...==
    import os 
    import hashlib 
    import telnetlib
    def md5(item):
        m = hashlib.md5()
        m.update(item.encode("utf-8"))
        return m.hexdigest()
    for l in range(100):
        channel = telnetlib.Telnet('210.32.4.14', 13373)
        captchas = ['','','','','','']
        screen = channel.read_until("your captcha:")
        print(screen) 
        #print(screen.replace(" ","X"))
        captcha_blocks = screen[-1103:]
        #print captcha_blocks 
        for i in range(10):
            for j in range(6):
                cursor = i*109+j*18
                captchas[j] += captcha_blocks[ cursor:cursor+18 ] + '\n'
        for captcha in captchas: