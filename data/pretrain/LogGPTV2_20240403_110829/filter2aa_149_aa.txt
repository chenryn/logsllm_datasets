DSCTF WriteUp By Nu1L
DSCTF WriteUp By Nu1L
Crypto
picproblem
approximate
RAS-330
Pwn
fuzzerinstrospector
Re
catchme
FFunction
Misc
Muti Operations
Web
pingpingping
easy_tou
Crypto
picproblem
from math import sqrt
from numpy import array, zeros, uint8
import cv2
image = cv2.imread('encflag.jpg')
imagearray = array(image)
height, width, _ = imagearray.shape
P = 
152499380767419384190482151255394637996737469827829605515820669958508347281748972149386
271161591540732631566067054180175361690003977280272892522609147586068968287155564124150
018389239751303797118670912362907758420422608452481167379498468784017877205254544124292
749290258354735556552553866483651658972194298057709542156188687392863433064097980004057
406021887278721242663020250811848426955398339917915548958331640010765556422245343746272
474909726512230064493671743415133163309258514018351034936942252744026474684397283492786
006557855783615079869053017269467951423172261382224681001013000532403249236088953155380
383239860456308825641048186524377121699060316699319893535847183132839561847797412682476
256087233759499739421823442705039965527084838599508858642052688639732094935098040693620
021711204097143366032217907228843884296495756871903679432020311626332962358933936749730
314093807033455734583422608518914085826438806374518983358496282550984327967882624055848
0527560
Q = 
144974785760548835346080059675412116045004097684551930165850975100610036892637453087023
174291792239067432699807208947124014006634368316951997771667232583833232880189156177352
470797718066692597287113650243525462092611802610357250167553054026631032284308722771634
556793732059662255302266706271253907460229391573739859730440609795755839632518038087485
681488398060156530605953365870145579216484383748607826241099837323269013706670885203243
320911762799081847175287904146825978855342576982002242510264451197524255607780638723630
376832471330616731367331247218403195050108364738578247240257973651044843267327677509991
405146383497927951228626527613594146951237160965644175686044326065662696303695052324937
342508040875130034162436399505419781355896054323511042351814287971276113396797302227959
063401251315553363726197137933284537284824027719677137520416086342966667543656016422940
821277133426793807849943605342923528504114753892753402806486857143554219544029587797968
4848131957
R = 
160414523204454363365661625464770845116635110428151039573788549169638580640726763330854
598547378911965168171108202311393308562462855716842357874754476159731201271355889152379
882066761825649539847937817212401936033942759244921720880588850276935828877985996996556
083250510438895509163770448133671672241833637333446778737108572821226023133051070579712
422435381050927225094028516560585359481189380425147885027070329463833526830588165549187
022655314128650310954331341427922048058970421036327752345794860749835137784390433563703
251042014150597599745207747729632603504846317999734713699080801737475082481045860541223
639195291067924628828766471753385774346293570868130907391576137747745447920605401626042
286545786256535300278988791719643775061821291842012946433048802127218795217706317589644
784239520969330450230425347173374676525751039522697222487627771745720522072624004203525
994745381666846075799577101815570360092674590559516285798286095554587734391474629403418
0707
S = 
152499380767419384190482151255394637996737469827829605515820669958508347281748972149386
271161591540732631566067054180175361690003977280272892522609147586068968287155564124150
018389239751303797118670912362907758420422608452481167379498468784017877205254544124292
749290258354735556552553866483651658972194298057709542156188687392863433064097980004057
406021887278721242663020250811848426955398339917915548958331640010765556422245343746272
474909726512230064493671743415133163309258514018351034936942252744026474684397283492786
006557855783615079869053017269467951423172261382224681001013000532403249236088953155380
383239860456308825641048186524377121699060316699319893535847183132839561847797412682476
256087233759499739421823442705039965527084838599508858642052688639732094935098040693620
021711204097143366032217907228843884296495756871903679432020311626332962358933936749730
314093807033455734583422608518914085826438806374518983358496282550984327967882624055848
0527560
x0 = 1
y0 = 0
x = P*x0+Q*y0
y = R*x0+S*y0
assert 1301149798051259562945444365741194129602596348352064372203373*pow(x, 2) == 
1175915431138623881271508290982969935822476052419526528443170552123*pow(y, 2) + 
1301149798051259562945444365741194129602596348352064372203373
x1 = round(x/y*0.001, 16)
approximate
u1 = y*3650/x
x2 = round(x/y*0.00101, 16)
u2 = y*3675/x
x3 = round(x/y*0.00102, 16)
u3 = y*3680/x
kt = [x1, x2, x3]
temp_image = zeros(shape=[height, width, 3], dtype=uint8)
for k in range(0, 8):
    for i in range(0, height):
        for j in range(0, width):
            x1 = u1 * x1 * (1 - x1)
            x2 = u2 * x2 * (1 - x2)
            x3 = u3 * x3 * (1 - x3)
            r1 = int(x1*255)
            r2 = int(x2*255)
            r3 = int(x3*255)
            # print(r1, r2, r3)
            for t in range(0, 3):
                temp_image[i][j][t] = (imagearray[i][j][t]-((r1+r2) ^ r3)) % 256
        # exit(0)
    x1 = kt[0]
    x2 = kt[1]
    x3 = kt[2]
# print(temp_image)
print(temp_image[0,:,0])
cv2.imwrite('flag.png', temp_image)
SageMathCellType some Sage code below and press Evaluate.
1
n = 
220971235437659218787301534900125814573275375772797143228155015207070342885317864996996
792238571860014638681881545801581773094332539143100637613713347657144295844067194697804
8289576619226455954558674233
2
x1 = 
811014008138487255206458894195538278638874705063011299683223066145173267066167569651574
403709709859860753283811581224262066968961766268699842501230882753
3
x2 = 
604027788456788753432030185234159492794312526007332565135884365231384927178690915191777
6176398625281758612974095169699905562406324876515425802568788870149
4
5
PR. = PolynomialRing(Zmod(x1*x2))
6
f = x + x1*x2//n
7
x0 = f.small_roots(X=2**32,beta=0.33)
8
print(x0)
9
10
p = x1//int(gcd(f(x0),x1))
11
q = x2//int(gcd(f(x0),x2))
12
u = next_prime(p)
13
v = next_prime(q)
14
print(u)
15
print(v)
16
17
Language:
Sage
Share
[4045910]
351496689045414814528596331250847127635026655805028291764456230510046066486138360678754
18894975082323
628658085052712483595343510880463521049345272016889024923512639418087264377290581276163
01033683039171
Help | Powered by SageMath
About SageMathCell
About
SageMathCell project is an easy-to-use web interface to a free open-source mathematics 
software system SageMath. You can help SageMath by becoming a .
It allows embedding Sage computations into any webpage: check out our short 
instructions, a comprehensive description of capabilities, or Notebook Player to 
convert Jupyter notebooks into dynamic HTML pages!
Resources for your computation are provided by SageMath, Inc.. You can also set up your 
own server.
General Questions on Using Sage
RAS-330
There are a lot of resources available to help you use Sage. In particular, you may ask 
questions on sage-support discussion group or ask.sagemath.org website.
Problems and Suggestions
Unfortunately, we can no longer allow user code in cells to freely access Internet. See 
this discussion for details.
If you experience any problems or have suggestions on improving this service (e.g., you 
want a package installed), please email Andrey Novoseltsev.
SageMathCell is expected to work with any modern browser and without any downtime.
CoCalc
Need more power and flexibility but still prefer to avoid your own installation of 
Sage? CoCalc will allow you to work with multiple persistent worksheets in Sage, 
IPython, LaTeX, and much, much more!
from Crypto.Util.number import *
from pwn import *
while True:
    r = remote("39.107.97.220", 1006)
    r.recvuntil(b'Factor ')
    n = int(r.recvline().strip(b':\n'))
    print(n)
    (p,_),(q,_) = factor(n)
    print(p,q)
    r.sendline(str(p+q))
    try:
        r.recvuntil(b"plz select the size of e: ")
        break
    except:
        r.close()
        continue
Pwn
fuzzerinstrospector
r.sendline(b'90')
e,dp,dq = [int(i) for i in r.recvline().strip().split(b' ')]
print(e,dp,dq)
r.recvuntil(b'RSA330 - ')
n = int(r.recvline().strip(b':\n'))
print(n)
k1p = e*dp =e) or (k2>=e)):
        continue
    q0 = k2q // k2
    q0 = int(q0 - int(q0 % e) - int(inverse(k2,e)) + 1)
    p0 = n//(q0 + 2**330)
    p0 = p0 - int(p0 % e) - int(inverse(k1,e)) + 1
    PR. = PolynomialRing(Zmod(n))
    f = e*x + p0
    ans = f.monic().small_roots(X=2**242,beta=0.5,epsilon=0.02)
    print(k1,k2,ans)
    if ans:
        p = int(gcd(int(e*ans[0] + p0),n))