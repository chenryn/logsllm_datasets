**Bypass 技巧**
- 尝试 fuzz token
    ```
    username=dapos&password=123456&token=aaaaaaaaaaaaaaaaaaaaaa
    username=dapos&password=123456&token=aaaaaaaaaaaaaaaaaaaaab
    username=dapos&password=123456&token=0
    username=dapos&password=123456&token=
    username=dapos&password=123456&
    ```
- POST 转 GET
**修复方案**
* Referer 校验，对 HTTP 请求的 Referer 校验，如果请求 Referer 的地址不在允许的列表中，则拦截请求。
* Token 校验，服务端生成随机 token，并保存在本次会话 cookie 中，用户发起请求时附带 token 参数，服务端对该随机数进行校验。如果不正确则认为该请求为伪造请求拒绝该请求。
* Formtoken 校验，Formtoken 校验本身也是 Token 校验，只是在本次表单请求有效。
* 对于高安全性操作则可使用验证码、短信、密码等二次校验措施
* 增删改请求使用 POST 请求
---
### jsonp劫持
**简介**
JSONP（JSON with Padding）是 json 的一种 "使用模式"，可以让网页从别的域名（网站）那获取资料，即跨域读取数据；它利用的是 script 标签的 src 属性不受同源策略影响的特性，使网页可以得到从其他来源动态产生的 json 数据，因此可以用来实现跨域读取数据。
JSONP 劫持实际上也算是 CSRF 的一种。当某网站使用 JSONP 的方式来跨域传递一些敏感信息时，攻击者可以构造恶意的 JSONP 调用页面，诱导被攻击者访问来达到截取用户敏感信息的目的。
JSON 实际应用的时候会有两种传输数据的方式：
- xmlhttp 获取数据方式：
    ```
    {"username":"twosmi1e","password":"test123"}
    ```
    当在前端获取数据的时候，由于数据获取方和数据提供方属于同一个域下面，所以可以使用 xmlhttp 的方式来获取数据，然后再用 xmlhttp 获取到的数据传入自己的 js 逻辑如 eval。
- script 获取数据方式：
    ```
    userinfo={"username":"twosmi1e","password":"test123"}
    ```
    如果传输的数据在两个不同的域，由于在 javascript 里无法跨域获取数据，所以一般采取 script 标签的方式获取数据，传入一些 callback 来获取最终的数据，如果缺乏有效地控制(对 referer 或者 token 的检查)就有可能造成敏感信息被劫持。
**相关文章**
- [jsonp 原理详解——终于搞清楚 jsonp 是啥了](https://blog.csdn.net/hansexploration/article/details/80314948)
- [JSONP 安全攻防技术](https://blog.knownsec.com/2015/03/jsonp_security_technic/)
- [浏览网页就能泄露手机号的小秘密](https://mp.weixin.qq.com/s/_bTunF9TXBUze8ewCM--Fg)
- [渗透测试-JSONP数据劫持漏洞](https://mp.weixin.qq.com/s/Ww-ubc4VxpOyZvAyu49UhQ)
**相关案例**
- [中国联通某站 jsonp 接口跨域导致信息泄漏并可开通某些套餐 (运营商额外插入功能带来的风险) ](http://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2016-0172305)
- [京东商城 JSONP+CSRF 导致某处信息泄露](http://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2015-0121266)
- [迅雷某站 jsonp 劫持漏洞泄漏会话 ID,cookie](http://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2015-0121639)
- [唯品会某处 JSONP+CSRF 泄露重要信息](http://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2015-0122755)
- [新浪微博之点击我的链接就登录你的微博(JSONP 劫持)](http://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2016-0204941)
- [苏宁易购多接口问题可泄露用户姓名、地址、订单商品 (jsonp 案例) ](http://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2015-0118712)
- [通过 jsonp 可以获得当前用户的 QQ+crsf 刷收听](http://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2014-070690)
- [利用 JSONP 劫持可以泄漏 QQ 号](http://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2014-065177)
- [京东商城某处 jsonp 接口可泄露任意用户的搜索记录](http://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2013-044210)
- [新浪微博 JSONP 劫持之点我链接开始微博蠕虫+刷粉丝](http://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2016-0171499)
- [fanwe O2O 用户密码可劫持 (通用/开源软件 jsonp 劫持案例) ](http://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2015-0124949)
**相关工具**
- [p1g3/JSONP-Hunter](https://github.com/p1g3/JSONP-Hunter) - JSONP Hunter in burpsuite.
**场景模拟**
```php
```
```bash
# 服务器上运行这个简易的服务
php -S 0.0.0.0:9999
```
举例,存在信息泄漏的 JSONP 接口 http://127.0.0.1:9999/test.php?callback=xxx ，攻击者构造 POC 后诱导用户访问 POC，然后就会调用这个接口获取到敏感数据，获取到的敏感数据被攻击者截获了。
```html
```
保存为 html，诱导受害者访问.
#### SOME
> 同源方式执行
**简介**
SOME（Same Origin Method Execution），同源方式执行，不同于 XSS 盗取用户 cookie 为目的，直接劫持 cookie 经行操作，和 CSRF 攻击很类似，不同的是 CSRF 是构造一个请求，而 SOME 则希望脚本代码被执行。
**相关文章**
- [浅析同源方式执行（SOME）攻击](https://www.freebuf.com/articles/web/169873.html)
**靶场**
- [Same Origin Method Execution](https://www.someattack.com/Playground/About)
---
## 钓鱼欺骗
**相关案例**
- [$7.5k Google Cloud Platform organization issue](https://www.ezequiel.tech/2019/01/75k-google-cloud-platform-organization.html)
- [从微信群不良广告到酷我音乐存储型XSS再到乐视url跳转](https://darkless.cn/2019/12/23/kuwomusic-xss/)
### URL跳转漏洞
`Open Redirect`
**描述**
由于 Web 站点有时需要根据不同的逻辑将用户引向到不同的页面，如典型的登录接口就经常需要在认证成功之后将用户引导到登录之前的页面，整个过程中如果实现不好就可能导致 URL 重定向问题，攻击者构造恶意跳转的链接，可以向用户发起钓鱼攻击。
**相关文章**
- [URL 重定向及跳转漏洞](http://www.pandan.xyz/2016/11/15/url%20%E9%87%8D%E5%AE%9A%E5%90%91%E5%8F%8A%E8%B7%B3%E8%BD%AC%E6%BC%8F%E6%B4%9E/)
- [分享几个绕过 URL 跳转限制的思路](https://www.anquanke.com/post/id/94377)
- [浅析渗透实战中url跳转漏洞 ](https://xz.aliyun.com/t/5189)
- [Open Redirect and Its Bypasses - Bug Bounty](https://www.cyberick.com/post/open-redirect-and-its-bypasses)
- [浅谈URL跳转漏洞的绕过与修复](https://mp.weixin.qq.com/s/pEjWuEO98VoOq7CKAk-c4A)
**相关工具**
- [devanshbatham/OpenRedireX](https://github.com/devanshbatham/OpenRedireX)
**字典**
- https://tools.intigriti.io/redirector/#
- https://github.com/ffffffff0x/AboutSecurity/blob/master/Dic/Web/api_param/Fuzz_Redirect.txt
**Bypass 技巧**
- Fuzz
    - `/?ref=evil.com`
    - `/?ref=evil。com`
    - `/?ref=#evil.com`
    - `/?ref=#%PI:EMAIL`
    - `/?ref=/evil.com`
    - `/?ref=//evil.com`
    - `/?ref=\\evil.com`
    - `/?ref=\/\/evil.com/`
    - `/?ref=/\/evil.com/`
    - `/?ref=evil%E3%80%82com`
    - `/?ref=//evil%00.com`
    - `/?ref=https://evil.c℀.example.com`
    - `/?ref=/%0d/evil.com`
    - `/?ref=evil%00.com`
- URL 编码
    - `/?ref=%2Fevil.com`
    - `/?ref=%2F%2Fevil.com`
    - `/?ref=https%3A%2F%2Fevil.com`
- CRLF
    - `/?ref=%0D%0A/evil.com`
- 协议
    - `/?ref=http://evil.com`
    - `/?ref=http:/\/\evil.com`
    - `/?ref=https:evil.com`
    - `/?ref=https://evil.com`
    - `/?ref=https:/evil.com`
    - `/?ref=https:/\evil.com`
- 白名单
    - `/?ref=baidu.com`
    - `/?ref=baidu.com.evil.com`
    - `/?ref=baidu.comevil.com`
    - `/?ref=PI:EMAIL`
    - `/?ref=baidu.com%40evil.com`
    - `/?ref=baidu.com?evil.com`
    - `/?ref=baidu.com/°evil.com`
- 参数污染
    - `/?ref=baidu.com&ref=evil.com`
- Right to Left Override
    - `/?ref=%40%E2%80%PI:EMAIL`
**通用修复方案**
* 使用白名单校验重定向的 url 地址
* 给用户展示安全风险提示，并由用户再次确认是否跳转
---
### 二维码劫持
**相关案例**
- [二维码劫持案例分析](https://www.freebuf.com/vuls/234121.html)
---
### 点击劫持
- [click-jacking](https://www.hacksplaining.com/exercises/click-jacking) - 一个简单的讲解关于点击劫持的网站
**相关案例**
- [Uber XSS + clickjacking](https://www.youtube.com/watch?v=5Gg4t3clwys)
- [Stealing your private documents through a bug in Google Docs](https://savebreach.com/stealing-private-documents-through-a-google-docs-bug/)
- [Twitter Periscope Clickjacking Vulnerability](https://hackerone.com/reports/591432)
- [Clickjacking at ylands.com](https://hackerone.com/reports/405342)