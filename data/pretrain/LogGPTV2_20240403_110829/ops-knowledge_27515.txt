User: 如何使用Python脚本监控系统日志？
Assistant: 要使用Python脚本监控系统日志，可以按照以下步骤进行：

1. 导入Python内置的logging模块，它可以轻松地处理日志记录。

2. 设置日志记录级别，例如DEBUG, INFO, WARNING, ERROR, CRITICAL等级别，以及日志输出格式，以便将记录写入特定文件或终端窗口。

3. 定义日志处理程序，日志处理程序将处理特定类型的日志消息。

4. 将日志处理程序添加到日志记录器中，以便捕获和处理日志消息。

5. 启动Python脚本并监视日志输出。

以下是一个简单的Python脚本示例，演示如何监控系统日志：

```python
import logging

# 设置日志记录的基础配置
logging.basicConfig(filename='app.log', level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s')

# 创建一个日志记录器
logger = logging.getLogger('myapp')

# 创建一个日志处理程序
handler = logging.FileHandler('myapp.log')
handler.setLevel(logging.INFO)

# 创建一个格式化程序
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# 设置格式化程序到日志处理程序
handler.setFormatter(formatter)

# 添加日志处理程序到日志记录器
logger.addHandler(handler)

# 监控系统日志
while True:
    try:
        # 添加日志消息到日志记录器
        logger.info("System is running normally")
        # 执行其他代码或功能
    except Exception as e:
        # 记录异常消息到日志记录器
        logger.error(str(e))
```

在这个例子中，我们使用logging模块设置了基础配置，然后定义了一个日志记录器和一个日志处理程序。我们还添加了一个格式化程序来指定日志输出的格式。

在主循环中，我们监视系统并在每次循环中记录一条日志消息。如果发生异常，我们使用logger.error()方法记录异常消息到日志记录器。

运行这个Python脚本将会不断地记录日志消息，直到脚本被停止。通过读取日志文件，您可以查看和分析日志记录，以确定系统的运行状况。