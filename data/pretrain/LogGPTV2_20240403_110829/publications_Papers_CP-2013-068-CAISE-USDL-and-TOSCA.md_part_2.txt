plans. Plans are implemented as workflows, e.g., in BPMN or BPEL, to benefit
from compensation, recovery, and transaction concepts [9].
TOSCA Service Archives package cloud applications with all the required
software artifacts such as installables or applications files as well as their man-
agement plans in a portable fashion. These archives can be installed in TOSCA
Runtime Environments which provide all functionalities to manage the archive
andexecutemanagementplans.Thisenablescloudproviderstoofferthirdparty
services because management details, e.g., how to scale the application or how
securityis achieved,arehidden andthe archivescanbe treatedandoperatedas
aself-containedblackbox.Asthespecificationdoesnotdefineavisualnotation,
in this paper we use Vino4TOSCA [10] as a visual notation for TOSCA.
3.4 Modeling SugarCRM with TOSCA
In this section we show how the SugarCRM deployment was specified with
TOSCA,discussdifferentdeploymentoptions,andlistpossiblevariabilities.Fig-
ure 1 shows one possible topology of a SugarCRM deployment.
ThecorecomponentsoftheapplicationaretheSugarCrmApp,whichisaPHP
application,andtheSugarCrmDbrepresentingthedatabaseusedbySugarCRM,
indicatedbythe MySqlDbConnection.The PHPapplicationrequiresanApache
web server including a PHP runtime, which is provided by the installed PHP
module.Toprovidethedatabase,aMySQLrelationaldatabasemanagementsys-
tem (MySQLRDBMS)is used. Currently, SugarCRM also supports Microsoft SQL,
Oracle 11g, and IBM DB2 which could be used in other deployment options.
ApacheandMySQLthemselvesmustbe installedonanoperatingsystemwhich
is in turn provided as a virtual machine image. All nodes have properties, not
7 https://www.oasis-open.org/committees/tc_home.php?wg_abbrev=tosca
Cloud Computing Automation 7
PhpModule (DependsOn) SugarCrmApp (DbConnection) SugarCrmDb
(PhpModule) (SugarCrmApp) (SugarCrmDb)
(InstalledIn) (HostedOn) (HostedOn)
ApacheWebServer MySql
(ApacheWebServer) (MySqlRDBMS)
OsApacchhee OsMySql
(OperatingSSyysstteemm)) (OperatingSystem)
VmApaacchhee VmMySql
(VirtualMaacchhiinnee)) (VirtualMachine)
Topology
Install IInnssttaaallllll&&& IInnsstall Deploy
AAcquiire
OS on Start Web PHP PHP
VM
VM Server Module App Establish
DB
Install Install& Start Create Connection
Acquire
OS on MySQL SugarCRM
VM
VM RDBMS DB Module
BuildPlan
Fig.1.TOSCAServiceArchivecontainingtopology(top)andbuildplan(bottom)for
SugarCRM ultimate
explicitly depicted in the figure, holding state and management information of
the respective nodes. These properties are used to store information about the
application: static information such as the hardware specification of a virtual
machine, as well as runtime information such as IP-addresses.This information
is used and stored by plans during deployment, management, and termination
ofthe application.The finegraineddecompositionintocomponentsis neededto
understand the interdependencies and variabilities exposed via Linked USDL.
OneoptiontosupportdifferentSugarCRMofferingsistouseseparateTOSCA
topologieswithdifferentqualityofservice(QoS)capturedbyUSDLserviceoffer-
ings. The ultimate deployment depicted in Figure 1 (upper box), for example,
hosts the web server and database on different virtual machines, whereas an
enterprisedeployment can use the same virtual machine for both.
On the other hand, there are variations which do not change the structure of
thetopology.Forexample,aspectslikesupportoptionsandvariationsimpacting
howtheapplicationistechnicallyprovided.Forthelatter,possibleconfigurations
offered by the VM node are the cloud provider, e.g., Amazon or Rackspace, the
physical location, e.g., US or Europe, as well as CPU power, memory size, and
hard disk capacity. Beside nodes, it is also possible to configure relations. For
example, to tackle security issues, the database connection may be encrypted.
Managementplansreadandwritepropertieswhichholdruntimeinformationof
nodes and relationships. TOSCA designates one plan as build plan, which
deploysandinitializestheservice.Figure1(lowerbox)showsasimplifiedexam-
pleofabuildplanwhichsetsuptheultimateversionofSugarCRMbasedontwo
virtualmachines.Arealexecutableplanneedsadditionalactivitiesandstructural
components for data handling, compensation, and recovery mechanisms. The
8 J. Cardoso et al.
shownplansetsupthetwoinfrastructurestacksinparallelstartingfromthebot-
tom by calling management operations providedby the nodes (Figure 1 depicts
onlythreeofthesecallsforsimplicityreasons).Afterstacksareinstantiated,the
databaseconnectionisestablishedandtheapplicationisavailable.
4 USDL and TOSCA Interoperability
OurstudyonUSDLandTOSCAinteroperabilityistimelyandrelevantbecause
despitestandardizationeffortscloudsmaydevelopinawaythatlacksinteroper-
ability, portability, and reversibility, all crucial for the avoidanceof lock-in. Our
approach connects in a best of breed manner two promising standardization ef-
forts,focusingondifferentaspects,andproposesanendtoendsolutionforcloud
services including modeling, discovery,selection, deployment, and management.
A simple solution to integrate USDL and TOSCA consists in establishing a
staticlinkbetweenservicedescriptionsandtheircorrespondingarchives.Nonethe-
less, since this approach is strongly coupled it would not be able to handle the
dynamicsofaglobalservicedistributionnetwork.Forexample,whatwouldhap-
pen if the TOSCAdescriptor associatedwith a USDL service descriptionwould
nolongerbevalid?Whatifthedeploymentproviderhasceaseditsoperationsand
transferreditsobligationsto,presumably,someotherproviderwhichwillstillhan-
dletheoriginalfunction?Howshouldtherequestbehandled?
4.1 Architectural Decisions
Engineeringaplatformtointegrateservicedescriptionswithservicedeployments
is a major undertaking [6]. We require an architecture that enables a simple
transmissionofservicerequestsanddeploymentinformationbetweencustomers
andprovidersviamarketplaces;whichhandlesaddingorremovingmarketplaces
and providers in a loosely coupled manner; which uses a standard data repre-
sentation and querying format to ease information exchange and enable inter-
operability; and which can rely on existing applications, tools and technologies.
When examining theoretical and technological advancements to serve as a fun-
damental building block it becomes clear that the World-Wide Web combined
with semantic web technologies is a potential candidate. It is distributed, scal-
able, reliable, extensible, simple, and equitable [11]. Therefore, the integration
platform developed was constructed based on three main underlying principles:
1. Global service identification and service description access,
2. Intelligent routing of service requests, and
3. Dynamic binding of deployment descriptors.
The description of cloud services using Linked USDL provides a global service
identification mechanism by using HTTP URIs. It also provides a global, stan-
dard,anduniformdataaccess[12] to servicedescriptionsbyusingHTTP URLs
and RDF. In contrast to other approaches, e.g., APIs provided as REST or
WS-* endpoints [13], an uniform data access enables a simpler interoperability
Cloud Computing Automation 9
and integration of the marketplace, containing service descriptions, and service
providers’ platforms responsible for SaaS deployment and management.
The routing of service requests from marketplaces to providers is achieved
using an intelligent content-based routing [14]. The analysis of Linked USDL
descriptions is implemented through SPARQL and can also make use of RDF-
based reasoning engines (e.g., Jena, Pellet, FaCT). Their use for content-based
routing enables a more flexible routing mechanism compared with web APIs,
because full remote access and querying of the service descriptions is possible.
Furthermore,the use ofa routingmechanismdecouples spaceandtime between
marketplaces and providers.
Cloud providers use a publish-subscribe pattern [15] to establish a dynamic
binding of deploymentdescriptors with Linked USDL service offerings. This en-
ablescloudproviderstoquicklyadapttopeakdemandbyscalingthe numberof
serverswhichhandledeploymentrequestsusingTOSCARuntimeEnvironments.
These architectural considerations are evaluated in Section 5 with the imple-
mentation of the ServIce Offering and Provisioning Platform (SIOPP).
4.2 Global Service Identification and Description Access
Cloud applications, such as the SugarCRM of our scenario, can be advertised
in marketplaces [3] (e.g., SAP Service marketplace, Salesforce.com, and AppDi-
rect.com), or in any other system answering to HTTP URIs requests (e.g., the
provider’s web sites), which enables consumers to browse through various offer-
ings. A marketplace, or information system, is said to be USDL-compliant if all
service offerings are modeled with Linked USDL, and are externally visible and
accessible via HTTP URIs. Since Linked USDL relies on linked data principles,
two important features are inherited:
1. TheuseofHTTPURIsprovidesasimplewaytocreateuniqueglobalidenti-
fiers for services. Compared to, e.g., a universally unique identifier (UUID),
LinkedUSDLURIsaremoreadequatetoservicedistributionnetworkssince
they are managed locally by service providers following a process similar to
the domain name system (DNS).
2. The same HTTP URI, which provides a global unique identifier for a ser-
vice, also serves as endpoint to provide uniform data access to the service
description. A Linked USDL URI can be used by, e.g., RDF browsers,RDF
search engines, and web query agents looking for cloud service descriptions.
When a suitable Linked USDL HTTP URI has been selected for purchase
(for example, our SugarCRM application), the customer can customize the ser-
vice, for example, by selecting the pricing plan which is most suitable to his
needs. Assuming that the ultimate plan is selected, the marketplace sends a
service request for routing. The service includes the URI and an optional part
(the customization string), separated by a question mark (“?”), that contains
customizationinformation.The syntaxis asequence of=pairs
separated by a ampersand (“&”). Both, key and value, are URIs referencing
10 J. Cardoso et al.
semantic concepts defined within the Linked USDL service description. For
example, the URI http://rdfs.genssiz.org/SugarCRM?pricePlan=pricing
SugarCRM Ultimatein which the key pricePlanand value pricing SugarCRM
Ultimateare concepts defined within the Linked USDL description of the Sug-
arCRM application (in this example, the full URI was omitted to make the
notationmorecompact). Thecustomizationstringadoptsthe samestructureas
query strings, a recommendation of the W3C.
4.3 Intelligent Routing of Service Requests
Based on the global service identification and description access, the SIOPP
platform relies on a content-based routing [14] strategy to forward service re-
quests, generated by service marketplaces, to TOSCA deployment providers.
The routers examine the content of Linked USDL service descriptions, apply
SPARQL queries and reasoning rules—providing some degree of intelligence
within the router—to determine the providers who are able to provide the re-
spective service. The mapping of Linked USDL URIs, pointing to an offering
withthe applicationprovisionedby TOSCA, is realizedby the distributed rout-
ing logic depicted in Figure 2. The proposed mechanism is designed with three
routinglayers:(i)theGlobalRoutingLayer(GRL),(ii)theLocalRoutingLayer
(LRL), (iii) and the TOSCA Routing Layer (TRL).
The Global Routing Layer uses a routing table to map Linked USDL URIs,
describing the high level requirements for the application provisioning, such as
pricing model, to providers which are able to provision the application accord-
ingly.TheGRLreceivesanUSDLURIfromamarketplace,looksupappropriate
providers and selects one of them. This selection may take into consideration
furtherconditionsdefinedbytheusersuchaspricing,paymentmethod,orsecu-
rity requirements. However, these aspects are out of scope for this paper. Each
provider is referenced by an endpoint implementing an interface used by the
GRL to pass requests to the Local Routing Layer of the respective provider in
order to trigger the provisioning of the application.
TheLocalRoutingLayerusestheLinkedUSDLURIanda(local)routingtable
toselectthecorrespondingTOSCAarchiveandTOSCAcontainer,whichbringsus
totheTOSCARoutingLayer.TheinstallationsarereferencedbyaTOSCAservice
idwhichcanbeusedtotriggertheprovisioningoftheservicebytheLocalRout-
ing Layervia the TOSCA-Runtime Environment.In addition, the routing table
storesthe input messageusedto invokethe build plan. This input messagecon-
tainsprovider-specificinformation,forexample,IPrangesorcredentials,aswell
asfieldtopasstheLinkedUSDLURItothebuildplan.TheplanmayusetheURI
toconfiguretheapplicationbasedontheinformationrepresentedbytheURIor,
inaddition,mayinspecttheLinkedUSDLservicedescriptiontogathermorein-
formation,e.g.,detailsoftheselectedpriceplan.Thus,thethirdTOSCARouting
Layerexecutesandconfigurestheactualprovisioningoftheservice.
Cloud Computing Automation 11
SIOPP
Architecture
LinkedUSDL Cloud
UUSSDDLL--bbaasseeddMMarketplace TOSCA-basedProvider
UUSSDDLL--bbaasseeddSSeerrvviiccee Offerings TOSCA Service Archives
Reasoning Reasoning
SServiice 11 Engine Engine T Service 1
Global Local … …
Routing Routing
UI Service N Layer Layer T Service N
Billing/ CRM System TOSCA RuntimeEnvironment
Routing Routing TOSCARouting Layer
CloudManagemenntt SSSyyysssttteeemmm Table Table
USDL URI … ProviderEndpoint USDL URI … Plan Endpoint
http://sugarcrm.org?enterprise … 192.182.1.3 http://sugarcrm.org?enterprise … 111.121.12.1/SugarCRMPlan
http://redmine.org?professional … 147.11.4.79 http://redmine.org?professional … 111.121.12.1/RedminePlan
Fig.2. Intelligent content-based routing mechanism of SIOPP
Listing 1.3 shows an example of an input message used by the build plan to
deploySugarCRMonAmazonEC2(describedinSection3.4).Themessagecon-
tainscredentialsoftheAmazonaccounttobeused(line2and3),thegeographic
region where the virtual machines should be located (line 4), and a pointer to
the USDL offering (line 5). The USDL URI is used by the plan to query the
Linked USDL offering by using SPARQL and adjust the deployment. In our
prototype, deciding between the deployment options enterprise or ultimate
is done based on the selected USDL pricing plan.
1 
2 -key-
3 -secret-
4 ec2.eu-west-1.amazonaws.com
5 http://rdfs.genssiz.org/SugarCRM?pricePlan=