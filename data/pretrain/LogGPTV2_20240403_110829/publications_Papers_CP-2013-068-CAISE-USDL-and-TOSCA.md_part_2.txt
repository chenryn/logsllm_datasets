### Plans and Workflows
Plans are implemented as workflows, such as in BPMN or BPEL, to leverage compensation, recovery, and transaction concepts [9].

### TOSCA Service Archives
TOSCA Service Archives package cloud applications with all the necessary software artifacts, including installables and application files, along with their management plans in a portable format. These archives can be installed in TOSCA Runtime Environments, which provide the functionalities needed to manage the archive and execute management plans. This enables cloud providers to offer third-party services, as the management details—such as how to scale the application or achieve security—are hidden, and the archives can be treated and operated as self-contained black boxes. Since the TOSCA specification does not define a visual notation, we use Vino4TOSCA [10] as a visual notation for TOSCA in this paper.

### 3.4 Modeling SugarCRM with TOSCA
In this section, we demonstrate how the SugarCRM deployment was specified using TOSCA, discuss different deployment options, and list possible variabilities. Figure 1 shows one possible topology of a SugarCRM deployment.

#### Core Components
- **SugarCrmApp**: A PHP application.
- **SugarCrmDb**: The database used by SugarCRM, indicated by `MySqlDbConnection`.
- **Apache Web Server**: Includes a PHP runtime provided by an installed PHP module.
- **MySQL RDBMS**: Used to provide the database. Currently, SugarCRM also supports Microsoft SQL, Oracle 11g, and IBM DB2, which could be used in other deployment options.

Both Apache and MySQL must be installed on an operating system, which is provided as a virtual machine image. Each node has properties, not explicitly shown in the figure, that hold state and management information. These properties store both static and runtime information, such as the hardware specifications of a virtual machine and IP addresses. This information is used and stored by plans during deployment, management, and termination of the application. The fine-grained decomposition into components is necessary to understand interdependencies and variabilities exposed via Linked USDL.

#### Deployment Options
One option to support different SugarCRM offerings is to use separate TOSCA topologies with different quality of service (QoS) captured by USDL service offerings. For example, the ultimate deployment (Figure 1, upper box) hosts the web server and database on different virtual machines, whereas an enterprise deployment can use the same virtual machine for both.

There are also variations that do not change the topology structure, such as support options and configurations impacting the technical provision of the application. For instance, possible configurations offered by the VM node include the cloud provider (e.g., Amazon or Rackspace), physical location (e.g., US or Europe), CPU power, memory size, and hard disk capacity. Relationships can also be configured; for example, the database connection may be encrypted for security.

#### Management Plans
Management plans read and write properties that hold runtime information of nodes and relationships. TOSCA designates one plan as the build plan, which deploys and initializes the service. Figure 1 (lower box) shows a simplified example of a build plan setting up the ultimate version of SugarCRM based on two virtual machines. A real executable plan would need additional activities and structural components for data handling, compensation, and recovery mechanisms. The shown plan sets up the two infrastructure stacks in parallel, starting from the bottom by calling management operations provided by the nodes (only three calls are depicted for simplicity). After the stacks are instantiated, the database connection is established, and the application becomes available.

### 4 USDL and TOSCA Interoperability
Our study on USDL and TOSCA interoperability is timely and relevant because, despite standardization efforts, clouds may develop in ways that lack interoperability, portability, and reversibility, all of which are crucial for avoiding lock-in. Our approach connects two promising standardization efforts in a best-of-breed manner, focusing on different aspects, and proposes an end-to-end solution for cloud services, including modeling, discovery, selection, deployment, and management.

#### Simple Integration
A simple solution to integrate USDL and TOSCA is to establish a static link between service descriptions and their corresponding archives. However, this approach is strongly coupled and cannot handle the dynamics of a global service distribution network. For example, what if the TOSCA descriptor associated with a USDL service description is no longer valid? What if the deployment provider ceases operations and transfers its obligations to another provider?

#### 4.1 Architectural Decisions
Engineering a platform to integrate service descriptions with service deployments is a major undertaking [6]. We require an architecture that:
- Enables simple transmission of service requests and deployment information between customers and providers via marketplaces.
- Handles adding or removing marketplaces and providers in a loosely coupled manner.
- Uses a standard data representation and querying format to ease information exchange and enable interoperability.
- Relies on existing applications, tools, and technologies.

The World-Wide Web combined with semantic web technologies is a potential candidate for this architecture. It is distributed, scalable, reliable, extensible, simple, and equitable [11]. Therefore, the integration platform developed is based on three main principles:
1. Global service identification and service description access.
2. Intelligent routing of service requests.
3. Dynamic binding of deployment descriptors.

#### 4.2 Global Service Identification and Description Access
Cloud applications, such as SugarCRM, can be advertised in marketplaces (e.g., SAP Service Marketplace, Salesforce.com, and AppDirect.com) or any system responding to HTTP URI requests (e.g., provider websites). A marketplace is USDL-compliant if all service offerings are modeled with Linked USDL and are externally visible and accessible via HTTP URIs. Linked USDL inherits two important features:
1. **HTTP URIs** provide a simple way to create unique global identifiers for services, managed locally by service providers following a process similar to the domain name system (DNS).
2. **Uniform Data Access**: The same HTTP URI serves as an endpoint to provide uniform data access to the service description, usable by RDF browsers, search engines, and web query agents.

When a suitable Linked USDL HTTP URI is selected for purchase, the customer can customize the service, for example, by selecting the pricing plan. Assuming the ultimate plan is selected, the marketplace sends a service request for routing. The service includes the URI and an optional part (the customization string) separated by a question mark ("?"). The syntax is a sequence of key-value pairs separated by an ampersand ("&"). Both key and value are URIs referencing semantic concepts defined within the Linked USDL service description.

#### 4.3 Intelligent Routing of Service Requests
Based on global service identification and description access, the SIOPP platform uses a content-based routing strategy to forward service requests from marketplaces to TOSCA deployment providers. The routers examine the content of Linked USDL service descriptions, apply SPARQL queries and reasoning rules, and determine the providers who can provide the respective service. The mapping of Linked USDL URIs to TOSCA-provisioned applications is realized by the distributed routing logic depicted in Figure 2. The proposed mechanism has three routing layers:
- **Global Routing Layer (GRL)**: Maps Linked USDL URIs to providers.
- **Local Routing Layer (LRL)**: Selects the corresponding TOSCA archive and container.
- **TOSCA Routing Layer (TRL)**: Executes and configures the actual provisioning of the service.

The GRL uses a routing table to map Linked USDL URIs to providers. It receives a USDL URI from a marketplace, looks up appropriate providers, and selects one. The LRL uses the Linked USDL URI and a local routing table to select the corresponding TOSCA archive and container. The TRL executes and configures the actual provisioning of the service.

### Example Input Message
Listing 1.3 shows an example of an input message used by the build plan to deploy SugarCRM on Amazon EC2. The message contains credentials for the Amazon account, the geographic region for the virtual machines, and a pointer to the USDL offering. The USDL URI is used by the plan to query the Linked USDL offering using SPARQL and adjust the deployment.

```plaintext
{
  "access-key": "your-access-key",
  "secret-key": "your-secret-key",
  "region": "ec2.eu-west-1.amazonaws.com",
  "usdl-uri": "http://rdfs.genssiz.org/SugarCRM?pricePlan=pricing-SugarCRM-Ultimate"
}
```

In our prototype, the decision between the enterprise and ultimate deployment options is based on the selected USDL pricing plan.