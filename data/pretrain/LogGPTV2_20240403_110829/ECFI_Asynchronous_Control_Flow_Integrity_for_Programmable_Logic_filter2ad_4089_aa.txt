title:ECFI: Asynchronous Control Flow Integrity for Programmable Logic
Controllers
author:Ali Abbasi and
Thorsten Holz and
Emmanuele Zambon and
Sandro Etalle
ECFI: Asynchronous Control Flow Integrity for
Programmable Logic Controllers
Ali Abbasi∗
University of Twente
The Netherlands
PI:EMAIL
Emmanuele Zambon
SecurityMatters B.V.
The Netherlands
PI:EMAIL
Thorsten Holz
Ruhr-Universität Bochum
Germany
PI:EMAIL
Sandro Etalle†
Eindhoven University of Technology
The Netherlands
PI:EMAIL
ABSTRACT
Programmable Logic Controllers (PLCs) are a family of embedded
devices that are being used to control physical processes in criti-
cal infrastructures. Similar to other embedded devices, PLCs are
vulnerable to memory corruption and control-flow hijacking at-
tacks. Because PLCs are being used for critical control applications,
compromised PLCs constitute a significant security and safety risk.
In this paper, we introduce a novel, PLC-compatible control-flow
integrity (CFI) mechanism named ECFI to protect such devices from
control-flow hijacking attacks. Our CFI approach is the first system
for real-time PLCs and considers the runtime operation of the PLC
as the highest priority. We implemented a prototype of ECFI and
tested it in a real-world industrial PLC against different kinds of
attacks. Our performance evaluation demonstrates that ECFI is an
efficient, non-intrusive CFI solution that does not impose notable
performance overhead and maintains the timeliness of PLC runtime
operations, a critical property for this kind of embedded systems.
KEYWORDS
PLC, Real-Time, Industrial Control System (ICS), Embedded System
ACM Reference format:
Ali Abbasi, Thorsten Holz, Emmanuele Zambon, and Sandro Etalle. 2017.
ECFI: Asynchronous Control Flow Integrity for Programmable Logic Con-
trollers. In Proceedings of ACSAC 2017, San Juan, PR, USA, December 4–8,
2017, 12 pages.
https://doi.org/10.1145/3134600.3134618
∗Also with Ruhr-Universität Bochum.
†Also with Services, Cyber Security and Safety Group, University of Twente.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
© 2017 Copyright held by the owner/author(s). Publication rights licensed to Associa-
tion for Computing Machinery.
ACM ISBN 978-1-4503-5345-8/17/12...$15.00
https://doi.org/10.1145/3134600.3134618
1 INTRODUCTION
Control-flow hijacking represents one of the major attack vectors
against computer systems in the last two decades. Given the impact
that control-flow attacks had on general-purpose computers [18],
most operating systems adopted the Executable Space Protection
(ESP, also known as NX, W ⊕ X, or DEP) mechanism [10, 24] to-
gether with Address Space Layout Randomization (ASLR). To over-
come these exploit mitigation approaches, a new exploitation tech-
nique named return-oriented programming (ROP) [46] was proposed,
which allows an attacker to circumvent ESP.
To address this problem, Abadi et al. suggested the concept of
control-flow integrity (CFI) as a general defense against ROP at-
tacks [1]. CFI ensures that program execution only passes through
approved execution paths taken from the software’s control-flow
graph (CFG). To achieve this, at each indirect jump/call and re-
turn instruction, the destination address is checked to determine
whether it follows a valid path in the CFG [7]. Following Abadi
et al. [1] various researchers suggested different CFI policies and
implementations for general-purpose computers [9, 49, 50, 52, 54].
Similar to general-purpose computers, an attacker can use ROP
and ROP-like techniques such as Ret2ZP [21] to overcome exploit
mitigation mechanisms in embedded systems. However, embedded
systems are a lot more diverse in terms of resources, availability, and
thus CFI system requirements and specifications are different with
respect to general-purpose computers. Because of this diversity,
only few CFI approaches were proposed for embedded platforms
such as mobile devices [12, 38].
Among embedded systems, a family of industrial devices named
Programmable Logic Controllers (PLCs) plays a major role in crit-
ical infrastructures. PLCs are real-time embedded systems which
control physical industrial processes via their I/O interfaces. Due
to their sensitive role in controlling industrial processes, successful
exploitation of a PLC can affect the physical world and, as a result,
can have severe consequences. Despite their importance regarding
the safety and security of industrial processes, PLCs are as vulner-
able to control-flow attacks as (most) other systems [22]. Similar
to general-purpose computers, control-flow hijacking attacks such
as ROP are one of the key techniques that an attacker can use to
obtain system level access to a given PLC. Due to lack of protection
mechanisms inside a PLC, getting system level access to it can pave
the way for attackers to silently manipulate industrial processes
ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
Ali Abbasi, Thorsten Holz, Emmanuele Zambon, and Sandro Etalle
without being detected using techniques such as the Pin Control At-
tack [2]. Despite such attack vectors, to the best of our knowledge,
no CFI solution for PLCs has been devised. Existing CFI approaches
for other non-critical embedded systems or general-purpose com-
puters cannot work for a PLC: As described in the NIST (National
Institute of Standards and Technology) 800-82 guideline, any secu-
rity measures for Industrial Control Systems (ICS), including PLCs,
must also consider availability and real-time requirements of the
system [48]. To the best of our knowledge, no CFI system to date
considers availability and timeliness (real-time) requirements of
the PLC.
In this paper, we present the design and implementation of ECFI,
the first control-flow verification system for environments where
availability and hard real-time systems are crucial. To address its
environmental requirements, ECFI considers the availability and
timeliness of the PLC more important than the security of it. ECFI
is a fine-grained CFI approach that protects both forward edges
and backward edges of the control-flow graph. ECFI consists of
a non-conditional simple instrumentation code and a lock-free
asynchronous shadow stack which is implemented as a ring buffer,
combined with a checking routine. This architecture allows the PLC
OS to schedule runtime CFI checks according to the PLC’s real-time
constraints. Our prototype implementation of this concept supports
the ARM architecture. We especially focus on ARM-based devices
since a large share of PLCs use ARM processors [44].
To test ECFI, we implemented it in a real-world industrial PLC,
running a Real-Time Operating System (RTOS). We use ECFI to
protect a PLC runtime application which reads I/O inputs, executes
PLC control logic, updates the outputs, and provides a Modbus
TCP server for the SCADA server. Besides respecting real-time
constraints, our prototype implementation induces a moderate 1.5%
CPU overhead.
Maintaining the availability and timeliness requirement of the
PLC comes at a cost. In our case, to preserve the real-time proper-
ties of the PLC, we devoted the CFI-checker to a separate process
that has lower priority. We also had to make our shadow stack
overwrite-able to avoid priority inversion, which is a common issue
for real-time systems [42]. Using these features of ECFI, an attacker
can force a process to "starve" by keeping the CPU busy (e.g., by
using a DoS attack) and then overwrite the shadow stack with nor-
mal values that do not raise any alert. However, we use inherited
features of the real-time systems to design a strategy that mitigates
this attack possibility. In a real-time system, the range of consumed
CPU cycles of the tasks is both small and predictable. Thus ECFI
monitors the CPU cycles consumed per PLC scan cycle to detect
an attack against the shadow stack. To evaluate this strategy, we
construct a ROP chain to attack our shadow stack and overwrite
the control-flow meta-data with fake but acceptable values. In the
same time, we executed a DoS attack against the PLC which con-
sumed all CPU resources of the device. However, our prototype
implementation was still able to detect the shadow stack overwrite
and raise an alert for this attack.
In summary, the contributions of this paper are as follows:
• First CFI approach for PLCs: ECFI is the first CFI enforcement
system that was designed for real-world industrial PLCs.
Our CFI approach has limited CPU overhead and no I/O
performance impact.
• Hard real-time compatibility: the main objective of a PLC is
to control physical processes with real-time constraints. The
priority of applications running inside a PLC is thus subject
to the PLC’s ability to run its primary tasks: updating I/Os
and running the control logic on time. ECFI, to the best of
our knowledge, is the first CFI approach that considers the
real-time requirements of the PLC runtime.
2 BACKGROUND
Before diving into the technical details of our approach, we briefly
discuss the necessary background information needed to under-
stand the rest of the paper.
2.1 Programmable Logic Controllers
Programmable Logic Controllers (PLCs) are a family of embedded
devices that are used in critical industrial environments. Usually,
these environments mandate real-time control over an industrial
process. Failing to execute one or multiple I/O operations in a timely
manner may result in the failure of an industrial process, which
leads to unacceptable consequences. To overcome this problem, the
majority of PLCs are equipped with RTOS to execute their tasks in
a predictable manner.
For example, a PLC which operators use in a sewer network
must be able to react to the changes in the water level due to rain
in real-time. In a power plant, a PLC-like device must react to an
out-of-phase generator by controlling a generator breaker on a
millisecond scale.
Generally speaking, a PLC runs a software called the runtime
that controls its primary task, I/O operations. The runtime software
interprets or executes another code known as the control logic. The
control logic is a compiled form of the PLC’s programming language,
such as Structured Text, Function Block Diagram (FBD), or ladder
logic. FBDs and ladder logic are graphical programming languages
that describe the control logic of a given industrial process. The PLC
runtime usually prepares the control logic execution by scanning
the inputs and storing it in the variable table and then updating the
outputs. A sequence consisting of reading the inputs, executing the
control logic code, and updating the outputs is called the program
scan cycle. The PLC program scan is an infinite loop and runs
indefinitely. The variable table is a virtual table that contains all the
variables needed by the control logic: setpoints, counters, timers,
inputs, and outputs. During the program scan cycle, every change
in the I/O of the PLC is ignored until the next program scan cycle.
Figure 1 depicts the PLC runtime operation, the running of the
logic, and its interaction with the I/O.
One of the most common architectures used for PLCs is the
ARM architecture [44]. For example, various models of PLCs man-
ufactured by vendors such as Allen-Bradley, Schneider Electric,
Honeywell, and WAGO PLCs are using the ARM architecture [44].
2.2 PLC Logic
There are two types of PLC logic: bytecode based and binary based.
In bytecode-based logic, the bytecode will get executed by the PLC
runtime with a Just-in-Time (JIT) compiler. An example of PLC
ECFI: Asynchronous Control Flow Integrity for Programmable Logic Controllers
ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
IT domain which is usual in other CFI papers. Instead, we will di-
vide our attacker model to two parts. We first describe our attacker
model for the OT and then IT domain.
2.4.1 OT Attacker Model: In this paper, we do not consider
adversaries that do not understand the behavior of the target pro-
cess and do not want to manipulate the physical process carefully.
An adversary who wants to cause a naïve attack can simply achieve
her objective by overwriting the return address of a memory cor-
ruption vulnerability to a non-valid memory address and thus ter-
minate the PLC runtime (DoS attack), causing the PLC to lose its
control of the physical process. No CFI system can cope with such
attack. Instead, in our attacker model, we assume an adversary
whose objective is to exploit the PLC to manipulate an industrial
process carefully. We believe that in the majority of attacks which
manipulate the physical process there will be a delay between in-
fection of the PLC and manipulation of the physical process. This
delay is due to two reasons:
• Delay caused by infecting multiple types of equipment: once
an attacker gets access to an industrial network, depending
on the complexity of the physical process, she might need
to infect more than one industrial equipment such as PLC
to be able to manipulate the process. Therefore, the attacker
in this step will infect multiple devices before executing
the attack. Indeed, looking at the German steel mill cyber
attack reported by BSI (Bundesamt fur Sicherheit in der
Informationstechnik) [19, 25] and the Stuxnet [17] attackers
had to infect multiple devices (e.g., infecting both operation
PLC and fail-safe PLCs) before executing the attack.
• Delay due to process and I/O mapping: as described by McLaugh-
lin et al. [29] even if an attacker completely takes control
of a PLC, she still faces two challenges. Firstly, the attacker