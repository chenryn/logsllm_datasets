[6] W. E. Boebert and R. Y. Kain. A Practical Alternative
to Hierarchical Integrity Policies. In Proceedings of
the 8th National Computer Security Conference, 1985.
[7] Sven Bugiel, Lucas Davi, Alexandra Dmitrienko,
Thomas Fischer, Ahmad-Reza Sadeghi, and Bhargava
Shastry. Towards Taming Privilege-Escalation Attacks
on Android. In Proceedings of the 19th Network and
Distributed System Security Symposium(NDSS), 2012.
[8] Xiang Cai, Yuwei Gui, and Rob Johnson. Exploiting
Unix File-System Races via Algorithmic Complexity
Attacks. In IEEE Statistical Signal Processing Work-
shop, 2009.
[9] Suresh Chari, Shai Halevi, and Wietse Venema. Where
Do You Want to Go Today? Escalating Privileges
by Pathname Manipulation. In Proceedings of the
17th Network and Distributed System Security Sym-
posium(NDSS), 2010.
[10] Haining Chen, Ninghui Li, William Enck, Yousra
Aafer, and Xiangyu Zhang. Analysis of SEAndroid
Policies: Combining MAC and DAC in Android. In
Proceedings of the Annual Computer Security Applica-
tions Conference (ACSAC), 2017.
[11] Hong Chen, Ninghui Li, and Ziqing Mao. Analyz-
ing and Comparing the Protection Quality of Security
Enhanced Operating Systems. In Proceedings of the
16th Network and Distributed System Security Sympo-
sium(NDSS), pages 11–16, 2009.
[12] Crispin Cowan, Steve Beattie, Chris Wright, and Greg
Kroah-hartman. RaceGuard: Kernel Protection from
Temporary File Race Vulnerabilities. In Proceedings of
the 10th conference on USENIX Security Symposium,
2001.
[13] Drew Dean and Alan Hu. Fixing Races for Fun and
Proﬁt. In Proceedings of the 13th conference on
USENIX Security Symposium, 2004.
[14] William Enck, Machigar Ongtang, and Patrick Mc-
Daniel. On Lightweight Mobile Phone Application
Certiﬁcation. In Proceedings of the 16th ACM Con-
ference on Computer and Communications Security,
pages 235–245, 2009.
[15] Boris Farber. ClassyShark. URL: https://github.
com / google / android - classyshark. Accessed
May 2020.
Julien Gamba, Mohammed Rashed, Abbas Razagh-
panah, Juan Tapiador, and Narseo Vallina-Rodriguez.
An Analysis of Pre-installed Android Software. arXiv
preprint arXiv:1905.02713, 2019.
[16]
[17] Google. Security Overview. 2019. URL: https : / /
source . android . com / security / overview /
updates - resources # process _ types. Accessed
Jan. 10, 2020.
[18] Google. SELinux for Android 8.0. February 2018.
URL: https://source.android.com/security/
selinux/images/SELinux_Treble.pdf. (Accessed
Dec 2019).
[19] Google. Storage Updates in Android 11. URL: https:
/ / developer . android . com / preview / privacy /
storage. Accessed June 2020.
[20] Norm Hardy. The Confused Deputy: or Why Capabili-
ties Might Have Been Invented. ACM Special Interest
Group in Operating Systems, Operation System Review,
22(4), 1988. ISSN: 0163-5980.
[21] M. Harrison, W. Ruzzo, and J. D. Ullman. Protection in
Operating Systems. Communications of ACM, August
1976.
[22] Grant Hernandez, Dave Jing Tian, Anurag Swarnim Ya-
dav, Byron J Williams, and Kevin RB Butler. BigMAC:
Fine-Grained Policy Analysis of Android Firmware.
In Proceedings of the USENIX Security Symposium,
2020.
[23] Antonio Ken Iannillo, Roberto Natella, Domenico
Cotroneo, and Cristina Nita-Rotaru. Chizpurﬂe: A
Gray-box Android Fuzzer for Vendor Service Cus-
tomizations. In Software Reliability Engineering (IS-
SRE), IEEE 28th International Symposium, pages 1–
11, 2017.
[24] Trent Jaeger, Antony Edwards, and Xiaolan Zhang.
Managing Access Control Policies Using Access Con-
trol Spaces. In Proceedings of the Seventh ACM Sym-
posium on Access Control Models and Technologies,
pages 3–12, New York, NY, USA, 2002.
[25] Trent Jaeger, Reiner Sailer, and Xiaolan Zhang. An-
alyzing Integrity Protection in the SELinux Example
Policy. In Proceedings of the 12th USENIX Security
Symposium, 2003.
2594    30th USENIX Security Symposium
USENIX Association
[26] A. Jones, R. Lipton, and L. Snyder. A Linear Time
Algorithm for Deciding Security. In Proceedings of the
17th Annual Symposium on Foundations of Computer
Science, 1976.
[27] Daniel Kachakil. Multiple Vulnerabilities in An-
droid’s Download Provider (CVE-2018-9468, CVE-
2018-9493, CVE-2018-9546). https://ioactive.
com/multiple- vulnerabilities- in- androids-
download-provider-cve-2018-9468-cve-2018-
9493-cve-2018-9546/, January 2020.
[28] Kyung-suk Lee and Steve J. Chapin. Detection of File-
based Race Conditions. International Journal of Infor-
mation Security, 2005.
[29] P. A. Loscocco, S. D. Smalley, P. A. Muckelbauer, R. C.
Taylor, S. J. Turner, and J. F. Farrell. The Inevitabil-
ity of Failure: The Flawed Assumption of Security in
Modern Computing Environments. In Proceedings of
the 21st National Information Systems Security Con-
ference, pages 303–314, 1998.
[30] Slava Makkaveev. Man-in-the-Disk:Android Apps Ex-
posed via External Storage. February 2019. URL:
https : / / research . checkpoint . com / 2018 /
androids-man-in-the-disk/.
[31] W. S. McPhee. Operating System Integrity in OS/VS2.
IBM System Journal, 13:230–252, 3, September 1974.
[32] Novell. AppArmor Linux Application Security. http:
//www.novell.com/linux/security/apparmor/.
[33] Open ADB Ports Being Exploited to Spread Possi-
ble Satori Variant in Android Devices, August 2018.
URL: https://blog.trendmicro.com/trendlabs-
security - intelligence / open - adb - ports -
being - exploited - to - spread - possible -
satori - variant - in - android - devices. (Ac-
cessed Feb 2020).
[34] OpenWall Project - Information Security Software for
Open Environments, 2008. URL: %5Curl % 7Bhttp :
//www.openwall.com/%7D.
J. Park, G. Lee, S. Lee, and D. Kim. RPS: An Exten-
sion of Reference Monitor to Prevent Race-Attacks.
In Advances in Multimedia Information Processing,
2004.
[35]
[36] Calton Pu and Jinpeng Wei. Modeling and Preventing
TOCTTOU Vulnerabilities in Unix-style Filesystems.
In IEEE International Symposium of System Engineer-
ing, 2006.
[37] Ryan Johnson. All Your SMS and Contacts Belong to
Adups and Others. July 2017. URL: https://www.
blackhat.com/docs/us- 17/wednesday/us- 17-
Johnson - All - Your - SMS - & - Contacts - Belong -
To-Adups-&-Others.pdf. (Accessed June 2019).
[38] R. S. Sandhu. The Typed Access Matrix Model. In
Proceedings of the 1992 IEEE Symposium on Security
and Privacy, 1992.
[39] SELinux.
-. URL: https : / / github . com /
SELinuxProject. (Accessed Dec 2019).
[40] SETools. URL: https : / / github . com /
TresysTechnology/setools. Accessed Dec 2019.
[41] Umesh Shankar, Trent Jaeger, and Reiner Sailer. To-
ward Automated Information-Flow Integrity Veriﬁca-
tion for Security-Critical Applications. In Proceedings
of the 2006 Network and Distributed System Security
Symposium (NDSS), 2006.
[42] Stephen Smalley and Robert Craig. Security Enhanced
(SE) Android: Bringing Flexible MAC to Android.
In Proceedings of the 20th Network and Distributed
Systems Symposium (NDSS), 2013.
[43] StatCounter. OS Market Share. March 2020. URL:
https : / / gs . statcounter . com / os - market -
share.
[44] Dave (Jing) Tian, Grant Hernandez, Joseph I. Choi,
Vanessa Frost, Christie Raules, Patrick Traynor,
Hayawardh Vijayakumar, Lee Harrison, Amir Rahmati,
Michael Grace, and Kevin R. B. Butler. ATtention
Spanned: Comprehensive Vulnerability Analysis of
AT Commands Within the Android Ecosystem. In 27th
USENIX Security Symposium, pages 273–290, 2018.
Jonathon Tidswell and Trent Jaeger. An access control
model for simplifying constraint expression. In Pro-
ceedings of the 7th ACM Conference on Computer and
Communications Security, 2000.
[45]
[46] Dan Tsafrir, Tomer Hertz, David Wagner, and Dilma
Da Silva. Portably Solving File TOCTTOU Races with
Hardness Ampliﬁcation. In USENIX Conference on
File and Storage Technologies, 2008.
[47] Eugene Tsyrklevich and Bennet Yee. Dynamic Detec-
tion and Prevention of Race Conditions in File Ac-
cesses. In USENIX Security Symposium, 2003.
[48] Prem Uppuluri, Uday Joshi, and Arnab Ray. Prevent-
ing Race Condition Attacks on Filesystems. In ACM
Symposium on Applied Computing, 2005.
[49] Hayawardh Vijayakumar, Xinyang Ge, Mathias Payer,
and Trent Jaeger. Jigsaw: Protecting Resource Access
by Inferring Programmer Expectations. In Proceedings
of the 23rd USENIX Security Symposium, August 2014.
[50] Hayawardh Vijayakumar, Guruprasad Jakka, Sandra
Rueda, Joshua Schiffman, and Trent Jaeger. Integrity
Walls: Finding Attack Surfaces from Mandatory Ac-
cess Control Policies. In Proceedings of the 7th ACM
Symposium on Information, Computer and Communi-
cations Security, pages 75–76, 2012.
[51] Hayawardh Vijayakumar, Joshua Schiffman, and Trent
Jaeger. Process Firewall: Protecting Processes During
Resource Access. In Proceedings of the Eighth Euro-
pean Conference on Computer Systems, 2013.
USENIX Association
30th USENIX Security Symposium    2595
File
Table 6: File DAC data sample
DAC perms
User
Group MAC security label
radio
radio
efs_file
-rw-rw-r--
authtokcont
Process Information: PolyScope obtains process access con-
trol information by executing the command "adb shell
ps -A -o label,user,group,COMMAND", which provides
a mapping from a DAC user ID to MAC label for running
processes. One data sample is shown in Table 7. This entry
shows that process init has security label of u:r:init:s0,
UID of root, GID of root, was spawned by command /init,
and PID of 1. However, the process list collection does not
provide the full information on DAC supplementary groups,
as we described in Section 5.3. In the case of Android system
services, these extra groups are deﬁned in the init.rc ﬁle,
which can be parsed statically. For apps, PolyScope uses a
shell script to obtain process DAC group information stored
in /proc.
Security label
UID
Table 7: Process Data
Group
Command
u:r:init:s0
root
root
/init
PID
1
Android Permission Data: To obtain Android Per-
missions’ mappings to DAC groups, PolyScope parses
/etc/platform.xml from the Android device. Next, we
need to separate the signature Android Permissions from the
non-signature Android Permissions, which are available via
the Android package manager (PM), as the non-signature
permissions may be applied by an app. PolyScope uses the
non-signature permissions to compute DAC expansion for
adversaries.
Filesystem and FileProvider: To determine whether attack
operations are blocked, PolyScope needs to examine the
ﬁlesystem conﬁguration and the application package. First,
PolyScope obtains ﬁlesystem conﬁgurations by running "adb
shell mount", which will return list of ﬁlesystem mount
conﬁguration. We identify the directories mounted with the
ro or the nosymlink ﬂags and mark them as read-only and
prohibiting symlinks, respectively. Second, for the applica-
tion package, we want to determine if the application uses the
FileProvider class to protect itself from luring. PolyScope ﬁrst
queries the PackageManager service for a full list of apk ﬁles
on the system. Next, PolyScope collects all the apk ﬁles found
and performs code inspection with Google’s new ClassyShark
tool [15] to identify the presence of the FileProvider class.
[52] Hayawardh Vijayakumar, Joshua Schiffman, and Trent
Jaeger. STING: Finding Name Resolution Vulnerabili-
ties in Programs. In 21st USENIX Security Symposium,
2012.
[53] Ruowen Wang, Ahmed M. Azab, William Enck,
Ninghui Li, Peng Ning, Xun Chen, Wenbo Shen, and
Yueqiang Cheng. SPOKE: Scalable Knowledge Col-
lection and Attack Surface Analysis of Access Control
Policy for Security Enhanced Android. In Proceed-
ings of the ACM Asia Conference on Computer and
Communications Security (ASIACCS), 2017.
[54] Ruowen Wang, William Enck, Douglas Reeves, Xin-
wen Zhang, Peng Ning, Dingbang Xu, Wu Zhou, and
Ahmed M. Azab. EASEAndroid: Automatic Policy
Analysis and Reﬁnement for Security Enhanced An-
droid via Large-scale Semi-supervised Learning. In
Proceedings of the 24th USENIX Conference on Secu-
rity Symposium, pages 351–366, 2015.
[55] Chris Wright, Crispin Cowan, and James Morris. Linux
Security Modules: General Security Support for the
Linux Kernel. In USENIX Security Symposium, 2002.
[56] Liang Xie, Xinwen Zhang, Ashwin Chaugule, Trent
Jaeger, and Sencun Zhu. Designing System-Level De-
fenses against Cellphone Malware. In 28th IEEE Sym-
posium on Reliable Distributed Systems (SRDS), 2009.
[57] Yury Zhauniarovich and Olga Gadyatskaya. Small
Changes, Big Changes: An Updated View on the An-
droid Permission System. In Proceedings of the Inter-
national Symposium on Research in Attacks, Intrusions,
and Defenses (RAID), 2016.
A Additional Background
In this section, we provide details on how PolyScope collects
the relevant access control information.
A.1 Access Control Data Collection
MAC Data: To obtain MAC data, PolyScope ﬁrst pulls
the SEAndroid policy binary ﬁle from the Android root
directory with command "adb pull sepolicy". With the
SELinux policy binary in hand, we extract the allow rules
with "sesearch -A sepolicy". Then, in order to parse
the SELinux attributes, we pull the attribute mapping with
"seinfo -a -x sepolicy".
DAC Data: To obtain DAC permissions for all ﬁles on an
Android system, PolyScope executes "adb shell ls -lRZ"
from the root directory. Note that the phone must be rooted to
obtain the full list of ﬁle permissions, so we use a boot time
root technique to gain root. PolyScope collects the ﬁle permis-
sion data shown in Table 6. The data in Table 6 indicates: a
ﬁle authtokcont under the directory /efs has read, write
permissions for its owner and group members. Its owner and
group UID are both radio, and its MAC security label is
efs_file.
2596    30th USENIX Security Symposium
USENIX Association