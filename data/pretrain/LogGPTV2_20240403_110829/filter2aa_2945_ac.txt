### Chapter Overview
When it’s time to use a code sample, the book will provide instructions on how to open the necessary files.

#### Important Note
Many of the code samples in this book rely on NuGet packages that are not included with the provided code. These packages will be downloaded automatically the first time you build a project. If you open a project and examine the code before building it, Visual Studio may report numerous errors for unresolved references. Building the project will resolve these references, and the errors should disappear.

For those who prefer detailed information, here is a list of the sample Visual Studio 2017 projects and solutions, organized by the folders in which they can be found. In many cases, the exercises include starter files and completed versions of the same projects for reference. The completed projects for each chapter are stored in folders with the suffix “-Complete.”

### Project/Solution Descriptions

**Chapter 1**
- **TextHello**: This project introduces the creation of a simple program that displays a text-based greeting.
- **Hello**: This project opens a window that prompts the user for their name and then displays a greeting.

**Chapter 2**
- **PrimitiveDataTypes**: Demonstrates how to declare variables using each of the primitive types, assign values to them, and display their values in a window.
- **MathsOperators**: Introduces arithmetic operators (+, -, *, /, %).

**Chapter 3**
- **Methods**: Reexamines the code in the `MathsOperators` project and explores how methods are used to structure the code.
- **DailyRate**: Walks through writing your own methods, running them, and stepping through method calls using the Visual Studio 2015 debugger.
- **DailyRate Using Optional Parameters**: Shows how to define a method with optional parameters and call the method using named arguments.

**Chapter 4**
- **Selection**: Uses a cascading if statement to implement complex logic, such as comparing the equivalence of two dates.
- **SwitchStatement**: A simple program that uses a switch statement to convert characters into their XML representations.

**Chapter 5**
- **WhileStatement**: Demonstrates a while statement that reads the contents of a source file one line at a time and displays each line in a text box on a form.
- **DoStatement**: Uses a do statement to convert a decimal number to its octal representation.

**Chapter 6**
- **MathsOperators**: Revisits the `MathsOperators` project from Chapter 2 and shows how various unhandled exceptions can cause the program to fail. It then demonstrates how to use try and catch keywords to make the application more robust.

**Chapter 7**
- **Classes**: Covers the basics of defining your own classes, including public constructors, methods, and private fields. It also shows how to create class instances using the `new` keyword and how to define static methods and fields.

**Chapter 8**
- **Parameters**: Investigates the difference between value parameters and reference parameters, demonstrating the use of the `ref` and `out` keywords.

**Chapter 9**
- **StructsAndEnums**: Defines a struct type to represent a calendar date.

**Chapter 10**
- **Cards**: Shows how to use arrays to model hands of cards in a card game.

**Chapter 11**
- **ParamsArray**: Demonstrates how to use the `params` keyword to create a single method that can accept any number of `int` arguments.

**Chapter 12**
- **Vehicles**: Creates a simple hierarchy of vehicle classes using inheritance and demonstrates how to define a virtual method.
- **ExtensionMethod**: Shows how to create an extension method for the `int` type, providing a method that converts an integer value from base 10 to a different number base.

**Chapter 13**
- **Drawing**: Implements part of a graphical drawing package using interfaces to define the methods that drawing shapes expose and implement.

**Chapter 14**
- **GarbageCollectionDemo**: Demonstrates how to implement exception-safe disposal of resources using the Dispose pattern.

**Chapter 15**
- **Drawing Using Properties**: Extends the application in the `Drawing` project developed in Chapter 13 to encapsulate data in a class using properties.
- **AutomaticProperties**: Shows how to create automatic properties for a class and use them to initialize instances of the class.

**Chapter 16**
- **Indexers**: Uses two indexers: one to look up a person’s phone number when given a name and the other to look up a person’s name when given a phone number.

**Chapter 17**
- **BinaryTree**: Demonstrates how to use generics to build a type-safe structure that can contain elements of any type.
- **BuildTree**: Shows how to use generics to implement a type-safe method that can take parameters of any type.

**Chapter 18**
- **Cards**: Updates the code from Chapter 10 to show how to use collections to model hands of cards in a card game.

**Chapter 19**
- **BinaryTree**: Shows how to implement the generic `IEnumerator` interface to create an enumerator for the generic `Tree` class.
- **IteratorBinaryTree**: Uses an iterator to generate an enumerator for the generic `Tree` class.

**Chapter 20**
- **Delegates**: Demonstrates how to decouple a method from the application logic that invokes it using a delegate. The project is then extended to show how to use an event to alert an object to a significant occurrence and how to catch an event and perform any required processing.

**Chapter 21**
- **QueryBinaryTree**: Shows how to use LINQ queries to retrieve data from a binary tree object.

**Chapter 22**
- **ComplexNumbers**: Defines a new type that models complex numbers and implements common operators for this type.

**Chapter 23**
- **GraphDemo**: Generates and displays a complex graph on a UWP form, using a single thread to perform the calculations.
- **Parallel GraphDemo**: Uses the `Parallel` class to abstract out the process of creating and managing tasks.
- **GraphDemo With Cancellation**: Shows how to implement cancellation to halt tasks in a controlled manner before they have completed.
- **ParallelLoop**: Provides an example showing when you should not use the `Parallel` class to create and run tasks.

**Chapter 24**
- **GraphDemo**: A version of the `GraphDemo` project from Chapter 23 that uses the `async` keyword and the `await` operator to perform the calculations that generate the graph data asynchronously.
- **PLINQ**: Shows examples of using PLINQ to query data using parallel tasks.
- **CalculatePI**: Uses a statistical sampling algorithm to calculate an approximation for pi, using parallel tasks.

**Chapter 25**
- **Customers**: Implements a scalable user interface that can adapt to different device layouts and form factors. The user interface applies XAML styling to change the fonts and background image displayed by the application.

**Chapter 26**
- **DataBinding**: A version of the `Customers` project that uses data binding to display customer information retrieved from a data source in the user interface. It also shows how to implement the `INotifyPropertyChanged` interface so that the user interface can update customer information and send these changes back to the data source.
- **ViewModel**: Separates the user interface from the logic that accesses the data source by implementing the Model-View-ViewModel (MVVM) pattern.
- **Cortana**: Integrates the `Customers` app with Cortana, allowing users to issue voice commands to search for customers by name.

**Chapter 27**
- **Web Service**: Includes a web application that provides an ASP.NET Web API web service that the `Customers` application uses to retrieve customer data from a SQL Server database. The web service uses an entity model created with the Entity Framework to access the database.

### Errata and Book Support
We have made every effort to ensure the accuracy of this book and its companion content. Any errors reported since the book's publication are listed on our Microsoft Press site at:
- [https://aka.ms/VisCSharp9e/errata](https://aka.ms/VisCSharp9e/errata)

If you find an error that is not already listed, you can report it to us through the same page. For additional support, email Microsoft Press Book Support at [mspinput@microsoft.com](mailto:mspinput@microsoft.com). Please note that product support for Microsoft software and hardware is not offered through the previous addresses. For help with Microsoft software or hardware, visit [https://support.microsoft.com](https://support.microsoft.com).

### Stay in Touch
Let's keep the conversation going! Follow us on Twitter: [http://twitter.com/MicrosoftPress](http://twitter.com/MicrosoftPress)

### Part I: Introducing Microsoft Visual C# and Microsoft Visual Studio 2017
This introductory part of the book covers the essentials of the C# language and shows you how to get started building applications with Visual Studio 2017. In Part I, you’ll learn how to create new projects in Visual Studio, declare variables, use operators to create values, call methods, and write many of the statements needed when implementing C# programs. You’ll also learn how to handle exceptions and use the Visual Studio debugger to step through your code and spot problems that prevent your applications from working correctly.

### Chapter 1: Welcome to C#
After completing this chapter, you will be able to:
- Use the Microsoft Visual Studio 2017 programming environment.
- Create a C# console application.
- Explain the purpose of namespaces.
- Create a simple graphical C# application.

This chapter introduces Visual Studio 2017, the programming environment and toolset designed to help you build applications for Microsoft Windows. Visual Studio 2017 is the ideal tool for writing C# code and provides many features that you will learn about as you progress through this book. In this chapter, you will use Visual Studio 2017 to build some simple C# applications and get started on the path to building highly functional solutions for Windows.

#### Beginning Programming with the Visual Studio 2017 Environment
Visual Studio 2017 is a feature-rich programming environment containing the functionality you need to create large or small C# projects running on Windows. You can even construct projects that seamlessly combine modules written in different programming languages, such as C++, Visual Basic, and F#. In the first exercise, you will open the Visual Studio 2017 programming environment and learn how to create a console application.

**Note:** A console application is an application that runs in a Command Prompt window instead of providing a graphical user interface (GUI).

#### Creating a Console Application in Visual Studio 2017
1. On the Windows taskbar, click Start, type "Visual Studio 2017," and press Enter. Alternatively, you can click the Visual Studio 2017 icon on the Start menu.
   - Visual Studio 2017 starts and displays the Start page. (Your Start page might differ depending on the edition of Visual Studio 2017 you are using.)
2. On the File menu, point to New, and then click Project.
   - The New Project dialog box opens, listing the templates you can use as a starting point for building an application. The dialog box categorizes templates according to the programming language and the type of application.
3. In the left pane, expand the Installed node (if it is not already expanded), and then click Visual C#. In the middle pane, verify that the combo box at the top of the pane displays ".NET Framework 4.6.1," and then click "Console App (.NET Framework)."
   - **Note:** Make sure you select "Console App (.NET Framework)" and not "Console App (.NET Core)." The .NET Core template is used for building portable applications that can run on other operating systems, such as Linux. However, .NET Core applications do not provide the full range of features available in the complete .NET Framework.
4. In the Location box, type `C:\Users\YourName\Documents\Microsoft Press\VCSBS\Chapter 1`. Replace `YourName` in this path with your Windows username.
   - **Note:** To avoid repetition and save space, throughout the rest of this book, I will refer to the path `C:\Users\YourName\Documents` simply as your Documents folder.
   - **Tip:** If the folder you specify does not exist, Visual Studio 2017 will create it for you.
5. In the Name box, type `TestHello` (type over the existing name, `ConsoleApplication1`).
6. Ensure that the "Create Directory For Solution" check box is selected and that the "Add To Source Control" check box is clear, and then click OK.
   - Visual Studio creates the project using the Console Application template and displays the starter code for the project.

The menu bar at the top of the screen provides access to the features you'll use in the programming environment. You can use the keyboard or mouse to access the menus and commands, just as you can in all Windows-based programs. The toolbar is located beneath the menu bar and provides button shortcuts to run the most frequently used commands.

The Code and Text Editor window, occupying the main part of the screen, displays the contents of source files. In a multifile project, when you edit more than one file, each source file has its own tab labeled with the name of the source file. You can click the tab to bring the named source file to the foreground in the Code and Text Editor window.

The Solution Explorer pane appears on the right side of the IDE, adjacent to the Code and Text Editor window. Solution Explorer displays the names of the files associated with the project, among other items. You can double-click a file name in Solution Explorer to bring that source file to the foreground in the Code and Text Editor window.

Before writing any code, examine the files listed in Solution Explorer, which Visual Studio 2017 has created as part of your project:

- **Solution 'TestHello'**: This is the top-level solution file. Each application contains a single solution file. A solution can contain one or more projects, and Visual Studio 2017 creates the solution file to help organize these projects. If you use File Explorer to look at your Documents\Microsoft Press\VCSBS\Chapter 1\TestHello folder, you’ll see that the actual name of this file is `TestHello.sln`.
- **TestHello**: This is the C# project file. Each project file references one or more files containing the source code and other artifacts for the project, such as graphics images. You must write all the source code in a single project in the same programming language. In File Explorer, this file is actually called `TestHello.csproj`, and it is stored in the `\Microsoft Press\VCSBS\Chapter 1\TestHello\TestHello` folder in your Documents folder.
- **Properties**: This is a folder in the TestHello project. If you expand it (click the arrow next to Properties), you will see that it contains a file called `AssemblyInfo.cs`. `AssemblyInfo.cs` is a special file that you can use to add attributes to a program, such as the name of the author, the date the program was written, and so on. You can specify additional attributes to modify the way the program runs. Explaining how to use these attributes is beyond the scope of this book.
- **References**: This folder contains references to libraries of compiled code that your application can use. When your C# code is compiled, it is converted into a library and given a unique name. In the Microsoft .NET Framework, these libraries are called assemblies. Developers use assemblies to package useful functionality that they have written so that they can distribute it to other developers who might want to use these features in their own applications. If you expand the References folder, you will see the default set of references that Visual Studio 2017 adds to your project. These assemblies provide access to many of the commonly used features of the .NET Framework and are provided by Microsoft with Visual Studio 2017. You will learn about many of these assemblies as you progress through the exercises in this book.
- **App.config**: This is the application configuration file. It is optional and might not always be present. You can specify settings that your application uses at runtime to modify its behavior, such as the version of the .NET Framework to use to run the application. You will learn more about this file in later chapters of this book.
- **Program.cs**: This is a C# source file, and it is displayed in the Code and Text Editor window when the project is first created. You will write your code for the console application in this file. It also contains some code that Visual Studio 2017 provides automatically, which you will examine shortly.

### Writing Your First Program
Now that you have set up your project, you are ready to write your first C# program.