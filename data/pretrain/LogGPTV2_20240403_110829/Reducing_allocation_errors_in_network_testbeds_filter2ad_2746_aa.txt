# Reducing Allocation Errors in Network Testbeds

## Authors
- Jelena Mirkovic
- Hao Shi
- Alefiya Hussain

### Contact Information
- **USC/ISI**
- 4676 Admiralty Way, Ste 1001
- Marina Del Rey, USA
- **Emails:**
  - Jelena Mirkovic: [EMAIL]
  - Hao Shi: [EMAIL]
  - Alefiya Hussain: [EMAIL]

## Abstract
Network testbeds are widely used in computer science for both research and educational purposes. However, this increased usage can lead to resource allocation failures due to oversubscription. This paper investigates the causes of such failures on the DeterLab testbed and identifies three primary issues: (1) overuse of mapping constraints by users, (2) software errors, and (3) suboptimal resource allocation. We propose solutions that reduce allocation failures to 57.3% of the baseline. In cases where real resource oversubscription occurs, we examine usage patterns and show that a small fraction of unfair projects starve others under the current first-come-first-served policy. We then propose two novel approaches, "Take-a-Break" and "Borrow-and-Return," which temporarily pause long-running experiments to reduce allocation failures to 25% of the baseline. Our findings, based on DeterLab data, are applicable to other Emulab-based testbeds.

## Categories and Subject Descriptors
- C.2.1 [Computer Communication Networks]: Network Architecture and Design
- C.2.3 [Computer Communication Networks]: Network Operations

## Keywords
- network testbeds, Emulab, resource allocation

## 1. Introduction
Over the past decade, the use of network testbeds has become increasingly common in computer science, particularly for research and education. Researchers and educators now rely on testbeds for hands-on experimentation, demonstrations, and student assignments. However, current resource allocation practices often fail to meet these diverse user needs, leading to allocation failures and inefficiencies.

Most testbeds, including DeterLab, allocate resources on a first-come-first-served basis, which can result in resource shortages during critical periods. Additionally, users can keep allocated resources indefinitely, further exacerbating the problem. Based on our experience with DeterLab, most experiments are interactive and should last no more than a day. Long-running experiments often indicate a user's reluctance to release resources, primarily due to the lack of mechanisms to save and restore disk state and the absence of reservation systems.

In this paper, we aim to understand the reasons for resource allocation failures and propose changes to improve testbed operations. We survey related work, introduce our terminology and data, and explain the resource allocation problem. We then analyze the causes of allocation failures in DeterLab over eight years and propose solutions, including improved algorithms and policy modifications. Our findings, while based on DeterLab, are relevant to other Emulab-based testbeds.

## 2. Related Work
The adoption of emulation testbeds in networking research has led to numerous studies on their design and management. For example, Ripeanu [21] compares the resource management mechanisms of Globus and PlanetLab, while Banik et al. [4] evaluate protocols for exclusive access on PlanetLab. The StarBED project [18, 19] offers unique solutions for experiment management. These works focus on specific aspects of testbed management but do not address resource allocation algorithms, which is our primary focus.

Other studies have examined testbed usage and design. Hermenier and Ricci [9] analyze the topological requirements of Emulab experiments and propose ways to build better testbeds. Kim et al. [13] characterize PlanetLab usage and suggest bartering and central banking schemes, but do not propose better allocation algorithms. Yu et al. [25] propose a method for collecting and satisfying allocation requests, but it does not consider node heterogeneity. Chowdhury et al. [6] use mixed integer programming for resource allocation, but their constraints are limited. J. Lu et al. [15] develop a cost-efficient method for mapping virtual topologies, but do not consider node features.

In a broader context, ISPs often address resource allocation by over-provisioning, which is not feasible for testbeds due to physical and financial constraints. Clusters and data centers face similar issues, and some solutions, like Mesos [11] and Condor [23], may be partially applicable to testbeds but require more sophisticated user knowledge.

## 3. Terminology
To clarify the concepts discussed in this paper, we define several key terms related to network testbed use:

- **Experiment**: A collection of inputs submitted by a user to the testbed, describing the experiment's topology, software, and other requirements. Experiments can be modified, and each input represents a virtual topology.
- **Instance**: An instantiation of an experiment at the physical resources of the testbed. Each instance has a duration, size, and virtual topology. The same experiment can result in multiple non-overlapping instances.
- **Project**: A collection of experiment definitions and authorized users working on a common project under a single head-PI.

Figure 1 illustrates these terms and their relationships.

```plaintext
start
preload
defined
swapin
allocated
destroy
experiments
users
project
A
B
1
2
3
nodes
instance1
instance2
2
e
z
s
i
A
1
e
z
s
i
A
4
e
z
s
i
instance3
3
e
z
s
i
A
instance4
B
duration1
duration2
duration3
duration4
instance5
B
5
e
z
s
i
duration5
time
```

**Figure 1: Terminology**

- **Experiment A and B**: Two experiments with different instances.
- **Instances 1-5**: Five instances linked to experiments A and B, each with a specific duration and size.

This terminology will be used throughout the paper to describe the resource allocation process and the proposed solutions.

---

This revised version aims to provide a clear, coherent, and professional presentation of the research, making it easier for readers to understand the context, methodology, and findings.