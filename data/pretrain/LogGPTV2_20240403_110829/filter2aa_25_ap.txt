图16-9 使用Burp Suit查看当前UserID（460）订单信息
步骤五：修改cookie中的UserID为360，提交后服务器返回的订单信息如图16-10所
示。
图16-10 越权查看UserID为360的订单信息
16.1.3 某手机APP普通用户可越权查看其他用户个人信息
某手机APP查看“个人信息”功能存在平行越权漏洞，可越权查看其他用户个人信息。
步骤一：注册用户并登录后单击“系统设置→个人信息”处查看个人信息，如图16-11
所示。
图16-11 查看当前个人用户信息
步骤二：使用Burp  Suite抓包并修改studentId为188750，提交后服务器返回的其他用
户信息如图16-12所示。
图16-12 越权查看studentId为188750的用户信息
步骤三：修改studentId为138850，提交后服务器返回的其他用户信息如图16-13所
示。
图16-13 越权查看studentId为138850的用户信息
16.2 纵向越权
16.2.1 某办公系统普通用户权限越权提升为系统权限
服务器为鉴别客户端浏览器会话及身份信息，会将用户身份信息存储在  Cookie中，
并发送至客户端存储。攻击者通过尝试修改Cookie中的身份标识为管理员，欺骗服务器分
配管理员权限，达到垂直越权的目的，如图16-14所示。
某办公系统存在纵向越权漏洞，通过修改Cookie可直接提升普通用户权限为系统权
限。
图16-14 纵向越权流程图
步骤一：使用普通权限账号a02登录办公系统，成功登录后访问链接
http：//host/aaa/bbb/editUser.asp？iD=2，尝试修改权限。
由于普通用户无法访问修改权限模块，系统会跳转到NoPower页面提示用户无操作权
限，如图16-15所示。
图16-15 a02用户没有权限访问该模块
步骤二：使用Burp  Suite修改Cookie中的Tname参数为admin，欺骗服务器该请求为系
统管理员发出的，成功提升账号a02为系统管理员权限，如图16-16所示。
图16-16 将a02用户Cookie中的Tname修改为admin
步骤三：再次访问权限修改modifyuser页面http：//host/aaa/bbb/editUser.asp？iD=2，
如图16-17所示可成功访问。
图16-17 a02账号权限提升成功
16.2.2 某中学网站管理后台可越权添加管理员账号
攻击者通过删除服务器响应数据包中的跳转JS代码，未经身份验证直接进入后台“添
加用户”页面。然后利用Cookie先后添加普通用户A与B，虽然A与B不能直接修改自己的
权限，但A与B可相互修改对方的权限，因此攻击者利用A将B的权限修改为管理员权限，
并以 B 的身份登录后台，最终实现垂直越权获得管理员权限，如图16-18所示。
图16-18 纵向越权流程图
某学校网站管理后台存在越权漏洞，可以越权添加管理员账号。
步骤一：访问登录页面，尝试登录，如图16-19所示。
图16-19 身份认证未通过
访问  http：//www.xxx.com/WEB/ABC/addUser.aspx  可直接打开添加用户页面，如图
16-20所示。
图16-20 未授权访问新增用户模块
添加账号test，密码123456，添加完用户返回首页登录，如图16-21所示。
图16-21 使用新添加的用户登录系统
步骤二：登录成功后，提示没有分配管理权限，然后会强制退出管理系统，如图16-
22所示。
图16-22 test用户没有被管理员分配权限
但此时会生成一个Cookie，如图16-23所示。
图16-23 查看test用户的Cookie
步骤三：使用该Cookie访问http：//www.xxx.com/WEB/ABC/userList.aspx，可直接打
开分配权限的页面。其中test用户不能修改自己的权限，但可以修改其他用户的权限。再
添加一个新用户test2，两者可以互相添加权限，如图16-24所示。
图16-24 新增另一用户test2
步骤四：使用test账号修改test2账号的权限为管理员权限，如图16-25所示。
图16-25 修改test2用户为管理员权限
步骤五：使用test2账号重新登录，成功进入管理后台，如图16-26所示。
图16-26 test2用户成功登录管理员后台
16.2.3 某智能机顶盒低权限用户可越权修改超级管理员配置信息
攻击者以普通管理员身份登录后台，通过搜集信息获得管理员请求数据包进行重放，
越权修改超级管理员模块的设置，如图16-27所示。
图16-27 纵向越权流程图
某智能机顶盒设备在后台管理上存在越权漏洞，在同一网络中的任意用户可以利用受
影响的页面，越权修改超级管理员的设备配置信息。
步骤一：使用超级管理员登录，配置  user  密码。智能机顶盒设备的超级管理员的账
户名和密码为 chinanet/123456，登录后查看该机顶盒的设备信息，如图 16-28所示。
图16-28 超级管理员登录系统后台
使用超级管理员登录后，在“管理”模块下的“用户管理”中配置 user 用户的密码，如图
16-29所示。
图16-29 user用户密码配置
步骤二：使用超级管理员配置proxy代理地址，通过超级管理员在“应用”模块下
的“proxy代理”中配置，然后获取相关的测试链接和参数，设置的值如图16-30所示。
图16-30 proxy代理配置
步骤三：通过这次的简单配置后，使用抓包软件进行抓取提交的链接和参数，如图
16-31所示。
图16-31 修改proxy代理的数据包
步骤四：退出超级管理员，清除浏览器的Cookie信息，使用user账号登录操作。与超
级管理员相比，user用户在“应用”模块中只有简单的“日常应用”一项权限，并没有其他的
权限，如图16-32所示。
图16-32 user用户应用信息
步骤五：利用  user  用户的权限来进行配置以前没有权限配置的  proxy  代理的地址信
息，直接使用hackbar工具通过POST方式提交数据，如图16-33所示。
图16-33 user用户越权提交数据
通过抓取的数据包可以看出，使用的是 user 用户权限进行提交的，如图 16-34所示。
图16-34 user用户越权提交的数据包信息
步骤六：再次使用超级管理员chinanet账户登录，单击进入“proxy代理”的配置，此时
内容已经发生改变了，如图16-35所示。
图16-35 越权提交数据的结果
16.2.4 某Web防火墙通过修改用户对应菜单类别可提升权限
攻击者以低权限身份请求登录系统，系统根据category参数的值（system.audit）分配
权限。攻击者修改category值为system.admin，系统根据category值重新分配权限为超级管
理员，如图16-36所示。
图16-36 纵向越权流程图
该系统程序对用户权限的控制是限制菜单及功能模块的访问，可以通过修改用户对应
的菜单类别的方式来改变用户身份欺骗系统，以达到访问其他权限模块的目的。
步骤一：以 audit 用户身份登录系统，使用 Burp Suite 抓包 category 的值system.audit 修改为system.admin，如图16-37所示。
图16-37 修改category参数的值为system.admin
步骤二：category值修改以后，单击Forward，进入管理员管理界面，如图16-38所
示。
图16-38 audit提升为system.admin权限
步骤三：将useradmin账户权限设置为最大，如图16-39所示。
图16-39 将useradmin修改为最大权限
步骤四：使用useradmin账户登录系统，useradmin拥有管理员权限，如图16-40所示。
图16-79 登录useradmin账户
16.3 防范越权访问漏洞的相关手段
实现应用程序的完善的访问控制不是件容易的事，越权漏洞防不胜防，本章从越权漏
洞相关案例给出以下几点建议：
（1）对于开发者而言，一定要有安全意识，时刻保持警惕。
（2）永远不要相信来自客户端（用户）的输入，对于可控参数进行严格的检查与过
滤。
（3）执行关键操作前必须验证用户身份，多阶段功能的每一步都要验证用户身份。
（4）对于直接对象引用，加密资源ID，以防止攻击者对ID进行枚举。
（5）在前端实现的验证并不可靠，前端可以验证用户的输入是否合规，要在服务端
对请求的数据和当前用户身份做校验。检查提交CRUD请求的操作者（Session）与目标对
象的权限所有者（查数据库）是否一致，如果不一致则阻断。
（6）在调用功能之前，验证当前用户身份是否有权限调用相关功能（推荐使用过滤
器，进行统一权限验证）。
（7）把属主、权限、对象、操作的场景抽象成一个统一的框架，在框架内统一实现
权限的管理和检查。
第17章 OAuth 2.0安全案例总结
17.1 OAuth2.0认证原理
Oauth  允许用户让第三方应用访问该用户在某一网站上存储的私密资源（如照片、视
频、联系人列表），而无须将用户名和密码提供给第三方应用的协议。
OAuth  2.0  认证流程如图  17-1  所示。原理很简单，用户访问  App，App  访问
Authorization  Server请求权限，Authorization  Server得到用户同意后，返回Token，App通
过这个Token向Authorization  Server索要数据，App只能从Authorization  Server获取服务器
数据，而无法直接访问Resource Server。下面用Facebook的Oath2.0登录过程作为举例。
步骤一：App向Oauth Server请求的URL里面带着该App的id、key、请求的类型、返回
一串的access_token和事件类型code。
https://facebook.com/dialog/oauth? 
response_type=code&client_id=YOUR_CLIENT_ID&redirect_uri=REDIRECT_URI&scope=email 步骤二：回调，跳转到权限确认页面等待用户确认授权。
https://facebook.com/dialog/oauth? 
response_type=code&client_id=28653682475872&redirect_uri=example.com&scope=email 该页面通过redirect_uri，回调到指定的callback页面。
图17-1 OAuth 2.0认证流程图
步骤三：利用返回的access_token，将App的id、key以及code代码发包到POST
https：//graph.facebook.com/oauth/access_token。
这一步是为了获取Token。
步骤四：Oauth Server返回Token，这时，就可以通过Token获取用户授权的资源了。
资料参考：
· http://oauth.net/2/
· https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2
17.2 OAuth2.0漏洞总结
17.2.1 某社交网站CSRF漏洞导致绑定劫持
某社交网站-百度 OAuth 2.0 认证流程中，没有提供有效的方式来抵抗针对redirect_uir 的CSRF攻击。如果攻击成功，攻击者不需要知道受害用户的账号和密码就可登录受害账
号。
某社交网站-百度 
OAuth 
2.0 
认证流程中链接为
https：//openapi.baidu.com/oauth/2.0/authorize？
response_type=code&client_id=foRRWjPq8In3SIhmKQw1Pep3&redirect_uri=http：//www.xxxx.com/bind/baidu/baiduLoginCallBack。
某社交网站并没有加入state参数来抵抗针对redirect_uir的CSRF攻击。如果攻击者重新
发起一个某社交网站百度OAuth 
2.0认证请求，并截获OAuth 
2.0认证请求的返回：
http：//www.xxxx.com/bind/baidu/baiduLoginCallBack？code=f056147c661d0b9
fbb6cd305567cb994。
攻击者诱骗已经登录的某社交网站用户单击立即绑定（比如通过邮件或者 
QQ等方
式），如图17-2所示，网站会自动将用户的账号同攻击者的账号绑定到一起，如图17-3所
示。
图17-2 某社交网站-百度账号绑定
图17-3 百度账号绑定成功
修复建议：OAuth  2.0提供了state参数用于CSRF认证服务器将接收到的state参数按原
样返回给redirect_uri，客户端收到该参数并验证与之前生成的值是否一致。除此方法外也
可使用传统的CSRF防御方案。
17.2.2 某社区劫持授权
以某社区账号登录“微博通”应用的授权页面为例，如图17-4所示。
图17-4 授权页面
http://open.xxxx.cn/oauth/authorize.php?oauth_token=e65d28ab0862cbd517c67c3cc 6f2247e052ad9c22&oauth_callback=http%3A%2F%2Fm.wbto.cn%3A80%2F%3Fc%3D
m_setting%26m%3Dauth%26b%3Dcallback%26pid%3D24%26aid%3D%26wbto%3D16