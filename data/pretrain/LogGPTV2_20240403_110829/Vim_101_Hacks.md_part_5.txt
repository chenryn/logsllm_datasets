### Hack 37: Abbreviation and Unabbreviation

#### Temporary Abbreviations
To create a temporary abbreviation in Vim, use the `:abbr` command in command mode. For example, to abbreviate "US" to "United States," you can execute:
```
:abbr US United States
```

#### Permanent Abbreviations
To make an abbreviation permanent, add it to your `.vimrc` file. For example:
```
:abbr US United States
```

#### Removing Temporary Abbreviations
To remove a temporary abbreviation, use the `:noabbr` command:
```
:noabbr US
```

#### Removing Permanent Abbreviations
To remove a permanent abbreviation, simply delete the corresponding line from your `.vimrc` file.

#### Special Cases
You can also create abbreviations for frequently used text like URLs or email addresses. For example:
```
:iabbrev tgs http://www.thegeekstuff.com
:iabbrev myemail PI:EMAIL
```
After setting these, typing `myemail` will automatically expand to your email address.

#### Inserting Special Characters
You can include special characters in your abbreviations. For example:
```
:iabbrev TRR Thanks,\rRegards,\rRamesh Natarajan
```
Here, `\r` represents a carriage return, so typing `TRR` will expand to:
```
Thanks,
Regards,
Ramesh Natarajan
```

---

### Hack 38: Automatic Spelling Correction

The `autocorrect.vim` plugin corrects common spelling mistakes as you type. The plugin author, Anthony Panozzo, describes it as:
```
Correct common typos and misspellings as you type.
```

#### Examples of Corrections
Some examples of corrections provided by the `autocorrect.vim` plugin include:
- `Britian` → `Britain`
- `Brittish` → `British`
- `Acceptible` → `Acceptable`
- `accesories` → `accessories`

#### Installation and Configuration
1. Download the plugin:
   ```sh
   $ cd ~
   $ wget -O autocorrect.tar http://www.vim.org/scripts/download_script.php?src_id=10423
   $ tar xvf autocorrect.tar
   ```

2. Load the plugin in Vim:
   ```vim
   :source /path/to/the/autocorrect.vim
   ```
   For permanent usage, add the following line to your `.vimrc`:
   ```vim
   :source ~/autocorrect.vim
   ```

3. Test the plugin:
   ```sh
   $ vi test-typo.txt
   thsi is acceptible
   ```
   The above line will automatically change to:
   ```
   this is acceptable
   ```

#### Disabling Corrections
To temporarily disable a correction, use the `:una` command:
```vim
:una US
```
For a permanent fix, remove the word from either your `.vimrc` or the `autocorrect.vim` file.

---

### Hack 39: Record and Play Using Macros

This hack explains how to record and play back macros in Vim.

#### Steps to Record and Play a Macro
1. **Start Recording**: Press `q` followed by a lowercase character (e.g., `a`) to name the macro.
2. **Perform Actions**: Perform the desired editing actions in Vim.
3. **Stop Recording**: Press `q` again.
4. **Play the Macro**: Press `@` followed by the macro name (e.g., `@a`).
5. **Repeat the Macro**: To repeat the macro multiple times, use `NN@a`, where `NN` is the number of repetitions.

#### Example: Change Password SQL Script
1. Open the `change-password.sql` file:
   ```sh
   $ vim change-password.sql
   ```
   Content:
   ```
   Annette
   Warren
   Anthony
   Preston
   Kelly
   Taylor
   Stiller
   Dennis
   Schwartz
   ```

2. Start recording and store in register `a`:
   ```vim
   q a
   ```

3. Go to insert mode and type `ALTER USER`:
   ```vim
   I ALTER USER 
   ```

4. Copy the next word (name):
   ```vim
   <ESC> w yw
   ```

5. Go to the end of the line and type `IDENTIFIED BY '`:
   ```vim
   A IDENTIFIED BY '
   ```

6. Paste the copied name:
   ```vim
   p
   ```

7. Complete the quote at the end:
   ```vim
   A ';
   ```

8. Jump to the next line and stop recording:
   ```vim
   j q
   ```

9. Repeat the macro 8 times:
   ```vim
   8 @ a
   ```

The final content will look like:
```
ALTER USER Annette IDENTIFIED BY 'Annette';
ALTER USER Warren IDENTIFIED BY 'Warren';
...
```

---

### Hack 40: Sort File Content

Starting from Vim version 7, a built-in sort command is available.

#### Sorting the Entire File
```vim
:sort
```

#### Sorting a Selection
1. Enter visual mode: `v`
2. Select the lines to be sorted.
3. Press `:` to enter command mode.
4. Add `!sort` to sort the selection:
   ```vim
   :'<,'>!sort
   ```

#### Sort Command Options
- `:sort`: Sort in ascending order.
- `:sort!`: Sort in descending order.
- `:sort i`: Ignore case while sorting.
- `:sort u`: Remove duplicate lines.
- `:sort! ui`: Combine options for descending, unique, and case-insensitive sorting.

---

### Hack 41: Recover Deleted Text

If you accidentally delete text, you can recover up to 9 deleted text fragments.

#### Recovery Commands
- `“1p`: Recover the last deletion.
- `“2p`: Recover the second-to-last deletion.
- `“3p`: Recover the third-to-last deletion.

#### Browsing Delete Buffers
To browse through all 9 delete buffers, use:
```vim
“1pu.u.u.u.u.
```

#### Viewing Registers
To see what's in registers 0 through 9, use:
```vim
:reg
```

---

### Hack 42: Add Automatic Headers to Files Using Autocmd

This hack shows how to use Vim's `autocmd` feature to automatically add headers to files.

#### Vim Autocmd Syntax
```vim
autocmd {event} {pattern} {cmd}
```

#### Common Events
- `BufNewFile`: Starting to edit a new file.
- `FileReadPre`: Before reading a file with `:read`.
- `BufWritePre`: Starting to write the buffer to a file.
- `BufDelete`: Before deleting a buffer.
- `SwapExists`: Detected an existing swap file.

#### Example: Adding a Header to C Files
1. **Create a Template File**:
   ```sh
   $ cat c_header.txt
   :insert
   /* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
   * File Name :
   * Purpose :
   * Creation Date :
   * Last Modified :
   * Created By :
   _._._._._._._._._._._._._._._._._._._._._.*/
   .
   ```

2. **Add Autocmd Commands to `.vimrc`**:
   ```vim
   autocmd bufnewfile *.c so /home/jsmith/c_header.txt
   autocmd bufnewfile *.c exe "1," . 10 . "g/File Name :.*/s//File Name : " .expand("%")
   autocmd bufnewfile *.c exe "1," . 10 . "g/Creation Date :.*/s//Creation Date : " .strftime("%d-%m-%Y")
   autocmd Bufwritepre,filewritepre *.c execute "normal ma"
   autocmd Bufwritepre,filewritepre *.c exe "1," . 10 . "g/Last Modified :.*/s/Last Modified :.*/Last Modified : " .strftime("%c")
   autocmd bufwritepost,filewritepost *.c execute "normal `a"
   ```

3. **Create a New C File**:
   ```sh
   $ vi myfile.c
   ```
   The header will be automatically added and populated with the file name and creation date.

When you save the file, the `Last Modified` field will be updated.

#### Explanation of Autocmd Commands
- Line 1: Loads the template file.
- Line 2: Updates the `File Name` field.
- Line 3: Updates the `Creation Date` field.
- Lines 4 and 6: Mark and restore the cursor position.
- Line 5: Updates the `Last Modified` field.

#### Final Notes
- Verify if `autocmd` is enabled by checking `:version` in Vim. If enabled, it will display `+autocmd`.
- For help on `autocmd`, use `:help au`.

---

### Chapter 8: Vim as a Programmer's Editor

#### Hack 43: Make Vim Highlight Your Code Smartly

Use the following commands to control syntax highlighting:
- `:syn on`: Turn on syntax highlighting.
- `:syn off`: Turn off syntax highlighting.

#### Hack 44: Smart Indentation

To indent a block in visual mode:
1. Enter visual block mode: `CTRL-V`.
2. Select the block.
3. Use `>` to indent the selected block.