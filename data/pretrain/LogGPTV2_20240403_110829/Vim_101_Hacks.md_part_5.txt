Hack 37. Abbreviation and Unabbreviation
In the following example, whenever you type US it will expand to “United
States” when you’ve defined the following abbreviation.
To abbreviate a word temporarily, execute the abbr command in command
mode as shown below.
:abbr US United States
To abbreviate a word permanently, you can place it in the .vimrc as shown
above.
To remove an abbreviation definition temporarily, execute the noabbr
command in command mode.
:noabbr US
66
Buyer: xiujuan lu (PI:EMAIL)
Transaction ID: 85W16630AD8515549
Vim 101 Hacks www.thegeekstuff.com
To remove an abbreviation definition permanently, remove it from .vimrc
If you are typing your website URL or email address frequently, you can
create an abbreviation as shown below.
:iabbrev tgs http://www.thegeekstuff.com
:iabbrev myemail PI:EMAIL
After the above, whenever you type myemail, it will expand your email
address automatically.
You can also insert special keys in the iabbrev value. For example, you can
add carriage return key  as shown below.
:iabbrev TRR Thanks,Regards,Ramesh Natarajan
In this example, whenever I type TRR, it will expand to the following.
Thanks,
Regards,
Ramesh Natarajan
Hack 38. Automatic Spelling Correction
The autocorrect.vim plugin has a collection of all typical spelling mistakes
and their correct spelling.
67
Buyer: xiujuan lu (PI:EMAIL)
Transaction ID: 85W16630AD8515549
Vim 101 Hacks www.thegeekstuff.com
Author of the Plugin, Anthony Panozzo describes the plugin as:
“Correct common typos and misspellings as you type”
The following are few examples from the autocorrect.vim plugin.
ia Britian Britain
ia Brittish British
.
.
ia Acceptible Acceptable
ia accesories accessories
Install and Configure autocorrect.vim plugin
Download the plugin from vim.org website.
$ cd ~
$ wget -O autocorrect.tar
http://www.vim.org/scripts/download_script.php?src_id=1
0423
$ tar xvf autocorrect.tar
Install autocorrect.vim plugin. From Vim, you can execute “:source
/path/to/the/autocorrect.vim” whenever needed (or) For permanent usage,
add the following line to ~/.vimrc
$ vi ~/.vimrc
:source ~/autocorrect.vim
68
Buyer: xiujuan lu (PI:EMAIL)
Transaction ID: 85W16630AD8515549
Vim 101 Hacks www.thegeekstuff.com
After doing this, when you make a typo of a word that is in the
autocorrect.vim list, it will be corrected automatically.
$ vi test-typo.txt
thsi is acceptible
[Note: Above line will automatically change to "this is
acceptable"]
When you want the expansion or spelling mistake correction to be stopped for
a particular word, you can do the following inside vim. This is a temporary
unabbreviation. If you want this to be permanent, remove the word either
from ~/.vimrc or ~/autocorrect.vim.
$ vim test-typo.txt
:una US
Hack 39. Record and Play Using Macros
This hack explains how to perform record and play back macros inside Vim
using an example.
High level steps to record and play back a macro inside Vim.
• Step 1: Start recording by pressing q, followed by a lower case
character to name the macro
69
Buyer: xiujuan lu (PI:EMAIL)
Transaction ID: 85W16630AD8515549
Vim 101 Hacks www.thegeekstuff.com
• Step 2: Perform any typical editing actions inside Vim editor, which
will be recorded
• Step 3: Stop recording by pressing q
• Step 4: Play the recorded macro by pressing @ followed by the macro
name
• Step 5: To repeat macros multiple times, press : NN @ macro name.
NN is a number
This example explains how you can execute the same command, with
different inputs. i.e Framing the same command, with different arguments.
1. Open the change-password.sql that has only the names.
$ vim change-password.sql
Annette
Warren
Anthony
Preston
Kelly
Taylor
Stiller
Dennis
Schwartz
2. Start the Recording and store it in register a
q a
• q indicates to start the recording
• a indicates to store the recordings in register a
70
Buyer: xiujuan lu (PI:EMAIL)
Transaction ID: 85W16630AD8515549
Vim 101 Hacks www.thegeekstuff.com
• When you do q a, it will display the message “recording” at the
bottom of the screen.
3. Go to Insert Mode and Type ALTER USER
I “ALTER USER ”
Place the cursor anywhere in the first line, and then press I (upper case i),
which will take you to the first character of the line. Type ALTER 
USER 
4. Copy the Next Word (i.e the name)
 w yw
• Press ESC, and then press w to go to the next word ( name ).
• yw, copies the current word ( name ).
5.Go to the end and type IDENTIFIED BY ‘
 A ” IDENTIFIED BY ‘”
• Press ESC, and A to move the cursor to the end of the line, and then
type space.
• Type IDENTIFIED BY ‘
71
Buyer: xiujuan lu (PI:EMAIL)
Transaction ID: 85W16630AD8515549
Vim 101 Hacks www.thegeekstuff.com
6. Paste the copied Name
 p
Press ESC, and then type p to paste the name that was copied in the step #4.
7. Complete the quote at the end.
 A ‘;
Press ESC, and A to go to the end of the line, and ‘;
8. Jump to the next line and stop the macro recording.
 j q
• j to move to the next line.
• q to stop the recording
Note: The recording message shown at the bottom of the screen will now
disappear. At this stage, the file change-password.sql will look like the
following.
72
Buyer: xiujuan lu (PI:EMAIL)
Transaction ID: 85W16630AD8515549
Vim 101 Hacks www.thegeekstuff.com
Fig: Vim Macro completed the recording
9. Repeat the Macro with the arguments in the corresponding line
8 @ a
• Now repeat this job 8 times by typing 8@a
• @a repeats the macro “a” one time.
• 8@a repeats the macros “a” 8 times completing the rest of the line
automatically as shown below
Fig: Vim Macro Play completed
73
Buyer: xiujuan lu (PI:EMAIL)
Transaction ID: 85W16630AD8515549
Vim 101 Hacks www.thegeekstuff.com
Hack 40. Sort File Content
Starting from Vim version 7, a built in Vim sort command is available.
Sort file content from Vim as shown below.
:sort
Sort part of the file content as shown below.
• Go to visual mode by pressing v
• Use arrow keys and select the lines that need to be sorted.
• Press :, which will show :'' at the bottom of the Vim.
• Add !sort at the end to sort the selection
:'!sort
The following options are available for the :sort Vim command
:sort option Description
:sort Sort in ascending order
:sort! Sort in descending order
:sort i Ignore case while sorting
:sort u Remove duplicate lines.
U stands for unique.
74
Buyer: xiujuan lu (PI:EMAIL)
Transaction ID: 85W16630AD8515549
Vim 101 Hacks www.thegeekstuff.com
:sort! ui You can also combine all the sort command
options.
Hack 41. Recover Deleted Text
If you’ve deleted text by mistake you can recover it. You can recover up to 9
deleted text fragments.
Recover Delete Description
“1p Recover the last delete
“2p Recover the second to last delete
“3p Recover the third to last delete
If you don’t know exactly when you’ve deleted something, you can browse
through all the 9 delete buffers as shown below. When you see the text that
you wish to recover, just stop at that stage.
Browse all delete buffers, until you find correct one.
“1pu.u.u.u.u.
You can also see what’s in registers 0 through 9 (the delete registers) using
:reg - this tells you exactly what is in each register.
75
Buyer: xiujuan lu (PI:EMAIL)
Transaction ID: 85W16630AD8515549
Vim 101 Hacks www.thegeekstuff.com
Hack 42. Add Automatic Headers to Files Using
Let us review how to use the powerful autocmd feature of Vim to create
a header section inside a file (for example, header in a C programming code)
with file name, creation date, last modified date/time automatically
populated when you open a file in vi.
Vim autocmd syntax:
autocmd {event} {pattern} {cmd}
Events: There are more than 40 autocmd events. The following are few
sample autocmd events.
Event Description
BufNewFile Starting to edit a file that doesn't exist
FileReadPre Before reading a file with a ":read" command
BufWritePre Starting to write the whole buffer to a file
FileWritePre Starting to write part of a buffer to a file
BufDelete Before deleting a buffer from the buffer list
BufWipeout Before completely deleting a buffer
BufNew Just after creating a new buffer
BufEnter After entering a buffer
BufLeave Before leaving to another buffer
76
Buyer: xiujuan lu (PI:EMAIL)
Transaction ID: 85W16630AD8515549
Vim 101 Hacks www.thegeekstuff.com
SwapExists Detected an existing swap file
Many developers want some default header for their programs. For example,
when opening a “.c” file, you typically need a file header with a number of
items. The following template is loaded automatically whenever I open a new
“.c” file. You can achieve this in three steps as mentioned below.
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
* File Name : 1.c
* Purpose :
* Creation Date : 22-12-2008
* Last Modified : Mon 22 Dec 2008 10:36:49 PM PST
* Created By :
_._._._._._._._._._._._._._._._._._._._._.*/
Step 1: Create a template file
Save the above template in a text file with “:insert” in the first line, followed
by the template and a “.”(dot) in the last line as shown below.
$ cat c_header.txt
:insert
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
* File Name :
* Purpose :
* Creation Date :
77
Buyer: xiujuan lu (PI:EMAIL)
Transaction ID: 85W16630AD8515549
Vim 101 Hacks www.thegeekstuff.com
* Last Modified :
* Created By :
_._._._._._._._._._._._._._._._._._._._._.*/
.
Step 2: Add autocmd commands to ~/.vimrc
Add the following lines in the ~/.vimrc file.
$ cat ~/.vimrc
autocmd bufnewfile *.c so /home/jsmith/c_header.txt
autocmd bufnewfile *.c exe "1," . 10 . "g/File Name
:.*/s//File Name : " .expand("%")
autocmd bufnewfile *.c exe "1," . 10 . "g/Creation Date
:.*/s//Creation Date : " .strftime("%d-%m-%Y")
autocmd Bufwritepre,filewritepre *.c execute "normal
ma"
autocmd Bufwritepre,filewritepre *.c exe "1," . 10 .
"g/Last Modified :.*/s/Last Modified :.*/Last Modified
: " .strftime("%c")
autocmd bufwritepost,filewritepost *.c execute "normal
`a"
Step 3: Create a new *.c file with automatic header
Now, when you create a new *.c file using vim, this will automatically add the
header defined in the Step1 and populate the File Name and Creation Date
automatically as shown below.
$ vi myfile.c
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
* File Name : myfile.c
78
Buyer: xiujuan lu (PI:EMAIL)
Transaction ID: 85W16630AD8515549
Vim 101 Hacks www.thegeekstuff.com
* Purpose :
* Creation Date : 20-12-2008
* Last Modified :
* Created By :
_._._._._._._._._._._._._._._._._._._._._.*/
When you save the myfile.c file, it will automatically update the Last
Modified field accordingly as shown below.
$ vi myfile.c
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
* File Name : myfile.c
* Purpose :
* Creation Date : 20-12-2008
* Last Modified : Sat 20 Dec 2008 09:37:30 AM PST
* Created By :
_._._._._._._._._._._._._._._._._._._._._.*/
Explanation of the autocmd commands inside ~/.vimrc
$ cat -n ~/.vimrc
1 autocmd bufnewfile *.c so
/home/jsmith/c_header.txt
2 autocmd bufnewfile *.c exe "1," . 10 . "g/File
Name :.*/s//File Name : " .expand("%")
3 autocmd bufnewfile *.c exe "1," . 10 .
79
Buyer: xiujuan lu (PI:EMAIL)
Transaction ID: 85W16630AD8515549
Vim 101 Hacks www.thegeekstuff.com
"g/Creation Date :.*/s//Creation Date : "
.strftime("%d-%m-%Y")
4 autocmd Bufwritepre,filewritepre *.c execute
"normal ma"
5 autocmd Bufwritepre,filewritepre *.c exe "1," .
10 . "g/Last Modified :.*/s/Last Modified :.*/Last
Modified : " .strftime("%c")
6 autocmd bufwritepost,filewritepost *.c execute
"normal `a"
• Line 1 defines the template file. This indicates that for *.c file,
/home/jsmith/c_header.txt template file should be used.
• Line 2 will search for the pattern “File Name :” from the 1st line to
10th line. If found, it will write the current filename in that line.
• Line 3 will update the Creation Date field.
• Line 5 will update the Last Modified field with the current date and
time when you save the file.
• Line 4 & 6: While saving the file, the cursor will move to the “Last
modified :” (because of last write operation). If you want the cursor
back to the previous position then, you need to add Line 4 and 6 to
the .vimrc file.
• Line 4 will mark the current cursor position before updating.
• Line 6 will restore the cursor position back to its previous position.
Final Note:
• Verify whether autocmd is enabled in Vim – Execute :version from
Vim. If autocommand feature is enabled, it will display +autocmd.
• Autocommand help – Execute :help au from Vim, to get quick help on
Vim autocmd features.
80
Buyer: xiujuan lu (PI:EMAIL)
Transaction ID: 85W16630AD8515549
Vim 101 Hacks www.thegeekstuff.com
Chapter 8: Vim as a Programmers Editor
The following hacks will be of use to you for all programming languages and
shell scripts.
Hack 43. Make Vim Highlight Your Code Smartly
Command Description
:syn on Turn on the syntax highlighting
:syn off Turn off the syntax highlighting
The following screenshot shows the difference between on and off state.
Syntax Highlighting On Syntax Highlighting Off
81
Buyer: xiujuan lu (PI:EMAIL)
Transaction ID: 85W16630AD8515549
Vim 101 Hacks www.thegeekstuff.com
Hack 44. Smart Indentation
To indent a block in visual mode, do the following:
• Select the block using CTRL-V mode.