译文声明
    本文是翻译文章，文章原作者 S3cur3Th1sSh1t
    原文地址：https://s3cur3th1ssh1t.github.io/Building-a-custom-Mimikatz-binary/
    译文仅供参考，具体内容表达以及含义原文为准
这篇文章将介绍如何通过修改源码来构建一个定制的 Mimikatz，以达到 Bypass AV/EDR 的目的。
### 0x00 介绍
如同上一篇文章文末说承诺的一样，本文主要讲述如何构建一个定制的 Mimikatz 二进制文件。在几个月前，我第一次进行尝试，将二进制文件集成到
[WinPwn](https://github.com/S3cur3Th1sSh1t/WinPwn) 中，使用反射的方式加载。那时候有人问我，这个混淆的
Mimikatz 是怎么来的，因此我现在分享这个混淆定制的过程。
只要有心，在搜索引擎中确实能够发现很多关于如何混淆 Mimikatz 的文章。但大多数文章都集中在绕过 AMSI 的 `Invoke-Mimikatz`
及使用其他混淆工具，但几乎没有发现重新定制一个
Mimikatz。但是，在几个月前的一个[发现](https://gist.github.com/imaibou/92feba3455bf173f123fbe50bbe80781)
对我有了很大的启发，为此构建了一个 Mimikatz 的定制版。
    # This script downloads and slightly "obfuscates" the mimikatz project.
    # Most AV solutions block mimikatz based on certain keywords in the binary like "mimikatz", "gentilkiwi", "PI:EMAIL" ..., 
    # so removing them from the project before compiling gets us past most of the AV solutions.
    # We can even go further and change some functionality keywords like "sekurlsa", "logonpasswords", "lsadump", "minidump", "pth" ....,
    # but this needs adapting to the doc, so it has not been done, try it if your victim's AV still detects mimikatz after this program.
    git clone https://github.com/gentilkiwi/mimikatz.git windows
    mv windows/mimikatz windows/windows
    find windows/ -type f -print0 | xargs -0 sed -i 's/mimikatz/windows/g'
    find windows/ -type f -print0 | xargs -0 sed -i 's/MIMIKATZ/WINDOWS/g'
    find windows/ -type f -print0 | xargs -0 sed -i 's/Mimikatz/Windows/g'
    find windows/ -type f -print0 | xargs -0 sed -i 's/DELPY/James/g'
    find windows/ -type f -print0 | xargs -0 sed -i 's/Benjamin/Troy/g'
    find windows/ -type f -print0 | xargs -0 sed -i 's/PI:EMAIL/PI:EMAIL/g'
    find windows/ -type f -print0 | xargs -0 sed -i 's/creativecommons/python/g'
    find windows/ -type f -print0 | xargs -0 sed -i 's/gentilkiwi/MSOffice/g'
    find windows/ -type f -print0 | xargs -0 sed -i 's/KIWI/ONEDRIVE/g'
    find windows/ -type f -print0 | xargs -0 sed -i 's/Kiwi/Onedrive/g'
    find windows/ -type f -print0 | xargs -0 sed -i 's/kiwi/onedrive/g'
    find windows/ -type f -name '*mimikatz*' | while read FILE ; do
        newfile="$(echo ${FILE} |sed -e 's/mimikatz/windows/g')";
        mv "${FILE}" "${newfile}";
    done
    find windows/ -type f -name '*kiwi*' | while read FILE ; do
        newfile="$(echo ${FILE} |sed -e 's/kiwi/onedrive/g')";
        mv "${FILE}" "${newfile}";
    done
`We can even go further` \- 挑战由此诞生。
### 0x01 Mimikatz 含有病毒
如果你曾经尝试过在开启 AV 的情况下去下载 Mimikatz
的二进制，你会发现，这压根是不可能，因为它的每一个版本都会被标记。这完全可以理解，因为如今的大环境中，很多攻击者都会在渗透测试过程中使用 Mimikatz
及其他开源项目。但是可以肯定的是， Mimikatz 是最常用的工具，因为它可以从 lsass 进程或 SAM
数据库中提取凭证信息，从而进行哈希传递、DPAPI 解码等等操作。在
[ADSecurity.org](https://adsecurity.org/?page_id=1821) 和 [Mimikatz
Wiki](https://github.com/gentilkiwi/mimikatz/wiki) 上可以找到关于 Mimikatz 完整的功能概述。
很多人显然不知道这些开源项目为什么会被标记，以及如何被标记。
当然，有些能力的攻击者，一般都不会使用 Github 上的发布版本，而是下载源代码，重新编译。并且通常情况下，他们只使用/编译了 Mimikatz
的部分功能代码。在这种情况下，我们不会阉割 Mimikatz 的任何功能，而是通过修改源代码，从而降低检测率，甚至完全 绕过。因此编译一个定制的
Mimikatz 是完全有必要的。
### 0x02 基本特征
我们已经从上面总结出了一些常见的 Mimikatz 特征。首先，我们必须替换以下字符串：
  * mimikatz, MIMIKATZ and Mimikatz
  * DELPY, Benjamin, PI:EMAIL
  * creativecommons
  * gentilkiwi
  * KIWI, Kiwi and kiwi
把自己放在AV-Vendor的位置上。首先要标记的是二进制文件中包含的明显字符串。如果你打开Mimikatz的菜单，你会看到以下内容：
图片中所出现的所有字符，都可以作为 Mimikatz 运行的特征，因此我们首先第一步要做的就是将其替换：
  * “A La Vie, A L’Amour”
  * 
  * Vincent LE TOUX
  * PI:EMAIL
  * 
  * 
我们也可以直接对
[mimikatz.c](https://github.com/gentilkiwi/mimikatz/blob/master/mimikatz/mimikatz.c)
进行修改，主要是把 `banner` 进行删除或者换成其他字符信息。
正如前文提到的，我们可以进一步替换命名功能名称关键字。在写这篇文章的时候，Mimikatz 的主要模块有以下几个：
  * crypto, dpapi, kerberos, lsadump, ngc, sekurlsa
  * standard, privilege, process, service, ts, event
  * misc, token, vault, minesweeper, net, busylight
  * sysenv, sid, iis, rpc, sr98, rdm, acr
也许我需要一些 Mimikatz 基础教程，因为 Wiki 并没有说明如何列出所有模块。但仍然可以通过输入一个无效的模块名称来做到这一点，比如 `::` ：
这里我们有两个选择：
  * 要么在原来的基础上，对功能名称进行随机大小写化，比如 `crypto -> CryPto`；
  * 要么就全部更改，比如 `crypto -> cccccc`。
对于第一种，熟悉的命令不变，在使用时，可以有效的分辨出名称对应的功能。对于第二种，我们必须要记住新的函数名。
目前，我们将会使用熟悉的函数名，我这里并没有使用简短的函数名进行替换，因为这些字符串也可能存在于代码的其他字符串中，这可能会损坏当前的代码结构。为了给每一个新的版本建立一个自定义的二进制，我们用随机的名字替换与函数名无关的字符串。
还有一个重要的东西要更换，就是二进制的图标。因此在修改后的 gist 版本中，我们用一些随机下载的图标来替换现有的图标。
主菜单中的每个函数都有子函数。比如最常用的 `sekurlsa` 函数就有以下子函数：
  * msv, wdigest, kerberos, tspkg
  * livessp, cloudap, ssp, logonpasswords
  * process, minidump, bootkey, pth
  * krbtgt, dpapisystem, trust, backupkeys
  * tickets, ekeys, dpapi, credman
为确保已经对 Mimikatz 做出了修改，我们使用该 [bash
脚本](https://gist.github.com/S3cur3Th1sSh1t/08623de0c5cc67d36d4a235cec0f5333)
替换了子功能名称。然后编译代码，并将其上传到 `VirusTotal` 进行检测，检测结果如下：
25/67 次检测。 不错，但还不够好。
### 0x03 netapi32.dll
为了能够找到更多的特征，可以使用 `head -c byteLength mimikatz.exe > split.exe`
将文件分割成若干部分。如果生成的文件被删除，则说明被删除的文件至少包含一个特征。如果没有被删除，则说明文件未包含特征。也可以使用 Matt Hands 的
[DefenderCheck](https://github.com/matterpreter/DefenderCheck)
项目完成这个工作（该工具的缺陷及修改建议在第二篇文章中已经阐明）。让我们检查一下生成的二进制文件:
从图中可以看出，Defender 标记了`netapi32.dll` 库的三个函数：