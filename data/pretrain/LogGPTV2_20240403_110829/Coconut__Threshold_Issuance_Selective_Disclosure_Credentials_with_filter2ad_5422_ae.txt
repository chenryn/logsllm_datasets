### Overview and Enhancements of the Coconut Credential Scheme

#### Introduction
Pointcheval et al. [43] introduced a scheme for single-attribute credentials. However, this scheme has limitations that prevent it from meeting our design goals, as outlined in Section II. To address these limitations, we incorporate principles from Boneh et al. [10]. Our approach is structured into three main steps:

1. **Step 1: Addressing Limitations**
   - We identify and discuss the limitations of Pointcheval et al.'s [43] scheme.
   - We demonstrate how to integrate principles from Boneh et al. [10] to overcome these limitations.

2. **Step 2: Introducing the Coconut Threshold Credentials Scheme**
   - In Section III-D, we introduce the Coconut threshold credentials scheme.
   - This scheme combines the properties of Pointcheval and Sanders [43] and Boneh et al. [10], enabling us to achieve all our design goals.

3. **Step 3: Extending the Scheme for Multiple Attributes**
   - In Section III-E, we extend our schemes to support credentials embedding \( q \) distinct attributes (\( m_1, \ldots, m_q \)) simultaneously.

#### Notations and Assumptions
- Figure 1 provides a high-level overview of the Coconut architecture.
- We describe the underlying signature schemes of Coconut, including key generation, distributed issuance, aggregation, and verification of signatures (Sections II and III).
- The scheme is an extension and hybrid of the Waters signature scheme [52], the BGLS signature [9], and the signature scheme of Pointcheval and Sanders [43].
- This is the first general-purpose, fully distributed threshold issuance, re-randomizable, multi-show credential scheme of which we are aware.

#### Implementation and Applications
- **Smart Contract Library:**
  - We use Coconut to implement a generic smart contract library for Chainspace [1] and Ethereum [53].
  - The library supports public and private attribute issuance, aggregation, randomization, and selective disclosure (Section IV).
  - We evaluate the performance and cost of these implementations within the respective platforms (Section VI).

- **Applications:**
  - We design three applications using the Coconut contract library:
    - A coin tumbler providing payment anonymity.
    - A privacy-preserving electronic petitions system.
    - A proxy distribution system for a censorship resistance system (Section V).
  - We implement and evaluate the first two applications on the Chainspace platform and provide a security and performance evaluation (Section VI).

This structured approach ensures that the Coconut credential scheme is robust, versatile, and capable of meeting a wide range of design and application requirements.