Pointcheval et al. [43] for single-attribute credentials. We
present
its limitations preventing it from meeting our
design goals presented in Section II, and we show how to
incorporate principles from Boneh et al. [10] to overcome
them.
• Step 2: We introduce (Section III-D) the Coconut thresh-
old credentials scheme, which has all the properties of
Pointcheval and Sanders [43] and Boneh et al. [10], and
allows us to achieve all our design goals.
• Step 3: Finally, we extend (Section III-E) our schemes
to support credentials embedding q distinct attributes
(m1, . . . , mq) simultaneously.
A. Notations and Assumptions
Fig. 1: A high-level overview of Coconut architecture.
• We describe the signature schemes underlying Coconut,
including how key generation, distributed issuance, aggre-
gation and veriﬁcation of signatures operate (Sections II
and III). The scheme is an extension and hybrid of the
Waters signature scheme [52], the BGLS signature [9],
and the signature scheme of Pointcheval and Sanders [43].
This is the ﬁrst general purpose, fully distributed threshold
issuance, re-randomizable, multi-show credential scheme
of which we are aware.
• We use Coconut to implement a generic smart contract
library for Chainspace [1] and one for Ethereum [53],
performing public and private attribute issuance, aggrega-
tion, randomization and selective disclosure (Section IV).
We evaluate their performance and cost within those
platforms (Section VI).
• We design three applications using the Coconut contract
library: a coin tumbler providing payment anonymity;
a privacy preserving electronic petitions; and a proxy
distribution system for a censorship resistance system
(Section V). We implement and evaluate the ﬁrst two
applications on the Chainspace platform, and provide a
security and performance evaluation (Section VI).