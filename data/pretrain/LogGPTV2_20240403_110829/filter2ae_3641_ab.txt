pod 内提权和传统 Linux 提权差不多，就是将 pod 内普通用户的 shell 提升为 root 权限的 shell。一般来讲，即使拿到了 pod
的 shell 也只能拥有普通用户的权限，此时能做的事情依旧十分有限，所以需要利用提权漏洞拿到 root 权限。提权的方式有很多，比如内核漏洞提权、sudo
提权、suid 提权、cronjob 提权等。
值得一提的是，有些内核漏洞也可以用于容器逃逸，比如著名的 DirtyCow（CVE-2016-5195）、DirtyPipe（CVE-2022-0847）
等，这在下文的“容器逃逸”部分还会提到。
（二）K8S 提权
K8S 提权的方式和场景有很多，比如 RBAC 提权[2]，还有一些用于 K8S 提权的 Nday，比如
CVE-2018-1002105、CVE-2020-8559 等。
### 3.3 拒绝服务
拒绝服务（Denial of Service，DOS）攻击可以从三个层面来看：业务、pod、集群。
对业务和 pod 的 DOS 攻击可以通过使用一些压力测试工具或方法进行，主要可从 CPU、内存、存储、网络等方面进行资源耗尽型攻击。在集群外部或 pod
内都有相应的工具或方法，读者可自行搜索。
在集群层面的 DOS 攻击主要可以利用 K8S 集群的软件漏洞，如 CVE-2019-11253、CVE-2019-9512、CVE-2019-9514
等。
​
## 4.攻击点7：容器逃逸
在云攻防中，拿到容器/ pod 的 shell 往往只是攻击成功的第一步，因为容器本质上就是 Linux 中的一个进程，但是因为受到了 Namespace
和 Cgroup
等机制的诸多限制导致容器内的进程权限是非常低的，容器逃逸就是为了突破这些限制，所以其实容器逃逸也可以认为是一种提权。导致容器逃逸的原因总结起来可分为如下三类：容器不安全配置，相关组件漏洞和内核漏洞。
（1）容器不安全配置
容器不安全配置分为两种情况，第一种情况是赋予了容器危险权限，第二种情况是容器挂载了危险目录。具体如表2所示：  
表2-容器不安全配置  
危险权限指的是 privileged 权限（特权容器）和危险的Capabilities 权限（如
cap_sys_admin，cap_sys_module，cap_sys_dac_search
等），这些都可以在容器启动时通过启动参数设置。如前文所述，容器本质上是一个受限的进程，除了通过 Namespace 和
Cgroup限制了命名空间和资源外，还有 Capabilities、Apparmor、Seccomp
等安全机制限制了容器内进程的权限，如果容器被赋予了以上的危险权限，相当于限制容器的安全机制被打破，这就给攻击者打开了方便之门。
容器挂载危险目录会导致容器文件系统隔离被打破，进而获得特权。比如如果挂载了 /var/run/docker.sock，那么在容器内就能与 docker
守护进程通信，攻击者就可以创建一个特权容器然后逃逸。
这里提到的是容器逃逸攻击手法中最常见的一些不安全配置，此外 CIS Docker Benchmark[3] 针对 docker
容器提出的安全配置基准多达上百条，如此多的安全配置要求也导致了相比于漏洞防护，安全配置的问题往往更容易被忽略。而对攻击者而言，容器的不安全配置往往比下文将要提到的相关程序漏洞和内核漏洞更容易检测和利用。
（2）相关组件漏洞
容器集群环境中包含了非常多的组件程序，它们相互协作，共同构成了庞大的容器服务生态，这些组件包括但不仅限于
runc、containerd、docker、kubelet
等。任何程序都会有漏洞，容器相关的组件程序也不例外，但是这些漏洞和容器不安全配置相比，大多数利用起来都比较困难，例如 CVE-2019-5736
就需要宿主机和容器交互才会触发，而且该漏洞是 “一次性使用” 的并且容易暴露，因为它会破坏 runc。
表3 总结了一些相关组件的常见漏洞：  
表3-容器相关组件的常见漏洞
（3）内核漏洞
容器和虚拟机最大的不同就是容器和宿主机共享内核，如果宿主机的内核存在漏洞，那么该主机上的所有容器都会受到影响。然而并非所有的内核漏洞都可以用于容器逃逸，下面是一些目前已知的可以用于容器逃逸的内核漏洞：
  * CVE-2016-5195
  * CVE-2017-1000112
  * CVE-2017-7308
  * CVE-2020-14386
  * CVE-2021-22555
  * CVE-2022-0185
  * CVE-2022-0492
  * CVE-2022-0847
同样地，内核漏洞的 EXP 利用起来也有风险，如果盲目尝试甚至有可能会导致目标系统崩溃（如果是在内部渗透测试或对系统进行安全检查时尤其需要注意）。
# 总结
本篇总结和分享了在 K8S 集群中对 K8S 组件、节点对外服务、业务 pod 进行攻击时和进行容器逃逸时的方法和经验，即图1的攻击点
1~7。在下篇中我们将继续聊一聊图1中的攻击点 8~12，包括横向攻击，以及对 K8S 管理平台、镜像库和第三方组件的攻击。
# 参考链接
1.
2.
3.
  1. 
  2. 