array of strings. A string with a maximum length of 255 bytes is declared like so: 
string mystring; 
The server interface is defined by using the program keyword followed by the structure 
describing what routines have been exported. This structure can define multiple 
versions of the RPC program (using the version keyword), with each version 
exporting a unique set of procedures (although typically, they export the same ones). 
The prototype for an exported function is much like a C function prototype, with some 
differences; primarily, the function name is in uppercase letters and is followed by the 
procedure number assigned to that routine. Each routine that has been exported 
appears in the source code, but it's lowercase and has _svc appended to indicate it's 
a service routine. For example, you have the following declaration in the RPC 
definition file: 
int HELLO_WORLD_1(void) = 1; 
The server routine that implements it in the source is named 
hello_world_1_svc(). 
Here's an example of a server definition. The following code fragment is from the 
sm_inter.x file, which defines the interface for the well-known rpc.statd service: 
program SM_PROG { 
    version SM_VERS { 
        /* res_stat = stat_succ if status monitor agrees 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
636 
           to monitor */ 
        /* res_stat = stat_fail if status monitor 
           cannot monitor */ 
        /* if res_stat == stat_succ, state = state 
           number of site sm_name */ 
        struct sm_stat_res   SM_STAT(struct sm_name) = 1; 
        /* res_stat = stat_succ if status monitor agrees 
           to monitor */ 
        /* res_stat = stat_fail if status monitor 
           cannot monitor */ 
        /* stat consists of state number of local site */ 
        struct sm_stat_res             SM_MON(struct mon) = 2; 
        /* stat consists of state number of local site */ 
        struct sm_stat   SM_UNMON(struct mon_id) = 3; 
        /* stat consists of state number of local site */ 
        struct sm_stat   SM_UNMON_ALL(struct my_id) = 4; 
        void             SM_SIMU_CRASH(void) = 5; 
        void             SM_NOTIFY(struct stat_chge) = 6; 
    } = 1; 
} = 100024; 
The statd program has only one available version: version 1. It also exports six 
functions that clients can call remotely: sm_stat, sm_mon, sm_unmon, sm_unmon_all, 
sm_simu_crash, and sm_notify. To audit this application, an excellent starting point is 
looking for these functions in the source code because you know they're taking data 
from the client and processing it. You can also deduce what kind of data they're 
accepting from these prototypes; in the preceding example, they're specially defined 
structures, except sm_simu_crash, which doesn't take any arguments. To audit these 
functions, you can look up these structures to see what data you can supply. For 
example, if you want to audit the sm_stat function, you look for the definition of the 
sm_name structure, as shown: 
const    SM_MAXSTRLEN = 1024; 
struct sm_name { 
    string mon_name; 
}; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
637 
In this instance, you can supply a string that can be at most 1024 bytes. As you can 
see, RPC definition files allow you to quickly identify what code the server exposes to 
the client. 
RPC Decoding Routines 
The RPC definition file isn't required to create an RPC application. Developers might 
choose to hand-code the client and server stubs, which involves creating decoders for 
data manually by using the XDR routines exported for encoding and decoding. 
(Usually, the rpcgen tool uses XDR subroutines to encode structures and types 
defined in the RPC specification file.) XDR exports encoding and decoding routines for 
all its basic types: xdr_int(), xdr_string(), xdr_bool(), and so on. This lower-level 
manipulation introduces the opportunity for mistakes in the routines responsible for 
decoding data destined for certain routines. For example, the sm_name structure above 
has one element: a string with a maximum length of 1024. The XDR routine 
generated by rpcgen looks like this: 
bool_t 
xdr_sm_name(XDR *xdrs, sm_name *objp) 
{ 
    register int32_t *buf; 
    if(!xdr_string( xdrs, &objp->mon_name, SM_MAXSTRLEN)) 
        return FALSE; 
    return TRUE; 
} 
If developers create these types of routines, they might accidentally use the wrong 
constants for maximum string lengths, not deal with errors properly, and so on. 
Therefore, when a developer doesn't use the RPC definition file, there's an additional 
lower layer where things might go wrong. 
Note 
Whether developers use the RPC definition file or not, there's a chance some 
implementations of rpcgen will make mistakes or the XDR libraries might have 
decoding errors. However, the system libraries usually aren't your primary concern 
when auditing an applicationbut they are well worth browsing in your spare time! 
Authentication 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
638 
RPC provides a number of authentication methods that can be used in applications 
that need to enforce access control for the functions they export: 
AUTH_NONE When this method is selected, no authentication is required to use 
the RPC server; clients can call any routines they like. It's also referred to as 
AUTH_NULL in some implementations. 
AUTH_UNIX Also commonly referred to as AUTH_SYS, with this authentication 
method, users provide a user ID, group ID list, and hostname indicating on 
which host they have the indicated privileges. For example, users connecting 
to an RPC server on host A might transmit credentials indicating they are the 
root user on host B. Because this mechanism relies on trust, it's totally 
unreliable. Indeed, this security is no better than no security enforcement 
because users can always transmit credentials indicating they are root (or any 
other user) on the local host where the RPC server resides. If you encounter a 
program that relies on this authentication mechanism, you have free access to 
any functions it provides. 
AUTH_DES This method provides a more secure authentication mechanism that 
requires clients to verify their identity by encrypting a message with a private 
key (usually a timestamp). The server can use DES authentication to verify 
the client's identity, and the client can use DES to verify the server's identity. 
RPC applications could possibly implement additional security features to help tighten 
control over applications, although additional features are used less often than they 
should be. If RPC authentication is in place, there's code to manually verify 
credentials in server routines or a dispatch function. In either case, some code is 
available to examine authentication data supplied with requests. It looks something 
like this: 
int authenticate(struct svc_req *svc) 
{ 
    struct authunix_params *aup; 
    switch(rqstp->rq_cred.oa_flavor){ 
        case AUTH_SYS: 
            aup = (struct authunix_params *)rqstp->rq_cred; 
            if(aup->aup_uid != 0) 
                return 1; 
            return 0; 
        default: 
            return 1; 
    } 
} 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
639 
This code has some verification of the requester's credentials, but it's using the 
AUTH_UNIX authentication method. As you know now, that method isn't much better 
than having no authentication at all. 
7.6.7 Summary 
The environment in which programs run in UNIX has many idiosyncrasies that affect 
how processes can function safely. You have seen mechanisms to pass extraneous 
data and resources into a process, such as environment variables and file descriptors, 
as well as mechanisms such as rlimits that impose certain restrictions on how a 
process operates. Because UNIX provides such fine-tuned access over the 
environment in which a process runs, processes that are called with elevated 
privileges need to be careful when interacting with sensitive resources. Auditing 
process calls in UNIX requires being aware of all the security implications of the 
myriad actions performed implicitly when a program runs. You have explored issues 
in direct program invocation via the execve() system call and indirect invocation via a 
command shell interpreter. The security-related behaviors you examined include file 
descriptor passing, command-line arguments, and trusting environment variables. In 
addition, you learned how mechanisms can be misused to adversely affect the way a 
process runs. The use of signals, IPC, and resource limits can contribute to a program 
encountering unexpected errors when performing normal tasks, which in turn might 
lead to a security compromise or aid an attacker in exploiting a vulnerability that 
requires precise timing. Finally, you have learned about process interaction via 
external mechanisms, such as IPC mechanisms and RPC. This information should give 
you a solid foundation for reviewing modern UNIX software. 
7.7 Chapter 11.  Windows I: Objects and the File System 
"Because it's cool. It's like, 'Yeah, been there done thatoh, yeah, I know that bug.' I 
can understand that phenomenon sociologically, not technically." 
Bill Gates, from a 1995 interview with FOCUS Magazine 
7.7.1 Introduction 
Windows is the most popular PC operating system on the market. It has evolved over 
more than 20 years from a basic single-user shell into a robust, networked, multiuser 
OS. Modern versions of Windows are quickly growing in the traditional big-iron 
markets, from the small office server space to data centers. So what code auditing 
book would be complete without a detailed discussion of Windows-specific security 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
640 
issues? This chapter and the next are dedicated to discussing security considerations 
unique to the Windows environment. The coverage begins with explanations of some 
of the essential Windows security concepts: the security model, objects and their 
related access controls, and manipulating files. Chapter 12(? [????.]), "Windows II: 
Interprocess Communication," moves on to the security complications that occur 
when exchanging data between different security contexts. 
Keep in mind that several different OSs actually make up the Windows family. This 
coverage, however, focuses on the Windows NT series, the most popularly deployed 
series, which includes NT, 2000, XP, Server 2003, and the upcoming Vista. Windows 
CE and 9x series aren't covered because they aren't true multiuser OSs, so they have 
limited security capabilities and don't present the unique considerations the NT series 
does. 
7.7.2 Background 
The Windows NT series is a family of hybrid microkernel OSs developed and 
distributed by Microsoft Corporation. It was originally designed through a 
collaborative effort with IBM as the successor to the OS/2 2.0 Presentation Manager. 
However, the commercial success of the Windows 3.x series led Microsoft to steer 
Windows NT development toward its present relationship with the classic Windows 
API. Therefore, the structure and conventions of the Windows API (Win32) are heavily 
derived from the original Windows 3.0 API. This influence is so significant that the 
1993 release of the original Windows NT was numbered 3.1 to provide parity and a 
natural transition from the then dominant Windows 3.0. The Windows NT series is 
currently the flagship product of the Windows line and is simply referred to as 
"Windows" from here on. 
Microsoft Developer Network (MSDN) 
The Microsoft Developer Network (MSDN) is the authoritative source of 
information on Windows APIs and technologies. You'll refer to it regularly 
over the course of a Windows application security review. A free online 
version is available at http://msdn.microsoft.com/, and local versions are 
included with the purchase of Visual Studio or through a subscription-based 
service. 
Windows is termed a hybrid microkernel, but its development history has always 
shown a willingness to sacrifice the microkernel separation for increased performance. 
It's probably more accurate to say that it draws from the microkernel design but 
doesn't fit the definition to an appreciable degree. More appropriately, the basic 
design of Windows is heavily influenced by the Digital Equipment Corporation (DEC) 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
641 
Virtual Memory System (VMS) operating system because the Windows NT senior 
architect, David Cutler, had previously worked as one of the primary designers of VMS. 
Microsoft hired Cutler in 1988 to help develop its next-generation operating system, 
and he brought a team of former DEC VMS engineers with him. 
The combined lineage of VMS and Windows 3.0 gives the modern Windows OS its 
unique (and occasionally schizophrenic) feel. Accepting some incongruities, the 
modern Windows system is a highly capable multiuser OS. It's natively multithreaded, 
all the way down to a fully preemptable kernel. The system provides a flexible 
security model that allows a fine-grained separation and assignment of resources, 
which extends to secure authentication across large distributed networks. However, a 
potential weakness of Windows is that the system supports such a wide range of 
capabilities. Many historical decisions in designing and implementing these 
capabilities have created a fertile ground for potential vulnerabilities. Although 
Microsoft is now one of the most security-aware software companies, the Windows 
system carries the burden of past security mistakes. It's these idiosyncrasies you 
need to focus on when considering Windows-specific security vulnerabilities. 
This chapter and Chapter 12(? [????.]) provide the information you need to identify 
vulnerabilities unique to the Windows architecture. Before learning about 
vulnerabilities, however, you need to understand more about the architecture of the 
OS. The following sections give you a basic overview of Windows and explain 
Windows design choices and handling of fundamental OS requirements. This 
overview isn't comprehensive; it's more a targeted coverage of the details you need 
to know. However, it should give you the foundation for understanding the types of 
vulnerabilities covered in this chapter and the next. 
Environment Subsystems 
The OS market was actually quite volatile when Windows NT was originally 
designed, so Microsoft chose an interesting approach in designing and 
implementing its new OS. It implemented the base kernel and user mode 
interface as one set of components, but the user mode environment and API 
are actually selectable. They are implemented in environment subsystems; 
the original Windows NT supported the Portable Operating System Interface 
for UNIX (POSIX) standard and OS/2 APIs in addition to the core Win32 
subsystem. This design allowed Microsoft to hedge its bets and potentially 
change the top-level operating environment as needed. 
The environment subsystem concept never really took off, however, and 
Win32 effectively cemented itself in the marketplace over time. In response, 
the bulk of the Win32 subsystem has been migrated into the kernel for 
improved performance. However, the environment subsystems are still a 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
642 
core underpinning of the OS and provide an interesting architectural point in 
other contexts. 
7.7.3 Objects 
An object is the fundamental unit of abstraction for Windows system resources. In the 
most generic sense, an object is simply a mechanism the kernel uses to manage 
virtual and physical resources. In some sense, an object is similar to a class in Java or 
C++; it's defined by a specific type (such as a file), and then instances of that object 
are created (such as the file C:\boot.ini) and manipulated. 
The Windows Kernel Object Manager (KOM) is the component responsible for 
kernel-level creation, manipulation, and maintenance of objects. All object types the 
KOM maintains are known as system objects or securable objects; the following 
list shows the most common groups of securable objects: 
Directory service objects 
File-mapping objects 
Interprocess synchronization objects (Event, Mutex, Semaphore, and 
WaitableTimer objects) 
Job objects 
Named and anonymous pipes 
Network shares 
NTFS files and directories 
Printers 
Processes and threads 
Registry keys (but not registry values) 
Services 
Window-management objects (but not windows) 
Note 
You can see a complete list of object types with the WinObj utility, available at 
www.sysinternals.com. If you're interested in learning more about the Windows 
architecture and KOM, check out Windows Internals 4th Edition by Mark E. 
Russinovich and David A. Solomon (Microsoft Press, 2005(? [????.])). 
Most securable objects are instantiated or connected to with a user-mode function of 
the form Create*() or Open*(). These functions generally return an object handle (the 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
643 
HANDLE data type) if the requested object is opened successfully. From the 
application's point of view, a handle is an opaque identifier for an open object not 
unlike file descriptors in UNIX. When an object is no longer needed, it can usually be 
closed by using the CloseHandle() function. One major advantage of this consistent 
object interface is that it allows unified access control mechanisms to be applied to all 
objects, regardless of their type or function. 
Note 
Although most objects are closed with CloseHandle(), a few require a specialized 
close routine, notably the RegCloseKey() function for closing registry key objects. 
Other programmatic constructs maintain the object metaphor, although they aren't 
true system objects. They are occasionally referred to as "nonsecurable" or 
"pseudo-objects," but these terms are just a generalization. Pseudo-objects include 
registry values and GUI windows, for example; the related securable objects are 
registry keys and window stations. For the purposes of this discussion, the most 
important distinction is that pseudo-objects don't accept a SECURITY_ATTRIBUTES 
structure as part of their creation, so they can't have Windows access control 
mechanisms applied to them. 
Object Namespaces 
Before you learn about access rights associated with objects, you need to understand 
the object namespace. In Windows, objects can be named or unnamed. Unnamed 
objects are anonymous and can be shared between processes only by duplicating an 
object handle or through object handle inheritance (discussed in "Handle Inheritance" 
later in this chapter). Conversely, named objects are given names when they are 
created. These names are used to identify objects by clients who want to access 
them. 
Named objects are stored in a hierarchical fashion so that applications can refer to 
them later. This hierarchy is referred to as an object namespace. Object 
namespaces are managed by the KOM. Historically, there has been only a single 
global namespace in Windows. However, the addition of Terminal Services adds a 
local namespace for every active terminal session. (Terminal Services are discussed 
in Chapter 12(? [????.]).) For now, assume the term "object namespace" refers to the 
global object namespace. 
An object namespace is similar to a typical file system; it's organized into directories 