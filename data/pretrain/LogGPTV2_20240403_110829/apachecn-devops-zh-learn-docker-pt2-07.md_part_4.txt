      # Dockerfile to build a LOG Volume for Apache2 Service 
      ####################################################### 
      # Base image is BusyBox 
      FROM busybox:latest 
      # Author: Dr. Peter 
      MAINTAINER Dr. Peter  
      # Create a data volume at /var/log/apache2, which is 
      # same as the log directory PATH set for the apache image 
      VOLUME /var/log/apache2 
      # Execute command true 
      CMD ["/bin/true"] 
```
由于这个`Dockerfile`是为启动纯数据容器而精心制作的，因此默认执行命令被设置为`/bin/true`。
2.  我们将继续使用`docker build`创建一个名为`apache2log`的 Docker 映像，如下所示:
```
 $ sudo docker build -t apache2log .
 Sending build context to Docker daemon 2.56 kB
 Sending build context to Docker daemon
 Step 0 : FROM busybox:latest
 ... TRUNCATED OUTPUT ...
```
3.  使用`docker run`子命令从`apache2log`映像启动一个纯数据容器，并使用`--name`选项命名生成的容器`log_vol`:
```
      $ sudo docker run --name log_vol apache2log
```
根据前面的命令，容器将在`/var/log/apache2`中创建一个数据卷，并将其移动到停止状态。
4.  同时，您可以使用`-a`选项运行`docker ps`子命令来验证容器的状态:
```
 $ sudo docker ps -a
 CONTAINER ID IMAGE COMMAND 
 CREATED STATUS PORTS 
 NAMES
 40332e5fa0ae apache2log:latest "/bin/true" 
 2 minutes ago Exited (0) 2 minutes ago 
 log_vol
```
根据输出，容器以`0`退出值退出。
5.  使用`docker run`子命令启动 Apache2 HTTP 服务。在这里，我们正在重用我们在[第 6 章](06.html)、*中创建的`apache2`映像，在容器*中运行服务。此外，在这个容器中，我们将使用`--volumes-from`选项从`log_vol`装载`/var/log/apache2`数据卷，这是我们在步骤 3 中启动的纯数据容器:
```
      $ sudo docker run -d -p 80:80 \
 --volumes-from log_vol \
 apache2
 7dfbf87e341c320a12c1baae14bff2840e64afcd082dda3094e7cb0a0023cf42  
```
随着从`log_vol`装载`/var/log/apache2`数据卷的 Apache2 HTTP 服务的成功启动，我们可以使用临时容器访问日志文件。
6.  这里，我们使用一个临时容器列出了 Apache2 HTTP 服务存储的文件。这个临时容器通过从`log_vol`装入`/var/log/apache2`数据卷而分离出来，并且使用`ls`命令列出`/var/log/apache2`中的文件。此外，`docker run`子命令的`--rm`选项用于在完成执行`ls`命令后移除容器:
```
 $ sudo docker run --rm \
 --volumes-from log_vol \
 busybox:latest ls -l /var/log/apache2
 total 4
 -rw-r--r-- 1 root root 0 Dec 5 15:27 
 access.log
 -rw-r--r-- 1 root root 461 Dec 5 15:27 
 error.log
 -rw-r--r-- 1 root root 0 Dec 5 15:27 
 other_vhosts_access.log
```
7.  最后，使用`tail`命令访问 Apache2 HTTP 服务生成的错误日志，如下命令所示:
```
 $ sudo docker run --rm \
 --volumes-from log_vol \
 ubuntu:16.04 \
 tail /var/log/apache2/error.log
 AH00558: apache2: Could not reliably determine the 
 server's fully qualified domain name, using 172.17.0.24\. 
 Set the 'ServerName' directive globally to suppress this 
 message
 [Fri Dec 05 17:28:12.358034 2014] [mpm_event:notice] 
 [pid 18:tid 140689145714560] AH00489: Apache/2.4.7 
 (Ubuntu) configured -- resuming normal operations
 [Fri Dec 05 17:28:12.358306 2014] [core:notice] 
 [pid 18:tid 140689145714560] AH00094: Command line: 
 '/usr/sbin/apache2 -D FOREGROUND'
```
## 避免常见的陷阱
到目前为止，我们已经讨论了如何有效地使用数据卷在 Docker 主机和容器之间以及容器之间共享数据。使用数据量的数据共享被证明是 Docker 范例中非常强大和重要的工具。然而，它确实有一些陷阱，需要仔细识别和消除。在本节中，我们尝试列出一些与数据共享相关的常见问题，以及克服这些问题的方法和途径。
### 目录泄漏
在*数据卷*一节中，您已经了解到 Docker 引擎会根据`Dockerfile`中的`VOLUME`指令以及`docker run`子命令的`-v`选项自动创建目录。我们还了解到，Docker 引擎不会自动删除这些自动生成的目录，以保留容器内运行的应用的状态。我们可以使用`docker rm`子命令的`-v`选项强制 Docker 删除这些目录。手动删除的过程带来了两大挑战，列举如下:
*   **未删除的目录:**可能会有这样的场景，您可能会有意或无意地选择在删除容器时不删除生成的目录。
*   **第三方映像:**通常，我们会利用第三方 Docker 映像，这些映像本可以通过`VOLUME`指令构建。同样，我们也可能有自己的刻有`VOLUME`的 Docker 映像。当我们使用这样的 Docker 映像启动容器时，Docker 引擎将自动生成指定的目录。由于我们不知道数据卷的创建，我们可能不会使用`-v`选项调用`docker rm`子命令来删除自动生成的目录。
在前面提到的场景中，一旦关联的容器被移除，就没有直接的方法来识别容器被移除的目录。以下是一些关于如何避免这个陷阱的建议:
*   始终使用`docker inspect`子命令检查 Docker 映像，并检查映像中是否记录了任何数据量。
*   始终使用`-v`选项运行`docker rm`子命令，删除为容器创建的任何数据卷(目录)。即使数据卷由多个容器共享，使用`-v`选项运行`docker rm`子命令仍然是安全的，因为只有当共享该数据卷的最后一个容器被删除时，与该数据卷相关联的目录才会被删除。
*   出于任何原因，如果您选择保留自动生成的目录，您必须保留一个清晰的记录，以便以后可以删除它们。
*   实现一个审计框架，它将审计并找出没有任何容器关联的目录。
### 数据量的不良影响
如前所述，Docker 允许我们在构建期间使用`VOLUME`指令访问 Docker 映像中的每个数据卷。尽管如此，在构建期间，数据卷不应用于存储任何数据，否则会导致不必要的影响。
在本节中，我们将通过创建一个`Dockerfile`来演示在构建过程中使用数据量的不良影响，然后通过构建这个`Dockerfile`来展示其含义。
以下是`Dockerfile`的详情:
1.  使用 Ubuntu 16.04 作为基础映像构建映像:
```
      # Use Ubuntu as the base image 
      FROM ubuntu:16.04 
```
2.  使用`VOLUME`指令创建`/MountPointDemo`数据卷:
```
      VOLUME /MountPointDemo 
```
3.  使用`RUN`指令在`/MountPointDemo`数据卷中创建文件:
```
      RUN date > /MountPointDemo/date.txt 
```
4.  使用`RUN`指令显示`/MountPointDemo`数据卷中的文件:
```
      RUN cat /MountPointDemo/date.txt 
```
5.  使用`docker build`子命令从这个`Dockerfile`开始构建映像，如下所示:
```
 $ sudo docker build -t testvol .
 Sending build context to Docker daemon 2.56 kB
 Sending build context to Docker daemon
 Step 0 : FROM ubuntu:16.04
 ---> 9bd07e480c5b
 Step 1 : VOLUME /MountPointDemo
 ---> Using cache
 ---> e8b1799d4969
 Step 2 : RUN date > /MountPointDemo/date.txt
 ---> Using cache
 ---> 8267e251a984
 Step 3 : RUN cat /MountPointDemo/date.txt
 ---> Running in a3e40444de2e
 cat: /MountPointDemo/date.txt: No such file or directory
 2014/12/07 11:32:36 The command [/bin/sh -c cat 
 /MountPointDemo/date.txt] returned a non-zero code: 1
```
在`docker build`子命令的前面输出中，您会注意到构建在步骤 3 中失败，因为它找不到在步骤 2 中创建的文件。显然，在步骤 2 中创建的文件在到达步骤 3 时就消失了。这种不良影响是由于 Docker 用来构建其映像的方法造成的。对 Docker 形象塑造过程的理解将揭开这个谜。
在构建过程中，对于`Dockerfile`中的每个指令，遵循以下步骤:
1.  通过将`Dockerfile`指令转换为等效的`docker run`子命令来创建新的容器。
2.  将新创建的容器提交给映像。
3.  重复步骤 1 和 2，将新创建的映像视为步骤 1 的基础映像。
当一个容器被提交时，它保存容器的文件系统，并且故意不保存数据卷的文件系统。因此，存储在数据卷中的任何数据都将在此过程中丢失。因此，在构建过程中不要使用数据卷作为存储。
## 摘要
为了使企业级分布式应用在操作和输出方面与众不同，数据是最重要的工具和要素。随着信息技术容器化，旅程以轻快明亮的方式开始。通过 Docker 引擎的智能利用，信息技术和业务软件解决方案被智能地容器化。然而，最初的动机是需要更快、更完美地实现应用感知的 Docker 容器，因此，数据与容器中的应用紧密耦合。然而，这种接近带来了一些真正的风险。如果应用崩溃，那么数据也会消失。此外，多个应用可能依赖于相同的数据，因此数据必须跨应用共享。
在本章中，我们讨论了 Docker 引擎在促进 Docker 主机和容器之间以及容器之间的无缝数据共享方面的功能。数据量被指定为在不断增长的 Docker 生态系统的组成部分之间实现数据共享的基础构建块。在下一章中，我们将解释容器编排背后的概念，并看看如何通过一些自动化工具简化这个复杂的方面。编排对于实现复合容器是必不可少的。