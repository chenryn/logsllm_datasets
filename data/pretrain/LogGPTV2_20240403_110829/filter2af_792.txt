# InsecurePowerShell：无需依赖System.Management.Automation类库
##### 译文声明
本文为翻译文章，原文作者为cobbr，来源于cobbr.io。请以原文为准，本译文仅供参考。
>
> 长期以来，人们普遍认为PowerShell等同于System.Management.Automation.dll。然而，我们将探讨一种不使用该类库执行PowerShell脚本的方法，即通过InsecurePowerShell来实现。

## 不依赖powershell.exe的PowerShell脚本执行
本文标题所指内容源于对“不依赖powershell.exe执行PowerShell脚本”的深入研究。我们发现，powershell.exe进程只是作为System.Management.Automation.dll的一个DLL Host。事实上，真正的核心是System.Management.Automation.dll，它才是PowerShell的核心。此外，其他本地Windows进程如powershell_ise.exe也能充当PowerShell的Host。

我们可以自行创建进程来托管System.Management.Automation.dll。一些开源项目已经实现了这一点，例如UnmanagedPowerShell（[https://github.com/leechristensen/UnmanagedPowerShell](https://github.com/leechristensen/UnmanagedPowerShell)）、SharpPick（[https://github.com/PowerShellEmpire/PowerTools/tree/master/PowerPick/SharpPick](https://github.com/PowerShellEmpire/PowerTools/tree/master/PowerPick/SharpPick)）、PSAttack（[https://github.com/jaredhaight/PSAttack](https://github.com/jaredhaight/PSAttack)）和nps（[https://github.com/Ben0xA/nps](https://github.com/Ben0xA/nps)）。

使用PowerShell的一个优势在于，powershell.exe是一个经过微软签名的二进制文件，通常会被应用程序列入白名单。而自定义进程则不会被信任。但在某些情况下，当powershell.exe被禁用时，这种方法可以作为一种替代方案。

## 不使用System.Management.Automation.dll的PowerShell
接下来，我们将重点介绍另一个开源项目InsecurePowerShell（[https://github.com/cobbr/InsecurePowerShell](https://github.com/cobbr/InsecurePowerShell)）。既然我们要创建一个新的进程作为PowerShell的Host，就不必继续使用System.Management.Automation.dll。我们可以对其进行修改，并为修改后的版本提供Host。

需要注意的是，PowerShell在v5版本中引入了许多安全特性，包括脚本块日志、模块日志、转录日志、反恶意软件扫描接口（AMSI）和受限语言模式等。这些功能都在System.Management.Automation.dll中实现。

我们的目标是获得一个具备最新PowerShell功能但无任何安全防护措施的System.Management.Automation.dll版本。InsecurePowerShell正是为此而生。因此，“不使用” System.Management.Automation.dll实际上是指不使用默认版本。

InsecurePowerShell是基于PowerShell Core v6.0.0的一个分支，仅进行了一些修改。具体来说，InsecurePowerShell移除了以下安全功能：
- **AMSI**：InsecurePowerShell不会将任何PowerShell代码提交给AMSI，即使存在主动监听的反恶意软件产品。
- **PowerShell日志记录**：InsecurePowerShell会禁用脚本块日志、模块日志和转录日志。即使已在组策略中启用这些日志记录，也会被忽略。
- **语言模式**：InsecurePowerShell始终以全语言模式运行PowerShell代码。尝试设置为约束语言或限制语言模式将无效。
- **ETW**：InsecurePowerShell不使用事件跟踪（Event Tracing for Windows, ETW）。

## 使用方法
InsecurePowerShell的编译方式与PowerShell Core相同，因此其使用方法也完全一致。发行版包含一个名为pwsh.exe的二进制文件，可替代标准的PowerShell.exe。你可以交互式地使用它，也可以通过-Command或-EncodedCommand参数非交互式地使用。

以下是使用pwsh.exe的示例：
```powershell
PS C:\InsecurePowerShell> .\pwsh.exe
PowerShell v6.0.0-rc.2-67-g642a8fe0eb0b49f4046e434dc16748ea5c963d51
Copyright (c) Microsoft Corporation. All rights reserved.
https://aka.ms/pscore6-docs
Type 'help' to get help.
PS C:\InsecurePowerShell> $Execution.SessionState.LanguageMode = 'ConstrainedLanguage'
PS C:\InsecurePowerShell> $Execution.SessionState.LanguageMode
FullLanguage
PS C:\InsecurePowerShell> Get-WinEvent -FilterHashtable @{ProviderName="Microsoft-Windows-PowerShell"; Id=4104} | % Message
Creating Scriptblock text (1 of 1):
.pwsh.exe
ScriptBlock ID: 877d94f3-4bb5-4a26-88e3-58bb8091e1d8
Path:
Creating Scriptblock text (1 of 1):
prompt
ScriptBlock ID: 72983606-2c4d-4266-808c-280c718550c4
Path:
```

## InsecurePowerShellHost
除了pwsh.exe之外，我还创建了一个名为InsecurePowerShellHost的.NET Core应用。此应用用于为修改后的System.Management.Automation.dll提供Host。InsecurePowerShellHost只能通过–Command和–EncodedCommand参数非交互式使用。相比完整的InsecurePowerShell构建，它更加轻量级。

以下是使用InsecurePowerShellHost的示例：
```powershell
PS C:\InsecurePowerShellHost> .\InsecurePowerShellHost.exe
usage: InsecurePowerShellHost.exe [--EncodedCommand encoded_command | --Command command]
PS C:\InsecurePowerShellHost> .\InsecurePowerShellHost.exe --Command "`$Execution.SessionState.LanguageMode = 'ConstrainedLanguage'; `$Execution.SessionState.LanguageMode"
FullLanguage
```

## 总结
InsecurePowerShell和InsecurePowerShellHost的概念非常简单，并没有太多突破性的技术。它们也有一些缺点，可能不会广泛应用于实际攻防场景。然而，它们证明了我们可以创建一个定制版本的PowerShell，在无法将自己的应用程序加入白名单的情况下，使用不包含安全特性的应用程序。

### InsecurePowerShell的优点
1. **无安全功能的PowerShell**：这是其最大的优势，能够运行没有AMSI、脚本块记录、模块记录和转录记录的PowerShell。
2. **良好的兼容性**：作为.NET Core应用程序，可以在多个Windows版本上运行，包括Windows 7 SP1、Windows 8.1、Windows 10、Windows Server 2008 R2 SP1、Windows Server 2012和Windows Server 2016。
3. **具备PowerShell Core 6.0的所有功能**：可以使用最新版本的所有功能，而不受旧版本的安全限制。

### InsecurePowerShell的缺点
1. **需要磁盘访问**：作为.NET Core应用程序，需要将二进制文件和相关DLL文件放置在磁盘上，不符合攻击过程中的“离地原则”。
2. **不使用应用程序白名单**：失去了powershell.exe作为可信二进制文件的优势。
3. **PowerShell Core不是Windows PowerShell**：InsecurePowerShell是PowerShell Core的一个分支，而不是Windows PowerShell。两者之间的功能差异可能导致预设的PowerShell工具无法正常工作。

### 防护方式
为了防范InsecurePowerShell和InsecurePowerShellHost，可以将修改后的System.Management.Automation.dll加入黑名单。同时，也可以将旧版本的System.Management.Automation.dll（特别是2.0版本）加入黑名单。尽管黑名单是一种快速简便的防护方法，但更彻底的防护还需要应用程序白名单解决方案。攻击者只需重新编译InsecurePowerShell和InsecurePowerShellHost即可绕过黑名单。

### 后续计划
InsecurePowerShell的原理非常简单，我并不打算做太多后续维护工作。不过，有一些有趣的内容可以增强InsecurePowerShell，未来可能会进行进一步研究：
1. **动态加载程序集**：研究如何在InsecurePowerShell中动态加载修改后的System.Management.Automation.dll和.NET Core DLL，使其作为一个单独的二进制文件分发。
2. **PowerShell Core代理**：如果有一个与PowerShell Core兼容的完整C2代理，将会非常有用。由于Windows PowerShell和PowerShell Core之间没有功能校验机制，现有的大多数PowerShell C2代理可能会出现问题。我打算研究并解决这一问题。

InsecurePowerShell的源代码请参见：[https://github.com/cobbr/InsecurePowerShell](https://github.com/cobbr/InsecurePowerShell)，InsecurePowerShellHost的源代码请参见：[https://github.com/cobbr/InsecurePowerShellHost](https://github.com/cobbr/InsecurePowerShellHost)。