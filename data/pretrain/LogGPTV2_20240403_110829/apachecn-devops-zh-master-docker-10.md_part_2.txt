就像亚马逊网络服务集群一样，请确保资源被完全移除，否则您可能会收到意想不到的账单。
# 云摘要的摘要器
正如您所看到的，通过使用 Docker 提供的模板，在 Azure 和亚马逊网络服务中启动 Swarm 集群是非常简单的。虽然这些模板很棒，但如果您刚开始使用，它们从 Docker 获得的支持很少。我建议，如果您正在寻找一种简单的方法来启动在公共云中运行生产工作负载的容器，您可以看看我们接下来将讨论的一些解决方案。
# 亚马逊 ECS 和 AWS Fargate
亚马逊网络服务提供了几种不同的容器解决方案。我们将在这一部分看到的是亚马逊**弹性容器服务** ( **ECS** )的一部分，被称为 AWS Fargate。
传统上，亚马逊 ECS 会启动 EC2 实例。一旦启动，Amazon ECS 代理将与容器运行时一起部署，这样您就可以使用 AWS 控制台和命令行工具来管理您的容器。AWS Fargate 消除了启动 EC2 实例的需要，允许您简单地启动容器，而不必担心管理集群或承担 EC2 实例的费用。
我们将稍微作弊，并通过**亚马逊 ECS 第一次运行过程。**您可以访问以下网址:[https://console.aws.amazon.com/ecs/home#/firstRun.](https://console.aws.amazon.com/ecs/home#/firstRun)这将带我们完成在法盖特集群中启动容器所需的四个步骤。
亚马逊 ECS 使用以下组件:
*   容器定义
*   任务内容
*   服务
*   串
启动我们的 AWS Fargate 托管容器的第一步是实际配置前两个组件，即容器和任务定义。
容器定义是定义容器基本配置的地方。可以将此想象为在命令行上添加使用 Docker 客户端启动容器时使用的标志，例如，命名容器、定义要使用的映像、设置网络等。
对于我们的示例，有三个预定义的选项和一个自定义选项。单击自定义选项中的配置按钮，并输入以下信息:
*   **容器名称**:T0
*   **映像** : `russmckendrick/cluster:latest`
*   **内存限制(MiB)** :保留默认值
*   **端口映射**:输入`80`并保持选择`tcp`
然后，点击**更新**按钮。对于任务定义，点击**编辑**按钮并输入以下内容:
*   **任务定义名称** : `cluster-task`
*   **网络模式**:应该是`awsvpc`；您不能更改此选项
*   **任务执行角色**:休假为`ecsTaskExecutionRole`
*   **兼容性**:这应该默认为 FARGATE，您不应该编辑它
*   **任务内存**和**任务中央处理器**:保留两者的默认选项
更新后，点击**保存**按钮。现在，您可以点击页面底部的“下一步”按钮。这将把我们带到第二步，也就是定义服务的地方。
服务运行任务，而任务又有一个与之关联的容器。默认服务没问题，点击**下一步**按钮进入启动流程的第三步。第一步是在哪里创建集群。同样，默认值也没问题，所以点击**下一步**按钮进入查看页面。
这是您在启动任何服务之前再次检查任务、服务和集群定义的最后机会。如果你对一切都满意，那么点击**创建**按钮。从这里，您将进入一个页面，您可以在其中查看构成我们的 AWS Fargate 集群的各种 AWS 服务的状态:
![](img/b3ded49a-504d-40c2-b6ad-689bf2251a3d.png)
一旦一切从**待定**变为 **co** **完成**，您将能够点击**查看服务**按钮进入服务概述页面:
![](img/2a59d6e9-66b1-436b-8c41-a3c085ce0db7.png)
现在，我们只需要知道我们的容器的公共 IP 地址。要找到这个，点击**任务**选项卡，然后选择运行任务的唯一标识。在页面的网络部分，您应该能够找到任务的私有和公共 IP 地址。在浏览器中输入公共 IP 应该会显示现在熟悉的集群应用:
![](img/81f3646d-0867-437f-a2f6-f9cebb7b82ed.png)
您会注意到显示的容器名称是容器的主机名，并且包括内部 IP 地址。您也可以通过单击日志选项卡来查看容器中的日志:
![](img/da035de0-00f4-4c76-970e-d4b9dfd0f203.png)
那么，这要花多少钱？能够运行一个月的容器大约需要 14 美元，也就是每小时 0.019 美元。
这种成本计算意味着，如果您要全天候运行大量任务，那么 Fargate 可能不是运行容器的最具成本效益的方式。相反，您可能希望使用亚马逊 ECS EC2 选项，在这里您可以将更多容器打包到您的资源中，或者使用亚马逊 EKS 服务，我们将在本章的后面部分讨论该服务。然而，对于快速启动一个容器然后终止它，Fargate 是很棒的——启动容器的障碍很小，支持资源的数量也很少。
完成 Fargate 容器后，应该删除集群。这将删除与群集关联的所有服务。一旦集群被移除，进入**任务定义**页面，并在需要时取消注册。
接下来，我们将看看 Azure 应用服务。
# 微软 Azure 应用服务
**微软 Azure App Services** 是一个完全托管的平台，允许您部署您的应用，并让 Azure 担心管理他们运行的平台。启动应用服务时，有几个选项可用。您可以运行用。. NET。NET Core、Ruby、Node.js、PHP、Python 和 Ruby，或者您可以直接从容器映像注册表启动映像。
在这个快速演练中，我们将从 Docker Hub 启动集群映像。为此，请登录位于[https://portal.azure.com/](https://portal.azure.com/)的 Azure 门户网站，并从左侧菜单中选择应用服务。
在加载页面，点击**+添加**按钮。您可以从这里选择几个选项:
![](img/3917916c-1828-44cd-92f2-fe766b956704.png)
我们将推出一个网络应用，所以点击该应用的磁贴。一旦图块展开，点击**创建**按钮。
在打开的页面上，有几个选项。请按如下方式填写:
*   **应用名称**:为应用选择一个唯一的名称。
*   **订阅**:选择有效的订阅。
*   **资源组**:保持创建新选项处于选中状态。
*   **OS** :留为 Linux。
*   **发布**:选择 Docker 映像。
*   **App Service 计划/位置**:默认选择最贵的计划，点击这里会进入一个页面，可以新建一个计划。为此，单击**新建**，命名您的计划并选择位置，然后最终选择定价层。根据我们的需要，**开发** / **测试**计划就可以了。选择后，点击**应用**。
*   **配置容器:**点击此处将进入容器选项。在这里，您有几个选项:单容器、Docker 编写或 Kubernetes。目前，我们将推出一个单一的容器。点击**Docker 中心**选项，进入`russmckendrick/cluster:latest`。一旦输入，您将能够点击**应用**按钮。
填写完所有信息后，您可以点击**创建**启动网络应用服务。一旦启动，您应该能够通过 Azure 提供的网址访问该服务，例如，我的网址是`https://masteringdocker.azurewebsites.net/`。打开浏览器将显示集群应用:
![](img/379ca74a-fc1d-4ccb-a7cb-24880887ae55.png)
如您所见，这一次，我们有了容器标识，而不是像在 AWS Fargate 上启动容器时那样的完整主机名。这种规格的容器将花费我们大约每小时 0.05 美元，或每月 36.50 美元。要移除容器，只需移除资源组。
# 微软 Azure、谷歌云和亚马逊网络服务中的 Kubernetes
我们要看的最后一件事是在三个主要的公共云中启动 Kubernetes 集群有多容易。在前一章中，我们使用 Docker Desktop 应用的内置功能在本地启动了 Kubernetes 集群。首先，我们将从微软 Azure 开始，看看在公共云上使用 Kubernetes 的最快方法。
# 蓝色 Kubernetes 服务
**Azure Kubernetes 服务** ( **AKS** )是一个启动和配置都极其简单的服务。我将在我的本地机器上使用 Azure 命令行工具；您还可以通过使用 Azure 门户中内置的 Azure Cloud Shell 来使用命令行工具。
我们需要做的第一件事是创建一个资源组来启动我们的 AKS 集群。要创建一个名为`MasteringDockerAKS`的，运行以下命令:
```
$ az group create --name MasteringDockerAKS --location eastus
```
现在我们有了资源组，我们可以通过运行以下命令来启动一个双节点 Kubernetes 集群:
```
$ az aks create --resource-group MasteringDockerAKS \
 --name MasteringDockerAKSCluster \
 --node-count 2 \
 --enable-addons monitoring \
 --generate-ssh-keys
```
启动群集需要几分钟时间。一旦启动，我们将需要复制配置，这样我们就可以使用我们本地的`kubectl`副本与集群进行交互。为此，请运行以下命令:
```
$ az aks get-credentials \
    --resource-group MasteringDockerAKS \
    --name MasteringDockerAKSCluster
```
这将配置你的本地副本`kubectl`与你刚刚启动的 AKS 集群对话。现在，您应该会看到集群列在 Kubernetes 下的 Docker 菜单中:
![](img/1eb9ae6d-7ee8-4742-9401-ab8de398248b.png)
运行以下命令将向您显示您的`kubectl`客户端正在对话的服务器版本以及关于节点的详细信息:
```
$ kubectl version
$ kubectl get nodes
```
您可以在下面的屏幕截图中看到前面命令的输出:
![](img/37a0e9be-d1de-4cf7-85aa-55b3529f2d03.png)
现在我们已经启动并运行了集群，我们需要启动一些东西。幸运的是，Weave 有一个优秀的开源微服务演示，它推出了一个销售袜子的演示商店。要启动演示，我们只需要运行以下命令:
```
$ kubectl create namespace sock-shop
$ kubectl apply -n sock-shop -f "https://github.com/microservices-demo/microservices-demo/blob/master/deploy/kubernetes/complete-demo.yaml?raw=true"
```
演示启动大约需要五分钟。您可以通过运行以下命令来检查`pods`的状态:
```
$ kubectl -n sock-shop get pods
```
一旦一切正常运行，您应该会看到如下输出:
![](img/7acc42f3-dfd4-4920-b859-73cb984930b4.png)
现在我们的应用已经启动，我们需要一种方法来访问它。通过运行以下命令检查服务:
```
$ kubectl -n sock-shop get services
```
这向我们展示了有一种服务叫做`front-end`。我们将创建一个负载平衡器并将其附加到此服务。为此，请运行以下命令:
```
$ kubectl -n sock-shop expose deployment front-end --type=LoadBalancer --name=front-end-lb
```
您可以通过运行以下命令来检查负载平衡器的状态:
```
$ kubectl -n sock-shop get services front-end-lb
$ kubectl -n sock-shop describe services front-end-lb
```
一旦启动，您应该会看到如下内容:
![](img/de5124d9-7437-41de-a789-dd18f33e536f.png)
从前面的输出可以看出，对于我的商店，IP 地址是`104.211.63.146`，端口是`8079`。在浏览器中打开`http://104.211.63.146:8079/`后，我看到了以下页面:
![](img/635d767c-7e48-42f0-90fa-2d934c687d6f.png)
单击完商店后，可以通过运行以下命令将其删除:
```
$ kubectl delete namespace sock-shop
```
要删除 AKS 群集和资源组，请运行以下命令:
```
$ az group delete --name MasteringDockerAKS --yes --no-wait
```
请记住检查所有内容是否已按预期从 Azure 门户中删除，以避免任何意外费用。最后，您可以通过运行以下命令从本地`kubectl`配置中删除该配置: