DECLARE  
v_application_name text;  
v_pg_backend_pid int;  
BEGIN  
  -- 获取会话的postgres pid  
  select pg_backend_pid() into v_pg_backend_pid;  
  -- 根据这个PID获取application_name, 这个就可以用来区分是不是复制程序连上来的会话.9.1(含9.1)以前的版本pg_stat_activity.procpid.  
  select application_name into v_application_name from pg_stat_activity where pid=v_pg_backend_pid;  
  -- 如果不是复制程序连上来的会话, 返回一个错误就行.  
  if (v_application_name <> 'aaa_bbb_digoal' ) then  
    raise exception 'you cann''t modify this table.';  
  end if;  
  return null;  
END;  
$BODY$;  
```  
拒绝除复制程序以外的会话进行DML以及TRUNCATE的触发器 :   
```  
create trigger trg_rmt_test_1 BEFORE INSERT OR DELETE OR UPDATE OR TRUNCATE ON rmt_test FOR EACH STATEMENT EXECUTE PROCEDURE f_rmt_test();  
```  
5\. 好了, 现在来测试一下从loc_test复制到rmt_test的情况.  
本例使用到的触发器函数, 如果远程执行失败,允许本地成功,本地写sync_err_rec  
源站 :   
```  
digoal=> insert into loc_test values (1, 'digoal', now(), now());  
INSERT 0 1  
-- 插入测试  
digoal=> select * from loc_test ;  
 id |  info  |     create_time     |     modify_time       
----+--------+---------------------+---------------------  
  1 | digoal | 2012-08-31 14:33:17 | 2012-08-31 14:33:17  
(1 row)  
-- 没有错误记录  
digoal=> select * from sync_err_rec ;  
 nsp_name | table_name | dst_server | dst_query | create_time   
----------+------------+------------+-----------+-------------  
(0 rows)  
```  
目标站点 :   
```  
digoal=> select * from rmt_test ;  
 id |  info  |     create_time     |     modify_time       
----+--------+---------------------+---------------------  
  1 | digoal | 2012-08-31 14:33:17 | 2012-08-31 14:33:17  
(1 row)  
```  
源站更新测试 :   
```  
digoal=> update loc_test set info='DIGOAL';  
NOTICE:  v_dst_query:DELETE FROM digoal.rmt_test WHERE id = '1';INSERT INTO digoal.rmt_test(id,info,create_time,modify_time) VALUES('1','DIGOAL','2012-08-31 14:59:41','2012-08-31 14:59:41')  
UPDATE 1  
digoal=> select * from loc_test ;  
 id |  info  |     create_time     |     modify_time       
----+--------+---------------------+---------------------  
  1 | DIGOAL | 2012-08-31 14:59:41 | 2012-08-31 14:59:41  
(1 row)  
```  
目标站点 :   
```  
digoal=> select * from rmt_test ;  
 id |  info  |     create_time     |     modify_time       
----+--------+---------------------+---------------------  
  1 | DIGOAL | 2012-08-31 14:59:41 | 2012-08-31 14:59:41  
(1 row)  
```  
源站删除测试 :   
```  
digoal=> delete from loc_test ;  
NOTICE:  v_dst_query:DELETE FROM digoal.rmt_test WHERE id = '1'  
DELETE 1  
digoal=> select * from loc_test ;  
 id | info | create_time | modify_time   
----+------+-------------+-------------  
(0 rows)  
```  
目标站点 :   
```  
digoal=> select * from rmt_test ;  
 id | info | create_time | modify_time   
----+------+-------------+-------------  
(0 rows)  
```  
源站批量插入测试 :   
```  
digoal=> insert into loc_test select generate_series(1,100),'DIGOAL',now(),now();  
digoal=> insert into loc_test select id+1000,'TEST',now(),now() from loc_test ;  
digoal=> select sum(hashtext(t.*::text)),count(*) from loc_test t;  
    sum     | count   
------------+-------  
 8757913752 |   200  
(1 row)  
```  
目标站点 :   
```  
digoal=> select sum(hashtext(t.*::text)),count(*) from rmt_test t;  
    sum     | count   
------------+-------  
 8757913752 |   200  
(1 row)  
```  
源站truncate测试 :   
```  
digoal=> truncate table loc_test ;  
NOTICE:  v_dst_query:truncate table only digoal.rmt_test  
TRUNCATE TABLE  
digoal=> select count(*) from loc_test ;  
 count   
-------  
     0  
(1 row)  
```  
目标站点 :   
```  
digoal=> select count(*) from rmt_test ;  
 count   
-------  
     0  
(1 row)  
```  
如果网络发生异常, 或者用户更改密码了, 无法复制到远程数据库,  将会记录到sync_err_rec表.   
以下模拟远程用户修改密码, 无法复制的情况.  
目标库修改连接的用户密码 :  
```  
digoal=# alter role digoal encrypted password 'test';  
ALTER ROLE  
```  
源站测试插入失败测试 :   
```  
digoal=> insert into loc_test values (1,'DIGOAL',now(),now());  
NOTICE:  v_dst_query:INSERT INTO digoal.rmt_test(id,info,create_time,modify_time) VALUES('1','DIGOAL','2012-08-31 15:40:29','2012-08-31 15:40:29')  
NOTICE:  v_conn_status:, v_exec_status:, v_disconn_status:.  
INSERT 0 1  
```  
查看源站loc_test表, 记录已经插入 :   
```  
digoal=> select * from loc_test ;  
 id |  info  |     create_time     |     modify_time       
----+--------+---------------------+---------------------  
  1 | DIGOAL | 2012-08-31 15:08:07 | 2012-08-31 15:08:07  
(1 row)  
```  
查看错误记录表, 记录已经插入 :   
```  
digoal=> select * from sync_err_rec ;  
 id | nsp_name | table_name | dst_server |                                                           dst_query                        
                                     |        create_time           
----+----------+------------+------------+------------------------------------------------------------------------------------------  
-------------------------------------+----------------------------  
  7 | digoal   | loc_test   | dst_digoal | INSERT INTO digoal.rmt_test(id,info,create_time,modify_time) VALUES('1','DIGOAL','2012-08  
-31 15:40:29','2012-08-31 15:40:29') | 2012-08-31 15:40:29.301519  
(1 row)  
```  
查看远程表 :   
```  
digoal=> select * from rmt_test ;  
 id | info | create_time | modify_time   
----+------+-------------+-------------  
(0 rows)  
```  
源站更新失败测试 :   
```  
digoal=> update loc_test set id=2;  
NOTICE:  v_dst_query:DELETE FROM digoal.rmt_test WHERE id = '1';INSERT INTO digoal.rmt_test(id,info,create_time,modify_time) VALUES('2','DIGOAL','2012-08-31 15:40:29','2012-08-31 15:40:29')  
NOTICE:  v_conn_status:, v_exec_status:, v_disconn_status:.  
UPDATE 1  
digoal=> select * from loc_test ;  
 id |  info  |     create_time     |     modify_time       
----+--------+---------------------+---------------------  
  2 | DIGOAL | 2012-08-31 15:40:29 | 2012-08-31 15:40:29  
(1 row)  
digoal=> select * from sync_err_rec ;  
 id | nsp_name | table_name | dst_server |                                                                                dst_query   
                                                                                |        create_time           
----+----------+------------+------------+------------------------------------------------------------------------------------------  
--------------------------------------------------------------------------------+----------------------------  
  7 | digoal   | loc_test   | dst_digoal | INSERT INTO digoal.rmt_test(id,info,create_time,modify_time) VALUES('1','DIGOAL','2012-08  
-31 15:40:29','2012-08-31 15:40:29')                                            | 2012-08-31 15:40:29.301519  
  8 | digoal   | loc_test   | dst_digoal | DELETE FROM digoal.rmt_test WHERE id = '1';INSERT INTO digoal.rmt_test(id,info,create_tim  
e,modify_time) VALUES('2','DIGOAL','2012-08-31 15:40:29','2012-08-31 15:40:29') | 2012-08-31 15:41:14.607253  
(2 rows)  
```  
目标站点表目前仍无记录 :   
```  
digoal=> select * from rmt_test ;  
 id | info | create_time | modify_time   
----+------+-------------+-------------  
(0 rows)  
```  
6\. 接下来要写个函数来处理sync_err_rec里面的错误记录, 必须按照create_time顺序处理.  
```  
create or replace function deal_sync_err_rec (i_dst_server text, i_dst_query text, i_id int8) returns boolean as $$  
declare  
  v_conn_name text := 'digoal';  -- 连接名  
  v_conn_status text;  -- 存储dblink_connect(v_conn_name, v_dst_server)的返回值  
  v_exec_status text;  -- 存储dblink_exec(v_conn_name, v_dst_query, true|false)的返回值.  
begin  
  -- 删除sync_err_rec中对应的记录.  
  delete from sync_err_rec where id=i_id;  
  if ( dblink_get_connections() @> ('{'||v_conn_name||'}')::text[] ) then   
  else  
    select * into v_conn_status from dblink_connect(v_conn_name, i_dst_server);  
  end if;  
  -- 这里使用的是true, 所以远程异常, 本地也异常. 确保到这一步还可以回退, 只要这一步执行成功, 那本地删除的sync_err_rec和远程都执行成功.  
  select * into v_exec_status from dblink_exec(v_conn_name, i_dst_query, true);  
  -- raise notice 'v_conn_status:%, v_exec_status:%.', v_conn_status, v_exec_status;  
  return true;  