### Attack Utilizing Intent Schemes and WebView Activities

The attack leverages an Intent scheme with Twitter's package name, exploiting the fact that Twitter's WebView activity lacks a title bar and other UI elements. This makes it easy to convert into a fake login page. The WebView activity is placed at the top of Twitter's task stack, ensuring that the fake login page is displayed when the app is launched.

To mask this state change, the script running in the Twitter WebView immediately sends a navigation request through the `googlechrome://` scheme (reserved by Chrome) to bring Chrome's WebView to the foreground. However, a WebView in Twitter will automatically close after issuing a scheme. Therefore, the attack webpage in the WebView must invoke another Twitter WebView instance with the attack link before it is terminated. In our attack, the infected WebView opens Twitter's scheme multiple times before triggering Chrome's scheme, placing several phishing pages on Twitter's task stack. When the user launches Twitter, they will see the phishing page, and if they press the back button, they will continue to see the same phishing page.

#### Remote Deep Phishing (RDP)

RDP occurs when Twitter is in the login state. After the user enters their credentials on the fake login page, the remote adversary instructs the infected WebView to switch to Twitter's main activity, making the process indistinguishable from a real login. All view switching happens almost instantly and is difficult for humans to notice, as demonstrated in our online video [1]. The entire attack is summarized in Figure 3.

### Faking UI: Facebook and Twitter Coordination

Unlike Twitter, Facebook has a URL bar on its activity, which discloses the source of the web content in its WebView, making it unsuitable for serving a phishing page. The remote adversary needs to find an accomplice app to work with the infected Facebook to fake its login page. In our research, we used the Twitter app for this purpose. We built an RDP where Chrome infects the Facebook app, and whenever Facebook is launched, it triggers Twitter to cover its interface. This coordinated attack allows the remote adversary to show a realistic-looking attack page.

Specifically, a Facebook WebView can be invoked using the `fb://` scheme. For example, the link `fb://webview/?url=http://www.attack.com` in Chrome, when clicked, brings Facebook to `http://www.attack.com`. Once infected, Facebook sends a `googlechrome://` scheme to switch back to Chrome's WebView without the user noticing. Our goal is to ensure that whenever Facebook is launched, it instantly infects and invokes a Twitter WebView to display a fake Facebook login UI. The script dispatched to the Facebook WebView runs a loop, continuously attempting to trigger the infected Twitter activity.

A Facebook WebView is suspended in the background, so the Intent scheme it tries to deliver to Twitter is initially blocked. However, once it gets to the foreground (after the user launches the app), the scheme is delivered, causing the Twitter phishing page to appear. If the user clicks the back button, the system rolls back to the infected Facebook WebView, which again fires Twitter to impersonate its official login view. Similar to the Twitter attack, after the user enters their password, the infected Twitter WebView launches Facebook's main activity, presenting the user's account information. This attack works smoothly, as summarized in Figure 4 and shown in our demo [1].

### Inviting for Hijacking: Using PicsArt

On the target device, if there are apps with activities running in standard mode, UI impersonation becomes easier. For the Facebook app, PicsArt, whose activity operates in standard mode, can become an accomplice. Once launched by Facebook, PicsArt's activity is added to Facebook's task stack, ensuring it always shows on top.

### Defense Mechanisms

Existing defense mechanisms, such as WindowGuard, which prompts a dialog and raises an alarm if a new activity is not initiated by the foreground app, are ineffective against our attacks. In our RDP attacks, all new activities are launched by a foreground app, and the order of background activities does not change. Our attacks are fundamentally different because they involve collusion between the impersonated app and the perpetrator, both infected by the attack web content and controlled by the same remote master.

### Remote Privilege Escalation

In addition to RDP, powerful XAWI (Cross-App WebView Interaction) attacks can escalate the adversary's privileges on a device. For example, the Amazon Appstore app can be exploited to silently install any third-party app without the owner's consent. The attack leverages the Appstore's WebView, whose JS interface provides the `IntentBridge` object for app installation. However, the WebView is closely guarded and does not expose any UI for navigating to non-Amazon domains. Additionally, the app forcefully affixes the domain `https://mas-ssr.amazon.com` to any URL its WebView visits, confining it to the Amazon domain.

We developed a coordinated attack starting from a Chrome browser running attack web content. The browser propagates the infection to the Amazon Shopping app, which then acquires control of the Amazon Appstore's WebView. Amazon Shopping serves as a stepping stone, allowing the attack content hosted by Chrome to issue an implicit or Intent scheme, which the Shopping app converts into a deep link. This new vulnerability was reported to Amazon.

Once the Shopping app is infected, its WebView can trigger a deep link to navigate the Amazon Appstore's WebView. To move the WebView to `attack.com`, we created a sub-domain `mas-ssr.amazon.com.attack.com`. The protection on the Appstore side fails to append the URL affix `https://mas-ssr.amazon.com/` and can be circumvented by a carefully crafted navigation request. As a result, `attack.com` gains control of all three apps and the privilege of silent app installation. The process is summarized in Figure 6.

### Stealthy Messaging

XAWI can also help the remote adversary exploit vulnerabilities that originally require a malicious app on the target device. For example, the Intent Spoofing attack requires on-device malware to send a crafted Intent to unprotected components. Using XAWI, the adversary can infect the WebView of a different app and command it to send the Intent. In our research, we found that Facebook Messenger has an activity `SecureIntentHandlerActivity` that sends a message upon receiving an Intent with the `fb-messenger-secure://` scheme. This activity is protected by the `FB_APP_COMMUNICATION` permission, only given to Facebook's products.

We found that the authorized Facebook app can serve as a stepping stone to deliver the message-sending Intent to Facebook Messenger. Facebook has a unique interface (`IntentUriHandler`) to interpret a Facebook deep link (called `applink`) and generate an Intent to trigger the Messenger app's protected activity. This interface can be exploited by a local adversary, which can send an Intent to activate `IntentUriHandler`.

However, exploiting this vulnerability remotely is more challenging. `IntentUriHandler` does not register any Intent filter for the `fbrpc://` scheme, so it cannot be accessed by both implicit and explicit (Intent) schemes supported by Chrome. To make the attack stealthy, the chatting UI of Facebook Messenger should be switched to the background after an unauthorized message is sent.

Our technique involves finding a stepping-stone app with the capability to issue a deep link and run in the background, such as Amazon Shopping. We utilized a Chrome WebView running attack scripts to spread the infection to a WebView instance in Amazon Shopping, which then issues a deep link directly to `IntentUriHandler` with an `applink fbrpc://` in its data field. This causes the Facebook app to send an Intent to the protected Facebook Messenger, leading to unauthorized messaging. During the attack, Amazon Appstore acts as the commander, automatically switching Chrome to the foreground as soon as it triggers `IntentUriHandler`.

Alternatively, we exploited a selector Intent weakness in `IntentUriHandler` to let Chrome directly talk to `IntentUriHandler`. Specifically, we found that `IntentUriHandler` registers an Intent filter for the `fb://` scheme, allowing us to construct a selector Intent scheme. This scheme, once triggered, causes Chrome to fire an Intent to `IntentUriHandler` based on `fb://`. When interpreting the Intent, the activity receives a `fbrpc://` URL, triggering the operations within `IntentUriHandler` to convert the URL into an Intent for Facebook Messenger, causing an unauthorized message to be sent. To hide the execution of Facebook Messenger, we utilized Twitter's WebView to coordinate the whole attack. The malicious web content in Chrome's WebView first infects Twitter's WebView, which then brings Chrome to the foreground to trigger the Facebook vulnerability. After the unauthorized message is sent, Twitter's WebView in the background again invokes Chrome to cover the Messenger app. The attack is summarized in Figure 8.

### Target Finding and Protection

In this section, we present ViewFinder, a technique for automatically discovering vulnerable apps, and an OS-level solution to mitigate the threat by controlling navigation requests across apps.

#### Automatic XAWI Analysis

Key to identifying a XAWI-susceptible app is determining whether any of its WebView instances is exposed to the public and can be invoked remotely through a URL (implicit, explicit schemes, or deep links). While such public activities can be found in an Android app's manifest, it is difficult to determine if they can be navigated to a domain given by the adversary. Static analysis alone is insufficient, and data flow analysis tools often fail to provide clues about the input that exploits the target vulnerability. Symbolic execution, while useful, is complicated, expensive, and prone to failure.

In our research, we developed a simple fuzzing system, ViewFinder, which scans apps for remotely-controllable WebView instances. This approach is efficient and effective in identifying vulnerable apps.