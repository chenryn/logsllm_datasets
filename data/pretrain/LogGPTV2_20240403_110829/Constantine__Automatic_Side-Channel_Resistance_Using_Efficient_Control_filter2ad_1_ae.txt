1.13x
0/1
1.12x
0/16
1.23x
0/54
1.05x
0/153
1.02x
0/52
0/24
1.01x
1.01x
0/18
0/41
1.02x
4/1084 1.14x
1.00x
0/14
1.24x
2/17
1.51x
0/6
1.02x
0/48
0/12
1.06x
0/18
1.18x
0/1080 1.97x
1.33x
0/2
3.45x
3/7
1.00x
0/1
2.66x
1/1
1.00x
0/2
4/4
1.87x
1.13x
0/59
1.07x
2/10
5.07x
0/39
1.09x
0/57
1.06x
0/7
1.01x
4/17
1.01x
0/40
0/97
1.04x
1.16x
-
1.68x
-
1.48x
-
1.02x
-
-
1.26x
reads
224/235
318/362
861/1005
776/1240
333/372
192/204
64/74
136/141
160/192
333/355
452/525
333/374
136/185
96/174
320/360
2402/2450
0/8
134/182
16/24
32/48
144/195
200/265
2574/2662
1/3
5/10
0/1
1/2
0/2
6/8
96/223
3/30
24/77
284/321
32/40
6/14
32/141
8/164
-
-
-
-
-
loops
0/1
0/1
0/3
0/1
0/1
-
-
-
-
0/1
0/6
0/2
0/1
0/7
0/6
0/6
0/4
0/6
24/28
-
0/2
0/1
-
1/2
0/5
0/2
0/2
0/5
4/6
0/5
0/3
0/12
0/2
0/1
1/1
0/8
0/28
-
-
-
-
-
des
seed
twofish
binsearch
dijkstra
findmax
histogram
matmul
rsort
aes
arc4
blowfish
cast
des3
aes_big
des_tab
SCE suite
Raccoon suite
pycrypto suite
Binsec/Rel suite
all programs
t camellia
c
-
p
p
a
p
y
r
c
g
b
i
l
n
o
o
c
c
a
r
o
t
p
y
r
c
y
p
des
loki91
e
R
/
B
avg
(geo)
variations of the profiling input set and random samples of the
remaining inputs. We found no visible variations.
Compilation Time. To measure Constantine-induced compi-
lation time, we applied our instrumentation to all the programs
in our datasets and report statistics in Table 1. The first four data
columns report the sensitive program points identified with taint-
based profiling over the randomly generated profiling input set.
For the SCE programs, we protect the key scheduling and encryp-
tion stages. For brevity, we report figures after cloning and after
secret-dependent pushing to nested flows (§4.2): the former affected
des3 and loki91, while the latter affected applied-crypto/des,
dijkstra, rsort, and tls-rempad-luk13. Interestingly, for 3way,
the LLVM optimizer already transformed out a secret-sensitive
branch that would be visible at the source level, while no leaky data
flows are present in it (consistently with [80]).
Across all 37 programs, the average dynamic analysis time for
taint tracking and loop profiling was 4s, with a peak of 31.6s on
libgcrypt/twofish (~1 C KLOC). For static analysis (i.e., points-
to), CFL/DFL transformations, and binary generation, the end-to-
end average time per benchmark was 1.4s, with a peak of 23s on
botan/twofish (567 C++ LOC). Our results confirm Constan-
tine’s instrumentation yields realistic compilation times.
Binary Size. Next, we study how our instrumentation impacts
the final binary size. Two design factors are at play: cloning for the
sake of accurate points-to information and DFL metadata inlining
to avoid run-time lookups for static storage. Compared to prior
solutions, however, we save instructions by avoiding loop unrolling.
During code generation, we leave the choice of inlining AVX
striding sequences to the compiler, suggesting it for single accesses
and for small stride sizes with the cmov-based method of Appen-
dix C—we observed lower run-time overhead from such choice.
When we use word-level striding (λ = 4), the binary size is typi-
cally smaller than for cache line-level striding (λ = 64), as the AVX
helpers for fast cache line accesses feature more complex logics.
As shown in Table 1, the average binary size increment on the
SCE suite is around 1.35x in our default configuration (λ = 64) and
1.22x for λ = 4. For des3, we observe 1.92-2.84x increases mainly
due to cloning combined with inlining. Smaller increases can be
noted for the two twofish variants, due to DFL helpers inlined
in the many sensitive read operations. The binary size increase
for all the other programs is below 2x. The Raccoon programs
see hardly noticeable differences with the exception of rsort, for
which we observe a 1.3x increase. We note similar peak values in
the two other suites, with a 1.37x increase for cast in pycrypto and
1.29x for aes_big and des_tab in Binsec/Rel. Our results confirm
Constantine’s instrumentation yields realistic binary sizes.
Run-time Performance. Finally, we study Constantine’s run-
time performance. To measure the slowdown induced by Constan-
tine on our benchmarks, we measured the time to run each instru-
mented program by means of CPU cycles with thread-accurate CPU
hardware counters (akin [80]). We repeated the experiments 1,000
times and report the mean normalized execution time compared
against the baseline. Table 1 presents our results.
Constantine’s default configuration produces realistic over-
heads across all our benchmarks, for instance with a geomean
overhead of 11% on the SCE suite and 33% on the Raccoon pro-
grams. These numbers only increase to 16% and 68% for word-level
protection. Our SCE suite numbers are comparable to those of SC-
Eliminator [80] and Soares et al. [62] (which we confirmed using the
artifacts publicly released with both papers, Appendix G), despite
Constantine offering much stronger compatibility (i.e., real-world
program support) and security (i.e., generic data-flow protection
and no decoy path side channels) guarantees. On the Raccoon test
suite, on the other hand, Raccoon reported two orders-of-magnitude
slowdowns (up to 432x) on a number of benchmarks, while Con-
stantine’s worst-case slowdown in its default configuration is only
1.84x, despite Constantine again providing stronger compatibility
and security guarantees (i.e., no decoy path side channels). Overall,
Constantine significantly outperforms state-of-the-art solutions
in the performance/security dimension on their own datasets, while
providing much better compatibility with real-world programs. For
the two other suites, we observe modest overheads with the ex-
ception of blowfish: its 3.17-5.07x slowdown originates in a hot
tight loop making four secret-dependent accesses on four very large
tables, a pathological case of leaky design for automatic repair.
7 CASE STUDY
The wolfSSL library is a portable SSL/TLS implementation written
in C and compliant with the FIPS 140-2 criteria from the U.S. gov-
ernment. It makes for a compelling case study for several reasons.
From a technical perspective, it is representative of the common
programming idioms in real-world programs and is a complex,
stress test for any constant-time programming solution (which, in
fact, none of the existing solutions can even partially support). As a
by-product, it also allows us to showcase the benefits of our design.
Session 3A: Side Channel CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea725Table 2: Characteristics and overheads for wolfSSL.
functions
binary size (KB)
exec cycles (M)
accessed objs/point
branches
loops
reads
writes
wolfSSL (W=4)
wolfSSL (W=1)
wolfSSL (const. time)
Constantine (W=1)
baseline
84
39
2.6
1
tainted
13
12
33
1
time (ms)
0.35
0.57
0.7
8
w/o cloning
84
135 (3.5x)
200 (77x)
6.29