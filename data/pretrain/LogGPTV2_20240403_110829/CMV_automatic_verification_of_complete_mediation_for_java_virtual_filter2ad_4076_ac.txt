need to mark M as bad if and whenever M(cid:48) is determined to
be bad. To do this, we place node M on the waiting queue of
M(cid:48), which is W Q(M(cid:48)) (note that W Q(M(cid:48)) contains method
names not nodes as is the case in case of the algorithm for
determining insecure path).
Further more, if M(cid:48) han an insecure path then there is a
path without a security check, in the expanded control graph
of M , from the entry node of M , passing through nodes of
CF G(M(cid:48)), to the successors of u. Thus we need to continue
the search beyond u for a bad path. Lastly, if u is a sensitive
operation then this implies that there is a bad path from the
entry node of M to u. In this case, we add the label bad to
summary(M ). In this case, we need to mark all the methods
waiting on M directly or transitively as bad. This is accom-
plished by the procedure M arkAsBad() which invokes pro-
cedure Compute W aiting. Compute W aiting(M ) (whose
code is not given) computes all the methods that are di-
rectly or transitively waiting on M by taking a union of all
methods in W Q(M ) and all the methods that are waiting
on the methods in W Q(M ) and so on. The soundness of the
algorithm is stated by the following lemma.
Initialze();
while Q (cid:54)= ∅ {
// same as in ﬁgure 3
Remove a node u from Q;
If bad(u.method) : Continue;
Perform one of the following steps based on type of u
u is a neutral node :
For each v in u.successors
If v.visited = f alse
v.visited := true, add v to Q;
u is a sensitive operation :
u is a method invocation to method M(cid:48) :
M arkAsBad(u);
If bad(M(cid:48))
M arkAsBad(u),
Continue;
Else add u.method to W Q(M(cid:48));
If insecure path(M(cid:48))
For each v in u.successors
If v.visited = f alse
u is a security check or a return node : Continue;}
v.visited := true, add v to Q;
Procedure M arkAsBad(u){
Z = Compute W aiting(u.method) ∪ {u.method};
For each M in Z
add bad to summary(M ),
set W Q(M ) to the empty set;}
Figure 4: Algorithm for computing bad summaries
Lemma 2:
1. For every node u placed on Q, there exists a path in
ECF G(u.method) from the entry node of u.method to
the u such that none of the nodes on the path (except-
ing u) is either a security check or a sensitive operation.
2. For any method M ,
bad is added to
summary(M ) iﬀ there is a path without any secu-
rity checks from the entry node of M to a sensitive
operation in ECF G(M ).
label
Complexity The complexity of the algorithm is linear in
the sum of the sizes of the control ﬂow graphs of all the
methods. To see this, observe that each node in the control
ﬂow graph of a method is added to Q at most once. Also
the sum of the sizes of W Q(M ) for all M is bounded by
the number of method invocation nodes in all the methods.
Also, each entry in W Q(M ) is processed at most once, that
is when the label bad is added to summary(M ). Thus, we
see that the complexity of the algorithm is linear in the sum
of the sizes of all the control ﬂow graphs.
Modiﬁcation to compute summaries on-the-ﬂy In the
above presentation of the approach, we ﬁrst execute the al-
gorithm that computes insecure path summaries for every
method and then execute the algorithm for identifying bad
public methods. However we can modify the approach so
that we ﬁrst invoke the algorithm for identifying bad public
methods, and during its execution, invoke the algorithm for
computing insecure path summaries for each method on a
demand driven basis. This modiﬁed approach avoids unnec-
essary checks for insecure paths.
A more detailed comparison to SLAM The Bebop model
106
checker [3] of the SLAM toolkit [4] is a general purpose
model checker for verifying temporal properties of binary
programs with procedures and has complexity linear in the
sum of sizes of the control ﬂow graphs of the methods. Be-
bop tracks the data values in addition to analyzing the con-
trol ﬂow graphs, while we only deal with control ﬂow graphs.
Bebop also computes summaries during the model checking
process in the form of summary edges. The summary edges
are associated with method invocation nodes, i.e., once for
each call. On the other hand, our summaries are associ-
ated with methods. Since the same method may be called
from multiple points, associating summaries with methods is
more eﬃcient. Further more, call nodes which are preceded
by security checks are never processed in our method.
Generating a witness If a method M is bad, then a wit-
ness for this can be computed by modifying the above algo-
rithm as follows. In this case, a path leading to a node per-
forming a sensitive operation is output as a compressed wit-
ness when such a node is reached in the search of CF G(M ).
This is achieved by maintaining a parent pointer with each
node u that points to the node from which u is visited
ﬁrst. The path leading to the node u from the entry node
of M is obtained by travesring along the parent pointers.
(Note that the length of such a path is bounded by the
size of the method M .) A similar witness is computed if
insecure path(M ) is true. In this case the witness is a path
starting with the entry node of M and ending with a return
node of M . We call these paths as compressed witnesses
since they may contain nodes which are method invocations.
If a method M(cid:48) is invoked at a node on a compressed wit-
ness, then it has to be the case that insecure path(M(cid:48)) is
true. For each such method M(cid:48), we would have generated
a similar compressed witness for M(cid:48) when its summary was
computed. Since only one compressed witness is necessary
for each method that is bad and one such witness for each
method that is has insecure path, the sum of the sizes of all
such compressed witnesses is only linear in the sum of the
sizes of all the methods. We can show that the complexity of
the resulting algorithm is still linear in the sum of the sizes
of all the methods. Using such compressed witnesses, an
actual witness path in the extended control ﬂow graph can
be generated; such a path can be of exponential length and
needs not be generated explicitly for debugging purposes.
(for
FilePermission) and checkConnect
Handling multiple permissions
So far we have only
dealt with the case of a single sensitive resource. However,
there are multiple sensitive resources in a JVM such as ﬁles
and network operations, and Java security checks (such as
(for
checkRead
SocketPermission)) corresponding to these resources. There-
fore we modify the summaries to store the security check
that was used to compute these summaries. In addition, if a
method summary includes a security check that we are not
currently looking for, we simply ignore this security check
node and treat it as a neutral node. For instance, if we are
checking the File resources, and encountering a method M
whose summary represents its paths that contain the Sock-
etPermission security check, then we treat any call to this
method as a neutral node.
4.
IMPLEMENTATION
Our implementation is based on bytecode analysis and
107
transformation using the Soot framework [28]. Bytecode
veriﬁcation has the advantage that it retains the high level
structure of the source code, while allowing us to directly
verify stock library bytecode as distributed by the software
vendors.
Identifying Sensitive operations. Our work in this pa-
per describes a technique that checks for the satisfaction of
the complete mediation property, when given a set of sen-
sitive operations and their corresponding security checks.
Identifying these sensitive operations in code is an orthog-
onal problem, that has been studied using techniques such
as speciﬁcation mining [1], and more recently, using concept
analysis [15].
Our experimental evaluation considered sensitive opera-
tions that were implemented as native methods. For in-
stance, in the HotSpot VM, such sensitive operations are
implemented diﬀerently for each OS platform, and we have
analyzed the implementation for the Linux and Solaris oper-
ating systems. We ﬁrst identiﬁed the set of native operations
directly from the type signatures of these methods. We fur-
ther manually examined the native code to these methods,
by looking at the C source code implementation, to ascer-
tain whether these perform sensitive operations such as sys-
tem calls. The above step completely identiﬁes all sensitive
operations that access resources that are managed by the
underlying operating systems.
However, there are other forms of sensitive resources that
are purely manged by the Java virtual machine. For in-
stance, any property such as java.vendor is a resource man-
aged internally in the JVM, and access to this resource re-
quires the corresponding java.util.PropertyPermission from
the calling context. For the purpose of analyzing code
that accesses these additional resources, our technique can
be augmented with speciﬁcation mining techniques such as
those described in [1, 15].
Filtering non-sensitive classes. For the sake of eﬃ-
ciency, we can exclude certain classes that do not handle
sensitive resources. For this purpose, we wrote a scanner
that inspects a class for the presence of the SecurityMan-
ager (or AccessController) or sensitive operations in any of
its methods.
If the above condition is not met, then the
scanner concludes that the class does not manage sensitive
resources, and therefore ﬁlters this class from the analysis.
The scanner works on the premise that most of the Java li-
brary code is correct, and this code can be used to identify
sensitive resources managed by it. Note that the ﬁltered
class may still call public methods of other classes that han-
dle sensitive resources; in this case, this class is similar to
an client application class from a veriﬁcation point of view.
One exception to the above scanning condition occurs in
the case of inner member classes. For instance, if class B is
a inner member class of class A, then we ignore class B only
if class A is being ignored.
Pruning the CFG for analysis For each method, we
ﬁrst construct its CFG, where each line of bytecode in
the method is a node in the CFG. Several pre-processing
pruning steps are done to the CFG before it is ana-
lyzed. The ﬁrst case concerns the paths that do not
need to be analyzed.
In every call to the SecurityMan-
ager, there is a check for the security manager being non-
null (as shown in the code examples in Figure 1). Since
the complete mediation property (Property 1), requires
that security manager be non-null, we delete the check-
Null edge (and therefore the path) that checks for the
SecurityManager being null before starting our analysis.
Privileged Operations Java allows a form of privilege es-
calation through the use of the doPrivileged {S} construct
where S is a code segment that performs privileged opera-
tions.
In this case, any security check performed inside S
only considers the code context since the doPrivileged com-
mand is executed. Since we are only checking the (trusted)
libraries, this means that the code context since the call to
the doPrivileged operation has all the permissions to per-
form sensitive operations inside S. Also any security checks
performed inside S cannot guarantee that sensitive opera-
tions, performed after S outside the scope of the doPrivileged
method, have the required permissions. Hence we can ignore
any security checks performed inside S. Thus, we handle the
above doPrivileged command by replacing it with an invo-
cation of a method M , whose body is S, and which is good
and is not all path secure.
Signiﬁcance of Context information Consider the in-
vocation of a public method M on an object O by the appli-
cation program. The object O must have been constructed
before this invocation of M by executing a constructor for
its class.
It is possible that this constructor method per-
formed a security check that involves the same permission
required for the currently requested sensitive operation. One
might be tempted to think that this SecurityManager check is
enough for performing sensitive operations inside M . How-
ever, in general, this is not correct. This is because the code
context inside M may be diﬀerent from the code context
when the security check was invoked inside the object con-
structor; for example, after constructing object O, the ap-
plication program may have invoked code from other code
sources that are active at the time when M was invoked
and hence at the time the sensitive operation was performed.
Thus any sensitive operation performed in the execution of a
public method M should be preceded by a security check be-
fore the operation, but after the invocation of the method M .
Our algorithm and the implementation have been designed
keeping in mind the signiﬁcance of this context information.
4.1 Other implementation issues
In this section, we discuss the limitations of our current
prototype implementation and we discuss concrete ideas for
improving the prototype to handle exceptions and method
overriding.
Exceptions Exceptions can trigger special paths, in the
program, resulting in additional paths from each method
call instruction to the nearest enclosing catch block or to
the caller. For handling exceptions, the standard control
ﬂow graph that we have needs to be modiﬁed in the follow-
ing ways. For each method call, additional edges need to be
created. An edge needs to be introduced from the method
call node to the catch block enclosing the call node, if such
a block exists. Furthermore, an edge is introduced from the
method invocation node to a new return node that returns
to the calling method of the current procedure being ana-
lyzed. This is to model an exception not handled by the
enclosing catch block. Similarly, for any throw statement
node enclosed in a try block, we add a new edge to the en-
closing catch block. Also, if there are any rethrow nodes in
the enclosing catch block, we will replace that node by a
return node.
Once these additional edges are introduced, then our origi-
nal method for computing summaries to identify risky meth-
ods will still be applicable.
Method Overriding Recall that a method of a base class
can be overridden by the corresponding method of a sub-
class. The choice of this method is based on the object’s
type, which is only available at runtime. We propose a sim-
ple transformation to the method of the base class. Specif-
ically, let us say M is the method of the base class being
overloaded, and M1, M2, . . ., Mn are overloading meth-
ods in subclasses. Then we can transform the code of M
by adding the n-way non-deterministic branch statement at
the start of the body of M , that makes a call to each one
of these overriding methods. Once this branch statement is
introduced, our original method for computing summaries
will still be applicable in the presence of method overriding.
Making the above transformations to the methods and
CFGs are simple and straightforward, which will be incor-
porated in a subsequent version of our prototype.
In the
following section, we present the experimental results ob-
tained with the current prototype.
5. EXPERIMENTAL EVALUATION
In this section, we present our the results of the exper-
iments that were performed with CMV. Most of CMV is
written in Java code using the API provided by Soot, while
some of the support scripts used in it are written in Perl.
Experimental Setup Two commercial oﬀ-the-shelf Java
VMs were experimented in our veriﬁcation eﬀort using
CMV. They are the HotSpot JVM, distributed by SUN
Microsystems, and the Harmony VM, an open-source JVM
produced by Apache Foundation. While the former is the
most popular JVM implementation, the latter is being used
in several industrial strength projects by the Apache Foun-
dation. Veriﬁcation eﬀorts on these VMs therefore beneﬁt
several million end-users of these VMs. We veriﬁed the in-
put output and network (java.io and java.net) subsystems,
and the Class class in java.lang subsystem on both these
VMs. These subsystems have several classes, and several
hundreds of methods.
The methodology employed in our experiment was as fol-
lows: We run CMV on a class, which in turn calls Soot
to analyze the class in whole program mode, which enables
analysis of all methods called by methods of this class. The
results of this analysis are summarized in a table, which is
consulted when analyzing other classes and methods sub-
sequently. The results were taken on a machine running
Ubuntu distribution of GNU / Linux, on a machine run-
ning the AMD Athlon processor 2Ghz processor with 2GB
physical memory.
Results Figure 5 gives the set of results for the HotSpot
VM, and Figure 6 for Harmony VM. The second column
identiﬁes the package that the class reported in the ﬁrst
column belongs to. The third column gives the number of
methods deﬁned in the class. The fourth column reports
the number of concrete methods (i.e. non-abstract and non-
native methods). This is the number of methods in this class
108
(2)
(1)
Java
JVM
package
class
java.io
File
java.io
FileInputStream
java.io
FileOutputStream
ObjectInputStream
java.io
ObjectOutputStream java.io
java.io
RandomAccessFile
java.net
Authenticator
CookieHandler
java.net
java.net
DatagramSocket
java.net
HttpURLConnection
java.net
InetAddress
java.net
MulticastSocket
java.net
NetworkInterface
ProxySelector
java.net
java.net
ResponseCache
java.net
ServerSocket