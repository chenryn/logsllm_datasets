判断是否为DML，DSL的请求，如果是则    
rewrite query    
generate path    
generate plan    
jit (可选)    
execute plan    
如果是绑定变量的请求：    
bind parameter    
execute prepared statement    
4、如何查看SQL的执行计划。    
对于历史SQL，使用auto_explain插件，记录超过指定执行时间的SQL的执行计划，通过查看LOG日志可以看到历史SQL的执行计划。    
使用explain，可以查看当前SQL的执行计划。    
5、如何在plpgsql存储过程或函数中创建函数。    
使用execute 'SQL string'动态调用的方法，可以在函数中创建函数。例如    
```    
postgres=# create or replace function f_test() returns void as $$    
declare    
begin    
  execute format($_$create or replace function f_test1() returns void as $__$ declare begin raise notice 'test'; end; $__$ language plpgsql strict;$_$);    
end;    
$$ language plpgsql strict;    
CREATE FUNCTION    
postgres=# \df f_test1    
                       List of functions    
 Schema | Name | Result data type | Argument data types | Type    
--------+------+------------------+---------------------+------    
(0 rows)    
postgres=# select f_test();    
 f_test    
--------    
(1 row)    
postgres=# \df f_test1    
                        List of functions    
 Schema |  Name   | Result data type | Argument data types | Type    
--------+---------+------------------+---------------------+------    
 public | f_test1 | void             |                     | func    
(1 row)    
postgres=# \sf+ f_test1    
        CREATE OR REPLACE FUNCTION public.f_test1()    
         RETURNS void    
         LANGUAGE plpgsql    
         STRICT    
1       AS $function$ declare begin raise notice 'test'; end; $function$    
postgres=# select f_test1();    
NOTICE:  test    
 f_test1    
---------    
(1 row)    
```    
6、如何修改数据库ACL    
通过数据库pg_hba.conf配置文件，配置数据库访问链路ACL。    
7、postgresql.auto.conf与postgresql.conf的区别？    
postgresql.auto.conf是数据库alter system动态修改数据库参数的配置文件，alter system配置的参数会写入postgresql.auto.conf，优先级高于postgresql.conf    
扩展问题    
为什么postgresql.auto.conf优先级高于?    
因为先加载postgresql.conf后加载postgresql.auto.conf，后加载的覆盖了先加载的参数。    
如何配置了多个重名的参数，哪个为准？    
后加载的覆盖先加载的参数。    
参数配置的地方，以及优先级：    
[《PostgreSQL 参数优先级讲解》](../201901/20190130_03.md)    
8、PostgreSQL如何防止绑定变量的执行计划倾斜。    
数据库前5次执行计划都是custom plan，即每一次都要generate path，generate plan，并记录下custom plan的平均成本，以及customplan发生的次数。第五次后会生成generic plan，当有新的bind时，先使用generic plan计算新的bind 的cost，如果cost比custom plan的平均成本相差较大（代码内写死相差的比例），则会发起新的custom plan，并且统计到custom plan的平均COST和计数中。    
如果成本相差不大，则继续使用generic plan.    
通过以上方法防止倾斜。    
[《PostgreSQL 11 preview - 增加强制custom plan GUC开关(plancache_mode)，对付倾斜》](../201803/20180325_06.md)    
[《PostgreSQL plan cache 源码浅析 - 如何确保不会计划倾斜》](../201606/20160617_01.md)    
![pic](20180121_01_pic_020.jpg)    
### 12 20190515期天天象上(温州-索易软件提供赞助)    
报名人数：50    
重要议题1：PostgreSQL 社区生态建设、工作汇报    
重要议题2：PostgreSQL 常用架构介绍    
重要议题3：阿里云PG产品线生态介绍    
重要议题4：阿里云POLARDB V2.0 for PostgreSQL、Oracle介绍    
重要议题5：阿里云ADAM+PPAS 去O方法论，Oracle迁移上云实践。    
重要议题6：PostgreSQL 原理    
重要议题7：PostgreSQL 优化技巧    
重要议题8：企业辩论赛。    
参会企业：索易软件、温州大学、温州联通、文章数勘察测绘研究院、温州科技学院、温州易天、温州达古科技有限公司、温州老年病医院、。。。等。    
![pic](20180121_01_pic_021.jpg)    
### 13 20190525期天天象上(杭州-阿里巴巴创新中心，神鲸空间)    
报名人数：80    
重要议题1：《PostgreSQL 生态与社区工作汇报》    
重要议题2：《PPAS + ADAM Oracle 迁移上云》    
重要议题3：《PostgreSQL 数据库优化实践》    
重要议题4：《阿里云POLARDB for PostgreSQL|Oracle 产品演进》    
重要议题5：《阿里云自研数据库POLARDB内核技术解读》    
重要议题6：《POLARDB 的DBA法宝 - AAS性能洞察》    
重要议题7：《云数据库时空引擎Ganos》    
重要议题8：企业数据库辩论赛。    
参会企业：电信、海康、武汉商学院、浪沙、海量、支付宝、阿里、壹网、vastdata、微软、大搜车、正泰、点我达、软通动力、朗新、曹操专车、杭州地铁、亚信、悠可、佰安、同花顺、博彦、数蜂、。。。等。    
企业辩论赛回顾：    
1、Q PostgreSQL有哪些锁    
A    
https://www.postgresql.org/docs/12/explicit-locking.html    
2、Q PostgreSQL 有哪几种改参数的方法    
A    
```    
alter system|user|role|database ...    
postgresql.conf    
postmaster启动参数    
set local 事务级参数    
set 会话级参数    
client 连接时带的客户端参数    
```    
3、Q PostgreSQL 如何强制设置SQL并行度    
A    
[《PostgreSQL 11 并行计算算法，参数，强制并行度设置》](../201812/20181218_01.md)    
4、Q PG 还有哪些改进点    
A    
MVCC 机制，PG 12 已支持AM接口，可以支持更多存储引擎，例如ZHEAP（垃圾版本记录在UNDO文件中，但是事务信息还是在CLOG中，所以还是需要修改hintbit或freeze释放CLOG，否则CLOG会很大）。    
分区表很多时性能会下降，PG 12已经改进，1000个分区时，QPS依旧可以达到50万以上。    
目前存储引擎支持较少，PG 12 已支持AM接口，接口化之后，会支持更多存储引擎。    
5、Q REDO/wal 文件突然暴涨，可能有哪些原因    
A    
检查点太频繁（例如checkpointe timeout, checkpoint segments, max_wal_size太小）， 并且开启了full page write， 同时写入或更新较多， 导致wal中大量full page产生。   
产生了大量写操作    
使用了SLOT，并且这个SLOT对应的接收端（比如从节点）挂了，SLOT位点不动，或者动的慢，导致REDO堆积    
VACUUM FREEZE大表， 或者事务消耗太频繁而且更新多， 并且freeze阈值很小， 导致频繁freeze产生大量日志。       
max wal size设置很大，CHECKPOINT周期设置很长    
wal_keep_segments设置很大    
archive归档由外部程序完成，但是未及时修改archive_status的archive_name.ready为done，导致不清理    
开启了归档， 但是arch command零食设置为空或归档失败, 导致不清理.   
6、Q 表膨胀，可能有哪些原因    
A    
频繁修改，并且关闭了自动垃圾回收    
频繁修改，并且hot_standby开启了feedback，并且hot_standby有慢事务，这些事务后产生的垃圾（老版本）无法被回收，因为可能这些更早的事务要访问这些老版本。    
频繁修改，并且有长事务，很久未结束的2PC事务，慢SQL等。    
频繁修改，并且关闭了自动垃圾回收参数。    
频繁修改，并且这个表关闭了自动垃圾回收，或者垃圾回收的阈值设置的较大。    
7、Q PG连接池有哪些改进点    