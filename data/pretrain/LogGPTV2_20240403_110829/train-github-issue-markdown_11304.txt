When using `np.frombuffer` or `np.ndarray(..., buffer=...)`, the object
supporting the buffer interface is passed through unchanged. However, this
makes it tricky for the base object to know if it's still being in use.
`mmap.mmap` keeps a count of `exports`, and will refuse to close if the
internal buffer is in use somewhere. Since `numpy` doesn't store this as a
`memoryview`, the export count isn't incremented and can result in a segfault:
    In [1]: import mmap, numpy as np
    In [2]: buffer = mmap.mmap(-1, 100)
    In [3]: x = np.frombuffer(buffer, dtype='i1')
    In [4]: x[:5]
    Out[4]: array([0, 0, 0, 0, 0], dtype=int8)
    In [5]: buffer.close()  # close the buffer
    In [6]: x[:5]
    Out[6]: Segmentation fault: 11
If stored as a `memoryview`:
    In [1]: import mmap, numpy as np
    In [2]: buffer = mmap.mmap(-1, 100)
    In [3]: x = np.frombuffer(memoryview(buffer), dtype='i1')
    In [4]: x[:5]
    Out[4]: array([0, 0, 0, 0, 0], dtype=int8)
    In [5]: x.base
    Out[5]: 
    In [6]: buffer.close()
    ---------------------------------------------------------------------------
    BufferError                               Traceback (most recent call last)
     in ()
    ----> 1 buffer.close()
    BufferError: cannot close exported pointers exist
This affects `np.memmap` as well, but since `np.memmap` manages its own `mmap`
object, closing that could be considered bad behavior.