title:Tamper-Resistant, Application-Aware Blocking of Malicious Network
Connections
author:Abhinav Srivastava and
Jonathon T. Giffin
Tamper-Resistant, Application-Aware Blocking
of Malicious Network Connections
Abhinav Srivastava and Jonathon Giﬃn
School of Computer Science, Georgia Institute of Technology
{abhinav,giffin}@cc.gatech.edu
Abstract. Application-level ﬁrewalls block traﬃc based on the process
that is sending or receiving the network ﬂow. They help detect bots,
worms, and backdoors that send or receive malicious packets without
the knowledge of users. Recent attacks show that these ﬁrewalls can
be disabled by knowledgeable attackers. To counter this threat, we de-
velop VMwall, a ﬁne-grained tamper-resistant process-oriented ﬁrewall.
VMwall’s design blends the process knowledge of application-level ﬁre-
walls with the isolation of traditional stand-alone ﬁrewalls. VMwall uses
the Xen hypervisor to provide protection from malware, and it correlates
TCP or UDP traﬃc with process information using virtual machine in-
trospection. Experiments show that VMwall successfully blocks numer-
ous real attacks—bots, worms, and backdoors—against a Linux system
while allowing all legitimate network ﬂows. VMwall is performant, im-
posing only a 0–1 millisecond delay on TCP connection establishment,
less than a millisecond delay on UDP connections, and a 1–7% slowdown
on network-bound applications. Our attack analysis argues that with the
use of appropriate external protection of guest kernels, VMwall’s intro-
spection remains robust and helps identify malicious traﬃc.
Keywords: Firewall, virtual machine introspection, attack prevention.
1 Introduction
Application-level ﬁrewalls are an important component of a computer system’s
layered defenses. They ﬁlter inbound and outbound network packets based on
an access policy that includes lists of processes allowed to make network con-
nections. This ﬁne-grained ﬁltering is possible because application-level ﬁrewalls
have a complete view of the system on which they execute. In contrast, network-
or host-level ﬁrewalls provide coarse-grained ﬁltering using ports and IP ad-
dresses. Application-level ﬁrewalls help detect and block malicious processes,
such as bots, worms, backdoors, adware, and spyware, that try to send or re-
ceive network ﬂows in violation of the ﬁne-grained policies. To be successful,
these ﬁrewalls must be fast, mediate all network traﬃc, and accurately identify
executing processes.
The conventional design of application-level ﬁrewalls has a deﬁciency that may
prevent ﬁltering of malicious traﬃc. The architectures pass packet information
R. Lippmann, E. Kirda, and A. Trachtenberg (Eds.): RAID 2008, LNCS 5230, pp. 39–58, 2008.
c(cid:2) Springer-Verlag Berlin Heidelberg 2008
40
A. Srivastava and J. Giﬃn
from a kernel-level network tap up to a user-level ﬁrewall process that executes
alongside malicious software. The ﬁrewall is both performant and able to identify
the processes attached to a network ﬂow, but it is exposed to direct attack by
any malicious software aware of the ﬁrewall. Baliga et al. [1] demonstrated the
ease of such attacks by manipulating the netﬁlter framework inside the Linux
kernel to remove the hooks to packet ﬁltering functions. Similarly, attackers can
disable the Windows Firewall by halting particular services normally running on
the system. Once the ﬁrewall fails, then all network traﬃc will be unmediated
and the malware can send and receive data at will.
An alternative design isolates ﬁrewalls from vulnerable systems to gain protec-
tion from direct attack. Virtual machines allow construction of ﬁrewall appliances
that execute outside of operating systems under attack. Such ﬁrewalls dispense
with application-level knowledge and ﬁlter inbound and outbound packets us-
ing coarse-grained rules over IP addresses and port numbers. Attacks can easily
evade these ﬁrewalls by using allowed ports directly or via tunneling.
This paper leverages the beneﬁts of both application-level ﬁrewalls and vir-
tual machine isolation to develop tamper-resistant application-oriented ﬁrewalls.
Such a ﬁrewall needs good visibility of the system so that it can correlate net-
work ﬂows with processes, but it also needs strong isolation from any user-level
or kernel-level malware that may be present. We architect an application-level
ﬁrewall resistant to direct attack from malicious software on the system. Our
design isolates the application-level ﬁrewall in a trusted virtual machine (VM)
and relies on the hypervisor to limit the attack surface between any untrusted
VM running malware and the trusted VM. Our ﬁrewall, executing in the trusted
VM, becomes an application-level ﬁrewall by using virtual machine introspec-
tion (VMI) [10] to identify the process in another VM that is connected to a
suspicious network ﬂow.
Our prototype implementation, VMwall, uses the Xen [2] hypervisor to remain
isolated from malicious software. VMwall executes entirely within Xen’s trusted
virtual machine dom0; it operates with both paravirtualized and fully virtualized
domains. A dom0 kernel component intercepts network connections to and from
untrusted virtual machines. A user-space process performs introspection to cor-
relate each ﬂow to a sending or receiving process, and it then uses a predeﬁned
security policy to decide whether the connection should be allowed or blocked.
Policies are straightforward whitelists of known software in the untrusted VM
allowed to communicate over the network. To correlate network ﬂows with pro-
cesses, VMwall’s user-space component maps the untrusted operating system’s
kernel memory into its own address space and uses programmed knowledge of
kernel data structures to extract the identity of the process attached to the ﬂow.
VMwall is eﬀective at identifying and blocking malicious network connections
without imposing signiﬁcant performance degradation upon network traﬃc. Us-
ing a Linux system and a collection of known attacks that either send or re-
ceive network traﬃc, we show that VMwall identiﬁes all malicious connections
immediately when the ﬁrst packet is sent or received. In particular, VMwall
blocked 100% of the malicious connections when tested against bots, worms,
Tamper-Resistant, Application-Aware Blocking of Malicious Network
41
and backdoors, and it correctly allowed all legitimate network traﬃc. In our
design, VMwall only performs introspection for the ﬁrst packet of a new con-
nection, so network performance remains high. Our tool adds only about 0–1
milliseconds of overhead to the ﬁrst packet of a session. This is a latency cost to
network connection creation that will not impact the subsequent data transfer
of legitimate connections.
VMwall looks into the state of the untrusted operating system’s memory to
ﬁnd the process bound to a network connection. The system monitors network
ﬂows, and it is not an intrustion detection system designed to detect an attack
against the OS. Hence, an attacker may try to evade VMwall either by hijacking
a process or by subverting the inspected kernel data structures. In Sect. 6.4, we
study this problem, provide an in-depth security analysis of VMwall, and suggest
appropriate measures to thwart these attacks.
We believe that our tamper-resistant application-oriented ﬁrewall represents
an appropriate use of virtualization technology for improved system security. We
feel that our paper provides the following contributions:
– Correlation between network ﬂows and processes from outside the virtual
machine (Sect. 4).
wall (Sect. 5).
– VMwall, an implementation of a tamper-resistant application-oriented ﬁre-
– Evidence that application-aware ﬁrewalls outside the untrusted virtual ma-
chine can block malicious network connections successfully while maintaining
network performance (Sect. 6).
2 Related Work
Prior research has contributed to the development of conventional host-based
ﬁrewalls. Mogul et al. [21] developed a kernel-resident packet ﬁlter for UNIX
that gave user processes ﬂexibility in selecting legitimate packets. Venema [29]
designed a utility to monitor and control incoming network traﬃc. These tra-
ditional ﬁrewalls performed ﬁltering based on restrictions inherent in network
topology and assumed that all parties inside the network were trusted. As part
of the security architecture of the computer system, they resided in kernel-space
and user-space, and hence were vulnerable to direct attack by malicious software.
Administration of ﬁrewalls can be cumbersome, and distributed ﬁrewalls have
been proposed to ease the burden [3,15]. In distributed ﬁrewalls, an administra-
tor manages security policies centrally but pushes enforcement of these policies
out to the individual hosts. Although we have not implemented support for dis-
tributed management, we expect VMwall to easily ﬁt into this scheme. VMwall
policies dictate which processes can legitimately make use of network resources.
In a managed environment where administrators are knowledgeable of the soft-
ware running on the machines in the local network, preparing and distributing
VMwall policies from a central location may be an appealing solution.
42
A. Srivastava and J. Giﬃn
The recent support for virtual machines by commodity hardware has driven
development of new security services deployed with the assistance of VMs [27,
9, 30]. Garﬁnkel et al. [11] showed the feasibility of implementing distributed
network-level ﬁrewalls using virtual machines. In another work [10], they pro-
posed an intrusion detection system design using virtual machine introspection
of an untrusted VM. VMwall applies virtual machine introspection to a diﬀerent
problem, using it to correlate network ﬂows with the local processes bound to
those ﬂows.
Other research used virtual machines for malware detection. Borders et al. [4]
designed a system, Siren, that detected malware running within a virtual ma-
chine. Yin et al. [33] proposed a system to detect and analyze privacy-breaching
malware using taint analysis. Jiang et al. [17] presented an out-of-the-box VMM-
based malware detection system. Their proposed technique constructed the inter-
nal semantic views of a VM from an external vantage point. In another work [16],
they proposed a monitoring tool that observes a virtual machine based honey-
pot’s internal state from outside the honeypot. As a pleasant side-eﬀect of mali-
cious network ﬂow detection and process correlation, VMwall can often identify
processes in the untrusted system that comprise portions of an attack.
Previous research has developed protection strategies for diﬀerent types of
hardware-level resources in the virtualized environment. Xu et al. [32] proposed
a VMM-based usage control model to protect the integrity of kernel memory.
Ta-Min et al. [28] proposed a hypervisor based system that allowed applications
to partition their system call interface into trusted and untrusted components.
VMwall, in contrast, protects network resources from attack by malware that
runs inside the untrusted virtual machine by blocking the illegitimate network
connections attempts.
These previous hypervisor-based security applications generally take either
a network-centric or host-centric view. Our work tries to correlate activity at
both levels. VMwall monitors network connections but additionally peers into
the state of the running, untrusted operating system to make its judgments
about each connection’s validity. Moreover, VMwall easily scales to collections
of virtual machines on a single physical host. A single instance of VMwall can
act as an application-level ﬁrewall for an entire network of VMs.
3 Overview
We begin with preliminaries. Section 3.1 explains our threat model, which as-
sumes that attackers have the ability to execute the real-world attacks infecting
widespread computer systems today. Section 3.2 provides a brief overview of
Xen-based virtual machine architectures and methods allowing inspection of a
running VM’s state.
3.1 Threat Model
We assume that attackers have abilities commonly displayed by real-world at-
tacks against commodity computer systems. Attackers can gain superuser priv-
Tamper-Resistant, Application-Aware Blocking of Malicious Network
43
ilege from remote. Attackers are external and have no physical access to the
attacked computers, but they may install malicious software on a victim system
by exploiting a software vulnerability in an application or operating system or
by enticing unsuspecting users to install the malware themselves. The software
exploit or the user often executes with full system privileges, so the malware
may perform administrative actions such as kernel module or driver installation.
Hence, malicious code may execute at both user and kernel levels. For ease of
explanation, we initially describe VMwall’s architecture in Sect. 4 under the as-
sumption that kernel data structure integrity is maintained. This assumption
is not valid in our threat model, and Sect. 6.4 revisits this point to describe
technical solutions ensuring that the assumption holds.
The installed malware may periodically make or receive network connections.
Many examples exist. Bots make network connections to a command and con-
trol channel to advertise their presence and receive instruction, and they send
bulk network traﬃc such as denial-of-service packets and email spam. Spyware
programs collect information, such as keystrokes and mouse clicks, and then
transmit the conﬁdential data across a network to the attacker. Worms may
generate network connections to scan the network in search of additional vic-
tims suitable for infection. Backdoors open holes in machines by listening for
incoming connections from the attacker. One common feature of these diﬀerent
classes of attacks is their interest in the network.
In a typical system, malware can directly aﬀect an application-level ﬁrewall’s
execution. The architecture of these malware instances frequently combines a
user-level application performing network activity with a kernel-level module
that hides the application from the view of host-level security software. The
malicious application, likely running with full system privileges, may halt the
execution of the ﬁrewall. Similarly, the malicious kernel component may alter
the hooks used by an in-kernel module supporting the user-level ﬁrewall so that
the ﬁrewall is simply never invoked as data passes to and from the network. Con-
ventional application-level ﬁrewalls fail under these direct attacks. Our goal is to
develop a system that withstands direct attack from malware at the application
layer or the kernel layer.
Our system has requirements for correct execution. As with all requirements,
an attacker who is able to violate any requirement is likely able to escape de-
tection. Our two requirements of note center on basic expectations for the in-
memory data structures used by the kernel that may be infected by an attack.
First, we expect to be able to ﬁnd the head of linked data structures, often
by extracting a kernel symbol value at boot time. An attacker could conceivably
cause our ﬁrewall to inspect the incorrect kernel information by replicating the
data structure elsewhere in kernel memory and by altering all code references to
the original structure to instead refer to the new structure. Our ﬁrewall would
then analyze stale data. It is not immediately clear that such an attack is plausi-
ble; moreover, our tool could periodically verify that code references to the data
match the symbol value extracted at boot.
44
A. Srivastava and J. Giﬃn
Dom0 Virtual Machine
DomU Virtual Machine
Dom0 VM
User Space
Kernel Space
Bridge
User Space
Kernel Space
User Space
Kernel Space
Bridge
DomU VM
User Space
Kernel Space
NIC
Driver
VNI
Backend
I/O Channel
VNI