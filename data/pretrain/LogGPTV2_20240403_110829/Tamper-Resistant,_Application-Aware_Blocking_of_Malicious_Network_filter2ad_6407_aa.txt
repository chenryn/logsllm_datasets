# Tamper-Resistant, Application-Aware Blocking of Malicious Network Connections

## Authors
Abhinav Srivastava and Jonathon T. Giffin  
School of Computer Science, Georgia Institute of Technology  
{abhinav, giffin}@cc.gatech.edu

## Abstract
Application-level firewalls block traffic based on the process that is sending or receiving the network flow. They help detect bots, worms, and backdoors that send or receive malicious packets without the user's knowledge. Recent attacks have shown that these firewalls can be disabled by knowledgeable attackers. To counter this threat, we developed VMwall, a fine-grained, tamper-resistant, process-oriented firewall. VMwall combines the process awareness of application-level firewalls with the isolation of traditional standalone firewalls. It uses the Xen hypervisor to protect against malware and correlates TCP or UDP traffic with process information using virtual machine introspection. Experiments show that VMwall successfully blocks numerous real attacks—bots, worms, and backdoors—against a Linux system while allowing all legitimate network flows. VMwall imposes minimal performance overhead, adding only 0–1 millisecond delay on TCP connection establishment, less than a millisecond delay on UDP connections, and a 1–7% slowdown on network-bound applications. Our analysis suggests that with appropriate external protection of guest kernels, VMwall’s introspection remains robust and helps identify malicious traffic.

**Keywords:** Firewall, virtual machine introspection, attack prevention.

## 1. Introduction
Application-level firewalls are a critical component of a computer system's layered defenses. They filter inbound and outbound network packets based on an access policy that includes lists of processes allowed to make network connections. This fine-grained filtering is possible because application-level firewalls have a complete view of the system on which they execute. In contrast, network- or host-level firewalls provide coarse-grained filtering using ports and IP addresses. Application-level firewalls help detect and block malicious processes, such as bots, worms, backdoors, adware, and spyware, that try to send or receive network flows in violation of the fine-grained policies. To be effective, these firewalls must be fast, mediate all network traffic, and accurately identify executing processes.

However, the conventional design of application-level firewalls has a significant flaw: they pass packet information from a kernel-level network tap up to a user-level firewall process that executes alongside potentially malicious software. While this design is performant and allows the firewall to identify the processes attached to a network flow, it exposes the firewall to direct attack by any malicious software aware of its presence. For example, Baliga et al. [1] demonstrated how easy it is to disable the netfilter framework inside the Linux kernel, thereby removing the hooks to packet filtering functions. Similarly, attackers can disable the Windows Firewall by halting specific services. Once the firewall is compromised, all network traffic will be unmediated, and the malware can send and receive data at will.

An alternative design isolates firewalls from vulnerable systems to gain protection from direct attack. Virtual machines allow the construction of firewall appliances that execute outside of the operating systems under attack. However, such firewalls lack application-level knowledge and filter inbound and outbound packets using coarse-grained rules over IP addresses and port numbers. Attacks can easily evade these firewalls by using allowed ports directly or via tunneling.

This paper leverages the benefits of both application-level firewalls and virtual machine isolation to develop tamper-resistant, application-oriented firewalls. Such a firewall needs good visibility of the system to correlate network flows with processes but also requires strong isolation from any user-level or kernel-level malware. We designed an application-level firewall that is resistant to direct attack from malicious software on the system. Our design isolates the application-level firewall in a trusted virtual machine (VM) and relies on the hypervisor to limit the attack surface between any untrusted VM running malware and the trusted VM. The firewall, executing in the trusted VM, becomes an application-level firewall by using virtual machine introspection (VMI) [10] to identify the process in another VM that is connected to a suspicious network flow.

Our prototype implementation, VMwall, uses the Xen [2] hypervisor to remain isolated from malicious software. VMwall executes entirely within Xen’s trusted virtual machine dom0 and operates with both paravirtualized and fully virtualized domains. A dom0 kernel component intercepts network connections to and from untrusted virtual machines. A user-space process performs introspection to correlate each flow to a sending or receiving process and then uses a predefined security policy to decide whether the connection should be allowed or blocked. Policies are straightforward whitelists of known software in the untrusted VM allowed to communicate over the network. To correlate network flows with processes, VMwall’s user-space component maps the untrusted operating system’s kernel memory into its own address space and uses programmed knowledge of kernel data structures to extract the identity of the process attached to the flow.

VMwall is effective at identifying and blocking malicious network connections without imposing significant performance degradation on network traffic. Using a Linux system and a collection of known attacks that either send or receive network traffic, we show that VMwall identifies all malicious connections immediately when the first packet is sent or received. Specifically, VMwall blocked 100% of the malicious connections when tested against bots, worms, and backdoors, and it correctly allowed all legitimate network traffic. In our design, VMwall only performs introspection for the first packet of a new connection, so network performance remains high. Our tool adds only about 0–1 milliseconds of overhead to the first packet of a session, which is a latency cost to network connection creation that does not impact the subsequent data transfer of legitimate connections.

VMwall looks into the state of the untrusted operating system’s memory to find the process bound to a network connection. The system monitors network flows and is not an intrusion detection system designed to detect an attack against the OS. An attacker may try to evade VMwall either by hijacking a process or by subverting the inspected kernel data structures. In Section 6.4, we study this problem, provide an in-depth security analysis of VMwall, and suggest appropriate measures to thwart these attacks.

We believe that our tamper-resistant, application-oriented firewall represents an appropriate use of virtualization technology for improved system security. Our contributions include:
- Correlation between network flows and processes from outside the virtual machine (Section 4).
- VMwall, an implementation of a tamper-resistant, application-oriented firewall (Section 5).
- Evidence that application-aware firewalls outside the untrusted virtual machine can block malicious network connections successfully while maintaining network performance (Section 6).

## 2. Related Work
Prior research has contributed to the development of conventional host-based firewalls. Mogul et al. [21] developed a kernel-resident packet filter for UNIX that gave user processes flexibility in selecting legitimate packets. Venema [29] designed a utility to monitor and control incoming network traffic. These traditional firewalls performed filtering based on restrictions inherent in network topology and assumed that all parties inside the network were trusted. As part of the security architecture of the computer system, they resided in kernel-space and user-space, making them vulnerable to direct attack by malicious software. Administration of firewalls can be cumbersome, and distributed firewalls have been proposed to ease the burden [3, 15]. In distributed firewalls, an administrator manages security policies centrally but pushes enforcement of these policies out to individual hosts. Although we have not implemented support for distributed management, we expect VMwall to easily fit into this scheme. VMwall policies dictate which processes can legitimately make use of network resources. In a managed environment where administrators are knowledgeable of the software running on the machines in the local network, preparing and distributing VMwall policies from a central location may be an appealing solution.

The recent support for virtual machines by commodity hardware has driven the development of new security services deployed with the assistance of VMs [27, 9, 30]. Garfinkel et al. [11] showed the feasibility of implementing distributed network-level firewalls using virtual machines. In another work [10], they proposed an intrusion detection system design using virtual machine introspection of an untrusted VM. VMwall applies virtual machine introspection to a different problem, using it to correlate network flows with the local processes bound to those flows.

Other research has used virtual machines for malware detection. Borders et al. [4] designed a system, Siren, that detected malware running within a virtual machine. Yin et al. [33] proposed a system to detect and analyze privacy-breaching malware using taint analysis. Jiang et al. [17] presented an out-of-the-box VMM-based malware detection system. Their proposed technique constructed the internal semantic views of a VM from an external vantage point. In another work [16], they proposed a monitoring tool that observes a virtual machine-based honeypot’s internal state from outside the honeypot. As a pleasant side-effect of malicious network flow detection and process correlation, VMwall can often identify processes in the untrusted system that comprise portions of an attack.

Previous research has developed protection strategies for different types of hardware-level resources in the virtualized environment. Xu et al. [32] proposed a VMM-based usage control model to protect the integrity of kernel memory. Ta-Min et al. [28] proposed a hypervisor-based system that allowed applications to partition their system call interface into trusted and untrusted components. VMwall, in contrast, protects network resources from attack by malware that runs inside the untrusted virtual machine by blocking illegitimate network connection attempts.

These previous hypervisor-based security applications generally take either a network-centric or host-centric view. Our work tries to correlate activity at both levels. VMwall monitors network connections but additionally peers into the state of the running, untrusted operating system to make judgments about each connection’s validity. Moreover, VMwall easily scales to collections of virtual machines on a single physical host. A single instance of VMwall can act as an application-level firewall for an entire network of VMs.

## 3. Overview
### 3.1 Threat Model
We assume that attackers have the ability to execute real-world attacks infecting widespread computer systems today. Attackers can gain superuser privilege from remote. They are external and have no physical access to the attacked computers, but they may install malicious software on a victim system by exploiting a software vulnerability in an application or operating system or by enticing unsuspecting users to install the malware themselves. The software exploit or the user often executes with full system privileges, so the malware may perform administrative actions such as kernel module or driver installation. Hence, malicious code may execute at both user and kernel levels. For ease of explanation, we initially describe VMwall’s architecture under the assumption that kernel data structure integrity is maintained. This assumption is not valid in our threat model, and Section 6.4 revisits this point to describe technical solutions ensuring that the assumption holds.

The installed malware may periodically make or receive network connections. Many examples exist. Bots make network connections to a command and control channel to advertise their presence and receive instructions, and they send bulk network traffic such as denial-of-service packets and email spam. Spyware programs collect information, such as keystrokes and mouse clicks, and then transmit the confidential data across a network to the attacker. Worms may generate network connections to scan the network in search of additional victims suitable for infection. Backdoors open holes in machines by listening for incoming connections from the attacker. One common feature of these different classes of attacks is their interest in the network.

In a typical system, malware can directly affect an application-level firewall’s execution. The architecture of these malware instances frequently combines a user-level application performing network activity with a kernel-level module that hides the application from the view of host-level security software. The malicious application, likely running with full system privileges, may halt the execution of the firewall. Similarly, the malicious kernel component may alter the hooks used by an in-kernel module supporting the user-level firewall so that the firewall is simply never invoked as data passes to and from the network. Conventional application-level firewalls fail under these direct attacks. Our goal is to develop a system that withstands direct attack from malware at the application layer or the kernel layer.

Our system has requirements for correct execution. As with all requirements, an attacker who is able to violate any requirement is likely able to escape detection. Our two requirements of note center on basic expectations for the in-memory data structures used by the kernel that may be infected by an attack. First, we expect to be able to find the head of linked data structures, often by extracting a kernel symbol value at boot time. An attacker could conceivably cause our firewall to inspect incorrect kernel information by replicating the data structure elsewhere in kernel memory and altering all code references to the original structure to instead refer to the new structure. Our firewall would then analyze stale data. It is not immediately clear that such an attack is plausible; moreover, our tool could periodically verify that code references to the data match the symbol value extracted at boot.

### 3.2 Xen-Based Virtual Machine Architectures
Xen is a popular open-source hypervisor that supports both paravirtualized and fully virtualized domains. In a Xen-based architecture, the dom0 (privileged) domain acts as the control domain, managing the lifecycle and resources of other (unprivileged) domains, known as domU. VMwall leverages this architecture to isolate the firewall from the untrusted VMs. The dom0 kernel component intercepts network connections to and from untrusted VMs, while a user-space process in dom0 performs introspection to correlate each flow with the associated process in the untrusted VM. This setup ensures that the firewall is protected from direct attacks by malware running in the untrusted VMs.