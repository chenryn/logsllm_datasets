title:Measuring BGP Pass-Through Times
author:Anja Feldmann and
Hongwei Kong and
Olaf Maennel and
Alexander Tudor
Measuring BGP Pass-Through Times
Anja Feldmann1, Hongwei Kong2, Olaf Maennel1, and Alexander Tudor3
1 Technische Universit¨at M¨unchen, Germany {anja,olafm}@net.in.tum.de
2 Agilent Labs, Beijing, China hong-wei PI:EMAIL
3 Agilent Labs, Palo Alto, USA alex PI:EMAIL
Abstract. Fast routing convergence is a key requirement for services
that rely on stringent QoS. Yet experience has shown that the standard
inter-domain routing protocol, BGP4, takes, at times, more than one
hour to converge. Previous work has focused on exploring if this stems
from protocol interactions, timers, etc. In comparison only marginal at-
tention has been payed to quantify the impact of individual router delays
on the overall delay. Salient factors, such as CPU load, number of BGP
peers, etc., may help explain unusually high delays and as a consequence
BGP convergence times. This paper presents a methodology for study-
ing the relationship between BGP pass-through times and a number of
operationally important variables, along with some initial results. Our
results suggest that while pass-through delays under normal conditions
are rather small, under certain conditions, they can be a major contri-
buting factor to slow convergence.
1 Introduction
Even though BGP has been studied extensively within the last few years (see
Tim Griﬃn’s Web page [1] of references as a starting point) we still do not have
a good understanding on how and where signaling delays occur. Unexplaina-
ble large convergence times have been reported [2]. It is unclear whether they
are attributable to protocol interactions [3], implementation idiosyncrasies [4],
hardware limitations or other factors [5].
While one may attribute convergence times greater than 30 minutes to route
ﬂap damping [6] and those that are less than 2 − 3 minutes to multiples of
the MRAI timer [7] the wide variability of in-between times is puzzling [8]. An
unknown component of the delay is the contribution of each router along the
path of the BGP update. A detailed exploration of the delay of each router and
how it relates to factors, such as CPU load, number of BGP peers, etc., can help
explain these observations.
We propose to explore pass-through times of BGP updates using a black-box
testing approach in a controlled environment with appropriate instrumentation.
To this end, we have setup a test framework that consists of:
Device under test (DUT): a router.
Load framework: that can be used to impose a speciﬁc, pre-deﬁned load on the
DUT. In our case it consists of several PCs and an Agilent router tester.
C. Barakat and I. Pratt (Eds.): PAM 2004, LNCS 3015, pp. 267–277, 2004.
c(cid:1) Springer-Verlag Berlin Heidelberg 2004
268
A. Feldmann et al.
BGP workloads can be generated by the PCs as well as the router tester.
The router tester is used to generate controlled rate data traﬃc. Tests are
repeated with both PC as well as router tester generated BGP workloads.
Instrumentation framework: that allows us to measure not just the pass-through
times of BGP updates but also the load imposed by the load framework.
It consists of several packet-level monitors, periodic router queries and the
router tester.
The testbed has wider applicability. For example, it can be used to explore other
router measures, such as line card FIB convergence.
Our methodology goes beyond RFC compliance tests and benchmarks, e.g.,
IETF’s BMWG [9], in that we do not consider pass-through times in isolation.
Rather, we investigate the correlation between BGP pass-through time and rou-
ter load using a variety of stressors. BGP load is aﬀected by such variables as (1)
number of peers, (2) routing table size, and (3) BGP update rate. Non-BGP re-
lated tasks are many. We do not attempt to account for all of them individually.
Instead, we impose a speciﬁc background traﬃc load which causes the ip input
task’s CPU usage to increase. To measure the CPU load we periodically sample
the cumulative route processor’s load. With controlled experiments we can then
use previously obtained CPU load data to infer the BGP portion of the CPU
load. Our initial results are about establishing a baseline for pass-through times.
We also explore some aspects of stress response. A stress situation arises when
the imposed load reaches the limits of DUT.
Additional parameters that may eﬀect pass-through time include the conﬁgu-
red I/O queue length for BGP processes, ACLs’ complexity and hit ratio, BGP
policy settings such as route-maps, peer-groups, ﬁlter-lists and/or communities,
as well as AS prepending, etc. These are beyond the scope of this paper.
Parameter sensitivity tests and reasonable conﬁgurations were used to reduce
the otherwise many experiments, given the large number of parameter value
permutations.
Our experiments show that in general the DUT handles BGP stress well,
which is in line with recent ﬁndings [10]. Yet the per hop BGP processing de-
lays can be signiﬁcant. Updates are only processed every 200ms even when the
MRAI timer is inactive. Activating the MRAI timer adds further delay com-
ponents causing higher delays occur with increasing MRAI timer values. DUT
targeted traﬃc, even at low data rates, drastically impacts CPU load and ac-
cordingly pass-through delays. We notice that update the rate is not nearly as
signiﬁcant a factor for causing delays as is the number of peers. Yet high update
rates occurring concurrently on multiple peers, as is happening with after router
reboots, can cause problems.
The rest of the paper is structured as follows. In Section 2 we describe our
methodology for measuring pass-through times and imposing a controlled router
CPU load. Next, in Section 3, we describe in detail the conﬁguration and tools
that constitute our test framework. We then describe our experiments and report
their results in Section 4. Section 5 concludes our paper and comments on the
practical learnings of this work as applied to current operational practice and
future routing protocol design.
Measuring BGP Pass-Through Times
269
2 Test Methodology
Three topics need detailed explanation: measuring pass-through time, separating
router processing delay from MRAI timer delay, and imposing a controllable load
on the DUT.
2.1 Measuring Pass-Through Times
There are three common approaches to network measurement: passively obser-
ving regular traﬃc, actively evaluating injecting traﬃc at end points within
the injecting application, and passively measuring actively injected traﬃc. Since
we operate in a testbed the ﬁrst option is not applicable. Accordingly, we use
speciﬁcally designed updates as active probes together with a monitoring BGP
session. The timings of the probes and the resulting response updates generated
by the DUT and directed to the monitoring session are passively measured using
dedicated and synchronized packet capture.
Using special updates gives us the ability to impose patterns with certain cha-
racteristics, such as ensuring that the DUT will relay it to the monitoring session.
The alternative approach is to replay captured BGP update traces. While this
may provide useful background traﬃc it suﬀers from several shortcomings. First
the pass-through time of a router depends on the settings of several BGP speci-
ﬁc parameters such as the value of the MRAI timer. In order to distinguish the
delay due to this timer from the delay due to the router we need certain update
patterns which may or may not be present in regular BGP traces. Second, not
all incoming BGP updates trigger an outgoing BGP update. Therefore it is hard
to tell which BGP updates are discarded or are combined into other updates.
Furthermore the amount of work associated with each BGP update will vary
depending on its content with respect to the router’s conﬁguration.
The simplest form of a BGP update probe pattern is comprised of a single
new preﬁx. Since the preﬁx is new, the update has to be propagated to all
neighbors and the monitor session, policy permitting. The drawback is that the
routing table size grows ad inﬁnitum and that the available memory becomes
an unintended co-variable. The table size can be controlled via explicit or impli-
cit withdrawals. We use implicit ones since BGP withdrawal processing diﬀers
from update processing and the results would have to be separated. Implicit
withdrawals on the other hand are indistinguishable from other updates. Each
time a probe update for a preﬁx is to be sent we randomly choose an AS path
length that diﬀers from the previous path length. This ensures that the update
is propagated to the monitor session and that the quality of the path improves
or deteriorates with the same probability. The BGP update rate for both pro-
bes and traces can be controlled. In summary probe patters are convenient for
active measurements while replaying BGP traces is appropriate for generating a
realistic load on a router.
Pass-through times are not constant. They vary with the makeup of the
updates and the background load caused by other factors. Accordingly, we ob-
tain sample values by measuring the time diﬀerence between in-bound (into the
270
A. Feldmann et al.
DUT) probe injections and out-bound (onto the monitoring BGP session) up-
date propagation. To avoid time synchronization errors the packet monitors are
dedicated, line rate capable, capture only cards with highly accurate, synchro-
nized clocks. Furthermore, all other BGP sessions are terminated on the same
machine, either the PC or the router tester.
Throughout this paper we use 10, 000 preﬁxes from the 96/8 range as probe
preﬁxes. The central part of the experiments last for 15 minutes and our probing
rate is a rather low 1 update a second. This guarantees that the TCP throughput
will never be problematic. We started by using 10 probing sessions but realized
that interactions with a periodic timer limited the accuracy of the estimates.
The periodicity of the timer in question is 200ms which with 10 probes per
second gave us only 2 samples per timer. To increase the rate of samples per
timer to 10 we increased the number of probe sessions to 50. Each probe session
uses a diﬀerent random oﬀset within the second for sending its probe. This
ensures that the probing is done at exponentially spaced but ﬁxed intervals
within the second. A histogram of the resulting pass-through times is plotted in
Figure 1. Interestingly, the pass-through times vary from 2.4ms to about 200ms
with some ranging up to 400ms. The average pass-through time is 101ms. The
even distribution in the range of 2ms to 200ms indicates some kind of timer.
Indeed, closer inspection reveals that the router limits the update processing to
5 times a second. This should result in a theoretical upper bound on the pass-
through times of 200ms. Yet some of the updates are held back for one update
processing cycle. This results in pass-through time greater than 210ms for 1.3%
of the probes.
To determine how the pass-through time compares with the one-way packet
delays we also measured the one-way delay experienced by IP packets of three
typical packet sizes (64, 576, 1500 bytes) that were sent during the same experi-
ment, see Figure 1 for the 1500 byte packets. The average delays are, 0.028ms,
0.092ms and 0.205ms, hence, signiﬁcantly shorter. This shows that a BGP up-
date is delayed 11 times longer in the best case and 500 times longer on average
than a simple IP packet. While this might seem signiﬁcant, the total accumula-
ted delay, at 100ms a hop along a 20 hop router path, would be rather small at
under 2 seconds. This indicates that we have to consider additional factors.
2.2 MRAI Timer Delay
The purpose of the Min-Route Advertisement Interval timer [11] (MRAI) is to
limit the number of updates for each preﬁx/session for a peer to one every x
seconds. A typical value for x is 28 seconds. If the timer ﬁres at time t− x and t
then all updates received and processed within this interval of size x are batched
and sent shortly after time t. Based on this observation an upper bound for the
pass-through time can be derived, even when the MRAI timer is active: for each
MRAI timer interval consider those probes with minimal pass-through delay. A
lower bound is derivable from the probe with largest pass-through delay within
the interval. This probe arrived too late to be included in the previous MRAI
timer interval.
s
e
g
a
t
n
e
c
r
e
P
8
.
0
6
.
0
4
.
0
2
.
0
0
.
0
BGP updates
1500 byte pkts
0−0.25 0.25−2.5 2.5−50 50−100 100−150 150−200 200−250 250−400
Milliseconds
Measuring BGP Pass-Through Times
271
lower bound,  MRAI = 5 sec
upper bound, MRAI = 5 sec
lower bound,  MRAI = 30 sec
upper bound, MRAI = 30 sec
s
e
g
a
t
n
e
c
r
e
P
6
.
0
4
.