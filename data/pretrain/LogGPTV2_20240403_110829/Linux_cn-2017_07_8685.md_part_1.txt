---
author: David Both
category: 技术
comments_data:
- date: '2017-07-11 17:26:28'
  message: 翻译醉了，西部数字都出来，还有其他许多小问题，值得再细细打磨……
  postip: 115.154.191.36
  username: 来自陕西西安西安交通大学的 Chrome 58.0|GNU/Linux 用户
count:
  commentnum: 1
  favtimes: 7
  likes: 0
  sharetimes: 0
  viewnum: 17466
date: '2017-07-11 15:40:08'
editorchoice: true
excerpt: 让我们大概地从 EXT4 的历史、特性以及最佳实践这几个方面来学习它和之前的几代 EXT 文件系统有何不同。
fromurl: https://opensource.com/article/17/5/introduction-ext4-filesystem
id: 8685
islctt: true
largepic: /data/attachment/album/201707/11/153812r3lq9bqq7om791hf.jpg
permalink: /article-8685-1.html
pic: /data/attachment/album/201707/11/153812r3lq9bqq7om791hf.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 318
- displayorder: 1
  raid: 1104
- displayorder: 2
  raid: 2067
- displayorder: 3
  raid: 6132
- displayorder: 4
  raid: 6907
- displayorder: 5
  raid: 7083
- displayorder: 6
  raid: 7669
- displayorder: 0
  raid: 10000
reviewer: ''
selector: ''
summary: 让我们大概地从 EXT4 的历史、特性以及最佳实践这几个方面来学习它和之前的几代 EXT 文件系统有何不同。
tags:
- EXT4
- 文件系统
- EXT
thumb: false
title: Linux 的 EXT4 文件系统的历史、特性以及最佳实践
titlepic: true
translator: chenxinlong
updated: '2017-07-11 15:40:08'
---
> 
> 让我们大概地从 EXT4 的历史、特性以及最佳实践这几个方面来学习它和之前的几代 EXT 文件系统有何不同。
> 
> 
> 
![](/data/attachment/album/201707/11/153812r3lq9bqq7om791hf.jpg)
在之前关于 Linux 文件系统的文章里，我写过一篇 [Linux 文件系统介绍](https://opensource.com/life/16/10/introduction-linux-filesystems) 和一些更高级的概念例如 [一切都是文件](https://opensource.com/life/15/9/everything-is-a-file)。现在我想要更深入地了解 EXT 文件系统的特性的详细内容，但是首先让我们来回答一个问题，“什么样才算是一个文件系统 ？” 一个文件系统应该涵盖以下所有特点：
1. **数据存储：** 对于任何一个文件系统来说，一个最主要的功能就是能够被当作一个结构化的容器来存储和获取数据。
2. **命名空间：** 命名空间是一个提供了用于命名与组织数据的命名规则和数据结构的方法学。
3. **安全模型：** 一个用于定义访问权限的策略。
4. **API：** 操作这个系统的对象的系统功能调用，这些对象诸如目录和文件。
5. **实现：** 能够实现以上几点的软件。
本文内容的讨论主要集中于上述几点中的第一项，并探索为一个 EXT 文件系统的数据存储提供逻辑框架的元数据结构。
### EXT 文件系统历史
虽然 EXT 文件系统是为 Linux 编写的，但其真正起源于 Minix 操作系统和 Minix 文件系统，而 Minix 最早发布于 1987，早于 Linux 5 年。如果我们从 EXT 文件系统大家族的 Minix 起源来观察其历史与技术发展那么理解 EXT4 文件系统就会简单得多。
### Minix
当 Linux Torvalds 在写最初的 Linux 内核的时候，他需要一个文件系统但是他又不想自己写一个。于是他简单地把 [Minix 文件系统](https://en.wikipedia.org/wiki/MINIX_file_system) 加了进去，这个 Minix 文件系统是由 [Andrew S. Tanenbaum](https://en.wikipedia.org/wiki/Andrew_S._Tanenbaum) 写的，同时它也是 Tanenbaum 的 Minix 操作系统的一部分。[Minix](https://en.wikipedia.org/wiki/MINIX) 是一个类 Unix 风格的操作系统，最初编写它的原因是用于教育用途。Minix 的代码是自由可用的并有适当的许可协议，所以 Torvalds 可以把它用 Linux 的最初版本里。
Minix 有以下这些结构，其中的大部分位于生成文件系统的分区中：
* [**引导扇区**](https://en.wikipedia.org/wiki/Boot_sector) 是硬盘安装后的第一个扇区。这个引导块包含了一个非常小的引导记录和一个分区表。
* 每一个分区的第一个块都是一个包含了元数据的 超级块   （    superblock    ）  ，这些元数据定义了其他的文件系统结构并将其定位于物理硬盘的具体分区上。
* 一个 **inode 位图块** 决定了哪些 inode 是在使用中的，哪一些是未使用的。
* **inode** 在硬盘上有它们自己的空间。每一个 inode 都包含了一个文件的信息，包括其所处的数据块的位置，也就是该文件所处的区域。
* 一个 **区位图** 用于保持追踪数据区域的使用和未使用情况。
* 一个 **数据区**, 这里是数据存储的地方。
对上述了两种位图类型来说，一个 位   （    bit    ） 表示一个指定的数据区或者一个指定的 inode。 如果这个位是 0 则表示这个数据区或者这个 inode 是未使用的，如果是 1 则表示正在使用中。
那么，[inode](https://en.wikipedia.org/wiki/Inode) 又是什么呢 ? 就是 index-node（索引节点）的简写。 inode 是位于磁盘上的一个 256 字节的块，用于存储和该 inode 对应的文件的相关数据。这些数据包含了文件的大小、文件的所有者和所属组的用户 ID、文件模式（即访问权限）以及三个时间戳用于指定：该文件最后的访问时间、该文件的最后修改时间和该 inode 中的数据的最后修改时间。
同时，这个 inode 还包含了位置数据，指向了其所对应的文件数据在硬盘中的位置。在 Minix 和 EXT 1-3 文件系统中，这是一个数据区和块的列表。Minix 文件系统的 inode 支持 9 个数据块，包括 7 个直接数据块和 2 个间接数据块。如果你想要更深入的了解，这里有一个优秀的 PDF 详细地描述了 [Minix 文件系统结构](http://ohm.hgesser.de/sp-ss2012/Intro-MinixFS.pdf) 。同时你也可以在维基百科上对 [inode 指针结构](https://en.wikipedia.org/wiki/Inode_pointer_structure) 做一个快速了解。
### EXT
原生的 [EXT 文件系统](https://en.wikipedia.org/wiki/Extended_file_system) (意即 扩展的   （    extended    ） ) 是由 [Rémy Card](https://en.wikipedia.org/wiki/R%C3%A9my_Card) 编写并于 1992 年与 Linux 一同发行。主要是为了克服 Minix 文件系统中的一些文件大小限制的问题。其中，最主要的结构变化就是文件系统中的元数据。它基于 Unix 文件系统 （UFS），其也被称为伯克利快速文件系统（FFS）。我发现只有很少一部分关于 EXT 文件系统的发行信息是可以被确证的，显然这是因为其存在着严重的问题，并且它很快地被 EXT2 文件系统取代了。
### EXT2
[EXT2 文件系统](https://en.wikipedia.org/wiki/Ext2) 就相当地成功，它在 Linux 发行版中存活了多年。它是我在 1997 年开始使用 Red Hat Linux 5.0 时接触的第一个文件系统。实际上，EXT2 文件系统有着和 EXT 文件系统基本相同的元数据结构。然而 EXT2 更高瞻远瞩，因为其元数据结构之间留有很多供将来使用的磁盘空间。
和 Minix 类似，EXT2 也有一个[引导扇区](https://en.wikipedia.org/wiki/Boot_sector) ，它是硬盘安装后的第一个扇区。它包含了非常小的引导记录和一个分区表。接着引导扇区之后是一些保留的空间，它填充了引导记录和硬盘驱动器上的第一个分区（通常位于下一个柱面）之间的空间。[GRUB2](https://opensource.com/article/17/2/linux-boot-and-startup) - 也可能是 GRUB1 - 将此空间用于其部分引导代码。
每个 EXT2 分区中的空间被分为 柱面组   （    cylinder group    ） ，它允许更精细地管理数据空间。 根据我的经验，每一组大小通常约为 8MB。 下面的图 1 显示了一个柱面组的基本结构。 柱面中的数据分配单元是块，通常大小为 4K。
![cylindergroup-01_1.png](/data/attachment/album/201707/11/154011lxv9mpu50c5v0xa5.png)