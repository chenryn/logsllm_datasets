# Title: SWIFT: Predictive Fast Reroute

## Authors
- Thomas Holterbach (ETH Zürich)
- Stefano Vissicchio (University College London)
- Alberto Dainotti (CAIDA, UC San Diego)
- Laurent Vanbever (ETH Zürich)

## Abstract
Network operators frequently encounter remote outages in transit networks, leading to significant downtimes, sometimes lasting several minutes. The primary issue is the slow convergence of BGP, the Internet routing protocol, which must process and propagate large bursts of messages router by router. In this paper, we introduce SWIFT, a fast-reroute framework that enables routers to restore connectivity within seconds upon remote outages. SWIFT employs two innovative techniques: it predicts the extent of a remote failure from a few control-plane (BGP) messages, and it uses a new data-plane encoding scheme for quick and flexible updates to affected forwarding entries. SWIFT can be deployed on existing devices without modifying BGP.

We present a complete implementation of SWIFT and demonstrate its effectiveness. Our experiments with real BGP traces show that SWIFT can predict the extent of a remote outage within seconds with an accuracy of approximately 90% and can restore connectivity for 99% of the affected destinations.

### CCS Concepts
- **Networks**: Network performance analysis, network measurement, network reliability

### Keywords
- BGP, Convergence, Fast Reroute, Root Cause Analysis

## 1. Introduction
Continuous Internet connectivity is crucial for many modern applications, where even brief downtimes can result in substantial financial and reputational losses. For example, one minute of downtime for major companies like Amazon or Google can cost hundreds of thousands of dollars [2], and any outage they experience often makes the news [4, 8]. Smaller players are similarly affected, with the average cost of downtime estimated at around $8,000 per minute across the networking industry [54].

Ensuring always-on connectivity is a significant challenge for network operators, even if their own network is resilient. Remote outages in transit networks, which are frequent and can disrupt traffic for thousands of destinations, pose a major problem. Large networks regularly experience tens of failures or configuration changes daily [12, 26, 28, 34, 64], each potentially affecting numerous destinations.

### Problem
BGP, the Internet routing protocol, converges slowly during remote outages, resulting in long data-plane downtimes. Our measurements on real BGP traces and recent router platforms (§2) reveal:
- Large bursts of BGP withdrawals (>1.5k prefixes) occur regularly: 53% (resp. 86%) of approximately 200 BGP sessions worldwide see at least one large burst per week (resp. month). Since single routers in transit networks maintain tens to hundreds of such sessions [27], the probability of receiving a burst is high. 9.5% of these bursts involve more than 20k prefixes, with some reaching up to 560k prefixes. Most large bursts include popular destinations (e.g., Google, Akamai, Netflix).
- BGP's slow convergence can cause dozens of seconds of data-plane downtime, leading to packet loss for many destinations. This has been confirmed through testbed experiments on commercial routers and private conversations with operators.

To further validate the problem, we conducted a survey with 72 operators. The survey indicates that slow BGP convergence is a widespread concern. According to 47% of the operators who monitor convergence time, BGP takes more than 30 seconds to converge upon remote outages, on average.

### Local Fast-Reroute Upon Remote Outages
We present SWIFT, a fast-reroute framework that enables routers to restore connectivity within seconds upon remote outages. SWIFT is based on two key techniques:
- **Inference Algorithm**: After receiving the first BGP messages of a burst, a SWIFT-enabled router runs an inference algorithm to localize the outage and predict the affected prefixes. This is a form of time-bound Root Cause Analysis (RCA).
- **Data-Plane Encoding Scheme**: Based on the inference, the router reroutes the potentially affected prefixes on paths unaffected by the inferred failure. SWIFT includes a data-plane encoding scheme that allows the router to flexibly match and reroute all affected prefixes with minimal data-plane rule updates.

### Balancing Accuracy and Speed
SWIFT restores connectivity within seconds by inferring the failure from a single vantage point. This contrasts with prior RCA studies, which aim to find causes of outages within minutes and can use more flexible inference algorithms and input sources (e.g., active probing from multiple vantage points). SWIFT trades some accuracy for speed, identifying the topological region of the outage rather than its exact location. By rerouting traffic around the region, a SWIFT-enabled router immediately restores connectivity for affected prefixes, with a small number of non-affected prefixes temporarily rerouted.

SWIFT ensures that diverting non-affected traffic does not outweigh the benefits of restoring affected traffic. It proves that rerouting non-affected traffic is safe, avoiding forwarding anomalies even if multiple routers and ASes deploy it. Additionally, SWIFT selects alternate paths based on operator policies (e.g., type of peers, cost model) and performance criteria (e.g., avoiding low-bandwidth paths).

### Deployment
SWIFT can be deployed on a per-router basis without requiring cooperation between ASes or changes to BGP. It can be implemented with a simple software update, as the only hardware requirement, a two-stage forwarding table, is available in recent router platforms [3].

Deploying SWIFT in a few central ASes can benefit the entire Internet, as these ASes would also protect their non-SWIFT customers. Similarly, deploying SWIFT at the edge of a network can boost convergence network-wide. A full Internet deployment would maximize the advantages of SWIFT, ensuring ASes can reroute quickly, independently, and consistently with their policies.

### Performance
We implemented SWIFT and conducted extensive experiments using both real and synthetic BGP traces. Across our experiments, SWIFT correctly identified 90% of the affected prefixes within 2 seconds. A SWIFT-enabled router can fast-reroute 99% of the predicted prefixes with minimal data-plane rule updates, typically in milliseconds. Our implementation reduced the convergence time of a recent Cisco router by more than 98%.

### Contributions
- A thorough analysis of the problem of slow BGP convergence upon remote outages, including a survey with 72 operators and measurements on real BGP traces and routers (§2).
- A framework, SWIFT, which enables existing routers to quickly restore connectivity upon such outages (§3).
- Algorithms for quickly inferring disrupted resources from a few BGP updates (§4) and enabling fast data-plane rerouting (§5).
- An open-source implementation of SWIFT, together with a thorough evaluation (§6) based on real-world BGP traces and simulations. We show that SWIFT achieves a prediction accuracy and encoding efficiency above 90%.
- A case study demonstrating that SWIFT can reduce the convergence time of recent Cisco routers by 98% (§7).

## 2. The Case for SWIFT
In this section, we demonstrate the practical relevance of slow BGP convergence upon remote outages. We first discuss the causes and effects of slow BGP convergence in a controlled environment (§2.1), and then present measurements on real BGP traces and feedback from operators, showing that slow convergence problems occur in the Internet and can lead to significant traffic losses, even for popular destinations (§2.2).

### 2.1 Slow BGP Convergence Can Cause Significant Data-Plane Losses
We illustrate an example of slow BGP convergence using the network in Figure 1(a). Each AS i originates a distinct set of prefixes Si. We focus on the 21k prefixes of S6, S7, and S8, before and after the failure of the link (5, 6). Unlike the current Internet, we assume all ASes deploy existing fast-reroute technologies [11, 25, 37, 60], allowing each AS to quickly restore connectivity upon a local outage if a backup path is available.

Figures 1(a) and 1(b) show pre- and post-failure AS paths. AS 5 knows an alternate path for S7 (via AS 3) before the failure. However, due to inter-domain policies (e.g., partial transit [59]), it lacks backup paths for S6 and S8. After the failure of (5, 6), AS 5 restores connectivity for S7 almost immediately by rerouting traffic to its alternate path (through AS 3). For S6 and S8, AS 5 recovers connectivity via AS 2, but a blackhole is created for the 11k prefixes. In the control plane, the failure causes AS 5 to send 10k path updates and 11k path withdrawals.

#### 2.1.1 BGP Information Hiding Slows Down Convergence
For AS 1 and AS 2, the failure of (5, 6) is a remote outage, causing traffic loss towards S6 and S8. Convergence is inherently slow because AS 1 and AS 2 only have information about the best paths used by their neighbors, not all available paths. Upon the failure, AS 1 and AS 2 must wait for the propagation of a large stream of path updates and withdrawals, potentially arriving one prefix at a time. BGP update packing [57] can reduce the number of messages, but this mechanism only works if identical BGP attributes are attached to the prefixes, which is often not the case due to the widespread use of BGP communities [21]. Other factors contributing to slow BGP convergence include slow table transfer [13], timers [48, 53], and TCP stack implementation [1].

#### 2.1.2 Effect on Data-Plane Connectivity
To quantify the impact of slow control-plane convergence on data-plane connectivity, we reproduced the network in Figure 1 with recent Cisco routers (Cisco Nexus 7000 C7018, running NX-OS v6.2). We measured the downtime experienced by the AS 1 router upon the failure of (5, 6). In successive experiments, we configured AS 6 to advertise a growing number of prefixes up to 290,000 (approximately half of the current full Internet routing table [5]). We injected traffic towards 100 IP addresses randomly selected among prefixes advertised by AS 6 and measured the time taken by AS 1 to retrieve connectivity for all probed prefixes.

Table 1 shows the downtime seen by the AS 1 router. Immediately after the link failure, the router starts dropping packets for all monitored IPs. Connectivity is gradually recovered as withdrawals are received from AS 2 and traffic is redirected to AS 3. The downtime increases roughly linearly: for 290k prefixes, the router takes 109 seconds to fully converge.

### 2.2 Slow BGP Convergence in the Internet
We now provide evidence of slow BGP convergence in the Internet, along with a discussion on its data-plane impact and network operators' perspectives.

#### 2.2.1 Bursts of Withdrawals Propagate Slowly
We measured the duration of bursts of BGP withdrawals extracted from 213 RouteViews [50] and RIPE RIS [9] peering sessions.