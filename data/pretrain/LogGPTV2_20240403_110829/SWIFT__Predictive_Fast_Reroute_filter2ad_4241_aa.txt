title:SWIFT: Predictive Fast Reroute
author:Thomas Holterbach and
Stefano Vissicchio and
Alberto Dainotti and
Laurent Vanbever
SWIFT: Predictive Fast Reroute
Technical Report
Thomas Holterbach∗†, Stefano Vissicchio‡, Alberto Dainotti†, Laurent Vanbever∗
∗ETH Zürich, †CAIDA, UC San Diego, ‡University College London
ABSTRACT
Network operators often face the problem of remote outages in
transit networks leading to significant (sometimes on the order of
minutes) downtimes. The issue is that BGP, the Internet routing
protocol, often converges slowly upon such outages, as large bursts
of messages have to be processed and propagated router by router.
In this paper, we present SWIFT, a fast-reroute framework which
enables routers to restore connectivity in few seconds upon remote
outages. SWIFT is based on two novel techniques. First, SWIFT
deals with slow outage notification by predicting the overall extent
of a remote failure out of few control-plane (BGP) messages. The
key insight is that significant inference speed can be gained at
the price of some accuracy. Second, SWIFT introduces a new data-
plane encoding scheme, which enables quick and flexible update of
the affected forwarding entries. SWIFT is deployable on existing
devices, without modifying BGP.
We present a complete implementation of SWIFT and demon-
strate that it is both fast and accurate. In our experiments with real
BGP traces, SWIFT predicts the extent of a remote outage in few
seconds with an accuracy of ∼90% and can restore connectivity for
99% of the affected destinations.
CCS CONCEPTS
• Networks → Network performance analysis; Network mea-
surement; Network reliability;
KEYWORDS
BGP; Convergence; Fast Reroute; Root Cause Analysis
1 INTRODUCTION
Many applications nowadays require continuous Internet connec-
tivity, where even the slightest downtime can cause large financial
and reputational loss. For example, the cost of one minute of down-
time for Amazon or Google easily reaches a 6-digit number [2]
and almost any outage that they experience makes the news [4, 8].
Smaller Internet players are not better off. Across the networking
industry, the average cost of downtime is estimated to be about
$8,000 per minute [54].
Unfortunately, guaranteeing always-on connectivity Internet-
wide is a big challenge for network operators. Even if their network
is perfectly resilient, they still face the problem of remote outages in
transit networks, i.e., connectivity disruptions in external networks
forwarding their traffic. These disruptions are frequent: large net-
works routinely see tens of failures or configuration changes in any
single day [12, 26, 28, 34, 64], each potentially disrupting transit
traffic for thousands of destinations.
Problem. BGP, the Internet routing protocol, converges slowly
upon remote outages. This can result in long data-plane downtime
for many destinations, including popular ones. Our measurements
on real BGP traces and recent router platforms (§2) show that:
– large bursts of BGP withdrawals (>1.5k prefixes) regularly hap-
pen in the Internet: 53% (resp. 86%) of ≈200 BGP sessions dis-
tributed worldwide see at least one large burst per week (resp.
month). Since single routers in transit networks routinely main-
tain tens to hundreds of such BGP sessions [27], the probability
of receiving a burst is important. 9.5% of these bursts involve
more than 20k prefixes, and some involve up to 560k prefixes.
Nearly all the biggest (hence slowest) bursts include prefixes for
popular destinations (Google, Akamai, Netflix, etc.).
– similarly to what prior studies have shown (e.g., [18, 36, 42, 44, 52,
61, 62, 65]), BGP slow convergence can cause dozens of seconds
of data-plane downtime, during which packets towards many
destinations are lost. We confirmed data-plane losses with both
testbed experiments on commercial routers and private conver-
sations with operators.
To further substantiate the problem, we conducted a survey with
72 operators. Our survey indicates that slow BGP convergence
is a widespread concern. According to the operators monitoring
convergence time (47% of them), BGP takes more than 30 seconds to
converge upon remote outages, on average.
Local fast-reroute upon remote outages. We present SWIFT, a
fast-reroute framework that enables a router to restore connectivity
in few seconds upon remote outages. SWIFT is based on two main
ingredients. Immediately after receiving the first BGP messages of a
burst, a SWIFTED router runs an inference algorithm to localize
the outage and predict which prefixes will be affected—a sort of
time-bound Root Cause Analysis (RCA). Based on this inference,
the SWIFTED router reroutes the potentially affected prefixes on
paths unaffected by the inferred failure. As many prefixes may
have to be rerouted at once, SWIFT also includes a data-plane
encoding scheme that enables the router to flexibly match and
reroute all prefixes affected by a remote failure with few data-plane
rule updates.
Balancing inference accuracy & speed, with correctness &
performance in mind. SWIFT restores connectivity within few
seconds by inferring the failure from a single vantage point. This
contrasts to prior RCA studies (e.g., [15, 19, 23, 35, 38, 39, 67–69]),
which aim at finding causes of outages within minutes, hence can
Technical Report, 2017,
T. Holterbach et al.
benefit from more flexibility in terms of inference algorithms and
input sources (e.g., active probing from multiple vantage points).
The key insight behind SWIFT inference algorithm is that some
accuracy can be traded for a significant gain in speed. Identify-
ing the topological region where an outage is happening is indeed
much faster than precisely locating the outage within that region.
By rerouting traffic around the region, a SWIFTED router immedi-
ately restores connectivity for the affected prefixes at the cost of
temporarily forwarding few (according to our results) unaffected
prefixes on alternate working paths.
SWIFT makes sure that the effect of diverting non-affected traffic
does not trump the benefit of saving traffic towards the affected
prefixes. First of all, we prove that rerouting non-affected traffic is
safe: SWIFT does not lead to forwarding anomalies, even if multiple
routers and ASes deploy it. Second, SWIFT selects the alternate
paths taking into account the operator’s policies (e.g., type of peers,
cost model) and performance criteria (e.g., by preventing to reroute
large amount of traffic to low-bandwidth paths).
Deployment. SWIFT is deployable on a per-router basis and does
not require cooperation between ASes, nor changes to BGP. SWIFT
can be deployed with a simple software update, since the only
hardware requirement, a two-stage forwarding table, is readily
available in recent router platforms [3].
Whenever a SWIFTED router fast-reroutes upon an outage, it
guarantees connectivity to all the traffic sources passing through
it. Hence, deploying SWIFT in a few central ASes would bene-
fit the entire Internet, since these ASes would also protect their
(non-SWIFTED) customers. The same applies within a network:
deploying few SWIFTED routers at the edge boosts convergence
network-wide. A full Internet SWIFT deployment would achieve
the utmost advantages of our scheme, as it guarantees ASes to
reroute quickly, independently, and consistently with their policies.
Performance. We implemented SWIFT and used our implementa-
tion to perform extensive experiments using both real and synthetic
BGP traces. Across all our experiments, SWIFT correctly identified
90% of the affected prefixes within 2 seconds. Moreover, a SWIFTED
router can fast reroute 99% of the predicted prefixes with few data-
plane rule updates, i.e., in milliseconds. Finally, we show that our
implementation is practical by using it to reduce the convergence
time of a recent Cisco router by more than 98%.
Contributions. Our main contributions are:
• A thorough analysis of the problem of slow BGP convergence
upon remote outages, including a survey with 72 operators and
measurements on real BGP traces and routers (§2);
• A framework, SWIFT, which enables existing routers to quickly
restore connectivity upon such outages (§3);
• Algorithms for quickly inferring disrupted resources from few
BGP updates (§4) and enabling fast data-plane rerouting (§5);
• An open-source implementation of SWIFT,1 together with a
thorough evaluation (§6) based on real-world BGP traces along
with simulations. Among others, we show that SWIFT achieves
a prediction accuracy and an encoding efficiency above 90%;
1https://github.com/nsg-ethz/swift
(a) Initial forwarding paths
(b) Post-failure paths
Figure 1: Example of slow convergence upon a remote out-
age: routing policies and absence of information about phys-
ical connectivity force AS 1 to wait for 11k BGP withdrawals,
one per prefix owned by AS 6 or AS 8.
• A case study showing that SWIFT can reduce the convergence
time of recent Cisco routers by 98% (§7).
2 THE CASE FOR SWIFT
In this section, we show that slow BGP convergence upon remote
outages is practically relevant. We first discuss the causes for slow
BGP convergence and its effects on data-plane connectivity in a
controlled environment (§2.1). We then present measurements on
real BGP traces and feedback from operators: they demonstrate
that slow convergence problems occur in the Internet and can lead
to significant traffic losses, even for popular destinations (§2.2).
2.1 Slow BGP convergence can cause
significant data-plane losses
We describe an example of slow BGP convergence using the net-
work in Fig. 1(a). Each AS i originates a distinct set of prefixes Si.
We focus on the 21k prefixes of S6, S7 and S8, before and after the
failure of the link (5, 6). Contrary to what happens in the current
Internet (see §2.2.3), we assume that all ASes deploy existing fast-
reroute technologies [11, 25, 37, 60]. Those technologies allow each
AS to quickly restore connectivity upon a local outage, provided
they have a backup path available.
Fig. 1(a) and Fig. 1(b) respectively show pre- and post-failure
AS paths. AS 5 knows an alternate path for S7 (via AS 3) before
the failure. However, because of inter-domain policies (e.g., partial
transit [59]), it does not know any backup path for S6 and S8: for
those prefixes, AS 5 recovers connectivity after the failure via AS 2.
After the failure of (5, 6), AS 5 restores connectivity for S7 almost
immediately by rerouting traffic to its alternate path (through AS 3).
Since AS 5 does not have backup paths for S6 and S8, a blackhole is
created for any flow directed to the corresponding 11k prefixes. In
the control plane, the failure causes AS 5 to send 10k path updates
to notify that it now uses new paths to reach S7, along with 11k path
withdrawals to communicate the unavailability of path (5, 6, 8).
2.1.1 BGP information hiding slows down convergence.
For AS 1 and AS 2, the failure of (5,6) is a remote outage, which
comes with loss of traffic towards S6 and S8. Convergence is inher-
ently slow, since AS 1 and AS 2 only have information about the
best paths used by their neighbors and not all the available ones.
610k10k781k512431k1k67851243SWIFT: Predictive Fast Reroute
Withdrawals Downtime (sec)
10k
50k
100k
290k
3.8
19.0
37.9
109.0
Table 1: Data-plane downtime experienced by AS 1 in Fig. 1
as a function of the burst size. Even for relatively small
bursts, traffic is lost for tens of seconds.
Upon the failure, AS 1 and AS 2 are indeed forced to wait for the
propagation of a large stream of path updates and withdrawals,
potentially arriving one prefix at the time. BGP update packing [57]
can reduce the number of messages by grouping updates together.
However, this mechanism only works if identical BGP attributes are
attached to the prefixes to group – which is often not the case due to
the widespread use of BGP communities [21]. The absolute number
of messages is not the only causes of slow BGP convergence: other
reasons include slow table transfer [13], timers [48, 53] and TCP
stack implementation [1].
Slow convergence is a fundamental feature of inter-domain rout-
ing. Two factors contribute to it. First, routing information must be
propagated on a per-prefix basis, because any single AS can apply
distinct routing policies, hence use different paths, on a per-prefix
basis. Second, routing messages cannot specify network resources
that failed, because AS topologies and policies are hidden by the
routing system (mainly for scalability and AS-level privacy).
2.1.2 Effect on data-plane connectivity.
To quantify how badly slow control-plane convergence can affect
data-plane connectivity, we reproduced the network in Fig. 1 with
recent Cisco routers (Cisco Nexus 7000 C7018, running NX-OS
v6.2). We then measured the downtime experienced by the AS 1
router upon the failure of (5, 6). In successive experiments, we
configured AS 6 to advertise a growing number of prefixes up to
290,000 (roughly half of the current full Internet routing table [5]).
As in [26], we injected traffic towards 100 IP addresses randomly
selected among prefixes advertised by AS 6, and measured the time
taken by AS 1 to retrieve connectivity for all of the probed prefixes.
This methodology provided us with a lower bound estimation of
the downtime that any prefix in the burst could experience.
Recent routers can lose traffic for dozens of seconds upon
remote outages. Table 1 reports the downtime seen by the AS 1
router. Immediately after the link failure, the router starts to drop
packets for all monitored IPs. Connectivity is gradually recovered
as withdrawals are received from AS 2 and traffic is redirected to
AS 3. The evolution of the downtime is roughly linear: for 290k
prefixes, the router takes 109 s to fully converge.
2.2 Slow BGP convergence in the Internet
We now report evidence of slow BGP convergence in the Internet,
along with a discussion on its data-plane impact and on the network
operators’ perspectives.
Technical Report, 2017,
2.2.1 Bursts of withdrawals propagate slowly.
We measured the duration of bursts of BGP withdrawals ex-
tracted from 213 RouteViews [50] and RIPE RIS [9] peering ses-