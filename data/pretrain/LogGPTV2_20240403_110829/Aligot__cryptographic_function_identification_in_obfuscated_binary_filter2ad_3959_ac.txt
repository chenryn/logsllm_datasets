• For each extracted loop data ﬂow Gk, we have the val-
ues of each parameter in INGk and OU TGk .
• For each common cryptographic function F, we have
a source code for a reference implementation PF . In
particular, a prototype describes its high-level parame-
ters, e.g. whether they are of a ﬁxed or variable-length.
The objective of the comparison algorithm is to check if
the relationship between values in INGk and OU TGk is also
maintained by PF . If so, it would imply that the code from
which Gk was constructed implements F. In other words, the
actual output values of PF must match the output values
174Table 1: Loop instance code in the execution trace of P. Each set of adjacent bytes manipulated by an
instruction is noted as a concrete variable.
I[Di]
mov edx, dword ptr [eax+ecx]
xor dword ptr [ebx+ecx], edx
add ecx, 0x4
WA[Di]
RR[Di]
eax:4 ecx:4
WR[Di]
edx:4
402008:4
ebx:4 ecx:4 edx:4
ecx:4
ecx:4
A[Di]
401011
401014
401017
40101a
40101d
401011
401014
401017
40101a
40101d
Di
RA[Di]
402000:4
402008:4
cmp ecx, dword ptr [esp]
12ffc0:4
esp:4 ecx:4
jnz 0x401011
mov edx, dword ptr [eax+ecx]
xor dword ptr [ebx+ecx], edx
402004:4
40200c:4
eax:4 ecx:4
edx:4
40200c:4
ebx:4 ecx:4 edx:4
add ecx, 0x4
ecx:4
ecx:4
cmp ecx, dword ptr [esp]
12ffc0:4
esp:4 ecx:4
jnz 0x401011
in OU TGk when PF is executed on the input values from
INGk .
In this section we will ﬁrst explain the hurdles we
encountered during the comparison phase design, and then
we will describe the actual comparison algorithm.
8.1 Difﬁculties
We use publicly available source codes as reference imple-
mentations. Consequently, there is a diﬀerence in the level
of abstraction between the parameters extracted from exe-
cution traces and the ones deﬁned in high-level source code.
Parameter type. Because what we extract with loop data
ﬂows are low-level parameters, i.e. contiguous memory
addresses and registers, it is not necessarily obvious
how to cast them back into the high-level types of the
function reference implementation. Indeed, this could
lead to artiﬁcial mismatches in the comparison, where
the same value has been represented diﬀerently. This
is why we choose reference implementations with pa-
rameters at the lowest possible level of abstraction,
namely raw values.
Parameter order. High-level implementations declare their
parameters in a speciﬁc order, but loop data ﬂow pa-
rameters are not ordered. Consequently, we have to
test all possible orders.
Parameter fragmentation. The same high-level parame-
ter can be divided in several loop data ﬂow parameters,
e.g. when it is passed by registers but can not ﬁt in
only one of them. Therefore, loop data ﬂow parameter
values have to be combined to build the high-level pa-
rameter value. In other words, the mapping between
loop data ﬂow parameters and their high-level coun-
terparts is not 1-to-1, but n-to-1.
Parameter number. Loop data ﬂow parameters not only
capture cryptographic parameters but also implementation-
dependent ones, as shown in the §6.3 example. Thus,
some loop data ﬂow parameters will not have a match-
ing high-level parameter.
8.2 Comparison Algorithm
ﬂow Gk with the following steps:
The comparison algorithm tries to identify a loop data
1. Generation of all possible I/O values Values in
INGk are combined by appending them to each other.
We generate all combinations of all possible lengths.
The same thing is done for output values in OU TGk .
For example, in §6.3 we generated as input parameters
5 values of length 4, 22 values of length 8 (all pairs
of 4-byte values in both order, plus the two 8-byte
values), etc. In practice the number of actual values
generated can be strongly reduced if the analyst elim-
inates obvious implementation-dependent parameters,
e.g. memory addresses.
2. Input parameter mapping. For each cryptographic
reference implementation PF , the algorithm selects for
each high-level parameter its possible values among
the ones generated in the previous step. In particular,
for ﬁxed-length parameters, only values with correct
length are chosen.
3. Comparison. The program PF is executed on each
possible combinations of its selected input values. If,
at some point, the values produced are in the set of the
possible output values generated in step 1, then it is a
success. If this is not the case, the algorithm iterates
until all combinations have been tested.
9. EVALUATION
We built a tool set, named Aligot, that implements the
whole identiﬁcation process, as described in Fig. 8. The
tool is made of approximately 2000 lines of Python, plus 600
lines of C++ for the tracer engine. The set of cryptographic
reference implementations has been built with the PyCrypto
package [16].
Figure 8: Aligot architecture
In order to evaluate Aligot, we used the following algo-
rithms: the Tiny Encryption Algorithm (TEA) [35], the RC4
algorithm [34], the Advanced Encryption Standard (AES) [8]
and the MD5 algorithm [23]. In addition, we explored the
identiﬁcation of modular multiplication in RSA [24]. For
BinaryProgramTracerExecutionTraceLoop Data FlowConstructionI/OParametersComparisonResultsReferenceImplementations175Table 2: Detection results for various synthetic and malware samples. The name of the identiﬁed function
is written and  indicates that no functions have been identiﬁed. Programs with ∗ are malware samples
protected with their own custom packer. Programs with † are sample programs packed with the commercial
packer AsProtect. The Sal column actually accounts for the (identical) results for the four Sality samples
Sal1, Sal2, Sal3 and Sal4.
Aligot
B1
TEA
B2
TEA
Storm∗
RTEA
SBank∗
RTEA
B3
RC4
Sal∗
RC4
B4
AES
†
B5
AES MD5 MD5
B6
B7
†
†
B8
Wal∗
AES, MOD
MUL
MD5

CryptoSearcher TEA
Draca
TEA
Findcrypt2
H&C Detector
Kerckhoﬀs
PEiD KANAL
Signsrch
SnDCryptoS
TEA
TEA
TEA



















TEA

TEA

TEA
TEA

















AES

AES


AES
AES
AES








MD5
MD5
MD4
MD5

MD5

MD5

SHA-1

SHA-1




















each of these algorithms, we compared Aligot with currently
available cryptographic identiﬁcation tools on both synthetic
examples and malware samples.
9.1 Tiny Encryption Algorithm
TEA is an 8-byte block cipher using a 16-byte key and is
built as a 64-round Feistel network [35]. One of its partic-
ularities is the use of a constant value named delta, that is
ﬁxed at 0x9E3779B9 in its standard speciﬁcation.
9.1.1 Detection Evaluation on Synthetic Examples
First, we veriﬁed the correctness of our identiﬁcation pro-
cess: we created 2 synthetic examples based on the source
code published in the original TEA paper [35]. In each of
these synthetic examples, we simply called once the TEA
decryption function on the key 0xDEADBEE1...DEADBEE4 (16
bytes) and the encrypted text 0xCAFEBABECAFEBABE (8 bytes).
We then obtained the three following binary programs:
• B1: original TEA source code compiled with the Mi-
crosoft Visual Studio Compiler (MSVC) without any
optimization (/Od option).
• B2: same as B1, except that we replaced the standard
initialization of the delta value in assembly language
(mov reg, delta) with an lightly obfuscated version
using two instructions (add reg, delta/2). Conse-
quently, the algorithm semantics is preserved but delta
is no longer statically visible.
The detection results are presented in Table 2. We can
interpret these results in the following manner:
• B1 allows to calibrate the evaluation. Tools failing to
detect this classic implementation should not be con-
sidered as relevant, because they probably have no
means to detect TEA. Nevertheless, we still mention
their results for the sake of completeness.
• B2 is identiﬁed as a TEA implementation only by Aligot.
We can then conclude that other tools base their de-
tection solely on the static visibility of delta.
9.1.2 Detection Evaluation on Malware Samples
We investigated two malware families, called Storm Worm
and SilentBanker, that were publicly referenced as using
TEA [5, 22].
In both cases, the cryptographic implemen-
tation is part of the binary protection layers, that is, obfus-
cated code protecting the core logic. We collected one sam-
ple for each malware family, respectively Storm and SBank.
The detection results are presented in Table 2.
Storm Worm. No TEA implementations were identiﬁed in
the Storm Worm sample by Aligot. It means that, for each
extracted loop data ﬂow, its observed I/O relationship is not
reproducible with a TEA reference implementation, accord-
ing to our tool.
To conﬁrm this, we isolated the part of the Storm Worm
sample described as a TEA implementation by public sources
[5] and analyzed it in-depth: (i) the code is a 8-byte block-
cipher with a 16-byte key, exactly like TEA, (ii) the constant
value delta is used during the decryption process, and (iii)