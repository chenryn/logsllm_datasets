4.当一个节点找到了一个工作量证明，它就向全网进行广播；  
5.当且仅当包含在该区块中的所有交易都是有效的且之前未存在过的，其他节点才认同该区块的有效性；  
6.其他节点表示他们接受该区块，而接受的方法则是跟随在该区块的末尾，制造新的区块以延长该链条，并将该区块的随机散列值视为新区块的随机散列值。  
也就是说，交易发生的一刻起，比特币的交易就被盖上了时间戳，而当这笔交易数据被打包到一个区块中后，就算完成了一次确认；在连续进行6次确认之后，这笔交易就不可逆转了；在比特币中，每一次确认都需要“解决一个复杂难题”，也就是说每一次确认都需要一定的时间。  
在这种情况下，当我试图把一笔资金进行两次支付交易的时候，因为确认时间较长，后一笔交易想要与前一笔交易同时得到确认几乎是不可能的，而这笔资金在第一次交易确认有效后，第二次交易时就无法得到确认。区块链的全网记账需要在整个网络中达成共识，双花问题是无法产生的。
# 分布式系统核心问题
## 一致性问题
在分布式系统中，一致性是指对于系统中的多个服务节点，给定一系列操作，在协议保障下，试图使得他们对处理结果达成某种程度的一致。  
如果分布式系统能够实现“一致”，对外就可以呈现为一个功能正常的，且性能和稳定性都要好很多的“虚处理节点”  
例如：某影视公司旗下有西单和中关村两个影院，都出售电影票，票一共一万张。那么，顾客到达某个电影院买票的时候，售票员该怎么解决是否该卖这张票，才能避免超售呢？当电影院个数更多的时候呢？  
这个问题在人类世界中，看起来似乎没有那么难，你看，英国人不是刚刚靠“投票”达成了“某种一致性”吗？哈哈哈~~~  
注意：一致性并不代表结果正确与否，而是系统对外呈现的状态是否一致，例如，所有节点都达成失败或者成功的状态的一致性。
## 共识算法
要保障系统满足不同程度的一致性，往往需要通过共识算法来达成。  
共识算法解决的是对某个提案让大家达成一致意见的过程。提案的含义在分布式系统中十分宽泛，如多个时间发生的顺序、某个键对应的值.....等等,可以认为任何需要达成一致的信息都是一个提案。
## CAP
CAP原理最早由Eric Brewer在2000年，ACM组织的一个研讨会上提出猜想，后来Lynch等人进行了证明。该原理被认为是分布式系统领域的重要原理。  
CAP原理，即分布式系统不可能同时确保一致性（Consistency）、可用性（Availablity）、和分区容忍性（Partition），设计中往往需要弱化对某个特性的保证。  
**一致性:** 任何操作都是原子的，发生在后面的事件能看到前面事件发生导致的结果。  
**可用性:** 在有限的时间内，任何非失败节点都能应答请求。  
**分区容忍性：** 网络可能发生分区，即节点之间的通信不可保障。
比较直观的理解，当网络可能出现分区的时候，系统是无法同时保证一致性和可用新的。要么，节点收到请求后因为没有得到其他人的确认就不应答，要么节点只能应答非一致性的结果。  
好在大部分时候网络被认为是可靠的，因此系统可以提供一致可靠的服务；当网络不可靠时，系统要么牺牲掉一致性，要么牺牲掉可用性。
## 拜占庭问题与算法
拜占庭问题更为广泛，讨论的是允许存在少数节点作恶（消息可能被伪造）场景下的一致性达成问题。拜占庭算法讨论的是最坏情况下的保障。  
**中国将军问题**  
拜占庭将军问题之前，就已经存在中国将军问题：两个将军要通过信使来达成进攻还是撤退的约定，但信使可能迷路或被敌军阻拦（消息丢失或伪造），如何达成一致。根据不可能原理，这个问题无解。  
**拜占庭问题**  
又叫拜占庭将军（Byzantine Generals Problem）问题，是 Leslie Lamport 1982
年提出用来解释一致性问题的一个虚构模型。拜占庭是古代东罗马帝国的首都，由于地域宽广，守卫边境的多个将军（系统中的多个节点）需要通过信使来传递消息，达成某些一致的决定。但由于将军中可能存在叛徒（系统中节点出错），这些叛徒将努力向不同的将军发送不同的消息，试图会干扰一致性的达成。  
拜占庭问题即为在此情况下，如何让忠诚的将军们达成行动的一致性。
# 区块链涉及的安全技术
## Hash算法
哈希算法是区块链中保证交易信息不被篡改的单向密码机制。哈希算法接收一段明文后，以一种不可逆的方式将其转化为一段长度较短、位数固定的散列数据。  
**它有两个特点：**  
1.加密过程不可逆，意味着我们无法通过输出的散列数据倒推出原本的明文是什么；  
2.输入的明文与输出的散列数据一一对应，任何一个输入信息的变化，都必将导致最终输出的散列数据的变化。  
在区块链中，通常使用SHA-256(完全散列算法)进行区块加密，这种算法的输入长度为256位，输出的是一串长度为32字节的随机散列数据。区块链通过哈希算法对一个交易区块中的交易信息进行加密，并把信息压缩成由一串数字和字母组成的散列字符串。区块链的哈希值能够唯一而准确地标识一个区块，区块链汇总任意节点通过简单的哈希计算都可以获得这个区块的哈希值，计算出的哈希值没有变化也就意味着区块中的信息没有被篡改。  
## 公钥和私钥
在区块链的话题中，我们还经常会听到这样的词汇————公钥、私钥。这就是俗称的不对称加密方式，是对以前的对称加密方式的一种提高。在我们的交易过程中，经常会使用到公钥与私钥，图解如下：  
  1. 交易的原始数据包括“转账数额”和“转入钱包地址”，但是仅有这些是不够的，因为无法证明交易的生成者对“转出钱包地址”余额有动用的权利。所以需要用“私钥”对原始数据进行签名。
  2. 生成“转出钱包公钥”，这一过程与生成“钱包地址”的第2步是一样的。
  3. 将“转出签名”和“转出公钥”添加到原始交易数据中，生成了正式的交易数据，这样它就可以被广播到比特币网络进行转账了。  
##时间戳  
区块链中的时间戳从区块生成的一刻开始就存在与区块中，它对应的是每一次交易记录的认证，证明交易记录的真实性。  
时间戳是直接写在区块链中的，而区块链中已经生成的区块不可篡改，因为一旦篡改，生成的hash值就会发生变化，从而变成一个无效的数据。每一个时间戳都会将前一个时间戳也纳入其随机数hash值中，这一过程不断重复，依次相连，最后生成一个完整的链条。  
##Merkle树结构  
区块链利用Merkle数的数据结构存放所有叶子节点的值，并以此为基础生成一个统一的Hash值。Merkle数的叶子节点存储的是数据信息的hash值，非叶子的节点存储的是对其下面所有叶子节点的组合进行hash计算后得出的hash值。  
同样的，区块链中任意一个数据的变更都会导致Merkle树结构发生变化，在交易信息验证比对的过程中，Merkle树结构能够大大减少数据的计算量，毕竟，我们只需要验证Merkle树结构生成的统一hash值就ok了。  
# 区块链的优点
**完全分布式：** 任意节点宕机不会导致网络崩溃。  
**去信任性：** 每一笔交易都由全网节点共同背书，所以不需要知道对方的身份，可以接受对方的交易。  
**解决了数字货币的“双花”问题**  
**降低交易成本：** 因为不需要查清对方的信用，也就不需要征信，所以大大降低交易成本  
**提高了可靠性和不可篡改性：** 只有全网51%的节点被攻破才能篡改账本，作假成本极高，需要很大的算力，  
**瞬间公证、清算、审计、财务公开：** 由于所有数据全网都有，所以随时随刻可以清算、审计，完全公开，这解决了人类财务体系的痛点。  
**私密性：** 由于不需要对方的信用，所以可以匿名交易，交易的数据也可以加密，所以交易的私密性可以得到保障。
# 区块链的局限性
**性能与容量问题：**  
1.去中心化程度与共识机制效率的矛盾：去中心化程度越高，共识机制效率越低，交易时延越长，交易吞吐越低，因此两者必须平衡。  
2.账本存储容量和处理性能的矛盾：账本规模的增长，会带来节点的硬件资源门槛的提高。  
**安全性局限**  
1.51%攻击：需要引入大量节点，如果节点太少，51%攻击很容易。  
2.私钥与终端安全：私钥存储在用户终端本地，如果私钥被窃取，就会出现资金损失。  
3.共识机制安全：PoW、PoS的共识机制是否真正安全，缺乏严格的证明和试验。
# 区块链应用的分类
**区块链1.0应用：** 数字货币  
**区块链2.0应用：** 智能合约+数字货币，例如：跨境支付、反洗钱、证券发行与交易、数字化资产等。  
**区块链3.0应用：** 扩展到金融行业以外其他行业  
1.隐私数据存储：区块链的高冗余存储、去中心化、高安全性和隐私保护等特点，使其特别适合存储和保护重要隐私数据。  
2.防伪溯源：善款进入系统后，整个生命周期都将记录在区块链上，没有人工拨付等环节，每一笔款项的去向很难人工更改。这样就可以促进公益捐款全过程的开放和透明。  
3.身份认证：区块链数字身份识别证书  
4.能源管理：去中心化网络，让网内用户在其屋顶太阳能发电超过需求时，可卖给社区的邻居，可以彼此互通有无，并以区块链虚拟货币来结算。  
5.投票：开源在线投票。
## PS:
因为最近比较忙，而这篇文章也是赶了好久完成的，所以如果有纰漏之处还请各位多多见谅！后期如果有时间、有机会的话，定为大家分享更多与区块链相关的技术与知识，例如智能合约安全审计系列、钱包、交易所、以及公链安全性技术问题的研讨，敬请期待！谢谢各位的阅读！
## 参考：
【1】《图说区块链》  
【2】《人人都懂区块链》  
【3】《区块链技术指南》