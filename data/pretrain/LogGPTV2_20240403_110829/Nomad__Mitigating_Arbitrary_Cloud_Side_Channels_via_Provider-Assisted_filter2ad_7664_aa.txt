# Nomad: Mitigating Arbitrary Cloud Side Channels via Provider-Assisted Migration

## Authors
- Soo-Jin Moon, Carnegie Mellon University, Pittsburgh, PA, USA
- Vyas Sekar, Carnegie Mellon University, Pittsburgh, PA, USA
- Michael K. Reiter, University of North Carolina, Chapel Hill, NC, USA

## Abstract
Recent studies have revealed a range of co-residency side channels that can be exploited to extract private information from cloud clients. Addressing these side channels often requires detailed, attack-specific fixes that necessitate significant modifications to hardware, client virtual machines (VMs), or hypervisors. These solutions are not generalizable to future side channels and can lead to an unsustainable cycle of constant updates. 

Nomad is a system that offers vector-agnostic defense against both known and future side channels by leveraging provider-assisted VM migration. This approach applies the moving target defense philosophy to limit information leakage due to side channels. The key contributions of Nomad include:
1. A formal model to capture information leakage via side channels in shared cloud deployments.
2. Identification of provider-assisted VM migration as a robust defense for arbitrary side channels.
3. A scalable online VM migration heuristic capable of handling large datacenter workloads.
4. A practical implementation in OpenStack.

We demonstrate that Nomad is scalable to large cloud deployments, achieves near-optimal information leakage bounds under constraints on migration overhead, and imposes minimal performance degradation for typical cloud applications such as web services and Hadoop MapReduce.

## Categories and Subject Descriptors
D.4.6 [OPERATING SYSTEMS]: Security and Protection – Information flow controls

## General Terms
Security

## Keywords
Cloud computing, Cross-VM side-channel attacks, VM migration

## 1. Introduction
Recent research has highlighted the potential for information leakage via co-residency side channels in shared cloud environments, where VMs from different clients are multiplexed on the same hardware. Various side channels have been demonstrated, exploiting different levels of hardware caches, main memory, and OS/hypervisor scheduling effects to extract private information from unsuspecting co-resident clients. The set of known side channels and the efficiency of information leakage continue to grow over time.

Mitigating side-channel attacks typically requires detailed, attack-specific fixes to hardware, guest VM OS configurations, and hypervisors. This leads to two practical problems: significant changes to existing deployments and applications, and an untenable trajectory of constant hardware/software changes to address future attacks.

Ideally, we want defenses that are general across a broad spectrum of side-channel attacks and immediately deployable with minimal or no modifications to existing cloud hardware and software. Single tenancy, which eliminates co-residency, is one solution but reduces the cost savings via statistical multiplexing, a key driver for cloud adoption.

In this paper, we present Nomad, a system that demonstrates it is possible to achieve a general and immediately deployable defense against side-channel attacks without resorting to single tenancy. Nomad leverages cloud providers' ability to offer a migration-as-a-service to their clients, applying the moving target defense philosophy to mitigate side channels.

This approach has several advantages:
1. By focusing on the root cause of side channels (i.e., co-residency), Nomad is agnostic to the specific side-channel vector used and is robust against unforeseen side channels.
2. It requires no changes to the cloud provider's hardware, client applications, or hypervisors and can be deployed "out of the box" by changing only the VM placement/scheduling algorithms.

The key challenges in realizing this vision in practice are:
1. Scalability of the placement and migration scheduler.
2. Impact on application performance.

To address these, we develop scalable heuristics for large-scale cloud deployments and evaluate application performance using a proof-of-concept implementation of Nomad atop OpenStack. We observe that the performance impact on applications is minimal with Nomad’s default configurations, which can handle several classes of attacks. For fast side channels, out-of-band defense may be necessary, and many cloud applications have built-in resilience to minimize the impact of Nomad-induced migrations.

### Contributions and Roadmap
This paper makes four key contributions:
- We formalize the problem space and characterize different models of information leakage across two key dimensions: collaboration across adversary VMs and information replication across a client's own VMs.
- We identify provider-assisted live migration as a robust defense against a broad spectrum of co-residency side channels.
- We develop a practical and scalable migration strategy that can handle large datacenter workloads, significantly faster than strawman solutions.
- We develop a practical implementation of Nomad by extending OpenStack.

In the rest of the paper, we begin with background and related work in Section 2. We evaluate Nomad’s scalability and information leakage resilience in Section 8. We discuss potential attacks against Nomad in Section 6 and open issues in Section 9, before concluding in Section 10.

## 2. Background and Related Work
This section reviews recent work on side channel threats in public clouds and argues why known defenses are not practical. We also provide a brief overview of prior work on VM live migration.

### Side-channel attacks in cloud
Cloud services, such as Infrastructure-as-a-Service, place VMs of different clients on the same physical machine, relying on virtual machine monitors (VMMs) to provide isolation between co-resident VMs. Unfortunately, this is insufficient, and recent works have demonstrated the feasibility of adversaries performing cross-VM side-channel attacks. Examples include identifying the location of a target VM, revealing information about the victim's applications and OS, exfiltrating cryptographic keys, and exploiting memory sharing.

### Proposed defenses against side channels
Several countermeasures have been proposed at different levels: hypervisor, guest OS, hardware, and application-layer approaches. Hypervisor-based approaches include hiding program execution time and altering timing exposed to external observers. Defenses inside the client guest OS include injecting noise into protected processes, and at the application level, partitioning cryptographic keys across multiple VMs. Hardware-based defenses involve access randomization and resource partitioning.

These approaches suffer from two fundamental limitations: they cannot be generalized to different types of side channels, and they require significant changes to the hypervisor, OS, hardware, and applications.

### VM migration and placement
VM live migration has become an invaluable management tool. Recent efforts formulate the theoretical problem of VM placement to limit cross-VM side-channel attacks. Nomad is more scalable, general in terms of threat model, and makes no assumptions about which clients or VMs are likely threats. Furthermore, Nomad provides a practical implementation in OpenStack with minimal code changes.

## 3. Problem Overview
This section describes a general model of information leakage in public clouds that is independent of specific types of side channels, captures powerful adversaries whose VMs may collaborate, and incorporates the information replication characteristics of clients.

### Threat Model
We assume each cloud client has some private information, and the goal of the adversary is to extract as much information as possible. The adversary model includes:
- Arbitrary side channels: The adversary can launch a wide spectrum of (possibly unknown) side-channel attacks.
- Target identification: The adversary can determine if/when the target client of interest is co-resident with a VM it owns.
- Arbitrary client workload: The adversary can control its own workload and launch VMs as it chooses.
- Efficient information collation: The adversary can accumulate private bits across time when co-resident with the target.
- Unknown adversary: The client or cloud provider cannot pinpoint a specific malicious client.

We impose two constraints on adversaries’ capabilities:
- The adversary does not have explicit control over the placement of VMs.
- There is no collusion across clients, and there is a non-trivial cost to creating a new client identifier.

### Components of Information Leakage Model
We identify three key dimensions that affect information leakage:
1. Across time: The total amount of private information leaked is proportional to the total temporal co-residency between VMs.
2. Collaboration: Adversary VMs can collaborate to aggregate information.
3. Replication: Clients may replicate their information across multiple VMs.

Figure 1 illustrates these dimensions using an example scenario with two clients: Blue and Red, with 2 and 3 VMs, respectively. The figure shows the placement of their VMs across three epochs and three machines with two VM slots per machine.

If we assume a constant leakage rate of K bits per epoch, the total leakage will be more if the VMs are co-resident longer. In Figure 1, the total leakage is proportional to the total temporal co-residency between the VMs.