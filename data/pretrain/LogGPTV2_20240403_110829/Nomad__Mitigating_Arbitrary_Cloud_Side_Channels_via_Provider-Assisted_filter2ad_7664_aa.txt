title:Nomad: Mitigating Arbitrary Cloud Side Channels via Provider-Assisted
Migration
author:Soo-Jin Moon and
Vyas Sekar and
Michael K. Reiter
Nomad: Mitigating Arbitrary Cloud Side Channels
via Provider-Assisted Migration
Soo-Jin Moon
Carnegie Mellon University
Pittsburgh, PA USA
PI:EMAIL
PI:EMAIL
Vyas Sekar
Carnegie Mellon University
Pittsburgh, PA USA
Michael K. Reiter
University of North Carolina
Chapel Hill, NC USA
PI:EMAIL
ABSTRACT
Recent studies have shown a range of co-residency side channels
that can be used to extract private information from cloud clients.
Unfortunately, addressing these side channels often requires de-
tailed attack-speciﬁc ﬁxes that require signiﬁcant modiﬁcations to
hardware, client virtual machines (VM), or hypervisors. Further-
more, these solutions cannot be generalized to future side channels.
Barring extreme solutions such as single tenancy which sacriﬁces
the multiplexing beneﬁts of cloud computing, such side channels
will continue to affect critical services. In this work, we present
Nomad, a system that offers vector-agnostic defense against known
and future side channels. Nomad envisions a provider-assisted VM
migration service, applying the moving target defense philosophy
to bound the information leakage due to side channels. In design-
ing Nomad, we make four key contributions: (1) a formal model
to capture information leakage via side channels in shared cloud
deployments; (2) identifying provider-assisted VM migration as a
robust defense for arbitrary side channels; (3) a scalable online VM
migration heuristic that can handle large datacenter workloads; and
(4) a practical implementation in OpenStack. We show that No-
mad is scalable to large cloud deployments, achieves near-optimal
information leakage subject to constraints on migration overhead,
and imposes minimal performance degradation for typical cloud
applications such as web services and Hadoop MapReduce.
Categories and Subject Descriptors
D.4.6 [OPERATING SYSTEMS]: Security and Protection – In-
formation ﬂow controls
General Terms
Security
Keywords
Cloud computing; Cross-VM side-channel attacks; VM migration
1 Introduction
Several recent efforts have demonstrated the possibility of informa-
tion leakage via co-residency side channels in shared cloud envi-
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’15, October 12–16, 2015, Denver, Colorado, USA.
c(cid:13) 2015 ACM. ISBN 978-1-4503-3832-5/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2810103.2813706.
ronments, where VMs from different clients are multiplexed on the
same hardware. Following the early work of Ristenpart et al., [33],
a variety of side channels have already been demonstrated. These
exploit different levels of hardware caches [42, 44], main mem-
ory [36], and OS/hypervisor scheduling effects [42] to extract pri-
vate information from unsuspecting co-resident clients. The set of
known side channels and the efﬁciency of information leakage con-
tinue to grow over time.
Unfortunately, mitigating side-channel attacks forces cloud prov-
iders and clients into undesirable situations. Each such side channel
requires detailed ﬁxes to hardware, guest VM OS conﬁgurations,
and hypervisors (e.g., [32, 37, 34, 23, 45]). This has two practi-
cal problems. First, these require signiﬁcant changes to existing
deployments and applications. Second, given that the set of side
channels is unknown (and growing), this puts us on an untenable
trajectory of constant hardware/software changes to tackle future
attacks.
Ideally, we want defenses that are (a) general across a broad
spectrum of side-channel attacks and (b) immediately deployable
with minimal or no modiﬁcations to existing cloud hardware and
software. At ﬁrst glance, these goals seem fundamentally at odds
with the multiplexing beneﬁts of cloud computing since the ulti-
mate way to avoid side channels is to eliminate co-residency alto-
gether; i.e., by creating “private” single-client deployments. How-
ever, this reduces the cost savings via statistical multiplexing, which
has been a key driver for cloud adoption.
In this paper, we present Nomad, a system that demonstrates
that it is possible to achieve a general and immediately deploy-
able defense against side-channel attacks without resorting to sin-
gle tenancy. The high-level idea behind Nomad is simple. Rather
than eliminate co-residency altogether, we aim to limit the infor-
mation leakage due to co-residency by carefully coordinating the
placement and migration of VMs. To this end, we envision cloud
providers offering a migration-as-a-service to their clients to mit-
In this respect, Nomad can be
igate co-residency side channels.
viewed as an application of the moving target defense philosophy
to mitigate side channels [13].
This approach has several natural advantages. First, by focusing
on the root cause of side channels (i.e., co-residency), Nomad is ag-
nostic to the speciﬁc side-channel vector used, and is robust against
unforeseen side channels that meet certain conditions (§4). Second,
it requires no changes to the cloud provider’s hardware, client ap-
plications, and hypervisors and can be deployed “out of the box” as
it requires only changing the VM placement/scheduling algorithms
deployed by the cloud provider.
The key challenges in realizing this vision in practice are (1)
scalability of the placement and migration scheduler and (2) impact
on application performance. For (1), we develop scalable heuristics
that can handle large-scale cloud deployments. For (2), we use a
proof of concept implementation of Nomad atop OpenStack [5]
and evaluate application performance for Wikibench [6] and Hado-
op MapReduce [2]. We observe that the performance impact on
applications is minimal with Nomad’s default conﬁgurations which
can handle several classes of attacks. However, for emerging at-
tacks that rely on fast side channels (i.e., capable of extracting a
key in few minutes), we acknowledge the need for out-of-band
defense.1 Furthermore, many cloud applications have in-built re-
silience which further minimizes impact of Nomad-induced mi-
grations; e.g., web servers run replicas with elastic load balancing
and Big-Data workloads have mechanisms to deal with stragglers
(e.g., [14]).
Contributions and Roadmap: In summary, this paper makes four
contributions:
• We formalize the problem space and characterize different mod-
els of information leakage across two key dimensions: collabo-
ration across adversary VMs and information replication across
a client’s own VMs (§3).
• We identify provider-assisted live migration as a robust defense
• We develop a practical and scalable migration strategy that can
handle large datacenter workloads, which is several orders of
magnitude faster than strawman solutions (§5).
• We develop a practical implementation of Nomad by extending
against a broad spectrum of co-residency side channels (§4).
OpenStack (§7).
In the rest of the paper, we begin with background and related
work in §2. We evaluate Nomad’s scalability and information leak-
age resilience in §8. We discuss potential attacks against Nomad in
§6, and open issues in §9, before concluding in §10.
2 Background and Related Work
In this section, we review recent work on side channel threats in
public clouds and argue why known defenses are not practical. We
also provide a brief overview on prior work on VM live migration.
Side-channel attacks in cloud: Cloud services (e.g., Infrastructure-
as-a-Service) place VMs of different clients on the same physical
machine. This relies on virtual machine monitors (VMM) to pro-
vide isolation between co-resident VMs. Unfortunately, this is in-
sufﬁcient, and recent works (e.g., [33, 36, 29, 41, 37, 42, 27, 21])
have demonstrated the feasibility of adversaries performing cross-
VM side-channel attacks. One of the ﬁrst use cases of cross-VM
side-channel attacks in cloud was to demonstrate that an attacker
can identify where the target VM is likely to reside by measur-
ing activity burst time of a VM [33]. Other attacks have identiﬁed
pages that a VM shares with its co-resident client VMs, reveal-
ing information about the victim’s applications [36] and OS [29].
More ﬁne-grained attacks have exﬁltrated cryptographic keys via
Prime+Probe attacks on the square-and-multiply implementation
of GnuPG [42] and sensitive application data on Platform-as-a-
Service (PaaS) clouds [44]. Furthermore, some side channels have
extracted keys by exploiting the memory sharing (i.e., memory
deduplication) on LLC (last-level caches) [41, 20]. Recently, re-
searchers have demonstrated fast side channels. Liu et al., [27]
have shown a fast Prime+Probe attack on LLC by probing only
one cache set, and Irazoqui et al., [21] have recovered the AES key
in 2–3 min by exploiting the use of huge size pages.
1Adjusting the conﬁgurations to handle fast side channels (i.e., [27,
21]) comes at a cost of performance degradation. Thus, we recom-
mend the use of other side-channel defenses in conjunction with
Nomad to strengthen the defense (§4).
Proposed defenses against side channels: Given the spate of
attacks, several countermeasures have been proposed at different
levels: hypervisor, guest OS, hardware and application-layer ap-
proaches.
Hypervisor-based approaches include hiding the program execu-
tion time [38] and altering the timing exposed to an external ob-
server [26]. To address the attack of Zhang et al., [42] which ex-
tracted a key by frequently preempting a target VM, Varadarajan
et al., [37] proposed modifying the Xen scheduler to limit the fre-
quency in which an attacker can preempt the victim. Hypervisor-
based defenses can also use statistical multiplexing of shared re-
sources to prevent eavesdropping [32, 23]. In particular, Kim et
al., [23] proposed locking cache lines to prevent preemption by an
attacker and multiplexing the cache lines among VMs such that
each has an access to its own.
Defenses have been suggested inside the client guest OS (e.g. in-
jecting noise into protected processes on L1 and L2 caches [45]), or
at the application level (e.g., partitioning a cryptographic key across
multiple VMs [31]). Other than software-based defenses, defenses
can also be incorporated in hardware designs by applying access
randomization (e.g., [40, 28]) and resource partitioning (e.g., [30]).
At a high level, these proposed approaches suffer from two fun-
damental limitations as (1) they cannot be generalized to different
types of side channels; and (2) these require signiﬁcant changes to
the hypervisor, OS, hardware, and applications.
VM migration and placement: A key enabler for our work is
VM live migration that has become an invaluable management tool.
These general trends with the advancement of VM live migration
bode well for the adoption of Nomad (e.g., [16, 35, 22, 46]).
VM placement as side-channel defenses: Concurrent to our work
on Nomad, recent efforts also formulate theoretical problem of VM
placement to limit cross-VM side-channel attacks (e.g., [9, 43, 25,
19]). The work closest to Nomad is by Li et al., [25]. In compar-
ison to these efforts, Nomad is a) more scalable (e.g., we can han-
dle tens of thousands machines whereas most of these efforts do
not consider scalability); b) more general in terms of threat model
(e.g., we consider collaboration and replication); and c) makes no
assumption on which clients or VMs are likely threats. Further-
more, these efforts fall short of providing a real implementation;
we demonstrate a practical implementation in OpenStack with
minimal code changes.
3 Problem Overview
In this section, we describe a general model of information leak-
age in public clouds that (a) is independent of the speciﬁc types
of side channels; (b) can capture powerful adversaries whose VMs
may collaborate; and (c) incorporates the information replication
characteristics of clients.
3.1 Threat Model
We begin by scoping the adversary goals and capabilities.
Adversary goals and capabilities: We assume that each cloud
client has some private information (e.g., secret keys or private
database records). The goal of the adversary is to extract as much
information as possible. We consider a powerful adversary model
with the following characteristics:
• Arbitrary side channels: The adversary is capable of launching
a wide spectrum (of possibly unknown) side-channel attacks
against other co-resident VMs. We are agnostic to the spe-
ciﬁc algorithms or system resources used by these side chan-
nels (e.g., CPU, memory, network, power).
• Target identiﬁcation: We assume that the adversary can deter-
mine if/when the target client of interest is co-resident with a
VM it owns; e.g., inspecting the pattern of behavior or using
external probing [33]. As such, we assume detecting the target
incurs zero cost to the adversary.
• Arbitrary client workload: We consider an open system where
the adversary can control its own workload and launch VMs
and terminate them as it chooses.
• Efﬁcient information collation: We assume that the adversary
can accumulate private bits across time (epochs) when it is co-
resident with the target and has some intelligent techniques for
information aggregation. For example, if a client C and adver-
sary A are co-resident at time T1 and T3, but not T2, then we
assume that A can combine the information it has gathered dur-
ing T1 and T3. Note that by assuming such efﬁcient collation,
we consider a stronger adversary model; i.e., in practice a real
adversary may get duplicate/redundant bits across epochs but
we conservatively assume that the adversary gets unique bits
per epoch.
• Unknown adversary: Finally, we assume that the client or the
cloud provider cannot pinpoint a speciﬁc client who could be
malicious.
We do, however, impose two constraints on adversaries’ capabil-
ities. First, we assume that the adversary does not have explicit con-
trol over the placement of VMs in the cloud environment. Second,
we assume that while the VMs for the same client may collaborate
in some deployment models, there is no collusion across clients.
With respect to collusion, we assume that there is some non-trivial
cost to creating a new client identiﬁer (e.g., a veriﬁed credit card)
so that it is not possible to launch Sybil attacks for collusion [12].
Moreover, in order to formulate arbitrary side-channel attacks, we
abstract away the details of individual attacks, and consider an at-
tack that has a constant leakage rate of K bits per epoch. We ac-
knowledge that different attacks may have different rates or dif-
ferent temporal properties (e.g., K may decrease or increase with
time). Modeling the temporal efﬁciency of attacks is outside the
scope of this paper.
3.2 Components of Information Leakage Model
Figure 1: Implication of having Replicated (R) vs. NonRepli-
cated (NR) clients and Collaborating (C ) vs. NonCollaborating
(NC ) adversaries
We identify three key dimensions that affect information leakage
(InfoLeakage) model that we discuss below. We explain these us-
ing the example scenario in Figure 1 where we have two clients:
Blue and Red with 2 and 3 VMs respectively. The ﬁgure shows
the placement of their VMs across three epochs across 3 machines
with 2 VM slots per machine.
1. Across time: The total amount of private information leaked
from a client c to c(cid:48) is naturally proportional to the total tem-
poral co-residency between their VMs. For instance, in the
Prime+Probe attack by Zhang et al., [42], information leak-
age happens at a rate of few bits per minute and thus the total
leakage will be more if they are co-resident longer. In Figure 1
if we assume a constant leakage rate of K bits per epoch via