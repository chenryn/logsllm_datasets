uses the same certiﬁcate for both RSA key exchange and RSA
signing, an attacker can leverage the RSA key exchange to fake
server signatures, which are supported in the newer protocols.
As an example of such a case, we note that at the time of
writing, Amazon AWS servers use the same RSA certiﬁcate
for signing and for key exchange.
To avoid losing clients, servers continue to support older
protocols, and are likely to continue doing so for the foresee-
able future. Consequently, padding oracle attacks are likely to
remain a threat to almost all TLS connections.
Mounting Online Padding Oracle Attacks.
To mount
such an online padding oracle MitM attack, the attacker has to
recover the premaster secret before the browser times out the
TLS connection. The approach to achieve this depends on the
browser that the victim uses. Adrian et al. [4] show a technique
that forces Firefox to keep a TLS handshake alive indeﬁnitely,
thus allowing us to perform even very long attacks. Using a
BEAST style technique [23] we can perform this attack in the
background, without the user noticing any long delays. Other
browsers, however, are not as easy to attack—they enforce
stricter time limits on TLS handshakes. For example, Google
Chrome and Microsoft Edge time TLS handshakes out after
only about 30 seconds. Thus, when mounting padding oracle
MitM attacks against these browsers, the attacker has to be
extremely efﬁcient and ﬁnish the attack before the timeout. At
the same time, typical padding oracle attacks require a large
number (several thousands) of TLS handshakes, which would
take much longer to execute than the typical browser timeout.
Analysis and improvement of Padding Oracle Attacks.
In this section, we analyze the complexity of padding oracle
attacks for an online MitM scenario. Our contributions are as
follows. First, we present a novel analysis of the query com-
plexity required from a padding oracle attack (Section VI-A).
Next, we handle the case of imperfect and noisy oracles
(Section VI-B). Finally, in Section VII we address the question
of parallelizing padding oracle attacks across any available
number of servers, demonstrating a new application of lattice
techniques to padding oracle attacks.
A. Reducing the Query Complexity of Padding Oracles
A key observation of our attack is that in many scenarios
the attacker only has to succeed once. Consequently, instead of
focusing on minimizing the expected number of oracle queries
to break the secret, we aim at ﬁnding a strategy that would
achieve some low probability of success. In this section we
explore this strategy.
Overview. We start with a motivating scenario. We then
look at some illustrative examples analyzing the number of
oracle queries required to ﬁnd a conforming ciphertext with a
given probability. Finally, we perform simulations of padding
oracle attacks and empirically determine the number of queries
required for recovering the plaintext with several oracles.
Motivating Scenario.
Assume we would like to break
the security of a speciﬁc account in some popular online
service (e.g., Gmail). As the connection is usually done via
https (which uses TLS), one attack vector is to attempt to
break the user’s existing TLS connection with the online
service. Using padding oracles to mount a MitM downgrade
attack on a speciﬁc connection might be difﬁcult given the
30 seconds browser-enforced timeout for completing the TLS
handshake. In our new analysis, we assume that we perform
a BEAST style attack [23]. In this scenario a malicious web
site controlled by the attacker, causes the user’s browser to
repeatedly try to connect to the TLS server in the background
without the user’s knowledge. This attack only requires that
the browser supports JavaScript, and does not need any special
privileges. (In particular, the attacker does not have to compro-
mise the normal operation of the target machine in any way.) A
successful MitM attack on even a single TLS handshake will
allow the attacker to decrypt the user’s login token, thereby
allowing a malicious login to the server.
Low Success Probability is Sufﬁcient. The expected number
of queries required for completing a Bleichenbacher style
attack is large. With a short browser timeout, the likelihood of
completing the attack before the timeout is very low. However,
we can use the long tail distribution of the number of queries
to devise a strategy that provides a high likelihood of success.
Speciﬁcally, the probability of the attack completing before a
browser timeout is low, but it is not negligible. Our strategy
is to use the BEAST attack to amplify this low probability,
by repeatedly attempting the connection to the server until a
padding oracle attack succeeds or the connection times out.
Because the success probability is not negligible, repeating
the attack enough times is likely to eventually succeed.
Finding a Conforming Ciphertext.
The complexity of
the Bleichenbacher padding oracle attack is dominated by the
(cid:21)(cid:21)(cid:20)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:49 UTC from IEEE Xplore.  Restrictions apply. 
number of oracle queries required for ﬁnding the ﬁrst few
conforming ciphertexts. That is, a ciphertexts c such that the
plaintexts corresponding to them match the format detected
by the oracle. Thus, we begin by analyzing the number of
queries required for ﬁnding a conforming ciphertext under
several oracle types.
Analyzing OpenSSL API FFTT Oracle. We ﬁrst look at
the FFTT padding oracle present in the OpenSSL decryption
API (Section IV-B). Let (d, N ) be an RSA private key. For a
ciphertext c to be conforming, the following must hold:
1) First, the two most signiﬁcant bytes of cd mod N (the
RSA plaintext corresponding to c) must be 0x0002. For a
random c, this happens with probability of 2
−16.
2) Next, the following eight padding bytes of the plaintext
corresponding to c must be non-zero. For a random c, this
event happens with probability of (255/256)8.
3) The plaintext corresponding to c contains a zero byte. For
a 2048-bit RSA modulus N, we have 246 remaining bytes.
Thus, for a randomly selected c, this event holds with
probability of 1 − (255/256)246 (or 1 − (255/256)502 for
a 4096-bit modulus).
for
We obtain that
any 2048-bit RSA private key
Prc[FFTT(c) = 1], the probability that a random ciphertext
c is conforming, is given by
Prc[FFTT(c) =1]
(cid:3)
(cid:5)
(cid:4)8 ·
(cid:3)
(cid:6)
(cid:4)246
1 −
255
256
−16 ·
= 2
≈ 9.14 · 10
255
256
−6.
Similarly, for any 4096-bit RSA private key, we obtain that
Prc[FFTT(c) = 1] ≈ 1.27 · 10
−5. Next, the expected number
of oracle queries required to obtain a conforming ciphertext is
1/Prc[FFTT(c) = 1] which results in about 110000 queries
for 2048-bit key and about 80000 queries for 4096-bit key.
Oracle queries are Bernoulli trials. Hence, the number of
trials until success has a geometric distribution, and we can
use the inverse of the cumulative distribution function (CDF)
of the geometric distribution to ﬁnd out the expected number
of oracle queries for any desired probability of success. Using
the inverse CDF, we ﬁnd that only 110 queries are required
to achieve a probability of 1/1000 of ﬁnding a conforming
ciphertext for a 2048-RSA key. For 4096-bit keys, only 80
queries are required. Hence,
the complexity of the attack
decreases as the key sizes grow.
Analyzing MbedTLS FFFT Oracle.
We now proceed
to analyze the FFFT padding oracle present in MbedTLS
implementation of the PKCS #1 v1.5 veriﬁcation code (Ap-
pendix A-C). Let (d, N ) be an RSA private key. For a plaintext
c to be conforming to an FFFT oracle, the following must
hold.
1) The ﬁrst two conditions of the FFTT oracle present in the
OpenSSL decryption API hold. For a random ciphertext the
−16 · (255/256)8.
probability that both conditions hold is 2
2) The size of the unpadded plaintext corresponding to c is
between 0 and 48 bytes. For a 2048-bit RSA key, we
have 256 bytes of padded plaintext. The ﬁrst 10 bytes
are checked in the ﬁrst condition, leaving 246 bytes for
the padding and the plaintext itself. As the padding string
must consist of some number of non zero bytes and
terminate with a zero byte, we obtain that for a random
2048-bit ciphertext c, this event holds with probability of
(255/256)246−48 · (1 − (255/256)48).
Similarly, for 4096-bit RSA key (containing 512 bytes),
this event holds for a random ciphertext with probability
of (255/256)502−48 · (1 − (255/256)48).
Thus, for any 2048-bit RSA private key it holds that
(cid:3)
(cid:4)8(cid:3)
(cid:5)
(cid:4)198
(cid:3)
(cid:6)
(cid:4)48
255
256
1 −
255
256
Prc[FFFT(c) = 1]
−16
= 2
≈ 1.16 · 10
255
256
−6.
For 4096-bit RSA private keys, we obtain that Prc[FFFT(c) =
1] ≈ 4.28 · 10
−7. Using the same formulas as above, we ﬁnd
that the expected number of trials to achieve a probability of
1/1000 of ﬁnding a conforming ciphertext is 860 for 2048-bit
keys and 2300 for 4096-bit keys.
Full Attack Simulation. While the query complexity of the
entire padding oracle attack highly depends on the probability
p that the padding oracle outputs 1 on a random ciphertext, for
Bleichenbacher-type oracles the exact relation between p and
the attacks’ query complexity is rather difﬁcult to analyze.
Instead, we ran 500000 simulations of the full attack using
the FFTT, FFFT and Manger type oracles, for a 2048-bit
RSA modulus. The results of our simulation are presented in
Table II, for both decryption and signature forging attacks. For
each oracle type and attack type, we give the required number
of oracle queries needed to complete the attack with the
different success probabilities. As the table demonstrates, the
number of queries required for achieving a success probability
of 1/1000 is an order of magnitude lower than that required
for a probability of 50%. Yet, while the success probability
of each individual attack attempt is low (1/1000), the attacker
can always use BEAST-style techniques, repeatedly issuing
TLS connections to the target website. As soon as a single
connection attempt is broken, the attacker can decrypt the
user’s login token, compromising the account. Finally, we
note that because each attack attempt has a low oracle query
complexity, it is possible to complete the attempt below the
30 seconds timeout enforced by Chrome and Edge.
Analyzing the Manger Oracle.
The Manger attack
complexity is much simpler, having the number of queries
required be approximately the length of the RSA modulus in
bits with very low variance (i.e., a little over 2048 queries for
2048-bit keys and 4096 queries for 4096-bit keys [47]).
B. Handling Oracle Errors
So far, the analysis assumed a “perfect” oracle that always
produces the correct answer. However, oracles obtained via
(cid:21)(cid:21)(cid:21)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:49 UTC from IEEE Xplore.  Restrictions apply. 
NUMBER OF ORACLE QUERIES REQUIRED FOR 2048-BIT RSA MODULUS.
TABLE II
Oracle
FFTT Oracle (OpenSSL API)
FFFT Oracle (MbedTLS)
Manger Oracle
FFTT Oracle With Errors
Manger Oracle With Errors
33944
0.01
19899
192633
Decryption with Success Probability
Signature Forging with Success Probability
0.5
0.5
0.001
0.1
122377
16381
50766
40945
870664
139426
1292250
533840
≈ 2048 ≈ 2048 ≈ 2048 ≈ 2048 ≈ 2048
≈ 2048 ≈ 2048 ≈ 2048
147406
29989
70990
57130
≈ 6144 ≈ 6144 ≈ 6144
≈ 6144 ≈ 6144 ≈ 6144 ≈ 6144 ≈ 6144
0.001
14700
116699
28170
28683
30494
0.01
15147
123359
0.1
16764
237702
microarchitectural attacks are rarely perfect, and often have
errors in the answers. Oracle errors can be false positives (FP),
where the oracle considers a non-conforming ciphertext to be
conforming, or false negatives (FN), where the oracle returns
non-conforming for a conforming ciphertext. In this section
we present strategies for error recovery. See Table II for a
summary of the results.
Handling Errors in Manger Type Attack. As outlined in
Section II-D the Manger attack is sensitive to errors, and any
oracle query error would result in the attack failing to break
the target TLS connection. Thus, to obtain an error-free result
we propose to repeat each oracle query several times, taking
a majority vote in the result. We now proceed to analyze the
exact number of repetitions required by this approach.
Assume we want a padding oracle attack to succeed with a
low probability of p = 0.001. For a 2048-bit RSA modulus, we
will require about 2048 queries to break the target connection.
This means that we require (1−Pr[error])2048 > 0.001 which
√
yields Pr[error] < 1 − 2048
0.001 ≈ 0.00337.
From the experimental results outlined in Section V-B, we
have that our side-channel-based Manger oracle has an error
rate of 0.02 for both false positive and false negative errors.
With each oracle request having a probability of 0.02 of being
erroneous, the error is higher than the 0.00337 we require for
(cid:7)r
limiting the failure rate to 0.001. Assuming we make r oracle
requests, for the majority to be incorrect, we need to have
i=r/2+1(0.02)i ≈ (0.02)r/2+1 < 0.00337,
Pr[error] <
which yields r = 3. Thus, repeating each oracle request
three times ensures that the overall error rate is small enough.
Consequently, for the Manger oracle, we need a total of
approximately 3 · 2048 = 6144 oracle requests.
Handling Errors
in Bleichenbacher-type Oracles.
Bleichenbacher-type oracles repeatedly test ciphertexts until
ﬁnding one whose plaintext is PKCS #1 v1.5 conforming.
Consequently, false negative errors are not fatal
for the
attack. When a false negative error is encountered, the attack
continues until another conforming ciphertext
is found.
Conversely, when the attack relies on a false positive, it will
fail.
To better understand the total query complexity required for
a side-channel based Bleichenbacher-type oracle, we simulated
the end-to-end attack using the false negative and false positive
rates obtained in Section V-A (i.e., we set Pr[FP] = 0.043
and Pr[FN] = 0.011). Because the attack can tolerate false
negative errors, we ignore the possibility of such errors and
accept a non-conforming result as correct. However, when the
oracle reports that a ciphertext is conforming, we need to be
more careful. We issue a total of six queries with the same
ciphertext, and require ﬁve or more of these queries to give a
positive answer for us to accept the ciphertext as conforming.
We note that
this amount of repetitions was empirically
chosen to minimize the attacks’ total query complexity. Our
simulation results (Table II) show that the presence of errors
at most doubles the number of queries required for the attack.
VII. PARALLELIZING PADDING ORACLE ATTACKS
Large service providers often share the load of their web
sites over multiple servers. To maintain the illusion of a single
web site, all these servers share the same RSA key. In this
section we exploit these servers to implement a parallel attack
that further reduces the time to break the TLS secret.
Previous Parallelization Works. Kl´ıma et al. [42] are the ﬁrst
to suggest the possibility of parallelizing the Bleichenbacher
attack. Their work suggests a trivial speedup of Phase 2 of the
attack (Section II-C), in the case that the attacker ﬁnds multiple