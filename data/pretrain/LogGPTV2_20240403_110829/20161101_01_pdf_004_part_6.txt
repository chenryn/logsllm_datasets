 histogram_bounds
 ------------------------------------------------------
 {0,993,1997,3050,4040,5036,5957,7057,8029,9016,9995}
EXPLAIN 行数评估
 这个例子的行选择性如下
 selectivity = (1 + (1000 - bucket[2].min)/(bucket[2].max - bucket[2].min))/num_buckets
 = (1 + (1000 - 993)/(1997 - 993))/10
 = 0.100697
 最终得到的行数是 :
 rows = rel_cardinality * selectivity
 = 10000 * 0.100697
 = 1007 (rounding off)
 这里rel_cardinality = pg_class.reltuples.
EXPLAIN 行数评估
 从MCV(most common values)评估行数的例子
 EXPLAIN SELECT * FROM tenk1 WHERE stringu1 = 'CRAAAA';
 QUERY PLAN
 ----------------------------------------------------------
 Seq Scan on tenk1 (cost=0.00..483.00 rows=30 width=244)
 Filter: (stringu1 = 'CRAAAA'::name)
 SELECT null_frac, n_distinct, most_common_vals, most_common_freqs FROM pg_stats
 WHERE tablename='tenk1' AND attname='stringu1';
 null_frac | 0
 n_distinct | 676
 most_common_vals |
{EJAAAA,BBAAAA,CRAAAA,FCAAAA,FEAAAA,GSAAAA,JOAAAA,MCAAAA,NAAAAA,WGAAAA}
 most_common_freqs | {0.00333333,0.003,0.003,0.003,0.003,0.003,0.003,0.003,0.003,0.003}
EXPLAIN 行数评估
 行选择性如下, most common vals对应的占比most common freqs.
 selectivity = mcf[3]
 = 0.003
 得到行数
 rows = 10000 * 0.003
 = 30
EXPLAIN 行数评估
 从MCV(most common values)和distinct值个数评估行数的例子
 EXPLAIN SELECT * FROM tenk1 WHERE stringu1 = 'xxx';
 QUERY PLAN
 ----------------------------------------------------------
 Seq Scan on tenk1 (cost=0.00..483.00 rows=15 width=244)
 Filter: (stringu1 = 'xxx'::name)
 1减去所有MCV的占比, 再乘以 distinct值的个数减去MCV的个数
 selectivity = (1 - sum(mvf))/(num_distinct - num_mcv)
 = (1 - (0.00333333 + 0.003 + 0.003 + 0.003 + 0.003 + 0.003 +
 0.003 + 0.003 + 0.003 + 0.003))/(676 - 10)
 = 0.0014559
 rows = 10000 * 0.0014559
 = 15 (rounding off)
EXPLAIN 行数评估
 从MCV(most common values)和柱状图评估行数的例子
 条件中即包含了MCV又落在柱状图中的情况, 柱状图的统计中不包含MCV的值, 所以从柱状图中计算行的选择性时, 要乘
以一个系数, 这个系数是1减去MCF的总和.
 EXPLAIN SELECT * FROM tenk1 WHERE stringu1  Bitmap Index Scan on tenk1_unique1 (cost=0.00..23.80 rows=1007 width=0)
 Index Cond: (unique1  pg_ctl stop -m fast
 waiting for server to shut down.... done
 server stopped
 把操作系统的缓存刷入硬盘
 [root@db-172-16-3-150 ssd1]# sync; echo 3 > /proc/sys/vm/drop_caches
 以1号CPU亲和启动数据库, 0号CPU会带来一定的额外开销问题.
 pg93@db-172-16-3-150-> taskset -c 1 /home/pg93/pgsql9.3.1/bin/postgres >/dev/null 2>&1
explain代价因子校准
 启动一个客户端
 pg93@db-172-16-3-150-> psql
 psql (9.3.1)
 Type "help" for help.
 digoal=# select pg_backend_pid();
 pg_backend_pid
 ----------------
 5727
 (1 row)
explain代价因子校准
 使用stap跟踪, 得到seq_page_cost.
 [root@db-172-16-3-150 ~]# taskset -c 7 stap -e '
 global a
 probe process("/home/pg93/pgsql9.3.1/bin/postgres").mark("query__start") {
 delete a
 println("query__start ", user_string($arg1), "pid:", pid())
 }
 probe vfs.read.return {
 t = gettimeofday_ns() - @entry(gettimeofday_ns())
 # if (execname() == "postgres" && devname != "N/A")
 a[pid()] <<< t
 }
 probe process("/home/pg93/pgsql9.3.1/bin/postgres").mark("query__done") {
 if (@count(a[pid()]))
 printdln("**", pid(), @count(a[pid()]), @avg(a[pid()]))
 println("query__done ", user_string($arg1), "pid:", pid())
 if (@count(a[pid()])) {
 # 未完
explain代价因子校准
 println(@hist_log(a[pid()]))
 #println(@hist_linear(a[pid()],1024,4096,100))
 }
 delete a
 }' -x 5727
 执行SQL
 digoal=# explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align;
 QUERY PLAN
 ------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on postgres.tbl_cost_align (cost=0.00..195393.00 rows=10100000 width=45) (actual time=0.839..3260.695 rows=10100000 loops=1)
 Output: id, info, crt_time
 Buffers: shared read=94393 -- 注意这个read指的是未命中shared buffer, 如果是命中的话会有hit=?
 Total runtime: 4325.885 ms
 (4 rows)
explain代价因子校准
 stap的输出
 query__start explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align;pid:5727
 5727**94417**14329
 query__done explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align;pid:5727
 value |-------------------------------------------------- count
 1024 | 0
 2048 | 0
 4096 | 153
 8192 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 86293
 16384 |@ 1864
 32768 | 116
 65536 |@@@ 5918 -- 接近块设备readahead次数
 131072 | 59
 262144 | 7
 524288 | 3
 1048576 | 2
 2097152 | 2
 4194304 | 0
 8388608 | 0
explain代价因子校准
 验证公式正确性
 digoal=# show seq_page_cost;
 seq_page_cost
 ---------------
 1
 (1 row)
 digoal=# show cpu_tuple_cost;
 cpu_tuple_cost
 ----------------
 0.01
 (1 row)
 195393 = (shared read=)94393*1(seq_page_cost) + (rows=)10100000*0.01(cpu_tuple_cost)
 digoal=# select 94393+10100000*0.01;
 ?column?
 -----------
 195393.00
 (1 row)
explain代价因子校准
 从stap中我们得到io的平均响应时间是14329纳秒(0.014329毫秒). 得到了seq_page_cost.
 真实的执行时间是(3260.695 - 0.839). 套用到公式中, 求得cpu_tuple_cost :
 3260.695 -0.839 = 94393*0.014329 + 10100000*cpu_tuple_cost
 cpu_tuple_cost = 0.00018884145574257426
 重启数据库, 并刷系统缓存后, 调整这两个代价因子
 digoal=# set seq_page_cost=0.014329;
 SET
 digoal=# set cpu_tuple_cost=0.00018884145574257426;
 SET
 得到的cost和实际执行时间基本一致.
 digoal=# explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align;
 QUERY PLAN
 ------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on postgres.tbl_cost_align (cost=0.00..3259.86 rows=10100000 width=45) (actual time=0.915..3318.443 rows=10100000 loops=1)
 Output: id, info, crt_time
 Buffers: shared read=94393
 Total runtime: 4380.828 ms
explain代价因子校准
 random_page_cost, cpu_index_tuple_cost, cpu_operator_cost的校准.
 random_page_cost 本文还是通过stap跟踪来获得.