PHP filter_var Bypass 截⽌ 2022.03.27 ⽆官⽅补
丁 
0x00 前⾔ 
本⽂是对⽂章 《PHP filter_var shenanigans》中所表述内容的进⼀步测试和学习研究记录。
测试环境：macOS Mojave + PHP 7.4.28 + gdb
0x01 本地环境搭建 
下载并切换到希望调试的源码环境
这⾥仅开启必要的扩展组件来编译
编译时可能会遇到如下报错
git clone https://github.com/php/php-src
cd php-src/
git checkout PHP-7.4.28
1
2
3
./buildconf --force
./configure --disable-all --enable-filter --enable-cli --enable-debug --
with-iconv=$(brew --prefix libiconv) --prefix=/opt/phptest/ --with-config-
file-path=/opt/phptest/php.ini
make -j8
make install
1
2
3
4
/Users/zero/Desktop/php-src/main/reentrancy.c:125:23: error: too few 
arguments to function call, expected 3, have 2
        readdir_r(dirp, entry);
        ~~~~~~~~~            ^
/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/dirent.h:110
:5: note: 'readdir_r' declared here
int readdir_r(DIR *, struct dirent *, struct dirent **) 
__DARWIN_INODE64(readdir_r);
    ^
1 error generated.
make: *** [main/reentrancy.lo] Error 1
1
2
3
4
5
6
7
8
就是这个函数在macOS sdk⾥⾯的定义与PHP源码中调⽤不符合造成的，修改对应的源码位置为如
下值即可（因为第三个值就是第⼆个值得指针⽽已）
PS: 要是实在报错过多解决不了就去PHP官⽹下载对应版本的PHP源码吧！
变异完成之后执⾏ php -v  会显示 DEBUG ， 配置⽂件的位置也是在我们先前指定的地⽅
没看过PHP内核的可以去微信读书上⾯搜 《PHP 7 底层设计与源码实现》，我觉得⾄少这本在讲
⼈话。
后⾯主要⽤的⼀个⽬录是 ext 因为 system 函数的实现在这个地⽅
ext 官⽅扩展⽬录，包括了绝⼤多数PHP的函数的定义和实现，如array系列，pdo系列，spl系
列等函数的实现，都在这个⽬录中。个⼈写的扩展在测试时也可以放到这个⽬录，⽅便测试
和调试。
0x02 PHP filter_var Bypass 
函数使⽤说明
漏洞说明：如果使⽤ PHP 的filter_var函数检查主机名，并且传递给函数的值太⻓，zend就不会执
⾏对⽬标字符串的检查，这会导致主机名检查被完全绕过。
本地测试：⾸先要修改 php.ini  中的 memory_limit = -1 ，因为该漏洞的超⻓字符串需要你分
配4G的内存（这个也是该漏洞鸡肋的原因，因为默认是128MB，⽽线上服务器也不会让你⼀下发
readdir_r(dirp, entry ,&entry);
1
filter_var(mixed $value, int $filter = FILTER_DEFAULT, array|int $options = 
0): mixed
1
个4GB的字符过去）
上⾯的代码执⾏之后会输出 success，说明成功bypass
0x03 命令执⾏ NO ？ 
但是我测试了⽂章中给出的案例，虽然可以bypass但是并不能成功命令执⾏，简化的代码⽚段如
下所示
这⾥使⽤CLion来进⾏调试，配置调试很简单，把源码⽤CLion打开，然后按照如下⽅式编辑⼀下就
?>
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
?>
1
2
3
4
可以了
然后打个断点，点击⼩⾍⼦图标，能正常停咱们就可以愉快的debug了
-c /Users/zero/opt/phptest/php.ini 
/Users/zero/opt/phptest/script_test/filter_var_bypass_exec.php
1
咱们想看的 system 函数，在 ext/standard/exec.c  进⾏实现
可以对其中⼏个关键位置下个断点
/* {{{ proto int system(string command [, int &return_value])
   Execute an external program and display output */
PHP_FUNCTION(system)
{
php_exec_ex(INTERNAL_FUNCTION_PARAM_PASSTHRU, 1);
}
/* }}} */
1
2
3
4
5
6
7
动态调试或者静态跟⼀下就会发现这⾥⾯的 VCWD_POPEN  其实就是 popen 。到这⾥使⽤上⾯哪个
例⼦CLion就已经罢⼯debug不下去了，但是不要紧，我们直接写个⼩⽚断测试⼀下就好了
#include   
#include 
#include 
#define BUF_SIZE 1024
char buf[BUF_SIZE];
int main(int argc, char *argv[], char *env[])  
{
    FILE * p_file = NULL;
    p_file = popen(argv[1], "r");  
    if (!p_file) {  
        fprintf(stderr, "Erro to popen");  
    }  
    while (fgets(buf, BUF_SIZE, p_file) != NULL) {  
        fprintf(stdout, "%s", buf);  
    }  
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
只有⼩⻛扇呼呼呼也没执⾏出来
我⼤概看了⼀下glibc⾥⾯关于popen函数的实现，没有看到什么⻓度限制，来多少都接。所以这个
洞造成DoS是可以的，但是bypass完之后还能继续执⾏命令的，那估计还不太⾏。
    pclose(p_file);     
    return 0;  
}
20
21
22
23
gcc exec.c -o exec
./exec "id ;`printf "%0.s1" {1..4294967286}`"
1
2