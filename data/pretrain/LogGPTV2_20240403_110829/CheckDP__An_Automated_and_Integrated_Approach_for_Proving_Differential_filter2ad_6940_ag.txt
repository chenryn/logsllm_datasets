(cid:76)x, Γ(cid:77)⋆ =
(cid:26)
(cid:76)false, Γ(cid:77)⋆ = false
(cid:76)true, Γ(cid:77)⋆ = true
(cid:26)x + n†
(cid:76)e1 op e2, Γ(cid:77)⋆ =(cid:76)e1, Γ(cid:77)⋆ op(cid:76)e2, Γ(cid:77)⋆ where op = ⊕ ∪ ⊗ ∪ ⊙
e1[e2] +(cid:98)e1†[e2]
(cid:76)e1[e2], Γ(cid:77)⋆ =
(cid:76)e1 :: e2, Γ(cid:77)⋆ =(cid:76)e1, Γ(cid:77)⋆ ::(cid:76)e2, Γ(cid:77)⋆
(cid:76)¬e, Γ(cid:77)⋆ = ¬(cid:76)e, Γ(cid:77)⋆
, if Γ† ⊢ e1 : list num∗
, else
e1[e2]
2
1
(cid:76)skip, Γ(cid:77)⋆ = skip
(cid:76)e1 ? e2 : e3, Γ(cid:77)⋆ =(cid:76)e1(cid:77)⋆ ?(cid:76)e2, Γ(cid:77)⋆ :(cid:76)e3, Γ(cid:77)⋆
(cid:76)c2; Γ(cid:77)⋆ = c′
(cid:76)c1; Γ(cid:77)⋆ = c′
(cid:76)c1; c2, Γ(cid:77)⋆ = c′
1; c′
(cid:76)x := e, Γ(cid:77)⋆ = ((cid:98)x† :=(cid:76)e, Γ(cid:77)⋆ − x)
2
(cid:76)ci, Γ(cid:77)⋆ = c′
(cid:76)if e then c1 else c2, Γ(cid:77)⋆ = if(cid:76)e, Γ(cid:77)⋆ then c′
(cid:76)while e do c, Γ(cid:77)⋆ = while(cid:76)e, Γ(cid:77)⋆ do c′
Figure 6: Transformation of expressions and commands for
aligned and shadow execution, where ⋆ ∈ {◦,†}.
(cid:76)c, Γ(cid:77)⋆ = c′
i ∈ {1, 2}
1 else c′
2
i
As previously explained, a separate shadow branch / loop has
to be generated to correctly track the shadow distances of the
variables. More specifically, Rules (T-If) and (T-While) is extended
to include an extra shadow execution command c† when pc transits
from ⊥ to ⊤. The shadow execution is constructed by an auxiliary
function(cid:76)c, Γ(cid:77)†, as defined in Figure 6, which is the same as the
its correspondence (e.g., variable x to x +(cid:98)x
ones in ShadowDP [50]. It essentially replaces each variable with
†), as is standard in self-
aligned execution (i.e.,(cid:76)e, Γ(cid:77)◦ used in Rules (T-If) and (T-While))
composition [6, 49]. Note that the value of an expression e in an
are defined in a similar way.
Sampling Commands. The most interesting rule is (T-Laplace).
In order to enable the automatic discovery of the selectors, our
GenerateTemplate algorithm needs to be extended to return a
selector template S. Intuitively, a selector expression S with the
following syntax decides if the aligned or shadow execution is
picked:
Var Versions
Selectors
∈
{◦,†}
k
S ::= e ? S1 : S2 | k
The definition of the selector template is then similar to the
alignment template, where the value can depend on the branch
conditions:
SE ::=
e0 ? SE\{e0} : SE\{e0}, when E = {e0, · · · }
θ with fresh θ, otherwise
(cid:40)
Transformation rules for expressions with form Γ ⊢ e : B⟨n◦,n†⟩
Γ ⊢ r : num⟨0, 0⟩ | true
(T-Num)
Γ(x) = B⟨d◦, d†⟩ n⋆ =
0
otherwise ⋆ ∈ {◦, †}
(T-Boolean)
Γ ⊢ b : bool | true
(cid:26)(cid:98)x ⋆ if d⋆ = ∗
Γ ⊢ x : B⟨n◦, n†⟩ | true
Γ ⊢ e : bool | C
Γ ⊢ ¬e : bool | C (T-Neg)
(T-Var)
Γ ⊢ e1 : num⟨n1, n2⟩ | C1
Γ ⊢ e2 : num⟨n3, n4⟩ | C2
Γ ⊢ e1 ⊕ e2 : num⟨n1⊕n3, n2⊕n4⟩ | C1 ∧ C2
(T-OPlus)
Γ ⊢ e2 : num⟨n3, n4⟩ | C2
Γ ⊢ e1 : num⟨n1, n2⟩ | C1
Γ ⊢ e1 ⊗ e2 : num⟨0,0⟩ | C1 ∧ C2 ∧ (n1 = n2 =
n3 = n4 = 0)
(T-OTimes)
Γ ⊢ e1 : num⟨n1, n2⟩ | C1
Γ ⊢ e2 : num⟨n3, n4⟩ | C2
Γ ⊢ e1 ⊙ e2 : bool | C1 ∧ C2 ∧ (e1 ⊙ e2) ⇔ (e1 + n1) ⊙ (e2 + n3)∧(e1 ⊙ e2) ⇔ (e1 + n2) ⊙ (e2 + n4) (T-ODot)
Γ ⊢ e2 : num⟨n1, n2⟩ | C2
Γ ⊢ e2 : list B⟨n3, n4⟩ | C2
Γ ⊢ e1 : list τ | C1
Γ ⊢ e1 : B⟨n1, n2⟩ | C1
Γ ⊢ e1 :: e2 : list B⟨n3, n4⟩ | C1 ∧ C2 ∧ (n1 = n2 = n3 = n4 = 0) (T-Cons)
Γ ⊢ e1[e2] : τ | C1 ∧ C2 ∧ (n1 = n2 = 0)
Γ ⊢ e3 : B⟨n3, n4⟩ | C3
Γ ⊢ e1 : bool | C1
Γ ⊢ e1 ? e2 : e3 : B⟨n1, n2⟩ | C1 ∧ C2 ∧ C3 ∧ (n1 = n2 = n3 = n4)
Γ ⊢ e2 : B⟨n1, n2⟩ | C2
(T-Select)
Transformation rules for commands with form pc ⊢ Γ {c ⇀ c′} Γ′
Γ ⊢ e : B⟨n◦, n†⟩ | C ⟨d◦
, c◦⟩ =
(cid:40)⟨0, skip⟩,
⟨∗, (cid:98)x◦ := n◦⟩, otherwise
⟨∗,(cid:98)x† := n†
⟨∗, skip,(cid:98)x† := x + n† − e⟩, otherwise
pc ⊢ Γ {x := e ⇀ assert(C); c′; x := e; c◦; c† } Γ[x (cid:55)→ B⟨d◦, d†⟩]
1} Γ1
if pc = ⊥ ∧ n† = 0
if pc = ⊥ ∧ n† (cid:44) 0
pc ⊢ Γ1 {c2 ⇀ c′
⟨0, skip, skip⟩,
if n◦ == 0,
, skip⟩,
, c′⟩ =
2} Γ2
, c†
⟨d†
(T-Seq)
pc ⊢ Γ {skip ⇀ skip} Γ
(T-Skip)
pc ⊢ Γ {c1 ⇀ c′
pc ⊢ Γ {c1; c2 ⇀ c′
1; c′
2} Γ2
(T-Index)
(T-Asgn)
Γ ⊢ e : B⟨n◦, n†⟩ | C
pc ⊢ Γ {return e ⇀ assert(C ∧ n◦ = 0); return e } Γ
(T-Return)
(cid:40)
skip,
c† =
if (pc = ⊤ ∨ pc′ = ⊥)
else
Γ, Γ ⊔ Γf , pc′ ⇛ cs
Γf , Γ ⊔ Γf , pc ⇛ c′′
pc ⊢ Γ ⊔ Γf {c ⇀ c′} Γf
pc′ = updatePC(pc, Γ, e)
(cid:76)while e do c, Γ ⊔ Γf(cid:77)†
pc ⊢ Γ {while e do c ⇀ cs ;(while e do (assert((cid:76)e, Γ(cid:77)◦); c′; c′′)); c† } Γ ⊔ Γf
(cid:40)
(cid:76)if e then c1 else c2, Γ1 ⊔ Γ2(cid:77)†
c† =
pc ⊢ Γ {ci ⇀ c′
i } Γi
1 ) else (assert(¬(cid:76)e, Γ(cid:77)◦); c′
pc ⊢ Γ {if e then c1 else c2 ⇀ (if e then (assert((cid:76)e, Γ(cid:77)◦); c′
2; c′′
1; c′′
c′ = {(cid:98)x◦ := 0 | Γ
c′′ = {(cid:98)x◦ := n† | Γ
ca = assert(((η + A){η1/η} = (η + A){η2/η} ⇒ η1 = η2))
pc ⊢ Γ {η := Lap r ⇀ ca; η := sample[idx]; idx := idx + 1; vϵ := (S ? vϵ : 0) + |A|/r;(cid:98)η := A; cd } Γ
A, S = GenerateTemplate(Γ, All Assertions)
, d†⟩ where Γ(x) = num⟨d◦,d†⟩
′ = λx . ⟨d◦ ⊔ d†
pc′ = updatePC(pc, Γ, e)
Γi, Γ1 ⊔ Γ2, pc′ ⇛ c′′
if (pc = ⊤ ∨ pc′ = ⊥)
i ∈ {1, 2}
skip,
Γ
,
i
pc = ⊥
Transformation rules for merging environments
Γ1 ⊑ Γ2
c◦ = {(cid:98)x◦ := 0 | Γ1(x) = num⟨0,d1⟩ ∧ Γ2(x) = num⟨∗,d2⟩ }
c† = {(cid:98)x† := 0 | Γ1(x) = num⟨d1,0⟩ ∧ Γ2(x) = num⟨d2,∗⟩ }
(cid:40)
(cid:40)⊥ , if pc = ⊥ ∧ Γ ⊢ e : num⟨−,0⟩
Γ1, Γ2, pc ⇛ c′
c′ =
⊤ , else
PC update function
updatePC(pc, Γ, e) =
(T-While)
, else
2 )); c† } Γ1 ⊔ Γ2
(T-If)
′(x) = num⟨∗,d†⟩ ∧ Γ(x) = num⟨0,d†⟩ }
′ ⊢ x : num⟨−,n†⟩ }
cd = (if S then c′ else c′′)
′[η (cid:55)→ num⟨∗, 0⟩]
(T-Laplace)
c◦; c†
c◦
if pc = ⊥
if pc = ⊤
Figure 7: Rules for transforming probabilistic programs into deterministic ones with shadow execution extension. Differences
that shadow execution introduce are marked in gray boxes.
16
Compared with other holes (θ) in the alignment template (AE),
the only difference is that θ in SE has Boolean values representing
whether to stay on aligned execution (◦), or switch to shadow
execution (†).
To embed shadow execution into CheckDP, the type system
dynamically instruments an auxiliary command (cd) according to
the selector templateS. Once a switch is made (S = †), the distances
of all variables are replaced with their shadow versions by this
command. Moreover, the privacy cost vϵ will also be properly reset
according to the selector.
C SOUNDNESS PROOF
CheckDP’s alignment-based proof system is built on that of Shad-
owDP [50]. At a high level, CheckDP automatically infers a proof
in the form of alignment templates, so that the proof will be type-
checked in a ShadowDP-like type system. Hence, given an inferred
proof (i.e., concrete values of holes θ used in (cid:8)Aη | η ∈ H(cid:9) or
(cid:8)Aη,Sη | η ∈ H(cid:9) (with shadow execution), we can transform a
program M in CheckDP to a program ˜M in ShadowDP according
to the following rule:
η := Lap r → η := Lap r; Sη(θ); Aη(θ) (CheckDP to ShadowDP)
Without losing generality, we will proceed with the case with
shadow execution (i.e., the type system Γ tracks a pair of distances
for both aligned and shadow executions), since a proof without
shadow execution is subsumed by the one with shadow execution
and a selector that always selects the aligned distances.
Proof of Theorem 2
˜M type checks in ShadowDP, and
Let M be a mechanism written in CheckDP. With a list of concrete
values of θ, let ˜M be the corresponding mechanism in ShadowDP by
rule (CheckDP to ShadowDP). If (1) M type checks, i.e., ⊢ Γ {M ⇀
M′} Γ′ and (2) the assertions in M′ hold for all inputs. Then
(1)
(2) the assertions in ˜M′ (transformed from ˜M by ShadowDP) pass.
Proof. The proof is mostly straightforward due to the similarity
between the type systems of CheckDP and ShadowDP. As stated
in Section 3, the only difference that requires extra work in the
proof is that CheckDP only tracks if a variable has the same value
in two related runs (with distance 0) or not (with distance ∗), while
ShadowDP also allows distance of an arbitrary expression. To gap
the potential difference, we define that Γ′ and ˜Γ′ are consistent if
∀x ∈ V ∪ H.(cid:76)x, Γ
′(cid:77)◦ =(cid:76)x, ˜Γ
′(cid:77)◦ ∧(cid:76)x, Γ
′(cid:77)† =(cid:76)x, ˜Γ
′(cid:77)†
Note that since we only need to convert CheckDP types to the
(more expressive) ShadowDP types, such restriction of CheckDP
types does not cause any issue.
First we show that if an expression e of M type checks with Γ in
CheckDP, and all of the generated constraints C hold, then e type
checks with ˜Γ in ShadowDP with an equivalent type (including
distances), as long as Γ is consistent with ˜Γ. We list a few interesting
cases here. The proofs for other types of expressions are omitted
since their rules in CheckDP are identical other than collecting
static checks in ShadowDP as constraints.
• e = x: the interesting case is when Γ(x) = B⟨∗,∗⟩ and ˜Γ(x) =
B⟨n1,n2⟩. We have the derived types are equivalent under Γ and
˜Γ by the consistency assumption.
• e = e1?e2 : e3. Let e2, e3 be such that Γ ⊢ e2 : num⟨n1,n2⟩, Γ ⊢ e3 :
num⟨n3,n4⟩. The T-Select rule restricts that n1 = n2 = n3 = n4,
which entails the requirement that e2 and e3 have the same
type in the corresponding rule of ShadowDP.
Next, we show that if Γ is consistent with ˜Γ and ⊢ Γ {M ⇀ M′} Γ′,
then ⊢ ˜Γ { ˜M ⇀ ˜M′} ˜Γ′ and Γ′ and ˜Γ′ are consistent. We proceed
by rule induction on commands. For most rules, all assumptions
in ShadowDP rules are guaranteed by the corresponding asser-
tions in CheckDP, making them trivial cases. Next, we present the
interesting cases and omit the rest ones.
• x := e: let Γ ⊢ e : num⟨n◦,n†⟩. The interesting case is when
CheckDP, we know that Γ′(x) = ∗ and(cid:98)x† is updated to n† after
pc = ⊥ ∧ n† (cid:44) 0. In CheckDP, since x := e type checks in
the transformed assignment. In ShadwoDP, we have Γ′(x) = n†.
Hence, Γ′ and ˜Γ′ are still consistent:(cid:76)x, Γ′(cid:77)† = x + n† = x +
˜Γ′(x) =(cid:76)x, ˜Γ′(cid:77)†.
• η := д: the assertion ca ensures that the corresponding static
check succeeds in rule T-Laplace of ShadowDP. One notable
difference between CheckDP and ShadowDP is that since selec-
tor S is unknown statically, a branch cd is inserted to update
the alignment of aligned execution. For consistency, checking
(cid:76)x, Γ′(cid:77)† = (cid:76)x, ˜Γ′(cid:77)† is trivial since the shadow distances are
updated in the same way as in ShadowDP. When S = ◦, the
interesting case is when the distance of x is promoted to ∗
the inserted commands c′,(cid:76)x, Γ′(cid:77)◦ = x +(cid:98)x◦ = x = (cid:76)x, ˜Γ′(cid:77)◦.
(i.e., Γ′(x) = num⟨∗,n†⟩ ∧ Γ(x) = num⟨0,n†⟩. In this case, due to
When S = †, due to the inserted commands c′′,(cid:76)x, Γ′(cid:77)† =
x +(cid:98)x† = x + n† =(cid:76)x, ˜Γ′(cid:77)◦ where Γ ⊢ x : num⟨_,, n†⟩. Finally,
the typing environment changes to Γ′[η (cid:55)→ num⟨nη,0⟩] in Shad-
owDP, but since all nonzero distances are dynamically tracked
in CheckDP, this becomes Γ′[η (cid:55)→ num⟨∗,0⟩], which is the one
given by CheckDP rule.
□
Proof of Theorem 3
With exactly the same notation and assumption as Theorem 2, M
satisfies ϵ-differential privacy.
Proof. This follows directly from Theorem 2 and the soundness
of ShadowDP ([50], Theorem 2) and the fact that M and ˜M are
semantically the same.
□
17
function NoisyMax (size : num⟨0,0⟩ , q : list num⟨∗,∗⟩ )
returns max : num⟨0,−⟩
precondition ∀ i. −1 ≤(cid:98)q
◦
[i] ≤ 1 ∧(cid:98)q
[i] =(cid:98)q
◦
[i]
†