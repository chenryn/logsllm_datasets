-
-
809,000
-
-
-
-
-
-
1.2 million
-
-
37 million
28 million
1.4 million
480,000
-
-
125 million
40 million
37 million
2.9 million
1 million
-
Table 1: Recent high-proﬁle websites that were defaced, with their respective page rank according to Alexa, MajesticSEO, and QuantCast, and their monthly
page impressions. These defacements were reported to Zone-H and include a major logistics company (UPS), computer and information security vendors (BitDefender,
Avira, AVG, MetaSploit), news websites (Al Jazeera, Ary News, News Moments, Sunday Times, Sun News Online, Telegraph, The Register), a scientiﬁc society (National
Geographic), a hardware vendor (Acer), the world’s second largest telecommunications provider (Vodafone), a singer-songwriter/actress (Taylor Swift), the state of
Connecticut (ct.gov), an Indian federal ministry (cca.gov.in), an auto-mobile company (Volvo), an ivy-league university (Princeton), well-known open source projects
(OpenSSL, OpenELEC), and a hosting provider (Leaseweb). Missing ﬁelds represent unavailable data, data is unavailable due to being kept secret by the website operators
or requiring subscriptions to Alexa, MajesticSEO or QuantCast.
1 Top-level domain rank.
5 Rank in Indonesia.
12 Rank in Iran.
14 Selected high-proﬁle website defacements from Fortune 50 and Global 500 companies between 2011 to 2013.
2 Government of India, Ministry of Communications & Information Technology.
9 Rank in Sri Lanka.
10 Rank in China.
13 Rank in United Kingdom.
6 Rank in Nigeria.
7 Rank in Bulgaria.
8 Rank in Pakistan.
3 Rank in India.
4 Rank in Netherlands.
11 Rank in Yemen.
longing to the government and major companies in Zambia
were defaced by Syrian and Saudi Arabian defacers to voice
against the Western world’s meddling in the Syrian civil
war [14]; in January 2014, the website of the popular mobile
game Angry Birds was defaced in protest of governmental
spying by the NSA and GHCQ [15]; and, in October 2013,
a Pakistani defacer group gained access to the domain regis-
trars of Suriname, Antigua & Barbados, and Saint Lucia and
defaced the regional websites of Audi, AVG, BlackBerry,
BMW, Canon, Coca-Cola, Fujitsu, Hitachi, Honda, IBM, In-
tel, Microsoft, Samsung, Symantec, Rolls-Royce, Vodafone,
and other companies simply for “bragging rights” [16].
A prime example that quantiﬁes the impact of deface-
ments is the case of the Telegraph, a major UK daily
newspaper, which was defaced in September 2011. The
Telegraph is the third most-visited website in the United
Kingdom, according to MajesticSEO, and it is the 21st most
visited website in the United States, according to Alexa.
Each month, the homepage of the Telegraph is visited over
125 million times (48 times per second), and, since reports
state that the defacement lasted around three hours, we can
estimate that more than 500,000 people saw the defacement
instead of the legitimate website.4
4Since the website was defaced on a Sunday afternoon local time in
the United Kingdom, the number of visitors is likely much higher.
s
e
t
i
s
b
e
W
d
e
t
r
o
p
e
R
1,000,000
100,000
10,000
1,000
100
Reported Websites per Month
Defacements
Phishing Pages
1
0
-
0
0
0
2
1
0
-
1
0
0
2
1
0
-
2
0
0
2
1
0
-
3
0
0
2
1
0
-
4
0
0
2
1
0
-
5
0
0
2
1
0
-
6
0
0
2
1
0
-
7
0
0
2
1
0
-
8
0
0
2
1
0
-
9
0
0
2
1
0
-
0
1
0
2
1
0
-
1
1
0
2
1
0
-
2
1
0
2
1
0
-
3
1
0
2
1
0
-
4
1
0
2
Month
Figure 2: Defacements reported to Zone-H and phishing pages
reported to PhishTank, per month from January 2000 to including
October 2014. The drops in reported defacements in February 2002,
February 2009, and March 2009 are because Zone-H was under
maintenance during that time and did not accept any new reports. No
data is available from PhishTank earlier than October 2006, when the
website was launched. The trend of an increasing number of defacements
per month, as well as the gap in the number of defacements to the number
of phishing pages of a factor of up to 33x are evident.
While the list of prominent defacements goes on [4,
17–25], it is important to note that most techniques to
deface a website, like code and data injection attacks
(such as SQL injections), improper access control, or
DNS hijacking and poisoning, have been well-studied
and protection mechanisms have been proposed by prior
USENIX Association  
24th USENIX Security Symposium  597
3
work [26, 27]. However, it is extremely hard to protect
against all defacement attacks simultaneously and at scale.
Even worse, organizations are often responsible for
hundreds (or thousands) of different websites, with different
levels of security [9]. A single insecure website that
is defaced, however, can inﬂict signiﬁcant harm on the
organization: in qualitative terms because of the loss of
reputation, and in quantitative terms because of the cost
of having to investigate and remove the defacement.
Although defacements can inﬂict serious harm on the
website operator, a two-month study by Bartoli et al. [28]
shows that many website operators still react slowly to
defacements with an average response time of over 72
hours. Moreover, their study ﬁnds that mere 24% of the
defaced websites were restored within one day, about 50%
defacements were removed within the ﬁrst week, while
more than 37% of the websites remained defaced for over
two weeks. Overall, their ﬁndings suggest that prior website
defacement protection techniques and detection methods
have not been widely adopted.
We argue that the logical ﬁrst step is to reduce the harm
inﬂicted on the website operator by quickly detecting if
his/her website has been defaced, so that the operator can
put the website in maintenance mode or restore its content
to a known good state. As such, an automatic, accurate,
and lightweight defacement detection system that monitors
websites, notiﬁes the website’s operator, and acts as an early
warning system is desired. In this paper, we propose one
such system, MEERKAT.
3 Meerkat
The approach MEERKAT takes to detect website
defacements is fundamentally different from prior work
for three reasons. First, while the system does leverage
machine learning for classiﬁcation, it does not rely on
handpicked features that were selected based on prior
domain knowledge, i.e., it requires no feature engineering.
Instead, MEERKAT relies on recent advances in machine
learning, stacked autoencoders, to learn high-level features
directly from data. Second, MEERKAT does not require the
website operator to supply any information other than the
domain name at which his/her website can be accessed. We
designed our system in this way because other defacement
detection systems that require the operator to deﬁne
keywords and other metadata, provide a reference version
of his/her website, or describe the website’s legitimate
content, have been rarely adopted in the past. By reducing
the effort required from the website operator to actually
use a defacement detection system, we hope to improve on
this situation. Finally, MEERKAT approaches defacement
detection visually: the system analyzes the look and feel
of the website and how a user would experience it by
rendering it in a web browser and analyzing a screenshot of
the website, instead of analyzing its source code or content.
Approaching the problem of detecting website deface-
ments visually has several advantages over analyzing the
source code or content of a website: some defacements rely
heavily on JavaScript and Cascading Style Sheets (CSS)
to stylize the defacement, which all must be analyzed in an
overarching browser context, and others again rely heavily
on images. In fact, similar to spam, phishing, and many
scams, defacements often do not contain much textual
content, but include images to display text instead [29],
thus they trivially evade text-based detection approaches.
Furthermore, the source code of two websites can be vastly
different, yet they appear the same to the human eye when
rendered in a browser. Therefore, leveraging prior work,
such as DELTA [30], to analyze the DOM-tree, the website’s
code, or parts thereof, is unlikely to be successful when
trying to detect website defacements accurately, which is
why we opted for a perceptual approach that does not suffer
from the aforementioned problems.
Following, we describe how MEERKAT learns from
defacements and legitimate websites, and how it detects
defacements in the wild. Next, we motivate the structure
of our deep neural network brieﬂy, then, we discuss the
concept and motivation of ﬁne-tuning the network, then,
we provide some notes on our implementation, and, last, we
brieﬂy recap how MEERKAT can be deployed in practice.
3.1 Training and Detection
Before MEERKAT can be trained, two crucial parameters
must be selected that determine how and from what data
the system learns the look and feel of defacements:
Window Size. MEERKAT is not
trained on whole
screenshots of websites, but on a window “into” each
website (i.e., only a part of the screenshot), thus we must
select the size of these representative windows. Some
important considerations must be made before picking
the size of the windows that we extract.
A small window can be more accurate because it might
only contain the exact representative part of the deface-
ment but not any noise, like an irrelevant background
color. However, if the windows are too small, the system
will also have more false positives because the windows
are not representative of defacements; instead, they are
representative for only parts of the defacements, which
might also occur in legitimate websites.
On the other hand, when using larger windows, it will
take signiﬁcantly longer to train the network initially,
but the network might learn a more accurate model.
However, if the windows are too large, then the system
will learn about speciﬁc kinds of defacements in-detail
and overﬁt; e.g., the system might learn that two
defacements are different, while the two defacements
are actually the same but have a slightly different,
dynamically-generated background image.
Considering the trade-offs for different window sizes, for
our implementation, we decided to extract windows that
are 160×160 pixels in size. Our evaluation later shows
that this window size works well in practice to detect
website defacements (see Section 4). We brieﬂy explored
other window sizes, like 30×30, that fared worse.
Window Extraction Strategy. The strategy to extract the
representative window from a screenshot is fundamental
to learn the look and feel of defacements and legitimate
598  24th USENIX Security Symposium 
USENIX Association
4
If the windows are extracted according
websites.
to some poorly chosen strategy, then we expect the
classiﬁcation accuracy to be poor as well. For instance,
if the strategy always extracts the part of a website that is
just a plain background, the system will only detect plain
backgrounds. Therefore, it is crucial that the window
extraction strategy is chosen well, and we compare some
suitable strategies, like extracting the window always
from the center or at random, later (see Section 3.1.2).
After selecting these parameters carefully, the system
can be trained. This is where most of the complexity of
MEERKAT lies. The training phase works as follows:
1. We collect a considerable amount of labeled website
defacements and legitimate websites, and we extract
their graphic representation (i.e., a screenshot of the
browser window; Section 3.1.1)
2. For each sample, we extract the 160×160 represen-
tative window from each screenshot according to the
selected extraction strategy (Section 3.1.2).
3. The representative windows are ﬁrst used to learn the
features of our approach, and then to learn the model
for classiﬁcation, for which we use a neural network
(Section 3.2).
Once the neural network is trained, MEERKAT detects
defacements in the wild. Its detection phase consists of
only two steps, on which we expand later:
1. The website is visited with a browser to retrieve a
representative screenshot (Section 3.1.1).
2. A sliding window approach is used to check if the website
is defaced and, if so, an alert is raised (Section 3.1.3).
3.1.1 Screenshot Collection
The ﬁrst step to detect if a website has been defaced based on
its look and feel is to collect a screenshot of how the website
looks for a normal visitor. MEERKAT visits the website
with a browser that renders the website like any other
browser would, and takes a screenshot once the browser
ﬁnished rendering the website. In our implementation, we
use PhantomJS to collect the screenshots of the websites.
PhantomJS is a headless browser based on the Webkit layout
engine that renders websites (nearly) identical to Safari
or Google Chrome. PhantomJS also executes included
JavaScript code, renders Cascading Style Sheets (CSS),
and includes dynamic content, such as advertisements, like
a browser that a human would use.
Another important aspect in collecting a representative
screenshot of a website with a headless browser is the