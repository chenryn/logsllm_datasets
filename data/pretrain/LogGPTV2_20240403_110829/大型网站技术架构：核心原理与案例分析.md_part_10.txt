在日常运行区间，可以获得最好的用户响应时间，随着并发用户数的增加，响应延
排查一个网站的性能瓶颈和排查一个程序的性能瓶颈的手法基本相同：检查请求处
如果性能测试结果不能满足设计或业务需求，那么就需要寻找系统瓶颈，分而治之，
大型网站结构复杂，用户从浏览器发出请求直到数据库完成操作事务，中间需要经
1．性能分析
性能测试报告
响应时间（ms）
超时
2000
1200
1000
800
500
TPS
30
#
30
2
$
表4.2性能测试结果报告
0
错误率（%）
100
40
2
Load
不详
4
5
5
瞬时响应：网站的高性能架构
内存（GB）
不详
10
压力测试
负载测试
性能测试
性能测试
性能测试
压力测试
注
---
## Page 63
4.2.1
为 Web前端性能优化、应用服务器性能优化、存储服务器性能优化3大类。
42
新的JS文件并更新HTML文件中的引用。
改变文件名实现，即更新 JavaScript 文件并不是更新 JavaScript 文件内容，而是生成一个
可以极好地改善性能。通过设置 HTTP头中Cache-Control 和Expires 的属性，可设定浏览
点击操作，构造不同的URL。
需要的JavaScript、CSS合并成一个文件，这样浏览器就只需要一次请求。图片也可以合
务的开销都很昂贵，减少HTTP请求的数目可有效提高访问性能。
行数据传输，而在服务器端，每个HTTP都需要启动独立的线程去处理。这些通信和服
图片服务、CDN服务等，主要优化手段有优化浏览器访问、使用反向代理、CDN等。
4.2
器缓存，缓存时间可以是数天，甚至是几个月。
较低，而这些文件又几乎是每次HTTP请求都需要的，如果将这些文件缓存在浏览器中，
并，多张图片合并成一张，如果每张图片都有不同的超链接，可通过CSS偏移响应鼠标
大型网站技术架构核心原理与案例分析
定位产生性能问题的具体原因后，就需要进行性能优化，根据网站分层架构，可分
在某些时候，静态资源文件变化需要及时应用到客户端浏览器，这种情况，可通过
对一个网站而言，CSS、JavaScript、Logo、图标这些静态资源文件更新的频率都比
减少 HTTP的主要手段是合并CSS、合并JavaScript、合并图片。将浏览器一次访问
HTTP协议是无状态的应用层协议，意味着每次HTTP请求都需要建立通信链路、进
1．减少 http 请求
2.性能优化
2.使用浏览器缓存
一般说来Web前端指网站业务逻辑之前的部分，包括浏览器加载、网站视图模型
使用浏览器缓存策略的网站在更新静态资源时，应采用批量更新的方法，比如需要
Web前端性能优化
浏览器访问优化
---
## Page 64
4.2.2
源使用独立域名访问，避免请求静态资源时发送Cookie，减少Cookie传输的次数。
对于某些静态资源的访问，如CSS、Script 等，发送Cookie没有意义，可以考虑静态资
后立即执行，有可能会阻塞整个页面，造成页面显示缓慢，因此JavaScript最好放在页面
放在页面最上面，让浏览器尽快下载 CSS。JavaScript 则相反，浏览器在加载JavaScript
据量。文本文件的压缩效率可达 80%以上，因此 HTML、CSS、JavaScript文件启用GZip
新，并有一定的间隔时间，以免用户浏览器突然大量缓存失效，集中更新缓存，造成服
更新10个图标文件，不宜把10个文件一次全部更新，而是应一个文件一个文件逐步更
从CDN直接返回给浏览器，最短路径返回响应，加快用户访问速度，减少数据中心负载
因此用户请求路由的第一跳就到达了CDN服务器，当CDN中存在浏览器请求的资源时，
如图4.5所示。
数据缓存在离用户最近的地方，使用户以最快速度获取数据，即所谓网络访问第一跳，
此哪些数据需要写入Cookie需要慎重考虑，尽量减少Cookie中传输的数据量。另一方面，
最下面。但如果页面解析时就需要用到JavaScript，这时放在底部就不合适了。
而服务器资源不足的情况下要权衡考虑。
压缩可达到较好的效果。但是压缩对服务器和浏览器产生一定的压力，在通信带宽良好，
务器负载骤增、网络堵塞的情况。
压力。
由于CDN部署在网络运营商的机房，这些运营商又是终端用户的网络服务提供商
CDN（Content Distribute Network，内容分发网络）的本质仍然是一个缓存，而且将
浏览器会在下载完全部CSS之后才对整个页面进行渲染，因此最好的做法是将CSS
在服务器端对文件进行压缩，在浏览器端对文件解压缩，可有效减少通信传输的数
5.减少Cookie传输
4.CSS放在页面最上面、JavaScript放在页面最下面
3.启用压缩
一方面，Cookie包含在每次请求和响应中，太大的Cookie会严重影响数据传输，因
CDN加速
4瞬时响应：网站的高性能架构T
43
---
## Page 65
向代理服务器位于网站机房一侧，代理网站Web服务器接收HTTP请求。如图4.6所示。
4.2.3
但是这些文件访问频度很高，将其缓存在CDN 可极大改善网页的打开速度。
44
大型网站技术架构核心原理与案例分析
传统代理服务器位于浏览器一侧，代理浏览器将HTTP请求发送到互联网上，而反
CDN 能够缓存的一般是静态资源，如图片、文件、CSS、Script脚本、静态网页等，
和传统代理服务器可以保护浏览器安全一样，反向代理服务器也具有保护网站安全
反向代理
览器
网站用户
用户发起访问请求
动态资源访问
图4.6利用反向代理的网站架构
图4.5利用CDN的网站架构
一静态资源访问
反向代理服务器
网络服务提供商本地机房
网站数据中心机房
清求转
请求转发
CDN服务
请求转发
m
数据更新
10.0.0.2
10.0.0.
---
## Page 66
的作用，来自互联网的访问请求必须经过代理服务器，相当于在Web服务器和可能的网
缓存。在整个网站应用中，缓存几乎无所不在，既存在于浏览器，也存在于应用服务器
4.3.1分布式缓存
发最复杂，变化最多的地方，优化手段主要有缓存、集群、异步等。
提高系统总体处理能力，进而改善网站高并发情况下的性能。
问速度，当这些动态内容有变化时，通过内部通知机制通知反向代理缓存失效，反向代
科及某些博客论坛网站，把热门词条、帖子、博客缓存在反向代理服务器上加速用户访
服务器负载压力。事实上，有些网站会把动态内容也缓存在代理服务器上，比如维基百
静态内容的时候，就可以直接从反向代理服务器返回，加速Web请求响应速度，减轻Web
访问静态内容的时候，静态内容就被缓存在反向代理服务器上，这样当其他用户访问该
络攻击之间建立了一个屏障。
那么被缓存的数据无需重复计算即可直接使用，因此缓存还起到减少计算时间的作用。
问速度快，可以减少数据访问的时间，另一方面如果缓存的数据是经过计算处理得到的，
理使用缓存，对网站性能优化意义重大。
和数据库服务器；既可以对数据缓存，也可以对文件缓存，还可以对页面片段缓存。合
4.3
理会重新加载最新的动态内容再次缓存起来。
此外，反向代理也可以实现负载均衡的功能，而通过负载均衡构建的应用集群可以
除了安全功能，代理服务器也可以通过配置缓存功能加速Web请求。当用户第一次
回顾网站架构演化历程，当网站遇到性能瓶颈时，第一个想到的解决方案就是使用
应用服务器就是处理网站业务的服务器，网站的业务代码都部署在这里，是网站开
缓存指将数据存储在相对较高访问速度的存储介质中，以供系统处理。一方面缓存访
1.缓存的基本原理
应用服务器性能优化
网站性能优化第一定律：优先考虑使用缓存优化性能。
4瞬时响应：网站的高性能架构
45
---
## Page 67
不到或数据已失效，再访问数据库，并将数据写入缓存，如图4.8所示。
的搜索列表信息，热门商品信息等。应用程序读取数据时，先到缓存中读取，如果读取
软件开发中常用到的一种数据结构，其设计思想在很多场景下都可以应用。
余数即为 Hash 表索引，使用该索引可直接访问得到 Hash 表中存储的 KV 对。Hash 表是
计算 Hash 表的索引下标，最简单的是余数法，使用Hash表数组长度对 Hashcode 求余，
语言中 Hashcode 方法包含在根对象 Object 中，其返回值是一个 Int。然后通过Hashcode
许多语言支持获得任意对象的HashCode，可以把HashCode理解为对象的唯一标示符，Java
Hash 表中的存储。
存储在内存Hash 表中。Hash 表数据读写的时间复杂度为O（1），图4.7为一对KV 在
▼
46
大型网站技术架构核心原理与案例分析
缓存主要用来存放那些读写比很高、很少变化的数据，
计算KV 对中Key的 HashCode 对应的 Hash 表索引l，可快速访问 Hash表中的数据。
缓存的本质是一个内存 Hash 表，网站应用中，数据缓存以一对Key、Value 的形式
计算HashCode对应的Hash表索引
计算key的HashCode
101%8=3
数据库
图4.8使用缓存存取数据
1读取数据
图4.7Hash表存储例子
应用程序
("abc","hello")
缓存
，如商品的类目信息，热门词
01234567
---
## Page 68
表和内存的高速访问特性，将这 20%的数据缓存起来，可很好地改善系统性能，提高数
时间才能被买家看到。在互联网应用中，这种延迟通常是可以接受的，但是具体应用仍