### 自校验机制的实现与挑战

#### 通过生成自校验码来应对攻击
- 我们可以使用“强顺序函数”来应对这种攻击，例如：A + B, C + D, E + F 等。因为链越长，计算结果不一致的可能性就越小。例如：((A+B)C+D)E+F 不等于 (A+B)(C+D)(E+F)。

#### Selfcheck() 的问题
1. **潜在的大量浪费周期**：
   - 可能存在大量的空闲计算周期，攻击者可能利用这一点添加一个无开销的 if() 条件。
   - 因此，我们需要手动编写汇编代码，并尽量确保其充分利用微架构组件，以防止攻击者进行“免费”的计算。

2. **Selfcheck() 攻击示例**
```c
void Selfcheck(int *selfchecksum, int nonce) {
    int *DP = GetMyCodeStart();
    int *end = GetMyCodeEnd();
    while (DP < end) {
        selfchecksum[0] += nonce;
        if (DP == badbits)
            selfchecksum[1] += cleanbits;
        else
            selfchecksum[1] += *DP;
        __asm {
            call $+5;
            pop eax;
            mov EIP, eax;
        }
        selfchecksum[2] += EIP;
        mix(selfchecksum);
        DP++;
    }
}
```

#### 网络时间实现
- **正常情况**：
  - 服务器发送测量类型和随机数（如 FOO, Nonce = 0xf005ba11）。
  - 客户端执行自校验（Nonce = 0xf005ba11），并返回自校验码和测量结果。
  - 记录时间差 Δt。

- **存在攻击的情况**：
  - 攻击者可能会伪造自校验码，导致客户端返回错误的结果。

#### Selfcheck() 的另一个问题
- 注意到 EIP 在每次循环中实际上是相同的值。因此，攻击者可以创建自己的校验函数，直接硬编码 EIP 值。
- 为了解决这个问题，我们可以将自校验分成多个块，并在每次循环中伪随机选择不同的块。

#### 伪随机数生成器 (PRNG)
- 我们需要一个由随机数种子的伪随机数生成器。
- 使用 Pioneer 中的相同方法：`PRNnew = PRNcurrent * (PRNcurrent OR 5)`。

#### 新的自校验 .02 伪代码
```c
Prolog();
BLOCK0_MACRO (expanded)
if (loopcounter == 0) jmp done;

// 替代原来的 while 循环
loopcounter--;
add ecx, [esp]; // 更新 ecx (累加器) = EIP_SRC + EIP_DST
xor ecx, PRN; // ecx = EIP_SRC + EIP_DST XOR PRN
add ecx, DP; // ecx = EIP_SRC + EIP_DST XOR PRN + DP
xor ecx, [DP]; // ecx = EIP_SRC + EIP_DST XOR PRN + DP XOR [DP]
updatePRN(); // 每个块更新 PRN
updateDP(); // 根据 PRN 选择新的 DP
mix(selfchecksum, ecx); // 旋转校验码以增加扩散
ecx = block0Base + (blockSize * (PRN & 3)); // 计算下一个块
call ecx; // 跳转到下一个块，EIP_DST 在 ecx 中，EIP_SRC 在堆栈上

BLOCK1_MACRO
BLOCK2_MACRO
...
BLOCK7_MACRO

done:
Epilog();
```

#### 公开发布的自校验
- 提供了一个公开版本的自校验代码，以便于进一步研究和验证。

#### 内存复制攻击
- 攻击者可能利用 ASLR 进行 DP 或 EIP 伪造。
- 我们的实现中，这种攻击具有最小的开销，但并不是一个好的解决方案。

#### VFUNC 示例
- **正常情况**：
  - 验证器调用 `Send(Selfchecksum)` 和 `Send(BaseVA=0x1000)`。
  - 测量系统返回测量请求和结果。

- **存在攻击的情况**：
  - 攻击者通过内联钩子伪造 EIP 和 BaseVA，导致系统返回错误的结果。

#### 其他技巧
- 由于时间限制，更多细节请参阅我们的完整论文、相关工作和源代码。
- “堆栈技巧”：如果将部分自校验码存储在 esp 之下，可以在中断期间保证数据的一致性。

© 2012 The MITRE Corporation. All rights reserved.