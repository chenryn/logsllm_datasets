### Intrusion Alert Analysis and Correlation

#### 4. Fully Reduced Graph for the Largest Aggregated Hyper-Alert Correlation
The fully reduced graph for the largest aggregated hyper-alert correlation is shown in Figure 4. This graph represents the most significant alerts and their relationships, providing a clear overview of the intrusion landscape.

#### 5.3 Focused Analysis
Focused analysis is a powerful tool for filtering out the most relevant parts of a large hyper-alert correlation graph. It is especially useful when a user has specific knowledge about the systems being protected or potential ongoing attacks. For example, a user might perform a focused analysis with the constraint `DestIP = ServerIP`, where `ServerIP` is the IP address of a critical server, to identify attacks targeting that server. Alternatively, the user might use `SrcIP = ServerIP ∨ DestIP = ServerIP` to find attacks originating from or directed at the server, suspecting that the server may have been compromised.

In our experiments, we applied several focusing constraints after gathering information about the systems involved in the CTF event. These constraints included:
1. **Cf1**: `DestIP = 010.020.001.010`
2. **Cf2**: `SrcIP = 010.020.011.251 ∧ DestIP = 010.020.001.010`

Applying these constraints to the largest hyper-alert correlation graph, we obtained:
- **Cf1**: 2154 nodes and 19423 edges
- **Cf2**: 51 nodes and 28 edges

The corresponding fully reduced graphs are shown in Figures 6 and 7, respectively. Isolated nodes are depicted in gray. These two graphs also appear in the results of graph decomposition (Section 5.4).

Focused analysis aims to approximate a sequence of attacks that satisfy the given constraints. Its effectiveness depends on how closely the constraints match the invariants of the attack sequences. A sophisticated attacker might avoid detection by launching attacks from different sources (or stepping stones) and introducing delays between attacks. Therefore, this utility should be used with caution.

#### 5.4 Graph Decomposition
We decomposed the largest hyper-alert correlation graph using three clustering constraints. In all these constraints, we set `A1 = A2 = {SrcIP, DestIP}`.

1. **Cc1(A1, A2)**: `A1.DestIP = A2.DestIP`. This clusters all hyper-alerts that share the same destination IP addresses, grouping them by victim systems.
2. **Cc2(A1, A2)**: `A1.SrcIP = A2.SrcIP ∧ A1.DestIP = A2.DestIP`. This clusters hyper-alerts that share the same source and destination IP addresses.
3. **Cc3(A1, A2)**: `A1.SrcIP = A2.SrcIP ∨ A1.DestIP = A2.DestIP ∨ A1.SrcIP = A2.DestIP ∨ A1.DestIP = A2.SrcIP`. This clusters hyper-alerts connected via common IP addresses, even if they do not share the same IP address directly.

Table 3 summarizes the statistics of the decomposed graphs:

| Clustering Constraint | # Clusters | # Graphs | Cluster ID | # Connected Nodes | # Edges | # Isolated Nodes | # Correlated Nodes |
|-----------------------|------------|----------|------------|-------------------|---------|-----------------|--------------------|
| Cc1                   | 12         | 10       | 1-12       | 2154              | 19423   | 0               | 1970               |
| Cc2                   | 185        | 37       | 1-12       | 224-2935          | 1966-25293 | 35-0            | 0-17               |
| Cc3                   | 2          | 1        | 1-2        | -                 | -       | -               | -                  |

**Note**: Cc3 effectively removed one hyper-alert (Stream DoS) from the original graph because its source IPs were spoofed and the destination IP was the target of the attack. This indicates that all other hyper-alerts share a common IP address with some others.

Isolated nodes in the resulting graphs represent hyper-alerts that prepare for or are prepared for by those that do not satisfy the same clustering constraints. For example, an attacker might hack into a host with a buffer overflow attack, install a DDoS daemon, and start the daemon program, which then contacts its master program. The corresponding alerts (detection of the buffer overflow attack and the daemon’s message) will not have the same destination IP address, though they are related.

Figures 6 and 7 show decomposed graphs for Cc1 and Cc2, respectively. Both graphs are fully reduced to save space. All hyper-alerts in Figure 6 are destined to `010.020.001.010`, showing several possible attack strategies. The most obvious ones lead to `Mstream Zombie` and `TrinooDaemon`, but multiple paths exist, making it difficult to determine the exact sequence of attacks.

Figure 6 involves 75 source IP addresses, including `216.136.173.152`, which does not belong to the CTF subnet. We believe these attacks belong to different sequences, as there were intensive attacks from multiple participants in the DEF CON 8 CTF event.

Figure 7, related to Figure 6, focuses on the same destination IP address. Since all hyper-alerts in Figure 7 have the same source and destination IP addresses, it is likely that the correlated ones belong to the same sequence of attacks. Note that `HP OpenView SNMP Backdoor` appears both as a connected and isolated node, indicating that some instances are correlated while others are isolated.

### Attack Strategies Discovered
Using the three utilities, we analyzed the correlated hyper-alerts and discovered several attack strategies:

1. **Scanning Followed by Code Execution**: Attackers at `010.020.011.099` scanned host `010.020.001.010` using tools like `CyberCop Scanner`, `IPHalfScan`, `Nmap Scan`, and `Port Scan`, followed by HTTP-based and FTP-based attacks (e.g., `HTTP DotDot` and `FTP Root`). Similar sequences were observed from attackers at `010.020.011.093` and `010.020.011.227` against host `010.020.001.008`.

2. **Concise Sequence of Attacks**: Attackers at `010.020.011.240` used a concise sequence against host `010.020.001.013`: `Nmap Scan` followed by `PmapDump` and then `ToolTalk Overflow`. This sequence appeared frequently in the dataset.

3. **Multiple Web Servers Targeted**: Attackers at `010.020.011.074` used the same sequence of HTTP-based attacks (e.g., `HTTP DotDot` and `HTTP TestCgi`) against multiple web servers (e.g., `010.020.001.014`, `010.020.001.015`, `010.020.001.019`). Our analysis shows that `HTTP DotDot` prepares for subsequent HTTP-based attacks, although further analysis of timestamps suggests that this correlation may be incorrect.