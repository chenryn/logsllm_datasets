Csc_Access
Stream_DoS
Mstream
_Zombie
Trinoo
Daemon
FSP_Detected
FTP_Put
Rexec
Rsh
HTTP_QuikStore
Fig. 4. The fully reduced graph for the largest aggregated hyper-alert correlation graph.
5.3 Focused Analysis
Focused analysis can help ﬁlter out the interesting parts of a large hyper-alert correlation
graph. It is particularly useful when a user knows the systems being protected or the
potential on-going attacks. For example, a user may perform a focused analysis with
focusing constraint DestIP = ServerIP , where ServerIP is the IP address of a
critical server, to ﬁnd out attacks targeted at the server. As another example, he/she may
Analyzing Intensive Intrusion Alerts via Correlation
89
25000
20000
t
n
u
o
C
15000
10000
5000
0
0
100
# nodes
# edges
500
600
200
Interval threshold (second)
300
400
Fig. 5. Sizes of the reduced graphs w.r.t. the interval threshold for the largest hyper-alert correlation
graph
use SrcIP = ServerIP ∨ DestIP = ServerIP to ﬁnd out attacks targeted at or
originated from the server, suspecting that the server may have been compromised.
In our experiments, we tried a number of focusing constraints after we learned
some information about the systems involved in the CTF event. Among these focusing
constraints are (1) Cf1 : (DestIP = 010.020.001.010) and (2) Cf2 : (SrcIP =
010.020.011.251∧ DestIP = 010.020.001.010). We applied both focusing constraints
to the largest hyper-alert correlation graph. The results consist of 2154 nodes and 19423
edges for Cf1, and 51 nodes and 28 edges for Cf2. The corresponding fully reduced
graphs are shown in Fig. 6 and Fig. 7, respectively. (Isolated nodes are shown in gray.)
These two graphs also appear in the results of graph decomposition (Section 5.4). We
defer the discussion of these two graphs to the next subsection.
Focused analysis is an attempt to approximate a sequence of attacks that satisfy
the focusing constraint. Its success depends on the closeness of focusing constraints
to the invariants of the sequences of attacks. A cunning attacker would try to avoid
being correlated by launching attacks from different sources (or stepping stones) and
introducing delays in between attacks. Thus, this utility should be used with caution.
5.4 Graph Decomposition
We applied three clustering constraints to decompose the largest hyper-alert correlation
graph discovered in Section 5.1. In all these clustering constraints, we let A1 = A2 =
{SrcIP, DestIP}.
1. Cc1(A1, A2): A1.DestIP = A2.DestIP . This is to cluster all hyper-alerts that
share the same destination IP addresses. Since most of attacks are targeted at the
hosts at the destination IP addresses, this is to cluster hyper-alerts in terms of the
victim systems.
2. Cc2(A1, A2): A1.SrcIP = A2.SrcIP ∧ A1.DestIP = A2.DestIP . This is to
cluster all the hyper-alerts that share the same source and destination IP addresses.
3. Cc3(A1, A2): A1.SrcIP = A2.SrcIP ∨ A1.DestIP = A2.DestIP ∨ A1.SrcIP
= A2.DestIP ∨ A1.DestIP = A2.SrcIP . This is to cluster all the hyper-alerts that
90
P. Ning, Y. Cui, and D.S. Reeves
Table 3. Statistics of decomposing the largest hyper-alert correlation graph.
# clusters # graphs cluster ID
2
3
4
Cc1
12
Cc2
185
Cc3
2
10
37
1
1
0
5
6
7
8 9 10 11 12
# connected nodes 2154 224 105 227 83 11 54 28 0 23 6 0
# edges
19423 1966 388 2741 412 30 251 51 0 26 5 0
0 1 0 0 4
# isolated nodes
0
3 0 29 0 0
# correlated nodes 1970
0
2 0 28 0 0
0
# edges
2240
# isolated nodes
35 26 15 12 4 22 13 26
– – – – –
–
# connected nodes 2935
– – – – –
–
# edges
25293
# isolated nodes
–
– – – – –
0
17
66
0
0
0
1
0
0
0
21
–
–
–
0
12
10
17
–
–
–
0
0
0
–
–
–
0
0
0
–
–
–
3
4
are connected via common IP addresses. Note that with this constraint, hyper-alerts
in the same cluster may not share the same IP address directly, but they may connect
to each other via other hyper-alerts.
Table 3 shows the statistics of the decomposed graphs. Cc1 resulted in 12 clusters,
among which 10 clusters contain edges. Cc2 resulted in 185 clusters, among which 37
contain edges. Due to space reasons, we only show the ﬁrst 12 clusters for Cc2. Cc3 in
effect removes one hyper-alert from the original graph. This hyper-alert is Stream DoS,
which does not share the same IP address with any other hyper-alerts. This is because the
source IPs of Stream DoS are spoofed and the destination IP is the target of this attack.
This result shows that all the hyper-alerts except for Stream DoS share a common IP
address with some others.
The isolated nodes in the resulting graphs are the hyper-alerts that prepare for or are
prepared for by those that do not satisfy the same clustering constraints. Note that having
isolated hyper-alerts in a decomposed graph does not imply that the isolated hyper-alerts
are correlated incorrectly. For example, an attacker may hack into a host with a buffer
overﬂow attack, install a DDOS daemon, and start the daemon program, which then tries
to contact its master program. The corresponding alerts (i.e., the detection of the buffer
overﬂow attack and the daemon’s message) will certainly not have the same destination
IP address, though they are related.
Figures 6 and 7 show a decomposed graph for Cc1 and Cc2, respectively. Both
graphs are fully reduced to save space. All the hyper-alerts in Figure 6 are destined to
010.020.001.010. Figure 6 shows several possible attack strategies. The most obvious
ones are those that lead to the Mstream Zoombie and TrinooDaemon. However, there
are multiple paths that lead to these two hyper-alerts. Considering the fact that multiple
attackers participated in the DEF CON 8 CTF event, we cannot conclude which path
caused the installation of these daemon programs. Indeed, it is possible that none of
them is the actual way, since the IDS may have missed some attacks.
Figure 6 involves 75 source IP addresses, including IP address 216.136.173.152,
which does not belong to the CTF subnet. We believe that these attacks belong to different
sequences of attacks, since there were intensive attacks from multiple attackers who
participated in the CTF event.
Analyzing Intensive Intrusion Alerts via Correlation
91
HTTP_WebSite_Sample
HTTP_Cold_Fusion
HTTP_IE_BAT
HTTP_Websendmail
HTTP_WebSite_Uploader
FTP_Args
HTTP_Carbo_Server
HTTP_WebFinger
HTTP_Guestbook
HTTP_PHF
HTTP_AnyFormPost
HTTP_Campas
CyberCop_Scanner
HTTP_ColdFusion_SourceWindow
HTTP_FaxSurvey
HTTP_Netscape_PageServices
HTTP_NphTestCgi
Kerberos_User_Snarf
HTTP_ColdFusion_FileExists
HTTP_TestCgi
HTTP_PHP_Read
ISS
HTTP_DotDot
HTTP_ColdFusion_ViewExample
FTP_Put
Port_Scan
DNS_Iquery
HTTP_SiteCsc_Access
HTTP_MachineInfo
HTTP_FormMail
HTTP_Info2WWW
HTTP_BAT_Execute
HTTP_SGI_Wrap
HTTP_Shells
Sun_SNMP_Backdoor
Mstream_Zombie
TrinooDaemon
IPHalfScan
FTP_Syst
Nmap_Scan
FTP_Root
FTP_Bounce
FTP_Pass
FTP_User
SYNFlood
HP_OpenView_SNMP_Backdoor
HTTP_Unix_Passwords
FSP_Detected
BackOrifice
PmapDump
SNMP_Set
FTP_PrivilegedBounce
FTP_PrivilegedPort
Fig. 6. A fully reduced hyper-alert correlation graph resulting from graph decomposition with Cc1.
(Cluster ID = 1; DestIP = 010.020.001.010.)
FTP_Root
FTP_PrivilegedPort
HP_OpenView_SNMP_Backdoor
ISS
FTP_Args
HP_OpenView_SNMP_Backdoor 
HTTP_Campas
HTTP_DotDot
HTTP_NphTestCgi
HTTP_PHF
HTTP_Shells
HTTP_TestCgi
HTTP_WebFinger
HTTP_WebSite_Uploader
Kerberos_User_Snarf
Sun_SNMP_Backdoor
Fig. 7. A fully reduced hyper-alert correlation graph resulting from graph decomposition with Cc2.
(Cluster ID = 10; SrcIP = 010.020.011.251; DestIP = 010.020.001.010.)
Figure 7 is related to Figure 6, since they both are about destination IP address
010.020.001.010. Indeed, Figure 7 is a part of Figure 6, though in Figure 6, ISS prepares
92
P. Ning, Y. Cui, and D.S. Reeves
for HTTP Campas through HTTP DotDot. Since all the hyper-alerts in Figure 7 have
the same source and destination IP addresses, it is very possible that the correlated ones
belong to the same sequence of attacks. Note that HP OpenView SNMP Backdoor ap-
pears as both connected and isolated node. This is because some instances are correlated,
while the others are isolated.
We analyzed the correlated hyper-alerts using the three utilities and discovered sev-
eral strategies used by the attackers. We ﬁrst restricted us to the hyper-alert correlation
graphs that satisﬁes the clustering constraint Cc2. One common strategy reﬂected by
these graphs is to use scanning attacks followed by attacks that may lead to execu-
tion of arbitrary code. For example, the attacker(s) at 010.020.011.099 scanned host
010.020.001.010 with CyberCop Scanner, IPHalfScan, Nmap Scan, and Port Scan and
then launched a sequence of HTTP-based attacks (e.g., HTTP DotDot) and FTP based
attacks (e.g., FTP Root). The attacker(s) at 010.020.011.093 and 010.020.011.227 also
used a similar sequence of attacks against the host 010.020.001.008.
As another strategy, the attacker(s) at 010.020.011.240 used a concise sequence of
attacks against the host at 010.020.001.013: Nmap Scan followed by PmapDump and
then ToolTalk Overﬂow. Obviously, they used Nmap Scan to ﬁnd the portmap service,
then used PmapDump to list the RPC services, and ﬁnally launched a ToolTalk Overﬂow
attack against the ToolTalk service. Indeed, the sequence Nmap Scan followed by Pmap-
Dump with the same source and destination IP address appeared many times in this
dataset.
The attacker(s) at 010.020.011.074 used the same sequence of HTTP-based attacks
(e.g., HTTP DotDot and HTTP TestCgi) against multiple web servers (e.g., servers at
010.020.001.014, 010.020.001.015, 010.020.001.019, etc.). Our hyper-alert correlation
graphs shows that HTTP DotDot prepares for the following HTTP-based attacks. How-
ever, our further analysis of the dataset shows that this may be an incorrect correlation.
Though it is possible that the attacker used HTTP DotDot to collect necessary informa-
tion for the later attacks, the timestamps of these alerts indicate that the attacker(s) used a