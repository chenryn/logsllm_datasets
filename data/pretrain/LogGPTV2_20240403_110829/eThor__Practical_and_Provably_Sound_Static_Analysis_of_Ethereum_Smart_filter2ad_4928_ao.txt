1 contract Bob {
2
3
4
5
6
7
8 }
This contract is labeled to be TOD even though the transferred
amount is constantly 5 and cannot be influenced by any other
transaction.
Validated arguments. The VA (Validated arguments) property is
again not semantically specified, but shall ensure that arguments to
a function are checked for meeting desired preconditions. Similarly
to the HE property, it is unclear how such a goal should be captured
by a generic property.
The compliance pattern requires that such values that depend
on input value may only be written to the global storage if they
have previously been checked, meaning that must have been a
conditional branching before whose condition depended on the
argument.
The following contract is an easy example of a contract matching
the compliance pattern while not performing proper argument
validation:
}
count ++;
if (x = 0 && i  uint ) bal ;
function take () {
}
}
lock = 1;
1 contract Bank {
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20 }
lock = 0;
}
function release () {
function drain ( address a) {
if ( lock == 1) { throw ; }
lock = 1;
a. call . value ( bal [ msg . sender ]) () ;
bal [ msg . sender ] = 0;
lock = 0;
function drain ( address a) {
if ( lock == 1) { throw ; }
uint lock ;
mapping ( address => uint ) bal ;
lock = 1;
a. call . value ( bal [ msg . sender ]) () ;
bal [ msg . sender ] = 0;
lock = 0;
1 contract Bank {
2
3
4
5
6
7
8
9
10
11
12 }
Even though the implementation of the drain function is iden-
tical in both contracts, the first contract allows for a (same-
function) reentrancy attack while the second does not. ZEUS,
however, would label both of these contracts to be safe.
}
Accepted for ACM CCS, 2020
Clara Schneidewind, Ilya Grishchenko, Markus Scherer, and Matteo Maffei
Unfortunately, we were not able to conduct an empirical evalua-
tion of the described issues since no sources for ZEUS are made
available. Our request to the authors of [34] to provide us with
sources or binaries that would allow us to experimentally access
ZEUS has been denied. For this reason we were forced to conduct
our comparison with ZEUS on the publicly available dataset for
which [34] reports numbers. We further discuss this dataset in the
following.
Problems in the ZEUS dataset. While comparing HoRSt against
the dataset used in [34]17 we encountered several problems. The
dataset is a list of 1524 contracts with the classification provided
by ZEUS and the assessment whether the authors consider this
classification correct. No source or bytecode is provided.
Of these 1524 contracts, 21 have a name that does not resemble a
Ethereum address (e.g. Code_3_fdf6d_faucet). Of the remaining
1503, 397 actually have a truncated address (i.e., 39 instead of 40
hexadecimal digits). The remaining 1106 addresses contain dupli-
cates. After removing them we arrive at 1033 addresses. For 286
of these addresses we were not able to obtain the bytecode: 53
have been self-destructed according to https://etherscan.io which
makes retrieving their bytecode non-trivial, 232 have no recorded
transaction (in particular no transaction that created them) and
1 is an external account (i.e., an address with no code deployed).
This leaves us with 747 addresses. After removing contracts with
the same bytecode we arrive at 720 contracts18. We contacted the
authors of [34] on July 16th 2019 about these problems and received
no answer as of January 20th 2020.
17https://docs.google.com/spreadsheets/d/12g-pKsCtp3lUmT2AXngsqkBGSEoE6xNH51e-
ofZa8
18Note that the authors of [34] deduplicated their dataset on the source level, therefore
it may well be that these same bytecodes were produced by different source codes
36