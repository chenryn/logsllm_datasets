## Greenplum 最佳实践 - 多维分析的使用(CUBE, ROLLUP, GROUPING SETS in GreenPlum and Oracle)  
##### [TAG 21](../class/21.md) , [TAG 24](../class/24.md) , [TAG 11](../class/11.md)
### 作者                
digoal                
### 日期                
2012-12-18                
### 标签                
PostgreSQL , Oracle , Greenplum , cube , rollup , grouping sets    
----       
## 背景           
cube, rollup, grouping sets是GROUP BY中使用的, 可用于多种组合分组. 而不局限于group by 中指出的字段.  
例如 :   
```  
group by col1, col2, col3 : 1. 常规的分组  
  (col1, col2, col3)  
group by cube(col1, col2, col3) : 2^3. 相当于以下分组的union all  
  (col1, col2, col3)  
  (col1, col2)  
  (col1, col3)  
  (col2, col3)  
  (col1)  
  (col2)  
  (col3)  
  ()  
group by rollup(col1, col2, col3) : 3+1. 相当于以下分组的union all  
  (col1, col2, col3)  
  (col1, col2)  
  (col1)  
  ()  
group by grouping sets((col1, col2), (col1, col3, col4)) : 2. 相当于以下分组的union all  
  (col1, col2)  
  (col1, col3, col4)  
group by col4, cube(col1, col2, col3) : 2^3. 相当于以下分组的union all  
  col4, (col1, col2, col3)  
  col4, (col1, col2)  
  col4, (col1, col3)  
  col4, (col2, col3)  
  col4, (col1)  
  col4, (col2)  
  col4, (col3)  
  col4, ()  
group by rollup((col1, col2, col4), col3) : 2+1. 相当于以下分组的union all  
  (col1, col2, col4), col3  
  (col1, col2, col4)  
  ()  
```  
目前PostgreSQL (9.5开始支持了)不支持这些用法, GreenPlum 3.3.4支持.  
Oracle支持.  
下面在GreenPlum以及Oracle中演示一下这几种用法.  
## 一、Oracle  
创建测试表  
```  
CREATE TABLE dimension_tab (  
  fact_1_id   NUMBER NOT NULL,  
  fact_2_id   NUMBER NOT NULL,  
  fact_3_id   NUMBER NOT NULL,  
  fact_4_id   NUMBER NOT NULL,  
  sales_value NUMBER(10,2) NOT NULL  
);  
```  
插入测试数据  
```  
INSERT INTO dimension_tab  
SELECT TRUNC(DBMS_RANDOM.value( 1, 3)) AS fact_1_id,  
       TRUNC(DBMS_RANDOM.value( 1, 6)) AS fact_2_id,  
       TRUNC(DBMS_RANDOM.value( 1, 11)) AS fact_3_id,  
       TRUNC(DBMS_RANDOM.value( 1, 11)) AS fact_4_id,  
       ROUND(DBMS_RANDOM.value( 1, 100), 2) AS sales_value  
FROM   dual  
CONNECT BY level <= 1000;  
COMMIT;  
```  
ROLLUP 测试  
```  
In addition to the regular aggregation results we expect from the GROUP BY clause,   
the ROLLUP extension produces group subtotals from right to left and a grand total.   
If "n" is the number of columns listed in the ROLLUP, there will be n+1 levels of subtotals.  
SELECT fact_1_id,  
       fact_2_id,  
       fact_3_id,  
       SUM(sales_value) AS sales_value  
FROM   dimension_tab  
GROUP BY ROLLUP (fact_1_id, fact_2_id, fact_3_id)  
ORDER BY fact_1_id, fact_2_id, fact_3_id;  
 FACT_1_ID  FACT_2_ID  FACT_3_ID SALES_VALUE  
---------- ---------- ---------- -----------  
         1          1          1      391.03  
         1          1          2      292.54  
         1          1          3      306.14  
         1          1          4      517.02  
         1          1          5      426.57  
         1          1          6      525.23  
         1          1          7      318.49  
         1          1          8      417.48  
         1          1          9      441.98  
         1          1         10      263.05  
         1          1                3899.53  
         1          2          1      239.45  
         1          2          2      470.51  
         1          2          3      253.29  
         1          2          4      203.97  
         1          2          5      635.41  
         1          2          6      549.31  
         1          2          7      506.27  
         1          2          8      353.12  
         1          2          9      394.07  
         1          2         10      490.13  
         1          2                4095.53  
         1          3          1      973.27  
         1          3          2      532.92  
         1          3          3      718.65  
         1          3          4      676.31  
         1          3          5      357.85  
         1          3          6      854.94  
         1          3          7      398.28  
         1          3          8      417.47  
         1          3          9      421.62  
         1          3         10      764.42  
         1          3                6115.73  
         1          4          1      227.24  
         1          4          2       852.9  
         1          4          3       414.8  
         1          4          4      434.01  
         1          4          5      537.11  
         1          4          6      559.52  
         1          4          7      469.66  
         1          4          8      572.12  
         1          4          9      684.96  
         1          4         10      661.73  
         1          4                5414.05  
         1          5          1       813.1  
         1          5          2      634.41  
         1          5          3      301.85  
         1          5          4      618.07  
         1          5          5      629.55  
         1          5          6      377.24  
         1          5          7      219.54  
         1          5          8      724.27  
         1          5          9      216.57  
         1          5         10      429.87  
         1          5                4964.47  
         1                          24489.31  
         2          1          1      252.79  
         2          1          2      669.02  
         2          1          3      773.11  
         2          1          4      393.42  
         2          1          5      693.87  
         2          1          6      734.42  
         2          1          7      904.45  
         2          1          8      448.28  
         2          1          9      629.31  
         2          1         10      195.91  
         2          1                5694.58  
         2          2          1       569.6  
         2          2          2      434.58  
         2          2          3      571.17  
         2          2          4      434.79  
         2          2          5      145.03  
         2          2          6      570.25  
         2          2          7       593.2  
         2          2          8      936.59  
         2          2          9      569.44  
         2          2         10      311.33  
         2          2                5135.98  
         2          3          1      686.04  
         2          3          2      331.67  
         2          3          3      659.12  
         2          3          4      593.77  
         2          3          5      588.32  
         2          3          6      559.81  
         2          3          7      588.53  
         2          3          8      375.92  
         2          3          9      677.74  
         2          3         10      395.91  
         2          3                5456.83  
         2          4          1       399.2  
         2          4          2      882.01  
         2          4          3       59.21  
         2          4          4       349.9  
         2          4          5      598.39  
         2          4          6      431.06  
         2          4          7      340.95  
         2          4          8      420.85  
         2          4          9       493.9  
         2          4         10      517.31  
         2          4                4492.78  
         2          5          1      184.45  
         2          5          2      481.18  
         2          5          3      382.22  
         2          5          4      849.66  
         2          5          5      343.34  
         2          5          6      460.22  
         2          5          7      770.76  
         2          5          8      297.37  
         2          5          9      441.46  
         2          5         10      339.33  
         2          5                4549.99  
         2                          25330.16  
                                    49819.47  
113 rows selected.  
```  
CUBE 测试  
```  
In addition to the subtotals generated by the ROLLUP extension, the CUBE extension will generate subtotals for all combinations of the dimensions specified.   
If "n" is the number of columns listed in the CUBE, there will be 2^n subtotal combinations.  
SELECT fact_1_id,  
       fact_2_id,  
       fact_3_id,  
       SUM(sales_value) AS sales_value  
FROM   dimension_tab  
GROUP BY fact_1_id, CUBE (fact_2_id, fact_3_id)  
ORDER BY fact_1_id, fact_2_id, fact_3_id;  
 FACT_1_ID  FACT_2_ID  FACT_3_ID SALES_VALUE  
---------- ---------- ---------- -----------  
         1          1          1      391.03  
         1          1          2      292.54  
         1          1          3      306.14  
         1          1          4      517.02  
         1          1          5      426.57  
         1          1          6      525.23  
         1          1          7      318.49  
         1          1          8      417.48  
         1          1          9      441.98  
         1          1         10      263.05  
         1          1                3899.53  
         1          2          1      239.45  
         1          2          2      470.51  
         1          2          3      253.29  
         1          2          4      203.97  
         1          2          5      635.41  
         1          2          6      549.31  
         1          2          7      506.27  
         1          2          8      353.12  
         1          2          9      394.07  
         1          2         10      490.13  
         1          2                4095.53  
         1          3          1      973.27  
         1          3          2      532.92  
         1          3          3      718.65  
         1          3          4      676.31  
         1          3          5      357.85  
         1          3          6      854.94  
         1          3          7      398.28  
         1          3          8      417.47  
         1          3          9      421.62  
         1          3         10      764.42  
         1          3                6115.73  
         1          4          1      227.24  
         1          4          2       852.9  
         1          4          3       414.8  
         1          4          4      434.01  
         1          4          5      537.11  
         1          4          6      559.52  
         1          4          7      469.66  
         1          4          8      572.12  
         1          4          9      684.96  