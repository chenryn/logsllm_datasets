            require(owner == arg0);
            require(arg0 != adress(0x0));
            emit TransferOwnership(owner, arg0);
            owner = arg0;
        }
    }
从代码中可以很明显的看到一个特殊的函数`x_975ef7df`，这是唯一一个涉及到数组操作，且会触发Tranfser事件的函数。
        function x_975ef7df(address[] arg0, address[] arg1, uint256 arg2) {
            require(owner == msg.sender);
            require(arg0.length > 0, "Address arrays must not be empty");
            require(arg0.length == arg1.length, "Address arrays must be of equal length");
            for (i=0; i  uint256) balances;
        uint256 public totalSupply;
        mapping (address => mapping (address => uint256)) allowance;
        address public owner;
        string public name;
        string public symbol;
        uint8 public decimals = 18;
        event Transfer(address indexed _from, address indexed _to, uint256 _value);
        function MyTest() {
            name = "we are ruan mei bi";
            symbol = "RMB";
            totalSupply = 100000000000000000000000000000000000;
        }
        function mylog(address arg0, address arg1, uint256 arg2) public {
            Transfer(arg0, arg1, arg2);
        }
    }
合约代币需要规定好代币的名称等信息，然后我们定义一个mylog函数。
这里我们通过remix进行部署(由于需要交易所获得提示信息，所以我们需要部署在公链上)
![
](https://images.seebug.org/content/images/2018/09/6b209e28-f589-4791-b027-e40263c0bc7a.png-w331s)
测试合约地址
    https://etherscan.io/address/0xd69381aec4efd9599cfce1dc85d1dee9a28bfda2
注：这里需要强调的是：转出/入账的地址都是可以自定义的，这也就是为什么所有的来源账户本身都是不持有这种代币的原因。
然后直接发起交易
然后我们的imtoken提示了消息，注意收到的消息了包含了我们的代码里 `symbol = "RMB";`的值`rmb`
回看余额可以发现没有实际转账诞生。
### 五、事件目的
通过上面分析及测试，我们发现整个事件最后只说了一件事情就是伪照了大量的虚假交易记录，并没有其他“实质”性的恶意操作，那么这个事件的目的是什么呢？
我们回顾下整个事件的流程：
创建一个token ---> 伪造交易记录 ---> 钱包或交易平台获取交易记录 ---> 推送给用户
如果能找到自定义的消息，那么这是一条完美的消息推广链！这个事件的始作俑者非常聪明的利用了`token名`这个自定义输入点：`blockwell.ai KYC
Casper Token`，blockwell.ai这个就是本次事件的主要目的，牛皮癣小广告推广这个网站。
看你有的人会说如果只是用来做广告推广的话，完全可以使用代币的真实转账记录来推广，而不是利用伪造交易记录。这里需要提醒大家的是“广告费”的问题，这个“广告费”也就是合约操作里的gas消耗，伪造交易记录只需要Transfer操作的gas可以大大节省这个“广告费”，本次事件整个过程的话费的“广告费”约2.28美元的gas，就实现了对1000个用户有针对的推送了精准广告。
### 六、总结
结合以往的各种事件，相比于区块链的各种有限应用场景里，在“恶意”攻击或者利用的层面，攻击者们表现出了惊人的“创意”，本次事件利用了”交易所/平台却盲目信任符合ERC20标准的合约“的特点，使用了以太坊平台本身实现的“bug”，利用了最少的“广告费”实现了精准的用户广告推送。
另外一个值得我们去关注的点就是被用来做消息推送的点是可以自定义的，那么可能导致的风险是非常值得思考的：比如推送钓鱼网站信息，推送其他非法类型的小广告及言论，会导致钱包等平台应用方的用户的其他不可以预期的风险！我们也提醒各大钱包、交易所等平台警惕此类风险，必要时针对这些可自定义点进行相关识别及过滤。
### 9月20日更新：一个有趣的点击劫持漏洞
在复现上述漏洞的过程中，我们发现了一个有趣的漏洞，在上述合约代币用于做小广告的区域，是很少的一块我们可控的智能合约属性。
那么假设合约展示平台如etherscan等，没有对这里做合理的处理，是不是可能会存在xss等漏洞呢。
经过测试我们发现Etherscan就存在这样的点击劫持漏洞
首先我们先部署以下代码
    pragma solidity ^0.4.24;
    contract MyTest {
        mapping(address => uint256) balances;
        uint256 public totalSupply;
        mapping (address => mapping (address => uint256)) allowance;
        address public owner;
        string public name;
        string public symbol;
        uint8 public decimals = 18;
        event Transfer(address indexed _from, address indexed _to, uint256 _value);
        function MyTest() {
            name = "12321";
            symbol = 'ok ';
            totalSupply = 100000000000000000000000000000000000;
        }
        function mylog(address arg0, address arg1, uint256 arg2) public {
            Transfer(arg0, arg1, arg2);
        }
    }
部署后我们我们用合约发起一次交易
然后查看etherscan的页面，在非常重要的进入查看合约信息的地方，成功被设置为其他地址的a标签
![
](https://images.seebug.org/content/images/2018/09/8396870d-e2fb-444e-9116-3faa6798d702.png-w331s)
当开发者或者用户想要查看合约信息的时候，点击按钮就会跳转到其他地方做进一步利用。
这是一个潜力很大的点击劫持漏洞，攻击者完全可以用这种方式来诱导开发者或用户到错误的合约，甚至伪造的etherscan导致更大的危害。
该漏洞目前已上报etherscan官方并修复。
* * *
**智能合约审计服务**
针对目前主流的以太坊应用，知道创宇提供专业权威的智能合约审计服务，规避因合约安全问题导致的财产损失，为各类以太坊应用安全保驾护航。
知道创宇404智能合约安全审计团队：   
联系电话：(086) 136 8133 5016(沈经理，工作日:10:00-18:00)
欢迎扫码咨询：
**区块链行业安全解决方案**
黑客通过DDoS攻击、CC攻击、系统漏洞、代码漏洞、业务流程漏洞、API-Key漏洞等进行攻击和入侵，给区块链项目的管理运营团队及用户造成巨大的经济损失。知道创宇十余年安全经验，凭借多重防护+云端大数据技术，为区块链应用提供专属安全解决方案。
欢迎扫码咨询：
* * *