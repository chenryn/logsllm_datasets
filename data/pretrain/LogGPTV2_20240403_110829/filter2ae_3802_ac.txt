0xC8(此处还有一个偏移量)，0xFFFFFFFF)，即可修改窗口0的cbWndExtra为极大值，且此时窗口0处于模式1，如果传入一个较大的index且不大于0xFFFFFFFF，那么就可以越界修改到内存处于高地址处的其他窗口的数据。
4.再次创建一个窗口1，窗口1处于模式2，不用修改模式
窗口1刚开始pExtraBytes指向用户态地址，使用模式2直接寻址。由于窗口0的pExtraBytes是相对于内核桌面堆基址的偏移量，窗口1的OffsetToDeskTopHeap是当前tagWNDK结构体与内核桌面堆基址的偏移量，所以这两个值可以计算一个差值，对窗口0调用SetWindowLong时传入这个差值即可写入到窗口1的结构体，再加上pExtraBytes相对于tagWNDK结构体的偏移即可设置窗口1的pExtraBytes为任意值。
5.由于此时窗口1处于模式1直接寻址，且我们可以设置窗口1扩展内存地址pExtraBytes为任意地址，所以对窗口1调用SetWindowLong即可向任意内核地址写入数据。
> 总结：  
>
> 内存布局的关键在于窗口0的pExtraBytes必须小于窗口1和窗口2的OffsetToDesktopHeap，这样的话在绕过了窗口0的cbWndExtra过小的限制后，对窗口0调用SetWindowLong传入的第二个参数，传入一个较大值，即可向后越界写入到窗口1和窗口2的tagWNDK结构体。  
>
> 我们来设想一下不满足内存布局的情况，假如窗口1的OffsetToDesktopHeap小于窗口0的pExtraBytes，即窗口1的tagWNDK位于低地址，窗口0的扩展内存位于高地址，那从窗口0越界往低地址写内容时，SetWindowLong的index必须传入一个64位的负数，但是SetWindowLong的第二个参数index是一个32位的值，调用函数时64位截断为32位数据，在内核中扩展到64位后高位为0还是个正数，所以窗口0无法越界写到低地址。
## 7.EXP分析调试
首先动态定位多个函数地址，接下来需要调用
创建窗口类：
    #define MAGIC_CB_WND_EXTRA 0x1337
调用函数RegisterClassEx创建两个窗口类：
类名为NormalClass的窗口，窗口的cbWndExtra大小为0x20。
类名为MagicClass的窗口，窗口的cbWndExtra大小为0x1337，使用MagicClass类创建的窗口会利用漏洞构造一个内核相对偏移量。
内存布局的代码如下：
第241行到244行，创建了菜单，之后创建窗口使用此菜单。
第245行到250行，使用NormalClass类名创建了50个窗口存放在g_hWnd数组中，然后销毁后面的48个窗口，这样是为了后面创建窗口时可以占用被销毁窗口的区域，缩短窗口之间的间距，此时g_hWnd[0]和g_hWnd[1]存放句柄，将这两个窗口称为窗口0和窗口1，其中247行调用HMValidateHandle函数传入句柄得到对应窗口在用户态映射的tagWNDK数据内存地址保存在g_pWndK数组中。
第245行到255行，调用NtUserConsoleControl函数设置窗口0由用户态直接寻址切换为内核态相对偏移寻址，并且窗口0的pExtraBytes是相对于内核桌面堆基址的偏移。
第257行到258行，使用MagicClass类名创建窗口2保存在g_hWnd[2]中，称为窗口2，然后调用HMValidateHandle获得窗口2的tagWNDK数据映射地址保存在g_pWndK[2]中。
第260和278行代码判断内存布局是否成功，此时窗口0处于内核模式，所以窗口0的pExtraBytes为申请的内核内存空间(不是窗口内核对象地址)相对于内核桌面堆基地址的偏移，窗口1和窗口2为用户态模式，OffsetToDesktopHeap为窗口内核对象地址相对于内核桌面堆基地址的偏移，内存布局必须满足：
窗口0的pExtraBytes小于窗口1的OffsetToDesktopHeap,计算差值extra_to_wnd1_offset，为正数。
窗口0的pExtraBytes小于窗口2的OffsetToDesktopHeap，计算差值extra_to_wnd2_offset，为正数。
如果布局失败，那就销毁窗口继续布局，如果最后一次布局失败，就退出。
布局完成后，程序运行到此处：
程序在虚拟机中运行到DebugBreak()函数时，如果有内核调试器，调试器会自动中断：
此时指令位于DebugBreak函数中，输入k，栈回溯只显示了地址，没有显示符号表，输入
    gu;.reload /user
.reload /user会自动加载用户态符号，pdb文件位于本地对应目录，再次输入k，显示栈回溯，可以看到显示正常。我们先查看三个窗口的内核数据结构
使用命令 dt tagWNDK
poi(CVE_2022_21882!g_pWndK+0)可以以结构体方式查看窗口0的tagWNDK结构，在内存布局时已经对窗口0切换了模式，如下：
上图第三个窗口应为窗口2，在调用NtUserMessageCall之前，窗口0处于模式1，窗口1和2处于模式2。接下来调用HookUserModeCallBack
来Hook回调函数，代码如下：
动态调试时查看KernelCallbackTable表：
    kd> !peb  
    PEB at 0000001eb0c75000  
    kd> dt ntdll!_PEB KernelCallbackTable 0000001eb0c75000
    +0x058 KernelCallbackTable : 0x00007ffe`bc6f2070 Void
查看KernelCallbackTable表项
我们需要查看123项的内容，如下：
调试运行HookUserModeCallBack函数后，再次查看：
在自定义的回调函数MyxxxClientAllocWindowClassExtraBytes中
接着下断点：
并且在MyxxxClientAllocWindowClassExtraBytes函数中下断点：
在调试器中输入g运行，现在运行到如下位置：
在运行NtUserConsoleControl前后分别查看窗口2的模式：
继续按g运行，中断在SetWindowLong函数前
此时窗口2处于模式1，并且pExtraBytes为窗口0的OffsetToDesktopHeap，再调用SetWindowLong函数：
这是第一次越界写，第一个参数为窗口2的句柄，第二个参数为index，为cbWndExtra相对tagWNDK结构体首地址的偏移量+cbWndServerExtra，由于窗口2调用了NtUserMessageCall，所以cbWndServerExtra为0x10，调用SetWindowLong时会使用index-cbWndServerExtra，所以此处要加上cbWndServerExtra来抵消，可参考前文SetWindowLong函数的分析。
单步运行后
可以看到窗口0的cbWndExtra变成了0xFFFFFFFF，接下来对窗口0调用SetWindowLong时传入index可以传入之前计算得到的extra_to_wnd1_offset和extra_to_wnd2_offset来分别修改窗口1和窗口2的窗口内核数据。
此时窗口1处于直接寻址模式，对窗口0调用SetWindowLongPtr修改窗口1的pExtraBytes为任意值，使用SetWindowLongPtr是因为此函数第三个参数可以传入64位数据，将窗口1的pExtraBytes设置为任意值，接下来对窗口1调用SetWindowLong即可实现任意地址写数据。
## 8.两种提权方式
### 8.1 设置token
第一种为设置当前进程的token为system进程的token，将当前进程提升到system权限，这种需要读取进程的EPROCESS结构，再定位到token变量的地址，修改token，公开的EXP中使用GetMenuBarInfo函数来实现内核任意地址读原语。
我们先分析这种方式，先看下Menu内核结构体：
    ptagWND
       0x10 THREADINFO        
           0x1A0 PROCESSINFO             
              0x00 EPROCESS    
       0x18 unknown        
           0x80 kernel desktop heap base    
       0x28 ptagWNDk    
       0xA8 spMenu        
           0x28 obj28            
              0x2C cItems(for check)      设置为1                  0x40 cxMenu(for check)          设置为1                  0x44 cyMenu(for check)          设置为1        
           0x50 ptagWND        
           0x58 rgItems            
              0x00 unknown(for exploit)   //要读的地址-0x40          0x98 ppMenu            
              0x00 pSelf                  //指向spMenu
在EXP中先构造一个假的Menu
其中401行设置ppMenu偏移0x00处的值为spMenu，404、408、409设置spMenu结构体内部数据是为了绕过GetMenuBarInfo的验证，GetMenuBarInfo函数会调用内核中的NtUserGetMenuBarInfo，最终调用到xxxGetMenuBarInfo，GetMenuBarInfo对应有四个参数，对应xxxGetMenuBarInfo的四个参数，其中参数2为idObject，参数3为idItem。xxxGetMenuBarInfo对参数有校验：
164行判断idObject!=3如果满足，就不能触发到下面读内存的代码路径，所以idObject必须为-3。
316行代码判断dwStyle不能包含WS_CHILD属性。
322行代码从spMenu中偏移0x98取值，赋值给ppMenu。
325行代码判断idItem不能小于0。
328行代码判断idItem不能大于spMenu偏移0x28取值再偏移0x2c取值。
335行代码判断spMenu偏移0x40取值不为0并且偏移0x44取值不为0。
338行到344行，如果idItem不为0，可以让idItem为1，那么_readAddrSub40的值为spMenu偏移0x58取值。
接下来程序进入353行
v5是传入的第四个参数，用作保存读取到的数据。
在353、354行，可以读取传入地址的数据+窗口RECT的left坐标。
在357、358行，可以读取传入地址的数据+4+窗口RECT的top坐标。
所以只要我们可以绕过构造一个假的Menu，绕过上述限制，在Menu偏移0x58再偏移0x00的地址处存放想读取的地址-0x40，当GetMenuBarInfo返回时left和top中保存的就是目标地址处的8字节数据。
要想替换窗口的Menu为假的Menu，还是需要用到SetWindowLong函数，在内核态win32kfull!xxxSetWindowLong函数中会调用xxxSetWindowData函数：
xxxSetWindowData函数如下：
134、136行，判断如果index为0xFFFFFFF4，为-12，对应为GWLP_ID。
138行判断如果dwStyle是否包含WS_CHILD属性。
140行取出原来的menu指针，赋值给retValue，最终会作为用户态SetWindowLong函数的返回值。
142行修改spMenu为SetWindowLong传入第三个参数newValue值。
所以我们需要如下步骤才能完成任意地址读：
  1. 先对窗口0使用内核越界写修改窗口1的dwStyle值为包含WS_CHILD，这样调用SetWindowLong时即可绕过上面138行的判断。 
  2. 对窗口1使用SetWindowLong函数传入index为GWLP_ID，修改窗口1的Menu为构造的假的Menu，并且SetWindowLong会返回原先的Menu的地址。 
  3. 使用原先的Menu通过内核数据结构即可定位到当前进程的EPROCESS，进而定位到token的地址。 
  4. 再次对窗口0使用内核越界写修改窗口1的dwStyle值为不包含WS_CHILD，这样调用GetMenuBarInfo时可以绕过xxxGetMenuBarInfo中316行代码的判断。 
  5. 需要读取数据时，将目标地址-0x40赋值给假的Menu偏移0x58对应的内存空间中，再调用GetMenuBarInfo函数。 
单步运行413行代码，窗口1的dwStyle就包含了WS_CHILD属性。
可以看到修改完成后，窗口1的dwStyle包含了WS_CHILD属性。
继续执行415行代码：
在416行下断点后运行：
此时SetWindowLong函数刚执行完毕，返回值rax为0xfffffa49c0821e60，保存的是旧的spMenu指针，而根据之前的数据结构，可以使用spMenu定位到当前进程的EPROCESS。
执行419行代码，移除窗口1的WS_CHILD属性，为接下来调用GetMenuBarInfo做准备
窗口1的dwStyle移除了WS_CHILD属性。然后构造读原语如下：
根据之前的数据结构
    ptagWND    
         0x10 THREADINFO        
            0x1A0 PROCESSINFO            
               0x00 EPROCESS    
         0x18 unknown        
            0x80 kernel desktop heap base    
         0x28 ptagWNDk    
         0xA8 spMenu        