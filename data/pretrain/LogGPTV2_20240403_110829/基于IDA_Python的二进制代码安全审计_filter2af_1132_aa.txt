# 基于IDA Python的二进制代码安全审计
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
IDA pro 对二进制文件解析能力毋庸置疑，并且支持Python脚本与IDC结合起来，可以基于此做很多有意思的事情。
最近在做终端安全检测，经常会遇到编译好的二进制程序，就想试试通过IDA Python来做相关的安全检测工作。
由于IDA pro 支持
x86/x86-64/arm/arm64/mips等文件格式的解析，所以检测脚本也可以支持Android/iOS/macOS/Windows/Linux等众多平台的二进制程序。
本文基于 IDA pro 7.0，IDA pro 在6.8以后的版本都自带了IDA
Python，而更早的版本则需要手动安装：
## IDA Python基础
本部分参考：[IDA-python学习小结](https://cartermgj.github.io/2017/10/10/ida-python/) IDA
Python由三个独立模块组成：
    idc:idc函数的兼容模块,包含IDA内置函数声明和内部定义
    idautils:实用函数模块
    idaapi:用于访问更多底层数据的模块
常用函数功能示例：
指令处理
    获取当前指令地址：ea=here() print “0x%x %s”%(ea,ea)
    获取当前的汇编指令：idc.GetDisasm(ea)
    获取当前处于的段：idc.SegName()
    获取该段程序最低和最高地址：hex(MinEA()) hex(MaxEA())
    获取下(上)一条汇编指令地址：ea = here() ; next_instr = idc.NextHead(ea) PrevHead(ea)
函数操作
    获取程序所有函数的名称：
    for func in idautils.Functions():
    print hex(func), idc.GetFunctionName(func)
    计算当前函数有多少条指令：
    ea = here()
    len(list(idautils.FuncItems(ea)))
    获取当前IDB中记录的所有有名字函数的地址和名称： idautils.Names() 返回的是一个以元组组成的列表，函数的起始地址指向了其plt表img
指令操作
    给定地址，打印指令 idc.GetDisasm(ea)
    给定函数中一个地址，得到整个函数的指令列表 idautils.FuncItems(here())
    获取函数的一些flag信息： idc.GetFunctionFlags(func)
    对一条汇编指令进行拆解： 获取指令的操作：idc.GetMnem(here()) 获取指令的操作数：idc.GetOpType(ea,n) 根据返回的数值，可以判断操作数类型（普通寄存器、常量字符串等）
    对汇编指令中用到的操作数，求取其引用的地址，也就是双击该操作数后跳转到的地址 hex(idc.GetOperandValue(here(),1))
交叉引用
    指令从哪个地方来：idautils.CodeRefsTo(here(),0)
    指令下一步去到哪儿：idautils.CodeRefsFrom(here(),0)
    数据从哪个地方来：idautils.DataRefsTo(here(),0)
    数据下一步去到哪儿：idautils.DataRefsFrom(here(),0)
    较为通用的一种获取xref：idautils.XrefsTo(here(),flag) 其中flag=0时，所有的交叉引用都会被显示
更多详细函数信息参考IDA官方手册： 
## IDA Python 检测功能脚本
IDA Python检测功能脚本是在IDA pro环境下执行，语法基于python2.7，与电脑本地配置环境无关。
### 危险函数检测
**Intel SDL List of Banned Functions**
《SDL List of Banned Functions》是Intel于2016年出的SDL流程里面的c语言危险函数列表，本文使用该列表函数为示例，参考：
另外还可以参考： IBM 于2000年出的《防止缓冲区溢出》
 微软
于2011年出的 《MSDN article: SDL Banned Function Calls》：
危险函数 | 安全替换函数 | 说明  
---|---|---  
alloca(), _alloca() | malloc(), new() |
alloc()是在栈上分配内存因此容易导致栈结构损坏，而malloc()和new()则是在堆上分配内存因此安全性要高于 alloc()  
scanf(), wscanf(), sscanf(), swscanf(), vscanf(), vsscanf() | fgets() |  
strlen(), wcslen() | strnlens(), wcsnlens() |  
strtok(), strtok_r(), wcstok() | strtok_s() |  
strcat(), strncat(), wcscat(), wcsncat() | strcats(), strncats(), strlcat(),
wcscats(), wcsncats() |  
strcpy(), strncpy(), wcscpy(), wcsncpy() | strcpys(), strncpys(), strlcpy(),
wcscpys(), wcsncpys() |  
memcpy(), wmemcpy() | memcpys(), wmemcpys() |  
stpcpy(), stpncpy(), wcpcpy(), wcpncpy() | stpcpys(), stpncpys(), wcpcpys(),
wcpncpys() |  
memmove(), wmemmove() | memmoves(), wmemmoves() |  
memcmp(), wmemcmp() | memcmps(), wmemcmps() |  
memset(), wmemset() | memsets(), wmemsets() |  
gets() | fgets() |  
sprintf(), vsprintf(), swprintf(), vswprintf() | snprintf() 或其他安全字符串库中的特殊版本 |  
snprintf(), vsnprintf() | – | 应使用避免vargs构造的包装函数，并对传递给snprintf()的参数进行编译时检查  
realpath() | – | 仍使用realpath()，但第二个参数必须使用NULL，这会强制在堆上分配缓冲区  
getwd() | getcwd() | getcwd()会检查buffer大小  
wctomb(), wcrtomb(), wcstombs(), wcsrtombs(), wcsnrtombs() | – | 宽字符wide-character到多字节multi-byte的字符串转换可能会造成缓冲区溢出，但目前没有替代方案  
**危险函数检测脚本**
危险函数的检测，通过匹配Functions列表中函数完成，除了获取函数的定义位置，还可以获取到调用位置：
    #危险函数列表，参考自: https://github.com/intel/safestringlib/wiki/SDL-List-of-Banned-Functions
    danger_func = ["alloca","_alloca","scanf","wscanf","sscanf","swscanf","vscanf","vsscanf","strlen","wcslen","strtok","strtok_r","wcstok","strcat","strncat","wcscat","wcsncat","strcpy","strncpy","wcscpy","wcsncpy","memcpy","wmemcpy","stpcpy","stpncpy","wcpcpy","wcpncpy","memmove","wmemmove","memcmp","wmemcmp","memset","wmemset","gets","sprintf","vsprintf","swprintf","vswprintf","snprintf","vsnprintf","realpath","getwd","wctomb","wcrtomb","wcstombs","wcsrtombs","wcsnrtombs"]
    #IDA解析的函数通常都会在最前面加上"_",所以在函数列表基础上还需要给每个函数最前面添加"_"
    _danger_func = danger_func
    s = '_'
    for i in xrange(len(danger_func)):
        _danger_func[i] = s + danger_func[i]
    total_danger_func = danger_func + _danger_func
    #获取Functions列表，并匹配是否存在危险函数
    for func in Functions():
        func_name = GetFunctionName(func)
        if func_name in total_danger_func:
    #按指定格式输出危险函数定义位置
            print "danger_func_define: ".ljust(8),"\t", func_name.ljust(8), "\t", hex(func)[:-1]
    #回溯并输出函数调用地址
            xrefs = CodeRefsTo(func, False)
            i=0
            for xref in xrefs:
    #x86调用函数多使用call，而arm则多使用BL
                if GetMnem(xref).lower() == "call" or "BL":
                    if func_name in total_danger_func:
                        i=i+1
                        print format(i,'>5.0f')+".","\t","danger_func_call:".ljust(8),"\t", func_name.ljust(8),"\t", hex(xref)[:-1].ljust(8),"\t", GetFuncOffset(xref)
使用方式：
等ida解析完程序后，将上述代码复制到IDA pro的python命令栏中执行即可，效果如下图: 对危险函数的定义位置，和相关调用位置都进行了检测。
### **iOS弱随机数 &NSLog调用检测**
由于IDA pro支持各种二进制格式，所以也可以检测如iOS、Android应用，比如在iOS中的弱随机数和比如在iOS中的弱随机数和NSLog调用调用。
在iOS中常见的随机数函数有rand()、srand()、random()、arc4random()，而rand()和random()实际并不是一个真正的伪随机数发生器，在使用之前需要先初始化随机种子，否则每次生成的随机数一样。
NSLog是iOS的日志输出函数，在一些有安全需求的场景下，通常都会禁止使用日志输出信息。
对于这两个检测项，同样需要对Functions列表中的函数进行匹配，并输出相应函数定义位置和调用位置：
    iOS_NSlog = ["NSLog","_NSLog"]
    iOS_pseudo_random = ["rand","random","_rand","_random",]
    for func in Functions():
    func_name = GetFunctionName(func)
    #iOS弱随机数检测
    if func_name in iOS_pseudo_random:
    print "iOS_pseudo_random_define: ".ljust(8),"\t", func_name.ljust(8), "\t", hex(func)[:-1]
    xrefs = CodeRefsTo(func, False)
    i=0
    for xref in xrefs:
    if GetMnem(xref).lower() == "call" or "BL":
    if func_name in iOS_pseudo_random:
    i=i+1
    print  format(i,'>5.0f')+".","\t","iOS_pseudo_random_call:".ljust(8),"\t", func_name.ljust(8),"\t", hex(xref)  [:-1].ljust(8),"\t",GetFuncOffset(xref)
    #iOS NSlog函数检测
    if func_name in iOS_NSlog:
    print "iOS_NSlog_define: ".ljust(8),"\t", func_name.ljust(8), "\t", hex(func)[:-1]
    xrefs = CodeRefsTo(func, False)
    i=0
    for xref in xrefs:
    if GetMnem(xref).lower() == "call" or "BL":
    if func_name in iOS_NSlog:
    i=i+1
    print  format(i,'>5.0f')+".","\t","iOS_NSlog_call:".ljust(8),"\t", func_name.ljust(8),"\t",hex(xref)[:-1].ljust(8),"\t", GetFuncOffset(xref)
执行结果如下：
### **Windows CreateProcessAsUserW函数**
根据微软关于CreateProcessAsUserW的文档(：
The lpApplicationName parameter can be NULL. In that case, the module name
must be the first white space–delimited token in the lpCommandLine string. If
you are using a long file name that contains a space, use quoted strings to
indicate where the file name ends and the arguments begin; otherwise, the file
name is ambiguous.
在路径中含有空格且不带引号的情况下可能导致歧义: 如路径名c:\program files\sub dir\program name.exe
系统将优先解析为c:\program.exe
不过由于CreateProcessAsUserW的地址参数都是动态传递，静态难以检测，故这里只检测是否调用该函数。动态的地址参数可以考虑使用angr符号执行来检测，这会在以后的工作中来进行。
idapython检测代码如下，CreateProcessAsUserW函数是由系统库提供，故需检测imports导入表：
    imports_name = ["CreateProcessAsUserW"]
    implist = idaapi.get_import_module_qty()
    for i in range(0, implist):
    name = idaapi.get_import_module_name(i)
    def imp_cb(ea, name, ord):
    if name in imports_name:
    print "danger_func_define:".ljust(8),"\t", "%08x: %s (ord#%d)" %(ea,name,ord)
    xrefs = CodeRefsTo(ea, False)
    i=0
    for xref in xrefs:
    if GetMnem(xref).lower() == "call" or "BL":
    i=i+1
    print format(i,'>5.0f')+".","\t","danger_func_call:".ljust(8),"\t", name.ljust(8),"\t", hex(xref)[:-1].ljust(8),"\t", GetFuncOffset(xref)
    return True
    idaapi.enum_import_names(i, imp_cb)
检测结果：
### 栈缓冲区溢出检测
缓冲区溢出检测代码参考，以strcpy函数为例： [Introduction to IDAPython for Vulnerability Hunting
](https://www.somersetrecon.com/blog/2018/7/6/introduction-to-idapython-for-vulnerability-hunting) [Introduction to IDAPython for Vulnerability Hunting –
Part 2](https://www.somersetrecon.com/blog/2018/8/2/idapython-part-2)
主要内容从函数调用的地址向后跟踪推送到栈中的参数，并返回与指定参数对应的操作数。然后确定eax在被推入堆栈时是否指向栈缓冲区，存在可能造成栈缓冲区溢出的利用点。
    def twos_compl(val, bits=32):
    """compute the 2's complement of int value val"""
    # 如果设置了符号位，如8bit: 128-255
    if (val & (1 = 7.0
    except:
    from ida_frame import *
    v = twos_compl(inst[idx].addr)
    ret = get_stkvar(inst, inst[idx], v)
    return ret
    def find_arg(addr, arg_num):
    # 获取函数所在段的起始地址
    function_head = GetFunctionAttr(addr, idc.FUNCATTR_START)
    steps = 0
    arg_count = 0
    # 预计检查指令在100条以内
    while steps < 100:
    steps = steps + 1
    # 向前查看指令
    addr = idc.PrevHead(addr)
    # 获取前一条指令的名称
    op = GetMnem(addr).lower()
    # 检查一下是否存在像ret,retn,jmp,b这样可以中断数据流的指令
    if op in ("ret", "retn", "jmp", "b") or addr < function_head:
    return
    if op == "push":
    arg_count = arg_count + 1
    if arg_count == arg_num:
    # 返回被push到堆栈的操作数
    return GetOpnd(addr, 0)
    def strcpy_buffer_check():
    print "-----------------------------------------------------------------"
    print "Do strcpy stack buffer check.."
    for functionAddr in Functions():
    # 检查所有函数
    if "strcpy" in GetFunctionName(functionAddr):             xrefs = CodeRefsTo(functionAddr, False)
    # 遍历交叉引用，追踪函数执行过程
    for xref in xrefs:
    # 检查交叉引用是否是函数调用
    if GetMnem(xref).lower() == "call":
    # 找到函数的第一个参数
    opnd = find_arg(xref, 1)                     function_head = GetFunctionAttr(xref, idc.FUNCATTR_START)
    addr = xref
    _addr = xref
    while True:
    _addr = idc.PrevHead(_addr)
    _op = GetMnem(_addr).lower()
    if _op in ("ret", "retn", "jmp", "b") or _addr < function_head:
    break
    elif _op == "lea" and GetOpnd(_addr, 0) == opnd:
    # 检查目标函数的缓冲区是否在堆栈当中
    if is_stack_buffer(_addr, 1):
    print "STACK BUFFER STRCOPY FOUND at 0x%X" % addr
    break
    # 如果检测到要定位的寄存器是来自其他寄存器，则更新循环，在另一个寄存器中继续查找数据源
    elif _op == "mov" and GetOpnd(_addr, 0) == opnd:
    op_type = GetOpType(_addr, 1)
    if op_type == o_reg:
    opnd = GetOpnd(_addr, 1)
    addr = _addr
    else:
    break
    print "Strcpy stack buffer check over.."
执行结果如下：
## Python 后台批量检测脚本
### 后台批量检测