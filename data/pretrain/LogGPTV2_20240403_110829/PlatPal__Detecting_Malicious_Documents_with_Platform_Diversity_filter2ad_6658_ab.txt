terpreter’s memory space is constantly scanned for known
forms of shellcode or malicious opcode sequences. PDF
Scrutinizer [45] takes a similar approach by hooking the
Rhino interpreter and scans for known malicious code
patterns such as heap spray, shellcode, and vulnerable
method calls. ShellOS [48] is a lightweight OS designed
to run JavaScript code and record its memory access
patterns. During execution, if the memory access se-
quences match a known malicious pattern (e.g., ROP, crit-
ical syscalls or function calls, etc), the script is considered
malicious.
Although these techniques are accurate in detecting
malicious payload, they suffer from a common problem:
USENIX Association
26th USENIX Security Symposium    273
an incompatible scripting environment. AAR’s JavaScript
engine follows not only the ECMA standard [18], but
also the Acrobat PDF standard [1] (e.g., Adobe DOM
elements). Therefore, without emulation, objects like doc,
app, or even this (which are very common in both benign
and malicious documents) will not function correctly. In
addition, malicious payload can be encoded as a font or an
image object in the document [37], which will neither be
extracted nor detected. Certain attacks might also exploit
the memory layout knowledge such as the presence of
ROP gadgets or functions available in AAR and its de-
pendent libraries, which is hard to emulate in an external
analysis environment.
Instead of emulating the JavaScript execution environ-
ment, Liu et al. [29] instruments the PDF document with
context monitoring code and uses AAR’s own runtime
to execute JavaScript code and hence is not affected by
the incompatibility problem. However, the instrumented
code only monitors common and known patterns of mali-
cious behavior such as network accesses, heap-spraying,
and DLL-injection, etc, which are not fully generic and
have to be extended when new anti-detection measures of
malicious code come up. CWXDetector [62] proposes a
W⊕X-like approach to detect illegitimate code injected
by maldocs during execution. But similar to W⊕X, its
effectiveness is compromised in the presence of ROP and
JIT-spraying.
2.3 Summary and Motivations
Surveying the maldoc detection techniques yields several
interesting observations:
Parser reliance.
Since a document consists of both
data (e.g., text) and executable (e.g., script) components,
a common pattern is to first extract the executable com-
ponents and further examine them with either static or
dynamic analysis. To this end, a parser that is capable
of parsing PDF documents the same way as AAR does
is generally assumed. As shown in Table 1, all but three
methods use either open-sourced or their home-grown
parsers and assume their capability. However, Carmony et
al. [11] shows that these parsers are typically incomplete
and have oversimplified assumptions in regard to where
JavaScript can be embedded, therefore, parser confusion
attacks can be launched to easily evade their detection.
Machine learning reliance. Machine learning tech-
niques are heavily used in maldoc detection, especially
in static analysis, because of their ability in classifica-
tion/clustering without prior knowledge of the pattern.
As shown in Table 1, seven out of 13 methods use ma-
chine learning to differentiate benign and malicious docu-
ments, while another four methods can also be converted
to use machine learning for heuristics mining. How-
ever, recently proposed adversarial machine learning tech-
niques [20, 42, 65] raise serious doubts about the effec-
tiveness of classifiers based on superficial features in the
presence of adversaries. For example, Xu et al. [65] is ca-
pable of automatically producing evasive maldoc variants
without knowledge about the classifier, in a way similar
to genetic programming.
Structural/behavioral discrepancy.
An implicit
assumption in the surveyed methods is that struc-
tural/behavioral discrepancies exist between benign and
malicious documents and such discrepancies can be ob-
served. Since the document must follow a public format
specification, commonalities (structural or behavioral) are
expected in benign documents. If a document deviates
largely from the specification or the common patterns of
benign samples, it is more likely to be a malicious doc-
ument. However, such an assumption is challenged by
the Mimicus [53] and reverse mimicry [35] attacks in a
way that a maldoc can systematically evades detection
if an attacker knows the patterns used to distinguish be-
nign and malicious documents. In addition, deriving the
discrepancy patterns requires known malware samples.
Therefore, all but one methods in Table 1 require known
malware samples either to learn patterns automatically or
to manually define patterns based on heuristics, expec-
tations, or experience. This restricts their capabilities in
detecting zero-day attacks where no prior knowledge can
be obtained.
Full dynamic analysis. It is worth noting that only one
dynamic detection method performs analysis on the en-
tire file; instead, the rest of the methods perform analysis
on the extracted JavaScript code only. This is in con-
trast with traditional sandboxed malware analysis such
as Cuckoo [44] or CWSandbox [63], which executes the
malware and examines its behavior and influence on the
host operating system during runtime. One reason could
be because the maldoc runs on top of AAR, which itself
is a complex software and leaves a large footprint on the
host system. The traces of maldoc execution are hidden
in the large footprint, making analysis much harder.
Motivation. The development of PLATPAL is motivated
by the above-mentioned problems in maldoc detection
research. We design PLATPAL to: 1) share the same view
of the document as the intended interpreter (i.e., AAR
in this paper); 2) use simple heuristics that do not rely
on machine learning; 3) detect zero-day attacks without
prior knowledge; 4) capture the maldoc’s influence on the
host system; and 5) be complementary to the surveyed
techniques to further raise the bar for maldoc attackers.
3 Platform Diversity
This section focuses on understanding why platform di-
versity can be an effective approach in detecting maldoc
274    26th USENIX Security Symposium
USENIX Association
attacks. We first present a motivating example and then
list the identified factors that are important in launching
attacks, but are different on Windows and Mac platforms.
We further show how to use them to thwart attackers and
concretize it with four case studies. We end by discussing
platform-detection techniques that a maldoc can use and
the precautions PLATPAL should take.
3.1 A Motivating Example
In December 2012, researchers published a public proof-
of-concept exploit for AAR [37]. This exploit attacks
a heap overflow vulnerability found in the PDF parser
module when parsing an embedded BMP RLE encoded
image (CVE-2013-2729). By simply opening the maldoc,
the AAR instance on Windows platform (including Win-
dows 7, 8 and 10) is compromised and the attacker can
run arbitrary code with the privileges of the compromised
process. During our experiment, we ran this exploit on
the Windows version of AAR 10.1.4 and reproduced the
attack. However, when we opened the same sample with
the Mac version of AAR 10.1.4, the attack failed and no
malicious activities were observed.
In fact, in the malware history, Windows has drawn
more attraction from attackers than Mac, and the same
applies to maldocs. The Windows platform tends to be
more profitable because of its market share, especially
with enterprise users [38], who heavily use and exchange
PDF documents. Therefore, it is reasonable to expect that
the majority of maldocs target primarily the Windows
platform, as cross-platform exploits are much harder to
develop due to the factors discussed later.
The mindset of maldoc attackers and the discrepancy in
reacting to malicious payload among different platforms
inspire us to use platform diversity as the heuristic for
maldoc detection: a benign document “behaves” the same
when opened on different platforms while a maldoc could
have different “behaviors” when launching exploits on dif-
ferent platforms. In other words, cross-platform support,
the power used to make the PDF format and AAR popular,
can now be used to defend against maldoc attacks.
3.2 Diversified Factors
We identified eight factors related to launching maldoc
attacks but are implemented differently on Windows and
Mac platforms.
Syscall semantics. Both syscall numbers and the register
set used to hold syscall parameters are different between
Windows and Mac platforms. In particular, file, socket,
memory, process, and executable operations all have non-
overlapping syscall semantics. Therefore, crafting shell-
code that executes meaningfully on both platforms is
extremely difficult in practice.
Calling conventions. Besides syscalls, the calling con-
vention (i.e., argument passing registers) for userspace
function differs, too. While Windows platforms use rcx,
rdx, and r8 to hold the first three parameters, Mac plat-
forms use rdi, rsi, and rdx. This makes ROP-like attacks
almost impossible, as the gadgets to construct these at-
tacks are completely different.
Library dependencies. The different sets of libraries
loaded by AAR block two types of exploits: 1) exploits
that depend on the existence of vulnerabilities in the
loaded libraries, e.g., graphics libraries, font manager,
or libc, as they are all implemented differently on Win-
dows and Mac platforms; and 2) exploits that depend on
the existence of certain functions in the loaded libraries,
e.g., LoadLibraryA, or dlopen.
Memory layout. The offset from the attack point (e.g.,
the address of the overflowed buffer or the integer value
controlled by an attacker) to the target point, be it a return
address, GOT/PLT entry, vtable entry, or even control
data, is unlikely to be the same across platforms. In other
words, directing control-flow over to the sprayed code can
often be blocked by the discrepancies in memory layouts
across platforms.
Heap management. Given the wide deployment of
ASLR and DEP, a successful heap buffer overflow usually
leads first to heap metadata corruption and later exploits
the heap management algorithm to obtain access to con-
trol data (e.g., vtable). However, heap management tech-
niques are fundamentally different between Windows and
Mac platforms. Therefore, the tricks to corrupt metadata
structures maintained by segment heap [67] (Windows
allocator) will not work in the magazine malloc [5] (Mac
allocator) case and vice versa.
Executable format. While Windows platforms gener-
ally recognize COM, NE, and PE formats, Mac platforms
recognize only the Mach-O format. Therefore, maldocs
that attempt to load an executable after exploitation will
fail. Although “fat binaries” that can run on multiple CPU
architectures exist, we are not aware of an executable for-
mat (or any wrapper tools) that is capable of running on
multiple platforms.
Filesystem semantics. Windows uses backslashes (\)
as path separators, while Mac uses forward slashes (/). In
addition, Windows has a prefixed drive letter (e.g., C:\)
while Mac has a mount point (e.g., the root /). Therefore,
hard-coded path names, regardless of whether they are in
JavaScript or attacker-controlled shellcode, will break on
at least one platform. Dynamically generated filenames
rely on the fact that certain files exist at a given path,
which is unlikely to hold true across platforms.
Expected programs/services.
This is heavily relied
upon by the dropper or phishing type of maldocs, for
example, dropping a malformed MS Office document
USENIX Association
26th USENIX Security Symposium    275
that exploits MS Office bugs, or redirecting the user to
a malicious website that attacks the Internet Explorer
browser. As Mac platforms are not expected to have these
programs, such attacks will fail on Mac platforms.
3.3 Attack Categorization
As shown in Figure 1, a typical maldoc attack consists of
three steps: 1) finding vulnerabilities, 2) exploiting them
to inject attacker-controlled program logic, and 3) prof-
iting by performing malicious activities such as stealing
information, dropping backdoors, C&C, etc. The identi-
fied diversity factors in §3.2 can help detect maldocs at
different stages.
In terms of finding vulnerabilities, exploiting vulner-
abilities on platform-specific components can obviously
be detected by PLATPAL, as the vulnerable components
do not exist on the other platform.
The exploitation techniques can be divided into two
subcategories, based on whether an attack exploits mem-
ory errors (e.g., buffer overflow, integer overflow, etc) to
hijack control-flow or exploits logic bugs (e.g., JavaScript
API design flaws).
Memory-error based control-flow hijacking puts a high
requirement on the memory content during exploitation.
For example, ROP attacks, which are commonly found
in maldoc samples, require specific gadgets and precise
information on where to find them in order to make pow-
erful attacks. However, these gadgets and their addresses
in memory can be easily distorted by the discrepancies in
loaded libraries and memory layouts.
On the other hand, exploiting features that are natu-
rally cross-platform supported, e.g., JavaScript hidden
API attacks or abusing the structure of PDF document to
obfuscate malicious payload, are not subject to the intri-
cacies of runtime memory contents and are more likely to
succeed.
Finally, even if an attacker succeeds in the first two
steps, the attack can be detected while the maldoc is per-
forming malicious activities, such as executing a syscall,
loading a PE-format executable on Mac platforms, or
accessing a file that exists only on Windows platforms.
3.4 Case Studies
We use representative examples to show how platform
diversity can be used to detect maldoc attacks in each step
shown in Figure 1.
Platform-specific bug. One source of platform-specific
bugs comes from system libraries that are used by AAR.
An example is CVE-2015-2426, an integer overflow bug
in the Windows Adobe Type Manager Library. A detailed
study can be found at [28].
In this case, opening the
maldoc sample on Windows platforms will trigger the ex-
ploitation, while nothing will happen when opening it on
Mac platforms. In other words, maldocs that exploit bugs
in dependent libraries will surely fail on other platforms.
Another source of bugs comes from the AAR imple-
mentation itself, and we also found a few cases where
the implementation of the same function can be vulner-
able on one platform but safe on the other. For example,
CVE-2016-4119 is a use-after-free vulnerability in the
zlib deflating algorithm used by AAR to decompress
embedded images [30]. The Mac version of AAR is able
to walk through the document and exit gracefully, while
AAR on Windows crashes during the rendering stage.
A closer look at their execution shows that the decoded
image objects are different on these platforms.
Memory error. Due to the deployment of ASLR and
DEP in modern operating systems, direct shellcode in-
jection cannot succeed. As a result, attackers exploiting
memory errors generally require some form of heap prepa-
ration to obtain read/write accesses to control data, and
the most common target we observed is vtable.
In the case of [37], the maldoc sample exploits CVE-
2013-2729, an integer overflow bug in AAR itself, to
prepare the heap to obtain access to a vtable associated
with an image object. In particular, it starts by allocating
1000 consecutive memory chunks, each of 300 bytes, a
value carefully selected to match the size of the vtable,
and subsequently free one in every 10 chunks to create
a few holes. It then uses a malformed BMP image of
300 bytes to trigger the integer overflow bug and man-
ages to override the heap metadata, which resides in an
attacker-controlled slot (although the attacker does not
know which slot before hand). The malformed BMP im-
age is freed from memory, but what is actually freed is
the attacker-controlled slot, because of the heap metadata
corruption. Later, when the struct containing a vtable
is allocated in the same slot (almost guaranteed because
of heap defragmentation), the attacker gains access and
hijacks control-flow by overriding vtable entries.
However, this carefully constructed attack has two as-
sumptions, which do not hold across platforms: 1) the size
of the vtable on Windows and Mac platforms is different;
and 2) the heap object metadata structures are different.
As a result, overriding the heap metadata on Mac platform
yields no observable behaviors.
Logic bugs. Another common attack vector of AAR
is the logic bugs, especially JavaScript API design flaws.
Unlike attacks that exploit memory errors, JavaScript API
attacks generally require neither heap constructions nor
ROP-style operations. Instead, they can be launched with
as little as 19 lines of JavaScript code, as shown in Fig-
ure 2. Gorenc et al. [22] further extends this technique
to complete remote code execution attacks by abusing
hidden JavaScript APIs.