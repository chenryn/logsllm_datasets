# 技术分享：PlugX RAT中的栈溢出漏洞

### 译文声明
本文为翻译文章，原文来源：安全客。译文仅供参考，具体内容及含义请以原文为准。
**作者：Chu@0KEE Team**
[原文链接](http://bobao.360.cn/member/contribute?uid=2844380580)

### 前言
在Black Hat USA 2017大会上，@professor__plum 分享了几款常见远程访问木马（RAT）中存在的漏洞，包括Xtreme、PlugX和Gh0st。利用这些漏洞可以对C&C服务器进行反向攻击。本文将以PlugX RAT为例进行详细分析。

### 1. 漏洞分析

#### 1.1 Delphi语言开发
PlugX RAT是用Delphi语言编写的。直接使用IDA Pro对其进行分析时，由于缺少符号表，系统库函数无法被正确识别，导致分析困难。可以通过IDR加载bin文件并导出IDC脚本供IDA使用，从而简化分析过程。

在逆向Delphi程序时，需要注意其参数传递方式。默认情况下，前三个参数通过寄存器eax、edx和ecx传递，其余参数则通过堆栈传递。例如，在上图中ShowMessage和MoveMemory的调用就体现了这种传参方式。

#### 1.2 漏洞点
该漏洞出现在Server与Client之间的通信过程中：
- 当Server接收到客户端的请求包后，首先解析包头，然后将整个包完整地拷贝到栈上（位于0x00549D51处的MoveMemory函数调用），这是典型的栈溢出。
- 有趣的是，在内存拷贝操作之后，开发者再次对包进行了解析（位于0x00549D93处的DecodePacket_函数）。在此过程中，会判断包的大小，并在数据过大时弹出提示框。
- 然而此时上层栈帧已经被破坏，再进行检查已无济于事。

### 2. 漏洞利用

#### 2.1 加解密函数
目前市面上的PlugX RAT大约有三个版本，它们的主要区别在于流量加解密方式的不同。以Type I为例，可以编写如下加解密函数：

```delphi
// 示例代码
function EncryptData(Data: Pointer; Size: Integer): Pointer;
begin
  // 加密逻辑
end;

function DecryptData(Data: Pointer; Size: Integer): Pointer;
begin
  // 解密逻辑
end;
```

#### 2.2 绕过保护机制
当前版本的PlugX RAT没有GS保护和PIE支持，只需考虑DEP。幸运的是，程序中存在丰富的Gadgets，如CreateProcess、WinExec、VirtualAlloc和VirtualProtect等，这使得通过ROP绕过DEP变得相对简单。

基于VirtualProtect，可以编写以下ROP链：

```assembly
// 示例ROP链
push esp
pop eax
mov eax, [esp + 4]
push esp
pop ebx
mov ebx, [esp + 8]
push esp
pop ecx
mov ecx, [esp + 12]
push esp
pop edx
mov edx, [esp + 16]
call VirtualProtect
```

#### 2.3 利用
样本、IDB文件及完整的exploit可以从以下链接下载：
[下载链接]

### 3. 参考资料
- [Black Hat US 2017 - Digital Vengeance: Exploiting the Most Notorious C&C Toolkits](https://www.blackhat.com/docs/us-17/thursday/us-17-Grange-Digital-Vengeance-Exploiting-The-Most-Notorious-C&C-Toolkits.pdf)
- [Black Hat Asia 2014 - I Know You Want Me: Unplugging PlugX](https://www.blackhat.com/docs/asia-14/materials/Haruyama/Asia-14-Haruyama-I-Know-You-Want-Me-Unplugging-PlugX.pdf)