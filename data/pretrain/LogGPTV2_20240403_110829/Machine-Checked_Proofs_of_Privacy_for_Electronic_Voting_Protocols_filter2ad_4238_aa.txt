title:Machine-Checked Proofs of Privacy for Electronic Voting Protocols
author:V&apos;eronique Cortier and
Constantin Catalin Dragan and
François Dupressoir and
Benedikt Schmidt and
Pierre-Yves Strub and
Bogdan Warinschi
2017 IEEE Symposium on Security and Privacy
Machine-Checked Proofs of Privacy for Electronic
Voting Protocols
Véronique Cortier
LORIA, CNRS & Inria &
Université de Lorraine
PI:EMAIL
Benedikt Schmidt∗
IMDEA Software Institute
PI:EMAIL
Constantin C˘at˘alin Dr˘agan
LORIA, CNRS & Inria
PI:EMAIL
François Dupressoir
University of Surrey
PI:EMAIL
Pierre-Yves Strub
École Polytechnique
PI:EMAIL
Bogdan Warinschi
University of Bristol
PI:EMAIL
Abstract—We provide the ﬁrst machine-checked proof of
privacy-related properties (including ballot privacy) for an elec-
tronic voting protocol in the computational model. We target the
popular Helios family of voting protocols, for which we identify
appropriate levels of abstractions to allow the simpliﬁcation
and convenient reuse of proof steps across many variations of
the voting scheme. The resulting framework enables machine-
checked security proofs for several hundred variants of Helios
and should serve as a stepping stone for the analysis of further
variations of the scheme.
In addition, we highlight some of the lessons learned regarding
the gap between pen-and-paper and machine-checked proofs,
and report on the experience with formalizing the security of
protocols at this scale.
I. INTRODUCTION
Ensuring accuracy and security of electronic elections is a
challenge that goes far beyond the scope of safety and security
as traditionally considered in computer science. Nevertheless,
previous audits of voting systems [40], [42] suggest that many
of the most mundane issues could be prevented by using
open source and formally veriﬁed implementations. However,
the formal veriﬁcation of voting systems down to deployed
software is particularly challenging, for several reasons. First,
deﬁning security properties for voting systems remains an
active topic of investigation [13], [22]; moreover, many deﬁni-
tions are expressed in a simulation-based style whereas most
efforts to formally verify cryptographic constructions (with a
few notable exceptions such as [4]) focus on the game-based
style. Second, “real-world” adversary models for electronic
voting would need to consider adversarial models that go
beyond the usual view of provable security, and account for
the possibility that the voting system might be backdoored
or run in corrupted environments. Third, protocols often
have multiple variants, with subtle but theoretically signiﬁcant
differences in their security analysis. Last, electronic voting
systems are distributed, with multiple implementations of
voting clients, introducing additional complexity for reasoning
about their implementations. Taken together, these challenges
make end-to-end formal veriﬁcation of voting systems out of
reach of current technology.
Scope of work: We provide the ﬁrst machine-checked
computational proofs of privacy properties for Helios [2], [26],
an emblematic voting protocol that has received signiﬁcant
analysis and has also been used in several elections. Our proofs
establish ballot privacy and related properties introduced
in [13] on algorithmic descriptions of a broad family of Helios
variants. The proofs1 are built using EasyCrypt [8], [9], an
interactive proof assistant focused on constructing proofs of
computational security for cryptographic constructions.
Technical contributions: Using EasyCrypt, we develop a
machine-checked framework for proving ballot privacy for a
broad class of voting protocols from the Helios family. In order
to manage the complexity of the proof and to accommodate
the large number of instances of the protocol we consider (a
few hundred), we factor out the proof in several steps:
We ﬁrst introduce Labelled-MiniVoting, a core voting proto-
col that enhances the MiniVoting protocol deﬁned in [14] with
labels. The construction relies on an arbitrary labelled public-
key encryption scheme (used to encrypt the votes) and an
abstract proof system used by the tallying authorities to show
the validity of the election result. The addition of labels is
essential to instantiate our scheme more broadly. We formalize
Labelled-MiniVoting and build a machine-checked proof that
it achieves ballot privacy, as well as strong consistency and
strong correctness, as deﬁned in [13]. Informally, these prop-
erties respectively capture the idea that voting is anonymous,
that tallying does not leak any information, and that honestly
created ballots are always considered valid. The proofs are car-
ried out under the assumptions that the underlying encryption
scheme achieves (an adaptation to the case of labelled schemes
of) IND-1-CCA security, and that the underlying proof system
satisﬁes zero-knowledge and voting friendliness (a property
that we introduce and which captures simple requirement for
an abstract proof system to be compatible with ballot privacy).
∗Now at Google Inc.
1https://github.com/catalindragan/minivoting-privacy.
© 2017, Véronique Cortier. Under license to IEEE.
DOI 10.1109/SP.2017.28
993
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:18 UTC from IEEE Xplore.  Restrictions apply. 
We then carry out
the proofs of these three properties
(ballot privacy, strong correctness and strong consistency)
through to a partial instantiation of Labelled-MiniVoting, called
PreHelios, in which the labelled public-key encryption scheme
is speciﬁed as the composition of a public-key encryption
scheme and of a proof system (as in Helios). The machine-
checked proofs of privacy for PreHelios simply follow from
the generic theorems on Labelled-MiniVoting. We introduce
two broad families of Helios variants:
Helios-mix, a mixnet-based variant that reﬁnes PreHelios by
instantiating the counting function to reveal the multiset
of votes and tallying using a secure mixnet, and
Helios-hom, a homomorphic variant that reﬁnes PreHelios by
instantiating the counting function to be the sum of all
votes, and tallying by homomorphically computing the
sum before decrypting the ﬁnal result.
In both cases, carrying the results obtained on PreHelios down
to the relevant variant is not done using a direct instantiation,
but requires in-depth changes to the tallying algorithm. This
refactoring is supported by machine-checked proofs of black-
box equivalence between the tallying algorithms of PreHelios
and its variants (under suitable assumptions). One main advan-
tage of our proof framework is its modularity, which allows
us to easily replace one component of the scheme (here, the
tallying algorithm) with an equivalent one, without having to
reprove the entire scheme. We use the same proof technique
to derive the security of Helios-hom-IDweed, a variant of
Helios-hom where the weeding of invalid ballots performed
before tallying–an important process, often overlooked, that
may lead to privacy breaches [24]–is made lighter without
loss of security. This yields a machine-checked proof of ballot
privacy, strong consistency and strong correctness for Helios-
mix, Helios-hom, and Helios-hom-IDweed.
Finally, we derive speciﬁcations and machine-checked
proofs of privacy for large families of secure variants of
Helios from Helios-mix, Helios-hom, and Helios-hom-IDweed.
The proofs are obtained by further instantiating our earlier
results and discharging all additional hypotheses introduced by
our abstractions. More precisely, we provide a simple design
interface, that allows the user to select various parameters (for
example, the counting function, or the function that selects
information about the ballot to be published on the bulletin
board). The resulting voting scheme can then be automatically
generated and proved secure in EasyCrypt. In total, we prove
the security of more than 500 variants of Helios. In particular,
we retrieve existing implemented variants of Helios such as
Helios-v3-mix, Helios-v3-hom, and Helios-v4.
Related work: Automatic proofs of privacy for voting pro-
tocols have been provided for some protocols of the literature
such as FOO [27], Helios [24], or the Norwegian e-voting pro-
tocol [25]. However, these proofs are conducted in symbolic
models, which are considerably more abstract than crypto-
graphic models. Moreover, the use of automatic tools (such as
ProVerif [17]) often requires signiﬁcant simpliﬁcations of both
the protocol and the underlying cryptographic primitives (for
example, the ballot box may only accept ballots in a certain
∗ [20], still
order). Helios has also been proved private in rF
assuming perfect cryptographic primitives (the adversary may
only call the primitives through an abstract, ideal library). We
are not aware of any machine-checked proof of voting schemes
in cryptographic models, assuming standard cryptographic
primitives. While pen-and-paper proofs for Helios exist [13],
[14], we emphasize that our work is not a simple translation
of those proofs into the EasyCrypt language. First, many
crucial details that are typically omitted in hand proofs (for
example, a careful treatment of the random oracles) had to
be ﬁlled-in. More importantly, our formalization considerably
generalizes existing proofs, providing machine-checked proofs
for hundreds of variants of Helios. This would have been
impossible to achieve with pen-and-paper, and with the same
degree of conﬁdence.
A note on concrete vs asymptotic security: EasyCrypt
adheres to the principles of practice-oriented provable secu-
rity, and our formal proofs always state concrete bounds on
adversarial advantages. For simplicity, we place most of the
discussion below in an asymptotic context. For precision, we
give concrete statements for our main security theorems. These
are backed up by the formal EasyCrypt development, available
from https://github.com/catalindragan/minivoting-privacy.
II. VOTING
We ﬁrst introduce some basic cryptographic primitives, used
in the voting schemes we consider. We then recall useful
security notions for voting systems (ballot privacy, strong
consistency and strong correctness) [13], and state our main
result.
A. Building blocks
We present the cryptographic building blocks used in voting
systems. Our presentation is based on two primitives and their
associated security notions:
labelled public-key encryption
schemes and non-interactive proof systems. All of our models
and proofs are set in the random oracle model, which we recall
ﬁrst.
RANDOM ORACLE MODEL. The random oracle model is a
model for hash functions: to compute the value of the hash
function on a point, any party can invoke an oracle O that
implements a truly random function from some domain D to
some range C. One way to think about this oracle is that O
maintains a table T , initially empty. Whenever an algorithm
calls O(d) for some d ∈ D, O checks if there exists an entry
(d, c) in T and, if so, it returns c; otherwise O randomly
generates a value c(cid:3) ∈ C, adds (d, c(cid:3)) to T , and outputs c(cid:3).
Strictly speaking, in the random oracle model all algorithms
are given oracle access to O; to avoid cluttered notations,
we choose to not explicitly show this dependency, but we
emphasize it whenever appropriate.
In particular, the presence of random oracles has a signiﬁ-
cant impact on the difﬁculty of the EasyCrypt formalization.
We discuss this and associated insights in Section V.
LABELLED PUBLIC-KEY ENCRYPTION SCHEME. The notion
of labelled public-key encryption scheme extends the classical
994
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:18 UTC from IEEE Xplore.  Restrictions apply. 
(λ)
Exppoly-ind1cca,β
B,E,n
encL ← [ ]
1 :
(pk, sk) ← KGen(1λ)
2 :
3 : β(cid:3) ← BOc,Od (1λ, pk)
4 :
return β(cid:3)
Oracle Oc(p0, p1, (cid:3))
1 :
2 :
3 :
4 :
5 :
c ← ⊥
if |encL| < n then
c ← Enc(pk, (cid:3), pβ)
encL ← encL + [(c, (cid:3))]
return c
Oracle Od(cL)
1 : mL ← [ ]
2 :
3 :
4 :
5 :
6 :
return mL
for (c, (cid:3)) in cL do
if (c, (cid:3)) /∈ encL then
mL ← mL + [Dec(sk, (cid:3), c)]
else mL ← mL + [⊥]
Fig. 1.
In Exppoly-ind1cca,β
B,E,n
, the adversary B has access to the set of oracles {Oc, Od}. The adversary is allowed to call the Od oracle at most once.
deﬁnition of a public-key encryption scheme by including a
tag, called a label [35], [38], [39]. Essentially, the tag is data
that is non-malleably attached to the ciphertext and can be
used, for example, by whoever encrypts to specify the context
in which the ciphertext is to be used. In particular, decryption
using the incorrect label should not reveal any information
about the original plaintext. Formally, a labelled public-key
encryption scheme is deﬁned as follows.
Deﬁnition 1. A labelled public-key encryption scheme with
public keys in PK, secret keys in SK, plaintexts in M,
ciphertexts in C, and labels in L, is a triple of algorithms
E = (KGen, Enc, Dec) where:
KGen is a randomized algorithm which on input a security
parameter λ, produces a key pair in PK × SK;
Enc is a randomized algorithm which on input a public key in
PK, a label in L and a plaintext in M outputs a ciphertext
in C;
Dec is a deterministic algorithm which on input a secret key in
SK, a label in L and a ciphertext in C outputs an element
in M⊥, that is either a plaintext in M or a special error
symbol ⊥.
We demand that for any (pk, sk) output by KGen, any label
(cid:3) ∈ L and any message m ∈ M⊥, if C ← Enc(pk, (cid:3), m) then
Dec(sk, (cid:3), C) = m.
We note that if the label is ﬁxed or is empty, labelled
public-key encryption scheme reduces to the standard notion
of public-key encryption.
Encryption schemes used in electronic voting protocols are
often required to be homomorphic, allowing some limited
forms of computation on encrypted data without decrypting
it (for example, homomorphic tallying).
Deﬁnition 2. A homomorphic public-key encryption scheme is
a public-key encryption scheme E together with a deterministic
algorithm Add where the space of plaintexts can be equipped
with a commutative monoid structure (M, 0, +) such that
|cL|(cid:2)
Dec(sk, Add(cL)) =
Dec(sk, cL[i]),