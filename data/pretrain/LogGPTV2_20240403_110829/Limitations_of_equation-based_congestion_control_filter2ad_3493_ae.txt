### Introduction

In this section, we aim to address the throughput discrepancy between TFRC (TCP-Friendly Rate Control) and TCP by exploring several heuristic methods. We recognize that a comprehensive study of this subject is extensive and cannot be fully covered in a single section of a paper. Therefore, our objective is modest: to demonstrate that resolving these issues is within reach and that simple heuristics can be effective under the conditions we have tested.

### Heuristic Design Guidelines

Based on our simulation and analysis results presented in previous sections, we have developed the following guidelines for designing heuristic methods:

1. **RTO Estimation**:
   - **Guideline**: TFRC should estimate RTO using a method similar to (or identical to) the one recommended by the TCP RFC.
   - **Reasoning**:
     - Using the RTO as recommended by the TCP RFC can significantly reduce the throughput difference. As shown in Fig. 14, the throughput difference caused by improper RTO estimation is much larger than that caused by loss event rate estimation and the TCP-friendly equation alone (Fig. 10).
     - It is challenging to design a heuristic with the RTO value calculated based on the TFRC RFC recommendation. This is because, as seen in Fig. 14, TFRC with this RTO can achieve either higher or lower throughput than TCP, depending on both RTT and loss event rates.

2. **Throughput Aggressiveness**:
   - **Guideline**: TFRC should be more aggressive in high-loss environments while maintaining similar throughput in low-loss environments.
   - **Reasoning**:
     - As shown in Fig. 10, TFRC with the RTO from the TCP RFC always achieves less throughput than TCP, and this difference increases with higher loss event rates. Therefore, TFRC should aim to capture more bandwidth under high loss rates while maintaining approximately the same throughput under low loss rates.

3. **RTT Sensitivity**:
   - **Guideline**: TFRC should adapt its bandwidth usage based on RTT.
   - **Reasoning**:
     - When TFRC uses the RTO from the TCP RFC, the throughput difference decreases as RTT increases (as confirmed by Fig. 18). Thus, TFRC should grab more bandwidth with short RTTs and maintain similar throughput with long RTTs.

### Heuristic Methods

We explore two simple heuristics to address the throughput differences:

1. **RTO Scaling**:
   - **Method**: Multiply the feedback sending rate by a constant factor \( \alpha \) and set the timeout period to \( \alpha \times \text{RTO} \).
   - **Effect**: This approach follows the first guideline by setting the RTO to the value recommended by the TCP RFC. When TFRC uses this RTO, it experiences a significant throughput drop at high loss event rates (Fig. 8). By scaling the feedback throughput, we can mitigate this issue.
   - **Evaluation**: Fig. 16 shows the throughput difference ratios for various scale factors. A scale factor of 1.5 provides the best performance, bringing TFRC's throughput closer to that of TCP.

2. **New Feedback Formula**:
   - **Method**: Use a new formula (defined in (17)) to calculate the feedback sending rate and set the timeout period to \( \text{RTO} \).
   - **Effect**: This approach satisfies the first guideline by using the RTO from the TCP RFC. The new formula adjusts the feedback sending rate based on the loss event rate, increasing the scale factor as the loss rate increases.
   - **Evaluation**: Fig. 17 shows the throughput difference ratios for different RTO scale factors. A scale factor of 3 provides the best performance, especially in high-loss environments. The results also indicate that the throughput ratios decrease as RTT increases, aligning with the third guideline.

### Simulation Results

Using the same simulation setup discussed in Section III, we evaluated the performance of these heuristics:

- **First Approach**: Fig. 16 shows that a scale factor of 1.5 brings TFRC's throughput much closer to TCP's. However, this approach does not fully correct the pattern of the original TFRC, which reduces its sending rate under high loss rates.
- **Second Approach**: Fig. 17 demonstrates that the second approach, with a scale factor of 3, provides better performance. This method virtually increases the scale factor as the loss event rate increases, leading to flatter fitted lines in the throughput ratio.

### Related Work

TFRC is based on pioneering work by Padhye et al. [18] and has been studied in various contexts [3], [6], [9], [22], [24], [27]. Most studies are simulation-based, with VojnovicÂ´ and Le Boudec [24] being the only theoretical study. Recent work by Chen and Nahrstedt [6] confirms the conservativeness of TFRC in mobile ad hoc networks.

### Conclusion

This paper examines the factors influencing the throughput imbalance between TFRC and TCP, providing theoretical reasons for the observed discrepancies. Our findings highlight the importance of RTO estimation and suggest that simple heuristics can effectively address these issues. Future work will focus on relaxing the assumptions of fixed RTTs and packet sizes and developing more robust congestion control techniques for emerging networks.

### Acknowledgments

The authors thank M. Vojnovic, M. Zukerman, and anonymous reviewers for their valuable feedback.

### References

[References listed here]

### Author Biographies

**Injong Rhee** received his Ph.D. from the University of North Carolina, Chapel Hill, and is currently an Associate Professor at North Carolina State University. His research interests include computer networks, congestion control, and distributed systems.

**Lisong Xu** received his B.E., M.E., and Ph.D. degrees from the University of Science and Technology, Beijing, and North Carolina State University. He is currently an Assistant Professor at the University of Nebraska-Lincoln, with research interests in computer networks and distributed systems.