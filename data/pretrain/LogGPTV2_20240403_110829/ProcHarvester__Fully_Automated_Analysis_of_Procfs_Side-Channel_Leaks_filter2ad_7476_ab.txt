which is not granted to non-system apps anymore.
4.1 Profiling
We instructed ProcHarvester to profile app starts, as shown in
Listing 1. Although ProcHarvester uses internal methods to han-
dle ADB commands as well as to start and stop the logging app, we
provide them here for the sake of clarity and to illustrate the basic
communication between the Desktop Suite and the Android app.
Listing 1: Profiling app starts with ProcHarvester.
# Repeat
adb s h e l l am s t a r t
a l l apps
\
f o r
( )
- n com . h a r v e s t e r . CommandReceiveActivity \
- - es CMD TRIGGER_EVENT - - es ARG 
adb s h e l l monkey - p  \
- c android . i n t e n t . c a t e g o r y . LAUNCHER 1
s l e e p 4 . 5 # l o g g i n g s t o p s
adb s h e l l am f o r c e - stop 
a f t e r 4 seconds
4.2 Analysis and Evaluation on Android 7
4.2.1
Information Leaks. In the analysis phase, ProcHarvester
identified several procfs resources that allow to infer app starts. The
evaluation presented in this section is based on experiments with
the One Plus 3T. Experiments on the Xperia Z5 revealed almost
identical results and, hence, have been omitted.
Figure 4 illustrates three identified information leaks for Gmail,
and Youtube, respectively. We observe that multiple starts of the
same app lead to similar time series and that time series for different
apps can be distinguished. These plots also illustrate that relying
on DTW to identify correlations yields reliable results regarding
information leaks, since DTW aims to identify similarities between
sequences that vary in time or speed (cf. [20]). Therefore, these
time series serve as templates for the subsequent evaluation.
Table 2 provides an excerpt of procfs leaks that allow to infer app
starts on Android 7. The accuracy has been evaluated for the 100
01,0002,0003,0004,00002,0004,0006,000Time[ms]nr_mappedGmail(com.google.android.gm)Timeseries1Timeseries2Timeseries301,0002,0003,0004,000020,00040,00060,000Time[ms]pgfaultGmail(com.google.android.gm)Timeseries1Timeseries2Timeseries301,0002,0003,0004,000010203040Time[ms]kgsl3doGmail(com.google.android.gm)Timeseries1Timeseries2Timeseries301,0002,0003,0004,00002,0004,0006,000Time[ms]nr_mappedYoutube(com.google.android.youtube)Timeseries1Timeseries2Timeseries301,0002,0003,0004,000020,00040,00060,000Time[ms]pgfaultYoutube(com.google.android.youtube)Timeseries1Timeseries2Timeseries301,0002,0003,0004,000020406080100Time[ms]kgsl3doYoutube(com.google.android.youtube)Timeseries1Timeseries2Timeseries3ASIA CCS ’18, June 4–8, 2018, Incheon, Republic of Korea
R. Spreitzer, F. Kirchengast, D. Gruss, and S. Mangard
Table 2: Excerpt of identified information leaks for app in-
ference on Android 7. Accuracy evaluated for 100 apps.
Table 3: App inference attacks on Android 7 based on iden-
tified information leaks for application cold starts.
procfs file
/proc/vmstat
/proc/vmstat
/proc/interrupts
/proc/vmstat
/proc/interrupts
/proc/interrupts
/proc/interrupts
/proc/vmstat
/proc/vmstat
/proc/vmstat
/proc/interrupts
/proc/interrupts
Property
nr_mapped
pgfault
kgsl3do
nr_anon_pages
arch_timer
MDSS
Rescheduling interrupts
nr_dirty_threshold
nr_shmem
nr_free_pages
Single function call interrupts
dwc3
Sockets used
wlan0: Receive bytes
wlan0: Transmit bytes
nr_inodes (column 0)
/proc/net/sockstat
/proc/net/dev
/proc/net/dev
/proc/sys/fs/
inode-state
/proc/meminfo
/proc/sys/fs/dentry-statenr_dentry (column 0)
/proc/pagetypeinfo
/proc/schedstat
VmallocUsed
zone DMA, type Unmovable
cpux (column 8: Time spent waiting to run)
Accuracy
82.2%
73.3%
71.5%
71.3%
70.1%
67.6%
62.9%
62.2%
58.9%
49.1%
48.3%
47.2%
74.1%
73.8%
68.4%
65.0%
55.9%
54.1%
39.7%
37.8%
apps listed in Appendix A. For ProcHarvester the exact meaning
of these properties does not matter. The idea is to report properties
for which a correlation between time series could be observed since
these properties allow to identify the corresponding event later on.
Nevertheless, we indicate named properties within the procfs files
as property_name and in case of unnamed properties we provide
the column number (starting at 0) within the procfs file.
As there are multiple columns in /proc/interrupts (one for
each CPU) and we do not know on what CPU the targeted event is
executed, we simply sum all interrupt counters from the individual
CPUs. The information leaks resulting from the Mobile Display
Sub-System (MDSS) have already been exploited by Diao et al. [12] to
perform app inference attacks. However, we still report it here since
ProcHarvester automatically identified MDSS as an information
leak. To the best of our knowledge, the other information leaks
identified by ProcHarvester have not been reported so far.
4.2.2 Adversary Model and Evaluation. Based on the observed
information leaks, we evaluate the performance of fingerprinting
app starts. Therefore, we assume an adversary model where a user
installed a malicious app on her device. As the app does not require
any permission, the user will not notice anything suspicious during
the installation. We rely on an analysis phase where the adversary
gathers the identified procfs resources for applications of interest
to establish the application fingerprint database, i.e., the templates
for specific apps of interest. This analysis phase, i.e., the gathering
of templates, can be done on the targeted device or on a device
controlled by the adversary. During the attack phase, the malicious
application monitors the previously identified information leaks
and exploits this information to infer application launches. For our
evaluation, the profiling phase and the attack phase have been per-
formed on the same device, as also done in the studies we compare
our results to [12, 34].
Evaluation. For the subsequent evaluation we establish a database
of fingerprints for the 100 apps listed in Appendix A. We collected
Attack
App cold starts
App resumes
Mixed (cold starts and app resumes)
Manual cold starts (by human being)
# Apps Accuracy
96%
86%
90%
98%
100
20
20
20
10 samples, i.e., 10 time series for the procfs leaks in the upper part
of Table 2, per app and considered the following four scenarios.
App cold starts: By combining the identified information leaks
by means of majority voting (in the multi-resource mode), we
achieve an average classification rate of 96% based on 8-fold
cross validation for all 100 apps. We significantly outperform
the most accurate attack by Diao et al. [12], who report an accu-
racy of 87% for 10 randomly chosen apps out of 100 apps. The
detailed results for app cold starts can be found in Appendix A.
App resumes: We also evaluated the accuracy of inferring app re-
sumes with the identified information leaks for app cold starts.
Although a dedicated profiling phase will most likely identify
further information leaks that allow to infer app resumes more
accurately, we achieve an average classification rate of 86% for
20 applications, selected randomly out of the 100 applications.
This shows that even if the attacker has only templates for app
cold starts, app resumes can still be monitored with a high accu-
racy. The detailed classification results for application resumes
can be found in Appendix A.
Mixed: As seen in the previous two cases, we are able to iden-
tify app cold starts as well as app resumes by relying on the
templates for app cold starts. We evaluated the combination
of these two cases, i.e., app cold starts and app resumes, by
randomly selecting 20 applications out of the 100 applications
and achieved an average classification rate of 90% based on
k-fold cross validation. The detailed classification results for
app cold starts and app resumes can be found in Appendix A.
Manual cold starts: Since we gathered the training data by trig-
gering the app starts automatically via the ADB shell, we also
verified the identified side channels manually. Therefore, we
launched 20 apps, each 10 times, by manually tapping the ap-
plication icon with a finger while monitoring the identified
resources in the background. During these manual application
starts, the dwc3 interrupt (in /proc/interrupts) did not leak
any information on manual app starts. Instead, we found that
the dwc3 interrupt is caused by the USB interface, representing
a new side channel that allows to spy on USB connections.
The remaining information leaks presented in Table 2 were
also exploitable during manual app starts. This indicates that
most of the identified information leaks do not differ between
programmatically triggered events and manually (by a human
being) triggered events, which strengthens the approach of au-
tomatically identifying information leaks. The detailed results
for manual application cold starts can be found in Appendix A.
Table 3 summarizes our investigations. All accuracies have been
averaged by means of k-fold cross validation.
ProcHarvester
ASIA CCS ’18, June 4–8, 2018, Incheon, Republic of Korea
Table 4: Excerpt of identified information leaks for app in-
ference on Android 8. Accuracy evaluated for 20 apps.
Property
sockets: used
eth0: tx_packets (column 9)
procfs file
/proc/net/sockstat
/proc/net/xt_qtaguid/
iface_stat_all
/proc/net/xt_quota/eth0 eth0: interface quota
/proc/net/protocols
/proc/net/xt_qtaguid/
iface_stat_fmt
eth0: total_skb_tx_packets
UNIX: sockets
/proc/meminfo
/proc/meminfo
/proc/meminfo
/proc/meminfo
/proc/meminfo
AnonPages
Active(anon)
MemFree
Mapped
Shmem
Accuracy
86.3%
77.2%
76.9%
76.3%
76.3%
76.3%
75.9%
70.9%
62.5%
55.0%
Table 5: Comparison of app inference attacks. ✓ and ✗ indi-
cate whether the attack works on a specific Android version.
Work
Yan et al. [34]
Diao et al. [12]
Ours
Ours
procfs information
/sys/.../battery
/proc/interrupts
/proc/interrupts,
/proc/vmstat
(Table 2)
/proc/meminfo
(Table 4)
# Apps Accuracy Android 7 Android 8
3
10/100
100%
87%
✗
✓
✗
✗
100/100
20/100
96%
87%
✓
✓
✗
✓
4.3 Analysis and Evaluation on Android 8
Similar to the evaluation on Android 7, ProcHarvester identified
information leaks that allow to infer app starts on Android 8. The
profiling and evaluation are performed exactly as on Android 7.
Table 4 provides an excerpt of the information leaks and the
corresponding accuracies evaluated for app starts on Android 8.
We observe that on Android 8 /proc/vmstat is not available any-
more. However, most of the information that has been published in
/proc/vmstat is still available in /proc/meminfo. Thus, the infor-
mation leaks have not been closed, but instead the information is
available at a different location within the procfs. Since the experi-
ments on Android 8 have been carried out with an emulator, some
of the procfs leaks are related to the Ethernet network interface
(eth0) instead of the Wi-Fi network interface (wlan0). Nevertheless,
running ProcHarvester on a real device will yield similar results.
Combining the information leaks in the lower part of Table 4
yields an average classification rate of 87% based on k-fold cross
validation. Appendix B depicts the detailed results for all 20 apps.
4.4 Comparison of Attacks
Table 5 compares our results to related work. Access to /sys/ has
been restricted in Android 7 and, hence, the information leak ex-
ploited by Yan et al. [34] does not work anymore. Compared to
the previously most accurate attack by Diao et al. [12], ProcHar-
vester automatically identified information leaks that allow us
to significantly outperform their attack. Besides, Diao et al. [12]
report an accuracy of 87% for 10 randomly chosen apps out of 100
apps, whereas we are able to infer 96% of all 100 apps. In addition,
the attack by Diao et al. [12] does not work on Android 8 since
/proc/interrupts is not available anymore.
We stress that the main intention of this work is to demonstrate
the strength of ProcHarvester in identifying information leaks
automatically. Hence, we also do not focus on a stealthy attack
considering, e.g., the battery consumption of the Android app. Nev-
ertheless, with our fully automated attacks, we outperform the
most accurate attack to date on Android 7 and we present the first
procfs-based side-channel attack on Android 8.
5 WEBSITE INFERENCE
We also instructed ProcHarvester to investigate procfs leaks that
can be exploited for website fingerprinting attacks [14, 27].
Problem Description. A user’s browsing behavior reveals sensi-
tive information such as sexual orientation, diseases, etc. Therefore,
up to Android M (Android 6) it has been protected by means of the
READ_HISTORY_BOOKMARKS permission, and starting with Android
M access has been removed entirely [1].
5.1 Profiling
In order to investigate information leaks in the procfs that allow
to infer visited websites, we instructed ProcHarvester to profile
website launches via the Chrome browser, as shown in Listing 2.
Listing 2: Profiling websites with ProcHarvester.
# Repeat
adb s h e l l am s t a r t
f o r
a l l w e b s i t e s
( )
- n com . h a r v e s t e r . CommandReceiveActivity \
- - es CMD TRIGGER_EVENT - - es ARG 
\
\
adb s h e l l am s t a r t
- a " android . i n t e n t . a c t i o n . VIEW"
- d 
s l e e p 4 . 5 # l o g g i n g s t o p s
# K i l l
adb s h e l l am f o r c e - stop com . android . chrome
a f t e r 4 seconds
the browser
5.2 Analysis and Evaluation on Android 7
5.2.1
Information Leaks. ProcHarvester identified several re-
sources in the procfs that allow to fingerprint websites and, thus,
to infer a user’s browsing behavior. Again, the evaluation is based
on experiments with the One Plus 3T. Experiments on the Xperia
Z5 revealed almost identical results and, hence, have been omitted.
Figure 5 depicts three identified procfs leaks for facebook.com,
and wikipedia.org, respectively. Again, we observe that multiple
visits to the same website lead to similar time series and that time
series for different websites can be distinguished. Since we use
DTW as a similarity measure, misalignments are entirely negli-
gible. Specifically, the time series for wikipedia.org have visually
observable time offsets, but DTW correctly detects the similarity.
Table 6 provides an excerpt of the identified information leaks
that allow to fingerprint websites. Most information leaks are re-
lated to statistics collected about the number of packets received
and transmitted as well as the number of bytes received and trans-
mitted. Furthermore, the number of pages used for shared memory
also leaks information about visited websites. Nevertheless, we do
not aim to interpret the automatically identified information leaks
and ProcHarvester reports information leaks irrespective of the
actual information that leaks and without background knowledge.
Hence, also redundant procfs resources, such as IpExt: InOctets
and wlan0: Receive bytes, have been identified. We evaluated the
detection accuracy for the top 20 websites according to alexa.com.
ASIA CCS ’18, June 4–8, 2018, Incheon, Republic of Korea
R. Spreitzer, F. Kirchengast, D. Gruss, and S. Mangard
Figure 5: Information leaks (IpExt: InNoECTPkts, IPExt: InOctets, and IPExt: OutOctets) for facebook.com and wikipedia.org.
Table 6: Excerpt of identified information leaks for website
fingerprinting on Android 7. Accuracy based on 20 websites.
Table 7: Classification rates for website fingerprinting by
combining the identified information leaks on Android 7.
Accuracy based on 8 samples per website.
procfs file
/proc/net/netstat
/proc/net/netstat
/proc/net/dev
/proc/net/dev
/proc/net/dev
/proc/net/netstat
/proc/net/dev
/proc/vmstat
/proc/vmstat
/proc/net/sockstat
Property
IpExt: InNoECTPkts
IpExt: InOctets
wlan0: Receive packets
wlan0: Received bytes
wlan0: Transmit packets
IpExt: OutOctets
wlan0: Transmit bytes
nr_shmem
nr_mapped
sockets: used
Accuracy
82.5%
81.9%
81.9%
78.8%
77.5%
73.8%
71.9%
70.6%
64.4%
60.0%
5.2.2 Adversary Model and Evaluation. Similar to the website
fingerprinting evaluation we assume that a zero-permission app
monitors the identified procfs leaks in the background and exploits
these information leaks to infer a user’s browsing behavior.
Evaluation. For this proof of concept we established a database of
website fingerprints (templates) for the top 20 websites according
to alexa.com. We collected 8 samples, i.e., 8 time series for the
identified information leaks in Table 6, per website. We combined
the identified procfs leaks by means of multi-resource evaluation.
For all gathered samples (time series), ProcHarvester infers
visited websites with a high probability. The detailed results for
each of the 20 websites are shown in Table 7. Overall, we achieve an
average classification rate of 94% based on k-fold cross validation.
Website
www.360.cn
www.amazon.com
www.baidu.com
www.facebook.com
www.google.com
www.imgur.com