### 4.1 Profiling

We instructed ProcHarvester to profile app starts, as shown in Listing 1. Although ProcHarvester uses internal methods to handle ADB commands and to start and stop the logging app, we provide the commands here for clarity and to illustrate the basic communication between the Desktop Suite and the Android app.

**Listing 1: Profiling app starts with ProcHarvester.**

```bash
# Repeat for all apps
for app in <list_of_apps>; do
  adb shell am start -n com.harvester.CommandReceiveActivity \
  --es CMD TRIGGER_EVENT --es ARG $app
  adb shell monkey -p $app -c android.intent.category.LAUNCHER 1
  sleep 4.5 # Logging stops
  adb shell am force-stop $app
done
```

### 4.2 Analysis and Evaluation on Android 7

#### 4.2.1 Information Leaks

In the analysis phase, ProcHarvester identified several `procfs` resources that allow inferring app starts. The evaluation presented in this section is based on experiments with the OnePlus 3T. Experiments on the Xperia Z5 revealed almost identical results and have been omitted for brevity.

**Figure 4** illustrates three identified information leaks for Gmail and YouTube. We observe that multiple starts of the same app lead to similar time series, and time series for different apps can be distinguished. These plots also illustrate that relying on Dynamic Time Warping (DTW) to identify correlations yields reliable results regarding information leaks, as DTW aims to identify similarities between sequences that vary in time or speed (cf. [20]). Therefore, these time series serve as templates for the subsequent evaluation.

**Table 2** provides an excerpt of `procfs` leaks that allow inferring app starts on Android 7. The accuracy has been evaluated for the 100 apps listed in Appendix A.

| procfs file              | Property               | Accuracy |
|--------------------------|------------------------|----------|
| /proc/vmstat             | nr_mapped              | 82.2%    |
| /proc/vmstat             | pgfault                | 73.3%    |
| /proc/interrupts         | kgsl3do                | 71.5%    |
| /proc/vmstat             | nr_anon_pages          | 71.3%    |
| /proc/interrupts         | arch_timer             | 70.1%    |
| /proc/interrupts         | MDSS                   | 67.6%    |
| /proc/interrupts         | Rescheduling interrupts| 62.9%    |
| /proc/vmstat             | nr_dirty_threshold     | 62.2%    |
| /proc/vmstat             | nr_shmem               | 58.9%    |
| /proc/vmstat             | nr_free_pages          | 49.1%    |
| /proc/interrupts         | Single function call   | 48.3%    |
| /proc/interrupts         | dwc3                   | 47.2%    |

For ProcHarvester, the exact meaning of these properties does not matter. The idea is to report properties for which a correlation between time series could be observed, as these properties allow identifying the corresponding event later on. Named properties within the `procfs` files are indicated as `property_name`, and for unnamed properties, we provide the column number (starting at 0) within the `procfs` file.

Since there are multiple columns in `/proc/interrupts` (one for each CPU), and we do not know on which CPU the targeted event is executed, we sum all interrupt counters from the individual CPUs. The information leaks resulting from the Mobile Display Sub-System (MDSS) have already been exploited by Diao et al. [12] to perform app inference attacks. However, we still report it here since ProcHarvester automatically identified MDSS as an information leak. To the best of our knowledge, the other information leaks identified by ProcHarvester have not been reported so far.

#### 4.2.2 Adversary Model and Evaluation

Based on the observed information leaks, we evaluate the performance of fingerprinting app starts. We assume an adversary model where a user installs a malicious app on their device. As the app does not require any permissions, the user will not notice anything suspicious during installation. We rely on an analysis phase where the adversary gathers the identified `procfs` resources for applications of interest to establish the application fingerprint database, i.e., the templates for specific apps of interest. This analysis phase, i.e., the gathering of templates, can be done on the targeted device or on a device controlled by the adversary. During the attack phase, the malicious application monitors the previously identified information leaks and exploits this information to infer application launches. For our evaluation, the profiling phase and the attack phase have been performed on the same device, as also done in the studies we compare our results to [12, 34].

**Evaluation:**

For the subsequent evaluation, we established a database of fingerprints for the 100 apps listed in Appendix A. We collected 10 samples, i.e., 10 time series for the `procfs` leaks in the upper part of Table 2, per app and considered the following four scenarios:

- **App cold starts:** By combining the identified information leaks using majority voting (in the multi-resource mode), we achieve an average classification rate of 96% based on 8-fold cross-validation for all 100 apps. We significantly outperform the most accurate attack by Diao et al. [12], who report an accuracy of 87% for 10 randomly chosen apps out of 100 apps.
- **App resumes:** We also evaluated the accuracy of inferring app resumes with the identified information leaks for app cold starts. Although a dedicated profiling phase will likely identify further information leaks that allow more accurate inference of app resumes, we achieve an average classification rate of 86% for 20 applications, selected randomly out of the 100 applications. This shows that even if the attacker has only templates for app cold starts, app resumes can still be monitored with high accuracy.
- **Mixed (cold starts and app resumes):** As seen in the previous two cases, we are able to identify app cold starts as well as app resumes by relying on the templates for app cold starts. We evaluated the combination of these two cases, i.e., app cold starts and app resumes, by randomly selecting 20 applications out of the 100 applications and achieved an average classification rate of 90% based on k-fold cross-validation.
- **Manual cold starts:** Since we gathered the training data by triggering the app starts automatically via the ADB shell, we also verified the identified side channels manually. We launched 20 apps, each 10 times, by manually tapping the application icon with a finger while monitoring the identified resources in the background. During these manual application starts, the `dwc3` interrupt (in `/proc/interrupts`) did not leak any information on manual app starts. Instead, we found that the `dwc3` interrupt is caused by the USB interface, representing a new side channel that allows spying on USB connections. The remaining information leaks presented in Table 2 were also exploitable during manual app starts. This indicates that most of the identified information leaks do not differ between programmatically triggered events and manually (by a human) triggered events, which strengthens the approach of automatically identifying information leaks.

**Table 3** summarizes our investigations. All accuracies have been averaged by means of k-fold cross-validation.

| Attack Type            | # Apps | Accuracy |
|------------------------|--------|----------|
| App cold starts        | 100    | 96%      |
| App resumes            | 20     | 86%      |
| Mixed (cold starts and app resumes) | 20 | 90%      |
| Manual cold starts     | 20     | 98%      |

### 4.3 Analysis and Evaluation on Android 8

Similar to the evaluation on Android 7, ProcHarvester identified information leaks that allow inferring app starts on Android 8. The profiling and evaluation are performed exactly as on Android 7.

**Table 4** provides an excerpt of the information leaks and the corresponding accuracies evaluated for app starts on Android 8. We observe that on Android 8, `/proc/vmstat` is no longer available. However, most of the information that was published in `/proc/vmstat` is still available in `/proc/meminfo`. Thus, the information leaks have not been closed but are instead available at a different location within the `procfs`. Since the experiments on Android 8 were carried out with an emulator, some of the `procfs` leaks are related to the Ethernet network interface (`eth0`) instead of the Wi-Fi network interface (`wlan0`). Nevertheless, running ProcHarvester on a real device will yield similar results.

Combining the information leaks in the lower part of Table 4 yields an average classification rate of 87% based on k-fold cross-validation. Appendix B depicts the detailed results for all 20 apps.

| procfs file              | Property               | Accuracy |
|--------------------------|------------------------|----------|
| /proc/net/sockstat       | sockets: used          | 86.3%    |
| /proc/net/xt_qtaguid     | eth0: tx_packets       | 77.2%    |
| /proc/net/xt_quota/eth0  | eth0: interface quota  | 76.9%    |
| /proc/net/protocols      | total_skb_tx_packets   | 76.3%    |
| /proc/net/xt_qtaguid     | UNIX: sockets          | 76.3%    |
| /proc/meminfo            | AnonPages              | 76.3%    |
| /proc/meminfo            | Active(anon)           | 75.9%    |
| /proc/meminfo            | MemFree                | 70.9%    |
| /proc/meminfo            | Mapped                 | 62.5%    |
| /proc/meminfo            | Shmem                  | 55.0%    |

### 4.4 Comparison of Attacks

**Table 5** compares our results to related work. Access to `/sys/` has been restricted in Android 7, and hence, the information leak exploited by Yan et al. [34] no longer works. Compared to the previously most accurate attack by Diao et al. [12], ProcHarvester automatically identified information leaks that allow us to significantly outperform their attack. Besides, Diao et al. [12] report an accuracy of 87% for 10 randomly chosen apps out of 100 apps, whereas we are able to infer 96% of all 100 apps. Additionally, the attack by Diao et al. [12] does not work on Android 8 since `/proc/interrupts` is no longer available.

| Work                    | procfs information       | # Apps | Accuracy | Android 7 | Android 8 |
|-------------------------|--------------------------|--------|----------|-----------|-----------|
| Yan et al. [34]         | /sys/.../battery         | 3      | 100%     | ✗         | ✗         |
| Diao et al. [12]        | /proc/interrupts         | 10/100 | 87%      | ✓         | ✗         |
| Ours (Table 2)          | /proc/interrupts, /proc/vmstat | 100/100 | 96%      | ✓         | ✗         |
| Ours (Table 4)          | /proc/meminfo            | 20/100 | 87%      | ✗         | ✓         |

We stress that the main intention of this work is to demonstrate the strength of ProcHarvester in identifying information leaks automatically. Hence, we do not focus on a stealthy attack considering, e.g., the battery consumption of the Android app. Nevertheless, with our fully automated attacks, we outperform the most accurate attack to date on Android 7 and present the first `procfs`-based side-channel attack on Android 8.

### 5 Website Inference

We also instructed ProcHarvester to investigate `procfs` leaks that can be exploited for website fingerprinting attacks [14, 27].

#### Problem Description

A user's browsing behavior reveals sensitive information such as sexual orientation, diseases, etc. Therefore, up to Android M (Android 6), it has been protected by means of the `READ_HISTORY_BOOKMARKS` permission, and starting with Android M, access has been removed entirely [1].

#### 5.1 Profiling

To investigate information leaks in the `procfs` that allow inferring visited websites, we instructed ProcHarvester to profile website launches via the Chrome browser, as shown in Listing 2.

**Listing 2: Profiling websites with ProcHarvester.**

```bash
# Repeat for all websites
for website in <list_of_websites>; do
  adb shell am start -n com.harvester.CommandReceiveActivity \
  --es CMD TRIGGER_EVENT --es ARG $website
  adb shell am start -a "android.intent.action.VIEW" -d $website
  sleep 4.5 # Logging stops
  adb shell am force-stop com.android.chrome
done
```

#### 5.2 Analysis and Evaluation on Android 7

##### 5.2.1 Information Leaks

ProcHarvester identified several resources in the `procfs` that allow fingerprinting websites and, thus, inferring a user's browsing behavior. Again, the evaluation is based on experiments with the OnePlus 3T. Experiments on the Xperia Z5 revealed almost identical results and have been omitted for brevity.

**Figure 5** depicts three identified `procfs` leaks for `facebook.com` and `wikipedia.org`. We observe that multiple visits to the same website lead to similar time series, and time series for different websites can be distinguished. Since we use DTW as a similarity measure, misalignments are entirely negligible. Specifically, the time series for `wikipedia.org` have visually observable time offsets, but DTW correctly detects the similarity.

**Table 6** provides an excerpt of the identified information leaks that allow fingerprinting websites. Most information leaks are related to statistics collected about the number of packets received and transmitted as well as the number of bytes received and transmitted. Furthermore, the number of pages used for shared memory also leaks information about visited websites. Nevertheless, we do not aim to interpret the automatically identified information leaks, and ProcHarvester reports information leaks irrespective of the actual information that leaks and without background knowledge. Hence, redundant `procfs` resources, such as `IpExt: InOctets` and `wlan0: Receive bytes`, have been identified. We evaluated the detection accuracy for the top 20 websites according to alexa.com.

| procfs file              | Property               | Accuracy |
|--------------------------|------------------------|----------|
| /proc/net/netstat        | IpExt: InNoECTPkts     | 82.5%    |
| /proc/net/netstat        | IpExt: InOctets        | 81.9%    |
| /proc/net/dev            | wlan0: Receive packets | 81.9%    |
| /proc/net/dev            | wlan0: Received bytes  | 78.8%    |
| /proc/net/dev            | wlan0: Transmit packets| 77.5%    |
| /proc/net/netstat        | IpExt: OutOctets       | 73.8%    |
| /proc/net/dev            | wlan0: Transmit bytes  | 71.9%    |
| /proc/vmstat             | nr_shmem               | 70.6%    |
| /proc/vmstat             | nr_mapped              | 64.4%    |
| /proc/net/sockstat       | sockets: used          | 60.0%    |

##### 5.2.2 Adversary Model and Evaluation

Similar to the website fingerprinting evaluation, we assume that a zero-permission app monitors the identified `procfs` leaks in the background and exploits these information leaks to infer a user's browsing behavior.

**Evaluation:**

For this proof of concept, we established a database of website fingerprints (templates) for the top 20 websites according to alexa.com. We collected 8 samples, i.e., 8 time series for the identified information leaks in Table 6, per website. We combined the identified `procfs` leaks by means of multi-resource evaluation. For all gathered samples (time series), ProcHarvester infers visited websites with a high probability. The detailed results for each of the 20 websites are shown in Table 7. Overall, we achieve an average classification rate of 94% based on k-fold cross-validation.

**Table 7: Classification rates for website fingerprinting by combining the identified information leaks on Android 7. Accuracy based on 8 samples per website.**

| Website                 | Accuracy |
|-------------------------|----------|
| www.360.cn              | 94%      |
| www.amazon.com          | 94%      |
| www.baidu.com           | 94%      |
| www.facebook.com        | 94%      |
| www.google.com          | 94%      |
| www.imgur.com           | 94%      |