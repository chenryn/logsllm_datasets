service subscribers (i.e. UAs).
7.3 Overhead Introduced by vIDS
During the call monitoring process, with the arrival of
an INVITE request message, one instance of each protocol
state machine is initiated starting from (INIT) state. As
the call progresses, states make transitions to other states.
At the end of the call, the associated instances of proto-
col machines are removed from the memory. The mem-
ory cost of maintaining the attack patterns is in the order
of few KBytes. SIP messages are text based with var-
ied length header ﬁelds. All mandatory ﬁelds, including
source, destination, port numbers, and media information,
consume about 450 bytes. Similarly, the RTP state infor-
mation such as source, destination, ports, sequence num-
ber, timestamp, synchronization source (SSRC) identiﬁer,
and other relevant variable values, requires only 40 bytes of
memory space. Although the memory requirement grows
linearly with the number of calls, the very low memory cost
per call allows us to easily monitor thousands of calls at the
same time. In the absence of vIDS, the vIDS host (e.g. see
Figure 7) simply forwards the received packets, whereas in
the presence of vIDS, packets are logged at the granular-
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
-JAHFHEIAAJMH)1JAHAJ-JAHFHEIAAJMH*L1,5*=IA60K>*=IA60K>5122HNO5AHLAH5122HNO5AHLAH4KJAH#EEIA?=JA?O" II4KJAH010002000300040005000600070000123456Call Request Arrivals100020003000400050006000700050100150200250300350time (seconds)Call Duration (sec.)Figure 9. Call Setup Delay
Figure 10. Impact on RTP streams
ity of a millisecond. The increase of CPU overhead due to
running vIDS is (cid:39) 3.6%.
7.4 Impact on QoS of RTP streams
IP telephony places stringent requirements on RTP
streams to meet the speciﬁed QoS. The latency upper-bound
is 150 ms for one way trafﬁc, and jitter should be bounded
as well. In our experiments, we study the effect of online
placement of vIDS upon the QoS of voice streams. We eval-
uate the impact of vIDS with respect to two metrics : (1)
end-to-end delay of RTP packets and (2) RTP jitter behav-
iors. Figure 10 shows the impact of vIDS on the QoS of
RTP streams. On average, vIDS adds (cid:39) 1.5 ms of addi-
tional delay to RTP based voice streams, while the delay
variations are 0.3× 10−9 seconds higher than those without
the vIDS. Therefore, vIDS has a negligible effect upon RTP
delay and jitter, which will not be perceived by VoIP service
subscribers.
7.5 Detection Accuracy and Sensitivity
Note that vIDS is based on protocol state machines
In our
and the attack signatures of the known attacks.
preliminary experiments with a few known attack scenar-
ios, vIDS successfully detects these attacks without false
alarms. For those attacks which have already been identi-
ﬁed and recorded with attack patterns in the attack signature
database, vIDS demonstrates 100% detection accuracy with
zero false positive. However, the detection of unknown at-
tacks (i.e., the attacks which do not have the corresponding
signatures in the database) is largely dependent upon the de-
velopment of protocol state machines. We postulate that the
detailed and accurate representation of protocol state ma-
chines should be capable of detecting unknown attacks. The
effectiveness of vIDS in detecting unknown attacks will be
our future work.
The detection sensitivity of vIDS is deﬁned as the earli-
est possible time to detect an intrusion since its commence-
ment. The major strength of speciﬁcation-based intrusion
detection lies in its accurate and early detection capability,
provided that the protocol state machine is detailed enough.
The intrusion detection delay is mainly determined by the
various timer in attack patterns, for example, timer T1 in
INVITE ﬂooding detection and timer T in BYE DoS at-
tack detection. T1 depends upon the required detection
granularity and the computational resources available at
vIDS, whereas timer T depends upon the network condi-
tions. After receiving a BYE message, setting timer T to
one round trip time (RTT) should be long enough to receive
all in-ﬂight RTP packets, consequently, there would be less
chance of false alarms. Seeking the optimized values of
timers and their relationship with the probability of false
alarms is our ongoing work.
8 Related Work
The work done by Sekar et al. [15] and Vigna et al. [17,
18, 19] are the closest to our work, in which state transition
analysis tool (STAT) is used for intrusion detection. Sekar’s
speciﬁcation based anomaly detection method [15] utilizes
extended ﬁnite state automata to model network protocols.
Vigna et al. proposed NetSTAT tool [18], an approach
extending the STAT to network based intrusion detection,
and WebSTAT tool [19] for detecting web-based attacks.
WebSTAT operates on multiple event streams and correlates
both network and operating system level events with the en-
tries contained in the server log. Porras et al. [5] employed
the similar technique to model computer penetrations as a
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
010002000300040005000600070000.20.250.30.350.40.45Call set up time (sec.)010002000300040005000600070000.20.250.30.350.40.45time (seconds)with vIDSwithout vIDSwith vIDSwithout vIDSCaller 3 Caller 4 010002000300040005000600070000.12250.1230.12350.1240.12450.125RTP Delay (sec.)0100020003000400050006000700011.21.41.61.822.2x 10−9time (seconds)Avg. Delay Variation (sec.)with vIDSwithout vIDSwith vIDSwithout vIDSseries of state changes from an initial secure state to a target
compromised state. AODVSTAT [17] is also a STAT based
tool for network-based real-time intrusion detection in the
context of wireless networks, which are based on Ad hoc
On-Demand Distance Vector (AODV) routing protocol.
Wu et al. [20] proposed SCIDIVE, a stateful cross-
protocol intrusion detection architecture for VoIP. The ar-
chitecture of SCIDIVE translates all incoming network
packets into protocol dependent information. Packets are
grouped according to sessions. The aggregated state from
the multiple packets of a session are matched by the Rule
Matching Engine against the ruleset. This approach has
the same disadvantages as that of misuse intrusion detec-
tion system. Our proposed scheme is based on these pre-
vious approaches with signiﬁcant enhancements via com-
municating extended ﬁnite state machines. Our approach
is particularly suitable for VoIP applications because of its
multi-protocol awareness.
9 Conclusions
In this paper, we formally described the extended ﬁnite
state machine and utilized it for VoIP intrusion detection.
We presented the potential security threats to the emerging
SIP-based VoIP services, and detailed the stateful intrusion
detection mechanism that is based on the communicating
extended ﬁnite state machines. The proposed vIDS is par-
ticularly suitable for defending VoIP applications, because
of its holistic consideration of multi-protocols and cross-
protocol interactions. We have evaluated the performance
of vIDS through our VoIP network testbed. Our experimen-
tal results show that the online placement of vIDS induces
(cid:39) 100 ms delay to call setup and an additional (cid:39) 3.6%
overhead to CPU cost. Due to the low memory cost per
call, vIDS can easily monitor thousands of calls at the same
time. Moreover, vIDS has negligible impact upon the per-
ceived quality of voice streams. Finally, we demonstrated
the high detection accuracy of vIDS and discussed its de-
tection sensitivity.
References
[1] O. Arkin. Why E.T. Can’t Phone Home? - Security Risk
Factors with IP Telephony. Presentation, AusCERT Aus-
tralia, 2004.
[2] M. Handley and V. Jacobson. SDP: Session Description Pro-
tocol. RFC 2327, IETF Network Working Group, 1998.
[3] C. Hoare. Communicating Sequential Processes. In Com-
munications of the ACM, 21(8), pages 666–677, 1978.
[4] G. Holzmann. Design and Validation of Computer Proto-
cols. Prentice Hall, 1st edition, 1991.
[5] K. Ilgun, R. A. Kemmerer, and P. A. Porras. State tran-
sition analysis: A rule-based intrusion detection approach.
IEEE Transactions on Software Engineering, 21(3):181–
199, March 1995.
[6] A. Johnston. SIP Understanding the Session Initiation Pro-
tocol. Artech House, 2nd edition, 2004.
[7] D. Lee and M. Yannakakis. Principles and methods of test-
ing ﬁnite state machines - A survey. In Proceedings of the
IEEE, Vol 84, pages 1089–1123, August 1996.
[8] A. Niemi. Authentication of SIP calls. In Tik-110.501 Sem-
inar on Network Security, 2000.
[9] OPNET.
eler Tool Version 9.1.
http://www.opnet.com/, 2003.
Optimum Network Performance, Mod-
Network Simulation Tool,
[10] A. Petrenko, S. Boroday, and R. Groz. Conﬁrming Conﬁgu-
rations in EFSM Testing. In IEEE Transactions on Software
Engineering (TSE), January 2004.
[11] M. Roesch. Snort: Lightweight intrusion detection for net-
works.
In Proceedings of the 13th System Administration
Conference (LISA), USENIX Association, pages 229–238,
November 1999.
[12] J. Rosenberg, H. Schulzrinne, G. Camarillo, A. Johnston,
J. Peterson, R. Sparks, M. Handley, and E. Schooler. SIP:
Session Initiation Protocol. RFC 3261, IETF Network
Working Group, 2002.
[13] S. Salsano, L. Veltri, and D. Papalilo. SIP Security Issues:
The SIP Authentication Procedure and its Processing Load.
In IEEE Networks, pages 38–44, November 2002.
[14] H. Schulzrinne, S. Casner, R. Frederick, and V. Jacob-
son. RTP: A Transport Protocol for Real-Time Applications.
RFC 1889, IETF Network Working Group, 1996.
[15] R. Sekar, A. Gupta, J. Frullo, T. Shanbhag, A. Tiwari,
H. Yang, and S. Zhou. Speciﬁcation-based anomaly de-
tection : A new approach for detecting network intrusions.
In ACM Computer and Communication Security Conference
(CCS), Washington DC, November 2002.
[16] Tipping
Future
http://www.tippingpoint.com/solutions voip.html, 2005.
Intrusion
Security.
:
White
Point.
of
Prevention
VoIP
The
paper,
[17] G. Vigna, S. Gwalani, K. Srinivasan, E. Belding-Royer, and
R. Kemmerer. An Intrusion Detection Tool for AODV-based
Ad Hoc Wireless Networks.
In Proceedings of the An-
nual Computer Security Applications Conference (ACSAC),
pages 16–27, Tucson, AZ, December 2004.
[18] G. Vigna and R. Kemmerer. NetSTAT: A Network-based
Intrusion Detection Approach. In Proceedings of the 14th
Annual Computer Security Application Conference (ACSAC
1998), Scottsdale, Arizona, December 1998.
[19] G. Vigna, W. Robertson, V. Kher, and R. Kemmerer. A
Stateful Intrusion Detection System for World-Wide Web
Servers.
In Proceedings of the Annual Computer Security
Applications Conference (ACSAC 2003), pages 34–43, Las
Vegas, NV, December 2003.
[20] Y. Wu, S. Bagchi, S. Garg, N. Singh, and T. Tsai. SCIDIVE:
A Stateful and Cross Protocol Intrusion Detection Architec-
ture for Voice-over-IP Environments. In IEEE Dependable
Systems and Networks Conference (DSN 2004), June 2004.
[21] H. Yamaguchi, K. Okano, T. Higashino, and K. Taniguchi.
Synthesis of Protocol Entities Speciﬁcations from Service
Speciﬁcations in a Petri Net Model with Registers. In 15th
International Conference on Distributed Computing Sys-
tems (ICDCS’95), May 1995.
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE