title:On the Quality of Service of Crash-Recovery Failure Detectors
author:Tiejun Ma and
Jane Hillston and
Stuart Anderson
On the Quality of Service of Crash-Recovery Failure Detectors
Tiejun Ma, Jane Hillston and Stuart Anderson
LFCS, School of Informatics, University of Edinburgh
PI:EMAIL, PI:EMAIL, PI:EMAIL
Edinburgh, UK
Abstract
In this paper, we study and model a crash-recovery tar-
get and its failure detector’s probabilistic behavior. We ex-
tend Quality of Service (QoS) metrics to measure the re-
covery detection speed and the proportion of the detected
failures of a crash-recovery failure detector. Then the im-
pact of the dependability of the crash-recovery target on
the QoS bounds for such a crash-recovery failure detector
is analysed by adopting general dependability metrics such
as MTTF and MTTR. In addition, we analyse how to esti-
mate the failure detector’s parameters to achieve the QoS
from a requirement based on Chen’s NFD-S algorithm. We
also demonstrate how to execute the conﬁguration proce-
dure of this crash-recovery failure detector. The simula-
tions are based on the revised NFD-S algorithm with vari-
ous MTTF and MTTR. The simulation results show that the
dependability of a recoverable monitored target could have
signiﬁcant impact on the QoS of such a failure detector and
match our analysis results.
Keywords: Failure Detectors, Crash-Recovery, Quality of
Service, Dependability, Monitoring.
1. Introduction
The Quality of Service of crash failure detection is a
widely studied topic [3, 4, 6, 7, 11, 14]. Most of the previ-
ous work on this topic is based on the crash-stop or fail-free
assumption and focus on how to estimate the probabilistic
message arrival time and a suitable timeout length for such
failure detectors. In this paper, we investigate and model a
crash-recovery target service (CR-TS), which has the abil-
ity to recover from the crash state. We assume that the sur-
vival time and crash time of such a target follow some prob-
ability distribution. We extend the previous QoS metrics
[3] to measure the QoS of a crash-recovery failure detec-
tion service (FDS) and analyse the QoS bounds for such a
FDS. We show how to estimate the FDS’s parameters from
a given QoS set of requirements and indicate how to esti-
mate the inputs for the FDS’s parameters estimation. Our
analysis and simulation results show that the crash and re-
covery of the monitored target will have impact on the QoS
of the FDS. For monitoring a recoverable target, especially
for the recoverable target with low reliability, our analysis is
more realistic and the FDS’s parameters estimation is more
strict.
2. Related Work
In [3] Chen et al. proposed a set of QoS metrics to mea-
sure the accuracy and speed of a failure detector. Their
model contains a pair of processes — the monitor process
and the monitored process — and there is only one crash
during the monitoring period. The analysis work is based on
two distinct stages of failure detection: the pre-crash stage,
which is a fail-free run; and the post-crash stage, which is
a crash-stop run and terminates the monitoring procedure.
In order formally to deﬁne the QoS metrics, Chen et al. de-
ﬁned the state transitions of a failure detector monitoring
a target process under the fail-free assumption [3]. At any
time, the failure detector’s state is either trust or suspect
with respect to the monitored process’s liveness. If a failure
detector moves from a trust state to a suspect state then an
S-transition occurs; if the failure detector moves from a sus-
pect state to a trust state then a T-transition occurs. Chen et
al. deﬁne the following QoS metrics for a failure detectors
in a crash-stop run in [3]:
Detection time (TD): the elapsed time from when the
monitored process crashes until the monitoring process
the ﬁnal S-
permanently suspects the monitored process:
transition occurs.
Mistake recurrence time (TMR): the time between oc-
currence of the i-th and (i + 1)-th mistakes: S-transition i
to S-transition i + 1, where i ≥ 1.
Mistake duration (TM): the time to correct a mistaken
suspect state: S-transition to T-transition.
Query accuracy probability (PA): the probability that
the state information from the failure detector is correct at
an arbitrary time: PA = 1 − E(TM)
E(TMR).
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:30:50 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007Additionally in [3], three push-style algorithms, one for
clock synchronized systems (NFD-S) and the other two for
clock unsynchronized systems (NFD-U and NFD-E) are de-
ﬁned. The authors show how to estimate the failure detector
parameters (heartbeat interval η and shift of freshness point
δ1) according to a given QoS speciﬁcation for each of the
above algorithms.
Some recent research has extended the QoS work of [3]
in a number of ways. For example, [4, 11, 14] reﬁne the
model with different probabilistic message delay and loss
estimation methods. Meanwhile, others, such as [5, 6, 7, 13]
focus on the scalability and adaptivity of crash failure de-
tection. But all of this work is based on eventual crash-stop
behavior of the monitored process or the fail-free assump-
tion.
Crash-recovery failure detectors have been considered
by several groups, e.g. [1, 8, 12]. However, each of these pa-
pers propose failure detectors to solve consensus or group
membership problems rather than focusing on the QoS of
the failure detector itself. In [1], the monitored process is
characterised as always-up, eventually-up, eventually-down
or unstable. A process which crashes and recovers inﬁnitely
many times is regarded as unstable. But crash-recovery
looping behavior exists for most systems. From the per-
spective of stochastic theory, crash-recovery behavior can
be regarded as a regenerative process, in which the proba-
bilistic live and recovery time are not zero. For example,
a web service system, in which the deployed service might
crash but can be recovered by some recovery techniques,
such as reboot or restart from the last available checkpoint,
can be regarded as a typical crash-recovery system. From
the system designer’s perspective, the recovery should be as
quick as possible. However, from the failure detection per-
spective, in order to detect the occurrence of such a failure,
the failure detector expects that the recovery has a reason-
able duration.
In [10], a preliminary study of the QoS of the crash-
recovery failure detector (FDS) is presented. A crash-
recovery target service (CR-TS) is modeled as a stochas-
tic process, which can be regarded as an alternating re-
newal process with the random variable Xa(t) presenting
the elapsed time from a recovery time to the next crash time
and the random variable Xc(t) presenting the elapsed time
from a crash time to the next recovery time (see Fig 1).
General dependability metrics such as reliability, availabil-
ity and consistency are adopted to characterize the behav-
iors of the CR-TS. In [10], the reliability is captured by the
Mean Time To Failure (MTTF), the availability is captured
by the Mean Time To Failure over the Mean Time Between
Failure ( MTTF
MTBF), the consistency is captured by the Mean
Time To Repair (MTTR). Note that E(Xa(t)) = MTTF,
E(Xc(t)) = MTTR and E(Xa(t) + Xc(t)) = MTBF.
1δ is replaced by timeout in this paper.
Figure 1. Crash-Recovery Service Modeling
In [10] it is concluded that in steady state, observing one
MTBF period is enough to capture the crash-recovery fail-
ure detection characteristics of a failure detection pair.
3. QoS of the Crash-Recovery FDS
3.1. Analysis of the Crash-Recovery FDS
Let SA ∈ Sa represent the accuracy of the FDS’s cur-
rent output value, where Sa := {Accurate, Mistake}. Here
Accurate means the current FDS’s output value presents
the CR-TS’s current state accurately. Mistake means the
FDS’s output value presents the CR-TS’s current state in-
accurately. Let SCR-TS ∈ S represent the current state of
the CR-TS, where S :={Alive, Crash}. SFDS-O ∈ Ss rep-
resents the current output value of the FDS, where Ss :=
{Trust, Suspect} is the state space of the suspicion levels of
the FDS. If each of Trust, Alive and Accurate is regarded as
True and each of Suspect, Crash, and Mistake as False, the
FDS’s current accuracy can be derived from the following
deduction:
SFDS-O (XNOR) SCR-TS ⇒ SA
This deduction can be justiﬁed by observing the fact that
if the value of SFDS-O and SCR-TS are the same then the value
of SA is True, because the FDS’s output value presents the
CR-TS’s state accurately. If the value of SFDS-O and SCR-TS
are different then the value of SA will be False. Thus the
value of SA is the result of an Exclusive-NOR operation be-
tween the value of SFDS-O and SCR-TS.
For a fail-free run (MTTF → +∞) or a crash-stop run
(MTTR → +∞), the CR-TS’s current state SCR-TS is al-
ways Alive (for the time up to the crash) and it is easy to
deduce the FDS’s accuracy SA directly from the FDS’s cur-
rent state SFDS-O. However, for a crash-recovery run, since
the CR-TS could fail or recover at arbitrary time, SA can-
not be deduced solely from SFDS-O. Therefore, measuring
the accuracy of a FDS for a CR-TS is more complex. In
addition, compared with a fail-free or crash-stop run, there
are more mistake types in a crash-recovery run. In previous
work, such as [3, 7, 11, 13, 14], only the mistakes caused
by the message transmission behaviors (message delay and
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:30:50 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007(a) T 1
M
(b) T 2
M
(c) T 3
M
(d) T 4
M
Figure 2. The Analysis of Possible TM in a Crash-Recovery Run
loss) are considered. Fig. 2 shows the four types of mistakes
which could occur within a crash-recovery run, and their as-
M (Fig 2(a)) represents the duration of
sociated durations. T 1
a mistake caused by a message delay. T 2
M (Fig 2(b)) repre-
sents the duration of a mistake caused by a message loss.
M (Fig 2(c)) represents the duration of a mistake caused
T 3
by CR-TS’s crash and T 4
M (Fig 2(d)) represents the duration
of mistakes caused by CR-TS’s recovery. Moreover, since
the errors that may occur in a crash-recovery run are more
complex, the QoS of such systems may exhibit quite differ-
ent characteristics.
3.2. QoS Metrics Extension for the Crash-
Recovery FDS
For a crash-recovery FDS, in addition to the QoS metrics
introduced in [3] (TD, TM, TMR, PA), we propose some new
QoS metrics. In order to measure the speed with which a
FDS can discover a recovery of the CR-TS, we deﬁne:
Recovery detection time (TDR): represents the time that
elapses from CR-TS’s recovery time to the time when the
FDS discovers the recovery. If the recovery is not detected,
then TDR = +∞.
Since in a crash-recovery run there is no eventual behav-
ior of a CR-TS, a fast recovery could make a failure unde-
tectable by a FDS. Under such circumstances, the complete-
ness property of a failure detector proposed in [2] cannot be
always satisﬁed. In order to reﬂect this situation, we reﬁne
the deﬁnition of completeness as follows:
• Strong completeness: every crash failure of a recover-
able process will be detected.
• Weak completeness: a proportion of crash failures of
recoverable process will be detected, satisfying a spec-
iﬁed requirement.
Thus, in order to measure the completeness of a crash-
recovery failure detector, we propose another new QoS met-
ric:
Detected failure proportion (RDF): the ratio of the de-
tected failures over the occurred failures (0 ≤ RDF ≤ 1).
When no crash failure is detected, RDF = 0. When all crash
failures occurrences are detected, RDF = 1. The strong
completeness property of a FDS’s requires that E(RDF) =
1. The weak completeness property requires E(RDF) ≥
RL
DF, where RL
DF is the required lower bound on the detected
failure proportion and 0 < RL
DF < 1.
Overall, the QoS for a crash-recovery FDS, can be cap-
tured by PA, TM, TMR, TD, TDR, RDF.
4. The Analysis of the NFD-S Algorithm in a
Crash-Recovery Run
4.1. System Model
We consider a distributed system model with two ser-
vices, one FDS and one CR-TS, distributed over a wide-
area network. The FDS and the CR-TS are connected by
an unreliable communication channel. Liveness messages
are transmitted from the CR-TS to the FDS through the
channel. The QoS of the communication through a channel
can be measured by the average message delay (E(D)), the
probability of message loss (pL) and the average consecu-
tive message loss-length (E(XL(t))) (i.e. the average num-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:30:50 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007ber of consecutive messages lost). We assume the commu-
nication channel will not create or duplicate liveness mes-
sages, but the messages might be lost or inﬁnitely delayed
during transmission (the same as the probabilistic network
model in [3]). The CR-TS can fail by crashing but can be re-
paired and restart to run again after some repair time, behav-
ing as a crash-recovery model. The drift of the local clocks
of the FDS and the CR-TS are small enough to be ignored
and their local clocks are synchronized to be regarded as
a clock synchronized system (e.g., using the Network Time
Protocol as in [4]). The failure detection algorithm we adopt
is therefore the NFD-S algorithm proposed in [3].
4.2. QoS Bounds Analysis
In [10], it is shown that in order to study the steady state
behavior of a CR-TS throughout its lifetime, we only need
to observe the time period between two consecutive regen-
eration points. Fig. 3 shows the relationship between a FDS
and a CR-TS on the interval t ∈ [t0, t3), where both t0
and t3 are regeneration points. Obviously, the mean time
between t0 and t3 is MTBF. We split [t0, t3) into [t0, t1),
[t1, t2), [t2, t3). Here t0 and t3, are the time at which the
CR-TS recovers; t1 is the time when the FDS detects the
recovery; t2 is the time of the next CR-TS’s crash. With re-
spect to messages, σs is the liveness message sending time,
i.e. the sending time of the ﬁrst message received by the
FDS after a recovery; σi is the sending time of a liveness
message after σs before the CR-TS’s crash; η is the mes-
sage sending interval; τs is the ﬁrst decision time (the ﬁrst
liveness message receiving time) after recovery; τd is the
failure detection time.
In a crash-recovery run, the state of a CR-TS can switch
between Alive and Crash. Let tm
r be the recovery time of the
m-th MTBF period (m is a positive integer). The following
deﬁnitions are extensions of [3] Deﬁnition 1.
Deﬁnition 4.1. For the fail-free duration [t1, t2) within
each MTBF period: