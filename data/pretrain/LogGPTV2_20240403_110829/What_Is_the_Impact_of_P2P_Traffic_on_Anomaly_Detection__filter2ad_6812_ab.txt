net [1]. During our trace collection for BitTorrent protocol, we used multiple torrent
ﬁles for transferring data from/to multiple geographical locations for each torrent
session. Multiple clients including Vuze, Flashget, µTorrent, BitTorrent, Deluge,
BitComet and Halite were used to introduce real-world diversity in the dataset
as diﬀerent clients might had diﬀerent behavior. For eMule sessions two options
related to protocol obfuscation and communication with obfuscated connections
only (“Allow obfuscated connections only”), were enabled in the client to ensure
logging of encrypted traﬃc. Similarly, encryption was enabled for the torrent ses-
sions. Statistics for the p2p ﬁle sharing applications’ traﬃc are given in Table 1.
3.3 Attack Traﬃc
For attack traﬃc, we launch port scans (TCP SYN), DoS (TCP SYN) and
fraggle (UDP ﬂood) simultaneously from three end hosts in our research lab.
The DoS attacks was launched on two servers under our administration with
public IP addresses. Each attack was launched for a period of ﬁve minutes with
spoofed IP address. For every attack type, three low-rate ({0.1, 1, 10} pkts/sec)
and two high-rate ({100, 1000} pkts/sec) instances were launched. The attack
characteristics for each attack are shown in Table 2.
4 Investigating the Torrent Eﬀect
We now embark on ﬁnding answers to the questions that were raised in the
introduction. To this end, we evaluate the anomaly detectors on datasets with
What Is the Impact of P2P Traﬃc on Anomaly Detection?
7
)
%
(
e
t
a
R
n
o
i
t
c
e
t
e
D
e
g
a
r
e
v
A
100
90
80
70
60
50
40
30
20
10
0
0
20
Rate Limiting (without p2p)
Rate Limiting (with p2p)
TRW−CB (without p2p)
TRW−CB (with p2p)
MaxEnt (without p2p)
MaxEnt (with p2p)
NETAD (without p2p)
NETAD (with p2p)
40
False Positives (%)
60
80
100
Fig. 2. ROC results to quantify the impact of p2p traﬃc on anomaly detec-
tion accuracy; each ROC point is averaged over 3(attacks) × 3(instances/attack) ×
5(rates/instance) = 45 attack windows of 5 minutes each.
varying proportions of attack and p2p traﬃc. In this section, we perform the
evaluations to ﬁnd out the impact of p2p traﬃc on anomaly detection accuracy;
its correlation with high- and low-rate attacks; its aﬀect on diﬀerent attack
classes and whether p2p traﬃc should be used to train an anomaly detector. We
defer the solution to the torrent eﬀect to Section 5.
4.1 How Much Degradation Does p2p Traﬃc Induce in Anomaly
Detection Accuracy?
We ﬁrst investigate the impact of p2p traﬃc on the anomaly detectors’ detec-
tion and false alarm rates. Figure 2 plots the Receiver Operating Characteristic
(ROC) curves of the anomaly detectors on the dataset with p2p traﬃc and on
the same dataset with p2p traﬃc removed from it. The anomaly detectors in
this case were trained only on non-p2p traﬃc. With the introduction of p2p
traﬃc, the detection rates of all anomaly detectors drop and the false positive
rates increase. This behavior is observed because of the similarities between p2p
and malicious traﬃc features, such as a large number of connection attempts,
a large number of failed connections, and the use of unprivileged ports. Fig-
ure 2 shows that Maximum Entropy and TRW-CB fail miserably (up to 30%
reduction in detection rate and up to 40% increase in false positives) when they
operate on the dataset with p2p traﬃc. On the other hand, the detection rates of
Rate Limiting and NETAD never degrade by more than 20% and 10%, respec-
tively. Similarly, for Rate Limiting and NETAD, the average false positive rate
increase remains around 10%. Deferring further discussion on relative degrada-
tion for each anomaly detector to the next section, we deduce from Figure 2
that the accuracies of all anomaly detectors degrade considerably due to p2p
traﬃc.
8
I.U. Haq et al.
4.2 Which Anomaly Detection Metrics/Principles Are More
Sensitive to p2p Traﬃc and Why?
As we discussed in Section 2, we chose a diverse set of anomaly detectors which
employ varying traﬃc features and operate on assorted detection principles. We
now analyze the sensitivity of each detector to p2p traﬃc with a motivation
to identify design guidelines to make these detectors insensitive to background
traﬃc.
Figure 2 shows that NETAD provides the best overall accuracy and sustains
it under p2p traﬃc. This is surprising because NETAD is in essence a rule-
based detector and previous studies have shown that such algorithms fail in
many attack scenarios [35,36]. Further investigation revealed that the graceful
accuracy degradation of NETAD is mainly because of two rules that it uses to
classify normal traﬃc: 1) All UDP traﬃc on higher ports (> 1023); 2) TCP
data starting after 100 bytes. Both of these rules are satisﬁed by most of the
p2p clients because the communication with trackers and peers takes place on
higher ports, and TCP connections with each peer requires a sequence of TCP
control packet exchanges to establish the number and sizes of ﬁle chunks to be
downloaded. Due to these rules, NETAD continued to detect most of the p2p
traﬃc as non-malicious.
While both Rate Limiting and TRW-CB use outgoing connections as the key
detection feature, Figure 2 shows that Rate Limiting is less sensitive to p2p
traﬃc as compared to TRW-CB. We noticed that the low sensitivity of Rate
Limiting is because it operates on a long-term proﬁle of traﬃc by keeping new
connections in a queue. P2P applications establish a large number of connections,
but in a short span of time during bootstrap. Therefore, Rate Limiting’s queue
threshold was not exceeded during this short-term connection activity period.
On the other hand, the aﬀect of p2p bootstrapping becomes very pronounced
for TRW-CB which keeps changing its score with each individual connection
attempt. Despite the low degradation observed in Rate Limiting, we note that
the Rate Limiting detector generally provides the worst accuracy among all the
evaluated detectors. Therefore, while its relative accuracy degradation in the
presence of p2p traﬃc is low, its overall accuracy is considerably lower than
TRW-CB; at 20% false positive rate, TRW-CB gives approximately 26% better
detection rate than Rate Limiting. Hence, TRW-CB, despite having a larger
accuracy degradation, should still be the preferred choice of portscan anomaly
detector.
The accuracy degradation observed for Maximum Entropy is due to its re-
liance on a baseline distribution of destination port numbers. P2P peers generally
use random port numbers which result in a distribution approaching uniformity
which is incorrectly classiﬁed as malicious by the Maximum Entropy detector.
4.3 Does the Aggressive Nature of p2p Traﬃc Dominate Some/All
Attack Classes and High-/Low-Rate Attacks?
We now move to the question about whether or not p2p traﬃc has the same
impact on diﬀerent attack classes and rates. To address this question, Figure 3
What Is the Impact of P2P Traﬃc on Anomaly Detection?
9
100
Rate Limiting (without p2p)
Rate Limiting (with p2p)
TRW−CB (without p2p)
TRW−CB (with p2p)
MaxEnt (without p2p)
MaxEnt (with p2p)
NETAD (without p2p)
NETAD (with p2p)
20
40
60
80
100
False Positives (%)
)
%
(
e
t
a
R
n
o
i
t
c
e
t
e
D
90
80
70
60
50
40
30
20
10
0
0
20
Rate Limiting (without p2p)
Rate Limiting (with p2p)
TRW−CB (without p2p)
TRW−CB (with p2p)
MaxEnt (without p2p)
MaxEnt (with p2p)
NETAD (without p2p)
NETAD (with p2p)
40
60
80
100
False Positives (%)
(a) Portscans (high-rate)
(b) Portscans (low-rate)
100
)
%
(
e
t
a
R
n
o
i
t
c
e
e
D
t
90
80
70
60
50
40
30
20
10
0
0
20
Rate Limiting (without p2p)
Rate Limiting (with p2p)
MaxEnt (without p2p)
MaxEnt (with p2p)
NETAD (without p2p)
NETAD (with p2p)
40
60
80
100
False Positives (%)
Rate Limiting (without p2p)
Rate Limiting (with p2p)
MaxEnt (without p2p)
MaxEnt (with p2p)
NETAD (without p2p)
NETAD (with p2p)
20
40
60
80
100
False Positives (%)
(c) TCP Flood (high-rate)
(d) TCP Flood (low-rate)
100
)
%
(
e
t
a
R
n
o
i
t
c
e
t
e
D
90
80
70
60
50
40
30
20
10
0
0
Rate Limiting (without p2p)
Rate Limiting (with p2p)
MaxEnt (without p2p)
MaxEnt (with p2p)
NETAD (without p2p)
NETAD (with p2p)
20
40
60
80
100
False Positives (%)
Rate Limiting (without p2p)
Rate Limiting (with p2p)
MaxEnt (without p2p)
MaxEnt (with p2p)