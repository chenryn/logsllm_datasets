Information can ﬂow to
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:08:41 UTC from IEEE Xplore.  Restrictions apply. 
a VAR or variable parameter from other param-
eters, global constants, and literals. Given a
method of assigning information labels to these
items, it is necessary to show that the ﬂows iden-
tiﬁed conform to the stated policy. Only if we fail
to show this are we interested in the details of the
ﬂow paths.
It is clear from the description that the analysis used in
the optimizer to identify ghosts can be applied to detect the
kind of resource sharing or information ﬂow dependencies
that allow the construction of covert channels.
4. The Gypsy Information Flow Abstraction
Information ﬂows of the kind we are concerned with vi-
olate the moderately strong typing that the Gypsy seman-
tics imposed.
In order to make a tool that could operate
within the semantic framework imposed by the language, it
is necessary to play some tricks. The abstract proposed the
following mechanism.
In order to develop information ﬂow theories
in the Gypsy context, we have developed an ab-
straction, which allows us to capture the infor-
mation ﬂow of a Gypsy program. The abstrac-
tion consists of a Gypsy scope, which deﬁnes an
abstract type called INFORMATION and a set of
functions, and procedures, which implement op-
erations on the type. Two properties of an ob-
ject of this type are of interest for proving prop-
erties about information ﬂows. These are the in-
formation label and the information content of the
object. The label is an element from the associ-
ated information policy scope. The only restric-
tion placed on the label is that the policy must be
stated in terms of relationships among members
of the value set of the label type. The content of
the object is a set of values from the label type.
The label of an object is ﬁxed at the time the ob-
ject is instantiated. The content is a function of
the operations, which have been performed on the
object. The abstraction provides two operations
to support information ﬂow modeling. The ﬁrst
is an information merging function, which returns
and object whose contents is the union of the con-
tents of its arguments. The second is an assign-
ment procedure, which replaces the contents of
its output parameter with the contents of its input
parameter. These two routines are sufﬁcient to
model information ﬂows obtained from the ﬂow
analysis.
The tool uses this abstraction and the results
of the ﬂow analysis to create an information ﬂow
analogue of the program being analyzed. A set of
routines comprising the interface for which ﬂow
proofs are required is identiﬁed. For each rou-
tine in the set, a ﬂow analogue consisting of ﬂow
merge and assignment operations capturing the
ﬂows identiﬁed in the analysis stage is created.
All parameters, constants and literals of interest
from a ﬂow standpoint are replaced with objects
of the information type. Constant functions may
be used to allow assertions to be made about the
labels and contents of constants and literals.
The intent of this abstraction was to use the internal
mechanisms of the GVE, i.e. the veriﬁcation condition gen-
erator and the theorem prover to generate and prove a set
of formulae that would show a given Gypsy program to be
secure in a MLS sense. Such formulae require that the in-
formation ﬂows as well as the sensitivity of the information
containing objects be represented.
5. Policies and a Simple Tool
As noted above, earlier tools contained a “builtin” MLS
security policy model that we found somewhat constrain-
ing. We were starting to consider covert channel analysis
as a mechanism for looking at other ﬂow related security
issues such as “red/black” separation in cryptographic sys-
tems and we wanted the ﬂexibility to introduce any appro-
priate policy formulation. The abstract proposed the follow-
ing mechanisms:
An information ﬂow policy is represented by
a scope, which contains type, constant, and rou-
tine declarations, which deﬁne the policy. At a
minimum, a policy scope deﬁnes a type whose
value set is used to provide labels and contents
sets for information objects and a function, which
is used to determine if the relationship between
the label and contents of an object is in confor-
mance with the policy. The policy may contain
much more. In particular, lemmas and functions
may be required to show that the label type ex-
hibits desired properties. It may be necessary to
deﬁne a comparison function for the label type
and to provide support to prove that this function
has the properties required of it for policy im-
plementation. This approach has the advantage
that the policy statement is expressed in the same
metaphor as the program and can be subjected to
the same sorts of analysis, proofs, and review as
the programs to which it applies. The policy and
any proofs of its properties, which are indepen-
dent of its application, can be reused in many pro-
grams.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:08:41 UTC from IEEE Xplore.  Restrictions apply. 
Given that some of the proof work is extremely tedious,
the ability to reuse components such as a security policy
model is highly desirable. Because the security label type
and comparison function are user deﬁned, the user has an
obligation to ensure that, for example, the label and function
deﬁne a lattice, if a Bell and LaPadula style of policy is
being used. This requires that the existence of label values
representing Least Upper and Greatest Lower Bounds be
demonstrated for all values of the label type and that the
comparison function be shown to be reﬂexive, transitive,
and anti-symmetric.
Because Gypsy was intended as a general purpose pro-
gramming language as well as a speciﬁcation language, it
had no inherent TCB or reference monitor model. Typically,
TCBs are modeled as ﬁnite state automata that respond to
an input by (possibly) modifying a global state, and (possi-
bly) returning some value that is a function of the state and
the input. Although one can model such a system in Gypsy,
the model is not built in and the lack of global variables in
the language forces the state to be passed about as a var pa-
rameter to all the interface routines. This complicates the
tool as represented in the abstract.
As noted above, information ﬂows out of a
Gypsy program only through its VAR parame-
ters. In Particular, we can analyze the informa-
tion ﬂow behavior of an entire Gypsy program, no
matter how large or complex, by performing the
ﬂow analysis discussed above and then proving
that the ﬂows among the parameters to the main
routine of the program conform to our policy. Un-
fortunately, this model is often too simple for re-
alistic applications. In many of the systems for
which this type of analysis is required, the code
to be analyzed serves as part of a larger system,
and the interface of the secure portion, the trusted
computing base or TCB, is more complex. In or-
der to capture this behavior in Gypsy, we deﬁne
the notion of a TCB interface set. The TCB is
more complex. In order to capture this behavior
in Gypsy, we deﬁne the notion of a TCB inter-
face set. The TCB interface set contains exactly
those routines of the TCB, which are intended to
be called by routines outside the TCB. The TCB
consists of all routines reachable from the TCB
interface set. Having analyzed the ﬂows within
the TCB, it remains to show that the ﬂows among
the parameters of the interface set routines satisfy
the ﬂow Policy. This is done by creating the ﬂow
analogue routines, specifying and proving them.
Use of the information ﬂow tool consists of the
following Steps:
1. Deﬁne or select a previously deﬁned infor-
mation ﬂow policy expressed as a Gypsy
theory, i.e. a set of Gypsy functions, con-
stants, lemmas, and data types.
2. Identify the TCB interface set.
3. Perform information ﬂow analysis for the
TCB.
4. Construct information ﬂow analogues for
each routine in the TCB interface set using
the information ﬂows from the previous set.
5. Provide information policy speciﬁcations
for the routines of the TCB interface set
and for literals or constants appearing in the
ﬂows to the parameters of the interface set.
6. Generate veriﬁcation conditions for the ﬂow
abstraction routines
7. Prove the VCs
If the program satisﬁes the policy,
the proofs
should be straightforward. Unfortunately, many
programs do not satisfy their ﬂow policies. Rea-
sons for this and an improved tool are discussed
below.
After some discussion as to the reasons why the pro-
posed tool would be superior to other approaches (elided
here), the abstract concluded:
Many programs for which information ﬂow
proofs are desired will not conform to the stated
policy for a variety of reasons. Contrary infor-
mation ﬂows may exist through blockage or con-
trol variable information transfer. Overt chan-
nels [5] may be deliberately established to allow
a trusted individual, such as the System Security
Ofﬁcer, to perform activities such as downgrad-
ing which, though necessary, violate the security
policy. In many cases, the program is acceptable
in spite of the contrary ﬂows, but showing this re-
quires identiﬁcation and evaluation of the paths
involved. The primary disadvantage of the simple
tool discussed here is the fact that it provides little
or no help in locating the precise source and na-
ture of ﬂows which are in violation of the policy
under consideration. This is because the abstrac-
tion used collapses all paths for a routine to a sin-
gle set of information assignments. In many cases
it is possible to determine the source of violations
with a simple manual inspection of the code in-
volved; however, this may be difﬁcult or impos-
sible for large programs with numerous paths, es-
pecially if some of the paths involve implicit ex-
ceptions raised by Gypsy operators. We feel that
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:08:41 UTC from IEEE Xplore.  Restrictions apply. 
a tool, which overcomes most of these disadvan-
tages, can be built should there be sufﬁcient inter-
est in the security community. Such a tool would
retain the path structure of the ﬂow analysis and
allow identiﬁcation of the offending paths in the
corresponding Gypsy version of the program.
We also feel that techniques similar to those
used in the Gypsy tools could be applied to Ada.
A prerequisite would be the availability of an Ada
based veriﬁcation system.
The abstract was, in effect, a “ﬁshing expedition.” We
knew that a Covert Channel Analysis facility was essen-
tial if Gypsy was to be used for specifying high assurance
TCBs. At the time the abstract was written, we had not
identiﬁed a funding source. The initial development of the
GVE had, in fact, been “bootlegged” under funding that was
intended to produce security proofs, not a veriﬁcation sys-
tem. Several months after the abstract appeared, funding
materialized, I left RTI, and joined Computational Logic to
develop the ﬁrst of two information ﬂow based covert chan-
nel analysis tools.
6. The SRM Tool
The ﬁrst of the Gypsy covert channel analysis tools used
the dependency analyzer to produce a Shared Resource Ma-
trix (SRM) in the style of Kemmerer[13]. The work was
funded by TRW in support of an unnamed customer. At the
time the tool was started, there was some concern that the
quantity of formulae produced by the SRI tool and the dif-
ﬁculties involved in either proving them or explaining their
unprovability were excessive and that a simpler approach
might be preferred. The SRM is an intuitive and elegant
way of presenting information ﬂow information in a way
that helps a skilled analyst understand the system and iden-
tify potential covert channels. Flow information extracted
from the optimized had been used to construct an SRM of
the Secure Ada Target (SAT)2 abstract model[12] and we
were familiar with the form and its use.
6.1. The Shared Resource Matrix Methodology
The SRM methodology [13] was developed as a tool for
ﬁnding both storage and timing channels in a variety of sys-
tem description paradigms. The reference cited above ap-
plies the technique to a speciﬁcation characterized in En-
glish, in the formal speciﬁcation language Ina Jo, and as
Pascal code. The SRM is an abstraction of the system be-
havior that reduces the system description to a simple ma-
trix. The horizontal axis of the matrix lists the operations of
2Later known as LOCK.
the system. The vertical axis lists the system resources that
are shared among users and manipulated by the operations.
Each entry in the matrix may have one of four values:
1. R-indicating that the operation references the resource
in some way.
2. M-indicating that the operation modiﬁes the resource.
3. R, M-indicating that the operation both references and
modiﬁes the resource.
4. Blank-indicating that the operation does neither.
As originally formulated, the SRM does not distinguish
between conditional and unconditional references and/or
modiﬁcations, but merely indicates the potential for such
actions.
6.2. Extensions to the SRM
The Gypsy Shared Resource Matrix tool extends the
SRM methodology in several ways. These extensions serve
to reﬁne the technique by eliminating apparent ﬂows that
are artifacts of a compressed presentation format, and by
explicitly identifying ﬂows to and from the user. They are
the result of experience with manual application of the tech-
nique as well as discussions with other researchers in the
ﬁeld.
6.2.1 User Flows
Whenever the user invokes a TCB interface routine that al-
ters the internal state of the system, an implicit or explicit
transfer of information from the user to the state occurs. On
the other hand, a TCB call may or may not transfer infor-
mation from the state to the caller. In Gypsy it is possible to
specify TCB interface routines in a way such that it is not
possible for the caller to distinguish between a successful or
unsuccessful completion. In these cases no information is
returned to the user.
To record transfers to and from users, the basic SRM is
extended by adding two rows at the bottom. These are la-
beled “user in” and “user out”. The “user in” row always
contains Rs, indicating the unconditional transfer of infor-
mation from the user to the state. The “user out” row con-
tains an M if the operation returns information to the user.
6.2.2 Operation Splitting
The resolution of the SRM can be improved in several ways.
Consider the following fragment of code taken from a rou-