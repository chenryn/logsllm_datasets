### Information Flow and Gypsy Abstraction

Information can flow to a variable (VAR) or a parameter from other parameters, global constants, and literals. Given a method for assigning information labels to these items, it is necessary to ensure that the identified flows conform to the stated policy. If the flows do not conform, we need to examine the details of the flow paths.

The analysis used in the optimizer to identify "ghosts" can also be applied to detect resource sharing or information flow dependencies that allow the construction of covert channels.

### The Gypsy Information Flow Abstraction

The information flows we are concerned with violate the moderately strong typing imposed by Gypsy semantics. To develop an information flow theory within the Gypsy context, we have created an abstraction that captures the information flow of a Gypsy program. This abstraction includes a Gypsy scope defining an abstract type called `INFORMATION` and a set of functions and procedures that implement operations on this type.

Two properties of an object of this type are crucial for proving properties about information flows: the information label and the information content. The label is an element from the associated information policy scope, and the only restriction is that the policy must be stated in terms of relationships among members of the value set of the label type. The content is a set of values from the label type. The label of an object is fixed at instantiation, while the content is a function of the operations performed on the object.

The abstraction provides two key operations:
1. **Information Merging Function**: Returns an object whose contents are the union of the contents of its arguments.
2. **Assignment Procedure**: Replaces the contents of its output parameter with the contents of its input parameter.

These operations are sufficient to model information flows derived from the flow analysis.

### Tool Implementation

The tool uses this abstraction and the results of the flow analysis to create an information flow analogue of the program being analyzed. A set of routines comprising the interface for which flow proofs are required is identified. For each routine, a flow analogue consisting of flow merge and assignment operations is created, capturing the flows identified in the analysis stage. Parameters, constants, and literals of interest from a flow standpoint are replaced with objects of the `INFORMATION` type. Constant functions may be used to make assertions about the labels and contents of constants and literals.

The intent of this abstraction is to use the internal mechanisms of the GVE (verification condition generator and theorem prover) to generate and prove a set of formulae that show a given Gypsy program to be secure in a Multi-Level Security (MLS) sense. Such formulae require that both the information flows and the sensitivity of the information-containing objects be represented.

### Policies and a Simple Tool

Earlier tools contained a "built-in" MLS security policy model that was somewhat constraining. We wanted the flexibility to introduce any appropriate policy formulation. The proposed mechanism represents an information flow policy as a scope containing type, constant, and routine declarations. At a minimum, a policy scope defines a type whose value set provides labels and content sets for information objects and a function to determine if the relationship between the label and content of an object conforms to the policy.

This approach has the advantage that the policy statement is expressed in the same metaphor as the program and can be subjected to the same types of analysis, proofs, and reviews. The policy and any proofs of its properties can be reused in many programs.

Given that some proof work is extremely tedious, the ability to reuse components such as a security policy model is highly desirable. Users must ensure that the security label type and comparison function define a lattice, if a Bell and LaPadula style of policy is being used. This requires demonstrating the existence of label values representing Least Upper and Greatest Lower Bounds and showing that the comparison function is reflexive, transitive, and anti-symmetric.

### Trusted Computing Base (TCB) and Interface Set

Gypsy, being a general-purpose programming language, does not have an inherent TCB or reference monitor model. Typically, TCBs are modeled as finite state automata, but in Gypsy, the lack of global variables forces the state to be passed as a VAR parameter to all interface routines, complicating the tool.

Information flows out of a Gypsy program only through its VAR parameters. By performing flow analysis and proving that the flows among the parameters of the main routine conform to the policy, we can analyze the information flow behavior of an entire Gypsy program. However, this model is often too simple for realistic applications. In many systems, the code to be analyzed is part of a larger system, and the TCB interface is more complex.

To capture this behavior in Gypsy, we define the notion of a TCB interface set, which contains exactly those routines of the TCB intended to be called by routines outside the TCB. After analyzing the flows within the TCB, it remains to show that the flows among the parameters of the interface set routines satisfy the flow policy. This is done by creating flow analogue routines, specifying, and proving them.

### Using the Information Flow Tool

Using the information flow tool involves the following steps:
1. Define or select a previously defined information flow policy expressed as a Gypsy theory.
2. Identify the TCB interface set.
3. Perform information flow analysis for the TCB.
4. Construct information flow analogues for each routine in the TCB interface set using the information flows from the previous step.
5. Provide information policy specifications for the routines of the TCB interface set and for literals or constants appearing in the flows to the parameters of the interface set.
6. Generate verification conditions for the flow abstraction routines.
7. Prove the verification conditions (VCs).

If the program satisfies the policy, the proofs should be straightforward. Unfortunately, many programs do not satisfy their flow policies due to various reasons, such as contrary information flows, overt channels, or necessary but policy-violating activities like downgrading by a trusted individual.

### Improved Tool and SRM Methodology

The primary disadvantage of the simple tool is that it provides little help in locating the precise source and nature of flows that violate the policy. A more advanced tool could retain the path structure of the flow analysis and allow identification of the offending paths in the corresponding Gypsy version of the program.

Techniques similar to those used in the Gypsy tools could be applied to Ada, provided an Ada-based verification system is available.

### The SRM Tool

The first Gypsy covert channel analysis tool used the dependency analyzer to produce a Shared Resource Matrix (SRM) in the style of Kemmerer. The SRM is an intuitive and elegant way of presenting information flow information, helping skilled analysts understand the system and identify potential covert channels.

#### SRM Methodology

The SRM methodology was developed to find both storage and timing channels in various system description paradigms. The SRM reduces the system description to a simple matrix, where the horizontal axis lists the system operations, and the vertical axis lists the shared system resources. Each entry in the matrix can have one of four values:
1. **R**: Indicates that the operation references the resource.
2. **M**: Indicates that the operation modifies the resource.
3. **R, M**: Indicates that the operation both references and modifies the resource.
4. **Blank**: Indicates that the operation does neither.

#### Extensions to the SRM

The Gypsy SRM tool extends the SRM methodology in several ways:
- **User Flows**: Adds two rows, "user in" and "user out," to record transfers to and from users.
- **Operation Splitting**: Improves the resolution of the SRM by splitting operations to provide more detailed information.

These extensions eliminate apparent flows that are artifacts of a compressed presentation format and explicitly identify flows to and from the user, based on experience and discussions with other researchers.

By implementing these extensions, the SRM tool provides a more refined and useful tool for identifying and analyzing information flows in Gypsy programs.