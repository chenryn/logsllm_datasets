        sub_C725E0("%s inputn");
        exit(0);
      }
      Wow64Process = 0;
      IsWow64Process((HANDLE)0xFFFFFFFF, &Wow64Process);
      if ( !Wow64Process ) //检测是否支持64位程序
      {
        sub_C725E0("System not supported ! Run me on 64bits Windows OSn");
        exit(0);
      }
      if ( strlen(argv[1]) != 32 )
        sub_C721C0();
      sub_C721E0();
      v4 = GetProcessHeap();
      lpParameter = HeapAlloc(v4, 8u, 0x18u);
      v5 = GetProcessHeap();
      v15 = HeapAlloc(v5, 8u, 0x18u);
      v6 = GetProcessHeap();
      v14 = HeapAlloc(v6, 8u, 0x18u);
      v7 = GetProcessHeap();
      v13 = HeapAlloc(v7, 8u, 0x18u);
      *lpParameter = 0xFAB; //初始化多线程参数1
      lpParameter[1] = 0;
      v8 = argv[1];
      lpParameter[2] = *((_DWORD *)v8 + 2);
      lpParameter[3] = *((_DWORD *)v8 + 3);
      Handles = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)StartAddress, lpParameter, 0, &ThreadId); //启动多线程1
      *v14 = 0xF0F0F0F0; //初始化多线程参数2
      v14[1] = 0xF0F0F0F0;
      v9 = argv[1];
      v14[2] = *((_DWORD *)v9 + 4);
      v14[3] = *((_DWORD *)v9 + 5);
      v23 = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)StartAddress, v14, 0, (LPDWORD)&v19);//启动多线程2
      *v13 = 0xF06B3430; //初始化多线程参数3
      v13[1] = 0x136D7374;
      v10 = argv[1];
      v13[2] = *(_DWORD *)v10;
      v13[3] = *((_DWORD *)v10 + 1);
      v24 = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)StartAddress, v13, 0, (LPDWORD)&v20);//启动多线程3
      *v15 = 0x43434343; //初始化多线程参数4
      v15[1] = 0x434343;
      v11 = argv[1];
      v15[2] = *((_DWORD *)v11 + 6);
      v15[3] = *((_DWORD *)v11 + 7);
      v25 = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)StartAddress, v15, 0, (LPDWORD)&v21);//启动多线程4
      WaitForMultipleObjects(4u, &Handles, 1, 0xFFFFFFFF); //线程通过
      if ( lpParameter[4] != 0x7E352B1F || lpParameter[5] != 0x9B04D2D3 ) //判断线程1结果
        sub_C721C0(); 
      if ( v15[4] != 0x4D95D40C || v15[5] != 0xE14496F7 ) //判断线程4结果
        sub_C721C0();
      if ( v14[4] != 0x2E4CB743 || v14[5] != 0xA51E28EE ) //判断线程3结果
        sub_C721C0();
      if ( v13[4] != 1434694267 || v13[5] != 1991371616 ) //判断线程2结果
        sub_C721C0();
      sub_C71320();
      return 0;
    }
程序将32个字符的输入放入4个线程参数中，启动4个线程，每个线程都是调用同一个函数，只是参数不同。
    .text:00C71330 ; DWORD __stdcall StartAddress(LPVOID lpThreadParameter)
    .text:00C71330 StartAddress    proc far                ; DATA XREF: _main+191↓o
    .text:00C71330                                         ; _main+1EC↓o ...
    .text:00C71330
    .text:00C71330 var_18          = dword ptr -18h
    .text:00C71330 var_4           = dword ptr -4
    .text:00C71330 lpThreadParameter= dword ptr  0Ch
    .text:00C71330
    .text:00C71330                 push    ebp
    .text:00C71331                 mov     ebp, esp
    .text:00C71333                 push    ecx
    .text:00C71334                 push    ebx
    .text:00C71335                 push    esi
    .text:00C71336                 push    edi
    .text:00C71337                 mov     [ebp+var_4], 0
    .text:00C7133E                 mov     ecx, [ebp+8]
    .text:00C71341                 push    33h
    .text:00C71343                 call    $+5
    .text:00C71348                 add     dword ptr [esp], 5
    .text:00C7134C                 retf
    .text:00C7134C StartAddress    endp ; sp-analysis failed
    .text:00C7134C
    .text:00C7134D                 call    loc_C72067
    ...
    .text:00C72067                 dec     eax
    .text:00C72068                 mov     [esp+8], ecx
    .text:00C7206C                 dec     eax
    .text:00C7206D                 sub     esp, 28h
    .text:00C72070                 dec     eax
    .text:00C72071                 mov     eax, [esp+30h]
    .text:00C72075                 dec     eax
    .text:00C72076                 mov     ecx, 97418529h
在这里又看到熟悉的push 33h和retf，就是进入64位代码的特征。进入的loc_C72067地址，无法正确识别64位汇编指令。
###  静态分析
因为这个案例中的代码可以静态dump出来，我们先进行静态分析。
使用案例1的Dump方法，拖入IDA64分析，可以恢复出代码，但会有一些内存引用的错误，这是因为缺少了上下文内存。
虽然也可以分析，但是在这个案例中，可以尝试使用更优雅的方式。
在010Editor中，用PE模板打开exe文件，偏移大概是0x118处，修改标识32位的0x10b为64位的0x20b。
然后放入IDA64中分析，Rebase
Segment为0，再次看原来loc_C72067的地方（rebase后为0x2067），此时F5也可以识别出一些函数了，可以顺着分析sub_1C57和sub_1437等函数了。
    signed __int64 __fastcall sub_2067(_QWORD *a1)
    {
      signed __int64 v1; // rax
      unsigned __int64 v2; // rax
      signed __int64 result; // rax
      _QWORD *v4; // [rsp+30h] [rbp+8h]
      v4 = a1;
      v1 = *a1 ^ 0x1234567897418529i64;
      if ( v1 == 0xE2C4A68867B175D9i64 )
        a1[2] = sub_1C57(a1[1]);
      if ( *v4 == 0xFABi64 )
        v4[2] = sub_1437(v4[1]);
      v2 = *v4 % 0x11111111111111ui64;
      if ( v2 == 0x10101010101010i64 )
        v4[2] = sub_1C37(v4[1]);
      result = *v4 & 0x111000111000111i64;
      if ( result == 0x101000010000010i64 )
      {
        result = sub_1F77(v4[1]);
        v4[2] = result;
      }
      return result;
    }
4个线程都是调用这个函数，但是由于输入参数的不同，会选取不同的函数调用。
例如之前`*lpParameter = 0xFAB`对应的是这里的`*v4 == 0xFABi64`判断 ，所以这部分输入调用的是sub_1437
函数，v4[1]就是实际输入串中第8个到第15个字符，即input[8:16] 。
进入分析sub_1437 ，发现是一个流式加密，根据F5的结果逆向比较复杂，还想结合动态运行结果进行逆向。
    sbox[0] = ...
    ...
    sbox[254] = 0xF9u;
    sbox[255] = 0xF8u;
    LOBYTE(v7) = 0;
    memset(&v7 + 1, 0, sizeof(__int64));
    for ( i = 0; i > 7) | 2 * v1;
        *(&v7 + (j + 1) % -8) = v3;
    }
    return v7;
###  动态调试
在WIndows下，IDA32、IDA64和Ollydbg这些调试器在retf指令执行后都无法正常运行，在师傅的指点下，采用windbg作为动态调试工具。
用Windbg 64位打开目标程序File->Open Executable，注意输入命令行参数
在View菜单打开Disassembly（汇编）、Registers（寄存器）、Memory（内存）和Command（命令）窗口，布局如下
一开始我们要在retf处设置断点，怎么设置呢？IDA中，rebase
segment为0后，可以看到retf的地址为0x134c，所以在windbg的Disassembly窗口输入GWoC+0x134c，确定也是retf，按F9设置断点。
按F5执行到断点处，再按F8单步进入执行，此时CS寄存器可以看到已经变成0x33，进入64位代码块
此时再在我们想调试的sub_1437
函数加入断点，在Disassembly窗口输入GWoC+0x1437，按F9加断点，然后F5运行到断点处，就能愉快的开始调试了。
IDA也有链接Windbg的功能，但是本文所采用的IDA
7.0版本并未能成功连上windbg进行调试，只能IDA用于静态分析，Windbg进行动态调试，两边结合逆向。
###  逆向破解
以输入12345678901234567890123456789012为例
###  算法1
  * 输入参数：0xfab
  * 输入内容：input[8:16] = “90123456”
  * 调用函数：sub_1437
  * 算法内容：流式加密，根据结果逆推即可
  * 逆向结果：F[@AzOpFx](https://github.com/AzOpFx "@AzOpFx")
###  算法2
  * 输入参数：0xf0f0f0
  * 输入内容：input[16:24] = “78901234”
  * 调用函数：sub_1C57
  * 算法内容：低4位和高4位分开运算，多次位移和异或运算，可用暴力破解
  * 逆向结果：Cq!9x9zc
###  算法3
  * 输入参数：0x136D7374F06B3430
  * 输入内容：input[:8] = “12345678”
  * 调用函数：sub_1F77
  * 算法内容：低4位和高4位分开进行快速幂取模操作，就是RSA，分解因数解密RSA即可
  * 逆向结果：flag{RpC
###  算法4
  * 输入参数：0x43434343434343
  * 输入内容：input[24:] = “56789012”
  * 调用函数：sub_1C37
  * 算法内容：输入异或0x9C70A3C478EF826A，根据结果异或即可
  * 逆向结果：fVz5354}
所有字符串拼接在一起得到flag{RpCF[@AzOpFxCq](https://github.com/AzOpFxCq
"@AzOpFxCq")!9x9zcfVz5354}
## 小结
本文通过windows和linux的案例，整理了32位程序调用64位代码的识别方法、静态分析和动态调试技巧。
###  识别方法
  1. retf是切换32位和64位的关键指令。
  2. retf前有push 0x33（33h）类似的指令。
    push    33h
    add     dword ptr [esp], 5
    retf
    或者
    mov     dword ptr [eax], 33h
    leave
    retf
  1. retf后CS寄存器从0x23变为0x33。
  2. 程序中可能有进行支持64位的检查，如GWoC。
  3. 当一块可执行的内存，调试时无法识别汇编或者几步一跳时，有可能在是执行64位的代码。
  4. 32位代码调用函数的方式和64位代码有差异，32位程序大多通过入栈方式传参，64位程序一般用寄存器传参。
  5. 32位和64位的syscall的含义和参数有所不同。
###  静态分析
  1. 修改PE/ELF头位64位，让IDA64识别其中64位的部分代码。
  2. 静态/动态dump出内存中的64位代码片段，拖入IDA64分析代码。
  3. 有时候可以通过IDA中Change Segment Attributes 设置为64位，进行汇编分析。
  4. 使用Rebase Segment对齐基地址方便进行静结合分析
###  动态调试
  1. Linux ELF程序可使用gdbserver和IDA64的组合进行调试。
  2. Windows程序使用Windbg进行动态调试，使用IDA64进行静态分析，动静结合逆向。
## 参考
[32位程序下调用64位函数——进程32位模式与64位模式切换](https://www.cnblogs.com/HsinTsao/p/7270732.html)  
[32位程序调用64位函数——开源代码rewolf-wow64ext学习笔记](https://www.cnblogs.com/Crisczy/p/8231775.html)  
[ELF头结构](https://blog.csdn.net/king_cpp_py/article/details/80334086)  
[PE头结构](https://blog.csdn.net/cs2626242/article/details/79391599)