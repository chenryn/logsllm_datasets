[25] A. Biryukov and S. Tikhomirov, “Deanonymization and linkability of
cryptocurrency transactions based on network analysis,” in 2019 IEEE
European Symposium on Security and Privacy (EuroS&P).
IEEE, 2019,
pp. 172–184.
[26] N. Borisov, G. Danezis, P. Mittal, and P. Tabriz, “Denial of service
or denial of security?” in Proceedings of the 14th ACM conference on
Computer and communications security, 2007, pp. 92–102.
[27] P. Fauzi, S. Meiklejohn, R. Mercer, and C. Orlandi, “Quisquis: A new
design for anonymous cryptocurrencies,” in International Conference
on the Theory and Application of Cryptology and Information Security.
Springer, 2019, pp. 649–678.
[28] D. Das, S. Meiser, E. Mohammadi, and A. Kate, “Anonymity trilemma:
Strong anonymity, low bandwidth overhead, low latency-choose two,”
in 2018 IEEE Symposium on Security and Privacy (SP).
IEEE, 2018,
pp. 108–126.
[29] R. Canetti, “Universally composable security: A new paradigm for
cryptographic protocols,” in Proceedings 42nd IEEE Symposium on
Foundations of Computer Science.
IEEE, 2001, pp. 136–145.
[30] S. Delgado-Segura, S. Bakshi, C. P´erez-Sol`a, J. Litton, A. Pachulski,
A. Miller, and B. Bhattacharjee, “Txprobe: Discovering bitcoin’s net-
work topology using orphan transactions,” in International Conference
on Financial Cryptography and Data Security.
Springer, 2019, pp.
550–566.
[31] M. Apostolaki, G. Marti, J. M¨uller, and L. Vanbever, “SABRE:
protecting bitcoin against routing attacks,” in 26th Annual Network
and Distributed System Security Symposium, NDSS 2019, San
Diego, California, USA, February 24-27, 2019. The Internet Society,
2019. [Online]. Available: https://www.ndss-symposium.org/ndss-paper/
sabre-protecting-bitcoin-against-routing-attacks/
[32] G. Bracha, “Asynchronous byzantine agreement protocols,” Information
[22] G. Fanti and P. Viswanath, “Deanonymization in the bitcoin p2p net-
work,” in Advances in Neural Information Processing Systems, 2017,
pp. 1364–1373.
[23] T. Rufﬁng, P. Moreno-Sanchez, and A. Kate, “P2p mixing and unlinkable
and Computation, vol. 75, no. 2, pp. 130–143, 1987.
[33] C. Cachin and S. Tessaro, “Asynchronous veriﬁable information dis-
persal,” in 24th IEEE Symposium on Reliable Distributed Systems
(SRDS’05).
IEEE, 2005, pp. 191–201.
[34] I. Abraham, B. Pinkas, and A. Yanai, “Blinder: Mpc based scalable and
robust anonymous committed broadcast,” Cryptology ePrint Archive,
Report 2020/248, 2020, https://eprint.iacr.org/2020/248.
[35] D. Lu, T. Yurek, S. Kulshreshtha, R. Govind, A. Kate, and A. Miller,
“Honeybadgermpc and asynchromix: Practical asynchronous mpc and its
application to anonymous communication,” in Proceedings of the 2019
ACM SIGSAC Conference on Computer and Communications Security,
2019, pp. 887–903.
REFERENCES
[1] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,” no.
2012, p. 28, 2008. [Online]. Available: https://bitcointalk.org/index.
php?topic=321228.0
[2] C. Badertscher, P. Gaˇzi, A. Kiayias, A. Russell, and V. Zikas, “Ouroboros
genesis: Composable proof-of-stake blockchains with dynamic availabil-
ity,” in Proceedings of the 2018 ACM SIGSAC Conference on Computer
and Communications Security, 2018, pp. 913–930.
[3] B. David, P. Gaˇzi, A. Kiayias, and A. Russell, “Ouroboros praos:
An adaptively-secure, semi-synchronous proof-of-stake blockchain,” in
Annual International Conference on the Theory and Applications of
Cryptographic Techniques. Springer, 2018, pp. 66–98.
[4] J. Chen and S. Micali, “Algorand: A secure and efﬁcient distributed
ledger,” Theoretical Computer Science, vol. 777, pp. 155–183, 2019.
[5] E. B. Sasson, A. Chiesa, C. Garman, M. Green, I. Miers, E. Tromer, and
M. Virza, “Zerocash: Decentralized anonymous payments from bitcoin,”
in 2014 IEEE Symposium on Security and Privacy.
IEEE, 2014, pp.
459–474.
[6] S. Noether, “Ring signature conﬁdential transactions for monero.” IACR
Cryptology ePrint Archive, vol. 2015, p. 1098, 2015.
[7] S. Bowe, A. Chiesa, M. Green, I. Miers, P. Mishra, and H. Wu, “Z:
Enabling decentralized private computation.”
[8] T. Kerber, A. Kiayias, M. Kohlweiss, and V. Zikas, “Ouroboros crypsi-
nous: Privacy-preserving proof-of-stake,” in 2019 IEEE Symposium on
Security and Privacy (SP).
IEEE, 2019, pp. 157–174.
[9] C. Ganesh, C. Orlandi, and D. Tschudi, “Proof-of-stake protocols for
privacy-aware blockchains,” in Annual International Conference on the
Theory and Applications of Cryptographic Techniques. Springer, 2019,
pp. 690–719.
[10] F. Baldimtsi, V. Madathil, A. Scafuro, and L. Zhou, “Anonymous
lottery in the proof-of-stake setting,” in 33rd IEEE Computer
Security Foundations Symposium, CSF 2020, Boston, MA, USA,
June 22-26, 2020.
IEEE, 2020, pp. 318–333. [Online]. Available:
https://doi.org/10.1109/CSF49147.2020.00030
[11] C. Badertscher, U. Maurer, D. Tschudi, and V. Zikas, “Bitcoin as a
transaction ledger: A composable treatment,” in Annual International
Cryptology Conference. Springer, 2017, pp. 324–356.
[12] E. C. Company, “Zcash release v4.1.1.” [Online]. Available: https:
//github.com/zcash/zcash/releases/tag/v4.1.1
[13] A. Miller, J. Litton, A. Pachulski, N. Gupta, D. Levin, N. Spring, and
B. Bhattacharjee, “Discovering bitcoin’s public topology and inﬂuential
nodes.”
[14] R. Dingledine, N. Mathewson, and P. Syverson, “Tor: The second-
generation onion router,” Naval Research Lab Washington DC, Tech.
Rep., 2004.
[15] G. Fanti, S. B. Venkatakrishnan, S. Bakshi, B. Denby, S. Bhargava,
A. Miller, and P. Viswanath, “Dandelion++ lightweight cryptocurrency
networking with formal anonymity guarantees,” Proceedings of the ACM
on Measurement and Analysis of Computing Systems, vol. 2, no. 2, pp.
1–35, 2018.
[16] A. Biryukov and I. Pustogarov, “Bitcoin over tor isn’t a good idea,”
IEEE, 2015, pp.
in 2015 IEEE Symposium on Security and Privacy.
122–134.
[17] S. Meiklejohn, M. Pomarole, G. Jordan, K. Levchenko, D. McCoy, G. M.
Voelker, and S. Savage, “A ﬁstful of bitcoins: characterizing payments
among men with no names,” in Proceedings of the 2013 conference on
Internet measurement conference. ACM, 2013, pp. 127–140.
[18] F. Reid and M. Harrigan, “An analysis of anonymity in the bitcoin
Springer, 2013,
system,” in Security and privacy in social networks.
pp. 197–223.
[19] D. Ron and A. Shamir, “Quantitative analysis of the full bitcoin trans-
action graph,” in International Conference on Financial Cryptography
and Data Security. Springer, 2013, pp. 6–24.
[20] P. Koshy, D. Koshy, and P. McDaniel, “An analysis of anonymity
in bitcoin using p2p network trafﬁc,” in International Conference on
Financial Cryptography and Data Security. Springer, 2014, pp. 469–
485.
[21] A. Biryukov, D. Khovratovich, and I. Pustogarov, “Deanonymisation of
clients in bitcoin p2p network,” in Proceedings of the 2014 ACM SIGSAC
Conference on Computer and Communications Security. ACM, 2014,
pp. 15–29.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:16:55 UTC from IEEE Xplore.  Restrictions apply. 
1831
APPENDIX
A. Discussion on anonymous communication protocols
The most popular anonymous communication protocols to
improve privacy of nodes in cryptocurrencies like Bitcoin,
Zcash and Monero are either Tor [14] or the recently proposed
protocol Dandelion [15]. We note that as long as an adversary
can connect to a victimNode either through Tor relays or a
direct connection in the case of Dandelion, the adversary can
mount the Invblocking attack described in section VI. This is
so because the victimNode running the Zcash daemon will
always wait for a time-out until it requests a GETDATA from
a different peer. We note in the case that the node is set up
as Tor hidden service the attack only results in the adversary
learning the OnionCat address that is used to represent the
Tor hidden service. Moreover, according to [16], the situation
might actually be worse. In their work, they present techniques
to fully control the view of a victimNode by leveraging DoS
prevention mechanisms of the Bitcoin software. The same DoS
prevention mechanisms exist in Zcash as well, and could be
used by an adversary to control the victimNode’s view.
B. Suggested Mitigations
In this section we discuss strategies that could mitigate or
prevent the de-anonymization attacks described above. Recall
that our attacks are based on the fact that a network adversary
can provide different views to different parties and then, based
on the protocol output, determine which parties participated
in the protocol. To defend against this attack, an effective
countermeasure would be to ensure that all parties get the
same view. This can be done in two ways: 1) At the application
level, by combining views received by honest parties across
the network. 2) At the network level, by leveraging reliable
anonymous broadcast.
A potential idea is to introduce an external protocol, that we
call sanitization protocol, that parties can use to get a view of
the network that is not poisoned by targeted delay attacks. The
sanitization protocol, would be executed by a set of parties,
the sanitizers, whose role is to collect transactions from the
network and jointly compute the sanitized view. When a
stakeholder wants to participate in a PoS protocol, instead of
using its local view of the network, it will use the sanitized
view. This idea has been proposed in the past. Apostolaki et al.
introduced SABRE [31], a Bitcoin relay network which relays
blocks through a set of dedicated nodes, that are resilient to
routing attacks. Their goal was to prevent routing attacks on
Bitcoin that allows AS-level attackers to partition the Bitcoin
network. While their work was not intended to protect the
anonymity of Bitcoin players, we observe that if the SABRE
infrastructure existed, it could serve to run the sanitization
protocol. In SABRE [31], the relay nodes are trusted and ﬁxed.
To remove this trust assumption an idea would be to rely on the
honest majority of stake in a PoS blockchain and select nodes
from the network. This gives us a guarantee that a majority of
the selected nodes will be honest and we will not need to make
any new trust assumptions. Unfortunately, this approach does
not work. Why? Selecting sanitizers based on stake jeopardizes
the stake privacy of the sanitizers, since by participating in
the “sanitization process” they can be targets of the very same
attacks we have shown in the previous sections. Moreover, if
the sanitizers are not ﬁxed and new sanitizers are picked in
every round, the adversary might even learn information on
the stake distribution of the network.
Thus, if we trust the sanitizer nodes we can circumvent the
lower bound in Section IV since the information is always
sourced from a trusted set of ndoes and an adversary is no
longer able to set inputs for speciﬁc parties. On the other hand,
if we assume that the sanitizers are selected based on stake, our
attacks will still hold. We leave it to future work to investigate
an implementation of sanitization with other assumptions that
can circumvent the lower bound. To summarize, our proposed
approach based on sanitization has the following properties:
Pros. It protects the privacy of the participating parties in
the chain extension protocol (i.e., the block proposers). Cons.
Sanitizers lose their privacy and need to be trusted.
Another way to ensure all parties have the same view is
to somehow enforce that a message sent over the network is
“received” by all parties at the same time. As outlined in the
introduction, such guarantee cannot be promised by gossip
protocols since an adversary can delay messages arbitrarily or
block certain messages from reaching a target party (or set
of parties). Reliable broadcast [32] [33] is a protocol that has
an agreement guarantee which says that if any correct node
delivers m, then every correct node delivers m. That is, even
if a malicious party “sends” a message to a party it wont be
considered “delivered” until all honest parties have received it,
thereby virtually setting ∆ = 0. If realized this functionality
would circumvent our lower-bound since, with no delay, the
adversary cannot split parties into subsets with differing views.
Unfortunately, existing candidates for reliable broadcast
protocols require direct connections between all parties in the
protocol and hence is not scalable. Recent works, such as
Blinder MPC [34] and PowerMix [35] propose a server-client
model where the direct connection is not required among all
parties; rather a client need only to be connected to a smaller
number of servers.
Unfortunately, these protocols are also not scalable: for a
network of N clients and n servers, PowerMix [35])require
(O(log2(N )) server-server rounds of communication, while
N ) computation overhead
Blinder MPC [34] requires O(n · √
for each client.
Furthermore, in the server-client model, a network adversary
might be able to delay the communication between a client
and its servers, and hence still mount the attacks described
in this paper. Pros If implemented, reliable broadcast channel
virtually sets ∆ = 0 ruling out our delay-based attacks. Cons
Existing protocols are not scalable and would not be practical
in a permissionless blockchain setting.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:16:55 UTC from IEEE Xplore.  Restrictions apply. 
1832
Anonymous Broadcast functionality : F ∆
ABC
Any party can register (or deregister). Let the list
of registered parties be P = {P1 . . . Pn}. The
functionality maintains a message buffer M.
– Honest sender send: Upon receiving
(SEND, sid, m) from some party Ps ∈ P, where
P = {P1, . . . , Pn} denotes the current party set,
do :
1) Choose n new unique message-IDs
mid1, . . . , midn
2) Initialize 2n new variables
:= 1.
Dmid1 := DM AX
. . . Dmidn := DM AX
midn
mid1
These are the delays and the maximum
delays of the message for each party.
Pi ∈ P
3) Set M = M||(m, midi, Dmidi, Pi) for each
4) Send (SEND, m, mid1, . . . , midn) to the
adversary.
– Honest party fetching : Upon receiving
(FETCH, sid) from Pi ∈ P :
1) For all tuples (m, mid, Dmid, Pi) ∈ M set
Dmid := Dmid − 1.
2) Let M Pi
0 denote the subvector of M
including all tuples of the form
(m, mid, Dmid, Pi) with Dmid = 0 (in the
same order as they appear in M). Delete all
entries in M Pi
to Pi.
0
from M and send M Pi
0
– Adding adversarial delays : Upon receiving
(DELAY, sid, (Tmid1 , mid1), . . . , (Tmid(cid:96), mid(cid:96)))
from the adversary, do the following for each
pair (Tmidi , midi) :
1) If DM AX
+ Tmidi ≤ ∆ and mid is a
midi
message-ID registered in the current M, set
Dmidi := Dmidi + Tmidi and set
DM AX
this pair.
+ Tmidi; otherwise ignore
:= DM AX
midi
midi
– Adversarial sender (partial) multicast: Upon
receiving (MSEND, (m1, P1), . . . , (m(cid:96), P(cid:96))) from
the adversary with P1, . . . , P(cid:96) ∈ P:
1) Choose (cid:96) new unique message-IDs
mid1, . . . , mid(cid:96)
2) Initialize 2(cid:96) new variables
:= 1
3) Set M = M||(m1, mid1, Dmid1, P1)|| . . .||
. . . Dmid(cid:96) := DM AX
Dmid1 := DM AX
mid1
mid(cid:96)
(m(cid:96), mid(cid:96), Dmid(cid:96), P(cid:96))
4) Send (MSEND, m1, mid1, . . . , m(cid:96), mid(cid:96)) to the
adversary.
Figure 13. F ∆
ABC
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:16:55 UTC from IEEE Xplore.  Restrictions apply. 
1833