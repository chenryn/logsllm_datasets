### References

1. A. Biryukov and S. Tikhomirov, “Deanonymization and linkability of cryptocurrency transactions based on network analysis,” in *2019 IEEE European Symposium on Security and Privacy (EuroS&P)*, IEEE, 2019, pp. 172–184.
2. N. Borisov, G. Danezis, P. Mittal, and P. Tabriz, “Denial of service or denial of security?” in *Proceedings of the 14th ACM Conference on Computer and Communications Security*, 2007, pp. 92–102.
3. P. Fauzi, S. Meiklejohn, R. Mercer, and C. Orlandi, “Quisquis: A new design for anonymous cryptocurrencies,” in *International Conference on the Theory and Application of Cryptology and Information Security*. Springer, 2019, pp. 649–678.
4. D. Das, S. Meiser, E. Mohammadi, and A. Kate, “Anonymity trilemma: Strong anonymity, low bandwidth overhead, low latency—choose two,” in *2018 IEEE Symposium on Security and Privacy (SP)*, IEEE, 2018, pp. 108–126.
5. R. Canetti, “Universally composable security: A new paradigm for cryptographic protocols,” in *Proceedings of the 42nd IEEE Symposium on Foundations of Computer Science*, IEEE, 2001, pp. 136–145.
6. S. Delgado-Segura, S. Bakshi, C. Pérez-Solà, J. Litton, A. Pachulski, A. Miller, and B. Bhattacharjee, “Txprobe: Discovering Bitcoin’s network topology using orphan transactions,” in *International Conference on Financial Cryptography and Data Security*. Springer, 2019, pp. 550–566.
7. M. Apostolaki, G. Marti, J. Müller, and L. Vanbever, “SABRE: Protecting Bitcoin against routing attacks,” in *26th Annual Network and Distributed System Security Symposium (NDSS 2019)*, San Diego, California, USA, February 24-27, 2019. The Internet Society, 2019. [Online]. Available: https://www.ndss-symposium.org/ndss-paper/sabre-protecting-bitcoin-against-routing-attacks/
8. G. Bracha, “Asynchronous Byzantine agreement protocols,” *Information and Computation*, vol. 75, no. 2, pp. 130–143, 1987.
9. G. Fanti and P. Viswanath, “Deanonymization in the Bitcoin P2P network,” in *Advances in Neural Information Processing Systems*, 2017, pp. 1364–1373.
10. T. Ruffing, P. Moreno-Sanchez, and A. Kate, “P2P mixing and unlinkable payments,” in *IEEE Symposium on Security and Privacy (SP)*, IEEE, 2017, pp. 1364–1373.
11. C. Cachin and S. Tessaro, “Asynchronous verifiable information dispersal,” in *24th IEEE Symposium on Reliable Distributed Systems (SRDS’05)*, IEEE, 2005, pp. 191–201.
12. I. Abraham, B. Pinkas, and A. Yanai, “Blinder: MPC-based scalable and robust anonymous committed broadcast,” *Cryptology ePrint Archive*, Report 2020/248, 2020. [Online]. Available: https://eprint.iacr.org/2020/248
13. D. Lu, T. Yurek, S. Kulshreshtha, R. Govind, A. Kate, and A. Miller, “HoneyBadgerMPC and Asynchromix: Practical asynchronous MPC and its application to anonymous communication,” in *Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security*, 2019, pp. 887–903.

### Appendix

#### A. Discussion on Anonymous Communication Protocols

The most popular anonymous communication protocols to enhance privacy in cryptocurrencies like Bitcoin, Zcash, and Monero are Tor [14] and the recently proposed Dandelion [15]. We note that as long as an adversary can connect to a victim node either through Tor relays or a direct connection in the case of Dandelion, the adversary can mount the Invblocking attack described in Section VI. This is because the victim node running the Zcash daemon will always wait for a timeout before requesting a GETDATA from a different peer. In the case where the node is set up as a Tor hidden service, the attack only results in the adversary learning the OnionCat address used to represent the Tor hidden service. Moreover, according to [16], the situation might be worse. Their work presents techniques to fully control the view of a victim node by leveraging DoS prevention mechanisms of the Bitcoin software. The same DoS prevention mechanisms exist in Zcash and could be used by an adversary to control the victim node's view.

#### B. Suggested Mitigations

In this section, we discuss strategies that could mitigate or prevent the de-anonymization attacks described above. Our attacks are based on the fact that a network adversary can provide different views to different parties and then, based on the protocol output, determine which parties participated in the protocol. To defend against this, an effective countermeasure would be to ensure that all parties get the same view. This can be achieved in two ways:

1. **At the Application Level**: By combining views received by honest parties across the network.
2. **At the Network Level**: By leveraging reliable anonymous broadcast.

A potential idea is to introduce an external protocol, called the sanitization protocol, that parties can use to get a view of the network that is not poisoned by targeted delay attacks. The sanitization protocol would be executed by a set of parties, the sanitizers, whose role is to collect transactions from the network and jointly compute the sanitized view. When a stakeholder wants to participate in a PoS protocol, instead of using its local view of the network, it will use the sanitized view. This idea has been proposed in the past. Apostolaki et al. introduced SABRE [31], a Bitcoin relay network that relays blocks through a set of dedicated nodes, resilient to routing attacks. While their work was not intended to protect the anonymity of Bitcoin players, we observe that if the SABRE infrastructure existed, it could serve to run the sanitization protocol. In SABRE [31], the relay nodes are trusted and fixed. To remove this trust assumption, one could rely on the honest majority of stake in a PoS blockchain and select nodes from the network. This gives us a guarantee that a majority of the selected nodes will be honest, and we will not need to make any new trust assumptions. Unfortunately, this approach does not work. Why? Selecting sanitizers based on stake jeopardizes the stake privacy of the sanitizers, as they can become targets of the very same attacks we have shown in the previous sections. Moreover, if the sanitizers are not fixed and new sanitizers are picked in every round, the adversary might even learn information about the stake distribution of the network.

Thus, if we trust the sanitizer nodes, we can circumvent the lower bound in Section IV since the information is always sourced from a trusted set of nodes, and an adversary is no longer able to set inputs for specific parties. On the other hand, if we assume that the sanitizers are selected based on stake, our attacks will still hold. We leave it to future work to investigate an implementation of sanitization with other assumptions that can circumvent the lower bound. To summarize, our proposed approach based on sanitization has the following properties:

- **Pros**: It protects the privacy of the participating parties in the chain extension protocol (i.e., the block proposers).
- **Cons**: Sanitizers lose their privacy and need to be trusted.

Another way to ensure all parties have the same view is to enforce that a message sent over the network is "received" by all parties at the same time. As outlined in the introduction, such a guarantee cannot be promised by gossip protocols since an adversary can delay messages arbitrarily or block certain messages from reaching a target party (or set of parties). Reliable broadcast [32, 33] is a protocol that has an agreement guarantee, stating that if any correct node delivers a message \( m \), then every correct node delivers \( m \). That is, even if a malicious party "sends" a message to a party, it won't be considered "delivered" until all honest parties have received it, thereby virtually setting \( \Delta = 0 \). If realized, this functionality would circumvent our lower-bound since, with no delay, the adversary cannot split parties into subsets with differing views.

Unfortunately, existing candidates for reliable broadcast protocols require direct connections between all parties in the protocol and hence are not scalable. Recent works, such as Blinder MPC [34] and PowerMix [35], propose a server-client model where the direct connection is not required among all parties; rather, a client needs only to be connected to a smaller number of servers. However, these protocols are also not scalable: for a network of \( N \) clients and \( n \) servers, PowerMix [35] requires \( O(\log^2(N)) \) server-server rounds of communication, while Blinder MPC [34] requires \( O(n \cdot \sqrt{N}) \) computation overhead for each client.

Furthermore, in the server-client model, a network adversary might be able to delay the communication between a client and its servers, and hence still mount the attacks described in this paper.

- **Pros**: If implemented, a reliable broadcast channel virtually sets \( \Delta = 0 \), ruling out our delay-based attacks.
- **Cons**: Existing protocols are not scalable and would not be practical in a permissionless blockchain setting.

### Anonymous Broadcast Functionality: \( F_{\Delta}^{ABC} \)

- **Registration and Deregistration**: Any party can register (or deregister). Let the list of registered parties be \( P = \{P_1, \ldots, P_n\} \). The functionality maintains a message buffer \( M \).

- **Honest Sender Send**: Upon receiving \( (\text{SEND}, \text{sid}, m) \) from some party \( P_s \in P \):
  1. Choose \( n \) new unique message-IDs \( \text{mid}_1, \ldots, \text{mid}_n \).
  2. Initialize \( 2n \) new variables:
     - \( D_{\text{mid}_1} := D_{\text{MAX}} \)
     - \( \ldots \)
     - \( D_{\text{mid}_n} := D_{\text{MAX}} \)
     - \( \text{DMAX}_{\text{mid}_1} := D_{\text{MAX}} \)
     - \( \ldots \)
     - \( \text{DMAX}_{\text{mid}_n} := D_{\text{MAX}} \)
  3. Set \( M = M || (m, \text{mid}_i, D_{\text{mid}_i}, P_i) \) for each \( P_i \in P \).
  4. Send \( (\text{SEND}, m, \text{mid}_1, \ldots, \text{mid}_n) \) to the adversary.

- **Honest Party Fetching**: Upon receiving \( (\text{FETCH}, \text{sid}) \) from \( P_i \in P \):
  1. For all tuples \( (m, \text{mid}, D_{\text{mid}}, P_i) \in M \), set \( D_{\text{mid}} := D_{\text{mid}} - 1 \).
  2. Let \( M_{P_i}^0 \) denote the subvector of \( M \) including all tuples of the form \( (m, \text{mid}, D_{\text{mid}}, P_i) \) with \( D_{\text{mid}} = 0 \) (in the same order as they appear in \( M \)). Delete all entries in \( M_{P_i}^0 \) from \( M \) and send \( M_{P_i}^0 \) to \( P_i \).

- **Adding Adversarial Delays**: Upon receiving \( (\text{DELAY}, \text{sid}, (\text{Tmid}_1, \text{mid}_1), \ldots, (\text{Tmid}_\ell, \text{mid}_\ell)) \) from the adversary, do the following for each pair \( (\text{Tmid}_i, \text{mid}_i) \):
  1. If \( \text{DMAX}_{\text{mid}_i} + \text{Tmid}_i \leq \Delta \) and \( \text{mid}_i \) is a message-ID registered in the current \( M \), set \( D_{\text{mid}_i} := D_{\text{mid}_i} + \text{Tmid}_i \) and set \( \text{DMAX}_{\text{mid}_i} := \text{DMAX}_{\text{mid}_i} + \text{Tmid}_i \); otherwise, ignore this pair.

- **Adversarial Sender (Partial) Multicast**: Upon receiving \( (\text{MSEND}, (m_1, P_1), \ldots, (m_\ell, P_\ell)) \) from the adversary with \( P_1, \ldots, P_\ell \in P \):
  1. Choose \( \ell \) new unique message-IDs \( \text{mid}_1, \ldots, \text{mid}_\ell \).
  2. Initialize \( 2\ell \) new variables:
     - \( D_{\text{mid}_1} := D_{\text{MAX}} \)
     - \( \ldots \)
     - \( D_{\text{mid}_\ell} := D_{\text{MAX}} \)
     - \( \text{DMAX}_{\text{mid}_1} := D_{\text{MAX}} \)
     - \( \ldots \)
     - \( \text{DMAX}_{\text{mid}_\ell} := D_{\text{MAX}} \)
  3. Set \( M = M || (m_1, \text{mid}_1, D_{\text{mid}_1}, P_1) || \ldots || (m_\ell, \text{mid}_\ell, D_{\text{mid}_\ell}, P_\ell) \).
  4. Send \( (\text{MSEND}, m_1, \text{mid}_1, \ldots, m_\ell, \text{mid}_\ell) \) to the adversary.

---

This optimized version of the text is more structured, clear, and professional, making it easier to read and understand.