title:How not to prove your election outcome
author:Thomas Haines and
Sarah Jamie Lewis and
Olivier Pereira and
Vanessa Teague
2020 IEEE Symposium on Security and Privacy
How not to prove your election outcome
Thomas Haines∗, Sarah Jamie Lewis†, Olivier Pereira‡, and Vanessa Teague§
∗Norwegian University of Science and Technology
†Open Privacy Research Society, Canada
‡UCLouvain – ICTEAM – B-1348 Louvain-la-Neuve, Belgium
§The University of Melbourne – School of Computing and Information Systems, Melbourne, Australia
Abstract—The Scytl/SwissPost e-voting solution was intended
to provide complete veriﬁability for Swiss government elections.
We show failures in both individual veriﬁability and universal
veriﬁability (as deﬁned in Swiss Federal Ordinance 161.116),
based on mistaken implementations of cryptographic components.
These failures allow for the construction of “proofs” of an
accurate election outcome that pass veriﬁcation though the
votes have been manipulated. Using sophisticated cryptographic
protocols without a proper consideration of what properties they
offer, and under which conditions, can introduce opportunities
for undetectable fraud even though the system appears to allow
veriﬁcation of the outcome.
Our ﬁndings are immediately relevant to systems in use in
Switzerland and Australia, and probably also elsewhere.
I. INTRODUCTION
Veriﬁability is a must-have for elections: if the outcome
doesn’t come with evidence of its correctness that can be
veriﬁed by third parties, then the results can be manipulated. But
designing veriﬁable systems is challenging: if a cryptographic
protocol is designed or implemented in secret, if it comes with
no convincing proof of the soundness of its veriﬁcation process,
and if no opportunity for independent scrutiny is given, then
it is unlikely that it offers the security properties it advertises.
It might seem to offer a chance to check the results, but those
checks might not really prove that the election outcome is right.
We show multiple independent ways that cryptographic errors
in Scytl’s e-voting protocol sVote, proposed by SwissPost for
Swiss government elections, can be used to fake a proof of an
accurate election outcome that passes veriﬁcation even though
the votes have been manipulated. Our analysis focuses on sVote
version 2.1, which purported to provide complete veriﬁability
and was applying for certiﬁcation for use by up to 100% of
the electorate at the time we began our examination.
Our results have immediate implications for elections in
Switzerland and New South Wales. One of the identiﬁed
weaknesses was also present in version 1.0 of the sVote protocol,
which has been deployed in binding elections by several Swiss
cantons, and another was present in a system used in a state
election in New South Wales. We do not know whether other
countries using software from the same provider are affected
by any of the weaknesses that we found: many other countries
use the same vendor but do not publish their code.
Because of the ﬁndings discussed in this paper, no version
of sVote was used during the May 2019 Swiss referendum
or the Federal elections of October 2019. Both the Swiss and
New South Wales systems have been updated for most (though
not all) of the issues we describe here, though we have not
thoroughly examined the remediation attempts.
This is unlikely to be the last proprietary veriﬁable multiparty
computation protocol that doesn’t meet its advertised security
goals. The incorrect use of sophisticated protocols such as
zero knowledge proofs (ZKPs) and multiparty computation
(MPC) demonstrates pitfalls that potentially affect systems for
applications other than voting. Many of the components have
been proven secure elsewhere, but under assumptions that are
not realised in this system. We provide a short summary of the
generalisable failures we observed:
1) Statically secure primitives are used in an adaptive
setting. The sVote system uses Maurer’s uniﬁed proofs
framework [1] for many of its ZKPs. These are proven
to offer security in an interactive and static model (i.e.
when the statement is given to the prover), but are used
in sVote in a setting where the prover can choose the
statement afterwards, thus making it vulnerable to the
pitfall described in [2].
2) The facts proven in the ZKPs are not sufﬁcient. A
ZKP proves a particular statement (or more precisely,
membership of a speciﬁc language). But in sVote, the
conjunction of the facts proven by the voting client is not
sufﬁcient to imply the desired properties about the votes.
3) The multiparty protocol isn’t secure against collusion.
sVote uses an original multiparty protocol to compute
the codes to be returned to voters. The protocol has ﬁve
authorities and is intended to tolerate some dishonest
participants. We show that one of them can misbehave
alone (with a cheating client) and break veriﬁability.
4) Hardness assumptions are not guaranteed. Most of
the protocols used in sVote rely on the hardness of some
computational problems. For instance, in various places,
it is expected that discrete logs of various group elements
in various bases are unknown. However, sVote offers no
evidence of how the group parameters and group elements
are generated, which makes it impossible to verify whether
a prover may know a trapdoor that would violate the
speciﬁc instances of the computational problems used in
the system. This can be used to violate both individual
and universal veriﬁability in sVote.
Every one of these errors allows a successful vote manip-
ulation that passes veriﬁcation, though in some cases it is
informally clear that something has gone wrong.
© 2020, Vanessa Teague. Under license to IEEE.
DOI 10.1109/SP40000.2020.00048
644
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:54 UTC from IEEE Xplore.  Restrictions apply. 
We describe the code and speciﬁcations as released for
review in March 2019. We illustrate the ZKP unsoundness from
Sections III and VI with cheating examples that pass veriﬁcation
in that code. These are available at https://git.openprivacy.
ca/swiss-post-scytl-disclosure/cheating-proof-transcripts along
with the rest of the codebase, so others can check that our
proofs pass veriﬁcation. Some of these issues have now been
at least partially remediated [3], [4].
We also provide a list of other cryptographic errors in OR
proofs, hashing, etc., though they do not seem to lead to attacks.
These problems have been found thanks to Swiss Federal
Chancellery Ordinance 161.116 on Electronic Voting, which
mandates a public review of electronic voting systems used at
a certain scale in Switzerland. It also requires that “[the source
code] must be easily obtainable, free of charge, on the internet”
and that “anyone is entitled to examine, modify, compile and
execute the source code for ideational purposes, and to write
and publish studies thereon.” It is unlikely that the protocols
deployed in other countries, which do not mandate such public
review, would offer any better security guarantees. And in the
absence of a legal framework supporting the open analysis and
discussion of the properties of these protocols, the only people
who have an incentive to ﬁnd such issues are those who would
seek to exploit them silently.
A. History and security goals of sVote in Switzerland
sVote 1.0 has been used since 2016 in four Swiss cantons1
and was certiﬁed for use by up to 50% of voters.
In order to obtain this level of certiﬁcation,
individual
veriﬁability is required. Before the election, each voter receives
a paper code sheet by postal mail, which contains one secret
choice code for each possible voting option. Voters can then
enter a vote on an untrusted web client and receive assurance
that their vote intent has been properly recorded by receiving
choice codes back electronically from the voting system and
matching these codes with those written on their code sheet.
A malicious voting client that alters a vote should be detected
when the voter doesn’t receive the right codes.
sVote 2.1 was proposed in 2018 for certiﬁcation for up
to 100% of the voters of the cantons willing to use it.
To obtain this certiﬁcation, ordinance 161.116 requires that
individual veriﬁability holds as long as at least one of the
server-side components is honest. It also requires that the
system offers a form of universal veriﬁability, which guarantees
(approximately) that the result of an election is correct as long
as at least one server-side component is honest. (The traditional
universal veriﬁability notion requires that this property holds
even if all
the server-side components of the system are
dishonest [5].) When combined with individual veriﬁability,
the property is called “complete veriﬁability.” In this setting no
public bulletin board is needed, which contrasts with traditional
universally veriﬁable voting schemes.
Any voting system that decrypts individual votes (even paper
ones) must mix the votes before decryption, which introduces a
1See https://www.evoting.ch/en.
potential point for cheating by substituting rather than truthfully
shufﬂing. Like many other systems, sVote 2.1 attempts to
achieve universal veriﬁability (while protecting vote privacy)
with ZKPs of both honest mixing and correct decryption. It
should not be feasible to produce a passing proof transcript for
either mixing or decryption unless the set of encrypted votes
entered in to the system matches the output plaintext votes.
The speciﬁcation and code examined in this paper were
made available by SwissPost under a non-disclosure agreement
(NDA). This NDA required that “No Vulnerability shall be
published within a period of forty ﬁve (45) days since the last
communication exchanged with the Owners with regards to
such potential Vulnerability”. However, the speciﬁcation and
code also circulated fairly freely online, and this is how we
accessed them. Based on our ﬁndings, we contacted the Federal
Chancellery and Swiss Post and agreed on a synchronized
communication agenda supporting public discussion.
B. Structure of this paper
We give a technical overview of the system, then demonstrate
various attacks against complete veriﬁability.
The ﬁrst three attacks concern individual veriﬁability. In
Section III a malicious client uses the unsoundness of the ZKPs
to retrieve the expected choice code values despite submitting
a nonsense vote. The second attack, described in Section IV,
allows a cheating client to submit a mix of valid and invalid
vote choices while retrieving the expected vote codes for all but
one of them. It is dependent on either a certain interpretation
of the (ambiguous) speciﬁcation, or collusion from one server-
side component. This is possible even if the ZKPs are sound,
because they are not sufﬁcient to prove that the vote is well
formed. In Section V we show that even if the vote is well-
formed, a single cheating server-side component can substitute
the choice code and still pass audit if the voting parameters
are maliciously generated.
We then turn to universal veriﬁability and show three more
attacks. In Section VI, we examine the proof of proper mixing
and show that the non-veriﬁable generation of group parameters
allows a cheating mix server to alter votes but pass veriﬁcation.
We give two examples of how this could be used. The ﬁrst
example allows the ﬁrst mix to substitute votes for which it
knows the randomness used to generate the encrypted vote
(which could result from leakage from the client). The second
example does not require knowledge of the random factors
used to generate the votes, and could be used by the last mix
in the sequence to alter votes with no client collusion.
Then, in Section VII, we observe that the use of non-
adaptive ZKPs for ballot decryption also makes it possible
to substitute nonsense votes for validly-submitted ones, and
still pass veriﬁcation.
Finally, motivated by the impact of the non-veriﬁable group
parameter generation speciﬁed in sVote, we review various
other mix-net implementations in Section VIII and observe
that this issue is fairly widespread.
Some other cryptographic issues are described in Ap-
pendix E.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:54 UTC from IEEE Xplore.  Restrictions apply. 
645
II. TECHNICAL OVERVIEW
We now describe the main cryptographic aspects of sVote
2.1. The following description omits or presents in a simpliﬁed
way various components that are irrelevant for our discussions
(e.g., the handling of write-ins).
The client sends both a vote ciphertext and a set of partial
Choice Codes that are used to compute the choice codes, along
with a non-interactive ZKP that they are consistent—this is
detailed below. The server-side has two roles: it ﬁrst computes
the choice codes for each voter and then, when all the votes
have been received, it mixes and decrypts the votes.
A. System components and Cryptographic setting
The main components of the system are:
• A print ofﬁce, which generates and prints the code sheets,
and is trusted.
• A voting client, which is trusted for privacy only.
• A voting server, which coordinates the server-side com-
ponents of the election and is not trusted.
• Return codes control components (CCRs), among which
one is assumed to be honest.
• Mixing control components (CCMs), among which one is
assumed to be honest.
• Auditors, among which one is assumed to be honest.
These components have signing keys, which they use to
authenticate (and log) their behavior, but we ignore them here.
The code sheet printing service needs to be trusted: it sees all
return codes corresponding to all voter choices. If it colluded
with a malicious code return service or with a malicious voting
client, it would be possible to return any choice codes that a
voter expects to see, whatever vote was recorded.
B. Cryptographic setup
The core of the cryptographic protocol happdens in a group
G of prime order q made of the quadratic residues modulo a
2048-bits prime p = 2q + 1. The group parameters are chosen
so that g = 2 generates G.
Before the election, each possible answer offered on a ballot
is assigned a small prime vi in G. Each question on a ballot
has at least three possible answers: yes, no, and blank, though
it may instead have several different candidates to choose from.
sVote 2.1 uses ElGamal encryption [6] over G. Each message
is a small prime in G, or the product of such primes. All
choices for a ballot are multiplied together, encrypted as a
single ciphertext, and sent to the server.
So, whatever vote is cast, the number of small primes needed
to represent the vote is ﬁxed. The system expects that the
product of all the vi primes selected for any ballot will be
smaller than p.
Sometimes El Gamal is used in its multi-element version.
A public key is a tuple (K(1),K(2) . . . ,K(ψ)) (where ψ is the
maximum number of questions on the ballot). The correspond-
ing private key is the tuple of discrete logs of the public key,
mod p. A message m, which is a tuple (m1,m2, . . . ,mψ ) of
quadratic residues mod p, is encrypted by generating a random
r ∈ [1,q] and setting the ciphertext to
E(m,r) = (gr,m1K(1)r,m2K(2)r . . . ,mψK(ψ)r).
(This is not our chosen notation: to be clear, K(i)r represents
raising the i-th element of the public key to r.)
This means there are three uses of non-interactive ZKPs:
1) the client uses three ZKPs to prove that the partial choice
codes match the vote;
2) the server-side uses ZKPs to prove that the codes it returns
match the partial choice codes submitted by the client;
3) the server-side uses ZKPs to prove that the complete list
of votes is properly mixed and decrypted.
We follow the notations of the sVote protocol speciﬁcation [7,
Section 5.4], with some simpliﬁcations. The ballot preparation
and individual veriﬁability processes rely on the following keys.
1) hCCM is the election public key, a standard single-element
El Gamal key.
2) xCCM , the corresponding private key, is secret-shared
among the CCM’s.
3) pk = pk(1), . . . ,pk(ψ)
is the choice return code public
key, which is a multi-element El Gamal public key. The
parameter ψ is the number of options to be expressed by
each voter.
4) skCCR = sk(1)
CCR
, . . . ,sk(ψ)
CCR, the corresponding private key,
is secret-shared among the CCR’s.
5) Kid is the veriﬁcation card public key, one for each