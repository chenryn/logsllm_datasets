3
4
5
6
7
8
9 10
non-overlapping paths
non overlapping paths
Figure 5: Distribution of the number of non-
overlapping shortest paths in Chord for N = 1,024
(left). The same distribution in de Bruijn for N =
1,000, k = 10 (right).
quite unexpected given our previous discussion of expansion
properties of each graph. This result means that de Bruijn
(automatically) selects backup paths that do not overlap
with the best shortest path or with each other.
Next examine Figure 5, which shows the number of pair-
wise non-overlapping paths between any pair of nodes in
the corresponding graph (we exclude pairs (x,x) and di-
rect neighbors from the ﬁgure). Interestingly, 50% of pairs
(x,y) in Chord have only two non-overlapping shortest paths
Qi(x, y) and Qj(x, y). Hence, when nodes along these paths
fail, many alternative paths are likely to be aﬀected. Fur-
ther observe in the ﬁgure that the number of node-disjoint
paths in Chord is given by a right-shifted geometric distri-
bution with p = q = 1/2 and (asymptotic) mean 1 + 1
p =
3. Thus, no matter how many neighbors k Chord has, its
average number of node-disjoint paths Qi is no more than
3. Thus, for N = 32, the mean of the distribution is 2.61
and for N = 8,192 it is 2.99. As N tends to inﬁnity, the
expected number of node-disjoint paths tends to 3.
The right side of the same ﬁgure shows that de Bruijn
graphs have at least 9 non-overlapping paths between any
pair of nodes. This means that when nodes fail and packets
get re-routed along the optimal paths of each neighbor, they
have very little likelihood of encountering the already-failed
nodes. Qualitatively, this diﬀerence leads to better fault-
resilience of de Bruijn graphs and smaller diameter under
node failure.
In our next experiment, we introduced adversarial failures
into the network. We failed all nodes along the shortest path
from x to y and routed traﬃc through the second-best neigh-
bor (i.e., the neighbor that is expected to have the shortest
distance to y among the remaining neighbors). Then we
failed all nodes along the second-best path and examined
the third-best path, and so on. The distribution of aver-
age path lengths in the graph is shown in Figure 6. As
demonstrated by the ﬁgure, the average distance in Chord
rises to as high as 17.6 hops when routed through some
of the “suboptimal” neighbors. De Bruijn graphs, on the
other hand, maintain the same low diameter and the aver-
age distance rises only by one hop. Note that we plotted
the average distances according to path rank (from the best
to the worst), which does not necessarily represent the or-
der in which Chord or de Bruijn would typically choose the
next-best neighbor. However, as the ﬁgure shows, all backup
neighbors of de Bruijn graphs are approximately equivalent
and achieve the same suboptimal average distance. This
20
16
12
8
4
0
i
e
c
n
a
t
s
d
e
g
a
r
e
v
a
5
4
3
2
1
0
i
e
c
n
a
t
s
d
e
g
a
r
e
v
a
1
2
3
4
5
6
7
8
9 10
1
2
3
4
5
6
7
8
9 10
path rank
path rank
Figure 6: Distribution of shortest-path distances in
Chord for N = 1,024 (left) and de Bruijn for N =
1,000, k = 10 (right) under adversarial failures.
cannot be said about Chord, which has certain neighbors
that show tendency to construct shortest paths that always
overlap with the already-failed ones.
7. ODRI
We have accumulated suﬃcient evidence that shows that
de Bruijn graphs possess both short routing distances and
high fault tolerance. In this section, we discuss ODRI, Opti-
mal Diameter Routing Infrastructure, which builds de Bruijn
graphs incrementally and preserves their nice properties at
the application layer. Fortunately, de Bruijn graphs are very
simple to build incrementally and many of the details (some
of which we skip) are almost identical to those in Chord.
We also feel that the algorithmic structure of ODRI is much
simpler than that of other recently proposed ﬁxed-degree
graphs [25], [42].
Let Nmax be the maximum possible number of nodes in
the system (such as 1010). Organize the space of all possible
nodes between [0, Nmax − 1] into a modulo-Nmax number
ﬁeld. Now notice that each node x in de Bruijn graphs is
a base-k integer Hx and that its neighboring rules can be
expressed as:
Hx → (kHx + i) mod Nmax, i = 0, 1, ..., k − 1,
(16)
since a shift left by one digit is equivalent to multiplication
of Hx by k. In ODRI, each existing peer holds a consecutive
stretch of the number space, which can be denoted by [z1,
z2], for some z1, z2 ∈ [0, Nmax − 1]. To join the network, a
node routes to the area of the circle where its hash index Hx
is located and asks the previous owner of the zone to split
it in half. Notice that building the routing table for a newly
joined node requires only O(1) message complexity as it can
be copied from the previous owner of the zone. Notiﬁcation
of existing neighbors has another O(k) message overhead.
Peer-to-peer linking rules are also straightforward. Con-
sider node x that owns zone [z1, z2]. Each of the integer
values in [z1, z2] corresponds to the underlying de Bruijn
graph of size Nmax. Hence, to preserve de Bruijn linkage
at the application layer, x must connect to all peers hold-
ing the other end of each edge originating in [z1, z2]. This
means that there is an application-layer edge (x, y) if and
only if there is an edge (u, v) in the underlying de Bruijn
graph such that u ∈ Zx and v ∈ Zy, where Zx and Zy are
the corresponding zones held by x and y.
We next present several useful results about ODRI. We
ﬁrst address the issue of whether the application-layer graph
maintains ﬁxed degree and optimal diameter under the con-
dition of equal-size zones. We then extend this analysis to
random zones created by a uniform hashing function.
7.1 Equal-Size Zones
Lemma 13. If all zones have the same ﬁxed size, ODRI
maintains the application-layer degree equal to k.
Given the assumptions of the previous lemma, notice that
the application-layer graph in ODRI is a scaled-down version
of the underlying de Bruijn graph. Thus, the diameter of
the peer-to-peer graph under these conditions must remain
optimal as we show in the next lemma.
Lemma 14. If all zones have the same ﬁxed size, ODRI
builds an N-node application-layer de Bruijn graph with di-
ameter (cid:4)logk N(cid:5).
7.2 Random Zones
Achieving constant-size zones using distributed join and
leave processes is a non-trivial, but well-studied problem [2],
[27], [30]. Equal zone sizes are desirable as they maintain a
ﬁxed out-degree at the application layer and provide better
balancing of user objects between the peers. Assuming uni-
form random hashing, it can be shown [27], [30] that after a
sequence of N random joins, the maximum zone held by a
peer is larger than average by a factor of O(ln N ) with high
probability (note that the same bound applies to the max-
imum out-degree of each peer). The following result about
the application-layer in-degree is less obvious.
Lemma 15. Under a uniform hashing function, ODRI’s
in-degree at each peer is no less than k with high probability.
Our next result shows that the imbalance in zone sizes has
very little impact on the diameter of the peer-to-peer graph.
Lemma 16. Under a uniform hashing function, ODRI con-
structs a peer-level graph with diameter (cid:4)logk N(cid:5) (1 + o(1))
with high probability.
This lemma further implies that the average distance in
the application-layer graph is also asymptotically optimal.
7.3 Balancing Zones
To overcome imbalance in zone sizes in a highly dynamic
environment, ODRI implements a variation of the “power
of two choices” algorithm [2], [12], [27] during peer joins
and departures. To join an existing ODRI network, a node
x performs a biased walk through the graph starting in a
random location and searching for the largest node to split.
The walk is biased towards large nodes since they are more
likely to “know” other large nodes. During departure, node
x does the same biased walk looking for the smallest node
to take over its zone Zx. The details of this framework are
currently under investigation and will be presented in future
work.
8. CONCLUSION
At this stage of peer-to-peer research with an overwhelm-
ing number of recent proposals, it is hard to assess the bene-
ﬁts of one peer-to-peer network over another without a uni-
fying analytical framework that can capture graph-theoretic
properties of each proposal. In this paper, we studied the
diameter-degree tradeoﬀ question of DHT research and con-
ducted an extensive graph-theoretic comparison of several
existing methods in terms of their routing performance and
fault resilience. We then proposed a distributed architec-
ture based on de Bruijn graphs and demonstrated that it
oﬀers an optimal diameter for a given ﬁxed degree, opti-
mal resilience (k-node connectivity), large bisection width,
and good node expansion that guarantees very little over-
lap between parallel paths to any destination. Combining
all these ﬁndings with incremental construction of ODRI,
we conclude that de Bruijn graphs are viable and appealing
structures for peer-to-peer networks.
9. REFERENCES
[1] J. Aspnes, Z. Diamadi, and G. Shah, “Fault-Tolerant Rout-
ing in Peer-to-Peer Systems,” ACM PODC, July 2002.
[2] Y. Azar, A. Broder, A. Karlin, and E. Upfal, “Balanced
Allocations,” SIAM J. on Computing, vol. 29, no. 1, 1999.
[3] A.-L. Barabasi, R. Albert, and H. Jeong, “Scale-free Char-
acteristics of Random Networks: The Topology of the World
Wide Web,” Physica A 281, 2000.
[4] T. Bu and D. Towsley, “On Distinguishing between Internet
Power Law Topology Generators,” IEEE INFOCOM, 2002.
[5] C. Baransel, W. Doboseiwicz, and P. Gburzynski, “Routing
in Multi-hop Packet Switching Networks: Gbps Challenge,”
IEEE Network Magazine, 1995.
[6] W.G. Bridges and S. Toueg, “On the Impossibility of Di-
rected Moore Graphs,” Journal of Combinatorial Theory,
series B29, no. 3, 1980.
[7] F. Chung, “Diameters of Communication Networks,” Math-
ematics of Information Processing, 1984.
[8] J. Considine and T.A. Florio, “Scalable Peer-to-Peer Index-
ing with Constant State,” Boston U. Technical Report 2002-
026, August 2002.
[9] D.-Z. Du, D.F. Hsu, H.Q. Ngo, and G.W. Peck, “On Con-
nectivity of Consecutive-d Digraphs,” Discrete Mathematics,
vol. 257, no. 2-3, 2002.
[10] R. Feldmann, B. Monien, P. Mysliwietz, and S. Tschoke, “A
Better Upper Bound on the Bisection Width of de Bruijn
Networks,” Symposium on Theoretical Aspects of Computer
Science (STACS), 1997.
[11] A. Fiat and J. Saia, “Censorship Resistant Peer-to-Peer Con-
tent Addressable Networks,” Symposium on Discrete Algo-
rithms, 2002.
[12] P. Fraigniaud and P. Gauron, “An Overview of the Content-
Addressable Network D2B,” ACM PODC, 2003.
[13] M.J. Freedman and R. Vingralek, “Eﬃcient Peer-To-Peer
Lookup Based on a Distributed Trie,” IPTPS, March 2002.
[14] P. Ganesan, Q. Sun, and H. Garcia-Molina, “YAPPERS:
A Peer-to-Peer Lookup Service over Arbitrary Topology,”
IEEE INFOCOM, March 2003.
[15] K.P. Gummadi, R. Gummadi, S.D. Gribble, S. Ratnasamy,
S. Shenker, and I. Stoica, “The Impact of DHT Routing
Geometry on Resilience and Proximity,” ACM SIGCOMM,
August 2003.
[16] P. Gupta and P.R. Kumar, “The Capacity of Wireless Net-
works,” IEEE Trans. on Information Theory, March 2000.
[17] K. Hildrum, J. Kubiatowicz, S. Rao, and B.Y. Zhao, “Dis-
tributed Object Location in a Dynamic Network,” ACM
SPAA, August 2002.
[18] M.G. Hluchyj and M.J. Karol, “Shuﬄenet: An Application
of Generalized Perfect Shuﬄes to Multihop Lightwave Net-
works,” IEEE INFOCOM, 1988.
[19] M. Imase and M. Itoh, “Design to Minimize Diameter on
Building-Block Network,” IEEE Trans. on Computers, vol.
30, 1981.
[20] F. Kaashoek and D.R. Karger, “Koorde: A Simple Degree-
optimal Hash Table,” IPTPS, February 2003.
[21] C. Law and K.-Y. Siu, “Distributed Construction of Random
Expander Graphs,” IEEE INFOCOM, 2003.
[22] F.T. Leighton, “Introduction to Parallel Algorithms and Ar-
chitectures: Arrays, Trees, Hypercubes,” Academic Press /
Morgan Kaufmann, 1991.
[23] D. Liben-Nowell, H. Balakrishnan, and D. Karger, “Analysis
of the Evolution of Peer-to-Peer Networks,” ACM PODC,
2002.
[24] D. Loguinov, A. Kumar, V. Rai, and S. Ganesh, “Graph-
Theoretic Analysis of Structured Peer-to-Peer Systems: Rout-
ing Distances and Fault Resilience,” Texas A&M Technical
Report, 2003.
[25] D. Malkhi, M. Naor, D. Ratajczak, “Viceroy: A Scalable and
Dynamic Emulation of the Butterﬂy,” ACM PODC, 2002.
[26] G.S. Manku, M. Bawa, and P. Raghavan, “Symphony: Dis-
tributed Hashing in a Small World,” USITS, 2003.
[27] M. Naor and U. Wieder, “Novel Architectures for P2P Appli-
cations: the Continuous-Discrete Approach,” ACM SPAA,
June 2003.
[28] G. Pandurangan, P. Raghavan, and E. Upfal, “Building Low-
Diameter P2P Networks,” IEEE Symposium on Foundations
in Comp. Sci., 2001.
[29] C.G. Plaxton, R. Rajaraman, A.W. Richa, “Accessing Nearby
Copies of Replicated Objects in a Distributed Environment,”
ACM SPAA, 1997.
[30] M. Raab and A. Steger, “Balls into Bins – A Simple and
Tight Analysis,” RANDOM, 1998.
[31] S. Ratnasamy, P. Francis, M. Handley, R. Karp, and S.
Shenker, “A Scalable Content-Addressable Network,” ACM
SIGCOMM, August 2001.
[32] S. Ratnasamy, S. Shenker, I. Stoica, “Routing Algorithms
for DHTs: Some Open Questions,” IPTPS, 2002.
[33] S.M. Reddy, J.G. Kuhl, S.H. Hosseini, and H. Lee, “On
Digraph with Minimum Diameter and Maximum Connec-
tivity,” Proceedings of Allerton Conf. on Communications,
Control and Computers, 1982.
[34] J. Rolim, P. Tvrdik, J. Trdlicka, and I. Vrto, “Bisecting de
Bruijn and Kautz Graphs,” Discrete Applied Math, vol. 85,
no. 1, June 1998.
[35] A. Rowstron and P. Druschel, “Pastry: Scalable, Decen-
tralized Object Location and Routing for Large-Scale Peer-
to-Peer Systems,” IFIP/ACM International Conference on
Distributed Systems Platforms, November 2001.
[36] J. Saia, A. Fiat, S. Gribble, A.R. Karlin, and S. Saroiu, “Dy-
namically Fault-Tolerant Content Addressable Networks,”
IPTPS, March 2002.
[37] M. Schlosser, M. Sintek, S. Decker, and W. Nejdl, “Hyper-
CuP – Hypercubes, Ontologies and Eﬃcient Search on P2P
Networks,” Workshop on Agents and P2P Computing, 2002.
[38] K.N. Sivarajan and R. Ramaswami, “Lightwave Networks
Based on de Bruijn Graphs,” IEEE/ACM Trans. on Net-
working, vol. 2, no. 1, 1994.
[39] M.A. Sridhar and C.S. Raghavendra, “Fault-tolerant Net-
works Based on the de Bruijn Graph,” IEEE Trans. on
Computers, vol. 40, 1991.
[40] I. Stoica, R. Morris, D. Karger, M.F. Kaashoek, and H. Bal-
akrishnan, “Chord: A Scalable Peer-to-Peer Lookup Service
for Internet Applications,” ACM SIGCOMM, August 2001.
[41] D.A. Tran, K.A. Hua, and T.T. Do, “ZIGZAG: An Eﬃcient
Peer-to-Peer Scheme for Media Streaming,” IEEE INFO-
COM, 2003.
[42] J. Xu, A. Kumar, and X. Yu, “On the Fundamental Tradeoﬀs
between Routing Table Size and Network Diameter in Peer-
to-Peer Networks,” To Appear in IEEE JSAC, Nov. 2003.
[43] B.Y. Zhao, J.D. Kubiatowicz, and A. Joseph, “Tapestry: An
Infrastructure for Fault-Tolerant Wide-Area Location and
Routing,” UC Berkeley Technical Report, April 2001.
[44] S.Q. Zhuang, B.Y. Zhao, and A.D. Joseph, “Bayeux: An Ar-
chitecture for Scalable and Fault-Tolerant Wide-Area Data
Dissemination,” ACM NOSSDAV, June 2001.