### 3. Non-Overlapping Paths

#### 3.1 Distribution of Non-Overlapping Shortest Paths

**Figure 5** illustrates the distribution of the number of non-overlapping shortest paths in Chord for \( N = 1,024 \) (left) and in de Bruijn for \( N = 1,000 \) with \( k = 10 \) (right). The results are quite unexpected given our previous discussion on the expansion properties of each graph. Specifically, de Bruijn automatically selects backup paths that do not overlap with the best shortest path or with each other.

**Figure 5: Distribution of the number of non-overlapping shortest paths in Chord for \( N = 1,024 \) (left) and in de Bruijn for \( N = 1,000, k = 10 \) (right).**

Next, we examine **Figure 5**, which shows the number of pairwise non-overlapping paths between any pair of nodes in the corresponding graph (excluding pairs \((x, x)\) and direct neighbors). Interestingly, 50% of pairs \((x, y)\) in Chord have only two non-overlapping shortest paths \( Q_i(x, y) \) and \( Q_j(x, y) \). This means that when nodes along these paths fail, many alternative paths are likely to be affected. Further, the number of node-disjoint paths in Chord follows a right-shifted geometric distribution with \( p = q = 1/2 \) and an (asymptotic) mean of \( 1 + \frac{1}{p} = 3 \). Therefore, no matter how many neighbors \( k \) Chord has, its average number of node-disjoint paths \( Q_i \) is no more than 3. For \( N = 32 \), the mean of the distribution is 2.61, and for \( N = 8,192 \), it is 2.99. As \( N \) tends to infinity, the expected number of node-disjoint paths tends to 3.

The right side of the same figure shows that de Bruijn graphs have at least 9 non-overlapping paths between any pair of nodes. This implies that when nodes fail and packets get rerouted along the optimal paths of each neighbor, they have a very low likelihood of encountering already-failed nodes. Qualitatively, this difference leads to better fault-resilience in de Bruijn graphs and a smaller diameter under node failure.

#### 3.2 Adversarial Failures

In our next experiment, we introduced adversarial failures into the network. We failed all nodes along the shortest path from \( x \) to \( y \) and routed traffic through the second-best neighbor (i.e., the neighbor that is expected to have the shortest distance to \( y \) among the remaining neighbors). Then we failed all nodes along the second-best path and examined the third-best path, and so on. The distribution of average path lengths in the graph is shown in **Figure 6**. As demonstrated by the figure, the average distance in Chord rises to as high as 17.6 hops when routed through some of the "suboptimal" neighbors. In contrast, de Bruijn graphs maintain the same low diameter, and the average distance rises by only one hop. Note that we plotted the average distances according to path rank (from the best to the worst), which does not necessarily represent the order in which Chord or de Bruijn would typically choose the next-best neighbor. However, as the figure shows, all backup neighbors in de Bruijn graphs are approximately equivalent and achieve the same suboptimal average distance. This cannot be said about Chord, which has certain neighbors that show a tendency to construct shortest paths that always overlap with the already-failed ones.

**Figure 6: Distribution of shortest-path distances in Chord for \( N = 1,024 \) (left) and in de Bruijn for \( N = 1,000, k = 10 \) (right) under adversarial failures.**

### 4. ODRI: Optimal Diameter Routing Infrastructure

We have accumulated sufficient evidence that de Bruijn graphs possess both short routing distances and high fault tolerance. In this section, we discuss ODRI, which builds de Bruijn graphs incrementally and preserves their nice properties at the application layer. Fortunately, de Bruijn graphs are simple to build incrementally, and many of the details (some of which we skip) are almost identical to those in Chord. We also feel that the algorithmic structure of ODRI is much simpler than that of other recently proposed fixed-degree graphs [25], [42].

Let \( N_{\text{max}} \) be the maximum possible number of nodes in the system (such as \( 10^{10} \)). Organize the space of all possible nodes between \([0, N_{\text{max}} - 1]\) into a modulo-\(N_{\text{max}}\) number field. Each node \( x \) in de Bruijn graphs is a base-\( k \) integer \( H_x \), and its neighboring rules can be expressed as:

\[ H_x \rightarrow (kH_x + i) \mod N_{\text{max}}, \quad i = 0, 1, \ldots, k - 1, \]

since a shift left by one digit is equivalent to multiplication of \( H_x \) by \( k \). In ODRI, each existing peer holds a consecutive stretch of the number space, denoted by \([z_1, z_2]\) for some \( z_1, z_2 \in [0, N_{\text{max}} - 1] \). To join the network, a node routes to the area of the circle where its hash index \( H_x \) is located and asks the previous owner of the zone to split it in half. Building the routing table for a newly joined node requires only \( O(1) \) message complexity, as it can be copied from the previous owner of the zone. Notification of existing neighbors has another \( O(k) \) message overhead.

Peer-to-peer linking rules are also straightforward. Consider node \( x \) that owns zone \([z_1, z_2]\). Each of the integer values in \([z_1, z_2]\) corresponds to the underlying de Bruijn graph of size \( N_{\text{max}} \). Hence, to preserve de Bruijn linkage at the application layer, \( x \) must connect to all peers holding the other end of each edge originating in \([z_1, z_2]\). This means there is an application-layer edge \((x, y)\) if and only if there is an edge \((u, v)\) in the underlying de Bruijn graph such that \( u \in Z_x \) and \( v \in Z_y \), where \( Z_x \) and \( Z_y \) are the corresponding zones held by \( x \) and \( y \).

We next present several useful results about ODRI. We first address the issue of whether the application-layer graph maintains a fixed degree and optimal diameter under the condition of equal-size zones. We then extend this analysis to random zones created by a uniform hashing function.

#### 4.1 Equal-Size Zones

**Lemma 13.** If all zones have the same fixed size, ODRI maintains the application-layer degree equal to \( k \).

Given the assumptions of the previous lemma, notice that the application-layer graph in ODRI is a scaled-down version of the underlying de Bruijn graph. Thus, the diameter of the peer-to-peer graph under these conditions must remain optimal, as we show in the next lemma.

**Lemma 14.** If all zones have the same fixed size, ODRI builds an \( N \)-node application-layer de Bruijn graph with diameter \( \lceil \log_k N \rceil \).

#### 4.2 Random Zones

Achieving constant-size zones using distributed join and leave processes is a non-trivial but well-studied problem [2], [27], [30]. Equal zone sizes are desirable as they maintain a fixed out-degree at the application layer and provide better balancing of user objects between the peers. Assuming uniform random hashing, it can be shown [27], [30] that after a sequence of \( N \) random joins, the maximum zone held by a peer is larger than average by a factor of \( O(\ln N) \) with high probability (note that the same bound applies to the maximum out-degree of each peer). The following result about the application-layer in-degree is less obvious.

**Lemma 15.** Under a uniform hashing function, ODRI’s in-degree at each peer is no less than \( k \) with high probability.

Our next result shows that the imbalance in zone sizes has very little impact on the diameter of the peer-to-peer graph.

**Lemma 16.** Under a uniform hashing function, ODRI constructs a peer-level graph with diameter \( \lceil \log_k N \rceil (1 + o(1)) \) with high probability.

This lemma further implies that the average distance in the application-layer graph is also asymptotically optimal.

#### 4.3 Balancing Zones

To overcome imbalance in zone sizes in a highly dynamic environment, ODRI implements a variation of the “power of two choices” algorithm [2], [12], [27] during peer joins and departures. To join an existing ODRI network, a node \( x \) performs a biased walk through the graph starting in a random location and searching for the largest node to split. The walk is biased towards large nodes since they are more likely to “know” other large nodes. During departure, node \( x \) does the same biased walk looking for the smallest node to take over its zone \( Z_x \). The details of this framework are currently under investigation and will be presented in future work.

### 5. Conclusion

At this stage of peer-to-peer research, with an overwhelming number of recent proposals, it is hard to assess the benefits of one peer-to-peer network over another without a unifying analytical framework that can capture graph-theoretic properties of each proposal. In this paper, we studied the diameter-degree tradeoff question in DHT research and conducted an extensive graph-theoretic comparison of several existing methods in terms of their routing performance and fault resilience. We then proposed a distributed architecture based on de Bruijn graphs and demonstrated that it offers an optimal diameter for a given fixed degree, optimal resilience (k-node connectivity), large bisection width, and good node expansion that guarantees very little overlap between parallel paths to any destination. Combining all these findings with the incremental construction of ODRI, we conclude that de Bruijn graphs are viable and appealing structures for peer-to-peer networks.

### 6. References

[1] J. Aspnes, Z. Diamadi, and G. Shah, “Fault-Tolerant Routing in Peer-to-Peer Systems,” ACM PODC, July 2002.
[2] Y. Azar, A. Broder, A. Karlin, and E. Upfal, “Balanced Allocations,” SIAM J. on Computing, vol. 29, no. 1, 1999.
[3] A.-L. Barabasi, R. Albert, and H. Jeong, “Scale-free Characteristics of Random Networks: The Topology of the World Wide Web,” Physica A 281, 2000.
[4] T. Bu and D. Towsley, “On Distinguishing between Internet Power Law Topology Generators,” IEEE INFOCOM, 2002.
[5] C. Baransel, W. Doboseiwicz, and P. Gburzynski, “Routing in Multi-hop Packet Switching Networks: Gbps Challenge,” IEEE Network Magazine, 1995.
[6] W.G. Bridges and S. Toueg, “On the Impossibility of Directed Moore Graphs,” Journal of Combinatorial Theory, series B29, no. 3, 1980.
[7] F. Chung, “Diameters of Communication Networks,” Mathematics of Information Processing, 1984.
[8] J. Considine and T.A. Florio, “Scalable Peer-to-Peer Indexing with Constant State,” Boston U. Technical Report 2002-026, August 2002.
[9] D.-Z. Du, D.F. Hsu, H.Q. Ngo, and G.W. Peck, “On Connectivity of Consecutive-d Digraphs,” Discrete Mathematics, vol. 257, no. 2-3, 2002.
[10] R. Feldmann, B. Monien, P. Mysliwietz, and S. Tschoke, “A Better Upper Bound on the Bisection Width of de Bruijn Networks,” Symposium on Theoretical Aspects of Computer Science (STACS), 1997.
[11] A. Fiat and J. Saia, “Censorship Resistant Peer-to-Peer Content Addressable Networks,” Symposium on Discrete Algorithms, 2002.
[12] P. Fraigniaud and P. Gauron, “An Overview of the Content-Addressable Network D2B,” ACM PODC, 2003.
[13] M.J. Freedman and R. Vingralek, “Efficient Peer-To-Peer Lookup Based on a Distributed Trie,” IPTPS, March 2002.
[14] P. Ganesan, Q. Sun, and H. Garcia-Molina, “YAPPERS: A Peer-to-Peer Lookup Service over Arbitrary Topology,” IEEE INFOCOM, March 2003.
[15] K.P. Gummadi, R. Gummadi, S.D. Gribble, S. Ratnasamy, S. Shenker, and I. Stoica, “The Impact of DHT Routing Geometry on Resilience and Proximity,” ACM SIGCOMM, August 2003.
[16] P. Gupta and P.R. Kumar, “The Capacity of Wireless Networks,” IEEE Trans. on Information Theory, March 2000.
[17] K. Hildrum, J. Kubiatowicz, S. Rao, and B.Y. Zhao, “Distributed Object Location in a Dynamic Network,” ACM SPAA, August 2002.
[18] M.G. Hluchyj and M.J. Karol, “ShuffleNet: An Application of Generalized Perfect Shuffles to Multihop Lightwave Networks,” IEEE INFOCOM, 1988.
[19] M. Imase and M. Itoh, “Design to Minimize Diameter on Building-Block Network,” IEEE Trans. on Computers, vol. 30, 1981.
[20] F. Kaashoek and D.R. Karger, “Koorde: A Simple Degree-Optimal Hash Table,” IPTPS, February 2003.
[21] C. Law and K.-Y. Siu, “Distributed Construction of Random Expander Graphs,” IEEE INFOCOM, 2003.
[22] F.T. Leighton, “Introduction to Parallel Algorithms and Architectures: Arrays, Trees, Hypercubes,” Academic Press / Morgan Kaufmann, 1991.
[23] D. Liben-Nowell, H. Balakrishnan, and D. Karger, “Analysis of the Evolution of Peer-to-Peer Networks,” ACM PODC, 2002.
[24] D. Loguinov, A. Kumar, V. Rai, and S. Ganesh, “Graph-Theoretic Analysis of Structured Peer-to-Peer Systems: Routing Distances and Fault Resilience,” Texas A&M Technical Report, 2003.
[25] D. Malkhi, M. Naor, D. Ratajczak, “Viceroy: A Scalable and Dynamic Emulation of the Butterfly,” ACM PODC, 2002.
[26] G.S. Manku, M. Bawa, and P. Raghavan, “Symphony: Distributed Hashing in a Small World,” USITS, 2003.
[27] M. Naor and U. Wieder, “Novel Architectures for P2P Applications: the Continuous-Discrete Approach,” ACM SPAA, June 2003.
[28] G. Pandurangan, P. Raghavan, and E. Upfal, “Building Low-Diameter P2P Networks,” IEEE Symposium on Foundations in Comp. Sci., 2001.
[29] C.G. Plaxton, R. Rajaraman, A.W. Richa, “Accessing Nearby Copies of Replicated Objects in a Distributed Environment,” ACM SPAA, 1997.
[30] M. Raab and A. Steger, “Balls into Bins – A Simple and Tight Analysis,” RANDOM, 1998.
[31] S. Ratnasamy, P. Francis, M. Handley, R. Karp, and S. Shenker, “A Scalable Content-Addressable Network,” ACM SIGCOMM, August 2001.
[32] S. Ratnasamy, S. Shenker, I. Stoica, “Routing Algorithms for DHTs: Some Open Questions,” IPTPS, 2002.
[33] S.M. Reddy, J.G. Kuhl, S.H. Hosseini, and H. Lee, “On Digraph with Minimum Diameter and Maximum Connectivity,” Proceedings of Allerton Conf. on Communications, Control and Computers, 1982.
[34] J. Rolim, P. Tvrdik, J. Trdlicka, and I. Vrto, “Bisecting de Bruijn and Kautz Graphs,” Discrete Applied Math, vol. 85, no. 1, June 1998.
[35] A. Rowstron and P. Druschel, “Pastry: Scalable, Decentralized Object Location and Routing for Large-Scale Peer-to-Peer Systems,” IFIP/ACM International Conference on Distributed Systems Platforms, November 2001.
[36] J. Saia, A. Fiat, S. Gribble, A.R. Karlin, and S. Saroiu, “Dynamically Fault-Tolerant Content Addressable Networks,” IPTPS, March 2002.
[37] M. Schlosser, M. Sintek, S. Decker, and W. Nejdl, “HyperCuP – Hypercubes, Ontologies and Efficient Search on P2P Networks,” Workshop on Agents and P2P Computing, 2002.
[38] K.N. Sivarajan and R. Ramaswami, “Lightwave Networks Based on de Bruijn Graphs,” IEEE/ACM Trans. on Networking, vol. 2, no. 1, 1994.
[39] M.A. Sridhar and C.S. Raghavendra, “Fault-tolerant Networks Based on the de Bruijn Graph,” IEEE Trans. on Computers, vol. 40, 1991.
[40] I. Stoica, R. Morris, D. Karger, M.F. Kaashoek, and H. Balakrishnan, “Chord: A Scalable Peer-to-Peer Lookup Service for Internet Applications,” ACM SIGCOMM, August 2001.
[41] D.A. Tran, K.A. Hua, and T.T. Do, “ZIGZAG: An Efficient Peer-to-Peer Scheme for Media Streaming,” IEEE INFOCOM, 2003.
[42] J. Xu, A. Kumar, and X. Yu, “On the Fundamental Tradeoffs between Routing Table Size and Network Diameter in Peer-to-Peer Networks,” To Appear in IEEE JSAC, Nov. 2003.
[43] B.Y. Zhao, J.D. Kubiatowicz, and A. Joseph, “Tapestry: An Infrastructure for Fault-Tolerant Wide-Area Location and Routing,” UC Berkeley Technical Report, April 2001.
[44] S.Q. Zhuang, B.Y. Zhao, and A.D. Joseph, “Bayeux: An Architecture for Scalable and Fault-Tolerant Wide-Area Data Dissemination,” ACM NOSSDAV, June 2001.