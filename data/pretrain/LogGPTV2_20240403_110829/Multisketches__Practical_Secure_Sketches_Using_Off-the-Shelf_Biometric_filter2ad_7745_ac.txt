4.2 Prototyping TenSketch
We build a prototype of TenSketch to evaluate practical feasibility.
We use a tenprint dataset shared by NIST [2]. Below we give details
of the dataset and our implementation.
Data source. NIST released a tenprint dataset titled SD09 [2] in
2009. It contains full tenprints for 2, 700 individuals, two images per
finger, for a total of 54, 000 fingerprint impressions. This is one of
the largest datasets of tenprints released by NIST and widely used
by the biometric research community (e.g., [60]). It also contains
the gender of each subject and some meta-level information about
each fingerprint, such as finger position, NCIC class [43], etc.
Among the dataset subjects, 88.8% are male, and the remaining
are female (except two subjects with unspecified genders). Each
fingerprint is assigned one of the six classes defined by NCIC [43]:
arch (A), left-loop (L), right-loop (R), tented-arch (T), whorl (W), and
scar or mutilation (S). The majority (more than 93%) of fingerprints
are either of type W, L, or R.
Matching algorithm. TenSketch can operate with any matching
algorithm, and, in some cases, the algorithm can be changed without
needing to make any changes in the database. For our experiment,
we use Bozorth3 [41] as our matching algorithm ℒ for matching fin-
gerprints. Bozorth3 was published by NIST with its NIST Biometric
Image Software (NBIS) package. It’s a widely embraced fingerprint
matching algorithm in research (see, e.g., [22, 44]).
Bozorth3 works on minutiae, distinguished points in a finger-
print, representing ridge, bifurcations, or endings. Each minutia is
represented as a tuple consisting of x, y, an angle θ, and a quality
Procedure
SS∆
t
Rec∆
t
MS
MRec
MRec (parallelized)
Time (s)
Avg
0.13
0.14
0.13
176.67
59.12
Var
0.01
0.01
0.02
59.34
9.23
Figure 6: Performance of prototype implementation of TenSketch on an
Intel Xeon 5 machine. Other parameters are N = 2500, t = 7, and l = 2. The
numbers are the average across 100 trials. The cause of the high standard
deviation is from Bozorth3, as it takes different amounts of time for different
probe fingerprints. The last row shows the performance when we parallelize
the recovery procedure across 10 virtual cores of Xeon 5 machine using
Python multiprocessing library.
46 GB RAM. Among all four procedures, the recovery procedure
MRec consumes the maximum amount of physical memory, but
that is still less than 256 MB. MRec is also relatively slow — takes
about three minutes on a single thread of a Xeon 5 processor —
compared to traditional login procedures during authentication.
The MRec procedure tries to find the best matches of each fin-
gerprint scan against all the fingerprint templates stored in the
database using Bozorth3 one-to-many matching algorithm. This is
the most expensive part of the computation. The performance can
be greatly improved via parallelization and faster implementation
of Bozorth3 using graphics processing units (GPUs) (c.f., [19]). We
tried a naive parallelization using Python Multiprocessing and run-
ning the matching of ten fingers in ten (virtual) cores. The average
time for MRec becomes in this case about a minute, but essentially
arbitrary parallelization is possible. The variance of the time taken
by Bozorth3 one-to-many algorithm matching is reflected in the
time taken by MRec.
The storage overhead of TenSketch is nearly 2x compared to tra-
ditional biometric databases: The database has to store the original
fingerprints, as well as the set-distance sketch output by Rec∆
t . If
the goal of the TenSketch is only to recover a high entropy key, say
128-bit, then instead of storing the encryption of the whole tenprint,
one can store the encryption of the 128-bit key. Each fingerprint
tuple is represented as 600 integers (x, y, and θ; we ignore quality
values). In our implementation of TenSketch, 64 KB of space is
required per user (whereas a plaintext tenprints takes 24 KB).
Accuracy. We compute the accuracy of TenSketch according to
the Accuracy function defined in Figure 3. As discussed before, we
instantiate a TenSketch database with 2, 500 randomly sampled
users from SD09 dataset. We used the first impression as a template
which is stored in the database, and the second impression in SD09
as a probe. To compute the false non-matching rate (FNMR), we
sample 1, 000 users randomly who are registered with our TenS-
ketch, and then try to recover the users using the probe impression
given in SD09 for those users.
We found the FNMR rate was quite high: 11%, 9%, and 8% for
l = 1, 2, and 3, respectively. The higher value of l will require more
combination of messages to check during MRec and adds significant
computational overhead. We, therefore, decided on l = 2.
The high FNMR rate of TenSketch is due to low accuracy of Bo-
zorth3 algorithm for many-to-one matching — finding a matching
Figure 5: Performance of Bozorth3 for different numbers of minutiae
points.
value q. A fingerprint template is represented as a list of minutiae
— a format known as xyt format. We used the NIST mindtct algo-
rithm (part of the NBIS package [41]) to extract minutiae points
from each fingerprint image. Bozorth3 takes a pair of fingerprints
in xyt format, and outputs a matching score.
Fingerprints differ in their numbers of readable minutiae. While
more minutiae provide better matching accuracy, they might lead
to better correlation attacks (see Section 5). We therefore truncate
each fingerprint to have a maximum of r minutia points. For finger-
prints with more than r minutiae, we considered the r best-quality
minutiae (based on the quality value given by mindtct). Truncating
minutiae points can affect accuracy, which we investigate next.
In the SD09 dataset, 47% fingerprints have 200 or more minutiae
points. We tested the accuracy of Bozorth3 algorithm with different
values of r, and found the performance changes negligibly for con-
sidering r ≥ 160, as shown in Figure 5. We chose r = 200 as a limit
with sufficient slack in case more advanced matching algorithms
are proposed. Higher numbers of minutiae can also benefit the
attacker, and therefore our security analysis in Section 7 provides
a conservative estimate of an attacker’s advantage.
Implementation of TenSketch. We implemented TenSketch as
a Python 3.6 application. The database is instantiated with sqlite3
database. The fingerprint matching, as mentioned above, is done
using Bozorth3 [41]. For the cryptographic functions, we used the
Cryptography.io [8] library. We set t = 7. During recovery, for
each fingerprint, we find at most l = 2 best matches with Bozorth3
matching threshold as 10.
We use the data of randomly sampled 2, 500 SD09 subjects to
construct the database D of TenSketch. Of the two impressions
per finger in SD09, we pick the first set to store in the TenSketch
database as templates; we use the second set of fingerprints for
probing. The MS procedure does not check whether a user is already
registered. In practice, it is important to have a supplementary
procedure to ensure against duplicate users or fingerprints, which
can undercut the correctness guarantees provided by TenSketch.
Computational performance. The computational performance
of our implementation is shown in Figure 6. The median time taken
among 100 runs for each of the core functions are reported. The
experiment is done on a single thread of Xeon 5 processor with
50100150200250# of Minutiae Points Considered010203040506070FPR @ 90% TPR (%)fingerprint in a list. Though Bozorth3 has relatively low equal-error-
rate for one-to-one matching (4%), in general, 67% of the correct
template pairs are not assigned the highest matching score. FNMR
rate (with l = 2) is worse for the little and the ring fingers (20%-
25%), while around 7% for all the remaining fingers. Use of error
correction in TenSketch helps improve accuracy. Therefore, we
observed the FNMR rate of TenSketch can be reduced to 4% if we
choose to have more error tolerance (t = 6).
For computing the false matching rate (FMR), we performed two
experiments. First with fingerprints chosen from the one stored in
the database, and the second one using unregistered tenprints. To
simulate the first setting, we randomly pick 1, 000 tenprints from
the database, and use that to recover any meaningful information
from the database (i.e., a valid tenprint from the database). In the
second setting, we use the hold-out 200 users from SD09 and tried
to apply MRec with those template tuples. In either of the settings,
MRec failed to recover any valid tuple, meaning FMR of MRec is
zero for a database size of 2, 500 users.
We can use a matching threshold to ignore low-value matches,
and thereby further reduce the FMR. However, in our experiments
with Bozorth3 and SD09 dataset, we found the threshold on the
matching score does no affect the false matching rate. It is very
unlikely that t fingers of a user will be matched to t fingers of
an imposter. If a different matching algorithm is used, instead of
Bozorth3, that has higher FMR for TenSketch, FMR can be adjusted
by varying the matching threshold.
Improving performance and accuracy. As shown above, the
computational and matching performance of TenSketch heavily
depends on the underlying matching algorithm, which is in this
case Bozorth3. Here we give analytical estimates of TenSketch
performance for alternative matching algorithms.
Accelerating fingerprint matching using GPUs is an active topic
of research (c.f. [19, 35]). Cappelli et al. [19] demonstrate finger-
print matching rates of 9 million matches per second with a single
NVIDIA Tesla C2075 GPU. For a database with a million users, us-
ing the Cappelli et al.’s algorithm on, e.g., an 4-GPU server, MRec
would take less than half a second to complete. For systems like
Aadhaar [3], with more than a billion users, the databases (ℐ,ℱ)
can be partitioned into clusters of a million users each. (TenSketch
with a million users is sufficient to provide 110 bits of security.
See Section 5 for details.)
The FNMR rate can also be reduced by having a better finger-
print matching algorithm. Cappelli et al.’s algorithm [19] has an
FNMR of 1.25% with FMR of 0%. It is unclear, however, how the
matching accuracy varies across different fingers. (We could not
obtain their code for testing.) We therefore report on experiments
with another proprietary matching algorithm, Verifinger, from Neu-
rotechnology [10]. Verifinger works well over mated fingerprints,
but not with inked fingerprint. SD09 contains only inked finger-
prints. Therefore, to measure the efficacy of our multisketch scheme
with Verifinger, we used a mated fingerprint dataset [25], which we
refer to as the WVU dataset. (More details of WVU dataset are given
in Appendix C.) TenSketch with Verifinger as matching algorithm
achieves perfect accuracy for l = 2 and t = 7 on the WVU dataset.
We used Bozorth3, because it is open-source. However, changing
the matching algorithm in a multisketch system is easy — a key
benefit of multisketches over prior template protection techniques.
Moreover, in multisketches swapping in a new matching algorithm
requires no database changes, provided that the stored biometrics
are compatible with the new matching algorithm.
5 SECURITY OF TENSKETCH
The main concern with large biometric databases is the scale of
impact of compromise, which could in some cases impact millions or
billions of users. We design multisketches that decouples biometric
information from individual identities to prevent an attacker form
learning any meaningful information after stealing the biometric
database. In this section, we formalize the threat model we consider
for TenSketch and analyze its security.
Threat model. We consider smash-and-grab attacks, where the
adversary ephemerally compromises the server and grabs the sketch
databases (ℐ,ℱ). Such smash-and-grab attacks are the most preva-
lent form of credential compromise, e.g., passwords. The adversary
aims to learn the tenprint of some user. We assume the adversary
knows the matching algorithm ℒ and the multisketch MSℒ
t and
MRecℒ
t procedures. Additionally, the attacker might also know at
most b fingerprints of some users, where b is a parameter of the
security definition.
We don’t consider stronger adversaries, e.g., a persistent passive
adversary that can observe user registrations. Such an adversary
can indeed learn users’ biometrics trivially: It observes database
changes as users register or authenticate — either action revealing
their tenprints. Similar to persistent attackers, an attacker with
access to multiple snapshots of the database at different times can
identify newly added templates, resulting in a narrowed search
space. We do observe, though, that even against these stronger
adversaries, a multisketch system provides meaningful protection:
Users whose templates are not observed by an adversary remain
protected as long as there are sufficiently many uncompromised
users.
We note that fingerprint matching times can vary for different
fingerprints. Thus an attacker who can observe the authentication
timings of a user might be able to prune the set of candidate finger-
prints for that user. Such timing-based side channels, however, can
be mitigated by normalizing the matching times for all users.
We also assume that every user is present at most once in the
database and the fingerprint template database ℱ does not contain
any duplicates. The first assumption can be enforced at registration
time by ensuring an individual user does not register more than
once. Such is enforced in large scale biometric database systems [3].
The second assumption is normally true for biometrics because the
representation of biometric templates are large and it is extremely
unlikely that templates of two different individuals are the same.
(The entropy of the biometric recognition system, however, is not
much (about 16-bits [7]) due to error in readers and unavailability
of better matching algorithms.)
Attack models. The threat model as described is very similar to
the one used for password databases. Following the precedence from
passwords [17], we model two different types of attacks against
TenSketch: targeted and untargeted. In the targeted setting, the
attacker seeks to learn the tenprint w of a particular user u. In
the untargeted setting, the attacker tries to find the tenprint of
any user in the database. We specify security games TarGuess and
UnTarGuess respectively for these adversaries in Figure 3; adver-
sarial success is the probability that the relevant security game
outputs true.
Note that for any attackerℬ for TarGuess, we can find an attacker
𝒜 for UnTarGuess that queries ℬ with each user in ℐ, and outputs
any result from ℬ other than ⊥. Thus:
Pr
UnTarGuess𝒜 = true
TarGuessℬ = true
.
(cid:105)
We can come to another inequality by constructing an adversary
ℬ which, when challenged on a user u, queries 𝒜. If 𝒜 outputs a
tenprint for a user u′ and u = u′, ℬ outputs that. Therefore, ℬ wins
with probability equal to 𝒜 when u = u′, else it fails. Therefore,
Pr
TarGuessℬ = true
UnTarGuess𝒜 = true
.
(cid:105)
(cid:104)
(cid:104)
(cid:104)
(cid:105) ≥ Pr