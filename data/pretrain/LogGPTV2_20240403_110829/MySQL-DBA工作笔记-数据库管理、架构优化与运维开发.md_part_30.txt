/ms
一个小时的数据情况。但是结果的差别却很大。
Jne
t day of themonth forthe argument
theyear(1-366)
alue(interval) froma date
Is)toadatevalue
Description
adate
第4章SQL开发规范和基础|167
---
## Page 190
168丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
at which
began
0to6，
式在优化器中是没法直接识别到对应的值的，所以每次调用都会重新获取。
到的是一个静态值，所以在查询中，优化器能够识别出对应的数据区间。而 sysdate)的方
务，而对于 sysdate()的方式，得到的始终是一个动态的值。如下：
据过程放大。
mysql>
mysql>
(）MON
mysql> SELECT
mysql> SELECT
If the fsp argument is given to specify a fractional seconds precision fron
|SYSDATE ()
NOW([fsp])
感兴趣的可以看下官方文档的解释：
再进一步，为什么会出现这种情况。其实本质就是在优化器层面的处理了，now)得
进一步，对于 nowO的数据，可以理解为是一个常量，而 sysdate(是一个变量。
1 row in set (2.00 sec)
>>SELECT NOW(），SLEEP(2)，NOW（);
如果是
如果要模拟这个问题，可以使用对比的方式来做。中间可以通过 sleep(x)的方式把数
| 2018-08-24 17:14:431
SYSDATE ()
1 2018-08-24 17:13:541
2006-04-12
NOW()
row in set (2.00 sec)
NOW()
to
thereturn
the function or triggering statement began to execute.) This differs
execute.
）returnsa
->20071215235026.000000
是nowO的方式，得到的是一个相对静态的值，哪怕在一个 SQL 里面做多项任
'2007-12-15
13:47:36
SELECT
NOW()
SELECT
ISLEEP(2）
ISLEEP(2）丨NOW()
23:50:26
SLEEP(2）丨 SYSDATE()
SLEEP(2）
 stored function or trigger, 
SYSDATE()，
0|2018-08-2417:14:45|
012018-08-2417:13:541
丨NOW()
NOW(），
SYSDATE()
2006-04-12 13:47:361
+
the
function
current
SLEEP(2)，
SLEEP(2),
NOW()
time zone.
SYSDATE();
NOW();
---
## Page 191
增字段值。
户名允许通过哪些登录主机连接MySQL服务器
system_userO函数与 session_user(O函数是user()函数的别名。current_userO函数用于获取该账
@@pseudo_thread id系统变量的值相同；databaseO函数与 schemaO函数用于获取当前操作的数据库。
4.4.6
值与@@version 静态变量的值相同。
4.4.5
differences
current date and time.
·自增字段值如果是数据库用户自己指定而不是自动生成，那么 last _insert_id)函数
·last_insert_idO函数仅仅用于获取当前 MySQL 会话时 insert或update 语句设置的自
(1)last_insert_idO函数返回当前 MySQL 会话最后一次 insert 或 update 语句设置的自
userO函数用于获取通过哪一台登录主机、使用什么账户名成功连接 MySQL 服务器，
·last_insert_idO函数与表无关。如果向表 A 插入数据后再向表 B 插入数据，
·假如使用一条 insert 语句插入多行记录，last_insert_idO函数只返回第一条记录的自增字段值。
（2）last_insert_idO函数的返回结果遵循一定的原则。
1．获得当前 MySQL 会话最后一次自增字段值
（2）获取数据库用户信息的函数
connection_idO函数用于获取当前 MySQL 服务器的连接 ID，该函数的返回值与
（1）有关MySQL服务器连接的函数
2.关于MySQL服务器连接的函数
versionO函数用于获取当前 MySQL 服务实例使用的 MySQL 版本号，该函数的返回
说明如下：
1．关于 MySQL 服务实例的函数
的返回值为0；
增字段值，该函数的返回值与系统会话变量@@last_insert_id的值一致；
2006-04-1213:47:441
last_insert_idO函数返回表B的自增字段值。
其他常用的MySQL 函数
系统信息函数
the
to
between the
 description
zero
two functions.
s of SYSDATE().
012006-04-1213:47:461
for
 additional
to return that value. Setting the
information about
第4章SQL开发规范和基础|169
logha
the
the
---
## Page 192
170丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
3232236031;
整数转换为 IP地址（字符串数据)。
('200.100.30.241')
1 row in set (0.07 sec)
mysql> select field('yang','yang','jian','rong');
field(str,strl,str2,str3.)#返回 str 在所有字符元素中的索引，该函数是 elt 函数的反运算。
mysql> select elt(1,'yang,'jian','rong');
对于字符串的匹配，可以使用 elt和 field 函数组合来分析得到一些关键字的位置。
5.字符串匹配的可逆函数
select
select
select
create table
示例如下：
uuidO函数可以生成一个 128位的通用唯一识别码 UUID（Universally Unique Identifier）。
select benchmark（ 500000000,md5(
示例如下：
benchmark(n,expression)函数将表达式 expression 重复执行 n次，返回结果为 0。
3．基准值函数
inet_aton(ip)函数用于将 IP地址
+--
4.uuid()函数
2.IP地址与整数相互转换函数
注意：
UPDATE
INSERT
CREATE TABLE sequence (id INT NOT NULL);
示例如下：
1
field('yang','yang','jian','rong')
yang
不同会话间不共享。
into
from test
from test_ip;
test_ip(ip int unsigned,
test
B
SET
_ip where ip = inet_aton('192.168.1.200');
ip
id=LAST_INSERT_ID(id+1);
from
values (inet_aton('24.89.35.27'),
values(inet_aton('192.168.1.200'),
from
test
（字符串数据）转换为整数；inet_ntoa(n)函数用于将
test_ip where ip between
ip;
name char(1));
'C')，
3232235776 and
'A')，
(inet_aton
(inet_aton
---
## Page 193
执行过程中出现问题，就需要保证这个操作可回退，否则雪上加霜。
特点是后续的数据变更很可能会依赖于之前的操作，环环相扣，如图5-1所示。所以一旦
地方，这些可以作为操作时的一些参考，仅供参考而已。
你的周末很可能一直在上班。所以大大小小的案例总结下来，还是会发现一些有趣的
5.1.1MySQL脚本部署的四种策略
一些。我们先来说一下数据变更里面的一些事情。
于数据库的变更操作在执行前至少60%的工作都是检查和准备，为的就是上线时更从容
5.1
到运维管理工作的重心。
用方法和MySQL复制管理，如何理解和处理主从延迟问题等，让大家在基础运维之外找
到坑里面，况且为了提高DBA的职业幸福度，我们没必要把所有的坑都踩一遍。
正能够帮助你的，只能是自己。
乎自己的想象。
（1）第一类脚本是修复脚本，比如提供的数据修复功能，数据补丁等，这类脚本的
本章我们会把一些常见的运维场景梳理出来，包括脚本部署的策略，在线变更的使
。对于很多初入职场的DBA 来说，虽然初生牛犊不怕虎，但如果不够细心，很容易掉
在线上环境中部署脚本，有一条行业潜规则：不要在周五前进行重要变更，否则
很多人认为数据变更是一个很简单的工作，你给我脚本，我来执行，其实不然，对
运维的路上，我们都是孤独行者，如人饮水冷暖自知，在大量的问题和故障面前，真
生活不可能像你想象的那么好，但也不会像你想象的那么糟。人的脆弱和坚强都超
脚本5
脚本4
脚本3
脚本2
脚本1
数据变更管理
第5章MySQL运维管理实践
图5-1
《羊脂球》
---
## Page 194
172|MySQLDBA工作笔记：数据库管理、架构优化与运维开发
始所说的场景很类似了。
能会报错，脚本名为 testl.sql，内容如下：
否可以都一一满足呢。
接影响其他业务，如图 5-2 所示。
假设我们已经对上述三类需求很熟悉，很清楚自己在做什么。在 MySQL 的场景中是
（2）第二类的脚本是彼此之间没有直接联系。哪怕是中间执行出一点问题也不会直
策略1：首先使用 source 的方式执行脚本，发现执行在第2条 insert处失败，但是从
我们来看看具体怎么实现。
所以说这样一个看起来极其简单的语句其实可能有三种执行的结果，这就和我刚开
（3）执行第2条报错，然后回滚退出。
（1）执行第2条报错，
那现在就有如下几种实现方式：
insert
insert
insert
首先我们创建一个表test_abc，然后插入3条数据，其中第2条是有问题的，插入可
案例5-1：实战对比四种脚本部署策略的优劣
我们可以做一个简单的测试来说明。
（3）第三类的脚本介于两者之间，有互相的依赖，也有彼此独立的部分，如5-3所示。
（2）执行第2条报错，
intotest_abcvalues('aa',
into
test
abc values(1,
脚本5
脚本4
脚本3
脚本2
直接在这里定格，然后退出。
，直接忽略，继续执行。
脚本1
脚本5
脚本4
脚本3
脚本2
脚本1
aa')
图5-3
图5-2
！（,qq
---
## Page 195
内容已经部署，需要注意部署操作的幂等性。
atrow1
用 source 的方式部署的。
执行日志可以看出，是继续执行了，如下：
Query OK,
mysql>begin;
策略3：我们开启事务，看看能否达到我们的预期结果，可以顺利回滚。
mysql> select *from test_abc;
#mysql
策略2：通过重定向的方式来执行，可以从错误日志看出是执行到了第2条语句失败了。
ERROR
小结：这种处理方式会产生数据部署的断点，不会忽略错误，但是抛错之前的脚本
查看数据的情况，会发现前面的执行是成功了，而后面都没执行，直接退出了。
小结：使用 source 的方式会忽略其中的错误，如果数据具有依赖关系，是不建议使
2rows in set
mysql> select *from test_abc;
这个时候查看数据结果，会发现id为1和3都已经插入了
查看执行后的表数据，确实id为1和3的记录都插入了。
ERROR
Query
QueryOK,
mysql> source testl.sql
row in set (0.09 sec)
id|name
idlname
R 1366 (HY000): Incorrect integer value: 'aa' for column 'id' at row 1
Taa
OK，
1366(HY000):
OK
aa
OK，
CC
test<testl.sql
0 rows affected (0.03 sec)
0
rows
(0.00 sec)
affected(0.00
affected (0.04 sec)
Incorrect integer
(0.00
sec)
sec)
value:'aa' for column'id' at row 1
第5章MySQL 运维管理实践|173
---
## Page 196
174丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
提交。另外一个则是杀掉执行的会话，事务会默认提交还是回滚。
们手工开启事务。
错误也会自动提交，如果是DML类操作还是具有回滚能力的。