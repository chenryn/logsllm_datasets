### 完全覆盖与测试逃逸

当完全覆盖且无测试逃逸时，TCE（测试覆盖率效率）为1.00（即100%）。因此，该值越高，表明测试用例的有效性越好。我们的目标是通过更加有效的测试用例尽可能地减少测试逃逸，从而提高TCE。

---

### 页码 1892
#### 抓住缺陷严重度的影响

为了反映质量保证（QA）和测试逃逸过程中发现的缺陷严重程度，我们可以使用加权TCE。每个缺陷的优先级作为权重，以反映修复其相对重要性的程度。加权TCE能够更好地反映QA测试周期和测试逃逸发现的缺陷的质量。

例如，如果我们将以下权重分配给不同优先级的缺陷：
- P1 = 10
- P2 = 8
- P3 = 6
- P4 = 3
- P5 = 1

假设在某个版本中，QA发现了5个P1缺陷，而测试逃逸发现了15个P3缺陷，则：

- TCE（加权）= (5 × 10) / (5 × 10 + 15 × 6) = 50 / 140 = 0.35 (35%)
- TCE（未加权）= 5 / (5 + 15) = 5 / 20 = 0.25 (25%)

加权TCE反映了QA发现了更多高风险和破坏性的缺陷，尽管从总体数量上看较低。

#### 分析测试逃逸缺陷

为了分析测试逃逸缺陷，我们将其分为以下几个原因类别：
- 误报的缺陷
- 不完整的测试用例
- 没有测试用例
- 测试执行问题
- 不正确的测试用例
- 不正确的功能规范（前提是存在功能规范）

针对这些原因，可以采取如下纠正行动：
- **误报的缺陷**：将缺陷移至正确状态，并强调提交缺陷指南，教育提交者如何正确提交缺陷。
- **不完整的测试用例**：审查目标功能区域，加强并重新设计测试用例。
- **没有测试用例**：基于导致缺陷的功能实现新的测试用例。
- **测试执行问题**：审查过程步骤或依赖的硬件/软件。
- **不正确的测试用例**：审查正在测试的功能，检查测试用例是否需要更新。
- **不正确的功能规范**：联系设计/开发人员，检查功能规范审查流程。

数量最多的类别通常是问题最大的，进一步的纠正行动应找出这一类缺陷频繁出现的原因。

---

### 页码 1893
#### OpenSolaris桌面团队的案例研究

OpenSolaris桌面QA团队负责所有桌面应用程序的质量，包括许多开源项目，如GNOME、Mozilla、Compiz和Pidgin等。OpenSolaris每6个月发布一次，但每两周会向社区发布一个开发版本。为了在如此高的发布频率下确保高品质，桌面QA团队采用了一个正式的功能测试流程。QA团队负责测试计划和测试用例的设计，许多测试用例来自开源社区，例如Firefox的测试用例主要来自Mozilla社区，使用Litmus测试用例管理工具。

尽管测试用例100%被执行，但在正常的QA测试周期之外仍有缺陷被提交。QA团队跟踪每个版本的TCE趋势，以衡量并改进测试用例的有效性。接下来的部分概述了如何衡量和提高测试用例有效性的方法。

#### 假设

对于OpenSolaris桌面项目，我们将所有非QA工程师提交的缺陷视为测试逃逸，除非它们属于以下类别：
- 加强
- 本地化（L10N）和操作系统相关
- 硬件
- 设备驱动程序
- 全球化（G11N）
- 构造
- 无法重现
- 不是缺陷
- 重复

#### 计算TCE值的流程

1. 使用OpenSolaris社区提供的Bugzilla直接收集缺陷列表。
2. 选择“Build on Bugzilla”以获取每个版本的缺陷列表。
3. 检查返回的缺陷列表，排除不符合条件的缺陷（参见前面的“假设”部分）。
4. 分析每个有效的缺陷，并确定其根源类别。
5. 生成TCE度量：
   - TCE = (Nt / Ntot) × 100%
6. 计算每个P1、P2、P3、P4、P5缺陷的数量，并乘以其相应的权重：
   - P1 = 10
   - P2 = 8
   - P3 = 6
   - P4 = 3
   - P5 = 1
7. 计算Nt，即在一个测试周期内发现的所有加权缺陷的总和。
8. 计算测试逃逸，即在测试周期之外发现的所有加权缺陷的总和。
9. 计算Ntot = Nt + 测试逃逸。
10. 计算TCE = (Nt / Ntot) × 100%。

使用上述流程，我们收集了从版本108到版本112的缺陷数据并进行原因分析。以版本110为例，我们使用OpenSolaris的Bugzilla缺陷跟踪系统生成版本110的缺陷列表（图6-8）。

```
16 bugs found.
ID  Sev Pri OS  Aassigneo  Status  Resolutio
...
```

我们使用相同的搜索规则，为其他OpenSolaris开发版本（108~112）生成缺陷列表。对这些缺陷列表进行TCE分析后，我们得到以下表格：

| 版本编号 | 缺陷数量 | 逃逸的缺陷 | TCE值（加权和未加权） |
|----------|----------|------------|-----------------------|
| 版本108  | 4        | 1          | TCE（加权）= 75%      |
|          |          |            | TCE（未加权）= 75%    |
| 版本109  | 10       | 0          | TCE（加权）= 100%     |
|          |          |            | TCE（未加权）= 100%   |

---

### 页码 1896
（续）

通过这些数据分析，我们可以进一步优化测试用例，减少测试逃逸，提高整体产品质量。