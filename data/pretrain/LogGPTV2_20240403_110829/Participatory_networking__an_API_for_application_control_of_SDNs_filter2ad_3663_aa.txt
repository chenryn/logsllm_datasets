# Participatory Networking: An API for Application Control of SDNs

## Authors
- Andrew D. Ferguson, Brown University, PI:EMAIL
- Arjun Guha, Cornell University, PI:EMAIL
- Chen Liang, Brown University, PI:EMAIL
- Rodrigo Fonseca, Brown University, PI:EMAIL
- Shriram Krishnamurthi, Brown University, PI:EMAIL

## Abstract
We present the design, implementation, and evaluation of an API that enables applications to control a software-defined network (SDN). Our API is implemented by an OpenFlow controller, which delegates read and write authority from network administrators to end users or their applications and devices. This allows users to work with the network to achieve better performance, security, and predictable behavior. The API integrates seamlessly as the next layer in current SDN stacks. Our design addresses two key challenges: safely decomposing control and visibility of the network, and resolving conflicts between untrusted users while maintaining fairness and security. Using a real OpenFlow testbed, we demonstrate the feasibility and utility of our API through microbenchmarks and experiments with four real applications.

## Categories and Subject Descriptors
C.2.3 [Computer-Communication Networks]: Network Operations—network management; C.2.4 [Computer-Communication Networks]: Distributed Systems—network operating systems

## Keywords
Software-Defined Networks, OpenFlow, Participatory Networking

## 1. Introduction
Modern applications, whether in datacenters, enterprises, campuses, or home networks, face increasing difficulties due to unpredictable network performance and reliability. This creates challenges for network administrators, application developers, and end-users. As a result, significant effort is expended to work around the network rather than with it. For example, video conferencing applications constantly probe network bandwidth, overlay networks re-route traffic, and humans are required to manage heavy network loads. However, human intervention is not a perfect solution, as it has led to significant outages at companies like GitHub and Amazon.

Packet networks typically forward data, collect traffic statistics, and divide traffic based on addresses or other header fields. Modern networks also provide additional services such as firewalls, compression, encryption, threat detection, acceleration, and caching. Yet, these features are often invisible to applications and endpoints, or only available via rudimentary interfaces.

With greater visibility and control over the network's state, applications could request specific resources. For instance, a conferencing application could reserve bandwidth for a video call, an intrusion detection script could filter traffic from a specific source, and an important RPC service could protect latency-sensitive flows. These examples suggest the need for an API between the network’s control plane and its users, applications, and end-hosts. This API should provide both read access to learn the network’s conditions and write access to make independent configuration changes.

In this paper, we develop the concept of participatory networking, where the network provides a configuration API to its users, applications, and end-hosts. We present the design, implementation, and evaluation of the first practical participatory networking controller for an OpenFlow-enabled SDN.

## 2. Overview
PANE, our prototype controller, delegates read and write authority from network administrators to users or their applications and devices. It is logically centralized, has a global view of the network, and implements high-level intents by configuring network devices. PANE's user-facing API serves as the next layer on the current SDN stack, allowing formal reasoning about its design and ensuring baseline levels of fairness and security.

PANE addresses two key challenges: safely decomposing control and visibility, and resolving conflicts between participants. PANE uses shares to limit the authority of principals. A share specifies who can say what about which flows, represented by its principals, privileges, and flowgroup. Principals can delegate privileges and create sub-shares, forming a global share tree. The share tree enforces invariants, constraining policies without directly implementing them. Accepted requests and realized hints form policy atoms, which are arranged in a policy tree. PANE materializes this policy by installing rules in switches.

## Contributions
1. Implementation of a fully-functioning SDN controller that allows safe delegation of administrative authority.
2. Analysis and improvement of the algorithm for consolidating hierarchical policies, reducing complexity from exponential to polynomial.
3. Demonstration of the system's usefulness and practicality on a real OpenFlow testbed using microbenchmarks and four enhanced real applications.

## 3. Interaction Model
Principals in PANE are end users, applications, or devices running on their behalf. After authentication, principals interact with the PANE controller using a simple text-based protocol. They can issue three types of messages: requests, queries, and hints. Requests are for resources with actions to be taken by the controller. Queries read components of network state, and hints inform PANE about current or future traffic characteristics. Messages refer to flowgroups, subsets of the network’s flows. PANE ensures that multiple principals can safely affect the network without ceding administrative privileges.

## 4. Challenges and Solutions
PANE provides a flexible mechanism for multiple principals to control fine-grained portions of network resources and resolves conflicts between principals' requests while allowing oversubscription. Shares limit the authority of principals, and the share tree enforces invariants, constraining policies. Policy atoms, accepted requests, and realized hints form a policy tree, which PANE materializes by installing rules in switches.

## 5. Additional Considerations
PANE is designed for networks within a single administrative domain, such as corporate WANs, datacenters, campus or enterprise networks, and home networks. It does not require changes to end-hosts' networking stacks, making it suitable for networks with user-owned or managed devices. PANE is backwards-compatible with existing networked applications, and unmodified applications receive best-effort performance.

This paper makes significant contributions to the field of participatory networking, providing a robust and practical solution for application control of SDNs.