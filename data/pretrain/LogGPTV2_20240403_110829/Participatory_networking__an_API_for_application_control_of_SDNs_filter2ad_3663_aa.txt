title:Participatory networking: an API for application control of SDNs
author:Andrew D. Ferguson and
Arjun Guha and
Chen Liang and
Rodrigo Fonseca and
Shriram Krishnamurthi
Participatory Networking:
An API for Application Control of SDNs
Andrew D. Ferguson
Brown University
PI:EMAIL
Arjun Guha
Cornell University
PI:EMAIL
Chen Liang
Brown University
PI:EMAIL
Rodrigo Fonseca
Brown University
PI:EMAIL
ABSTRACT
We present the design, implementation, and evaluation of an API
for applications to control a software-deﬁned network (SDN). Our
API is implemented by an OpenFlow controller that delegates read
and write authority from the network’s administrators to end users,
or applications and devices acting on their behalf. Users can then
work with the network, rather than around it, to achieve better per-
formance, security, or predictable behavior. Our API serves well as
the next layer atop current SDN stacks. Our design addresses the
two key challenges: how to safely decompose control and visibil-
ity of the network, and how to resolve conﬂicts between untrusted
users and across requests, while maintaining baseline levels of fair-
ness and security. Using a real OpenFlow testbed, we demonstrate
our API’s feasibility through microbenchmarks, and its usefulness
by experiments with four real applications modiﬁed to take advan-
tage of it.
Categories and Subject Descriptors
C.2.3 [Computer-Communication Networks]: Network Opera-
tions—network management; C.2.4 [Computer-Communication
Networks]: Distributed Systems—network operating systems
Keywords
Software-Deﬁned Networks; OpenFlow; Participatory Networking
1.
INTRODUCTION
Today’s applications, whether running in datacenters, enterprise,
campus, or home networks have an increasingly difﬁcult relation-
ship with the network. Networks are the shared fabric interconnect-
ing users, applications, and devices, and ﬂuctuating, unpredictable
network performance and reliability create challenges and uncer-
tainty for network administrators, application developers, and frus-
trated end-users alike. As a result, software developers, researchers,
and administrators expend considerable effort to work around the
network rather than work with the network: video conferencing
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
SIGCOMM’13, August 12–16, 2013, Hong Kong, China.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-2056-6/13/08 ...$15.00.
Shriram Krishnamurthi
Brown University
PI:EMAIL
applications constantly probe network bandwidth [6], overlay net-
works are used to re-route trafﬁc [6], network paths are reactively
reconﬁgured based on inferences [1], and humans are required to
throttle heavy network loads in response to planned or unplanned
shifts in trafﬁc matrices. Using humans for network control, how-
ever, is no panacea, having been responsible for signiﬁcant recent
outages at both Github [22] and Amazon [2].
At a minimum, packet networks forward data, collect trafﬁc statis-
tics, and divide trafﬁc based on addresses or other header ﬁelds. In-
creasingly, modern networks also provide additional services, often
implemented via middleboxes, such as ﬁrewalling, compression,
encryption, threat-detection, acceleration, and caching. Yet, all of
these features are, for the most part, invisible to the applications
and endpoints passing trafﬁc through them, or only available via
rudimentary interfaces such as DSCP header bits.
With greater visibility into and control of the network’s state, a
conferencing application could request bandwidth for a video call,
and learn via the network that while only a guaranteed audio call is
available now, it could reserve a video call in one hour. An intrusion
detection script on a user machine could request that the network
ﬁlter trafﬁc from a speciﬁc source. An important RPC service could
protect latency-sensitive ﬂows from competing background trafﬁc.
Or, a MapReduce-style application could request bandwidth guar-
antees or maximally disjoint paths to improve performance of its
shufﬂe phase.
Such examples suggest that an API should exist between the
network’s control-plane and its users, applications, and end-hosts.
These principals need both read access to learn the network’s present
and potential future conditions, and write access to make indepen-
dent conﬁguration changes for their own beneﬁt, and provide help-
ful knowledge such as future trafﬁc demands, directly to the net-
work’s control-plane.
In this paper, we develop the concept of participatory networks [18],
in which the network provides a conﬁguration API to its users, ap-
plications, and end-hosts, and present the design, implementation,
and evaluation of the ﬁrst practical participatory networking con-
troller for an OpenFlow-enabled software-deﬁned network.
In the absence of security guarantees and limited authorities,
participatory networks would be places of anarchy. To be usable,
such networks must provide isolation for their independent prin-
cipals, preventing malicious users from hogging bandwidth, drop-
ping packets, or worse. While isolation could be provided through
network virtualization, we believe that is not always the right ab-
straction as it hides the fundamentally shared aspect of networks.
Instead, participatory networks expose network state and conﬁg-
uration to their principals, allowing them to make more informed
decisions about their use of the network.
We call our prototype controller PANE. It delegates read and
write authority, with optional restrictions, from the network’s ad-
ministrators to the users, or applications and hosts acting on their
behalf. The controller is logically centralized, has a global view of
the network, and implements the principals’ high-level intents by
changing the conﬁguration of the actual network devices. In addi-
tion, we implement and evaluate the examples described above by
augmenting four real applications (§7).
PANE’s user-facing API serves as the next layer on the cur-
rent SDN stack. The abstractions provided by software-deﬁned net-
works allow us to reason formally about PANE’s design, and ensure
the network continues to provide baseline levels of fairness and se-
curity, even as principals dynamically invoke their capabilities.
Our design addresses the two key challenges of participatory net-
works: how to safely decompose control and visibility of the net-
work, and how to resolve conﬂicts between participants and across
requests. PANE’s solutions to these challenges – delegation of priv-
ileges, and a hierarchy of conﬂict resolution functions – were de-
veloped both through formal reasoning, and by porting real-world
applications to solve existing use cases. We start with an overview
of our solution in §2, followed by more in-depth discussions for
each challenge in §4 and §5 respectively.
Many approaches to achieve some of these goals have been pre-
viously proposed including active networking [45], IntServ net-
working [7], and distributed reservation protocols such as RSVP [8]
and NSIS [33]. We discuss their relation to participatory network-
ing in §9. PANE does not introduce any new functionalities into
the network. Instead, it exposes existing functionalities and pro-
vides a single platform for reasoning about their use. We argue that
this approach provides several advantages: a single target for appli-
cation developers, a uniﬁed management framework for network
administrators, and, most importantly, the ability to reason across
all network resources.
PANE is designed for networks within a single administrative
domain including corporate WANs, datacenters, campus or enter-
prise networks, and home networks. In such networks, there is,
logically, a single owner from which authority can be delegated.
PANE’s design does not rely on changes to the end-hosts’ network-
ing stacks, such as the use of a particular driver or hypervisor, mak-
ing it suitable for networks with user-owned or managed devices.
Participatory networks are backwards-compatible with exiting
networked applications – principals submit requests only to receive
predictable behavior from the network. Unmodiﬁed applications
receive the best-effort performance of existing packet networks.
This paper makes the following contributions:
1. We implement a fully-functioning SDN controller which al-
lows a network’s administrators to safely delegate their au-
thority using our API.
2. We analyze the algorithm proposed in [16] for consolidat-
ing hierarchical policies, and propose a new algorithm that
reduces the complexity from exponential to polynomial.
3. We demonstrate our system’s usefulness and practicality on a
real OpenFlow testbed using microbenchmarks and four real
applications enhanced with our API.
2. OVERVIEW
We ﬁrst present an overview of PANE, including the model of
interaction, the types of messages, and the kinds of network re-
sources one can request. We discuss the challenges involved in ex-
posing network control to multiple principals, and the solutions we
Figure 1: The PANE system and request processing
propose. We then discuss additional considerations that inﬂuenced
PANE’s design, which we detail in the following sections (§3-§6).
PANE allows principals to gain controlled visibility into the net-
work and to safely inﬂuence network operations. Principals in PANE
are end users, or, most commonly, applications and devices run-
ning on their behalf. We assume some infrastructure in the network
for authentication, such as 802.1x associated with an existing user
database. After authentication, principals interact with the PANE
controller using a simple text-based protocol.
Principals can issue three types of messages to read and write
network state: requests (§3.1), queries (§3.2), and hints (§3.3). Re-
quests are for resources (e.g., bandwidth or access control), with
an action to be taken by the controller. Queries read some compo-
nent of network state (e.g., trafﬁc between hosts, or available band-
width). Hints inform PANE about current or future trafﬁc charac-
teristics; the controller may choose to use hints to improve service.
Our initial design implements a ﬁrst come-ﬁrst serve service model,
where the controller handles messages in a serialized fashion.
Each message refers to some subset of the network’s ﬂows; we
call these ﬂowgroups. For example, a message may request to deny
all trafﬁc from a particular host, or to rate-limit a single ﬂow, or
query the bandwidth used by some set of ﬂows. Without restric-
tions, a malicious or negligent principal can adversely affect the
network. Therefore, a key novelty of PANE is its method to safely
allow multiple principals to affect the network, without ceding ad-
ministrative privileges.
PANE addresses two key challenges. First, it provides a ﬂexi-
ble mechanism that gives multiple principals control over a ﬁne-
grained portion of network resources. Second, it resolves the in-
evitable conﬂicts that arise between principals’ requests, while al-
lowing oversubscription.
PANE uses shares to limit the authority of principals. A share
states who (which principals) can say what (which messages) about
which ﬂows in the network. This statement is represented, respec-
tively, by a share’s three components: its principals, privileges, and
ﬂowgroup. Figure 3(a) shows an example share. Principals of a
share have two implicit privileges. A principal can delegate its priv-
ileges to another principal, much like passing an object capabil-
ity. In addition, principals can create sub-shares of shares to which
they have access. Shares are thus organized in a global share tree.
The share tree enforces two key invariants: a sub-share’s ﬂowgroup
must be a subset of its parent’s ﬂowgroup, and a sub-share’s privi-
leges cannot be more permissive than its parent share’s privileges.
The share tree constrains the policies that can be realized in the
network, but does not itself cause any policy to be implemented
OpenFlow ModuleShare TreeHFT CompilationLinearizationConflict ResolutionAuthorizationPolicy TreeNetwork Information Base (NIB)PANE user requestsSwitches12in the network. Instead, accepted requests and realized hints de-
termine network policy. We call such accepted requests and real-
ized hints policy atoms – units of the overall network policy. Policy
atoms are arranged in the same hierarchy as the share tree, forming
a policy tree. A policy tree is a declarative data structure that repre-
sents the desired global policy for the network. PANE materializes
this policy in the network by installing rules in the switches that
implement an equivalent policy (§6).
Policy atoms thus exist in the context of a share, and are bound
by the shares’ privileges and ﬂowgroup. However, policy atoms
may conﬂict. For example, one policy atom may deny all HTTP
ﬂows, while another allows HTTP ﬂows. These atoms may even ex-
ist on different shares. The PANE share tree is ﬂexible: it supports