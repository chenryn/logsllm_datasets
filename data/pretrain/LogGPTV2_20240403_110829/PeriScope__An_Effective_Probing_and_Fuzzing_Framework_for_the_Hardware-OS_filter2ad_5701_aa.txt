title:PeriScope: An Effective Probing and Fuzzing Framework for the Hardware-OS
Boundary
author:Dokyung Song and
Felicitas Hetzelt and
Dipanjan Das and
Chad Spensky and
Yeoul Na and
Stijn Volckaert and
Giovanni Vigna and
Christopher Kruegel and
Jean-Pierre Seifert and
Michael Franz
PeriScope: An Effective Probing and Fuzzing
Framework for the Hardware-OS Boundary
Dokyung Song∗, Felicitas Hetzelt†, Dipanjan Das‡, Chad Spensky‡, Yeoul Na∗, Stijn Volckaert∗§,
Giovanni Vigna‡, Christopher Kruegel‡, Jean-Pierre Seifert†, Michael Franz∗
∗Department of Computer Science, University of California, Irvine
†Security in Telecommunications, Technische Universit¨at Berlin
‡Department of Computer Science, University of California, Santa Barbara
§Department of Computer Science, KU Leuven
Abstract—The OS kernel is an attractive target for remote
attackers. If compromised, the kernel gives adversaries full system
access, including the ability to install rootkits, extract sensitive
information, and perform other malicious actions, all while
evading detection. Most of the kernel’s attack surface is situated
along the system call boundary. Ongoing kernel protection efforts
have focused primarily on securing this boundary; several capable
analysis and fuzzing frameworks have been developed for this
purpose.
However, there are additional paths to kernel compromise
that do not involve system calls, as demonstrated by several
recent exploits. For example, by compromising the ﬁrmware of
a peripheral device such as a Wi-Fi chipset and subsequently
sending malicious inputs from the Wi-Fi chipset to the Wi-Fi
driver, adversaries have been able to gain control over the kernel
without invoking a single system call. Unfortunately, there are
currently no practical probing and fuzzing frameworks that can
help developers ﬁnd and ﬁx such vulnerabilities occurring along
the hardware-OS boundary.
We present PERISCOPE, a Linux kernel based probing
framework that enables ﬁne-grained analysis of device-driver
interactions. PERISCOPE hooks into the kernel’s page fault
handling mechanism to either passively monitor and log trafﬁc
between device drivers and their corresponding hardware, or
mutate the data stream on-the-ﬂy using a fuzzing component,
PERIFUZZ, thus mimicking an active adversarial attack. PER-
IFUZZ accurately models the capabilities of an attacker on
peripheral devices, to expose different classes of bugs including,
but not limited to, memory corruption bugs and double-fetch
bugs. To demonstrate the risk that peripheral devices pose, as
well as the value of our framework, we have evaluated PERIFUZZ
on the Wi-Fi drivers of two popular chipset vendors, where we
discovered 15 unique vulnerabilities, 9 of which were previously
unknown.
I.
INTRODUCTION
Modern electronics often include subsystems manufactured
by a variety of different vendors. For example, in a modern
cellphone, besides the main application processor running a
smartphone operating system such as Android, one might ﬁnd
Network and Distributed Systems Security (NDSS) Symposium 2019
24-27 February 2019, San Diego, CA, USA
ISBN 1-891562-55-X
https://dx.doi.org/10.14722/ndss.2019.23176
www.ndss-symposium.org
a number of peripheral devices such as a touchscreen display,
camera modules, and chipsets supporting various networking
protocols (cellular, Wi-Fi, Bluetooth, NFC, etc.). Peripheral
devices by different manufacturers have different inner work-
ings, which are often proprietary. Device drivers bridge the
gap between stable and well-documented operating system
interfaces on one side and peripheral devices on the other,
and make the devices available to the rest of the system.
Device drivers are privileged kernel components that exe-
cute along two different trust boundaries of the system. One
of these boundaries is the system call interface, which exposes
kernel-space drivers to user-space adversaries. The hardware-
OS interface should also be considered a trust boundary,
however, since it exposes drivers to potentially compromised
peripheral hardware. These peripherals should not be trusted,
because they may provide a remote attack vector (e.g., network
devices may receive malicious packets over the air), and
they typically lack basic defense mechanisms. Consequently,
peripheral devices have frequently fallen victim to remote ex-
ploitation [16], [21], [23], [28], [36], [77]. Thus, a device driver
must robustly enforce the hardware-OS boundary, but pro-
gramming errors do occur. Several recently published attacks
demonstrated that peripheral compromise can be turned into
full system compromise (i.e., remote kernel code execution) by
coaxing a compromised device into generating speciﬁc outputs,
which in turn trigger a vulnerability when processed as an input
in a device driver [22], [24].
The trust boundary that separates peripheral subsystems
from kernel drivers is therefore of great interest to security
researchers. In this paper, we present PERISCOPE, which to
our knowledge is the ﬁrst generic framework that facilitates
the exploration of this boundary. PERISCOPE focuses on
two popular device-driver interaction mechanisms: memory-
mapped I/O (MMIO) and direct memory access (DMA). The
key idea is to monitor MMIO or DMA mappings set up by
the driver, and then dynamically trap the driver’s accesses
to such memory regions. PERISCOPE allows developers to
register hooks that it calls upon each trapped access, thereby
enabling them to conduct a ﬁne-grained analysis of device-
driver interactions. For example, one can implement hooks that
record and/or mutate device-driver interactions in support of
reverse engineering, record-and-replay, fuzzing, etc.
To demonstrate the risk that peripheral devices pose, as
well as to showcase versatility of the PERISCOPE framework,
we created PERIFUZZ, a driver fuzzer that simulates attacks
originating in untrusted, compromised peripherals. PERIFUZZ
traps the driver’s read accesses to MMIO and DMA map-
pings, and fuzzes the values being read by the driver. With
a compromised device, these values should be considered to
be under an attacker’s control; the attacker can freely modify
these values at any time, even in between the driver’s reads. If
the driver reads the same memory location multiple times (i.e.,
overlapping fetches [79]) while the data can still be modiﬁed
by the device, double-fetch bugs may be present [45], [68].
PERIFUZZ accurately models this adversarial capability by
fuzzing not only the values being read from different memory
locations, but also ones being read from the same location
multiple times. PERIFUZZ also tracks and logs all overlapping
fetches and warns about ones that occurred before a driver
crash to help identify potential double-fetch bugs.
Existing work on analyzing device-driver interactions typ-
ically runs the entire system including device drivers in a
controlled environment [32], [44], [47], [49], [54], [60], [62],
[66], such as QEMU [20] or S2E [33]. Enabling analysis in
such an environment often requires developer efforts tailored
to speciﬁc drivers or devices, e.g., implementing a virtual
device or annotating driver code to keep symbolic execution
tractable. In contrast, PERISCOPE uses a page fault based in-
kernel monitoring mechanism, which works with all devices
and drivers in their existing testing environment. As long as
the kernel gets recompiled with our framework, PERISCOPE
and PERIFUZZ can analyze device-driver interactions with
relative ease, regardless of whether the underlying device is
virtual or physical, and regardless of the type of the device.
Extending our framework is also straightforward; for example,
PERIFUZZ accepts any user-space fuzzer, e.g., AFL, as a plug-
in, which signiﬁcantly reduces the engineering effort required
to implement proven fuzzing strategies [25], [26], [30], [31],
[37].
We validated our system by running experiments on the
software stacks shipping with the Google Pixel 2 and the
Samsung Galaxy S6, two popular smartphones on the market at
the time of development. To simulate remote attacks that would
occur over the air in a real-world scenario, we focused on the
Wi-Fi drivers of these phones in evaluating our framework.
The Google Pixel 2 and Samsung Galaxy S6 are equipped
with Qualcomm and Broadcom chipsets, respectively. These
two are arguably the most popular Wi-Fi chipset manufacturers
at the time of our experiments. In our experiments, our system
identiﬁed 15 unique vulnerabilities in two device drivers, out
of which 9 vulnerabilities were previously unknown, and 8
new CVEs were assigned. We have reported the discovered
vulnerabilities to the respective vendors and are working with
them on ﬁxing these vulnerabilities. We hope that our tool
will aid developers in hardening the hardware-OS boundary,
leading to better software security.
In summary, this paper makes the following contributions:
•
A probing framework: We introduce PERISCOPE,
a generic probing framework that can inspect
the
interactions between a driver and its corresponding
device. PERISCOPE provides the means to analyze the
hardware-OS boundary, and to build more specialized
analysis tools.
Fig. 1. Hardware-OS interaction mechanisms
•
•
•
•
A fuzzing framework: We extended PERISCOPE
to build PERIFUZZ, a vulnerability discovery tool
tailored to detect driver vulnerabilities occurring along
the hardware-OS boundary. The tool demonstrates the
power of the PERISCOPE framework, and it system-
atizes the exploration of the hardware-OS boundary.
An overlapping fetch fuzzer: PERIFUZZ fuzzes over-
lapping fetches in addition to non-overlapping fetches,
and warns about overlapping fetches that occurred
before a driver crash. A warning observed before a
driver crash may indicate the presence of double-fetch
bugs.
Discovered vulnerabilities: As part of our evaluation,
we discovered previously known and unknown vulner-
abilities in the Wi-Fi drivers of two of the most promi-
nent vendors in the market. We responsibly disclosed
relevant details to the corresponding vendors.
An open-source tool: We open-sourced our tool1, in
order to facilitate further research exploration of the
hardware-OS boundary.
II. BACKGROUND
In this section, we provide the technical background nec-
essary to understand how peripheral devices interact with the
OS. We also discuss isolation mechanisms that allow the OS to
protect itself against misbehaving peripherals, as well as tools
to analyze hardware-OS interactions.
A. Hardware-OS Interaction
Figure 1 illustrates the various ways in which devices can
interact with the OS and the device driver. Although we assume
that the device driver runs on a Linux system with an ARMv8-
A/AArch64 CPU, the following discussion generally applies to
other platforms as well.
1https://github.com/securesystemslab/periscope
2
RegistersDirect Memory Access (DMA)InterruptsPhysicalMemoryMemory AccessesVirtual AddressPhysical AddressBus AddressMMUVirtual AddressPhysical AddressI/O Virtual AddressMain ProcessorPeripheral DeviceMemory-mapped I/O(MMIO)IOMMU1) Interrupts: A device can send a signal to the CPU by
raising an interrupt request on one of the CPU’s interrupt
lines. Upon receiving an interrupt request, ARMv8-A CPUs
ﬁrst mask the interrupt line so that another interrupt request
cannot be raised on the same line while the ﬁrst request is
being handled. Then, the CPU transfers control to the interrupt
handler registered by the OS for that interrupt line. Interrupt
handlers can be conﬁgured at any time, though the OS typically
conﬁgures them at boot time.
Processing Interrupts: To maximize the responsive-
ness and concurrency of the system, the OS attempts to defer
interrupt processing so that the interrupt handler can return
control to the CPU as soon as possible. Typically, interrupt
handlers only process interrupts in full if they were caused
by time-sensitive events or by events that require immediate
attention. All other events are processed at a later time, outside
of the interrupt context. This mechanism is referred to as top-
half and bottom-half interrupt processing in Linux lingo.
In Linux, after performing minimal amount of work in the
hardware interrupt context (hardirq), the device driver sched-
ules the work to be run in either software interrupt context
(softirq), kernel worker threads, or the device driver’s own
kernel threads, based on its priority. For higher priority work,
a device driver can register its own tasklet, a deferred action
to be executed under the software interrupt context, which
also ensures serialized execution. Lower priority work can
further be deferred either to kernel worker threads (using the
workqueue API) or to the device driver’s own kernel threads.
2) Memory-Mapped I/O: Analogous to peripherals using
interrupts to signal the OS and the device driver, the CPU uses
memory-mapped I/O (MMIO) to signal peripherals. MMIO
maps a range of kernel-space virtual addresses to the hardware
registers of peripheral devices. This allows the CPU to use
normal memory access instructions (as opposed to special
I/O instructions) to communicate with the peripheral device.
The CPU observes such memory accesses and redirects them
to the corresponding hardware. In Linux, device drivers call
ioremap to establish an MMIO mapping, and iounmap to
remove it.
3) Direct Memory Access: Direct memory access (DMA)
allows peripheral devices to access physical memory directly.
Typically,
the device transfers data using DMA, and then
signals the CPU using an interrupt. There are two kinds of
DMA buffers: coherent and streaming.
Coherent DMA buffers (also known as consistent DMA
buffers) are usually allocated and mapped only once at the time
of driver initialization. Writes to coherent DMA buffers are
usually uncached, so that values written by either the peripheral
processor or the CPU are immediately visible to the other side.
Streaming DMA buffers are backed by the CPU’s cache,
and have an explicit owner. They can either be owned by the
CPU itself, or by one of the peripheral processors. Certain
kernel-space memory buffers can be “mapped” as streaming
DMA buffers. However, once a streaming DMA buffer is
mapped, the peripheral devices automatically acquires own-
ership over it, and the kernel can no longer write to the buffer.
Unmapping a streaming DMA buffer revokes its ownership
from the peripheral device, and allows the CPU to access the
buffer’s contents. Streaming DMA buffers are typically short-
lived, and are often used for a single data transfer operation.
B. Input/Output Memory Management Unit
Since DMA allows peripherals to access physical memory
directly, its use can be detrimental to the overall stability of
the system if a peripheral device misbehaves. Modern systems
therefore deploy an input output memory management unit
(IOMMU) (also known as system memory management unit,
or SMMU, on the ARMv8-A/AArch64 architecture) to limit
which regions of the physical memory each device can access.
Similar to the CPU’s memory management unit (MMU), the
IOMMU translates device-visible virtual addresses (i.e., I/O
addresses) to physical addresses. The IOMMU uses translation
tables, which are conﬁgured by the OS prior to initiating a
DMA transfer. Device-initiated accesses that fall outside of
the translation table range will trigger faults that are visible to
the OS.
C. Analyzing Hardware-OS Interaction
Vulnerabilities in device drivers can lead to a compromise
of the entire system, since many of these drivers run in kernel
space. To detect these vulnerabilities, driver developers can
resort
to dynamic analysis tools that monitor the driver’s
behavior and report potentially harmful actions. Doing this
ideally requires insight into the communication between the
driver and the device, as this communication can provide the
context necessary to ﬁnd the underlying cause of a vulnera-
bility. Analyzing device-driver communication requires (i) an
instance of the device, whether physical or virtual, and (ii)
a monitoring mechanism to observe and/or inﬂuence device-
driver communication. Existing approaches can therefore be
classiﬁed based on where and how they observe (and possibly
inﬂuence) device-driver interactions.
Device Adaptation: To exercise direct control over the
data sent from the hardware to the driver, an analyst can adapt
the ﬁrmware of real devices to include such capabilities. This
can be done by reverse engineering the ﬁrmware and reﬂashing
a modiﬁed one [64], or by using custom hardware that supports
reprogramming of devices [1]. However, these frameworks are
typically tailored to speciﬁc devices, and given the hetero-
geneity of peripheral devices, their applicability is limited.
For example, Nexmon only works for some Broadcom Wi-Fi
devices [64], and Facedancer11, a custom Universal Serial Bus
(USB) device, can only analyze USB device drivers [1].
Virtual Machine Monitor: A driver can be tested in
conjunction with virtual devices running in a virtual envi-
ronment such as QEMU [20]. The virtual machine monitor
observes the behavior of its guest machines and can easily
support instrumentation of the hardware-OS interface. Previous
work uses existing implementations of virtual devices for
testing the corresponding drivers [44], [66]. For many devices,
however, an implementation of a virtual device does not exist.
In this case, developers must manually implement a virtual
version of their devices to interact with the device driver they
wish to analyze [47]. Several frameworks alleviate the need
for virtual devices by relaying I/O to real devices [71], [80],
but these frameworks generally require a non-trivial porting
effort for each driver and device, and/or do not support DMA.
3
Symbolic Execution: S2E augments QEMU with se-
lective symbolic execution [33]. Several tools leverage S2E to
analyze the interactions between OS kernel and hardware by
selectively converting hardware-provided values into symbolic
values [32], [49], [60], [62]. However, symbolic execution
in general is prohibitively slow due to the path explosion
and constraint solving problem. Moreover, symbolic execution
itself does not reveal vulnerabilities, but rather generates a
set of constraints that must be analyzed by separate checkers.
Writing such a checker is not trivial. Most of the checkers
supported by SymDrive, for example, target stateless bugs
such as kernel API misuses, but ignore memory corruption
bugs [62].