functions within the same pipeline, which depends on business
needs and resource constraints in practice. According to the opera-
tion policies, traffic from the Internet may need to travel different
function-chain paths, such as switch ingress → load balancer egress
→ load balancer ingress → scheduler egress (i.e., the red arrows
shown in Figure 2). Our network engineers control different traffic
paths (i.e., routes forwarding) by installing and distributing differ-
ent table entries to the corresponding switches. See Appendix A
for more details about hyper-converged data plane.
The majority of our edge switches employ the above hyper-
converged architecture. Such a single switch’s data plane typically
consists of thousands lines of P416 code, hundreds of tables, each
containing hundreds of entries, and a big parser program with
thousands of dependencies across states. Our production networks
use P416 (rather than P414) because P416 supports many impor-
tant features such as multi-pipeline control, reordering header via
deparsing, and checksum.
Reliability of edge networks in Alibaba is always extremely im-
portant. Given the fact that testing coverage is limited, Alibaba
decided to build a verification system to provide a rigorous guaran-
tee on the correctness of programmable data planes. Furthermore,
our network engineers propose their practical usage requirements
for such a verification system: a practically usable verification system
should simultaneously achieve four features (1) expressing specifica-
tion with ease, (2) scalable verification, (3) automatic and accurate
violation localization, and (4) self validation; otherwise, the system
would be hard to use in production.
In the rest of this section, we first use Figure 2 example to illus-
trate why the state of the art does not meet the above features, and
then present Aquila, the first practically usable verification system.
(1) Specification expressing. Our engineers need to specify di-
verse properties to express the correctness of the hyper-converged
Egress(switch.p4)Traffic ManagerIngress(scheduler.p4)Ingress(firewall.p4)Pipeline 0Pipeline 1Pipeline 2Pipeline 3InternalLoopbackIngress(switch.p4)Egress(loadbalancer.p4)Ingress(loadbalancer.p4)Egress(scheduler.p4)InternalLoopbackEgress(firewall.p4)@pkt.$order==  => keep(tcp)parse_eth: last := ethparse_vlan: assume last == ethlast := vlanparse_ipv4:assume last == eth || last == vlanlast := ipv4parse_ipv6:assume last == eth || last == vlanlast := ipv4parse_tcp:assume last == ipv4 || last == ipv6last := PI:EMAIL_port := PI:EMAIL_port := tcp.dst_port...parse_udp:last := udpassume last == tcpassert tcp.src_port == @tcp.src_portassert tcp.dst_port == @tcp.dst_port...InstructionBlock(CreateTag("START", 0),Call("router.generator.eth.ipv4.tcp"),res.initFactory(switchInstance))InstructionBlock(CreateTag("START", 0),Call("router.generator.eth.ipv6.tcp"),res.initFactory(switchInstance))InstructionBlock(CreateTag("START", 0),Call(router.generator.eth.vlan.ipv4.tcp),res.initFactory(switchInstance))InstructionBlock(CreateTag("START", 0),Call(router.generator.eth.vlan.ipv6.tcp),res.initFactory(switchInstance))AF(Constrain(tcp.src_port, Eq(Original.tcp.src_port)))AF(Constrain(tcp.dst_port, Eq(Original.tcp.dst_port)))...Aquila spec (in LPI)p4v specVera spec (NetCTL)VSSIGCOMM ’21, August 23–27, 2021, Virtual Event, USA
Tian et al.
Table 1: Required properties of production data plane program verification. Half tick means partial support.
Parts
Parser
Match-
Action
Units
(MAUs)
Switch
Meaning
Whether header order (e.g., ethernet → ipv4 → tcp) is expected?
Whether packet headers are parsed correctly?
Whether invalid header (e.g., ipv6 header should not exist) can be detected?
Whether header field value (e.g., destination IP) is as expected?
Whether header payload is as expected?
Properties
Header order
Header parsing
Header validity
Field correctness
Payload correctness
Expected table access Whether a table or an action is hit by a specified packet?
Table entry validity
Wildcard table entries Whether a property always holds for any possible table entry?
Deparser
Is output packet (e.g., header reordering and checksum) correct?
Are pipelines executed in the expected order (e.g., red arrow in Figure 2)?
Multi-pipeline
ASIC behaviors
Do recirculation, resubmit or mirror run as expected?
Are behaviors, values and states of registers expected?
Register
Whether a specified individual table entry is handled as expected?
Aquila
p4v [30]
Vera [48]
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✗
✗
✓
✓
✗
✓
✗
✓
✗
✗
✗
✓
✓–
✗
✓
✓
✗
✓
✓
✓–
✗
✗
✓–
✓
lookahead operation, which parses packet header based on the un-
parsed portion. Existing general-purpose language debuggers are
hard to be adapted to localize the bugs related to the lookahead
operation.
(4) Verifier self validation. A verification system implementa-
tion might be buggy, significantly affecting the confidence of the
network engineers. No prior work can help.
Aquila: A practically usable verification system. We build Aquila
capable of simultaneously addressing the above problems. As shown
in Figure 1, a network engineer expresses her specification via our
proposed language (§3), saving 10× lines of specifications (see Fig-
ure 3). Aquila then efficiently checks if the program meets the
specification (§4). For violated properties, Aquila calls the bug lo-
calization module (§5) to report where are the bugs. Aquila can
detect bugs in data plane programs, and also find incorrect table
entries. Aquila introduces a self-validator to tell potential Aquila
implementation issues (§6).
Aquila can verify two cases: (1) a specific data plane snapshot (i.e.,
the P4 code along with a snapshot of deployed table entries), and (2)
data plane correctness under any possible table entries, i.e., the P4
code without specifying any concrete table entries. For the second
case, the network engineers want to check whether the target P4
program always meets the specification for any table entries to
be installed. For the table entries potentially triggering bugs, the
second case enables us to record these entries in a blocklist ahead
of time, preventing them in runtime.
3 SPECIFICATION LANGUAGE
Building an effective verification system for production data plane
programs requires us to comprehensively reason about the im-
portant correctness properties our network engineers face in real
world. By surveying our engineers, Table 1 lists key properties that
a practical system should verify, and also shows the comparison
with state-of-the-art tools.
Aquila provides a declarative specification language, LPI (Lan-
guage for Programmable network Intent). In principle, LPI is better
for our engineers to use than p4v and Vera due to two reasons.
(1) LPI is able to express more properties, widely-needed by our
scenarios, which the state of the art failed to consider (see Table 1).
(2) LPI encapsulates common property assertions (including table,
match and modified), making it easier to express specifications
(10× fewer lines of specifications than prior work). Figure 3 shows
a more concrete example comparing LPI with the state of the art.
spec
decl
assump
assert
block
prog
stmt
exp
hdr
...
::=
::=
|
|
|
::=
::=
::=
::=
::=
|
|
::=
|
|
|
|
|
|
|
|
|
::=
|
|
Aquila specification
Precondition
Postcondition
Main body
decl*
assump
assert
prog
...
assumption ‘{’ block* ‘}’
assertion ‘{’ block* ‘}’
blk_id ‘=’ ‘{’ stmt* ‘}’
program ‘{’ stmt* ‘}’
If condition
if ‘(’ exp ‘)’ ‘{’ exp* ‘}’
Simple stmt
exp ‘;’
...
Header sequence
‘’
Variable declaration
‘#’ string
Get init value
‘@’ field_id
C-like operators
exp 𝑜𝑝 exp
Insert assumption
assume ‘(’ blk_id ‘)’
assert ‘(’ blk_id ‘)’
Exec assertion
Field keeps
keep ‘(’ field_id ‘)’
match ‘(’ tbl_id, act_id ‘)’ Hit table, action
modified ‘(’ field_id ‘)’
Field modified
...
Simple header name
string
‘[’ hdr* ‘]’
Optional header
‘(’ hdr* (‘|’ hdr*)* ‘)’
Header branch
...
Figure 5: Aquila’s specification language grammar
An LPI specification requires three parts: (1) precondition def-
inition (including input packet and switch initial state), assump-
tion, (2) expected behaviors of a single pipeline, assertion, and (3)
expected behaviors of entire device, program. Figure 5 presents
the grammar of LPI. Figure 6 shows an example specification that
checks a P4 program forward.p4, which changes TCP and UDP
packets whose destination IP is 10.0.0.1 to 10.0.0.2. The rest of this
section illustrates the LPI usage based on this example.
Assumption. LPI allows us to define three types of preconditions:
(1) the initial state of switch (e.g., the values in the register), (2) the
input packet’s headers (e.g., the header field value and header order),
and (3) metadata (e.g., mirror state and input port). Specifying
(1) and (3) is straightforward via operators like ‘==’. For example
in Figure 6, line 4 is a metadata specification that specifies the
packet comes from even port number of the switch. To specify (2),
i.e., packet headers, we introduce keywords ‘’ for the network
engineer to describe the expected header order. Line 5 in Figure 6
specifies expected order for TCP and UDP headers.
Assertion. In the assertion part, LPI enables us to specify the cor-
rectness of a single pipeline. LPI allows checking the value of an
input packet in any condition at any position in the pipeline: besides
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
ig_md.ingress_port & 0x1 == 0;
pkt.$order ==  // TCP or UDP header
pkt.ipv4.dst_ip == 10.0.0.1;
// Even port#
// Dst. IP
}}
assertion {
pipe_in = {
if (@pkt.ipv4.protocol == 6)
pkt.ipv4.dst_ip == 10.0.0.2;
// TCP header
// Send to 10.0.0.2
if (match(fwd,send))
// Match table fwd, action send