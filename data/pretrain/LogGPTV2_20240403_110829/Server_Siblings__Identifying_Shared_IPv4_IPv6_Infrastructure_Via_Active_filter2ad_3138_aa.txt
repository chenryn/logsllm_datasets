title:Server Siblings: Identifying Shared IPv4/IPv6 Infrastructure Via Active
Fingerprinting
author:Robert Beverly and
Arthur W. Berger
Server Siblings: Identifying Shared IPv4/IPv6
Infrastructure Via Active Fingerprinting
Robert Beverly1(B) and Arthur Berger2
1 Naval Postgraduate School, Monterey, CA, USA
2 MIT CSAIL/Akamai, Cambridge, MA, USA
PI:EMAIL
PI:EMAIL
Abstract. We present, validate, and apply an active measurement tech-
nique that ascertains whether candidate IPv4 and IPv6 server addresses
are “siblings,” i.e., assigned to the same physical machine. In contrast
to prior eﬀorts limited to passive monitoring, opportunistic measure-
ments, or end-client populations, we propose an active methodology that
generalizes to all TCP-reachable devices, including servers. Our method
extends prior device ﬁngerprinting techniques to improve their feasibil-
ity in modern environments, and uses them to support measurement-
based detection of sibling interfaces. We validate our technique against
a diverse set of 61 web servers with known sibling addresses and ﬁnd it
to be over 97 % accurate with 99 % precision. Finally, we apply the tech-
nique to characterize the top ∼6,400 Alexa IPv6-capable web domains,
and discover that a DNS name in common does not imply that the cor-
responding IPv4 and IPv6 addresses are on the same machine, network,
or even autonomous system. Understanding sibling and non-sibling rela-
tionships gives insight not only into IPv6 deployment and evolution, but
also helps characterize the potential for correlated failures and suscepti-
bility to certain attacks.
1 Introduction
While signiﬁcant prior research has characterized the evolution, routing, and
performance of IPv6 [5,6,15], less attention has been given to understanding
whether IPv6 infrastructure is being deployed using separate hardware or by
adding IPv6 to existing machines. I.e., are providers using separate IPv4 and
IPv6 servers to host the same web content, or using single “dual-stacked” servers?
Given an IPv4 and IPv6 address, we seek to infer whether they belong to
interfaces on the same physical machine. We term such cross-protocol associated
addresses server “siblings.” To accurately determine sibling and non-sibling rela-
tionships, we leverage prior work on device ﬁngerprinting to perform active mea-
surements of TCP option signatures (coarse-grained) [10] and TCP timestamp
clock skew (ﬁne-grained) [9].
The prevalence of shared IPv6 infrastructure has important policy and Inter-
net evolution implications [3]. Moreover, for network operators and researchers,
c(cid:2) Springer International Publishing Switzerland 2015
J. Mirkovic and Y. Liu (Eds.): PAM 2015, LNCS 8995, pp. 149–161, 2015.
DOI: 10.1007/978-3-319-15509-8 12
150
R. Beverly and A. Berger
the way in which IPv6 is deployed has particular impact on measurement and
security. A potential, future application for the methods herein is for IPv6 geolo-
cation, where prior knowledge of the corresponding IPv4 sibling can be leveraged.
Note that making such inferences based on a common Domain Name System
(DNS) name can be dubious. As shown in Sect. 4, a DNS name in common does
not imply that the IPv4 and IPv6 addresses are on the same interface, machine,
or even autonomous system (AS).
A second area of interest is IPv6 security, as the deployment and maintenance
of ﬁrewalls, ﬁltering, and intrusion detection systems on IPv6 lags, while tunnels
and transition mechanisms facilitate alternate data paths for application-layer
attacks. Furthermore, not only are many old IPv4 network-layer attacks feasi-
ble in IPv6, IPv6 introduces new attack vectors [7]. The extent to which IPv4
infrastructure depends on IPv6, and vice-versa, therefore has unknown security
implications. Whether an attack against the IPv6 address of an Internet web or
DNS server impacts an organization’s corresponding service for IPv4 depends
on whether it is dual-stacked. Further, dual-stacked servers imply the potential
for correlated failures that impact survivability.
Toward identifying shared IPv4/IPv6 infrastructure, our contributions are:
1. A reappraisal of the current feasibility of Kohno’s 2005 physical device ﬁn-
gerprinting [9] method using TCP clock skew.
2. Integration to, and enhancement of, various ﬁngerprinting methods to actively,
rather than passively, associate IPv4 and IPv6 server addresses.
3. Evaluation on ground-truth data, with >97% accuracy and 99 % precision.
4. Real-world measurements of siblings and non-siblings among the Alexa top
websites, characterizing a portion of Internet IPv6 infrastructure.
2 Background
Inferring IPv4 and IPv6 host associations has largely been conﬁned to client pop-
ulations using passive, opportunistic measurements. For instance prior projects
have used web-bugs, javascript, or ﬂash object to determine the prevalence of
IPv6 connectivity and associate IPv4 and IPv6 addresses of connecting clients
[14,17]. In contrast our technique is active and we study servers.
Our prior work also examines IPv4/IPv6 associations, but is limited to DNS
resolvers [2]; the techniques herein are more general and can be performed
actively, on-demand. By operating at the transport layer we can actively probe
any listening TCP service to test whether a candidate IPv4 and IPv6 address
belong to the same device.
At its heart, our work relies on the rich history of prior research in net-
work ﬁngerprinting. Network ﬁngerprinting is a common technique that relies
on implementation and conﬁguration-speciﬁc characteristics to uniquely identify
devices. We leverage the fact that any application or transport-layer ﬁngerprint
will be common to the lower level network protocol, whether IPv4 or IPv6.
We use coarse-grained active operating system (OS) ﬁngerprinting, e.g. [10], to
Server Siblings: Identifying Shared IPv4/IPv6 Infrastructure
151
eliminate clearly unrelated IPv4 and IPv6 addresses. However, OS ﬁngerprinting
alone does not provide suﬃcient granularity to accurately classify true siblings
as the set of possible OSes is small relative to the set of possible addresses.
We therefore leverage previous work on physical device ﬁngerprinting [9].
Kohno’s technique measures a machine’s clock drift by obtaining TCP-layer
timestamps from the remote machine. While this technique has been used in the
past, we apply it in a new context and reappraise its feasibility 10 years later.
More importantly, skew-based ﬁngerprinting has been primarily used on network
clients, rather than servers. We ﬁnd several interesting server-speciﬁc behaviors,
e.g. load-balancing, that we take into account. Second, we enhance and combine
the technique with other ﬁngerprinting methods. We then evaluate the accuracy
of our technique on a distributed set of ground-truth web servers. Last, we apply
the method to the new problem of actively interrogating remote IPv4 and IPv6
endpoints over TCP to determine if they are server siblings.
3 Methodology
Our methodology uses active ﬁngerprinting at the TCP layer, as a host’s TCP
stack is common to both the underlying IPv4 and IPv6 stack. We combine several
of such ﬁngerprinting techniques to achieve the best accuracy. Our resulting
active method can be run on-demand to provide a server sibling test.
A networked server may have one or more interfaces, each with one or mul-
tiple addresses. An interface’s addresses can be IPv4, IPv6, or a combination.
Our TCP ﬁngerprinting techniques attempt to determine whether a given IPv4
and IPv6 address share a common TCP stack. If the determination is “yes,”
then we are conﬁdent (see Sect. 4 on ground truth) that the two address are on
the same server (and in practice likely the same interface), and we classify the
address pair as siblings. If the determination is “no,” then we are conﬁdent that
the addresses are on separate interfaces, and most likely separate machines, and
we classify the address pair as non-siblings.
3.1 Datasets
This work considers four datasets shown in Table 1. First, a ground-truth dataset
(1) where the IPv4 and IPv6 addresses are known to be co-located on the same
Table 1. Properties of the four datasets probed
Dataset
Hosts # v4 AS # v6 AS Countries # Option Signatures
(1) Ground Truth
61
(2) Alexa embedded 1050
34
85
(3) Alexa non-CDN 1533
629
(4) Alexa CDN
230
59
34
80
575
55
19
31
69
18
13
30
73
29
152
R. Beverly and A. Berger
dual-stacked host. Then, for the subset of the Alexa [1] top 100,000 sites with
both A and AAAA records in the DNS, we partition into set (2) sites where the
IPv4 address is embedded in the corresponding IPv6 address. And for sites not in
(2), partition into datasets: (3) those not part of a Content Distribution Network
(CDN), and (4) those part of a CDN.
To develop and reﬁne our association inference algorithm, we utilize ground-
truth data consisting of 61 hosts with known IPv4/IPv6 association. While this
set is relatively small, it spans 34 ASes and 19 countries. Importantly, it allows us
to test not only our algorithm’s recall (ability to identify true siblings), but also
its precision (ability to identify ∼1,800 possible combinations of non-siblings).
We query the DNS for the A and AAAA records of the Alexa hosts as retrieved
in April, 2014. If the query returns multiple DNS records, we retain only the
ﬁrst. We perform the DNS resolution only once in order to obtain the IPv4 and
IPv6 addresses. The remainder of our experimentation involves directly probing
IPv4 and IPv6 addresses; the DNS is not subsequently consulted as to avoid
dynamics due to DNS or DNS load-balancing.
A total of 6,387 sites in the Alexa top 100,000 have both IPv4 and IPv6
addresses. We remove 22 sites that return non-global IPv6 addresses, e.g. “::.”
Because multiple sites can be hosted on one server, we reduce this set to 3,986
unique IPv4/IPv6 address pairs. Further, since the Alexa list is comprised of
popular web sites, these sites are frequently part of a CDN. We observe that many
sites use anycast, as inferred by collecting RTTs from geographically dispersed
vantage points and ﬁnding those sites with RTTs that are not physically possible
without anycast. We remove these sites from our analysis as to not conﬂate the
eﬀects of anycast with our inferences, leaving 2,813 unique address pairs.
When part of a CDN, the same website is often hosted on multiple machines
distributed across sites or geographic regions. We therefore separate the Alexa
hosts into those that are part of a CDN versus those that are not. To distinguish
CDN site, we query the DNS for the site from ﬁve geographically dispersed
vantage points. If we obtain diﬀerent A or AAAA records from multiple vantage
points, we label the site as belonging to a CDN. In addition, if the site’s DNS
CNAME corresponds to a well-known CDN, we place it in the CDN dataset.
Last, we create the “embedded” dataset. In practice, IPv4 addresses are
frequently embedded in IPv6 addresses in diﬀerent ways. We include instances
where the IPv4 address is embedded as four bytes, e.g. 162.159.243.37 and
2400:cb00:2048:1::a29f:f325, or where the IPv4 base-10 representation is
used as a base-16 sequence, e.g. 142.8.72.175 and 2a01:f1:d0:dc0:142:8:
72:175.
Table 1 characterizes the distribution of hosts in each dataset, including the
number of IPv4 and IPv6 ASes they represent as inferred from the routeviews
global BGP table [12] from the same day as our Alexa site list (April 14, 2014),
as well as the geographic distribution as determined by maxmind [11].
Server Siblings: Identifying Shared IPv4/IPv6 Infrastructure
153
3.2 TCP Option Signature
Modern TCP stacks make common use of TCP options, especially options in
[8]. While options are standardized, the order and packing of those options is
implementation dependent, thereby providing a well-known operating system-
granularity ﬁngerprint [10]. For example, FreeBSD in our dataset returns:
 whereas a Linux machine returns:
.
To form the signature, we preserve the option order, and strip the integer
value of the MSS and timestamp options. While the IPv6 MSS is frequently
20 bytes less than the IPv4 MSS (to accommodate the extra 20 bytes of IPv6
header), this is a loose rule in our ground-truth. Some hosts connect via tunnels,
with a lower IPv6 MSS, while some hosts support jumbo-grams only for IPv4.
While coarse-grained, the variability of the TCP options signature provides
a good ﬁrst-order ﬁlter. Table 1 reports the number of unique TCP option sig-
natures observed for each of the datasets.
3.3 TCP Timestamp Skew
Deﬁne a candidate pair as (I4, I6). We periodically connect to a running TCP
service on I4 and I6 and negotiate the TCP timestamp option [8]. We receive a
sequence of time-stamped packets along with their arrival time relative to our
i be the time at which the prober observes the i’th IPv4 packet
prober. Let t4
i be the observed time of the i’th IPv6 packet from I6. Similarly,
from I4 and t6
i and T 6
i be the timestamp contained in the TCP options of the i’th packet
let T 4
from I4 and I6 respectively. Following the technique in [9], for each IPv4 packet