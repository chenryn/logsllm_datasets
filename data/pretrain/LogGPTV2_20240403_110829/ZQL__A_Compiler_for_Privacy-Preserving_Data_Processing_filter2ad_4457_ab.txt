any matching row was used. If no row matches x, a run-
time exception is raised on the prover side, and the proof
fails. This semantics allow the implementation of func-
tions, set membership tests, and half-joins.
To enable lookups, each row of the input table cur-
rently needs to be signed using a re-randomizable signa-
ture by a trusted source, so these tables are given a spe-
cial type (ρ lookuptable) and lookups on intermediate,
computed tables are not supported.
The example blur,
listed below, repeatedly uses a
lookup to map private city identiﬁers to their respective
countries; the resulting table is then declassiﬁed.
let blur (X: int table) (F: (int ∗ int) lookuptable ) =
↓ (map (city →lookup city F) X)
The equivalent SQL statement would be select F.country
from X, F where F.city = X.city. The query implementa-
tion relies on a data source that issues a signed table from
cities to countries.
3 Security
The next two sections provide rigorous security deﬁni-
tions for what the ZQL compiler achieves and the crypto-
graphic building blocks it uses, necessary for formulating
our security theorems in §6. The mere fact that we can
give formal cryptographic deﬁnitions for a large class of
cryptographic protocols relies on our simple expression
language having a formal semantic for both source and
compiled programs. Readers interested in compiler ar-
chitecture can jump straight to §5, or those curious about
applications can ﬁnd them in §7.
Notations Consider a well-typed ZQL source query
Q (cid:25)= θ →↓ e, with (cid:28) input variables θ = (xi : τi)i=0..(cid:28)−1,
that declassiﬁes only its result. As explained in §2, the
typed variables θ specify the data sources and privacy
policy. Let (cid:27)T range over values of type θ, and R = Q((cid:27)T )
be the corresponding query result. Given Q, our com-
piler produces queries (S, (Ki, Di)i=0..(cid:28)−1, P, V) with for-
mal parameters indicated in parentheses as follows. (We
use primed variables for compiled values.)
χ used by the commitment scheme;
• S, the setup generator, generates global parameters
• (Ki)i=0..(cid:28)−1, the data sources key generation, gener-
ate key pairs ski,vki := Ki(χ) used to sign data and
verify their signatures;
input: T(cid:23)i := Di(χ,ski,Ti);
• (Di)i=0..(cid:28)−1, the data sources, extend and sign each
• P, the prover, produces an extended result from ex-
• V, the veriﬁer, returns either some source result
tended inputs: R(cid:23) := P(χ, (cid:27)vk,(cid:27)T(cid:23));
R := V(χ, (cid:27)vk,R(cid:23)) or a veriﬁcation error.
Main Properties We ﬁrst deﬁne functional correctness
when all participants comply with the protocol.
4
166  22nd USENIX Security Symposium 
USENIX Association
Deﬁnition 1 (S, (Ki, Di)i=0..(cid:29)−1, P, V) correctly imple-
ments the source query Q when, for any source inputs
(cid:28)T : θ and χ := S, (ski,vki := Ki(χ))i=0..(cid:29)−1, we have
V(χ, (cid:28)vk, P(χ, (cid:28)vk, Di(χ,ski,Ti)i=0..(cid:29)−1)) = Q((cid:28)T ).
We deﬁne privacy as indistinguishability between two
series of chosen inputs that yield the same query result.
Deﬁnition 2 Given a source query Q and an adver-
sary A , let AdvPriv
A = |2Pr[A wins]− 1| where the event
‘A wins’ is deﬁned by the following game:
(1) The challenger runs S and Ki to generate setup χ
and keys (cid:28)sk, (cid:28)vk; it provides χ and (cid:28)vk to A .
(2) The adversary A provides two vectors of input data
(cid:28)T 0 : θ and (cid:28)T 1 : θ such that (a) they coincide on pub-
lic data and (b) Q((cid:28)T 0) =Q( (cid:28)T 1).
corresponding inputs (cid:28)T(cid:29) := (Di(χ,ski,T b
and generates R(cid:29) := P(χ, (cid:28)vk,(cid:28)T(cid:29)).
(3) The challenger picks a random bit b, encodes the
i ))i=0..(cid:29)−1,
(4) Given R(cid:29), A returns his guess b(cid:29), and wins iff b = b(cid:29).
(S, (Ki)i=0..(cid:29)−1, (D)i=0..(cid:29)−1, P, V) is (t,ε)-private when,
for all A running at most for time t, we have AdvPriv
A ≤ ε.
Note that we do not formally provide privacy protection
against corrupted data sources. To strengthen our scheme
against data source attacks, we would have to rerandom-
ize all cryptographic material ﬂowing from data sources
to veriﬁers, which precludes our efﬁcient use of homo-
morphic commitments.
We deﬁne integrity as a game in which an adversary
has to produce an invalid but accepted response.
Deﬁnition 3 Given a source query Q and an adver-
sary A ,
A = Pr[A wins] where the event
‘A wins’ is deﬁned by the following game:
(1) The challenger runs S and Ki to generate setup χ
let AdvSnd
and keys (cid:28)sk, (cid:28)vk; it provides χ and (cid:28)vk to A .
(2) The adversary A can adaptively corrupt data
sources Di to get their signing keys ski and, at
the same time, it can obtain signed inputs T(cid:29)i
:=
Di(χ,ski,Ti) for source inputs Ti : τi of its choice.
(3) Valid results are source values R = Q((cid:28)T ) such
that, for each i, either i was corrupted or Ti was
signed. The adversary wins if he outputs R(cid:29) such
that V (χ, (cid:28)vk,R(cid:29)) returns any invalid result R(cid:27).
(S, (Ki)i=0..(cid:29)−1, (D)i=0..(cid:29)−1, P, V) is (t,ε)-sound when,
for all A running at most for time t, we have AdvSnd
A ≤ ε.
Depending on the adversary, there can be zero, one,
or numerous valid responses. In fact, depending on the
query and the input tables, whether a response is valid
may not even be efﬁciently checkable. The deﬁnition is,
however, still meaningful.
4 Main Cryptographic Tools (Review)
Signatures A digital signature scheme allows every-
one in possession of the veriﬁcation key vk to verify the
authenticity of data signed by the owner of the corre-
sponding signing key sk. We use signatures to let veri-
ﬁers authenticate data sources. Instead of signing private
data in the clear, data sources sign public commitments;
thus, the resulting signature tags are also public.
Cryptographic groups Besides conventional digital
signatures, for which we use standardized schemes, our
remaining cryptographic tools can either be speciﬁed for
composite order groups, obtained by computing modulo
an RSA modulus, or for prime order groups with a bi-
linear pairing. We use the latter for our presentation and
formal analysis as it offers both performance and con-
ceptual advantages.
ˆG, and GT be groups of prime order q. Let
Let G,
g ∈ G and ˆg ∈ ˆG be generators of G and ˆG respectively.
A bilinear pairing is an efﬁciently computable function
ˆe : G∗ ˆG → GT that is bilinear, i.e. ∀a,b ∈ Fq : e(ga, ˆgb) =
e(g, ˆg)ab and non-degenerate, i.e. e(g, ˆg) (cid:23)= 1. Whenever
possible we perform all operations in the base group G
with the shortest representation.
Commitments A commitment scheme allows a user to
commit to a hidden value such that he can reveal the com-
mitted value at a later stage. The properties of a commit-
ment scheme are hiding: the committed value must re-
main hidden until the reveal stage, and binding: the only
value which may be revealed is the one that was chosen
in the commit stage. We use the perfectly hiding commit-
ment scheme proposed by Pedersen [54]: given a group
G of prime order q with generators g and h, generate a
commitment Cx to x ∈ Fq by sampling a random opening
ox ← Fq and computing Cx = gxhox. The commitment is
opened by revealing both x and ox.
Two useful properties of Pedersen commitments are
(i) their homomorphic property that allows to derive a
commitment to the linear combination of input values;
and (ii) their algebraic structure that allows for efﬁcient
zero-knowledge proofs. For RSA groups, we use com-
mitments with similar properties [43, 34].
Zero-knowledge proofs
[59, 39, 11] provide a verify-
ing algorithm with an efﬁcient means for checking the
truth of a statement by guaranteeing that given access
to a successful proof generation algorithm one can ex-
tract a secret witness for said truth. At the same time,
zero-knowledge proofs [47, 46], and the related concepts
of witness indistinguishable proofs [38, 32], allow the
prover to keep this witness secret. We make use of a
long line of work on efﬁcient proofs of conjunctions of
discrete logarithm (DL) representations [57, 28, 52, 32,
30, 18, 26, 33, 50]. For non-linear computations such as
USENIX Association  
22nd USENIX Security Symposium  167
5
multiplication, we use the approach of Brands [18], Ca-
menisch [26], and Cramer and Damg˚ard [31].
DL representation proofs are interactive protocols of
three or more messages. To ease deployment and min-
imize communications, we use the Fiat-Shamir Heuris-
tic [40] and replace random messages sent by the veriﬁer
with hash function computations. The resulting proto-
cols can still be formally analyzed in the random oracle
model [12, 62].
Proof compatible signatures The combination of
zero-knowledge proofs and digital signatures allows us
to prove authentication properties on private data, such
as, for instance, the existence and properties of a match-
ing row when performing a private lookup.
We use CL signatures [20], as they are compatible
with DL representation proofs. The original scheme was
proven secure under the Strong RSA assumption and re-
quires groups with hidden order [6, 24]. Other CL signa-
ture proposals rely on a variety of assumptions based on
bilinear pairings [21, 17, 3, 25] and require more stan-
dard prime order DL-representation proofs. We also use
the scheme of [25], a good trade-off between security and
performance. An additional beneﬁt is that it is syntacti-
cally very close to RSA-based CL signatures.
To certify our lookup tables, data sources extend each
row of the table with a CL signature. For instance,
tables of triples of private integers (x0,x1,x2) are ex-
tended to tables with rows of the form (x0,x1,x2,e,v,A).
The veriﬁcation equations for RSA and bilinear pairing
based CL signatures are of the form Z = AeRx0
2 Sv
and ˆe(Z, ˆg) = ˆe(A,pk∗ge) ˆe(Rx0
2 Sv, ˆg) respectively,
where (Z,R0,R1,R2,S,pk) are group elements that form
the components of the veriﬁcation key vk. Both veriﬁ-
cation equations can be proven using efﬁcient DL repre-
sentations. The security of these two schemes is based on
the strong RSA assumption and the strong Difﬁe-Hellman
(SDH) assumption respectively.
0 Rx1
1 Rx2
0 Rx1
1 Rx2
5 Compiler Architecture
Protocol Overview The ZQL compiler takes a source
query, which contains no cryptographic computations,
and automatically produces programs for each data
source, for the prover, and for the veriﬁer.
First, the compiler augments the source query with
various cryptographic commitments to secrets and repre-
sentation equations to generate a shared translation that
will lead to both prover and veriﬁer code. Some com-
mitments are computed and signed by the data sources
that certify the computation inputs, and simply passed to
the prover and veriﬁer programs. Others, representing
intermediate secrets in the query, are interleaved with the
source computation: for any such secret x, the prover
may sample a secret opening ox, compute a Pedersen
commitment Cx =G gxhox, and send it to the veriﬁer; and
the veriﬁer may check it using a zero-knowledge proof.
Linear relations between secrets do not require com-
plex zero knowledge proofs, as they can be checked by
the veriﬁer simply by using the homomorphisms of Ped-
ersen commitments. For example, a private sum z = x +y
will have commitment Cz =G Cx ∗ Cy. Such commit-
ments need not be transmitted, as they can be recom-
puted by the veriﬁer. On the other hand, non-linear re-
lations between secrets, including multiplication and ta-
ble lookup, require Σ-protocol proofs to be synthesized.
For instance, to prove that z is the product of a secret x
committed in Cx and a secret y, one proves the con-
junction of the representation equations Cx =G gxhox and
1 =G (Cx)−ygzhoz. Note that the second equation uses a
variable commitment Cx as a base.
All Σ-protocols used in the compiler come down to
proving knowledge of the secret values underlying the
discrete logarithm representations of public group el-
ements, and equality relations between the secret val-
ues. Assume the ZQL query reduces to proving in zero-
knowledge the representations (cid:30)C =G (cid:30)e[ ˜x] of a number of
commitments (cid:30)C, represented by public group elements,
using a number of secrets ˜x (including secret openings).
For the multiplication example above, we have two equa-
tions on ﬁve secrets: (cid:30)C ≡ (Cx,1),
˜x ≡ (x,ox,y,z,oz)
and (cid:30)e[(α,β ,γ,δ ,ε)] ≡ (gα ∗ hβ ,C−γ
x gδ hε ). The zero-
knowledge protocol synthesized works as follows. The
prover
(1) samples a vector of random values ˜t, one for each
secret in ˜x; We call ˜t values the proof randomness;
(2) computes the challenge c = H((cid:30)e[˜t]);
(3) computes the responses ˜r = ˜t − c∗ ˜x, for all secrets.
The proof sent to the veriﬁer consists of the public pa-
rameters and values, the commitments (cid:30)C, the global chal-
lenge c, and the responses ˜r. The veriﬁer checks that
H((cid:30)Cc ∗G(cid:30)e[˜r]) = c, which ensures that the prover knows
the secret values in the commitments [40, 12]. As de-
tailed below, our compiled prover and veriﬁer programs
introduce secrets and process equations on the ﬂy, de-
pending on the query and its inputs.
Once the shared translation is decided, its specializa-
tion into prover and veriﬁer code is relatively straight-
forward. It involves mainly ensuring the right data ﬂows
within the query processing to compute all commitments
and responses, and to correctly verify them in the same
order. The inputs of the shared translation also deter-
mine the data source programs that generate keys, com-
pute commitments, and sign extended data.
Embedding cryptography within ZQL Our compiler
mostly operates within ZQL, with F# and C++ back-ends
to turn the compiled queries into executable code. This
168  22nd USENIX Security Symposium 
USENIX Association
6
e
op
τ
assert ϕ;e
::= . . .
|
::= . . .
−1,0,1, . . .