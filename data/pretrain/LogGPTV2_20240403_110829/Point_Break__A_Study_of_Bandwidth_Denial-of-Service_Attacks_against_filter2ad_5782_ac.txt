stream, which may not always be valid (as discussed below).
Mitigation: It is possible that ISPs could render such attacks
ineffective by ﬁltering trafﬁc. For example, ISPs could dis-
cover hosts belonging to the stresser services and ﬁlter trafﬁc
originating at those hosts. However, such rules may be difﬁ-
cult to maintain given the dynamic nature of the Internet.
Filtering all incoming requests to Tor relays that do not
originate at other relays would be an ineffective strategy. In
particular, entry relays must allow for clients anywhere on
the Internet to initiate a circuit, and any relay may be chosen
as an entry by clients implementing non-default path selec-
tion algorithms. Filtering attempts may also be complicated
by the churn rate of Tor relays and would interfere with the
process of bootstrapping new relays to the network. Finally,
dropping packets on the relay is an ineffective defense since
the dropped packets have already consumed bandwidth.
Traditional DoS defenses such as the use of CDNs are not
compatible with Tor since aggregating relays onto a small
number of CDN providers would diminish anonymity; it is
also unclear how a relay could operate within a CDN. Relay
operators may consider migrating to popular cloud services
that offer DoS protection services [1, 2]. However, the secu-
rity and privacy implications of migrating to such services is
unknown and may risk exposure to trafﬁc correlation attacks.
Perhaps the most tractable mitigation strategy is to in-
crease the total relay bandwidth capacity of the network.
5 Congesting Tor Bridges
Tor provides anonymous communication to clients, but does
not conceal the network locations of its relays, subjecting
them to trivial blocking. To counter censors that block access
to Tor relays, Tor logically separates anonymity (accessing
the Internet without revealing network location) from un-
blockability (gaining access to the Tor network). The lat-
ter is achieved through the use of bridge relays that are not
published in the Tor directories. Bridges serve as alterna-
tive ingress points into the Tor network for users who cannot
directly connect to Tor entry guards.
In this section, we explore the effects of using stresser ser-
vices (§3.1) to ﬂood Tor bridge relays. We differentiate be-
tween three classes of bridges:
Default Bridges: The Tor Browser Bundle (TBB) includes
a set of 38 hard-coded default bridges (as of version 8.0.3).
Users who cannot directly access Tor relays can conﬁgure
TBB to connect via one of these default bridges.
A special case of default bridges is meek bridges [4, 6] that
reside on popular cloud providers and communicate with Tor
clients via HTTPS. Censors cannot easily distinguish meek
trafﬁc from more typical HTTPS trafﬁc entering the cloud.
Disrupting meek thus entails entirely blocking access to the
cloud provider, which is presumed to impose too high a col-
lateral cost to the censor. Meek bridges, however, are ex-
pensive to operate (since cloud services are not free) and are
susceptible to cloud providers disallowing their use [17, 33].
Unlisted Bridges: Users can also request an unlisted bridge
either directly from TBB, via bridges.torproject.org, or
through email. To prevent a censor from trivially enumerat-
ing the bridges, Tor limits the amount of bridges it dissemi-
nates to a single requesting IP or email address. However,
such protections are obviously brittle and numerous tech-
niques exist for discovering unlisted bridges [20, 30].
Private Bridges: Finally, private bridges are not dissemi-
nated by the Tor Project, either because their operators did
not notify the Tor Project that they exist or because the Tor
Project opted not to disseminate them.
USENIX Association
28th USENIX Security Symposium    1827
5.1 The State of Tor’s Bridges
We ﬁrst examine the performance of the network’s bridges.
We focus on the 25 default bridges that use the obfs4 ob-
fuscation protocol2 since 90% of all bridge users use default
bridges [62] and obfs4 is the bridge type recommended by
Tor. To test their performance, we use a modiﬁed version
of Tor to download a 6 MiB ﬁle through each bridge. Sur-
prisingly, we ﬁnd that only 48% (12/25) of the obfs4 default
bridges included in TBB are operational.
Figure 1 plots the cumulative distribution (y-axis) of the
throughput of the functioning obfs4 default bridges (blue
line) when downloading a 6 MiB ﬁle on 2018-04-10. Each
default obfs4 bridge downloaded the 6 MiB ﬁle three times;
the CDF plots the average of these downloads. For consis-
tency, we ﬁxed the middle and exit relays, choosing relays
with high selection probabilities (and thus high bandwidths).
The median throughput of the default bridges is 368 KiB/s;
there is a large variation over the default bridges however,
ranging from 67 KiB/s to 1,190 KiB/s.
To compare against the performance of unlisted bridges,
we requested 135 unlisted obfs4 bridges from the Tor
Project’s bridge authority via its web and email interfaces.
Roughly 70% (95/135) of the acquired unlisted bridges were
found to be functional. As shown in Figure 1 (orange
line), the unlisted bridges generally outperformed the de-
fault bridges, which is expected given Matic et al.’s ﬁnd-
ing [62] that suggests approximately 90% of bridge trafﬁc is
conducted through default bridges. We suspect that the high
demand on the few operational default bridges leads to worse
performance than the less frequently used unlisted bridges.
As a point of comparison, historical data from the Tor
Metrics Portal reveals that non-bridge circuits on Tor dur-
ing the same time period yielded an average throughput of
786 KiB/s and experienced negligible failure rates [11].
In summary, Tor’s bridges are generally far more brittle
compared to the network’s advertised relays, offering much
greater failure rates for default (52%) and unlisted (30%)
bridges (compared to 0% for Tor relays) and lower average
throughput (545 KiB/s and 681 KiB/s for default and unlisted
bridges, respectively, versus 786 KiB/s without bridges).
5.2 Attacking Default Bridges
Ninety percent of bridge users use default bridges [62], and
only 12 working default obfs4 bridges are included in the
TBB. We ﬁrst estimate how costly it would be for an at-
tacker to disrupt all of the default bridges. Then, for vari-
ous migration models in which some percentage of affected
bridge users switch to unlisted bridges, we estimate the per-
formance and pricing effects of the migration.
Denying Access to the Default Bridges: Since bridge re-
lays do not publish their bandwidth capacities, our analysis
assumes that the distribution of link capacities for n default
2obfs4 obfuscates Tor trafﬁc to appear as a random sequence of bytes,
making it hard for DPI systems to classify.
bridge relays is the same as the distribution of link capaci-
ties for the fastest n non-bridge Tor relays. Thus, saturating
one default bridge’s Internet connectivity requires an amount
of bandwidth equal to the link capacity of the fastest Tor re-
lay, and saturating 10 default bridges’ requires bandwidth
equal to the combined link capacity of the fastest 10 Tor re-
lays. Following the link capacity estimates based on band-
width offerings as described in §4, we estimate that the set
of 12 operational default bridges consists of two 10 Gbit/s
links and ten 1 Gbit/s links (a total of 30 Gbit/s) and that
the full set of 38 default bridges consists of two 10 Gbit/s
links and thirty-six 1 Gbit/s links (a total of 56 Gbit/s). Re-
call from the pricing model in §3.1 that a 1 Gbit/s stresser
account costs $0.74/hr. Attacking the 12 operational obfs4
bridges thus requires 30 of such stresser accounts at a cost
of $0.74·30=$22.20 for each hour of downtime (or roughly
$22.20·24·31≈$17K per month). Repairing the remaining
default bridges offers only a small improvement: denying
service to 38 bridges requires 56 stresser accounts at a cost of
$0.74·56=$41.44/hr. ($41.44·24·31≈$31K/mo.) which we
posit is well within the budget of a nation-state adversary.
We emphasize that these are estimates since bridges’ true
link capacities are unknown.
If the default bridges are successfully attacked, there are
several potential consequences. In the worst case, the set of
default bridges will not be updated and the users who had de-
pended on them will abandon Tor altogether. The Tor Project
could also update its list of default bridges (e.g., by pushing
an update to TBB), but such a solution is only temporary
since an attacker could simply retarget its DoS efforts.
Users who are dependent on bridges may switch to us-
ing either unlisted bridges (since they are more plentiful and
more difﬁcult to enumerate) or to meek bridges.
The Cost of Migrating to Unlisted Bridges: We base our
analysis on (i) the distribution of throughput we measure
from unlisted bridges (Figure 1), (ii) the simplifying assump-
tion that how Tor is used by bridge users is independent
of the particular type of bridge used to gain entry to the
network, and (iii) Matic et al.’s observation that suggests
approximately 90% of bridge trafﬁc traverses through de-
fault bridges [62].
If all default bridge users switched to
unlisted bridges, applying our simplifying assumption, we
would therefore expect the load on the unlisted bridges to in-
crease by a factor of nine (since they previously carried just
10% of bridge trafﬁc). More generally, when a fraction f of
default bridge users shift to using unlisted bridges, the un-
listed bridges should expect to see a corresponding increase
in trafﬁc of a factor of 9· f . This trend is plotted in Figure 2.
Given that most (90%) of bridge trafﬁc that is handled by
the default bridges, even a small migration of default bridge
trafﬁc to unlisted bridges has performance consequences.
Even if a quarter of previously default bridge users switch
to unlisted bridges, their performance will signiﬁcantly suf-
fer, decreasing from 762 KiB/s to 338 KiB/s in the median.
1828    28th USENIX Security Symposium
USENIX Association
Figure 1: Cumulative distribution of bridge
throughput when downloading 6 MiB ﬁles.
The vertical line at 786 KiB/s shows the
throughput for clients that directly connect to
Tor to download a 5 MiB ﬁle.
Figure 2: Throughput of Tor users who use
unlisted bridges, as a function of the percent-
age of default bridge users who switch to us-
ing unlisted bridges.
Figure 3: The minimum, maximum, and av-
erage cost of maintaining meek when some
fraction of users switch to meek, based on
meek usage data and CloudFront and Azure
pricing models.
The Cost of Switching to Meek Bridges: If the non-meek
default bridges become unavailable, we expect some frac-
tion of users to switch to meek bridges. Censors cannot eas-
ily disrupt meek bridges without inﬂicting signiﬁcant col-
lateral damage since it cannot easily distinguish meek traf-
ﬁc from more typical HTTPS trafﬁc that accesses the cloud
provider. However, the increased use of meek incurs a cost
(since cloud services are not free).
To estimate the resulting monthly cost of maintaining
meek bridges as non-meek users switch over, we estimate the
bandwidth consumption of migrating users by constructing a
regression model. The bandwidth consumption estimate is
required to calculate the cost of operating the meek frontend
as cloud providers charge their users based on the bandwidth
consumption. To construct the regression model, we ﬁrst use
the statistics from the Tor Metrics Portal to estimate (i) the
number of meek users and (ii) the trafﬁc transferred by the
meek frontend as reported by meek frontend operators [5]
over this same timespan. We use this regression model to
estimate the consumed bandwidth as a function of increased
trafﬁc from users migrating to meek bridges. We then use
the estimated bandwidth usage to derive the expected meek
operational cost by applying the current pricing model of
the cloud service providers. Unfortunately, the Tor Project
stopped providing usage statistics for meek bridges, so we
restrict our analysis to usage that occurred between March
2016 and March 2017 (where such data is available [5]).
We also note that Amazon and Google stopped supporting
the use of domain fronting on their respective cloud ser-
vices [17, 33]3. Given these limitations, our analysis rep-
resents a rough approximation.
Figure 3 shows the monthly cost of operating meek
bridges as a function of the fraction of non-meek bridge users
who switch to using meek bridges. We plot the ranges of es-
timated monthly costs, since cloud providers charge differ-
ent amounts based on the locations of clients. We note that
3This highlights a particular brittle aspect of meek bridges—they are
completely dependent upon the cloud service on which they reside.
if half of non-meek users begin using meek bridges, then
in the best case, the operational cost of maintaining meek
bridges will double. If clients are disproportionately in loca-
tions in which providers charge higher rates, then the opera-
tional costs could be as high as six times the current amount.
Mitigation: Meek bridges offer the best protection against
DoS. Unfortunately, supporting a large user base is expen-
sive. One potential strategy for reducing costs is to require
bridge users to watch ads or perform small tasks (akin to Me-
chanical Turk) to ﬁnance the cost of their bridge use. Addi-
tionally, the recent proliferation of encrypted Server Name
Identiﬁcation (SNI) parameters [36, 44] may enable new
methods of domain fronting [32] that are compatible with
lower-cost hosting providers.
6 Unbalancing Load
In this section, we seek to better understand the extent to
which an adversary can disrupt Tor by using stresser services
(§3.1) to launch bandwidth DoS attacks on TorFlow [72], a
critical component in Tor’s load balancing process.
6.1 Relay Performance and Path Selection
As of 2018-11-01, the Tor network contains 6,436 volun-
tarily operated relays, the status of which is maintained by
9 Tor directory authorities in a signed network consensus
document. When using Tor, clients download and verify a
recent consensus, and use it to select paths of relays through
which they build circuits and tunnel Internet connections.
Tor uses a load-balancing system in order to provide low-
latency anonymous communication (i.e., suitable for brows-
ing websites) due to high client resource demand and a large
variance in the bandwidth capacities offered by relays (see
§4). The load balancing system is composed of two primary
components: a relay performance estimation mechanism and
a performance-aware path selection algorithm.
Relay Performance Estimation: Although Tor initially es-
timated relay performance according to self-reported adver-
tised bandwidth capacities, Bauer et al. showed how a low-
resource adversary could attract signiﬁcant trafﬁc to mali-
USENIX Association
28th USENIX Security Symposium    1829
0200400600800100012001400Throughput(KiB/s)0.00.20.40.60.81.0CumulativeFractionDefault(12onlinebridges)Unlisted(95onlinebridges)TorMetricsReportedAverage02505007501000125015001750Throughput(KiB/s)0.00.20.40.60.81.0CumulativeFractionPercentageofmigratingdefaultbridgeusers0255075100020406080100Percentageofmigratingnon-meekbridgeusers02,0004,0006,0008,000MonthlyCost(USD)Cloudfront+AzureMaxCostCloudfront+AzureAverageCostCloudfront+AzureMinCostcious relays (to improve end-to-end correlation attacks) by
lying about their available bandwidth [15]. Perry subse-
quently designed and published the TorFlow relay measure-
ment system to reduce the extent to which Tor trusts relays
to honestly report their bandwidth capacity [72], and Tor has
been using it to measure relays for nearly a decade (despite
alternative designs [19, 55, 78]).
TorFlow is a measurement tool that scans Tor relays to
measure their relative performance. To measure Tor re-
lays, TorFlow (i) sorts the consensus list of relays by their
previously-expected performance, (ii) partitions the sorted
list into slices of 50 relays each, (iii) distributes the slices
among 9 subprocesses that run in parallel, (iv) creates 2-hop
circuits using pairs of relays that belong to the same slice
(and so can provide similar performance), and (v) downloads
one of a set of 13 ﬁxed-sized ﬁles (2i for i ∈ [4,16] KiB) from
a known destination through each circuit. TorFlow repeats
this process until it has attempted to download through each
relay at least 5 times, after which it uses the mean of the
measured download completion times to compute a weight
for each relay that represents its performance relative to the
other measured relays.
The output of the TorFlow measurement process is a ver-
sion 3 bandwidth (V3BW) ﬁle specifying the weights and
other information about each scanned relay. Currently, 5
of the 9 directory authorities also act as bandwidth authori-
ties [3]: they obtain a V3BW ﬁle and participate in a voting
protocol to determine an authoritative set of relay weights
that will appear in the next network consensus. Note that
a bandwidth authority operator may obtain a V3BW ﬁle by
running TorFlow (potentially on a distinct machine from that
which runs their directory authority) or by obtaining one
from another trusted source that is running TorFlow.
Performance-Aware Path Selection: Tor’s path selection
algorithm biases relay selection to favor those providing