# Maximum Entropy Estimation and Network Traffic Anomaly Detection

## 1. Maximum Entropy Estimation
Maximum Entropy estimation is a method used to find a set of parameters \(\Lambda = \{\lambda_i\}\) in equation (3) for the feature functions \(\{f_i\}\) that minimizes the Kullback-Leibler (K-L) divergence between the empirical distribution \(\tilde{P}\) and the model distribution \(P\):

\[
\Lambda = \arg \min_{\Lambda} \sum_{\omega \in \Omega} \tilde{P}(\omega) \log \frac{\tilde{P}(\omega)}{P(\omega)}
\]

Several numerical methods can be used to solve this optimization problem. In our work, we employ the L-BFGS Maximum Entropy estimation algorithm, specifically the "tao lmvm" implementation by Malouf [8].

## 2. Model Construction
The model construction process involves an iterative procedure, as shown in Figure 1. The steps are repeated until a stopping criterion is met. This criterion can be either that the K-L divergence of \(P\) with respect to \(\tilde{P}\) is below a threshold or that the gain from adding a new feature function is too small to improve the model.

### Feature Functions
The feature functions are selected from a set of candidate functions. In our case, the domain \(\Omega\) consists of packet classes differentiated by protocols and destination port numbers. Our candidate feature functions include:
- Indicator functions that check the packet's protocol information.
- Indicator functions that classify the packet's destination port number.
- Indicator functions that check both the packet's protocol and destination port number.

### Algorithm
1. **Initialization:**
   - Set \(n = 0\)
   - Given a set of training data with empirical distribution \(\tilde{P}\), a set of candidate feature functions \(F\), and an initial density model \(P_0\), where \(P_0(\omega) = \frac{1}{Z}\) and \(Z = |\Omega|\).

2. **Feature Selection:**
   - For each feature function \(g \in F\) and \(g \notin \{f_i\}\), compute the gain \(G_{P_n}(g)\).
   - Select the feature function \(f_{n+1}\) with the largest gain.

3. **Parameter Estimation:**
   - Update all parameters and set \(P_{n+1}\) to be the updated model.

4. **Stopping Criterion:**
   - If the stopping criterion is not met, set \(n = n + 1\) and repeat from step 2. Otherwise, return the learned model \(P_{n+1}\).

**Figure 1: Model Construction Algorithm**

## 3. Detecting Network Traffic Anomalies
The relative entropy measures the difference between the distribution of packet classes in the current network traffic and the baseline distribution. A significant difference indicates the presence of anomalies, such as a sudden increase in the frequency of rarely seen packet classes or a decrease in regularly appearing ones.

### Time Slot Analysis
We divide time into fixed-length slots \(\delta\). For a given time slot with packet sequences \(\{x_1, \ldots, x_n\}\), the empirical distribution \(\tilde{P}\) is:

\[
\tilde{P}(\omega) = \frac{1}{n} \sum_{i=1}^n \mathbb{I}(x_i \in \omega)
\]

For each packet class, the relative entropy is defined as:

\[
D_{\tilde{P} \| P}(\omega) = \tilde{P}(\omega) \log \frac{\tilde{P}(\omega)}{P(\omega)}
\]

where \(P\) is the baseline distribution obtained from Maximum Entropy estimation. This value quantifies the distortion of the distribution for each packet class \(\omega\) from the baseline distribution.

### Sliding Window Detection
In each time slot, we record packet classes with divergences greater than a threshold \(d\). If for a certain packet class \(\omega\), \(D_{\tilde{P} \| P}(\omega) > d\) more than \(h\) times in a window of \(W\) time slots, an alarm is raised, indicating a potential anomaly.

## 4. Experimental Results
Our experiments use data collected at the UMASS Internet gateway router using DAG cards by Endace [3]. The data consist of seven hours of traffic trace from July 16th to July 22nd, 2004, labeled by human inspection. We use the data from July 20th as the training set and apply the Maximum Entropy estimation algorithm to generate the baseline distribution. The algorithm stops when the K-L divergence is less than 0.01, resulting in 362 feature functions.

### Example: Port Scans
On July 19th, 2004, two port scans were detected at port 4899. The relative entropy of SYN packets targeting ports 4824 to 4923 increased significantly, as shown in Figure 2.

**Figure 2: Relative Entropy for SYN Packets and Destination Port Number 4824-4923**

### Performance Evaluation
We tested the algorithm on six additional human-labeled datasets. The performance metrics include precision, recall, and F1 score. Table 1 summarizes the results, showing that the algorithm effectively detects most anomalies with few false positives and false negatives.

**Table 1: Algorithm Performance**

## 5. Implementation and Practical Issues
We are implementing the detection algorithm on an Intel IXP 1200 packet processing engine, which has six processing engines, one control processor, and operates at 200 MHz. The empirical distribution is compared to the baseline distribution every second. The baseline distribution is estimated offline and should be updated periodically to account for changes in traffic patterns.

## 6. Conclusion
This paper presents a method for detecting network traffic anomalies using Maximum Entropy estimation and relative entropy. The approach effectively identifies various types of anomalies, including SYN attacks and port scans, with low false positives. Future work will explore further improvements and comparisons with other methods.

## References
[1] BARFORD, P., KLINE, J., PLONKA, D., AND RON, A. A signal analysis of network traffic anomalies. In Proceedings of ACM SIGCOMM Internet Measurement Workshop (2002).

[2] BRUTLAG, J. D. Aberrant behavior detection in time series for network service monitoring. In Proceeding of the 14th Systems Administration Conference (2000), pp. 139–146.

[3] ENDACE. http://www.endace.com.

[4] GU, Y., MCCALLUM, A., AND TOWSLEY, D. Detecting anomalies in network traffic using maximum entropy. Tech. rep., Department of Computer Science, UMASS, Amherst, 2005.

[5] INTEL CORP. Intel ixp 1200 network processor, 2000.

[6] INTERNET NUMBERS ASSIGNED AUTHORITY. http://www.iana.org/assignments/port-numbers.

[7] LEE, W., AND XIANG, D. Information-theoretic measures for anomaly detection. In Proceedings of the IEEE Symposium on Security and Privacy (2001), IEEE Computer Society, p. 130.

[8] MALOUF, R. A comparison of algorithms for maximum entropy parameter estimation. In Proceedings of the 6th Conference on Natural Language Learning (2002).

[9] MCCALLUM, A. Efficiently inducing features of conditional random fields. In Nineteenth Conference on Uncertainty in Artificial Intelligence (UAI03) (2003).

[10] PAXSON, V. Bro: A system for detecting network intruders in real-time.

[11] PIETRA, S. D., PIETRA, V. D., AND LAFFERTY, J. Inducing features of random fields. IEEE Transactions on Pattern Analysis and Machine Intelligence 19, 4 (1997), 380–393.

[12] SNORT: THE OPEN SOURCE NETWORK INTRUSION DETECTION SYSTEM. http://www.snort.org/.

[13] STANIFORD, S., HOAGLAND, J., AND MCALERNEY, J. M. Practical automated detection of stealthy portscans. In Proceedings of the IDS Workshop of the 7th Computer and Communications Security Conference (2000).

[14] THOTTAN, M., AND JI, C. Anomaly detection in ip networks. IEEE Trans. Signal Processing 51 (2003).

[15] WANG, H., ZHANG, D., AND SHIN, K. G. Detecting syn flooding attacks. In Proceedings of IEEE INFOCOM (2002).