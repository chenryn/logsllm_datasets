用这个属性实现的函数存在两个section，在动态链接器构造了进程映像，并执行了重定位以后，每个共享的目标都获得执行某些初始化代码的机会。这些初始化函数的被调用顺序是不一定的，不过所有共享目标，初始化都会在可执行文件得到控制之前发生。类似地，共享目标也包含终止函数，这些函数在进程完成终止动作序列时，通过atexit（）机制执行。动态链接器对终止函数的调用顺序是不确定的。共享目标通过动态结构中的DT_INIT和DT_FINI条目指定初始化/终止函数。通常这些代码放在.init和.fini节区中。这个知识点很重要，后面在进行动态调试so的时候，还会用到这个知识点，所以一定要理解。这里找到了解密的时机，自己定义一个解密函数，然后用上面的这个属性声明就可以了。
14.1.2 实现方案
编写一个简单的native代码，需要做两件事：
·将核心的native函数定义在自己的一个section中，这里会用到这个属性：__attribute__（（section（“.mytext”）））；其中.mytext是定义的section。
·需要编写解密函数，用属性：__attribute__（（constructor））；声明。
这样一个native程序包含两个重要的函数，使用ndk编译成so文件。
编写加密程序，在加密程序中需要做的是：
·通过解析so文件，找到.mytext段的起始地址和大小，思路是：找到所有的section，然后获取它的name字段，再结合String Section，遍历找到.mytext字段。
·找到.mytext段之后进行加密，最后再写入到文件中。
14.1.3 代码实现
前面介绍了原理和实现方案，下面就开始编写对应的代码吧。
1.native程序
先来看看大致代码逻辑：
下面来分析一下代码：
1）定义自己的段：
其中getString返回一个字符串，提供给Android上层，然后将getString函数定义在.mytext段中。
2）获取so加载到内存中的起始地址：
读取设备的proc//maps中的内容，因为这个maps中是程序运行的内存映像，如下所示：
只有获取到so的起始地址，才能找到指定的section，然后进行解密。
3）解密函数：
获取到so文件的头部，然后获取指定section的偏移地址和size：
读者可能会有困惑？为什么是这样获取偏移地址和大小的呢，其实这里做了一点工作，就是在加密的时候顺便改写了so的头部信息，将偏移地址和大小值写到了头部中，这样加大破解难度。
text_addr是起始地址+偏移值，就是section在内存中的绝对地址，nsize是section占用的页数。
然后修改这个section的内存操作权限：
这里调用了一个系统函数：mprotect，其参数如下：
·需要修改内存的起始地址，必须需要页面对齐，也就是必须是页面PAGE_SIZE（0x1000=4096）的整数倍。
·需要修改的大小，即占用的页数*PAGE_SIZE。
·权限值。
最后读取内存中的section内容，然后进行解密，再将内存权限修改回去。然后使用ndk编译成so即可，这里用到了系统的打印log信息，所以需要设置共享库，看一下编译脚本Android.mk：
2.加密程序
获取到上面的so文件，下面就来看看如何进行加密的：
需要解析so文件的头部信息、程序头信息、段头信息，如下所示：
关于如何解析这里就不详细说明了，不了解的读者可以去查看前面第4章介绍so文件格式内容。
获取这些信息之后，下面就来开始寻找section信息了，只需要遍历section列表，找到名字是.mytext的section即可，然后获取偏移地址和大小，对内容进行加密，回写到文件中。
下面来看看核心方法：
section中的sh_name字段的值是这个section的name在StringSection中的索引值，这里offset就是StringSection在文件中的偏移值。当然需要知道的一个知识点就是：StringSection中的每个name都是以'\0'结尾的，所以只需要判断字符串到结束符就可以了，判断方法如下：
加密完成之后，需要做的是回写到so文件中，当然还需要做一件事，就是将加密的.mytext段的偏移值和pageSize保存到头部信息中：
看到这里读者可能会困惑，这样修改了so的头部信息的话，在加载运行so文件的时候不会报错吗？其实这就要看看Android底层是如何解析so文件，然后将so文件映射到内存中，下面来看看系统是如何解析so文件的。
在linker.h源码中有一个重要的结构体soinfo，下面列出一些字段：
另外，linker.c中也有许多地方可以佐证。其本质还是linker基于装载视图解析的so文件。基于上面的结论，再来分析ELF头的字段：
·e_ident[EI_NIDENT]字段包含魔数、字节序、字长和版本，后面填充0。对于安卓的linker，通过verify_elf_object函数检验魔数，判定是否为.so文件。那么，我们可以向位置写入数据，至少可以向后面的0填充位置写入数据。遗憾的是，我在fedora 14下测试，是不能向0填充位置写数据，链接器报非0填充错误。
·对于安卓的linker，对e_type、e_machine、e_version和e_flags字段并不关心，是可以修改成其他数据的（仅分析，没有实测）。
·对于动态链接库，e_entry入口地址是无意义的，因为程序被加载时，设定的跳转地址是动态连接器的地址，这个字段是可以被作为数据填充的。
·so装载时，与链接视图没有关系，即e_shoff、e_shentsize、e_shnum和e_shstrndx这些字段是可以任意修改的。被修改之后，使用readelf和ida等工具打开，会报各种错误，相信读者已经见识过了。
·既然so装载与装载视图紧密相关，自然e_phoff、e_phentsize和e_phnum这些字段是不能动的。
从上面可以知道，so文件中有些信息在运行时是没有用的，有些东西是不能改的。在上面加密完成之后，可以验证一下，使用readelf命令查看一下，如图14-2所示。
图14-2 查看so文件内容
从上面的内容可以看到，so文件内容已经显示错乱了，加密成功。再用IDA查看一下，如图14-3和图14-4所示。
图14-3 IDA打开so文件（一）
图14-4 IDA打开so文件（二）
会有错误提示，但是点击OK，还是成功打开了so文件，使用ctrl+s查看section信息的时候，如图14-5所示。
图14-5 查看加密之后的section信息
也没有看到section信息，可以看一下没有加密前的效果，如图14-6所示。
图14-6 so加密之前的section信息
既然加密成功了，那么下面验证一下能否运行成功。
3.Android测试demo
在获取加密之后的so文件后，用Android工程测试一下：
运行结果如图14-7所示。
图14-7 运行效果
提示：案例下载地址为http://download.csdn.net/detail/jiangwei0910410003/9288051
14.1.4 总结
加密流程：
1）从so文件头读取section偏移shoff、shnum和shstrtab。
2）读取shstrtab中的字符串，存放在str空间中。
3）从shoff位置开始读取section header，存放在shdr中。
4）通过shdr->sh_name在str字符串中索引，与.mytext进行字符串比较，如果不匹配，继续读取。
5）通过shdr->sh_offset和shdr->sh_size字段，将.mytext内容读取并保存在content中。
6）为了便于理解，不使用复杂的加密算法。这里，只将content的所有内容取反，即*content=~（*content）。
7）将content内容写回so文件中。
8）为了验证第二节中关于section字段可以任意修改的结论，这里，将shdr->addr写入ELF头e_shoff，将shdr->sh_size和addr所在内存块写入e_entry中，即ehdr.e_entry=（length<<16）+nsize。当然，这样同时也简化了解密流程，还有一个好处是：如果将so文件头修正放回去，程序是不能运行的。
解密时，需要保证解密函数在so加载时被调用，那函数声明为：init_getString__attribute__（（constructor））。（也可以使用c++构造器实现，其本质也是用attribute实现的。）
解密流程：
1）动态链接器通过call_array调用init_getString。
2）Init_getString首先调用getLibAddr方法，得到so文件在内存中的起始地址。
3）读取前52字节，即ELF头。通过e_shoff获得.mytext内存加载地址，ehdr.e_entry获取.mytext大小和所在内存块。
4）修改.mytext所在内存块的读写权限。
5）将[e_shoff，e_shoff+size]内存区域数据解密，即取反操作：*content=~（*content）。
6）修改回内存区域的读写权限。
这里是对代码段的数据进行解密，需要写权限。如果对数据段的数据解密，是不需要更改权限而直接操作的。
14.2 基于对so中的函数加密实现so加固
上一节介绍了对so中指定的section进行加密来实现对so加固方案。延续之前的内容来介绍一下如何对函数进行加密来实现加固。
14.2.1 技术原理
本节内容和上一节有很多类似的地方，这里就不做太多的解释了。和上一节内容唯一的不同点就是如何找到指定的函数的偏移地址和大小。
那么先来了解一下so中函数的表现形式：在so文件中，每个函数的结构描述是存放在.dynsym段中的。每个函数的名称保存在.dynstr段中的，类似于之前说过的每个section的名称都保存在.shstrtab段中，所以在上一节中找到指定section的时候，就是通过每个section的sh_name字段到.shstrtab中寻找名字即可，而且知道.shstrtab这个section在头文件中是有一个index的，就是在所有段列表中的索引值，所以很好定位.shstrtab。
但是在本节内容中可能遇到一个问题，就是不能按照这种方式去查找指定函数名了，如下所示：
可能有的人意识到一个方法，就是可以通过section的type来获取.dynsym和.dynstr。看到上图中.dynsym类型是：DYNSYM，.dynstr类型是STRTAB，但是这种方法是不行的，因为这个type不是唯一的，也就说不同的section，type可能相同，没办法区分，比如.shstrtab和.dynstr的type都是STRTAB.其实从这里就知道这两个段的区别了：.shstrtab值存储段的名称，.dynstr是存储so中的所有符号名称。
那么该怎么办呢？这时候再去看一下so文件格式说明（参见第4章）。看到有一个.hash段，在上图中也可以看到的：由Elf32_Word对象组成的哈希表支持符号表访问。下面的例子有助于解释哈希表组织，如图14-8所示。
图14-8 符号表索引
bucket数组包含nbucket个项目，chain数组包含nchain个项目，下标都是从0开始。bucket和chain中都保存符号表索引。chain表项和符号表存在对应。符号表项的数目应该和nchain相等，所以符号表的索引也可用来选取chain表项。哈希函数能够接受符号名并且返回一个可以用来计算bucket的索引。因此，如果哈希函数针对某个名字返回了数值X，则bucket[X%nbucket]给出了一个索引y，该索引可用于符号表，也可用于chain表。如果符号表项不是所需要的，那么chain[y]则给出了具有相同哈希值的下一个符号表项。可以沿着chain链一直搜索，直到所选中的符号表项包含了所需要的符号，或者chain项中包含值STN_UNDEF。
上面的描述感觉有点复杂，其实说的简单点就是：用目标函数名在用hash函数得到一个hash值，然后再做一些计算就可以得到这个函数在.dynsym段中这个函数对应的条目了。关于这个hash函数是公用的，在Android中的bonic/linker.c源码中也是可以找到的：
那么只要得到.hash段即可，但是怎么获取到这个section中呢？so中并没有对这个section进行数据结构的描述，有人可能想到了在上图中看到.hash段的type是HASH，那么再通过这个type来获取？但是之前说了，这个type不是唯一的，通过它来获取section是不靠谱的？那么该怎么办呢？这时候就要看一下程序头信息了，如下所示：
程序头信息是最后so被加载到内存中的映像描述，这里看到有一个.dynamic段。再看看so文件的装载视图和链接视图，如图14-9所示。
在之前也说过，so被加载到内存之后，就没有section了，对应的是segment，也就是程序头中描述的结构，而且一个segment可以包含多个section，相同的section可以被包含到不同的segment中。.dynamic段一般用于动态链接，所以.dynsym和.dynstr，.hash肯定包含在这里。可以解析了程序头信息之后，通过type获取到.dynamic程序头信息，然后获取到segment的偏移地址和大小，再进行解析成elf32_dyn结构。下面代码就是程序头的type类型和dyn结构描述，可以在elf.h中找到：
图14-9 so文件的装载视图和链接视图
这里的三个字段含义如下：
·d_tag：标示，标示这个dyn是什么类型，是.dynsym还是.dynstr等。
·d_val：section的大小。
·d_ptr：section的偏移地址。
细心的读者可能会发现一个问题，就是在这里寻找.dynamic也是通过类型的，然后再找到对应的section。这种方式和之前说的通过type来寻找section有两个不同之处：
·在程序头信息中，type标示.dynamic段是唯一的，所以可以通过type来进行寻找。
·看到上面的链接视图和装载视图发现，这种通过程序头中的信息来查找.dysym等section靠谱点，因为当so被加载到内存中，就不存在了section了，只有segment了。
14.2.2 实现方案
本节用一个案例来展示so加固方法，即编写native程序直接返回字符串给Java层进行展示。需要做的是对Java_com_example_shelldemo2_MainActivity_getString函数进行加密。加密和解密都是基于装载视图实现。注意，被加密函数如果用static声明，那么函数是不会出现在.dynsym中，是无法在装载视图中通过函数名找到进行解密的。当然，也可以采用取巧方式，类似上节，把地址和长度信息写入so头中实现。Java_com_example_shelldemo2_MainActivity_getString需要被调用，那么一定是能在.dynsym找到的。
1.加密流程
1）读取文件头，获取e_phoff、e_phentsize和e_phnum信息。