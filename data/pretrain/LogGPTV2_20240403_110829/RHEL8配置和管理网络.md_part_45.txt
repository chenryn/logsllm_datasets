:::
使用 `firewalld`{.literal}，您可以配置以下网络地址转换(NAT)类型：
::: itemizedlist
-   伪装
-   源 NAT（SNAT）
-   目标 NAT（DNAT）
-   重定向
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_configuring-and-managing-networking.html#the-different-nat-types-masquerading-source-nat-destination-nat-and-redirect_assembly_configuring-nat-using-firewalld}不同的 NAT 类型： masquerading、source NAT、destination NAT 和 redirect {.title}
:::
这些是不同的网络地址转换（NAT）类型：
::: variablelist
[伪装和源 NAT（SNAT）]{.term}
:   使用以上 NAT 类型之一更改数据包的源 IP
    地址。例如，互联网服务提供商不路由专用 IP 范围，如
    `10.0.0.0/8`{.literal}。如果您在网络中使用专用 IP
    范围，并且用户应该能够访问 Internet
    上的服务器，请将这些范围内的数据包源 IP 地址映射到公共 IP 地址。
    伪装和 SNAT 都非常相似。不同之处是：
    ::: itemizedlist
    -   伪装自动使用传出接口的 IP 地址。因此，如果传出接口使用了动态 IP
        地址，则使用伪装。
    -   SNAT 将数据包的源 IP 地址设置为指定的 IP
        地址，且不会动态查找传出接口的 IP 地址。因此，SNAT
        要比伪装更快。如果传出接口使用了固定 IP 地址，则使用 SNAT。
    :::
[目标 NAT（DNAT）]{.term}
:   使用此 NAT 类型重写传入数据包的目标地址和端口。例如，如果您的 Web
    服务器使用私有 IP 范围内的 IP
    地址，因此无法直接从互联网访问，您可以在路由器上设置 DNAT
    规则以将传入的流量重定向到此服务器。
[重定向]{.term}
:   这个类型是 IDT 的特殊示例，它根据链 hook
    将数据包重定向到本地机器。例如，如果服务在其标准端口的不同端口上运行，您可以将从标准端口传入的流量重定向到此特定端口。
:::
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_configuring-and-managing-networking.html#configuring-ip-address-masquerading_assembly_configuring-nat-using-firewalld}配置 IP 地址伪装 {.title}
:::
以下流程描述了如何在系统中启用 IP 伪装。IP
伪装会在访问互联网时隐藏网关后面的独立机器。
::: orderedlist
**流程**
1.  要检查 IP 伪装是否已启用（例如，对于 `external`{.literal} 区），以
    `root`{.literal} 的身份输入以下命令：
    ``` screen
    # firewall-cmd --zone=external --query-masquerade
    ```
    如果已启用，该命令会输出 `yes`{.literal}，退出状态为
    `0`{.literal}。否则，会输出 `no`{.literal}，退出状态为
    `1`{.literal}。如果省略 `zone`{.literal}，将使用默认区。
2.  要启用 IP 伪装，以 `root`{.literal} 的身份输入以下命令：
    ``` screen
    # firewall-cmd --zone=external --add-masquerade
    ```
3.  要让此设置持久，请重复添加 `--permanent`{.literal} 选项的命令。
:::
要禁用 IP 伪装，以 `root`{.literal} 身份输入以下命令：
``` screen
# firewall-cmd --zone=external --remove-masquerade --permanent
```
:::
:::
::: section
::: titlepage
# []{#using-and-configuring-firewalld_configuring-and-managing-networking.html#port-forwarding_using-and-configuring-firewalld}端口转发 {.title}
:::
使用此方法重定向端口只可用于基于 IPv4 的流量。对于 IPv6
重定向设置，您必须使用丰富的规则。
要重定向到外部系统，需要启用伪装。如需更多信息，请参阅[配置 IP
地址伪装](#using-and-configuring-firewalld_configuring-and-managing-networking.html#configuring-ip-address-masquerading_assembly_configuring-nat-using-firewalld "配置 IP 地址伪装"){.link}。
::: section
::: titlepage
## []{#using-and-configuring-firewalld_configuring-and-managing-networking.html#adding-a-port-to-redirect_port-forwarding}添加一个端口来重定向 {.title}
:::
使用
`firewalld`{.literal}，您可以设置端口重定向，以便所有到达您系统中特定端口的传入流量都会传送到您选择的另一个内部端口，或者发送到另一台机器上的外部端口。
::: itemizedlist
**先决条件**
-   在您将从一个端口的流量重新指向另一个端口或另一个地址前，您必须了解 3
    个信息：数据包到达哪个端口，使用什么协议，以及您要重定向它们的位置。
:::
::: orderedlist
**流程**
1.  将端口重新指向另一个端口：
    ``` literallayout
    # firewall-cmd --add-forward-port=port=port-number:proto=tcp|udp|sctp|dccp:toport=port-number
    ```
2.  将端口重定向到不同 IP 地址的另一个端口：
    ::: orderedlist
    1.  添加要转发的端口：
        ``` literallayout
        # firewall-cmd --add-forward-port=port=port-number:proto=tcp|udp:toport=port-number:toaddr=IP
        ```
    2.  启用伪装：
        ``` literallayout
        # firewall-cmd --add-masquerade
        ```
    :::
:::
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_configuring-and-managing-networking.html#redirecting-tcp-port-80-to-port-88-on-the-same-machine_port-forwarding}将 TCP 端口 80 重定向到同一台机器中的 88 端口 {.title}
:::
按照以下步骤将 TCP 端口 80 重定向到端口 88。
::: orderedlist
**流程**
1.  将端口 80 重定向到 TCP 流量的端口 88:
    ``` literallayout
    # firewall-cmd --add-forward-port=port=80:proto=tcp:toport=88
    ```
2.  使新设置具有持久性：
    ``` literallayout
    # firewall-cmd --runtime-to-permanent
    ```
3.  检查是否重定向了端口：
    ``` literallayout
    # firewall-cmd --list-all
    ```
:::
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_configuring-and-managing-networking.html#removing-a-redirected-port_port-forwarding}删除重定向的端口 {.title}
:::
这个步骤描述了如何删除重定向的端口。
::: orderedlist
**流程**
1.  要删除重定向的端口：
    ``` literallayout
    # firewall-cmd --remove-forward-port=port=port-number:proto=:toport=port-number:toaddr=
    ```
2.  要删除重定向到不同地址的转发端口：
    ::: orderedlist
    1.  删除转发的端口：
        ``` literallayout
        # firewall-cmd --remove-forward-port=port=port-number:proto=:toport=port-number:toaddr=
        ```
    2.  禁用伪装：
        ``` literallayout
        # firewall-cmd --remove-masquerade
        ```
    :::
:::
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_configuring-and-managing-networking.html#removing-tcp-port-80-forwarded-to-port-88-on-the-same-machine_port-forwarding}在同一台机器上将 TCP 端口 80 转发到端口 88 {.title}
:::
这个步骤描述了如何删除端口重定向。
::: orderedlist
**流程**
1.  列出重定向的端口：
    ``` literallayout
    ~]# firewall-cmd --list-forward-ports
    port=80:proto=tcp:toport=88:toaddr=
    ```
2.  从防火墙中删除重定向的端口：
    ``` literallayout
    ~]# firewall-cmd  --remove-forward-port=port=80:proto=tcp:toport=88:toaddr=
    ```
3.  使新设置具有持久性：
    ``` literallayout
    ~]# firewall-cmd --runtime-to-permanent
    ```
:::
:::
:::
::: section
::: titlepage
# []{#using-and-configuring-firewalld_configuring-and-managing-networking.html#managing-icmp-requests_using-and-configuring-firewalld}管理 ICMP 请求 {.title}
:::
`Internet Control Message Protocol`{.literal}（`ICMP`{.literal}）是一个支持协议，不同的网络设备使用它来发送错误信息和显示连接问题的操作信息，例如：请求的服务不可用。`ICMP`{.literal}
与 TCP 和 UDP 等传输协议不同，因为它没有用来在系统间交换数据。
不幸的是，可以使用 `ICMP`{.literal} 信息（特别是
`echo-request`{.literal} 和 `echo-reply`{.literal}
）显示您的网络信息，并将这些信息用于各种类型的活动。因此，`firewalld`{.literal}
启用阻止 `ICMP`{.literal} 请求来保护您的网络信息。
::: section
::: titlepage
## []{#using-and-configuring-firewalld_configuring-and-managing-networking.html#listing-and-blocking-icmp-requests_managing-icmp-requests}列出和阻塞 ICMP 请求 {.title}
:::
::: title
**列出 `ICMP`{.literal} 请求**
:::
`ICMP`{.literal} 请求在位于 `/usr/lib/firewalld/icmptypes/`{.literal}
目录中的独立 XML
文件中描述。您可以阅读这些文件来查看请求的描述。`firewall-cmd`{.literal}
命令控制 `ICMP`{.literal} 请求操作。
::: itemizedlist
-   列出所有可用的 `ICMP`{.literal} 类型：
    ``` literallayout
    # firewall-cmd --get-icmptypes
    ```
-   IPv4、IPv6 或两个协议都可以使用 `ICMP`{.literal} 请求。要查看
    `ICMP`{.literal} 请求使用的协议：
    ``` literallayout
    # firewall-cmd --info-icmptype=
    ```
-   `ICMP`{.literal} 请求的状态会显示为 `yes`{.literal}
    （请求当前被阻塞）或 `no`{.literal} （请求当前没有被阻塞）。检查
    `ICMP`{.literal} 请求当前是否被阻断：
    ``` literallayout
    # firewall-cmd --query-icmp-block=
    ```
:::
::: title
**阻塞或取消阻塞 `ICMP`{.literal} 请求**
:::
当您的服务器阻断 `ICMP`{.literal}
请求时，它不会提供通常会提供的信息。但这并不意味着根本不给出任何信息。客户端收到特定
`ICMP`{.literal} 请求被阻断的信息（拒绝）。应仔细考虑阻塞
`ICMP`{.literal} 请求，因为它可能会造成通信问题，特别是 IPv6 流量。
::: itemizedlist
-   检查 `ICMP`{.literal} 请求当前是否被阻断：
    ``` literallayout
    # firewall-cmd --query-icmp-block=
    ```
-   阻止 `ICMP`{.literal} 请求：
    ``` literallayout
    # firewall-cmd --add-icmp-block=
    ```
-   删除 `ICMP`{.literal} 请求的块：
    ``` literallayout
    # firewall-cmd --remove-icmp-block=
    ```
:::
::: title
**在不提供任何信息的情况下阻断 `ICMP`{.literal} 请求**
:::
通常，如果您阻断 `ICMP`{.literal}
请求，客户端会知道您正在阻断它。这样潜在的攻击者仍然可以看到您的 IP
地址在线。要完全隐藏这些信息，您必须删除所有 `ICMP`{.literal} 请求。
::: itemizedlist
-   阻塞和丢弃所有 `ICMP`{.literal} 请求：