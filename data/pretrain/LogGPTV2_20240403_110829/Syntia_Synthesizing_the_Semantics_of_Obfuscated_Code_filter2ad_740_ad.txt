algorithm conﬁguration with Simulated Annealing. To
compute preferably representative results, we generate a
set of 1,200 randomly generated expressions. We divide
this set into three classes with 400 expressions each; to
prevent overﬁtting the parameters on a ﬁxed set of inputs,
the experiments of each class are performed with distinct
input samples.
In each iteration, Simulated Annealing synthesizes the
1,200 expressions under the same conﬁguration. We set a
timeout of 120 seconds for each synthesis task and prune
non-successful tasks by a constant factor of the timeout.
As a result, Simulated Annealing optimizes towards a high
success rate for synthesis tasks and a minimal average
time. Table 1 lists the initial algorithm conﬁguration and
the parameter boundaries.
We aim at determining optimal parameters for different
complexity classes. Classes are distinguished by the num-
ber of variables and by the expression’s layer. Table 2
illustrates the ﬁnal conﬁgurations for 12 different com-
plexity classes after 50 Simulated Annealing iterations.
While the I/O samples and the playout depth are mostly in
a similar range (0 and 20), there is a larger scope for the
SA-UCT parameter and the maximum number of MCTS
iterations. Especially for higher complexity classes, this
is due to the optimization towards a high success rate
within 120 seconds. The latter parameters strive towards
larger values without this timeout.
Generally, the parameter conﬁgurations set a focus on
exploration instead of exploitation. We follow this obser-
vation and adapt the conﬁguration based on our problem
statements. To describe a conﬁguration, we provide a
conﬁguration vector of the form (SA-UCT, #iter, #I/O,
PD).
6.2 Mixed Boolean-Arithmetic
Zhou et al. proposed the concept of MBA expressions [63].
By transforming simpler expressions and constants into
MBA expressions over Boolean-arithmetic algebras, they
can generate semantically-equivalent, but much more
complex code which is arguably hard to reverse engi-
neer. Effectively, this obfuscating transformation allows
them to hide formulas and constants in plain code. In
their paper, they deﬁne a Boolean-arithmetic algebra as
follows:
Deﬁnition 1 (Boolean-arithmetic algebra [63]). With
n a positive integer and B = {0,1},
the algebraic
system (Bn,∧,∨,⊕,¬,≤,≥, >, s, <s,(cid:54)=, =,
(cid:29)s,(cid:29),(cid:28), +,−,·), where (cid:28),(cid:29) denote left and right
shifts, · (or juxtaposition) denotes multiply, and signed
compares and arithmetic right shift are indicated by s, is
a Boolean-arithmetic algebra (BA-algebra), BA[n]. n is
the dimension of the algebra.
Speciﬁcally,
they highlight how BA[n]
includes,
amongst others, the Boolean algebra (Bn,∧,∨,¬) as well
as the integer modular ring Z/(2n). As a consequence,
Mixed Boolean-Arithmetic (MBA) expressions over Bn
are hard to simplify in practice. In general, we note that
reducing a complex expression to an equivalent, but sim-
pler one by, e. g., removing redundancies, is considered
NP-hard [31].
Zhou et al. represent MBA expressions as polynomials
over BA[n]. While polynomial MBA expressions are
conceptually not restricted in terms of complexity, Zhou
et al. deﬁne linear MBA expressions as those polynomials
with degree 1. In particular, f (x,y) = x− (x⊕ y)− 2(x∨
y) +12564 is a linear MBA expression, whereas f (x,y) =
x + 9(x∨ y)yx3 is not.
Implementation in Tigress.
In practice, MBA expres-
sions are used in the Tigress C Diversiﬁer/Obfuscator by
652    26th USENIX Security Symposium
USENIX Association
Table 2: Parameter choices for different complexity classes that depend on the expression layer and the number of
variables. The parameters are the SA-UCT parameter (SA), the maximum number of MCTS iterations (# iter), the
number of I/O samples (# I/O) and the playout depth (PD).
# variables
layer
3
5
7
SA
1.42
1.84
1.25
2
# iter
40,569
35,399
28,363
# I/O PD
0
0
0
20
14
20
SA
1.55
1.11
1.01
5
# iter
32,375
28,792
30,838
# I/O PD
0
0
0
17
23
23
SA
1.74
1.29
1.23
10
# iter
42,397
27,365
15,285
# I/O PD
1
0
0
20
23
22
SA
1.38
0.92
1.42
20
# iter
28,089
34,050
11,086
# I/O PD
1
0
0
18
12
22
Collberg et al. [9] which uses the technique to encode inte-
ger variables and expressions in which they are used [11].
Further, Tigress also supports common arithmetic encod-
ings to increase an expression’s complexity, albeit not
based on MBAs [10].
For example, the rather simple expression x + y + z is
transformed into the layer 23 expression (((x⊕ y) + ((x∧
y) (cid:28) 1))∨ z) + (((x⊕ y) + ((x∧ y) (cid:28) 1))∧ z) using its
arithmetic encoding option. In a second transformation
step, Tigress encodes it into a linear MBA expression of
layer 383 (omitted due to complexity). Such expressions
are hard to simplify symbolically.
Table 3: Trace window statistics and synthesis perfor-
mance for Tigress (MBA), VMProtect (VMP), Themida
(ﬂavor Tiger White, TM), and ROP gadgets.
#trace windows
#unique windows
#instructions per window
#inputs per window
#outputs per window
#synthesis tasks
I/O sampling time (s)
overall synthesis time (s)
synthesis time per task (s)
MBA
500
500
116
5
1
500
110
2,020
4.0
VMP
12,577
449
49
2
2
1,123
118
4,160
3.7
TM ROP
78
2,448
78
106
258
3
3
15
2
10
178
1,092
17
60
9,946
829
4.7
9.1
Evaluation Results. We evaluated our approach to sim-
plify MBA expressions using Syntia. As a testbed, we
built a C program which calls 500 randomly generated
functions. Each of these random functions takes 5 in-
put variables and returns an expression of layer 3 to 5.
Then, we applied the arithmetic encoding provided by
Tigress, followed by the linear MBA encoding. The re-
sulting program contained expressions of up to 2,821
layers, the average layer being 156. The arithmetic encod-
ing is applied to highlight that our approach is invariant
to the code’s increased symbolic complexity and is only
concerned with semantical complexity.
Based on a concrete execution trace it can be observed
that the 500 functions use, on average, 5 memory inputs
(as parameters are passed on the stack) and one register
output (the register containing the return value). Table 3
shows statistics for the analysis run using the conﬁgura-
tion vector (1.5,50000,50,0). The ﬁrst two components
indicate a strong focus on exploration in favor of exploita-
tion; due to the small number of synthesis tasks, we used
50 I/O samples to obtain more precise results.
The sampling phases completed in less than two min-
utes. Overall, the 500 synthesis tasks were ﬁnished
in about 34 minutes, i. e., in 4.0 seconds per expres-
sion. We were able to synthesize 448 out of 500 expres-
sions (89.6%). The remaining expressions are not found
due to the probabilistic nature of our algorithm; after 4
subsequent runs, we synthesized 489 expressions (97.8%)
in total.
To get a better feeling for this probabilistic behavior, we
compared the cumulative numbers of synthesized MBA
expressions for 10 subsequent runs. Figure 7 shows the
results averaged over 15 separate experiments. On aver-
age, the ﬁrst run synthesizes 89.6% (448 expressions) of
the 500 expressions. A second run yields 22 new expres-
sions (94.0%), while a third run reveals 10 more expres-
sions (96.0%). While converging to 500, the number of
newly synthesized expressions decreases in subsequent
runs. Comparing the ﬁfth and the eighth run, we only
found 5 new expressions (from 489 to 494). After the
ninth run, Syntia synthesized 495 (99.0%) of the MBA
expressions.
6.3 VM Instruction Handler
As introduced in Section 2.1.1, an instruction handler of
a Virtual Machine implements the effects of an atomic in-
struction according to the custom VM-ISA. It operates on
the VM context and can perform arbitrarily complex tasks.
As handlers are heavily obfuscated, manual analysis of a
handler’s semantics is a time-consuming task.
Attacking VMs. When faced with virtualization-based
obfuscations, an attacker typically has two options. For
one, she can analyze the interpreter and, for each han-
dler, extract all information required to re-translate the
bytecode back to native instruction. Especially in face of
handler duplication and bytecode blinding, this requires
USENIX Association
26th USENIX Security Symposium    653
500
400
300
200
100
s
n
o
i
s
s
e
r
p
x
e
d
e
z
i
s
e
h
t
n
y
s
#
0
0
2
6
4
# synthesis runs
8
10
Figure 7: Subsequent synthesis runs increase the number
of synthesized MBA expressions. Each point represents
the average cumulative number of synthesized expres-
sions from 15 separate experiments.
her to precisely capture all effects produced by the han-