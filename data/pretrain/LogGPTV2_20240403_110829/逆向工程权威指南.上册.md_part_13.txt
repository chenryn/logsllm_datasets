$SG3832
$SG3833
DB
*You entered Id...*, 0al, 0H
H00 ′,P
LSNOO
ENDS
PUBLIC
_sain
N61X3
_scanf:PROC
EXTRN
ction compile flags: 70dtp
_printf: PROC
_TEXT
:Punc
SEGMENT
_x$=-4
: size = 4
_main
PROC
push
ebp
push
ebp,
esp
push
OFFSET $SG3831 ; *Enter X:*
ecx
ca11
add
printf
eax, DWORD PTR _xS[ebp]
esp, 4
1ea
Puah
qend
eax
cal11
add
-5canf
mov
esp, 8
ecx, DBORD PTR _xS[ebp]
push
Push
OFrsET $sG3833 : *You entered ld...*
ecx
ca11
_printf
asdd
esp, 8
xor
return 0
mov
eax, eax
ebp
esp, ebp
pop
ret0
main ENDP
_TEXTENDS
变量x是局部变量。
C/C++标准要求：函数体内部应当可以访问局部变量，且函数外部应该访问不到函数内部的局部变量。
演变至今，人们不约而同地利用数据栈来存储局部变量。虽然分配局部变量的方法不只这一种，但是所有
面向x86平台的编译器都约定俗成般地采用这种方法存储局部变量。
在函数序言处有一条“PUSHECX”指令。因为函数尾声处没有对应的“POPECX”指令，所以它的
作用不是保存ECX的值。
实际上，这条指令在栈内分配了4字节的空间、用来存储局部变量x。
汇编宏_xS（其值为-4）用于访问局部变量x，而EBP寄存器用来存储栈当前帧的指针。
在函数运行的期间，EBP一直指向当前的栈帧（stack frame）。这样，函数即可通过 EBP+offset的方式
访问本地变量、以及外部传入的函数参数。
ESP也可以用来访间本地变量，获取函数所需的运行参数。不过ESP的值经常发生变化，用起来并不
方便。函数在启动之初就会利用EBP寄存器保存ESP寄存器的值。这就是为了确保在函数运行期间保证
EBP寄存器存储的原始ESP值固定不变。
在32位系统里，典型的栈顿（stackframe）结构如下表所示。
EBP-8
局部变量#2.IDA标记为var_8
EBP-4
局部变量#1.IDA标记为var_4
EBP
EBP 的值
EBP+4
返网地址 Retum address
EBP+8
函数参数#1.IDA标记为arg_0
---
## Page 78
60
逆向工程权威指南（上册）
续表
EBP+0xC
函数参数2.IDA标记为arg_.4
EBP+0x10
函数参数=3.IDA标记为arg.8
本例中的 scanfO有两个参数。
第一个参数是一个指针，它指向含有“%d”的格式化字符串。第二个参数是局部变量x的地址。
首先，“lea eax,DWORD PTR_xS[ebp]指令将变量x的地址放入EAX寄存器。“lea”是“load effective
address”的缩写，能够将源操作数（第二个参数）给出的有效地址（offset）传送到目的寄存器（第一个参
数）之中。
此处，LEA将EBP寄存器的值与宏_xS求和，然后使用EAX寄存器存储这个计算结果：也就是等同
于 “ lea eax, [ebp4]°。
就是说，程序会将EBP寄存器的值减去4，并把这个运算结果存储于EAX寄存器。把EAX寄存器的
值推送入栈之后，程序才开始调用scanfO函数。
在调用printfO函数之前，程序传给它第一个参数，即格式化字符串“Youentered%d...in”的指针。
printf0函数所需的第二个参数由“movecx,[ebp-4]”指令间接取值。传递给ecx的值是ebp-4所指向
的地址的值（即变量x的值），而不是ebp-4所表达的地址。
此后的指令把ECX推送入栈，然后启动printfO函数。
7.1.3MSVC + OllyDbg
现在使用OllyDbg调试上述例子。加载程序之后，一直按F8键单步执行，等待程序退出ntdILdll、进
入我们程序的主文件。然后向下翻滚滚轴，查找mainO主函数。在mainO里面点中第一条指令“PUSHEBP”，
并在此处按下F2键设置断点。接着按F9键，运行断点之前的指令。
我们一起来跟随调试器查看变量x的计算指令，如图7.1所示。
Rman toedLdde esl
-
T
图7.1OllyDbg：局部变量x的赋值过程
在这个界面里，我们在寄存器的区域内用右键单击EAX寄存器，然后选择“Followinstack”。如此一
来，OllyDbg就会在栈窗口里显示栈地址和栈内数据，以便我们清楚地观察栈里的局部变量。图中红箭头
所示的就是栈里的数据。其中，在地址0x6E494714处的数据就是脏数据。
在下一时刻，PUSH指令会把数据存储到栈里的下一个地址。接下来，在程
序执行完scanfO函数之前，我们一直按F8键。在执行scanfO函数的时候，
我们要在运行程序的终端窗口里输入数据，例如123，如图7.2所示。
图7.2控制台窗口
scanf）函数的执行之后的情形如图7.3所示。
EAX寄存器里存有函数的返回值1。这表示它成功地读取了1个值。我们可以在栈里找到局部变量的
①参见附录 A.6.2.
---
## Page 79
第7章scanfO
61
地址，其数值为0x7B（即数字123）。
图 7.3OllyDbg:运行 scanff)之后
这个值将通过栈传递给ECX寄存器，然后再次通过栈传递给printf0函数，如图7.4所示。
图7.4OllyDbg：将数值传递给 printfI)
GCC
我们在LinuxGCC4.4.1下编译这段程序。
main
proc near
var_20
q0z- xqd paoxp =
var_1C
× drord ptr -1Ch
var_4
- xd pxoxp =
push
ebp, esp
ebp
and
nov
sub
*dea
nov
esp,20h
[esp+20h+var_20]。 offset aEnterX :*Enter X:*
ca11
cax, offset aD ; *ld*
puts
nov
lea
edx, [esp+20h+var_4]
nov
[esp+20h+var_1C]。 edx
nov
[esp+20h+var_20]。 eax
ca11
_isoc99_scanf
nov
eax, offset aYouEnteredD_
edx,  [esp+20h+var_4]
mov
[esp+20h+var_1C], edx
:*Yoa entered td...n
nov
mov
[esp+20h+var_20], eax
ca11
_printf
nov
eax, 0
Leave
main
retn
endp
---
## Page 80
62
逆向工程权威指南（上册）
GCC把printf0替换为putsO，这和3.4.3节中的现象相同。
此处，GCC通过MOV指令实现入栈操作，这点和MSVC相同。
其他
这个例子充分证明：在编译过程中，编译器会遵循C/C++源代码的表达式顺序和模块化结构。在C/C++
源代码中，只要两个相邻语句之间没有其他的表达式，那么在生成的机器码中对应的指令之间就不会有其
他的指令，而且其执行顺序也与源代码各语句的书写顺序相符。
7.1.4x64
在编译面向x64平台的可执行程序时，由于这个程序的参数较少，编译器会直接使用寄存器传递参数。
除此之外，编译过程和x86的编译过程没有太大的区别。
MSVC
指令清单7.1MSVC2012x64
_DATASEGMENT
*Enter X: *, OaH, 008
$SG1291 DB
$SG1292 DB
*You entered ld... ', OaH, 0OH
H00 *,Ps.
_DATA
ENDS
_TEXT
INGKESS
x$ = 32
nain
PROC
$LN3:
sub
lea
rsp, 56
ca11
printf
1ea
Lea
rdx, QMORD PTR x$[rap]
ca11
rcx, OFFSET FLAT:SSG1291 :*1d*
scanf
nov
edx, D8ORD PTR x$[r8p]
Lea
rcx, OFFSET FLAT:$SG1292 : *You entered Id...
ca11
return 0
x0
eax, eax
ret
9 *dsx
maln
ENDP
0
_TEX?
ENDS
GCC
使用GCC4.6（启用优化选项一O3）编译上述程序，可得到如下所示的汇编指令。
指令清单7.2OptimizingGCC4.4.6x64
:001*
string *Enter X:*
-LC1:
.3tring *ld*
LC2:
string *You entered ld..-\n*
nai.n1
sub
rsp.24
mov
edi, OFFSET FLAT:,LCO ; *Enter X:*
---
## Page 81
第7章scanfo）
63
ca11
put8
Lea
edi, OFFSET FLAT:.LC1 : *d*
rsi, [rsp+12]
nov
ca11
XoE
eax, eax
es1, DMORD PTR [rsp+12]
_.1soc99_scanf
nov
nov
ed1, OFFSET FLAT:.LC2 : "You entered $d... \n*
ca11
Xor
utad
eax,
eax
jreturn 0
xor
add
eax, eax
ret
rsp,24
7.1.5ARM
Optimizing Keil 6/2013 (Thumb 模)
.text :00000042
scanf_main
2000000:1x91.
.text:00000042
var_8
= -8
.text:00000042 08 B5
.text:00000042
.text:00000044 A9 A0
PUSH
ADR
R0, aEnterX
(R3, LR)
: "Enter X:\n*
.text:0000004A 69 46
00000:1x81*
0046 06 F0 D3 F8
BL
MOV
R1,SP
_2printf
-text:0000004C AA AO
ADR
R0,aD
=Pl。1
.text:0000004E 06 F0 CD F8
BL
-text:00000052 00 99
_Oscanf
LDR
R1, [SP, #8+var_8]
text:00000054 A9 A0
ADR
R0, aYouEnteredD
: *You enteredld.\n*
-text:00000056 06 F0 CB F8
BL
R0,0
_2printf
-text:0000005A 00 20
MOVS
- text:0000005C 08 BD
POP
(R3, PC)
scanf0函数同样要借助指针传递返回值。在本例里，编译器给它分配了一个整型变量的指针。整型数
据占用4个字节的存储空间。但是返回数据的内存地址，可以直接放在CPU的寄存器中。在生成的汇编代
码里，变量x存在于数据栈中，被IDA标记为var_8，然面，此时程序完全可以直接使用。栈指针SP指向
的存储空间，没有必要像上述代码那样机械式地调整SP分配栈空间。此后，程序把栈指针SP（x的地址）
存入R1寄存器，再把格式化字符串的偏移量存入R0寄存器，如此一来，scanfO函数就获得了它所需要的
所有参数。在此之后，程序使用LDR指令把栈中的返回值复制到R1寄存器、以供printfO调用。
即使使用XcodeLLVM程序以ARM模式编译这段程序，最终生成的汇编代码也没有实质性的区别，
所以本书不再演示。
ARM64
指令清单7.3Non-optimizing GCC4.9.1ARM64
1 .LC0:
3.1C1:
Z
string “Enter X:*
4
-string *ld*
5
-1C2:
7 scanf_nsin:
-string "You entered Id...\n*
8; subtract 32 from SP, then save FP and LR in stack frane:
10 : set stack frame (FP=SP)
6
stp
x29, x30, [sp, -32]!
11
add
x29,sp.0
12 ; 1oad pointer to the “Enter X:* string:
13
dape
x0,-1C0
---
## Page 82
64
逆向工程权威指南（上册）
15 ; X0-pointer to the “Bnter X:* string
14
add x0, x0, :1o12:.1C0
16 1 print It:
18 ; load pointez to the *sd* string1
LT
puts
19
adrp
add
x0,x0，
x0, -LC1
21 : find a space
20
in stack frame for *x* variable (X1=PP+28):
:1o12: ,1C1
23 ;X1=address of “x* variable
add
x1,x29,28
24:pass the address to scanf()
 and call it:
26 ; 1oad 32-bit value from the variable in stack frame:
25
b
_isoc99_scanf
27
28 ; W1=x
1dr
[862x]
30 : printf() wi11 take text string from X0 and *x* variable fron X1 [or W1)
29 ; load pointer to the *You entered ld...\n* string
31
adrp
x0,.LC2
32
add
x0, x0, :1012:.1C2
33
printf
34 ; return 0
36 : restore FP and LR, then add 32 to SP:
SC
mov
w0,0
37
1dp
x29, x30, [sp1, 32
38
ret
第22行用来分配局部变量x的存储空间，当scanfO函数获取这个地址之后，它就把用户输入的数据传递
给这个内存地址。输入的数据应当是32位整型数据。第27行的指令把输入数据的值传递给printf0函数。
7.1.6 MIPS
MIPS编译器同样使用数据栈存储局部变量x。然后程序就可以通过Ssp+24调用这个变量。scanf()
函数获取地址指针之后，通过LW（LoadWord）指令把输入变量存储到这个地址、以传递给printf()
函数。
指令清单 7.4Optimizing GCC 4.4.5（assembly output)
$LCO:
-ascil *Enter X:\000*
$LC1:
000PTTSe*
$LC2:
-ascii*You entered id..-\012\000*
function prologue:
main1
lui
$28, hi (gnu_1ocal_gp)
addiu
0*dsg*dss
addiu
$28, $28, 41o (_gnu_10cal_gp)
SW
$31,36($sp)
cal1 puts ():
T
1ui
$25, ica1116(puts) ($28)
$4, 1h1 ($LC0)
jalr
addiu
$4,$4,$1o($Lc0) : branch delay s1ot
cal1 scanf () :
1w
1u1
$28,16 ($8p)
$25, hca1116(_isoc99_scanf) ($28)
$4, 1hi ($LC1)
1set 2nd argument of scanf (1, $a1=$sp+24:
1w
.des*ss ntppe
addiu $4,$4,$lo($LC1) : branch delay 8lot
jalr
$25
 cal1 printf ():
$28,16($sp)