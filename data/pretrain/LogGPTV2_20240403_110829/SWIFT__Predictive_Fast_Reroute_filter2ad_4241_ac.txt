Similarly the second and third bits represent link (5, 6) when it is
the second link in the AS path, etc.
The second part of the tag (in green) encodes the primary and
backup next-hops. Namely, the first bit identifies the primary next-
hop, the second bit indicates the backup next-hop to use if link (1, 2)
fails, etc. This part of the tag enables SWIFT to match on traffic
that may have to be redirected to potentially different next-hops
depending on the link that fails and the destination prefix.
3Since the outage affects remote AS links, local fast-rerouting techniques [25] cannot
be applied.
Technical Report, 2017,
T. Holterbach et al.
Figure 3: SWIFT workflow.
Before the failure of (5, 6), the second stage only contains the
forwarding rules consistent with BGP. Specifically,
match(tag:***** 1****) >> fwd(2)
Upon the failure of (5, 6), SWIFT adds a single high-priority rule to
the second stage – while not modifying at all the first stage.
match(tag:*01** ***1*) >> fwd(3)
The added rule exploits the structure of SWIFT tags to reroute traffic
for all the affected 21k prefixes, at once. The regular expression in
it matches all the packets such that: (5, 6) appears as the second
link in their AS path (i.e., the tag starts with *01**); and the backup
next-hop is 3 (i.e., the tag ends with ***1*). This includes traffic
for prefixes in AS 6, 7 and 8. Note that one rule is sufficient in our
example, because the SWIFTED router does not use any AS path
where (5, 6) appears in other positions before the failure (otherwise,
one rule per position would have been needed).
SWIFT compresses tags efficiently. Assigning subsets of bits for
any AS link and possible position in the AS path does not scale
for the Internet AS graph that currently includes >220,000 AS
links. SWIFT encoding algorithm squeezes such graph in few bits
by leveraging two insights. First, many links in the AS graph are
crossed by few prefixes, and their failure does not lead to bursts
large enough to even require SWIFT fast-rerouting. SWIFT therefore
does not encode those links at all. Second, the AS paths used by a
single router at any given time tend to exhibit a limited number of
AS links per position. SWIFT therefore only encodes AS links and
positions that are present in the used BGP paths.
SWIFT supports rerouting policies. When computing backup
next-hops, SWIFT complies with rerouting policies specified by
the operators. Indeed, rerouting to a safe path may not always be
desirable in practice – e.g., because economically disadvantageous.
Rerouting policies express the preferences between backup next-
hops, or forbid the usage of specific ones—i.e., to mimic business
and peering agreements. For example, operators can prevent SWIFT
from: (i) using an expensive link with a provider rather than a more
convenient one with a customer; (ii) rerouting to a link where free
traffic is close to depletion (e.g., according to the 95th percentile
rule [49]); or (iii) moving high volumes of traffic to geographically
distant regions (e.g., by sending to a remote egress point).
SWIFT supports both local and remote backup next-hops. In
addition to reroute locally to a directly connected next-hop an-
nouncing an alternate route, a SWIFTED router can also fast-reroute
to remote next-hops, potentially at the other side of the network,
by using tunnels (e.g., IP or MPLS ones). Remote backup next-hops
are learned via plain iBGP sessions.
SWIFT is easy to deploy. Only a software update is required to
deploy SWIFT since recent router platforms readily support a two-
stage forwarding table [3]. In §7 we show that SWIFT can also be
deployed on any existing router by interposing a SWIFT controller
and an SDN switch between the SWIFTED router and its peers. The
two-stage forwarding table in that case spans two devices, similarly
to an SDX platform [30, 31].
3.3 Guarantees and limitations
We prove that SWIFT rerouting strictly improves Internet-wide con-
nectivity, proportionally to the number of SWIFTED routers. This
translates into incentives for both partial and long-term Internet-
scale deployment (e.g., on all AS border routers).
Theorem 3.1. The number of disrupted paths is decreased by every
SWIFTED router which is on a path affected by an outage.
Theorem 3.2. SWIFT rerouting causes no forwarding loop, irre-
spective of the set of SWIFTED routers.
Both theorems are based on the following lemma.
Lemma 3.3. When any SWIFTED router fast-reroutes, it sends
packets over paths with no blackhole and loops.
0010100111(2,5,*,*,*)(*,5,6,*,*)(*,*,5,6,*)100100010100111typeInferenceAlgorithm (§4) CONTROL PLANE  DATA PLANE 10k10k1k562EncodingAlgorithm (§5)p1p10kp1p10kprimarynext-hop2222AS pathspreﬁx78AS links {(5,6)}suffer from outagepartially receivedbursta single rule reroutes21k preﬁxespackets using path (*,5,6,*,*)share this part of the taginferencein > fwd(3)SWIFT: Predictive Fast Reroute
Proof sketch. Upon a remote outage, any SWIFTED router r
reroutes traffic to an AS path that was offered to r by one of its BGP
neighbors before the outage (by definition of SWIFT). This path
must have been free from blackholes and loops before the outage
(by definition of BGP). Also, it contains no failed links—provided
that the inference is accurate enough. Hence, the path remains valid
and used by all ASes in it, which directly yields the statement. □
As evident from the proof sketch, the lemma and consequently the
theorems hold under the following two assumptions (see Appendix
B).
Assumption 1: During an outage, routers only change inter-domain
forwarding paths that are affected by the outage. If this assumption
is violated, then inter-domain loops can be generated. Let s be a
SWIFTED router and n the next-hop to which s fast-reroutes to
avoid a certain outage. If n switches path for some fast-rerouted
prefixes (e.g., to reflect a policy change uncorrelated with the out-
age), it may choose the BGP path used by s before the outage (not
updated by SWIFT): this would lead to a loop between n and s.
Nevertheless, SWIFT can quickly detect and mitigate such a loop:
s can monitor whether n stops offering the BGP path to which it
has fast-rerouted, and select another backup next-hop.
Assumption 2: SWIFT inferences enable the SWIFTED routers to
avoid paths affected by an outage. The SWIFT inference algorithm
implements a conservative approach for inferring links and select-
ing backup paths. Still, we cannot guarantee the validity of such
assumption, since SWIFT inferences are based on the partial and
potentially noisy information provided by BGP (and withdrawals
that reach different ASes at different times). Inferences that cause
SWIFT not to rule out all paths affected by an outage might induce
packet loss: in these cases, a SWIFTED router could reroute traffic
to a disrupted backup, and multiple SWIFTED routers could create
an inter-domain loop (if the selected backup next-hop actually uses
exactly one of the disrupted paths missed by the inference). In both
cases, packets will be dropped, as it would have happened for the
affected prefixes without SWIFT (i.e., using vanilla BGP). However,
our evaluation with both real BGP traces and controlled simulations
(§6), suggests that very few SWIFT inferences lead to the selection
of disrupted backup next-hops.
4 SWIFT INFERENCE ALGORITHM
We now detail the SWIFT inference algorithm, its basics (§4.1)
and how it accounts for real-world factors (§4.2). Because of space
constraints, we include the pseudo-code of the algorithm along
with the full proof of its correctness (Theorem 4.1) in Appendix A
and B.
4.1 Fast and sound inference
In the following, we consider the stream of messages received on a
single BGP session since the algorithm run on a per-session basis
(enabling parallelism). We also initially assume that the algorithm
aims at inferring an outage produced by a single failed link.
Burst detection. SWIFT monitors the received input stream of
BGP messages, looking for significant increases in the frequency
of withdrawals. It classifies a set of messages as the beginning of
Technical Report, 2017,
Figure 4: WS and PS metrics at the end of the burst of with-
drawals caused by the failure of (5,6).
a burst when such frequency (say, number of withdrawals per 10
seconds) in the input stream is higher than the 99.99th percentile
recorded in the recent history (e.g., during the previous month).
Failure localization. When detecting a burst, SWIFT infers the
corresponding failed link as the one maximizing a metric called Fit
Score (FS). Let t be the time at which this inference is done. For any
link l, the value of FS for l is the weighted geometric mean of the
Withdrawal Share (WS) and Path Share (PS):
FS(l, t) = (W S(l, t)wW S ∗ PS(l, t)wP S )1/(wW S +wP S)
WS is the fraction of prefixes forwarded over l that have been
withdrawn at t over all the received withdrawals. PS is the fraction
of withdrawn prefixes with a path via l at t over the prefixes with
a path via l at t. More precisely,
where W (l, t) is the number of prefixes whose paths include l and
have been withdrawn at t; W (t) is the total number of withdrawals
received as of t; P(l, t) is the number of prefixes whose paths still
traverse l at t. wW S and wPS are the weights we assign to WS
and PS. By relying on WS and PS, the fit score aims at quantifying
the relative probability that a link is responsible for the received
withdrawals while being robust to real-world factors such as BGP
noise (§4.2).
Example. Fig. 4 reports the WS and PS values at the end of the burst
of withdrawals generated by the failure of (5, 6) in Fig. 1. Link (5, 6)
is the only one with both WS and PS equal to 1, since all the AS
paths traversing it have been either withdrawn or changed with
another path not crossing (5, 6). In contrast, the PS values for links
(1, 2) and (2, 5) are smaller than 1 (11k/13k and 11k/12k), because
paths for the prefixes of AS 2 and AS 5 have not been modified
by the burst. The WS of (6, 8) is smaller than 1 because not all
the withdrawals pertain to that link. At the end, (5, 6) is therefore
correctly inferred as failed.
SWIFT inference is sound. By soundness, we mean that the in-
ference algorithm is always correct under ideal conditions. The
following theorem holds.
Theorem 4.1. If all ASes inject at least one prefix on every adjacent
link, SWIFT inference returns a set of links including the failed link if
run at the end of the corresponding stream of BGP messages.
W S(l, t) = W (l, t)
W (t)
PS(l, t) =
W (l, t)
W (l, t) + P(l, t)
6785124310k10k1k1k1k11k WITHDRAWs 10k UPDATES (1,2)(2,5)(5,6)WSPS11/1111/1311/1111/1211/1111/11link(6,7)(6,8)0/100/1010/1110/10Technical Report, 2017,
Proof sketch. Let f be the failed link and t the time at which
all the BGP messages triggered by the failure of f are received.
All prefixes that have been withdrawn were previously forwarded
over the f , hence WS(f ,t) = 1. Also, all the prefixes previously
forwarded over f have been withdrawn (PS(f ,t) = 1). This means
that the fit score of f has the maximum possible value, hence the
SWIFT inference algorithm returns it in the set of inferred links. □
4.2 Robustness to real-world factors
While actual streams of BGP messages do not always match the
ideal conditions assumed in Theorem 4.1, SWIFT inferences are
good in practice (see §6). We now explain why.
SWIFT makes accurate inferences during the burst. Contrary
to the assumptions of Theorem 4.1, SWIFT runs its inference algo-
rithm at the beginning of a burst. Lack of information (i.e., carried by
not yet received withdrawals) can therefore affect its accuracy. Be-
ing aware of this lack of information, SWIFT uses different weights
for WS and PS in the geometric mean calculated in the fit score FS
(see §4.1). The key intuition is that early on during the burst, a large
number prefixes are not yet withdrawn and are still using the failed
link. As a result, the PS for that link may not be the highest one.
The PS for the failed link actually increases when SWIFT runs the
inference later in the burst. However, the WS for the failed link will
always be greater or equal than the WS of any other link, provided
that SWIFT does not receive unrelated withdrawals and that the
outage is produced by a single link failure. SWIFT thus performs
better when wW S > wPS .
By performing a calibration study on real BGP data, we found
that SWIFT performed better when wW S was three times higher
than wPS (see details in Appendix C). We therefore use this weight
for SWIFT, including in the evaluation (§6).
SWIFT minimizes the risk of inferring a wrong link by being
adaptive. As discussed in §3, the accuracy of SWIFT inferences
depends on the amount of information in its input.
SWIFT uses the number of withdrawals in an ongoing burst as an
estimation of the carried information. It launches a first inference
after a fixed number of withdrawals, which we call triggering thresh-
old. If the likelihood of seeing an inferred burst of that size is high
enough with respect to historical data, then it returns the inferred
link. Otherwise, it waits for another fixed number of withdrawals,
and iterates. Using real BGP bursts as baseline (see Appendix C), we
set the default values of the triggering threshold to 2.5k withdrawals.
Also, SWIFT returns the inferred link if the number of predicted
withdrawals is less than 10k for 2.5k received withdrawals, 20k for
5k received, 50k for 7.5k received, and 100k for 10k received. After
having received 20k withdrawals, SWIFT returns the inferred link
regardless of the number of predicted prefixes.
SWIFT applies a conservative strategy if failed links cannot
be univocally determined. It may happen that SWIFT cannot
distinguish precisely which link has failed. For example, in Fig. 4,
assuming that the 1k prefixes from AS 6 are updated and not with-
drawn, SWIFT cannot distinguish if (5, 6) or (6, 8) failed. Whenever
a failed link cannot be univocally determined, SWIFT inference
returns all the links with maximum FS, i.e., both (5, 6) and (6, 8) in
the previous example.
T. Holterbach et al.
SWIFT quantitative metrics mitigate the effect of BGP noise.
Some received BGP messages may be unrelated to the outage caus-
ing a burst but due to contingent factors (e.g., misconfiguration,
router bugs). They constitute noise that can negatively affect the
accuracy of any inference algorithm. In SWIFT, noise can distort FS
values. In Fig. 4, for instance, withdrawals for prefixes originated
by AS 5 can be received by AS 1 during the depicted burst. This
would increase the likelihood that the FS of (2, 5) is higher than the
one of (5, 6), especially at the beginning of the burst.
In practice, SWIFT is robust to realistic noise as the level of
BGP noise is usually much lower than a burst. Hence, its effect
on quantitative metrics like FS, WS, and PS, tends to rapidly drop.
This feature distinguishes our inference algorithm from simpler
approaches, e.g., based on AS-path intersection, which are much
more sensible to single unrelated withdrawals.
SWIFT can infer concurrent link failures. To cover cases like
router failures that affect multiple links at the same time, the in-
ference algorithm computes the FS value for sets of links sharing
one endpoint. More precisely, the algorithm aggregates greedily
links with a common endpoint (from links with the highest FS to