### Preloading and Pinning in Browsers

#### A. Preloaded HSTS and HPKP Lists
In the context of browser security, preloading can be set in the header to preload 45 domains in Chrome with the `includeSubDomains` flag, while Firefox preloads these domains without it. Given that Mozilla's list is a strict subset of Chrome's, all subsequent testing in this paper will focus on the larger Chrome list.

Firefox also maintains a preloaded pin list, structured as a JSON file with an identical schema to Chrome's. As of now, the list includes only nine Mozilla-operated domains, three test domains, and Twitter.com. Our testing will be conducted exclusively on Chrome's preloaded pinning lists.

#### B. Preloaded HSTS
Chrome's preload list, introduced in 2010, currently contains 1,258 domains from 1,004 unique base domains, as summarized in Table II. Approximately one-quarter of the list comprises Google-owned properties. The remaining entries include a significant number of relatively small websites. Figure 2 illustrates the distribution of preloaded sites' Alexa traffic rankings. The median site rank is around 100,000, and the mean is 1.5 million, with 294 base domains (29%) too small to be ranked. Only seven of the top 100 and 19 of the top 1,000 non-Google sites are included in the preloaded HSTS list, indicating that adoption is driven more by security concerns than by site size. Notably, at least 15 sites on the list appear to be individual homepages.

#### C. Dynamic HSTS Errors
Of the 12,593 sites setting dynamic HSTS, 7,494 did so incorrectly. Table IV summarizes the observed errors. It is striking that nearly 59.5% of non-preloaded sites attempting to set HSTS dynamically had major security issues that undermined the effectiveness of HSTS. The error rate was significantly lower among sites with a preloaded HSTS policy.

- **HSTS Sites Failing to Redirect**: The HSTS specification requires that HSTS domains redirect HTTP traffic to HTTPS. However, 5,554 of the 12,593 sites attempting to set dynamic HSTS do not perform this redirection. Additionally, 65 preloaded HSTS sites fail to redirect from HTTP to HTTPS, creating a security vulnerability for first-time visitors.
  
- **HSTS Headers Set Over HTTP**: Another common mistake is setting an HSTS header over HTTP. Although the standard specifies that this has no effect and should not be done, we observed 4,094 domains doing so. Of these, 517 domains set HSTS headers via HTTP without specifying an HTTPS header, indicating a misunderstanding of the specification. Furthermore, 1,735 of these domains (including popular tech sites like blockchain.info and getfirebug.com) failed to redirect to HTTPS, suggesting they may not understand that HSTS does not achieve redirection on its own. Additionally, 206 preloaded HSTS domains set HSTS headers over HTTP, including the pinned site CryptoCat, but all these sites also set valid HTTPS HSTS headers.

- **Malformed HSTS Headers**: We found 322 sites setting malformed HSTS headers, often due to multiple `max-age` values. For example, www.gov.ukâ€™s header includes `max-age=31536000, max-age=31536000, max-age=31536000;`. In all cases, the `max-age` value was the same. While Chrome and Firefox tolerate this mistake, it technically violates the specification. We also found three sites setting a value without the required key, such as `strict-transport-security: 2678400`, which results in the header being ignored. Additionally, three sites set a negative `max-age` value, causing the header to be ignored.

- **HSTS Redirection to HTTP**: We observed 774 sites that correctly set an HSTS header via HTTPS but then redirected to HTTP. For example, https://www.blockchain.info sets an HSTS header while redirecting to http://blockchain.info. HSTS-compliant browsers handle this error and redirect to the HTTPS version, but non-HSTS-compliant browsers would be redirected back to HTTP, which is not the site's intention. Additionally, nine preloaded HSTS domains use 30x redirects from the listed preloaded domain to HTTP, with five redirecting back to HTTP versions of the same base domain, which is still protected by the preload list.

#### D. Dynamic Pinning (HPKP) Deployment
Dynamic pins, as specified by the HPKP protocol, are not yet implemented by any major browser. However, many sites are already setting valid HPKP headers, indicating their intent to use pinning. We found 18 domains attempting to set dynamic key pins, with seven also having a preloaded HSTS policy. Only 12 of these 18 (67%) set pins securely. Short validity periods were a major issue, with five setting `key-pin` values of 10 minutes or less, and one incorrectly formatted without any `max-age`.

Most of the key pins we observed were specified as SHA-256 hashes, despite the standard allowing either SHA-1 or SHA-256. This was somewhat surprising, as SHA-1 hashes are smaller and more efficient to transmit, and all preloaded pins are specified as SHA-1 hashes.

We also observed little use of the HPKP standard's error reporting features. Only one domain (www.mnot.net) set a `Public-key-pins-report-only` header to detect (but not block) pinning errors, and only one domain (freenetproject.org) specified the `report-uri` directive to receive error reports.

#### E. Mixed Content
Browsers enforce the same-origin policy to isolate content, where the origin is defined by the scheme, host, and port of the content's URL. This principle, dating back to the early development of Netscape 2.0, ensures that content loaded from different origins remains isolated. Because HTTP and HTTPS are distinct schemes, the same-origin policy means that content delivered over HTTPS is isolated from any insecure HTTP content an attacker might inject.

However, subresources like scripts or stylesheets inherit the origin of the encapsulating document. If an HTTPS page loads resources from an HTTP origin, this is referred to as mixed content. Mixed content is dangerous because an attacker can modify the resource delivered over HTTP, undermining both the confidentiality and integrity of the HTTPS page.

Mixed content is broadly divided into active content (scripts, stylesheets, iframes, Flash objects) and passive or display content (images, audio, video). Active content can completely modify the page's DOM or exfiltrate data, while passive content can only modify a limited portion of the rendered page. All browsers allow passive mixed content by default, usually with a warning, but the handling of active content varies. For example, XMLHttpRequests (Ajax) and WebSockets are considered passive content by Chrome but are blocked by Firefox and Internet Explorer.

#### F. Pinning and Mixed Content
The mixed content problem also applies to pinned HTTPS connections. If a website served over a pinned HTTPS connection includes active subresources served over traditional (non-pinned) HTTPS, an attacker capable of manipulating the included resources can undermine the security of the entire page. This issue is similar to the problems encountered with traditional mixed content and Extended Validation certificates.