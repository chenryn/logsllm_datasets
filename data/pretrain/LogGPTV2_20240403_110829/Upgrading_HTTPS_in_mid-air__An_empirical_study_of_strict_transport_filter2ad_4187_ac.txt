also be set in the header to be preloaded, so 45 domains are
preloaded in Chrome with includeSubDomains set but
preloaded in Firefox without it. Because Mozilla’s list is a
strict subset of Chrome’s list, we perform all testing for the
remainder of the paper on the larger Chrome list.
Firefox also has a preloaded pin list which is implemented
as a JSON ﬁle with an identical schema to Chrome’s. Cur-
rently, the only entries are 9 Mozilla-operated domains, 3
test domains, and twitter.com. We perform testing only on
Chrome’s preloaded pinning lists.
B. Preloaded HSTS
Chrome’s preload list, launched in 2010, currently con-
sists of 1258 domains from 1004 unique base domains as
summarized in Table II. Roughly a quarter of the current list
represents Google-owned properties. Aside from the Google
domains, there are a large number of relatively small websites.
Figure 2 shows the distribution of preloaded sites’ Alexa trafﬁc
rankings. The median site rank is about 100,000 and the mean
is 1.5M, with 294 base domains (29%) too small to be ranked
(and thus not included in our computed mean). Additionally,
only 7 of the top 100 and 19 of the top 1000 non-Google
sites are included in the preloaded HSTS list, suggesting that
uptake is primarily driven by sites’ security interest and not by
their size. At least 15 sites on the list appear to be individual
people’s homepages.
5
Jun2012Sep2012Dec2012Mar2013Jun2013Sep2013Dec2013Mar2014Jun2014Sep2014Date0200400600800100012001400Entries024681012PinsetsTotalentriesBasedomainsGooglebasedomainsNon-GooglebasedomainsPinsetsTABLE IV.
DYNAMIC HSTS ERRORS
Alexa top 1M
%
—
Preloaded domains
Domains
Attempts to set dynamic HSTS
Doesn’t redirect HTTP→HTTPS
Sets HSTS header only via HTTP
Redirects to HTTP domain
HSTS Redirects to non-HSTS
Malformed HSTS header
max-age = 0
0 < max-age <= 1 day
Sets HSTS securely w/o errors
Domains
12,593
5,554
517
774
74
322
665
2,213
5,099
44.1%
4.1%
6.1%
0.6%
2.6%
5.3%
17.6%
40.5%
751
23
3
9
3
12
0
5
659
%
—
3.1%
0.4%
3.1%
0.4%
1.6%
0%
0.7%
87.7%
found of 100,000,000,000 (over 3,000 years). The max-age
values also vary widely amongst the major players with Paypal
only setting a header with an age of 4 hours and Twitter, Vine
and Etsy all setting max-age over 20 years.
Very short values, such as the 17.6% of domains setting
a value of a day or less, arguably undermine the value of
HSTS. While they provide some protection against a passive
eavesdropper in the case of developer mistakes (such as using
the HTTP protocol for an internal link), they are dangerous
against an active attacker as many users will be repeatedly
making untrusted initial connections if they do not visit the
site very frequently.
It is an open question if very large max-age values will
cause problems in the future if a small number of clients cache
very old policies. Unlike the proposal for HPKP, there is no
standard maximum for max-age and user agents really are
meant to cache the policy for 80 years if instructed to do so,
although most browser instances in practice will not be around
for that long.
Finally, we saw 665 sites setting a max-age of 0 including
several big domains like LinkedIn and t.co, a Twitter content
delivery domain. Yahoo actually redirects from HTTP to
HTTPS on every tested Yahoo subdomain but still speciﬁcally
avoids using HSTS and intentionally sets a max age of 0. This
is valid according to the speciﬁcation [5]. It’s intended use is
to force clients to forget their cached policy for the domain
in case the domain wishes to revert to using HTTP trafﬁc. Of
these, 121 redirect from HTTPS to HTTP, clearly using the
speciﬁcation as intended.
E. HSTS errors
Of the 12,593 sites setting dynamic HSTS, 7,494 did so
in erroneous ways. A summary of errors we observed is in
Table IV. It is striking that overall, of the non-preloaded sites
attempting to set HSTS dynamically, nearly 59.5% had a major
security problem which undermined the effectiveness of HSTS.
The rate of errors was signiﬁcantly lower among sites with a
preloaded HSTS policy.
HSTS sites failing to redirect: The HSTS speciﬁcation [5]
states that HSTS domains should redirect HTTP trafﬁc to
HTTPS. However, of the 12,593 sites attempting to set dy-
namic HSTS, 5,554 do not redirect. In addition, 65 preloaded
HSTS sites do not redirect from HTTP to HTTPS. In addition
to violating the standard this represents a security hole as ﬁrst-
time visitors may never transition to HTTPS and therefore
never learn the HSTS policy.
HSTS headers set over HTTP: Another sign of confusion
about the technology is sites setting an HSTS header over
HTTP. Although the HSTS standard speciﬁes that this has no
effect and should not be done [5], we observed 4,094 domains
setting an HSTS header on the HTTP version of their sites.
For sites otherwise implementing HSTS properly, this is a
harmless mistake; however, we found 517 domains set HTTP
HSTS headers without specifying a HTTPS header, a strong
indication that the sites misunderstood the speciﬁcation. 1,735
of the total HTTP HSTS domains (including popular tech
sites like blockchain.info and getﬁrebug.com) also failed to
redirect to HTTPS, indicating they might not understand that
HSTS does not achieve redirection on its own. In addition,
206 preloaded HSTS domains set HSTS headers over HTTP
including the pinned site CryptoCat, but these sites all also set
valid HTTPS HSTS headers.
These sites are clearly attempting to improve the security
of their connection via HSTS but perhaps misunderstanding
the nature of the technology. The relatively high proportion
of this error compared to sites successfully deploying HSTS
(32.5%) is a clear sign of signiﬁcant developer confusion.
key-value
sites
value
and www.gov.uk.
including more
including notable
The most
than
one
Malformed HSTS: We also found 322 sites
setting
like
common
for
includes
pair strict-transport-security:
malformed HSTS headers
paypal.com14
mistake was
max-age. For example, www.gov.uk’s header
the
max-age=31536000, max-age=31536000,
max-age=31536000;. In all cases of multiple max-ages,
the max-age value was the same. We conﬁrmed Chrome
this mistake without harm,
and Firefox will
but
the speciﬁcation. We also
found 3 setting simply a value without
the required key
max-age=. For example, www.pringler.com sets the header
strict-transport-security: 2678400).
This
results in the header being ignored by the browser. We saw a
further 3 sites setting a negative value for max-age which
causes the header to be ignored.
this
technically violates
tolerate
HSTS redirection to HTTP: We also observed 774 sites
which correctly set an HSTS header via HTTPS but then
immediately redirected to HTTP (where several
then set
a meaningless HSTS header). For example, https://www.
blockchain.info sets an HSTS header while redirecting to
http://blockchain.info. HSTS-compliant browsers handle this
error and instead to go to https://blockchain.info which re-
sponds successfully, but a non-HSTS-complaint browser would
be redirected back to HTTP which is clearly not the site’s
intention. In addition, 9 preloaded HSTS domains use 30x
redirects from the listed preloaded domain to HTTP, 5 of which
redirect back to HTTP versions of the same base domain which
is still protected by the preload list. The Minnesota state health
insurance exchange website, mnsure.org, is both preloaded as
HSTS and sets a dynamic HSTS header but still responds with
a 301 code (moved permanently) to http://www.mnsure.org/.
HSTS-compliant browsers will follow this redirect but then
still upgrade the connection to https://www.mnsure.org/.
14The error at PayPal was particularly interesting as a PayPal engineer was
the lead author of the HSTS standard [5].
8
F. Dynamic pinning (HPKP) deployment
Dynamic pins, as speciﬁed by the HPKP protocol, are
not yet
implemented by any major browser. Nevertheless,
we observed many sites already setting valid HPKP headers
indicating they would like to use pinning.
We found 18 domains attempting to set dynamic key pins
(of which 7 also had a preloaded HSTS policy). We found
a comparable rate of errors with dynamic key pins as with
dynamic HSTS with only 12 of 18 (67%) setting pins securely.
As with dynamic HSTS, short validity periods were a major
issue: 5 set key-pin values of 10 minutes or less (1 at only
60 seconds) and 1 was incorrectly formatted without any
max-age. It appears most of the domains experimenting with
the header are small security-focused sites, with none ranked
in the Alexa top 10,000 most popular sites.
In addition, we found two new errors not present with
HSTS. Amigogeek.net dynamically pins to a hash that is not
found with SHA-1 or SHA-256 in any of the certiﬁcates
presented by that domain. Segu-info.com.ar mislabels a SHA-
1 hash as SHA-256. Both these issues would result
in a
standards-compliant user agent ignoring these policies.
Most of the key pins we observed were speciﬁed as SHA-
256 hashes although the standard allows either SHA-1 or
SHA-256. This was somewhat surprising as SHA-1 hashes
are smaller and therefore more efﬁcient to transmit and all
preloaded pins are speciﬁed as SHA-1 hashes.
Finally, we observed little use of the HPKP standard’s
error reporting features. Only one domain (www.mnot.net)
set a Public-key-pins-report-only header to de-
tect (but not block) pinning errors and only one domain
(freenetproject.org) speciﬁed the report-uri directive to
receive error reports.
V. MIXED CONTENT
Browsers isolate content using the same-origin policy,
where the origin is deﬁned as the scheme, host, and port
of the content’s URL. For example, the contents of a page
loaded with the origin example.com should not be acces-
sible to JavaScript code loaded by the origin b.com. This
is a core principle of browser security dating to the early
development of Netscape 2.0 [33] and formally speciﬁed in
the years since [34]. Because HTTP and HTTPS are dis-
tinct schemes, the same-origin policy means content delivered
over HTTPS is isolated from any insecure HTTP content
an attacker injects with the same host and port. Therefore,
an attacker cannot simply inject a frame with an origin of
http://example.com into the browser to attempt to read
data from https://example.com.
However, subresources such as scripts or stylesheets in-
herit the origin of the encapsulating document. For example,
if example.com loads a JavaScript library from b.com,
the code has an origin of example.com regardless of the
protocol used to load it and can read user data (such as
cookies) or arbitrarily modify the page contents. When an
HTTPS page loads resources from an HTTP origin, this is
referred to as mixed content. Mixed content is considered dan-
gerous as the attacker can modify the resource delivered over
HTTP and undermine both the conﬁdentiality and integrity
of the HTTPS page, signiﬁcantly undermining the beneﬁts of
deploying HTTPS. For this reason, Internet Explorer has long
blocked most forms of mixed content by default, with Chrome
in 2011 and Firefox in 2013 following suit [35], although the
details vary and there is no standard. Other browsers (such as
Safari) allow mixed content with minimal warnings.
Not all mixed content is equally dangerous. While termi-
nology is not standardized, mixed content is broadly divided
into active content such as scripts, stylesheets, iframes, and
Flash objects, which can completely modify the contents of the
encapsulating page’s DOM or exﬁltrate data [36], and passive
or display content such as images, audio, or video which
can only modify a limited portion of the rendered page and
cannot steal data. All browsers allow passive mixed content by
default (usually modifying the graphical HTTPS indicators as a
warning). The distinction between active and passive content is
not standardized. For example, XMLHttpRequests (Ajax) and
WebSockets are considered passive content by Chrome and not
blocked but are blocked by Firefox and IE.
A. Pinning and mixed content
Unfortunately, the mixed content problem repeats itself
with pinned HTTPS (as it has for HTTPS with Extended
Validation certiﬁcates [37] and other versions of HTTPS with
increased security). If a website served over a pinned HTTPS
connection includes active subresources served over traditional
(non-pinned) HTTPS, then, just as with traditional mixed con-
tent, an attacker capable of manipulating the included resources