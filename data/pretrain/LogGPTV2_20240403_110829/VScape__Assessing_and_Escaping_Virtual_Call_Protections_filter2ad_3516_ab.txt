ject. Eventually, the counterfeit function or future functions
operating on the relay object will be hijacked.
Two conditions are required to make the attack work. (1)
The counterfeit class is derived from the base class expected
2Some defenses, e.g., OS-CFI and µCFI, could reduce the size of this set
by tracking runtime information, e.g., the origin of pointers.
USENIX Association
30th USENIX Security Symposium    1721
vptrmember1member2memberNvtable[0]vtable[1]vtable[n]S1::func1(){memberN++;}S2::func1(){memberM++;}vtable[0]vtable[1]vtable[n]vtable[m]VTableofS1VTableofS2memberMinput_str(len){read(0,&buf,len);}//overflowVulnerablefunctionVictim object(of class S1)Vulnerable object(buf)Relay object‘AAA…’‘BBB…’‘CCC…’‘AAA…’vu lVictimfunctionCounterfeitfunctionCounterfeit object(of class S2)foo(Base* obj){obj->func1();}S1 and S2 derive from BaseVirtualcallFigure 2: Consequences of out-of-bound data read.
Figure 3: Consequences of out-of-bound data write.
at the virtual call site, to pass the security checks of a C++
semantics aware defense. (2) The counterfeit virtual function
performs out-of-bound access on the victim object, to yield
exploitable memory safety violations.
Note that, even if the counterfeit function does not cause
out-of-bound access, it may corrupt ﬁelds of the victim ob-
ject or cause other unexpected behaviors, and eventually en-
ables exploitation. But it is hard to assess the consequences
of all unexpected behaviors in a uniﬁed way. Thus, we only
consider out-of-bound access in COOPLUS.
3.3 Vulnerability Ampliﬁcation
With COOPLUS, we could utilize the original vulnerability
of limited capability, i.e., which can only tamper with an ob-
ject’s vptr, to trigger new out-of-bound memory access on
the relay object. Further access to the relay object will cause
unexpected behaviors. This new memory violation could am-
plify the vulnerability’s capability, which could even lead to
arbitrary address memory writes (AAW), facilitating further
exploitation (e.g., control ﬂow hijacking).
Out-of-bound Read.
In the ﬁrst case, the counterfeit func-
tion performs an out-of-bound read on the relay object. If the
relay object is controllable, then the counterfeit function may
misbehave and yield the following four types of gadgets.
If the controllable data loaded (Ld) from the relay object is
used by the counterfeit function as a program counter (PC),
then it could facilitate control ﬂow hijacking. This type of
gadgets is denoted as Ld-Ex-PC.
If the controllable data loaded (Ld) from the relay object is
used by the counterfeit function as a target memory address
to write, then this type of gadgets could cause arbitrary mem-
ory write (AW). Depending on the value that can be written
to target memory, there are three types.
• Ld-AW-Const: the counterfeit function can only write
a constant value to target memory. This gadget can be
exploited in a limited range of scenarios.
• Ld-AW-nonCtrl: the counterfeit function writes a non-
constant and non-controllable value to target memory. It
could be exploited in a limited range of scenarios.
• Ld-AW-Ctrl: the counterfeit function writes a control-
lable value to target memory. This gadget could facilitate
AAW, as shown in the example demonstrated in Figure 2.
If the controllable data loaded from the relay object is used
by the counterfeit function as a target memory address to
read, then it could cause arbitrary memory read (AAR).
Out-of-bound Write. The other case is that, the counter-
feit function performs an out-of-bound write on the relay ob-
ject. Further operations on the relay object will be misled.
Depending on the value written by the counterfeit function,
there are two classical types of gadgets.
• St-Ptr: the counterfeit function tries to write a pointer
value to the relay object. If the relay object could be ob-
served by the adversary, then she/he could leak a pointer
to break defenses like ASLR.
• St-nonPtr: the counterfeit function tries to write a non-
pointer value to the relay object. Depending on how this
value is used by the relay object, it may also enable further
exploitation. Figure 3 shows an example in which a non-
pointer value 0xffff is stored to the memberM ﬁeld and
corrupts the relay object, which interprets the ﬁeld as a
size of an array and may lead further AAR or AAW.
Relay Object Manipulation. With proper heap layout ma-
nipulation techniques, e.g., heap feng shui [30], we could
allocate many types of objects (usually of same sizes) fol-
lowing the victim object, and make them as relay objects to
enable potential exploitation paths.
For example, if the counterfeit function causes some out-
of-bound read, then a controllable relay object could be al-
located to further hijack the counterfeit function, or a non-
controllable relay object with sensitive ﬁelds could be allo-
cated to leak sensitive information. If the counterfeit func-
tion causes an out-of-bound write, then a relay object of the
proper layout (e.g., with a size ﬁeld at proper offsets) could
be allocated, to drive the program out-of-control.
3.4 Attack Analysis
3.4.1 Vulnerable Protections
The COOPLUS attack could bypass a wide range of virtual
call protections that meet the following two conditions.
• The target virtual call protection follows the well known
C++ ABI. More speciﬁcally,
the vptr is placed be-
fore each object, and the virtual call site allows type-
conformant virtual functions.
• Victim objects’ vptr could be corrupted by adversaries. In
other words, the target vcall protection does not guaran-
tee integrity of vptr. In practice, following the C++ ABI,
1722    30th USENIX Security Symposium
USENIX Association
S1::func1() {memberN}VictimfunctionCounterfeitfunctionS2::func1(){funcX(memberM)；}Relayobject(Characterbuffer)AAA…/bin/sh;BBB…addr;vptrmember1member2memberNmemberMVictim object(of class S1)Counterfeit object(of class S2)funcX(CT*ptr){*(ptr->addr)=ptr->data;}ptrdata;fakestructCTS1::func1() {memberN}VictimfunctionCounterfeitfunctionS2::func1(){memberM=0xffff;}Relayobject(ArrayObject)array_typelist_ptrsizevptrmember1member2memberNmemberMVictim object(of class S1)Counterfeit object(of class S2)1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
class Buffer{ int size; char[1024] src_buf;};
int input_check(Buffer* obj){
uint32_t length = read_uint32();
obj(cid:0)>size = length;
read_len(obj(cid:0)>src_buf, length);
if (length>1024) return false;
return true;
}
int vul_func(Buffer* obj){
uint32_t fcs =~0
uint8_t *src=obj(cid:0)>src_buf;
uint8_t *p=src;
while(p!=&src[obj(cid:0)>size]) CRC(fcs,*p++);
*(uint32_t *)p=htonl(fcs);//overflow when size>1020
}
int trigger_func(){
Buffer* p = new Buffer();
if (input_check(p)){ vul_func(p);}
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
Privilege_Rank *PR;
#define administrator 0
#define normal_user 1
class Privilege_Rank{
char* username;
uint64_t rank_level;
Privilege_Rank(uint64_t rl)::rank_level(rl);
};
void init_a_thread(){
PR = new Privilege_Rank(normal_user);
}
void sensitive_operation()
{
if (PR(cid:0)>rank_level==administrator){
system("/bin/sh");
}else{
do_nothing();
}
}
Listing 1: A four-byte heap overﬂow (CVE-2015-7504).
Listing 2: Privilege escalation primitive
vptr is associated with objects which reside in writable
heap, making it challenging to protect its integrity.
• Multiple targets are allowed at virtual call sites. Some
defenses are able to limit the number of allowed runtime
virtual functions to 1. It leaves no space for exploitation.
Some defenses, e.g., CFIXX [24], breaks the C++ ABI
and replaces each vptr with a runtime lookup table en-
try, then protects the integrity of this table with the Intel
MPX [31] hardware feature. This type of defense could de-
feat COOPLUS, but introducing compatibility issues.
Some defenses, e.g., OS-CFI [2] and µCFI [8], could track
runtime information to limit the number of allowed virtual
functions (even to 1 in some cases). However, they are in
general hard to deploy in practice. Moreover, they cannot
guarantee a unique runtime target for each virtual call in prac-
tice [32]. So, in theory, COOPLUS is still feasible.
3.4.2 Applicable Vulnerabilities
Proposed exploiting techniques in literature, in general, as-
sume applications have vulnerabilities with strong capability,
e.g., enough to make many powerful exploitations. But in re-
ality, such qualiﬁed vulnerabilities are rare. On the contrary,
COOPLUS has a lower expectation on the vulnerability and
is applicable to many real world vulnerabilities, as long as
the vulnerability can (even partially) corrupt the vptr.
For example, a heap overﬂow vulnerability which could
overwrite only one byte is qualiﬁed. A use after free vul-
nerability is also qualiﬁed. Listing 1 shows a heap over-
ﬂow vulnerability which only overwrites the following four
bytes with a CRC checksum. Given that CRC could be re-
versed [33], the adversary could utilize this vulnerability to
overwrite 4 bytes (vptr ) with an arbitrary value.
A weak vulnerability that can only partially overwrite a
vptr could be exploitable as well. Since the victim class and
counterfeit class are often deﬁned in the same program mod-
ule, thus have VTables close to each other. So, a partial over-
write to one vptr could yield another compatible vptr, and
enable the COOPLUS attack. But, such weak vulnerabilities
will reduce the number of available exploit primitives, and
thus lowers the probability of being exploited.
3.4.3 Attack Effects
The major attack effect of COOPLUS is arbitrary address
write or read (AAW or AAR). On one hand, AAW and AAR
are the basic assumptions of most exploitation techniques,
which could be further utilized to perform kinds of advanced
attacks including control ﬂow hijacking. On the other hand,
AAW and AAR vulnerabilities are rare in practice. There-
fore, COOPLUS provides a robust solution to get AAW and
AAR primitives, facilitating many exploits.
Furthermore, in some cases, COOPLUS cannot be utilized
to get AAW or AAR primitives. But it could be exploited as
well. Take the code in Listing 1 as an example, assuming
we could only ﬁnd one counterfeit function, which only dou-
bles a data ﬁeld of the relay object, we could still utilize it to
launch control ﬂow hijacking attacks. As shown in Listing 2,
there is a sensitive operation at line 15, which will only be
executed with proper rank_level. As a result, we could allo-
cate a Privilege_Rank object as the relay object, and utilize
COOPLUS to double the rank_level ﬁeld. By launching
this attack multiple times, we could overwrite this ﬁeld to 0,
and launch the sensitive operation.
4 Primitive Generator
Given a target application, a vulnerability, and a virtual call
protection, we would like to assess whether the vulnerabil-
ity could be exploited to launch the COOPLUS attack and
bypass the deployed protection. However, it is challenging.
To launch a COOPLUS attack, we have to ﬁrst ﬁnd a
proper tuple of exploit primitives (virtual call, victim class,
counterfeit class), where (1) the virtual call invokes a virtual
function declared in a base class, (2) the victim class and
counterfeit class are derived from the base class but have dif-
ferent virtual function implementations, and (3) the victim
object has to be corrupted by the vulnerability. Finding such
a tuple in the target application, especially in one that has a
large code base, is a heavy task. Furthermore, we have to
USENIX Association
30th USENIX Security Symposium    1723
Figure 4: Overview of the COOPLUS exploit compiler: VScape.
Figure 5: An example CIH and ranks.
generate proper inputs to trigger the virtual call, then trigger
the out-of-bound memory access in the counterfeit function,
and eventually, trigger sensitive operations on the corrupted
data ﬁelds, requiring great efforts too.
Therefore, we present a solution VScape to automatically
compile candidate primitives and ﬁlter practical and reach-
able primitives, which further facilitates generating the ﬁnal
exploit to bypass the target virtual call protection.
4.1 System Overview
Figure 4 shows the overview of the VScape compiler. It con-
sists of three major components: primitive generation, ex-
pected primitive construction, and exploit constraint solving.
The primitive generation component takes source code
of target applications as inputs, then searches for candidate
vcall primitives that can bypass defenses and analyzes their
capabilities, and outputs these candidate primitives.
Then,
the expected primitive construction component
takes (1) description of the given vulnerability (e.g., vulner-
able object’s size and affecting ranges), and (2) expected ex-
ploit primitive attributes (e.g., write an arbitrary value to a
speciﬁc address) as inputs, and outputs qualiﬁed candidate
primitives, together with memory sates (e.g., certain ﬁelds of
the relay object take speciﬁc values) which could make such
primitives work. With such information, security analysts
could get desired primitives and compose exploits quickly.
The exploit constraint solving component further resolves
certain constraints (e.g., path reachability) to make chosen
primitives working in the ﬁnal exploit. VScape takes a user-
provided exploit template as an extra input to form a full
chain exploit, and outputs the ﬁnal working exploit.
Currently, there are no solutions able to automatically con-
struct exploit templates, except for simple vulnerabilities like
stack-based buffer overﬂow. Thus, VScape relies on analysts
to schedule exploit steps, i.e., preparing an exploit template,
and provide knowledge of the vulnerability and what types of
primitives are needed by the template. VScape could search
for qualiﬁed primitives and complete the working exploits.
Note that, it is common for modern AEG solutions, e.g., Gol-
lum [12], Revery [11] and BOPC [34], to have user-supplied
exploit templates (in different forms) to assist AEG, since a
full chain exploit needs to address many challenges that are
out of scope (e.g., heap manipulation).
4.2 Primitive Generation
4.2.1 Data Collection
The ﬁrst step of VScape is collecting virtual call related in-