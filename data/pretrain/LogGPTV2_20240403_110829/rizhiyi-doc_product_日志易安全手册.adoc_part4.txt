==== Archiver
日志路径：/data/rizhiyi/logs/archiver/archiver.log
关键字：
* /recoverables/submit： 提交恢复索引的请求
* /recoverables/get： 获取可恢复成索引的数据列表
* /recoverables/stop： 停止正在执行的恢复操作
* /appnames/get： 或者正在执行备份的appname列表
* /appnames/add： 体检需要执行备份的appnames
* /appnames/delete： 删除正在执行备份的appnames
==== Manager
日志路径: /var/log/rizhiyi_manager_agent/rizhiyi_manager_agent.log 和 /var/log/rizhiyi_manager_server/rizhiyi_manager.log
关键字：
* Notify alarm :  产生告警
* Fail to load alarm data:  告警数据加载失败
* Handle heartbeat response :  处理心跳信息
* Activate process :  启动服务进程
* Deactivate process :  停止服务进程
==== Zookeeper
日志路径：/data/rizhiyi/logs/zookeeper/zookeeper.log
关键字: 因为全部日志已经规范化处理，所以只需要日志级别关键字 WARN/ERROR
==== kpi_analyzer
依赖 mysql 模块和 mongodb 模块，启动时需要保证依赖模块符合版本要求并正常运行。
运行环境要求为 CentOS 7 及以上
默认运行端口号：8023
日志路径：/data/rizhiyi/logs/kpi_analyzer/algo_service.log
日志模式：%(asctime)s %(levelname)s [%(filename)s:%(lineno)s][%(funcName)s] %(message)s
HTTP 请求日志 message 模式：Received Http Request: [request method] [url]
关键字：
* training, train 训练过程相关
* testing, detect 测试过程相关
* algorithm 算法相关
* IsolationForest 孤立森林模型
* MovingAverage 滑动平均模型
* CVAE 条件变分自编码器模型
* KDE 核密度估计模型
* anomaly filter 异常过滤
* sensitivity 敏感度相关
* autochoose 自动训练
* storage 模型序列化
* subprocess 多进程相关
* cache 模型缓存
==== kpi_monitor
依赖kpi_analyzer、influx_itsi和mysql三个模块，启动的时候，保证该三个模块正常启动。
默认端口号：7001
日志路径：
* 后台任务：/data/rizhiyi/logs/kpi_monitor/monitor_kafka.log （默认）  manager可修改
* 前端请求：/data/rizhiyi/logs/kpi_monitor/monitor_server.log （默认） manager可修改
关键字：
* kpi:指标 service^metric
** service:指标名称第一部分；
** metric/index:指标名称的第一部分
** tags:指标名称的第三部分
** endpoint:指标属性
* train: 训练过程
* detect/test：检测过程
* model：训练之后产生的模型
* kafka：kafka录入数据相关流程
* autotraning：自动训练
* autodetect：自动检测
* intervaltime：时间间隔
* task_id：训练或者检测的id
* error_info：算法模块的错误信息
* algo：算法模块
* request：前端请求
==== loganalyzer
依赖mongodb模块、es模块/beaver模块、spark模块，启动时要求相关模块配置启动正常。
运行端口号：9450
日志路径：/data/rizhiyi/logs/loganalyzer/loganalyzer.log
关键字：
* trainer: 训练模型
** training: 正在训练
** finished: 训练完成
** layer: 层次聚类层数
* detected: 检测实时数据
* anomaly: 异常
* percentage: 当前时间段每个模式的日志占总体比例
* batch: 每个时间段检测的数据包
* Request: 各种前端请求
* write: 模型存储	
==== auth
日志路径: /data/rizhiyi/logs/auth/auth.log
关键字：
* Started AuthApplication:  服务已启动
* 路径相关：
** account
*** POST /accounts   创建account
*** PUT /accounts/actions/{account_id}    更新用户的actions
*** PUT /accounts/enable/{id}    禁用启用account
*** POST /accounts/group_ids/ids    根据用户分组ids批量获取account
*** PUT /accounts/password    更新用户的password
*** PUT /accounts/re_password/{account_id}   更新用户的password
*** DELETE /accounts/{id}  删除account
*** GET /accounts/{id}  获取account
*** PUT /accounts_and_role_and_group/{id}    更新account
*** POST /login   登录验证
** account-group
*** POST /account_group/get_temporary_groups    获取临时用户分组列表
*** POST /account_group/temporary   创建account_group
*** POST /account_group_accounts    创建account_group_account
*** POST /account_group_accounts/account_id/{account_id}    通过accountId更新account_group_account
*** POST /account_group_accounts/group_id/{group_id}  通过groupId更新account_group_account
*** POST /account_groups   创建account_group
*** GET /account_groups/admin/{group_id}  根据group_id获取用户分组的管理员列表
*** POST /account_groups/admin/{group_id}    通过groupId更新用户分组的管理员
*** POST /account_groups/ids  批量获取account_group
*** DELETE /account_groups/{id}  删除account_group
*** PUT /account_groups/{id}  更新account_group
** role
*** POST /account_roles    创建account_role
*** PUT /account_roles/account_id/{account_id}  根据accountId更新account_role
*** PUT /account_roles/group_id/{group_id}   根据group_id更新account_role
*** POST /roles   创建role
*** GET /roles/account_id/{account_id}    根据AccountId查询role
*** POST /roles/copy/{id}  复制role
*** POST /roles/ids  批量获取role
*** DELETE /roles/{id}  删除role
*** GET /roles/{id}  获取role
*** PUT /roles/{id}  修改role
** domain
*** GET /domains  获得租户列表
*** DELETE /domains/{id}   删除domain
*** GET /domains/{id}   获得单个租户详情
*** PUT /domains/{id}   编辑domain
*** GET /domains/{id}   /is_overflow获得单个租户的是否超限
*** GET /domains/{id}   /overflow获得单个租户的超限次数
*** GET /es    collector获得所有domain信息
*** POST /es   更新license用量
** role-privilege
*** GET /accounts/privilege   获取权限的持有者列表
*** PUT /batch_save_role_privileges/role_id/{role_id}    批量修改RolePrivilege
*** POST /batch_verify  批量鉴权
*** POST /delete_role_privileges_by_resource    根据resourceId和resourceType删除RolePrivilege
*** GET /privielge_metas   获取所有权限信息列表
*** GET /role_privilege_ids/account_id/{account_id}   根据accountId获取对应权限列表
*** POST /role_privileges  创建RolePrivilege
*** POST /role_privileges/account_id/{account_id}  根据accountId获取对应权限列表
*** POST /role_privileges/batch  创建资源相关的RolePrivilege
*** POST /role_privileges/batch_resource_to_role   批量将资源的权限分配给角色
*** POST /role_privileges/role_id   根据role获取对应权限列表
*** POST /role_privileges/role_id/{role_id}  根据role获取对应权限列表
*** POST /verify  鉴权
** super-admin
*** POST /superadmin/login    登录租户管理系统
*** POST /superadmin/reset_passwd   重置密码
*** POST /superadmin/reset_passwd_query   请求重设密码
*** GET /superadmin/{id}   获得超级管理员信息
*** PUT /superadmin/{id}   编辑SuperAdmin
** system-conf
*** GET /systemConfs    获取系统配置项
*** PUT /systemConfs    修改系统配置项
==== Cruxee
日志路径：
* 主程序：/data/rizhiyi/logs/cruxee/cruxee.log
* 插件运行：/data/rizhiyi/logs/cruxee/alert_runner.log
关键字：
* response=Reply：接口请求结果
* cep manager：复杂事件处理服务相关
* esper: 合并工具
* stmt / epl：esper语句
* context：esper语法
* UnmatchedListener：不符合任何过滤条件的AlertCEF接收器
* 具体接口明细：
** /default_incident_policies(POST)：创建默认合并策略
** /incident_policies(POST)：创建合并策略
** /incident_policies/{id}(PUT)：修改合并策略
** /incident_policies(PUT)：批量修改合并策略（目前仅支持是否启用字段的修改)
** /incident_policies/{id}(GET)：获取单个合并策略   
** /incidents(GET)：获取合并策略列表
** /view_incident_send_result(POST)：执行插件结果
** /alert_cefs(POST)：接收AlertCEF
** /alert_cefs(GET)：根据IncidentId获得AlertCEF列表 
** /notice/render(POST)：预览
** /notice/view_alert_send_result(POST)：测试执行
** /notice/render_all(POST)：预览
** /domain/{domain_id}(DELETE)：删除domain下的所有Cruxee相关对象
** /incident_comments(POST): 添加评论
** /incident_comments/{id}(DELETE): 删除评论
** /incident_comments(PUT): 修改评论
** /incident_comments(GET)：获取评论列表
** /batch_update_incidents(PUT): 提供owner_id则批量修改负责人，提供status则批量修改状态
** /incidents/{id}(get): 根据id 获取 incident
** /incidents(get): 批量获取 incident
** /view_incident_send_result(POST): 获取incident运行指定插件的结果
** /sender_policies(POST): 创建发送策略
** /sender_policies/{id}(PUT)：修改发送策略
** /sender_policies(GET): 获取发送策略列表
** /sender_policies/{id}(DELETE): 删除发送策略
** /sender_policies/{id}(GET)：获取单个发送策略
** /operator_histories(GET): 根据incident_id获取操作历史列表
** /workload(GET)：根据incident_id获取操作历史列表