## PostgreSQL 9.5 new feature - BRIN (block range index) index  
### 作者                                                                                                     
digoal                                                                                                      
### 日期                                                                                                    
2015-04-19             
### 标签                                                                                                    
PostgreSQL , BRIN , 流式数据 , 性能优化                                        
----                                                                                                    
## 背景    
PostgreSQL 9.5引入的一个全新的索引访问方法BRIN（block range index），这个索引存储了表的连续数据块区间以及对应的数据取值范围。  
比如一张表有1000个数据块，我们建议一个BRIN在ID（假设这个表有ID字段）上的索引。  
BRIN默认是每128个连续数据块区间存储一个字段取值的区间，所以这个索引的信息量是将1000个数据块划分为几个连续的128个块的区间，然后存储每个区间ID值的取值范围。  
很显然，BRIN索引时lossy索引（即有损索引），那么我们并不能直接从索引中精确匹配要查询的记录，但是通过索引我们可以将查询范围缩小到最小128个连续的数据块（假设我们要找的值落在这个区间）。  
## 以上是BRIN大概的原理，那么BRIN可以用在什么场景呢？  
一个非常好的场景是流式日志数据，比如用户行为，大批量的数据按时间顺序不停的插入数据表。  
我们如果要按照时间来访问这样的数据，以往我们需要创建BTREE索引，可以范围查询或者精确匹配。但是BTREE索引需要存储的信息量较大，如果数据量很大，索引也很庞大。  
BRIN的话，索引可以变得很小，而且因为数据是按照时间顺序插入的，所以BRIN的信息量也很大，因为每个连续的数据块区间存储的时间范围和其他连续的数据块区间独立性很好，即不会出现大量数据交叉，如果有大量较差，那么使用BRIN检索还不如全表扫描。  
BRIN可认为是全表扫描的切片，如果数据值分布和物理值分布的相关性很好，那么BRIN无疑是非常好的选择。  
这里说到的相关性，大家可以参考统计学的知识，或者参考我之前写过的一篇文章。  
http://blog.163.com/digoal@126/blog/static/163877040201512810112541/  
## 接下来我们测试一下BRIN对于相关性好和相关性差的数据，以及他们的性能。  
```  
postgres=# create table t1(id int,info text);  
CREATE TABLE  
postgres=# create table t2(id int,info text);  
CREATE TABLE  
postgres=# insert into t1 select generate_series(1,10000000),md5(random()::text);  
INSERT 0 10000000  
```  
以下数据ID和物理存储相关性非常差。  
```  
postgres=# insert into t2 select id,md5(random()::text) from generate_series(1,10000000) as t(id) order by random();  
INSERT 0 10000000  
postgres=# analyze t1;  
ANALYZE  
postgres=# analyze t2;  
ANALYZE  
```  
查询他们的相关性。显然T2表的物理存储和实际值顺序相关性很差。  
```  
postgres=# select correlation from pg_stats where tablename='t1' and attname='id';  
 correlation   
-------------  
           1  
(1 row)  
postgres=# select correlation from pg_stats where tablename='t2' and attname='id';  
 correlation   
-------------  
  0.00805771  
(1 row)  
```  
创建索引，创建索引的速度明显比BTREE索引快，因为BRIN只需要存储值区间，瘦得很。  
```  
postgres=# create index idx_t1_id on t1 using brin (id);  
CREATE INDEX  
postgres=# create index idx_t2_id on t2 using brin (id);  
CREATE INDEX  
```  
我们看看索引的大小和表的大小，从BRIN的原理我们可以想象索引肯定很小，表650MB，索引才192K。  
```  
postgres=# \di+  
                          List of relations  
 Schema |   Name    | Type  |  Owner   | Table |  Size  | Description   
--------+-----------+-------+----------+-------+--------+-------------  
 public | idx_t1_id | index | postgres | t1    | 192 kB |   
 public | idx_t2_id | index | postgres | t2    | 192 kB |   
(2 rows)  
postgres=# \dt+ t1  
                    List of relations  
 Schema | Name | Type  |  Owner   |  Size  | Description   
--------+------+-------+----------+--------+-------------  
 public | t1   | table | postgres | 650 MB |   
(1 row)  
postgres=# \dt+ t2  
                    List of relations  
 Schema | Name | Type  |  Owner   |  Size  | Description   
--------+------+-------+----------+--------+-------------  
 public | t2   | table | postgres | 650 MB |   
(1 row)  
```  
来看看实际的查询差别就知道，BRIN有多么适合流式数据了。  
```  
postgres=# explain analyze select * from t1 where id>=1000 and id= 1000) AND (id   Bitmap Index Scan on idx_t1_id  (cost=0.00..50.03 rows=3803 width=0) (actual time=0.104..0.104 rows=1280 loops=1)  
         Index Cond: ((id >= 1000) AND (id =1000 and id= 1000) AND (id   Bitmap Index Scan on idx_t2_id  (cost=0.00..48.86 rows=3686 width=0) (actual time=2.019..2.019 rows=208640 loops=1)  
         Index Cond: ((id >= 1000) AND (id =1000 and id= 1000) AND (id =1000 and id= 1000) AND (id =1000 and id= 1000) AND (id   Bitmap Index Scan on idx_t2_id_bt  (cost=0.00..52.05 rows=3962 width=0) (actual time=1.143..1.143 rows=4001 loops=1)  
         Index Cond: ((id >= 1000) AND (id =1000 and id= 1000) AND (id   Bitmap Index Scan on idx_t1_id  (cost=0.00..110.03 rows=3803 width=0) (actual time=9.449..9.449 rows=90 loops=1)  