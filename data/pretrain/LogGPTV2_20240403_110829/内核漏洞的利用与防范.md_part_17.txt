UNIX家族成员
UNIX是一个庞大而且种类繁多的操作系统家族。本章将简要介绍这个庞大家族中的一
些重要的成员、它们的现行版本以及主要特性。本章选择的操作系统为Linux，因此将重点
介绍Linux。
本章讨论的所有操作系统都支持可载入内核模块，即运行时可以由内核加载。设备驱动就
是可载人内核模块的经典范例。
Linux
Linux最初由芬兰学生LinusTorvalds编写，本书写作时已经发展到了2.6版本。按照惯
例，Linux的版本使用的命名方式包含3个部分：内核版本号：主版本号.次版本号，例如，
Linux2.4.28。偶数的主版本号表示该版本的内核是一个稳定版本，而奇数的主版本号则表示
当前内核是一个开发版本。在某些时候，一个开发版本会演变成一个稳定版本（比如，2.1.x
→2.2.x），与此同时，也会产生下一个开发版本（例如，2.3.x）。版本号的改变总是和系统的功
能变化有关系。引人和开发足够数量的新功能将会导致主版本号的改变。
然而，这种命名方式在Linux2.6以后发生了改变，主要原因是由于奇/偶主版本号导致的
一棵不稳定的版本树需要很多年才能演变到稳定状态。于是，在新的命名模型里，同一主版本
最感兴趣的安全修复等。因此，Linux版本的命名变为：内核版本号.主版本号.次版本号.额
外版本号，例如2.6.27.2。
主内核发行版本（通常称作vanilla发行版本）是按递增编号的，这使得判断该版本受到了
哪些漏洞的影响变得很容易。通常，该版本的编号会小于漏洞修复后的发行版本编号，并且大
于或等于发现该漏洞的发行版本编号。另外，随每个发行版本一起发行的还有一个汇总变更提
交信息的Changelog和记录代码变更的diff文本文件。这些信息在捕捉bug时极其宝贵，尤其
---
## Page 89
80第二部分UNIX家族、MacOSX和Windows
是在忽略某一个bug修复或者不视其为安全问题的时候。
可以通过uname-r命令来获得当前本机上运行的Linux内核版本：
linuxbox$uname-r
2.6.28.2
linuxbox$
虽然不是每个人都能够忍受一个不断演进并且存在潜在不稳定的内核，但是实际上，与之
相反，企业的大多数部署安装需要一个能够被长期支持的、可靠的稳定版本。对于一个处于生
产环境中的服务器来说，不能因为一个新引人的功能而导致岩机。正是如此，才有了内核稳定
团队，他们的工作就是维护一个包含固定功能的稳定版本集。这项任务通常由一个人来负责完
成。这个人能决定在当前稳定版本中必须引l入哪些修复和补丁。可以在www.kernel.org中找到
如图4.1的稳定版本树的列表。
稳定版本树打破了通过版本号来推测系统是否存在漏洞的乐观想法，因为稳定的发行版本
从更高发行版本引入安全修复后，保持次版本号不变。我们要找的漏洞可能已经被修复了，而
版本号却让我们误认为该漏洞没有被修复。另一个方面，稳定发行版本保证了没有系统的重新
设计和外部补丁的引入，这也在一定程度上提供了一些推断内核的依据。
linux-next:next-200912022009-12-02
[Patch][ViewPatch]
[Gitweb]
截图：2.6.32-rc8-git42009-12-02[Patch][View.Patch]
主线：2.6.32-rc82009-11-19[FullSource][Patch][ViewPatch][View Inc][Gitweb] [Changelog]
稳定的：2.6.31.62009-11-10[FuSource][Patch][ViewPatch][View lnc.][Gitweb][Changelog]
稳定的:2.6.30.92009-10-05[Full Source][Patch][ViewPatch][View Inc.][Gitweb][Changeiog]
稳定的：2.6.29.6
2009-07-02[FullSource][Patch][View Patch][View Inc.][Gitweb][Changelog]
稳定的：2.6.27.392009-11-10[Ful Source][Patch][ViewPatch][View Inc.][Gitweb][Changelog]
稳定的：2.4.37.72009-11-07[Ful Source][Patch][ViewPatch]
[Gitweb][Changelog]
图4.1Linux内核版本（来自www.kernel.org）
现在回到我们真正关心的问题：存在漏洞的内核。除了追踪某个稳定版本树的Changelog
以外，另一种推断系统是否存在漏洞的方法就是检查内核编译时间。可以用uname-a来查看
Linux的系统信息：
ubuntu$uname-a
Linuxubuntu2.6.31#21SMPWdDec208:39:26PST2009x86_64GNU/Linux
ubuntu$
上面的例子显示了以下几部分信息。首先，它告诉了我们使用的是稳定内核2.6.31。其次，
它告诉我们内核编译的日期以及这是第21次重新编译。这表示系统管理员自己给系统修复补
丁。最后，它帮助我们判断是否有尚未修复的漏洞。如果我们发现在12月2日以后系统发现
并且修复了某些漏洞，那么可以认为当前系统存在漏洞。
稳定的内核解决了在产品服务器上运行不稳定或有风险代码的问题，然而却不能满足最终
用户的系统支持和易用性的需求。Linux发行版本弥补了这一空缺。
在这个例子中，它是我们的测试系统，所以这样高的重编译次数并不奇怪。
---
## Page 90
第4章UNIX家族81
Linux发行版本使得Linux从单纯的内核成为高可用的操作系统。Linux版本在Linux内
核之外加人了一些其他的组件，例如GNU程序套件（bash、GCC等），Xorg窗口服务器及其
不同的窗口管理器（如Gnome和KDE），以及其他软件。更重要的是，每个版本还可以发布
一些预编译的软件包以及一个用于管理这些软件包的管理器，这样用户就可以很轻松地选择需
要安装或者升级的软件。换句话说，Linux发行版本使得系统管理员和最终用户更方便地使用
Linux。如果没有Linux发行版本，系统管理员和最终用户将不得不按照安全和漏洞报告重新编
译受影响的程序，包括内核一一这就像一场维护的噩梦·
但是，这将会对内核和漏洞利用开发造成什么影响呢？Linux版本软件的包管理器必须有
一种升级内核并且不破坏用户当前配置的方法。显然，包管理器需要一个非常稳定的内核。另
外，“商业”内核可能需要一些定制以满足特定类型的客户端/环境，或只需为一些内核打补丁
而对另一些非主流的内核则不进行修复。
对于大多数发行版本，不论它们是否是商业版本，都拥有从Linux原始稳定或者vanilla内
核演变而来的内核，而对于一个给定版本来说，这个内核一般不会再改变。注意，不要被这里
的“改变”误导：主版本/次版本在当前的发行版本中不会改变，但是将会进行安全漏洞修
的这些规则也有所不同。这导致了一个结果：反向移植新功能可能会引入原始内核版本中没有
的漏洞，而一些针对该内核版本发布的补丁也会被忽略，从而使得该版本内核易于受到已知漏
洞和主流的打了补丁的攻击。
这样的情况已发生过多次，以下就是一个这样的案例。
注意CVE-2009-2698是一个简单的NULL指针解引用漏洞。这个问题早在几年之
前就部分解决了，但是相应的变更却迟迟没有反向移植到2.6.18内核的版本（主要是
Debian和RedHat发行版本）当中，这使得这些系统在原始补丁引入主流版本树中之
后的很长一段时间都存在该漏洞（而没有修复）。
遗憾的是，尤其是当我们考虑不同内核版本（迄今为止最常见的目标）时，内核版本号并
不是唯一需要关心的事情。还应注意内核的编译选项。Linux的一个优点（也可以说是缺点，
关键在于审视的角度）是它的高可配置性、多样性以及便于让管理员按照需要进行订制。特别
是对于相同的子系统有很多不同的处理方法，而每个发行版本都有自己的选择，这形成了多
种大不相同的Linux内核。因此，不同的子系统需要不同的漏洞利用方法（尽管它们可能提供
了相同的接口）。
从上面的解释中就不难理解，我们需要确定Linux版本编译的内核以使漏洞利用更加
例如，在本书写作时，Debian4.0（Etch）使用的不是2.6.18就是2.6.24版本的内核：而Debian5.0（Lenny）内
核则是从2.6.27的稳定版本分支中演化而来，Ubuntu的6.06是基于2.6.15内核，而Ubuntu8.10又是2.6.27
的分支。
“堆”分配器是一个好例子！在本书写作时，一些版本使用的旧SLAB分配器，但是大多数版本默认使用的则
是SLUB分配器。
---
## Page 91
82第二部分UNIX家族、MacOSX和Windows
可靠和有效，同时避免由于它们的运行导致目标系统的崩溃。这就变得很简单：所有打
过补丁的内核都遵循这样一个规范，它们会被命名成kernel_version-patch_type[甚至
更多信息］。这里另外有个在先前Ubuntu系统上的例子，这次使用的是其初始的内核启
动系统：
book@ubuntu:~$uname-a
Linuxubuntu2.6.31-14-generic#48-Ubuntu SMPFri0ct1614:05:01UTC
2009x86_64GNU/Linux
book@ubuntu:~$
如上所示，在内核版本号后面用破折号引出了额外信息（在本例中表示为Ubuntu内
核的类型和内部升级的情况）。即使是同一种类型的操作系统，由于不同的补丁和升级，我
们需要为它们修改漏洞利用的代码。这看起来虽然非常枯燥和恼人，但是，这种配置选项
的多样性仍有一定的好处。为了确保获得较好的稳定性和可靠性，很多用户和管理员都仅
仅依靠版本提供的内核，这间接地提供给我们非常有价值的信息。我们将在“工具与策略”
中详细讨论这些。
工具与策略
发行版本光明的一面
正如我们所说，从我们的角度来看Linux发行版本并不是没有益处的。事实上，一个
发行版本的内核在所有安装它的机器上都是保持一致的，这意味着所有的符号将会映射到
相同的内存地址上。如我们在第3章中讨论的那样，这一点在许多场景中都极其重要，尤
其是在复杂场景中，因为它让我们能准确地计算返回地址以及内核二进制映像的精确的内
存布局。虽然，二进制的内核映像通常在目标环境中是可读的，但是管理员可能已经将其
移除或者添加了保护机制：在这种情况下，能够下载与目标机器完全相同的内核就为我们
提供了优势。另一方面，默认的内核也使得在传播时锁定内核漏洞的虫型利用变得简单，
因为静态的内核地址甚至可以在payload中硬编码实现。
Linux内核调试
在漏洞利用开发中我们迟早都会接触到Linux内核调试。其实这并不奇怪，当我们试图利
用某一个bug时在利用成功（所有的步骤都正确）之前可能会造成多次崩溃，或者需要通过为
一些变量赋值来对漏洞进行分析理解。在这种情况下，能够高效地调试目标内核就具有巨大的
优势。
在这里，虽然我们依靠uname-a的输出来区别不同的内核，但是不同的子系统则可以通过它们“导出”到用
户态的表现来判断。本章接下来的部分将通过实例来了解这些。
这个标准也同样适用于一些非发行版本的补丁。例如，一个打过安全补丁的内核会显示带有-grscc的版本信息
（例如，2.625.10-grsec）
---
## Page 92
第4章UNIX家族83
在很长的一段时间内，Linux都没有自带内核调试工具°，于是引人了一些不同调试方法并
综合运用了Linux的一些简单调试。因为这些方法中还有一些仍然能派上用场（例如，当仅仅
需要一个快速检查的时候），所以我们还是从这里开始分析。
最经典也是最简单的调试方式就是基于输出（print-based）的方法。Linux提供了一个名为
printk（）的函数，它的功能和printf（）极为相似，允许从内核态输出一条语句到用户态中。
另外，printk（）是中断安全的（interrupt-safe），因此可以用在不友好的中断上下文中报告变
量值。
intprintk（constchar*fmt,…)
printk(KERN_NOTICE"1og_buf_1en:%d\n",1og_buf_len):
在前面的代码片段当中，可以看到printk的函数原型和一个典型用例。KERN_NOTICE
是一个决定调试级别的静态变量，也就是，由它来决定是否将特定的消息输出到指定的地方
（本地控制台、系统日志等）。Linux定义了从最高级KERN_EMERG到最低级KERN_DEBUG的8
个不同的调试级别。
defineKERN_EMERG
""
/*systemisunusable
*/
defineKERN_ALERT
""
/*actionmustbetakenimmediately
*/
#defineKERN_CRIT
""
/*criticalconditions
*/
#defineKERN_ERR
“”
/*errorconditions
*/
#defineKERN_WARNING""
/*warningconditions
*/
#defineKERN_NOTICE""
/*normalbut significantcondition*/
defineKERN_INFO""/*informational
*/
#defineKERN_DEBUG""/*debug-levelmessages
*1
如果没有特别指明，KERN_WARNING将作为默认的调试级别。printkO）函数的使用方法
用简便。除了看起来比较初级外，它非常有效（本书中的一些利用代码最初就是通过使用它完
成调试的），而且它可以应用到有源码的任何内核（不仅仅是Linux）。当然，它的主要缺点就
是在加人新的printk（）语句以后，必须重新编译并且重启系统来使其变更生效。
虽然在利用开发过程中重启几次是可以接受的（这不是最理想的），但是这显然不能满足
更大规模的调试（或者是远程调试）。为了克服这一局限，Linux内核开发者引“入了kprobes框
原理和使用方法。下面是从中截取的一段描述：
“kprobe可以在内核的任意位置动态的插入探测点，并且在不影响当前状态的情况下收集调
试和性能信息。几乎在内核代码的任何地址都可以设置断点，并且指定在遇到该断点时系统要调
用的处理程序。
“现在有3种类型的探针：kprobes、jprobes和kretprobes（也叫做返回探针）。kprobes类
型的探针几乎可以放置在内核的任何指令里。jprobes类型的探针可以放置在内核函数的入口处，
·无论是KDB还是KGDB，都在很长一段时间内作为外部补丁出现。
---
## Page 93
84第二部分UNIX家族、MacOSX和Windows
并且提供访问函数参数的便捷方法。返回探针会在指定的函数返回时触发。
“在一般情况下，基于kprobes的插桩（instrumentation）打包成内核模块。该模块的初
始化函数安装（“注册”）一个或者多个探针，并且退出函数注销这些探针。注册函数（例如
register_kprobe（））指定了探针的位置以及探针触发时调用的处理程序。”
大致思路就是我们可以编写一个模块并且注册一个处理程序（handler），在触发探针时会
自动调用该函数。虽然kprobe可以灵活地应用到几乎所有能关联前、后处理程序的地址，但
是在大多数情况下，我们最关心的还是在函数入口（jprobe）或者结束（kretprobe）时的状态。
下面的一段代码展示了一个jprobe的例子：
#include
include
#include
#include
#include
staticstructjprobe setuid_jprobe;
staticasmlinkageint
kp_setuid（uid_tuid)
[1]
printk("process%s[%d]attemptedsetuidto%d\n"，current->comm,
current->cred->uid,uid);
jprobe_return():
/*NOTREACHED*/
return（o):
int
init_module（void)
intret:
setuid_jprobe.entry=（kprobe_opcode_t*)kp_setuid;
setuid_jprobe.kp.symbol_name="sys_setuid";