accordingly.
In contrast, our attack variation works with Bitcoin’s Script
as well, as we demonstrate by implementation. It therefore
applies a wider range of systems [45]–[47].
Winzer et al. [28] present two results regarding the at-
tack costs. First, they show that B’s attack cost for making
miner’s collaboration with the attack a Nash-equilibrium grows
linearly with the size (i.e., the relative mining capabilities)
of the smallest miner. However, all miners not cooperating
with the attack is also a Nash equilibrium. Therefore, they
analyze B’s cost for making the attack a dominant strategy, i.e.,
to incentivize a to support the attack irrespective of the other
miners’ strategies. This bound grows linearly with relative
miner sizes, and exponentially with the HTLC timeout.
Our analysis improves this latter bound by taking into
account the miners all know the system state and each others’
incentives. This insight allows us to use the subgame perfect
equilibrium [31], [34], [41], [48]–[54] solution concept, a
reﬁnement of Nash-equilibrium suitable for games of dynamic
nature. We consider the game played by non-myopic rational
participants aware of the game dynamics, and show that a
linear-in-miner-size cost (as in [28]) sufﬁces for the existence
of a unique subgame perfect equilibrium.
Other work [25]–[27] analyzes bribing attacks on the con-
sensus mechanism of cryptocurrency blockchains. Unlike this
work, bribes in these papers compete with the total block
reward (not just a single transaction’s fee) and lead miners to
violate predeﬁned behavior. These attacks are therefore much
more costly and more risky than the bribery we consider,
where a miner merely prioritizes transactions for conﬁrmation.
A recent and parallel work [55] also suggests using Bitcoin’s
fee mechanism to attack HTLC. It assumes miners below a
certain hash-rate threshold are myopic (sub-optimal) while
those above it are non-myopic; it presents safe timeout values
given Bitcoin’s current hash-rate distribution. In this work,
we assume all miners are non-myopic and prove that in this
model the attack costs are independent of the timeout. We also
present MAD-HTLC, which is secure against these attacks
with both myopic and non-myopic miners.
B. Transaction-Selection Optimization
MAD-HTLC incentivizes rational entities to act in a desired
way. It relies on the premise that all involved parties are
rational, and speciﬁcally, that they monitor the blockchain state
and issue transactions accordingly.
Indeed, previous work [28], [37], [56]–[61] shows this
premise is prominent, and that system users and miners engage
in carefully-planned transaction placing, manipulating their
publication times and offered fees to achieve their goals. Other
work [62]–[68] asserts the proﬁtability of such actions is
expected to rise as the underlying systems mature, enabling
constructions such as MAD-HTLC, which rely on these opti-
mizations.
C. HTLC-Spec usage
A variety of smart contracts [16]–[24] critically rely on
HTLC-Spec. To the best of our knowledge, all utilize HTLC,
making them vulnerable once miners optimize their transaction
choices. We review some prominent examples.
the state is represented by a settlement
a) Off-chain state channels: A widely-studied smart con-
tract construction [5]–[10], [12], [69]–[71] with implementa-
tions on various blockchains [4], [72]–[76] is that of an off-
chain channel between two parties, A and B.
The channel has a state that changes as A and B interact,
e.g., pay one another by direct communication. In the simplest
transaction
case,
that B can place on the blockchain. The settlement transaction
terminates the channel by placing its ﬁnal state back in the
blockchain. The transaction initiates an HTLC with a hash
digest of B’s choice. B can redeem the contract after the
timeout or, alternatively, A can redeem it before the timeout
if B had shared the preimage with her.
When A and B interact and update the channel state, B
revokes the previous settlement transaction by sending his
preimage to A. This guarantees that if B places a revoked
settlement transaction on the blockchain, A can redeem the
tokens within the timeout. Alternatively, if A becomes unre-
sponsive, B can place the transaction on the blockchain and
redeem the tokens after the timeout elapses.
this scheme assumes synchronous access to
the blockchain – A should monitor the blockchain, identify
revoked-state transactions, and issue her own transaction be-
fore the revocation timeout elapses. To remove this burden,
services called Watchtowers [77]–[79] offer to replace A
in monitoring the blockchain and issuing transactions when
needed. However, these also require the same synchronous
access to the blockchain, and the placement of transactions
is still at the hands of bribable miners. MAD-HTLC can be
viewed as turning the miners themselves into watchtowers –
watchtowers that directly conﬁrm the transactions, without a
bribable middleman.
Note that
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:06 UTC from IEEE Xplore.  Restrictions apply. 
1232
b) Atomic swaps: These contracts enable token exchange
over multiple blockchain systems [11]–[15], [80], where a set
of parties transact their assets in an atomic manner, i.e., either
all transactions occur, or none.
Consider two users, A and B, that want to have an atomic
swap over two blockchains. A picks a preimage and creates an
HTLC on the ﬁrst blockchain with timeout T 1. Then, B cre-
ates an HTLC requiring the same preimage (B knows only its
hash digest) and a timeout T 2 < T 1 on the second blockchain.
A publishes a transaction redeeming the HTLC on the second
blockchain, revealing the preimage and claiming the tokens.
B learns the preimage from A’s published transaction, and
publishes a transaction of his own on the ﬁrst blockchain.
If A does not publish her transaction before T 2 elapses, then
the swap is canceled.
III. MODEL
We start by describing the system participants and how
they form a chain of blocks that contain transactions (§III-A).
Next, we explain how the transactions are parsed to deﬁne the
system state (§III-B). Finally, we detail the required contract
speciﬁcation HTLC-Spec (§III-C).
A. Blockchain, Transactions and Miners
We assume an existing blockchain-based cryptocurrency
system, facilitating transactions of internal system tokens
among a set of entities. All entities have access to a digital sig-
nature scheme [81] with a security parameter µ. Additionally,
→ {0, 1}µ,
they have access to a hash function H : {0, 1}
mapping inputs of arbitrary length to outputs of length µ.
We assume the value of µ is sufﬁciently large such that the
standard cryptographic assumptions hold: the digital signature
scheme is existentially unforgeable under chosen message
attacks (EU-CMA) [81], [82], and that H upholds preimage
resistance [83], [84].
∗
The blockchain serves as an append-only ledger storing the
system state. It is implemented as a linked list of elements
called blocks. A subset of the entities are called miners, who
aside from transacting tokens also extend the blockchain by
creating new blocks. We refer to non-mining entities as users.
There is a constant set of n miners. Each miner is associ-
ated a number representing its relative block-creation rate, or
mining power. Denote the mining power of miner i by λi,
i=1 λi = 1. Denote the minimal mining power
λi. As in previous work [28], [64], [85], [86],
by λmin = min
these rates are common knowledge, as in practice miners can
monitor the blockchain and infer them [87].
where (cid:80)n
i
Block creation is a discrete-time, memoryless stochastic
process. At each time step exactly one miner creates a block.
As in previous work [4], [9]–[11], [64], we disregard miners
deliberately [85], [88], [89] or unintentionally [90]–[92] caus-
ing transient inconsistencies (called forks in the literature).
Blocks are indexed by their location in the blockchain. We
denote the ﬁrst block by b1 and the j’th block by bj.
Transactions update the system state. An entity creates a
transaction locally, and can publish it to the other entities.
Transaction publication is instantaneous, and for simplicity
we abstract this process by considering published transactions
to be part of a publicly-shared data structure called the
mempool. As in previous work [9], [10], [64], all entities have
synchronous access to the mempool and the blockchain.
Unpublished and mempool transactions are unconﬁrmed,
and are yet to take effect. Miners can include unconﬁrmed
transactions of their choice when creating a block, thus con-
ﬁrming them and executing the stated token reassignment.
The system limits the number of included transactions per
block, and to simplify presentation we consider this limit to
be one transaction per block.
The system progresses in steps. Each step j begins with
system entities publishing transactions to the mempool. Then,
a single miner is selected at random proportionally to her
mining power, i.e., miner i is selected with probability λi. The
selected miner creates block bj, either empty or containing a
single transaction, and adds it to the blockchain. This conﬁrms
the transaction, reassigning its tokens and awarding that miner
with its fee. The system then progresses to the next step.
B. System State
The system state is a set of token and predicate pairs called
contracts. Transactions reassign tokens from one contract to
another. We say that a transaction redeems a contract if it
reassigns its tokens to one or more new initiated contracts.
To redeem a contract, a transaction must supply input values
such that the contract predicate evaluated over them is true.
Transactions that result in negative predicate value are invalid,
and cannot be included in a block. We simply disregard such
transactions.
We say that an entity owns tokens if she is the only entity
able to redeem their contract, i.e., the only entity that can
provide input data in a transaction that results in positive
evaluation of the contract’s predicate.
Transactions reassign tokens as follows. Each transaction
lists one or more input contracts that it redeems, each with
its respective provided values. Each transaction also lists one
or more output contracts that it initiates. A transaction is only
valid if the aggregate amount in the output contracts is not
larger than the amount in its redeemed input contracts. The
difference between the two amounts is the transaction’s fee.
The fee is thus set by the entity that creates the transaction.
The system state is derived by parsing the transactions in the
blockchain by their order. Each transaction reassigns tokens,
thus updating the contract set. Transaction fees are reassigned
to a contract supplied by the conﬁrming miner.
Two transactions conﬂict if they redeem the same contract.
Both of them might be valid, but only one can be placed in the
blockchain. Once one of them is conﬁrmed, a block containing
the other is invalid. We disregard such invalid blocks, and
assume miners only produce valid ones.
There is always at least one unconﬁrmed valid transaction
in the mempool [64], [66], [68], [93], [94], and the highest
offered fee by any mempool transaction is f, referred to as
the base fee. Miners act rationally to maximize their received
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:06 UTC from IEEE Xplore.  Restrictions apply. 
1233
fees (see §II-B). Users are also rational, and offer the minimal
sufﬁcient fee for having their transactions conﬁrmed.
Predicates have access to three primitives of interest:
• vSig (sig; pk): validate that a digital signature sig pro-
vided by the transaction (on the transaction, exclud-
ing sig) matches a public key pk speciﬁed in the contract.
• vPreImg (pre; dig): validate that a preimage pre provided
by the transaction matches a hash digest dig speciﬁed in
the contract, i.e., that H (pre) = dig.
• vTime (T ): validate that the transaction trying to redeem
the contract is in a block at least T blocks after the
transaction initiating it.
A predicate can include arbitrary logic composing those
primitives. In predicates that offer multiple redeem options
via or conditions, we refer to each option as a redeem path.
We note that once a transaction is published, its content
becomes available to all entities. We say that an entity knows
data if it is available to it.
C. HTLC-Spec Speciﬁcation
We formalize as HTLC-Spec the following contract spec-
iﬁcation, used in variety of blockchain-based systems and
algorithms [4], [7]–[14], [17]–[19]. HTLC-Spec is speciﬁed
for two users, A and B. It is parameterized by a hash digest
and a timeout, and contains a certain deposit amount, vdep. A
gets the deposit if she publishes a matching preimage before
the timeout elapses, otherwise B does.
In a blockchain setting, A and B redeem the deposit with a
transaction that offers a fee. We assume the contract token
amount vdep is larger than the base fee f, otherwise the
contract is not applicable.
The redeeming transaction by A or B (according to the
scenario) should require a fee negligibly larger than the base
fee f. Speciﬁcally, the fee amount is independent of vdep.
To construct HTLC-Spec, A and B choose the included hash
digest, the timeout, and the token amount, vdep. Then either of
them issues a transaction that generates the contract with vdep
tokens and the parameterized predicate. Either A or B initially
knows the preimage, depending on the scenario.
For simplicity, we assume that A either knows the preimage
when the transaction initiating HTLC-Spec is conﬁrmed on the
blockchain, or she never does.
IV. MAD-HTLC DESIGN
We present MAD-HTLC, an implementation of HTLC-
Spec. MAD-HTLC comprises two sub contracts1 — MH-
Dep, the core implementation of the HTLC-Spec functionality,
and MH-Col, an auxiliary contract for collateral, used to
disincentivize spiteful behavior by B.
MAD-HTLC includes additional variables and parameters
along those of HTLC-Spec, facilitating its realization. It
includes two preimages, prea and preb; the former corresponds
to the preimage of HTLC-Spec; the latter is an addition in
1Separating MAD-HTLC into two sub contracts is for Bitcoin compatibil-
ity; these can be consolidated to a single contract in blockchains supporting,
richer smart-contract languages, see §VI.
MAD-HTLC, chosen by B, used in the various redeem paths.
It also includes the HTLC-Spec deposit token amount vdep,
but also utilizes vcol collateral tokens.
Essentially, MH-Dep lets either A redeem vdep with preim-
age prea, or B after the timeout with preimage preb, or any
party with both preimages prea and preb. MH-Col has vcol
redeemable only after the timeout, either by B, or by any
party with both preimages prea and preb.
We present protocol Πmad-htlc for setup, initiation and re-
deeming of a MAD-HTLC (§IV-A), and detail the speciﬁcs
of MH-Dep (§IV-B) and MH-Col (§IV-C).
A. Protocol Πmad-htlc
Recall that HTLC-Spec is used in several scenarios differing
in which party chooses the preimage, when that chosen
preimage is shared, and who initiates the contract on the
blockchain (§II-C). However, in all scenarios, once the contract
is initiated, A can redeem vdep by publishing the preimage
before the timeout elapses, and B can redeem them only after.
So, there are several variants for any protocol that imple-
ments HTLC-Spec, and we focus on the variant where B picks
the ﬁrst preimage prea, potentially shares it with A, either A
or B can initiate the contract on chain, and either can redeem
it using the various redeem paths. This corresponds to the off-
chain payment channels scenario (§II-C).
Protocol Πmad-htlc (Protocol 1) progresses in phases, and is
parameterized by the timeout T and the token amounts vdep
and vcol. First, in the setup phase, B randomly draws (denoted
by R
←) the two preimages prea and preb. He then derives their
respective hash digests diga ← H (prea) and digb ← H (preb),
shares diga and digb with A. Upon A’s conﬁrmation B
creates a transaction txinit that initiates a MAD-HTLC with
parameters T, diga, digb, vdep, vcol and shares txinit with A.
In the following initiation phase, B can share prea with A.
Additionally, either A or B can publish txinit to the mempool,
allowing miners to conﬁrm it and initiate the MAD-HTLC.
In the ﬁnal redeeming phase, once the MAD-HTLC is
initiated, A and B can redeem vdep and vcol from MH-Dep
and MH-Col, respectively. Speciﬁcally, A redeems vdep only
if she received prea from B, and otherwise B redeems vdep.
Either way, B redeems vcol.
B. MH-Dep
The MH-Dep contract
is initiated with vdep tokens. Its
predicate is parameterized with A’s and B’s public keys, pka
and pkb, respectively; a hash digest of the predeﬁned preim-
age diga = H (prea) such that any entity other than A
and B does not know prea, and A or B know prea according
to on the speciﬁc use case; another hash digest digb such
that H (preb) = digb, where only B knows preb; and a
timeout T . The contract has three redeem paths, denoted
by dep-A, dep-B and dep-M, and presented in Predicate 1.
Table I shows the possible redeeming entities of MH-Dep.
In the dep-A path (line 1), A can redeem MH-Dep by
creating a transaction including prea and siga, a signature
created using her secret key ska. Such a transaction can
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:06 UTC from IEEE Xplore.  Restrictions apply. 
1234
Protocol Πmad-htlc run by A and B details the setup, initiation and redeeming
of a MAD-HTLC in the scenario where B picking prea. It is parameterized
by timeout T , and token amounts vdep and vcol.
setup
R← {0, 1}µ , preb
B draws prea
R← {0, 1}µ and sets diga ←
H (prea) , digb ← H (preb). Then B sends diga and digb to A for conﬁrma-
tion. Afterwards B, compiles a transaction txinit that initiates a MAD-HTLC
(both MH-Dep and MH-Col) with diga, digb, T, vdep, vcol as parameters and
shares it with A. txinit is not published yet.
initiation
B can send prea to A. If so, A expects to receive pre such that diga =
H (pre), and ignores other values.
Either A or B publish txinit to the mempool, and it is eventually included in
a block bj, initiating MAD-HTLC.
If A had received prea, she creates and publishes txdep
a , a transaction
redeeming MH-Dep using the dep-A redeem path.
B waits for the creation of block bj+T−1. If by then A did not pub-
lish txdep
, redeeming both MH-Dep and MH-Col
a
through dep-B and col-B redeem paths, respectively. If A did publish txdep
b , redeeming only MH-Col using the col-B redeem path.
then B publishes txcol
then B publishes txdep+col
redeeming
a
b
Protocol 1: Πmad-htlc
Predicate 1: MH-Dep
Parameters: pka, pkb, T, diga, digb
MH-Dep (pre1, pre2, sig) :=
(vPreImg (pre1; diga) ∧ vSig (sig; pka)) ∨
(vPreImg (pre2; digb) ∧ vSig (sig; pkb) ∧ vTime (T )) ∨
(vPreImg (pre1; diga) ∧ vPreImg (pre2; digb))
1
2
3
// dep-A