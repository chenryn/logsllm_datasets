i =1
n
i =1
n
i =1
n
i =1
The overall steps in SAGSC protocol are shown in Algorithm 6.
We achieve the comparison and secret sharing of the result by the
circuit EQ-ADD (as shown in Figure 2(b)) in which A is the circuit
constructor and the output (cid:4)χ (cid:5) B
is only given to B. We will show
the error rate of our approximate protocol over a real-world dataset
is very small in Section 7.2, and discuss how to further reduce the
error rate in Section 8.1.
5 SECURE SIMILAR SEQUENCE QUERY ON
GENOMIC DATA
With the above building blocks, we are ready to present the detailed
scheme for secure similar sequence query on genomic data. We
first propose a secure scheme based on exact edit distance (denoted
by SSQ-I), and then present our second scheme, a more efficient
solution with the approximate edit distance (denoted by SSQ-II).
5.1 SSQ-I (with the Exact Edit Distance)
Our scheme consists of the following four stages: genomic data
outsourcing, query request issuing, secure query executing and
result recovering.
5.1.1
Stage 1: Genomic Data Outsourcing. In the genomic data
outsourcing stage, multiple data owners first divide the genomic
sequences locally by additive secret sharing, and then upload the
shares to the two servers for constructing a joint database D. Specif-
ically, for a sequence S = [S[1], . . . , S[n]] (n denotes the length
of each sequence), a set of random numbers ri ∈ Z
2(cid:2) are chosen,
and then the data owner sets (cid:4)S(cid:5) A = [r1, . . . , rn ] and computes
(cid:4)S(cid:5) B = [S[1] − r1, . . . , S[n] − rn ]. After that, one share (cid:4)S(cid:5) A
is
uploaded to Server A and another share (cid:4)S(cid:5) B
is uploaded to Server
B. We assume that the above shares are sent over secure chan-
nels. When genomic data outsourcing of multiple owners are com-
pleted, A and B maintain a joint genomic database D in the secret
sharing form. We assume there are a total of m sequences, then
D = ((cid:4)S1(cid:5) , · · · , (cid:4)Sm (cid:5)).
5.1.2
Stage 2: Query request issuing. Once the joint database D
is set up, similar sequence queries can be issued from multiple users.
To protect privacy, the user uses additive secret sharing to partition
the query Q = [Q[1], · · · , Q[n]] into two shares denoted by (cid:4)Q(cid:5) A =
[(cid:4)Q[1](cid:5) A , · · · , (cid:4)Q[n](cid:5) A ] and (cid:4)Q(cid:5) B = [(cid:4)Q[1](cid:5) B , · · · , (cid:4)Q[n](cid:5) B ],
then send (cid:4)Q(cid:5) A
to Server A and Server B, respectively.
and (cid:4)Q(cid:5) B
5.1.3
Stage 3: Secure Query Executing. When two servers receive
the request from the user, secure query protocol can be executed
between A and B. The goal of the proposed protocol is to retrieve
the indices of the top k (k ≤ m) genomic sequences that are closest
to the user query in a secure manner. The main steps involved in
the secure query protocol are given in Algorithm 7.
First, we use SEED protocol (described in 4.4) directly to compute
exact edit distance between (cid:4)Q(cid:5) and (cid:4)Si (cid:5) (1 ≤ i ≤ m) without
revealing any private information about the genomic database D
and the query Q. Clearly, by running SEED protocol m times, a
set of exact edit distance (cid:4)di (cid:5) = SEED((cid:4)Q(cid:5) , (cid:4)Si (cid:5)) (1 ≤ i ≤ m) are
available. Note that (cid:4)di (cid:5) is in the secret sharing form.
Next, the two servers need to compute the k most similar ge-
nomic sequences depending on the (cid:4)di (cid:5). During this process, the
values of di and the index i should not be revealed to the servers.
To protect the confidentiality of the index, we adopt shuffle-then-
compare strategy. After the secure shuffling, the link between the
old sequence and the new one can be cut off. To this end, we first
transform the index i to the secret sharing form. Specifically, A
sets (cid:4)i(cid:5) A = i while B sets (cid:4)i(cid:5) B = 0. Now that A and B hold a
set of key-value pairs [(cid:4)i(cid:5) , (cid:4)di (cid:5)](1 ≤ i ≤ m). Next we apply SSF
protocol to these key-value pairs directly, i.e., the same random
integers and permutation functions are applied to the shuffle of (cid:4)i(cid:5)
and (cid:4)di (cid:5) simultaneously, for getting a set of permuted key-value
pairs [(cid:4)π (π (cid:9)(i))(cid:5) ,
](1 ≤ i ≤ m). Note the security of the
permuted key-value pairs is guaranteed by the randomization in
SSF protocol. Similar to SMS protocol, we utilize ADD-CMP circuit
to realize bubble sort for getting the top-k results (correspond-
](1 ≤ j ≤ k). Finally,
ing to line 10-13), denoted by [
(cid:3)
dπ (π (cid:9)(i ))
(cid:3)
δj,1
(cid:3)
δj,0
(cid:4)
(cid:4)
(cid:4)
,
This  is  an  author-produced,  peer-reviewed  version  of  this  article.  The  final,  definitive  version  of  this  document  can  be  found  online  at  ASIACCS  '18:
Proceedings of the 2018 on Asia Conference on Computer and Communications Security, published by Association for Computing Machinery. Copyright
restrictions may apply. doi: 10.1145/3196494.3196535
Ij
Output: A obtains
Algorithm 7 Secure Query Protocol in SSQ-I
Input: A inputs (cid:4)Q(cid:5) A
A: (cid:4)i(cid:5) A ← i; B: (cid:4)i(cid:5) B ← 0
A and B: (cid:4)di (cid:5) ← SEED((cid:4)Q(cid:5) , (cid:4)Si (cid:5))
=[(cid:4)Q[1](cid:5) A , · · · , (cid:4)Q[n](cid:5) A ] and
=[(cid:4)Si [1](cid:5) A , · · · , (cid:4)Si [n](cid:5) A ](1 ≤ i ≤ m);
(cid:4)Si (cid:5) A
=[(cid:4)Q[1](cid:5) B , · · · , (cid:4)Q[n](cid:5) B ] and
B inputs (cid:4)Q(cid:5) B
(cid:3)
(cid:4) A
=[(cid:4)Si [1](cid:5) B , · · · , (cid:4)Si [n](cid:5) B ](1 ≤ i ≤ m)
(cid:4)Si (cid:5) B
(cid:4) B
(cid:3)
Ij
(1 ≤ j ≤ k);
(1 ≤ j ≤ k)
B obtains
1: for 1 ≤ i ≤ m do
2:
3: for 1 ≤ i ≤ m do
4:
5: A and B:
6:
L1 ← [((cid:4)1(cid:5) , (cid:4)d1(cid:5)), · · · , ((cid:4)m(cid:5) , (cid:4)dm (cid:5))]
(cid:3)
L2 ← SSF(L1) = [((cid:4)π (π (cid:9)(1))(cid:5) ,
((cid:4)π (π (cid:9)(m))(cid:5) ,
dπ (π (cid:9)(m))
(cid:3)
(cid:4)
8: for 1 ≤ i ≤ m do
δi,0
9:
10: for (i = 1; i ≤ k; i++) do
(cid:3)
11:
δj,1
A and B: swap(
swap(
(cid:3)
dπ (π (cid:9)(1))
(cid:4)
(cid:3)
δi,1
(cid:3)
(cid:4)
(cid:4)
for (j = m; j ≥ i; j– –) do
(cid:4)
(cid:3)
(cid:3)
δj−1,1
,
)==0 then
(cid:3)
(cid:4)
(cid:3)
δj−1,0
δj,0
,
δj,1
δj−1,1
← (cid:4)π (π (cid:9)(i))(cid:5) ,
if ADD-CMP(
A and B:
(cid:4)
(cid:4)
), · · · ,
),
)
←
(cid:4)
(cid:4)
12:
13:
)]
7:
,
(cid:4) A
(cid:3)
14: for 1 ≤ j ≤ k do
(cid:3)
(cid:4) B
δj,0
←
15:
δj,0
(cid:4) A
(cid:4) B
A:
B:
(cid:3)
(cid:3)
Ij
Ij
←
16:
(cid:3)
dπ (π (cid:9)(i ))
(cid:4)
(cid:3)
(cid:4) A
Ij
←
(cid:4) A
(cid:3)
δj,0
while B outputs
(cid:4) B
(cid:3)
A outputs the final indices
Ij
(1 ≤ j ≤ k).
(cid:3)
δj,0
(cid:4) B
←
(cid:3)
(cid:4) B
5.1.4
Ij
(cid:4) A
Stage 4: Result Recovering. After A and B return
(1 ≤ j ≤ k) to the query user, the user can recover the
and
index Ij by additions locally. Note that the query user can retrieve
the sequence SIj from two servers by a k-out-of-n OT protocol,
which can prevent the servers from inferring the query results by
monitoring the memory access.
(cid:3)
Ij
(cid:3)
(cid:3)
Ij
Ij
(cid:3)
(cid:4) A
(cid:4) B
Algorithm 8 Secure Query Protocol in SSQ-II
Input: A and B hold D,T , L and (cid:4)Q(cid:5)
(1 ≤ j ≤ k);
Output: A obtains
(1 ≤ j ≤ k)
B obtains
1: for Si ∈ D1 do
(cid:4)
2:
t1
4:
l =1
5: for Si ∈ {D2, · · · , Dω } do
6:
7: A and B hold (cid:4)di (cid:5) (1 ≤ i ≤ m), the remaining steps are the
(cid:3)
(cid:4)
(cid:3)
ul, j
← SAGSC((cid:4)Ql (cid:5) ,
ED(ul, j , Si,l )
·
for 1 ≤ l ≤ t1, 1 ≤ j ≤ v1 do
v1
χl, j
A and B: (cid:4)di (cid:5) ←
A and B do the same as line 1-4.
A and B:
χl, j
j=1
(cid:4)
(cid:3)
(cid:4)
3:
)
same as line 3-17 in Algorithm 7.
: i = 1, · · · , m1} = {ul,1
(2) For each block location l = 1, · · · , t, DO1 gathers the set
T1[l] = {Si,l
} of all the
possible sequence values for the lth block, where v1 is the
upper bound of the total number of values for each block.
DO1 pads all sets T1[l](1 ≤ l ≤ t ) to the same size v1 with
dummy values. DO1 constructs a sequence values set T1, in
which the element T1[l, j] = ul, j (1 ≤ l ≤ t, 1 ≤ j ≤ v1).
, · · · , ul,v1
(3) For every block location l = 1, · · · , t, every sequence Si , i =
1, · · · , m1, and every value ul, j ∈ Tl , j = 1, · · · , v1, DO1