title:Graphene: efficient interactive set reconciliation applied to blockchain
propagation
author:A. Pinar Ozisik and
Gavin Andresen and
Brian Neil Levine and
Darren Tapp and
George Bissias and
Sunny Katkuri
Graphene: Efficient Interactive Set Reconciliation
Applied to Blockchain Propagation
A. Pinar Ozisik
Univ. of Massachusetts, Amherst
Brian Levine
Univ. of Massachusetts, Amherst
Gavin Andresen
Darren Tapp
Dash.org
George Bissias
Univ. of Massachusetts, Amherst
Sunny Katkuri
Univ. of Massachusetts, Amherst
ABSTRACT
We introduce Graphene, a method and protocol for interactive
set reconciliation among peers in blockchains and related dis-
tributed systems. Through the novel combination of a Bloom
filter and an Invertible Bloom Lookup Table (IBLT), Graphene
uses a fraction of the network bandwidth used by deployed
work for one- and two-way synchronization. We show that, for
this specific problem, Graphene is Ω(n log n) more efficient at
reconciling n items than using a Bloom filter at the informa-
tion theoretic bound. We contribute a fast and implementation-
independent algorithm for parameterizing an IBLT so that
it is optimally small in size and meets a desired decode rate
with arbitrarily high probability. We characterize our perfor-
mance improvements through analysis, detailed simulation,
and deployment results for Bitcoin Cash, a prominent cryp-
tocurrency. Our implementations of Graphene, IBLTs, and our
IBLT optimization algorithm are all open-source code.
1 INTRODUCTION
Minimizing the network bandwidth required for synchro-
nization among replicas of widely propagated information is
a classic need of many distributed systems. Blockchains [41,
50] and protocols for distributed consensus [18, 31] are the
most recent examples of systems where the performance of
network-based synchronization is a critical factor in over-
all performance. Whether based on proof-of-work [30, 41],
proof-of-stake [15, 26], or a directed acyclic graph (DAG) [33],
guarantees that these systems can scale to a large user base
rely on assumptions about synchronization.
In all these systems, if the network protocol used for
synchronization of newly authored transactions and newly
mined blocks of validated transactions among peers is effi-
cient, there are numerous benefits. First, if blocks can be re-
layed using less network data, then the maximum block size
can be increased, which means an increase in the overall num-
ber of transactions per second. Second, blocks that can be
relayed using less network data propagate more quickly [19],
thereby increasing consensus among distributed peers and
avoiding conflicts called forks. Moreover, systems based on
GHOST [45], such as Ethereum [50], record forks on the
1
chain forever, resulting in storage bloat. Finally, using less
bandwidth to relay a block allows greater participation by
peers who are behind limited-bandwidth links and routes
(e.g., China’s firewall).
Contributions. In this paper, we introduce Graphene, a
method and protocol for synchronizing blocks (and mem-
pools) among peers in blockchains and related systems using
a fraction of the network bandwidth of related work. For
example, for larger blocks, Graphene uses 12% of the band-
width of existing deployed systems. To do so, we make novel
contributions to network-based set reconciliation methods
and the application of probabilistic data structures to net-
work protocols. We characterize our performance through
analysis, detailed simulation, and open-source deployments.
Our contributions include:
• We design a new protocol that solves the problem of deter-
mining which elements in a set M stored by a receiver are
members of a subset N ⊆ M chosen by a sender. We apply
the solution to relaying a block of n = |N | transactions to
a receiver holding m = |M| transaction. We use a novel
combination of a Bloom filter [11] and an Invertible Bloom
Lookup Table (IBLT) [28]. Our approach is smaller than
using current deployed solutions [17] and previous IBLT-
based approximate solutions [23]. Further, we prove that
our solution to this specific problem (where both parties
need all transactions in N ) is an improvement of Ω(n log n)
over using an optimal Bloom filter alone.
• We extend our solution to the more general case where
some of the elements of N are not stored by receiver. Thus,
our protocol extension handles the case where a receiver is
missing transactions in the sender’s block; we are a small
fraction of the size of previous work [49] at the cost of an
additional message. Additionally, we show how Graphene
can efficiently identify transactions held by the receiver
but not the sender.
• We design and evaluate an efficient algorithm for param-
eterizing an IBLT so that it is optimally small in size but
meets a desired decode rate with arbitrarily high proba-
bility and faster execution times. This result is applicable
beyond our context to any use of IBLTs.
UM-CS, 2019-001
A. Pinar Ozisik, Brian Levine, George Bissias, Gavin Andresen, Darren Tapp, and Sunny Katkuri
• We design and evaluate a method for significantly im-
proving the decode rate of an IBLT when two IBLTs are
available. This method is also a generally applicable.
• We provide a detailed evaluation using analysis and simu-
lation to quantify performance against existing systems.
We also characterize performance of our protocol as a live
Bitcoin Cash deployment, and as an Ethereum implemen-
tation for historic blocks. We also show that Graphene is
more resilient to attack than previous approaches.
We have publicly released our Bitcoin Cash and Ethereum
implementations of Graphene [6, 9], a C++ and Python im-
plementation of IBLTs including code for finding their opti-
mal parameters [5], and we have released a public network
specification of our basic protocol for standard interoper-
ability [7]. It has been adopted by blockchain developers
in released clients, replacing past approaches [3, 4]. While
our focus is on blockchains, any system that requires set
reconciliation, such as CRLite [32], where a client regularly
checks a server for revocations of observed certificates, or
synchronizing PGP key servers [43], are also potential use
cases for Graphene.
This submission extends and improves upon the authors’
previous workshop paper [2]. The contributions of our prior
work included only the first bullet above (i.e., Protocol 1 in
Section 3.1) and empirical simulations of its performance.
All other contributions listed above are new. This work does
not raise any ethical issues.
2 BACKGROUND AND RELATED WORK
Below, we summarize and contrast related work in network-
based set reconciliation and protocols for block propagation.
2.1 Set Reconciliation Data Structures
Set reconciliation protocols allow two peers, each holding a
set, to obtain and transmit the union of the two sets. This
synchronization goal is distinct from set membership pro-
tocols [16], which tell us, more simply, if an element is a
member of a set. However, data structures that test set mem-
bership are useful for set reconciliation. This includes Bloom
filters [11], a seminal probabilistic data structure with myriad
applications [13, 35, 47]. Bloom filters encode membership
for a set of size n by inserting the items into a small array of
−n log2(f )
bits; this efficiency gain is the result of allowing a
false positive rate (FPR) f .
ln(2)
Invertible Bloom Lookup Tables (IBLTs) [28] are a richer
probabilistic data structure designed to recover the symmetric
difference of two sets of items. Like Bloom filters, items are
inserted into an IBLT’s array of c cells, which is partitioned
into subsets of size c/k. Each item is inserted once into each
of the k partitions, at indices selected by k hash functions.
Rather than storing only a bit, the cells store the actual item.
2
Each cell has a count of the number of items inserted and
the xor of all items inserted (called a keySum). The following
algorithm [23] recovers the symmetric difference of two sets.
Each set is stored in an IBLT, A and B, respectively, (with
equal c and k values). For each pairwise cell of A and B, the
keySums are xor’ed and the counts subtracted, resulting in
a third IBLT: A △ B = C that lacks items in the intersection.
The cells in C with count = 1 hold an item belonging to only
A, and to only B if count = –1. These items are removed
from k − 1 other cells, which decrements their counts and
allows for the additional peeling of new items. This process
continues until all cells have a count of 0. (We’ve elided
details about a checkSum field for clarity.) If c is too small
given the actual symmetric difference, then iterative peeling
will eventually fail, resulting in a decode failure, and only
part of the symmetric difference will be recovered.
There are many variations on Bloom filters that present
different trade-offs, such as more computation for smaller
size. Similarly, IBLTs are one of several alternatives. For ex-
ample, several approaches involve more computation but
are smaller in size [22, 37, 51] (see [23] for a comparison).
We have not investigated how alternatives to IBLTs improve
Graphene’s size nor how, for example, computational costs
differ. Our focus is on IBLTs because they are balanced: min-
imal computational costs and small size. While miners may
have strong computational resources, full nodes and lighter
clients in blockchains do not. More importantly, as our de-
ployment results in Section 5.3 show, Graphene’s size is
almost flat as block size increases, demonstrating that IBLTs
are a good fit for our problem. Finally, some of these solu-
tions are complementary; for example, minsketch [51] can
be used within the cells of IBLTs to reduce Graphene’s size
further.
Comparison to Related Work. We provide a novel solu-
tion to the problem of set reconciliation, where one-way or
mutual synchronization of information is required by two
peers. Our results are significantly better than deployed past
works that are based on Bloom filters alone [49] or IBLTs
alone [23, 28], as we show in Section 5.3.
We provide several contributions to IBLTs. In general, if
one desires to decode sets of size j from an IBLT, a set of
values τ > 0 and k > 2 must be found that result in c = jτ
cells (divisible by k) such that the probability of decoding
is at least p. We provide an implementation-independent
algorithm for finding values τ and k that meet rate p and
result in the smallest value of c.
This is a significant advance over past work. Goodrich and
Mitzenmacher [28] provide values of τ that asymptotically
ensure a failure rate that decreases polynomially with j. But
these asymptotic results are not optimally small in size for
finite j and do not help us set the value of k optimally. Using
Graphene: Set Reconciliation Applied to Blockchain Propagation
UM-CS, 2019-001
their unreleased implementation, Eppstein et al. [23] iden-
tify optimal τ and k that meet a desired decode rate for a
selection of j values; however, the statistical certainty of this
optimality is unclear. In comparison, using our open-source
IBLT implementation [5], we are able to systematically pro-
duce statistically optimal values τ and k for a wide range of
j values. Our method, based on hypergraphs, is an order of
magnitude faster than this previous method [23].
We also contribute a novel method for improving the de-
code rate of IBLTs, which is complementary to related work
by Pontarelli et al. [42], who have the same goal.
2.2 Block Propagation
Blockchains, distributed ledgers, and related technology re-
quire a network protocol for distributing new transactions
and new blocks. Almost all make use of a p2p network of
peers, often a clique among miners that validate blocks, and
a random topology among non-mining full nodes that store
the entire chain. New transactions have an ID equal to their
cryptographic hash. When a new transaction is received,
a peer sends the ID as the contents of an inventory (inv)
message to all d neighbors, who request a getdata message
if the transaction is new to them. Transactions are stored in
a mempool until included in a valid block. Blocks are relayed
similarly: an inv is sent to each neighbor (often the header is
sent instead to save time), and a getdata requests the block
if needed. The root of a Merkle tree [36] of all transactions
validates an ordered set against the mined block.
The block consists of a header and a set of transactions.
These transactions can be relayed by the sender in full, but
this wastes bandwidth because they are probably already
stored at the receiver. In other words, blocks can be relayed
with a compressed encoding, and a number of schemes have
been proposed. As stated in Section 1, efficient propagation
of blocks is critical to achieving consensus, reducing storage
bloat, overcoming network firewall bottlenecks, and allowing
scaling to a large number of transactions per second.
Transactions that offer low fees to miners are sometimes
marked as DoS spam and not propagated by full nodes; yet,
they are sometimes included in blocks, regardless. To avoid
sending redundant inv messages, peers keep track, on a per-
transaction and per-neighbor basis, whether an inv has been
exchanged. This log can be used by protocols to send missing
transactions to a receiver proactively as the block is relayed.
Comparison to Related Work. Xtreme Thinblocks [49]
(XThin) is a robust and efficient protocol for relaying blocks,
and is deployed in Bitcoin Unlimited (BU) clients. The re-
ceiver’s getdata message includes a Bloom filter encoding
the transaction IDs in her mempool. The sender responds
with a list of the block’s transaction IDs shortened to 8-bytes
3
(since the risk of collision is still low), and uses the Bloom fil-
ter to also send any transactions that the receiver is missing.
XThin’s bandwidth increases with the size of the receiver’s
mempool, which is likely a multiple of the block size. In
comparison, Graphene uses significantly lower bandwidth
both when the receiver is and is not missing transactions.
However, Graphene may use an additional roundtrip time to
repair missing transactions.
Compact Blocks [17] is a protocol that is deployed in all
Bitcoin Core and Bitcoin ABC clients. In this protocol, the
receiver’s getdata message is a simple request (no Bloom
filter is sent). The sender replies with the block’s transaction
IDs shorted to 6-bytes (as well as the coinbase transaction).
If the receiver has missing transactions, she requests repairs