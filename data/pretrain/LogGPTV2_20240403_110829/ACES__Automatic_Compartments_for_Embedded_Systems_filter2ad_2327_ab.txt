Peripheral
Global Var.
Function
A
a
1
Memory Region
Runtime Lib.
Read Write Mem. 
Read Only Mem. 
  X Y
Comp. MPU Regions
(a) Program Dependency
 (b) Initial Region Graph
(c) Region Graph after
(d) Optimized Region 
(e) Final Region Graph
Graph 
C
1
2
3
4
b
c
a
A
d
1
2
3
4
Comp. Policy
Graph
C
b
c
a
A
A
d
A
A
C
b
c
a
d
A
A
1
2
3
4
A
C
b c
a
d
A
1
2
3
4
A B
C
D
1
2
3
4
b c
a
d
A
(f) Compartmented Memory
 Layout
X Y
s
l
a
r
e
h
p
i
r
e
P
M
A
R
h
s
a
l
F
D
C
B
A
a, d
b, c
1,2
3,4
Figure 4: Compartment creation process and the resulting memory layout. (a) PDG is transformed to an initial region
graph (b). A compartmentalization policy is applied (c), followed by optimizations (d) and lowering to produce the
ﬁnal region graph (e). Which, is mapped to a compartmented memory layout with associated MPU regions (f).
tions, as the compartment encompasses the union of
all its contained function’s data/peripheral dependencies.
However, it improves performance as more functions are
located in the same compartment. Similar to merging
code vertices, merging of data vertices takes the union
of the contained global variables and the union of their
edges. All global variables in a vertex are made avail-
able to all dependent code regions. Thus, merging two
data vertices increases the amount of code which can ac-
cess the merged data vertices.
Unlike code and global variables, which can be placed
anywhere in memory by the compiler, peripheral ad-
dresses are ﬁxed in hardware. Thus, ACES uses a device
description to identify all peripherals accessible when the
smallest MPU region that covers the two merged periph-
erals is used. The device description contains the address
and size of each peripheral in the device. Using the de-
vice description peripheral vertices in the PDG can be
mapped to a MPU region which gives access to the pe-
ripheral. To illustrate, consider two peripherals vertices
that are to be merged and a device description contain-
ing four peripherals A, B, C, and D at addresses 0x000,
0x100, 0x200, and 0x300 all with size 0x100. The ﬁrst
vertex to be merged contains peripheral B at address
0x100 and the second Peripheral D at address 0x300.
The smallest MPU region that meets the hardware re-
strictions (i.e., is a power of 2 aligned on a multiple of its
size) covers addresses 0x000-0x3FF, and thus enables ac-
cess to peripherals A-D. Thus, the vertex resulting from
merging peripherals B and D, will contain peripherals A,
B, C, and D.
ing by peripheral, i.e., functions and global variables
are grouped together based on their access to peripher-
als. ACES does not impose restriction on policy choice.
Obviously, the policy affects the performance and isola-
tion of compartments, and, consequently, the security of
the executable binary image. For example, if two func-
tions which frequently call each other are placed in dif-
ferent code compartments then compartment transitions
will occur frequently, increasing the overhead. From a
security perspective, if two sets of global variables ~V1 and
~V2 are placed in the same compartment and in the origi-
nal program code region C1 accessed ~V1 and C2 accessed
~V2 then unnecessary access is granted—now both code
regions can access the entire set of variables. ACES en-
ables the developer to explore the performance-security
trade-offs of various policies.
After applying the compartmentalization policy,
it
may be desirable to adjust the resulting compartments.
These adjustments may improve the security or the per-
formance of the resulting compartmented binary. For ex-
ample, if performance is too slow it may be desirable to
merge regions to reduce compartment transitions. To ac-
commodate this, we enable adjustment passes to be ap-
plied to the region graph after the compartment forma-
tion. Developer-selected optimizations may be applied to
the region graph. An example of an optimization is the
transformation from Figure 4c to Figure 4d. It merges
functions 3 and 4 because they access the same memory
regions and peripherals. After the optimizations are ap-
plied, the resulting region graph is lowered to meet hard-
ware constraints.
4.3 Compartmentalization Policy and Op-
4.4 Lowering to the Final Region Graph
timizations
The compartment policy deﬁnes how code, global vari-
ables, and peripherals should be grouped into compart-
ments. An example of a security-aware policy is group-
Lowering is the process by which ACES ensures all
formed compartments meet the constraints of the tar-
geted hardware. As each compartment consists of a sin-
gle code vertex and its peripherals and data vertex. Each
USENIX Association
27th USENIX Security Symposium    69
code vertex’s out degree must be lower or equal to the
number of available MPU regions because the number of
access permissions that can be enforced is upper bounded
by that. Any code region not meeting this criteria is low-
ered, by merging its descendant data and peripheral ver-
tices until its out-degree is less than or equal to the cap.
ACES does this iteratively, by merging a pair of data
or peripheral vertices on each iteration. The vertices to
merge are determined by a cost function, with the low-
est cost merge being taken. Examples of cost functions
include:
the number of functions that will gain access
to unneeded variables in the data regions, how security
critical a component is (resulting in a high cost of merg-
ing), and the cost of unneeded peripherals included in the
merge of two peripherals.
4.5 Program Instrumentation and Com-
partment Switching
ACES sets up the MPU conﬁguration to isolate ad-
dress spaces of individual processes, similar to how a
desktop operating system handles the MMU conﬁgura-
tion. ACES generates the appropriate MPU conﬁgura-
tion from the ﬁnal region graph and inserts code during
a compilation pass to perform compartment transitions.
Ensuring that the proper MPU conﬁguration is used for
each compartment is done by encoding each compart-
ment’s MPU conﬁguration into the program as read-only
data and then on each compartment transition, the appro-
priate conﬁguration is loaded into the MPU.
Inserting compartment
transitions requires instru-
menting every function call between compartments and
the associated return to invoke a compartment switch-
ing routine. Each call from one compartment into an-
other has associated metadata listing the valid targets of
the transition. For indirect function calls, the metadata
lists all possible destinations. At runtime, the compart-
ment switching routine decides if the transition is valid
using this metadata. If authorized, it saves the current
MPU conﬁguration and return address to a “compart-
ment stack”, and then conﬁgures the MPU for the new
compartment.
It then completes the call into the new
compartment. On the associated return, the compart-
ment stack is used to authenticate the return and restore
the proper MPU conﬁguration. The MPU conﬁguration,
compartment stack, and compartment switching routine
are only writable by privileged code.
stack. To overcome these limitations we use a micro-
emulator. It emulates writes to locations prohibited by
the MPU regions, by catching the fault cause by the
blocked access. It then emulates, in software, all the ef-
fects of the write instruction, i.e., updates memory, reg-
isters, and processor ﬂags. A white-list is used to restrict
the areas each compartment is allowed to write.
An MPU region is used to prevent writing all data
above the stack pointer on the stack. Thus, the entered
compartment is free to add to the stack and modify any
data it places on the stack. However, any writes to pre-
vious portions of the stack will cause a memory access
fault. Then the micro-emulator, using a white-list of al-
lowed locations, enables selective writes to data above
the stack pointer.
To generate the white-list, static or dynamic analysis
may be used. With static analysis large over approxima-
tions to available data would be generated. Whereas dy-
namic analysis may miss dependencies, potentially lead-
ing to broken applications. To support dynamic analysis,
the emulator supports two modes of operation: record
and enforce. In record mode, which happens in a benign
training environment, representative tests are run and all
blocked writes emulated and recorded on a per compart-
ment basis. The recorded accesses create a white-list
for each compartment. When executing in enforce mode
(i.e., after deployment) the micro-emulator checks if a
blocked access is allowed using the white-list and either
emulates it or logs a security violation. Signiﬁcant use
of dynamically allocated data on desktop systems would
make dynamic analysis problematic. However, the lim-
ited memory on bare-metal systems requires developers
to statically allocate memory, enabling dynamic analysis
to readily identify data dependencies.
5
Implementation
ACES is implemented to perform four steps: program
analysis, compartment generation, program instrumenta-
tion, and enforcement of protections at runtime. Program
analysis and program instrumentation are implemented
as new passes in LLVM 4.0 [32] and modiﬁcations to its
ARM backend. Compartment generation is implemented
in Python leveraging the NetworkX graph library [25].
Runtime enforcement is provided in the form of a C run-
time library. For convenience, we wrap all these compo-
nents with a Makeﬁle that automates the entire process.
4.6 Micro-emulator for Stack Protection
5.1 Program Analysis
The ﬁnal element of ACES is stack protection. The con-
straints of MPU protection (starting address, size) mean
that it is difﬁcult to precisely protect small data regions
and regions that cannot be easily relocated, such as the
Our program analysis phase creates the PDG used to gen-
erate the region graph, and is implemented as an IR pass
in LLVM. To create the PDG it must identify control
ﬂow, global variable usage, and peripheral dependencies
70    27th USENIX Security Symposium
USENIX Association
for each function. Control-ﬂow dependencies are iden-
tiﬁed by examining each call instruction and determin-
ing its possible destinations using type-based alias anal-
ysis [33]. That is, we assume an indirect call may call
any function matching the function type of the call in-
struction. This identiﬁes all potential control-ﬂow de-
pendencies, but generates an over-approximation.
Over-approximations of global variable accesses re-
sult in overly permissive compartments. We found
that LLVM’s alias analysis techniques give large over-
approximations to data dependencies. Thus, we gener-
ate an under-approximation of the global variables that
are accessed within each function using LLVM’s use-
def chains. We form compartments with this under-
approximation and then use the micro-emulator to au-
thenticate access to missed dependencies at runtime
(Section 4.6). To understand our peripheral analysis, re-
call that the ARMv7-M architecture is a memory mapped
architecture. This means regular loads and stores to con-
stant addresses are used to access peripherals. In soft-
ware this is a cast of a constant integer to a pointer, which
is then dereferenced. ACES uses the cast and derefer-
ence as a heuristic to identify dependencies on peripher-
als. Using these analyses, ACES creates a PDG suitable
for compartmentalization.
5.2 Compartment Creation
Compartment creation uses the PDG, a compartmental-
ization policy, and the target device description to cre-
ate a ﬁnal region graph.
It is implemented in Python
using the NetworkX [25] graph library, which provides
the needed graph operations for ACES (like traversal and
merging). By separating this component from LLVM,
we enable the rapid investigation of different compart-
mentalization policies without having to manage the
complexities of LLVM. Policies are currently imple-
mented as a python function. Creating a new policy re-
quires writing a graph traversal algorithm that merges re-
gions based on desired criteria. We envision that the re-
search community could develop these policies, and an
application developer would select a policy much like
they select compiler optimizations today.
The region graph is created from the PDG as outlined
in Section 4.1. However, the nuances of handling periph-
erals justify further explanation. Peripherals are merged
using the device description to build a tree of all the pos-
sible valid MPU regions that cover the device peripher-
als, called the “device tree”. In the device tree, the pe-
ripherals are the leaves and the interior nodes are MPU
regions that cover all their descendant peripherals. For
example, if peripheral P1 is at memory-mapped address
[α, α + ∆1] and peripheral P2 is at address [β , β + ∆2],
then the intermediate node immediately above it will al-
low access to addresses [α, β + ∆2]. Thus, the closer to
the root a node is, the larger the MPU region and the
more peripherals it covers. Using this tree, the small-
est possible merge between two peripherals can be found
by ﬁnding their closest common ancestor. The device
tree also identiﬁes peripherals on the private peripheral
bus which requires access from privileged mode. Code
regions dependent on these peripherals must execute in
privileged mode; for security, the number and size of
such regions should be limited by the policy.
To start, we implement
two compartmentaliza-
tion policies, “Peripheral” and “Filename”.
The
Peripheral policy is a security policy that isolates pe-
ripherals from each other. Thus for an attack to start by
exploiting one peripheral and affect another (e.g., com-
promising a WiFi SOC to get to the application proces-
sor) multiple compartments would have to be traversed.
The policy initially gives each code vertex adjacent to
one or more peripherals in the PDG a unique color. Two
code vertices adjacent to the same set of peripherals get
the same color. It then proceeds in rounds, and in each
round any code vertex with a control-ﬂow dependency
on vertices of only one color is given the same color.
Rounds continue until no code vertices are merged, at
which point all uncolored code vertices are merged into
a single vertex. The Filename policy is a na¨ıve policy
that demonstrates the versatility of the policies ACES can
apply, and pitfalls of such a policy. It groups all functions
and global variables that are deﬁned in the same ﬁle into
the same compartment.
Two optimizations to the region graph can be applied
after applying the Filename policy. Merging all code
regions with identical data and peripheral dependencies,
this reduces compartment transitions at runtime without
changing data accessible to any compartments. The sec-
ond optimization examines each function and moves it
to the region that it has the most connections to, us-
ing the PDG to count connections. This improves the
performance of the application by reducing the number
of compartment transitions. By applying these two op-
timizations to the Filename policy we create a third
compartmentalization policy, “Optimized Filename”.
After applying optimizations, the region graph is low-
ered to meet hardware constraints. For our experimen-
tal platform, this ensures that no code vertex has more
than four neighboring data/peripheral vertices. While the
MPU on our target ARMv7-M devices has eight regions,
two regions are used for global settings, i.e., making all