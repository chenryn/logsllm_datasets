**Journal of Intelligent Information Systems, 21:3, 191–225, 2003**

© 2003 Kluwer Academic Publishers. Manufactured in The Netherlands.

### Semantic E-Workflow Composition

**Jorge Cardoso**  
Departamento de Matemática e Engenharias, Universidade da Madeira, 9050-078 Funchal, Portugal  
Email: [jorge.cardoso@uma.pt](mailto:jorge.cardoso@uma.pt)

**Amit Sheth**  
LSDIS Lab, Department of Computer Science, University of Georgia, Athens, GA 30602, USA  
Email: [amit.sheth@uga.edu](mailto:amit.sheth@uga.edu)

#### Abstract
Systems and infrastructures are currently being developed to support web services. The main idea is to encapsulate an organization's functionality within an appropriate interface and advertise it as a web service. While web services can be utilized in isolation, they are often integrated into workflow processes. The composition of workflow processes that model e-service applications differs from the design of traditional workflows in terms of the number of tasks (web services) available for the composition process, their heterogeneity, and their autonomy. Therefore, two problems need to be solved: how to efficiently discover web services based on functional and operational requirements, and how to facilitate the interoperability of heterogeneous web services. In this paper, we present a solution within the context of the emerging Semantic Web, which includes the use of ontologies to overcome some of these challenges. We describe a prototype that has been implemented to illustrate how discovery and interoperability functions can be achieved more efficiently.

#### Keywords
Web services composition, e-workflows, Semantic Web process, web services discovery, web services interoperability, Semantic Web, ontology-based systems, semantic heterogeneity, workflow QoS

### 1. Introduction
E-services have been announced as the next wave of Internet-based business applications that will dramatically change the use of the Internet (Casati et al., 2001). With the development and maturity of infrastructures and solutions that support e-services, organizations are expected to incorporate web services into their business processes. While web services can be used in isolation, it is natural to expect that they will be integrated into workflows (Fensel and Bussler, 2002). Workflow management systems are capable of integrating business objects to set up e-services with impressive speed and at low cost (Shegalov et al., 2001). Workflows and web services play a major role in architectures such as business-to-business (B2B), business-to-customer (B2C), customer-to-customer (C2C), dynamic trading processes, dynamic value chains, and virtual organizations.

A workflow is an abstraction of a business process, comprising a series of logical steps (tasks or activities), dependencies among tasks, routing rules, and participants. In a workflow, a task can represent a human activity or a software system. The emerging need for workflows to model e-service applications makes it essential that workflow tasks be associated with web services. As a result, research is currently being conducted to enhance workflow systems in their support and management of web services (Shegalov et al., 2001).

The modeling of e-services using workflows raises two challenges for workflow systems:
1. **Discovery**: Web services must be located that contain both the desired functionality and the operational requirements needed to carry out a given task. It is necessary to efficiently discover web services from the potentially thousands of services available on the Internet.
2. **Interoperability**: Once the desired web services are found, mechanisms are needed to resolve structural and semantic differences. This is because the heterogeneous web services found in the first step need to interoperate with other components in the workflow host.

### 1.1 Traditional Workflow Design
The design of traditional workflow applications involves selecting appropriate tasks with the desired functionality to compose a workflow and establish connections among these tasks (control and data flow). Tasks are selected from a workflow repository, which typically contains only tens to a few hundred tasks. Since the number of tasks to choose from is modest, the process is manageable without sophisticated search or discovery mechanisms. However, when a workflow is employed to model e-services, the potential number of web services available for the composition process can be extremely large. In this case, one cannot expect a designer to manually browse through all the available web services and select the most suitable ones.

### 1.2 Autonomy and Quality of Service (QoS)
The autonomy of web services does not allow users to identify their operational metrics at design time, i.e., before their actual execution. Operational metrics characterize web services according to their Quality of Service (QoS), which includes timeliness, quality of products delivered, cost of service, and reliability. When composing a workflow, it is indispensable to analyze and compute its overall QoS (Cardoso et al., 2002a, 2002b). This allows organizations to translate their vision into their business processes more efficiently, as workflows can be designed according to QoS metrics. The management of QoS directly impacts the success of organizations participating in electronic activities. To achieve this objective, one of the first steps is to develop an adequate QoS model for workflow processes, tasks, and web services. Such a model will allow for the discovery of web services and the composition of workflows based on operational requirements.

### 1.3 Interoperability Challenges
Numerous information interoperability problems that the composition of workflows involving web services face are already well-known within the distributed database systems community (Kashyap and Sheth, 1996; Calvanese et al., 1998). To achieve interoperability, it is necessary to address the problem of semantic integration—the identification of semantically similar objects that belong to different systems and the resolution of their schematic differences (Kashyap and Sheth, 1996). When tasks and web services are combined, their interfaces (inputs and outputs) need to interoperate; therefore, structural and semantic heterogeneity needs to be resolved. Structural heterogeneity exists because web services use different data structures and class hierarchies to define the parameters of their interfaces. Semantic conflicts occur when a web service output connected to another service or task input does not use the same interpretation of the information being transferred. The general approach to semantic integration has been to map local terms onto a shared ontology. Although a shared ontology ensures total integration, constructing such an ontology has been costly, if not impractical. Autonomous systems are required to commit to a shared ontology, and compromises are difficult to maintain when new concepts are added (Rodríguez and Egenhofer, 2002). Recently, however, significant progress is being made to deal with issues of ontology evolution/management (Gandon, 2002) and multi-ontology environments (Mena et al., 1996; Kashyap and Sheth, 1996; Fonseca, 2001), leading to increased momentum in developing and applying ontologies.

### 1.4 Motivation and Approach
The main motivation for our work is the need to enhance workflow systems with better mechanisms for e-service composition. More precisely, we target the development of new mechanisms for web services discovery and integration. Our method is novel and provides a multidimensional approach to web service discovery and integration using syntactic, semantic, and operational metrics of web services (Figure 1).

In this paper, we describe the composition process of e-workflows and present an algorithm to be employed when designers need to add web services to an e-workflow. E-services can be orchestrated with hard-coded applications or by using workflows. We call a workflow that manages e-services and possibly traditional workflow tasks an e-workflow. Our approach relies on the use of ontologies to describe workflow tasks and web service interfaces. This work is part of the METEOR-S project, which builds on our earlier experiences in developing the METEOR workflow management system with the emerging web services and Semantic Web technologies to support the next generation of Semantic Web Processes.

The discovery and integration of web services into e-workflows have specific requirements and challenges compared to previous work on information retrieval systems and information integration systems. In this paper, we describe a methodology with the aim to provide a solution to the following objectives and issues:
- **Increase the precision of the discovery process**: The search should be based not only on syntactic information but also on web services' operational metrics and semantics.
- **Represent tasks and web services' operational metrics**: Using a suitable model to describe QoS metrics (Cardoso et al., 2002a).
- **Enable the automatic determination of the degree of integration**: Of the discovered web services and a workflow host.
- **Address the polarity of schemas**: The integration of web services differs from previous work on schema integration due to the polarity of the schemas that must be integrated. The polarity of the schema forces an output schema to be connected to an input schema. The input schema (ns_i) of a new task needs to be integrated with one or more output schemas (s_o,r) of the tasks connected to it ({s_o,1, s_o,2, ..., s_o,n} → ns_i). The output schema (ns_o) of the new task needs to be integrated with one or more input schemas (s_i,r) of the tasks it connects to (ns_o → {s_i,1, s_i,2, ..., s_i,n}). This process does not require full integration of the schema {s_o,1, s_o,2, ..., s_o,n} with the schema ns_i. Only the input schema ns_i needs to have its schema fully integrated, i.e., in order to work properly, all its (mandatory) inputs need to be mapped to an output belonging to one of the schemas s_o,r. For the integration of the output schema so, the schemas {s_i,1, s_i,2, ..., s_i,n} are the ones that need to be fully integrated.
- **Previous work on web service discovery**: (Paolucci et al., 2002) does not address the interoperability problem or heterogeneity of related ontologies.

### 2. Scenario
A designer is composing an e-workflow to automatically manage the approval of travel authorization requests to conferences. A partial view of the workflow design is illustrated in Figure 2.

The e-workflow operates as follows: When an employee desires to attend a conference, they initialize an instance of the travel authorization request e-workflow. The first part of the e-workflow is the approval process, represented by the letter 'A' in the figure. The approval process allows managers to decide if an employee’s request will be approved (this portion of the workflow is hidden for brevity to reduce complexity). If the managers approve the request, the next tasks to be executed are Get Conference Information, Get User Information, Travel Reservation, and Hotel Reservation. The Get Conference Information task is responsible for obtaining the date, duration, and city where the conference is being held, based on the conference name. To obtain this information, a web service is chosen and linked to a workflow task. The Get User Information task retrieves the employee’s name and address based on their ID. The Travel Reservation task is responsible for making a travel reservation according to the conference date, duration, and city, and is also based on the employee’s personal information. Finally, the Hotel Reservation task makes the necessary hotel reservation based on the travel itinerary.

Once the tasks involved with the travel and hotel reservation are executed, the portion of the e-workflow represented by the letter 'B' is executed. This part of the e-workflow is responsible for notifying the user of the travel arrangements made for them.

Assume that the designer has already placed the tasks shown in Figure 2 on the canvas. The e-workflow is almost complete, with only the Travel Reservation task realization missing. The designer manually looks for an appropriate web service by browsing the Internet. This process is time-consuming, cumbersome, and tedious. Potentially tens or hundreds of thousands of online web services may be available, with only a few providing the desired functionality and operational metrics. Furthermore, once a suitable web service is found, it needs to be integrated with the tasks already placed in the workflow. The designer needs to manually establish data connections among the new web service and the tasks already present in the e-workflow, accounting for structural and semantic differences.

### 2.1 E-Workflow Composition Problems
In the previous scenario, the workflow designer faces two problems:
1. **Locating a web service** with the desired functionality and operational metrics to accomplish a specific task.
2. **Resolving the structural and semantic differences** between the services found and the tasks and web services to which it will be connected (using transitions).

We cannot expect a designer to discover a web service manually, as potentially thousands of services are available on the Internet. Thus, efficient discovery mechanisms must be available. What makes the e-service vision attractive is the ability to automatically discover the e-services that fulfill users’ needs (Casati et al., 2001). The discovery of a web service cannot only be based on its name or description; it also has to account for its operational metrics and interfaces.

The composition of e-workflows cannot ignore the importance of operational metrics. Trading agreements between suppliers and customers modeled with e-workflows include the specification of QoS items such as products or services to be delivered, deadlines, quality of products, and cost of service. The correct management of such specifications directly impacts the success of organizations participating in e-commerce and also directly impacts the success and evolution of e-services themselves.

Web services can be seen as black boxes, with an input interface and an output interface. When integrated into an e-workflow, a web service must interoperate at the interface level with adjacent tasks. Therefore, the discovery also has to be based on the structural and semantic properties of its inputs and outputs. Once a web service is found, it is not realistic to expect that its interfaces will perfectly match and interoperate with the hosting e-workflow without additional work. Web services are inherently heterogeneous, and we expect the designer will need to manually establish connections among the web service interfaces and the tasks present in an e-workflow. In our example, the designer is faced with the problems of manually establishing these connections.