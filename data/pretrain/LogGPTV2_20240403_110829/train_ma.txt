value of file descriptor owner.
.tp
.b f_getsig
value of signal sent when read or write becomes possible, or zero
for traditional
.b sigio
behavior.
.tp
.br f_getpipe_sz ", " f_setpipe_sz
the pipe capacity.
.tp
.br f_get_seals
a bit mask identifying the seals that have been set
for the inode referred to by
.ir fd .
.tp
all other commands
zero.
.pp
on error, \-1 is returned, and
.i errno
is set to indicate the error.
.sh errors
.tp
.br eacces " or " eagain
operation is prohibited by locks held by other processes.
.tp
.b eagain
the operation is prohibited because the file has been memory-mapped by
another process.
.tp
.b ebadf
.i fd
is not an open file descriptor
.tp
.b ebadf
.i cmd
is
.b f_setlk
or
.b f_setlkw
and the file descriptor open mode doesn't match with the
type of lock requested.
.tp
.br ebusy
.i cmd
is
.br f_setpipe_sz
and the new pipe capacity specified in
.i arg
is smaller than the amount of buffer space currently
used to store data in the pipe.
.tp
.b ebusy
.i cmd
is
.br f_add_seals ,
.ir arg
includes
.br f_seal_write ,
and there exists a writable, shared mapping on the file referred to by
.ir fd .
.tp
.b edeadlk
it was detected that the specified
.b f_setlkw
command would cause a deadlock.
.tp
.b efault
.i lock
is outside your accessible address space.
.tp
.b eintr
.i cmd
is
.br f_setlkw
or
.br f_ofd_setlkw
and the operation was interrupted by a signal; see
.br signal (7).
.tp
.b eintr
.i cmd
is
.br f_getlk ,
.br f_setlk ,
.br f_ofd_getlk ,
or
.br f_ofd_setlk ,
and the operation was interrupted by a signal before the lock was checked or
acquired.
most likely when locking a remote file (e.g., locking over
nfs), but can sometimes happen locally.
.tp
.b einval
the value specified in
.i cmd
is not recognized by this kernel.
.tp
.b einval
.i cmd
is
.br f_add_seals
and
.i arg
includes an unrecognized sealing bit.
.tp
.br einval
.i cmd
is
.br f_add_seals
or
.br f_get_seals
and the filesystem containing the inode referred to by
.i fd
does not support sealing.
.tp
.b einval
.i cmd
is
.br f_dupfd
and
.i arg
is negative or is greater than the maximum allowable value
(see the discussion of
.br rlimit_nofile
in
.br getrlimit (2)).
.tp
.b einval
.i cmd
is
.br f_setsig
and
.i arg
is not an allowable signal number.
.tp
.b einval
.i cmd
is
.br f_ofd_setlk ,
.br f_ofd_setlkw ,
or
.br f_ofd_getlk ,
and
.i l_pid
was not specified as zero.
.tp
.b emfile
.i cmd
is
.br f_dupfd
and the per-process limit on the number of open file descriptors
has been reached.
.tp
.b enolck
too many segment locks open, lock table is full, or a remote locking
protocol failed (e.g., locking over nfs).
.tp
.b enotdir
.b f_notify
was specified in
.ir cmd ,
but
.ir fd
does not refer to a directory.
.tp
.br eperm
.i cmd
is
.br f_setpipe_sz
and the soft or hard user pipe limit has been reached; see
.br pipe (7).
.tp
.b eperm
attempted to clear the
.b o_append
flag on a file that has the append-only attribute set.
.tp
.b eperm
.i cmd
was
.br f_add_seals ,
but
.i fd
was not open for writing
or the current set of seals on the file already includes
.br f_seal_seal .
.sh conforming to
svr4, 4.3bsd, posix.1-2001.
only the operations
.br f_dupfd ,
.br f_getfd ,
.br f_setfd ,
.br f_getfl ,
.br f_setfl ,
.br f_getlk ,
.br f_setlk ,
and
.br f_setlkw
are specified in posix.1-2001.
.pp
.br f_getown
and
.b f_setown
are specified in posix.1-2001.
(to get their definitions, define either
.\" .br _bsd_source ,
.\" or
.br _xopen_source
with the value 500 or greater, or
.br _posix_c_source
with the value 200809l or greater.)
.pp
.b f_dupfd_cloexec
is specified in posix.1-2008.
(to get this definition, define
.b _posix_c_source
with the value 200809l or greater, or
.b _xopen_source
with the value 700 or greater.)
.pp
.br f_getown_ex ,
.br f_setown_ex ,
.br f_setpipe_sz ,
.br f_getpipe_sz ,
.br f_getsig ,
.br f_setsig ,
.br f_notify ,
.br f_getlease ,
and
.b f_setlease
are linux-specific.
(define the
.b _gnu_source
macro to obtain these definitions.)
.\" .pp
.\" svr4 documents additional eio, enolink and eoverflow error conditions.
.pp
.br f_ofd_setlk ,
.br f_ofd_setlkw ,
and
.br f_ofd_getlk
are linux-specific (and one must define
.br _gnu_source
to obtain their definitions),
but work is being done to have them included in the next version of posix.1.
.pp
.br f_add_seals
and
.br f_get_seals
are linux-specific.
.\" fixme . once glibc adds support, add a note about ftm requirements
.sh notes
the errors returned by
.br dup2 (2)
are different from those returned by
.br f_dupfd .
.\"
.ss file locking
the original linux
.br fcntl ()
system call was not designed to handle large file offsets
(in the
.i flock
structure).
consequently, an
.br fcntl64 ()
system call was added in linux 2.4.
the newer system call employs a different structure for file locking,
.ir flock64 ,
and corresponding commands,
.br f_getlk64 ,
.br f_setlk64 ,
and
.br f_setlkw64 .
however, these details can be ignored by applications using glibc, whose
.br fcntl ()
wrapper function transparently employs the more recent system call
where it is available.
.\"
.ss record locks
since kernel 2.0, there is no interaction between the types of lock
placed by
.br flock (2)
and
.br fcntl ().
.pp
several systems have more fields in
.i "struct flock"
such as, for example,
.ir l_sysid
(to identify the machine where the lock is held).
.\" e.g., solaris 8 documents this field in fcntl(2), and irix 6.5
.\" documents it in fcntl(5).  mtk, may 2007
.\" also, freebsd documents it (apr 2014).
clearly,
.i l_pid
alone is not going to be very useful if the process holding the lock
may live on a different machine;
on linux, while present on some architectures (such as mips32),
this field is not used.
.pp
the original linux
.br fcntl ()
system call was not designed to handle large file offsets
(in the
.i flock
structure).
consequently, an
.br fcntl64 ()
system call was added in linux 2.4.
the newer system call employs a different structure for file locking,
.ir flock64 ,
and corresponding commands,
.br f_getlk64 ,
.br f_setlk64 ,
and
.br f_setlkw64 .
however, these details can be ignored by applications using glibc, whose
.br fcntl ()
wrapper function transparently employs the more recent system call
where it is available.
.ss record locking and nfs
before linux 3.12, if an nfsv4 client
loses contact with the server for a period of time
(defined as more than 90 seconds with no communication),
.\"
.\" neil brown: with nfsv3 the failure mode is the reverse.  if
.\"     the server loses contact with a client then any lock stays in place
.\"     indefinitely ("why can't i read my mail"... i remember it well).
.\"
it might lose and regain a lock without ever being aware of the fact.
(the period of time after which contact is assumed lost is known as
the nfsv4 leasetime.
on a linux nfs server, this can be determined by looking at
.ir /proc/fs/nfsd/nfsv4leasetime ,
which expresses the period in seconds.
the default value for this file is 90.)
.\"
.\" jeff layton:
.\"     note that this is not a firm timeout. the server runs a job
.\"     periodically to clean out expired stateful objects, and it's likely
.\"     that there is some time (maybe even up to another whole lease period)
.\"     between when the timeout expires and the job actually runs. if the
.\"     client gets a renew in there within that window, its lease will be
.\"     renewed and its state preserved.
.\"
this scenario potentially risks data corruption,
since another process might acquire a lock in the intervening period
and perform file i/o.
.pp
since linux 3.12,
.\" commit ef1820f9be27b6ad158f433ab38002ab8131db4d
if an nfsv4 client loses contact with the server,
any i/o to the file by a process which "thinks" it holds
a lock will fail until that process closes and reopens the file.
a kernel parameter,
.ir nfs.recover_lost_locks ,
can be set to 1 to obtain the pre-3.12 behavior,
whereby the client will attempt to recover lost locks
when contact is reestablished with the server.
because of the attendant risk of data corruption,
.\" commit f6de7a39c181dfb8a2c534661a53c73afb3081cd
this parameter defaults to 0 (disabled).
.sh bugs
.ss f_setfl
it is not possible to use
.br f_setfl
to change the state of the
.br o_dsync
and
.br o_sync
flags.
.\" fixme . according to posix.1-2001, o_sync should also be modifiable
.\" via fcntl(2), but currently linux does not permit this
.\" see http://bugzilla.kernel.org/show_bug.cgi?id=5994
attempts to change the state of these flags are silently ignored.
.ss f_getown
a limitation of the linux system call conventions on some
architectures (notably i386) means that if a (negative)
process group id to be returned by
.b f_getown
falls in the range \-1 to \-4095, then the return value is wrongly
interpreted by glibc as an error in the system call;
.\" glibc source: sysdeps/unix/sysv/linux/i386/sysdep.h
that is, the return value of
.br fcntl ()
will be \-1, and
.i errno
will contain the (positive) process group id.
the linux-specific
.br f_getown_ex
operation avoids this problem.
.\" mtk, dec 04: some limited testing on alpha and ia64 seems to
.\" indicate that any negative pgid value will cause f_getown
.\" to misinterpret the return as an error. some other architectures
.\" seem to have the same range check as i386.
since glibc version 2.11, glibc makes the kernel
.b f_getown
problem invisible by implementing
.b f_getown
using
.br f_getown_ex .
.ss f_setown
in linux 2.4 and earlier, there is bug that can occur
when an unprivileged process uses
.b f_setown
to specify the owner
of a socket file descriptor
as a process (group) other than the caller.
in this case,
.br fcntl ()
can return \-1 with
.i errno
set to
.br eperm ,
even when the owner process (group) is one that the caller
has permission to send signals to.
despite this error return, the file descriptor owner is set,
and signals will be sent to the owner.
.\"
.ss deadlock detection
the deadlock-detection algorithm employed by the kernel when dealing with
.br f_setlkw
requests can yield both
false negatives (failures to detect deadlocks,
leaving a set of deadlocked processes blocked indefinitely)
and false positives
.rb ( edeadlk
errors when there is no deadlock).
for example,
the kernel limits the lock depth of its dependency search to 10 steps,
meaning that circular deadlock chains that exceed
that size will not be detected.
in addition, the kernel may falsely indicate a deadlock
when two or more processes created using the
.br clone (2)
.b clone_files
flag place locks that appear (to the kernel) to conflict.
.\"
.ss mandatory locking
the linux implementation of mandatory locking
is subject to race conditions which render it unreliable:
.\" http://marc.info/?l=linux-kernel&m=119013491707153&w=2
.\"
.\" reconfirmed by jeff layton
.\"     from: jeff layton  redhat.com>
.\"     subject: re: status of fcntl() mandatory locking
.\"     newsgroups: gmane.linux.file-systems
.\"     date: 2014-04-28 10:07:57 gmt
.\"     http://thread.gmane.org/gmane.linux.file-systems/84481/focus=84518
a
.br write (2)
call that overlaps with a lock may modify data after the mandatory lock is
acquired;
a
.br read (2)
call that overlaps with a lock may detect changes to data that were made
only after a write lock was acquired.
similar races exist between mandatory locks and
.br mmap (2).
it is therefore inadvisable to rely on mandatory locking.
.sh see also
.br dup2 (2),
.br flock (2),
.br open (2),
.br socket (2),
.br lockf (3),
.br capabilities (7),
.br feature_test_macros (7),
.br lslocks (8)
.pp
.ir locks.txt ,
.ir mandatory\-locking.txt ,
and
.i dnotify.txt
in the linux kernel source directory
.ir documentation/filesystems/
(on older kernels, these files are directly under the
.i documentation/
directory, and
.i mandatory\-locking.txt
is called
.ir mandatory.txt )
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/getutent.3
.\" copyright 2000 sam varshavchik 
.\" and copyright (c) 2008 michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" references: rfc 2553
.th inet_pton 3 2021-03-22 "linux" "linux programmer's manual"
.sh name
inet_pton \- convert ipv4 and ipv6 addresses from text to binary form
.sh synopsis
.nf
.b #include 
.pp
.bi "int inet_pton(int " af ", const char *restrict " src \
", void *restrict " dst );
.fi
.sh description
this function converts the character string
.i src
into a network address structure in the
.i af
address family, then
copies
the network address structure to
.ir dst .
the
.i af
argument must be either
.b af_inet
or
.br af_inet6 .
.ir dst
is written in network byte order.
.pp
the following address families are currently supported:
.tp
.b af_inet
.i src