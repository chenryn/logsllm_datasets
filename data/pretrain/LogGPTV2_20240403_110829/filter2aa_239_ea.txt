            response = $"{STATUSOK}{SEPARATOR}{SESSIONID}{SEPARATOR}" +
              $"{sessionId}{SEPARATOR}{content}";
            break;
          case ParseResponse.CLOSE:
            response = $"{STATUSCLOSED}";
            completed = true;
            break;
          case ParseResponse.TIMEOUT:
            response = $"{STATUSTIMEOUT}";
            break;
          case ParseResponse.ERROR:
            response = $"{STATUSINVALID}";
            break;
          default:
            break;
              }
              writeBuffer = Encoding.ASCII.GetBytes(response);
              await stream.WriteAsync(writeBuffer, 0, writeBuffer.Length);
              await stream.FlushAsync();
              WriteLine($"returned {Encoding.ASCII.GetString(
            writeBuffer, 0, writeBuffer.Length)}");
            } while (! completed);
          }
        }
        }
        catch (Exception ex)
        {
        WriteLine($"Exception in client request handling " +
            "of type {ex.GetType().Name}, Message: {ex.Message}");
        }
        WriteLine("client disconnected");
      });
    }
ParseRequest方法解析请求，并过滤掉会话标识符。server （HELO）的第一个调用是
不从客户端传递会话标识符的唯一调用，它是使用SessionManager创建的。在第二个和后
来的请求中，requestColl[0]必须包含ID, 
requestColl[1]必须包含会话标识符。使用这个标
识符，如果会话仍然是有效的，TouchSession方法就更新会话标识符的当前时间。如果无
效，就返回超时。对于服务的功能，调用ProcessRequest方法：
    private ParseResponse ParseRequest(string request, out string sessionId,
        out string response)
    {
      sessionId = string.Empty;
      response = string.Empty;
      string[] requestColl = request.Split(
        new string[] { SEPARATOR }, StringSplitOptions.RemoveEmptyEntries);
      if (requestColl[0] == COMMANDHELO)  // first request
      {
        sessionId = _sessionManager.CreateSession();
      }
      else if (requestColl[0] == SESSIONID)  // any other valid request
      {
        sessionId = requestColl[1];
        if (! _sessionManager.TouchSession(sessionId))
        {
        return ParseResponse.TIMEOUT;
        }
        if (requestColl[2] == COMMANDBYE)
        {
        return ParseResponse.CLOSE;
        }
        if (requestColl.Length >= 4)
        {
        response = ProcessRequest(requestColl);
        }
      }
      else
      {
        return ParseResponse.ERROR;
      }
      return ParseResponse.OK;
    }
ProcessRequest方法包含一个switch语句，来处理不同的请求。这个方法使用
CommandActions类来回应或反向传递收到的消息。为了存储和检索会话状态，使用
SessionManager：
    private string ProcessRequest(string[] requestColl)
    {
      if (requestColl.Length  string.Join("", action.Reverse());
      public string Echo(string action) => action;
    }
用Echo和Reverse方法检查服务器的主要功能后，就要进行会话管理了。服务器上需
要一个标识符和上次访问会话的时间，以删除最古老的会话（代码文件TcpServer 
/
SessionManager.cs）:
    public struct Session
    {
      public string SessionId { get; set; }
      public DateTime LastAccessTime { get; set; }
    }
SessionManager包含线程安全的字典，其中存储了所有的会话和会话数据。使用多个
客户端时，字典可以在多个线程中同时访问。所以使用名称空间
System.Collections.Concurrent中线程安全的字典。CreateSession方法创建一个新的会话，
并将其添加到_sessions字典中：
    public class SessionManager
    {
      private readonly ConcurrentDictionary _sessions =
        new ConcurrentDictionary();
      private readonly ConcurrentDictionary>
        _sessionData =
        new ConcurrentDictionary>();
      public string CreateSession()
      {
        string sessionId = Guid.NewGuid().ToString();
        if (_sessions.TryAdd(sessionId,
          new Session
          {
            SessionId = sessionId,
            LastAccessTime = DateTime.UtcNow
          }))
        {
          return sessionId;
        }
        else
        {
          return string.Empty;
        }
      }
      //...
    }
从计时器线程中，CleanupAllSessions方法每分钟调用一次，删除最近没有使用的所
有会话。该方法又调用CleanupSession，删除单个会话。客户端发送BYE信息时也调用
CleanupSession：
    public void CleanupAllSessions()
    {
      foreach (var session in _sessions)
      {
        if (session.Value.LastAccessTime + SessionTimeout >= DateTime.UtcNow)
        {
        CleanupSession(session.Key);
        }
      }
    }
    public void CleanupSession(string sessionId)
    {
      Dictionary removed;
      if (_sessionData.TryRemove(sessionId, out removed))
      {
        WriteLine($"removed {sessionId} from session data");
      }
      Session header;
      if (_sessions.TryRemove(sessionId, out header))
      {
        WriteLine($"removed {sessionId} from sessions");
      }
    }
TouchSession方法更新会话的LastAccessTime，如果会话不再有效，就返回false：
    public bool TouchSession(string sessionId)
    {
      Session oldHeader;
      if (! _sessions.TryGetValue(sessionId, out oldHeader))
      {
        return false;
      }
      Session updatedHeader = oldHeader;
      updatedHeader.LastAccessTime = DateTime.UtcNow;
      _sessions.TryUpdate(sessionId, updatedHeader, oldHeader);
      return true;
    }
为了设置会话数据，需要解析请求。会话数据接收的动作包含由等号分隔的键和值，
如x= 42。ParseSessionData方法解析它，进而调用SetSessionData方法：
    public string ParseSessionData(string sessionId, string requestAction)
    {
      string[] sessionData = requestAction.Split('=');
      if (sessionData.Length ! = 2) return STATUSUNKNOWN;
      string key = sessionData[0];
      string value = sessionData[1];
      SetSessionData(sessionId, key, value);
      return $"{key}={value}";
    }
SetSessionData添加或更新字典中的会话状态。GetSessionData检索值，或返回
NOTFOUND：
      public void SetSessionData(string sessionId, string key, string value)
      {
        Dictionary data;
        if (! _sessionData.TryGetValue(sessionId, out data))
        {
          data = new Dictionary();
          data.Add(key, value);
          _sessionData.TryAdd(sessionId, data);
        }
        else
        {
          string val;
          if (data.TryGetValue(key, out val))
          {
          data.Remove(key);
          }
          data.Add(key, value);
        }
      }
      public string GetSessionData(string sessionId, string key)
      {
        Dictionary data;
        if (_sessionData.TryGetValue(sessionId, out data))
        {
          string value;
          if (data.TryGetValue(key, out value))
          {
          return value;
          }
        }
        return STATUSNOTFOUND;
      }
编译侦听器后，可以启动程序。现在，需要一个客户端，以连接到服务器。
25.5.3 创建TCP客户端
客户端示例是一个WPF桌面应用程序WPFAppTCPClient。这个应用程序允许连接到
TCP服务器，发送自定义协议支持的所有不同命令。
  注意： 撰写本书时，TcpClient类不可用于Windows应用程序。可以使用套接
字类（参见本章后面的内容），访问这个TCP服务器。
应用程序的用户界面如图25-4所示。左上部分允许连接到服务器。右上部分的组合框
列出了所有命令，Send按钮向服务器发送命令。在中间部分，显示会话标识符和所发送请
求的状态。下部的控件显示服务器接收到的信息，允许清理这些信息。
图25-4
类CustomProtocolCommand和CustomProtocolCommands用于用户界面中的数据绑定。
对于CustomProtocolCommand, Name属性显示命令的名称，Action属性是用户输入的、与
命令一起发送的数据。类CustomProtocolCommands包含一个绑定到组合框的命令列表
（代码文件WPFAppTcpClient/ CustomProtocolCommands.cs）：
    public class CustomProtocolCommand
    {
      public CustomProtocolCommand(string name)
          : this(name, null)
      {
      }
      public CustomProtocolCommand(string name, string action)
      {
        Name = name;
        Action = action;
      }
      public string Name { get; }
      public string Action { get; set; }
      public override string ToString() => Name;
    }
    public class CustomProtocolCommands : IEnumerable
    {
      private readonly List _commands =
          new List();
      public CustomProtocolCommands()
      {
        string[] commands = { "HELO", "BYE", "SET", "GET", "ECO", "REV" };
        foreach (var command in commands)
        {
          _commands.Add(new CustomProtocolCommand(command));
        }
        _commands.Single(c => c.Name == "HELO").Action = "v1.0";
      }
      public IEnumerator GetEnumerator() =>
          _commands.GetEnumerator();
      IEnumerator IEnumerable.GetEnumerator() => _commands.GetEnumerator();
    }
MainWindow类包含绑定到XAML代码的属性和基于用户交互调用的方法。这个类创
建TcpClient类的一个实例和一些绑定到用户界面的属性。
    public partial class MainWindow : Window, INotifyPropertyChanged, IDisposable
    {
      private TcpClient _client = new TcpClient();
      private readonly CustomProtocolCommands _commands =
        new CustomProtocolCommands();