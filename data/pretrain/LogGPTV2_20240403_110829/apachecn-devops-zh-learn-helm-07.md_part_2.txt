![Figure 7.3 – The values.yaml file for the Jenkins Helm chart contains Go templating](img/Figure_7.3.jpg)
图 7.3–詹金斯 Helm 图表的`values.yaml`文件包含 Go 模板
当 Go 模板在`values.yaml`文件中通常无效时，以代码为中心的 Jenkins Helm 图表将`fileContent`配置提供给一个名为`tpl`的模板函数。模板端的简化视图如下:
```
{{- tpl .Values.fileContent }}
```
`tpl`命令将把`fileContent`值解析为围棋模板，允许它包含围棋模板，即使它是在`values.yaml`文件中定义的。
对于本章，在`fileContent`配置中定义的 Go 模板有助于确保詹金斯的安装方式符合本章的要求。也就是说，模板需要在安装过程中提供以下附加值:
*   `githubUsername`:GitHub 用户名
*   `githubPassword`:GitHub 密码
*   `githubForkUrl`:你的 Packt 存储库分叉的 URL，取自本章的*技术要求*部分
*   `githubPagesRepoUrl`:你的 GitHub Pages 掌舵库的 URL，创建于 [*第五章*](05.html#_idTextAnchor265)*构建你的第一张 Helm 图表*的末尾
请注意，这不是静态站点的网址，而是 GitHub 存储库本身的网址——例如，https://GitHub . com/$ GitHub _ USERNAME/Learn-Helm-Chart-repository . git
前面列表中描述的四个值可以使用`--set`标志提供，或者可以使用`--values`标志从附加的`values`文件提供。如果您选择创建一个单独的`values`文件，请确保您没有提交该文件并将其推送到源代码管理，因为它包含敏感信息。本章中的示例倾向于这四个值的`--set`标志。除了所描述的值之外，还应该使用`--values`标志提供 Packt 存储库中包含的`values.yaml`文件。
使用`helm install`命令安装您的`Jenkins`实例，使用以下示例作为参考:
```
$ helm install jenkins codecentric/jenkins \
  -n chapter7 --version 1.5.1 \
  --values Learn-Helm/jenkins/values.yaml \
  --set githubUsername=$GITHUB_USERNAME \
  --set githubPassword=$GITHUB_PASSWORD \
  --set githubForkUrl=https://github.com/$GITHUB_USERNAME/-Learn-Helm.git \
  --set githubPagesRepoUrl=https://github.com/$GITHUB_USERNAME/Learn-Helm-Chart-Repository.git
```
您可以通过在`chapter7`命名空间中的 Pods 上运行一个监视来监视安装:
```
$ kubectl get Pods -n chapter7 -w
```
请注意，在非常罕见的情况下，您的 Pod 可能会卡在`Init:0/1`阶段。如果外部依赖关系出现可用性问题，例如 Jenkins 插件站点及其镜像出现宕机，就会出现这种情况。如果出现这种情况，请尝试删除您的版本，并在几分钟后重新安装。
一旦你的詹金斯 Pod 在`READY`列下报告`1/1`，你的`Jenkins`实例就可以被访问了。复制并粘贴显示的安装后说明的以下内容，以显示詹金斯网址:
```
$ export NODE_PORT=$(kubectl get service --namespace chapter7 -o jsonpath='{.spec.ports[0].nodePort}' jenkins-master)
$ export NODE_IP=$(kubectl get nodes --namespace chapter7 -o jsonpath='{.items[0].status.addresses[0].address}')
echo "http://$NODE_IP:$NODE_PORT"
```
当您访问 Jenkins 时，您的首页应该类似于下面的截图:
![Figure 7.4 – The Jenkins home page after running the Helm installation ](img/Figure_7.4.jpg)
图 7.4–运行 Helm 安装后的 Jenkins 主页
如果图表安装正确，你会注意到一个名为**测试和发布 Helm 图表表**的新任务被创建。在页面的左下角，您会注意到**构建执行器状态**面板，该面板用于提供当前正在运行的活动作业的概述。作业在创建时会第一次自动触发，这就是为什么当您登录到 Jenkins 实例时会看到它正在运行。
现在已经安装了 Jenkins，并且已经验证了它的前端，让我们浏览一下来自 Packt 存储库的示例`Jenkinsfile`文件，以了解 CI 管道是如何工作的。请注意，我们不会在本章中显示`Jenkinsfile`文件的全部内容，因为我们只想突出显示感兴趣的关键领域。文件的全部内容可以在[的 Packt 存储库中查看。](https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/Jenkinsfile)
## 了解管道
触发`Test and Deploy Helm Charts`作业时发生的第一件事是创建一个新的詹金斯代理。通过利用`Learn-Helm/jenkins/values.yaml`中提供的值，詹金斯图表安装会自动配置一个名为`chart-testing-agent`的詹金斯代理。下一行指定该代理为该`Jenkinsfile`文件的代理:
```
agent { label 'chart-testing-agent' }
```
该代理由 Jenkins 图表值配置，使用 Helm 社区提供的图表测试映像运行。位于`quay.io/helmpack/chart-testing`的图表测试映像包含许多在 [*第 6 章*](06.html#_idTextAnchor292)*测试 Helm 图表表*中讨论过的工具。具体来说，此映像包含以下工具:
*   `helm`
*   `ct`
*   `yamllint`
*   `yamale`
*   `git`
*   `Kubectl`
由于此映像包含测试 Helm 图表所需的所有工具，因此可以将其用作执行 Helm 图表 CI 的主映像。
当一个 Jenkins 代理运行时，它会克隆您的 GitHub 分叉，由`githubForkUrl`值指定，使用`githubUsername`和`githubPassword`进行身份验证。这是由 Jenkins 隐式执行的，因此不需要在`Jenkinsfile`文件中指定代码来执行该操作。
在 Jenkins 代理克隆您的存储库之后，它开始执行在`Jenkinsfile`文件中定义的阶段。阶段是管道中的逻辑分组，可以帮助可视化高级步骤。将执行的第一个阶段是 lint 阶段，它包含以下命令:
```
sh 'ct lint'
```
前面命令中的`sh`部分是用于运行 bash shell 或脚本的命令，并调用`ct`工具的`lint`子命令。如您所记得的，此命令将所有针对主分支修改的图表上的`Chart.yaml`和`values.yaml`文件关联起来，我们在 [*第 6 章*](06.html#_idTextAnchor292)*测试 Helm 图表表*中介绍了这些文件。
如果林挺测试成功，管道将继续进入测试阶段，并运行以下命令:
```
sh 'ct install --upgrade'
```
这个命令看起来应该也很熟悉。它在主分支上安装每个修改过的图表版本，并执行定义的测试套件。它还确保从以前版本的任何升级都是成功的，这有助于防止倒退。
请注意，前面两个阶段可以通过运行单个`ct lint-and-install --upgrade`命令进行组合。这仍然会产生一个有效的管道，但是这个被分解成不同阶段的例子，允许更好地可视化所执行的动作。
如果测试阶段成功，管道将进入包图表阶段，执行以下命令:
```
sh 'helm package --dependency-update helm-charts/charts/*'
```
该阶段的命令将简单地打包包含在`helm-charts/charts`文件夹下的每个图表。它还将更新和下载每个声明的依赖项。
如果包装成功，管道进入最后阶段，称为`push charts to repo`。这是最复杂的阶段，所以我们将把它分成更小的步骤。第一步可以在这里看到:
```
// Clone GitHub Pages repository to a folder called 'chart-repo'
sh "git clone ${env.GITHUB_PAGES_REPO_URL} chart-repo"
// Determine if these charts should be pushed to 'stable' or 'staging' based on the branch
def repoType
if (env.BRANCH_NAME == 'master') {
  repoType = 'stable'
} else {
  repoType = 'staging'
}
// Create the corresponding 'stable' or 'staging' folder if it does not exist
def files = sh(script: 'ls chart-repo', returnStdout: true)
if (!files.contains(repoType)) {
  sh "mkdir chart-repo/${repoType}"
}
```
由于我们正在推进的 Helm 图表存储库是一个单独的 GitHub Pages 存储库，因此我们必须克隆该存储库，以便能够添加新图表并推进更改。一旦克隆了 GitHub Pages 存储库，就会设置一个名为`repoType`的变量，具体取决于 CI/CD 管道运行的分支。该变量用于确定前一阶段打包的图表是否应推送到`stable`或`staging`图表库中。
对于这个管道，`stable`意味着图表已经被测试、验证并合并到主分支中。`staging`表示该图正在开发中，尚未合并到主分支，也未正式发布。或者，当您切换到发布分支时，您可以在稳定存储库下发布图表，但是对于这个示例，我们将采用前一种方法，即假设每个合并到 master 中的都是新的发布。
`stable`和`staging`是作为两个独立的图表库；这可以通过在 GitHub Pages 存储库的顶层创建两个单独的目录来实现:
```
Learn-Helm-Repository/
  stable/
  staging/
```
然后，稳定文件夹和暂存文件夹包含它们自己的`index.yaml`文件，以将它们区分为单独的图表存储库。
为了方便起见，如果基于分支的管道执行依赖于它的存在，前面管道摘录的最后一个片段会自动创建`stable`或`staging`文件夹。
既然图表应该被推送到的存储库的类型已经确定，我们进入管道的下一个阶段，如下所示:
```
// Move charts from the packaged-charts folder to the corresponding 'stable' or 'staging' folder
sh "mv packaged-charts/*.tgz chart-repo/${repoType}"
// Generate the updated index.yaml
sh "helm repo index chart-repo/${repoType}"
// Update git config details
sh "git config --global user.email 'PI:EMAIL'"
sh "git config --global user.name 'chartrepo-robot'"
```
第一个命令将前一阶段的每个打包图表复制到`stable`或`staging`文件夹中。接下来，使用`helm repo index`命令更新`stable`或`staging` `index.yaml`文件，以反映更改或添加的图表。
需要记住的一点是如果我们使用不同的图表存储库解决方案，例如**ChartMuseum**(Helm 社区维护的图表存储库解决方案)，则不需要`helm repo index`命令，因为当 chart museum 收到新的打包 Helm 图表时，`index.yaml`文件会自动更新。对于不自动计算`index.yaml`文件的实现，比如 GitHub Pages，`helm repo index`命令是必要的，正如我们在这个管道中看到的。
前面代码片段的最后两个命令设置了`git` `username`和`email`，这两个命令是将内容推送到`git`存储库所必需的。在本例中，我们将用户名设置为`chartrepo-robot`，以表明 CI/CD 流程促进了`git`交互；我们将电子邮件设置为 作为示例值。您可能希望电子邮件代表负责维护图表存储库的组织。
最后一步是推动变革。此操作在最终的管道片段中捕获，如下所示:
```
// Add and commit the changes
sh 'git add --all'
sh "git commit -m 'pushing charts from branch ${env.BRANCH_NAME}'"
withCredentials([usernameColonPassword(credentialsId: 'github-auth', variable: 'USERPASS')]) {
    script {
    // Inject GitHub auth and push to the master branch, where the charts are being served
    def authRepo = env.GITHUB_PAGES_REPO_URL.replace('://', "://${USERPASS}@")
    sh "git push ${authRepo} master"
    }
}
```
首先使用`git add`和`git commit`命令添加和提交打包的图表。接下来，使用名为`github-auth`的凭证，通过`git push`命令执行对存储库的推送。该凭证是在安装期间根据`githubUsername`和`githubPassword`值创建的。`github-auth`凭证允许您安全地引用这些机密，而无需在管道代码中以明文打印它们。
请注意，Helm 社区已经发布了一个名为`Chart Releaser`([https://github.com/helm/chart-releaser](https://github.com/helm/chart-releaser))的工具，该工具可以替代使用`helm repo index`命令生成`index.yaml`文件并使用`git push`将其上传到 GitHub。`Chart Releaser`工具旨在通过管理 GitHub Pages 中包含的 Helm 图表来抽象一些额外的复杂性。
然而，在本章中，我们决定不使用这个工具来实现管道，因为`Chart Releaser`不支持 Helm 3(在编写本文时)。
既然我们已经提供了配置项管道的概述，让我们通过一个示例执行来运行。
## 运行管道