inner
module
不同于 global 运⾏期⾏为，nonlocal 要求在编译期绑定，所以⽬标须提前存在。
>>> def inner():
nonlocal x
SyntaxError: no binding for nonlocal 'x' found
>>> def outer():
def inner():
nonlocal x
SyntaxError: no binding for nonlocal 'x' found
作为写操作的赋值，其规则与读操作 LEGB 完全不同，注意区别对待。
!108
学习笔记 . 第三版
3. 运算符
相⽐其他语⾔，Python 运算符更接近⾃然表达⽅式。也正因如此，优先级导致的错误更加
隐蔽，不易察觉和排除。
看下⾯⽰例，即便⽤括号调整优先级，也很难发现是否存在缺陷。
>>> not "a" in ["a", 1] # 谁先谁后？
False
>>> (not "a") in ["a", 1] # not 先？
False
>>> not ("a" in ["a", 1]) # in 先？看不不出来。
False
可⼀旦数据变化，其结果就可能不同。除⾮测试数据完整覆盖，否则导致带病上线。
>>> not "a" in [1]
True
>>> (not "a") in [1]
False
>>> not ("a" in [1])
True
该⽰例也提⽰我们，适当使⽤括号，不但可避免隐蔽错误，还能提⾼代码可读性。
X*Y, X/Y, X//Y, X%Y X if Y else Z
(...) X**Y X>Y not
==, !=
{...} func()
X^Y
-X, +X is, is not or
yield
高 低
X[:] ~X X&Y X|Y in, not in lambda
[...]
X+Y, X-Y and
X.attr X[i] , >=
!109
学习笔记 . 第三版
每个运算符都有对应函数（⽅法）实现，可像普通函数那样作为逻辑传递。当然，⽤动态
执⾏也未尝不可。
def calc(x, y, op):
return op(x, y)
>>> import operator
>>> calc(1, 2, operator.add)
3
>>> calc(1, 2, operator.mul)
2
不仅仅是数学运算符，operator 还有 itemgetter、attrgetter 等⽤于索引和成员访问函数。
除此之外，还可⽤标准库提供的辅助函数，简化⾃定义类型运算符重载代码。
使⽤ functools.total_order 装饰器，基于 __eq__、__lt__ ⽅法，补全剩余⽐较⽅法。
@functools.total_ordering
class X:
def __init__(self, n):
self.n = n
def __eq__(self, o):
return self.n == o.n
def __lt__(self, o):
return self.n >> a, b = X(1), X(2)
>>> a >> a >= b
False
!110
学习笔记 . 第三版
Python 3 对运算符做了些调整。
• 移除 “<>”，统⼀使⽤ “!=” 运算符。
• 移除 cmp 函数，⾃⾏重载相关运算符⽅法。
• 除法 “/” 表⽰ True Division，总是返回浮点数。
• 不再⽀持反引号 repr 操作，调⽤同名函数。
• 不再⽀持⾮数字类型混合⽐较，可⾃定义相关⽅法。
• 不再⽀持字典相等以外的⽐较操作。
3.1 链式比较
链式⽐较（chained comparison）将多个⽐较表达式组合到⼀起，更符合⼈类阅读习惯，
⽽⾮⾯向机器。该⽅式可有效缩短代码，并稍稍提升性能。
>>> a, b = 2, 3
>>> a > 0 and b > a and b >> 0 >> dis.dis(compile("1 > 14 RETURN_VALUE
>>> dis.dis(compile("1 > 18 ROT_TWO
20 POP_TOP
22 RETURN_VALUE
显然，链式⽐较减少了载⼊指令，更多基于栈数据复制和交换。仅凭这点，其执⾏性能就
有所提⾼。但整体上看，这点改善远不如代码可读性和可维护性吸引⼈。
3.2 切片
切⽚（slice）⽤以表达序列对象的某个⽚段（或整体），其具体⾏为与其在出现在语句中
的位置有关。当以右值出现时，复制序列数据；⽽左值则表达要操控的⽬标范围。
>>> x = [0, 1, 2, 3, 4, 5, 6]
>>> s = x[2:5] # 从列列表中复制指定范围的引⽤用。
>>> s
[2, 3, 4]
>>> x.insert(3, 100) # 对原列列表的修改，不不影响切⽚片。
>>> x
[0, 1, 2, 100, 3, 4, 5, 6]
>>> s
[2, 3, 4]
注意，列表存储的是元素对象引⽤（指针），那么复制的⾃然也是引⽤，⽽⾮元素对象。切⽚所
返回新列表与原列表除共享部分元素对象外，其他毫⽆⼲系。
x
copy references
v
s
!112
学习笔记 . 第三版
完整的切⽚操作由三个参数构成。
0 1 2 3 4 5 6
-7 -6 -5 -4 -3 -2 -1
100 101 102 103 104 105 106
x[2:5:1] [ start, stop )
[ start : stop : step ]
以起始和结束索引构成⼀个半开半闭区间（不含结束位置）。默认起始位置为 0，结束位
置 len(x)，以容纳最后⼀个元素。
>>> x = [100, 101, 102, 103, 104, 105, 106]
>>> x[2:5:1]
[102, 103, 104]
>>> x[:5] # 省略略起始索引。
[100, 101, 102, 103, 104]
>>> x[2:] # 省略略结束索引。
[102, 103, 104, 105, 106]
>>> x[:] # 完整复制。
[100, 101, 102, 103, 104, 105, 106]
可指定步进幅度，间隔选取元素。甚⾄可以是负值，从右⾄左反向⾏进。
索引 0 表⽰正向第⼀元素，所以反向索引从 -1 起始。
>>> x[2:6:2]
[102, 104]
>>> x[::2]
[100, 102, 104, 106]
!113
学习笔记 . 第三版
>>> x[::-1] # 反向步进，全部复制。
[106, 105, 104, 103, 102, 101, 100]
>>> x[5:2:-1] # 反向步进，使⽤用正索引表示起始、结束位置。
[105, 104, 103]
>>> x[-2:-5:-1] # 使⽤用负索引表达起始、结束位置。
[105, 104, 103]
除表达式外，也可使⽤ itertools.islice 函数执⾏切⽚操作。
事实上，负索引不仅⽤于切⽚，也可直接访问序列元素。
>>> (0, 1, 2)[-2]
1
>>> "abcd"[-3]
'b'
删除
⽤切⽚指定要删除的序列范围。
>>> x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> del x[3:7]
>>> x
[0, 1, 2, 7, 8, 9]
>>> x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> del x[3:7:2] # 步进删除。
>>> x
[0, 1, 2, 4, 6, 7, 8, 9]
!114
学习笔记 . 第三版
赋值
以切⽚⽅式进⾏序列局部赋值，相当于先删除，后插⼊。
>>> x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> x[3:7] = [100, 200]
>>> x
[0, 1, 2, 100, 200, 7, 8, 9]
如设定步进，则删除和插⼊元素数量必须相等。
>>> x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> x[::2] # 查看要删除的元素。
[0, 2, 4, 6, 8]
>>> x[::2] = [100, 200, 400, 600, 800] # 步进插⼊入。
>>> x
[100, 1, 200, 3, 400, 5, 600, 7, 800, 9]
>>> x[::2] = [0, 2, 4]
ValueError: attempt to assign sequence of size 3 to extended slice of size 5
>>> x[::2] = [0, 2, 4, 6, 8, 10]
ValueError: attempt to assign sequence of size 6 to extended slice of size 5
3.3 逻辑运算
逻辑运算⽤于判断多个条件的布尔结果，或返回有效操作数。
分别以 and、or、not 运算符表⽰逻辑与、或、⾮三种关系。
其中 and 返回最后，或导致短路的操作数；or 返回第⼀真值，或最后操作数。
>>> 1 and 2 # 最后操作数。
2
!115
学习笔记 . 第三版
>>> 1 and 0 and 2 # 导致短路路的操作数。
0
>>> 1 or 0 # 第⼀一真值。
1
>>> 0 or 1 or 2 # 第⼀一真值。
1
>>> 0 or [] # 最后操作数。
[]
相同逻辑运算符⼀旦短路，后续计算被终⽌。
def x(o): # 输出执⾏行行信息。
print("op:", o)
return o
>>> x(0) and x(1) # 0 导致短路路。
op: 0
0
>>> x(1) or x(2) # 返回 1 真值，短路路。
op: 1
1
⽤反汇编可以看得更清楚些。
>>> dis.dis(compile("0 and 1 and 2 and 3", "", "eval"))
1 0 LOAD_CONST 0 (0)
2 JUMP_IF_FALSE_OR_POP 14 # 如果为 False，跳转到 14。
4 LOAD_CONST 1 (1)
6 JUMP_IF_FALSE_OR_POP 14
8 LOAD_CONST 2 (2)
10 JUMP_IF_FALSE_OR_POP 14
12 LOAD_CONST 3 (3)
>> 14 RETURN_VALUE
>>> dis.dis(compile("1 or 2 or 3 or 4", "", "eval"))
1 0 LOAD_CONST 0 (1)
2 JUMP_IF_TRUE_OR_POP 14
!116
学习笔记 . 第三版
4 LOAD_CONST 1 (2)
6 JUMP_IF_TRUE_OR_POP 14
8 LOAD_CONST 2 (3)
10 JUMP_IF_TRUE_OR_POP 14
12 LOAD_CONST 3 (4)
>> 14 RETURN_VALUE
当然，不同运算符需多次计算。
>>> x(0) and x(1) or x(2)
op: 0
op: 2
2
>>> dis.dis(compile("0 and 1 and 2 or 9", "", "eval"))
1 0 LOAD_CONST 0 (0)
2 POP_JUMP_IF_FALSE 12 # 如果 False，跳转到 12。
4 LOAD_CONST 1 (1)
6 POP_JUMP_IF_FALSE 12
8 LOAD_CONST 2 (2)
10 JUMP_IF_TRUE_OR_POP 14
>> 12 LOAD_CONST 3 (9)
>> 14 RETURN_VALUE
条件表达式