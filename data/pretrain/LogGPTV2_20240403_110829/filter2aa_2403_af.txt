简要地说，在 IDA 显示 ARM 平台的指令时，其显示顺序为： 
 ARM 及 ARM64 模式的指令，opcode 以 4-3-2-1 的顺序显示。 
 Thumb 模式的指令，opcode 以 2-1 的顺序显示。 
 Thumb-2 模式的 16 位指令对，其 opocde 以 2-1-4-3 的顺序显示。 
在 IDA 中，我们可观察到上述 MOVW 、MOVT.W、BLX 指令都以 0xFx 开头。 
之后的“MOVW R0，#0x13D8”将立即数写到 R0 寄存器的低 16 位地址，同时清除寄存器的高 16 位。 
“MOVT.W R0, #0”的作用与前面一个例子中 Thumb 模式的 MOVT 的作用相同，只不过此处是 Thumb-2
的指令。 
在这两个例子中，最显著的区别是 Thumb-2 模式“BLX”指令。此处的 BLX 与 Thumb 模式的 BL 指
令有着根本的区别。它不仅将 puts()函数的返回地址 RA 存入了 LR 寄存器，将控制权交给了 puts()函数，
而且还把处理器从 Thumb/Thumb-2 模式调整为 ARM 模式；它同时也负责在函数退出时把处理器的运行模
式进行还原。总之，它同时实现了模式转换和控制权交接的功能，相当于执行了下面的 ARM 模式的指令： 
__symbolstub1:00003FEC _puts          ; CODE XREF: _hello_world+E 
__symbolstub1:00003FEC 44 F0 9F E5   LDR PC, =__imp__puts 
聪明的读者可能会问，此处为什么不直接调用 puts()函数？ 
直接调用的空间开销更大。 
几乎所有的程序都会用到动态链接库，详细说来 Windows 的程序基本上都会用到 DLL 文件、Linux 程
序差不多都会用到.SO 文件、MacOSX 系统的程序多数也会用到.dylib 文件。常用的库函数通常都放在动态链
接库里。本例用到的标准 C 函数——puts()函数也不例外。 
可执行的二进制文件（Windows 的 PE 可执行文件，ELF 或 Mach-O）都有一个输入表段（import section）。
输入表段声明了该程序需要通过外部模块和加载的符号链接（函数名称和全局变量），并且含有外部模块的
名称等信息。 
在操作系统执行二进制文件的时候，它的加载程序（OS loader）会依据这个表段加载程序所需要的模
块。在它加载该程序主模块的时候，对导入的符号链接进行枚举，逐一分配符号链接的地址。 
在本例中，_imp_puts 是操作系统加载程序（OS loader）为 hello world 程序提供的外部函数地址，属
于 32 位变量。程序只需要使用 LDR 指令取出这个变量，并且将它赋值给 PC 寄存器，就可以调用 puts()
函数。 
可见，一次性地给每个符号链接分配独立的内存地址，可以大幅度地减少 OS loader 在加载方面的耗时。 
前文已经指出，如果只能靠单条指令、而不借助内存的读取操作，CPU 就无法把 32 位数值（指针或
立即数）赋值给寄存器。所以，可以建立一个以 ARM 模式运行的独立函数，让它专门处理动态链接库的
接口问题。此后 Thumb 模式的代码就可以跳转到这个处理接口功能的单指令专用函数。这种专用函数称为
（运行模式的）形实转换函数（thunk function）。 
前面有一个 ARM 模式的编译例子，它就使用 BL 指令实现相同功能的形实转换函数。但是那个程序
使用的指令是 BL 而不是 BLX，可见处理器并没有切换运行模式。 
形实转换函数（thunk function）的由来 
形实转换函数，是“形参与实参互相转换的函数”的缩写。它不仅是缩写词，而且是外来词。这一专
用名词的出处可参见：http://www.catb.org/jargon/html/T/thunk.html。 
P. Z. Ingerman 在 1961 年首次提出了 thunk 的概念，这个概念沿用至今：在编译过程中，为满足当时
的过程（函数）调用约定，当形参为表达式时，编译器都会产生 thunk，把返回值的地址传递给形参。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
18 
逆向工程权威指南（上册） 
微软和 IBM 都对“thunk”一词有定义，将从 16 位到 32 位和从 32 位到 16 位的转变叫作“thunk”。 
3.4.5 ARM64 
GCC  
使用 GCC 4.8.1 将上述代码编译为 ARM64 程序，可得到如下所示的代码。 
指令清单 3.15  Non-optimizing GCC 4.8.1 + objdump 
 1  0000000000400590 : 
 2    400590:        a9bf7bfd     stp     x29, x30, [sp,#-16]! 
 3    400594:        910003fd     mov     x29, sp 
 4    400598:        90000000     adrp    x0, 400000  
 5    40059c:        91192000     add     x0, x0, #0x648 
 6    4005a0:        97ffffa0     bl      400420  
 7    4005a4:        52800000     mov     w0, #0x0          //  #0 
 8    4005a8:        a8c17bfd     ldp     x29, x30, [sp],#16 
 9    4005ac:        d65f03c0     ret 
10 
11  ... 
12   
13  Contents of section .rodata: 
14   400640 01000200 00000000 48656c6c 6f210000  ........Hello!.. 
一方面，ARM64 的 CPU 只可能运行于 ARM 模式、不可运行于 Thumb 或 Thumb-2 模式，所以它必
须使用 32 位的指令。另一方面，64 位平台的寄存器数量也翻了一翻，拥有了 64 个 X-字头寄存器（请参
见附录 B.4.1）。当然，程序还可以通过 W-字头的名称直接访问寄存器的低 32 位空间。 
上述程序的 STP（Store Pair）指令把两个寄存器（即 X29,X30）的值存储到栈里。虽然这个指令实际
上可以把这对数值存储到内存中的任意地址，但是由于该指令明确了 SP 寄存器，所以它就是通过栈来存
储这对数值。ARM64 平台的寄存器都是 64 位寄存器，每个寄存器可存储 8 字节数据。所以程序要分配 16
字节的空间来存储两个寄存器的值。 
这条指令中的感叹号标志，意味着其标注的运算会被优先执行。即，该指令先把 SP 的值减去 16，在
此之后再把两个寄存器的值写在栈里。这属于“预索引/pre-index”指令。此外还有“延迟索引/post-index”
指令与之对应。有关两者的区别，请参见本书 28.2 节。 
以更为易懂的 x86 指令来解读的话，这条指令相当于 PUSH X29 和 PUSH X30 两条指令。在 ARM64 平
台上，X29 寄存器是帧指针 FP，X30 起着 LR 的作用，所以这两个寄存器在函数的序言和尾声处成对出现。 
第二条指令把 SP 的值复制给 X29，即 FP。这用来设置函数的栈帧。 
ADRP 和 ADD 指令相互配合，把“Hello！”字符串的指针传递给 X0 寄存器，继而充当函数参数传递
给被调用函数。受到指令方面的限制，ARM 无法通过单条指令就把一个较大的立即数赋值给寄存器（可
参见本书的 28.3.1 节）。所以，编译器要组合使用数条指令进行立即数赋值。第一条 ADRP 把 4KB 页面的
地址传递给 X0，而后第二条 ADD 进行加法运算并给出最终的指针地址。详细解释请参见本书 28.4 节。 
0x400000 + 0x648 = 0x400648。这个数是位于.rodata 数据段的 C 字符串“Hello！”的地址。 
接下来，程序使用 BL 指令调用 puts()函数。这部分内容的解读可参见 3.4.3 节。 
MOV 指令用来给 W0 寄存器置零。W0 是 X0 寄存器的低 32 位，如下图所示。 
高 32 位 
低 32 位 
X0 
W0 
main()函数通过 X0 寄存器来传递函数返回值 0。程序后续的指令依次制备这个返回值。为什么这里把返回
值存储到 X0 寄存器的低 32 位，即 W0 寄存器？这种情况和 x86-64 平台相似：出于兼容性和向下兼容的考虑，
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 3 章  Hello，world！ 
19 
ARM64 平台的 int 型数据仍然是 32 位数据。对于 32 位的 int 型数据来说，X0 寄存器的低 32 位足够大了。 
为了进行演示，我对源代码进行了小幅度的修改，使 main()返回 64 位值。 
指令清单 3.16  main()返回 uint64_t 型数据 
#include  
#include  
uint64_t main() 
{ 
         printf ("Hello!\n"); 
         return 0; 
}  
返回值虽然相同，但是对应的 MOV 指令发生了变化。 
指令清单 3.17  Non-optimizing GCC 4.8.1 + objdump 
  4005a4: 
d2800000 mov     x0, #0x0           // #0 
在此之后，LDP (Load Pair)指令还原 X29 和 X30 寄存器的值。此处的这条指令没有感叹号标记，这意
味着它将率先进行赋值操作，而后再把 SP 的值与 16 进行求和运算。这属于延时索引（post-index）指令。 
RET 指令是 ARM64 平台的特色指令。虽然它的作用与 BX LR 相同，但是它实际上是按照寄存器的名
称进行跳转的（默认使用 X30 寄存器指向的地址），通过底层指令提示 CPU 此处为函数的返回指令、不属
于普通转移指令的返回过程。RET 指令经过了面向硬件的优化处理，它的执行效率较高。 
开启优化功能之后，GCC 生成的代码完全一样。本文不在对它进行介绍。 
3.5 MIPS 
3.5.1  全局指针 Global pointer 
全局指针是 MIPS 软件系统的一个重要概念。我们已经知道，每条 MIPS 指令都是 32 位的指令，所以
单条指令无法容纳 32 位地址（指针）。这种情况下 MIPS 就得传递一对指令才能使用一个完整的指针。在
前文的例子中，GCC 在生成文本字符串的地址时，就采用了类似的技术。 
从另一方面来说，单条指令确实可以容纳一组由寄存器的符号、有符号的 16 位偏移量（有符号数）。
因此任何一条指令都可以构成的表达式，访问某个取值范围为“寄存器−32768”～“寄存器＋32767”之
间的地址（总共 69KB）。为了简化静态数据的访问操作，MIPS 平台特地为此保留了一个专用的寄存器，
并且把常用数据分配到了一个大小为 64KB 的内存数据空间里。这种专用的寄存器就叫作“全局指针”寄
存器。它的值是一个指针，指向 64KB（静态）数据空间的正中间。而这 64KB 空间通常用于存储全局变
量，以及 printf()这类由外部导入的的外部函数地址。GCC 的开发团队认为：获取函数地址这类的操作，应
当由单条指令完成；双指令取址的运行效率不可接受。 
在 ELF 格式的文件中，这个 64KB 的静态数据位于.sbss 和.sdata 之中。“.sbss”是 small BSS（Block Started by 
Symbol）的缩写，用于存储非初始化的数据。“.sdata”是 small data 的缩写，用于存储有初始化数值的数据。 
根据这种数据布局编程人员可以自行决定把需要快速访问的数据放在.sdata、还是.sbss 数据段中。 
有多年工作经验的人员可能会把全局指针和 MS-DOS 内存（参见本书第 49 章）、或者 MS-DOS 的
XMS/EMS 内存管理器联系起来。这些内存管理方式都把数据的内存存储空间划分为数个 64KB 区间。 
全局指针并不是 MIPS 平台的专有概念。至少 PowerPC 平台也使用了这一概念。 
3.5.2 Optimizing GCC 
下面这段代码显示了“全局指针”的特色。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
20 
逆向工程权威指南（上册） 
指令清单 3.18  Optimizing GCC 4.4.5 (汇编输出) 
 1 $LC0: 
 2 ; \000 is zero byte in octal base: 
 3          .ascii "Hello, world!\012\000" 
 4 main: 
 5 ; function prologue. 
 6 ; set the GP: 
 7          lui     $28,%hi(__gnu_local_gp) 
 8          addiu  $sp,$sp,-32 
 9          addiu  $28,$28,%lo(__gnu_local_gp) 
10 ; save the RA to the local stack: 
11          sw      $31,28($sp) 
12 ; load the address of the puts() function from the GP to $25: 
13          lw      $25,%call16(puts)($28) 
14 ; load the address of the text string to $4 ($a0): 
15          lui     $4,%hi($LC0) 
16 ; jump to puts(), saving the return address in the link register: 
17          jalr    $25 
18          addiu   $4,$4,%lo($LC0) ; branch delay slot 
19 ; restore the RA: 
20          lw      $31,28($sp) 
21 ; copy 0 from $zero to $v0: 
22          move    $2,$0 
23 ; return by jumping to the RA: 
24          j        $31 
25 ; function epilogue: 
26          addiu $sp,$sp,32 ; branch delay slot 
主函数序言启动部分的指令初始化了全局指针寄存器GP寄存器的值，并且把它指向 64KB数据段的正中央。
同时，程序把RA寄存器的值存储于本地数据栈。它同样使用puts()函数替代了printf()函数。而puts()函数的地址，
则通过LW（Load Word）指令加载到了$25 寄存器。此后，字符串的高16 位地址和低16 位地址分别由LUI(Load Upper 
Immediate)和ADDIU(Add Immediate Unsigned Word)两条指令加载到$4 寄存器。LUI中的Upper一词说明它将数据存
储于寄存器的高 16 位。与此相对应，ADDIU则把操作符地址处的低 16 位进行了求和运算。ADDIU指令位于JALR
指令之后，但是会先于后者运行
①。$4 寄存器其实就是$A0 寄存器，在调用函数时传递第一个参数
②
① 请参考前文介绍的分支延迟槽（Branch delay slot）效应。 
② 有关 MIPS 各寄存器的用途，请参见附录 C.1。 
。 
JALR (Jump and Link Register)指令跳转到$25 寄存器中的地址，即 puts()函数的启动地址，并且把下一
条 LW 指令的地址存储于 RA 寄存器。可见，MIPS 系统调用函数的方法与 ARM 系统相似。需要注意的是，
由于分支延迟槽效应，存储于 RA 寄存器的值并非是已经运行过的、“下一条”指令的地址，而是更后面那
条（延迟槽之后的）指令的地址。所以，在执行这条 JALR 指令的时候，写入 RA 寄存器的值是 PC+8，即
ADDIU 后面的那条 LW 指令的地址。 
第 19 行的 LW (Load Word)指令，用于把本地栈中的 RA 值恢复回来。请注意，这条指令并不位于被调
用函数的函数尾声。 
第 22 行的 MOVE 指令把$0（$ZERO）的值复制给$2($V0)。MIPS 有一个常量寄存器，它里面的值是
常量 0。很明显，因为 MIPS 的研发人员认为 0 是计算机编程里用得最多的常量，所以他们开创了一种使
用$0 寄存器提供数值 0 的机制。这个例子演示了另外一个值得注意的现象：在 MIPS 系统之中，没有在寄
存器之间复制数值的（硬件）指令。确切地说，MOVE DST, SRC 是通过加法指令 ADD DST,SRC, $ZERO
变相实现的，即 DST=SRC+0，这两种操作等效。由此可见，MIPS 研发人员希望尽可能地复用 opcode，从
而精简 opcode 的总数。然而这并不代表每次运行 MOVE 指令时 CPU 都会进行实际意义上的加法运算。CPU
能够对这类伪指令进行优化处理，在运行它们的时候并不会用到 ALU（Arithmetic logic unit）。 
第 24 行的 J 指令会跳转到 RA 所指向的地址，完成从被调用函数返回调用者函数的操作。还是由于分
支延迟槽效应，其后的 ADDIU 指令会先于 J 指令运行，构成函数尾声。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 3 章  Hello，world！ 
21 
我们再来看看 IDA 生成的指令清单，熟悉一下各寄存器的伪名称。 
代码清单 3.19  Opimizing GCC4.4.5(IDA) 
 1 .text:00000000 main: 
 2 .text:00000000 
 3 .text:00000000 var_10   
= -0x10 
 4 .text:00000000 var_4  
= -4 
 5 .text:00000000 
 6 ; function prologue. 
 7 ; set the GP: 
 8 .text:00000000  
lui   
$gp, (__gnu_local_gp >> 16) 
 9 .text:00000004  
addiu  
$sp, -0x20 
10 .text:00000008  
la   
$gp, (__gnu_local_gp & 0xFFFF) 
11 ; save the RA to the local stack: 
12 .text:0000000C  
sw   
$ra, 0x20+var_4($sp) 
13 ; save the GP to the local stack: 
14 ; for some reason, this instruction is missing in the GCC assembly output: 
15 .text:00000010  
sw   
$gp, 0x20+var_10($sp) 
16 ; load the address of the puts() function from the GP to $t9: 
17 .text:00000014  
lw   
$t9, (puts & 0xFFFF)($gp) 
18 ; form the address of the text string in $a0: 
19 .text:00000018  
lui   
$a0, ($LC0 >> 16) # "Hello, world!" 
20 ; jump to puts(), saving the return address in the link register: 
21 .text:0000001C  
jalr   
$t9 
22 .text:00000020  
la   
$a0, ($LC0 & 0xFFFF) # "Hello, world!" 
23 ; restore the RA: 
24 .text:00000024  
lw   
$ra, 0x20+var_4($sp) 
25 ; copy 0 from $zero to $v0: 
26 .text:00000028  
move   
$v0, $zero 
27 ; return by jumping to the RA: 
28 .text:0000002C  
jr   
$ra 
29 ; function epilogue: 
30 .text:00000030  
addiu  
$sp, 0x20 
第 15 行的指令使用局部栈保存GP的值。令人感到匪夷所思的是，GCC的汇编输出里看不到这条指令，
或许这是GCC自身的问题
①
3.5.3  Non-optimizing GCC 
。严格地说，此时有必要保存GP的值。毕竟每个函数都有着自己的 64KB数据
窗口。 
程序中保存 puts()函数地址的寄存器叫作$T9 寄存器。这类 T-开头的寄存器叫作“临时”寄存器，用于保存
代码里的临时值。调用者函数负责保存这些寄存器的数值（caller-saved），因为它有可能会被被调用的函数重写。 
代码清单 3.20  Non-optimizing GCC 4.4.5 (汇编输出) 
 1 $LC0: 
 2          .ascii "Hello, world!\012\000" 
 3 main: 
 4 ; function prologue. 
 5 ; save the RA ($31) and FP in the stack: 
 6          addiu  $sp,$sp,-32 
 7          sw     $31,28($sp) 
 8          sw     $fp,24($sp) 
 9 ; set the FP (stack frame pointer): 
10          move   $fp,$sp 
11 ; set the GP: 
12          lui    $28,%hi(__gnu_local_gp) 
13          addiu  $28,$28,%lo(__gnu_local_gp) 
14 ; load the address of the text string: 
① 很明显，对于 GCC 的用户来说，查看汇编指令的功能不是那么重要。所以，GCC 输出的汇编指令之中仍然可能存在一些（在
生成汇编指令的阶段）未被修正的错误。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
22 
逆向工程权威指南（上册） 
15          lui    $2,%hi($LC0) 
16          addiu  $4,$2,%lo($LC0) 
17 ; load the address of puts() using the GP: 
18          lw     $2,%call16(puts)($28) 
19          nop 
20 ; call puts(): 
21          move  $25,$2 
22          jalr  $25 
23          nop; branch delay slot 
24 
25 ; restore the GP from the local stack: 
26          lw    $28,16($fp) 
27 ; set register $2 ($V0) to zero: 
28          move  $2,$0 
29 ; function epilogue. 
30 ; restore the SP: 
31          move  $sp,$fp 
32 ; restore the RA: 
33          lw    $31,28($sp) 
34 ; restore the FP: 
35          lw    $fp,24($sp) 
36          addiu $sp,$sp,32 
37 ; jump to the RA: 
38          j     $31 
39          nop; branch delay slot 
未经优化处理的 GCC 输出要详细得多。此处，我们可以观察到程序把 FP 当作栈帧的指针来用，而且
它还有 3 个 NOP（空操作）指令。在这 3 个空操作指令中，第二个、第三个指令都位于分支跳转指令之后。 
笔者个人认为（虽然目前无法肯定），由于这些地方都存在分支延迟槽，所以 GCC 编译器会在分支语
句之后都添加 NOP 指令。不过，在启用它的优化选项之后，GCC 可能就会删除这些 NOP 指令。所以，此
处仍然存在这些 NOP 指令。 
使用 IDA 程序观察下面这段代码。 
指令清单 3.21  Non-optimizing GCC 4.4.5 (IDA) 
 1 .text:00000000 main: 
 2 .text:00000000 
 3 .text:00000000 var_10   
= -0x10 
 4 .text:00000000 var_8  
= -8 
 5 .text:00000000 var_4  
= -4 
 6 .text:00000000 