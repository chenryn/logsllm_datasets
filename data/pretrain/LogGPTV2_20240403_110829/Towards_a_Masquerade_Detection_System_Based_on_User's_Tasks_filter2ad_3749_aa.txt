title:Towards a Masquerade Detection System Based on User's Tasks
author:Jos&apos;e Benito Camiña and
Jorge Rodr&apos;ıguez-Ruiz and
Ra&apos;ul Monroy
Towards a Masquerade Detection System
Based on User’s Tasks
J. Benito Cami˜na, Jorge Rodr´ıguez, and Ra´ul Monroy
Computer Science Department
Tecnol´ogico de Monterrey, Campus Estado de M´exico
Carretera al Lago de Guadalupe Km. 3-5, Atizap´an, Estado de M´exico, 52926, M´exico
{a00965049,a00965439,raulm}@itesm.mx
Abstract. Nowadays, computers store critical information, prompting
the development of mechanisms aimed to timely detect any kind of intru-
sion. Some of such mechanisms, called masquerade detectors, are often
designed to signal an alarm whenever they detect an anomaly in sys-
tem behavior. Usually, the proﬁle of ordinary system behavior is built
out of a history of command execution. However, in [1,2], we suggested
that it is not a command, but the object upon which it is carried out
what may distinguish a masquerade from user participation; also, we
hypothesized that this approach provides a means for building masquer-
ade detectors that work at a higher-level of abstraction. In this paper,
we report on a successful step towards this hypothesis validation. The
crux of our abstraction stems from that a directory often holds closely
related objects, resembling a user task ; thus, we do not have to account
for the accesses to individual objects; instead, we simply take it to be an
access to some ancestor directory of it, the user task. Indeed, we shall
prove that by looking into the access to only a few such user tasks, we
can build a masquerade detector, just as powerful as if we looked into
the access to every single ﬁle system object. The advantages of this ab-
straction are paramount: it eases the construction and maintenance of
a masquerade detection mechanism, as it yields much shorter models.
Using the WUIL dataset [2], we have conducted two experiments for dis-
tinguishing the performance of two one-class classiﬁers, namely: Na¨ıve
Bayes and Markov chains, considering single objects and our abstraction
to user tasks. We shall see that in both cases, the task-based masquerader
detector outperforms the individual object-based one.
1
Introduction
Information is an extremely important asset. However, due to an increase in
storage capacity, lots of critical information move around inside personal com-
puter devices everyday. This makes information more vulnerable to be accessed
by an unintended, third party. Several kinds of mechanisms have been proposed
to get around from this threat, the one being of interest to this paper is known
as a Masquerade Detection System (MDS). A MDS is especially designed to
send an alarm whenever it detects an anomaly in the use of a computer device,
A. Stavrou et al. (Eds.): RAID 2014, LNCS 8688, pp. 447–465, 2014.
c(cid:2) Springer International Publishing Switzerland 2014
448
J.B. Cami˜na, J.Rodr´ıguez, and R. Monroy
thus deducing that the device has come to somebody else’s possession (presum-
ably an intruder).
Due to the seminal work of Schonlau et al. [3], ﬁrst MDS’s proﬁled ordinary
device usage considering the history of the commands executed by the owner
user, thus the term user behavior. However, masquerade detection based on
command usage has proven not to be powerful enough [4], driving research into
looking for new opportunities of a source that can be used for user proﬁling.
Example approaches for proﬁling user behavior in this vein are the use of I/O
devices, such as the mouse or the keyboard [5,6], the use of speciﬁc applications,
such as a document management system [7], and the characterization of certain
kinds of user activities, such as search [8].
In [1,2], we introduced a new approach to masquerade detection. This ap-
proach claims that it is not the command or the activity carried out, but the
object upon which it is performed what may separate a masquerade from gen-
uine user participation. To support this claim, we have developed a masquerade
dataset, called WUIL, which contains logs of the activity of a number of users,
working on ordinary conditions; more importantly, WUIL also contains logs of
simulated attacks, conducted on the actual user machines, and thus are more
faithful than others reported on in the literature, e.g. [3,8].
In [2], we argued that our approach provides a richer means for building
MDS’s that could work at a higher-level of abstraction. In this paper, we further
support such claim. We will introduce a MDS that is based on an abstraction of
a user task, taken to be a directory holding a number of (allegedly) related ﬁle
system objects. Thus, while using objects in a given user directory, we take the
user to be working on the same task, and model the behavior of a user in terms
of task activity, including task frequency and task transition.
Using the WUIL dataset [2], we have conducted two experiments for distin-
guishing the performance of two one-class classiﬁers, namely: Na¨ıve Bayes and
Markov chains. Each classiﬁer was used as a MDS, considering both single ob-
jects and our abstraction to user tasks.
We have successfully validated that, even though it looks into the activity of
only a few user tasks, our proposed MDS is just as powerful than the one that
looks into each access to every single ﬁle system object underneath. The advan-
tages of our task-based abstraction are paramount: it eases both the construction
and the maintenance of the associated MDS, because it yields much simpler and
shorter models. Further, notice that this kind of level of abstraction can hardly
be achieved in other approaches, which either group command sequences into
scripts, e.g. as in [9], or turn actual commands into generic ones, such as edit,
compile, etc., e.g. as in [8]. Our results also show that our task-based abstraction
can also be exploited in other masquerade detection approaches that also include
ﬁle system usage, e.g. [8].
Overview of Paper. The remainder of this paper is organized as follows. First,
in §2, we shall show the diﬀerent approaches that have been studied for masquer-
ade detection. Then, in §3 we will give an overview of the WUIL masquerade
dataset, as well as our previous eﬀorts on developing a masquerade detection
Towards a Masquerade Detection System Based on User’s Tasks
449
mechanism based on user’s File System (FS) navigation. There, we shall also
introduce our abstraction of a user task, and how WUIL logs are transformed
from FS object usage to task activities. Then, in §4, we shall show the experi-
ment that we have designed to validate this paper’s working hypothesis. Next,
in §5, we shall present the results we have obtained through our experimenta-
tion. Finally, in §6, we report on the conclusions drawn from this experiment
and provide guidelines for further work.
2 User Proﬁle for Masquerade Detection
In terms of the approach used to proﬁle user behavior, most existing MDS have
made use of the history of commands that a user executes while working in
an UNIX session [3]; some analyze the way a user drives an I/O device, like
the mouse [5,10,11] or the keyboard [6,12]; and some study user search behav-
ior [8,13]. In what follows, we provide an overview of these approaches to proﬁle
user behavior.
2.1 NIDES
(N)IDES [14], one of the earliest attempts at masquerade detection, is an expert-
system that aims to detect a masquerade (and other types of intrusion) using
a statistical behavior proﬁle built from a diverse set of audit data from UNIX
Systems. Audit data includes command usage, accesses to password protected
directories, session information, CPU usage, the use of certain categories of ap-
plications like compilers or editors, and many others. Interestingly, NIDES con-
siders grouping actions together into a sequence, and both the corresponding
subject executing an action and the object upon which it is performed. NIDES
has served as an inspiration by having proﬁles of normal usage and trying to
discern between an intruder and a user by diﬀerences in behavior.
2.2 UNIX Commands
The most prominent approach to proﬁle user behavior is that of Schonlau et al.,
who suggested considering the commands that the user executes while working
on an UNIX session. In order to validate this hypothesis, Schonlau et al. de-
veloped a masquerade dataset, known as SEA [15], which consists of a number
of user logs, each of which is a sequence of commands, having got rid of any
arguments.
SEA contains activity logs of 70 users. Each user log consists of a sequence of
15, 000 commands, and has been separated into 150 sessions with 100-command
each. Masquerades are simulated by replacing a user’s legitimate session with
somebody else’s. To this purpose, 50 users were designated to be honest, and the
remaining 20 to be masqueraders. SEA identiﬁes which user sessions are ordinary
and which contaminated. Assessing the performance of a given MDS amounts to
ﬁrst building the MDS model using only ordinary user sessions (50), and then
450
J.B. Cami˜na, J.Rodr´ıguez, and R. Monroy
measuring how well the MDS did in distinguishing masquerader’s sessions from
user’s ones (100).
Regarding the use of UNIX commands to masquerade detection, for the pur-
pose of the work reported herein, two other pieces of research are worth men-
tioning. One, [16], redeﬁnes the experiment set by Schonlau et al., and the other,
[17], considers the used of enriched command lines. Unlike [3], [16] suggests eval-
uating the performance of a given MDS for a honest user by measuring how well
it distinguishes as a masquerade every session of the remaining users. This yields
a considerably larger number of test sessions upon which we may rest the validity
of any statistical inference. For masquerade detection via enriched commands,
[17] used Greenberg’s dataset [18], which, for every user UNIX command, also
includes the associated arguments. Greenberg’s dataset contains activity logs of
168 users, divided in four categories: novice programmers, experienced program-
mers, computer scientists and non-programmers.
SEA was the ﬁrst masquerade dataset that allowed a fair comparison among
diﬀerent MDS’s, thus, yielding a signiﬁcant amount of research (see [19,20] for
a survey). However, SEA has a severe limitation, namely: it involves unrealistic
masquerades, as they are made out of somebody else’s ordinary behavior. Inter-
estingly, even though this approach, we call One Versus The Others (OVTO),
may not yield signiﬁcant results to masquerade detection, it has prevailed in
mostly datasets.
2.3 Mouse Usage
The use of I/O devices is another proliﬁc approach to user proﬁling for masquer-
ade detection. Given that the use of the mouse as an I/O device is widespread, it
has attracted signiﬁcant attention. For example, [5] has developed a dataset with
information gathered from 18 users working on Internet Explorer. The dataset
contains information about the coordinates of the mouse pointer after mouse
movement, and other features like distance, angle, and time to travel between
a pair of adjacent coordinates. [5]’s MDS is not one-class; i.e. model construc-
tion involves the use of both positive and negative examples, borrowed from
somebody else’s ordinary behavior.
In a similar vein [10], Garg et al. collected mouse usage information about a
limited set of data of only three users. In particular, they measured the num-
ber of mouse clicks, the pointer distance between two consecutive clicks, mouse
speed, and mouse angle, deriving from all this information 16 diﬀerent features.
Similarly, Weiss et al. [11] deﬁned a 5x5 button matrix, and a set of button se-
quences that each participating user had to go through. They recorded activity
logs for each user, gathering information of three mouse events: move, click, and
drag, including key features such as time and coordinates.
Mouse usage to masquerade detection enables the possibility of contrasting
users one against other in terms of the use of a standard device. However, so
far, the masquerade scenarios that haven been considered are of little practical
application, as they are constrained to an speciﬁc application. Moreover, further
development on the masquerade dataset is required, as they involve only a few
Towards a Masquerade Detection System Based on User’s Tasks
451
users. More importantly, [5,10,11] all follow an OVTO approach; thus, they do
not consider faithful masquerade attempts.
2.4 Keyboard Usage
As for now, keyboards also are pretty common, and so may become a rather
standard platform for user proﬁle construction. Keyboard dynamics for mas-
querade detection is either static- or free-text. In the static-text approach, users
are required to write the same piece of text. Killourhy & Maxion have rationally
reconstructed a number of static-text MDS’s reported on in the literature, and
then carried out a fair comparison [6]. In their experiment, each MDS attempts
to spot a masquerader looking into how a user types her password. For that pur-
pose, they developed a dataset that contains the activity logs of 51 users. For
each user, the dataset includes 8 sessions. Each session contains 50 records of
the user typing the password, which is the same for every user; the information
captured involves 31 diﬀerent features of keystroke patterns.
By contrast, in the free-text approach, users type text at will. An example
work in this vein is that of Messerman et al. [12], who have developed a dataset
that contains logs of 55 users working in a web-mail application. The dataset
involves mainly key downs and time stamps.
Though easy to implement, gathering information about keyboard usage might
be intrusive. For example, in the static-text approach, a user must write the same
text a number of times, and this might drive her not to abide to a change-password
policy. While this remark is not applicable in the free-text approach, a user must
be working with a designated application, thus, making the masquerade detection
scenario unrealistic. Further, [6,12] both adopt an OVTO approach; thus, they do
not consider faithful masquerades.
2.5 Search Patterns
In a diﬀerent vein, Ben-Salem & Stolfo have developed a masquerade dataset [8],
named RUU, which is used to proﬁle a user in terms of search patterns. RUU
contains activity logs of 18 users. Each log record involves 22 diﬀerent features,
some are user-level: browsing, communication, information gathering, etc., and
some system-level: registry modiﬁcation, process creation/destruction, ﬁle ac-
cess, DLL usage, etc. In a follow-up paper, Song et al. [13] attempted to identify
which RUU features best represent user search patterns.
In RUU, log recording is transparent; further, RUU involves a number of
attacks. However, attacks were simulated in an external computer, not in the
users’. This makes attacks rather unfaithful, since a user search pattern, indeed
a collection of user actions, might drastically diﬀer from one computer to other.
This is attributable to issues, such as computer architecture, ﬁle system organi-
zation, and so on.
In conclusion, even though successful, existing approaches to masquerade de-
tection all suﬀer from some limitations. A common problem is that MDS eval-
uation does not involve the use of faithfully simulated attacks (e.g. they adopt
452
J.B. Cami˜na, J.Rodr´ıguez, and R. Monroy
the OVTO approach). Other MDS’s are limited to the output of a single appli-
cation, overlooking the entire picture. We also stressed the relevance of making
transparent activity recording.
3 WUIL and a Task Abstraction
As discussed above, user proﬁle for masquerade detection is usually built out of a
record of user actions (in the form of either I/O events, or running commands).
Departing from this standard approach, in [1,2], we argued that not only is
it the action, but it also is the object upon which the action is executed what
distinguishes user participation. We introduced a novel MDS based on the way a
user navigates the structure of her File System (FS). Also, we developed WUIL,
a dataset that collects FS navigation from several users, but more importantly it
collects a number of faithful masquerade attempts. This is also in contrast with
existing datasets, such as SEA, which rely on a OVTO masquerade model.
In [2], we have also stated the hypothesis for which we provide further support
in this paper, namely: our FS navigation approach to masquerade detection pro-
vides a richer means that could be made to work at a higher-level of abstraction.
We shall introduce a MDS that is based on an abstraction to FS navigation, we
call a task. Roughly, a task amounts to a FS directory holding a number of (al-
legedly) related ﬁle system objects. Thus, while using objects in that directory,
we take the user to be working on the very same task, and model user behavior
in terms of task usage, including task frequency and task transition. Apart from
the notion of task, the FS navigation approach to masquerade detection enables
further abstractions, including the principle of locality (which, roughly, states
the likelihood that an object, or some object nearby, will be used next). We shall
have more to say in §6. In what follows, we outline ﬁrst WUIL, and then how
we have abstracted out user FS navigation into task activity.
3.1 The WUIL Masquerade Dataset
FS navigation is universal in that it can be studied in virtually any PC, regard-
less of the underlying Operating System (OS). For the construction of WUIL,
however, we recruited volunteers working with some version of MS Windows,
since it is the most widely used OS. In WUIL, MS Windows versions range from
XP to 7.
WUIL User Logs. Currently, WUIL contains log information about 20 diﬀer-
ent users. Each user log contains FS usage of the two most common directories:
Desktop and My Documents. To gather these logs, we used the Windows tool
audit, which inspects FS usage on the directories it is enabled. User logs have
been preprocessed so that each entry consists of a tuple involving only a unique
identiﬁer, access date, access time, and the FS object itself: a FS path.