uniform leaves.
Finally, in the real world, Gb appends to 𝑀 𝑚 strings of the form:
(cid:16)
(cid:17) ⊕ 𝐵 𝑗
𝑋𝑖,𝑗
𝑖
Sobv simulates each such string with a uniform string. This is
suitable because (1) each 𝑋𝑖,𝑗 is uniform, and (2) one string 𝑋𝑎,𝑗 is
missing from 𝐸’s view. From here, Sobv copies the actions of Ev in
computing 𝐸’s share of the output matrix and outputs the resultant
shares.
Thus, Sobv properly simulates one-hot gates.
Each recursive Module call is recursively simulated. This is
appropriate by induction.
Reveal gates are handled as follows. First, we simulate shares
for the sampled value 𝛼 ← Dmask. These shares are trivially simu-
lated by all zeros (see OneHot.Ev). Next, Sobv recursively simulates
the Reveal gate’s internal circuit C. By induction, this simulation is
indistinguishable from the real garbling. Let 𝑏′, 𝑐′ be the simulated
output shares. The real garbling appends a value Color(𝑏) to the
material (see OneHot.Gb). Sobv simulates this message as follows:
first, it samples a value 𝑥 ← Dout. Recall that the user provided
a proof that the output of C is indistinguishable from such a sam-
pled value (Requirement 2). Hence 𝑥 simulates the cleartext output
of C. Next, Sobv appends 𝑥 ⊕ Color(𝑏′) to its simulated material.
This properly simulates the material because it “reveals” the value
𝑥, which is indistinguishable from the value revealed in the real
garbling.
Color gates are straightforward: the simulator simply copies
OneHot.Ev’s actions.
We have now proved each gate type simulatable. However, this
does not yet prove the entire module simulation indistinguishable.
In the real world, some of the module’s wires encode masks applied
to values that are revealed via Reveal gates. We must ensure that
these masks are never themselves revealed, or else the simulation
would be distinguishable. This is ensured by three facts: (1) inside
a module, no values are revealed except those revealed by new
Reveal and Color gates, (2) each Reveal gate uses a fresh mask and
its leakage is simulatable, and (3) the output of the module is a de-
terministic value, and hence is independent of any internal random
masks (Requirement 1). Thus internal random masks cannot escape
the module. Note also that the joint information given by multiple
Reveal gates does not break indistinguishability (see Lemma 5.1).
Thus Sobv outputs a module garbling that is indistinguishable
from real. Because modules can simulated, circuits can also trivially
be simulated. OneHot is oblivious.
□
We prove Theorem 5.7: If 𝐻 is a circular correlation robust hash
function, then OneHot is private.
Proof. By construction of a simulator Sprv. At a high level, Sprv
simply runs Sobv, then builds a corresponding decoding string that
ensures the simulated circuit garbling outputs 𝑦 when evaluated.
First, Sprv invokes (C, 𝑀′, 𝑋 ′) = Sobv(1𝜅, C). The remaining
task is to generate a decoding string 𝑑′ which, together with 𝑀′
and 𝑋 ′, is indistinguishable from real (𝑀, 𝑋, 𝑑), even when given
the output 𝑦.
To do so, Sprv invokes the procedure 𝑌 ′ = Ev(C, 𝑀′, 𝑋 ′) and
hence computes output shares that correspond to the obliviousness
simulation. Recall that the real string 𝑑 is constructed by hash-
ing each corresponding zero/one output share (see OneHot.De).
Thus, Sprv must simulate two strings for each 𝑖th output: one that
properly maps 𝑌 ′
𝑖 to 𝑦𝑖, and one that cannot be decrypted. Sprv com-
putes 𝐻(𝑌 ′
𝑖 , nonce) where nonce is the same nonce as described in
OneHot.De. There are two available ‘slots’ in 𝑑′ where this string
can be placed; Sprv places it in slot 𝑦𝑖. Sprv fills the other slot with
a uniform string.
Note first that the above is correct: OneHot.De(𝑑′, 𝑌 ′) = 𝑦. More-
over, the simulation is indistinguishable from the real world: each
element in 𝑑 is the output of a (circular correlation robust) hash
function, so appears uniformly random; the simulated decoding
string 𝑑′ also appears uniformly random.
OneHot is private.
□
We prove Theorem 5.9: If 𝐻 is a circular correlation robust hash
function, then OneHot is authentic.
Proof. We proceed backwards across C, at each gate demon-
strating that A cannot obtain input shares except by correctly
evaluating the previous parts of the circuit. The key idea is to show
that forging an output of any subcircuit is as hard as forging an
input to that subcircuit. Thus, by induction, forging a circuit output
amounts to guessing a different circuit input, which succeeds with
probability 2−𝜅 by trying to guess the value Δ. At a high level,
authenticity is trivial for all except one-hot gates; one-hot gates are
authentic due to the security properties of 𝐻.
First, inspect OneHot.De. Recall that for each bit of output 𝑦𝑖,
the decoding string 𝑑 holds two values:
𝐻(nonce, 𝑌𝑖)
𝐻(nonce, 𝑌𝑖 ⊕ Δ)
A succeeds if for any output bit 𝑦𝑖 she causes De to output 𝑦𝑖 ⊕ 1.
To construct an output that properly decodes, A must either (1)
break the collision resistance of 𝐻 (infeasible by assumption) or
(2) construct a value 𝑌𝑖 ⊕ (𝑦𝑖 ⊕ 1)Δ. If A attempts any other value,
then OneHot.De will abort, so A fails.
Now, it suffices to show that it is infeasible to produce any such
value 𝑌𝑖 ⊕ (𝑦𝑖 ⊕ 1)Δ. We do so by induction on the structure of
a module M. Authenticity of circuits follows trivially from the
authenticity of modules. The inductive hypothesis is as follows:
Given garbled input 𝑋 and material 𝑀 for a submodule M′ such
Session 2D: Secure Multiparty ComputationCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea589that 𝑌 = Ev(C, 𝑀, 𝑋), A cannot construct 𝑌 ′ = 𝑌 ⊕ 𝑟 Δ for some
non-zero matrix 𝑟 except with negligible probability. Put more
simply, it is infeasible for A to generate an output 𝑌 ′ that is a valid
share, but is different from 𝑌 anywhere.
XOR gates are trivially authentic. In Ev, XOR gates simply XOR
the input shares. Thus, forging output is as hard as forging input.
Constant gates are trivially authentic: Ev simply outputs a
share zero, so A is given no new information.
Recursive Module calls are authentic by induction.
Reveal gates are trivially authentic. First, each such gate sam-
ples a mask 𝛼 ← Dmask. Forging a different mask would require
A to guess Δ, which succeeds only with probability 2−𝜅 and hence
is infeasible. Then, the gate forwards its input and 𝛼 to a subcircuit
which is authentic by induction.
Note, the Reveal gate also leaks a value to A. Changing this
value cannot help A because the leaked values are simply guides
that indicate which garbled rows to decrypt.
Color gates are trivially authentic: Ev simply forwards parts of
the Color gate input.
One-hot gates are less straightforward, but can be proved secure
by the properties of 𝐻. Assume the one-hot gate has inputs 𝑎 and 𝑏.
We split the one-hot gate into two parts. The first part constructs
the GGM tree where honest 𝐸 decrypts 2𝑛−1 out of 2𝑛 leaves. The
second part uses these leaves to construct matrix columns.
We start from the second part. For each column in the second
part, the material includes a message of the following form:
(cid:16)
(cid:17) ⊕ 𝐵 𝑗
𝑋𝑖,𝑗
𝑖
Moreover, A holds each string 𝑋𝑖≠𝑎,𝑗 and 𝐵 𝑗 ⊕ 𝑏 𝑗 Δ. However, A
does not hold 𝑋𝑎,𝑗 and, moreover, this value is the result of calling
𝐻 on a leaf string 𝐿𝑎. But 𝐻 is a hash function, so constructing 𝑋𝑎,𝑗
is as hard as constructing 𝐿𝑎. Thus, forging a valid output matrix
𝑋 ′ ≠ 𝑋 is as hard as forging 𝐿𝑎 or forging valid 𝐵′ ≠ 𝐵.
Now, let us look at the first part and demonstrate that forging
𝐿𝑎 is as hard as forging valid 𝐴′ ≠ 𝐴. We proceed upwards through
the binary branching tree, demonstrating that forging level 𝑖 + 1 is
as hard as forging level 𝑖.
Each child node is constructed fby hashing its parent node, so
forging a child is as hard as forging its parent. For each level, A
additionally observes two strings:
𝐻(𝐴𝑖 ⊕ Δ, nonce𝑖,even)⊕
𝑆𝑖,2𝑗 𝐻(𝐴𝑖, nonce𝑖,odd)⊕
𝑆𝑖,2𝑗+1
Informally, if A could decrypt the ‘wrong’ string, then she could
forge a child on the path to 𝑎. However, both strings are encrypted
using a hash of 𝐴𝑖 and 𝐻 is circular correlation robust. Therefore,
forging the sum of odds/evens is as hard as forging 𝐴′ ≠ 𝐴. Thus,
the first part is authentic.
In summary, forging an output matrix 𝑋 ′ ≠ 𝑋 is as hard as
forging 𝐴′ ≠ 𝐴 or 𝐵′ ≠ 𝐵. Thus, one-hot gates are authentic.
Since all gate types are authentic, modules and circuits are also
authentic. Forging a valid circuit output 𝑌 ′ ≠ 𝑌 is as hard as forging
a valid circuit input 𝑋 ′ ≠ 𝑋, and forging a valid circuit 𝑋 ′ ≠ 𝑋
can only be achieved by guessing Δ, which only succeeds with
negligible probability.
OneHot is authentic.
□
2𝑖−1
𝑗=0
2𝑖−1
𝑗=0
A.1 Compatibility with Stacked Garbling
Recall that OneHot is a garbling scheme (Section 5.5, Construc-
tion 1) [BHR12]. In this section we prove OneHot’s (limited) compat-
ibility with stacked garbling [HK20a, HK21]. In particular, OneHot
can serve as the underlying garbling scheme for stacked garbling,
which handles each conditional branch. We start by giving the
definition of strong stackability [HK21].
stackable if:
Definition A.1 (Strong Stackability). A garbling scheme is strongly
(1) For all circuits C and all inputs 𝑥,
(C, 𝑀, En(𝑒, 𝑥)) 𝑐
= (C, 𝑀′, 𝑋 ′)
where (𝑀, 𝑒, ·) ← Gb(1𝜅, C), 𝑋 ′ ← {0, 1}|𝑋 |, and 𝑀′ ←
{0, 1}|𝑀 |.
(2) The scheme is projective [BHR12].
(3) There exists an efficient deterministic procedure Color that
maps strings to {0, 1} such that for all C and all projective
label pairs 𝐴0, 𝐴1 ∈ 𝑑:
Color(𝐴0) ≠ Color(𝐴1)
where (·, ·, 𝑑) = Gb(1𝜅, C).
(4) There exists an efficient deterministic procedure Key that
maps strings to {0, 1}𝜅 such that for all C and all projective
label pairs 𝐴0, 𝐴1 ∈ 𝑑:
Key(𝐴0) | Key(𝐴1) 𝑐
= {0, 1}2𝜅
where (·, ·, 𝑑) = Gb(1𝜅, C).
Informally, strong stackability achieves two goals. First, property
(1) ensures that the garbling of a circuit “looks random”, which is
important when stacking branches [HK20a]. Second, properties
(2–4) allow the stacked garbling scheme to manipulate the shares
that emerge from evaluation of our garbling scheme.
To achieve strong stackability we modify OneHot in two ways.
The first change is simple and does not alter the flexibility of our
scheme. Specifically, we alter our output decoding string 𝑑 to meet
item (3). Recall that we construct the decoding string 𝑑 by setting
the projective pair for each output bit 𝑦𝑖 as follows (see Figure 4):
𝐻(𝑌𝑖, nonce) 𝐻(𝑌𝑖 ⊕ Δ, nonce)
Note that if we call our Color procedure (Section 3) on these two
strings, the result may match, which fails property (3). Thus, we
make the following simple adjustment to 𝑑:
𝐻(nonce, 𝑌𝑖) | Color(𝑌𝑖) 𝐻(nonce, 𝑌𝑖 ⊕ Δ) | Color(𝑌𝑖 ⊕ Δ)
(3)
By concatenating the color of the input shares, we ensure that the
least significant bits of these two strings differ. Therefore, our Color
procedure will now meet item (3).
The second change is more fundamental: Reveal gates can re-
veal values from arbitrary distributions. This breaks property (1),
which insists that all values viewed by 𝐸 are indistinguishable from
uniform. Therefore, to achieve strong stackability we limit Reveal
gates such that only uniform distributions are allowed.
Theorem A.2. Let OneHot′ be the OneHot garbling scheme (Sec-
tion 5.5, Construction 1) with the following two modifications:
(1) The output decoding string 𝑑 is configured by setting the projec-
tive output pair for each output bit 𝑦𝑖 according to Equation (3).
Session 2D: Secure Multiparty ComputationCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea590(2) The output distribution Dout of each Reveal gate is limited to
a uniform distribution over binary strings.
If 𝐻 is a circular correlation robust hash function, OneHot′ is strongly
stackable.
Proof. By inspection of the simulator Sobv (Theorem 5.5).
First note that strong stackability items (2–4) hold trivially. OneHot
is projective. Color is formally defined in Section 3, and we define
Key to be the procedure which drops the least significant bit (i.e.
drops the color bit) and retains the remaining bits . The indistin-
guishability of pairs of keys in 𝑑 follows from the fact that 𝐻 is a
circular correlation robust hash function (see Equation (3)).
Now, it remains to prove strong stackability item (1). Examine
the obliviousness simulator Sobv (Theorem 5.5). Note that Sobv
simulates the entire garbling (i.e., all material and wire shares) with
uniform bits with one notable exception: the material used to reveal
𝐸’s output of a Reveal gate is simulated by sampling from that gate’s
output distribution Dout. However, since OneHot′ restricts Dout,
this simulation is also achieved by uniform bits. Since the simulator
simulates all values with uniform bits, item (1) holds.