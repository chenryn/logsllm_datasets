### Executable Test Oracle

Finally, there is the difference between host languages. Java lacks some of the features that are most significant in simplifying the implementation, primarily the ability to encode deeply nested data structures and traverse them via pattern matching, as well as the capability to express local operations in a pure functional style.

### Figure 4: Throughput with Application Data Size

This figure shows the throughput for nqsb-TLS, OpenSSL, and PolarSSL using AES 256 CBC SHA. The scaling of nqsb-TLS is likely due to our use of simple software pipelining in the AES-NI code. In this scenario, nqsb-TLS reaches approximately 84% of OpenSSL's speed.

### Handshake Performance

Handshake performance, summarized in Table 3, is roughly similar across the implementations. We attribute OpenSSL’s advantage to its use of C in protocol handling, while PolarSSL’s disadvantage is due to our use of faster bignum routines provided by GMP. The relatively lower cost nqsb-TLS pays for DH is a result of choosing shorter exponents, matched to the security strength of the group modulus.

### miTLS Performance

We ran miTLS 0.8.1 through Mono 4.0.1.44 on the same test machine. Using the bundled HTTP server, we achieved a peak throughput of 19 MB/s for file transfer using the same cipher suite. Since the Mono cryptography provider only contains C# AES implementations, we exclude it from further analysis. However, the throughput ratio between miTLS and OpenSSL is similar to what the authors of miTLS report [5]. The exact numbers may vary based on the choice of cipher suite, CPU generation, and testing scenario. Overall, our use of OCaml for all but the lowest-level cryptographic primitives does not significantly impact performance.

### Related Work

#### Security Proofs

Several research groups [36, 26, 24, 12, 38] have modeled and formally verified security properties of TLS. Due to the complexity of TLS, most models use a simplified core, and formalizing even these subsets is challenging. Additionally, these works are not very accessible to implementers. 

#### Brittle Implementations of Cryptography Systems

Schneier et al.’s work [43] identified several root causes for software implementing cryptographic systems, including incorrect error handling and flawed API usage. We agree with their principles for software engineering for cryptography and extend this by proposing an approach that includes immutable data, value-passing interfaces, explicit error handling, and a small API footprint.

#### TLS Implementations in High-Level Languages

Several high-level languages include their own TLS stack. For example, Oracle Java ships with JSEE, a memory-safe implementation. However, its overall structure closely resembles C implementations, leading to similar vulnerabilities such as CCS Injection (CVE-2014-0626). There are also TLS implementations in functional languages like Isabelle [30] and Haskell. Both of these experiment with their respective languages' expressivity to give the implementations an essentially imperative formulation, but they lose the clear description of data dependencies and strong separation of layers that nqsb-TLS has.

#### Protocol Specification and Testing

There is extensive literature on protocol specification and testing. We build on ideas from Bishop et al.’s work on TCP [6, 41], where they developed a precise specification for TCP and the Sockets API. Unlike TCP, which has a great deal of internal nondeterminism, the internal nondeterminism needed for TLS can be bounded, allowing us to use simple pure functional programming. Our focus is on an on-the-wire specification rather than endpoint behavior or end-to-end API behavior specifications.

### Conclusion

We have described an experiment in engineering critical security-protocol software using a potentially radical approach. Our focus is on structuring the system into modules and pure functions that can each be understood in isolation, serving dual roles as test-oracle specifications and implementations. Our evaluation suggests that nqsb-TLS is usable in multiple contexts, has reasonable performance, and is a very concise body of code. Our security assessment indicates that it does not suffer from several classes of flaws found in previous TLS implementations.

As further evidence, we applied the same approach to the off-the-record (OTR) security protocol, used for end-to-end encryption in instant messaging protocols. We engineered a usable implementation and reported several inconsistencies in the prose specification. The XMPP client mentioned earlier uses nqsb-TLS for transport layer encryption and our OTR implementation for end-to-end encryption.

While our approach cannot be applied everywhere, the benefits suggest that where it can be, it is well worth doing so. Acknowledgments and references follow.