cutable test oracle.
Finally, there is the difference between host languages.
Java lacks some of the features we found to be most sig-
niﬁcant in simplifying the implementation, chieﬂy the
ability to encode deeply nested data structures and tra-
verse them via pattern-matching, and to express local op-
erations in a pure fashion.
Figure 4:
throughput with application
data size for nqsb-TLS, OpenSSL and PolarSSL, using
AES 256 CBC SHA.
Scaling of
to nqsb-TLS is likely a consequence of our usage of sim-
ple software pipelining in the AES-NI code. nqsb-TLS
reaches about 84% of OpenSSL’s speed in this scenario.
Handshake performance, summarized in Table 3, is
roughly similar. We attribute OpenSSL’s advantage to
their use of C in the protocol handling, and PolarSSL’s
disadvantage to our use of faster bignum routines pro-
vided by GMP. The comparatively smaller cost nqsb-
TLS pays for DH is a result of picking shorter exponents,
matched to the security strength of the group modulus.
We ran miTLS 0.8.1 through Mono 4.0.1.44 on the
same test machine. Using the bundled HTTP server, we
achieve a peak throughput of 19 MB/s for a ﬁle transfer
using the same cipher suite. As the Mono cryptography
provider only contains C# AES implementations, we ex-
clude this implementation from further analysis. We do
note, however, that the throughput ratio between miTLS
and OpenSSL is similar to the one its authors report [5].
The exact numbers are likely to vary with the choice of
cipher suite, which places different weights on hashing
and cipher performance, the CPU generation, which is
utilised to a fuller extent by OpenSSL, and the testing
scenario. The broad picture is that our usage of OCaml
for all but the lowest-level cryptographic primitives is, in
itself, not taking a prohibitive toll on performance.
8 Related Work
Security proofs
Several research groups [36, 26, 24,
12, 38] have modelled and formally veriﬁed security
properties of TLS. Because TLS is a complex protocol,
most models use a simpliﬁed core, and formalising even
these subsets is challenging work which is not very ac-
cessible to an implementer audience. Additionally, these
236  24th USENIX Security Symposium 
USENIX Association
14
Brittle implementations of cryptography systems
Schneier et al.’s work [43] discovered several root causes
for software implementing cryptographic systems, which
explicitly mentions incorrect error handling and ﬂawed
API usage. We agree with their principles for software
engineering for cryptography, and extend this further by
proposing our approach: immutable data, value-passing
interfaces, explicit error handling, small API footprint.
TLS implementations in high-level languages
Sev-
eral high-level languages contain their own TLS stack.
Oracle Java ships with JSEE, a memory-safe implemen-
tation. However its overall structure closely resembles
the C implementations. For example, the state machine
is built around accumulating state by mutations of shared
memory locations, the parsing and validation of certiﬁ-
cates are not clearly separated, and the certiﬁcate vali-
dation logic includes non-trivial control ﬂow. This re-
sulted in high-level vulnerabilities similar in nature to the
ones found in C implementations, such as CCS Injection
(CVE-2014-0626), and its unmanaged exception system
led to several further vulnerabilities [34].
There are at least two more TLS implementations in
functional languages, one in Isabelle [30] and one in
Haskell. Interestingly, both implementations experiment
with their respective languages’ expressivity to give the
implementations an essentially imperative formulation.
The Isabelle development uses a coroutine-like monad to
directly interleave I/O operations with the TLS process-
ing, while the Haskell development uses a monad stack
to both interleave I/O and to implicitly propagate the ses-
sion state through the code. In this way both implementa-
tions lose the clear description of data-dependencies and
strong separation of layers nqsb-TLS has.
Protocol speciﬁcation and testing
There is an ex-
tensive literature on protocol speciﬁcation and testing in
general (not tied to a security context). We build in par-
ticular on ideas from Bishop et al.’s work on TCP [6, 41],
in which they developed a precise speciﬁcation for TCP
and the Sockets API in a form that could be used as a
trace-checker, characterising the de facto standard. TCP
has a great deal of internal nondeterminism, and so
Bishop et al. resorted to a general-purpose higher-order
logic for their speciﬁcation and symbolic evaluation over
that for their trace-checker. In contrast, the internal non-
determinism needed for TLS can be bounded as we de-
scribe in §5, and so we have been able to use simple pure
functional programming, and to arrange the speciﬁcation
so that it is simultaneously usable as an implementation.
We differ also in focussing on an on-the-wire speciﬁ-
cation rather than the endpoint-behaviour or end-to-end
API behaviour speciﬁcations of that work. In contrast to
the Sockets API speciﬁed in POSIX, there is no API for
TLS. Every implementation deﬁnes its custom API, and
many have a compatibility layer for the OpenSSL API.
9 Conclusion
We have described an experiment in engineering critical
security-protocol software using what may be perceived
as a radical approach. We focus throughout on struc-
turing the system into modules and pure functions that
can each be understood in isolation, serving dual roles
as test-oracle speciﬁcation and as implementation, rather
than traditional prose speciﬁcations and code driven en-
tirely by implementation concerns.
Our evaluation suggests that it is a successful exper-
iment: nqsb-TLS is usable in multiple contexts, as test
oracle and in Unix and unikernel applications, it has rea-
sonable performance, and it is a very concise body of
code. Our security assessment suggests that, while it is
by no means guaranteed secure, it does not suffer from
several classes of ﬂaws that have been important in pre-
vious TLS implementations. In this sense, it is at least
not quite so broken as some secure software has been.
In turn, this indicates that our approach has value.
As further evidence of that, we applied the same ap-
proach to the off-the-record [7] security protocol, used
for end-to-end encryption in instant messaging proto-
cols. We engineered a usable implementation and re-
ported several inconsistencies in the prose speciﬁcation.
The XMPP client mentioned earlier uses nqsb-TLS for
transport layer encryption, and our OTR implementation
for end-to-end encryption.
The approach cannot be applied everywhere. The two
obvious limitations are (1) that we rely on a language
runtime to remove the need for manual memory manage-
ment, and (2) that our speciﬁcation and implementation
style, while precise and concise, is relatively unusual in
the wider engineering community. But the beneﬁts sug-
gest that, where it can be applied, it will be well worth
doing so.
Acknowledgements
Parts of this work were sup-
ported by EPSRC Programme Grant EP/K008528/1
(REMS: Rigorous Engineering for Mainstream Systems)
and by the European Unions Seventh Framework Pro-
gramme FP7/20072013 under the User Centric Network-
ing project (no.
611001). We also thank IPredator
(https://ipredator.se) for lending bitcoins for our
Pi˜nata and hosting it, and the MirageOS team and the
anonymous reviewers for their valuable feedback.
References
[1] BARNES, R., THOMSON, M., PIRONTI, A., AND LANGLEY, A.
Deprecating secure sockets layer version 3.0. RFC 7568, 2015.
[2] BEURDOUCHE, B., BHARGAVAN, K., DELIGNAT-LAVAUD, A.,
FOURNET, C., KOHLWEISS, M., PIRONTI, A., STRUB, P.-Y.,
USENIX Association  
24th USENIX Security Symposium  237
15
AND ZINZINDOHOUE, J. K. A messy state of the union: Taming
the composite state machines of TLS. In Security and Privacy
(2015), IEEE.
[3] BHARGAVAN, K., DELIGNAT-LAVAUD, A., FOURNET, C.,
PIRONTI, A., AND STRUB, P.-Y. Triple handshakes and cookie
cutters: Breaking and ﬁxing authentication over TLS. In Security
and Privacy (2014), IEEE.
[4] BHARGAVAN, K., DELIGNAT-LAVAUD, A., PIRONTI, A., LAN-
GLEY, A., AND RAY, M. Transport Layer Security (TLS) Session
Hash and Extended Master Secret Extension, Apr. 2015.
[5] BHARGAVAN, K., FOURNET, C., KOHLWEISS, M., PIRONTI,
A., AND STRUB, P.-Y. Implementing TLS with veriﬁed crypto-
graphic security. In Security and Privacy (2013).
[6] BISHOP, S., FAIRBAIRN, M., NORRISH, M., SEWELL, P.,
SMITH, M., AND WANSBROUGH, K. Rigorous speciﬁcation and
conformance testing techniques for network protocols, as applied
to TCP, UDP, and Sockets. In SIGCOMM (Aug. 2005).
[7] BORISOV, N., GOLDBERG, I., AND BREWER, E. Off-the-record
communication, or, why not to use PGP. In WPES (2004), ACM.
[8] BRUBAKER, C., JANA, S., RAY, B., KHURSHID, S., AND
SHMATIKOV, V. Using Frankencerts for automated adversarial
testing of certiﬁcate validation in SSL/TLS implementations. In
Security and Privacy (2014), IEEE.
[9] COOPER, D., SANTESSON, S., FARRELL, S., BOEYEN, S.,
HOUSLEY, R., AND POLK, W. Internet X.509 Public Key Infras-
tructure Certiﬁcate and Certiﬁcate Revocation List (CRL) Proﬁle.
RFC 5280, May 2008.
[10] CROSBY, S. A., AND WALLACH, D. S. Denial of service via
algorithmic complexity attacks. In USENIX Security (2003).
[11] DE RUITER, J., AND POLL, E. Protocol state fuzzing of TLS
implementations. In USENIX Security (2015).
[12] D´IAZ, G., CUARTERO, F., VALERO, V., AND PELAYO, F. Auto-
matic veriﬁcation of the TLS handshake protocol. In Symposium
on Applied Computing (2004), ACM.
[13] DIERKS, T., AND ALLEN, C. The TLS Protocol Version 1.0.
RFC 2246, Jan. 1999. Obsoleted by RFC 4346.
[14] DIERKS, T., AND RESCORLA, E. The Transport Layer Security
(TLS) Protocol Version 1.1. RFC 4346, Apr. 2006. Obsoleted by
RFC 5246.
[15] DIERKS, T., AND RESCORLA, E. The Transport Layer Security
(TLS) Protocol Version 1.2. RFC 5246, Aug. 2008.
[16] DINGLEDINE, R., MATHEWSON, N., AND SYVERSON, P. Tor:
The second-generation onion router. In USENIX Security (2004).
[17] DODIS, Y., SHAMIR, A., STEPHENS-DAVIDOWITZ, N., AND
WICHS, D. How to eat your entropy and have it too – optimal
recovery strategies for compromised RNGs. Cryptology ePrint
Archive, Report 2014/167, 2014.
[18] EVERSPAUGH, A., ZHAI, Y., JELLINEK, R., RISTENPART, T.,
AND SWIFT, M. Not-so-random numbers in virtualized Linux
and the Whirlwind RNG. In Security and Privacy (2014), IEEE.
[19] FARDAN, N. J. A., AND PATERSON, K. G. Lucky thirteen:
Breaking the TLS and DTLS record protocols. In Security and
Privacy (2013), IEEE.
[20] FERGUSON, N., AND SCHNEIER, B. Practical Cryptography,
1 ed. John Wiley & Sons, Inc., 2003.
[21] FROST, R., AND LAUNCHBURY, J. Constructing natural lan-
guage interpreters in a lazy functional language. The Computer
Journal (Apr. 1989).
[22] GAZAGNAIRE, T., AND HANQUEZ, V. OXenstored: An efﬁcient
hierarchical and transactional database using functional program-
ming with reference cell comparisons. In ICFP (2009), ACM.
[23] GEORGIEV, M.,
IYENGAR, S., JANA, S., ANUBHAI, R.,
BONEH, D., AND SHMATIKOV, V. The most dangerous code in
the world: Validating SSL certiﬁcates in non-browser software.
In CCS (2012), ACM.
[24] HE, C., SUNDARARAJAN, M., DATTA, A., DEREK, A., AND
MITCHELL, J. C. A modular correctness proof of IEEE 802.11I
and TLS. In CCS (2005), ACM.
[25] HENINGER, N., DURUMERIC, Z., WUSTROW, E., AND HAL-
DERMAN, J. A. Mining your Ps and Qs: Detection of widespread
weak keys in network devices. In USENIX Security (2012).
[26] JAGER, T., KOHLAR, F., SCH ¨AGE, S., AND SCHWENK, J. On
In CRYPTO
the security of TLS-DHE in the standard model.
(2012).
[27] KALOPER-MERˇSINJAK, D., MEHNERT, H., MADHAVAPEDDY,
A., AND SEWELL, P. Supplementary material doi: 10.5281/zen-
odo.19160, June 2015.
[28] KOCHER, P. Timing attacks on implementations of Difﬁe-
Hellman, RSA, DSS, and other systems. In CRYPTO. 1996.
[29] LANGLEY, A. A TLS ClientHello padding extension, Feb. 2015.
[30] LOCHBIHLER, A., AND Z ¨UST, M. Programming TLS in Is-
abelle/HOL. In Isabelle (2014).
[31] MADHAVAPEDDY, A., MORTIER, R., ROTSOS, C., SCOTT, D.,
SINGH, B., GAZAGNAIRE, T., SMITH, S., HAND, S., AND
CROWCROFT, J. Unikernels: Library operating systems for the
cloud. In ASPLOS (2013), ACM.
[32] MADHAVAPEDDY, A., AND SCOTT, D. J. Unikernels: The rise
of the virtual library operating system. Commun. ACM 57, 1 (Jan.
2014), 61–69.
[33] METTLER, A., WAGNER, D., AND CLOSE, T. Joe-e: A security-
oriented subset of Java. In NDSS (2010).
[34] MEYER, C., SOMOROVSKY, J., WEISS, E., SCHWENK, J.,
SCHINZEL, S., AND TEWS, E. Revisiting SSL/TLS implementa-
tions: New Bleichenbacher side channels and attacks. In USENIX
Security (2014).
[35] MOELLER, B., AND LANGLEY, A. TLS Fallback Signaling Ci-
pher Suite Value (SCSV) for Preventing Protocol Downgrade At-
tacks. RFC 7507, Apr. 2015.
[36] MORRISSEY, P., SMART, N. P., AND WARINSCHI, B. A mod-
In ASI-
ular security analysis of the TLS handshake protocol.
ACRYPT (2008).
[37] NATIONALE
DE
LA
D’INFORMATION, A.
langages fonctionnels, 2013.
S ´ECURIT ´E
SYST `EMES
´Etude de la s´ecurit´e intrins´eque des
DES
[38] PAULSON, L. C. Inductive analysis of the internet protocol TLS.
ACM Transactions on Information and System Security 2 (1999).
[39] POPOV, A. Prohibiting RC4 Cipher Suites. RFC 7465, Feb. 2015.
[40] RESCORLA, E., RAY, M., DISPENSA, S., AND OSKOV, N.
Transport Layer Security (TLS) Renegotiation Indication Exten-
sion. RFC 5746, Feb. 2010.
[41] RIDGE, T., NORRISH, M., AND SEWELL, P. A rigorous ap-
proach to networking: TCP, from implementation to protocol to
service. In FM (May 2008).
[42] SAINT-ANDRE, P., AND HODGES, J. Representation and Veriﬁ-
cation of Domain-Based Application Service Identity within In-
ternet Public Key Infrastructure Using X.509 (PKIX) Certiﬁcates
in the Context of Transport Layer Security (TLS). RFC 6125,
Mar. 2011.
[43] SCHNEIER, B., FREDRIKSON, M., KOHNO, T., AND RIS-
TENPART, T. Surreptitiously weakening cryptographic systems.
Cryptology ePrint Archive, Report 2015/097, 2015.
[44] WARFIELD, A., HAND, S., FRASER, K., AND DEEGAN, T. Fa-
In USENIX Annual
cilitating the development of soft devices.
Technical Conference (2005).
238  24th USENIX Security Symposium 
USENIX Association
16