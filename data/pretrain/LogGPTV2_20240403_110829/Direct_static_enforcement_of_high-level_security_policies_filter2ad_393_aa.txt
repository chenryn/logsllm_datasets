title:Direct static enforcement of high-level security policies
author:Qihua Wang and
Ninghui Li
Direct Static Enforcement of High-Level Security Policies
Qihua Wang
PI:EMAIL
Ninghui Li
PI:EMAIL
Center for Education and Research in Information Assurance and Security
and Department of Computer Science
Purdue University
ABSTRACT
A high-level security policy states an overall safety requirement for
a sensitive task. One example of a high-level security policy is a
separation of duty policy, which requires a sensitive task to be per-
formed by a team of at least k users. Recently, Li and Wang [6]
proposed an algebra for specifying a wide range of high-level se-
curity policies with both qualiﬁcation and quantity requirements on
users who perform a task. In this paper, we study the problem of di-
rect static enforcement of high-level security policies expressed in
this algebra. We formally deﬁne the notion of a static safety policy,
which requires that every set of users together having all permis-
sions needed to complete a sensitive task must contain a subset that
satisﬁes the corresponding security requirement expressed as a term
in the algebra. The static safety checking problem asks whether an
access control state satisﬁes a given high-level policy. We study
several computational problems related to the static safety check-
ing problem, and design and evaluate an algorithm for solving the
problem.
1.
INTRODUCTION
A high-level security policy states an overall safety requirement
for a sensitive task. One well-known high-level security policy is
Separation of Duty (SoD). In its simplest form, an SoD policy states
that a sensitive task should be performed by two different users act-
ing in cooperation. More generally, an SoD policy requires the co-
operation of at least k (k ≥ 2) different users to complete the task.
SoD is a high-level policy because it does not place restrictions on
which users are allowed to perform which individual steps in a sen-
sitive task, but instead states an overall requirement that must be
satisﬁed by any set of users that together complete the task. An
SoD policy states only a quantity requirement and does not express
qualiﬁcation requirements on users who complete a task. Recently,
Li and Wang [6] proposed an algebra that enables the speciﬁcation
of high-level policies that combine qualiﬁcation requirements with
quantity requirements. To use the algebra to specify high-level se-
curity policies, the administrators ﬁrst identify sensitive tasks and
then, for each sensitive task t, speciﬁes a security policy of the
form (cid:104)t, φ(cid:105), where φ is a term in the algebra. This policy means
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS’07, March 20-22, 2007, Singapore.
Copyright 2007 ACM 1-59593-574-6/07/0003 ...$5.00.
214
that any set of users (we call userset) that together complete the
task must satisfy the term φ. The algebra has three kinds of atomic
terms: a role (which implicitly identiﬁes a set of users), the key-
word All (which refers to the set of all users), and an explicitly
listed set of users. Two unary operators, ¬ and +, and four bi-
nary operators, (cid:116), (cid:117), (cid:175), and ⊗, can be used with these atomic
terms to form more sophisticated terms. Li and Wang [6] gave
many examples to illustrate the expressive power of the algebra.
For instance, a simple SoD policy that requires at least two differ-
ent users can be expressed using the term (All ⊗ All+). A more
sophisticated policy that requires two Clerks plus a third user who
is either a Treasurer or a Manager can be expressed using the
term (Clerk ⊗ Clerk ⊗ (Treasurer (cid:116) Manager)).
A high-level policy can be enforced either statically or dynami-
cally. In dynamic enforcement, one identiﬁes all steps in perform-
ing the task, and maintains, for each instance of the task, the history
of which user has performed which steps. When a user requests to
perform the next step, the request is authorized only when the over-
all security requirement can be met by allowing this user to perform
the next step. In static enforcement, one identiﬁes the set of permis-
sions that are necessary to perform the task, and ensures that each
access control state that can be reached is safe with respect to the
policy for the task. An access control state is safe if each user-
set such that users in the set together have all the permissions for
the task (in which case we say the userset covers the permissions
for the task) satisﬁes the security requirement. Static enforcement
can be achieved either directly or indirectly.
In direct static en-
forcement, before making changes to the access control state, one
checks that the resulting state is safe and makes the change only
when it is safe. In indirect static enforcement, one speciﬁes con-
straints so that any access control state satisfying the constraints is
safe and thus only needs to check whether a resulting state satisﬁes
the constraints during state changes.
In this paper we study direct static enforcement of policies spec-
iﬁed in the algebra proposed by Li and Wang [6]. Direct static
enforcement of SoD policies, which are a subclass of the policies
that can be speciﬁed in the algebra, has been studied by Li et al [5].
It has been shown that checking whether an access control state
satisﬁes an Static SoD (SSoD) policy, i.e., whether every userset
that covers the permissions for the task contains at least k users,
is coNP-complete [5]. As a policy speciﬁed in the algebra can
be more expressive and sophisticated than an SSoD policy, it is
expected that the problem considered in this paper is also in an in-
tractable computational complexity class. Computationally expen-
sive notwithstanding, we argue that the study of direct enforcement
of static high-level policies should be given higher priority than
indirect static enforcement and dynamic enforcement for the fol-
lowing reasons. First, direct static enforcement is the most simple
and straightforward enforcement mechanism for high-level security
policies. Its performance will be used as a benchmark for compari-
son when evaluating other enforcement mechanisms. Second, even
though direct static enforcement is computationally intractable in
theory, it is interesting and necessary to study its performance for
instances that are likely to occur practice. Third, direct enforcement
cannot be entirely replaced by indirect enforcement.
It is often-
times difﬁcult or even impossible to generate efﬁciently-veriﬁable
constraints to precisely capture a high-level policy. For example,
Li et al. [5] studied indirect enforcement of using Static Mutually
Exclusive Roles (SMER) to enforce SSoD policies in the context
of role-based access control (RBAC), and showed that there exist
SSoD policies such that no set of SMER constraints can precisely
capture them [5]. Most of the time, the set of constraints generated
for a security policy is more restrictive than the policy itself. That
is to say, some access control states that are safe with respect the
security policy will be ruled out by the constraints. In situations
where precise enforcement is desired, direct static enforcement is
more desirable than indirect static enforcement. We consider dy-
namic enforcement and indirect static enforcement interesting fu-
ture research problems.
In direct static enforcement, we need to solve the following prob-
lem: Given an access control state, determine whether each userset
that covers all permissions for a task is safe with respect to the term
associated with the task, we call this the Static Safety Checking
problem. To solve this, we must ﬁrst solve that problem of check-
ing whether a given userset is safe with respect to a term; we call
this the Userset-Term Safety Checking problem.
Our contributions in this paper are as follows:
1. We formally deﬁne the notion of static safety polices and the
Static Safety Checking problem. We also give a necessary
and sufﬁcient condition for a static safety policy to be satis-
ﬁable.
2. We study the computational complexity of the Userset-Term
Safety Checking problem.
3. We study computational complexity of the Static Safety
Checking problem. We show that the Static Safety Checking
problem is both NP-hard and coNP-hard and is in NPNP,
a complexity class in the Polynomial Hierarchy. Further-
more, we show that several subcases of the problem remain
intractable. Finally, we identify syntactic restrictions so that
if the term in a safety policy satisﬁes the restrictions, then
determining whether a state satisﬁes the policy can be solved
in polynomial time.
4. We present an algorithm for the Static Safety Checking prob-
lem. Our algorithm uses pruning techniques that reduce the
number of users and usersets needed to be considered. Fur-
thermore, we design an abstract representation of usersets
that can reduce the memory storage requirement and acceler-
ate set operations, which leads to a fast bottom-up approach
for solving the Userset-Term Safety Checking problem.
The remainder of this paper is organized as follows. In Section 2,
we review the algebra. In Section 3, we deﬁne static safety policy,
the Static Safety Checking problem and the notion of policy satisﬁ-
ability. We present computational complexities of the Static Safety
Checking problem in Section 4, and an algorithm for the problem
as well as its evaluation in Section 5. We discuss related work in
Section 6 and conclude in Section 7.
2. PRELIMINARY
In this section, we give a brief overview of the algebra intro-
duced in [6] and then discuss potential enforcement mechanisms
for policies speciﬁed in the algebra. The algebra is motivated by
the following limitation of SoD policies: In many situations, it is
not enough to require only that k different users be involved in
a sensitive task; there are also minimal qualiﬁcation requirements
for these users. For example, one may want to require users that are
involved to be physicians, certiﬁed nurses, certiﬁed accountants, or
directors of a company. Previous work addresses this by specifying
such requirements at individual steps of a task. For example, if a
policy requires a manager and two clerks to be involved in a task,
one may divide the task into three steps and require two clerks to
each perform step 1 and step 3, and a manager to perform step 2.
This approach, however, results in the loss of the several important
advantages offered by a higher-level policy. The algebra enables
one to specify, at a high-level, a wide range of security policies with
both qualiﬁcation and quantity requirements on users who perform
a task. For more information on the algebra beyond that in this
section, readers are referred to [6].
We use U to denote the set of all users and R to denote the set of
all roles. In the algebra, a role is simply a named set of users. The
notion of roles can be replaced by groups or user attributes.
Deﬁnition 1 (Terms in the Algebra). Terms in the algebra are de-
ﬁned as follows:
• An atomic term takes one of the following three forms: a role
r ∈ R, the keyword All, or a set S ⊆ U of users.
• An atomic term is a term; furthermore, if φ1 and φ2 are
1 , (φ1 (cid:116) φ2), (φ1 (cid:117) φ2), (φ1 ⊗ φ2), and
terms, then ¬φ1, φ+
(φ1 (cid:175) φ2) are also terms, with the following restriction: For
¬φ1 or φ+
1 to be a term, φ1 must be a unit term, that is, it
must not contain +, ⊗, or (cid:175).
The unary operator ¬ has the highest priority, followed by the unary
operator +, then by the four binary operators (namely (cid:117), (cid:116), (cid:175), ⊗),
which have the same priority.
Before formally assigning meanings to terms, it is necessary to as-
sign meanings to the roles used in the term. The following deﬁni-
tion introduces the notion of conﬁgurations.
Deﬁnition 2 (Conﬁgurations). A conﬁguration is given by a pair
(cid:104)U, UR(cid:105), where U ⊆ U denotes the set of all users in the conﬁg-
uration, and UR ⊆ U × R determines role memberships. We say
that u is a member of the role r under a conﬁguration (cid:104)U, UR(cid:105) if
and only if (u, r) ∈ UR.
Deﬁnition 3 (Satisfaction of a Term). Given a conﬁguration
(cid:104)U, UR(cid:105), we say that a userset X satisﬁes a term φ under (cid:104)U, UR(cid:105)
if and only if one of the following holds1:
• The term φ is the keyword All, and X is a singleton set {u}
such that u ∈ U.
• The term φ is a role r, and X is a singleton set {u} such that
(u, r) ∈ UR.
• The term φ is a set S of users, and X is a singleton set {u}
such that u ∈ S.
1We sometimes say X satisﬁes φ, and omit “under (cid:104)U, UR(cid:105)” when
it is clear from the context.
215
• The term φ is of the form ¬φ0 where φ0 is a unit term, and
X is a singleton set that does not satisfy φ0.
• The term φ is of the form φ+
0 where φ0 is a unit term, and
X is a nonempty userset such that for every u ∈ X, {u}
satisﬁes φ0.
• The term φ is of the form (φ1 (cid:116) φ2), and either X satisﬁes
φ1 or X satisﬁes φ2.
• The term φ is of the form (φ1 (cid:117) φ2), and X satisﬁes both φ1
and φ2.
• The term φ is of the form (φ1 ⊗ φ2), and there exist usersets
X1 and X2 such that X1 ∪ X2 = X, X1 ∩ X2 = ∅, X1
satisﬁes φ1, and X2 satisﬁes φ2.
• The term φ is of the form (φ1 (cid:175) φ2), and there exist usersets
X1 and X2 such that X1 ∪ X2 = X, X1 satisﬁes φ1, and
X2 satisﬁes φ2. This differs from the deﬁnition for ⊗ in that
it does not require X1 ∩ X2 = ∅.
It has been shown that the four binary operators are commuta-
tive and associative. We are thus able to omit some parenthesis
when writing the terms without introducing ambiguity. Note that
term satisfaction does not have the monotonicity property. In other
words, a userset X satisfying a term φ does not imply that any su-
perset of X also satisﬁes φ. This design was chosen in [6] because
it has more expressive power. For example, a policy that requires
(1) everyone involved in a task must be a Accountant, can be ex-
pressed as Accountant+, and (2) there must be at least two users
involved, can be expressed as (Accountant⊗Accountant+). The
policy cannot be expressed in an algebra that has the monotonicity
property, because this property mandates that a set containing two
accountants and one non-accountant user (which is a superset of
the set containing just the two accountants) satisﬁes the term.
The following examples demonstrate the expressive power of the