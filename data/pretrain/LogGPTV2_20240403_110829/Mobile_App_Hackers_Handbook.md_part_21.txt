CHAPTER 6
Analyzing Android Applications
The Android Operating System (OS) is used by many vendors on phones and tablets ranging from low-cost
budget devices to flagships. Due to its open-source nature it can be found on many other devices including
entertainment systems, TVs, e-readers, netbooks, smartwatches, car computers, and gaming consoles.
Android is the mobile platform that has the biggest market share out of all the mobile operating systems
available. With this esteemed achievement comes the attention of many hackers around the world wanting to
expose security flaws in the OS and popular applications on the platform. Although many app stores are
available for Android users, observing only the official Google Play Store statistics from AppBrain
(http://www.appbrain.com/stats/number-of-android-apps) reveals that Google Play Store holds more than 1.1
million applications for download. Vulnerabilities are constantly being discovered in popular applications with
varying degrees of severity, and due to the maturity of tools and information about finding these vulnerabilities,
this trend looks to be ever increasing.
This chapter presents some fundamental concepts of Android including its application structure, security model,
and infrastructure central to its operation. It also delves deeper into the intricacies of the Android platform and
ways that you can explore these by setting up a testing environment and making use of popular tools. The goal
of this chapter is to provide you with the background knowledge required to find and exploit security flaws in
applications.
Creating Your First Android Environment
The first step in building your ideal testing environment is downloading the Android Software Development Kit
(SDK). Whether you plan to use an emulator or physical device, the Android SDK provides many tools that are
essential to getting started with Android hacking. You can download the SDK tools from
http://developer.android.com/sdk/ for your OS. The two options are to download the entire Android
Developer Tools package, which includes an integrated development environment (IDE) and all the tools, or
download an archive containing only the tools. For the large majority of testing, having only the tools and not a
full development environment setup should suffice. However, occasionally you may still have to write a custom
application to test a certain condition or create a proof of concept. We highly recommended using Linux as your
base OS when testing Android because many of the tools that you will be experimenting with in subsequent
chapters were originally written for Linux, and have shown to be less error-prone on Linux. However, you can
ignore our bias and use other operating systems successfully. If you are new to Linux, it is recommended that
you use the Ubuntu distribution (see http://www.ubuntu.com/). This is because of the wealth of information
and tutorials available for newcomers.
After extracting the SDK tools, place the entire tools/ directory on your path. In Linux, you do so by adding the
following line to your .bashrc in your home folder and then opening a new terminal:
export PATH=$PATH:/path/to/sdk/tools/:/path/to/sdk/platform-tools/
This command appends the provided folders to your path. Some hackers prefer to create symbolic links to
specific binaries in a directory that is already in their path (like /usr/local/bin), which you can do as follows:
# cd /usr/local/bin
# ln –s /path/to/binary
The following is a shortened listing of Android SDK tools to get you started:
adb—The tool that is used most to interact with devices and emulators to install new applications, gain a
shell on the system, read system logs, forward network ports, or do a multitude of other useful tasks.
monitor—This tool is useful for peeking into running processes on a device and taking screenshots of the
device’s screen. It is useful for penetration testers who need to gain evidence of an action for reporting
purposes.
android—You use this tool to manage and create new Android emulators.
aapt—This tool converts assets into binary form to be packaged with applications. It can also perform
reverse-engineering tasks that allow someone with only the compiled application package to convert binary
application resources into readable text.
NOTE
You will need to have Java JDK 1.6 installed to use the SDK tools. On a clean Ubuntu system, you can
install OpenJDK using
$ sudo apt-get install openjdk-6-jdk
A 64-bit system requires an additional installation of 32-bit packages needed by the SDK tools. You can install
these on Ubuntu 13.04 upward by using
$ sudo dpkg –add-architecture i386
$ sudo apt-get update
$ sudo apt-get install libncurses5:i386 libstdc++6:i386 zlib1g:i386
Prior to that version of Ubuntu, you use the following command:
$ sudo apt-get install ia32-libs
Android provides an excellent set of emulators for all versions from the most current all the way back to
Android 1.5. To create your very first Android emulator that runs Android 4.4.2 KitKat, run the following to
display the Android SDK Manager interface:
$ android sdk
You can use this to install SDK platforms, system images, and tools. Figure 6.1 shows the user interface.
Figure 6.1 From this Android SDK Manager interface you can install SDK platforms and tools.
Select Android 4.4.2 (API 19), click Install, and agree to the user license. It will now download and install all
required packages. You are now able to create a KitKat emulator by running the Android Virtual Device (AVD)
Manager:
$ android avd
On the AVD Manager’s user interface, click the New button. The configuration in Figure 6.2 is fit for most
purposes but you can customize it to suit a particular testing requirement.
Figure 6.2 You can customize your emulator configuration. Here is just one example.
Your emulator should now be created. You can start it by clicking the Start button on the AVD manager or
running the following from a terminal if you know the name of your created AVD:
$ emulator -avd kitkat
After the emulator launches, list all connected Android devices on your computer by using one of the included
SDK tools named ADB (Android Debug Bridge):
$ adb devices
To get an interactive shell on the listed device issue the following command:
$ adb -s device_id shell
If only a single device is connected, you can omit the -s parameter. If you have only a single emulator open and
a connected physical device, you can also omit the -s parameter and use -e (emulator) and -d (device) to
interact with each, respectively. ADB will be used for a number of tasks on Android, and we advise you to take
the time to learn all of its functionality and syntax.
You might immediately notice some minor differences between an actual device and an emulator, such as
Emulators provide root access by default whereas actual devices do not. The exact way in which Android
determines the privilege level of ADB is through a configuration option named ro.secure which will be
explored in Chapter 8.
Emulators do not operate correctly for certain applications that make use of physical hardware, such as USB,
headphones, Wi-Fi, Bluetooth, and so on.
You are not able to place or receive real phone calls on an emulator. However, an interface exists that allows
you to emulate this to a degree.
Emulator restrictions are documented at
http://developer.android.com/tools/devices/emulator.html#limitations. When performing testing on an
Android application, you should have multiple devices at hand in addition to the emulators to accommodate for
the differences between them.
The Android emulator provides a way for users to emulate a number of events, such as receiving an SMS or
phone call through a console interface. Locate the console by observing the output of adb devices in the
previous command. For example, an emulator named emulator-5554 indicates that it has a listening port on
TCP 5554 on the local host. Use a telnet or netcat (nc) client to access the console interface. Most Linux
distributions come with nc, which you use to access the console interface as follows:
$ nc localhost 5554
Android Console: type 'help' for a list of commands
OK
help
Android console command help:
help|h|? print a list of commands
event simulate hardware events
geo Geo-location commands
gsm GSM related commands
cdma CDMA related commands
kill kill the emulator instance
network manage network settings
power power related commands
quit|exit quit control session
redir manage port redirections
sms SMS related commands
avd control virtual device execution
window manage emulator window
qemu QEMU-specific commands
sensor manage emulator sensors
Some other more technical differences between the Android emulator and physical devices are not so apparent
on first observation. Writing an exploit for a memory corruption vulnerability will quickly reveal these
differences. Exploitation at this level is an advanced topic that would require a separate publication on its own.
However, all that is important is that you realize that at the lowest levels of operation, an emulator is not an
exact replica of how Android runs on a real device, even though it may feel that way. Often, exploits that work
on an emulator may require significant changes to work on an actual device.
Alternatives other than using the emulator that comes with the Android SDK are available. Popular ones include
Genymotion (http://www.genymotion.com/)
Virtualbox running Android x86 (http://www.android-x86.org/)
Youwave (https://youwave.com)
WindowsAndroid (http://windowsandroid.en.softonic.com/)
These emulators run x86 versions of Android and some applications that contain native code may not support
this architecture. However, for exploring Android to understand how it works, they are useful and some may run
quicker than the Google emulators. However, it is still the author’s preference to use the official Android
emulator as it is always guaranteed to be unmodified.
For testing purposes, using a physical Android device may be better than using an emulator because of emulator
speed issues or hardware requirements such as Wi-Fi or Bluetooth. As opposed to other mobile platforms where
jailbreaking your testing device is essential, you can do a surprising amount of testing or hacking without root
access on an Android device. However, some actions cannot be performed or take longer to perform without
having root access on the device and so having root access is always advised. More concrete examples of some of
the constraints of assessing an application without having root access will be explored in later chapters. The
Internet offers many guides on ways to root your specific device. An overview of typical ways to root an Android
device appears later in this chapter in the “Rooting Explained” section.
Understanding Android Applications
The majority of users experience Android applications through downloading them from the Play Store,
reviewing the permission requirements presented to them (or not), and then installing. After the application has
been installed, a new home screen icon appears that allows them to open the application, just as the developer
intended. As a technical person, you should not feel satisfied with not knowing exactly how and why installation
worked. What happened behind the scenes when you clicked the button to install that application? How did this
application reach your device? How did it go from a packaged download to an installed application that you can
use securely? These are all questions that you need to answer before you can be satisfied with moving onto
assessing Android applications.
Reviewing Android OS Basics
Before exploring the weird and wonderful world of Android applications, take a step back and understand how
the operating system functions as a whole. You can view the Android OS as having two distinct sides to it: a
stripped-down and modified Linux kernel and an application virtual machine that runs Java-like applications.
The differences between the mainline Linux kernel and the Android kernel have varied over the years and have
started to lessen, but fundamental differences between how conventional Linux and Android operate remain.
On conventional Linux, applications that are started by a user are run under that user’s context. This model
relies on a user’s not installing malicious software on her computer because there are no protection
mechanisms against accessing files that are owned by the same user that you are running as. In contrast to
conventional Linux computing, each application that is installed on an Android device is assigned its own
unique user identifier (UID) and group identifier (GID). In certain instances this statement does not hold true
and applications can run under the same user, but these are covered later in this chapter under the “Application
Sandbox” section. A snipped output of running the ps command to display information about running processes
on an Android device is shown here:
shell@android:/ $ ps
USER PID PPID VSIZE RSS WCHAN PC NAME
root 1 0 640 496 c00bd520 00019fb8 S /init
...
root 46 1 4660 1200 ffffffff b6f61d14 S /system/bin/vold
root 48 1 9772 1268 ffffffff b6f1fd14 S /system/bin/netd
...
root 52 1 225052 39920 ffffffff b6ecb568 S zygote
...
system 371 52 307064 46084 ffffffff b6ecc5cc S system_server
u0_a7 424 52 255172 45060 ffffffff b6ecc5cc S com.android.systemui
...
radio 520 52 259604 25716 ffffffff b6ecc5cc S com.android.phone
u0_a8 534 52 248952 56996 ffffffff b6ecc5cc S com.android.launcher
u0_a9 789 52 244992 20612 ffffffff b6ecc5cc S com.android.mms
u0_a16 819 52 246240 20104 ffffffff b6ecc5cc S com.android.calendar
...
u0_a37 1419 52 233948 17132 ffffffff b6ecc5cc S com.svox.pico
root 1558 61 928 496 c0010008 b6f57fa0 S /system/bin/sh
u0_a52 1581 52 238060 25708 ffffffff b6ecc5cc S com.mwr.dz
u0_a52 1599 52 240328 27076 ffffffff b6ecc5cc S com.mwr.dz:remote
...
root 14657 1558 1236 464 00000000 b6f0b158 R ps
In this output, note that applications are running as different users. Newly installed applications are assigned
UIDs sequentially from 10000 onward (until a maximum of 99999). You can observe this configuration in the
Android source at
https://android.googlesource.com/platform/system/core/+/master/include/private/android_filesystem_config.h
The user named u0_a0 has UID 10000, and similarly, a user named u0_a12 has UID 10012. Every Android
application has to be given a unique package name by its developer. The naming convention for these packages
should be all lowercase and the reverse Internet domain name of the organization that developed it. For
instance, if an application is named “battery saver” and it was developed by the fictitious “Amazing Utils”
company then perhaps they could name the package com .amazingutils.batterysaver. This would almost
guarantee a unique package name and any other application created by this organization could also have the
prefix com.amazingutils that would allow logical grouping of their applications.
If you were to install this application on your device, you would see that it assigns a private data directory at the
following location on your device’s filesystem. On disk this may look something like the following:
shell@android:/ # ls -l /data/data/
...
drwxr-x--x u0_a46 u0_a46 2014-04-10 10:41
com.amazingutils.batterysaver
...
Notice that the owner of the folder is the newly created user for that application (u0_a46, which translates to
UID 10046).
The Dalvik Virtual Machine (DVM) was specifically designed for the Android platform and is unique to it. The
main reason for its existence is that it was designed to run on hardware with processing and memory
constraints and is much lighter than the normal Java Virtual Machine. It was designed in a way that allows
many Dalvik VMs to be run at the same time in a memory-efficient manner. The code that runs on it is written
and compiled to Java classes and then converted into a single DEX file using the dx SDK utility. The following is
an example of compiling a simple Java JAR for Android without using an IDE. First, create a file named
Test.java with the following content:
class Test
{
public static void main(String[] args)
{
System.out.println("It works! :D");
}
}
Issue the following commands that will compile the class to normal Java bytecode, and then use the dx utility to
convert it to a JAR that contains Dalvik-compatible bytecode.
$ javac Test.java
$ dx –dex –output=test.jar Test.class
WARNING
You need to use Java JDK6 and have it configured as your default for javac. Newer Java JDKs produce
bytecode that is incompatible with the dx tool.
The JAR is now compiled and can be pushed to the device and executed using the dalvikvm or app_process
binaries on the device. The arguments provided to these binaries tell the Dalvik VM to look for the class named
Test in /data/local/tmp/test.jar and execute the main function.
$ adb push test.jar /data/local/tmp
$ adb shell dalvikvm -cp /data/local/tmp/test.jar Test
It works :D
The previous code does not produce a full-fledged, installable application on Android. You must follow Android
package conventions and have the SDK automatically package your code into an installable Android package
that can be deployed onto a device. This example does, however, demonstrate the close link between Java and
Dalvik that exists. This could help Java developers transition into the world of Android and its internals.
Intricate runtime internals are explored later in this chapter in “Looking Under the Hood.” In addition to this,
Android 4.4 introduced a runtime replacement for Dalvik, named ART (Android Runtime), which promised to
improve the speed of applications drastically.
Getting to Know Android Packages
An Android package is a bundle that gets installed on an Android device to provide a new application. This
section will explore the structure of packages and different ways that exist to install them on a device.
Observing the Structure of a Package
Android applications are distributed in the form of a zipped archive with the file extension of .apk, which stands
for Android Package. The official mime-type of an Android Package is application/vnd.android.package-
archive. These packages are nothing more than zip files containing the relevant compiled application code,
resources, and application metadata required to define a complete application. According to Google’s
documentation at http://developer.android.com/tools/building/index.html, an APK is packaged by
performing the following tasks:
An SDK tool named aapt (Android Asset Packaging Tool) converts all the XML resource files included in the
application to a binary form. R.java is also produced by aapt to allow referencing of resources from code.
A tool named aidl is used to convert any .aidl files (explored in Chapter 7 in “Attacking Insecure Services”)
to .java files containing a converted representation of it using a standard Java interface.
All source code and converted output from aapt and aidl are compiled into .class files by the Java 1.6
compiler. This requires the android.jar file for your desired API version to be in the CLASSPATH environment
variable.
The dx utility is used to convert the produced .class files and any third-party libraries into a single
classes.dex file.
All compiled resources, non-compiled resources (such as images or additional executables), and the
application DEX file are used by the apkbuilder tool to package an APK file. More recent versions of the SDK
have deprecated the standalone apkbuilder tool and included it as a class inside sdklib.jar. The APK file is
signed with a key using the jarsigner utility. It can either be signed by a default debug key or if it is going to
production, it can be signed with your generated release key.