 "nonResourcePath": "*" 
 }
}
```
下一个例子将给予用户`admin`对所有名称空间的完全访问权:
```
{
 "apiVersion": "abac.authorization.kubernetes.io/v1beta1", 
 "kind": "Policy", 
 "spec":{
 "user":"admin", 
 "namespace": "*", 
 "resource": "*", 
 "apiGroup": "*", 
 "nonResourcePath": "*" 
 }
}
```
最后，一个让所有用户对整个群集具有只读访问权限的示例:
```
{
 "apiVersion": "abac.authorization.kubernetes.io/v1beta1", 
 "kind": "Policy", 
 "spec": {
 "user":"*", 
 "namespace": "*", 
 "resource": "*", 
 "apiGroup": "*", 
 "nonResourcePath": "*", 
 "readonly":true 
 }
} 
```
# 基于角色的访问控制(RBAC)
**基于角色的访问控制** ( **RBAC** )，策略执行被深度集成到 Kubernetes 中。事实上，Kubernetes 在内部将其用于系统组件，授予它们运行所需的权限。`RBAC`是 100% API 驱动的，角色和绑定是管理员可以在集群上编写和创建的 API 资源，如 Pods、部署或服务等其他资源。启用`RBAC`模式就像给`kube-apiserver`递旗一样简单:
```
--authorization-mode=RBAC 
```
此模式允许您使用 Kubernetes API 创建和存储策略。在`RBAC` API 中，一组权限由角色的概念来表示。由`Role`资源表示的名称空间角色和由`ClusterRole`资源表示的整个集群角色之间是有区别的。一个`ClusterRole`可以定义一个`Role`可以定义的相同的所有权限，但是也有一些与集群相关的权限，比如管理集群节点或者修改所有可用名称空间的资源。请注意，一旦`RBAC`被启用，应用编程接口的每个方面都被禁止访问。
Permissions are additive; there are no deny rules.
这是为所有资源上的所有操作提供整套可用权限的角色示例:
```
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
 name: cluster-writer
rules:
 - apiGroups: ["*"]
 resources: ["*"]
 verbs: ["*"]
 nonResourceURLs: ["*"]
```
角色是一种资源，正如您在[第 8 章](08.html)、*中所记得的，使用 Kubernetes 和 Java* ，要使用文件创建资源，您需要执行`kubectl create`命令，例如:
```
$ kubectl create -f cluster-writer.yml
```
A `Role`和`ClusterRole`定义权限集，但不直接分配给用户或组。在 Kubernetes 斯应用编程接口中还有另一个资源，即`RoleBinding`或`ClusterRoleBinding`。它们将`Role`或`ClusterRole`绑定到特定主体，该主体可以是用户、组或服务用户。要绑定`Role`或`ClusterRole`，需要执行`kubectl create rolebinding`命令。看看下面的例子。要将`adminClusterRole`授予命名空间`myApp`中名为`john`的用户:
```
$ kubectl create rolebinding john-admin-binding \
--clusterrole=admin --user=john --namespace=myApp 
```
下一个将授予整个集群中名为`admin`的用户`cluster-admin ClusterRole`:
```
$ kubectl create clusterrolebinding admin-cluster-admin-binding \
--clusterrole=cluster-admin --user=admin  
```
与`kubectl create -f`一起使用的等效 YAML 文件如下:
```
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
 name: admin-cluster-admin-binding
roleRef:
 apiGroup: rbac.authorization.k8s.io
 kind: ClusterRole
 name cluster-admin
subjects:
- kind: User
 name: admin
```
# web 手册
当`api-server`用`--authorization-mode=Webhook`选项启动时，它将呼叫外部`HTTP`服务器来授权用户。这使您能够创建自己的授权服务器。换句话说，网络钩子是一种`HTTP`回调模式，允许您使用远程`REST`服务器管理授权，该服务器可以是您自己开发的，也可以是第三方授权服务器。
进行授权检查时，`api-server`将执行一个`HTTP POST`请求，JSON 有效负载包含一个序列化的`api.authorization.v1beta1.SubjectAccessReview`对象。该对象描述了向`api-server`发出请求的用户、该用户希望执行的操作以及作为该操作主题的资源的详细信息。请求有效负载的示例可能类似于以下示例:
```
{
 "apiVersion": "authorization.k8s.io/v1beta1",
 "kind": "SubjectAccessReview",
 "spec": {
 "resourceAttributes": {
 "namespace": "rest-example",
 "verb": "get",
 "resource": "pods"
 },
 "user": "john",
 "group": [
 "group1",
 "group2"
 ]
 }
}  
```
远程授权服务器应该提供响应，说明该用户是否被授权在指定的资源上执行指定的操作。响应应包含`SubjectAccessReviewStatus`字段，指定`api-server`是允许还是不允许访问。一个宽容的 JSON 响应看起来和这个一样:
```
{
 "apiVersion": "authorization.k8s.io/v1beta1",
 "kind": "SubjectAccessReview",
 "status": {
 "allowed": true
 }
} 
```
负面响应将如下例所示:
```
{
 "apiVersion": "authorization.k8s.io/v1beta1",
 "kind": "SubjectAccessReview",
 "status": {
 "allowed": false,
 "reason": "user does not have read access to the namespace"
 }
}
```
有可能将授权委托给另一个服务使得授权过程非常灵活，想象一下您自己的软件授权用户根据他们在公司`LDAP`目录中的角色在您的集群中做某些事情。
# 总是否认
此策略拒绝所有请求。如果用`--authorization-mode=AlwaysDeny`开关启动`api-server`，将使用 If。如果您正在进行一些测试，或者想要在不实际停止`api-server`的情况下阻止传入的请求，这可能会很有用。
# 总是允许
如果您用`--authorization-mode=AlwaysAllow`启动`api-server`，所有请求都将被接受，而不使用任何授权模式。仅当您的应用编程接口请求不需要授权时，才使用此标志。
如您所见，Kubernetes 中的身份验证和授权可能性非常灵活。在本章开头的图表中，我们已经看到了 API 调用流的第三个阶段:准入控制。准入控制起什么作用？我们来看看。
# 准入控制
准入控制插件在请求通过身份验证和授权后，但在对应用编程接口资源进行任何更改之前，拦截对 Kubernetes 应用编程接口服务器的请求。在请求被接受到集群中之前，这些插件按顺序运行。Kubernetes API 服务器支持一个标志`admission-control`，该标志采用逗号分隔的许可控制插件的有序列表。
既然我们已经概述了 API 调用看起来是如何相同的，让我们实际上利用它。
# 使用应用编程接口
原料药参考是一份详细的文件，可在互联网[https://kubernetes.io/docs/api-reference/v1.6/](https://kubernetes.io/docs/api-reference/v1.6/)查阅；[当然以后 API 版本会有变化，`v1.6`是编写时的当前版本。](https://kubernetes.io/docs/api-reference/v1.6/)
在我们对`api-server`进行一些实际调用之前，值得了解的是`kubectl`也使用 API 与 Kubernetes 集群进行通信。正如我们之前提到的，您可以看到`kubectl`命令正在进行什么`REST`呼叫。查看在使用`kubectl`期间发送到服务器的内容是熟悉 Kubernetes API 的好方法。
To see `REST` requests being executed by `kubectl`, run it with a higher level of verbosity, for example with a `--v=6` or `--v=9` option.
在我们开始进行实际的`REST`调用之前，让我们简单看看哪些 API 操作是可能的。
# 应用编程接口操作
Kubernetes API 定义了 CRUD(创建、更新、读取和删除)操作集:
*   `Create`:创建操作将在集群中创建资源。您需要为您的`REST`调用提供的 JSON 负载是资源清单。这相当于我们在[第 8 章](08.html)、*中构建的 YAML 文件，使用了带有 Java 的 Kubernetes】。这一次，它将采用 JSON 格式。*
*   `Update`:更新操作可以是`Replace`也可以是`Patch`。一个`Replace`将简单地用提供的规范替换整个资源对象(例如一个 Pod)。另一方面，`Patch`将仅对特定领域进行更改。
*   `Read`:读取操作可以是`Get`、`List,`或`Watch`。通过执行`Get`，您将获得一个特定资源对象的名称。执行`List`将检索命名空间内特定类型的所有资源对象。您可以使用选择器查询。`List`操作的一种特殊形式是`List All Namespaces`，顾名思义，这将跨所有名称空间检索资源。一个`Watch`操作将在对象或对象列表更新时流式传输它们的结果。
*   `Delete`:会简单删除一个资源。
Kubernetes `api-server`还公开了一些额外的、特定于资源的操作。这包括`Rollback`，它将 Pod 模板回滚到以前的版本或读/写比例，读取或更新给定资源的副本数量。
# 示例调用
在下面的例子中，我们将使用命令行`HTTP`客户端`curl`。你不局限于`curl`，你可以自由使用你觉得方便的`HTTP`客户端。使用带有用户界面的`HTTP`客户端通常非常方便，他们通常以结构化的形式呈现`HTTP`响应，有时还会进行一些请求验证，如果格式良好的话。我推荐的图形用户界面客户端将是邮递员(适用于视窗、Linux 或苹果电脑)，或掌上电脑(适用于苹果电脑)。
在进行任何调用之前，让我们首先启动一个到 Kubernetes API 服务器的代理。首先需要配置`kubectl`，以便能够与您的集群通信。在我们本地的带有`minikube`的 Kubernetes 安装中，`kubectl`命令将被自动配置。要启动`api-server`的代理，请执行以下命令: