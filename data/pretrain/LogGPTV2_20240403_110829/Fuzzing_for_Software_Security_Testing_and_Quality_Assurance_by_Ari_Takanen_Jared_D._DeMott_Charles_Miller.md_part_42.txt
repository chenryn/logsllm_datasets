### Commitment to Quality Assurance Best Practices

Every vendor should adhere to the best practices in quality assurance to minimize vulnerabilities. Designing Industrial Control Systems (ICS) security requires a comprehensive approach, considering all external systems interfacing with the ICS network components. This holistic strategy involves certification, segmentation, data diodes, and other robust security measures.

### Network Device Sharing and Security

Sharing network devices should only be done with a clear understanding of the implications for device updates. The core ICS network components should receive the same level of formal security treatment as safety-critical systems, including certification and thorough testing. The ICS core must be the most reliable part of the process.

### 9.6 Black-Box Fuzzing for Security Researchers

This chapter concludes with an example of auditing a black-box application. This audit can occur during a formal review at the end of the software development cycle, as part of a security consultant's engagement, or by a security researcher examining a released product. In the first two scenarios, the target system is predefined. For security researchers, the choice of target is more flexible and crucial.

#### 9.6.1 Selecting the Target

For software developers and testers, the target is typically the system under development. Similarly, security auditors must test the system provided for review. However, when multiple systems require testing, it is essential to prioritize based on factors such as risk, exposure, and development quality.

For security researchers, selecting the right target is critical. A highly secure and well-written application like Apache may not yield many bugs, while an obscure product like Tom’s Mail Server may not attract much attention even if bugs are found. It is best to choose a moderately popular and potentially vulnerable target. Good strategies include selecting products that have not been fuzzed or those with a recent history of vulnerabilities. For this case study, we chose Apple’s QuickTime media player due to its history of over 34 security issues in 2007.

#### 9.6.2 Enumerating Interfaces

Before fuzzing, it is essential to identify all the ways data can be passed to the target. For local applications, this includes command-line arguments, environment variables, and files. For network devices, this ranges from low-level packets like Ethernet frames to higher-level protocols and administrative applications. Identifying all supported protocols and file formats is crucial. For QuickTime, we used RCDefaultApp on Mac OS X to determine the supported file formats, which include 3g2, aac, amc, avi, caf, and rtsp, among others.

#### 9.6.3 Choosing the Fuzzer

Selecting the appropriate fuzzer can be challenging, balancing the desire to find bugs against time, energy, and budget constraints. The most effective method is often a combination of different fuzzers, but this is not always feasible. For this case study, we opted for an open-source mutation-based fuzzer due to budget limitations and the need for efficiency. We used a simple C program for our fuzzing.

### 9.7 Summary

In this chapter, we explored various use cases for fuzzing, demonstrating the technique in different environments. Fuzzing deployment is often technology-oriented, but it should start from a real need. In enterprise settings, CIOs understand the value of proactive fuzzing, often outsourcing it to experienced consultants. Service providers, particularly those in the carrier and ISP space, are well-prepared for scheduled fuzzing tests. Software developers are gradually adopting fuzzing, with major companies leading the way. Network manufacturers and security product vendors also utilize fuzzing early in their development processes.

Fuzzing in industrial automation, such as SCADA systems, is vital for national critical infrastructure. Finally, we examined fuzzing from a security researcher's perspective, showing the effectiveness of even simple mutation-based fuzzing. Without fuzzing, we remain in a cycle of patching and penetration. We encourage you to consider where fuzzing fits in your organization and to share your experiences with us.

### About the Authors

**Ari Takanen** is an investor and startup advisor at Kielo Growth. He co-founded Codenomicon, a fuzzing company acquired by Synopsys. Previously, he was a lecturer and researcher at the University of Oulu, Finland, and is a noted speaker and author on software testing and security.

**Jared DeMott** is an information security expert and founder of VDA Labs. He previously served as a vulnerability analyst with the NSA and holds a Ph.D. from Michigan State University. He regularly speaks at conferences such as RSA, DerbyCon, BlackHat, ToorCon, GrrCon, and HITB. Dr. DeMott was a finalist in Microsoft’s BlueHat prize contest and has been on three winning Defcon teams.