ﬁnds how many budget replenishments are needed to serve the
maximum workload from the local tasks.
Now, when partitions are scheduled by TIMEDICE, the worst-
case is when the partition is maximally delayed in the last part
towards the end of the period, as depicted in Fig. 11. It can be
(cid:8)(cid:5)(cid:16)(cid:7)(cid:5)
Depleted
Initial
latency
(cid:1)(cid:2)
(cid:5)
(cid:3)(cid:2)(cid:1)(cid:3) and (cid:1)(cid:2)(cid:4)(cid:3)(cid:2)(cid:1)(cid:3)(cid:5)
(cid:2)(cid:3)(cid:1)(cid:4)(cid:4)(cid:5) (cid:6)
Arrival of 
(cid:14)(cid:11)(cid:12)(cid:13)(cid:2)(cid:1)(cid:3)(cid:17) (cid:8)(cid:5)(cid:16)(cid:7)(cid:5) (cid:15)(cid:9)(cid:7)
(cid:4)(cid:5)
(cid:8)(cid:5)(cid:16)(cid:7)(cid:5)
(cid:8)(cid:5)(cid:16)(cid:7)(cid:5)
(cid:3)(cid:3)
(cid:8)(cid:5)(cid:16)(cid:7)(cid:5)
Time
(cid:6)
Worst-case load of (cid:10)(cid:5)(cid:1)(cid:6) and (cid:3)(cid:4)(cid:18)(cid:10)(cid:5)(cid:1)(cid:6)(cid:19)
during (cid:20)(cid:5)(cid:6)(cid:5)(cid:15) (cid:2)(cid:4)(cid:16)(cid:1)(cid:4) (cid:15)(cid:9)(cid:7)(cid:19)
Fig. 11: The worst-case response time of τi,j when partition
schedule is randomized by TIMEDICE.
computed by the following iterative procedure:
(cid:8)
(cid:9)
rk+1
= Li,j(rk
) +
Li,j(rk)
Bi
(Ti − Bi),
(4)
where Li,j(rk) is the worst-case task load demanded by task
τi,j and those who have higher-priority than τi,j in the same
partition from time t (when they arrive together) until t + (Ti −
Bi) +r k, and it is calculated as follows [33]:
(cid:9)
(cid:2)
(cid:8)
Li,j(rk
) = ei,j +
τi,x∈hp(τi,j )
pi,x
(Ti − Bi) +r k
ei,x,
(5)
where ei,∗ and pi,∗ are the worst-case execution time and
the minimum inter-arrival time of task τi,∗, respectively. r0 in
Eq. (4) can be initialized to ei,j. Simply speaking, Eq. (4) ﬁnds
how many budget replenishments of partition Πi are needed to
serve the workload of amount Li,j(rk). The worst-case response
time (WCRT) of task τi,j is wcrti,j = (Ti − Bi) +r k when
rk converges, and the task is schedulable if and only if it is
not greater than the deadline. Notice that the WCRT of a task
depends only on the parameters of the partition that it belongs
to. Thanks to this modularity, the partition developer can use
the WCRT analysis presented here to test in advance whether
the tasks will meet their deadlines when TIMEDICE is used.
A. Implementation
V. EVALUATION
TIMEDICE is implemented in the latest version of LITMUSRT
[19] with kernel version of 4.9.30. It is applied to the sporadic-
polling server of LITMUSRT which is a variant of the sporadic-
server algorithm [16]. In fact, TIMEDICE can also be ap-
plied to other priority-based server algorithms such as periodic
server [15] and deferrable server [34]. Meanwhile, TIMEDICE
does not affect the local scheduling policy.
The default global scheduler of LITMUSRT selects the
highest-priority partition among the active ones at every
scheduling decision, and it takes the CPU until the next schedul-
ing point that occurs upon task completion/arrival or budget
depletion. When TIMEDICE is enabled, a partition (which is
randomly selected) can use the CPU for the quantum size
(MIN INV SIZE in Algorithm 3, which is set to 1 ms in our
implementation) unless a certain event (e.g., task completion/ar-
rival, budget depletion) occurs before the end of the quantum.
Hence, the randomization happens approximately every 1 ms.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:27:56 UTC from IEEE Xplore.  Restrictions apply. 
459
Response time-based
Execution vector-based
NoRandom
TimeDiceU
TimeDiceW
d
a
o
l
e
s
a
B
NoRandom
TimeDiceU
TimeDiceW
d
a
o
l
t
h
g
L
i
(cid:21)
(cid:25)
(cid:1)
(cid:20)
(cid:1)
(cid:19)
(cid:4)
(cid:3)
(cid:14)
(cid:17)
(cid:4)
(cid:4)
(cid:3)
(cid:11)
(cid:12)
(cid:8)
(cid:16)
(cid:3)
(cid:4)
(cid:8)
(cid:11)
(cid:17)
(cid:10)
(cid:10)
(cid:12)
(cid:2)
(cid:22)(cid:1)(cid:12)(cid:6)(cid:1)(cid:10)(cid:12)(cid:11)(cid:8)(cid:16)(cid:12)(cid:14)(cid:8)(cid:11)(cid:7)(cid:1)(cid:18)(cid:8)(cid:11)(cid:5)(cid:12)(cid:18)(cid:15)(cid:1)(cid:6)(cid:12)(cid:14)(cid:1)(cid:13)(cid:14)(cid:12)(cid:6)(cid:8)(cid:9)(cid:8)(cid:11)(cid:7)(cid:1)(cid:20)(cid:16)(cid:14)(cid:3)(cid:8)(cid:11)(cid:8)(cid:11)(cid:7)(cid:21)
Fig. 12: Impact of TIMEDICE on the accuracy of communi-
cation over the covert timing channel. Base load: 80%. Light
load: 40%. 10,000 samples are used for testing.
s
w
o
d
n
i
w
g
n
i
r
o
t
i
n
o
M
Time
X=0
Time
X=1
Fig. 13: Heatmap of execution vectors when partitions are
randomized by TIMEDICE. Compare these with Fig. 4(b).
The implementation is deployed to the 1/10th-scale self-
driving car platform explained in Sec. III. The system runs
on Intel NUC mini PC [35] with Core i5-7260U processor
operating at 2.20 GHz and a main memory of 8 GB.
B. Evaluation Results
We denote by NoRandom and TimeDice the default global
scheduler of LITMUSRT and TIMEDICE-enabled scheduler, re-
spectively. Additionally, TimeDiceW and TimeDiceU are used to
distinguish the weighted and uniform random selection of parti-
tion, respectively. By default, TimeDice indicates TimeDiceW.
1) Covert-channel accuracy: We extend the feasibility test
presented in Sec. III by measuring the accuracy of communica-
tion over the covert channel when TIMEDICE is used. Fig. 12
shows the impact of TIMEDICE on channel accuracy. The x-
axis is the number of monitoring windows used for proﬁling.
the following: (i) TIMEDICE is more
The results highlight
effective when the system is more vulnerable to the covert
channel, which can be observed from the ‘Light load’ case
(bottom plots): TimeDiceW reduces the accuracy from 98.62%
and 98.99% to 57.49% and 60.32% for the response time-based
and execution vector-based approaches, respectively, indicating
that the communication over the channel is not signiﬁcantly
better than a random guess (50%). This is mainly because
partitions have more room to allow priority inversion when
the system is lightly loaded, hence active partitions, including
CPU idling, are more likely to pass the candidacy test (as
Fig. 14: Probability distribution of the receiver’s response time
in the light load conﬁguration.
presented in Sec. IV-A1); (ii) Although TimeDiceU can already
reduce the communication accuracy signiﬁcantly, the weighted
random selection further enhances the effectiveness of the ran-
domization; (iii) the learning-based approach that uses execution
vectors achieves higher accuracy than the response time-based
approach even when partition schedule is randomized. This is
because, as discussed in Sec. III, it contains richer information
about the receiver’s execution timing. However, TIMEDICE can
still defend effectively against such a learning-based approach
because with TIMEDICE, the receiver’s execution is scattered
across a wider range as shown in Fig. 13. Unlike the cases in
Fig. 4(b), the sender’s varying signal (i.e., left vs right) does not
create distinctive patterns in the receiver’s execution vectors.
The effect of TIMEDICE can be explained best by the
probability distribution of the receiver’s response times shown
in Fig. 14. First of all, as can be seen from the middle plot,
TimeDiceU makes Pr(R|X = 0) and Pr(R|X = 1) similar to
each other, thus making it ambiguous to infer the most likely
signal X given a new measurement R. However, the temporal
locality, albeit reduced, still remains even with TimeDiceU. The
weighted-random selection (TimeDiceW) spreads the receiver’s
execution range, thus ﬁnally little to no information can be
gained from the probabilistic models.
Although TIMEDICE increases
the uncertainty in the
partition-level schedule by construction, we quantitatively eval-
uate its impact from an information-theoretic view. In particular,
we measure the channel capacity [36], which is deﬁned by
C = maxp(X)(H(X) − H(X|R)), where p(X) is the input
distribution, and H(X), which is the entropy of channel input
X, is maximized when p(X) is a uniform distribution. It rep-
resents the average reduction in uncertainty about the channel
input X after observing a response time R. Here, H(X|R) is
the channel noise and can be calculated by
(cid:2)
(cid:2)
R
X
H(X|R) =
Pr(X, R) log
Pr(R)
Pr(X, R)
.
(6)
Now, to measure the channel capacity, we consider a binary
signal X = 0, 1 that follows a uniform distribution. Fig. 15
compares the channel capacity calculated from 10,000 samples.
It is upper-bounded by H(X) = 1 as X is a binary signal
following a uniform distribution, which is when the uncertainty
about the input signal X is completely removed once observing
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:27:56 UTC from IEEE Xplore.  Restrictions apply. 
460
TimeDiceU
TimeDiceW
NoRandom
Light
Load
Base
Load
(cid:2)(cid:9)(cid:3)(cid:13)(cid:13)(cid:7)(cid:11)(cid:1)(cid:5)(cid:3)(cid:15)(cid:3)(cid:5)(cid:10)(cid:18)(cid:20)(cid:1)H(X)-H(X|R) (cid:10)(cid:13)(cid:1)(cid:4)(cid:10)(cid:18)(cid:17)(cid:21)(cid:12)(cid:14)(cid:13)(cid:10)(cid:18)(cid:14)(cid:16)(cid:10)(cid:13)(cid:8)(cid:1)(cid:19)(cid:10)(cid:13)(cid:6)(cid:14)(cid:19)
Fig. 15: Channel capacity in bits per monitoring window.
R, i.e., H(X|R) = 0. As the other extreme, it is lower-bounded
by 0, which is achieved when H(X) =H (X|R); that is, no
information about the input X is conveyed by an observation
R (e.g., when using a static partitioning such as TDMA). The
unit is in the bits per monitoring window. The actual ‘bits
per second’ depends on the execution frequency of the sender
and the receiver. If the frequency of the monitoring window is
f Hz and a single bit is transmitted per window, the results
in Fig. 15 can be interpreted that about 0.8f–0.9f bits can
be sent over 1 second under NoRandom and about 0.1f–0.2f
bits per second under TIMEDICE. As can be seen from these
results, TIMEDICE signiﬁcantly reduces the channel capacity
by introducing high noise H(X|R) into the channel. This can
r∈R Pr(R = r)H(X|R = r)
be explained by H(X|R) =
that rewrites Eq. (6); TIMEDICE makes (i) the set of possible
response times, i.e., R, larger and (ii) the difference between
Pr(X = 0|R = r) and Pr(X = 1|R = r) smaller for each
particular r, i.e., H(X|R = r) increases.
(cid:7)
We also performed the same experiment on the 1/10th-
scale self-driving car platform explained in Sec. III, but with
TIMEDICE enabled. It was able to drop the accuracy of the
covert channel between the path planning partition and the
logging partition to 56.30% (from 95.23%).
2) Task responsiveness: We evaluate the cost of TIMEDICE
on task responsiveness by measuring task response times from
the 5-partition system shown in Table I. Task priorities follow
Rate Monotonic policy [32], i.e., a task with a shorter period
is assigned a higher priority, and we assume implicit deadline
(=minimum inter-arrival time). The real-time tasks are generated
by the rtspin tool of LITMUSRT. We run the system for 10
hours for NoRandom and TimeDice, respectively.
The box plots in Fig. 16 show the spreads and centers of the
response time measurements. We can ﬁrst see that the range
of response times is likely to extend with TIMEDICE, which
indicates increased uncertainties in partition executions. The
trend stands out more clearly in the high-priority partitions.
TABLE I: Partition replenishment period (Ti) and task’s min-
imum inter-arrival time (pi,j) for the evaluation of response
times. Partition budget Bi and task’s worst-case execution time
ei,j are proportional to Ti and pi,j, respectively: Bi = αTi,
ei,j = βpi,j. By default, α = 16% and β = 3%. Pri(Πi) >
Pri(Πi+1) and Pri(τi,j) > Pri(τi,j+1).
τi,3
160 ms
240 ms
320 ms
400 ms
480 ms
Π1 (20 ms)
Π2 (30 ms)
Π3 (40 ms)
Π4 (50 ms)
Π5 (60 ms)
τi,5
640 ms
960 ms
1280 ms
1600 ms
1920 ms
τi,1
40 ms
60 ms
80 ms
100 ms
120 ms
τi,2
80 ms
120 ms
160 ms
200 ms
240 ms
Fig. 16: Task response times when partitions are not randomized
(NR) or randomized by TIMEDICE (TD).
TABLE II: Analytic and empirical worst-case response times
(in ms). The tasks are schedulable because WCRT≤ Deadline.
Deadline
40.00
80.00
160.00
320.00
640.00
60.00
120.00
240.00
480.00
960.00
80.00
160.00
320.00
640.00
1280.00
100.00
200.00
400.00
800.00
1600.00