To capture the corresponding variance in entropy, we use the
Gini coefﬁcient metric [31], which has previously been used to
measure anonymity of path selection in Tor, e.g., in [5]. Gini
coefﬁcient is a measure of skew in a set of values. A value
of 0 for the Gini coefﬁcient indicates perfect equality—that
all values in the set are equal, whereas a value of 1 indicates
perfect inequality. We use this metric to measure, for each
(client, destination) pair in the PL-Tor-Web dataset, the skew
across candidates paths of the probability of them selected by
WSP. Fig. 8(b) shows that higher values of α result in lower
values for the Gini coefﬁcient, which corresponds to a lower
skew across paths in the probability of their selection.
Finally, we use the parameter α to also guide the selection of
entry guards. To avoid statistical proﬁling attacks, the default
Tor client restricts its choice of entry nodes to a persistent list
of three randomly chosen nodes selected when the client starts
up [16]. All circuits setup by the client thereafter choose entry
relays from one of these three entry guards. As one would
expect, this constraint on the selection of entry relays, though
good for anonymity, hurts the selection of low-latency paths
by WSP; the path between a client and a destination may be
unavoidably circuitous if all three entry guards chosen happen
to be distant from both the client and the destination.
Therefore, in keeping with our goal of making path selection
tunable between a preference for low latency or anonymity,
we modify the selection of entry guards as follows. After
we cluster relays as above, we order all clusters that contain
candidate entry relays 3 based on their distance from the
client. We then choose three clusters at random from the
closest (g + α · (100 − g))% clusters in this ordering, and
pick one relay at random from each of these clusters as the
three entry guards, where g is a conﬁgurable parameter; in
our implementation we use a value of 20 for g. Thus, when
α equals 0—a preference for the lowest latencies—we choose
the entry guards at random from the closest 20% of relays to
the client. This minimizes the probability of circuitous routes
when α = 0, while still providing good anonymity by selecting
entry guards from a fairly large subset (20%) of the candidate
3The default Tor client considers a subset of all Tor relays for selection as
entry guards based on their stability.
483
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:46:33 UTC from IEEE Xplore.  Restrictions apply. 
entry relays. On the other hand, when a user chooses a value
of 1 for α to get the best level of anonymity, selection of
entry guards defaults to the current best practice of choosing
from all candidate entry relays at random. Fig. 9 shows the
effect that this modiﬁed entry guard selection algorithm has
on the end-to-end distance of the chosen path in the PL-Tor-
Web dataset. With increasing α, the randomness of entry guard
selection increases and results in longer path lengths.
V. AS AWARENESS
Next, we address the second limitation of interest in the
default Tor client—avoiding paths in which an Autonomous
System (AS) can correlate trafﬁc across the routes between
the client and entry relay and between the exit relay and the
destination. Since our goal is to not require any modiﬁcations
to Tor relays, we cannot avoid such paths by simply having
all relays measure routes from them to the client and to the
destination. Therefore, we next discuss how a client can locally
make estimations of routing in the Internet in order to identify
and ignore paths that present the possibility of snooping ASes.
A. AS set estimation
Precise inference of AS-level routes between arbitrary IP
addresses is hard, as seen in the fact that no existing technique
for doing so [32], [11], [33], [12], [13] is close to perfect.
Therefore, when evaluating whether a particular combination
of entry and exit relays offers the possibility of a snooping AS,
we preclude the approach of estimating the AS-level route on
the entry and exit segments of the circuit. Instead, we take the
approach of predicting for either segment, a set of candidate
ASes through which the Internet is highly likely to route trafﬁc
on the segment. We can then determine the potential existence
of snooping ASes by checking if the intersection between the
AS sets for the paths between the client and the entry relay
and between the exit relay and the destination is non-empty.
To enable such inference of AS sets by Tor clients, we
require clients to download three inputs. First, we use the
Internet’s AS-level topology represented as a set of inter-AS
links. Second, we need an estimate of the AS path length
between every Tor relay and every end-host on the Internet.
We need this information as input because the AS path selected
by BGP is often longer than the shortest path in the AS
topology [13]. As we show later, AS path lengths can be
stored much more compactly and are signiﬁcantly more stable
compared to AS paths. Third, we store AS three-tuples as
described below to represent routing policies being employed
by ASes.
Given this AS-level topology and an estimate L for the
AS path length between a source S and destination D, we
put together the set of ASes through which trafﬁc may be
routed from S to D as comprising any AS that is on any
policy-compliant route of L AS hops between S and D in
the topology. Here, we stress on policy-compliance because
every path in the AS-level topology does not conform to
routing policies of ASes. Therefore, to ensure that we only
consider the ASes on policy-compliant paths, we borrow the
Algorithm 1 Pseudocode of AS set estimation algorithm.
1: Inputs: AS graph G, AS three-tuples set T , source S, destination
D, AS path length L
2: Shortest Path(G, T, D)
3: Queue Q
4: List Node P ossibleSet
5: List Node AS set
6: S.hops = 0
7: Add S to Q
8: while Q is not empty do
9:
10:
11:
12:
13:
14:
15:
cur ← Q.pop
cur.added ← 0
Add cur to P ossibleSet if cur /∈ P ossibleSet
for n ∈ cur.neighbors do
Skip n if (cur.parent, cur, n) /∈ T
Skip n if (cid:2) m ∈ n.neighbors such that m.pathLength +
cur.hops + 2 = L
if
p.parent.pathLength then
p.pathLength  cur.pathLength
end if
n.hops = cur.hops + 1
Add n to Q
cur.added += 1
end for
if cur.added = 0 then
16:
17:
18:
19:
20:
21:
22:
23:
24:
25: end while
26: for n ∈ P ossibleSet do
27:
28: end for
29: return AS set
end if
Add n to AS set if n.added > 0
Decrement n.added for every ancestor n of cur
technique of using AS three-tuples from iPlane Nano [13].
From a collection of AS path measurements—obtained from
BGP feeds [27], [28] and by mapping traceroute measure-
ments [34], [12] to AS paths—we identify every sequence of
three consecutive ASes seen on any AS path and add them to
a set of AS three-tuples. For example, if we observe an AS
path AS1 → AS2 → AS3 → AS4 → AS5, then we add
(AS1, AS2, AS3), (AS2, AS3, AS4), and (AS3, AS4, AS5)
to our set of AS three-tuples. Any such AS three-tuple
(A, B, C) represents routing policy by showing that B is
willing to transit trafﬁc from A on to C (in other words, B
passes along route announcements received from C on to A).
We generated such a set of AS three-tuples by aggregating
various BGP feeds, and we are able to represent this data
in about 1 MB. Note that though Internet routing can be
asymmetric in practice, i.e., the route from S to D can differ
from the route from D to S, we assume routing asymmetry
here and add the three-tuple (C, B, A) to our set of three-
tuples for every tuple (A, B, C) discovered from the AS path
measurements.
Given an estimate L for the AS path length between a
pair of IP addresses S and D, we estimate the set of ASes
that are likely to occur on the the route between them using
the following two phase algorithm. In the ﬁrst phase, we
run Dijkstra’s shortest path algorithm to compute the length
of the shortest path from every AS to D’s AS. We modify
the standard Dijkstra’s algorithm to ensure that shortest path
484
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:46:33 UTC from IEEE Xplore.  Restrictions apply. 
lengths are computed only across those paths that satisfy the
criterion that any three consecutive ASes on a path are in the
set of AS three-tuples. Next, we determine for every AS in
the topology, the set of path lengths to D available via any of
the AS’s neighbors.
In the second phase, we determine the output set of ASes
by performing a modiﬁed breadth-ﬁrst search (BFS) from S.
While performing BFS, we traverse a neighbor B of an AS
A that is k hops away from S only if B has a path of length
(L−k−1) available to D via one of its neighbors. In addition,
we enforce the valley-free nature of Internet routes [35] by
ensuring that once the BFS goes from a node A to a neighbor
B that has a shorter shortest path to D than from A, thereafter,
we never traverse a node’s neighbor that has a longer shortest
path to D than from that node. Furthermore, we again ensure
that the input AS three-tuples are respected; we traverse a
neighbor B of A, whose parent in the BFS is C, only if
(C, B, A) is in the input set of AS three-tuples. Algorithm
1—which takes as input the AS graph G, the set of AS three-
tuples T , the source S, the destination D, and the estimated
AS path length between them—summarizes the pseudocode
of this algorithm.
B. Avoiding snooping ASes
When selecting a path from itself to a destination, a client
needs to use the above procedure to determine AS sets for
paths between itself and its 3 entry guards and between all exit
relays and the destination. For the latter set of paths, we do not
compute the AS sets independently. Instead, we run the ﬁrst
phase of our AS set estimation algorithm once, and thereafter
run the BFS in phase two of the algorithm from each exit relay
independently. We can then ignore from consideration all paths
that potentially have snooping ASes on them by ignoring those
combinations of entry and exit relays for which the intersection
between the AS sets for the (client, entry relay) and (exit relay,
destination) paths is non-empty. This algorithm can prune out
paths with snooping ASes in around 3 seconds, even when
choosing from 1000 exit relays.
Other than being efﬁcient in terms of computation, our
approach also minimizes the data to be downloaded by a client
to make local inference of AS sets. First, the set of inter-AS
links and the set of AS three-tuples are each roughly about 1
MB in size and changes to these datasets are rare. Second, all
Tor relays and all end-hosts on the Internet can be grouped
into roughly 600 and 50K BGP atoms [25], [12], respectively.
Therefore, we need every client to download AS path lengths
for 30M paths—between every (relay, end host) pair.
We evaluate the expected size to store these AS path lengths
and the stability of this data using traceroutes gathered daily
by iPlane [36] from all PlanetLab nodes to all IP address
preﬁxes at the edge of the Internet. We analyze this data for the
period of three weeks in July 2011. On each day, we map all
traceroutes to their corresponding AS-level routes and compute
the AS path length, i.e., the number of ASes seen on the route.
First, we ﬁnd that less than 0.05% of paths traverse more than
8 AS hops. So, every AS path length can be stored in 3 bits,
)
%
(
e
g
n
a
h
c
e
v
i
t
l
a
e
R
 6
 5
 4
 3
 2
 1
 0
Week 1
Week 2
Week 3
 0
 1
 2
 3
 4
 5
 6
 7
Number of days
Fig. 10. Relative changes in AS path length data across days.
s
r
i
a
p
)
t
s
d
,
c
r
s
(
f
o
F
D
C
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
WSP α=0
 0.4
 0.2
 0.8
Probability of common AS
 0.6
 1
Fig. 12. The probability of existence of snooping ASes across (src,
dst) pairs in the PL-BGP-Rand dataset.
making the size of the AS path length data to be downloaded
initially by a client to be around 11 MB.
For each week in the considered period, we then compare
AS path lengths on every day with those measured on the ﬁrst
day in that week. We perform the comparison by computing
the fraction of paths that have a different AS path length on
day i compared to that on day 0. As shown in Figure 10, AS
path lengths changed on a little over 5% of paths even after
a week. Therefore, in summary, our design requires clients to
initially download 13 MB of data across inter-AS links, AS
three-tuples, and AS path lengths—a close to 40x reduction
in size compared to pre-computed AS paths between all Tor
relays and all end-hosts—and a client need only fetch less than
1.5 MB weekly thereafter to keep the data up-to-date.
C. Evaluation of AS-awareness
Next, we evaluate our technique for AS set estimation in two
parts. First, we examine if the estimated AS sets accurately
cover actual AS paths. For this, we estimate AS sets for
the paths from PlanetLab nodes to Tor relays in the PL-Tor-
Web dataset. Fig. 11(a) and 11(b) show that the estimated AS
sets are typically compact—90th percentile size less than 10
ASes—and at most one AS on the actual AS path is not in
the estimated set for over 75% of paths.
Second, we use the PL-BGP-Rand dataset
to study the
accuracy with which AS sets enable prediction of potential
snooping ASes; we do not have AS paths from exit nodes
to destinations in the PL-Tor-Web dataset, and the PL-PL-
Web dataset is biased for this analysis 4. For every (client,
destination) pair in the PL-BGP-Rand dataset, we partition
4Paths between PlanetLab nodes typically traverse a different set of ASes,
e.g., research and educational ASes, compared to paths from PlanetLab nodes
to random destinations on the Internet
485
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:46:33 UTC from IEEE Xplore.  Restrictions apply. 
s
h
t
a
p
f
o
n
o
i
t
c
a
r
f
e
v
i
t
l
a
u
m
u
C
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
s
h
t
a
p
f
o
n
o
i