K1
5
L0
Total
340
samples) used to correctly identify malloc as a pointer source
to be quite similar to the ones found in the ground-truth dataset. In
particular, the memcpy basic function marked the final allocator
as a pointer source in 237 blobs, memset — in 80, memcpy and
strlen — in 3 each, and strncpy — in 2. During our HML
analysis, the 4 Allocator Identification step took the most average
and median memory, 4.5GB and 2.2GB, respectively. This is also
the step where HEAPSTER spent the most time: 2.4 hours average
and 1 hour median. It is worth noting that the analysis of only 17
samples was terminated because of a timeout was reached, i.e., non-
terminating steps 6 and 7 , as discussed in Section V-C, but the
memory limit was never exhausted. Although the firmware images
in the wild dataset have larger average sizes than the ones in ground-
truth dataset, HEAPSTER performed better (considering average
and median numbers) on the wild dataset, as the detailed statistics
reported in Appendix D, Table V. Finally, in the wild dataset, the
malloc parameter and the pointer to free have both on average
2.3 (median of 2) more constraints than the closest competitor.
As was reported for the ground-truth dataset, we also identified
that every firmware image uses packed heap global variables. Finally,
in all but 5 samples the heap grows towards higher addresses.
To understand if HMLs are predominant for specific applications,
we classify our firmware images using the categories described by
Wen et al. [59]. The results of this classification are presented in
Appendix B, Table III. This classification shows that HMLs are used
in numerous firmware images that span across different categories:
from Wearable (83 blobs) and Sensors (24), to Medical Devices (22).
Coarse-grained Clustering. The coarse clustering analysis of the
identified HMLs yielded 10 different implementations, which we
label as clusters D to M. According to our results, the most used
HML is D, which is embedded in 115 firmware blobs, followed by
E with 93 samples, and F with 51 (all the cluster sizes are reported
in Appendix C, Figure 4). After considering the similarity across
datasets, we observed that cluster E represents the same HML as
A, while J is the same as B. Therefore, the wild dataset contains
8 new HML implementations. The graph in Appendix F shows a
visualization of the identified coarse-grained clusters.
Fine-grained Clustering. When searching for identical implemen-
tations with the fine-grained clustering, we discovered a total of 32
HML variants. Interestingly, E seems to have the biggest number of
reported variants (12), which might suggest that this implementation
is popular among different tool-chains (we break down the number
of variants identified in each coarse-grained cluster in Appendix C,
Figure 4). Moreover, as we previously identified that E and J match
libraries A and B respectively, we checked for identical variants
in E-A and J-B and found no overlaps between them.
HML Security Evaluation. To reduce the number of analyses
performed by HeapHopper, we test one HML per identified variant,
for a total of 32 HMLs. To select these samples, which are reported
in Table IV of Appendix C, we randomly chose a representative
firmware for every HML variant. For this experiment, we tested
on average 2k PoCs per HML, with a time constraint of 10 minutes
each. Every single HML has been analyzed by HeapHopper in less
than 3 hours, with a total analysis time of 36 hours to analyze all the
selected firmware images. All the PoVs produced by HeapHopper
are checked using the approach presented in Section III-H with a
time limit of 5 minutes per PoV re-execution. If the PoV execution
does not trigger the reported heap vulnerability, or does not respect
the configured time limit, we consider it a false positive and
continue the analysis to find another PoV. Table II summarizes the
results of the security evaluation across the 32 HML variants.
Results Discussion. Similar to the ground-truth dataset, the security
analysis results show that all tested HMLs variants are vulnerable
to at least Overlapping Chunks and Restricted Write. This means
that all the 340 firmware blobs that are using these libraries can
be exploited by a heap attack if the right exploitation primitive is
found in the application’s code. In particular, as all of the analyzed
HMLs leverage heap inline metadata (discussed in Section III-E),
without implementing any safety measure to protect them, heap
overflow primitives are always very effective in giving an attacker
the possibility to manipulate the heap, opening the door for a
complete takeover of the application.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:35:29 UTC from IEEE Xplore.  Restrictions apply. 
1091
C. HML Identification: False Negatives
In this subsection, we discuss the false negatives of our HML iden-
tification on the wild dataset as well as the ways we mitigate them.
Similarity Match. We use the coarse-grained clustering algorithm
on the wild dataset, leveraging the 253 HMLs detected by
HEAPSTER as a target library of known HML functions. Thanks
to the binary similarity algorithm used by BinDiff, we detected 85
additional blobs that contain an HML but that were not detected
by the initial HML identification analysis. When investigating these
new 85 blobs, we discover that 69 of them perfectly match HMLs
in a known fine-grained cluster, while 16 need further attention.
Imperfect Match. We manually investigated the 16 firmware
images that were included in the graph presented in Appendix F,
but we could not assign them to a fine-grained cluster (i.e., no
perfect match with any other HML was reported by BinDiff, and
HEAPSTER did not identify a working allocator). After a manual
investigation, we discovered that these blobs actually did belong
to existing fine-grained clusters, and the reason for the imperfect
match was related to imprecision in the disassembler employed
by BinDiff when analyzing the target functions. Therefore, we
proceeded to include these blobs into the correspondent fine-grained
cluster.It is worth noting that adding a blob to a fine-grained cluster
means that there exists a firmware image with the exact same HML
that we were able to test with HeapHopper. This increased the
number of firmware images with an HML to a total of 338.
Package Name. Using the metadata information released by Wen
et al. [59], we group firmware images depending on the Android
packages’ names of the application containing the firmware blob.
By leveraging this information, we identify groups where only a
subset of blobs was reported containing an HML by HEAPSTER.
Then, we pinpoint the samples for which we could not identify an
HML (40 firmware images) and performed a manual investigation
over them. We discovered that, on the one hand, 17 cases were
indeed false negatives, but they did not affect our results as they
were included in a fine-grained cluster (i.e., their HML has already
been evaluated by using the fine-grain cluster representative). On
the other hand, for the remaining 23, we confirmed that there was
indeed no HML within the firmware (i.e., they are true negatives).
Random Sampling. Finally, we randomly selected an additional
50 firmware images that were not part of any cluster nor were they
part of the set of blobs that we check during the package name
investigation. Out of the 50 firmware images, we confirmed 46
samples to be true negative (i.e., no HML is apparently used by the
blob), 2 contain an allocator not in scope as discussed in Section II,
and 2 are confirmed to be false negatives. We investigated the latter
false negatives by running a more relaxed coarse-grained function
binary similarity (we use a similarity score of 0.6) as explained in
V-B. As a result, BinDiff reported a similarity score of 0.63 with
0.71 confidence with one of the blobs in cluster L. We confirmed
this by manually comparing the HML implementations used by the
binaries and eventually added these two blobs to the fine-grained
cluster L0. After this investigation, we ended up with a total of 340
firmware images containing an HML.
False Negatives Reasons. The main source of false negatives for
our system is related to the failure to identify allocator functions
(40 blobs). This means that either HEAPSTER was not able to
find the correspondent heap initializer, or it could not find a
connection from a pointer source to a basic function, preventing
the analysis discussed in III-E to identify the correct function. The
second most common reason is the failure to detect a working
allocator-deallocator pair (29 blobs). This can occur when free
is not correctly identified, or when the HML execution does not
respect our criteria (as discussed in Section II). Finally, steps 6
and 7 did not terminate for 8 and 9 firmware images, respectively.
However, as we explained in the previous paragraphs, none of these
false negatives affected our final results, as we always managed to
identify the correct HML with the help of our clustering approach.
D. Security Impact of Vulnerabilities in HML for Applications
Threat Model for Applications. We assume that an attacker has
control over the input data that a firmware image receives via its
peripherals. This usually corresponds to data received over any
kind of network interface (e.g., Bluetooth or WiFi), serial interface,
or from sensors. For our evaluation, we consider all MMIO
read functions as possible entry-points and threat vectors for the
firmware. In particular, we focus our attention on identifying paths
within the firmware code that connect a data read from an MMIO
function to a malloc or free. This is because such a path might
allow an attacker to allocate and de-allocate memory on demand,
and potentially, manipulate a vulnerable HML to exploit a device.
Automated Vulnerable Candidate Selection. Our attack model
requires us to find vulnerabilities that are dependent on malicious
user input, and that can affect the state of the system during its exe-
cution. Unfortunately, we are faced with the challenge of performing
our analysis without access to a real execution environment for the
firmware images (as we do not have the actual devices), and without
reliable information about the true sources of external user input. To
address this challenge, we developed an automated static technique,
based on reaching definitions, that identifies whether an MMIO
function has a static path to a call to malloc with a variable size or
a call to free. Furthermore, in case of malloc, we check whether
the definition it produces is used by a basic function (e.g., memset
or memcpy) with variable size writing capabilities. This analysis
aims to select blobs that are most accessible for further manual
investigation. This approach identified 54 blobs (among all samples)
that we used as the starting point for further manual analysis.
Manual Investigation. We carried out a best-effort manual search
for vulnerabilities in the 54 blobs. This task required a week of
work from two senior security researchers. During our manual
investigation, we identified four firmware images that can be
affected by an integer overflow bug. In particular, this vulnerability
could lead to a small heap allocation being overflown by a
subsequent memcpy (i.e., heap overflow). The discovery of these
heap exploitation primitives makes the respective firmware images
meet all the conditions we need for our threat model. However,
while the discovery of these vulnerabilities provides some indication
that the firmware image could be exploited in practice, a full
re-hosting solution would be necessary to confirm our findings. For
this reason, in the next section, we demonstrate how we confirmed
vulnerabilities discovered by HEAPSTER on a real device.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:35:29 UTC from IEEE Xplore.  Restrictions apply. 
1092
Hardware Example. To validate HEAPSTER in a real-world
scenario, we use an STM32-NucleoF401RE board expanded with
an X-NUCLEO-IDW01M1 Wi-Fi Module, as shown in Figure 5 of
Appendix E. This hardware satisfies the prerequisites of our threat
model, since an attacker can interact with the firmware code via the
Wi-Fi module. We flashed on the board a firmware application that
sends and receives packets over WiFi. To implement the application,
we used the Mbed Studio IDE [10], which automatically selects the
HML implemented in the mbed library version 172 [9]. We then run
HEAPSTER on the resulting firmware image. The system correctly
identified the generic HML chosen by the IDE in the blob. Moreover,
it determined that the HML is vulnerable to OC, NHA, RW. We
implemented an end-to-end exploit for the hardware device itself
and confirmed the HML to be vulnerable to all discovered attacks.
false positives and false negatives that cannot be easily resolved au-
tomatically by HEAPSTER, but require either a test on the real hard-
ware or a manual check of the generated PoV by a human analyst.
Exploitation Evaluation. When evaluating the 54 blobs selected
by our analysis in Section V-D, we consider all the functions
that access MMIO data as possible entry points for the attacker.
However, if an MMIO function is not reading data from a peripheral
that is receiving inputs from users, this analysis can generate false
positives. Moreover, the mere presence of a static path cannot say
anything regarding the feasibility of this path (that connects an
MMIO function to a malloc/free callsite) during runtime. Thus,
our manual review can only provide limited guarantees about the
discovered threats. We consider building a robust system to detect
heap exploitation primitives in applications as future work.
VI. DISCUSSION AND LIMITATIONS
Loading Firmware. The results of our analyses depend on the
precision of several data structures recovered from the firmware
image (i.e., CFG, function boundaries, and the callgraph). In
particular, function boundaries and the callgraph are heavily
dependent on the quality of the CFG analysis. To extract this
information we rely on the algorithms implemented in the angr
framework. However, building precise CFGs for firmware blobs is a
hard problem that presents numerous engineering challenges [4], [5].
Firmware Emulation. Inspired by previous work in monolithic
firmware analyses [22], [29], [33] our approach internally uses
an emulator to lift the assembly into an IR, to eventually execute
the code. Consequently, the quality of our results depends on the
precision and correctness of the emulator mimicking the concrete
semantics of the program execution on a bare-metal device.
Basic Function Identification. During our large-scale evaluation,
we found at least one basic function in 762 monolithic firmware
images. However, basic functions can be inlined, not present at all,
or not identifiable. To mitigate this issue, we could define addresses
of instructions that perform memory writes as starting points of
our pointer sources identification. Indeed, this would increase the
opportunities to detect new pointer sources, and therefore, malloc.
However, this would also directly largely affect the performance of
the pointer sources identification analysis, thus we limit our starting
points to registers supplied as arguments to basic functions.
Pointer Source Identification. As described in Subsection III-B
the pointer sources identification analysis uses angr’s reaching
definitions (RD) framework. However, RD has no support for stores
done in memory locations where the address is not known statically
(i.e., dynamic memory locations). Therefore, when the value
returned by malloc is stored at a dynamic location, RD cannot
keep track of the definition of that memory. Hence, when the pointer
is later used in a basic function, we will miss this dependency.
Heap Initialization. When our approach to initialize the firmware
memory fails (i.e., not all the memory is correctly initialized), we
potentially end up with uninitialized heap global variables being
accessed during the execution of malloc and free. To address
this issue, we attempt to initialize the uninitialized memory with
zero. If this is not fatal, and malloc is returning valid heap memory
addresses, we proceed with our analyses. However, this can lead to
VII. RELATED WORK
A. Heapster vs. Membrush
The HML identification analyses implemented in this paper share
with Membrush [19] the goal of detecting custom allocators in bina-
ries. Membrush leverages binary instrumentation and full program
execution to identify the allocator embedded in a desktop binary.
In a nutshell, Membrush runs a target program on a native system
— using as input the test cases of the target — and leverages Intel
Pin [40] to instrument the program and analyze its dynamic behavior.
The key difference between HEAPSTER and Membrush, is that
our tool focuses on monolithic firmware images, while Membrush
targets desktop binaries. While at first glance this difference might
seem simple to overcome, the implications are far-reaching. First of
all, since HEAPSTER is working with monolithic firmware images, it
cannot rely on test cases to execute the firmware code, because they
are rarely, if ever, available. A solution to this problem could be to
automatically generate the inputs leveraging a fuzzer, but this would
also require additional research to understand how to inject the inputs
without a clear I/O interface defined in the firmware. Additionally,
this would require generating good test cases that cover enough code
to eventually identify the allocator. Finally, full firmware code exe-
cution would also require a complete re-hosting solution, which not
only would add engineering complexity to the system, but is still an
open problem when trying to analyze a large collection of blobs [28].
B. Heap Management Library Security
Different approaches have been proposed to analyze the security
of heap allocators. In this paper, we leveraged and modified the
work done by Eckert et al. [24] to symbolically execute the heap
primitives identified inside a firmware blob. In particular, we
use the same bounded model checking technique to discover
whether a memory allocator is vulnerable to a class of known
heap vulnerabilities. Recently, Yun et al. [63] proposed a system
to discover new heap exploitation techniques that leveraged a
fuzzer to bring the heap into new corrupted states. Heelan et al.
proposed Gollum [34], a system that can perform automatic heap
layout manipulation and exploitation of interpreter programs. In
a similar vein, Zhao et al. [64] proposed an automatic framework
to guide the exploitation of heap vulnerabilities. Finally, more
recently, Wang et al. proposed Maze [62], a system that leverages
symbolic execution and Linear Diophantine Equations to re-create
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:35:29 UTC from IEEE Xplore.  Restrictions apply. 
1093
the heap layout required to exploit a heap vulnerability. Researchers
have also focused on the automatic exploitation of the kernel heap.
In particular, FUZE [61] provides a system to facilitate exploits
generation for kernel use-after-free vulnerabilities, while Slake [20]
facilitates the manipulation of a kernel-specific allocator (i.e., the
slab allocator [13]) to eventually exploit vulnerabilities in the Linux
kernel. However, the state-of-the-art research about the security of
dynamic memory allocators has focused on traditional systems (i.e.,
desktop computers and servers). To the best of our knowledge, this is
the first work to identify, and test, the security of memory allocators
in the embedded world, and, in particular, in monolithic firmware.
To tackle the problem of peripheral interactions, Cao et al.
proposed Laelaps [15], an MCU agnostic system that leverages
concolic execution to execute firmware code. Similarly, a recent
work proposed Jetset [26], a system based on symbolic execution
that infers what behavior firmware expects from a target device, and
synthesizes peripherals models that can later be imported into an
emulator. Zhou et al. proposed μEmu [65], a system that leverages
symbolic execution to infer how to respond to unknown peripheral
accesses at individual access points. Finally, Fuzzware [51] proposes
a fine-grained MMIO modeling approach that leverages a coverage-
guided fuzzer to test unmodified firmware in a scalable way.
C. IoT Vulnerabilities
The security testing of IoT devices and their firmware (Linux-
based and not), has been the target of numerous research works in
the past few years. Muench et al. [43] elaborated on the challenges in-
troduced by firmware when applying traditional fuzzing techniques
to this domain. In particular, the authors demonstrated that the side
effects of a memory corruption inside a firmware sample are differ-
ent from the ones observed over classic binaries, and, therefore, the
effectiveness of classic tools is drastically reduced. Chen et al. [18]
proposed IoTFuzzer, a fuzzing methodology aimed at discovering
memory corruption bugs using the companion android app of IoT
devices. Similarly, Redini et al. proposed Diane [47], a system to gen-
erate under-constrained inputs for embedded devices that consume
data from companion applications. More recently, Wen et al. pro-
posed FirmXRay [59], a system that uses static analysis to discover
Bluetooth link layer vulnerabilities in a large number of monolithic
firmware images. Ruge et al. [50] have also focused on Bluetooth
devices, and proposed a fuzzing system based on firmware emula-
tion of a specific Bluetooth board to uncover memory corruption
vulnerabilities in the Bluetooth stack. Finally, Feng et al. proposed
P2IM [29], a hardware-independent firmware testing framework
that uses an external fuzzer to provide inputs inside the target. The
aforementioned systems cover specific kinds of bug classes, but none
of them focus on understanding the weaknesses that affect heap
management libraries employed by monolithic firmware images.
D. Re-hosting solutions
The analyses presented in this paper rely on emulating and
symbolically exploring parts of the firmware code. While
HEAPSTER does not need a full re-hosting system as it performs
targeted execution of selected functions, a re-hosting solution would
have certainly benefited our analyses, and removed the necessity
of execution models based on empirical configurations. However,
re-hosting and precise code execution of firmware code is still an
open problem [60]. Gustafson et al. [33], proposed a system to
perform automatic re-hosting of monolithic firmware by using
information recovered from real interactions between the firmware
and the peripherals. Muench et al. proposed Avatar2 [42], a system
that leverages “hardware in the loop” to forward I/O interactions
with unsupported peripherals to the real device. More recently,
Clements et al. [22] proposed a re-hosting solution based on
replacing the functions in the high-level hardware abstraction layer
(HAL) with generic implementations inside a full-system emulator.
VIII. CONCLUSIONS
In this paper, we present HEAPSTER, a system that automatically
identifies heap management libraries (HMLs) contained in mono-
lithic firmware images and tests their security. This work represents
the first attempt at analyzing the security of dynamic memory alloca-
tors used in monolithic firmware. We show that identifying the heap
management library inside a firmware blob — with no symbols and
limited support for dynamic execution — is a very challenging task.
In particular, we leverage different heuristics and domain-specific
intuitions to address the immense heterogeneity of the firmware
domain. Our evaluation demonstrates that it is possible to identify
the heap management primitives and to precisely execute them to test
for the presence of critical heap vulnerabilities. We use HEAPSTER
to identify the HML inside 819 real-world monolithic firmware
images (considering both the ground-truth and the wild datasets). To
the best of our knowledge, this is the biggest evaluation of a technical
work that uses a combination of static and dynamic program analysis
techniques to analyze monolithic firmware images. In particular,
inside the 340 blobs for which we detected a dynamic memory
allocator, we discovered 11 different heap implementation families,
and a total of 48 different heap implementation variations. To test
the security of the identified HMLs, we leverage a modified version
of HeapHopper, and we show that these libraries are all affected
by multiple classes of heap vulnerabilities. Our work sheds some
light on the state of the security of embedded allocators, which has
been largely ignored by the security community, and shows a quite
worrisome picture. As IoT becomes increasingly ubiquitous, and
firmware analysis tools are getting more powerful, we hope vendors
and embedded system developers will start to provide guidelines,
and security-vetted libraries, to bring safer products into our society.
IX. ACKNOWLEDGEMENTS
This material is based upon work supported all or in part by
Office of Naval Research (ONR) under awards N00014-17-1-
2011, N00014-20-1-2632, N00014-17-1-2897, by DHS award
FA8750-19-2-0005, and by DARPA award HR001118C0060.
The U.S. Government is authorized to reproduce and distribute
reprints for governmental purposes notwithstanding any copyright
notation thereon. Any opinions, findings, and conclusions or