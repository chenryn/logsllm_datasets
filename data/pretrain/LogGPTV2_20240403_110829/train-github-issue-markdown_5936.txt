 **Chris Beams** opened **SPR-3879** and commented
Disclaimer: This may actually be an AspectJ bug. I can't tell at this point.
The problem behavior I'm seeing is a bit hard to describe in prose; the best
bet is to take a look at the code, beans xml and attached log output.
Essentially, it looks like AspectJ pointcut expressions aren't recognizing
methods that override method declarations that take generic parameters.
For example, if I have a class MySet that implements Set, an AspectJ
pointcut expression of "execution(* MySet.*(..))" will NOT properly match
MySet.add(String str). Again, this doesn't express very well in prose, so take
a look at the code (I've made it as concise as possible) and see what you can
make of it. I do have a workaround, which is detailed at the bottom of the
issue.
If necessary, I'd be happy to upload a complete testcase. If there are
guidelines for testcase submission, please comment on this issue with a link
to that documentation and I'll follow it.
Consider the following interfaces and implementation:
    public interface Repository extends Set {}
    public interface ProductRepository extends Repository {
            Set findByCategory(String category);
    }
    public class JdoProductRepositoryImpl extends AbstractSet implements ProductRepository {
        private final PersistenceManagerFactory pmf;
        public JdoProductRepositoryImpl(PersistenceManagerFactory pmf) {
            this.pmf = pmf;
        }
       @Override
       public boolean add(Product product) {
           PersistenceManager pm = pmf.getPersistenceManager();
           boolean isNew = !(JDOHelper.isPersistent(product) || JDOHelper.isDetached(product));
           pm.makePersistent(product);
           return isNew;
       }
        // clear(), size(), iterator(), findByCategory() methods omitted for brevity
    }
beans.xml:
tx:attributes  
aop:config  
main method:
    public static void main(String... args) {
        ApplicationContext ctx = new ClassPathXmlApplicationContext("beans.xml");
        ProductRepository productRepos = (ProductRepository) ctx.getBean("productRepos");
        int size;
        productRepos.clear();
        size = productRepos.size();
        logger.info("size before add: " + size);
        assert size == 0;
        Product product = new Product("foo");
        productRepos.add(product); //  {
            void add(Product product);
            Set findByCategory(String category);
    }
See the log.workaround.txt file for full output when this fix is in place.
I've also attached my jpox.properties file for further clarity.
Hopefully this is just an error on my part in understanding AspectJ pointcut
syntax (or something else trivial).
Again, I'd be happy to put together a more complete testcase if that helps,
and/or answer any additional questions.
* * *
**Affects:** 2.0.6
**Attachments:**
  * jpox.properties ( _682 bytes_ )
  * log.txt ( _9.08 kB_ )
  * log.workaround.txt ( _18.78 kB_ )
**Issue Links:**
  * #8239 Spring AOP doesn't process generics correctly ( _ **"duplicates"**_ )