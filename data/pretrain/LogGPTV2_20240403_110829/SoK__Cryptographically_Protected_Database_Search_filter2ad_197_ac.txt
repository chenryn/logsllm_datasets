accesses are identiﬁable.
jects. Examples include “matches the intersection of 2
clauses within a query” and “within a common (known)
range.”
◕ Equalities: which objects have the same value.
(cid:4) Order (or more): numerical or lexicographic ordering of
objects, or perhaps even partial plaintext data.
Each of the four database operations may leak information.
During 𝐈𝐧𝐢𝐭, the server may receive leakage about the initial
data items. Every party may receive leakage during a 𝐐𝐮𝐞𝐫𝐲:
the querier may learn about the rules and the current data
items; the server may learn about the query, the rules, and the
current data items; the provider may learn about the query and
rules; and the enforcer may learn about the query and current
data items. During 𝐔𝐩𝐝𝐚𝐭𝐞, the server may receive leakage
about the prior and new data records. During a 𝐑𝐞𝐟𝐫𝐞𝐬𝐡, the
server may receive leakage about the current data items.
In a two-party protected search system without 𝐔𝐩𝐝𝐚𝐭𝐞 or
rules it suﬃces to describe the leakage to the server during 𝐈𝐧𝐢𝐭
and 𝐐𝐮𝐞𝐫𝐲. In this setting, common components of leakage
proﬁles include: equalities of queries (often called search
patterns); identiﬁers of data items returned across multiple
176
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:00 UTC from IEEE Xplore.  Restrictions apply. 
queries (often called access patterns); the circuit topology of
a boolean query; and cardinalities and lengths of data items,
queries, and query responses. Dynamic databases must also
consider leakage during 𝐔𝐩𝐝𝐚𝐭𝐞 and 𝐑𝐞𝐟𝐫𝐞𝐬𝐡. Three-party
databases with access restrictions must also consider leakage
to the provider and querier about any objects they didn’t
produce themselves.
F. Comparison with Other Approaches
We intentionally deﬁne protected database search by its
objective rather than the techniques used. As we will see
in Section III, many software-based techniques suﬃce to
construct protected database search. Many hardware-based
solutions like [76] are viable and valuable as well; however,
they use orthogonal assumptions and techniques to software-
only approaches. To maintain a single focus in this SoK, we
restrict our attention to software-only approaches.
Within software-only approaches, the cryptographic com-
munity has developed several general primitives that address
all or part of the protected database search problem.
∙ Secure multi-party computation [77]–[79], fully homo-
morphic encryption [80]–[82], and functional encryp-
tion [83] hide data while computing queries on it.
∙ Private information retrieval [12], [84], [85] and oblivious
random-access memory (ORAM) [13] hide access pat-
terns over the data retrieved. On their own, they typically
do not support searches beyond a simple index retrieval;
however, several schemes we discuss in the next section
use ORAM in their protocols to hide access patterns while
performing expressive database queries.
Protected search techniques in the literature often draw heavily
from these primitives, but rarely rely exclusively on one of
them in its full generality. Instead, they tend to use specialized
protocols, often with some leakage, with the goal of improving
performance.
Another related area of research known as authenticated data
structures ensures correctness in the presence of a malicious
server but does not provide conﬁdentiality (e.g., [86]–[90]). In
general, authenticated data structures do not easily compose
with protected database search systems.
III. BASE QUERIES
In this section, we identify basis functions that currently
exist
in protected search. The section provides systematic
reviews of the diﬀerent cryptographic approaches used across
query types and an evaluation of known attacks against them.
Due to length limitations, we focus on the Pareto frontier of
schemes providing the currently best available combinations of
functionality, performance, and security. This means that we
omit any older schemes that have been superseded by later
work. For a historical perspective including such schemes, we
refer readers to relevant surveys [73], [91].
We categorize the schemes into three high-level approaches.
The Legacy Index (or 𝙻𝚎𝚐𝚊𝚌𝚢) approach can be used with an
unprotected database server; it merely modiﬁes the provider’s
data insertions and the querier’s requests. However,
this
backwards compatibility comes at a cost
to security. The
Custom Index (or 𝙲𝚞𝚜𝚝𝚘𝚖) approach achieves lower leakage
at the expense of designing special-purpose protected indices
together with customized protocols that enable the querier and
server to traverse the indices together. We highlight a third
approach Oblivious Index (or 𝙾𝚋𝚕𝚒𝚟), which is a subset of
𝙲𝚞𝚜𝚝𝚘𝚖 that provides stronger security by obscuring object
identiﬁers (i.e., hiding repeated retrieval of the same record).
A. Base Query Implementations
Cryptographic protocols have been developed for several
classes of base queries. The most common constructions
are for equality, range, and boolean queries (which evalu-
ate boolean expressions over equality and/or range clauses),
though additional query types have been developed as well.
Here, we summarize some of the techniques for providing
these functionalities, splitting them based on the approach
used.
The text below focuses on the distinct beneﬁts of each
base query mechanism; Table II systematizes the common
security, performance, and usability dimensions along which
each scheme can be measured. From a security point of view,
we list the index approach, threat model (cf. Section II-D), and
the amount of leakage that the server learns about the data
items during 𝐈𝐧𝐢𝐭 and 𝐐𝐮𝐞𝐫𝐲 (cf. Section II-E). Performance
and usability are described along three dimensions: the scale
of updates and queries that each scheme has been shown
to support, the type and amount of cryptography required
to support updates and queries, and the network latency and
bandwidth characteristics.
1) 𝙻𝚎𝚐𝚊𝚌𝚢: Property-preserving encryption [10] produces
ciphertexts that preserve some property (e.g., equality or order)
of the underlying plaintexts. Thus, protected searches (e.g.,
equality or range queries) can be supported by inserting cipher-
texts into a traditional database, without changing the indexing
and querying mechanisms. As a result, 𝙻𝚎𝚐𝚊𝚌𝚢 schemes
immediately inherit decades of advances and optimizations in
database management systems.
Equality: Deterministic encryption (DET) [15], [92] ap-
plies a randomized-but-ﬁxed permutation to all messages so
equality of ciphertexts implies equality of plaintexts, enabling
lookups over encrypted data. All other properties are obscured.
However, deterministic encryption typically reveals equalities
between data items to the server even without the querier
making any queries.
Range: Order-preserving encryption (OPE) [93]–[95]
preserves the relative order of the plaintexts, enabling range
queries to be performed over ciphertexts. This approach re-
quires no changes to a traditional database, but comes at
the cost of quite signiﬁcant leakage: roughly, in addition to
revealing the order of data items, it also leaks the upper
half of the bits of each message [94]. Improving on this,
Boldyreva et al. [95] show how to hide message contents until
queries are made against the database. Mavroforakis et al. [96]
further strengthen security using fake queries. Finally, mutable
177
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:00 UTC from IEEE Xplore.  Restrictions apply. 
OPE [97] reveals only the order of ciphertexts at the expense
of added interactivity during insertion and query execution.
Many 𝙻𝚎𝚐𝚊𝚌𝚢 approaches can easily be extended to perform
boolean queries and joins by simply combining the results
of the equality or range queries over the encrypted data.
CryptDB [15] handles these query types using a layered or
onion approach that only reveals properties of ciphertexts as
necessary to process the queries being made. They demonstrate
at most 30% performance overhead over MySQL, though this
value can be much smaller depending on the networking and
computing characteristics of the environment.
𝙻𝚎𝚐𝚊𝚌𝚢 approaches have been adopted industrially [98] and
deployed in commercial systems [23]–[35]. However, as we
will explain in Section III-B and Table III, even the strongest
𝙻𝚎𝚐𝚊𝚌𝚢 schemes reveal substantial information about queries
and data to a dedicated attacker.
OSPIR-OXT [18]–[21]
2) 𝙲𝚞𝚜𝚝𝚘𝚖 Inverted Index: Several works over the past
decade support equality searches on single-table databases
via a reverse lookup that maps each keyword to a list of
identiﬁers for the database records containing the keyword
(e.g., [11], [99]). Newer works provide additional features and
optimizations for such equality searches. Blind Storage [100]
shows how to do this with low communication and a very
simple server, while Sophos [101] shows how to achieve a
notion of forward security hiding whether new records match
older queries (this essentially runs 𝐑𝐞𝐟𝐫𝐞𝐬𝐡 on every 𝐈𝐧𝐬𝐞𝐫𝐭).
additionally supports boolean
queries: the inverted index ﬁnds the set of records matching
the ﬁrst term in a query, and a second index containing a list of
(record identiﬁer, keyword) pairs is used to check whether the
remaining terms of the query are also satisﬁed. Cryptographi-
cally, the main challenge is to link the two indices obliviously,
so that the server only learns the connections between terms in
the same query. Going beyond boolean queries, Kamara and
Moataz [102] intelligently combine several inverted indices
in order to support the selection, projection, and Cartesian
product operations of relational algebra with little overhead
on top of the underlying inverted index (speciﬁcally, only
using symmetric cryptography). They do so at the expense
of introducing additional leakage. Moataz’s Clusion library
implements many inverted index-based schemes [103], [104].
Cash and Tessaro demonstrate that secure inverted indices
must necessarily be slower than their insecure counterparts,
requiring extra storage space, several non-local read requests,
or large overall information transfer [105].
3) 𝙲𝚞𝚜𝚝𝚘𝚖 Tree Traversal: Another category of 𝙲𝚞𝚜𝚝𝚘𝚖
schemes uses indices with a tree-based structure. Here a query
is executed (roughly) by traversing the tree and returning
the leaf nodes at which the query terminates. The main
cryptographic challenge here is to hide the traversal pattern
through the tree, which can depend upon the data and query.
For equality queries, Kamara and Papamanthou [106] show
how to do this in a parallelizable manner; with enough parallel
processing they can achieve an amortized constant query cost.
Stefanov et al. [107] show how to achieve forward privacy
using a similar approach.
The BLIND SEER system [16], [17] supports boolean
queries by using an index containing a search tree whose
leaves correspond to records in the database, and whose
nodes contain (encrypted) Bloom ﬁlters storing the set of
all keywords contained in their descendants. A Bloom ﬁlter
is a data structure that allows for eﬃcient set membership
queries. To execute a conjunctive query,
the querier and
server jointly traverse the tree securely using Yao’s garbled
circuits [108], a technique from secure two-party computation,
following branches whose Bloom ﬁlters match all terms in the
conjunction. Chase and Shen [109] design a protection method
based on suﬃx trees to enable substring search.
Tree-based indices are also amenable to range searches. The
Arx-RANGE protocol [110] builds an index for answering
range queries without revealing all order relationships to the
server. The index stores all encrypted values in a binary
tree so range queries can be answered by traversing this
tree for the end points. Using Yao’s garbled circuits,
the
server traverses the index without learning the values it is
comparing or the result of the comparison at each stage. Roche
et al.’s partial OPE protocol [111] provides a diﬀerent tradeoﬀ
between performance and security with a scheme optimized
for fast insertion that achieves essentially free insertion and
(amortized) constant time search at the expense of leaking a
partial order of the plaintexts.
4) Other 𝙲𝚞𝚜𝚝𝚘𝚖 Indices: We brieﬂy mention protected
search mechanisms supporting other query types: ranking
results of boolean queries [112], [113], calculating the inner
product with a ﬁxed vector [114], [115], and computing the
shortest distance on a graph [116]. These schemes mostly work
by building encrypted indices out of specialized data structures
for performing the speciﬁc query computation. For example,
Meng et al.’s GRECS system [116] provides several diﬀerent
protocols with diﬀerent
leakage/performance tradeoﬀs that
encrypt a sketch-based (graph) distance oracle to enable secure
shortest distance queries.
5) 𝙾𝚋𝚕𝚒𝚟: This class of protected search schemes aims
to hide common results between queries. Oblivious RAM
(ORAM) has been a topic of research for twenty years [117]
and the performance of ORAM schemes has progressed
steadily. Many of the latest implementations are based on
the Path ORAM scheme [118]. However, applying ORAM
techniques to protected search is still challenging [119].
𝙾𝚋𝚕𝚒𝚟 schemes typically hide data identiﬁers across queries
by re-encrypting and moving data around in a data structure
(e.g., a tree) stored on the server. Several equality schemes
use the 𝙾𝚋𝚕𝚒𝚟 approach. Roche et al.’s vORAM+HIRB
scheme [120] observes that search requires an ORAM capable
of storing varying size blocks since diﬀerent queries may
result in diﬀerent numbers of results. They design an eﬃcient
variable-size ORAM (vORAM) and combine it with a history
independent data structure to build a keyword search scheme.
Garg et al.’s TWORAM scheme [121] focuses on reducing the
number of rounds required by an ORAM-type secure search.
They use a garbled RAM-like [122] construction to build a
two-round ORAM resulting in a four-round search scheme
178
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:00 UTC from IEEE Xplore.  Restrictions apply. 
for equality queries. Moataz and Blass [123] design oblivious
versions of suﬃx arrays and suﬃx trees to provide an 𝙾𝚋𝚕𝚒𝚟
scheme for substring queries. While oﬀering greater security,
these schemes still tend to be slower than the constructions in
the other classes.
An alternative approach is to increase the number of par-
ties. This approach is taken by Faber et al.’s 3PC-ORAM
scheme [124] and Ishai et al.’s shared-input shared-output sym-
metric private information retrieval (SisoSPIR) protocol [22]
to support range queries. 3PC-ORAM shows how by adding a
second non-colluding server, one can build an ORAM scheme
that is much simpler than previous constructions. SisoSPIR
uses a distributed protocol between a client and two non-
colluding servers to traverse a (per-ﬁeld) B-tree in a way
that neither server learns anything about which records are
accessed. By deviating from the standard ORAM paradigm,
these schemes are able to approach the eﬃciency typically
achieved by Custom Index schemes that do not hide access
patterns.
6) Supporting Updates: Another important aspect of secure
search schemes is whether they support 𝐔𝐩𝐝𝐚𝐭𝐞. While update
functionality is critical for many database applications, it is not
supported by many protected search schemes in the 𝙲𝚞𝚜𝚝𝚘𝚖
and 𝙾𝚋𝚕𝚒𝚟 categories. Those that support updates do so in
one of two ways. For ease of presentation, consider a newly
inserted record. In most 𝙻𝚎𝚐𝚊𝚌𝚢 schemes the new value is im-
mediately inserted into the database index, allowing for queries
to eﬃciently return this value immediately after insertion. In
many 𝙲𝚞𝚜𝚝𝚘𝚖 schemes, e.g., [16], new values are inserted
into a side index on which a less eﬃcient (typically, linear
time) search can be used. Periodically performing 𝐑𝐞𝐟𝐫𝐞𝐬𝐡
incorporates this side index into the main index; however,
due to the cost of 𝐑𝐞𝐟𝐫𝐞𝐬𝐡 it
is not possible to do this
very frequently. Thus, depending on the frequency and size
of updates, update capability may be a limiting functionality
of protected search. In particular, a major open question is
to build protected search capable of supporting the very high
ingest rates typical of NoSQL databases. We return to this
open problem in Section V. Roche et al. [111] take a step in
this direction with a 𝙲𝚞𝚜𝚝𝚘𝚖 scheme for range queries capable
of supporting very high insert rates.
Table II systematizes the protected search techniques dis-
cussed in this section along with some basic information
about the (admittedly nuanced) leakage proﬁles that they have
been proven to meet. There are several correlations between
columns of the table; some of these connections reveal funda-