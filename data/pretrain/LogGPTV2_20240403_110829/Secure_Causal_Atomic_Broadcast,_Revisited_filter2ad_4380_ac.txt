(cid:2)
T . The
(cid:2)
T . The reconstructor
new n-vector of shares S
collects shares in a set R and runs Rec(R) to return a secret
or a distinguished symbol. A wins the game if s (cid:6)= Rec(R).
We deﬁne Advrec
In BR’s privacy game, adversary can corrupt up to t − 1
servers, while in their recoverability game, adversary can
corrupt up to n − (t − 1) servers. In both of our games, we
require that adversary can only corrupt up to t − 1 servers.
On the one hand, this sufﬁces for our purpose, as we will
consider the BFT setting where adversary can corrupt at most
t− 1 servers. On the other, this relaxation makes it possible to
design highly efﬁcient constructions and information-theoretic
constructions.
Implying non-malleability. One may consider deﬁning non-
malleability for ARSS just as in encryption and commitment
schemes. Speciﬁcally, one may consider a malleability ad-
versary that corrupts up to t − 1 servers and attempts to
(cid:2) that is
produce shares that can be recovered to a new secret s
“meaningfully related” to the original secret s. We claim that
this is not needed, as our privacy deﬁnition simply implies
non-malleability. Unlike encryption and commitment schemes,
ARSS is an unkeyed primitive, where both Share and Rec
algorithms do not take as input a key. Once some malleability
(cid:2) related to some s,
adversary produces shares for some secret s
(cid:2). One can then construct
it essentially knows the entire s
another adversary that attacks the privacy game.
Note that in order for the implication to hold, the adversary
can corrupt up to t − 1 servers. This implication does not
the
hold if the adversary corrupts more servers. In fact,
malleability property (in particular, the linear property) on
65
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:22:22 UTC from IEEE Xplore.  Restrictions apply. 
secret sharing can be used to build fault-tolerant multi-party
computation [11].
Remark. We intentionally make the deﬁnitions not to depend
on a security parameter, as the security may hold in an
information-theoretic setting. However, it is easy to extend
our deﬁnitions to both concrete and asymptotic settings. For
the asymptotic setting, we should avoid using the length of
the secret as the security parameter.
Our deﬁnition of ARSS is a strengthening of RSS and
a simpliﬁcation of asynchronous veriﬁable secret sharing
(AVSS) [20]. ARSS strengthens RSS to handle asynchrony
issues. In BR’s deﬁnition, networks are synchronous and the
reconstructor will mark each missing share using a distin-
guished symbol. But we consider asynchronous environments,
where there is no known upper bound on processing and
message transmission delays.
constructions. We
has
ARSS relaxes AVSS in the sense that in ARSS the dealer is
correct but in AVSS the dealer may be malicious. In addition,
our syntax is much simpler, but we believe this does not restrict
the possibility of efﬁcient constructions for our purpose. Last,
our deﬁnitions on privacy and recoverability with general
adversaries are more general (and formal) than those in [20].
Efﬁcient
ARSS
constructions—ARSS1
security
and ARSS2 that
is information-theoretically secure. Both
of the two constructions are as efﬁcient as a regular secret
sharing scheme, and several orders of magnitude faster
than the most efﬁcient AVSS [20] for any reasonably large
(practical) n. For our purpose, we assume that f = t − 1
servers may behave arbitrarily and n ≥ 3f + 1.
A computational construction—ARSS1. ARSS1 is general: it
uses any conventional secret sharing scheme and any conven-
tional commitment scheme in a black-box manner.
two
present
computational
that
(cid:2)
, Rec
secret
any (t, n)
Let SS be
(cid:2)(s, d) to get a n-vector S
sharing scheme with
(cid:2)) algorithms and let CS = (Cgen, Commit, Open)
(Share
be any (conventional) commitment scheme with a commit-
ment key ck. We deﬁne a (t, n) ARSS scheme ARSS1 with
(Share, Rec) algorithms as deﬁned below. In the distribute
stage, given a secret s, Share runs (c, d) $← Commitck(s)
(where c and d are the commitment and the opening respec-
(cid:2)[1..n], and
tively), runs Share
(cid:2)[i]) for i ∈ [1..n].
returns S = S[1..n] such that S[i] = (c, S
In the reconstruct stage, the reconstructor keeps waiting for
shares to come and maintains sets of shares tagged by the same
c. It drops other sets once the size of some set R reaches t. It
stops accepting new shares once the size of the set R reaches
2f + 1. In the meanwhile, once the size of the set R reaches
(cid:2)
f + 1, it attempts to recover the secret by ﬁrst running Rec
to get some (s, d) and then verifying if Openck(c, s, d) = 1.
In the worst case, the reconstructor needs to verify at most
(cid:3)
(cid:2)
2f +1
(cid:2) = S
possible combinations to recover s.
f
If the reconstructor is also a share holder (i.e., server), the
above algorithm can be simpliﬁed: each correct server does
not need to send the reconstructor the commitment or maintain
multiple sets.
Instead of requiring a NMC, a conventional commitment
scheme is sufﬁcient. We argued that as long as an ARSS
scheme is secure with respect to the privacy game, it is also
secure in the sense of non-malleability. Still, let us explain
the underlying idea for this construction. The non-malleability
adversary’s goal is not to make the commitment malleable
but to provide a related secret. In fact, if the non-malleability
adversary wins the non-malleability game for ARSS1 then we
can construct an efﬁcient adversary that attacks the hiding
property of the commitment scheme.
Note that Share is invoked on both the secret and the
opening. Sharing the secret only does not sufﬁce, because later
on we will also need the opening to verify the correctness of
the commitment scheme. To efﬁciently instantiate the scheme,
one can use the hash based commitment scheme described
earlier. We do not claim the originality of the scheme, as
we are not sure if similar constructions appeared elsewhere.
Rather, we show that ARSS can be rather easily obtained both
generically and efﬁciently.
An information-theoretical construction—ARSS2. ARSS2 can
be adapted from a construction by Harn and Lin (HL) [41].
Padilha and Pedone [53] ﬁrst used it in a BFT storage system
for a purpose that is different from ours. In their scheme,
the clients run both the Share and Rec algorithms, but in our
scheme the Rec algorithm is invoked among the servers and re-
constructors are also share holders. Moreover, in their system,
the data is shared among servers and the servers are unable to
see or process the data. We just regard provably ﬁtting ARSS2
in our generic framework (and provably building secure causal
BFT from ARSS in general) as our contributions.
(cid:2)
(cid:2)
(cid:2)
, Rec
(cid:3)
2f +2
f +2
ARSS2 is designed speciﬁcally for Shamir’s SS. ARSS2
from a (t, n)
with (Share, Rec) algorithms can be built
(cid:2)) algorithms. Share is identical
Shamir’s SS with (Share
. The reconstructor waits for f + 2 shares to see if
to Share
they are consistent shares (i.e., they are points on the same
polynomial). If not, the reconstructor will know that at least
one out of the f + 2 shares is faulty. In the worst case, the
reconstructor has to wait for 2f + 2 shares in total, and would
try all
In ARSS2, to check whether g (g ≥ t) shares are consistent,
one only needs to check whether the interpolation of m
points yields a polynomial with degree t− 1. This consistency
check requires only one Lagrange interpolation operation, and
recovering the secret will take another interpolation operation.
In comparison, ARSS1 needs one Lagrange interpolation
operation and one hash evaluation operation. However, for
both the failure-free and failure scenarios, ARSS2 needs a
larger number of shares to recover the secret.
combinations.
V. THE PROTOCOLS
We begin by reviewing CP0 and then present three new se-
cure causal BFT protocols—CP1, CP2, and CP3. We describe
them in the client-server computing model.
66
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:22:22 UTC from IEEE Xplore.  Restrictions apply. 
A. CP0
CP0 deﬁnition [21]. In addition to the conventional safety and
liveness notions, CKPS deﬁned three notions that are directly
related to causality preservation—message integrity, message
consistency, and message secrecy. The ﬁrst two ensure that
correct replicas receive the same underlying plaintext, while
the last one is related to conﬁdentiality.
CKPS divided the protocol into schedule and reveal pro-
cesses. The schedule process corresponds to the conven-
tional atomic broadcast protocol, and the reveal process is
an additional process run after each replica completes the
atomic broadcast. CKPS requires that for correct replicas two
consecutive schedule or reveal processes are not allowed. The
idea is that only after a replica schedules a ciphertext, it can
reveal and broadcast its decryption share.
Let’s ﬁrst recall the message secrecy deﬁnition. The adver-
sary interacts with the correct replicas in an arbitrary way. It
then chooses two messages m0, m1, and a tag ID and provides
them to an encryption oracle. The oracle randomly chooses
a bit b ∈ {0, 1}, computes an encryption c of mb with tag
ID, and gives the ciphertext to the adversary. The adversary
then continues to play with the correct replicas subject to the
condition that no correct replica schedules c with ID. Finally,
the adversary outputs a bit b
(cid:2) as its guess.
Regarding message integrity, the adversary chooses some
message m and ID and gives them to the encryption oracle.
The adversary wins the game if some correct replica schedules
(cid:2) is different from
a ciphertext but the associated plaintext m
m. Message consistency requires that if two correct replicas
schedule the same ciphertext c with tag ID, then the associated
plaintexts are the same.
CP0 construction. CKPS uses a CCA secure (f + 1, n)
robust labeled threshold encryption scheme. A trusted dealer
is responsible for initializing the system keys: it generates a
system public key (so that everyone can encrypt messages
using the public key) and distributes the private key shares
to the corresponding replicas (so that any group of f + 1
replicas can collectively decrypt the ciphertext). Alternatively,
an expensive and interactive key setup protocol can be used
for the setup.
In the schedule process, a client generates a labeled thresh-
old ciphertext, which is then sent to the replicas. Then replicas
run the underlying atomic broadcast protocol to schedule this
ciphertext. After scheduling the ciphertext, each replica will
reveal its decryption share to the rest of the replicas such that
correct replicas will be able to reconstruct the plaintext.
It is important to use “labeled” threshold encryption where
the label should contain a unique identiﬁer ID (including
the client
identity and the message identiﬁer). Moreover,
the communication between all parties (clients and replicas)
should use authenticated channels. Each replica should verify
that the label in the ciphertext indeed contains the identity of
the sender.
B. An Extended Deﬁnition Framework
CKPS’s deﬁnition is coupled with threshold encryption. We
extend their framework to support general primitives.
In our framework, a client may send a message m via
encryption, commitment scheme, or secret sharing. The de-
livery of a secure causal protocol consists of two steps:
schedule and reveal. In the schedule process, a message of
the form (ID, schedule, D) will be committed. D may be a
ciphertext (as in CP0), a NM-CAD (as in CP1), a conventional
commitment (as in CP2), or an empty message (as in CP3). In
the reveal process, a message of the form (ID, reveal, m) will
be delivered. We require that there must not be two consecutive
schedule and reveal processes.
As in CKPS, we deﬁne message secrecy, message integrity,
and message consistency. We follow CKPS to deﬁne mes-
sage consistency: if two correct replicas committed the same
schedule message, then the plaintext content recovered by
each replica for that message will be the same, with all but
negligible probability. However, message secrecy and message
integrity will be modeled depending on concrete constructions.
, c
C. CP1
Deﬁning message secrecy and integrity. The deﬁnition for
CP1 is related to a commitment scheme. We model message
secrecy using message hiding and message non-malleability.
Message hiding requires the adversary not to learn any infor-
mation on the committed value before the committer decides
to reveal it. We now describe message non-malleability. The
adversary is given the commitment key ck and interacts with
the correct replicas in an arbitrary way. It then chooses a
non-trivial message space M and a header space H. An
commitment oracle randomly chooses a message and a header
and computes (c, d) $← Commit
h
ck(m). The adversary is given
(cid:2))
(cid:2)
(h, c) and now has to generate a new commitment (h
(before (h, c) gets scheduled). After the adversary is given the
message m and the opening d, it needs to output its message
(cid:2) for the new commitment such that
(cid:2) and the opening d
m
(cid:2)) = 1 for some PPT function R. (We do not need to
R(m, m
worry about unopened commitments, as they will be removed
according to our protocol.) The adversary wins the game if
either (m (cid:6)= m
(cid:2)). Note that the
(cid:2), as in
adversary will not win the game for the case of h = h
this case a derived commitment will be trivially rejected by
correct replicas, because in our protocol, replicas will need to
verify if the header of a message matches the message sender.
Message integrity can be deﬁned as follows. We consider an
adversary that interacts with the correct replicas and is given
a commitment (h, c) for some message m. We require the
following probability to be negligible: some correct replicas
scheduled (h, c) in the schedule process, but the associated
committed value is not equal to m.
Construction. CP1 is built on a NM–CAD Π =
(Cgen, Commit, Open) and a fair BFT protocol that can tol-
erate up to f Byzantine failures. CP1 has at least two beneﬁts
compared to CP0: ﬁrst, CP1 does not rely on a trusted setup or
(cid:2)) or (m = m
, h (cid:6)= h
(cid:2)
(cid:2)
, h (cid:6)= h
67
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:22:22 UTC from IEEE Xplore.  Restrictions apply. 
an expensive, interactive setup; second, CP1 can be efﬁciently
realized using only symmetric cryptography.
The basic idea of CP1 is as follows: in the schedule process,
a commitment to some chosen value m with an identiﬁer ID
is delivered via the underlying BFT protocol; in the reveal
process, m and the associated opening d also go through the
same BFT protocol using the same identiﬁer ID.
Let’s describe CP1 in detail. The system ﬁxes a commitment
key ck using Cgen. Given a client message m, the client picks
a unique identiﬁer (denoted as ID) as the commitment header
h. It then computes (c, d) $← Commit
ID
ck(m). The client then
sends (ID, schedule, c) to replicas. Replicas need to verify
the authenticity of the message and also verify if the header
matches the identity of the client. Then replicas run the
BFT protocol to schedule the commitment and then notify
the client
they have delivered the message. As in a
conventional BFT protocol, once receiving f + 1 matching
reply messages, the client will initiate the reveal process by
sending (ID, reveal, (m, d)) to the replicas. The replicas verify
the correctness of the message and the opening and then run
the BFT protocol again to deliver the message. Then replicas
can process the message and send the reply messages to the
client.
that
We implement the following optimization: While the repli-
cas are waiting for an opening to be delivered, they still batch
and schedule client requests (but do not run the reveal process).
This completes the description of failure-free scenarios. But
what could go wrong here? First, clients may fail to send
messages and openings “in time.” Second, replicas could delay
or drop messages and openings too. Both scenarios can block
the service.
To defend against these circumstances, we ﬁrst implement
an ampliﬁcation step for a common type of client crash
failures: in the reveal process, once a correct replica veriﬁes
the message and the opening, it simply forwards them to the
rest of the replicas. The message and the opening serve as
a transferable witness, and they do not need to be authenti-
cated. This is rather different from the protocols using similar