### Seeded Input and Decoy Session Establishment

The client uses a seeded input to determine if the decoy session has been established. If it has, the client includes X-Slitheen headers with upstream data. If not, the client verifies the Finished message in the traditional manner and continues with a regular (non-decoy) page fetch. A man-in-the-middle attacker who can view the plaintext will detect no unusual behavior from the client. This modification also alerts the client to any failure in the tagging procedure due to route asymmetry.

### Server Collusion

In previous systems, a censor could collude with or set up an overt destination server to entrap clients using that server for decoy routing. In Slitheen, the client's behavior from the overt site’s perspective is identical to regular use, except for an X-Ignore header containing garbage bytes. If the X-Ignore header is a concern, the relay station can replace it with a common but mostly unused header. However, a censor monitoring information leaving the overt destination can compare ciphertexts to detect content replacement.

No existing decoy routing system can completely defend against an adversary with a complete view of packets entering and leaving both the client and the overt site. Our system increases the adversary's workload by requiring colluding parties to compare ciphertexts rather than metadata.

### Routing-Capable Attacks

Routing-capable attacks, introduced by Schuchard et al. [18], rely on the censor's ability to route packets through either a tainted path (one with a Slitheen station between the client and the overt destination) or a clean path (one without a Slitheen station). While a censor may not always find a clean path, our system defends against adversaries who do. The location of relay stations can be public knowledge, so determining whether a network path contains a relay station does not affect the security of our system.

### TCP Replay Attack

In a TCP replay attack, the censor attempts to identify the use of decoy routing by testing if the client has a TCP connection with the overt site. The censor can replay a TCP packet sent by the client on a clean path. In TapDance and first-generation decoy routing systems, the connection between the client and the overt site is severed or abandoned, and the overt site issues a TCP RST packet or a stale TCP sequence number, signaling the use of decoy routing. In TapDance, the adversary does not need a clean path but can inject a TCP packet into the stream. Since TapDance does not perform in-line blocking, the packet is forwarded to the overt destination despite traversing a tainted path.

Our system maintains a TCP connection to the overt destination, providing a defense against this type of replay attack. Every TCP packet sent by the client is received by the overt site throughout the decoy-routed connection. Upon receiving a replayed packet, the server sends a duplicate acknowledgment in the same manner as a regular connection.

### Crazy Ivan Attack

The Crazy Ivan attack involves a censor controlling the path a client’s packets take to detect or deny the use of decoy routing. The censor allows the client to connect to the overt site through a tainted path and waits until the TLS session is established to redirect the flow down a clean path.

In previous systems, this attack provides overwhelming evidence of decoy routing. Systems like Telex, Cirripede, Curveball, and TapDance, which sever or abandon the connection, cannot block packets sent down the new clean path, resulting in TCP RST packets from the overt site. By keeping the connection active, both Slitheen and Rebound offer a defense against this type of detection. Packets sent down a clean path are received by the overt destination in the usual manner, prompting the server to send the requested resource (in Slitheen) or an HTTP error message with an invalid request (in Rebound). The TCP sequence and acknowledgment numbers match those expected by the censor, who cannot decrypt the packets and sees no difference in traffic.

### Forced Clean Paths

An adversary capable of choosing between clean and tainted paths may route around a Slitheen station, preventing the client from contacting a participating ISP. Although this would result in a complete loss of availability to the decoy system, Houmansadr et al. [13] show that this attack is too expensive for realistic censors and very unlikely. This attack is only a denial of service and will not leak information about the client's use of Slitheen.

### Comparison to Existing Systems

A significant advantage of Slitheen over existing systems is its resistance to latency analysis and website fingerprinting attacks. We not only eliminate the ability to use latencies to fingerprint the censored webpage accessed through a decoy routing session but also minimize the latencies caused by the station itself. Table 1 provides an overview of the comparison between Slitheen and previous systems.

While Rebound also minimizes latency by storing a queue of downstream data from the covert destination, its use is easily detectable by a minimally capable passive adversary. Rebound traffic differs radically from typical web-browsing traffic in both the amount of upstream data sent by the client and the number of HTTP error messages. Slitheen relays information to and from the covert destination in a way that does not deviate from typical access to the specific overt site, providing a more secure defense against passive attacks.

Our system defends against active attacks as well as, or better than, all existing decoy routing systems. Rebound is the only other system that actively maintains the connection between the client and the overt site, defending against routing-capable attacks meant to reveal the true TCP state. However, Rebound requires the client to send upstream data in equal amounts to the downstream data, which is both unusual and inefficient. ISPs often offer much lower bandwidth for upstream than downstream data.

Although Slitheen does not allow asymmetric flows and requires in-line blocking of downstream data, we argue that these requirements are becoming less prohibitive as the popularity of specialized traffic shaping tools increases. Companies like Sandvine have developed highly efficient DPI boxes that allow a participating ISP to detect tagged flows and easily redirect them to a Slitheen relay. They also provide the ability to force flow symmetry or share a flow’s state between multiple DPI boxes, as long as the traffic in both directions crosses their area of influence. This is likely if the stations are deployed near the overt sites. The modifications to the Telex tagging procedure to detect man-in-the-middle attacks also help detect route asymmetry. In the case of an asymmetric route, the TLS Finished message hash to the client will not contain the additional tag-seeded input, allowing the client to terminate the flow or complete it without leaking their usage of the system.

### Implementation

We developed a proof-of-concept implementation of our system and tested the relay station and client on desktop machines running Ubuntu 14.04. This implementation demonstrates that our design behaves as expected and provides a basis for our evaluations. Our code is available online for reuse and analysis.

#### Client

Our client implementation consists of two parts: the Overt User Simulator (OUS) that repeatedly connects to overt sites, and a SOCKS proxy frontend that relays SOCKS connection requests and data between the client’s browser and the OUS. The OUS inserts data from the SOCKS frontend into X-Slitheen headers of outgoing HTTP requests and returns downstream data from the received resources of content type “slitheen” to the SOCKS frontend, which then sends this data to the browser. To handle multiple simultaneous requests, we assign a stream ID to each connection. When the relay station receives downstream data for a particular stream, it includes the stream ID along with the data in the replaced resource, allowing the SOCKS frontend to demultiplex streams.

For the tagging procedure, we modified OpenSSL to allow the client to specify the value of the random nonce in the ClientHello message and supply a given value for the client DH parameter. Our proof-of-concept implementation only supports DH key exchange methods (including ECDHE), but other methods could be added. Our modifications to OpenSSL consist of user-defined callbacks, minimizing the lines of code altered and reducing unintended consequences. To send an untagged flow, the client can refrain from setting the provided callbacks, resulting in OpenSSL’s default behavior. Our modifications added 46 lines of code to OpenSSL, and the callback functions and helper code for generating the Telex-style tags are about 2200 lines of C code.

We used PhantomJS as the basis for our OUS, though browsers like Firefox or Chrome could also be adapted. We made a few modifications to the PhantomJS source code to add options that set the OpenSSL ClientHello and ClientKeyExchange callbacks to the described functions. Our modifications added 43 lines of C++ code to PhantomJS and 56 lines to its version of Qtbase. We wrote a 55-line JavaScript script to read data from the SOCKS frontend and add it to outgoing request headers. When the script receives a resource, it sends the contents of all resources of content type “slitheen” to the SOCKS frontend through a WebSocket.

The SOCKS frontend receives connection requests and data from the browser and writes it to a named pipe for the OUS to process. It assigns each new connection a stream ID and sends that along with the data to the OUS. The SOCKS frontend reads downstream data from the OUS, demultiplexes it by stream ID, and sends it to the browser. We wrote the SOCKS frontend in approximately 500 lines of C code.

#### Slitheen Relay Station

We implemented the Slitheen station in approximately 3200 lines of C code. The station recognizes and processes tagged TLS handshakes, proxies data to censored sites, and monitors and replaces upstream and downstream application data to overt sites. When the station detects a tagged flow, it saves the source and destination addresses and ports in a flow table to identify packets in the same decoy routing session. The station passively observes the remainder of the TLS handshake, computes the TLS master secret using the tag-derived client secret and observed server handshake messages, and saves it in the flow table.

After verifying the TLS Finished message from both sides of the connection, the Slitheen station monitors HTTP GET requests for upstream data and stores any downstream response from the blocked server in a censored content queue. Once the station receives the client’s Slitheen ID, it saves this information in the flow table to identify the stream IDs that can replace downstream resources. As Slitheen reuses the TCP/IP headers from the overt site, we do not need to modify kernel code to set up a forged TCP state. Application data is simply swapped into TCP segments as they are read from the interface.