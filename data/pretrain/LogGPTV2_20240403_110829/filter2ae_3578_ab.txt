        } catch (IllegalArgumentException e) {
            throw new ExportException(
                "remote object implements illegal remote interface", e);
        }
        if (stub instanceof RemoteStub) {
            setSkeleton(impl);
        }
        Target target =
            new Target(impl, this, stub, ref.getObjID(), permanent);
        ref.exportObject(target);
        hashToMethod_Map = hashToMethod_Maps.get(implClass);
        return stub;
    }
又是这个熟悉的方法，这里调用Util.createProxy()创建远程对象的代理。
    final ClassLoader loader = implClass.getClassLoader();
    final Class[] interfaces = getRemoteInterfaces(implClass);
    final InvocationHandler handler =
        new RemoteObjectInvocationHandler(clientRef);
    try {
        return AccessController.doPrivileged(new PrivilegedAction() {
            public Remote run() {
                return (Remote) Proxy.newProxyInstance(loader,
                                                        interfaces,
                                                        handler);
            }});
    } catch (IllegalArgumentException e) {
        throw new StubNotFoundException("unable to create proxy", e);
    }
这里我就只把创建代理对象这一块拿过来了，上面的步骤和之前一样检查是否实现Remote接口，然后检查是否存在以_Stub结尾的类并创建。  
这里可以就是正常的创建代理对象三要素(类加载器，代理对象接口，实现了InvocationHandler的代理类)，这里跟进获取接口的方法中。
    private static Class[] getRemoteInterfaces(Class remoteClass) {
        ArrayList> list = new ArrayList<>();
        getRemoteInterfaces(list, remoteClass);
        return list.toArray(new Class[list.size()]);
    }
先创建了一个Arraylist存储所有的接口。然后调用getRemoteInterfaces()方法获取remoteClass中Remote及其子类的接口，最后把ArrayList转为数组，继续跟进其方法。
    private static void getRemoteInterfaces(ArrayList> list, Class cl) {
            Class superclass = cl.getSuperclass();
            if (superclass != null) {
                getRemoteInterfaces(list, superclass);
            }
            Class[] interfaces = cl.getInterfaces();
            for (int i = 0; i  intf = interfaces[i];
                if (Remote.class.isAssignableFrom(intf)) {
                    if (!(list.contains(intf))) {
                        Method[] methods = intf.getMethods();
                        for (int j = 0; j )() -> {
                run0();
                return null;
            }, NOPERMS_ACC);
        } finally {
            t.setName(name);
        }
    }
run()方法中又调用了run0(),其实前面说了那么多真正处理socket请求的方法就是run0(),其实这也是JRMP的实现。JRMP就是rmi底层网络传输的协议，这个方法太长了，下面会分成几段来说。
    private void run0() {
        TCPEndpoint endpoint = getEndpoint();
        int port = endpoint.getPort();
          ...
        try {
            InputStream sockIn = socket.getInputStream();
            InputStream bufIn = sockIn.markSupported()
                    ? sockIn
                    : new BufferedInputStream(sockIn);
            // Read magic (or HTTP wrapper)
            bufIn.mark(4);
            DataInputStream in = new DataInputStream(bufIn);
            int magic = in.readInt();
            if (magic == POST) {
              ...//一些http请求的处理
            }
            short version = in.readShort();
            if (magic != TransportConstants.Magic ||
                version != TransportConstants.Version) {
                closeSocket(socket);
                return;
            }
            OutputStream sockOut = socket.getOutputStream();
            BufferedOutputStream bufOut = new BufferedOutputStream(sockOut);
            DataOutputStream out = new DataOutputStream(bufOut);
            int remotePort = socket.getPort();
            ...
            TCPEndpoint ep;
            TCPChannel ch;
            TCPConnection conn;
            // send ack (or nack) for protocol
            byte protocol = in.readByte();
这是第一部分是前面客户端发送的第一个数据包的处理部分，可以结合wireshark抓包看一下。  
可以看到上面代码中读取了三次输入流
    int magic = in.readInt();
    short version = in.readShort();
    byte protocol = in.readByte();
就是对应的数据包的三个参数值。然后下面就根据protocal进入对应的case分支语句。
    switch (protocol) {
        case TransportConstants.SingleOpProtocol:
            ...
        case TransportConstants.StreamProtocol:
            // send ack
            out.writeByte(TransportConstants.ProtocolAck);
            ...
            out.writeUTF(remoteHost);
            out.writeInt(remotePort);
            out.flush();
            String clientHost = in.readUTF();
            int    clientPort = in.readInt();
            ep = new TCPEndpoint(remoteHost, socket.getLocalPort(),
                                  endpoint.getClientSocketFactory(),
                                  endpoint.getServerSocketFactory());
            ch = new TCPChannel(TCPTransport.this, ep);