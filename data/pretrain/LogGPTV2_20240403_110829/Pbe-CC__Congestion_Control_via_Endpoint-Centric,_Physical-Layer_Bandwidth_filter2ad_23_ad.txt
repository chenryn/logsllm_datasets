( a 20 MHz one and a 10 MHz one). (b) The distribution of
wireless physical data rate of the detected users.
6.2 Micro-benchmark: Cell Status
In this section, we perform a micro-benchmark to present two im-
portant statistics of the cell tower: (1) the number of users that
have communicated with the cell tower in each hour and (2) the
distribution of wireless physical data rate of the users. We leverage
our control channel decoder to decode the control messages that
two base stations (a 20 MHz one and a 10 MHz one) transmit. We
conduct the experiments for 24 hours and count the number of
active users in each hour. We plot the result in Figure 11(a), from
which we see that each cell serves a large number of users during
(a) Prototyping platform.
(b) System setup.
Figure 10: The architecture of the open-source PBE-CC cel-
lular congestion control prototyping platform (a). The setup
of PBE-CC mobile clients is shown in (b).
firmware. The key component of our platform is an open-source
control channel decoder that uses an off-the-shelf software defined
radio (USRP in our implementation) as the RF front-end to collect
cellular wireless signals, and a PC as the host to decode the control
messages from the collected signals. We start multiple parallel con-
trol channel decoders, each decoding the signal from one cell in the
list of aggregated cells of the mobile user, as shown in Figure 10(a).
Our Message Fusion module aligns the decoded control messages
from multiple decoders according to their subframe indices, feeding
the aligned messages to our Congestion Control module.
We implement our cellular control channel decoder in 3,300
lines of C code (excluding reused code). We reuse the physical
layer signal processing modules from an open-source LTE library
(srsLTE [16]), i.e., a wireless channel estimator, a demodulator, and
a convolutional decoder. Each decoder decodes the control channel
by searching every possible message position inside the control
channel of one subframe and trying all possible formats at each
location until finding the correct message.2 We implement the
parallel decoding structure using multi-threading, allowing one
PC to decode the control channel of multiple cells simultaneously.
In our test, a six-core PC is able to decode six cell towers while
maintaining CPU usage of each core below 40 percent. We will
open-source our platform to facilitate future cross-layer cellular
congestion control design and prototyping.
We implement a user-space, UDP-based prototype of PBE-CC’s
congestion control algorithm using 874 lines of C++ code (517 on
the mobile client side and 357 at the sender side). The client-side
PBE-CC module takes the decoded control messages as input, and
communicates with the sender side via a commercial mobile phone
tethered with the host PC, as shown in Figure 10(a). When the
PBE-CC mobile client receives a data packet, it estimates the one
way packet propagation delay Dprop (§4.2.2), and feeds back the
estimated capacity. We describe the capacity using an interval in
milliseconds between sending two 1500-byte packets, and represent
it with a 32-bit integer. The PBE-CC client also identifies the current
bottleneck state, notifying the sender via one bit in the ACK. When
the PBE-CC sender receives an ACK, it sets its sending rate to the
capacity indicated therein. The PBE-CC sender also updates its
estimated RTprop and BtlBw with every received ACK, so it can
immediately switch to the cellular-tailored BBR if and when the
bottleneck location changes.
2The 3GPP standard defines 10 formats for control messages [3]. The base station does
not explicitly indicate the format of the message it sends.
8
Decoder 2Decoder 1Decoder 3PBE-CCCell 1USRP 1Cell 2Cell 3USRP 2USRP 3Mobile userRemote serverCellular networkMessage fusionHostPCUSRPX310USRPB210MIX3Redmi8S804812162024Time of a day (hour)050100150200250Detected users20MHz cell10MHz cell00.40.81.21.62Physical rate (Mbits/s/PRB)00.20.40.60.81CDF20MHz cell10MHz cellCongestion Control via Endpoint-Centric, Physical-Layer Bandwidth Measurements
SIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
(a) Average throughput.
(b) 95th percentile delay.
Figure 12: The distribution of throughput (a) and 95th per-
centile delay (b), of PBE-CC, BBR, Verus, and CUBIC (the
four “high throughput” algorithms), across 40 locations.
peak hours of a day, e.g., during the 12 to 20 hours period, the
average number of users per hour is 181 and 97 for 20 MHz and
10 MHz cell, respectively. Furthermore, the number of users varies
significantly within a day, i.e., maximum 233 and 135 users, mini-
mum 13 and zero users for 20 MHz and 10 MHz cell, respectively.
We note that the 10 MHz cell is turned off by the operator during
zero to three hour period, so we observe zero users. We also plot
the distribution of the wireless physical data rate of all detected
users, in Figure 11(b). We see that even though the users has diverse
data rates, a large portion are low-rate users, e.g., 77.4% and 71.9%
users have rate smaller than half of the maximum achievable data
rate (1.8 Mbit/s/PRB), for 10 MHz and 20 MHz cell, respectively. In
the following sections, we evaluate the performance of PBE-CC
working atop of these cells that serve large number of diverse users.
6.3 End-to-end Delay and Throughput
In this section, we investigate the delay and throughput perfor-
mance of PBE-CC achieved in a commercial cellular network.
6.3.1 Performance of Stationary Cellular Links. We investigate PBE-
CC’s performance on stationary cellular links. We build connections
between servers and stationary mobile users over which senders
transmit to their corresponding users for 20 seconds, recording
achieved throughput, packet delay, and arrival time in each flow.
We change the congestion control algorithm the sender adopts
and test eight algorithms sequentially. Since the capacity of the
cellular network varies when testing each algorithm, we repeat the
whole preceding test sequence (sequentially testing all algorithms)
five times at one location to provide a fair comparison of achieved
throughput, across different congestion control algorithms. Fur-
thermore, we conduct the foregoing experiment using different
phones, in order to measure performance with different numbers
of aggregated cells. We repeat these experiments at multiple indoor
and outdoor locations and at different times of the day, i.e., daytime
when the cell is busy, and late night when the cell is idle. In total,
we test 40 locations, covering all combinations of indoor/outdoor,
one/two/three aggregated cells and busy/idle links.
Comparison among high-throughput algorithms. As we will
demonstrate in the following section, PBE-CC, BBR, CUBIC, and
Verus achieve significantly higher throughput than the other four
algorithms we examine. We plot the distribution of the averaged
throughput and 95th percentile one way delay achieved by these
four algorithms, in Figure 12(a) and 12(b). We see that PBE-CC
achieves the highest throughput for most of the stationary links,
while simultaneously maintaining very low latency. Table 1 on p. 2
summarizes the performance improvement of PBE-CC over BBR
and Verus. PBE-CC achieves 2.3× average higher throughput than
CUBIC, and at the same time reduces 95th percentile delay by 1.8×.
Detailed comparison among eight algorithms. To provide a
detailed performance comparison among all eight algorithms, we
select six representative locations, and plot the 10th, 25th, 50th,
75th, and 90th percentile throughputs (averaged over every 100-
millisecond interval) and delay, for eight algorithms, in Figures 13
and 14. We have three observations from these figures. First, PBE-
CC achieves high average throughput, but also has somewhat high
throughput variance, since PBE-CC is able to match its send rate to
the varying wireless channel capacity. BBR achieves comparable
throughput with PBE-CC in all selected locations, but with higher
delay. Verus, a congestion control algorithm designed for cellular
networks, also achieves relatively high throughput in many loca-
tions, but introduces excessive packet delays. The performance of
CUBIC is highly unpredictable, alternating between high through-
put (but high delay) and low throughput (but low delay), as our
order statistics demonstrate. The other four algorithms, including
Copa, PCC, PCC-Vivace, and Sprout, have a large throughput dis-
advantage compared to PBE-CC. We plot the number of locations
at which each congestion control algorithm triggers the cellular
network to activate secondary cells for providing extra throughput
(maximum 30 locations, since we use Redmi 8 that uses only one
cell, in 10 locations), in Figure 15. We see that Copa, PCC, PCC-Vi-
vace, and Sprout use very conservative send rates, so the cellular
network disables carrier aggregation at most locations, resulting in
significant under-utilization of the available wireless capacity.
PBE-CC achieves a low delay and delay variance. Comparing
against BBR and Verus, two algorithms with relatively high through-
put, PBE-CC incurs much smaller delays. However, PBE-CC has a
slightly higher latency than the four algorithms with low through-
put. Such a delay gap is mainly caused by cellular retransmissions:
as we have demonstrated in Figure 6(b), higher throughputs result
in a larger TB error rates, and thus more retransmissions. Therefore,
under schemes with higher throughput, slightly more packets incur
a multiple of eight millisecond retransmission delay.
Finally, we observe that PBE-CC has low variance in both de-
lay and throughput when cells are idle, as shown in Figures 13(d)
and 14(b). Without competing traffic and mobility, wireless capacity
becomes stable for a static user in an idle cell. PBE-CC then achieves
stable throughput and delay by accurately estimating this capacity.
Alternation between states. On average, PBE-CC spends 18%
and 4% of its time working in Internet-bottleneck state, for 25 busy
links and 15 idle links, respectively, which validates our assumption
that a connection traversing a cellular network is bottlenecked at
the cellular wireless link for most of the time.
6.3.2 Performance under Mobility. A major source of cellular wire-
less capacity variations arise from wireless channel quality vari-
ations, caused by client mobility. In this section, we investigate
PBE-CC’s performance under mobility. We conduct this experi-
ment at night when the cell is approximately idle to reduce the
capacity variations introduced by other random competing users. In
9
020406080100Throughput (Mbit/s)00.20.40.60.81CDF across locationsBBR PBE CUBIC Verus408016032064095th percentile delay (ms)00.20.40.60.81CDF across locationsSIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
Yaxiong Xie, Fan Yi, Kyle Jamieson
(b) Two aggregated cells, in-
door and busy hours.
(d) Three aggregated cells, in-
(a) One aggregated cell, indoor
and busy hours.
door and late night (idle cells).
Figure 13: One way packet delay and throughput achieved by eight congestion control algorithms. The right and lower edge
of the box represents the 25% percentile of the achieved delay and throughput, respectively. The left and upper edge give the
75th percentiles. The two ends of the error bar gives the 10th and 90th percentiles. The intersection point of the horizontal
and vertical error bar represents the median of achieved delay and throughput.
(c) Three aggregated cells, in-
door and busy hours.
each test, we put the phone at a location with RSSI of −85 dBm for
the first 13 seconds, and then move it along a predefined trajectory
to another location with RSSI of −105 dBm in the next 13 seconds.
We move the phone back to the starting location (−85 dBm) with
a faster speed, taking about four seconds and put it there for 10
seconds. In total, each test takes 40 seconds. We repeat the same
process for each congestion control algorithm.
We present each algorithm’s achieved throughput and delay in
Figure 16, from which, we see that PBE-CC consistently achieves
low delay (95th percentile of 64 ms) and high average through-
put (55 Mbit/s). BBR achieves comparable throughput (55 Mbit/s)
with PBE-CC but suffers much higher delay (156 ms). CUBIC and
Verus achieve much lower throughput than PBE-CC (38 Mbit/s
and 41 Mbit/s) and also introduces high delay (296 ms and 467 ms).
Other algorithms, e.g., PCC, PCC-Vivace, Sprout, and Copa, have
low throughput, resulting in under-utilization of wireless capacity,
so mobility has a trivial effect on their packet delay.
To further demonstrate PBE-CC’s ability to track mobility, we
divide the 40-second experimentation period into 20 two-second
intervals and plot median throughput and delay of each interval
for PBE-CC and BBR, in Figure 17. We see that PBE-CC lowers
and increases its send rate accurately when the signal strength
decreases from 13 to 26 seconds and then increases from 26 to 30
seconds because of mobility, resulting in nearly zero buffering in the
network. On the other hand, BBR overreacts to the signal strength
decrease, reducing its send rate more than needed, because of its
inaccurate end-to-end capacity estimation. BBR also overestimates
capacity when the signal quality recovers at 30 seconds, causing
packet queuing and introducing excessive packet delay.
6.3.3 Performance under Controlled Competition. Besides mobility,
the competition between mobile clients for limited wireless capacity
is another major source of variations in network capacity. In this
section, we use controllable, on-off competing traffic to demonstrate
PBE-CC’s capability to track the time-varying wireless bandwidth
allocation caused by competition. Specifically, we start a PBE-CC
flow that runs for 40 seconds using a Redmi 8 phone. Every eight
seconds, we also start a four-second concurrent flow with a fixed
offered load of 60 Mbit/s from an AWS server, using a Xiaomi MIX3.
We conduct the experiments at night to make the possibility of
uncontrolled competition from other users remote. We repeat the
(a) Two aggregated cells, out-
door and busy hours.
Figure 14: The oneway packet delay and throughput
achieved by eight congestion control algorithms in two dif-
ferent outdoor tests covering the busy and idle cell status.
(b) Two aggregated cells, out-
door and late night (idle).
Figure 15: The number of lo-
cations at which each conges-
tion control algorithm trig-
gers carrier aggregation.
Figure 16: The achieved de-
lay and throughput of when
the mobile client is moving
along the same trajectory.
Figure 17: Delay and throughput achieved by PBE-CC (a) and
BBR (b) when the user is moving along the same trajectory.
10
3060120240480One way delay (ms)0153045Throughput (Mbit/s)VerusCUBICSproutCopaPCCVivaceBBRPBE30240120 60 One way delay (ms)(ms)0204060Throughput (Mbit/s)Copa   CUBIC                       Sprout VivacePCCPBEBBRVerus30240120 60 One way delay (ms)020406080100Throughput (Mbit/s)PBEBBRVerusCUBICSproutCopaPCCVivace3040506070One way delay (ms)020406080100Throughput (Mbit/s)SproutCopaPCCCUBICVerusVivaceBBRPBE30240120 60 One way delay (ms)020406080Throughput (Mbit/s)CopaPBEBBRCUBIC SproutPCCVivaceVerus30240120 60 One way delay (ms)020406080100Throughput (Mbit/s)PBEBBRCopaSproutPCCVivaceVerusCUBIC051015202530Number of locationsPCCVivaceCopaSproutCUBICVerusBBRPBECA triggeredNot triggered3060120240480Oneway delay (ms)020406080Throughput (Mbit/s)CUBICPCCVivaceSproutVerusBBRPBECopa0510152025303540Time (s)020406080Throughput (Mbit/s)ThroughputDelay0510152025303540Time (s)0306090120150180210Delay (ms)(a) PBE(b) BBRCongestion Control via Endpoint-Centric, Physical-Layer Bandwidth Measurements
SIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
Figure 18: Achieved delay and
throughput with controlled
competing traffic.
Figure 19: Average throughput and delay of every received packet in a flow. PBE-CC’s rate
increase and decrease is more responsive, thus grabbing capacity faster and keeping delay
constant, respectively. In contrast, BBR suffers delay fluctuations.
delay is 48 ms and 56 ms, for the first and second flow, respectively.
Furthermore, PBE-CC fairly allocates the estimated capacity for
two flows so these two flows have similar throughput, while other
algorithms may result in unbalanced throughput for multiple flows,
e.g., BBR achieves 10 Mbit/s and 35 Mbit/s for the first and second
connection, respectively. We note that even though PBE-CC may
achieve a smaller throughput for a single connection compared to
other algorithms, e.g., the first connection comparing with BBR,
PBE-CC provides better fairness across connections.
6.4 Fairness
In this section, we evaluate the fairness of PBE-CC, focusing on the
case where the bottleneck is the cellular wireless link.
Methodology. Without knowing the base station’s resource allo-
cation algorithm and fairness policy, simulation-based experiments
cannot predict real-world cellular network behavior. We therefore,
evaluate PBE-CC’s fairness directly in a cellular deployment. To
eliminate the impact of background traffic, we conduct our experi-
ment at night when the cell is idle. We use the three phones as three
competing users, each setting up a connection with a AWS server.
The S8, Redmi 8 and MIX3 starts its flow at zero, 10, and 20 sec-
onds, and ends at 60, 50, and 40 seconds, respectively. These three
phones share the same primary cell but have different secondary
and tertiary cells (if configured), so the primary cell at 1.94 GHz is
the shared bottleneck of three connections. We record the allocated
PRBs to each user by the primary cell, when three connections are
running concurrently. Three connections get identical allocated
primary cell PRBs if they achieve a fair-share.
6.4.1 Multi-user fairness. We investigate the fairness between mul-
tiple PBE-CC flows with similar propagation delays. We setup three