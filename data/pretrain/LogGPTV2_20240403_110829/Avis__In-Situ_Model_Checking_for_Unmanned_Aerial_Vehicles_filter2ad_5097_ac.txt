run (Figure 6b). Later, Avis injects failures at “P” and “B1”
simultaneously, since it has not yet injected a failure of a
primary with a backup (Figure 6d). When Avis considers
injecting a failure of “P” and “B2” in Figure 6e, it sees that it
has already failed “P” and “B1” and skips this combination.
In general, if a vehicle is equipped with N instances of a
sensor, sensor instance symmetry reduces the number of faults
that must be injected from N × (2N − 1) (e.g. N primary
instances of a sensor with 2N subsets to fail minus the empty
set of failures) to 2N − 1 (e.g. N − 1 ways to fail the backup
sensors with or without the primary, plus one way to fail the
primary alone) thus diminishing the effects of state explosion.
For the above example, sensor instance symmetry reduces the
number of checks from 21 to 5.
6
1) Safety: The invariant monitor detects both software
crashes and physical collisions for the safety rule. To detect
software crashes, the invariant monitor checks if the ﬁrmware
process is still running. To detect physical collisions inside
the simulator, the invariant monitor checks if (1) the vehicle
rapidly (de)accelerates but (2) has the same position as another
simulated object, e.g, the ground.
2) Liveliness: Checking the liveliness condition is chal-
lenging for two reasons. First, the behavior of the UAV may
change in the presence of sensor failures or non-determinism
introduced by the operating system scheduler (e.g. slight
delays between the workload sending and the ﬁrmware re-
ceiving messages), although the mission is still correctly being
executed. Second, liveliness sometimes must be sacriﬁced in
the presence of sensor failures to preserve safety. Avis must
detect when this has occurred and not report an error.
To combat the ﬁrst issue, Avis detects liveliness violation
by measuring the differences in the UAV’s behavior between
the test run and a set of correct proﬁling runs. If the test run
signiﬁcantly diverges from the correct runs, then liveliness is
violated. We assume runs without sensor failures are correct.
To measure the difference between two runs, Avis compares
the states of the vehicle at the same time offset t in both
runs. The state of the vehicle is represented using the tuple
(P, α, M ), where P ∈ R3 is the vehicle’s position, α ∈ R3
is the vehicle’s acceleration, and M is the vehicle’s mode.
Velocity is excluded because it is redundant: if the difference in
velocity is large, then the difference in acceleration or position
must also be large. We could detect
liveliness violations
using position alone. However, it takes tens of seconds to
detect liveliness violations with this approach. Using multiple
variables lets us detect violations in seconds. The invariant
monitor reports a liveliness violation if the state in the test
run deviates from the states in the proﬁling runs.
(cid:113)
Before deﬁning the distance between two states, we ﬁrst
deﬁne the distance of each component in the state tuple. For
both the position P and the acceleration α, we use Euclidean
distance (de). For example, the distance between two positions
P1 and P2 is computed as
1 − P x
2 )2,
where P x
i are the three coordinate values of
Pi. To deﬁne the distance between two modes, we utilize
the mode graph. A mode graph is a directed graph, where
each node represents a mode and each edge represents a
mode-change event. The mode graph is constructed from the
observed transitions between modes in the proﬁling runs. Note
that not every mode is adjacent in the mode graph – for
de(P1, P2) =
i , P y
i , and P z
2 )2 + (P y
1 − P y
(P x
2 )2 + (P z
1 − P z
(a)
(b)
(c)
(d)
(e)
Fig. 6: The process of pruning redundant faults. Compasses colored red are candidates for fault injection; colored black are
not under current consideration; colored blue are considered but pruned. Not shown: {P, B1, B2} and {B1, B2}.
instance, a drone cannot land before it is ﬂying. The distance
between modes (denoted dm) is deﬁned as the length of the
shortest path between them in the ﬁrmware’s mode graph.
We also normalize the distance of each component before
computing the distance between two states. Intuitively, we
want to transform the distance between the acceleration and
position components to measure “on a scale from 0 to the
longest path in the mode transition graph, how far apart are
these values?” To normalize the distance on positions, we ﬁrst
compute P, the largest distance between any two positions
that occur at the same time t of two different runs. Let Pi,t
denotes the position of the vehicle in simulation i at time t.
Then, P can be computed as
P = max{de(Pi,t, Pj,t)|1 ≤ i, j ≤ N ∧ 1 ≤ t ≤ T} ,
where N is the number of proﬁling runs and T is the duration
of the proﬁling runs. To ensure that every proﬁling runs have
the same duration, we repeat the last state an appropriate
number of times for the shorter runs. Then the normalized
position distance can be computed as
dP (Pi,t, Pj,t) =
de(Pi,t, Pj,t)D
where D denotes the length of the longest path in the mode
graph. Similarly, the normalized distance of two accelerations
can be computed as
dA(Ai,t, Aj,t) =
de(Ai,t, Aj,t)D
P
A
,
,
where Ai,t denotes the acceleration of the vehicle in simulation
i at time t, and
A = max{de(Ai,t, Aj,t)|1 ≤ i, j ≤ N ∧ 1 ≤ t ≤ T}
is the largest distance between any two accelerations at the
same time t of two different runs.
Finally, the distance between two state tuples is deﬁned as
d(Si,t, Sj,t) = (cid:107)(dP (Pi,t, Pj,t), dA(Ai,t, Aj,t), dM (Mi,t, Mj,t))(cid:107)
where Mi,t denotes the mode of the vehicle at time t in
simulation i and (cid:107).(cid:107) denotes the Euclidean norm.
With this distance deﬁned, we can compute τ, the largest
distance between any two states at the same time t of two
different runs to be
τ = max{d(Si,t, Sj,t|1 ≤ i, j ≤ N ∧ 1 ≤ t ≤ T )} .
7
Fig. 7: An overview of one step in the Avis process.
Avis considers the liveliness to have been violated in simula-
tion SF if
∀i : d(SF,t, Si,t) > τ.
(1)
That is, liveliness is violated at time t if the state is further
from all proﬁling runs than the maximum seen distance.
To allow UAVs to preserve safety at the expense of live-
liness, we allow developers to specify safe modes that are
always permitted. For instance, we provide a safe return to
launch location mode. If a vehicle enters a safe mode, Avis
does not signal that a bug has been found, even if liveliness
has been violated. Additional invariants must be supplied for
safe modes. For example, a vehicle executing in the return to
launch mode must make progress back to the launch site.
D. Replaying Bugs
Avis records the failures that it injects. Avis saves the fail-
ures for replay if an unsafe condition is found. To reconstruct
the unsafe condition, Avis re-executes the mission, injecting
the same faults at the same time offsets from mode transitions.
Even in the presence of minor non-determinism this technique
is successful since failures are injected at
the same time
relative to the modes they affect.
V. IMPLEMENTATION
Avis contains several components: (1) a high-level frame-
work for building UAV workloads, (2) a fault injection engine
for generating fault injection scenarios, and (3) an invariant
monitor for detecting incorrect ﬁrmware behaviors. Avis’
source code is available at [22].
explored failures@tB1B2Pexplored failures@t-PB1B2Pexplored failures@t-P-B1B1B2Pexplored failures@t-P-B1-B1, B2B1B2Pexplored failures@t-P-B1-B1, B2-P, B1B1B2PAvisInvariant MonitorSimulatoruworkload calls step()vsim. advances timewsensorssimulatedxfaults injectedyactuator outputs to sim.zvehicle state updatedFault Injection EngineWorkloadVehicleSensor DriversState EstimatorNavigatorFigure 7 shows an overview of one time-step of the sim-
ulator. The goal of Avis is to test the UAV’s ﬁrmware under
different sensor failure scenarios. At the start of each test,
Avis provisions a new instance of the simulator and ﬁrmware.
Next, Avis launches its invariant monitor and its workload.
The workload executes until it returns control back to Avis
by calling the step() RPC (Step 1). Typically, workloads
created using our framework only need to call our high-level
APIs, e.g., takeoff(), which call step(). When step()
is called, Avis notiﬁes the simulator to advance its time by
a ﬁxed unit (1ms) and to permit the ﬁrmware to retrieve its
current state (Step 2). The simulator then generates synthetic
sensor readings based on the UAV’s physical state (Step 3).
After reading the sensor values, instrumented code in sensor
drivers report the readings to the fault injection engine and
inject sensor failures as directed (Step 4). Then the ﬁrmware
continues executing and eventually sends the actuator outputs
to the simulator (Step 5). The simulator uses this information
to compute the next physical state of the vehicle (Step 6) and
it informs Avis the step has completed. At the end of each
step, the invariant monitor checks the vehicle’s state is safe.
A. Workload Framework and Workloads
UAVs communicate a workload’s commands using the
MAVLink protocol [21], [30]. However, MAVLink is chal-
lenging for developers to use to create workloads. The UAV
is responsible for controlling most interactions between the
ground-control station and the vehicle. For instance, to upload
new missions the ground-control station ﬁrst communicates
the number of mission items to the vehicle and then waits for
the vehicle to request each item. This presents two problems.
First, it introduces the possibility of deadlock during model
checking. Since the vehicle’s execution is carefully synchro-
nized with both the simulator and Avis, both parties must avoid
simultaneously waiting on messages from each other. Second,
this makes even simple missions difﬁcult to implement.
Avis’s workload framework provides high-level APIs that
safely abstract the most common MAVLink transactions. By
default, we provide two workloads that we show are effective
at triggering bugs with Avis. Developers can create additional
workloads using our Python framework.
We show an example of a simple workload that uses our
framework in Figure 8. First, the workload waits 40 seconds
for the UAV to initialize (Line 1). Next, the workload uploads
takeoff and land commands (Line 2). Then, the workload arms
the UAV (Line 8) and enters the ﬂy-to-waypoint mode (Line
9). Finally, the workload waits for the vehicle to reach its
target altitude (Line 10) and then for the vehicle to land (Line
11). The ﬁnal step of the workload is to communicate the test
succeeded to AVIS (Line 12).
Our ﬁrst workload uses a manual mode that holds the
vehicle’s position. First, the UAV ascends to an altitude of 20
meters (m). Then, the UAV ﬂies the perimeter of a 20mx20m
box. Finally, the UAV lands at its launch point.
This mission is sufﬁcient to test manual modes. Other man-
ual modes maintain the vehicle’s orientation (e.g. pitch/rol-
1
2
3
4
5
6
7
8
9
10
11
12
class AutoWorkload(workload_framework.Target):
def test(self):
self.wait_time(40000)
self.upload_mission(
self.takeoff_mission(20,self.cur_lati,
self.cur_longi,self.home_alti) +
self.land_mission())
self.arm_system_completely()
self.enter_auto_mode()
self.wait_altitude(20)
self.wait_altitude(0)
self.pass_test()
Fig. 8: An example workload built with Avis’s workload
framework.
l/yaw) or altitude. Holding the position requires holding ori-
entation and altitude. UAV ﬁrmware typically reuses the code
that
implements this behavior. So, by testing the position
mode, we test these two modes as well.
UAV ﬁrmware also provide stunt and race modes. We
choose to leave these modes untested. Stunts and race modes
relax the ﬁrmware’s safety guarantees. This places more trust
in the UAV’s operator. A sensor failure at this time cannot
expose a new bug.
Our second workload uses waypoints and a fence. Fences
are used to prevent the UAV from entering restricted airspace.
Fences can also be used to contain a UAV. First, the UAV
ascends to an altitude of 20m. Then, our workload guides the
UAV along a 20mx20m box. The box overlaps with a fenced
area the UAV must avoid. The UAV lands at its launch site.
We do not consider the effect of special workload details or
environments on bug manifestation. We observe that known
sensor bugs are not sensitive to these factors. Nevertheless,
future work may rigorously pursue this direction to establish
the absence of this class of bugs.
B. Fault Injection Engine
Avis’s fault
injection system is composed of two com-
ponents. The ﬁrst component is libhinj (Hardware Fault
Injector), a library for instrumenting UAV ﬁrmware. The
second component is the scheduler. The scheduler injects fail-
ures by communicating with simulated drivers instrumented
with libhinj. Here, we discuss (1) the implementation of
libhinj and (2) the implementation of the scheduler.
1) libhinj: We implement libhinj, a library that functions
as the interface between Avis and the UAV ﬁrmware. libhinj
reports the ﬁrmware’s mode transitions and sensor readings to
Avis and injects sensor failures. libhinj is available at [23].
libhinj reports the ﬁrmware’s mode to Avis through its
hinj_update_mode() API. UAV ﬁrmware has a speciﬁc
function that updates the vehicle’s mode. We simply insert
the hinj_update_mode() call within this call site. As a
result, whenever the mode changes, hinj_update_mode()
is invoked to report the updated mode to Avis.
We use libhinj to instrument the ﬁrmware’s driver mod-
ule. This allows Avis to inject faults on-demand. We insert a
8
Features
Targets operating mode transitions
Prior bugs inform injection sites
Search dissimilar scenarios ﬁrst
Avis
(cid:88)
(cid:88)
(cid:88)
Strat. BFI

(cid:88)
(cid:88)
BFI
