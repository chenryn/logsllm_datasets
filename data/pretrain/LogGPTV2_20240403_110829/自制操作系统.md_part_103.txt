这次修改中我们进行如下设定：当在日文界面下开始显示全角字符的第2个字节时， refresh
的范围会从x – 8开始，其他的部分保持不变。
我们来看看是不是解决了这个bug，“make run”一下试试看，和昨天一样运行chklang命
令……哦哦，出来了！
修好了
于是这个bug顺利解决了，可喜可贺。
22 文件压缩（harib26b）
到上一节为止，我们已经修复了所有的bug，“纸娃娃系统”也可以宣告完成了，撒花！不过
为了锦上添花，我们还要再做个小小的修改。
在此之前，我们先来确认一下目前操作系统核心部分程序的大小（好像已经很久没有确认了
呢）。haribote.sys的大小为34782字节，即34.0KB，真小啊，不错不错。源代码的大小又如何呢？
我们来看一下haribote目录下的所有文件，一共是99230字节（不包括hankaku.txt），即96.9KB，相
当小呀。
那么下面我们还想要增加一个什么样的功能呢？答案是“支持文件压缩”的功能。这里所说
的文件压缩，就是像zip文件一样将文件变小保存起来的功能。不过其实这次我们所要实现的并
不是文件的“压缩”，而是将压缩好的文件“解压缩”的功能。
这样一来，压缩过的文件可以在操作系统内部自动解压缩，不需要使用压缩软件来进行解压
缩的操作。对于压缩过的文件，可以像未经压缩的文件一样直接使用。
之所以要增加这样的功能，是为了尽量让日文字库文件变小。现在nihongo.fnt有142KB，但
OSASK用的jpn16v00.fnt却只有56.7KB，这都是拜压缩所赐。因此如果我们在“纸娃娃系统”中
图灵社区会员 metorm 专享 尊重版权
2 文件压缩（harib26b） …… 637
也使用压缩，估计能节省大约85KB的磁盘空间，这样一来即便我们编写很多应用程序，也用不
1
着使用ipl30.bin了，也就是说，可以不需要再额外延长启动时间了。
18
■■■■■
世界上有许多种压缩格式（比如.zip、.cab、.lzh、.bz2等），那么我们选用哪一种格式呢？有
3
些格式的压缩率不错，但解压缩需要花费很长的时间；有些格式压缩率不是很理想，但解压缩速
度却很快。哎呀，如果有一种格式压缩率又好，同时解压缩速度又快就太好了；反之，如果压缩
20
率不行，解压缩又慢的话，那就太差劲了。
此外，解压缩程序的大小也是个问题。即便压缩率再好，可以将142KB的nihongo.fnt压缩到
21
1KB，但解压缩程序却要150KB，那结果只能是适得其反。
其实笔者在这个问题上考虑了半年的时间，为了给自己开发的软件加上对压缩文件的支持，
22
在选用哪一种压缩格式上面做了一些研究，结果自己编写了一个平衡性还不错的新格式——tek，
之后就一直使用这种格式了。之前我们介绍的jpn16v00.fnt就是用tek压缩的（OSASK中已经实现
了对压缩文件的支持）。 7
在这里很想跟大家介绍一下tek的优点，不过真讲起来的话太浪费篇幅了，总之在这里我们
也使用tek格式了，请大家接受这个设定吧。如果有人不赞同的话，也可以对程序进行修改，使 8
用其他的格式，你一定会发现tek在平衡性方面的优势（当然，如果你发现有比tek更好的选择，
请尽管用哦）。
9
■■■■■
26
好，下面我们将tek的解压缩程序整合到“纸娃娃系统”中，不过如果要在这里讲解tek的算
法，然后再编写相关的函数，不知道要讲到猴年马月了，而且本书是讲编写操作系统的，不是学
27
习压缩算法的，所以我们就偷个懒，从edimg.exe的源代码中直接将tek相关的部分拿出来用吧（对
不住了！）。
28
edimg.exe的源代码是公开的，tek相关的程序位于autodec_.c这个文件中，将这个文件直接复
制到harib26b目录的tek/uatodec_.c就可以了。
29
然而，这个程序并无法轻易地汇整作为程序库来使用，这一点上笔者确实偷懒了（借口：与
其说是偷懒，不如说是忙到没有时间来整理吧……比如说忙着写这本书之类的）。
29
于是，我们删除了对于“纸娃娃系统”来说不太好用的autodecomp函数，并增加了必要的函
数tek_getsize和tek_decomp，同时将加工过的程序保存为tek.c（在tek/和haribote/中同时放入同样
的文件）。 15
tek.c节选
16
int tek_getsize(unsigned char *p)
图灵社区会员 metorm 专享 尊重版权
638 …… 第29天：压缩与简单的应用程序
{
static char header[15] = {
0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x4f, 0x53, 0x41, 0x53, 0x4b, 0x43, 0x4d, 0x50
};
int size = -1;
if (memcmp(p + 1, header, 15) == 0 && (*p == 0x83 || *p == 0x85 || *p == 0x89)) {
p += 16;
size = tek_getnum_s7s(&p);
}
return size;
} /* （注）memcmp和strncmp差不多，这个函数忽略字符串中的0并一直比较到指定的15个字符为止*/
int tek_decomp(unsigned char *p, char *q, int size)
{
int err = -1;
if (*p == 0x83) {
err = tek_decode1(size, p, q);
} else if (*p == 0x85) {
err = tek_decode2(size, p, q);
} else if (*p == 0x89) {
err = tek_decode5(size, p, q);
}
if (err != 0) {
return -1; /*失败*/
}
return 0; /*成功*/
}
话说回来，即便给大家看上面的代码，估计大家也看不明白tek_getnum_s7s和tek_decode1之
类的到底是怎么一回事。不过基本上，tek_getsize函数用来判断文件是否符合tek格式，如果是合
法的tek格式则取得解压缩后的文件大小（如果不是合法的tek格式则返回1），然后tek_decomp函
数用来完成解压缩操作。
还有，我们将autodec_.c中的malloc和free分别改成了memman_alloc_4k和memman_free_4k，
以上就是本次修改的全部内容。
利用上面两个函数，我们编写了一个叫file_loadfile2的函数。
本次的file.c节选
char *file_loadfile2(int clustno, int *psize, int *fat)
{
int size = *psize, size2;
struct MEMMAN *memman = (struct MEMMAN *) MEMMAN_ADDR;
char *buf, *buf2;
buf = (char *) memman_alloc_4k(memman, size);
file_loadfile(clustno, size, buf, fat, (char *) (ADR_DISKIMG + 0x003e00));
if (size >= 17) {
size2 = tek_getsize(buf);
if (size2 > 0) { /*使用tek格式压缩的文件*/
buf2 = (char *) memman_alloc_4k(memman, size2);
图灵社区会员 metorm 专享 尊重版权
2 文件压缩（harib26b） …… 639
tek_decomp(buf, buf2, size2);
1
memman_free_4k(memman, (int) buf, size);
buf = buf2;
*psize = size2;
} 18
}
return buf;
}
3
这个函数的功能是，首先用memman_alloc_4k申请必要的内存空间，然后用file_loadfile函数
20
将文件内容载入内存。如果文件大小超过17字节则表示其有可能为tek格式的文件①，调用
tek_getsize进行判断，如果判断该文件确实为tek格式，则为解压缩后的文件申请分配内存空间，
并执行解压缩操作，然后舍弃解压缩前的文件内容。本函数将返回载入并存放文件内容的内存 21
地址。
这里需要说明的是psize这个变量，之前我们一直是这样写的： 22
char *file_loadfile2(int clustno, int size, int *fat)
7
而这次我们将size改成了int *psize，因为我们不是要向函数传递size的值，而是要传递存放size
变量的内存地址。 8
之所以要这样做，是因为在判断文件为tek格式之后，我们需要将size变量的值修改为解压缩
后的文件大小，要修改变量的值就需要知道该变量的内存地址。 9
■■■■■
26
接下来我们用file_loadfile2函数来修改一下载入nihongo.fnt的部分。
27
本次的bootpack.c节选
void HariMain(void)
{ 28
（中略）
/*载入nihongo.fnt */
29
fat = (int *) memman_alloc_4k(memman, 4 * 2880);
file_readfat(fat, (unsigned char *) (ADR_DISKIMG + 0x000200));
finfo = file_search("nihongo.fnt", (struct FILEINFO *) (ADR_DISKIMG + 0x002600), 224); 29
if (finfo != 0) {
i = finfo->size; /*这里！*/
nihongo = file_loadfile2(finfo->clustno, &i, fat); /*这里！*/ 15
——————————
① tek格式的文件必须带有一个用于识别格式的文件头，这个文件头的部分至少有17字节，因此只对大于17字节的文 16
件判断其是否为tek格式。
图灵社区会员 metorm 专享 尊重版权
640 …… 第29天：压缩与简单的应用程序
} else {
nihongo = (unsigned char *) memman_alloc_4k(memman, 16 * 256 + 32 * 94 * 47); /*这里！*/
for (i = 0; i bim2bin –osacmp in:nihongo.org out:nihongo.fnt
即可完成文件的压缩，其中nihongo.org是在压缩前将nihongo.fnt改了一下名字而已。tek压缩
还有一些选项，比如用下面的命令：
提示符> bim2bin –osacmp in:nihongo.org out:nihongo.fnt –tek2
表示压缩为tek2格式。如果指定tek5，或者不指定任何选项的话，则是压缩为tek5格式。tek2
格式的压缩率比较低，但解压缩速度比较快，在真机环境下测试表明，tek5格式的解压缩速度已
经够快了，当然，如果对解压缩速度不满意的话，可以试试tek2。
用tek5格式压缩后，142KB的nihongo.org被压缩为56.6KB的nihongo.fnt，撒花！
准备完成，“make run”试试看，能不能顺利显示出汉字呢？显示出来了！
图灵社区会员 metorm 专享 尊重版权
2 文件压缩（harib26b） …… 641
1
18
3
20
使用压缩过的字库也能显示出汉字了
21
再加把劲，这次我们要让应用程序经过tek压缩后也可以直接运行。
本次的console.c节选 22
int cmd_app(struct CONSOLE *cons, int *fat, char *cmdline)
{
（中略） 7
int i, segsiz, datsiz, esp, dathrb, appsiz; /*这里！ */
（中略）
8
if (finfo != 0) {
/*如果找到文件*/
appsiz = finfo->size; /*从此开始*/
9
p = file_loadfile2(finfo->clustno, &appsiz, fat);
if (appsiz >= 36 && strncmp(p + 4, "Hari", 4) == 0 && *p == 0x00) { /*到此结束*/
（中略）
} else { 26
（中略）
}
memman_free_4k(memman, (int) p, appsiz); /*这里！*/
27
cons_newline(cons);
return 1;
}
/*如果没有找到文件*/ 28
return 0;
}
29
修改的部分只是将应用程序的大小从finfosize改成appsiz，并使用file_loadfile2函数来载入。
除此之外，虽然我们已使用了file_loadfile，但还剩下一个地方，那就是文件API的部分，我 29
们也顺便将其修改成file_loadfile2吧。
15
本次的console.c节选
int *hrb_api(int edi, int esi, int ebp, int esp, int ebx, int edx, int ecx, int eax)
{ 16
（中略）
图灵社区会员 metorm 专享 尊重版权
642 …… 第29天：压缩与简单的应用程序
} else if (edx == 21) {
（中略）
if (i size = finfo->size;
fh->pos = 0;
fh->buf = file_loadfile2(finfo->clustno, &fh->size, task->fat); /*这里！ */
}
}