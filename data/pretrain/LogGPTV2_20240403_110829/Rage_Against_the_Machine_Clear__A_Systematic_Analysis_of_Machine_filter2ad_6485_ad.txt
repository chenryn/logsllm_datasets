execution of valid code to type confusion, arbitrary reads, and
ultimately a secret-dependent load to transmit the value.
Second, we need to target short-lived JIT code cache up-
dates, so that the newly generated code is immediately exe-
cuted, ﬁtting the target gadget in the resulting transient execu-
tion window. Interestingly, executing JIT’ed code is the next
step after JIT code generation mentioned in the Intel manual
(Figure 7, Option 1), suggesting that developers that follow
such directives ad litteram can easily introduce such gadgets.
Moreover, modern JavaScript compilers feature a multi-stage
optimization pipeline [12, 54] and short-lived JIT code cache
updates are favored for just-in-time (re)optimization. Indeed,
we found test code in V8 to speciﬁcally test such updates and
verify instruction/data cache coherence [70].
Finally, we need to ensure JIT code cache updates are not
accompanied by barriers that force immediate synchroniza-
tion of the code and data views. We analyzed the code of
the popular SpiderMonkey and V8 JavaScript engines and
veriﬁed that the functions called upon JIT code cache updates
to synchronize instruction and data caches (Listing 2 and List-
ing 3) are always empty on x86 (as expected, given Intel’s
primary recommendation in Figure 7).
Overall, while the exploitation is far from trivial (i.e., hav-
bool codeIsThreadLocal = true) {
/* No-op. Code and data caches are coherent on x86
(cid:44)→
and x64. */ }
ing to address the challenges of traditional use-after-free ex-
ploitation as well as transient execution exploitation in the
browser), we believe SCSB expands the attack surface of tran-
sient execution attacks in the browser. We found a number of
candidate SCSB gadgets in real-world code, but none of them
was ultimately exploitable due to the coincidental presence of
some serializing instruction preventing stale code execution.
Nonetheless, mitigations are needed to enforce security-by-
design. Luckily, as shown later, SCSB is amenable to a prac-
tical and efﬁcient mitigation (i.e., at a similar cost as faced
by non-x86 architectures). The implementation/performance
cost for mitigation is even lower than for its sibling SSB prim-
itive, whose mitigation has been deployed in practice even in
absence of known practical exploits [55].
In Table 3, we show that all tested Intel and AMD proces-
sors are affected by SCSB. In contrast, ARM is not vulnerable
since SMC updates require explicit software barriers.
11.2 Floating Point Value Injection (FPVI)
Our second attack primitive, Floating Point Value Injection
(FPVI), allows an attacker to inject arbitrary values into a
transient execution window originated by a FP machine clear.
As exempliﬁed in Figure 8, the operations of the primitive can
be broken down into four steps: (1) the attacker triggers the
execution of a gadget starting with a denormal FP operation
in the victim application, with the x and y operands under
attacker’s control; (2) the transient z result of the operation is
processed by the subsequent gadget instructions, leaving a mi-
croarchitectural trace; (3) the CPU detects the error condition
(i.e., wrong result of a denormal operation), triggering a ma-
chine clear and thus a pipeline ﬂush; (4) the CPU re-executes
the entire gadget with the correct architectural z result. For
exploitation, the attacker needs to (i) massage the x and y
operands to inject the desired z value into the victim transient
path and (ii) target a victim gadget so that the injected value
yields a security-sensitive trace which can be observed with
FLUSH + RELOAD or other microarchitectural attacks.
Our primitive bears similarities with Load-Value-Injection
(LVI) [71], since both allow attackers to inject controlled
values into transient execution. Moreover, both primitives
1460    30th USENIX Security Symposium
USENIX Association
mitigations against transient execution attacks [52].
As exempliﬁed in the ﬁgure, SpiderMonkey’s NaN-Boxing
strategy represents every variable with a IEEE-754 (64-bit)
double where the highest 17 bits store the data type tag and the
remaining 47 bits store the data value itself. If the tag value is
less than or equal to 0x1fff0 (i.e., JSVAL_TAG_MAX_DOUBLE)
all the 64 bits are interpreted as a double, while NaN-Boxing
encoding is used otherwise. For instance, the 0xfff88 tag
is used to represent 32-bit integers and the 0xfffb0 tag to
represent a string with the data value storing a pointer to
the string descriptor. In the example, the attacker crafts the
operands of a vulnerable FP operation (in this case a division)
to produce a transient result which the JIT’ed code interprets
as a string pointer due to NaN-Boxing. This causes type
confusion on a transient path and ultimately triggers a read
with an attacker-controlled address.
To verify the attacker can inject arbitrary pointers without
fully reverse engineering the complex function used by the
FPU, we implemented a simple fuzzer to ﬁnd FP operands
that yield transient division results with the upper bits set
to 0xfffb0 (i.e., string tag). With such operands, we can
easily control the remaining bits by performing the inverse
operation since the mantissa bits are transiently unaffected
by the exponent value, as shown in Table 2. For example,
using 0xc000e8b2c9755600 and 0x0004000000000000 as
division operands yields -Inﬁnity as the architectural result
and our target string pointer 0xfffb0deadbeef000 as the
transient result (see gadget in Figure 8).
Note that SpiderMonkey uses no guards or Spectre mitiga-
tions when accessing the attribute length of the string. This
is normally safe since x86 guarantees that NaN results of FP
operations will always have the lowest 52 bits set to zero—a
representation known as QNaN Floating-Point Indeﬁnite [37].
In other words, the implementation relies on the fact that NaN-
boxed variables, such as string pointers, can never accidentally
appear as the result of FP operations and can only be crafted
by the JIT engine itself. Unfortunately, this invariant no longer
holds on a FPVI-controlled transient path. As shown in Fig-
ure 8, this invariant violation allows an attacker to transiently
read arbitrary memory. Since the length attribute is stored
4 bytes away from the string pointer, the z.length access
yields a transient read to 0xdeadbeef000+4.
We ran our exploit on an Intel i9-9900K CPU (microcode
0xde) running Linux 5.8.0 and Firefox 85.0 and, by wrapping
this primitive with a variant of an EVICT + RELOAD covert
channel [61], we conﬁrmed the ability to read arbitrary mem-
ory. Since prior work has already demonstrated that custom
high-precision timers are possible in JavaScript [26,29,60,64],
we enabled precise timers in Firefox to simplify our covert
channel. With our exploit, we measured a leakage rate of ~13
KB/s and a transient window of ~12 load instructions, enabled
by increasing the FPU pressure through a chain of multiple
dependent FP operations.
Finally, as shown in Table 3, we observe that both Intel and
Figure 8: FPVI gadget example in SpiderMonkey.
FP_Op(x,y) is an arbitrary denormal FP operation. The er-
roneous z result causes dependent operations to be executed
twice (ﬁrst transiently, then architecturally). The NaN-boxing
z encoding allows the attacker to type-confuse the JIT’ed code
and read from an arbitrary address on the transient path.
require gadgets in the victim application to process the in-
jected value and perform security-sensitive computations on
the transient path. Nonetheless, the underlying issues and
hence the triggering conditions are fairly different. LVI re-
quires the attacker to induce faulty or assisted loads on the
victim execution, which is straightforward in SGX applica-
tions but more difﬁcult in the general case [71]. FPVI imposes
no such requirement, but does require an attacker to directly
or indirectly control operands of a ﬂoating-point operation in
the victim. Nonetheless, FPVI can extend the existing LVI
attack surface (e.g., for compute-intensive SGX applications
processing attacker-controlled inputs) and also provides ex-
ploitation opportunities in new scenarios. Indeed, while it is
hard to draw general conclusions on the availability of ex-
ploitable FPVI gadgets in the wild—much like Spectre [41],
LVI [71], etc., this would require gadget scanners subject of
orthogonal research [56, 58]—we found exploitable gadgets
in NaN-Boxing implementations of modern JIT engines [53].
NaN-Boxing implementations encode arbitrary data types as
double values, allowing attackers running code in a JIT sand-
box (and thus trivially controlling operands of FP operations)
to escalate FPVI to a speculative type confusion primitive.
The latter can be exploited similarly to NaN-Boxing-enabled
architectural type confusion [26] and allows an attacker to
access arbitrary data on a transient path. Figure 8 presents
our end-to-end exploit for a JavaScript-enabled attacker in a
SpiderMonkey (Mozilla JavaScript runtime) sandbox, illus-
trating a gadget unaffected by all the prior Mozilla Firefox’
USENIX Association
30th USENIX Security Symposium    1461
Table 3: Tested processors.
12.2 FPVI Mitigation
Processor
Intel Core i7-10700K
Intel Xeon Silver 4214
Intel Core i9-9900K
Intel Core i7-7700K
AMD Ryzen 5 5600X
AMD Ryzen 2990WX
AMD Ryzen 7 2700X
Broadcom BCM2711
Cortex-A72 (ARM v8)
Microcode
0xe0
0x500001c
0xde
0xca
0xa201009
0x800820b
0x800820b
SCSB
vulnerable
FPVI
vulnerable







§




†
†
†

† No exploitable NaN-boxed transient results found
§ On ARM, SMC updates require explicit software barriers
AMD are affected by FPVI, although we found no exploitable
transient NaN-boxed values on AMD. On ARM, we never
observed traces of transient results, yet we cannot rule out
other FPU implementations being affected.
12 Mitigations
12.1 SCSB Mitigation
SCSB can be mitigated by ensuring that any freshly written
code is architecturally visible before being executed. For ex-
ample, on ARM architectures, where the hardware does not
automatically enforce cache coherence, explicit serializing in-
structions (i.e., L1i cache invalidation instructions) are needed
to correctly support SMC [5]. As such, spec-compliant ARM
implementations cannot be affected by SCSB. On Intel and
AMD, we can force eager code/data coherence using a serial-
ization instruction—although this is normally not necessary
(see Option 1 in Figure 7). In our experiments, we veriﬁed any
serialization instruction such as lfence, mfence, or cpuid
placed after the SMC store operations is indeed sufﬁcient to
suppress the transient window. Note that sfence cannot serve
as a serialization instruction [35] to eliminate the transient
path. This serialization mitigation was conﬁrmed by CPU
vendors and adopted by the Xen hypervisor [32, 33].
To evaluate the performance impact of our mitigation, we
added a lfence instruction inside the FlushICache function
(Listings 2 and 3) of the two popular V8 and SpiderMonkey
JavaScript engines. Such function, normally empty on x86,
is called after every code update. Our repeated experiments
on the popular JetStream2 and Speedometer2 [77] bench-
marks did not produce any statically measurable performance
overhead. This shows JavaScript execution time is heavily
dominated by JIT code generation/execution and code up-
dates have negligible impact. Our results show this mitigation
is practical and can hinder SCSB-based attack primitives in
JIT engines with a 1-line code change.
The most efﬁcient way to mitigate FPVI is to disable the de-
normal representation. On Intel, this translates to enabling the
Flush-to-Zero and Denormals-are-Zero ﬂags [37], which re-
spectively replace denormal results and inputs with zero. This
is a viable mitigation for applications with modest ﬂoating-
point precision requirements and has also been selectively ap-
plied to browsers [42]. However, this defense may break com-
mon real-world (denormal-dependent) applications, a concern
that has led browser vendors such as Firefox to adopt other
mitigations. Another option for browsers is to enable Site Iso-
lation [13], but JIT engines such as SpiderMonkey still do not
have a production implementation [23]. Yet another option
for JIT engines is to conditionally mask (i.e., using a transient
execution-safe cmov instruction) the result of FP operations
to enforce QNaN Floating-Point Indeﬁnite semantics [37], as
done in the SpiderMonkey FPVI mitigation [51]. This strategy
suppresses any malicious NaN-boxed transient results, but
requires manual changes to the NaN-boxing implementation
and only applies to NaN-boxed gadgets.
A more general and automated mitigation is for the com-
piler to place a serializing instruction such as lfence after
FP operations whose (attacker-controlled) result might leak
secrets by means of transmit gadgets (or transmitters). We
observe this is the same high-level strategy adopted by the
existing LVI mitigation in modern compilers [39], which
identiﬁes loaded values as sources and uses data-ﬂow anal-
ysis to ensure all the sources that reach a sink (transmitter)
are fenced. Hence, to mitigate FPVI, we can rely on the same
mitigation strategy, but use computed FP values as sources
instead. To identify sinks, we consider both systems vulnera-
ble and those resistant to Microarchitectural Data Sampling
(MDS) [8, 59, 63, 75, 76]. For the former, we consider both
load and store instructions as sinks (e.g., FP operation result
used as a load/store address), as the corresponding arbitrary
data spilled into microarchitectural buffers may be leaked by
a MDS attacker. For the latter, we limit ourselves to load sinks
to catch all the arbitrary read values potentially disclosed by a
dependent transmitter. In both cases, we add indirect branches
controlled by FP operations (and thus potentially leading to
speculative control-ﬂow hijacking) to the list of sinks.
We have implemented such a mitigation in LLVM [45],
with only 100 lines of code on top of the existing x86 LVI
load hardening pass. To evaluate the performance impact
of our mitigation on ﬂoating-point-intensive programs, we
ran all the C/C++ SPECfp 2006 and 2017 benchmarks in
four conﬁgurations: LVI instrumentation, FPVI instrumen-
tation for both MDS-vulnerable and MDS-resistant systems,
and joint LVI+FPVI instrumentation for MDS-vulnerable sys-
tems. Please note that on MDS-resistant systems, the FPVI
transmitters are already covered by the LVI mitigation.
Figure 9 shows the performance overhead of such con-
ﬁgurations compared to the baseline. As expected, the LVI
1462    30th USENIX Security Symposium
USENIX Association
Figure 9: Performance overhead of our FPVI mitigation on the C/C++ SPECfp 2006 and 2017 benchmarks. Experimental setup:
5 SPEC iterations, Intel i9-9900K (microcode 0xde), and LLVM 11.1.0.
mitigation has non-trivial performance impact up to 280%
despite targeting ﬂoating-point-intensive programs. On the
other hand, our FPVI mitigation incurs in a 32 % and 53 % ge-
omean overhead on SPECfp 2006 and 2017 respectively, with
no observable performance impact difference between MDS-
vulnerable and MDS-resistant variants. We observed that ap-
proximately 70% of the inserted lfence instructions are due
to the intraprocedural design of the original LVI pass, forc-
ing our analysis to consider every callsite with FPVI source-
based arguments as a potential transmitter. This suggests the
overhead can be further reduced by operating interprocedu-
ral analysis or more aggressive inlining (e.g., using LLVM
LTO [45]).
13 Root Cause-based Classiﬁcation
We now summarize the results of our investigation by present-
ing a root cause-based classiﬁcation for the known transient
execution paths. While there have already been several at-
tempts to classify properties of transient execution [10,75,80],
all the existing classiﬁcations are attack-centric. While cer-
tainly useful, such classiﬁcations inevitably blend together
the root causes of transient execution with the attack triggers.
For example, a MDS exploit based on a demand-paging page
fault [75] may be simply classiﬁed as a Meltdown-like attack
based on a present page fault [10]. However, in such an exploit
the page fault is both the vulnerability trigger and the root
cause of the transient execution window. A similar exploit