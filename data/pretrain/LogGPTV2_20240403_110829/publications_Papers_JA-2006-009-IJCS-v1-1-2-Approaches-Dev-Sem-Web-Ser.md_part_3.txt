# Non-Functional Properties and Perspectives on Web Services

Non-functional properties encompass the operational capabilities of web services, which can be analyzed from both choreography and orchestration perspectives. Choreography focuses on the interactions established with a web service, while orchestration deals with the set of functionalities required from other web services.

## Capability Definition
The capability of a web service defines its functionality and includes non-functional properties, imported ontologies, mediators, and shared variables. A WSMO (Web Service Modeling Ontology) ontology is composed of concepts, relations, functions, instances, and axioms. Concepts are defined using a parent-child hierarchy and their attributes, including range specifications. Relations describe interdependencies between parameters, and functions are relations with a unary range and a set of parameters. Instances are specific individuals of concepts or relations, and axioms are logical expressions that formalize domain-specific knowledge.

### Example: Book Ticket Service
To illustrate, consider the following extract [23] of the capabilities of the "Book Ticket" service:

```wsml
capability BookTicketCapability
sharedVariables {?creditCard, ?initialBalance, ?trip, ?reservationHolder, ?ticket}
precondition
definedBy
?reservationRequest[
  reservationItem hasValue ?trip,
  reservationHolder hasValue ?reservationHolder
] memberOf tr#reservationRequest and
?trip memberOf tr#tripFromAustria and
?creditCard[balance hasValue ?initialBalance] memberOf po#creditCard.
assumption
definedBy
po#validCreditCard(?creditCard) and
(?creditCard[type hasValue "PlasticBuy"] or
 ?creditCard[type hasValue "GoldenCard"]).
postcondition
definedBy
?reservation[
  reservationHolder hasValue ?reservationHolder,
  item hasValue ?ticket
] memberOf tr#reservation and
?ticket[trip hasValue ?trip] memberOf tr#ticket and
?trip[origin hasValue loc#innsbruck, destination hasValue loc#venice] memberOf tr#trip.
```

## Web Service Descriptions
Web service descriptions detail the functional and behavioral aspects of a web service, exposing the business interface on the web. In WSMO, web services are described from three perspectives: non-functionality, functionality, and behavior. An example of a web service definition in WSMO includes:

- **Non-functional properties**: Describe the web service using the Dublin Core Metadata Element Set (e.g., `dc:contributor`, `dc:coverage`, `dc:creator`, `dc:date`).
- **Imported ontologies**: Allow for a modular approach to ontology design and specify the semantic meaning of the concepts used in the service description.
- **Mediators**: Used when an alignment of the imported ontology is necessary.
- **Capability**: Defines the web service by its functionality in terms of preconditions, post-conditions, assumptions, and effects.
- **Interface**: Describes how the functionality is accessed.

### Example: Book Ticket Web Service
```wsml
webService
"http://example.org/bookTicketWebService"
importsOntology
"http://example.org/tripReservationOntology"
capability BookTicketCapability
interface BookTicketInterface
```

## Goals
Goals represent user desires and objectives. They are described at a high level and specify the functionalities a web service should provide from the user's perspective. WSMO follows a goal-driven approach, where requests and services are decoupled. A goal includes a requested capability definition, a requested interface definition, and some ontology imports for semantic contextualization.

### Example: User Goal
```wsml
goal
"http://example.org/havingAReservationInnsbruckVenice"
importsOntology {
  "http://example.org/tripReservationOntology",
  "http://www.wsmo.org/ontologies/locationOntology"
}
capability
postcondition
definedBy
?reservation[
  reservationHolder hasValue ?reservationHolder,
  item hasValue ?ticket
] memberOf tr#reservation and
?ticket[trip hasValue ?trip] memberOf tr#ticket and
?trip[origin hasValue loc#innsbruck, destination hasValue loc#venice] memberOf tr#trip.
```

## Mediators
Mediators connect heterogeneous resources in a WSMO description, handling structural, semantic, or conceptual incompatibilities. There are four types of mediators:
- **Ontology mediators (ooMediators)**: Resolve representation mismatches between source and target ontologies.
- **Goal mediators (goMediators)**: Mediate between goals and web services.
- **Web service-to-goal mediators (woMediators)**: Mediate between web services and goals.
- **Web service-to-web service mediators (wwMediators)**: Mediate between web services.

### Example: ooMediator
```wsml
ooMediator
"http://example.org/owlPersonMediator"
source
"http://daml.umbc.edu/ontologies/ittalks/person"
target
"http://example.org/tripReservationOntology"
usesService
"http://example.org/OWL2WSML"
```

## Semantics for Web Services
When bringing semantics to web services, several types of semantics can be considered:
- **Functional Semantics**: Characterize the functionality of services based on inputs and outputs.
- **Data Semantics**: Annotate the input/output data with ontologies to enhance discovery.
- **QoS Semantics**: Specify quality of service metrics such as deadlines, quality, and cost.
- **Execution Semantics**: Define the message sequence, conversation patterns, and flow of actions.
- **Domain Semantics**: Use industry-specific vocabularies and standards.
- **Cultural Semantics**: Adapt services to different cultures and regions.

### Data Semantics
All web services begin with a set of inputs and produce a set of outputs. The signature of an operation provides only syntactical and structural details. To effectively perform operations like service discovery, the semantics of the input/output data must be considered. For example, if the data involved in a web service operation is annotated using an ontology, the added data semantics can be used to match the semantics of the input/output data of the web service with the requirements.

### QoS Semantics
In e-commerce and e-business, QoS metrics are crucial for specifying delivery, deadlines, quality, and cost. After discovering web services whose semantics match the requirements, the next step is to select the most suitable service based on QoS criteria. This allows organizations to translate their vision into business processes more efficiently, select and execute web processes based on QoS, monitor web processes, and evaluate alternative strategies.

### Execution Semantics
Execution semantics include the message sequence, conversation patterns, and flow of actions. These details may vary depending on the organization and the application. Before executing or invoking a service, the execution semantics or requirements should be verified. Proper execution semantics help in dynamically finding partners that match both functional and operational requirements, such as long-running interactions and complex conversations.

### Domain Semantics
With the spread of the web, web services will be owned and maintained by different organizations worldwide. Discovering a relevant web service can be challenging due to the large number of services. Domain-specific semantics are crucial as organizations have different needs, characteristics, vocabularies, and contexts. Industry-specific registries may store web services with semantic domain information, adhering to a semantic domain that establishes the terminology for interacting with other web services.

### Cultural Semantics
E-commerce provides global opportunities, and web services are more likely to succeed when adapted to the culture in which they are marketed. International cultural semantics involve designing culturally and technically neutral web services, while localization adapts details to specific locales, taking into account region-specific factors such as units of measurement, time zones, date formats, currencies, national holidays, icons, geographic examples, personal titles, and gender roles.

## Semantic Web Service Lifecycle
The lifecycle of semantic web services includes:
- **Description/Annotation**: Defining and annotating web services.
- **Advertisement**: Publishing web services.
- **Discovery**: Finding relevant web services.
- **Selection**: Choosing the most suitable web service.
- **Composition**: Combining web services to create web processes.
- **Execution**: Invoking and running web services.

To fully harness the power of web services, their functionality must be combined to create web processes. Tools like the Meteor-S Web Service Annotation Framework (MWSAF) [19] provide frameworks and tools for automatic and semi-automatic annotation of web services, enhancing their discoverability and interoperability.

---

This optimized text provides a clearer and more structured overview of the various aspects of web services, including non-functional properties, capabilities, descriptions, goals, mediators, and different types of semantics. It also outlines the lifecycle of semantic web services and the importance of each stage.