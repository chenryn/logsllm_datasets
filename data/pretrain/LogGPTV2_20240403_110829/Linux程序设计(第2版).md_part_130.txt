---
## Page 701
684
Linux程序设计
·用来编写表单的HTML语言元素，长单用来输人客户端信息。
·对表单进行传输编码。
·用Perl或C语言对编码表单信息进行解码
·利用CGI程序的响应动态创建HTML主页。
·CGI程序设计的技巧和窍门
·使用CGI程序访问我们的服务器数据库。
·简单介绍了mod_perl模块这个高级论题，它可以把-个Perl解释器嵌入到Web服务器
Apache软件里去。
加入jaVa编程群：524621833
---
## Page 702
第21章设备驱动程序
到现在为止，我们一直是把注意力集中在应用程序的编写方面。我们接触到许多面向应用
程序设计人员的函数库、工具开发包、应用程序开发系统等。它们可以帮助程序员访问与文件
系统、内存、网络等事物连接若的计算机硬件和设备。这些东西有一个共性，那就是允许我们
的应用程序向内核一一操作系统的核心部分提出操作要求，
为了使这本书的内容更加完整，我们将从另外一个角度对内核进行，-番研究。为了满足来
自应用程序的操作要求，内核需要依靠不同的设备驱动程序（devicedriver）与它可能遇到的各
种类型的设备打交道。尽管硬件设备的底层技术千差万别，但通过设备驱动程序，内核却能够
向应用程序提供一个形式统一的程序接！。文件系统就是一个明显的例子一文件可以保存在
IDE硬盘、SCSI硬盘、CD-ROM光盘、软盘甚至RAM盘上，但我们对文件进行操作时使用的命
令却都是一样的。
编写设备代码并不见得比编写应用程序代码更困难，但它需要我们掌握一些新函数库，考
虑一些新问题，这些问题都是我们在应用程序空间里不曾遇到的。在编写应用程序的时候，内
核能够为我们的错误提供一张安全网：但我们将要编写的代码将构成内核自身的一部分，而这
就意味着在内核空间里原来的安全网已不复存在。内核代码对计算机有绝对的控制权，能够阻
止其他任何进程的执行：面我们编写的代码绝不能滥用这种权利，它们应该成为其他进程的友
好邻居、
在为Linux编写内核模块的时候，我们拥有个无可比拟的优势，那就是全部的源代码都可
以让我们随时拿来研究、修改和再使用到我们的代码里去。在这一章里，我们将随时指出各种
头文件和模块的源代码出处供大家做进一步参考。做为信息、忠告和灵感的源泉，源代码的重
要性无论怎么强调都是不过分的。
这-章的学习重点集中在英特尔公司的x86体系结构上，但我们也在一台Compaq公司的
Alpha机器上对其中的各种模块进行了测试，所以它们的可移植性还是有·定保证的。当然，在
这两种平台以及其他平台之间肯定存在着差异，我们将在后而专门讨论可移植姓问题的内容里
尽可能地把它们都勾画出来。可以这样说，绝大部分代码在其他体系结构上都是能够正常工作
的、而我们将随时把学习过程中遇到的依赖于特定计算机平台的部分（它们基本上都是因为硬
件体系结构方而的差异而造成的）尽可能明确地指出来。在最近几年的内核开发工作中，可移
植性已经成为一个非常重要的焦点，几乎所有的内核驱动程序API的可移植性都非常高。当然，
部分代码的可移植性永远也到不达百分之百的程度，但如果我们没有在讨论内容里特别提到可
移植性方面的问题，它就应该能够工作在读者可能使用的各种计算机上。
21.1设备
设备到底是什么呢？它可以是一台计算机上任何一个部分，既可以直接制造在计算机的核
加入java编程群：524621833
---
## Page 703
686
Linur程序设计
心，也可以是一个外围设备一化如SCSI控制器、扩充的出行口、网卡等等在说起编写新的
设备驱动程序时我们一般都指的是后--种情况—即为你异到手的最新的接口下漆加必要的软件
方面的支持。
设备驱动程序是这样一类软件：它们控制着设备的操作动作，并且提供了-个可用的程序
接口使其他程序能够与这个设备互动。设备驱动程序并不一定控制着某个物理性的硬件外部设
备，比如/dev/random（用来产生随机数据，后面还有对它的讨论）和/dev/vcs0（当前虚拟终端）
就是这样的例子。这些设备与真实的硬件并没有什么联系，它们只是从内核获取数据再送往应
用程序的一种手段，它们通常被称为软件设备。
各种设备驱动程序构成了它们所控制的硬件和操作系统内核之间的--个过渡层次。这个层
次扎根于硬件，服务于内核，极大地简化了内核的设计和应用一一它向外界提供了一个精心定义
的接口，具体的工作将由各个设备驱动程序去完成、而内核就不必亲自去与每一个设备打交道
了。这也意味着操作系统的内核部分只要还能适应有关模型的相架，就可以（而且确实是）在
不了解各种不同设备具体情况的前提下被编写出来并做进一步的开发。比如说，如果想给Linux
内核新增加一种文件系统，我们并不需要全部重写内核代码，并且这一工作能够通过现有代码
的再使用相对容易地得到完成。就拿文件系统来说吧，它被分为一个普遍意义上的虚拟文件系
统VFS和各种注册在VFS上的特定文件系统、内核的-·切主要部分都是按这种方式设计的一—比
如CD-ROM子系统、SCSI控制层，等等。这就提高了整体上的模块化水平，新设备驱动程序的
设计工作也因此而更容易进行（如图21-1所示）。
内核
虚拟文件系统
EXT2
FAT
UFS
...
图21-1
21.1.1设备的分类
设备驱动程序可以根据它们的行为分为不同的类型。两种最基本的类型是字符设备和块设
备。字符设备以字节为单位进行读写，数据缓冲系统对它们的访问不提供缓存。请大家想象一
下磁带上的数据或歌曲是如何以一种不间断的信息流的形式被读出的吧一字符设备正是这样提
供数据的。而块设备则是另外一种情况，它们允许随机访问，每次读写的数据量都是数据块长
度的整数倍数，并且访问还会经过缓冲区缓存系统才能实现。与其他UNIX版本形成对照的是：
Linux内核允许不是数据块长度整数倍数的数据量被读取，但这种区别纯释是学术方面的问题。
大多数设备驱动程序都要通过文件系统进行访间，但网络设备是一个例外一它们在Linux
加入jaVa编程群：524621833
---
## Page 704
第21章设备照动程序687
上没有与之对应的文件数据项，就象其他一些UNIX变体一样。/dev子目录里充斥着各种设备特
殊文件，其内容看起来与其他子目录没什么两样，如下所示：
5 1s -1 /dev
...A-q
cK-rW--
1 root
:9931p0
使这些“文件”与普通文件看起来有所不同的一个地方是那些c和b“标志”，它们分别把对
应的设备划分为一个字符设备或一个块设备。从这个例子里可以看出这两种设备的明显区别：
例如，当从磁盘上拷贝文件时不必重新从最开始处读取整个磁盘时，允许对打印机进行随机访
问也就没有丝毫意义了。设备特殊文件并不一定非得放在/dev子目录里，但这是个传统上的做
法，同时还有利于保持系统的秩序。部分UNIX系统在/dev下还细分有磁盘子系统专用的子目录，
但Linux通常都只有-个庞大而又拥挤的子目录。
跟在特殊文件属主和分组数据项后面的数字分别是设备的主编号和辅编号。主编号表明这
是哪一种设备，而辅编号表明这是哪一个具体的设备。在上面的/dev子日录清单里，hdci的主编
号是22，辅编号是1。主编号22是第二块IDE控制器的正式编号，而IDE子系统将根据辅编号的
值标识出主设备和从设备上的分区。事实上，你可以给特殊文件起任意的名字，内核只关心它
的类型和主编号。
新特殊文件是用mknod系统调用创建的，而这个系统调用是由同名的工具命令调用的。
mknod命令/的语法定义如下所示：
mknod nane type major miaor
因此如果想创建出上面的lp0项，你必须以根用户身份执行下面的命令：
nknod /dev/1p0c 6 0
你可以把它们创建在任何地方，但前提是主机文件系统必须支持你的做法。大多数参数的
含义从字面上就能看出来、我们只对与设备分类有关的type做一下说明—-b代表块设备，c代表
字符设备。进一步资料可以从mknod命令的使用手册页里查到。
21.1.2用户空间与内核空间
我们首先要弄清编写设备驱动程序和编写用户空间应用程序之间的区别。Linux运转在两种
模式下，一种是用户模式，另一种是超级用户模式。我们将从现在起把后一种称为内核模式、
因为它能更真实地体现出该模式中的事态发展。这反映出处理器实际处理指令方式的改变—对
这两种执行模式的支持都是在其内部完成并转换的。英特尔的x86（x>=3）把自已的执行模式
命名为Ring（环）0、1、2、3，第0环的优先级最高。在Linux里，第0环代表内核执行模式，第
3环代表用户执行模式一一其余两环没有使用。其他体系结构有类似的规定、但在执行模式的命
名方式上采取了不同的做法。我们不打算在硬件细节方面浪费大家的精力，只想告诉大家一个
进程所处的操作模式将对允许它做的事情施加特定的限制。有些事是运行在用户空间的进程绝
不允许做的，其中就包括直接访问硬件和执行某些指令在内。
加入jaVa编程群：524621833
---
## Page 705
688
Linux程序设计
当你编写一个普通程序的时候，你会想当然地用到一些函数，比如printf和strcpy等。它们都
是C语言标准库libc的组成部分，在相应的头文件里都有预先定义好的架构。用户空间应用程序
：通常都要与libc库进行链接，而这些符号将在运行时得到解析。但内核模块就不同了，它们将与
内核进行链接，在使用它们自己向外提供的函数方面是有限制的。一个做为内核模块编写出来
的设备驱动程序的运行并不是普通意义上的运行，模块中的符号是在它被加载到内核里去的时
候得到解析的。
在编写内核级代码的时候大家应该遵循一些与此有关的程序设计准则，注意培养自己良好
的程序设计习惯。下面就是一些这样的原则一一有的一目了然，有的需要点明。
·不要使用浮点运算。内核在切换处理器的执行模式时不保存它的FP状态，所以如果你确实
使用了浮点运算，就必须自行保存其状态。但通常并没有什么好的理由需要在内核代码里
使用浮点数。
·在你的驱动程序里不要进行繁忙的等待。用户空间里的一个应用程序永远也不可能完全独
占CPU；但内核里的一个用时1秒的循环看上去就象是把整个系统挂起了这么长的时间，
并且在这段时间里，其他什么工作也不能做。
·不要自以为是。我们将在后面看到，内核空间里的调试工作会遇到很多困难，而驱动程序
在与硬件打交道的时候往往需要精确的定时—甚至增加一条打印语句都有可能摘乱定时
从而把一个明显的漏洞掩盖起来。要尽可能地保持代码的简洁性和易理解性。
1.功能取舍
你还必须决定哪些功能将被实现为模块，还有哪些功能要留在用户空间。一般原则是：只
要是能够在用户空间里编程实现的东西，就绝不要把它放到内核里去！这是一个理由非常充分
的忠告；在代码有错的情况下，用户空间里的错误会输出内存映象，面内核空间里的错误别可
能会完全挂起。让内核空间充斥着毫无用处的代码可不是什么好习惯。如果执行速度和操作定
时方面没有那么严格和关健，在内核模块里准备-些供应用程序使用的调用人口通常会达到最
佳的效果：面且这样做还可以让你继续享受有用户空间标准函数库可以链接的好处。
2.建立模块
对内核模块进行编译井不比你已经习惯的对普通应用程序进行编译来得困难。本书中的例
子里都附带有makefile供读者查阅、对内核模块进行编译的基本过程如下所示：
gcc -D._K&RNEL_-D_SMP._ -DWODULE -DwODvERSIONS -I/usr/src/1inux/Lnclude -Wa11
-02-0modale.0-Cmodule.c
如果读者从没有注意过内核的建立过程，可能会觉得这个命令看起来有点唬人。上面大部
分定义都可以在模块里通过读取内核中相应的设置值面得到直接的处理。我们来看看它们都是
干什么用的（见表21-1）
麦21-1
_KERNEL
并非所有的内核头文件都是只能由内核本身来使用的。有些用户空间应用得序也公
把它们包括上，只是其中有些内容是属于内核专用的，必须把它们对用户空间隐藏起
米。将要播人到内核里去的代码必须定义编译标芯“__KERNEL__”以看到头文件的
全部内容
加入jaVva编程群：524621833
---
## Page 706
第21章设备驱动程序
689
（续）
_SMP
内核可以被编译为供SMP（Symmetnc Multi Processor，对称多处理器系统，即有一个
以上处理器的系统）或UP（七niProcessor，单处理器系统）机器使用。如果一个模块将
被插人到--个SMP内核，就必须定义“_SMP”编泽标志
MODULE
如果代码将被编译为一个内核模坎，就必须定义这个编译标志
MODVERSIONS
这个标忘的作用是检查内核与模块之间的不兼容性。详细说明见下面的内容
剩下的gcc命令行选项都不是内核专用的，而大家肯定也已经在前面见过它们的用法了。“
O”开关告诉gcc在编译期间需要进行几遍优化。为了使用内核级的函数一—比如outb等，内核模
块在编译时至少要达到“02”或更高的优化级别才行。高于“02”的级别也管用，但我们并不
推荐这样做。把所有的警告机制全都打开，这对编写包括内核模块在内的任意类型的程序来说
都是个好习惯：
/usr/src/linux是安排Linux内核树的好地方，但这并不是一个硬性的要求，你可以把它存故
到任何地点。gcc命令的“-1”选项（头文件路径）告诉它把这个路径也添加到头文件的搜索路
径上去。内核专用的头文件一般都保存在内核树的include/子目录里，所以，当我们写出如下所
小的代码时：
include 
我们实际指的是/usr/src/linux/include/linux/moduie.h文件。在include/子目录里有两个子目录
比较重要，它们一个是linux/，另一个是asm/。前-个子目录里包含着与计算机平台无关的文
件；后一个子目录实际上是一个指向asm-arch/子目录的符号链接，arch可以是“i386”或
“alpha”等。这个链接是在配置和创建内核时创建的，而且指向头文件子目录的两个符号链接分
别指向]/usr/include/linux和i/usr/include/asm
MODVERSIONS定义用在带函数版本检查功能的内核上。它可以防止模块被加载到一个与
它不兼容的内核里去，要不然轻则引起功能的紊乱，重则引起内核的崩溃。在对模块进行编译
的时候，模块们都将针对当前运行中的内核版本而建立起来，以后一般也只能加载到与此精确
对应的内核版本上。带版本检查功能的内核会给向外界提供的导出函数加比校验和（checksum）
信息做为其后缀，这些校验和信息与它导出的程序接口有密切关系。
这就使我们能够安全地了解到底层API是否在模块建立好以后又出现了变化。你可以利用查
看/proc/ksyms文件的方法来检查自己是否运行在--个带版本检查功能的内核上，这个文件包含
着运行中的内核导出的各种符号。如果导出函数的名字后面有一个”_Rxxxxxx”形式的后缀，
就说明它激活了版本检查功能。如下所示：
5 cat /proc/ksyms
c01d3ed0 sprintf_Rsmp_3c2c5af5
c0115728 printk_Rsnp_1b7d4074
上例中，函数真正的名字是printk和sprintf。从上面的输出结果可以看出我们正运行着一个
激活了版本检查功能SMP内核。要想对这些名字进行解析，在编写模块时就必须包括上头文件
linux/modversions.h文件。
加入jaVa编程群：524621833
---
## Page 707
690Linux程序设计
另一个问题与名字空间有关，除非你曾经参加过大型项目的开发工作，大多数人是很少会
特别注意到这一方面的。在做内核开发的时候，一定要特别注意不要把全局性的内核名字空间
弄乱了。在导出函数的名字之前加上驱动程序的名字是-个避免出现名字冲突现象的好办法，
绝大多数内核开发人员也正是这样做的。另一个好习惯是只导出将会被其他驱动程序用到的函
数和变量，两种办法同时使用效果就更好了。把全局变量和函数声明为静态变量和静态函数也
EXPORT_SYMBOL宏命令来进行，它会把它们添加到内核的全局符号表里去。一般说来，只有
在准备把驱动程序分为几个模块或者准备暴露驱动程序的内部细节以做它用的情况下才需要考
虑这一问题。但不管怎么说，把全局名字空间的“污染”降低到最小程度永远是一个好主意。
有关命令的语法定义都是很容易理解的，如表21-2所示：
表21-2
EXPORT_SYMBOL (1ane )
导出代表变量或悉数的符号name
EXPORT_SYMBOL_NOVERS (name)
导出代表变量或函数的符号name，但不加上模块版本检查后缓—
即使定义了也不加
EXPORT_NO_SYMBOLS
不导出任何符号
有关定义和声明都必须出现在函数之外，比如头文件里、模块的底部等位置。这几个宏命
令的定义在linux/module.h头文件里。在使用这些宏命令中的任何一个之前，必须先定义
EXPORT_SYMTAB标志
3.数据类型
Linux可以运行在许多不同类型的体系结构上，有些是32位的，有些是64位的。甚至曾经有
人尝试让Linux运行在16位的硬件上，今后会发展成什么样谁也说不好。因此，千万不要认为-一
个指定类型的变量其尺寸长度就是固定不变的，这一点很重要。Linux定义了一些标准类型，它
们在各种平台上的尺寸长度都是一致的，见表21-3。