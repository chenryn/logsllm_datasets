periment does not parallelize perfectly, because of the increased
load on the same Tor servers. We envision that a more powerful,
perhaps even highly-distributed, protocol inference infrastructure
would parallelize even better.
To check the accuracy of our models, we used ε = 10−2 error
probability and γ = 10−6 conﬁdence factors [3]. Achieving that
accuracy required us to generate at least 1,798 uniformly random
sampling queries for the MegaD C&C and 1,451 for MegaD and
Postﬁx’s SMTP upon L∗ termination. Equivalence queries were
ran in parallel and cached, but not predicted, as predicting those
queries would defeat the purpose of such queries (detecting missed
states and prediction errors).
6.2 Analysis of Critical Links
Attempts to bring down large botnets are frequent, but are costly
and ineffective. The common practice is to run as many pools of
bots as possible to obtain a wide coverage of C&C servers, and then
attempt to cripple the entire botnet by sending abuse notiﬁcations to
all ISPs involved simultaneously. This is an expensive exercise re-
quiring careful co-ordination among all parties involved. Based on
our analysis of critical links in the MegaD protocol, we discovered
a less expensive alternative.
Using the technique explained in Section 5.1, we inferred com-
plete models of communication with MegaD’s two different master
servers, and computed a projection of one model onto the alpha-
bet of the other model as shown in Figure 6. The ﬁgure shows the
states and links shared by two different pools of bots talking to dif-
ferent master servers and the servers that the master server points
435MegaD C&C
MegaD SMTP
STD SMTP
(a)
(b)
Q.
10,978
-8,024
-1,456
+24
1,522
Msgs
56,716
-42,872
-7,514
+76
6,406
Msgs
5,894
-1764
-0
+252
4,382
-86.1% -88.7% -24.5% -21.6% -30.3% -25.7%
99.7%
96.8%
Q.
1,190
-294
-22
+24
898
Q.
1,386
-476
-0
+56
966
Msgs
4,522
-980
-88
+90
3,544
Basic L∗
RESTR
STAT
BCKT
Total
Reduct.
Accur.
99.9%
92.4%
97.8%
88.2%
Table 2: Results of Membership Queries Prediction. The
Queries (Q.) column shows the number of queries and the Msgs
column shows the number of messages. The ﬁrst row represents
the results obtained in the standard L∗ algorithm [33] without
any response prediction. The RESTR row shows the reduction
in the number of queries and messages by using restriction-
based prediction. The following row (STAT) shows additional
reductions obtained by using the statistics-based approach a
top of RESTR. The BCKT row shows the increase in the num-
ber of queries and messages sent due to backtracking, caused
by prediction errors. The Total row shows the total numbers of
queries and messages after prediction reductions and increases
due to backtracking. The total reduction in the number of
queries and messages and the accuracy of the prediction are
shown in the last two rows.
0
2
3
6
1/ 5
1/ 6
1/ 7
9/ -
7/ -
8/ -
12/ 1 1
1
12/ 1 1
1/ 6
4
12/ 1 1
12/ 1 1
12/ 1 1
1/ 6
1/ 7
1/ 7
5
1/ 5
7
8/ -
7/ - 9/ -
9/ -
7/ -
8/ -
0
2
3
6
1/ 5
12/ 1 1
1
12/ 1 1
1/ 6
4
12/ 1 1
12/ 1 1
12/ 1 1
1/ 7
5
1/ 5
7
8/ -
7/ - 9/ -
9/ -
8/ -
8
7/ -
8/ -
9/ -
7/ -
9/ -
8/ -
7/ -
9/ -
8/ -
7/ -
9/ -
8/ -
9/ -
8/ -
7/ -
9
7/ -
9/ -
8/ -
8
7/ -
8/ -
9/ -
7/ -
9/ -
8/ -
7/ -
9/ -
8/ -
7/ -
9/ -
8/ -
9/ -
8/ -
7/ -
9
7/ -
8/ -
8/ -
8/ -
8/ -
1/ 5
10
1/ 7
1/ 9
12
14
1/ 6
12/ 1 1
1/ 10
12/ 1 1
12/ 1 1
12/ 1 1
15
1/ 6
1/ 5
1/ 9
1/ 7
11
13
1/ 5
10
1/ 7
1/ 9
12
14
1/ 6
12/ 1 1
1/ 10
12/ 1 1
12/ 1 1
12/ 1 1
15
1/ 6
1/ 5
1/ 9
1/ 7
11
13
16
17
16
17
0'
TEST:SS /
NOTIFY:SS /
 SS:TESTPASS
 SS:NOTIFY_RECVED
Figure 6: Intersection of Models of Communication with Two
Different Master Servers. The resulting state-machine shows
that the SMTP server is shared among two pools of bots com-
municating with two different master servers.
to. The projection shows that the SMTP server is shared across two
pools of bots belonging to different master servers. Furthermore,
the existence of the SMTP server is critical to MegaD’s ability to
spam. In particular, a successful pre-spam notiﬁcation dialog with
the shared SMTP server (the NOTIFY:SS/SS:NOTIFY_RECVED
edge) always signals to the bot to start spamming. We experimen-
tally conﬁrmed that MegaD bots do not start spamming without
this notiﬁcation. Thus, the analysis clearly shows that taking down
the SMTP server would disable spamming in all the pools of bots
sharing that SMTP server. However, without actually attempting
to execute an attack on the SMTP part of MegaD’s infrastructure,
it is difﬁcult to evaluate how useful our insight is in practice. For
example, the botmasters could replace the SMTP servers and use
master servers to update bots on the new SMTP server locations.
6.3 Analysis of Design Flaws
Having a complete model of MegaD’s C&C enabled us to check
a number of properties on the inferred state-machine. In particular,
we found that there is an unexpectedly short path through the state-
machine to getting the templates from the template sever.
During a normal spam cycle, a MegaD bot would take the fol-
0
0’
GET_TEMPLATE:TS/
TS:TEMPLATE
GET_TEMPLATE:TS/
TS:RENEW
GET_TEMPLATE:TS/
TS:RENEW
1
GET_TEMPLATE:TS/
TS:TEMPLATE
1’
GET_TEMPLATE:TS/
TS:TEMPLATE
Figure 7: A Proof of the Existence of Background-Channel
Communication. (a) A Model Obtained Only from the Com-
munication with the Template Server.
(b) The Projection of
the C&C State-Machine onto the Template Server Alphabet.
States {0,2,3,6,7,8,10,11,12,13,14,16} and {1,4,5,9,15,17} of the
C&C in Figure 5 are projected onto states 0’ and 1’ respec-
tively. Notice the state-machine is non-deterministic.
lowing path 0 → 16 → 14 → 8 → 12 → 13 to the spamming state
13. Upon reaching state 13, the bot sends the GET_COMMAND
message, to which the master server responds with the location of a
chosen template server. The bot then sends the GET_TEMPLATE
request to the template server together with a 16-byte bot identiﬁer
issued by the master server, and receives templates as a response.
Our inferred C&C protocol model reveals the existence of mul-
tiple shorter paths to obtaining spam templates. In particular, the
shortest path is 0 → 1, along which the bot emulator bypasses the
master server, directly contacts the template server with a random
16-byte identiﬁer, and obtains the templates while bypassing the
master server. We successfully exploited this protocol design ﬂaw,
regularly obtaining fresh spam templates.
Without knowing the botnet developer’s intentions, one may ar-
gue that what we discover may be a “feature” instead of a “ﬂaw”.
For instance, the “feature” might facilitate reconﬁguration of the
template server location. However, we rule out such a possibility
because the protocol uses an encryption-protected 16-byte identi-
ﬁer issued by the master server in the GET_TEMPLATE request.
Since this identiﬁer can be spoofed, it is clearly a ﬂaw.
6.4 Analysis of Background-Channels
Our analysis discovered that the template server behaves differ-
ently depending on whether the bot communicated with the master
server or not. If the bot talks only to the template server (Figure
7a) by sending a GET_TEMPLATE request, the template server re-
sponds with RENEW, and sends the templates only after the second
request. On the other hand, if the bot talks to the template server
after the regular message exchange with the master server, the tem-
plate responds to the ﬁrst GET_TEMPLATE request immediately
with spam templates. This difference proves that there exists com-
munication between the master and template servers. The model of
this communication is shown in Figure 7b.
6.5 Analysis of Implementation Differences
We cross-checked the results of our inference with the SMTP
standard [23], and compared the inferred model with the MegaD’s
non-standard SMTP implementation. To test the standard SMTP
inference, we set up a Postﬁx SMTP 2.5.5 server on Mac OS X
10.6.3 and ran our inference technique against the server, using
the standard set of 14 SMTP commands and input types from the
SMTP speciﬁcation [23], shown in Figure 8c. Figure 8a shows
the inferred protocol model. For clarity, we removed all self-loop
transition edges in the ﬁgure. As discussed in Section 6.1, the dis-
crepancy is at most ε = 10−2 with conﬁdence γ = 10−6.
Our evaluation on standard SMTP shows that the protocol model
obtained from our inference technique is equivalent to the SMTP
436standard, with one implementation-speciﬁc deviation. We found
and conﬁrmed that the Postﬁx SMTP 2.5.5 implementation devi-
ates from the SMTP standard by terminating a connection with re-
sponse code ‘221’ when it receives email contents sent without a
prior DATA command; the standard speciﬁes keeping the connec-
tion open while returning ‘500’ to indicate an unrecognized com-
mand. We further evaluated our model by comparing it against the
SMTP model inferred by Prospex [10]. We manually translated our
inferred Mealy machine into Prospex’s representation (Moore ma-
chine). The comparison reveals that a number of edges are missing
from the SMTP model that Prospex inferred. On inter-state transi-
tions alone, our complete SMTP model speciﬁes the behavior of ten
edges that Prospex missed. For example, the behavior of sending
email contents without prior HELO or EHLO is described in our
model, but not in [10]. We bold these missing edges in Figure 8a.
Clearly, our technology is able to infer complete models, unlike the
prior work.
Our model completely captures the protocol and is smaller (5
states) than the incomplete Prospex model (10 states). There are
two reasons for this. First, we use Mealy machines, which are more
compact. Second, since we infer complete minimal machines, min-
imization of the state-machine can be done completely and thor-
oughly. For example, sending either HELO or EHLO from the
initial state transits to a single state in our model instead of two
different states.
We also compared MegaD’s non-standard SMTP using the same
standard set of 14 SMTP commands and input types that we used to
infer the standard SMTP protocol model. The inferred MegaD non-
standard SMTP protocol model is shown in Figure 8b. A compari-
son of Figures 8a and 8b yields a high degree of resemblance, with
two major differences: (1) States 0 and 1 in Figure 8a are merged
into a single state in Figure 8b, which indicates that the usual SMTP
dialog with MegaD’s SMTP server may take place without a prior
HELO or EHLO. (2) The server abruptly closes the connection
once it receives a data terminator ‘.’ without a prior DATA com-
mand. This result suggests that our protocol model inference tech-
nique may be applied to ﬁngerprint and identify MegaD’s SMTP
masquerading servers.
7. LIMITATIONS
In this section, we highlight the limitations of our protocol model
inference and analysis techniques, and discuss possible directions
for future work.
Currently, we make no effort to obfuscate and hide our probing
trafﬁc from the botmaster’s possible detection. Since our protocol
inference approach generates a large number of probing queries to
the botnet C&C servers, the botmaster could potentially detect our
queries. The botmaster may react by changing the locations or pro-
tocol conﬁgurations of the C&C servers, thwarting our inference