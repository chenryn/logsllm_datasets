FindLocationService和LockAcknowledgeService服务，这两个服务之前在你列举服务
---
## Page 99
4.2案例分析：移动安全应用
8
列表时都已经看到过。你可以不去深人分析这些服务，面根据命名猜测它们的用途。你还需要回
过头来理解onReceive 中对processContent的调用。
In [613] : f = d.CLAss_Lcon_yougetitback_androidapplication_
private void proeessContent (android.content,Context p16, String p17)
SmsIntentReceiver ,METHoD_processContent, source()
v1 = p16.getString (1.821047222e+38):
v6 = p16-getString (1.82104701918e+38) :
v5 = p16.getString (1.82104742483e+38):
v4 = p16.getString (1.82104762765e+38):
v8 = p16.getString (1.82104783048e+38):
 - +
v11 = this.split (p17)1
if (p16.getSharedPreferences(*SuperheroPrefsFi1e*,
v10 = v11.elementat (0);
0) -getBoolean(*Activated*, 0) == 0)(
if (v10.equals(v5) 1= 0) (
this.processActivationMsg (p16, v11);
}else(
（0==(SA）enb0TA)）（0=（9）nb0TA)）T
((v10.equals (v4) == 0) && ((v10.equals (v8) == 0) 5&
((v10.eguals (v7) = 0) &s((v10.equals(v3)== 0) 6&
(v10.equals(v1) =0)))))))(
v10.equals (v2):
）
if (v10.eqguals(v6) == 0) (
if (v10.equals(v9) = 0)(
if (v10.equals(v5) == 0) {
if (v10.equals (v4) == 0)(
f (v10.equals (v1) == 0)(
if (v10.equals (v8) == 0)(
if (v10,equals(v7) == 0) (
if (v10.equals(v3) == 0){
if (v10.equals(v2) 1= 0) (
this.processDeactivateMsg (p16, v11) :
}else (
this.processPindMsg (p16, v11) :
}else {
1
thio.proceseResymcMsg (p16, v11) :
1
}else (
this.processUnLockMsg (p16, v11) /
在这个函数中，你看到了与isValidMessage 函数中类似的一些对getString函数的调
用，以及一系列的if语句，这些语句对短信消息的内容进行进一步匹配，来决定后续调用哪些
---
## Page 100
84
第4章云计算的安全风险
方法。其中特别有题的是弄清楚如何才能到达processUnLockMsg，这很可能就是对设备进行
解锁的函数。在这个函数调用之前，有一些对消息体字符串p17进行的split方法调用。
In [1017] : d.CLASS_Leom_yougetitback_androidapplication_
SnsIntentReceiver ,METHOD_split source ()
java.uti1.Vector split (String p6)
v3 = new java.util,Vector();
v2 = 0;
do(
v1 = p6.index0f(* *, v2);
if (v1 getString (I)Ljava/lang/String:
v0, v13,
15 (00000046)
(00000048)const
move-result-object
V4
17 (0000004e)move-object/from16
16
v13, 2131296283
v0, v16
18 (00000052) invoke-virtual
v0, v13,
Landroid/content/Context: ->getString (I1Ljava/lang/String:
19 (00000058) move-result-object
vB
现在你看到了数字形式的资源ID，整数2131296283对应的是进入你所关注寄存器v8中的
内容，当然，你仍然需要知道这些资源ID的实际文本字符串值。为了找到这些值，你可以在
androlyze工具中使用一小段Python代码来分析APK的资源：
aobj = a.get_android_resources ()
resid = 2131296283
pkg = aobj ·packages.keys() [0]
reskey = aob§ -get_id(pkg,resid) [1]
aobj ·get_string (pkg, reskey)
---
## Page 101
4.2案例分析：移动安全应用8
85
这段Python代码首先创建了一个ARSCParser对象aobj，表示APK中的所有支持资源，
如字符申、UI布局等。接着resid变量中持有你所关注的数字形式资源ID，然后使用
aobj-packages.keys获取到一个程序包名称/标识符的列表，存储到pkg中。通过调用aobj.
get_id 并传递pkg和resid参数，文本形式的资源key会被存放到reskey变量中。最后，
使用aobj.get_string来获取reskey的字符串值。
最终，这段代码输出由processContent解析出的真实字符串YGIB：U。简洁起见，通过
一行代码来完成，如下所示：
packages .keys ()[0] , 2131296283) [11)
In [25] : aobj ·get_string (aobj -packages.keys () [0] , aobj ·get_id(aobj 
Out [25] : [u′YGIB_UNL0CK', u′YGIB:U′]
在这个时候，我们知道了短信中需要包含YGIB：U才可能到达processUnLockMsg方法调
用。查看下这个方法，看看是否有其他你需要了解的信息：
In [1015] : d,CLASS_Lcon_yougetitback_androiGapplLcation_
private void processUnLockteg (android.content.Context p16,
SmsIntentReceiver .HETHOD_processUnLockMsg-source ()
java,util.Vector p17)
L
 1 1
v9 = p16.getSharedPreferences(*SuperheroPrefsFile*, 0):
if (p17.size[) >= 2) {
v1 = p17.elementAt (1);
if (v9,getString(*tagcode*, **) == 0){
android.uti1 .Log .v(*SWIPEWIPE*,
*recieved unlock message*);
com,yougetitbeck.androidapplication.vipe.ipeController,
stopwipeServ1ce (p16):
v7 = nev android,content.Intent (*com-yougetitback.
androidapp1Lcation. BACKGRcUND*):
v7 setClass (pl6, com.yougetitback.androidapplication,
Foregroundservice) ;
p16.stopService(v7):
v10 = new android,content .Intent (*com.yougetitback.
androidapplication,SACKGRoUND*) :
v10.setClass (pl6, com.yougetitback.androidapplication.
SirenService) :
p16.stopService(v10);
v9 ,edit () :
v6.putBoolean(*lockState*,0):
v6 = v9.edit():
v6.putString(*lockid*, **) ;
v5 = new android,content.Intent (*com.yougetitback 
v6.commit() :
androidapp1ication. FOREGROUND*) :;
v5.setClass (pl6, com-yougetitback.androidapplication.
UnlockAcknowledgeService) :
p16.startService(v5):
---
## Page 102
86
第4章云计算的安全风险
ruxnyen
这次你看到一个名为tagcode的键从SuperheroPrefsFile文件中取出，然后一系列的服务会被
关闭，而另有一个服务被启动，你可能会猜想可以解锁手机了。但这似乎并不正确，因为这看起
来像是只要这个键存在于共享配置文件中，就会被评估为true，这很可能是反编译器的错误，
所以让我们使用pretty_show来检查下反汇编代码：
In [1025] : d.CLAss_Lcom_yougetitback_androidapplication_
SmsIntentReceiver .XETHoD_processUnLocktag .pretty_show()
12 (00o00036) const-string
v13,
*SuperheroPrefsFile*
14 (0000003c) move-object/from16
13(0000003a)
const/4
v0, v16
v14, 0
15 (00000040) Lnvoke-virtual
v0, v13,
v14,
Landroid/content/Context; ->getSharedPreferences
(Ljava/lang/String: I) Landroid/content/SharedPreferer
16 (00000046) move-result-object
17(00000048)
const-string
6A
v1,
18(0000004c)
const-string
‘8A
19 (00000050) invoke-virtual/rangev17, Ljava/uti1/Vector;->
81ze() I
20 (00000056) move-result
21(00000058)const/4
v13
22(0000005a)if-1t
v14, 2
[processUnLockMsg-BBe0x5e proc