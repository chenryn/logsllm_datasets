在Linux系统中，文件权限是基于文件所有者、所属用户组和其他用户这三个不同身份的权限控制。文件权限主要由读(r)、写(w)和执行(x)三种权限组成，每种权限可以被授予或取消。这些权限可以通过字符表示法或数字表示法来描述。

### 权限字符
- **r (读)**: 允许查看文件内容。
- **w (写)**: 允许修改或删除文件。
- **x (执行)**: 对于程序文件而言，允许作为程序运行；对于目录，则允许访问其内容。

权限通常针对三类用户群体设置：
- `u`：代表文件的所有者(user)。
- `g`：代表与该文件相关的用户组(group)。
- `o` 或 `a`（默认）：代表其他所有用户(others/all)。

### 数字表示法
权限还可以通过一个三位数来简洁地表示，每个数字代表一类用户的权限状态：
- 4 表示读权限
- 2 表示写权限
- 1 表示执行权限

例如，“755”这个权限设置意味着：
- 文件所有者拥有读、写及执行权限 (7 = rwx)
- 用户组成员只有读取和执行权限 (5 = rx)
- 其他用户同样只有读取和执行权限 (5 = rx)

### 修改文件权限
要调整文件或目录的权限，可使用如下命令：

- **chmod** 命令用于更改文件权限。格式为 `chmod [选项] 模式 文件名`。模式可以用符号表示（如 +, -, =）或者直接用数字指定。例如，将文件 `example.txt` 的权限设为只对所有者开放完全访问而对其他人仅开放阅读权限，可以执行 `chmod 744 example.txt`。

- **chown** 命令用来变更文件的所有权。语法为 `chown 新所有者 文件名`。比如，如果想把 `document.pdf` 的所有权转移给 `john`，则运行 `chown john document.pdf`。

- **chgrp** 用于更改文件所属的用户组。用法类似于 chown，但专注于改变组而非个人所有者。如需将某个项目文档归入 `developers` 组，您可以键入 `chgrp developers project.docx`。

通过上述方法，用户可以根据需要灵活配置Linux环境下的文件安全策略。