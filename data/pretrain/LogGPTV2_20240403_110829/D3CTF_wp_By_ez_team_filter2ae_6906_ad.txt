        return 0;    
    }
## Crypto
###  babyLattice
考虑r很小，有$b m + r= c + k n$，故构造格  
\begin{bmatrix} n & 0 & 0 \ b & 1 & 0 \ c & 0 & X\end{bmatrix}  
X为放缩因子，目标向量为$(k, m, 1)$时，通过格映射为向量$(r, m, X)$，调整X大小为$2^300$，可成功规约出目标向量，exp如下：
    from hashlib import sha256
    n = 69804507328197961654128697510310109608046244030437362639637009184945533884294737870524186521509776189989451383438084507903660182212556466321058025788319193059894825570785105388123718921480698851551024108844782091117408753782599961943040695892323702361910107399806150571836786642746371968124465646209366215361
    b = 65473938578022920848984901484624361251869406821863616908777213906525858437236185832214198627510663632409869363143982594947164139220013904654196960829350642413348771918422220404777505345053202159200378935309593802916875681436442734667249049535670986673774487031873808527230023029662915806344014429627710399196
    c = 64666354938466194052720591810783769030566504653409465121173331362654665231573809234913985758725048071311571549777481776826624728742086174609897160897118750243192791021577348181130302572185911750797457793921069473730039225991755755340927506766395262125949939309337338656431876690470938261261164556850871338570
    X = 2**300
    M = Matrix(ZZ, [[n, 0, 0], [b, 1, 0], [c, 0, X]])
    ML = M.LLL()
    r = int(ML[0][0])
    m = int(abs(ML[0][1]))
    assert (b * m + r) % n == c
    print('d3ctf{%s}' % sha256(int(m).to_bytes(50, 'big')).hexdigest())
###  simplegroup
需要用到第一题中有关n，b的关系式，$b a12 – a11 \equiv 0 \mod p,b a11 – a12 \equiv 0 \mod p, b
a21 – a22 \equiv 0 \mod
q$，考虑到a11，a12，a21，a22都很小，可以使用格规约，但p，q未知，故考虑将两个式子相乘，得到a11 a21 b^2 -(a11a22 +
a21a12) b + a12 a22 = k n  
构造格如下：  
\begin{bmatrix} n & 0 & 0 \ b & 1 & 0 \ b^2 & 0 & 1\end{bmatrix}  
这里由于aij非常小，不需要平衡因子，目标向量$(k, -(a11a22 + a21a12), a12 a22)$，通过格映射，得到向量$(-a11
a21, -(a11a22 + a21a12), a12 * a22)$，之后分解n再通过判断e1/e2次剩余，之后CRT即可，exp如下：
    from Crypto.Util.number import *
    from tqdm import tqdm
    def check(s, t, _phi):
        if _phi % t != 0:
            return False
        return pow(s, _phi//t, n) == 1
    n = 69804507328197961654128697510310109608046244030437362639637009184945533884294737870524186521509776189989451383438084507903660182212556466321058025788319193059894825570785105388123718921480698851551024108844782091117408753782599961943040695892323702361910107399806150571836786642746371968124465646209366215361
    b = 65473938578022920848984901484624361251869406821863616908777213906525858437236185832214198627510663632409869363143982594947164139220013904654196960829350642413348771918422220404777505345053202159200378935309593802916875681436442734667249049535670986673774487031873808527230023029662915806344014429627710399196
    y = 12064801545723347322936991186738560311049061235541031580807549422258814170771738262264930441670708308259694588963224372530498305648578520552038029773849342206125074212912788823834152785756697757209804475031974445963691941515756901268376267360542656449669715367587909233618109269372332127072063171947435639328
    e = 1928983487
    C = [63173987757788284988620600191109581820396865828379773315280703314093571300861961873159324234626635582246705378908610341772657840682572386153960342976445563045427986000105931341168525422286612417662391801508953619857648844420751306271090777865836201978470895906780036112804110135446130976275516908136806153488, 9763526786754236516067080717710975805995955013877681492195771779269768465872108434027813610978940562101906769209984501196515248675767910499405415921162131390513502065270491854965819776080041506584540996447044249409209699608342257964093713589580983775580171905489797513718769578177025063630080394722500351718, 37602000735227732258462226884765737048138920479521815995321941033382094711120810035265327876995207117707635304728511052367297062940325564085193593024741832905771507189762521426736369667607865137900432117426385504101413622851293642219573920971637080154905579082646915297543490131171875075081464735374022745371, 1072671768043618032698040622345664216689606325179075270470875647188092538287671951027561894188700732117175202207361845034630743422559130952899064461493359903596018309221581071025635286144053941851624510600383725195476917014535032481197737938329722082022363122585603600777143850326268988298415885565240343957, 27796821408982345007197248748277202310092789604135169328103109167649193262824176309353412519763498156841477483757818317945381469765077400076181689745139555466187324921460327576193198145058918081061285618767976454153221256648341316332169223400180283361166887912012807743326710962143011946929516083281306203120, 27578857139265869760149251280906035333246393024444009493717159606257881466594628022512140403127178174789296810502616834123420723261733024810610501421455454191654733275226507268803879479462533730695515454997186867769363797096196096976825300792616487723840475500246639213793315097434400920355043141319680299224, 29771574667682104634602808909981269404867338382394257360936831559517858873826664867201410081659799334286847985842898792091629138292008512383903137248343194156307703071975381090326280520578349920827357328925184297610245746674712939135025013001878893129144027068837197196517160934998930493581708256039240833145, 33576194603243117173665354646070700520263517823066685882273435337247665798346350495639466826097821472152582124503891668755684596123245873216775681469053052037610568862670212856073776960384038120245095140019195900547005026888186973915360493993404372991791346105083429461661784366706770467146420310246467262823, 5843375768465467361166168452576092245582688894123491517095586796557653258335684018047406320846455642101431751502161722135934408574660609773328141061123577914919960794180555848119813522996120885320995386856042271846703291295871836092712205058173403525430851695443361660808933971009396237274706384697230238104, 61258574367240969784057122450219123953816453759807167817741267194076389100252707986788076240792732730306129067314036402554937862139293741371969020708475839483175856346263848768229357814022084723576192520349994310793246498385086373753553311071932502861084141758640546428958475211765697766922596613007928849964, 13558124437758868592198924133563305430225927636261069774349770018130041045454468021737709434182703704611453555980636131119350668691330635012675418568518296882257236341035371057355328669188453984172750580977924222375208440790994249194313841200024395796760938258751149376135149958855550611392962977597279393428]
    e1 = 36493
    e2 = e//e1
    X = 1
    M = Matrix(ZZ, [[n, 0, 0], [b, X, 0], [b ^ 2, 0, X]])
    ML = M.LLL()
    # a = a11 * a21, b = a11*a22 + a21*a12, c = a12 * a22
    '''
    a = 211380743487233628797755584958526337321408979158793229985661
    b = 1382843159437215516163973075066558157591473749635266665605630
    c = 1173142580751247504024100371706709782500216511824162516724129
    a11, a21, a12, a22 = var('a11, a21, a12, a22')
    solve([a == a11 * a21, b == a11*a22 + a21*a12, c == a12 * a22], a11, a21, a12, a22)
    '''
    a11 = 1018979931854255696816714991181
    a12 = 1017199123798810531137951821909
    p = gcd(b * a11 - a12, n)
    q = n//p
    assert n == p * q
    M = []
    phi = (p-1)*(q-1)
    for i in tqdm(range(len(C))):
        for m in range(1, e1+1):
            tmp = (C[i] * inverse(int(pow(y, m, n)), n)) % n
            if check(tmp, e1, phi):
                m1 = m
                break
        for m in range(1, e2+1):
            tmp = (C[i] * inverse(int(pow(y, m, n)), n)) % n
            if check(tmp, e2, phi):
                m2 = m
                break
        tmp_m = CRT([m1, m2], [e1, e2])
        M.append(tmp_m)
    print('M:', M)
    flag = 0
    for i in range(len(M)):
        flag += M[i] * (e**i)
    print(long_to_bytes(flag))
###  AliceWantFlag
首先与Alice交互，让她连接自己的vps，然后模拟server与她交互，给她提供r和endkey。  
我们更改r的高位对其密码进行逐字节爆破。当r的第一个字节与之密码一致时，其异或后只剩10位，补上5位endkey只有15位，aes加密时assert处会报错。由此确定一个字节。爆破第二个字节的时候，由于第一个字节使得其密码只剩10位，我们多补一位endkey来满足长度。由此leak其密码。由于密码最后一位无法由此方式爆破出来，我们可以直接去与server交互来爆破最后一位。  
然后与server交互，利用elgamal的mitm attack获取endkey。最后得到flag
与Alice交互脚本
    from pubkey import Alice_pubkey
    from elgamal import elgamal
    from os import urandom
    from Crypto.Util.number import long_to_bytes , bytes_to_long
    from Crypto.Cipher import AES
    from pwn import *
    from time import *
    import random
    #context.log_level = 'debug'
    pubkey = {}
    pubkey[b'Alice'] = elgamal(Alice_pubkey)
    def enc_send(msg , usrid):
        pubenc = pubkey[usrid]
        y1 , y2 = pubenc.encrypt(bytes_to_long(msg))
        return str(y1) + ', ' + str(y2)
    endkey = b'*'*5
    #truer = "547dd1ccc3"
    truer = ""
    num = len(truer)
    padr = '*'*(11-num)
    for i in range(11-num):
        padr = padr[1:]
        for j in range(256): #实际上根据结果来看，0123456789abcde即可
            #####
            menu=[b'1. signup  2.signin',b'please give me your name',b'please give me your passwd(encrypted and xored by r)',b'signin success',b'now let\'s communicate with this key']
            sh = remote("47.100.0.15",10003)
            sh.recvuntil(b"ctf_flag")
            sh.sendline("49.235.117.239:12345")
            shalice = listen(12345)
            shalice.sendline(menu[0])
            shalice.recv()
            shalice.sendline(menu[1])
            shalice.recv()
            shalice.sendline(menu[2])
            #####
            tmpr = truer + chr(j) + padr
            shalice.sendline(str(bytes_to_long(tmpr.encode('latin1'))))
            shalice.recv()
            shalice.sendline(menu[3])
            shalice.sendline(menu[4])
            try:
                shalice.sendline(enc_send(endkey+b'*'*num , b"Alice"))
                #print(endkey+b'*'*num)
                #print(tmpr)
                ans = shalice.recv()
                if ans != '':
                    sh.close()
                    shalice.close()
                    pass
            except:
                truer += chr(j)
                print("yes",truer)
                num+=1
                break
        else:
            print("no")
与server交互脚本
    from pubkey import Alice_pubkey
    from pubkey import server_pubkey
    from elgamal import elgamal
    from os import urandom
    from tqdm import tqdm
    from Crypto.Util.number import *
    from Crypto.Cipher import AES
    from pwn import *
    from time import *
    import random
    def pad(m):
        m += bytes([16 - len(m) % 16] * (16 - len(m) % 16))
        return m
    def unpad(m):
        return m[:-m[-1]]
    context.log_level = 'debug'
    def enc_send_s(msg):
        pubenc = elgamal(server_pubkey)
        y1 , y2 = pubenc.encrypt(bytes_to_long(msg))
        return str(y1) + ', ' + str(y2)
    pubkey = {}
    pubkey[b'Alice'] = elgamal(Alice_pubkey)
    def enc_send(msg , usrid):
        pubenc = pubkey[usrid]
        y1 , y2 = pubenc.encrypt(bytes_to_long(msg))
        return str(y1) + ', ' + str(y2)
    '''
    for i in "1234567890abcdef":
        sh = remote("47.100.0.15",10001)
        sh.recvuntil("\n")
        sh.sendline('2')
        sh.recvuntil("\n")
        sh.sendline('Alice')
        sh.recvuntil("\n")
        r = int(sh.recvuntil("\n")[:-1])
        AlicePasswd = ("547dd1ccc3"+i).encode('latin1')
        #547dd1ccc38
        userdata = long_to_bytes(bytes_to_long(AlicePasswd) ^ r)
        sh.sendline(enc_send(userdata))
        ans = sh.recvuntil("\n")
        if b'error' not in ans:
            print("yes",AlicePasswd)
            break
        sh.close()
    else:
        print("no")
    '''
    def mitm(u):
        print(type(u))
        print(u)
        ans1={}
        (p,q,g,y) = Alice_pubkey
        #for i in tqdm(range(1,2**22)):
            #ans1[str(pow(i,q,p))] = i
        #with open("set.set",'wb') as f:
            #pickle.dump(ans1,f)
        with open("set.set","rb") as f:
            ans1 = pickle.load(f)
        for i in tqdm(range(1,2**18)):
            try:
                tmp = str(pow(u*inverse(i,p),q,p))
                true = (ans1[tmp]*i)%p
                print(true)
                return true
            except Exception as aa:
                #print(aa)
                pass
        else:
            print("no")
    with open("set.set","rb") as f:
        ans1 = pickle.load(f)
    #while True:
    for i in range(20):
        sh = remote("47.100.0.15",10001)
        sh.recvuntil("\n")
        sh.sendline('2')
        sh.recvuntil("\n")
        sh.sendline('Alice')
        sh.recvuntil("\n")
        r = int(sh.recvuntil("\n")[:-1])
        AlicePasswd = b"547dd1ccc38"
        userdata = long_to_bytes(bytes_to_long(AlicePasswd) ^ r)
        sh.sendline(enc_send_s(userdata))
        ans = sh.recvuntil("\n")