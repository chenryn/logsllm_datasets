when new code units are dynamically loaded. It is therefore
assumed that each application domain is associated with
a countable set Π of propositional variables2, called state
variables. A Π-state, or simply a state, is an assignment of
truth values to propositional variables from Π, such that the
assignment diﬀers from one of the following three truth as-
signments for only ﬁnitely many propositional variables: (i)
all propositions are undeﬁned, (ii) all propositions are false,
and (iii) all propositions are true. Such a truth assignment
can be represented using only a ﬁnite amount of memory.
Henceforth, we identify a state by the set of literals that are
satisﬁed by the state. If neither of the literals for a proposi-
tion appears in the set, then the proposition is undeﬁned in
the state. Thus the empty set denotes the state in which all
2Although we focus on boolean state variables here, our
scheme can be readily generalized to handle variables of ﬁ-
nite domains.
propositions are undeﬁned. Unless speciﬁed otherwise, it is
assumed3 that q0 = ∅.
To render execution monitoring tractable, every transi-
tion function must be ﬁnitary , meaning that (1) only a
ﬁnite number of state variables determine if the transition
is deﬁned at a given state, and (2) the resulting state can be
obtained by altering only a ﬁnite number of state variables,
so that the new value of each variable is a function of only
a ﬁnite number of state variables in the original state. A
ﬁnitary transition function is called an operator .
Design choice 2: Conjunctive preconditions, constant
effects (CPCE).
An operator can be represented by two elements: (1) a
precondition expression (a boolean expression in terms of
a ﬁnite number of state variables) indicating if the transition
is deﬁned at a given state, and (2) for each state variable
that can potentially be altered by the transition function,
an eﬀect expression (a boolean expression in terms of a ﬁ-
nite number of state variables) that computes the new value
for the variable. While this arrangement is fully general,
we impose further syntactic restrictions to arrive at a repre-
sentation that is optimization-friendly: (1) the precondition
expression must be a conjunction of literals; (2) every eﬀect
expression must be a constant truth value. Operators satis-
fying these restrictions are called CPCE operators. For-
mally, we represent a CPCE operator by a pair hpre, eﬀ i,
where:
pre: a ﬁnite set of preconditions, each of which is a literal
(i.e., p or ¬p), such that, for each proposition p, at
most one of p or ¬p belongs to the set
eﬀ : a ﬁnite set of eﬀects, each of which is a generalized
literal (i.e., p, ¬p, or ?p), such that, for each propo-
sition p, at most one of p, ¬p or ?p appears in the
set
The state obtained by applying the CPCE operator hpre, eﬀ i
to a state S (i.e., a set of literals) is:
hpre, eﬀ i(S) def= (S ⊕ eﬀ
if pre ⊆ S
undeﬁned otherwise
where, given a set P of propositions, a set S of literals and
a set L of generalized literals,
S ⊕ L def= (S \ lits(vars(L))) ∪ (L ∩ lits(vars(L)))
vars(L) def= {p ∈ Π | p ∈ L ∨ ¬p ∈ L ∨ ?p ∈ L}
lits(P ) def= {p, ¬p | p ∈ P }
Intuitively, the operator is deﬁned at state S if the con-
junction pre is satisﬁed by the truth assignment S. In the
resulting state, a propositional variable p is set to true if
p ∈ eﬀ , false if ¬p ∈ eﬀ , undeﬁned if ?p ∈ eﬀ , or otherwise
its original value. As a special case, the empty operator
h∅, ∅i represents the total identity function ιQ for monitor
states. Also notice that the preconditions of an operator
cannot be used for detecting if a proposition is undeﬁned in
a given state, but eﬀects could set propositions to undeﬁned.
This intentional asymmetry serves an important function to
be discussed in the sequel (in the proof of Thm. 4).
3The proposed optimization scheme can be easily adopted
to the case when this assumption does not hold.
3.3 Evaluation of Expressiveness
We evaluate the expressiveness of the proposed policy rep-
resentation by a number of case studies.
Simple Integrity Policies.
Complete Mediation [32, 28] requires every sensitive op-
eration to be performed only after a monitoring operation
has been invoked. The policy prescribes an event set Σ =
{sen, mon}. To enforce the policy, a monitor is constructed
with state variable set Π = {pm}, and transition functions
δsen = h{pm}, {¬pm}i and δmon = h∅, {pm}i. The transition
function δmon asserts pm, thus enabling sen, which in turn
negates pm.
Separation of Duty (Sect. 3.1) prescribes an access event
set Σ = {a, m, c}. The policy is enforced by a monitor for
which Π = {pa, pm}, where pa and pm indicate, respectively,
that events a and m have occurred. The transition functions
are deﬁned as follows: δa = h∅, {pa}i, δm = h∅, {pm}i, δc =
h{pa, pm}, {¬pa, ¬pm}i. The monitor ensures that c only
occurs after both a and m have occurred, without imposing
an ordering of a and m.
Generalized Chinese Wall Policy.
The Chinese Wall Policy [10] prevents conﬂicts of interest
that may arise from allowing access to data sets that be-
long to competing parties. Lin proposed a generalization, in
which conﬂict relationships need not form an equivalence re-
lation [23]. In extensible systems, Lin’s Generalized Chinese
Wall Policy can be employed to ensure that conﬂicting oper-
ations are not executed by an untrusted component, thereby
protecting the integrity of the core. Formally, a General-
ized Chinese Wall Policy is characterized by a conﬂict graph
hΣ, Ei, where Σ is a countable set of operations, and each
undirected edge in E connects a pair of operations in conﬂict
with one another. Execution of an operation a ∈ Σ renders
all neighbors of a forbidden in the future. Under the mild as-
sumption that vertices of the conﬂict graph has bounded de-
grees, the Generalized Chinese Wall Policy can be expressed
as CPCE operators as follows. Deﬁne Π = {pa | a ∈ Σ},
q0 = {¬pa | a ∈ Σ}, and δa = h{¬pb | ab ∈ E}, {pa}i. The
construction ensures that the set of executed operations is
always an independent set in the conﬂict graph.
Hierarchical One-Out-Of-k Authorization.
One-out-of-k authorization [14] classiﬁes applications into
equivalence classes based on the access rights required for
successful execution. For example, a browser needs the
right to open network connections but never accesses user
ﬁles, and an editor needs the right to access user ﬁles but
never connects to the network. The protection goal is to
ensure that untrusted code only exercises the access rights
of a known application class: e.g., an application that both
reads a user ﬁle and connects to the network is neither a
browser nor editor, and thus must be rejected. Formally, an
One-Out-Of-k Policy is characterized by a family {Ci}1≤i≤k
of application classes such that Ci ⊆ Σ. The policy requires
that, every time a program is executed, there is a Ci such
that every access right exercised during that execution be-
longs to Ci. One-out-of-k authorization, in its full gener-
ality, is not necessarily expressible as CPCE operators [41,
Thm. 1]. Fortunately, there is an important special case
that the CPCE representation can capture.
Definition 1. An One-Out-Of-k Policy {Ci}1≤i≤k is said
to be hierarchical iﬀ both of the following hold:
∀i, j . Ci ∩ Cj 6= ∅ ⇒ ∃m . Cm = Ci ∩ Cj
∀i, j, m . (Ci ⊆ Cm ∧ Cj ⊆ Cm) ⇒ (Ci ⊆ Cj ∨ Cj ⊆ Ci)
(1)
(2)
Condition (1) asserts that the family of application classes is
closed under non-empty intersection. Condition (2) asserts
that the subclasses of any given class are totally ordered.
The Hasse diagram [13] of classes satisfying conditions (1)
and (2) is a forest (hence “hierarchical”).
Theorem 2. Every hierarchical One-Out-Of-k Policy is
enforceable by CPCE operators.
See Appendix A for a proof. For balanced hierarchies, there
is a policy encoding in which the size of each precondi-
tion and eﬀect set is log k [41, Thm. 4]. Most naturally-
occurring One-Out-Of-k Policies are either hierarchical, or
can be made hierarchical without aﬀecting safety [41, Thm.
6] (e.g., the policy in [17]).
4. THE BASIC OPTIMIZATION
PROCEDURE
Given a program represented as control ﬂow graphs
(CFGs) [20, 6], an IRM enforcement mechanism proceeds
in three phases:
Phase 1: By consulting a security policy, construct an as-
sociative array op[·], assigning to every program point
n some (possibly empty) operator op[n].
Phase 2: Optimize the operator assignment by updating
the entries in op[·], in some semantic-preserving man-
ner, with the objective that the resulting execution
time is improved.
Phase 3: Instrument the target program by injecting, (a)
at the program entry point, a code fragment that ini-
tializes a globally accessible monitor state, and, (b)
at each program point n, a code fragment simulating
op[n]. The latter code fragment will behave as follows
at run time:
• The preconditions in op[n].pre are checked against
the current monitor state. If any of the precon-
ditions is not satisﬁed, the a security exception is
raised4.
• The eﬀects are asserted into the monitor state.
The focus of this work is Phase 2 — the design of optimiza-
tion procedures.
Given op[·], a control ﬂow path is feasible iﬀ all operator
preconditions are satisﬁed along the path. Unlike [12], which
assumes all transitions to have the same cost, we adopt the
following performance metric: the overhead of a feasible
path is the total number of preconditions checked and ef-
fects asserted along the path. More precisely, an operator
hpre, eﬀ i incurs an overhead of |pre| + |eﬀ | every time it is
executed. The fewer preconditions and eﬀects are involved
in an operator, the less overhead it incurs on the target pro-
gram. For example, the empty operator does not impose
4It is assumed that the target program cannot catch such
an exception.
an overhead of zero. This performance metric is adopted
because the number of propositions appearing in a Π-state
can in principle be unbounded, and thus no constant-time
implementation of transitions is available.
An execution trace is a control ﬂow path that starts at
the entry point of the program. An optimization procedure
is safe iﬀ infeasible execution traces remain infeasible, and
unobtrusive iﬀ feasible execution traces remain feasible5.
Given a history-based access control policy, an unsafe opti-
mization procedure may cause an execution trace rejected
by the policy to materialize at run time, thereby failing to
enforce the policy. Ensuring safety is thus central to the
security enterprise. A safe optimization procedure is eﬀec-
tive iﬀ, (a) the overhead of a feasible execution trace is never
increased by the procedure, and (b) there is at least one pro-
gram and a feasible execution trace for that program such
that the overhead is strictly reduced by the procedure.
We focus on two kinds of optimization: precondition and
eﬀect elimination. That is, the optimization procedure elim-
inates redundant members of op[n].pre 6 and op[n].eﬀ . As
the overhead of a feasible path is never increased by an opti-
mization procedure that is based on precondition and eﬀect
elimination, such a procedure is always eﬀective so long as it
is safe. The remaining challenge is to conduct precondition
and eﬀect elimination without sacriﬁcing safety or incurring
obtrusiveness.
4.1 Simple Programs
We describe how precondition and eﬀect elimination can
be performed for a single CFG. Let nentry , nexit and Ninstr
be, respectively, the entry node, the exit node and the set
of the rest of the nodes in the CFG. Henceforth, we assume
that op[n] = h∅, ∅i initially for n 6∈ Ninstr . Optimization
proceeds in four steps.
Step 1 - Compute a conservative approximation of the
guaranteed set for each program point.
A literal l belongs to the guaranteed set of a program
point n iﬀ l is established by every feasible path from nentry
to n. This forward analysis is a form of constant propagation
[25]:
GUAout [n] = (GUAin [n] ⊕ op[n].pre) ⊕ op[n].eﬀ
for n ∈ Ninstr
GUAout [n] = ∅
for n ∈ {nentry }
GUAin [n] = ∩m∈pred[n]GUAout [m]
for n ∈ Ninstr ∪ {nexit }
(3)
(4)
(5)
Note the form of (3). By checking the preconditions, an op-
erator has essentially ruled out the infeasible paths. Those
that remain must have the preconditions established as a re-
sult. Consequently, preconditions could be seen as implicit
assertions, while eﬀects are explicit assertions. Notice
also that the order of assertion is signiﬁcant: explicit asser-
tions override implicit assertions.
5In other words, an execution monitor that is produced by a
safe optimization procedure will never generate a false neg-
ative, and an unobtrusive optimization procedure produces
execution monitors that never generate a false positive.
6Given a record r with schema hf1, . . . , fki, we refer to the
fi component of r by the notation r.fi. Thus, if op[n] =
hpre, eﬀ i, then op[n].pre refers to pre.
Step 2 - Eliminate redundant preconditions.
A precondition l is considered redundant at program point
n if l is guaranteed to be established at n. Precondition
elimination is achieved by the following update:
op[n].pre := op[n].pre \ GUAin [n]
for n ∈ Ninstr
(6)
Step 3 - Compute a conservative approximation of the
live set at each program point.
A proposition p is live at program point n iﬀ there is a
path from n to another program point n′ such that (1) p is
checked at n′, and (2) there is no (implicit or explicit) eﬀect
assertion involving p along any path from n to n′ [25]. This
backward analysis is deﬁned as follows:
LIVin [n] = (LIVout [n] \ kill LIV[n]) ∪ gen LIV[n]
for n ∈ Ninstr
LIVin [n] = ∅
for n ∈ {nexit }
LIVout [n] = ∪m∈succ[n]LIVin [m]
for n ∈ Ninstr ∪ {nentry }
where, for n ∈ Ninstr ,
kill LIV[n] def= vars(op[n].eﬀ )
gen LIV[n] def= vars(op[n].pre)
(7)
(8)
(9)
Step 4 - Eliminate redundant effects.
A proposition is dead at program point n iﬀ it is not
live at n. An eﬀect is considered redundant if the eﬀect
proposition is dead at the program point where the eﬀect
is asserted. Eﬀect elimination is achieved by the following
update:
op[n].eﬀ := op[n].eﬀ ∩ gen-lits(LIVout [n])
for n ∈ Ninstr
(10)
4.2 Procedure Calls
To accommodate programs made up of multiple proce-
dures, we extend our program representation, so that a pro-
gram is a collection of CFGs. Besides the usual node types
nentry , nexit and Ninstr , every CFG also comes with (a) a
set Ncall of call nodes, (b) a set Nret of return nodes, (c) a
bijection Einv : Ncall → Nret , and (d) a function callee map-
ping call nodes to CFGs. We envision a modular optimiza-
tion scheme, in which the four-step optimization procedure
is applied to CFGs one at a time, and the order in which
CFGs are processed is not material. To this end, we adjust
data ﬂow equations (4), (5), (8) and (9) as follows:
GUAout [n] = ∅
for n ∈ Nret ∪ {nentry }
(11)
GUAin [n] = ∩m∈pred[n]GUAout [m]
for n ∈ Ninstr ∪ Ncall ∪ {nexit }
(12)
LIVin [n] = Π
for n ∈ Ncall ∪ {nexit }
LIVout [n] = ∪m∈succ[n]LIVin [m]
(13)
for n ∈ Ninstr ∪ Nret ∪ {nentry }
(14)
While (12) and (14) are cosmetic changes, (11) and (13) pose
signiﬁcant challenges:
Challenge #1 On entry to a procedure, no knowledge
about the caller’s state at the call node is available.
We are forced to assume the guaranteed set at the
procedure entry node is empty (i.e., (11)), thereby re-
ducing the opportunities for precondition elimination
within the procedure body.
Challenge #2 On exit from a procedure, no knowledge
about the caller’s live set at the return node is avail-
able. We are forced to assume that all propositions are
live (i.e., (13)), thereby reducing the opportunities for
eﬀect elimination within the procedure body.
where, given a set P of propositions,
Challenge #3 By (13), eﬀects asserted prior to a call node
gen-lits(P ) def= {p, ¬p, ?p | p ∈ P }