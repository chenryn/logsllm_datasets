pendencies and the effect of security concerns on their decisions.
Online surveys or controlled experiments force the investigator’s
point of view on the arguments of interest, and therefore, may
blur the developers’ opinions. Instead, semi-structured interviews
suited best for our goals [46]. Being open, they allow new ideas to
be brought up during the interview as a result of what an intervie-
wee says, and it is indeed used by most of the selected studies (15
out of 22 studies in Table 7).
Table 1 shows the descriptive statistics of the number of par-
ticipants in the papers discussed in Section 3. We observe that an
interview-based study, on average, employs 13 developers. At the
same time, 75% of the selected papers report results from less than
17 interviews. Moreover, the studies typically report interview re-
sults from developers of a single company or the same community
of developers. This may potentially introduce some bias since devel-
opers may share the same development strategies and approaches.
Session 5C: Forensics CCS '20, November 9–13, 2020, Virtual Event, USA1515senior developers to team leaders and CTOs. Some of the partici-
pants are involved in internal/corporate development, while others
are working on web, embedded, mobile, or desktop applications.
In total, we interviewed 30 developers3 and eventually retained 25
for the analysis distributed over 25 different companies located in
nine countries4. Table 2 summarizes the key demographics of the
interviewees in our sample.
4.2 Interview process
To collect primary data, we had interview sessions lasting approxi-
mately 30 minutes. We met personally the interviewees who reside
in our city and scheduled remote meetings with others via Skype or
Webex. We offered no monetary compensation for the interviewees
as the interviewed developers are highly skilled professionals who
are very unlikely to be motivated by a compensation we could offer.
Instead, we proposed them to share their expert opinions on the
topic interesting for them. We followed XXX Ethical Review Board
procedure for the management of consent and processing of data5.
We explained that all interviews would be reported anonymously,
and neither personal nor company identifiable data would be made
available. No personal data was collected.
tion for the study;
We adopted the semi-structured interview type for our research
and framed our questions to allow developers to define the flow
of the discussion, i.e., followed the “grand tour interviews” princi-
ple [17]. Still, we made sure all interviews included the following
parts6 (not necessarily in that order):
• Introduction - interviewer describes the context and motiva-
• Developer’s self-presentation - developer (D) presents her pro-
fessional experience and the context of her current activities;
• Selection of new dependencies - D describes selection and
inclusion of new dependencies into her software projects;
• Updating dependencies - D explains the motivations and in-
sights of updating dependencies in her projects, i.e., when
it is the right time to update, how often she updates depen-
dencies, and if there is any routine or regulation regarding
the dependency update process in her company;
• Usage of some automated tool for dependency analysis - D
describes an automatic tool (if used) that facilitates depen-
dency analysis process in her projects, and provides some
general details about the integration of this tool;
• Mitigation of dependency issues - D describes how she ad-
dresses issues in dependencies (e.g., bugs or vulnerabilities);
3We could have three more developers to participate in our study. They initially agreed
to let us observe their actions while analyzing software dependencies, but then the
process got stuck at the stage of selecting the analysis target. Their companies were
unwilling to let us study their internal libraries without a legal agreement in place,
while analysis of third-party FOSS libraries was not interested in the developers.
4Four interviewees were not confident enough to speak about software dependencies
in their projects since they just came into the company. Another developer said that
due to the company policy, they do not use software dependencies. Hence, we discarded
five interviews from our analysis.
5Url not provided as this would disclose the institution.
6After the interviews were completed, two researchers checked that an individual
interview contains all elements mentioned above, by coding the interview transcripts
with the codes corresponding to each interview part. Five interviews (#6, #12, #14, #21,
#23) do not contain the Usage of some automated tool for dependency analysis part, since
the interviewees mentioned that they perform dependency management manually.
comp.
type
SME
UG
LE
SME
SME
SME
SME
LE
SME
LE
LE
SME
LE
SME
FOSS
SME
LE
LE
dev.
type
web
web
web
web/desktop
web/desktop
mobile
web/desktop
web
web
embedded
embedded
web
desktop
web
embedded
web
web/desktop
embedded
DE
IT
IT
SI
NL
RU
DE
RU
IT
DE
VN
DE
RU
RU
UK
IT
VN
IT
3+
10+
10+
7+
3+
3+
5+
4+
4+
10+
5+
4+
10+
4+
10+
8+
3+
10+
primary
languages
Python, JS
Java
Java, JS
Python, JS
Python
Python, JS
Python, JS
Python, JS
JS
C/C++
C/C++
Java,
Python
JS
Java
Python,
C/C++
Java
Java
Python,
C/C++
Java
JS
JS
JS
Java
JS, Python
C/C++
Figure 1: Research Stream
Table 2: Interviewees in our sample
The table describes interviewees in our sample. We report positions, professional experience,
and primary languages as communicated during the interviews. By location, we specify
the current country of the developer workplace. We have clustered the companies as
follows: free and open-source project (FOSS project), large enterprise (LE), small and
medium-sized enterprise (SME), and user group (UG).
exper.
(years)
position
country
#
CTO
#1
#2 Moderator
Developer
#3
CEO
#4
Developer
#5
Freelancer
#6
#7
Developer
Developer
#8
CTO
#9
Developer
#10
Developer
#11
#12
Developer
#13
#14
#15
#16
#17
#18
Team lead
Developer
Project
Leader
Developer
Developer
Senior
Software
Engineer
Developer
Security
Engineer
Developer
Developer
Developer
Full stack
developer
Developer
web
embedded
web/desktop
web
web
web
web
3+
3+
3+
8+
9+
3+
3+
RU
DE
HR
IT
IT
IT
ES
SME
LE
SME
SME
LE
SME
SME
#19
#20
#21
#22
#23
#24
#25
4.1 Recruitment of participants
As a source for finding software developers, we referred to local
development communities. We used the public channels for these
groups to post our call for interviews as well as contacted their refer-
ence people. Then we applied the snowball sampling approach [12]
to increase the number of interviewees by asking the respondents
to distribute our call within their friends and other development
communities they are involved in. To overcome the potential bias
of the snowballing approach, for our interviews, we selected devel-
opers with various roles and responsibilities, each representing a
different company and often a different country.
In our study, we recruited enterprise developers working in at
least one of the following programming languages: C/C++, Java,
JavaScript, or Python. The interviewees have at least three years of
professional working experience (with more than ten years for six
developers) and held various positions, spanning from regular and
IntervieweeidentiﬁcationInterview collectionTranscription &SharingOpen CodingSelective codingCode groupsSaturation checkAdditionalconﬁrmationCode co-occurencesMemberCheckSummary/Full paperYesNoYesDoneObservations andImplicationsSession 5C: Forensics CCS '20, November 9–13, 2020, Virtual Event, USA1516• Other general comments regarding dependency management -
this includes some general perceptions, comments, or recom-
mendations that D may give on the process of dependency
management and, in particular, about the security issues
introduced by software dependencies.
There were two interviewers at each interview session. Each
interviewer had a list of the interview parts mentioned above and
crossed off a part if she subjectively counted it as discussed. An
interview finished as soon as all the parts became crossed.
Each interview was recorded and transcribed. The transcripts
were anonymized and sent back to the developers for confirmation7.
The recordings were then destroyed for preserving the possibility
of identifying the interviewees.
4.3 Interview coding and analysis
To analyse the interviews, we have adopted the applied thematic
analysis [14]. Figure 1 summarizes our approach. It follows the
principle of emergence [13], according to which data gain their
relevance in the analysis through a systematic generation and iter-
ative conceptualization of codes, concepts, and code groups. Data
is analyzed, broken into manageable pieces (codes), and compared
for similarities and differences. Similar concepts are grouped under
the same conceptual heading (code group). Code groups are com-
posed in terms of their properties and dimensions, and finally, they
provide the structure of the analysis [40].
The first phase of analysis (open coding) consists of collecting
the critical point statements from each interviewee transcript; a
code summarizing the key points in a few words is assigned to
each key point statement. The interviewees are numbered #1 to
#25. Two researchers independently followed the “iterative process”
described by Saldaña [37] to code the transcribed interviews8. Then
they looked together at the resulting codes and agreed on the com-
mon code structure, which was reviewed by a third researcher not
involved in the preliminary coding process. So after each iteration,
we had a complete agreement on the codes and code groups by the
three researchers. Each time we reviewed the resulted codes, we
have also performed a check whether we have achieved a saturation
of the reported observations [30], i.e., if the interviewees discuss
the same concepts. After concluding that saturation is achieved,
we interviewed additional developers to control the stability of our
observations (Additional confirmation step in Figure 1).
We started the coding process as soon as we had ten interviews.
At first, we created 345 quotations and assigned 138 codes to them.
During the first six iterations, we were consolidating both quota-
tions and codes by looking at quotations and merging codes on
close topics. This resulted in 151 quotations with 28 codes assigned