and exploit.
Upon every successful authentication of a given IC, a set
of challenge-response pairs is potentially revealed to an ad-
versary. This means that the same challenge-response pair
cannot be used again.
If the adversary can learn the en-
tire set of challenge-response pairs, he can create a model
of a counterfeit IC. To implement this method, a database
of challenge-response pairs has to be maintained by the en-
tity that wishes to identify the IC. This database need only
cover a small subset of all the possible challenge-response
pairs. However it has to be kept secret as the security of the
system only relies on the attacker not being able to predict
which challenges will be made. If the database ever runs out
of challenge-response pairs, it can be necessary to \recharge"
it, by turning in the IC to the authority that performs the
authentication.
With Controlled PUFs many of these limitations can be
lifted. In particular, the reuse of a challenge-response pair
can be considered, and \recharging" of a PUF can be done
over an untrusted network. These improvements are de-
tailed in [10].
3.4 Attacks
There are many possible attacks on PUFs { here, we look
at four di(cid:11)erent types of attacks.
The adversary can attempt to duplicate a PUF by fabri-
cating a counterfeit IC containing an identical PUF. How-
ever, even if the adversary has access to the masks of the
IC, and unless the PUF is very simple, statistical variation
will force the adversary to fabricate a huge number of ICs
and precisely characterize each one, in order to create and
discover a counterfeit. This is a very expensive proposition,
both economically and computationally speaking.
Now assume that the adversary has unrestricted access
to the IC containing the PUF. The adversary can attempt
to create a model of the IC by measuring or otherwise de-
termining very precisely the delays of each device and wire
within the IC. Techniques like di(cid:11)erential power analysis do
not help much in determining precise delays of individual
devices. Direct measurement of device delays requires the
adversary to open the package of the IC, and remove several
layers, such as (cid:12)eld oxide and metal. Each of these layers
has some e(cid:11)ect on the delays of the underlying devices due
to electro-magnetic coupling (see [8]), and during this pro-
cess, the delays of the devices will change. One can also
design the package to have a signi(cid:12)cant e(cid:11)ect on the delays
of each device within the IC. Even in the case where the IC
can be opened without breaking the PUF, the adversary still
has to probe it precisely. In doing that he runs the risk of
changing delays because of coupling between the circuit and
his probe. Moreover, if he has to probe underlying wires,
the adversary has to damage overlying wires. These wires
150actually can in(cid:13)uence the delays of the underlying wires so
the adversary once again runs the risk of breaking the PUF.
The adversary could try to build a model of the PUF by
measuring the response of the PUF to a polynomial number
of adaptively-chosen challenges.3 We believe this to be the
most plausible form of attack. However, we argue that there
is a signi(cid:12)cant barrier to this form of attack as well (cf.
Section 4.1 and Section 6.2). An important direction of
research is to (cid:12)nd a circuit that is provably hard to break
by this method.
Finally, in the case of controlled PUFs, the adversary can
attempt to attack the control algorithm that is attached to
the PUF. This could be done by probing the control cir-
cuit to determine information that was supposed to be kept
secret, or by attempting to override values in the control
algorithm. We are currently studying ways to prevent this.
Our most promising candidate is to layer PUF delay wires
over any circuitry that we wish to protect. Therefore, an ad-
versary who tries to probe or drive underlying wires would
have to damage an overlaid PUF wire, which would change
the PUF and make his e(cid:11)orts useless. The next step in our
research consists in verifying these e(cid:11)ects on real circuits.
4. ARCHITECTURE AND IMPLEMENTA-
TION
This section covers some of the many challenges involved
in creating a silicon PUF (SPUF). The architecture that
is described here is a preliminary attempt to address the
issues that are involved. We (cid:12)rst describe characteristics
required of a circuit so it can be used as a PUF taking into
account security. We then present circuit implementations
with varying complexity.
4.1 Security
Can the adversary, given the PUF f , implemented as a
circuit Cf , (cid:12)nd the delays of all internal wires and gates
within Cf by applying a polynomial number of input chal-
lenges to Cf and measuring delays of Cf ’s paths? We will
assume that he has detailed knowledge of the internal struc-
ture of Cf , and a good estimate of the delays of the gates
and wires in Cf . The adversary can get this information
from the mask layout of Cf , which is assumed to be public.
We will refer to both a gate or wire as a device in the
sequel.
We (cid:12)rst note that creating accurate timing models is an
intensive area of research. Even the most detailed circuit
models have a resolution that is signi(cid:12)cantly coarser than
the resolution of reliable delay measurement. If an adver-
sary is able to (cid:12)nd a general method to attack silicon PUFs
by determining polynomial-sized timing models that are ac-
curate to within measurement errors, this would represent a
breakthrough.
4.1.1 Linear Delay Models
If there exists an input vector pair such that under arbi-
trary delays in the circuit, an event propagates along a path
P , then the path P is said to be single event sensitizable [9].
One way that the adversary can determine internal delays is
if there is a set of paths in Cf that cover all the devices such
that each path in the set is single event sensitizable. By
3Clearly, a model can be built by exhaustively enumerating
all possible challenges, but this is intractable.
assuming that the device delays that make up a path add
up to the total path delay, the adversary can apply input
stimuli and obtain an a(cid:14)ne system of equations, relating
measured path delays to device delays. These equations are
such that a path delay is only dependent on the delays of
devices that comprise the path. The number of equations
is equal to the number of delay variables, which is linear
in the size of Cf . Solving a linear system of equations in
the continuous domain is easy, provided the determinant is
non-singular4.
However, this kind of attack makes at least two assump-
tions, which are not necessarily true, as we show in Sec-
tion 6.2. First, it assumes that the delays are additive, i.e.,
path delay is an exact sum of device delays. Second, it as-
sumes that the delay of the path is only dependent on the
delays of devices on the path. In reality the path delay may
be dependent on the state of neighboring devices, which in
turn depends on the challenge.
In order to confront the adversary with a greater barrier,
we should ensure that a set of single event sensitizable paths
as described above does not exist in the circuit implementa-
tion Cf of the PUF. Fortunately, most paths are not single
event sensitizable { in fact, a careful structuring of logic is
required to produce single event sensitizability [9].
4.1.2 Nonlinear Delay Models
What happens if multiple paths are actuated when an in-
put stimulus is applied to Cf ? Then, a much more complex
set of equations will result5. Even if we assume device delays
are additive, this system is not a linear system because:
(cid:15) If two transitions of the same polarity (0 ! 1 or 1 ! 0)
arrive at a gate then the faster or slower one will go
through depending on the type of gate. This means
that the path delay is related to the maximum or min-
imum of two or more gate delays. For example, we
may have:
D(P1) = M AX(g1; M IN (g2 + w1; g3 + w2))
where gi is the gate delay of gate i and wi is the wire
delay of wire i. D(P1) is monotonic in the gi’s and
the wi’s, but the set of equations is not necessarily
separable, i.e., the adversary will not be able to write
it in the form:
gi = Fi(g1;
(cid:1) (cid:1) (cid:1) ; gi(cid:0)1; gi+1; (cid:1) (cid:1) (cid:1) ; gk; w1; (cid:1) (cid:1) (cid:1) ; wl)
in order to easily solve it. (Note that some types of
systems of nonlinear equations where the Fj are mono-
tonic can be solved in polynomial time.)
4The determinant is singular if the paths that were chosen
are not independent. Choosing new paths that are indepen-
dent should give new equations that will remove the singu-
larity. If this does not help, then there are device delays in
the circuit that never appear independently. These delays
should be amalgamated into a single delay, as the attacker
only needs the amalgamated delay for his model.
5In this section, we assume that we are measuring the delay
between a change of input vector, and the response on the
output of the circuit. It is important that the SPUF con-
strain the attacker to this model, by giving the circuit time
to stabilize between consecutive changes of input stimulus.
Otherwise, by very rapidly changing input stimuli, the at-
tacker could try to determine which path is responsible for
the delay of the circuit.
151(cid:15) If two transitions of opposite polarity converge at a
gate at di(cid:11)erent times, then the path delay can become
a non-monotonic function of the gate delays. As a
simple example, consider an AND gate where a rising
transition arrives after a falling transition. In this case,
the output of the AND gate is a constant 0, implying
a path delay of 0. If the rising transition is sped up to
arrive before the falling transition, the AND gate will
glitch 0 ! 1 ! 0, and the delay of the paths through
the gate will become non-zero. Then, the relationships
that the adversary has to write between the measured
path delays and the device delays will become more
complex.
Thus, to characterize a PUF the adversary has to solve
a system of equations that is highly non-linear and non-
separable.
4.1.3 Summary
Determining device delays by applying challenges to Cf
requires the adversary to perform the tasks enumerated be-
low.
(cid:15) If the additive delay model is applicable, solve a non-
linear, possibly non-separable and non-monotonic, sys-
tem of equations that grows with the size of the PUF.
(cid:15) If the additive delay model nearly applies, model de-
vice delays as being a function of the device’s context
(states of nearby devices) at the time of the challenge,
which implies that the number of equations can grow
signi(cid:12)cantly larger than the number of devices in the
PUF.
(cid:15) If the additive delay model does not apply at all, model
path delays accurately as non-additive functions of de-
vice parameters. In general, the circuit analysis per-
formed by tools such as SPICE [4] may be required to
relate path delays to device parameters.
4.2 Circuit Implementation
Here we describe a straw-man implementation of a silicon
PUF. In this implementation, we will measure the frequen-
cies of parameterized self-oscillating circuits to characterize
the IC that is being measured. In order to ensure robustness,
we will measure delays through glitch-free circuits in which
the total delay is a continuous function of the elementary de-
vice delays that make it up. Further, we will compensate for
environmental variations by taking delay ratios. To improve
security we will select circuits that exhibit non-monotonic
behavior, i.e., for which the total delay is not a monotonic
function of the elementary device and wire delays.
4.2.1 Structure of the self-oscillating circuit
Figure 1 is a simpli(cid:12)ed circuit that can be used to measure
delays6. The delay circuit that is to be measured is placed
in a self-oscillating circuit, the frequency of which is a func-
tion of the delay of the circuit. The resulting waveform is
synchronized and its rising edges are counted by a counter.
The counter is activated for a prede(cid:12)ned number of clock
cycles, after which the frequency of the self-oscillating loop
6In order for the self-oscillating loop to function correctly,
a more complicated circuit is often necessary to avoid prob-
lems with glitches in the delay circuit.
can be read out of the counter. By placing many such loops
on a chip, it is possible to measure many delays simultane-
ously. As we will see later, this plays an important part in
compensating for variation of the measured frequency due
to environmental variations.
For making an SPUF, the key is to (cid:12)nd a circuit, the
delay of which is a complicated function of the SPUF’s input
challenge, and that can be inserted in the self-oscillating
loop.
4.2.2 A candidate delay circuit
Figure 2 shows a delay circuit with a number of attributes
that are desirable for an SPUF delay circuit.
The circuit is made up of n (cid:0) 1 stages, where n is the
number of bits in the challenge. Each stage is made up of
two multiplexers (the trapezoids), and a few bu(cid:11)ers (the
triangles). If we ignore the bu(cid:11)ers for now, what we have is
a circuit with a top path and a bottom path. At the input
to the delay circuit, a rising or falling edge gets sent into
both the upper and lower path. At each stage of the circuit,
depending on the value of the stage’s challenge bit, the edges
may cross, that is, the edge from the lower path goes to the
higher path and vice versa. One of the two edges is then
selected by the output multiplexer to be looped back to the
input of the circuit in order for self-oscillations to occur.
The number of paths that can be measured this way is
exponential in the number of stages in the delay circuit.
However, the delays are clearly not independent, as there is a
lot of sharing between paths. Worse, the path is su(cid:14)ciently
simple that an adversary could calculate the delays of the
various parts of this circuit with only a linear number of
measurements, if an additive delay model is assumed.
There isn’t much that can be done about the dependence
that exists between the paths, as the amount of variation
that the delay function can exploit is only proportional to
the size of the circuit. However, we can use strategies that
make the dependence a lot more di(cid:14)cult to exploit by using
the variable delay bu(cid:11)ers that appear in this circuit.
Indeed, that is what the bu(cid:11)ers are used for in Figure 2.
The bu(cid:11)ers come in pairs, one of them is always on, while
the other is only activated when the other path is low. This
adds a complicated non-monotonic (if an elementary delay
becomes longer, it is possible that the total delay will get
shorter) interaction between the two edges that are racing
through the circuit. This prevents the attacker from simply
writing a linear equation to get the delays of individual delay
elements.
4.2.3 Compensated Measurement
Each of the circuits presented has a frequency counter
that measures delays of paths. Since these delays are go-
ing to vary due to environmental conditions, it is crucial to
compensate for these variations if we are to perform reliable
identi(cid:12)cation or authentication. Compensation is carried
out independent of the measurement during post-processing,
simply by taking ratios of delays for di(cid:11)erent loops, or for
di(cid:11)erent challenges on the same loop.
4.3 Improving a PUF Using Control
The PUF that we have described so far extracts identi-
(cid:12)cation information from an IC, and it appears that this
information is hard for an adversary to predict. By adding
control to that PUF, it is possible to make it a lot stronger.
152oscillator block
delay circuit