```
这个容器设置有点复杂，所以让我们一节一节地回顾一下。
我们从`initContainers`中知道，Xtra Backup 从状态集合中的另一个 Pod 加载数据，以便让该 Pod 为状态集合中的其他成员之间的复制做好准备。
在这种情况下，Xtra Backup 容器是真正开始复制的容器！这个容器将首先检查它运行的 Pod 是否是应该是 MySQL 集群中的从 Pod。如果是，它将从主服务器启动数据复制过程。
最后，Xtra Backup 容器还将在端口`3307`上打开一个监听器，如果需要，该监听器将发送 Pod 中数据的克隆。当状态集中的其他 Pods 请求克隆时，此设置会将克隆数据发送给它们。请记住，第一个`initContainer`查看状态集中的其他荚，以便获得克隆。最后，除了运行可以向其他 Pod 发送数据克隆的进程之外，StatefulSet 中的每个 Pod 都能够请求克隆。
最后，为了总结我们的规范，让我们来看看`volumeClaimTemplate`。规范的这一部分还列出了前一个容器的卷安装和 Pod 的卷设置(但为了简洁起见，我们省略了这一部分。查看本书的 GitHub 存储库，了解其他内容):
```
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi
```
如您所见，对于最后一个容器或卷列表的卷设置没有什么特别有趣的。然而，值得注意的是`volumeClaimTemplates`部分，因为只要 Pod 在相同的顺序点重新启动，数据就会保持不变。添加到集群中的新 Pod 将以空白的 PersistentVolume 开始，这将触发初始数据克隆。
总之，StatefulSets 的这些特性，结合 Pods 和工具的正确配置，允许在 Kubernetes 上轻松扩展有状态数据库。
既然我们已经讨论了为什么有状态的 Kubernetes 应用可能会使用 StatefulSets，让我们继续实现一些来证明它！我们将从对象存储应用开始。
# 在 Kubernetes 上部署对象存储
对象存储不同于文件系统或块存储。它提供了一个更高级别的抽象，封装了一个文件，给它一个标识符，并且通常包括版本控制。然后可以通过文件的特定标识符来访问该文件。
最受欢迎的对象存储服务可能是 AWS S3，但 Azure Blob Storage 和谷歌云存储是类似的替代品。此外，还有几种可以在 Kubernetes 上运行的自托管对象存储技术，我们在上一节对此进行了回顾。
对于这本书，我们将回顾一下 Kubernetes 上 **Minio** 的配置和用法。Minio 是一个强调高性能的对象存储引擎，可以部署在 Kubernetes 上，此外还有其他编排技术，如 **Docker Swarm** 和 **Docker Compose** 。
Minio 使用一个操作符和一个 Helm 图表支持 Kubernetes 部署。在本书中，我们将重点介绍操作员，但有关 Helm 图表的更多信息，请查看位于[https://docs.min.io/docs](https://docs.min.io/docs)的 Minio 文档。让我们从 Minio Operator 开始，它将让我们回顾一些酷的 kubectl 社区扩展。
## 安装迷你操作器
安装 Minio 操作器将与我们目前所做的任何事情大不相同。Minio 实际上提供了一个`kubectl`插件，以便整体管理运营商和 Minio 的安装和配置。
在这本书里，我们没有谈论太多`kubectl`插件，但是它们是 Kubernetes 生态系统中不断增长的一部分。`kubectl`插件可以以新的`kubectl`命令的形式提供额外的功能。
为了安装`minio` kubectl 插件，我们使用了 Krew，这是`kubectl`的插件管理器，通过一个命令就可以轻松搜索和添加`kubectl`插件。
## 安装 Krew 和 Minio kubectl 插件
所以首先，让我们安装 Krew。安装过程因您的操作系统和环境而异，但对于 macOS 来说，安装过程如下所示(更多信息，请查看 https://krew.sigs.k8s.io/docs T2 的 Krew 文档):
1.  首先，让我们使用以下终端命令安装 Krew CLI 工具:
    ```
    (
      set -x; cd "$(mktemp -d)" &&
      curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/krew.tar.gz" &&
      tar zxvf krew.tar.gz &&
      KREW=./krew-"$(uname | tr '[:upper:]' '[:lower:]')_$(uname -m | sed -e 's/x86_64/amd64/' -e 's/arm.*$/arm/')" &&
      "$KREW" install krew
    )
    ```
2.  Now, we can add Krew to our `PATH` variable with the following command:
    ```
    export PATH="${KREW_ROOT:-$HOME/.krechw}/bin:$PATH"
    ```
    在一个新的外壳中，我们现在可以开始使用 Krew 了！使用`kubectl krew`命令访问 Krew。
3.  要安装 Minio kubectl 插件，您可以运行以下`krew`命令:
    ```
    kubectl krew install minio
    ```
现在，安装了 Minio kubectl 插件，让我们看看如何在集群上设置 Minio。
## 启动迷你操作器
首先，我们需要在我们的集群上实际安装 Minio Operator。该部署将控制我们稍后需要执行的所有 Minio 任务:
1.  We can install the Minio Operator using the following command:
    ```
    kubectl minio init
    ```
    这将导致以下输出:
    ```
    CustomResourceDefinition tenants.minio.min.io: created
    ClusterRole minio-operator-role: created
    ServiceAccount minio-operator: created
    ClusterRoleBinding minio-operator-binding: created
    MinIO Operator Deployment minio-operator: created
    ```
2.  要检查 Minio 操作员是否准备好出发，让我们使用以下命令检查我们的 Pods:
    ```
    kubectl get pods
    ```
您应该会在输出中看到 Minio 操作员舱正在运行:
```
NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE
default       minio-operator-85ccdcfb6-r8g8b     1/1     Running   0          5m37s
```
现在，Minio Operator 已经在 Kubernetes 上正常运行。接下来，我们可以创建一个 Minio 租户。
## 创建迷你租户
下一步是创建一个**租户**。由于 Minio 是一个多租户系统，除了独立的 PersistentVolumes 之外，每个租户都有自己的存储桶和对象命名空间分隔。此外，Minio 操作员以高可用性设置和数据复制在分布式模式下启动 Minio。
在创建我们的 Minio 租户之前，我们需要为 Minio 安装一个**容器存储接口** ( **CSI** )驱动程序。CSI 是存储提供商和容器之间接口的标准化方式–Kubernetes 实现 CSI 是为了允许第三方存储提供商编写自己的驱动程序，以便无缝集成到 Kubernetes。Minio 推荐直接 CSI 驱动程序，以便为 Minio 管理持久卷。
要安装 Direct CSI 驱动程序，我们需要用 Kustomize 运行一个`kubectl apply`命令。但是，直接 CSI 驱动程序安装需要设置一些环境变量，以便使用正确的配置创建直接 CSI 配置，如图所示:
1.  First, let's go ahead and create this environment file based on the Minio recommendations:
    默认. env
    ```
    DIRECT_CSI_DRIVES=data{1...4}
    DIRECT_CSI_DRIVES_DIR=/mnt
    KUBELET_DIR_PATH=/var/lib/kubelet
    ```
    正如您所看到的，这个环境文件决定了 Direct CSI 驱动程序将在哪里装载卷。
2.  一旦我们创建了`default.env`，让我们使用以下命令将这些变量加载到内存中:
    ```
    export $(cat default.env)
    ```
3.  Finally, let's install the Direct CSI driver with the following command:
    ```
    kubectl apply -k github.com/minio/direct-csi
    ```
    这将产生以下输出:
    ```
    kubenamespace/direct-csi created
    storageclass.storage.k8s.io/direct.csi.min.io created
    serviceaccount/direct-csi-min-io created
    clusterrole.rbac.authorization.k8s.io/direct-csi-min-io created
    clusterrolebinding.rbac.authorization.k8s.io/direct-csi-min-io created
    configmap/direct-csi-config created
    secret/direct-csi-min-io created
    service/direct-csi-min-io created
    deployment.apps/direct-csi-controller-min-io created
    daemonset.apps/direct-csi-min-io created
    csidriver.storage.k8s.io/direct.csi.min.io created
    ```
4.  Before we go ahead and create our Minio tenant, let's check to see whether our CSI Pods started up properly. Run the following command to check:
    ```
    kubectl get pods –n direct-csi
    ```
    如果 CSI Pods 已经启动，您应该会看到类似以下的输出:
    ```
    NAME                                          READY   STATUS    RESTARTS   AGE
    direct-csi-controller-min-io-cd598c4b-hn9ww   2/2     Running   0          9m
    direct-csi-controller-min-io-cd598c4b-knvbn   2/2     Running   0          9m
    direct-csi-controller-min-io-cd598c4b-tth6q   2/2     Running   0          9m
    direct-csi-min-io-4qlt7                       3/3     Running   0          9m
    direct-csi-min-io-kt7bw                       3/3     Running   0          9m
    direct-csi-min-io-vzdkv                       3/3     Running   0          9m
    ```
5.  Now with our CSI driver installed, let's create our Minio tenant – but first, let's take a look at the YAML that the `kubectl minio tenant create` command generates:
    ```
    kubectl minio tenant create --name my-tenant --servers 2 --volumes 4 --capacity 1Gi -o > my-minio-tenant.yaml
    ```
    如果您想在不检查 YAML 的情况下直接创建 Minio 租户，请使用以下命令:
    ```
    kubectl minio tenant create --name my-tenant --servers 2 --volumes 4 --capacity 1Gi
    ```
    该命令将只创建租户，而不会首先向您显示 YAML。但是，由于我们使用的是直接 CSI 实现，因此我们需要更新 YAML。因此，仅使用命令是行不通的。现在让我们看看生成的 YAML 文件。
    出于空间方面的原因，我们将不完整地查看文件，但让我们看一下`Tenant` **自定义资源定义** ( **CRD** )的某些部分，Minio 运营商将使用这些部分来创建托管我们的 Minio 租户所需的资源。首先，让我们看一下规范的上部，它应该是这样的:
    米迷你泰纳 yaml
    ```
    apiVersion: minio.min.io/v1
    kind: Tenant
    metadata:
      creationTimestamp: null
      name: my-tenant
      namespace: default
    scheduler:
      name: ""
    spec:
      certConfig:
        commonName: ""
        organizationName: []
        dnsNames: []
      console:
        consoleSecret:
          name: my-tenant-console-secret
        image: minio/console:v0.3.14
        metadata:
          creationTimestamp: null
          name: my-tenant
        replicas: 2
        resources: {}
      credsSecret: