### 优化后的文本

#### 3. SharedPreferences 操作
```java
const-string v3, "birthday"
...
invoke-interface {v1, v3, v4}, Landroid/content/SharedPreferences$Editor;->putString(Ljava/lang/String;Ljava/lang/String;)Landroid/content/SharedPreferences$Editor;
const-string v3, "gender"
...
invoke-interface {v1, v3, v4}, Landroid/content/SharedPreferences$Editor;->putString(Ljava/lang/String;Ljava/lang/String;)Landroid/content/SharedPreferences$Editor;
```
由于没有 AM 删除操作，`Fdp` 和 `Fdc` 均为空。最终，LAI 为：`Fr = (Fap + Fac) - (Fdp + Fdc) = {name, email, password, birthday, gender}`。

### 7. 剩余账户清理工具
如果用户需要手动清理数十个已卸载应用的剩余账户，这将是一个沉重的负担。为了研究“自动清理”的可行性，我们开发了 LeftoverAccountCleaner 工具，帮助 Android 用户在卸载应用后自动删除剩余账户。LeftoverAccountCleaner 在笔记本电脑上运行，并通过 ADB 连接到手机。

该方法分为三个步骤：
1. LeftoverAccountCleaner 通过比较 Google Play 商店中的账户历史记录和当前安装在手机上的应用来找出已卸载的应用（账户历史记录包括所有下载过的应用，包括已卸载的应用）。
2. LeftoverAccountCleaner 从 Google Play 下载并重新安装已卸载的应用。
3. LeftoverAccountCleaner 通过登录、查找 ADF 并删除由之前安装的应用留下的账户，利用一些 LeftoverAccountAnalyzer 模块（第 6 节）。

### 8. 实现
我们的工具链使用 Python、Java 和 Shell 脚本实现，总代码量约为 6,000 行。工具链依赖于多个“使能”工具和库：
- 使用 apktool [3] 解码和重建 APK 文件。
- 使用 Tesseract OCR [11] 将嵌入在应用屏幕和网页中的图像转换为字符串。
- 使用 Screaming Frog [9] 爬取静态和动态网页内容。
- 使用 Appium 移动自动化工具 [4] 进行 UI 和用户交互自动化。
- 使用 NLTK [2] 支持自然语言处理。
- 修改 Flowdroid [19] 以支持静态数据流分析（即 def-use 链分析）。
- 构建 LAI 监控器（第 13.1 节），利用 Xposed Framework [15] 拦截和记录 AM 调用。

### 9. 评估
我们现在展示关于 LAI 问题的研究结果以及对我们工具链的评估。首先描述数据集和测试环境，然后介绍高层次的发现（第 9.1 节）。最后，我们从有效性（第 9.2 节）和效率（第 9.3 节）两个方面进行评估。

**数据集**：我们从 Google Play 商店选择了 1,435 个 APK 文件和 771 个对应的网站；有些应用没有网站。我们只选择了安装次数高的 Android 应用（超过 500K 次）。选择的应用涵盖了广泛的类别（体育、商业、通信、健康与健身、教育、游戏等），包括免费和付费应用。在 1,435 个应用中，938 个应用在创建账户时需要用户提供信息（其他 497 个应用不需要登录）；在这 938 个应用中，260 个应用使用第三方登录。因此，我们重点关注其余 678 个使用自己账户并收集用户信息的应用。试点研究中使用的 188 个应用不包括在 1,435 个应用的数据集中。

**环境**：我们的测试环境包括：
- 一台 Intel Xeon 服务器（36 个逻辑核心 @ 4.3 GHz，128GB RAM；Ubuntu 18.04），用于运行 ADF 分析。
- 两台 MacBook Pro 笔记本电脑（Core i5，8GB RAM），用于配置 Appium 服务器并运行 LAI 分析和 LeftoverAccountCleaner。
- 两部 Android 手机（4 ARM PI:EMAIL GHz，2GB RAM，16GB 存储，Android 6.0）。

### 9.1. 高层次发现
高层次的发现如表 6 所示：254 个应用（37.46%）在卸载后仍有 LAI；17 个应用（2.5%）在账户删除后仍有 LAI；437 个应用（64.45%）根本不提供 ADF 功能。我们认为，在删除后保留 LAI 以及不向用户提供“删除账户”选项是值得关注的问题。这些发现与我们的试点研究结果一致（表 1）。

### 9.2. 有效性
本节讨论工具链中四个工具的有效性及其分析结果。

#### 9.2.1. 剩余账户分析器
此分析器推断服务器上遗留的信息，即 LAI。表 7 显示了我们的分析标记出在应用卸载后、账户删除后以及未提供 ADF 的应用所收集的信息。某些 LAI 类别包括相关的字段组，例如“政府 ID”（SSN、驾照号码、员工 ID）和“银行信息”（信用卡号、CVV 号、支付方式、交易详情、账单信息）。

**应用卸载后的 LAI**：如表 7 第二列所示，许多应用在卸载后仍有 LAI。虽然一些应用出于便利考虑保留 LAI（例如，用户可能希望重新激活账户），但仍应有明确的保留政策来指示数据保留时间。我们发现电子邮件和密码是最常见的遗留信息类型（230 个应用需要电子邮件，218 个应用需要密码），其次是位置（210）、社交网络资料（181）和电话号码（180）。政府 ID 和银行信息是最少见但最敏感的 LAI：6 个应用需要驾照（或社保号码），49 个应用需要银行信息（信用卡号、支付方式、账单地址）。

一些在卸载后仍保留 LAI 的著名应用包括：Microsoft Word（电子邮件地址）、Spotify（社交网络账户）、WhatsApp（电话号码）、Adobe Photoshop（编辑的照片）、eHarmony（语言）、McDonald's（GPS 位置）、MyFitnessPal（体重和邮政编码）。

**账户删除后的 LAI**：表 7 第三列显示，电子邮件、密码、位置和社交网络资料是账户删除后最常见的 LAI —— 超过 10 个应用在账户删除后仍保留这些信息。我们验证了两种情况下的数据保留情况。首先，对于没有保留期的应用（表 8），我们在 02.01.20 删除了账户，然后分别在 02.26.20 和 07.10.20 检查 LAI。其次，对于有保留期的应用（表 9），我们在 02.01.20 和 02.20.20 删除了一些账户，然后在最长保留期结束后（04.16.20 和 07.10.20）检查 LAI。

如表 8 和表 9 所示，17 个应用（2.5%）在账户删除后仍有 LAI。其中 15 个应用的安装量超过 1M。表 8 中的应用未指定保留期，但在联系客服后仍未删除账户信息，例如 OLIO 应用。表 9 中的应用指定了保留期（7 分钟到 30 天）。然而，当我们在保留期结束后再次检查时，账户仍未被删除，这违反了用户的信任和应用自身的政策。

我们通过多种方式（实时聊天、联系表单和电子邮件）联系了表 8 和表 9 中出现的应用所属公司。大多数公司同意删除剩余账户数据。一家公司（Fitbit）表示希望保留部分用户数据。还有一些公司要求我们先提交官方身份证明文件（护照、驾照）才能继续删除数据。

#### 9.2.2. 账户删除分析器
通过对 678 个应用的手动分析获得基本事实，涉及：

| 包名 | 安装数量 | 账户删除日期 | 检查日期 | 重新检查日期 | 保留的数据 |
| --- | --- | --- | --- | --- | --- |
| com.bandainamcoent.google.pac | 5M | 02/01/2020 | 02/26/2020 | 07/10/2020 | 电子邮件、密码 |
| com.olioex.android | 1M | 02/01/2020 | 02/26/2020 | 07/10/2020 | 客服未删除账户 |
| com.discord | 50M | 02/01/2020 | 02/26/2020 | 07/10/2020 | 仍可恢复账户 |
| ... | ... | ... | ... | ... | ... |

这些表格展示了在不同情况下应用保留的数据情况。