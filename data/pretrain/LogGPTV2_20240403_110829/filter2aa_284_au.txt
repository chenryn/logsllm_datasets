data which gives rise to integrity issues.
23.1 Description
With competing tasks manipulating the same resource, we can easily get a race condition as the resource is 
not in step-lock or utilises a token based system such as semaphores. For example if there are two processes 
(Thread 1, T1) and (Thread 2, T2). The code in question adds 10 to an integer X. The initial value of X is 5. 
X = X + 10
With no controls surrounding this code in a multithreaded environment, the code could experience the 
following problem: 
 T1 places X into a register in thread 1
 T2 places X into a register in thread 2
 T1 adds 10 to the value in T1’s register resulting in 15
 T2 adds 10 to the value in T2’s register resulting in 15
 T1 saves the register value (15) into X.
 T1 saves the register value (15) into X.
The value should actually be 25, as each thread added 10 to the initial value of 5. But the actual value is 15 due 
to T2 not letting T1 save into X before it takes a value of X for its addition.
This leads to undefined behavior, where the application is in an unsure state and therefore security cannot be 
accurately enforced.
What to Review
• In C#.NET look for code which used multithreaded environments:
o Thread
o System.Threading
o ThreadPool
o System.Threading.Interlocked
• In Java code look for
o java.lang.Thread
o start()
o stop()
o destroy()
o init()
o synchronized 
RACE CONDITIONS
Race Conditions
182
Race Conditions
o wait()
o notify()
o notifyAll()
• For classic ASP multithreading is not a directly supported feature, so this kind of race condition could be 
present only when using COM objects.
• Static methods and variables (one per class, not one per object) are an issue particularly if there is a shared 
state among multiple threads. For example, in Apache, struts static members should not be used to store 
information relating to a particular request. The same instance of a class can be used by multiple threads, and 
the value of the static member cannot be guaranteed. 
• Instances of classes do not need to be thread safe as one is made per operation/request. Static states must 
be thread safe. 
o References to static variables, these must be thread locked.
o Releasing a lock in places other then finally{} may cause issues.
o Static methods that alter static state.
References
• http://msdn2.microsoft.com/en-us/library/f857xew0(vs.71).aspx
183
A buffer is an amount of contiguous memory set aside for storing information. For example if a program 
has to remember certain things, such as what your shopping cart contains or what data was inputted prior 
to the current operation. This information is stored in memory in a buffer. Languages like C, C++ (which 
many operating systems are written in), and Objective-C are extremely efficient, however they allow code to 
access process memory directly (through memory allocation and pointers) and intermingle data and control 
information (e.g. in the process stack).  If a programmer makes a mistake with a buffer and allows user input 
to run past the allocated memory, the user input can overwrite program control information and allow the 
user to modify the execution of the code.
Note that Java, C#.NET, Python and Ruby are not vulnerable to buffer overflows due to the way they store their 
strings in char arrays, of which the bounds are automatically checked by the frameworks, and the fact that 
they do not allow the programmer direct access to the memory (the virtual machine layer handles memory 
instead).  Therefore this section does not apply to those languages.  Note however that native code called 
within those languages (e.g. assembly, C, C++) through interfaces such as JNI or ‘unsafe’ C# sections can be 
susceptible to buffer overflows.
24.1 Description
To allocate a buffer the code declares a variable of a particular size:
• char myBuffer[100]; // large enough to hold 100 char variables
• int myIntBuf[5]; // large enough to hold 5 integers
• Widget myWidgetArray[17]; // large enough to hold 17 Widget objects
As there is no automatic bounds checking code can attempt to add a Widget at array location 23 (which does 
not exist).  When the code does this, the complier will calculate where the 23rd Widget should be placed in 
memory (by multiplying 23 x sizeof(Widget) and adding this to the location of the ‘myWidgetArray’ pointer). 
Any other object, or program control variable/register, that existed at this location will be overwritten.
Arrays, vectors, etc. are indexed starting from 0, meaning the first element in the container is at ‘myBuffer[0]’, 
this means the last element in the container is not at array index 100, but at array index 99.  This can often lead 
to mistakes and the ‘off by one’ error, when loops or programming logic assume objects can be written to the 
last index without corrupting memory.
In C, and before the C++ STL became popular, strings were held as arrays of characters:
• char nameString[10];
This means that the ‘nameString’ array of characters is vulnerable to array indexing problems described above, 
and when many of the string manipulation functions (such as strcpy, strcat, described later) are used, the 
possibility of writing beyond the 10th element allows a buffer overrun and thus memory corruption.
As an example, a program might want to keep track of the days of the week. The programmer tells the 
computer to store a space for 7 numbers. This is an example of a buffer. But what happens if an attempt to add 
BUFFER OVERRUNS
Buffer Overruns
184
Buffer Overruns
8 numbers is performed? Languages such as C and C++ do not perform bounds checking, and therefore if the 
program is written in such a language, the 8th piece of data would overwrite the program space of the next 
program in memory, and would result in data corruption. This can cause the program to crash at a minimum 
or a carefully crafted overflow can cause malicious code to be executed, as the overflow payload is actual code.
What to Review: Buffer Overruns
C library functions such as strcpy (), strcat (), sprintf () and vsprintf () operate on null terminated strings and perform 
no bounds checking. gets() is another function that reads input (into a buffer) from stdin until a terminating newline 
or EOF (End of File) is found. The scanf () family of functions also may result in buffer overflows.
Using strncpy(), strncat() and snprintf() functions allows a third ‘length’ parameter to be passed which determines the 
maximum length of data that will be copied/etc. into the destination buffer. If this is correctly set to the size of the 
buffer being written to, it will prevent the target buffer being overflowed.  Also note fgets() is a replacement for gets(). 
Always check the bounds of an array before writing it to a buffer.  The Microsoft C runtime also provides additional 
versions of many functions with an ‘_s’ suffix (strcpy_s, strcat_s, sprintf_s). These functions perform additional checks 
for error conditions and call an error handler on failure.
The C code below is not vulnerable to buffer overflow as the copy functionality is performed by ‘strncpy’ which 
specifies the third argument of the length of the character array to be copied, 10. 
void copyData(char *userId) {  
     char  smallBuffer[10]; // size of 10  
     strcpy (smallBuffer, userId);
  }  
  int main(int argc, char *argv[]) {  
    char *userId = “01234567890”; // Payload of 12 when you include the ‘\n’ string termination 
      // automatically added by the “01234567890” literal
    copyData (userId); // this shall cause a buffer overload
  }
Sample 24.1
void copyData(char *userId) {
    char  smallBuffer[10]; // size of 10
    strncpy(smallBuffer, userId, sizeof(smallBuffer)); // only copy first 10 elements
    smallBuffer[10] = 0; // Make sure it is terminated.
 }
 int main(int argc, char *argv[]) {
    char *userId = “01234567890”; // Payload of 11
    copyData (userId); 
 }
Sample 24.2
185
Modern day C++ (C++11) programs have access to many STL objects and templates that help prevent security 
vulnerabilities.  The std::string object does not require the calling code have any access to underlying pointers, 
and automatically grows the underlying string representation (character buffer on the heap) to accommodate 
the operations being performed.  Therefore code is unable to cause a buffer overflow on a std::string object.
Regarding pointers (which can be used in other ways to cause overflows), C++11 has smart pointers which 
again take away any necessity for the calling code to user the underlying pointer, these types of pointers are 
automatically allocated and destroyed when the variable goes out of scope.  This helps to prevent memory leaks and 
double delete errors. Also the STL containers such as std::vector, std::list, etc., all allocate their memory dynamically 
meaning normal usage will not result in buffer overflows.  Note that it is still possible to access these containers 
underlying raw pointers, or reinterpret_cast the objects, thus buffer overflows are possible, however they are more 
difficult to cause.
Compliers also help with memory issues, in modern compilers there are ‘stack canaries’ which are subtle elements 
placed in the complied code which check for out-of-bound memory accesses.  These can be enabled when compiling 
the code, or they could be enabled automatically.  There are many examples of these stack canaries, and for some 
system many choices of stack canaries depending on an organizations appetite for security versus performance. 
Apple also have stack canaries for iOS code as Objective-C is also susceptible to buffer overflows.
In general, there are obvious examples of code where a manual code reviewer can spot the potential for overflows 
and off-by-one errors, however other memory leaks (or issues) can be harder to spot.  Therefore manual code review 
should be backed up by memory checking programs available on the market.
What to Review: Format Function Overruns
A format function is a function within the ANSI C specification that can be used to tailor primitive C data types to 
human readable form. They are used in nearly all C programs to output information, print error messages, or process 
strings. 
Some format parameters:
The %s in this case ensures that value pointed to by the parameter ‘abc’ is printed as an array of characters. 
For example:
Format String
Relevant Input
%x
Hexadecimal values (unsigned int)
%d
%u
Decimal
Unsigned decimal (unsigned int)
%n
Integer
%s
Strings ((const) (unsigned) char*)
Table 23: Format Function Overruns
char* myString = “abc”;
printf (“Hello: %s\n”, abc);
Buffer Overruns
186
Through supplying the format string to the format function we are able to control the behaviour of it. So 
supplying input as a format string makes our application do things it’s not meant to. What exactly are we able 
to make the application do? 
If we supply %x (hex unsigned int) as the input, the ‘printf’ function shall expect to find an integer relating to 
that format string, but no argument exists. This cannot be detected at compile time. At runtime this issue shall 
surface.
For every % in the argument the printf function finds it assumes that there is an associated value on the stack. 
In this way the function walks the stack downwards reading the corresponding values from the stack and 
printing them to the user.
Using format strings we can execute some invalid pointer access by using a format string such as:
• printf (“%s%s%s%s%s%s%s%s%s%s%s%s”);
Worse again is using the ‘%n’ directive in ‘printf()’. This directive takes an ‘int*’ and ‘writes’ the number of bytes 
so far to that location.
Where to look for this potential vulnerability. This issue is prevalent with the ‘printf()’ family of functions, 
‘’printf(),fprintf(), sprintf(), snprintf().’ Also ‘syslog()’ (writes system log information) and setproctitle(const char 
*fmt, ...); (which sets the string used to display process identifier information).
What to Review: Integer Overflows
Data representation for integers will have a finite amount of space, for example a short in many languages is 
16 bits twos complement number, which means it can hold a maximum number of 32,767 and a minimum 
number of -32,768.  Twos complement means that the very first bit (of the 16) is a representation of whether 
the number of positive or negative.  If the first bit is ‘1’, then it is a negative number.
The representation of some boundary numbers are given in table 24.
If you add 1 to 32,766, it adds 1 to the representation giving the representation for 32,767 shown above. 
However if you add one more again, it sets the first bit (a.k.a. most significant bit), which is then interpreted by 
the system as -32,768.
If you have a loop (or other logic) which is adding or counting values in a short, then the application could 
experience this overflow.  Note also that subtracting values below -32,768 also means the number will wrap 
around to a high positive, which is called underflow.
Number
Representation
32,766
0111111111111110
32,767
0111111111111111
-32,768
-1
1000000000000000
1111111111111111
Table 24: Integer Overflows
Buffer Overruns
187
The binary representation of 0x7fffffff is 1111111111111111111111111111111; this integer is initialized with 
the highest positive value a signed long integer can hold. 
Here when we add 1 to the hex value of 0x7fffffff the value of the integer overflows and goes to a negative 
number (0x7fffffff + 1 = 80000000) In decimal this is (-2147483648). Think of the problems this may cause. 
Compilers will not detect this and the application will not notice this issue. 
We get these issues when we use signed integers in comparisons or in arithmetic and also when comparing 
signed integers with unsigned integers. 
Here if v2 is a massive negative number the “if” condition shall pass. This condition checks to see if v2 is bigger 
than the array size.
If the bounds check was not performed the line “myArray[v2]  = v1” could have assigned the value v1 to a 
location out of the bounds of the array causing unexpected results.
References
• See the OWASP article on buffer overflow attacks.
#include 
int main(void){
            int val;
            val = 0x7fffffff;  
/* 2147483647*/
            printf(“val = %d (0x%x)\n”, val, val);
            printf(“val + 1 = %d (0x%x)\n”, val + 1 , val + 1); /*Overflow the int*/
            return 0;
}
Sample 24.3
int myArray[100];
    int fillArray(int v1, int v2){
        if(v2 > sizeof(myArray) / sizeof(int) -1 ){
            return -1; /* Too Big */
        }
        myArray [v2] = v1;
        return 0;
    }
Sample 24.4
Buffer Overruns
188
• See the OWASP Testing Guide on how to test for buffer overflow vulnerabilities.
• See Security Enhancements in the CRT: http://msdn2.microsoft.com/en-us/library/8ef0s5kh(VS.80).aspx
JavaScript has several known security vulnerabilities, with HTML5 and JavaScript becoming more prevalent in 
web sites today and with more web sites moving to responsive web design with its dependence on JavaScript 
the code reviewer needs to understand what vulnerabilities to look for. JavaScript is fast becoming a signif-
icant point of entry of hackers to web application. For that reason we have included in the A1 Injection sub 
section. 
The most significant vulnerabilities in JavaScript are cross-site scripting (XSS) and Document Object Model, 
DOM-based XSS.
Detection of DOM-based XSS can be challenging. This is caused by the following reasons.
• JavaScript is often obfuscated to protect intellectual property.
• JavaScript is often compressed out of concerned for bandwidth.
In both of these cases it is strongly recommended the code review be able to review the JavaScript before it 
has been obfuscated and or compressed. This is a huge point of contention with QA software professionals 
because you are reviewing code that is not in its production state.
Another aspect that makes code review of JavaScript challenging is its reliance of large frameworks such as 
Microsoft .NET and Java Server Faces and the use of JavaScript frameworks, such as JQuery, Knockout, Angular, 
Backbone. These frameworks aggravate the problem because the code can only be fully analyzed given the 
source code of the framework itself. These frameworks are usually several orders of magnitude larger then the 
code the code reviewer needs to review. 
Because of time and money most companies simple accept that these frameworks are secure or the risks are 
low and acceptable to the organization.
Because of these challenges we recommend a hybrid analysis for JavaScript. Manual source to sink validation 
when necessary, static analysis with black-box testing and taint testing.
First use a static analysis. Code Reviewer and the organization needs to understand that because of event-driv-
en behaviors, complex dependencies between HTML DOM and JavaScript code, and asynchronous commu-
nication with the server side static analysis will always fall short and may show both positive, false, false –pos-
itive, and positive-false findings.
Black-box traditional methods detection of reflected or stored XSS needs to be preformed. However this ap-
proach will not work for DOM-based XSS vulnerabilities.
Taint analysis needs to be incorporated into static analysis engine. Taint Analysis attempts to identify variables 
that have been ‘tainted’ with user controllable input and traces them to possible vulnerable functions also known 
Buffer Overruns
CLIENT SIDE JavaScript
189
as a ‘sink’. If the tainted variable gets passed to a sink without first being sanitized it is flagged as vulnerability.
Second the code reviewer needs to be certain the code was tested with JavaScript was turned off to make sure 
all client sided data validation was also validated on the server side.
Code examples of JavaScript vulnerabilities.
Explanation: An attacker can send a link such as “http://hostname/welcome.html#name=” to the victim resulting in the victim’s browser executing the injected client-side code.
Line 5 may be a false-positive and prove to be safe code or it may be open to “Open redirect attack” with taint 
analysis the static analysis should be able to correctly identified if this vulnerability exists. If static analysis 
relies only on black-box component this code will have flagged as vulnerable requiring the code reviewer to 
do a complete source to sink review.
Additional examples and potential security risks
Source: document.url
Sink: document.write()
Results: Results:document.write(“”);
Cybercriminal may controlled the following DOM elements including  
document.url,document.location,document.referrer,window.location
Source: document.location
Sink: windon.location.href
Results: windon.location.href = http://www.BadGuysSite; - Client code open redirect.
Source: document.url
Storage: windows.localstorage.name
Sample 25.1
var url = document.location.url;
var loginIdx = url.indexOf(‘login’);
var loginSuffix = url.substring(loginIdx);
url = ‘http://mySite/html/sso/’ + loginSuffix;
document.location.url = url;
Sample 25.2
Buffer Overruns
190
Sink: elem.innerHTML
Results: elem.innerHTML =  =Stored DOM-based Cross-site Scripting
eval() is prone to security threats, and thus not recommended to be used.
Consider these points:
1. Code passed to the eval is executed with the privileges of the executer. So, if the code passed can be affect-
ed by some malicious intentions, it leads to running malicious code in a user’s machine with your website’s 
privileges.
2. A malicious code can understand the scope with which the code passed to the eval was called.
3. You also shouldn’t use eval() or new Function() to parse JSON data.