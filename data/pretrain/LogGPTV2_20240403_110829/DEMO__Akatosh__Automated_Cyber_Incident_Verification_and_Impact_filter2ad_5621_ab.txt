begins to make recommendations to analysts in two areas. Overall,
the algorithm recommends high-con(cid:128)dence real alert predictions
higher in the queue of new IDS alerts. For individual clients, the
algorithm presents high-con(cid:128)dence real alert plugin results higher
so that analysts can more quickly check these indicators. (cid:140)rough
Figure 1: High-level architecture diagram for Akatosh.
Figure 2: Step-by-step explanation of the Akatosh endpoint
snapshot and real-time analysis process.
by IDS alerts. By doing these this, Akatosh helps operations per-
sonnel verify that an alert on an endpoint corresponds to a true
cyber-a(cid:138)ack. (cid:140)e system is comprised of small Akatosh client or
agent, the Akatosh server, and the Akatosh dashboard, as depicted
in Figure 1. (cid:140)e Akatosh clients live on network endpoints and
take regularly scheduled baseline snapshots on con(cid:128)gurable time
intervals to record endpoint state over time.
(cid:140)ese snapshots capture speci(cid:128)c data about the endpoint, includ-
ing processes, loaded drivers, registry entries, network connections,
and other data. When an IDS detects anomalous behavior it alerts
the Akatosh system. Depending on the nature of the alert (con-
(cid:128)gured by the operators), the Akatosh client immediately takes a
snapshot of the endpoint that generated the alert and sends the
snapshot to the Akatosh server. (cid:140)e Akatosh server automatically
produces a succinct incident report di(cid:130)erentiating the post-alert
snapshot from the most recent baseline snapshot. (cid:140)e Akatosh
dashboard displays all endpoints being tracked, their status, the
snapshot data being collected as the system receives IDS alerts, and
the incident reports.
Figure 2 summarizes the underlying process described above.
Akatosh automatically analyses the di(cid:130)erences between pre-alert
and post-alert snapshots in real-time and displays the results on
the dashboard, showing the speci(cid:128)c endpoint components a(cid:130)ected
by the anomalous behavior.
Time-Series State Di(cid:130)erentiation Akatosh analyzes the paral-
lel historical timeline of memory images for each client machine
DemonstrationCCS’17, October 30-November 3, 2017, Dallas, TX, USA2464these recommendations, the overall time to recovery of an impacted
machine is reduced.
Implementation Akatosh is implemented in Python [5], which
allows the system to run on Windows, Linux, and Mac-based OSs.
As stated earlier, Akatosh utilizes Volatility and Rekall [6, 8] for
extracting machine state data from images. To capture images
from machines, Akatosh uses the Rekall Memory Forensic Suite of
imaging tools, which are used in other frameworks such as Google’s
GRR [7]. To store data on the server, Akatosh uses a combination
of the ba(cid:138)le-tested relational database, PostgreSQL, and a static (cid:128)le
storage system, Minio, based on Amazon S3 [9, 13].
4 EVALUATION
Can We Scalably Collect Full State Captures from Hundreds
of Endpoints? Akatosh can collect memory images of nearly any
practical size (tested up to 64 GB) in less than 30 seconds for 16 GB
images. Akatosh stores no data on client machines, as it transfers
the images as they are captured. In the varying network conditions
tested (between 10-1000 Mbps upload speeds), the transfer speed
is bounded only by the speed at which memory can be captured.
When images are stored on the server, images are encrypted with a
2048-bit key using the AES algorithm. Additionally, up to 60% on
average of the original memory size can be compressed due to the
nature of the image format, thus reducing 16 GB image captures to
less than 8 GB when stored in Minio.
With respect to client performance overhead incurred due to
imaging, no noticeable slowdowns can be seen from the client, and
in our testing we saw no more than 10 to 30% CPU usage to image a
machine. Finally, Akatosh currently scales up to 150+ machines and
can load balance image capturing and state di(cid:130)erentiation analysis
e(cid:130)ectively for a variety of clients, including Windows, Linux, and
Mac.
Can We Surface Deeper Context to Existing Alerts with State
Di(cid:130)erences? (cid:140)e work described in the prior section on classi(cid:128)-
cation of memory di(cid:130)s is still under active development; however,
Akatosh has been tested against several pieces of historically signif-
icant malware, and has identi(cid:128)ed all of the components the tested
malware was known to a(cid:130)ect on client machines. (cid:140)e components
known to be a(cid:130)ected were pulled from a variety of published write-
ups on the malware. (cid:140)e malware tested consisted of the Dark-
Comet Trojan, the NJRat Trojan and Reverse Shell, and Stuxnet.
(cid:140)ese results indicate that when Akatosh is alerted to an infec-
tion on a system where malware has infected the host in question,
our system can identify the a(cid:130)ected components and bring them
to the a(cid:138)ention of the incident response personnel. Future work
remains to be done to test Akatosh against vast amounts of other
malware and so(cid:137)ware, though early results are promising.
5 RELATED WORK
Akatosh is the (cid:128)rst of its kind system to integrate automated foren-
sic analysis with IDSs. (cid:140)rough this integration, Akatosh can per-
form a detailed analysis of the a(cid:130)ected endpoints at the exact time
of the incident, unlike current incident response systems, which
are less reactive to immediate changes in endpoint state, at least at
the level of detail that Akatosh provides.
Additionally, the Akatosh dashboard automatically provides re-
ports showing a high-level overview of a(cid:130)ected endpoint compo-
nents that operations personnel and analysts as well as managers
and upper-level executives can understand and dig into. Reports are
generated in real-time without shu(cid:138)ing down endpoints to perform
the tedious task of imaging the machine and analyzing the image
on a separate machine. Similar products in the space do not provide
di(cid:130)erentiated endpoints states to operations personnel [2, 10], and
may also require manual analysis of endpoints causing analysts to
shut down machines before examining their state [4].
While products exist to perform endpoint history analysis for
non-security related domains, such as infrastructure monitoring [14,
17], these products do not transition well to verifying, tracking,
and analyzing the impact of cyber a(cid:138)acks. By focusing on a(cid:130)ected
endpoint components, Akatosh assists in verifying incidents and
automatically tracking and analyzing propagation over the compo-
nents.
6 CONCLUSION AND FUTURE WORK
In this work we have presented a novel system developed to en-
hance context around existing alerts in modern security defense
systems, while allowing the scalability to potentially thousands of
machines and reducing the cost of mitigating breaches when they
inevitably occur. In the coming months, Akatosh will be undergo-
ing pilots at the U.S. Department of Energy HQ and MITRE, as well
as undergoing active development to (cid:128)nish the full classi(cid:128)cation
abilities of the system as well as continue to scale out to additional
clients.
REFERENCES
[1] Sonal Salve Swati Vamney Bhawna Nigam, Poorvi Ahirwal. 2011. Document
Classi(cid:128)cation Using Expectation Maximization with Semi Supervised Learning.
(2011). h(cid:138)ps://arxiv.org/abs/1112.2028
[2] CarbonBlack. 1999. (1999). h(cid:138)p://www.carbonblack.com
[3] Cuckoo. 2017. Cuckoo. (2017). h(cid:138)ps://cuckoosandbox.org/
[4] EndCase. 2017.
encase-forensic
EndCase.
(2017).
h(cid:138)ps://www.guidanceso(cid:137)ware.com/
[5] Python So(cid:137)ware Foundation. 2017. Python. (2017). h(cid:138)ps://www.python.org/
[6] Volatility Foundation. 2017. Volatility. (2017). h(cid:138)p://www.volatilityfoundation.
org/
com
[7] Google. 2017. GRR. (2017). h(cid:138)ps://github.com/google/grr
[8] Google. 2017. Rekall. (2017). h(cid:138)p://www.rekall-forensic.com/
[9] (cid:140)e PostgreSQL Global Development Group. 2017. PostgreSQL. (2017). h(cid:138)ps:
//www.postgresql.org/
[10] Tanium Inc. 1999. Endpoint Security and Systems. (1999). h(cid:138)p://www.tanium.
[11] Ponemon Institute and IBM. 2017. Cost of Data Breach Study. (2017). h(cid:138)ps:
//www.ibm.com/security/data-breach/
[12] et al. Mika, Sebastian. 1999. Fisher discriminant analysis with kernels. (1999).
h(cid:138)p://ieeexplore.ieee.org/abstract/document/788121/
[13] Minio. 2017. Minio. (2017). h(cid:138)ps://minio.io/
[14] PrometheusIO. 2017. PrometheusIO. (2017). h(cid:138)ps://prometheus.io/
[15]
J.R. (cid:139)inlan. 1993. C4.5: Programs for Machine Learning. (1993). h(cid:138)p://dl.acm.
org/citation.cfm?id=152181
[16] D. Ruta and B. Gabrys. 2000. An Overview of Classi(cid:128)er Fusion Methods. (2000).
h(cid:138)p://eprints.bournemouth.ac.uk/9649/
[17] Splunk. 2017. Splunk. (2017). h(cid:138)ps://www.splunk.com/
[18]
J.A.K. Suykens and J. Vandewalle. 1999. Least Squares Support Vector Ma-
chine Classi(cid:128)ers.
h(cid:138)ps://link.springer.com/article/10.1023%2FA%
(1999).
3A1018628609742?LI=true
[19] (cid:140)eZoo. 2017. (cid:140)eZoo. (2017). h(cid:138)ps://github.com/ytisf/theZoo
[20] Hanna M. Wallach. 2006. Topic modeling: beyond bag-of-words. (2006). h(cid:138)p:
//dl.acm.org/citation.cfm?id=1143967
DemonstrationCCS’17, October 30-November 3, 2017, Dallas, TX, USA2465