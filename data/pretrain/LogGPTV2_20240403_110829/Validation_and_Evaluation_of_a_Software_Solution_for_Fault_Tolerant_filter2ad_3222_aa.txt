# Validation and Evaluation of a Software Solution for Fault-Tolerant Distributed Synchronization

**Authors:**
- Paolo Ballarini
- Simona Bernardi
- Susanna Donatelli

**Affiliation:**
Dipartimento di Informatica, Universit√† di Torino, Corso Svizzera 185, 10149 Torino, Italy

**Email:**
fballarin, bernardi, donatelli@di.unito.it

## Abstract

This paper presents a case study on the combined use of various tools and techniques for the validation and evaluation of a fault-tolerant software mechanism, named distributed synchronization, from the early stages of design. The mechanism is specified using UML state charts and sequence diagrams. Stochastic Well-formed Nets (SWN) models are derived from these specifications, composed using the algebra tool, and model-checked with the PROD tool for temporal logic properties via a GreatSPN-to-PROD translator. Quantitative analysis is performed using the SWN solvers of the GreatSPN tool.

## 1. Introduction

Traditionally, modeling and evaluation occur in the later stages of system development, sometimes even after the system is operational. However, recent research has focused on generating performance models from partial specifications, particularly using UML diagrams. This paper follows this trend by supporting the design of a software synchronization mechanism using a suite of Petri net-based tools.

The paper addresses the use of Stochastic Well-formed Nets (SWN) and related tools to support validation and evaluation from the early stages of design. Key aspects of early-stage evaluation include:
1. Frequent changes in the system, requiring high flexibility and reuse.
2. Uncertainty in delays, necessitating sensitivity analysis.
3. Need for quick macro models to evaluate possible alternatives.
4. Need for detailed models to validate and evaluate the chosen solution.

We focus on points 1, 2, and 4, while an example of point 3 can be found in [8]. Points 3 and 4 are closely related, as it is important to ensure consistency between macro and detailed models. To our knowledge, there are few attempts along this line.

We adopt a stochastic approach using Stochastic Well-formed Nets (SWN), a colored extension of Generalized Stochastic Petri Nets (GSPN). GSPN and SWN allow exponentially distributed delays, and many tools also support non-exponential distributions, especially for simulation. In our work, we assume that qualitative and quantitative models have the same behavior, which is satisfied if all distributions have infinite support.

Several tools support the definition and solution of GSPN and colored GSPN models, such as APNNtoolbox, GreatSPN, SMART, TimeNET, and UltraSAN. We use GreatSPN because it offers efficient SWN solution methods (both analytical and simulation) and additional tools like Multisolve, algebra, and GreatSPN-to-PROD.

Multisolve is a Java interface for planning and executing solution experiments, producing gnuplot and postscript files of the results. It is useful for performing sensitivity analysis. The algebra tool composes SWN models over immediate and timed transitions, and places, allowing for frequent changes and reuse. Validation of Stochastic Petri Nets is supported by computing structural properties, but fewer properties are available for SWN. GreatSPN provides limited state space examination, especially for SWN.

PROD is a tool for defining and validating place/transition nets and Predicate/transition (Pr/T) nets. It allows the construction and inspection of the reachability graph, verifying paths and testing propositional and temporal logic formulae. GreatSPN-to-PROD translates GSPN and SWN nets into algebraic nets in PROD format, enabling the check of common net properties.

The case study is a software mechanism called distributed synchronization (DS), developed within the EEC projects TIRAN and DepAuDE. DS synchronizes user tasks over multiple levels, with both tasks and DS distributed over different nodes to tolerate crashes. We focus on the validation and evaluation process, emphasizing the combined use of evaluation and validation from the early stages of design.

## 2. The DS Mechanism

Distributed Synchronization (DS) is a software mechanism that allows tasks to synchronize on certain activities across different levels. Key aspects include:
- Tasks and DS execute on a distributed architecture.
- Participants vary by level.
- Task failures should not block other waiting tasks.

DS is specified as a UML class with a DSTable attribute and two methods: one for checking synchronization and one for updating the table. The DSTable tracks task states for each level, with possible values including Not Reached, Reached, Not Available, Restarted, and Last Reached. State changes are described by automata, and sequence diagrams show specific execution paths.

## 3. The Petri Net Model of the DS

The basic SWN component models for DS include:
- **Tasks**: User tasks requiring synchronization.
- **Backbone**: Models fault and repair.
- **DS**: Distributed synchronization (based on Figure 2).
- **Check Synch**: Method for checking synchronization.
- **DStab**: DS table (based on Figure 1).

All SWN models share the definition of two basic color classes, T and L. T represents tasks, and L represents levels. Each model is described in isolation and then composed to form the complete SWN model. Composition operators include superposition over places and transitions based on labels. Synchronizing transitions and communicating places are labeled accordingly.

Figure 3(a) models the user tasks, where each task performs activities independently and sends a "READY" message to the DS through a mailbox. When synchronization is reached, an acknowledgment is sent back. Task failure and restart are modeled by timed transitions. The model interacts with the backbone and DS through transition and place labels. The initial marking indicates that tasks t1 and t2 are working to reach level l1. The model is also interfaced with the DStab model.

---

This optimized version aims to improve clarity, coherence, and professionalism, making the content more accessible and easier to understand.