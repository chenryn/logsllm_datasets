61
第五章 Android 取证
5. 现在，我们可以简单地使用 cp 和 find ，以便将其复制到 BackupDBS 目录
find . -name "*.db" -type f -exec cp {} /mnt/sdcard/BackupDBS \;
6. 现在，如果我们查看 /mnt/sdcard 下的 BackupDBS 目录，我们的所有数据库都已成功复制
到此位置。
62
第五章 Android 取证
7. 压缩并拉取文件。 现在，在同一位置，我们可以使用 tar 工具创建一个压缩包，并使
用 。
adb pull
tar cvf backups.tar BackupDBS/
8. 然后，从系统中，我们可以简单地像这样拉取它。 此方法也可以用于通过
在 和 文件夹中查找文件类型 ，来从手机中拉取所
/data/app /data/app-private .apk
有 文件。
.apk
9. 如果我们仔细看一看，在我们的 backups.tar 中，还有一个名为 msgstore.db 的
WhatsApp 应用程序的数据库。 让我们继续分析和研究数据库内部的内容。 为此，我们
需要首先解压我们刚才拉取的 归档文件。
tar
tar -xvf backups.tar
10. 现在，为了分析名为 msgstore.db 的 WhatsApp 的 SQLite 数据库，我们可以下载并使用
任何 SQLite 浏览器。 对于本书，我们使用 SQLite 数据库浏览器，可以
从 下载。
http://sourceforge.net/projects/sqlitebrowser/
11. 现在，如果我们在 SQLite 数据库浏览器中打开 msgstore.db 文件并访问浏览器数据，我
们可以在 SQLite 浏览器中看到我们的所有 WhatsApp 对话。 在以下截图中，我们可以
看到在 SQLite 数据库浏览器中打开的 msgstore.db ，它显示 WhatsApp 应用程序的所有
63
第五章 Android 取证
聊天对话：
5.7 使用 logcat 记录日志
Android logcat 有时在取证调查期间很有用。 它包含在电话以及收音机上执行的所有活动的
日志。 虽然不完整，它可以帮助调查员了解设备中发生了什么。
为了捕获和保存 logcat 转储文件，我们可以简单地使用 adb logcat 并将输出保存到一个文
件，稍后我们可以分析它。
adb logcat > logcat_dump.log
我们还可以使用 以更加详细和有用的方式获取日志。 例如，我们可以通过指定 参
logcat -b
数和 来获取收音机日志。 标志用于显示缓冲区（如收音机或事件）的 logcat。
radio -b
标志用于控制输出格式，它代表 （详细），也可以
-v verbose
是 ， ， ， ， ， 或 。 除了 ，我们还可以
time brief process tag raw threadtime long -v
使用 （调试）， （信息）， （警告）或 （错误）。
-d -i -w -e
adb logcat -v time -b radio -d
我们还可以使用其他工具，如 ，它将打印内核消息，以及 ，它将打印设备的
dmesg getprop
属性：
adb shell getprop
XDA 开发人员成员 rpierce99 还提供了一个应用程序，用于自动捕获来自 logcat 和其他相关
来源的信息，这些信息可以从 下载并使用。
https://code.google.com/p/getlogs/
64
第五章 Android 取证
5.8 使用备份功能来提取应用数据
Android 从 4.0 起引入了使用 adb 的备份功能。 此功能可用于创建应用程序的备份及其整个
数据。 这在取证上非常有用，因为取证员可以捕获应用程序及其整个数据。 请参阅以下步
骤：
1. 这可以通过在终端中执行 adb backup 命令，后面附带应用程序的包名来完成。 如果我们
不知道应用程序的准确包名称，我们可以使用 列出所有包，然后过滤应用程序名称。
pm
2. 执行此操作的另一种方法是使用 pm list package 命令，其中 -f 标志指定要在包名称中
查找的字符串。
3. 接下来，我们可以简单地使用应用程序的包名称，来备份任何我们需要的应用程序。
adb backup [package name] -f [destination file name]
4. 目标文件将以文件扩展名 .ab （Android 备份）存储。 在这里，我们采集了 WhatsApp
应用程序的备份。
5. 一旦我们运行命令，它将暂停，并要求我们在设备上确认，如下面的截图所示：
65
第五章 Android 取证
6. 在这里，我们需要选择 Back up my data （备份我的数据）选项，并且还可以为备份指定
加密密码。 一旦备份过程完成，我们将获得 文件。
whatsapp_backup.ab
7. 接下来，我们需要解压此备份，以便从 .ab 文件获取数据库。 为此，我们将使
用 和 创建一个 文件，然后我们可以解压它。
dd openssl .tar
8. 现在，由于我们获得了 .tar 文件，我们可以使用 tar xvf 简单解压它。
66
第五章 Android 取证
9. 一旦它解压完成，我们可以访问 apps/[package-name] 下的 db 文件夹，来获取数据库。
这里，程序包名称为 。
com.whatsapp
让我们快速使用 来查看 文件夹中的所有可用文件。 正如你可以看到的，我们拥
ls -l db
有 msgstore.db 文件，它包含 WhatsApp 对话，我们已经在上一节中看到了。
总结
在本章中，我们分析了执行取证的不同方法，以及各种工具，我们可以使用它们来帮助我们
进行取证调查。 此外，我们了解了一些我们可以执行的手动方法，来从设备中提取数据。
在下一章中，我们将深入 SQLite 数据库，这是 Android 渗透测试的另一个要素。
67
第五章 Android 取证
68
第六章 玩转 SQLite
第六章 玩转 SQLite
作者：Aditya Gupta
译者：飞龙
协议：CC BY-NC-SA 4.0
SQLite 是一个开源数据库，具有许多类似于其他关系数据库（如 SQL）的功能。 如果你是应
用程序开发人员，你可能还会注意到 SQLite 查询看起来或多或少像 SQL 一样。 在 Android
中选择 SQLite 的原因是其内存占用较低。 Android 开发者喜欢 SQLite 的原因是它不需要设
置或配置数据库，并且可以在应用程序中直接调用。
6.1 深入理解 SQLite
正如我们在上一章中看到的，SQLite 数据库默认在 Android 中存储
在 /data/data/[package name]/databases/ 位置，扩展名为 .db 文件（在 Android 的大多数情
况下） 。 现在，在我们更深入地探讨 SQLite 漏洞之前，我们应该清楚地了解 SQLite 语句和
一些基本的命令
分析使用 SQLite 的简单应用
在这里，我们有一个基本的 Android 应用程序，它支持用户的登录和注册，并在后端使用
SQLite。 遵循以下步骤：
1. 让我们运行应用程序并分析它创建的数据库。 你可以
从 下载漏洞应用程序。 用于创建数据库的代码示
http://attify.com/lpfa/vulnsqlite.apk
例如以下屏幕截图所示：
2. 这意味着我们有七个字段，名称为 id ( integer ), firstName ( text ), lastName
( text ), email ( text ), phoneNumber ( text ), username ( text ), 和 password
( text )。 tableName 字段之前叫做 USER_RECORDS 。
3. 让我们现在访问 adb shell 并检查数据库。我们可以使用 SQLite 浏览器访问 SQLite 文
件，我们在上一章中使用了它，或者我们可以使用命令行工具 。对于整个这一
sqlite3
章，我们将使用名为 的命令行工具，它存在于大多数 Android设 备中。如果你
sqlite3
的 Android 设备中不存在它，你可以使用 Play 商店中提供的 BusyBox 应用程序进行安
装。
69
第六章 玩转 SQLite
4. 所以，让我们继续分析数据库。我们需要做的第一件事是使用 adb shell 进入设备。
5. 下一步是访问 /data/data/[package-name] 目录的位置并查找 databases 文件夹。一旦我
们进入了数据库文件夹，我们会注意到各种文件。现在，SQLite 数据库的文件格式大多
是前面提到的 ，但它们也可以为 ， 或开发人员在创建应用程序
.db .sqlite .sqlitedb
时指定的任何其他扩展名。如果你记得上一章中的练习，在查找数据库文件时，这正是
寻找其他扩展名的时候，例如 。
.sqlite
6. 现在，我们可以使用以下命令使用 sqlite3 打开数据库：
sqlite3 [databasename]
在这种情况下，由于数据库名称是 ，我们可以简单地输
weak-db
入 打开它。 我们也可以在给定时间使用 打开多个数据
sqlite3 vulnerable-db sqlite3
库。 要查看加载的当前数据库，我们可以键入 命令列出我们当前的数据库，
.databases
如下面的截图所示：
7. 现在，我们打开数据库时要做的第一件事是查看数据库中包含的表。 表的列表可以
由 显示，如以下屏幕截图所示：
.tables
正如我们在这里可以看到的，有两个名称为 和 的表。 由
USER_RECORDS android_metadata
于我们对 更感兴趣，我们将首先继续查看表中的各个列，稍后我们将转储
USER_RECORDS
列字段中的数据。 为了查看有关表的更多信息，例如列字段，我们可以使用 命
.schema
令，如下面的截图所示：
8. 接下来我们需要做的是通过执行 SELECT 查询来查看列字段中的数据。
注意
另一个需要注意的重要事情是，SQL 中使用的大多数查询对 SQLite 仍然有效。
9. 使用应用程序并为数据库填充一些信息。 接下来，为了查询并查看 USER_RECORDS 表，通
过通配符 指定所有内容，我们可以使用以下命令：
*
SELECT * from USER_RECORDS;
70
第六章 玩转 SQLite
运行上述命令将产生类似于如下所示的输出：
现在， 也给了我们改变输出格式，查看额外信息以及所需信息的自由。 所以，
sqlite3
让我们继续，将查看 设置为 ，将 设置为 。
mode column header on
10. 让我们再次运行相同的查询并检查输出，如下面的截图所示：
还有其他可用的选项可用于渗透测试。 其中之一是 命令。 这会自动将之后的
.output
SQL 查询的输出保存到指定的文件，我们可以稍后拉取，而不是在屏幕上显示。 一旦我
们将输出保存在文件中，并且想返回屏幕显示模式，我们可以使用 命令并将其
.output
设置为 ，这将再次在终端上显示输出 。
stdout
在SQLite中， .dump 将创建一个列表，包含从数据库创建到现在为止所执行的所有 SQL
操作。 以下是在当前数据库上运行的命令的输出的屏幕截图：
此外，所有这些操作都可以从终端执行，而不是进入 shell，然后启动 二进制。
sqlite3
我们可以直接向 adb shell 传递我们的命令并获得输出，如下面的截图所示：
6.2 安全漏洞
Web 应用程序和移动应用程序中最常见的漏洞之一是基于注入的漏洞。 如果按原样使用用户
提供的输入，或动态 SQL 查询的保护很少并且不足够，SQLite 也会产生注入漏洞。
让我们来看看用于查询应用程序中的数据的SQL查询，如下所示：
71
第六章 玩转 SQLite
String getSQL = "SELECT * FROM " + tableName + " WHERE " +
username + " = '" + uname + "' AND " + password + " = '" + pword +
"'";
Cursor cursor = dataBase.rawQuery(getSQL , null
在前面的 SQL 查询中， uname 和 pword 字段从用户输入直接传递到 SQL 查询中，然后使