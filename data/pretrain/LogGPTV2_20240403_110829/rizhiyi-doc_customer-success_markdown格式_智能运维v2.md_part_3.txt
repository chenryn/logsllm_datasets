    1.  ### 数据对接格式说明
智能运维的使用依赖指标数据，使用时需要将指标数据对接至智能运维的topic。
智能运维默认topic名称lynxee_kpis，可通过kpi_monitor模块中kafka.topic参数进行名称调整。
写入智能运维topic的指标数据要求固定格式，智能运维指标数据标准格式如下：
{
\"operator\": \"beyond\",
\"token\": \"abc\",
\"service\": \"kafka\",
\"metric\": \"process.cpu\",
\"endpoint\": \"192.168.1.128\",
\"tags\": {
\"kpiname\": \"cpu_usage\"
},
\"timestamp\": \"1491075420\",
\"value\": \"29.0\"
}
字段含义：
-   operator：操作者
-   token：平台token
-   service：服务名称
-   metric：指标名称
-   endpoint：设备id
-   tags：附加信息（可选）
-   timestamp：时间戳
-   value：指标数据值
    1.  ### 数据对接方式
指标数据对接智能运维topic主要有以下两种方式：
**历史指标数据对接：**
-   方式一：使用SPL统计后下载到本地的指标数据集-\>heka-\>字段提取-\>回写到三方topic-\>数据工厂-\>智能运维topic
-   方式二：使用脚本+日志易API批量采集的指标数据集-\>数据工厂-\>智能运维topic
**实时指标数据对接：**
-   方式一：数据工厂-\>智能运维topic
#### 历史数据对接
本地目录文件对接数据工厂
通过数据工厂读取目录下日志文件，对历史指标数据进行清洗、保留，达到符合智能运维固定标准格式的要求，对接至智能运维。
![](media/image20.png){width="5.768055555555556in"
height="2.1305555555555555in"}
示例步骤：
1.  通过脚本从日志易API获取定时任务的历史数据，按天分割文件输出到本地目录，输出json格式的指标项
2.  使用Field Remover处理组件保留text字段
3.  使用Kafka Producer输出组件将定时获取的指标数据写入智能运维topic
文本tail对接数据工厂
1.  通过heka采集历史日志文件，利用解析规则对指标数据进行清洗，达到符合智能运维固定格式字段要求(部分字段也可利用数据工厂做增减操作)，将清洗好的数据回写至自定义topic，最后通过数据工厂对接至智能运维topic（lynxee_kpis）。
![](media/image21.png){width="5.768055555555556in"
height="2.526388888888889in"}
示例步骤：
1.  通过脚本从日志易API获取定时任务的历史数据，按天分割文件输出到数据工厂所在的本地目录，输出json格式的指标项
2.  使用File Tail输入源组件获取本地的指定路径下的文本内容
3.  使用Field Remover处理组件保留text字段
4.  使用Kafka Producer输出组件将定时获取的指标数据写入智能运维topic
#### 实时数据对接
1.  通过heka采集日志，利用解析规则对指标数据进行清洗，达到符合智能运维固定格式字段要求(部分字段也可利用数据工厂做增减操作)，将清洗好的数据回写至自定义topic，最后通过数据工厂对接至智能运维topic（lynxee_kpis）。
![](media/image22.png){width="5.768055555555556in"
height="2.3368055555555554in"}
日志易API对接数据工厂
通过数据工厂利用日志易API获取指标数据并对数据进行清洗、保留，达到符合智能运维固定标准格式的要求，对接至智能运维。
![](media/image23.png){width="5.06048665791776in"
height="2.4754101049868766in"}
![](media/image24.png){width="5.768055555555556in"
height="1.7680555555555555in"}
示例步骤：
1.  使用HTTP
    Client输入源组件调用日志易API取最近一次的定时任务统计数据，设置轮询时间为1分钟
2.  使用Expression
    Evaluator处理组件添加自定义字段，如operator、token、service、metric、tags
3.  使用Field Remover处理组件删除其他字段，只保留需要的字段
4.  使用Kafka Producer输出组件将定时获取的指标数据写入智能运维topic
Lynxee数据对接需要使用数据工厂HTTP Client、Directory、File
Tail、Expression Evaluator、Field Remover、Kafka
Producer等类型的输出组件，部分可参考以下示例，其他可参考数据工厂专题手册。
### 实时数据对接示例
#### 单指标数据通过API方式进行对接
![](media/image25.png){width="5.768055555555556in"
height="1.4145833333333333in"}
1.将正确的API请求url放置在HTTP Client组件Resource URL中。
![](media/image26.png){width="5.768055555555556in"
height="2.932638888888889in"}
2.注意认证类型（Authentication Type
）选项如果为None，需要将账密信息加到Headers配置项中，认证类型（Authentication
Type ）选项如果为Basic，需要将账密信息添至Credentials中。
![](media/image27.png){width="5.719444444444444in"
height="2.3229166666666665in"}
![](media/image28.png){width="5.768055555555556in"
height="2.1444444444444444in"}
3.利用Field
Renamer组件将API返回的json数据中字段进行重命名，如第一步无问题，此处可以看到并选择相关字段。
![](media/image29.png){width="5.768055555555556in" height="2.575in"}
4.利用Expression
Evaluator组件将上一步字段进行保留，并新增智能运维固定格式相关字段。
![](media/image30.png){width="5.768055555555556in"
height="2.6979166666666665in"}
5.利用Kafka
Producer组件将清洗后符合格式的字段对接至智能运topic(lynxee_kpis)。
![](media/image31.png){width="5.768055555555556in"
height="2.6493055555555554in"}
#### 多指标数据通过API方式进行对接
多指标数据通过API方式对接数据工厂流程如下所示。
![](media/image32.png){width="5.768055555555556in"
height="1.8076388888888888in"}
1.将正确的API请求url放置在HTTP Client组件Resource URL中。
![](media/image33.png){width="5.768055555555556in"
height="2.459722222222222in"}
2.利用Expression
Evaluator组件将API获取的指标数据进行重命名并新增固定格式要求字段。
![](media/image34.png){width="5.768055555555556in" height="2.64375in"}
3.在多个指标的情况下，新增Expression
Evaluator组件对另一类指标数据重命名并新增固定格式要求字段。
![](media/image35.png){width="5.768055555555556in"
height="2.6694444444444443in"}
4.利用Field Remover组件将符合标准格式的指标字段进行保留。
![](media/image36.png){width="5.768055555555556in"
height="2.0756944444444443in"}
5.利用Kafka
Producer组件将清洗后的指标数据对接至智能运维topic(lynxee_kpis)。
![](media/image37.png){width="5.768055555555556in"
height="2.683333333333333in"}
### 历史数据对接示例
heka采集回写自定义topic，通过数据工厂对接至智能运维的流程如下：
![](media/image38.png){width="5.768055555555556in"
height="1.9638888888888888in"}