### Bug Report: Inheritance and Dependency Injection in Angular Components

**Current Behavior**

I am attempting to implement a basic inheritance structure in my Angular application. The goal is to have an abstract class `AbstractForm` that can be extended by other components, such as `AbcComponent`, without needing to redefine the constructor in each child class.

Here is the code for the abstract class:

```typescript
export abstract class AbstractForm {
  abstract data: any;

  constructor(protected dialog: DialogService) {}
}
```

And here is the component that extends it:

```typescript
@Component({
  selector: 'abc',
  template: '...'
})
export class AbcComponent extends AbstractForm {
  data = {};
}
```

However, when I try to run the application, I encounter the following error:

```
Uncaught (in promise): Error: Can't resolve all parameters for AbcComponent: (?).
Error: Can't resolve all parameters for AbcComponent: (?).
```

This error occurs even though the Angular Language Service and WebStorm do not report any issues. The application builds successfully with both `ng serve` and `ng build --prod`, but the error appears when the app is launched in the browser.

Additionally, if I decorate the `AbstractForm` class with `@Component({})`, I get another error from the Angular Language Service:

```
Error:(9, 2) Angular: Component 'AbstractForm' is not included in a module and will not be available inside a template. Consider adding it to a NgModule declaration.
```

I do not want to add the abstract class to a module because it is only meant to be an abstraction and will never be used directly in a template.

**Expected Behavior**

I would like to avoid redefining the constructor in each child component that extends `AbstractForm`. Specifically, I want to be able to use the existing constructor defined in the abstract class without having to call `super(dialog)` in the child class.

**Minimal Reproduction of the Problem with Instructions**

The issue can be reproduced with the following steps:
1. Create an abstract class `AbstractForm` with a constructor that takes a `DialogService` dependency.
2. Create a component `AbcComponent` that extends `AbstractForm` and does not define its own constructor.
3. Run the application using `ng serve`.

Unfortunately, I cannot reproduce this issue on Plunker due to the nature of the problem.

**Motivation / Use Case for Changing the Behavior**

The motivation for this change is to reduce code duplication. It is tedious and error-prone to have to define the same constructor in every component that extends `AbstractForm`, especially when no additional dependencies are needed.

**Environment Information**

- **Operating System:** Windows 10
- **IDE:** WebStorm 2017.1.3
- **Angular Version:**
  - @angular/cli: 1.0.2
  - @angular/common: 4.1.1
  - @angular/compiler: 4.1.1
  - @angular/core: 4.1.1
  - @angular/forms: 4.1.1
  - @angular/http: 4.1.1
  - @angular/platform-browser: 4.1.1
  - @angular/platform-browser-dynamic: 4.1.1
  - @angular/router: 4.1.1
  - @angular/cli: 1.0.2
  - @angular/compiler-cli: 4.1.1
  - @angular/language-service: 4.1.1
- **Node Version:** 7.7.2
- **Browser:** All
- **Language:** TypeScript 2.3

Thank you for your assistance!