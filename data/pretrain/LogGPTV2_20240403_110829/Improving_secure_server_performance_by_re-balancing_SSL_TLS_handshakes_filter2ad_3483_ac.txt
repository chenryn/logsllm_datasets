r
e
v
A
 12
 10
 8
 6
 4
 2
 0
1024 RSA, c*k=144
1536 RSA, c*k=160
2048 RSA, c*k=176
 0
 5
 10
 20
 15
 30
RSA-CA2 parameter k
 25
 35
 40
 45
Figure 3: CA-RSA decryption time (msec) when
varying parameters c and k
tance of these operations heavily depends upon the type of
workload processed by the SSL server. For example, large
workloads place greater importance upon the server’s CPU
(as large data payloads are encrypted) while the signiﬁcance
of expensive RSA computations is reduced.
We choose to focus on the Amazon web server workload
described in [21], which models the behavior of popular e-
commerce sites whereby only the ﬁnal web pages contain-
ing billing and shipping information are encrypted. The
relatively small workload of 7 KB places a signiﬁcant im-
portance upon the cost of the RSA private-key operation,
which in this case accounts for approximately 58% of the
overall handshake computational load. Depending on the
speedup of RSA decryptions, one can measure the maximum
achievable gain in terms of SSL transactions per second. If
there existed an inﬁnitely fast RSA processor that spent
zero time on decryptions, one could obtain an improvement
factor of 2.38 ( 1
0.42 ) in the number of SSL transactions that
can be processed per second by a web server for the speciﬁed
workload. As for the RSA speed-ups of 11.3, 15.8 and 19.1
achieved through the use of CA-RSA for 1024-, 1056- and
2048-bit moduli, the expected factor of improvement in SSL
transactions is 2.12, 2.19 and 2.22, respectively.
Although CA-RSA reduces the computation load at the
it introduces certain computation and bandwidth
server,
costs at the clients.
• Computation: A client with a computing environ-
ment described in section 3.4.1 would incur added com-
putational costs of approximately 21.9, 66 and 150.9
msecs when computing the elements of vector Z for
1024-, 1536- and 2048-bit RSA keys, respectively. We
believe that this added computation cost is negligible
and acceptable for most clients. For weak computa-
tional devices oﬀ-loading techniques such as the one
described in [22] could be used.
• Bandwidth: The bandwidth overhead associated with
the client key exchange message now includes the vec-
tor Z. It contains k |n|-bit elements, where n is the
RSA modulus. Recall that, with plain RSA, the client
only sends y = xe (mod n). Therefore, with k = 2
(chosen for optimal performance), the resulting extra
bandwidth translates into |n| bits. This corresponds
to less than one ethernet frame (1500 bytes)6. Fur-
thermore, adding such a small number of bits in the
SSL handshake does not have a signiﬁcant impact on
performance. In fact, as shown in [21], SSL is purely
CPU bounded and optimizations intended to reduce
network bandwidth have little eﬀect on server through-
put.
Note that one reasonable strategy is to use our re-balancing
technique only when the server gets overloaded, and use reg-
ular SSL otherwise. In this case, the previously described
extra computation and bandwidth costs only occurs occa-
sionally.
4. SSL SPEEDUP AND DOS PROTECTION
Server overload is either due to an on-slaught of legit-
imate client requests or a Denial-of-Service (DoS) attack.
A server can become swamped under a ﬂood of simultane-
ous of closely spaced requests, each requiring it to perform
some costly computation, e.g., decrypt a key purportedly en-
crypted by a client. This makes SSL servers prime targets
of DoS and DDoS attacks.
The protocol described in section 3 increases the num-
ber of SSL connections that the server can handle by re-
balancing the computations between the server and client.
This makes the job of a potential DoS attacker more dif-
ﬁcult, but a resourceful attacker can still achieve his goal
by increasing his resources accordingly. In addition to CA-
RSA, which helps the server by reducing its computational
load, we need a mechanism that that also makes the job of
the attackers more diﬃcult.
We view the DoS menace as being two-fold: (1) the ad-
versary overwhelms the server with a sheer number of gra-
tuitous service requests and, (2) the adversary over-exerts
the server by forcing it to perform many heavy-weight cryp-
tographic operations. Although client puzzles alleviate both
problems (see section 4.1), they do not completely solve ei-
ther. Arguably, there might be simply no way to solve the
former since a determined and resourceful adversary will al-
ways be able to ﬂood the server with a storm of requests
(even if they are quickly ﬁltered out). On the other hand, a
computationally powerful adversary can eﬃciently dispense
with the minor “inconvenience” posed by puzzles and simi-
lar techniques; such an adversary can still force the server to
perform many expensive cryptographic operations and thus
render the server unavailable to legitimate clients.
An attacker who attempts to incapacitate a secure web
server needs only to initiate as many SSL handshake re-
quests per second as the number of RSA decryptions the
server can perform per second. (For example, on our test
server, one RSA decryption takes approximately 7 msec,
thus, it can perform at most 142 decryptions per second.
However, higher-end web servers can perform up to 4, 400
RSA decryptions per second [23].) The feasibility of such
DoS attacks is partly because a client can request the server
to perform many RSA decryptions without performing any
signiﬁcant amount of work itself. A possible remedy is to:
(1) ask the client to perform a certain amount of additional
work prior to triggering the server to decrypt, and/or (2)
6On a related note, the vector D needs to be added to the
server’s public-key certiﬁcate. This can be achieved by in-
cluding it as an extension ﬁeld in X.509v3 format.
speed up the decryption operation on the server side such
that a DoS attack requires greater resources. Our solution
combines the above two properties:
it requires a client to
perform additional computation which then lessens the load
on the server, thus allowing it to perform more RSA decryp-
tions and accept/process more incoming connections.
4.1 Client Puzzles and SSL
Juels and Brainard introduced the use of client puzzles
as a cryptographic countermeasure to protect against DoS
attacks [24]. Dean and Stubbleﬁeld subsequently proposed
using client puzzles to speciﬁcally defend web servers run-
ning the SSL protocol [25]. Their scheme requires a client
to solve a given puzzle before being able to establish an SSL
session with a server. This forces the client to perform a
certain amount of computational work prior to requesting
the server to carry out expensive operations (such as RSA
decryptions). That way, a DoS attack becomes more com-
putationally demanding to execute as clients can no longer
freely trigger RSA decryptions. The type of client puzzle
they use consists of inverting a hash function when given
the hash digest and a certain portion of the pre-image.
The addition of client puzzles does not alter the message
ﬂow in the SSL handshake protocol, but does require two
of the messages to be extended. After the client has sent
its client hello message, the server chooses a random a-bit
value s and inputs it to a cryptograhic hash function.
It
then includes the hash digest t = hash(s) along with the b
ﬁrst bits of s (where b < a) to the client in the server hello
message. Using these b bits, the client solves the “client
puzzle” via brute-force and ﬁnds a value s’ that hashes to the
desired t. With knowledge of the ﬁrst b pre-image bits, the
client only needs to attempt approximately 2a−b candidate
values before ﬁnding a valid solution s’ that satisﬁes t =
hash(s’).
The client then includes s’ in its client key exchange mes-
sage. Only if s’ veriﬁes - i.e, it is of correct length and its
hash output is t - will the server proceed with the SSL hand-
shake and decrypt the encrypted session key submitted by
the client.
The computational cost of a hash computation is almost
negligible when compared to an RSA decryption (a hash
is about 3 to 4 orders of magnitude faster to compute), so
the addition of puzzle veriﬁcation step adds a very minor
server side overhead. The amount of work needed to be
done by the client in order to solve the puzzle depends upon
its computing resources and, more importantly, the number
of unknown bits in the pre-image value sent by the server.
The addition of client puzzles to the SSL handshake pro-
tocol has the advantage of making DoS attacks more elabo-
rate to carry out. A single client machine is no longer able
to easily overload an SSL server by sending consecutive SSL
initiation requests, as it would need to solve the appropriate
client puzzles, thereby limiting the number of valid requests
it could send per second. A more noticeable side eﬀect of
utilizing client-puzzles is that client browser software needs
to be modiﬁed to make it work with the puzzles during the
SSL handshake protocol.
4.2 Combining Client Puzzles and CA-RSA
We now sketch out a way of combining client puzzles and
CA-RSA. When a client initiates a session with a secure
web server, it receives di values (included in the server’s

Client
SSL Server
rc, cipher-specs
client hello
−−−−−−−−−−−−−−−−−−−−−−−→
server hello
←−−−−−−−−−−−−−−−−−−−−−−
rs, cipherspecs
s ∈R {0, 1}a, t = hash(s)
rs, t, s(b), cipherspecs
s s.t. t = h(s)
x ∈R {0, 1}48
k = f (x, rc, rs)
y = xe (mod n)
zi = ydi (mod n)
Z = (z1, ..., zk), s
client key exchange
−−−−−−−−−−−−−−−−−−−−−−−→
verify t = h(s)
i=1 zfi
(mod p)
i=1 zgi
(mod q)
x = yd = Mpnp + Mqnq (mod n)
k = f (x, rc, rs)
Mp = Qk
Mq = Qk
i
i
server ﬁnish
←−−−−−−−−−−−−−−−−−−−−−−
Figure 4: Incorporating CA-RSA together with Client Puzzles into the SSL handshake protocol
certiﬁcate) and a puzzle as part of the SSL handshake. The
client solves the puzzle, computes zi as required by CA-RSA
and returns these values, along with the puzzle solution,
to the server. If the server successfully veriﬁes the puzzle
solution, it performs the CA-RSA partial decryption needed
to compute the session key. Figure 4 gives an overview of
the protocol. The notation s(b) refers to the ﬁrst b bits of the
pre-image value s. A client response without a valid puzzle
solution is simply ignored.
Client Puzzle
CA-RSA
 10000
 1000
 100
 10
)
c
e
s
m
(
e
m
i
t
 1
 10
 12
 14
 16
 18
 20
puzzle size (b)
Figure 5: Comparing client computational cost of
client puzzles and CA-RSA
Of course, a malicious client can solve the puzzle and
still send bogus zi’s to the server. However, the amount
of wasted eﬀort is much less – 11 times smaller for 1024-bit
RSA keys – than in case when only client puzzles are used

(as in [25]).
Furthermore, the extra work resulting from CA-RSA by