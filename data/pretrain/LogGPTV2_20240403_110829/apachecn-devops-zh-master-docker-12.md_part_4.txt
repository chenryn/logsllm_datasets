[INFO]     * There are currently: 4 images
[INFO] 6.5 - Avoid container sprawl
[INFO]     * There are currently a total of 8 containers, with 4 of them currently running
```
# DockerSwarm 配置
本节包括`[PASS]`信息，因为我们没有在主机上启用 Docker Swarm:
```
[PASS] 7.1 - Ensure swarm mode is not Enabled, if not needed
[PASS] 7.2 - Ensure the minimum number of manager nodes have been created in a swarm (Swarm mode not enabled)
[PASS] 7.3 - Ensure swarm services are binded to a specific host interface (Swarm mode not enabled)
[PASS] 7.5 - Ensure Docker's secret management commands are used for managing secrets in a Swarm cluster (Swarm mode not enabled)
[PASS] 7.6 - Ensure swarm manager is run in auto-lock mode (Swarm mode not enabled)
[PASS] 7.7 - Ensure swarm manager auto-lock key is rotated periodically (Swarm mode not enabled)
[PASS] 7.8 - Ensure node certificates are rotated as appropriate (Swarm mode not enabled)
[PASS] 7.9 - Ensure CA certificates are rotated as appropriate (Swarm mode not enabled)
[PASS] 7.10 - Ensure management plane traffic has been separated from data plane traffic (Swarm mode not enabled)
```
# 总结 Docker 工作台
正如您所看到的，对您的 Docker 主机运行 Docker Bench 是一种更好的方式，可以了解您的 Docker 主机如何与 CIS Docker Benchmark 竞争；这当然比手动完成 230 页文档中的每一个测试要容易管理得多。
# 第三方安全服务
在我们完成本章之前，我们将了解一些可用的第三方服务，以帮助您评估映像的漏洞。
# Docker
**Quay** ，由红帽购买的 CoreOS 提供的影像注册服务，类似于 Docker Hub/Registry；一个不同之处是，Quay 实际上是在推送/构建每个映像后对其进行安全扫描。
您可以通过查看所选映像的存储库标签来查看扫描结果；在这里，您将看到“安全扫描”栏。从下面的截图中可以看到，在我们创建的示例映像中，没有任何问题:
![](img/922c1364-af21-4585-8b54-82931a58942d.png)
点击**通过**将带您更详细地了解映像中检测到的任何漏洞。由于目前没有漏洞(这是一件好事)，这个屏幕没有告诉我们太多。然而，点击左侧菜单中的**包裹**图标，我们会看到扫描发现的包裹列表。对于我们的测试映像，它发现了 29 个没有漏洞的包，所有这些包都显示在这里，同时还确认了包的版本，以及它们是如何引入映像的:
![](img/bd3ddf6d-d5d3-46f8-9766-20686840a568.png)
您还可以看到，Quay 正在扫描我们的公开映像，该映像托管在 Quay 提供的免费开源计划中。Docker 上的所有计划都标配了安全扫描。
# 克莱尔
**Clair** 是一个来自 CoreOS 的开源项目。本质上，它是一种服务，为托管版本的 Quay 和商业支持的企业版本提供静态分析功能。
它通过创建以下漏洞数据库的本地镜像来工作:
*   Debian 安全漏洞跟踪器:[https://security-tracker.debian.org/tracker/](https://security-tracker.debian.org/tracker/)
*   Ubuntu CVE 跟踪器:[https://launch pad . net/Ubuntu-CVE 跟踪器/](https://launchpad.net/ubuntu-cve-tracker/)
*   红帽安全数据:[https://www.redhat.com/security/data/metrics/](https://www.redhat.com/security/data/metrics/)
*   甲骨文 Linux 安全数据:[https://linux.oracle.com/security/](https://linux.oracle.com/security/)
*   alpine secdb:https://git . alpine linos . org/cgit/alpine-secdb/
*   NIST nvd:[https://nvd . NIST . gov/](https://nvd.nist.gov/)
一旦镜像了数据源，它就装载映像的文件系统，然后对已安装的包执行扫描，将它们与前面数据源中的签名进行比较。
克莱尔不是一个简单的服务；它只有一个 API 驱动的接口，默认情况下没有 Clair 附带的花哨的基于 web 或命令行的工具。原料药的文件可以在[https://coreos.com/clair/docs/latest/api_v1.html](https://coreos.com/clair/docs/latest/api_v1.html)找到。
安装说明可以在项目的 GitHub 页面[https://github.com/coreos/clair/](https://github.com/coreos/clair/)找到。
此外，您可以在 https://coreos.com/clair/docs/latest/integrations.html 的集成页面上找到支持克莱尔的工具列表。
# 锚
我们要介绍的最后一个工具是**锚定**。这有几个版本；有基于云的产品和内部企业版本，两者都带有完整的基于网络的图形界面。有一个版本与 Jenkins 挂钩，还有开源命令行扫描器，这就是我们现在要看的。
这个版本是作为 Docker Compose 文件分发的，所以我们将从创建我们需要的文件夹开始，我们还将从项目 GitHub 存储库中下载 Docker Compose 和基本配置文件:
```
$ mkdir anchore anchore/config
$ cd anchore
$ curl https://raw.githubusercontent.com/anchore/anchore-engine/master/scripts/docker-compose/docker-compose.yaml -o docker-compose.yaml
$ curl https://raw.githubusercontent.com/anchore/anchore-engine/master/scripts/docker-compose/config.yaml -o config/config.yaml
```
现在我们已经具备了基础知识，您可以提取映像并启动容器，如下所示:
```
$ docker-compose pull
$ docker-compose up -d
```
在我们可以与 Anchore 部署交互之前，我们需要安装命令行客户端。如果您正在运行 macOS，那么您必须运行以下命令，如果您已经安装了`pip`，则忽略第一个命令:
```
$ sudo easy_install pip
$ pip install --user anchorecli
$ export PATH=${PATH}:${HOME}/Library/Python/2.7/bin
```
对于 Ubuntu 用户，您应该运行以下命令，如果您已经有了`pip`，这次将忽略前两个命令:
```
$ sudo apt-get update
$ sudo apt-get install python-pip
$ sudo pip install anchorecli
```
安装完成后，您可以运行以下命令来检查安装状态:
```
$ anchore-cli --u admin --p foobar system status
```
这将向您显示安装的整体状态；从你第一次启动到一切显示为`up`可能需要一两分钟:
![](img/6b81a2d0-bbcd-40e5-a5c7-b25b122f5a5d.png)
下一个命令显示了 Anchore 在数据库同步中的位置:
```
$ anchore-cli --u admin --p foobar system feeds list
```
正如您在下面的截图中看到的，我的安装当前正在同步 CentOS 6 数据库。这个过程可能需要几个小时；然而，对于我们的例子，我们将扫描一个基于 Alpine Linux 的映像，如图所示:
![](img/db3a369b-9f0b-46c6-9304-de864536aefe.png)
接下来，我们必须抓取映像进行扫描；让我们抓取一个旧的映像，如下所示:
```
$ anchore-cli --u admin --p foobar image add docker.io/russmckendrick/moby-counter:old
```
运行初始扫描需要一两分钟；您可以通过运行以下命令来检查状态:
```
$ anchore-cli --u admin --p foobar image list
```
过一会儿，状态应该从`analyzing`变为`analyzed`:
```
$ anchore-cli --u admin --p foobar image get docker.io/russmckendrick/moby-counter:old
```
这将向您显示映像的概述，如下所示:
![](img/85631f1e-3fd3-451f-930d-8f968078e110.png)
然后，您可以通过运行以下命令来查看问题列表(如果有):
```
$ anchore-cli --u admin --p foobar image vuln docker.io/russmckendrick/moby-counter:old os
```
![](img/41239fbd-01ca-4dee-a1f0-caf9d81769f0.png)
如您所见，列出的每个软件包都有当前版本、指向 CVE 问题的链接，以及修复报告问题的版本号的确认。
您可以使用以下命令删除锚定容器:
```
$ docker-compose stop
$ docker-compose rm
```
# 摘要
在本章中，我们介绍了 Docker 安全性的一些方面。首先，我们看一下在运行容器(相对于典型的虚拟机)时，在安全性方面您必须考虑的一些事情。我们看了优势和你的 Docker 主机，然后我们讨论了映像信任。然后，我们看一下可以用于安全目的的 Docker 命令。
我们启动了一个只读容器，这样我们就可以最大限度地减少入侵者在我们运行的容器中可能造成的任何潜在损害。由于并非所有应用都适合在只读容器中运行，因此我们研究了如何跟踪自映像启动以来对其所做的更改。当试图查看任何问题时，能够轻松发现运行时对文件系统所做的任何更改总是很有用的。
接下来，我们讨论了 Docker 的互联网安全中心指南。本指南将帮助您设置 Docker 环境的多个方面。最后，我们看了一下 Docker Bench Security。我们研究了如何让它启动和运行，并通过一个例子展示了输出是什么样子。然后我们分析了输出，看看这意味着什么。请记住应用涵盖的七个项目:主机配置、Docker 守护程序配置、Docker 守护程序配置文件、容器映像和构建文件、容器运行时、Docker 安全操作和 Docker Swarm 配置。
在下一章中，我们将了解 Docker 如何适应您现有的工作流，以及处理容器的一些新方法。
# 问题
1.  当启动一个容器时，我们如何使它的全部或部分成为只读的？
2.  每个容器应该运行多少个进程？
3.  根据 CIS Docker 基准检查 Docker 安装的最佳方法是什么？
4.  运行 Docker Bench 安全应用时，应该安装什么？
5.  对或错:Quay 只支持私人映像的映像扫描。
# 进一步阅读
更多信息请访问[https://www.cisecurity.org/](https://www.cisecurity.org/)网站；Docker 基准可以在[https://www.cisecurity.org/benchmark/docker/](https://www.cisecurity.org/benchmark/docker/)找到。