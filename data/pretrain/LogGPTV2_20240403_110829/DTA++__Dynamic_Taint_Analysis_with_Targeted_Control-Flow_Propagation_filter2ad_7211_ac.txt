trace until the ﬁrst instruction with a tainted operand. We
also enhanced TEMU with additional interfaces for selec-
tively tainting input values and verifying taint results of out-
put data. For diagnosis we build on BitBlaze’s existing sup-
port for path constraint generation (using the Vine toolkit)
and constraint solving (with an interface to the off-the-shelf
SMT decision procedure STP [19]). We implement the bi-
nary search algorithm of Section 4.1 and other glue code in
Python. We obtain control ﬂow graphs and post-dominator
information by disassembling the program binary with IDA
Pro [1], and then passing its output to a CFG library that is
part of BitBlaze. The output of the rule generation phase
is a text ﬁle containing DTA++ propagation rules. We then
perform online taint propagation using these DTA++ rules
to enhance dynamic taint analysis.
6. Word Processors Case Study
To evaluate our DTA++ approach, we apply our imple-
mentation to diagnose and ﬁx culprit implicit ﬂows in Win-
dows word processors that exhibit under-tainting in format
conversion. In this section we describe our experimental
setup, evaluation metrics, and then our evaluation results.
6.1. Experimental Setup
For our evaluation we use 8 word processing applications
that run on Microsoft Windows: Microsoft Word 2003 [23],
WordPad [35], AbiWord [2], AngelWriter [3], Aurel RTF
Editor [4], IntelliEdit [20], Crypt Edit [13], and VNU Ed-
itor. Each program can accept input in plain text format
using the keyboard, and then save the text to disk in for-
mats including RTF and HTML. For each application we
ﬁrst checked whether it had an under-tainting problem when
converting plain text into either RTF or HTML, and if so,
used our system to diagnose and ﬁx the problem.
For each program with RTF output, we checked for
under-tainting by running the program using TEMU’s
vanilla DTA and supplying a test input via the keyboard.
For the experiments described in this section we use
"Taint it: {" with all 11 characters tainted as the test
input (other test inputs would give similar results). Then,
we direct the program to save the text in RTF format and
observed the tainting in the bytes written into the ﬁle. When
the program converts the text to RTF, the program escapes
the brace, yielding the result "Taint it: \{". The de-
sired tainting result is that all the characters except the back-
slash (\) are tainted. We identiﬁed cases as under-tainted if
the brace character was not tainted in the output ﬁle, as illus-
trated in Figure 2. The experiments with HTML conversion
are the same except that we use a less-than character < in-
stead of a brace, which is escaped to "&lt". (We did not
observe under-tainting of any other bytes.)
Table 1 lists the combinations of program and target that
showed under-tainting, which we evaluate with our tool.
We then applied our DTA++ tool to diagnose and ﬁx the
under-tainting of the brace or less-than character respec-
tively. None of these examples exhibited multi-level im-
plicit ﬂows, so only one execution of our diagnosis algo-
rithm is required. Our execution platform is Windows XP
SP3, running inside TEMU.
6.2. Evaluation Metrics
The most basic evaluation criterion for our technique is
whether taint correctly propagates to the previously under-
tainted output byte (e.g., {). In addition, we measure how
many culprit implicit ﬂows our system corrects, how much
time it takes to do so, and how many total bytes are tainted
(an indicator of over-tainting).
Number of culprit implicit ﬂows diagnosed and ﬁxed.
We count the total number of culprit implicit ﬂows diag-
nosed and ﬁxed by our technique.
Program
Description
# of Culprit
Implicit Flows
Time for
Diagnosis Original Optimal DTA++ DYTAN∗
Tainted Bytes (whole system)
Detected & Fixed
WordPad, RTF
MS Word 2003, RTF
AbiWord, HTML
AngelWriter, HTML
Aurel Editor, RTF
VNU Editor, RTF
IntelliEdit, RTF
CryptEdit, RTF
1
24
1
3
1
1
1
1
0.26s
31m 5.26s
0.63s
14.29s
0.76s
0.34s
0.40s
0.23s
90
407
1062
210
79
101
127
293
131
467
1075
220
87
120
132
313
139
880
1289
382
87
121
132
313
25634
149485
89641
8503
84425
18852
12473
15509
Table 1. Program description and evaluation results
Program
Description
WordPad, RTF
MS Word 2003, RTF
AbiWord, HTML
AngelWriter, HTML
Aurel Editor, RTF
VNU Editor, RTF
IntelliEdit, RTF
CryptEdit, RTF
# of Tainted Branches (# Unique Taint Branches)
Original
652 (64)
2620 (213)
4792 (356)
42 (11)
639 (63)
921 (71)
1101 (98)
744 (97)
Optimal
731 (84)
2628 (244)
4825 (374)
200 (49)
710 (77)
1014 (89)
1190 (109)
822 (110)
DTA++
745 (87)
2685 (267)
5328 (446)
266 (96)
735 (88)
1039 (100)
1239 (123)
823 (111)
DYTAN∗
263292 (6248)
417455 (15675)
1024932 (11059)
19808 (2269)
498904 (12134)
74778 (4454)
41898 (3114)
57864 (3820)
Table 2. Number of tainted branches
Performance (time). Since symbolic execution and con-
straint solving are potentially expensive, we check that our
technique does not add too much overhead. To assess this,
we measure the time our system takes to locate the culprit
implicit ﬂows in each example, given an execution trace.
(The overhead of additional propagation during future taint
propagation runs would likely be too small to measure.)
Over-tainting evaluation. Some potential sources of
over-tainting are outside the scope of this research, but it
is important to be careful of over-tainting whenever we in-
troduce additional taint propagation. So we check that our
technique does not introduce excessive over-tainting as a
side effect of ﬁxing under-tainting. We measure the number
of tainted bytes in the system memory after applying tar-
geted taint propagation according to the rules generated by
our ofﬂine analysis technique. For this purpose, we stop the
analysis when the program writes its output to a ﬁle, and
count the total number of tainted bytes in memory using
Tracecap’s state snapshot feature. We compare the number
of tainted bytes between the unmodiﬁed execution and three
types of propagation (as listed in Tables 1 and 2):
• Original: The starting point for comparison is the num-
ber of bytes that are tainted when executing the pro-
gram using TEMU’s vanilla DTA approach with no
additional propagation. Of course this vanilla DTA has
under-tainting.
• Optimal: For a best-case comparison of what results
can be obtained by adding propagation, we inspect the
execution trace and manually identify a single instruc-
tion that is responsible for under-tainting, and verify
that adding taint to the values written by that instruc-
tion avoids under-tainting. Thus this measurement re-
ﬂects the least possible additional tainting consistent
with removing the under-tainting.
• DTA++: In this case we apply our DTA++ technique,
using the targeted propagation rules generated using
the techniques of Section 4.
• DYTAN∗: To measure the value of targeting propa-
gation, we compare to the results obtained with the
simpler approach of performing propagation for every
branch whose condition was tainted. This simulates
using our infrastructure the results that would be ob-
tained from a tool like DYTAN [10]. (We cannot com-
pare directly with DYTAN because it does not support
Microsoft Windows programs).
6.3. Results
Summary. We were able to automatically diagnose and
ameliorate the under-tainting problems in all 8 programs
using our implementation. To evaluate the accuracy and the
efﬁciency of our technique, we use the metrics mentioned
in the previous subsection. Table 1 presents the results. In
summary, in most of the programs, our technique diagnoses
a single culprit implicit ﬂow, and just ﬁxing the detected
implicit ﬂow solves the under-tainting problem in the out-
put data. The two exceptions are the RTF conversion of Mi-
crosoft Word, and the HTML conversion of AngelWriter;
in these cases our system ﬁnds multiple potential culprit
branches though in fact only one is responsible for under-
tainting. Our technique also diagnoses under-tainting prob-
lems efﬁciently. For most of the programs, the technique
detects the implicit ﬂows within one second. Microsoft
Word is again an outlier in running time, largely because
it has the largest number of implicit ﬂows, and each execu-
tion trace contains many instructions. Counting the num-
ber of tainted bytes in the system memory shows that our
targeted propagation reduces the unnecessary tainting dra-
matically compared to an approach that taints all control de-
pendencies (presented as DTA++ and DYTAN∗ respectively
in Table 1). Our technique taints 22 to 1445 times fewer
bytes compared to an indiscriminate approach (DYTAN∗).
The amount of taint added by our automated approach is of-
ten quite close to the minimal additional taint we found by
manual analysis (the “Optimal” column in Table 1).
We also count the number of tainted branches after ﬁxing
the culprit implicit ﬂows. As shown in Table 2, DTA++ adds
a few additional tainted branches by ﬁxing the culprit im-
plicit ﬂows, indicating little over-tainting. However, indis-
criminate propagation of DYTAN∗ shows up to 678 times
more tainted branches, indicative of severe over-tainting.
Additionally, we have examined the execution traces to
see exactly how the implicit ﬂows affect taint propagation in
our dynamic taint analysis. We select two subject programs
to describe the under-tainting problems in detail.
WordPad RTF (a simple conditional branch). When
converting a left brace ({) into the RTF format by prepend-
ing a backslash (\), WordPad ﬁrst converts 1-byte charac-
ters into two-byte ones preﬁxed by 8 zero bits (i.e., converts
them into Windows wide characters). During this conver-
sion, the taint tagged on the original brace character does
not propagate to the brace in the output buffer. Figure 7
shows exactly how the under-tainting problem develops in
the WordPad program execution. In the course of RTF con-
version, WordPad reads one character at a time, and checks
if the current character is a left brace (0x7b in ASCII code)
at EIP 0x4b44daad. (The current character from the in-
put is in the al register and tainted.) When the input value
is equal to the value in the dl register (in this execution
context, 0x7b), it does another equality check against the
null character (EIP: 0x4b44daab). Since the input char-
acter is not null, the program execution gets through to
0x4b44dab5 where WordPad calculates an offset value
needed to retrieve the two-byte value of the brace charac-
ter. The offset value is from two untainted address values,
and thus the resulting offset is not tainted. By using this un-
tainted offset, WordPad retrieves the two-byte format of the
left brace from a character table. Although TEMU propa-
gates taint to values from an array access with a tainted in-
dex value, the taint doesn’t propagate properly here because
the index (offset) value is not tainted. Apparently, the calcu-
lation of the offset value is controlled by a tainted value (the
tainted brace character from the input). However, the taint
ﬂows through the control dependency at 0x4b44dadd,
and thus, it doesn’t propagate to the offset calculation and
character conversion. Also, this program execution path is
made possible only by the left brace character, so our diag-
nosis algorithm correctly detects it.
AbiWord HTML. AbiWord has an under-tainting prob-
lem when converting plain-text content to the HTML for-
mat. Unlike WordPad, the implicit ﬂow causing the prob-
lem is not an explicit comparison against the character that
AbiWord wants to convert. That is, in the WordPad ex-
ample, the program explicitly compares the input charac-
ter with the left brace (0x7b), but the comparison in Abi-
Word is more subtle. AbiWord converts a less-than sign
into the "&lt" string in HTML. As in the execution trace
in Figure 8, the program ﬁrst compares the input character
with the ampersand character (&) by subtracting 0x26, the
ASCII code for it (at 0x101eb133). If it’s not equal, the
program compares the resulting value (input - 0x26)
with 0x16, which is to see whether the input value is a
less-than character (<). In other words, it subtracts 0x3c in
total (0x26 + 0x16) from the input value instead of di-
rectly comparing the input value with 0x3c. If the compar-
ison passes at 0x101e13f, the program pushes an address
value into the stack. This address value is used to retrieve
the converted string value ("&lt") from a table later in the
program execution. However, the address value is a con-
stant value and so is not tainted by vanilla DTA.
7. Discussion
In this section we provide further discussion of some of
the design choices made in our approach, and its limitations.
Symbolic memory index.
In dynamic taint analysis we
taint a value loaded from memory if the address used for
the load is tainted; as mentioned in Section 3.1, this can
be viewed as ﬁxing a kind of implicit ﬂow in memory ac-
cesses. (This treatment of loads is a conﬁgurable option in
TEMU, but we enable it for our experiments.) At the source
level, such memory loads often correspond to array index-
ing (where the address is derived from the array index), so
we also refer to this as the case of a tainted memory index.
;%dl=0x7b (not tainted), %al=0x7b (tainted)
...
0x4b44daad: cmp %dl,%al
0x4b44daaf: jne 0x4b44daa6
0x4b44dab1: test %dl,%dl
0x4b44dab3: je
0x4b44dab5: sub %edi,%ecx
0x4b44dab7: mov 0x4b4043ac(,%ecx,2),%ax ;*0x4b4043b4=0x007b (not tainted)
0x4b44dabf: cmp $0x7f,%ax