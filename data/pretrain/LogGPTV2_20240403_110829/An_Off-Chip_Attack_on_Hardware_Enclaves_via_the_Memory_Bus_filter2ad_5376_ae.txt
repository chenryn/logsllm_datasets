82.1%
Normalized Exec. Time
1.00×
0.92×
Table 3: MEMBUSTER results for attacking Memcached on
an SGX machine
For simulating EPC paging, we modiﬁed the SGX driver to
replace the system-tier SGX instructions, including the ELDU
and EWB instructions, which swap and re-encrypt pages in and
out of the EPC. We simply replace these two instructions
with memory copy without encryption. We compare the mem-
ory traces from the real enclaves and from the simulation to
conﬁrm that the results are identical.
7.1.4 Applications: Hunspell
We run Hunspell v1.6.2 to evaluate the effectiveness of the
MEMBUSTER attack. We use a standard en_US dictionary [69]
with two document samples: a random non-repetitive docu-
ment with 10,000 words (Random), and a natural-language
document “Wizard of Oz” with 39,342 words (Wizard). For
simplicity, we normalize the samples based on en_US dictio-
nary, by converting non-existing words in the samples to the
closet words in the dictionary. MEMBUSTER does not recover
words that are reported as misspelt by Hunspell. In addition,
we disabled afﬁx detection in Hunspell.
We use the pattern matching algorithm described in §6 to
recover the target document from the DRAM traces collected
from the Hunspell program running inside the enclave. We
also enable the hardware prefetching by conﬁguring the BIOS.
To verify the result, we select an interpretation of the DRAM
traces that is closet to the target document, from a set of
highest-ranking results generated from our algorithm.
7.1.5 Application: Memcached
We run Memcached v1.5.12 as another target of the MEM-
BUSTER attack. In this attack, the “secrets” are the data being
looked up in the Memcached cache. We used the Enron email
dataset [70] as a realistic workload for Memcached. First, we
compute the 4-byte hash of each word that appears in emails
in the “sent mail” directory of each user. In total, there are
about 7000 unique word entries in the dataset, which include
articles and propositions. During the training phase, assuming
the attacker is monitoring a Memcached server, the attacker
can determine both the hash table address and the hash value
of each word using the traces of a few queries. Then, during
the attack phase, the attacker monitors the memory bus trafﬁc
of an enclave-protected Memcached server receiving caching
requests from an trusted email server. The email server parses
emails from a test data set that contains randomly selected
emails with around 1000 words in total. As the Memcached
server processes the caching requests from the email server,
the attacker can extract the words in the emails using the
MEMBUSTER attack.
Figure 9: Hunspell document recovery rate (left) and nor-
malized execution time (right) on two documents: Random
document (Random) and Wizard of Oz (Wizard). The compar-
ison is between without any techniques (None); with cache
squeezing (SQ); and with cache squeezing and cross-core
priming (SQ+PR). For Wizard of Oz, we also show the recov-
ery rate of uncommon words only (w/o NLTK).
7.2 Effectiveness of the Attack
7.2.1 Data Recovery Accuracy
Figure 9 (left) and Table 3 show the accuracy of MEMBUSTER
for recovering the victim’s data. We measure the accuracy
based on the number of words recovered from the collected
traces, compared to the number of words in the original sam-
ples. The recovery rate is higher in a non-repetitive (Random)
or high-interval access pattern (Memcached) than in a repet-
itive access pattern (Wizard). Even without any techniques
(None), Memcached and Random show 34% and 44% recov-
ery rates, respectively. With cache squeezing, we recover 96%
of the random document and 82% of the Memcached query.
However, for Wizard of Oz, None or SQ can only achieve
up to 21% recovery rate. The main reason is that the doc-
ument contains many repetitive words, including common
words such as “you” and “the” and uncommon words such as
“Oz” and “scarecrow”. The memory accesses for these words
are likely to be cached in the LLC cache without emitting
any DRAM requests. On average, each unique word in Wiz-
ard of Oz repeats 15.5 times. We found that without cache
squeezing and cross-core priming, the attack recovers about
0.3 occurrences of each word on average. Even with cache
squeezing, the attack only recovers about 2.6 occurrences.
Since cache squeezing shrinks the effective cache size for
the critical addresses, cross-core priming becomes more ef-
ﬁcient by only priming the sets of the critical addresses. We
show that combining cache squeezing and cross-core priming
(SQ+PR) achieves 85% recovery accuracy on Wizard of Oz.
Furthermore, the attacker is most likely to need only the
uncommon words to be recovered. To exclude common words,
we use stopwords from the NLTK dataset [71] which includes
179 common words (e.g., "the"). Excluding these words,
MEMBUSTER can recover Wizard of Oz up to 95% (Figure 9
Wizard w/o NLTK).
7.2.2 Overhead and Interference
We show that MEMBUSTER does not incur an orders-of-
magnitude overhead that can be distinguishable by the victim.
Figure 10: Simulation results of the attack on Hunspell (top)
and Memcached (bottom).
Figure 9 (right) shows the normalized execution time with
different attack techniques with respect to the baseline. In
general, both cache squeezing and cross-core priming have a
low performance impact on the victim program, since these
techniques do not interrupt the victim program. For Hunspell,
cache squeezing causes up to 21% overhead to the victim,
and up to 36% if combined with cross-core priming. The
overheads are mainly caused by the increase of cache misses
inside the victim program.
Table 3 also shows the end-to-end execution time of Mem-
cached for processing the whole test set. Similar to Hunspell,
the basic attack incurs no overhead on Memcached. Interest-
ingly, cache squeezing reduces the execution time by 8% for
Memcached. We observe that, on a physical machine, critical
page whitelisting consistently reduces the average LLC miss
rate (2.9% vs. 3.6%) as well as the page fault rate. Because the
physical pages of Memcached’s hash table are pinned inside
the enclave, and thus never get swapped out from the EPC.
Thereby, within the hash table, there is no expensive paging
and context switching cost that generally plagues enclave
execution.
7.2.3 Scalability on # of Ways
We simulated the attack on our simulation environment to
show the scalability of MEMBUSTER. We ﬁxed the number
of sets s = 2048 that most Intel CPUs choose to have. Since
we did not simulate the LLC slices, we increased the size of
the cache by increasing the number of ways, W . To clarify,
increasing the number of ways does not reﬂect the actual
behavior of LLC with multiple slices. Even if the LLC has
multiple slices, each cache line will compete with W other
cache lines. Thus, increasing W makes the attack much harder,
by reducing the chance of eviction of critical addresses. Note
that a typical W value is between 4 and 16.
As shown in Figure 10, cache squeezing makes cross-core
RandomWizardWizard (w/o NLTK)020406080100Recovery (%)NoneSQSQ+PRRandomWizard0.81.01.21.4NormalizedExecution TimeNoneSQSQ+PR4(0.5MB)8(1MB)16(2MB)32(4MB)64(8MB)128(16MB)256(32MB)# of Ways (LLC Size)020406080100Recovery (%)Hunspell (Random)NonePRSQSQ+PR4(0.5MB)8(1MB)16(2MB)32(4MB)64(8MB)128(16MB)256(32MB)# of Ways (LLC Size)020406080100Recovery (%)MemcachedNonePRSQSQ+PRit only contained common words such as “the” and “of”. This
shows that MEMBUSTER leverages ﬁne-grained addresses by
providing more side-channel information than coarse-grained
addresses.
8 Discussion
In this section, we discuss the limitations, generalization, im-
plications, and mitigations of the MEMBUSTER attack.
Limitations. MEMBUSTER leaks only memory access pat-
terns at LLC misses. Thus, MEMBUSTER cannot observe
repeated accesses to the same address within a short period.
For instance, the former RSA implementation of GnuPG [72]
is known to leak a private key through code addresses in the
ElGamal algorithm [45]. This type of attack relies on data-
dependent branches, as the attacker detects different code
paths executed inside the victim to infer the secret. However,
these vulnerabilities are difﬁcult to exploit by MEMBUSTER,
due to these code addresses being frequently executed and
thus cached in the CPU. Even cache priming techniques can-
not efﬁciently evict the code addresses in time to help the
attacker retrieve the secret with high accuracy but keep the
performance impact low.
In general, MEMBUSTER is more suitable for leaking data-
dependent memory loads over a large heap or array. For in-
stance, both the attacks on Hunspell and Memcached rely on
the access patterns within a large hash table and/or linked-list
objects. If the victim program only has data-dependent mem-
ory access patterns within a small region, or if the memory
access is not evenly distributed, the accuracy of MEMBUSTER
is likely to worsen. Besides, if the application only leaks a
secret through stores that are dependent on the secret, MEM-
BUSTER may not observe the memory requests immediately.
The reason is that the CPU tends to delay write-back of dirty
data until the cache lines are evicted, making the timing of the
memory requests appearing on the memory bus unpredictable.
We leave the exploration of such scenario for future work.
Timing Information. Although not explored in this paper,
an attacker may exploit the timing information to attack the
victim. The DRAM analyzer logs a precise timestamp for
each memory request based on counting its clock cycles. Po-
tentially, an attacker can measure the time difference between
two memory traces, to infer the execution time of operation
in the victim as a way of timing attacks. We leave the demon-
stration of these attacks for future work.
Trafﬁc Analysis. Potentially, the memory bus trafﬁc
recorded by the DRAM analyzer can be used for trafﬁc anal-
ysis if the victim is vulnerable to this type of attacks. For
instance, the attacker may analyze either the density or the
volume of requests on a speciﬁc address to infer the activity or
secret of the application. A complete mitigation of the attack
should eliminate the timing information and has a constant
trafﬁc ﬂow on the memory bus [36].
Figure 11: The number of useful traces per word and the
document recovery rate for each experiment. We compare the
cases with or without the hardware prefetcher.
priming much more effective in general by reducing the ef-
fective cache size. Cache squeezing was more scalable on
Hunspell than Memcached, because Hunspell has a larger
critical address range. With W = 64, MEMBUSTER recovered
up to 83% of the random document in Hunspell and 88% of
the emails in Memcached when both cache squeezing and
cross-core priming have been used. Even assuming an unre-
alistic number of ways W = 256, which results in 32 MB of
LLC, the attack accuracy was 77% and 40% respectively.
7.3 Per-Application Detailed Analysis
7.3.1 Hunspell: Advantage of Cache Prefetching
We also show the advantage of exploiting cache prefetching
for MEMBUSTER. For Hunspell, the attacker recovers each
word based on multiple memory accesses. If the attacker ob-
serves more traces relevant to each word, recovering the word
becomes easier. Hence, if the attacker knows the presence of
cache prefetchers in advance, she can use the information to
correlate the prefetched addresses with each word (§6).
As shown in Figure 11, cache prefetching increases the av-
erage number of useful traces per word. Including prefetched
addresses increases the recovery rate especially when there
are very few useful traces (None and SQ). Although the im-
provement is marginal in our experiment, the attacker can
potentially use the additional memory requests made by the
cache prefetchers to extract more information from the victim.
7.3.2 Memcached: Advantage of Fine-Grained Ad-
dresses
To show the advantage of observing ﬁne-grained addresses,
we simulated the controlled-channel attack on Memcached
example. We ﬁrst obtained the entire memory trace from
Memcached without simulating the cache. We then masked
the lower 12-bits of all addresses assuming each page is 4 KB.
With this post-processing, we were able to simulate the mem-
ory trace that the controlled-channel attacker will observe.
We also reconstruct the attacker’s hash table such that each
page-granularity address maps to multiple entries in the hash
table. If the attacker sees an address, she simply chooses the
most common word among the possible entries.
The simulated controlled-channel attack achieves only 29%
accuracy, and the recovered document was uninterpretable as
SQ+PRSQNoneRandom# Useful Traces per WordRecovery (%)0123456SQ+PRSQNoneWizard020406080100w/ prefetchingw/o prefetchingMultiple DIMMs or Multi-Socket. Our current attack
does not explore the possibility of having multiple DIMMs
or multiple CPU sockets (currently not supported by SGX).
However, potentially, the attacker can attach multiple DIMM
interposers, and then correlate the DRAM traces using times-
tamps or common patterns.
Memory Controllers. A memory controller arbitrates all
transactions to main memory such that it maximizes the
throughput while minimizing latencies. One of the key fea-
tures that may make MEMBUSTER more challenging is trans-
action scheduling where the arbiter reorders the transaction
requests to maximize the performance. In other words, the
order of the memory transactions observed by the attacker
may differ from the actual order of memory accesses.
We observe that the arbitration of the memory controller
does not stop an enclave from leaking sensitive access pat-
terns. First, even if transactions are reordered, the critical
addresses will still eventually appear on the memory bus.
Also, the memory controller only reorders transactions within
a very small time window (e.g., tens of bus cycles), which
is not enough to obfuscate the critical memory accesses that
occur at least every hundreds of instructions.
Generalization.
Intel SGX is not the only platform affected
by MEMBUSTER. Other existing platforms of hardware en-
claves [4, 5, 40, 41] also do not encrypt the addresses on the
memory bus. Thus, these platforms are also vulnerable to
MEMBUSTER as long as the CPU stores encrypted data in
external memory (e.g., DRAM). The attacker can also use
the same techniques such as cache squeezing to induce cache
misses on other platforms. For example, Komodo [40] allows
the OS to affect the virtual address mapping, which enables
the attacker to use cache squeezing. Keystone [4] measures
the initial virtual address mapping for attestation, thus cache
squeezing cannot be applied. However, it provides cache par-
titioning which can reduce the effective cache size of the
enclave.
Implications and Disclosure. Potentially, MEMBUSTER
can be used in two scenarios: (1) a malicious user attack-
ing an end device to retrieve secret data from a local enclave;
(2) a malicious cloud provider or employee attacking a cloud
machine to retrieve secret data from the tenants. The existence
of MEMBUSTER shows the importance of physical security to
enclaves just on par with software security. Ideally, in a secure
cloud, one may want to separate the person who has physical
access to the machine from the person who has administrative
privileges. This may be achieved by a secure boot system that
prevents people who have physical access from overwriting
system privileges.
We have disclosed the details of this attack to Intel, who
has acknowledged its validity.
Mitigations. There are several ways to mitigate MEM-
BUSTER, but they are generally expensive. Oblivious RAM
(ORAM) [34, 73] can make the applications execute in an
oblivious manner so that the attacker cannot infer secret
data based on the memory access pattern. The high perfor-
mance overhead of ORAM makes it less attractive for appli-
cations that have strong performance requirements. Alterna-
tively, we can also encrypt the address bus as proposed by
InvisiMem [36] and ObfusMem [37]. However, adding such
a feature to commodity DRAM would be very expensive;
take the cost of techniques such as Hybrid Memory Cube
(HMC) [74] for an example. In-package memory such as high
bandwidth memory (HBM) may relieve the needs for protec-
tion against untrusted DRAM [75], but remains an expensive
alternative for production.
9 Conclusion
In this paper, we introduced MEMBUSTER, which is a non-
interference, ﬁne-grained, stealthy physical side-channel at-
tack on hardware enclaves based on snooping the address
lines of the memory bus off-chip. The key idea is to exploit
OS privileges to induce cache misses with minimal perfor-
mance overhead. We also demystify the physical bus-based
side channel by reverse-engineering the internals of several
hardware components. We then develop an algorithm that
can retrieve application secrets from memory bus traces. We
demonstrated the attack on an actual SGX machine; the attack
achieved similar accuracy with much lower overhead than pre-
vious attacks such as controlled-channel attacks. We believe
the attack technique is prevalent beyond Intel SGX and can
apply to other secure processors or enclave platforms, which
do not protect memory buses.
Acknowledgments
We thank our shepherd, Daniel Genkin, and the anonymous