### Publications

#### Setting REPLICA IDENTITY
To set the `REPLICA IDENTITY` to `FULL`, use the `ALTER TABLE` command as shown below:

```sql
ALTER TABLE schema.table_name REPLICA IDENTITY FULL;
```

For more information, refer to the `ALTER TABLE` SQL command in the PostgreSQL Core Documentation:
- [ALTER TABLE](https://www.postgresql.org/docs/current/static/sql-altertable.html)

**Example:**
For a publication table named `edb.dept`, the command would be:

```sql
ALTER TABLE edb.dept REPLICA IDENTITY FULL;
```

You can display the `REPLICA IDENTITY` setting using the PSQL utility with the `\d+` command:

```sql
edb=# \d+ edb.dept
```

**Output:**

```
Table "edb.dept"
 Column | Type | Modifiers | Storage | Stats target | Description
--------+-----------------------+-----------+----------+--------------+-------------
 deptno | numeric(2,0) | not null | main | |
 dname | character varying(14) | | extended | |
 loc | character varying(13) | | extended | |
Indexes:
 "dept_pk" PRIMARY KEY, btree (deptno)
 "dept_dname_uq" UNIQUE CONSTRAINT, btree (dname)
Referenced by:
 TABLE "emp" CONSTRAINT "emp_ref_dept_fk" FOREIGN KEY (deptno) REFERENCES dept(deptno)
 TABLE "jobhist" CONSTRAINT "jobhist_ref_dept_fk" FOREIGN KEY (deptno) REFERENCES dept(deptno) ON DELETE SET NULL
Replica Identity: FULL
```

#### Requirements for Log-Based Replication Systems
The `REPLICA IDENTITY FULL` setting is required on tables in the following databases of a log-based replication system:

- **Single-Master Replication System:**
  - Table filters are defined in the master database.
  - Publication tables in the master database requiring filter definitions must be altered to `REPLICA IDENTITY FULL` unless the publication is a snapshot-only publication. For more information on snapshot-only publications, see Section 2.2.7.

- **Multi-Master Replication System:**
  - Table filters are defined in the master definition node.
  - Publication tables in the master definition node requiring filter definitions must be altered to `REPLICA IDENTITY FULL`.
  - Non-MDN nodes should not have their tables' `REPLICA IDENTITY` option set to `FULL` unless transactions are expected to be targeted on those non-MDN nodes and the transactions are to be filtered when replicated to other master nodes.

The `REPLICA IDENTITY FULL` setting ensures that certain types of transactions on the source table result in the proper updates to the target tables where filters have been enabled.

**Note:**
In addition to table filtering requirements, the `REPLICA IDENTITY FULL` setting may be required on publication tables for other reasons in xDB Replication Server. See Section 6.6.1 for additional requirements.

#### Filtering Restrictions on Data Types
Table filters are not supported on binary data type columns. The Postgres data type `BYTEA` and Advanced Server data types `BINARY`, `VARBINARY`, `BLOB`, `LONG RAW`, and `RAW` (which are aliases for `BYTEA`) are not supported for table filters.

### Roadmap for Further Instructions
The specific details on implementing table filtering depend on whether you are using a single-master or multi-master replication system. Below is a roadmap to the relevant sections for each type of replication system.

- **Single-Master Replication System:**
  - Section 5.2.3: Defining the initial set of table filters available for selective enablement on subscriptions.
  - Section 5.3.3: Enabling available table filters on a newly created subscription.
  - Section 7.6.4: Adding, removing, or modifying rules comprising the set of available table filters.
  - Section 5.5.4: Changing which table filters have been enabled on an existing subscription.

- **Multi-Master Replication System:**
  - Section 6.2.3: Defining the initial set of table filters available for selective enablement on master nodes.
  - Section 6.3: Enabling available table filters on a newly created master node.
  - Section 7.6.4: Adding, removing, or modifying rules comprising the set of available table filters.
  - Section 6.9: Changing which table filters have been enabled on an existing master node.

### xDB Replication Server Components and Architecture

#### 2.3.1 Physical Components
xDB Replication Server is not a single executable program but a set of programs and data stores containing configuration information and metadata that work together to form a replication system.

**Minimal Configuration:**
- **Publication Server:** Configures the publication database and master nodes for replication and performs replication.
- **Subscription Server:** Configures the subscription database for replication and initiates replication (used only in single-master systems).
- **xDB Replication Configuration File:** Contains connection and authentication information used by the publication and subscription servers.
- **xDB Startup Configuration File:** Contains installation and configuration information for the Java Runtime Environment.

**Additional Components:**
- User interfaces for configuring and maintaining the replication system.
- One or more publication databases for a single-master replication system.
- One or more subscription databases for a single-master replication system.
- One master definition node for a multi-master replication system.
- One or more additional master nodes for a multi-master replication system.

The user interface, publication server, subscription server, publication database, subscription database, and master nodes can all run on the same host or on separate, networked hosts.

**Detailed Component Descriptions:**

- **Publication Server:**
  - Creates and manages metadata for publications.
  - Manages replication for both snapshot and synchronization replications.
  - Can run on the same host or a separate, networked host.

- **Subscription Server:**
  - Required only for single-master replication systems.
  - Creates and manages metadata for subscriptions.
  - Initiates replication based on manual user action or a schedule.
  - Can run on the same host or a separate, networked host.

- **xDB Replication Configuration File:**
  - Contains connection and authentication information.
  - Used when starting the publication or subscription server and during registration.

- **xDB Startup Configuration File:**
  - Contains installation and configuration information for the Java Runtime Environment.
  - Must be updated and the servers restarted if any modifications are made.

- **xDB Replication Console:**
  - Graphical user interface for creating and controlling all aspects of a replication system.
  - Can manage replication systems on the same host or across different networked hosts.

**Figure 2-10: xDB Replication Consoles accessing multiple hosts**

In the figure, there are two Postgres installations running on two networked hosts, each with its own xDB Replication Server installation. Each host runs a publication server and a subscription server. The xDB Replication Console on each host can access and manage the replication systems on both hosts.

---

Copyright Â© 2010 - 2018 EnterpriseDB Corporation. All rights reserved.