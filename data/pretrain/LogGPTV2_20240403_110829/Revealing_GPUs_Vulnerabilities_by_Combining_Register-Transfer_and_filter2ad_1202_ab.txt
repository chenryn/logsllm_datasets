292
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 08:56:48 UTC from IEEE Xplore.  Restrictions apply. 
Thanks to our framework, we are able, for the ﬁrst time,
not only to unveil the effects of faults on otherwise hidden
GPU resources, but also to present a more detailed fault model
to be used in the reliability evaluation of complex codes.
Additionally, we can identify the hardware source of those
faults that are more likely to propagate to software visible
states and to the application output inducing, for instance,
misdetections in CNNs. This information is precious, as it
helps researchers to focus the design of a hardening solution
to a subset of critical resources. The RTL fault
injection
highlights that functional units are the most probable source
for data errors, identiﬁes a subset of 16% of pipeline registers
as responsible for the vast majority of Detected Unrecoverable
Errors (DUEs), and conﬁrms previous assertions about the
scheduler corruption leading to multiple corrupted threads [9],
[22]. We found that the fault syndrome at the instruction output
does not follow a uniform distribution, but rather a power
law (few effects are extremely probable). Finally, we see that
scheduler faults are extremely critical for t-MxM. They can
cause multiple errors distributed in a row or block of the output
matrix that, if injected in CNNs, can cause misdetection.
The contributions in this paper are:
• A thorough analysis, based on over 1.5 million RTL
injections, of the effects of transient faults in the GPU
scheduler, pipeline registers, control units, functional
units, and special units on 12 instructions;
• A detailed characterization of RTL faults distribution at
the output of tiled MxM (used in CNNs);
• The description of a fault model (available on a public
repository [23]) to be adopted instead of single bit-ﬂip;
• The adaptation of a software framework (NVBitFI) to
inject the RTL fault model in real GPUs;
• A method allowing the reliability evaluation of real-world
applications, from HPC and safety-critical domains.
• The identiﬁcation of the GPU resources whose corruption
is more likely to generate errors.
The reminder of the paper is structured as follows: after
summarizing background and related work, highlighting the
contributions and limitations of our strategy (Section II),
we give an overview of the proposed idea (Section III). In
Section IV, we detail the two-levels fault injection frameworks
(RTL and software) and how we combine them. Section V
presents the results of the RTL-level fault injection and de-
scribes the fault model we propose. Section VI shows the
effects of the fault model in real world codes and compares our
data with naive fault-injection. Finally, Section VII concludes
the paper and paves a path for future work.
II. BACKGROUND AND RELATED WORK
A. Radiation Effects in Computing Devices
There are several sources of transient faults that can reduce
the reliability of a computing device, including environmen-
tal perturbations, software errors, process/temperature/voltage
variations, and radiation-induced events. The latter are par-
ticularly critical, as they dominate error rates in commercial
devices [24]. A transient fault leads to one of the following
outcomes: (1) no effect on the program output (i.e., the fault is
masked), (2) a Silent Data Corruption (SDC) (i.e., an incorrect
program output), or (3) a Detected Unrecoverable Error (DUE)
(i.e., a program crash or device hang/reboot).
Recent results, based on ﬁeld data from HPC servers, have
highlighted that parallel architectures, particularly GPUs, have
a high fault rate because of the high amount of available
resources [25]–[27]. Additionally, recent works have identiﬁed
some peculiar reliability weaknesses of GPUs architecture,
suspecting that the corruption of the GPU hardware scheduler
or shared memories can severely impact the computation of
several parallel threads [9], [10], [22], [25], [26]. As a result,
multiple GPU output elements can potentially be corrupted,
effectively undermining the reliability of several applications,
including CNNs [28], [29]. Unfortunately, as it is not possible
to inject faults in software directly on the scheduler, all
previous ﬁndings are based only on experimental observations
and speculations that still need to be conﬁrmed. One of the
goals of our paper is to understand if and how faults in
characteristic resources of GPUs affect HPC and safety-critical
applications correctness.
B. Reliability Evaluation Methodologies
The effects of faults in computing devices can be eval-
uated at different levels of abstractions, from gate level to
architectural level and system level, as illustrated in Figure 1.
Each evaluation methodology has some beneﬁts and limita-
tions, which we summarize next. We also discuss why the
complexity of GPUs exacerbates the limitations associated
with the available methodologies. In general, methodologies
that act closer to the fault physical source (i.e., the silicon
implementation) are more realistic (and costly in terms of
processing time) while methodologies closer to the output
manifestation of the fault are more efﬁcient (but less realistic
in terms of the fault effect in real applications).
Beam experiments induce faults directly in the transistors
by the interaction of accelerated particles with the Silicon
lattice, providing highly realistic error rates [24]. Beam ex-
periments are not included in Figure 1 because, as errors are
observed only when they appear at the output, generally they
do not allow to track faults propagation. This prevents one to
associate observed behaviors with the fault source and, thus,
to identify the most vulnerable device resources.
Software fault injection is performed at the highest level of
abstraction and, on GPUs, it was proved efﬁcient in identifying
those code portions that, once corrupted, are more likely to
affect computation [3]–[5], [7], [8], [30]. However, the analysis
is limited as faults can be injected only on that subset of
resources which is visible to the programmer. Unfortunately,
critical resources for highly parallel devices (i.e., hardware
scheduler, threads control units, etc.) are not accessible to the
programmer and, thus, cannot be characterized via high level
fault injection. Additionally, the adopted fault model (typically
single/double bit-ﬂip) might be accurate for the main memory
structures (register ﬁles, caches) but risks to be unrealistic
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 08:56:48 UTC from IEEE Xplore.  Restrictions apply. 
293
(cid:5)(cid:18)(cid:25)(cid:14)(cid:28)(cid:18)(cid:27)(cid:4)(cid:6)(cid:13)(cid:27)(cid:15)(cid:1)
(cid:26)(cid:18)(cid:21)(cid:28)(cid:20)(cid:13)(cid:27)(cid:18)(cid:23)(cid:22)
(cid:9)(cid:11)(cid:7)
(cid:16)(cid:13)(cid:28)(cid:20)(cid:27)(cid:1)(cid:18)(cid:22)(cid:19)(cid:15)(cid:14)(cid:27)(cid:18)(cid:23)(cid:22)
(cid:8)(cid:18)(cid:14)(cid:25)(cid:23)(cid:13)(cid:25)(cid:14)(cid:17)(cid:3)
(cid:16)(cid:13)(cid:28)(cid:20)(cid:27)(cid:1)(cid:18)(cid:22)(cid:19)(cid:15)(cid:14)(cid:27)(cid:18)(cid:23)(cid:22)
(cid:2)(cid:1)(cid:1)(cid:1)(cid:3)
(cid:2)(cid:1)(cid:1)(cid:1)(cid:3)
(cid:4)(cid:4)
(cid:18)(cid:13)(cid:18)(cid:10)(cid:14)(cid:13)(cid:16)(cid:10)(cid:20)
(cid:1)(cid:2)(cid:3)
(cid:5)(cid:8)(cid:12)(cid:10)(cid:9)(cid:22)(cid:14)(cid:10)(cid:19)
(cid:2)(cid:17)(cid:16)(cid:21)(cid:19)(cid:17)(cid:14)(cid:1)(cid:6)(cid:16)(cid:13)(cid:21)(cid:20)
(cid:16)(cid:13)(cid:28)(cid:20)(cid:27)(cid:1)(cid:26)(cid:23)(cid:28)(cid:25)(cid:14)(cid:15)
(cid:21)(cid:23)(cid:25)(cid:15)(cid:1)(cid:25)(cid:15)(cid:13)(cid:20)(cid:18)(cid:26)(cid:27)(cid:18)(cid:14)
(cid:3)(cid:10)(cid:15)(cid:17)(cid:19)(cid:23)
(cid:2)(cid:7)(cid:8)(cid:12)(cid:10)(cid:20)(cid:25)(cid:4)(cid:10)(cid:11)
(cid:23)(cid:24)(cid:15)(cid:25)(cid:13)(cid:27)(cid:18)(cid:23)(cid:22)(cid:2)(cid:1)(cid:18)(cid:22)(cid:24)(cid:28)(cid:27)
(cid:16)(cid:17)(cid:13)(cid:9)(cid:15)(cid:14)(cid:12)(cid:10)
(cid:2)(cid:4)(cid:7)(cid:1)(cid:3)(cid:5)(cid:4)(cid:6)
(cid:1)(cid:2)(cid:2)(cid:2)(cid:1)(cid:1)(cid:1)(cid:2)(cid:1)(cid:2)
(cid:10)(cid:12)(cid:1)(cid:16)(cid:13)(cid:28)(cid:20)(cid:27)(cid:1)(cid:18)(cid:22)(cid:19)(cid:15)(cid:14)(cid:27)(cid:18)(cid:23)(cid:22)
(cid:7)(cid:9)(cid:9)(cid:1)(cid:19)(cid:27)(cid:1)(cid:19)(cid:28)
(cid:15)(cid:22)(cid:14) (cid:19)(cid:29)(cid:1)(cid:19)(cid:27)
(cid:24)
(cid:24)
(cid:20)(cid:21)(cid:7) (cid:19)(cid:30)
(cid:18)(cid:5)(cid:8)(cid:16)(cid:11)(cid:10)(cid:9)
(cid:18)(cid:6)(cid:2)(cid:1)
(cid:18)(cid:2)(cid:7)(cid:3)
(cid:16)(cid:13)(cid:28)(cid:20)(cid:27)(cid:1)(cid:15)(cid:16)(cid:16)(cid:15)(cid:14)(cid:27)
(cid:21)(cid:23)(cid:25)(cid:15)(cid:1)(cid:15)(cid:16)(cid:16)(cid:18)(cid:14)(cid:18)(cid:15)(cid:22)(cid:27)
Fig. 1. Abstract view of fault injection and propagation. Reliability evaluations closer to the fault source (i.e., the silicon implementation) are more realistic
by extremely costly. Evaluations closer to the fault manifestation at the output are more efﬁcient but risk to be unrealistic. Single or double bit-ﬂips injections
at software level, for instance, accurately simulate memory faults, only. Faults in other resources have a syndrome that depends on operation and input value.
when considering faults in the computing cores or control
logic, as also shown in [18]. In fact, as shown in Figure 1,
while a fault in the memory array directly translates into a
corrupted value, the single transient fault in a resource used for
the execution of an operation (pipelines, ALU, scheduler, etc..)
can have not-obvious effects on the operation output. We call
this not-obvious effect syndrome. The syndrome induced in
the instruction output by faults in the computing core depends
on the operation, on its input, and on the corrupted resource.
The only possible way to ﬁnd this syndrome, as we do in our
paper, is to perform lower level fault injection.
Micro-architecture fault injection provides a higher fault
coverage than software fault injection as faults can, in princi-
ple, be injected in most modules. A preliminary work, based
on Multi2Sim, presented micro-architectural fault
injection
data on GPUs, but the analysis is limited to just memories [6].
One of the issues of micro-architectural fault injection in GPUs
is that the description of some modules (including the sched-
uler and pipelines) is behavioural and their implementation is
not necessarily similar to the realistic one. A recent work has
demonstrated that micro-architectural fault injection provides a
sufﬁciently accurate reliability evaluation on ARM embedded
CPUs [31]. On GPUs such a demonstration is still missing,
and is likely to be more challenging due to the complexity of
the hardware underneath the micro-architecture.
Register-Transfer Level (RTL) fault injection accesses all
resources (ﬂip ﬂops and signals) and provides a more realistic
fault model, given the proximity of the RTL description
with the actual implementation of the ﬁnal hardware [15],
[18], [19]. However, the time required to inject a statistically
signiﬁcant number of faults makes RTL injections impractical.
The huge amount of modules and units in a GPU and the
complexity of modern HPC and safety-critical applications
exacerbate the time needed to have an exhaustive RTL fault
injection (hundreds of hours for small codes), making it un-
feasible. Previous work that evaluates GPUs reliability through
RTL fault injection is limited to naive benchmarks [19].
Circuit or Gate Level Simulations induce analog current
spikes or digital faults in the lowest abstraction level that still
allows to track fault propagation (not available with beam
tests). There are two main issues with the level of details
required to perform this analysis on GPUs: (1) a circuit or
gate level description of GPUs is not publicly available and,
even if it was, (2) the time required to evaluate the whole
circuit would deﬁnitely be excessive (the characterization of a
small circuit takes weeks [14]).
Hybrid or combined fault injections at different levels
of abstraction have been adopted to increase the reliability
evaluation efﬁciency without jeopardizing its accuracy. Some
works have proposed to use a detailed RTL fault injection
in speciﬁc portions of the circuit and a fast fault simulation
in others [15], [16]. Recent works combined an extremely
detailed gate level fault injection in tandem with a faster (but
still impracticable for complex devices) RTL evaluation [12],
[14]. Cho et al. used high level simulation (not using real
hardware) triggering a RTL model when the fault needs to be
injected [13]. Subasi et. al focuses on RTL injection to provide
a more detailed fault model, but limited to embedded proces-
sors ALU [18]. While our paper takes inspiration from the
two level fault injection concept, none of these works address
GPUs (nor parallel devices in general), but mainly embedded
processors, with a completely different complexity scenario.
CPUs, in fact, have just one or few pipelines and faults are
unlikely to affect multiple threads while, on GPUs, several
pipelines and computing units need to be characterized and
it is fundamental to consider also multiple threads corruption.
Previous solutions, then, do not scale to GPUs complexity.
Additionally none of previous works provide, as we do, a fault
model database that could be used in future evaluations.
C. Contributions and Limitations
In this paper we propose to combine, for the ﬁrst time
for GPUs, the ﬁne grain evaluation of RTL fault injection
with the ﬂexibility and efﬁciency of software fault injection
in real GPUs. As characterizing realistic codes with RTL
fault injection is unfeasible, we limit the RTL analysis to
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 08:56:48 UTC from IEEE Xplore.  Restrictions apply. 
294
CUDA GPU
(cid:2)(cid:19)(cid:22)(cid:12)(cid:18)(cid:25)(cid:1)(cid:9)(cid:12)(cid:16)(cid:14)(cid:13)(cid:27)(cid:19)(cid:14)(cid:24)(cid:1)(cid:11)(cid:21)(cid:13)(cid:1)(cid:4)(cid:17)(cid:25)(cid:23)(cid:11)(cid:26)(cid:12)(cid:16)(cid:14)(cid:24)
(cid:2)(cid:1)
(cid:2)(cid:1)
(cid:2)(cid:1)
(cid:2)(cid:1)
(cid:2)(cid:1)
(cid:2)(cid:1)
(cid:2)(cid:1)
(cid:2)(cid:1)
(cid:2)(cid:1)
(cid:2)(cid:1)
(cid:2)(cid:1)
(cid:2)(cid:1)
(cid:6)(cid:31)(cid:1)(cid:3)(cid:11)(cid:12)(cid:16)(cid:14)
(cid:2)(cid:4)(cid:1)(cid:3)
(cid:7)(cid:8)(cid:15)(cid:14)(cid:1)(cid:6)(cid:9)(cid:12)(cid:11)(cid:10)(cid:16)(cid:13)(cid:11)(cid:15)
(cid:4)(cid:1)
(cid:2)(cid:20)(cid:19)(cid:23)(cid:21)(cid:20)(cid:17)(cid:1)(cid:17)(cid:20)(cid:15)(cid:16)(cid:12)
(cid:8)(cid:5)(cid:1)(cid:12)(cid:20)(cid:19)(cid:23)(cid:21)(cid:20)(cid:17)(cid:17)(cid:14)(cid:21)
(cid:3)(cid:2)
(cid:1)(cid:5)(cid:2)(cid:3)(cid:4)
&! %$'#" ĀȀ
&! %$'#" Ā 
(
(cid:3)(cid:5)(cid:6)(cid:4)
(cid:3)(cid:5)(cid:6)(cid:4)
(cid:3)(cid:5)(cid:6)(cid:4)
(cid:3)(cid:5)(cid:6)(cid:4)
(cid:3)(cid:5)(cid:6)(cid:4)
(cid:3)(cid:5)(cid:6)(cid:4)
(cid:5)(cid:6)(cid:4)
(cid:3)(cid:5)(cid:3)(cid:5)(cid:3)(cid:5)
(cid:3)(cid:5)(cid:6)(cid:4)