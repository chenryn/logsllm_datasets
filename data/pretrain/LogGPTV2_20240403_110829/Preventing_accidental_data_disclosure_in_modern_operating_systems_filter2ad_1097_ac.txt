Developers deﬁning security policy do not necessarily know
the UI screens in other applications.
The UI workﬂow policy itself is a collection of owner poli-
cies, where each owner is an application. The owner policy
contains an export list, a required list, and a workﬂow ﬁlter:
Deﬁnition 1 (Export list). An export list E is a set of
applications that may access the network while participating
in the UI workﬂow.
Deﬁnition 2 (Required list). A required list R is a set
of applications that all must have been present on the UI
workﬂow at sometime in the past for any application on the
UI workﬂow to access the network.
Deﬁnition 3 (Workﬂow ﬁlter). A workﬂow ﬁlter F is a set
of tuples {(s1, T1), . . . ,( sn, Tn)}, each containing an action
string si and a set of targets Ti. If the normal resolution of
an intent message sent to action string si is a set of apps N ,
then the resulting allowed target applications is N \ Ti.
To simplify discussion, we deﬁne functions for retrieving
the action string and set of targets from a workﬂow ﬁl-
ter. For a ﬁlter F , actions(F ) returns the set of all ac-
tion strings in F . Similarly, for a ﬁlter F and an action
string s, targets(F, s) returns the set of target applications
for action string s. Note that for the following logic to be
correct, we assume that there does not exist an s such that
targets(F, s) = ;.
If this occurs, Aquifer simply removes
s from actions(F ), implying there are no restrictions for s
(default allow).
Having deﬁned export lists, workﬂow ﬁlters, and required
lists, we can now deﬁne a workﬂow label.
Deﬁnition 4 (Workﬂow label). A workﬂow label L is an
expression L = {O1 : (E1, R1, F1); . . .; On : (En, Rn, Fn)},
where Oi is an owner (application) and Ei, Ri, and Fi are
an export list, required list, and workﬂow ﬁlter, respectively,
speciﬁed by Oi.
A label L contains a set of owners denoted owners(L),
which is the set of all owners that have speciﬁed a restriction
for the UI workﬂow (i.e., O1, . . . , On in Deﬁnition 4). To
modify L (i.e., add, remove, or change), an owner Oi must
contain the active UI screen and can only modify its portion
of L (i.e., O1 cannot change E2, R2, orF 2).
We deﬁne functions for retrieving the parts of an owner’s
policy from a label L. Care is needed to account for Aquifer’s
default allow policy when no restrictions are speciﬁed by
an owner. Let the set of all applications be A, and the
set of all possible action strings be S. For each owner Oi,
exports(L, Oi) returns Ei, unless Oi 62 owners(L) orE i = ;,
in which case exports(L, Oi) returns A. Semantically, this
means Oi does not have any export restrictions. Similarly,
for each owner Oi, f ilters(L, Oi) returns Fi, unless Oi 62
owners(L) or Fi = ;, in which case it returns {(s,A)|8s 2
S}. In contrast, for each owner Oi, requires(L, Oi) returns
Ri regardless if Oi exists or if Ri is speciﬁed.
A useful concept is the e↵ective policy. That is, given
a label L with multiple owners, what policy should be en-
forced. We deﬁne the e↵ective export list, required list, and
workﬂow ﬁlter as follows.
Deﬁnition 5 (E↵ective export list). For a workﬂow la-
bel L, the e↵ective export list Ee =T exports(L, O),8O 2
L, the e↵ective required list Re = S requires(L, O),8O 2
Deﬁnition 6 (E↵ective required list). For a workﬂow label
owners(L).
owners(L).
Deﬁnition 7 (E↵ective workﬂow ﬁlter). For a workﬂow la-
bel L, the e↵ective workﬂow ﬁlter Fe is the set of tuples
containing action string and corresponding target applica-
tion set created by taking the union of all action strings
and the intersection of the targets for those action strings.
More precisely, Fe = {(si, Ti) | si 2S actions(F ) and Ti =
T targets(F, si),8F 2 f ilters(L, O),8O 2 owners(L)}.
There are various scenarios in which Aquifer must com-
bine two workﬂow labels, e.g., propagating a workﬂow label
from a ﬁle, or through a daemon. When this occurs, we join
the two labels L1 and L2 to create a new label that is the
least restrictive label that maintains all of the restrictions
speciﬁed by L1 and L2 [27].
Deﬁnition 8 (Label join t). For workﬂow labels L1 and
L2, the join L = L1tL2 is a new label ensuring the following
for all owners O:
owners(L) = owners(L1) [ owners(L2)
exports(L, O) = exports(L1, O) \ exports(L2, O)
requires(L, O) = requires(L1, O) [ requires(L2, O)
f ilters(L, O) = {(si, Ti)|si 2 actions(F1) [ actions(F2),
Ti = targets(si, F1) \ targets(si, F2),
where F1 = f ilters(L1, O),
F2 = f ilters(L2, O)}
Similar to the deﬁnition of an e↵ective workﬂow ﬁlter, the
last rule ensures that the workﬂow ﬁlter for the new label L
contains the union of action strings in L1 and L2, and the
intersection of the target applications for each of those action
1033strings. Finally, we note that when the above conditions
results in the universal set for one of the restriction lists, our
implementation removes the list to indicate default allow.
5. AQUIFER SYSTEM DESIGN
The Aquifer system enforces the Aquifer policy logic within
a modern operating system. While we try to keep our de-
scription general, we frequently provide concrete examples
using the Android platform.
5.1 Managing UI Workﬂows
As described in Section 3, Aquifer deﬁnes and enforces
policy with respect to a UI workﬂow. A UI workﬂow is a
graph that tracks the history of UI screens that comprise the
user’s task. This section discusses how Aquifer identiﬁes and
manages the workﬂow.
Identifying the Workﬂow: As the user navigates to new
a new UI screen (e.g., Android activity component instance),
Aquifer adds the screen to the workﬂow. Aquifer does not
need to store the exact workﬂow graph to enforce the work-
ﬂow label policy. Aquifer needs to keep track of: 1) WV ,
a list of applications the workﬂow has visited (for e↵ective
required list Re), and 2) WR, a list of metadata for currently
“running” UI screens (for e↵ective export list Ee). The meta-
data required for WR is dependent on the speciﬁc Aquifer
implementation and the information required to enforce the
policy. For this discussion, we assume it contains at least
the app name and process identiﬁer.
Ideally, we would like to start each UI screen in a separate
process. This allows Aquifer to easily enforce the workﬂow
policy by turning network access on and o↵ for the process.
If the same process is used in two simultaneous UI workﬂows
with labels L1 and L2, Aquifer must assign both workﬂows
the label L1tL2 in order to preserve the restrictions on both
workﬂows. This can lead to overly restrictive policy.
At ﬁrst, separate processes for UI screens seemed straight-
forward for our Android implementation of Aquifer. An-
droid is designed to allow components to transparently in-
teroperate with components in di↵erent processes. There-
fore, conceptually we could modify the Android framework
to start each activity component instance in a separate pro-
cess. However, we ran into two problems. First, activity
components are simply Java objects that extend the Activity
class and sometimes share global variables with the rest of
the application. In such cases, starting the activity compo-
nent in a new process causes the application to crash when
an uninitialized value of a global object is retrieved. Sec-
ond, in the cases when activity components could be run in
a separate process, Android did not provide an easy mecha-
nism to start multiple processes if multiple instances of that
activity component are needed.
To account for these limitations, we made the following
compromise. When starting an activity component, Aquifer
checks if the process for that component already exists. If
not, a new process is started, and there is no problem. If a
process does exist, Aquifer determines if it is part of the cur-
rent UI workﬂow. If so, the activity is started in this process.
If not, Aquifer terminates the process. If applications are de-
veloped following Android’s recommended conventions, an
activity should save its state to persistent storage when An-
droid calls the onStop() callback, indicating the activity is
no longer visible. Aquifer then starts a new process for the
activity for this UI workﬂow.
This approach is less desirable than poly-instantiation (sug-
gested above), because if applications do not save their state,
data loss may result. An undesirable user experience may
also result if an activity component in the middle of a UI
task is terminated, or if activities call each other in a loop.
One way developers can reduce the impact of Aquifer’s need
to terminate processes is to develop their applications such
that each activity starts in a separate process. This can be
easily done using annotations in the app’s manifest ﬁle.
Policy Administration: Only the active (i.e., currently
displayed) UI screen can modify the UI workﬂow policy.
Aquifer exports a policy management API to applications
that includes the ability to query, set, and remove the ex-
port list, required list, and workﬂow ﬁlter for that applica-
tion. We note that a UI screen can only retrieve and modify
the policy for the application that contains it. This keeps
an application from reading the policies set by other appli-
cations, but it does not prevent it from learning the e↵ective
policy, which can be queried by testing network access.
Removing Unrelated Policy: In developing Aquifer for
Android, we identiﬁed an opportunity to remove unneces-
sary restrictions from the UI workﬂow label L. Activity
components can be started in two ways: startActivity() and
startActivityForResult(). The former method never returns
a value, whereas the latter does. Aquifer leverages this ar-
tifact by pruning the workﬂow label as follows. When UI
workﬂow branch returns, Aquifer determines if the activity
component was started for a result. If not, Aquifer checks
if owner policy can be removed. An owner policy for appli-
cation O can be removed from L if and only if: 1) no UI
screen of app O exists in the set of running UI screens WR,
and 2) no past UI screen (e.g., activity component instance)
of app O returned a value. To ensure the latter condition,
we modiﬁed WV to include an extra bit of information in-
dicating whether or not a UI screen for the application was
started for a result. Note that this heuristic is conservative
and may not remove an owner policy if a value was returned
on a branch that later does not return a value. Once WR is
empty, Aquifer terminates the workﬂow.
5.2 Enforcing Policy
The Aquifer UI workﬂow policy restricts which applica-
tions can send data to the network. The workﬂow label
contains a list of owners and corresponding export lists, re-
quired lists, and workﬂow ﬁlters that are used to calculate
the e↵ective export list Ee, e↵ective required list Re, and
e↵ective workﬂow ﬁlter Fe.
Aquifer enforces Ee and Re by controlling the network
access of the process containing the UI screen. Since ap-
plications are security principals, it does not matter if each
UI screen runs in its own process, or all UI screens for an
application run in the same process. For each process p cor-
responding to application app(p), Aquifer enables network
access if and only if:
(Ee = ; _app (p) 2 Ee) ^ (8r 2 Re, r 2 WV )
Simply put, this equation implements default allow only if
Ee is empty and all r in Re are satisﬁed. Otherwise, the
application corresponding to p must be listed in Ee.
Aquifer must re-evaluate the network access control for
each process on a UI workﬂow whenever: a) an application
on the UI workﬂow modiﬁes its policy, or b) a new UI screen
is added to the workﬂow. The latter condition is only neces-
1034sary when the application for the added UI screen completes
the restriction requirement for satisfying Re.
Finally, as described in Deﬁnition 3, Aquifer enforces work-
ﬂow ﬁlters by reducing the list of applications shown to the
user on transitions between UI screens.
5.3 Tracking Background Functionality
Aquifer is designed to enforce security policy on user fac-
ing software. However, UI screens sometimes use back-
ground functionality such as daemons and ﬁle storage. When
this occurs, Aquifer must carefully propagate policy labels
between UI workﬂows.
UI Screen Accessing a Daemon: Daemons may be ac-
cessed by multiple workﬂows. Simply joining labels when-
ever a UI screen accesses a daemon will quickly result in all
workﬂows having the same overly restrictive label. To avoid
this, Aquifer uses intelligent tracking in daemons.
One method of intelligent tracking is to incorporate ﬁne-
grained tracking (e.g., TaintDroid [13] and CleanOS [37]).
Unfortunately, existing systems would require substantial
retroﬁtting to enforce Aquifer policy. TaintDroid can only
track 32 distinct identiﬁers. CleanOS extends TaintDroid
to store identiﬁers in the taint tag bitvector; however, this
storage cannot be used directly for Aquifer workﬂow labels.
Furthermore, the source code for CleanOS was not available
at the time of writing. Since the focus of this paper is the
UI workﬂow security semantics, and not building another
ﬁne-grained data tracking framework, we reduced the scope
of our tracking to OS-visible objects allowing coarse kernel
mediation (i.e., ﬁles).
By restricting Aquifer to tracking ﬁles, we only need to
track open ﬁle descriptors sent between UI screens and dae-
mons. Android applications can pass ﬁle descriptors through
binder. This commonly occurs with content provider com-
ponents. Consider an activity component in application A
that wants to read an image ﬁle that is owned by application
B. App B can use a content provider component to share the
image ﬁle with other applications without the image ﬁle be-
ing world readable. To do this, app B allows app A to query
its content provider for a content URI, or passes the con-
tent URI directly to app A (e.g., content://app_b/img/42).
App A can then open a FileInputStream for app B’s content
provider using this URI. Behind the scenes, app B’s process
will open the image ﬁle and pass the open ﬁle descriptor to
app A using binder. App A can then read from the image
ﬁle as if it opened the ﬁle itself.
Aquifer for Android implicitly tracks ﬁle descriptors in
daemons by leveraging Linux’s file_permission LSM hook.
This hook is invoked whenever an inode is read or written,
as opposed to the commonly used inode_permission hook,
which is invoked when the ﬁle is opened. file_permission
provides Aquifer the ﬁle and the process performing the
read or write, regardless of how the process obtained the
ﬁle descriptor. Using file_permission also avoids ambigu-
ous read-write ﬁle open masks, as well as properly propa-
gating labels when the workﬂow label changes between ﬁle
open and ﬁle write. However, these advantages come at the
cost of degraded performance that results from retrieving
the ﬁle’s label for each read and write operation.
UI Screen Accessing a File: By using file_permission,
Aquifer leverages the Linux kernel’s tracking of ﬁle descrip-
tors. Hence, even when a ﬁle is written through a daemon,
Aquifer sees the UI screen accessing the ﬁle directly. When
a process in a UI workﬂow reads or writes a ﬁle, Aquifer
propagates the workﬂow label to and from the ﬁle in a stan-