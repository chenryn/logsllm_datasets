# dubbo源码浅析：默认反序列化利用之hessian2
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 一、前言
官方github描述：
    Apache Dubbo is a high-performance, java based, open source RPC framework.
Apache Dubbo是一款高性能、轻量级的开源Java
RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。
现在大部分企业开发，无论是微服务架构，还是传统的垂直切分架构，大部分都用到了RPC（远程过程调用），实现分布式的协作，其中有比较简单的RESTful方式的RPC实现，也有自定义协议自成一系的RPC实现，而大部分RPC实现框架都使用了一种或多种序列化方式对传输数据进行序列化以及反序列化。
Apache
Dubbo是本篇文章主要讲述的RPC实现框架，我会使用我一贯的源码浅析风格，对其进行原理细节的分析探讨，先从dubbo的简单使用，慢慢引申出其源码架构细节，最后在了解大概原理后，重点分析其默认hessian2序列化实现细节。
我希望您看完这篇文章之后，能对dubbo的大概架构和源码具有比较清晰的理解，以及对序列化、反序列化部分有充分的理解，希望为您学习dubbo源码走少一点弯路，并且能挖掘出dubbo的潜在安全问题，从而完善它，使它更加的健壮更加的安全。
## 二、源码浅析
###  2.1 简单使用
dubbo的使用非常简单，一般普遍使用的是传统的spring方式，不过这种方式使用上没有在spring-boot上使用更便捷。
**2.1.1 启动注册中心（zookeeper）**
启动一个本地的zookeeper，端口为2181
**2.1.2 服务端**
service（接口定义和实现相关）：
    public class A implements Serializable {
      String name = "xxxx";
      public String getName() {
        return name;
      }
      public void setName(String name) {
        this.name = name;
      }
    }
    public interface DemoService {
      String hello(A a);
    }
    public class DemoServiceImpl implements DemoService {
      public String hello(A a) {
        return "hello! " + a.getName();
      }
    }
spring xml配置（dubbo-provider.xml）：
       -->
启动jvm创建spring容器（main）:
    public class Main {
      public static void main(String[] args) {
        ApplicationContext applicationContext = new ClassPathXmlApplicationContext("dubbo-provider.xml");
      }
    }
**2.1.3 客户端**
spring xml配置（dubbo-consumer.xml）：
       -->
启动jvm，执行RPC（main）：
    public class Main {
      public static void main(String[] args) {
        ApplicationContext applicationContext = new ClassPathXmlApplicationContext("dubbo-consumer.xml");
        DemoService demoService = (DemoService) applicationContext.getBean("demoService");
        System.out.println(demoService.hello(new A()));
      }
    }
**2.1.4 RPC**
在上述注册中心、服务端、客户端依次执行后，可以看到，客户端输出了“hello! threedr3am”
###  2.2 源码跟踪
我们以上述spring的使用例子展开，一步一步的跟踪源码的执行流程。
从github clone到dubbo的源码后，可以发现，源码（2.6.x版本）分成了很多module
    ├── dubbo-all
    ├── dubbo-bom
    ├── dubbo-bootstrap
    ├── dubbo-cluster
    ├── dubbo-common
    ├── dubbo-compatible
    ├── dubbo-config
    ├── dubbo-configcenter
    ├── dubbo-container
    ├── dubbo-demo
    ├── dubbo-dependencies
    ├── dubbo-dependencies-bom
    ├── dubbo-distribution
    ├── dubbo-filter
    ├── dubbo-metadata
    ├── dubbo-monitor
    ├── dubbo-parent.iml
    ├── dubbo-plugin
    ├── dubbo-registry
    ├── dubbo-remoting
    ├── dubbo-rpc
    ├── dubbo-serialization
    ├── dubbo-test
接着，我们启动服务端main程序，这里我们略过spring容器的创建细节，因为spring容器的源码。。。这可以写一本书了，我们只从服务端读取解析dubbo-provider.xml配置创建容器后refresh的ServiceBean（dubbo-config中）开始，这里才是真正的dubbo的相关代码起始处。
这边贴一下，服务端程序启动时expose service的执行栈信息：
    com.alibaba.dubbo.remoting.transport.netty4.NettyTransporter.bind(NettyTransporter.java:32)
    com.alibaba.dubbo.remoting.Transporter$Adaptive.bind(Transporter$Adaptive.java)
    com.alibaba.dubbo.remoting.Transporters.bind(Transporters.java:56)
    com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchanger.bind(HeaderExchanger.java:44)
    com.alibaba.dubbo.remoting.exchange.Exchangers.bind(Exchangers.java:70)
    com.alibaba.dubbo.rpc.protocol.dubbo.DubboProtocol.createServer(DubboProtocol.java:285)
    com.alibaba.dubbo.rpc.protocol.dubbo.DubboProtocol.openServer(DubboProtocol.java:264)
    com.alibaba.dubbo.rpc.protocol.dubbo.DubboProtocol.export(DubboProtocol.java:251)
    com.alibaba.dubbo.rpc.protocol.ProtocolListenerWrapper.export(ProtocolListenerWrapper.java:57)
    com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper.export(ProtocolFilterWrapper.java:100)
    com.alibaba.dubbo.qos.protocol.QosProtocolWrapper.export(QosProtocolWrapper.java:62)
    com.alibaba.dubbo.rpc.Protocol$Adaptive.export(Protocol$Adaptive.java)
    com.alibaba.dubbo.registry.integration.RegistryProtocol.doLocalExport(RegistryProtocol.java:172)
    com.alibaba.dubbo.registry.integration.RegistryProtocol.export(RegistryProtocol.java:135)
    com.alibaba.dubbo.rpc.protocol.ProtocolListenerWrapper.export(ProtocolListenerWrapper.java:55)
    com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper.export(ProtocolFilterWrapper.java:98)
    com.alibaba.dubbo.qos.protocol.QosProtocolWrapper.export(QosProtocolWrapper.java:60)
    com.alibaba.dubbo.rpc.Protocol$Adaptive.export(Protocol$Adaptive.java)
    com.alibaba.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:515)
    com.alibaba.dubbo.config.ServiceConfig.doExportUrls(ServiceConfig.java:360)
    com.alibaba.dubbo.config.ServiceConfig.doExport(ServiceConfig.java:319)
    com.alibaba.dubbo.config.ServiceConfig.export(ServiceConfig.java:217)
    com.alibaba.dubbo.config.spring.ServiceBean.export(ServiceBean.java:266)
    com.alibaba.dubbo.config.spring.ServiceBean.onApplicationEvent(ServiceBean.java:106)
    com.alibaba.dubbo.config.spring.ServiceBean.onApplicationEvent(ServiceBean.java:53)
    org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:166)
    org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:138)
    org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:383)
    org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:337)
    org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:882)
    org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:545)
    org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:139)
    org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:83)
    com.threedr3am.learn.dubbo.Main.main(Main.java:12)
下一步，我们跟进dubbo-config的子module，也即dubbo-config-spring这个module，从它的com.alibaba.dubbo.config.spring.ServiceBean类开始。
从我们前面贴出来的执行栈信息，跟进com.alibaba.dubbo.config.spring.ServiceBean类的onApplicationEvent方法：
    @Override
    public void onApplicationEvent(ContextRefreshedEvent event) {
        if (isDelay() && !isExported() && !isUnexported()) {
            if (logger.isInfoEnabled()) {
                logger.info("The service ready on spring started. service: " + getInterface());
            }
            export();
        }
    }
  * isDelay()：判断服务端，也就是服务提供者provider是否在dubbo:service这个标签配置中配置了delay，若配置了delay值（毫秒为单位），则暴露expose服务会延迟到delay值对应的时间后。若配置了值，isDelay()会返回false，则不执行export()。
  * export()：暴露服务到注册中心
接着，跟进export方法：
    @Override
    public void export() {
        //重点方法
        super.export();
        // Publish ServiceBeanExportedEvent
        publishExportEvent();
    }
父类的expose方法：
    public synchronized void export() {
        //如果ProviderConfig配置存在，并且export、delay等配置为空，则读取ProviderConfig配置
        if (provider != null) {
            if (export == null) {
                export = provider.getExport();
            }
            if (delay == null) {
                delay = provider.getDelay();
            }
        }
        if (export != null && !export) {
            return;
        }
        //若配置了delay延迟暴露，则通过定时调度进行延迟暴露，否则立即暴露服务
        if (delay != null && delay > 0) {
            delayExportExecutor.schedule(new Runnable() {
                @Override
                public void run() {
                    doExport();
                }
            }, delay, TimeUnit.MILLISECONDS);
        } else {
            doExport();
        }
    }
expose方法做了synchronized同步处理，应该是为了避免并发执行。
doExport方法：
     protected synchronized void doExport() {
        if (unexported) {
            throw new IllegalStateException("Already unexported!");
        }
        if (exported) {
            return;
        }
        exported = true;
        if (interfaceName == null || interfaceName.length() == 0) {
            throw new IllegalStateException(" interface not allow null!");
        }
        checkDefault();
        //...忽略无关重要的细节
        checkApplication();
        checkRegistry();
        checkProtocol();
        appendProperties(this);
        checkStub(interfaceClass);
        checkMock(interfaceClass);
        if (path == null || path.length() == 0) {
            path = interfaceName;
        }
        doExportUrls();
        ProviderModel providerModel = new ProviderModel(getUniqueServiceName(), this, ref);
        ApplicationModel.initProviderModel(getUniqueServiceName(), providerModel);
    }
这个方法中，大部分逻辑都是对配置信息的检查：
  * checkDefault()：检查ProviderConfig是否存在，若不存在，则创建一个新的ProviderConfig，接着，从系统变量中读取相关约定的配置值设置进去。
  * checkApplication()：主要检查ApplicationConfig是否存在，若不存在，则和checkDefault()中的处理大体相同。application用于配置dubbo服务的应用信息。
  * checkRegistry()：检查RegistryConfig，同上处理，不过RegistryConfig是集合形式，具有多个配置，每一个RegistryConfig都代表一个注册中心配置。
  * checkProtocol()：检查ProtocolConfig，同上处理。ProtocolConfig是用于配置dubbo服务RPC所用的协议，一般都是默认使用dubbo协议进行通讯。
  * appendProperties(this)：对ServiceConfig进行配置追加处理，从系统变量读取约定key的配置值。
  * checkStub(interfaceClass)和checkMock(interfaceClass)：检查service的interface是否满足stub和mock。
  * doExportUrls()：暴露服务核心逻辑方法。
doExportUrls()：
    private void doExportUrls() {
        //读取注册中心配置
        List registryURLs = loadRegistries(true);
        //遍历协议配置，根据协议进行暴露服务
        for (ProtocolConfig protocolConfig : protocols) {
            doExportUrlsFor1Protocol(protocolConfig, registryURLs);
        }
    }
dubbo的设置，是基于总线模式，也就是它的配置传递，全部都靠URL这个类的实例进行传递，有好处也有坏处，好处是对于一些方法栈比较深的参数传递，在进行代码修改后，不需要修改传递中所涉及到的所有方法，而坏处是，不够直观，URL中到底存有哪些数据参数传递，可读性很差。
loadRegistries(true)：
    protected List loadRegistries(boolean provider) {
        checkRegistry();
        List registryList = new ArrayList();
        //判断注册中心配置是否为空，若是空的，那没必要继续走下去了
        if (registries != null && !registries.isEmpty()) {
            //遍历注册中心配置，读取相关配置信息，每一个对应一个URL存储
            for (RegistryConfig config : registries) {
                String address = config.getAddress();
                if (address == null || address.length() == 0) {
                    address = Constants.ANYHOST_VALUE;
                }
                String sysaddress = System.getProperty("dubbo.registry.address");
                if (sysaddress != null && sysaddress.length() > 0) {
                    address = sysaddress;
                }
                if (address.length() > 0 && !RegistryConfig.NO_AVAILABLE.equalsIgnoreCase(address)) {
                    Map map = new HashMap();
                    appendParameters(map, application);
                    appendParameters(map, config);
                    map.put("path", RegistryService.class.getName());
                    map.put("dubbo", Version.getProtocolVersion());
                    map.put(Constants.TIMESTAMP_KEY, String.valueOf(System.currentTimeMillis()));
                    if (ConfigUtils.getPid() > 0) {
                        map.put(Constants.PID_KEY, String.valueOf(ConfigUtils.getPid()));
                    }
                    if (!map.containsKey("protocol")) {
                        if (ExtensionLoader.getExtensionLoader(RegistryFactory.class).hasExtension("remote")) {
                            map.put("protocol", "remote");
                        } else {
                            map.put("protocol", "dubbo");
                        }
                    }
                    List urls = UrlUtils.parseURLs(address, map);
                    for (URL url : urls) {
                        url = url.addParameter(Constants.REGISTRY_KEY, url.getProtocol());
                        url = url.setProtocol(Constants.REGISTRY_PROTOCOL);
                        if ((provider && url.getParameter(Constants.REGISTER_KEY, true))
                                || (!provider && url.getParameter(Constants.SUBSCRIBE_KEY, true))) {
                            registryList.add(url);
                        }
                    }
                }
            }
        }
        return registryList;
    }
doExportUrlsFor1Protocol(protocolConfig, registryURLs)：
    private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List registryURLs) {
        //...代码略多，但基本都不是重点
    }
doExportUrlsFor1Protocol方法中，主要就是做了两件事：
  1. 对URL总线配置追加一些配置
  2. 对服务实现类进行动态代理，生成invoker，接着使用通讯协议实现类进行服务暴露
服务暴露的主要代码有两处：
    Invoker invoker = proxyFactory.getInvoker(ref, (Class) interfaceClass, registryURL.addParameterAndEncoded(Constants.EXPORT_KEY, url.toFullString()));
    DelegateProviderMetaDataInvoker wrapperInvoker = new DelegateProviderMetaDataInvoker(invoker, this);
    Exporter exporter = protocol.export(wrapperInvoker);
    exporters.add(exporter);
    Invoker invoker = proxyFactory.getInvoker(ref, (Class) interfaceClass, url);