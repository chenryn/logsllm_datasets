现在假设我们要编写一个清除一块连续内存的函数。当然，我们可以使用循环语句、逐个字节的复写
数据。但是现代的计算机内存总线都很宽，以字节为单位地清除效率会非常低。若以 4 字节或 8 字节为操
作单位进行 io 操作，那么操作效率会高一些。由于本例演示的是 64 位应用程序，所以我们就以 8 字节为
单位进行操作。不过，我们又当如何应对那些不足 8 字节的内存空间？毕竟我们的函数也可能清除容量不
足 8 字节的内存空间。 
因此，合理的算法应当是： 
 首先统计目标空间含有多少个连续的 8 字节空间，继而以 8 字节（64 位）为操作单位将其清除。 
 然后统计那些大小不足 8 字节的尾数、即上一步除法计算的余数，然后逐字节地将之清零。 
简单的循环语句即可完成第二步的任务。然而我们更希望把这个循环分解、展开： 
#include  
#include  
void bzero(uint8_t* dst, size_t count) 
{ 
         int i; 
         if (count&(~7)) 
                  // work out 8-byte blocks 
                  for (i=0; i>3; i++) 
                  { 
                           *(uint64_t*)dst=0; 
                           dst=dst+8; 
                  }; 
         // work out the tail 
         switch(count & 7) 
         { 
         case 7: *dst++ = 0; 
         case 6: *dst++ = 0; 
         case 5: *dst++ = 0; 
         case 4: *dst++ = 0; 
         case 3: *dst++ = 0; 
         case 2: *dst++ = 0; 
         case 1: *dst++ = 0; 
         case 0: // do nothing 
                  break; 
         } 
}  
我们来看看这个计算是如何完成的。待处理内存区域的大小是 64 位数据，它分为如下两个部分。 
7 
6 
5 
4 
3 
2 
1 
0 
… 
B 
B 
B 
B 
B 
S 
S 
S 
备注：B 代表大小为 8 字节的内存块；S 代表大小不足 8 字节的尾部内存块。 
当我们将输入的内存块的大小除以 8，其实就是将该值右移 3 位。然而不足 8 字节的内存块总数，即
异步社区会员 dearfuture(15918834820) 专享 尊重版权
450 
逆向工程权威指南（上册） 
这步除法计算的余数，恰恰是刚刚位移出去的那最后的三位。可见，把目标空间大小/即变量 count 右移 3
位，可求得它含有多少个 8 字节的内存块；令变量 counter 与数字 7 进行逻辑与运算可求得它有多少字节的
尾部内存块。 
当然，我们也得首先看看这块目标空间是否足够进行一次 8 字节的清除操作。因此首先就要检查变量
count 是否大于 7。为此，我们就要将变量 count 的最低三位清零，并将结果和零比较。如果该数大于零，
则表示这个数量 count 大于 7，我们就可以进行 8 字节的块操作。当然我们不需要知道它到底比 7 大多少，
只需知道它是否比 7 大，即 count 的高位是否为零。 
当然之所以能这样做，主要是因为 8 是 2 的 3 次方，而且“某数除以 2 的 n 次方”通过位移计算即可
实现，其他类型的数字就不能通过位移运算进行判断了。 
很难说这些技术是不是值得采用，毕竟这种技巧会明显降低源程序的可读性。然而这已经属于常见技
术了。凡是资深的编程人员，不论他愿否使用达夫装置，他都应当能够理解使用了这种技巧的程序。 
第一部分其实很简单，用 64 位的零填充所有 8 字节内存块。 
第二部分的难点在于其循环展开技术。达夫装置利用的是 switch()函数的滑梯效应。用人类的语言来
讲，这段代码的功能就是将变量 count 与数字 7 进行逻辑与运算，得到尾数，然后把它们逐个清零。如果
尾数为 0，那么直接跳转至函数尾声，不做任何操作。如果尾数是 1 的话，跳转到 switch()语句中清除单字
节的那条语句。如果尾数是 2 的话，跳转到 swith()语句中相应的位置执行清零操作；由于滑梯效应的存在，
函数会清除 2 个字节的空间，以此类推。当尾数的值为最大值 7 的时候，它会执行 7 次相同操作。 在这个
算法中，不会出现尾数大于 7，也就是 8 的情况，因为第一部分的指令已经清除了所有 8 字节的内存块。 
换而言之，达夫装置就是循环展开技术的一种特例。在老式设备上，它显然比普通循环的运行速度更
高。然而，对于现代的大多数 CPU 来说，一些体积短小的循环语句反而会比循环展开体的执行速度更快。
也许对于目前低成本的嵌入式 MCU（微控单元，例如单片机）处理器而言，达夫设备更有意义一些。 
我们下面来看看优化后的 MSVC 2012 的一些行为。 
dst$ = 8 
count$ = 16 
bzero    PROC 
          test    rdx, -8 
          je       SHORT $LN11@bzero 
; work out 8-byte blocks 
          xor  
r10d, r10d 
          mov 
r9, rdx 
          shr 
r9, 3 
          mov 
r8d, r10d 
          test 
r9, r9 
          je  
SHORT $LN11@bzero 
          npad 
5 
$LL19@bzero: 
          inc  
r8d 
          mov  
QWORD PTR [rcx], r10 
          add  
rcx, 8 
          movsxd rax, r8d 
          cmp  
rax, r9 
          jb  
SHORT $LL19@bzero 
$LN11@bzero: 
; work out the tail 
          and  
edx, 7 
          dec  
rdx 
          cmp  
rdx, 6 
          ja  
SHORT $LN9@bzero 
          lea  
r8, OFFSET FLAT:__ImageBase 
          mov  
eax, DWORD PTR $LN22@bzero[r8+rdx*4] 
          add  
rax, r8 
          jmp  
rax 
$LN8@bzero: 
          mov  
BYTE PTR [rcx], 0 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 40 章  达 夫 装 置 
451 
          inc  
rcx 
$LN7@bzero: 
          mov  
BYTE PTR [rcx], 0 
          inc  
rcx 
$LN6@bzero: 
          mov  
BYTE PTR [rcx], 0 
          inc  
rcx 
$LN5@bzero: 
          mov  
BYTE PTR [rcx], 0 
          inc  
rcx 
$LN4@bzero: 
          mov  
BYTE PTR [rcx], 0 
          inc  
rcx 
$LN3@bzero: 
          mov  
BYTE PTR [rcx], 0 
          inc  
rcx 
$LN2@bzero: 
          mov  
BYTE PTR [rcx], 0 
$LN9@bzero: 
          fatret  0 
          npad  
1 
$LN22@bzero: 
          DD  
$LN2@bzero 
          DD  
$LN3@bzero 
          DD  
$LN4@bzero 
          DD  
$LN5@bzero 
          DD  
$LN6@bzero 
          DD  
$LN7@bzero 
          DD  
$LN8@bzero 
bzero    ENDP 
这个函数的第一部分与源程序一一对应。第二部分的循环展开体也不难理解：switch 语句通过转移指
令直接跳到合适的位置。由于 MOV/INC 指令对之间没有其他代码，所以 swtich 语句在转移到指定标签后
不会越过后续的转移标签，它会执行完所需的所有指令。 
另外，我们注意到MOV/INC指令对占用固定的字节数（3+3=6 字节）。在注意到这个问题之后，我们
就可以舍去switch()语句的转移表结构，将输入值乘以 6，并直接跳转到如下地址：目前的RIP地址+输入值
*6。这样一来，由于省掉了从转移表的查询操作，执行速度会更快。对于乘法来说，数字 6 是一个计算效
率不高的乘数因子，或许乘法运算的速度比表查询的转移指令更慢；不过所谓“深度优化”就是这个思路
①
① 作为一个练习，为了去掉跳转表，读者可以尝试重新编写代码。上述 MOV/INC 指令对可以重写成 4 字节或者 8 字节，当然
一个字节也可以，比如 STOSB 指令。 
。
在介绍循环展开技术时，过去的教科书就是这样介绍“达夫设备”的。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 4411 章
章    除
除以
以 99  
我们来看一个非常简单的函数： 
int f(int a) 
{ 
         return a/9; 
}; 
41.1  x86 
x86 平台编译器的编译方法十分直白： 
指令清单 41.1  MSVC 
_a$ = 8      
; size = 4 
_f     PROC 
     push  ebp 
     mov  
ebp, esp 
     mov  
eax, DWORD PTR _a$[ebp] 
     cdq  
    ; sign extend EAX to EDX:EAX 
     mov  
ecx, 9 
     idiv  ecx 
     pop  
ebp 
     ret  
0 
_f   ENDP 
IDIV 指令是除法指令。它会从寄存器对 EDX:EAX 中提取被除数、从 ECX 寄存器中提取除数。计算
结束以后，它把计算结果/商存储在 EAX 寄存器里，把余数存储在 EDX 寄存器。除法计算之后，商就位于
EAX 寄存器里，直接成为 f()函数的返回值；因此没有其他值传递的操作。为了通知 IDIV 指令从 EDX：
EAX 寄存器对中提取 64 位被除数，编译器在 IDIV 指令之前分派了 CDQ 指令。IDIV 指令就会进行 MOVSX
那样的符号位处理和数据扩展处理。 
启用编译器的优化选项之后，可得到下述程序： 
指令清单 41.2  采用 MSVC 优化 
_a$ = 8  
  ; size = 4 
_f     PROC 
     mov     ecx, DWORD PTR _a$[esp-4] 
     mov     eax, 954437177   ; 38e38e39H 
     imul  ecx 
     sar  
edx, 1 
     mov  
eax, edx 
     shr  
eax, 31 
  ; 0000001fH 
     add  
eax, edx 
     ret  
0 
_f     ENDP 
编译器用乘法指令来变相实现除法运算。大家知道乘法会比除法运行快很多。使用这里介绍
①
① 可以看 War02 pp.10-3 中介绍的用乘法来代替除法的部分。 
的方法
可以有效提高程序效率、节省时间开销。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 41 章  除以 9 
453 
在编译优化中，我们常常将其称为“强度减轻”的办法。 
若使用 GCC 4.4.1 编译此程序，即使我们刻意不启用其优化选项，GCC 的非优化编译结果也足以和
MSVC 的优化编译结果媲美。 
指令清单 41.3  不带优化的 GCC 4.4.1  
        public f 
f      proc near 
arg_0 = dword ptr  8 
        push     ebp 
        mov     ebp, esp 
        mov     ecx, [ebp+arg_0] 
        mov     edx, 954437177 ; 38E38E39h 
        mov     eax, ecx 
        imul     edx 
        sar     edx, 1 
        mov     eax, ecx 
        sar     eax, 1Fh 
        mov     ecx, edx 
        sub     ecx, eax 
        mov     eax, ecx 
        pop     ebp 
        retn 
f      endp 
41.2  ARM 
ARM 处理器和其他的 RISC 处理器一样，“纯洁”得不支持硬件级别的除法指令。此外，这种 CPU 还
不难“直接”进行 32 位常量的乘法运算（32 位 opcode 容纳不下 32 位常量）。因此，在进行除法运算时，
编译器会混合加减法运算和位移运算、变相实现除法运算（详情请参阅第 19 章）。 
本节引用参考书目 Ltd94（第 3.3 节）的一个例子，介绍一个“32 位数除以 10”的例子，分别计算商
和余数。 
; takes argument in a1 
; returns quotient in a1, remainder in a2 
; cycles could be saved if only divide or remainder is required 
     SUB     a2, a1, #10  
    ; keep (x-10) for later 
     SUB     a1, a1, a1, lsr #2 
     ADD     a1, a1, a1, lsr #4 
     ADD     a1, a1, a1, lsr #8 
     ADD     a1, a1, a1, lsr #16 
     MOV     a1, a1, lsr #3 
     ADD     a3, a1, a1, asl #2 
     SUBS    a2, a2, a3, asl #1      ; calc (x-10) - (x/10)*10 
     ADDPL   a1, a1, #1  
    ; fix-up quotient 
     ADDMI   a2, a2, #10  
    ; fix-up remainder 
     MOV  
pc, lr 
41.2.1  ARM 模式下，采用 Xcode 4.6.3（LLVM）优化 
__text:00002C58 39 1E 08 E3 E3 18 43 E3 MOV      R1, 0x38E38E39 
__text:00002C60 10 F1 50 E7                SMMUL    R0, R0, R1 
__text:00002C64 C0 10 A0 E1                 MOV      R1, R0,ASR#1 
__text:00002C68 A0 0F 81 E0                 ADD      R0, R1, R0,LSR#31 
__text:00002C6C 1E FF 2F E1                 BX       LR 
这里的代码和采用优化算法时的 MSVC 与 GCC 基本相同。很明显，LLVM 采用了相同的算法来处
异步社区会员 dearfuture(15918834820) 专享 尊重版权
454 
逆向工程权威指南（上册） 