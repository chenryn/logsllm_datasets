### Coordinate Encoding and Path Determination

It is not necessary to assign globally unique names to each hop in a coordinate's path. As long as it is possible to determine the position along the path at which two coordinates diverge, the distance can be computed. By analyzing the distribution of node degrees in the trees within our trusted vantage points, we found that, on average, each next-hop identifier can be encoded with just 2 bits. Similarly, encoding the full Round-Trip Time (RTT) between the vantage point and each hop is unnecessary. Using difference encoding for RTTs, we found that, on average, each hop’s RTT can be encoded with 6 bits. These techniques reduce the size of a coordinate to 260 bytes.

### Comparison with Vivaldi

Although this reduced coordinate size is still larger than that of Vivaldi, Treeple requires only a single interaction to compute a peer’s coordinate, which can then be used for weeks. In contrast, Vivaldi requires constant exchanges of coordinates. Over any reasonable period, Treeple’s bandwidth overhead is smaller than that of Vivaldi.

### Cost of Traceroute Measurements

It might be argued that the cost of vantage points performing traceroutes to other nodes on the Internet is high. However, vantage points need to perform these measurements only once every few weeks, as shown in Section 4.5. Additionally, iPlane conducts these measurements daily on PlanetLab nodes.

### Summary

On the large, real-world iPlane dataset, Treeple performs comparably to the Vivaldi network coordinate system. The median relative error when using 20 trusted nodes (note that GNP, a centralized network coordinate system, uses 20 trusted landmarks) is 0.26 for our system and 0.25 for Vivaldi. Thus, Treeple’s latency estimation is as accurate as previous network coordinate systems while being the first to provide provable security, meeting our goal of simultaneously providing security and accuracy. As expected, using more vantage points improves accuracy, though at the cost of relying on more trusted nodes. The communication and processing overheads for Treeple are also relatively small. Finally, Treeple positions can accurately predict network distances over long periods, including the full 21-day period of data used in our evaluation.

### Related Work

Several other systems have been published [9, 34, 4, 28] that do not use network coordinates to find close nodes, but none can estimate the distance between arbitrary nodes. Other projects have produced services that allow one peer to estimate its latency to another.

- **IDMaps [9]**: One of the first systems to estimate network latency between two hosts. Hosts perform measurements to central nodes called tracers and can approximate their latency to other hosts without direct contact. IDMaps cannot be used by a third party to predict latency between pairs of hosts.
- **Sequoia [27]**: Approximately represents Internet latencies and bandwidth as a tree metric. For a small dataset, this allows accurate prediction of latency and bandwidth, comparable to Vivaldi. However, Sequoia relies on a complete view of the reconstructed tree metric; every node must know the complete tree and participate in the protocol.
- **iPlane [21] and iPlane Nano [22]**: Attempt to map the entire Internet to produce an atlas of link-to-link latency, bandwidth, and loss rate. In iPlane, a central database server responds to path queries from peers. In iPlane Nano, the atlas is compressed to about 7MB and distributed to end hosts, which download about 1MB of updates daily. Hosts use this atlas to compute predicted latencies using shortest-path algorithms, resulting in high computational and bandwidth overhead.

All these systems construct a "global map" of the peer topology by relying on peers to report pairwise latency and traceroute measurements. None of these systems consider security; the measurements taken by all peers are trusted. In contrast, Treeple prioritizes security and produces "local" positions for each peer, trusting only a small set of end-hosts.

### Discussion and Conclusion

#### Traceroute Complications

Several issues, such as multiple interfaces, load balancers, multi-protocol label switching, and non-responding hosts, can affect the accuracy of paths returned by traceroute. In our evaluation, we did not use special techniques to address these issues. While these issues do not present a security challenge for Treeple, resolving them could improve accuracy. For example, consistently resolving aliases would place the common ancestor later in a path, decreasing the estimated distance between two nodes. Thus, the performance evaluation in Section 4 can be seen as conservative, and we expect measures to improve Treeple's accuracy.

#### Vantage Point Migration

Although we treat vantage points as fixed in our theoretical treatment, in practice, the set of vantage points {T1, ..., Tk} can be managed using standard mechanisms for trusted server migration, such as DNS, DHTs, and Tor. It is straightforward to implement the Distance function to be robust to additional or missing vantage points—identify vantage points by verification key and compute distances using only the positions computed by common vantage points. Executables can phase out support for discarded vantage points, while peers running older executables will continue to function with slightly reduced accuracy.

#### Threat Model and Stability

Treeple positions are extremely stable and can be maintained with very low overhead compared to traditional network coordinate schemes. This stability, combined with the provable security, makes Treeple a robust solution for network distance estimation.

### Acknowledgments

We thank our Shepherd, Suman Banerjee, for his input on improvements to this paper. We also thank Yongdae Kim, Zhi-Li Zhang, Roger Dingledine, and Brighten Godfrey for helpful comments and discussions about Treeple. This work was supported by the National Science Foundation under grant CNS-0716025.

### Router Compromise

As discussed in Section 2, under the current Internet architecture, the compromise of even a single BGP router can render meaningless the measurements or estimates of any latency estimation scheme. Thus, network coordinate systems (and schemes based on them [1, 12, 16, 20, 4, 2, 6]) are insecure against compromised routers. However, since router compromises are possible, it would be desirable to consider whether, in a future network that secures path discovery and does not use policy-based routing, it is possible to reason about the security Treeple (or any other latency estimation scheme) can offer against router compromise.

To be concrete, we imagine a network (not the current Internet) where a corrupted router can only intercept or delay traffic between a small fraction of the pairs of peers. In this case, it might be possible to use the trusted vantage points in Treeple to build a simple reputation system for router edges. If a particular edge exhibits variable behavior, as measured by a vantage point, paths containing that edge could be marked as untrustworthy. As long as some paths remain, the influence of these adversarial edges would be limited. Similarly, individual nodes can maintain a "local" reputation, calculating whether a given path consistently leads to poor performance and, if so, dropping the path from their coordinates (replacing it with ⊥). The exact nature of the security guarantees these mechanisms can provide would depend on the nature of the routing protocol in this hypothesized future network architecture.

### Conclusion

We propose Treeple, a provably secure network distance estimation service, where the estimated network distance differs from the real network distance by 26%. The accuracy of the system is comparable to using a network coordinate system, with a median relative error of 25%. Additionally, Treeple is provably secure, whereas all previously proposed schemes are vulnerable to attacks within the Treeple threat model.