with an API (createPackageContext) to create contexts for
other applications that are installed on the system, identiﬁed
by their package name. Using this API, an application can
retrieve the context of another application, provided that it
knows the other application’s package name. By specifying
certain ﬂags when creating the package context, the appli-
cation can cause the system not only to load another ap-
plication’s resources, but also create a class loader for its
3
code. This way, an application can load the Java classes
contained in another application. Under certain circumstances
(i.e.,
if both the ﬂags CONTEXT INCLUDE CODE and
CONTEXT IGNORE SECURITY are speciﬁed in the call to
createPackageContext), the system does not verify that the
applications originate from the same developer or that the
application to be loaded satisﬁes any criteria at all. This means
that an application can load and execute any other application’s
code.
Despite the alarming name of the necessary ﬂag CON-
TEXT IGNORE SECURITY, we found a large number of
applications using this technique, apparently ignoring the re-
sulting security implications (see Section V for details).
Package contexts offer another way for attackers to inject
code into benign applications: If an attacker manages to install
an application with the same package name as the expected le-
gitimate one and the loading application is careless in verifying
integrity and authenticity, then the attacker’s code is executed
within the loading application (and with that application’s
privileges). We found many applications that are vulnerable to
this attack, putting millions of users at risk. Even well-known
frameworks do not take appropriate measures to avoid attacks.
In Section V-B2, we show how to use this attack to exploit any
application that is based on a very common app framework in
versions from before July 2013.
3) Native code: As described in Section II-A, Android
applications are generally written in Java, but they are allowed
to execute native code (i.e., ARM assembly for most of the
current Android devices) at any time. Using the Java Native
Interface (JNI), the Java portion of an application can interact
with the native portion, which is commonly developed in C.
As mentioned previously, Android enforces the same priv-
ilege checks on native code as on Java code. For instance, an
application cannot open an Internet socket from native code
without permission to access the Internet. However, there is
one distinctive advantage for attackers when running native
code: While they have to go through a well-deﬁned API to
load code into the Java environment, they can easily load and
execute code from native executables in a variety of ways.
The fundamental advantage for attackers is that there is no
distinction between code and data at the native level, while
Java requires an application to explicitly load a class ﬁle in
order to run its code. This signiﬁcantly complicates protection
against malicious native code.
With respect to attacks against benign applications it should
be noted that Android imposes no restrictions on location or
provenance of native code that an application loads. So in
theory, if attackers can modify the ﬁles that benign applications
load, they can cause them to load and execute malicious code.
We mention this attack only for completeness – in our analysis,
we did not ﬁnd an application that is vulnerable to such an
attack, because applications usually only load native code from
their own APK (which is not writable for applications) and use
the other techniques described in this section if they need to
load code from external sources.
4) Runtime.exec: The Java class Runtime provides a
method exec, which allows applications to execute arbitrary
binaries. Internally, exec is roughly equivalent to the Linux sys-
tem calls fork and exec. Thus, it provides a similar functionality
as the well-known C function system(), which gives a program
access to a system shell. Again, the operating system does not
check where the binary is located or where it comes from. A
malicious application can therefore use system binaries, such
as /bin/sh, to execute arbitrary commands.
5) APK installation: On Android systems, the Package
Manager Service is responsible for installing and removing
applications. While this service is commonly used as back-
end for market applications, such as Google Play or Amazon
Market, applications can also directly request the installation of
APKs. In such a case, the package manager prompts the user
whether or not to install the APK, displaying the requested
permissions along with information about the application. If
the user agrees, the application is installed on the system just
like any application downloaded from an application store.
While not as stealthy as the techniques presented above,
APK installations still provide attackers with a way to down-
load and install malicious code at runtime. The package
manager ensures that APKs carry a valid signature before it
installs them, but there are no requirements as to the trust
level of the signature. In fact, the package manager accepts
any self-signed certiﬁcate for use in a package signature. Thus,
the signature does not provide any guarantees about the origin
of an application. It is only used to determine whether two
applications originate from the same developer, e.g., to ensure
that the same developer created an application and the alleged
update. If an attacker is able to replace the APK that a benign
application tries to install with a malicious one, the installing
application does not detect the attack unless it implements a
custom veriﬁcation mechanism.
Note that the user has to enable sideloading in the system
settings ﬁrst in order to install applications from any source
other than the preferred store of the device manufacturer (cf.
Section II-A). However, any user who wants to use an alterna-
tive application store has to do the same. In an effort to assist
users in the process of setting up their devices, the providers
of such application stores usually offer detailed instructions
on how to ﬁnd the sideloading setting, often without warning
about potential security implications. For this reason, we can
assume that sideloading is enabled on a considerable portion
of Android devices.
We found that APK installations are used by many well-
known applications. For example, Facebook used direct APK
installations rather than regular updates through Google Play
in certain cases in April 2013 (further discussed below).
B. Motivation for loading external code
We found that many benign applications load additional
code at runtime. There are legitimate reasons for this behavior,
which we will present in this section.
1) A/B testing and beta testing: It is common for software
manufacturers to test modiﬁed versions of their applications
with a small subset of their users in order to evaluate user
satisfaction in comparison to the established version. This
approach is usually referred to as A/B testing. Until recently,
Google Play did not offer a way for developers to roll out an
update only to a portion of their users, so some developers
used the techniques presented previously to achieve the same
4
Application A
Android system
Application B
Framework application
Application code
Application code
Framework stub
Framework stub
Common
framework
load code
Android system
Application A
Application B
Application code
Application code
Framework
Update 
server
request new version
Fig. 1. Several applications load code from a common framework.
Fig. 2. Some frameworks implement self-update functionality, downloading
and executing code from remote computers.
effect. Most notably, Facebook used APK installations starting
in April 2013 to install updates on selected users’ devices.
There are also several frameworks that offer support for
beta testing to application developers, often based on APK
installations (see Section V). In June 2013, Google announced
the introduction of A/B testing mechanisms for the Google
Play store at the developer conference Google I/O. This will
allow application developers to refrain from implementing
custom (and potentially insecure) techniques.
2) Common frameworks: On most desktop operating sys-
tems, including Windows and Linux, it is common to install
libraries centrally on the system rather than bundling them
separately with every binary that uses them. This is useful to
save disk space and to avoid conﬂicting versions of libraries
on the same system. The same concept can be employed for
Android applications. In this scenario, multiple applications
are based on the same framework, which is installed on the
device as a separate application. All the applications based
on the framework contain stub code (usually provided by the
framework’s developers) that causes them to load code from
the framework application. See Fig. 1 for an illustration.
If an attacker is able to install an application that pretends
to provide the common framework, e.g., by convincing the user
to install a seemingly benign application that internally uses
the same package name as the framework, then applications
based on this framework will load the attacker’s code instead
of the real framework. Without custom integrity checks, the
applications will run the malicious code with their own per-
missions, and the attacker gains full access to their internal
data.
The approach of loading a common framework was em-
ployed by a well-known company developing web and multi-
media software. They used it for their multi-platform applica-
tion framework until June 2013, when they began to bundle
the framework with every Android application that uses it. In
Section V-B2, we demonstrate a code injection attack against
applications based on this framework.
3) Framework updates: As outlined in Section II-A, many
current applications bundle various frameworks for additional
functionality. Well-known examples are advertisement frame-
works, which display advertisements to the user and function
largely independently from the rest of the application. As
mentioned previously, it is particularly difﬁcult for framework
developers to ensure that the latest version of their software
is used by all applications. Therefore, some frameworks use
the previously discussed techniques to load external code
in an effort to implement a self-update mechanism that is
independent from updates of the containing application. Fig. 2
illustrates the concept.
Our analysis shows that such update mechanisms are often
implemented in a vulnerable way that allows attackers to
replace the legitimate updates with malicious code. This effec-
tively makes every application that is based on such a frame-
work vulnerable to code injection attacks. In Section V-B1, we
show an attack against an application that contains a vulnerable
advertisement framework.
4) Loading add-ons: Some applications can be extended by
add-ons that are installed as separate applications. Examples
that we found during our analysis include an SMS application
that loads design themes and a game that loads additional
levels. In most cases, the additional content that applications
loaded contained not only data, but also executable code.
When identifying and loading add-ons, applications have
to ensure that the external code they execute is indeed part of
a valid add-on. We found that such checks, if existent at all,
are often implemented in an insecure way. Thus, malware can
pretend to provide add-ons for legitimate applications, which
those applications erroneously load and execute.
Clearly, these are legitimate reasons for benign applications
to load external code. Thus we arrive at the conclusion that
entirely removing the ability to load additional code at runtime
would limit Android applications too much. For this reason,
we develop a protection system that provides a secure way for
applications to load code.
C. Policy change for Google Play
Google changed the content policy for Google Play in April
2013, adding the following sentence [16]:
“An app downloaded from Google Play may not
modify, replace or update its own APK binary code
using any method other than Google Play’s update
mechanism.”
The statement does not address all of the previously
described code-loading mechanisms, but even if it did, there
are several reasons why we believe that this change in policy
would by no means constitute a solution to the issue: As
discussed above, there are legitimate reasons for applications
or application components to load and execute external code.
If Google tried to prohibit the use of those techniques entirely,
they would remove a valuable mechanism from application and
framework developers. Furthermore, at the time of writing, the
5
new policy is not technically enforced. There is still a large
number of applications on Google Play that load external code
(see Section V). Finally, when we developed our detection
tool for code-loading behavior in Android applications, we
found that, in some cases, it is very challenging to determine
reliably whether or not an application loads additional code
(see Section VII).
D. Problems with loading external code
After having discussed the mechanisms that allow applica-
tions to load code and the reasons for benign applications to
do so, we now show how the ability to load additional code
can lead to severe security issues. Corresponding with the two
threat scenarios deﬁned in Section II-B, we present two types
of attacks:
1)
2)
A malicious application that is able to evade detection
by the Google Bouncer, so that it is made publicly
accessible on Google Play.
Code injection attacks against benign applications
that use code-loading techniques, affecting millions
of users.
1) Code loading as evasion technique: Authors of malware
can use code loading to evade ofﬂine analysis systems such as
the Google Bouncer, as described in Section II-B.
We developed a proof-of-concept application to show the
viability of this attack scenario: We demonstrate that an
attacker can write a minimal application that passes the checks
imposed by Google Play and downloads the actual malicious
code only after it is installed on users’ devices, i.e., after the
store’s vetting process.
Our demonstration application requests permissions to ac-
cess the Internet and to write to external storage. It contains
only one single activity with a download button and a log view.
The download button causes the application to connect to our
server and download an APK. It loads the APK and executes
whatever code the ﬁle contains.
Note that our server has not offered malicious code at any
point in time. It only ever answers requests from our own test
devices, and the code that it serves just opens the browser on
the system. Thus, our experiments did not impose any risk on
users who might have installed our application from Google
Play.
We submitted the application to the Google Play store in
April 2013, where it was accepted within approximately 90
minutes. After that, the application was publicly accessible in
Google’s application store. The Google Bouncer did not detect
the application’s potential to download and execute malicious
code. Since we logged all requests to our server, we know
that the Bouncer did not even request the current payload at
the time before admitting the application. The application is
essentially free to download any code from our servers and
execute it on the users’ devices. Thus, an attacker could use
this technique to circumvent the checks that Google imposes.
As of July 2013, the application has been installed 255
times by users of Google Play, although it is not advertised
in any way. Even after it gained some popularity, it was not
re-checked and removed from the store. Essentially, there is
no way for the Bouncer to know that we do not distribute ma-
licious code. So any malware could follow the same approach
to evade detection. We believe that this is a conceptual ﬂaw
in Android’s security model.
Furthermore, we evaluated the effectiveness of anti-virus
software in detecting malicious code that is dynamically loaded
by an Android application. Speciﬁcally, we developed a simple
downloader application that, as soon as it is opened, downloads
a malicious APK ﬁle from our server and asks the user to
install it. The malicious APK that our server provided was a
sample of the well-known Android malware family PJApps.
We then used two meta-anti-virus scanners (VirusTotal2 and
AndroTotal3) to evalute the detection rate of several anti-
virus applications on both the original PJApps sample and the
downloader application we developed. When presented with
the PJApps sample, 33 out of 46 anti-virus applications used
by VirusTotal and all 7 used by AndroTotal correctly ﬂagged
the APK as malicious. However, no anti-virus was able to
detect the malicious nature of our downloder application. The
anti-virus software employed by VirusTotal did not perform
any connection to our server to obtain the malicious sample.
The scanners used by AndroTotal performed connections to
our distribution server from three different IP addresses, but