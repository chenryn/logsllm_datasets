title:Bitcontracts: Supporting Smart Contracts in Legacy Blockchains
author:Karl W&quot;ust and
Loris Diana and
Kari Kostiainen and
Ghassan Karame and
Sinisa Matetic and
Srdjan Capkun
Bitcontracts: Supporting Smart Contracts in Legacy
Blockchains
Karl Wüst∗, Loris Diana∗, Kari Kostiainen∗, Ghassan Karame†, Sinisa Matetic∗, Srdjan Capkun∗
∗Department of Computer Science, ETH Zurich
†NEC Labs
Abstract—In  this  paper  we  propose  Bitcontracts,  a  novel 
solution  that  enables  secure  and  efﬁcient  execution  of  generic 
smart  contracts  on  top  of  unmodiﬁed  legacy  cryptocurrencies 
like  Bitcoin  that  do  not  support  contracts  natively.  The  starting 
point  of  our  solution  is  an  off-chain  execution  model,  where  the 
contract’s  issuers  appoints  a  set  of  service  providers  to  execute 
the contract’s code. The contract’s execution results are accepted 
if  a  quorum  of  service  providers  reports  the  same  result  and 
clients are free to choose which such contracts they trust and use. 
The  main  technical  contribution  of  this  paper  is  how  to  realize 
such a trust model securely and efﬁciently without modifying the 
underlying blockchain. We also identify a set of generic properties 
that  a  blockchain  system  must  support  so  that  expressive  smart 
contracts  can  be  added  safely,  and  analyze  popular  existing 
blockchains  based  on  these  criteria.
I.
contracts, 
INTRODUCTION
popularized 
by 
Smart 
systems 
like 
Ethereum  [48],  allow  nearly  arbitrary  business  logic  to 
be  implemented  without  a  trusted  third  party.  Smart  contracts 
are  programs  whose  code  and  execution  results  are  recorded 
on  the  chain.  A  typical  contract  enables  contract  participants 
to  load  money  to  an  address  or  account  that  is  controlled  by 
the  contract’s  code  which  deﬁnes  how  the  loaded  money  can 
be  later  moved  out  of  the  contract.
Adding  contracts  to  currencies. While  the concept  of  smart 
contracts  has  shown  great  promise,  many  currently  popular 
cryptocurrencies, such as Bitcoin [36], Litecoin, Ripple [2] or 
Stellar [3], do not natively support them. Therefore, it becomes 
relevant to investigate if contract execution capabilities can be 
added  to  such  blockchains.  Since  such  blockchain  platforms 
have already attracted signiﬁcant amounts of investment, users 
and developers, it is often preferable to extend those platforms 
with contract execution rather than try to migrate the existing 
users,  assets,  and  investments  to  other  platforms.
Another  reason  for  extending  existing  blockchains  with 
new  contract  execution  capabilities  is  the  fact  that  even  if 
some  of  the  existing  platforms  support  contracts,  the  types 
of  contracts  that  can  be  implemented  on  these  systems  may 
be  severely  limited.  For  example,  Ethereum  uses  a  Turing-
complete  programming  language,  but  the  complexity  of  com-
putations  that  can  be  implemented  as  contracts  are  very  re-
stricted,  due  to  the  built-in  block  gas  limit.
Network  and  Distributed  Systems  Security  (NDSS)  Symposium  2021
21-25  February  2021, Virtual 
ISBN  1-891562-66-5
https://dx.doi.org/10.14722/ndss.2021.24294
www.ndss-symposium.org
In this paper, our main goal is to design a solution that adds
expressive smart contract execution support as a subsystem
to existing legacy blockchain systems. The primary usage of
our solution is to enhance systems like Bitcoin that have no
built-in smart contract capabilities. The secondary usage is
to extend the contract execution capabilities of platforms like
Ethereum that support contracts but have severe limitations on
the complexity of allowed computations.
Previous work. Recent research has explored different ways
to add contract execution capabilities to blockchains.
For instance, Arbitrum [25] and ACE [50] use off-chain
issuers appoint a set of
execution models, where contract
managers who are responsible for executing the contract and
communicating the results back to the chain. Hyperledger
Fabric [5] uses a similar model in a permissioned setting with
an execute-order-validate architecture in which transactions are
executed before ordering. The main drawback of such solutions
is that they are newly purpose-built systems, and therefore
such systems cannot be deployed on legacy systems without
modifying the underlying blockchain.
Another proposal, FastKitten [16], relies on enclaved exe-
cution and collaterals, but only supports short-lived contracts
that are restricted to known participants. In addition, such a
system cannot tolerate enclave compromise. Recently discov-
ered attacks [11], [45], [29], [13], [44] have shown that TEE
compromise is a relevant threat. We discuss the limitations of
previous solutions in more detail in Section II-B.
Our solution. In this paper, we propose a novel system called
Bitcontracts that adds expressive smart contract execution
capabilities to legacy cryptocurrencies without requiring pro-
tocol changes to the legacy system, and overcomes the main
limitations of previous solutions.
the contract
The starting point of our solution is an off-chain execution
model, similar to previous systems like Arbitrum, ACE, or
Fabric. In Bitcontracts,
issuer appoints a set
of service providers that execute the contract’s code. The
appointed execution set is recorded on the chain together with
the contract’s code and the contract participants are free to
choose if they accept this set. Instead of requiring that all
service providers agree on the execution result (as is done in
Arbitrum) or trusting the execution environments fully (as is
required in FastKitten), we leverage a more ﬂexible quorum-
based trust model similar to ACE, where execution results
are accepted when t out of n service providers report the
same result. Such a model can provide both strong security
(up to t − 1 service providers can be compromised) and good
availability (up to n−t service providers can be unresponsive).
The main technical challenge that we solve is how to
realize such a trust model securely and efﬁciently without re-
quiring any modiﬁcations to the underlying legacy blockchain
platform. To achieve this, Bitcontracts leverages the follow-
ing two ideas. Our ﬁrst observation is that by storing the
state of each contract on the chain,
the service providers
can remain stateless which reduces protocol complexity and
simpliﬁes deployment, since service providers do not need
to communicate with each other and do not have to run
expensive (in terms of communication) consensus protocols
to agree on the current state of the contract which makes our
solution efﬁcient. Our second observation is that by binding
the validity of each execution result to the latest valid state of
the chain, we can enable arbitrary quorum sizes and prevent
race conditions where the adversary obtains two acceptable
quorums for different execution results affecting the same
contract. Due to these observations, Bitcontracts does not
instantiate a new consensus protocol. Instead, Bitcontracts
is purposefully designed such that
it guarantees execution
integrity and serializability by leveraging the existing con-
sensus protocols of the underlying legacy blockchain. We do
this using an execute-order model, which ensures (at ordering
time) that only serializable transactions can be included in
the chain. This is a crucial difference to the order-execute-
validate architecture of Hyperledger Fabric, which requires an
additional validation step that cannot be retroﬁtted into a legacy
blockchain without protocol changes. We discuss this in more
detail in Section II-B.
Bitcontracts requires no changes to the underlying legacy
blockchain, as long as it supports four generic properties. The
ﬁrst property is auxiliary storage which is needed to store
contract state on the chain. Auxiliary storage is possible by
encoding data to legacy transactions. The second is collective
authorization which is supported as multi-signature transac-
tions by most blockchains. The third is state dependency which
ensures serializability in our solution. State dependency is
implicitly supported in all UTXO-based systems and can be
explicitly enforced in most account-based systems. The fourth
property is transaction atomicity which enables contracts to
perform complex operations safely.
We analyze popular cryptocurrencies, including Bitcoin,
Litecoin, Zcash, Ethereum, Ripple, and Stellar and show that
these properties are supported in most popular blockchain
deployments. In few cases, when one of the properties is
missing, we explain how they could be easily added.
Finally, we analyze Bitcontracts in three ways. First, we
explain how contract execution can be incentivized in a solu-
tion like Bitcontracts through standard means like execution
fees and subscription models. Second, we prove that Bitcon-
tracts provides strong safety and liveness guarantees under
our chosen, ﬂexible trust model. And third, we implement a
prototype of Bitcontracts that runs Python contracts on top
of unmodiﬁed Bitcoin and other legacy cryptocurrencies and
show that the involved transaction fees are small (e.g., few
USD cents per contract call). We also evaluate the transaction
sizes and costs for Bitcontracts in comparison to Ethereum, by
crawling data from 130k Ethereum blocks and leveraging the
contract call transactions from the 100 most popular Ethereum
contracts. We conclude that running popular smart contracts
in Bitcontracts is practical — and often even cheaper than in
Ethereum.
Contributions and roadmap. To summarize, in this paper we
make the following contributions:
• New solution: We propose Bitcontracts that enables
secure, efﬁcient and expressive smart contracts on un-
modiﬁed legacy cryptocurrencies (Sections III & IV).
• Requirement analysis: We identify the minimal set of
properties that a blockchain needs to provide to al-
low expressive smart contracts and analyze the existing
blockchains based on this criteria (Section V).
• Bitcontracts analysis: We explain how incentives can
be added to Bitcontracts (Section VI); we prove that
Bitcontracts provides safety and liveness (Section VII);
we provide a Bitcoin-compatible implementation of Bit-
contracts (Section VIII); and we evaluate the execution
costs of Bitcontracts on popular blockchain platforms as
well as an analysis of the costs of executing popular real-
world smart contracts in Bitcontracts (Section IX).
II. PROBLEM STATEMENT
In this section, we motivate our work and explain the
limitations of previous solutions.
A. Motivation
Blockchain technology has gathered signiﬁcant business
interest that is largely focused on smart contracts and their
applications (see Appendix A for brief background).
Three basic options for deploying smart contracts ex-
ist: The ﬁrst is to use an existing blockchain platform like
Ethereum that provides built-in contract support. The second
is to create a new blockchain platform. And the third option—
which we investigate in this paper—is to retroﬁt contract
execution capabilities to an existing and unmodiﬁed legacy
blockchain.
There are several reasons to enhance existing platforms
with new contract execution capabilities. The ﬁrst reason is
that platforms like Bitcoin have already gathered signiﬁcant
investment and user base. For instance, at the time of writing
(June 2020), the market cap of Bitcoin is more than half of
the entire blockchain market [1]. Migrating all the invested
funds and existing users to a new platform is expensive and
complicated.
The second reason is that successfully launching a new
blockchain platform is hard. A fully-functional blockchain
platform requires an entire ecosystem, including developers,
tools, miners, investors, users, clients and more. Bootstrapping
all of this from scratch is very expensive and likely to fail.
The third reason is that existing blockchain platforms with
smart contract support have signiﬁcant restrictions on the types
of computations that can be implemented. For example, the
gas limits of Ethereum restrict contracts to very simple and
short computations. In many business use cases, it would be
desirable to run more complex computations than what is
allowed by Ethereum currently.
And fourth, the existing smart contract platforms are based
on dedicated (often niche) programming languages. For exam-
ple, Ethereum in practice requires the use of Solidity or Vyper
2
that can be compiled to EVM bytecode1. Most developers are
more familiar with general-purpose languages like Python or
Java. Developers would beneﬁt if they could use their favorite
programming language for writing smart contracts and if the
same contract code could be re-used across different smart
contract platforms.
Given these reason, our main goal in this paper is to add
expressive smart contract execution capabilities to existing
legacy blockchains, with a secondary goal of enabling develop-
ers to write contracts in their favorite programming language.
We focus on enabling Ethereum-style smart contracts which is
probably the most common deﬁnition of the term “smart con-
tract”. In Appendix A, we discuss how Ethereum-style smart
contracts compare to other types of on-chain computations
such as ones that operate on private data.
B. Limitations of Previous Solutions
Side-chain execution. One known approach to extend legacy
currencies with additional functionality is to use a side-chain.
Several proposals for side chain mechanisms exist, targeted
at different use-cases. For example, Liquid [19] is targeted at
enabling fast asset transfers, but does not provide expressive
smart contracts. Rootstock (RSK) [30] enables smart contracts
for Bitcoin using a side chain that is based on its own currency
(RBTC) that is pegged to the value of a Bitcoin. This is
achieved by issuing an amount of RBTC only when the
same amount of BTC was previously locked under a multisig
condition to a threshold set of trusted parties. Smart contracts
can then be run on the RSK side chain and perform payments
using RBTC. Side chains – no matter their purpose – generally
require trust in a ﬁxed set of parties (or even a single trusted
party) [41], instead of allowing contract participants to accept
trust assumptions on a per-contract basis. This means that only
contracts whose users trust the same set of parties can co-exist
on the same side chain and interactions between contracts
on separate chains is not possible. In addition, in terms of
usage, a side chain is equivalent to moving funds to a separate
blockchain system except for the (usually) ﬁxed exchange rate
between the currencies of the two systems. Users that want
to use a contract on the side chain ﬁrst need to move funds
to the side chain and wait for enough conﬁrmations to pass
before they can use the contract. After the execution they then
need to move the funds back to the main chain if they want
to hold their funds on the main chain. This requires a total of
ﬁve transactions for a single contract execution (two each on
the main chain and side chain for moving the funds back and
forth, plus one for contract execution).
Off-chain execution. Another approach is to run contract
code off-chain in few chosen execution nodes. Arbitrum [25],
ACE [50], and Yoda [17] follow this approach. In Arbitrum,
the contract
issuer appoints a set of “managers” who are
responsible for executing the contract. Once a contract call
is complete, the managers send the execution results to miners
who accept them only if all managers report the same exe-
cution result (otherwise the system falls back to an expensive
1Creating compilers that compile other languages to EVM-bytecode is,
of course, possible but would require signiﬁcant engineering effort for each
language.
dispute resolution protocol). Since contracts are executed de-
coupled from the consensus process, systems such as ACE,
Arbitrum, and Yoda enable execution of complex contracts
without slowing down the consensus process. However, the
main drawback of such solutions is that they require changes
to miners and thus such solutions cannot be deployed to legacy
blockchains without modiﬁcations to the blockchain protocol.
State channels [33], [21], [22], [32] constitute another
approach to move on-chain execution of smart contracts off
the chain. However, such constructions require fallback mech-
anisms and joining procedures that rely on on-chain execution.
Thus, state channels are limited to blockchains that already
support expressive smart contracts.
that
Execute-order-validate model. A speciﬁc variant of off-chain
execution is the execute-order-validate model
is used
in Hyperledger Fabric [5]. Fabric is a popular permissioned
blockchain system, where a contract-speciﬁc set of endorsers
execute transactions independent of the consensus process.
Executed transactions are sent to an ordering service that es-
tablishes a total order on them and assembles them into blocks
that contain the readsets and writesets (i.e., state changes) of
the contract execution. After that, blocks are broadcasted to
peers (roughly speaking, peers correspond to system partici-
pants like miners). To ensure transaction serializability, Fabric
requires a validation step in which, for each transaction, peers
sequentially check the values stored in the readset of the
transaction and check if they are still the same as the values in
the current state of their local ledger. Otherwise, the transaction
is invalidated and its state changes are not applied.
Such a validation step is necessary to ensure serializability
in Fabric. Since the endorsers execute transactions before they
are ordered, they execute them based on the latest committed
state. Namely, it is possible that two transactions, TxA and
TxB, are received by the endorsers at roughly the same time
and thus executed based on the same state. To consider a sim-
ple example, assume that the contract contains a state variable