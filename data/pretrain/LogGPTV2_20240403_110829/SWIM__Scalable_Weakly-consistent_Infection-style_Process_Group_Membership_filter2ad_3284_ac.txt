### Probabilistic Reliability and Resilience of the Infection-Style Dissemination

The probabilistic reliability of the infection-style dissemination has been thoroughly analyzed. These analyses demonstrate that this method is highly resilient to process failures and message losses within the network, similar to the contagious nature of epidemics. Our experimental results confirm these characteristics.

#### Implementation Details

In our implementation, each group member \( M_i \) in the SWIM protocol layer maintains a buffer of recent membership updates, along with a local count for each buffer element. The local count indicates how many times the element has been piggybacked by \( M_i \), and it is used to determine which elements to piggyback next. Each element is piggybacked at most \( \lambda \log n \) times. If the buffer size exceeds the maximum number of elements that can be piggybacked in a single ping message (or acknowledgment), elements with fewer gossip occurrences are prioritized. This is necessary because the protocol period is fixed, and the rate of membership changes may temporarily exceed the dissemination speed. Prioritizing "younger" buffer elements ensures that all membership changes infect at least a few members, and when the rate of changes stabilizes, these changes will propagate throughout the group.

Our implementation also maintains two lists of group members: one for members not yet declared as failed and another for recently failed members. Currently, an equal number of buffer elements are chosen from both lists for piggybacking. However, this scheme can be generalized to adapt to variations in process join, leave, and failure rates.

### Suspicion Mechanism: Reducing False Positives

In the basic SWIM failure detector protocol, a non-faulty group member \( M_j \) might be mistakenly detected as failed due to network packet losses, temporary inactivity, or slow processing. This leads to a high rate of false positives, where a healthy process \( M_j \) is forced to drop out of the group.

To mitigate this issue, we modified SWIM to include a subprotocol called the Suspicion subprotocol. When a failure is detected, the Suspicion subprotocol operates as follows:

1. **Suspected Member Marking**: If \( M_i \) does not receive acknowledgments from \( M_j \), either directly or through indirect probing, \( M_i \) marks \( M_j \) as a suspected member in its local membership list. A {Suspect \( M_j \): \( M_i \) suspects \( M_j \)} message is then disseminated through the group using the infection-style dissemination.
2. **Propagation of Suspicions**: Any group member \( M_l \) receiving this message also marks \( M_j \) as suspected. Suspected members remain in the membership list and are treated like non-faulty members for ping target selection.
3. **Alive Message Propagation**: If a member \( M_l \) successfully pings a suspected member \( M_j \), it un-marks the suspicion in its membership list and spreads an {Alive \( M_j \): \( M_l \) knows \( M_j \) is alive} message. This un-marks the suspected member in the membership lists of recipient members. If \( M_j \) receives a suspicion message, it can start propagating an Alive message to clarify its non-failure.
4. **Expiration and Confirmation**: Suspected entries in membership lists expire after a specified timeout. If \( M_j \) is suspected at some member \( M_h \) and the entry times out before an Alive message is received, \( M_h \) declares \( M_j \) as faulty, drops it from the local membership list, and begins spreading the message {Confirm \( M_j \): \( M_h \) declares \( M_j \) as faulty}. This message overrides any previous Suspect or Alive messages, leading to the deletion of \( M_j \) from the membership lists of all recipients.

This mechanism reduces, but does not eliminate, the rate of false positives. The Strong Completeness property of the original protocol is preserved, and eventual detection is guaranteed, even if the detection time is prolonged due to process failures.

### Round-Robin Probe Target Selection: Ensuring Time-Bounded Strong Completeness

The basic SWIM failure detector protocol detects failures in an average constant number of protocol periods. However, a pathological selection of ping targets might lead to unbounded delays in the first detection of a process failure. To address this, we modified the protocol to use round-robin probe target selection:

1. **Round-Robin Selection**: Each member \( M_i \) maintains a list of known members and selects ping targets in a round-robin fashion. New members are inserted into the membership list at a randomly chosen position. After completing a traversal of the entire list, \( M_i \) rearranges the membership list to a random reordering.
2. **Bounded Detection Time**: Once a member \( M_j \) is included in \( M_i \)'s membership list, it will be chosen as a ping target exactly once during each traversal. If the membership list size is no more than \( n_i \), successive selections of the same target are at most \( 2 \cdot n_i - 1 \) protocol periods apart. This bounds the worst-case detection time, ensuring a Time Bounded Completeness property.

### Performance Evaluation of the Prototype

A prototype of the SWIM protocol was implemented over the Winsock 2 API and tested on a large cluster of commodity PCs running Windows 2000. The cluster consisted of 16 450-MHz Dell PII's, 16 1-GHz IBM x220's, and a collection of dual and quad nodes (200-MHz to 500-MHz PII and PIII processors), communicating over a 100 Mbps Ethernet with no external load. Each node contained at most one process group member.

#### Experimental Parameters

- Number of members chosen for ping-reqs: \( K = 1 \)
- Protocol period: 2 seconds
- Maximum piggybacking per infection: \( 3 \lceil \log(N + 1) \rceil \) messages
- Suspicion timeout: Same as the protocol period

We compared three versions of the protocol:
1. **SWIM:Basic**: Basic SWIM protocol with the Round-Robin scheme
2. **SWIM+Inf.**: SWIM with an infection-style Dissemination Component
3. **SWIM+Inf.+Susp.**: SWIM+Inf. with the Suspicion subprotocol extension

All point-to-point messages were UDP packets. The maximum message payload sizes were 15 bytes for SWIM:Basic and 135 bytes for SWIM+Inf. and SWIM+Inf.+Susp. (up to 6 membership updates per message).

#### Message Loads

Figure 2 shows the measured message send and receive loads imposed by the SWIM failure detector at an arbitrary group member over 40 protocol periods. Up to a group size of 55 members, the average overhead remains around 2.0, matching the analytic estimate. The standard deviation bars indicate that typical message overheads stay low, e.g., at \( N = 28 \) members, the overhead of sent messages is less than 5 messages per protocol period with a probability of 0.99.

#### Detection and Dissemination Latency

Figure 3(a) shows the mean time between a process failure and its first detection at some non-faulty group member. The average detection time is not correlated with group size, matching the analytic estimate. Figure 3(b) plots the delay in infection-style dissemination of membership updates. The median latency is always a few protocol periods and rises slowly with group size, consistent with the logarithmic variation predicted in the analysis.

---

This revised text provides a clear, coherent, and professional explanation of the SWIM protocol, its implementation, and the performance evaluation.