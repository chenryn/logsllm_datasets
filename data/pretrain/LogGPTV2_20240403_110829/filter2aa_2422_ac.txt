interpreted and converted by swapping the operands 
around to its only supported encoding. That is, Test 
r/m32, r32.
We see the encoding for this in the Intel manual (last 
image). Trust me, there is not corresponding 
encoding for the operands swapped around like 
other sane instructions.
So can we swap these operands and logically have 
the same results?
But Why?
● Review:
● CMP = SUB (just for flags)
● TEST = AND (just for flags)
● 5 - 3 = 8
● 3 - 5 = -2
● 5 AND 3 = 1
● 3 AND 5 = 1
The answer is yes. We compare CMP and TEST to see why.
Both of these instructions act like a math/logic instruction but 
without storing the result; it just does the instruction for the side 
effect.
CMP is like subtraction and TEST is like a logical AND. CMP 
doesn't SUB though, nor does TEST do an AND. They just set the 
flags so conditional jumps can have more intelligent behavior
If you try to do some commutative stuff, you see subtraction 
obviously isn't commutative, swapping the operands gives you 
different results.
TEST (and AND) on the other hand are commutative, swapping 
the operands gives the same result. Therefor you only really do 
need one encoding to represent both orders. So assemblers look 
at your un-encodable instruction and converts it into something 
that does the same thing
Redundosourus REX
This is just a 64-bit prefix hack. In order to access all 
of the extra registers that come with 64 bit 
processors, but also remain backwards compatible, 
Intel chose to prefix instructions with a byte that 
would change what the registers end up being.
Of course, some of the old registers are also 
encodable with the prefixes, and of course there are 
many redundancies to this; as the image of this slide 
demonstrates.
Redundant Fencing
There are 3 different types of 'fence' 
instructions, each of them have the 
recommended machine code.
Redundant Fencing
We can see that the suggested machine code is 
dutifully used when comparing the assembly source 
and the machine code output from the disassembly
Redundant Fencing
However, there is a lot of redundancy on this one. It 
so turns out that Intel suggests that this can be done 
with direct machine code. There's no real benefit to 
using any of these alternate encodings, however.
Intel Says This is Okay
This is the part of the Intel manual that suggests you 
can use the extra 7 other end nibbles for these fence 
instructions.
'Inst Reg, Imm' Redundancy
In similar fashion to the very first redundancy 
explored in this presentation, there are many 
instructions that have an encoding for putting an 
immediate value into just the AL/AX/EAX register. 
This is because this register is so common, might as 
well have reduced machine code for it.
There is also the more generic encoding that allows 
for putting an immediate value into a MODR/M+SIB 
encodable operand. The redundancy comes in 
because AL/AX/EAX can be one of those options. 
'Inst Reg, Imm' Redundancy
This slide shows all of those redundancies
Redundant Bit Instructions
Speaking of doing something so common that Intel 
provides a direct smaller machine code encoding for 
it; bitwise instructions like rotating and shifting are 
often done by just one bit. Because of this, there's a 
shortcut to have the immediate operand be just '1'.
There is also the more generic 8-bit immediate 
operand. But obviously '1' is a valid value in this 
encoding as well.
Redundant Bit Instructions
So this is the image of showing all of those 
redundancies
Branch Hints
There's no real good reason to manually use a 
branch hint. There's also no way to do it directly with 
assembly.
However, you can manually machine the prefix in 
front of a branch instruction. It wont really affect 
much, but hey, you can (when you can't in 
assembly).
Intel Hides SAL
●SAL = Shift Arithmetic Left
●Does the same thing as Shift Left 
(SHL)
●Therefore, everything is SHL
Similar to not having our assembly converting our 
TEST instruction to a equivalent form; SAL(Shift 
Arithmetic Left) gets converted to SHL(Shift Left). 
SAL and SHL are technically equivalent. The Intel 
manual recommends this and assemblers obey it.
The difference here is that there really is an encoding 
for SAL, and it is functional.
Intel Hides SAL
Here is our assembler converting our SAL instruction 
in assembly to SHL when it gets to machine code.
Note that even the machine code in the Intel manual 
is the same for SHL and SAL.
We will get to this next, but the /4 represents the 
specific instruction, where the D0 represents the 
group of instructions. For instance, /5 would be SHR 
(Shift Right).
Intel Hides SAL
This table shows all of these /n numbers. We see 
that under '100' or /4, SHL and SAL are combined.
More interestingly, we notice that '110' or /6 is empty.
There is no way to mess around with this in 
assembly language, but we can do this directly in 
machine code to see what happens.
Using SAL
It is SAL. After testing it, it works. SAL unlocked!
Hidden TEST
There's an encoding under the machine code of 
0xF6 (8-bit) and 0xF7 (32-bit) for the TEST 
instruction, as in TEST EAX, 0x11223344.
We will use the 32-bit encoding for this example. 
This is a /0 encoding, to mean TEST, as in /2 would 
mean NOT and /3 would mean NEG and so on.
You'll notice there is a blank spot in this table that 
would have an instruction for /1. It so turns out that 
this is also a TEST instruction. If you machine 
encode this, the processor will run this exactly as the 
/0 test.
Your mileage will vary depending on the 
disassembler you use, for whether it tells you it is a 
TEST instruction or not...
Hidden TEST
In the case of the EDB (Evans Debugger), the 
instruction is not disassembled showing the 
TEST it actually is. We instead see a dw (data 
word directive) of 0xc8f7 and then a mov 
instruction.
This 'mov' instruction will never run because it 
doesn't exist, it is actually part of the operand 
data of the TEST instruction. This instruction 
should be:
TEST EAX, 0xeeddccbb
This TEST instruction is what the processor will 
actually execute
Load InEffective Address
What the Load Effective Address does is stores the 
pointer address into a register. So not the value of 
the address into the register, but the actual address 
that the pointer would point to.
In the above example, we are running: LEA EAX, 
[RAX + RBX * 8 + 10].
Knowing EAX(RAX) is 5 and EBX(RBX) is 30 
(decimal). So [5 + (30 * 8) + 10]. Simplify again to [5 
+ 240 + 10]. Finally, this simplifies to 255. In hex this 
is 0xff.
Note that RAX/EAX has 0xff as it's value after we run 
that LEA instruction. That's what LEA does in a 
nutshell. Compilers more often use this as a one 
instruction math hack.
Load InEffective Address
Because of what this instruction does, it only makes sense 
to have a register as the dest operand and a pointer as the 
source operand.
However, the Encoding of the LEA instruction uses the 
MODR/M byte. This means that a register could be 
encoded with both operands (like and MODR/M based 
instruction).
If we try to do this in assembly, we get an error that we 
used an invalid combination of opcode and operands.
That doesn't stop us from directly encoding LEA EAX, EAX 
(8D C0).
However, all of this is fairly pointless as this instruction IS 
indeed invalid and will cause an error if it is executed. But 
in principle, this is a specific error that would be harder to 
achieve in assembly alone (without being able to machine 
hack)
Prefix
Abuse
The BSWAP instruction can be used to reverse all of 
the bytes in a register. Notice that there is only an 
encoding for 64-bit and 32-bit registers, but not 16-bit 
registers. Even though 16-bits is enough bits to 
reverse 2 bytes. Why can't we do this?
Challenge accepted!
This is us in assembly attempting to write an 
instruction that uses bswap on a 16 bit register: 
BSWAP AX
Of course we get an error saying that we used an 
invalid combination of opcode and operands
In 32-bit x86 (64-bit is similar but not exactly the 
same), there are prefixes that modify the operand 
sizes. For many instructions there is no encoding for 
16-bit instructions, just an encoding for 8-bit and 32-
bit. In order to use a 16-bit encoding, you should use 
a 0x66 or 0x67 prefix before your instruction 
(depending on what part of the instruction you 
wanted to override)
 So we put a 0x66 in front of our BSWAP EAX and 
achieve BSWAP AX.
It should be noted however that this instruction 
doesn't work as intended (in my experience, it just 
clears the register completely)
REP Prefix
For the following string instructions:
INS, MOVS, OUTS, LODS, STOS, CMPS, 
and SCAS
Ignored on all other instructions
except for repeating a NOP
The REP prefix can be used to repeat an instruction. 
This is really only intended to be used for instructions 
that operate on strings, so it doesn't do anything to 
any other instruction. The REP prefix byte is 0xF3
But there is one interesting exception, the screenshot 
shows these two different assembly instructions and 
how they mean the same thing to the processor.
Why
This is because for whatever reason, the pause 
instruction is machine encoded as 0xF390.
Consistent Instruction Sizes
The cool thing about this prefixes, is considering what 
would happen if you prefix a prefixed instruction with 
another of the same prefix. The answer is nothing. There is 
a limit to how many prefixes you an use; the instruction can 
be no larger than 15 bytes (you will get an error otherwise).
This screenshot shows some functional shellcode, and a 
couple of examples of the same code padded with prefixes. 
These examples make each instruction take the same 
amount of machine code bytes as every other instruction. I 
can't think of a reason why this would be useful, but it's still 
pretty cool.
Full Offsets
Here's something interesting, looking at the top 
instruction, the disassembly says that the instruction 
is xor [rax + rax], eax
However, if we actually type that instruction and 
assemble it, we get the same disassembly, but 
different machine code.
What the hell is going on here?
This is just more of nasm's interpretive dance. 
Obviously we don't want the first instruction, this is 
just the 'put a null' in it trick. We obviously want the 
version with less bytes right?
Full Offsets
MultiByte NOP
That is unless we don't.
The MultiByte NOP is the argument for not wanting 
our assembler to interpret our assembly into 
something optimized.
The MultiByte NOP allows for many different bytes 
because it takes advantage of how multibyte the 
MODR/M can be. The MODR/M argument doesn't 
actually contribute anything to the instruction in any 
meaningful way, it is just a dummy operand to add to 
the instruction size in a variable way.
So I'm going to take the suggested assembly in the 
intel manual and...
MultiByte NOP (suggested)
...and I'm gonna put it in an assembly source file and 
assemble it with nasm...
MultiByte NOP (suggested):
Teh Underwhelm
This is our result...
This for sure got an interpretive dance performed on 
it.
MultiByte NOP (suggested):
W/O Nulls
I next try to mitigate this by putting some non null 
offsets into the pointers, this prevents the assembler 
from optimizing them out.
Of course we are misadventuring from what Intel 
suggests...
Better, but Still Sucks
...but as you can see, it works a little bit better. But 
only a little bit.
What it Should Look Like,
But Had to use Direct 
Machine Code
To get the (exact) machine code advertized in the 
Intel manual, I could find no other way but to 
manually program this in machine code
This is moar bettar
But why go through any of that trouble!
I'd rather just be ignorant and prefix up a normal 
NOP
Self Modifying Code
with basic arithmetic
Because similar machine code formats
Ignoring stuff like exploit development, an 
understanding of machine code can also be 
extremely useful for self modifying code. There are 
MANY different strategies/techniques a programmer 
could take to achieve cool self modifying code. We 
will only really explore one PoC example here.
For this example, we can ADD a value to a [pointer] 
that happens to be the memory location of another 
instruction. Instructions with the /n format have the 
instruction itself encoded in the number of /n. For 
example, INC is 0xFE /0 and DEC is 0xFE /1. If we 
just added the right number to the right location of 
the INC instruction, it would be convertible to a DEC 
instruction.
Self Modifying Code
This slide shows the machine code  and assembly 
tho show the very small differences.
The last image shows the machine code of the first 
image in binary isolating out the 3 bits that control 
which instruction it is.
In red, the 000 means INC and the 001 means DEC. 
The difference to the 2 instruction is just one bit.
Self Modifying Code Demo
This demo will show a series of 3 instructions that 
are using this trick. When you get to the 3rd 
instruction, it isn't the same instruction it looked like 
before the program ran.
These 2 screenshots are more for the benefit of the 
PDF version of these slides. Time permitting, a live 
demo of this will be done during the presentation.
CactusCon 2017 – Boot and Play
I will be giving a talk at CactusCon 2017 
in September called Boot and Play. It is 
about 512 byte boot sector programs 
that are games and puzzles.
Self modifying code is a nice trick to 
have in the bag because it helps get the 
byte count down. The above trick that I 
mentioned is a trick that I use in 
TronSolitaire (
https://github.com/XlogicX/tronsolitare)
Enough of This! Make a
Tool Do It!
IRASM:
Interactive Redundant ASeMbler
This is another 'demo' slide. This is where I 
demonstrate what the demo can do.
Hint: it pretty much does everything with the 
concepts described in this whole talk. It's like 
nasm_shell, but it outputs many other valid variations 
of machine code that represents the same assembly 
input.
PDF Version only
This slide wont be displayed in the main 
presentation, instead I will demo the tool live, but 
since the PDF version can’t do that, this is a 
screenshot showing irasm side by side with 
nasmshell. The same assembly instructions are 
entered into both, you see the left hand side is more 
verbose.
Thanks/QA/Links
● m2elf.pl –interactive
● https://github.com/XlogicX/m2elf
● Irasm
● https://github.com/XlogicX/irasm
● My Blog
● xlogicx.net
● Twitter
● @XlogicX
I tend to speak fairly quick and am good at time 
management, so I may have time for questions. It 
really depends on this years DEF CON policy on 
Q/A. Regardless, I will make myself available for 
more in depth Q/A in the hangout room after I deliver 
the talk.
This slide is more just to leave up the links to the 
tools and my contact info / blog