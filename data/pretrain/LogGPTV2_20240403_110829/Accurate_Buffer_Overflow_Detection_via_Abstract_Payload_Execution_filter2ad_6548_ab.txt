Complement Carry Flag
. . .
0x37
0x3f
0x98
0xf8
0xfc
0xfa
0xf5
. . .
Using these operations (or any combination of those) causes the sledge to
behave exactly the same as before, nevertheless its shape can be modiﬁed to
evade misuse based ID systems. Notice that it is not possible to encrypt the
sledge because it has to be executed before the exploit code (and any decryption
routines).
The operations presented in Table 2 behave exactly like the NOP instructions
on an Intel architecture in the sense that they are only a single byte long. By
considering the fact that modern compilers align variables and data structures
on the stack at word boundaries1, more sledge modiﬁcations can be performed.
Instead of using single byte instructions without parameters, an intruder
can even use multi-byte opcodes with arguments. One just has to make sure
that executable code is present at all positions starting at word boundaries.
This is necessary because the return address could point to the beginning of
any word (i.e. 4 bytes) inside the sledge. This allows the attacker to choose
assembler instructions like the ones depicted in Table 3 below or any similar to
them. Operations that require an immediate parameter are best suited for this
because there is no risk of accessing illegal memory areas (thereby creating a
segmentation violation). The attacker just has to use a return address that also
points to a word aligned boundary.
The only restriction that remains for the intruder when creating the exploit
code and the sledge is that no NULL (0x00) characters may be present. This
is due to the fact that a NULL character is interpreted as the end character by
many vulnerable C functions. Because the complete attack code has to be copied,
the routines may not terminate prematurely. Other than that, the intruder has
virtually no limitations in designing his exploit.
1 Word alignment means that the address of any variable allocated on the stack modulo
four equals 0
Accurate Buﬀer Overﬂow Detection via Abstract Payload Execution
281
Table 3. Multi-Byte NOP Substitutes for IA32
Instruction
Bytecode
adc $0x70,%cl
adc $0x70d18070, %ecx
and $0x55120125, %eax
jmprel 0x37
. . .
80 d1 70
81 d1 70 80 d1 70
25 01 12 44
0xeb 0x37
. . .
Any network based misuse system can be easily evaded when such a freedom
is given in choosing the layout of the attack. Even anomaly based systems [14]
that base their analysis on the payload of the packet could be fooled. Such
systems operate with proﬁles of a ‘normal’ request that can be imitated with
the means shown above. Network based anomaly detectors that consider only
protocol information or the ﬂow of traﬃc fail as well because only a few legal
packets need to be transmitted.
While host based anomaly sensors can notice the eﬀect of a completed buﬀer
overﬂow and raise an appropriate alarm, this approach is undesirable because of
two reasons. First, only successful attacks which cause a corresponding distortion
in process behavior are reported. No indication on the number of attempts is
given. Second, the system can only react to the attack after it has manifested
itself as weird behavior. Potential damage that has been inﬂicted before the ID
reacts cannot be prevented (e.g. deletion/modiﬁcation of ﬁles).
We present a system that accurately detects exploits in the payload of ap-
plication requests and is capable of stopping malicious activity before it eﬀects
the system even when the attacker applies all evasion mechanisms described
above. The idea of our approach is to focus on the executability of the sledge
(which cannot be prevented without breaking the attack) by means of abstract
execution.
3 Abstract Execution
The following two properties that classify a sequence of bytes executed on behalf
of a certain process are used to deﬁne abstract execution.
– Correctness: A sequence of bytes is correct, if it represents a single valid
processor instruction. This implies that the processor is able to decode it.
The byte sequence consists of a valid opcode and the exact number of argu-
ments needed for this instruction (and none more). Otherwise, the sequence
is incorrect.
– Validity: A sequence of bytes is valid if it is correct and all memory operands
of the instruction reference memory addresses that the process which exe-
cutes the operation is allowed to access. A memory operand of an instruction
is an operand that directly references memory (i.e. speciﬁes an address in
282
T. Toth and C. Kruegel
the memory area of the process). Validity is important because references to
non-accessible memory addresses will be detected by the operating system
resulting in the immediate termination of the process with a segmentation
violation. A correct instruction without any (memory) operands (e.g. NOP)
is automatically valid. We also call a valid byte sequence a valid instruction.
Deﬁnition:
A sequence of bytes is abstract executable if it can be represented as a
sequence of consecutive valid instructions.
We partition the pool of processor instructions into two sets. One contains all
instructions that alter the execution ﬂow of a process (i.e. operations that mod-
ify the program counter) while the other set consists of the rest. The elements
of the ﬁrst set (e.g. call, jmp, jne) are called jump instructions. A sequence
of valid instructions can be decomposed into subsequences that do not contain
jump instructions. Such subsequences are called valid instruction chains (IC).
An instruction chain ends with a jump instruction or bytes that are not ab-
stract executable. The length of an instruction chain is equal to the number of
instructions that it consists of.
An important metrics is the execution length of a sequence of valid in-
structions. The basic idea is that the execution length combines the lengths of
instruction chains that are connected by jump instructions. It can be computed
for a byte sequence using the following algorithm.
Algorithm: Execution Length of a Byte Sequence
The algorithm expects two input arguments, a byte sequence seq and a
position pos in this sequence. It uses an auxiliary array visited to mark
already visited blocks whose elements are initialized with false. The
return value is a positive integer denoting the execution length starting
at position pos.
1. When the instruction at pos is invalid, return 0.
2. When the instruction at pos has already been visited, a loop is detected and
0 returned.
3. Find the instruction chain starting at pos and calculate its length L. In
addition, mark all its operations as visited.
4. When the instruction chain ends with invalid bytes, return L.
5. Otherwise, the chain ends in a jump instruction. When the target of the
jump is outside the byte sequence seq or cannot be determined statically,
return L + 1.
6. When the jump targets an operation at position target that is inside the
sequence, call the algorithm recursively with the position set to target and
assign the result to L(cid:2).
7. When the jump is unconditional, return L + L(cid:2).
Accurate Buﬀer Overﬂow Detection via Abstract Payload Execution
283
8. Otherwise, it is a conditional jump. Call the algorithm recursively for the
continuation of the jump - i.e. set the position to the operation immediately
following the jump instruction and assign the result to L(cid:2)(cid:2). Then determine
the maximum of L(cid:2) and L(cid:2)(cid:2) and assign it to Lmax. Then return L + Lmax.
Deﬁnition:
The maximum execution length (MEL) of a byte sequence is the maxi-
mum of all execution lengths that are calculated by starting from every
possible byte position in the sequence. It is possible that a byte sequence
contains several disjoint abstract execution ﬂows and the MEL denotes
the length of the longest.
4 Detecting Buﬀer Overﬂows
Following the deﬁnitions above, we expect that requests which contain buﬀer
overﬂow exploits have a very high MEL. The sledge is a long chain of valid
instructions that eventually leads to the execution of the exploit code. Even
when the attacker inserts jumps and attempts to disguise the functionality of
this segment, its execution length is high. In contrast to that, the MEL of a
normal request should be comparatively low. This is due to the fact that the
data exchanged between client and server is determined by the communication
protocol and has a certain semantics. Although parts of that data may represent
executable code, the chances that random byte sequences yield a long executable
chain is very small.
The idea is that a static threshold can be established that separates mali-
cious from normal requests by considering requests with a large MEL as mali-
cious while those with a small execution length as regular. Because the sledge
has to be executable in order to fulﬁll its task, a simple test is utilized to ﬁnd
long executable chains. Requests are analyzed immediately after they have been
received by the server. This enables the system to drop potential dangerous
requests before the service process can be aﬀected and executes vulnerable func-
tions. We have chosen to place our sensor at the application layer to circumvent
the problem of encrypted network traﬃc faced by NIDS.
The following observation allows an improvement of the search algorithm
that has to determine the MEL of requests. According to the deﬁnition of the
maximum execution length, all positions in the request’s byte sequence could
potentially serve as a starting point for the longest execution ﬂow. However, if the
MELs of normal requests and exploits diﬀer dramatically, it is not necessary to
search for the real maximum length. It is suﬃcient to choose only some random
sample positions within the byte sequence and calculate the execution length
from these positions. Instructions that have been visited by earlier runs of the
algorithm are obviously ignored. The rationale behind this improvement is the
fact that it is very likely that at least one sample position is somewhere in the
middle of the sledge leading to a tremendously higher MEL than encountered
when checking normal requests.
284
T. Toth and C. Kruegel
5 Implementation
The algorithms to determine a single execution length and to choose reasonable
sample points in the byte sequence of a request have been implemented in C.
Because the recursive procedures are potentially costly, the main focus has been
on an eﬃcient realization. As every request needs to be evaluated, the additional
pressure on the server must be minimized.
An important point is the decoding of byte sequences to determine the cor-
rectness and validity of instructions. As data structure we have chosen a static
trie for storing all supported processor instructions together with the required
operands and their types.
A trie is a hierarchical, tree like data structure that operates like a dictionary.
The elements stored in the trie are the individual characters of ‘words’ (which
are opcodes in our case). Each character (byte) of a word (opcode) is stored in
the trie at a diﬀerent level. The ﬁrst character of a word is stored at the root
node (ﬁrst level) of the trie together with a pointer to a second-level trie node
that stores the continuation of all the words starting with this ﬁrst character.
This mechanism is recursively applied to all trie levels. The number of characters
of a word is equal to the levels needed to store it in a trie. A pointer to a leave
node that might hold additional information marks the end of a word.
We store all supported opcodes of the processor’s instruction set in the trie
to enable rapid decoding of byte sequences. The leaf nodes hold information
about the number of operands for each instruction together with their types
(immediate value, memory location or register). This enables us to calculate the
total length of the instruction at runtime by determining the necessary bytes for
all operands.
It is important to notice that diﬀerent instructions can be of diﬀerent length,
therefore a hash table is not ideally suitable. Currently, only the Pentium in-
struction set [12] has been stored in this trie, but no MMX and SIMD instructions
are supported.
Figure 4 shows a simpliﬁed view of our trie. The opcodes for the instructions
AAA (opcode 0x37), ADC (opcode 0x661140 - add with carry the ax register to
the value of the register indirect address determined by eax and the one byte
operand), ADC (opcode 0x80d1 - add with carry a one byte value to the cl
register) and CMP (opcode 0x80fc - compare the immediate value with the register
ah) have been inserted.
The algorithms used to determine an approximation of the MEL of HTTP
requests have been integrated as a module into an Apache 1.3.23 web server.
During the startup of the server, the trie is ﬁlled and a function to check the re-
quest is registered as a post read request procedure. The Apache conﬁguration
ﬁle has been adapted to make sure that our module is the ﬁrst to be invoked.
Each time a request arrives at the HTTP server, our subroutine calls the URL
decoding routine provided by Apache and then searches for executable instruc-
tions in the resulting byte sequence. It is necessary to decode the request ﬁrst to
make sure that all escaped characters are transformed into their corresponding
Accurate Buﬀer Overﬂow Detection via Abstract Payload Execution
285
Fig. 4. Storing instruction opcodes in the trie
byte values. The module uses a deﬁnable threshold and stops the test immedi-
ately when a detected execution length exceeds this limit. We do not calculate
the MEL of the request because of performance reasons. Instead we chose to cal-
culate the execution length at equally distributed positions within the request.
6 Evaluation
6.1 Execution Length of HTTP Requests
In order to estimate the maximum execution length of regular HTTP requests, we
calculated the MEL for service requests targeted at our institute’s web server.
Only successful requests that completed without errors have been included in
our test data set and we also manually removed attack requests to avoid that
buﬀer overﬂow exploits distort the data set. An additional ID system has been
deployed to verify that assumption. 117228 server requests which we have been
captured during a period of 7 days have been processed. The resulting MELs
are shown in Figure 5 below.
Only 350 requests had a MEL value of 0 meaning that they did not contain
a valid instruction at all. Most of the packets showed a maximum execution
length of 3 and 4 (33211 and 31791 respectively) with the numbers decreasing
for increasing lengths. The highest maximum instruction length that has been
encountered was 16 which appeared for a total of 14 HTTP queries. As expected
the numbers indicate that the MELs for regular requests are short.
6.2 Exection Length of DNS Requests
We performed a similar experiment as explained above on DNS data. We captured
all the DNS traﬃc (from the inside and from the outside) to our DNS server during
286
T. Toth and C. Kruegel
Fig. 5. Maximum Execution Length of regular HTTP Requests
Fig. 6. Maximum Execution Length of regular DNS Requests
a period of one week. We collected 75464 requests and calculated the MEL on
each of these.
As shown in Figure 6 the maximum execution length distribution has its peak
at 4 with 58557 request. In descending order the MELs of 5 and 3 follow with
6531 and 5500 requests, respectively. The maximum MEL found in our sample
data is 12 which has been present in only 4 requests. Therefore the maximum
of all MELs of the measured DNS requests is even lower then the maximum of
measured HTTP requests.
6.3 Execution Length of Exploits
In order to support our claim that buﬀer overﬂow attacks contain long valid in-
struction chains, a number of available exploits have been analyzed. We have cho-
Accurate Buﬀer Overﬂow Detection via Abstract Payload Execution
287
sen buﬀer overﬂow exploits against the Internet Information Service (IIS)
(the web server from Microsoft), BIND (a UNIX DNS server) and WU-FTP (a UNIX
FTP server, all from [19]. Although our prototype has been tested with a web
server, attack code against a diﬀerent service daemon has been evaluated to
show the applicability of our approach to other areas as well. The results of this
evaluation are listed in Table 4.
Table 4. Maximum Execution Lengths of Exploits
Exploit
Max. Execution Length (MEL)
IIS 4 hack 307
JIM IIS Server Side Include overflow
wu-ftpd/2.6-id1387
ISC BIND 8.1, BID 1887
591
807
238
216
According to the table above, the maximum execution lengths of requests
that contain buﬀer overﬂow exploits is signiﬁcantly higher than those of normal