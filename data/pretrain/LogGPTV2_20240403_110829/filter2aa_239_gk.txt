                name: "FK_Menu_MenuCard_MenuCardId",
                column: x => x.MenuCardId,
                principalTable: "MenuCard",
                principalColumn: "MenuCardId",
                onDelete: ReferentialAction.Cascade);
            });
        }
        protected override void Down(MigrationBuilder migrationBuilder)
        {
          migrationBuilder.DropTable("Menu");
          migrationBuilder.DropTable("MenuCard");
        }
        }
  注意： 在每一次改变中，都可以创建另一个迁移。新的迁移只定义从前一个
版本到新版本所需的变化。如果客户的数据库需要从任何早期版本中更新，就在迁移
数据库时调用必要的迁移。
在开发过程中，不需要给项目创建的所有迁移，因为不可能存在具有这种临时状
态的数据库。此时，可以删除一个迁移，创建一个新的、更大的迁移。
38.4.3 用MSBuild迁移
如果使用Entity 
Framework迁移和基于MSBuild的项目，而不是DNX，则迁移的命令
就是不同的。在控制台应用程序、WPF应用程序或ASP.NET 4.6项目类型的完整框架中，
需要在NuGet Package Manager Console中（而不是Developer Command Prompt中）指定迁
移命令。在Visual Studio中通过Tools | Library Package Manager | Package Manager Console
启动Package Manager Console。
在Package 
Manager 
Console中，可以使用PowerShell脚本添加和删除迁移。命令>
Add-Migration InitMenuCards创建Migrations文件夹，其中包括如前所述的迁移类。
38.4.4 创建数据库
现在，有了迁移类型，就可以创建数据库。DbContext派生类MenusContext包含
Database属性，它返回一个DatabaseFacade对象。使用DatabaseFacade，可以创建和删除数
据库。如果数据库不存在，使用方法EnsureCreated创建一个。如果数据库已经存在，就什
么也不做。EnsureDeletedAsync方法删除数据库。在下面的代码片段中，如果数据库不存
在，就创建它（代码文件MenusSample/Program.cs）：
    private static async Task CreateDatabaseAsync()
    {
      using (var context = new MenusContext())
      {
        bool created = await context.Database.EnsureCreatedAsync();
        string createdText = created ? "created": "already exists";
        WriteLine($"database {createdText}");
      }
    }
  注意： 如果数据库存在，但有一个旧模式版本，EnsureCreatedAsync方法就
不适用模式的变化。调用Migrate方法，可以使模式升级。Migrate是
Microsoft.Data.Entity名称空间中定义的DatabaseFacade类的一个扩展方法。
运行该程序时，创建表MenuCard和Menu。基于默认约定，表与实体类型同名。创建
主键时使用另一个约定：列MenuCardId定义为主键，因为属性名以Id结尾。
    CREATE TABLE [dbo].[MenuCard] (
      [MenuCardId] INT          IDENTITY (1, 1) NOT NULL,
      [Title]     NVARCHAR (MAX) NULL,
      CONSTRAINT [PK_MenuCard] PRIMARY KEY CLUSTERED ([MenuCardId] ASC)
    );
Menu表定义的MenuCardId是MenuCard表的外键。删除MenuCard，也会因为DELETE
CASCADE，删除所有相关的Menu行：
    CREATE TABLE [dbo].[Menu] (
      [MenuId]    INT           IDENTITY (1, 1) NOT NULL,
      [MenuCardId] INT           NOT NULL,
      [Price]     DECIMAL (18, 2) NOT NULL,
      [Text]      NVARCHAR (MAX)  NULL,
      CONSTRAINT [PK_Menu] PRIMARY KEY CLUSTERED ([MenuId] ASC),
      CONSTRAINT [FK_Menu_MenuCard_MenuCardId] FOREIGN KEY ([MenuCardId])
        REFERENCES [dbo].[MenuCard] ([MenuCardId]) ON DELETE CASCADE
    );
创建代码中的一些部分可用于变更。例如，在NVARCHAR（MAX）中，Text和Title
列的大小可以减少，SQL 
Server定义了一个Money类型，可用于Price列，在dbo中可以更
改模式名称。Entity Framework提供了两个选项，可以在代码中完成这些变更：数据注释
和流利的API，参见下面的内容。
38.4.5 数据注释
要影响生成的数据库，一个方法是给实体类型添加数据注释。表的名称可以使用
Table特性来改变。要改变模式名称，Table特性定义Schema特性。为了给字符串类型指定
另一个长度，可以应用MaxLength特性（代码文件MenusWithDataAnnotations 
/
MenuCard.cs）：
    [Table("MenuCards", Schema = "mc")]
    public class MenuCard
    {
      public int MenuCardId { get; set; }
      [MaxLength(120)]
      public string Title { get; set; }
      public List Menus { get; }
    }
在Menu类中，还应用了Table和MaxLength特性。为了更改SQL类型，可以使用
Column特性（代码文件MenusWithDataAnnotations / Menu.cs）：
    [Table("Menus", Schema = "mc")]
    public class Menu
    {
      public int MenuId { get; set; }
      [MaxLength(50)]
      public string Text { get; set; }
      [Column(TypeName ="Money")]
      public decimal Price { get; set; }
      public int MenuCardId { get; set; }
      public MenuCard MenuCard { get; set; }
    }
应用迁移，创建数据库后，可以在Title、Text和Price列上看到表的新名称和模式名
称，以及改变了的数据类型：
    CREATE TABLE [mc].[MenuCards]
 (
      [MenuCardId] INT          IDENTITY (1, 1) NOT NULL,
      [Title]     NVARCHAR (120) NULL,
      CONSTRAINT [PK_MenuCard] PRIMARY KEY CLUSTERED ([MenuCardId] ASC)
    );
    CREATE TABLE [mc].[Menus]
 (
      [MenuId]    INT         IDENTITY (1, 1) NOT NULL,
      [MenuCardId] INT         NOT NULL,
      [Price]     MONEY       NOT NULL,
      [Text]      NVARCHAR (50) NULL,
      CONSTRAINT [PK_Menu] PRIMARY KEY CLUSTERED ([MenuId] ASC),
      CONSTRAINT [FK_Menu_MenuCard_MenuCardId] FOREIGN KEY ([MenuCardId])
        REFERENCES [mc].[MenuCards] ([MenuCardId]) ON DELETE CASCADE
    );
38.4.6 流利API
影响所创建表的另一种方法是通过DbContext派生类的OnModelCreating方法使用流利
的API。使用它的优点是，实体类型可以很简单，不需要添加任何特性，流利的API也提
供了比应用特性更多的选择。
下面的代码片段显示了BooksContext类的OnModelCreating方法的重写版本。接收为参
数的ModelBuilder类提供了一些方法，定义了一些扩展方法。HasDefaultSchema是一个扩
展方法，把默认模式应用于模型，现在用于所有类型。Entity方法返回一个
EntityTypeBuilder，允许自定义实体，如把它映射到特定的表名，定义键和索引（代码文
件MenusSample / MenusContext.cs）：
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
      base.OnModelCreating(modelBuilder);
      modelBuilder.HasDefaultSchema("mc");
      modelBuilder.Entity()
        .ToTable("MenuCards")
        .HasKey(c => c.MenuCardId);
      // etc.
      modelBuilder.Entity()
        .ToTable("Menus")
        .HasKey(m => m.MenuId);
      // etc.
    }
EntityTypeBuilder定义了一个Property方法来配置属性。Property方法返回一个
PropertyBuilder，它允许用最大长度值、需要的设置和SQL类型配置属性，指定是否应该
自动生成值（例如标识列）：
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
      // etc.
      modelBuilder.Entity()
        .Property(c => c.MenuCardId)
        .ValueGeneratedOnAdd();
      modelBuilder.Entity()
        .Property(c => c.Title)
        .HasMaxLength(50);
      modelBuilder.Entity()
        .Property(m => m.MenuId)
        .ValueGeneratedOnAdd();
      modelBuilder.Entity()
        .Property(m => m.Text)
        .HasMaxLength(120);
      modelBuilder.Entity()
        .Property(m => m.Price)
        .HasColumnType("Money");
      // etc.
    }
要定义一对多映射，EntityTypeBuilder定义了映射方法。方法HasMany与WithOne结
合，用一个菜单卡定义了到很多菜单的映射。HasMany需要与WithOne链接起来。方法
HasOne需要和WithMany或WithOne链接起来。链接HasOne与WithMany，会定义一对多关
系，链接HasOne与WithOne，会定义一对一关系：
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
      // etc.
      modelBuilder.Entity()
        .HasMany(c => c.Menus)
        .WithOne(m => m.MenuCard);
      modelBuilder.Entity()
        .HasOne(m => m.MenuCard)
        .WithMany(c => c.Menus)
        .HasForeignKey(m => m.MenuCardId);
    }
在OnModelCreating方法中创建映射之后，可以创建如前所述的迁移。
38.4.7 在数据库中搭建模型
除了从模型中创建数据库之外，也可以从数据库中创建模型。
为此，必须在SQL 
Server数据库中给DNX项目添加NuGet包
EntityFramework.MicrosoftSqlServer. 
Design和其他包。然后可以在Developer 
Command
Prompt下使用以下命令：
    > dnx ef dbcontext scaffold
    "server=(localdb)\MSSQLLocalDb; database=SampleDatabase;
    trusted_connection=true" "EntityFramework.MicrosoftSqlServer"
dbcontext命令允许列出项目中的DbContext对象，创建DBContext对象。scaffold命令
创建DbContext派生类以及模型类。dnx ef dbcontext命令需要两个参数：数据库的连接字
符串和应该使用的提供程序。前面的语句显示，在SQL 
Server（localdb）\
MSSQLLocalDb上访问数据库SampleDatabase。使用的提供程序是
EntityFramework.MicrosoftSqlServer。这个NuGet包以及带有Design后缀的同名NuGet包需
要添加到项目中。
在运行了这个命令之后，可以看到生成的DbContext派生类以及模型类型。模型的配
置默认使用流利的API来完成。然而，可以改为使用数据注释，提供- a选项。也可以影响
生成的上下文类名以及输出目录。使用选项- h可以查看不同的可用选项。
38.5 使用对象状态
在创建数据库之后，就可以写入数据。在第一个示例中写入一个表。如何写入关系？
38.5.1 用关系添加对象
下面的代码片段写入一个关系：MenuCard包含Menu对象。其中，实例化MenuCard和
Menu对象，再指定双向关联。对于Menu, 
MenuCard属性分配给MenuCard，对于
MenuCard，用Menu对象填充Menus属性。调用MenuCards属性的方法Add，把MenuCard实
例添加到上下文中。将对象添加到上下文时，默认情况下所有对象都添加到树中，并添加
状态。不仅保存MenuCard，还保存Menu对象。设置IncludeDependents。使用这个选项，
所有相关的Menu对象也都添加到上下文中。在上下文中调用SaveChanged，会创建4个记
录（代码文件MenusSample / Program.cs）：
      private static async Task AddRecordsAsync()
      {
        // etc.
        using (var context = new MenusContext())
        {
          var soupCard = new MenuCard();
          Menu[] soups =
          {
          new Menu
          {
            Text = "Consommé Célestine (with shredded pancake)",
            Price = 4.8m,
            MenuCard = soupCard
          },
          new Menu
          {
            Text = "Baked Potato Soup",
            Price = 4.8m,
            MenuCard = soupCard
          },
          new Menu
          {
            Text = "Cheddar Broccoli Soup",
            Price = 4.8m,
            MenuCard = soupCard
          },
          };
          soupCard.Title = "Soups";
          soupCard.Menus.AddRange(soups);
          context.MenuCards.Add(soupCard);
          ShowState(context);
          int records = await context.SaveChangesAsync();
          WriteLine($"{records} added");
          // etc.
      }
给上下文添加4个对象后调用的方法ShowState，显示了所有与上下文相关的对象的状
态。DbContext类有一个相关的ChangeTracker，使用ChangeTracker属性可以访问它。
ChangeTracker的Entries方法返回变更跟踪器了解的所有对象。在foreach循环中，每个对象
包括其状态都写入控制台（代码文件MenusSample / Program. cs）：
    public static void ShowState(MenusContext context)
    {
      foreach (EntityEntry entry in context.ChangeTracker.Entries())
      {
        WriteLine($"type: {entry.Entity.GetType().Name}, state: {entry.State}, " 
+
        $" {entry.Entity}");
      }
      WriteLine();
    }
运行应用程序，查看4个对象的Added状态：
    type: MenuCard, state: Added, Soups
    type: Menu, state: Added, Consommé Célestine (with shredded pancake)
    type: Menu, state: Added, Baked Potato Soup
    type: Menu, state: Added, Cheddar Broccoli Soup
因为这个状态，SaveChangesAsync方法创建SQL 
Insert语句，把每个对象写到数据
库。
38.5.2 对象的跟踪
如前所述，上下文知道添加的对象。然而，上下文也需要了解变更。要了解变更，每
个检索的对象就需要它在上下文中的状态。为了查看这个操作，下面创建两个不同的查
询，但返回相同的对象。下面的代码片段定义了两个不同的查询，每个查询都用菜单返回
相同的对象，因为它们都存储在数据库中。事实上，只有一个对象会物化，因为在第二个
查询的结果中，返回的记录具有的主键值与从上下文中引用的对象相同。验证在返回相同
的对象时，变量m1和m2的引用是否具有相同的结果（代码文件MenusSample 
/
Program.cs）：
    private static void ObjectTracking()
    {
      using (var context = new MenusContext())
      {
        var m1 = (from m in context.Menus
                where m.Text.StartsWith("Con")
                select m).FirstOrDefault();
        var m2 = (from m in context.Menus
                where m.Text.Contains("(")
                select m).FirstOrDefault();
        if (object.ReferenceEquals(m1, m2))
        {
        WriteLine("the same object");