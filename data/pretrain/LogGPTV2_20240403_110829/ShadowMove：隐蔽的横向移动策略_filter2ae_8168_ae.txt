为了准备WinRM劫持的环境，首先在Windows
10上为正常应用程序场景设置WinRM，其中包括在服务器和客户端上同时启用WinRM，并将服务器添加为客户端计算机上的受信任主机。然后，可以使用客户端计算机上的命令行工具winrs在服务器上运行命令。
但是，ShadowMove在上述默认设置下不起作用，因为WinRM通信量已默认加密。为了使WinRMShadowMove
PoC能够正常工作，管理员必须将WinRM服务器配置为具有基本身份验证，并允许传输未加密的数据。应该注意，这种配置并不罕见，因为它可以使WinRM快速工作，并且某些第三方WinRM客户端和库需要未加密的有效负载才能与WinRM服务器通信。
**(c)劫持WinRM**
为了演示WinRMShadowMove的工作原理，在客户端计算机上，运行命令行winrs -un -r：http：// host_ip：5985
-u：user -p：pass cmd，这将创建一个新的winrs进程并打开命令外壳到远程计算机。
-un标志指定将不对请求和响应消息进行加密。同时在另一个终端中，运行WinRMShadowMove。
当winrs进程开始执行时，它将建立与WinRM服务器的TCP连接，并由连接检测器捕获。结果，连接检测器通知套接字复制器，后者在winrs进程中查找并复制该套接字。
WinRMShadowMove首先以被动模式运行（即，通过重复的套接字窥探传入的网络数据包），以便从服务器获取shellID；然后切换到活动模式。
因为WinRM服务器支持未加密的有效负载，所以可以构造纯文本HTTP有效负载并将其通过TCP套接字发送到服务器。为了使该方案起作用，构造的有效负载必须对服务器合法。在使用Wireshark分析HTTP请求和响应数据包之后，发现MessageID对于每个有效负载都是唯一的，并且实际上是UUID。
因此，使用UUID生成器生成messageID。此外，从身份验证响应消息中获取shellID。使用这两个ID，可以构造有效负载以在远程WinRM服务器上执行可执行文件。为了学习如何构造有效负载，利用了一个称为winrm4j的开源WinRM客户端与远程WinRM服务器进行通信，并且将winrm4j生成的请求数据包用作有效负载的模板。下图显示了示例WinRM请求的有效负载。
在使用劫持的TCP套接字将有效负载发送到远程计算机之前，WinRMShadowMove会挂起合法的进程，以防止其从WinRM服务器获取响应消息。从WinRM服务器获得响应后，它将恢复合法客户端。暂停和恢复之间的时间间隔非常短，因此合法客户可能不会注意到它。上图显示了攻击消息与合法WinRM消息的交换。
## 0x05 Evaluation of ShadowMove Proof-of-concepts
###  1）理论评估
正如前文中演示的那样，当前最先进的横向移动检测器无法检测到ShadowMove。在本节中，讨论了导致现有解决方案在检测ShadowMove横向移动方面无效的根本原因。
在主机级别，为了执行横向移动，在Windows上进行的ShadowMove设计依赖于其他良性进程也常用的一些API函数。例如Windows上的许多进程都使用带有PROCESS_ALL_ACCESS访问标志的OpenProcess进行调用，这实际上是在要求对目标进程的所有可能的许可，包括复制其进程的许可。此外，ShadowMove调用WSADuplicateSocket，它也具有合法的用例，例如将套接字卸载到子进程。其次，很难从套接字描述符追溯到有权访问它的所有进程，因为套接字所有者中仅记录所有者的进程ID。
当前在Linux上进行的ShadowMove设计需要对攻击者有更强的假设，因为它依赖进程注入来强制受害者应用程序进行协作，这使其不如Windows同类程序隐蔽（例如，通过监视良性代码段的运行时完整性）在应用中，人们可以检测到代码注入的效果。此外，由于设计可能会修改系统的配置（例如PATH环境变量和.bashrc），因此可以通过监视此类更改来检测到它。
具体来说，检测Linux上的Shad
owMove攻击存在实际挑战。当前的Linux发行版不支持对应用程序进行运行时代码完整性监视，并且已知的监视工具需要系统管理程序或特殊的硬件。监视配置更改以检测ShadowMove也不是一件容易的事，因为许多良性应用程序（例如npm）也对PATH环境变量和.bashrc进行了更改；因此，监视工具必须检查精确的条件（最有可能是特定于应用程序的），以避免错误警报。将启动器隐藏在看似良性的路径下（例如/home/alice/.npm-packages/bin），这进一步提高了检测的标准。在Linux上流行的几种基于主机的基于IDS的经验中证实了这一点：OSSEC
，Osquery和Wazuh，它们无法使用现有规则检测ShadowMove。当然，可以添加新规则来检测ShadowMove的特定实例，但是这并非易事。
在网络级别，ShadowMove通过两端良性进程建立的现有连接来隧道传送其消息。换句话说，它会将其消息注入由良性客户端发送到远程服务的良性消息流中。因此，检测异常的新连接的基于异常的解决方案对于ShadowMove来说是无关紧要的。此外，在客户端和远程服务器执行所需的身份验证步骤后，ShadowMove开始横向移动。这意味着ShadowMove操作不需要任何其他身份验证尝试。结果，那些将用户登录活动与网络连接活动相关联的异常检测解决方案是无效的。
###  2）实验评估
在本节中将在企业环境中通常存在的基于主机和基于网络的防御机制下，对ShadowMove进行广泛评估。更具体地说，针对新兴的终端检测响应（EDR）系统，一流的防病毒产品，基于主机的IDS和基于网络的IDS对ShadowMove进行了测试。
在新兴的终端检测响应（EDR）系统（即CrowdStrike Falcon Prevent和Cisco AMP）存在的情况下评估ShadowMove。
EDR与评估有关，因为某些EDR（例如CrowdStrike
Falcon）旨在检测横向移动。还会在存在基于主机的tivirus产品的情况下对ShadowMove进行评估：选择排名前50的前四名防病毒产品进行评估（McAfee，Norton，Web
root和Bitdefender）；还选择Windows Defender，因为它是Windows系统上的默认AV。此外，选择Snort
IDS来针对基于网络的解决方案评估ShadowMove（使用了Snort规则V2.9.12）。最后，对于Linux上的ShadowMove设计，使用三种流行的基于主机的IDS（OSSEC，Osquery和Wazuh）对其进行评估。
反制EDR和IDS解决方案：实验确认，ShadowMove PoC可以逃避对Strike Falcon Prevent，Cisco
AMP，OSSEC，Osquery，Wazuh和Snort（Windows和Linux）的检测。详细结果如下表所示。在评估期间，使用了此类工具提供的默认检测规则。研究还手动检查这些默认规则，以了解为什么它们无法检测到ShadowMove。例如，默认的Osquery规则根本不提及ptrace或进程注入。
绕过基于主机的防病毒产品：还通过实验证实，ShadowMove PoC可以逃避Windows
10上上述五个AV的最新版本的检测（这些AV没有Linux版本），总体结果见上表。
供应商反馈：联系了Microsoft安全响应中心（MSRC），并为报告的问题总结了一个案例（编号46036）。
2018年6月21日，MSRC忽略了报告的漏洞漏洞，指出“此行为是设计使然……因为从系统安全的角度出发，如果没有完整的进程，则无法复制进程中的句柄。控制它，到那时还有许多其他攻击可能。”微软工程团队的反馈证实，应对此攻击并非易事，因为要完全解决该攻击，将需要重新设计Windows中句柄的访问控制机制。这也意味着像ShadowMove这样的技术将在可预见的将来继续帮助Windows上的攻击者。
## 0x06 Discussions and Future Work
ShadowMove的可能缓解方法。通过解决现有计算环境中的两个基本弱点，可以减轻ShadowMove的负担。一种想法是更好地将合法进程与潜在的攻击者进程隔离开，以防止套接字窃取。例如，可以将合法进程设置为Protected（在Vista中引入）或Protected
Process Light（在Windows
8.1中引入）进程，这样不受保护的进程就无法使用PROCESS_DUP_HANDLE打开合法进程。但是，这种方法有局限性，例如不能保护具有GUI的进程，并且程序文件必须由Microsoft签名。另一个想法是像SSL一样，在常见的企业计算协议中引入强大的源完整性机制。但是，这可能会破坏许多旧版应用程序。
当前ShadowMove原型的局限性：首先，它必须找到未加密的TCP通道，因为它是用户级别的攻击，无法在受害者进程内部获取机密。由于此限制，ShadowMove无法劫持对其有效负载应用了用户级加密的连接。劫持加密连接的一种已知方法是将代码注入受害者进程，该进程将能够访问纯文本消息。不幸的是，过程注入会使ShadowMove对现有的检测工具（例如Windows
Defender ATP）更可见。此外，加密的存在对于Shad
owMove可能并不总是一个障碍：有人提议在内核空间中实现加密服务（例如TLS），这将使TLS会话容易受到ShadowMove的攻击，因为发送了未加密的有效负载部署此类内核级服务的系统中的套接字接口接收或接收。其次，如果客户端首先使用缓冲区，则Shad
owmMove可能无法从接收缓冲区中获取shellID之类的信息。但是，攻击者可以简单地重试，并且只需成功一次即可实现横向移动。第三，在Linux上进行的ShadowMove设计将代码注入到目标进程的地址空间中，以劫持其控制流，与Windows相比，这危害了ShadowMove的隐蔽性。
通过套接字复制启用的其他攻击：机器内部应用程序（例如浏览器和后端密码管理器）之间的TCP通信并不完全安全。因此，本文的套接字复制技术可用于拦截和窃取此类应用程序中的敏感数据。此外，在本研究中，尝试主要利用客户端套接字（尽管利用了服务器端套接字来同步网络视图）。但是，可以使用相同的技术来利用服务器应用程序。例如，通过复制服务器应用程序使用的套接字，可以注入恶意数据以对客户端计算机发起网络钓鱼攻击。
## 0x07 Conclusion
本文提出了ShadowMove策略，该策略允许APT攻击者在企业网络内进行隐蔽横向移动。
ShadowMove以新颖的套接字复制技术为基础，利用了现有的良性网络连接，并且不需要任何提升的特权，新的连接，额外的身份验证或进程注入。因此，它能够逃避主机和网络级别防御机制的检测。为了确认方法的可行性，开发了ShadowMovefor
Windows和Linux OS的现代版本的原型，该原型成功利用了三个通用企业协议（即FTP，Microsoft
SQL和WinRM）进行横向移动，例如将恶意软件上传到下一个目标计算机，并在下一个目标计算机上开始执行恶意软件。
文章描述了ShadowMove中的技术挑战，例如如何生成适合现有网络连接环境的网络数据包。还通过实验确认原型实现无法被最新的防病毒产品、IDS（例如Snort）以及端点检测响应系统检测到。本研究为企业环境中的横向移动检测提高了标准，并呼吁采用创新的解决方案。