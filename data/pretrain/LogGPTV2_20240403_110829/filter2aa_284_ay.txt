### Response Splitting
Response splitting is a vulnerability that allows an attacker to take control of the response body by injecting additional Carriage Return Line Feed (CRLF) characters into headers. In HTTP, headers and bodies are separated by two CRLF characters. If an attacker's input is used in a response header and contains two CRLF characters, anything after these characters will be interpreted as the response body. During code review, ensure that any information being inserted into headers is properly sanitized.

**Keywords to Search:**
- `javax.servlet.http.HttpServletResponse.sendRedirect`
- `strcpy`
- `setHeader`

### Redirection
When an application sends a redirect response, ensure that the logic cannot be manipulated by an attacker's input, especially when the input determines the redirect destination.

### SQL & Database
Search for Java database-related code to identify classes and methods involved in the persistence layer of the application.

**Keywords to Search:**
- `java.sql.Connection.prepareStatement`
- `java.sql.ResultSet.getObject`
- `select`
- `insert`
- `java.sql.Statement.executeQuery`
- `java.sql.Statement.execute`
- `delete`
- `update`
- `java.sql.Connection.prepareCall`
- `createStatement`
- `java.sql.ResultSet.getString`
- `executeQuery`
- `jdbc`
- `java.sql.Statement.executeUpdate`
- `java.sql.Statement.addBatch`
- `execute`
- `executestatement`

### SSL
Look for code that utilizes SSL for point-to-point encryption.

**Keywords to Search:**
- `com.sun.net.ssl`
- `SSLContext`
- `SSLSocketFactory`
- `TrustManagerFactory`
- `HttpsURLConnection`
- `KeyManagerFactory`

### Session Management
Check the following APIs in code reviews to ensure proper session management.

**Keywords to Search:**
- `getSession`
- `invalidate`
- `getId`

### Code Crawling
Code crawling can help identify potential vulnerabilities in the application.

### Logging
Examine logging code to detect information leakage.

### Legacy Interaction
Java interactions with the native OS can lead to command injection or OS injection attacks, potentially compromising the server.

**Keywords to Search:**
- `java.lang.Runtime.exec`
- `java.lang.Runtime.getRuntime`
- `getId`
- `java.io.PrintStream.write`
- `log4j`
- `jLo`
- `Lumberjack`
- `JDLabAgent`
- `MonoLog`
- `qflog`
- `just4log`
- `log4Ant`

### Ajax and JavaScript
Review Ajax usage and possible JavaScript issues.

**Keywords to Search:**
- `document.write`
- `eval`
- `document.cookie`
- `window.location`
- `document.URL`
- `location.href`
- `location.replace`
- `method=”GET”`
- `On Error GoTo 0`

### Error Handling
Ensure errors in the application are handled properly to prevent manipulation by attackers.

### Information in URL
Check that information extracted from the URL is sanitized.

### Database
Review API calls to ensure they use sanitized input to prevent SQL attacks.

**Keywords to Search:**
- `commandText`
- `select from`
- `update`
- `insert into`
- `.open`
- `ADODB.`
- `Commandtype`
- `ICommand`
- `delete from where`
- `IRowSet`
- `execute`
- `.execute`

### Session
Review session control in ASP applications.

**Keywords to Search:**
- `session.timeout`
- `session.abandon`
- `session.removeall`

### DOS Prevention & Logging
Check ASP APIs to prevent DOS attacks and ensure no sensitive information is logged.

**Keywords to Search:**
- `server.ScriptTimeout`
- `IsClientConnected`
- `WriteEntry`

### Redirection
Prevent attacker input from controlling when and where redirection occurs.

**Keywords to Search:**
- `Response.AddHeader`
- `Response.AppendHeader`
- `Response.Redirect`
- `Response.Status`
- `Response.StatusCode`
- `Server.Transfer`
- `Server.Execute`

### Searching for Code in JavaScript and AJAX
JavaScript and AJAX have brought security issues back to the client side. Review the following keywords to identify potential issues.

**Keywords to Search:**
- `eval`
- `document.cookie`
- `document.referrer`
- `document.attachEvent`
- `document.open`
- `document.URL`
- `document.URLUnencoded`
- `document.write`
- `document.create`
- `document.execCommand`
- `document.forms[0].action`
- `document.location`
- `document.body`
- `document.body.innerHtml`
- `document.body.innerText`
- `document.close`
- `document.writeln`
- `location.hash`
- `location.href`
- `location.search`
- `window.alert`
- `window.attachEvent`
- `window.createRequest`
- `window.execScript`
- `window.location`
- `window.open`
- `window.navigate`
- `window.setInterval`
- `window.setTimeout`
- `XMLHTTP`

### Searching for Code in C++ and Apache
Developers using C++ for web services often build CGI programs or use the Apache httpd framework. Review the following generic C/C++ functions and Apache APIs.

**Legacy C/C++ Methods:**
- `exec`
- `sprint`
- `fprintf`
- `cerr`
- `System`
- `popen`
- `stringstream`
- `fstringstream`
- `Malloc`
- `free`
- `strncpy`
- `Strcat`
- `cout`
- `cin`
- `printf`
- `Stdio`
- `FILE`
- `strcpy`

**Request Processing:**
- `headers_in`
- `ap_read_request`
- `post_read_request`

**Response Processing:**
- `headers_out`
- `ap_rprintf`
- `ap_send_error_response`
- `ap_send_fd`
- `ap_vprintf`

**Logging:**
- `cout`
- `cerr`
- `ap_open_stderr_log`
- `ap_error_log2stderr`
- `ap_log_error`
- `ap_log_perror`

**Cookie Processing:**
- `headers_in`
- `headers_out`
- `ap_cookie_write2`
- `ap_cookie_read`
- `ap_cookie_check_string`

**HTML Encoding:**
- `ap_unescape_all`
- `ap_unescape_url`
- `ap_unescape_url_keep2f`
- `ap_unescape_urlencoded`
- `ap_escape_path_segment`

### Book Versioning
The icons below represent the different versions available in print for this book title:
- **Alpha:** "Alpha Quality" content is a working draft. The content is very rough and under development.
- **Beta:** "Beta Quality" content is the next highest level. The content is still in development.
- **Release:** "Release Quality" content is the final product and the highest level of quality.

### Attribution
You must attribute the work in the manner specified by the author or licensor, without implying their endorsement.

### Share Alike
If you alter, transform, or build upon this work, you may distribute the resulting work only under the same, similar, or compatible license.

### Permissions
- **To Share:** Copy, distribute, and transmit the work.
- **To Remix:** Adapt the work.

### Conditions
- You are free to share and remix the work under the following conditions:
  - Attribution
  - Share Alike

### About OWASP
The Open Web Application Security Project (OWASP) is a worldwide free and open community focused on improving the security of application software. Our mission is to make application security visible so that people and organizations can make informed decisions about application security risks. Everyone is free to participate in OWASP, and all our materials are available under a free and open software license. The OWASP Foundation is a 501c3 not-for-profit charitable organization that ensures the ongoing availability and support for our work.