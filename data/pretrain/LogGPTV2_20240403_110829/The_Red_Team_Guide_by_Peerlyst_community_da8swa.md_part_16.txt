Linux. According to Security Focus, over 770 Linux versions are
vulnerable to Dirty COW (Security Focus, 2016). Furthermore, the
vulnerability has been known to exist as early as 2005 (Torvalds/Linux
Foundation, 2016). This may suggest that adversaries have actively used
the exploit for years without detection or mitigations.
The bug has existed since around 2.6.22 (released in 2007) and was fixed
on Oct 18, 2016.
The following example will demonstrate how DirtyCOW can be used by
attackers to replace the '**root**' user with a new user '**rash**' by
editing the /etc/passwd file.
> ![](media/image170.jpeg)
You can check out other variants of dirty-cow exploits
[here](https://github.com/dirtycow/dirtycow.github.io/wiki/PoCs)
> **[CVE-2017-6074](https://access.redhat.com/security/cve/cve-2017-6074)
> (kernel-4.4.0-21-generic)**
A use-after-free flaw was found in the way the Linux kernel\'s Datagram
Congestion Control Protocol (DCCP) implementation freed **SKB** (socket
buffer) resources for a **DCCP_PKT_REQUEST** packet when the
IPV6_RECVPKTINFO option is set on the socket. A local, unprivileged user
could use this flaw to alter the kernel memory, allowing them to
escalate their privileges on the system.
> ![](media/image171.jpeg)**[CVE-2017-7308](https://access.redhat.com/security/cve/cve-2017-7308)
> (kernel-4.8.0-41-generic)**
It was found that the packet_set_ring() function of the Linux kernel
networking implementation did not properly validate certain block-size
data. A local attacker with **CAP_NET_RAW** capability could use this
flaw to trigger a buffer overflow resulting in a system crash or a
privilege escalation.
> ![](media/image172.jpeg)
>
> **[CVE-2017-1000112](https://access.redhat.com/security/cve/cve-2017-1000112)
> (kernel-4.8.0-58-generic)**
An exploitable memory corruption flaw was found in the Linux kernel. The
append path can be erroneously switched from UFO to non-UFO in
ip_ufo_append_data() when building an UFO packet with MSG_MORE option.
If unprivileged user namespaces are available, this flaw can be
exploited to gain root privileges.
> ![](media/image173.jpeg)
>
> **[CVE-2017-16995](https://access.redhat.com/security/cve/cve-2017-16995)
> (kernel-4.10.0-28-generic)**
An arbitrary memory r/w access issue was found in the Linux kernel
compiled with the eBPF bpf(2) system call (**CONFIG_BPF_SYSCALL**)
support. The issue could occur due to calculation errors in the eBPF
verifier module, triggered by user supplied malicious BPF program. An
unprivileged user could use this flaw to escalate their privileges on a
system.
Setting parameter \"kernel.unprivileged_bpf_disabled=1\" prevents such
privilege escalation by restricting access to bpf(2) call.
> ![](media/image174.jpeg)
## Programs running as root
The famous [EternalBlue](https://en.wikipedia.org/wiki/EternalBlue) and
[SambaCry](https://thehackernews.com/2017/05/samba-rce-exploit.html)
exploit, exploited smb service which generally runs as root.
With just one exploit, an attacker can get remote code execution and
Local Privilege Escalation as well.
It was heavily used to spread ransomware across of the globe because of
its deadly combination.
You should always check if web servers, mail servers, database servers,
etc. are running as root. Many a times, web admins run these services as
root and forget about the security issues it might cause. There could be
services which run locally and are not exposed publicly which can also
be exploited.
> ***\$ netstat -antup** -- It shows you all the ports which are open
> and are listening. We can check for services which are running locally
> if they could be exploited or not.*
### [Exploiting a vulnerable version of MySQL which is running as root to get root access]{.underline}
[MySQL UDF Dynamic Library](https://www.exploit-db.com/exploits/1518/)
exploit lets you execute arbitrary commands from the mysql shell. If
mysql is running with root privileges, the commands will be executed as
root.
> \$ ps -aux \| grep root -- It shows us the services which are running
> as root.
#### \> We can execute arbitrary commands using MySQL shell which will be executed as root.
> ![](media/image175.jpeg)
## Installed Software
In this technique of Privilege Escalation, you need to find if the user
has installed some third party software that might be vulnerable? Check
with these commands below and if you find anything just google it for
exploits.
> *\# Common locations for user installed software*
>
> */usr/local/*
>
> */usr/local/src*
>
> */usr/local/bin*
>
> */opt/*
>
> */home*
>
> */var/*
>
> */usr/src/*
>
> *\# Debian dpkg -l*
>
> *\# CentOS, OpenSuse, Fedora, RHEL rpm -qa (CentOS / openSUSE )*
>
> *\# OpenBSD, FreeBSD pkg_info*
## Weak/reused/plaintext passwords
1.  Check file where webserver connect to database (config.php or
    similar)
2.  Check databases for admin passwords that might be reused
3.  Check weak passwords
> *username:username username:username1 username:root username:admin*
>
> *username:qwerty username:password*
4.  Check plaintext password
#### \# Anything interesting the the mail?
> */var/spool/mail*
>
> *./LinEnum.sh -t -k password*
## Service only available from inside
It might be that case that the user is running some service that is only
available from that host. You can\'t connect to the service from the
outside. It might be a development server, a database, or anything else.
These services might be running as root, or they might have
vulnerabilities in them. They might be even more vulnerable since the
developer or user might be thinking \"since it is only accessible for
the specific user we don\'t need to spend that much of security\".
Check the netstat and compare it with the nmap-scan you did from the
outside. Do you find more services available from the inside?
> *\# Linux netstat -anlp netstat -ano*
## Suid and Guid Misconfiguration
According to documentation, Setuid and Setgid are the access privileges
targets allowing to launch the executable files with rights of an owner
or the group of executable files ( usually it is root).
When a binary with suid permission is run it is run as another user, and
therefore with the other users privileges. It could be root, or just
another user. If the suid-bit is set on a program that can spawn a shell
or in another way be abuse we could use that to escalate our privileges.
For example, these are some programs that can be used to spawn a shell:
-   **nmap**
-   **vim**
-   **less**
-   **more**
If these programs have suid-bit set we can use them to escalate
privileges too. For more of these and how to use the see the next
section about abusing sudo-rights:
-   **nano**
-   **cp**
-   **mv**
-   **find**
### Find suid and guid files
> *#Find SUID*
>
> *find / -perm -u=s -type f 2\>/dev/null*
>
> *#Find GUID*
>
> *find / -perm -g=s -type f 2\>/dev/null*
>
> ![](media/image176.jpeg)
>
> ![](media/image177.jpeg)
>
> *\> Nmap has SUID bit set. A lot of times administrators set the SUID
> bit to nmap so that it can be used to scan the network efficiently as
> all the nmap scanning techniques does not work if you don't run it
> with root privilege.*
>
> ***\$ nmap --interactive** -- runs nmap interactive mode*
>
> ***\$ !sh** -- Lets you escape to the system shell from nmap shell*
>
> ![](media/image178.jpeg)
## Abusing sudo-rights
If the attacker can't directly get root access via any other techniques
he might try to compromise any of the users who have SUDO access. Once
he has access to any of the sudo users, he can basically execute any
commands with root privileges.
If you have a limited shell that has access to some programs using sudo
you might be able to escalate your privileges with.
> *\$ sudo -l -- Prints the commands which we are allowed to run as
> SUDO*
>
> ![](media/image179.jpeg)
We can run find, cat and python as SUDO. These all commands will run as
root when run with SUDO. If we can somehow escape to the shell through
any of these commands, we can get root access.
> *\$ sudo find /home -exec sh -i \\; -- find command exec parameter can
> be used for arbitrary code execution.*
>
> ![](media/image180.jpeg)
## World writable scripts invoked as root
If you find a script that is owned by root but is writable by anyone you
can add your own malicious code in that script that will escalate your
privileges when the script is run as root. It might be part of a
cronjob, or otherwise automatized, or it might be run by hand by a
sysadmin. You can also check scripts that are called by these scripts.
#### #World writable files directories
> *find / -writable -type d 2\>/dev/null*
>
> *find / -perm -222 -type d 2\>/dev/null*
>
> *find / -perm -o w -type d 2\>/dev/null*
#### \# World executable folder
> *find / -perm -o x -type d 2\>/dev/null*
#### \# World writable and executable folders
> *find / \\( -perm -o w -perm -o x \\) -type d 2\>/dev/null*
## Bad path configuration
Putting **.** in the path
If you put a dot in your path you won\'t have to write **./binary** to
be able to execute it. You will be able to execute any script or binary
that is in the current directory.
Why do people/sysadmins do this? Because they are lazy and won\'t want
to write **./.**
This explains it 
And here too 
**Cronjob**
With privileges running script that are editable for other users.
Look for anything that is owned by privileged user but writable for you:
> *crontab -l*
>
> *ls -alh /var/spool/cron*
>
> *ls -al /etc/ \| grep cron*
>
> *ls -al /etc/cron\**
>
> *cat /etc/cron\**
>
> *cat /etc/at.allow*
>
> *cat /etc/at.deny*
>
> *cat /etc/cron.allow*
>
> *cat /etc/cron.deny*
>
> *cat /etc/crontab*
>
> *cat /etc/anacrontab*
>
> *cat /var/spool/cron/crontabs/root*
## Unmounted filesystems
Here we are looking for any unmounted filesystems. If we find one we
mount it and start the priv-esc process over again.
> *mount -l*
>
> *cat /etc/fstab*
## Windows Privilege Escalation
The first thing that comes in your mind when you got a Meterpreter
session in a machine is running "**getsystem**" that will use a number
of different techniques to attempt to gain SYSTEM level privileges on
the remote system.
But what if it fails?
Don't panic. There are still some techniques you can try.
Here the most common techniques in Windows environment for privilege
escalation:
-   Windows kernel exploit
-   Access Token Manipulation
-   AppInit DLLs
-   Bypass User Account Control
-   Trusted Service Paths
-   AlwaysInstallElevated
## Windows kernel exploits
### CVE-2018-8120
An elevation of privilege vulnerability exists in Windows when the
Win32k component fails to properly handle objects in memory, aka
\"Win32k Elevation of Privilege Vulnerability.\" This affects Windows
Server 2008, Windows 7, Windows Server 2008 R2. This CVE ID is unique
from CVE-2018-8124, CVE-2018-8164, CVE-2018-8166.
More details: 
### CVE-2018-0101
The kernel-mode drivers in Transaction Manager in Microsoft Windows
Vista SP2; Windows Server 2008 SP2 and R2; Windows 7 SP1; Windows 8.1,
Windows Server 2012 Gold and R2, Windows RT 8.1; Windows 10 Gold, 1511,
and 1607; and Windows Server 2016 allow local users to gain privileges
via a crafted application, aka \"Windows Elevation of Privilege
Vulnerability.\"
More details: 
### CVE-2018-8497
An elevation of privilege vulnerability exists in the way that the
Windows Kernel handles objects in memory, aka \"Windows Kernel Elevation
of Privilege Vulnerability.\" This affects Windows Server 2016, Windows
10, Windows Server 2019, Windows 10 Servers.
More details:
## Access Token Manipulation
Windows uses access tokens to determine the ownership of a running
process. A user can manipulate access tokens to make a running process
appear as though it belongs to someone other than the user that started
the process. When this occurs, the process also takes on the
security context associated with the new token. For example, Microsoft
promotes the use of access tokens as a security best practice.
Administrators should log in as a standard user but run their tools with