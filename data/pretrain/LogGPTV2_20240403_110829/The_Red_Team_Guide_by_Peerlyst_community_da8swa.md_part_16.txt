### Linux Vulnerabilities and Exploits

#### Dirty COW (CVE-2016-5195)
According to Security Focus, over 770 Linux versions are vulnerable to the Dirty COW (Copy-On-Write) vulnerability. This vulnerability has been known to exist since 2005 (Torvalds/Linux Foundation, 2016). The bug was present in kernels from version 2.6.22 (released in 2007) and was fixed on October 18, 2016.

**Exploit Example:**
The following example demonstrates how an attacker can use the Dirty COW exploit to replace the `root` user with a new user `rash` by editing the `/etc/passwd` file.

![](media/image170.jpeg)

For more variants of the Dirty COW exploit, see [here](https://github.com/dirtycow/dirtycow.github.io/wiki/PoCs).

#### CVE-2017-6074
A use-after-free flaw was found in the Linux kernel's Datagram Congestion Control Protocol (DCCP) implementation. When the `IPV6_RECVPKTINFO` option is set on the socket, a local, unprivileged user could use this flaw to alter the kernel memory, allowing them to escalate their privileges on the system.

![](media/image171.jpeg)

#### CVE-2017-7308
The `packet_set_ring()` function in the Linux kernel networking implementation did not properly validate certain block-size data. A local attacker with `CAP_NET_RAW` capability could use this flaw to trigger a buffer overflow, resulting in a system crash or privilege escalation.

![](media/image172.jpeg)

#### CVE-2017-1000112
An exploitable memory corruption flaw was found in the Linux kernel. The append path can be erroneously switched from UFO to non-UFO in `ip_ufo_append_data()` when building an UFO packet with the `MSG_MORE` option. If unprivileged user namespaces are available, this flaw can be exploited to gain root privileges.

![](media/image173.jpeg)

#### CVE-2017-16995
An arbitrary memory read/write access issue was found in the Linux kernel compiled with the eBPF `bpf(2)` system call (`CONFIG_BPF_SYSCALL`) support. The issue could occur due to calculation errors in the eBPF verifier module, triggered by a user-supplied malicious BPF program. An unprivileged user could use this flaw to escalate their privileges on the system.

Setting the parameter `kernel.unprivileged_bpf_disabled=1` prevents such privilege escalation by restricting access to the `bpf(2)` call.

![](media/image174.jpeg)

## Programs Running as Root

### EternalBlue and SambaCry
The famous [EternalBlue](https://en.wikipedia.org/wiki/EternalBlue) and [SambaCry](https://thehackernews.com/2017/05/samba-rce-exploit.html) exploits targeted the SMB service, which generally runs as root. With just one exploit, an attacker can achieve remote code execution and local privilege escalation. These exploits were heavily used to spread ransomware globally due to their deadly combination.

To check if services are running as root, use:
```bash
$ netstat -antup
```

### Exploiting a Vulnerable MySQL Service
The [MySQL UDF Dynamic Library](https://www.exploit-db.com/exploits/1518/) exploit allows you to execute arbitrary commands from the MySQL shell. If MySQL is running with root privileges, these commands will be executed as root.

```bash
$ ps -aux | grep root
```

You can then execute arbitrary commands using the MySQL shell, which will be executed as root.

![](media/image175.jpeg)

## Installed Software
In this technique, you need to find if the user has installed any third-party software that might be vulnerable. Check common locations and use the following commands:

- **Common locations for user-installed software:**
  - `/usr/local/`
  - `/usr/local/src`
  - `/usr/local/bin`
  - `/opt/`
  - `/home`
  - `/var/`
  - `/usr/src/`

- **Debian:**
  ```bash
  dpkg -l
  ```

- **CentOS, OpenSUSE, Fedora, RHEL:**
  ```bash
  rpm -qa
  ```

- **OpenBSD, FreeBSD:**
  ```bash
  pkg_info
  ```

## Weak/Reused/Plaintext Passwords
1. Check files where the web server connects to the database (e.g., `config.php`).
2. Check databases for admin passwords that might be reused.
3. Check for weak passwords:
   - `username:username`, `username:username1`, `username:root`, `username:admin`
   - `username:qwerty`, `username:password`
4. Check for plaintext passwords in emails:
   ```bash
   /var/spool/mail
   ./LinEnum.sh -t -k password
   ```

## Services Only Available Internally
It may be the case that the user is running a service that is only available from the host. These services might be running as root or have vulnerabilities. Use the following commands to compare internal and external services:

```bash
# Linux
netstat -anlp
netstat -ano
```

## SUID and GUID Misconfiguration
Setuid and Setgid are access privileges that allow executable files to run with the rights of the owner or group. If a binary with SUID permission is run, it executes with the privileges of another user, often root. If the SUID bit is set on a program that can spawn a shell, it can be abused to escalate privileges.

**Example programs:**
- `nmap`
- `vim`
- `less`
- `more`
- `nano`
- `cp`
- `mv`
- `find`

**Find SUID and GUID files:**
```bash
# Find SUID
find / -perm -u=s -type f 2>/dev/null

# Find GUID
find / -perm -g=s -type f 2>/dev/null
```

![](media/image176.jpeg)
![](media/image177.jpeg)

**Nmap with SUID:**
```bash
$ nmap --interactive
$ !sh
```

![](media/image178.jpeg)

## Abusing Sudo Rights
If an attacker cannot directly get root access, they might try to compromise users with sudo access. Once they have access to a sudo user, they can execute commands with root privileges.

```bash
$ sudo -l
```

![](media/image179.jpeg)

**Example:**
```bash
$ sudo find /home -exec sh -i \;
```

![](media/image180.jpeg)

## World-Writable Scripts Invoked as Root
If you find a script owned by root but writable by anyone, you can add malicious code to escalate your privileges when the script is run as root. It might be part of a cron job or otherwise automated.

**Find world-writable directories:**
```bash
find / -writable -type d 2>/dev/null
find / -perm -222 -type d 2>/dev/null
find / -perm -o w -type d 2>/dev/null
```

**Find world-executable folders:**
```bash
find / -perm -o x -type d 2>/dev/null
```

**Find world-writable and executable folders:**
```bash
find / \( -perm -o w -perm -o x \) -type d 2>/dev/null
```

## Bad Path Configuration
Putting `.` in the path allows you to execute scripts or binaries in the current directory without writing `./binary`.

**Cron Jobs:**
Look for anything owned by a privileged user but writable for you:
```bash
crontab -l
ls -alh /var/spool/cron
ls -al /etc/ | grep cron
ls -al /etc/cron*
cat /etc/cron*
cat /etc/at.allow
cat /etc/at.deny
cat /etc/cron.allow
cat /etc/cron.deny
cat /etc/crontab
cat /etc/anacrontab
cat /var/spool/cron/crontabs/root
```

## Unmounted Filesystems
Check for unmounted filesystems and mount them to start the privilege escalation process again.

```bash
mount -l
cat /etc/fstab
```

## Windows Privilege Escalation

### Getting System Access
When you have a Meterpreter session, the first thing to try is `getsystem`. If it fails, there are other techniques to attempt to gain SYSTEM level privileges.

### Common Techniques
- **Windows Kernel Exploits**
- **Access Token Manipulation**
- **AppInit DLLs**
- **Bypass User Account Control**
- **Trusted Service Paths**
- **AlwaysInstallElevated**

### Windows Kernel Exploits
- **CVE-2018-8120**: Elevation of privilege vulnerability in the Win32k component.
- **CVE-2018-0101**: Elevation of privilege vulnerability in the Transaction Manager.
- **CVE-2018-8497**: Elevation of privilege vulnerability in the Windows Kernel.

### Access Token Manipulation
Windows uses access tokens to determine the ownership of a running process. An attacker can manipulate access tokens to make a process appear as though it belongs to someone other than the user who started it. This can lead to the process taking on the security context associated with the new token.