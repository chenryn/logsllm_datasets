named packageName or pkg would take a few valid package
names as initial seeds for that parameter instead of testing
non-relevant values. Experiments show that this technique for
reﬁning inputs reduces the testing time by at least a factor of
5 without affecting the modeled policy.
However, there are other non-primitive input types that we
classify in two categories: basic Android types (e.g., Intent and
URI) and complex types (e.g., event listeners and bitmap).
Similar to primitive types, we deﬁne ﬁxed seeds for basic
types that are used to instantiate objects of those types at
runtime. For instance, a package name and a class name
are used as seeds for creating an Intent object. For complex
types, the TS uses a recursive algorithm that receives the
qualiﬁed class name of the object to be instantiated as an
input, searches its class for a constructor or a method that
receives inputs of primitive types and returns an object of
the desired complex type, and calls that constructor/method
to instantiate the object. However, if the constructor or the
method itself receives objects of complex types, the algorithm
tries to instantiate those objects ﬁrst, and so on. If the object
Algorithm 1 Building Security Policy of an API
Input Service s, API a, ReachableMethods m
Output modeled security policy
1: procedure BUILDSECURITYPOLICY
2: strategies := getDeﬁnedStratigies()
3: inputs := getInputSeeds(s, a)
4: results := []
5: for strategy of strategies do
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17: modelSecurityPolicy(s, a, results)
instrumentReachableMethods(m)
instrumentSecurityCheckingMethods()
missingPrivileges = invokeAPI(s, a)
privileges.insert(missingPrivileges)
r := collectTracesAndResult(s, a, privileges)
results.insert(r)
measureAndReportCoverage()
for input of inputs do
privileges := []
repeat
until missingPrivileges is empty
is an implementation of a speciﬁc interface, the TS uses Java
reﬂection to build a proxy object that implements that interface.
This input generation technique has proven to be effective,
except for a few special classes that can be instantiated but
not used in IPC due to early sanitization while marshalling
inputs in the proxy. The lists of seeds for API parameters are
then used to create the Cartesian products of seed inputs, where
each product is called an input set. Those input sets are stored
in the conﬁguration ﬁle of the API. When the TM selects an
input set to be tested, this set gets encoded in a ﬁle that is
pushed to the TS ( 1 ), which uses it to generate API’s input.
Measuring Coverage (RQ3): As we will discuss later in
this section, one important feature that DYNAMO relies on for
modeling the security policies of APIs and measuring coverage
are the methods’ execution traces that are collected when
invoking an API under test. To achieve this, DYNAMO conducts
reachability analysis with WALA [3] on the target API and
produces a list of qualiﬁed method names that are reachable
from the target API. DYNAMO uses this list to instrument the
methods such that they report their stack traces to the TM when
called. This also serves as feedback on achieved coverage for
each testing iteration. Speciﬁcally, we measure the coverage by
counting the number of unique traces and comparing it with the
total number of unique methods from the reachability analysis.
As such, DYNAMO uses method-coverage as a proxy for code
coverage. A low method-coverage of an API could suggest a
failing execution due to input sanity checks, an unexpected
new class of security checks, or an early return. As such, the
low method-coverage indicates the need to reﬁne seeds, elevate
input generation techniques, or investigate new security checks.
Clearly, another approach to using WALA is instrumenting
all methods of the framework. Unfortunately, our experiments
show that this technique comes with a huge overhead that
destabilizes and hinders the analysis and therefore was not
technically possible in the current version of DYNAMO. Unfor-
tunately, relying on Chizpurﬂe’s approach for measuring code-
coverage [34] was also not possible due to technical limitations
in the underlying technique (i.e., Frida’s Stalker [46]), which
does not work on all CPU architectures of tested devices.
Chizpurﬂe’s approach also entailed high overhead that hin-
dered our analysis as the execution of several threads needed
to be tracked (i.e., from processes of system\_server,
6
1 public long addClient(IAccManClient cb, int userId) {
2
final int resolvedUserId =
resolveCallingUserId(userId);
{...}
int resolvedUserId = resolve(userId);
int callingUid = Binder.getCallingUid();
3
4 }
5 public int resolveCallingUserId(int userId) {
6
7
8
9
10
11
12
13
14
15
16
return resolvedUserId;
if ( callingUid == 0 || callingUid == 1000 )
int callingUserId = UserHandle.getUserId(callingUid);
if ( callingUserId == userId )
return resolvedUserId;
if( ! checkPermission(INTERACT_ACROSS_USERS,
callingUid) )
throw new SecurityException();
return resolvedUserId;
17
18
19
20 }
Listing 1. Simpliﬁed illustration of the addClient API
CallingUid == 0 || CallingUid == 1000 ||
CallingUid.userId == Parameter#2 ||
CallingUid.hasPermission(INTERACT_ACROSS_USERS)
Listing 2. Modeled security policy of the addClient API
TS, and Target Service). Relying on WALA’s results for
reachability analysis for measuring method-coverage, given
that they might be imprecise, does not affect the precision of
our approach as we ﬁlter out stack traces that do not start with
the target API (i.e., are not triggered by invoking the API).
DYNAMO’s Testing Strategies (RQ4): To model the access
control of a speciﬁc API, DYNAMO employs several predeﬁned
testing strategies (see Algorithm 1). A strategy is a set of
operations that
try to discover one aspect of the security
policy of the target API. For instance, one strategy could
focus on discovering permissions while another detects checks
on caller’s UID and PID. Each strategy starts with a list of
input sets that are generated from predeﬁned seeds. The same
list is exercised in all strategies. For each strategy, DYNAMO
exercises each input set and detects the failing security checks
as they occur. When security checks are reported, they are
fed back in the next iteration for the same input set where
DYNAMO instructs the IS to bypass failing checks to detect
other checks along the same execution path. This process
repeats until no further security checks are reported. After
all strategies are concluded, the TM marks the current API as
complete and moves on to the next API to be tested. With
this feedback-driven testing, DYNAMO explores several caller
contexts (i.e., third-party app, privilege app, etc.) to trigger and
detect security checks.
Example: To understand how DYNAMO’s strategies work
in detail, consider a simpliﬁed version of the addClient
API from the AccessibilityManagerService as exam-
pled (see Listing 1). To execute this API, the caller has to
qualify for one of the following conditions: 1) The caller
must run under a UID equal to 0 or 1000 (line 9). 2) The
caller must run in a context whose userId is equal to the
API’s second input parameter (line 13). 3) The caller must
7
be granted the INTERACT_ACROSS_USERS (ACU) permission
(line 16). In case none of those conditions is satisﬁed, a
SecurityException is raised (line 25). To simplify the
example, we deﬁne only one set of inputs that consists of null
and 10 as ﬁrst and second parameters, respectively. Choosing
10 for this example is not arbitrary as it corresponds to the
userId of the secondary proﬁle (while 0 is the userId of the
main proﬁle). Invoking the API with this set of inputs from
the main proﬁle and from an unprivileged context would result
in the caller receiving a SecurityException because none
of the above conditions would qualify. In the following, we
explain how DYNAMO detects those conditions.
Since missing permissions is the most common cause for
denying access, DYNAMO’s ﬁrst strategy aims for discov-
ering and granting the missing permission(s) to the calling
context. DYNAMO leverages the fact
that permissions are
centrally checked by the checkUidPermission API of the
PackageManagerService and therefore instruments this API
to report the missing permission(s) to the TM (see steps 2 and
3 in Figure 2). This API receives the permission name and
caller’s identity (i.e., UID and PID) and returns either GRANTED
or MISSING based on whether the caller (identiﬁed by its UID
and PID) has been previously granted this permission or not.
After reporting the missing permission to the TM through the
Analyzer Module ( 3 , 6 and 7 ), the permission is used in
the next testing iteration to elevate the privileges of the caller’s
context by again instrumenting the checkUidPermission
API such that it would return a GRANTED response when called
for the same permission and caller’s identity ( 2 and 3 ).
This way, DYNAMO manages to report that ACU permission
is needed for unprivileged callers of the main proﬁle. This
strategy generally detects all method-based checks that are
known from the literature (AppOps permissions, checks on
calling package, or user restriction checks). Notice that this
strategy is orthogonal to all other strategies, for example, to
detect permissions from secondary proﬁles (see below).
The second strategy tries to infer cross-user permissions.
Thus, the TM instruments the system such that the caller would
impersonate a UID from the secondary proﬁle (which starts at
1000000 [23]). To technically achieve this, the TM instructs
the IS to instrument the Binder.getCallingUid() of the
Binder class on the target service such that it would return the
impersonated instead of the actual UID of the caller ( 2 and
3 ). When calling the API with the same input set used before
while impersonating the new context, the callingUserId
will be resolved to 10 (which corresponds to the userId
of the second proﬁle) and that matches the second parameter
(see lines 13). Therefore, the API will successfully execute
without requiring any permission. Notice that faking the PID
is technically similar to faking the UID (i.e., via instrumenting
the Binder.getCallingPid()). Lastly, DYNAMO tries to
detect security checks based on the caller’s UIDs (see line
9). For that, it harvests all UIDs that are reserved for system
users via the shell interface of the package manager (i.e.,
based on the condition 0 <= UID <= 2000 [23]). Thus, when
invoking the API while the caller is impersonating root (UID
= 0) or system (UID = 1000),
the API will successfully
execute. Otherwise, callingUserId would resolve to 0 and
a SecurityException will be raised if the privileged UID
does not have the speciﬁed permission.
Throughout the testing phase, the conﬁguration ﬁle of the
API under test serves as a reference to identify the current
strategy and state (e.g., permissions granted or the different
impersonated contexts). For each strategy, the API is executed
until no new changes on the calling context are required (e.g.,
no need to grant a new permission). When that is satisﬁed,
the API is executed one more time, and the execution of the
strategy is considered successful if the results of the last two
execution iterations match entirely. When all strategies are
exercised, the Analyzer Module concludes the testing phase
for the current API ( 8 ).
Instrumenting Targets (RQ5): In addition to instrumenting
the methods that implement each strategy (as explained above),
the TM further instruments the reachable methods from the
target API (i.e., based on WALA’s reachability analysis) such
that they report their stack traces, inputs, and outputs to the
Analyzer Module. A stack trace is considered relevant only
when it starts with the target API and when the caller’s PID
matches TS’s PID (i.e., triggered by DYNAMO’s testing).
Executing API: To execute one testing iteration, the TM
sends a message to the TS so it would generate API’s inputs
(as described earlier) and invoke the API using Java reﬂection
( 4 ). The API will
then trigger the instrumented security
checks and reachable methods ( 5 ) and they will start reporting
to the Analyzer Module ( 3 , 6 , and 7 ). After a speciﬁed
timeout, the TM reverts instrumented methods to their original
implementation and pulls the invocation results from the TS
and feeds it to the Analyzer Module.
Modeling of Permission Mapping (RQ6): While some
security checks are easily inferred (e.g., permissions and
AppOps), others require multiple invocations of the API under
different contexts to be inferred. Take the cross-user security
checks from Listing 1 as an example (line 13). We can infer
the presence of a multi-user check only after looking at the
results of invoking the API from the secondary proﬁle and
the results from the main proﬁle while no permissions are
assigned to the caller. The call from the main proﬁle failed
with a security exception, while the call from the second proﬁle
succeeded. This suggests the presence of a cross-user check
but is not deﬁnite in describing this check because it could be
based on input or whitelisting the calls from secondary proﬁles
(e.g., were callingUserId checked to equal 0 instead of
userId). To differentiate, we observe the API’s result when
its second parameter changes. When the second parameter
is 0, the outcome of invoking the API from the main and
secondary proﬁle is ﬂipped (i.e., allowing a call from the main
proﬁle and requiring permission from the secondary proﬁle).
However, when it is neither 0 nor 10, both calls start asking
for the ACU permission. At this point, we know that the API’s
second parameter has an inﬂuence on access control and report
it accordingly. We apply a similar mechanism for detecting
whitelisted UIDs. Speciﬁcally, we observe the API’s behaviour
and traces when invoking the API while impersonating the
root and system UIDs to ﬁnd that resolveCallingUserId
returns without raising an exception, suggesting the presence
of disjunct checks on those UIDs. Based on that, the Policy
Builder summarizes the results in a ﬁrst-order formula that
models addClient’s security policy as shown in Listing 2.
Although not covered in the example, we also detect further
security checks along the execution paths and report those
checks in conjunction with others. We handle the special case
where any of the multiple permissions is needed. For that,
we leverage that all permissions would be checked before
throwing a SecurityException when the last permission
check fails. This means multiple permissions are reported.
Thus, the TM exercises those permissions in disjunction to
observe the relation between them. When the traces include
security checks, but our rules fail to model the policy, we
manually look at the traces and try to enhance our rules.
Despite that, with a few predeﬁned association rules between
API calls and traces, we can model the security policy of the
majority of APIs (see Section V). Of course, we realize that
this modeling can be incomplete, as we discuss in Section VI.
V. COMPARISON WITH PRIOR RESULTS
We built DYNAMO to complement the methodology for