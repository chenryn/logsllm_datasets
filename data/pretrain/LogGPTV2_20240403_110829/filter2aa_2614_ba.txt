层的消息保护纳入其中，JWT及JOSE（Javascript对象签名和加密）相
关技术就是代表性的消息保护技术。
1.JOSE协议栈
JOSE协议框架中涉及的技术均与JWT相关，主要有以下几个部分
构成。
■ JSON Web Token（JWT）：由RFC7519规范中定义的、针对
JSON对象在通信交互过程中使用的、一种可以签名或加密的标准数据
格式。
■ JSON Web Signature（JWS）：由RFC7515规范定义的、针对
JWT格式进行数字签名的操作规范。
■ JSON Web Encryption（JWE）：由RFC7516规范定义的、针对
JSON数据进行加密的操作规范。
■ JSON Web Algorithm（JWA）：由RFC7518规范定义的，用于
JWS或JWE所使用的数字签名或加密算法列表。
■ JSON Web Key（JWK）：由RFC7517规范定义的，用于JSON
对象描述加密密钥、密钥集的数据结构和表示方式。
上述5个技术规范分别从加密或签名算法、密钥数据结构定义、签
名或加密操作规范三个方面定义了JSON对象的安全使用。它们之间的
关系如图9-5所示。
使用密钥（JWK定义）和加解密算法（JWA定义）对JWT格式的数
据进行处理，如果仅对标头和有效载荷进行签名，则使用的技术标准为
JWS；如果是对JWT格式的数据进行加密，则使用的技术标准为JWE。
在使用JWS或JWE时，技术处理过程中都需要依赖于JWK定义的密钥结
构和JWA定义的算法列表。
●图9-5 JWT协议栈各组成部分之间的相互关系
2.JWT组成结构
在本书73.2.4节为读者介绍ID令牌基本概念时，曾提到ID令牌的传
输格式为JWT格式。JWT是RFC 7519标准为使用JSON数据格式作为传
输对象的多方通信所提供的解决方案，通常以字符串形式表示，由标
头、有效载荷、签名三部分组成，各个组成部分之间以点号（.）分
隔。如下所示：
■ 
标头（Header）：由令牌类型（即JWT）和所使用的签名算法
（如HMAC SHA256或RSA）两部分组成，其结构样例如下所示：
此结构的JSON对象，将在Base64 URL编码后，作为JWT的第一个
组成部分放入JWT字符串中。
■ 有效载荷（Payload）：主要为声明集合，包含三类声明，注册
声明、公共声明、私有声明。注册声明不是强制性的，只是建议使用
性的，比如iss（发布者）、exp（到期时间）、sub（主题）等，详细字
段可以参考7.2.4节相关内容；公共声明对JWT使用人员可以随意定义，
但为避免冲突，在定义时需要注意命名空间；私有声明是用于通信各方
共享的、自定义的、不属于前两种（注册声明、公共声明）的声明。其
结构样例如下所示：
此JSON对象也将被Base64 URL编码，然后作为JWT的第二个组成
部分拼入JWT字符串中。
■ 签名（Signature）：对标头、有效载荷、公钥/私钥信息使用标
头中指定的签名算法进行签名。如果使用SHA算法，其算法伪码为：
如果使用RSA算法，则算法伪码为：
标头、有效载荷、签名这三个部分，用点号连接在一起，就构成了
一个JWT，如图93-6所示。
●图9-6 JWT生成过程示意图
而对于JWT格式的验证以及签名算法的使用，推荐读者使用JWT的
debugger工具进行调试（https://jwt.io/#debugger-io）。从JWT组成结构
描述可以看出，对于标头和有效载荷只是简单的Base64 URL编码，并无
加密保护。对于签名与否，依赖于标头alg字段的定义，如果没有使用
签名，即标头定义为{"alg":"none"}的情况下，则整个JWT格式的字符串
中最后一段缺失，形式类似于下面的结构：
即payload之后的点号后内容为空，这种情况下的数据，相比有签名
的结构，缺失了数据篡改的验证，因安全性不高不建议在生产环境使
用。在JOSE相关技术中，依赖JOSE标头中alg、typ、cty等字段不同，
可划分为JWS和JWE。
3.JWS组成结构
JWS主要通过对标头、有效载荷的JSON数据添加签名，通过签名
校验，保证数据传输过程的完整性。其表现形式与JWT主要差异表现在
以下两点。
■ 标头结构的不同：在JWS或JWE中，标头又称为JOSE标头，格式
比上文中提及的JWT标头结构复杂，由注册标头、公共标头、私有标头
三部分组成。关于标头中各个字段含义及哪些属于JWS、哪些属于
JWE，可以阅读JOSE文档，理解各个字段之间的细微差异，在线网址
为https://www.iana.org/assignments/jose/jose.xhtml。
■ 数据结构中添加签名：在JWS中，签名必须存在，不会出现标头
中alg为none时，无签名的情况。
组成结构上，JWS遵循JWT的组成结构，这从生成JWS数据的算法
也可以看出，算法伪码如下：
在JWS的使用中，因为是附加了签名的JWT数据结构，携带了通信
内容的验证数据，可有效地防止中间人劫持后的数据篡改和欺骗。在服
务器端，当接收到客户端传输的数据后，可以通过验签操作，对传输数
据进行验证。如果验证未通过，可以拒绝客户端的请求操作；同样，客
户端对服务器端响应的数据，也可以采用验签操作，来验证从服务器端
到客户端传输过程的数据完整性和一致性。
与此同时，作为JWS的使用者，从上述的JWS生成算法应该明白，
作为主要数据的承载部分有效载荷仍未做加密处理，仅Base64编码，这
对传输敏感数据是不安全的。JSON对象中敏感数据的安全传输，通常
采用JWE。
4.JWE组成结构
JWE的组成结构相对JWS来说较为复杂，由受保护的标头、密钥、
初始向量、加密后的数据、认证标签5个部分组成，各个部分之间用点
号分割，如图9-7所示。
●图9-7 JWE组成结构
这5个部分连接时，使用的算法与JWT类似，都是Base64编码后的
连接串。创建JWE字符串的步骤，如图9-8所示。
1）定义标头，在标头中指定加密密钥CEK的加密算法RSA-OAEP
和数据加密+认证标记生成算法AES GCM。
2）用接收方公钥+CEK加密算法RSA-OAEP，对随机生成2356位随
机数组进行加密，生成加密密钥CEK。
3）生成96位随机数初始向量iv数组。
●图9-8 JWE创建过程
4）采用AES GCM加密算法、加密密钥CEK、初始向量iv，对明文
部分进行加密生成密文，并输出认证标记Authentication Tag。
有了上述4个步骤生成如图9-8中虚线部分表示的数据后，再用算法
base64url(utf8(标头)).base64url(加密密钥).base64url(初始向
量).base64url(密文).base64url(认证标记)生成JWE格式字符串。
从上述对JWT、JWS、JWE的简单介绍可以看出，JWS和JWE作为
JWT使用的不同技术形式，JWS具备对内容进行数字化的签名，而JWE
对内容进行加密保护，只有将两者结合使用，才能解决数据加密与签名
校验的功能，保障数据在传输过程中的完整性、一致性和保密性。
5.JWT技术应用与安全性
JWT及其相关技术在API领域中的应用已非常普遍，从前两章中对
OpenID Connect和OAuth协议的流程介绍中，细心的读者已经看到了ID
令牌、访问令牌等具有明显JWT特征的参数或数据结构。在互联网应用
程序中，JWT目前主要使用的场景如表9-1所示。
表9-1 JWT使用场景
随着JWT的广泛使用，其自身的问题也逐渐暴露出来。通过上文的
讲述可以了解，JWT中的数据仅仅是Base64url编码，当传输敏感数据
时，其数据的机密性将受到影响，这种场景下JWE将作为被选项。作为
一个复杂的技术标准，JWT过于笨重，不利于开发者快速的学习和使
用，比如如果开发者经验不足，使用了非强制签名的JWT格式，则数据
在传输过程中被篡改就无法来验证。即使使用了HMAC-SHA256来签
名，在当前计算机运算速度高速增长背景下，算法本身的安全也将受到
威胁，这将为攻击者伪造JWT提供了有利条件。有时，开发者会将API
KEY放入JWT中进行传输，虽然这也是JWS标准所定义的，但其安全性
很难保障，因为过去的漏洞案例已表明某些加密算法的不安全性，比如
ECDH-ES算法、AES算法的GCM模式，选择带有PKCS1v1.5填充的RSA
算法等。在JWT的使用场景中，其常被用来作为身份认证的介质，即无
须执行数据库查询，仅需验证JWT数据的正确性来验证身份，这样的控
制流程中，一旦JWT被接管，则意味着用户身份也同样被攻击者接管。
正是JWT标准的复杂和对应实现类库的众多，给开发者带来便利的同时
也为安全风险埋下了隐患。对JWT技术细节理解不深或加密算法知识匮
乏的人使用JWT，往往发生重大的漏洞。
当开发者在使用JWT时，首先要根据自己的业务场景确定是使用
JWS还是JWE，并了解对应的加密算法以及其相关类库。使用复杂的密
钥，并将密钥存放在服务器上安全的地方，比如密钥应放在具有权限访
问控制的目录中，不能放在Web服务的应用目录，以防止被他人下载；
密钥如果以文件的形式存放，则文件名改为复杂且不容易猜测的文件
名；永远不要使用硬编码的方式存放密钥等。对于签名算法，最好是在
服务器端强制指定，不允许客户端任意选择。无签名的JWT数据不允许
使用，通信时，要严格地执行验签过程，防止绕过验证过程。对于JWT
作为令牌使用的场景，要防止令牌的未授权获取和令牌泄露，避免将敏
感信息放入有效载荷中，同时设置令牌的有效期，且对有效期进行验
证，防止令牌重放攻击。遵循JWT安全最佳实践的要求，既解决业务支
撑的难题又保障应用程序的安全性。
9.2.2 Paseto技术
上一节为读者介绍了JWT相关的技术，从上述内容可以看出，JWT
的相关技术体系在构建过程中发布了一系列的标准或规范，这些标准保
障JWT技术框架完整性的同时也人为地设置了很多烦琐的操作，提高了
技术的使用门槛。为了简化操作和规避上述安全问题，Scott
Arciszewski在2018年初设计了Paseto技术。
1.Paseto技术简介
Paseto抛弃JSON安全技术有关的一系列标准，重新制定了一套与平
台无关的安全令牌技术，此技术一经发布就很快在安全社区中得到应
用，其官方网址为https://paseto.io/。在Paseto的协议标准约束中，对其
当前版本以及后续版本的安全性，从消息验证和加密两个方面，给出了
明确的约定。
■ 为了防止消息被攻击者篡改，一切消息都必须经过验证。禁止使
用未经身份验证的加密模式，比如AES-CBC。除了密文外，随机数或
初始化向量也必须包含在身份验证标签中。
■ 
禁止使用不确定的、有状态的或其他危险的签名方案，公钥加
密必须是IND-CCA2安全的，才能考虑包含在内。
除了上述的安全约束外，Paseto协议标准对协议的版本也作了要
求：只允许存在两个版本。当前为v1和v2版本，如果v3版本出现了，则
v1版本废弃；如果v4版本出现了，则v2版本废弃，一直只保留两个版
本，从而保证协议框架的简洁性，便于使用者参考。
2.Paseto组成结构
Paseto在组成结构上与JWT很相似，也是Base64编码的字符串，由
33～4个部分组成，每一个组成部分之间再用点号连接，如图9-9所示。
●图9-9 Paseto组成结构
■ 协议版本：此组成部分的用途是告诉使用者正在使用哪个版本的