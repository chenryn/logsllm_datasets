if (*a1 
int comp(const void * p1, const void * p2) /* 该函数的形式必须是这样 */
1273
{
/* 得到正确类型的指针 */
const struct names *ps1 = (const struct names *) p1;
const struct names *ps2 = (const struct names *) p2;
int res;
res = strcmp(ps1->last, ps2->last); /* 比较姓 */
if (res != 0)
return res;
else /* 如果同姓，则比较名 */
return strcmp(ps1->first, ps2->first);
}
该函数使用 strcmp()函数进行比较。strcmp()的返回值与比较函数的要求
相匹配。注意，通过指针访问结构成员时必须使用->运算符。
1274
16.12 断言库
assert.h 头文件支持的断言库是一个用于辅助调试程序的小型库。它由
assert()宏组成，接受一个整型表达式作为参数。如果表达式求值为假（非
零），assert()宏就在标准错误流（stderr）中写入一条错误信息，并调用
abort()函数终止程序（abort()函数的原型在stdlib.h头文件中）。assert()宏是
为了标识出程序中某些条件为真的关键位置，如果其中的一个具体条件为
假，就用 assert()语句终止程序。通常，assert()的参数是一个条件表达式或
逻辑表达式。如果 assert()中止了程序，它首先会显示失败的测试、包含测
试的文件名和行号。
16.12.1 assert的用法
程序清单16.18演示了一个使用assert的小程序。在求平方根之前，该程
序断言z是否大于或等于0。程序还错误地减去一个值而不是加上一个值，故
意让z得到不合适的值。
程序清单16.18 assert.c程序
/* assert.c -- 使用 assert() */
#include 
#include 
#include 
int main()
{
double x, y, z;
puts("Enter a pair of numbers (0 0 to quit): ");
1275
while (scanf("%lf%lf", &x, &y) == 2
&& (x != 0 || y != 0))
{
z = x * x - y * y; /* 应该用 + */
assert(z >= 0);
printf("answer is %f\n", sqrt(z));
puts("Next pair of numbers: ");
}
puts("Done");
return 0;
}
下面是该程序的运行示例：
Enter a pair of numbers (0 0 to quit):
4 3
answer is 2.645751
Next pair of numbers:
5 3
answer is 4.000000
Next pair of numbers:
1276
3 5
Assertion failed: (z >= 0), function main, file /Users/assert.c, line 14.
具体的错误提示因编译器而异。让人困惑的是，这条消息可能不是指明
z >= 0，而是指明没有满足z >=0的条件。
用if语句也能完成类似的任务：
if (z 
#include 
_Static_assert(CHAR_BIT == 16, "16-bit char falsely assumed");
int main(void)
{
puts("char is 16 bits.");
return 0;
}
下面是在命令行编译的示例：
$ clang statasrt.c
statasrt.c:4:1: error: static_assert failed "16-bit char falsely assumed"
_Static_assert(CHAR_BIT == 16, "16-bit char falsely assumed");
^        ～～～～～～～～～～～～～～
1 error generated.
$
1278
根据语法，_Static_assert()被视为声明。因此，它可以出现在函数中，
或者在这种情况下出现在函数的外部。
_Static_assert要求它的第1个参数是整型常量表达式，这保证了能在编
译期求值（sizeof表达式被视为整型常量）。不能用程序清单16.18中的assert
代替_Static_assert，因为assert中作为测试表达式的z > 0不是常量表达式，要
到程序运行时才求值。当然，可以在程序清单16.19的main()函数中使用
assert(CHAR_BIT 
== 
16)，但这会在编译和运行程序后才生成一条错误信
息，很没效率。
1279
16.13 string.h库中的memcpy()和memmove()
不能把一个数组赋给另一个数组，所以要通过循环把数组中的每个元素
赋给另一个数组相应的元素。有一个例外的情况是：使用strcpy()和strncpy()
函数来处理字符数组。memcpy()和memmove()函数提供类似的方法处理任意
类型的数组。下面是这两个函数的原型：
void *memcpy(void * restrict s1, const void * restrict s2, size_t n);
void *memmove(void *s1, const void *s2, size_t n);
这两个函数都从 s2 指向的位置拷贝 n 字节到 s1 指向的位置，而且都返
回 s1 的值。所不同的是， memcpy()的参数带关键字restrict，即memcpy()假
设两个内存区域之间没有重叠；而memmove()不作这样的假设，所以拷贝过
程类似于先把所有字节拷贝到一个临时缓冲区，然后再拷贝到最终目的地。
如果使用 
memcpy()时，两区域出现重叠会怎样？其行为是未定义的，这意
味着该函数可能正常工作，也可能失败。编译器不会在本不该使用
memcpy()时禁止你使用，作为程序员，在使用该函数时有责任确保两个区域
不重叠。
由于这两个函数设计用于处理任何数据类型，所有它们的参数都是两个
指向 void 的指针。C 允许把任何类型的指针赋给void *类型的指针。如此宽
容导致函数无法知道待拷贝数据的类型。因此，这两个函数使用第 3 个参数
指明待拷贝的字节数。注意，对数组而言，字节数一般与元素个数不同。如
果要拷贝数组中10个double类型的元素，要使用10*sizeof(double)，而不是
10。
程序清单16.20中的程序使用了这两个函数。该程序假设double类型是int
类型的两倍大小。另外，该程序还使用了C11的_Static_assert特性测试断
言。
程序清单16.20 mems.c程序
1280
// mems.c -- 使用 memcpy() 和 memmove()
#include 
#include 
#include 
#define SIZE 10
void show_array(const int ar [], int n);
// 如果编译器不支持C11的_Static_assert，可以注释掉下面这行
_Static_assert(sizeof(double) == 2 * sizeof(int), "double not twice int size");
int main()
{
int values[SIZE] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
int target[SIZE];
double curious[SIZE / 2] = { 2.0, 2.0e5, 2.0e10, 2.0e20, 5.0e30 };
puts("memcpy() used:");
puts("values (original data): ");
show_array(values, SIZE);
memcpy(target, values, SIZE * sizeof(int));
puts("target (copy of values):");
show_array(target, SIZE);
1281
puts("\nUsing memmove() with overlapping ranges:");
memmove(values + 2, values, 5 * sizeof(int));
puts("values -- elements 0-4 copied to 2-6:");
show_array(values, SIZE);
puts("\nUsing memcpy() to copy double to int:");
memcpy(target, curious, (SIZE / 2) * sizeof(double));
puts("target -- 5 doubles into 10 int positions:");
show_array(target, SIZE / 2);
show_array(target + 5, SIZE / 2);
return 0;
}
void show_array(const int ar [], int n)
{
int i;
for (i = 0; i < n; i++)
printf("%d ", ar[i]);
putchar('\n');
}
下面是该程序的输出：
1282
memcpy() used:
values (original data):
1 2 3 4 5 6 7 8 9 10
target (copy of values):
1 2 3 4 5 6 7 8 9 10
Using memmove() with overlapping ranges:
values -- elements 0-4 copied to 2-6:
1 2 1 2 3 4 5 8 9 10
Using memcpy() to copy double to int:
target -- 5 doubles into 10 int positions:
0 1073741824 0 1091070464 536870912
1108516959 2025163840 1143320349 -2012696540 1179618799
程序中最后一次调用 memcpy()从 double 类型数组中把数据拷贝到 int 类
型数组中，这演示了memcpy()函数不知道也不关心数据的类型，它只负责从
一个位置把一些字节拷贝到另一个位置（例如，从结构中拷贝数据到字符数
组中）。而且，拷贝过程中也不会进行数据转换。如果用循环对数组中的每
个元素赋值，double类型的值会在赋值过程被转换为int类型的值。这种情况
下，按原样拷贝字节，然后程序把这些位组合解释成int类型。
1283
16.14 可变参数：stdarg.h
本章前面提到过变参宏，即该宏可以接受可变数量的参数。stdarg.h 头
文件为函数提供了一个类似的功能，但是用法比较复杂。必须按如下步骤进
行：
1.提供一个使用省略号的函数原型；
2.在函数定义中创建一个va_list类型的变量；
3.用宏把该变量初始化为一个参数列表；
4.用宏访问参数列表；
5.用宏完成清理工作。
接下来详细分析这些步骤。这种函数的原型应该有一个形参列表，其中
至少有一个形参和一个省略号：
void f1(int n, ...);        // 有效
int f2(const char * s, int k, ...); // 有效
char f3(char c1, ..., char c2);// 无效，省略号不在最后
double f3(...);           // 无效，没有形参
最右边的形参（即省略号的前一个形参）起着特殊的作用，标准中用
parmN这个术语来描述该形参。在上面的例子中，第1行f1()中parmN为n，第
2行f2()中parmN为k。传递给该形参的实际参数是省略号部分代表的参数数
量。例如，可以这样使用前面声明的f1()函数：
f1(2, 200, 400);      // 2个额外的参数
f1(4, 13, 117, 18, 23);  // 4个额外的参数