### Tripping Over Cables and Other Common Issues
Common issues in data center networks (DCNs) include tripping over cables, replacing the wrong cable or transceiver, and accidentally powering off equipment. In CorrOpt, we aim to improve the accuracy of repairs by leveraging our observations of the most likely symptoms of corruption root causes, such as optical power levels and the link’s history (§4).

### CorrOpt Strategy
Our strategy, detailed in Algorithm 1, involves several steps:
1. **Identify Shared Component Failures**: We use the packet corruption rate on neighboring links to identify shared component failures.
2. **Detect Decaying Transmitters**: We then use the TxPower (transmit power) on the opposite side to detect decaying transmitters.
3. **Separate Optical and Non-Optical Issues**: CorrOpt uses RxPower (receive power) to distinguish between optical and non-optical issues. For non-optical issues, the solution is to reseat the transceiver and, if necessary, replace it.

### Power Thresholds
CorrOpt employs PowerThresholdRx (PowerThresholdTx) per optical technology as the minimal RxPower (TxPower) threshold. If both ends of a link have RxPower below PowerThresholdRx, this suggests bent or damaged fiber. Connector contamination typically results in low RxPower in one direction, which can often be resolved by cleaning the connectors with fiber cleaning kits.

### Deployment and Effectiveness
CorrOpt’s recommendation engine has been deployed in our DCNs since October 2016. §7.2 evaluates its effectiveness. Our experience shows that machine learning techniques can achieve similar repair accuracy, but we chose our approach for its intuitiveness.

## Implementation
Figure 13 illustrates the workflow and system components of CorrOpt. When a switch detects packet corruption, it reports to the CorrOpt controller. The controller uses fast checker logic to quickly determine if the link can be safely disabled. If the link is disabled, the recommendation engine (§5.2) generates a ticket with a suggested repair procedure based on monitoring data collected by another system. When a link is activated, CorrOpt uses optimizer logic to check if any active corrupting links can be disabled.

We prototyped the fast checker and optimizer with around 500 lines of Python code and integrated CorrOpt’s recommendation engine into the cloud provider’s infrastructure with approximately 50 lines of C# code.

### Example of Unsuccessful Repair Actions
Figure 12 provides an example of unsuccessful repair actions on a link:
1. **Healthy State**: Corruption loss rate below \(10^{-8}\).
2. **Starts Corrupting Packets**.
3. **Disabled for Repair**.
4. **Enabled After Repair but Continues to Corrupt Packets**.
5. **Disabled Again**.
6. **Enabled After Repair but Fails Again**.
7. **Disabled Again for Repair, Finally Successful**.

The optimizer runs in less than one minute on a 1.3 GHz computer with 2 cores.

## Corruption Repair
Repairing corruption in today’s DCNs is cumbersome. Unlike switch configuration errors or congestion, corruption cannot be remedied via software-based reactions. For instance, dirt on connectors can cause corruption, and the only repair is to manually clean the connections. If the root cause of the corruption is not correctly diagnosed, on-site technicians must rely on guesswork when deciding what action to take.

Network technicians currently use manual diagnosis. When assigned to a ticket, they inspect the transceiver and fiber to find tight bends or damage. If equipment is not connected firmly, they reconnect it. If tight bends or damage are found on the fiber, the technicians replace the fiber. If no visual problems are found, they may clean the connector with an optical cleaning kit [30].

If the repair does not address the actual cause of packet corruption, the link will continue to corrupt packets as soon as it is enabled. Figures 7 and 9 show examples of successful repairs, while Figure 12 shows a series of two unsuccessful repair attempts. Both attempts included cleaning the fiber and reseating the transceiver. On the third try, the technician replaced the fiber and fixed the corruption.

This process can take several days. Between repair attempts, the link is enabled, and a new ticket is generated when it is disabled again. Tickets are placed in a FIFO queue, so the exact time needed for a fix depends on the number of tickets in the queue. Our analysis of 3400 tickets shows that, on average, it takes two days for technicians to resolve a ticket. Each failed repair attempt adds two more days during which the link must be disabled.

Unsuccessful repairs also increase the likelihood of collateral damage because technicians need to enter the facility more often, posing a risk of affecting unrelated components.

## Evaluation
We evaluate CorrOpt for its ability to protect applications by safely disabling corrupting links while meeting capacity constraints and its ability to speed up repairs by correctly identifying the root cause. The first evaluation uses simulations based on data from our DCNs, and the second uses our deployment of CorrOpt’s repair recommendation engine for three months. We study these factors individually in §7.1 and §7.2 and quantify their combined impact in §7.3.

### Disabling Links
We simulate the impact of CorrOpt using topologies and link corruption traces from two production DCNs: a large DCN with O(35K) links and a medium-sized DCN with O(15K) links. The trace period is from October to December 2016.

We quantify the effectiveness of CorrOpt at disabling links using the "total penalty." Each corrupting link \( l \) with corruption rate \( f_l \) incurs a penalty of \( I(f_l) \) per second (§5), and the total penalty per second is \( \sum_{l \in \text{links}} (1 - d_l) \times I(f_l) \), where \( d_l \) is 1 if the link is disabled and 0 otherwise. For simplicity, we use \( I(f_l) = f_l \). Thus, the total penalty is proportional to corruption losses (assuming equal utilization on all links).

We compare CorrOpt with "switch-local," the current link-disabling technique. For this method to guarantee a capacity constraint of \( c \), it should be configured with \( s_c = \sqrt{c} \) for three-stage DCNs (which is what we study).

To isolate the impact of the link-disabling strategy, we couple both methods with the same repair effectiveness (as CorrOpt’s). When a link is disabled, it is put into a queue of links waiting to be fixed. Links stay in the queue for two days, the average service time in our DCNs (§5.2). Based on our observed repair accuracy (§7.2), 80% of the links are repaired correctly after this time. The remaining 20% take two rounds of fixes, so it takes them four days to be enabled again.

Figure 14 shows the performance of both methods for the two DCNs when the capacity constraint is 75% for every ToR. The x-axis is time, and the y-axis is the total penalty per second. We see that the penalty of the switch-local checker is much higher due to its sub-optimality. It is flat for the switch-local approach because there is a set of corrupting links that it cannot disable, and in our model, they corrupt packets at constant rates. In contrast, CorrOpt can disable the vast majority of the corrupting links, leading to a much lower penalty. The penalty varies with time based on the number and relative locations of corrupting links in the data.

Figures 15 and 16 show the worst ToR’s fraction of available paths to the spine when the capacity constraint is 75% and 50%. When lines overlap, it means that for some period, the performance of CorrOpt is the same as the switch-local check. Overall, we see that CorrOpt can hit the capacity limit as needed, but the switch-local check does not disable enough links even though it is not limited by the capacity constraint.

### Impact of the Capacity Constraint
The advantage of CorrOpt over today’s switch-local checks depends on the capacity constraint. If the constraint is lax, both methods perform similarly, as both can turn off almost all corrupting links. However, when the constraint is more demanding, the intelligent decision-making of CorrOpt begins to shine. For different capacity constraints, Figure 17 shows the total penalty, integrated over time, of CorrOpt divided by that of the switch-local checker. Since our penalty function is linear in corruption losses, this ratio represents the reduction in the amount of corruption losses.

When the capacity constraint is lax (c=25%), there is no difference between the two methods. However, when the capacity constraint is 50% or higher, a more realistic regime, CorrOpt outperforms the switch-local checker. On the medium-sized data center, with a capacity constraint of 50%, CorrOpt can eliminate almost all corruption, while the switch-local check keeps some corrupting links active. Thus, the total penalty ratio drops to 0. When the capacity constraint is 75%, CorrOpt’s total penalty is three to six orders of magnitude lower.

### Fast Checker vs. Optimizer
To isolate the performance gain of the fast checker and optimizer, we simulate the large DCN using the fast checker alone, which is run both when new corrupting links appear and when disabled links are activated. We bin time into one-hour chunks and estimate the total penalty incurred using the fast checker alone and with the full CorrOpt logic. Figure 18a shows the total penalty ratio of using CorrOpt versus using the fast checker only for a month-long period. Most of the time, the optimizer does not reduce the penalty. However, during certain periods, it can significantly reduce corruption losses compared to using the fast checker alone. Figure 18b shows the CDF of the average ratio of the penalty of CorrOpt over that with using the fast checker alone. The optimizer does not lower the ratio for 90% of the time. For 7% of the time, the optimizer can reduce the total penalty per second by at least one order of magnitude.

### Accuracy of Repair Recommendations
CorrOpt’s repair recommendation engine has been deployed across 70 DCNs of different sizes since October 2016. Due to certain limitations of the current infrastructure, the deployed version is simpler than the version outlined in §5.2. It uses a single RxPower threshold rather than customizing it to the links’ optical technology (information about which was not readily available), and it does not consider historical repairs or space locality. As a result, the results below underestimate the efficacy of our repair recommendations.

To evaluate CorrOpt, we analyze tickets generated between October 22 and December 31, 2016. During this period, it generated close to two thousand tickets with a repair recommendation. Not all generated tickets have a repair recommendation because we cannot get optical power information from all types of switches. We deem a repair successful if we do not see another ticket for the same link within a week. Because corruption faults are infrequent, if a link experiences corruption soon after a repair, it is likely that the repair was not successful.

Based on this analysis, the success rate of repair was 58.0%, which is much lower than our expectation. To investigate, we read diaries of 322 tickets and found that 30% of the time, technicians were ignoring the recommendations! Since CorrOpt is newly deployed, not all operators have been informed or trained to leverage the information it provides.

When technicians followed our recommendation, the success rate was 80%. In contrast, our analysis of tickets before CorrOpt’s deployment revealed that the previous repair success rate was 50%. The higher success rate of CorrOpt implies that links can be put back into service sooner, reducing the risk of collateral damage that occurs with each manual intervention.

CorrOpt’s higher accuracy of repair also lowers corruption losses because it leads to more healthy links in the DCN, allowing more corrupting links to be disabled while meeting capacity constraints. To quantify this effect, we ran simulations similar to those in the previous section and considered two different repair processes. With CorrOpt, 80% of the links are repaired in two days, and the rest in four days (i.e., requiring two attempts). Without CorrOpt, 50% of the links are repaired in two days, and the rest in four days. In both cases, CorrOpt’s algorithm was used to disable links.

Figure 19 shows the results for different capacity constraints for both medium and large DCNs. The penalty is normalized to that of the setting without CorrOpt. We see that, in addition to their other benefits, CorrOpt repair recommendations reduce corruption losses by 30% when the capacity constraint is 75%.

### Combined Impact
We conclude by evaluating the combined impact of CorrOpt’s strategy of disabling links and repair recommendations. (Previous sections studied their impact individually.) We compare it to the current practice of using switch-local checks to disable links and 50% repair accuracy.

In terms of reducing packet losses, the results are similar to those in Figure 17. This is because most of the gain stems from its strategy for disabling links, though its higher repair accuracy has other benefits noted above. Overall, in the realistic capacity constraint regime of 75%, CorrOpt reduces corruption losses by three to six orders of magnitude.

Finally, we find that the massive reduction in corruption losses with CorrOpt does not come at the expense of significantly reduced network capacity. We measure the average fraction of paths to the spine available for each ToR when the capacity constraint is 75%. Compared to the current practice, CorrOpt reduces this average by at most 0.2% across all one-second time intervals.

### Speeding Up the Optimizer with Topology Segmentation
Our optimizer suffices for today’s DCNs but may need to be extended for larger DCNs or those with more corrupting links. We can do so by dividing corrupting links into non-overlapping segments such that the decision of disabling them is independent of other segments. Figure 20 shows an example. Such segmentation significantly reduces the search space.

### Load Balancing
CorrOpt disables corrupting links and thus makes the network topology asymmetric. Advanced network load balancing is needed when utilization is high or a significant subset of links are off. Standard load balancing techniques [1] work seamlessly atop CorrOpt. Links taken offline by CorrOpt can be seen as link failures, which is a standard input into load balancing schemes. Flows on corrupting links have to be re-routed before the links are disabled.