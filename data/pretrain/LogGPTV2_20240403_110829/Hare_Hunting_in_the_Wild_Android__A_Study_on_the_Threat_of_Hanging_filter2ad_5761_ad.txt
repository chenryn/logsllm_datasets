ones, which minimizes the chance for introducing Hares.
Figure 5 illustrates the distribution of the ﬂaws across differ-
ent Hare categories. Most problems come from undeﬁned action
Provider	
  Authority	
  28%	
  Ac2on	
  Name	
  31%	
  Package	
  Name	
  28%	
  Permission	
  13%	
  1255Vendor
Vendor A
Vendor B
Vendor C
Vendor D
Vendor E
Total
Vendor
Vendor A
Vendor B
Vendor C
Vendor D
Vendor E
Total
# of Images
# of System Apps
Table 1: Android Images Collected
Avg # of System Apps per Image
# of Countries
# of Carriers
# of OS Versions
83
7
1
4
2
97
261
223
174
99
159
183
21733
1561
174
398
319
24185
Table 2: Hares Prevalence in System Apps per Vendor
Avg Hares per
Device
Hares in Android 5.X
# of vulnerable apps
36
1
1
1
2
36
# of Hares
23
1
1
1
1
23
10
4
1
3
2
10
Min Hares
per Device
Max Hares per
Device
Hares in Android 4.X
# of Hares
# of vulnerable apps
19279
679
N/A
107
187
20252
3045 (18%)
121 (13.3%)
N/A
31 (12.4%)
23 (15.6%)
3220 (14.3%)
608
425
248
8
16
1305
99 (6%)
85 (15.5%)
33 (21.5%)
5 (5%)
8 (12.1%)
230 (11.7%)
239
157
241
29
101
153
23
100
248
8
16
8
598
224
248
45
187
598
names. By comparison, a relatively low percentage of permissions
were found to be involved in hanging references.
Impacts. The impacts of Hares are signiﬁcant. In addition to the
end-to-end attacks we built (Section 3), we also randomly sampled
33 ﬂaws and manually analyzed what could happen once they were
exploited. Note that due to the lack of a large number of physical
devices, all we could do is just static analysis to infer possible con-
sequences once an exploit succeeds. Such an analysis may not be
accurate, but it is still important for understanding the impacts of
this type of security ﬂaws that have never been noticed before. The
outcomes of our analysis are shown in Table 3.
As we can see here, 5 instances of the randomly picked Hares
might be exploited to launch similar Phishing attacks as discussed
in Section 3, due to undeﬁned package and activity names and/or
action names for activity Intent ﬁlters. One Hare found in the HTC
Task App allows redirecting an Intent through exploiting a non-
deﬁned content provider used for Intent resolution, just like the
GoogleEmail attack. 4 Hares (on the devices such as Note 8.0 and
S5) might cause content leakage (notes and browser bookmarks)
once malware impersonates undeﬁned content providers, which the
victim apps insert data into. 4 instances might expose user’s private
information when hanging package names are hijacked. Particu-
larly, we found that on Note 8.0, a hanging reference involves an
explicit Intent delivered to a nonexisting package. The Intent in-
cludes a content URI pointing to private data (e.g., photos) and
also a permission FLAG_GRANT_URI_PERMIS SION that en-
ables the recipient to read the data without requesting a permis-
sion. As a result, an unauthorized app using the target’s package
name could gain access to the data.
Also, on LG G3, a hanging reference to a nonexisting content
provider might open the door for the adversary to deﬁne those
providers to contaminate the data synchronized to the user’s other
devices. Further, our analysis reveals 3 instances that might cause
denial-of-service attacks when the adversary creates undeﬁned con-
tent providers that victim apps use, and sets their exported ﬂag
to false. From the app code, this attack could cause a security
exception when the victim app attempts to read or write to these
providers. A prominent example is Amazon MP3 app (pre-installed
on speciﬁc HTC models such as One M8). Once launched, it checks
an undeﬁned provider. If a malicious app declares this provider and
sets its exported ﬂag to false, Amazon MP3 will never be able to
run until the malicious app is uninstalled. Some other Hares may
lead to unexpected situations: e.g., an app with a certain package
name will not show up in system Task Managers and other apps on
LG G3 could not be forced to stop from the LG Settings app.
We also found that Hares in 3 apps might only cause display of
dialogs or notiﬁcations. Also, there are 6 hares related to missing
services whose functionalities we could not ﬁgure out. Finally, we
did not ﬁnd any entry points for 4 Hares, which could be dead code.
Table 3: Possible Impact of 33 Randomly Picked Hares
Hare Category
# of Hares
Impact
Activity Hijacking
Activity Hijacking
Activity Hijacking
Data Leakage
Data Leakage
Data Pollution
D.O.S.
Dialog Popup
Others
Impact Not Clear
Maybe Dead Code
Package and Activity Name
Action Name
Provider Authority
Provider Authority
Package and Activity Name
Provider Authority
Provider Authority
Action Name of Activities
Package Name
Action Name of Services
All Categories
3
2
1
4
1
1
3
3
5
6
4
Responsible parties. We further looked into which parties intro-
duce such ﬂaws and when this happens. For this purpose, we in-
spected 6 images from Vendor A all running 4.4.2, as described
in Table 4. The percentage of Hare ﬂaws that are uniquely intro-
duced by these models ranges from 9% to 29%. We further grouped
the images into subgroups (e.g., phone, tablet) and checked which
ones exhibit the highest percentage of common Hare cases. Tablet
models have the highest percentage of common Hares 63%, while
phone models have the second highest common Hares 56%. The
common Hare cases between a tablet and phone device model is
at most 38%. So customizing the OS to tablet models or to phone
models introduces a lot of Hares. In the meantime, we also com-
pared the ﬂaws found on the same model (Phone 3 running Android
4.4.2)customized for different carriers. The results are in Table 5.
Table 4: Hare Flaws in Different Vendor A Models Running
Android 4.4.2
Model
Tablet 1
Phone 2
Phone 3
Tablet 4
Tablet 5
Tablet 6
# of New Hares Introduced by Model
106 (27%)
35 (21%)
75 (29%)
57 (22%)
22 (9%)
72 (20%)
As we can see from Table 5 given a Phone 3 image, its cus-
tomizations across 6 carriers bring in about 3% to 20% of ﬂaws.
Clearly, both manufacturers and carriers cause Hare ﬂaws. How-
ever, the former apparently needs to take more responsibility than
the latter. Also, most Hares are likely to be introduced during the
OS customizations for different device models (phone or tablet).
Trend. Figure 6 further compares the ratios of vulnerable apps over
different OS versions across multiple manufacturers. For Vendor A
devices, there is an observable trend that the higher versions (5.0.1
and 5.0.2) contain fewer Hares than the lower ones: the faulty ratio
1256Table 5: Hares in Phone 3 Running Android 4.4.2 For Differ-
ent Countries and Carriers
Carrier
# of Hares Introduced by Carrier
China Unicom
51 (20%)
22 (13%)
4 (3%)
5 (3%)
5 (3%)
44 (18%)
Country
China
U.S.
Chile
Argentina
Brazil
S. Korea
AT&T
Entel pcs
Movistar
Vivo
SK Telecom
Figure 6: Ratios of Vulnerable Apps Across Different OS Ver-
sions and Manufacturers
comes from 26% on 4.0.3 down to about 8.2% on 5.0.2. On the
other hand, for Vendor B phones, the trend is almost constant: the
ratio is 14.3% on 4.2.2 and 15.1% on 5.0.1 . Also, on all these de-
vices, the Hare risks remain signiﬁcant, which indicates that man-
ufacturers have not yet realized the gravity of this type of vulnera-
bilities.
4.3 App-level Protection
Motivation and idea. Fundamentally, the Hare ﬂaws can only be
ﬁxed by device manufacturers and app developers, who are sup-
posed to either remove the hanging references in their code or put
proper security checks in place. However, given the pervasiveness
of the problem and its root cause, i.e., the under-regulated Android
ecosystem, we believe that they cannot be completely eliminated
within a short period of time. Before their complete solution can be
implemented (Section 5), it is important to help individual Android
users protect their systems, in the presence of these ﬂaws. Com-
pared with a frame-work layer protection, which can only be de-
ployed by manufacturers and carriers, the most practical solution is
app-level defense, as all the users need to do is just to install a pro-
tecting app from Google Play to get immediate protection against
the threats to the vulnerabilities on her system. We found that this
can actually be easily done.
In our research, we developed such simple protection, using an
app, called HareGuard, to scan other third-party apps whenever
they are installed to ensure that they are not taking advantage of
any known Hare vulnerabilities on a speciﬁc device model. Hare-
Guard collects a device’s model information and queries a server-
side database to acquire all the Hares within the model (which are
detected off-line, for example, through Harehunter). Whenever an
app is installed, HareGuard immediately checks its manifest ﬁle
for the package name, activity, action, authority name and permis-
sions it deﬁnes, making sure that the app does not intend to hi-
jack any missing attributes. This scanner app is invoked through
startForeground, running with a notiﬁcation posted on the
Notiﬁcation Center.
Implementation. Speciﬁcally, as soon as HareGuard is installed,
it calls Build class to collect the device information, including
Build.MANUFACTURER and Build.MODEL, and queries our
database for all the Hare ﬂaws on the device. The scanner also uti-
lizes an Intent receiver with actions android.intent.action.
PACKAGE_ADDED to monitor new app installed and android.
intent.action.PACKAGE_CHANGED to detect whether an app
is updated. For each new or recently updated app, it uses the API
openXmlResourceParser to open its manifest ﬁle and iden-
tify all the attributes it deﬁnes. These attributes are then compared
with a set of hanging references retrieved from our Hare database to
detect Hare risks: i.e., deﬁning an attribute associated with a hang-