0 ≤ b  P (e2). Then we have
P (e) =P (e1) +P (e2)
q
2ℓ
=
q
2ℓ+1 + 1 −
q
2ℓ+1 .
= 1 −
Case 3. P (e1)  q
implies P (e) > q
deﬁnition.
2ℓ+1 which
2ℓ , which implies q > 2ℓ, which is false by
Helios uses a custom generated algebraic group. The prime
modulus p is 2048 bits, with a generator of a 256-bit group
order q where
log2(q) = 255.0831..
which is fortuitously is fairly far oﬀ the optimal biased value
of |q| = 255.4150. Applying q to Equation (3), however, we
ﬁnd:
P8Rmb(q)  cBob=1)%
elseif $(cAlice=0 > cAlice=1) AND (cBob=0  q
2 ) = 1
2 , and vice versa.
In the presence of a bias we expect csim  cBob=1. Let us deﬁne two outcomes: a consistent
outcome is when the challenges are consistent with our ex-
pectation that the vote implied by the challenges in the Alice
proof will similarly imply the opposite outcome in the Bob
proof. We call an outcome inconsistent when the challenges
do not meet this expectation. Let p be the probability that
the simulated challenge is less than the real challenge. There
are now three cases:
1. Case 1. Consistent challenges, and expectation
is correct: If the result is consistent, then the proba-
bility that both simulated challenges are less than their
corresponding real challenges is p2.
2. Case 2. Consistent challenges, and expectation
is incorrect: If the result is consistent, then the prob-
ability that both simulated challenges are greater than
their corresponding real challenges is (1 − p)2
3. Case 3. Inconsistent challenges: If the result is in-
consistent, then one simulated challenge was less than
its real challenge, and one was greater. The probability
of this is 2p(p − 1).
The overall probability of being correct is
P (A guesses correctly) = p2 + p(1 − p)
= p.
Using this strategy in Helios where p = 0.53, an adversary
can correctly guess how a voter voted with probability P =
3 2257,
0.53. If q had been chosen to be optimally ‘bad’, i.e., 2
this probability would grow as high as P = 0.67. Finally,
if q were chosen optimally close to a power of 2, e.g., if
prime modulus |p| = 2048 bits and q = p−1
2 , the attackers
advantage would be negligible.
5.4 Attacks on Custom DL Parameters
Helios uses its own custom DL parameters. Recently at-
tacks like Logjam [5] have suggested that election oﬃcials
may wish to use their own parameters. One common choice
is to use a safe-prime group, i.e., one for which p = 2q + 1.
Safe prime groups, for example, account for the majority
of DHE parameters used in TLS. Another more severe bias
could manifest if the default group parameters were changed.
If election oﬃcials were to use a safe prime group, we show
that ballot secrecy would be compromised in the public au-
dit.
Recalling that the RNG computes bit length of q. When
the call gets made to the SJCL’s randomWords function, it
passes in an integer representing how many 32-bit words
should be returned:
random = sjcl.random.randomWords(bit_length/32,0);
A problem arises when the bit-length of q is not a multiple
of 32. The number of words that get returned is:
but the intended result should be
?
#words to generate => bit_length
#words to generate =@ bit_length
A.
32
32
What this means is if the bit length of q is not a multiple
of 32 such as in a safe prime group where |q| = |p|− 1, then
we have
(4)
(5)
(6)
P8Rmb(q) <
q
29 = 1,
thus,
and ﬁnally,
P [csim < creal] = 1
P (Attacker guesses correctly) = 1.
In the case of a safe prime group with a 2048-bit prime
modulus p, the bit length of q is 2047, Instead of the RNG
returning 64 words (as expected), it would return 63 words.
Because the real and simulated challenges sum to a small
value modulo q, the simulated challenge will be appear sig-
niﬁcantly smaller than the real challenge (see Figure 3) al-
lowing real and simulated votes to be distinguished with
certainty.
c_real = 245795995731172176399106422508828365024266
502426605057147905095769434705548946068102
c_sim = 221342783966220711424501628534989515038736
9592630583966797298269577
Figure 3: Illustration of length diﬀerence between
a real challenge (top) and simulated challenge (bot-
tom) when using Helios with a safe prime group.
Impact and Mitigation. To the best of our knowledge
all past Helios elections (totally approximately 500,000 cast
ballots) used the biased client-side RNG with the default
parameters. In practical terms the threat to voters in past
331
elections is low. The signiﬁcance of the vulnerability is two-
fold: (1) it breaks the formal security guarantees of He-
lios as proven in [8]. Although the Helios protocol is non-
malleable under chosen-plaintext attack, we have shown that
in the Helios implementation, ballots are distinguishable un-
der eavesdropping, thus breaking the most basic formal no-
tion of privacy. (2) The other more serious risk is to future
election oﬃcials who use their own custom parameters and
either experience a much larger bias, potentially and inad-
vertently revealing the voting preferences of all voters on a
public website.
The textbook ﬁx is to not use a modulo reduction to bring
large values inside the desired range, but rather loop the
RNG until it produces a value less than q. But this ap-
proach consumes more entropy than it strictly needs, so in-
stead we used the “simple modular method” for converting
random bits to a random integer in the range [0..max − 1]
as described by NIST[6].
In this approach, given a max,
and a security parameter s, the random bit generator gen-
erates |max| + s (or more) bits. The resulting bits are then
returned modulo max. Because the bit value is likely much
larger than max, the modulo bias is similarly negligible. We
corrected the RNG code using the NIST recommended value
of s = 64.
6. WEB ATTACKS
6.1 Cross-site Scripting (XSS) Attacks
Cross-site scripting attacks (XSS) are a type of code injec-
tion attack where malicious code is injected into a website
and then executed on a victim’s machine. The malicious
code often takes the form of a JavaScript element embed-
ded in the Document Object Model (DOM). They can be
diﬃcult to completely eliminate, and may be leveraged to
perform a wide range of actions on the user’s behalf.
Prevention of XSS attacks generally involve sanitizing any
user input by encoding scripting characters to be displayed
as plain text. There is not, however, a universal solution
to the problem. How user data is escaped largely depends
on the context in which it will eventually be used which
varies between applications. For example, user input that
will be displayed as a paragraph element has diﬀerent es-
cape requirements than user input that will be assigned to
a JavaScript variable. We encountered a small oversight in
the Helios code that would allow an XSS attack to be per-
formed on a voter’s device. In this section we describe an
attack that would allow a remote attacker to cast a ballot
on a voter’s behalf, and further display the ballot had been
cast as intended. Note this diﬀers from our threat model al-
lowing client-side malware, exploiting instead the trust the
voter’s browser places in Helios.
6.2 XSS Vulnerability
As previously mentioned, how input will eventually be dis-
played aﬀects how it should be escaped. The vulnerability
in Helios is caused by the use of HTML escaping on data
that is used in a JavaScript context. This happens on the
“Questions” page of an election where any user, registered