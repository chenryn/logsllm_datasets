Group Size c
16
24
32
40
0.10
0.25
Percentage p of Compromised Nodes
0.15
0.20
0.30
0.35
Fig. 11. System failure probability for varying adversarial power
varying group sizes (c = 16, . . . , 64) and varying adversarial
power (p = 0.01, . . . , 0.33), respectively. Note that q on the y-
axis is plotted in “security parameter” form as − log2(q): thus,
higher points in the graph indicate exponentially lower failure
probability. Finally, Table II lists failure probabilities for some
concrete conﬁgurations. There we see, for example, that both
RandHound and RandHerd have a failure probability of at
−10.25 ≈ 0.08% for p = 0.33 and c = 32. Moreover,
most 2
assuming p = 0.33, we identiﬁed the point where the system’s
failure probability falls below 1% for a group size of c = 21.
SYSTEM FAILURE PROBABILITIES q (GIVEN AS − log2(q)) FOR CONCRETE
CONFIGURATIONS OF ADVERSARIAL POWER p AND GROUP SIZE c
TABLE II
p | c
0.23
0.28
0.32
0.33
16
13.13
8.66
5.76
5.12
24
19.69
15.17
8.64
7.69
32
26.26
17.33
11.52
10.25
40
32.82
21.67
14.40
12.82
VI. RELATED WORK
Generation of public randomness has been studied in various
contexts. In 1981, Blum proposed the ﬁrst coin ﬂipping proto-
458
col [10]. Rabin introduced the notion of cryptographic random-
ness beacons in 1983 [49]. NIST later launched such a bea-
con to generate randomness from high-entropy sources [45].
Centralized randomness servers have seen limited adoption,
however, in part because users must rely on the trustworthiness
of the party that runs the service.
Other approaches attempt to avoid trusted parties [48], [13],
[2], [21]. Bonneau et al. [13] use Bitcoin to collect entropy,
focusing on analyzing the ﬁnancial cost of a given amount
of bias rather than preventing bias outright. Lenstra et al. [40]
propose a new cryptographic primitive, a slow hash, to prevent
a client from biasing the output. This approach is promising
but relies on new and untested cryptographic hardness assump-
tions, and assumes that everyone observes the commitment
before the slow hash produces its output. If an adversary can
delay the commitment messages and/or accelerate the slow
hash sufﬁciently, he can see the hash function’s output before
committing, leaving the difﬁcult question of how slow is “slow
enough” in practice. Other approached use lotteries [2], or
ﬁnancial data [21] as public randomness sources.
An important observation by Gennaro et al. [29] is that
in many distributed key generation protocols [47] an attacker
can observe public values of honest participants. To mitigate
this attack, the authors propose to delay the disclosure of the
protocol’s public values after a “point-of-no-return” at which
point the attacker cannot inﬂuence the output anymore. We
also use the concept of a “point-of-no-return” to prevent an
adversary from biasing the output. However, their assumption
of a fully synchronous network is unrealistic for real-world
scenarios. Cachin et al., propose an asychronous distributed
coin tossing scheme for public randomness generation [15],
which relies on a trusted setup dealer.
We improve on that by letting multiple nodes deal secrets
and combine them for randomness generation in our pro-
tocols. Finally, Kate et al. [38], introduced an approach to
solve distributed key-generation in large-scale asynchronous
networks, such as the Internet. The communication complexity
of their solution, similar to Gennaro’s and Cachin’s prevents
scalability to large numbers of nodes. Our protocols use
sharding to limit communication overheads to linear increases,
which enables RandHound and RandHerd to scale to hundreds
of nodes.
Applications of public randomness are manifold and include
the protection of hidden services in the Tor network [34],
selection of elliptic curve parameters [2], [40], Byzantine
consensus [46], electronic voting [1], random sharding of
nodes into groups [35], and non-interactive client-puzzles [37].
In all of these cases, both RandHound and RandHerd may
be useful for generating bias-resistant, third-party veriﬁable
randomness. For example, RandHound could be integrated into
the Tor consensus mechanism to help the directory authorities
generate their daily random values in order to protect hidden
services against DoS or popularity estimation attacks.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:21:04 UTC from IEEE Xplore.  Restrictions apply. 
VII. CONCLUSIONS
Although many distributed protocols critically depend on
public bias-resistant randomness for security, current solutions
that are secure against active adversaries only work for small
(n ≈ 10) numbers of participants [15], [38]. In this paper,
we have focused on the important issue of scalability and ad-
dressed this challenge by adapting well-known cryptographic
primitives. We have proposed two different approaches to
generating public randomness in a secure manner in the
presence of a Byzantine adversary. RandHound uses PVSS
and depends on the pigeonhole principle for output integrity.
RandHerd relies on RandHound for secure setup and then uses
TSS and CoSi to produce random output as a Schnorr signature
veriﬁable under a collective RandHerd key. RandHound and
RandHerd provide unbiasability, unpredictability, availability
and third-party veriﬁability while retaining good performance
and low failure probabilities. Our working prototype demon-
strates that both protocols, in principle, can scale even to
thousands of participants. By carefully choosing protocols
parameters, however, we achieve a balance of performance,
security, and availability. While retaining a failure probability
of at most 0.08% against a Byzantine adversary, a set of 512
nodes divided into groups of 32 can produce fresh random
output every 240 seconds in RandHound, and every 6 seconds
in RandHerd after an initial setup.
ACKNOWLEDGMENTS
We would like to thank Rene Peralta and Apostol Vassilev
for their input on generation of public randomness and the
anonymous reviewers for their helpful feedback. This research
was supported in part by NSF grants CNS-1407454 and
CNS-1409599, DHS grant FA8750-16-2-0034, William and
Flora Hewlett Foundation grant 2016-3834, and by the AXA
Research Fund.
REFERENCES
[1] B. Adida. Helios: Web-based Open-audit Voting. In 17th USENIX Se-
curity Symposium, pages 335–348, Berkeley, CA, USA, 2008. USENIX
Association.
[2] T. Baign`eres, C. Delerabl´ee, M. Finiasz, L. Goubin, T. Lepoint, and
M. Rivain. Trap Me If You Can – Million Dollar Curve. Cryptology
ePrint Archive, Report 2015/1249, 2015.
[3] M. Bellare and G. Neven. Multi-signatures in the plain public-key model
and a general forking lemma. In ACM Conference on Computer and
Communications Security (CCS), 2006.
[4] I. Bentov, A. Gabizon, and D. Zuckerman. Bitcoin Beacon. https:
//arxiv.org/abs/1605.04559, 2016.
[5] D. J. Bernstein. Curve25519: New Difﬁe-Hellman Speed Records. In
M. Yung, Y. Dodis, A. Kiayias, and T. Malkin, editors, Public Key
Cryptography - PKC 2006, pages 207–228, Berlin, Heidelberg, 2006.
Springer Berlin Heidelberg.
[6] D. J. Bernstein, T. Chou, C. Chuengsatiansup, A. H¨ulsing, T. Lange,
R. Niederhagen, and C. van Vredendaal. How to manipulate curve
standards: a white paper for the black hat. Cryptology ePrint Archive,
Report 2014/571, 2014.
[7] D. J. Bernstein, M. Hamburg, A. Krasnova, and T. Lange. Elligator:
elliptic-curve points indistinguishable from uniform random strings. In
Proceedings of the 2013 ACM SIGSAC Conference on Computer and
Communications Security, CCS ’13, pages 967–980. ACM, 2013.
[8] D. J. Bernstein, T. Lange, and R. Niederhagen. Dual EC: A Standardized
Back Door. Cryptology ePrint Archive, Report 2015/767, 2015.
[9] G. R. Blakley. Safeguarding cryptographic keys. Managing Require-
ments Knowledge, International Workshop on, 00:313, 1979.
[10] M. Blum.
Coin Flipping by Telephone: A Protocol for Solving
Impossible Problems. In Advances in Cryptology (CRYPTO), 1981.
[11] C. Blundo, A. De Santis, and U. Vaccaro. Randomness in distribution
protocols. In S. Abiteboul and E. Shamir, editors, Automata, Languages
and Programming, volume 820 of Lecture Notes in Computer Science,
pages 568–579. Springer Berlin Heidelberg, 1994.
[12] D. Boneh, B. Lynn, and H. Shacham. Short signatures from the Weil
pairing. In ASIACRYPT, Dec. 2001.
[13] J. Bonneau, J. Clark, and S. Goldfeder. On Bitcoin as a public
randomness source. Cryptology ePrint Archive, Report 2015/1015, 2015.
[14] C. Cachin, K. Kursawe, F. Petzold, and V. Shoup. Secure and ef-
In Advances in Cryptology
ﬁcient asynchronous broadcast protocols.
(CRYPTO), Aug. 2001.
[15] C. Cachin, K. Kursawe, and V. Shoup. Random oracles in Constantino-
ple: Practical asynchronous Byzantine agreement using cryptography.
Journal of Cryptology, 18:219–246, July 2005.
[16] I. Cascudo and B. David. SCRAPE: Scalable randomness attested by
public entities. Cryptology ePrint Archive, Report 2017/216, 2017. https:
//eprint.iacr.org/2017/216.pdf.
[17] M. Castro and B. Liskov. Practical Byzantine fault tolerance.
In 3rd
USENIX Symposium on Operating Systems Design and Implementation
(OSDI), Feb. 1999.
[18] D. Chaum and T. P. Pedersen. Wallet databases with observers. In IACR
International Cryptology Conference (CRYPTO), 1992.
[19] R. Chirgwin.
iOS 7’s weak random number generator stuns kernel
security. The Register, Mar. 2014.
[20] B. Chor, S. Goldwasser, S. Micali, and B. Awerbuch. Veriﬁable
secret sharing and achieving simultaneity in the presence of faults. In
Symposium on Foundations of Computer Science (SFCS), SFCS ’85,
pages 383–395, Washington, DC, USA, 1985. IEEE Computer Society.
[21] J. Clark and U. Hengartner. On the Use of Financial Data as a Random
Beacon. Cryptology ePrint Archive, Report 2010/361, 2010.
[22] H. Corrigan-Gibbs, W. Mu, D. Boneh, and B. Ford. Ensuring high-
quality randomness in cryptographic key generation.
In 20th ACM
Conference on Computer and Communications Security (CCS), Nov.
2013.
[23] K. Croman, C. Decker, I. Eyal, A. E. Gencer, A. Juels, A. Kosba,
A. Miller, P. Saxena, E. Shi, and E. G¨un. On scaling decentralized
blockchains. In Proc. 3rd Workshop on Bitcoin and Blockchain Research,
2016.
[24] Y. G. Desmedt and Y. Frankel. Threshold cryptosystems. In Advances
in Cryptology (CRYPTO), 1989.
[25] R. Dingledine, N. Mathewson, and P. Syverson. Tor:
the second-
In 13th USENIX Security Symposium, Aug.
generation onion router.
2004.
[26] P. Feldman. A practical scheme for non-interactive veriﬁable secret
sharing. In Proceedings of the 28th Annual Symposium on Foundations
of Computer Science, SFCS ’87, pages 427–438, Washington, DC, USA,
1987. IEEE Computer Society.
[27] A. Fiat and A. Shamir. How to prove yourself: practical solutions to
identiﬁcation and signature problems. In IACR International Cryptology
Conference (CRYPTO), pages 186–194, 1987.
[28] M. Franklin and H. Zhang. Unique ring signatures: A practical
construction. In A.-R. Sadeghi, editor, Financial Cryptography and Data
Security 2013, pages 162–170. Springer Berlin Heidelberg, 2013.
[29] R. Gennaro, S. Jarecki, H. Krawczyk, and T. Rabin. Secure distributed
key generation for discrete-log based cryptosystems. Journal of Cryp-
tology, 20(1):51–83, 2007.
[30] M. Ghosh, M. Richardson, B. Ford, and R. Jansen. A TorPath to
TorCoin: Proof-of-bandwidth altcoins for compensating relays.
In
Workshop on Hot Topics in Privacy Enhancing Technologies (HotPETs),
2014.
[31] S. Gibbs. Man hacked random-number generator to rig lotteries,
investigators say. The Guardian, Apr. 2016.
[32] S. Goel, M. Robson, M. Polte, and E. G. Sirer. Herbivore: A scalable
and efﬁcient protocol for anonymous communication. Technical Report
2003-1890, Cornell University, February 2003.
[33] The Go programming language, Jan. 2015. http://golang.org/.
[34] D. Goulet and G. Kadianakis. Random Number Generation During Tor
Voting, 2015.
459
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:21:04 UTC from IEEE Xplore.  Restrictions apply. 
[60] D. I. Wolinsky, H. Corrigan-Gibbs, A. Johnson, and B. Ford. Dissent in
numbers: Making strong anonymity scale. In 10th USENIX Symposium
on Operating Systems Design and Implementation (OSDI), Oct. 2012.
[35] R. Guerraoui, F. Huc, and A.-M. Kermarrec. Highly dynamic distributed
computing with byzantine failures.
In Proceedings of the 2013 ACM
Symposium on Principles of Distributed Computing, PODC ’13, pages
176–183, New York, NY, USA, 2013. ACM.
[36] Z. Gutterman, B. Pinkas, and T. Reinman. Analysis of the Linux random
number generator. In IEEE Symposium on Security and Privacy, pages
371–385, 2006.
[37] J. A. Halderman and B. Waters. Harvesting Veriﬁable Challenges from
Oblivious Online Sources. In Proceedings of the 14th ACM Conference
on Computer and Communications Security, CCS ’07, pages 330–341,
New York, NY, USA, 2007. ACM.
[38] A. Kate and I. Goldberg. Distributed key generation for the internet. In
Distributed Computing Systems, 2009. ICDCS’09. 29th IEEE Interna-
tional Conference on, pages 119–128. IEEE, 2009.
[39] E. Kokoris-Kogias, P. Jovanovic, N. Gailly, I. Khofﬁ, L. Gasser, and
B. Ford. Enhancing Bitcoin Security and Performance with Strong
Consistency via Collective Signing.
In 25th USENIX Conference on
Security Symposium, 2016.
[40] A. K. Lenstra and B. Wesolowski. A random zoo: sloth, unicorn, and
trx. Cryptology ePrint Archive, Report 2015/366, 2015.
[41] C. Lesniewski-Lass and M. F. Kaashoek. Whanau: A sybil-proof
distributed hash table. NSDI, 2010.
[42] S. Micali, K. Ohta, and L. Reyzin. Accountable-subgroup multisigna-
tures. In ACM Conference on Computer and Communications Security
(CCS), 2001.
[43] S. Micali, S. Vadhan, and M. Rabin. Veriﬁable random functions. In
Proceedings of the 40th Annual Symposium on Foundations of Computer
Science, FOCS ’99, pages 120–130. IEEE Computer Society, 1999.
[44] S. Nakamoto. Bitcoin: A peer-to-peer electronic cash system, Oct. 2008.
[45] NIST Randomness Beacon.
[46] O. Oluwasanmi and J. Saia. Scalable Byzantine Agreement with a Ran-
dom Beacon. In A. W. Richa and C. Scheideler, editors, Stabilization,
Safety, and Security of Distributed Systems, volume 7596 of Lecture
Notes in Computer Science, pages 253–265. Springer Berlin Heidelberg,
2012.
[47] T. P. Pedersen. A threshold cryptosystem without a trusted party.
EUROCRYPT (EUROCRYPT). Springer, 1991.
In
[48] S. Popov. On a Decentralized Trustless Pseudo-Random Number
Generation Algorithm. Cryptology ePrint Archive, Report 2016/228,
2016.
[49] M. O. Rabin. Transaction Protection by Beacons. Journal of Computer
and System Sciences, 27(2):256–267, 1983.
[50] T. Rabin and M. Ben-Or. Veriﬁable Secret Sharing and Multiparty
In ACM Symposium on Theory of
Protocols with Honest Majority.
Computing (STOC), 1989.
[51] C.-P. Schnorr. Efﬁcient identiﬁcation and signatures for smart cards. In
Advances in Cryptology (CRYPTO), 1990.
[52] B. Schoenmakers. A simple publicly veriﬁable secret sharing scheme
and its application to electronic voting. In IACR International Cryptol-
ogy Conference (CRYPTO), pages 784–784, 1999.
[53] A. Shamir. How to share a secret. Communications of the ACM,
22(11):612–613, 1979.
[54] D. Shumow and N. Ferguson. On the Possibility of a Back Door in the
NIST SP800-90 Dual EC PRNG. CRYPTO 2007 Rump Session, 2007.
[55] M. Skala. Hypergeometric Tail Inequalities: Ending the Insanity. CoRR,
abs/1311.5939, 2013.
[56] M. Stadler. Publicly Veriﬁable Secret Sharing.
In 15th International
Conference on the Theory and Applications of Cryptographic Techniques
(EUROCRYPT), pages 190–199, Berlin, Heidelberg, 1996. Springer.
[57] D. R. Stinson and R. Strobl.
Provably secure distributed Schnorr
In
signatures and a (t, n) threshold scheme for implicit certiﬁcates.
V. Varadharajan and Y. Mu, editors,
Australasian Conference on
Information Security and Privacy (ACISP), pages 417–434, Berlin,
Heidelberg, 2001. Springer Berlin Heidelberg.
[58] E. Syta, I. Tamas, D. Visher, D. I. Wolinsky, P. Jovanovic, L. Gasser,
N. Gailly, I. Khofﬁ, and B. Ford. Keeping Authorities “Honest or Bust”
with Decentralized Witness Cosigning.
In 37th IEEE Symposium on
Security and Privacy, May 2016.
[59] J. van den Hooff, D. Lazar, M. Zaharia, and N. Zeldovich. Vuvuzela:
Scalable Private Messaging Resistant to Trafﬁc Analysis. In Proceedings
of the 25th Symposium on Operating Systems Principles, SOSP ’15,
pages 137–152, New York, NY, USA, 2015. ACM.
460
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:21:04 UTC from IEEE Xplore.  Restrictions apply.