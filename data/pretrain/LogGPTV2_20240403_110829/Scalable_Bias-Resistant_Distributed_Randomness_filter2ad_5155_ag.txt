### System Failure Probability for Varying Adversarial Power and Group Sizes

**Group Size (c)**
- 16
- 24
- 32
- 40

**Percentage of Compromised Nodes (p)**
- 0.10
- 0.15
- 0.20
- 0.25
- 0.30
- 0.35

**Figure 11: System Failure Probability for Varying Adversarial Power and Group Sizes**

This figure illustrates the system failure probability for different group sizes (c = 16, 24, 32, 40) and varying adversarial power (p = 0.01 to 0.33). The y-axis represents the security parameter q in the form of \(-\log_2(q)\), where higher values indicate exponentially lower failure probabilities.

**Table II: System Failure Probabilities (q) for Specific Configurations**

| p \ c | 16   | 24   | 32   | 40   |
|-------|------|------|------|------|
| 0.23  | 13.13| 19.69| 26.26| 32.82|
| 0.28  | 8.66 | 15.17| 17.33| 21.67|
| 0.32  | 5.76 | 8.64 | 11.52| 14.40|
| 0.33  | 5.12 | 7.69 | 10.25| 12.82|

For example, both RandHound and RandHerd exhibit a failure probability of approximately \(2^{-10.25} \approx 0.08\%\) when \(p = 0.33\) and \(c = 32\). Additionally, with \(p = 0.33\), we determined that the system's failure probability falls below 1% for a group size of \(c = 21\).

### Related Work

The generation of public randomness has been studied in various contexts. In 1981, Blum proposed the first coin-flipping protocol [10]. Rabin introduced cryptographic randomness beacons in 1983 [49]. NIST later launched such a beacon to generate randomness from high-entropy sources [45]. However, centralized randomness servers have seen limited adoption due to the necessity of trusting the party running the service.

Other approaches aim to avoid trusted parties. Bonneau et al. [13] use Bitcoin to collect entropy, focusing on the financial cost of bias rather than preventing it. Lenstra et al. [40] propose a slow hash to prevent client bias, but this approach relies on new and untested cryptographic assumptions and assumes timely commitment. Other methods include using lotteries [2] or financial data [21] as public randomness sources.

Gennaro et al. [29] observed that in many distributed key generation protocols, an attacker can observe public values of honest participants. To mitigate this, they propose delaying the disclosure of public values until a "point-of-no-return." We also use this concept to prevent adversary bias, but our approach does not assume a fully synchronous network. Cachin et al. [15] propose an asynchronous distributed coin-tossing scheme, which relies on a trusted setup dealer. Our protocols improve on this by allowing multiple nodes to deal secrets and combine them for randomness generation, enabling scalability to hundreds of nodes.

### Applications of Public Randomness

Public randomness is crucial in various applications, including:
- Protecting hidden services in the Tor network [34]
- Selecting elliptic curve parameters [2], [40]
- Byzantine consensus [46]
- Electronic voting [1]
- Random sharding of nodes into groups [35]
- Non-interactive client-puzzles [37]

RandHound and RandHerd can be useful in these scenarios for generating bias-resistant, third-party verifiable randomness. For instance, RandHound could be integrated into the Tor consensus mechanism to help directory authorities generate daily random values, protecting hidden services against DoS or popularity estimation attacks.

### Conclusions

While many distributed protocols depend on public, bias-resistant randomness for security, current solutions are only secure for small numbers of participants (n â‰ˆ 10) [15], [38]. This paper addresses the scalability challenge by adapting well-known cryptographic primitives. We propose two approaches: RandHound, which uses PVSS and the pigeonhole principle, and RandHerd, which relies on TSS and CoSi to produce random output as a Schnorr signature. Both protocols provide unbiasability, unpredictability, availability, and third-party verifiability while maintaining good performance and low failure probabilities. Our prototype demonstrates that these protocols can scale to thousands of participants, achieving a balance of performance, security, and availability. For example, a set of 512 nodes divided into groups of 32 can produce fresh random output every 240 seconds in RandHound and every 6 seconds in RandHerd after an initial setup, with a failure probability of at most 0.08% against a Byzantine adversary.

### Acknowledgments

We thank Rene Peralta and Apostol Vassilev for their input on public randomness generation and the anonymous reviewers for their feedback. This research was supported in part by NSF grants CNS-1407454 and CNS-1409599, DHS grant FA8750-16-2-0034, William and Flora Hewlett Foundation grant 2016-3834, and the AXA Research Fund.

### References

[References listed here as per the original text.]

---

This version of the text is more structured, clear, and professional, with improved readability and coherence.