间用于解决模块之间的函数引用的符号查我以及重定位，这也是我们上面提到的减慢动态链
接性能的第二个原因。不过可以想象，在一个程序运行过程中，可能很多函数在程序执行完
时都不会被用到，比如一些错误处理函数或者是一些用户很少用到的功能模块等，如果一开
始就把所有函数都链接好实际上是一种浪费。所以ELF采用了一种叫做延迟绑定（Lazy
Binding）的做法。基本的思想就是当函数第一次被用到时才进行绑定（符号查找、重定位
等），如果没有用到则不进行绑定。所以程序开始执行时，模块间的函数调用都没有进行绑
定，而是需要用到时才由动态链接器来负责绑定。这样的做法可以大大加快程序的启动速度，
特别有利于一些有人量函数引用和大量模块的程序。
ELF使用PLT（ProcedureLinkageTable）的方法来实现，这种方法使用了一些很精
巧的指令序列来完成。在开始详细介绍PLT之前，我们先从动态链接器的角度设想一下：
假设iba.so需要调用libc.so中的 bar(函数，那么当libaso中第一次调用barO时，这时候就
需要调用动态链接器中的某个函数来完成地址绑定工作，我们假设这个函数叫lookup0，
那么lookup0需要知道哪些必要的信息才能完成这个函数地址绑定工作呢？我想答案很明
显，lookupO至少需要知道这个地址绑定发生在哪个模块，哪个函数？那么我们可以假设
lookup 的原型为 lookup（module,function），这两个参数的值在我们这个例子中分别为 liba.so
和 barO。在Glibc 中，我们这里的 lookupO函数真正的名字叫_d_nuntime_resolveO。
当我们调用某个外部模块的函数时，如果按照通常的做法应该是通过GOT中相应的项
进行间接跳转。PLT为了实现延迟绑定，在这个过程中间又增加了一层间接跳转。调用函数
程序员的自我修养一链接、装载与库
---
## Page 224
7.4延迟绑定(PLT)
201
并不直接通过GOT跳转，而是通过一个叫作PLT项的结构来进行跳转。每个外部函数在PLT
中都有一个相应的项，比如bar（函数在PLT中的项的地址我们称之为bar@plt。让我们来看
看bar@plt 的实现：
Snp * (bar8GOT)
bar@p1t :
push n
jump _d1_runt ime_reso1ve
push modu1eID
bar@plt 的第一条指令是·条通过GOT间接跳转的指令。bar@GOT表示GOT 中保存
bar（)这个函数相应的项，如果链接器在初始化阶段已经初始化该项，并且将barO的地址填
入该项，那么这个跳转指令的结果就是我们所期望的，践转到barO。实现函数正确调用。
但是为了实现延迟绑定，链接器在初始化阶段并没有将barO的地址填入到该项，而是将上
面代码中第二条指令“pushn”的地址填入到bar@GOT中，这个步骤不需要查找任何符号，
所以代价很低。很明显，第一条指令的效果是跳转到第二条指令，相当于没有进行任何操作。
第二条指令将一个数字n压入堆栈中，这个数字是bar这个符号引用在重定位表“relplt”
中的下标。接若又是一条push指令将模块的ID压入到堆栈，然后跳转到_dl_runtime_resolve，
这实际上就是在实现我们前面提到的 lookup（module，function）这个函数的调用：先将所需要
决议符号的下标压入堆栈，再将模块ID压入堆栈，然后调用动态链接器的
_d_runtime_resolve(的数来完成符号解析和重定位1.作。_dl_runtime_resolve(在进行一系列
工作以后将barO的真正地址填入到bar@GOT中。
一旦bar(这个函数被解析完毕，当我们再次调用bar@plt时，第一条jmp指令就能够跳
转到真正的barO函数中，barO函数返回的时候会根据堆栈里面保存的EIP直接返回到调用
者，而不会再继续执行bar@plt中第二条指令开始的那段代码，那段代码只会在符号未被解
析时执行次。
上面我们描述的是PLT的基本原理，PLT真正的实现要比它的结构稍微复杂一些（见
变量引用的地址，“goLplt”用来保存函数引用的地址，也就是说，所有对于外部函数的引
是有特殊意义的，分别含义如下：
第一项保存的是“.dynamic”段的地址，这个段播述了本模块动态链接相关的信息，我
们在后面还会介绍“dynamic”段。
·第二项保存的是本模块的ID。
·第三项保存的是_dL_runtime_resolve(的地址。
程序员的自我修养一链接、装载与库
---
## Page 225
202
第7章动态链接
其余项分别对应每个外部函数的引用。PLT的结构也与我们示例中的PLT稍有不同，为了
减少代码的重复，ELF把上面例子中的最后两条指令放到PLT中的第一项。并且规定每
项的长度是16个字节，刚好用来存放3条指令，实际的PLT基本结构如图7-9所示。
Address of .dynamic
Module ID“Lib.so"
.text
_d_runtime_resolve()
Import function1
Import function2
Import function3
.dynamic
-.....
-got
-got.plt
-got.plt
-data
ELF File
图7-9GOT中的PLT数据结构
实际的PLT基本结构代码如下：
PLT0 :
push ·(GOr · 4)
Jump* (GOT +8)
 1 1
bar@p1t :
jmp * (barBGOT)
jump P/To
push n
PLT在ELF文件中以独立的段存放。段名通常叫做”pht”，因为它本身是一些地址无关
的代码，所以可以跟代码段等一起合并成同一个可读可执行的“Segment”被装载入内存。
7.5
5动态链接相关结构
在了解了共享对象的绝对地址引用问题以后，我们基本上对动态链接的原理有了初步的
程序员的自我修养一链接、装载与库
---
## Page 226
7.5动态链接相关结构
203
了解，接下来的问题就是整个动态链接具体的实现过程了。动态链接在不同的系统上有不同
的实现方式，ELF的动态链接实现方式比PE稍微简单一点，在这里我们还是先介绍ELF
的动态链接机制在Linux下的实现，最后我们会在专门的章节中介绍 PE在 Windows 下的动
态链接机制和它们的区别。
我们在前面的章节已经看到，动态链接情况下，可执行文件的装载与静态链接情况基本
一样。首先操作系统会读取可执行文件的头部，检查文件的合法性，然后从头部中的“Program
Header”中读取每个“Segment”的虚拟地址、文件地址和属性，并将它们映射到进程虚拟
空间的相应位置，这些步骤跟前面的静态链接情况下的装载基本无异。在静态链接情况下，
操作系统接着就可以把控制权转交给可执行文件的入口地址，然后程序开始执行，一切看起
来非常直观。
但是在动态链接情况下，操作系统还不能在装载完可执行文件之后就把控制权交给可执
行文件，因为我们知道可执行文件依赖于很多共享对象。这时候，可执行文件里对于很多外
部符号的引用还处于无效地址的状态，即还没有跟相应的共享对象中的实际位置链接起来。
所以在映射完可执行文件之后，操作系统会先启动个动态链接器（DynamicLinker）。
在Linux下，动态链接器ld.so实际上是一个共享对象，操作系统同样通过映射的方式
将它加载到进程的地址空间中，操作系统在加载完动态链接器之后，就将控制权交给动态链
接器的入口地址（与可执行文件一样，共享对象也有人口地址）。当动态链接器得到控制权
之后，它开始执行一系列白身的初始化操作，然后根据当前的环境参数，开始对可执行文件
进行动态链接工作。当所有动态链接工作完成以后，动态链接器会将控制权转交到可执行文
件的入口地址，程序开始止式执行。
7.5.1“.interp”段
那么系统中哪个才是动态链接器呢，它的位置由谁决定？是不是所有的*NIX系统的动
态链接器都位于/ib/d.so呢？实际上，动态链接器的位置既不是由系统配置指定，也不是由
环境参数决定，而是由ELF可执行文件决定。在动态链接的ELF可执行文件中，有一个专
（（）），
工具来查看，可以看到“.interp”内容：
$ objdump -8 a.out
a.out:file format elf32-i386
Contents of section ,interp;
8048114 2f6c6962 2f6c642d 6c696e75 782e736f  /1ib/1d-1inux.80
"interp”的内容很简单，里面保存的就是一个字符串，这个字符串就是可执行文件所
程序员的自我修养—链接、装载与库
---
## Page 227
204
第7章动态链接
需要的动态链接器的路径，在Linux下，可执行文件所需要的动态链接器的路径几乎都是
“/lib/ld-linux.so.2”，其他的*nix操作系统可能会有不同的路径，我们在后面还会再介绍到
各种环境下的动态链接器的路径。在Linux的系统中，/ib/ld-linux.so.2通常是一个软链接，
比如在我的机器上，它指向/lib/ld-2.6.1.so，这个才是真正的动态链接器。在Linux中，操作
系统在对可执行文件的进行加载的时候，它会去寻找装载该可执行文件所需要相应的动态键
接器，即“.interp”段指定的路径的共享对象。
动态链接器在Linux下是Glibc的一部分，也就是属于系统库级别的，它的版本号往往
跟系统中的Glibc库版本号是一样的，比如我的系统中安装的是Glibe2.6.1，那么相应的动
态链接器也就是/ib/Id-2.6.1.so。当系统中的Glibc库更新或者安装其他版本的时候，
/ib/ld-linux.so.2这个软链接就会指向到新的动态链接器，而可执行文件本身不需要修改
“interp”中的动态链接器路径来适应系统的升级。
我们也可以用这个命令来查看一个可执行文件所需要的动态链接器的路径，在Linux
下，往往是如下结果；
$readelf -1 a.out 1grep interpreter
[Requesting progran interpreter: /1ib/1d-1inux.so.21
而当我们在FrceBSD4.6.2下执行这个命令时，结果是：
$readelf -1 a.out 1grep interpreter
[Requesting program -interpreter: /usr/1ibexec/1d-elf ,so.1]
64位的Linux下的可执行文件是：
$ readelf -1 a.out 1 grep interpreter
[Requesting program interpreter: /1ib64/1d-1inux-x86-64,8o.2]
7.5.2“.dynamic”段
类似于"interp“这样的段，ELF中还有儿个段也是专门用于动态链接的，比如”.dynamic”
段和“.dynsym”段等。要了解动态链接器如何完成链接过程，跟前面一样，从了解ELF文
件中跟动态链接相关的结构入手将会是一个很好的途径。ELF文件中跟动态链接相关的段有
好几个，相互之间的关系也比较复杂，我们先从“dynamic”段入手。
需要的基本信息，比如依赖于哪些共享对象、动态链接符号表的位置、动态链接重定位表的
位置、共享对象初始化代码的地址等。“.dynamic”段的结构很经典，就是我们已经碰到过
的ELF中眼熟的结构数组，结构定义在“elf.h”中：
typedef struct (
ε1f32_sword d_tag:
union{
程序员的自我修养一键接、装载与库
---
## Page 228
7.5动态链接相关结构
205
E1f32_word d_val;
e1f32_Addr d_ptr;
}E1f32_Dyn1
} d_un:
Ef32_Dyn结构由一个类型值加上一个附加的数值或指针，对于不同的类型，后面附加
的数值或者指针有着不同的含义。我们这里列举几个比较常见的类型值（这些值都是定义在
“elf.h”里面的宏），如表7-2所示。
表7-2
d_tag类型
dn的含文
DT_SYMTAB
动态链接特号表的地址，dptr表示“dynsym”的地址
DT_STRTAB
动态链接字符串表地址，d_plr表示“dynstr”的地址
DT_STRSZ
动态链接字符串表大小，d_val表示大小
DT_HASH
动态链接哈希表地址，d_ptr表示“hash”的地址
DT_SONAME
本共享对象的“SO-NAME”，我们在后面会介绍“SO-NAME”
DT_RPATH
动态链接头享对象搜索路径
DT_INIT
初始化代码地址
DT_FINIT
结来代码地址
DT_NEED
依赖的共享对象文件，d_ptr表示所依赖的共享对象文件名
DT_REL
DT_RELA
动态链接重定位表地址
DT_RELENT
DT_RELAENT
动态重读位表入口数量
表7-2中只列出了一部分定义，还有一些不太常用的定义我们就暂且忽略，具体可以参
考LSB手册和elf.h的定义。从上面给出的这些定义来看，“.dynamic”段里面保存的信息有
点像ELF文件头，只是我们前面看到的ELF文件头中保存的是静态链接时相关的内容，比
如静态链接时用到的符号表、重定位表等，这里换成了动态链接下所使用的相应信息了，所
看“dynamic”段的内容：
$ readelf -d Lib.80
Dynamic section at offset 0x4f4 contains 21 entries1
(G3G88N）T0000000X0
Tag
Type
Shared library: [1ibc.so.6]
Nane/Value
0x0000000c
0x0000000d
(INIT)
(FINI)
0x310
0x00000004
0x4a4
(HASH)
0xb4
0x00000005
0x6ffffef5
(GNU_HASH)
(STRTAB)
0xf8
0x1f4
0x00000006
0x0000000a
(SYMTAB)
(STRSZ)
0x134
0x0000000b (SYMENT)
16 (bytes)
139 (bytes)
程序员的自我修养一键接、装载与库
---
## Page 229