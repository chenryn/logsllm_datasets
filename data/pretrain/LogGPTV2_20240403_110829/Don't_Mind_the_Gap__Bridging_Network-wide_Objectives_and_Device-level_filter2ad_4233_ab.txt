### Implementation and Challenges

The appeal of this implementation lies in the fact that X and Y do not need to be aware of whether prefixes are global or local. IP address assignment can occur independently, allowing local services to be assigned new prefixes without updating the configurations of the routers.

However, this implementation exhibits incorrect behavior in the event of failures. For instance, if links X–G and X–H fail, X will receive announcements for PL* from C and D, which have traversed through G and H to Y, and then to C and D. According to its policy, X will start "leaking" these prefixes externally. Depending on the nature of the local services, this leak could compromise security (if the services are sensitive) or availability (if the PL* prefixes are reused for other services outside the datacenter). This issue does not arise under normal conditions because X has and prefers shorter paths to PL* through G and H. A similar problem would occur if links Y–G and Y–H fail. Link failures in datacenters are frequent, and it is common to have multiple failed links at any given time [16].

To mitigate this problem, the operator might disallow "valley" paths, which go up, down, and back up again. This can be implemented by having X and Y reject paths through each other. However, this solution introduces a different problem: an aggregation-induced black hole [20]. If links D–A and X–C fail, X will hear an announcement for PG2 from D and will thus announce PG externally. This announcement will bring traffic for PG1 to X as well, but since valleys are disallowed, X will not have a valid route for PG1 and will drop all traffic for it, even though a valid path exists through Y.

Thus, ensuring policy compliance in the face of failures is complex and error-prone. Propane allows operators to implement their high-level policy specifications in a way that guarantees compliance under all possible failures, or it generates a compile-time error. For aggregation, Propane also provides a lower bound on the number of failures under which aggregation will not result in black holes.

### Propane Overview

Policies for (distributed) control planes differ from data-plane policies in several important ways. First, they must account for all possible failures at compile time, as there is no controller at runtime to handle failures. Routers must be configured in advance to handle failures in a compliant manner. In Propane, this is achieved through path preferences, where a less-preferred path is taken only when a higher-preference path is unavailable. Second, paths in a control-plane policy may be under-specified (e.g., "prefer customer" does not indicate a concrete path). The Propane compiler treats such under-specifications as constraints on the set of allowed paths and automatically computes valid sets based on the network topology.

This section introduces the Propane language using examples from the previous section. The next section describes the complete syntax of the language and our strategy for compiling it to BGP.

#### Example 1: The Backbone

Propane allows operators to configure the network with the abstraction of centralized control over routing. The operator provides a set of high-level constraints that describe the preferred and non-preferred paths and their relative preferences. Propane specifications are written modularly via a series of declarations. For example, to specify the backbone network, we first express the preference for traffic to leave the network through R1 over R2 (to Cust) over Peer over Prov (policies P1 and P3 from Figure 1):

```propane
define Prefs = exit(R1 » R2 » Peer » Prov)
```

This statement defines a set of ranked paths, including all paths for which traffic exits the network through R1, R2, Peer, or Prov. Paths that exit through R1 are preferred over those that exit through R2, which are preferred over those that leave through Peer and then Prov. The `exit` expression and other path expressions used later are shorthands for regular expressions over paths. The preference operator (») is flexible and can be used between constraints and individual routers. For example, the above constraint could be written equivalently as `exit(R1) » ... » exit(Prov)`.

To associate ranked paths with one or more prefixes, we define a Propane policy. Within a policy, statements with the form `t => p` associate the prefixes defined by the predicate `t` with the set of ranked paths defined by the path expression `p`. Here, we assume the predicate `PCust` is defined for customer prefixes:

```propane
define Routing =
{PCust => Prefs & end(Cust)
 true => Prefs }
```

Line 2 of this policy restricts traffic destined for known customer prefixes (PCust) to follow paths that end at the customer. It also enforces the network-wide preference for traffic to leave through R1 over R2 over Peer over Prov. Line 3 applies to any other traffic not matching PCust and allows it to leave through any direct neighbor with the usual preference of R1 over R2 over Peer over Prov. This policy implements P1, P3, and P4 from Figure 1.

Since routing allows transit traffic by default, we define a separate policy to enforce P2 and P5 from Figure 1, using conjunction (`&`), disjunction (`|`), and negation (`!`) of constraints:

```propane
define transit(X,Y) = enter(X|Y) & exit(X|Y)
define cust-transit(X,Y) = later(X) & later(Y)
```

We define transit traffic between groups of neighbors X and Y as traffic that enters the network through some neighbor in X or Y and leaves through some neighbor in either X or Y. Similarly, we define customer transit for customer X and provider Y as traffic that later goes through both X and Y after leaving our network. Using these abstractions, we can implement policies P2 and P5 with the following constraint:

```propane
define NoTrans =
{true => !transit(Peer,Prov) &
 !cust-transit(Cust,Prov)}
```

The `NoTrans` constraint ensures that all traffic does not follow a path that transits our network between Peer and Prov, and prevents traffic from ever following paths that leave our network and later go through both Prov and Cust. To implement both `Routing` and `NoTrans` simultaneously, we simply conjoin them: `Routing & NoTrans`.

Collectively, these constraints capture the entire policy. The compiler will generate per-device import and export filters, local preferences, MED attributes, and community tags to ensure the policy is implemented correctly under all failures.

#### Example 2: The Datacenter

Our datacenter example network has three main concerns:
1. Traffic for the prefix allocated to each top-of-rack router must be able to reach that router.
2. Local services must not leak outside the datacenter.
3. Aggregation must be performed on global prefixes to reduce churn in the network.

Propane allows modular specification of each of these constraints. The first constraint is about prefix ownership—traffic for certain prefixes should end up at a specific location:

```propane
define Ownership =
{PG1 => end(A)
 PG2 => end(B)
 PL1 => end(E)
 PL2 => end(F)
 true => end(out)}
```

This definition states that traffic for prefix PG1 is allowed to follow only paths that end at router A; traffic for PG2, but not PG1, must end at router B; and so on. Any traffic destined for a prefix that is not part of the datacenter should be allowed to leave the datacenter and end at some external location, which is otherwise unconstrained. The special keyword `out` matches any location outside the datacenter network, while `in` matches any location inside the network.

For the second constraint, we define another policy:

```propane
define Locality =
{PL1 | PL2 => only(in)}
```

This definition ensures that traffic for local prefixes follows paths that are internal to the network at each hop, guaranteeing that the services remain accessible only to locations inside the datacenter.

As in the backbone example, we can logically conjoin these constraints to specify the network-wide policy. Additionally, Propane allows the operator to specify constraints on the BGP control plane itself. For instance, a constraint on aggregation ensures that aggregation for global prefixes is performed from locations inside (in) the network to locations outside (out). In this case, PG1 and PG2 will use the aggregate PG (which we assume is defined earlier) when advertised outside the datacenter:

```propane
Ownership & Locality & agg(PG, in -> out)
```

Once Propane compiles the policy, it is guaranteed to remain compliant under all possible failure scenarios, modulo any aggregation-induced black holes. In the presence of aggregation, the Propane compiler will also efficiently find a lower bound on the number of failures required to create an aggregation-induced black hole.

### Compilation

The examples above use what we call the front end (FE) of Propane. It simplifies the task of describing preferred paths, but this simplicity comes at the cost of compilation complexity. The compiler must efficiently compute the sets of paths represented by the intersection of preferences and topology and ensure policy compliance under all failure scenarios.

To handle these challenges, we decompose compilation into multiple stages, shown in Figure 3, and develop efficient algorithms for the translation between stages. The first stage involves simple rewriting rules and substitutions from the FE to the core Regular Intermediate Representation (RIR). Policies in RIR are checked for well-formedness (e.g., never constraining traffic that does not enter the network) before being combined with the topology to obtain the Product Graph Intermediate Representation (PGIR). The PGIR is a compact data representation that captures the flow of BGP announcements subject to policy and topology restrictions. We develop efficient algorithms that operate over the PGIR to ensure policy compliance under failures, avoid BGP instability, and prevent aggregation-induced black holes. Once the compiler determines safety, it translates the PGIR to an abstract BGP (ABGP) representation, which can then be translated into various vendor-specific device configurations as needed.

#### Regular IR (RIR)

The Propane FE is a thin layer atop the RIR for describing preference-based path constraints. Figure 4 shows the RIR syntax. A policy consists of one or more constraints. The first kind of constraint is a test on the type of route and a corresponding set of preferred regular paths. Regular paths are regular expressions where the base characters represent either a router or an external AS. Special `in` and `out` symbols refer to any internal or external location, respectively. Σ refers to any location. We also use the standard regular expression abbreviation `r+` for `r· r∗`, a sequence of one or more occurrences of `r`. Predicates (t) consist of logical boolean connectives (and, or, not).

```propane
Syntax
Propane Expansions
::= p1, . . . , pn
::= t => r1» . . . »rm | cc
pol
p
x ::= d.d.d.d/d
t
any = out∗ · in+ · out∗
drop = ∅
::= true
|
!t
|
t1|t2
|
t1&t2
|
preﬁx = x
|
comm = d
::= l
∅
|
|
in
|
out
r1 ∪ r2
|
|
r1 ∩ r2
|
r1 · r2
|
!r
|
r∗
::= agg(x, ln) | tag(d, t, ln)
Figure 4: Regular Intermediate Representation (RIR) syntax (left), and Propane language expansions (right).
internal = in+
only(X) = any ∩ X∗
never(X) = any ∩ (!X)∗
through(X) = out∗ · in∗ · X · in∗ · out∗
later(X) = out∗ · (X ∩ out) · out∗ · in+ · out∗
before(X) = out∗ · in+ · out∗ · (X ∩ out) · out∗
end(X) = any ∩ (Σ∗ · X)
start(X) = any ∩ (X · Σ∗)
exit(X) = (out∗ · in∗ · (X ∩ in) · out · out∗)∪
enter(X) = (out∗ · out · (X ∩ in) · in∗ · out∗)∪
link(X, Y ) = any ∩ (Σ∗ · X · Y · Σ∗)
(out∗ · in+ · (X ∩ out) · out∗)
(out∗ · (X ∩ out) · in+ · out∗)
novalley( (cid:126)X) = any ∩
path( (cid:126)X) = any ∩ (Σ∗ · X1 . . . Xn · Σ∗)
!path(X2, X1, X2) ∩ ···∩
!path(Xn, Xn−1, Xn)
policies
constraints
preﬁx
true
negation
disjunction
conjunction
preﬁx test
community test
location
empty set
internal loc
external loc
union
intersection
concatenation
path negation
iteration
```

This structured approach ensures that the compiled policies are both efficient and robust, providing a reliable and secure network configuration.