# 0x01 前言
早在 2015 年 1 月 28 日， Gabriel Lawrence（@gebl）和 Chris
Frohoff（@frohoff）就发布了关于反序列化的[演讲](https://www.slideshare.net/frohoff1/appseccali-2015-marshalling-pickles)，演讲中 frohoff 公开了他写的 Java 反序列化漏洞利用的工具
[ysoserial](https://github.com/frohoff/ysoserial)。关于 Java
反序列化相关漏洞的背景和相关知识可以看我之前的文章[《Java 反序列化取经路》](https://su18.org/post/ysuserial/)。
7 年后的今天，反序列化漏洞依旧是 Java 安全漏洞中的当红流量明星，高危中的高危，尤其在各大中间件和框架中。而与其他漏洞类型不同的是，Java
反序列化利用的核心，并不是漏洞的入口点，而是环境中的依赖 —— 反序列化 Gadget。
随着时间的沉淀，各个比较常见的组件库中的 Gadget 被挖掘出来，在用户量较大的 ysoserial 以及 marshalsec
中都公开了一些常见组件的链。
但是随着各个组件的更新、各种基于黑名单/过滤层的防御模式的出现，这些常见反序列化利用 Gadget
的可用性急速降低，攻击者往往面临着在黑盒进攻时，明明找到了入口点，但是无链可用的情况。
遇到这种情况怎么办？c0ny1 师傅在 @Joshua Bloch的《effective java》
基础上提出了利用反序列化炸弹的技巧，通过消耗部分性能达到间接延时的作用，来探测 class
是否存在，文章在[这里](https://mp.weixin.qq.com/s/KncxkSIZ7HVXZ0iNAX8xPA)。
珂字辈师傅实现了修改 URLDNS Gadget 通过获取类 hashCode 并通过 DNSLOG
回显的方式来尝试解决此问题，项目在[这里](https://github.com/kezibei/Urldns)。
但是当利用链存在但因为某种原因被 Ban
掉，或者当类存在，但是依赖版本已经更新，关键代码位置已经不再包含可反序列化利用的逻辑时，攻击者还是会束手无策。所以针对目前的反序列化漏洞利用，有以下几个局限性：
  1. 常利用的 Gadget 就那几个，在目标环境有防御措施的情况下，几乎无法利用；
  2. 客户端更新依赖包版本后，原有的 Gadget 将会失效；
  3. 目前的 Gadget 由于为了高利用性，通常是挖掘在同一个依赖下的类 + JDK 自带的类组成链，但其实还可以在几个常用依赖中找可以串联起来的类。
在对 ysoserial
中全部链进行学习和跟踪后，我发现时至今日，要在一个新组件中挖掘一条新链也并不容易，需要对组件的源码实现、很多关键类的关键方法的调用有十足的了解，并在积累了一定的安全知识后再进行对
kick-off/gadget/sink 进行挖掘和组成。在真实的业务代码中，开发人员引用了更多的依赖，如果手动挖掘，需要的精力和时间将会指数级上升。
所以，能不能有办法可能较为快速的挖掘呢？
网飞 Platform Security Team 的 Ian Haken 在 2018 年 8 月的 DEF CON 26
上给出了他的答卷：GadgetInspector。项目在[这里](https://github.com/JackOfMostTrades/gadgetinspector)，PPT
在[这里](https://i.blackhat.com/us-18/Thu-August-9/us-18-Haken-Automated-Discovery-of-Deserialization-Gadget-Chains.pdf)，会议视频在[这里](https://www.youtube.com/watch?v=wPbW6zQ52w8&ab_channel=DEFCONConference)。
按照其介绍，本项目可以自动化挖掘反序列化利用链。本篇文章则是对该项目的学习、研究以及优化改造的记录。
关于项目的介绍和分析，网上已经存在了不少优秀的文章，本文内将不再重复相关的信息，在笔者学习和研究时，主要参考了以下几篇文章，先列举一下，作为本文的前置知识：
  * [简单理解污点分析技术](https://www.k0rz3n.com/2019/03/01/%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3%E6%B1%A1%E7%82%B9%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF/) by k0rz3n
  * [java反序列化利用链自动挖掘工具gadgetinspector源码浅析](https://xz.aliyun.com/t/7058) by threedr3am
  * [Java 反序列化工具 gadgetinspector 初窥](https://paper.seebug.org/1034/) by Longofo
  * [GadgetInspector源码分析](https://fynch3r.github.io/GadgetInspector%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/) by fynch3r
# 0x02 明确目标
在开始改造之前，首先要明确目标：
>
> 核心目的是对包含了若干个依赖库的用户代码进行自动化挖掘反序列化利用链，预期的效果是可以根据现有的知识储备挖掘在用户的整个代码环境下可能由多个依赖组成的反序列化利用链。
很多师傅在 GadgetInspector 的核心代码上进行改造，使其能力可以覆盖 fastjson/jackson/xstream
甚至是常规漏洞的分析与挖掘，不过本次笔者专注于反序列化漏洞，对其他类型漏洞将不进行覆盖。
# 0x03 关键流程及技术分析
这一小节来用文字简单描述一下 GadgetInspector 对于 “自动化挖掘反序列化利用链” 这一目标的技术实现过程中的关键流程。
一句话来说，GadgetInspector 使用 ASM 对 Java
类字节码进行污点分析来挖掘反序列化利用链。考虑到在很多时候不一定能拿到用户的源代码，所以这一思路还是非常符合现实情况的。
## 信息收集
GadgetInspector 使用 ASM 的 ClassReader 来读取全部类和方法的信息，使用自定义 MethodVisitor
在读取类和方法的指定位置来记录信息。记录的信息有全限定类名、类中包含的方法、方法名、方法描述符等。
处理完基础信息后，会解析类的继承关系、方法继承关系、构造类和方法的映射等等相关信息的映射，接下来使用 DFS
算法对方法的调用链进行逆拓扑排序，其实就是使用了递归的后序遍历，并解决了环式调用和重复排序的问题，将方法复杂的调用图转为线性的序列，供后续的遍历和处理。
## 污点分析
污点分析这部分是调用链挖掘的重中之重。
GadgetInspector 使用了自定义 MethodVisitor，模拟帧栈的变化，或者说是模拟本地变量表（local
variables）和操作数栈（operand stack）的变化来进行污点传播的追踪，模拟的过程实际是参照了 ASM 提供的
AnalyzerAdapter 的思路。
这一部分共分为两段，第一段是方法内的污点传播，即方法的入参能否影响到方法返回结果的分析过程。
GadgetInspector
通过在自己模拟的栈顶数据打标记（入参索引），并在访问字段、访问其他方法等操作时根据自定义规则判断是否能够传播污点来对栈顶数据打标记或清空的方式来进行污点传播的分析。直到方法
return 时，取出栈顶返回数据的污点标记，得到哪个入参对其造成了影响。
第二段是方法间的污点传播，即一个方法调用下一个方法时，调用者（caller）方法能否影响到被调用者（target）方法的入参的分析过程。
同样的思路进行方法间调用的污点分析，使用调用者的入参索引作为污点，传播至被调用者入参时，认为其可以影响到下一个方法的调用。
## Source 与 Sink
曾在《Java 反序列化取经路》中提到，反序列化 Gadget 的组成一共有三个：Kick-off，Chain，Sink。而这里的 Kick-off
在静态分析中则称之为 Source。
对于反序列化漏洞而言，一般是从重写了 `readObject` 等方法的逻辑开始，进行相关的调用，最终调用到一些可能造成危害的函数，如执行命令、文件写入等。
GadgetInspector 定义了一些 Source 点：重写 finalize 方法、重写 readObject
方法、InvocationHandler子类的 invoke 方法、重写 equals/hashCode 方法以及指定包下的点如 Closure 的
call/doCall 方法。
同时定义了一些 Sink 点：FileInputStream/FileOutputStream 的创建与写出、Runtime
执行命令、反射调用、URLClassLoader 实例化、URL 建立连接等等和一些特定包下的利用点如 PyCode 等。
## 反序列化链的构造
有了 Source，有了 Sink，有了污点分析的结果，就开始最终的反序列化链的构造了。
GadgetInspector 构造反序列化链从 Source
点方法出发，寻找该方法能污染的方法，并从这个方法和他子类中的方法中继续寻找下一个能污染的方法，直到遇到 Sink 点，就组成了利用链。
# 0x04 改造之路
在了解了实现思路，过了一遍源代码后，可以发现在部分具体细节中，GadgetInspector 还是存在着一些问题，这些问题导致着很大程度的误报和漏报，虽然
Soundness 和 Completeness 永远是需要平衡的，但是这里还是可以通过一些细节的处理来对其功能进行优化和提高。
## 继承方法
在构造反序列化利用链时，会根据之前生成的污点传播信息获取一个方法能够污染的方法，并判断这个方法所在类和他的子类是否存在可以反序列化的类，再进行进一步的查找。
这个逻辑就存在一个问题，在 GadgetInspector