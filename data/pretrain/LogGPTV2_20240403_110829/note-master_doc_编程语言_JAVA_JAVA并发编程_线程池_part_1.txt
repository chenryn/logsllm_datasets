# 线程池
作用：
- 线程复用 控制最大并发数
- 实现任务缓存策略以及拒绝策略
- 定期执行 周期执行
- 隔离不同业务的线程执行环境
解决了两个问题：
1：通过减少任务间的调度开销 (主要是通过线程池中的线程被重复使用的方式)，来提高大量任务时的执行性能；
2：提供了一种方式来管理线程和消费，维护基本数据统计等工作
线程池决定了任务的执行策略：
- 什么线程
- 什么顺序
- 多少任务执行
- 多少任务等待
- 如何放弃以及通知放弃
- 任务执行前操作
## Executor框架
```java
public interface Executor {
  void execute(Runnable command);
}
```
ExecutorService继承了Executor，增加了一些方法
```java
public interface ExecutorService extends Executor {
    // 平缓关闭
    void shutdown();
    // 粗暴关闭
    List shutdownNow();
    boolean isShutdown();
    boolean isTerminated();
    boolean awaitTermination(long timeout, TimeUnit unit)
        throws InterruptedException;
     Future submit(Callable task);
     Future submit(Runnable task, T result);
    Future submit(Runnable task);
     List> invokeAll(Collection> tasks)
        throws InterruptedException;
     T invokeAny(Collection> tasks)
        throws InterruptedException, ExecutionException;
}
```
### execute&submit
使用这两个方法一定要注意，execute会将runnable交给worker去执行，出现异常会打印异常栈。
而submit方法则会将runnable包装成一个ScheduledFutureTask 这个类会将异常吞掉，不会打印异常栈。
## Callable
- 拥有返回值
## Future
>用来执行一些较长时间的计算，通过get来获取结果（阻塞或者超时）
用于异步获取执行结果或取消执行任务的场景
```java
FutureTask futureTask = new FutureTask<>(() -> {
    int result = 0;
    for (int i = 0; i  future = pool.submit(() -> {
    Thread.sleep(3000);
    return "java";
});
String s = future.get();
```
### Future模式
```java
public class Main {
    public static void main(String[] args) throws ExecutionException, InterruptedException {
        MyFuture myFuture = new MyFuture();
        // 在这里 main thread 可以做其他事情
        // 下一行代码将阻塞直到结果可用
        System.out.println(myFuture.getData());
    }
}
class MyFuture{
    private volatile boolean FLAG = false;
    private String data;
    public MyFuture() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                System.out.println("future 任务开始 睡眠 3000ms");
                try {
                    Thread.sleep(3000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                System.out.println("future 任务结束");
                setData("jntm");
            }
        }).start();
    }
    private synchronized void setData(String data){
        if (FLAG){
            return;
        }
        this.data = data;
        FLAG = true;
        notify();
    }
    public synchronized String getData(){
        while (!FLAG){
            try {
                wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        return data;
    }
}
```
#### CompletableFuture
使用观察者模式来实现
有意思的是这个类跟Stream的终结流有点像，只有终点调用了取值的操作，整个调用兰才会被执行
某些方法可以传递一个线程池参数，当不传递Executor时，会使用ForkJoinPool中的共用线程池CommonPool（CommonPool的大小是CPU核数-1，如果是IO密集的应用，线程数可能成为瓶颈
```java
// 此处 cf1 跟 cf2并发
CompletableFuture cf1 = CompletableFuture.supplyAsync(() -> {
    sleep(1000);
    System.out.println("cf1");
    return "cf1";
});
CompletableFuture cf2 = CompletableFuture.supplyAsync(() -> {
    sleep(500);
    System.out.println("cf2");
    return "cf2";
});
// cf3等待c1执行完毕
CompletableFuture cf3 = cf1.thenApply(result -> {
    System.out.println("cf3");
    return "cf3";
});
// cf4 等待 cf1跟cf2执行完毕
CompletableFuture cf4 = cf1.thenCombine(cf2, (result1, result2) -> {
    System.out.println("cf4");
    return "cf4";
});
// cf5等待cf2执行完毕
CompletableFuture cf5 = cf2.thenApply(result -> {
    System.out.println("cf5");
    return "cf5";
});
// cf6等待 3 4 5执行完毕
CompletableFuture cf6 = CompletableFuture.allOf(cf3, cf4, cf5);
System.out.println(cf6.thenApply(v -> {
    try {
        return cf3.get() + cf4.get() + cf5.get();
    } catch (InterruptedException | ExecutionException e) {
        return null;
    }
}).get());
```
```mermaid
stateDiagram-v2
    [*] --> cf1
    [*] --> cf2
    cf1 --> cf3
    cf1 --> cf4
    cf2 --> cf4
    cf2 --> cf5
    cf3 --> cf6
    cf4 --> cf6
    cf5 --> cf6
    cf6 --> [*]
```
异常处理
```java
CompletableFuture.completedFuture("")
    .exceptionally(e -> {
        e.printStackTrace();
        return "";
    });
```
CompletableFuture在回调方法中对异常进行了包装。大部分异常会封装成CompletionException后抛出，真正的异常存储在cause属性中，因此如果调用链中经过了回调方法处理那么就需要用Throwable.getCause()方法提取真正的异常。但是，有些情况下会直接返回真正的异常
### 初始化
```java
public FutureTask(Callable callable) {
    if (callable == null)
        throw new NullPointerException();
    this.callable = callable;
    this.state = NEW;       // ensure visibility of callable
}
public FutureTask(Runnable runnable, V result) {
    // 将runnable包装成callable，内部是通过适配器的方式来实现的
    this.callable = Executors.callable(runnable, result);
    this.state = NEW;       // ensure visibility of callable
}
```
```java
RunnableAdapter(Runnable task, T result) {
            this.task = task;
            this.result = result;
        }
public T call() {
    task.run();
    return result;
}
```
### get
```java
public V get() throws InterruptedException, ExecutionException {
    int s = state;
    if (s  COMPLETING) {
            if (q != null)
                q.thread = null;
            return s;
        }
        // 还未完成，让线程调度器重新调度，防止占着不放
        else if (s == COMPLETING)
            Thread.yield();
        // 线程被打断，抛出异常
        else if (Thread.interrupted()) {
            removeWaiter(q);
            throw new InterruptedException();
        }
        // 第一次运行，创建一些信息
        else if (q == null) {
            if (timed && nanos = nanos) {
                    removeWaiter(q);
                    return state;
                }
                parkNanos = nanos - elapsed;
            }
            // nanoTime may be slow; recheck before parking
            if (state  c = callable;
        // 状态正确时进入
        if (c != null && state == NEW) {
            V result;
            boolean ran;
            try {
                // 执行主体
                result = c.call();
                // 标记执行完成
                ran = true;
            } catch (Throwable ex) {
                // 标记失败
                result = null;
                ran = false;
                setException(ex);
            }
            if (ran)
                set(result);
        }
    } finally {
        runner = null;
        int s = state;
        if (s >= INTERRUPTING)
            handlePossibleCancellationInterrupt(s);
    }
}
```
### cancel
```java
public boolean cancel(boolean mayInterruptIfRunning) {
    // 状态不对
    if (!(state == NEW && STATE.compareAndSet
          (this, NEW, mayInterruptIfRunning ? INTERRUPTING : CANCELLED)))
        return false;
    try {    // in case call to interrupt throws exception
        if (mayInterruptIfRunning) {
            try {
                // 通过设置中断位来停止线程
                Thread t = runner;
                if (t != null)
                    t.interrupt();
            } finally { // final state
                STATE.setRelease(this, INTERRUPTED);
            }
        }
    } finally {
        finishCompletion();
    }
    return true;
}
```
## 线程池分类
- ThreadPollExecutor
- ForkJoinPool
  - 分解汇总的任务
  - 用很少的线程可以执行很多的任务(子任务) TPE做不到先执行子任务
  - CPU密集型
### ThreadPollExecutor
Executors：线程池工厂（**不推荐使用**）
- newCachedThreadPool 创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。这个线程池的最大线程数能达到整数的最大值
- newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。
- newScheduledThreadPool 创建一个定长线程池，支持定时及周期性任务执行。同样 线程最大数也是整数最大值
- newSingleThreadExecutor 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行
- newWorkSealingPool jdk8引入 使用多个队列来减少竞争
这个线程工厂大部分都使用了无界队列 如果瞬间请求量大 很有可能造成oom
队列在线程池中起的作用：
请求数大于 coreSize 时，可以让任务在队列中排队，让线程池中的线程慢慢的消费请求，当线程消费完所有的线程后，会阻塞的从队列中拿数据，通过队列阻塞的功能，使线程不消亡
#### 原理
```mermaid
graph LR
    提交任务 --> A{是否超过核心线程数}
    A --> |N| 创建线程执行当前任务
    A --> |Y| B{阻塞队列是否已满}
    B --> |N| 将任务存储在队列中
    B --> |Y| C{是否超过最大线程数}
    C --> |N| 创建线程执行任务
    C --> |Y| 执行拒绝策略
```
新建的线程会变成一个叫 worker 的角色，这个 worker 会通过一个 while 循环，不断地从阻塞队列中取数据并执行，如果没任务了并且线程池没设置让线程一直存活的话，这个 生命周期就会结束
- 运行状态图
```mermaid
stateDiagram-v2
    RUNNING --> SHUTDOWN: shutdown()
    SHUTDOWN --> STOP: shutdownNow()
    RUNNING --> STOP: shutdownNow()
    STOP --> TIDYING: 队列为空
    SHUTDOWN --> TIDYING: 队列为空
    TIDYING --> TERMINATED: terminated