rer information during an AppCache process. Accordingly,
browser vendors choose different policies: Firefox and Internet
Explorer record the URL of an HTML document that declares
an AppCache manifest in a Referrer request-header ﬁeld
whereas Chrome, Opera, and Safari specify no referrer infor-
mation in an HTTP request. The lack of referrer information
implies that target web applications cannot recognize who
forces a victim web browser to investigate themselves.
IV. URL STATUS IDENTIFICATION ATTACK
In this section, we illustrate an AppCache-based URL sta-
tus identiﬁcation attack that does not rely on timing. This attack
is possible due to a standard behavior of AppCache: to avoid
content inconsistency and security problems, AppCache should
fail when any URL listed in a manifest is non-cacheable.
By using this attack, an attacker can correctly determine the
status of target URLs because this attack does not rely on
unreliable timing information. We demonstrate both script-
based and scriptless attacks.
A. Attack Manifest
An AppCache manifest written in PHP (example in List-
ing 3) can be used to perform a URL status identiﬁca-
tion attack. The example only speciﬁes a single target URL
(https://target.net) that attackers want to identify.
5
server probing mainly depended on whether target URLs
were unreachable. Table II shows measured AppCache timeout
values of a single unreachable URL that consisted of a literal IP
address, instead of a domain name, belonging to our campus,
with various platforms. OS X had the greatest timeout value
and Ubuntu had the smallest timeout value. Chrome, Firefox,
and Opera had almost the same timeout values in the same
platforms, but Internet Explorer had a different timeout value.
Fig. 6 shows the execution time of concurrent internal web
server probing using Chrome. The number of targets URLs
was 50, consisting of 0 to 50 unreachable URLs and 50 to
0 reachable URLs. All URLs belonged to our campus. The
timeout value of OS X was greater than those of Ubuntu and
Windows, so that the execution time of internal web server
probing was longest when a victim web browser’s platform
was OS X. We also identiﬁed that the number of unreachable
URLs did not affect the overall execution time because Chrome
concurrently opened multiple sockets for AppCache.
Unlike other web browsers, Firefox was secure against the
internal web server probing due to its sequential AppCache
handling. For example,
took 7648 s and 2100 s when
we performed URL identiﬁcation attacks on 100 unreachable
URLs by using Firefox in OS X and Windows, respectively.
Since most victim users will not spend such a long time in an
attack web page, we conclude that Firefox is secure against
our attack when its platform is OS X or Windows.
it
VI. COUNTERMEASURES
In this section, we present our countermeasures to mitigate
the proposed attacks. We ﬁrst depict some na¨ıve countermea-
sures with shortcomings and suggest our solution.
A. Problematic Countermeasures
We present some countermeasures that partially prevent our
attacks or that prevent our attacks but lead to other problems.
First, we can revise AppCache to ask user permissions to allow
web applications to cache resources as Firefox does. This
countermeasure prevents our attacks only if a user correctly
judges whether a web application is malicious.
Second, we can revise AppCache to not check the changes
in a manifest during download or update procedures as Safari
does. This countermeasure, however, results in an AppCache
inconsistency problem. Further, it cannot prevent a URL status
identiﬁcation attack if an attacker refreshes an attack page to
re-conﬁrm an AppCache procedure.
Third, we can revise AppCache to check the manifest even
when some resources are non-cacheable. This countermeasure
prevents a scriptless URL status identiﬁcation attack only when
an attacker does not refresh an attack page.
Fourth, we can attach a no-store directive to HTTP re-
sponses from web applications. This countermeasure prevents
all our attacks, but makes AppCache meaningless because web
browsers no longer cache resources.
Lastly, we can modify vulnerable web pages that condition-
ally redirect web browsers to login pages or that return error
codes according to a login status. For example, we can use a
login pop-up window instead of redirections and a custom error
page with 200 OK instead of an error code. This countermea-
sure prevents a URL status identiﬁcation attack, but ﬁnding and
modifying all vulnerable web pages are sophisticated tasks.
B. Restricting Cross-origin AppCache
We aim to restrict arbitrary cross-origin AppCache to pro-
tect browser and URL status from the URL status identiﬁcation
attack. One possible solution is to apply the Origin request-
header ﬁeld of cross-origin resource sharing (CORS) [32]
to AppCache procedures, although this approach can violate
the principle of least privilege. The Origin header ﬁeld
allows a web application to identify which web applications
initiate cross-origin requests so that the web application can
deny requests from unknown or blacklisted web applications.
However, the Origin header ﬁeld further asks a permission
to allow client-side scripts to access the requested resource,
which is unnecessary for AppCache. Therefore, we require
another method that only asks a web application whether it
allows resource caching.
the origin of an AppCache manifest;
We suggest a new HTTP request-header ﬁeld that con-
tains
this ﬁeld,
Cache-Origin, resembles the Origin header ﬁeld of
CORS. The Cache-Origin header ﬁeld only asks web
applications whether they permit caching of their resources,
unlike the Origin header ﬁeld which requests access per-
missions to their resources. A web browser must attach the
Cache-Origin header ﬁeld to its HTTP requests during
AppCache procedures.
By using the Cache-Origin header ﬁeld, a web appli-
cation can identify other web applications that request to cache
its resources. When the web application doubts the requesters
or caching the requested resources can reveal sensitive infor-
mation (e.g., access-controlled resources), the web application
either assigns a no-store directive to its response header
or returns an error code to abort an AppCache procedure.
Attackers can no longer identify browser and URL status
because their AppCache procedures always fail. Even if some
attackers bypass the Cache-Origin check,
they cannot
identify a browser status when the target web application
disallows web browsers to cache sensitive resources.
We modiﬁed a build of Chromium (35.0.1856.0) to in-
troduce a Cache-Origin request-header ﬁeld during Ap-
pCache procedures (Listings 6). Adding three lines of code
was enough to enable this countermeasure with negligible
performance overhead.
The Cache-Origin request-header ﬁeld is a minor re-
vision of the Origin request-header ﬁeld, so we believe that
adopting Cache-Origin is not a big deal of the web stan-
dard. Otherwise, using Origin during AppCache procedures
is at least desired to prevent our attack.
VII. RELATED WORK
In this section, we introduce two AppCache attacks that
manipulate DNS information: AppCache poisoning [25] and
AppCache-based DNS rebinding [22]. AppCache poisoning
attempts to store fake login pages in AppCache to steal login
credentials. When a victim web browser visits some web pages
via an attacker’s network (e.g., a rogue AP),
the attacker
9
1 /* src/webkit/browser/appcache/
appcache_update_job.cc */
2 void AppCacheUpdateJob::URLFetcher::Start() {
3
request_->set_first_party_for_cookies(job_
->manifest_url_);
request_->SetLoadFlags(request_->load_flags
() | net::LOAD_DISABLE_INTERCEPT);
if (existing_response_headers_.get())
AddConditionalHeaders(
existing_response_headers_.get());
/* Set a Cache-Origin header field */
net::HttpRequestHeaders headers;
headers.SetHeader("Cache-Origin", job_->
manifest_url_.GetOrigin().spec());
request_->SetExtraRequestHeaders(headers);
request_->Start();
4
5
6
7
8
9
10
11
12
13
14 }
Listing 6. Modiﬁed Chromium code to attach a Cache-Origin request-header
ﬁeld during AppCache procedures.
injects hidden iframe tags that point to target login pages
in responses. The victim web browser then sends requests
to the target login pages. The attacker intercepts the requests
and responds with fake login pages that look the same as the
original login pages while declaring an AppCache manifest and
including backdoors. Later, even when the victim web browser
visits the target login pages via a secured network, it will load
the fake login pages from AppCache. To mitigate this attack,
we need to use private browsing modes [1] in an insecure
network, and use HTTP strict transport security (HSTS) [15]
or HTTPS Everywhere [8] to secure login pages.
AppCache-based DNS rebinding is a modiﬁcation of the
original DNS rebinding attack [18], which attempts to violate
SOP by changing domain-to-IP mapping with a short-lived
DNS entry. In the original form, when a victim web browser
visits an attacker’s web site, the attacker delivers some ma-
licious scripts to the victim web browser while associating
the domain name of the web site with a target IP address.
Subsequently, the malicious scripts can send arbitrary same-
origin requests to the target IP address because they have
the same domain name. To mitigate this attack, modern web
browsers maintain domain-to-IP mapping for a while (DNS
pinning). However, the two characteristics of AppCache allow
attackers to write a malicious script executed after domain-to-
IP mapping changes [22]: (1) allowing web sites to persistently
cache arbitrary resources in web browsers and (2) supporting
a JavaScript API to recognize whether a script comes from
a local cache or a server. To eradicate the attack, Johns et
al. [22] suggest an X-Server-Origin response-header ﬁeld
that lists server-provided origin information.
VIII. CONCLUSION
This paper introduced a new web privacy attack that
indirectly identiﬁed the status of cross-origin URLs by using
HTML5 AppCache without client-side scripts nor plug-ins. We
conﬁrmed that all major web browsers which supported Ap-
pCache were vulnerable to our attacks. We also suggested an
effective countermeasure: a Cache-Origin request-header
ﬁeld. The countermeasure successfully mitigated our attacks.
ACKNOWLEDGMENT
We would like to thank the anonymous reviewers for
their invaluable comments and suggestions. This work was
supported by ICT R&D program of MSIP/IITP. [14-824-09-
013, Resilient Cyber-Physical Systems Research]
REFERENCES
[1] G. Aggarwal, E. Bursztein, C. Jackson, and D. Boneh, “An analysis
of private browsing modes in modern browsers,” in USENIX Security
Symposium, 2010.
[2] D. Akhawe, A. Barth, P. E. Lam, J. Mitchell, and D. Song, “Towards a
formal foundation of web security,” in Computer Security Foundations
Symposium (CSF), 2010.
addresses,”
[3] AnswersThatWork, “List of default router passwords and default router
http://www.answersthatwork.com/Download Area/
IP
ATW Library/Networking/Network 4-Admin List of default
Router Passwords and IP addresses Netgear D-Link Belkin
Linksys Others.pdf, 2013.
[4] A. Barth, C. Jackson, and J. C. Mitchell, “Robust defenses for cross-site
request forgery,” in ACM Conference on Computer and Communications
Security (CCS), 2008.
[5] A. Bortz, D. Boneh, and P. Nandy, “Exposing private information by
timing web applications,” in International World Wide Web Conference
(WWW), 2007.
[6] K. Brewster,
“Patching privacy leaks,” http://kentbrewster.com/
patching-privacy-leaks/, 2008.
[7] R. Dingledine, N. Mathewson, and P. Syverson, “Tor: The second-
generation onion router,” in USENIX Security Symposium, 2004.
[8] Eletronic Frontier Foundation, “HTTPS Everywhere,” https://www.eff.
org/https-everywhere.
[9] E. W. Felten and M. A. Schneider, “Timing attacks on web privacy,” in
ACM Conference on Computer and Communications Security (CCS),
2000.
[10] N. Garcia, “Javascript port scanner,” http://jsscan.sourceforge.net/.
[11]
J. Grossman and T. Niedzialkowski, “Hacking intranet websites from
the outside: JavaScript malware just got a lot more dangerous,” in
Blackhat USA, 2006.
[12] M. Heiderich, M. Niemietz, F. Schuster, T. Holz, and J. Schwenk,
“Scriptless attacks – stealing the pie without touching the sill,” in ACM
Conference on Computer and Communications Security (CCS), 2012.
I. Hickson, “5.6 ofﬂine web applications – HTML5,” http://www.w3.
org/TR/2011/WD-html5-20110525/ofﬂine.html, 2011.
[13]
[14] ——, “6.7 ofﬂine web applications – HTML standard,” http://www.
whatwg.org/specs/web-apps/current-work/multipage/ofﬂine.html, 2013.
J. Hodges, C. Jackson, and A. Barth, “HTTP strict transport security
(HSTS),” Internet Requests for Comments, RFC 6797, 2012. [Online].
Available: http://www.rfc-editor.org/rfc/rfc6797.txt
[15]
[16] L.-S. Huang, A. Moshchuk, H. J. Wang, S. Schechter, and C. Jackson,
“Clickjacking: Attacks and defenses,” in USENIX Security Symposium,
2012.
[17] L.-S. Huang, Z. Weinberg, C. Evans, and C. Jackson, “Protecting
browsers from cross-origin CSS attacks,” in ACM Conference on
Computer and Communications Security (CCS), 2010.
[18] C. Jackson, A. Barth, A. Bortz, W. Shao, and D. Boneh, “Protecting
browsers from DNS rebinding attacks,” in ACM Conference on Com-
puter and Communications Security (CCS), 2007.
[19] C. Jackson, A. Bortz, D. Boneh, and J. C. Mitchell, “Protecting browser
state from web privacy attacks,” in International World Wide Web
Conference (WWW), 2006.
[20] M. Jakobsson and S. Stamm, “Invasive browser snifﬁng and counter-
measures,” in International World Wide Web Conference (WWW), 2006.
[21] Y. Jia, X. Dong, Z. Liang, and P. Saxena, “I know where you’ve been:
Geo-inference attacks via the browser cache,” in Web 2.0 Security &
Privacy (W2SP), 2014.
[22] M. Johns, S. Lekies, and B. Stock, “Eradicating DNS rebinding with the
extended same-origin policy,” in USENIX Security Symposium, 2013.
10