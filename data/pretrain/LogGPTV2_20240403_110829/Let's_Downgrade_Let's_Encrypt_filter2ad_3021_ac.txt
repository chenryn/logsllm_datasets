17,864
22.76%
Table 2: Dataset of domains.
3.2 Elimination via Fragmentation
IP fragmentation allows routers to adjust packets to the maximum
size that the networks support. Packets that exceed the maximum
transmission unit (MTU) are fragmented into smaller fragments
by the source or by the routers enroute. The receiver reassembles
the fragments back into the original IP packets. To identify the
fragments that belong to the same IP packet the receiver uses a 16
bit IP identifier (IP ID) in the IP header of the fragments.
Session 5B: PKI and Access Control CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1425Figure 2: Nameserver elimination via (a) fragmentation, (b) rate-limiting, (c) low-rate bursts.
3.2.1 Attack methodology. The idea is to create fragments-misassembly:
the attacker injects a spoofed fragment which the IP layer at the VA
reassembles with a genuine fragment, sent by the nameserver. The
attacker ensures that the resulting IP packet is invalid and hence is
discarded by the VA. This can be done by violating the resulting
length or the transport-layer checksum. The genuine second frag-
ment from the nameserver does not have a matching first fragment,
and hence is discarded after a timeout of 30 seconds. This causes
the pending query to timeout, and is perceived by the DNS software
on the VA as a loss event.
Elimination via fragmentation is illustrated in Figure 2 (a). In
step A○ we send a fragment to the VA, from a spoofed IP address
of the nameserver. This fragment can be even one byte long. We
set the offset of this fragment so that it fits as a second fragment
in the sequence of fragments sent by the nameserver. In step B○
this fragment is stored in IP defragmentation cache and stays there
for 30 seconds (the default value supported by popular operating
systems, such as Linux, FreeBSD and Windows). In step C○ we send
a request for a certificate for the target domain. This causes the VA
to initiate DNS lookup requests in step D○. For simplicity assume
that the nameserver returns a response in two fragments, in step
E○. In step F○ the first genuine fragment enters the IP defragmen-
tation cache and is reassembled with the second fragment from
the adversary that was waiting in the IP defragmentation cache.
For both fragments to be reassembled the spoofed fragment needs
to contain the correct IP ID value. The transport-layer processing
and checks on the reassembled packet. Since our spoofed second
fragment has a different payload than the genuine second fragment,
it alters the transport-layer checksum of the packet, which results
in an invalid value. The packet is discarded in step G○. In step H○
the second genuine fragment enters the cache; after 30 seconds it
is evicted if no matching first fragment arrives. In step I○ timeout
is triggered and a loss is registered. The query is resent.
Servers that fragment responses. To cause the nameservers
to send fragmented responses we use an ICMP fragmentation
needed packet (type: 3, code: 4) indicating that the path to the
DNS resolver has a smaller MTU. The nameserver then fragments
the response according to the MTU in the ICMP error message
and returns it in smaller fragments. Using ICMP error messages
with UDP header and ICMP echo reply, we identified that 3% of the
domains in our dataset can be forced to fragment responses.
Servers with predictable IP ID. We find 13% of the name-
servers with predictable IP ID allocation. For these nameservers
the attacker can predict the value of IP ID that the nameservers
Figure 3: Nameservers per domain vulnerable to frag.
assign to the responses, and use it in the spoofed fragments. We
explain how we match the IP ID in the spoofed fragment and how
we measured IP ID assignment algorithms in servers in Appendix,
Section E.
3.2.2 Measurements. We find that 1.88% of Let’s Encrypt-certified
domains, and 4.39% of 857K-top Alexa domains fragment responses;
the results are plotted in Figure 3. The x axis plots the fraction
of nameservers per domain that are vulnerable to elimination via
fragmentation.
3.3 Elimination via Rate Limiting
Nameservers enforce rate limiting on queries to reduce load and
to make it not attractive to abuse them in reflection attacks: after
inbound queries7 exceed a predefined threshold the nameserver
starts dropping packets.
Attack methodology. We devise a methodology that uses ‘rate limit-
ing nameservers’ to cause the nameserver to filter requests from the
victim DNS resolver. The victim DNS resolver perceives the lack of
responses as an indication of poor performance of the nameserver
and avoids querying it. Elimination via rate limiting is illustrated
in Figure 2 (b). The attacker sends multiple requests to the target
nameserver using a spoofed IP address of the victim resolver in
step A○. The nameserver starts filtering the requests from the DNS
resolver. In step B○ the attacker requests a certificate of the tar-
get domain. In step C○ the DNS resolver sends DNS query to the
nameserver.
7Nameservers can apply rate limiting per IP address or overall independent of the IP
address.
0%20%40%60%80%100%Ratio of Vulnerable Nameservers70.0%80.0%90.0%100.0%CDFLet's EncryptAlexa Top-1MAllSession 5B: PKI and Access Control CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1426857K-Alexa domains, are vulnerable to elimination via rate limiting
attack. We plot the results for our dataset of domains in Figure 5.
3.4 Elimination via Low Rate Bursts
If the packets arrive at the router faster than they can be transmitted,
they are buffered. Routers are configured for best-effort packet
forwarding and typically the packets are processed using first come
first served model. A packet loss in networks occurs due to queuing
of packets in routers and overflowing routers’ buffers.
3.4.1 Attack methodology. The idea is to cause packet loss on a
router that connects the nameserver to the Internet, slightly before
the arrival of the DNS request at the nameserver. We create loss by
sending low-rate bursts to the router that connects the nameserver
to the Internet. Targeting the router allows that attacker to avoid
detection. To identify the target router the attacker runs traceroute
to the nameservers. Nameserver elimination via low rate bursts
is illustrated in Figure 2 (c). After requesting a certificate for the
victim domain, step A○, the attacker sends a burst of packets to
the target router at the estimated time that the request from the
DNS resolver is sent to the nameserver in step B○ and C○. The burst
causes the request to be discarded.
Synchronising the bursts with the queries. A crucial aspect of
3.4.2
the accuracy of this methodology is to compute the exact time point
when the burst should be sent. We measure the latencies between
the attacker and the VA (Δ𝐴−𝑉 𝐴) by pinging the services of Let’s
Encrypt, and the attacker and the target nameserver (Δ𝐴−𝑁 𝑆) by
querying the nameserver. We need to infer the processing delays
at Let’s Encrypt.
Inferring processing delay at Let’s Encrypt. The time be-
tween the submission of the request with Certbot and the time
when the queries from the VAs arrive to the nameserver of the at-
tacker is: Δ𝐴−𝑉 𝐴−𝑁 𝑆𝐴. Since this is the nameserver of the attacker, it
holds: Δ𝐴−𝑉 𝐴 == Δ𝑉 𝐴−𝑁 𝑆𝐴. Since the attacker knows Δ𝐴−𝑉 𝐴 and
Δ𝑉 𝐴−𝑁 𝑆𝐴, the attacker can estimate the processing delays incurred
at Let’s Encrypt: 𝑡𝑑𝑒𝑙𝑎𝑦 = Δ𝐴−𝑉 𝐴−𝑁 𝑆𝐴 − Δ𝐴−𝑉 𝐴 − Δ𝑉 𝐴−𝑁 𝑆𝐴 = 𝜖.
When to send the burst. Next, the attacker measures the la-
tency to the nameserver in a target domain 2Δ𝐴−𝑉 𝐴−𝑁 𝑆. The time
at which the attacker needs to send the burst is: Δ𝐴−𝑉 𝐴−𝑁 𝑆 =
2·Δ𝐴−𝑉 𝐴−𝑁 𝑆−𝜖
= Δ𝐴−𝑉 𝐴−𝑁 𝑆 − 𝜖, which the attacker can compute
since it knows 𝜖 and 2 · Δ𝐴−𝑉 𝐴−𝑁 𝑆.
Let 𝑥 = Δ𝐴−𝑉 𝐴−𝑁 𝑆 − Δ𝐴−𝑁 𝑆. If 𝑥  0 attacker sends the
burst 𝑥ms at Δ𝐴−𝑉 𝐴−𝑁 𝑆 − 𝑥.
3.4.3 Measuring burst size. The burst size is a function of the buffer
size on the router as well as communication from other sources
that traverses the router. Since we carry out ethical experiments we
do not send bursts to the routers in the Internet. Our evaluation is
performed in a controlled environment on a platform that we set up,
using default buffer sizes on popular routers. These measurements
provide a worst-case analysis. In practice the other communication
that goes through the router will keep the buffer on the router also
occupied, which means that even a smaller burst can achieve a
similar effect.
2
Figure 4: Nameservers per domain vulnerable to frag or rate-
limiting.
The nameserver filters that request in step D○. After a timeout is
reached, the loss event is registered in step E○, and the resolver re-
transmits the query. After three consecutive losses, the nameserver
is blocked for 15 minutes and will not be queried.
We conduct a study of the nameservers in Alexa domains that
limit the rate at which the clients can send DNS requests. We explain
our measurement methodology and then report the results.
Figure 5: Nameservers per domain vulnerable to rate-limiting.
3.3.1 Measurement of rate limiting. To identify servers that apply
rate limiting we use the same setup as described in [46] and perform
a similar experiment. Since response rate limiting (RRL) is applied
per query per /24 block we capture all the nameservers that start
filtering traffic from the victim IP address. In our experiment we
send requests with the same query for an A record in the domain of
the nameserver concatenated with a non-existent subdomain. Using
the same query name reduces the processing overhead imposed on
the nameserver and does not cause the nameserver to block other
clients sending queries to that domain. We send to each nameserver
4K queries distributed over a time period of a second. We use 4K
packet per second (pps), which is roughly 2.5Mbps, to reduce the
imposed load on the servers. Recent measurements of traffic rate to
servers show that 4K pps is an ethical traffic rate that does not affect
the operation of nameservers [46]. We use the overall packet loss
as an indicator for rate limit, setting the threshold at 66%, which
suffices to cause the nameserver to filter queries from a victim
resolver.
We find that the rate limit is typically reached within a second
and is enforced in the following 15 seconds. Even with this modest
rate of 4K pps, we find that more than 24% of the nameservers
in TLDs (Top Level Domains), as well as 23% of the nameservers
in Let’s Encrypt-certified domains and 17% of the nameservers in
0%20%40%60%80%100%Ratio of Vulnerable Nameservers70.0%80.0%90.0%100.0%CDFRate LimitingFragmentationVulnerable0%20%40%60%80%100%Ratio of Vulnerable Nameservers70.0%80.0%90.0%100.0%CDFLet's EncryptAlexa Top-1MAllSession 5B: PKI and Access Control CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1427We compare the effectiveness of bursts when sent from one host,
from two hosts and from three hosts. We also evaluate the impact
of packet sizes on the loss rate.
Setup. Our setup is illustrated in Figure 6. For our experiment
we set up a platform, with five end hosts, each on a different net-
work, connected to the Internet via a router. One host is a DNS
resolver that sends DNS requests, the other is a DNS nameserver.
The three remaining hosts are used to generate traffic bursts. We set
up a router which connects all the clients and servers. This router
simulates the Internet and is connected with 100Gbps links, all the
other devices are connected through 10Gbps output links. Since
the transmission rates on the router, that simulates the Internet,
are ten times higher than the transmission rates on the routers
that connect the end devices (i.e., 100Gbps vs 10Gbps), it will not
experience packet loss. This ensures that the only packet loss can
occur on the routers that connect the end hosts to the Internet.
All the routers are configured to add latency to every packet on
outbound interface. The latency is selected at random in the range
between 30ms and 50ms. This results in an RTT (round trip time)
between 60ms and 100ms; similar to the typical RTT in the Internet.
To add latency we use NetEm tc qdisc.
Figure 6: Simulated evaluation setup.
Experiments. We measure the optimal burst size that causes the
arriving packets to be discarded. We also aim to infer the maximal
sequence of packets that will be discarded after a given burst. What
burst size and characteristics will result in the largest sequence
of packets to be discarded. Our evaluations are performed using
different buffer sizes, listed in Table 3. The timing of the attack
bursts are illustrated in Figure 7.
Figure 7: RTO timeline with low-rate bursts.
We test sending the burst from one vs two vs three hosts. Ad-
ditionally, we create bursts using packets of: (1) identical size of
500 bytes, (2) randomly selected sizes between 68 and 1500 bytes,
and (3) packets of two sizes 68 or 1500 bytes, both sizes are selected
with equal probability.
The DNS resolver is sending a set of queries to the nameserver
and the nameserver responds. To generate traffic bursts from the
attacking hosts we use iperf3. During the experiment the three
attacker hosts synchronise and send a burst of packets to the name-
server. The loss rate depends on the buffer sizes that are on the
routers as well as the additional traffic from other sources. Since
in our experiment there is no additional traffic from other clients,
our evaluation provides a lower bound. In practice in the Internet
the burst would be much more effective due to traffic from other
sources which also traverses the router.
Our experiment showed that the higher the latency variance is
between the packets, the more overhead the burst introduces on the
processing, resulting in higher loss ratio. We also find that (3) re-
sulted in the largest sequence of packets dropped one after another,
it is 7 times as large as the sequence of packets lost in experiments
with bursts (1) and (2). Furthermore, bursts from multiple clients
result in a packet loss more effectively. In fact our evaluations show
that the load on the system and the period of time during which
additionally arriving packets will be dropped is proportional to the
number of attacking hosts that send the burst. Namely, the same
burst volume split among multiple end hosts is more effective than
when sent from a single client. This is due to the fact that when
sent concurrently from different sources the inter-packet delay in a
burst is reduced.
Routers
Brocade MLXe
Cisco Nexus 3064X
Juniper EX4600
Cisco 6704
Buffer sizes
1MB
9MB
12MB
16MB
Burst size
>1550 packets
>104 packets
>15 · 103 packets
18 · 103 packets
Loss rate
100%
100%
92%
89%
Table 3: Burst evaluation on popular routers.
Our results are listed in Table 3. For effective packet loss the
bursts can be even smaller in volume than the buffer size - packets
are nevertheless discarded.
Buffer sizes. Typically routers with large buffers are used in the
core of the Internet where cross traffic can cause large queues, but
routers that connect networks to the Internet have smaller buffers,
sufficient for a 10 Gbps traffic rates. The reason for avoiding large
buffers is ‘bufferbloat’ which is too high latency that results due
to network devices buffering too much data, leading to link under-
utilisation. Typical buffer sizes is megabytes of buffer per 10Gbps
port and for 10Gbps links, 10Mb of buffers, [11]. In our experiment
we evaluate bursts on popular routers with default buffers’ sizes
that are set by the vendors, these of course can be resized to smaller
sizes by the operators. Our set of routers covers typical routers that
connect networks to the Internet as well as large routers at the
Internet core.
3.5 Applicability of Frag. & Rate-Limit
We find that 22.76% of the domains in our dataset are vulnerable
to either fragmentation or rate-limiting nameserver-elimination
methodologies, see Table 2. We also find that in 15% of the domains
more than 50% of the nameservers enforce rate limiting or return
fragmented responses, and hence are vulnerable to either elimina-
tion via rate limiting or via IP defragmentation cache poisoning;
the results are plotted in Figure 4.
3.6 No False Positives, Some False Negatives
Our automated evaluation provides a lower bound on the number of
vulnerable domains since it may miss out potentially vulnerable do-
mains. This introduces false negatives, namely, domains which are