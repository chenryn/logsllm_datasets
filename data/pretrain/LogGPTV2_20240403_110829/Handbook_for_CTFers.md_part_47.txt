0x40a130
14
0x40a147
15
0x40a14c
0x40a163
16
0x40al7f
0x40a168
17
18
0x40a184
20
19
0x40a19b
0x40ala0
21
0x40a1b7
0x40a1bc
def
Fcolor_block(ea, coloregx5sff7f):
p =1daapl.nods_info_t()
if is_colored[o]:
bb_id = bb.1d
lse!
return Faise
print(so_id, hex(bb.startEA))
is_colored[bb] = True
Ldaapi.refrest_idavieu_anyway()
Idaapi.set_node_info(fun_base, bb_id, P, 1daapd.NIF_BG_COLOR I 1daapd.NIF_FRAME_COLOR)
retunn True
Fig, 5.127 The core code for coloring the basic blocks
Due to space limitations, this section only describes how to use Pin to record
instruction execution, and does not go into a more specific analysis of the Wailing
Wall algorithm.
5.7.3.6  CTF Practice: Recording Instruction Execution Information
and Modifying Memory
In CTF, some virtual machine reverse challenges specifically implement the cmp
instruction to complete the data comparison. In this case, you can consider using Pin
to instrument such instructions and trace the comparison to guess the intermal
algorithm of the reversed program.
---
## Page 430
416
5  Reverse Engineering
Fig, 5.128 Control flow graph
This section takes the task_huwang-refinal-1 of China IISC 2018 as an example.
Dragging the program into IDA and roughly analyzing it reveals that the challenge
maker has implemented a virtual machine, and it is not difficult to find the instruction
jump table for the virtual machine, see Fig. 5.129.
sub_401400 implements a comparison instruction (see Fig. 5.130), the compar-
ison results are stored in v1[5], and the corresponding assembly is shown in
Fig. 5.131.
Consider
the
use
of
instruction-level
instrumentation
INS_AddInstrumentFunction for the cmp instruction at address 0x401412 to trace
the values of eax and esi, see Fig. 5.132.
translateIP converts the current instruction address to the address of the instruc-
tion in IDA, and IARG_REG_VALUE can specify the register passed to the
function to be instrumented.
After writing, test the program with instrumentation.
Note: The length of the input is 48 and is composed of uppercase letters and
numbers, the source of the condition needs to be analyzed by the reader.
First, assume that the flag is
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABC
---
## Page 431
5.7 Modern Reverse Engineering Techniques
417
1C7
1C8
ddoffset ??_R4REee6n@
align 4
:const RE::vftable'
;const RE::RTTI Conplete Object |
??_7RE866Be
ddoffset sub_4e1eA0
dd offset sub_401000
：DATA XREF:Sub_4816A8+451o
104
10e
ddoffset sub_401180
108
10C
dd offset sub_41050
dd offset sub_4e1190
dd offset sub_4e1270
1E8
1E4
dd offset sub_4e11ce
1EC
1F8
dd offset sub_4e1290
dd offset sub_4e12ce
1F8
2.F4
dd offset sub_4e11Fe
1FC
dd offset sub_401220
200
dd offset sub_4812F0
dd offset sub_481370
204
288
dd offset sub_48131e
dd offset sub_4e1390
2ec
0ssteqns sasyo pp
210
214
dd offset sub_481460
Fig, 5.129 Instruction jump table
($Tu3. 0sonc")0tesns tre>sTua avT p*u8Tsur
24
int v2;//esi
TP// T80MO
unsigned int v3; // esi
unsigned Int result; // eax
unsignedintv4;//esi
v1 = this;
if((*(int
v2=（*（int
（）（（+）（（)（)
12
TT
vi[5]0;
(ZA （tA)（（++TA）（（.GOMo）（tTe>sTua）
13
f（（int
（）（（+）（（）（a
14
15
v1[5]=-1;
（A>（tA）（（++TA）（（-GOMO）（.tTsTU
16
v4（*（int
f（tA（（+）（（-gn）（es）u））ns
17
18
19
if(result > v4 )
=+[6]T
23
at
vi[s]-1;
22
Fig, 5.130 sub_401400 code
Then use the Pintool to trace the execution information (Fig. 5.133). The contents
of the log file are shown in Fig. 5.134.
The last comparison is between Oxcbaaaaaa and Oxebbaa84d. Since Oxcbaaaa is
exactly the last 8 bytes of the input flag, it is assumed that 0xebbaa84d is the last
8 bytes of the real flag.
---
## Page 432
418
5 Reverse Engineering
sub_401400
Proe
Push
near
DATA XREF: -rdata:e040322410
text:00401401
Pesh
esi
edi
text:
00481404
tev
eax, [edl]
edl,
eCX
text:
cal1
text:
mr
edx,[edi]
dword
ptr[eax*och]
text:
mOv
ecK,
esi,e
edi
text:
t电xt：
00481412
0140F
00481414
eax,esi
text:
text:
:00481416
mOV
dword ptr [edi+14n], 0
shortios
401410
text:ee48141D
text:
00481410
10c_401410:
B0V
eax,[edi]
: CODE XREF: sub_48148+141j
ext
txt：0949141F
0040141D
text:
00481421
ecx, edi
text:00481424
BOV
dword ptr [eax+ech]
text:00481426
mov
edx,[edi]
text:00481428
ecx,edi
text:0040142A
esi,eax
text:ee48142D
eax, esi
tuord gtr.
[edx+4]
text:ee48142F
jeb
dword pt [eei1n], orrrrh
short loc_401438
BOV
text:00491438
1oc_401438:
eax, [edi]
:COPE XREF: sub_4e14e0+2F1j
text:0040143A
moV
ecK,_ed
Fig, 5.131 sub_401400 assembly code
VSd 1ogCMP（ADORINT BX, A0ORINT es5）(
char tnp[1024];
snprintf(tmp, sizeof(tmp),“cnp %p, %p”， eax, esi);
*eut cc emp cc end;
vod InsTrace(INs Ins, voso *v) (
If (translateIP(INS_Address(Ins)) *= 0x4e1412) (
IKS_InertCa11(ins,ZPO2NT_AFTER,(AFUPTR)1ogOP,
LARG_REG_VALUE, REG_ESI,
LARG_REG_VALUE,REG_EAX,
LARG_DND);
Fig, 5.132 Instrumentation code
aaatatk_
refinal-1.exehac
p>pin32-tVHyPinToo1.d11-010g.1og-b0x
Fig, 5.133 Run pin32 to trace the execution information
---
## Page 433
5.7 Moderm Reverse Engineering Techniques
419
Fig, 5.134 The result of the
Pintool
1og.1og
277
cmp 0x42,0x0
279
cnp
0x42,
0x30
0x46
cnp
0x42,
280
cnp
0x42,
0x39
0x39
282
281
cnp
0x41,
283
cnp
0x43,
0x0,
0x0
cp
0x0
284
cnp
0x43,
0x46
286
285
cmp
0x43,
0x30
cnp
0x43,
0x39
287
cp
0x41,
0x39
882
cnp
0x13,
0x0,
0x0
682
Oxa
290
291
cnp
0x11,
0x12,
Oxa
0x11,
Oxa
292
293
cnp
0x11,
Oxa
Oxa
cap
cnp
0x11,
295
0x11,
Oxa
296
cnp.
cnp
0x11,0xa
Oxa
Cp
Oxcbaaaaaa,
Oxebbaa84d
86
Jength: 4,315Iines : 298
Ln:291Col:12 Sel:010
Change the input to
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD4 BAABBE
The resulting log file is shown in Fig. 5.135.
Do a few more tests and you can almost be sure that the end is a comparison with
the real flag.
daps s apeuone ueo am ud Susn snq °f(penueu Beg op Adde, mou ue3 2M
If you look closely at sub_401400, you will see that V1[5] = 0 when the
comparisons are equal. Consider modifying the comparisons with Pin to automati-
cally set out all flags.
Observe the second half of sub_401400 (see Fig. 5.136), which will execute to
0x401457 regardless of how it is executed, so insert a stub at this location and
change v1[5] to 0 when comparing flags to automate the recording of flags.
See Fig. 5.137 for detailed implementation.
When you observe the log when you compare the flags, the esi is greater than
Oxff, and you store the compared flags into the global variable flag, then insert the
function editResult before the 0x401457 instruction is executed. The edi register
needs to be passed to the function since the address of v1 is stored in the edi register.
The specific implementation of editResult is shown in Fig. 5.138.
As our Pintool runs in the same address space as the program, if you need to
1usaop ud nq *Xdous qononn Kpoanp 1 op ueo no rouau o Kpo
recommend it, we recommend using the safer function PIN_SafeCopy, which
---
## Page 434
420
5Reverse Engineering
Fig, 5.135 The result of
289
cmp0x12,
0xa
Pintool
290
cmp 0x11,
cmp0x11，0xa
0xa
291
cp
8x0
cmp 0x4,
Oxa
293
ex0x0d
0xa
294
295
cmp
0xebbaa84d,0xebbaa84d
296
cmp 0x11,
0x11,
0xa
297
cmp
0xa
298