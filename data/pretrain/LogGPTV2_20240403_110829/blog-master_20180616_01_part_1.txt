## PostgreSQL 开启“审计日志、时间记录”带来的性能影响有多少？       
### 作者                                                               
digoal                                                               
### 日期                                                               
2018-06-16                                                             
### 标签                                                               
PostgreSQL , 审计日志 , duration , 性能影响 , syslogger , BUFFER , log_statement , log_duration , track_io_timing , osq_lock             
----                                                               
## 背景         
开启审计日志，或者开启数据库的SQL耗时记录，会给数据库带来多大的性能开销？      
1、审计日志通过log_statement设置，可以设置为all, ddl, mod, none，分别表示审计所有SQL，DDL SQL，DML SQL，不审计。      
开启审计时，在执行SQL的时候（提交SQL请求时），数据库日志中打印类似这样的信息：      
```      
2018-06-16 14:48:23.760 CST,"postgres","postgres",19448,"[local]",5b24b270.4bf8,8,"idle",2018-06-16 14:47:12 CST,3/1484181,0,LOG,00000,"statement: select count(*) from pg_class;",,,,,,,,"exec_simple_query, postgres.c:940","psql"      
```      
2、SQL耗时记录，通过设置log_duration参数来指定，设置为ON 或OFF。      
如果打开时间记录，那么在SQL执行结束时，打印SQL的耗时。（不包括将结果传输到客户端的时间）      
```      
2018-06-16 14:48:23.760 CST,"postgres","postgres",19448,"[local]",5b24b270.4bf8,9,"SELECT",2018-06-16 14:47:12 CST,3/0,0,LOG,00000,"duration: 0.609 ms",,,,,,,,"exec_simple_query, postgres.c:1170","psql"      
```      
## 开启这两个开关，有多大的性能开销？      
1、开启审计，实际上性能开销较小，因为日志是异步管道输出，而且目前的BUFFER已经调得比较大，性能损耗小。      
**但是，请注意，如果并发非常高，大量写日志可能引发mutex lock冲突，导致性能骤降。PostgreSQL syslogger相关代码有改进优化的地方。**   
src/backend/postmaster/syslogger.c      
```      
/*      
 * Buffers for saving partial messages from different backends.      
 *      
 * Keep NBUFFER_LISTS lists of these, with the entry for a given source pid      
 * being in the list numbered (pid % NBUFFER_LISTS), so as to cut down on      
 * the number of entries we have to examine for any one incoming message.      
 * There must never be more than one entry for the same source pid.      
 *      
 * An inactive buffer is not removed from its list, just held for re-use.      
 * An inactive buffer has pid == 0 and undefined contents of data.      
 */      
typedef struct      
{      
        int32           pid;                    /* PID of source process */      
        StringInfoData data;            /* accumulated data, as a StringInfo */      
} save_buffer;      
#define NBUFFER_LISTS 256      
static List *buffer_lists[NBUFFER_LISTS];      
```      
2、开启时间统计，这个开销主要取决于读取时钟的额外开销。    
通过pg_test_timing可以测试获取系统时间带来的额外开销。      
数据库中如果要统计IO TIMING(track_io_timing = on)，以及auto_explain中的log timing，开销也与之类似。      
```      
pg_test_timing -d 10      
Testing timing overhead for 10 seconds.      
Per loop time including overhead: 42.38 ns      
Histogram of timing durations:      
scaling factor: 300      
query mode: prepared      
number of clients: 56      
number of threads: 56      
duration: 120 s      
number of transactions actually processed: 25058528      
latency average = 0.268 ms      
latency stddev = 0.217 ms      
tps = 208818.253316 (including connections establishing)      
tps = 208834.342644 (excluding connections establishing)      
script statistics:      
 - statement latencies in milliseconds:      
         0.025  \set aid random(1, 100000 * :scale)      
         0.252  SELECT abalance FROM pgbench_accounts WHERE aid = :aid;      
```      
4、开启log_statement=all      
```      
transaction type:       
scaling factor: 300      
query mode: prepared      
number of clients: 56      
number of threads: 56      
duration: 120 s      
number of transactions actually processed: 23088368      
latency average = 0.291 ms      
latency stddev = 1.445 ms      
tps = 192401.524926 (including connections establishing)      
tps = 192413.921654 (excluding connections establishing)      
script statistics:      
 - statement latencies in milliseconds:      
         0.018  \set aid random(1, 100000 * :scale)      
         0.282  SELECT abalance FROM pgbench_accounts WHERE aid = :aid;      
```      
5、关闭log_statement，开启log_duration=on      
```      
transaction type:       
scaling factor: 300      
query mode: prepared      
number of clients: 56      
number of threads: 56      
duration: 120 s      
number of transactions actually processed: 12842222      
latency average = 0.523 ms      
latency stddev = 1.516 ms      
tps = 107017.184761 (including connections establishing)      
tps = 107025.759343 (excluding connections establishing)      
script statistics:      
 - statement latencies in milliseconds:      
         0.019  \set aid random(1, 100000 * :scale)      
         0.520  SELECT abalance FROM pgbench_accounts WHERE aid = :aid;      
```      
6、开启log_statement=all，同时开启log_duration=on      
```      
transaction type:       
scaling factor: 300      
query mode: prepared      
number of clients: 56      
number of threads: 56      
duration: 120 s      
number of transactions actually processed: 7484093      
latency average = 0.898 ms      
latency stddev = 1.386 ms      
tps = 62366.260357 (including connections establishing)      
tps = 62370.603530 (excluding connections establishing)      
script statistics:      
 - statement latencies in milliseconds:      
         0.016  \set aid random(1, 100000 * :scale)      
         0.897  SELECT abalance FROM pgbench_accounts WHERE aid = :aid;      
```      
7、开启log_statement=all，同时开启log_duration=on，同时开启track_io_timing = on      
```      
transaction type:       
scaling factor: 300      
query mode: prepared      
number of clients: 56      
number of threads: 56      
duration: 120 s      
number of transactions actually processed: 7161693      
latency average = 0.938 ms      
latency stddev = 1.150 ms      
tps = 59679.955252 (including connections establishing)      
tps = 59684.540717 (excluding connections establishing)      
script statistics:      
 - statement latencies in milliseconds:      
         0.015  \set aid random(1, 100000 * :scale)      
         0.938  SELECT abalance FROM pgbench_accounts WHERE aid = :aid;      
```      
## 诊断    
测试结果与实际的时钟开销不相符，因为时钟开销实际上只有几十纳秒，但是测试结果很显然不止这么多。    
profiling    
```    
Samples: 1M of event 'cpu-clock', Event count (approx.): 234709749074     
Overhead  Shared Object          Symbol                                   
  41.15%  [kernel]               [k] osq_lock                             
  19.00%  libc-2.17.so           [.] __mcount_internal                    
  10.37%  [kernel]               [k] _raw_spin_unlock_irqrestore    
```    
perf  
主要是锁冲突引起的性能下降。  
```  
# Children      Self  Command         Shared Object          Symbol                                           
# ........  ........  ..............  .....................  ...............................................  
#  
    55.47%     0.00%  postgres        postgres               [.] PostmasterMain  
            |  
            ---PostmasterMain  
               |            
               |--54.42%--ServerLoop  
               |          |            
               |           --54.20%--PostgresMain  
               |                     |            
               |                     |--40.68%--errfinish  
               |                     |          |            
               |                     |           --40.56%--EmitErrorReport  
               |                     |                     |            
               |                     |                     |--38.51%--__write_nocancel  
               |                     |                     |          |            
               |                     |                     |           --38.44%--system_call_fastpath  
               |                     |                     |                     |            
               |                     |                     |                      --38.43%--sys_write  
               |                     |                     |                                |            
               |                     |                     |                                 --38.39%--vfs_write  
               |                     |                     |                                           |            
               |                     |                     |                                            --38.32%--do_sync_write  
               |                     |                     |                                                      |            
               |                     |                     |                                                       --38.27%--pipe_write  
               |                     |                     |                                                                 |            
               |                     |                     |                                                                 |--21.55%--pipe_wait  
               |                     |                     |                                                                 |          |            
               |                     |                     |                                                                 |          |--20.07%--mutex_lock  
               |                     |                     |                                                                 |          |          |            
               |                     |                     |                                                                 |          |           --20.02%--__mutex_lock_slowpath  
               |                     |                     |                                                                 |          |                     |            
               |                     |                     |                                                                 |          |                     |--17.89%--osq_lock  
               |                     |                     |                                                                 |          |                     |            
               |                     |                     |                                                                 |          |                     |--1.44%--apic_timer_interrupt  
               |                     |                     |                                                                 |          |                     |          smp_apic_timer_interrupt  
               |                     |                     |                                                                 |          |                     |          irq_exit  
               |                     |                     |                                                                 |          |                     |          do_softirq  
               |                     |                     |                                                                 |          |                     |          call_softirq  
               |                     |                     |                                                                 |          |                     |          |            
               |                     |                     |                                                                 |          |                     |           --1.25%--__do_softirq  
               |                     |                     |                                                                 |          |                     |            
               |                     |                     |                                                                 |          |                      --0.61%--mutex_spin_on_owner  
               |                     |                     |                                                                 |          |            
               |                     |                     |                                                                 |           --0.94%--prepare_to_wait  
               |                     |                     |                                                                 |                     |            
               |                     |                     |                                                                 |                      --0.91%--_raw_spin_unlock_irqrestore  
               |                     |                     |                                                                 |            
               |                     |                     |                                                                 |--11.44%--mutex_lock  
               |                     |                     |                                                                 |          |            
               |                     |                     |                                                                 |           --11.35%--__mutex_lock_slowpath  
               |                     |                     |                                                                 |                     |            
               |                     |                     |                                                                 |                     |--10.11%--osq_lock  
               |                     |                     |                                                                 |                     |            
               |                     |                     |                                                                 |                      --0.69%--apic_timer_interrupt  
               |                     |                     |                                                                 |                                smp_apic_timer_interrupt  
               |                     |                     |                                                                 |                                irq_exit  
               |                     |                     |                                                                 |                                do_softirq  
               |                     |                     |                                                                 |                                call_softirq  
               |                     |                     |                                                                 |                                |            
               |                     |                     |                                                                 |                                 --0.60%--__do_softirq  
               |                     |                     |                                                                 |            
               |                     |                     |                                                                  --4.73%--__wake_up_sync_key  
               |                     |                     |                                                                            |            
               |                     |                     |                                                                             --4.68%--_raw_spin_unlock_irqrestore  
               |                     |                     |            
               |                     |                     |--0.72%--log_line_prefix.isra.1  
               |                     |                     |            
               |                     |                      --0.52%--_mcount  
               |                     |            
               |                     |--4.05%--PortalRun  
               |                     |          |            
               |                     |           --4.01%--PortalRunSelect  
               |                     |                     |            
               |                     |                      --3.91%--standard_ExecutorRun  
               |                     |                                |            
               |                     |                                 --3.27%--ExecScan  
               |                     |                                           |            
               |                     |                                            --3.18%--IndexNext  
               |                     |                                                      |            
               |                     |                                                       --2.95%--index_getnext  
               |                     |                                                                 |            
               |                     |                                                                 |--2.19%--index_getnext_tid  
               |                     |                                                                 |          |            
               |                     |                                                                 |           --2.16%--btgettuple  
               |                     |                                                                 |                     |            
               |                     |                                                                 |                      --2.08%--_bt_first  
               |                     |                                                                 |                                |            