# Online Reconfiguration in Replicated Databases Based on Group Communication

**Authors:**
- Bettina Kemme, School of Computer Science, McGill University, Montreal
- Alberto Bartoli, Facoltà di Ingegneria, Università di Trieste
- Ozalp Babaoglu, Department of Computer Science, University of Bologna

## Abstract
Over the past few years, numerous replica control protocols have been developed that leverage the ordering and reliability semantics of group communication primitives to simplify database system design and enhance performance. While current solutions effectively mask site failures, many are unable to handle recovery of failed sites, merging of partitions, or the addition of new sites. This paper addresses these critical issues by proposing efficient online reconfiguration solutions. These solutions provide new sites with the current state of the database without interrupting transaction processing in the rest of the system. Additionally, the paper analyzes the impact of cascading reconfigurations and argues that they can be managed elegantly through extended forms of group communication.

## 1. Introduction and Motivation
Replicating data across multiple sites is a well-known technique for increasing availability and performance in distributed databases. However, it introduces the challenge of maintaining consistency among all copies. Replica control mechanisms can be classified as either eager (where updates are coordinated before transactions commit) or lazy (where updates are propagated after transactions commit). Although eager replication can easily guarantee 1-copy-serializability and fault tolerance, it has limited practical impact due to its complexity, poor performance, and scalability issues. Consequently, commercial database systems predominantly use lazy strategies, which often do not ensure data consistency or fault tolerance.

Motivated by this gap between theory and practice, recent proposals for replicated databases [1, 2, 21, 18, 12, 15, 14, 17] have explored using the rich semantics of group communication systems [10, 19] to implement eager-style replica control. These solutions typically propagate transaction updates using a total order multicast, ensuring that all messages are delivered in the same order at all sites. The database uses this order to serialize conflicting updates, resulting in superior performance compared to traditional eager replica control mechanisms. These solutions effectively handle site and communication failures through the virtual synchrony properties of the underlying group communication system.

However, these proposals often lack mechanisms for handling the rejoining of recovered sites, the merging of partitions, or the addition of new sites. Reconfiguration, especially when the number of sites increases, is a complex task. Before a new site can execute transactions, an up-to-date site must provide the current state of the database. Suspending transaction processing during data transfer, as done in some approaches, may violate availability requirements if the amount of data is large. Instead, reconfigurations should be handled online, with minimal interference to ongoing transaction processing. This paper proposes efficient and elegant solutions for online reconfiguration in replicated databases, allowing concurrent transaction processing and handling cascaded reconfigurations.

## 2. Basic Concepts

### 2.1. Virtual Synchrony
We assume an asynchronous system where message delays and computing speeds are unpredictable. Messages may be lost, and sites may fail by crashing (we exclude Byzantine failures). Crashed sites can recover. Sites are equipped with a group communication system supporting virtual synchrony [10, 19], which provides consistent information about the set of reachable group members in the form of views. New views are communicated through view change events, and a site that delivers a view change event `vchy(V)` is informed that the new view is `V`. We say that an event occurs in view `V` at a given site if the last view installed before the event was `V`. Two views `V` and `W` are consecutive if there is a site for which `W` is the next view installed after `V`, and they are concurrent if no site installed both `V` and `W`.

A fundamental property of virtual synchrony is that view changes are globally ordered with respect to message deliveries. A primary view is any view with a majority of sites, and our algorithms allow transaction processing only at sites in the primary view. We assume that the composition of concurrent views does not overlap, and if necessary, we add a thin software layer to hide non-primary views from the application.

### 2.2. Replica Control
The replicated database system consists of multiple sites, each running an instance of the database management system and maintaining a copy of the database. Each site is a group member, and we initially assume all sites are in the same view. We use the Read-One-Write-All (ROWA) strategy, where a transaction performs read operations on the local copy and write operations on all copies. Concurrent transactions with conflicting operations must be isolated, and we use 1-copy-serializability as the correctness criterion.

Various ROWA protocols based on group communication primitives have been proposed [1, 2, 21, 18, 12, 15, 14, 17]. For simplicity, we describe reconfiguration in the context of one such protocol [1], chosen for its simplicity and good performance. The protocol involves several phases:

1. **Local Read Phase**: Acquire shared read locks and execute read operations on the local copy.
2. **Send Phase**: Bundle all write operations and object identifiers with their version numbers into a single transaction message `mT` and send it using the total order multicast.
3. **Serialization Phase**: Upon delivery of `mT`, perform the following steps atomically:
   - Assign a globally unique identifier `gid(T)` to `T`.
   - Check the version numbers of objects read by `T` and abort if any local version number is greater.
   - Request write locks for `T` and abort any conflicting local transactions.
4. **Write Phase**: Perform write operations and assign the version number `gid(T)` to the updated objects.
5. **Commit Phase**: Commit the transaction once all write operations are complete.

## 3. Principal Problems in Online Reconfiguration
Online reconfiguration in replicated databases must address several key issues:
- **Data Transfer**: Efficiently transferring the current state of the database to new or recovering sites.
- **Concurrency Control**: Allowing transaction processing to continue with minimal interference during reconfiguration.
- **Failure Handling**: Managing further failures that may occur during the reconfiguration process.

## 4. Online Reconfiguration Based on Virtual Synchrony
We propose reconfiguration algorithms based on the basic virtual synchrony paradigm. Various data transfer strategies are discussed, ranging from transferring the entire database to more sophisticated piecewise reconfiguration. Relying on basic virtual synchrony, however, results in complex reconfiguration protocols if further failures occur during data transfer. To address this, we show how to modify the algorithms using an enriched virtual synchrony model (EVS) [4], enabling simpler solutions that handle various failure scenarios.

## 5. Refining Solutions with Enriched Virtual Synchrony
Using EVS, we refine the reconfiguration algorithms to encapsulate reconfiguration more appropriately. This framework allows for simpler and more robust solutions, accommodating various failure scenarios and ensuring that transaction processing continues with minimal disruption.

## 6. Conclusion
This paper presents efficient and elegant solutions for online reconfiguration in replicated databases, focusing on the database perspective. By leveraging the rich semantics of group communication and the enhanced capabilities of EVS, we provide mechanisms for handling the rejoining of recovered sites, the merging of partitions, and the addition of new sites, all while maintaining high availability and performance.

---

This revised text aims to improve clarity, coherence, and professionalism, making it more suitable for academic and technical audiences.