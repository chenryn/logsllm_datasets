title:Online Reconfiguration in Replicated Databases Based on Group Communication
author:Bettina Kemme and
Alberto Bartoli and
&quot;Ozalp Babaoglu
Online Reconfiguration in Replicated Databases Based on Group 
Communication 
Bettina Kemme 
School of Computer Science 
McGill  University, Montreal 
PI:EMAIL 
Albert0 Bartoli 
Facolta di Ingegneria 
Universita di Trieste 
bartolia @ univ. trieste. it 
Ozalp Babaoglu 
Department of Computer Science 
University of Bologna 
babaoglu 0 cs. unibo. it 
Abstract 
Over the last years, many replica control protocols have 
been developed that take advantage of the ordering and reli- 
abili5 semantics of group communication primitives to sim- 
p l i b  database system  design and to improve pevormance. 
Although current solutions are able to mask site failures ef- 
fectively, many of them are unable to cope with recovey of 
failed  sites,  merging  of partitions,  or joining  of  new sites. 
This paper addresses this important issue.  It proposes efJi- 
cient solutions for online system  reconjiguration providing 
new sites  with a  current  state  of the database without  in- 
terrupting  transaction processing  in the rest of the system. 
Furtherniore,  the paper analyzes  the  impact of  cascading 
reconjigurations, and argues that they can be handled in an 
elegant way by extended forms of group communication. 
1. Introduction and Motivation 
Replicating  data  across  several  sites  is  a  well-known 
technique  for  increasing  availability  and  performance  in 
distributed  databases but  introduces the  problem  of  keep- 
ing all  copies consistent.  Replica  control  mechanisms can 
be classified as being either eager, i.e., updates are coordi- 
nated  before transactions  commit [9], or lazy, i.e., updates 
are propagated  only  after  transactions  commit (e.g., [20]). 
Although  eager  replication  can  easily  guarantee  1 -copy- 
serializability  and  can be made fault-tolerant  in  a straight- 
forward way, we believe it is fair to say that eager solutions 
have had very limited practical impact. Database designers 
believe that eager replication  is too complex, has poor per- 
formance and does not scale. Instead, commercial database 
systems are based primarily on lazy strategies favoring per- 
formance over correctness: most of their solutions guaran- 
tee neither data consistency nor fault-tolerance  [ 1 I]. 
Motivated  by  this  gap between  theory  and  practice,  re- 
cent  proposals  for  replicated  databases  [ 1,  2,  21,  18,  12, 
0-7695-1101-5/01 $10.00 0 2001 IEEE 
117 
15,  14,  171 propose new  approaches that  exploit the  rich 
semantics of group communication systems [ 10, 191 to im- 
plement an eager-style  replica control.  Most of these solu- 
tions propagate the updates of the transactions using a total 
order multicast  that delivers all messages at all sites in  the 
same order.  The database uses  this  order as  a  pattern  to 
follow  in  the case  of conflicts,  i.e., conflicting  updates are 
serialized  in  the  order that  the  group communication sys- 
tem delivered them.  Several simulation studies [ 18, 15, 121 
and  a  real  implementation  [14] have  proven  the  superior 
performance of  such  an  approach compared  to  traditional 
eager replica  control mechanisms.  The proposed  solutions 
are able to handle effectively site and communication fail- 
ures  [2,  151.  This is  accomplished primarily  through  the 
virtual synchrony properties  of the underlying group com- 
munication  system, which  notifies about failures  in  such a 
way that surviving sites receive exactly the same set of mes- 
sages before being informed about the failure. 
What is often missing from the various proposals is how 
failed sites can rejoin  the system after recovery, how parti- 
tions can merge after repairs or how new sites can be added 
to a running system. Reconfiguration that is necessary when 
the  number of  sites  increases  is  a  far  more complex task 
than that necessary  when the number of sites decreases. In 
particular, before a joining site can execute transactions, an 
up-to-date site has to provide the current state of the data to 
the joining site. One possible solution is to require suspend- 
ing transaction  processing  during this data transfer, an ap- 
proach taken, e.g., by [ 2 ] .  This option, however, may violate 
the availability requirements  of many critical systems if the 
amount of data to be copied is extremely large.  Instead, all 
reconfigurations should be handled online whereby transac- 
tion processing continues and  is interfered  as little as pos- 
sible by reconfiguration.  We  are not aware of any existing 
reconfiguration mechanism  that fulfills this requirement. 
This paper proposes efficient and elegant solutions to on- 
line reconfiguration in replicated databases. We discuss var- 
ious alternatives for data transfer to joining sites, all of them 
allowing  concurrent transaction  processing.  Given that it 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:01:57 UTC from IEEE Xplore.  Restrictions apply. 
is  impractical  to perform data  transfer  as a single “atomic 
step”, we pursue solutions that admit cascaded reconfigura- 
tions during the data transfer itself.  An important contribu- 
tion of our approach is a clear separation between the tasks 
of  the  group communication  system  and  the  tasks of  the 
database system:  while the former is responsible for com- 
munication  and  group management,  the  latter  is  charged 
with handling data transfer and coordination of transactions. 
Such separation  is important in practice  because  it simpli- 
fies the integration of existing database technology. 
We  present our  approach  in  two  steps.  First,  we  pro- 
pose reconfiguration  algorithms based  on  the basic  virtual 
synchrony paradigm offered by most group communication 
systems. Within this context, various data transfer strategies 
are discussed, ranging from transferring  the entire database 
to more sophisticated  schemes admitting piecewise  recon- 
figuration. Relying on basic virtual synchrony, however, re- 
sults in complex reconfiguration protocols if further failures 
may occur during the data transfer. For this reason, we show 
in a second step how to modify the previous algorithms us- 
ing an  enriched virtual  synchrony model,  called  EVS  [4]. 
The resulting  framework enables simpler solutions that ad- 
mit various failure scenarios. 
We note that this paper pursues a database perspective to 
reconfiguration focusing on database issues. As a result, our 
treatment of  group communication  in  general, and virtual 
synchrony in particular, is necessarily abbreviated. 
The paper is structured as follows. The next section pro- 
vides a brief overview of virtual synchrony and replica con- 
trol based on group communication.  Section  3 outlines the 
principal  problems that need to be solved for online recon- 
figuration. Section 4 presents various alternatives for online 
reconfiguration  based on the virtual synchrony model. Sec- 
tion 5 refines the previous solutions by using enriched form 
of virtual synchrony to  appropriately  encapsulate reconfig- 
uration.  Section 6 concludes the paper. 
2. Basic Concepts 
2.1. Virtual Synchrony 
We assume an asynchronous system where neither mes- 
sage delays nor computing speeds can be bounded with cer- 
tainty.  Messages may  be lost and sites may  fail  by  crash- 
ing  (we  exclude  Byzantine  failures).  Crashed  sites  may 
recover.  Sites are equipped  with  a  group communication 
system supporting virtuczl synchrony  [IO,  191.  Virtual syn- 
chrony provides applications with the notion of group mem- 
bership and with a reliable multicast communication primi- 
tive (a message is sent to all members of the group). Virtual 
synchrony provides consistent information about the set of 
group members that appear to be currently  reachable.  This 
information takes the form of views. The system determines 
a new view as a result of crashes, recoveries, network parti- 
tions and merges, or explicit group joins and leaves. 
New  views  are  communicated, to  sites  through  view 
change  events.  A  site  that  delivers  a  view  change  event 
vchy(V)  is  informed that  the  new  view  is  V .  In  this case 
we say that the site installed  V .  We say that an event (e.g., 
the delivery of a message) occurs in view V at a given site if 
and only if the last view to be installed at the site before the 
event was V .  Given two views V and W ,  we say that V and 
bV  are consecutive if and only if there is a site for which W 
is the next view to be  installed after V .  V and W are con- 
current  if  and only  if  there is  no site that installed  both  V 
and W .  Intuitively, concurrent views reflect  different per- 
ceptions of the group membership, typically as a result  of 
partitions. 
A fundamental property of virtual synchrony is that view 
changes are globally ordered with respect to message deliv- 
eries:  given two consecutive views V and W ,  any two sites 
that install both  views must have delivered the same set of 
multicast messages in view V .  
We  say  that  any  view  with  a  majority of  sites is  a pri- 
mary view (the number of sites is assumed to be  static and 
known  to  all  sites).  As  clarified  in  the  next  sections, our 
algorithms allow transaction  processing only at sites in the 
primary  view. Extending our discussion to dynamic groups 
or other definitions of primary view (e.g., a view containing 
a majority  of the previous primary  view) is straightforward. 
We assume that the composition of concurrent views do not 
overlap. If this is not provided by the group communication 
system [ 5 , 6 ] ,  we assume a thin software layer on top of the 
virtual synchrony layer, that hides from the application pri- 
mary  views that are not installed by a majority of sites (as, 
e.g., in [22]). 
The replica control protocols of the next section use a to- 
tal order multicast:  any two sites that deliver two multicast 
messages deliver them in the same order [IO,  191. Further- 
more, we shall assume a uniform reliable multicast with the 
following guarantee. Let V and W be two consecutive pri- 
mary  views  and let  SI and S2  be sites that  installed  V .  If 
SI is a member of W but S:! is not (S, crashes or installs 
some non-primary view W’ as the next  view after V ) ,  and 
S2 delivers message m in V ,  then SI also delivers m before 
installing W .  In other words, messages delivered by Sz in 
V constitute a subset of those delivered by SI in V .  
Note that  we do not specify  which  messages have to be 
delivered  in minority views.  As we discuss in  Section 2.3, 
members of minority views behave  as if they had failed by 
ignoring delivered messages and refraining from executing 
transactions. The above adaptation of “uniformity” to par- 
titionable systems  happens  to  suffice  for the  replica con- 
trol  protocols of the next  section  and  can easily  be  imple- 
mented with minimal changes to existing group communi- 
cation systems (e.g. [ 161). 
118 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:01:57 UTC from IEEE Xplore.  Restrictions apply. 
2.2. Replica Control 
The replicated  database system consists of a set of sites. 
Each site runs an instance of the database management sys- 
tem  and maintains a copy of  the  database.  Each  site is  a 
group member.  We assume for the time being that all sites 
are in  the same view.  In  the next  sections we shall  extend 
the discussion to accommodate failures and recoveries. 
We use the transaction  model of  [9]. A  transaction  is a 
sequence of  read  and  write  operations on  objects.  As for 
replication,  we use the Read-One- Write-All (ROWA) strat- 
egy:  a  transaction  performs read  operations on  the  local 
copy while write operations are applied to all copies. Con- 
current transactions  with  conflicting  operations (accessing 
the same object and at least one of them is a write) must be 
isolated  from each other.  We use  1 -copy-serializability  as 
correctness criteria:  all sites execute conflicting operations 
in the same order and there exists a serial execution of the 
transactions  with the same order of conflicting operations. 
Various  ROWA  protocols  based  on  group communica- 
tion  primitives  have  been  proposed  [ l ,  2,  21,  18,  12,  15, 
14,  171.  They  vary  in  the  number of  messages per  trans- 
action,  the  ordering mechanisms  used  (FIFO  order,  total 
order etc.), and  their  concurrency control.  For  simplicity, 
we describe reconfiguration  in  the  context of  only  one of 
these protocols  [I]. We have chosen this protocol  because 
it is simple to describe and there exist various protocols that 
follow similar execution and communication patterns (only 
one  message  per  transaction  using  the  total  order  multi- 
cast) [ 12, 15, 141, and these protocols have shown good per- 
formance.  However, reconfiguration  associated  with  other 
replica or concurrency control schemes will be very similar. 
The  replica  control  protocol  that  we  consider  is  de- 
scribed in the following. We assume that objects are tagged 
with version numbers. A transaction T is submitted to some 
site S  in  the  system  and  executed in  several  phases.  For 
now, we assume that either all read  operations precede the 
write operations, or all write operations are delayed until all 
read operations have been performed. The first two phases 
are local to S ,  while all other phases are executed at all sites: 
I. Local Read Phase: For each read operation T ( X )  on ob- 
ject X  acquire a shared read lock and execute the opera- 
tion on the local copy. 
II.  Send Phase: Once all read operations are executed bun- 
dle a single transaction message mT  containing all write 
operations and the  identifiers of  the  objects  read by T 
along with the respective version numbers. Send mT  us- 
ing the total order multicast. 
Ill.  Serialization Phase: Upon delivery of a transaction mes- 
sage mT  perform in an atomic step: 
1. Assign  global  identifier:  Assign  a  globally  unique 
identifier g i d ( T )  to T .  g i d ( T )  is the sequence number 
of  its transaction message mT, i.e., the position of  mT 
in the total order of all delivered transactions. 
2. Version  Check:  For each  object X  read by T ,  if  the 
local version  number of  X  (after applying  all  updates 
of  transactions delivered before T )  is greater than the 
version number read by T ,  then abort and terminate T .  
3.  Lock Phase: Request all write locks for T .  If there is a 
local transaction T'  in its local phase with a conflicting 
read lock, abort T'. 
IV.  Write Phase:  As  soon as the  lock for  a write  operation 
w(X) is granted, perform the corresponding write opera- 
tion. Assign the version number g i d ( T )  to the object X. 
V.  Commit  Phase:  As  soon  as  all  write  operations  have 