通过查阅官方文档，我们发现了答案：
资源的拥有者，即Owner始终对资源具备完全控制权，无论ACL中是否存在此项。
## 存储桶策略（Bucket Policy）
在分析完ACL之后，我们来看看Policy。存储桶策略（Bucket Policy）使用 JSON 语言描述，支持向匿名身份或任何 CAM
账户授予对存储桶、存储桶操作、对象或对象操作的权限，在对象存储中存储桶策略可以用于管理该存储桶内的几乎所有操作。Policy属性见下图：
_表格 3 Bucket Policy属性表_
我们可以通过在控制台中添加策略的方式来设置Policy权限。
_图 17通过控制台添加Policy_
我们添加一个新策略，该策略允许所有用户对我们的存储桶进行所有操作，见下图：
_图 18添加新策略_
通过访问API接口，获取权限策略。
可以发现，Policy中以共有四个主要的属性：Action、Effect、Principal、Resource，分别对应了控制台中填写的操作、效力、用户、资源路径。与ACL仅可以配置的用户与权限选项相比，控制的颗粒更细。
接下来，我们添加一个允许账号ID为123456的账号对cos-aclxxx/policy_test路径的读操作。
_图 19 配置账号指定资源操作权限_
通过访问API接口，获取权限策略。
在这个Policy中，我们可以看到更细腻的Action与Resource配置。
## 对象访问权限
在对象存储中，每一个对象同样存在着可配置的访问权限，默认继承存储桶的ACL。
_图 20对象访问权限控制台界面_
我们将此对象设置为公有读私有写权限，见下图：
_图 21配置对象公有读私有写权限_
通过查询GetObjectAcl API接口，获取其ACL。
从ACL可见，与存储桶的ACL配置项完全一样，只不过这里的ACL作用于目标对象而存储桶ACL作用于存储桶。
但是对象存储是如何通过ACL与Policy共同协调控制存储桶权限的呢？
我们接下来看一下对象存储的访问策略评估流程。
## 访问策略评估机制
在开始介绍对象存储访问策略评估流程之前，我们先介绍一下几个流程中涉及到的重要概念：显示拒绝、显示允许、隐式拒绝以及三者之间的联系：
**01显式拒绝**
在用户策略、用户组策略、存储桶 Policy 中针对特定用户有明确的 Deny 策略。
**02显式允许**
在用户策略、用户组策略、存储桶 Policy、存储桶 ACL 中通过grant-*明确指定特定用户针对特定用户有明确的 Allow 策略。
**03隐式拒绝**
在默认情况下（未经配置的情况下），所有请求都被隐式拒绝（deny）。
**显示拒绝、显式允许、隐式拒绝之间的关系如下：**
如果在用户组策略、用户策略、存储桶策略或者存储桶/对象访问控制列表中存在显式允许时，将覆盖此默认值。任何策略中的显式拒绝将覆盖任何允许。
在计算访问策略时，应取基于身份的策略（用户组策略、用户策略）和基于资源的策略（存储桶策略或者存储桶/对象访问控制列表）中策略条目的并集，根据显示拒绝、显式允许、隐式拒绝之间的关系计算出此时的权限策略。
_图 22存储桶鉴权流程_
通过上图，我们可以很清楚的理解存储桶的鉴权流程。
## 访错误配置导致的安全问题
### 错误使用公有读写权限
在所有错误配置导致的存储桶安全问题中，最常见的一种便是错误的使用了公有读写权限导致的安全问题。
_图 23配置存储桶公有读写访问权限_
通过上文的分析可知，公有读权限可以通过匿名身份直接读取用户存储桶中的数据，存在着严重的安全隐患。
但是有些用户为了避免使用繁杂且细粒度的权限配置，会错误的将其存储桶设置为公有读写，这将导致了其存储桶中的内容被攻击者窃取与篡改。正如本文前言中所描述的2017美国国防部承包商数据泄露案例。即便是美国国防部承包商，在使用存储桶进行对象存储时，也会犯下这样的常见错误。
因此，为了保障存储桶安全，建议用户为存储桶配置私有读写权限。
### 存储桶、对象访问权限差异性问题
存储桶权限与对象权限的差异性，往往会为对象资源来安全性问题。
在实际操作中，为了存储桶的安全起见，存储桶的公共权限往往会被设置为私有读写，这也是存储桶的默认公共权限配置，见下图：
_图 24配置存储桶私有读写权限_
存储桶的私有权限表明，只有该存储桶的创建者及有授权的账号才对该存储桶中的对象有读写权限，其他任何人对该存储桶中的对象都没有读写权限。
但是将存储桶的公共权限设置为私有读写可以完全保护存储桶中的中的对象资源不被读取吗?
在我们测试的这个存储桶中，并未设置Policy策略，并且存在着一个名为p2.png的对象。
_图 25 p2.png对象_
而从上文可知，存储桶中的对象也有着其对应的对象权限。
在这里我们将对象p2.png的ACL权限设置为公有读私有写，见下图：
_图 26为p2.png对象配置公有读私有写_
通过访问p2.png资源url可以发现，此时p2.png对象可以被访问，见下图：
_图 27成功访问p2.png对象_
测试表明，当存储桶公共权限设置为私有读写时，当存储桶中的对象公共权限为公有读私有写时，此对象依然是可以被读取的。
实际原理很简单，我们为对象p2.png设置了公有读私有写ACL策略，此时对象资源p2.png的ACL如下：
根据上文访问策略评估机制一章可知，对象p2.png设置了AllUsers用户组的显性允许READ权限，因此当匿名用户访问p2.png时，即使存储桶设置了私有读写权限，依然可以访问此对象，原理图见下图：
_图 28 访问p2.png时的鉴权流程_
因此，单单依靠存储桶的访问权限，并不能保护其中资源的未授权访问情况。为存储桶中资源配置对应的访问权限，才可以保证对象的安全性。
## 错误授予的操作ACL权限
在Policy权限设置中，如果授权用户操作存储桶以及对象ACL的权限（GET、PUT）见下图：
_图 29授予用户操作ACL权限_
即使Policy中没有授权该用户读取存储桶、写入存储桶、读取对象、写入对象的权限，这个操作依然是及其危险的，因为该用户可以通过修改存储桶以及对象的ACL进行越权。
我们在coscmd中配置授权用户的密钥信息后，通过coscmd list列出存储桶中内容。
_图 30存储桶list操作失败_
从返回结果来看，该用户并没有读取存储桶列表的权限
经过测试，用户同样也没有下载p2.png对象的权限，见下图：
_图 31下载对象操作失败_
但是我们却可以查询存储桶中对象的ACL，见下图：
_图 32成功查看对象ACL_
由于该用户拥有修改存储桶中对象ACL的权限，因此可以通过如下指令授予该用户读取p2.png的权限，见下图：
_图 33授予用户p2.png读权限_
在修改过p2.png权限之后，可以顺利的将此对象下载到本地。
_图 34成功下载p2.png对象_
### 资源超范围限定
在使用存储桶进行对象读取或写入操作时，如果没有合理的或者错误的在Policy中配置用户允许访问的资源路径（resource），则会出现越权访问，导致用户数据被恶意上传覆盖或被其他用户下载等安全问题。
在Web应用开发中，经常会发生此类问题。设想以下场景：在一个Web应用使用对象存储来存储用户头像，且通过前端直传的方式将用户上传的头像传至存储桶中，并希望在存储桶/avatar/路径中存储桶用户的头像，由于后端开发时为了方便而进行了不规范的存储桶Policy配置，在生成用户用以上传头像的临时密钥时直接将此临时密钥允许访问的
resource 指定为 qcs::cos::uid/:/avatar/*路径。
这样以来，系统为每个用户所生成的用以上传以及浏览头像的临时密钥虽然不尽相同，但是这个临时密钥都拥有qcs::cos::uid/:/avatar/*路径中的所有资源的读写权限。
这一错误的配置导致了很多严重的安全问题，由于在此场景下，Web应用程序使用前端直传的方式访问存储桶，因此后台生成的临时密钥将会发送给前台，任意用户通过网络抓包等手段获取到的临时凭据，可参见下图流量中响应包内容。
_图 35从流量中获取临时凭据_
在获取了临时密钥之后，攻击者凭借此凭据读写qcs::cos::uid/:/avatar/*路径中的任意对象。
攻击者可以通过此方式覆盖目录中其他用户资源，见下图：
_图36覆盖其他用户资源_
上图攻击者通过test.txt文件覆盖了16.png。当然，攻击者也可以轻易的读取此目录中其他用户的文件。
针对此问题的修复方式如下：可以通过每个用户的用户标识来为每一个用户设置一个独用的路径，例如可以在为用户生成临时密钥时，将policy中resource
指定为 qcs::cos::uid/:/avatar//*来满足规范要求；此外，resource 字段支持以数组的形式传入多个值。因此，也可以显式指定多个
resource 值来完全限定用户有权限访问的最终资源路径。
## 写在后面
对象存储服务作为一项重要的云上服务，承担了存储用户数据的重要功能。从上文分析可见，对象存储服务提供了细粒度的访问权限控制功能，以保证用户数据的安全性。
但是由于用户使用对象存储服务时安全意识不足或对访问权限以及访问策略评估机制错误的理解，将会导致数据被非法访问或篡改。这些错误的配置包括用户错误的使用公有读写权限、错误授予操作ACL权限、配置资源超过范围限定以及对存储桶权限机制错误理解等，这些错误的配置将会造成严重的安全问题。
因此，深入了解对象存储服务所提供的访问权限以及访问策略评估机制，并始终遵循最小权限原则，将会为存储桶中存储的数据安全构筑立体防护体系的一道坚固的门锁，与此同时，也可以通过检查存储桶日志以及文件时间戳来排查存储桶是否被侵害，确保云上资产的安全。
### 参考文献
* * *