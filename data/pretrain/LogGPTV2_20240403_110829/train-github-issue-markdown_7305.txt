  * I tried using the latest `mongoose/mongoose.d.ts` file in this repo and had problems. 
    * The authors of that type definition are @simonxca in #10084.
Basically this broke my use of mongoose. Not that I am sure I was using it
correctly as I'm a bit of a novice in this TS/JS realm.
Snippet:
    {...}
    interface Location extends mongoose.Document {
      name: string;
      address: string;
      rating: number;
      facilities: string[];
      coords: number[];
      openingTimes: any[];
      reviews: any[];
    };
    const locationSchema = new mongoose.Schema({
      name: { type: String, required: true },
      address: String,
      rating: { type: Number, "default": 0, min: 0, max: 5 },
      facilities: [String],
      coords: { type: [Number], index: "2dsphere" },
      openingTimes: [openingTimeSchema],
      reviews: [reviewSchema]
    });
    mongoose.model("Location", locationSchema);
    {...}
So I can no longer specify the interface with additional properties within <>.
> Supplied parameters do not match the signature of the call target.
Simplifying to:
`mongoose.model("Location", locationSchema);`
Works of course, but now in my controllers when executing a query and
explicitly trying to access a property of a document TS is unaware of the
additional properties on a document.
    loc
        .findById(req.params.locationid)
        .select("-reviews -rating")
        .exec(
          (err, location) => {
            if (!location) {
              sendJsonResponse(res, 404, {
                "message": "locationid not found"
              });
              return;
            } else if (err) {
              sendJsonResponse(res, 400, err);
              return;
            }
            location.name = req.body.name;
            location.address = req.body.address;
    {...}
> Property 'name' does not exist on type '_Model & EventEmitter'.
Then I thought perhaps creating a class that extends mongoose and implements
my interface would work, but then I have to provide an implementation for
everything in my interface and mongoose.Document. That seems kind of asinine
so I figure I must be missing the most obvious way to do this.
Thoughts?