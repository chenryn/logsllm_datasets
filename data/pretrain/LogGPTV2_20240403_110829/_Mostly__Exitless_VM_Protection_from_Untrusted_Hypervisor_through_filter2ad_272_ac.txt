two types of attacks that break these two invariants respec-
tively. The ﬁrst attack allows a malicious VM to bypass
the Guardian-VM in non-root mode and execute any instruc-
tions in the SubVisor, which breaks the Invariant 1 property.
This attack also allows a malicious SubVisor to bypass the
Guardian-VM and attack VMs. Speciﬁcally, the attacker in-
vokes a self-prepared VMFUNC instruction to maliciously
bypass the Guardian-VM by directly switching from one
physical space to the target physical space and execute sensi-
tive instructions in the target space. The second attack breaks
Invariant 2 and is simpler than the ﬁrst one. This attack tar-
gets the Guardian-VM and uses techniques similar to the ﬁrst
attack, which bypasses the Guardian-VM’s predeﬁned gates
and compromises the Guardian-VM.
We ﬁrst use an example to illustrate the basic procedure of
the ﬁrst attack. We suppose that the guest OS is an attacker,
and its purpose is to bypass the Guardian-VM and directly
execute any instructions in the SubVisor-EPT (victim). If the
attacking direction is reversed, that is, the attacker is the Sub-
Visor and the victim is a guest VM, the attacking procedure is
similar. Figure 5 shows an example of the ﬁrst attack, which
consists of the following four steps.
VM
Code Page (GVA)
Code Page (GPA)
Code Page (HPA)
PC 
(GVA)
0x80000
0x80???
0x80234
0x80???
……
0x80000 → 0x11000
0x81000 → ……
Malicious PT
0x82000 → ……
……
PT
0x11000
0x11???
0x11234
0x11???
0xA0000: ……
0xA0???: ……
EPT
0xA0234: vmfunc (0x0, 0x2)
0xA0???: ……
CR3
 0x55000
(GPA)
0x11000 → 0xA0000
EPT Pointer
……
 ……
0x55000 → 0x78000
Guest-EPT
……
After    VMFUNC
SubVisor
Code Page (GVA)
Code Page (GPA)
Code Page (HPA)
PC
 (GVA
҂
0x80000
0x80???
0x80237
0x80???
……
0x80000 → 0x22000
0x81000 → ……
PT
0x22000
0x22???
0x22237
0x22???
0xE0000: ……
0xE0???: ……
EPT
0xE0237: Sensitive Inst.
0xE0???: ……
CR3: 0x55000
(GPA)
0x22000 → 0xE0000
EPT Pointer
……
 ……
SubVisor PT
0x82000 → ……
0x55000 → 0x2B000
SubVisor-EPT
……
……
Figure 5: An example of the ﬁrst attack. All addresses in this
ﬁgure are used for illustration and do not have any practical
meaning.
• Step 1: Guessing the SubVisor’s page table base ad-
dress. The attacker guesses the SubVisor’s page table
base address. The page table controls the mapping from
1700    29th USENIX Security Symposium
USENIX Association
GVA to GPA, which is managed by the SubVisor. Since
the SubVisor usually uses a statically allocated page ta-
ble which is initialized during system booting, the base
address of the page table is easy to guess if the attacker
is familiar with the source code of the SubVisor. In Fig-
ure 5, the base address of the SubVisor page table is
0x55000.
• Step 2: Creating a malicious page table. In the VM’s
physical address space, the attacker then creates a ma-
licious page table whose base address value (GPA) is
equal to that of the SubVisor’s page table 4. Hence, the
base address of the malicious page table is 0x55000 in
Figure 5. This base address is translated to the mali-
cious page table in the Guest-EPT and to the SubVisor
page table in the SubVisor-EPT. The malicious page
table consists of four-level page table pages, but each
level has only one page. These page table pages trans-
late the GVA of a code page (0x80000 in this example),
which contains a self-prepared VMFUNC instruction.
The VMFUNC instruction’s virtual address is deliber-
ately set to the value just before the GVA of the target
instructions in the SubVisor’s space, which is 0x80237
in Figure 5.
• Step 3: Switching EPTs. The attacker writes the base
address of the malicious page table into the CR3 reg-
ister in non-root mode and executes the self-prepared
VMFUNC instruction to bypass the Guardian-VM and
switch to the SubVisor-EPT. Here we understand why
the attacker needs to guess the SubVisor’s page table
base address at Step 1. After switching to the SubVisor-
EPT, an incorrect value in the CR3 register will be trans-
lated to an illegal page table. The illegal page table may
contain meaningless GPAs that cause numerous EPT vi-
olations, which wake up the RootVisor.
instructions.
• Step 4: Executing target
In the
SubVisor-EPT, the GPA in the CR3 register is translated
to the HPA of the SubVisor’s page table (0x2B000 in
this example). Thus, all the GVA of the subsequent in-
structions will be translated by the SubVisor’s page ta-
ble. Finally, the target instructions are executed.
The second attack is similar to the ﬁrst one since the at-
tacker also uses the above four steps. The only difference is
that the attacking target is Guardian-VM. The attacker simi-
larly crafts a malicious page table and puts the self-prepared
VMFUNC instruction just before the GVA of the target in-
structions in the Guardian-VM. Therefore, the attacker can
bypass the predeﬁned gates of the Guardian-VM and breaks
Invariant 2.
4The attacker just puts the page table at a speciﬁc GPA. She cannot mod-
ify the Guest-EPT.
Previous works have proposed many solutions to defend
against these attacks. SeCage [44] and EPTI [27] set the code
pages belonging to the attacker EPT to non-executable in the
victim EPT. SeCage further puts a security checker at the
beginning of each sensitive function page. SkyBridge [49]
takes another defense solution that ﬁrst replaces all illegal
VMFUNC instructions and then makes code pages non-
writable so that the attacker cannot insert self-prepared VM-
FUNC instructions.
Nevertheless, none of these defenses works in the
CloudVisor-D scenario. All of these methods depend on one
assumption which is not held in CloudVisor-D: the attacker
runs in Ring 3 which means she cannot modify the page table
or the CR3 register value. In CloudVisor-D, both of the guest
OS and the SubVisor can freely modify their page tables and
even CR3 register values. Therefore, previous defenses are
unable to defeat this new variant of the attack in CloudVisor-
D. Furthermore, CloudVisor-D has one stricter requirement
that the guest VM (or the SubVisor) should switch to the
Guardian-EPT before the SubVisor-EPT (Guest-EPT).
4.4 Enforcing the Complete Mediation Prop-
erty
To defeat these attacks and enforce the complete media-
tion property, we propose two techniques that satisfy the two
invariants respectively. To enforce Invariant 1, we propose
a technique called dynamic EPTP list manipulation, which
guarantees that both the guest VM and the SubVisor have to
enter the Guardian-VM before switching to the target EPT.
Another technique to satisfy Invariant 2 is called isolated
Guardian-VM page table. By using this technique, the ma-
licious guest VM or the SubVisor cannot directly jump into
the middle code pages of the Guardian-VM since the base
address of the Guardian-VM page table exceeds the GPA
ranges of the guest VM and SubVisor.
4.4.1 Dynamic EPTP List Manipulation
A strawman design. One straightforward solution to en-
force Invariant 1 is to control the executable bits dynam-
ically in the Guest-EPT and the SubVisor-EPT. Since the
Guardian-VM has access to the SubVisor-EPT and corre-
sponding Guest-EPT, it can initialize all code pages in the
SubVisor-EPT to non-executable. Hence, the guest OS has
to switch to the Guardian-VM and enable the SubVisor’s
execution privilege before switching to the SubVisor. That
gives the Guardian-VM a chance to do the security check.
This solution supports ﬁne-grained privilege control, which
means it can create multiple SubVisor-EPTs and Guest-
EPTs for different vCPUs and enable the executable bits in
one SubVisor-EPT/Guest-EPT for one vCPU while keeping
other vCPUs’ SubVisor-EPTs/Guest-EPTs non-executable.
Furthermore, the privilege control can be accelerated by just
modifying the L4/L3 EPT entries. However, this solution is
infeasible even if it looks reasonable because it requires fre-
quent EPT synchronizations among vCPUs and thus brings
USENIX Association
29th USENIX Security Symposium    1701
about a large number of costly TLB shootings [12] for one
multi-vCPU VM.
1:
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31:
32:
33:
34:
35:
36:
37:
38:
39:
40:
41:
42:
43:
44:
45:
Enter_GUARDIAN-VM(func_index, arguments) 
          VMFUNC(0x0, 0x1) // install Guardian-EPT
          Guardian_CR3 = Guardian_Info_Page[0]
          Install Guardian_CR3 to CR3 register
          Install Guardian-VM stack
          Push registers
          DISPATCH_REQUESTS(func_index, arguments)
          Pop  registers
          Restore guest stack
          Restore guest page table
          VMFUNC(0x0, 0x0) // install Guest-EPT
Entry
Page
DISPATCH_REQUESTS(func_index, arguments)
         type = VERIFY_REQUESTS (func_index, arguments) 
         if (is_remote_call == type) then
                HANDLE_REMOTE_CALL (func_index, arguments) 
                CHECK_UPDATES
         else if (is_local_call == type) 
                HANDLE_LOCAL_CALL (func_index, arguments)
         else reject the request 
HANDLE_REMOTE_CALL(func_index, arguments) 
         EPTP_LIST = Guardian_Info_Page[1]
         EPTP_LIST[0] = 0
         EPTP_LIST[2] = SubVisor-EPT
         func_pointer = jump_table[func_index]
         CALL_HYPER_FUNC(func_pointer, arguments)
         EPTP_LIST[2] = 0
         EPTP_LIST[0] = Guest-EPT
HANDLE_LOCAL_CALL(func_index, arguments) 
         func_pointer = jump_table[func_index]
         func_pointer(arguments) 
Main 
Page
CALL_HYPER_FUNC(func_pointer, arguments)
         Install SubVisor page table
         Install SubVisor stack
         VMFUNC(0x0, 0x2) // install SubVisor-EPT
         func_pointer(arguments)
         VMFUNC(0x0, 0x1) // install Guardian-EPT
         Guardian_CR3 = Guardian_Info_Page[0]
         Install Guardian_CR3 to CR3 register
         Restore Guardian-VM stack
Exit
Page
the Guest-EPT into Entry 0. By using this technique, any il-
legal EPT switch bypassing the Guardian-VM encounters an
EPTP entry with the zero value which causes a VM exit and
wakes up the RootVisor to stop the attacker. This technique
requires no EPT modiﬁcation and thus avoids TLB ﬂushing.
Furthermore, the VMCS is a per-CPU structure which allows
applying the technique to each vCPU independently.
4.4.2 Isolated Guardian-VM Page Table
We do not prevent the attacker from guessing the base ad-
dress of the Guardian-VM page table. Instead, we prevent in-
stalling the Guardian-VM page table. To do that, the RootVi-
sor puts the Guardian-VM page table at a GPA which ex-
ceeds the maximum GPA used by the guest VM and the
SubVisor. Theoretically, an EPT can support 256TB physi-
cal memory that is usually not used up in practice. For ex-
ample, the maximum GPAs for the SubVisor and guest VMs
are smaller than 16GB on our test machine and the RootVi-
sor puts the Guardian-VM page table pages at the GPA larger
than 16GB.
Guest-EPT
Guardian-EPT
SubVisor-EPT
Entry Page
Entry Page
Guest
Page Table
Exit Page
Exit Page
SubVisor 
Page Table
Main Page
Guardian-VM
Page Table
Figure 6: The pseudo code of the Guardian-VM.
CloudVisor-D design. Fortunately, we observe that the
VMFUNC instruction causes a VM exit if the target EPTP
entry in the EPTP list points to an invalid EPT. Therefore,
by controlling the EPTP entry in the EPTP list, we propose
a new technique called the dynamic EPTP list manipulation
to ensure that both the guest VM and the SubVisor switch to
the Guardian-VM before switching to the other EPT, which
thus enforces Invariant 1. The intuition behind this tech-
nique is that the Guardian-VM dynamically puts and clears
the base address of the SubVisor-EPT (or the Guest-EPT) in
the EPTP list before entering and after leaving the SubVisor
(or the guest VM).
Figure 6 is the pseudocode of the Guardian-VM and