number of elements in the partition
a new variable length block
list of B(cid:48)
size of B(cid:48)
list of variable lengths u(cid:48)
index k0 of a block Bk0 after which the
repartition starts, index k1 of a block Bk1
before which the repartition terminates
sentinel lengths, valued at 0
sentinel blocks, designating an empty
string
i forming the new subpartition
i, in number of bytes
i
Table 1: Notations
1: Let S be the size of D and B the list of parts initially empty;
2: Generate a number a from the probability distribution φ and
3: If S > 0 insert the part containing the next a bytes in B and
set S = S − a;
go to step 2;
4: Otherwise, insert the part containing the next S + a bytes in B
and return B.
For instance, with a discrete uniform distribution U([1, N ]) and
a ﬁctitious block-size N of 4 bytes, a document of 19 bytes could be
cut into parts (Bi)i=0..6 of corresponding lengths (2, 4, 3, 2, 3, 1, 4).
3.2 Operations on document
To obtain a fully incremental cryptosystem, we deﬁne a byte-
wise space of modiﬁcations Mb.
The general ﬁne-grained
operations M ∈ Mb that we have to consider are M =
(bytes_substitute, i, j, δ) which substitute byte i + 1 to byte j − 1
(included) by δ, a bytestring of any length (possibly empty). Con-
sidering a n-byte string document D = b1b2 . . . bn, a modiﬁ-
cation (bytes_substitute, i, j, δ) can be interpreted as taking the
string b1b2 . . . bi−1bibjbj+1 . . . bn−1bn and inserting δ just af-
ter the byte index i so that we obtain the new document D(cid:48) =
b1b2 . . . bi−1biδbjbj+1 . . . bn−1bn.
Ideally, an update algorithm on inputs D and M returns an up-
dated partition D(cid:48) for the new document D(cid:48). Subsection 3.4 ex-
plains how are realized the update operations and give an example.
3.3 Notations
The main notations used are described in Table 1. (cid:107) is the con-
catenation operator. δ denotes the bytestring to insert. |.| denotes
the size of a data in bytes or the number of elements in a sequence
m=0 um that accumulates
terms from u0 to un. The sentinel indices −∞ and +∞ (used by
convention either for a byte or a block) are necessary in the case
of modiﬁcation at the very beginning or the end of the document.
We also need to specify a padding function pad taking as input a
variable-length block Bk and padding it with a sufﬁcient number of
bits to obtain a block of size N. The choice of these padding bits
depends on the use context. Thus, if its purpose is to be used in a
signature scheme, pad assume an input block of size strictly lower
than N and returns the padded block Bk||108(N−uk)−1. However,
if it has to be used in an encryption scheme, pad returns the padded
block Bk||08(N−uk).
(list). We specify a function f (n) =(cid:80)n
3.4 Algorithmic approach
The challenge is the following, after a modiﬁcation operation
M ∈ Mb, the resulting sequence of random draws (ui) has to be
as if each ui (except the last one) has been picked up following the
probability distribution φ.
0, Bδ
1, . . . , Bδ
ﬁnd a sequence (ui)i=0...s satisfying(cid:80)s
In order to realize an insertion of a data δ (consider an insertion
performed between two parts, for the sake of simplicity), the two
ﬁrst solutions that come to mind are the following: (i) partition δ in
the same way as the document is partitioned, that is to say, in δ and
insert it at the good location in D; (ii) repeat random draws until we
i=0 uj = |δ|, and insert the
partition (Bδ
s ) of δ at the good location in D. None
of these two approaches are satisfactory solutions since they lead to
an observable bias after repeated insertions. The bad consequences
are the absence of perfect privacy and even overheads (in space and
time) since the partition is used as input to a block-based incremen-
tal scheme. Our approach proposes to ensure a (shift-)coupling of
random walks, a random step in a walk corresponding to a random
draw ui ∼ φ. Thus, we will see that performing a modiﬁcation
while respecting the lengths distribution leads almost systemati-
cally to a repartitioning of an untouched but quite limited subpart
of the document.
Case study of an insertion of δ at a byte located between the last
byte of Bk−1 and the last byte of Bk. Two cases may occur: (i)
case 1: the insertion is between the last byte of Bk−1 and the ﬁrst
byte of Bk; (ii) case 2: the insertion is between two bytes of Bk.
Let a random sequence (ui)i=0..n be drawn i.i.d. from a discrete
distribution. The problem is to generate a sequence of i.i.d. draws
(u(cid:48)
i)i=k..l from this distribution until we ﬁnd a couple of indices
(l, m) satisfying the following equality
(cid:48)
j =
u
uj + |δ| .
(1)
j=k
j=k
The resulting sequence of variable sized data blocks is then B0,
. . . , Bk−1, B(cid:48)
l, Bm+1, . . . , Bn where the subsequence of
blocks (B(cid:48)
i)i=k..l) which contains
the inserted data replaces the subsequence (Bi)i=k..m. Let us see
i)i=k..l (of respective lengths (u(cid:48)
k, . . . , B(cid:48)
l(cid:88)
m(cid:88)
5074 + u(cid:48)
δ ← Bk0 [1, uk0 − l](cid:107)δ; c ← c + uk0 − l; k0 ← k0 − 1;
3 = 1 indicates that B(cid:48)
3 + u(cid:48)
an example illustrating the case 1 in Figure 1a: we have a 19 byte-
sized document and we want to insert a 3 byte-sized data d right
after the ninth byte. To achieve this, it is likely that the subsequence
of variable-length blocks (Bj)j≥3 need to be repartitioned accord-
ing to our distribution law in a manner consistent with the equation
1 and the insertion of this new data. As can be seen, the ﬁrst random
draw u(cid:48)
3 can not receive the 3 bytes to insert,
which brings us to the second random draw u(cid:48)
4 = 3. If the sum of
draws u(cid:48)
4 = 4 allows for the insertion of d, one byte remains
to be ﬁlled but this is not sufﬁcient for the two following bytes of
B3, which brings us to the third draw u(cid:48)
5 = 2. Once again, the sum
of draws u(cid:48)
5 = 6 allows for receiving the ﬁrst ﬁve bytes
|d| + u3 of d(cid:107)B3 but one byte remains unﬁlled and is insuﬁcient
for receiving the three bytes u4 of B4, which brings us to the fourth
draw u(cid:48)
6 = 8
allows for receiving the data d and the content of the subsequence
of blocks (B3, B4), which ends this partial repartition. Figure 1b
illustrates the case 2. As one can see, this insertion could fragment
B1 and thus force us to include this block in the repartition. Fi-
nally this resulting partial repartition covers the data to insert and
the content of the previous subpartition (B1, B2).
6 = 2. Finally, the sum of draws u(cid:48)
5 + u(cid:48)
3 + u(cid:48)
3 + u(cid:48)
4 + u(cid:48)
(a) Insertion between two parts
B2 and B3
(b) Insertion inside a part
B1
Figure 1: Insertion of 3 bytes, ∀i ui ∼ U ([1, N ]), N = 4
Algorithm 1 outputs the repartitioned subpart including the mod-
iﬁcation together with indices indicating the untouched parts. For
instance, an output (k0, k1, B(cid:48), u(cid:48)) means that the previous par-
tition B is untouched from index 0 to k0 (included) and from
index k1 (included) to |u| − 1. Consequently, the subpartition
(Bk0+1, . . . , Bk1−1) is replaced by (B(cid:48)
|u(cid:48)|−1). We de-
scribe also an algorithm T op that translates an operation in Mb
into an operation in MB. This one is usefull for the generic con-
struction presented in Subsection 3.5.
3.5 Generic construction
0, . . . , B(cid:48)
We deﬁne here a byte-wise incremental scheme by a 4-tuple
of algorithms Ξ = (SetU p, T ransf ormation, IncU pdate,
Conjugate). We write generic algorithms for the keys genera-
tion, tranformation and incremental update. As it does not seem
possible to write a generic algorithm for the conjugate, we propose
a version corresponding to the decryption algorithm of an encryp-
tion scheme and another one corresponding to the veriﬁcation algo-
rithm of a signature scheme. All these algorithms rely on the use of
a block-based incremental cryptographic scheme Π which operates
on strings over the alphabet(cid:80) = {0, 1}8N .
A SetUp algorithm takes as input a security parameter k and re-
turns the key pair generated by Π.K(k). If this one corresponds to
(cid:54)= K(cid:48)(cid:48). The
a symmetric scheme then K(cid:48) = K(cid:48)(cid:48), otherwise K(cid:48)
algorithm 2a probabilistically partitions the document D in vari-
able length blocks Bi, pads each blocks Bi in ﬁxed length blocks
Pi, concatenates them and apply the tranformation algorithm to the
resulting string. Finally, the cryptographic form returned is (u, t).
Note that for encryption schemes, the way of padding each block
Algorithm 1 BytesUpdate
Input: A probability distribution φ on the set {1, . . . , N(cid:48)} where
N(cid:48) ≤ N,
the list
u of corresponding lengths, a byte-wise operation M(cid:48) =
(bytes_substitute, i, j, δ).
the partition B of a document D,
m=0 um|f (n) ≥ i(cid:1);
m=0 um|f (n) ≥ j − 1(cid:1);
(cid:0)f (n) =(cid:80)n
(cid:0)f (n) =(cid:80)n
1: B(cid:48) ← (); u(cid:48) ← (); c ← |δ|;
2: if i = −∞ then
k0 ← −∞; go to step 10;
3:
4: if i = |D| then
k0 ← |u| − 1; k1 ← +∞; go to step 15;
5:
6: k0 ← argminn
7: l ← f (k0) − i;
8: if l > 0 then
9:
10: k1 ← argminn
11: l ← f (k1) − j + 1;
12: if l > 0 then
13:
14: k1 ← k1 + 1
15: x
16: if x = c then
17:
18: if x  c]
22:
23:
24:
25:
26:
27: return (k0, k1, B(cid:48), u(cid:48));
δ ← δ(cid:107)Bk1 [uk1 − l + 1, uk1 ]; c ← c + l;
φ← {1, . . . , N(cid:48)};
u(cid:48) ← (u(cid:48), x); B(cid:48) ← (B(cid:48), δ); go to step 27;
c ← c − x; u(cid:48) ← (u(cid:48), x); B(cid:48) ← (B(cid:48), δ[1, x]);
δ ← δ[x + 1, c]; go to step 15;
if k1 = |u| then
u(cid:48) ← (u(cid:48), c); B(cid:48) ← (B(cid:48), δ); k1 = +∞;
go to step 27;
c ← c + uk1; δ ← δ(cid:107)Bk1; k1 ← k1 + 1;
go to step 16;
tioned parts
Algorithm 2 Top
Input: A probability distribution φ, an operation M(cid:48) ∈ Mb,
the partition B of a document D, the list u of corresponding
lengths
Output: An operation M ∈ MB, the list of lengths u(cid:48) of reparti-
1: P ← “”;
2: (k0, k1, B(cid:48), u(cid:48)) ← BytesU pdate(φ, B, u, M(cid:48));
3: for i = 0 to |u(cid:48)| − 1 do
i]); P ← P(cid:107)Pi;
i[1, u(cid:48)
4:
5: M ← (blocks_substitute, k0, k1, P );
6: return (M, u(cid:48));
Pi ← pad(B(cid:48)
does not matter contrary to signature schemes for which a stan-
dard padding is mandatory (for instance a sequence of bits start-
ing by a single one and followed by consecutive zeroes). To avoid
trivial forgeries, this standard padding has to appear whatever the
size of the usable part is. That is why, in order to avoid repeti-
tion of our algorithms, we present them by assuming the use of the
correct padding function and a probability distribution φ on a set
{1, . . . , N(cid:48)} where N(cid:48) < N in the case of a signature scheme or
N(cid:48) = N in the case of an encryption scheme.
The algorithm 2b describes a decryption algorithm of an encryp-
tion scheme. It decrypts t and retreives the string of padded blocks,
removes the padding of each blocks in order to obtain the variable
Insertion ofd(3 bytes) after index 92233142334112244dPartialDocumentPaddingrepartitionPartitiondrawsnew random insertedd2233142232344114dInsertion ofd(3 bytes) after index 5508Input: A probability distri-
bution φ, a document D, a
key K(cid:48)
(u, D) ← P art(φ, D);
for i = 0 to |u| − 1 do