more information, see IBM MQ installation overview and Installing and uninstalling IBM MQ on AIX.
To run the verification procedure, see Verifying an IBM MQ installation on AIX. Also look at
Configuring IBM MQ for information about post-installation configuration of IBM MQ.
2.Have any changes been made since the last successful run?
Changes that have been made to your IBM MQ configuration, or changes to other applications that
interact with IBM MQ could be the cause of your problem.
When you are considering changes that might recently have been made, think about the IBM
MQ system, and also about the other programs it interfaces with, the hardware, and any new
applications. Consider also the possibility that a new application that you are not aware of might
have been run on the system.
• Have you changed, added, or deleted any queue definitions?
• Have you changed or added any channel definitions? Changes might have been made to either IBM
MQ channel definitions or any underlying communications definitions required by your application.
• Do your applications deal with return codes that they might get as a result of any changes you have
made?
• Have you changed any component of the operating system that might affect the operation of IBM
MQ?
3.Have you applied any maintenance updates?
If you have applied a maintenance update to IBM MQ, check that the update action completed
successfully and that no error message was produced.
IBM MQ troubleshooting and support 9
• Did the update have any special instructions?
• Was any test run to verify that the update was applied correctly and completely?
• Does the problem still exist if IBM MQ is restored to the previous maintenance level?
• If the installation was successful, check with IBM Support for any maintenance package errors.
• If a maintenance package has been applied to any other application, consider the effect it might
have on the way IBM MQ interfaces with it.
4.Has the application run successfully before?
If the problem appears to involve one particular application, consider whether the application has run
successfully before:
• Have any changes been made to the application since it last ran successfully?
If so, it is likely that the error lies somewhere in the new or modified part of the application. Take a
look at the changes and see if you can find an obvious reason for the problem. Is it possible to retry
using a back level of the application?
• Have all the functions of the application been fully exercised before?
Could it be that the problem occurred when part of the application that had never been invoked
before was used for the first time? If so, it is likely that the error lies in that part of the application.
Try to find out what the application was doing when it failed, and check the source code in that
part of the program for errors. If a program has been run successfully on many previous occasions,
check the current queue status and the files that were being processed when the error occurred.
It is possible that they contain some unusual data value that invokes a rarely-used path in the
program.
• Does the application check all return codes?
Has your IBM MQ system been changed, perhaps in a minor way, such that your application does
not check the return codes it receives as a result of the change. For example, does your application
assume that the queues it accesses can be shared? If a queue has been redefined as exclusive, can
your application deal with return codes indicating that it can no longer access that queue?
• Does the application run on other IBM MQ systems?
Could it be that there is something different about the way that this IBM MQ system is set up that is
causing the problem? For example, have the queues been defined with the same message length or
priority?
Before you look at the code, and depending on which programming language the code is written
in, examine the output from the translator, or the compiler and linkage editor, to see if any errors
have been reported. If your application fails to translate, compile, or link-edit into the load library, it
will also fail to run if you attempt to invoke it. For information about building your application, see
Developing applications.
If the documentation shows that each of these steps was accomplished without error, consider the
coding logic of the application. Do the symptoms of the problem indicate the function that is failing
and, therefore, the piece of code in error? The errors in the following list illustrate the most common
causes of problems encountered while running IBM MQ programs. Consider the possibility that the
problem with your IBM MQ system could be caused by one or more of these errors:
• Assuming that queues can be shared, when they are in fact exclusive.
• Passing incorrect parameters in an MQI call.
• Passing insufficient parameters in an MQI call. This might mean that IBM MQ cannot set up
completion and reason codes for your application to process.
• Failing to check return codes from MQI requests.
• Passing variables with incorrect lengths specified.
• Passing parameters in the wrong order.
• Failing to initialize MsgId and CorrelId correctly.
10 Troubleshooting and Support for IBM MQ
• Failing to initialize Encoding and CodedCharSetId following
MQRC_TRUNCATED_MSG_ACCEPTED.
5.Are you receiving errors when you use special characters in descriptive text for some commands?
Some characters, for example, backslash (\) and double quote (") characters have special meanings
when used with commands.
Precede special characters with a \, that is, enter \\ or \" if you want \ or " in your text. Not
all characters are allowed to be used with commands. For more information about characters with
special meanings and how to use them, see Characters with special meanings.
6.Are there any error messages or return codes to help you to determine the location and cause of your
problem?
IBM MQ uses error logs to capture messages concerning its own operation, any queue managers that
you start, and error data coming from the channels that are in use. Check the error logs to see if
any messages have been recorded that are associated with your problem. For information about the
locations and contents of the error logs, see “Error logs on AIX, Linux, and Windows” on page 355.
For each IBM MQ Message Queue Interface (MQI) and IBM MQ Administration Interface (MQAI) call,
a completion code and a reason code are returned by the queue manager or by an exit routine, to
indicate the success or failure of the call. If your application gets a return code indicating that a
Message Queue Interface (MQI) call has failed, check the reason code to find out more about the
problem. For a list of reason codes, see API completion and reason codes. Detailed information on
return codes is contained within the description of each MQI call.
7.Can you reproduce the problem?
If you can reproduce the problem, consider the conditions under which it is reproduced:
• Is it caused by a command or an equivalent administration request? Does the operation work if it
is entered by another method? If the command works if it is entered on the command line, but not
otherwise, check that the command server has not stopped, and that the queue definition of the
SYSTEM.ADMIN.COMMAND.QUEUE has not been changed.
• Is it caused by a program? Does it fail on all IBM MQ systems and all queue managers, or only on
some?
• Can you identify any application that always seems to be running in the system when the problem
occurs? If so, examine the application to see if it is in error.
8.Does the problem affect specific parts of the network?
Have you made any network-related changes, or changed any IBM MQ definitions, that might account
for the problem?
You might be able to identify specific parts of the network that are affected by the problem (for
example, remote queues). If the link to a remote message queue manager is not working, the
messages cannot flow to a remote queue.
• Check that the connection between the two systems is available, and that the intercommunication
component of IBM MQ has started.
• Check that messages are reaching the transmission queue, and check the local queue definition of
the transmission queue and any remote queues.
9.Does the problem occur at specific times of the day?
If the problem occurs at specific times of day, it could be that it depends on system loading.
Typically, peak system loading is at mid-morning and mid-afternoon, so these are the times when
load-dependent problems are most likely to occur.
If your IBM MQ network extends across more than one time zone, peak system loading might seem to
occur at some other time of day.
10.Is the problem intermittent?
An intermittent problem could be caused by the way that processes can run independently of each
other. For example, a program might issue an MQGET call without specifying a wait option before an
earlier process has completed. An intermittent problem might also be seen if your application tries to
get a message from a queue before the call that put the message has been committed.
IBM MQ troubleshooting and support 11
Related concepts
“Additional checks for resource problems on AIX” on page 16
How you determine and resolve problems connected to IBM MQ resources, including resource usage
by IBM MQ processes, determining and resolving problems related to insufficient resources, and your
resource limit configurations.
Related tasks
“Contacting IBM Support” on page 301
If you need help with a problem that you are having with IBM MQ, you can contact IBM Support through
the IBM Support Site. You can also subscribe to notifications about IBM MQ fixes, troubleshooting, and
other news.
“Determining problems with applications, commands and messages on AIX” on page 12
If you encounter problems with IBM MQ applications, commands, and messages, there are a number of
questions that you can consider to help you to determine the cause of the problem.
Related reference
Messages and reason codes
Determining problems with applications, commands and messages
on AIX
If you encounter problems with IBM MQ applications, commands, and messages, there are a number of
questions that you can consider to help you to determine the cause of the problem.
About this task
Use the following questions as pointers to help you to identify the cause of the problem:
• Are messages failing to arrive on the queue?
• Do messages contain unexpected or corrupted information?
• Are unexpected messages received when using distributed queues?
• Have you received no response from a PCF command?
• Are only some of your queues failing?
• Does the problem affect only remote queues?
• Is your application or system running slowly?
As you go through the list, make a note of anything that might be relevant to the problem. Even if your
observations do not suggest a cause straight away, they might be useful later if you need to carry out a
systematic problem determination exercise.
When you open a case with IBM, you can include additional IBM MQ troubleshooting information
(MustGather data) that you have collected to help with investigating the problem. For more information,
see “Collecting troubleshooting information for IBM Support” on page 302.
Procedure
1.Are messages failing to arrive on the queue?
If messages do not arrive when you are expecting them, check if the message been put on the queue
successfully:
• Has the queue been defined correctly? For example, is MAXMSGL sufficiently large?
• Is the queue enabled for putting?
• Is the queue already full?
• Has another application got exclusive access to the queue?
Also check whether you are able to get any messages from the queue:
12 Troubleshooting and Support for IBM MQ
• Do you need to take a sync point? If messages are being put or retrieved within sync point, they are
not available to other tasks until the unit of recovery has been committed.
• Is your wait interval long enough? You can set the wait interval as an option for the MQGET call.
Ensure that you are waiting long enough for a response.
• Are you waiting for a specific message that is identified by a message or correlation identifier (MsgId
or CorrelId)? Check that you are waiting for a message with the correct MsgId or CorrelId. A
successful MQGET call sets both these values to that of the message retrieved, so you might need
to reset these values in order to get another message successfully. Also, check whether you can get
other messages from the queue.
• Can other applications get messages from the queue?
• Was the message you are expecting defined as persistent? If not, and IBM MQ has been restarted,
the message has been lost.
• Has another application got exclusive access to the queue?
If you cannot find anything wrong with the queue, and IBM MQ is running, check the process that you
expected to put the message onto the queue for the following:
• Did the application start? If it should have been triggered, check that the correct trigger options were
specified.
• Did the application stop?
• Is a trigger monitor running?
• Was the trigger process defined correctly?
• Did the application complete correctly? Look for evidence of an abnormal end in the job log.
• Did the application commit its changes, or were they backed out?
If multiple transactions are serving the queue, they can conflict with one another. For example,
suppose one transaction issues an MQGET call with a buffer length of zero to find out the length of
the message, and then issues a specific MQGET call specifying the MsgId of that message. However,
in the meantime, another transaction issues a successful MQGET call for that message, so the first
application receives a reason code of MQRC_NO_MSG_AVAILABLE. Applications that are expected to
run in a multiple server environment must be designed to cope with this situation.
Consider that the message could have been received, but that your application failed to process it in
some way. For example, did an error in the expected format of the message cause your program to
reject it? If so, refer to the subsequent information in this topic.
2.Do messages contain unexpected or corrupted information?
If the information contained in the message is not what your application was expecting, or has been
corrupted in some way, consider the following:
• Has your application, or the application that put the message onto the queue, changed? Ensure that
all changes are simultaneously reflected on all systems that need to be aware of the change. For
example, the format of the message data might have been changed, in which case, both applications
must be recompiled to pick up the changes. If one application has not been recompiled, the data will
appear corrupted to the other.
• Is an application sending messages to the wrong queue? Check that the messages your application
is receiving are not intended for an application servicing a different queue. If necessary, change your
security definitions to prevent unauthorized applications from putting messages on to the wrong
queues. If your application uses an alias queue, check that the alias points to the correct queue.
• Has the trigger information been specified correctly for this queue? Check that your application
should have started; or should a different application have started?
If these checks do not enable you to solve the problem, check your application logic, both for the
program sending the message, and for the program receiving it.
3.Are unexpected messages received when using distributed queues?
If your application uses distributed queues, consider the following points:
IBM MQ troubleshooting and support 13
• Has IBM MQ been correctly installed on both the sending and receiving systems, and correctly
configured for distributed queuing?
• Are the links available between the two systems? Check that both systems are available, and
connected to IBM MQ. Check that the connection between the two systems is active. You can use
the MQSC command PING against either the queue manager (PING QMGR) or the channel (PING
CHANNEL) to verify that the link is operable.
• Is triggering set on in the sending system?
• Is the message for which you are waiting a reply message from a remote system? Check that
triggering is activated in the remote system.
• Is the queue already full? If so, check if the message has been put onto the dead-letter queue. The
dead-letter queue header contains a reason or feedback code explaining why the message could not
be put onto the target queue. For more information, see Using the dead-letter (undelivered message)
queue and MQDLH - Dead-letter header.
• Is there a mismatch between the sending and receiving queue managers? For example, the message
length could be longer than the receiving queue manager can handle.
• Are the channel definitions of the sending and receiving channels compatible? For example, a
mismatch in sequence number wrap can stop the distributed queuing component. For more
information, see Distributed queuing and clusters.
• Is data conversion involved? If the data formats between the sending and receiving applications
differ, data conversion is necessary. Automatic conversion occurs when the MQGET call is issued
if the format is recognized as one of the built-in formats. If the data format is not recognized for
conversion, the data conversion exit is taken to allow you to perform the translation with your own
routines. For more information, see Data conversion.
If you are unable to solve the problem, contact IBM Support for help.
4.Have you received no response from a PCF command?
If you have issued a command but have not received a response, consider the following checks:
• Is the command server running? Use the dspmqcsv command to check the status of the command
server. If the response to this command indicates that the command server is not running,
use the strmqcsv command to start it. If the response to the command indicates that the
SYSTEM.ADMIN.COMMAND.QUEUE is not enabled for MQGET requests, enable the queue for MQGET
requests.
• Has a reply been sent to the dead-letter queue? The dead-letter queue header structure contains
a reason or feedback code describing the problem. For more information, see MQDLH - Dead-letter
header and Using the dead-letter (undelivered message) queue. If the dead-letter queue contains
messages, you can use the provided browse sample application (amqsbcg) to browse the messages
using the MQGET call. The sample application steps through all the messages on a named queue for
a named queue manager, displaying both the message descriptor and the message context fields for
all the messages on the named queue.
• Has a message been sent to the error log? For more information, see “Error log directories on AIX,
Linux, and Windows” on page 357.
• Are the queues enabled for put and get operations?
• Is the WaitInterval long enough? If your MQGET call has timed out, a completion code of
MQCC_FAILED and a reason code of MQRC_NO_MSG_AVAILABLE are returned. See WaitInterval
(MQLONG) for information about the WaitInterval field, and completion and reason codes from
MQGET.
• If you are using your own application to put commands onto the SYSTEM.ADMIN.COMMAND.QUEUE,
do you need to take a sync point? Unless you have excluded your request message from sync point,
you need to take a sync point before receiving reply messages.
• Are the MAXDEPTH and MAXMSGL attributes of your queues set sufficiently high?
• Are you using the CorrelId and MsgId fields correctly? Set the values of MsgId and CorrelId in
your application to ensure that you receive all messages from the queue.
14 Troubleshooting and Support for IBM MQ
Try stopping the command server and then restarting it, responding to any error messages that are
produced. If the system still does not respond, the problem could be with either a queue manager
or the whole of the IBM MQ system. First, try stopping individual queue managers to isolate a
failing queue manager. If this step does not reveal the problem, try stopping and restarting IBM MQ,
responding to any messages that are produced in the error log. If the problem still occurs after restart,
contact IBM Support for help.
5.Are only some of your queues failing?
If you suspect that the problem occurs with only a subset of queues, check the local queues that you
think are having problems.
Use the MQSC command DISPLAY QUEUE to display the information about each queue. If the
CURDEPTH is at MAXDEPTH, the queue is not being processed. Check that all applications are running
normally.
If the CURDEPTH is not at MAXDEPTH, check the following queue attributes to ensure that they are
correct:
• If triggering is being used, is the trigger monitor running? Is the trigger depth too great? That is, does
it generate a trigger event often enough? Is the process name correct? Is the process available and
operational?
• Can the queue be shared? If not, another application could already have it open for input.
• Is the queue enabled appropriately for GET and PUT?
If there are no application processes getting messages from the queue, determine why this is so.
It could be because the applications need to be started, a connection has been disrupted, or the
MQOPEN call has failed for some reason. Check the queue attributes IPPROCS and OPPROCS. These
attributes indicate whether the queue has been opened for input and output. If a value is zero, it