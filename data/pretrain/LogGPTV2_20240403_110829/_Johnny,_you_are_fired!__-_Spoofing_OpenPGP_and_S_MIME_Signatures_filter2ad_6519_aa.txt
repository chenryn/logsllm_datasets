# Title: "Johnny, you are fired!" - Spoofing OpenPGP and S/MIME Signatures in Emails

## Authors:
- Jens Müller, Ruhr University Bochum
- Marcus Brinkmann, Ruhr University Bochum
- Damian Poddebniak, Münster University of Applied Sciences
- Hanno Böck, unaffiliated
- Sebastian Schinzel, Münster University of Applied Sciences
- Juraj Somorovsky, Ruhr University Bochum
- Jörg Schwenk, Ruhr University Bochum

**Abstract:**
OpenPGP and S/MIME are the two primary standards for encrypting and digitally signing emails. Digital signatures are intended to ensure the authenticity and integrity of messages. In this paper, we present practical forgery attacks against various implementations of OpenPGP and S/MIME email signature verification across five attack classes: (1) Edge cases in S/MIME's container format, (2) Exploitation of in-band signaling in the GnuPG API, (3) MIME wrapping attacks, (4) Weaknesses in binding signed messages to sender identity, and (5) UI redressing attacks. Our attacks successfully spoof digital signatures for arbitrary messages in 14 out of 20 tested OpenPGP-capable email clients and 15 out of 22 email clients supporting S/MIME signatures. While these attacks do not compromise the underlying cryptographic primitives, they raise significant concerns about the security of OpenPGP and S/MIME email applications. We also propose mitigation strategies to counter these attacks.

## 1. Introduction
Email remains the most important communication medium on the Internet, predating the World Wide Web by approximately a decade. Early SMTP and email standards did not address confidentiality or message authenticity. Two competing email security standards, OpenPGP and S/MIME, have been supported by many email clients since the late 1990s, offering end-to-end authenticity through digital signatures. Despite low adoption due to usability issues, both technologies are widely used in industries (S/MIME) and by high-risk roles such as journalists, lawyers, and activists (OpenPGP). For example, Debian, a volunteer group with over 1000 members, relies on the authenticity of signed emails for voting on project leaders and proposals. This raises the question: Is it possible to spoof a signed email so that it is indistinguishable from a valid one, even to an attentive user?

### Email Authenticity
As the ARPANET evolved into the Internet, email usage expanded to include sensitive communications in business, military, and political contexts. Technologies like SPF, DKIM, and DMARC can authenticate the domain of the sending SMTP server, but these are primarily useful for mitigating spam and phishing attacks. These technologies do not extend to authenticating the sending person, which is necessary for message authenticity.

### Spoofing Valid Signatures
Signature verification in the context of email is complex. Emails can be signed by entities other than the sender, and signed emails may be forwarded, resulting in partially signed messages. Signatures are an optional feature of email and are generally not enforced. The verification result must be presented to the user in a clear and unambiguous manner. Any failure to do so can lead to signature spoofing attacks, as shown in Figure 1. This paper describes our analysis of the most widely used email clients supporting PGP or S/MIME signatures.

## 2. Background
### 2.1 End-to-End Email Authenticity
The digital signature parts of the OpenPGP and S/MIME standards provide end-to-end authenticity for email messages. Both technologies are configured on the endpoints, allowing technically-versed users to use them independently of the email server configuration. In both standards, keys are bound to users, thus authenticating users independently of the transport.

#### OpenPGP Email Signing
Phil Zimmerman invented PGP (Pretty Good Privacy) in 1991, and its popularity led to its standardization as OpenPGP by the IETF. The most popular implementation is GnuPG. There are two common ways to use OpenPGP in emails: Inline PGP, where the email body directly contains the OpenPGP data, and PGP/MIME, where the email has a multipart/signed MIME structure. Some email clients support PGP natively, while others (e.g., Thunderbird, Apple Mail, and Outlook) require a plugin.

#### S/MIME Email Signing
In 1999, the IETF published S/MIME (Secure/Multipurpose Internet Mail Extension) version 3 as an extension to the MIME standard with certificate-based cryptography. S/MIME uses the Cryptographic Message Syntax (CMS) as its underlying container format. The signatures are always CMS encoded, but the signed message can either be included in the CMS (opaque signature) or transmitted as the first part of a multipart/signed message (detached signature).

### 2.2 Trust and Validity
Verifying the cryptographic integrity of a signature is often insufficient. The public key that generated the signature must be connected to an actual person or entity, such as an email address, by a certificate. S/MIME certificates are issued by trusted certificate authorities, making it easy for users to order and sign messages accepted by all clients. PGP, being a product of the cypherpunk movement, distrusts central authorities, so user IDs in PGP are only self-signed by default. This does not provide any protection against spoofing and places trust management in the hands of users and applications. Historically, PGP users were encouraged to participate in the Web of Trust, a decentralized network of peers signing each other’s user IDs, paired with a scoring system to establish trust paths. However, this approach has been found difficult to use, privacy-invasive, and hard to scale, leading some email clients to implement their own trust models.

## 3. Attacker Model and Methodology
We assume two trustworthy communication partners, Alice and Bob, who have securely exchanged their public PGP keys or S/MIME certificates. The goal of the attacker, Eve, is to create and send an email with arbitrary content to Bob, whose email client falsely indicates that the email has been digitally signed by Alice.

### Attacker Model
- **Mail Only:** Eve can create and send arbitrary emails to Bob, spoofing the sender to Alice's address.
- **Need Signature:** Eve has a single valid S/MIME or OpenPGP signature from Alice, obtained from previous correspondence or public sources.
- **Key Trusted:** Bob trusts Eve's signatures, either because Eve has a valid S/MIME certificate from a trusted CA or because Bob has imported and marked Eve's public key as valid.

An overview of the attack classes and attacker models is given in Table 1. Each attack class is described in Section 4, and the subscript identifies the specific attack (e.g., M1 identifies attack 1 in the MIME attack class).

| Attack Class | Mail Only | Need Signature | Key Trusted |
|--------------|-----------|----------------|-------------|
| CMS (4.1)    |           | C1, C2         | C3, C4      |
| GPG (4.2)    | G1        |                | G2          |
| MIME (4.3)   | M1, M2, M3, M4 |            |             |
| ID (4.4)     | I1, I2, I3 |                |             |
| UI (4.5)     | U1        |                |             |

### Methodology
We define that the authenticity of a signed email is broken in the context of an email client UA if the presentation of a crafted email in UA is indistinguishable from the presentation of a "valid" signed email. We document cases where we could forge some, but not all, GUI elements required for indistinguishability (i.e., a weak forgery).

- **Perfect Forgery ((cid:32))**: If a presentation is identical at any number of user interactions, regardless of additional actions, we call the forgery "perfect."
- **Partial Forgery ((cid:71)(cid:35))**: If a presentation is only identical at the first user interaction, we call the forgery "partial."
- **Weak Forgery ((cid:35))**: If a presentation contains contradicting GUI elements at the first interaction, with some but not all elements indicating a valid signature, we call this forgery "weak."

We suspect that partial forgeries go unnoticed by unwary users, so we classify perfect and partial forgeries as successful attacks. Weak forgeries show signs of spoofing at first glance. As part of our evaluation, we provide screenshots of interesting cases to illustrate the differences.

### Selection of Clients
We evaluate our attacks against 25 widely-used email clients, 20 of which support PGP and 22 of which support S/MIME signature verification. These clients were selected from a comprehensive list of over 50 email clients assembled from public software directories for major platforms (Windows, Linux, macOS, Android, iOS, and web). Clients were excluded if they did not support PGP or S/MIME signatures, were not updated for several years, or were prohibitively expensive. All clients were tested in their default settings with an additional PGP or S/MIME plugin installed, where required.

## 4. Attacks
### 4.1 CMS Attack Class
The Cryptographic Message Syntax (CMS), the container format used by S/MIME, is a versatile standard for signed and encrypted emails. It supports a broad range of use cases and copes with legacy problems, making the standard more complex. Several values in a CMS object are optional, or may contain zero or more values. Additionally, two different signature formats are defined, making it difficult for developers to test all possible combinations.

#### Opaque and Detached Signatures
The CMS and S/MIME standards define two forms of signed messages: opaque and detached signatures. The signature is always a CMS object, but the corresponding message can either be embedded into this object (opaque) or transmitted by other means (detached).

- **Opaque Signatures**: The to-be-signed content is embedded into the binary CMS signature object via an eContent field.
- **Detached Signatures**: The eContent must be absent, and the content is provided by other means, typically using the multipart/signed structure.

#### eContent Confusion (C1)
A confusing situation arises when the eContent field is present even though the multipart/signed mechanism is used. The client can choose which of the two contents (opaque or detached) to verify and display. This is a security issue when the verified content is not equal to the displayed content. The "eContent Confusion" allows perfect forgeries of arbitrary signed emails for a person from which we already have a signed email. Because opaque signatures can be transformed into detached signatures and vice versa, any signed email will work for the attack.

**Figure 1: Screenshot of a spoofed PGP signature in Apple Mail, based on wrapping a signed email published by Phil Zimmermann.**

**Figure 2a: A message with an opaque signature. The message is embedded in the CMS object and is not directly readable by a human.**

**Figure 2b: A message with a detached signature. The email is split into two MIME parts, the first one is the content and the second one is the CMS signature without the eContent field.**

---

This revised version aims to make the text more coherent, clear, and professional, while maintaining the original content and structure.