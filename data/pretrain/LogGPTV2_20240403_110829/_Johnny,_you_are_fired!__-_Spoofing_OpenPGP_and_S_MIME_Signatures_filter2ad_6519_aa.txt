title:"Johnny, you are fired!" - Spoofing OpenPGP and S/MIME Signatures
in Emails
author:Jens M&quot;uller and
Marcus Brinkmann and
Damian Poddebniak and
Hanno B&quot;ock and
Sebastian Schinzel and
Juraj Somorovsky and
J&quot;org Schwenk
“Johnny, you are fired!” – Spoofing OpenPGP and 
S/MIME Signatures in Emails
Jens Müller and Marcus Brinkmann, Ruhr University Bochum; Damian Poddebniak, 
Münster University of Applied Sciences; Hanno Böck, unaffiliated; Sebastian Schinzel, 
Münster University of Applied Sciences; Juraj Somorovsky and Jörg Schwenk, 
Ruhr University Bochum
https://www.usenix.org/conference/usenixsecurity19/presentation/muller
This paper is included in the Proceedings of the 28th USENIX Security Symposium.August 14–16, 2019 • Santa Clara, CA, USA978-1-939133-06-9Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX.“Johnny, you are ﬁred!” – Spooﬁng OpenPGP and S/MIME Signatures in Emails
Jens Müller1, Marcus Brinkmann1, Damian Poddebniak2, Hanno Böck, Sebastian Schinzel2,
Juraj Somorovsky1, and Jörg Schwenk1
1Ruhr University Bochum
2Münster University of Applied Sciences
Abstract
OpenPGP and S/MIME are the two major standards to en-
crypt and digitally sign emails. Digital signatures are sup-
posed to guarantee authenticity and integrity of messages. In
this work we show practical forgery attacks against various
implementations of OpenPGP and S/MIME email signature
veriﬁcation in ﬁve attack classes: (1) We analyze edge cases
in S/MIME’s container format. (2) We exploit in-band sig-
naling in the GnuPG API, the most widely used OpenPGP
implementation. (3) We apply MIME wrapping attacks that
abuse the email clients’ handling of partially signed mes-
sages. (4) We analyze weaknesses in the binding of signed
messages to the sender identity. (5) We systematically test
email clients for UI redressing attacks.
Our attacks allow the spooﬁng of digital signatures for ar-
bitrary messages in 14 out of 20 tested OpenPGP-capable
email clients and 15 out of 22 email clients supporting
S/MIME signatures. While the attacks do not target the un-
derlying cryptographic primitives of digital signatures, they
raise concerns about the actual security of OpenPGP and
S/MIME email applications. Finally, we propose mitigation
strategies to counter these attacks.
1 Introduction
Email is still the most important communication medium on
the Internet and predates the World Wide Web by roughly
one decade. At that time, message authenticity was not a ma-
jor concern, so the early SMTP and email [1, 2] standards did
not address conﬁdentiality or the authenticity of messages.
however, do not extend to authenticating the sending person,
which is necessary to provide message authenticity.
Two competing email security standards, OpenPGP [4]
and S/MIME [5], offer end-to-end authenticity of messages
by digital signatures and are supported by many email clients
since the late 1990s. Digital signatures provide assurance
that a message was written by a speciﬁc person (i.e., au-
thentication and non-repudiation) and that it was not changed
since then (i.e., integrity of messages). Adoption is still low1
due to severe usability issues, but both technologies have
a large footprint either in the industry (S/MIME) or with
high-risk roles such as journalists, lawyers, and freedom ac-
tivists (OpenPGP). One example: Debian (a volunteer group
with over 1000 members) relies on the authenticity of signed
emails for voting on project leaders and proposals. We thus
ask: Is it possible to spoof a signed email such that it is in-
distinguishable from a valid one even by an attentive user?
Figure 1: Screenshot of a spoofed PGP signature in Apple Mail,
based on wrapping a signed email published by Phil Zimmermann.
Email Authenticity As the ARPANET evolved into the In-
ternet, email usage changed. Email is now used for sensitive
communication in business environments, by the military,
politicians and journalists. While technologies such as SPF,
DKIM, and DMARC can be used to authenticate the domain
of the sending SMTP server, these are merely helpful in mit-
igating spam and phishing attacks [3]. These technologoies,
Spooﬁng Valid Signatures Signature veriﬁcation in the
context of email is complex. For example, emails can be
signed by an entity other than the sender or signed emails
may be forwarded (resulting in partly signed messages).
1We examined OpenPGP keyservers and measured over 20k key uploads
per month consistently over the last 4 years. We also found that Thunderbird
reports 150k daily users (on work days) for the PGP-plugin Enigmail.
USENIX Association
28th USENIX Security Symposium    1011
Also, signatures are an optional feature of email and there-
fore generally not enforced. Most importantly, the result of
the veriﬁcation must be presented to the user such that there
is no room for misinterpretation. Any failure to do so may
lead to a signature spooﬁng attack as shown in Figure 1. This
paper describes the results of our analysis of the most widely
used email clients supporting PGP or S/MIME signatures.
Attack Classes Our attacks do not break the cryptography
in digital signatures, but rather exploit weaknesses in the way
PGP and S/MIME signatures are veriﬁed by email clients,
and how the veriﬁcation outcome is presented to the user.
We deﬁne the following ﬁve attack classes:
1. CMS attacks. Cryptographic Message Syntax (CMS)
is a versatile standard for signed and encrypted mes-
sages within the X.509 public-key infrastructure. We
found ﬂaws in the handling of emails with contradicting
or unusual data structures (such as multiple signers) and
in the presentation of issues in the X.509 trust chain.
2. GPG API attacks. GnuPG is the most widely used
OpenPGP implementation, but it only offers a very re-
stricted command line interface for validating signa-
tures. This interface is vulnerable to injection attacks.
3. MIME attacks. The body of an email is conceptu-
ally a MIME tree, but typically the tree has only one
leaf which is signed. We construct non-standard MIME
trees that trick clients into showing an unsigned text
while verifying an unrelated signature in another part.
4. ID attacks. The goal of this attack class is to display a
valid signature from the identity (ID) of a trusted com-
munication partner located in the mail header, although
the crafted email is actually signed by the attacker.
5. UI attacks. Email clients indicate a valid signature by
showing some security indicators in the user interface
(UI), for example, a letter with a seal. However, several
clients allow the mimicking of important UI elements
by using HTML, CSS, and other embedded content.
Contributions We make the following contributions:
• We present the results of our structured analysis of
OpenPGP and S/MIME signature veriﬁcation in 25
widely used email clients.
• We present three new attack classes: attacks based on
CMS evaluation, on the syntax of the GnuPG machine
interface, and on wrapping signed content within invis-
ible subtrees of the MIME tree.
• We adapt two attack classes of web security to the email
context, namely UI redressing and ID spooﬁng.
• We show that our attacks bypass signature validation in
about 70% of the tested email clients, including Out-
look, Thunderbird, Apple Mail, and iOS Mail.
Coordinated Disclosure We reported all our attacks and
additional ﬁndings to the affected vendors and gave advice
on appropriate countermeasures.
2 Background
2.1 End-to-End Email Authenticity
The digital signature parts of the OpenPGP and S/MIME
standards provide end-to-end authenticity for email mes-
sages. First and foremost, both technologies are conﬁgured
on the endpoints and technically-versed users can therefore
choose to use them independently of the email server conﬁg-
uration. In both standards, the keys are bound to users and
thus authenticate users independently of the transport.
OpenPGP Email Signing Phil Zimmerman invented PGP
(Pretty Good Privacy) in 1991 and due to its popularity,
PGP was standardized as OpenPGP by the IETF [6]. The
most popular implementation is GnuPG.2 There are two
common ways to use OpenPGP in emails. With Inline
PGP, the email body directly contains the OpenPGP data.
The MIME multipart standard is not used and the MIME
type is text/plain. With PGP/MIME, the email has
a multipart/signed MIME structure, where the signed
message is the ﬁrst part and the detached signature is the
second part. Some email clients support PGP natively, but
most (in particular Thunderbird, Apple Mail, and Outlook)
need a plugin, which provides an intermediate layer between
the mail client and a PGP implementation like GnuPG.
In 1999,
S/MIME Email Signing
the IETF published
S/MIME (Secure/Multipurpose Internet Mail Extension)
version 3 as an extension to the MIME standard with
certiﬁcate-based cryptography [5]. S/MIME is the result of
a long history of secure email protocols and can be seen as
the ﬁrst Internet standards-based framework to digitally sign,
authenticate, or encrypt emails. S/MIME uses the Crypto-
graphic Message Syntax (CMS) as its underlying container
format. The signatures themselves are always CMS encoded,
but the signed message can either be included in the CMS
(opaque signature) or be transmitted as the ﬁrst part of a
multipart/signed message (detached signature).
2.2 Trust and Validity
Verifying the cryptographic integrity of a signature is often
not sufﬁcient. In addition to this veriﬁcation, the public key
2W. Koch, GNU Privacy Guard, https://gnupg.org/.
1012    28th USENIX Security Symposium
USENIX Association
that generated the signature must be connected to some ac-
tual person or entity, such as an email address, by a certiﬁ-
cate. S/MIME certiﬁcates are issued by certiﬁcate authorities
which are trusted by the email clients. It is easy for users to
order S/MIME certiﬁcates and sign messages which are ac-
cepted by all clients. PGP as a product of the cypherpunk
movement distrusts central authorities, so user IDs in PGP
are only self-signed by default. This does not provide any
protection against spooﬁng and puts responsibility for trust
management into the hands of users and applications. In fact,
no version of the OpenPGP standard deﬁnes a trust model
for user ID binding signatures. Historically, users of PGP
were encouraged to participate in the Web of Trust, a de-
centralized network of peers signing each other’s user IDs,
paired with a scoring system to establish trust paths between
two peers that want to communicate. Signatures and keys
are exchanged through a network of public keyservers. This
approach has been found difﬁcult to use, privacy invasive,
and hard to scale, so some email clients implement their own
trust model (e.g., OpenKeychain, R2Mail2, and Horde/IMP).
3 Attacker Model and Methodology
In our scenario we assume two trustworthy communication
partners, Alice and Bob, who have securely exchanged their
public PGP keys or S/MIME certiﬁcates. The goal of our
attacker Eve is to create and send an email with arbitrary
content to Bob whose email client falsely indicates that the
email has been digitally signed by Alice.
Attacker Model We assume that Eve is able to create and
send arbitrary emails to Bob. The email’s sender is spoofed
to Alice’s address, for example, by spooﬁng the FROM header,
a known impersonation technique which should be prevented
by digital signatures. This is our default attacker model with
the weakest prerequisites. It is sufﬁcient for the UI attack
class, and some CMS and GPG API attacks.
For the MIME attack class and some CMS attacks, we
also assume that the attacker has a single valid S/MIME or
OpenPGP signature from Alice which may have been ob-
tained from previous email correspondence, public mailing
lists, signed software packages, signed GitHub commits, or
other sources. This is a weak requirement as well, because
digital signatures are usually not kept secret.
In fact, in
many cases digital signatures are used explicitly to give pub-
lic proof that some content was created by the signer.
For the ID attack class and one attack in the GPG API
class, we assume that Bob trusts Eve’s signatures. For
S/MIME this condition always holds because Eve can eas-
ily obtain a valid certiﬁcate from a trusted CA for her own
email address. For OpenPGP, Bob must import Eve’s public
key and mark it as valid. This is a stronger condition, but
holds if Eve is a legitimate communication partner of Bob.
An overview of the attack classes and attacker models is
given in Table 1. Each attack class is described in section 4
and the subscript identiﬁes the speciﬁc attack, i.e., M1 iden-
tiﬁes attack 1 in the MIME attack class.
Attacker Model
Attack class Mail only Need signature Key trusted
CMS (4.1)
GPG (4.2)
MIME (4.3)
ID (4.4)
UI (4.5)
M1, M2, M3, M4
I1, I2, I3
C1, C2
–
G2
–
–
C3, C4
G1
–
–
U1
–
–
–
Table 1: Attacker’s capabilities for all test cases in each attack class.
Our attacker model does not include any form of social engi-
neering. The user opens and reads received emails as always,
so awareness training does not help to mitigate the attacks.
Methodology We deﬁne that the authenticity of a signed
email is broken in the context of an email client UA if the pre-
sentation of a crafted email in UA is indistinguishable from
the presentation of a “valid” signed email (either as perfect
or partial forgery). Furthermore, we document cases where
we could forge some, but not all GUI elements required for
indistinguishability (i.e., a weak forgery).
• Perfect forgery ((cid:32))
If a presentation is identical at
any number of user interactions, regardless of any addi-
tional actions the user takes within the application, we
call the forgery “perfect” (e.g., Figure 1).
• Partial forgery ((cid:71)(cid:35)) If a presentation is only identical at
the ﬁrst user interaction (i.e., when an email is opened
and the standard GUI features are visible), we call the
forgery “partial” (e.g., Figure 14).
• Weak forgery ((cid:35))
If a presentation contains contra-
dicting GUI elements at the ﬁrst user interaction, with
some but not all elements indicating a valid signature,
we call this forgery “weak” (e.g., Figure 15).
We suspect that partial forgeries already go unnoticed by
unwitting users, so we classify perfect and partial forgeries
as successful attacks. Weak forgeries show signs of spooﬁng
at the ﬁrst glance. As part of our evaluation, we provide
screenshots of interesting cases to illustrate the differences.
Selection of the Clients We evaluate our attacks against
25 widely-used email clients given in Table 2 and Table 3.
Of these, 20 support PGP and 22 are capable of S/MIME
signature veriﬁcation. They were selected from a compre-
hensive list of over 50 email clients assembled from public
software directories for all major platforms (i.e., Windows,
Linux, macOS, Android, iOS, and web). Email clients were
USENIX Association
28th USENIX Security Symposium    1013
excluded when they did not support PGP or S/MIME signa-
tures, were not updated for several years, or the cost to ob-
tain them would be prohibitive (e.g., appliances). All clients
were tested in the default settings with an additional PGP or
S/MIME plugin installed, where required.
4 Attacks
4.1 CMS Attack Class
The Cryptographic Message Syntax (CMS, the container for-
mat used by S/MIME) is a versatile standard for signed
and encrypted emails.
It not only supports a broad range
of use cases (e.g., multiple signers), but also copes with
legacy problems like lack of software support and misbehav-
ing gateways. This made the standard more complex; several
values in a CMS object are optional, or may contain zero or
more values.3 Furthermore, two different signature formats
are deﬁned. This makes it difﬁcult for developers to test all
possible combinations (either plausible or implausible).
Opaque and Detached Signatures The CMS and
S/MIME standards deﬁne two forms of signed messages:
opaque and detached signatures [7] (also called embedded
and external signatures). The signature is always a CMS ob-
ject, but the corresponding message can either be embedded
into this object or transmitted by other means.
When signing in opaque mode, the to-be-signed content
(i.e., “the message text”) is embedded into the binary CMS
signature object via a so called eContent (or “embedded
content”) ﬁeld (see Figure 2a).
In detached signatures, the eContent must be absent in
order to signal that the content will be provided by other
means. This is what the multipart/signed structure does; the
email is split into two MIME parts, the ﬁrst one is the con-
tent and the second one is the CMS signature without the
eContent ﬁeld (see Figure 2b).
eContent Confusion (C1) A confusing situation arises
when the eContent ﬁeld is present even though the mul-
tipart/signed mechanism is used. In this case, the client can
choose which of the two contents (i.e., either the opaque or
detached contents) to verify and which of the two contents
to display. Clearly, it is a security issue when the veriﬁed
content is not equal to the content which is displayed.
The “eContent Confusion” allows perfect forgeries of ar-
bitrary signed emails for a person from which we already
have a signed email. Because opaque signatures can be trans-
formed into detached signatures and vice versa, any signed
email will work for the attack.
3Here optional means potentially absent, which is different from present
but empty.
From: Alice
To: Bob
Subject: Opaque signature
Content-Type: application/pkcs7-mime; smime-type=signed-data
Content-Transfer-Encoding: base64
(a) A message with an opaque signature. The message is embedded
in the CMS object and is not directly readable by a human.
From: Alice
To: Bob
Subject: Detached signature
Content-Type: multipart/signed; protocol="application/pkcs7-
signature"; boundary="XXX"