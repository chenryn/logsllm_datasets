These paths appear to run strict ﬁrewall rules allowing only very
basic services.
Most of the paths we tested passed both known and unknown
TCP options without interference, both on SYN and data packets.
The results are port-speciﬁc though; 96% of paths passed options
on port 34343, whereas only 80% of paths passed options on port
80. This agrees with anecdotal evidence that http-speciﬁc middle-
boxes are relatively common.
All the paths which passed unknown options in the SYN also
passed both known and unknown options in data segments. In the
tables, the “Removed” rows indicate that packets on that path arrive
with the option removed from the packet. For the unknown options
in the SYN packet, this was the only anomaly we found; no path
failed to deliver the packet due to its presence. In addition, all the
paths which passed the unknown option in the SYN also passed un-
known options in data segments. This bodes well for deployability
of new TCP options—testing in the SYN and SYN/ACK is sufﬁ-
cient to determine that new options are safe to use throughout the
connection.
Our test did not distinguish between middleboxes that stripped
options from SYNs and those that stripped options from SYN/ACKs.
With hindsight, this was an unfortunate limitation of our method-
ology that uses a stateless responder. However it is clear that any
extension using TCP options to negotiate functionality should be
robust to stripped unknown options in SYN/ACK packets, even
if they are passed in SYNs. If it is crucial that the server knows
whether or not the client received the option in the SYN/ACK, the
protocol must take this into account. For example, TcpCrypt re-
quires that the ﬁrst non-SYN packet from the client contains the
INIT1 option - if this is missing, TcpCrypt moves to the disabled
state and falls back to regular TCP behavior.
184Table 6: Types of removal behavior (SYN)
TCP Port
Path
Type
Elim.
Proxy
Total
Other Observed
Effects
None
Proxy SYN-ACK
34343
5
1
6
80
4
16
20
443
5
4
9
Table 7: Types of removal behavior (Data)
TCP Port
Path
Type
Elim.
Proxy
Total
Other observed
effects
None
Proxy
Segment
Re-segmentation
Data
ACK,
Caching,
34343
5
1
80
4
9
443
5
4
6
13
9
For port 34343 and 443, the only behaviors seen were passing or
removing options. The story is more complicated for port 80 (http).
There were seven paths that did not permit our testing methodology
on port 80. In data packets our stateless server relies on instructions
embedded in the data to determine its response. These seven paths
appear to be application-level HTTP proxies, and we were foiled
by the lack of a proper HTTP request in our data packets. They are
labeled Error in the tables. We were able to go back and manually
verify two of these paths were in fact HTTP proxies; we did not get
a second chance to verify the other ﬁve. All seven were in the set
that removed options from SYN packets, which is to be expected if
they are full proxies. Two HTTP proxies that we manually veriﬁed
removed options from data packets and resegmented TCP packets
as well as proxies that are not HTTP-level ones.
There were no other unexpected results with unknown options,
but we did observe some interesting results with the TIMESTAMP
“known option in data” test. Four paths on port 80 and three paths
on port 443 passed on a TIMESTAMP option to the responder, but
it was not the one sent by the initiator. In these cases, although
the responder sent TIMESTAMP in response, this was not returned
to the initiator. This implies that the middlebox is independently
negotiating and using timestamp with the server. These paths are
labeled “Changed” in the tables. Paths in the Removed row in Ta-
ble 5 correspond to those in the Removed or the Changed rows in
Table 4 for all three ports. This implies that option removal on data
segments is not the unknown nature of the option.
Returning to the middleboxes that remove unknown options from
the SYN, we can use the results of additional tests to classify these
into two distinct categories. In the ﬁrst category, the SYN/ACK
received is essentially that sent by the responder, whereas in the
second the SYN/ACK appears to have been generated by the mid-
dlebox. In Sec. 4.4 we explain how ﬁngerprints in the SYN/ACK
let us distinguish the two. Paths in the ﬁrst category appear to ac-
tively eliminate options (we label them “Elim” in Table 6), whereas
a middlebox in the second category is acting as a proxy, and un-
known options are removed as a side effect of this proxy behavior
(these are labeled “Proxy”).
These two categories (Elim and Proxy) also hold when we look
at data segments (see Table 7). Paths that eliminate SYN options
also eliminate data options, whereas paths that show proxy behav-
ior on SYNs also exhibit proxy behavior for data.
In particular,
the proxy symptoms we see are Proxy Data Acks (Ack by the mid-
dlebox, see Sec. 4.4), segment caching (the middlebox caches and
retransmit segments, see Sec. 4.5), and re-segmentation (splitting
and coalescing of segments, see Sec. 4.6). These proxy middle-
boxes show symptoms of implementing most of the functionality
of a full TCP stack, rather than just being a packet-level relay.
Before we ran this study, anecdotal evidence had suggested that
cellular networks would be much more restrictive than other types
of network. The results partially support this, as shown in Table 8.
For port 80, eight out of 20 cellular networks that we tested remove
options; six of the eight proxy the connection. WiFi hotspots are
also relatively likely to remove options or proxy connections, espe-
Table 8: Option removal by Network Type
Network Type
Cellular (out of 20)
Hotspot (out of 34)
Univ (out of 17)
Ent (out of 17)
Total
Remove option (Proxy conn)
port 34343
port 443
4 (1)
1 (0)
0 (0)
1 (0)
6
port 80
8 (6)
6 (5)
3 (3)
3 (2)
20
4 (1)
4 (3)
0 (0)
1 (0)
9
cially for http. Overall though, the majority of paths do still pass
new TCP options.
We conclude that it is still possible to extend TCP using TCP
options, so long as the use of new options is negotiated in the SYN
exchange, and so long as fallback to regular TCP behavior is ac-
ceptable. However, if we want ubiquitous deployment of a new
feature, the story is more complicated. Especially for http, there
are a signiﬁcant number of middleboxes that proxy TCP sessions.
For middleboxes that eliminate options, it seems likely that very
simple updates or reconﬁguration would allow a new standardized
option to pass, assuming it were not considered a security risk. But
for transparent proxies, the middlebox would not only need to pass
the option, but also understand its semantics. Such paths are likely
to be more difﬁcult to upgrade.
4.2 Sequence Number Modiﬁcation
TCP Selective Acknowledgement (SACK) [20] is an example of
a TCP extension that uses TCP options that quote sequence num-
bers, in this case to indicate precisely which segments arrived at the
receiver. How might middleboxes affect such extensions?
In our sequence number modiﬁcation test, we examine both the
outgoing and incoming initial sequence number (ISN) to see whether
middleboxes modify the sequence numbers sent by the end sys-
tems. Table 9 shows the result. Paths where neither the outbound
nor inbound sequence number is modiﬁed are labeled as Unchanged.
Paths where the outbound or inbound sequence number is modiﬁed
are labeled as Mod. outbound and Mod.
inbound, respectively.
Table 9: Sequence Number Modiﬁcation Test
Behavior
Unchanged
Mod. outbound
Mod. inbound
Mod. both
Proxy
mod. both)
Total
(probably
34343
126 (93%)
5 (4%)
0 (0%)
4 (3%)
0 (0%)
TCP Port
80
5 (4%)
1 (1%)
13 (9%)
7 (5%)
443
6 (4%)
1 (1%)
7 (5%)
0 (0%)
116 (82%)
128 (90%)
135 (100%)
142 (100%)
142 (100%)
185Paths where both the outbound and inbound sequence numbers are
modiﬁed are labeled as Mod. both.
Sequence numbers on at least 80% of paths arrive unchanged.
However 7% of paths modify sequence numbers in at least one di-
rection for port 34343 and 18% modify at least one direction for
port 80. For port 80, the same seven paths identiﬁed earlier as hav-
ing application-level HTTP proxies cannot be tested outbound, but
do modify inbound sequence numbers and almost certainly modify
both directions.
One might reasonably expect that middleboxes that proxy a con-
nection would split a TCP connection into two sections, each with
its own sequence space, but that other packet-level middleboxes
would have no reason to modify TCP sequence numbers. If this
were the case, then TCP extensions could refer to TCP sequence
numbers in TCP options, safe in the knowledge that either the op-
tion would be removed in the SYN at a proxy, or sequence numbers
would arrive unmodiﬁed. Unfortunately the story is not so simple.
At a TCP receiver, one use of sequence numbers is to verify the
validity of a received segment. If an adversary can predict the TCP
ports a connection will use, only the randomness of the initial se-
quence number prevents a spoofed packet from being injected into
the connection. Unfortunately TCP stacks have a long history of
generating predictable ISNs, so a number of ﬁrewall products try to
help out by choosing a new more random ISN, and then rewriting
all subsequent packets and acknowledgments to maintain consis-
tency [15, 29].
We compared those paths that pass unknown options in the SYN
with those that modify sequence numbers in at least one direction.
On port 34343, 5 out of 9 allow unknown options and still modify
the sequence numbers. For port 80, 7 out of 26 pass unknown op-
tions, and for port 443 it is 7 out of 14. The numbers are the same
for unknown options in data packets.
We conclude that it is unsafe for TCP extensions to embed se-
quence numbers in TCP options (or anywhere else), even if the
extension negotiates use via a new option in the SYN exchange.†
4.3 Sequence Space Holes
TCP is a reliable protocol; its cumulative Ack does not move
forwards unless all preceding segments have been received. What
would happen if from the vantage point of a middlebox, a TCP im-
plementation violated these rules? Perhaps it wished to implement
partial reliability analogous to PR-SCTP [28], or perhaps it simply
stripes segments across more than one path in a similar manner to
Multipath TCP?
hole:
We can distinguish two ways a middlebox might observe such a
• Data-First: it sees segments before and after a hole, but does
not see the segment from the hole. If the middlebox passes
the segment after the hole, it sees it cumulatively acked by
the recipient, despite the middlebox never seeing the data
from the hole.
• Ack-First: It sees a segment of data, then an ack indicates
the receiver has seen data not yet seen by the middlebox. If
the middlebox passes the Ack, the next segment seen contin-
ues from the point acked, leaving a hole in the data seen by
the middlebox.
These form the basis of our tests shown in Fig. 2. The left side is
the initiator’s time-line in both tests.
†SACK does embed sequence numbers in options, but it predates
the existence of almost all middleboxes. We hope that these mid-
dleboxes are aware of SACK and either rewrite the options or ex-
plicitly remove SACK negotiation from the SYN exchange.
Figure 2: Sequence Hole Tests: data ﬁrst (left) and ack ﬁrst
(right)
Table 10: Data-First Sequence Hole Test
Behavior
Passed
No response
Duplicate Ack
Test Error
Total
34343
131 (97%)
2 (1%)
1 (1%)
1 (1%)
TCP Port
80
6 (4%)
9 (6%)
7 (5%)
443
2 (1%)
5 (4%)
0 (0%)
120 (85%)
135 (95%)
135 (100%)
142 (100%)
142 (100%)
Table 10 shows the result of the data-ﬁrst sequence hole test.
Paths where the second Ack was correctly received are labeled
Passed, and clearly have no middlebox that requires TCP ﬂow re-
assembly. As before, on port 80 there are seven paths with http
proxies we cannot fully test; these are labeled Test Error. The one
path using port 34343 labeled Test Error was due to high packet
loss during the experiment rather than middlebox interference.
The remaining cases are the most interesting. We observed two
distinct middlebox behaviors:
• No response was received to the second data packet.
• A Duplicate Ack was received, indicating receipt of the ﬁrst
data packet and by implication, signaling loss of the packet
in the hole.
A middlebox implementing a full TCP stack would be expected to
break the path into two sections, separately acking packets from
the initiator before sending the data to the responder. This would
give the Duplicate Ack behavior. As expected, we see more such
middleboxes on port 80.
A middlebox that does not respond to the second packet is clearly
maintaining TCP state (or it would pass the second Ack), but it is