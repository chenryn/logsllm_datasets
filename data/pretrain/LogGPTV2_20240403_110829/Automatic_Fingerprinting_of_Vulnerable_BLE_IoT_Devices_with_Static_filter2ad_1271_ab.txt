(e.g., 000000 or 123456) [32]. Furthermore, application programmers
can introduce additional app-level authentication if they have to
use “Just Works”. For instance, they can ask users to enter creden-
tials from mobile apps, and deliver (through encryption) to the IoT
devices to authenticate the apps. That is, with additional cryptog-
raphy protection, the app and device can still establish a secure
channel.
3 THREAT MODEL AND SCOPE
BLE devices are ubiquitous today. In this work, we focus on BLE
devices that use mobile apps (as the gateway to connect to the
Internet and interact with the users). In the following, we discuss
the possible attackers (§3.1), and the scope of attacks under our
consideration (§3.2).
3.1 Types of Attackers
According to where the attackers are located, there could be two
types of attackers against a BLE IoT device:
• Nearby attackers. Being a short-range radio technology,
BLE devices can communicate with a peripheral within at
most 100 meters [25]. Any nearby attackers who are in this
range could attack the device. While this may constrain many
attackers, we also learn that there are long range Bluetooth
adapters that support the sniffing of BLE devices up to 1,000
meters [8].
• Remote attackers. Since BLE IoT devices are accessed by
mobile apps, there could be remote attackers through mal-
ware in the phone. There are various ways for attackers to
install malware in the phone (e.g., social engineering, back-
doors, or direct software vulnerability exploitation). How-
ever, unlike nearby attackers who can attack at anytime, the
remote attackers have to rely on the nearby mobile devices
that need to be power-on.
3.2 Types of Attacks of Our Interest
While malware in the phone can attack a BLE device, we exclude
it in our scope since the attacks performed by malware could be
so broad, especially if the malware has obtained the root privilege
of the phone. Therefore, in this work, we particularly focus on the
nearby attackers and systematically understand their attack capa-
bilities. To this end, we have actually built a long range BLE sniffer
with a Raspberry-PI and a special BLE Antenna (with a cost below
$150) that can scan the BLE devices in the range of 1, 000 meters.
With respect to the nearby attackers, there could be two types
of major attacks: passive attacks that only listen to the BLE traffic,
and active attacks that can aggressively connect, pair, read, and
even write to the devices.
Passive Attack. This attack can be launched by passively sniffing
the BLE traffic and obtaining information from the packets. Note
that only BLE advertisement packet is in plain-text, and all other
packets are encrypted at the BLE link layer. As such, there could
be two types of passive attacks:
• Passive Fingerprinting. Through sniffing the BLE adver-
tisement packets, the attacker is able to obtain the adver-
tisement UUIDs. By knowing the UUIDs, the attacker can
fingerprint which IoT devices and also the corresponding
mobile apps the victims are using, especially if the UUID and
mobile app have a one-to-one mapping. Moreover, if certain
privacy sensitive BLE devices (e.g., blood pressure monitors)
are used, attackers can even learn some privacy knowledge
about the victims.
• Passive Eavesdropping. Since BLE packets except the ad-
vertisement ones are encrypted, attackers need to sniffer
the cryptographic keys in order to get the plain text of the
intercepted traffic. This attack can succeed if the BLE device
and mobile app use “Just Works” for the pairing [24], and the
BLE version is before 4.2 (since Elliptic Curve Diffie-Hellman
(ECDH) key exchange is introduced in this version to pre-
vent the sniffing of long-term key [1]). This is because “Just
Works” before 4.2 uses the hardcoded short-term key (e.g.,
000000) to encrypt the long-term key, which can be sniffed
if the attacker constantly listen to the communication chan-
nel. However, if there is any app-level encryption on the
transferred data, this passive sniffing will not succeed.
Active Attack. Unlike passive attacks that only listen to the traffic,
which could learn a significant amount of privacy information of
the victim from either the plain-text UUID or the decrypted traffic
if the long-term key is obtained, active attacks can cause direct
damages to the victim if the vulnerable BLE devices allow them to
do so. More specifically, there could be four types of active attacks:
• Denial of service (DoS) attack. Due to the reason that one
peripheral BLE IoT device is usually designed to connect
with only one master at the same time, it is possible to con-
duct denial-of-service (DoS) attack by the nearby attackers.
They just only need to constantly listen to the traffic, and if
there is an advertisement packet and then the attackers can
connect with the device (disallowing legitimate users to use
the device). Since DoS attack is trivial to launch, we do not
consider it in this work.
• Active Fingerprinting. If in passive fingerprinting, mul-
tiple mobile apps contain the same UUID, which may be
caused by multiple apps use the same scheme-specific BLE
chip or UUID configuration, then the nearby attackers can-
not precisely know which device the victim is using and may
Session 7A: Internet of ThingsCCS ’19, November 11–15, 2019, London, United Kingdom1472hand, it produces the resolved UUIDs and the reconstructed
hierarchies for UUID fingerprinting (Step ❷). On the other
hand, it identifies the data-definition and data use of BLE-
transmitted data, the involved APIs and cryptographic oper-
ations, for app-level vulnerability identification (Step ❸).
• Step ❷. When provided with the extracted UUIDs and hier-
archies, as well as the real world traces of the field UUIDs,
it then identifies the fingerprint-able IoT devices based on
the app that contains the UUID. Note that one UUID in the
filed may map to multiple apps due to the use of the same
scheme-specific BLE chip or UUID configuration, and it may
need to further narrow down the device by gaining more
data by connecting with the device.
• Step ❸. Next, it identifies devices that are vulnerable to
sniffing or unauthorized access from the app code, based on
whether there is any flawed-authentication, or no authenti-
cation at all, among the devices that use “Just Works” (since
the other three pairing is considered secure and we cannot
directly test them with only mobile apps). BleScope takes
two disjoint approaches. One is to inspect whether the app
has used any cryptographic functions for authentication. If
not, it implies the data transferred between the app and the
device is vulnerable to sniffing attack. The other one is to
detect whether there is any flawed authentication implemen-
tation (even though it has used cryptographic functions).
4.2 Challenges
There are a number of challenges we must solve in order to iden-
tify the nearby vulnerable BLE IoT devices. In particular, we must
extract the UUIDs, reconstruct their hierarchies from the mobile
apps and identify whether there is insecure pairing as well as app-
level vulnerability including absent cryptography usage and flawed
authentication. While it may be easier to identify the insecure pair-
ing and cryptography APIs from the disassembled app code, it is
actually challenging to identify the UUIDs and its hierarchy struc-
ture, as well as the flawed authentication directly from app code.
Therefore, we have the following three major challenges.
C1: UUID extraction. UUIDs play an important role in BLE com-
munication, not only for advertisement (such that the nearby mobile
app knows) but also for accessing each specific service provided in
the BLE. UUIDs are typically 128-bit hexadecimal strings which can
be found in the BLE packets along with the BLE attributes such as
services and characteristics. When providing a mobile app, if UUIDs
are directly hardcoded in the app, then it is easier to extract them
(by simply grepping). For instance, as shown in Figure 4, which
is the decompiled code from a real world BLE IoT thermometer
companion app Kinsa, we can see clearly there are a number of
UUIDs that are hardcoded in the app as constant strings and they
can be easily extracted.
However, we also notice that UUID may be generated through
some complicated calculations (e.g., string concatenation, and bit
shifting). Therefore, we have to design a principled approach to
extract these UUIDs from the mobile app binaries.
C2: UUID hierarchy reconstruction. One single UUID may not
directly fingerprint a BLE device and we need more information
Figure 3: Overview of BleScope.
need to further narrow it down. To this end, an active at-
tacker can further connect to the devices to inspect the next
layer UUIDs (recall BLE devices often organize UUIDs in a
hierarchical structure), and use the hierarchical structure of
the UUIDs to fingerprint a victim BLE device.
• Active Eavesdropping. If a BLE device uses version af-
ter 4.2, then “Just Works” pairing will use ECDH key ex-
change. Consequently, passive eavesdropping will not work
any more, and attackers must perform active MITM attack
to gain an attack controlled long-term key.
• Unauthorized access attack. An unauthorized access is
the most dangerous vulnerability for the IoT devices, since
attackers can read or even write sensitive data to the devices.
This attack can succeed if a device uses “Just Works” pairing
and meanwhile there is no (or flawed) app-level authentica-
tion.
4 OVERVIEW
4.1 Objectives and Attack Overview
Objectives. The key objective of this work is to systematically
investigate, from an adversary perspective, the insecure IoT devices
that are attackable to a nearby attacker, and meanwhile the various
attacks that can be launched by attackers in a specific region (e.g., a
metropolitan city such as New York City). To this end, we have to de-
velop an automated program analysis tool, and we name it BleScope
that takes the following input and produces the following output:
• Input. The input to our attack is all of the IoT Android apps
available from Google Play Store, along with the advertise-
ment UUID sniffed by our passive sniffer in the region.
• Output. The output is the specific IoT-devices that are vul-
nerable to Fingerprinting, Traffic sniffing/eavesdropping,
and Unauthorized access attacks (described in §3.2).
Tool Overview. An overview of our BleScope is presented in Fig-
ure 3. At a high level, it consists of three steps of analysis:
• Step ❶. When given a set of Android IoT apps, it first per-
forms value-set analysis [12] on the low-level APIs. On one
Value-set AnalysisSniffed Advertisement UUIDsFingerprint-able DevicesUnauthorizedAccessible DevicesSniffable-DevicesUUID & HierarchyAndroid APKs231App-level Vulnerability IdentificationUUID Fingerprinting2Session 7A: Internet of ThingsCCS ’19, November 11–15, 2019, London, United Kingdom1473Figure 4: Decompiled code snippet from IoT app Kinsa showing UUIDs extraction and their hierarchical structures.
about the UUID. Interestingly, we notice that UUIDs associated with
an IoT device typically have a hierarchical structure. As shown in
Figure 4, a service contains multiple characteristics and thus a ser-
vice UUID can have “children” UUIDs from its characteristics. Such
a UUID hierarchy could perfectly provide additional information
to accurately determine which IoT app maps to a particular BLE
device.
Therefore, it is necessary to reconstruct hierarchical structure of
the UUIDs for our IoT app and device fingerprinting. Unfortunately,
the hierarchy cannot be directly inferred from the app code because
there is no structural rule on defining parent and children UUIDs.
C3: Flawed authentication identification. For a nearby attacker
to sniff the encrypted traffic or gain unauthorized access to “Just
Works” paired IoT devices, the corresponding apps must not use
any app-level authentication or use flawed authentication. To imple-
ment proper authentication, we assume app must use cryptography
to either encrypt the authentication token with nounces (prevent-
ing replay attack) or even use additional layer of encryption of the
traffic atop BLE link layer encryption. Therefore, if we cannot find
any use of cryptography in the app code, then we can conclude the
channel is not secure (both passive/active sniffing and unauthorized
access can be performed on the devices).
Meanwhile, we also notice flawed authentication in the app. For
instance, all the credentials are hardcoded in the app. Therefore,
even though the app has used the cryptography, this is still not
secure. However, how to identify these flawed authentication is a
challenge since there is no specific code pattern on implementing
authentication in the apps, and we are not able to rely on any docu-
mented APIs to identify them and extract the hardcoded credentials.
4.3 Our Solutions
While each of the above challenges sounds hard to address, fortu-
nately we can develop mobile app binary analysis techniques to
solve them. More specifically, we have the following corresponding
solutions:
S1: Resolving UUIDs using context and value-set analysis. Di-
rectly grepping strings in app byte code may reveal some UUIDs,
especially those hardcoded ones. However, it may have false pos-
itives if a UUID is never used by the app or other type of UUIDs
(in fact, many Java objects in Android also have UUID that has the
same format as the BLE UUID), and it will also have false negatives
if the UUID is dynamically generated through computation. We
have to design a principled program analysis approach to resolve
and extract UUIDs.
Fortunately, we notice that while we may not know the concrete
value of the final UUIDs used by the app statically, we actually
know where the UUIDs are used (i.e., the execution context). In
particular, we find that there are seven documented APIs defined by
the Android BLE framework that carry the UUIDs as parameters,
to generate the instances for accessing the related service, charac-
teristic and descriptor in the paired BLE devices [6]. For instance,
the UUIDs in Figure 4 are used as arguments by the official BLE
API getService() and getCharacteristic(). Therefore, we can
target these APIs to extract UUIDs from the app.
In addition to extracting those constant string UUIDs, we can
also compute those that are not hardcoded ones by using program
slicing [38] and value-set analysis (VSA) [12], which aims at stati-
cally tracking the values of data object and is an effective solution
to our problem. Note that VSA was originally designed to resolve
possible values for registers and memory cells on x86 platforms,
and we have to implement it to extract and compute UUIDs in
Android app code. In fact, one of our prior projects LeakScope [43]
has also leveraged VSA.
S2: Reconstructing UUID hierarchy with control dependence.
While an app could have multiple UUIDs, the usage of them actu-
ally has dependencies. In particular, the instance of a GATT service
must be first initialized by BLE API getService() with the corre-
sponding UUID, and then all of its characteristics can be browsed
by API getCharacteristic(), or updated with specific data to the
peripheral according to the characteristics. Therefore, characteristic
must be derived from the service instance, and getService() must
be executed first, then followed by getCharacteristic(), form-
ing a control dependence. Similarly, a descriptor must be derived
from the corresponding characteristic instance.
1 public classKelvinDeviceProfile{2private KelvinDeviceProfile(BlueToothLeGattarg3) {3      super();4BluetoothGattServicev0= arg3.getService(KelvinGatt.KINSA_SERVICE);5      if(v0!=null) {6       this.request= v0.getCharacteristic(KelvinGatt.REQUEST_CHARACTERISTICS);7       this.response= v0.getCharacteristic(KelvinGatt.RESPONSE_CHARACTERISTICS);8      }910BluetoothGattServicev3= arg3.getService(KelvinGatt.BATTERY_SERVICE_UUID);11     if(v3!=null) {12       this.batterylevel= v3.getCharacteristic(KelvinGatt.BATTERY_VALUE_CHAR_UUID);13     }14}15 }1617 public classKelvinGatt{18public static final UUID KINSA_SERVICE = UUID.fromString(“00000000-006a-746c-6165-4861736e694b”);19    public static final UUID REQUEST_CHARACTERISTICS = UUID.fromString(“00000004-006a-746c-6165-4861736e694b”); 20    public static final UUID RESPONSE_CHARACTERISTICS = UUID.fromString(“00000002-006a-746c-6165-4861736e694b”);21    public static final UUID BATTERY_SERVICE_UUID =UUID.fromString(“0000180F-0000-1000-8000-00805f9b34fb”);22    public static final UUID BATTERY_VALUE_CHAR_UUID = UUID.fromString(“00002A19-0000-1000-8000-00805f9b34fb”);23 }KINSA_SERVICEREQUEST_CHARACTERISTICSRESPONSE_CHARACTERISTICSBATTERY_SERVICE_UUIDBATTRY_VALUE_CHAR_UUIDDeviceSession 7A: Internet of ThingsCCS ’19, November 11–15, 2019, London, United Kingdom1474Meanwhile, the same layer of the characteristic is often guarded
by control dependence as well. For instance, as shown in Figure 4,
at line 4, variable v0 (a GATT service) first initialized by API
getService(), then between line 5 and line 8, two characteristics
of v0 are derived, and they both are guarded by control statement
at line 5. Therefore, the UUIDs of REQUEST_CHARACTERISTICS and
RESPONSE_CHARACTERISTICS are at the same layer and they are
siblings. Also, we can learn from Figure 4 that there are two services
KINSA_SERVICE (initialized at line 4) and BATTERY_SERVICE_UUID
(initialized at line 10), and these two services are also siblings. There-
fore, a hierarchical tree structure of UUIDs can be derived based
on the app code.
S3: Identifying flawed authentication with data dependence.
When using “Just Works” pairing, a device would be vulnerable if
there is no application-level authentication or the authentication
is useless. Unfortunately, application-level authentication can be
implemented in completely different ways across apps, and it is
therefore extremely challenging to design a general approach to
identify flawed authentication.
However, we notice there is one special type of flawed authen-
tication which can be identified systematically: the case that uses
hardcoded credentials, and we can model this case using a data flow
analysis. Our key insight is that to securely authenticate a mobile
app to a BLE device, the app must provide a credential that comes
from the external input, such as letting the user enter a password.
Otherwise, if all of the commands sent out are hardcoded, then
there will be no authentication at all. Therefore, we can use a data
flow analysis algorithm to identify these apps. In particular, since
all the data sent out to the peripheral must go through low-level
BLE APIs, so called the “sink”, starting from the sink, we can apply
program slicing to trace back to the “source” of the data. If none of
the sources comes from any external input (e.g., network return,
user input), then the app has used hardcoded commands including
possible passwords if there is any to interact with the BLE devices.
5 DETAILED DESIGN
In this section, we present the detailed design of BleScope, which
aims at (i) extracting the value of each UUID and reconstructing the
hierarchy of each group of UUIDs, and (ii) identifying vulnerable
implementation in terms of absent cryptographic usage and flawed
authentication. As the fundamental technique of our tool, we first
explain how our value-set analysis works in §5.1, and then describe
how to configure the value-set analysis technique to achieve the
above two purposes in §5.2 and §5.3, respectively.
5.1 Value-set Analysis
At a high level, the value-set analysis (VSA) consists of backward
program slicing and forward value computation. In this work, we