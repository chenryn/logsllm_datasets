代码仓库提供了 支持这些协作的几个重要功能。 首先， 它们作为开发人员放置源代码的中心存
储点。 此外， 代码仓库(如 GitHub、 Bitbucket 和 SourceForge)还提供版本控制、 错误跟踪、 Web 托管、
发布管理和支持软件开发的通信功能。
代码仓库是促进软件开发的出色的协作工具 ， 但它们也有自 己的安全风险。 首先， 开发人员必
须适当地控制对仓库的访问。 一些仓库， 如支持开源软件开发的仓库， 可能允许公众访问。 其他仓
库， 如托管含有商业机密信息的代码， 可能受到更多限制， 并限制对授权开发者的访问 。 仓库所有
者必须仔细设计访 问 控制 ， 仅允许适当的用户读取和/或写入访问权限。
敏感信息和代码仓库
开发人员 必须注意 不要在公共代码仓库 中 包含敏感信息， 这尤其适用 于 API 密钥 。
许 多 开 发人员使用API 来 访 问 基础 设 施服务提供商的基础功能， 1f'H I口 Amazon Web
Services(A WS)、 Microsoft Azure和Google Compute Engine. 这提供了 巨 大的好处， 使开发人员 能够
快速配直服务器 、 修改网 络配直和使用 简 羊的API调用 来分配存储。
当 然， laaS 提供商对这些服务收费 。 当 开发人员 准备一台服务器时， 就会触发该服务器每小 时
收费， 直到 它被关闭。 用 于创 建服务器的 API 密钥将服务器绑定到特定的用户 账户(和信用 卡 ! )。
如果开发人员 编写 包含API 密钥的代码， 然后将 API 密钥上传到公共存储库， 贝IJ世界上的任何
人都可以访问他们的 API 密钥。 这九许任何人创建 IaaS 资源， 并且费用 由原开发者的信用卡支付。
在进一步恶化的情况下， 黑客已经写 了机器人， 四处搜索公共1v冯仓库中 泄露的 API 密钥。 这
些机器人可以在几秒钟内检测到无意 中发布的 密钥 ， 并九许黑客在开发人员 甚至知道他们的4如吴之
前快速提供大量的 计算资源 !
604
20. 1 .10 服务等级协议
使用服务等级协议(SLA)是越来越流行的方式， 是被服务提供商和服务供应商都认同的确保组
织向 内部和/或外部客户提供服务， 并保持适当服务水平的一种方法。 对于组织的持续生存能力 ， 把
所有的数字电路， 应用程序、 信息处理系统、 数据库或其他关键组件都置入 SLA 是明智的， 也是至
关重要的 。 SLA 中 通常涉及 以下 问题 :
• 系统正常运行时间(如总工作时 间 的百分比)
• 最大连续停机时 间(以秒/分钟为单位等)
• 高峰负荷
• 平均负荷
• 责任诊断
• 故障切换时间(如冗余到位)
如果不能维持协议， 服务级别协议通常还包括财务和其他合约商讨好的补救措施。 例如， 如果
关键电路停机超过 1 5 分钟 ， 服务提供商可能 同 意放弃该 电路上的所有费用一周 。
第 20 章 软件开发安全
20.1. 11 软件采购
企业使用 的大多数软件都不是内部开发的， 而是从供应商那里采购。 这些软件中的一些被购买
并运行在组织管理的服务器上， 无论是在内部还是在基础设施即服务(1坦白环境中 。 其他软件是以软
件即服务(SaaS)方式通过 Web 浏览器从互联网购买和提供的。 大多数组织根据业务需求和软件可用
性 ， 结合使用这些方法。
例如， 组织可能会以两种方式来使用 电子邮件服务。 他们可能购买物理或虚拟服务器 ， 然后在
上面安装电子邮件软件， 如 Microsoft Exchange。 在这种情况下， 组织从 Microsoft 购买 Exchange 许
可证， 然后安装、 配置和管理电子邮件环境。
作为一种替代方案， 组织可能会选择将电子邮件完全外包给 Google、 Microsoft 或其他供应商。
然后， 用户通过他们的 Web 浏览器或其他工具访问 电子邮件， 直接与供应商管理的电子邮件服务器
进行交互。 在这种情况下， 组织只 负责创建账号和管理某些应用程序级的设置。
在任何一种情况下， 安全都应该被关注。 当组织购买和配置软件本身时， 安全专业人员必须了
解软件的正确配置以满足安全 目 标。 他们还必须对安全公告和补丁保持警惕， 以纠 正新发现的漏洞。
不履行这些义务可能会导致不安全的环境。
在 SaaS 环境中 ， 大多数安全责任由供应商负责， 但是组织的安全人员 也不能逃脱责任。 虽然他
们可能不负责同样多的配置， 但他们现在负责监控供应商的安全。 这可能包括审计、 评估、 漏洞扫
描和 旨 在验证供应商是否保持适当控制 的其他措施。
20.2 创 建数据库和数 据仓储
几乎所有的现代型公司都维护着一些类别的数据库， 它们包含操作的关键信息 ， 例如用户的联
系信息、 订单跟踪数据、 人事和福利信息或一些敏感的商业机密。 许多这样的数据库一般都包含属
于用户秘密的个人信息 ， 如信用卡使用活动、 旅行习惯、 商店购物和电话记录。 由于对数据库系统
依赖程度增加， 因此信息安全专家必须确保具备适当的安全控制， 从而保护数据免受未授权的访问、
篡 改或破坏。
接下来， 我们将讨论数据库管理系统(DBMS)的体系结构 、 各种不同 的 DBMS 类型及特性。 随
后还会讨论数据库安全特性， 包括多实例 、 ODBC、 聚合、 推理 以及数据挖掘 。
20.2.才 数据库管理系统的体系结构
尽管 目 前存在多种可用 的数据库管理系统ρBMS)， 但当今的大多数系统都使用一种被称为关
系型数据库管理系统(RDBMS)的技术。 因此， 下面的内容主要关注于关系数据库 。 不过， 我们首先
要讨论两个重要的 DBMS 体系结构 : 层次式数据库和分布式数据库 。
1 . 层次式和分布式数据库
层次式数据模型将关联的记录和字段组合为一个逻辑树结构。 运会导致一个 " 一对多 " 数据模
型 ， 其中 的每个节点可能不具有子节点， 也可能具有一个或多个子节点， 但是都只具有一个父节点。
605
606
CISSP 官方学习指南(第 7 版)
图 20.7 说明了一个层次式数据模型 。
首席执行官
图 20.7 层次式数据模型
图 20.7 中的层次式数据模型是一家公司的组织结构 图。 注意， 这个示例适用 " 一对多" 数据模
型 。 某些员工拥有一名部下， 某些员工拥有多名部下， 另外一些员工则没有部下 。 然而， 每位员 工
都只拥有一位经理。 层次式数据模型的其他模型包括 NCAA 的 "三月 疯 " 对垒系统以及在互联网上
使用 的域名系统(DNS)记录的层次化分布 。 层次数据库以一种分层的方式来存储数据， 并且对于适
合该模型的专用应用程序是有用的。 例如， 生物学家可能会使用一个层次数据库存储标本数据， 在
那个领域 内 根据 kingdom/phylum/c1ass/orderlfamily/genus/species 层次模型。
分布式数据模型将数据存储在多个数据库中 ， 不过这些数据库是逻辑连接的。 即使数据库由通
过互联网相互连接的许多部分组成， 用户也仍然将数据库理解为单个实体。 每个字段都具有许多子
宇段和父宇段。 因此， 分布式数据库的数据映射关系是多对多 。
2. 关系数据库
关系数据库是由 行和列组成的平面二维表。 实际上， 每个表看起来类似一个电子表格文件。 行
列结构提供 了一对一数据映射关系。 关系数据库的主要构件是表(也被称为关系)。 每个表都包含一
组相关 的记录。 例如， 某个销售数据库可能包含下列表:
• Customers 表 ， 包含组织中所有客户 的联系信息。
• Sales Reps 表 ， 包含组织中销售人员 的 身份信息 。
• Orders 表 ， 包含每个用户 所下订单的记录。
面向对象编程和数据库
对象-关 系数据库结合 了 关系数据库和面向对象编程功能。 在真正的 面向对象数据库(OODB)中 ，
由 于方便了 千》萄重用 和故障处理分析， 并减少 了 整体维护工作量， 因 而带来了好处。 此外， 与 其他
数据库类型相比， OODB 史适合支持涉及多媒体、 CAD、 视颇、 图形和专家系统的复杂应用程序 。
上述每个数据表都包含许多属性或宇段(field)。 每个属性都对应表中 的某个列。 例如， Customers
表可能包含用于公司名 、 地址、 城市、 州 、 邮政编码和 电话号码的不同列。 每个用户 都具有自己的
记录或元组(阳ple)， 这些记录或元组由表中的某行表示。 关系中行的数量被视为基数(cardinality)， 列
的数量被视为度(d巳g巳巳)。 关系的域(domain)是一组属性可以来用 的允许值。 图 20.8 说明了某个关系
数据库 中 Customers 表 的示例 。
第 20 章 软件开发安全
图 20.8 关系数据库的 Customers 表
在这个示例中 ， Customers 表的基数为 3(对应于表中的 3 行)， 度为 8(对应于表中 的 8 列)。 在正
常业务过程中 ， 例如当销售代表添加新客户时， 表的基数发生变化是很常见的。 表的度通常不会频
繁 改变 ， 通常需要数据库管理员 的干预才能变。
提示 :
为 了 记住基数(cardinality)的概念， 可以想象一下摆在桌上的一副纸牌， 每张牌(card 是 cardinality
的前 4 个字母)就是一行。 为 了 记住度(degr四)的概念， 可以想象一下挂在墙上的温度计(换句话说，
作 为温度计测量单位的度数 degree)。
定义表之间的关系以标识相关记录。 在此例中 ， Customers 表和 Sales Rep 表之间存在关系， 因
为每个客户 都被分配 了 一个销售代表， 而每个销售代表被分配给一个或多个客 户 。 此关系 由
Customers 表中的 Sales Rep 宇段/列反映， 如图 20.8 所示。 此列中 的值指的是 Sales Rep 表 中包含的
销售代表 D 宇段(未显示)。 此外， Customers 表和 Orders 表之间也可能存在关系， 因 为每个订单必
须与客户相关联， 并且每个客户与一个或多个产品 订单相关联。 Orders 表(未显示)可能包含一个包
含客户 ID 值 的客户宇段。
记录可以使用多种键进行标识。 简单地说， 键是表中宇段的子集， 可 以用于唯一标识记录。 在
希望相互引用这些信息时， 它们还被用 于连接表。 你应当熟悉下列三种键:
候选键 可 以被用于唯一标识表中记录的属性子集。 在 同一个表中， 对于组成一个候选键的所
有属性而言， 任何两条记录的这些属性值都不完全相同 。 每个表都可能有一个或多个候选键， 它们
从列 的头部选出 。
主键 从表的这组候选键中选出的用来唯一标识表中记录的键被称为主键。 每个表都只有一个
主键， 由 数据库设计者从这组候选键中选出。 通过不准许利用相同主键插入多个记录， RDBMS 强
制实施了 主键的唯一性。 在 图 20.8 所示的 Customers 表 中 ， CompanyID 很 可能就是主键。
外键 外键被用于强制在两个表之间建立关系(也称为参照完整性)。 参照完整性确保: 如果一
个表包含一个外键， 那么它对应于关系中另一个表内仍然存在的主键。 需要弄清楚的是， 没有任何
记影元组/行包含对不存在的记和元却行的主键的引用。 根据前面的描述。 图 20.8 中 的 Sales Rep
宇段是参照 Sales Reps 表中主键的外键。
所有关系数据库都使用一种标准语言， 即 结构化查询语言(SQL)， 从而为用户存储、 检索和更
改数据， 以及管理控制 DBMS 提供了 一致的接 口 。 每个 DBMS 供应商实现的 SQL 版本略有不同(如
Microsoft 公司的 Transact-SQL 和 Oracle 公司 的 PLlSQL)， 但是都支持一个核心特性集。 SQL 的主
要安全特性是其授权的粒度 。 这意味着 SQL 允许为每个极细的级别设置许可。 能通过表、 行、 列 ，