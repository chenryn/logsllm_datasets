will not bounce).  Modules like Mail::CheckUser and Mail::EXPN
try to interact with the domain name system or particular
mail servers to learn even more, but their methods do not
work everywhere\-\-\-especially for security conscious administrators.
.PP
许多人试图用一个简单的正规表示式，例如 \f(CW\*(C`/^[\ew.\-]+\e@(?:[\ew\-]+\e.)+\ew+$/\*(C'\fR 来消除一些通常是无效的 email 位址。不过，这样做也把很多合格的位址给一起滤掉了，而且对测试一个位址有没有希望投递成功完全没有帮助，所以在此建议大家不要这么做；不过您可以看看：
http://www.cpan.org/authors/Tom_Christiansen/scripts/ckaddr.gz ,
这个 script真的彻底地依据所有的 RFC规定来做检验（除了内嵌式 comments外）,同时会排除一些您可能不会想送信去的位址（如 Bill Clinton【美国总统】或您的 postmaster），然后它会确定位址中的主机名称可在 DNS中找得到。这个 script 跑起来不是很快，但至少有效。
.PP
Our best advice for verifying a person's mail address is to have them
enter their address twice, just as you normally do to change a password.
This usually weeds out typos.  If both versions match, send
mail to that address with a personal message that looks somewhat like:
.PP
.Vb 1
\&    Dear PI:EMAIL,
.Ve
.PP
.Vb 5
\&    Please confirm the mail address you gave us Wed May  6 09:38:41
\&    MDT 1998 by replying to this message.  Include the string
\&    "Rumpelstiltskin" in that reply, but spelled in reverse; that is,
\&    start with "Nik...".  Once this is done, your confirmed address will
\&    be entered into our records.
.Ve
.PP
If you get the message back and they've followed your directions,
you can be reasonably assured that it's real.
.PP
A related strategy that's less open to forgery is to give them a \s-1PIN\s0
(personal \s-1ID\s0 number).  Record the address and \s-1PIN\s0 (best that it be a
random one) for later processing.  In the mail you send, ask them to
include the \s-1PIN\s0 in their reply.  But if it bounces, or the message is
included via a ``vacation'' script, it'll be there anyway.  So it's
best to ask them to mail back a slight alteration of the \s-1PIN\s0, such as
with the characters reversed, one added or subtracted to each digit, etc.
.Sh "如何解码一个 MIME/BASE64 字符串?"
.IX Subsection "How do I decode a MIME/BASE64 string?"
MIME-tools套件（可自 CPAN取得）不但可处理这个问题而且有许多其他的功能。有了这个套件，解 BASE64码就变得像这么容易：
.PP
.Vb 2
\&    use MIME::Base64;
\&    $decoded = decode_base64($encoded);
.Ve
.PP
The MIME-Tools package (available from \s-1CPAN\s0) supports extraction with
decoding of \s-1BASE64\s0 encoded attachments and content directly from email
messages.
.PP
一个比较直接的解法是先做一点简单的转译，然后使用 unpack()这个函数的 ``u'' 格式：
.PP
.Vb 4
\&    tr#A-Za-z0-9+/##cd;                   # remove non-base64 chars
\&    tr#A-Za-z0-9+/# -_#;                  # convert to uuencoded format
\&    $len = pack("c", 32 + 0.75*length);   # compute length byte
\&    print unpack("u", $len . $_);         # uudecode and print
.Ve
.Sh "如何返回用户的邮件地址？"
.IX Subsection "How do I return the user's mail address?"
On systems that support getpwuid, the $
\&    To: Final Destination 
\&    Subject: A relevant subject line
.Ve
.PP
.Vb 4
\&    Body of the message goes here after the blank line
\&    in as many lines as you like.
\&    EOF
\&    close(SENDMAIL)     or warn "sendmail didn't close nicely";
.Ve
.PP
The \fB\-oi\fR option prevents sendmail from interpreting a line consisting
of a single dot as \*(L"end of message\*(R".  The \fB\-t\fR option says to use the
headers to decide who to send the message to, and \fB\-odq\fR says to put
the message into the queue.  This last option means your message won't
be immediately delivered, so leave it out if you want immediate
delivery.
.PP
Alternate, less convenient approaches include calling mail (sometimes
called mailx) directly or simply opening up port 25 have having an
intimate conversation between just you and the remote \s-1SMTP\s0 daemon,
probably sendmail.
.PP
Or you might be able use the \s-1CPAN\s0 module Mail::Mailer:
.PP
.Vb 1
\&    use Mail::Mailer;
.Ve
.PP
.Vb 8
\&    $mailer = Mail::Mailer->new();
\&    $mailer->open({ From    => $from_address,
\&                    To      => $to_address,
\&                    Subject => $subject,
\&                  })
\&        or die "Can't open: $!\en";
\&    print $mailer $body;
\&    $mailer->close();
.Ve
.PP
The Mail::Internet module uses Net::SMTP which is less Unix-centric than
Mail::Mailer, but less reliable.  Avoid raw \s-1SMTP\s0 commands.  There
are many reasons to use a mail transport agent like sendmail.  These
include queuing, \s-1MX\s0 records, and security.
.Sh "如何使用 MIME 来为邮件消息增加附件？"
.IX Subsection "How do I use MIME to make an attachment to a mail message?"
This answer is extracted directly from the MIME::Lite documentation.
Create a multipart message (i.e., one with attachments).
.PP
.Vb 1
\&    use MIME::Lite;
.Ve
.PP
.Vb 8
\&    ### Create a new multipart message:
\&    $msg = MIME::Lite->new(
\&                 From    =>'PI:EMAIL',
\&                 To      =>'PI:EMAIL',
\&                 Cc      =>'PI:EMAIL, PI:EMAIL',
\&                 Subject =>'A message with 2 parts...',
\&                 Type    =>'multipart/mixed'
\&                 );
.Ve
.PP
.Vb 8
\&    ### Add parts (each "attach" has same arguments as "new"):
\&    $msg->attach(Type     =>'TEXT',
\&                 Data     =>"Here's the GIF file you wanted"
\&                 );
\&    $msg->attach(Type     =>'image/gif',
\&                 Path     =>'aaa000123.gif',
\&                 Filename =>'logo.gif'
\&                 );
.Ve
.PP
.Vb 1
\&    $text = $msg->as_string;
.Ve
.PP
MIME::Lite also includes a method for sending these things.
.PP
.Vb 1
\&    $msg->send;
.Ve
.PP
This defaults to using sendmail but can be customized to use
\&\s-1SMTP\s0 via Net::SMTP.
.Sh "如何读邮件？"
.IX Subsection "How do I read mail?"
While you could use the Mail::Folder module from \s-1CPAN\s0 (part of the
MailFolder package) or the Mail::Internet module from \s-1CPAN\s0 (part
of the MailTools package), often a module is overkill.  Here's a
mail sorter.
.PP
.Vb 1
\&    #!/usr/bin/perl
.Ve
.PP
.Vb 13
\&    my(@msgs, @sub);
\&    my $msgno = -1;
\&    $/ = '';                    # paragraph reads
\&    while (<>) {
\&        if (/^From /m) {
\&            /^Subject:\es*(?:Re:\es*)*(.*)/mi;
\&            $sub[++$msgno] = lc($1) || '';
\&        }
\&        $msgs[$msgno] .= $_;
\&    }
\&    for my $i (sort { $sub[$a] cmp $sub[$b] || $a  $b } (0 .. $#msgs)) {
\&        print $msgs[$i];
\&    }
.Ve
.PP
Or more succinctly,
.PP
.Vb 6
\&    #!/usr/bin/perl -n00
\&    # bysub2 - awkish sort-by-subject
\&    BEGIN { $msgno = -1 }
\&    $sub[++$msgno] = (/^Subject:\es*(?:Re:\es*)*(.*)/mi)[0] if /^From/m;
\&    $msg[$msgno] .= $_;
\&    END { print @msg[ sort { $sub[$a] cmp $sub[$b] || $a  $b } (0 .. $#msg) ] }
.Ve
.Sh "如何找到我的主机名/域名/IP 地址？"
.IX Subsection "How do I find out my hostname/domainname/IP address?"
长久以来许多 code都很草率地直接呼叫 `hostname` 这个程式来取得主机名。虽然这么做很方便，但也同时增加了移植到其他平台上的困难。这是一个很典型的例子，在方便和可移植性之间作抉择，不论选哪一边，必须付出一些牺牲和代价。
.PP
Sys::Hostname这个模组（标准 perl发行的一部分）可用来取得机器的名字，然后您便可利用 gethostbyname()这个系统呼叫来找出该机的 IP位址了（假定您的 DNS 运作正常）。
.PP
.Vb 4
\&    use Socket;
\&    use Sys::Hostname;
\&    my $host = hostname();
\&    my $addr = inet_ntoa(scalar gethostbyname($host || 'localhost'));
.Ve
.PP
至少在 Unix 底下，取得 DNS网域名最简单的方法大概要算是直接从 /etc/resolv.conf 这个档案里面找。当然，这么做的前提是 resolv.conf 这个档案的设定必须照惯例的格式，还有就是这个档案必先存在才行。
.PP
(Perl在非 Unix系统下尚需要一有效的方法来测出机器和网域名)
.Sh "如何获取一篇新闻文章或活动的新闻组？"
.IX Subsection "How do I fetch a news article or the active newsgroups?"
使用 Net::NNTP或 News::NNTPClient模组，两者皆可自 CPAN下载。这些模组让抓群组名录这类的差事变得这么容易：
.PP
.Vb 2
\&    perl -MNews::NNTPClient
\&      -e 'print News::NNTPClient->new->list("newsgroups")'
.Ve
.Sh "如何获取/上传一个 FTP 文件?"
.IX Subsection "How do I fetch/put an FTP file?"
LWP::Simple模组（可自 CPAN下载）可以抓，但不能上传档案。 Net::FTP模组（也可自 CPAN下载）虽比较复杂，但可用来上传、也能抓档案。
.Sh "如何进行远程过程调用 RPC ?"
.IX Subsection "How can I do RPC in Perl?"
模块 \s-1DCE::RPC\s0 正在开发中 (但是还不可用)，将成为 DCE-Perl 包 (可以从 CPAN 下载) 的一部分。rpcgen 套件，可以从 CPAN/authors/id/JAKE/ 找到，是一个 \s-1RPC\s0 存根生成器，包含一个 \s-1RPC::ONC\s0 模块。
.SH "AUTHOR AND COPYRIGHT"
.IX Header "AUTHOR AND COPYRIGHT"
Copyright (c) 1997\-2002 Tom Christiansen and Nathan Torkington.
All rights reserved.
.PP
This documentation is free; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
Irrespective of its distribution, all code examples in this file
are hereby placed into the public domain.  You are permitted and
encouraged to use this code in your own programs for fun
or for profit as you see fit.  A simple comment in the code giving
credit would be courteous but is not required.
.SH "译者"
.B 萧百龄，两只老虎工作室