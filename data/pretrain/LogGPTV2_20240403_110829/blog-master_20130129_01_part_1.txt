## PostgreSQL 9.3 add Fast promote mode skips checkpoint at end of recovery  
### 作者                                                                                                                                                          
digoal                                                                                                                                                          
### 日期                                                                                                                                                           
2013-01-29                                                                                                                                               
### 标签                                                                                                                                                          
PostgreSQL , promote , 激活备库 , fast promote            
----                                                                                                                                                                      
## 背景  
PostgreSQL 将新增promote的选项, -m smart | fast  
1\. smart 模式下promote standby数据库时, 在结束恢复后, 必须执行完一个checkpoint才激活.  
2\. fast 模式下promote standby数据库时, 在结束恢复后, 不需要等待checkpoin结束, 而是往XLOG中写入XLOG_END_OF_RECOVERY标记, 然后激活.  
原文如下 :   
```  
pg_ctl promote -m fast will skip the checkpoint at end of recovery so that we  
can achieve very fast failover when the apply delay is low. Write new WAL record  
XLOG_END_OF_RECOVERY to allow us to switch timeline correctly for downstream log  
readers. If we skip synchronous end of recovery checkpoint we request a normal  
spread checkpoint so that the window of re-recovery is low.  
Simon Riggs and Kyotaro Horiguchi, with input from Fujii Masao.  
Review by Heikki Linnakangas  
```  
## 注意  
1\. 不管是哪种模式, 都需要等待已经接收到的xlog全部恢复. 所以如果standby的恢复速度与XLOG的接收量相差很大的话, fast模式也快不到哪去.  
2\. wal receiver进程是在apply xlog的进程逻辑(startup process)中关闭的. 如下,  
src/backend/access/transam/xlog.c  
```  
/*  
 * Check to see whether the user-specified trigger file exists and whether a  
 * promote request has arrived.  If either condition holds, return true.  
 */  
static bool  
CheckForStandbyTrigger(void)  
{  
        struct stat stat_buf;  
        static bool triggered = false;  
        if (triggered)  
                return true;  
        if (IsPromoteTriggered())  
        {  
                ereport(LOG,  
                                (errmsg("received promote request")));  
                ResetPromoteTriggered();  
                triggered = true;  
                return true;  
        }  
        if (TriggerFile == NULL)  
                return false;  
        if (stat(TriggerFile, &stat_buf) == 0)  
        {  
                ereport(LOG,  
                                (errmsg("trigger file found: %s", TriggerFile)));  
                unlink(TriggerFile);  
                triggered = true;  
                return true;  
        }  
        return false;  
}  
```  
所以在检测到触发文件或者promote_triggered=true也就是接收到pg_ctl的promote请求后, 将关闭WALreceiver进程.  
src/backend/access/transam/xlog.c  
```  
/*  
 * In standby mode, wait for WAL at position 'RecPtr' to become available, either  
 * via restore_command succeeding to restore the segment, or via walreceiver  
 * having streamed the record (or via someone copying the segment directly to  
 * pg_xlog, but that is not documented or recommended).  
 *  
 * If 'fetching_ckpt' is true, we're fetching a checkpoint record, and should  
 * prepare to read WAL starting from RedoStartLSN after this.  
 *  
 * 'RecPtr' might not point to the beginning of the record we're interested  
 * in, it might also point to the page or segment header. In that case,  
 * 'tliRecPtr' is the position of the WAL record we're interested in. It is  
 * used to decide which timeline to stream the requested WAL from.  
 *  
 * When the requested record becomes available, the function opens the file  
 * containing it (if not open already), and returns true. When end of standby  
 * mode is triggered by the user, and there is no more WAL available, returns  
 * false.  
 */  
static bool  
WaitForWALToBecomeAvailable(XLogRecPtr RecPtr, bool randAccess,  
                                                        bool fetching_ckpt, XLogRecPtr tliRecPtr)  
{  
        static pg_time_t last_fail_time = 0;  
        pg_time_t now;  
        /*-------  
         * Standby mode is implemented by a state machine:  
         *  
         * 1. Read from archive (XLOG_FROM_ARCHIVE)  
         * 2. Read from pg_xlog (XLOG_FROM_PG_XLOG)  
         * 3. Check trigger file  
         * 4. Read from primary server via walreceiver (XLOG_FROM_STREAM)  
         * 5. Rescan timelines  
         * 6. Sleep 5 seconds, and loop back to 1.  
         *  
         * Failure to read from the current source advances the state machine to  
         * the next state. In addition, successfully reading a file from pg_xlog  
         * moves the state machine from state 2 back to state 1 (we always prefer  
         * files in the archive over files in pg_xlog).  
         *  
         * 'currentSource' indicates the current state. There are no currentSource  
         * values for "check trigger", "rescan timelines", and "sleep" states,  
         * those actions are taken when reading from the previous source fails, as  
         * part of advancing to the next state.  
         *-------  
         */  
....  
略  
                                case XLOG_FROM_PG_XLOG:  
                                        /*  
                                         * Check to see if the trigger file exists. Note that we do  
                                         * this only after failure, so when you create the trigger  
                                         * file, we still finish replaying as much as we can from  
                                         * archive and pg_xlog before failover.  
                                         */  
                                        if (CheckForStandbyTrigger())  
                                        {  
                                                ShutdownWalRcv();  
                                                return false;  
                                        }  
略  
...  
```  
src/backend/postmaster/startup.c  
```  
void  
ResetPromoteTriggered(void)  
{  
        promote_triggered = false;  
}  
```  
## 参考  
1\. https://github.com/postgres/postgres/commit/fd4ced5230162b50a5c9d33b4bf9cfb1231aa62e  
2\. src/bin/pg_ctl/pg_ctl.c  
```   
 printf(_("\nPromotion modes are:\n"));  
 printf(_("  smart       promote after performing a checkpoint\n"));  
 printf(_("  fast        promote quickly without waiting for checkpoint completion\n"));  
00278 static pgpid_t  
00279 get_pgpid(void)  
00280 {  
00281     FILE       *pidf;  
00282     long        pid;  
00283   
00284     pidf = fopen(pid_file, "r");  
00285     if (pidf == NULL)  
00286     {  
00287         /* No pid file, not an error on startup */  
00288         if (errno == ENOENT)  
00289             return 0;  
00290         else  
00291         {  
00292             write_stderr(_("%s: could not open PID file \"%s\": %s\n"),  
00293                          progname, pid_file, strerror(errno));  
00294             exit(1);  
00295         }  
00296     }  
00297     if (fscanf(pidf, "%ld", &pid) != 1)  
00298     {  
00299         /* Is the file empty? */  
00300         if (ftell(pidf) == 0 && feof(pidf))  
00301             write_stderr(_("%s: the PID file \"%s\" is empty\n"),  
00302                          progname, pid_file);  
00303         else  
00304             write_stderr(_("%s: invalid data in PID file \"%s\"\n"),  
00305                          progname, pid_file);  
00306         exit(1);  
00307     }  
00308     fclose(pidf);  
00309     return (pgpid_t) pid;  
00310 }  
01102 /*  
01103  * promote  
01104  */  
01105   
01106 static void  
01107 do_promote(void)  
01108 {  
01109     FILE       *prmfile;  
01110     pgpid_t     pid;  
01111     struct stat statbuf;  
01112   
01113     pid = get_pgpid();  
01114   
01115     if (pid == 0)               /* no pid file */  
01116     {  
01117         write_stderr(_("%s: PID file \"%s\" does not exist\n"), progname, pid_file);  
01118         write_stderr(_("Is server running?\n"));  
01119         exit(1);  
01120     }  
01121     else if (pid = FAST_MODE)  
01144         snprintf(promote_file, MAXPGPATH, "%s/fast_promote", pg_data);  
01145     else  
01146         snprintf(promote_file, MAXPGPATH, "%s/promote", pg_data);  
01147   
01148     if ((prmfile = fopen(promote_file, "w")) == NULL)  
01149     {  
01150         write_stderr(_("%s: could not create promote signal file \"%s\": %s\n"),  
01151                      progname, promote_file, strerror(errno));  
01152         exit(1);  
01153     }  
01154     if (fclose(prmfile))  
01155     {  
01156         write_stderr(_("%s: could not write promote signal file \"%s\": %s\n"),  
01157                      progname, promote_file, strerror(errno));  
01158         exit(1);  
01159     }  
01160   
01161     sig = SIGUSR1;  
01162     if (kill((pid_t) pid, sig) != 0)  
01163     {  
01164         write_stderr(_("%s: could not send promote signal (PID: %ld): %s\n"),  
01165                      progname, pid, strerror(errno));  
01166         if (unlink(promote_file) != 0)  
01167             write_stderr(_("%s: could not remove promote signal file \"%s\": %s\n"),  
01168                          progname, promote_file, strerror(errno));  
01169         exit(1);  
01170     }  
01171   
01172     print_msg(_("server promoting\n"));  
01173 }  
```  
3\. src/backend/postmaster/postmaster.c  
```  
04617 /*  
04618  * sigusr1_handler - handle signal conditions from child processes  
04619  */  