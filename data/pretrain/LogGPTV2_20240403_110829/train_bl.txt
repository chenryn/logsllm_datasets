.\" modified, 2003-05-26, michael kerrisk, 
.th setresuid 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
setresuid, setresgid \- set real, effective, and saved user or group id
.sh synopsis
.nf
.br "#define _gnu_source" "         /* see feature_test_macros(7) */"
.b #include 
.pp
.bi "int setresuid(uid_t " ruid ", uid_t " euid ", uid_t " suid );
.bi "int setresgid(gid_t " rgid ", gid_t " egid ", gid_t " sgid );
.fi
.sh description
.br setresuid ()
sets the real user id, the effective user id, and the
saved set-user-id of the calling process.
.pp
an unprivileged process may change its real uid,
effective uid, and saved set-user-id, each to one of:
the current real uid, the current effective uid, or the
current saved set-user-id.
.pp
a privileged process (on linux, one having the \fbcap_setuid\fp capability)
may set its real uid, effective uid, and
saved set-user-id to arbitrary values.
.pp
if one of the arguments equals \-1, the corresponding value is not changed.
.pp
regardless of what changes are made to the real uid, effective uid,
and saved set-user-id, the filesystem uid is always set to the same
value as the (possibly new) effective uid.
.pp
completely analogously,
.br setresgid ()
sets the real gid, effective gid, and saved set-group-id
of the calling process (and always modifies the filesystem gid
to be the same as the effective gid),
with the same restrictions for unprivileged processes.
.sh return value
on success, zero is returned.
on error, \-1 is returned, and
.i errno
is set to indicate the error.
.pp
.ir note :
there are cases where
.br setresuid ()
can fail even when the caller is uid 0;
it is a grave security error to omit checking for a failure return from
.br setresuid ().
.sh errors
.tp
.b eagain
the call would change the caller's real uid (i.e.,
.i ruid
does not match the caller's real uid),
but there was a temporary failure allocating the
necessary kernel data structures.
.tp
.b eagain
.i ruid
does not match the caller's real uid and this call would
bring the number of processes belonging to the real user id
.i ruid
over the caller's
.b rlimit_nproc
resource limit.
since linux 3.1, this error case no longer occurs
(but robust applications should check for this error);
see the description of
.b eagain
in
.br execve (2).
.tp
.b einval
one or more of the target user or group ids
is not valid in this user namespace.
.tp
.b eperm
the calling process is not privileged (did not have the necessary
capability in its user namespace)
and tried to change the ids to values that are not permitted.
for
.br setresuid (),
the necessary capability is
.br cap_setuid ;
for
.br setresgid (),
it is
.br cap_setgid .
.sh versions
these calls are available under linux since linux 2.1.44.
.sh conforming to
these calls are nonstandard;
they also appear on hp-ux and some of the bsds.
.sh notes
under hp-ux and freebsd, the prototype is found in
.ir  .
under linux, the prototype is provided by glibc since version 2.3.2.
.pp
the original linux
.br setresuid ()
and
.br setresgid ()
system calls supported only 16-bit user and group ids.
subsequently, linux 2.4 added
.br setresuid32 ()
and
.br setresgid32 (),
supporting 32-bit ids.
the glibc
.br setresuid ()
and
.br setresgid ()
wrapper functions transparently deal with the variations across kernel versions.
.\"
.ss c library/kernel differences
at the kernel level, user ids and group ids are a per-thread attribute.
however, posix requires that all threads in a process
share the same credentials.
the nptl threading implementation handles the posix requirements by
providing wrapper functions for
the various system calls that change process uids and gids.
these wrapper functions (including those for
.br setresuid ()
and
.br setresgid ())
employ a signal-based technique to ensure
that when one thread changes credentials,
all of the other threads in the process also change their credentials.
for details, see
.br nptl (7).
.sh see also
.br getresuid (2),
.br getuid (2),
.br setfsgid (2),
.br setfsuid (2),
.br setreuid (2),
.br setuid (2),
.br capabilities (7),
.br credentials (7),
.br user_namespaces (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/drand48.3
.so man3/argz_add.3
.\" copyright (c) 1993 michael haardt (PI:EMAIL),
.\"   fri apr  2 11:32:09 met dst 1993
.\"
.\" %%%license_start(gplv2+_doc_full)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\"
.\" the gnu general public license's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" this manual is distributed in the hope that it will be useful,
.\" but without any warranty; without even the implied warranty of
.\" merchantability or fitness for a particular purpose.  see the
.\" gnu general public license for more details.
.\"
.\" you should have received a copy of the gnu general public
.\" license along with this manual; if not, see
.\" .
.\" %%%license_end
.\"
.\" tue jul  6 12:42:46 mdt 1993 
.\" added "calling directly" and supporting paragraphs
.\"
.\" modified sat jul 24 15:19:12 1993 by rik faith 
.\"
.\" modified 21 aug 1994 by michael chastain :
.\"   added explanation of arg stacking when 6 or more args.
.\"
.\" modified 10 june 1995 by andries brouwer 
.\"
.\" 2007-10-23 mtk: created as a new page, by taking the content
.\" specific to the _syscall() macros from intro(2).
.\"
.th _syscall 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
_syscall \- invoking a system call without library support (obsolete)
.sh synopsis
.nf
.b #include 
.pp
a _syscall macro
.pp
desired system call
.fi
.sh description
the important thing to know about a system call is its prototype.
you need to know how many arguments, their types,
and the function return type.
there are seven macros that make the actual call into the system easier.
they have the form:
.pp
.in +4n
.ex
.ri _syscall x ( type , name , type1 , arg1 , type2 , arg2 ,...)
.ee
.in
.pp
where
.ip
.i x
is 0\(en6, which are the number of arguments taken by the
system call
.ip
.i type
is the return type of the system call
.ip
.i name
is the name of the system call
.ip
.i typen
is the nth argument's type
.ip
.i argn
is the name of the nth argument
.pp
these macros create a function called
.i name
with the arguments you
specify.
once you include the _syscall() in your source file,
you call the system call by
.ir name .
.sh files
.i /usr/include/linux/unistd.h
.sh conforming to
the use of these macros is linux-specific, and deprecated.
.sh notes
starting around kernel 2.6.18, the _syscall macros were removed
from header files supplied to user space.
use
.br syscall (2)
instead.
(some architectures, notably ia64, never provided the _syscall macros;
on those architectures,
.br syscall (2)
was always required.)
.pp
the _syscall() macros
.i "do not"
produce a prototype.
you may have to
create one, especially for c++ users.
.pp
system calls are not required to return only positive or negative error
codes.
you need to read the source to be sure how it will return errors.
usually, it is the negative of a standard error code,
for example,
.ri \- eperm .
the _syscall() macros will return the result
.i r
of the system call
when
.i r
is nonnegative, but will return \-1 and set the variable
.i errno
to
.ri \- r
when
.i r
is negative.
for the error codes, see
.br errno (3).
.pp
when defining a system call, the argument types
.i must
be
passed by-value or by-pointer (for aggregates like structs).
.\" the preferred way to invoke system calls that glibc does not know
.\" about yet is via
.\" .br syscall (2).
.\" however, this mechanism can be used only if using a libc
.\" (such as glibc) that supports
.\" .br syscall (2),
.\" and if the
.\" .i 
.\" header file contains the required sys_foo definition.
.\" otherwise, the use of a _syscall macro is required.
.\"
.sh examples
.ex
#include 
#include 
#include 
#include        /* for _syscallx macros/related stuff */
#include        /* for struct sysinfo */
_syscall1(int, sysinfo, struct sysinfo *, info);
int
main(void)
{
    struct sysinfo s_info;
    int error;
    error = sysinfo(&s_info);
    printf("code error = %d\en", error);
    printf("uptime = %lds\enload: 1 min %lu / 5 min %lu / 15 min %lu\en"
           "ram: total %lu / free %lu / shared %lu\en"
           "memory in buffers = %lu\enswap: total %lu / free %lu\en"
           "number of processes = %d\en",
           s_info.uptime, s_info.loads[0],
           s_info.loads[1], s_info.loads[2],
           s_info.totalram, s_info.freeram,
           s_info.sharedram, s_info.bufferram,
           s_info.totalswap, s_info.freeswap,
           s_info.procs);
    exit(exit_success);
}
.ee
.ss sample output
.ex
code error = 0
uptime = 502034s
load: 1 min 13376 / 5 min 5504 / 15 min 1152
ram: total 15343616 / free 827392 / shared 8237056
memory in buffers = 5066752
swap: total 27881472 / free 24698880
number of processes = 40
.ee
.sh see also
.br intro (2),
.br syscall (2),
.br errno (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) bruno haible 
.\"
.\" %%%license_start(gplv2+_doc_onepara)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\" %%%license_end
.\"
.\" references consulted:
.\"   gnu glibc-2 source code and manual
.\"   dinkumware c library reference http://www.dinkumware.com/
.\"   opengroup's single unix specification http://www.unix-systems.org/online.html
.\"
.th wcpcpy 3  2021-03-22 "gnu" "linux programmer's manual"
.sh name
wcpcpy \- copy a wide-character string, returning a pointer to its end
.sh synopsis
.nf
.b #include 
.pp
.bi "wchar_t *wcpcpy(wchar_t *restrict " dest \
", const wchar_t *restrict " src );
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br wcpcpy ():
.nf
    since glibc 2.10:
        _posix_c_source >= 200809l
    before glibc 2.10:
        _gnu_source
.fi
.sh description
the
.br wcpcpy ()
function is the wide-character equivalent of the
.br stpcpy (3)
function.
it copies the wide-character string pointed to by
.ir src ,
including the terminating null wide character (l\(aq\e0\(aq),
to the array pointed to by
.ir dest .
.pp
the strings may not overlap.
.pp
the programmer must ensure that there
is room for at least
.ir wcslen(src)+1
wide characters at
.ir dest .
.sh return value
.br wcpcpy ()
returns a pointer to the end of the wide-character string
.ir dest ,
that is, a pointer to the terminating null wide character.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br wcpcpy ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2008.
.sh see also
.br strcpy (3),
.br wcscpy (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/getmntent.3
.so man3/getutmp.3
.so man3/login.3
.\" copyright 1995 michael chastain (PI:EMAIL), 15 april 1995.
.\"
.\" %%%license_start(gplv2+_doc_full)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\"
.\" the gnu general public license's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" this manual is distributed in the hope that it will be useful,
.\" but without any warranty; without even the implied warranty of
.\" merchantability or fitness for a particular purpose.  see the
.\" gnu general public license for more details.
.\"
.\" you should have received a copy of the gnu general public
.\" license along with this manual; if not, see
.\" .
.\" %%%license_end
.\"
.\" updated, aeb, 980612
.\"
.th unimplemented 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
afs_syscall, break, fattach, fdetach, ftime, getmsg, getpmsg, gtty, isastream,
lock, madvise1, mpx, prof, profil, putmsg, putpmsg, security,
stty, tuxcall, ulimit, vserver \- unimplemented system calls
.sh synopsis
.nf
unimplemented system calls.
.fi
.sh description
these system calls are not implemented in the linux kernel.
.sh return value
these system calls always return \-1 and set
.i errno
to
.br enosys .
.sh notes
note that
.br ftime (3),
.br profil (3),
and
.br ulimit (3)
are implemented as library functions.
.pp
some system calls, like
.br alloc_hugepages (2),
.br free_hugepages (2),
.br ioperm (2),
.br iopl (2),
and
.br vm86 (2)
exist only on certain architectures.
.pp
some system calls, like
.br ipc (2),
.br create_module (2),
.br init_module (2),
and
.br delete_module (2)
exist only when the linux kernel was built with support for them.
.sh see also
.br syscalls (2)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/syslog.3
.\" copyright (c) 1990, 1991 the regents of the university of california.
.\" and copyright (c) 2021 michael kerrisk 
.\" all rights reserved.
.\"
.\" this code is derived from software contributed to berkeley by
.\" chris torek and the american national standards committee x3,
.\" on information processing systems.
.\"
.\" %%%license_start(bsd_4_clause_ucb)
.\" redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. all advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	this product includes software developed by the university of
.\"	california, berkeley and its contributors.
.\" 4. neither the name of the university nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software