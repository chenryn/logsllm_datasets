title:Online Sketching of Network Flows for Real-Time Stepping-Stone Detection
author:Baris Coskun and
Nasir D. Memon
2009 Annual Computer Security Applications Conference
Online Sketching of Network Flows for Real-Time Stepping-Stone Detection
Baris Coskun
Electrical and Computer Engineering
Polytechnic Institute of NYU
Brooklyn, NY, USA
Email: PI:EMAIL
Nasir Memon
Computer Science and Engineering
Polytechnic Institute of NYU
Brooklyn, NY, USA
Email: PI:EMAIL
Abstract—We present an efﬁcient and robust stepping-stone detec-
tion scheme based on succinct packet-timing sketches of network ﬂows.
The proposed scheme employs an online algorithm to continuously
maintain short sketches of ﬂows from a stream of captured packets
at the network boundary. These sketches are then used to identify
pairs of network ﬂows with similar packet-timing characteristics, which
indicates potential stepping-stones. Succinct ﬂow sketches enable the
proposed scheme to compare a given pair of ﬂows in constant time. In
addition, ﬂow sketches identify pairs of correlated ﬂows from a given
list of ﬂows in sub-quadratic time, thereby allowing a more scalable
solution as compared to known schemes. Finally, the proposed scheme
is resistant to random delays and chaff, which are often employed by
attackers to evade detection. To explore its efﬁcacy, we mathematically
analyze the robustness properties of the proposed ﬂow sketch. We also
experimentally measure the detection performance of the proposed
scheme.
Keywords-Network Security, Stepping-Stones, Streaming Al-
gorithms, Data Sketching
I. INTRODUCTION
We consider the real-time network-based stepping-stone
detection problem. Our approach is based on data sketches,
which are widely used in the context of streaming algorithms
[1][2][3]. In general, these methods maintain short sketches
of data streams, which are used to efﬁciently answer various
queries about the data stream, such as rangesum, heavy
hitters, quantiles etc. Adopting a similar philosophy, we
propose a novel stepping-stone detection scheme based on an
online algorithm, which continuously maintains sketches of
network ﬂows from a stream of captured packets at the bor-
der of a network. Using these sketches, the proposed scheme
identiﬁes stepping-stones faster than the existing methods,
without compromising robustness to timing perturbations,
such as jitter and chaff.
Stepping-stones are one of the effective strategies adopted
by network perpetrators to maintain anonymity of an attack.
In a stepping-stone strategy,
instead of direct communi-
cation, an attacker uses a series of intermediate nodes,
called stepping-stones, to relay her commands to a victim.
Consequently, if the victim detects that he is under attack,
he will only know that the attack packets are coming from
the closest intermediate node.
An intermediate node of a stepping-stone chain essentially
relays information from one of its ingress ﬂows to one of its
egress ﬂows. In general, it is possible to observe a certain
correlation between relaying ingress-egress ﬂow pairs, such
as identical payload or similar packet timings. Therefore,
one can detect stepping-stones in a network by searching
for such correlations between ingress and egress ﬂows at
the network boundary. This kind of stepping-stone detection
at network borders can be utilized in two major ways:
• If a pair of ﬂows is detected to be a part of a stepping-
stone chain, they can be blocked immediately to stop the
attack, thereby preventing further harm.
• If the records of correlated ﬂow pairs are collected
from different networks, one can compile them to po-
tentially traceback stepping-stone paths and identify the
source of an attack. To give an example, “Cooperative
Intrusion Traceback and Response Architecture (CITRA)”
[4] is a framework that potentially beneﬁts from a ﬂow
correlation based stepping-stone detection running at net-
work borders. CITRA enables ﬁrewalls, routers, intrusion
detection systems etc. from different networks to collaborate
and exchange information using the “Intrusion Detection
and Isolation Protocol (IDIP)” [5]. It’s objective is to trace
intrusions across networks boundaries, as close as possible
to the true origin, and to automatically generate immediate
responses in order to prevent intrusions from causing any
further damage. Hence,
incorporating a ﬂow correlation
based stepping-stone detection in CITRA potentially enables
both prevention and attribution of stepping-stone attacks.
A network-based stepping-stone detection scheme has to
possess two key properties in order to be reliably employed:
i) Efﬁciency/Scalability: To detect and block ongoing
attacks, a stepping-stone detection scheme should be able
to identify correlated ﬂows in real time. For this purpose, it
has to process a dense packet stream, composed of numerous
concurrent ingress and egress ﬂows, very efﬁciently both in
terms of computation and memory.
ii) Robustness: A stepping-stone detection scheme should
be resistant to network imperfections (jitter, packet drops)
and to various evasion techniques (chaff, random packet
delays) often employed by attackers. In general, such pertur-
bations disrupt the correlation between ﬂows of a stepping-
stone chain, thereby potentially preventing a stepping-stone
detection scheme from detecting underlying timing correla-
tions.
1063-9527/09 $26.00 © 2009 IEEE
DOI 10.1109/ACSAC.2009.51
473
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:05:53 UTC from IEEE Xplore.  Restrictions apply. 
inter-packet
There are several stepping-stone detection schemes pro-
posed in the literature. In earlier, [6][7][8][7] authors pro-
posed several ﬂow-correlation algorithms which can quickly
identify correlated ﬂows based on simple timing features,
such as packet counts,
time difference etc.
However,
they provide very limited or no resistance to
some of the aforementioned timing perturbations, especially
packet drops/retransmissions and chaff. On the other hand,
the schemes which are designed to resist chaff [9][10] are
relatively slower. That is, in order to decide if given a
pair of ﬂows are correlated, they essentially try to ﬁnd a
matching packet on one ﬂow for each packet on the other
one. However, comparing a pair of ﬂows in linear time
in the number of packets and doing it for every pair of
ingress-egress ﬂows does not scale to moderate to large
networks. Another potential scalability issue is that existing
schemes are not designed to work directly on packet streams.
Basically they need to continuously reconstruct ﬂows from
a packet stream and frequently compare each of the active
m ingress ﬂows with each of the active n egress ﬂows in
O(nm) time, which potentially raises several memory and
computation issues.
In this work, we aim to design an efﬁcient stepping-
stone detection scheme without signiﬁcantly compromising
resistance against timing perturbations. For this purpose, we
propose a stepping-stone detection scheme based on ﬂow
packet-timing sketches. A packet-timing sketch of a ﬂow is
a short, constant-length integer array, which summarizes the
ﬂow’s packet-timing information. The proposed stepping-
stone detection scheme continuously maintains succinct,
constant-length sketches of active ﬂows’ packet-timing in-
formation from a stream of captured packets at a network
border. These sketches are then used to efﬁciently identify
correlated ﬂows. The proposed ﬂow sketches are maintained
very efﬁciently by a streaming algorithm. The algorithm per-
forms a few arithmetic operations for each packet, thereby
allowing simultaneous sketching of thousands of concurrent
active ﬂows from a packet stream. In addition, the sketches
of a pair of correlated ﬂows remain similar, even if the ﬂows
encounter various timing perturbations. Hence, the proposed
scheme is able to detect the correlation between ﬂows of a
stepping-stone chain under the presence of random delays
and chaff packets.
To demonstrate the efﬁcacy of the proposed scheme, in
this paper we present various experimental results where we
used real network traces. In addition, we also mathematically
explain and analyze the proposed stepping stone detection
scheme, where we make the following contributions:
packet delays and chaff are within acceptable limits.
• Exploiting the fact that the sketches of correlated ﬂows
are similar, we show that the proposed stepping-stone
detection scheme can ﬁnd correlated ﬂows, with high
probability, among m ingress and n egress ﬂows in
O(n + √nm) time.
The remaining of this paper is organized as follows: In
Section II, we present preliminaries and deﬁne the problem
formally. Then,
in Section III, we explain the proposed
stepping-stone detection scheme in greater detail. Following
that, to demonstrate the efﬁcacy of the proposed scheme,
we present our experiments and results in Section IV. We
present the limitations of the proposed scheme and possible
solutions in Section V. Finally we present related work and
conclusions in Section VI and Section VII, respectively.
II. PRELIMINARIES AND PROBLEM DEFINITION
Deﬁnitions:
• A network ﬂow is deﬁned as the collection of packets
having the common ﬁve-tuples of source IP, source port,
destination IP destination port and protocol (UDP or TCP).
• An active ﬂow is deﬁned as a ﬂow which transmits
its most recent packet not more than TM axIdle seconds
ago. TM axIdle is the maximum idle threshold and we set
TM axIdle = 60 seconds in this work.
• An ingress (or egress) ﬂow with respect to a network is a
ﬂow which comes into (or goes out of) the network. More
speciﬁcally, the destination IP of the packets of an ingress
ﬂow is within the network whereas that of egress ﬂows is
out of the network.
Stepping-Stone Attacks:
A stepping-stone attack incorporates several consecutive
ﬂows established between intermediate nodes, as illustrated
below, where the attacker (A) ﬁrst makes a connection to an
intermediate node (N d1); then from N d1 he makes another
connection to another intermediate node (N d2) and so on
all the way to the victim.
A → N d1 → N d2 → . . . → N dh−1 → N dh → V
This chain of connections is referred as a stepping-stone
chain and the intermediate nodes are often called stepping-
stones. Each connection between two successive nodes on
a stepping-stone chain is a separate network ﬂow. These
ﬂows relay information from A to V through intermediate
nodes. However, one cannot observe this directly from their
payloads, as each ﬂow is assumed to be encrypted with a
different key in most cases, such as an SSH tunnel based
stepping-stone chain. The response of V to A’s packets
might be relayed back to A through a series of ﬂows with
reverse directions, such as “A ← N d1 . . . ← N dh ← V ”,
or might be relayed through a completely different path.
Throughout this work we assume the attacker is con-
strained by a maximum tolerable delay [11], since he
needs to interactively communicate with the victim. In other
• We prove that, given chaff rate and maximum packet
delay values, the difference between sketches of a pair
of correlated ﬂows has an upper-bound in the expecta-
tion sense. This upper-bound justiﬁes that the proposed
scheme is expected to be able to identify correlated
ﬂows with high probability as long as the introduced
474
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:05:53 UTC from IEEE Xplore.  Restrictions apply. 
introduce jitter on packet
words, packets cannot be delayed more that the maximum
tolerable delay along a stepping stone chain. As a result, the
ﬂows on a stepping stone chain have similar packet timing
characteristics, which allows timing based stepping-stone
detection systems to identify stepping-stones in a network.
Packet Delays, Jitter, Retransmissions and Chaff:
There are various factors that potentially perturb the similar
packet-timing characteristics among the ﬂows of a stepping-
stone chain, thereby making their discovery difﬁcult. For
instance, networks might
tim-
ings or packets might be delayed at
intermediate nodes
since they might need to ﬁrst process each packet (i.e.
re-encryption) before relaying. In addition, some packets
might be dropped in the network and retransmitted. On the
other hand, attackers might introduce intentional random
packet delays to disrupt the correlation between the ﬂows
of a stepping-stone chain in the hope of evading detection.
Attackers might also introduce superﬂuous packets, called
chaff, which contain no valuable information and are not
relayed to the succeeding ﬂow on the chain. A packet-timing
based stepping-stone detection scheme should be resistant to
such perturbations.
Real-Time Stepping-Stone Detection Problem Deﬁnition:
A stepping-stone detection system, monitoring network traf-
ﬁc at the network border, observes numerous active ingress
and egress ﬂows at any given time. Let I t
j denote
these active ingress and egress ﬂows at time t, respectively,
where i = 1, 2, ..., n and j = 1, 2, ..., m. If there’s an
active stepping-stone attack passing through the network,
there should be at least one pair of ingress/egress ﬂows,
which have similar timing characteristics. More formally,
there should be at least one ﬂow pair, {I t
j}, such that
j) < T , where Dif f(., .) is some packet-timing
Dif f(I t
difference measure based on the packets observed so far
and T is a threshold value. We refer the ﬂows of a such
ingress/egress ﬂow pair having similar packet-timings as
correlated ﬂows.
Notice that, I t
j don’t necessarily have a common
endpoint, since two successive intermediate nodes might be
in the same network and hence the ﬂow between them is
not observable at the network border. Hence, one needs
to consider that every pair of ingress/egress ﬂows is a
potential correlated ﬂow pair, thereby forcing an O(nm)
time search. As a result, the stepping-stone detection prob-
i and
lem at time t can be deﬁned as: given the ﬂows I t
j}, such that
j, ﬁnd all ingress/egress ﬂow pairs {I t
Et
j) < T . We refer to the procedure of solving
Dif f(I t
this problem as correlated ﬂow search. Finally, since the
network has to be continuously monitored, the correlated
ﬂow search has to be periodically repeated at times t, t +
∆, t + 2∆, t + 3∆, ...etc, where ∆ should be selected small
enough such that, a stepping-stone attack shouldn’t be able
to start and ﬁnish between two search procedures and evade
i and Et
i and Et
i , Et
i , Et
i , Et
i , Et
8
6
4
2
0
0
5
0
t
n
u
o
C
t
e
k
c
a
P
.
f
f
i
D
t
n
u
o
C
t
e
k
c
a
P