An AHE scheme allows to perform another operation HybridMul,
which we call hybrid homomorphic multiplication, as follows:
given a generic ciphertext c = Epk(m) ∈ C and an integer
h ≥ 1, HybridMul computes a ciphertext chmul that is an
encryption of m · h. Formally:
∀m ∈ M, h ≥ 1(Dsk(HybridMul(evk, h, Epk(m))) = m · h)
This operation can be efficiently implemented via a double-
and-add strategy which employs O(log h) homomorphic ad-
ditions.
Definition 3.3 (Flexible Length Additive Homomorphic En-
cryption). An AHE scheme is defined as a flexible length
additive homomorphic encryption (FLAHE) scheme if it is
augmented with an additional parameter l ≥ 1, called length,
which specializes the definition of the plaintext and cipher-
text spaces, and of the encryption, decryption and homomor-
phic addition operations, such that:
∀l1, l2 ∈ N(l1 < l2 ⇒ Cl1 ⊂ Ml2)
where the superscript l1 (resp. l2) is employed to specify the
plaintext and ciphertext spaces for length l1 (resp. l2). There-
fore, the expression Cl1 ⊂ Ml2 indicate that ciphertexts in
Cl1 are valid plaintexts for ciphertexts in Cl2 (i.e., a cipher-
text in Cl1 is a valid output of the decryption algorithm fed
with an element of Cl2).
Paillier FLAHE Scheme. Proposed in 1999 [23], it is a pub-
lic key AHE scheme based on the Composite Residuosity Class
Problem, which is polynomially reducible to the Integer Fac-
toring Problem. The plaintext space of this scheme is M =
ZN , with N computed as the product of two large primes,
while the ciphertext space is C = Z∗
N 2 ⊂ ZN 2, i.e., the subset
of all and only elements of ZN 2 with a multiplicative inverse
modulo N
2. The key generation algorithm computes the
public pk and private key sk, with the public evaluation key
evk = pk. The Paillier scheme is semantically secure, which
intuitively means that it is computationally unfeasible to de-
termine if two ciphertexts encrypt the same plaintext or not.
Given the ciphertexts c1, c2 ∈ ZN , the homomorphic addition
is defined as: ∀m1, m2 ∈ ZN(Dsk(Epk(m1) · Epk(m2) mod N
2)
=m1+m2 mod N).
Therefore, the result of an hybrid homomorphic multiplica-
tion HybridMul is obtained as an exponentiation of a cipher-
text c to an integer. It can also be conceived as the encryption
of the product of two plaintexts:
∀m1, m2 ∈ ZN(Dsk(Epk(m1)m2 mod N
2) = m1 · m2 mod N)
By combining the homomorphic addition and the HybridMul
operation, the Paillier scheme allows to perform a dot product
between a cell-wise encrypted array, denoted as ⟨A⟩, and an
unencrypted one B, as:
(⟨A⟩[i])B[i] mod N
2
=
A[i] · B[i] mod N
(cid:32) n
i =1
Dsk
(cid:33)
n
i =1
N l +1.
An FLAHE variant is described in [9] where the plaintext and
ciphertext spaces are specialized on the size of their elements
as follows: Ml = ZN l , and Cl = Z∗
Given two lengths l1, l2, with l1 < l2, the hybrid homo-
morphic multiplication HybridMul between a ciphertext in
N l2 +1 and one in Z∗
Z∗
N l1 +1, equals the encryption of the prod-
uct between the plaintext value in ZN l2 (enciphered by the
N l1 +1 ⊂ ZN l2 ).
first operand) and the latter ciphertext (being Z∗
Indeed, ∀m1 ∈ ZN l1 , m2 ∈ ZN l2 :
Dl2
sk
= m2 · El1
pk(m2)El1
El2
pk(m1) mod N l2
where the superscript l1 (resp. l2) denotes that the encryp-
tion and decryption operations are performed for plaintext
and ciphertext spaces Ml1 and Cl1 (resp. Ml2 and Cl2). This
homomorphic operation is at core of the Private Information
Retrieval (PIR) protocol introduced by Lipmaa in [19], which,
in turn, is an important building block of our PPSS protocol.
(cid:18)
pk(m1) mod N l2+1(cid:19)
.
3.3 Lipmaa’s PIR Protocol
Given an array A with n elements, each encoded with ω
bits, stored on a remote server, a PIR protocol allows a client
to retrieve the element in the h-th cell, 0≤h≤n−1, with the
server being able to determine which element was selected
with probability at most 1
n
in {0, . . . , b−1} such that h=t−1
their original position, i.e., Ah0[j]=A[j · b + h0], 0≤j≤(cid:6) n
(cid:7)−1.
b2(cid:7)−1. The
2+h1·b+h0], 0≤j≤(cid:6) n
A draft description of the PIR in [19] assumes that both
the client and the server read the positions of the cells of
the array in positional notation with radix b ≥ 2, i.e., an
index h is represented by the sequence of t =⌈log
b(n)⌉ digits
i =0 hibi. The request of the
array element at position h is performed in t communica-
tion rounds. First, the client asks the server to select all the
cells having the least significant digit of the b-radix expan-
sion of their positions equal to h0 to compose a new array
Ah0 concatenating the selected cells in increasing order of
In the next round, the client asks to select the cells in Ah0
having the least significant digit of the b-radix expansion
of their positions equal to h1, constructing an array Ah1
as Ah1[j]=Ah0[j·b+h1] = A[j·b
next rounds continue employing the subsequent digits of h
with the same logic until, in the last round (i.e., the t-th one),
a single cell (the h-th one) is identified by the server.
b
In the proper, fully private, PIR protocol [19], the client ini-
tially generates a public/private Paillier FLAHE keypair (pk,
sk) with a public modulus N≥2ω, and shares pk with the
server. The protocol is defined by three procedures:
PIR-trapdoor and PIR-retrieve, executed at client side,
and PIR-search, executed at server side.
PIR-Trapdoor procedure. The PIR-trapdoor procedure
takes as input the public key pk, an integer b ≥ 2, and the
remote array index h referring to the item that must be re-
trieved. The output value is an “obfuscated” version of h, de-
noted as ⟨h⟩. The first step of the trapdoor computation con-
siders the value h as the sequence of t =⌈log
b(h)⌉ digits in b-
radix positional representation. Each digit hi with 0≤i≤t−1,
is encoded as a bit-string hdigiti, with length b, constructed
as hdigiti[x]=1 if x=hi, 0 otherwise, x∈{0, . . . , b−1}. Then,
each bit hdigiti[x], x∈{0, . . . , b−1} of the string hdigiti is
considered as a plaintext in ZN l , l=i+1 and is encrypted into
a ciphertext in Z∗
N l +1. Thus, the bit-wise encryption of the
b-bit string hdigiti is given as the concatenation of b cipher-
N l +1. The “obfuscated” version of h, ⟨h⟩, is returned
texts in Z∗
as the concatenation of the bit-wise encryptions of each b-bit
string in the sequence hdigit0, hdigit1, ..., hdigitt−1, with
b(n) log(N) bits. The computational cost of the
total size b log2
PIR-trapdoor procedure amounts to O(b log3(N) log4
b(n))
bit operations, assuming the use of modular multiplication
quadratic in the size of the operands.
PIR-search procedure. The PIR-search procedure, run at
server side, takes as input the obfuscated value of h, ⟨h⟩ and
the value of the radix b from the client, as well as the ar-
ray A of items to be accessed, and returns a ciphertext that
will be decrypted by the client as the content of A[h]. The
search steps executed at server side follows the t-iterations
over the array A reported in the draft description of the PIR
protocol. In particular, in the first iteration, the server com-
b ⌉ items, where each
putes an encrypted array ⟨Ah0⟩ with ⌈ n
entry ⟨Ah0⟩[j], 0≤j≤⌈ n
N 2 encrypt-
ing the item A[j · b + h0] (i.e., Dsk(⟨Ah0⟩[j])=A[j·b+h0]). To
this end, each item ⟨Ah0⟩[j] is computed as the homomor-
phic dot product between the sub-array A[j·b,. . . ,j·b+b−1],
whose entries are plaintexts in ZN , and the bit-wise encryp-
tion of the b-bit string hdigit0, whose b ciphertexts are in
Z∗
N 2. In the second iteration, the server constructs an array
⟨Ah1⟩ with ⌈ n
b2⌉−1
is computed as the homomorphic dot product between the sub-
array ⟨Ah0⟩[j · b], . . . , ⟨Ah0⟩[j · b + b − 1], whose entries are
ciphertexts in Z∗
N 2, and the bit-wise encryption of the b-bit
string hdigit1, whose b ciphertexts are in Z∗
N 3. Specifically,
this dot-product is computed by combining the homomor-
phic addition and HybridMul of the FLAHE Paillier scheme
in the same fashion showed for the AHE Paillier scheme, i.e.,
⟨Ah1⟩[j]=Πb−1
3. The result of
b2⌉ items, where the ⟨Ah1⟩[j] item 0≤j≤⌈ n
z=0hdigit1[z]⟨Ah0 ⟩[j·b+z] mod N
b ⌉−1 is a ciphertext in Z∗
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
b
2+h1·b+h0]=Dsk(D
2
this dot-product is a ciphertext in Z∗
N 3 which encrypts the
item ⟨Ah0⟩[j · b + h1]. As the latter element is a ciphertext
itself, then ⟨Ah1⟩[j] is a double-layered ciphertext, that is the
item A[j·b
2+h1·b+h0] could be obtained by decrypting twice
the ciphertext ⟨Ah1⟩: i.e., A[j·b
sk(⟨Ah1⟩[j])).
After t =⌈log
b(n)⌉ iterations, the server computes a single
t-layered ciphertext ⟨Aht−1⟩ and sends it back to the client,
who in turn must decrypt it t times to derive the target value
A[h]. The computational cost of the PIR-search procedure
log3(N)) bit operations to compute a cipher-
amounts to O( n
text with ⌈log
b(n)⌉ log(N) bits.
PIR-Retrieve Procedure. This procedure, run at client side,
employs the secret key sk to decrypt the ciphertext Aht−1 com-
puted by the PIR-Search procedure, obtaining the requested
element A[h].
Since Aht−1 is a t-layered ciphertext, then the client must re-
move all these t encryption layers by decrypting t times with
decreasing length: i.e., A[h] = Dsk( D
sk( ⟨Aht−1⟩ ))).
The computational cost of the PIR-Retrieve amounts to
O(log5
b(n) log2(N)) bit operations to derive the target value
A[h]. Lastly, the communication cost of the described single-
round PIR-protocol amounts to O(log(N)b log2
b(n)) bits sent
from client to server, and to O(log(N) log
b(n)) bits sent from
server to client.
sk( . . . Dt
2
4 PROPOSED PPSS PROTOCOL
Definition 4.1 (Substring Search Functionality). Consider
a collection of z≥1 documents D = {D1, . . . , Dz}, each in-
tended as a string of len(Di), 1≤i≤z, symbols of the alphabet
Σ, stored on the server, and a query string q∈Σm, m≥1, pro-
vided by the client.
The substring search functionality computes the number
of occurrences of q in each document of D, that is the set
OD,q =z
i =1 ODi ,q, where
ODi ,q ={ 1≤j≤len(Di)−m+1} | q=Di[j], . . . , Di[j+m−1] }
A privacy-preserving substring search (PPSS) protocol
allows the server to provide the functionality specified in
Definition 4.1 without learning the content of the document
collection, D, the value of the substring q and the positions
in OD,q, as well as guaranteeing search and access pattern
privacy. To this end, the protocol needs to hide all these data
by employing privacy-preserving representations. We will
denote the privacy-preserving representation of a datum by
enclosing it in square brackets (e.g., [[D]]).
Definition 4.2 (PPSS Protocol). A PPSS protocol P for a set
of z ≥ 1 documents D = {D1, . . . , Dz} over an alphabet Σ, is
a pair of polynomial-time algorithms P = (Setup, Query).
The setup procedure: ([[D]], auxs) ← Setup(D, 1λ), is a
probabilistic algorithm, run by the client, taking as input the
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
R = OD,q =z
security parameter λ and the document collection D, and re-
turning its privacy-preserving representation [[D]] together
with an auxiliary pieces of information, auxs which is kept
secret by the client.
The query procedure: R ← Query(q, auxs,[[D]]), is a de-
terministic algorithm which is run interactively by the client
and the server to compute the number of occurrences of
the string q∈Σm in each document of D. The client obtains
i =1 ODi ,q, where OD,q is as per Definition 4.1,
while the server outputs nothing.
The Query procedure iterates w ≥ 1 rounds, where each
round corresponds to the execution of three algorithms:
• Trapdoor: [[q]]j ← Trapdoor(j, q, auxs, res0, . . . ,
resi−1), is a probabilistic algorithm, run at client side,
which employs auxs and the results of previous rounds
to build the privacy-preserving representation (a.k.a.
trapdoor) [[q]]j of the queried substring q for the j-th
round.
• Search: [[resj]] ← Search([[q]]j,[[D]]), is a deter-
ministic algorithm, run at server side, which employs
[[q]]j and [[D]] to compute a privacy-preserving rep-
resentation of the result for the j-th round, i.e., [[resj]].
• Retrieve: resj ← Retrieve([[resj]], auxs), is a deter-
ministic algorithm, run at client side, which takes as
inputs [[resj]] and auxs and computes the result resj.
Relying on the substring search algorithm based on the
BWT transformation and reported in Algorithm 1 and the
Lipmaa PIR protocol based on the FLAHE Paillier scheme,
we now provide the operational description of the proposed
PPSS protocol, reported in Algorithm 2 and Algorithm 3.
The document collection D employed for the searching op-
eration is encrypted with a symmetric-key, and outsourced
to the remote server. Along with the encrypted version of D,
the client computes the indexing structure [[D]] by employ-