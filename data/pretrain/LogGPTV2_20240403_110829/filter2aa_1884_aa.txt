# RE:Trace – Applied Reverse Engineering on OS X

## Authors
- Tiller Beauchamp, SAIC
- David Weston, Microsoft

## DTrace Background

### What Is DTrace™?
DTrace was created by Sun Microsystems, Inc. and released under the Common Development and Distribution License (CDDL), a free software license based on the Mozilla Public License (MPL).

### Key Points
- **Kernel-based dynamic tracing framework**
- **Created by Sun Microsystems**
- **First released with Solaris™ 10 operating system**
- **Now included with Apple OS X Leopard, QNX, and FreeBSD**
- **Committed to CURRENT branch of FreeBSD 7 on June 10th, 2008; will be in 8 STABLE (John Birrell)**
- **Availability in OpenBSD, NetBSD, and Linux is under consideration**

**Note:** Solaris™ is a trademark of Sun Microsystems, Inc. in the United States and/or other countries.

## DTrace Overview

DTrace is a powerful framework for real-time performance observability and debugging. It leverages thousands of "probes" placed throughout the system to enable detailed tracing. When a program execution hits a probe, it triggers a set of predefined actions.

### DTrace Architecture
- **Probes**: Points of instrumentation in the kernel.
- **Actions**: Executed when a probe fires.
- **Predicates**: Conditions that determine whether actions are taken.

## The D Language

The D language is an interpreted, block-structured language with syntax similar to C. D programs are compiled into an intermediate form, which is validated for safety by the DTrace kernel software. Runtime errors are handled by the DTrace execution environment.

### Key Features
- **No control-flow constructs like if statements and loops**
- **Single, straight-line statement lists for tracing data**
- **Conditional tracing using predicates**

## DTrace Performance

DTrace is highly efficient:
- **Dynamic probes**: Enabled only when needed.
- **No code for inactive probes**: No performance degradation.
- **Instrumentation removal**: Probes are disabled and removed when the `dtrace` command exits, restoring the system to its original state.

## DTrace Uses

DTrace unifies the power of multiple tools into one programmatically accessible interface. It can:
- **Trace system calls and user functions (similar to truss)**
- **Trace library calls (similar to ptrace)**
- **Trace kernel functions (similar to prex/tnf*)**
- **Profile the kernel (similar to lockstat)**
- **Access kernel/user memory (similar to gdb)**

### Benefits
- **Combines system performance statistics, debugging information, and execution analysis**
- **A versatile tool for reverse engineers**
- **Monitors every part of the system, providing both broad and detailed views**
- **Debugs transient processes that other debuggers cannot handle**

## Creating DTrace Scripts

DTrace comes with dozens of ready-to-use scripts, such as those for system calls, reads and writes, file access, stack size, CPU time, and memory read/write statistics. Complex problems can often be diagnosed with a single DTrace script.

### Example: Syscall Count
```bash
dtrace -n 'syscall:::entry { @[execname] = count(); }'
```

### Example: File Open Snoop
```bash
#!/usr/sbin/dtrace -s
syscall::open*:entry {
  printf("%s %s\n", execname, copyinstr(arg0));
}
```

### Example: File Snoop Output
```plaintext
vmware-vmx /dev/urandom
Finder /Library/Preferences/SystemConfiguration/com.apple.smb.server.plist
iChat /Library/Preferences/SystemConfiguration/com.apple.smb.server.plist
Microsoft Power /Library/Preferences/SystemConfiguration/com.apple.smb.server.plist
nmblookup /System/Library/PrivateFrameworks/ByteRangeLocking
nmblookup /dev/dtracehelper
nmblookup /dev/urandom
nmblookup /dev/autofs_nowait
```

## DTrace Lingo

- **Probes**: Points of instrumentation.
- **Providers**: Logically grouped sets of probes (e.g., syscall, lockstat, fbt, io, mib).
- **Predicates**: Conditions that must be met for actions to be taken.
- **Actions**: Executed when a probe fires.

## DTrace Syntax

### Generic D Script
```d
provider:module:function:name /predicate/ {
  action1;
  action2;  // e.g., printf();
}
```

## DTrace and Reverse Engineering (RE)

DTrace is extremely versatile and useful for understanding how a process works and interacts with the system. It can be used to instrument any process without starting or stopping it, making it ideal for rapid development and real-time monitoring.

### Helpful Features
- **Control flow indicators**
- **Symbol resolution**
- **Call stack trace**
- **Function parameter values**
- **CPU register values**
- **Works in both kernel and user space**

### Examples
- **Control Flow**: Tracing function calls and their relationships.
- **Symbol and Stack Trace**: Resolving symbols and tracing call stacks.
- **Function Parameters**: Accessing and printing function parameters.
- **CPU Register Values**: Reading and printing CPU register values.

### Destructive Examples
```d
syscall::uname:entry { self->a = arg0; }
syscall::uname:return {
  copyoutstr("Windows", self->a, 257);
  copyoutstr("PowerPC", self->a + 257, 257);
  copyoutstr("2010.b17", self->a + (257 * 2), 257);
  copyoutstr("fud:2010-10-31", self->a + (257 * 3), 257);
  copyoutstr("PPC", self->a + (257 * 4), 257);
}
```

### Snooping
```d
syscall::write:entry { self->a = arg0; }
syscall::write:return { printf("write: %s", copyinstr(self->a)); }
```

## DTrace vs. Debuggers

- **DTrace is not a traditional debugger**: It does not control execution or inspect process information directly.
- **Parallel actions in the kernel**: DTrace performs actions in parallel when a probe is hit.
- **No effect on memory layout**: DTrace does not affect the target process's memory layout.
- **Exception handling**: DTrace does not perform exception handling directly but can halt a process and transfer control to an external debugger.
- **Anti-debugging techniques**: DTrace is currently not susceptible to traditional anti-debugging techniques, though Apple has implemented probe blocking with `PT_ATTACH_DENY`.

## DTrace Limitations

- **No conditionals or loops in the D language**
- **Output to stdout**: Functions like `stack()` and `unstack()` output to stdout.
- **Not ideal for data processing**: Lack of loops and use of stdout limits data processing capabilities.
- **Cannot modify registers**: This is a significant limitation for certain types of debugging and reverse engineering.

## DTrace Cautionaries

- **Probe dropping**: DTrace may drop probes by design.
- **Performance tuning**: Narrowing the trace scope and tuning options can improve performance.
- **Behavioral issues**: Some libraries and functions may behave unpredictably, leading to violations before function return.

## RE with Ruby, DTrace, and the Mach API

### RE:Trace
- **Combines Ruby with DTrace**: Leverages Ruby's OOP, text processing, and iteration capabilities.
- **Utilizes Ruby libdtrace bindings**: Written by Chris Andrews.
- **Integrates with existing Ruby RE frameworks**: Such as idarub, librub, metasm, MSF3.
- **Similar to programmatic frameworks**: pyDBG, noxDBG, immDBG.
- **Includes scripts for memory dumping and searching**.

### IdaRub
- **Wraps IDA interface**: Ruby code acts as the client, while the server is an IDA plugin.
- **Released by Spoonm at REcon 2006**.
- **Example usage**:
  ```ruby
  ida.set_item_color(eip, 3000)
  ```

### RE:Trace and Exploit Development
- **Vulnerability analysis**: DTrace probes help track data input flow to identify memory corruption.
- **Integration with IDARub**: Combines DTrace's dynamic tracing with IDA's static analysis features.

### RE:Trace and Code Coverage
- **Hooks every function in a process**: Ideal for implementing a code coverage-aware fuzzer.
- **Useful for understanding fuzzed areas**: Can check code coverage at the function or instruction level.

### RE:dbg
- **Programmatic debugger for Mach debug API**: Partially exists in Python (vtrace, Charlie Miller’s pydbg port).
- **Integrated Ruby-based RE toolset**:
  - **Tracing**: RE:Trace
  - **Disassembly**: IDArub
  - **Debugger**: reDBG

### iPhoto Format String Exploit
- **Test case for automation**: iPhoto format string vulnerability.
- **URL handler bug**: `iphoto://%dd%n`.
- **Steps**:
  - **Trace with RE:Trace**: Until hitting `printf` with `arg1=%25`.
  - **Use IDArub**: Get disassembly info from IDA.
  - **Set breakpoint with reDBG**: On RET of the function.
  - **Print stack return address**: Verify overflow correctness.

### RE:dbg ASLR Analysis
- **Start the application**: Look up addresses for application and library symbols.
- **Search through memory**: Find references to these addresses.
- **Repeat process**: Identify an address always relative to a useful function.

### Future Work
- **RE:dbg**: If not available within a week, contact the authors.

## Monitoring the Stack

### Writing a Stack Overflow Monitor with RE:Trace
- **Programmatic control at EIP overflow**: Allows pinpointing the vulnerable function and reconstructing the function call trace.

This document provides a comprehensive overview of DTrace and its applications in reverse engineering, highlighting its strengths, limitations, and practical examples.