[Python 之禅](https://www.python.org/dev/peps/pep-0020/)：
> 
>  优美胜于丑陋   Beautiful is better than ugly. 
> 
> 
>  明了胜于晦涩   Explicit is better than implicit. 
> 
> 
>  简洁胜于复杂   Simple is better than complex. 
> 
> 
>  扁平胜于嵌套   Flat is better than nested. 
> 
> 
> 
集合不正是这样美丽、明了、简单且扁平吗？
#### 成员测试
每次我们使用 `if` 语句来检查一个元素，例如，它是否在列表中时，意味着你正在进行成员测试：
```
my_list = [1, 2, 3]
>>> if 2 in my_list:
...     print('Yes, this is a membership test!')
...
Yes, this is a membership test!
```
在执行这些操作时，集合比列表更高效：
```
>>> from timeit import timeit
>>> def in_test(iterable):
...     for i in range(1000):
...             if i in iterable:
...                     pass
...
>>> timeit('in_test(iterable)',
... setup="from __main__ import in_test; iterable = list(range(1000))",
... number=1000)
12.459663048726043
```
```
>>> from timeit import timeit
>>> def in_test(iterable):
...     for i in range(1000):
...             if i in iterable:
...                     pass
...
>>> timeit('in_test(iterable)',
... setup="from __main__ import in_test; iterable = set(range(1000))",
... number=1000)
.12354438152988223
```
注意：上面的测试来自于[这个](https://stackoverflow.com/questions/2831212/python-sets-vs-lists) StackOverflow 话题。
因此，如果你在巨大的列表中进行这样的比较，尝试将该列表转换为集合，它应该可以加快你的速度。
### 如何使用
现在你已经了解了集合是什么以及为什么你应该使用它，现在让我们快速浏览一下，看看我们如何修改和操作它。
#### 添加元素
根据要添加的元素数量，我们要在 `add()` 和 `update()` 方法之间进行选择。
`add()` 适用于添加单个元素：
```
>>> s = {1, 2, 3}
>>> s.add(4)
>>> s
{1, 2, 3, 4}
```
`update()` 适用于添加多个元素：
```
>>> s = {1, 2, 3}
>>> s.update([2, 3, 4, 5, 6])
>>> s
{1, 2, 3, 4, 5, 6}
```
请记住，集合会移除重复项。
#### 移除元素
如果你希望在代码中尝试删除不在集合中的元素时收到警报，请使用 `remove()`。否则，`discard()` 提供了一个很好的选择：
```
>>> s = {1, 2, 3}
>>> s.remove(3)
>>> s
{1, 2}
>>> s.remove(3)
Traceback (most recent call last):
  File "", line 1, in 
KeyError: 3
```
`discard()` 不会引起任何错误：
```
>>> s = {1, 2, 3}
>>> s.discard(3)
>>> s
{1, 2}
>>> s.discard(3)
>>> # 什么都不会发生
```
我们也可以使用 `pop()` 来随机丢弃一个元素：
```
>>> s = {1, 2, 3, 4, 5}
>>> s.pop()  # 删除一个任意的元素
1
>>> s
{2, 3, 4, 5}
```
或者 `clear()` 方法来清空一个集合：
```
>>> s = {1, 2, 3, 4, 5}
>>> s.clear()  # 清空集合
>>> s
set()
```
#### union()
`union()` 或者 `|` 将创建一个新集合，其中包含我们提供集合中的所有元素：
```
>>> s1 = {1, 2, 3}
>>> s2 = {3, 4, 5}
>>> s1.union(s2)  # 或者 's1 | s2'
{1, 2, 3, 4, 5}
```
#### intersection()
`intersection` 或 `&` 将返回一个由集合共同元素组成的集合：
```
>>> s1 = {1, 2, 3}
>>> s2 = {2, 3, 4}
>>> s3 = {3, 4, 5}
>>> s1.intersection(s2, s3)  # 或者 's1 & s2 & s3'
{3}
```
#### difference()
使用 `diference()` 或 `-` 创建一个新集合，其值在 “s1” 中但不在 “s2” 中：
```
>>> s1 = {1, 2, 3}
>>> s2 = {2, 3, 4}
>>> s1.difference(s2)  # 或者 's1 - s2'
{1}
```
#### symmetric\_diference()
`symetric_difference` 或 `^` 将返回集合之间的不同元素。
```
>>> s1 = {1, 2, 3}
>>> s2 = {2, 3, 4}
>>> s1.symmetric_difference(s2)  # 或者 's1 ^ s2'
{1, 4}
```
### 结论
我希望在阅读本文之后，你会知道集合是什么，如何操纵它的元素以及它可以执行的操作。知道何时使用集合无疑会帮助你编写更清晰的代码并加速你的程序。
如果你有任何疑问，请发表评论，我很乐意尝试回答。另外，不要忘记，如果你已经理解了集合，它们在 [Python Cheatsheet](https://www.pythoncheatsheet.org/) 中有自己的[一席之地](https://www.pythoncheatsheet.org/#sets)，在那里你可以快速参考并重新认知你已经知道的内容。
---
via: 
作者：[wilfredinni](https://www.pythoncheatsheet.org/author/wilfredinni) 译者：[MjSeven](https://github.com/MjSeven) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出