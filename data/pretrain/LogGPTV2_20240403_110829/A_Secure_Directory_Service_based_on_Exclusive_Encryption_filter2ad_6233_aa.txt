# A Secure Directory Service Based on Exclusive Encryption

**Authors:**
- John R. Douceur
- Atul Adya
- Josh Benaloh
- William J. Bolosky
- Gideon Yuval
- `{johndo, adya, benaloh, bolosky, gideony}@microsoft.com`
- Microsoft Research

## Abstract

We present the design of a Windows file-system directory service that ensures the persistence, integrity, privacy, syntactic legality, and case-insensitive uniqueness of the names it indexes. Byzantine state replication provides persistence and integrity, while encryption ensures privacy. To enforce Windows' complex name syntax, including restrictions on allowable characters, terminal characters, and specific reserved names, we introduce a cryptographic process called "exclusive encryption." This process inherently excludes syntactically illegal names and enables the exclusion of case-insensitively duplicate names without access to their plaintext. The exclusive encryption process maps allowed strings to all possible strings, excludes certain characters through an amended prefix encoding, and supports case-insensitive comparison by separately encrypting case information. We also address issues related to hiding name-length information and access-authorization information, and we report a newly discovered problem with enforcing case-insensitive uniqueness for Unicode names.

## 1. Introduction

This paper details the design of a Windows-compatible file-system directory service that provides data privacy, data integrity, and access control, even if the servers managing the directory are untrusted. Our design uses encryption to protect data privacy and Byzantine replication to ensure data integrity. While this basic approach is applicable to any generic data-storage service, our directory service must additionally maintain the syntactic legality and case-insensitive uniqueness of filenames, even though it cannot have access to the plaintext of these names. We achieve this by constructing an encryption process that is inherently incapable of encrypting syntactically illegal names. More precisely, the decryption process will always produce a syntactically legal plaintext name, given any arbitrary bit string as an encrypted input, and the encryption process is simply the inverse of this procedure. Furthermore, the encryption provides a one-to-one mapping from de-cased legal names to their encrypted representations, allowing directory servers to verify the case-insensitive uniqueness of names within each directory.

The context for this work is Farsite [1], a secure, scalable, and distributed file system that functions as a centralized file server but is physically distributed among a network of untrusted desktop workstations. Farsite uses replication to provide reliability and integrity despite the failure or compromise of a subset of replica holders, and it uses encryption to ensure privacy. Files and directories have different properties, so different replication and encryption techniques are applicable to each. Files are large and cannot afford a high degree of replication, but they can be protected by conventional encryption and a cryptographic integrity check. By contrast, directory metadata is relatively small, allowing a greater degree of replication, but it needs to be managed by the system. To facilitate this management, Farsite uses Byzantine state replication [9], which preserves the integrity of any arbitrary sequence of operations on the replicated data, as long as fewer than one-third of the replica-holders are faulty or compromised [23].

A file system's directory service provides a named index of files, organized into a hierarchy of directories. Each directory contains a list of entries, and each entry includes a locally unique name and a reference to a file or another directory. Associated with each directory is a list of readers (authorized to read entry names), a list of writers (authorized to add or modify entry names), and one owner (authorized to change other users' access authorization). A secure directory service must provide the following access-control semantics:
- Only a reader can read entry names.
- Only a writer can add or modify entry names.
- Only the owner can grant or revoke read/write access.

These access restrictions must apply not only to other users in the system but also to the directory service itself. A compromised directory server should not be able to read entry names, add or modify entry names, or grant or revoke read/write authorization.

In addition to access control, we need to maintain the following correctness properties:
- No correctly functioning client will ever see a syntactically illegal name in a directory.
- No correctly functioning client will ever see two identical names in the same directory.
- No two correctly functioning clients will ever see different views of the same directory.

A conventional directory service running on trusted servers can readily address problems 1 and 2 by authenticating and mediating all user requests. Problem 3 can be addressed by encrypting directory entry names and not allowing the server access to the encryption key. Problem 4 can be addressed through the technique of Byzantine fault-tolerance [9], a general and powerful mechanism for constructing replicated state machines that can tolerate arbitrary behavior by any subset of strictly fewer than one-third of the replicas. Solutions to problems 5 and 6, which do not revive the first four problems, are the main contributions of the present paper.

Figure 1 illustrates the architecture of our system. Directory servers are organized into Byzantine-fault-tolerant server groups of size S, which can tolerate T = (S – 1) / 3 misbehaving servers [23]. All servers in a group maintain identical directory-state information. As the group receives requests from clients, the servers within the group collectively assign an operation number to each request using a Byzantine agreement algorithm, which guarantees that if no more than T of the servers are faulty, all correct servers will agree on an order in which to process the received requests [9]. When a server is prepared to begin a transactional state update, it informs all other servers in the group of its readiness. Once a server learns of at least 2T other servers that are ready as well, it commits its persistent state update. Each operation performable by a server group must be defined to have a deterministic effect on the replicated directory state. This combination of consistent ordering of requests, two-phase supermajority commit, and deterministic operation ensures that all correct servers within the group maintain consistent copies of the shared state [9].

When each server completes an operation, it sends a reply to the requesting client. By hypothesis, no more than T servers in each group are faulty, so a client that receives T + 1 matching replies can be confident that the reply content is genuine. Our design employs the highly efficient Castro-Liskov protocol [9] for its Byzantine state replication, which, due to its complexity and extensive description elsewhere [9, 10, 11], we do not describe further herein. The interested reader can find a wealth of information on Byzantine fault-tolerance [8, 12, 17, 23] and replicated state machines [22, 35] in the literature.

Windows' particular syntactic restrictions on directory entry names are as follows [28]:
- A name may not be null.
- A name may not contain any control characters (those with Unicode value less than 32).
- A name may not contain any of the following reserved characters: " * / : ? \ |
- A name may not end with a space or a period.
- A name may not match any of the following reserved strings (where n is any decimal digit): AUX, COMn, CON, CONIN$, CONOUT$, LPTn, NUL, or PRN.

Furthermore, for purposes of determining whether two names are identical, character case is ignored.

The above properties would be straightforward for a directory service to enforce if it could see the names of the directory entries. It is far more problematic to address the general case in which the servers are not authorized readers of the directories they maintain. Our solution is a cryptographic process we call “exclusive encryption” because it inherently excludes syntactically illegal names and because it enables the exclusion of duplicate names without access to their plaintext. This process employs several techniques:
- Name mapping to exclude reserved strings.
- A procedure for separating out case information.
- Encoding to exclude null names, control characters, reserved characters, and disallowed terminal characters.
- A technique for modifying any block cipher to make it surjective for arbitrary-length strings.

These techniques, which could be beneficial in other applications besides our secure directory service, are detailed in §3, and they are combined into the full exclusive encryption process in §4. In §5 and §6, we discuss other issues and related work before concluding in §7.

But first, the following section presents the architecture and design of the secure directory service for which exclusive encryption was developed, illustrating how we can satisfy both the access-control semantics and the correctness properties listed above.

## 2. Secure Directory Service Design

To more clearly highlight the challenges we face in our design, we reframe the above-described access-control and correctness requirements as six problems that need to be solved:
1. Preventing an unauthorized user from reading directory entry names.
2. Preventing an unauthorized user from modifying a directory.
3. Preventing a server from reading directory entry names.
4. Preventing a server from making an unauthorized directory modification.
5. Preventing an authorized writer from incorrectly modifying a directory.
6. Preventing the authorized owner from incorrectly modifying a directory.

For the remainder of this paper, we simply assume that the Byzantine server group acts as a single server that can be trusted to perform the requests it receives. However, we do not assume that it is safe to allow the server group to view or directly modify user-sensitive data, since a single compromised server could inappropriately disclose information.

Each directory has an associated symmetric encryption key used for encrypting the directory’s name information. This directory key is not available (in an unencrypted form) to the servers that maintain the directory metadata. Figure 2 illustrates the state that a server maintains for each directory, which has four components:
- A list of directory entries.
- An access control list (ACL) of access control entries (ACEs) for authorized readers and writers.
- A distinguished access control entry for the owner.
- A one-way hash of the directory key.

Each directory entry contains the entry name encrypted with the directory key (using the exclusive encryption process described in §4) and a reference to the file or directory associated with that name. Each access control entry contains a user’s public key, a copy of the directory key encrypted with the user’s public key, and a bit indicating whether the user has write authorization. The owner is implicitly a writer, so the distinguished access control entry for the owner does not include a write-authorization bit.

**Definition 1:** An authorized reader of a directory is a user for whom the directory state includes an ACE that (a) contains the user’s public key and (b) contains a ciphertext.