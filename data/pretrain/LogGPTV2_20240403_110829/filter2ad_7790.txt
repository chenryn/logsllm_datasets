title:Inherent PUFs and secure PRNGs on commercial off-the-shelf microcontrollers
author:Anthony Van Herrewege and
Andr&apos;e Schaller and
Stefan Katzenbeisser and
Ingrid Verbauwhede
Demo: Inherent PUFs and Secure PRNGs on
Commercial Off-the-Shelf Microcontrollers
Anthony Van Herrewege
KU Leuven
Heverlee, Belgium
anthony.vanherrewege@
esat.kuleuven.be
Stefan Katzenbeisser
TU Darmstadt
Darmstadt, Germany
katzenbeisser@seceng.
informatik.tu-
darmstadt.de
André Schaller
TU Darmstadt
Darmstadt, Germany
schaller@seceng.
informatik.tu-
darmstadt.de
Ingrid Verbauwhede
KU Leuven
Heverlee, Belgium
ingrid.verbauwhede@
esat.kuleuven.be
ABSTRACT
Research on Physically Unclonable Functions (PUFs) has
become very popular in recent years. However, all PUFs
researched so far require either ASICs, FPGAs or a micro-
controller with external components. Our research focuses
on identifying PUFs in commercial oﬀ-the-shelf devices, e.g.
microcontrollers. We show that PUFs exist in several oﬀ-the-
shelf products, which can be used for security applications.
We present measurement results on the PUF behavior
of ﬁve of the most popular microcontrollers today: ARM
Cortex-A, ARM Cortex-M, Atmel AVR, Microchip PIC16 and
Texas Instruments MSP430. Based on these measurements,
we can calculate whether these chips can be considered for
applications requiring strong cryptography.
As a result of these ﬁndings, we present a secure bootloader
for the ARM Cortex-A9 platform based on a PUF inherent to
the device, requiring no external components. Furthermore,
instead of discarding the randomness in PUF responses, we
utilize this to create strong seeds for pseudo-random number
generators (PRNGs). The existence of a secure RNG is at
the heart of virtually every cryptographic protocol, yet very
often overlooked. We present the implementation of a strongly
seeded PRNG for the ARM Cortex-M family, again requiring
no external components.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—Cryp-
tographic Controls; G.3 [Mathematics of Computing]:
Probability and Statistics—Random Number Generation
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage, and that copies bear this notice and the full ci-
tation on the ﬁrst page. Copyrights for third-party components of this work must be
honored. For all other uses, contact the owner/author(s). Copyright is held by the au-
thor/owner(s).
CCS’13, November 4–8, 2013, Berlin, Germany.
ACM 978-1-4503-2477-9/13/11.
http://dx.doi.org/10.1145/2508859.2512493.
Keywords
Physically Unclonable Functions; Pseudo-Random Number
Generation; Secure Boot
1.
INTRODUCTION
In recent years, research on Physically Unclonable Func-
tions (PUFs) has seen a large increase in popularity. PUFs
are devices that function as random identiﬁers, meaning that
the output of a PUF is diﬀerent for each physical instan-
tiation of a particular PUF design and it is impossible for
manufacturers to clone PUFs by controlling their production
process. PUFs can be used to authenticate devices and to
establish keys tied to a physical instance of a device, all with-
out the manufacturer having to program a key or ID into
the device.
One peculiarity of PUFs is that when queried for a response,
their output will diﬀer slightly each time. Thus, in order to
guarantee a ﬁxed result, a PUF’s output will have to be error
corrected. Depending on the type of PUF, the number of
bits that have to be corrected varies between 1–15% of the
total output length.
Of particular practical importance are the class of elec-
tronic PUFs, containing arbiter PUFs, ring oscillator PUFs
and memory-based PUFs, since these can be completely im-
plemented in silicon. However, a big drawback to practical
applications and fast industry adoption is that most, if not all,
of the PUFs proposed and researched so far have been imple-
mented in either ASICs, FPGAs or separate components. In
contrast, the goal of our research is to identify PUFs that are
already present in commercial oﬀ-the-shelf (COTS) devices,
such as microcontrollers. The beneﬁt of such innate PUFs
is that they do not require extra external components and
can be instantiated by writing appropriate software. Thus,
at least from a hardware point of view, such PUFs would
cost nothing to add to a device.
We show that PUFs in COTS exist and that they can be
used for a number of applications. For example, they allow to
bind hardware to software, which can be utilized to implement
a light-weight secure boot architecture. Furthermore, we
1333also show that inherent PUFs can improve random number
generation in COTS devices. Although often overlooked, the
security of virtually all cryptographic protocols stands or
falls by the strength of the random number generator (RNG).
Thus, a secure RNG is one of the core building blocks of
cryptographic designs. Due to budgetary and throughput
requirements, commercial devices requiring random numbers
use pseudo-random number generators (PRNGs), instead of
true random number generators (TRNGs). These PRNGs
are algorithms that deterministically produce output that,
to someone with no knowledge of the internal state of the
algorithm, looks like random data.
On startup, PRNGs should be seeded with truly random
data. Failure to do so leads to security weaknesses, as evi-
denced by the insecure Debian OpenSSL implementation [9].
This lead to the generation of weak keys and insecure commu-
nication links between parties worldwide. The recent addition
of an embedded PRNG to Intel processors [1] should help
improve the situation on desktop and server computers. Un-
fortunately, recent publications by Lenstra et al. [4, 5] and
Heninger et al. [2] have shown that on the embedded systems
front, many devices still exhibit severe lack of entropy in
the output of their PRNG algorithms, leading to the same
problems as those of the Debian implementation.
Thus, our goal is twofold: identify PUFs in COTS devices
and design secure PRNGs on embedded devices, paving the
way for cheap adoption of PUFs in the marketplace. Although
these goals might seem unrelated, they are in fact closely
tied together. Instead of discarding the errors present in the
output of a PUF, one can use the erroneous bits to generate
a strong seed for PRNG initialization.
2. PRESENTED WORK
It is known [3] that the start-up patterns of external SRAM
chips exhibit PUF-like behaviour. Recent research on Physi-
cally Unclonable Functions (PUFs) [6, 7, 11] in SRAM has
given more evidence of this fact. However, all research on
SRAM PUFs published so far has been conducted on either
FPGA boards or ASICs designed speciﬁcally for this pur-
pose. The main goal of our work is to take this research onto
unmodiﬁed COTS devices, such as microcontrollers. Thus,
all of our research is conducted on freely available devices,
requiring zero extra or custom designed components. More
speciﬁcally, we focus our eﬀorts on ﬁve of the most popu-
lar microcontroller families today, namely: ARM Cortex-A,
ARM Cortex-M, Atmel AVR, Microchip PIC16 and Texas
Instruments MSP430.
2.1 Inherent PUFs
Very little research has been done on the PUF and en-
tropy characteristics of embedded SRAM. Thus it is not well
known whether such SRAM is inﬂuenced by other compo-
nents present in the microcontroller and if it can actually be
used as either a PUF or an entropy source. Furthermore, it
is not clear whether the SRAM behavior of diﬀerent micro-
controller families is similar.
Our research shows that the SRAM start-up values of many
of the mentioned microcontrollers do behave as a PUF. While
the within-class Hamming Distance indicates the robustness
of measurements of a single device, the between-class Ham-
ming Distance states whether the device can be uniquely
identiﬁed among other devices. For some of these microcon-
trollers, e.g. a TI OMAP4430 housing a Cortex-A9 chip,
the SRAM behaviour is almost ideal, with a within-class
Hamming Distance of 5.71% and a between-class Hamming
Distance of 50.02% on average (Fig. 1). Others, such as the
Microchip PIC16F1825, have very distinct characteristics,
showing that not all internal SRAM can be trusted to behave
like a PUF.
Figure 1: Within- and Between-class fractional Ham-
ming Distance distribution for the Texas Instru-
ments OMAP4430.
2.2 Strong PRNGs
As shown, SRAM PUFs exhibit a certain amount of ran-
domness in their output, as indicated by the within-class
distance. Instead of accepting this randomness, i.e. entropy,
as an unfortunate byproduct of PUFs, we exploit it in order to
generate strong, high entropy seeds for PRNGs and thus pro-
vide a solution to vulnerable cryptographic implementations
due to weak random numbers [2, 9].
We present results for SRAM entropy in the aforemen-
tioned devices under various operating conditions (Fig. 2).
Our measurements show that, unexpectedly, there is a big
diﬀerence in SRAM characteristics between various micro-
controller families. We show what the consequences of these
ﬁndings are on the maximum attainable strength of PRNGs
implemented on them.
Furthermore, we present an implementation of a portable
and secure PRNG on the ARM Cortex-M platform. This
platform is chosen due to its immense popularity [8] and we
hope our implementation stimulates and helps to improve
the security of devices employing microcontrollers of the
Cortex-M family. Such an implementation is the ﬁrst of
its kind, and could open the door to strong cryptographic
implementations on this very popular microcontroller.
2.3 Secure Boot
Another application for inherent PUFs is to use it as an
identiﬁer for a given device, which is used to implement
a secure boot process tying software to a speciﬁc physical
instantiation of a Cortex-A processor.
In particular, we derive a ﬁngerprint from the intrinsic
SRAM of an System-on-a-Chip (SoC) platform to identify the
device. We subsequently create a cryptographic key from the
ﬁngerprint to decrypt the bootloader as well as the kernel
ﬁle, stored in non-volatile memory and thus authenticate
13343. CONCLUSION
We show that inherent PUFs exist in COTS devices and
that they can actually be used to create various light-weight
cryptographic solutions. We implemented a strong PRNG
for ARM Cortex-M, which is seeded by true random data
extracted from PUF noise. Additionally, we used features of
inherent PUFs to bind software to a hardware instance and
thus create a secure boot architecture on a SoC platform.
4. ACKNOWLEDGEMENTS
This work is supported in part by the European Commis-
sion through the ICT programme under contract FP7-ICT-
2011-284833 PUFFIN. In addition, it is supported by the
Research Council KU Leuven: GOA TENSE (GOA/11/007),
by the Flemish iMinds projects, and by the Hercules Foun-
dation AKUL/11/19.
[3] Daniel E. Holcomb, Wayne P. Burleson, and Kevin Fu.
References
[1] Intel Corporation. 2012. Intel Digital Random Number
Generator (DRNG) Software Implementation Guide.
http://software.intel.com/en-us/articles/intel-
digital-random-number-generator-drng-software-
implementation-guide. (Aug. 2012).
[2] Nadia Heninger, Zakir Durumeric, Eric Wustrow, and
J. Alex Halderman. 2012. Mining Your Ps and Qs:
Detection of Widespread Weak Keys in Network
Devices. In Proceedings of the 21st USENIX Security
Symposium.
2009. Power-Up SRAM State as an Identifying
Fingerprint and Source of True Random Numbers.
IEEE Trans. Comput. 58, 9 (Sept. 2009), 1198–1210.
[4] Arjen K. Lenstra, James P. Hughes, Maxime Augier,
Joppe W. Bos, Thorsten Kleinjung, and Christophe
Wachter. 2012a. Public Keys. In CRYPTO (Lecture
Notes in Computer Science), Reihaneh Safavi-Naini
and Ran Canetti (Eds.), Vol. 7417. Springer, 626–642.
[5] Arjen K. Lenstra, James P. Hughes, Maxime Augier,
Joppe W. Bos, Thorsten Kleinjung, and Christophe
Wachter. 2012b. Ron was wrong, Whit is right.
Cryptology ePrint Archive, Report 2012/064. (2012).
[6] Roel Maes. 2012. Physically Unclonable Functions:
Constructions, Properties and Applications. Ph.D.
Dissertation. KU Leuven. Ingrid Verbauwhede
(promotor).
Low-Overhead Implementation of a Soft Decision
Helper Data Algorithm for SRAM PUFs. In
Proceedings of the 11th International Workshop on
Cryptographic Hardware and Embedded Systems
(Lecture Notes in Computer Science), Vol. 5747.
Springer-Verlag, 332–347.
Quarter and Full Year 2012. (Feb. 2013).
http://ir.arm.com
Predictable Random Number Generator. Technical
Report. http://www.debian.org/security/2008/
dsa-1571.en.html
http://pandaboard.org/content/platform. (Oct.
2010).
Schrijen, Pim Tuyls, and Helena Handschuh. 2012.
Eﬃcient Implementation of True Random Number
Generator Based on SRAM PUFs. In Cryptography and
Security (Lecture Notes in Computer Science), David
Naccache (Ed.), Vol. 6805. Springer, 300–318.
[7] Roel Maes, Pim Tuyls, and Ingrid Verbauwhede. 2009.
[11] Vincent van der Leest, Erik van der Sluis, Geert Jan
[8] ARM Holdings PLC. 2013. Results for the Fourth
[9] Debian Security. 2008. DSA-1571-1 OpenSSL –
[10] Pandaboard.org. 2010. PandaBoard Platform.
Figure 2: SRAM min-entropy for Microchip
PIC16F1825 and STMicro STM32F100R8 at vari-
ous temperatures.
Figure 3: The general architecture of the light-
weight secure boot processes.
the ﬁrmware, which will be run. Fig. 3 shows the overall
architecture of the implementation.
Using this light-weight approach, we can achieve a deﬁned
software state at boot time and thus guarantee a trustworthy
initialization of the operating system or ﬁrmware, without
the requirement of additional hardware like TPM chips. We
implement the secure boot approach on a PandaBoard [10],
which is a OMAP4430-/4460-based SoC platform. It consists
of two Cortex-A9 processors and two Cortex-M3 processors
and provides rich multimedia functionality. Hence, it can
be regarded as a reference platform comparable to modern
mobile devices. We further test the PUF’s response stability
for high ambient temperatures. Since we can not put the
PandaBoard in a climate chamber without the risk of de-
stroying it, we simulate a temperature test for high ambient
temperatures by stressing the CPUs with high computational
load. Additionally, we investigate other memory instances in
the on-chip memory (OCM) subsystem for potential PUF
characteristics. To this end, we explore an appropriate ac-
cess to the save-and-restore (SAR) memory and analyze the
extracted start-up values.
-30°C STM-30°C PIC+25°C STM+25°C PIC+90°C STM+90°C PIC0246Temperature/ Chip Combinationmin-entropy (%)ContainerGeneric secure boot architectureSystem-on-a-Chip (SoC)Masked ROMPUF Instance   (SRAM)2nd stagebootloader1.query PUF3rd stagebootloader2. decrypt & call3. decrypt &callAndroid1335