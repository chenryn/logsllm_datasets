binary level as explained in the following.
3.2 Analysis Approach
We argue that there are four parts of a server application
that are generically prone to the two backdoor classes in our
focus. These parts are:
• authentication validation code
• speciﬁc authentication validation result handling code
(e.g., code that terminates a session in case of invalid
credentials)
• command parsing code
• speciﬁc command handling code
To identify these parts in a given server application, we
record runtime traces for multiple diﬀerent inputs and com-
pare them. The intuition behind this approach is the follow-
ing: consider for example the authentication mechanism of a
server application such as ProFTPD. By deﬁnition, the pur-
pose of each authentication mechanism is to decide whether
or not a third party suﬃciently proved its identity to qualify
for legitimate elevation of privilege. The process is similar
in case of command dispatching: diﬀerent operations are
performed for diﬀerent commands and arguments. In order
to behave diﬀerently for diﬀerent inputs, a server applica-
tion in general needs at one point during runtime to leave
the common execution path and follow an exclusive execu-
tion path accordingly1. By comparing control ﬂow traces
for various inputs, it is possible to determine common exe-
cution paths and those that are exclusive to a certain group
of inputs. In the next step, it is often possible to determine
deciders and handlers on function or on basic block level.
In the case of the authentication process, deciders perform
the actual authentication validation, while handlers process
the validation result. In the case of the command dispatch-
ing process, deciders parse and dispatch commands, while
handlers implement the commands’ speciﬁc functionality.
In general, the following possibilities exist for a server ap-
plication to implement exclusive execution paths for diﬀer-
ent inputs:
C1 through exclusive function invocations
C2 through exclusive paths inside commonly invoked func-
tions (i.e., exclusive basic blocks)
C3 without exclusive program parts, but through an ex-
clusive execution order of common functions and basic
blocks
In our empirical studies of diﬀerent server applications we
found that the two cases C1 and C2 are by far the most
common in practice. Case C3 is not entirely unlikely to be
1One could probably draw scenarios where the diﬀerent fea-
tures of a server application are entirely implemented by
diﬀerences in the data ﬂow only and not in the control ﬂow.
Due to the lack of real-world relevance of such scenarios,
they are not considered further here.
encountered, though: consider for example a server appli-
cation implementing the available commands in an internal
scripting language. Runtime traces both on function and on
basic block level for diﬀerent inputs of such a server appli-
cation would diﬀer, but possibly not contain any exclusive
program parts.
Cases C1 and C2 will receive the most attention for the
rest of this work. An intuitive and straightforward approach
for the identiﬁcation of handlers and deciders in these cases
is the following: Given two traces T0 and T1 for diﬀer-
ent inputs (e.g., valid password and invalid password), han-
dlers can be identiﬁed by determining the set of exclusive
functions/basic blocks for each of the two traces: ST0,ex =
ST0\ST1 and ST1,ex = ST1\ST0 . In turn, the corresponding
deciders are necessarily in Scommon = ST0 ∩ ST1 and are
likely parents of exclusive functions/basic blocks in Sex =
ST0,ex ∪ ST1,ex.
Built upon this basic idea for the identiﬁcation of deciders
and handlers, we have developed the algorithm A-WEASEL
which is described in the following.
3.2.1 The A-WEASEL Algorithm
The A-WEASEL algorithm is an integral part of our ap-
proach. It is described in detail in Appendix A and we pro-
vide a high-level overview now. The algorithm starts work-
ing on function level traces only since they can be collected
on virtually any platform where gdb (but possibly no instru-
mentation solution like Pin) is available in a straightforward
and eﬃcient way. Basic block level traces are collected as
needed.
Given a set of traces of a server application on function
level for diﬀerent protocol runs (e.g., traces for diﬀerent FTP
commands), we recursively compute a combined decision
tree composed of deciders and top-level handlers as depicted
in Figure 2. Handlers are initially identiﬁed by simply deter-
mining the set ST,ex = ST\Scommon of exclusive functions
for each trace and can be shared between multiple traces.
For each identiﬁed decider (or handler shared between mul-
tiple traces) on function level, traces on basic block level are
recorded dynamically for all corresponding protocol runs2.
Given these basic block traces, we compute the internal de-
cision tree of the respective function. For example in Figure
2 the internal decision tree of the decider function z is gener-
ated from corresponding basic block level traces for protocol
runs 1 and 2. A-WEASEL is recursively invoked with the
applying set of function level sub-traces for each identiﬁed
decider function.
A-WEASEL reliably determines the decision tree for a
given set of traces, though it is only applicable for the afore-
mentioned server application implementation case C1 or a
combination of cases C1 and C2. This is due to the algo-
rithm depending on the identiﬁcation of exclusive handlers:
if there are no functions that are exclusive to a certain sub-
set of all traces, no handlers can be identiﬁed (and as a
consequence, no deciders as well).
In order to cope with
server applications that are implemented strictly according
to cases C2 and C3 as well and to improve overall results,
we implemented a set of additional algorithms in Weasel
that are outlined in the following.
2We record basic block level traces of functions in a call
stack sensitive manner. This way we can ensure that only
the certain invocations of interest of a function are examined
on basic block level.
854Figure 2: Schematic derivation of the decision tree (right) from the examplary function level traces T 1, T 2
and T 3 (left). The functions a, b, c, d, e and z are not contained in all traces and are thus exclusive to certain
traces. The functions x, y and z are deciders, while a, c, d and e are top-level handlers.
Differential Return Value Comparison.
A major drawback of A-WEASEL is that it fails to iden-
tify decider and handler functions when decisions made at
runtime only manifest in diﬀerences in the execution ﬂow
on basic block level. To cope with this problem, Wea-
sel records exactly two traces for each protocol run. Func-
tions with diﬀerent return values in both traces are added
to the set of functions to ignore. This way, irrelevant func-
tions in our context such as malloc() or time() are ﬁltered
out. Functions with the same return value in both traces,
but diﬀerent return values between diﬀerent protocol runs,
are treated as handlers by A-WEASEL. By applying this
technique, A-WEASEL for example correctly identiﬁes the
function sys_auth_passwd() as decider in the authentica-
tion process of OpenSSH (see Section 5.1.1), which it would
have not otherwise. Though there are numerous ways a
function can signal its outcome to its caller, the described
technique only takes immediate return values of functions
into account.
Scoring Heuristics.
Weasel contains a set of simple heuristic scoring algo-
rithms that aim at identifying deciders and estimating their
importance by comparing the structure of the call graphs of
a given set of traces. The algorithms are used to rank the
importance of deciders identiﬁed by A-WEASEL. Besides,
they can partly serve as a fall back when server applications
are encountered that do not implement exclusive functional-
ity through exclusive function invocations (cases C2 and C3
as discussed above). All algorithms have in common that
they require a reference trace which the other traces are
compared to. When examining the authentication process,
the trace for valid credentials serves as reference trace, while
in the case of the command dispatching process a specially
recorded trace for a knowingly invalid command serves this
purpose.
For instance, one algorithm attempts to remove loops from
all traces, determines the longest common subsequence of
calls between all traces and the reference trace and assigns
scores to functions according to their positions in the com-
mon sub-sequences (scores increase towards the end as those
functions are believed to be more likely to be responsible for
the decision to split execution paths). An even simpler al-
gorithm assigns scores to deciders linear to the amount of
exclusive children. The scores assigned to functions by the
diﬀerent algorithms are summed up.
3.3 Application of Analysis Results
Once the deciders as well as the handlers are known for
the authentication or the command dispatching process of a
server application, further analysis can be conducted. The
goal is to identify possible backdoors and to enable the hard-
ening of legacy binary applications.
3.3.1 Discovering Suspicious Program Paths
When the functions or basic blocks handling a successful
authentication or a certain command are known, we can ap-
ply existing methods of static and dynamic binary analysis
for the detection of backdoors. A straightforward approach
which we apply here is the static enumeration and compari-
son of all syscalls and external library calls reachable in the
static call graph from identiﬁed handlers (we utilize the third
party tool IDA Pro for this). For example, even invocations
of socket() or send() should be considered suspicious when
they are only referenced from one of multiple handlers. In
the case of our running example, the installed backdoor in
the HELP command can be identiﬁed this way (see Section
5.2 for a detailed discussion). Moreover, identiﬁed deciders
and handlers can be used as starting points for more com-
plicated analysis techniques such as symbolic execution [23].
Starting symbolic execution at the entry-point of identiﬁed
handler code should in many cases – and especially for com-
plex software such as ProFTPD – deliver better and more
cost-eﬀective results than approaches examining an entire
application. In order to be able to apply techniques of sym-
bolic execution, one of course always needs to declare certain
memory as symbolic. Identifying memory regions that are
worthwhile to declare as symbolic poses a challenge when
examining single functions. To tackle this problem, we have
implemented an analysis module for Weasel that compares
the arguments of identiﬁed deciders in diﬀerent traces and
heuristically searches for diﬀerences (see Section 4.2.2). In
the case of a typical password validation function it is then
for example possible to determine that certain arguments
are pointers to memory regions with varying contents (e.g.,
username and password). In the next step, these memory
regions could be marked as symbolic when analyzing the
respective function with symbolic execution techniques.
3.3.2 Disabling Functionality
One can very well think of scenarios where it is desirable
to disable certain functionality of a legacy server application.
For example it might be known that certain commands are
vulnerable to attacks. Instead of shutting the whole service
855down or applying error-prone ﬁltering on the network level,
our approach allows for the disabling of single commands
by means of binary instrumentation or binary rewriting. In
the case of our running example, eﬀective protection can
already be achieved by simply writing an illegal instruction
at the start of the handler for the HELP command, causing
the respective fork of the server to crash and exit when the
command is issued.
Backdoors in the authentication process, like for exam-
ple hardcoded credentials, often manifest in additional edges
and nodes in the CFG of one of the involved decider func-
tions. These additional edges and nodes are usually not con-
tained in any recorded basic block trace for legitimate input.
We call such edges “cold”. For complex software, cold edges
and nodes are only a rather weak indication for the pres-
ence of a backdoor, as there are usually many benign basic
blocks that are only visited under rare conditions. Never-
theless, knowledge of cold edges in decider functions of the
authentication process can be used to increase the protec-
tion level of applications: techniques for binary instrumen-
tation or rewriting can for example be used to log access
to edges identiﬁed as cold during runtime over a longer pe-
In case an edge is taken for the ﬁrst time, an alert
riod.
can be triggered and the incident can be investigated.
In
practice, we suggest the utilization of a training phase dur-
ing which additional benign paths are discovered and suc-
cessively enabled before the ﬁnal rewriting/instrumenting
takes place. Entirely disabling cold edges in decider func-
tions might severely weaken the security of an application,
e.g., the protection against password brute-forcing could be
rendered non-functional. In the following, we use the term
of “cutting an edge” in order to refer to the monitoring or
disabling of an edge.
Another application of our approach is the identiﬁcation
and elimination of undocumented commands. Command
deciders of server applications of classes C1 or C2 dispatch
recognized commands either through conditional and static
(e.g., JZ Offset) or dynamic (e.g., CALL EAX) branches
to their designated handlers. The latter is the case for
our running example: when a command is recognized in
ProFTPD, a C structure describing it is loaded from a static
table. Each such structure contains a pointer to the handler
function for the corresponding command, which is called by
the decider/dispatcher through a CALL EAX instruction.
For server applications built in a similar way, two interesting
measures become possible on top of our basic approach:
• Once several command handlers are known, a likely lo-
cation and size of the table(s) holding the command-
describing structures in memory can be determined.
In the next step, it is possible to identify all avail-
able commands and unwanted commands can easily
be eliminated using techniques of binary instrumenta-
tion or rewriting.
• Once the point of execution is known where the control
ﬂow is dynamically transferred to a command handler,
techniques of binary instrumentation or rewriting can
be used to prevent the execution of unknown or un-
wanted command handlers.
We have developed a module for our analysis framework
that heuristically checks for tables containing command de-
scriptors given a set of pointers to command handlers (see
Section 4.2).
3.3.3 Enforcing Authentication
When deciders and handlers of the authentication process
of an application can be linked to certain authentication
levels, it becomes possible to determine the authentication
level of an active session by examining the execution ﬂow
of the corresponding thread at runtime. Combined with
the knowledge of whereabouts of command handlers, ﬁne-
grained access control or defense mechanisms such as shadow
authentication [13] can be realized. In our running example,
it would be possible to limit the availability of the HELP
command to those threads that were observed successfully
authenticating before.
4.
IMPLEMENTATION
The core of the analysis framework Weasel is our library
PyGdb. It is written for Python 2.7 and implements a client
for the GDB Remote Serial Protocol [1] and thus needs to
be connected to a remote gdbserver instance. PyGdb sup-
ports all basic debugging tasks from setting breakpoints to
following forks. Currently our software supports environ-
ments running Linux on x86, x64, or MIPS32 platforms.
The tracing engine is built on top of PyGdb and sup-
ports tracing on function as well as on basic block level. As
PyGdb is designed to not include comprehensive disassem-
blers for its supported platforms, basic blocks are initially
identiﬁed by stepping single instructions.
The tracer is aware of implicit edges in the CFG induced
by conditional instructions and records virtual basic blocks
accordingly. To understand the need for this consider the
x86 conditional move instruction CMOVZ: data is only moved
from the source to the destination operand in case the zero-
ﬂag is set (e.g., as the result of a compare operation). Com-
pilers use such instructions to eﬃciently translate simple if-
then constructs. Taking this into account can be crucial for
successfully detecting and disabling backdoors (see Sections
5.1.1 and 5.2).
4.1 Protocol Player
In order to fully automate the analysis process, we devel-
oped a system for the speciﬁcation and playback of proto-
cols. Similar to existing work in the realm of fuzz testing of
software [7, 8], we describe protocols in a block-based man-
ner according to their speciﬁcations. The blocks describing
a protocol are ordered in levels and are grouped by strings
and privilege levels. Our description of the FTP protocol
according to RFC 959 [29] for example possesses nine levels,
the strings CmdArg0, CmdArg1 and CmdArg2 and the
privilege levels NoAuth, Anonymous and Auth.
Before traces of a certain server application are recorded,
the corresponding protocol description is compiled to a set of
speciﬁc protocol scripts. Compiled scripts are solely built of
the atoms PUSH DATA, SEND, RECV and WAIT, and
the virtual atoms START RECORDING and STOP RE-
CORDING. The last two are automatically inserted by the
protocol compiler before and after the atoms of interest.