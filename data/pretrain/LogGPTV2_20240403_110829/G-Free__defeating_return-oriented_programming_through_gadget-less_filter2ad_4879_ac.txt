consumed by the pre-processor during a second compilation phase
in order to provide it with the previously missing information.
Unfortunately, inserting a nop at a certain position to ﬁx a jump
offset may actually affect the offsets of many other jumps since it
alters the whole address space of the binary. Our prototype binary
analyzer does not consider the overall structure of the binary ﬁle
when reporting the instructions to ﬁx. Therefore, while ﬁxing a
set of jump offsets, several other offsets may start to contain free-
branch opcodes. This makes it necessary to perform several com-
pilations until all the offsets are ﬁxed. Note that in this process, we
may need to ﬁx a single jump instruction several times. However,
since inserting nop instructions between a jump and its destination
can only increase the offset but never decrease it, we are sure to
ﬁnd a safe offset after a ﬁnite number of iterations.
A more optimized analyzer that can perform a global analysis
and take into account the target of every jump instruction would
eliminate this problem. It would also produce smaller executables
since recompilations insert otherwise unnecessary nop bytes.
545.2 Random Keys
As described in Section 4, our approach requires a random value
to encrypt both the return address and the cookie stored on the
stack. For this purpose, our prototype inserts a key generation rou-
tine at the beginning of the program’s entry point (or initialization
routine if it is a library). In our prototype, this routine simply reads
a 32-bit random value from the Linux special ﬁle /dev/random and
stores the value in a global memory location.
If the attacker has a way to read arbitrary memory locations be-
fore performing the actual attack, he could be able to fetch the
per-process random key and use it to craft the required values on
the stack to defeat our implementation. This limitation is com-
mon to many canary-based stack protection mechanism such as
StackGuard [11] and ProPolice [18]. However, this problem can
be avoided by substituting the per-process random key with a per-
function key computed at runtime in the function headers.
5.3 Stack Reference Adjustments
We store our cookie just above the saved return address in the
stack, shifting the frame base upwards by 4 bytes. Since a function
usually uses the %ebp register to reference the stack relative to
the frame base, and our cookie is located below the frame base,
references to the stack local variables remain unchanged. On the
contrary, references to function parameters which are stored below
the frame base, and therefore below our cookie, need to be adjusted
by 4 bytes.
We achieve this by simply correcting each positive displacement
to %ebp by adding to it the size of our cookie:
movl 0x8(%ebp), %eax ⇒ movl 0xc(%ebp), %eax
Note that compiler optimizations that adopt Frame Pointer Omis-
sion (FPO) use the stack pointer to reference arguments and local
variables. In this case, we need to compute the displacement of
the stack pointer to the function’s frame at any given position in
the function in order to identify and ﬁx the references and locate
our cookie in the stack. This requires a comprehensive stack depth
analysis. We have designed our pre-processor to perform this anal-
ysis on the ﬂy without the need for any extra pass over the source
ﬁle, even when the execution ﬂow of the processed function is non-
linear. We keep track of push & pop operations and arithmetic
computations on the stack pointer and update the system’s view of
stack depth accordingly. Depending on the state of the stack, we
can then decide whether a stack access (e.g., 120(%esp)) points
to a local variable or to a function’s parameter, so that we can apply
the displacement adjustment where appropriate.
5.4 Conditional Code Rewriting
Our prototype implements all immediate and displacement re-
construction strategies we described in Section 4. However, to
reduce the performance overhead, we apply those transformations
only when absolutely necessary. Otherwise, we use a faster approx-
imate solution. In particular, during the ﬁrst compilation phase, we
prepend each instruction that contains free-branch opcodes among
its immediate or displacement ﬁelds with an alignment sled. The
sled protects the instruction, but does not actually remove the free
branch from the code. Therefore, an attacker can sometimes build
very short gadgets that ﬁt the few bytes between the end of the sled
and the unaligned free-branch instruction.
Our system automatically checks these bytes after the compila-
tion.
If it detects that they do indeed contain valid instructions,
it falls back to the safer (but slightly less efﬁcient) immediate or
displacement reconstruction methods.
5.5 Return Address and Indirect Jump/Call
Protection Blocks
As previously explained in Section 4, our solution protects
aligned free-branch instructions by introducing two short blocks of
code: the return address protection block and the indirect jump/call
protection block (the current implementations are shown in Fig-
ure 3). These two pieces of code are the only ones in the ﬁnal
executable that can still contain gadgets and, therefore, they must
be carefully designed to prevent any possible attack.
The return address protection code is 11 bytes long and all bytes
are under our control, with the exception of the 4-byte address of
the random key, which could change for each compiled program
and for shared libraries at each relocation. To ensure that the code
is safe to use, we need to prevent this value from containing po-
tentially dangerous instructions. In our implementation, we control
the least signiﬁcant two bytes by automatically inserting appropri-
ate alignment directives into the assembled code when deﬁning the
key storage location, ensuring that the address always ends with the
innocuous “0xf0 0x00” sequence. In addition, according to the
Linux process memory layout, the most signiﬁcant address byte of
the .bss section (where we store our random key) is limited in
practice to 0x08 for regular ELF executables and 0xb* for shared
libraries 1. Therefore, it encodes either a variation of a load imme-
diate into register instruction (e.g., mov $IMM, %reg), or an or
instruction between two 8-bit operands.
The indirect jump/call protection block is 19 bytes long and con-
tains an additional 4-byte-long dynamic section, the per-function
constant identiﬁer we generate at compile time to compute the
cookie. The example shown in Figure 3 (that uses a 0x0f0f1f76
function identiﬁer) is entirely gadget-free because it contains no
aligned or unaligned instruction sequences that would make it pos-
sible for an attacker to reach jmp *%edx without invalidating its
contents. In fact, any logic/arithmetic operation that does not yield
a result of zero (e.g., incl %ebp, unless %ebp overﬂows) clears
the zero ﬂag in the processor and prevents the use of the conditional
jump jz .+4 (this instruction only jumps if the zero ﬂag is set in
the processor). Consequently, the value inside %edx is cleared.
Different values of the function identiﬁer could potentially in-
troduce a new and useful gadget; but since these constants can be
arbitrarily chosen and do not need to be kept secret, we can easily
work around problematic cases. In order to minimize the risk in the
ﬁrst place, we use simple heuristics such as using bytes that repre-
sent invalid opcodes (e.g., 0x0f 0x0f) and avoiding dangerous
opcodes such as those encoding mov or free-branch instructions.
Figure 4 shows all the gadgets that can be extracted from our
current system implementation. As can be seen, apart from the
ability to load the %eax with a controlled value (popl %eax),
the gadgets have no value.
5.6 Compiling glibc
During our case study of compiling glibc using G-Free, we
have encountered several issues requiring particular care. These
were mostly related to unconventional programming practices used
for dealing with low-level tasks, or manually optimized assembly
code. This section explains our observations in this regard, and
explains how we cope with these special cases.
are
Multiple Entry Points: We have come across various functions in
glibc that include more than one possible entry point. Our system
1The Linux
dy-
namic
range
0xc0000000-0x40000000, starting from higher addresses.
As a result, in practice almost any shared library has 0xb* as the
most signiﬁcant address byte of its .bss section.
layout
loaded at
process memory
shared libraries
dictates
the
address
that
55Return address protection code
pushl %eax
50
a1 00 f0 fd b7 movl
xorl
31 44 24 04
58
popl
0xb7fdf000, %eax
%eax, 0x4(%esp)
%eax
Indirect jump/call protection code
50
a1 00 f0 fd b7
35 76 1f 0f 0f
39 45 04
58
74 02
31 d2
pushl
movl
xorl
cmpl
popl
jz
xorl
%eax
0xb7fdf000, %eax
$0x0f0f1f76, %eax
%eax, 0x4(%ebp)
%eax
freebranch
%edx, %edx
freebranch:
ff e2
jmp
*%edx
Figure 3: Code inserted to protect the aligned return and indirect jump/call instructions
Gadget A.1
Gadget A.3
00 f0
fd
b7 31
44
24 04
58
f0 fd
b7 31
44
24 04
58
addb
std
movb
incl
andb
popl
%dh, %al
04 58
addb
$0x58, %al
$0x31, %bh
%esp
$0x04, %al
%eax
Gadget A.2
lock std
movb
incl
andb
popl
$0x31, %bh
%esp
$0x04, %al
%eax
Gadget B.1
45
04 58
74 02
31 d2
incl
addb
jz
xorl
freebranch:
ff e2
jmp
%ebp
$0x58, %al
freebranch
%edx, %edx
*%edx
Figure 4: Gadgets available in the return address (A) and in the indirect jump/call (B) protection blocks
successfully detects such functions and instruments all entry points
with the appropriate headers. Additionally, we prepend each header
that lies in the execution path of other entry points with a jump
instruction to skip over the header, ensuring that only one header is
executed per function call.
Functions that Access the Saved Return Address: In glibc, we
have encountered a single function, namely setjmp that accesses
the saved return address on the stack. setjmp, together with the
function longjmp, is used for implementing non-local jumps: a
call to setjmp saves the current stack context to restore it after-
wards when longjmp is invoked. This behavior conﬂicts with our
return address protection scheme. Since the return address is stored
in an encrypted form on the stack, a call to setjmp saves the en-
crypted return address and a subsequent call to longjmp results
in an illegal memory access. In order to solve this problem, we
modiﬁed our prototype to detect when the saved return address is
moved to a register and perform the decryption on the duplicated
value to ensure correct functionality.
Jumps between Functions: In numerous cases, a function di-
rectly jumps to another one without saving the return address, es-
sentially making that jump an exit point. During compilation, we
check every jump destination to recognize jumps outside the cur-
rent function and treat them as regular exit points for inserting the
necessary footers. These footers are not meant to protect a free-
branch instruction, since none follows, but to restore the return ad-
dress to its original value before transferring the execution ﬂow to
another function.
6. EVALUATION
The main goal of our evaluation is to show that our technique can
be applied to compile real-world applications and produce gadget-
free executables. To demonstrate that we are able accomplish this
goal, we performed a set of experiments in which we measured the
impact of our code transformations in terms of performance and
size overheads of the binaries produced by our tool.
In our tests, we combined the G-Free pre-processor with gas
2.20 and GCC 4.4.3. All the experiments were performed on
a 2GHz Intel Core 2 Duo T7300 machine with 2GB of memory,
running Arch Linux (i686) with Linux kernel 2.6.33.
6.1 Compilation Results
Since ROP attacks usually extract their gadgets from common
libraries, we focus our evaluation on glibc version 2.11.1. The
original version compiled without G-Free contains 9921 ret in-
structions (6106 of which unaligned) and 8018 jmp*/call* in-
structions (6602 of which unaligned). This sums up to almost 18K
free-branch opcodes, each of which can be potentially used by an
attacker to build many different gadgets.
After we compiled glibc using our system, all unintended ret
and jmp*/call* instructions were either removed or made inef-
fective by prepending them with an alignment sled. In addition,
all aligned free-branch instructions were protected by adding our
return and indirect jump/call protection blocks. As a result, the li-
brary compiled with G-Free contained only the four type of gadgets
we present in Figure 4.
However, due to the newly inserted code and instruction rewrit-
ing techniques, the size of the gadget-free version of the library
increased by 30%. Although this value might appear to be high,
one third of the overhead is caused by nop instructions included
in the alignment sleds. As already discussed in Section 5, most of
these could be eliminated by a more optimized implementation.
Unfortunately, providing a gadget-free version of glibc is not
sufﬁcient to completely prevent ROP attacks, since the attacker
could still build the gadget set from other libraries or the appli-
cation binary itself. Therefore, to achieve a complete protection
56Program Name
and Version
glibc 2.11.1
gzip 1.4
grep 2.6.3
dd coreutils-8.5
md5sum coreutils-8.5
ssh-keygen openssh-5.5p1
lame 3.98.3
Original
Size(KB)
1320.4
72.7
86.3
48.0
30.9
140.6
322.6
G-Free Size
(Overhead)
1728.4 (30.9%)
92.4 (27.0%)
106.3 (23.2%)
57.9 (20.6%)
37.7 (22.1%)
182.5 (29.7%)
406.6 (26.0%)
Unaligned
ret
6106
433
523
252
203
607
2228
Unaligned
jmp*/call*
Number of