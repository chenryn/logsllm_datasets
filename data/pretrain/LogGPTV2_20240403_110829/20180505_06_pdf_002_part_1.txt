White Paper
Oracle to PostgreSQL Migrations
This work is licensed under the Creative Commons
Attribution-NonCommercial 4.0 International License. To
view a copy of this license, visit
http://creativecommons.org/licenses/by-nc/4.0/.
Oracle to PostgreSQL Migrations 2
Table of Contents
Introduction..............................................................................................4
Executive Summary....................................................................................4
Benefits of Migrating to PostgreSQL..............................................................5
When to Migrate........................................................................................5
Common Database Migration Challenges and Risks.........................................6
Migration Life Cycle....................................................................................7
Migration Service.......................................................................................7
Scope of Service...................................................................................8
Identifying Migration Candidates..............................................................8
Analyzing Migration Candidates..................................................................10
Planning a Migration.................................................................................12
Migrating an Application............................................................................14
Testing the Application..............................................................................16
Production Deployment.............................................................................17
Conclusion...............................................................................................19
About OpenSCG.......................................................................................19
Oracle to PostgreSQL Migrations 3
Introduction
Migrating from an Oracle database to PostgreSQL frequently gives organizations
benefits that range from lowered costs to a better technical architecture. The
OpenSCG Migration Factory speeds the process while reducing risk.
This white paper explores the process for migrating an application from an Oracle
database to PostgreSQL. It is intended for people who have already made the
wise choice of moving to PostgreSQL and are exploring what is involved in a
migration project.
Executive Summary
Relational databases, particularly Oracle, are mission critical systems for any
organization, but being locked into a particular vendor is a risky and costly
situation. Expensive annual maintenance fees combined with onerous licensing
restrictions are compelling reasons to consider switching your underlying
database technology. Migrating to a proven open source alternative such as
PostgreSQL overcomes those challenges, but an Oracle to PostgreSQL migration
can be an involved undertaking requiring special skills and extensive experience.
Mission critical applications can be very complex with small maintenance
windows. To have a successful migration, it is imperative that your migration
project has a comprehensive plan from the initial application assessment to
running the new database in production.
OpenSCG's Migration Services combine the automated tools with the hands on
experience to move your most important databases to PostgreSQL. Unlike in-
house DBAs and developers who may do an Oracle to PostgreSQL migration once
a decade or lifetime, the OpenSCG team migrations mission critical Oracle
database to PostgreSQL everyday. OpenSCG's Migrations Services delivers Oracle
to PostgreSQL migrations in a quick, reliable and cost effective manner.
Oracle to PostgreSQL Migrations 4
Benefits of Migrating to PostgreSQL
The most obvious benefit of
migrating to PostgreSQL is cost.
Even after the Oracle licenses are
purchased, the ongoing
maintenance costs are significant.
Oracle’s list pricing is based on a
per-core model with additional
costs for features like partitioning
and high availability. For
example, the three year total cost
of ownership of an existing 32
core environment with
partitioning for scalability and
Active Data Guard for high availability can be nearly $1,500,000.
A possibly more compelling long-term benefit of PostgreSQL is the ability to
create technical solutions based on need not licensing. It is all too common for
people to deploy things sub-optimally to save money on licenses instead of the
right technical solution. That could mean not updating to newer hardware
because the newer servers all have more cores than the previous generation. Or,
it could result in many application servers all connecting to a single database
server sometimes over slow WAN links. There are many cases where you need to
do the wrong thing technically to optimize for licenses.
When to Migrate
All too often people look to migrate to PostgreSQL from Oracle when they are up
for renewal. At that point it is too late. A migration does not happen overnight.
The most time consuming and intensive part of a database migration is actually
testing the application. So in fact, the ideal time to migrate your database is in
conjunction with something that requires testing your application. If you are
upgrading hardware, changing data centers or moving to the cloud, you need to
do a full test anyway. It is quite common to see people moving from on-premise
Oracle to PostgreSQL in the cloud. Combining both projects saves a significant
amount of time and money.
While it’s ideal to time your migration with other infrastructure changes, the
driver for most companies is still license renewals. Nevertheless, if you miss the
opportunity to migrate to PostgreSQL before the renewal is necessary you need to
Oracle to PostgreSQL Migrations 5
sign a new contract with Oracle, there are still benefits to migrating to
PostgreSQL. Many times the freed up licenses from the migration can be
reallocated to other applications in desperate need for upgraded hardware. After
the migration, just apply those renewed Oracle licenses to another server that
you are keeping on Oracle.
Common Database Migration Challenges and Risks
Effort
Some migrations can be a time
consuming and involved project. Are
there enough resources to execute
the project without taking away from
the necessary things to run your
business?
Proficiency
A deep understanding on both Oracle
and PostgreSQL is necessary to
migrate an application properly.
Migration projects are not done
everyday by in-house DBAs and
developers. Will they need help in identifying all possible dependencies before it
affects the project time line?
Schema Quality
Database systems can grow and evolve over time. By nature, they are constantly
changing, which means they are constantly being administered. How many stale
tables are left around? Are your stored procedures under source control? Is there
a golden master copy of the schema?
Technology
Some migrations are for older applications where the original developers are no
longer around. Do you have the proper test cases to ensure they are migrated
correctly?
Oracle to PostgreSQL Migrations 6
Migration Life Cycle
Migrating an application is more than just
converting some stored procedures to a new
syntax. The full life cycle spans several months
to a year after you have moved to production.
The behavior of a PostgreSQL database is
different than Oracle and it is not until your
application is running in production that you
really understand the maintenance required on
your new database. You can make logical
assumptions based on experience, but the
exact details come to life with real workloads.
Things like your ideal checkpoint interval, the
frequency you need to rebuild your indexes,
and your optimal backup schedule as all things
that are fine tuned over time.
After the application is deployed to production, you will need database
administrations who are experienced with running PostgreSQL in production. You
may want to supplement your existing team with short-term help while your team
is properly trained on PostgreSQL. Also, with Oracle, you had to ability to call for
support when issues came up. You will need that ability with PostgreSQL as well.
All of those pieces are available at OpenSCG to help make your migration off of
Oracle successful.
Migration Service
Switching out your application’s main database can be complex, but breaking the
project into smaller well defined phases takes much of the risk out of the
migration. The OpenSCG migration methodology has been developed over more
than a decade of migrations to PostgreSQL and proven across more than 100
types of applications.
The core of the methodology is testing, testing, and more testing. By focusing the
project on quality assurance, you can be assured that at each step along the way
the migration is moving in the right direction and there are no major surprises at
the end. The OpenSCG migration process requires unit tests on all database
objects and then builds a full test framework from the ground up to make sure
there are no lingering issues as the application is moved through the development
cycle. Individual stored procedures are tested for functionality and performance
Oracle to PostgreSQL Migrations 7
early in the cycle so that issues surface long before end users start using your
migrated application.
Scope of Service
The OpenSCG Migration Service follows a mature and vetted process leveraging
hands-on experience and a series of tools. A migration project can be
accomplished using a combination of on-site and off-site resources depending on
customer requirements.
Identifying Migration Candidates
A database migration starts with an assessment to identify and define which
databases are candidates to move to PostgreSQL. The cost advantages of moving
Oracle to PostgreSQL Migrations 8
to PostgreSQL are obvious, but some applications just cannot be moved. The
reasons for these trapped applications falls into two categories: business and
technical.
Trapped Applications (Business)
The most common reason an application is stuck on Oracle is product
certification. Many third party applications certify on specific databases and
versions and PostgreSQL may not be part of their blessed list. Some bet their
product on Oracle while others give you options like SQL Server or MySQL.
Technically, it may be possible to migrate these applications to PostgreSQL, but
the first time you call your vendor for support and they find out you migrated
your database to an uncertified solution, they’ll push back. It is like swapping out
the hard drive on your TiVo, you’ve just voided your warranty.
Another common business reason an application is trapped on Oracle is that the
Return on Investment (ROI) for a migration project just does not work out. Oracle
is expensive, but once the initial licenses are purchased, the yearly maintenance
fees are a fraction of the original purchase price. If your application is happily
using Standard Edition 2 on a server with only a couple of cores, it just does not
make financial sense to move to PostgreSQL.
Trapped Applications (Technical)
Let’s face it, Oracle is a multi-billion dollar company and they invest heavily in
their flagship product. How can a rag tag bunch of open source developers create
something that can do everything Oracle can do. The truth is, we can’t. Most
applications don’t use those advanced features that are not available in
PostgreSQL, but some do, and those applications are trapped.
The most common feature in this category is Oracle Real Application Clusters
(RAC). PostgreSQL does not have a feature like Oracle RAC, but it does give you
some of its functionality. If you are using Oracle RAC for simple High Availability
and a few seconds of downtime is acceptable during a failure, PostgreSQL may be
great. If you are really using RAC for its scaling features and transparent fail over,
PostgreSQL may not be the right fit.
However, in reality, there are very few trapped applications because of technical
reasons. If the business value justifies the migration, there is a technical solution
to just about any feature in Oracle.
The solution may just involve more open source projects than PostgreSQL. Take
for example, Advanced Queuing. PostgreSQL does not have message queues built
Oracle to PostgreSQL Migrations 9
into the core database, but there are a number of open source message queues
like the Apache projects ActiveMQ and Kafka. PostgreSQL even allows you to
interact with those queues directly from the database using Perl or Python stored
procedures. Even the RAC example that we just used has alternatives if we think
outside of the database box. There are many open source in-memory caches like
the Apache projects Ignite and Geode that can front-end a database and provide
the high availability and scalability of Oracle RAC.
Analyzing Migration Candidates
A database migration has three main factors when determining the size of a
project: the number and complexity of database objects, the SQL embedded in
the application code and the size of the overall data. Combining the estimates of
these three factors will result in an accurate estimate of the project scope and
time-line.
Database Objects
When analyzing an Oracle database for a migration, the number of database
objects is usually the dominating factor in a project. Some migrations where the
only database objects are Tables and Indexes are very simple, while others may
have hundreds or thousands of stored procedures. The objects you need to
consider for the migration include:
• Schemas
• Tables
• Indexes
• Constraints
• Stored Procedures
• User Defined Functions
• Custom Types
• Views
• Triggers
• Packages
Oracle to PostgreSQL Migrations 10
When analyzing the database objects, it is important to remember that the
development time to translate an object from Oracle to PostgreSQL syntax is a
minor percentage of the overall effort. Over the years, and many migrations, time
and time again, the effort needed to translate objects from Oracle to PostgreSQL
account for only 20%-30% of the project time. Take for example a view in Oracle
that uses ANSI SQL. It can be created in PostgreSQL with no changes at all, but
there is significantly more effort for a migration. It runs in PostgreSQL, but how
do you know it is the same as in Oracle? Each object needs a set of unit test
scripts to make sure the results out of the database are the same in both Oracle
and PostgreSQL and if they are not, that everyone understands why. Believe it or
not, people have bugs in their database code which end up being caught in the
migration. Catching these bugs are only possible by using a comprehensive unit
test suite across all database objects which is an added benefit of a migration
project. Doing a migration without a deep testing strategy at the object level will
more often than not lead to a delayed or failed project.
Application Code
Analyzing the code in the application tier for places that interact with Oracle may
be the most difficult and time consuming migration task. Some application