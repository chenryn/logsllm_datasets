方法HasBothAccessors（）验证属性声明是否包含get和set访问器。这个方法也检查这
些访问器体是否只定义了一个语句。如果使用了不止一个语句，属性就不能转换为自动实
现的属性：
    private static bool HasBothAccessors(BasePropertyDeclarationSyntax property)
      {
        var accessors = property.AccessorList.Accessors;
        var getter = accessors.FirstOrDefault(
          ad => ad.Kind() == SyntaxKind.GetAccessorDeclaration);
        var setter = accessors.FirstOrDefault(
          ad => ad.Kind() == SyntaxKind.SetAccessorDeclaration);
        return getter? .Body? .Statements.Count == 1 &&
              setter? .Body? .Statements.Count == 1;
      }
方法ConvertToAutoProperty（）使用WithAccessorList（）方法来改变
propertyDeclaration的子元素。访问器列表及其子列表在SyntaxFactory类的帮助下创建。通
过传递SyntaxKind.GetAccessorDeclaration和SyntaxKind.SetAccessorDeclaration枚举值，
SyntaxFactory.AccessorDeclaration就创建get和set访问器：
    private PropertyDeclarationSyntax ConvertToAutoProperty(
      PropertyDeclarationSyntax propertyDeclaration)
    {
      var newProperty = propertyDeclaration
        .WithAccessorList(
        SyntaxFactory.AccessorList(
          SyntaxFactory.List(new[]
          {
            SyntaxFactory.AccessorDeclaration(SyntaxKind.GetAccessorDeclaration)
              .WithSemicolonToken(
                SyntaxFactory.Token(SyntaxKind.SemicolonToken)),
            SyntaxFactory.AccessorDeclaration(SyntaxKind.SetAccessorDeclaration)
              .WithSemicolonToken(
                SyntaxFactory.Token(SyntaxKind.SemicolonToken))
          })));
      return newProperty;
    }
在Program类中，在检索语义模型后实例化AutoPropertyRewriter。通过调用Visit（）
方法，使用树开始重写（代码文件SyntaxRewriter / Program.cs）：
    static async Task ProcessAsync(string code)
    {
      SyntaxTree tree = CSharpSyntaxTree.ParseText(code);
      var compilation = CSharpCompilation.Create("Sample")
        .AddReferences(MetadataReference.CreateFromFile(
                    typeof(object).Assembly.Location))
        .AddSyntaxTrees(tree);
      SemanticModel semanticModel = compilation.GetSemanticModel(tree);
      var propertyRewriter = new AutoPropertyRewriter(semanticModel);
      SyntaxNode root = await tree.GetRootAsync().ConfigureAwait(false);
      SyntaxNode rootWithAutoProperties = propertyRewriter.Visit(root);
      // etc.
    }
当运行程序，检查新代码时，会发现完整的属性已转换为自动实现的属性。然而，完
整属性中的字段仍在代码树中。需要删除它们。在VisitPropertyDeclaration方法中，只能
改变属性，不能改变字段。在CSharpSyntaxRewriter类的重写方法中，只有接收的节点和
节点的子元素可以改变，不能改变层次结构中的其他节点。
可以使用VisitPropertyDeclaration（）方法改变属性，使用VisitFieldDeclaration（）方
法可以改变字段。CSharpSyntaxRewriter的方法以自上而下的方式调用。
VisitNamespaceDeclaration在VisitClass-Declaration之前调用，然后执行类成员的
VisitXX（）方法。这样，就可以改变节点和后代节点，但不能在VisitXX（）方法中改变
祖先节点或同级节点。当字段和属性在语法树层次结构的相同级别时，它们就是同级节
点。
先调用VisitFieldDeclaration（）还是VisitPropertyDeclaration（）方法，取决于代码内
的顺序。属性的字段可以在属性之前或之后声明，所以无法保证这些方法的调用顺序。
不过，可以访问属性中的支持字段，并将它添加到一个可以从AutoPropertyRewriter访
问的列表中。使用辅助方法GetBackingFieldFromGetter检索支持字段，该辅助方法利用语
义模型访问符号。利用这个符号，检索FieldDeclarationSyntax的语法引用，该字段的信息
添加到_fieldsToRemove集合中（代码文件SyntaxRewriter/AutoPropertyRewriter.cs）：
    private readonly List _fieldsToRemove = new List();
      public IEnumerable FieldsToRemove => _fieldsToRemove;
      public override SyntaxNode VisitPropertyDeclaration(
        PropertyDeclarationSyntax node)
      {
        if (HasBothAccessors(node))
        {
        IFieldSymbol backingField = GetBackingFieldFromGetter(
          node.AccessorList.Accessors.Single(
            ad => ad.Kind() == SyntaxKind.GetAccessorDeclaration));
        SyntaxNode fieldDeclaration = backingField.DeclaringSyntaxReferences
          .First()
          .GetSyntax()
          .Ancestors()
          .Where(a => a is FieldDeclarationSyntax)
          .FirstOrDefault();
        _fieldsToRemove.Add((fieldDeclaration as FieldDeclarationSyntax)
          ?.GetText().ToString());
        PropertyDeclarationSyntax property = ConvertToAutoProperty(node)
          .WithAdditionalAnnotations(Formatter.Annotation);
        return property;
        }
        return node;
      }
辅助方法GetBackingFieldFromGetter使用get访问器的返回语句和语义模型，得到字段
的符号：
    private IFieldSymbol GetBackingFieldFromGetter(
        AccessorDeclarationSyntax getter)
    {
      if (getter.Body? .Statements.Count ! = 1) return null;
      var statement = getter.Body.Statements.Single() as ReturnStatementSyntax;
      if (statement? .Expression == null) return null;
      return _semanticModel.GetSymbolInfo(statement.Expression).Symbol
          as IFieldSymbol;
    }
现在，可以创建另一个语法重写器，删除支持字段。RemoveBackingFieldRewriter是
一个语法重写器，删除传递给构造函数的所有字段。VisitFieldDeclaration重写方法检查接
收到的节点，确定它是否包含在传递给构造函数的字段集合中，给匹配的字段返回
null（代码文件SyntaxRewriter /Remove-BackingFieldRewriter.cs）：
    class RemoveBackingFieldRewriter: CSharpSyntaxRewriter
    {
      private IEnumerable _fieldsToRemove;
      private readonly SemanticModel _semanticModel;
      public RemoveBackingFieldRewriter(SemanticModel semanticModel,
        params string[] fieldsToRemove)
      {
        _semanticModel = semanticModel;
        _fieldsToRemove = fieldsToRemove;
      }
      public override SyntaxNode VisitFieldDeclaration(FieldDeclarationSyntax nod
e)
      {
        if (_fieldsToRemove.Contains(node.GetText().ToString()))
        {
        return null;
        }
        return base.VisitFieldDeclaration(node);
      }
    }
现在可以开始另一个阶段，在ProcessAsync方法中重写语法树。访问属性重写器后，
开始一个新的编译过程，传递更新的语法树，来调用字段重写器（代码文件
SyntaxRewriter/Program.cs）：
    SyntaxTree tree = CSharpSyntaxTree.ParseText(code);
    var compilation = CSharpCompilation.Create("Sample")
        .AddReferences(MetadataReference.CreateFromFile(
          typeof(object).Assembly.Location))
        .AddSyntaxTrees(tree);
    SemanticModel semanticModel = compilation.GetSemanticModel(tree);
    var propertyRewriter = new AutoPropertyRewriter(semanticModel);
    SyntaxNode root = await tree.GetRootAsync().ConfigureAwait(false);
    SyntaxNode rootWithAutoProperties = propertyRewriter.Visit(root);
    compilation = compilation.RemoveAllSyntaxTrees()
        .AddSyntaxTrees(rootWithAutoProperties.SyntaxTree);
    semanticModel = compilation.GetSemanticModel(
        rootWithAutoProperties.SyntaxTree);
    var fieldRewriter = new RemoveBackingFieldRewriter(semanticModel,
        propertyRewriter.FieldsToRemove.ToArray());
    SyntaxNode rootWithFieldsRemoved = fieldRewriter.Visit(rootWithAutoProperties
);
    WriteLine(rootWithFieldsRemoved);
现在运行程序，简单的完全属性更改为自动实现的属性，删除了属性的支持字段。
  注意： 这个程序只是一个示例程序，演示了如何使用.NET编译器平台。这种
转换匹配可能不转换为自动实现属性的完全属性。在自己的代码中使用这个程序之
前，检查转换的结果，可能需要添加更多的检查，来匹配要转换的属性。
18.6 Visual Studio Code重构
下面讨论带有代码转换和语法分析的Visual Studio扩展。使用编辑器在上下文菜单中
选择Quick 
Actions添加自己的功能，来改变代码。这个集成需要用程序集
Microsoft.CodeAnalysis.Workspaces定义的工作区API，以及本章已经使用的其他API。
前面了解了如何使用CSharpSyntaxRewriter把完全属性改为自动实现的属性。有时需
要相反的过程：将自动实现的属性转换为完全属性。通过INotifyPropertyChanged接口支持
通知的属性是这种场景的有效实现。本节中的示例代码允许在Visual Studio编辑器内选择
一个或多个自动实现的属性，并将之转换为完全属性。
开始使用的项目类型是Code 
Refactoring 
（VSIX）项目模板，这个项目的名字是
PropertyCode-Refactoring。该项目模板创建了两个项目：创建VSIX包的项目
PropertyCodeRefactoring.Vsix，和可移植的库ProjectCodeRefactoring。
18.6.1 VSIX包
为了与Visual Studio集成，需要创建一个VSIX包。自Visual Studio 2010以来，Visual
Studio通过VSIX包形式的插件提供了集成。AVSIX是一个zip文件，包含插件的二进制文
件、描述插件的清单文件和图片。安装插件后，它们就位于目
录%LocalAppData%\Microsoft\VisualStudio\14.0\Extensions\中。
  注意： Visual Studio插件基于Managed Extensibility Framework。这个框架参
见第26章。
选择VSIX项目的Project Properties, Debug设置（见图18-5）配置为用选项/ rootsuffix
Roslyn启动Visual Studio调试。如果启动Visual Studio调试的另一个实例，VSIX项目就允
许单步执行重构的源代码，同时在第二个Visual Studio实例中使用源代码编辑器。
图18-5
VSIX文件的另一个重要设置是Project 
Properties的VSIX选项（见图18-6）。要调试
VSIX文件，需要创建一个zip文件，从第二个Visual Studio实例中加载它。如果选择Create
VSIX Container during build和Deploy VSIX content to experimental instance for debugging选
项，就不需要在每次完成新的构建时，手动创建和部署VSIX包。相反，会自动创建一个
新的构建，用于调试。
图18-6
现在需要对VSIX项目执行更多的处理。该项目包含文件
source.extension.vsixmanifest。这个文件描述了插件，需要配置。在Visual Studio中打开这
个文件时，也会打开一个特别的设计器，来配置Metadata、Install 
Targets、Assets和
Dependencies。Metadata配置如图18-7所示。这些设置定义了应显示的描述、许可、发行
说明和图片。配置Install Targets时，定义Visual Studio版本和应该可用的插件。在Visual
Studio 2015中，可以定义只用于企业版或专业版和社区版的插件。还可以定义应该可用于
Visual Studio shell的插件。Visual Studio shell是用于微软或第三方的多个项目。
图18-7
Assets设置定义VSIX项目应该包含什么文件。如果添加图片与包含插件描述的自述文
件，就需要将这些文件添加到Assets。在任何情况下，需要添加到Assets的一个文件是从
其他项目中创建的二进制文件（见图18-8）。为了构建代码重构提供程序，需要把类型设
置为Microsoft.VisualStudio. MefComponent。设计器的最后设置定义了在安装插件之前，
需要安装在目标系统中的依赖项，例如.NET Framework 4.6。
图18-8
18.6.2 代码重构提供程序
现在，已经配置了VSIX包，下面看看源代码。生成的类
PropertyCodeRefactoringProvider利用了特性ExportCodeRefactoringProvider。这个特性定义
可以包含在Visual Studio中的MEF部分。基类CodeRefactoringProvider是工作区API在程序
集Microsoft. CodeAnalysis.Workspaces中定义的一个类（代码文件PropertyCodeRefactoring /
CodeRefactoringProvider.cs）：
    [ExportCodeRefactoringProvider(LanguageNames.CSharp,
      Name = nameof(PropertyCodeRefactoringProvider)), Shared]
     internal class PropertyCodeRefactoringProvider: CodeRefactoringProvider
     {
      // etc.
     }
基类CodeRefactoringProvider定义了ComputeRefactoringsAsync（）方法，当代码编辑
器的用户在上下文菜单中启动Quick Actions时，会调用这个方法。根据用户的选择，该方
法的实现代码需要决定插件是否应该提供一个选项，以允许更改代码。参数
CodeRefactoringContext允许通过Span属性访问用户的选择，通过Document属性访问完整
的文档。在实现代码中，检索文档的根节点和选中的节点：
    public sealed override async Task ComputeRefactoringsAsync(
        CodeRefactoringContext
 context)
    {
      SyntaxNode root = await context.Document.GetSyntaxRootAsync(
        context.CancellationToken).ConfigureAwait(false);
      SyntaxNode selectedNode = root.FindNode(context.Span);
      // etc.
    }
从Document属性中返回的Document类允许访问语法根、树节点
（GetSyntaxRootAsync, 
GetSyntaxTreeAsync）以及语义模型
（GetSemanticModelAsync）。还可以访问所有的文本变更（GetTextChangesAsync）。
只有选中一个自动实现的属性，代码重构提供程序才能继续工作。这就是为什么接下
来检查selectedNode是否是PropertyDeclarationSyntax类型的原因。检查
PropertyDeclarationSyntax是不够的，因为代码重构应该只用于自动实现的属性。这是调用
辅助方法IsAutoImplementedProperty来检查的原因：
    public sealed override async Task ComputeRefactoringsAsync(
        CodeRefactoringContext context)
    {
      // etc.
      var propertyDecl = selectedNode as PropertyDeclarationSyntax;
      if (propertyDecl == null || ! IsAutoImplementedProperty(propertyDecl))
      {
        return;
      }
      // etc.
    }
辅助方法IsAutoImplementedProperty的实现代码验证get和set访问器是否存在，这些访
问器体是否为空：
    private bool IsAutoImplementedProperty(PropertyDeclarationSyntax propertyDecl
)
    {
      SyntaxList accessors =
        propertyDecl.AccessorList.Accessors;
      AccessorDeclarationSyntax getter = accessors.FirstOrDefault(
        ad => ad.Kind() == SyntaxKind.GetAccessorDeclaration);
      AccessorDeclarationSyntax setter = accessors.FirstOrDefault(
        ad => ad.Kind() == SyntaxKind.SetAccessorDeclaration);
      if (getter == null || setter == null) return false;
      return getter.Body == null && setter.Body == null;
    }
如果选中的代码包含一个自动实现的属性，就创建一个CodeAction，这个动作注册为
代码重构。调用静态的Create方法会创建一个CodeAction。第一个参数定义了显示给用户
的标题。用户通过这个名字可以应用代码操作。第二个参数是一个委托，它接收
CancellationToken，并返回Task。当用户取消动作时，CancellationToken提供
请求取消的信息，任务可以停止。需要返回的Document包含代码重构操作的变化。委托
实现为一个lambda表达式，来调用方法ChangeToFullPropertyAsync。
    public sealed override async Task ComputeRefactoringsAsync(
        CodeRefactoringContext context)
    {
      // etc.
      var action = CodeAction.Create("Apply full property",
        cancellationToken =>
        ChangeToFullPropertyAsync(context.Document, propertyDecl,
            cancellationToken));
      context.RegisterRefactoring(action);
    }
  注意： 取消令牌参见第15章。
方法ChangeToFullPropertyAsync检索语义模型和文档中的根节点，它用类
CodeGeneration调用静态方法ImplementFullProperty：
    private async Task ChangeToFullPropertyAsync(
        Document document, PropertyDeclarationSyntax propertyDecl,
        CancellationToken cancellationToken)
    {
      SemanticModel model =
        await document.GetSemanticModelAsync(cancellationToken);
      var root = await document.GetSyntaxRootAsync(
        cancellationToken) as CompilationUnitSyntax;
      document = document.WithSyntaxRoot(
        CodeGeneration.ImplementFullProperty(root, model, propertyDecl,
        document.Project.Solution.Workspace));
      return document;
    }