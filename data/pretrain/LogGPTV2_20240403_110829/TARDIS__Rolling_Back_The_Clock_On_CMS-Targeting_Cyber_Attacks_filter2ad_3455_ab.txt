-31
-18
+5
0
+5
+3
+9
-13
0
0
0
0
0
0
0
0
+9
0
-9
0
0
0
0
0
0
0
0
-
!
-
-
-
-
!
!
!
-
-
-
-
!
!
-
-
the
attack’s
Table I shows one such progression considering only a
single spatial metric, i.e. the ﬁle format numbers. The
temporal evolution of this metric exposed the ﬁrst attack
signs. As seen in Table I, sudden changes in the ﬁle
format metric stand out on 21 April, 5-8 June, and 13-14
June. We found identical spatial metric outliers in 3
other Drupal websites from 14 April to 21 May 2018,
suggesting
lateral movement. Canali
et.al.
[26] also found that web attacks dropped large
volumes of ﬁles on the web server, which explains the
sudden changes we observed in the ﬁle format metrics.
We also observed that these patterns evolved similarly
over time — adding more functionality to the existing
malicious code (e.g.
started with only ﬁle read
capabilities, and after 8 days evolved to modify ﬁles and
communicate over an SSL gateway). Eventually, we saw
that these attacks tried to clean up their footprints by
deleting most of the attack ﬁles.
Attack Model. These patterns formed the basis of the
multi-stage attack model presented in this paper. Our
study found that these attacks consisted of slow and
steady attack patterns starting with establishing an
initial
injection, maintaining
persistence,
lateral movement, and eventually cleaning
up any traces of malicious activity. This was conﬁrmed
by our case studies (§VI), which provide an intriguing
view of this widespread attack evolution.
foothold, malware
spatial metrics allows TARDIS to infer
Taken together, the above key observations drove our
design of TARDIS. Modeling the temporal evolution of
the
the
identifying
provenance of attack evidence. Further,
outliers within
reveals
both
the
compromise window (starting Apr 21 for W682886) and
the progression of the attack phases. Using TARDIS,
forensic investigators know where to focus their eﬀorts
and website owners can quickly revert the website to a
clean snapshot. In §IV, we will revisit these original 70
websites as manually-investigated ground truth to
evaluate the eﬀectiveness of the TARDIS framework.
evolution
that
it
TARDIS overcomes the challenges described in §II via
a novel provenance inference technique, using only the
nightly backups of the CMS deployment. Figure 2 shows
the phases of TARDIS’s operation: First, TARDIS
constructs a temporally ordered set of spatial elements
from each snapshot (§III-A). It then computes spatial
metrics for each individual snapshot’s elements (§III-B).
This is followed by temporally correlating the collected
spatial metrics and querying them against attack models
to recover the timeline and label attack events (§III-C).
Finally, it veriﬁes the sequence of assigned attack labels
and extracts the compromise window (§III-D).
A. Spatial Element Sequencing
TARDIS extracts the ﬁles associated with each night’s
snapshot and maps them as spatial elements (elj (ψi) ∈
Vi) for each snapshot ψi ∈ Ψ. Here, Ψ is the set of all
ψi, the label i denotes the index of the temporal snapshot
under analysis, and j denotes the index of a spatial element
in Vi. Basically, ψi is a point in time when the ith snapshot
was taken. Vi is the set of spatial elements (elj) collected
at time ψi. For example, the initial snapshot is collected
at ψ0, the next snapshot at ψ1 and so on. At snapshot ψ0,
the set of elements are represented as V0 = [el0, el1, ...].
These elements (elj (ψi)) ∈ Vi reside in the space Θ that
denotes the monitoring space of all spatial elements (i.e.,
all versions of all ﬁles hosted on the web server).
While processing each temporal snapshot ψi, a set of
initial spatial metrics (mk (ψi) ∈ Mi) are recorded in the
set Mi. Here, the label k denotes the index of the spatial
metrics collected at temporal snapshot ψi. These initial
spatial metrics consists of the ﬁle type counts, and the
state of each spatial element in terms of added, modiﬁed,
further populated with carefully
or deleted. Mi
selected measurements
as discussed in §III-B. A
comprehensive deﬁnition of
the terminology used is
presented in Table II.
For example, the website W682886’s initial snapshot
(ψ0) contains 11, 327 ﬁles. All of these ﬁles are mapped
as a sequence of spatial elements in V0. As an example of
a single spatial metric, this snapshot also contains 23
diﬀerent ﬁle types (e.g. PHP, HTML, JS, CSS, etc.).
This information is recorded within the spatial metric set
M0. If the backups are collected on a nightly basis for 3
months (e.g., 91 backups), then:
is
V = [V0, V1, ..., V90]
M = [M0, M1, ..., M90]
V0 = [el0, el1, ..., el11326]
M0 = [num (P HP) = 727, num (CSS) = 829, ...]
B. Spatial Analysis
The set of spatial elements comprise of various ﬁle types
(such as PHP, HTML, JS, CSS, images, plaintext, etc.),
each of which requires disparate investigation techniques
to identify attack attributes. To address this challenge, we
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:40:22 UTC from IEEE Xplore.  Restrictions apply. 
1158
Fig. 2: TARDIS Overview. Phase 1 constructs spatial element sets from the website backup. Phase 2 computes the
structural and code metrics for each individual snapshot. Phase 3 temporally correlates the collected metrics and labels
attack events. Phase 4 veriﬁes the assigned attack labels and extracts the compromise window.
split spatial analysis to extract two types of metrics: (1)
structural metrics and (2) code metrics.
achieved by dropping malicious
1) Structural Metrics: With the computed set of
spatial elements V and the initial metrics M for each
temporal snapshot, we turn to investigating this set V.
Based on our observations from the preliminary study,
we developed a suite of lightweight measurements that
highlight the existence of suspicious elements.
Hidden Files and Directories. Long-lived multi-stage
attacks can be characterized by the attacker’s intent to
modify the existing setup and laying low at the same
time. During our preliminary study, we observed that
this was
and/or
suspicious elements as a hidden ﬁle or by placing them in
a hidden directory to evade ﬁrst order defenses.
TARDIS employs pattern matching by ﬁltering the
typically expected hidden elements (such as .htaccess)
and appends a structural metric Hide(elj(ψi)) to Mi
upon ﬁnding an element elj ∈ Vi in a hidden location,
because websites did not often employ hidden ﬁles or
directories.
Extension Mismatch. We also observed that another
common tactic used in CMS-targeting attacks was to
disguise a server-side executable as something else. For
example, we
elements
renamed deceptively as an icon ﬁle (e.g. favicon.ico) but
containing PHP code to evade less technical CMS users.
TARDIS uses the spatial element’s ﬁlename to extract
its extension and then matches it against the inferred ﬁle
format (e.g., via the ﬁle type’s magic number or other
formatting that can identify the type of ﬁle). If TARDIS
ﬁnds a discrepancy while matching the ﬁle type and the
ﬁle extension for an element elj ∈ Vi, it appends the
observed spatial
commonly
attacks
is
seen
in CMS-targeting
structural metric ExtM is(elj(ψi)) to Mi.
Filename Entropy. Another indicator of suspicious
activity
long,
incoherent, or randomly generated ﬁlenames. TARDIS
measures the entropy of ﬁlenames for all spatial elements
elj. A higher entropy indicates a more random ﬁlename
that is less likely to be a human-generated benign
ﬁlename. Entropy is measured by password strength
calculation logic [27], which computes a ﬁlename’s
“randomness” score by measuring its similarity to several
dictionaries, spatial keyboard patterns (e.g., QWERTY,
Dvorak), repetition of a single character, sequences of
commonly used
numbers or
keywords
the password
strength output was analogous to higher entropy (more
randomness) and thus a more suspicious ﬁlename.
(e.g., l33t). For TARDIS,
characters, and other
Since it
is not possible to identify an absolute
threshold for high entropy in ﬁlenames, TARDIS
compares the relative entropy of the spatial elements
using the median absolute deviation (MAD [28]) test.
Speciﬁcally, instead of computing an absolute threshold
for ﬁlename entropy, which is diﬃcult to predict with
certainty, TARDIS considers all the elements in a given
temporal snapshot to ﬁrst ﬁnd the median entropy of all
elements,
followed by computing the median absolute
deviations for each element and eventually checking if
the median absolute deviation is greater than a relative
threshold. When a relatively higher entropy is identiﬁed
for an element elj ∈ Vi from a temporal snapshot ψi, the
structural metric HEntrp(elj(ψi)) is appended to Mi.
Permission Change. TARDIS uses temporal tracking
of each spatial element to detect permission changes
between snapshots. In particular, when the permissions
TABLE II: Formal Deﬁnitions of the State of the CMS Deployment.
Symbol
Name
Time Ψ = (ψ, ...)
Space Θ = (θ, ...)
Elements V = (el, ...)
Deﬁnition
Ψ = (Z, +)
Θ = (Z, +)
el = el (θ, ψ, ψ(cid:2)) Files under investigation within their life span.
Description
Time measured in terms of the snapshot versions.
Space of elements that can be monitored.
Spatial Metrics M = (m, ...) m = m (θ, ψ)
Labels
L = (lb, ...)
lb = lb (ψ, θ)
Measurements computed against a single night’s snapshot of the website
backup attributes.
An enumerable set of labels describing the events associated with the
security of the elements.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:40:22 UTC from IEEE Xplore.  Restrictions apply. 
1159
the elements
length is not feasible due to varied coding styles and
practices followed by diﬀerent developers. However, it is
possible to decide if a spatial element is suspicious by
relatively comparing all
in any given
temporal snapshot and performing outlier analysis. We
leverage this observation to ﬁnd suspicious ﬁles with
relatively long directives using the median absolute
deviation (MAD) previously described in §III-B1. Upon
detection of the suspiciously long directive lines in a
spatial element elj ∈ Vi from a temporal snapshot ψi,
TARDIS appends the code metric LongLine(elj(ψi)) to
the spatial metric set Mi.
Obfuscation Detection. We observe that server-side
malware often uses a string that contains both UTF-8
characters (i.e., wide characters) and traditional 8-bit
characters. While the construction of such a string itself
is not malicious, it is a commonly used tactic to avoid
detectors that look for known malicious string/code
snippets. For example, the malicious PHP ﬁle disguised
as an icon ﬁle which we mentioned earlier is included
from the root of the CMS using the following long
UTF-8 (black) coupled with ASCII (red) path to the ﬁle:
@include "\x2fmn\x74/s\x74or\x31-w\x632-\x64fw\x31/4\
x3505\x327/\x77ww\x2ecv\x6dar\x61ci\x6eg.\x63om\
x2fwe\x62/c\x6fnt\x65nt\x2fmo\x64ul\x65s/\x61gg\
x72eg\x61to\x72/t\x65st\x73/f\x61vi\x63on\x5fbd\
x33fd\x35.i\x63o";
Array map obfuscation is another obfuscation scheme
commonly used to evade defenses [26]. An array map is
deﬁned to map each character to a diﬀerent character.
This map is used to deobfuscate what appears to be a
jumbled list of characters to a reverse engineer trying to
make sense of
this obfuscated spatial element. For
example, in the following code snippet, lnhqvwxeon() is
a function that takes a jumbled character string (in the
variable $zvkgw) and uses the array map in $lyfuf to
generate malicious code that gets executed as part of the
PHP eval function:
$lyfuf = Array(’1’=>’G’, ’0’=>’6’, ’3’=>’4’,
’2’=>’L’, ’5’=>’1’, ’4’=>’W’, ’7’=>’y’, ... ,
’y’=>’w’, ’x’=>’F’, ’z’=>’l’);
eval(lnhqvwxeon($zvkgw,$lyfuf));
Upon spatial detection of obfuscation in an element
elj ∈ Vi from a temporal snapshot ψi via regex pattern
cases described above, TARDIS
matching for
appends a code metric Obf us(elj(ψi)) to Mi indicating
the presence of obfuscation in the element elj.
Suspicious Payload Evaluation.
In server-side
spatial elements, functions such as eval, base64_decode,
and url_decode are
commonly paired to execute
previously identiﬁed obfuscated code. TARDIS identiﬁes
and
and
base64_decode/url_decode
pattern
matching along each control ﬂow. Upon identifying this
code unwrapping technique in an element elj ∈ Vi from a
the
pairing
eval
via
instances
ﬂags
the
of
change
to executable,
elements
read-write, etc.)
Fig. 3: Outlier detection within the directive length
distribution of all code elements in one snapshot.
of
spatial
from non-executable
(read-only,
raises
suspicion since it is unusual for a developer to start with
a non-executable and provide execute privileges to it. An
observation from our study was that multi-stage attacks
package shell scripts in a text ﬁle and then change the
permissions of the ﬁle to explore privilege escalation
opportunities. Upon identifying an element elj ∈ Vi from
snapshot ψi with permission change
a
equipping it with execute capabilities, TARDIS appends
a structural metric Exec(elj(ψi)) to Mi.
temporal
it
server-side attacks
2) Code Metrics: Since we are interested in the
targeting CMSs,
investigation of
TARDIS analyzes the spatial elements containing code.
These collected metrics are recorded for each snapshot ψi
and appended to the spatial metric set M.
Script Directive Outlier Analysis. Most of the
server-side source code is either part of the CMS core,
associated plugins, or website-owner developed code. As
they are meant to be maintained by developers,
it is
unusual to ﬁnd source code ﬁles among the spatial
elements with script directives
(parsable instruction
sequences) that are thousands of characters long. Hence,
we observed that
injecting exceptionally long and
complex lines of obscure code in the spatial elements is a
strong hint that can be leveraged to identify attack
behaviors. Our study found that attackers use this tactic
to limit
injected code, delaying
immediate reverse engineering attempts.
the readability of
Figure 3 shows the directive length distribution for all
spatial elements containing server-side code for W682886’s
2 May 2018 snapshot. The x-axis presents the spatial
element index j, and the longest directive length for each
of these code ﬁles is plotted along the y-axis. In benign
elements (green dot) none of the directives were more
than 500 characters long, whereas most attacker-injected
elements (red star) in this snapshot contained directives
longer than 1500 characters. There was a mix of benign
and malicious elements with maximum directive length
between 500 and 1500 characters, which becomes the
suspicious range (purple diamond).
Despite
in spatial
elements are suspicious, ﬁnding a threshold for directive
long directives
learning that
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:40:22 UTC from IEEE Xplore.  Restrictions apply. 
1160
TABLE III: Rules to Model Compromised CMS Events as Multi-Stage Attack Phases.
Attack Label L
Severity Attack Modeling Rule
Establish Foothold Medium
Obfuscated Code Injection
Malware Dropped
Code Generation Capability
Defense Evasion
Escalate Privileges
Maintain Presence Medium
Attack Cleanup Medium
High
High
Low
High
High
ExtM is(elj(ψi))∨[(elj /∈V)∧[HEntrp(elj(ψi))∨Hide(elj(ψi))]]
[(size(elj(ψi))>size(elj(ψi−1)))∨(M axL(elj(ψi))>M axL(elj(ψi−1)))]∧Obf us(elj(ψi))
(elj /∈Vi−1)∧[Obf us(elj(ψi))∨LongLine(elj(ψi))∨EvDc(elj(ψi))]
CodeGen(elj(ψi))
Hide(elj(ψi))∧[Obf us(elj(ψi))∨EvDc(elj(ψi))∨HEntrp(elj(ψi))∨ExtM is(elj(ψi))]
Exec(elj(ψi))∧¬Exec(elj(ψi−1))
(Sev(elj(ψi))==High)∧(Sev(elj(ψi−1))==High)