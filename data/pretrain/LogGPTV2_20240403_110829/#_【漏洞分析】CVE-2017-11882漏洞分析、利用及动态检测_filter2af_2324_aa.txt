# 【漏洞分析】CVE-2017-11882漏洞分析、利用及动态检测
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
**作者** ：[@银雁冰](http://bobao.360.cn/member/contribute?uid=314174049)
预估稿费：1200RMB
（本篇文章享受双倍稿费 活动链接请[点击此处](http://bobao.360.cn/news/detail/4370.html)）
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**传送门**
****
****[**【漏洞分析】Microsoft
Office内存损坏漏洞（CVE–2017–11882)分析**](http://bobao.360.cn/learning/detail/4734.html)
**  
**
**前言**
****
CVE-2017-11882是微软本月公布的一个远程执行漏洞，通杀目前市面上的所有office版本及Windows操作系统(包括刚刚停止支持的Office
2007)。
**该漏洞的成因是EQNEDT32.EXE进程在读入包含MathType的ole数据时，在拷贝公式字体名称时没有对名称长度进行校验，从而造成栈缓冲区溢出，是一个非常经典的栈溢出漏洞。**
上次出现这么典型的office栈溢出漏洞是著名的 **CVE-2012-0158**
。本文将深入分析该漏洞背后的机制，并在此基础上讲一下poc的构造方法，利用思路及动态检测方式。
**漏洞原理分析**
****
**调试环境: windows7_sp1_x86 + office 2007 x86 + windbg 6.11 x86**
**EQNEDT32.EXE version: 2000.11.9.0**
该漏洞和经典的CVE-2012-0158一样，位于实现OLE接口的 **IPersistStorage::Load**
函数中。sub_40415B为ole的初始化过程，如下图1所示，它调用了sub_40440A函数，sub_40440A的主要作用是在初始化EQNEDT32.EXE实现的COM接口的各个函数指针。
图1
通过工具我们可以看到 **EQNEDT32.EXE** 实现了如下接口(图2)：
图2
我们可以在EQNEDT32.EXE文件里面看到对这些接口的比较和使用，如图3所示：
图3
我们重点关注IPersistStorage接口，任何ole对象必须实现该接口，图4为微软对该接口的说明：
图4
通过简单的逆向工程，我们可以看到IPersistStorage接口的各个方法指针在 sub_40440A中被初始化，如图5所示：
图5
图5中红框圈出的 **IPersistStorage::Load**
方法的主要用途是用来读入ole数据，在EQNEDT32.EXE中实现该方法后，即可被调用以读入MathType对应的ole数据，我们来看一下这个Load函数内部是怎么实现的，我们可以看到该函数的核心逻辑是打开并读入一个叫做“Equation
Native”的流的数据(图6-1)，在此基础上进一步读入MathType数据(图6-2)，图6-3为动态调试记录：
图6-1
图6-2
图6-3
我们来看一下这个“Equation
Native”流来自哪里(图7)，通过分析ole文件，我们可以看到该流的数据由用户所提供，正常情况下，流里面的数据代表一个MathType的公式，而恶意攻击者构造的数据可以如图7所示：
图7
该漏洞的直接触发原因为：在读入公式的Font
Name数据时，在将Name拷贝到一个函数内局部变量的时候没有对Name的长度做校验，从而造成栈缓冲区溢出，如图8所示。从图9可以看出，函数给SrcStr变量分配的大小是0x24个字节，超过该大小就会造成溢出，从而覆盖不远处的eip，达到劫持程序执行流的目的，从StrStr开始算起，eip的位置为+0x2c，即44，再往前覆盖就是调用参数。
图8
图9
整个漏洞执行过程的步骤如图10所示
图10
图11
图12
图13
**从零开始构造POC**
****
上面已经把这个漏洞的原理和触发流程讲清楚了，下面我们尝试构造一个poc。由于该漏洞涉及到MathType公式数据在OLE中的结构，所以我们需要熟悉其结构分布。根据网上公开的数据结构，整个“Equation
Native”的数据构成为：
Equation Native Stream Data = EQNOLEFILEHDR + MTEFData，其中
MTEFData = MTEF header + MTEF Byte Stream
下面一个一个来看。
**EQNOLEFILEHDR** 的结构如下(图14-1)：
图14-1
MTEF header的结构如下(图14-2)，实际发现通过office 2007插入的公式其product
subversion字段恒定为0x0A，这与下图有所出入：
图14-2
MTEF Byte Stream的结构如下(图14-3)，可以看到它由一个SIZE
record及后续的一些record构成，各种record的类别如图14-4所示，其中对于本次漏洞相关的Font record的说明如图14-5所示。
图14-3
图14-4
图14-5
我们来对照首次被公开的CVE-2017-11882 poc的数据，看一下上述结构的具体对应情况(图15)：
图15
我们再来看一下漏洞发现者自己给出的poc里面上述结构的对应情况(图16)：
图16