and the round trip time estimate. Client implementations vary
widely though. Most clients query the server infrequently and the
probe/response pairs are just one UDP packet. But eXpose found
Client1 : N T P.123 ⇔ Client2 : N T P.123,
indicating that pairs of clients were accessing the server syn-
chronously and o(cid:13)en (one probe in every couple of seconds). Most
likely, these machines have the same poorly written NTP client.
TOR: ˆe lab contributes servers to the TOR [ʆ] anonymity net-
work. ˆe ability to identify temporally correlated pairs strips
one-hop anonymity, we can identify the next-hop for (cid:8)ows routed
through the lab’s TOR server. For example, eXpose (cid:12)nds rules,
IP1.9001 : T OR.∗ ⇔ T OR.∗ : IP2.9001
showing that tra(cid:14)c (cid:8)ows from IP1 to IP2 or vice versa. TOR’s
anonymity is not broken though. eXpose-like tra(cid:14)c analysis has to
be done at every TOR server on a (cid:8)ow’s path to identify the partic-
ipants. But, this does highlight a weakness–TOR seems to not use
cover tra(cid:14)c and since there isn’t a lot of tra(cid:14)c to begin with, it is
easy to correlate (cid:8)ows across one hop.
FTP Session Dependencies: ˆe lab provides a mirror for both de-
bian and fedora linux distributions. Clients around the world down-
load OS images and packages. eXpose found that
IP1.∗ : M irror.∗ ⇒ M irror.21 : IP1. ∗ .
It turns out that an (cid:13)p control connection (on port ʅʄ) to exchange
commands precedes (cid:13)p data connections that do the actual data
transfer. Further, data connections are started either actively, i.e.
started by the server on port ʅʃ, or passively, i.e., started by clients
at ephemeral ports. ˆe rules show that most data connections, in
practice, are passive perhaps to let clients behind NATs access data.
Discovered Bugs: Again eXpose discovered exploits and con(cid:12)gu-
ration problems. (ʄ) Legacy Addresses in Mailing Lists: We found
that our university’s outgoing mail server was simultaneously ac-
cessing a couple of mail servers in the lab.
volved in a simple pattern; the client sends out a broadcast message
to port ʉ@ and gets a response from either IP1 or IP2.
U nivM ail.∗ : OldM ail1.25 ⇔ U nivM ail.∗ : OldM ail2.25
ˆis was consistent with other mailing list patterns we had seen, the
university server was delivering mail to a list that had users at those
machines in the lab. Unfortunately, these older mail servers were no
longer operational and the email addresses had been invalid for a
long time. When shown this rule, the university’s admin responded
that the mailing lists would be cleaned.
(ʅ) Selective SSH Scans: eXpose identi(cid:12)ed several hosts in South
Asia that were selective scanning the lab’s main routers.
∗.∗ : Router1.22 ⇔ ∗.∗ : Router2 : 22 (three router clique).
During the scan a host would simultaneously initiate ssh connec-
tions and try login/password pairs on all the main routers. eXpose
also found co-operative scanning, wherein multiple hosts would
scan a router at the same time.
Attack1.∗ : Router.22 ⇔ Attack2.∗ : Router.22
Given the patterns, the lab’s admin blacklisted the scanning IPs.
(ʆ) Web Robots: eXpose discovered rules for web crawlers.
Robot.∗ : W eb1.80 ⇔ Robot.∗ : W eb2.80
ˆese rules indicate that a crawler bounces between multiple web-
servers perhaps as it follows links on the lab’s web content. Most of
the robots belonged to well-known search sites, but one of them was
a machine in south-east asia that had neither a name record nor was
pingable a(cid:13)er the fact. ˆese robots neither make too many con-
nections nor pull down a lot of data and hence are indistinguishable
from normal web tra(cid:14)c. eXpose found them by their characteristic
access pattern–synchronous accesses to multiple web-servers while
chasing down links. ˆe lab’s admin (cid:8)agged the unknown IP to be
inspected more carefully by the intrusion detection box.
False-Positives: Our lab hosts Planetlab machines. Some depen-
dencies, such as access to the CODEEN CDN are discernible. Yet, it
is almost impossible to (cid:12)gure out from the packet trace which cur-
rently active slice caused which packets. So, we did not attempt to
corroborate rules involving Planetlab.
4.9 Case Study: Rules for HotSpot Traces
Note that both the Sigcomm’ʃʇ and OSDI’ʃʉ traces are
anonymized, so we corroborated rules based on the port and proto-
col numbers of (cid:8)ows. Fig. ʉ graphically shows all the patterns that
eXpose learned from the Sigcomm’ʃʇ trace.
Peer-to-peer Tra(cid:14)c: Most of the high-density clusters were due to
peer-to-peer tra(cid:14)c. In Fig. ʉ, the two large clusters were due to
two wireless hosts using BitTorrent, whereas the two smaller clusters
were due to Gnutella users. Each of these hosts connected to many
tens of unique peers. eXpose found that whenever a peer commu-
nicates on one of the ports in the ʉ@@ʄ-ʉ@@ʃ range, the peer is likely
to communicate on another port in the same range. Presumably,
this is due to multiple (cid:8)ows between the host and BitTorrent peer.
Gnutella’s clusters are similar, except in a di(cid:11)erent and smaller port
range; most (cid:8)ows here are on ports ʉʆʇʉ-ʉʆʇ@.
Suspicious activity on port ʄʃ@ʄ: One of the wireless hosts com-
municated synchronously with four di(cid:11)erent machines on port
ʄʃ@ʄ. Popular wisdom [ʄ@] says that the port is used by the
WinHole–”A trojanized version of Wingate proxy server”. ˆe tra(cid:14)c
volume of each of these (cid:8)ows is fairly small, yet eXpose discovered
the pattern from what appear to be synchronous heart-beat mes-
sages between this victim and other machines:
V ictim.∗ : Other1.1081 ⇔ V ictim.∗ : Other2.1081
DHCP Servers: Almost all the clients in the OSDI trace were in-
∗.67 : 255.255.255.255.68 ⇔ IP1.68 : ∗.67
It appears that both IP1 and IP2 carry a DHCP Server at the well
known port ʉ@. ˆe DHCP daemon responds to requests for new IP
addresses sent by DHCP clients from port ʉ@. DHCP tra(cid:14)c is quite
infrequent and involves few bytes, yet the synchronous accesses in
time lead to this rule. Further, note that eXpose discovered the rule
with no knowledge of what to expect in the trace.
Apple iTunes: eXpose found hosts talking on port ʈʆʈʆ.
H1.5353 : H2.5353 ⇔ H1.5353 : H3.5353; H1.5353 : H4.5353
It turns out that the Apple iTunes application advertises to other Ap-
ple machines on the subnet if con(cid:12)gured to share its music. Some
users appear to have forgotten to disable this feature causing their
laptops to advertise music at the conference. eXpose discovers this
rule by the temporally correlated advertisements and had no knowl-
edge of iTunes before hand.
Link-level Multicast Name Resolution: We found what appears to
be a new form of looking up names. We saw earlier that windows
hosts query both the local DNS server and the local WINS server to
lookup names. In addition, eXpose observed these rules:
Host.∗ : M ulticast.5355 ⇔ Host.∗ : DN S.53
Host.137 : W IN S.137 ⇔ Host.∗ : DN S.53
Host.137 : W IN S.137 ⇔ Host.∗ : M ulticast.5355.
A few hosts were sending out packets to a multicast address on port
ʈʆʈʈ along with the other name lookups. It turns out that this is link-
level multicast based name resolution—a new feature in Vista [ʄʅ]
that is designed speci(cid:12)cally for ad-hoc networks. Of course, this is
the (cid:12)rst time we ever heard of this protocol.
Day-Long Traceroutes: We found two hosts sending what appear
to be day-long traceroutes. eXpose discovered these rules.
Host.0 : IP1.0 : 1 ⇔ Host.0 : IP2.0 : 1; Host.0 : IP3.0 : 1 . . .
Host.0 : IP2.0 : 1 ⇔ Host.0 : IP3.0 : 1; Host.0 : IP4.0 : 1 . . .
ˆe rules show that Host was receiving ICMP (protocol ʄ) mes-
sages from a bunch of IPs all within the same one-second period
and repeated many times throughout the day. Our best guess is that
somebody in the conference was doing some measurements, maybe
to check if a certain path changes during the day. eXpose found this
low-volume event and also the fact that the path did not change.
IM: eXpose found these rules:
Host.∗ : M SN Serv.1863 ⇔ Host.∗ : AOLServ.5190.
It turns out that ports ʄ@ʉʆ and ʈʄ@ʃ are well known ports for MSN
and AOL Instant Messaging Servers respectively. It appears as if a
couple of users were using aggregated instant messaging (IM) clients
like GAIM [ʉ] that can connect to multiple IM networks. ˆere is
little tra(cid:14)c in these (cid:8)ows, the IM client appears to refresh the servers
periodically and synchronously leading to the rule.
5. POSSIBLE EXTENSIONS OF eXpose
From interactions with our administrators, we have some ideas
on how to integrate eXpose into everyday operations. We see much
commonality in patterns. We saw eXpose extract similar rules from
di(cid:11)erent locations (e.g., the IMAP-IMAPS, POP-POPS) rules. Even
more, a vast majority of the rules extracted on di(cid:11)erent days but at
the same location are similar. ˆis suggests that we should build a
database of known rules at each location. Rules extracted on each
new packet trace, perhaps in a streaming fashion, can be matched
with existing rules in the database. ˆis lets the administrators focus
on the novel patterns and also gain further con(cid:12)dence in patterns
that are seen repeatedly.
6. RELATED WORK
A few tools aggregate tra(cid:14)c volumes and visualize the resulting
aggregates. FlowScan [ʄ@] takes as input NetFlow data and breaks
down the tra(cid:14)c volume according to the application (e.g., HTTP,
FTP), the IP pre(cid:12)x, or the AS identi(cid:12)er. CoralReef [ʅ] and IP-
MON [@] produce similar tra(cid:14)c breakdowns based on packet traces.
Autofocus [ʈ] also breaks the tra(cid:14)c volumes into di(cid:11)erent cate-
gories but adapts the breakdown boundaries to zoom-in or out on
interesting subnets and port ranges. eXpose extends these tools
along a new dimension by identifying temporally correlated clus-
ters of (cid:8)ows.
Other related work attempts to (cid:12)nd tra(cid:14)c matching a pre-de(cid:12)ned
communication pattern. Venkataraman et.al. [ʅʇ] and Staniford
et.al. [ʅʅ] present streaming algorithms to identify SuperSpread-
ers, i.e., machines infected by a worm or virus that in turn infect
many other hosts. Another line of work [ʅʈ, ʅʉ] detects stepping
stones whereby an attacker compromises a machine and uses it to
launch a very di(cid:11)erent attack on other machines. Blinc [ʄʄ] uses
hints from multiple levels to tag each (cid:8)ow with the application that
created it. More generally, intrusion detection systems like Bro [ʄʉ]
use a database of signatures for malicious activity and (cid:12)nd matching
tra(cid:14)c. Rather than identifying tra(cid:14)c that matches a given pattern,
eXpose automatically extracts the underlying patterns in a trace.
Perhaps the closest to eXpose is work that (cid:12)nds detailed depen-
dencies for individual applications. Kannan et. al. [ʄʃ] analyze
network traces to identify the structure of a particular application
session (e.g., FTP, HTTP). For individual applications between one
source and one destination, they build state machines detailing how
the session progresses. When pointed at a server, Sherlock [ʄ] (cid:12)nds
dependencies for clients accessing that server even when such de-
pendencies involve multiple other servers or protocols.
Fundamentally, eXpose is di(cid:11)erent as it (cid:12)nds dependencies with-
out guidance. Without pre-focusing on any given application or
server, eXpose looks for all statistically signi(cid:12)cant clusters of (cid:8)ows.
ˆis lets eXpose (cid:12)nd patterns that spread across multiple hosts, pro-
tocols and applications, and even those that an admin did not know
or expect such as con(cid:12)guration errors. Both Sherlock [ʄ] and Kan-
nan et. al. [ʄʃ] can bring out detailed dependencies that eXpose’s
broader search might not highlight. But, to obtain output similar
to eXpose, one would have to repeatedly apply these techniques to
learn dependencies for one server or one application at a time. ˆis
is unlikely to scale and also misses out on dependencies at servers
that the admin may forget to point towards.
7. CONCLUSION
We advance the state-of-the-art in tra(cid:14)c analysis by presenting
a general mechanism to identify temporally correlated (cid:8)ows in a
packet trace. While just looking at temporally correlated (cid:8)ows is un-
likely to capture the myriad kinds of structures in a packet trace, we
show that this is a powerful primitive that is able to capture many
useful patterns. Our tool eXpose uniquely de(cid:12)nes the concept of
generic rules, focuses only on the statistically signi(cid:12)cant (cid:8)ow pairs
and presents an algorithm that scales to large traces. Results from
deploying eXpose within MIT and Microso(cid:13) Research show that
eXpose uncovers many con(cid:12)guration errors and lets operators get
a quick read of what is going on in their network without having to
understand logs from the various servers.
8. ACKNOWLEDGMENTS
We thank Noah Meyerhans, Garrett Wollman at CSAIL and Ge-
o(cid:11)rey Nordlund, Xu Chen at Microso(cid:13) Research for their help in
collecting the traces and validating the discovered communication
rules. We thank the collectors of Sigcomm’ʃʇ and OSDI’ʃʉ traces.
We also thank Albert Greenberg, Arthur Berger and Asfandyar
Qureshi for insightful comments on early dra(cid:13)s. ˆis work was
supported in part by Microso(cid:13) Research and by NSF Career Award
CNS-ʃʇʇ@ʅ@@. Opinions and (cid:12)ndings in this paper are those of the
authors and are not necessarily shared by NSF or Microso(cid:13).
9. REFERENCES
[ʄ] P. Bahl, R. Chandra, A. Greenberg, S. Kandula, D. A. Maltz,
and M. Zhang. Towards Highly Reliable Enterprise Network
Services via Inference of Multi-level Dependencies. In
SIGCOMM, ʅʃʃ@.
[ʅ] CoralReef - Workload Characterization. http://www.caida.
org/analysis/workload/.
[ʆ] R. Dingledine, N. Mathewson, and P. Syverson. Tor: ˆe
Second-Generation Onion Router. In USENIX Security, ʅʃʃʇ.
[ʇ] R. Duda, P. Hart, and D. Stork. Pattern Classi(cid:12)cation. John
Wiley, ʅʃʃʅ.
[ʈ] C. Estan, S. Savage, and G. Varghese. Automatically Inferring
Patterns of Resource Consumption in Network Tra(cid:14)c. In
SIGCOMM, ʅʃʃʆ.
[ʉ] GAIM/Pidgin. http://www.pidgin.im/.
[@] IDENT. http://www.grc.com/port_ʄʄʆ.htm.
[@] IPMON. http://ipmon.sprintlabs.com.
[@] Jose Bernardo and Adrian F. M. Smith. Bayesian ˆeory. John
Wiley, ʅʃʃʃ.
[ʄʃ] J. Kannan, J. Jung, V. Paxson, and C. E. Koksal.
Semi- Automated Discovery of Application Session Structure.
In IMC, ʅʃʃʉ.
[ʄʄ] T. Karagiannis, K. Papagiannaki, and M. Faloutsos. BLINC:
Multilevel Tra(cid:14)c Classi(cid:12)cation in the dark. In SIGCOMM,
ʅʃʃʈ.
[ʄʅ] Link-Level Multicast Name Resolution. http://www.
windowsnetworking.com/articles_tutorials/
Overview-Link-Local-Multicast-Name-Resolution.html.
[ʄʆ] PortPeeker Capture of mySQL Bot attack. http://www.
linklogger.com/mySQLAttack.htm.
[ʄʇ] Nagios: Host, Service, Network Monitor. http://nagios.org.
[ʄʈ] T. Oetiker and D. Rand. Multi Router Tra(cid:14)c Grapher. http://
people.ee.ethz.ch/∼oetiker/webtools/mrtg/.
[ʄʉ] V. Paxson. Bro: A System For Detecting Network Intruders in
Real-Time. Computer Networks, ʄ@@@.
[ʄ@] D. Plonka. Flowscan: A Network Tra(cid:14)c Flow Reporting and
Visualization Tool. In USENIX System Admin. Conf., ʅʃʃʃ.
[ʄ@] Port ʄʃ@ʄ. http://isc.incidents.org/port.html?port=ʄʃ@ʄ.
[ʄ@] P. Reynolds, C. Killian, J. L. Wiener, J. C. Mogul, M. A. Shah,
and A. Vahdat. Pip: Detecting ˆe Unexpected in Distributed
Systems. In NSDI, ʅʃʃʉ.
[ʅʃ] Analysis of the Sapphire Worm. http://www.caida.org/
analysis/security/sapphire/.
[ʅʄ] P. Smyth and R. M. Goodman. Knowledge Discovery in
Databases. MIT Press, ʄ@@ʄ.
[ʅʅ] S. Staniford, S. Cheung, R. Crawford, M. Dilger, J. Frank,
J. Hoagland, K. Levitt, C. Wee, R. Yip, and D. Zerkle. GrIDS:
A Graph-based Intrusion Detection System for Large
Networks. In National Information Systems Security
Conference, ʄ@@ʉ.
[ʅʆ] S. Vempala, R. Kannan, and A. Vetta. On Clusterings Good,
Bad and Spectral. In FOCS, ʅʃʃʃ.
[ʅʇ] S. Venkataraman, D. Song, P. Gibbons, and A. Blum. New
Streaming Algorithms for Fast Detection of Superspreaders.
In NDSS, ʅʃʃʈ.
[ʅʈ] K. Yoda and H. Etoh. Finding a Connection Chain for
Tracing Intruders. In ESORICS, ʅʃʃʃ.
[ʅʉ] Y. Zhang and V. Paxson. Detecting Stepping Stones. In
USENIX Security, ʅʃʃʃ.