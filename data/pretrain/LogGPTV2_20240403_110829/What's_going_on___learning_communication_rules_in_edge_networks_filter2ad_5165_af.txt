### Round Trip Time Estimate and Client Implementations

The round trip time (RTT) estimate can vary widely depending on the client implementation. Most clients query the server infrequently, with probe/response pairs typically consisting of a single UDP packet. However, eXpose discovered that some clients, such as Client1 and Client2, were both accessing the NTP server (NTP.123) synchronously and frequently (approximately one probe every few seconds). This behavior suggests that these machines are likely using the same poorly written NTP client.

### TOR Anonymity Network

The lab contributes servers to the TOR anonymity network. The ability to identify temporally correlated pairs can strip one-hop anonymity, allowing the identification of the next hop for flows routed through the lab’s TOR server. For example, eXpose found rules like:

- `IP1.9001 : TOR.* ⇔ TOR.* : IP2.9001`

This indicates that traffic flows from IP1 to IP2 or vice versa. While this does not break TOR's overall anonymity, it highlights a weakness: the lack of cover traffic and the low volume of traffic make it easier to correlate flows across one hop.

### FTP Session Dependencies

The lab provides mirrors for Debian and Fedora Linux distributions, which clients worldwide download. eXpose found the following rule:

- `IP1.* : Mirror.* ⇒ Mirror.21 : IP1.*`

This reveals that an FTP control connection (on port 21) precedes FTP data connections. Data connections can be either active (started by the server on port 20) or passive (started by clients at ephemeral ports). The rules indicate that most data connections in practice are passive, likely to allow clients behind NATs to access data.

### Discovered Bugs

#### Legacy Addresses in Mailing Lists

eXpose discovered that the university’s outgoing mail server was simultaneously accessing a couple of older mail servers in the lab:

- `UnivMail.* : OldMail1.25 ⇔ UnivMail.* : OldMail2.25`

This pattern was consistent with other mailing list patterns, indicating that the university server was delivering mail to a list with users on those lab machines. Unfortunately, these older mail servers were no longer operational, and the email addresses had been invalid for a long time. When shown this rule, the university’s admin responded that the mailing lists would be cleaned.

#### Selective SSH Scans

eXpose identified several hosts in South Asia that were selectively scanning the lab’s main routers:

- `*.22 : Router1.22 ⇔ *.22 : Router2.22` (three-router clique)

During the scan, a host would simultaneously initiate SSH connections and try login/password pairs on all the main routers. eXpose also found cooperative scanning, where multiple hosts would scan a router at the same time:

- `Attack1.* : Router.22 ⇔ Attack2.* : Router.22`

Given these patterns, the lab’s admin blacklisted the scanning IPs.

#### Web Robots

eXpose discovered rules for web crawlers:

- `Robot.* : Web1.80 ⇔ Robot.* : Web2.80`

These rules indicate that a crawler bounces between multiple web servers, possibly following links on the lab’s web content. Most robots belonged to well-known search sites, but one was a machine in Southeast Asia with neither a name record nor pingable after the fact. These robots neither make too many connections nor pull down a lot of data, making them indistinguishable from normal web traffic. eXpose identified them by their characteristic access pattern—synchronous accesses to multiple web servers while chasing down links. The lab’s admin flagged the unknown IP for more careful inspection by the intrusion detection system.

### False Positives

Our lab hosts Planetlab machines, and some dependencies, such as access to the CODEEN CDN, are discernible. However, it is almost impossible to determine from the packet trace which currently active slice caused which packets. Therefore, we did not attempt to corroborate rules involving Planetlab.

### Case Study: Rules for HotSpot Traces

Both the Sigcomm’04 and OSDI’06 traces are anonymized, so we corroborated rules based on the port and protocol numbers of flows. Figure 4 graphically shows all the patterns that eXpose learned from the Sigcomm’04 trace.

#### Peer-to-Peer Traffic

Most high-density clusters were due to peer-to-peer traffic. In Figure 4, the two large clusters were due to two wireless hosts using BitTorrent, while the two smaller clusters were due to Gnutella users. Each host connected to many tens of unique peers. eXpose found that whenever a peer communicates on one of the ports in the 6881-6889 range, the peer is likely to communicate on another port in the same range. This is presumably due to multiple flows between the host and BitTorrent peer. Gnutella’s clusters are similar but in a different and smaller port range (6346-6349).

#### Suspicious Activity on Port 1081

One of the wireless hosts communicated synchronously with four different machines on port 1081. Popular wisdom suggests that this port is used by the WinHole, a trojanized version of the Wingate proxy server. The traffic volume of each flow was small, but eXpose discovered the pattern from what appear to be synchronous heartbeat messages:

- `Victim.* : Other1.1081 ⇔ Victim.* : Other2.1081`

#### DHCP Servers

Almost all the clients in the OSDI trace were involved in DHCP requests:

- `*.67 : 255.255.255.255.68 ⇔ IP1.68 : *.67`

It appears that both IP1 and IP2 carry a DHCP server at the well-known port 67. The DHCP daemon responds to requests for new IP addresses sent by DHCP clients from port 68. DHCP traffic is infrequent and involves few bytes, yet the synchronous accesses in time lead to this rule. eXpose discovered this rule with no prior knowledge of what to expect in the trace.

#### Apple iTunes

eXpose found hosts talking on port 5353:

- `H1.5353 : H2.5353 ⇔ H1.5353 : H3.5353; H1.5353 : H4.5353`

It turns out that the Apple iTunes application advertises to other Apple machines on the subnet if configured to share its music. Some users appear to have forgotten to disable this feature, causing their laptops to advertise music at the conference. eXpose discovered this rule by the temporally correlated advertisements and had no prior knowledge of iTunes.

#### Link-Level Multicast Name Resolution

We found what appears to be a new form of looking up names. Windows hosts query both the local DNS server and the local WINS server to look up names. Additionally, eXpose observed these rules:

- `Host.* : Multicast.5355 ⇔ Host.* : DNS.53`
- `Host.137 : WINS.137 ⇔ Host.* : DNS.53`
- `Host.137 : WINS.137 ⇔ Host.* : Multicast.5355`

A few hosts were sending packets to a multicast address on port 5355 along with other name lookups. This is link-level multicast-based name resolution, a new feature in Vista designed specifically for ad-hoc networks. This was the first time we had heard of this protocol.

#### Day-Long Traceroutes

We found two hosts sending what appear to be day-long traceroutes. eXpose discovered these rules:

- `Host.0 : IP1.0 : 1 ⇔ Host.0 : IP2.0 : 1; Host.0 : IP3.0 : 1 ...`
- `Host.0 : IP2.0 : 1 ⇔ Host.0 : IP3.0 : 1; Host.0 : IP4.0 : 1 ...`

These rules show that the host was receiving ICMP (protocol 1) messages from a bunch of IPs all within the same one-second period and repeated many times throughout the day. Our best guess is that someone in the conference was doing some measurements, perhaps to check if a certain path changes during the day. eXpose found this low-volume event and also noted that the path did not change.

#### IM

eXpose found these rules:

- `Host.* : MSNServ.1863 ⇔ Host.* : AOLServ.5190`

Ports 1863 and 5190 are well-known ports for MSN and AOL Instant Messaging Servers, respectively. It appears that a couple of users were using aggregated instant messaging (IM) clients like GAIM, which can connect to multiple IM networks. There is little traffic in these flows, and the IM client appears to refresh the servers periodically and synchronously, leading to the rule.

### Possible Extensions of eXpose

From interactions with our administrators, we have some ideas on how to integrate eXpose into everyday operations. We see much commonality in patterns. eXpose extracted similar rules from different locations (e.g., IMAP-IMAPS, POP-POPS). Even more, a vast majority of the rules extracted on different days but at the same location are similar. This suggests building a database of known rules at each location. Rules extracted on each new packet trace, perhaps in a streaming fashion, can be matched with existing rules in the database. This lets administrators focus on novel patterns and gain further confidence in patterns seen repeatedly.

### Related Work

Several tools aggregate traffic volumes and visualize the resulting aggregates. FlowScan [Plonka, 2003] takes NetFlow data and breaks down traffic volume according to the application, IP prefix, or AS identifier. CoralReef [Caida, 2003] and IP-MON [Sprint, 2003] produce similar traffic breakdowns based on packet traces. Autofocus [Estan et al., 2004] also breaks down traffic volumes into different categories but adapts the breakdown boundaries to zoom in or out on interesting subnets and port ranges. eXpose extends these tools by identifying temporally correlated clusters of flows.

Other related work attempts to find traffic matching a predefined communication pattern. Venkataraman et al. [2005] and Staniford et al. [2000] present streaming algorithms to identify SuperSpreaders, i.e., machines infected by a worm or virus that in turn infect many other hosts. Another line of work [Yoda and Etoh, 2000; Zhang and Paxson, 2000] detects stepping stones, where an attacker compromises a machine and uses it to launch a very different attack on other machines. Blinc [Karagiannis et al., 2005] uses hints from multiple levels to tag each flow with the application that created it. More generally, intrusion detection systems like Bro [Paxson, 1999] use a database of signatures for malicious activity and find matching traffic. Rather than identifying traffic that matches a given pattern, eXpose automatically extracts the underlying patterns in a trace.

Perhaps the closest to eXpose is work that finds detailed dependencies for individual applications. Kannan et al. [2006] analyze network traces to identify the structure of a particular application session (e.g., FTP, HTTP). For individual applications between one source and one destination, they build state machines detailing how the session progresses. When pointed at a server, Sherlock [Kannan et al., 2006] finds dependencies for clients accessing that server, even when such dependencies involve multiple other servers or protocols.

Fundamentally, eXpose is different as it finds dependencies without guidance. Without pre-focusing on any given application or server, eXpose looks for all statistically significant clusters of flows. This allows eXpose to find patterns that spread across multiple hosts, protocols, and applications, and even those that an admin did not know or expect, such as configuration errors. Both Sherlock and Kannan et al. can bring out detailed dependencies that eXpose’s broader search might not highlight. However, to obtain output similar to eXpose, one would have to repeatedly apply these techniques to learn dependencies for one server or one application at a time. This is unlikely to scale and also misses out on dependencies at servers that the admin may forget to point towards.

### Conclusion

We advance the state-of-the-art in traffic analysis by presenting a general mechanism to identify temporally correlated flows in a packet trace. While just looking at temporally correlated flows is unlikely to capture the myriad kinds of structures in a packet trace, we show that this is a powerful primitive that can capture many useful patterns. Our tool, eXpose, uniquely defines the concept of generic rules, focuses only on statistically significant flow pairs, and presents an algorithm that scales to large traces. Results from deploying eXpose within MIT and Microsoft Research show that eXpose uncovers many configuration errors and lets operators get a quick read of what is going on in their network without having to understand logs from various servers.

### Acknowledgments

We thank Noah Meyerhans, Garrett Wollman at CSAIL, and Geoffrey Nordlund, Xu Chen at Microsoft Research for their help in collecting the traces and validating the discovered communication rules. We also thank the collectors of the Sigcomm’04 and OSDI’06 traces. We thank Albert Greenberg, Arthur Berger, and Asfandyar Qureshi for insightful comments on early drafts. This work was supported in part by Microsoft Research and by NSF Career Award CNS-0447576. Opinions and findings in this paper are those of the authors and are not necessarily shared by NSF or Microsoft.

### References

[1] P. Bahl, R. Chandra, A. Greenberg, S. Kandula, D. A. Maltz, and M. Zhang. Towards Highly Reliable Enterprise Network Services via Inference of Multi-level Dependencies. In SIGCOMM, 2004.
[2] CoralReef - Workload Characterization. http://www.caida.org/analysis/workload/.
[3] R. Dingledine, N. Mathewson, and P. Syverson. Tor: The Second-Generation Onion Router. In USENIX Security, 2004.
[4] R. Duda, P. Hart, and D. Stork. Pattern Classification. John Wiley, 2001.
[5] C. Estan, S. Savage, and G. Varghese. Automatically Inferring Patterns of Resource Consumption in Network Traffic. In SIGCOMM, 2004.
[6] GAIM/Pidgin. http://www.pidgin.im/.
[7] IDENT. http://www.grc.com/port_22.htm.
[8] IPMON. http://ipmon.sprintlabs.com.
[9] Jose Bernardo and Adrian F. M. Smith. Bayesian Theory. John Wiley, 1994.
[10] J. Kannan, J. Jung, V. Paxson, and C. E. Koksal. Semi-Automated Discovery of Application Session Structure. In IMC, 2006.
[11] T. Karagiannis, K. Papagiannaki, and M. Faloutsos. BLINC: Multilevel Traffic Classification in the Dark. In SIGCOMM, 2005.
[12] Link-Level Multicast Name Resolution. http://www.windowsnetworking.com/articles_tutorials/Overview-Link-Local-Multicast-Name-Resolution.html.
[13] PortPeeker Capture of mySQL Bot attack. http://www.linklogger.com/mySQLAttack.htm.
[14] Nagios: Host, Service, Network Monitor. http://nagios.org.
[15] T. Oetiker and D. Rand. Multi Router Traffic Grapher. http://people.ee.ethz.ch/~oetiker/webtools/mrtg/.
[16] V. Paxson. Bro: A System For Detecting Network Intruders in Real-Time. Computer Networks, 1999.
[17] D. Plonka. Flowscan: A Network Traffic Flow Reporting and Visualization Tool. In USENIX System Admin. Conf., 2003.
[18] Port 1081. http://isc.incidents.org/port.html?port=1081.
[19] P. Reynolds, C. Killian, J. L. Wiener, J. C. Mogul, M. A. Shah, and A. Vahdat. Pip: Detecting The Unexpected in Distributed Systems. In NSDI, 2006.
[20] Analysis of the Sapphire Worm. http://www.caida.org/analysis/security/sapphire/.
[21] P. Smyth and R. M. Goodman. Knowledge Discovery in Databases. MIT Press, 2001.
[22] S. Staniford, S. Cheung, R. Crawford, M. Dilger, J. Frank, J. Hoagland, K. Levitt, C. Wee, R. Yip, and D. Zerkle. GrIDS: A Graph-based Intrusion Detection System for Large Networks. In National Information Systems Security Conference, 2000.
[23] S. Vempala, R. Kannan, and A. Vetta. On Clusterings Good, Bad and Spectral. In FOCS, 2004.
[24] S. Venkataraman, D. Song, P. Gibbons, and A. Blum. New Streaming Algorithms for Fast Detection of Superspreaders. In NDSS, 2005.
[25] K. Yoda and H. Etoh. Finding a Connection Chain for Tracing Intruders. In ESORICS, 2000.
[26] Y. Zhang and V. Paxson. Detecting Stepping Stones. In USENIX Security, 2000.