the same way human confederates are employed in other hu-
man subjects experiments: presenting the illusion of being a
third-party outside the inﬂuence of the researchers, creating
a situation to which participants could respond (the spooﬁng
attack), and recording participants’ behaviors in situations
in which participants may have believed themselves to be
free from researchers’ observation.
3.1.1 Recruitment and screening
Participants volunteered for a Human Intelligence Task
(HIT) we had posted on Amazon’s Mechanical Turk, as de-
tailed in Appendix A.
Participants had to be at least 18 years old, in the United
States while taking the survey, and have an MTurk approval
rating of at least 95%. Participants must not have partici-
pated in any previous similar study from our lab, including
earlier versions (pilots) of this experiment. We used browser-
submitted HTTP headers to verify that participants were
using either Windows Vista/7 or Mac OS X or higher. We
paid $1.00 to each participant who qualiﬁed for and com-
pleted our survey.
3.1.2 Tasks
Upon accepting the HIT, we redirected participants to a
survey site operated in the domain of our research institu-
tion. Our survey requested that the participant maximize
the browser window so that, when participants reached the
third-party website conducting the simulated attack, the ap-
pearance of the spoofed window within the browser content
area would be less suspicious. We posited that an attacker
could use social engineering to convince most users to max-
imize their browsers.
Our survey presented three game evaluation forms in se-
quence, each of which asked participants to click on a link
opening a third-party online gaming website (a diﬀerent one
for each form), play an online game, and then answer ques-
tions about the game. Each form had a link to the game,
and participants were instructed to open the link while press-
ing the ctrl (Windows) or command (Mac OS) key, opening
a new browser tab. Participants were asked to play each
game for two to three minutes, then close the browser tab
and return to the survey form. The evaluation form, given in
Appendix B, asked about the game’s enjoyability and age-
appropriateness, and gave participants the option to report
being unable to play a game.
The ﬁrst two games were real games operated by real gam-
ing websites outside of our control. These two tasks were
included to add legitimacy to the subterfuge that we were
indeed soliciting evaluations of third-party games. The third
and ﬁnal website, yourgamefactory.net, was the confeder-
ate website that we secretly operated. It was at this website
that participants were told that they needed to install new
software to play the game and then saw a spoofed credential-
entry window. The exact message of what would be installed
and the layout of the spoofed windows was determined by
the participant’s treatment group.
367If participants entered their credentials into the confed-
erate website, they encountered a page that explained that
the game had been removed. Regardless, once participants
completed evaluating the game, which simply required them
to check a box indicating that they couldn’t or wouldn’t play
it, they were presented with our exit survey.
3.1.3 Exit survey
The biggest methodological challenge we faced was to de-
termine if a participant’s credentials would have been com-
promised by our simulated attack. In other words, had they
typed their genuine device username and password into the
credential-entry window?
Even if it were ethical to send the passwords to our servers
without participants’ consent, there would be no sure way
to tell if the password was legitimate without trying to gain
access to the participants’ computers—a criminal act. Sim-
ply asking participants to tell us if they had entered their
genuine credentials seemed likely to result in underreport-
ing. Upon discovering our deception, many would surely
be both tempted to deceive us in their response. Further-
more, participants might have legitimately feared that we,
as perpetrators of a deception, might misuse their creden-
tials. If they feared their credentials might still be abused,
they might justiﬁably have believed their safest action was
to deny that the credentials they revealed were indeed gen-
uine.
While we did not immediately send the contents of the
password ﬁeld to our server, we did send its length l. If the
ﬁeld was non-empty (l > 0), we used this value in the exit
interview when asking the following ‘yes’ or ‘no’ question:
You entered l characters into the password ﬁeld of the dialog box.
This password you entered is stored in your browser but we have
not sent your password to our servers. Was the password you
entered a real password for an account on your computer?
(cid:13) Yes, I did enter a genuine password (we’ll immediately delete
any records of the password we kept in your browser)
(cid:13) No, I did not enter a genuine password
If the answer was no, we used a follow-up question to
try to identify participants who had entered their genuine
passwords but had decided to deny doing so.
Since you did not enter a genuine password into the password ﬁeld
of the dialog box, may we collect the contents of this ﬁeld for anal-
ysis?
(cid:13) Yes, since the password I entered is not a genuine password
you may send it to your servers.
(cid:13) No, the password I entered was actually a genuine pass-
word. Please immediately delete any records of it in my
browser and do not send it to your servers for analysis.
(cid:13) No, I have another reason for not wanting the password I
entered sent to your servers (please explain)
We designed this question so that if participants had en-
tered genuine credentials, they would believe the safest op-
tion was to admit to doing so. If participants did not enter
their genuine credentials, they would only need to enter an
arbitrarily short explanation to keep the values they entered
private. Participants who admitted that their password was
genuine in either of the above two questions would be con-
sidered to be compromised.
If a participant did not enter a genuine password, we ﬁrst
asked them to use freeform text to “please explain why you
didn’t enter your password into the password-entry window.”
We then asked participants to “please indicate which (if any)
of the following factors contributed to your decision to not
enter your password.” Participants could check any number
of options, the order of which was randomized for each par-
ticipant. The options included legitimate concerns, such as
not wanting to take the time to install software. The options
also included items that should not have been concerns, such
as fearing that updated software, published by the company
that provided their client OS, would harm their computers.
The combination of both types of options was used so that
participants would have to think about whether each option
really did match their set of concerns. Amongst the list of
options was one that stated “I thought that the password-
entry window was trying to steal my password.” Participants
who checked this option are considered wise to the spooﬁng
attack. Those who did not are considered oblivious to the
spooﬁng, or oblivious for short.
Only after these questions did we disclose the deception
and explain the purpose of the study. After doing so, we
asked participants such questions as whether they suspected
that the window was spoofed and whether they took any ac-
tions to test whether the window was authentic. At the end
of the survey we asked additional demographic questions.
3.2 Instrumentation
We instrumented the confederate gaming website to record
participants’ OS type, browser client name and version, screen
size, browser viewport size, and the position of the top left
corner of browser’s viewport relative to the top left corner
of the screen. We also recorded participants’ mouse move-
ments, clicks within the page content (which included our
spoofed window), and number of keystrokes in the username
and password ﬁeld, as well as the timing of each of these
events measured in milliseconds.
If the participant tried to submit credentials using the
spoofed credential window, we encrypted the contents of the
username and password ﬁelds using a random one-time-use
symmetric encryption key retrieved from, and stored exclu-
sively by, our servers. We stored the ciphertext of the user-
name and password in the client’s browser local storage, but
discarded the key from the client so that the client could not
decrypt the ciphertext. This allowed us to reduce the risk of
storing the contents of the username and password ﬁelds in
the participants’s browser, yet gave us the option to trans-
mit the information to the server later if we obtained the
participant’s consent.
3.3 Implementing spoofed windows
We spoofed the OS window using HTML, CSS, and Java-
script. We did not use Flash or other plugins. The window
could be moved, though only within the browser content re-
gion. For all Windows treatments, we rendered the spoofed
window using the default Windows color scheme and imple-
mented a translucent chrome. We also used the same fonts
as the genuine Windows dialogs, though because they were
rendered on the client, the browser’s zoom level could cause
them to be rendered the wrong size—a problem that could
have been solved by rendering text on the server. Similarly,
on Mac OS we tried to match the OS fonts, colors, and other
aspects of the genuine window’s appearance.
Genuine credential-entry windows often have the user-
name ﬁeld pre-ﬁlled. Since we simulated attacks that did
not have access to the username, these ﬁelds were left blank
in all treatments. We used the generic ‘ﬂower’ icon to repre-
368Table 1: Treatment groups. The credential-entry windows
for those treatment groups with a suﬃx of ‘-D’ had no can-
cel button or had a disabled cancel button, as well as the
window close box disabled.
sent the user account in the UAC dialog, as, if the user had
a user-speciﬁc icon to represent their account, the attacker
would not have access to it.
3.4 Treatment groups
Table 1 shows the 11 treatment groups in our experiment.
Participants using a browser on Windows were randomly
assigned one of 7 treatments: 3 CredUI treatments and 4
UAC treatments. Participants using a browser on Mac OS
were randomly assigned to one of 4 MacOS treatments.
CredUI
In the CredUI treatment, a webpage appeared explaining
that the game was being prepared (see Figure 2a) and, af-
ter four seconds, the spoofed CredUI window illustrated in
Figure 1c was overlaid above it. We placed the name of
the browser (e.g. “Internet Explorer” or “Chrome”) into the
heading of the window to represent the principal requesting
the password. Because we did not have a user name in our
experiments, the ﬁeld was left blank and a ﬁeld label, “User-
name,” was overlaid on top as it would be in the genuine
window. (We later discovered that real Windows interfaces
actually use the two-word phrase “User name.” This small
error was common to all Windows treatments.)
UAC
In the UAC1 treatment, the content of the webpage above
which the credential-entry window appeared stated that the
game required Microsoft Silverlight (Figure 2b). After four
seconds a spoofed UAC window appeared asking the par-
ticipant to consent to the installation of Silverlight and to
provide credentials to do so, as illustrated in Figure 1b.
The UAC2 treatment was identical except that the ins-
tallation window instructed participants to “verify that the
publisher of this application is Microsoft before installing it”
(see Figure 2c). If users were to check the spoofed window,
they would be reassured that Microsoft was indeed listed as
the publisher. We hypothesized that users would focus on
whether the publisher listed was Microsoft, be reassured that
the software was not a threat when they veriﬁed that pub-
lisher ﬁeld matched (and was the publisher of their OS), and
would thus be less likely to notice that the window in which
the publisher ﬁeld appeared was, in fact, the real threat.
Genuine UAC windows are presented on top of a dimmed
(a) Web content shown for the CredUI and CredUI-
D*treatments
(b) Variation for UAC1 treatments
(c) Variation for UAC2 treatments
(d) Variation for MacOS treatments
Figure 2: The contents of the confederate website’s pre-
installation page, over which the credential-entry window
appears, were slightly diﬀerent for each treatment group.
Subﬁgure (a) ﬁgure shows the full page, whereas the re-
maining ﬁgures show variations from Subﬁgure (a).
desktop and, when credentials are required, the user name
is often already ﬁlled in. We opted not to dim the region
of the screen under our control – the web content region –
as we believed that dimming a limited portion of the screen
would raise more suspicion than it would dispel.
MacOS
With Mac OS, we simulated the installation of QuickTime
as this software is also a common browser add-on and, like
Silverlight on Windows, it would be signed by the same com-
pany that provided the user’s OS. The sequence of events
that start an installation on Mac OS begins with a dialog
that describes the software to be installed, followed by a
request for credentials. Thus, we ﬁrst showed the webpage
that triggered the fake installation (Figure 2d) and, four
seconds later, showed a spoofed installation-description dia-
log (Figure 3). Only after the participant clicked to continue
with the installation did we show the spoofed password-entry
369“Please indicate which (if any) of the following factors
contributed to your decision to not enter your password”
Figure 3: Spoofed installation-description dialog used exclu-
sively in the MacOS1 treatments
window (Figure 1a). Simulating the installation-description
dialog may add realism for Mac OS users who expect to see
it before entering their password. However, it also presents
the user with an additional opportunity to cancel the insta-
llation sequence before the credential-entry window appears.
For this reason we omitted several steps that users typically
see during the Mac OS installation process, such as select-
ing the ﬁlesystem location in which the application will be
stored and consenting to a license agreement.
In the MacOS2 treatment, we did away with the spoofed
installation-description window step.
Mac OS puts labels to the left of text ﬁelds, rather than
overlaying them within, so the username ﬁeld was com-
pletely empty. Mac OS also centers credential-entry win-
dows on the screen—a feature that we did not replicate. We
failed to capitalize the ‘T’ in QuickTime on the “preparing
game” webpage, but capitalized it correctly in the spoofed
installation-description dialog.