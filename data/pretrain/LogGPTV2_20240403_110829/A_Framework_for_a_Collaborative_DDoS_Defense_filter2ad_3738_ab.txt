3
Control Messages
DEFJOIN /
DEFREPLY
STMP
ALRM
ATCK-CONT
Usage
Formation & reinforcement
of the P2P link
Mark exchange
New attack alert
Ongoing attack alert
Table 1. DefCOM Messages
ber to be placed in clear in a packet’s IP header. Packet
marking is done only by active nodes, that lie on the path
of the trafﬁc going to the victim of an attack. We use
two stamps because many defenses [7, 18, 6] can only as-
certain if a packet is legitimate, and such packets will be
marked with the HIGH stamp. If a defense could provide a
higher granularity of trafﬁc separation, more stamps would
be needed to take advantage of this for trafﬁc prioritization.
A node changes its stamps periodically (every Tchange,
currently 5 seconds) to reduce the danger of a snifﬁng or
guessing attack, and communicates these stamps to all its
peers in an encrypted STMP message. When the message
is acknowledged by all its peers, or after a timeout, the node
starts using new stamps.
We place the stamp in the ID ﬁeld of the IPv4 header,
which is normally used for fragmented packet identiﬁca-
tion, and we drop fragmented trafﬁc going to the victim
during an attack. We believe that the damage to frag-
mented trafﬁc will be minimal because: (1) fragmented traf-
ﬁc makes a very small portion (0.25%) of the Internet’s traf-
ﬁc [11], and (2) DefCOM only marks trafﬁc going to the
victim during the attack, so the fragmented trafﬁc loss is
limited. We could place the stamps in the IP options ﬁeld
instead, but because some routers process such packets on
the slow path this would jeopardize performance.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:32:41 UTC from IEEE Xplore.  Restrictions apply. 
CLRLRLAGECADFGHa1a2b1e1h1CLRLAGEe1h1HGFCADRLRLCLRLAGEe1h1HGFCADRLRLattack on h1!attackerattackerCLRLAGEe1h1HGFCADRLattackerBBB233441122(a) DefCOM nodes use trafﬁc ﬂow to generate join messages and form peer relationships (b) Alarm propagation(c) Trafﬁc tree construction(d) Trafﬁc policing and "attack continues" messagesRLa1a2b1b21a1a2b1b2a1a2b1b2DefCOM messageData trafﬁcP2P linkDefCOM nodeLegacy routerEnd hostParent-childRLRLRLRLRLBProceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 20062.3. Operation
Alarm propagation. When a defense coupled with an
alert generator detects the attack, the alert generator creates
ALRM message with the victim’s IP address and resource
limits (RLM). Our current prototype focuses on defense
against bandwidth attacks, so we express RLM in units of
bandwidth. Alarm message is ﬂooded on the overlay, in a
controlled manner to suppress duplicate messages. A node
ﬂoods an ALRM message to all its peers and remembers it
for Tr (currently 6) seconds. Duplicate messages will re-
fresh the timer and will be silently dropped. A node that
receives an ALRM message becomes active and starts to
classify or rate-limit trafﬁc, according to its functionality. In
Figure 1 (b) we illustrate ALRM message ﬂooding (squares
with arrows, numbers denote the message order) that occurs
when attacker b2 launches an attack against victim h1.
Trafﬁc tree construction. Active nodes organize them-
selves into a trafﬁc tree (subgraph of the overlay) contain-
ing only the nodes that forward any trafﬁc to the victim.
Nodes use the trafﬁc ﬂow to the victim to discover parent-
child (upstream-downstream) relationships with their peers.
Trafﬁc tree is used by a node to keep track of each child’s
trafﬁc output, and identify malicious insiders.
A parent-child relationship is discovered using packet
marking. An active classiﬁer or rate limiter marks all for-
warded packets with its HIGH or LOW stamp. When a node
observes trafﬁc with its peer’s stamp it ﬂags this peer as a
“child”. This process leads to a distributed formation of a
trafﬁc tree. For example, in Fig. 1 (c), node F observes
stamped packets from nodes A and B and becomes their
parent, while node H becomes parent of node F. The trafﬁc
tree is represented with thick gray lines, and arrows denote
parent-child relationships.
Trafﬁc policing. Excess trafﬁc to the victim is con-
trolled by rate limiter nodes. A rate limiter ﬁrst reclassi-
ﬁes each incoming packet based on its current stamp and
the aggressiveness of the child that forwarded this packet,
and then rate limits all outgoing trafﬁc to RLM. Reclassiﬁ-
cation rules are the following: (1) A rate limiter keeps byte
count of all trafﬁc received from each child in the past TM al
seconds (currently TM al = 5). A child whose average out-
put is more than RLM will be considered aggressive and all
its packets will be reclassiﬁed as unstamped. Since each
active node should rate limit the trafﬁc forwarded to the
victim during an attack, nodes that violate this requirement
are clearly malicious. Packets from non-aggressive children
will preserve their HIGH or LOW classiﬁcation and will be
marked with rate limiter’s stamps. (2) A rate limiter keeps
byte count of all unstamped trafﬁc received in the past TM al
seconds. If its average is lower than RLM all unstamped
packets will be marked with a LOW stamp. This rule helps
identify legacy trafﬁc from networks that do not host attack-
ers but also do not deploy classiﬁers. LOW classiﬁcation
helps improve chances of such trafﬁc in competition with
attack, while ensuring better service for veriﬁed-legitimate
trafﬁc marked with HIGH stamp.
Resource allocation and rate-limiting are performed af-
ter reclassiﬁcation using a weighted fair sharing algorithm
(WFSA) we describe in Section 5. In real deployment a rate
limiter could use a weighted fair queueing module available
in many commercial routers. In our experiments we use the
following weights: wHIGH = 0.9 and wLOW = 0.1, and we
drop unstamped trafﬁc.
Deactivation. A node that drops trafﬁc due to rate lim-
iting generates an ATCK-CONT message every Tend sec-
onds (currently Tend = 6) and ﬂoods it on the overlay, us-
ing the same rules as for the ALRM message ﬂooding to
control the overhead. A node detects the end of the attack
locally if it drops no trafﬁc due to rate limiting in the last
Tend seconds. It then stops generating ATCK-CONT mes-
sages but still forwards these messages sent by other nodes.
The global end of the attack is detected when a node does
not receive or generate any ATCK-CONT message in the
last 2 ∗ Tend seconds, which means that all drops due to
rate limiting have stopped. Figure 1 (d) illustrates trafﬁc
policing and ATCK-CONT messages (squares with arrows,
arrows, numbers denote the message order).
We selected the values for various time intervals (e.g.
TM al, Tend, Tr) empirically, to balance the reaction speed
with the accuracy. Higher values slow down DefCOM’s
response and lower values make the system overreact to
bursty trafﬁc. The weights wHIGH and wLOW should be se-
lected based on the conﬁdence of the legitimacy tests. Ac-
curate tests warrant larger wHIGH (and smaller wLOW) values.
3. DefCOM security
We prevent malicious nodes from joining DefCOM by
requiring DEFJOIN and DEFREPLY messages to carry a
valid certiﬁcate, issued through human channels after a
node shows that it meets some required security criteria.
Certiﬁcates could be issued by some global certiﬁcation au-
thority, or current DefCOM nodes could vouch for the trust-
worthiness of a new node and cast a vote in its favor.
Fabrication and replay of control messages is prevented
by signing each message by the originator’s private key, en-
crypting it with the session key and attaching a sequence
number. Since all control messages are exchanged between
peers, and are not frequent, the cryptographic and key ex-
change cost is small.
An attacker could deny DefCOM’s service by ﬂooding a
node with bogus messages and forcing it to pay the price
of cryptographic veriﬁcation. A DefCOM node defends
against this attack by requesting that each control message
carries a valid peer stamp, that serves as a nonce.
4
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:32:41 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006Ensuring security against malicious participants is difﬁ-
cult for any distributed protocol. An insider could interfere
with DefCOM’s operation in various ways, fabricating or
suppressing messages. For space reasons, we discuss here
only the most harmful attacks.
Sending excessive messages to a peer. This attack can be
handled by limiting the rate of messages a node is willing
to receive from each peer.
Lying about the attack via false ALRM messages. Def-
COM alert generators must possess an authorization to issue
alerts for a given victim. One solution would be to bind spe-
ciﬁc networks to alert generators that are allowed to issue
alerts for them, using a DefCOM certiﬁcate. For instance,
an ISP’s alert generator could be authorized to issue alerts
for this ISP and its customers.
Marking attack trafﬁc with HIGH priority mark. Falsely-
marked trafﬁc competes with legitimate trafﬁc for resources
because both trafﬁc ﬂows are marked for HIGH-priority
handling. An attacker can generate high-rate attacks by
either compromising a few classiﬁers (sparse attack), and
sending at a high rate, or by compromising many classiﬁers
(diffuse attack) and sending at a low rate from each one.
We counter sparse attacks via non-aggressive checks and
reclassiﬁcation in section 2.3. To counter diffuse attacks,
we enhance the rate limiter functionality with active testing,
aimed to identify malicious children. Note that these attacks
are difﬁcult for the attacker to create, since he must compro-
mise many classiﬁer nodes that are also well distributed to
minimize rate-limiting.
Active testing is performed by a rate limiter, that receives
total HIGH-stamped trafﬁc at the average above RLM over
period of TM al seconds. Testing consists of forwarding and
dropping phase, each Ttest (currently 5) seconds long. The
goal of the testing is only to conﬁrm that trafﬁc marked
HIGH by a child is congestion responsive, which veriﬁes
the legitimacy of this child. In the forwarding phase, the
node chooses a set of children at random, so that the sum
of their HIGH-stamped trafﬁc is lower than RLM. It then
forwards all the trafﬁc from these children and records the
average arriving rate of each child’s HIGH-stamped trafﬁc,
R1. Trafﬁc from other children is dropped to ensure that
the tested trafﬁc experiences minimal congestion. During
the dropping phase, all tested children’s trafﬁc is dropped
and the average arriving rate of each child’s HIGH-stamped
trafﬁc, R2 is recorded. If R2 < 0.2 · R1, in response to
packet drops, this veriﬁes that the trafﬁc marked for HIGH
priority handling by the tested child is congestion respon-
sive. The rate limiter then marks this child as “conﬁrmed-
legitimate”. Otherwise the child is marked as “malicious”
and its trafﬁc will be dropped by the end of the attack. The
forwarding phase of one test-set can be overlapped with the
dropping phase of the previous set, so that the testing phase
is relatively short.
Due to a random choice of children set to be tested, the
attacker has low probability of guessing when his malicious
classiﬁer is chosen for testing, and cannot fake the conges-
tion response. The active testing has an obvious limitation
that it only properly conﬁrms legitimacy of children that
mark TCP trafﬁc with a HIGH-priority mark. While this
is undesirable, we note that the issue of trust in distributed
systems is a known hard problem, and that many distributed
DDoS defenses do nothing to discover and eliminate ma-
licious insiders [6, 18, 5, 10]. DefCOM with active test-
ing thus has a better security model than other distributed
DDoS defenses. Our future research will investigate how a
victim’s feedback could be integrated with active testing to
improve the accuracy of malicious child identiﬁcation.
3.1. Robustness to message loss
DefCOM implements application-level reliability mech-
anisms to counter sporadic message loss due to congestion
created by the attack. Each message has to be acknowl-
edged by the recipient. Unacknowledged messages are re-
peated after Trto seconds (currently Trto = 2). We expect
that attack will not interfere with ALRM messages, since
they travel in the opposite direction on full duplex links.
4. Scalability
DefCOM nodes communicate only with peers in the
overlay, so the communication scalability depends on the
number of peers. While the connectivity of the overlay de-
pends on the underlying physical topology, the pattern of
defense nodes’ deployment and trafﬁc patterns, deployment
strategies that place rate limiters in the core lower the degree
of all nodes and improve scalability.
A node stores only a small amount of state information
per peer — some trafﬁc statistics data, peer stamps and a
public key — so the memory requirement is modest even