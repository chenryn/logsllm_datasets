because MR-based attacks need to access many MRs but by
default Crail only registers a small set of MRs.
PTE-based attack (PythiaCrailPTE).
The second attack
uses PTE-based eviction. In this attack, we require three pro-
cesses as in the MR-based attack: Pc, Ps, and Pa. In the prepa-
ration phase, we ﬁrst use Ps to allocate a big chunk of memory
and register it with an MR. In the eviction phase, Pa performs
one-sided RDMA reads to different VPNs in the allocated
memory space. Afterwards, Pc issues a Crail get request to
the victim key-value pair.
Our reverse engineering results in Section 4.4 can be lever-
aged to reduce the eviction set size in PythiaCrailPTE. How-
ever, to form the eviction set, we need to know the index of
the SRAM cache set(s), which is calculated by the virtual
memory address. Without modifying the source code of Crail
which is written in Java, it is difﬁcult to directly know the
virtual memory address of a target key-value pair. Instead, we
use a “learning” phase before launching the actual attack to
determine the eviction set to use for a target key-value pair.
Speciﬁcally, we let Pc access the target key-value pair and let
Pa try all 1024 different cache sets for eviction. After 1024
trials, we pick the cache set that yields the best accuracy as
our attack eviction set.
Client-only attack (PythiaCrailClient). Our last attack on
Crail is launched exclusively from a regular Crail client pro-
cess and requires no other privileges or resources. The attacker
(as a normal Crail client) issues Crail get requests to different
key-value pairs during the eviction phase. After the eviction
phase, it performs a Crail get operation to the victim key-value
pair.
Our initial design of PythiaCrailClient randomly picks key-
value pairs to access during the eviction phase. However, we
soon discovered two issues with this naive approach. First, it
needs a large number of key-value pairs to effectively evict the
target key-value pair. Doing so not only makes the attack slow
but also requires the Crail system under attack to already be
storing many key-value pairs. Second, we found that the Crail
system becomes slower and unstable as the server processes
more client requests. We suspect this to be caused by Crail’s
own (memory) management overhead. Unstable access la-
tency makes our timing-based attack harder and prohibits an
accurate prediction during the reload phase. We improve our
initial design with the following optimization. We selectively
choose a small set of key-value pairs as the eviction set. We
make the assumption that key-value pairs are sequentially
allocated in chunks of memory and pick the pairs that are
likely to be in the same RNIC SRAM cache set as the victim
key-value pair. After reducing the eviction set size, our attack
runs very fast. Instead of continuously launching the attack in
loops, we add some sleep time between eviction and reloading
so that we do not issue too many Crail requests to make Crail
unstable.
Probabilistic prediction. Under real workloads and noisy
network environments, we found that a simple threshold as
used in Section 4.3 cannot accurately determine if the victim
has accessed the target data. Thus, we use a more dynamic
and adaptive approach to predict the outcome of the attack.
Similar to the approach used in TLBleed [28], we perform a
learning phase to train a classiﬁer of operation latency with
KNN [22] before the attack. We use the trained model to
predict the probability of a reload latency implying a victim
access (i.e., a hit).
5.2 Results
We
and
evaluated
PythiaCrailClient using both controlled tests and work-
PythiaCrailMR, PythiaCrailPTE,
702    28th USENIX Security Symposium
USENIX Association
Figure 15: PythiaCrailMR
Figure 16: PythiaCrailPTE
Figure 17: PythiaCrailClient
loads that model real datacenter key-value stores.
5.2.1 Controlled Test
We ﬁrst compare the latency of a Crail client key-value pair
get operation that hits RNIC SRAM, a client get that misses
RNIC SRAM after the eviction phase in PythiaCrailMR, in
PythiaCrailPTE, and in PythiaCrailClient. In these controlled
tests, the victim client has a 50% chance of accessing the
targeted key-value pair that the attacker tries to infer accesses
on. Figure 18 plots these four types of latencies, each per-
forming 1000 trials. All the three types of misses take longer
than hits, with the timing difference of PythiaCrailMR the
biggest and PythiaCrailClient the smallest. The timing differ-
ence implies that it is easiest to separate hits and misses with
PythiaCrailMR.
We launch the PythiaCrailMR, and PythiaCrailPTE, and
PythiaCrailClient attacks by ﬁrst performing their respective
eviction phases. Next, we let victim access or not access
the target key-value pair. Finally, we measure the time to
reload the key-value pair and compare it with a threshold
we determined from the timing difference testing phase. As
expected, PythiaCrailMR gives the best accuracy. The accura-
cies of PythiaCrailMR, PythiaCrailPTE, and PythiaCrailClient
are 96%, 85%, and 79% respectively, and the time to perform
these attacks are 19ms, 0.1ms, and 0.3ms.
5.2.2 Macro-benchmark Results
Workloads.
To evaluate how our attacks perform with
real datacenter key-value store workloads, we construct a
macro-benchmark with the Yahoo! Cloud Serving Bench-
mark (YCSB) [21] and statistics reported by Facebook in
their production key-value store [12]. YCSB provides key-
value get/set access pattern but no inter-arrival time between
requests. Facebook provides the inter-arrival time of requests
received at a server in its cluster, which includes requests
from all the clients to this server. We set each key-value pair
size to be 1 KB, the average key-value pair size reported by
Facebook.
Attack environment setup.
In this experiment, the victim
(on a Crail client machine) executes our macro-benchmark
to access key-value pairs on a Crail server machine using
the Crail APIs. Since Facebook only provides aggregated
request inter-arrival time across clients and does not reveal
Figure 18: Timing Difference in Crail. Each line presents the
timing differences of each case over 1000 trials.
how many clients there are, we use one client machine to
model the aggregated effect of all clients with the provided
inter-arrival time. We run an attacker process as a normal
Crail client on another machine. A fourth machine serves as
the Crail namenode. While the victim process executes the
macro-benchmark, we repeatedly perform PythiaCrailClient,
PythiaCrailMR, or PythiaCrailPTE to detect if the victim ac-
cesses a target key-value pair.
Results.
Figures 15, 16, and 17 present the timeline of the
victim accessing the target key-value pair (red crosses) and
the attacker’s prediction (black dots with values as access
probability). All three attacks can capture most if not all vic-
tim accesses. Among them, PythiaCrailMR is the worst in
attack accuracy. This is because each attack in PythiaCrailMR
takes 19ms, which is much longer than the Facebook inter-
arrival time. As a result, PythiaCrailMR misses victim ac-
cesses that happen more frequent than its attack length. Both
PythiaCrailPTE and PythiaCrailClient run very fast and cap-
ture all victim accesses. In fact, these two attacks run so
fast that we add a sleep time of 1ms between evict and
reload to avoid issuing too many Crail requests and mak-
ing Crail’s performance unstable. Comparing PythiaCrailPTE
and PythiaCrailClient, PythiaCrailPTE’s predictions are of low
access probabilities and PythiaCrailClient has more predic-
tions of around 50% access probabilities. The attacker can
set a threshold accordingly to determine the ﬁnal set of
victim accesses (e.g., those with probabilities > 60% for
PythiaCrailClient).
Overall, we believe PythiaCrailClient to be the most effec-
USENIX Association
28th USENIX Security Symposium    703
Timeline (ms)0306090120150Access Probability (%)020406080100VictimAttackerTimeline (ms)020406080100120140Access Probability (%)020406080100VictimAttackerTimeline (ms)020406080100120140Access Probability (%)020406080100VictimAttackerLatency (us)3579111315Percentile03691215HitMiss−CrailMiss−PTEMiss−MRtive attack, since it predicts victim accesses with high conﬁ-
dence and it requires the least amount of attacker resources:
PythiaCrailClient can be launched exclusively from a separate
client machine through the unmodiﬁed Crail client interface.
If attackers can run modiﬁed Crail clients, they can launch
more efﬁcient side-channel attacks by forming the eviction
set with known virtual addresses.
6 Mitigation Techniques
Defending against RDMA-based side-channel attacks is pos-
sible and feasible. We discuss both mitigations for current
hardware as well as those for future hardware.
Huge virtual memory page or no virtual memory.
PTE-based attacks are only possible when RNICs cache
PTEs and when the attacker can form an effective eviction
set. One way to prevent PTE-based attacks is to force all
RDMA registrations and operations to directly use physical
memory addresses. When physical memory addresses are
used, RDMA does not need to access or cache PTEs, thereby
preventing PTE-based attacks. Registering physical memory
addresses is a privileged operation that RNICs allow the
kernel [76] and privileged users to perform [51]. However,
using physical memory addresses loses all the beneﬁts of
virtual memory and introduces new security concerns.
Another method to defend against PTE-based attacks is to
use huge memory pages [24]. Using huge pages (e.g., 1 GB
pages) introduces two types of difﬁculties for attackers. First,
the attacker can only guess victim accesses at coarse granular-
ity (e.g., 1 GB). Second, the attacker will need to have access
to a huge memory space to form an eviction set with enough
PTEs.
Isolate server’s resource.
Our experience with Crail
demonstrates that attacking Crail is difﬁcult when the attacker
can only use Crail’s interface without the access to a large
number of PTEs or MRs and without knowing Crail’s data
layout in the virtual memory address space. Our experiments
show that for PythiaCrailMR and PythiaCrailPTE to work, an
attacker needs to run a process, Ps, on the server machine.
Otherwise, the attacker would not be able to launch those
attacks (although PythiaCrailClient still works). Thus, a server
that hosts RDMA service can prohibit normal users from
running any processes to help defend against side-channel
attacks. Various address randomization techniques can also
complicate attacks.
Separate protection domains. When we disclosed the at-
tacks in this paper to Mellanox, the Mellanox engineers stated
that separating Protection Domains (PDs) between different
clients and connections can potentially mitigate the attacks.
We evaluated this mitigation by moving the attacker to a dif-
ferent PD and found that doing so mitigates Pythia attacks.
Unfortunately, all existing RDMA applications that we are
aware of [7, 24, 83] use only one PD for higher performance.
Using multiple PDs results in low throughput and high la-
tency overhead (15% throughput reduction and 21% latency
overhead with 256 PDs in our experiments). We plan to fur-
ther investigate both attack and defense mechanisms when
separating PDs across clients.
Introduce noise. Our side channels are established on tim-
ing differences at the microsecond or sub-microsecond level.
Attacking Crail running real workloads is more difﬁcult than
attacking raw RDMA accesses mainly because of Crail’s non-
deterministic performance overhead. Therefore, an effective
countermeasure is to introduce random latency overhead at
an RDMA-based application or in the datacenter RDMA net-
work, which, however, could impact application performance.
Detect and throttle attacker’s network trafﬁc.
Our at-
tackers can hide their attacks because one-sided RDMA op-
erations are completely hidden from the receiver CPU (the
server in our case). To detect these attacks, the server can de-
ploy trafﬁc snifﬁng tools to sniff all incoming RDMA network
requests. If the sniffer detects heavy network activity from
a client, it can raise a ﬂag that this client may be malicious.
If it further detects an access pattern that matches eviction
sets described in Section 4.4, this client is more likely to be
an attacker. This defense comes with the same drawbacks of
other heuristic-based defenses that an attacker may stay under
the detection threshold.
A further countermeasure is to throttle the maximum band-
width allowed at every client. If an attacker cannot issue
enough operations to evict RNIC SRAM, its attack accuracy
will drop signiﬁcantly. However, throttling client bandwidth
can hurt normal clients’ performance.
Better hardware design. All existing RNICs share their
SRAM across all users and across all connections. Because of
this, an attacker can evict a victim’s PTE and MR even when
the attacker and the victim have different connections to the
server. If RNICs can partition their SRAM to different isolated
domains for different connections, then attackers can never
evict victim’s PTEs or MRs. However, isolation resources at
hardware level will inevitably hurt performance and increase
hardware complexity, which gives little incentive for RNIC
vendors to change their hardware design.
7 Discussion
We now brieﬂy discuss the implications, impact, and limita-
tions of Pythia, and some other attacks on RDMA that can be
designed based on Pythia.
7.1 RDMA Vulnerabilities
We discovered new vulnerabilities in RDMA systems that
are fundamental to the design of RDMA and not speciﬁc to
just one RDMA device. RNICs cache metadata as a result
704    28th USENIX Security Symposium
USENIX Association
of RDMA’s design philosophy of one-sided network commu-
nication. Because one-sided operations cannot involve host
CPUs, RNICs have to handle and serve RDMA requests on
their own, which involves accessing various types of meta-
data. With limited on-board SRAM, RNICs cannot store all
the metadata and have to move metadata between their SRAM
and the host machine’s main memory through the PCIe bus.
As a result, there exists timing difference between RDMA
operations that hit or miss SRAM, and this timing difference
keeps increasing as RNICs evolve over generations.
We demonstrated the feasibility of exploiting the above
vulnerability to launch side-channel attacks on RDMA-based
systems. Pythia attacks are fast and accurate, and they can be
performed completely from the network. Moreover, attack-
ers can hide their traces because the attack uses one-sided
network requests.
Both the RNIC side channels we discovered and our at-
tacks’ unique advantages are fundamental to one-sided net-
work communication. One-sided communication offers many
performance and cost beneﬁts that are attractive for datacenter
systems. However, it also raises new security concerns [77],
as we demonstrate in Pythia. Our work can inspire future
security researchers in discovering and defending more vul-
nerabilities in RDMA.
7.2 Attacking Real Applications
We demonstrated that it is feasible to launch Pythia attacks
on Crail, a real RDMA-based system developed by the Crail
team. PythiaCrailClient, the attack that is launched by perform-
ing Crail-provided client APIs only, can successfully infer
victim’s access patterns under real workloads.
We believe that Pythia can similarly attack other RDMA-
based applications as well. Pythia only requires two features
from an RDMA-based application: the application uses one-
sided RDMA operations and allocates regular paged memory.
Many applications meet these requirements, such as the NAM-
DB RDMA-based in-memory database [88], the Pilaf RDMA-
based key-value store [56], and the Wukong RDMA-based
graph system [68]. Unfortunately, most of these systems are