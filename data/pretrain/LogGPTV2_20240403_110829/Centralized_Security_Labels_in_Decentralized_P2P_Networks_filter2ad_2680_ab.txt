potential key-holders from below by k limits the inﬂuence
of malicious agents, because it ensures that a single key-
holder determines at most 1/kth of the votes in Equations 1
and 2 that determine an object’s global labels, and a sin-
gle score-manager determines at most 1/kth of the votes
in Equation 3 that determine an agent’s global trust value.
Bounding the number of potential key-holders from above
by 2k ensures that lookup will not become too costly, and it
bounds the storage overhead for ﬁnger tables.
This O(k) redundancy of score-managers is similar to
the EigenTrust algorithm [7], but unlike EigenTrust, Penny
ensures that all key-holders and score-managers for a given
key-range are always located in adjacent positions on the
Chord ring. This is achieved by ensuring that each agent’s
key-range always includes its identiﬁer range. An agent
can therefore contact all score-managers for a particular
agent a, or all key-holders for a particular object o, us-
ing O(log N + k) messages. The ﬁrst O(log N) messages
propagate the message using the Chord algorithm [9] to the
agent whose identiﬁer range includes key a or key o. This
agent then forwards the message directly to the other O(k)
agents whose key-ranges also include key a or key o. Penny
therefore reduces the overhead of all network operations
that involve contacting key-holders and score-keepers by a
factor of k over the EigenTrust algorithm. When k is a large
constant, such as k = 16, this can mean a signiﬁcant reduc-
tion in network trafﬁc.
To maintain the invariant that the number of score-
managers for each key-range lies between k and 2k, a Penny
network must occasionally split or merge key-ranges as
agents join and leave the network. If a join operation causes
the number of score-managers in a range to rise above 2k,
the Penny protocol splits that key-range into two smaller
key-ranges. Dually, if a leave operation causes the number
of score-managers for a range to descend below k, Penny
reassigns those agents (and some agents in an adjacent key-
range) a larger key-range.
Unlike Penny, a Chord network requires each key-holder
to maintain a list of the agents who own the key-holder’s
daughter objects. These lists are reported to any agent who
requests the object, divulging the identities of all agents
who own a particular object. To address this privacy vulner-
ability, Penny conceals information associating agents with
the objects they own by splitting that information amongst
key-holders and score-managers. A malicious key-holder
and a malicious score-manager must therefore collaborate
to learn that a particular server owns a particular object. Op-
portunities for such collaboration are limited because key-
holders and score-managers cannot choose their key-ranges.
It is therefore unlikely that a malicious collective will oc-
cupy both a key-range that includes a particular victim ob-
ject’s key and a key-range that includes a particular victim
agent’s key.
4. The Penny Algorithm
The Penny algorithm describes the key assignment pro-
cess, agent joins and departures, requesting objects, offer-
ing new or downloaded objects with conﬁdentiality and in-
tegrity labels, and updating conﬁdentiality and integrity la-
bels as data is exchanged.
318318
4.1. Message Routing
As in Chord, each agent a in a Penny ring maintains a
ﬁnger table that is used to route messages efﬁciently. For
each i ∈ 0 . . . m−1, agent a’s ﬁnger table includes the agent
whose identiﬁer range includes (id a + 2i) mod 2m (where
2m is the size of the agent identiﬁer space).
In addition,
agent a’s ﬁnger table also includes an entry for each agent
whose key-range coincides with a’s key-range. We refer
to a set of agents with equal key-ranges as a neighborhood.
The size of each ﬁnger table is therefore O(m+k), where k
is a constant dictating the number of redundant key-holders
assigned to each key.
The protocols for joining and leaving a Penny network
are similar to those for joining and leaving a Chord net-
work [9], but Penny’s addition of non-unique key-ranges
requires special consideration. When an agent anew joins
a Penny ring, it is by default assigned a key-range identi-
cal to its successor’s.
Its successor informs all agents in
its neighborhood that they should update their ﬁnger tables
to include anew . However, if this would result in a neigh-
borhood of size greater than 2k, a split occurs. The ﬁrst k
agents and the last k + 1 agents in the neighborhood each
become their own neighborhoods. The key-ranges of the
new neighborhoods are the unions of the identiﬁer ranges
of the agents within each.
Figure 1 illustrates a join operation with a split. Iden-
tiﬁers are labeled next to each agent outside the ring, and
agent key-ranges are labeled inside the ring. In this exam-
ple, k = 2, so when the agent with identiﬁer 61 joins, key-
range [15, 63] has more than 2k agents and must be split.
Figure 2 shows an example of the propagation of a Penny
message through the resulting ring. Agent 0 wishes to send
a message to all agents whose key-range includes identi-
ﬁer 28. First, the message is propagated along the ring ac-
cording to the Chord algorithm to the agent whose identi-
ﬁer range includes 28 (agent 23). This involves ﬁrst send-
ing the message to the agent whose identiﬁer range includes
0+24 = 16, and next to the agent whose identiﬁer range in-
cludes 16 + 23 = 24 (agent 23). Once the message reaches
an agent whose key-range includes 28, that agent forwards
the message directly to all other agents in its neighborhood.
These are all agents in the ring whose key-ranges include
28.
When an agent aold leaves a Penny ring, it informs its
predecessor apred and the other agents in aold’s neighbor-
hood.
If apred is in a different (adjacent) neighborhood,
apred must inform the other agents in that neighborhood that
the neighborhood’s key-range has grown to include identi-
ﬁers up to and including id succ − 1 (where asucc is aold’s
successor). Likewise, agents in aold’s neighborhood must
shrink their key-ranges so that they begin with id succ.
If the departure of aold causes aold’s neighborhood to
have fewer than k members, two adjacent neighborhoods
must be merged. Let Hold and Hpred be aold’s and apred’s
neighborhoods, respectively. If |Hold| < k, then the agent
in Hold whose predecessor is in Hpred sends a merge re-
quest to its predecessor. That merge request is then for-
warded to all agents in Hpred. If |Hpred| ≤ k + 1 then both
neighborhoods merge to form a single neighborhood. Oth-
2(|Hpred| − |Hold|) agents of neigh-
erwise, the rightmost 1
borhood Hpred join neighborhood Hold. The key-ranges
of the new neighborhoods are the unions of the identiﬁer
ranges of the agents in the new neighborhoods.
Figure 3 illustrates an agent leave operation that requires
a key-range merge. Here, the departure of agent 15 from the
ring leaves fewer than k = 2 agents in its neighborhood.
Agent 16 therefore merges with its predecessor neighbor-
hood; agents in both neighborhoods extend their key-ranges
to include the identiﬁer ranges of all agents in the new
neighborhood.
Whenever an agent’s key-range shrinks due to any of the
above operations, it must transfer any state associated with
keys not in its new range to other key-holders. Similarly,
whenever its key-range grows, it receives state associated
with new keys from the agents who previously occupied that
range. On average, k/2 agents must join or leave a neigh-
borhood before that neighborhood will need to be split or
merged. Thus, by initializing k to a large constant, the fre-
quency of these state transfer operations can be reduced.
4.2. Agent Local State
In addition to routing messages, each agent in a Penny
network plays three different roles: It acts as a server when
sharing objects, it acts as a score-manager for agents whose
keys fall within its key-range, and it acts as a key-holder for
objects whose keys fall within its key-range. For each of
these roles, the agent maintains some internal state:
• To act as a server, an agent a maintains a list of the
identiﬁers id o, and local integrity and conﬁdentiality
labels ia(o) and ca(o) of each object o that it owns.
The agent also chooses a public key, private key pair
(Ka, ka).
• To act as a score-manager, agent a maintains a list of
∈ kr(a). These
daughter agents ad that satisfy key ad
are the agents for whom agent a is a score-manager.
For each daughter agent ad, agent a maintains a vector
of local trust values ta(cid:48)(ad) reported by the agents a(cid:48)
that have interacted with agent ad.
• To act as a key-holder, agent a maintains a list of the
identiﬁers of daughter objects o that satisfy key o ∈
kr(a). These are the objects for which agent a is a
key-holder. For each such object o, agent a maintains
319319
0
[0,14]
4
[0,14]
61
0
[0,14]
4
[23,63]
[0,14]
42
[15,63]
[0,14]
8
42
[23,63]
[0,14]
8
23
61
[15,63]
[15,63]
[15,63]
16
15
Figure 1. Agent join
0
4
[0,14]
42
[23,63]
8
42
[15,22]
15
16
23
61
23
[23,63]
[15,22]
[15,22]
16
15
0
4
[0,14]
8
[23,63]
[15,22]
16
23
61
Figure 2. Message propagation
0
[0,14]
4
[23,63]
[0,14]
0
[0,22]
61
[23,63]
[0,22]
15
4
42
[23,63]
[0,14]
8
42
[23,63]
[0,22]
8
[23,63]
[15,22]
[15,22]
15
23
16
23
[23,63]
[0,22]
16
Figure 3. Agent leave
320320
a vector of integrity labels ia(cid:48)(o) and conﬁdentiality
labels ca(cid:48)(o) reported by the agents a(cid:48) that have re-
ported feedback about object o. Agent a also main-
tains a list of the keys key svr and public keys Ksvr of
agents that serve object o. Key-holders do not learn the
actual identiﬁers of agents a(cid:48) or asvr , only their keys.
4.3. Publishing and Downloading Objects
Once a Penny network has been initialized, agents inter-
act according to the protocol detailed below. The protocol
diagrams that follow use solid arrows to denote messages
that are sent directly from agent to agent without using the
P2P overlay, and dashed arrows for messages that use the
P2P overlay to ﬁnd the message target based on its ring
identiﬁer. Dashed arrows therefore actually entail sending
O(log N +k) total messages, where the ﬁrst O(log N) mes-
sages are sent in series along the ring and the last O(k) mes-
sages are sent in parallel to the other agents in the receiving
agent’s neighborhood (see §4.1 for an example). Arrows
with double-heads could be sent anonymously—e.g., via an
anonymizing tunnel [22, 23]. Notation Ka denotes agent
a’s public key, and (cid:104). . .(cid:105)K denotes a message encrypted
with key K. Notation ∆tsvr (a) denotes feedback provided
by agent asvr after a particular (possibly anonymous) trans-
action with agent a. Such feedback is a boolean value indi-
cating whether the transaction was acceptable.
When an agent asvr wishes to share an object o, it must
ﬁrst publish that object according to the protocol depicted
in Fig. 4. Agent asvr ﬁrst obtains (possibly anonymously)
the public keys of all key-holders akh for object o.
(Re-
call that score-managers for object o are deﬁned as those
agents whose key-ranges include key o.) Agent asvr next
encrypts the object identiﬁer, local integrity and conﬁden-
tiality labels, and its own public key, with each of the key-
holders’ public keys. It asks one of its own score-managers
asm to forward the encrypted messages to the key-holders
akh. (Recall that score-managers for agent asvr are deﬁned
as those agents whose key-ranges include key svr .) Agent
asm conceals agent asvr ’s identity by sending only its key
to the key-holder rather than its identiﬁer, along with global
trust value tsvr (computed via Equation 3).
Each key-holder then updates its local integrity and con-
ﬁdentiality labels for o according to the formulas
(cid:80)
(cid:80)
a∈A(ta · ia(o))
(cid:80)
(cid:80)
a∈A(ta · ca(o))
a∈A ta
a∈A ta
ikh(o) :=
ckh(o) :=
(4)
(5)
where A is the set of agents (including asvr ) from whom
key-holder akh has received a local integrity and conﬁden-
tiality labels for object o. Note that key-holders will not
321321
generally know the identiﬁers of agents in set A; they will
only know their keys, which is enough information to obtain
trust value ta from each agent’s score-managers.
To request an object (Fig. 5), requester areq ﬁrst sends
the requested object’s identiﬁer to all key-holders akh for
the object. Each key-holder responds with the object’s in-
tegrity label, the object’s conﬁdentiality label, and a list of
the keys and public keys of the servers who offer the object.
Agent areq can then obtain the object from any server asvr
by sending a request to all score-managers for agent asvr . In
the request message, the identiﬁer for the requested object is
encrypted with the server’s public key to avoid disclosing it
to the agent score-managers. The score-managers forward
the request to the server. The server can then anonymously
send the data directly to the requester. Once the transfer is
complete, the requester may report feedback on the transac-
tion to agent asvr ’s score-managers. The requester can also
report feedback on the integrity and conﬁdentiality of the
data it received by following the publish protocol (Fig. 4).
(An obvious simpliﬁcation of the publish protocol can also
be used to report feedback without publishing the object.)
Score-managers maintain a vector of local trust values