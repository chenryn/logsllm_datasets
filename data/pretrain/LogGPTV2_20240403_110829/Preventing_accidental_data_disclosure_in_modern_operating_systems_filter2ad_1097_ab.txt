OSes, because they 1) distinguish applications as security
principals, and 2) provide modular applications to perform
larger user tasks. We note that the data intermediary prob-
lem has always been present in operating systems; however,
it made little sense to discuss when all user applications ran
with the user’s ambient authority.
For the purposes of this paper, we focus on the data inter-
mediary problem with respect to accidental data disclosure
that results from user selection. We leave the much harder
threat model of a malicious application as the motivation for
future work. However, we note that the primitives described
in this paper can form the basis of a system to defend against
this stronger adversary.
2.3 Threat Model
While our work is motivated by data security compliance
regulations, we do not focus on the speciﬁc compliance rules
themselves. Instead, we seek to address the broader chal-
lenge of creating mechanisms that help prevent the acci-
dental disclosure portion of the data intermediary problem.
We are speciﬁcally concerned with preventing the acciden-
tal export of large, application-speciﬁc, user data. There are
potentially many data owners with di↵erent secrecy require-
ments. Therefore, an application may be both a data owner
and a data intermediary, depending on the policy perspec-
tive, and each data owner’s secrecy requirements must be
met, even if doing so prevents data from being used.
Accidental data disclosure may occur in various ways. The
user may share data with the wrong application (e.g., shar-
ing a photo of whiteboard meeting notes via a social net-
working app). Such data export may not comply with the
owner’s policy, but may still occur through the user’s in-
teraction. Poorly programmed applications may also un-
knowingly leak private data to the cloud. For example, a
document editor might backup documents to the cloud, and
an app might send data as part of targeted advertisements.
The work in this paper does not seek to prevent malicious
data disclosure. That is, we do not address side channels
or collusion between applications. We also do not consider
malicious daemons that operate outside our conﬁnement.
Finally, we are speciﬁcally concerned with data on the host
and do not address exposure of data from cloud services once
it is allowed to leave the host.
2.4 Background: Android
Android runs a Linux kernel, but deﬁnes its own appli-
cation runtime environment. The Java-based middleware
API forces developers to design their applications within
a component framework. Android deﬁnes four component
Workﬂow Policy
Set Policy
B
A
D
C
E
F
i
g
n
k
c
a
r
T
Background 
Functionality
Set Policy
Workﬂow Policy
W
X
Y
Z
Figure 2: Aquifer policy abstraction
types: activity, service, content provider, and broadcast re-
ceiver. Activity components deﬁne the application’s user
interface. Each UI screen is deﬁned by a di↵erent activ-
ity component. The other components types run in the
background and are started by the Android middleware as
needed. These component types provide daemon-like func-
tionality. Service components are general purpose daemons;
content provider components act as database daemons, and
broadcast receiver components listen for messages.
Android’s binder framework provides process control and
IPC between components. Applications generally do not
interact with binder directly. Instead, they use intent mes-
sages, which start activity and service components, and send
messages to broadcast receiver components. The key at-
tribute of intent messages is their ability to be sent to im-
plicit addresses. For this, Android uses action strings, such
as ACTION_VIEW and ACTION_SEND. Applications deﬁne intent
ﬁlters to register to receive messages addressed to speciﬁc
action strings. The Android framework then automatically
determines potential intent message destinations (i.e.
re-
solves the intent), presenting the user with a list of targets
if a single destination must be chosen from a set.
3. OVERVIEW
Aquifer is designed around the concept of a user interface
workﬂow. As previously discussed, an emergent property of
modern OS applications is that they are relatively simple,
purpose or service speciﬁc, and often combined with other
apps to perform a larger task. When the user performs
a task, the execution transitions between UI screens. The
next UI screen can be in the same or di↵erent application.
Aquifer tracks the speciﬁc instances of the UI screens used to
perform the user’s task and abstracts them as a UI workﬂow.
Security policy is applied to the UI workﬂow abstraction,
as shown in Figure 2. We choose the UI workﬂow abstraction
to deﬁne security policy, because it approximates the task
at hand. All operations performed as part of this task will
have similar security requirements. Frequently, the task will
be centered around a single data object and its derivative
objects, as demonstrated in the document signing use case.
Note that UI workﬂows are not necessarily linear. They
are dynamically deﬁned as the user navigates functionality
on the host. This includes branches to perform subtasks.
For example, a user interacting with a shopping applica-
tion may navigate to a barcode scanner to retrieve the UPC
code of a product via a camera. When this branch returns,
the user continues the task. As shown in Figure 2, Aquifer
1031App 1
App 2
App 3
Applications
Aquifer
API
Aquifer
System
Activity
Manager
Android
Framework
Aquifer Kernel
Module
File System
Kernel
Figure 3: Aquifer architecture for Android
allows applications on the branch to contribute to secrecy
restrictions (e.g., UI screen D).
Figure 3 depicts the Aquifer architecture for Android.
Aquifer provides an API for applications to manage pol-
icy. This policy is enforced by the Aquifer System, which
places hooks into Android’s Activity Manager service. Fi-
nally, Aquifer has a small kernel component to monitor ﬁle
communication.
Aquifer is built around the following principles:
Decentralized policy speciﬁcation: Modern OSes in-
creasingly contain application-speciﬁc data. Therefore OS
providers cannot practically deﬁne security policy. Instead,
Aquifer uses the multiple-owner policy semantics of decen-
tralized information ﬂow control (DIFC) [27]. Since each ap-
plication is a potential stakeholder on data, DIFC provides
a well-founded notion of data ownership and an articulation
in each context of what each principal is trusted to do with
that data.
Developers & Users deﬁne policy: The developers of
applications that own data can frequently identify security
sensitive data. Aquifer then infers user intention from the
UI workﬂow. While this reduces the burden on the user,
it does not entirely eliminate it. Sometimes the application
must distinguish between conﬁdential and public data. This
context can frequently be acquired via preliminary labeling,
which ranges by application. For example, the Email app
in our use case could determine secrecy requirements from
an Email header set by the sender. Applications such as
note apps (e.g., Evernote) already have semantic tags on
data (e.g., business, personal) that can be leveraged. User
data labeling has been shown to be useful for specifying
policy [23]. In other cases (e.g., DocuSign), the policy spec-
iﬁcation is inherent to the functionality of the app.
Compatibility with legacy applications: Aquifer fo-
cuses protection on large, application-speciﬁc, data objects.
Applications frequently process these data objects locally.
This allows Aquifer to be compatible with most legacy appli-
cations and only requires modiﬁcations of applications that
must specify policy (i.e., data owners). If no secrecy restric-
tions are speciﬁed, Aquifer uses a default-allow policy.
Minimizing policy violations: Policy violations confuse
users by either prompting the user to make security deci-
sions, or breaking functionality. Aquifer helps minimize pol-
icy violations by allowing applications to inﬂuence the func-
tionality available to users. For example, Android uses “ac-
tion strings”(e.g., ACTION_SEND, ACTION_VIEW, ACTION_EDIT)
that help the OS ﬁnd an appropriate consumer for shared
data. When Android ﬁnds multiple possible recipients, the
user is presented a list of targets from which to choose. Sim-
ilar functionality is provided by Windows 8’s share charm.
If the user chooses a target application that attempts to ex-
port data, and the UI workﬂow export restriction denies the
app to use the network, a security exception will result. Of-
ten, this will break the functionality of the app, resulting in
a poor user experience. Therefore, to prevent such scenarios
from even occurring, Aquifer allows a data owner to specify
a UI workﬂow ﬁlter that limits the potential targets.
Compatibility with background functionality: UI screens
may communicate with daemons (e.g., service and content
provider components in Android). If interaction with a dae-
mon passes sensitive data between two UI workﬂows, e.g.,
between screens C and Y in Figure 2, Aquifer must propa-
gate the policy restrictions to the receiving workﬂow. How-
ever, Aquifer cannot simply propagate the workﬂow security
policy to the daemon process, as this would cause the dae-
mon and subsequent UI workﬂows to be restricted by all
previous UI workﬂow policies. Ultimately this would result
in an unusable system. Therefore, Aquifer requires a more
precise method of tracking information within daemons. For
this, Aquifer could leverage systems such as TaintDroid [13]
and CleanOS [37]. However, the primary focus of this paper
is the ability to specify and enforce security policies with
respect to the UI workﬂow. Therefore, for our prototype
implementation, we use a lighter weight heuristic based on
tracking ﬁle descriptors used by daemons (see Section 5.3).
4. AQUIFER POLICY
A key challenge of Aquifer is deﬁning the appropriate pol-
icy semantics for addressing the data intermediary problem
in modern OSes. We ﬁrst motivate the security policy types
supported by Aquifer and then formally deﬁne the logic.
4.1 Policy Types
The primary concern of Aquifer is accidental export of
high-value, application-speciﬁc user data. Therefore, our se-
crecy restrictions are deﬁned with respect to export control.
Export restrictions allow any functionality on the host, but
prevent leakage to remote parties that are not mediated by
the framework. As mentioned in Section 3, Aquifer uses a
default-allow policy to ensure compatibility with legacy ap-
plications processing unconstrained data objects. However,
the policy becomes default-deny if restrictions are present.
Based on a manual survey of Android applications, we
identiﬁed the need for the following secrecy restrictions.
Export Restrictions: The most basic type of secrecy re-
striction is a whitelist of applications that are allowed to
send data o↵ the device. Frequently, the whitelist contains
only the application that speciﬁes the export restriction.
For example, in the document signing use case in Section 2,
the Email app wishes to ensure that only it can send con-
tract.doc and derivative ﬁles o↵ the host. We allow an
application to specify a list to support suites of applications
or lists of known trusted applications.
Required Restrictions: The second type of secrecy re-
striction is motivated by copies of ﬁles left on persistent
storage. Required restrictions ensure that cached copies of
ﬁles cannot be later exported without the knowledge of the
data owner.
In our document signing use case, DocuSign
may wish to protect the handwritten signature of Alice by
ensuring that a ﬁle containing the signature can only be sent
o↵ the device when DocuSign participates in the workﬂow.
Since DocuSign is the trusted authority for handwritten sig-
nature data, it trusts itself to ensure user approval for using
1032a workﬂow that involves sending a signed document o↵ the
host. Required restrictions are particularly useful for appli-
cations that provide a UI for the user to choose and return
a speciﬁc ﬁle. Finally, while it is likely that applications will
only specify a single required restriction, Aquifer allows a
list. We currently require all applications on the list to be
present on the workﬂow. In the future, we will explore the
usefulness of “k of” policies.
Filters: A direct consequence of enforcement of export re-
strictions is access control violations, and Aquifer attempts
to reduce these violations through workﬂow ﬁlters. Aquifer
allows applications to deﬁne these UI workﬂow ﬁlters specif-
ically to enhance usability.
In the case of Android, ﬁlters
limit the results of intent resolution shown to the user. Sim-
ilar ﬁlters can be constructed for Windows 8’s share charm.
4.2 Policy Logic
Aquifer formalizes the export, required, and ﬁlter policy
types into a logic. Our logic is motivated by the decentral-
ized label model (DLM) [27]. We chose DLM over other
DIFC logics [41, 47, 48, 25, 24, 36] due to its clear owner
semantics in the policy label. We extend DLM by replacing
the set of readers with a tuple containing our export, re-
quired, and ﬁlter restrictions. Note that Aquifer uses DIFC
to control data export and not interaction between apps.
Aquifer uses applications as security principals. We chose
applications over UI screens, because the ﬁne granularity of
UI screens would be cumbersome to specify and manage.