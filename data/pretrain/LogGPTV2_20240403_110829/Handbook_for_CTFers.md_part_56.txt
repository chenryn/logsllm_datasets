else
// Enter this conditional branch.
victin->fd_nextsize = fvd;
victim->bk_nextaize = fwd->bk_nextsize;
fvd- >bk_nextsize = victin;
---
## Page 497
4$4
6PWN
v1ctin- >bk_nextsize->fd_nextsize = victim;
bck = fwd->bk;
/ / bck is another address to be written to.
else
victim->fd_nextsize = victin->bk_nextsize = victim;
The heap manager inserts the new Large Bin into the double-linked list according
to the constructed memory structure information.
victim- >bk_nextsize = fvd- >bk_nextsize;
v1ctim- >fd_nexts1ze = fvd;
fwd- >bk_nextsize = victim;
victim->bk_nextsize->fd_nextsize = victim;
where fwd is a modified Large Bin with the following structural information.
TE0000000000000X00000000000000000X0:09009X0
0x603380:0x000000000000000o 0x00o07fffffffe3d8
0x603370 :
0000000000000000X0
0xo0oo7fffffffe3e0
When executing the code:
victim->bk_nextsize->fd_nextsize = victim;
After that, the address of victim is written at 0x00007ffffe3d8+0x20.
In the following operation:
victim->bk = bck;
victim->fd = fvd;
fwd- >bk = victim;
bck->fd = victim;
The address of victim is also written at the Ox10 offset of bck.
In summary, the Large Bin Attack can be used to write two heap addresses to any
address. You can see 0CTF 2018s heapstormll. The expected solution to this
challenge is to use Large Bin Attack to construct a chunk at a given address and
insert the chunk into the Unsorted Bin, making it possible to obtain the target
memory directly when requesting memory.
6.6.3.6  Make Life Easier: tcache
Ptmalloc2 introduces the tcache mechanism in Glibc 2.26, which greatly improves
heap manager performance, but also introduces more security risks. Tcache is single-
linked list structure that uses the tcache_put and tcache_get functions to remove and
insert from the list.
---
## Page 498
6.6 Heap
485
typedef struct tcache_entry 
}tcache_entry:
struct tcache_entry *next ;
tcache_put (mchunkptr chunk, size_t tc_idx) {
static void
tcache_entry *e = (tcache_entzy *) chunk2mem (chunk) ;
assert (tc_idx next = tcache- >entries [tc_idx] ;
tcache->entries [tc_idx] = e;
++ (tcache->counts [tc_idx] } ;
/ / Caller must ensure that ve know tc_idx is valid and there's available
static void *tcache_get (size_t tc_idx) {
chunks to remove
tcache_entzy *e = tcache->entries [tc_idx] ;
assert (tc_idx entries [tc_idx] = e->next ;
assert (tcache->entries [tc_idx] > 0) ;
-- tcache->counts [tc_idx] 〕 ;
return (void *) e;
Different sized chunks use different lists, each with a cache size of 7. If the size of
the tcache list is longer than 7, it is handled in the same way as the previous version
of ptmalloc. So once the tcache cache is filled up, you can take advantage of the
shortcomings of the previous version.
The structure of tcache is similar to fastbin, but without fastbin's double free
checks or fastbin's checks on chunk size, making it simpler to exploit.
6.6.3.7 Tcache for Glibc 2.29
In Glibc 2.29, the key variable is added to the tcache struct, the key is cleared in
tcache_get, and the key variable is set in tcache_put.
typedef struct tcache_entry ↑
struct tcache_perthread_struct +key:  // This field exists to detect
struct tcache_entry *next ;
double frees
J tcache_entry:
static__always_inline void tcache_put (mchunkptr chunk, size_t
tc_idx) (
tcache_entzy *e = (tcache_entry *) chunlk2mem (chunk) ;
// Mark this chunk as "in the tcache" so the test in _int_free wi11
assert (tc_idx key = tcache;
e ->next = tcache ->entries [tc_idx] ;
---
## Page 499
486
6PWN
tcache- >entries [tc_idx] = e;
++ (tcache->counts [tc_idx] } ;
// Caller must ensure that ve know tc_idx ia valid and there′ s available
static _alvays_inline void *tcache_get (size_t tc_idx) (
chunks to remove
tcache_entzy *e = tcache->entries [tc_idx] ;
assert (tcache->counts [tc_idx] > 0) ;
assert (tc_idx entzies [tc_idx] = e->next ;
-- (tcache->counts [tc_1dx]) ;
return (void *) e;
e ->key = NULL;
This key can be used to prevent direct Double Free, but it is not a random number,
it is the address of the tcache.
size_t tc_idx = csize2tidx (size) ;
if (tcache ! = NULL s& tc_idx  chance) , so verify it 's not an
coincidence before aborting. */
if (glibc_unlikely (e->key == tcache) ) 
tcache_entry *tmp;
LIBC_PRoBE (memozy_tcache_double_free, 2, e, tc_idx) ;
fox (tmp = tcache->entzies [tc_idx] ; tmp: tmp = tmp->next)
f (tmp == e)
/+ If we get here, it was a coincidence. He've wasted a few cycles, but
mal1oc_printerr (*free () : double free detected in tcache 2*) :
/  *xoqe 2,uop
if (tcache->counts [tc_idx] . - /rootfs.cpio
to repackaging and compression. This allows you to transfer files with the challenge
environment by modifying the file system.
6.7.4Initialization Seripts
In the file system, the init file in the root directoey is typically the system’s startup
script. Example.
#1/bin/sh
mount -t proc none /proc
mount -t syafs none /sys
mount -t devtmpfs devtmpfs /dev
chown root :root flag
tosuoo/aap/>0 oaxa
6e oo+ pouo
exec 2>/dev/console
exec 1>/dev/console
1nsmod /1ib/modu1es/4 . 4 . 72/babydzivez. ko
chmod 777 /dev/babydev
echo -e "\,n8oot took $ (cut -d*  -f1 /pzoc/uptime) seconds\n"
setsid cttyhack setuidgid 1000 sh
umount /proc
powezoff -d o -f
umount /sya
The following information can be obtained.
•The challenge is for an attacker to attack the babydriver.ko driver, so the next step
is to reverse-analyze the file.
• After booting the kermel, you will only have normal user privilege, because the
script executes the command *setsid cttyhack setuidgid 1000 sh" in the init script
and you can get root privilege by commenting that line.
Note that it is useless to have root privilege in the local testing environment. The
remote server of the challenge generally provides normal user privileges, and after
the successful local testing of the exploit, you can get the flags from the remote
 oon  o ox   pue Sn e s
---
## Page 503
490
6PWN
6.7.5 Kernel Debugging
GDB can also be used as a Linux kernel debugger, just like a regular PWN. Adding
the “-s” parameter to the end of the Qemu boot parameter starts a gdbserver that
listens on the local port 1234 for the kernel debugger to debug. Altematively,
vmLinux (kermel binary) files can be obtained from bzImage for GDB debugging.
$ /usr/src/linux-headers-$ (unane -x) /seript/extract-vmlinux bzImage
> vml1nux
Debug symbols are usually removed from CTF kemel PWNs, and this challenge
is no exception. For this kind of driver challenge, you can do the reverse, debugging
with the symbols by thinking differently. As long as the kernel version is not too low,
ddebs.ubuntu.com/ geting the coresponding version of vmLinux with debug sym-
you can usually download an identical version of the Ubuntu kernel. From http://
bols and replacing the bzmage of the challenge, you can use the kermel with symbols
to reverse and debug more easily.
In addition, in the new version of the kermel, the actual address may deviate from
the address in the kemel ELF, which may cause the GDB to fail to recognize
symbols, which can be avoided by moxdifying Qemu’s startup parameters by adding
“nokaslr'. The full startup parameters are.
append *conaole=ttyS0 root=/dev/ran oops=panic panic=1 nokaslr
This way, when the kemel starts, the actual address matches the address in binary.
But for kermels that don’t have access to symbols, how do we set breakpoints?
The symbolic address can be obtained from °/proc/kallsyms* after kernel startup.
# cat /proc/ka11syms |grep baby
ffffffffcooo24do b babydev_struct [babydriver]
ffffffffcooooooo t babyrelease [babydriver]
ffffffffcooooo8o t babyioctl
ffffffffcooooofo t babywrite
[babydr1ver]
[babydriver]
ffffffffc0002440 b babydev_no [babydriver]
6.7.6Analyzing the Program
 u dod u ssnq on uop  s suond snond o 
attacking the kemel is difficult, and may find it dificult to analyze the kemel binary.
Normally, because of the limited time available for the game, it is almost impossible
to completely reverse the entire kernel, so the main task is to find the driver-type
---
## Page 504
6.7 Linux Kermel PWN
491
vulnerabilities. As in this challenge, a custom driver is dynamically loaded in the init
script via insmod, so it is easy to think that the vulnerability should be in that driver.
In the real world of kernel vulnerability mining, where the source code can be
viewed, the difficulty of reversing is reduced.
In this case, the babydriver.ko driver was found in the file system and then
reverse-engineered using IDA. The amount of code is small and the vulnerabilities
are easy to find.
int babyopen (struct inode *inode, struct file *filp) ↑
babydev_struct .buf = kmem_cache_alloc_trace (kma11oc_caches [6] ,
37748928, 64) ;
babydev_struct .1en = 64 ;
printk (*device open\n*) ;
return 0;
Every time the “°open(/dev/babydev)” statement is executed at the user level, the
kermel-state babyopen function is called. Each call to this function assigns a value to
the same babydev_struct variable. However, if the device is opened twice and then
one of the file pointers is released, but the babydev_struct.buf pointer in the other file
pointer is not set to zero and the pointer is still available, a UAF vulnerability is
triggered.
The pseudo-code that triggers this vulnerability is.
( *μAap/qeq/nap/α) uado = tg
f2 = open (#/dev/babydev, 2)
close (f1) ;
6.7.7ExploitationofVulnerabilities
In a user-state binary PWN, the ultimate goal is to start the shell by executing system
or execve, but in a kernel PWN, the ultimate goal is to escalate privilege. This
requires some understanding of the Linux kermel’s mechanisms. Older versions of
the Linux kemel had a thread_info structure.
stzuct thread_info {
struct task_struct *task;
_u32 flage;
/* main task structure */
1smaeas zen
/* 1ov level flags */
u32 cpu;
/+ thread symchronous flags */
/+ current CPU */
mm_segment_t addr_linit;
unsigned int sig_on_uaccess_error :1;
unsigned int uaccess_err:1;
/* uaccess failed */
---
## Page 505
492
6PWN
In this structure, there is a pointer to another task_struct structure.
struct task_struct {
/* objective and real subjective task credentials (con) +/
/* effective (overridable) subjective task credentials (cow) +/
const stzuct cred_
_rcu *real_cred;
const stzuct cred __rcu *cred;
The cred structure is used to store permission-related information.
struct cred {
atomic_t usage;
#ifdef CONFIG_DEBUG_CREDENTIALS
atomic_t subscribers;
void *put_addr;
/ * nunber of processes subscribed */
#define CRED_HAGIC
unsigned magic;
#define CRED_HAGIC_DEAD 0x44656144
0x43736564
#endif
kuid_t uid;
/ real GID of the task
// real UID of the task
kgid_t gid;
kuid_t suid;
/ saved UID of the task
kgid_t sgid;
// effective UID of the task
// saved GID of the task
kuid_t euid;
kgid_t egid;
// effective GID of the task
kuid_t fsuid;
// GID for vs ops
sdo s&A xog αIn //
kgid_t fsgid;
unsigned securebits;
kernel_cap_t cap_inheritable;
// suID-less security management
kerne1_cap_t 
/ caps our children can inherit
kerne1_cap_t 
 / caps we 're permitted
kerne1_cap_t
cap_effective;
// caps we can actually use
kernel_cap_t cap_anbient;
cap_bset;
// capability bounding set
// Ambient capability set
#ifdef CONFIG_KEYS
unsigned char jit_keyring;
// default keyring to attach requested
keys to
struct key
_rcu *session_keyring;
// keyring private to this process
// keyring inherited over fork