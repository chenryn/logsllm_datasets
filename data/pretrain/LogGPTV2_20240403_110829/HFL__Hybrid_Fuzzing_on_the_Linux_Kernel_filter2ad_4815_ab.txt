Calling Sequence
Inference
(§III-C)
×
×
×
×
×
×
×
✓
✓
×
✓(§IV-C)
Nested Syscall
Argument Retrieval
(§III-D)
×
×
×
×
×
×
×
×
×
✓
✓(§IV-D)
TABLE I: The comparison of recent kernel fuzzing techniques.
Kernel-specific Requirements
General Requirements
State Explo-
sion Free
Coverage
Guided
Handling Strict
Branch Condition
(Naive hybrid fuzzing)
Handling Indirect-
Control Flow
(§III-B)
✓
✓
✓
✓
✓
✓
×
✓
✓
✓
✓
×
×
✓
×
✓
✓
×
×
✓
×
✓
×
×
×
×
×
×
✓
×
×
△
✓(§IV-A)
×
×
×
×
×
×
×
×
×
×
✓(§IV-B)
in object-oriented programming languages, such as C++ and
Java, and Linux accommodates such a concept by using a
function pointer table in the C language. More specifically,
Linux typically constructs a function pointer table (i.e., an
abstract interface), which contains a list of function pointers
pointing to concrete implementation. When the kernel performs
a specific operation at runtime, it fetches a corresponding
function pointer by indexing the table. Such a use of a function
pointer table, which are heavily occurring in Linux kernel
implementation, severely hinders traditional testing schemes
from extending code coverage.
Example 1: Indirect Control-Flow in RDMA/AUTOFS.
The example shown in Figure 1 illustrates a case of having an
indirect control transfer caused by using a function pointer table
in the driver, where data communication over Remote Direct
Memory Access (RDMA) network is managed/operated. In this
example, ucma_write() uses a function pointer table, namely
ucma_table, by indexing the table with the header information
of data, controlled by user-level input, char __user *buf.
The function table, ucma_table, holds an array of function
pointers (lines 1-8), where each function pointer implements
a specific functionality of network communication, such as
connect and bind. The functions assigned in the array are
indirectly invoked at line 16. In particular, a value from
userspace, hdr.cmd (copied from buf) serves as an index
to the function table. Depending on the index value, different
functions will be executed from the table. Autofs is another case
in point, a service program for automatically mounting various
file systems. In Figure 2, autofs_ioctl acts as a dispatcher,
which invokes various underlying control functions, using a
function pointer table _ioctls. In a similar way, cmd derived
from the userspace implicitly affects the following control-flow
transfer via an indirect function call.
Although it may be easy to manually understand this code
snippet, automatically exploring such a control transfer is
challenging for conventional testing techniques. In the case
of traditional fuzzing, it has to correctly guess all the array
index values to explore all target functions stored in a function
pointer table. However, matching such concrete index values
based on random mutation would be like finding a needle in a
haystack because the probability of hitting the correct index
value by a chance is extremely low (e.g., 23 correct function
indices among 232 possible values).
char __user *inbuf, int in_len, int out_len) = {
[RDMA_CREATE_ID]
[RDMA_DESTROY_ID]
[RDMA_BIND_IP]
...
[RDMA_JOIN_MCAST]
= ucma_create_id,
= ucma_destroy_id,
= ucma_bind_ip,
= ucma_join_multicast
1 ssize_t (*ucma_table[])(struct ucma_file *file,
2
3
4
5
6
7
8 };
9 ssize_t ucma_write(struct file *filp, char __user *buf,
10
11
12
13
14
15
16
17 }
Fig. 1: A simplified example with respect to indirect control-flow.
size_t len, loff_t *pos) {
struct rdma_ucm_cmd_hdr hdr;
...
if (copy_from_user(&hdr, buf, sizeof(hdr)))
...
// indirect function invocation
ret = ucma_table[hdr.cmd](file, buf + sizeof(hdr), hdr.in, hdr.out);
In the case of symbolic execution, if it is capable of
a symbolic pointer dereference [10], in theory, it does not
suffer from exploring such a case. Specifically, when it faces
a symbolic dereference accessing the function pointer table
(e.g., func_ptr[symbol]() in Figure 1), it can symbolically
dereference a value pointed by a function pointer (i.e., retrieve
a function pointer within a function pointer table). However,
allowing such a symbolic dereference would suffer from
state explosion issues. This is because a symbolic execution
technique is not aware of whether a dereference operation is
fetching from the code or data pointer, so it attempts to perform
the symbolic dereference for all dereference cases (including
dereferences for both function pointer table and non-function
pointer table). As a result, it performs a dereference for a
non-function pointer table as well, which is unlikely increasing
the code coverage. Thus, it would introduce a huge number
of trials (i.e., attempting to dereference using all indices of
non-function pointer table) and each trial requires new path
exploration, resulting in state explosion issues.
In order to address this issue, HFL transforms such a
function pointer table dereference into a more explicit form of
control-flow transfer. So HFL instructs the symbolic execution
engine to prioritize on cases dereferencing function pointer
table and de-prioritize non-function pointer cases.
4
autofs_ioctl_version,
autofs_ioctl_protover,
autofs_ioctl_protosubver,
...
autofs_ioctl_ismountpoint,
1 static int autofs_ioctl(unsigned int cmd,
struct autofs_dev_ioctl __user *user) {
2
static ioctl_fn _ioctls[] = {
3
4
5
6
7
8
9
10
11
12
13
14
15
16 }
Fig. 2: A code snippet of an indirect function call through a function
pointer table.
};
unsigned int idx = cmd_idx(cmd);
...
fn = _ioctls[idx];
...
// indirect function invocation
fn(fp, sbi, param);
Fig. 3: The requirement for consistent kernel state.
C. Internal System States
Challenge 2: Coordinating Internal System States. A kernel
maintains internal system states to manage computing resources.
In particular, it keeps track of per-process contexts (i.e., virtual
memory, file descriptors, etc.) or manages peripheral devices to
enable shared accesses to those. Most of these internal system
states are transitioned mainly through a syscall, because a
syscall is a key interface that the kernel accepts the commands
from the user space. Since this syscall and the system states
are highly correlated, if a syscall is invoked without setting up
the system states properly, the syscall would be simply rejected
by the kernel.
For this reason, traditional fuzzing is limited in handling
the kernel as it cannot cater this internal system state well.
More specifically, because it randomly constructs a syscall, it
cannot figure out intricate rules behind syscalls to properly
setup internal system states — how to order multiple syscalls,
parameter dependencies between those.
Concolic execution3 does not work well either. As men-
tioned before, an important decision in performing concolic
execution is to minimize the number of symbolized data
variables, otherwise it would suffer from state explosion issues.
However, there are a huge number of such data variables in
3This paper uses symbolic execution and concolic execution interchangeably.
5
the kernel (virtually all global/heap variables may look-alike
related to system states).
As we will explain later, HFL addresses this issue through
performing points-to analysis, which guides our concolic
execution to selectively symbolize data variables per-syscall,
rendering HFL’s concolic execution interpret internal system
states well.
Example 2-1: Obvious Syscall Sequence. In order to provide
file system access, the kernel maintains a file descriptor per file
where its state can be shortly defined as { opened, closed }.
Specifically, in response to open syscall, a new file descriptor is
returned where its kernel internal state is initialized as opened.
Then following read/write syscalls are only working if the
state of the file descriptor (specified within read/write syscalls)
is opened. Therefore, read/write syscalls should be invoked only
after the open syscall. Otherwise, read/write syscalls would
immediately return an error, limiting the further code coverage
exploration.
We observe that kernel imposes much more complex syscall
orders than this simple example. They often accompany internal
argument types behind syscall interface, which are implicit in
system call definition, as follows.
Example 2-2. Complex Syscall Sequence in DRM. Direct
Rendering Manager (DRM) is responsible for managing graphic
devices and memory in the Linux system. Figure 3 illustrates a
simplified example of ioctl syscall dependency in the DRM
driver. In the example, if the cmd value is DRM_ALLOC, the
kernel executes drm_alloc. It initializes ID, which in turn
returns back to the user program through the ID field (line 24).
This initialized ID value will be the anchor for the next syscall
accessing DRM devices, in which the ID value refers to the
previously DRM_ALLOC-ed DRM device. One of such follow-up
use cases is using the cmd value as DRM_BIND. In this case,
the kernel executes drm_bind and the ID value is passed to
check for consistency (line 32).
To enhance the coverage in the example, we should consider
two basic conditions. First, we maintain the calling order of
syscalls (i.e., invoking two ioctls where the first is using
cmd DRM_ALLOC and the second is using cmd DRM_BIND).
Next, when invoking these two syscalls, the syscall parameter
dependency should be kept as well. In other words, the ID field
specified through the arg parameter should be propagated—
when invoking cmd DRM_BIND, its ID field should be using the
ID value returned from cmd DRM_ALLOC.
A recent study, IMF [24] attempts to infer kernel system
internals by modeling system call sequence. Given syscall
traces and argument/return types, it implicitly models internal
system by tracking value-flows across syscall arguments and
returns. However, because of its limited analysis scope to user-
domain, IMF is unable to reason about dependencies within
the kernel (e.g., idr->id), and fails to track the flows of the
arguments whose types are invisible in user space (e.g., struct
d_alloc). Such an approach specific to user-domain makes
the inference of kernel state incomplete, thus hinders deeper
kernel code exploration in the end.
Moonshine [33] constructs dependency pairs through static
analysis, and learns internal state dependencies. However, since
it only relies on points-to analysis, its acquired knowledge is
1. fd= open (“/dev/dev1”, …)2. ioctl(fd, DRM_ALLOC, {struct d_alloc})3. ioctl(fd, DRM_BIND, {struct d_bind})10. void ioctl(fd, cmd, arg) {11.    switch (cmd) {12.      case DRM_ALLOC: drm_alloc(arg1);13.      case DRM_BIND: drm_bind(arg2);14.      …   15. } struct d_alloc{ s32 a; s32 ID; s32 b; }struct d_bind{ s32 ID; s32 c; }20. int drm_alloc(struct d_alloc*arg1) {21.    …22.    idr->id = val;23.     ...24.    arg1->ID= idr->id;25. }W30. int drm_bind(struct d_bind*arg2) {31.    ...32.if( idr->id!= arg2->ID) 33.return -EINVAL;34.      ...35./* actual work here */36. }Ruserkernel❶first ioctl❹secondioctl❷❸store❻load// Check ID ❺limited to the dependencies between system state variables (i.e.,
variable a is aliased with another variable b, or the value of a
is derived from b). Compared to Moonshine, HFL performs
both point-to analysis and symbolic checking, so it can also
figure out precise constraints between those (i.e., variable a
should be the same as variable b, or variable a should be the
same as the addition of variable b and c), which significantly
augments code exploration capability of HFL (IV-C).
D. Nested Syscall Arguments
Challenge 3. Constructing Nested Syscall Arguments. The
kernel is designed to copy data from/to user-space, as it has to
take/return data from/to user-space to serve syscalls. This copy
operation is always performed through specific kernel APIs,
such as copy_from_user and copy_to_user, as the kernel
cannot directly access user-space memory for security reasons,
i.e., Supervisor Mode Access Prevention (SMAP) or Kernel
Page Table Isolation (KPTI). Specifically, copy_from_user
copies a block of data from user-space into a kernel buffer
while copy_to_user does so from kernel to user.
We observe that syscall arguments are often constructed as
nested structures (i.e., a field member in one structure points to
another structure), where this nested feature is being supported
by the above-mentioned copy_from_user. More importantly,
the precise layout of such nested structures can only be known
at runtime in many cases: the structure usually has a size
variable indicating the size of the next nested structure so as
to minimize the size of the to-be copied data.
To better illustrate how these nested structures are supported
by the kernel, the following is the common case how the kernel
handles a nested structure: 1) the kernel first takes a pointer
(specified as a syscall argument) pointing to a data structure A
located in the user-space; 2) the kernel dynamically allocates
the buffer (within the kernel) to hold the copy of A; 3) the
kernel copies A from user-space to this allocated buffer using
copy_from_user; 4) referring to a size parameter within A
(which indicates the size of a nested structure B), the kernel
allocates another buffer to hold the copy of B; 5) the kernel
performs another copy_from_user to copy B from user-space
to its allocated kernel buffer.
Without prior knowledge about such a nested form of
argument structures, traditional fuzzing is unable to fuzz the
entire argument structure properly as it hardly figures out
complex argument formats behind syscalls. Likewise, symbolic
execution fails to infer precise nested structure because it is only
aware of given input space explicitly symbolized; in other words,
it cannot propagate symbolizations beyond nested memory
buffers connected through pointer variables.
Example 3. Nested Syscall Arguments in USBMon. Figure 4
exhibits a simplified function proc_control, which basically
controls USB devices connected. The function, derived from
ioctl syscall, requires multi-layered memory buffers which are
initially indicated by its second argument (i.e., __user arg).
At line 9, the outer memory buffer is first copied into allocated
kernel buffer ctrl. Returned without an error, a subsequent
memory copy, pointed by a field member of the previously
copied buffer (i.e., ctrl.data), occurs with a certain size (i.e.,
ctrl.len) at line 11. Note here that without built-in knowledge
of such a nested and variable-sized form of syscall parameters,
Fig. 4: An example presenting nested syscall arguments.
Fig. 5: Overview of HFL.
the execution likely stops (at either line 9 or 11) due to invalid
memory access, before reaching its main functionality (line
14).