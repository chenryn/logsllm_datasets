        return new_compiled_filename;
    }
调用zend_string_copy最终返回文件名
再执行RESET_DOC_COMMENT();
    #define RESET_DOC_COMMENT() do { \
        if (CG(doc_comment)) { \
            zend_string_release_ex(CG(doc_comment), 0); \
            CG(doc_comment) = NULL; \
        } \
    } while (0)
zend_string_release_ex
    static zend_always_inline void zend_string_release_ex(zend_string *s, bool persistent)
    {
        if (!ZSTR_IS_INTERNED(s)) {
            if (GC_DELREF(s) == 0) {
                if (persistent) {
                    ZEND_ASSERT(GC_FLAGS(s) & IS_STR_PERSISTENT);
                    free(s);
                } else {
                    ZEND_ASSERT(!(GC_FLAGS(s) & IS_STR_PERSISTENT));
                    efree(s);
                }
            }
        }
    }
persistent是0 所以执行efree
    ZEND_API void ZEND_FASTCALL _efree(void *ptr ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC)
    {
    #if ZEND_MM_CUSTOM
        if (UNEXPECTED(AG(mm_heap)->use_custom_heap)) {
            _efree_custom(ptr ZEND_FILE_LINE_RELAY_CC ZEND_FILE_LINE_ORIG_RELAY_CC);
            return;
        }
    #endif
        zend_mm_free_heap(AG(mm_heap), ptr ZEND_FILE_LINE_RELAY_CC ZEND_FILE_LINE_ORIG_RELAY_CC);
    }
    static zend_always_inline void zend_mm_free_heap(zend_mm_heap *heap, void *ptr ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC)
    {
        size_t page_offset = ZEND_MM_ALIGNED_OFFSET(ptr, ZEND_MM_CHUNK_SIZE);
    if (UNEXPECTED(page_offset == 0)) {
        if (ptr != NULL) {
            zend_mm_free_huge(heap, ptr ZEND_FILE_LINE_RELAY_CC ZEND_FILE_LINE_ORIG_RELAY_CC);
        }
    } else {
        zend_mm_chunk *chunk = (zend_mm_chunk*)ZEND_MM_ALIGNED_BASE(ptr, ZEND_MM_CHUNK_SIZE);
        int page_num = (int)(page_offset / ZEND_MM_PAGE_SIZE);
        zend_mm_page_info info = chunk->map[page_num];
    ​    ZEND_MM_CHECK(chunk->heap == heap, "zend_mm_heap corrupted");
    ​    if (EXPECTED(info & ZEND_MM_IS_SRUN)) {
    ​        zend_mm_free_small(heap, ptr, ZEND_MM_SRUN_BIN_NUM(info));
    ​    } else /* if (info & ZEND_MM_IS_LRUN) */ {
    ​        int pages_count = ZEND_MM_LRUN_PAGES(info);
    ​        ZEND_MM_CHECK(ZEND_MM_ALIGNED_OFFSET(page_offset, ZEND_MM_PAGE_SIZE) == 0, "zend_mm_heap corrupted");
    ​        zend_mm_free_large(heap, chunk, page_num, pages_count);
    ​    }
    }
    }
处理堆栈中的数据，清空上一次分析的内存
    ZEND_API zend_op_array *compile_file(zend_file_handle *file_handle, int type)
    {
        zend_lex_state original_lex_state;
        zend_op_array *op_array = NULL;
        zend_save_lexical_state(&original_lex_state);
    if (open_file_for_scanning(file_handle)==FAILURE) {
        if (!EG(exception)) {
            if (type==ZEND_REQUIRE) {
                zend_message_dispatcher(ZMSG_FAILED_REQUIRE_FOPEN, ZSTR_VAL(file_handle->filename));
            } else {
                zend_message_dispatcher(ZMSG_FAILED_INCLUDE_FOPEN, ZSTR_VAL(file_handle->filename));
            }
        }
    } else {
        op_array = zend_compile(ZEND_USER_FUNCTION);
    }
    zend_restore_lexical_state(&original_lex_state);
    return op_array;
    }
主要执行语句是zend_compile(ZEND_USER_FUNCTION);
    static zend_op_array *zend_compile(int type)
    {
        zend_op_array *op_array = NULL;
        bool original_in_compilation = CG(in_compilation);
    CG(in_compilation) = 1;
    CG(ast) = NULL;
    CG(ast_arena) = zend_arena_create(1024 * 32);
    if (!zendparse()) {
        int last_lineno = CG(zend_lineno);
        zend_file_context original_file_context;
        zend_oparray_context original_oparray_context;
        zend_op_array *original_active_op_array = CG(active_op_array);
    ​    op_array = emalloc(sizeof(zend_op_array));
    ​    init_op_array(op_array, type, INITIAL_OP_ARRAY_SIZE);
    ​    CG(active_op_array) = op_array;
    ​    /* Use heap to not waste arena memory */
    ​    op_array->fn_flags |= ZEND_ACC_HEAP_RT_CACHE;
    ​    if (zend_ast_process) {
    ​        zend_ast_process(CG(ast));
    ​    }
    ​    zend_file_context_begin(&original_file_context);
    ​    zend_oparray_context_begin(&original_oparray_context);
    ​    zend_compile_top_stmt(CG(ast));
    ​    CG(zend_lineno) = last_lineno;
    ​    zend_emit_final_return(type == ZEND_USER_FUNCTION);
    ​    op_array->line_start = 1;
    ​    op_array->line_end = last_lineno;
    ​    zend_init_static_variables_map_ptr(op_array);
    ​    pass_two(op_array);
    ​    zend_oparray_context_end(&original_oparray_context);
    ​    zend_file_context_end(&original_file_context);
    ​    CG(active_op_array) = original_active_op_array;
    }
    zend_ast_destroy(CG(ast));
    zend_arena_destroy(CG(ast_arena));
    CG(in_compilation) = original_in_compilation;
    return op_array;
    }
其中init_op_array(op_array, type, INITIAL_OP_ARRAY_SIZE);原型是
    void init_op_array(zend_op_array *op_array, zend_uchar type, int initial_ops_size)
    {
        op_array->type = type;
        op_array->arg_flags[0] = 0;
        op_array->arg_flags[1] = 0;
        op_array->arg_flags[2] = 0;
    op_array->refcount = (uint32_t *) emalloc(sizeof(uint32_t));
    *op_array->refcount = 1;
    op_array->last = 0;
    op_array->opcodes = emalloc(initial_ops_size * sizeof(zend_op));
    op_array->last_var = 0;
    op_array->vars = NULL;
    op_array->T = 0;
    op_array->function_name = NULL;
    op_array->filename = zend_string_copy(zend_get_compiled_filename());
    op_array->doc_comment = NULL;
    op_array->attributes = NULL;
    op_array->arg_info = NULL;
    op_array->num_args = 0;
    op_array->required_num_args = 0;
    op_array->scope = NULL;
    op_array->prototype = NULL;
    op_array->live_range = NULL;
    op_array->try_catch_array = NULL;
    op_array->last_live_range = 0;
    op_array->static_variables = NULL;
    ZEND_MAP_PTR_INIT(op_array->static_variables_ptr, NULL);
    op_array->last_try_catch = 0;
    op_array->fn_flags = 0;
    op_array->last_literal = 0;
    op_array->literals = NULL;
    op_array->num_dynamic_func_defs = 0;
    op_array->dynamic_func_defs = NULL;
    ZEND_MAP_PTR_INIT(op_array->run_time_cache, NULL);
    op_array->cache_size = zend_op_array_extension_handles * sizeof(void*);
    memset(op_array->reserved, 0, ZEND_MAX_RESERVED_RESOURCES * sizeof(void*));
    if (zend_extension_flags & ZEND_EXTENSIONS_HAVE_OP_ARRAY_CTOR) {
        zend_llist_apply_with_argument(&zend_extensions, (llist_apply_with_arg_func_t) zend_extension_op_array_ctor_handler, op_array);
    }
    }
也就是初始化所有的标签，然后执行memset
zend_file_context_begin
    void zend_file_context_begin(zend_file_context *prev_context) /* {{{ */
    {
        *prev_context = CG(file_context);
        FC(imports) = NULL;
        FC(imports_function) = NULL;
        FC(imports_const) = NULL;
        FC(current_namespace) = NULL;
        FC(in_namespace) = 0;
        FC(has_bracketed_namespaces) = 0;
        FC(declarables).ticks = 0;
        zend_hash_init(&FC(seen_symbols), 8, NULL, NULL, 0);
    }
zend_oparray_context_begin
    void zend_oparray_context_begin(zend_oparray_context *prev_context) /* {{{ */
    {
        *prev_context = CG(context);
        CG(context).opcodes_size = INITIAL_OP_ARRAY_SIZE;
        CG(context).vars_size = 0;
        CG(context).literals_size = 0;
        CG(context).fast_call_var = -1;
        CG(context).try_catch_offset = -1;
        CG(context).current_brk_cont = -1;
        CG(context).last_brk_cont = 0;
        CG(context).brk_cont_array = NULL;
        CG(context).labels = NULL;
    }
    /* }}} */
####  抽象化
抽象化部分在zend_ini_scanner，zned_language_scanner，zend_operators等文件中
如zend_operators的_is_numeric_string_ex对数字类型进行分析
    ZEND_API zend_uchar ZEND_FASTCALL _is_numeric_string_ex(const char *str, size_t length, zend_long *lval,
        double *dval, bool allow_errors, int *oflow_info, bool *trailing_data) /* {{{ */
    {
        const char *ptr;
        int digits = 0, dp_or_e = 0;
        double local_dval = 0.0;
        zend_uchar type;
        zend_ulong tmp_lval = 0;
        int neg = 0;
    if (!length) {
        return 0;
    }
    if (oflow_info != NULL) {
        *oflow_info = 0;
    }
    if (trailing_data != NULL) {
        *trailing_data = false;
    }
    /* Skip any whitespace
     * This is much faster than the isspace() function */
       while (*str == ' ' || *str == '\t' || *str == '\n' || *str == '\r' || *str == '\v' || *str == '\f') {
       str++;
       length--;
       }
       ptr = str;
    if (*ptr == '-') {
        neg = 1;
        ptr++;
    } else if (*ptr == '+') {
        ptr++;
    }
    if (ZEND_IS_DIGIT(*ptr)) {
        /* Skip any leading 0s */
        while (*ptr == '0') {
            ptr++;
        }
    ​    /* Count the number of digits. If a decimal point/exponent is found,
      * it's a double. Otherwise, if there's a dval or no need to check for
        * a full match, stop when there are too many digits for a long */
          for (type = IS_LONG; !(digits >= MAX_LENGTH_OF_LONG && (dval || allow_errors)); digits++, ptr++) {
    check_digits:
                if (ZEND_IS_DIGIT(*ptr)) {
                    tmp_lval = tmp_lval * 10 + (*ptr) - '0';
                    continue;
                } else if (*ptr == '.' && dp_or_e = MAX_LENGTH_OF_LONG) {
    ​        if (oflow_info != NULL) {
    ​            *oflow_info = *str == '-' ? -1 : 1;
    ​        }
    ​        dp_or_e = -1;
    ​        goto process_double;
    ​    }
    } else if (*ptr == '.' && ZEND_IS_DIGIT(ptr[1])) {
    process_double:
            type = IS_DOUBLE;
    ​    /* If there's a dval, do the conversion; else continue checking
      * the digits if we need to check for a full match */
        if (dval) {
            local_dval = zend_strtod(str, &ptr);
        } else if (!allow_errors && dp_or_e != -1) {
            dp_or_e = (*ptr++ == '.') ? 1 : 2;
            goto check_digits;
        }
        } else {
        return 0;
        }
    if (ptr != str + length) {
        const char *endptr = ptr;
        while (*endptr == ' ' || *endptr == '\t' || *endptr == '\n' || *endptr == '\r' || *endptr == '\v' || *endptr == '\f') {
            endptr++;
            length--;
        }
        if (ptr != str + length) {
            if (!allow_errors) {
                return 0;
            }
            if (trailing_data != NULL) {
                *trailing_data = true;
            }
        }
    }
    if (type == IS_LONG) {
        if (digits == MAX_LENGTH_OF_LONG - 1) {
            int cmp = strcmp(&ptr[-digits], long_min_digits);
    ​        if (!(cmp name; ++reserved) {
        if (uqname_len == reserved->len
            && zend_binary_strcasecmp(uqname, uqname_len, reserved->name, reserved->len) == 0
        ) {
            return 1;
        }
    }
    return 0;
    }
zend_scan_escape_string首先判断这一行代码长度，如果当前行是空行则zend_lineno加一。一直到这一行的末尾，执行skip_escape_conversion。过程中如果遇到特殊字符$则退出，如果是标志x，u等数据类型的符号，则改变堆栈存储方式，如果是空格之类的符号就跳过。
分析完当前行后，需要分析下一有意义的行。这就是next_newline的作用。检测到回车如果存在下一行且下一行为换行，那么跳过两行，否则跳过一行。
    static zend_result zend_scan_escape_string(zval *zendlval, char *str, int len, char quote_type)
    {
        char *s, *t;
        char *end;
    if (len <= 1) {