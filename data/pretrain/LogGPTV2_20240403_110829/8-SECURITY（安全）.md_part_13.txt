select user,host,password from mysql.user;
flush privileges;
//通过mysql命令修改的密码，mysql也会有所有操作指令的记录，这里也记录了明文密码
另外数据库还有一个binlog日志里也有明文密码（5.6版本后修复了）。
怎么解决？
管理好自己的历史，不使用明文登录，选择合适的版本5.6以后的版本，
日志，行为审计（找到行为人），使用防火墙从TCP层设置ACL（禁止外网接触数据库）。
3）数据备份与还原
首先，备份数据库（注意用户名为root，密码为redhat）：
\[root@proxy \~\]# mysqldump -uroot -predhat mydb table \> table.sql
//备份数据库中的某个数据表
\[root@proxy \~\]# mysqldump -uroot -predhat mydb \> mydb.sql
//备份某个数据库
\[root@proxy \~\]# mysqldump -uroot -predhat \--all-databases \> all.sql
//备份所有数据库
接下来，还原数据库（注意用户名为root，密码为redhat）：
\[root@proxy \~\]# mysql -uroot -predhat mydb \ grant all on \*.\* to tom@\'%\' identified by
\'123\';
//创建一个新账户tom
使用tcpdump抓包（192.168.4.5）
\[root@proxy \~\]# tcpdump -w log -i any src or dst port 3306
//抓取源或目标端口是3306的数据包，保存到log文件中
客户端（192.168.4.100）从远程登陆数据库服务器（192.168.4.5）
\[root@client \~\]# mysql -utom -p123 -h 192.168.4.5
//在192.168.4.100这台主机使用mysql命令登陆远程数据库服务器（192.168.4.5）
//用户名为tom，密码为123
MariaDB \[(none)\]\> select \* from mysql.user;
//登陆数据库后，任意执行一条查询语句
回到服务器查看抓取的数据包
\[root@proxy \~\]# tcpdump -A -r log
//使用tcpdump查看之前抓取的数据包，很多数据库的数据都明文显示出来
如何解决？
可以使用SSH远程连接服务器后，再从本地登陆数据库（避免在网络中传输数据，因为网络环境中不知道有没有抓包者）。
或者也可以使用SSL对MySQL服务器进行加密，类似与HTTP+SSL一样，MySQL也支持SSL加密（确保网络中传输的数据是被加密的）。
步骤三：Tomcat安全性
1） 隐藏版本信息、修改tomcat主配置文件（隐藏版本信息）
未修改版本信息前，使用命令查看服务器的版本信息
注意：proxy有192.168.2.5的IP地址，这里使用proxy作为客户端访问192.168.2.100服务器。
\[root@proxy \~\]# curl -I http://192.168.2.100:8080/xx
//访问不存在的页面文件，查看头部信息
\[root@proxy \~\]# curl -I http://192.168.2.100:8080
//访问存在的页面文件，查看头部信息
\[root@proxy \~\]# curl http://192.168.2.100:8080/xx
//访问不存在的页面文件，查看错误信息
修改tomcat配置文件，修改版本信息(在192.168.2.100操作)：
\[root@web1 tomcat\]# yum -y install java-1.8.0-openjdk-devel
\[root@web1 tomcat\]# cd /usr/local/tomcat/lib/
\[root@web1 lib\]# jar -xf catalina.jar
\[root@web1 lib\]# vim org/apache/catalina/util/ServerInfo.properties
//根据自己的需要，修改版本信息的内容
\[root@web1 lib\]# /usr/local/tomcat/bin/shutdown.sh //关闭服务
\[root@web1 lib\]# /usr/local/tomcat/bin/startup.sh //启动服务
修改后，客户端再次查看版本信息（在192.168.2.5操作）：
\[root@proxy \~\]# curl -I http://192.168.2.100:8080/xx
//访问不存在的页面文件，查看头部信息
\[root@proxy \~\]# curl -I http://192.168.2.100:8080
//访问存在的页面文件，查看头部信息
\[root@proxy \~\]# curl http://192.168.2.100:8080/xx
//访问不存在的页面文件，查看错误信息
再次修改tomcat服务器配置文件，修改版本信息，手动添加server参数（在192.168.2.100操作）：
\[root@web1 lib\]# vim /usr/local/tomcat/conf/server.xml
\
\[root@web1 lib\]# /usr/local/tomcat/bin/shutdown.sh //关闭服务
\[root@web1 lib\]# /usr/local/tomcat/bin/startup.sh //启动服务
修改后,客户端再次查看版本信息（在192.168.2.5操作）：
\[root@proxy \~\]# curl -I http://192.168.2.100:8080/xx
//访问不存在的页面文件，查看头部信息
\[root@proxy \~\]# curl -I http://192.168.2.100:8080
//访问存在的页面文件，查看头部信息
\[root@proxy \~\]# curl http://192.168.2.100:8080/xx
//访问不存在的页面文件，查看错误信息
2）降级启动
默认tomcat使用系统高级管理员账户root启动服务，启动服务尽量使用普通用户。
\[root@web1 \~\]# useradd tomcat
\[root@web1 \~\]# chown -R tomcat:tomcat /usr/local/tomcat/
//修改tomcat目录的权限，让tomcat账户对该目录有操作权限
\[root@web1 \~\]# su -c /usr/local/tomcat/bin/startup.sh tomcat
//使用su命令切换为tomcat账户，以tomcat账户的身份启动tomcat服务
\[root@web1 \~\]# chmod +x /etc/rc.local //该文件为开机启动文件
\[root@web1 \~\]# vim /etc/rc.local //修改文件，添加如下内容
su -c /usr/local/tomcat/bin/startup.sh tomcat
3）删除默认的测试页面
\[root@web1 \~\]# rm -rf /usr/local/tomcat/webapps/\*
3 案例3：使用diff和patch工具打补丁
3.1 问题
本案例要求优化提升常见网络服务的安全性，主要完成以下任务操作：
使用diff对比文件差异
使用diff生成补丁文件
使用patch命令为旧版本打补丁
3.2 方案
程序是人设计出来的，总是会有这样那样的问题与漏洞，目前的主流解决方法就是为有问题的程序打补丁，升级新版本。
在Linux系统中diff命令可以为我们生成补丁文件，然后使用patch命令为有问题的程序代码打补丁。
3.3 步骤
实现此案例需要按照如下步骤进行。
步骤一：对比单个文件差异
1） 编写两个版本的脚本，一个为v1版本，一个为v2版本。
\[root@proxy \~\]# cat test1.sh //v1版本脚本
#!/bin/bash
echo \"hello wrld\"
\[root@proxy \~\]# cat test2.sh //v2版本脚本
#!/bin/bash
echo \"hello the world\"
echo \"test file\"
2） 使用diff命令语法
使用diff命令查看不同版本文件的差异。
\[root@proxy \~\]# diff test1.sh test2.sh //查看文件差异
@@ -1,3 +1,3 @@
#!/bin/bash
-echo \"hello world\"
-echo \"test\"
+echo \"hello the world\"
+echo \"test file\"
\[root@proxy \~\]# diff -u test1.sh test2.sh //查看差异，包含头部信息
\-\-- test1.sh 2018-02-07 22:20:02.723971251 +0800
+++ test2.sh 2018-02-07 22:20:13.358760687 +0800
@@ -1,3 +1,3 @@
#!/bin/bash
-echo \"hello world\"
-echo \"test\"
+echo \"hello the world\"
+echo \"test file\"
diff制作补丁文件的原理：告诉我们怎么修改第一个文件后能得到第二个文件。
这样如果第一个版本的脚本有漏洞，我们不需要将整个脚本都替换，仅需要修改有问题的一小部分代码即可，diff刚好可以满足这个需求！
像Linux内核这样的大块头，一旦发现有一个小漏洞，我们不可能把整个内核都重新下载，全部替换一遍，而仅需要更新有问题的那一小部分代码即可！
diff命令常用选项：
-u 输出统一内容的头部信息（打补丁使用），计算机知道是哪个文件需要修改
-r 递归对比目录中的所有资源（可以对比目录）
-a 所有文件视为文本（包括二进制程序）
-N 无文件视为空文件（空文件怎么变成第二个文件）
-N选项备注说明：
A目录下没有txt文件，B目录下有txt文件
diff比较两个目录时，默认会提示txt仅在B目录有（无法对比差异，修复文件）
diff比较时使用N选项，则diff会拿B下的txt与A下的空文件对比，补丁信息会明确说明如何从空文件修改后变成txt文件，打补丁即可成功！
步骤二：使用patch命令对单文件代码打补丁
1）准备实验环境
\[root@proxy \~\]# cd demo
\[root@proxy demo\]# vim test1.sh
#!/bin/bash
echo \"hello world\"
echo \"test\"
\[root@proxy demo\]# vim test2.sh
#!/bin/bash
echo \"hello the world\"
echo \"test file\"
2\) 生成补丁文件
\[root@proxy demo\]# diff -u test1.sh test2.sh \> test.patch
3）使用patch命令打补丁
在代码相同目录下为代码打补丁
\[root@proxy demo\]# yum -y install patch
\[root@proxy demo\]# patch -p0 \ source1/test.sh
\[root@proxy demo\]# cp /bin/find source1/
\[root@proxy demo\]# tree source1/ //source1目录下2个文件
\|\-- find
\`\-- test.sh
\[root@proxy demo\]# echo \"hello the world\" \> source2/test.sh
\[root@proxy demo\]# echo \"test\" \> source2/tmp.txt
\[root@proxy demo\]# cp /bin/find source2/
\[root@proxy demo\]# echo \"1\" \>\> source2/find
\[root@proxy demo\]# tree source2/ //source1目录下3个文件
\|\-- find
\|\-- test.sh
\`\-- tmp.txt
//注意：两个目录下find和test.sh文件内容不同，source2有tmp.txt而source1没有该文件
2）制作补丁文件
\[root@proxy demo\]# diff -u source1/ source2/
//仅对比了文本文件test.sh；二进制文件、tmp都没有对比差异，仅提示，因为没有-a和-N选项
\[root@proxy demo\]# diff -Nu source1/ source2/
//对比了test.sh，并且使用source2目录的tmp.txt与source1的空文件对比差异。
\[root@proxy demo\]# diff -Nua source1/ source2/
//对比了test.sh、tmp.txt、find(程序)。
步骤四：使用patch命令对目录下的所有代码打补丁
1）使用前面创建的source1和source2目录下的代码为素材，生成补丁文件
\[root@proxy \~\]# cd demo
\[root@proxy demo\]# diff -Nuar source1/ source2/ \> source.patch
2）使用patch命令为代码打补丁
\[root@proxy demo\]# ls
source1 source2 source.patch
\[root@proxy demo\]# cat source.patch //对比的文件有路径信息
\-\-- source1/test.sh 2018-02-07 22:51:33.034879417 +0800
+++ source2/test.sh 2018-02-07 22:47:32.531754268 +0800
@@ -1 +1 @@
-hello world
+hello the world
\[root@proxy demo\]# cd source1
\[root@proxy source1\]# patch -p1 \< ../source.patch
# NSD SECURITY DAY04
RHEL7的防火墙服务是firewalld,调用的还是iptables
RHEL6的防火墙服务是iptables
# 1：iptables防火墙
**一、防火墙的分类**
**(一)、包过滤防火墙iptables。**
数据包过滤(packet
Filtering)技术是在网络层对数据包进行选择，选择的依据是系统内设置的过滤逻辑，称为访问控制表(access
control
lable,ACL)。通过检查数据流中每个数据包的源地址和目的地址，所用的端口号和协议状态等因素，或他们的组合来确定是否允许该数据包通过。
包过滤防火墙的优点是它对用户来说是透明的，处理速度快且易于维护。缺点是：非法访问一旦突破防火墙，即可对主机上的软件和配置漏洞进行攻击；数据包的源
地址、目的地址和IP的端口号都在数据包的头部，可以很轻易地伪造。"IP地址欺骗"是黑客针对该类型防火墙比较常用的攻击手段。
**(二)、代理服务型防火墙**
代理服务(proxy
service)也称链路级网关或TCP通道。它是针对数据包过滤和应用网关技术存在的缺点而引入的防火墙技术，其特点是将所有跨跃防火墙的网络通信链路
分为两段。当代理服务器接收到用户对某个站点的访问请求后就会检查请求是否符合控制规则。如果规则允许用户访问该站点，代理服务器就会替用户去那个站点取
回所需的信息，再转发给用户，内外网用户的访问都是通过代理服务器上的"链接"来实现的，从而起到隔离防火墙内外计算机系统的作用。
**二、防火墙的工作原理**
(一)、包过滤防火墙的工作原理
包过滤是在IP层实现的，因此，它可以只用路由器来完成。包过滤根据包的源IP地址、目的IP地址、源端口、目的端口及包传递方向等报头信息来判断是否允