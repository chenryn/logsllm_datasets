Figure 2: Exponentiation routines of Go and Crypto++ and gcrypt. For the corresponding exponent encoders 𝑓𝑤(·), see the full
version [15]. For pointers to the original source code, see Footnotes 6 and 9 and 11.
We provide a pseudo-code version of the crucial parts of Go’s
EA in Figure 2 (left), where lines 1–2 implement phase (1), lines 3–4
implement phase (2), and lines 5–14 implement phase (3). Note that
we outsource the derivation of the exponent encoding (𝑒1, . . . , 𝑒𝐿),
i.e., the conversion of the exponent to the RR and the encoding of
the latter, to the function 𝑓𝑤 invoked in line 4. The only properties
of this function that are relevant for our description and attack are
that the exponent 𝑥 can be uniquely recovered from (𝑒1, . . . , 𝑒𝐿) and
that for all 𝑒𝑖 we have 0 ≤ 𝑒𝑖 < 2𝑤. (For reference, we reproduce
the details of function 𝑓𝑤 in the full version [15].)
Given the above description, the computation steps indicated
in Figure 2 (left) should be self-explanatory. Note that lines 8–10
compute 𝑅 ← 𝑅2𝑤 , with the 𝑖 ≠ 1 condition in line 9 arranging
for a little speed-up in the very first iteration (in which 𝑅 = 1 by
line 6).
The attack condition in Go’s EA is clearly visible in the pseudo-
code: If we assume that in each iteration of line 12 the table index 𝑒𝑖
leaks to the adversary, then the latter can readily recover the ex-
ponent 𝑥. In Section 6.3 we show how to do this in practice. The
attack condition can be removed by implementing line 12 specif-
ically such that index 𝑒𝑖 is not leaked.8 Notationally, in a secure
implementation we would specify line 12 as ‘Securely 𝑊 ← 𝑇 [𝑒𝑖]’.
5.3 Comb-based Exponentiation
Exponentiations 𝑅 ← 𝐵𝑥 in Crypto++9 are computed, given a
parameter 𝑤, using a comb-based algorithm by (1) tabulating a set
8If just this countermeasure is applied, the length of the encoding, which might convey
non-trivial information about the exponent, would still leak.
9The code is available at https://github.com/weidai11/cryptopp/blob/45de5c6c/algebra.
cpp#L255-L314
of initial values that depend solely on 𝑤; (2) encoding an ODR Γ =
(𝛾𝑙 , . . . , 𝛾0) of the exponent 𝑥 into a sequence (𝑒1, . . . , 𝑒𝐿) (the latter
merely consists of relabelling the coefficients); and (3) combining
the results of (1) and (2) in an online phase.
We provide a pseudo-code version of the crucial parts of
Crypto++’s EA in Figure 2 (center), where lines 15–16 implement
phase (1), lines 17–18 implement phase (2), and lines 19–29 im-
plement phase (3). Note that we outsource the derivation of the
exponent encoding (𝑒1, . . . , 𝑒𝐿), i.e., the conversion of the expo-
nent to the ODR and the encoding of the latter, to the function 𝑓𝑤
invoked in line 18. The only properties of this function that are
relevant for our description and attack are that the exponent 𝑥 can
be uniquely recovered from (𝑒1, . . . , 𝑒𝐿) and that for all 𝑒𝑖 we have
𝑒𝑖 ∈ {0}∪{1, 3, . . . , 2𝑤 −1}. (For reference, we reproduce the details
of function 𝑓𝑤 in the full version [15].)
Given the above description, the computation steps indicated in
Figure 2 (center) should be self-explanatory. (For further details on
the mechanics of comb-based exponentiation, see [23, Sect. 14].)
The attack condition in Crypto++’s EA is clearly visible in the
pseudo-code: If we assume that each execution of line 22 leaks to
the adversary whether the condition is fulfilled, and further each
execution of line 23 leaks the table index 𝑒𝑖 to the adversary, then
the latter can readily recover the exponent 𝑥. In Section 6 we expose
how to do this in practice.
Note that eliminating the attack condition is less immediate
than in Section 5.2. One promising option would be to introduce
an auxiliary (dummy) register 𝑇 [0] (initialized in line 16 together
with the other registers), and to replace lines 22,23 by the single
instruction ‘Securely 𝑇 [𝑒𝑖] ← 𝑇 [𝑒𝑖] · 𝐻’ that implements the table
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2072accesses (read and write) and the multiplication without leaking
the index 𝑒𝑖.10
5.4 Sliding Window Exponentiation
Exponentiations 𝑅 ← 𝐵𝑥 in gcrypt11 are computed, given a pa-
rameter 𝑤, using a sliding-window algorithm by (1) precomputing
and tabulating a set of values that depend solely on 𝑤 and base
element 𝐵; (2) encoding an ODR Γ = (𝛾𝑙 , . . . , 𝛾0) of the exponent 𝑥
into a sequence (𝑒0, 𝑐1, 𝑒1, 𝑐2, 𝑒2, . . . , 𝑐𝐿, 𝑒𝐿, 𝑐𝐿+1); and (3) combining
the results of (1) and (2) in an online phase. The encoding in step (2)
requires that 𝛾𝑙 = 1 be the leading coefficient of Γ12 and is such
that the sub-sequence (𝑒0, 𝑒1, . . . , 𝑒𝐿) coincides with the support
(𝛾 𝑗) 𝑗:𝛾 𝑗 ≠0 of Γ (i.e., the set of non-zero elements; note here we have
𝑒0 = 𝛾𝑙 = 1, and for all 𝑒𝑖 we have 𝑒𝑖 ∈ {1, 3, . . . , 2𝑤 − 1}), and the
values 𝑐1, 𝑐2, . . . , 𝑐𝐿+1 correspond with the lengths of the vanish-
ing subsequences of Γ (i.e., the contiguous runs of zero elements).
Precisely, the encoding is such that
𝐿∑︁
𝑖=0
𝑥 =
2¯𝑐𝑖 𝑒𝑖 where ∀𝑖 : ¯𝑐𝑖 = 𝑐𝑖+1 + . . . + 𝑐𝐿+1 .
(1)
We provide a pseudo-code version of the crucial parts of gcrypt’s
EA in Figure 2 (right), where lines 30–31 implement phase (1),
lines 32–33 implement phase (2), and lines 34–44 implement phase (3).
The function 𝑓𝑤 in line 33 computes the exponent encoding
(𝑒0, 𝑐1, 𝑒1, 𝑐2, 𝑒2, . . . , 𝑐𝐿, 𝑒𝐿, 𝑐𝐿+1) as follows: it sets 𝑒0 = 1 then loops
between: (a) advancing through the bit sequence of 𝑥 (from most
to least significant bit) until it encounters a bit set to 1, and (b)
greedily outputting the largest possible pair (𝑐𝑖, 𝑒𝑖) subject to 𝑒𝑖 ∈
{1, 3, . . . , 2𝑤 − 1}. We reproduce the pseudocode of function 𝑓𝑤 in
the full version [15].
Given the above description, the code in Figure 2 (right) should
be mostly self-explanatory, with the exception of lines 37–40 which
require further explanation: The code is functionally equivalent
with ‘For 𝑗 ← 1 to 𝑐𝑖: 𝑅 ← 𝑅 · 𝑅’ (similarly to lines 41–43) followed
by ‘𝑅 ← 𝑅 · 𝑇 [𝑒𝑖]’, but the implementation reduces side-channel
leakage by hiding for each multiplication whether the factor 𝑊 is 𝑅
or 𝑇 [𝑒𝑖], and, in the latter case, which index 𝑒𝑖 is used for the table
look-up.13 That is, in contrast with the cases of Go and Crypto++,
the EA of gcrypt is specifically designed to offer side-channel
resilience.
Despite its built-in protection measures, we identify a side-channel
condition in gcrypt’s EA that can lead to full exponent recovery.
(In Section 6.2 we demonstrate that the attack is indeed practi-
cally exploitable.) The root of the problem is that the algorithm
implements the sliding-window exponentiation method. Intuitively,
this method covers the digits of the bit-representation of the ex-
ponent 𝑥 with a sequence of 𝑤-wide non-overlapping windows
such that every 1-bit of the exponent is covered by a window and
10If just this countermeasure is applied, the length of the encoding, which might convey
non-trivial information about the exponent, would still leak.
11The code is available at https://github.com/gpg/libgcrypt/blob/ccfa9f2c/mpi/mpi-
pow.c#L393-L772
12Every integer 𝑥 ≥ 1 has at least one, but often multiple, ODRs with leading coeffi-
cient 1. The gcrypt implementation cannot handle the 𝑥 = 0 case.
13Precisely, line 39 implements the instruction “If 𝑗 ≤ 𝑐𝑖 then 𝑊 ← 𝑅; else, if
𝑗 = 𝑐𝑖 + 1, then 𝑊 ← 𝑇 [𝑒𝑖 ]” but ensures that it neither leaks which if-branch is
taken nor what the value of 𝑒𝑖 is.
conditioned on this the number of windows is minimized. In Equa-
tion (1), value 𝐿 corresponds with the number of windows used
for this, any coefficient ¯𝑐𝑖 corresponds with the position of the 𝑖-th
window, and any coefficient 𝑒𝑖 encodes the 𝑤 exponent bits that
the 𝑖-th window covers. In the EA implementation, processing a
window corresponds with a multiplication 𝑅 ← 𝑅 · 𝑇 [𝑒𝑖] while
bridging a gap between two windows corresponds with a sequence
of squaring operations 𝑅 ← 𝑅 · 𝑅. These operations are jointly
implemented in lines 39,40, and each iteration of the loop of line 36
processes one gap-window pair.
The approach of our side-channel attack is to closely monitor the
execution of line 36: The number of iterations of the loop during
one exponentiation immediately reveals the encoding length 𝐿, and
the time taken for the 𝑖-th iteration is, by line 38, linear in 𝑐𝑖 + 1 and
thus leaks, one by one, the coefficients 𝑐1, . . . , 𝑐𝐿.14 Finally, we can
recover coefficient 𝑐𝐿+1 by similarly monitoring the loop of line 42.
That is, if (𝑒0, 𝑐1, 𝑒1, . . . , 𝑐𝐿, 𝑒𝐿, 𝑐𝐿+1) = 𝑓𝑤(𝑥) is the encoding of
exponent 𝑥 then our measurements reveal all the 𝑐𝑖 components
while, for now, the 𝑒𝑖 components remain hidden.
Before moving on to assessing the options for amplifying the
extracted information towards recovering the full exponent, let us
make a final observation on gcrypt’s EA. Recall that line 39 tries to
hide not only the table index 𝑒𝑖 but also whether the multiplication
in line 40 is with 𝑇 [𝑒𝑖] or 𝑅. However, as our method recovers the
coefficients 𝑐𝑖 straightaway, and exclusively the last iteration of the
loop of line 38 will perform a multiplication with 𝑊 = 𝑇 [𝑒𝑖] (rather
than with 𝑊 = 𝑅), line 39 de facto just hides the 𝑒𝑖 coefficients.
Thus, replacing lines 38–40 by the instructions ‘For 𝑗 ← 1 to 𝑐𝑖:
𝑅 ← 𝑅 · 𝑅’ followed by ‘Securely 𝑅 ← 𝑅 · 𝑇 [𝑒𝑖]’ would result in
code that is equivalent from a security perspective yet simpler and
more efficient.15 We thus conclude that the authors of gcrypt were
likely not aware of the fact that the coefficients 𝑐1, . . . , 𝑐𝐿+1 leak so
easily.
Now that we retrieve copies of the coefficients 𝑐1, . . . , 𝑐𝐿+1, the
next subsections are dedicated to assessing the value of this infor-
mation towards an attack that recovers the full exponent.
observing that 𝑛 = 𝑐𝑖 and is thus fully known. The sequence
5.4.1 Modelling the leakage. As a warm up, observe that when
𝑤 = 1 the coefficients 𝑐𝑖 leak the whole exponent, indeed all 𝑒𝑖 are
necessarily equal to 1 in this case. For larger values of 𝑤, however,
a search over the possible values of 𝑒𝑖 is necessary. Our goal here
is to quantify this partial leakage.
Letting 𝑛 + 1 = ⌈log2(𝑥 + 1)⌉ be the bit length of 𝑥, we start by
of 𝑐𝑖’s indicates the position of each 𝑒𝑖 in the binary writing of 𝑥,
and from the description of 𝑓𝑤 we know that 𝑒𝑖 is odd and 𝑒𝑖 <
min(2𝑤, 2𝑐𝑖), leaving us with min(𝑤, 𝑐𝑖) − 1 unknown bits in 𝑒𝑖.
Note that there is no 𝑒𝐿+1 associated to 𝑐𝐿+1, which indeed leaks the
number of trailing zeros of 𝑥. Thus, the total number of unknown
14This argument assumes that multiplications and squarings require uniform time.
This is the case for the gcrypt routines.
15The performance gain comes from the possibility of removing some of the decoy
code required for securely implementing line 39. For further details, see the source
code.
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea20730
1
0
0
1
0
0
1
1
1
1
0
0
1
1
Figure 3: Finite state machines describing 𝑓𝑤 for 𝑤 = 1 (left)
and 𝑤 = 2 (right).
window width
2
3
4
5
states
8
24
64
160
𝜇
7/24
7/16
341/640
925/1536
𝜎2
0.058449
0.098632
0.126731
0.145411
Table 1: Per bit statistics of the entropy 𝐻𝑤(𝑥) as 𝑛 → ∞ for
different values of the window width 𝑤.
𝐿∑︁
𝑖=1
bits of 𝑥, which we shall call the entropy of 𝑥, is exactly
𝐻𝑤(𝑥) =
(min(𝑐𝑖, 𝑤) − 1).
(2)
Given ℎ, ℎ𝑥 and the leakage for 𝑥, it the computational effort for
finding 𝑥 grows exponentially with 𝐻𝑤(𝑥). We will analyze this
cost precisely in Section 5.4.2. The value 𝐻𝑤(𝑥) depends on 𝑥, on
the window size 𝑤, and on the algorithm 𝑓𝑤 used for the encoding.
We are thus interested in estimating statistics on 𝐻𝑤(𝑥) for secrets
𝑥 of 𝑛 bits. To this end, we model the encoding function 𝑓𝑤 as a
Markov process, and use standard theorems on Markov chains to
deduce statistics on 𝐻𝑤(𝑥) as 𝑛 → ∞.
Model 𝑥 as a continuous stream of independent and uniformly
distributed bits. For any fixed 𝑤, the leakage of the encoding 𝑓𝑤 is
described by a finite state machine outputting the per-coefficient
entropy min(𝑤, 𝑐𝑖) − 1 whenever it passes through a set of dis-
tinguished states. Figure 3 shows the machines for 𝑤 = 1 and
𝑤 = 2. Circles represent ordinary states and squares represent dis-
tinguished ones. Solid arrows represent a transition associated to
reading a bit of 𝑥, with the read bit indicated next to the arrow.
Dashed arrows represent transitions which happen without read-
ing any bit from 𝑥, so called 𝜖-transitions. The starting node is the
one on top, although that is irrelevant for the modeling. The state
machine moves from one state to another as it progresses through
the bits of 𝑥; when it encounters a distinguished state it outputs
the entropy value represented in the node, modeling the leakage of
a value 𝑐𝑖. Both state machines in Figure 3 could be simplified, but
we prefer this larger presentation as it lends itself more easily to
generalization to any window size: a generalization of these state
machines to a value 𝑤 has 𝑤2𝑤 states.
Before converting the state machine to a Markov chain, we first
need to get rid of the 𝜖-transitions, by replacing them with the
corresponding 0/1-transitions. This way, the number of states tra-
versed by the machine corresponds exactly to the bit length of the