### Optimized Text

**Signature and Transaction Details:**

- The signature of A on T2 (excluding the witness field `witness sigK(A)`) is required by `T1.out(0)`.
- If T1 is on the blockchain and its `out(0)` is unspent, A can update the blockchain by appending T2. This transfers `v0B1` from T1 to T2.
- T2 has a single output that can be redeemed by any transaction providing a witness with hash `k`.
- The `absLock` field in T2 specifies the earliest time `t` when T2 can be added to the blockchain.
- A subsequent transaction can redeem `(v1 + v0)B` in a single step, requiring two inputs (`T1, 1` and `T2, 0`) and two witnesses. The first witness is a signature of B, and the second is a preimage of `k`.

**Assumptions on Bitcoin's Cryptographic Primitives:**

- We assume Bitcoin uses secure cryptographic primitives, including ideal hash functions (modeled according to the random oracle model [21]) and a digital signature scheme robust against existential forgery attacks.

**Blockchain Structure:**

- A blockchain `B` is a sequence of transactions `(T0, t0) ... (Tn, tn)`, where `T0 ... Tn` are transactions, and `t0 ... tn` are timestamps with `ti ≤ tj` for all `i ≤ j`.
- The coinbase transaction `T0` does not point to a previous transaction (`T0.in = ⊥`).
- Blockchains are assumed to be append-only, without forks, and consistent, adhering to the Bitcoin protocol [16].
- In actual Bitcoin, the outputs of T2 must be strictly smaller than `v0`, and the difference is paid as transaction fees. For simplicity, this paper neglects these fees [16].

**Computational Runs:**

- Computational runs are sequences of computational labels `λc`, which are bitstrings encoding actions such as message broadcasts, Bitcoin transaction appends, and delays.
- To compute the hash of a message `m`, participant A sends `m` to the oracle `O` and waits for the reply `H(m)`.
- A computational run begins with a coinbase transaction `T0`, followed by the broadcast of public keys of all participants. Each participant `A` has two key pairs: `KA` for signing messages and `ˆKA` for redeeming deposits.
- The initial transaction `T0` has an output redeemable with the private key `ˆKs_A`, ensuring each participant starts with some funds (possibly zero) and knows the public keys of others.

**Stripping:**

- The A-stripping of a computational run `Rc` removes all messages not visible to `A`, i.e., messages between `O` and other participants `B ≠ A`.

**Participant and Adversary Strategies:**

- **Participant Strategies:** A computational strategy `Σc_A` for participant `A` is a PPTIME algorithm that takes a (A-stripped) computational run `Rc*` as input and outputs a finite set of computational labels. Constraints include:
  - `A` cannot impersonate another participant.
  - If the strategy outputs a transaction `T`, it must be a consistent update of the blockchain `BRc*` obtained from the run, and all witnesses of `T` must have been broadcast.
  - Strategies must be persistent.
- **Adversary Strategies:** A computational adversary strategy `Σc_Adv` is a PPTIME algorithm taking a (Adv-stripped) computational run `Rc*` and the moves chosen by each honest participant as input. It outputs a single computational label. Constraints include:
  - The adversary can impersonate any participant except the oracle `O`.
  - The adversary can perform a time delay only if all honest participants agree.

**Compiling BitML to Bitcoin:**

- BitML contract advertisements `{G}C` are compiled into a finite set of Bitcoin transactions `T`, signed by all participants (except those whose authorizations are required after stipulation).
- The first transaction `Tinit` redeems all permanent deposits, corresponding to the stipulation of `{G}C`. Subsequent transactions in `T` can only be appended to the blockchain when they correspond to a computation step in BitML.
- The compiler generates key pairs for participants, and the public parts are exchanged. These key pairs are used for various purposes, such as enabling the firing of specific actions and computing witnesses for transactions.

**Examples:**

- **Withdraw Example:**
  - The contract `{G}C = {A:! 1B @ x | B:! 1B @ y} withdraw B` is compiled into transactions `TB` and `Tinit`.
  - The BitML stipulation steps are mapped to obtaining and exchanging signatures, and appending `Tinit` and `TB` to the blockchain.
  - The order of signature exchanges is crucial to maintain the correspondence with BitML semantics.

- **Authorizations:**
  - Compiling `A : withdraw B` requires minor changes in the witness of `TB` and the output script of `Tinit` to ensure `TB` can only be appended after obtaining A’s authorization.

- **After:**
  - Compiling `after t : withdraw B` sets an `absLock` field in `TB` to prevent it from being appended until time `t`.

- **Split:**
  - The contract `Cs = split (1B → withdraw A | 2B → withdraw B)` is compiled into transactions `Tinit`, `Tsplit`, `TA`, and `TB`.
  - `Tsplit` splits the contract balance into two different outputs, which can be independently redeemed by `TA` and `TB`.

- **Put:**
  - The contract `Cp = put x . withdraw B` is compiled into transactions `Tinit`, `Tput`, and `TB`.
  - `Tput` has two inputs: `Tinit` (redeemable with signatures of both A and B) and `Tx` (redeemable with A’s signature). If `Tx` is spent, the contract gets stuck, and the deposit within `Tinit` is frozen.

This optimized text provides a clearer, more coherent, and professional presentation of the original content.