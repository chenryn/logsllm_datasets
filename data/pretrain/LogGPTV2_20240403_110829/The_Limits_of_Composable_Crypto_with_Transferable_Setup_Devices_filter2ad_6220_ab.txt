way functions?
A second important question that we address here is:
What is the round complexity of UC-secure two-party protocols using stateless tokens assuming
only one-way functions?
We remark here that relying on black-box techniques, it would be impossible to achieve non-interactive
secure computation even in the tamper proof model as any such approach would be vulnerable to a residual
function attack.3 This holds even if we allow an initial token exchange phase, where the two parties exchange
tokens (that are independent of their inputs). Hence, the best we could hope for is two rounds.
(G)UC-secure protocols in the multi-party setting. In the UC framework, it is possible to obtain UC-
secure protocols in the MPC setting by ﬁrst realizing the UC-secure oblivious transfer functionality (UC OT)
in the two-party setting and then combining it with general compilation techniques (e.g., [Kil88, CLOS02,
IPS08, LPV12] to obtain UC-secure multi-party computation protocols. First, we remark that speciﬁcally in
the stateless tamper-proof tokens model, prior works fail to consider multi-versions of the OT-functionality
1In fact, we present a concrete attack that breaks the security of their construction in Appendix A. We remark that our observation
only affects one particular result in [GIS+10], namely, realizing the UC-secure oblivious transfer functionality based on CRHFs
and stateless tokens.
2In private communication, the authors of [CKS+13] explained that the variant that naively replaces the commitment with one
based on one-way functions might be vulnerable to covert attacks.
3Intuitively, this attack allows the recipient of the (only) message to repeatedly evaluate the function on different inputs for a
ﬁxed sender’s input.
3
while allowing transferrability of tokens which is important in an MPC setting.4 As such, none of the
previous works explicitly study the round complexity of multi-party protocols in the tamper proof model
(with stateless tokens), we thus initiate this study in this work and address the following question.
Can we obtain round-optimal multi-party computation protocols with GUC-security in the tam-
per proof model?
Unidirectional token exchange. Consider the scenario where companies such as Amazon or Google wish
to provide an email spam-detection service and users of this service want to keep their emails private (so as to
not have unwanted advertisements posted based on the content of their emails). In such a scenario, it is quite
reasonable to assume that Amazon or Google have the infrastructure to create tamper-proof hardware tokens
in large scale while the clients cannot be expected to create tokens on their own. Most of the prior works
assume (require) that both parties have the capability of constructing tokens. When relying on non-black-
box techniques, the work of [CKS+14] shows how to construct UC-OT using a single stateless token and
consequently requires only one of the parties to create the token. The work of Moran and Segev in [MS08] on
the other hand shows how to construct UC-secure two-party computation via a black-box construction where
tokens are required to be passed only in one direction, however, they require the stronger model of stateful
tokens. It is desirable to obtain a black-box construction when relying on stateless tokens. Unfortunately,
the work of [CKS+14] shows that this is impossible in the fully concurrent setting. More precisely, they
show that UC-security is impossible to achieve for general functionalities via a black-box construction using
stateless tokens if only one of the parties is expected to create tokens. In this work, we therefore wish to
address the following question:
Is there a meaningful security notion that can be realized in a client-server setting relying on
black-box techniques using stateless tokens where tokens are created only by the server?
1.1 Our Results
As our ﬁrst contribution, we put forth a formulation of the tamper-proof hardware as a “global” function-
ality that provides strong composability guarantees. Towards addressing the various shortcomings of the
composability guarantees of the UC-framework, Canetti et al. [CDPW07] introduced the Global Universal
Composability (GUC) framework which among other things allows to consider global setup functionalities
such as the common reference string model, and more recently the global random oracle model [CJS14]. In
this work, we put forth a new formulation of tokens in the GUC-framework that will satisfy all our desiderata
for composition. Furthermore, in our formulation, we will be able to invoke the GUC composition theorem
of [CDPW07] in a modular way. A formal description of the FgWRAP-functionality can be found in Figure 2
and more detailed discussion is presented in the next section.
to realize GUC-secure protocols in the stronger FgWRAP-hybrid stated in the following theorem:
Theorem 1.1 (Informal) Assuming the existence of OWFs, there exists a two-round protocol that GUC re-
alizes any (well-formed) two-party functionality in the global tamper proof model assuming stateless tokens.
Moreover it only makes black-box use of the underlying OWF.
In the two-party setting we resolve both the round complexity and computational complexity required
4We remark that the work of [CKS+14] considers multiple sessions of OT between a single pair of parties. However, they do
not consider multiple sessions between multiple pairs of parties which is required to realize UC-security in the multiparty setting.
4
As mentioned earlier, any (black-box) non-interactive secure computation protocol is vulnerable to a residual
function attack assuming stateless tokens. Therefore, the best round complexity we can hope for assuming
(stateless) tamper-proof tokens is two which our results shows is optimal. In concurrent work [DKMN15a],
Dottling et al. show how to obtain UC-secure two-party computation protocol relying on one-way functions
via non-black-box techniques.
In the multi-party setting, our ﬁrst theorem follows as a corollary of our results from the two-party
setting.
Theorem 1.2 Assuming the existence of OWFs, there exists a O(df )-round protocol that GUC realizes any
multi-party (well formed) functionality f in the global tamper proof model assuming stateless tokens, where
df is the depth of any circuit implementing f.
Furthermore, this construction relies on the underlying one-way function in a black-box manner. Next,
we improve the round-complexity of our construction to obtain the following theorem:
Theorem 1.3 Assuming the existence of OWFs and stand-alone semi-honest MPC, there exists a three-
round protocol that GUC realizes any multi-party (well formed) functionality in the global tamper proof
model assuming stateless tokens.
We remark that our construction is black-box in the underlying one-way function but unlike our previous
theorem it relies on the code of the MPC protocol in a non-black-box way. In particular, underlying MPC
protocols typically rely on semi-honest oblivious-transfer and our construction is non-black-box in this
assumptions.
Finally, in the client-server setting, we prove the following theorem in the full version [?]:
Theorem 1.4 (Informal) Assuming the existence of one-way functions, there exists a two-round protocol
that securely realizes any two-party functionality assuming stateless tokens in a client-server setting, where
the tokens are created only by the server. We also provide an extension where we achieve UC-security
against malicious clients and sequential and parallel composition security against malicious servers.
In more detail, we provide straight-line (UC) simulation of malicious clients and standard rewinding-based
simulation against malicious servers. Our protocols guarantee security of the servers against arbitrary mali-
cious coordinating clients and protects every individual client executing sequentially or in parallel against a
corrupted server. We believe that this is a reasonable model in comparison to the Common Reference String
(CRS) model where both parties require a trusted entity to sample the CRS. Furthermore, it guarantees
meaningful concurrent security that is otherwise not achievable in the plain model in two rounds.
1.2 Our Techniques
Our starting point for our round optimal secure two-party computation is the following technique from
[GIS+10] for an extractable commitment scheme.
Roughly speaking, in order to extract the receiver’s input, the sender chooses a function F from a
pseudorandom function family that maps f0; 1gm to f0; 1gn bits where m >> n, and incorporates it into
a token that it sends to the receiver. Next, the receiver commits to its input b by ﬁrst sampling a random
string u 2 f0; 1gm and querying the PRF token on u to receive the value v. It sends as its commitment the
string comb = (Ext(u; r) (cid:8) b; r; v) where Ext((cid:1);(cid:1)) is a strong randomness extractor. Now, since the PRF
is highly compressing, it holds with high probability that conditioned on v, u has very high min-entropy
and therefore Ext(u; r) (cid:8) b; r statistically hides b. Furthermore, it allows for extraction as the simulator can
5
observe the queries made by the sender to the token and observe that queries that yields v to retrieve u. This
commitment scheme is based on one-way functions but is only extractable. To obtain a full-ﬂedged UC-
commitment from an extractable commitment we can rely on standard techniques (See [PW09, HV15] for
a few examples). Instead, in order to obtain round-optimal constructions for secure two-party computation,
we extend this protocol directly to realize the UC oblivious transfer functionality. A ﬁrst incorrect approach
is the following protocol. The parties exchange two sets of PRF tokens. Next, the receiver commits to its bit
comb using the approach described above, followed by the sender committing to its input (coms0; coms1)
along with an OT token that implements the one-out-of-two string OT functionality. More speciﬁcally, it
stores two strings s0 and s1, and given a single bit b outputs sb. Speciﬁcally, the code of that token behaves
as follows:
(cid:15) On input b
(cid:3)
; u
(cid:3), the token outputs (sb; decomsb) only if comb = (Ext(u
v. Otherwise, the token aborts.
(cid:3)
; r)(cid:8)b
(cid:3)
(cid:3)
; r; v) and PRF(u
) =
The receiver then runs the token to obtain sb and veriﬁes if decomsb correctly decommits comsb to sb. This
simple idea is vulnerable to an input-dependent abort attack, where the token aborts depending on the value
(cid:3). The work of [GIS+10] provides a combiner to handle this particular attack which we demonstrate is
b
ﬂawed. We describe the attack in Section A. We instead will rely on a combiner from the recent work of
Ostrovsky, Richelson and Scafuro [ORS15] to obtain a two-round GUC-OT protocol.
GUC-secure multi-party computation protocols.
In order to demonstrate feasibility, we simply rely on
the work of [IPS08] who show how to achieve GUC-secure MPC protocols in the OT-hybrid. By instantiat-
ing the OT with our GUC-OT protocol, we obtain MPC protocols in the tamper proof model assuming only
one-way functions. While this protocol minimizes the complexity assumptions, the round complexity would
be high. In this work, we show how to construct a 3-round MPC protocol. Our starting point is to take any
semi-honest MPC protocol in the stand-alone model and compile it into a malicious one using tokens fol-
lowing the paradigm in the original work of Canetti et al. [CLOS02] and subsequent works [Pas03, Lin03].
Roughly, the approach is to deﬁne a commit-and-prove GUC-functionality FCP and compile the semi-honest
protocol using this functionality following a GMW-style compilation.
We will follow an analogous approach where we directly construct a full-ﬂedged F 1:M
CP -functionality that
allows a single prover to commit to a string and then prove multiple statements on the commitment simul-
taneously to several parties. In the token model, realizing this primitive turns out to be non-trivial. This is
because we need the commitment in this protocol to be straight-line extractable and the proof to be about the
value committed. Recall that, the extractable commitment is based on a PRF token supplied by the receiver
of the commitment (and the veriﬁer in the zero-knowledge proof). The prover cannot attest the validity of
its commitment (via an NP-statement) since it does not know the code (i.e. key) of the PRF. Therefore,
any commit and prove scheme in the token model necessarily must rely on a zero-knowledge proof that is
black-box in the underlying commitment scheme. In fact, in the seminal work of Ishai et al. [IKOS09] they
showed how to construct such protocols that have been extensively used in several works where the goal is to
obtain constructions that are black-box in the underlying primitives. Following this approach and solving its
difﬁculties that appear in the tamper-proof hardwire model, we can compile a T -round semi-honest secure
MPC protocol to a O(T )-round protocol. Next, to reduce the rounds of the computation we consider the
approach of Garg et al. [GGHR14] who show how to compress the round complexity of any MPC protocol
to a two-round GUC-secure MPC protocol in the CRS model using obfuscation primitives.
In more detail, in the ﬁrst round of the protocol in [GGHR14], every party commits to its input along with
its randomness. The key idea is the following compiler used in the second round: it takes any (interactive)
6
underlying MPC protocol, and has each party obfuscate their “next-message” function in that protocol,
providing one obfuscation for each round. To ensure correctness, zero-knowledge proofs are used to validate
the actions of each party w.r.t the commitments made in the ﬁrst step. Such a mechanism is also referred
to as a commit-and-prove strategy. This enables each party to independently evaluate the obfuscation one
by one, generating messages of the underlying MPC protocol and ﬁnally obtain the output. The observation
here is that party Pi’s next-message circuit for round j in the underlying MPC protocol depends on its
private input xi and randomness ri (which are hard-coded in the obfuscation) and on input the transcript of
the communication in the ﬁrst j (cid:0) 1 rounds outputs its message for the next round.
To incorporate this approach in the token model, we can simply replace the obfuscation primitives with
tokens. Next, to employ zero-knowledge proofs via a black-box construction, we require a zero-knowledge
protocol that allows commitment of a witness via tokens at the beginning of the protocol and then in a
later step prove a statement about this witness where the commitment scheme is used in a “black-box”
way. A ﬁrst idea here would be to compile using the zero-knowledge protocol of [IKOS09] that facilitate
such a commit-and-prove paradigm. However, as we explain later this would cost us in round-complexity.
Instead we will rely on so-called input-delayed proofs [LS90] that have recently received much attention
[CPS+16a, CPS+16b, HV16]. In particular, we will rely on the recent work of [HV16] who shows how to
construct the so-called “input-delay” commit-and-prove protocols which allow a prover to commit a string
in an initial commit phase and then prove a statement regarding this string at a later stage where the input
statement is determined later. However, their construction only allows for proving one statement regarding
the commitment. One of our technical contributions is to extend this idea to allow multiple theorems and
further extend it so that a single prover can prove several theorems to multiple parties simultaneously. This
protocol will be 4-round and we show how to use this protocol in conjunction with the Garg et al.’s round
collapsing technique.
1.3 Related Work
In recent and independent work, using the approach of [CJS14], Nilges [Nil15, MMN16] consider a GUC-
like formulation of the tokens for the two-party setting where the parties have ﬁxed roles. The focus in
[Nil15, MMN16] was to obtain a formulation that accommodates reusability of a single token for several
independent protocols in the UC-setting for the speciﬁc two-party case. In contrast to our work, they do not
explicitly model or discuss adversarial transferability of the tokens. In particular they do not discuss in the
multi-party case, which is the main motivation behind our work.
Another recent work by Boureanu, Ohkubo and Vaudenay [BOV15] studies the limit of composition
when relying on tokens. In this work, they prove that EUC (or GUC)-security is impossible to achieve for
most functionalities if tokens can be transferred in a restricted framework. More precisely, their impossibility
holds, if the tokens themselves do not “encode” the session identiﬁer in any way. Our work, circumvents
this impossibility result by precisely allowing the tokens generated (by honest parties) to encode the session
identiﬁer in which they have to be used.
2 Modeling Tamper-Proof Hardware in the GUC Framework
In this section we describe our model and give our rationale for our approach. We provide a brief discussion
on the Universal Composability (UC) framework [Can01], UC with joint state [CR03] (JUC) and General-
ized UC [CDPW07] (GUC). For more details, we refer the reader to the original works and the discussion
in [CJS14].
7
Basic UC.
Introduced by Canetti in [Can01], the Universal Composability (UC) framework provides a
framework to analyse security of protocols in complex network environments in a modular way. One of
the fundamental contributions of this work was to give a deﬁnition that will allow to design protocols and
demonstrate security by “locally” analyzing a protocol but guaranteeing security in a concurrent setting
where security of the protocol needs to be intact even when it is run concurrently with many instances
of arbitrary protocols. Slightly more technically, in the UC-framework, to demonstrate that a protocol (cid:5)
securely realizes an ideal functionality F, we need to show that for any adversary A in the real world
interacting with protocol (cid:5) in the presence of arbitrary environments Z, there exists an ideal adversary S
such that for any environment Z the view of an interaction with A is indistinguishable from the view of an
interaction with the ideal functionality F and S.
Unfortunately, soon after its inception, a series of impossibility results [CF01, CKL06, Lin03] demon-
strated that most non-trivial functionalities cannot be realized in the UC-framework. Most feasibility results
in the UC-framework relied on some sort of trusted setup such as the common reference string (CRS) model
[CF01], tamper-proof model [Kat07] or relaxed security requirements such as super-polynomial simulation
[Pas03, PS04, BS05]. When modeling trusted setup such as the CRS model, an extension of the UC-
framework considers the G-hybrid model where “all” real-world parties are given access to an ideal setup
functionality G. In order for the basic composition theorem to hold in such a G-hybrid model, two restric-
tions have to be made. First, the environment Z cannot access the ideal setup functionality directly; it can
only do so indirectly via the adversary. In some sense, the setup G is treated as “local” to a protocol instance.
Second, two protocol instances of the same or different protocol cannot share “state” for the UC-composition
theorem to hold. Therefore, a setup model such as the CRS in the UC-framework necessitates that each pro-
tocol uses its own local setup. In other words, an independently sampled reference string for every protocol
instance. An alternative approach that was pursued in a later work was to realize a multi-version of a func-
tionality and proved security of the multi-version using a single setup. For example, the original feasibility
result of Canetti, Lindell, Ostrovsky and Sahai [CLOS02] realized the FMCOM-functionality which is the
multi-version of the basic commitment functionalityFCOM in the CRS model.
JUC. Towards accommodating a global setup such as the CRS for multiple protocol instances, Canetti
and Rabin [CR03] introduced the Universal Composition with Joint State (JUC) framework. Suppose we
want to analyze several instances of protocol (cid:5) with an instance G as common setup, then at the least, each
instance of the protocol must share some state information regarding G (e.g., the reference string in the CRS
model). The JUC-framework precisely accommodates such a scenario, where a new composition theorem
is proven, that allows for composition of protocols that share some state. However, the JUC-model for the
CRS setup would only allow the CRS to be accessible to a pre-determined set of protocols and in particular
still does not allow the environment to directly access the CRS.
GUC. For most feasibility results in the (plain) CRS model both in the UC and JUC framework, the sim-
ulator S in the ideal world needed the ability to “program” the CRS. In particular, it is infeasible to allow
the environment to access the setup reference string. As a consequence, we can prove security only if the
reference string is privately transmitted to the protocols that we demand security of and cannot be made
publicly accessible. The work of Canetti, Pass, Dodis and Walﬁsh [CDPW07] introduced the Generalized
UC-framework to overcome this shortcoming in order to model the CRS as a global setup that is publicly