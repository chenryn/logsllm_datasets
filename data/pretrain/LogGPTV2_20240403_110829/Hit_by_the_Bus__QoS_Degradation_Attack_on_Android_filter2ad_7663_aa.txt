title:Hit by the Bus: QoS Degradation Attack on Android
author:Mehmet Sinan Inci and
Thomas Eisenbarth and
Berk Sunar
Hit by the Bus: QoS Degradation Attack on Android
Worcester Polytechnic Institute
Mehmet Sinan ˙Inci
PI:EMAIL
Thomas Eisenbarth
Worcester Polytechnic Institute
PI:EMAIL
Berk Sunar
Worcester Polytechnic Institute
PI:EMAIL
ABSTRACT
Mobile apps need optimal performance and responsiveness
to rise amongst numerous rivals on the market. Further,
some apps like media streaming or gaming apps cannot even
function properly with a performance below a certain thresh-
old. In this work, we present the ﬁrst performance degrada-
tion attack on Android OS that can target rival apps using
a combination of logical channel leakages and low-level ar-
chitectural bottlenecks in the underlying hardware.
To show the viability of the attack, we design a proof-of-
concept app and test it on various mobile platforms. The
attack runs covertly and brings the target to the level of
unresponsiveness. With less than 10% CPU time in the
worst case, it requires minimal computational eﬀort to run
as a background service, and requires only the UsageStats
permission from the user. We quantify the impact of our
attack using 11 popular benchmark apps, running 44 dif-
ferent tests. The measured QoS degradation varies across
platforms and applications, reaching a maximum of 90% in
some cases. The attack combines the leakage from logical
channels with low-level architectural bottlenecks to design a
malicious app that can covertly degrade Quality of Service
(QoS) of any targeted app. Furthermore, our attack code
has a small footprint and is not detected by the Android
system as malicious. Finally, our app can pass the Google
Play Store malware scanner, Google Bouncer, as well as the
top malware scanners in the Play Store.
Keywords
Mobile Security, QoS Attack, Mobile Malware, Performance
Degradation
1. MOTIVATION
Smartphones are now integrated into all facets of our
lives—facilitating our daily activities from banking to shop-
ping and from social interactions and to monitoring our vi-
tal health signs. These services are supported by numerous
apps built by an army of developers. The mobile ecosystem
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS ’17, April 02-06, 2017, Abu Dhabi, United Arab Emirates
© 2017 ACM. ISBN 978-1-4503-4944-4/17/04. . . $15.00
DOI: http://dx.doi.org/10.1145/3052973.3053028
is growing at an astounding rate with more than 2.4 million
apps as of September 2016 [3], running on billions of devices.
According to [5], more than a million new Android devices
are activated worldwide, downloading billions of apps and
games each month. Moreover, app revenue totaled to 45
billion dollars in 2015, proving a lucrative business. App
developers big and small are under enormous competition
trying to get a foothold in this growing market and a share
of the huge revenue. As expected, there is ﬁerce competition
amongst competing apps with similar functionality trying to
earn a top ranking in the app store.
In such a cutthroat market, competing app vendors have
a strong incentive to cheat to get ahead in the competition.
In the mobile app market, a strong delivery channel is the
app store where apps which have received high user ratings
are featured on the main page, and ones with low ratings
are essentially buried in the listings and thus have become
invisible to the users. Therefore, if an app developer can
force a negative user experience during the use of a com-
petitor’s app, that could essentially render the competing
app invisible.
To prevent malicious interference mobile platform vendors
commonly implement app level sandboxing. For instance,
on the Application Fundamentals web page, Google states
that: “Each process has its own virtual machine (VM), so an
app’s code runs in isolation from other apps.” [6]. While the
ﬁrst part of this statement is correct, the second part is not.
Android apps running on a system share the same under-
lying physical hardware and therefore are not truly isolated
from each other. This lack of physical isolation can be ex-
ploited, giving an app advantage over a competitor’s app.
Victim app’s operations can be manipulated, degraded or
even brought to a halt. This would be particularly destruc-
tive in real-time applications such as trading, online gaming,
and live streaming.
In this work, we show that such an exploit is indeed prac-
tical. We introduce a technique that exploits architectural
bottlenecks, in combination with logical channel leakages to
degrade the performance of victim apps. The attack app
does not require any root or peripheral access privileges as
needed in sensor-enabled attacks. Also, the performance
footprint of the attack code is very low, the attack is not
detected by any malicious code monitor. We quantify the
performance degradation with wide variety of benchmarks
on various platforms. Since our attack vector only employs
a widely used feature of modern microprocessors, i.e. mem-
ory bus locking, the degradation attack is hard to detect
and mitigate. Furthermore, our app passed the Google Play
Store malware scan and an additional 23 of the most popular
malware scanners listed in the Play Store. This shows evi-
dence that new threats do not necessarily ﬁt into traditional
malware deﬁnitions and require more in-depth analysis with
a broader perspective.
Our Contribution
This work presents and explores all the necessary steps to
successfully implement a Quality of Service (QoS) attack
on mobile devices running Android OS. Speciﬁcally, in this
paper,
– We present the ﬁrst QoS attack on Android OS that
combines architectural bottlenecks and logical channel
leakages to signiﬁcantly degrade the performance of a
victim app.
– We show that our attack is stealthy and hard to mit-
igate by showing that it cannot be detected by the
Android OS, Google Play Store malware scan or mal-
ware scanner apps. Further, the attack exploits the
memory bus locking, a widely used feature of modern
microprocessors hence is hard to mitigate.
– We test and quantify the QoS degradation caused by
our attack using the most popular benchmarks in the
Play Store.
2. BACKGROUND
In this section, we provide the necessary background infor-
mation to better understand our attack. More speciﬁcally,
we go over the Android permission management system and
atomic instructions.
2.1 Android Permission System
Android employs permission management system to give
apps access to various speciﬁc operations, sensors and data.
While some of these permissions require user consent, oth-
ers do not. Before Android 6.0 (API 23), the permission
consent was set to be given at install time. Granting per-
missions at the install time meant that apps listed all the
permissions that they might require during execution and
that the users raced to the install button without checking
them. After Android 6.0, permission requests are presented
when the app needs that speciﬁc permission for the ﬁrst
time. When the user is prompted, he/she can still deny the
permission even though the app is already installed and run-
ning. In cases when the user declines to give the requested
permission, some applications may keep working while oth-
ers crash outright or prompt the user until the permission is
granted. However, not all permissions require user consent.
Depending on the importance of information or service that
an app needs to access, permission might be granted auto-
matically without prompting the user. In the following, we
explain these diﬀerent types of permissions and how they
are handled by the Android operating system.
2.1.1 Normal Permissions
Normal permissions are used when apps require access to
data and resources that are not deemed sensitive by An-
droid. For instance, setting an alarm requires only a Nor-
mal Permission and does require user consent since there is
no serious danger of a privacy leak by setting up an alarm.
Because of this, Normal Permissions do not require explicit
user consent and are automatically granted by the system.
Note that the user can always review which permissions an
app uses, normal or not. While deemed safe and trusted,
normal permissions can also aﬀect the operation of other
apps. For instance, the KILL_BACKGROUND_PROCESSES per-
mission allows an app to shut down other apps using only
their package name. While this permission does not allow
access to any sensitive data, it gives crucial control over
other apps in the system.
2.1.2 Dangerous Permissions
As explained in [1], any permission that is needed to access
a sensitive, private data of the user or a service of the device,
is classiﬁed as Dangerous Permission. The data or the ser-
vice that these permissions allow access to are sensitive, and
therefore require explicit user consent. For instance, using
the device camera requires a Dangerous Permission since an
app can access the camera and take photos when the user
did not intend to do so. In comparison to Normal Permis-
sions, this type of permissions clearly carry a higher risk of
privacy breach and has to be granted carefully. The follow-
ing permission groups are considered dangerous permission
by the Android and require explicit user consent; Calendar,
Camera, Contacts, Location, Microphone, Phone, Sensors,
SMS, and Storage.
Signature Level Permissions
2.1.3
These permissions are granted by the system to apps only
if the app requesting the permission has the same signature
as the app that declared that permission. If these signatures
match, the system grants the permission without prompting
the user. Signature Level Permissions are vendor dependent
and are generally closed by hardware vendors.
2.2 Atomic Operations
Atomic operations are deﬁned as indivisible, uninterrupted
operations that appear to the rest of the system as instant.
While operating directly on memory or cache, atomic op-
eration prevents any other processor or I/O device from
reading or writing to the operated address. This isolation
ensures computational correctness and prevents data races.
While instructions on single thread systems are automati-
cally atomic, there is not guarantee of atomicity for regular
instructions in multi-threaded systems.
In these systems,
an instruction can be interrupted or postponed in favor of
another task. Hence the atomic operations are especially
useful for multi-threaded systems and parallel processing.
In order to ensure atomicity, platforms have diﬀerent tech-
niques. In old x86 systems, processor always locks the mem-
ory bus completely until the atomic operation ﬁnishes, whet-
her the data resides in the cache or in the memory. While
ensuring atomicity, the process also results in a signiﬁcant
performance penalty to the system. In newer systems prior
to Intel Nehalem and AMD K8, memory bus locking was
modiﬁed to reduce this penalty.
In these systems, if the
data resides in cache, only the cache line that the processed
data resides on is locked. This, ‘cache lock’ results in a very
insigniﬁcant system overhead compared to the performance
penalty of memory bus locking. However, when the data
surpasses cache line border and resides in two cache lines,
more than a single cache line has to be locked. In order to
do so, memory bus locking is again employed.
After Intel Nehalem and AMD K8, shared memory bus
was replaced with multiple buses with non-uniform memory
access bridge between them. While the system gets rid of
the memory bottleneck for multiprocessor systems, it also
invalidates memory bus locking. When a multi-line atomic
cache operation needs to be performed, all CPUs has to co-
ordinate and ﬂush their ongoing memory transactions. This
emulation of memory bus locking results in a signiﬁcant per-
formance hit and is the underlying mechanism exploited in
this work.
ADD, AND, CMPXCHG and XOR are some of the in-
structions deﬁned in x86 architecture that can be executed
atomically with a lock preﬁx. Also, XCHG instruction exe-
cutes atomically when operating on a memory location, re-
gardless of the LOCK use.
On the ARM side of things, there are atomic instructions
available in user space as in x86. Prior to ARM v6, SWP in-
struction was used to provide atomic read and writes. Later,
ARM v6k and ARM v7 introduced the LDREX and STREX in-
structions to split the atomic memory update into two pieces
and ensure atomicity [25]. When an atomic memory update
has to be executed, ﬁrst the LDREX instruction is called to
load a word from the memory and tag the memory location
as exclusive. This operation immediately notiﬁes the exclu-
sive monitor, a simple state machine with two states; open
and exclusive [2]. After the memory location is tagged as ex-
clusive, only the parties allowed by the exclusive monitor
can store data to this location. If any other process or user
attempts to store data to the location, the request is denied
and an error state is returned. After the data is updated
outside of the memory and the updated data needs to be
stored, the STREX instruction is called to conditionally store
to the memory location, condition being the right to store
to the location.
Exotic Atomic Operations: Exotic Atomic Operations
are ones that work on uncacheable memory and trigger system-
wide memory bus locking. The fact that some addresses are
uncacheable can be due to data in the operand spanning
multiple cache or memory lines as in the case of a word-
tearing or it can be due to the operand address corresponds
to a reserved space on the physical memory. In any case,
an Exotic Atomic Operation triggers memory bus locking or
ﬂushing of the ongoing memory operations in all of the CPUs
of the system to ensure atomicity and data coherence. As
expected, this results in heavy performance penalty to the
overall system, especially the memory transactions. More-
over, since instructions might take diﬀerent clock cycles to
execute, in order to maximize the ﬂushing penalty, all atomic
instructions available to the platform should be tested to see
how long each instruction takes to complete. Since the ﬂush-
ing is succeeded with the atomic operation itself, the longer
the instruction executes, the worse the performance hit to
the system becomes.
3. RELATED WORK
Malware in Android devices is generally separated into ﬁve
categories as follows; Information Leakage, Privilege Escala-
tion, Financial Charge, Ransomware, and Adware. Here, we
introduce a new category, Quality of Service (QoS) attacks.
QoS attacks aim to degrade and or disrupt the functionality
of legitimate services. In this case, we aim to degrade the
performance of other apps installed on the same mobile de-
vice using similar techniques as micro-architectural attacks.
Many applications being executed in the same shared hard-
ware introduces a potential threat to the sandboxing tech-
niques implemented by the OS. A malicious application might
monitor hardware access patterns, to recover sensitive infor-
mation from a potential victim. Micro-architectural side
channel attacks have been studied over the last 20 years.
The ﬁrst practical attacks used the L1 cache as a covert
channel to deduce cryptographic patterns and recover cryp-
tographic keys [24, 10, 7]. Cache attacks usually establish
a relationship between the positions accessed in the cache
and the data used by the victim. However, L1 caches are
core-private resources. Therefore these attacks are restricted
to core co-resident processes. This scenario was deemed
unrealistic. Consequently, micro-architectural attacks did
not receive much attention after the ﬁrst practical realiza-
tions. However, with the increasing popularity of shared
hardware systems, i.e.
cloud and mobile computing, the
micro-architectural attack scenario of attacker and victim
being able to run processes on the same hardware became re-
alistic. Lately, interest in micro-architectural attacks started
to rise again [30, 31]. With the attack scenario established,
follow-up works overcame the issue of only targeting core-
private resources: attacks targeting the Last Level Cache
(LLC) have now widely been studied [29, 22, 19, 18]. Since
the LLC is generally shared across cores multi-core proces-
sors it provides a suitable covert channel to run cross-core
side-channel attacks. Further, the timing diﬀerence between
LLC and memory accesses is higher, therefore, easier to dis-
tinguish.
In addition to caches, other micro-architectural
components have also been exploited to recover sensitive
information. For instance, Branch Target Buﬀers (BTB)
have also shown to provide a good covert channel to ex-
ploit non-constant code execution ﬂows [9, 8]. In these at-
tacks, authors monitor whether the outcome of a branch is
miss-predicted, and use this information to deduce if the
branch has been taken or not in a square and multiply op-
eration. Moreover, architectural side-channels can be used
to covertly communicate or signal presence of co-location as
demonstrated in [17, 28, 16, 23].
Micro-architectural components have been widely exploit-
ed under non-virtualized and virtualized scenarios. How-
ever, little work has been done on exploiting embedded pro-
cessors such as smartphones and tablets at the hardware
level. Although time driven attacks have proven to be eﬀec-
tive in ARM processors [26, 12], these attacks have not been
demonstrated on mobile platforms i.e. devices running a mo-
bile OS like Android or iOS. More recently, access-driven