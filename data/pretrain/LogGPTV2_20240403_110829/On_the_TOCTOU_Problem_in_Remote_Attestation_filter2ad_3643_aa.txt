# Title: On the TOCTOU Problem in Remote Attestation

## Authors:
- Ivan De Oliveira Nunes, UC Irvine, USA
- Sashidhar Jakkamsetti, Rochester Institute of Technology, USA
- Norrathep Rattanavipanon, Prince of Songkla University, Thailand
- Gene Tsudik, UC Irvine, USA

## Abstract
Remote attestation (RA) is a critical technique for verifying the software integrity of remote embedded (IoT) devices. RA not only ensures the integrity of executables but also serves as a foundation for various security services, such as memory erasure, system reset, software updates, and runtime property verification. However, current RA techniques only verify the device's binary at the time of execution, leaving a window for transient malware to go undetected. This problem, known as Time-Of-Check-Time-Of-Use (TOCTOU), remains unaddressed in hybrid RA architectures.

In this work, we introduce Remote Attestation with TOCTOU Avoidance (RATA), a provably secure approach to address the TOCTOU problem. RATA ensures that even self-erasing malware cannot hide its presence. We present two variants, RATAA and RATAB, suitable for devices with and without real-time clocks, respectively. Both variants are formally verified and publicly available, demonstrating low hardware overhead and no additional runtime overhead compared to existing hybrid RA architectures. In fact, RATA reduces the time complexity of RA computations from linear to constant time.

## CCS Concepts
- Security and privacy → Embedded systems security; Formal security models; Logic and verification; Security protocols.

## Keywords
- Remote Attestation; TOCTOU attacks; Hardware Security Monitor; Formal Verification; Linear Temporal Logic; Cryptography; Reduction Proofs

## ACM Reference Format
Ivan De Oliveira Nunes, Sashidhar Jakkamsetti, Norrathep Rattanavipanon, and Gene Tsudik. 2021. On the TOCTOU Problem in Remote Attestation. In Proceedings of the 2021 ACM SIGSAC Conference on Computer and Communications Security (CCS '21), November 15–19, 2021, Virtual Event, Republic of Korea. ACM, New York, NY, USA, 16 pages. https://doi.org/10.1145/3460120.3484532

## 1. Introduction
Over the past two decades, our society has become increasingly dependent on specialized computing devices, often referred to as embedded, "smart," CPS, or IoT devices. These devices perform a wide range of functions in everyday life and vary in computational, storage, and communication capabilities. Despite their diverse purposes, these devices are common targets for malicious exploits and malware.

At the lower end of the spectrum, Micro-Controller Units (MCUs) are designed with strict constraints on cost, size, and energy consumption. Examples include TI MSP430 and Atmel ATMega AVR. These MCUs, which often interface with digital and physical domains and perform safety-critical functions, lack the resources to implement sophisticated security mechanisms. In this context, Remote Attestation (RA) has emerged as an effective and inexpensive method to detect unauthorized modifications to the executables of remote low-end devices. RA also serves as a foundation for other security services, such as software updates, control-flow integrity verification, and proofs of remote software execution.

RA typically involves a challenge-response protocol between a trusted entity, the Verifier (Vrf), and an untrusted remote device, the Prover (Prv). The process is as follows:

1. Vrf sends an attestation request with a challenge (Chal) to Prv.
2. Prv receives the request, computes an authenticated integrity check over a predefined memory region, and returns the result to Vrf.
3. Vrf checks the result to ascertain the integrity of Prv's memory state.

The integrity check is usually implemented as a Message Authentication Code (MAC) computed over the attested memory region. The MAC requires a unique secret key, K, which must be stored securely and inaccessible to any software running on Prv, except for privileged and immutable attestation code.

Hybrid RA, based on hardware/software co-design, is particularly suitable for low-end embedded devices. In hybrid RA, the integrity-ensuring function is implemented in software, while hardware controls its execution to detect violations. This approach provides similar security guarantees to more expensive hardware-based RA methods, such as those using a Trusted Platform Module (TPM), while minimizing hardware modifications.

Despite its benefits, current hybrid RA architectures have a significant limitation: they only measure the state of Prv's executables at the time of RA execution. They provide no information about the state before or between consecutive RA measurements, leading to the TOCTOU problem. While variants of this problem have been discussed, it remains unsolved in the context of hybrid RA.

The TOCTOU problem allows transient malware to infect a device, perform nefarious tasks, and erase itself before the next attestation, thus evading detection. This is particularly harmful in scenarios where numerous MCUs report measurements over extended periods. For example, in a smart city, erroneous energy consumption measurements can lead to power outages if the malware reprograms the sensors back to their expected state between RA instances.

Our approach to mitigating the TOCTOU problem leverages a minimal, formally verified hardware component to provide historical context about the state of Prv's program memory. This is achieved through secure logging of the latest timing of program memory modifications in a protected memory region. This new feature is seamlessly integrated into the underlying RA architecture and is shown to be secure.

We propose two techniques, RATAA and RATAB, for devices with and without real-time clocks, respectively. Both techniques satisfy the formal definition of TOCTOU-Security and are accompanied by a publicly available, formally verified implementation. Our evaluation demonstrates low hardware overhead and significant reductions in RA computational complexity.

## 2. Scope
This section delineates the scope of our work in terms of targeted devices and desired security properties.

### Low-End Devices
Our focus is on CPS/IoT sensors and actuators with low computing power, such as Atmel AVR ATmega and TI MSP430. These devices are based on low-power single-core MCUs with limited program and data memory. They typically run software atop "bare metal" and require efficient and secure solutions for remote attestation.