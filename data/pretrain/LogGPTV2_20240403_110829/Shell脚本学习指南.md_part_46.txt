---
## Page 278
266
第9章
Shel1 = */usr/1ocal/bin/ksh*
print *export IxprrIL&=/var/tnp/myfi1e.in* 1 She11
print *export 0UTPUTFILE=/var/tag/myfi1e.out* 1 She11
print *env 1 grep PUTFILE* 1 Shel1
close (Shel1)
这种方法还提供一个功能是：你可以选择Shell，不过缺点是无法在所有平台上都能取回
退出状态值。
9.8用户定义函数
谈到这里，我们所提过的awk语句已足够编写任何数据处理程序了，由于站在人类的角
度，很难了解大型程序块，因此我们需要将这类的块切割成更易于管理的小数据块。绝
大多数程序语言都能通过各式各样的函数、方法、模块、包及子例程，完成此功能。为
达到简化，awk只提供了函数。就和C一样，awk函数也可选择性地返回标量值，只有
该函数的文件或是代码可以清楚地说明调用者是否可以如期地得到返回值。
函数可定义在程序顶层的任何位置：成对的模式/操作组之前、之间、之后。在单一文
件的程序里，惯例是将所有函数放在成对的模式/操作码之后，且让它们依字每顺序排
列，这对人类而首，读起来袭很方使，不过对awx而言并没有任何特别之处，
函数定义如下：
function name(argl, &rg2, ..., argn)
statement (s)
数也可用于程序它处，调用的形式为：
name(exprl, expr2, ..-, exprn)
您略任何的返同值
result = name (expr1, expr2, .-, exprn)
将返回值存辅到result中
在每个调用点上的表达式，都提供初始值给函数参数型变量。以四括号框起来的参数，
必须紧接于函数名称之后，申间没有任何空白，
对标量参数所做的变动，调用者无从得知，不过对数组的变动就可看见了。换句话说，
标量为传值（by vaule），而数组则为传引l用（byreference）：这对C语言也是这样。
函数体里的returnexpression语句会终止主体的执行，井将expression的值与控
制权传给调用点。如果expression省略，则返回值由实现期定义。我们测试过的所有
www.TopSage.com
---
## Page 279
awk的惊人表现
267
系统，返回的不是数字零就是空字符申。POSIX则未对漏失return语句或值时的议题
给出说明。
所有用于函数体且未出现在参数列表里的变量，都被视为金局性（global）的。awk允
许在被调用函数中的参数比函数定义里所声明的参数还要少，额外的参数会被视为局部
（local）变量，这类变量一般都用得到，所以惯例上是将它们列在函数参数列表里，并
在字首前置一些额外的空白，如例9-2所示，这个额外参数就如同awk里的其他变量一
样，在函数内容中会初始化为空字符串，
例9-2：在数组中查找一值
function find_key (array, value,
key1
查找array[1L寻找value，井返网array[key]=value
的key，如果找不到该值，则返回
for (key in azray)
if (array[key]  =z value)
return key
return **
如果无法成功地将局部变量列为额外的函数参数，则在调用程序使用到变量时，会很难
找到bug。gawk提供了--dump-variables选项协助这一检查操作。
awk就像大部分的程序语言：其函数也能调用自已，这就是大家所知道的递归
（recursion）.显然这时候，程序设计就必频准备好什么时候该结束递归：一般的做法是，
在每个连续性的调用上，都让工作变得越来越少，这么一来到了某个节点就没有再进一
步递归的必要了。例9-3展现的是一个著名的例子，其基础的数字理论是由著名的希腊
数学家歌几里德所提出的方法，寻找两个整数的最大公分母。
例9-3：欧几里德的最大公分毒算法
function ged(x, Y.
r)
返同整数×与Y的最大公分母
× = int (x)
y = int (y)
X*x quad a
return (r == 0) ? y 1 gcd(y。 r)
r =x e y
如果我们增加这个操作
( α = gcd($1, $2): print'=gcd(* $1 *, - $2 *) =*, o }
www.TopSage.com
---
## Page 280
268
第9.章
式：
S ecbo 2577030972 1amk -fgcd.awk
25770 30972
30972 25770
25770 5202
4962240
5202 4962
162 78
240 162
gcd(25770, 30972) = 6
78 6
欧几里德算法所采用的步骤相对较少，所以，没有awk里调用堆栈（callstack）溢出
的危险，调用堆栈用于保存嵌套函数调用历史的数据。然而，并非总是这个情况，还有
一特殊的嵌套函数，是由德国数学家WilhelmAckermann（注3）在1926年所发现，其
值与遇归深度的成长速度都比指数来得快很多。它可以用awk的代码定义，见例9-4。
例 9-4：Ackermann 之 worse-than-exponential函数
function ack(a, b)
N++
if (a == 0)
计算递归深度
else if (b == 0)
return (b + 1)
return (ack(a -1, 1))
else
return (ack(a - 1, ack(a, b - 1)))
如果我们将测试操作当作它的参数：
[N = 0; print *ack（* s1 ·,*s2 *)-,ack（s1，$2)，*[*N*cal1s]*)
然后在测试文件中执行它，会发现：
$echo 2 21awk -f ackermann.avk
ack(2, 2)=7[27ca11s]
$ echo 3 3 1 avk -f ackermann.avk
ack(3. 3) *
61 [2432 ca11s]
$ ecbo 3 41
125 [10307 ca11s]
ak -f ackermann.avk
ack(3, 4) =
注3：
见 hrtp://mathworld.wolfram.com/AckermannFunction.html可了每 Ackermann函数的开
景与历史信息。
www.TopSage.com
---
## Page 281
awk的惊人表现
269
S echo 3 8 1awk -f ackermamn.awk
ack(3, 8) = 2045 [2785999 ca116]
ack（4，4）是完全无法计算的。
9.9字符串函数
在9.3.2节里我们介绍过length（string）函数，用来返国字符串string的长度。其
他常见的字符串运算，则包括有连接、数据格式化、字母大小写转换、匹配、查找、分
割、字符申替换，以及子字符串提取。
9.9.1子字符串提取
提取子字符串的函数：substr（string，start，len），会返回一份由string的
start字符开始，共Ien个字符长度的子字符串副本。字符的位置，从I开始编号：
substr（abcde'，2，3）将返回“bcd°。Ien参数可省略，省略时，则默认为
length（string）-start+1，选出字符串的剩余部分。
substr（）里的参数超出范围时不是一个错误，但是结果会视实际情况而定，例如nawk
与gawk计算substr（"ABC"，-3，2）的结果为*AB"，而mawk产生的是空字符串"*。
如果为substr（*ABC*，4，2）与substr（“ABC*，1，0）则上述三者所得到的结果
都为空字符串。gawk的--lint选项可诊断出substr（）调用里超出范围的参数。
9.9.2字母大小写转换
有些字母表将大写与小写视为不同格式，在字符串查找与匹配中，通需会要求忽略字母
大小写。awk提供了两种函数来做这件事：tolower（string）会返回将所有字母改为
同义的小写的string副本，而toupper（string）则返国被改为大写字母的 string
副本。所以 tolower(aBcDeF123*)返回“abcdef123°，toupper[*aBcDeF123")返
回“ABCDEF123”，这些功能在ASCII字母下可运行无误，但无法确切地转换重音字母。
它们也无法正确地处理罕见字母，例如德文小写的B均发s的尖悦音），其大写形式为两
个字每SS，
9.9.3字符串查找
index（string，find)查找string里是否有字符串find，然后返国scring里find
字符串的起始位置，如果在string里找不到find，则返目0。例如index（*abcdef"，
*de")会返国4。在9.9.2节里会告诉你，例如index（tolower（string），
www.TopSage.com
---
## Page 282
270
第9章
tolower（find））可以在查找字符串时忽略大小写。由于整个程序里，有时会需要区分
大小写，所以gawk提供了一个好用的扩展：设置内建变量IGNORECASE为非零值，以
忽略在字符申匹配、查找以及比较时字母的大小写。
index（）会寻找第个出现的子字符串，不过有时你要的是最后一个。并没有标准的
函数可以做这件事，不过可以自已写一个，很简单，见例9-5。
例9-5：反向的字将串查找
function rindex(string, find,
k, ns, nf)
返闻string里最后个出现的find的索引
如果我不到，则返回0
ns = length(string)
nf = length(find)
for (k = ns + 1 - nf: k >= 1; k--)
if (substr (string, k, nf) == find)
0 uxnqaz
return k
循环由k值开始，对齐字符串string与find的结尾，从string中提取出与find等
长的子字符串，与find比较。如果匹配，则x就是你要的最后一个出现的素引1，然后
函数返回该值，否则，我们再退回一个字符，直到k退回到string的开头才终止循环。
如果一直退到起始处都无法匹配成功，则表示在string里找不到find，我们就返回索
引为0。
9.9.4字符串匹配
match（string，zegexp）将string与正则表达式regexp匹配，如果匹配，则返回
匹配stzing的索引l，不匹配，则返回o.这种方式提供了比表达式（string-zegexp）
还多的信息，后者只能得到计算值1或0。另外match（)也具有一个有用的副作用：它
会将全局变量RSTART设为在string申要开始匹配的素引I值，面将RLENGTH设为要匹
配的长度。而匹配子字符串则以 substr（string.RSTART，RLENGTH）表示。
9.9.5字符串替换
awk在字符申替换功能上，提供两个函数：sub（zegexp，replacement，target）与
gsub（zregexp，replacement，tazget)，sub()将tazget与正则表达式regexp
进行匹配，将最左边最长的匹配部分替换为字符串replacement。gsub（）的运行则有
点类似，不过它会替换所有匹配的字符串（前置g表示global全局之意）。这两种函数
www.TopSage.com
---
## Page 283
awk的惊人表现
都返回替换的数目，如省略第三个参数，则其默认值为当前的记录S0，这两个函数是不COIm1
常用的，因为它们会修改标量参数：因此，它们无法以awk语言本身来编写。举例来说，
支票开具记录软件可能会使用gsub（/[^S-0-9.，]/."*"，amount）将所有不能公开
的金额全替换为星号。
在sub(regexp，replacement,target)或gsub(regexp，replacement,target)
的调用里，每个replacement里的字符&都会被替换为target中与regexp匹配的
文本。使用&可关闭这一功能，而且请记得如果你要在引号字符串里使用它时，以双
反斜杠转义它。例如gsub（/[aeiouyAEIOUY]/，“&&"）令所有当前记录s0里的元音
字母乘以两倍，面gsub（/[aeiouyAEIOUY】/，*\\&\\&）则是将所有的元音字母替换
为一对&符号。
gawk提供了一个通用性的函数：gensub（），详细用法可参见gawk（1）使用手册。
要让数据减少，替换通常比索引与子字符申运算好用。可以想一下，从具有如下文本文
件内的一个赋值中，提取字符串值的问题，如下所示：
composer *P.D.Q.Bach*
如果以替换的方式，则我们可以用：
sub(/^ *[a-z]+ * **/, **, value)
value = $0
sub(/* *s/, **, value)
不过以索引方式，则会像这样：
start =index（$0,*\*)+1
end = start - 1+ index(substr ($0, start), *\**)
value = substr($0, start,end - start)
我们得更小心地计算字符，也无法准确地匹配数据模式，且还得建立两个子字符串。
9.9.6字符串分割
awk针对当前输人记录S0自动提供了方便的分割为S1、S2、"、SNF，也可以函数来
做：split（string.array，regexp）将string切割为片段，并存储到array里
的连续元案。在数组里，片段放置在匹配正则表达式regexp的子字符串之间。如果
regexp省略，则使用内建字段分隔字符Fs的当前默认值。函数会返回array里的元
素数量。例9-6为示范split（）的用法
www.TopSage.com
---
## Page 284
272
第9章
例9-6：分割字段程序的测试
print *\nFle1d separator = FS = \** Fs *\**
for (k = 1; k <= n; k++)
n = split ($0, parts)
。[x]sred .\ = [。 x ,]ered, qu.ad
print *\nField separator = \*I \*
n = split ($0, part6, *[ 1*)
for (k = 1; k <= n; k+)
*\。[x19xed ..\ =[.×.19xpd, 4u12d
print *\nField separator = \*:\**
n = split ($0, parts, *:*)
for (k = 1; k c= n; k+)
--\.[x]912ed .\ =[.x.)e2xed,au7.zd
print **
3
如果我们将例9-6的程序放进文件里，而且以互动模式执行它，即可了解split（）的运
行：
$ awk -f eplit.awk
Harold
and Maude
Pield separator = PS =  *