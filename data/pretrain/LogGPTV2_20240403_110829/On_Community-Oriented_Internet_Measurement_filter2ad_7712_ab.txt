### Limited TTL with Web-of-Trust

By limiting the Time-to-Live (TTL) values and combining them with a web-of-trust (see § 3.2), we mitigate potential clogging issues that could arise from overly long TTLs.

### Time Synchronization

Measurement Points (MPs) are expected to be roughly time-synchronized, typically within seconds rather than minutes. This synchronization can be achieved using a heartbeat mechanism built on top of the generic platform.

### Unique Identifiers for Measurements

Using a unique identifier for each measurement avoids naming conflicts between MPs and ensures that the results are stored only once in the Distributed Hash Table (DHT). However, these results can be indexed in various ways. The key `U` will be placed in both the results table specified in the measurement request and the results table advertised by the MP as the repository for all its results. Additional pointers can be placed in other tables as deemed appropriate by the MP (e.g., a table for all ping measurements taken in Europe).

### DHT Entry Size Limitations

DHTs often have size limitations for each entry. For example, OpenDHT has a 1024-byte limit per record. This may be insufficient for many measurement results, requiring MPs to split the results across multiple entries. Consumers of these results must then reassemble the pieces. To simplify this process, we provide fragmentation and reassembly primitives, allowing MPs and consumers to use alternate `put()` and `get()` functions that abstract away the necessary steps.

### Example Usage

#### MP Registration
When an MP comes online, it registers four pieces of information in the "AllMPs" master table:
1. The type and version of the measurement (e.g., `ping-0.45b`).
2. The name of the request queue it services (e.g., `reqQ`).
3. The name of the list where it adds results upon completion (e.g., `respQ`).
4. Other ancillary data (e.g., location, operating system version).

Example:
```plaintext
put ("AllMPs", "ping-0.45b reqQ respQ extra info")
```

#### Finding MPs
Researchers can access the "AllMPs" table to find MPs, their capabilities, and the tables they use.
Example:
```plaintext
get ("AllMPs") ⇒ ping-0.45b reqQ respQ extra
```

#### Measurement Request
After identifying suitable MPs, researchers request a measurement by adding an entry to the MP's request queue, specifying:
1. The time the measurement should be undertaken (e.g., `184866301`).
2. The name of the result queue the researcher will monitor (e.g., `MyResults`).
3. Arguments for the measurement tool (e.g., `-n www.icir.org`).

Examples:
```plaintext
put ("reqQ", "184866301 MyResults -n www.icir.org")
put ("reqQ", "184866601 MyResults -n www.icir.org")
```

#### Measurement Point Polling
Periodically, the MP polls the DHT to retrieve its request queue. If the MP sketched above polled, it would find the two measurements inserted into the queue.
Example:
```plaintext
get ("reqQ") ⇒ 184866301 MyResults -n www.icir.org
184866601 MyResults -n www.icir.org
```

#### Running Measurements
Upon receiving requests, the MP schedules and executes the measurements. After completing the measurement, the MP generates a universally unique identifier (e.g., `U`) and places the results in the DHT. It then places pointers to the results in its own result queue and the queue requested by the researcher.
Example:
```plaintext
put (U, R)
put ("respQ", U)
put ("MyResults", U)
```

#### Researcher Retrieving Results
The researcher polls the result queue provided in their request to retrieve pointers to the measurement results. Following these pointers yields the results.
Example:
```plaintext
get ("MyResults") ⇒ U
get (U) ⇒ measurement results (R, in this case)
```

#### Watcher Retrieving Results
An uninvolved researcher can watch results roll into the DHT based on others' requests. They first identify MPs conducting desirable measurements, then poll the MP’s response queue for pointers to the results.
Example:
```plaintext
get ("respQ") ⇒ U
get (U) ⇒ measurement results (R, in this case)
```

### Security

The system has several security vulnerabilities, including:
1. **Load Increase**: A requester can increase the load on an MP by requesting large quantities of measurements.
2. **Distributed Attacks**: The distributed nature of the system allows a requester to coax many MPs to send traffic towards a victim.
3. **Anonymity Layer**: An attacker could launder requests through the infrastructure to gain anonymity.

To mitigate these issues:
- **Best Effort Service**: Requests receive best-effort service, and MPs can implement local policies to limit the rate and resource consumption of measurements.
- **Community-Based Approach**:
  - **Information Sharing**: MPs inform each other about their ongoing measurements to assess the load on targets.
  - **Cryptographic Signing**: All DHT entries are cryptographically signed, and a web-of-trust is established to recognize legitimate researchers.

### Primitives

Our system provides high-level abstractions to aid researchers in integrating new tools and data collection techniques:
- **Registration**: MPs register and maintain their presence and information about the measurement tools they provide.
- **Removing Duplicates**: An abstraction to expose only previously unseen items.
- **Assessing Trust**: Primitives to interact with the web-of-trust and assess a requester’s legitimacy.
- **Fragmentation and Reassembly**: Primitives to handle the fragmentation and reassembly of measurement results.
- **Miscellaneous Tasks**: Common tasks such as deriving a measurement schedule and implementing an event loop.

### Passive Measurements

Passive monitors can also be used in our system in two forms:
- **By-Request Monitoring**: A researcher can request a specific facet of the network to be monitored for a prescribed amount of time.
- **Continuous Monitoring**: Passive monitors run continuously and dump results into the DHT for public consumption, with optional anonymization and sanitization.

### Summary

We propose a measurement platform with no dedicated infrastructure, utilizing an existing overlay substrate. This platform is resilient to failures and can grow and shrink naturally with community needs. We have built a small prototype that includes a generic client and an MP providing traceroute measurements on request. This prototype is aiding us in developing a toolkit for the broader community.

### Acknowledgments

We thank Ethan Blanton, Josh Blanton, and Yaohan Chen for discussions, and Vern Paxson and anonymous reviewers for valuable suggestions. This work was sponsored by NSF grants ITR/ANI-0205519, NSF-0722035, and NSF/CNS-0721890.

### References

1. PREDICT: Protected Repository for the Defense of Infrastructure Against Cyber Threats, <http://www.predict.org>
2. CAIDA. Archipelago measurement infrastructure, <http://www.caida.org/projects/ark/>
3. CAIDA. Internet Measurement Data Catalog, <http://www.datcat.org>
4. CAIDA. Skitter, <http://www.caida.org/tools/measurments/skitter/>
5. claffy, k., Crovella, M., Friedman, T., Shannon, C., Spring, N.: Community-Oriented Network Measurement Infrastructure (CONMI) Workshop Report. ACM Computer Communication Review 36(2), 41–48 (2006)
6. Kalidindi, S., Zekauskas, M.J.: Surveyor: An infrastructure for internet performance measurements. In: INET 1999 (1999)
7. Paxson, V., Mahdavi, J., Adams, A., Mathis, M.: An architecture for large-scale internet measurements. IEEE Communications 36(8), 48–54 (1998)
8. Rabinovich, M., Triukose, S., Wen, Z., Wang, L.: Dipzoom: the internet measurements marketplace. In: 9th IEEE Global Internet Symp. (2006)
9. Rhea, S., Godfrey, B., Karp, B., Kubiatowicz, J., Ratnasamy, S., Shenker, S., Stoica, I., Yu, H.: OpenDHT: A Public DHT Service and Its Uses. In: SIGCOMM (2005)
10. Spring, N., Wetherall, D., Anderson, T.: Scriptroute: A public internet measurement facility. In: Usenix Symp. on Internet Technologies and Systems (2003)