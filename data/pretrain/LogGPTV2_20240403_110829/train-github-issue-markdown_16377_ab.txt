         * @param options
         */
        matchAll(options: ServiceWorkerClientsMatchOptions): Promise>;
        /**
         * Opens a service worker Client in a new browser window.
         *
         * @param url A string representing the URL of the client you want to open
         * in the window.
         */
        openWindow(url: string): Promise;
        /**
         * Allows an active Service Worker to set itself as the active worker for a
         * client page when the worker and the page are in the same scope.
         */
        claim(): Promise;
    }
    /**
     * Extends the lifetime of the install and activate events dispatched on the
     * ServiceWorkerGlobalScope as part of the service worker lifecycle. This
     * ensures that any functional events (like FetchEvent) are not dispatched to
     * the ServiceWorker until it upgrades database schemas, deletes outdated cache
     * entries, etc.
     */
    interface ExtendableEvent extends Event {
        /**
         * Extends the lifetime of the event.
         * It is intended to be called in the install EventHandler for the
         * installing worker and on the active EventHandler for the active worker.
         *
         * @param all
         */
        waitUntil(all: any): any;
    }
    /**
     * The parameter passed into the ServiceWorkerGlobalScope.onfetch handler,
     * FetchEvent represents a fetch action that is dispatched on the
     * ServiceWorkerGlobalScope of a ServiceWorker. It contains information about
     * the request and resulting response, and provides the FetchEvent.respondWith()
     * method, which allows us to provide an arbitrary response back to the
     * controlled page.
     */
    interface FetchEvent extends Event {
        /**
         * Returns a Boolean that is true if the event was dispatched with the
         * user's intention for the page to reload, and false otherwise. Typically,
         * pressing the refresh button in a browser is a reload, while clicking a
         * link and pressing the back button is not.
         * @readonly
         */
        isReload: boolean;
        /**
         * Returns the Request that triggered the event handler.
         * @readonly
         */
        request: Request;
        /**
         * Returns the Client that the current service worker is controlling.
         * @readonly
         */
        client: ServiceWorkerClient;
        /**
         * Resolves by returning a Response or a network error to Fetch.
         *
         * @param all
         */
        respondWith(all: any): Response;
    }
    /**
     * Represents a service worker. Multiple browsing contexts (e.g. pages, workers,
     * etc.) can be associated with the same ServiceWorker object.
     */
    interface ServiceWorker extends Worker {
        /**
         * Returns the ServiceWorker serialized script URL defined as part of
         * ServiceWorkerRegistration. The URL must be on the same origin as the
         * document that registers the ServiceWorker.
         * @readonly
         */
        scriptURL: string;
        /**
         * Returns the state of the service worker. It returns one of the following
         * values: installing, installed, activating, activated, or redundant.
         * @readonly
         */
        state: string;
        /**
         * An EventListener property called whenever an event of type statechange
         * is fired; it is basically fired anytime the ServiceWorker.state changes.
         *
         * @param [statechangeevent]
         */
        onstatechange: (statechangeevent?: any) => void;
    }
    /**
     * The PushSubscription interface provides a subcription's URL endpoint and
     * subscription ID.
     */
    interface PushSubscription {
        /**
         * The endpoint associated with the push subscription.
         * @readonly
         */
        endpoint: any;
        /**
         * The subscription ID associated with the push subscription.
         * @readonly
         */
        subscriptionId: any;
    }
    /**
     * The PushManager interface provides a way to receive notifications from
     * third-party servers as well as request URLs for push notifications.
     * This interface has replaced functionality offered by the obsolete
     * PushRegistrationManager.
     */
    interface PushManager {
        /**
         * Returns a promise that resolves to a PushSubscription with details of a
         * new push subscription.
         */
        subscribe(): Promise;
        /**
         * Returns a promise that resolves to a PushSubscription details of
         * the retrieved push subscription.
         */
        getSubscription(): Promise;
        /**
         * Returns a promise that resolves to the PushPermissionStatus of the
         * requesting webapp, which will be one of granted, denied, or default.
         */
        hasPermission(): Promise;
    }
    /**
     * Represents a service worker registration.
     */
    interface ServiceWorkerRegistration extends EventTarget {
        /**
         * Returns a unique identifier for a service worker registration.
         * This must be on the same origin as the document that registers
         * the ServiceWorker.
         * @readonly
         */
        scope: any;
        /**
         * Returns a service worker whose state is installing. This is initially
         * set to null.
         * @readonly
         */
        installing: ServiceWorker;
        /**
         * Returns a service worker whose state is installed. This is initially
         * set to null.
         * @readonly
         */
        waiting: ServiceWorker;
        /**
         * Returns a service worker whose state is either activating or activated.
         * This is initially set to null. An active worker will control a
         * ServiceWorkerClient if the client's URL falls within the scope of the
         * registration (the scope option set when ServiceWorkerContainer.register
         * is first called).
         * @readonly
         */
        active: ServiceWorker;
        /**
         * Returns an interface to for managing push subscriptions, including
         * subcribing, getting an anctive subscription, and accessing push
         * permission status.
         * @readonly
         */
        pushManager: PushManager;
        /**
         * An EventListener property called whenever an event of type updatefound
         * is fired; it is fired any time the ServiceWorkerRegistration.installing
         * property acquires a new service worker.
         */
        onupdatefound: () => void;
        /**
         * Allows you to update a service worker.
         */
        update(): void;
        /**
         * Unregisters the service worker registration and returns a promise
         * (see Promise). The service worker will finish any ongoing operations
         * before it is unregistered.
         */
        unregister(): Promise;
    }
    interface ServiceWorkerRegisterOptions {
        scope: string;
    }
    /**
     * Provides an object representing the service worker as an overall unit in the
     * network ecosystem, including facilities to register, unregister and update
     * service workers, and access the state of service workers
     * and their registrations.
     */
    interface ServiceWorkerContainer {
        /**
         * Returns a ServiceWorker object if its state is activated (the same object
         * returned by ServiceWorkerRegistration.active). This property returns null
         * if the request is a force refresh (Shift + refresh) or if there is no
         * active worker.
         * @readonly
         */
        controller: ServiceWorker;
        /**
         * Defines whether a service worker is ready to control a page or not.
         * It returns a Promise that will never reject, which resolves to a
         * ServiceWorkerRegistration with an ServiceWorkerRegistration.active worker.
         * @readonly
         */
        ready: Promise;
        /**
         * An event handler fired whenever a controllerchange event occurs — when
         * the document's associated ServiceWorkerRegistration acquires a new
         * ServiceWorkerRegistration.active worker.
         *
         * @param [controllerchangeevent]
         */
        oncontrollerchange: (controllerchangeevent?: Event) => void;
        /**
         * An event handler fired whenever an error event occurs in the associated
         * service workers.
         *
         * @param [errorevent]
         */
        onerror: (errorevent?: ErrorEvent) => void;
        /**
         * An event handler fired whenever a message event occurs — when incoming
         * messages are received to the ServiceWorkerContainer object (e.g. via a
         * MessagePort.postMessage() call.)
         *
         * @param [messageevent]
         */
        onmessage: (messageevent?: MessageEvent) => void;
        /**
         * Creates or updates a ServiceWorkerRegistration for the given scriptURL.
         *
         * @param scriptURL The URL of the service worker script.
         * @param [options] An options object to provide options upon registration.
         * Currently available options are: scope: A USVString representing a URL
         * that defines a service worker's registration scope; what range of URLs a
         * service worker can control. This is usually a relative URL, and it
         * defaults to '/' when not specified.
         */
        register(scriptURL: string, options?: ServiceWorkerRegisterOptions): Promise;
        /**
         * Gets a ServiceWorkerRegistration object whose scope URL matches the
         * provided document URL.  If the method can't return a
         * ServiceWorkerRegistration, it returns a Promise.
         *
         * @param [scope] A unique identifier for a service worker registration — the
         * scope URL of the registration object you want to return. This is usually
         * a relative URL.
         */
        getRegistration(scope?: string): Promise;
        /**
         * Returns all ServiceWorkerRegistrations associated with a
         * ServiceWorkerContainer in an array.  If the method can't return
         * ServiceWorkerRegistrations, it returns a Promise.
         */
        getRegistrations(): Promise>;
    }
    /**
     * The parameter passed into the oninstall handler, the InstallEvent interface
     * represents an install action that is dispatched on the
     * ServiceWorkerGlobalScope of a ServiceWorker. As a child of ExtendableEvent,
     * it ensures that functional events such as FetchEvent are not dispatched
     * during installation.
     */
    interface InstallEvent extends ExtendableEvent {
        /**
         * Returns the ServiceWorker that is currently actively controlling the page.
         * @readonly
         */
        activeWorker: ServiceWorker;
    }
    interface ServiceWorkerGlobalScope {
        /**
         * Contains the Clients object associated with the service worker.
         * @readonly
         */
        clients: ServiceWorkerClients;
        /**
         * Contains the ServiceWorkerRegistration object that represents the
         * service worker's registration.
         * @readonly
         */
        registration: ServiceWorkerRegistration;
        /**
         * An event handler fired whenever an activate event occurs — when a
         * ServiceWorkerRegistration acquires a new ServiceWorkerRegistration.active
         * worker.
         *
         * @param [activateevent]
         */
        onactivate: (activateevent?: ExtendableEvent) => void;
        /**
         * Not defined in the spec yet, but it looks like this will be fired when
         * the device is nearly out of storage space, prompting the UA to start
         * claiming back some space from web apps that are using client-side storage,
         * and the current app is targeted.
         *
         * @param [beforeevictedevent]
         */
        onbeforeevicted: (beforeevictedevent?: Event) => void;
        /**
         * Not defined in the spec yet, but it looks like this will be fired when
         * the device is out of storage space, and the UA claims back some space
         * from the current app.
         *
         * @param [evictedevent]
         */
        onevicted: (evictedevent?: Event) => void;
        /**
         * An event handler fired whenever a fetch event occurs — when a fetch()
         * is called.
         *
         * @param [fetchevent]
         */
        onfetch: (fetchevent?: FetchEvent) => void;
        /**
         * An event handler fired whenever an install event occurs — when a
         * ServiceWorkerRegistration acquires a new
         * ServiceWorkerRegistration.installing worker.
         *
         * @param [installevent]
         */
        oninstall: (installevent?: InstallEvent) => void;
        /**
         * An event handler fired whenever a message event occurs — when incoming
         * messages are received. Controlled pages can use the
         * MessagePort.postMessage() method to send messages to service workers.
         * The service worker can optionally send a response back via the
         * MessagePort exposed in event.data.port, corresponding to the controlled
         * page.
         *
         * @param [messageevent]
         */
        onmessage: (messageevent?: MessageEvent) => void;
        /**
         * An event handler fired whenever a notificationclick event occurs — when
         * a user clicks on a displayed notification.
         *
         * @param [notificationclickevent]
         */
        onnotificationclick: (notificationclickevent?: NotificationEvent) => void;
        /**
         * An event handler fired whenever a push event occurs — when a server
         * push notification is received.
         *
         * @param [onpushevent]
         */
        onpush: (onpushevent?: Event) => void;
        /**
         * An event handler fired whenever a pushsubscriptionchange event occurs —
         * when a push subscription has been invalidated, or is about to be
         * invalidated (e.g. when a push service sets an expiration time).
         *
         * @param [pushsubscriptionchangeevent]
         */
        onpushsubscriptionchange: (pushsubscriptionchangeevent?: Event) => void;
        /**
         * Allows the current service worker registration to progress from waiting
         * to active state while service worker clients are using it.
         */
        skipWaiting(): Promise;
        /**
         * TODO GlobalFetch
         * @param url
         * @param init
         */
        fetch(url: string | Request, init?: Object): Promise;
    }
    interface Navigator {
        /**
         * Returns a ServiceWorkerContainer object, which provides access to
         * registration, removal, upgrade, and communication with the ServiceWorker
         * objects for the associated document.
         */
        serviceWorker: ServiceWorkerContainer;
    }
    interface Global extends ServiceWorkerGlobalScope {
        caches: CacheStorage;
    }
    interface NotificationEvent extends Event, ExtendableEvent {
        notification: any;
    }
//cc @tristancaron