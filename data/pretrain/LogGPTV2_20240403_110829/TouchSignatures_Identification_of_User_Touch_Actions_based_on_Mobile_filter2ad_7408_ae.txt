### Table 14: Identification Rate of Phase Two of TouchSignatures (PIN) Under Similar Test Conditions as In-App Attacks

This table presents the identification rate of digits on soft numerical keyboards using sensors.

#### Comparison with Existing Methods
- **Taplogger**:
  - Conducts experiments on Android devices.
  - Identifies 36.4% of digit positions in the first attempt using accelerometer and orientation sensors.
  - Collects data from one user for 20 random 16-digit sequences in 60 rounds.
- **TouchLogger**:
  - Achieves 71.5% accuracy on an Android device using device orientation.
  - Collects around 30 samples per digit from one user.

#### Data Collection and Consistency
- Both Taplogger and TouchLogger collect data from a single user, which is generally more consistent than data from a diverse group of users.
- To verify this, we conducted an experiment with a Nexus 5 Android device, asking one user to repeat the experiment three times, collecting 30 samples for each digit.
- The results are presented in Table 14, showing an increased identification rate of 77% for TouchSignatures, which is better than the results reported by Taplogger and TouchLogger.

### Practical Implications
- Our results demonstrate the feasibility of distinguishing a user's PIN by listening to sensor data via JavaScript code.
- This highlights the limitations in the security policies of mobile operating systems and web browsers, necessitating urgent modifications to update these policies for granting permissions to mobile web browsers to access sensor data.

## 6. Possible Solutions

To suggest appropriate countermeasures, it is essential to identify the entity responsible for access control policies in each situation.

#### Access Control Policies
- **Mobile OS Access Control Policy**:
  - Determines whether the browser has access to device motion and orientation sensor data, regardless of the browser's activity status.
- **Mobile Browser Access Control Policy**:
  - Decides whether a web app can access sensor data, regardless of whether the web app is open in the same tab, different segment, or different tab.

#### Countermeasure Approaches
- **Restrictive Approach**:
  - Deny access to the browser when it is not active.
  - Deny access to web content when running in an inactive tab or a segment with a different web origin.
  - This approach may be too restrictive, disallowing many potential web applications such as health and gaming apps.
- **Flexible Approach**:
  - Notify the user when a web page requests access to sensor data.
  - Provide control mechanisms for the user to set their preferences.
  - This is the current approach for GPS sensor data, and similar measures are needed for device motion and orientation to balance usability and security.

#### User Interface Mock-ups
- Figure 5 presents mock-up interfaces for allowing web pages and OS settings to access motion and orientation data, based on existing solutions for GPS sensor data.
- Users should have three options: allow access indefinitely, allow access only when interacting with the browser or web page, or deny access indefinitely.

#### W3C Specification
- Raising this issue in the W3C specification would help browsers address it systematically.
- We suggest including a section on security and privacy considerations in the new version of the specification.

## 7. Industry Feedback

We reported our research findings to the W3C community and mobile browser vendors, including Mozilla, Opera, Chromium, and Apple, and received positive feedback.

- **Mozilla**:
  - Acknowledged the issue and implemented a patch, currently under testing.
- **Chrome & Opera**:
  - Opera uses Chromium's implementation, so a fix on Chromium will address the issue for Opera.
  - Chrome acknowledged the need to restrict sensor reading from iframes.
- **Safari**:
  - Apple acknowledged the problem and is working on mitigations.
- **W3C**:
  - Recognized the attack vectors and suggested adding a security section to the specification.

The industry feedback confirms that unrestricted JavaScript access to sensor data poses a serious security threat to users. We appreciate the quick and constructive responses and hope the identified problems will be fixed soon.

## 8. Conclusion

In this paper, we introduced TouchSignatures, a practical attack that distinguishes user touch actions and learns their PIN through JavaScript code embedded in a web page. We demonstrated that TouchSignatures can classify user touch actions and identify PIN digits with high success rates.

Our results highlight significant shortcomings in W3C standards, mobile operating systems, and browser access control policies regarding user security. As a countermeasure, we suggest treating device orientation and motion data similarly to GPS sensor data, implementing effective user notification and control mechanisms. Positive industry feedback indicates that serious damage could result from exploiting these attack vectors, and some browser vendors, such as Mozilla and Apple, have already started working on the suggested mitigations.

As future work, we plan to extend TouchSignatures for other security purposes, such as continuous implicit authentication.

## 9. Acknowledgements

We thank the volunteers who contributed to the user studies, anonymous reviewers, the W3C Geolocation Working Group, and mobile browser vendors for their quick responses and constructive communications. The last three authors are supported by ERC Starting Grant No. 306994.

## 10. References

[References listed as provided]

## Appendix A. Popular Browsers

We tested several popular browsers on Android and iOS, including major browsers like Chrome, Firefox, and Opera. The full list of tested Android browsers and their download counts can be seen in Table A.15. Browsers with limited capabilities, such as specialized search engine browsers or email-based browsers, were excluded from the study.

## Appendix B. JavaScript Code to Access Motion and Orientation Data

The JavaScript code used in our experiments sends the orientation and motion sensor data of the mobile device to a NoSQL database on mongolab.com. When the event listener fires, it establishes a socket between the client and the server and continuously transmits the sensor data.

```javascript
window.addEventListener('deviceorientation', function(event) {
    function socketInit() {
        var socket = io.connect();
        socket.on('connected', function() {
            if (window.DeviceOrientationEvent) {
                var gamma = event.gamma;
                var beta = event.beta;
                var alpha = event.alpha;
                socket.emit('OX', gamma);
                socket.emit('OY', beta);
                socket.emit('OZ', alpha);
            }
        });
    }

    if (window.DeviceMotionEvent) {
        window.addEventListener('devicemotion', function(event) {
            var acceleration = event.acceleration;
            var gacc = event.accelerationIncludingGravity;
            var rotationRate = event.rotationRate;
            var interval = event.interval;

            var ax = acceleration.x;
            var ay = acceleration.y;
            var az = acceleration.z;

            var gx = gacc.x;
            var gy = gacc.y;
            var gz = gacc.z;

            var ralpha = rotationRate.alpha;
            var rbeta = rotationRate.beta;
            var rgama = rotationRate.gamma;

            socket.emit('MX', ax);
            socket.emit('MY', ay);
            socket.emit('MZ', az);

            socket.emit('rAlpha', ralpha);
            socket.emit('rBeta', rbeta);
            socket.emit('rGama', rgama);

            socket.emit('MGX', gx);
            socket.emit('MGY', gy);
            socket.emit('MGZ', gz);

            socket.emit('interval', interval);
        });
    }

    socket.on('disconnect', function() {
        alert("Disconnected!");
    });
});
```

This code ensures that the sensor data is continuously transmitted to the server for analysis.