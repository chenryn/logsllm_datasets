Table 14: Identiﬁcation rate of phase two of TouchSignatures (PIN) under the similar test
condition as in-app attacks.
sensors for identifying digits on soft numerical keyboards.
Taplogger performs its experiments on Android devices and identiﬁes
36.4% of the digit positions in the ﬁrst attempt by using accelerometer and
orientation sensors. On the other hand, TouchLogger is able to identify the
digits with 71.5% accuracy on an Android device by using device orientation.
TouchLogger collects around 30 samples per digit from one user, while
Taplogger has the input of one user for 20 random 16-digit sequences in 60
rounds. However, we noticed that in these works the data has been collected
from only one user. In general, data obtained form a single user are more
consistent than those collected from a diversiﬁed group of users. To verify
this, we performed another experiment by simulating the same test condition
as described above with the Android device (Nexus 5) and asked only one
25
user to repeat the experiment 3 times. We collected 30 samples for each
digit. The results are presented in Table 14. As expected, the identiﬁcation
rate of TouchSignatures increased to 77% in this situation, which is better
than the results reported in TapLogger and TouchLogger.
Our results demonstrate the practicality of distinguishing the user’s PIN
by listening to sensor data via JavaScript code. Consequently, TouchSigna-
tures highlights the limitations of the security policies in mobile operating
systems and web browsers. As a result, urgent modiﬁcations are needed
in updating the security policies for granting permissions to mobile web
browsers to access sensor data.
6. Possible solutions
To be able to suggest appropriate countermeasures, we need to ﬁrst iden-
tify the exact entity responsible for the access control policy in each situation.
Mobile OS access control policy decides whether the browser gets access to
the device motion and orientation sensor data in the ﬁrst place, no matter
if the browser is active or not. If access is provided, then mobile browser
access control policy decides whether a web app gets access to the sensor
data, no matter if the web app is open in the same tab and in the same
segment, in the same tab but in a diﬀerent segment, or in a diﬀerent tab.
Hence any eﬀective countermeasure must address changes in both mobile OS
and browser policies with respect to access to such sensor data.
One approach to protect user security would be to require the mobile
OS to deny access to the browser altogether when the browser is not active,
and require the browser to deny access to web content altogether when it
is running in an inactive tab or in a segment of the page with the diﬀerent
web origin. However, this approach may be considered too restrictive as it
will disallow many potential web applications such as activity monitoring for
health and gaming.
A more ﬂexible approach would be to notify the user when a web page
is requesting access to such sensor data, and provide control mechanisms
through which the user is able to set their preferences with respect to such
requests. This is the approach currently taken by both the mobile operating
systems and browsers with respect to providing access to the device location
(i.e., GPS sensor data [1]) when a web page requests such access. We believe
similar measures for device motion and orientation would be necessary in
order to achieve a suitable balance between usability and security. Possible
26
Figure 5: Left: The existing interfaces to allow the web page to access Geolocation in
browser (top) and in mobile OS (down). Right: Our suggested mock-up interfaces to
allow web page (top) and OS setting (down) to access Motion and Orientation data in
browser.
(mock-up) interfaces for this countermeasure, based on existing solutions for
GPS sensor data, are presented in Figure 5. In particular, we think the user
should have three options: either allow access to the browser (in the mobile
OS setting) or web pages (in the browser setting) indeﬁnitely, or allow access
only when the user is working on the browser (in the mobile OS settings)
or interacting with the web page (in the browser settings), or deny access
indeﬁnitely. These three options provided to the user seem to be neither too
few to render the access control ineﬀective, nor too many to exhaust the user
attention span.
Furthermore, we believe raising this issue in the W3C speciﬁcation would
help the browsers to consider it in a more systematic and consistent way. Our
27
suggestion for the new version of the speciﬁcation is to include a section for
security and privacy considerations and discuss these issues in that section
properly.
7. Industry feedback
We reported the results of this research to the W3C community and
mobile browser vendors including Mozilla, Opera, Chromium and Apple.
We discussed the identiﬁed issues with them and received positive feedback
as summarized below.
Mozilla. After we reported to Mozilla about Firefox allowing JavaScript
access to sensor data within an iframe on Bugzilla, a senior platform engineer
from Mozilla stated that: “Indeed, and it should be ﬁxed consistently across
all the browsers and also the spec [W3C speciﬁcation] needs to be ﬁxed”.
Subsequently, a patch has been proposed and implemented by Mozilla and
is currently under test12.
Chrome & Opera. Opera uses the Chromium engine’s implementation
for device orientation. Therefore, ﬁxing the problem on Opera is dependent
on the ﬁx on Chromium. We reported to both Chrome and Opera about their
browsers allowing JavaScript access to sensor data within an iframe and in
the other-tab. After discussing this issue on the Chromium forum, a security
team member of Chrome stated that: “It [i.e. this research] sounds like a
good reason to restrict it [i.e. sensor reading] from iframes”. At the time of
writing this paper, the status of our reported bug in Chromium is “assigned”;
a ﬁx is expected to be rolled out soon. Commenting on the JavaScript
access to sensor data through other-tab, a member of the Opera security
team forwarded their response to us via email stating that: “Opera on iOS
giving background tabs access to the events does seem like an unwanted bug”.
Safari. We reported to Apple about Safari allowing JavaScript access to
sensor data within an iframe and also when the phone is locked. The Apple
security team acknowledged the problem via email stating that: “We have
reviewed your paper and are working on the mitigations listed in the paper”.
W3C. After we disclosed the identiﬁed problems to the W3C community,
the community acknowledged the attack vectors introduced in this paper and
stated that: “This would be an issue to address for any future iterations on
12bugzilla.mozilla.org/show bug.cgi?id=1197901 (login required)
28
this document [i.e. W3C speciﬁcation on mobile orientation and motion[3]]”.
A security issue has been recorded to be taken into account by W3C in this
regard13. The community discussed this issue in their latest meeting and
suggested to add a security section to the speciﬁcation in response to the
ﬁndings of our work14.
The industry feedback conﬁrms that the currently unrestricted JavaScript
access to certain sensor data within a web browser does present a serious secu-
rity threat to the users. We appreciate the quick and constructive responses
received from W3C and browser vendors, and hope the identiﬁed problems
will be ﬁxed in the near future.
8. Conclusion
In this paper we introduced the ﬁrst practical attack that was able to dis-
tinguish user touch actions as well as learning her PIN through JavaScript
code embedded in a web page. We designed and implemented TouchSig-
natures: a simple and eﬀective JavaScript-based attack which when loaded
within the browser was able to listen to the device orientation and motion
sensor data streams and send the data back to a remote server for analysis.
We demonstrated that TouchSignatures was able to distinguish diﬀerent user
touch actions through a k-NN classiﬁer, and PINs through ANN system, re-
spectively. The results show that TouchSignatures can classify user touch
actions and identify her PIN digits with high success rates.
Our results highlight major shortcomings in W3C standards, mobile op-
erating systems, and browsers access control policy with respect to user se-
curity. As a countermeasure which strikes a balance between security and
usability, we suggest that device orientation and motion data be treated sim-
ilarly to GPS sensor data. Eﬀective user notiﬁcation and control mechanisms
for access to such sensor data should be implemented both in mobile operat-
ing systems and in mobile browsers. The positive industry feedback conﬁrms
that serious damage could be caused exploiting the introduced attack vectors.
As a matter of fact, some of the browser vendors such as Mozilla and Apple
have already started working on the mitigations suggested in this paper.
As future work, we would like to extend TouchSignatures for other secu-
rity purposes such as continues (implicit) authentication [11, 6, 20, 7, 24].
13github.com/w3c/deviceorientation/issues/13
14w3.org/2015/10/26-geolocation-minutes.html#item03
29
9. Acknowledgements
We would like to thank the volunteers who contributed to the user studies
of this project. We also thank several anonymous reviewers of this journal
paper and its preliminary version at ASIACCS’15. We thank the W3C Ge-
olocation Working Group and the mobile browser vendors including Mozilla,
Apple, Google, and Opera for their quick responses and constructive com-
munications. The last three authors are supported by ERC Starting Grant
No. 306994.
10. References
[1] W3C Geolocation API Speciﬁcation. http://dev.w3.org/geo/api/spec-
source.html.
[2] W3C Working Draft Document
http://www.w3.org/TR/ambient-light/.
on Ambient Light Events.
[3] W3C Working Draft Document on Device Orientation Event.
http://www.w3.org/TR/orientation-event/.
[4] W3C Working Draft Document on Media Capture and Streams.
http://w3c.github.io/mediacapture-main/getusermedia.html.
[5] A. J. Aviv, B. Sapp, M. Blaze, and J. M. Smith. Practicality of ac-
celerometer side channels on smartphones. In Proceedings of the 28th
Annual Computer Security Applications Conference, pages 41–50. ACM,
2012.
[6] C. Bo, L. Zhang, X.-Y. Li, Q. Huang, and Y. Wang. Silentsense:
Silent user identiﬁcation via touch and movement behavioral biomet-
In Proceedings of the 19th Annual International Conference on
rics.
Mobile Computing and Networking, MobiCom ’13, pages 187–190, New
York, NY, USA, 2013. ACM.
[7] H. Bojinov, Y. Michalevsky, G. Nakibly, and D. Boneh. Mobile device
identiﬁcation via sensor ﬁngerprinting. CoRR, abs/1408.1416, 2014.
[8] L. Cai and H. Chen. Touchlogger: Inferring keystrokes on touch screen
from smartphone motion. In HotSec, 2011.
30
[9] L. Cai and H. Chen. On the practicality of motion based keystroke
inference attack. In S. Katzenbeisser, E. Weippl, L. Camp, M. Volka-
mer, M. Reiter, and X. Zhang, editors, Trust and Trustworthy Comput-
ing, volume 7344 of Lecture Notes in Computer Science, pages 273–290.
Springer Berlin Heidelberg, 2012.
[10] T. Cover and P. Hart. Nearest neighbor pattern classiﬁcation. Informa-
tion Theory, IEEE Transactions on, 13(1):21–27, 1967.
[11] A. De Luca, A. Hang, F. Brudy, C. Lindner, and H. Hussmann. Touch
me once and i know it’s you!: Implicit authentication based on touch
screen patterns. In Proceedings of the SIGCHI Conference on Human
Factors in Computing Systems, CHI ’12, pages 987–996, New York, NY,
USA, 2012. ACM.
[12] T. Halevi, D. Ma, N. Saxena, and T. Xiang. Secure proximity detection
for NFC devices based on ambient sensor data. In Computer Security–
ESORICS 2012, pages 379–396. Springer, 2012.
[13] H. Li, D. Ma, N. Saxena, B. Shrestha, and Y. Zhu. Tap-wave-rub:
Lightweight malware prevention for smartphones using intuitive human
gestures. In Proceedings of the Sixth ACM Conference on Security and
Privacy in Wireless and Mobile Networks, WiSec ’13, pages 25–30, New
York, NY, USA, 2013. ACM.
[14] M. Mehrnezhad, E. Toreini, S. F. Shahandashti, and F. Hao. Touchsig-
natures: Identiﬁcation of user touch actions based on mobile sensors
via javascript (extended abstract). In Proceedings of the 9th ACM Sym-
posium on Information, Computer and Communications Security (ASI-
ACCS 2015). ACM, 2015.
[15] Y. Michalevsky, D. Boneh, and G. Nakibly. Gyrophone: Recognizing
speech from gyroscope signals. In Proc. 23rd USENIX Security Sympo-
sium, 2014.
[16] E. Miluzzo, A. Varshavsky, S. Balakrishnan, and R. R. Choudhury. Tap-
In Proceedings of the 10th
prints: your ﬁnger taps have ﬁngerprints.
international conference on Mobile systems, applications, and services,
pages 323–336. ACM, 2012.
31
[17] M. F. Moller. A scaled conjugate gradient algorithm for fast supervised
learning. Neural Networks, 6(4):525 – 533, 1993.
[18] S. Narain, A. Sanatinia, and G. Noubir. Single-stroke language-agnostic
keylogging using stereo-microphones and domain speciﬁc machine learn-
ing. In Proceedings of the 2014 ACM Conference on Security and Privacy
in Wireless; Mobile Networks, WiSec ’14, pages 201–212, New York, NY,
USA, 2014. ACM.
[19] E. Owusu, J. Han, S. Das, A. Perrig, and J. Zhang. Accessory: password
In Proceedings of the
inference using accelerometers on smartphones.
Twelfth Workshop on Mobile Computing Systems & Applications, page 9.
ACM, 2012.
[20] O. Riva, C. Qin, K. Strauss, and D. Lymberopoulos. Progressive au-
thentication: deciding when to authenticate on mobile phones. In In
Proceedings of 21st USENIX Security Symposium, 2012.
[21] B. Shrestha, N. Saxena, H. T. T. Truong, and N. Asokan. Drone to the
rescue: Relay-resilient authentication using ambient multi-sensing. In
Proc. Eighteenth International Conference on Financial Cryptography
and Data Security, 2014.
[22] L. Simon and R. Anderson. Pin skimmer: Inferring pins through the
camera and microphone. In Proceedings of the Third ACM Workshop
on Security and Privacy in Smartphones & Mobile Devices, SPSM ’13,
pages 67–78, New York, NY, USA, 2013. ACM.
[23] R. Spreitzer. Pin skimming: Exploiting the ambient-light sensor in
mobile devices. In Proceedings of the 4th ACM Workshop on Security
and Privacy in Smartphones & Mobile Devices, SPSM ’14, pages 51–62,
New York, NY, USA, 2014. ACM.
[24] M. Velten, P. Schneider, S. Wessel, and C. Eckert. User identity ver-
iﬁcation based on touchscreen interaction analysis in web contexts.
9065:268–282, 2015.
[25] Z. Xu, K. Bai, and S. Zhu. Taplogger: Inferring user inputs on smart-
phone touchscreens using on-board motion sensors. In Proceedings of the
ﬁfth ACM conference on Security and Privacy in Wireless and Mobile
Networks, pages 113–124. ACM, 2012.
32
Name
Chrome
Opera Mini Fast Browser
Opera browser for Android
Firefox
Dolphin
UC Browser for Android
UC Browser Mini for Android
UC Browser HD
Baidu Browser (fast and secure)
CM Browser Fast & Secure
Mobile Classic (Opera-based)
Photon Flash Player & Browser
Maxthon Browser Fast
Boat Browser for Android
Next Browser for Android
Yandex.Browser
Version
40.0.2214.89
7.6.40234
20.0.1656.87080
34.0.1
11.3.4
10.1.0.527
9.7.0.520
3.4.3.532
4.6.0.6
5.1.44
N/A
4.8
4.3.7.2000
8.2.1
1.17
14.12
#Downloads
500,000,000+
100,000,000+
50,000,000+
50,000,000+
50,000,000+
50,000,000+
10,000,000+
10,000,000+
10,000,000+
10,000,000+
10,000,000+
10,000,000+
5,000,000+
5,000,000+
5,000,000+
5,000,000+
Table A.15: Popular Android web browsers with full capabilities. Browsers with lim-
ited capabilities that do not support multi-tab browsing are excluded. The numbers of
downloads were obtained from the Google Play Store, Jan 2015.
Appendix A. Popular Browsers
We tested several browsers including three major browsers on Android:
Chrome, Firefox, and Opera, and three major browsers on iOS: Safari, Chrome,
and Opera. Other Android browsers were also included in the study due to
their high download counts on the Google Play Store. The full list of tested
Android browsers and their download counts can be seen in Table A.15.
There are a number of browsers with high numbers of downloads but limited
capabilities, e.g., specialised search engine browsers or email-based browsers.
Since these browsers do not support features such as multi-tab browsing,
they are excluded from our study. The iOS App Store does not report the
number of downloads, hence we used a combination of user ratings, iTunes
Charts, and checking the availability of the listed Android browsers on iOS
to discover and select a list of popular browsers on iOS. On both platforms,
we only considered browsers that are available free of charge from the oﬃcial
app stores.
33
Appendix B. JavaScript code to access motion and orientation data
Our JavaScript code, used in diﬀerent parts of the paper, sends the orien-
tation and motion sensor data of the mobile device, if accessible through the
testing browser, to our NoSQL database on mongolab.com. When the event
listener ﬁres, it establishes a socket (by using Socket.IO) between the client
and the server and continuously transmits the sensor data to the database.
window . addEventListener ( ’ d e v i c e o r i e n t a t i o n ’ ,
f u n c t i o n ( event ){
1 f u n c t i o n s o c k e t I n i t (){
// i n i t i a l
s e t t i n g s
3 socket= i o . connect ( ) ;
socket . on ( ’ connected ’ ,
f u n c t i o n (){
( window . DeviceOrientationEvent ){
5 i f
7 var gamma= event . gamma ;
var beta= event . beta ;
9 var alpha= event . alpha ;
socket . emit ( ’OX ’ , gamma ) ;
11 socket . emit ( ’OY ’ , beta ) ;
socket . emit ( ’OZ ’ , alpha ) ; } ) ; }
( window . DeviceMotionEvent ){
13 i f
window . addEventListener ( ’ devicemotion ’ ,
15 var a c c e l e r a t i o n= event . a c c e l e r a t i o n ;
var gacc= event . a c c e l e r a t i o n I n c l u d i n g G r a v i t y ;
17 var
var
r o t a t i o n R a t e= event . r o t a t i o n R a t e ;
i n t e r v a l= event . i n t e r v a l ;
f u n c t i o n ( event ){
25 var gx= gacc . x ;
var gy= gacc . y ;
var gz= gacc . z ;
19 var ax= a c c e l e r a t i o n . x ;
var ay= a c c e l e r a t i o n . y ;
21 var az= a c c e l e r a t i o n . z ;
var
23 var
var
ra lph a= r o t a t i o n R a t e . alpha ;
rbeta= r o t a t i o n R a t e . beta ;
rgama= r o t a t i o n R a t e . gamma ;
socket . emit ( ’MX’ , ax ) ;
27 socket . emit ( ’MY’ , ay ) ;
socket . emit ( ’MZ’ , az ) ;
29 socket . emit ( ’ rAlpha ’ ,
socket . emit ( ’ rBeta ’ ,
31 socket . emit ( ’ rGama ’ ,
r alp ha ) ;
rbeta ) ;
rgama ) ;
socket . emit ( ’MGX’ , gx ) ;
33 socket . emit ( ’MGY’ , gy ) ;
socket . emit ( ’MGZ’ , gz ) ;
35 socket . emit ( ’ i n t e r v a l ’ ,
socket . on ( ’ d i s c o n n e c t ’ ,
37 a l e r t ( ” Disconnected ! ” ) ; } ) ; }
i n t e r v a l ) ; } ) ; }
f u n c t i o n (){
34