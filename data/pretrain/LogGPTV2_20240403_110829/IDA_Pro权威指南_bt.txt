 函数对数据库事件表示兴趣的例子如下所示：
//typedef for event hooking callback functions (from loader.hpp)  
typedef int idaapi hook_cb_t(void *user_data, int notification_code, va_list va);  
//prototype for  hook_to_notification_point (from loader.hpp)  
bool hook_to_notification_point(hook_type_t hook_type,  
                                hook_cb_t *callback,  
                                void *user_data);  
int idaapi idabook_plugin_init() {  
   //Example call to  hook_to_notification_point  
   hook_to_notification_point(HT_IDB, idabook_database_cb, NULL);  
}
通知共分为4 大类：处理器通知（ida.hpp 中的idp_nofity
 ，HT_IDP
 ）、用户界面通知（kernwin.hpp中的ui_notification_t
 ，HT_UI
 ）、调试器事件（dbg.hpp中的dbg_notification
 ，HT_DBG
 ）和数据库事件（idp.hpp中的idp_event_t
 ，HT_IDB
 ）。在每一类事件中，都有大量通知代码用来表示你将会收到通知的特定事件。数据库（HT_IDB
 ）通知的例子包括idb_event::byte_ patched
 ，它指出一个数据库字节已被修补；还包括idb_event::cmt_changed
 ，它指出一个常规注释或可重复注释已被修改。每次发生事件时，IDA 都会调用你注册的回调函数，传递特定的事件通知代码和特定于该通知代码的其他参数。定义每段通知代码的 SDK 头文件详细说明了向每段通知代码提供的参数。
继续前面的例子，我们可以定义一个回调函数处理数据库事件，如下所示：
   int idabook_database_cb(void *user_data, int notification_code, va_list va) {  
      ea_t addr;  
      ulong original, current;  
      switch (notification_code) {  
         case idb_event::byte_patched:  
➊          addr = va_arg(va, ea_t);  
            current = get_byte(addr);  
            original = get_original_byte(addr);  
            msg("%x was patched to %x.  Original value was %x\n",  
                 addr, current, original);  
            break;  
      }  
    return 0;  
  }  
这个特殊的例子仅识别 byte_patched
 通知消息，它打印被修补字节的地址、该字节的新值以及该字节的初始值。通知回调函数利用C++ 可变参数列表 va_list
 ，根据自己收到的通知代码，访问一组数量可变的参数。定义每一段通知代码的头文件指定了为每一段通知代码提供的参数的数量和类型。byte_patched
 通知代码在loader.hpp 文件中定义，接收它的 va_list
 中的一个ea_t
 类型的参数。C++ va_arg
 宏可用于从 va_list
 中检索连续的参数。在前面的例子中，被修补的字节的地址从➊处的va_list
 中检索出来。
下面是对数据库通知事件解除挂钩的一个例子：
void idaapi idabook_plugin_term() {  
   unhook_from_notification_point(HT_IDB, idabook_database_cb, NULL);  
}
只要卸载了功能正常的插件，就应解除它与任何通知之间的挂钩。这也是 PLUGIN.term
 函数的作用之一。如果未能对所有活动的通知解除挂钩，几乎可以肯定，IDA 会在你的插件卸载后不久崩溃。
17.1.4 插件执行
迄今为止，我们已经讨论了几个实例，说明 IDA 如何调用属于某插件的函数。插件加载和卸载操作分别需要调用 PLUGIN.init
 和PLUGIN.term
 函数。用户通过 Edit ▶Plugins 菜单或与插件关联的热键激活插件后，IDA 将调用PLUGIN.run
 函数。最后，你可能需要调用插件注册的回调函数，以响应 IDA 中发生的各种事件。
无论以何种方式执行插件，必须记住几个重要的事实。插件函数从IDA 的主要事件处理循环中调用。如果插件正在执行，IDA 将无法处理事件，包括已排序的分析任务和用户界面更新。因此，你的插件必须尽可能迅速地执行它的任务，然后将控制权返还给IDA 。否则，IDA 将完全无法响应，也就没有办法重新获得控制权。换句话说，一旦插件开始执行，你就很难让它中断。你要么等待插件完成执行，要么终止 IDA 进程。在后一种情况下，你可能已经打开了一个数据库，该数据库可能会受到破坏，而 IDA 却不一定能修复。SDK 提供了 3 种函数帮助你解决这个问题。可以调用 show_wait_box
 函数显示一个对话框，其中显示消息“Please wait…”以及一个 Cancel 按钮。你可以调用wasBreak
 函数，定期验证用户是否单击了Cancel 按钮。使用这种方法的好处在于，一旦 wasBreak
 被调用，IDA 将利用这个机会更新用户界面，你的插件也有机会决定是否终止它所执行的操作。无论如何，你必须调用 hide_wait_box
 从窗口中移除等待对话框。
请不要尝试对插件进行任何创新，不要让 PLUGIN.run
 函数创建一个新的线程来处理插件所执行的任务。IDA 不是一个线程安全的应用程序。它没有锁定机制来同步对 IDA 使用的许多全局变量的访问，也没有任何锁定机制来确保数据库事务的“原子性”。换言之，如果你确实创建了一个新的线程，并且使用 SDK 函数通过该线程修改了数据库，那么你可能会破坏数据库。因为这时IDA 可能正在修改数据库，这一操作将与你要做的修改产生冲突。
请记住这些限制。对多数插件而言，由插件完成的大部分工作将在 PLUGIN.run
 中执行。基于我们前面初始化的 PLUGIN
 对象，PLUGIN.run
 的最短（也令人乏味）实现代码如下所示：
void idaapi idabook_plugin_run(int arg) {  
   msg("idabook plugin activated!\n");  
}
每个插件都拥有供其使用的 C++ 和IDA API 。将插件与特定于平台的库链接起来，你还可以实现其他功能。例如，为 Windows 版本的IDA 开发的插件可以使用全部的 Windows API。如果除了在消息窗口中打印一条消息外，还想实现更加复杂的功能，你需要了解如何利用可用的IDA SDK函数来完成任务。例如，利用代码清单 16-6 可以开发出以下函数：
void idaapi extended_plugin_run(int arg) {  
   func_t *func = get_func(get_screen_ea());  //get function at cursor location  
   msg("Local variable size is %d\n", func->frsize);  
   msg("Saved regs size is %d\n", func->frregs);  
   struc_t *frame = get_frame(func);          //get pointer to stack frame  
   if (frame) {  
      size_t ret_addr = func->frsize + func->frregs;  //offset to return address  
      for (size_t m = 0; m memqty; m++) {    //loop through members  
         char fname[1024];  
         get_member_name(frame->members[m].id, fname, sizeof(fname));  
         if (frame->members[m].soff frsize) {  
            msg("Local variable ");  
         }  
         else if (frame->members[m].soff > ret_addr) {  
            msg("Parameter ");  
         }  
         msg("%s is at frame offset %x\n", fname, frame->members[m].soff);  
         if (frame->members[m].soff == ret_addr) {  
            msg("%s is the saved return address\n", fname);  
         }  
      }  
   }  
}
使用这个函数，现在我们有了插件的核心组件，每次你激活这个插件时，它将存储与当前选定的函数有关的栈帧信息。
17.2 构建插件
在Windows 系统上，插件是有效的 DLL 文件（使用.plw 或.p64 扩展名）；而在 Linux和Mac系统上，插件是有效的共享对象文件（分别使用.plx/.plx64 、.pmc/.pmc64 扩展名）。构建插件可能是一个非常烦琐的任务，因为你必须正确配置所有构建设置，否则，构建过程极有可能会失败。SDK中包含有大量样本插件，每个样本插件都有它自己的生成文件。这些生成文件全部使用Windows 系统上的Borland构建工具创建而成。因此，如果你希望使用不同的工具，或在不同的平台上构建生成文件，你可能会面临一些挑战。SDK 自带的install_ xxx.txt 文件介绍了如何通过GUN make和gcc，使用/bin/idamake.pl构建插件。idamake.pl 文件用于从 Borland风格的生成文件生成一个 GNU make 风格的生成文件，然后调用 GNU make 构建插件。
要构建插件，我们的首选是使用简化版本的生成文件和 GNU工具（通过Windows 上的MinGW）。你可以将代码清单 17-1 中的简化版本的生成文件直接应用到你的插件项目中。
代码清单 17-1 创建 IDA 插件的一个样本生成文件
#Set this variable to point to your SDK directory  
IDA_SDK=../../  
PLATFORM=$(shell uname | cut -f 1 -d _)  
ifneq "$(PLATFORM)" "MINGW32"  
IDA=$(HOME)/ida  
endif  
#Set this variable to the desired name of your compiled plugin  
PROC=idabook_plugin  
ifeq "$(PLATFORM)" "MINGW32"  
PLATFORM_CFLAGS=-D__NT__ -D__IDP__ -DWIN32 -Os -fno-rtti  
PLATFORM_LDFLAGS=-shared –s  
LIBDIR=$(shell find ../../ -type d | grep -E "(lib|lib/)gcc.w32")  
ifeq ($(strip $(LIBDIR)),)  
LIBDIR=../../lib/x86_win_gcc_32  
endif  
IDALIB=$(LIBDIR)/ida.a  
PLUGIN_EXT=.plw  
else ifeq "$(PLATFORM)" "Linux"  
PLATFORM_CFLAGS=-D__LINUX__  
PLATFORM_LDFLAGS=-shared –s  
IDALIB=-lida  
IDADIR=-L$(IDA)  
PLUGIN_EXT=.plx  
else ifeq "$(PLATFORM)" "Darwin"  
PLATFORM_CFLAGS=-D__MAC__  
PLATFORM_LDFLAGS=-dynamiclib  
IDALIB=-lida  
IDADIR=-L$(IDA)/idaq.app/Contents/MacOs  
PLUGIN_EXT=.pmc  
endif  
#Platform specific compiler flags  
CFLAGS=-Wextra -Os $(PLATFORM_CFLAGS)  
#Platform specific ld flags  
LDFLAGS=$(PLATFORM_LDFLAGS)  
#specify any additional libraries that you may need  
EXTRALIBS=  
# Destination directory for compiled plugins  
OUTDIR=$(IDA_SDK)bin/plugins/  