###  Ldr
这个字段是要讨论的重点，LDR调试中的ldr也就是指这个字段，它作为指针指向了_PEB_LDR_DATA结构体，如下所示
    nt!_PEB_LDR_DATA
       +0x000 Length           : Uint4B
       +0x004 Initialized      : UChar
       +0x008 SsHandle         : Ptr64 Void
       +0x010 InLoadOrderModuleList : _LIST_ENTRY
       +0x020 InMemoryOrderModuleList : _LIST_ENTRY
       +0x030 InInitializationOrderModuleList : _LIST_ENTRY
前几个成员像是Length长度啊、Initialized是否初始化啊之类都非常简单，重要的是后三个，他们分别表示：
    InLoadOrderModuleList;                //模块加载顺序
    InMemoryOrderModuleList;              //模块在内存中的顺序
    InInitializationOrderModuleList;      //模块初始化装载顺序
他们本身也是结构体，即_LIST_ENTRY
    typedef struct _LIST_ENTRY {
       struct _LIST_ENTRY *Flink;
       struct _LIST_ENTRY *Blink;
    } LIST_ENTRY, *PLIST_ENTRY, *RESTRICTED_POINTER PRLIST_ENTRY;
可以看到成员还是结构体，很显然就是个双向链表，而这些指针又指向了LDR_DATA_TABLE_ENTRY
这个结构体结构体的第四个字段也就是DLL的加载基址，要特别注意，这个结构系统会为每个dll都维护一个，且由于构成了双向链表，我们可以轻易的通过一个dll找到下一个的基址，
    typedef struct _LDR_DATA_TABLE_ENTRY
    {
         LIST_ENTRY InLoadOrderLinks;
         LIST_ENTRY InMemoryOrderLinks;
         LIST_ENTRY InInitializationOrderLinks;
         PVOID DllBase;
         PVOID EntryPoint;
         ULONG SizeOfImage;
         UNICODE_STRING FullDllName;
         UNICODE_STRING BaseDllName;
         ULONG Flags;
         WORD LoadCount;
         WORD TlsIndex;
         union
         {
              LIST_ENTRY HashLinks;
              struct
              {
                   PVOID SectionPointer;
                   ULONG CheckSum;
              };
         };
         union
         {
              ULONG TimeDateStamp;
              PVOID LoadedImports;
         };
         _ACTIVATION_CONTEXT * EntryPointActivationContext;
         PVOID PatchInformation;
         LIST_ENTRY ForwarderLinks;
         LIST_ENTRY ServiceTagLinks;
         LIST_ENTRY StaticLinks;
    } LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;
到这里我们进行LDR调试的基础知识就差不多了，下面就该实战来利用LDR调试来获取各个dll的地址了
## LDR调试
我们可以根据上面的知识来先行来理一下思路
    TEB+0x30 -> PEB
    PEB+0x0c -> PEB_LDR_DATA
    PEB_LDR_DATA -> LDR_DATA_TABLE_ENTRY
根据前面的学习，我们知道了PEB_LDR_DATA的一个结构体字段指向了LDR_DATA_TABLE_ENTRY，而之后LDR_DATA_TABLE_ENTRY用同样的结构体再指向下一个，下一个也用同样结构体的第二个成员指向上一个，形成了双向链表，为了理解方便，这里我们画图展示一下
那我们的思路就明确了，首先我们通过PEB_LDR_TABLE拿到第一个LDR_DATA_TABLE_ENTRY就可以通过offset找到dll
base，接着再用offset找到指向下一个的LDR_DATA_TABLE_ENTRY的指针Flink，就可以接着往下找，直到双链表再次指向最开始的地方，不说废话，动手操作一番
我们首先利用 windbg拿到PEB的地址
    0:000> !peb
    PEB at 002c7000
        InheritedAddressSpace:    No
        ReadImageFileExecOptions: No
        BeingDebugged:            Yes
        ImageBaseAddress:         00400000
        Ldr                       77b30c40
        Ldr.Initialized:          Yes
        Ldr.InInitializationOrderModuleList: 000c3200 . 000c37b0
        Ldr.InLoadOrderModuleList:           000c32f8 . 000c46f0
        Ldr.InMemoryOrderModuleList:         000c3300 . 000c46f8
                Base TimeStamp                     Module
              400000 000062e2 Jan 01 15:01:54 1970 C:UsersmacDesktopRE.exe
            77a10000 C:WindowsSYSTEM32ntdll.dll
            77220000 C:WindowsSystem32KERNEL32.DLL
            757d0000 53015794 Feb 17 08:28:04 2014 C:WindowsSystem32KERNELBASE.dll
            752e0000 0435cf49 Mar 28 20:55:37 1972 C:WindowsSystem32msvcrt.dll
windbg自己帮我们拿到了dll的加载基址，我们不去管它，自己继续调试
    0:000> dd 000c32f8
    000c32f8  000c31f0 77b30c4c 000c31f8 77b30c54
    000c3308  00000000 00000000 00400000 00401280
一开始指向的应当是第一个LDR_DATA_TABLE_ENTRY，排除掉前三个结构体的6个sizeof(ptr)后，就是基址0x400000，显然就是原始模块加载基址，而第一个dword也就是Flink，第二个就是Blink，我们就跟着Flink接着往下找
    0:000> dd 000c31f0
    000c31f0  000c37a0 000c32f8 000c37a8 000c3300
    000c3200  000c3b70 77b30c5c 77a10000 00000000
可以看到第二个LDR_DATA_TABLE_ENTRY的dll
base字段也就是77a10000，根据我们windbg刚才打印!PEB给我们的信息对照，可以发现就是ntdll的基址，同样在使用Flink，又可以找到下一个。
最后我们找到的是
    0:000> dd 77b30c4c 
    77b30c4c  000c32f8 000c46f0 000c3300 000c46f8
    77b30c5c  000c3200 000c37b0 00000000 00000000
可以看到就是一开始的LDR_DATA_TABLE_ENTRY的Blink，而dll
base字段已经是0了，这样我们就根据这个双向链表拿到了所有的dll的基址了，对照一开始weindbg提供给我们的，果然一点没错。
当然可以继续尝试其他两条链的情况，这里就不再详细展示了，需要注意的是InInitializationOrderModuleList在不同版本的操作系统可能会存在得到的链表dll顺序不同的情况，所以不建议使用。下面给出获得dll基址的汇编代码
    mov ebx, fs:[ 0x30 ]       // 拿到PEB
    mov ebx, [ ebx + 0x0C ]    // 拿到PEB_LDR_DATA
    mov ebx, [ ebx + 0x0C ]    // InLoadOrderModuleList1
    mov ebx, [ ebx ]           // InLoadOrderModuleList2
    mov ebx, [ ebx ]           // InLoadOrderModuleList3
    mov ebx, [ ebx + 0x18 ]    // 拿到dll base字段内容
## 总结
LDR链调试是一个很有意思的内容，它牵扯到了很多windows下的重要对象，如果只是去学习这项技术的话很容易，但是要搞清楚经过的每一个对象到底涉及到了其他的什么内容就很难了，不能只停留在这项技术的表面。