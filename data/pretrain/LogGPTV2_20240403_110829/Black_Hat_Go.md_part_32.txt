other message transmitted over a network. In the example
shown in Listing 11-3, we’re omitting the client-server
communications and focusing solely on the HMAC
functionality.
var key = []byte("some random key") ❶
func checkMAC(message, recvMAC []byte) bool { ❷
mac := hmac.New(sha256.New, key) ❸
mac.Write(message)
calcMAC := mac.Sum(nil)
return hmac.Equal(calcMAC, recvMAC)❹
}
func main() {
// In real implementations, we'd read the message and HMAC value from
network source
message := []byte("The red eagle flies at 10:00") ❺
mac, _ :=
hex.DecodeString("69d2c7b6fbbfcaeb72a3172f4662601d1f16acfb46339639ac8c10c8da64631d")
❻
if checkMAC(message, mac) { ❼
fmt.Println("EQUAL")
} else {
fmt.Println("NOT EQUAL")
}
}
Listing 11-3: Using HMAC for message authentication (/ch-11/hmac/main.go)
The program begins by defining the key you’ll use for your
HMAC cryptographic function ❶. You’re hardcoding the
value here, but in a real implementation, this key would be
adequately protected and random. It would also be shared
between the endpoints, meaning both the message sender and
receiver are using this same key value. Since you aren’t
implementing full client-server functionality here, you’ll use
this variable as if it were adequately shared.
Next, you define a function, checkMAC() ❷, that accepts a
message and the received HMAC as parameters. The message
receiver would call this function to check whether the MAC
value they received matches the value they calculated locally.
First, you call hmac.New() ❸, passing to it sha256.New, which is a
function that returns a hash.Hash instance, and the shared secret
key. In this case, the hmac.New() function initializes your HMAC
by using the SHA-256 algorithm and your secret key, and
assigns the result to a variable named mac. You then use this
variable to calculate the HMAC hash value, as you did in the
earlier hashing examples. Here, you call mac.Write(message) and
mac.Sum(nil), respectively. The result is your locally calculated
HMAC, stored in a variable named calcMAC.
The next step is to evaluate whether your locally calculated
HMAC value is equal to the HMAC value you received. To do
this in a secure manner, you call hmac.Equal(calcMAC, recvMAC) ❹.
A lot of developers would be inclined to compare the byte
slices by calling bytes.Compare(calcMAC, recvMAC). The problem is,
bytes.Compare() performs a lexicographical comparison, walking
and comparing each element of the given slices until it finds a
difference or reaches the end of a slice. The time it takes to
complete this comparison will vary based on whether
bytes.Compare() encounters a difference on the first element, the
last, or somewhere in between. An attacker could measure this
variation in time to determine the expected HMAC value and
forge a request that’s processed legitimately. The hmac.Equal()
function solves this problem by comparing the slices in a way
that produces nearly constant measurable times. It doesn’t
matter where the function finds a difference, because the
processing times will vary insignificantly, producing no
obvious or perceptible pattern.
The main() function simulates the process of receiving a
message from a client. If you were really receiving a message,
you’d have to read and parse the HMAC and message values
from the transmission. Since this is just a simulation, you
instead hardcode the received message ❺ and the received
HMAC ❻, decoding the HMAC hex string so it’s represented
as a []byte. You use an if statement to call your checkMAC()
function ❼, passing it your received message and HMAC. As
detailed previously, your checkMAC() function computes an
HMAC by using the received message and the shared secret
key and returns a bool value for whether the received HMAC
and calculated HMAC match.
Although the HMAC does provide both authenticity and
integrity assurance, it doesn’t ensure confidentiality. You can’t
know for sure that the message itself wasn’t seen by
unauthorized resources. The next section addresses this
concern by exploring and implementing various types of
encryption.
ENCRYPTING DATA
Encryption is likely the most well-known cryptographic
concept. After all, privacy and data protection have garnered
significant news coverage due to high-profile data breaches,
often resulting from organizations storing user passwords and
other sensitive data in unencrypted formats. Even without the
media attention, encryption should spark the interest of black
hats and developers alike. After all, understanding the basic
process and implementation can be the difference between a
lucrative data breach and a frustrating disruption to an attack
kill chain. The following section presents the varying forms of
encryption, including useful applications and use cases for
each.
Symmetric-Key Encryption
Your journey into encryption will start with what is arguably
its most straightforward form—symmetric-key encryption. In
this form, both the encryption and decryption functions use the
same secret key. Go makes symmetric cryptography pretty
straightforward, because it supports most common algorithms
in its default or extended packages.
For the sake of brevity, we’ll limit our discussion of
symmetric-key encryption to a single, practical example. Let’s
imagine you’ve breached an organization. You’ve performed
the necessary privilege escalation, lateral movement, and
network recon to gain access to an e-commerce web server
and the backend database. The database contains financial
transactions; however, the credit card number used in those
transactions is obviously encrypted. You inspect the
application source code on the web server and determine that
the organization is using the Advanced Encryption Standard
(AES) encryption algorithm. AES supports multiple operating
modes, each with slightly different considerations and
implementation details. The modes are not interchangeable;
the mode used for decryption must be identical to that used for
encryption.
In this scenario, let’s say you’ve determined that the
application is using AES in Cipher Block Chaining (CBC)
mode. So, let’s write a function that decrypts these credit cards
(Listing 11-4). Assume that the symmetric key was hardcoded
in the application or set statically in a configuration file. As
you go through this example, keep in mind that you’ll need to
tweak this implementation for other algorithms or ciphers, but
it’s a good starting place.
func unpad(buf []byte) []byte { ❶
// Assume valid length and padding. Should add checks
padding := int(buf[len(buf)-1])
return buf[:len(buf)-padding]
}
func decrypt(ciphertext, key []byte) ([]byte, error) { ❷
var (
plaintext []byte
iv []byte
block cipher.Block
mode cipher.BlockMode
err error
)
if len(ciphertext) < aes.BlockSize { ❸
return nil, errors.New("Invalid ciphertext length: too short")
}
if len(ciphertext)%aes.BlockSize != 0 { ❹
return nil, errors.New("Invalid ciphertext length: not a multiple of blocksize")
}
iv = ciphertext[:aes.BlockSize] ❺
ciphertext = ciphertext[aes.BlockSize:]
if block, err = aes.NewCipher(key); err != nil { ❻
return nil, err
}
mode = cipher.NewCBCDecrypter(block, iv) ❼
plaintext = make([]byte, len(ciphertext))
mode.CryptBlocks(plaintext, ciphertext) ❽
plaintext = unpad(plaintext) ❾
return plaintext, nil
}
Listing 11-4: AES padding and decryption (/ch-11/aes/main.go)
The code defines two functions: unpad() and decrypt(). The
unpad() function ❶ is a utility function scraped together to
handle the removal of padding data after decryption. This is a
necessary step, but beyond the scope of this discussion. Do
some research on Public Key Cryptography Standards (PKCS)
#7 padding for more information. It’s a relevant topic for AES,
as it’s used to ensure that our data has proper block alignment.
For this example, just know that you’ll need the function later
to clean up your data. The function itself assumes some facts
that you’d want to explicitly validate in a real-world scenario.
Specifically, you’d want to confirm that the value of the
padding bytes is valid, that the slice offsets are valid, and that
the result is of appropriate length.
The most interesting logic exists within the decrypt() function
❷, which takes two byte slices: the ciphertext you need to
decrypt and the symmetric key you’ll use to do it. The
function performs some validation to confirm that the
ciphertext is at least as long as your block size ❸. This is a
necessary step, because CBC mode encryption uses an
initialization vector (IV) for randomness. This IV, like a salt
value for password hashing, doesn’t need to remain secret. The
IV, which is the same length as a single AES block, is
prepended onto your ciphertext during encryption. If the
ciphertext length is less than the expected block size, you
know that you either have an issue with the cipher text or are
missing the IV. You also check whether the ciphertext length
is a multiple of the AES block size ❹. If it’s not, decryption
will fail spectacularly, because CBC mode expects the
ciphertext length to be a multiple of the block size.
Once you’ve completed your validation checks, you can
proceed to decrypt the ciphertext. As mentioned previously,
the IV is prepended to the ciphertext, so the first thing you do
is extract the IV from the ciphertext ❺. You use the
aes.BlockSize constant to retrieve the IV and then redefine your
ciphertext variable to the remainder of your ciphertext via
ciphertext = [aes.BlockSize:]. You now have your encrypted data
separate from your IV.
Next, you call aes.NewCipher(), passing it your symmetric-key
value ❻. This initializes your AES block mode cipher,
assigning it to a variable named block. You then instruct your
AES cipher to operate in CBC mode by calling
cipher.NewCBCDecryptor(block, iv) ❼. You assign the result to a
variable named mode. (The crypto/cipher package contains
additional initialization functions for other AES modes, but
you’re using only CBC decryption here.) You then issue a call
to mode.CryptBlocks(plaintext, ciphertext) to decrypt the contents of
ciphertext ❽ and store the result in the plaintext byte slice. Lastly,
you ❾ remove your PKCS #7 padding by calling your unpad()
utility function. You return the result. If all went well, this
should be the plaintext value of the credit card number.
A sample run of the program produces the expected result:
$ go run main.go
key =
aca2d6b47cb5c04beafc3e483b296b20d07c32db16029a52808fde98786646c8
ciphertext =
7ff4a8272d6b60f1e7cfc5d8f5bcd047395e31e5fc83d062716082010f637c8f21150eabace62
--snip--
plaintext = 4321123456789090
Notice that you didn’t define a main() function in this sample
code. Why not? Well, decrypting data in unfamiliar
environments has a variety of potential nuances and variations.
Are the ciphertext and key values encoded or raw binary? If
they’re encoded, are they a hex string or Base64? Is the data
locally accessible, or do you need to extract it from a data
source or interact with a hardware security module, for
example? The point is, decryption is rarely a copy-and-paste
endeavor and often requires some level of understanding of
algorithms, modes, database interaction, and data encoding.
For this reason, we’ve chosen to lead you to the answer with
the expectation that you’ll inevitably have to figure it out
when the time is right.
Knowing just a little bit about symmetric-key encryption
can make your penetrations tests much more successful. For
example, in our experience pilfering client source-code
repositories, we’ve found that people often use the AES
encryption algorithm, either in CBC or Electronic Codebook
(ECB) mode. ECB mode has some inherent weaknesses and
CBC isn’t any better, if implemented incorrectly. Crypto can
be hard to understand, so often developers assume that all
crypto ciphers and modes are equally effective and are
ignorant of their subtleties. Although we don’t consider
ourselves cryptographers, we know just enough to implement
crypto securely in Go—and to exploit other people’s deficient
implementations.
Although symmetric-key encryption is faster than
asymmetric cryptography, it suffers from inherent key-
management challenges. After all, to use it, you must
distribute the same key to any and all systems or applications
that perform the encryption or decryption functions on the
data. You must distribute the key securely, often following
strict processes and auditing requirements. Also, relying solely
on symmetric-key cryptography prevents arbitrary clients
from, for example, establishing encrypted communications
with other nodes. There isn’t a good way to negotiate the
secret key, nor are there authentication or integrity assurances
for many common algorithms and modes.1 That means
anyone, whether authorized or malicious, who obtains the
secret key can proceed to use it.
This is where asymmetric cryptography can be of use.
Asymmetric Cryptography
Many of the problems associated with symmetric-key
encryption are solved by asymmetric (or public-key)
cryptography, which uses two separate but mathematically
related keys. One is available to the public and the other is
kept private. Data encrypted by the private key can be
decrypted only by the public key, and data encrypted by the
public key can be decrypted only by the private key. If the
private key is protected properly and kept, well, private, then
data encrypted with the public key remains confidential, since
you need the closely guarded private key to decrypt it. Not
only that, but you could use the private key to authenticate a
user. The user could use the private key to sign messages, for
example, which the public could decrypt using the public key.
So, you might be asking, “What’s the catch? If public-key
cryptography provides all these assurances, why do we even
have symmetric-key cryptography?” Good question, you! The
problem with public-key encryption is its speed; it’s a lot
slower than its symmetric counterpart. To get the best of both
worlds (and avoid the worst), you’ll often find organizations
using a hybrid approach: they’ll use asymmetric crypto for the
initial communications negotiation, establishing an encrypted
channel through which they create and exchange a symmetric
key (often called a session key). Because the session key is
fairly small, using public-key crypto for this process requires
little overhead. Both the client and server then have a copy of
the session key, which they use to make future
communications faster.
Let’s look at a couple of common use cases for public-key
crypto. Specifically, we’ll look at encryption, signature
validation, and mutual authentication.
Encryption and Signature Validation
For this first example, you’ll use public-key crypto to encrypt
and decrypt a message. You’ll also create the logic to sign a
message and validate that signature. For simplicity, you’ll
include all of this logic in a single main() function. This is
meant to show you the core functionality and logic so that you
can implement it. In a real-world scenario, the process is a
little more complex, since you’re likely to have two remote
nodes communicating with each other. These nodes would
have to exchange public keys. Fortunately, this exchange
process doesn’t require the same security assurances as
exchanging symmetric keys. Recall that any data encrypted
with the public key can be decrypted only by the related
private key. So, even if you perform a man-in-the-middle
attack to intercept the public-key exchange and future
communications, you won’t be able to decrypt any of the data
encrypted by the same public key. Only the private key can
decrypt it.
Let’s take a look at the implementation shown in Listing
11-5. We’ll elaborate on the logic and cryptographic
functionality as we review the example.
func main() {
var (
err error
privateKey *rsa.PrivateKey
publicKey *rsa.PublicKey
message, plaintext, ciphertext, signature, label []byte
)
if privateKey, err = rsa.GenerateKey(rand.Reader, 2048)❶; err != nil {
log.Fatalln(err)
}
publicKey = &privateKey.PublicKey ❷
label = []byte("")
message = []byte("Some super secret message, maybe a session key even")
ciphertext, err = rsa.EncryptOAEP(sha256.New(), rand.Reader, publicKey,
message, label) ❸
if err != nil {
log.Fatalln(err)
}
fmt.Printf("Ciphertext: %x\n", ciphertext)
plaintext, err = rsa.DecryptOAEP(sha256.New(), rand.Reader, privateKey,
ciphertext, label) ❹
if err != nil {
log.Fatalln(err)
}
fmt.Printf("Plaintext: %s\n", plaintext)
h := sha256.New()
h.Write(message)
signature, err = rsa.SignPSS(rand.Reader, privateKey, crypto.SHA256,
h.Sum(nil), nil) ❺
if err != nil {
log.Fatalln(err)
}
fmt.Printf("Signature: %x\n", signature)
err = rsa.VerifyPSS(publicKey, crypto.SHA256, h.Sum(nil), signature, nil)❻
if err != nil {
log.Fatalln(err)
}
fmt.Println("Signature verified")
}
Listing 11-5: Asymmetric, or public-key, encryption (/ch-11/public-key/main.go/)
The program demonstrates two separate but related public-
key crypto functions: encryption/decryption and message
signing. You first generate a public/private key pair by calling
the rsa.GenerateKey() function ❶. You supply a random reader
and a key length as input parameters to the function. Assuming
the random reader and key lengths are adequate to generate a
key, the result is an *rsa.PrivateKey instance that contains a field
whose value is the public key. You now have a working key
pair. You assign the public key to its own variable for the sake
of convenience ❷.
This program generates this key pair every time it’s run. In
most circumstances, such as SSH communications, you’ll
generate the key pair a single time, and then save and store the
keys to disk. The private key will be kept secure, and the
public key will be distributed to endpoints. We’re skipping
key distribution, protection, and management here, and
focusing only on the cryptographic functions.
Now that you’ve created the keys, you can start using them
for encryption. You do so by calling the function
rsa.EncryptOAEP() ❸, which accepts a hashing function, a reader
to use for padding and randomness, your public key, the
message you wish to encrypt, and an optional label. This
function returns an error (if the inputs cause the algorithm to
fail) and our ciphertext. You can then pass the same hashing
function, a reader, your private key, your ciphertext, and a
label into the function rsa.DecryptOAEP() ❹. The function
decrypts the ciphertext by using your private key and returns
the cleartext result.
Notice that you’re encrypting the message with the public
key. This ensures that only the holder of the private key will
have the ability to decrypt the data. Next you create a digital
signature by calling rsa.SignPSS() ❺. You pass to it, again, a
random reader, your private key, the hashing function you’re
using, the hash value of the message, and a nil value
representing additional options. The function returns any
errors and the resulting signature value. Much like human
DNA or fingerprints, this signature uniquely identifies the
identity of the signer (that is, the private key). Anybody
holding the public key can validate the signature to not only
determine the authenticity of the signature but also validate the
integrity of the message. To validate the signature, you pass