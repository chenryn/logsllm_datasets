**作者：天融信阿尔法实验室  
公众号：**
## 1 漏洞分析环境搭建
  * 漏洞分析环境搭建
  * 需要工具
  * IDEA
  * Apache Ant
  * Apache Solr8.2.0源码
  * Apache Solr8.2.0服务端
  * Chrome
  * Burp
## 2 Apache solr简介和漏洞复现
首先先简单介绍一下Apache Solr
Apache Solr是一个强大的搜索服务器，它支持像API一样的REST。
Solr由Lucene提供支持，可以实现强大的匹配功能，例如短语，通配符，连接，分组和更多的各种数据类型。 它是高度优化的高流量使用Apache
Zookeeper。
介绍完Apache Solr之后我们就来复现一下这次的 Apache Solr Velocity服务端模板注入漏洞
我们首先从Apache Solr官网上下载Apache Solr
8.2.0的服务端https://mirrors.tuna.tsinghua.edu.cn/apache/lucene/solr/8.2.0/solr-8.2.0.tgz下载完成之后解压
我们通过命令行终端进入bin目录然后输入“./solr start”命令!
Apache Solr就会默认在本地的8983端口启动服务,
我们访问一下地址 http://127.0.0.1:8983/solr/#/
查看左侧的Core Selector的集合名称!
使用burp Repeater模块像服务端发包修改指定集合的配置!
修改配置成功
然后发送事先构造好的payload!
## 3 模板引擎简介
### 3.1 JSP简介
漏洞复现完成，但是分析漏洞我们还需要一些前置知识，比如什么是模板注入漏洞，以及Velocity究竟是什么，
我们都知道，现在web开发讲究的是一个前后端分离的方式，MVC模式就是其经典的代表。如果抛弃前后端分离，仅仅开发一个能用的网站，只需要一个JSP其实就够了，但是这样很明显会导致开发时逻辑及其混乱，以及后期维护起来成本极高的问题，这样的开发完全违背的我们java这么一个面向对象语言优雅的编程思维。
我们在开发一个程序时希望的就是一个模块尽量是独立完成某一个功能而不依赖别的模块的，也就是我们的高内聚，低耦合的思想。
这种思想用到我们的web开发的架构时，就有了我们的MVC模式，即 Mode，
View，Controller。和我们的web三层架构，即表示层，业务逻辑层，和数据接口层。尽量保证每一层都是独立可用的,在这里特别提示一下，web三层架构是java独有的概念，而MVC架构则是通用的。
在这种情况下，每一层都出现了其相对应开源组件。
首先不得不提的两个使用量最高的MVC框架，Struts2，和SpringMVC。
表现层有我们的JSP和Thymeleaf，Velocity，Freemarker等模板引擎
业务层由我们最火热的开源组件Spring
数据层就有我们最常见的Mybaits和Hibernate两个Dao层框架
而这次我们要重点注意的就是位于我们的表现层，也就是我们的Velocity模板引擎。
对于web不太熟悉的同学可能暂时还不能理解什么是模板引擎，或者说模板引擎是做什么用的。但是相信大家都听过JSP，
JSP的全称是Java Server
Package，与普通的静态html页面相比，区别在于我们可以在JSP页面上书写java代码，以实现和用户进行交互，从而达到动态的这么一个效果。
JSP一开始出现的时候是同时兼具前端和后端的作用，也就是说如果只是开发一个勉强能用的java动态网站，jsp其实就足够了。
在JSP出现之前，实现动态页面的效果用的是Servlet的技术，Servlet可以很好的实现接受用户传来的参数并进行处理。但是把数据返回到前端并输出html页面时确异常的麻烦和痛苦。同常需要一行一行的输出html代码，像下面这样
后来JSP出现了，如果说Servlet是java代码中写HTML的话，那Jsp就是HTML中穿插写java代码了，jsp相比于Servlet来说并不是一个新的技术，jsp是Servlet的一个扩展，其本质仍是Servlet,
我们看一个最简单的JSP页面
看起来就是一个普通的HTML页面，为什么我会说jsp的本质是Servlet呢？
当我们将项目编译打成war包部署在Tomcat下时，会放在Tomcat的WebApp目录下，里面有我们的项目后台的java文件编译成的.class文件。同时也有我们的jsp文件。
但是我们的jsp文件是不能直接被解析的，Jsp不像HTML拿来就能直接返返回给客户，因为jsp文件中是包含有java代码的，浏览器又不能解析我们jsp页面上的java代码，所以将jsp编译成浏览器能解析的html页面的工作就交由了我们的Tomcat来做
当我们启动Tomcat时第一次访问我们的这个jsp页面，往往速度都会稍微慢一些，往后在访问时速度就会很快。这是因为，第一访问时，Tomcat会在他的根目录的work/Catalina/localhos目录下生成我们对应项目名称的一个文件夹。
并生成一个名称为org.apache.jsp的一个package，我们去观察一下!
我们可以看到一个java文件和一个.class文件。还记得我刚刚才说过jsp的本质其实就是Servlet么？我们点开这个java文件来一探究竟。
我们从中观察到这这么几个重点
首先这是一个java类，它继承了HttpJspBase类同时实现了两个接口
第二个重点在这里
这是一个静态代码块，静态代码块在类进行加载时就会执行，先于构造代码块和构造方法，是一个java类中最先被执行的代码。
我们根据其代码内容不难看出这静态代码块的作用是用来import Java类的。
接下来是一个名叫_jspService的函数，是不是特别像servlet的doGET和doPost方法？
最后我们在看这里
我们发现我们之前看到的jsp文件中的html内容，在这里被替换成了通过
JspWriter对象一句一句的写出的。
此时是不是理解了我之前说的，Jsp的本质就是servlet。表面上上我们是在一堆HTML标签中插入了一个又一个的java代码，本质上Tmocat在接收到客户端对我们这个jsp的请求后，会将我们的整个jsp文件编译成java文件在编译成.class文件。将HTML一句一句通过JspWriter对象的write方法一行一行的输出。
### 3.2 Velocity模板引擎简介
讲解了JSP的基础知识后不知道大家有没有发现一个问题就是，Jsp虽然说是模板引擎的一种，但是如果只做为一个为前端服务的模板引擎来说，它的功能过于强大了，导致它不光可以书写前端页面，因为JSP可以毫无阻碍地访问底层的
Servlet API 和 Java 编程语言，所以同时也可以无缝书写后端的逻辑代码，在展示数据的同时也可以对数据进行处理。
这样就导致前端和后端完全就纠缠在了一起。完全违背了我们MVC的设计思想，你能想象一个前端页面是用Servlet输出，而后端代码使用Jsp来写的网站该怎么去维护么？
面向对象的优雅思想在这一刻荡然无存。
面向对象的核心思想就是，低耦合，高内聚。每一个模块的功能尽可能单一，尽可能的降低和别的模块和功能之间的耦合度。
所以Thymeleaf，Velocity，Freemarker等优秀模板引擎就一个接一个的出现了。
Velocity为主我们来了解，这个在MVC设计模式中，为View层服务的优秀模板引擎。
刚才通过对Jsp的介绍，我们理解了，一个模板引擎他的主要功能就是负责将后端代码也就是servlet处理完成的数据，提取并按照之前写好的样式展示出来。
Velocity是一个基于java的模板引擎（template engine）。它允许任何人仅仅使用简单的模板语言（template
language）来引用由java代码定义的对象。
当Velocity应用于web开发时，界面设计人员可以和java程序开发人员同步开发一个遵循MVC架构的web站点，也就是说，页面设计人员可以只关注页面的显示效果，而由java程序开发人员关注业务逻辑编码。Velocity将java代码从web页面中分离出来，这样为web站点的长期维护提供了便利，同时也为我们在JSP和PHP之外又提供了一种可选的方案。
前面说了这么多，现在我们在这里简单演示下Velocity这个模板引擎，给大家一个更直观的概念。
首先导入以下的包
然后我们创建一个演示类
这里我们首先实例话了一个VelocityEngine，并设置加载加载classpath目录下的vm文件
然后初始化VelocityEngine，接着就是加载一个模板，这里模板的名字叫“Hellovelocity.vm”
接下来的操作就是我们向模板的上下文中添加我们要传递的参数和值了。
最后的t.merget就会开始循环遍历生成的Velocity AST语法书的各个节点，执行每个节点的渲染方法。
我们看一下我们加载的这个模板的具体实现
和最终的执行结果
我们看到这里可以将我们之前后端代码中传输的值直接取出也可以循环取出。
这样我们就可以提前将静态部分用HTML和JavaScript写好，然后需要动态交互的部分就可以使用Velocity语法来进行编写。
## 4 漏洞和POC构造分析
### 4.1 漏洞分析环境搭建
首先我们下载Apache Slor 8.2.0源码
https://mirrors.tuna.tsinghua.edu.cn/apache/lucene/solr/8.2.0/solr-8.2.0-src.tgz
下载完成后
我们进入Solr源码根目录
执行命令
ant ivy-bootstrap
然后再执行ant idea命令将源码转化成idea可以导入的模式!
然后我们打开idea，选择open!
最后导入完成后的样子
为了可以调试源码，我们需要再做一些配置
点开左上角的Edit Configuration
然后新增Remote
并按照如下配置
配置完成后我们进入solr的服务端的bin目录，并执行如下命令
然后我们带idea中点击debug按钮，当有如下显示时代表调试环境搭建成功
接下来我们就可以在自己想下断点的地方下断点了。
### 4.2 POC第一部分执行和构造分析
首先我们就来一步一步分析这个漏洞吧，审计一个web项目我们首先先看有没有web.xml这个文件
我们找到了web.xml这个文件，位置在solr/webapp/WEB-INF/目录下
我们打开看一下内容
首先这个web.xml文件一开始就是一个filter过滤器，这个过滤器类路径是