shel专用的启动文件（rc文件）来设置，以及在命令行上对变量进行设定等。请看下面的例子：
./environ PRED
Variable PRED has no value
Variable FRED has value he1lo
S FRED=belloenviron rRED
shell把前面那个变量赋值语句看做是对环境变量的临时改变，在上面第二个例子里，程序
environ将运行在变量FRED有一个赋值的环境里。
再举个例子，在我们CD唱盘数据库管理软件的未来版本里，我们将对一个名为CDDB的环
境变量进行修改，这个变量的用途是指明我们使用的是哪个数据库。用户既可以自行设定出缺
省值，也可以通过一条shell命令在运行时进行设定。
S CDDB=mycds; export CDDB
$ cdapp
或者
$ CDDB=mycds cdapp
环境变量是一个双刃剑，大家在使用它们的时候一定要多加小心。与命令行选项相比，它
们更“隐蔽”，因而会给调试工作带来不便。从某种意义上来说，环境变量有点象全局变量，它
们能够改变程序的行为，引起不可预料的后果。
4.2.2environ变量
正如我们已经看到的，程序环境是由“name=value”形式的字符串构成的。这个字符串数
组通过environ变量直接面向程序，下面是environ变量的定义：
include 
extezn char **onviron;
动手试试：environ变量
加入java编程群：524621833
---
## Page 126
108
Linux程序设计
下面这个showenv.c程序将通过environ变量列出环境变量：
#include 
exterm char **environ:
int main()
char **env = environ;
while(*env)(
printf(*es\n*,*env);
exit(0) ;
在一个Linux系统上运行这个程序，我们将得到如下所示的输出，我们对它的结果稍微做了
一些删节：
HOSTNAME=t11de-prov1der.com
S、/showenv
RAIL=/var/spoo1/mai1/nei1
LOGNAME=nei1
HOSTTYPE=i386
TERM=console
PATH=/usr/1ocal/bin:/bin:/uss/bin:
LS_OPIONS=-8bit-eolor=tty-F-70
HONE=/usr/neil
SHELL=/bin/bash
PS1=\h:\w\$
OSTYPE=Linux
P52=>
操作注释：
这个程序通过对以“null”结束的字符申数组中的environ变量进行遍历输出整个环境。
4.3时间与日期
有时候，让程序能够确定时间和日期是很有用的。它可能需要在指定的运行时间进行登录，
或者在某个特定的时间改变自己的操作行为。举例来说，一个游戏可能会在上班时间拒绝运行，
而一个备份程序则需要在凌展时分自动开始一次备份工作。
各种UNIX系统上时间和日期的起点都是一致的，即格林威治时间1970年1月1日的午夜。这
个时间被认为是“纪元起点”。UNIX系统上的各种时间都是从那时开始以秒计数的。这与MS
DOS处理时间的办法很相似，只不过MS-DOS纪元是从1980年开始计算的。其他系统使用其他
的纪元起点时间。
对时间进行处理时要使用一个预先定义好的数据类型time_t。它是一个大到能够容纳以秒计
算的日期和时间数值的整数类型。在Linux系统上，它是一个long整数，它与对时间进行处理的
函数一起定义在time.h文件里。
在使用32位time_t类型的UNIX和Linux系统上，时间将在2038年“轮回”。我们希
加入jaVa编程群：524621833
---
## Page 127
第4章UNIX环境
109
望到郡个时候计算机早已开始使用一个大于32位的time_t类型了。这就是所谓的Y2K38
问题，它的详细资料可以在http://www.comlinks.com/mag/ddates.htm上找到。
#1nclude 
tine_t tiae(tine_t *tloc ))
调用time函数可以看到以整数计算的底层时问值，它返回的是从纪元开始至今的秒数。time
会把返回的时间整数值写到由doc指定的位置，如果这不是一个空指针的话。
动手试试：time函数
下面是一个简单的envtime.c程序，目的是演示time函数的用法：
include 
#include 
tinclude 
int main()
int i;
time_t the_time;
fot（i1；i
加入jaVa编程群：524621833
---
## Page 128
110
Linux程序设计
double difftine( time_t tizel,time_t time2 );
difftime函数对两个时间值进行减法计算，返回一个浮点数“time1-time2"。对UNIX来说，
time函数的返回值是一个代表秒时间的数字，可以对它进行计算处理；但为了最大限度地增加可
移植性，最好还是使用difftime函数。
为了提供（对人类）更有意义的时间表达方式，需要我们把时间整数转换为日常生活中使
用的日期和时间形式。有几个标准化函数可以帮我们的忙。
gmtime函数把底层时间整数值分断为-个结构，里面的数据域更有实际使用价值。下面是
对它的定义：
#include 
struct tn *gmtime(const tine_t timeval );
tm结构被定义为至少包含以下几个数据元素见表4-1：
表4-1
tm
数据元素的说明
int tn_sec
秒，0-61
int tn_nin
分，0~59
int tn_hour
小时，0-23
int tm_mday
月份中的日期，1-31
int te_non
年份中的月份，0-11（0代表一月）
int tn_year
从1900年升始计算的年份
int tn_wday)
昆期凡，0~6（0代表星期日）
Int tn_udey
年份中的日期，0-365
int tn_isdst
是否为夏日制
tm_sec的范围允许临时闽秒，或者叫做双闰秒。
动手试试：gmtime函数
下面这个gmtime.c程序通过tm结构和gmtime函数给出当前的日期和时间：
include 
#include 
int main()
time_t the_tine;
(void) time(&the_time);
tn_ptr =gmtime(&the_tine);
printf(*Raw time is eld\n*, the_tiwe};
printf(*gmtime gives:\n*);
printf(*date:802d/402d/$02d\n*.
tn_ptr->tm_year,tn_ptr->tm_non+1,tm_ptr->tn_aday):
tm_ptr->tn_hour, tn_ptr->tm_nin, tm_ptr->tm_sec);
ex1t (0) :
加入jaVa编程群：524621833
---
## Page 129
第4章UNIX环境
1I1
运行这个程序，我们将看到含义明显的日期和时间表达方式：
S、/gmtim;date
Raw time 1s 928663946
time:10:12:26
Sun Jun  6 11:12:26 BST 1999
操作注释：
这个程序调用time函数获取底层时间值，再调用gmtime把它转换为一个包含着含义明确的
时间和日期值的结构。它用prinuf输出结构中的数据项。严格地说，我们不应该像程序中那样打
印出原始时间值，因为它并非在所有系统上都是一个long长整数。在执行完gmtime程序之后我
们立刻运行了date命令以比较两者的输出。
这里还有一个小问题。如果读者是在格林威治地区以外的地理时区运行这个程序，或者读
者当地已经进人夏日制时间，就会发现时间（也许还有日期）是不正确的。这是因为gmtime函
数返回的是一个格林威治时间（也叫做全球协调时间）。UNIX这样做的原因是为了同步全球各
地的程序和系统，使不同时区同一时刻创建的文件都具有相同的创建时间。要想看到当地时间，
我们需要用iocaltime函数代替gmitime函数。请看对它的定义：
#1nclude 
struct te *localtime(const tine_t tineval };
localtime函数的功能与gmtime完全一致，只是它返回的结构里所包含的数值已经根据当地
的时区和夏日制情况进行了调整。把gmtime程序里的gmtime函数替换为localtime函数之后再次
运行它的时候，就能看到本地正确的时间和日期了。
我们可以通过mktime函数把一个分断好的tm结构转换为一个原始的time_数值，下面是对它
的定义：
#include 
tine_t mktime（struct tm *timeptr })
如果tm结构不能用一个time_t数值来表示的话，mktime函数将返回“-1”。
我们可以通过asctime和ctime函数看到比date命令的输出更“友好”的日期和时间表示形式。
下面是它们的语法：
#include 
cbar
*asctine（conat struct tn *tinaptz)
char *ctime（const tim_t *timeval);
asctime函数返回一个字符串，它对应于由tm结构timeptr给定的时间和日期。返回字符串的
格式如下所示：
Sun Jun 6 12:30:34 1999Λn\0
它永远是这种长度为26字符的固定格式。ctime函数相当于下面的函数调用：
asctine( localtiae( timeval ))
加入jaVa编程群：524621833
---
## Page 130
112
Linux程序设计
它以一个原始时间值为参数，把它转换为一个更其可读性的当地时间。
动手试试：ctimc函数
我们用下面的代码来说明ctime函数的用法：
#include 
#include 
int main()
time_c tineval:
(void)tine(&timevall;
printf(*The date is: s*, ctime (6timeval));
exit(0) ;
我们给这个程序起名为ctime.c，编译并运行这个程序将看到如下所示的输出：
S./ctime
The date is: Sun Jun 6 12:50:27 1999
操作注释：
ctime.c程序调用time函数获取底层时间值，然后由ctime函数完成重点工作，把原始时间值
转换为人们易于理解的字符串，再把它打印出来。
为了更精确地控制输出时间和日期的格式，现代UNIX系统为我们提供了一个strftime函数。
它很像是一个输出时间和日期专用的sprintf函数，工作过程也差不多：
#1nclude 
size_t strftima( char *s, sizo_t aaxsize, const char *format, etruot tn *timoptr ）;
strftime函数对timeptr指向的tm结构所代表的时间和日期进行格式编排，其结果放在字符申s
中。该字符串的长度被设置为（最少）maxsize个字符。格式字符申format用来对写人字符串的
字符进行控制。类似于printf，它包含着将被传送到字符串里去的普通字符以及编排时间和日期
格式的转换控制符。转换控制符见表4-2：
表4-2
转换控制符
说明