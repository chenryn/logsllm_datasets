e2e-ver (1λ, m, n, t) = 1] < .
Pr[G
In plain words, Deﬁnition 4 implies that in an E2E veriﬁable e-voting system, if
the number of voters that verify the result is θ then any adversary that attempts to
manipulate the result by a shift of d according to the metric d1(·,·) will get caught with
probability more than 1 − .
9
E2E Veriﬁability Game G
A,E,d,θ
e2e-ver (1λ, m, n, t)
1. A chooses O = {opt1, ..., optm}, V = {V1, ..., Vn}, T = {T1, ..., Tt}, and U ⊆ 2O. It sends
them to C along with some public election parameters and voter credentials {s(cid:96)}(cid:96)∈[n]
parameterized by security parameter λ. Throughout the game, C plays the role of the
BB.
2. A and C engage in an interaction where A schedules the Cast protocols of all voters.
For each voter V(cid:96), A can either completely control the voter or allow C operate on V(cid:96)’s
behalf, in which case A provides an option selection U(cid:96) to C. Then, C engages in the
Cast protocol with the adversary A, so that A plays the roles of EA and VSD. Provided
the protocol terminates successfully, C obtains the receipt α(cid:96) on behalf of V(cid:96).
Let ˜V be the set of honest voters (i.e., those controlled by C) that terminated successfully.
3. Finally, A posts the election transcript info to the BB..
The game returns a bit which is 1 if and only if the following conditions hold true:
1. | ˜V| ≥ θ (i.e., at least θ honest voters terminated).
2. ∀(cid:96) ∈ [n] : if V(cid:96) ∈ ˜V then Verify(info, rec(cid:96)) = 1.
and either one of the following two :
3.a. if ⊥ (cid:54)= (cid:104)U(cid:96)(cid:105)V(cid:96)∈V\ ˜V ← E(info,{rec(cid:96)}V(cid:96)∈ ˜V ) then
(cid:0)Result(info), F (U1, . . . ,Un)(cid:1) ≥ d,
d1
3.b. ⊥ ← E(info,{rec(cid:96)}V(cid:96)∈ ˜V ).
Figure 2: The E2E Veriﬁability Game between the challenger C and the adversary A
using the vote extractor E.
4 Building Blocks
4.1 A NIZK for DDH Tuple
In this section, we construct a NIZK proof that allows the prover to convince the ver-
iﬁer that (A, B, C, D) ∈ (G1)4 is a DDH tuple. Namely, the prover shows that he
knows s ∈ Zp such that C = As ∧ D = Bs. The same proof works analogously
for DDH tuples in (G2)4, and such a NIZK proof with respect to crs is denoted as
NIZK{crs; (s) : C = As ∧ D = Bs}.
Our proof can be seen as a simpliﬁcation of the well-known Groth-Sahai (GS) proof
system [GS08]. Similar to [GOS06], we use additively homomorphic public key cryp-
tosystem, lifted ElGamal, for the commitment scheme. Given an lifted ElGamal cipher-
text u ∈ (G2)2 under public key pk, the commitment of m ∈ Zp with randomness r ∈ Zp
under commitment key ck = (pk, u) is deﬁned as
Comck(m; r) := um · Encpk(0; r)
. It is easy to see that:
1. If u is an encryption of a non-zero value x, then the commitment Comck(m; r) is
an encryption of xm and it is perfectly binding.
2. If u is an encryption of 0, then for very m the commitment Comck(m; r) is an
encryption of 0 and it is perfectly hiding.
10
The CRS of our NIZK consists of the bilinear group parameter, σbp and the com-
mitment key, ck := (pk, u). The CRS is perfectly sound when the perfectly binding
commitment key is used, while it is perfectly simulatable when the perfectly hiding com-
mitment key is used. Formally, the NIZK proof system Γddh consists of the following
PPT algorithms:
• Genddh
crs (σbp):
– Pick α1, α2 ← Z∗
p;
– Set h2 := gα1
– Set ck := (h2, u);
– Output crs := (σbp, ck);
2 and u := (u1, u2) := (gα2
2 , g2hα2
2 );
• Simddh
crs (σbp):
– Pick α1, α2 ← Z∗
p;
– Set h2 := gα1
– Set ck := (h2, u);
– Output crs∗ := (σbp, ck) and td := α2;
2 and u = (u1, u2) := (gα2
2 , hα2
2 );
• Provddh(crs; (A, B, C, D); s):
– Pick r ← Zp;
– Set c := (c1, c2) = Comck(s; r) := (us
– Output π := (c, π1, π2);
• Vrfyddh(crs; (A, B, C, D); π):
1gr
2, us
2hr
2), π1 := Ar, and π2 := Br;
– Output 1 if and only if the following hold:
∗ e(C, u1) · e(π1, g2) = e(A, c1);
∗ e(C, u2) · e(π1, h2) = e(A, c2);
∗ e(D, u1) · e(π2, g2) = e(B, c1);
∗ e(D, u2) · e(π2, h2) = e(B, c2);
• Simddh(crs∗; (A, B, C, D); td):
– Pick r ← Zp;
– Set c∗ = (c1, c2) := (gr
2), π∗
2, hr
1, π∗
– Output π∗ := (c∗, π∗
2);
1 = ArC−α2, and π∗
2 = BrD−α2;
Clearly, the simulated CRS is computationally indistinguishable from the real CRS
based on the IND-CPA security of the underlying ElGamal cryptosystem. We state the
following theorem without providing the proof since it can be directly derive from the
generic GS proof for the SXDH instantiation in [GS08].
Theorem 1. The protocol Γddh is a NIZK proof system for the language
Lddh =(cid:8)(A, B, C, D) ∈ (G1)4 | ∃s : C = As ∧ D = Bs(cid:9) ,
i.e. (A, B, C, D) is a DDH tuple. The NIZK proof has perfect completeness, perfect
soundness and computational zero-knowledge under the SXDH assumption.
11
4.2 NIZK OR Composition
In our work, OR composition of the NIZK proofs is often needed, e.g., to show a lifted
ElGamal ciphertext in (G1)2 (resp. (G2)2) is an encryption of 0 or 1. To achieve this,
we adopt the correlated key generation technique from [GOS06]2. The intuition is to use
two tiers of NIZK proofs, where the CRS for the ﬁrst tier NIZK is given as the master
CRS. To prove an OR composition of statements such as x1 ∨ . . . ∨ xn, the prover ﬁrst
generates n second tier CRS’s, crs1, . . . , crsn and uses the master CRS to show that at
least one of them is a perfectly sound CRS; the prover then uses the second tier CRS
crsi to prove the statement xi for i ∈ [n]. Since the prover is able to generate n − 1
perfectly simulatable CRS’s with trapdoors, he can simulate any n − 1 statements. On
the other hand, at least one of the crsi is perfectly sound, so at least one of the statement
xi is valid. The ZK property directly follows the fact that it is computationally hard to
distinguish which CRS is perfectly sound.
More speciﬁcally, the prover gives n lifted ElGamal ciphertexts as the n second tier
CRS, and shows the product of them is an encryption of 1 using the DDH tuple NIZK
described in Section 4.1. Therefore, we can ensure that at least one of the CRS encrypts
an non-zero value. In the following, we describe two special cases of OR compostion
that we apply in our e-voting system.
4.2.1 Proving that a ciphertext encrypts 0 or 1
We describe the NIZK proof system Γ0/1 for the ciphertext c = Encpk(b; r) ∈ (G1)2
encrypts 0 or 1, i.e., b ∈ {0, 1}.
• Gen0/1
crs (σbp):
– Use G1 variant of Genddh
crs (σbp) to produce a master CRS crsm in G1;
• Sim0/1
crs (σbp):
– Use G1 variant of Simddh
crs (σbp) to produce a simulated CRS crs∗
m in G1 and a
trapdoor td;
• Prov0/1(crsm; (pk := (g1, f1), c); (b, r)):
– Pick α1, α2, α3 ← Zp;
– Set h2 := gα1
and u(1−b) := (u(1−b)
2 , u(b) := (u(b)
, u(1−b)
1
1 , u(b)
2 ) = (gα2
) = (gα3
2 , hα3
2 , g2hα2
2 );
2 ),
2
– Set ck(b) := (h2, u(b)) and ck(1−b) := (h2, u(1−b));
– Deﬁne crs(b) := (σbp, ck(b)) and crs(1−b) := (σbp, ck(1−b));
– Set (u1, u2) = u(b) · u(1−b) ∈ (G2)2;
– Compute πcrs ← Provddh(crsm; (g2, h2, u1, u2/g2); α2 + α3);
– Set π(b) ← Provddh(crs(b); (g1, f1, c1, c2/gb
1); r)
and π(1−b) ← Simddh(crs(1−b); (g1, f1, c1, c2/g1−b
); α3);
1
2We refer interested readers to [R`af15] for more general NIZK composition via correlated key gener-
ation.
12
– Output π := (crs(0), crs(1), πcrs, π(0), π(1));
• Vrfy0/1(crsm; (pk := (g1, f1), c); π):
– Output 1 if and only if the following veriﬁes.
∗ Vrfyddh(crsm; (g2, h2, u1, u2/g2); πcrs)=1;
∗ Vrfyddh(crs(0); (g1, f1, c1, c2); π(0)) = 1;
∗ Vrfyddh(crs(1); (g1, f1, c1, c2/g2); π(1)) = 1;
• Sim0/1(crs∗
m; (pk := (g1, f1), c); td):
– Pick α1, α2, α3 ← Zp;
– Set h2 := gα1
2 , u(0) = (u(0)
and u(1) := (u(1)
1 , u(1)
1 , u(0)
2 ) = (gα3
2 ) := (gα2
2 , hα3
2 );
2 , hα2
2 ),
– Set ck(0) := (h2, u(0)) and ck(1) := (h2, u(1));
– Deﬁne crs(0) := (σbp, ck(0)) and crs(1) := (σbp, ck(1));
– Set (u1, u2) = u(0) · u(1) ∈ (G2)2;
– Compute πcrs ← Simddh(crs∗
– Set π(0) ← Simddh(crs(0); (g1, f1, c1, c2); α2)
m; (g2, h2, u1, u2/g2); td);
and π(1) ← Simddh(crs(1); (g1, f1, c1, c2/g1); α3);
– Output π∗ := (crs(0), crs(1), πcrs, π(0), π(1));
Theorem 2. The protocol Γ0/1 is a NIZK proof system for c encrypts 0 or 1. The NIZK
proof has perfect completeness, perfect soundness and computational zero-knowledge un-
der the SXDH assumption.
Proof. Perfect completeness. It directly follows from the completeness and simulata-
bility of the underlying NIZK proof Γddh.
Perfect soundness. The prover generates two CRSs, crs(0) and crs(1), and uses
Γddh to show that the product of them is lifted ElGamal encryption of 1. Since Γddh
is perfect sound, it is sure that at least one CRS encrypts to a non-zero value. By
simultaneously showing the given ciphertext c is encryption of 0 and 1 with respect to
crs(0) and crs(1), we guarantee that c encrypts either 0 or 1.
Computational zero-knowledge. It is straightforward that if the SXDH assump-
tion holds, then crs(0) and crs(1) are computationally indistinguishable (hence DDH is
hard for G2) and the simulated CRS crs∗
m is computationally indistinguishable from
the real one crsm. Moreover, the Γddh is computationally zero-knowledge, so all the
simulated sub-proofs are indistinguishable from the real ones. Therefore, π∗ is compu-
(cid:4)
tationally indistinguishable from π.
4.2.2 Proving that a ciphertext encrypts a value between min and max
Observe that this case is a generalization of Γ0/1, where we set min = 0 and max = 1.
The description follows the lines of Γ0/1 where now we generate max− min +1 CRSs
denoted by crs(min), . . . , crs(max). For j ∈ [min, max], crs(j) contains σbp and the com-
mitment key ck(j), which in turn consists of a random element h2 ∈ G2 and an ElGamal
encryption of j, u(j).
13
(cid:110)
crs(σbp; r) = crsL(cid:111)