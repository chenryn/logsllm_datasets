self,ssh_file = ssh_filename
self,dir - */datal/ssh_scan*
self dir1 = */data1/ssh_scan/scan_ssh*
self.hydra = */usr/1ocal/bin/hydra*
def prepare (self) :
cmd = *rm -f $s/x** 8 self,dir1
print cmd
08 ,8ystem (cnd)
expAu 6- TeπTx/uta/xsn/α = puo
0s .system (cnd)
ret = subprocess.call (cnd, she11=True)
# print ret
os.environ = '/data1/ssh_scan*
---
## Page 199
第9章漏洞扫描187
cmd - *cd Es;/usr/bin/split -1 200o $s* $ (self.dirl, self.ssh_file)
 print cmd
 ret = subprocess,cal1 (cmd, shel1=True)
# print ret
os . system (cmd)
08,environ = None
def scan (self) :
search = r′is/×** \ self.dir1
 print search, type (search)
iplist = glob .glob (search)
# print iplist
for ip in iplist:
cmd = *$s -vV -L s/user,txt -P ls/password.txt -M s ssh -0
s.1og -t 4 -w 10 -e n8r >> %s.log s' $
(self,hydra, self,dir, self,dir, ip, 1p, self.ssh_file)
 print cmd
o8 . system (cmd)
# Honeypot white list
class Honeywhite (object) :
def _init__ (self) :
self,db = torndb,Connection(
host=db_info,get (*hostname*), database=db_info.get (*database*) ,
user=db_info,get (*username *), password=db_info,get (*password*)
def result (self):
sq] = "select * from honeypotip*
ret = self,db,query(sql)
for iten in ret:
self , whiteList,append (iten,get (*Ip*) , stxip ())
return self,whiteList
 Main Function
i f
:,urew,--—oueu
 get honeypot white list
honey_white = BoneyWhite ()
CONST_HONEYPOT - honey_white,result ()
---
## Page 200
188技术篇
print *Honeypot white 1ist\n*, CONST_HONEYPOT
start_time = datetime,datetime.now()
ip_list_file = *ip_list_test.txt'
exclude_file = "exclude_file,txt*
h_exclude_file = open (exclude_file, *v")
for ip in CONST_HONEYPOT:
h_exclude_file,vrite (*§s\n"  ip)
h_exclude_file, close ()
nnap_scanner = NnapScaner (ip_1ist_ile, exclude_file)
nmap_scanner,start ()
ssh_file = nmap_scanner,result ()
end_time = datetime.datetime .nov ()
use_time = (end_time - start_time) ,seconds / 60.0
print *Stazt Tine:3s, End Time:&s, Cost 8s minutes* 3 (start_time, end_time, use_time)
start to crack ssh weak password
crack_ssh = CracksSH (ssh_fi1e)
crack_ssh.prepare ()
crack_ssh.scan ()
3.系统及应用服务漏洞扫描
常见的系统及应用服务漏洞扫描器有Nessus及开源的openVAS，当服务器数量巨大
时，需要部署多台Nessus服务器以集群模式进行扫描。
实践方法如下：
1）用程序调用Nessus的接口，将Nessus 的漏洞扫描做成周期性任务，每天对全部服
务器进行一次安全扫描，并将扫描结果入库，按漏润级别进行分级
2）程序自动建立工单并提交到业务部门进行修复，修复好后再转到安全部门确认，
形成一个良性的闭环（如果你所在的公司没有工单系统，则至少需要建立一个漏洞管理系
统代替）。
注：Nessus 官方提供的 RESTAPI接口的 GitHub地址为：https://github.com/tenable
nessrest:
---
## Page 201
第9章漏洞扫描189
4.Web漏洞扫描
业内常用的Web漏润扫描工具列表如下：
 Acunetix Web Vulnerability Scanner ( AWVS)
 IBM Rational AppScan
 sqlmap
 w3af
 arachni
 Zed Attack Proxy
以上几款扫描器中，前2款是商业软件，后几款是免费开源的。
实践方法如下：
口网站较少的公司。安全工程师手工用扫描器进行Web漏洞扫描即可，但至少要使用
2款以上扫描器进行交叉确认，避免因某款扫描器漏报导致漏洞没扫到面被外界黑客
利用的情况发生。一般建议AWVS必用，再配合zap或arachni进行确认。
口网站较多的公司。大中型的互联网公司有成千上万个大大小小的网站，安全工程师
人肉利用扫描工具进行扫描已经不现实了，需要自研扫描工具，实现自动化、批量
化的漏洞扫描。常见的一个自动化Web漏洞扫描器的架构图9-2所示。
自动化Web安全检测平台
自动化安全检测平台
检测引擎
物理架构图
任务提交平台
虫系统
web
PHI
更系统
上线变
Celer
码计
任务提交
任务分发
漏铜扫指
漏洞审核漏洞修复
八
MVS
1
图9-2自动化Web安全检测平台
---
## Page 202
190技术篇
9.2.2按扫描器行为分类
根据扫描器是否主动发包的行为，可将扫描器分为以下几种：
1）主动扫描
2）半被动扫描器
3）全被动扫描器
1.主动扫描
常规的扫描器都是主动发包，然后根据返回的包判断目标设备是否存在漏润。对于
Web扫描器来说，是先将URL爬出来，然后再在该URL中各个可以输人参数的地方测试
注入、XSS等负载。常用的AWVS、Sqlmap、Nessus等都是主动扫描器。
2.半被动扫描
其实该类扫描器还是属于主动扫描器，区别是URL的获取途径不是爬虫，而是以下儿
种方式。
（1）通过Accesslog获取URL
例如将用户或QA访问站点的Access log去重后进行扫描。
（2）通过流量镜像的方式获取URL
通过旁路镜像得到全流量URL，去重后进行扫描。对于比较大规模的Web资源扫描，
可以通过Storm流式计算平台将来自分光的全流量URL库rewrite替换，去重归一，验证
真实性后作为扫描器的输入源，由消息队列推送至分布式扫描器中。以下为一个利用WAF
log、爬虫结果及流量镜像中的URL作为输人源的扫描器的架构如图9-3所示。
（3）HTTP代理式的扫描器
这种方式常被QA或渗透测试人员使用，在浏览器设置一个代理，然后去访问网站的
页面，每访问一个URL就会被放到后台去扫描，基本的框架代码如下：
---
## Page 203
第9章漏洞扫描191
WAF日志
去重合并归
URL
爬虫
Web扫描器
URL
流量镜
像URL
图9-3URL库作为扫描器输人源
class ProxyHandler (tornado-web.Reque
stHandler) :
SUPPORTED_ METHODS = [*GET′,
"POST',
*CONNECT* ]
etornado,web,asynchronous
def get (self) :
url_info = dict (
methocself.request.method,
url=self.request.uri
self.request_info = None
def handle_response (response) :
if (response,error and not
isinstance (response,error, tornado,httpclient.HTrPError)) :
self,write(*Internal server error:\n′ + str (response.error))
else:
self.set_status (response.code)
for header in (*Date, *Cache=Cont.rol*,*Server*, *ContentType*, *Location′) :
v = response.headers,get (header)
if v:
self,set_header (header, v)
response.headers.get_list (*Set-Cookie′)
if v:
for i in v:
self,add_header(′Set-Cookie′, 1)
If response.body:
self.write (response.body)
# Insert http request
qpobuou oquT 
if self,application,scan:
---
## Page 204
192技术篇
ur] = url_info.get (*ur1*)
url_filter = UrlFilter (url)
If url_filter.filter ():
http_info = HttpInfo (url_info, self,request_info, response)
values - http_info.get_info ()
(oguTqp) qpobuog = qpobuou
mongodb . Insert (values)
self.finish ()
body = self,request.body
self.request_info = self,request
if not body:
body = None
try: