tocol vulnerabilities allow an attacker to successfully sub-
vert a DNSSEC domain and fool existing stub resolver and
end-user software, raising security implications discussed
in Section 6.3.
For our experiment, we set up a server running a BIND
9.6 instance for the hypothetical authoritative DNSSEC
zone “bank.com.”, containing an A record for the name
“www.bank.com”, an opt-out NSEC3 that covers the
name “attack1.bank.com”, and an insecure delegation to
a zone “attack2.bank.com”, so named for illustration pur-
poses. This server also hosts a legitimate web page at
“www.bank.com”, which sets secure and insecure cook-
ies with domain equal to “bank.com”, as well as a third-
party web page containing tags linked to the zones
“attack1.bank.com” and “attack2.bank.com”. We also set
up a user machine running web browsers, the OS stub re-
solver, and another BIND instance operating as the recur-
sive DNSSEC resolver, that communicates with the stub
resolver over the loopback interface. Finally, we set up
an attacker machine which can overhear and inject DNS
Exploit
NSEC3
Opt-out
Insecure
Delega-
tion
Legitimate Reply
Forged Reply
Signed RRs
Opt-out NSEC3 covering
“attack1.bank.com”
Unsigned Glue RRs
Signed RRs
Opt-out NSEC3 covering
“attack1.bank.com”
“attack2.bank.com
NS
“ns.a2.bank.com
1.2.3.4”
ns.a2.bank.com”
A
ns.atk.com”
Unsigned Glue RRs
“attack1.bank.com.
NS
“ns.atk.com A 5.6.7.8”
“attack2.bank.com
NS
“ns.a2.bank.com
5.6.7.8”
ns.a2.bank.com”
A
Table 4. Forged reply packets from “bank.com." zone used in cookie theft attack. 5.6.7.8 is an IP-address owned
by attackers.
packet trafﬁc between the recursive resolver and the zone
server. While this scenario places the experimental attacker
as a man-in-the-middle, the only information used by the
attacker from the overheard DNSSEC request packet is the
TXID. Thus, it is also possible to mount this attack as a via
Kaminsky-style out-of-path means.
6.1 Attacking Name Insertion
In the ﬁrst exploit step, our attacker attempts to poison
the local recursive DNSSEC resolver by inserting an A
record pointed at the attacker server with owner name con-
taining the sufﬁx “bank.com”. This may be done us-
ing both the the opt-out NSEC3 RR (creating an A RR
for “attack1.bank.com”) and the insecure delegation (“at-
tack2.bank.com”).
In either case, the attacker must ﬁrst
get the user to initiate recursive resolution for the attack-
ing A RR on the local DNSSEC resolver.
In our exper-
iment, this was initiated by two means: the user actually
typing the name into the browser address bar, and the user
accessing a third-party page with an image hosted at “at-
tack[12].bank.com”. In the wild the resolution may be initi-
ated via by phishing email, tags on third-party sites,
or other means. Then, while the local recursive resolver
queries the legitimate “bank.com.” DNSSEC server, our at-
tacking server sends a forged DNSSEC reply packet with
TXID matching the query to the local resolver, in a race
with the legitimate reply. Table 4 summarizes the forged
reply packets.
Table 4 also demonstrates how our attack is feasible for an
out-of-path attacker. The signed RRs used in the forged
reply are public and available to the attacker by simply
querying the “bank.com” DNSSEC zone. Thus, the only
“secret” information copied from request to forged reply
is the TXID. The attacker needs only to guess the TXID
to execute this attack without man-in-the-middle capabili-
ties. This implies an out-of-path attacker may also mount a
Kaminsky-style attack that requests many bogus sub-names
of “attack[12].bank.com” to create a birthday-problem in-
stance that matches TXID.
In our experiment,
the name-insertion attack succeeds
whenever the forged reply packet arrives at the local re-
solver ahead of the legitimate reply, as the TXID is copied
from request to spoofed response. In both cases, an insecure
delegation is created that causes the resolver to query the at-
tacking server and accept the forged “attack[12].bank.com”
A RR in its reply. This forged A RR also poisons the cache
of the local server, so that subsequent DNSSEC queries for
“attack[12].bank.com” by users of the local resolver return
the attack site address without requiring more injected at-
tack packets.
6.2 Cookie Theft
To steal user cookies once the false names have been in-
serted on the local DNSSEC resolver, the attacker utilizes
browser policy governing the cookie “domain” setting. The
policy speciﬁes that non-secure cookies be sent in all http
requests made to sites which are sub-domains of the cook-
ies’ “domain” setting.
In our experiment, the attack web
site at “http://attack[12].bank.com”, hosted on the attack
server, receives in http requests all legitimate non-secure
cookies set with domain equal to “bank.com”. The coarse-
grain setting for cookie domain required for this attack re-
ﬂects a common practice. For example, all of the cook-
ies for PayPal are set with domain equal to “paypal.com”,
even when the actual web pages are served from the address
“www.paypal.com”.
After the name insertion on the local DNSSEC resolver, the
cookie theft succeeds in our experiment any time the user
has active cookies set by “http://www.bank.com” and sub-
sequently makes a http request for any object (images, web
pages, etc.)
in the “attack[12].bank.com” domain. Even
if the name insertion has not yet occurred, the http request
to “http://attack[12].bank.com” itself generates a predicate
DNSSEC lookup that creates an opportunity for the spoofed
Figure 5. Illustration of NSEC3 Cookie Theft Attack. Packet 4a wins the race against packet 4b.
name insertion. Both the name insertion and the cookie
theft occur automatically after the single originating user
action of visiting the attack site or a third-party site link-
ing to attack site. The cookie theft is also very difﬁcult for
the user to detect, since the stolen payload is carried by in
a request to the attacker, allowing the attacker to return a
visually benign object or make no response at all. Figure 5
illustrates the entire attack using NSEC3 opt-out.
In order to steal secure cookies,
the user must open
“https://attack[12].bank.com”, as browser policy will only
send secure cookies over secure https. This makes the attack
slightly more difﬁcult, since the attacker should not pos-
sess Certiﬁcate Authority-validated credentials for encrypt-
ing the https connection. In our experiment this limitation
was bypassed by the user clicking through a browser warn-
ing dialog stating incorrect credentials, for Opera and older
version of Firefox and Internet Explorer. The attacker in
the wild may also use one of the CA-spooﬁng methods de-
tailed during BlackHat USA 2009 [19, 15], where attackers
obtains CA-validated credentials for a domain name con-
taining a null character, such as ’bank.com\0.attacker.com’,
that become valid for the domain name expressed before the
null character due to faulty browser implementation. Using
these certiﬁcates, stealing secure cookies becomes as sim-
ple as stealing non-secure ones.
6.3 Vulnerability Implications
via Kaminsky-style out-of-path means. Illegitimate name
insertion may be used for cookie theft, as we have demon-
strated. Pharming attacks, which are a form of phishing
where attacker page is shown at an address that legitimately
belongs to the victim domain, are also made possible by this
vulnerability.
7 Security Advice and Conclusion
DNSSEC is a complex system containing many options,
some of which have been demonstrated in this paper to lead
to security vulnerabilities. In addition, DNSSEC is oper-
ated by many participants, such as domain administrators,
software implementers, and ISPs. To summarize, in order
to be fully secure from authoritative zone (“example.com.”)
to end-user while still inter-operating with standard DNS,
DNSSEC requires:
1. DNSSEC adoption by authoritative zone
2. Authoritative zone to not use NSEC3 opt-out and to
have no insecure delegations
3. All ancestor zones (root and TLD) to adopt DNSSEC
and guarantee secure delegations at every step from
trust anchor authoritative zone
4. DNSSEC adoption by local recursive resolver
5. Secure channel in the last-hop between stub and recur-
sive resolvers
We have experimentally demonstrated how a network at-
tacker can exploit NSEC3 opt-out and also insecure dele-
gations to insert an illegitimate name into a DNSSEC zone.
We have also shown the feasibility of such name-insertion
In addition, to support incremental adoption, DNSSEC also
requires indicators of DNS lookup security to be imple-
mented in end-user interfaces.
It is clear that many parts of the DNS ecosystem need to
participate in DNSSEC in order for anyone to beneﬁt, thus
browser +stub resolver"bank.com." DNSSEC zoneattacker0. User visits www.bank.com,     Cookies set for "bank.com"1. User visits www.thirdparty.com,     containing  link to     attack1.bank.com4a3. Attacker    overhears query2. Query     "attack1.bank.com A?"recursiveresolversame computer4a. Forged reply      containing insecure       delegation5. Query "attack1.bank.com A?"6. Reply with A RR pointed at     attacker 4b. Legit reply      containing covering      opt-out NSEC3567. http request to attack1.bank.com    containing "bank.com" cookiesdampening any enthusiasm for incremental DNSSEC early-
adoption. We hope the planned DNSSEC deployment of
the root and TLD zones generates sufﬁcient momentum to-
wards adopting end-to-end DNS security.
We also observe that several of the DNSSEC security loop-
holes, such as zone enumeration and NSEC3 opt-out, result
from the desire to support off-line signing of authenticated
denial-of-existence. We believe that a better solution for
authenticated denial-of-existence, whether through on-line
signing of responses or a better cryptographically-based off-
line scheme, would lead to a more secure DNSSEC proto-
col.
To conclude this study of DNSSEC security, we offer the
following advice, also summarized in Table 1, to the various
operators and users of DNSSEC to eliminate exploitability
of the vulnerabilities uncovered in this study.
• For administrators running an DNSSEC server author-
itative over a domain such as ’bank.com.’, we advise
that all NSEC3 records NOT use opt-out. We also
advise that any insecure delegations from this zone
be made secure with the adoption of DNSSEC by
the delegation-target zone, to eliminate mechanisms
for falsiﬁed name insertion and DNS-DNSSEC inter-
operation.
To eliminate replay attacks, domain owners should
not relinquish IP addresses until they are certain all
RRSIGs for RRs pointing to these IP addresses have
expired.
• For website designers, we urge a ﬁne-grained cookie
“domain” setting. Coarse-grained cookie “domain”
setting, as we have shown, can be utilized as an av-
enue for cookie theft via DNS name insertion. In our
experiment, if the cookie domains were set to a ﬁner-
grain that covers only the web pages that actually re-
quire these cookies, the attack scenario in Section 6
would have been prevented under DNSSEC, since it is
impossible to forge records that prepend a subdomain
to an existent name such as “www.bank.com”.
• For DNSSEC software implementers, we emphasize
the importance of resolver software logic to the secu-
rity of DNSSEC. Our collected resolver software rec-
ommendations are:
– Bound RR TTL lifetime on the signature validity
period of all records forming the attestation chain
to the trust anchor, not just the single RRSIG cov-
ering the RR.
– Do not trust the header bits of DNSSEC reply
packets. As a consequence, all resolvers must
validate the content of DNSSEC reply packets
themselves.
– Build an attested cache only containing signed
RRs with full attestation chain to the trust an-
chor. Answers to user queries are only secure
when formed entirely from contents of this at-
tested cache.
– Use glue records only as indications of delega-
tion and pointers to child zone server address, but
not as data that can enter the attested cache.
• For ISPs, local recursive resolvers must request all
DNSSEC RRs to be included in packets to prove RR
integrity at the closest recursive resolver to the end
user. A secure channel between this recursive resolver
and the end user’s stub resolver is required to guaran-
tee DNSSEC integrity all the way to the end-user.
• For end user software vendors, especially browsers, we
urge the development of user-interface elements indi-
cating the security/insecurity of a DNSSEC lookup.
We believe the adoption of the advice laid out in this sec-
tion will lead to the best possible security practices for
DNSSEC.
References
[1] RFC 2535. Domain Name System Security Exten-
sions.
[2] RFC 2845. Secret Key Transaction Authentication for
DNS (TSIG).
[3] RFC 2931. DNS Request and Transaction Signatures
(SIG(0)s).
[4] RFC 4033. DNS Security Introduction and Require-
ments.
[5] RFC 4034. Resource Records for the DNS Security
Extensions.
[6] RFC 4035. Protocol Modiﬁcations for the DNS Secu-
rity Extensions.
[7] RFC 5155. DNS Security (DNSSEC) Hashed Authen-
ticated Denial of Existence.
[8] BIND Security Advisory. DNS Cache Poisoning Issue
(’Kaminsky bug’). https://www.isc.org/sw/
bind/forgery-resilience.php, 07/08/2008.
[9] BIND Security Advisory. BIND 9 Cache Update
https://www.isc.
from Additional Section.
org/node/504, 11/23/09.
[10] Wikipedia Article. Birthday Problem. http://en.
wikipedia.org/wiki/Birthday_problem.
[11] Daniel Bernstein. Breaking DNSSEC. 3rd Usenix
Workshop on Offensive Technologies, August 2009.
[12] Microsoft
Security Bulletin.
Vulnerabili-
in DNS Could Allow Spooﬁng (953230).
ties
http://www.microsoft.com/technet/
security/Bulletin/ms08-037.mspx,
07/08/2008.
[13] David Dill. The Murϕ Veriﬁcation System. Com-
puter Aided Veriﬁcation, 8th International Confer-
ence, 1996.
[14] Dan Kaminsky. It’s the End of the Cache as We Know
It. BlackHat USA, Auguest 2008.
[15] Dan Kaminsky. Black Ops of PKI. BlackHat USA,
August 2009.
[16] Dan Kaminsky. DNS 2008 and the New (old) Na-
ture of Critical Infrastructure. BlackHat DC, February
2009.
[17] Robert Lemos.
Poisoned DNS Servers Pop Up
as ISPs Patch. http://www.securityfocus.
com/news/11529.
[18] Gavin Lowe. Breaking and Fixing the Needham-
Schroeder Public-Key Protocol using CSP and FDR.
In 2nd International Workshop on Tools and Algo-
rithms for the Constructions and Analysis of Systems,
1996.
[19] Moxie Marlinspike. More Tricks For Defeating SSL.
BlackHat USA, August 2009.
[20] John C. Mitchell, Vitaly Shmatikov, and Ulrich Stern.
Finite-State Analysis of SSL 3.0. In Seventh USENIX
Security Symposium, pages 201–216, 1998.
[21] Erica Naone. The Flaw at the Heart of the Internet.
Technology Review, November/December 2008.