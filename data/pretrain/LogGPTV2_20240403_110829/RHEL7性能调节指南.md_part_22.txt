# [⁠]{#appe-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference-numactl}A.13. numactl {.title}
:::
::: para
[**Numactl**]{.application}
允许管理员使用指定的调度或内存放置策略来运行进程。[**Numactl**]{.application}
也能为共享的内存段或文件设置永久策略，以及进程的处理器关联和内存关联。
:::
::: para
[**Numactl**]{.application}
提供许多实用的选项。此附录概述一部分选项，也为用户提供了一些使用建议，但并不详细。
:::
::: variablelist
[⁠]{#appe-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-numactl-_hardware}[\--hardware]{.term}
:   ::: para
    显示系统中的可用节点，且包含节点间的相对距离的详细目录。
    :::
[⁠]{#appe-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-numactl-_membind}[\--membind]{.term}
:   ::: para
    确保内存只由指定节点分配。如果指定地点没有足够的可用内存，分配会失败。
    :::
[⁠]{#appe-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-numactl-_cpunodebind}[\--cpunodebind]{.term}
:   ::: para
    确保指定命令及其子进程只在指定的节点上执行。
    :::
[⁠]{#appe-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-numactl-_phycpubind}[\--phycpubind]{.term}
:   ::: para
    确保指定的命令及其子进程只在指定的处理器上执行。
    :::
[⁠]{#appe-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-numactl-_localalloc}[\--localalloc]{.term}
:   ::: para
    指明内存应当始终从本地节点分配。
    :::
[⁠]{#appe-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-numactl-_preferred}[\--preferred]{.term}
:   ::: para
    指定分配内存的优选节点。如果内存不能从指定的节点分配，其他的节点将被用于回退。
    :::
:::
::: para
有关以上内容和其他参数的细节，参见手册页：
:::
``` screen
$ man numactl
```
:::
::: section
::: titlepage
# [⁠]{#appe-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference-numad}A.14. numad {.title}
:::
::: para
[**numad**]{.application} 是一个自动 NUMA 关联管理后台程序。为了动态提高
NUMA 资源分配和管理，它在系统内监控 NUMA 的拓扑结构和资源使用。
:::
::: para
注意启用 [**numad**]{.application} 时 ，其行为将替代默认的自动 NUMA
平衡的行为。
:::
::: section
::: titlepage
## [⁠]{#appe-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-numad-Using_numad_from_the_command_line}A.14.1. 在命令行使用 numad {.title}
:::
::: para
将 [**numad**]{.application} 作为执行表使用，只需运行：
:::
``` screen
# numad
```
::: para
[**numad**]{.application} 运行的时候，其活动被记录在
`/var/log/numad.log`{.filename}。它会持续运行直到被以下命令终止：
:::
``` screen
# numad -i 0
```
::: para
终止 [**numad**]{.application} 不会移除它所做的提高 NUMA
关联的变更。如果系统使用有显著的变化，再次运行 [**numad**]{.application}
能调整关联来提高新条件下的性能。
:::
::: para
如需将 [**numad**]{.application}
管理限制为特定进程，用下列选项来启动它：
:::
``` screen
# numad -S 0 -p pid
```
::: variablelist
[⁠]{#appe-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Using_numad_from_the_command_line-_p_pid}[-p *pid*]{.term}
:   ::: para
    该选项将指定的 *pid* 添加到显式的包含列表中。当指定的进程达到
    [**numad**]{.application} 进程的显著门限值，指定的进程才会被管理。
    :::
[⁠]{#appe-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Using_numad_from_the_command_line-_S_0}[-S 0]{.term}
:   ::: para
    它将进程扫描的类型设置为 `0`{.literal}，这会将
    [**numad**]{.application} 管理限制到显式包含的进程。
    :::
:::
::: para
有关可用的 [**numad**]{.application}
选项的详细信息，参见[**numad**]{.application}手册页：
:::
``` screen
$ man numad
```
:::
::: section
::: titlepage
## [⁠]{#appe-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-numad-Using_numad_as_a_service}A.14.2. 作为一个服务来使用 numad {.title}
:::
::: para
将 [**numad**]{.application}
作为服务运行时，它尝试基于当前系统的工作负载来动态调整系统。其活动记录在
`/var/log/numad.log`{.filename}。
:::
::: para
如需启动服务，运行：
:::
``` screen
# systemctl start numad.service
```
::: para
如需重启后服务持久，运行：
:::
``` screen
# chkconfig numad on
```
::: para
有关可用的 [**numad**]{.application}
选项的详细信息，参见[**numad**]{.application}手册页：
:::
``` screen
$ man numad
```
:::
::: section
::: titlepage
## [⁠]{#appe-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-numad-Pre_placement_advice}A.14.3. 预安排建议 {.title}
:::
::: para
[**numad**]{.application}
提供多任务管理系统能够查询的预安排建议服务，从而为进程提供 CPU
的初始绑定和内存资源的协助。无论 [**numad**]{.application}
是否作为可执行或服务来运行，该预安排建议均可用。
:::
:::
::: section
::: titlepage
## [⁠]{#appe-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-numad-Using_numad_with_KSM}A.14.4. 使用带 KSM 的 numad {.title}
:::
::: para
如果 KSM 在 NUMA 系统中有所使用，为避免跨 NUMA 节点合并页，把
`/sys/kernel/mm/ksm/merge_nodes`{.filename} 参数值改为
`0`{.literal}。否则，由于跨 NUMA 节点页合并，KSM
会增加远程内存接入。此外，在大量的跨 NUMA
节点页合并后，内核的内存会计统计会最终否定彼此。因此，KSM
后台程序合并了很多内存页后，`numad`{.systemitem}
会对可用内存正确数量和位置产生困惑。只有过度使用系统内存时，KSM
是有益的。如果系统有足够的空闲内存，可关闭或禁用 KSM
后台程序以提高性能表现。
:::
:::
:::
::: section
::: titlepage
# [⁠]{#appe-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference-OProfile}A.15. OProfile {.title}
:::
::: para
由 [oprofile]{.package} 软件包提供的 OProfile
是低开销的、系统范围的性能监控工具。它使用处理器上的性能监控硬件检索有关系统内核和执行表的信息。例如引用的内存、二级缓存请求的编号以及接收的硬件中断的编号。OProfile
也能配置运行在 Java 虚拟机（JVM）里的应用程序。
:::
::: para
OProfile 提供以下工具。注意旧有的 `opcontrol`{.command} 工具和新的
`operf`{.command} 工具是互斥的。
:::
::: variablelist
[⁠]{#appe-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-OProfile-ophelp}[ophelp]{.term}
:   ::: para
    显示系统的处理器可用的事件，及其简要描述。
    :::
[⁠]{#appe-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-OProfile-opimport}[opimport]{.term}
:   ::: para
    将样本数据库文件从异质的二进制格式转换为系统的本机格式。仅从不同的结构中分析样本数据库时使用该选项。
    :::
[⁠]{#appe-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-OProfile-opannotate}[opannotate]{.term}
:   ::: para
    如果应用和调试符号一起被编译，为执行表创建源码。
    :::
[⁠]{#appe-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-OProfile-opcontrol}[opcontrol]{.term}
:   ::: para
    配置在分析运行中收集的数据。
    :::
[⁠]{#appe-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-OProfile-operf}[operf]{.term}
:   ::: para
    打算替换 `opcontrol`{.command}。`operf`{.command} 工具使用 Linux
    性能事件子系统，它使您能够更准确地将配置文件作为单进程或系统范围设定目标，以及使得
    OProfile 能与其他在您系统中使用性能监控的硬件工具更好的共存。不同于
    `opcontrol`{.command}，无需初始设置，并且它能在没有 root
    权限的情况下使用，除非使用了 `--system-wide`{.option} 选项。
    :::
[⁠]{#appe-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-OProfile-opreport}[opreport]{.term}
:   ::: para
    检索配置文件数据。
    :::
[⁠]{#appe-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-OProfile-oprofiled}[oprofiled]{.term}
:   ::: para
    以后台方式运行样本数据，将其周期性地写入硬盘。
    :::
:::
::: para
旧有模式（`opcontrol`{.command}、`oprofiled`{.command}
和后期处理工具）仍然可用，但它不再是推荐的分析模式。
:::