output some of the more interesting COFF File Header values
(Listing 12-18).
// Print File Header
fmt.Println("[-----COFF File Header-----]")
fmt.Printf("[+] Machine Architecture: %#x\n", pefile.FileHeader.Machine)
fmt.Printf("[+] Number of Sections: %#x\n",
pefile.FileHeader.NumberOfSections)
fmt.Printf("[+] Size of Optional Header: %#x\n",
pefile.FileHeader.SizeOfOptionalHeader)
// Print section names
fmt.Println("[-----Section Offsets-----]")
fmt.Printf("[+] Number of Sections Field Offset: %#x\n", pe_sig_offset+6) ❶
// this is the end of the Signature header (0x7c) + coff (20bytes) + oh32
(224bytes)
fmt.Printf("[+] Section Table Offset: %#x\n", pe_sig_offset+0xF8)
/* OUTPUT
[-----COFF File Header-----]
[+] Machine Architecture: 0x14c ❷
[+] Number of Sections: 0x8 ❸
[+] Size of Optional Header: 0xe0 ❹
[-----Section Offsets-----]
[+] Number of Sections Field Offset: 0x15e ❺
[+] Section Table Offset: 0x250 ❻
*/
Listing 12-18: Writing COFF File Header values to terminal output (/ch-
12/peParser/main.go)
You can locate the NumberOfSections value by calculating the
offset of the PE signature + 4 bytes + 2 bytes—in other words,
by adding 6 bytes. In our code, we already defined pe_sig_offset,
so we’d just add 6 bytes to that value ❶. We’ll discuss
sections in more detail when we examine the Section Table
structure.
The produced output describes the Machine Architecture ❷
value of 0x14c: an IMAGE_FILE_MACHINE_I386 as detailed in
https://docs.microsoft.com/en-us/windows/win32/debug/pe-
format#machine-types. The number of sections ❸ is 0x8,
dictating that eight entries exist within the Section Table. The
Optional Header (which will be discussed next) has a variable
length depending on architecture: the value is 0xe0 (224 in
decimal), which corresponds to a 32-bit system ❹. The last
two sections can be considered more of convenience output.
Specifically, the Sections Field Offset ❺ provides the offset to the
number of sections, while the Section Table Offset ❻ provides the
offset for the location of the Section Table. Both offset values
would require modification if adding shellcode, for example.
Parsing the Optional Header
The next header in the PE file structure is the Optional
Header. An executable binary image will have an Optional
Header that provides important data to the loader, which loads
the executable into virtual memory. A lot of data is contained
within this header, so we’ll cover only a few items in order to
get you used to navigating this structure.
To get started, we need to perform a binary read of the
relevant byte length based on architecture, as described in
Listing 12-19. If you were writing more comprehensive code,
you’d want to check architectures (for example, x86 versus
x86_64) throughout in order to use the appropriate PE data
structures.
// Get size of OptionalHeader
❶ var sizeofOptionalHeader32 = uint16(binary.Size(pe.OptionalHeader32{}))
❷ var sizeofOptionalHeader64 = uint16(binary.Size(pe.OptionalHeader64{}))
❸ var oh32 pe.OptionalHeader32
❹ var oh64 pe.OptionalHeader64
// Read OptionalHeader
switch pefile.FileHeader.SizeOfOptionalHeader {
case sizeofOptionalHeader32:
❺ binary.Read(sr, binary.LittleEndian, &oh32)
case sizeofOptionalHeader64:
binary.Read(sr, binary.LittleEndian, &oh64)
}
Listing 12-19: Reading the Optional Header bytes (/ch-12/peParser/main.go)
In this code block, we’re initializing two variables,
sizeOfOptionalHeader32 ❶ and sizeOfOptionalHeader64 ❷, with 224
bytes and 240 bytes, respectively. This is an x86 binary, so
we’ll use the former variable in our code. Immediately
following the variable declarations are initializations of
pe.OptionalHeader32 ❸ and pe.OptionalHeader64 ❹ interfaces, which
will contain the OptionalHeader data. Finally, we perform the
binary read ❺ and marshal it to the relevant data structure: the
oh32 based on a 32-bit binary.
Let’s describe some of the more notable items of the
Optional Header. The corresponding print statements and
subsequent output are provided in Listing 12-20.
// Print Optional Header
fmt.Println("[-----Optional Header-----]")
fmt.Printf("[+] Entry Point: %#x\n", oh32.AddressOfEntryPoint)
fmt.Printf("[+] ImageBase: %#x\n", oh32.ImageBase)
fmt.Printf("[+] Size of Image: %#x\n", oh32.SizeOfImage)
fmt.Printf("[+] Sections Alignment: %#x\n", oh32.SectionAlignment)
fmt.Printf("[+] File Alignment: %#x\n", oh32.FileAlignment)
fmt.Printf("[+] Characteristics: %#x\n", pefile.FileHeader.Characteristics)
fmt.Printf("[+] Size of Headers: %#x\n", oh32.SizeOfHeaders)
fmt.Printf("[+] Checksum: %#x\n", oh32.CheckSum)
fmt.Printf("[+] Machine: %#x\n", pefile.FileHeader.Machine)
fmt.Printf("[+] Subsystem: %#x\n", oh32.Subsystem)
fmt.Printf("[+] DLLCharacteristics: %#x\n", oh32.DllCharacteristics)
/* OUTPUT
[-----Optional Header-----]
[+] Entry Point: 0x169e682 ❶
[+] ImageBase: 0x400000 ❷
[+] Size of Image: 0x3172000 ❸
[+] Sections Alignment: 0x1000 ❹
[+] File Alignment: 0x200 ❺
[+] Characteristics: 0x102
[+] Size of Headers: 0x400
[+] Checksum: 0x2e41078
[+] Machine: 0x14c
[+] Subsystem: 0x2
[+] DLLCharacteristics: 0x8140
*/
Listing 12-20: Writing Optional Header values to terminal output (/ch-
12/peParser/main.go)
Assuming that the objective is to backdoor a PE file, you’ll
need to know both the ImageBase ❷ and Entry Point ❶ in order to
hijack and memory jump to the location of the shellcode or to
a new section defined by the number of Section Table entries. The
ImageBase is the address of the first byte of the image once it is
loaded into memory, whereas the Entry Point is the address of the
executable code relative to the ImageBase. The Size of Image ❸ is
the actual size of the image, in its entirety, when loaded into
memory. This value will need to be adjusted to accommodate
any increase in image size, which could happen if you added a
new section containing shellcode.
The Sections Alignment ❹ will provide the byte alignment
when sections are loaded into memory: 0x1000 is a rather
standard value. The File Alignment ❺ provides the byte
alignment of the sections on raw disk: 0x200 (512K) is also a
common value. You’ll need to modify these values in order to
get working code, and you’ll have to use a hex editor and a
debugger if you’re planning to perform all this manually.
The Optional Header contains numerous entries. Instead of
describing every single one of them, we recommend that you
explore the documentation at https://docs.microsoft.com/en-
us/windows/win32/debug/pe-format#optional-header-
windows-specific-fields-image-only to gain a comprehensive
understanding of each entry.
Parsing the Data Directory
At runtime, the Windows executable must know important
information, such as how to consume a linked DLL or how to
allow other application processes to consume resources that
the executable has to offer. The binary also needs to manage
granular data, such as thread storage. This is the primary
function of the Data Directory.
The Data Directory is the last 128 bytes of the Optional
Header and pertains specifically to a binary image. We use it
to maintain a table of references containing both an individual
directory’s offset address to the data location and the size of
the data. Exactly 16 directory entries are defined within the
WINNT.H header, which is a core Windows header file that
defines various data types and constants to be used throughout
the Windows operating system.
Note that not all of the directories are in use, as some are
reserved or unimplemented by Microsoft. The entire list of
data directories and details of their intended use can be
referenced at https://docs.microsoft.com/en-
us/windows/win32/debug/pe-format#optional-header-data-
directories-image-only. Again, a lot of information is
associated with each individual directory, so we recommend
you take some time to really research and get familiar with
their structures.
Let’s explore a couple of directory entries within the Data
Directory by using the code in Listing 12-21.
// Print Data Directory
fmt.Println("[-----Data Directory-----]")
var winnt_datadirs = []string{ ❶
"IMAGE_DIRECTORY_ENTRY_EXPORT",
"IMAGE_DIRECTORY_ENTRY_IMPORT",
"IMAGE_DIRECTORY_ENTRY_RESOURCE",
"IMAGE_DIRECTORY_ENTRY_EXCEPTION",
"IMAGE_DIRECTORY_ENTRY_SECURITY",
"IMAGE_DIRECTORY_ENTRY_BASERELOC",
"IMAGE_DIRECTORY_ENTRY_DEBUG",
"IMAGE_DIRECTORY_ENTRY_COPYRIGHT",
"IMAGE_DIRECTORY_ENTRY_GLOBALPTR",
"IMAGE_DIRECTORY_ENTRY_TLS",
"IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG",
"IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT",
"IMAGE_DIRECTORY_ENTRY_IAT",
"IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT",
"IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR",
"IMAGE_NUMBEROF_DIRECTORY_ENTRIES",
}
for idx, directory := range oh32.DataDirectory { ❷
fmt.Printf("[!] Data Directory: %s\n", winnt_datadirs[idx])
fmt.Printf("[+] Image Virtual Address: %#x\n", directory.VirtualAddress)
fmt.Printf("[+] Image Size: %#x\n", directory.Size)
}
/* OUTPUT
[-----Data Directory-----]
[!] Data Directory: IMAGE_DIRECTORY_ENTRY_EXPORT ❸
[+] Image Virtual Address: 0x2a7b6b0 ❹
[+] Image Size: 0x116c ❺
[!] Data Directory: IMAGE_DIRECTORY_ENTRY_IMPORT ❻
[+] Image Virtual Address: 0x2a7c81c
[+] Image Size: 0x12c
--snip--
*/
Listing 12-21: Parsing the Data Directory for address offset and size (/ch-
12/peParser/main.go)
The Data Directory list ❶ is statically defined by
Microsoft, meaning that the literal individual directory names
will remain in a consistently ordered list. As such, they are
considered to be constants. We will use a slice variable,
winnt_datadirs, to store the individual directory entries so we can
reconcile names to index positions. Specifically, the Go PE
package implements the Data Directory as a struct object, so
we’re required to iterate over each entry to extract the
individual directory entries, along with their respective address
offset and size attributes. The for loop is 0-index based, so we
just output each slice entry relative to its index position ❷.
The directory entries being displayed to standard output are
the IMAGE_DIRECTORY_ENTRY_EXPORT ❸, or the EAT, and the
IMAGE_DIRECTORY_ENTRY_IMPORT ❻, or the IAT. Each of these
directories maintains a table of exported and imported
functions, respectively, relative to the running Windows
executable. Looking further at
IMAGE_DIRECTORY_ENTRY_EXPORT, you will see the virtual
address ❹ containing the offset of the actual table data, along
with the size ❺ of the data contained within.
Parsing the Section Table
The Section Table, the last PE byte structure, immediately
follows the Optional Header. It contains the details of each
relevant section in the Windows executable binary, such as
executable code and initialized data location offsets. The
number of entries matches the NumberOfSections defined within
the COFF File Header. You can locate the Section Table at the
PE signature offset + 0xF8. Let’s take a look at this section
within a hex editor (Figure 12-8).
Figure 12-8: The Section Table, as observed using a hex editor
This particular Section Table starts with .text, but it might
start with a CODE section, depending on the binary’s compiler.
The .text (or CODE) section contains the executable code,
whereas the next section, .rodata, contains read-only constant
data. The .rdata section contains resource data, and the .data
section contains initialized data. Each section is at least 40
bytes in length.
You can access the Section Table within the COFF File
Header. You can also access each section individually, using
the code in Listing 12-22.
s := pefile.Section(".text")
fmt.Printf("%v", *s)
/* Output
{{.text 25509328 4096 25509376 1024 0 0 0 0 1610612768} [] 0xc0000643c0
0xc0000643c0}
*/
Listing 12-22: Parsing a specific section from the Section Table (/ch-
12/peParser/main.go)
The other option is to iterate over the entire Section Table,
as shown in Listing 12-23.
fmt.Println("[-----Section Table-----]")
for _, section := range pefile.Sections { ❶
fmt.Println("[+] --------------------")
fmt.Printf("[+] Section Name: %s\n", section.Name)
fmt.Printf("[+] Section Characteristics: %#x\n", section.Characteristics)
fmt.Printf("[+] Section Virtual Size: %#x\n", section.VirtualSize)
fmt.Printf("[+] Section Virtual Offset: %#x\n", section.VirtualAddress)
fmt.Printf("[+] Section Raw Size: %#x\n", section.Size)
fmt.Printf("[+] Section Raw Offset to Data: %#x\n", section.Offset)
fmt.Printf("[+] Section Append Offset (Next Section): %#x\n",
section.Offset+section.Size)
}
/* OUTPUT
[-----Section Table-----]
[+] --------------------
[+] Section Name: .text ❷
[+] Section Characteristics: 0x60000020 ❸
[+] Section Virtual Size: 0x1853dd0 ❹
[+] Section Virtual Offset: 0x1000 ❺
[+] Section Raw Size: 0x1853e00 ❻
[+] Section Raw Offset to Data: 0x400 ❼
[+] Section Append Offset (Next Section): 0x1854200 ❽
[+] --------------------
[+] Section Name: .rodata
[+] Section Characteristics: 0x60000020
[+] Section Virtual Size: 0x1b00
[+] Section Virtual Offset: 0x1855000
[+] Section Raw Size: 0x1c00
[+] Section Raw Offset to Data: 0x1854200
[+] Section Append Offset (Next Section): 0x1855e00
--snip--
*/
Listing 12-23: Parsing all sections from a Section Table (/ch-12/peParser/main.go)
Here, we’re iterating over all the sections within the
Section Table ❶ and writing the name ❷, virtual size ❹, virtual
address ❺, raw size ❻, and raw offset ❼ to standard output. Also,
we calculate the next 40-byte offset address ❽ in the event
that we’d want to append a new section. The characteristics value
❸ describes how the section is to behave as part of the binary.
For example, the .text section provides a value of 0x60000020.
Referencing the relevant Section Flags data at
https://docs.microsoft.com/en-us/windows/win32/debug/pe-
format#section-flags (Table 12-2), we can see that three
separate attributes make up the value.
Table 12-2: Characteristics of Section Flags
Flag Value Description
IMAGE_SCN_CNT 0x00000020 The section contains executable code.
_CODE
IMAGE_SCN_MEM 0x20000000 The section can be executed as code.
_EXECUTE
IMAGE_SCN_MEM 0x40000000 The section can be read.
_READ
The first value, 0x00000020 (IMAGE_SCN_CNT_CODE), states
that the section contains executable code. The second value,
0x20000000 (IMAGE_SCN_MEM_EXECUTE), states that the section
can be executed as code. Lastly, the third value, 0x40000000
(IMAGE_SCN_MEM_READ), allows the section to be read.
Therefore, adding all these together provides the value
0x60000020. If you’re adding a new section, keep in mind that
you’ll need to update all these properties with their appropriate
values.
This wraps up our discussion of the PE file data structure.
It was a brief overview, we know. Each section could be its
own chapter. However, it should be enough to allow you to
use Go as a means to navigate arbitrary data structures. The
PE data structure is quite involved and it’s well worth the time
and effort necessary to become familiar with all of its
components.
Additional Exercises
Take the knowledge you just learned about the PE file data
structure and expand upon it. Here are some additional ideas
that will help reinforce your understanding, while also
providing a chance to explore more of the Go PE package:
Obtain various Windows binaries and use a hex editor and a debugger to explore
the various offset values. Identify how various binaries are different, such as
their number of sections. Use the parser that you built in this chapter to both
explore and verify your manual observations.
Explore new areas of the PE file structure, such as the EAT and IAT. Now,
rebuild the parser to support DLL navigation.
Add a new section to an existing PE file to include your shiny new shellcode.
Update the entire section to include the appropriate number of sections, entry
point, and raw and virtual values. Do this all over again, but this time, instead of
adding a new section, use an existing section and create a code cave.
One topic that we didn’t discuss was how to handle PE files that have been code
packed, either with common packers, such as UPX, or more obscure packers.
Find a binary that has been packed, identify how it was packed and what packer
was used, and then research the appropriate technique to unpack the code.
USING C WITH GO
Another method of accessing the Windows API is to leverage
C. By directly using C, you could take advantage of an
existing library that is available only in C, create a DLL
(which we can’t do using Go alone), or simply call the
Windows API. In this section, we’ll first install and configure
a C toolchain that is compatible with Go. We will then look at
examples of how to use C code in Go programs and how to
include Go code in C programs.
Installing a C Windows Toolchain
To compile programs that contain a combination of Go and C,
you’ll need a suitable C toolchain that can be used to build
portions of C code. On Linux and macOS, you can install the
GNU Compiler Collection (GCC) by using a package
manager. On Windows, installing and configuring a toolchain
is a bit more involved and can lead to frustration if you’re not
familiar with the many options available. The best option we
found is to use MSYS2, which packages MinGW-w64, a
project created to support the GCC toolchain on Windows.
Download and install this from https://www.msys2.org/ and
follow the instructions on that page to install your C toolchain.
Also, remember to add the compiler to your PATH variable.
Creating a Message Box Using C and the Windows
API
Now that we have a C toolchain configured and installed, let’s
look at a simple Go program that leverages embedded C code.
Listing 12-24 contains C that uses the Windows API to create
a message box, which gives us a visual display of the
Windows API in use.
package main
❶ /*
#include 
#include 
❷ void box()
{
MessageBox(0, "Is Go the best?", "C GO GO", 0x00000004L);
}
*/
❸ import "C"
func main() {
❹ C.box()
}
Listing 12-24: Go using C (/ch-12/messagebox/main.go)
C code can be provided through external file include
statements ❶. It can also be embedded directly in a Go file.
Here we are using both methods. To embed C code into a Go
file, we use a comment, inside of which we define a function
that will create a MessageBox ❷. Go supports comments for
many compile-time options, including compiling C code.
Immediately after the closing comment tag, we use import "C" to
tell the Go compiler to use CGO, a package that allows the Go
compiler to link native C code at build time ❸. Within the Go