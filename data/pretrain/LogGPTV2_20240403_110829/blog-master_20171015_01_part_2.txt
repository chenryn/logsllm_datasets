-------------------------    
                     128    
(1 row)    
```    
压测，pg_pathman 是native partition 的10几倍性能。      
```    
progress: 11.0 s, 262159.5 tps, lat 0.244 ms stddev 0.135    
progress: 12.0 s, 260462.8 tps, lat 0.246 ms stddev 0.124    
progress: 13.0 s, 259761.5 tps, lat 0.246 ms stddev 0.130    
progress: 14.0 s, 271007.1 tps, lat 0.236 ms stddev 0.118    
```    
profiling    
```    
perf report -g    
Samples: 1M of event 'cycles', Event count (approx.): 529675912799                                  
  Children      Self  Command          Shared Object              Symbol                            
+   78.90%     0.00%  postgres         libc-2.17.so               [.] __libc_start_main             
+   78.90%     0.00%  postgres         postgres                   [.] startup_hacks                 
+   78.90%     0.00%  postgres         postgres                   [.] PostmasterMain                
+   78.00%     0.00%  postgres         postgres                   [.] ServerLoop                    
+   78.00%     0.00%  postgres         postgres                   [.] BackendStartup                
+   78.00%     0.00%  postgres         postgres                   [.] ExitPostmaster                
+   77.72%     0.24%  postgres         postgres                   [.] PostgresMain                  
+   48.13%     0.13%  postgres         postgres                   [.] exec_execute_message          
+   47.16%     0.07%  postgres         postgres                   [.] PortalRun                     
+   47.03%     0.11%  postgres         postgres                   [.] PortalRunMulti                
+   44.80%     0.07%  postgres         postgres                   [.] ProcessQuery                  
+   29.89%     0.01%  postgres         postgres                   [.] ExecutorRun                   
+   29.87%     0.06%  postgres         postgres                   [.] standard_ExecutorRun          
+   29.78%     0.04%  postgres         postgres                   [.] ExecutePlan                   
+   29.51%     0.03%  postgres         postgres                   [.] ExecProcNode                  
+   29.47%     0.04%  postgres         postgres                   [.] ExecProcNodeFirst             
+   29.41%     0.14%  postgres         postgres                   [.] ExecModifyTable               
+   20.70%     0.13%  postgres         postgres                   [.] ExecInsert                    
+   12.84%     0.02%  postgres         postgres                   [.] finish_xact_command           
+   12.80%     0.05%  postgres         postgres                   [.] CommitTransactionCommand      
+   12.21%     0.08%  postgres         postgres                   [.] CommitTransaction             
+   12.19%     0.05%  postgres         postgres                   [.] ExecutorStart                 
+   12.09%     0.04%  postgres         postgres                   [.] standard_ExecutorStart        
+   11.57%     0.11%  postgres         postgres                   [.] InitPlan                      
+   10.91%     0.10%  postgres         postgres                   [.] ExecConstraints               
+   10.75%     0.07%  postgres         postgres                   [.] ExecRelCheck                  
+   10.19%     0.16%  postgres         postgres                   [.] ExecInitNode                  
+   10.04%     0.25%  postgres         postgres                   [.] ExecInitModifyTable           
+   10.03%     0.01%  postgres         [kernel.kallsyms]          [k] system_call_fastpath          
+    9.07%     0.11%  postgres         postgres                   [.] heap_insert                   
+    8.82%     0.11%  postgres         postgres                   [.] ExecInitCustomScan            
+    8.46%     0.22%  postgres         postgres                   [.] exec_bind_message             
+    8.32%     0.03%  postgres         postgres                   [.] ExecProcNode                  
+    8.27%     0.06%  postgres         postgres                   [.] ExecCustomScan                
+    8.14%     0.09%  postgres         pg_pathman.so              [.] partition_filter_exec         
+    7.07%     0.25%  swapper          [kernel.kallsyms]          [k] cpu_startup_entry             
+    6.99%     0.00%  swapper          [kernel.kallsyms]          [k] start_secondary               
+    6.45%     0.04%  postgres         postgres                   [.] stringToNode                  
+    6.45%     0.04%  postgres         pg_pathman.so              [.] select_partition_for_insert   
+    6.40%     0.16%  postgres         postgres                   [.] nodeRead                      
+    6.15%     0.21%  postgres         postgres                   [.] parseNodeString               
+    6.02%     0.00%  pgbench          libpthread-2.17.so         [.] start_thread                  
+    5.98%     0.04%  postgres         postgres                   [.] _readBoolExpr                 
+    5.92%     0.05%  postgres         pg_pathman.so              [.] partition_filter_begin        
+    5.21%     0.08%  postgres         postgres                   [.] _readOpExpr                   
+    4.77%     0.05%  postgres         postgres                   [.] XLogInsert                    
+    4.74%     0.05%  postgres         [kernel.kallsyms]          [k] sys_futex                     
+    4.68%     0.06%  postgres         [kernel.kallsyms]          [k] do_futex                      
+    4.64%     0.24%  postgres         postgres                   [.] LWLockAcquire                 
+    4.42%     4.38%  postgres         postgres                   [.] pg_strtok                     
+    4.34%     0.10%  postgres         postgres                   [.] XLogInsertRecord              
+    4.22%     0.01%  pgbench          [kernel.kallsyms]          [k] system_call_fastpath          
+    4.10%     0.08%  postgres         postgres                   [.] RecordTransactionCommit     
```    
```    
perf report --stdio -g    
```    
## 分析      
从现象看，PG 10 native partition应该是find_all_inheritors效率问题，relation锁时间过长。性能只有pg_pathman的十几分之一。          
native partition 的罪魁祸首：    
```      
/*      
 * find_all_inheritors -      
 *              Returns a list of relation OIDs including the given rel plus      
 *              all relations that inherit from it, directly or indirectly.      
 *              Optionally, it also returns the number of parents found for      
 *              each such relation within the inheritance tree rooted at the      
 *              given rel.      
 *      
 * The specified lock type is acquired on all child relations (but not on the      
 * given rel; caller should already have locked it).  If lockmode is NoLock      
 * then no locks are acquired, but caller must beware of race conditions      
 * against possible DROPs of child relations.      
 */      
List *      
find_all_inheritors(Oid parentrelId, LOCKMODE lockmode, List **numparents)      
{      
        /* hash table for O(1) rel_oid -> rel_numparents cell lookup */      
        HTAB       *seen_rels;      
        HASHCTL         ctl;      
        List       *rels_list,      
                           *rel_numparents;      
        ListCell   *l;      
        memset(&ctl, 0, sizeof(ctl));      
        ctl.keysize = sizeof(Oid);      
        ctl.entrysize = sizeof(SeenRelsEntry);      
        ctl.hcxt = CurrentMemoryContext;      
        seen_rels = hash_create("find_all_inheritors temporary table",      
                                                        32, /* start small and extend */      
                                                        &ctl,      
                                                        HASH_ELEM | HASH_BLOBS | HASH_CONTEXT);      
        /*      
         * We build a list starting with the given rel and adding all direct and      
         * indirect children.  We can use a single list as both the record of      
         * already-found rels and the agenda of rels yet to be scanned for more      
         * children.  This is a bit tricky but works because the foreach() macro      
         * doesn't fetch the next list element until the bottom of the loop.      
         */      
        rels_list = list_make1_oid(parentrelId);      
        rel_numparents = list_make1_int(0);      
        foreach(l, rels_list)      
        {      
                Oid                     currentrel = lfirst_oid(l);      
                List       *currentchildren;      
                ListCell   *lc;      
                /* Get the direct children of this rel */      
                currentchildren = find_inheritance_children(currentrel, lockmode);      
                /*      
                 * Add to the queue only those children not already seen. This avoids      
                 * making duplicate entries in case of multiple inheritance paths from      
                 * the same parent.  (It'll also keep us from getting into an infinite      
                 * loop, though theoretically there can't be any cycles in the      
                 * inheritance graph anyway.)      
                 */      
                foreach(lc, currentchildren)      
                {      
                        Oid                     child_oid = lfirst_oid(lc);      
                        bool            found;      
                        SeenRelsEntry *hash_entry;      
                        hash_entry = hash_search(seen_rels, &child_oid, HASH_ENTER, &found);      
                        if (found)      
                        {      
                                /* if the rel is already there, bump number-of-parents counter */      
                                lfirst_int(hash_entry->numparents_cell)++;      
                        }      
                        else      
                        {      
                                /* if it's not there, add it. expect 1 parent, initially. */      
                                rels_list = lappend_oid(rels_list, child_oid);      
                                rel_numparents = lappend_int(rel_numparents, 1);      
                                hash_entry->numparents_cell = rel_numparents->tail;      
                        }      
                }      
        }      
        if (numparents)      
                *numparents = rel_numparents;      
        else      
                list_free(rel_numparents);      
        hash_destroy(seen_rels);      
        return rels_list;      
}      
```      
native partition的执行计划：    
```    
postgres=# explain (analyze,verbose,timing,costs,buffers) insert into t_range values (1);    
                                              QUERY PLAN                                                   
-------------------------------------------------------------------------------------------------------    
 Insert on public.t_range  (cost=0.00..0.01 rows=1 width=44) (actual time=0.060..0.060 rows=0 loops=1)    
   Buffers: shared read=2 dirtied=1    
   ->  Result  (cost=0.00..0.01 rows=1 width=44) (actual time=0.001..0.001 rows=1 loops=1)    
         Output: 1, NULL::text, NULL::timestamp without time zone    
 Planning time: 0.036 ms    
 Execution time: 6.330 ms    
(6 rows)    
```    
pg_pathman的执行计划：    
```    
postgres=# explain (analyze,verbose,timing,costs,buffers) insert into tbl_range values (1);    
                                                    QUERY PLAN                                                        
------------------------------------------------------------------------------------------------------------------    
 Insert on public.tbl_range  (cost=0.00..0.01 rows=1 width=44) (actual time=0.214..0.214 rows=0 loops=1)    
   Buffers: shared hit=19    
   ->  Custom Scan (PartitionFilter)  (cost=0.00..0.01 rows=1 width=44) (actual time=0.067..0.068 rows=1 loops=1)    
         Output: id, info, crt_time    
         Buffers: shared hit=8    
         ->  Result  (cost=0.00..0.01 rows=1 width=44) (actual time=0.001..0.001 rows=1 loops=1)    
               Output: 1, NULL::text, NULL::timestamp without time zone    
 Planning time: 5.177 ms    
 Execution time: 0.287 ms    
(9 rows)    
```    
## 参考      
[《PostgreSQL 10.0 preview 功能增强 - 内置分区表》](../201612/20161215_01.md)        
[《Linux 性能诊断 perf使用指南》](../201611/20161127_01.md)        
[《[未完待续] PostgreSQL sharding 套件(pg_pathman, postgres_fdw, logical replication)》](../201710/20171001_09.md)    
[《PostgreSQL 9.5+ 高效分区表实现 - pg_pathman》](../201610/20161024_01.md)    
[《pg_pathman extension for postgresql partitioning》](20171015_01_pdf_001.pdf)   
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")