### Kernel Data Space

#### Non-namespaced Data
- **Description**: Data that is not isolated and can be accessed by both the host and containers.
- **Example**: In Figure 1, the case of  shows that both the host and container access the same piece of kernel data when the system resources are not namespaced.

#### Namespaced Data
- **Description**: Data that is isolated and customized for each container.
- **Example**: In Figure 1, the case of  shows that the container retrieves its own private and customized kernel data when the system resources are properly namespaced.

### Information Leakage Detection and Cloud Inspection Framework

The framework involves aligning and reordering files based on their file paths and then conducting pairwise differential analysis on the contents of the same file between the host and container contexts. This process helps in identifying pseudo files (and their internal kernel data structures) that may expose system-wide host information to the container.

### B. Leakage Channel Analysis

We list all pseudo files that may leak host information in Table I. These leakage channels include:

- **Kernel Data Structures**: e.g., `/proc/modules` shows the list of loaded modules.
- **Kernel Events**: e.g., `/proc/interrupts` shows the number of interrupts per IRQ.
- **Hardware Information**: e.g., `/proc/cpuinfo` and `/proc/meminfo` show the specifications of CPU and memory.
- **Performance Statistics**: e.g., through the RAPL sysfs interface, containers can obtain power consumption data, and through the Digital Temperature Sensor (DTS) sysfs interface, they can retrieve temperature data for each core.
- **Resource Usage**: e.g., usage of processors, memory, and disk I/O.

While this information may seem harmless, it can be exploited by malicious adversaries to launch attacks. A detailed discussion is provided in Section IV.

#### Root Causes of Information Leakages

We investigated the root causes of these information leakages by inspecting the kernel code (Linux kernel version 4.7). The main causes are:

1. **Missing Context Checks**: For existing namespaces, context checks are missing.
2. **Incomplete Namespace Implementation**: Some Linux subsystems are not fully namespaced.

#### Case Studies

1. **Case Study I — `net_prio.ifpriomap`**:
   - **Description**: The pseudo file `net_prio.ifpriomap` (under `/sys/fs/cgroup/net_prio`) contains a map of priorities assigned to traffic from processes in a cgroup.
   - **Issue**: The kernel handler function `read_priomap` is not aware of the NET namespace, thus disclosing all network interfaces on the physical machine to containerized applications.
   - **Impact**: Containers can read the names of all network devices of the host.

2. **Case Study II — RAPL in Containers**:
   - **Description**: The RAPL sysfs interface (`/sys/class/powercap/intel-rapl`) is accessible to containers, allowing them to obtain system-wide power status.
   - **Issue**: The function `get_energy_counter` retrieves raw energy data from the RAPL MSR without namespace implementation.
   - **Impact**: Containers can read the host's energy consumption data.

### C. Inference of Co-resident Containers

We further investigate specific cases to determine if they can be exploited to detect co-resident containers.

#### Co-residence Problems in Cloud Settings

Co-residence is a well-known security issue in cloud environments. Adversaries can move malicious instances to the same physical host as the victim to extract sensitive information. Traditional methods to verify co-residence, such as cache or memory-based leakage channels, may be less accurate in cloud settings due to high noise.

#### Approaches and Results of Checking Co-resident Containers

We define three metrics to assess each channel's capability of inferring co-residence:

1. **Uniqueness (U)**: Indicates whether the channel provides unique data to identify a host machine.
2. **Variation (V)**: Measures the variability of the data.
3. **Manipulation (M)**: Assesses the ability to implant unique signatures.

**Channels with High Uniqueness (U)**:
- **Unique Static Identifiers**: e.g., `boot_id` under `/proc/sys/kernel/random` is a random string generated at boot time and is unique for each running kernel.
- **Dynamic Signatures**: e.g., `sched_debug` allows tenants to launch processes with unique task names.
- **Unique Dynamic Identifiers**: e.g., `/proc/uptime` provides system up time and idle time since booting.

### Table I: Leakage Channels in Commercial Container Cloud Services

| Potential Vulnerability | CC1 | CC2 | CC3 | CC4 | CC5 |
|-------------------------|-----|-----|-----|-----|-----|
| Co-residence            | (cid:2) | (cid:2) | (cid:2) | (cid:2) | (cid:3) |
| DoS                     | (cid:2) | (cid:2) | (cid:2) | (cid:2) | (cid:2) |
| Info Leak               | (cid:2) | (cid:2) | (cid:2) | (cid:2) | (cid:2) |

### Table II: Leakage Channels and Their Capabilities

| Leakage Channels                 | Uniqueness (U) | Variation (V) | Manipulation (M) |
|----------------------------------|----------------|---------------|------------------|
| /proc/locks                      | (cid:2)        | (cid:2)       | (cid:2)          |
| /proc/zoneinfo                   | (cid:2)        | (cid:2)       | (cid:2)          |
| /proc/modules                    | (cid:2)        | (cid:2)       | (cid:2)          |
| /proc/timer_list                 | (cid:2)        | (cid:2)       | (cid:2)          |
| /proc/sched_debug                | (cid:2)        | (cid:2)       | (cid:2)          |
| /proc/softirqs                   | (cid:2)        | (cid:2)       | (cid:2)          |
| /proc/uptime                     | (cid:2)        | (cid:2)       | (cid:2)          |
| /proc/version                    | (cid:2)        | (cid:2)       | (cid:2)          |
| /proc/stat                       | (cid:2)        | (cid:2)       | (cid:2)          |
| /proc/meminfo                    | (cid:2)        | (cid:2)       | (cid:2)          |
| /proc/loadavg                    | (cid:2)        | (cid:2)       | (cid:2)          |
| /proc/interrupts                 | (cid:2)        | (cid:2)       | (cid:2)          |
| /proc/cpuinfo                    | (cid:2)        | (cid:2)       | (cid:2)          |
| /proc/schedstat                  | (cid:2)        | (cid:2)       | (cid:2)          |
| /proc/sys/fs/*                   | (cid:2)        | (cid:2)       | (cid:2)          |
| /proc/sys/kernel/random/*        | (cid:2)        | (cid:2)       | (cid:2)          |
| /proc/sys/kernel/sched_domain/*  | (cid:2)        | (cid:2)       | (cid:2)          |
| /proc/fs/ext4/*                  | (cid:2)        | (cid:2)       | (cid:2)          |
| /sys/fs/cgroup/net_prio/*        | (cid:2)        | (cid:2)       | (cid:2)          |
| /sys/devices/*                   | (cid:2)        | (cid:2)       | (cid:2)          |
| /sys/class/*                     | (cid:2)        | (cid:2)       | (cid:2)          |

This structured and detailed approach ensures clarity and coherence in the presentation of the information.