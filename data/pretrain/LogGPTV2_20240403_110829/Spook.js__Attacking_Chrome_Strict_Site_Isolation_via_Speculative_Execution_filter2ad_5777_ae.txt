Figure 11: (top) Credit card information populated by Last-
Pass. (bottom) Using Spook.js to leak credit card information.
them without any user interaction, even when the iframe was
not visible. Taking advantage of this, we added an iframe
with the CSS display:none; to the personal webpage
hosting the attack code (https://web.dpt.example.edu/∼user/).
As explained in Section IV-A, the main frame of the webpage
and the iframe shared an eTLD+1, and thus were rendered
by the same process. By doing so, we recovered the same
credentials from Figure 8 as shown in Figure 10, yet without
the victim visiting the login page voluntarily or knowingly.
Extracting Credit Cards.
In addition to passwords, cre-
dential managers such as LastPass can be used to manage
credit card information, autoﬁlling it when authorized by the
user. Using a setup similar to attacking login credentials, we
were able to read the victim’s card information shown in
Figure 11 (top) after it was populated on a payment page with
the same eTLD+1 domain as the attacker’s page. See Figure 11
(bottom). Finally, similar credit-card recovery results were also
obtained when attacking Chrome’s credit card autoﬁll feature.
D. Attacking Tumblr
We now combine the previous techniques used to recover
sensitive information from a webpage’s DOM and to recover
autoﬁlled credentials to deploy an attack on Tumblr. Tumblr is
a microblogging platform and social network with 327 million
unique visitors as of January 2021 [67].
Attack Setup.
The Tumblr platform hosts a user
blog in domain name username.tumblr.com and
the
located at tumblr.com/login.
Furthermore,
located at
tumblr.com/settings/account. As observed previ-
ously, this design choice is dangerous, because login pages
login page
the
is
account
settings page
is
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:13 UTC from IEEE Xplore.  Restrictions apply. 
11709
and user-operated blogs that share the eTLD+1 can be con-
solidated. While users cannot freely add JavaScript to blog
posts, they can inject JavaScript code into the tumblr.com
domain by customizing the blog’s theme template at the raw
HTML level.
More speciﬁcally, Tumblr’s cross-origin resource sharing
(CORS) header disallowed importing scripts from a different
origin, while Tumblr’s content security policy (CSP) header
prevented us from creating Blob objects. Despite this, Tum-
blr’s CSP header allowed data URLs and the eval function,
allowing us to embed the attack code as inline JavaScript
inside a URL. We used Chrome 90.0.4430 for this attack, after
we observed Chrome 89 refusing to call eval although the
CSP header allowed it explicitly.
Attack Results.
In a similar setup as before, we created
a malicious blog on Tumblr’s platform containing Spook.js
attack code. We achieved consolidation in two ways. The
ﬁrst was via memory pressure as before, while the second
technique was a two-click attack similar to our one-click
credential recovery with LastPass. A one-click attack was
not possible because both the login and account settings
pages refused to render in an iframe, and Chrome treated
a window.open from the DOM of our blog as a pop-up,
blocking it unless allowed explicitly by the victim. However,
with a window.open from an onclick attribute added to
the blog’s HTML body, consolidation became possible if the
victim clicked anywhere on the blog. We note that Chrome did
not block the ‘pop-up’ this time because it was user-initiated.
After both ways of consolidation, we were able to exﬁltrate
the credentials shown in Figure 12 (top) once they were
injected into the login page’s DOM by LastPass, see Figure 12
(bottom). In addition, Figure 13 (top) shows the list of all blogs
owned by the user, which is not publicly available. We could
leak this information from the DOM of account settings page
as shown in Figure 13 (bottom).
E. Exploiting Unintended Content Uploads
Our attacks so far assumed that the attacker’s webpage
is directly present on the domain to which the content was
originally uploaded. We now depart from this assumption,
showing that content uploaded to one domain is sometimes
silently transferred to another, allowing Spook.js to recover it.
Google Sites.
As an example of such a case, we use
Google Sites, which allows users to create their own personal
webpage and embed HTML containing JavaScript under
https://sites.google.com/site/username/.
in
Google Sites
code
under
a
code
sandboxed
As
https://prefix.googleusercontent.com.
we are unable to obtain a presence on the google.com
domain, Spook.js cannot affect other google.com pages
directly, as these are located on different eTLD+1 domains
and thus will never be consolidated with the attacker’s page.
However, exploring Google services, we have observed
that Google hosts more
than personal webpages on
googleusercontent.com. More speciﬁcally, Google
then
the
iframe, which
runs
user-supplied
hosts
the
Figure 12: (top) Tumblr’s login page with credentials autoﬁlled
by LastPass. (bottom) Recovered username and password.
Figure 13: (top) The list of all blogs owned by an account,
which is visible only to the owner of the account. (bottom)
Recovered list with blog names in highlights.
seems to be using the googleusercontent domain as a
storage location, automatically uploading emailed attachments,
images, and thumbnails for Google Drive documents.
Google Photos.
Focusing on Google Photos, we
have discovered that all images uploaded (or automatically
synchronized) to this service are actually hosted on the
googleusercontent.com domain. When viewing images
through https://photos.google.com/, the page loads
the images from googleusercontent.com via img tags,
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:13 UTC from IEEE Xplore.  Restrictions apply. 
12710
which are not consolidated into the process responsible for
rendering pages hosted on googleusercontent.com.
Nevertheless, consolidation does occur in case the target
elects for additional ways of viewing the image via options
available through the right-click menu. For example, if the
target loads the image in a new tab, the image will come
directly from googleusercontent.com, making the tab
eligible for consolidation in case of tab pressure. Likewise, in
case the target opens the image through a link or QR code
received from another person, the image will also be rendered
by a consolidable googleusercontent.com tab.
Attack Setup and Results. We created a webpage on
sites.google.com that contains Spook.js attack code.
Next, we opened the attacker’s Google site in one tab, and
opened an image from the target’s private Google Workspace
(G Suite) in another tab, where the image was automatically
uploaded by Google on googleusercontent.com. After
obtaining consolidation due to tab pressure, we used Spook.js
to recover the image. See Figure 14.
VI. EXPLOITING MALICIOUS EXTENSIONS
Moving away from the security implications of website con-
solidation, in this section, we look at the security implications
of consolidating Chrome extensions. At a high level, Chrome
allows users to install JavaScript-based extensions that modify
the browser’s default behavior, such as blocking ads, applying
themes to websites, managing passwords, etc.
Extension Permissions. To assist in this task, Chrome uses
a permissions model, providing extensions with capabilities
beyond that of regular JavaScript code executed by a website.
To secure these privileged capabilities from websites and other
less privileged extensions, it is important that extensions are
correctly isolated from each other and from websites.
The LastPass Extension.
To demonstrate the security
implications of consolidating Chrome extensions, we use the
LastPass Chrome extension, which is a popular credential
manager for syncing credentials across multiple devices be-
longing to the same user. When the user logs into Chrome’s
LastPass extension, the extension fetches a vault of encrypted
passwords stored on LastPass’ cloud and decrypts it using a
key derived from the user’s password [35]. Furthermore, we
empirically observed that LastPass decrypts passwords only
when it has to populate the credentials into a website while
retaining all the usernames in plaintext in memory.
Figure 14: (left) An image of an antelope uploaded to Google
Photos. (right) A reconstructed image from the leaked data.
Figure 15: (top) Recovered login credential of wikipedia.org
populated by LastPass. (bottom) Recovered master password
of LastPass’ vault (originally LastPassPassword1#).
Attack Setup and Results. We use Chrome with the LastPass
v4.69.0 extension, signing into our LastPass account. We also
port Spook.js into a malicious Chrome extension that requires
no permissions and install it on our system. As the system
was already under tab pressure (as described in Section IV-A),
we observed that Chrome had immediately consolidated our
malicious extension with LastPass. We can now use LastPass
to log in to any website, which triggers LastPass to decrypt and
populate the website’s credentials. Since Spook.js is running in
the same process as the LastPass extension, we can leak the
decrypted credentials, thereby violating Chrome’s extension
security model. See Figure 15 (top). Going beyond credentials
for speciﬁc websites, we were also able to leak the vault’s
master password, which allows the attacker to compromise all
of the vault’s accounts; see Figure 15 (bottom).
VII. ATTACKING ADDITIONAL BROWSERS
We now move to investigate Spook.js on other Chromium-
based browsers, namely Microsft Edge and Brave. Edge is
the default browser shipped with Windows 10 (5% desktop
market share [28]), whereas Brave is a popular privacy-
oriented browser that aims to block ads and trackers [7]. As
both of these browsers are based on Chromium, they inherit
the strict site isolation policy and its security limitations.
We experimentally observe that the consolidation techniques
of Section IV-A are effective in both browsers. Measuring the
effectiveness of Spook.js on both browsers, in Table II we see
that, in both browsers, Spook.js achieves leakage rates similar
to those obtained on Chrome.
Processor
Intel i7 6700k
(Skylake)
Browser
Brave v89.1.22.71
Edge v89.0.774.76
Leakage Rate
Error Rate
504 B/s
381 B/s
1.25%
4.88%
Table II: Spook.js performance on Brave and Edge
Finally, we test the experimental implementation of strict
site isolation on Firefox [44] using Firefox Nightly 89.0a1[45],
build date April 12, 2021. Similar to Chrome, we observe con-
solidation with tab pressure and window.open. However,
due to signiﬁcant JavaScript engine differences, we stop short
of implementing Spook.js on Firefox.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:13 UTC from IEEE Xplore.  Restrictions apply. 
13711
VIII. CONCLUSIONS
In this paper, we presented Spook.js, a new transient
execution attack capable of recovering sensitive information
despite Chrome’s strict site isolation countermeasure. The
fundamental weakness that Spook.js exploits is the differences
in the security models of strict site isolation and the rest of the
web ecosystem at large. On the one hand, strict site isolation
considers any two resources served from the same eTLD+1
to always be in the same security domain. On the other hand,
the rest of the web enjoys a much ﬁner-grained deﬁnition of
the security domain, often known as the same-origin policy.
The same-origin policy only considers two resources are to
be in the same security domain if the entire domain name is
identical. As we show in Section V, the different deﬁnitions
for a security domain have manifested as vulnerabilities in real
world websites, that can be practically exploited by Spook.js.
A. Countermeasures
We now discuss several mitigation strategies for Spook.js.
Separating User JavaScript. Spook.js relies on consolidating
two endpoints of the same website into the same process,
one which executes attacker-controlled JavaScript and another
which contains sensitive data. Website operators can protect
their users from Spook.js by using different domains to serve
each endpoint. While this technique is already used for sepa-
rating user content from operator content, it is insufﬁcient in
cases where user-provided JavaScript is served from the same
domain as other sensitive user-provided content. We propose to
extend this idea, such that user-provided JavaScript content is
served from one domain while all other user-provided content
is served from another domain. This countermeasure can be
immediately adopted by website operators to protect their
users from JavaScript-based attacks such as Spook.js.
Origin Isolation. Browser vendors might choose to align the
deﬁnition of security domains in strict site isolation with those
used by the rest of the web. A straightforward approach is to
consider the entire domain name for strict site isolation rather
than relying on eTLD+1. However, origin isolation might
break a non-negligible amount of websites, as 13.4% of page
loads modify their origin via document.domain [56].
The Public Sufﬁx List (PSL). Maintained by Mozilla, the
PSL [13] is a list of domain names under which users can
directly register names, even if these are not true top-level
domains. Examples of list entries include .com, .co.uk,
and also github.io. Recognizing that attackers can directly
register sub-domains under the domains in the PSL, Chrome
will not consolidate pages in case their eTLD+1 domain is
present in the PSL. In particular, x.publicsuffix.com
and y.publicsuffix.com will be treated as different sites
and never be consolidated.
Thus, we recommend that web services hosting personal
websites ensure proper isolation by adding their domain to
the PSL. In particular, our attacks on bitbucket.io and
tumblr.com in Section V were made possible due to the
absence of both vendors from the PSL. Finally, we note
that Tumblr’s absence from the PSL was reported previously
by [66] while bitbucket.io was added to the PSL follow-
ing our disclosure.
Strict Extension Isolation. Despite the strict site isolation
policy, Chrome still consolidates two extensions if the number
of extensions reaches one-third of the total process limit [57].
This policy essentially allows extensions to mount transient
execution attacks against each other, as we demonstrated in
Section VI. Next, as a consequence of our work, Google
deployed strict extension isolation [14], which prevents the
consolidation of two extensions. While experimental, this can
be manually enabled on Chrome 92, preventing malicious
extensions from reading other extensions using Spook.js.
Speculation Hardening.
At a high level, Spook.js is a
type confusion attack which is possible as the CPU speculates
past the object’s type check. Thus, an incomplete but easy to
implement countermeasure is to prevent such speculation by
placing an lfence instruction after type checks. Next, pointer
poisoning [51] is a technique that masks every data pointer
with a random constant, speciﬁc to the object’s type. This
prevents speculative type confusion attacks, as an incorrect
value will be unmasked in case of a type mismatch.
B. Limitations
Limitation of Targets.
To deploy Spook.js, the attacker
must upload Spook.js JavaScript code to the target website’s
domain. While Section V presents many such attack scenarios,
Spook.js currently does not work across unrelated domains.
Given the plethora of transient-execution attacks discovered
and the complexity of modern browsers, it is not clear that
unrelated domains are protected from each other.
Limitation of Architecture As described in Section IV-E,
we cannot mount end-to-end Spook.js on AMD systems due
to our inability to reliably evict the machine’s LLC cache.
We leave the task of adapting the attack to the AMD Zen
architecture to future work.
Attacking Firefox.
Similarly to Chrome, Firefox’s strict
site isolation implementation also consolidates websites based
on their eTLD+1 domain. While we successfully induced
consolidation on Firefox, the JavaScript execution engine is
signiﬁcantly different from Chrome’s. Thus, we leave the task
of demonstrating Spook.js on Firefox to future work.
ACKNOWLEDGEMENTS
This work was supported the Air Force Ofﬁce of Scien-
tiﬁc Research (AFOSR) under award number FA9550-20-1-
0425; an ARC Discovery Early Career Researcher Award
(project number DE200101577); an ARC Discovery Project
(project number DP210102670); the Defense Advanced Re-
search Projects Agency (DARPA) and Air Force Research
Laboratory (AFRL) under contracts FA8750-19-C-0531 and
HR001120C0087; Israel Science Foundation grants 702/16