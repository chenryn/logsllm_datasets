1.1
1.2
1.3
1.4
1.5
1.6
1.7
1.8
1.9
1.10
目录
Android渗透测试学习手册中文版
第一章Android安全入门
第二章准备实验环境
第三章Android应用的逆向和审计
第四章对Android设备进行流量分析
第五章Android取证
第六章玩转SQLite
第七章不太知名的Android漏洞
第八章ARM利用
第九章编写渗透测试报告
2
Android渗透测试学习手册中文版
原书：LearningPentestingforAndroidDevices
译者：飞龙
在线阅读
PDF格式
EPUB格式
MOBI格式
代码仓库
赞助我
协议
CCBY-NC-SA4.0
Android渗透测试学习手册中文版
3
第一章Android安全入门
作者：AdityaGupta
译者：飞龙
协议：CCBY-NC-SA4.0
Android是当今最流行的智能手机操作系统之一。随着人气的增加，它存在很多安全风险，
这些风险不可避免地被引入到应用程序中，使得用户本身受到威胁。我们将在本书中以方法
论和循序渐进的方式来讨论Android应用程序安全性和渗透测试的各个方面。
本章的目标是为Android安全打下基础，以便在以后的章节中使用。
1.1Android简介
自从Android被谷歌收购（2005年），谷歌已经完成了整个开发，在过去的9年里，尤其是
在安全方面，有很多变化。现在，它是世界上最广泛使用的智能手机平台，特别是由于不同
的手机制造商，如LG，三星，索尼和HTC的支持。Android的后续版本中引入了许多新概
念，例如GoogleBouncer和GoogleAppVerifier。我们将在本章逐一介绍它们。
如果我们看看Android的架构，如下图所示，我们将看到它被分为四个不同的层。在它的底
部是Linux内核，它已被修改来在移动环境中获得更好的性能。Linux内核还必须与所有硬件
组件交互，因此也包含大多数硬件驱动程序。此外，它负责Android中存在的大多数安全功
能。由于Android基于Linux平台，它还使开发人员易于将Android移植到其他平台和架
构。Android还提供了一个硬件抽象层，供开发人员在Android平台栈和他们想要移植的硬
件之间创建软件钩子。
在Linux内核之上是一个层级，包含一些最重要和有用的库，如下所示：
SurfaceManager：管理窗口和屏幕媒体框架：这允许使用各种类型的编解码器来播放和记
录不同的媒体SQLite：这是一个较轻的SQL版本，用于数据库管理WebKit：这是浏览器渲
染引擎OpenGL：用于在屏幕上正确显示2D和3D内容
以下是来自Android开发人员网站的Android架构的图形表示：
第一章Android安全入门
4
Android中的库是用C和C++编写的，其中大多数是从Linux移植的。与Linux相比，
Android中的一个主要区别是，在这里没有 libc库，它用于Linux中的大多数任务。相反，
Android有自己的称为 bionic的库，我们可以认为它是一个剥离和修改后的，用于Android
的libc版本。
在同一层级，还有来自Android运行时--Dalvik虚拟机和核心库的组件。我们将在本书的下
一部分中讨论关于Dalvik虚拟机的很多内容。
在这个层之上，有应用程序框架层，它支持应用程序执行不同类型的任务。
此外，开发人员创建的大多数应用程序只与第一层和最顶层的应用程序交互。该架构以一种
方式设计，在每个时间点，底层都支持上面的层级。
早期版本的Android（<4.0）基于Linux内核2.6.x，而较新版本基于内核3.x.不同的
Android版本和他们使用的Linux内核的列表规定如下：
第一章Android安全入门
5
Android中的所有应用程序都在虚拟环境下运行，这称为Dalvik虚拟机（DVM）。这里需要
注意的一点是，从Android4.4版本开始，还有另一个运行时称为Android运行时（ART），
用户可以在DVM和ART运行时环境之间自由切换。
然而，对于这本书，我们将只关注Dalvik虚拟机实现。它类似于Java虚拟机（JVM），除
了基于寄存器的特性，而不是基于堆栈的特性。因此，运行的每个应用程序都将在自己的
Dalvik虚拟机实例下运行。因此，如果我们运行三个不同的应用程序，将有三个不同的虚拟
实例。现在，这里的重点是，即使它为应用程序创建一个虚拟环境来运行，它不应该与安全
容器或安全环境混淆。DVM的主要焦点是与性能相关，而不是与安全性相关。
Dalvik虚拟机执行一个名为 .dex或Dalvik可执行文件的文件格式。我们将进一步查
看 .dex文件格式，并将在下面的章节中进行分析。现在让我们继续与adb进行交互，并更
深入地分析Android设备及其体系结构。
1.2深入了解Android
如果你有Android设备或正在运行Android模拟器，则可以使用AndroidSDK本身提供的工具
（称为adb）。我们将在第二章详细讨论adb。现在，我们将只设置SDK，我们已经准备好
了。
一旦设备通过USB连接，我们可以在我们的终端中输入adb，这将显示所连接设备的序列号
列表。请确保你已在设备设置中启用了USB调试功能。
$adbdevices
Listofdevicesattached
emulator-5554device
提示
下载示例代码
你可以从 http://www.packtpub.com下载你从帐户中购买的所有Packt图书的示例代码文
件。如果你在其他地方购买此书，则可以访问 http://www.packtpub.com/support并注册
以将文件直接发送给你。
现在，如我们之前所见，Android是基于Linux内核的，所以大多数Linux命令在Android上
也可以通过adbshell完美运行。adbshell为你提供与设备的shell直接交互，你可以在其中
执行命令和执行操作以及分析设备中存在的信息。为了执行shell，只需要键入以下命令：
adbshell.
一旦我们在shell中，我们可以运行 ps为了列出正在运行的进程：
第一章Android安全入门
6
如你所见， ps将列出当前在Android系统中运行的所有进程。如果仔细看，第一列制定了
用户名。在这里我们可以看到各种用户名，如 system， root， radio和一系列以 app_开
头的用户名。正如你可能已经猜到的，以 system名称运行的进程由系统拥有， root作为根
进程运行， radio是与电话和无线电相关的进程， app_进程是用户已下载的所有应用程序，
安装在他们的设备上并且当前正在运行。因此，就像在Linux中用户确定了当前登录到系统
的唯一用户一样，在Android中，用户标识了在自己的环境中运行的应用/进程。
所以，Android安全模型的核心是Linux特权分离。每次在Android设备中启动新应用程序
时，都会为其分配唯一的用户ID（UID），该用户ID将之后会属于某些其他预定义组。
与Linux类似，用作命令的所有二进制文件都位于 /system/bin和 /system/xbin。此外，我
们从Play商店或任何其他来源安装的应用程序数据将位于 /data/data，而其原始安装文件
（即 .apk）将存储在 /data/app。此外，还有一些应用程序需要从Play商店购买，而不是
只是免费下载。这些应用程序将存储在 /data/app-private/。
Android安装包（APK）是Android应用程序的默认扩展名，它只是一个归档文件，包含应用
程序的所有必需文件和文件夹。我们在后面的章节中将继续对 .apk文件进行逆向工程。
现在，让我们访问 /data/data，看看里面有什么。这里需要注意的一点是，为了在真实设备
上实现，设备需要root并且必须处于 su模式：
#cd/data/data
#ls
com.aditya.facebookapp
com.aditya.spinnermenu
com.aditya.zeropermission
com.afe.socketapp
com.android.backupconfirm
com.android.browser
com.android.calculator2
com.android.calendar
com.android.camera
com.android.certinstaller
com.android.classic
com.android.contacts
com.android.customlocale2
第一章Android安全入门
7
所以，我们可以在这里看到，例如， com.aditya.facebookapp，是单独的应用程序文件夹。
现在，你可能会想知道为什么它是用点分隔的单词风格，而不是常见的文件夹名称，
如 FacebookApp或 CameraApp。因此，这些文件夹名称指定各个应用程序的软件包名称。软
件包名称是应用程序在Play商店和设备上标识的唯一标识符。例如，可能存在具有相同名称
的多个相机应用或计算器应用。因此，为了唯一地标识不同的应用，使用包名称约定而不是
常规应用名称。
如果我们进入任何应用程序文件夹，我们会看到不同的子文件夹，例如文件（ files），数
据库（ databases）和缓存（ cache），稍后我们将在第3章“逆向和审计Android应用程
序”中查看。
shell@android:/data/data/de.trier.infsec.koch.droidsheep#ls
cache
databases
files
lib
shell@android:/data/data/de.trier.infsec.koch.droidsheep#
这里需要注意的一个重要的事情是，如果手机已经root，我们可以修改文件系统中的任何文
件。对设备获取root意味着我们可以完全访问和控制整个设备，这意味着我们可以看到以及
修改任何我们想要的文件。
最常见的安全保护之一是大多数人都想到的是模式锁定或pin锁，它默认存在于所有Android
手机。你可以通过访问 Settings|Security|ScreenLock来配置自己的模式。
一旦我们设置了密码或模式锁定，我们现在将继续，将手机与USB连接到我们的系统。现
在，密码锁的密钥或模式锁的模式数据以名称 password.key或 gesture.key存储
在 /data/system。注意，如果设备被锁定，并且USB调试被打开，你需要一个自定义引导
加载程序来打开USB调试。整个过程超出了本书的范围。要了解有关Android的更多信
息，请参阅ThomasCannonDigging的Defcon演示。
因为破解密码/模式将更加艰难，并且需要暴力（我们将看到如何解密实际数据），我们将简
单地继续并删除该文件，这将从我们手机中删除模式保护：
shell@android:/data#cd/data/system
shell@android:/data/system#rmgesture.key
所以，我们可以看到，一旦手机被root，几乎任何东西都可以只用手机、一根USB电缆和一
个系统来完成。我们将在本书的后续章节中更多地了解基于USB的利用。
1.3沙箱和权限模型
为了理解Android沙箱，让我们举一个例子，如下图：
第一章Android安全入门
8
如前图所示和前面所讨论的，Android中的每个应用程序都在其自己的Dalvik虚拟机实例中