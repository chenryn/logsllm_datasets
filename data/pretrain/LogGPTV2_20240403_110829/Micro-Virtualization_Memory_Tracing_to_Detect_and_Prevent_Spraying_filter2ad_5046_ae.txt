Several defensive solutions have been proposed to avoid
pivoting-based techniques [28, 33, 34]. One of the most
deployed is part of EMET [28], a solution designed
by Microsoft. EMET is a utility that helps to prevent
vulnerabilities in software from being successfully ex-
ploited. Among other features, EMET also addresses
the problem of stack pivoting attacks by checking if the
stack pointer points outside of a process stack bound-
aries whenever a dangerous API is invoked. However,
several researchers proved that it is possible to bypass
the EMET technology in many ways [24, 18, 37] . The
impact of these studies show that technologies that oper-
ate at the same level of execution of the malicious code
need to be extensively tested and carefully designed to
offer the desired protection and avoid possible bypasses.
Consequently, these studies also shows the importance
of designing reference monitors that operate at a lower
level (e.g., at the hypervisor level) such as Graﬃti to
avoid these trivial attacks.
Moreover, Microsoft recently introduced two new
iso-
countermeasures to hinder browser exploitation:
lated heap and delayed free [25, 45]. Both these tech-
niques raise the bar for use-after-free attacks; as stated
by the Fortinet Labs researchers [19], they also make
USENIX Association  
25th USENIX Security Symposium  443
13
heap manipulation harder, but they are not a general so-
lution as they protect only the Internet Explorer browser.
10 Conclusion
In this paper we propose an efﬁcient and comprehensive
solution to defeat spraying attacks by tracking the mem-
ory allocations of the system in an OS-independent way.
Overall, our paper makes several contributions: we
introduce the concept of micro-virtualization that allows
us to design an efﬁcient and effective memory allocator
tracker. We presented Graﬃti, a general and extensible
memory analysis framework that has good performance
and it is freely available and open source. On top of it,
we created three heuristics to detect and prevent spray-
ing attacks. However, we believe that in the future Graf-
ﬁti can also be extended and adopted in other domains,
such as malware analysis or memory forensics.
References
[1] Alexa top domains. http://www.alexa.com/
topsites/category/.
[2] Rop attack against data
execution preven-
tion technology,
http://www.h-
online.com/security/news/item/Exploit-
s-new-technology-trick-dodges-memory-
protection-959253.html.
2009.
[3] Mart´ın Abadi, Mihai Budiu, ´Ulfar Erlingsson, and
Jay Ligatti. Control-ﬂow integrity.
In Proceed-
ings of the 12th ACM Conference on Computer and
Communications Security, CCS ’05, pages 340–
353, New York, NY, USA, 2005. ACM.
[4] Greg Gagne Avi Silberschatz, Peter Baer Galvin.
Operating system concepts. http://os-book.
com/.
[5] Piotr Bania. Jit spraying and mitigations. arXiv
preprint arXiv:1009.1038, 2010.
[6] Emery D. Berger and Benjamin G. Zorn. Diehard:
Probabilistic memory safety for unsafe languages.
SIGPLAN Not., 41(6):158–168, June 2006.
[7] Eep Bhatkar, Daniel C. Duvarney, and R. Sekar.
an efﬁcient approach to
Address obfuscation:
combat a broad range of memory error exploits. In
In Proceedings of the 12th USENIX Security Sym-
posium, pages 105–120, 2003.
[8] Sandeep Bhatkar, R. Sekar, and Daniel C. DuVar-
ney. Efﬁcient techniques for comprehensive pro-
tection from memory error exploits. In Proceed-
ings of the 14th Conference on USENIX Security
Symposium - Volume 14, SSYM’05, pages 17–17,
Berkeley, CA, USA, 2005. USENIX Association.
[9] Sang Kil Cha, Thanassis Avgerinos, Alexandre
Rebert, and David Brumley. Unleashing Mayhem
on binary code. In IEEE Symposium on Security
and Privacy, pages 380–394, May 2012.
[10] Liang Chen and Qidan He.
Shooting the osx
el capitan kernel like a sniper, 2016.
https:
//speakerdeck.com/flankerhqd/shooting-
the-osx-el-capitan-kernel-like-a-
sniper.
[11] Ping Chen, Yi Fang, Bing Mao, and Li Xie. Jitde-
fender: A defense against jit spraying attacks. In
Jan Camenisch, Simone Fischer-Hbner, Yuko Mu-
rayama, Armand Portmann, and Carlos Rieder, ed-
itors, SEC, volume 354 of IFIP Advances in Infor-
mation and Communication Technology. Springer,
2011.
[12] Crispin Cowan, Matt Barringer, Steve Beattie,
Greg Kroah-hartman, Mike Frantzen, and Jamie
Lokier. Formatguard: Automatic protection from
printf format string vulnerabilities.
In In Pro-
ceedings of the 10th USENIX Security Symposium,
2001.
[13] Crispin Cowan, Calton Pu, Dave Maier, Heather
Hinton, Jonathan Walpole, Peat Bakke, Steve
Beattie, Aaron Grier, Perry Wagle, and Qian
Zhang. Stackguard: Automatic adaptive detection
and prevention of buffer-overﬂow attacks.
In In
Proceedings of the 7th USENIX Security Sympo-
sium, pages 63–78, 1998.
[14] Mark Daniel,
Jake Honoroff,
and Charlie
Miller. Engineering heap overﬂow exploits with
javascript, 2008.
[15] eEye Research. Microsoft
internet
informa-
remote buffer overﬂow (sys-
https://web.
tion services
tem level access),
archive.org/web/20061026101830/http:
//research.eeye.com/html/advisories/
published/AD20010618.html.
2001.
[16] Manuel Egele, Peter Wurzinger, Christopher
Kruegel, and Engin Kirda. Defending browsers
against drive-by downloads: Mitigating heap-
spraying code injection attacks. In Proceedings of
14
444  25th USENIX Security Symposium 
USENIX Association
the 6th International Conference on Detection of
Intrusions and Malware, and Vulnerability Assess-
ment, DIMVA ’09, pages 88–106, Berlin, Heidel-
berg, 2009. Springer-Verlag.
[26] Lixin Li, James E. Just, and R. Sekar. Address-
space randomization for windows systems.
In
ACSAC, pages 329–338. IEEE Computer Society,
2006.
[17] Aristide Fattori, Roberto Paleari, Lorenzo Mar-
tignoni, and Mattia Monga. Dynamic and trans-
parent analysis of commodity production systems.
In Proceedings of the 25th International Confer-
ence on Automated Software Engineering (ASE),
Antwerp, Belgium, September 2010. https://
code.google.com/p/hyperdbg/.
[18] Fireeye.
Using
emet
to
disable
emet.
https://www.fireeye.com/blog/threat-
research/2016/02/using_emet_to_disabl.
html.
[19] Fortinet Labs. Is use-after-free exploitation dead?
The new IE memory protector will tell you. http:
//blog.fortinet.com/.
[20] Ivan Fratric.
Exploiting internet explorer
2013.
11 64-bit on windows 8.1 preview,
https://ifsec.blogspot.com/2013/11/exploiting-
internet-explorer-11-64-bit.html.
[21] Francesco Gadaleta, Yves Younan, and Wouter
Joosen. Bubble: a Javascript engine level counter-
measure against heap-spraying attacks.
In Fabio
Massacci, Dan Wallach, and Nicola Zannone, ed-
itors, ESSoS, Pisa, 3-4 February 2010. Springer
Berlin / Heidelberg, January 2010.
[22] Wei Hu, Jason Hiser, Dan Williams, Adrian Filipi,
Jack W. Davidson, David Evans, John C. Knight,
Anh Nguyen-Tuong, and Jonathan Rowanhill. Se-
cure and practical defense against code-injection
attacks using software dynamic translation. In Pro-
ceedings of the 2Nd International Conference on
Virtual Execution Environments, VEE ’06, pages
2–12, New York, NY, USA, 2006. ACM.
[23] Intel Corporation.
Intel 64 and IA-32 Architec-
tures Software Developer’s Manual - Volume 3
(3A,3B,3C combined), March 2013.
[24] Bromium Labs.
Bypassing
emet
4.1.
http://bromiumlabs.files.wordpress.
com/2014/02/bypassing-emet-4-1.pdf.
[25] MWR Labs.
Isolated heap & friends - object
allocation hardening in web browsers. https:
//labs.mwrinfosecurity.com/blog/2014/
06/20/isolated-heap-friends---object-
allocation-hardening-in-web-browsers/.
[27] Jauernig Martin, Neugschwandtner Matthias,
Milani-Comparetti Paolo, and Christian Platzer.
Lobotomy: An Architecture for JIT Spraying Mit-
igation. In Proceedings of the International Con-
ference on Availability, Reliability and Security
(ARES), September 2014.
[28] Microsoft. The enhanced mitigation experience
toolkit. http://support.microsoft.com/kb/
2458544.
[29] Microsoft. Structured exception handling over-
http://support.
write protection (sehop).
microsoft.com/kb/956607.
[30] Gil Neiger, Amy Santoni, Felix Leung, Dion
Rodgers, and Rich Uhlig.
Intel Virtualization
Technology: Hardware Support for Efficient Pro-
cessor Virtualization.
Intel Technology Journal,
10(3):167–177, August 2006.
Exterminator:
[31] Gene Novark, Emery D. Berger, and Benjamin G.
automatically correcting
Zorn.
memory errors with high probability.
In Jeanne
Ferrante and Kathryn S. McKinley, editors, PLDI,
pages 1–11. ACM, 2007.
[32] Michalis Polychronakis and Angelos D Keromytis.
Rop payload detection using speculative code ex-
ecution.
In Malicious and Unwanted Software
(MALWARE), 2011 6th International Conference
on, pages 58–65. IEEE, 2011.
[33] Aravind Prakash and Heng Yin. Defeating rop
through denial of stack pivot. In Proceedings of the
31st Annual Computer Security Applications Con-
ference, ACSAC 2015, pages 111–120, New York,
NY, USA, 2015. ACM.
[34] Rui Qiao, Mingwei Zhang, and R. Sekar. A prin-
cipled approach for rop defense.
In Proceedings
of the 31st Annual Computer Security Applications
Conference, ACSAC 2015, pages 101–110, New
York, NY, USA, 2015. ACM.
[35] Rapid 7. Metasploit penetration testing software.
http://www.metasploit.com.
[36] Paruj Ratanaworabhan, Benjamin Livshits, and
Benjamin Zorn. Nozzle: A defense against heap-
spraying code injection attacks. In Proceedings of
the Usenix Security Symposium, August 2009.
USENIX Association  
25th USENIX Security Symposium  445
15
[37] Duo Security.
Wow64 and so can you
instruction.
single
emet with
bypassing
https://duo.com/assets/pdf/wow-64-
and-so-can-you.pdf.
a
[38] Skylined. Microsoft internet explorer 6 - (iframe
tag) buffer overflow exploit, 2004. https://www.
exploit-db.com/exploits/612/.
[39] Skylined. Heap spraying high addresses in 32-bit
chrome/firefox on 64-bit windows, 2016. http:
//blog.skylined.nl/20160622001.html.
[40] Kevin Snow, Srinivas Krishnan, Fabian Monrose,
and Niels Provos. Shellos: Enabling fast detection
and forensic analysis of code injection attacks. In
USENIX Security Symposium, 2011.
[41] Kevin Z. Snow, Fabian Monrose, Lucas Davi,
Alexandra Dmitrienko, Christopher Liebchen, and
Ahmad-Reza Sadeghi. Just-in-time code reuse: On
the effectiveness of fine-grained address space lay-
out randomization.
In Proceedings of the 2013
IEEE Symposium on Security and Privacy, SP
’13, pages 574–588, Washington, DC, USA, 2013.
IEEE Computer Society.
[42] Alexander Sotirov. Heap feng shui in javascript,
2007.
[43] The PaX Team.
Pax address space layout
randomization. Technical report http://pax.
grsecurity.net/docs/aslr.txt.
[44] Team Teso. 7350854.c, 2001. https://www.
exploit-db.com/exploits/409/.
[45] Trendmicro Labs.
Mitigating UAF Ex-
Internet Explorer.
ploits with Delay Free for
http://blog.trendmicro.com/trendlabs-
security-intelligence/mitigating-
uaf-exploits-with-delay-free-for-
internet-explorer/.
[46] Vupen. Microsoft Internet Explorer javaprxy.dll
COM Object Vulnerability / Exploit (Security Ad-
visories).
http://www.vupen.com/english/
advisories/2005/0935.
[47] Vupen. Microsoft Internet Explorer ”Msdds.dll”
Remote Code Execution / Exploit (Security Ad-
visories).
http://www.vupen.com/english/
advisories/2005/1450.
446  25th USENIX Security Symposium 
USENIX Association
16