(n=64)
0.684
(n=32)
0.5
(n=16)
GreenFlag(n,k,6) Rate
Fig. 12. Energy per bit 
also  noted  by  prior  work  [12],  racetrack  errors  only  occur 
during shifts and thus the more the racetrack is used (shifted), 
the more possible opportunities for errors.  
The  expected  probability  of  a  single  shift  incurring  an 
error is not well known. Prior work [12] has estimated shift 
error  probabilities  based  on  models  and  simulations,  but 
currently  there  are  no  empirical  results.  Thus,  we  test 
GreenFlag over a wide range of single shift error probabilities 
ranging from 10(cid:2879)(cid:2874) to 10(cid:2879)(cid:2877).  We account for both double shift 
((cid:1842)(cid:3033)). This probability depends on the length of the codeword 
We  define  failure  as  the  occurrence  of  a  silent  data 
corruption  (SDC).  That  is,  three  or  more  shift  errors  occur 
while  reading  a  single  codeword.  We  then  analytically 
calculate  the  probability  of  failure  per  extended  codeword 
errors and the possibility of multiple single shift errors in the 
same codeword. 
and the single shift error probability, but not the bandwidth 
demand  (i.e.,  we  assume  there  is  demand  for  exactly  one 
extended codeword). Fig. 13 presents the failure probability 
per  extended  codeword  for  different  GreenFlag  codes  and 
different single shift error rates; note that values on y-axis are 
in decreasing order. We observe that the failure probability 
increases linearly as the codeword length increases.  
Failure Probability of Extended Codeword
GreenFlag(8,4,6)
GreenFlag(16,11,6)
GreenFlag(32,26,6)
GreenFlag(64,57,6)
s
r
a
e
Y
n
i
e
m
T
i
y
t
i
l
i
b
a
b
o
r
P
1E-25
1E-23
1E-21
1E-19
1E-17
1E-15
1E-13
1.E+09
1.E+08
1.E+07
1.E+06
1.E+05
1.E+04
1.E+03
1.E+02
1.E+01
1.E+00
1.E-01
1.E-02
1.E-03
1.E-04
1.E-06
1.E-07
1.E-08
1.E-09
Fig. 13. SDC error rate per extended codeword 
Single Shift Error Probability
1
3.154×10(cid:2875) 
(cid:1866)
(cid:1828)(cid:1853)(cid:1866)(cid:1856)(cid:1875)(cid:1861)(cid:1856)(cid:1872)ℎ×
To calculate overall MTTF (across all tracks) we need to 
know how often a shift operation occurs. Thus, we assume 
different shift intensities that represent peak bandwidths for a 
variety of memory technologies like DDR3, SSDs, and 3D-
DRAM. We can now calculate the MTTF as, 
(cid:1839)(cid:1846)(cid:1846)(cid:1832)=1(cid:1842)(cid:3033)×
where 3.154×10(cid:2875)is the number of seconds in one year and 
(i.e.,  greater  than 10(cid:2879)(cid:2875)),  it  is  difficult  to achieve  that  goal. 
Fig.  14  presents  the  MTTF  for  GreenFlag(64,57,6)  and 
GreenFlag(32,26,6) for different bandwidths. We set a desired 
MTTF goal of 10 years. For very high shift error probabilities 
n is the length of a codeword. 
However, for lower probabilities we can achieve MTTFs well 
beyond 10 years. Overall Fig. 14 can be used to extrapolate 
MTTFs for any single shift error probability and can be used 
as a guideline when designing reliable memory systems based 
on racetrack memory.  
VIII. PRIOR WORK 
Prior work on handling shift errors in racetrack memory 
[12, 13, 32] uses additional read/write ports to access multiple 
bits  at  the  same  time. These extra  ports  preclude  using the 
denser  3D  racetrack  layout,  but  they  enable  detecting  and 
correcting  multiple  shift  errors.  HiFi  [12]  and  its  extended 
work [32] address bit deletions in racetrack memory by adding 
pattern bits at both edges of each track as well as additional 
read and write ports. The main idea is to read the pattern in 
parallel with the data bits. If the pattern does not match what 
was expected, bits are shifted in the reverse direction and the 
memory is re-read to recover the bits correctly. As bits are 
shifted during consecutive reads, some of the pattern bits are 
“shifted out” of the track and virtually get deleted. Thus, for 
every shift in racetrack, one data bit and two pattern bits are 
read, while at the same time a new pattern bit is written. Chee 
at  al.  [13]  propose  placing  multiple  ports  with  a  specific 
number of domains between any two consecutive ports. They 
encode the data in a way that a shift error can be detected from 
observing differences when reading the same data from two 
nearby ports. This work however ignores the fact that domains 
are virtually deleted if shifted out of the track, something that 
can happen as domains are shifted from the first to the second 
port.  
 There  is  also  prior  work  on  the  use  of  Varshamov-
Tenengolts codes [33] to correct segmented errors on deletion 
and insertion channels in which deletions  or insertions (but 
not a mixture of two) could occur. This is a more restrictive 
11
MTTF
1GB/s, n=32
1GB/s, n=64
10GB/s, n=32
10GB/s, n=64
100GB/s, n=32
100GB/s, n=64
10 years
1.E-07
1.E-08
1.E-06
1.E-09
Single Shift Error Probability
Fig. 14. MTTF for different implementations/bandwidths 
model  than  racetrack  memory  in  which  deletions  and 
insertions could both occur. Moreover, if we input (cid:1866) bits to 
output would be a sequence of length (cid:1866)′ from which we can 
provides the desired number of bits, (cid:1866), regardless of whether 
easily deduce the number of shift errors. Again, this differs 
from racetrack memory where the memory controller always 
deletion  and  insertion  channels  with  segmented  errors,  the 
an error occurs. Moreover, in this work, exhaustive search is 
used  to  find  codewords  of  a  given  length  which  makes 
implementation infeasible. 
 Additionally,  there  is  prior  work  on  utilizing  racetrack 
memory to design caches and memory systems [3, 30, 34], but 
none of this work considers the system’s fault tolerance. 
IX.  CONCLUSION 
We  have  presented  GreenFlag,  the  first  error  tolerance 
scheme  for  3D  racetrack  memory.  GreenFlag  combines  a 
novel  construction  for  Varshamov-Tenegolts  codes  with 
specially  crafted  delimiter  bits  to  detect,  categorize  and 
correct shift errors. Additionally, we designed and synthesized 
hardware for encoding and decoding so that we could estimate 
latency and energy overheads and, more significantly, analyze 
the viability of racetrack for different levels of the memory 
hierarchy. Based on current technology, it appears that fault 
tolerant 3D racetrack memory is not attractive for caches but 
a promising option for main memory and storage. 
X.  ACKNOWLEDGMENTS 
This material is based on work supported by the National 
Science  Foundation  under  grants  CCF-142-1177  and  CCF-
171-7602. 
REFERENCES 
[1]   S.  Mittal,  “A  survey  of  techniques  for  architecting  processor 
components using domain wall memory,” ACM Journal on Emerging 
Technologies in Computing Systems, 2016, no. 2, p.29.  
[2]   L.  Thomas,  S.-H.  Yang,  K.-S.  Ryu,  B.  Hughes,  C.  Rettner,  D.-S. 
Wang, C.-H. Tsai, K.-H. Shen, and S. S. Parkin, “Racetrack memory: 
a  high-performance,  low-cost,  non-volatile  memory  based  on 
magnetic  domain  walls,”  in  IEEE  International  Electron  Devices 
Meeting (IEDM), pp. 24–2, 2011.  
[3]   Z. Sun, W. Wu, and H. Li, “Cross-layer racetrack memory design for 
ultra  high  density  and 
in  50th 
ACM/EDAC/IEEE Design Automation Conference (DAC), pp. 1–6, 
2013.  
low  power  consumption,” 
[4]   S.  Parkin  and  S.-H.  Yang,  “Memory  on  the  racetrack,”  Nature 
nanotechnology, vol. 10, no. 3, pp. 195–198, 2015.  
[5]   S.  S.  Parkin,  M.  Hayashi, and  L.  Thomas,  “Magnetic domain-wall 
racetrack memory,” Science, vol. 320, no. 5873, pp. 190–194, 2008.  
[6]   M. K. Qureshi, “Pay-as-you-go: low-overhead hard-error correction 
for  phase  change  memories,”  in  the  44th  Annual  IEEE/ACM 
International Symposium on Microarchitecture, pp. 318–328, 2011.  
[7]   Y.  Zhang,  W.  Zhao,  D.  Ravelosona,  J.-O.  Klein,  J.  Kim,  and  C. 
Chappert,  “Perpendicular-magnetic-anisotropy  cofeb 
racetrack 
memory,”  Journal  of  Applied  Physics,  vol.  111,  no.  9,  p.  093925, 
2012.  
[8]   J. J. Yang, D. B. Strukov, and D. R. Stewart, “Memristive devices for 
computing,” Nature nanotechnology, vol. 8, no. 1, pp. 13–24, 2013.  
[9]   M.  Hayashi,  L.  Thomas,  R.  Moriya,  C.  Rettner,  and  S.  S.  Parkin, 
“Current-controlled magnetic domain-wall nanowire shift register,” 
Science, vol. 320, no. 5873, pp. 209–211, 2008.  
[10]  W. Zhao, Y. Zhang, H. Trinh, J. Klein, C. Chappert, R. Mantovan, A. 
Lamperti,  R.  Cowburn,  T.  Trypiniotis,  M.  Klaui,  et al.,  “Magnetic 
domain-wall  racetrack  memory  for  high  density  and  fast  data 
storage,” in Solid-State and Integrated Circuit Technology (ICSICT), 
2012 IEEE 11th International Conference on, pp. 1–4, 2012.  
[11]  Y.P.  Ivanov,  A.  Chuvilin,  S.  Lopatin  and  J.  Kosel,  "Modulated 
magnetic nanowires for controlling domain wall motion: toward 3D 
magnetic memories," ACS NANO, 10(5), pp.5326-5332, 2016.  
[12]  C. Zhang, G. Sun, X. Zhang, W. Zhang, W. Zhao, T. Wang, Y. Liang, 
Y. Liu, Y. Wang, and J. Shu, “Hi-Fi playback: Tolerating position 
errors  in  shift  operations  of  racetrack  memory,”  in  Proceedings  of 
ACM/IEEE  42nd  Annual  International  Symposium  on  Computer 
Architecture (ISCA), pp. 694–706, 2015.  
[13]  Y.  M.  Chee,  H.  M.  Kiah,  A.  Vardy,  V.  K.  Vu,  and  E.  Yaakobi, 
“Coding for racetrack memories,” arXiv preprint arXiv:1701.06874, 
2017.  
[14]  R. R. Varshamov and G. M. Tenengolts, “Codes which correct single 
asymmetric errors,” Avtomatika i Telemekhanika (in Russian), vol. 
26, no. 2, pp. 288–292, 1965.  
[15]  M. Hirofumi, H. Fukuzawa, A. Kikitsu and Y. Fukuzumi, "Magnetic 
Memory  Device  and  Method  of  Magnetic  Domain  Wall  Motion," 
U.S. Patent 8,792,271, issued July 29, 2014.  
[16]  D.  Sanz-Hernández,  R.F.  Hamans,  J.W.  Liao,  A.  Welbourne,  R. 
Lavrijsen  and  A.  Fernández-Pacheco,  "Fabrication,  detection  and 
operation  of  a  three-dimensional  nanomagnetic  conduit,"  arXiv 
preprint arXiv:1706.03710.  
[17]  N.  J.  Sloane,  “On  single-deletion-correcting  codes,”  Codes  and 
Designs, pp. 273–291, 2002.  
[18]  R. G. Gallager, “Sequential decoding for binary channels with noise 
and synchronization errors,” tech. rep., DTIC Document, 1961.  
[19]  R.  L.  Dobrushin,  “Shannon’s 
for  channels  with 
synchronization errors,” Problemy Peredachi Informatsii, vol. 3, no. 
4, pp. 18–36, 1967.  
theorems 
[20]  S. N. Diggavi and M. Grossglauser, “On transmission over deletion 
channels,”  in  the  Annual  Allerton  Conference  on  Communication 
Control and Computing, vol. 39, pp. 573–582, 2001.  
[21]  A. Kavcic and R. Motwani, “Insertion/deletion channels: Reduced-
state  lower  bounds  on  channel  capacities,”  in  IEEE  International 
Symposium on Information Theory, pp. 229–229, 2004.  
[22]  S. Diggavi, M. Mitzenmacher, and H. Pfister, “Capacity upper bounds 
the  International 
for  deletion  channels,” 
Symposium on Information Theory (ISIT), pp. 1716–1720, 2007.  
in  Proceedings  of 
[23]  M.  Mitzenmacher,  “A  survey  of  results  for  deletion  channels  and 
related synchronization channels,” Probability Surveys, vol. 6, pp. 1–
33, 2009.  
[24]  J. Ullman, “On the capabilities of codes to correct synchronization 
errors,” IEEE Transactions on Information Theory, vol. 13, no. 1, pp. 
95–105, 1967.  
[25]  G.  Tenengolts,  “Nonbinary  codes,  correcting  single  deletion  or 
insertion (corresp.),” IEEE Transactions on Information Theory, vol. 
30, no. 5, pp. 766–769, 1984.  
[26]  F.  Palunˇci´c,  K.  A.  Abdel-Ghaffar,  and  H.  C.  Ferreira, 
“Insertion/deletion detecting codes and the boundary problem,” IEEE 
Transactions on Information Theory, vol. 59, no. 9, pp. 5935–5943, 
2013.  
[27]  G.  Mappouras,  A.  Vahid,  R.  Calderbank  and  D.  J.  Sorin  "Support 
Material for GreenFlag: Protecting 3D-Racetrack Memory from Shift 
Errors," 
https://www.dropbox.com/s/o3pf0emvsa8onpp/Racetrack_DSN_19_
Support_Material.pdf?dl=0, accessed: 2019-3-8.  
[28]  V.  I.  Levenshtein,  “Binary  codes  capable  of  correcting  deletions, 
insertions and reversals,” in Soviet physics doklady, vol. 10, p. 707, 
1966.  
[29]  V.  Levenshtein,  “Binary  codes  capable  of  correcting  spurious 
insertions  and  deletions  of  ones,”  Problems  of  Information 
Transmission, vol. 1, no. 1, pp. 8–17, 1965.  
[30]  R. Venkatesan, S.G. Ramasubramanian, S. Venkataramani, K. Roy 
and  A.  Raghunathan,  "Stag:  Spintronic-Tape  Architecture  for 
GPGPU  Cache  Hierarchies," 
in  International  Symposium  on 
Computer Architecture (ISCA), ACM/IEEE, pp. 253-264, 2014.  
[31]  C. Zhang, G. Sun, W. Zhang, F. Mi, H. Li, and W. Zhao, "Quantitative 
modeling of racetrack memory, a tradeoff among area, performance, 
and  power,"  in  20th  Asia  and  South  Pacific  Design  Automation 
Conference (ASP-DAC), pp. 100-105, 2015.  
[32]  X. Wang, C. Zhang, X. Zhang and G. Sun, "np-ECC: Nonadjacent 
Position  Error  Correction  Code  For  Racetrack  Memory,"  in 
International 
Architectures 
(NANOARCH), pp. 23-24, IEEE, 2016.  
Symposium 
on 
Nanoscale 
[33]  Z.  Liu  and  M.  Mitzenmacher,  “Codes  for  deletion  and  insertion 
channels with segmented errors,” IEEE Transactions on Information 
Theory, vol. 56, no. 1, pp. 224–232, 2010.  
[34]  R. Venkatesan, V. Kozhikkottu, C. Augustine, A. Raychowdhury, K. 
Roy,  and  A.  Raghunathan,  “TapeCache:  a  high  density,  energy 
efficient  cache  based  on  domain  wall  memory,”  in  ACM/IEEE 
international symposium on Low power electronics and design, pp. 
185–190, 2012.  
12