---
author: Seth Kenlon
category: 技术
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 7991
date: '2020-01-10 11:38:16'
editorchoice: false
excerpt: SparkleShare 是一个开源的基于 Git 的 Dropbox 风格的文件共享应用程序。在我们的系列文章中了解有关 Git 鲜为人知的用法。
fromurl: https://opensource.com/article/19/4/file-sharing-git
id: 11768
islctt: true
largepic: /data/attachment/album/202001/10/113645qb2ufvuu2ttimugv.png
permalink: /article-11768-1.html
pic: /data/attachment/album/202001/10/113645qb2ufvuu2ttimugv.png.thumb.jpg
related:
- displayorder: 0
  raid: 11499
- displayorder: 0
  raid: 11795
reviewer: wxy
selector: lujun9972
summary: SparkleShare 是一个开源的基于 Git 的 Dropbox 风格的文件共享应用程序。在我们的系列文章中了解有关 Git 鲜为人知的用法。
tags:
- Git
thumb: false
title: 用 Git 来共享文件
titlepic: true
translator: wxy
updated: '2020-01-10 11:38:16'
---
> 
> SparkleShare 是一个开源的基于 Git 的 Dropbox 风格的文件共享应用程序。在我们的系列文章中了解有关 Git 鲜为人知的用法。
> 
> 
> 
![](/data/attachment/album/202001/10/113645qb2ufvuu2ttimugv.png)
[Git](https://git-scm.com/) 是一个少有的能将如此多的现代计算封装到一个程序之中的应用程序，它可以用作许多其他应用程序的计算引擎。虽然它以跟踪软件开发中的源代码更改而闻名，但它还有许多其他用途，可以让你的生活更轻松、更有条理。在这个 Git 系列中，我们将分享七种鲜为人知的使用 Git 的方法。
今天，我们将看看 SparkleShare，它使用 Git 作为文件共享的基础。
### 用于文件共享的 Git
Git 的优点之一是它具有固有的分发能力。它可用来建立共享。即使你只是与自己网络上的其他计算机共享资源库，Git 也会为从共享位置获取文件的行为带来透明性。
随着其界面的发展，Git 变得非常简单。虽然因用户而异，他们坐下来完成一些工作时的共同点仅仅是 `git pull` 或稍微复杂一点的 `git pull && git checkout -b my-branch`。但是，对于某些人来说，将*命令输入*到他们的计算机中的做法完全是令人困惑或烦恼的。计算机旨在使生活变得轻松，它擅长于重复性工作，因此有更简便的方法可以与 Git 共享文件。
### SparkleShare
[SparkleShare](http://www.sparkleshare.org/) 项目是一个基于 Git 的跨平台的、开源的 Dropbox 式的文件共享应用程序。它通过将文件拖放到专门指定的 SparkleShare 目录中的简单操作，自动执行所有 Git 命令，触发添加、提交、推送和拉取过程。因为它基于 Git，所以你可以获得基于差异（diff）的快速推送和拉取，并且继承了 Git 版本控制和后端基础设施（如 Git 挂钩）的所有优点。它可以完全自托管，也可以将其与 [GitLab](http://gitlab.com)、GitHub、Bitbucket 等 Git 托管服务一起使用。此外，由于它基本上只是一个 Git 的前端，因此你可以在可能没有 SparkleShare 客户端但有 Git 客户端的设备上访问 SparkleShare 中的文件。
正如你获得 Git 的所有好处一样，你也会受到所有常见的 Git 限制：使用 SparkleShare 存储数百张照片、音乐和视频是不切实际的，因为 Git 是为文本而设计和优化的。Git 当然可以存储二进制文件的大文件，但是因为它可以跟踪历史记录，因此一旦将文件添加到其中，几乎就不可能完全删除它。这在某种程度上限制了 SparkleShare 对某些人的实用性，但使其非常适合许多工作流程，包括[日程安排](https://opensource.com/article/19/4/calendar-git)。
#### 安装 SparkleShare
SparkleShare 是跨平台的，可从[网站](http://sparkleshare.org)获得适用于 Windows 和 Mac 的安装程序。对于 Linux，有一个 [Flatpak](/business/16/8/flatpak) 安装包，或者你可以在终端中运行以下命令：
```
$ sudo flatpak remote-add flathub https://flathub.org/repo/flathub.flatpakrepo
$ sudo flatpak install flathub org.sparkleshare.SparkleShare
```
### 创建一个 Git 存储库
SparkleShare 并不是软件即服务（SaaS）。你在计算机上运行 SparkleShare 与 Git 存储库进行通信，而 SparkleShare 并不存储你的数据。如果你还没有与文件夹同步的 Git 存储库，则必须在启动 SparkleShare 之前创建一个文件夹。你有三个选择：托管的 Git、自托管 Git 或自托管 SparkleShare。
#### 托管的 Git
SparkleShare 可以使用你能访问的任何 Git 存储库进行存储，因此，如果你拥有 GitLab 或任何其他托管服务的帐户（或创建一个），则它可以成为 SparkleShare 的后端。例如，开源 [Notabug.org](http://notabug.org) 服务是一个类似于 GitHub 和 GitLab 的 Git 托管服务，但其独特性足以证明 SparkleShare 的灵活性。根据用户界面的不同，不同的托管服务创建新存储库的方法也有所不同，但是所有主要存储库都遵循相同的通用模型。
首先，在托管服务中找到创建新项目或存储库的按钮，单击它以开始。然后逐步完成存储库的创建过程，为存储库提供名称、隐私级别（存储库通常默认为公共），以及是否使用 `README` 文件初始化存储库。无论你是否需要个 `README` 文件，请初始化建立一个。使用一个文件来创建存储库不是绝对必要的，但是它会强制 Git 主机实例化存储库中的 `master` 分支，这有助于确保前端应用程序（例如 SparkleShare）具有要提交并推送的分支。即使文件是几乎空的 `README` 文件，也可以用来查看该文件以确认你已连接成功。
![Creating a Git repository](/data/attachment/album/202001/10/113823cmb5wm5z871fjdoe.jpg "Creating a Git repository")
创建存储库后，获取其用于 SSH 克隆的 URL。就像从 Git 项目获得其 URL 一样，你也可以获取此 URL：导航至存储库页面并查找 “Clone” 按钮或字段。
![Cloning a URL on GitHub](/data/attachment/album/202001/10/113825pwdydttne70rjruy.jpg "Cloning a URL on GitHub")
*GitHub 的克隆 URL。*
![Cloning a URL on GitLab](/data/attachment/album/202001/10/113826a9ue0ee8csbebkar.jpg "Cloning a URL on GitLab")
*GitLab 的克隆 URL。*
这是 SparkleShare 用于获取数据的地址，因此请记下它。你的 Git 存储库现已配置好。
#### 自托管的 Git
你可以使用 SparkleShare 访问你有权访问的任何计算机上的 Git 存储库。除了一个 Git 裸存储库外，无需任何特殊设置。但是，如果你想将对 Git 存储库的访问权授予其他任何人，则应运行 [Gitolite](http://gitolite.org) 之类的 Git 管理器或 SparkleShare 自己的 Dazzle 服务器来帮助你管理 SSH 密钥和帐户。至少，创建一个特定于 Git 的用户，以便有权访问你的 Git 存储库的用户不会自动获得对服务器其余部分的访问权限。
以 Git 用户身份登录服务器（如果你非常擅长管理用户和组权限，则可以以自己的用户登录）并创建存储库：
```
$ mkdir ~/sparkly.git
$ cd ~/sparkly.git
$ git init --bare .
```
你的 Git 存储库现已配置好。
#### Dazzle
SparkleShare 的开发人员提供了一个名为 [Dazzle](https://github.com/hbons/Dazzle) 的 Git 管理系统，以帮助你自托管 Git 存储库。
在你的服务器上，将 Dazzle 应用程序下载到你的路径中的某个位置：
```
$ curl https://raw.githubusercontent.com/hbons/Dazzle/master/dazzle.sh --output ~/bin/dazzle
$ chmod +x ~/bin/dazzle
```
Dazzle 设置了一个特定于 Git 和 SparkleShare 的用户，并且还基于 SparkleShare 应用程序生成的密钥实现了访问权限。现在，只需设置一个项目：