### V-Shuttle: A Scalable and Semantics-Aware Framework for Fuzzing Virtual Devices in Hypervisors

#### Introduction
Buffer overflows and use-after-free bugs are commonly believed to be exploitable. V-Shuttle, a fuzzing framework, detected 12 buffer overflow and 1 use-after-free bug, as well as 5 assertion failures in QEMU, indicating that the executions reached unexpected states.

#### Case Study 1: QEMU OHCI Out-of-bounds Access (CVE-2020-25624)
V-Shuttle uncovered an out-of-bounds (OOB) read/write access vulnerability in QEMU’s USB OHCI controller emulator. The issue arises during the processing of isochronous transfer descriptors (ITD), which describe the isochronous endpoint's data packets and are linked into the endpoint list. The OHCI controller derives `start_addr` and `end_addr` from `iso_td` supplied by the guest user via DMA transfer. The device calculates the transmission length based on these addresses. The problem is that the device does not check for negative lengths when `end_addr` is less than `start_addr`, leading to OOB read and write due to integer overflow. This flaw can cause the QEMU process to crash, resulting in a denial of service.

Traditional fuzzing methods struggle to trigger this bug because they require prior knowledge of the endpoint linked list layout to avoid invalid memory access. V-Shuttle, however, intercepts the device’s DMA read operations and supplies a fuzzed `iso_td` structure, allowing the `len` field to be fuzzed enough to cause overflow.

#### Case Study 2: VirtualBox BusLogic Heap-based Buffer Overflow (CVE-2021-2074)
V-Shuttle identified a heap-based buffer overwrite vulnerability in VirtualBox’s BusLogic SCSI emulator, with a CVSS score of 8.2. Successful exploitation of this vulnerability can result in the takeover of Oracle VM VirtualBox. The BusLogic device parses the command buffer and processes the command parameters from the guest. When initializing a new command, the device decrements `cbCommandParametersLeft` for each parameter added. However, `cbCommandParametersLeft` is not checked against 0 at the start, allowing an attacker to set it to 0 and then issue a command initialization, causing an underflow. This leads to an arbitrary heap out-of-bounds write up to the size of `uint8_t`, which can be exploited to escape the virtual machine.

In the fuzzing process, V-Shuttle continuously generated I/O operations that led to the execution of the command process function, ultimately triggering the vulnerability.

#### Efficiency of V-Shuttle
V-Shuttle efficiently found previously known vulnerabilities within a reasonable amount of time. Table 5 summarizes the number of executions and time required to discover these vulnerabilities.

| Bug          | Description                      | Executions | Time       | Found |
|--------------|----------------------------------|------------|------------|-------|
| CVE-2020-25625 | SDHCI Heap buffer overflow      | 8.88M      | 26m19s     | ✓     |
| CVE-2020-25085 | OHCI infinite loop               | 235k       | 40s        | ✓     |
| CVE-2021-20257 | EHCI use-after-free              | 35.6M      | 2h22m40s   | ✓     |
| CVE-2020-25084 | E1000 infinite loop              | 79.4M      | 4h37m22s   | ✓     |
| CVE-2020-11869 | ATI-VGA integer overflow         | 40.5M      | 2h16m50s   | ✓     |

#### Deployment and Application of V-Shuttle
V-Shuttle was deployed and tested on Ant Group’s commercial platform, demonstrating its practicality and effectiveness. Experiments were conducted on two USB devices, UHCI and EHCI, and the results showed that V-Shuttle achieved higher branch coverage compared to other fuzzing frameworks. The deployment process is lightweight, requiring only about an hour for a professional to integrate V-Shuttle into a new hypervisor.

#### Related Work
Fuzzing techniques have been widely used to discover software vulnerabilities. AFL is one of the most well-known fuzzers, and many advanced fuzzers have been developed based on it. Some research combines fuzzing with other bug detection technologies, while others focus on improving scheduling algorithms and feedback mechanisms. Hybrid fuzzing methods and hypervisor fuzzing have also been extensively researched.

#### Discussion
V-Shuttle requires some human resources to reconstruct proof-of-concept (PoC) code. Additionally, it currently does not support closed-source hypervisors, but this limitation could be overcome with binary patching and dynamic binary instrumentation. The internal states of the hypervisor can persist across fuzzing iterations, potentially limiting the effectiveness of the fuzzing process.

#### Conclusion
V-Shuttle is a scalable and semantics-aware framework for fuzzing virtual devices in hypervisors. It is portable and leverages coverage-guided fuzzing to effectively target a wide range of devices. Evaluation on QEMU and VirtualBox demonstrated its efficiency and effectiveness, discovering 26 new memory bugs in QEMU and 9 new bugs in VirtualBox, with 17 bugs receiving official CVEs. V-Shuttle is open-sourced at [https://github.com/hustdebug/v-shuttle](https://github.com/hustdebug/v-shuttle).

#### Acknowledgments
We thank the anonymous reviewers for their insightful comments. This work is supported by various grants and programs, including the National Key R&D Program of China and the Ant Research Intern Program.

#### References
[1] 2020. CVE-2020-14364 QEMU: usb: out-of-bounds r/w access issue while processing usb packets, 2020. https://bugzilla.redhat.com/show_bug.cgi?id=1869201.
[2] 2020. Pwn2Own 2020: Oracle VirtualBox Escape, 2020. https://starlabs.sg/blog/2020/09/pwn2own-2020-oracle-virtualbox-escape/.
...
[33] HyungSeok Han and Sang Kil Cha. 2017. Imf: Inferred model-based fuzzer. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security. 2345–2358.