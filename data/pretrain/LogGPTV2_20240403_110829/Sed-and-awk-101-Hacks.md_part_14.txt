## GAWK/NAWK String Functions
These string functions are available only in GAWK and NAWK flavors.
#### Sub Function
> **syntax:**
sub(original-string,replacement-string,string-variable)
-   sub stands for substitution.
-   original-string: This is the original string that needs to be
    > replaced. This can also be a regular expression.
-   replacement-string: This is the replacement string.
-   string-variable: This acts as both input and output string variable.
    > You have to be careful with this, as after the successful
    > substitution, you lose the original value in this string-variable.
In the following example:
-   original-string: This is the regular expression C\[Aa\], which
    > matches either \"CA\" or \"Ca\"
-   replacement-string: When the original-string is found, replace it
    > with \"KA\"
-   string-variable: Before executing the sub, the variable contains the
    > input string. Once the replacement is done, the variable contains
    > the output string.
Please note that sub replaces only the 1st occurrence of the match.
\$ cat sub.awk BEGIN {
> state=\"CA is California\" sub(\"C\[Aa\]\",\"KA\",state); print state;
}
\$ awk -f sub.awk KA is California
The 3rd parameter string-variable is optional. When it is not specified,
awk will use \$0 (the current line), as shown below. This example
changes the first 2 characters of the record from \"10\" to \"20\". So,
the item number 101 becomes 201, 102 becomes 202, etc.
\$ awk \'{ sub(\"10\",\"20\"); print \$0; }\' items.txt 201,HD
Camcorder,Video,210,10 202,Refrigerator,Appliance,850,2
203,MP3 Player,Audio,270,15 204,Tennis Racket,Sports,190,20 205,Laser
Printer,Office,475,5
When a successful substitution happens, the sub function returns 1,
otherwise it returns 0.
> **Print the record only when a successful substitution occurs:**
##### \$ awk \'{ if (sub(\"HD\",\"High-Def\")) print \$0; }\' \\ items.txt
101,High-Def Camcorder,Video,210,10
#### Gsub Function
gsub stands for global substitution. gsub is exactly same as sub, except
that all occurrences of original-string are changed to
replacement-string.
> **In the following example, both \"CA\" and \"Ca\" are changed to
> \"KA\":**
\$ cat gsub.awk BEGIN {
> state=\"CA is California\" gsub(\"C\[Aa\]\",\"KA\",state); print
> state;
}
\$ awk -f gsub.awk KA is KAlifornia
As with sub, the 3rd parameter is optional. When it is not specified,
awk will use \$0 as shown below.
The following example replaces all the occurrences of \"10\" in the line
with \"20\". So, other than changing the item-number, it also changes
other numeric fields in the record, if it contains \"10\".
\$ awk \'{ gsub(\"10\",\"20\"); print \$0; }\' items.txt 201,HD
Camcorder,Video,220,20
202,Refrigerator,Appliance,850,2 203,MP3 Player,Audio,270,15 204,Tennis
Racket,Sports,190,20 205,Laser Printer,Office,475,5
#### Match Function () and RSTART, RLENGTH variables
Match function searches for a given string (or regular expression) in
the input-string, and returns a positive value when a successful match
occurs.
> **Syntax:**
match(input-string,search-string)
-   input-string: This is the input-string that needs to be searched.
-   search-string: This is the search-string, that needs to be search in
    > the input-string. This can also be a regular expression.
The following example searches for the string \"Cali\" in the state
string variable. If present, it prints a successful message.
\$ cat match.awk BEGIN {
> state=\"CA is California\" if (match(state,\"Cali\")) {
print substr(state,RSTART,RLENGTH),\"is present in:\", state;
> }
}
\$ awk -f match.awk
Cali is present in: CA is California
Match sets the following two special variables. The above example uses
these in the substring function call, to print the pattern in the
success message.
-   RSTART - The starting location of the search-string
-   RLENGTH - The length of the search-string.
## GAWK String Functions
tolower and toupper are available only in Gawk. As the name suggests the
function converts the given string to lower case or upper case as shown
below.
\$ awk \'{print tolower(\$0)}\' items.txt 101,hd camcorder,video,210,10
102,refrigerator,appliance,850,2 103,mp3 player,audio,270,15 104,tennis
racket,sports,190,20 105,laser printer,office,475,5
\$ awk \'{print toupper(\$0)}\' items.txt 101,HD CAMCORDER,VIDEO,210,10
102,REFRIGERATOR,APPLIANCE,850,2
103,MP3 PLAYER,AUDIO,270,15
104,TENNIS RACKET,SPORTS,190,20
105,LASER PRINTER,OFFICE,475,5
## Argument Processing (ARGC, ARGV, ARGIND)
The built-in variables we discussed earlier, FS, NFS, RS, NR, FILENAME,
OFS, and ORS, are all available on all versions of awk (including nawk,
and gawk).
-   The environment variables discussed in this hack are available only
    > on nawk and gawk.
-   Use ARGC and ARGV to pass some parameters to the awk script from the
    > command line.
-   ARGC contains the total number of arguments passed to the awk
    > script.
-   ARGV is an array contains all the arguments passed to the awk script
    > in the index from 0 through ARGC
-   When you pass 5 arguments, ARGC will contain the value of 6.
-   ARGV\[0\] will always contain awk.
> **The following simple arguments.awk shows how ARGC and ARGV behave:**
\$ cat arguments.awk BEGIN {
> print \"ARGC=\",ARGC
>
> for (i = 0; i \ paramname paramvalue\".
-   The awk script can take item number and the quantity as arguments.
-   if you use \"\--item 104 \--qty 25\" as argument to the awk script,
    > it will set quantity as 25 for the item number 104.
-   if you use \"\--item 105 \--qty 3\" as argument to the awk script,
    > it will set quantity as 3 for the item number 105.
\$ cat argc-argv.awk BEGIN {
> FS=\",\";
>
> OFS=\",\";
>
> for (i=0; i\
> itemnumber=ARGV\[i+1\]; delete ARGV\[i\]
>
> i++;
>
> delete ARGV\[i\]
>
> }else if (ARGV\[i\]==\"\--qty\") { quantity=ARGV\[i+1\];
>
> delete ARGV\[i\] i++;
>
> delete ARGV\[i\]
>
> }
>
> }
}
{
> if (\$1==itemnumber)
>
> print \$1,\$2,\$3,\$4,quantity else
>
> print \$0;
}
\$ awk -f argc-argv.awk \--item 104 \--qty 25 items.txt 101,HD
Camcorder,Video,210,10 102,Refrigerator,Appliance,850,2
103,MP3 Player,Audio,270,15 104,Tennis Racket,Sports,190,25 105,Laser
Printer,Office,475,5
In gawk the file that is currently getting processed is stored in the
ARGV array that is accessed from the body loop. The ARGIND is the index
to this ARGV array to retrieve the current file.
When you are processing only one file in an awk script, the ARGIND will
be 1, and ARGV\[ARGIND\] will give the file name that is currently
getting processed.
The following example contains only the body block, that prints the
value of the ARGIND, and the current file name from the ARGV\[ARGIND\]
\$ cat argind.awk
{
> print \"ARGIND:\", ARGIND
>
> print \"Current file:\", ARGV\[ARGIND\]
}
When you call the above example with two files, while processing each
and every line of the input-file, it will print the two lines. This just
gives you the idea of what is getting stored in the ARGIND and
ARGV\[ARGIND\].
\$ awk -f argind.awk items.txt items-sold.txt ARGIND: 1
Current file: items.txt ARGIND: 1
Current file: items.txt ARGIND: 1
Current file: items.txt ARGIND: 1
Current file: items.txt ARGIND: 1
Current file: items.txt ARGIND: 2
Current file: items-sold.txt
ARGIND: 2
Current file: items-sold.txt ARGIND: 2
Current file: items-sold.txt ARGIND: 2
Current file: items-sold.txt ARGIND: 2
Current file: items-sold.txt
## OFMT
The OFMT built-in variable is available only in NAWK and GAWK.
When a number is converted to a string for printing, awk uses the OFMT
format to decide how to print the values. The default value is \"%.6g\",
which will print a total of 6 characters including both sides of the dot
in a number.
When using g, you have to count all the characters on both sides of the
dot. For example, \"%.4g\" means total of 4 characters will be printed
including characters on both sides of the dot.
When using f, you are counting ONLY the characters on the right side of
the dot. For example, \"%.4f\" means 4 characters will be printed on the
right side of the dot. The total number of characters on the left side
of the dot doesn\'t matter here.
The following ofmt.awk example shows how the output will be printed when
using various OFMT values (for both g and f).
\$ cat ofmt.awk BEGIN {
> total=143.123456789;
>
> print \"\-\--using g\-\-\--\"
>
> print \"Default OFMT:\", total; OFMT=\"%.3g\";
>
> print \"%.3g OFMT:\", total; OFMT=\"%.4g\";
>
> print \"%.4g OFMT:\", total; OFMT=\"%.5g\";
>
> print \"%.5g OFMT:\", total; OFMT=\"%.6g\";
>
> print \"%.6g OFMT:\", total; print \"\-\--using f\-\-\--\"
> OFMT=\"%.0f\";
>
> print \"%.0f OFMT:\", total; OFMT=\"%.1f\";
>
> print \"%.1f OFMT:\", total; OFMT=\"%.2f\";
>
> print \"%.2f OFMT:\", total; OFMT=\"%.3f\";
>
> print \"%.3f OFMT:\", total;
}
\$ awk -f ofmt.awk
\-\--using g\-\-\--
+-----+------+--------------------------------------------------------+
| > D |      |                                                        |
| efa |      |                                                        |
| ult |      |                                                        |
| >   |      |                                                        |
|  OF |      |                                                        |
| MT: |      |                                                        |
| > 1 |      |                                                        |
| 43. |      |                                                        |
| 123 |      |                                                        |
+=====+======+========================================================+
| > % | > O  | > 143                                                  |
| .3g | FMT: |                                                        |
+-----+------+--------------------------------------------------------+
| > % | > O  | > 143.1                                                |
| .4g | FMT: |                                                        |
+-----+------+--------------------------------------------------------+
| > % | > O  | > 143.12                                               |
| .5g | FMT: |                                                        |
+-----+------+--------------------------------------------------------+
| > % | > O  | > 143.123                                              |
| .6g | FMT: |                                                        |
+-----+------+--------------------------------------------------------+
| > \ |      |                                                        |
| -\- |      |                                                        |
| -us |      |                                                        |
| ing |      |                                                        |
| >   |      |                                                        |
|  f\ |      |                                                        |
| -\- |      |                                                        |
| \-- |      |                                                        |
+-----+------+--------------------------------------------------------+
| > % | > O  | > 143                                                  |
| .0f | FMT: |                                                        |
+-----+------+--------------------------------------------------------+
| > % | > O  | > 143.1                                                |
| .1f | FMT: |                                                        |
+-----+------+--------------------------------------------------------+
| > % | > O  | > 143.12                                               |
| .2f | FMT: |                                                        |
+-----+------+--------------------------------------------------------+
| > % | > O  | > 143.123                                              |
| .3f | FMT: |                                                        |
+-----+------+--------------------------------------------------------+
## GAWK Built-in Environment Variables
The built-in variables discussed in this section are available only in
GAWK.
#### ENVIRON
This is very helpful when you want to access the shell environment
variable in your awk script. ENVIRON is an array that contains all the
environment values. The index to the ENVIRON array is the environment
variable name.
For example, the array element ENVIRON\[\"PATH\"\] will contain the
value of the PATH environment variable.
The following example prints all the available environment variables and
their values.
\$ cat environ.awk BEGIN {
> OFS=\"=\"
>
> for(x in ENVIRON) print x,ENVIRON\[x\];
}
Partial output is shown below.
\$ awk -f environ.awk SHELL=/bin/bash
PATH=/home/ramesh/bin:/usr/local/sbin:/usr/local/bin:/u
sr/sbin:/usr/bin:/sbin:/bin:/usr/games
HOME=/home/ramesh TERM=xterm USERNAME=ramesh DISPLAY=:0.0
AWKPATH=.:/usr/share/awk
#### IGNORECASE
By default IGNORECASE is set to 0. So, the awk program is case
sensitive.
When you set IGNORECASE to 1, the awk program becomes case insensitive.
This will affect regular expression and string comparisons.
The following will not print anything, as it is looking for \"video\"
with lower case \"v\". But, the items.txt file contains only \"Video\"
with upper case \"V\".
awk \'/video/ {print}\' items.txt
However when you set IGNORECASE to 1, and search for \"video\", it will
print the line containing \"Video\", as it will not do a case sensitive
pattern match.
\$ awk \'BEGIN{IGNORECASE=1} /video/ {print}\' items.txt 101,HD
Camcorder,Video,210,10
As you see in the example below, this works for both string and regular
expression comparisons.
\$ cat ignorecase.awk BEGIN {
> FS=\",\"; IGNORECASE=1;
}
{
> if (\$3 == \"video\") print \$0; if (\$2 \~ \"TENNIS\") print \$0;
}
\$ awk -f ignorecase.awk items.txt 101,HD Camcorder,Video,210,10
104,Tennis Racket,Sports,190,20
#### ERRNO
When there is an error while using I/O operations (for example:
getline), the ERRNO variable will contain the corresponding error
message.
The following example is trying to read a file that doesn\'t exist using
getline. In this case the ERRNO variable will contain \"No such file or
directory\" message.
\$ vi errno.awk
{
> print \$0;
>
> x = getline \
> print ERRNO else
>
> print \$0;
}
\$ awk -f errno.awk items.txt 101,HD Camcorder,Video,210,10 No such file
or directory 102,Refrigerator,Appliance,850,2 No such file or directory
103,MP3 Player,Audio,270,15
No such file or directory 104,Tennis Racket,Sports,190,20 No such file
or directory 105,Laser Printer,Office,475,5 No such file or directory
## Awk Profiler - pgawk
The pgawk program is used to create an execution profile of your awk
program. Using pgawk you can view how many time each awk statement (and
custom user defined functions) were executed.
First, create a sample awk program that we\'ll run through the pgawk to
see how the profiler output looks like.
\$ cat profiler.awk BEGIN {
> FS=\",\";
>
> print \"Report Generated On:\" strftime(\"%a %b %d %H:%M:
%S %Z %Y\",systime());
}
{
> if ( \$5 \
> print \"Buy More: Order\", \$2, \"immediately!\" else