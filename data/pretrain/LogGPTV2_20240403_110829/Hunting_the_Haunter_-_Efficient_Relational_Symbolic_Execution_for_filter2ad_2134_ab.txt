|l, ι
(cid:86)
|r, ι
|l)| store(µ
(cid:86)
|r)(cid:105)
(cid:86)
(cid:86)
|r, ν
|r, ι
|r)(cid:105).
III. HAUNTED RELSE
To analyze speculative constant-time, we need to mod-
ify RelSE to consider the speculative semantics of the pro-
gram [5]. This includes regular executions—instructions that
are executed as a result of a good speculation and are kept
once the speculation is resolved—and all possible transient
executions—instructions that are executed as a result of a
mispeculation and that are discarded once the speculation is
resolved. This section illustrates the straightforward approach
to the problem—employed in state-of-the art tools (see Ta-
ble V)—that we call Explicit as it models transient executions
explicitly, and presents our optimized exploration strategy that
we call Haunted.
A. Spectre-PHT
1) Explicit RelSE for Spectre-PHT: The Explicit approach
to model Spectre-PHT in SE—introduced in KLEESpec-
tre [11]—explicitly models transient executions by forking into
four path at each conditional branch. Consider for instance, the
program in Fig. 1a and its symbolic execution tree in Fig. 1b.
After the conditional instruction if c1 the execution forks
into four paths:
• Two regular paths: Like in standard symbolic execution,
the ﬁrst path follows the then branch and adds the
constraint (c1 = true) to the path predicate; while the
second path follows the else branch with the constraint
(c1 = f alse).
4
• Two transient paths: To account for transient executions
that are mispredicted to true, the then branch is executed
with the constraint (c1 = f alse); while to account for
transient executions that are mispredicted to f alse, the
else branch is executed with the constraint (c1 = true).
These transient paths are discarded after reaching a spec-
ulation bound (usually deﬁned by the size of the reorder
buffer).
To verify speculative constant-time, we have to check that
memory accesses and conditional statements do not leak secret
information on both regular paths and transient paths. On
regular paths, we check that the control-ﬂow of the program
and the indexes of load and store instructions do not depend
on the secret input. However, on transient paths, we only check
the control-ﬂow and the index of load instructions. Reason is
that, in speculative execution, memory stores are queued in
the store buffer and are invisible to the cache until they are
retired [11].
Problem with Explicit: From Fig. 1b, we see that
both subtrees resulting from executing the then branch in
regular and transient execution (i.e. subtrees starting from
state A) correspond to the same instructions under different
(cid:86)
path predicates. Precisely, if we call ψ
st the
relational expressions corresponding respectively to control-
ﬂow statements, load indexes and store indexes in subtree A,
then we have to check secleak(π ∧ c1, ψ
cf ) ∧ secleak(π ∧
(cid:86)
st) for the regular execution,
c1, ψ
and secleak(π ∧ ¬c1, ψ
ld) for the
transient execution. In the end, this is equivalent to checking
the formula:
cf ) ∧ secleak(π ∧ ¬c1, ψ
ld) ∧ secleak(π ∧ c1, ψ
(cid:86)
ld, and ψ
(cid:86)
cf , ψ
(cid:86)
(cid:86)
(cid:86)
(cid:86)
(cid:86)
secleak(π, ψ
cf ) ∧ secleak(π, ψ
ld) ∧ secleak(π ∧ c1, ψ
st)
(cid:86)
(cid:86)
This formula essentially amounts to symbolically executing the
(cid:86)
then branch up to δ, checking load indexes ψ
ld and control-
(cid:86)
cf without adding the constraint c1, and
ﬂow expressions ψ
(cid:86)
only add c1 to check store indexes ψ
st.
This observation led us to design an optimization of
Explicit RelSE: we can explore a single speculative path that
encompasses both the regular and the transient behavior of the
program in order to prune states while keeping an equivalent
result.
2) Haunted RelSE for Spectre-PHT: Instead of forking the
execution into four paths, Haunted RelSE forks the execution
into two paths, as illustrated in Fig. 1c. After conditional
branch if c1, the execution forks into two paths: a path
following the then branch (subtree A) and a path following the
else branch (subtree D). Both paths model the behavior of the
regular and the corresponding transient paths at the same time.
Moreover, it delays (and possibly spares) satisﬁability check
of the path constraint—the constraint c1 ∨ ¬c1 is added only
for clarity. Finally, the constraint is added to the path predicate
when the conditional branch is retired (after δ steps).
At each conditional statement (resp. load instruction), we
check that the condition (resp. load index) does not depend
on the secret in both the regular and transient executions (i.e.
(cid:86)
ld). On
using path predicate π): secleak(π, ψ
the other hand, store instructions are checked under the regular
cf )∧secleak(π, ψ
(cid:86)
int main():
if c1:
A()
if c2:
B()
else:
C()
else:
D()
(a) Illustrative program.
(b) Explicit RelSE.
(c) Haunted RelSE.
Figure 1: Comparison of RelSE of program in Fig. 1a, where solid paths represent regular executions, dotted paths represent
transient executions, and δ is the speculation depth.
execution only (i.e. using path predicate π ∧ c1): secleak(π ∧
(cid:86)
st). Finally, the condition (c1 = true) is added to the
c1, ψ
path predicate after δ steps.
B. Spectre-STL
1) Explicit RelSE for Spectre-STL: At the microarchitec-
tural level, a load instruction can take its value from any
matching entry in the store buffer, or from the main memory.
the load can bypass each pending store
In other words,
in the store buffer until
it reaches the main memory. To
account for this behavior, the Explicit strategy—employed in
PITCHFORK [5]—is to models transient executions explicitly
by forking the symbolic execution for each possible load and
store interleaving.
Consider as an illustration the program in Fig. 2a. Symbolic
execution of the store intructions gives the symbolic memory
µ3 deﬁned in Fig. 2b which is the sequence of symbolic
store operations starting from initial_memory. With this
chronological representation, we can easily deﬁne the content
of a store buffer of size |SB| by taking the |SB| last store
operations of the symbolic memory. Similarly, the main mem-
ory can be deﬁned by removing the last |SB| store operations
from the symbolic memory. If we consider a store buffer of
size 2, the last two store expressions constitute the store buffer
while the main memory is deﬁned by µ1.
The ﬁrst load instruction (block A) can bypass each store
operation in the store buffer until it reaches the main memory.
Therefore there are three possible values for x, as detailed in
Fig. 2c:
• The ﬁrst
• The regular value r corresponds to a symbolic select
operation from the most recent symbolic memory µ3.
Because all prior store operations are encoded in-order
into µ3, this corresponds to the in-order execution.
transient value t2 is obtained by bypassing
the ﬁrst entry in the store buffer. This corresponds to a
symbolic select operation from µ2.
• The ﬁnal transient value t1 is obtained by bypassing the
ﬁrst and the second entries in the store buffer and taking
the value from the main memory. This corresponds to a
symbolic select operation from µ1.
Similarly, variable y can also take three possible values.
The Explicit exploration strategy, illustrated in Fig. 2d,
forks the symbolic execution for each possible value that a load
can take. This quickly leads to path explosion and we show
experimentally (Section V-C) that this solution is intractable
even on small codes (100 instr.).
2) Haunted RelSE for Spectre-STL: The ﬁrst observation
that we make is that most paths are redundant as a load can
naturally commute with non-aliasing prior stores. Take, for
instance, the evaluation of loads in Fig. 2c. If we can determine
that the index a of the load is distinct from the index of
the second store a2 then, by the theory of arrays, we have
t2 = t1 thus the path x (cid:55)→ t2 and all of its subpaths are
redundant. We rely on a well-known optimization for symbolic
arrays called read-over-write [37] to detect and prune these
redundant cases.
However, merely pruning redundant cases is not sufﬁcient
to deal with path explosion (see Section V), thus we propose
a new encoding to keep the remaining cases in a single path
predicate. We use symbolic if-then-else to encode in a single
expression all the possible values that a load can take instead
of forking the execution for each possible case.
Take, for instance, the evaluation of load expressions given
the
1, or t(cid:48)
2. We introduce two
2 and build the expression
2 r(cid:48))). The solver can let y take the following
in Fig. 2c. After the evaluation of the second load,
variable y can take the values r(cid:48), t(cid:48)
1 and b(cid:48)
fresh boolean variables b(cid:48)
1 t(cid:48)
(ite b(cid:48)
values:
1 (ite b(cid:48)
2 t(cid:48)
• transient value t(cid:48)
• transient value t(cid:48)
• regular value r by setting both b(cid:48)
1 by setting b(cid:48)
2 by setting b(cid:48)
1 to true,
1 to false and b(cid:48)
1 and b(cid:48)
2 to true,
2 to f alse.
Finally, transient values t(cid:48)
(e.g. after reaching the speculation depth) by setting b(cid:48)
b(cid:48)
2) to false.
2) can easily be discarded
1 (resp.
1 (resp. t(cid:48)
IV.
IMPLEMENTATION OF HAUNTED RELSE
This section introduces the technical details of Haunted
RelSE. It mainly focuses on the changes to binary-level
RelSE [16] required to analyze speculative constant-time [5].
5
store a1 v1;
store a2 v2;
store a3 v3;
x = load a;
y = load b;
[...]
(a) Illustrative program.
 r
x =
t2
t1
y = {r(cid:48), t(cid:48)
2}
1, t(cid:48)
S
(cid:27)
} A} B} C
(cid:27)
(cid:27)
Mem
SB
µ0 = initial_memory
µ1 = store µ0 a1 v1
µ2 = store µ1 a2 v2
µ3 = store µ2 a3 v3
(b) Symbolic memory where SB
is the store buffer (of size 2) and
Mem is the main memory.
In-order execution
Bypass 1st SB entry
Bypass 1st & 2nd SB entries
where
r = select µ3 a,
t2 = select µ2 a,
t1 = select µ1 a,
r(cid:48) = select µ3 a(cid:48)
t(cid:48)
2 = select µ2 a(cid:48)
t(cid:48)
1 = select µ1 a(cid:48)
(c) Symbolic evaluation of loads.
(d) Explicit RelSE.
(e) Haunted RelSE when
a (cid:54)= a2.
Figure 2: Speculative RelSE of program in Fig. 2a. The sym-
bolic memory is given in Fig. 2b and the symbolic evaluation
of load instructions is detailed in Fig. 2c. Figure 2d illustrates
the symbolic execution tree obtained from the Explicit explo-
ration strategy; and Fig. 2e, the tree obtained from Haunted
RelSE, where solid paths denote regular executions and dotted
paths denote transient executions.
Most instructions naturally commute or cannot be reordered
because of their data dependencies. Indeed, we only need to
consider reordering of conditional branches for Spectre-PHT
(Section IV-A) and reordering of load and store instructions
for Spectre-STL (Section IV-B).
instruction in the program P , denoted P [l];
A symbolic conﬁguration, denoted σ, consists of:
• the current location l, which is used to get the current
• the current depth of the symbolic execution δ;
• a symbolic register map ρ, mapping program variables to
• two path predicates π and (cid:101)π (details in Section IV-A);
their symbolic value;
• a symbolic memory µ
(cid:86)
—a pair of symbolic arrays and the
retirement depth of its store operations;
• a set of transient loads(cid:101)λ, (details in Section IV-B).
The notation σ.f is used to denote the ﬁeld f in conﬁguration
σ. We also deﬁne a function eval_expr(σ, e) which evaluates
a DBA expression e to a symbolic value in a symbolic
conﬁguration σ.
Instead of modeling the reorder buffer explicitly, we use the
current depth of the symbolic execution to track instructions
to retire. An instruction must be retired after at most ∆ steps,
where ∆ is the size of the reorder buffer. Expressions are
annotated with a depth to determine when they must be retired,
or whether they depend on the memory. For instance, a variable
(cid:86)
v in the register map ρ, maps to a pair (ϕ
, δ) where δ is the
retirement depth of its last memory access. When δ is not
needed in the context, it is omitted.
A. Haunted RelSE for Spectre-PHT.
1) Evaluation of conditional instructions: Contrary to stan-
dard symbolic execution, conditions are not added to the path
predicate right away. Instead, they are kept in a speculative
path predicate, denoted (cid:101)π, along with their retirement depth.
When the retirement depth of a condition is reached, it is
removed from the speculative path predicate and added to the
retired path predicate, denoted π.
Evaluation of conditional branches is detailed in Algo-
rithm 1. First, the function evaluates the symbolic value of
the condition and checks that it can be leaked securely. Then
it computes the two next states σt, following the then branch,
and σf , following the else branch by updating the location
and the speculative path predicate (cid:101)π.
, δ) ← eval_expr(σ, c);
Func eval_ite(σ) where P [σ.l] = ite c ? lt : lf is
, σ.π); (cid:66) Leakage of c is secure
(cid:86)
(ϕ
(cid:86)
assert secLeak (ϕ
(cid:66) Compute state following then branch
(cid:86)
(cid:66) Compute state following else branch
(cid:86)
σt ← σ; σt.l ← lt; σt.(cid:101)π ← σ.(cid:101)π ∪ {(ϕ
σf ← σ; σf .l ← lf ; σf .(cid:101)π ← σ.(cid:101)π ∪ {(¬ϕ
, δ)};
, δ)};
return (σt, σf )
Algorithm 1: Evaluation of conditional branches.
2) Determining speculation depth: The speculation depth
after a conditional branch is computed dynamically, consider-
ing that the condition can be fully resolved (and mispredicted
paths can be squashed) when all the memory accesses upon
which it depends are retired. In particular it means that if the
condition does not depend on the memory then the branch is
not mispredicted [9], [10].
This requires to keep, for each expression, the depth of its
last memory access. As shown in Algorithm 1, at a conditional
branch ite c ? ltrue: lf alse, c evaluates to a symbolic value
(cid:86)
and depth δ. This depth δ is added to the speculative path
ϕ
predicate (cid:101)π as the retirement depth of the condition.
tired in the function retire PHT(π,(cid:101)π, δ) deﬁned in Algorithm 2.
The function removes from the speculative path predicate(cid:101)π all
3) Invalidate transient paths: Conditional branches are re-
the conditions with a retirement depth δret below the current
depth δcurrent, and adds them to the retired path predicate π.
6
execution stops, if π becomes unsatisﬁable.
It returns the updated path predicates π and (cid:101)π. The symbolic
Func retire PHT(π,(cid:101)π, δcurrent) is
π(cid:48) ← π; (cid:101)π
, δret) in (cid:101)π do
else (cid:101)π
(cid:48) ←(cid:101)π
return (π(cid:48),(cid:101)π
if δret ≤ δcurrent then (cid:66) Condition to retire
π(cid:48) ← π(cid:48) ∧ ϕ
(cid:86)
;
, δret)} ;
(cid:48) ∪ {(ϕ
(cid:48) ← ∅;
(cid:86)
for (ϕ
(cid:86)
)
(cid:48)
Algorithm 2: Retire expired conditions.
B. Haunted RelSE for Spectre-STL.
1) Symbolic memory:
In a symbolic conﬁguration,
the
(cid:86)
memory µ
is the history of symbolic store operations starting
from the initial memory. We can use this chronological rep-
resentation to reconstruct the content of the store buffer and
the main memory. The store buffer, is the restriction of the
symbolic memory to the last |SB| stores which have not been
retired, where |SB| is the size of the store buffer. Formally, it
is deﬁned as:
(cid:86)
SB (µ
, δ) (cid:44) {(s, δs) | (s, δs) ∈ last(|SB|, µ
(cid:86)
) ∧ δ > δ}
(cid:86)
where last(n, µ
(cid:86)
symbolic memory µ
.
) is the projection on the last n element of the
Similarly, the main memory is deﬁned as the restriction of
the symbolic memory to the retired store operations. Formally,
, δ) (cid:44) µ
(cid:86)