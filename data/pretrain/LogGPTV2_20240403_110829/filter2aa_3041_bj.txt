16 
 url 
 string 
17 
 statusCode int 
18 
 }{ 
19 
 { 
20 
 "http://www.goinggo.net/feeds/posts/default?alt=rss", 
21 
 http.StatusOK, 
22 
 }, 
23 
 { 
24 
 "http://rss.cnn.com/rss/cnn_topstbadurl.rss", 
25 
 http.StatusNotFound, 
26 
 }, 
27 
 } 
在代码清单 9-9 中，可以看到和之前同名的测试函数 TestDownload，它接收一个指向
testing.T 类型的指针。但这个版本的 TestDownload 略微有些不同。在第 15 行到第 27 行，
可以看到表组的实现代码。表组的第一个字段是 URL，指向一个给定的互联网资源，第二个字
段是我们请求资源后期望收到的状态码。 
目前，我们的表组只配置了两组值。第一组值是 goinggo.net 的 URL，响应状态为 OK，第
二组值是另一个 URL，响应状态为 NotFound。运行这个测试会得到图 9-3 所示的输出。 
图 9-3  表组测试的输出 
图 9-3 所示的输出展示了如何迭代表组里的值，并使用其进行测试。输出看起来和基础单元
测试的输出很像，只是每次都会输出两个不同的 URL 及其结果。测试又通过了。 
让我们看一下我们是如何让表组测试工作的，如代码清单 9-10 所示。 
代码清单 9-10  listing08_test.go：第 29 行到第 34 行 
29 
 t.Log("Given the need to test downloading different content.") 
30 
 { 
31 
 for _, u := range urls { 
32 
 t.Logf("\tWhen checking \"%s\" for status code \"%d\"", 
33 
 u.url, u.statusCode) 
34 
 { 
代码清单 9-10 的第 31 行的 for range 循环让测试迭代表组里的值，使用不同的 URL 运
行测试代码。测试的代码与基础单元测试的代码相同，只不过这次使用的是表组内的值进行测试，
如代码清单 9-11 所示。 
代码清单 9-11  listing08_test.go：第 35 行到第 55 行 
35 
 resp, err := http.Get(u.url) 
36 
 if err != nil { 
37 
 t.Fatal("\t\tShould be able to Get the url.", 
38 
 ballotX, err) 
39 
 } 
40 
 t.Log("\t\tShould be able to Get the url", 
41 
 checkMark) 
42 
43 
 defer resp.Body.Close() 
44 
45 
 if resp.StatusCode == u.statusCode { 
46 
 t.Logf("\t\tShould have a \"%d\" status. %v", 
47 
    u.statusCode, checkMark) 
48 
 } else { 
49 
 t.Errorf("\t\tShould have a \"%d\" status %v %v", 
50 
 u.statusCode, ballotX, resp.StatusCode) 
51 
 } 
52 
 } 
53         } 
54 
 } 
55 } 
代码清单 9-11 的第 35 行中展示了代码如何使用 u.url 字段来做 URL 调用。在第 45 行中，
u.statusCode 字段被用于和实际的响应状态码进行比较。如果以后需要扩展测试，只需要将
新的 URL 和状态码加入表组就可以，不需要改动测试的核心代码。 
9.1.3  模仿调用 
我们之前写的单元测试都很好，但是还有些瑕疵。首先，这些测试需要访问互联网，才能保
证测试运行成功。图 9-4 展示了如果没有互联网连接，运行基础单元测试会测试失败。 
图 9-4  由于没有互联网连接导致测试失败 
不能总是假设运行测试的机器可以访问互联网。此外，依赖不属于你的或者你无法操作的服
务来进行测试，也不是一个好习惯。这两点会严重影响测试持续集成和部署的自动化。如果突然
断网，导致测试失败，就没办法部署新构建的程序。 
为了修正这个问题，标准库包含一个名为 httptest 的包，它让开发人员可以模仿基于
HTTP 的网络调用。模仿（mocking）是一个很常用的技术手段，用来在运行测试时模拟访问不
可用的资源。包 httptest 可以让你能够模仿互联网资源的请求和响应。在我们的单元测试中，
通过模仿 http.Get 的响应，我们可以解决在图 9-4 中遇到的问题，保证在没有网络的时候，我
们的测试也不会失败，依旧可以验证我们的 http.Get 调用正常工作，并且可以处理预期的响
应。让我们看一下基础单元测试，并将其改为模仿调用 goinggo.net 网站的 RSS 列表，如代码清
单 9-12 所示。 
代码清单 9-12  listing12_test.go：第 01 行到第 41 行 
01 // 这个示例程序展示如何内部模仿 HTTP GET 调用 
02 // 与本书之前的例子有些差别 
03 package listing12 
04 
05 import ( 
06 
 "encoding/xml" 
07 
 "fmt" 
08 
 "net/http" 
09 
 "net/http/httptest" 
10 
 "testing" 
11 ) 
12 
13 const checkMark = "\u2713" 
14 const ballotX = "\u2717" 
15 
16 // feed 模仿了我们期望接收的 XML 文档 
17 var feed = ` 
18  
19  
20 
 Going Go Programming 
21 
 Golang : https://github.com/goinggo 
22 
 http://www.goinggo.net/ 
23 
24 
 Sun, 15 Mar 2015 15:04:00 +0000 
25 
 Object Oriented Programming Mechanics 
26 
 Go is an object oriented language. 
27 
 http://www.goinggo.net/2015/03/object-oriented 
28 
29  
30 ` 
31 
32 // mockServer 返回用来处理请求的服务器的指针 
33 func mockServer() *httptest.Server { 
34 
 f := func(w http.ResponseWriter, r *http.Request) { 
35 
 w.WriteHeader(200) 
36 
 w.Header().Set("Content-Type", "application/xml") 
37 
 fmt.Fprintln(w, feed) 
38 
 } 
39 
40 
 return httptest.NewServer(http.HandlerFunc(f)) 
41 } 
代码清单 9-12 展示了如何模仿对 goinggo.net 网站的调用，来模拟下载 RSS 列表。在第 17
行中，声明了包级变量 feed，并初始化为模仿服务器返回的 RSS XML 文档的字符串。这是实
际 RSS 文档的一小段，足以完成我们的测试。在第 33 行中，我们声明了一个名为 mockServer
的函数，这个函数利用 httptest 包内的支持来模拟对互联网上真实服务器的调用，如代码清
单 9-13 所示。 
代码清单 9-13  listing12_test.go：第 32 行到第 41 行 
32 // mockServer 返回用来处理调用的服务器的指针 
33 func mockServer() *httptest.Server { 
34 
 f := func(w http.ResponseWriter, r *http.Request) { 
35 
 w.WriteHeader(200) 
36 
 w.Header().Set("Content-Type", "application/xml") 
37 
 fmt.Fprintln(w, feed) 
38 
 } 
39 
40 
 return httptest.NewServer(http.HandlerFunc(f)) 
41 } 
代码清单 9-13 中声明的 mockServer 函数，返回一个指向 httptest.Server 类型的指
针。这个 httptest.Server 的值是整个模仿服务的关键。函数的代码一开始声明了一个匿名
函数，其签名符合 http.HandlerFunc 函数类型，如代码清单 9-14 所示。
代码清单 9-14  golang.org/pkg/net/http/#HandlerFunc 
type HandlerFunc func(ResponseWriter, *Request) 
HandlerFunc 类型是一个适配器，允许常规函数作为 HTTP 的处理函数使用。如果函数 f 具有合适的签名， 
HandlerFunc(f)就是一个处理 HTTP 请求的 Handler 对象，内部通过调用 f 处理请求 
遵守这个签名，让匿名函数成了处理函数。一旦声明了这个处理函数，第 40 行就会使用这
个匿名函数作为参数来调用 httptest.NewServer 函数，创建我们的模仿服务器。之后在第
40 行，通过指针返回这个模仿服务器。 
我们可以通过 http.Get 调用来使用这个模仿服务器，用来模拟对 goinggo.net 网络服务器
的请求。当进行 http.Get 调用时，实际执行的是处理函数，并用处理函数模仿对网络服务器
的请求和响应。在第 35 行，处理函数首先设置状态码，之后在第 36 行，设置返回内容的类型
Content-Type，最后，在第 37 行，使用包含 XML 内容的字符串 feed 作为响应数据，返回
给调用者。 
现在，让我们看一下模仿服务器与基础单元测试是怎么整合在一起的，以及如何将
http.Get 请求发送到模仿服务器，如代码清单 9-15 所示。
代码清单 9-15  listing12_test.go：第 43 行到第 74 行 
43 // TestDownload 确认 http 包的 Get 函数可以下载内容 
44 // 并且内容可以被正确地反序列化并关闭 
45 func TestDownload(t *testing.T) { 
46 
 statusCode := http.StatusOK 
47 
48 
 server := mockServer() 
49 
 defer server.Close() 
50 
51 
 t.Log("Given the need to test downloading content.") 
52 
 { 
53 
 t.Logf("\tWhen checking \"%s\" for status code \"%d\"", 
54 
 server.URL, statusCode) 
55 
 { 
56 
 resp, err := http.Get(server.URL) 
57 
 if err != nil { 
58 
 t.Fatal("\t\tShould be able to make the Get call.", 
59 
 ballotX, err) 
60 
 } 
61 
 t.Log("\t\tShould be able to make the Get call.", 
62 
 checkMark) 
63 
64 
 defer resp.Body.Close() 
65 
66 
 if resp.StatusCode != statusCode { 
67 
 t.Fatalf("\t\tShould receive a \"%d\" status. %v %v", 
68 
 statusCode, ballotX, resp.StatusCode) 
69 
 } 
70 
 t.Logf("\t\tShould receive a \"%d\" status. %v", 
71 
 statusCode, checkMark) 
72 
 } 
73 
 } 
74 } 
在代码清单 9-15 中再次看到了 TestDownload 函数，不过这次它在请求模仿服务器。在第
48 行和第 49 行，调用 mockServer 函数生成模仿服务器，并安排在测试函数返回时执行服务
器的 Close 方法。之后，除了代码清单 9-16 所示的这一行代码，这段测试代码看上去和基础单
元测试的代码一模一样。 
代码清单 9-16  listing12_test.go：第 56 行 
56 
 resp, err := http.Get(server.URL) 
这次由 httptest.Server 值提供了请求的 URL。当我们使用由模仿服务器提供的 URL
时，http.Get 调用依旧会按我们预期的方式运行。http.Get 方法调用时并不知道我们的调用
是否经过互联网。这次调用最终会执行，并且我们自己的处理函数最终被执行，返回我们预先准
备好的 XML 文档和状态码 http.StatusOK。
在图 9-5 里，如果在没有互联网连接的时候运行测试，可以看到测试依旧可以运行并通过。
这张图展示了程序是如何再次通过测试的。如果仔细看用于调用的 URL，会发现这个 URL 使用
了 localhost 作为地址，端口是 52065。这个端口号每次运行测试时都会改变。包 http 与包
httptest 和模仿服务器结合在一起，知道如何通过 URL 路由到我们自己的处理函数。现在，
我们可以在没有触碰实际服务器的情况下，测试请求 goinggo.net 的 RSS 列表。 
图 9-5  没有互联网接入情况下测试成功 
9.1.4  测试服务端点 
服务端点（endpoint）是指与服务宿主信息无关，用来分辨某个服务的地址，一般是不包含