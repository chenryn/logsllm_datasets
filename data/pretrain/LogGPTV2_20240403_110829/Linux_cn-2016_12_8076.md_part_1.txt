---
author: Phil Zona
category: 系统运维
comments_data:
- date: '2016-12-30 09:44:54'
  message: "自动安全更新有风险，一旦某个包有问题，或者和现有环境有冲突，全部同时更新那会就麻烦了。稳妥的是逐批更新。\r\n添加一个受限用户都是老生长谈了。\r\nssh 用密钥登录，其前提是存放私钥的系统是安全可信的。还有私钥上的密码短语，设置也是需要仔细考虑。\r\nnetstat 命令已经过时，RPM
    系默认是不安装该命令所属包。"
  postip: 118.122.120.11
  username: 来自四川成都的 Chrome 55.0|GNU/Linux 用户
- date: '2016-12-30 09:52:48'
  message: "我觉得一般用 ssh 登录的都是承载重要业务的服务器，用 ssh 客户端提供自身公钥给服务器，感觉有些本末倒置，服务器方面难以鉴定该电脑是否处于可信状态。我以为应该采用集中登录，并向明确要登录指定服务器的电脑颁发证书。必要时，追加双重验证。\r\n一旦发现某台电脑存在可疑行为，立即终止对应用户的访问凭据，同时吊销该客户端电脑的证书，双管齐下难阻断可疑访问。"
  postip: 118.122.120.11
  username: 来自四川成都的 Chrome 55.0|GNU/Linux 用户
- date: '2016-12-30 10:02:22'
  message: 很不错的一篇文章，感谢。
  postip: 101.81.1.7
  username: 来自上海的 Chrome 55.0|Mac 10.11 用户
count:
  commentnum: 3
  favtimes: 5
  likes: 0
  sharetimes: 0
  viewnum: 13506
date: '2016-12-30 07:56:00'
editorchoice: true
excerpt: 现在让我们强化你的服务器以防止未授权访问。
fromurl: https://www.linode.com/docs/security/securing-your-server/
id: 8076
islctt: true
largepic: /data/attachment/album/201612/30/001143d53jv5fzqcpx3338.jpg
permalink: /article-8076-1.html
pic: /data/attachment/album/201612/30/001143d53jv5fzqcpx3338.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 8087
- displayorder: 1
  raid: 8098
reviewer: ''
selector: ''
summary: 现在让我们强化你的服务器以防止未授权访问。
tags:
- 服务器
- 安全
- 防火墙
thumb: false
title: Linux 服务器安全简明指南
titlepic: true
translator: geekpi
updated: '2016-12-30 07:56:00'
---
现在让我们强化你的服务器以防止未授权访问。
![](/data/attachment/album/201612/30/001143d53jv5fzqcpx3338.jpg)
### 经常升级系统
保持最新的软件是你可以在任何操作系统上采取的最大的安全预防措施。软件更新的范围从关键漏洞补丁到小 bug 的修复，许多软件漏洞实际上是在它们被公开的时候得到修补的。
### 自动安全更新
有一些用于服务器上自动更新的参数。[Fedora 的 Wiki](https://fedoraproject.org/wiki/AutoUpdates#Why_use_Automatic_updates.3F) 上有一篇很棒的剖析自动更新的利弊的文章，但是如果你把它限制到安全更新上，自动更新的风险将是最小的。
自动更新的可行性必须你自己判断，因为它归结为**你**在你的服务器上做什么。请记住，自动更新仅适用于来自仓库的包，而不是自行编译的程序。你可能会发现一个复制了生产服务器的测试环境是很有必要的。可以在部署到生产环境之前，在测试环境里面更新来检查问题。
* CentOS 使用 [yum-cron](https://fedoraproject.org/wiki/AutoUpdates#Fedora_21_or_earlier_versions) 进行自动更新。
* Debian 和 Ubuntu 使用 [无人值守升级](https://help.ubuntu.com/lts/serverguide/automatic-updates.html)。
* Fedora 使用 [dnf-automatic](https://dnf.readthedocs.org/en/latest/automatic.html)。
### 添加一个受限用户账户
到目前为止，你已经作为 `root` 用户访问了你的服务器，它有无限制的权限，可以执行**任何**命令 - 甚至可能意外中断你的服务器。 我们建议创建一个受限用户帐户，并始终使用它。 管理任务应该使用 `sudo` 来完成，它可以临时提升受限用户的权限，以便管理你的服务器。
> 
> 不是所有的 Linux 发行版都在系统上默认包含 `sudo`，但大多数都在其软件包仓库中有 `sudo`。 如果得到这样的输出 `sudo：command not found`，请在继续之前安装 `sudo`。
> 
> 
> 
要添加新用户，首先通过 SSH 登录到你的服务器。
#### CentOS / Fedora
1、 创建用户，用你想要的名字替换 `example_user`，并分配一个密码：
```
useradd example_user && passwd example_user
```
2、 将用户添加到具有 sudo 权限的 `wheel` 组：
```
usermod -aG wheel example_user
```
#### Ubuntu
1、 创建用户，用你想要的名字替换 `example_user`。你将被要求输入用户密码：
```
adduser example_user
```
2、 添加用户到 `sudo` 组，这样你就有管理员权限了：
```
adduser example_user sudo
```
#### Debian
1、 Debian 默认的包中没有 `sudo`， 使用 `apt-get` 来安装：
```
apt-get install sudo
```
2、 创建用户，用你想要的名字替换 `example_user`。你将被要求输入用户密码：
```
adduser example_user
```
3、 添加用户到 `sudo` 组，这样你就有管理员权限了：
```
adduser example_user sudo
```
创建完有限权限的用户后，断开你的服务器连接：
```
exit
```
重新用你的新用户登录。用你的用户名代替 `example_user`，用你的服务器 IP 地址代替例子中的 IP 地址：
```
ssh PI:EMAIL
```
现在你可以用你的新用户帐户管理你的服务器，而不是 `root`。 几乎所有超级用户命令都可以用 `sudo`（例如：`sudo iptables -L -nv`）来执行，这些命令将被记录到 `/var/log/auth.log` 中。
### 加固 SSH 访问
默认情况下，密码认证用于通过 SSH 连接到您的服务器。加密密钥对更加安全，因为它用私钥代替了密码，这通常更难以暴力破解。在本节中，我们将创建一个密钥对，并将服务器配置为不接受 SSH 密码登录。
#### 创建验证密钥对
1、这是在你本机上完成的，**不是**在你的服务器上，这里将创建一个 4096 位的 RSA 密钥对。在创建过程中，您可以选择使用密码加密私钥。这意味着它不能在没有输入密码的情况下使用，除非将密码保存到本机桌面的密钥管理器中。我们建议您使用带有密码的密钥对，但如果你不想使用密码，则可以将此字段留空。
**Linux / OS X**
> 
> 如果你已经创建了 RSA 密钥对，则这个命令将会覆盖它，这可能会导致你不能访问其它的操作系统。如果你已创建过密钥对，请跳过此步骤。要检查现有的密钥，请运行 `ls〜/ .ssh / id_rsa *`。
> 
> 
> 
```
ssh-keygen -b 4096
```
在输入密码之前，按下 **回车**使用 `/home/your_username/.ssh` 中的默认名称 `id_rsa` 和 `id_rsa.pub`。
**Windows**
这可以使用 PuTTY 完成，在我们指南中已有描述：[使用 SSH 公钥验证](https://www.linode.com/docs/security/use-public-key-authentication-with-ssh#windows-operating-system)。
2、将公钥上传到您的服务器上。 将 `example_user` 替换为你用来管理服务器的用户名称，将 `203.0.113.10` 替换为你的服务器的 IP 地址。
**Linux**
在本机上：
```
ssh-copy-id PI:EMAIL
```
**OS X**
在你的服务器上（用你的权限受限用户登录）：
```
mkdir -p ~/.ssh && sudo chmod -R 700 ~/.ssh/
```
在本机上：
```
scp ~/.ssh/id_rsa.pub PI:EMAIL:~/.ssh/authorized_keys
```
> 
> 如果相对于 `scp` 你更喜欢 `ssh-copy-id` 的话，那么它也可以在 [Homebrew](http://brew.sh/) 中找到。使用 `brew install ssh-copy-id` 安装。
> 
> 
> 
**Windows**
* **选择 1**：使用 [WinSCP](http://winscp.net/) 来完成。 在登录窗口中，输入你的服务器的 IP 地址作为主机名，以及非 root 的用户名和密码。单击“登录”连接。
一旦 WinSCP 连接后，你会看到两个主要部分。 左边显示本机上的文件，右边显示服务区上的文件。 使用左侧的文件浏览器，导航到你已保存公钥的文件，选择公钥文件，然后点击上面工具栏中的“上传”。
系统会提示你输入要将文件放在服务器上的路径。 将文件上传到 `/home/example_user/.ssh /authorized_keys`，用你的用户名替换 `example_user`。