gpk := (param, mpk, tpk)
(state, uid0, uid1) ←$ A0
if {uid0, uid1} ∩ C (cid:54)= ∅ then return 0
∗
b ←$ {0, 1}; (info
, upk[uidb]) ←$ AddU(uidb);
(usk[uid1−b], upk[uid1−b]) ←$ GS.UKGen(1λ)
∗
τ
:= τcurrent; H∗
:= {uid0, uid1}
Sign,Trace,UpdateGroup
(gpk, info)
(cid:111)
(cid:111)
(cid:110)
(cid:110)
GS(1λ)
Leave − PrivacyA
param ←$ GS.Setup(1λ)
(msk, mpk, info, tsk, tpk) ←$ (cid:104)GS.KGenM(param), GS.KGenT (param)(cid:105)
gpk := (param, mpk, tpk)
(state, uid0, uid1) ←$ A0
if {uid0, uid1} ∩ H \ (C ∪ B) (cid:54)= {uid0, uid1} then return 0
b ←$ {0, 1}; H∗
info
d ←$ A1
∗
∗ ←$ GS.UpdateGroup(gpk, msk, infoτ∗ , uidb, reg)
:= {uid0, uid1}; decinv := true ; τ
∗
(state, info
AddU,RevealU,Sign,Trace,
UpdateGroup,Sign,Trace
UpdateGroup,PrivChallb,uid0 ,uid1,τ∗
:= τcurrent
AddU,RevealU,
(gpk, info)
(cid:111)
(cid:111)
(cid:110)
)
d ←$ A1
AddU,RevealU,Sign,
CrptU,SndToM,UpdateGroup,
Trace,PrivChallb,uid0,uid1,τ∗
∗
(state, info
, upk[uid0], upk[uid1])
return b = d
return b = d
Fig. 1. Join- and Leave-Privacy experiments.
A group signature scheme GS has join privacy if for all ppt adversaries A, there is a negligible
function negl(λ) such that
Advleave−privacy
A,GS
(λ) ≤ 1
2
+ negl(λ) .
Remark 1. Note that leave privacy as stated above only seems to ensure privacy, when a single
user leaves the group, however, the GS.UpdateGroup algorithm allows simultaneous membership
revocation for a whole set of users S. However, a simple hybrid argument should suﬃce to extend
the join privacy property from one revocation to many revocations.
4 Signatures with Flexible Public Key
In this section we ﬁrst recall the notion of signatures with ﬂexible public key (SFPK) introduced by
Backes et al. [6]. We then extend this primitive by a natural notion called canonical representatives
(or canonical form) and show a weaker anonymity deﬁnition that allows us to construct a more
eﬃcient scheme than ones presented in [6]. We use this scheme to eﬃciently instantiate our group
signature construction presented in Section 5
The basic idea behind signatures with ﬂexible public key is to divide the key space into equiva-
lence classes induced by a relation R. A signer can eﬃciently generate (sk, pk) ←$ SFPK.KeyGen(1λ)
and change her key pair to a diﬀerent representative of the same class. This can be done using
a random coin r ←$ coin and two algorithms: pk
(cid:48) ←$ SFPK.ChgPK(pk, r) for the public key and
(cid:48) ←$ SFPK.ChgSK(sk, r) for the secret key. The randomized secret key can be used to sign a message
sk
Sig ←$ SFPK.Sign(sk, m), such that the signature can be veriﬁed by running SFPK.Verify(pk
(cid:48)
, m, Sig).
The main feature is class-hiding, which ensures that without a trapdoor it is hard to distinguish if
two public keys are related, i.e. in the same equivalence class. However, given the trapdoor one can
(cid:48)
run the SFPK.ChkRep(δ, pk
is in relation to the public key for which the
trapdoor was generated using trapdoor key generation algorithm (sk, pk, δ) ←$ SFPK.TKeyGen(1λ).
We will deﬁne this scheme in the multi-user setting, i.e. with a setup algorithm SFPK.CRSGen(1λ)
that outputs a common reference string ρ. We only consider a scenario in which this setup has to be
executed by a trusted party in order for the scheme to be unforgeable. Note that this means that
(cid:48)
) algorithm to check if pk
15
the secrets used to generate the ρ can be used to forge signatures. This kind of trapdoor δρ was
not speciﬁed in [6], but we will use it in the security proof of our group signature scheme. In other
words, this means there is an alternative signing algorithm SFPK.Sign(δρ, pk, m), which outputs valid
signatures for the relation class [pk]R, without knowledge of the corresponding secret key sk.
Deﬁnition 18 (Signature with Flexible Public Key). A signature scheme with ﬂexible public
key SFPK is a set of P P T algorithms such that:
SFPK.CRSGen(1λ) takes as input a security parameters 1λ and outputs a trapdoor δρ and a common
SFPK.KeyGen(1λ, ω): takes as input a security parameter 1λ, random coins ω ∈ coin and outputs a
reference string ρ, which is an implicit input for all the algorithms.
pair (sk, pk) of secret and public keys,
coins ω ∈ coin and outputs a pair (sk, pk) of secret and public keys, and a trapdoor δ.
SFPK.TKeyGen(1λ, ω): a trapdoor key generation that takes as input a security parameter 1λ, random
SFPK.Sign(sk, m): takes as input a message m ∈ {0, 1}∗ and a signing key sk, and outputs a signature
(cid:48)
SFPK.ChkRep(δ, pk): takes as input a trapdoor δ for some equivalence class [pk
Sig,
pk, the algorithm outputs 1 if pk ∈ [pk
(cid:48)
]R and 0 otherwise,
]R and public key
SFPK.ChgPK(pk, r): on input a representative public key pk of an equivalence class [pk]R and random
(cid:48)
coins r, this algorithm returns a diﬀerent representative pk
, where pk
(cid:48) ∈ [pk]R.
SFPK.ChgSK(sk, r): on input a secret key sk and random coins r, this algorithm returns an updated
(cid:48)
secret key sk
.
SFPK.Verify(pk, m, Sig): takes as input a message m, signature Sig, public veriﬁcation key pk and
outputs 1 if the signature is valid and 0 otherwise.
Deﬁnition 19 (Correctness). We say that a SFPK scheme is correct if for all 1λ ∈ N, all random
coins ω, r ∈ coin the following conditions hold:
1. The output distribution of SFPK.KeyGen and SFPK.TKeyGen is identical.
2. For all key pairs (sk, pk) ←$ SFPK.KeyGen(1λ, ω) and all messages m we have SFPK.Verify(pk, m,
, m)) = 1, where SFPK.ChgPK(pk, r) =
(cid:48)
SFPK.Sign(sk, m)) = 1 and SFPK.Verify(pk
(cid:48)
pk
and SFPK.ChgSK(sk, r) = sk
.
(cid:48)
(cid:48)
, m, SFPK.Sign(sk
3. For all (sk, pk, δ) ←$ SFPK.TKeyGen(1λ, ω) and all pk
(cid:48)
(cid:48)
we have SFPK.ChkRep(δ, pk
) = 1 if and
only if pk
(cid:48) ∈ [pk]R.
Deﬁnition 20 (Class-hiding). For scheme SFPK with relation R and adversary A we deﬁne the
following experiment:
A
SFPK,R(λ)
C-H
ω0, ω1 ←$ coin
(ski, pki) ←$ SFPK.KeyGen(1λ, ωi) for i ∈ {0, 1}
m ←$ A(ω0, ω1); b ←$ {0, 1}; r ←$ coin
sk
Sig ←$ SFPK.Sign(sk
, m)
ˆb ←$ A(ω0, ω1, m, Sig, pk
(cid:48)
return b = ˆb
(cid:48) ←$ SFPK.ChgSK(skb, r); pk
)
(cid:48)
(cid:48) ←$ SFPK.ChgPK(pkb, r)
16
An SFPK is class-hiding if for all P P T adversaries A, its advantage in the above experiment is
negligible:
Advc-hA,SFPK(λ) =
C-H
A
SFPK,R(λ) = 1
(cid:104)
(cid:12)(cid:12)(cid:12)(cid:12)Pr
(cid:105) − 1
2
(cid:12)(cid:12)(cid:12)(cid:12) = negl(λ) .
Deﬁnition 21 (Strong Existential Unforgeability under Flexible Public Key). For scheme
SFPK with relation R and adversary A we deﬁne the following experiment:
A
SFPK,R(λ)
EUF-CMA
ω ←$ coin
(sk, pk, δ) ←$ SFPK.TKeyGen(1λ, ω); Q := ∅
∗
, m
(cid:48)
(pk
∗
, Sig
∗
return (m
) ←$ AO1(sk,·),O2(sk,·,·)(pk, δ)
, Sig
) (cid:54)∈ Q ∧
∗
) = 1 ∧
(cid:48)
SFPK.ChkRep(δ, pk
∗
, Sig
(cid:48)
SFPK.Verify(pk
, m
∗
) = 1
O1(sk, m)
Sig ←$ SFPK.Sign(sk, m)
Q := Q ∪{(m, Sig)}
return Sig
O2(sk, m, r)
(cid:48) ←$ SFPK.ChgSK(sk, r)
, m)
sk
Sig ←$ SFPK.Sign(sk
(cid:48)
Q := Q ∪{(m, Sig)}
return Sig
A SFPK is existentially unforgeable with ﬂexible public key under chosen message attacks if for all
P P T adversaries A the advantage in the above experiment is negligible:
(cid:104)
(cid:105)
Advseuf−cma
A,SFPK (λ) = Pr
EUF − CMA
A
SFPK(λ) = 1
= negl(λ) .
Backes et al. introduced also a optional property called key recovery, which allows a user to
compute a secret key that corresponds to a diﬀerent representative of the equivalence of the users
public key. A straightforward application of this property is that the SFPK.ChgPK algorithm can
be executed by a third party on the users secret key and the user can compute the corresponding
secret key without the knowledge of the randomization r. More formally.
Deﬁnition 22 (Key Recovery Property). A SFPK has recoverable signing keys if there exists an
eﬃcient algorithm SFPK.Recover such that for all security parameters 1λ ∈ N, random coins ω, r and
all (sk, pk, δ) ←$ SFPK.TKeyGen(1λ, ω) and pk
(cid:48) ←$ SFPK.ChgPK(pk, r) we have SFPK.ChgSK(sk, r) =
(cid:48)
SFPK.Recover(sk, δ, pk
).
New Deﬁnitions. The class-hiding deﬁnition introduced by Backes et al. implements the strongest
corruption model, i.e. the adversary is given the random coins used by the signer to generate her
public key and is still not able to distinguish whether a randomized public key is from the same
equivalence class as the signer’s public key. As shown in [6], this strong deﬁnition allows to construct
ring signatures but requires a technique called invertible sampling introduced by Damg˚ard and
Nielsen [22]. In many cases we do not require such a strong corruption model and assume that those
random coins are destroyed after the user/signer generates her secret key. This slightly weaker model
is for example used in the security of group signatures.
On the other hand, the original deﬁnition only allows the adversary to see the randomized public
(cid:48)
key pk
after it speciﬁes the message m in the ﬁrst phase. This does not model scenarios, where the
signer uses the same representative for multiple messages. An easy approach to allow the adversary
for adaptive signature queries is to give it a signing oracle. We address these issues by introducing
adaptive class-hiding with key corruption.
17
Deﬁnition 23 (Adaptive Class-hiding with Key Corruption). For scheme SFPK with relation
R and adversary A we deﬁne the following experiment:
A
SFPK,R(λ)
adaptC-H
ω0, ω1 ←$ coin
(ski, pki) ←$ SFPK.KeyGen(1λ, ωi) for i ∈ {0, 1}
b ←$ {0, 1}; r ←$ coin
(cid:48) ←$ SFPK.ChgSK(skb, r); pk
sk
ˆb ←$ ASFPK.Sign(sk(cid:48),·)((sk0, pk0), (sk1, pk1), pk
(cid:48)
return b = ˆb
)
(cid:48) ←$ SFPK.ChgPK(pkb, r)
A SFPK is adaptively class-hiding with key corruption if for all P P T adversaries A, its advantage
in the above experiment is negligible:
(cid:104)
(cid:12)(cid:12)(cid:12)(cid:12)Pr
(cid:105) − 1
2