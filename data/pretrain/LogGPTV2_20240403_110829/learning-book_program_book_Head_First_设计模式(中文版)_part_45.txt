System, out.println (*--
Iterator iterator-menuComponents.iterator(）;
看吧！我们用了进代器。用它进历
while(iterator.hasNext())(
所有莱单组件…进历过程中可
MenuComponent menuComponent=
能遥到其他菜单，或老是遥到菜
(MenuComponent)iterator.next();
menuComponent.print();
单项。由子莱单和莱单项都实现了
ptintO.那我们只要调用printO即可。
请注意：在迹历期间，如果遥到另一个莱单对象，它的
ptint（）方法会开始另一个遍历，依次类推。
你现在的位置
363
---
## Page 400
测试菜单组合
测试前的准备工作
差不多可以测试了，但是在开始测试之前，我们必须更新女招待的代码一毕竞她是菜单
的主要客户：
好！女招待的代码真的变得很筒单。现在我们只
public class Waitress {
要将最项层的莱单组件交给她就可以了，最项展
MenuComponent allMenus;
莱单包含其他所有莱单，我们称之为alIMenus。
public Waitress (MenuComponent allMenus) (
this.allMenus = allMenus;
处只需爱调用最项展莱单的print(）.就可以打
印整个莱单层次，包括所有莱单及所有莱单
public void printMenu(){
allMenus.print ();
项。
这个女招待会变得很快乐。
好了，在开始测试前，还剩下最后一件事。让我们了解一下，在运行时菜单组合是什么
样的：
最项层的莱单，拥有所有的
每个莱单和莱单项都实现了
莱单和莱单项。
莱单组件接口。
组合
组合
√
每个菜单都拥有一
些项
合
·或是项或是算
7
7
叶节点
17
叶节点
叶节点
叶节点
364
第9章
---
## Page 401
选代器与组合模式
编写测试程序·····
好了，现在要写一个测试程序。和以前的版本不同，我们这个版本要在测试
程序中处理所有菜单的创建。我们可以请每位厨师交出他的新菜单，但是让
我们先将这一切测试完毕。代码如下：
public class MenuTestDrive {
public static void main (String args[]) {
先创建所有的莱单
MenuComponent pancakeHouseMenu =
new Menu("PANCAKE HOUSE MENU","Breakfast") ;
对象。
MenuComponent dinerMenu =
new Menu("DINER MENU"，"Lunch");
我们需要一个最项居的
MenuComponent cafeMenu =
莱单，将它称为alMenus。
new Menu("CAFE MENU","Dinner");
MenuComponent dessertMenu =
allMenus.add (pancakeHouseMenu) ;
我们使用组合的add（）方法，将每个莱单都加
allMenus.add (dinerMenu) ;
入到项层莱单alLMenus中。
allMenus.add(cafeMenu) ;
现在我们需要加上所有的莱单项，
//在这里加人菜单项
这是一个例子，至于其他的莱单
项，请看究整的源码。
dinerMenu.add (new MenuItem(
"Pasta",
"Spaghetti with Marinara Sauce, and a slice of sourdough bread",
true,
3.89));
然后我们也在菜单中加入另一个莱单。
由于莱单和莱单项都是MenuComponent，
dinerMenu.add (dessertMenu) ;
所以策单可以顾利地被加入。
dessertMenu.add (new MenuItem (
"Apple Pie",
"Apple pie with a flakey crust, topped with vanilla ice cream",
true,
1.59));
在甜点莱单上加了举
果派.…
//在这里加人更多菜单项
Waitress waitress = new Waitress(allMenus) ;
一旦我们将整个莱单尾次构造完毕.
waitress.printMenu () ;
>
把它整个交给女招待，你金发现，女
招待要将整份莱单打印出来，前直就
是易如反掌。
你现在的位置，
365
---
## Page 402
组合责任
执行结果····
请注意：这份执行结果基于完整的源码。
java MenuTestDrive
ALL MENUS，All menus combined
我们的菜单都在这几…·….只要调用最
PANCAKE HOUSE MENU,Breakfast
顶居莱单的print（）就可以打印出一
切
K&B's Pancake Breakfast（v)，2.99
--Pancakes with scrambled eggs,and toast
Regular Pancake Breakfast,2.99
Blueberry Pancakes（v),3.49
-Pancakes made with fresh blueberries,and blueberry syrup
Waffles（v),3.59
--Waffles,with your choice of blueberries or strawberries
DINER MENU,Lunch
Vegetarian BLT（v)，2.99
--（Fakin'）Bacon with 1ettuce 6 tomato on whole wheat
BLT，2.99
--Bacon with lettuce& tomatoon whole wheat
Soup of the day，3.29
-Abowl of the soup ofthe day,with a side ofpotato salad
Hotdog,3.05
-A hot dog,with saurkraut，relish，onions，topped with cheese
Steamed Veggies and Brown Rice(v),3.99
Steamed vegetables over brown rice
Pasta（v),3.89
Spaghetti with Marinara Sauce,and a slice of sourdough bread
当打印所有餐
DESSERT MENU,Dessert of course!
厅莱单组件时
ApplePie（v)，1.59
新的甜点莱单
-Apple pie with a flakey crust,topped with vanilla ice cream
Cheesecake(v),1.99
也一起打印出
--Creamy New York cheesecake,with a chocolate graham crust
来
Sorbet（v),i.89
--A scoop ofraspberry anda scoop oflime
CAFE MENU,Dinner
Veggie Burger and Air Fries（v),3.99
--Veggie burger on a whole wheat bun，lettuce,tomato,and fries
Soup of the day,3.69
--A cup of the soup of the day,with a side salad
Burrito（v),4.29
--A large burrito,with whole pinto beans,salsa,guacamole
366
第9章
---
## Page 403
选代器与组合模式
到底怎么回事？首先你告诉我
们“一个类，一个责任”，现在却给我
们一个让一个类有两个责任的模式。组合模式
不但要管理层次结构，而且还要执行菜单
的操作。
你的观察有几分真实性。我们可以这么说，组合模式以单一责任设
计原则换取透明性（transparency）。什么是透明性？通过让组件的
接口同时包含一些管理子节点和叶节点的操作，客户就可以将组合
和叶节点一视同仁。也就是说，一个元素究竞是组合还是叶节点，
对客户是透明的。
现在，我们在MenuComponent类中同时具有两种类型的操作。因为
客户有机会对一个元素做一些不恰当或是没有意义的操作（例如试
设计上的执择：我们当然也可以采用另一种方向的设计，将责任区
分开来放在不同的接口中。这么一来，设计上就比较安全，但我们
也因此失去了透明性，客户的代码将必须用条件语句和instanceof操
作符处理不同类型的节点。
所以，回到你的问题，这是一个很典型的折衷案例。尽管我们受到
设计原则的指导，但是，我们总是需要观察某原则对我们的设计所
造成的影响。有时候，我们会故意做一些看似违反原则的事情。然
而，在某些例子中，这是观点的问题；比方说，让管理孩子的操作
（例如addO、removeO、getChildO）出现在叶节点中，似乎很不恰当，
但是换个视角来看，你可以把叶节点视为没有孩子的节点。
你现在的位置
367
---
## Page 404
闪回到选代器
闪回到送代器
几页前，我们答应过会告诉你怎样用组合来使用选代器。我们其实已经在
print(O方法内部的实现中使用了选代器，除此之外，如果女招待需要，我们
也能让她使用选代器遍历整个组合。比方说，女招待可能想要游走整个菜
单，挑出素食项。
想要实现一个组合选代器，让我们为每个组件都加上createIteratorO方法。从
抽象的MenuComponent类开始下手：
MenuComponent
我们在MenuComponent中加入一个
getName)
(juogdosegje6
createJteratoz（）方法。这意味著，
getPrioe[)
每个莱单和莱单项都必须实现这个
isVegetarian()
print)
方法。也意味着，对一个组合调用
add(Component)
create)terator（）方法，将金应用于
emove(Component)
getChid(int)
该组合的所有孩子。
createlterator)
这里使用一个新的，被称为
现在我们需要在菜单和菜单项类中实现这个方法：
CompositeJtetator的选代器。这个
选代器知道如何迹历任何组合。
public class Menu extends MenuComponent {
我们将目前组合的进代器传入它
//其他部分的代码不需要修改
的构造器。
public Iterator createIterator() {
return new CompositeIterator(menuComponents.iterator());
public class MenuItem extends MenuComponent {
//其他部分的代码不需要修改
现在轮到莱单项…
天呀！什是NullJtetator？
public Iterator createIterator(){
return new NullIterator () ;
再过两页你就会知道了。
368
第9章
---
## Page 405
选代器与组合模式
组合迭代器
这个CompositeIterator是一个不可小的选代器。它的工作是遍历组件内的
菜单项，而且确保所有的子菜单（以及子子菜单）都被包括进来。
代码是下面这样的。请注意，代码虽然不多，但是不见得容易理解。
注意：
跟着我默念“递归是我的朋友，递归是我的朋友……”
当心，
跟所有的选代器一样，我们实现了java
前面是
xtil.Sterator接。
import java.util. *;
递归区！
public class CompositeIterator implements Iterator (
将我们要进历的项居组合的选代器
Stack stack = new Stack();
传入。我们把它抛进一个堆核数据
结构中。
public CompositeIterator(Iterator iterator){
stack.push(iterator) ;
好了，当客户想要取得下一
个元意的时候，我们先调用
public Object next()(
hasNext(）来确定是否还有下
if (hasNext()){
一个。
Iterator iterator = (Iterator) stack.peek();
MenuComponent component =(MenuComponent） iterator.next();
if (component instanceof Menu）{
stack.push(component.createIterator());
如果还有下一个元素，我们就
从惟核中取出日前的选代器
return component;
V
然后取得它的下一个元素。
}else {
return nul1;
如果元素是一个菜单，我们有了另一个需要被包含
进遍历中的组合，所以我们将它毛进堆栈中。不管
public boolean hasNext (){
是不是莱单，我们都返回该组件。
if (stack.empty()){
return false;
想要知道是否还有下一个元素，我
}else{
们检查惟核是否被清空：如果已经
Iterator iterator = (Iterator) stack.peek();
if (!iterator.hasNext()){
空了，就表示没有下一个元素了。
stack.pop() ;
return hasNext ();
否则，我们就从惟核的项层中取出
}else{
送代器，看看是否还有下一个元素。
return true;
否则，表示还有下一个元素
如果它没有元素，我们将它弹出惟
我们返回trwe。
核，然后递归地调用hasNext(）。
public void remove()(
throw new UnsupportedOperationException();
我们不支持删除，这
里只有遍历。
上
你现在的位置
369
---
## Page 406
内部与外部
真是不可小龈的代码…·…究竞
为什么逸历组合好像比以前为
MenuComponent类的print(）写过
的逸历代码复杂？
在我们写MenuComponent类的printO方法的时
候，我们利用了一个选代器来遍历组件内的每
个项。如果遇到的是菜单（而不是菜单项），
我们就会递归地调用print(方法处理它。换句
话说，MenuComponent是在“内部”自行处理
遍历。
但是在上页的代码中，我们实现的是一个“外
部”的选代器，所以有许多需要追踪的事情。
外部选代器必须维护它在遍历中的位置，以便
外部客户可以通过调用hasNext(和next(来驱
动遍历。在这个例子中，我们的代码也必须维
护组合递归结构的位置。这也就是为什么当我
们在组合层次结构中上上下下时，使用堆栈来
维护我们的位置。
PDG
370
第9章
---
## Page 407
选代器与组合模式
RAIN
POWER
针对菜单和菜单项绘制一张图。然后假装你是CompositeIterator，而你的工作是处理对hasNextO和
nextO的调用。请在下面的代码执行过程中，追踪Compositelterator的足迹。
public void testCompositeIterator (MenuComponent component) {
CompositeIterator iterator = new CompositeIterator(component.iterator);
while (iterator.hasNext()) (
MenuComponent component = iterator.next();
你现在的位置
371
---
## Page 408
空选代器
空选代器
到底什么是空选代器（NullIterator）呢？这么说好了：菜单项内没什么可
以遍历的，对吧？那么我们要如何实现菜单项的createIterator(方法呢？有
两种选择：
请注象：这是空对象“设计模
选择一：
式”的另一个例子。
返回null
我们可以让createIteratorO方法返回null，但是如果这么做，我们的
客户代码就需要条件语句来判断返回值是否为null。
选择二：
返回一个迭代器，而这个选代器的hasNext（）永远返回false