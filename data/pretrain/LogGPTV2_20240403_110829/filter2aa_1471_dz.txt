In case you choose to execute the Spot Fixer, you will find that
the video stream will be interrupted, because the volume needs to
be unmounted.
Encrypted file system
Windows includes a full-volume encryption feature called Windows
BitLocker Drive Encryption. BitLocker encrypts and protects volumes from
offline attacks, but once a system is booted, BitLocker’s job is done. The
Encrypting File System (EFS) protects individual files and directories from
other authenticated users on a system. When choosing how to protect your
data, it is not an either/or choice between BitLocker and EFS; each provides
protection from specific—and nonoverlapping—threats. Together, BitLocker
and EFS provide a “defense in depth” for the data on your system.
The paradigm used by EFS is to encrypt files and directories using
symmetric encryption (a single key that is used for encrypting and decrypting
the file). The symmetric encryption key is then encrypted using asymmetric
encryption (one key for encryption—often referred to as the public key—and
a different key for decryption—often referred to as the private key) for each
user who is granted access to the file. The details and theory behind these
encryption methods is beyond the scope of this book; however, a good
primer is available at https://docs.microsoft.com/en-
us/windows/desktop/SecCrypto/cryptography-essentials.
EFS works with the Windows Cryptography Next Generation (CNG)
APIs, and thus may be configured to use any algorithm supported by (or
added to) CNG. By default, EFS will use the Advanced Encryption Standard
(AES) for symmetric encryption (256-bit key) and the Rivest-Shamir-
Adleman (RSA) public key algorithm for asymmetric encryption (2,048-bit
keys).
Users can encrypt files via Windows Explorer by opening a file’s
Properties dialog box, clicking Advanced, and then selecting the Encrypt
Contents To Secure Data option, as shown in Figure 11-68. (A file may be
encrypted or compressed, but not both.) Users can also encrypt files via a
command-line utility named Cipher (%SystemRoot%\System32\Cipher.exe)
or programmatically using Windows APIs such as EncryptFile and
AddUsersToEncryptedFile.
Figure 11-68 Encrypt files by using the Advanced Attributes dialog box.
Windows automatically encrypts files that reside in directories that are
designated as encrypted directories. When a file is encrypted, EFS generates
a random number for the file that EFS calls the file’s File Encryption Key
(FEK). EFS uses the FEK to encrypt the file’s contents using symmetric
encryption. EFS then encrypts the FEK using the user’s asymmetric public
key and stores the encrypted FEK in the $EFS alternate data stream for the
file. The source of the public key may be administratively specified to come
from an assigned X.509 certificate or a smartcard or can be randomly
generated (which would then be added to the user’s certificate store, which
can be viewed using the Certificate Manager
(%SystemRoot%\System32\Certmgr.msc). After EFS completes these steps,
the file is secure; other users can’t decrypt the data without the file’s
decrypted FEK, and they can’t decrypt the FEK without the user private key.
Symmetric encryption algorithms are typically very fast, which makes
them suitable for encrypting large amounts of data, such as file data.
However, symmetric encryption algorithms have a weakness: You can
bypass their security if you obtain the key. If multiple users want to share one
encrypted file protected only using symmetric encryption, each user would
require access to the file’s FEK. Leaving the FEK unencrypted would
obviously be a security problem, but encrypting the FEK once would require
all the users to share the same FEK decryption key—another potential
security problem.
Keeping the FEK secure is a difficult problem, which EFS addresses with
the public key–based half of its encryption architecture. Encrypting a file’s
FEK for individual users who access the file lets multiple users share an
encrypted file. EFS can encrypt a file’s FEK with each user’s public key and
can store each user’s encrypted FEK in the file’s $EFS data stream. Anyone
can access a user’s public key, but no one can use a public key to decrypt the
data that the public key encrypted. The only way users can decrypt a file is
with their private key, which the operating system must access. A user’s
private key decrypts the user’s encrypted copy of a file’s FEK. Public key–
based algorithms are usually slow, but EFS uses these algorithms only to
encrypt FEKs. Splitting key management between a publicly available key
and a private key makes key management a little easier than symmetric
encryption algorithms do and solves the dilemma of keeping the FEK secure.
Several components work together to make EFS work, as the diagram of
EFS architecture in Figure 11-69 shows. EFS support is merged into the
NTFS driver. Whenever NTFS encounters an encrypted file, NTFS executes
EFS functions that it contains. The EFS functions encrypt and decrypt file
data as applications access encrypted files. Although EFS stores an FEK with
a file’s data, users’ public keys encrypt the FEK. To encrypt or decrypt file
data, EFS must decrypt the file’s FEK with the aid of CNG key management
services that reside in user mode.
Figure 11-69 EFS architecture.
The Local Security Authority Subsystem (LSASS,
%SystemRoot%\System32\Lsass.exe) manages logon sessions but also hosts
the EFS service (Efssvc.dll). For example, when EFS needs to decrypt a FEK
to decrypt file data a user wants to access, NTFS sends a request to the EFS
service inside LSASS.
Encrypting a file for the first time
The NTFS driver calls its EFS helper functions when it encounters an
encrypted file. A file’s attributes record that the file is encrypted in the same
way that a file records that it’s compressed (discussed earlier in this chapter).
NTFS has specific interfaces for converting a file from nonencrypted to
encrypted form, but user-mode components primarily drive the process. As
described earlier, Windows lets you encrypt a file in two ways: by using the
cipher command-line utility or by checking the Encrypt Contents To
Secure Data check box in the Advanced Attributes dialog box for a file in
Windows Explorer. Both Windows Explorer and the cipher command rely
on the EncryptFile Windows API.
EFS stores only one block of information in an encrypted file, and that
block contains an entry for each user sharing the file. These entries are called
key entries, and EFS stores them in the data decryption field (DDF) portion
of the file’s EFS data. A collection of multiple key entries is called a key ring
because, as mentioned earlier, EFS lets multiple users share encrypted files.
Figure 11-70 shows a file’s EFS information format and key entry format.
EFS stores enough information in the first part of a key entry to precisely
describe a user’s public key. This data includes the user’s security ID (SID)
(note that the SID is not guaranteed to be present), the container name in
which the key is stored, the cryptographic provider name, and the
asymmetric key pair certificate hash. Only the asymmetric key pair
certificate hash is used by the decryption process. The second part of the key
entry contains an encrypted version of the FEK. EFS uses the CNG to
encrypt the FEK with the selected asymmetric encryption algorithm and the
user’s public key.
Figure 11-70 Format of EFS information and key entries.
EFS stores information about recovery key entries in a file’s data recovery
field (DRF). The format of DRF entries is identical to the format of DDF
entries. The DRF’s purpose is to let designated accounts, or recovery agents,
decrypt a user’s file when administrative authority must have access to the
user’s data. For example, suppose a company employee forgot his or her
logon password. An administrator can reset the user’s password, but without
recovery agents, no one can recover the user’s encrypted data.
Recovery agents are defined with the Encrypted Data Recovery Agents
security policy of the local computer or domain. This policy is available from
the Local Security Policy MMC snap-in, as shown in Figure 11-71. When
you use the Add Recovery Agent Wizard (by right-clicking Encrypting File
System and then clicking Add Data Recovery Agent), you can add recovery
agents and specify which private/public key pairs (designated by their
certificates) the recovery agents use for EFS recovery. Lsasrv (Local Security
Authority service, which is covered in Chapter 7 of Part 1) interprets the
recovery policy when it initializes and when it receives notification that the
recovery policy has changed. EFS creates a DRF key entry for each recovery
agent by using the cryptographic provider registered for EFS recovery.
Figure 11-71 Encrypted Data Recovery Agents group policy.
A user can create their own Data Recovery Agent (DRA) certificate by
using the cipher /r command. The generated private certificate file can be
imported by the Recovery Agent Wizard and by the Certificates snap-in of
the domain controller or the machine on which the administrator should be
able to decrypt encrypted files.
As the final step in creating EFS information for a file, Lsasrv calculates a
checksum for the DDF and DRF by using the MD5 hash facility of Base
Cryptographic Provider 1.0. Lsasrv stores the checksum’s result in the EFS
information header. EFS references this checksum during decryption to
ensure that the contents of a file’s EFS information haven’t become
corrupted or been tampered with.
Encrypting file data
When a user encrypts an existing file, the following process occurs:
1. 
The EFS service opens the file for exclusive access.
2. 
All data streams in the file are copied to a plaintext temporary file in
the system’s temporary directory.
3. 
A FEK is randomly generated and used to encrypt the file by using
AES-256.
4. 
A DDF is created to contain the FEK encrypted by using the user’s
public key. EFS automatically obtains the user’s public key from the
user’s X.509 version 3 file encryption certificate.
5. 
If a recovery agent has been designated through Group Policy, a DRF
is created to contain the FEK encrypted by using RSA and the
recovery agent’s public key.
6. 
EFS automatically obtains the recovery agent’s public key for file
recovery from the recovery agent’s X.509 version 3 certificate, which
is stored in the EFS recovery policy. If there are multiple recovery
agents, a copy of the FEK is encrypted by using each agent’s public
key, and a DRF is created to store each encrypted FEK.
 Note
The file recovery property in the certificate is an example of an
enhanced key usage (EKU) field. An EKU extension and
extended property specify and limit the valid uses of a
certificate. File Recovery is one of the EKU fields defined by
Microsoft as part of the Microsoft public key infrastructure
(PKI).
7. 
EFS writes the encrypted data, along with the DDF and the DRF,
back to the file. Because symmetric encryption does not add
additional data, file size increase is minimal after encryption. The
metadata, consisting primarily of encrypted FEKs, is usually less than
1 KB. File size in bytes before and after encryption is normally
reported to be the same.
8. 
The plaintext temporary file is deleted.
When a user saves a file to a folder that has been configured for
encryption, the process is similar except that no temporary file is created.
The decryption process
When an application accesses an encrypted file, decryption proceeds as
follows:
1. 
NTFS recognizes that the file is encrypted and sends a request to the
EFS driver.
2. 
The EFS driver retrieves the DDF and passes it to the EFS service.
3. 
The EFS service retrieves the user’s private key from the user’s
profile and uses it to decrypt the DDF and obtain the FEK.
4. 
The EFS service passes the FEK back to the EFS driver.
5. 
The EFS driver uses the FEK to decrypt sections of the file as needed
for the application.
 Note
When an application opens a file, only those sections of the file
that the application is using are decrypted because EFS uses
cipher block chaining. The behavior is different if the user
removes the encryption attribute from the file. In this case, the
entire file is decrypted and rewritten as plaintext.
6. 
The EFS driver returns the decrypted data to NTFS, which then sends
the data to the requesting application.
Backing up encrypted files
An important aspect of any file encryption facility’s design is that file data is
never available in unencrypted form except to applications that access the file
via the encryption facility. This restriction particularly affects backup
utilities, in which archival media store files. EFS addresses this problem by
providing a facility for backup utilities so that the utilities can back up and
restore files in their encrypted states. Thus, backup utilities don’t have to be
able to decrypt file data, nor do they need to encrypt file data in their backup
procedures.
Backup utilities use the EFS API functions OpenEncryptedFileRaw,
ReadEncryptedFileRaw, WriteEncryptedFileRaw, and
CloseEncryptedFileRaw in Windows to access a file’s encrypted contents.
After a backup utility opens a file for raw access during a backup operation,
the utility calls ReadEncryptedFileRaw to obtain the file data. All the EFS
backup utilities APIs work by issuing FSCTL to the NTFS file system. For
example, the ReadEncryptedFileRaw API first reads the $EFS stream by
issuing a FSCTL_ENCRYPTION_FSCTL_IO control code to the NTFS
driver and then reads all of the file’s streams (including the $DATA stream
and optional alternate data streams); in case the stream is encrypted, the
ReadEncryptedFileRaw API uses the FSCTL_READ_RAW_ENCRYPTED
control code to request the encrypted stream data to the file system driver.
EXPERIMENT: Viewing EFS information
EFS has a handful of other API functions that applications can use
to manipulate encrypted files. For example, applications use the
AddUsersToEncryptedFile API function to give additional users
access to an encrypted file and RemoveUsersFromEncryptedFile to
revoke users’ access to an encrypted file. Applications use the
QueryUsersOnEncryptedFile function to obtain information about
a file’s associated DDF and DRF key fields.
QueryUsersOnEncryptedFile returns the SID, certificate hash
value, and display information that each DDF and DRF key field
contains. The following output is from the EFSDump utility, from
Sysinternals, when an encrypted file is specified as a command-line
argument:
Click here to view code image
C:\Andrea>efsdump Test.txt
EFS Information Dumper v1.02
Copyright (C) 1999 Mark Russinovich
Systems Internals - http://www.sysinternals.com
C:\Andrea\Test.txt:
DDF Entries:
    WIN-46E4EFTBP6Q\Andrea:
        Andrea(Andrea@WIN-46E4EFTBP6Q)
    Unknown user:
        Tony(Tony@WIN-46E4EFTBP6Q)
DRF Entry:
    Unknown user:
        EFS Data Recovery
You can see that the file Test.txt has two DDF entries for the
users Andrea and Tony and one DRF entry for the EFS Data
Recovery agent, which is the only recovery agent currently
registered on the system. You can use the cipher tool to add or
remove users in the DDF entries of a file. For example, the
command
Click here to view code image
cipher /adduser /user:Tony Test.txt
enables the user Tony to access the encrypted file Test.txt (adding
an entry in the DDF of the file).
Copying encrypted files
When an encrypted file is copied, the system doesn’t decrypt the file and re-
encrypt it at its destination; it just copies the encrypted data and the EFS
alternate data stream to the specified destination. However, if the destination
does not support alternate data streams—if it is not an NTFS volume (such as
a FAT volume) or is a network share (even if the network share is an NTFS
volume)—the copy cannot proceed normally because the alternate data
streams would be lost. If the copy is done with Explorer, a dialog box
informs the user that the destination volume does not support encryption and
asks the user whether the file should be copied to the destination
unencrypted. If the user agrees, the file will be decrypted and copied to the
specified destination. If the copy is done from a command prompt, the copy
command will fail and return the error message “The specified file could not
be encrypted.”
BitLocker encryption offload
The NTFS file system driver uses services provided by the Encrypting File
System (EFS) to perform file encryption and decryption. These kernel-mode
services, which communicate with the user-mode encrypting file service
(Efssvc.dll), are provided to NTFS through callbacks. When a user or
application encrypts a file for the first time, the EFS service sends a
FSCTL_SET_ENCRYPTION control code to the NTFS driver. The NTFS file
system driver uses the “write” EFS callback to perform in-memory
encryption of the data located in the original file. The actual encryption
process is performed by splitting the file content, which is usually processed
in 2-MB blocks, in small 512-byte chunks. The EFS library uses the
BCryptEncrypt API to actually encrypt the chunk. As previously mentioned,
the encryption engine is provided by the Kernel CNG driver (Cng.sys), which
supports the AES or 3DES algorithms used by EFS (along with many more).
As EFS encrypts each 512-byte chunk (which is the smallest physical size of
standard hard disk sectors), at every round it updates the IV (initialization
vector, also known as salt value, which is a 128-bit number used to provide
randomization to the encryption scheme), using the byte offset of the current
block.
In Windows 10, encryption performance has increased thanks to BitLocker
encryption offload. When BitLocker is enabled, the storage stack already
includes a device created by the Full Volume Encryption Driver (Fvevol.sys),
which, if the volume is encrypted, performs real-time encryption/decryption
on physical disk sectors; otherwise, it simply passes through the I/O requests.
The NTFS driver can defer the encryption of a file by using IRP
Extensions. IRP Extensions are provided by the I/O manager (more details
about the I/O manager are available in Chapter 6 of Part 1) and are a way to
store different types of additional information in an IRP. At file creation
time, the EFS driver probes the device stack to check whether the BitLocker
control device object (CDO) is present (by using the
IOCTL_FVE_GET_CDOPATH control code), and, if so, it sets a flag in the
SCB, indicating that the stream can support encryption offload.
Every time an encrypted file is read or written, or when a file is encrypted
for the first time, the NTFS driver, based on the previously set flag,
determines whether it needs to encrypt/decrypt each file block. In case
encryption offload is enabled, NTFS skips the call to EFS; instead, it adds an
IRP extension to the IRP that will be sent to the related volume device for
performing the physical I/O. In the IRP extension, the NTFS file system
driver stores the starting virtual byte offset of the block of the file that the
storage driver is going to read or write, its size, and some flags. The NTFS
driver finally emits the I/O to the related volume device by using the
IoCallDriver API.
The volume manager will parse the IRP and send it to the correct storage
driver. The BitLocker driver recognizes the IRP extension and encrypts the
data that NTFS has sent down to the device stack, using its own routines,
which operate on physical sectors. (Bitlocker, as a volume filter driver,
doesn’t implement the concept of files and directories.) Some storage drivers,
such as the Logical Disk Manager driver (VolmgrX.sys, which provides
dynamic disk support) are filter drivers that attach to the volume device
objects. These drivers reside below the volume manager but above the
BitLocker driver, and they can provide data redundancy, striping, or storage
virtualization, characteristics which are usually implemented by splitting the
original IRP into multiple secondary IRPs that will be emitted to different
physical disk devices. In this case, the secondary I/Os, when intercepted by
the BitLocker driver, will result in data encrypted by using a different salt
value that would corrupt the file data.
IRP extensions support the concept of IRP propagation, which
automatically modifies the file virtual byte offset stored in the IRP extension
every time the original IRP is split. Normally, the EFS driver encrypts file
blocks on 512-byte boundaries, and the IRP can’t be split on an alignment
less than a sector size. As a result, BitLocker can correctly encrypt and
decrypt the data, ensuring that no corruption will happen.
Many of BitLocker driver’s routines can’t tolerate memory failures.
However, since IRP extension is dynamically allocated from the nonpaged
pool when the IRP is split, the allocation can fail. The I/O manager resolves
this problem with the IoAllocateIrpEx routine. This routine can be used by
kernel drivers for allocating IRPs (like the legacy IoAllocateIrp). But the new
routine allocates an extra stack location and stores any IRP extensions in it.
Drivers that request an IRP extension on IRPs allocated by the new API no
longer need to allocate new memory from the nonpaged pool.
 Note
A storage driver can decide to split an IRP for different reasons—whether
or not it needs to send multiple I/Os to multiple physical devices. The
Volume Shadow Copy Driver (Volsnap.sys), for example, splits the I/O
while it needs to read a file from a copy-on-write volume shadow copy, if
the file resides in different sections: on the live volume and on the
Shadow Copy’s differential file (which resides in the System Volume
Information hidden directory).
Online encryption support
When a file stream is encrypted or decrypted, it is exclusively locked by the
NTFS file system driver. This means that no applications can access the file
during the entire encryption or decryption process. For large files, this