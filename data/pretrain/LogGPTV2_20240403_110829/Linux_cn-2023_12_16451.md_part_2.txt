### `..` 和 `...`
这是两个命令：
* `git log main..test`
* `git log main...test`
我从没用过 `..` 和 `...` 这两个命令，所以我得查一下 [man git-range-diff](https://git-scm.com/docs/git-range-diff)。我的理解是比如这样一个情况：
```
A - B main
  \
    C - D test
```
* `main..test` 对应的是提交 C 和 D
* `test..main` 对应的是提交 B
* `main...test` 对应的是提交 B，C，和 D
更有挑战的是，`git diff` 显然也支持 `..` 和 `...`，但它们在 `git log` 中的意思完全不同？我的理解如下：
* `git log test..main` 显示在 `main` 而不在 `test` 的更改，但是 `git log test...main` 则会显示 *两边* 的改动。
* `git diff test..main` 显示 `test` 变动 *和* `main` 变动（它比较 `B` 和 `D`），而 `git diff test...main` 会比较 `A` 和 `D`（它只会给你显示一边的差异）。
有关这个的更多讨论可以参考 [这篇博客文章](https://matthew-brett.github.io/pydagogue/pain_in_dots.html)。
### “可以快速前移”
在 `git status` 中，我们会经常遇到如下的信息：
```
$ git status
On branch main
Your branch is behind 'origin/main' by 2 commits, and can be fast-forwarded.
  (use "git pull" to update your local branch)
```
（消息译文：你现在处于 `main` 分支上。你的分支比 `origin/main` 分支落后了 2 个提交，可以进行快速前进。 (使用 `git pull` 命令可以更新你的本地分支)）
但“快速前移” 到底是何意？本质上，它在告诉我们这两个分支基本如下图所示（最新的提交在右侧）：
```
main:        A - B - C
origin/main: A - B - C - D - E
```
或者，从另一个角度理解就是：
```
A - B - C - D - E (origin/main)
        |
        main
```
这里，`origin/main` 仅仅多出了 2 个 `main` 不存在的提交，因此我们可以轻松地让 `main` 更新至最新 —— 我们所需要做的就是添加上那 2 个提交。事实上，这几乎不可能出错 —— 不存在合并冲突。快速前进式合并是个非常棒的事情！这是合并两个分支最简单的方式。
运行完 `git pull` 之后，你会得到如下状态：
```
main:        A - B - C - D - E
origin/main: A - B - C - D - E
```
下面这个例子展示了一种**不能**快速前进的状态。
```
A - B - C - X  (main)
        |
        - - D - E  (origin/main)
```
此时，`main` 分支上有一个 `origin/main` 分支上无的提交（`X`），所以无法执行快速前移。在此种情况，`git status` 就会如此显示：
```
$ git status
Your branch and 'origin/main' have diverged,
and have 1 and 2 different commits each, respectively.
```
（你的分支和 `origin/main` 分支已经产生了分歧，其中各有 1 个和 2 个不同的提交。）
### “引用”、“符号引用”
在使用 Git 时，“引用” 一词可能会使人混淆。实际上，Git 中被称为 “引用” 的实例至少有三种：
* 分支和标签，例如 `main` 和 `v0.2`
* `HEAD`，代表当前活跃的分支
* 诸如 `HEAD^^^` 这样的表达式，Git 会将其解析成一个提交 ID。确切说，这可能并非 “引用”，我想 Git [将其称作](https://git-scm.com/docs/revisions) “版本参数”，但我个人并未使用过这个术语。
个人而言，“符号引用” 这个术语颇为奇特，因为我觉得我只使用过 `HEAD`（即当前分支）作为符号引用。而 `HEAD` 在 Git 中占据核心位置，多数 Git 核心命令的行为都基于 `HEAD` 的值，因此我不太确定将其泛化成一个概念的实际意义。
### refspecs
在 `.git/config` 配置 Git 远程仓库时，你可能会看到这样的代码 `+refs/heads/main:refs/remotes/origin/main` 。
```
[remote "origin"]
    url = PI:EMAIL:jvns/pandas-cookbook
    fetch = +refs/heads/main:refs/remotes/origin/main
```
我对这段代码的含义并不十分清楚，我通常只是在使用 `git clone` 或 `git remote add` 配置远程仓库时采用默认配置，并没有动机去深究或改变。
### “tree-ish”
在 `git checkout` 的手册页中，我们可以看到：
```
git checkout [-f|--ours|--theirs|-m|--conflict=] [] [--] ...
```
那么这里的 `tree-ish` 是什么意思呢？其实当你执行 `git checkout THING .` 时，`THING` 可以是以下的任一种：
* 一个提交 ID（如 `182cd3f`）
* 对一个提交 ID 的引用（如 `main` 或 `HEAD^^` 或 `v0.3.2`）
* 一个位于提交内的子目录（如 `main:./docs`）
* 可能就这些？
对我个人来说，“提交内的目录”这个功能我从未使用过，从我的视角看，`tree-ish` 可以解读为“提交或对提交的引用”。
### “索引”、“暂存”、“缓存”
这些术语都指向的是同一样东西（文件 `.git/index`，当你执行 `git add` 时，你的变动会在这里被暂存）：
* `git diff --cached`
* `git rm --cached`
* `git diff --staged`
* 文件 `.git/index`
尽管它们都是指向同一个文件，但在实际使用中，这些术语的应用方式有所不同：
* 很显然，`--index` 和 `--cached` 并不总是表示同一种意思。我自己从未使用 `--index`，所以具体细节我就不展开讨论了，但是你可以在 Junio Hamano（Git 的主管维护者）[的博客文章](https://gitster.livejournal.com/39629.html) 中找到详细解释。
* “索引” 会包含未跟踪的文件（我猜可能是对性能的考虑），但你通常不会把未跟踪的文件考虑在“暂存区”内。
### “重置”、“还原”、“恢复”
许多人提到，“ 重置   reset ”、“ 还原   revert ” 和 “ 恢复   restore ” 这三个词非常相似，易使人混淆。
我认为这部分的困惑来自以下原因：
* `git reset --hard` 和 `git restore .` 单独使用时，基本上达到的效果是一样的。然而，`git reset --hard COMMIT` 和 `git restore --source COMMIT .` 相互之间是完全不同的。
* 相应的手册页没有给出特别有帮助的描述：
	+ `git reset`: “重置当前 `HEAD` 到指定的状态”
	+ `git revert`: “还原某些现有的提交”
	+ `git restore`: “恢复工作树文件”
虽然这些简短的描述为你详细说明了哪个名词受到了影响（“当前 `HEAD`”，“某些提交”，“工作树文件”），但它们都预设了你已经知道在这种语境中，“重置”、“还原”和“恢复”的准确含义。
以下是对它们各自功能的简要说明：
* 重置 —— `git revert COMMIT`: 在你当前的分支上，创建一个新的提交，该提交是 `COMMIT` 的“反向”操作（如果 `COMMIT` 添加了 3 行，那么新的提交就会删除这 3 行）。
* 还原 —— `git reset --hard COMMIT`: 强行将当前分支回退到 `COMMIT` 所在的状态，抹去自 `COMMIT` 以来的所有更改。这是一个高风险的操作。