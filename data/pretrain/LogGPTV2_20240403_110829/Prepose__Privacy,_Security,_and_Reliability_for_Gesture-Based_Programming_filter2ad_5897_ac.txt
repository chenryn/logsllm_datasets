Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:45 UTC from IEEE Xplore.  Restrictions apply. 
PREPOSE
put your arms down
C#
Z3
public static BodyTransform ArmsDownTransform() {
  return new BodyTransform()
    .Compose(JointType.ElbowLeft, new Direction(0, -1, 0))
    .Compose(JointType.WristLeft, new Direction(0, -1, 0))
    .Compose(JointType.ElbowRight, new Direction(0, -1, 0))
    .Compose(JointType.WristRight, new Direction(0, -1, 0));
joints[‘elbow left’].Y > -1 ∧ 
joints[‘elbow left’].X = 0 ∧ 
joints[‘elbow left’].Z = 0
Fig. 9: Runtime correspondence: Prepose, C#, and Z3.
point your right hand up
In the ﬁrst line, the transformation “rotate” takes as
arguments the name of the user skeleton joint “left wrist,”
the amount of rotation “30 degrees,” and the direction
of rotation. The second line is similar. The third line
is a transformation “point” that takes as arguments the
name of a user skeleton joint and a direction “up.” When
applied to a skeleton position, the eﬀect of all three
transformations is to come up with a single new target
skeleton for the user.
A restriction is a function that takes as input a Kinect
skeleton, checks if the skeleton falls within a range of
allowed positions, and then returns true or false. An
example restriction in Prepose looks like this:
put your right hand on your head
The intuition here is that “on your head” is a restriction
because it does not explicitly specify a single position.
Instead, a range of allowed positions, namely those there
the hand is within a threshold distance from the head, is
denoted by this function. Here, the function “put” takes
as arguments two joints, the “right hand” and the “head.”
The function returns true if the right hand is less than
a threshold distance from the head and false otherwise.
Poses can incorporate multiple transformations and mul-
tiple restrictions. The pose matches if all restrictions are
true and the user’s body position is also closer than a
threshold to the target position.
Gestures: Gestures consist of zero or more pose declara-
tions, followed by an execution sequence. For example, a
gesture for doing “the wave” might contain the following:
E X E C U T I O N :
p o i n t - h a n d s - u p ,
p o i n t - h a n d s - f o r w a r d ,
p o i n t - h a n d s - d o w n .
That is, to do “the wave,” the user needs to put her hands
up, then move her hands from there to pointing forward,
and then ﬁnally point her hands downward. The gesture
matches when the user successfully reaches the end of the
execution sequence.
Our Prepose runtime allows multiple gestures to be
loaded at a time. The execution sequence of a gesture can
use any pose deﬁned by any loaded gesture, which allows
developers to build libraries of poses that can be shared
by diﬀerent gestures.
(a) A physical therapy application. On the right, the appli-
cation displays the user’s current position. Along the top, the
application describes the gesture the user must perform.
(b) Ballet poses.
GESTURE f o u r t h - p o s i t i o n - e n - a v a n t :
POSE c r o s s - l e g s - o n e - b e h i n d - t h e - o t h e r :
put your left ankle behind your right ankle ,
put your left ankle to the right
// do not connect your ankles .
of your right ankle .
POSE h i g h - a r c - a r m s - t o - r i g h t :
point your arms down ,
rotate your right arm 70 degrees up ,
rotate your left elbow 20 degrees to your left ,
rotate your left wrist 25 degrees to your right .
E X E C U T I O N :
// f o u r t h - p o s i t i o n - e n - a v a n t - c o m p o s e d
s t a n d - s t r a i g h t ,
p o i n t - f e e t - o u t ,
s t r e t c h - l e g s ,
c r o s s - l e g s - o n e - b e h i n d - t h e - o t h e r ,
h i g h - a r c - a r m s - t o - r i g h t .
(c) A sample ballet gesture written in Prepose.
The gesture deﬁnes two poses, which are spec-
iﬁcations of a body position. Then, the gesture
execution speciﬁes the sequence of poses that must
be matched to perform the gesture.
Fig. 8: Motivating example.
of sensing gestures. For example, the Leap Motion hand
sensor exposes a “hand skeleton” to developers and we
could adapt the Prepose runtime to work with Leap
Motion or other hand sensors.
Poses: A pose contains either transformations or re-
strictions. A transformation is a function that takes as
input a Kinect skeleton and returns a Kinect skeleton.
Transformations in Prepose include “rotate” and “point”,
as in this example Prepose code:
rotate your left wrist 30 degrees to the front
rotate your right wrist 30 degrees to the front
128128
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:45 UTC from IEEE Xplore.  Restrictions apply. 
Runtime execution: Figure 9 shows the stages of run-
time processing in Prepose. A high-level Prepose state-
ment is compiled into C# code, which in turn deﬁnes
an SMT formula. The formula is used both for runtime
matching and static analysis.
Declarations
app
gesture
pose
statement
execution
APP id : (gesture . ) + EOF
GESTURE id : pose + execution
POSE id :
statement ( , statement ) * .
::=
::=
::=
::= transf orm | restriction
::=
EXECUTION :
(repeat the following steps number
executionStep( , executionStep) *
| executionStep( , executionStep) * )
executionStep
::= motionConstraint ?
id ( and holdConstraint) ?
Transforms
transf orm
::= pointT o
3.4 Gesture Security and Reliability
At gesture submission time, we apply static analysis to
the submitted Prepose program. This analysis can be
performed within the App store before the user is allowed
to download a new application that contains gestures.
Conﬂict checking may also be done as information about
which applications are installed is already available to the
App store. Conceivably, the analysis may be done on the
client as well. The results of this analysis tell us whether
the submitted gesture is “deﬁnitely OK,” “deﬁnitely not
OK,” or, as may happen occasionally, “needs attention
from a human auditor.” This kind of triage is fairly typical
in the App store context.
We currently perform the four analyses summarized in
Figure 2. As we explain below, this analysis amounts to
queries resolved by the underlying SMT solver, Z3.
Gesture safety: The ﬁrst analysis is for gesture safety.
Just because it’s possible to ask someone to make a gesture
does not mean it is a good idea. A gesture may ask people
to overextend their limbs, make an obscene motion, or
otherwise potentially harm the user. To prevent an unsafe
gesture from being present in the store, we ﬁrst deﬁne
safety restrictions. Safety restrictions are sets of body
positions that are not acceptable. Safety restrictions are
encoded as SMT formulas that specify disallowed positions
for Kinect skeleton joints.
Internal validity: It is possibly in Prepose to write a
gestures that can never be matched. For example, a gesture
that requires the user to keep their arms both up and down
contains an internal contradiction. We analyze Prepose
gestures to ensure they lack internal contradictions.
Reserved gestures: A special case of conﬂict detection
is detecting overlap with reserved gestures. For example,
the Xbox Kinect has a particular attention gesture that
opens the Xbox OS menu even if another game or program
is running. Checking conﬂicts with reserved gestures is
important because applications should not be able to
“shadow” the system’s attention gesture with its own
gestures.
Conﬂict detection: We say that a pair of gestures
conﬂicts if the user’s movements match both gestures
simultaneously. Gesture conﬂicts can happen accidentally,
because gestures are written independently by diﬀerent
application developers. Alternatively, a malicious applica-
tion can intentionally register a gesture that conﬂicts with
another application. In Prepose, because all gestures
have semantics in terms of SMT formulas, we can ask a
solver if there exists a sequence of body positions that
matches both gestures. If the solver completes, then either
it certiﬁes that there is no such sequence or gives an
example.
pointT o
::=
rotateP lane
::=
rotateDirection
::=
your ? bodyP art) *
y our? bodyP art) *
| rotateP lane
| rotateDirection
point your ?
bodyP art(( ,
and your ? bodyP art) ?
( to | to your ) ? direction
rotate your
bodyP art(( ,
and your ? bodyP art) ?
number degrees
angularDirection on the ?
ref erenceP lane
rotate your bodyP art
(( , your ? bodyP art) *
and your ? bodyP art) ?
number degrees
( to | to your ) ?
direction
Restrictions
restriction
::=
touchRestriction
::=
putRestriction
::=
alignRestriction
::=
dont ? touchRestriction
| dont ? putRestriction
| dont ? alignRestriction
touch your ?
bodyP art with your ?
side hand
put your ?
bodyP art(( , your ? bodyP art) *
and your ? bodyP art) ?
relativeDirection bodyP art
align your ?
bodyP art(( , your ? bodyP art) *
and your ? bodyP art) ?
Skeleton
bodyP art
joint
centerJoint
side
sidedJoint
direction
angularDirection
ref erenceP lane
relativeDirection
motionConstraint
holdConstraint
repeat
::= joint | side arm | side leg | spine
legs | shoulders
| back | arms |
| wrists | elbows | hands
| hands tips | thumbs | hips
| knees | ankles |
feet | you
::= centerJoint | side sidedJoint
neck | head | spine m id |
::=
spine base | spine shoulder
left | right
shoulder | elbow | wrist | hand |
hand tip | thumb | hip | knee |
ankle |
foot
up | down |
front | back | side
clockwise | counter clockwise
frontal plane | sagittal plane |
horizontal plane
in front of your | behind your |
(( on top of ) |
above ) your | below your |
to the side of your
slowly | rapidly
hold for number seconds
repeat number times
::=
::=
::=
::=
::=
::=
::=
::=
::=
Fig. 10: BNF for Prepose. The start symbol is app.
4 Techniques
Figure 10 shows a BNF for Prepose which we currently
support. This captures how Prepose applications can be
composed out of gestures, gestures composed out of poses
and execution blocks, execution blocks can be composed
129129
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:45 UTC from IEEE Xplore.  Restrictions apply. 
Rotate-Frontal+ Rotate-Frontal(j, a, Clockwise)
j.Y = cos(a) · j.Y + sin(a) · j.Z
j.Z = −sin(a) · j.Y + cos(a) · j.Z
Rotate-Frontal- Rotate-Frontal(j, a, CounterClockwise)
j.Y = cos(a) · j.Y − sin(a) · j.Z
j.Z = sin(a) · j.Y + cos(a) · j.Z
Rotate-Sagittal+ Rotate-Sagittal(j, a, Clockwise)
j.X = cos(a) · j.X + sin(a) · j.Y
j.Y = −sin(a) · j.X + cos(a) · j.Y
Rotate-Sagittal- Rotate-Sagittal(j, a, CounterClockwise)
j.X = cos(a) · j.X − sin(a) · j.Y
j.Y = sin(a) · j.X + cos(a) · j.Y
Rotate-Horizontal+ Rotate-Horizontal(j, a, Clockwise)
j.X = cos(a) · j.X + sin(a) · j.Z
j.Z = −sin(a) · j.X + cos(a) · j.Z
Rotate-Horizontal- Rotate-Horizontal(j, a, CounterClockwise)
j.X = cos(a) · j.X − sin(a) · j.Z
j.Z = sin(a) · j.X + cos(a) · j.Z
Fig. 11: Transformations translated into Z3 terms. j is the joint
position (with X, Y , and Z components); a is the rotational angle.
out of execution steps, etc2.
The grammar is fairly extensible: if one wishes to sup-
port other kinds of transforms or restrictions, one needs