The CHANGELABEL subprocess is split into two cases, one for
secrecy and one for integrity (the latter elided for brevity):
CHANGELABELS,I,O = S-CHANGES,I,O | I-CHANGES,I,O
S-CHANGES,I,O =
(cid:2)
check : CHECKS,I,O(cid:2)
(cid:2)
(change label, Secrecy, S
s ?
κ
(cid:2)
) →
(cid:2)
) → check?r →
check!(S, S
Ok → KS (cid:2),I,O
if r then s !
κ
Error → KS,I,O
else s !
κ
(cid:3)(cid:3)
2A note on notation: the channel between Ui and i:K is named i.s as stated
earlier. However, the “i.” preﬁx is induced by the CSP renaming operator on
the “template” kernel process K. In this section we deﬁne the subprocesses
of K, so the channel is named merely s.
65
In both cases, the user process speciﬁes a new label, and the CHECK
subroutine determines if that label change is valid. In the success case,
the kernel process transitions to a new state, reﬂecting the new labels.
In the failure case, the kernel process remains in the same state. The
CHECK process computes the validity of the label change based on
the process’s current capabilities, as well as the global capabilities ˆO
(captured by a global process listening on the g channel):
(cid:2)
CHECKS,I,O =?(L, L
) →
−
g!(check-, L − L
g!(check+, L
!(r ∧ a) → CHECKS,I,O
(cid:2) − O
(cid:2) − L − O
) → g?r →
+
) → g?a →
the global
tag register replies True to
As we will see below,
(check-, L) iff L ⊆ ˆO−, and replies True to (check+, L) iff
+. Thus, we have that the user process can only change from
L ⊆ ˆO
(cid:2) and add all tags in
label L to L
L(cid:2) − L, either by its own capabilities or those globally owned (see
Deﬁnition 1 in Section II-C).
(cid:2) if it can subtract all tags in L − L
The user half of a process can call the kernel half to determine its
own S or I labels and its capabilities O:
READMYLABELS,I,O =
(cid:2)
S → KS,I,O |
(get label, Secrecy) → s !
s ?
(cid:3)
κ
κ
(get label, Integrity) → s !
I → KS,I,O
s ?
κ
κ
(cid:2)
(get caps) → s !
O → KS,I,O
s ?
κ
κ
(cid:3)
READMYCAPSS,I,O =
A process also can discard capabilities using DROPCAPS:
(drop caps, X) → KS,I,O−X
DROPCAPSS,I,O =
(cid:2)
s ?
κ
(cid:3)
On a successful drop of capabilities, the process transitions to a new
kernel state, reﬂecting the reduced ownership set.
The next process to cover is forking. Recall that each active task i
on the system has two components: a user component Ui and a kernel
component i:K. The Flume model does not capture what happens to
Ui when it calls fork,3 but the kernel-side behavior of fork is speciﬁed
as follows:
FORKS,I,O =
(cid:2)
(fork) →
s ?
κ
(fork, O) → p?j →
p !
κ
j → KS,I,O
s !
κ
(cid:3)
Recall that i.p is a channel from the i-th kernel process to the process
manager in the kernel, PROCMGR. (The latter allocates the child’s
process ID j and gives birth to j:K.)
The process handling getpid is straightforward:
GETPIDS,I,O =
(cid:2)
(getpid) →
s ?
κ
p!(getpid) → p?i →
s !
κ
i → KS,I,O
(cid:3)
And user processes issue an exit system call as they terminate:
EXITS,I,O =
(cid:2)
(exit) →
s ?
κ
q!(clear) → p!(exit) → SKIP
(cid:3)
Once a process with a given ID has run and exited, its ID is retired,
never to be used again.
3In Flume’s concrete implementation of this model, forking has the fa-
miliar semantics of copying the address space and conﬁguring the execution
environment of the child process.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:18:50 UTC from IEEE Xplore.  Restrictions apply. 
E. Communication
The communication subprocesses are the crux of the Flume CSP
model. They require care to ensure that subtle state transitions in high
processes do not result in observable behavior by low processes. At
the same time, they must make a concerted effort to deliver messages,
so that the system is useful.
The beginning of a message delivery sequence is the process
i:SENDS,I,O, invoked when Ui wishes to send a message to Uj.
Messages are of the form (X, m), where X is a set of capabilities,
and m is an arbitrary string. To send, the kernel shrinks the process’s
S label and grows its integrity label I as much as allowed by its
privileges. The kernel also winnows the transmitted capabilities to
those that Ui actually owns (X ∩ O). The message (X, m) passes
through the switchboard process SWITCH via channel i.c, which
forwards it j.
SENDS,I,O =
(cid:2)
(send, j, X, m) →
s ?
κ
g!(dual privs, O) → g?D →
c!(S − D, I ∪ D, j, X ∩ O, m) → KS,I,O
(cid:3)
The process SWITCH listens on the other side of the receive
channel i.c. It accepts messages of the form i.c?(S, I, j, X, m) and
forwards them to the process j:K as j.c!(S, I, i, X, m):
SWITCH = |∀i
(cid:2)
i.c?(S, I, j, X, m) →
((j.c!(S, I, i, X, m) → SKIP) (cid:3) SWITCH)
(cid:3)
The SWITCH process sends messages in parallel with the next
receive operation. This parallelism avoids deadlocking the system
if the receiving process has exited, not yet started, or is waiting
to send a message. In other words, the SWITCH process is always
willing to receive a new message, delegating potentially-blocking
send operations to an asynchronous child process.
Once the message leaves the switch, the receiver process handles
it with its INTRECV subprocess. After performing the label checks
given by Deﬁnition 2 in Section II-C2, this process enqueues the
incoming message for later retrieval:
INTRECVS,I,O = c?(Sin, Iin, j, X, m) →
g!(dual privs, O) → g?D →
if (Sin ⊆ S ∪ D) ∧ (I − D ⊆ Iin)
then q!(enqueue, (X, m)) → KS,I,O
else KS,I,O
The ﬁnal link in the chain is the actual message delivery in user
space. For a user process to receive a message, it calls into the kernel,
asking it to dequeue and deliver any waiting messages. Receiving also
updates the process’s ownership, to reﬂect new capabilities it gained.
RECVS,I,O =
(recv, j) →
(cid:2)
s ?
κ
q!(dequeue, j) → q?(X, m) →
m → KS,I,O∪X
s !
κ
(cid:3)
F. Helper Processes
It now remains to ﬁll in the details for the helper processes that
the various KS,I,O processes call upon. They are: TAGMGR, which
manages all global tag allocation and global capabilities; QUEUES,
which manages receive message queues, one per process; and ﬁnally
PROCMGR, which manages process creation, deletion, etc.
1) The Tag Manager (TAGMGR): The tag manager keeps track of
a global universe of tags (T ), and the global set of privileges available
to all processes ( ˆO). It also tabulates which tags have already been
allocated, so as never to reissue the same tag. The set ˆT refers to
those tags that were allocated in the past. Thus, the task manager’s
T . Initially, ˆO and ˆT are empty:
state is parameterized as TAGMGR ˆ
O,
ˆ
TAGMGR = TAGMGR{},{}
Once active, the tag manager services several calls:
TAGMGR ˆ
O,
|
ˆ
|
ˆ
T
ˆ
T
T = NEWTAG+ ˆ
O,
NEWTAG– ˆ
O,
NEWTAG0 ˆ
ˆ
O,
T
DUALPRIVS ˆ
ˆ
O,
T
|
CHECK+ ˆ
O,
CHECK- ˆ
O,
ˆ
T
ˆ
T
|
|
Many of these subprocesses will call upon a subroutine that
randomly chooses an element from a given set. We deﬁne that
subroutine here. Given a set Y :
CHOOSEY = ?(S, I, O) → (cid:2)
y∈Y
(!y) → STOP
is,
That
the subprocess CHOOSE nondeterministically picks an
element y from Y and returns it to the caller. As we will see
in Section V, CHOOSE’s reﬁnement (i.e., its instantiation) has an
important impact on security. It can, and in some cases should, take
into account the labels on the kernel process on whose behalf it
operates.
The ﬁrst set of calls involve allocating new tags, such as:
NEWTAG+ ˆ
O,
T = choose:CHOOSET − ˆ
ˆ
(cid:2)
(cid:4)
(cid:4)
∀i
(cid:2)
(create tag, Add) →
i.g ?
κ
T
choose!(S, I, O)?t →
i.g!(t, {t
TAGMGR ˆ
−}) →
O∪{t+},
ˆ
T ∪{t}
(cid:3)
That is, the subprocess NEWTAG+ picks a channel i such that i.g has
input available. Then, it chooses an unallocated tag t via CHOOSE
and returns that tag to the calling kernel process. It services the next
request in a different state, reﬂecting that a new capability is available
to all processes (t
+) and the tag t is now allocated.
We next deﬁne NEWTAG– and NEWTAG0 similarly:
NEWTAG– ˆ
O,
T = choose :CHOOSET − ˆ
ˆ
(cid:2)
(cid:4)(cid:4)
∀i
(cid:2)
(create tag, Remove) →
i.g ?
κ
T
choose!(S, I, O)?t →