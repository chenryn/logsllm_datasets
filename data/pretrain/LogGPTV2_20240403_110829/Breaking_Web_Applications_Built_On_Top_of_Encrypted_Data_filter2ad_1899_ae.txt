security of MKSE-based collaborative systems, such as chat
or email, where dynamic access graphs are the norm.
8.2 Expanding the attack
Any searchable encryption scheme that leaks access pat-
terns is generically vulnerable to the following attack: if the
user searches an adversarially chosen document, the adver-
sary learns whether the query matched one of the keywords
in that document. This attack, brieﬂy mentioned in [48, sec-
tion 5.4], has been known in folklore since before the Mylar
paper was published.
In the rest of this section, we explain how the ﬂawed de-
sign of Mylar makes it vulnerable to a much more powerful
attack. Once the malicious server obtains the token con-
version delta for a particular document, he can expand the
attack to all of the user’s documents (not just those that
the user shares with the adversary) and all search keywords,
including keywords that do not occur in any document stored
on the server.
If Mylar fully hid access patterns—for example, by utiliz-
ing some kind of oblivious storage or private information re-
trieval—the generic attack mentioned in [48] would be foiled
but Mylar queries would still be vulnerable to the brute-force
attack on search keywords described in Section 8.3 (but not
to the concomitant plaintext recovery attack, which requires
the server to observe which documents matched the user’s
search query).
All documents. Mylar claims that it “protects a data
item’s conﬁdentiality in the face of arbitrary server com-
promises, as long as none of the users with access to that
data item use a compromised machine” [48]. This claim is
false. In fact, we are not aware of any searchable encryption
scheme that can guarantee this property.
For example, suppose Alice keeps her private ﬁles on the
server. Only she has access, and she is not using a com-
promised machine. Alice receives a server-hosted message
from Bob, who uses a compromised machine. Now, if Alice
searches Bob’s message for a particular keyword, a malicious
server will be able to search all of her private ﬁles for that
keyword—even though none of the users with access to these
ﬁles use a compromised machine. This is a generic feature of
all searchable encryption schemes, including Mylar’s MKSE.
In the implementation of Mylar, the situation is even
worse. As we explained in Section 8.1, a malicious server
can forcibly add any user to any document, thus expanding
the attack to all documents in the system.
All keywords. For eﬃciency, Mylar trusts the server to
convert search tokens between principals. In Section 8.3, we
show how this unique feature of Mylar’s MKSE enables the
server to perform dictionary attacks on all of the user’s
queries over any principal. The state-of-the-art attacks
on searchable encryption recover only the query keywords
that occur in adversary-controlled documents; increasing re-
covery ratios requires known-document or ﬁle-injection at-
tacks [9,64]. By contrast, Mylar allows a malicious server to
recover query keywords regardless of whether they occur in
adversary-controlled documents or not.
The basic design ﬂaw (relying on the server to perform a
security-critical operation) is exacerbated in Mylar because
there is no way for the user to revoke a delta disclosed to the
server, nor prevent the server from using the delta to verify
his guesses of the user’s queries.
8.3 Brute-forcing query keywords
The attack in this section does not require online access.
The server can save the victim’s queries until the victim is
forced into or willingly joins a tainted principal.
1
2
2
Suppose the victim with key k1 has access to a tainted
principal with key k2. The server has the victim’s delta to
the principal key, ∆1 = gk2/k1
. Knowing k2 and ∆1 the
server can compute ∆1/k2
= gk2/k1·1/k2
= g1/k1
.
2
When the victim issues a search query for word w, it is
computed as H(w)k1 . The server can pair this with g1/k1
to get e(H(w)k1 , g1/k1
) = e(H(w), g2). The pairing e, the
hash H, and the generator g2 are all public and known to the
server, thus it can pre-compute a dictionary of e(H(w), g2)
for every possible search query and, when the victim sub-
mits a query, immediately check it against the pre-computed
dictionary to uncover the word w.
2
2
If the victim has access to another principal k3, the server
can check if a document encrypted with k3 contains w. This
does not require knowing k3 and can thus be done for any
document the victim has access to, tainted or not.
This attack is dangerous in any setting, but it is espe-
cially severe in typical BoPET applications. Popa et al. use
a medical diary application as a case study for multi-key
search [48, section 5.4]. In this application, women suﬀering
from endometriosis can record their symptoms for a gyne-
cologist to monitor. Since there are many more patients
than gynecologists, all gynecologists are given access to one
staﬀ principal which, in turn, has access to all patient in-
formation. In other words, there is one high-trust principal
shared by the doctors and many low-trust users (the pa-
tients). Once the server obtains a delta for the shared prin-
cipal from any gynecologist, the server can perform plaintext
recovery attacks on every record of encrypted symptoms.
8.4 Experiments
We simulated a brute-force attack on kChat using several
years’ worth of Ubuntu IRC logs [60] and a dictionary of
354,986 English words [19] (the biggest we could ﬁnd).
We chose kChat as our target because it is the only appli-
cation whose code was released by Popa et al. as an example
of how to port Web applications to Mylar. The Mylar pa-
per [48] uses kChat extensively as a running example—along
with the claims that Mylar is secure against arbitrarily com-
promised servers—but the release notes of kChat say “The
app is secured against passive adversaries (adversaries who
read all data at the server, but do not actively change infor-
mation).” This disclaimer does not appear anywhere in the
Mylar paper [48] or Mylar website (see Section 12). In any
case, as we showed in Section 6.2, kChat does not protect
users’ privacy even against a snapshot passive attacker.
All experiments were run on a Dell Optiplex 7020 with
16 gigabytes of RAM and an Intel i7-4790 quad-core CPU,
clocked at 3.6GHz.
Setup. Our proof-of-concept code uses the “crypto mk”
and “crypto server” C++ libraries from Mylar. It accepts a
user’s search query H(w)k1 , a delta gk2/k1 , and a principal
key k2. This simulates a malicious server obtaining the prin-
cipal key for a document to which the user has access. Pre-
processing every word in our 354,986-word dictionary takes
roughly 15 minutes of wall-clock time. Afterwards, recover-
ing the keyword w from H(w)k1 takes less than 15 ms.
Using Java, we downloaded, parsed, and processed Ubuntu
IRC logs from 2013, 2014, and 2015. We used Tika [5] to
remove non-English words, the Stanford NLP library [56] to
create our “bag of words,” the Porter stemmer algorithm for
stemming [50], and the stopword list from Lucene [4].
Query distribution. We used diﬀerent years for cross-
validation, attacking logs from one year with a keyword
query distribution generated from another year’s logs. We
experiment both with and without stemming (e.g., chang-
ing “running” to “run”) and stopword removal (e.g., “this”,
“the”, “that”). It is standard in practice to apply stemming
and stopword removal, although the kChat implementation
does neither. Following [9], queries were sampled with re-
placement and without removing duplicates to simulate two
users searching for the same term. If the chosen query was
in our dictionary [19], an adversary would be able to recover
the query keyword and all of its occurrences across all docu-
ments. The recovery rates were calculated as the number of
occurrences of the recovered queried keywords divided by the
total number of occurrences of all words in all documents.
For the stemming and stopword removal case, the recovery
rates were calculated as the number of occurrences of the
recovered queried stemmed keywords divided by the total
number of occurrences of non-stopwords in all documents.
Results. Figure 4 shows the results of our simulated ex-
periments. The upper curve is without stemming and stop-
word removal, the lower includes them. While we performed
cross-validation, the results of all experiments were nearly
identical, so we only present the average recovery rates over
20 trials of the same experiment. The 95% conﬁdence inter-
val was between 4% and 6% in almost all experiments.
We simulated queries in increments of 100, starting with
100 and ending at 2,000. At 100 queries, our recovery rate is
20–25%, growing quickly to above 50% with 800–900 queries.
With 2,000 queries, we recover 65–69% of the entire corpus.
The implementation of Mylar does not randomize the or-
der of encrypted keywords. For data encryption, Mylar uses
MylarCrypto.text_encrypt() which calls the function to-
kenize_for_search() to split strings into lowercase tokens,
preserving order. The ordered tokens are then encrypted
and sent to the Mylar server. Therefore, in addition to key-
words, our attack recovers their order, revealing much more
??? ??? don’t tell anyone because it might
diminish my manliness but disney rocks
dad in law is going to the hospital not sure if
he’s having an ??? reaction cough medicine
Figure 5: Examples of recovered plaintext data from our simu-
lated attacks on [60] . Unrecovered words are marked with “???”
8.5 Chosen-query attacks
In open applications, data contributed by one user can
inﬂuence other users’ queries. An active attacker can then
craft queries designed to leak information about the searcher’s
documents without the need for tainted principals.
For example, risk groups in OpenDNA are crowd-sourced
and shared between all users in plaintext. Each risk group
contains one or more SNP-genotype pairs. A malicious user
or server can upload custom risk groups to the database.
These could be as simple as SNP-genotypes pairs that cor-
respond to sensitive genetic information (such as ancestry
or predisposition to a certain disease), or as complex as risk
groups covering all possible genotypes for a given SNP. If
a malicious risk group is successfully found within a user’s
DNA, the server learns sensitive information. The server can
recover a user’s entire reported genetic information by brute
force with roughly 12 million queries. Admittedly, this is a
lot of queries, but note that the server is recovering 760,000
SNPs in this case.
9. RELATED WORK
BoPETs. Searchable encryption (SE) was explored by [11,
17,27,31,45,55]. Islam et al. [30] showed that the access pat-
terns of SE systems can be used to recover queries. Cash et
al. [9] investigated plaintext recovery attacks in SE schemes
similar to [28, 34].
BoPETs include numerous commercial systems for en-
crypted cloud computation [16, 22, 46, 51, 54].
In particu-
lar, Kryptnostic [59] uses a multi-key searchable encryption
scheme very similar to Mylar’s. VC3 [53] relies on a trusted
processor to run MapReduce in an untrusted cloud.
CryptDB [47] adds encryption to databases while still sup-
porting various client queries. Naveed et al. [42] showed
that CryptDB’s deterministic (DTE) and order-preserving
encryption (OPE) schemes leak information. Mylar does not
use OPE and Mylar’s encrypted search scheme does not leak
word frequencies within documents, making DTE frequency
analysis and (cid:96)p-optimization attacks impractical.
Privacy of Web apps.
Client-side encryption in Web
apps was explored in [3, 15, 21, 28, 52]. Distribution and
revocation of access in encrypted ﬁle sharing systems was
studied in [61, 62].
SUNDR [35] and Depot [38] address data integrity, SPORC
[20] adds conﬁdentiality to SUNDR, Radiatus [14] isolates
individual users’ data. Verena [32] is a Meteor extension
that addresses integrity, not conﬁdentiality.
Side channels in Web apps. Chen et al. [13] demon-
strated powerful side-channel attacks on HTTPS-protected
Web apps that exploit packet sizes and other features. These
vulnerabilities are “fundamental to Web 2.0 applications.”
Sidebuster [63], SideAuto [29], and the system by Chapam
and Evans [12] help discover side-channel vulnerabilities in
Figure 4: Recovery rates for simulated query brute-force attacks
against Ubuntu IRC dataset.
than a bag of words. Figure 5 shows examples of recovered
messages without stopword removal or stemming for one of
the experiments using 2,000 queries.
The exact query distribution has a large eﬀect on recovery
rates. Using uniformly sampled queries means that all but
a small fraction of the 180,000 unique keywords only appear
once in a given year’s log ﬁle. This would greatly reduce
the eﬃcacy of the attack. Unfortunately, there has been no
systematic study of real query distributions in this setting
to guide our experiments. Therefore, we chose to sample
queries from the keyword frequency distribution, following
prior work [9] and because it is unlikely that real user queries
would be approximately uniform.
With stemming and stopword removal, the recovery rate
for 100 queries is almost 10% lower. This diﬀerence in re-
covery rates becomes smaller as the number of queries in-
creases. While less information is recovered in this case
(since we recover only preﬁxes of words and cannot recover
stopwords), it still represents a signiﬁcant amount of partial
leakage about plaintexts.
The eﬀect of stemming on query and plaintext recovery
is not well understood. Previous work [9] pointed out that
stemming, in some sense, makes the adversary’s job easier,
because recovering a stemmed query for a word like “run”
also recovers the words “running,” “runs,” and “ran.” Stem-
ming also changes the keyword distribution of a corpus of