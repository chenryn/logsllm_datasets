漏洞利用代码调用NtGdiEngBitBlt这个原生API来触发[win32k!XLATEOBJ_iXlate](https://msdn.microsoft.com/en-us/library/windows/hardware/ff570642\(v=vs.85\).aspx)函数，后者使用了已损坏的那个处理函数。这样一来，控制流就会传递给之前已分配的一段shellcode。相对比而言，Duqu
2.0中的漏洞利用代码使用了Gdi32.dll中的[GetNearestPaletteIndex](https://msdn.microsoft.com/en-us/library/windows/desktop/dd144903\(v=vs.85\).aspx)函数，以便将程序执行权传递给损坏的回调处理函数。虽然这两个漏洞利用代码在某些地方有些相似，但根据这个不同点，我们可以判定这两个漏洞利用代码并不相关，此类漏洞利用技术有非常翔实的参考文档，因此也能解释这两段利用代码的相似性。
漏洞利用代码使用动态创建的系统调用（syscall）代码片段来调用原生的Windows API，如下所示。
shellcode执行期间的调用栈如下所示：
shellcode执行后，利用程序会使用一种常见的令牌交换（token-swapping）技术来将当前进程的权限提升到SYSTEM权限。在类似的EoP漏洞利用中我们经常可以看到这种技术。
**三、防护及检测方法**
前面提到过，这个零日漏洞利用程序没有针对诸如Windows
10之类的较新的系统。如果环境检查过程通过，那么漏洞利用代码就会在目标系统中执行，根据我们的测试结果，我们发现如果系统部署了其他的防护机制，那么漏洞利用程序就无法执行全部代码。我们可以分析一下这两种防护技术，一种是中期的防护方法，也可以称之为战术级防护方法，旨在打破漏洞利用的执行过程，另一种是长期的防护方法，也可以称之为战略级防护方法，旨在完全消除漏洞，阻止漏洞利用。
**3.1 战术级防护：阻止程序滥用pfnGetNearestFromPalentry**
漏洞利用代码中利用PALETTE.pfnGetNearestFromPalentry作为控制权传送点，微软安全研究员对这种技术已经跟踪了一段时间。事实上，我们一直在研究针对这种技术的战术级防护方法。2016年8月，在发布Windows
10周年更新版的同时，微软公布了一种战术级防护机制，目的在于防止程序滥用pfnGetNearestFromPalentry。当PALETTE函数指针被调用时，这种防护机制会检查函数指针的有效性，确保只有预定义的一组函数会被调用，防止相应的结构体被滥用。
**3.2 战略级防护**
除了上面描述的战术级防护机制外，Windows 10在64位内核中引入了SMEP、ASLR增强特性，也引入了基于虚拟化的安全（virtualization-based security，VBS）机制，可以阻止漏洞利用过程。
**3.2.1 管理模式执行保护**
SMEP（Supervisor Mode Execution Prevention，管理模式执行保护）是一种战略级防护特性，新版的Intel
CPU支持这一功能，自Windows 8以来，微软也引入了这种安全特性。
启用SMEP特性后，页表项（page table
entry，PTE）中的标志位作为用户/管理员（U/S）标志，可以指定页面处于用户模式或者内核模式。如果内核模式代码调用了某个用户模式页面，SMEP就会产生访问冲突，系统会触发错误检查过程，停止代码执行过程并报告安全冲突。这种机制可以阻止利用用户模式分配的可执行页面来运行内核模式下的shellcode，而这种运行机制是EoP漏洞利用程序常用的方法。
类似SMEP之类的战略级防护措施可以导致数以百计的EoP漏洞利用代码无效，从而显著提高攻击者的技术门槛，这类漏洞利用代码中不乏从内核态直接调用用户态shellcode的老式漏洞利用方法，如本文分析的CVE-2017-0005漏洞利用技术。
我们可以使用[Coreinfo](https://technet.microsoft.com/en-us/sysinternals/cc835722.aspx)这个工具来判断主机是否支持SMEP特性。该工具使用CPUID指令，在输出结果中显示支持SMEP特性的CPU以及平台。如下图所示，从工具的执行结果中，我们可知正在测试的CPU支持SMEP。Windows
8以及更高版本的Windows系统支持SMEP特性。
**3.2.2 Windows内核64位ASLR增强特性**
启用SMEP后，虽然攻击者被迫使用更为复杂的漏洞利用代码才能实施攻击行为，但根据安全会议以及安全事件中分享的技术方法，我们的确了解到有多种方法可能绕过SMEP保护机制。如使用内核ROP工具或者通过读写（RW）方法直接修改PTE都可以实现绕过目的。为了应对漏洞利用中不断出现的新技术，微软在Windows
10周年更新版中提供了[Windows内核64位ASLR增强特性](https://www.blackhat.com/docs/us-16/materials/us-16-Weston-Windows-10-Mitigation-Improvements.pdf)，通过随机化的内核地址增强了SMEP功能，避免基于直接修改PTE实现的漏洞利用技术。
**3.2.3 基于虚拟化的安全**
VBS（virtualization-based
security，基于虚拟化的安全）增强特性可以从另一个角度来防止内核中执行恶意代码。比如，[设备保护（Device
Guard）](https://technet.microsoft.com/en-us/itpro/windows/keep-secure/introduction-to-device-guard-virtualization-based-security-and-code-integrity-policies)会阻止执行内核内存未签名区域中的代码，当然也会阻止内核EoP代码的执行。设备保护中的增强功能也可以保护MSR、控制寄存器以及描述符表寄存器（descriptor
table registers）。这样一来，对CR4控制寄存器（包括SMEP区域的数据）未授权的修改会被立即阻止。
**3.3 Windows Defender ATP功能**
在创造者更新版系统中，Windows Defender ATP可以检测通过修改CR4寄存器实现的SMEP攻击技术。Windows Defender
ATP可以监控CR4.SMEP标志，一旦出现不一致就会报告相应情况。此外，Windows Defender
ATP可以监控进程结构中的令牌区域状态，以检测令牌交换攻击。
**  
**
**四、总结**
在较新的系统中，本文分析的CVE-2017-0005漏洞利用代码会直接停止工作，以避免引起用户警觉，因此这些系统不会受到该工具影响。攻击者没有特别去关注老版本的系统，但有意识地在规避新的硬件以及操作系统平台（如Windows
10周年更新版）中所使用的安全增强特性。虽然我们一直在针对特定的漏洞来发布特定的补丁，但从本文对攻击者行为的分析来看，系统内置的防御机制（如SMEP、ASLR增强机制以及VBS机制）可以提供一种弹性的防御屏障。
与创造者更新版一起发布的Windows Defender
ATP（[公众预览版](https://blogs.microsoft.com/microsoftsecure/2017/03/13/whats-new-in-the-windows-defender-atp-creators-update-preview/)）能够检测端点上的漏洞利用行为，进一步扩展了这种防御屏障。在即将发布的增强特性中，Windows Defender
ATP可以发布安全警报，以便安全操作人员第一时间察觉EoP攻击行为，采取对应的响应动作。大家可以阅读我们之前发表的分析跨进程注入技术的[文章](https://blogs.technet.microsoft.com/mmpc/2017/03/08/uncovering-cross-process-injection-with-windows-defender-atp/)，进一步了解Windows Defender
ATP如何检测复杂的攻击行为。
除了加强对EoP利用技术的通用检测方法之外，微软安全研究员同时也在积极收集属于ZIRCONIUM的威胁情报以及特征信息，这一组织正是使用CVE-2017-0005漏洞利用技术的组织。我们会向Windows
Defender ATP客户推送综合威胁情报，分析正在活跃的攻击组织以及他们的攻击方法。
Windows 10企业版中集成了Windows Defender ATP，大家可以[免费试用](https://www.microsoft.com/en-us/WindowsForBusiness/windows-atp)。