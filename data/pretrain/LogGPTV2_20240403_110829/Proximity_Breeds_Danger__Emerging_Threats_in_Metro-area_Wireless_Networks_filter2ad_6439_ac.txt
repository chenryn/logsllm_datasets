16th USENIX Security Symposium
327
Finally, we do not consider the possibility of bypass-
ing the AP to directly infect hosts within range using low
level techniques because these depend on the available
device driver and may not be widely available. We also
ignore host mobility except that we assume the epidemic
starts from 50 random locations to avoid artiﬁcially con-
ﬁning the worm to a sparse disconnected portion of the
city.
The infection time for one hop is determined by four
factors: scanning time, association time, IP acquisition
time and transmission time. Based on our wildﬁre worm
prototype, we assume a scanning and association time
of about 1.5 seconds. We do not model DHCP interac-
tion in our simulations as the worm can simply hijack an
IP address. With an effective throughput of 14 mbps
and 8 mbps for typical 802.11g and 802.11b networks
respectively, the transmission speed is between 1 Mbytes
and 1.7 Mbytes per second. Since the bandwidth will be
shared among hosts, each host gets a transmission speed
of a few hundreds kbytes/seconds. We assume a trans-
mission speed of 100 kbytes/sec per host. For a worm
size of 100K – which should be sufﬁcient – the transmis-
sion time is about 1 second. A simulated worm-infected
node infects its neighbours sequentially using these pa-
rameters.
Each simulation consists of 20 runs; for each run we
start the infection from 50 different randomly selected
hosts. We collect the mean values across runs of infec-
tion prevalence over time.
Figure 3 is a plot of infection prevalence over time
for a “push” worm. Dense cities are infected very fast:
80% of New York and Chicago in less than 20 min-
utes. San Francisco and Philadelphia are infected fast
as well: about 50% of San Francisco and Philadelphia
are infected in 45 and 11 minutes respectively. A wild-
ﬁre worm does not spread signiﬁcantly in Los Angeles
and Las Vegas, but on a longer time scale a worm could
still spread with the help of user mobility. The worm can
spread fast as long as there are enough APs to maintain
connectivity, but high density may even bog down the
worm in some cases. In absolute numbers, we see that an
attacker could quickly gain access to ten’s of thousands
of hosts in most cities. The attacker could start simul-
taneous, independent epidemics in many cities using the
Internet to infect a few seed hosts.
100
)
%
(
l
e
c
n
e
a
v
e
r
p
n
o
i
t
c
e
f
n
I
90
80
70
60
50
40
30
20
10
0
0
10
20
30
40
50
60
Infection Time (min)
Bay Area: 32% (12.5K hosts) in 78m
Chicago: 88% (38.1K hosts) in 70m
Dallas: 27% (7.5K hosts) in 41m
Los Angeles: 5% (1.1K hosts) in 6m
Seattle: 39% (19.4K hosts) in 85m
Las Vegas: 15% (3.6K hosts) in 51m
New York: 86% (27.3K hosts) in 77m
Philadelphia: 61% (5.3K hosts) in 46m
San Francisco: 53% (11K hosts) in 76m
Singapore: 16% (2.1K hosts) in 17m
Figure 3: Spread of a wild-ﬁre worm.
days (78%) in 2006, exploit code for known, unpatched
critical ﬂaws in pre-IE7 versions of the browser was pub-
licly available on the Internet, and there were at least
98 days in which no software ﬁxes from Microsoft were
available to ﬁx IE ﬂaws that criminals were actively us-
ing to steal personal and ﬁnancial data from users [39].
For at least 256 days (70%) in 2005, Internet Explorer
contained unpatched vulnerabilities where the exploit
method had been publicly disclosed but was not neces-
sarily being used, and for at least 38 days in 2005, IE was
vulnerable to unpatched critical security ﬂaws that were
being actively exploited [38]. A fully patched Internet
Explorer installation was known to be unsafe for 98% of
2004, and for 200 days (54%) there was a worm or virus
in the wild exploiting one of those unpatched vulnerabil-
ities [11]. For Firefox, there were 56 days (15%) in 2004
where a publicly known remote-code execution had not
yet been thwarted with a patch [11].
2.6.2 Worm simulation
To understand wildﬁre worm propagation, we simulate
the outbreak of a worm in nine well-known US cities
and Singapore. For this we relied on publicly available
maps of Access Point locations from the Wigle.net [10]
“wardriving” database, as well as empirically derived
data for the city of Singapore. From these maps, we only
consider open APs where the worm can spread without
having to crack the encryption or the password.
Available war-driving maps chart APs but not con-
nected hosts, so we had to populate them by randomly
distributing hosts around APs. Based on our war-driving
measurements and assuming a pervasive vulnerability,
we distribute an average of 0.5 hosts per AP with Pois-
son distribution at an exponentially distributed distance
of 10 m on average. We model effective AP range as
omnidirectional with a radius of 90 m.
As for pull worms, we brieﬂy summarize the simula-
tion results here without a ﬁgure. Their simulated spread
is limited compared to push worms – prevalence of pull
attacks is limited to 60% in 3 hours for New York and
Chicago, but they are potentially more dangerous, as
they can take advantage of more vulnerabilities. They
are slower because the infection time must include wait-
ing for the victim to offer an opportunity for infection in
the form of a DNS requests or TCP connection. On the
328
16th USENIX Security Symposium
USENIX Association
other hand, the worm can wait in parallel for any vic-
tim to become active. We use a very rough estimate of
10 minutes for waiting time to get an idea of the time
scales involved, acknowledging that some machines may
have no browsing activity at the time. The pull worm
also requires higher density since we assume a shorter
range of 60 m. Weaker antennas and increased interfer-
ence typically weaken client transmission characteristics
when compared with APs.
Overall, these time-scales suggest that automated de-
fenses are crucial for defending against wildﬁre worms.
3 Large-scale Wiﬁ Spooﬁng
One key property of open 802.11 networks is that they
are built around a broadcast medium, where any wire-
less station can transmit wireless frames, and can listen
to all other frames transmitted on the network. This is
reminiscent of shared Ethernet segments of the 90’s.
This property makes wireless LANs susceptible to
spooﬁng and injection attacks, as discussed extensively
in the context of wired Ethernet (but effectively disap-
peared with the emergence of switched Ethernet). The
basic idea is that an attacker can monitor the communica-
tion between hosts on the wireless network, or between a
host on the wireless network and an external party. If the
communication is not properly encrypted, the attacker
can elicit session state through eavesdropping, and if the
communication is not authenticated, he can then inject
frames to one session endpoint pretending to come from
the other session endpoint.
Most protocols, such as DNS, DHCP and TCP are sus-
ceptible to this attack. In the case of DNS, the attacker
can watch for outgoing DNS queries and inject responses
pointing to a host under his control. For TCP the attack
is similar – all the attacker needs to know is the current
state of the connection in terms of sequence numbers. At
connection setup, he may even completely take over the
connection by injecting the proper SYN-ACK, resulting
in the legitimate endpoint being out of sync. Injection
is also possible at any point in the connection as long
as the attacker can time injection attempts to properly
deliver TCP segments to the victim network stack. The
DHCP protocol can be spoofed to have a victim use an
IP address and default gateway that gives the attacker full
control over all of his trafﬁc. However, it may be less at-
tractive than DNS and TCP spooﬁng as the attacker has
to wait for the victim to refresh his DHCP lease, or else
attack only hosts that have connected after the attacker
has obtained access to the wiﬁ network.
While in the 90’s such attacks were seen as enablers
for unauthorized access, in today’s threat landscape they
are more likely to be used for “modern” attacks such as
phishing, spam and exploit injection. In the previous sec-
tion we brieﬂy discussed how injection can be used to
propagate a worm through client-side vulnerabilities. In
this section we focus on spooﬁng primarily for the case
of launching phishing attacks, and discuss ways to detect
and prevent them. DNS spooﬁng is highly attractive for
phishing as, for example, the attacker may set up a mock
banking website that would relay manipulated requests
to the real site in a man-in-the-middle fashion. We note
that in this case, two-factor authentication cannot help.
Similarly, TCP injection can be used to insert redirection
instructions, advertisements, or spam to otherwise legiti-
mate Web pages. Sophisticated attacks can even subvert
user’s services, such as using a victim gmail account, etc.
The use of such techniques in wiﬁ for phishing has
been documented previously. The so-called “parking lot
attack” involves the attacker being in physical proximity
to the target network. While this attack may be interest-
ing by itself, we are not aware of any extensive use of
this technique. One main disadvantage is that the physi-
cal proximity constraint increases the risk to the attacker,
especially in environments with pervasive CCTV cover-
age that can be used for forensics. In the context of this
paper we explore how proximity enables remotely con-
trolled bots to be used for such activities. In this case,
the attacker can acquire access to a wiﬁ-enabled host lo-
cated in a wiﬁ-rich location.
In contrast to traditional
Trojans, the attacker need not try to elicit information
from the owner of the actual machine that is being ex-
ploited. Rather, the attacker may perform spooﬁng on
any wireless network within range from the host under
his control using channel hopping and/or temporary as-
sociation for the duration of the attack. The dense use of
wiﬁ in metropolitan areas makes this model quite attrac-
tive, as it may signiﬁcantly amplify the attacker’s capa-
bilities.
3.1 Analysis
To determine the effectiveness of spooﬁng attacks in
terms of scale we rely on the same publicly-available wiﬁ
maps used for analyzing wildﬁre worms. We attempt to
get a rough estimate of the number of access points that
hosts on the map can connect to. As we only have access
point locations, we add hypothetical hosts within range
from each access point. We distribute 1 host per AP and
assume a communication range of 60m.
We compute the number of neighboring APs for each
host, that is, all APs within range excluding the AP it is
directly connected to. We consider only “open” APs that
do not use any wireless security protocol, even though
the attacker may well be able to crack into WEP-enabled
networks using well-known attacks and tools.
The results for our analysis on 10 different metro areas
are shown in Figure 4. We see that in half of the cities 90-
99% of all hosts can connect to at least one more neigh-
boring AP; 20-50% of hosts can connect to at least 10
USENIX Association
16th USENIX Security Symposium
329
Bay
Chicago
Dallas
Los Angeles
Las Vegas
NYC
Philadelphia
San Francisco
Seattle
Singapore
s
r
e
s
u
f
o
n
o
i
t
c
a
r
f
.
l
u
m
u
C
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
1
10 
1000
Number of neighboring APs within range (log−scale)
100
Figure 4: Number of WLAN networks observable from
random hosts in metro areas (range 60 m).
Figure 5: Spooﬁng defense space.
additional APs; and a small but non-negligible number
of hosts, as high as 10% in Chicago are within range of
more than 100 APs. Unsurprisingly, the results are worse
for Chicago, which seems very densely populated, and
less so for relatively sparse areas.
Overall, the results conﬁrm our fear that controlling
wiﬁ-enabled hosts in densely populated areas can be
highly attractive to attackers.
4 Wiﬁ tracknets
The proliferation of city-wide wiﬁ networks has already
raised serious concern over privacy implications. Privacy
advocates fear that wiﬁ networks can be used to record
location information for the operating ISPs, their part-
ners, and possibly law enforcement, raising concerns that
wiﬁ can be used to track general user behavior in a ”Big
Brother” fashion.
However worrying this scenario might appear, it can
be classiﬁed as a mere nuisance when compared with
the possibility of anyone being able to remotely set up
a tracking system, without even having to set up physical
infrastructure. Such systems, which could be termed as
Tracknets can be deployed using a reasonably sized bot-
net, providing a user-tracking mechanism that can oper-
ate across wireless network boundaries. Criminal gangs
are known to operate marketplaces for bots, sometimes
with speciﬁc features such as high bandwidth and CPU
power, priced between $1 and $40 per compromised PC
according to security exprerts who have monitored IRC
chat room echanges [54]. It is conceivable that attributes
such as wiﬁ connectivity, and location within a metro-
area could be added to the list of features to facilitate
attacks such as those described here.
Such a botnet can then track location information [16],
possibly coupled with user-proﬁles that can span across
heterogeneous wireless LANs. The location of the zom-
bies comprising the bot can be infered from the ESSID
of their AP using public wiﬁ maps. (In fact, this service
is already provided by companies such as Navizon and
Skyhook.) The number of users that can be tracked us-
ing Tracknets and its coverage are commensurate with
the size of the botnet population and the amplifying ef-
fect of proximity, similar to the spooﬁng threat discussed
in the previous section.
Several services can leak signiﬁcant amounts of
privacy-sensitive information. This information can, in
turn, be used for targeted Phishing and spam attacks,
blackmail, and for pre-attack reconnaissance such as
building hit-lists.
In addition to high-information-leak
vectors, several techniques can provide personal infor-
mation at a lower granularity that might not be able to
distinctly identify individual users but can be used to
classify sets of users according to broader set of crite-
ria such as OS version version, wireless driver informa-
tion and general browsing behaviour. In this section we
brieﬂy examine some of the most obvious tracking vec-
tors. Our investigation is far from exhaustive and only
scratches the surface of possible ways that users could be
tagged and tracked. Nevertheless, the vectors we discuss
show at least one set of techniques that seem threaten-
ing enough by themselves, and may be representative of
other approaches.
MAC address The obvious way to track users across
heterogeneous WLANs is to use the MAC address as
unique identiﬁer. Trackers can use this information to
correlate any other behavioral information to a MAC
address to easily create proﬁles. Fortunately, although
MAC addresses are permanent by design, there exist a
number of mechanisms that allow users to change the
identiﬁer. Gruteser et al [32] introduce the idea of short-
lived disposable MAC addresses as a technique for the
reduction of the effectiveness of location tracking. How-
ever, randomizing MAC addresses often leads to prob-
lems. For example, several ISPs use MAC addresses
330
16th USENIX Security Symposium
USENIX Association
O
P
Q
P
R
S