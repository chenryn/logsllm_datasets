title:The Final Nail in WEP's Coffin
author:Andrea Bittau and
Mark Handley and
Joshua Lackey
The Final Nail in WEP’s Cofﬁn
Andrea Bittau
University College London
PI:EMAIL
Mark Handley
University College London
PI:EMAIL
Joshua Lackey
Microsoft
PI:EMAIL
Abstract
The 802.11 encryption standard Wired Equivalent Pri-
vacy (WEP) is still widely used today despite the numerous
discussions on its insecurity.
In this paper, we present a
novel vulnerability which allows an attacker to send arbi-
trary data on a WEP network after having eavesdropped a
single data packet. Furthermore, we present techniques for
real-time decryption of data packets, which may be used
under common circumstances. Vendor produced mitiga-
tion techniques which cause frequent WEP re-keying pre-
vent traditional attacks, whereas our attack remains effec-
tive even in such scenarios.
We implemented a fully automatic version of this attack
which demonstrates its practicality and feasibility in real
networks. As even rapidly re-keyed networks can be quickly
compromised, we believe WEP must now be abandoned
rather than patched yet again.
1. Introduction
Everyone knows that
the Wired Equivalent Privacy
(WEP) algorithm is broken, but only a minority manage to
recover keys successfully in practice. The reason for this
is partly because these attacks require long waiting times.
As many believe that it is unlikely for an attacker to spend
hours physically waiting around a network, people prefer
to adopt WEP rather than seeking more sophisticated and
possibly more difﬁcult to manage security solutions. This
will no longer be the case as with the fragmentation attack
described in this paper, hours become minutes.
Although we evaluate the complexity of recovering a
WEP key, the main scope of our work is to emphasize the
threat of attacks which do not ever require the key. Some
of these attacks were introduced in the past, although they
were considered highly impractical. We provide the miss-
ing link, making these attacks even more practical (in the
short-run) than ones which recover the key.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Region
London
Seattle region
WEP WPA 802.11i
76
85
20
14
4
1
Table 1. Popularity (%) of encryption
schemes used in encrypted networks.
1.1. Who Uses WEP?
There is no reason in scrutinizing WEP if it is no longer
being used. However, contrary to popular belief, WEP is
still highly deployed. To sustain our claims, we decided to
provide some evidence that WEP really is out there.
Although Wi-Fi Protected Access (WPA) [32] has been
available for some time, and 802.11i [19] is also now avail-
able, few networks use these more secure solutions. We
wrote monitoring software to assess the current situation
and conducted a survey of 400 wireless networks in Lon-
don and 2,539 networks in the Seattle region. In both cases,
about half of the networks used encryption. In London, 76%
of the encrypted networks in our sample used WEP, and in
Seattle 85% of them used WEP. Although vendors recom-
mend upgrading to to WPA or 802.11i, only a minority of
users seem to use these solutions. The complete results of
our survey are summarized in Table 1.
Care was taken to allow legacy WEP hardware to sup-
port WPA, although in practice, new cards are frequently
needed. This is especially true for WPA2 where previous
cards were not fast enough to encrypt at full link speed us-
ing AES. Perhaps this is why WEP is still used—it is the
only lowest common denominator that everyone supports.
For additional security, some vendors have recom-
mended solutions that involve using WEP and dynamically
re-keying it, in order to protect against its weaknesses. As
we will show, such workarounds do not protect against all
the attacks described in this paper. Thus, we believe that
our discoveries on WEP have practical relevance even to-
day, and should be cause for concern.
The rest of this paper is organized as follows.
In the
next sections we describe the operation of WEP followed
keystream
{
IV + key
RC4
{seed
Plain text
0
1
1
⊕
=
1
1
0
0
0
0
Cipher text
1
0
1
Figure 1. WEP encryption.
by a history of how it has been attacked. Our fragmentation
attack is described in Section 2 which details how to trans-
mit data, decrypt and ultimately recover the key. Section 3
analyzes the practical issues we needed to address to suc-
cessfully implement the attack. Results, including cracking
times, are presented in Section 4. In Section 5 we summa-
rize the lessons learnt from WEP’s history and we conclude
in Section 6.
1.2. WEP Operation
WEP is a stream cipher used to encrypt the data portion
of data packets in 802.11 networks. The 802.11 header is al-
ways in clear-text and both management and control frames
are transmitted unscrambled. WEP uses RC4 [28] and the
802.11 standard [17] speciﬁes a 40-bit pre-shared key, al-
though 104-bit keys are commonly used today. Figure 1
shows the process of encryption. A seed is constructed by
pre-pending a 24-bit Initialization Vector (IV) to the secret
key. This seed is used to set up RC4’s state via the Key
Scheduling Algorithm. The output of RC4’s Pseudo Ran-
dom Generation Algorithm (known as a keystream) is XOR-
ed with the clear-text to produce the cipher-text. Before en-
cryption, a checksum (CRC32) of the data is appended to
the message body and encrypted with it. Decryption is sim-
ilar: the cipher-text is simply XOR-ed with the keystream,
and the CRC is checked.
The IV chosen for producing RC4’s seed is pre-pended
in clear-text in the payload being sent. Normally, each data
packet will have a different IV. In practice, implementations
tend to use a linear counter for their IV generation. This
counter increments by one, each time a packet is sent.
1.3. Keystream Details
Each different IV produces a different keystream, since
the RC4 seed will have changed. A single secret key will
therefore produce 224 different keystreams. In essence, both
WEP encryption and decryption are an XOR with one of
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
these keystreams. To decrypt a packet, the keystream pro-
duced from the IV speciﬁed in the packet must be XOR-ed
with the cipher-text. To encrypt a packet, the requirements
are more relaxed: XOR the clear-text with any keystream.
Although a normal station should not do so, it is possible to
know a single keystream and transmit many different pack-
ets using the same keystream and IV. Thus, by recovering
one keystream, an attacker may transmit any data and also
decrypt payloads which use that keystream.
XOR (denoted as ⊕) has the property that cipher ⊕
clear = keystream. Therefore, one way of recovering the
keystream is by knowing the cipher-text and clear-text and
by performing a XOR of the two. The cipher-text can be
obtained by eavesdropping a packet. If the keystream is re-
covered from that cipher-text, then transmission may occur
by always re-using the IV from the captured packet. That
keystream may also be used to decrypt any future pack-
ets using that IV. However, the problem in calculating the
keystream from the cipher-text is knowing the clear-text.
1.4. History of WEP Attacks
WEP has a long history of vulnerabilities and “ﬁxes”.
Initial attacks did not seem very practical, so vendors pre-
ferred not to invest in shipping new security solutions, but
rather, they provided patches to mitigate these difﬁcult to
achieve attacks. Attacks evolved over time, and new ones
were discovered, posing more serious threats to WEP. Once
again, the industrial response was in providing further miti-
gation techniques. In the following sections we summarize
the main problems WEP faced and how vendors responded.
1.4.1. Brute-force
The most naive attack is a brute-force which tries all pos-
sible keys until the correct one is found. The 802.11 stan-
dard speciﬁes a 40-bit WEP key. An exhaustive search on
a single modern machine would require less than a month
to complete—not impossible, especially if the task is dis-
tributed. It was noted that many implementations had an op-
tion of entering a human readable pass-phrase which would
then be converted into a WEP key. Some of these im-
plementations made use of a conversion algorithm which
would generate keys with only 21 bits of entropy [30].
Other implementations would convert a pass-phrase into a
hex key by using the ASCII values of its characters. These
non-standard mechanisms for entering a pass-phrase often
reduced considerably the difﬁculty of brute-force attacks.
Perhaps, a standardized algorithm for hashing a pass-phrase
into a WEP key would have prevented simple brute-force
attacks, and would even have been useful (humans tend to
prefer passwords rather than hex digits). Vendors provided
support for 104-bit WEP which was effective against brute-
force.
1.4.2. Keystream re-use
Cryptanalysis on WEP demonstrated that the algorithm’s
security is independent from its key [21, 11]. Early attempts
to improve WEP’s security by increasing its key size were
therefore futile. If a keystream is recovered, it is possible
to decrypt data which uses that keystream, and to trans-
mit. The clear-text must be known in order to recover a
keystream. There was no major concern for these vulner-
abilities because it was considered impractical to know the
clear-text of data.
Mechanisms for reliably discovering a keystream were
later discovered [2, 8, 27]. The most practical relied on
Shared Key Authentication to be enabled, which was a
mechanism for preventing un-authorized access to a net-
work. In this scheme, the AP sends a clear-text challenge
to the authenticating peer. The peer authenticates by re-
sponding with the encrypted version of the challenge. By
snooping this transaction, the attacker has a cipher-text and
plain-text pair which he may XOR in order to recover a
keystream. The 802.11 standard identiﬁes this scenario and
discourages stations for re-using the IV from this hand-
shake, since future trafﬁc using it may be decrypted. What it
fails to mention is that an attacker may transmit indeﬁnitely
by using that keystream.
The response to this attack was to discourage the use of
this authentication scheme and to use mechanisms such as
SSID cloaking and MAC address ﬁlters. Of course, this
approach is ﬂawed—eavesdropping an association request
and spooﬁng a MAC address are both trivial. There was no
real pressure to eliminate the problem of keystream re-use.
The main argument was that a network has 224 keystreams
making the complete attack too complex. Despite the obser-
vation made that in practice clients use a limited number of
these keystreams, re-use still was not seen as a major threat.
1.4.3. Weak IV Attacks
Further study on WEP revealed that the key could be cal-
culated [13]. This attack required gathering ≈ 1, 000, 000
packets of which some used “weak” IVs. Actually, these
RC4 properties were ﬁrst noted four years before WEP be-
came available [31]. A single weak IV reveals a correct key
byte 5% of the time. By gathering a high number of statis-
tics (IVs) the most probable key may be calculated. Weak
IVs were seen as a major threat to WEP, perhaps because
for the ﬁrst time there was an automated tool which could
recover the key. Now even technically unskilled hackers
could compromise a network. The response was in building
hardware which would ﬁlter these weak IVs. By patching
this issue, vendors have just made the keystream re-use vul-
nerabilities more serious—there are now even fewer than
224 keystreams. The weak IV attack was nevertheless mit-
igated, since only in certain circumstances and after having
gathered a great deal of statistics, could the key be recov-
ered. It could take days.
It turned out that there were more weak IVs than the ones
originally published [15]. Vendors had to implement new
ﬁlters although the problem was already becoming obvious.
A single legacy host could compromise the entire network.
Furthermore, weak IVs which yielded correct results with
higher probability (13%) were noticed [29] although their
details were never published. Vendors could not implement
ﬁlters for IVs which were privately being exploited [5, 24]
although their only salvation was the fact that these attacks
still required long waiting times (≈500,000 packets). These
IVs were later rediscovered and made public [23].
In practice, even after the public releases of tools which
used high probability IVs, a large number of packets (≈
1, 000, 000) could still be needed to recover the key. This is
due to the fact that most hardware ﬁlters the old weak IVs,
so the attacker can only use the new IVs. The hardware pro-
tections and the discovery of the new IVs effectively can-
celed each other out. We still have not seen hardware which
ﬁlters the higher probability IVs. Perhaps, this is so because
the public implementations which exploit these IVs do not
use use ﬁlters, whereas the previous generation of tools did,
allowing vendors to simply copy the ﬁlter.
1.4.4. Modern Attacks
There are two main problems with the attacks of the past.
One is how to recover a keystream reliably and the other is
how to speed up the weak IV attack. Both have been solved.
It is possible to recover one byte of keystream after sending
at most 256 packets [22, 1] (a method will be described in
Section 2.4.2). To speed up the weak IV attack, it is possible
to replay WEP packets. If a packet which elicits a response
is replayed, trafﬁc will be generated on the network and the
attacker no longer needs to passively wait for data—he can
actively cause trafﬁc which may use a “weak IV”.
At this point, vendors realized that WEP was dead. A
skillful attacker can compromise a network in hours by
using these vulnerabilities. However, the mitigation pro-
cess continued as it was realized that if a WEP key is
changed often enough, it was possible to eliminate the prac-
tical threat—attackers will not have enough time to com-
promise the network. EAP based solutions which fre-
quently re-key emerged and are being recommended by
vendors [10, 9, 18].
1.4.5. Our Contribution
We discovered a novel attack which may compromise a
WEP network quickly and reliably. Our fragmentation at-
tack is still applicable against networks which re-key fre-
quently, since it may be performed almost instantly. By
publishing this work we hope it becomes obvious that WEP
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
0xAA
0xAA
0x00 0x08 ??
{
{
{
{
{Ether type
ORG code
DSAP
SSAP
CTRL
0x00 0x00
0x03
Figure 2. LLC/SNAP header contained in
practically all 802.11 data frames.
must not be used and patches to it will not solve the core
issues. Furthermore, we hope this paper serves as a case
study as to what happens in practice when things go wrong.
Even though attacks only seemed theoretical back in 2000,
serious action had to be taken immediately. Until today, ad-
vances have been made in breaking WEP but there has not
been such a push in trying to eliminate it completely.
2. The Attack
In the next sections, we describe a series of attacks which
may be used to transmit and decrypt data on a WEP net-
work. In general, transmission is simple and the complexity