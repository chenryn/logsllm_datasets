the CB. In such a setup, the trojan can send ”1” by execut-
Figure 1: Organization of RNG Module in Intel Processors
quality of randomness is then veriﬁed by performing sev-
eral health tests. Bits that passed the health tests form a
pair of 256-bit numbers that are fed into the Conditioner.
This circuitry distills the entropy into more concentrated
single 256-bit sample. The 256 bits are stored as four 64-bit
random values in Conditioner Buﬀer (CB), thus allowing to
serve up to four rdseed instructions requiring 64-bit seeds.
The outputs of the conditioner are then used directly by
the rdseed instruction logic. In addition, the output bits of
the conditioner are used to seed the deterministic random
number generator. This generator uses CTR DRBG pseudo
random number generator and is accessed by the rdrand
instruction.
While both of the above instructions are used to obtain
random bits, there are signiﬁcant diﬀerences between them.
The rdrand instruction produces deterministic random num-
bers that depend on the instruction’s previous outputs. Con-
sequently, the rdrand instruction should not be used for se-
curity critical tasks requiring true randomness, such as the
key generation. In contrast, the rdseed instruction outputs
true random numbers. However, the rdseed instruction has
a much lower throughput.
Based on our observations, while the throughput of the
rdrand instruction is almost always suﬃcient to service
all hardware threads constantly requesting pseudo-random
bits, the resources of the rdseed instruction are easily ex-
haustible. This temporal exhaustion of resources needed by
the rdseed instruction is the key observation exploited in
creating the RNG-based covert channel.
Both rdrand and rdseed instructions explicitly inform the
software on about successful completion by setting the carry
ﬂag. The rdseed instruction does not have any fairness
mechanism built into it, therefore the availability of the
random bits at the time of high demand has probabilistic
nature.
Modern processors, such as the Intel’s Skylake, are de-
signed as complex System-on-Chip (SoC) with many com-
ponents placed on the CPU die and interconnected to-
gether. These components include multiple cores, banks of
the shared last-level cache, graphics processing unit (GPU),
memory and PCI-express controllers and other peripheral
hardware units. Recent Intel processors utilize the ring-
based interconnect topology [27] in which all on-chip com-
ponents are connected in a closed loop. The RNG module
is organized as an independently clocked device built-in into
the processor chip and connected via the ring. While pub-
licly available documentation does not specify how exactly
the RNG module is placed on this network, it is reasonable
to assume that the connection is similar to any other device;
this assumption is supported by the results of our experi-
Entropy SourceHealth TestsConditionerConditioner BufferDeterministicRNGseedCore 0Core 1Core 2Core 3rdrandrseeding a single rdseed instruction and it can send ”0” by not
executing it. Hence, in order to estimate the time required
to transmit a single bit from the trojan to the spy, we need
to know the latency of the rdseed instruction and the rate
at which the CB is replenished. This communication proto-
col’s algorithm is demonstrated in the pseudo-code form in
Listing 1.
To empirically determine the latency of the rdseed in-
struction, we developed a benchmark that executes and mea-
sures the latency of 2 000 rdseed instructions. To allow the
RNG to reﬁll the CB during each iteration, we executed 1
million nop instructions before executing the rdseed instruc-
tions. Executing this benchmark, we observed that the av-
erage latency of rdseed instructions was not identical when
they were issued from diﬀerent CPU cores. The results of
this experiment are presented in Figure 2 with data collected
on each core shown in a diﬀerent color. As seen from the
ﬁgure, the number of cycles taken by the rdseed instruction
is lowest on core 0 (average of 402 cycles), and it is the high-
est on core 3 (417 cycles). The Simultaneous Multithreaded
(SMT) virtual cores (cores 4, 5, 6 and 7) have similar la-
tencies. Such variation in instruction latencies can be at-
tributed to the speciﬁcs of the communication between the
computing cores and the peripheral RNG module through
the ring interconnect. For the CPU with 4 Ghz frequency,
each rdseed instruction takes about 0.1 microsecond on the
average.
The CB update rate was determined using the following
experiment. We executed a stream of rdseed instructions
on a core, checked their success status and counted the num-
ber of successful instructions. Since the core issues requests
for random seeds at much higher frequency than the RNG
hardware can produce, our experiment estimates the max-
imum throughput of the RNG and thus the reﬁll rate of
the CB. We observed that rdseed instructions can be suc-
cessfully executed each 0.32 microseconds. Therefore, the
CB is updated at a rate that is about three times slower
than the rate at which the rdseed instructions can execute.
Consequently, the CB update becomes the bottleneck in our
idealized covert channel scenario, thus determining the max-
imum theoretical capacity of such idealized channel. Assum-
ing that one bit can be transferred in 0.32 microseconds, the
resulting bit rate (and thus the channel capacity) is 3.125
Mbit/s. This number represents the upper bound on the ca-
pacity of a channel that can be obtained through the RNG
hardware.
4.2 Creating a Robust Channel
in Single-
Process Setting
A successful implementation of a covert channel requires
solving two orthogonal problems. The ﬁrst problem is how
to transfer data through the shared media eﬃciently and
with low error rate. The second problem is how to synchro-
nize the spy and the trojan processes. Since our main goal
is to study the methodology for using the RNG hardware as
a covert channel and to estimate its capacity, we primarily
focus on the ﬁrst problem. We address the synchronization
problem in Section 4.6.
In addition, synchronization pro-
tocols presented in prior works [22, 48, 55] can be used to
ﬁne-tune the timings of communication phases.
The assumptions used in the previous subsection for es-
timating the maximum channel bit rate cannot be met in
practice due to several reasons.
• The RNG hardware itself does not impose time lim-
its in which the CB must be reﬁlled. Although the
hardware derives random bits at a constant rate, the
built-in health checks can create some disparity and
thus the CB can be replenished at arbitrary time.
• Other system-level activity such as context switches
and accesses to shared caches by other processes can
distort the perfect synchronization of the trojan and
the spy.
• The RNG hardware is integrated into the processor
chip as one of the peripheral devices sitting on a shared
interconnect network. Therefore, the activity in this
network can interfere with the ﬁne-grain timing re-
quired for the idealized covert channel.
One option to bypass these limitations is to adapt the
protocols used by the trojan and the spy by using slower bit
rate or by using error-correcting codes [20]. However, such
optimizations would signiﬁcantly reduce the eﬀective capac-
ity of the channel, we describe the use of error-correcting
codes later.
We now examine the interference problem due to the ac-
tivity of other resources connected to the ring interconnect
in more detail. Through experimentation, we observed that
the Graphics Processing Unit (GPU) has the highest eﬀect
on the rdseed latency compared to other components con-
nected to the ring interconnect. This can be an artifact
of the RNG module placement on the ring, and high in-
terference between the GPU-generated traﬃc and the RNG
requests.
To assess the impact of such GPU interference, we mea-
sured the rdseed instruction latencies under two conditions:
1) the Graphical User Interface (GUI) is disabled and there
is no GPU activity in the system; and 2) the system per-
forms active 3D animation. Both parts of the experiment
were conducted on the same core. The results are presented
in Figure 3. As seen from the ﬁgure, the GPU activity in-
troduces periodic, but signiﬁcant delay into the RNG oper-
ation. The average values of the rdseed latency are 912 and
400 cycles with and without the GPU activity respectively.
The slowdown is only observed during the phases of active
animation. For example, GUI is enabled but the image is
not moving, the results are similar to the case without GUI.
Similar levels of interference were observed when the GPU
was performing 2D animation (for example, a video play-
back) or computations on the GPU were performed when
running OpenCL [49] code. On the other hand, our experi-
ments showed that CPU-intensive activity does not increase
the rdseed instruction latency.
Interference from the GPU makes it impossible for the
trojan process to perform high-accuracy manipulations re-
quired to create the idealized channel described earlier. In
particular, the variability of rdseed instruction timing intro-
duces uncertainty in terms of when the request for random
bits will be delivered to the RGN module. Thus, the tro-
jan process can no longer keep the exhausted state of the
CB, therefore making it diﬃcult to construct a channel that
exploits the ﬁne-grained capabilities of the RNG.
As an alternative to ﬁne-grain approach to channel cre-
ation, the trojan and the spy can use a more coarse-grained
approach of treating the entire CB as a single unit and en-
coding transmission bits by altering high and low contention
Protocol 1 Fine-grained communication protocol
DSend[N ], DRecv[N ] : N bits to transmit and receive; NP rime : Number of rdseed instructions to empty the CB
Trdseed : Time needed to execute rdseed instruction; TRef ill : Time needed for RNG to reﬁll one CB entry
TP rime : Time needed to execute NP rime rdseed instructions
wait(T ): Wait for time T ; rdseed(): Execute rdseed, returns False if failed
Trojan’s operation:
for i ← 0 to NP rime − 1 do
Spy’s operation:
wait(TP rime)
Description:
rdseed()
for j ← 0 to N − 1 do
if DSend[i] = 0 then
wait(TRef ill)
else
rdseed()
wait(TRef ill − Trdseed)
Trojan prepares
removing all of its entries
the CB by
for j ← 0 to N − 1 do
wait(Trdseed)
status ← rdseed()
if status = True then
DRecv[i] ← 0
DRecv[i] ← 1
else
Each cycle a single CB entry is
generated. Trojan transfers 1 by
consuming this entry, and 0 by
allowing the spy to consume it
Listing 1: A ﬁne-grained communication protocol (Protocol 1)
Figure 2: Latency of rdseed instruction on diﬀerent CPU
cores
Figure 3: Latency of rdseed instruction with and without
GPU interference
phases for the entire unit. To this end, we now describe a
protocol that creates the RNG channel that is resilient to
interference from the GPU and other hardware components
connected to the ring. The noise resiliency comes with a
slightly lowered channel capacity.
The pseudo-code of the coarse-grain RNG covert channel
is presented in Listing 2. Transmission of a single bit of
information through this channel consists of two stages. In
stage 1, the trojan creates a desired contention state of the
CB. If the trojan wishes to transmit a ”0”, it performs a
busy wait. The waiting time (TRef ill) is the time needed
for the CB to be reﬁlled, as determined by the CB reﬁll
rate. If the trojan wishes to send a ”1”, it executes NP rime
rdseed instructions. To equalize the time needed to send
both values prior to priming the CB, the trojan performs a
short wait 1 . The spy process remains inactive during stage
1 and waits for this stage to ﬁnish. During stage 2, the spy
probes the CB to determine the CB’s state by executing
NP robe rdseed instructions and checking their status.
If
any of these rdseed instructions fails, then the spy detects
the exhausted state of the CB, treating this event as the
reception of ”1”.
It is important to execute not one, but
several rdseed instructions in order to mitigate possible CB
reﬁll during the probing process, as the exact timing of such
reﬁll is impossible to predict. The trojan remains inactive
during stage 2.
The bit rate of this channel depends on the number of rd-
seed instructions required to exhaust the CB and to detect
such exhaustion, and the number of cycles required for the
CB to be fully reﬁlled. Therefore, to estimate the channel
bit rate, it is necessary to determine the values of NP rime,
NP robe and TRef ill.
The best values for NP rime and NP robe depend on the
capacity of the CB. Although the buﬀer itself is only 256-
bit long, it is constantly updated. Therefore, the practi-
cal capacity (the number of bits the CPU can receive from
the RNG without a failure) is higher than its size. We de-
termined such capacity by conducting the following experi-
ment. For each instruction sequence of size N , we performed
several steps. First, we execute a large number (1 million) of
Protocol 2 Coarse-grained communication protocol
DSend[N ], DRecv[N ] : N bits to transmit and receive
NP rime : Number of rdseed instructions to prime CB; NP robe : Number of rdseed instructions to probe CB
TP rime : Time for trojan to prime CB; TP robe : Time for spy to probe CB; TRef ill : Time for a full CB reﬁll
wait(T ): Wait for time T ; rdseed(): Execute rdseed, returns False if failed
Trojan’s operation:
for i ← 0 to N − 1 do
Spy’s operation:
for i ← 0 to N − 1 do
Description:
if DSend[i] = 0 then
wait(TRef ill)
else
1 wait()(TRef ill − TP rime)
for j ← 0 to NP rime − 1 do
rdseed()
wait(TP robe)
wait(TRef ill)
f ail ← False
for j ← 0 to NP robe − 1 do
status ← rdseed()
if status = False then
f ail ← True
if f ail = True then
DRecv[i] ← 1
DRecv[i] ← 0
else
Stage 1. Depending on the value
to be sent,
the trojan either
removes all entries from the CB
(primes it) or waits for the CB to
reﬁll
Stage 2.
The spy probes the
CB by executing a sequence of
rdseed instructions and checking