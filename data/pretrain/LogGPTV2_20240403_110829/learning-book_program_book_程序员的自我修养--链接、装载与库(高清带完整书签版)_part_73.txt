[stack]
[vdso]
命令cat/proc/self/maps 可以查看cat命令自1己的内存布局，我们可以看见地址0xfffe000
到0xfff000的地方被映射了vdso，也就是linux-gate.so.1。这个虚拟文件的大小为4096个
字节，因为这个文件在任何进程里都处于相同的位置，因此可以用如下方法将它导出到一个
真实的文件里：
$dd if/proc/se1f/mem of=1inux-gate,dso bs=4096 skip=1048574 count=1
此时，linux-gate.dso 的内容就是vdso的内容。接下来就可以用各种工具来分析它了。
首先用objdump来看看这个文件里有什么：
$ objdunp -T linux-gate.dso
linux-gate,dso:
文件格式elf32-i386
程序员的自我修养——链接、装载与库
---
## Page 423
400
第12章
系统调用与API
DYNAMIC SYMBOL TABLE:
ffffe400 1
ffffe478
d.text
-eh_frame_hdr 00000000
00000000
d
, text
ffffe480
1
d
-eh_frame
00000000
,eh_frame_hdr
ffffe604
1
d
.usele88
00000000
-useless
eh_frame
00000000
ffffe400
g
DF
.text
00000014
DO *ABS*
00000000
LINUX_2.5
_kernel_vsysca11
ffffe440 g
DF .text
00000007
LINUX_2.5
LINUX_2 .5
LINUX_2.5
ffffe420 g
_kernel_rt_sigreturn
DP
.text
00000008
LINUX_2.5
_kernel_sigreturn
可以看到，vdso导出了一系列函数，当然这里最值得关心的是_kermel_vsyscall函数。
这个函数负责进行新型的系统调用。现在来看看这个函数的内容：
objdump -d
1 --start-address=0xffffe400 --stop-address=0xffffe408
1inux-gate, dso
该命令从0xffe400处开始反江编8个字节，让我们看看结果：
$ objdunp -d --start-address=0xffffe400 --gtop-addres8=0xffffe414
linux-gate,dso
linux-gate,dso:
文件格式elf32-i386
反汇编.text 节：
ffffe400
ffffe400:
52
5 1
push
$ecX
ffffe401:
ffffe402:
55
pu8h
push
tebp
Bedx
ffffe403:
0f 34
89 e5
ffffe4051
AOU
$esp, $ebp
ffffe407 :
90
sysenter
nop
在这里出现了一个以前没见过的汇编指令sysenter。这就是Intel在奔腾2代处理器开始
提供支持的新型系统调用指令。调用sysenter之后，系统会直接跳转到由某个寄存器指定的
函数执行，并自动完成特权级转换、堆栈切换等功能。
在参数传递方面，新型的系统调用和使用int的系统调用完全一样，仍然使用EBX、ECX、
EDX、ESI、EDI和EBP这6个寄存器传递。在内核里也是通过SAVE_ALL将这些参数放
置在栈上。因此，我们可以自己调用这个_kernel_vsyscall函数来试试：
【小实验】
人工调用系统调用：
int main()(
char msg[] - *Hello\n*;
int ret ;
'call *stesi*
程序员的自我修养一链接、装载与库
---
## Page 424
12.3Windows API
401
:*=a* (ret)
"s(0xffrfe400).
:*a*(4),
"c*
b*
((1ong) msg),
((long) 1),
=d*((1ong) sizeof (msg)1) :
return 0;
读者应该还记得，在Linux下fd=1表示stdout，因此向fd=1写入数据等效于向命令行
输出，这个例子就是这个目的。我们在 main 函数里将_kermel_vsyscall 函数的地址赋值给
esicS"表示esi)），并且使用指令call调用这个地址。与此同时，还在eax中放入了系统调用
write的调用号（4），在ebx、ecx、edx中放入write的参数，这样就完成了一次系统调用，在
屏幕上输出了 Hello.
关于使用sysenter指令进入内核之后是如何执行的，在这里就不占用篇幅详细介绍了，
如果读者有兴趣，可以参考Intel的CPU指令手册，并且结合阅读Linux的内核源代码中关于
sysenter 的实现代码：/arch/i386/kermel/sysenter.c。
Q8A
Q: dd if=/proc/self/mem of=linux-gate.dso bs=4096 skip=1048574 count=1 这个命令是如何得
到vdso的印像文件的？
A：dd的作用为复制文件，if参数代表输入的文件，而of参数代表输出的文件。/proc/self/
mem总是等价于当前进程的内存快照，换甸话说，这个文件的内容就是dd的内存内容。
参数bs代表dd一次性需要搬运的字节数（这称为一个块），skip代表需委从文件开头
处疏过多少个块。count则表示须要搬运多少个块。
了解了dd参数的含义之后，这个命令的作用就清晰了。我们希望复制dd的内存映像
里地址0xfffe000之后的count=1个块（这里块大小=bs=0x1000=4096），那么就需要疏
过前面 0xmfe000个字节，也就是0xffe000/0x1000=FFFFE=1048574个块，因此 skip
设置为1048574。将这些数据输出为linux-gate.dso，就得到了这个虚拟文件的映像。
12.3WindowsAPI
API 的全称为Application Programming Interface，即应用程序编程接口，因此API 不是
一个专门的事物，而是一系列事物的总称。但是我们通常在Windows下提到API时，一般
就是指Windows系统提供给应用程序的接口，即 Windows API。
WindowsAPI是指Windows操作系统提供给应用程序开发者的最底层的、最直接与
Windows 打交道的接口。在Windows 操作系统下，CRT 是建立在Windows API 之上的。另
程序负的自我修养一链接、装载与库
---
## Page 425
402
第12章系统调用与API
外还有很多对WindowsAPI的各种包装库，MFC就是很著名的一种以C++形式封装的库。
很多操作系统是以系统调用作为应用程序最底层的，而Windows的最底层接口是
Windows API。Windows API 是 Windows 编程的基础，尽管 Windows 的内核提供了数百个系
统调用（Windows又把系统调用称作系统服务（System Service）），但是出于种种原因，微
软并没有将这些系统调用公开，而在这些系统调用之上，建立了这样一个API层，让程序
员只能调用API层的函数，而不是如 Linux一般直接使用系统调用。Windows 在加入 API
层以后，一个普通的fwrite(）的调用路径如图12-9所示。
Application
uefosd/
fwrite()
fwritel)
program.exe
Aibc.a
write()
write()
Libcmt.ib
ibc.so
msvcr90.dtr
CRT
bbc.a
Interrupt 0x80
Abc.50
NtWriteFile()
Kerntef32.dt
APi(Windows)
Interrupt 0x2e
NTDLLd
loWriteFile()
Kernel/vlinuxz
()egum"sAs
Kernel
Kernel
NtosKml.exe
Linux
SMopuM
图 12-9Linux 和 Windows 的 fwrite 路径
12.3.1
WindowsAPI概览
系统DLL内，规模上非常庞大，所有的导出函数大约有数千个（以WindowsXP为例）。微
软把这些Windows API DLL导出函数的声明的头文件、导出库、相关文件和工具一起提供
给开发者，并让它们成为 Software DevelopmentKit（SDK）。
SDK可以单独地在微软的官方网站下载，也可能被集成到VisualStudio这样的开发T
具中。当我们安装了Visual Studio后，可以在 SDK的安装目录下找到所有的 Windows API
程序员的自我储养一链接、装载与库
---
## Page 426
12.3 Windows AP1
403
函数声明。其中有一个头文件“Windows.h”包含了WindowsAPI的核心部分，只要我们在
程序里面包含了它，就可以使用WindowsAPI的核心部分了。
Windows API 版本
Windows API随着Windows版本的升级也经历了好几个版本，每次Windows进行
大升级的时候，也会引入新版本的APl。最早期的 Windows API 是Win16，即 16位
Windows( Windows 3.x 系列 )所提供的 API, Win16 的核心部分是由 3 个 16 位 DLL
提供的: kernel.exe [或 kernel286.exe 或 kernel386.exe ] user.exe 和 gdi.exe (虽
然扩展名是exe，但实际上它们有导出函数，再说DLL和EXE其实就是一回事赚。
伴随 32位Windows 的 API 是 Win32,它主要有 3个核心DLL：kermei32.dll,user32.dll
和 gdi32.dll。Windows 3.x为了支持一部分Win32程序，还提供了一个Win32的子
集叫做Win32s（s为 Subset，即子集l。
64位的 Windows 提供了兼容 Win32的 API，被称为 Win64。Win64与 Win32 没有
增加接口的数量，只是所有的指针类型都改成了64位。
注明，则默认为Win32。
WindowsAPI现在的数量已经十分庞大，它们按照功能被划分成了儿大类别，如表12-2
所示。
表12-2
类别
DLL
示例API
说明
CreateProcess
包括Windows操作系统最基本的功
基本服务
kemel32.dl1
ReadFile
能，比如文件系统、设备访问、进程、
HeapAlloc
线程、内存、错误处理等，这些功能
基本上是所有操作系统都提供的服务
CreateDC
图影设备接口
gdi32.dl
TextOut
与图影、绘图、打印机及其他图形设
BitBlt
各相关的操作
CreateWindow
用户接口
user32.dlI
与Windows 窗口交互相美的操作，鼠
SendMessage
标键盘、基本控件如接钮、滚动条
RegOpenKeyEx
Windows内核提供的额外功能，包括
高级服务