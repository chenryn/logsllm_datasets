        NTSTATUS status = NtSetInformationThread(GetCurrentThread(), 
            ThreadHideFromDebugger, NULL, 0);
    }
# 如何绕过从调试器隐藏线程
为了防止应用程序对调试器隐藏线程，需要钩住NtSetInformationThread函数调用。
    pfnNtSetInformationThread g_origNtSetInformationThread = NULL;
    NTSTATUS NTAPI HookNtSetInformationThread(
        _In_ HANDLE ThreadHandle,
        _In_ ULONG  ThreadInformationClass,
        _In_ PVOID  ThreadInformation,
        _In_ ULONG  ThreadInformationLength
        )
    {
        if (ThreadInformationClass == ThreadHideFromDebugger && 
            ThreadInformation == 0 && ThreadInformationLength == 0)
        {
            return STATUS_SUCCESS;
        }
        return g_origNtSetInformationThread(ThreadHandle, 
            ThreadInformationClass, ThreadInformation, ThreadInformationLength
    }
    void SetHook()
    {
        HMODULE hNtDll = LoadLibrary(TEXT("ntdll.dll"));
        if (NULL != hNtDll)
        {
            g_origNtSetInformationThread = (pfnNtSetInformationThread)GetProcAddress(hNtDll, "NtSetInformationThread");
            if (NULL != g_origNtSetInformationThread)
            {
                Mhook_SetHook((PVOID*)&g_origNtSetInformationThread, HookNtSetInformationThread);
            }
        }
    }
在钩子函数中，当正确调用时，会返回STATUS_SUCCESS，而不会将控制权转移到原始的NtSetInformationThread函数。
# NtCreateThreadEx
Windows Vista引入了NtCreateThreadEx函数，其签名如下：
    NTSTATUS NTAPI NtCreateThreadEx (
        _Out_    PHANDLE              ThreadHandle,
        _In_     ACCESS_MASK          DesiredAccess,
        _In_opt_ POBJECT_ATTRIBUTES   ObjectAttributes,
        _In_     HANDLE               ProcessHandle,
        _In_     PVOID                StartRoutine,
        _In_opt_ PVOID                Argument,
        _In_     ULONG                CreateFlags,
        _In_opt_ ULONG_PTR            ZeroBits,
        _In_opt_ SIZE_T               StackSize,
        _In_opt_ SIZE_T               MaximumStackSize,
        _In_opt_ PVOID                AttributeList
    );
最有趣的参数是CreateFlgs。此参数获取如下标志：
    #define THREAD_CREATE_FLAGS_CREATE_SUSPENDED 0x00000001
    #define THREAD_CREATE_FLAGS_SKIP_THREAD_ATTACH 0x00000002
    #define THREAD_CREATE_FLAGS_HIDE_FROM_DEBUGGER 0x00000004
    #define THREAD_CREATE_FLAGS_HAS_SECURITY_DESCRIPTOR 0x00000010
    #define THREAD_CREATE_FLAGS_ACCESS_CHECK_IN_TARGET 0x00000020
    #define THREAD_CREATE_FLAGS_INITIAL_THREAD 0x00000080
如果新线程获得THREAD_CREATE_FLAGS_HIDE_FROM_DEBUGGER标志，则在创建时将对调试器隐藏该线程。这与NtSetInformationThread函数设置的ThreadHideFromDebugger相同。负责安全任务的代码可以在设置了THREAD_CREATE_FLAGS_HIDE_FROM_DEBUGGER标志的线程中执行。
# 如何绕过NtCreateThreadEx
可以通过钩住NtCreateThreadEx函数绕过此技术，在NtCreateThreadEx函数中，其中`THREAD_CREATE_FLAGS_HIDE_FROM_DEBUGGER`将被重置。
# 句柄跟踪
从WindowsXP开始，Windows系统已经有了跟踪内核对象句柄的机制。当跟踪模式处于启用状态时，所有具有处理程序的操作都将保存到循环缓冲区中，同时，当尝试使用不存在的处理程序(例如，使用CloseHandle函数关闭该处理程序)时，将生成EXCEPTION_INVALID_HANDLE异常。如果进程不是从调试器启动的，CloseHandle函数会返回FALSE。以下示例基于CloseHandle的反调试保护：
    EXCEPTION_DISPOSITION ExceptionRoutine(
        PEXCEPTION_RECORD ExceptionRecord,
        PVOID             EstablisherFrame,
        PCONTEXT          ContextRecord,
        PVOID             DispatcherContext)
    {
        if (EXCEPTION_INVALID_HANDLE == ExceptionRecord->ExceptionCode)
        {
            std::cout   