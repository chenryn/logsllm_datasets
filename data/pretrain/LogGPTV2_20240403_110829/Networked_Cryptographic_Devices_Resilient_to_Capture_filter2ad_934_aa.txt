title:Networked Cryptographic Devices Resilient to Capture
author:Philip D. MacKenzie and
Michael K. Reiter
Networked Cryptographic Devices Resilient to Capture 
(Extended Abstract) 
Philip MacKenzie 
Michael K. Reiter 
Bell Labs, Lucent Technologies, Murray Hill, New Jersey, USA 
{philmac,reiter}@research.bell-labs.com 
Abstract 
We present  a  simple  technique  by  which a  device  that 
performs private key operations (signatures or decryptions) 
in networked applications,  and whose local private  key  is 
activated with a password or PIN, can be immunized to off- 
line dictionary attacks in case the device is captured.  Our 
techniques do not assume tamper resistance of  the device, 
but rather exploit the networked nature of  the device, in that 
the device’s private  key  operations are pe formed  using  a 
simple  interaction with a  remote sewer:  This sewer; how- 
ever; is untrusted-its 
compromise does not reduce the se- 
curiv of  the device’s private  key  unless the device  is also 
captured-and  need not have a prior relationship with the 
device.  We further  extend  this approach with  support for 
key disabling, by which the rightj‘ul owner of  a  stolen de- 
vice can disable the device’s private key even if the attacker 
already knows the user’s password. 
1. Introduction 
A  device that  performs  signatures or decryptions using 
the private key of a public key  pair, and that stores the pri- 
vate key locally on stable storage, is typically vulnerable to 
exposure of that private key if the device is captured. While 
encryption of the private key under a password is common, 
the  ease with  which  passwords succumb to  offline dictio- 
nary  attacks (e.g.,  see [35, 27,  18, 411) implies that better 
protections are needed.  Many such protections have been 
proposed, but most require tamper-resistance of the device. 
Others used in practice replace the password with a stronger 
key stored on another device that the user holds, thus mov- 
ing the burden of protection  to that device. 
In  this  paper we propose  a  simple,  software-only tech- 
nique to  render  the  private  key  of  a  networked device  in- 
vulnerable to offline dictionary attacks, even if the device is 
captured. Our technique exploits the fact that the device has 
network connectivity at the time it is required to perform a 
private key  operation, and thus can  interact with a remote 
party  at that  time to complete the operation.  This is char- 
acteristic  of  virtually  any device involved in an interactive 
authentication or key exchange protocol. 
The way  in which we exploit network connectivity is to 
postulate a remote server that assists the device in perform- 
ing its  private key  operation.  This remote server need not 
have any preexisting relationship with, or knowledge of, the 
device (though the device needs a public key for the server). 
Moreover, the server is untrusted: we prove that the server, 
even if it misbehaves, gains no information that would help 
it  to compute signatures that  verify  with  the device’s pub- 
lic key or to decrypt messages encrypted under the device’s 
public key. The only behavior that we require of the server 
is that it execute the correct protocol to respond  to a well- 
formed request,  and  that  it  stop responding to  invocations 
pertaining  to  a device’s public  key  (perhaps for a  period 
of time)  after it  has received sufficiently many malformed 
requests associated with this public key.  This latter behav- 
ior is required to prevent an online dictionary attack against 
the password.  We note, however, that this feature does not 
present a denial-of-service vulnerability, since in our prolo- 
col, an attacker can conduct an online dictionary attack only 
after it has captured the device-and 
so use of the device by 
the legitimate user is presumably already denied. 
We present two types of protocols that achieve the above 
properties. These types functionally differ on whether they 
enable the device’s private key to be disabled. If the device 
is stolen, it is natural for the device’s rightful owner to wish 
to disable the use of the private key, to account for the pos- 
sibility that the attacker already knows the user’s password 
(e.g., by observing the user type it) or can guess it in very 
few tries (e.g., due to his intimate knowledge of the user). In 
one type of protocol we present, the user can issue a request 
to the server to disable future use of the private key associ- 
ated with the device’s public key.  Once the server receives 
this request and verifies it is well-formed, the device’s key 
is rendered (provably) useless to the attacker, even if the at- 
1081-6011/01 $10.00 0 2001 EEE 
12 
tacker knows the user’s password. The attacker will thus be 
unable to employ the key  in future interactive  protocols or 
to decrypt future encrypted messages. This feature is espe- 
cially  useful  if  revocation  of  the  device’s public  key  via  a 
public  key  infrastructure  (e.g., a certificate  revocation  list) 
has an associated delay (if it exists at all); in contrast, using 
our scheme the private key can be disabled immediately. 
The ability  to  disable a private  key  seems to come at a 
cost in terms of compatibility  with existing protocols. Our 
protocol  without this feature is compatible with any public 
key cryptosystem or signature scheme in use by the device, 
and any protocol using them. In contrast, our protocols sup- 
porting  key disabling are dependent on the type of private 
key operations in use; here we give protocols for RSA [38] 
signatures and ElGamal [ 171 decryption. These easily gen- 
eralize  to many  other signature and decryption protocols. 
In addition, to achieve provable security, our signature pro- 
tocols  supporting key  disabling expose the  message being 
signed to the  server.  As such,  it  is  compatible only  with 
applications that  sign public  data.  This is  consistent  with, 
e.g., TLS  1 .O  [ 151,  but  is incompatible with protocols  that 
sign private  data before encrypting it.  There are variations 
of our RSA signature protocol, for example, that do not re- 
quire the message to be disclosed to the server, but proving 
them secure requires nonstandard assumptions about the se- 
curity of RSA. 
2. Prior work 
The work of  which  we  are aware whose goals are most 
related  to ours is [24]. This work proposes methods to en- 
crypt a DSA  or RSA private  key  using  a password  so that 
guesses at  the  password  cannot be  verified  by  an  attacker 
who captures the device holding that private key.  This fea- 
ture  comes at  a  severe  price,  however.  For  example,  the 
device’s  “public”  key  must  be  kept  secret, even  from  the 
device itself: obviously if the attacker learns the public key, 
then he can verify a successfully decrypted private key. So, 
the  public  key  must  be  hidden  from  all  but  a few  trusted 
servers that verify signatures produced by the device or en- 
crypt messages  for the  device.  And, it is essential  that no 
verifiable plaintext  be  encrypted, since this, too,  could  be 
used to verify guesses at the password. In contrast, our work 
achieves similar goals without imposing such awkward sys- 
tem constraints.  Our solutions require nothing of the system 
surrounding the device other than the ability for the device 
to communicate over a  network  when  it  performs private 
key operations. 
One  way  to  partially  reach  our  goals  is  to  simply  not 
store  the  device’s  private  key  on  the  device,  but  rather 
have  the device  download it from the  server when  needed 
(e.g.,  [36]).  Indeed,  one  of  our  protocols  somewhat re- 
sembles this  approach.  To  ensure that  the  private  key  is 
downloaded only to the user’s device, the device first proves 
it  has  been  given  the  user’s  password.  For  this  purpose 
there are  numerous published protocols by  which  the  de- 
vice can authenticate to  and exchange a key  with  a server 
using  a password  input by  its  user,  without exposing that 
password to offline dictionary attacks.  Some protocols re- 
quire the device to already have a public key for the server 
(e.g., [30,23, 19]), others do not (e.g., [9,26,40,5, 11,3 I]). 
Since the device stores at most only public information, its 
capture  is  of  no  consequence.  On  the  other  hand,  in  all 
of these  protocols, the server either knows the user’s pass- 
word  or else can mount  an offline dictionary attack against 
it.  More importantly, when these  protocols are used for the 
retrieval  of  a  private  key  from the  server, the  private  key 
(which would most likely be encrypted with the password) 
would be exposed to the server after a successful offline dic- 
tionary  attack on the password.  Recent proposals resort  to 
multiple servers and require that at most some threshold co- 
operate in a dictionary attack [ 191, but nevertheless  this re- 
mains a differentiator of our approach: our server is entirely 
untrusted.  A second differentiator of our work is that prior 
work does not permit key disabling to address the possibil- 
ity  that  an  attacker  already knows the  user’s  password  or 
guesses it quickly: once the attacker  guesses the password 
and downloads the private key, the attacker can use it for an 
unlimited  time.  In contrast, we present protocols in  which 
the private key can be disabled, even after the attacker  has 
captured the user’s device and guessed the user’s password. 
Short of rendering the device’s private key  invulnerable 
to an offline dictionary attack  once the device is captured, 
perhaps the next best thing is to ensure that the private key 
cannot  be  used  to  sign  messages dated  before the  device 
was  captured.  This  is  achieved  by fonvard  secure  signa- 
ture schemes, which  intuitively change the private key (but 
not  the  public  key) over time  so that  the  captured private 
key  can be  used  to  sign messages only  dated in  the  future 
(e.g., [4, 291).  If the device can sense that its private key is 
about to be discovered, as might be possible if  the  device 
is  a  coprocessor with  tamper detection circuitry,  then  an- 
other alternative  is for the device to change the private key 
when it detects a pending compromise so that future signa- 
tures subliminally  disclose  to  an  authority receiving  those 
signatures that  the  device has been  compromised  [22].  In 
contrast to these approaches, our goal is to prevent any fu- 
ture signatures by  the attacker  once the device  is captured, 
rather than  permitting them  in  a  limited  way  (as  forward 
secure signature schemes do) or in  a way that subliminally 
alerts an authority (as in  [22]). 
Finally,  our use  of  a  server to  assist  the  device in  per- 
forming signatures or decryptions is reminiscent of sewer 
aided protocols, whereby the computational burden of a se- 
cret cryptographic computation is moved from the device to 
a more powerful server. Some of these protocols place trust 
13 
in the server and thus expose the device’s private informa- 
tion  to  it  (e.g.,  [ l ,   16]), while  others  attempt  to  hide  the 
private key  from the server but nevertheless have the server 
do the bulk of the computation (e.g., [33, 2,251). Our work 
differs in its goals: our intention is to render the device im- 
pervious to an offline dictionary attack once captured, rather 
than  to reduce the computation required  of the device.  On 
the contrary, in our protocols, the device ends up performing 
at least as much computation as it would  if  it were to per- 
form the secret computation entirely itself.  While it seems 
fairly straightforward to combine our protocols with  some 
of  these  techniques,  doing so  while  maintaining  provable 
security looks to be a challenge. 
3. Preliminaries 
In this section  we informally state the goals for our sys- 
tems.  We also introduce preliminary  definitions and nota- 
tion that will be necessary for the balance of the paper. 
3.1. Goals 
We presume a system with a device dvc and a server svr 
that  communicate by  exchanging messages over  a  public 
network. In our protocols, the device is used either for gen- 
erating signatures or decrypting messages,  and does so by 
interacting with the server. The signature or decryption op- 
eration is password-protected, by  a password T O .   The sys- 
tem is initialized with public data, secret data for the device, 
secret data for the  user  of the  device (i.e.,  T O ) ,   and secret 
data for the  server.  The public  and secret data associated 
with the server should simply be a certified public key and 
associated  private key, which  most likely  would  be set up 
well before the device is initialized. The device-server pro- 
tocol allows a device operated by a legitimate user (i.e., one 
who knows T O )  to sign or decrypt a message with respect to 
the public key  of the device, after communicating with the 
server.  In  those schemes supporting key  disabling,  device 
initialization  may create additional secret data that, if  sent 
to the server, will cause the server to no longer execute the 
decryption or signing protocol with that device. 
Each adversary  we consider is presumed to control the 
network; i.e., the attacker controls any inputs to dvc or svr, 
and  observes  their  outputs.  Moreover,  an  adversary  can 
“capture”  certain  resources.  The  possible  resources  that 
may be captured by the attacker are dvc, svr, and TO. Once 
captured,  the entire static contents of the resource become 
known to the attacker. The one restriction  on the adversary 
is that  if he captures dvc, then  he does so after dvc initial- 
dvc is not 