# 【技术分享】如何利用苹果的Call Relay协议DIY间谍软件（上）

## 译文声明
本文为翻译文章，原文来源：martinvigo.com。具体内容表达及含义以原文为准。

## 译者信息
- 译者：[WisFree](http://bobao.360.cn/member/contribute?uid=2606963099)
- 预估稿费：200RMB
- 投稿方式：发送邮件至linwei#360.cn 或 登录网页版在线投稿

## 写在前面的话
本系列文章分为上下两部分。上篇将介绍苹果Call Relay服务的工作机制和协议内容，并提供一个大致的理解框架；下篇则会深入探讨如何利用该协议中的安全漏洞进行间谍活动。

## 介绍
苹果公司在iOS 8和Yosemite版本中引入了一项名为“Continuity”的新功能，使得iPhone能够与Mac、iPad等其他苹果设备通过一种新的方式进行协作。实际上，Handoff、即时热点以及AirDrop等功能都是基于Continuity实现的。其中，“Call Relay”服务允许用户使用其他苹果设备拨打或接听电话。这并非传统的VOIP服务，而是一种基于特定协议的P2P通信链接。为了正常工作，参与通信的设备需处于同一Wi-Fi网络中。苹果的安全白皮书对此部分内容描述较少，仅简单提及通话音频将通过安全的点对点连接从iPhone无缝传输到其他苹果设备。

## 工作机制
首先，我们需要整体了解这个协议是如何工作的，以及参与通信的设备之间的交互方式。假设有人给目标用户拨打电话，他的iPhone响了，但他选择用MacBook接听。
1. 基站与iPhone通信处理来电。
2. iPhone响起铃声并向苹果推送通知服务（APNS）发送来电通知。
3. APNS向所有登录相同Apple ID的设备推送来电通知，包含iPhone的内部IP地址和端口，显示来电信息及接听/挂断选项。
4. MacBook通过局域网向iPhone发送第一个数据包并等待响应。
5. P2P链接建立后，在MacBook与iPhone之间传输通话语音数据。

## 场景分析
该协议支持三种场景：GSM、互联网和本地网络。我们的重点是本地网络环境下的应用情况。

## 实现方法
我需要在同一环境下收集来电样本，以便通过比较字节数据找出变化之处。此外，还采集了不同环境下的数据样本以识别操作系统版本和用户ID等信息。手动完成这些操作非常困难，因此我们使用了一个名为[Netzob](https://github.com/netzob/netzob)的工具。简而言之，Netzob能帮助我们通过模式识别、数据格式化和接口分析来详细解析协议。只需将数据样本导入Netzob，它就能输出格式化的数据并展示其关系。

注：本文不打算详细介绍协议逆向过程，因为主要目的是寻找安全漏洞。更多相关内容请参考我在Ekoparty上的[演讲](https://www.youtube.com/watch?v=PEMeiGHKva8)（西班牙语）或卡巴斯基实验室的[安全分析结果](https://www.youtube.com/watch?v=xjDcmaEqPTw)。

## 苹果的Call Relay协议
我使用[Scapy](http://www.secdev.org/projects/scapy/)编写了一些脚本（[脚本地址](https://github.com/martinvigo/apple_call_relay_protocol)），模拟iPhone和MacBook之间的通信，以识别初始攻击向量并发现协议中的其他漏洞。该协议由以下四个阶段组成：

### 发现阶段
MacBook向iPhone发送的第一个数据包，iPhone接收后翻转四位字节数据并回传，类似于SYN-ACK过程。

### 识别阶段
接下来是识别阶段中的两个数据包，iPhone响应时修改两个字节的数据。Field 9部分包含了可打印范围内的字节数据，格式化为字符串后发现是一个UUID。更重要的是，这部分未经加密的文本为我们提供了修改字节数据的机会。

### 协商阶段
Header从“0f”变为“2004000400”，表示进入协议的另一阶段。MacBook和iPhone交换四个字节数据，生成双方认可的八字节随机数。MacBook发送前四个字节，iPhone以相同方式响应。后续数据包中，MacBook使用认可的字节作为计数器（最后一位字节每次加1）。橙色标注区域可能代表该阶段的不同状态，因为它们具有相同的header。

### 声音传输阶段
Header从“2004000400”变为“e000”，表示进入另一个阶段。类似识别阶段，Field 1-1显示按顺序递增的十进制计数器，每二十分钟更新一次，用于防止重放攻击。Filed 1-2-1代表每个设备的静态值，通过逆向分析发现这不是随机值。蓝色框中的数据是纯粹的随机字节。

## 寻找安全漏洞
既然已经了解了Call Relay协议的大致流程和工作机制，我们可以开始寻找潜在的安全漏洞。测试过程中尝试了以下几种操作但未成功：
- 窃听正在进行的通话
- 解码/解压缩/解密语音Payload
- 进行重放攻击
- 将语音Payload重定向至攻击者设备
- 伪装成目标用户拨打电话
- 注入语音Payload

但是以下操作尝试成功：
- DoS语音拨号
- 打开目标用户手机麦克风进行窃听和监视
- 模拟多方通话来电

## 总结
本文介绍了苹果Call Relay协议的基本工作原理。在下篇中，我们将进一步探讨如何利用这些漏洞开展攻击，并自制间谍工具。感兴趣的同学请继续关注安全客的最新文章。