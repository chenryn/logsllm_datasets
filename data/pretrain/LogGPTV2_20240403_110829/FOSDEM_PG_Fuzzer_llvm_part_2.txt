# Fuzzing Results and Analysis

## Fuzzing Runs Summary
- **Total Runs**: 1,000,000
- **Execution Time**: 159 seconds
- **Coverage**:
  - **Bits Covered**: 12,013
  - **Units Covered**: 366
  - **Executions per Second**: 6,241

## New Coverage Data
Below are the new coverage data points from the fuzzing runs. Each line represents a new coverage point with the following fields:
- **ID**: Unique identifier for the coverage point.
- **Coverage (cov)**: Total bits covered.
- **Bits**: Number of bits in the current unit.
- **Units**: Number of units covered.
- **Executions per Second (exec/s)**: Rate of executions.
- **Length (L)**: Length of the input that triggered the new coverage.

```plaintext
#72861 NEW cov: 12012 bits: 7710 units: 324 exec/s: 6071 L: 25
#102491 NEW cov: 12012 bits: 7713 units: 325 exec/s: 6405 L: 29
#112248 NEW cov: 12012 bits: 7716 units: 326 exec/s: 6236 L: 26
#116686 NEW cov: 12012 bits: 7719 units: 327 exec/s: 6482 L: 21
#131072 pulse cov: 12012 bits: 7719 units: 327 exec/s: 6241
#131531 NEW cov: 12012 bits: 7722 units: 328 exec/s: 6263 L: 29
#135066 NEW cov: 12012 bits: 7723 units: 329 exec/s: 6431 L: 32
#141231 NEW cov: 12012 bits: 7726 units: 330 exec/s: 6419 L: 26
#189651 NEW cov: 12012 bits: 7736 units: 331 exec/s: 6321 L: 12
#191339 NEW cov: 12012 bits: 7738 units: 332 exec/s: 6377 L: 26
#197481 NEW cov: 12012 bits: 7741 units: 333 exec/s: 6171 L: 32
#205513 NEW cov: 12012 bits: 7742 units: 334 exec/s: 6227 L: 29
#218191 NEW cov: 12012 bits: 7743 units: 335 exec/s: 6234 L: 30
#224296 NEW cov: 12012 bits: 7746 units: 336 exec/s: 6230 L: 22
#237337 NEW cov: 12012 bits: 7747 units: 337 exec/s: 6085 L: 30
#239500 NEW cov: 12012 bits: 7750 units: 338 exec/s: 6141 L: 22
#262144 pulse cov: 12012 bits: 7750 units: 338 exec/s: 6096
#267757 NEW cov: 12012 bits: 7751 units: 339 exec/s: 6085 L: 32
#297841 NEW cov: 12013 bits: 7752 units: 340 exec/s: 6078 L: 24
#303901 NEW cov: 12013 bits: 7753 units: 341 exec/s: 6078 L: 30
#305896 NEW cov: 12013 bits: 7754 units: 342 exec/s: 6117 L: 23
#392276 NEW cov: 12013 bits: 7755 units: 343 exec/s: 6226 L: 28
#407931 NEW cov: 12013 bits: 7756 units: 344 exec/s: 6180 L: 27
#447063 NEW cov: 12013 bits: 7758 units: 345 exec/s: 6209 L: 31
#450949 NEW cov: 12013 bits: 7760 units: 346 exec/s: 6177 L: 27
#476579 NEW cov: 12013 bits: 7761 units: 347 exec/s: 6270 L: 28
#489858 NEW cov: 12013 bits: 7762 units: 348 exec/s: 6200 L: 32
#490971 NEW cov: 12013 bits: 7763 units: 349 exec/s: 6214 L: 30
#501972 NEW cov: 12013 bits: 7765 units: 350 exec/s: 6197 L: 26
#506861 NEW cov: 12013 bits: 7770 units: 351 exec/s: 6257 L: 32
#507341 NEW cov: 12013 bits: 7771 units: 352 exec/s: 6263 L: 31
#509461 NEW cov: 12013 bits: 7772 units: 353 exec/s: 6212 L: 30
#517081 NEW cov: 12013 bits: 7774 units: 354 exec/s: 6229 L: 31
#524288 pulse cov: 12013 bits: 7774 units: 354 exec/s: 6241
#556354 NEW cov: 12013 bits: 7775 units: 355 exec/s: 6251 L: 27
#574472 NEW cov: 12013 bits: 7776 units: 356 exec/s: 6244 L: 27
#580776 NEW cov: 12013 bits: 7777 units: 357 exec/s: 6244 L: 26
#581747 NEW cov: 12013 bits: 7779 units: 358 exec/s: 6255 L: 27
#603216 NEW cov: 12013 bits: 7780 units: 359 exec/s: 6283 L: 32
#731141 NEW cov: 12013 bits: 7781 units: 360 exec/s: 6249 L: 30
#832356 NEW cov: 12013 bits: 7782 units: 361 exec/s: 6258 L: 28
#855035 NEW cov: 12013 bits: 7783 units: 362 exec/s: 6287 L: 22
#867736 NEW cov: 12013 bits: 7784 units: 363 exec/s: 6287 L: 30
#926231 NEW cov: 12013 bits: 7785 units: 364 exec/s: 6300 L: 31
#938266 NEW cov: 12013 bits: 7787 units: 365 exec/s: 6297 L: 30
#985381 NEW cov: 12013 bits: 7792 units: 366 exec/s: 6276 L: 30
```

## Fuzzing Function
```sql
CREATE FUNCTION fuzz() RETURNS void AS $$
-- Fuzzing function implementation
$$ LANGUAGE plpgsql;
```

## Error Analysis
### Expected Errors
- **Error Code 22007**: `invalid_datetime_format`
- **Error Code 22008**: `datetime_field_overflow`
- **Error Code 22009**: `invalid_time_zone_displacement_value`
- **Error Code 0A000**: `feature_not_supported`
- **Error Code 22023**: `invalid_parameter_value`

### Unexpected Errors
- **Log Entries**:
  ```plaintext
  LOG: could not open directory "/usr/local/pgsql/share/timezone/Zulu": Not a directory
  CONTEXT: SQL statement "select $1::timestamptz"
  STATEMENT: select fuzz(1000000,'select $1::timestamptz')
  ```

### Commit Details
- **Commit 258ee1b635e43a37e901fd5f62bdd5f1087d65a5**
  - **Author**: Greg Stark
  - **Date**: Sun Sep 6 02:04:37 2015 +0100
  - **Description**: Moved DTK_ISODOW, DTK_DOW, and DTK_DOY to be type UNITS rather than RESERV.

- **Commit 48789c5d23a7f382e3cb721547d5e0af7a**
  - **Author**: Tom Lane
  - **Date**: Fri Oct 16 14:14:40 2015 -0400
  - **Description**: Fixed regular-expression compiler to handle loops of constraint arcs.

- **Commit 9fe8fe9c9e5d7fc099acfc96e976ee72b2b4**
  - **Author**: Tom Lane
  - **Date**: Fri Oct 2 13:45:39 2015 -0400
  - **Description**: Added more query-cancel checks to regular expression matching.

- **Commit b63fc28776c5d2efdb4de326ad0f0b5b88**
  - **Author**: Tom Lane
  - **Date**: Fri Oct 2 14:51:58 2015 -0400
  - **Description**: Added recursion depth protections to regular expression matching.

- **Commit 558d4ada1851274fe4dd3618f3f6561b638**
  - **Author**: Tom Lane
  - **Date**: Fri Oct 2 13:30:42 2015 -0400
  - **Description**: Documented the hazards of using regexps from untrusted sources.

- **Commit f2c4ffc3307cab6619a28e77da9211416c**
  - **Author**: Tom Lane
  - **Date**: Fri Oct 2 14:26:36 2015 -0400
  - **Description**: Fixed potential infinite loop in regular expression execution.

## Security Considerations
- **Pending Security Release**: Awaiting the 9.5.1 security release for further insights.

## Community Contributions
- **Piotr Stefaniak**: Running Libfuzzer.
- **Andreas Seltenreich**: Developed sqlsmith, a tool for generating random SQL.
  - **GitHub Repository**: [https://github.com/anse1](https://github.com/anse1)
- **Greg Stark's Libfuzzer Experimental Work**: 
  - **GitHub Repository**: [https://github.com/gsstark/libfuzzer-pg](https://github.com/gsstark/libfuzzer-pg)

This report provides a comprehensive overview of the fuzzing results, including new coverage data, error analysis, commit details, and community contributions.