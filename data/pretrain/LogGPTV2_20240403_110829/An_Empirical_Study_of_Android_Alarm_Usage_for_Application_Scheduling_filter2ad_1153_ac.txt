m
u
N
70
40
10
1
TRANSPORTATION
GAME_RACING
GAME_BOARD
GAME_WORD
PHOTOGRAPHY
COMICS
WEATHER
GAME_ROLE_PLAYING
GAME_CARD
GAME_STRATEGY
NEWS_AND_MAGAZINES
LIFESTYLE
EDUCATION
GAME_SPORTS
GAME_CASINO
SPORTS
GAME_PUZZLE
GAME_EDUCATIONAL
GAME_MUSIC
GAME_CASUAL
SHOPPING
ENTERTAINMENT
GAME_FAMILY
GAME_TRIVIA
GAME_ADVENTURE
GAME_ARCADE
LIBRARIES_AND_DEMO
MEDIA_AND_VIDEO
TRAVEL_AND_LOCAL
FINANCE
GAME
SOCIAL
PRODUCTIVITY
GAME_SIMULATION
BUSINESS
APP_WIDGETS
MUNICATION
PERSONALIZATION
BOOKS_AND_REFERENCE
TOOLS
MUSIC_AND_AUDIO
APP_WALLPAPER
MEDICAL
GAME_ACTION
HEALTH_AND_FITNESS
COM
Fig. 3. Average number of alarms per application for each Google Play category. Error
bars depict the maximum number of alarms for each category.
3.5 The Impact of 3rd Party Libraries
From our experience while studying apps, we have also seen that many apps
have a big proportion of 3rd-party content. For example, consider Skype, only
about 36.4 % of its code is actually Skype-speciﬁc functionality, while 31.8 %
accounts for 3rd-party SDKs (e.g., roboguice, jess, qik, android support) and
32.8 % belongs to ads/analytics (e.g., ﬂurry, Microsoft ads).
Hence one important aspect to check is whether deﬁned alarms are native to
the application itself or if they originate from 3rd party libraries. We analyzed
the package names of the ﬁles where the alarms were detected and compared
them to 93 ads and analytics libraries available for Android, retrieved from a
public list provided by AppBrain5. The library package names and matches were
manually conﬁrmed to eliminate false positives.
Figure 4 shows the number of apps where alarms deﬁned by these
ads/analytics libraries were found. Alarms of ads/analytics libraries found in less
than 10 apps are omitted (e.g., cellﬁsh, inmobi, mopub). Although our approach
might not cover all possible ads/analytics libraries, we were able to detect that
10.65 % of the unique apps (22.55 % of apps with alarms) have alarms deﬁned
by third-party ads/analytics, and around 10.42 % of all alarm API calls found
belong to these libraries.
Finally, considering the number of alarms deﬁned across all apps, we have
discovered that 31.5 % of all alarms are repeating, while nearly 40.5 % of alarms
are non-deferrable. Regarding 3rd-party ads and analytics libraries, their alarms
account for 10.4 % of all alarm occurrences. From these occurrences, 72.6 % of
them are repeating and 22.3 % of them are non-deferrable. Even though we only
explored ads/analytics, given the large coverage of these 3rd-party libraries,
optimizing their resource consumption and having them use inexact alarms
5 http://www.appbrain.com/stats/libraries/ad.
An Empirical Study of Android Alarm Usage for Application Scheduling
381
s
p
p
a
e
u
q
n
u
i
f
o
r
e
b
m
u
N
1000
100
10
1
amazon/insights
admanager am
apptracker
appbrain
domob
bee7
getjar
revmob
gms/analytics
tapcontext
tapjoy
pocketchange
supersonic
sponsorpay
ubee
urbanairship
Ads/Analytics libraries that define alarms
Fig. 4. Number of apps with alarms deﬁned by third-party ads/analytic libraries.
(e.g., using TargetAPI annotation) would certainly lead to appreciable gains
in terms of energy consumption.
3.6 Occurrence of Alarms at Execution Time
To conﬁrm the impact of alarms on Android KitKat (SDK 19), the ﬁrst to
introduce batching by default, we perform two experiments. The experiments
use two diﬀerent sets of 30 apps. The ﬁrst set is the top 30 most popular free
apps of the Google Play market. The second set is the 30 apps with the largest
number of setRepeating alarm deﬁnitions that also target SDK lower than 19.
The latter was chosen since these alarms should be deferred if the target SDKs
were set to ≥ 19 and notably includes apps with >1 K to >500 M downloads.
For each experiment we ﬂash a new Android ﬁrmware (KitKat), install the
30 apps and create new accounts with no contacts/friends when needed (e.g.,
Gmail, Facebook, Twitter, etc.). All apps were started once to ensure Android
gives them permission to execute on reboot if required, and then the phone is left
on for around 30 min. We then reboot the phone, turn oﬀ its screen, and let it
run for around 3 h. Finally, we gather the alarm and wakeup counts as reported
by Android Dumpsys (adb shell dumpsys alarm) for the installed apps. Both
experiments were repeated to conﬁrm the patterns we observed.
There were a total of 261 alarms registered by the apps in our ﬁrst experi-
ment. Only 53 (20 %) caused the device to wakeup and we found no signiﬁcant
correlation between the number of registered alarms and the number of alarms
that woke the device (r = 0.11, p = 0.55). That said, we were quite surprised to
ﬁnd that the two Facebook apps (messenger and the regular app) were respon-
sible for the majority of wakeups (15 per hour). Upon closer examination, we
determined that they were waking the phone to maintain a connection to a
message queue, even though the accounts used had literally zero social activity.
A total of 1,041 alarms were registered by apps in our second experiment.
Of these, 636 (61 %) woke up the device and we found a strong and signiﬁ-
cant correlation between the number of registered alarms and the number of
382
M. Almeida et al.
alarms that woke the device (r = 0.86, p  19 these apps would likely beneﬁt from advanced OS alarm
scheduling mechanisms. Furthermore, while previous work [10] which studied a
An Empirical Study of Android Alarm Usage for Application Scheduling
383
much smaller set of 10 open-source apps found that 28 % of method calls were
outdated with a median lag time of 16 months, we also show that in the case of
alarms, close to half the API calls are outdated by more than 18 months.
Ads and analytics are a particularly interesting subject of study since they
have been shown to have a big impact on energy consumption [6]. We found that
the majority of alarms related to ads and analytics are repeating, meaning that
they most likely result in background operations that might have no real end-
user beneﬁt. This seems to be a problem that is core to Android in particular,
since iOS does not have a direct analogue to alarms and has an extremely limited
background execution environment [2]. Since from our experience a large pro-
portion of Android apps make use of third-party code, future large-scale studies
of energy consumption, optimization, and alarm usage should focus on common
third-party libraries.
When we examined alarm usage at runtime we discovered that the implica-
tions of the static analysis held true for the most part. The apps with the highest
number of deﬁned alarms were in fact executing the alarms at an exceedingly
high rate. In one egregious case, a single application was responsible for 372
wakeups in a 3 h period.
This work serves as an initial large-scale look into alarms and their impact.
Overall, our ﬁndings indicate that research on energy eﬃciency on mobile devices
needs to incorporate an understanding around the use of alarms. Deeper exam-
inations into the use and abuse of Android alarms should provide more fruitful
insight and solutions, leading to increased energy eﬃciency and device perfor-
mance.
References
1. Alarmmanager. http://goo.gl/ncrGaO
2. iOS Developer Library: Background execution. https://goo.gl/xZd16w
3. Athivarapu, P.K., Bhagwan, R., Guha, S., Navda, V., Ramjee, R., Arora, D.,
Padmanabhan, V.N., Varghese, G.: RadioJockey: mining program execution to
optimize cellular radio usage. In: Proceedings of the 18th Annual International
Conference on Mobile Computing and Networking (2012)
4. Aucinas, A., Vallina-Rodriguez, N., Grunenberger, Y., Erramilli, V., Papagiannaki,
K., Crowcroft, J., Wetherall, D.: Staying online while mobile: the hidden costs. In:
Proceedings of the Ninth ACM Conference on Emerging Networking Experiments
and Technologies (2013)
5. Balasubramanian, N., Balasubramanian, A., Venkataramani, A.: Energy
consumption in mobile phones: a measurement study and implications for network
applications. In: Proceedings of the 9th ACM SIGCOMM Conference on Internet
Measurement Conference (2009)
6. Gui, J., Mcilroy, S., Nagappan, M., Halfond, W.G.: Truth in advertising: the hidden
cost of mobile ads for software developers. In: Proceedings of the 37th International
Conference on Software Engineering (2015)
7. Han, D., Zhang, C., Fan, X., Hindle, A., Wong, K., Stroulia, E.: Understanding
android fragmentation with topic analysis of vendor-speciﬁc bugs. In: 19th Working
Conference on Reverse Engineering (2012)
384
M. Almeida et al.
8. Higgins, B.D., Reda, A., Alperovich, T., Flinn, J., Giuli, T.J., Noble, B., Watson,
D.: Intentional networking: opportunistic exploitation of mobile network diversity.
In: Proceedings of the Sixteenth Annual International Conference on Mobile Com-
puting and Networking (2010)
9. Liu, H., Zhang, Y., Zhou, Y.: TailTheft: leveraging the wasted time for saving
energy in cellular communications. In: Proceedings of the Sixth International Work-
shop on MobiArch (2011)
10. McDonnell, T., Ray, B., Kim, M.: An empirical study of API stability and adop-
tion in the android ecosystem. In: Proceedings of the 2013 IEEE International
Conference on Software Maintenance (2013)
11. Mulliner, C., Oberheide, J., Robertson, W., Kirda, E.: PatchDroid: scalable third-
party security patches for android devices. In: Proceedings of the 29th Annual
Computer Security Applications Conference (2013)
12. Nguyen, N.T., Wang, Y., Liu, X., Zheng, R., Han, Z.: A nonparametric bayesian
approach for opportunistic data transfer in cellular networks. In: Wang, X., Zheng,
R., Jing, T., Xing, K. (eds.) WASA 2012. LNCS, vol. 7405, pp. 88–99. Springer,
Heidelberg (2012)
13. Park, S., Kim, D., Cha, H.: Reducing energy consumption of alarm-induced wake-
ups on android smartphones. In: Proceedings of the 16th International Workshop
on Mobile Computing Systems and Applications (2015)
14. Qian, F., Wang, Z., Gao, Y., Huang, J., Gerber, A., Mao, Z., Sen, S., Spatscheck,
O.: Periodic transfers in mobile applications: network-wide origin, impact, and
optimization. In: Proceedings of the 21st International Conference on World Wide
Web (2012)
15. Shi, C., Joshi, K., Panta, R.K., Ammar, M.H., Zegura, E.W.: CoAST: collaborative
application-aware scheduling of last-mile cellular traﬃc. In: Proceedings of the 12th
Annual International Conference on Mobile Systems, Applications, and Services
(2014)
16. Vergara, E.J., Nadjm-Tehrani, S.: Energy-aware cross-layer burst buﬀering for
wireless communication. In: Proceedings of the 3rd International Conference on
Future Energy Systems: Where Energy, Computing and Communication Meet
(2012)
17. Vergara, E.J., Sanjuan, J., Nadjm-Tehrani, S.: Kernel level energy-eﬃcient 3g back-
ground traﬃc shaper for android smartphones. In: Proceedings of the 9th Interna-
tional Wireless Communications and Mobile Computing Conference (2013)
18. Viennot, N., Garcia, E., Nieh, J.: A measurement study of google play. In: The
2014 ACM International Conference on Measurement and Modeling of Computer
Systems (2014)