eax=eos; 
eax=eax-ecx; 
eax=eax-1; 
return eax 
GCC 编译器这么编译代码的具体原因不明。我们能够确定的是，即使 GCC 和 MSVC 分别选择不同的
算法，计算的结果肯定相同。 
15.1.2 ARM 
32bit ARM 
Non-optimizing Xcode 4.6.3 (LLVM) (ARM mode) 
指令清单 15.2  Non-optimizing Xcode 4.6.3 (LLVM) (ARM mode) 
_strlen 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 15 章  C 语言字符串的函数 
175 
eos  =-8  
str  =-4 
     SUB    SP, SP, #8 ; allocate 8 bytes for local variables 
     STR    R0, [SP,#8+str] 
     LDR    R0, [SP,#8+str] 
     STR    R0, [SP,#8+eos] 
loc_2CB8 ; CODE XREF: _strlen+28 
     LDR    R0, [SP,#8+eos] 
     ADD    R1, R0, #1 
     STR    R1, [SP,#8+eos] 
     LDRSB  R0, [R0] 
     CMP    R0, #0 
     BEQ    loc_2CD4 
     B      loc_2CB8 
loc_2CD4 ; CODE XREF: _strlen+24 
     LDR    R0, [SP,#8+eos] 
     LDR    R1, [SP,#8+str] 
     SUB    R0, R0, R1 ; R0=eos-str 
     SUB    R0, R0, #1 ; R0=R0-1 
     ADD    SP, SP, #8 ; deallocate 8 bytes 
     BX     LR 
如果不指定优化选项，LLVM 编译器所生成的代码会很啰唆。但是这种冗长的代码有助于我们理解它
处理局部变量所用的栈结构。本例只用到了 2 个局部变量，即 eos 和 str。 
在 IDA 的反编译结果中，我把变量 var_8 重命名为原始变量名 eos，把 var_4 重命名为 str。 
程序的前几条指令把输入值传递给变量 str 和 eos。 
循环体的起始地址是 loc_2CB8。 
循环体内的前 3 条指令（LDR，ADD，STR）把 eos 的值保存在 R0 寄存器里，然后将这个值递增（＋
1），再把修改后的值直接赋值给栈内的局部变量 eos。 
接着“LDRSB RO,[R0]” （Load Register Signed Byte）指令从 R0 所指向的地址处读取 1 个字节，并将之
转换为 32 位有符号数据（Keil 也把 Char 型数据视为有符号数据）。这条指令类似于 x86 的 MOVSX 指令（参见
15.1.1 节）。既然在 C 标准里 char 类型数据是 Signed 类型数据，编译器就把这个值当作 Signed 型数据处理。 
应当注意的是，虽然 x86 系统可以把一个 32 位寄存器拆分为 8 位寄存器或 16 位寄存器单独调用，但
是 ARM 系统没有把寄存器拆解出来、分别使用的助记符。确切地说，x86 的这种特性是兼容性的要求：
为了运行 16 位 8086 指令甚至是 8 位 8080 指令，它的指令集必须向下兼容。而 ARM 系统的处理器最初就
是 32 位 RISC 处理器。所以，在使用 ARM 系统的寄存器时，只能把它当作完整的 32 位寄存器使用。 
此后，LDRSB 指令把字符串中的字符逐字节地传递到 R0 寄存器。其后的 CMP 和 BEQ 指令，会检查
这个字节是不是零字节。如果这个字节不是 0，则再次进行循环；如果这个字节是 0，则结束循环语句。 
函数在结束以前计算 eos 和 str 的差值，再把这个差值减去 1，然后作为函数的返回值、保存在 R0 寄存器里。 
整个函数没有把寄存器推送入栈的操作。按照 ARM 调用函数的约定，R0～R3 寄存器的作用是传递参
数的暂存寄存器；函数在退出以后它们已经完成使命了，也不必恢复它们的初始值。在被调用方函数结束
之后，再怎么操作它们都行。另外，这个程序没有用到其他的寄存器，也没必要使用栈。所以在函数结束
时，唯一需要做的工作就是使用跳转指令（BX）把控制权交给 LR 寄存器保存的返回地址。 
Optimizing Xcode 4.6.3 (LLVM) (Thumb mode) 
指令清单 15.3  Optimizing Xcode 4.6.3 (LLVM) (Thumb mode) 
_strlen 
MOV  
R1, R0 
loc_2DF6 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
176 
逆向工程权威指南（上册） 
LDRB.W 
R2, [R1],#1 
CMP  
R2, #0 
BNE  
loc_2DF6 
MVNS  
R0, R0 
ADD  
R0, R1 
BX 
LR 
在进行优化编译的时候，编译器认为寄存器已经足够用了，不必使用栈来保管变量 eos 和 str。在开始
循环之前，编译器使用 R0 寄存器存储变量 str、用 R1 寄存器存储变量 eos。 
“LDRB.W R2, [R1],#1”从 R1 所指向的地址里读取 1 个字节，将其转换为 32 位有符号数据（signed）
之后存储在 R2 寄存器里。指令末端的立即数＃1 将在上述操作之后，把 R1 寄存器的值加 1（递增）。这种
指令属于延迟索引寻址（Post-indexed address，又称后变址寻址）指令，便于操作数组。 
本书的 28.2 节会详细介绍延迟索引寻址。 
循环体的 CMP 和 BNE 指令负责判断循环结束的条件。它们在读取到数值为零的字节之前会保证循环
语句处于的迭代状态。 
MVNS（MoVe Not）指令相当于 x86 指令集中的 NOT 指令，与后面的 ADD 指令配合完成“eos-str-1”
的运算。在 15.1.1 节里，我们详细介绍过其中的各种细节，这里不再复述。 
LLVM 编译器与 GCC 都认为这种代码的效率更高。 
Optimizing Keil 6/2013 (ARM mode) 
使用 Keil（启用优化选项）编译上述程序，可得到如下所示的指令。 
指令清单 15.4  Optimizing Keil 6/2013 (ARM mode) 
_strlen 
MOV  R1, R0 
loc_2C8 
LDRB  R2, [R1],#1 
CMP  R2, #0 
SUBEQ  R0, R1, R0 
SUBEQ  R0, R0, #1 
BNE  loc_2C8 
BX 
 LR 
这段代码与前面的 LLVM 优化编译生成的 Thumb 代码相似。区别在于前面的例子在循环结束后才运算
str−eos−1，而本例则是在循环体内进行表达式演算。前文介绍过，条件执行指令中的－EQ 后缀表示其运行条件为
“当前面的 CMP 比较的两个值相等/EQ 时，才会执行该指令”。所以，如果 R0 寄存器的值是 0，则会触发 CMP 指
令之后的两条 SUBEQ 指令。其运算结果会被保留在 R0 寄存器，迭代结束之后就自然成为函数的返回值。 
ARM64 
Optimizing GCC (Linaro) 4.9 
my_strlen: 
  mov     x1, x0 
  ; X1 is now temporary pointer (eos), acting like cursor 
.L58: 
  ; load byte from X1 to W2, increment X1 (post-index) 
  ldrb    w2, [x1],1 
  ; Compare and Branch if NonZero: compare W2 with 0, jump to .L58 if it is not 
  cbnz    w2, .L58 
  ; calculate difference between initial pointer in X0 and current address in X1 
  sub     x0, x1, x0 
  ; decrement lowest 32-bit of result 
  sub     w0, w0, #1 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 15 章  C 语言字符串的函数 
177 
  ret 
本例的算法与指令清单 15.11 的算法相同。它计算首字符和终止符地址的差值，然后再从差里减去 1。
指令清单中的注释详细介绍了具体的演算方法。不过，我的源程序有问题：my_strlen()的返回值是 32 位 int
型数据，但是它应当返回 size_t 或者另外一种 64 位数据。理论上讲，在 64 位平台上，strlen()函数的参数
地址可能是 4GB 以上的内存地址，所以它在 64 位平台上的返回值应当是 64 位数据。由于源程序存在这个
缺陷，所以最后一条 SUB 指令只对寄存器的低 32 位进行操作，但是倒数第二条 SUB 指令依然是对完整的
64 位寄存器进行减法运算。虽说程序存在缺陷，但是出于演示的目的，我还是把这个样本保留了下来。 
Non-optimizing GCC (Linaro) 4.9 
my_strlen: 
; function prologue 
  sub      sp, sp, #32 
; first argument (str) will be stored in [sp,8] 
  str      x0, [sp,8] 
  ldr      x0, [sp,8] 
; copy "str" to "eos" variable 
  str      x0, [sp,24] 
  nop  
.L62: 
; eos++ 
  ldr      x0, [sp,24]  ; load "eos" to X0 
  add      x1, x0, 1    ; increment X0 
  str      x1, [sp,24]  ; save X0 to "eos" 
; load byte from memory at address in X0 to W0 
  ldrb     w0, [x0] 
; is it zero? (WZR is the 32-bit register always contain zero) 
  cmp      w0, wzr 
; jump if not zero (Branch Not Equal) 
  bne      .L62 
; zero byte found. now calculate difference.  
; load "eos" to X1 
  ldr      x1, [sp,24] 
; load "str" to X0 
  ldr      x0, [sp,8] 
; calculate difference 
  sub      x0, x1, x0 
; decrement result 
  sub      w0, w0, #1 
; function epilogue 
  add      sp, sp, 32 
  ret 
关闭优化功能之后，编译器生成的代码就长了许多。在操作变量时，程序频繁地访问内存中的栈。此
外，由于源程序的设计缺陷，最后一条 SUB 指令只对寄存器的低 32 位数据进行了减法运算。 
15.1.3 MIPS 
指令清单 15.5  Optimizing GCC 4.4.5 (IDA) 
my_strlen: 
; "eos" variable will always reside in $v1: 
            move    $v1, $a0 
loc_4: 
; load byte at address in "eos" into $a1: 
            lb      $a1, 0($v1) 
            or      $at, $zero ; load delay slot, NOP 
; if loaded byte is not zero, jump to loc_4: 
            bnez    $a1, loc_4 
; increment "eos" anyway: 
            addiu   $v1, 1 ; branch delay slot  
异步社区会员 dearfuture(15918834820) 专享 尊重版权
178 
逆向工程权威指南（上册） 
; loop finished. invert "str" variable: 
            nor     $v0, $zero, $a0 
; $v0=-str-1 
            jr      $ra 
; return value = $v1 + $v0 = eos + ( -str-1 ) = eos - str - 1 
            addu    $v0, $v1, $v0 ; branch delay slot 
MIPS 的指令集里没有求非（NOT）运算指令，但是它有非或 NOR（即 OR+NOT）指令。在数字电路
领域，非或运算电路十分普遍；但是在计算机编程领域，它还比较冷门。借助非或运算指令，求非的 NOT
运算指令可由“NOR DST,$ZERO,SRC”指令变相实现。 
前文介绍过，求非运算相当于“求负、再减 1”的运算。与后面的 ADDU 指令配合，可完成“eos−str−1”
的运算，求得正确的字符串长度。 
15.2  练习题 
15.2.1 题目 1 
请描述下列代码的功能。 
指令清单 15.6  Optimizing MSVC 2010   
_s$ 
=  8 
_f 
PROC 
mov edx, DWORD PTR _s$[esp-4] 
mov cl, BYTE PTR [edx] 
xor eax, eax 
test cl, cl 
je 
SHORT $LN2@f 
npad 4    ; align next label 
$LL4@f: 
cmp cl, 32 
jne SHORT $LN3@f 
inc eax 
$LN3@f: 
mov cl, BYTE PTR [edx+1] 
inc edx 
test cl, cl 
jne SHORT $LL4@f 
$LN2@f: 
ret 0 
_f 
ENDP 
指令清单 15.7  GCC 4.8.1 -O3   
f: 
.LFB24: 
  push      ebx 
  mov       ecx, DWORD PTR [esp+8] 
  xor       eax, eax 
  movzx     edx, BYTE PTR [ecx] 
  test      dl, dl 
  je        .L2 
.L3: 
  cmp       dl, 32 
  lea       ebx, [eax+1] 
  cmove     eax, ebx 
  add       ecx, 1 
  movzx     edx, BYTE PTR [ecx] 
  test      dl, dl 
  jne       .L3 
.L2: 
  pop       ebx 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 15 章  C 语言字符串的函数 
179 
  ret 
指令清单 15.8  Optimizing Keil 6/2013 (ARM mode)   
f   PROC 
  MOV     r1,#0 
|L0.4| 
  LDRB     r2,[r0,#0] 
  CMP      r2,#0 
  MOVEQ    r0,r1 
  BXEQ     lr 
  CMP     r2,#0x20 
  ADDEQ   r1,r1,#1 
  ADD      r0,r0,#1 
  B      
|L0.4| 
  ENDP 
指令清单 15.9  Optimizing Keil 6/2013 (Thumb mode)   
f PROC 
  MOVS    r1,#0 
  B        |L0.12| 
|L0.4| 
  CMP      r2,#0x20 
  BNE      |L0.10| 
  ADDS     r1,r1,#1 
|L0.10| 
  ADDS     r0,r0,#1 
|L0.12| 
  LDRB    r2,[r0,#0] 
  CMP     r2,#0 
  BNE      |L0.4| 
  MOVS     r0,r1 
  BX       lr 
  ENDP 
指令清单 15.10  Optimizing GCC 4.9 (ARM64) 
f: 
  ldrb   
w1, [x0] 
  cbz    
w1, .L4 
  mov      w2, 0 
.L3: 
  cmp      w1, 32 
  ldrb     w1, [x0,1]! 
  csinc    w2, w2, w2, ne 
  cbnz     w1, .L3 
.L2: 
  mov      w0, w2 
  ret  
.L4: 
  mov      w2, w1 
  b        .L2 
指令清单 15.11  Optimizing GCC 4.4.5 (MIPS) (IDA) 
f: 
lb       
$v1, 0($a0) 
or       
$at, $zero 
beqz     
$v1, locret_48  
li       
$a1,0x20#'' 
b        
loc_28 
move     
$v0, $zero 
loc_18:        
# CODE XREF: f:loc_28 
lb    
$v1, 0($a0) 
or   
$at, $zero 
beqz  
$v1, locret_40 
or   
$at, $zero 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
180 
逆向工程权威指南（上册） 
loc_28:                   