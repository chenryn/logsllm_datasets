### Optimized Text

#### Code Implementation
```csharp
return (!cardsInSuit.Exists(c => c.CardSuit == suit && c.CardValue == value));
```

#### Step 11: Display the Hand.cs File
1. Open the `Hand.cs` file in the Code and Text Editor window.
2. Add the following using directive to the top of the file:
   ```csharp
   using System.Collections.Generic;
   ```

#### Step 12: Modify the `Hand` Class
1. The `Hand` class currently uses an array called `cards` to hold the playing cards for the hand.
2. Change the definition of the `cards` variable to use a `List<PlayingCard>` collection, as shown below:
   ```csharp
   class Hand
   {
       public const int HandSize = 13;
       private List<PlayingCard> cards = new List<PlayingCard>(HandSize);
       ...
   }
   ```

#### Step 13: Update the `AddCardToHand` Method
1. Locate the `AddCardToHand` method.
2. This method currently checks if the hand is full and, if not, adds the card provided as a parameter to the `cards` array at the index specified by the `playingCardCount` variable.
3. Update this method to use the `Add` method of the `List<PlayingCard>` collection instead.
4. Remove the `playingCardCount` variable from the class and modify the if statement to reference the `Count` property of the `cards` collection.
5. The updated method should look like this:
   ```csharp
   public void AddCardToHand(PlayingCard cardDealt)
   {
       if (this.cards.Count >= HandSize)
       {
           throw new ArgumentException("Too many cards");
       }
       this.cards.Add(cardDealt);
   }
   ```

#### Step 14: Build and Run the Application
1. On the Debug menu, click "Start Debugging" to build and run the application.

#### Step 15: Verify the Application
1. When the Card Game form appears, click "Deal."
   - Note: The "Deal" button is located on the command bar. You may need to expand the command bar to reveal the button.
2. Verify that the cards are dealt and that the populated hands appear as before.
3. Click "Deal" again to generate another random set of hands.

#### Step 16: Stop Debugging
1. Return to Visual Studio 2017 and stop debugging.

### Summary
In this chapter, you learned how to use common collection classes to store and access data. Specifically, you learned how to use generic collection classes to create type-safe collections and how to create lambda expressions to search for specific items within collections.

- **To Continue**: Keep Visual Studio 2017 running and proceed to Chapter 19, "Enumerating collections."
- **To Exit**: On the File menu, click "Exit." If a Save dialog box appears, click "Yes" and save the project.

### Quick Reference
- **Create a Collection**:
  ```csharp
  List<PlayingCard> cards = new List<PlayingCard>();
  ```
- **Add an Item to a Collection**:
  ```csharp
  HashSet<string> employees = new HashSet<string>();
  employees.Add("John");

  LinkedList<int> data = new LinkedList<int>();
  data.AddFirst(101);

  Stack<int> numbers = new Stack<int>();
  numbers.Push(99);
  ```
- **Remove an Item from a Collection**:
  ```csharp
  HashSet<string> employees = new HashSet<string>();
  employees.Remove("John");

  LinkedList<int> data = new LinkedList<int>();
  data.Remove(101);

  Stack<int> numbers = new Stack<int>();
  int item = numbers.Pop();
  ```
- **Find the Number of Elements in a Collection**:
  ```csharp
  List<PlayingCard> cards = new List<PlayingCard>();
  int noOfCards = cards.Count;
  ```
- **Locate an Item in a Collection**:
  ```csharp
  Dictionary<string, int> ages = new Dictionary<string, int>();
  ages.Add("John", 47);
  int johnsAge = ages["John"];

  List<Person> personnel = new List<Person>();
  Person match = personnel.Find(p => p.ID == 3);
  ```
- **Iterate Through the Elements of a Collection**:
  ```csharp
  LinkedList<int> numbers = new LinkedList<int>();

  // Using for loop
  for (LinkedListNode<int> node = numbers.First; node != null; node = node.Next)
  {
      int number = node.Value;
      Console.WriteLine(number);
  }

  // Using foreach loop
  foreach (int number in numbers)
  {
      Console.WriteLine(number);
  }
  ```

### Chapter 19: Enumerating Collections
After completing this chapter, you will be able to:
- Manually define an enumerator to iterate over the elements in a collection.
- Implement an enumerator automatically by creating an iterator.
- Provide additional iterators to step through the elements of a collection in different sequences.

#### Enumerating the Elements in a Collection
- **Using `foreach`**:
  ```csharp
  int[] pins = { 9, 3, 7, 2 };
  foreach (int pin in pins)
  {
      Console.WriteLine(pin);
  }
  ```
- **Enumerable Collection**:
  - An enumerable collection is one that implements the `System.Collections.IEnumerable` interface.
  - The `IEnumerable` interface contains a single method: `GetEnumerator()`.
  - The `IEnumerator` interface specifies the following:
    ```csharp
    object Current { get; }
    bool MoveNext();
    void Reset();
    ```

#### Manually Implementing an Enumerator
- **TreeEnumerator Class**:
  1. Start Microsoft Visual Studio 2017 if it is not already running.
  2. Open the `BinaryTree` solution located in `\Microsoft Press\VCSBS\Chapter 19\ BinaryTree`.
  3. Add a new class named `TreeEnumerator.cs` to the `BinaryTree` project.
  4. Define the `TreeEnumerator` class to implement the `IEnumerator<TItem>` interface, where `TItem` is constrained to `IComparable`:
     ```csharp
     class TreeEnumerator<TItem> : IEnumerator<TItem> where TItem : IComparable
     {
         private Tree<TItem> currentData = null;
         private TItem currentItem = default(TItem);
         private Queue<TItem> enumData = null;

         public TreeEnumerator(Tree<TItem> data)
         {
             this.currentData = data;
         }

         private void Populate(Queue<TItem> enumQueue, Tree<TItem> tree)
         {
             if (tree.LeftTree != null)
             {
                 Populate(enumQueue, tree.LeftTree);
             }
             enumQueue.Enqueue(tree.NodeData);
             if (tree.RightTree != null)
             {
                 Populate(enumQueue, tree.RightTree);
             }
         }

         bool IEnumerator.MoveNext()
         {
             if (this.enumData == null)
             {
                 this.enumData = new Queue<TItem>();
                 Populate(this.enumData, this.currentData);
             }
             if (this.enumData.Count > 0)
             {
                 this.currentItem = this.enumData.Dequeue();
                 return true;
             }
             return false;
         }

         TItem IEnumerator<TItem>.Current
         {
             get
             {
                 if (this.enumData == null)
                 {
                     throw new InvalidOperationException("Use MoveNext before calling Current");
                 }
                 return this.currentItem;
             }
         }

         object IEnumerator.Current => this.currentItem;

         void IEnumerator.Reset()
         {
             this.enumData = null;
             this.currentItem = default(TItem);
         }

         void IDisposable.Dispose()
         {
             // Cleanup resources if necessary
         }
     }
     ```

This optimized text is more structured, clear, and professional, making it easier to follow and understand.