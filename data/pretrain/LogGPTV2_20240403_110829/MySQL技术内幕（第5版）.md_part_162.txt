获取指定表或视图的锁，如有必要，则会一直等到获得所有的锁。如果你锁定了视图，则此语
口在元素内部，子元素属性值和内容分别对应的是列名和列值。
口在元素内部，子元素标签名和内容分别对应的是列名和列值。
在元素内部，属性名和属性值分别对应的是列名和列值。
口
LOCK(TABLE|TABLES)
LOCKTABLE
在输入XML文件里指定目标表的各个行的格式有以下三种。在同一个文件里，对于不同的行可
口ROWSIDENTIFIED BY子句（如果给出了）用于指定标签（包括尖括号），在文件的开始
口被加载的文件应该为XML文件。
这条语句类似于LOADDATA，主要差异如下：
饰符LOW_PRIORITY可用于更改锁获取行为，但是自MySQL5.5.3起，它便没有任何作用。
空闲块，这种锁将被视为一个普通的 READ 锁。）
表上，并且要求MyISAM表不能有任何因删除或更新操作而产生的空闲块。READ LOCAL允
和结束处标识行的位置。默认值为''。
[SET col_name = expr [, col_name = expr] ...]
[LOW_PRIORITY】WRITE：获取一个写锁。这样会阻止所有客户端对表进行读取或写入。
许你显式地锁定一个表，不过也允许其他客户端对它进行并发插入操作。（如果表内部存在
READLOCAL是READ锁的一个变体，是专为并发插入操作而设计的。它只能用在MyISAM
端对表进行读操作。
value2
valuel
value2
valuel
[AS]
alias_name]
E.1SQL语句语法（非复合语句）
689
修
---
## Page 710
在主服务器的每一个从服务器上运行 SHOW SLAVE STATUS 语句之后使用这个语句，以确定还有哪
件全部删除，重置二进制日志索引文件，使它只列出那些未被删除的日志文件。通常情况下，可以
它们与第7章和附录G里讨论的二进制API混为一谈，彼此在效率方面也不相同。
同一
相应的数据值。占位符使得预处理语句可以接受输人参数，以便可以每次使用不同的数据值去执行
版本的 MySQL 参考手册，可以看到都包含了哪些语句。PREPARE、EXECUTE 和 DEALLOCATE
SELECT、SET、UPDATE语句以及绝大多数SHOW语句。其他语句已被添加进来，通过查询所用MySQL
的语句随着时间的推移正变得越来越多。最初只有CREATETABLE、DELETE、DO、INSERT、REPLACE、
句将先释放那条旧语句后再处理新语句。这些语句名不区分大小写。
执行，用DEALLOCATE PREPARE语句来释放。如果已经存在一个同名的预处理语句，PREPARE 语
占用量。
自己的工作，还会替你阻止其他客户端在表正在被优化时访问它。
法阻止服务器在你检查表的过程中访问它们。在使用OPTIMIZE TABLE语句时，服务器除了会完成
PREPARE语句不能被预处理。
簇索引里未使用的空间。
会把OPTIMIZETABLE语句写入二进制日志里。
ARCHIVE表。OPTIMIZETABLE要求对每个表都拥有SELECT和INSERT 权限。
可以使用OPTIMIZE TABLE 语句来执行表优化操作。它可用于处理InnoDB表、MyISAM 表和
来开始一个事务，则使用LOCK TABLE获取的表锁可以被隐式地释放掉。
069
-sort-index和--analyze选项执行myisamchk程序。不过，在使用myisamchk时，必须设
PREPARE、EXECUTE 和DEALLOCATE 语句共同构成了SQL语言中的预处理语句接口。请不要把
可以在预处理语句里使用“？”字符作为占位符。当以后执行该语句时，再为其中的占位符提供
可以使用字符串字面量或用户变量来指定待预处理的语句。允许使用PREPARE 语句来进行预处理
对于 InnoDB表，OPTIMIZE TABLE 会被映射成 ALTER TABLE，以更新表索引统计，并释放聚
OPTIMIZE TABLE 语句与 CHECK TABLE 语句产生的输出格式相同。
如果启用了二进制日志记录，那么在不给出NO_WRITE_TO_BINLOG或LOCAL选项时，MySQL
把服务器上早于给定文件或给定日期（'CCYY_MM_DDh:mm:ss'格式）生成的二进制日志文
PURGE(BINARYIMASTER} LOGS (TOlog_name'|BEFORE'date'}
条预处理语句。标识或SQL关键字不能用占位符。
对一条语句进行预处理并把它命名为stmt_name。经过预处理的语句可以用EXECUTE语句来
针对 MyISAM表执行 OPTIMIZE TABLE 语句，类似于带--check-only-changed、--quick、
口对表进行碎片整理，以消除浪费掉的空间，并缩小表的大小。
对于MyISAM表，OPTIMIZETABLE会执行以下几个动作。
语句 DELTETE、REPLACE 和UPDATE 会使表的内部出现未使用区域。如果要将其算计在内，则
●OPTIMIZE TABLE
·PURGEBINARYLOGS
PREPARE stmt_name FROM ['str'I@var_name)
·PREPARE
口
更新内部表统计。
如有必要，将索引页面排序。
一处。
把因碎片化而散布在各处的可变长行的内容合并在一起，让各行的内容无间断地存放在同
附录ESQL语法参考
---
## Page 711
许使用的option值。这些选项适用于MyISAM表，其他存储引擎可能会忽略它们。
索引里出现了重复值这一情况无法处理之外，该操作可以修复大部分的问题。下面列出的是各种允
会把 REPAIR TABLE语句写入二进制日志里。
REPAIRTABLE要求对每个表都拥有SELECT和INSERT权限。
个新的账户。
的任何对象定义。例如，所有带DEFINER子句（指向原账户）的存储程序都必须被更新，以指向那
user_name'@'host_name'的格式给出，请参考13.2.1.1节。
数据库拥有UPDATE权限。
擎将调整那些依赖关系指向重命名后的表。
程中不会被其他客户端修改，就应该使用 RENAME TABLE语句。
语句能够同时对多个表进行重命名并能在命名过程中锁定它们。如果需要确保给定表在重命名的过
息。
binlog.000010成为剩余文件中的第一个：
些日志文件仍在使用中。此语句要求拥有SUPER权限。
不带任何选项的 REPAIR TABLE 语句执行的是普通的表修复操作。除了在应该只包含唯一值的
如果启用了二进制日志记录，那么在不给出NO_WRITE_TO_BINLOG或LOCAL选项时，MySQL
口QUICK。它所表示的是，只是快速修复索引，而不管数据文件。
RENAME USER会更新原账户所拥有的权限，以应用到新的账户。不过，它不会更改指向原账户
RENAME USER'myname'@'localhost'TO'yourname'@'localhost';
RENAMEUSER语句将把每个
如果重命名的是一个InnoDB表，其他的表又依赖于该InnoDB表的外键关系，InnoDB存储引
口
口EXTENDED。它所表示的是，执行扩展修复，重建索引。
这条语句的用途是对受损表进行修复。它可用于修复MyISAM表、ARCHIVE表和CSV 表。
●REPAIR TABLE
重命名一个或多个MySQL账户。这条语句要求拥有全局级CREATE USER 权限，或者对mysql
如果某个表上有触发器，那么在试图把它重命名到另一个数据库里去时会导致一个错误。
RENAMETABLE语句不能用来重命名TEMPORARY 表。
重命名一个或者多个表。这条语句与ALTER TABLE...RENAME 语句相似，但 RENAMETABLE
释放还原点不会导致事务被提交或回滚。
PURGE BINARY LOGS TObinlog.000010';
下面这条语句将删除二进制日志文件binlog.000001 到binlog.000009，并且会使
USE_FRM。它所表示的是，使用表的.frm 文件，重新初始化索引文件，并确定如何解释数
·RENAME USER
RENAMETABLE语句也可以用于视图，但是不能把视图重命名到另一个数据库里去。
RENAMETABLE
释放当前事务中名为的 savepoint_name的保存点；如果该保存点不存在，则返回一条出错消
RELEASE SAVEPOINT savepoint_name
·RELEASE SAVEPOINT
from_account重命名为相应的to_account。如果
E.1.SQL语句语法（非复合语句）
691
---
## Page 712
几个唯一性索引中的值匹配时，MySQL会先删除所匹配的那几个行，然后再插人新行。
个分区或子分区。在这种情况下，如果有某个行未被插到指定的分区，则会发生错误。
条
存
性索引里出现重复键值，MySQL将先删除旧行，然后再插入新行。因此，REPLACE语句的语法里不
692
目。REPLACE要求对该个表拥有INSERT和DELETE权限。
在INGORE选项。同样，REPLACE不支持ON DUPLICATEKEY UPDATE。更多信息请参考INSERT
如果表有多个唯一性索引，则有可能发生一条 REPLACE语句删除多个行的情况。当新行同时与
口 MASTER。它会删除复制主服务器上已有的二进制日志文件，重新创建一个新文件并把它编
自MySQL5.6.2起，REPLACE针对分区表支持使用PARTITION子句，以表明行需要插到哪一
·REVOKE
RESET
REPLACE 语句的基本动作与INSERT 相似，不同之处在于：如果将被插入的行会导致表的唯-
REVOKE ALL[PRIVILEGES],GRANT OPTION
option的各种取值及其含义如下所示。
RESET语句对日志或缓存信息的影响与FLUSH语句相同。此语句要求拥有RELOAD权限。
REPLACE [DELAYEDILOW_PRIORITY]
REPLACE [DELAYED ILOW_PRIORITY]
REPLACE [DELAYED
·REPLACE
REPAIRTABLE语句与 CHECKTABLE语句产生的输出格式相同。
FROM
ON[TABLE
这些文件中的读写位置）。
个新中继日志，“忘记”其复制坐标（也就是说，它当前使用的复制二进制日志的文件名和
SLAVE。告诉服务器（如果它是作为一个从服务器），删除所有已有中继日志文件，开始一
除查询缓存中的碎片而不想清除它的全部内容，就应该使用FLUSHQUERYCACHE语句。
QUERY.CACHE。它会清除查询缓存，把当前注册在其中的查询命令全部删除掉。如果只想消
号为000001，再重置二进制日志的索引文件，使它只列出新文件。
SET
版本一样时才使用它。否则，有可能会进一步破坏表。USE_FRM选项不能用于分区表。
INTO]
不过，它应该作为最后的打算，并且只有在当前的MySQL版本与创建表时所使用的MySQL
据文件的内容，以便能够重建索引。如果索引丢失或损坏后不可恢复，则此选项非常有用。
附录ESQL语法参考
*
col
col_name=expr[;
account[,account]..
tbl_name
list)
(partition_name[,partition_name]...)]
(partition_name [, partition_name] ...)]
name
LOW_PRIORITY]
PROCEDURE]
db_name.tbl_name
---
## Page 713
前事务里，可以用ROLLBACK TO SAVEPOINT 语句把当前事务回滚到给定的保存点。
用自动提交模式，那么 ROLLBACK 语句将什么也不做。
子句相同。
处理的存储引擎。（对于非事务型存储引擎，
（或者从mysql.user表手动删除对应于该账户的行）。
销了，该账户也可以用来连接MySQL服务器。要想彻底删除某个账户，必须使用DROPUSER语
二种语法要求拥有全局级CREATE USER 权限，或者对mySq1数据库拥有UPDATE 权限。
要使用这条语句，则必须同时拥有GRANTOPTION权限和想要撤销的那些权限。
创建一个名为 savepoint_name 的事务保存点。任何与之同名的已有保存点都将被删除。在当
如果没在事先使用START TRANSACTION语句或是通过把autocommit变量设置为O的办法禁
如果指定了TOSAVEPOINT子句，那么这条语句将只把当前事务回滚到给定的保存点。
口根据proxy_user撤销proxied_user 账户的PROxY权限：
口撤销superduper@localhost 账户在所有级别上的全部权限：
口ALL 能撤销除GRANT OPTION 权限以外的全部权限。如果想把GRANT OPTION 权限也撤销，
口撤销本地主机上的匿名用户对menagerie 数据库里的某个表的全部权限：
口撤销 member_mgr用户对 sampdb 数据库里的 member 表进行修改的权限：
REVOKE 语句不会从mysql.user权限表删除账户行。这意味着即使把某个账户的权限全都撤
第三种语法形式会从 FROM子句指定的各个账户里来撤销ON 所指定的那个账户的 PROXY 权限。
第二种语法有一个固定的权限列表，但是没有ON子句。它将撤销所有给定账户的全部权限。第
SELECT
●SAVEPOINT
回滚当前事务里的语句所做出的修改，把各有关表恢复到修改前的状态。这只适用于支持事务
REVOKE语句用于撤销（一个或多个）给定账户的权限。其中，账户名的指定格式必须为
SELECT
SAVEPOINT savepoint_name
·ROLLBACK
REVOKE PROXY ONproxied_user FROM proxy_user;
REVOKE ALL,GRANT OPTION FROM‘superduper'@localhost";
REVOKE GRANT OPTION ON menagerie.pet FROM"@'localhost';
REVOKE ALL ON menagerie.pet FROM@localhost';.
[WHEREwhere_expr]
FROM
则必须显式地这么做：
[ASCIDESC]
tbl
[WORK]
··
，语句在执行完毕后会立刻被提交，因而无法回滚。）
E.1SQL 语句语法（非复合语句）
693
句
---
## Page 714
查询还可以用在 DELETE 和 UPDATE 语句的 WHERE子句里,或者和 INSERT 和 REPLACE 语句一起使
个DUAL关键字来充当伪表：
写表达式计算语句：
是可选的（关键字 SELECT 除外，且必须至少要有一个 select_expr子句），所以还可以用它来编
694
口
口
口
口
口
口
每个select_option值可以为下面选项中的一项。
不过，你不能使用子查询来查询正被修改的那个表。
子查询是嵌套在一个 SELECT语句里的另一个SELECT语句，在2.9节里可以找到很多例子。子
SELECT 'one plus one =', 1+1 FROM DUAL;
为了与那些要求 SELECT语句必须有一个FROM子句的数据库系统保持兼容，MySQL准备了一
SELECT'one plus one=',1+1;
SELECT 语句一般用来从一个或多个表里检索行。不过，因为 SELECT语句中的各个组成部分都
器做出的选择不够好，可以利用此选项来指定表检索顺序。
STRAIGHT_JOIN：强制表必须按它们在FROM子句中的先后顺序进行连接。如果你认为优化
根据这一信息，优化器可以更高效地处理查询语句操作。
SQL_BIG_RESULT、SQL_SMALL_RESULT：这两个关键字反映结果集尺寸是小还是大一
少，则需要在该 SELECT 语句返回后立刻执行一条 SELECT FOUND_ROWS（)语句。
将等于实际返回的行的个数。如果在这类 SELECT 语句里使用 SQL_CALC_FOUND_ROWS 选
在子查询里，也不能出现在UNION的第一个 SELECT里。