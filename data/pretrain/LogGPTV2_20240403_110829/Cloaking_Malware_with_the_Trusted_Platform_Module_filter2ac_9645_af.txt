the TPM takes some care to manage these values. For
instance, management software used in Microsoft Win-
dows prevents the user from storing owner AuthData on
the same machine as the TPM. Instead, it can be saved to
a USB key or printed in hard copy. Administrators who
need TPM functionality would ideally understand these
restrictions and manage these values appropriately. Aver-
age users will be more difﬁcult to educate.
The malware platform could initialize a previously
uninitialized TPM, thereby generating the initial Auth-
Data. For our test machines, TPM initialization is pro-
tected by a single BIOS prompt that can be presented on
reboot at the request of system software. To prevent an in-
experienced user from initializing a TPM at the behest of
malicious software, manufacturers could require a more
involved initialization process. The BIOS could require
the user to manually enter settings to enable system soft-
ware to assert physical presence, rather than presenting a
single prompt. More drastically, a user could be required
to perform some out-of-band authentication (such as call-
14
ing a computer manufacturer) to initialize the TPM. How-
ever, all of these security features inhibit TPM usability.
6.5 Detection of malware that uses TPMs
Trafﬁc analysis is a common malware detection tech-
nique. Malware that uses the TPM will cause usage pat-
terns that might be anomalous and therefore could come
to the attention of alert administrators. Of course detect-
ing anomalous usage patterns is a generally difﬁcult prob-
lem, especially if TPM use becomes more common.
7 Related Work
Malware Analysis. TPM cloaking is a new method for
frustrating static and dynamic analysis that is more pow-
erful than previous methods because it uses hardware to
prevent monitoring software from observing unencrypted
code. The most effective analysis technique would be a
variant on the cold boot attack [29], where the infected
machine’s DRAM chips were removed during the late
launch session. Note that a late launch session generally
only lasts seconds. If the DRAM chips are pulled out too
early, the payload will still be encrypted; too late and the
payload is scrubbed out of memory. The analyst could
also snoop the memory bus or the LPC bus. Note that
both of these are hardware techniques, and they are both
effective attacks against legitimate TPM use.
Our protocol does run substantial malware outside the
cloaked computation. All such malware is susceptible to
static analysis [30, 47, 23], dynamic analysis [19, 58, 36],
hybrids [24, 35] , network ﬁltering [16, 49], and network
trafﬁc analysis [20]. To effectively use the TPM the mal-
ware must only decrypt its important secrets within the
cloaked computation.
Polymorphic malware changes details of its encryption
for each payload instance to avoid network ﬁltering. Our
system falls partially into the polymorphic group as we
encrypt our payload. However dynamic analysis tech-
niques [36] are effective against polymorphic encryption
because such schemes must decrypt their payload during
execution. Conﬁcker as well as other modern malware use
public key cryptography to validate or encrypt a malicious
payload [43], as our cloaking protocol does.
Trusted Computing. The TPM can be used in a vari-
ety of contexts to provide security guarantees beyond that
of most general-purpose processors. For instance, it can
be used to protect encryption keys from unauthorized ac-
cess, as in Microsoft’s BitLocker software [7], or to attest
that the computer platform was initialized in some known
state, as in the OSLO boot loader [32]. Flicker [40] uses
TPM late launch functionality to provide code attestation
for pieces of code that are instantiated by, and return to, a
potentially untrusted operating system. Bumpy [41] uses
late launch to protect sensitive input from potentially un-
trusted system software. Our prototype malware platform
uses the same functionality, adding encryption to conceal
the code payload.
Cryptography. Using cryptography for data exﬁltration
was suggested by Young and Yung [59]. Bethencourt,
Song, and Waters [18] showed how using singly homo-
morphic encryption one could do cryptographic exﬁltra-
tion. However, the techniques were limited to a single
keyword search from a list of known keywords and the use
of cryptography signiﬁcantly slowed down the exﬁltration
process. Using fully homomorphic encryption [28] we
could achieve expressive exﬁltration, however, the pro-
cess would be too slow to be viable in practice.
8 Conclusions
Malware can use the Trusted Platform Module to make its
computation signiﬁcantly more difﬁcult to analyze. Even
though the TPM was intended to increase the security of
computer systems, it can undermine computer security
when used by malware.
We explain several ways that TPM-enabled malware
can be defeated using good engineering practice. TPMs
will continue to be widely distributed only if they demon-
strate value and do not bring harm. Establishing and dis-
seminating good engineering practice for TPM manage-
ment to both IT professionals and home users is an essen-
tial part of the TPM’s future.
Acknowledgments
We thank the anonymous reviewers for their comments on
an earlier version of this paper, and Jonathan McCune for
access to the Flicker source code. This research is sup-
ported by NSF CNS-0905602, a Google research award,
and the NSF Graduate Research Fellowship Program.
Waters is supported by NSF CNS-0915361 and
CNS-0952692, AFOSR Grant No: FA9550-08-1-0352,
DARPA PROCEED, DARPA N11AP20006, Google Fac-
ulty Research award, the Alfred P. Sloan Fellowship, and
Microsoft Faculty Fellowship.
References
[1] MyDoom.C Analysis, 2004. http://www.secureworks.
com/research/threats/mydoom-c/.
[2] W32/MyDoom@MM, 2005. http://vil.nai.com/vil/
content/v_100983.htm.
[3] W32/AutoRun.GM.
F-Secure, 2006.
http://http:
//www.f-secure.com/v-descs/worm_w32_
autorun_gm.shtml.
[4] Encryption of Sensitive Unclassiﬁed Data at Rest on Mo-
and Removable Storage Media,
http://iase.disa.mil/policy-guidance/
bile Computing Devices
2007.
dod-dar-tpm-decree07-03-07.pdf.
[5] Owning Kraken Zombies,
a Detailed Discussion,
2008.
http://dvlabs.tippingpoint.com/blog/2008/
04/28/owning-kraken-zombies.
[6] TrouSerS - The open-source TCG Software Stack, 2008. http:
//trousers.sourceforge.net.
[7] BitLocker Drive Encryption Step-by-Step Guide for Windows
http://technet.microsoft.com/en-us/
7, 2009.
library/dd835565(WS.10).aspx.
15
[8] Intel Trusted Execution Technology (Intel TXT) MLE Developer’s
Guide, 2009.
[9] ST Microelectronics, 2010. Private communication.
[10] AMD64 Architecture Programmer’s Manual, Volume 2: System
Programming, 2010.
[11] Embedded security.
Inﬁneon Technologies, 2010. http://
www.infineon.com/tpm.
[12] Intel 64 and IA-32 Architectures Software Developer’s Manual,
Volume 2B, 2010.
[13] Microsoft Security Bulletin Search, 2010.
http://www.
microsoft.com/technet/security/current.aspx.
[14] Trusted Computing Whitepaper. Wave Systems Corporation,
2010. http://www.wave.com/collateral/Trusted_
Computing_White_Paper.pdf.
[15] PolarSSL Open Source embedded SSL/TLS cryptographic library,
2011. http://polarssl.org.
[16] AH KIM, H., AND KARP, B. Autograph: Toward Automated, Dis-
tributed Worm Signature Detection. In USENIX Security (2004).
[17] BERGER, S., CACERES, R., GOLDMAN, K. A., PEREZ, R.,
vTPM: Virtualizing the
SAILER, R., AND VAN DOORN, L.
Trusted Platform Module. In USENIX Security (2006).
[18] BETHENCOURT, J., SONG, D., AND WATERS, B. Analysis-
Resistant Malware. In NDSS (2008).
[19] BRUMLEY, D., HARTWIG, C., LIANG, Z., NEWSOME, J.,
SONG, D., AND YIN, H. Automatically Identifying Trigger-based
Behavior in Malware. In Botnet Detection. Springer, 2008.
[20] CABALLERO, J., POOSANKAM, P., KREIBICH, C., AND SONG,
D. Dispatcher: Enabling Active Botnet Inﬁltration Using Auto-
matic Protocol Reverse-engineering. In CCS (2009).
[21] CHEN, L., AND RYAN, M. Attack, Solution, and Veriﬁcation for
Shared Authorisation Data in TCG TPM. vol. 5983 of Lecture
Notes in Computer Science. Springer, 2010.
[22] CHIEN, E. CodeRed Worm, 2007. http://www.symantec.
com/security_response/writeup.jsp?docid=
2001-071911-5755-99.
Inspector Gadget: Automated Extraction of Proprietary Gadgets
from Malware Binaries. In IEEE S&P (2010).
[37] KURSAWE, K., SCHELLEKENS, D., AND PRENEEL, B. Ana-
lyzing Trusted Platform Communication. In ECRYPT Workshop,
CRASH CRyptographic Advances in Secure Hardware (2005).
[38] MATROSOV, A., RODIONOV, E., HARLEY, D., AND MALCHO,
J. Stuxnet Under the Microscope, 2010. Revision 1.2.
[39] MCCUNE, J. M., LI, Y., QU, N., ZHOU, Z., DATTA, A.,
GLIGOR, V., AND PERRIG, A. TrustVisor: Efﬁcient TCB Re-
duction and Attestation. In IEEE S&P (2010).
[40] MCCUNE, J. M., PARNO, B., PERRIG, A., REITER, M. K., AND
ISOZAKI, H. Flicker: An Execution Infrastructure for TCB Mini-
mization. In EuroSys (2008).
[41] MCCUNE, J. M., PERRIG, A., AND REITER, M. K. Safe passage
for passwords and other sensitive data. In NDSS (2009).
[42] MITCHELL, C. J., Ed. Trusted Computing. Institution of Electrical
Engineers, 2005.
[43] NAZARIO,
J.
The Conﬁcker Cabal Announced, 2009.
http://asert.arbornetworks.com/2009/02/
the-conficker-cabal-announced/.
[44] O’DEA, H. The Modern Rogue - Malware with a Face. In Virus
Bulletin Conference (2009).
[45] PORRAS, P., SAIDI, H., AND YEGNESWARAN, V. An Analysis
of Conﬁcker’s Logic and Rendezvous Points, 2009. http://
mtc.sri.com/Conficker/.
[46] POST, A. W32.Storm.Worm, 2007. http://www.symantec.
com/security_response/writeup.jsp?docid=
2001-060615-1534-99.
[47] PREDA, M. D., CHRISTODORESCU, M., JHA, S., AND DEBRAY,
S. A Semantics-based Approach to Malware Detection. In POPL
(2007).
[48] SACCO, A. L., AND ORTEGA, A. A.
Persistent BIOS
In CanSecWest Applied Security Conference
http://www.coresecurity.com/content/
Infection.
(2009).
Persistent-Bios-Infection.
[23] CHRISTODORESCU, M., AND JHA, S. Static Analysis of Executa-
[49] SINGH, S., ESTAN, C., VARGHESE, G., AND SAVAGE, S. Auto-
mated Worm ﬁngerprinting. In OSDI (2004).
[50] STRASSER, M., STAMER, H., AND MOLINA, J. TPM Emulator,
2010. http://tpm-emulator.berlios.de/.
[51] TARNOVSKY, C. Hacking the Smartcard Chip.
In Black Hat
(2010).
[52] TRUSTED COMPUTING GROUP. TPM Main Speciﬁcation, 2007.
[53] WHEELER, D. A. SLOCCount. http://www.dwheeler.
com/sloccount/, 2001.
[54] WOJTCZUK, R. Exploiting large memory management vulnera-
Invisible Things Lab,
bilities in Xorg server running on Linux.
2010.
[55] WOJTCZUK, R., RUTKOWSKA, J., AND TERESHKIN, A. An-
other Way to Circumvent Intel Trusted Execution Technology. In-
visible Things Lab, 2009.
[56] WOJTCZUK, R., AND TERESHKIN, A. Attacking Intel BIOS.
Invisible Things Lab, 2010.
[57] WONG, C., BIELSKI, S., MCCUNE, J. M., AND WANG, C. A
Study of Mass-mailing Worms. In ACM Workshop On Rapid Mal-
code (2004).
[58] YIN, H., SONG, D., EGELE, M., KRUEGEL, C., AND KIRDA, E.
Panorama: Capturing System-wide Information Flow for Malware
Detection and Analysis. In CCS (2007).
[59] YOUNG, A., AND YUNG, M. Malicious Cryptography: Exposing
Cryptovirology. Wiley, 2004.
bles to Detect Malicious Patterns. In USENIX Security (2003).
[24] COMPARETTI, P. M., SALVANESCHI, G., KIRDA, E., KOL-
BITSCH, C., KRUEGEL, C., AND ZANERO, S. Identifying Dor-
mant Functionality in Malware Programs. In IEEE S&P (2010).
[25] DOLEV, D., DWORK, C., AND NAOR, M. Nonmalleable cryp-
tography. SIAM J. Comput. 30, 2 (2000), 391–437.
[26] FALLIERE, N., MURCHU, L. O., AND CHIEN, E. W32.Stuxnet
Dossier, 2010. Version 1.3 (November 2010).
[27] FINNEY, H. PrivacyCA, 2009. http://www.privacyca.
com.
[28] GENTRY, C. Fully homomorphic encryption using ideal lattices.
In STOC (2009), pp. 169–178.
[29] HALDERMAN, J. A., SCHOEN, S. D., HENINGER, N., CLARK-
SON, W., PAUL, W., CAL, J. A., FELDMAN, A. J., AND FELTEN,
E. W. Lest we remember: Cold boot attacks on encryption keys.
In USENIX Security (2008).
[30] HU, X., CKER CHIUEH, T., AND SHIN, K. G. Large-scale Mal-
ware Indexing Using Function-call Graphs. In CCS (2009).
[31] KASSLIN, K., AND FLORIO, E.
Stoned (...Again!). The Rise of
http://www.f-secure.com/weblog/archives/
Kasslin-Florio-VB2008.pdf.
Your Computer is Now
the MBR Rootkits, 2008.
[32] KAUER, B. OSLO: Improving the security of trusted computing.
In USENIX Security (2007).
[33] KIVITY, A. kvm: The Linux Virtual Machine Monitor. In Ottawa
Linux Symposium (2007).
[34] KNOWLES, D., AND PERRIOTT, F. W32.Blaster.Worm, 2003.
http://www.symantec.com/security_response/
writeup.jsp?docid=2003-081113-0229-99.
[35] KOLBITSCH, C., COMPARETTI, P. M., KRUEGEL, C., KIRDA,
E., ZHOU, X., AND WANG, X. Effective and Efﬁcient Malware
Detection at the End Host. In USENIX Security (2009).
[36] KOLBITSCH, C., HOLZ, T., KRUEGEL, C., AND KIRDA, E.
16