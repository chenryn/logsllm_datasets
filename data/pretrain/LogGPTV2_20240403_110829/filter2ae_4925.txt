# 利用SSRF漏洞接管APP服务器

##### 译文声明
本文为翻译文章，原文来源：360安全播报。译文仅供参考，具体内容和含义请以原文为准。

## SSRF攻击简介
SSRF（Server-Side Request Forgery）攻击是指攻击者利用存在漏洞的服务器发送恶意请求到第三方服务器或内部资源，从而实施进一步的攻击行为，如跨站点端口攻击、服务枚举等。这种攻击方式十分危险，因为攻击者可以利用易受攻击的服务器来攻击其他公共资源和本地基础设施。

## 常见的SSRF漏洞类型
以下是一些常见的可被SSRF利用的漏洞：
- URL重定向
- 远程文件包含
- SQL注入
- 框架注入
- 链接注入
- XML外部实体

## 攻击者如何利用这些漏洞
一旦发现上述漏洞，攻击者可以将其作为进一步攻击的工具，例如：
- 对防火墙保护下的内部主机进行端口扫描。
- 攻击内部应用程序。
- 利用文件处理程序访问本地网页服务器上的内容，如`file:///c:/windows/system32/`。
- 枚举服务。

此外，攻击者还可以使用诸如`mailto://`、`gopher://`等协议发起攻击，具体取决于服务器和解析器对这些请求的处理方式。

## 端口扫描示例
通过SSRF，攻击者能够执行端口扫描。例如，可以通过如下URL尝试访问不同端口：
```
GET /Vulnerablepage.php?VulnParameter=http://127.0.0.1:80
GET /Vulnerablepage.php?VulnParameter=http://127.0.0.1:443
GET /Vulnerablepage.php?VulnParameter=http://127.0.0.1:21
```

根据响应的不同，攻击者可以判断哪些端口是开放的。同样的方法也可用于扫描其他资源。此过程可通过Burp Suite中的入侵功能实现自动化。设置有效荷载位置为`GET /Vulnerablepage.php?VulnParameter=http://127.0.0.1:§§ HTTP/1.1`，并将“有效荷载类型”设为“数字”，“端口”范围设为“0-65535”。

## SSRF测试
通常情况下，含有URL输入字段的应用程序容易遭受此类攻击。然而，即使是那些无法直接推断出其用途的随机参数也可能成为攻击目标。因此，在不清楚服务器如何处理这些参数的情况下，检查可疑参数是否存在漏洞是非常重要的。

### 概念验证
以下是进行概念验证渗透测试的基本步骤：
1. 在应用中找到一个潜在的输入域以测试漏洞。
2. 使用`nc -l -v <port>`启动Netcat监听指定端口（假设服务器名为`servertest`）。
3. 当Netcat开始运行后，在易受攻击的输入域中输入`http://servertest:<port>/testSSRF`。
4. 如果服务器确实存在漏洞，它将建立连接，并且Netcat监听器会显示相关连接详情。

## 工具推荐
在测试过程中，Burp Suite的协作功能非常有用。首先，它可以帮助识别问题所在；其次，再结合上述方法进行手动验证。该协作功能会向精心构造的已感染应用程序发送有效荷载，以触发与协作服务器之间的连接。随后，Burp将持续监控协作服务器，确认是否有任何请求触发了连接。

## 安全建议
- **避免使用用户提供的数据进行数据验证**。
- **强化应用程序服务器的安全性**，确保关闭所有不必要的端口和服务。
- **为允许运行的主机和服务创建白名单**。