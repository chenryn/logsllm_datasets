### C.3.2.4 Normalized Geometry Schema Test Queries

#### Insert Statements
```sql
INSERT INTO geometry_columns VALUES ('buildings', 'footprint_gid', 'building_area_geom', 1, 5, 2, 0);
INSERT INTO geometry_columns VALUES ('ponds', 'shores_gid', 'pond_geom', 1, 11, 2, 0);
INSERT INTO geometry_columns VALUES ('named_places', 'boundary_gid', 'named_place_geom', 1, 5, 2, 0);
INSERT INTO geometry_columns VALUES ('map_neatlines', 'neatline_gid', 'map_neatline_geom', 1, 5, 2, 0);
```

#### Conformance Item B1
```sql
SELECT f_table_name FROM geometry_columns;
```

#### Conformance Item B2
```sql
SELECT g_table_name FROM geometry_columns;
```

#### Conformance Item B3
```sql
SELECT storage_type FROM geometry_columns WHERE f_table_name = 'streams';
```

#### Conformance Item B4
```sql
SELECT geometry_type FROM geometry_columns WHERE f_table_name = 'streams';
```

#### Conformance Item B5
```sql
SELECT coord_dimension FROM geometry_columns WHERE f_table_name = 'streams';
```

#### Conformance Item B6
```sql
SELECT srid FROM geometry_columns WHERE f_table_name = 'streams';
```

#### Conformance Item B7
```sql
SELECT srtext FROM SPATIAL_REF_SYS WHERE SRID = 101;
```

### C.3.3 Geometry Types and Functions

The scope of this test ensures that:
a) The database (once inserted) is accessible via the schema defined in this standard.
b) The functionality defined in this standard is implemented as described.

#### Table C.4: Queries for Testing Geometry Types and Functions

| ID | Functionality Tested | Query Description | Answer |
|----|----------------------|--------------------|--------|
| T1 | GEOMETRY_COLUMNS table/view is created/updated properly | Check if all feature tables (lakes, road_segments, divided_routes, buildings, forests, bridges, named_places, streams, ponds, map_neatlines) are represented in the GEOMETRY_COLUMNS table. | - |
| T2 | GEOMETRY_COLUMNS table/view is created/updated properly | Check if the correct geometry column for the streams table is represented in the GEOMETRY_COLUMNS table. | - |
| T3 | GEOMETRY_COLUMNS table/view is created/updated properly | Check if the correct coordinate dimension for the streams table is represented in the GEOMETRY_COLUMNS table. | 2 |
| T4 | GEOMETRY_COLUMNS table/view is created/updated properly | Check if the correct value of SRID for the streams table is represented in the GEOMETRY_COLUMNS table. | 101b |
| T5 | SPATIAL_REF_SYS table/view is created/updated properly | Check if the correct value of SRTEXT is represented in the SPATIAL_REF_SYS table. | 'PROJCS["UTM_ZONE_14N", GEOGCS["World Geodetic System 72", DATUM["WGS_72", ELLIPSOID["NWL_10D", 6378135, 298.26]], PRIMEM["Greenwich", 0], UNIT["Meter", 1.0]], PROJECTION["Transverse_Mercator"], PARAMETER["False_Easting", 500000.0], PARAMETER["False_Northing", 0.0], PARAMETER["Central_Meridian", -99.0], PARAMETER["Scale_Factor", 0.9996], PARAMETER["Latitude_of_origin", 0.0], UNIT["Meter", 1.0]]' |
| T6 | Dimension(g Geometry) : Integer | Determine the dimension of Blue Lake. | 2 |
| T7 | GeometryType(g Geometry) : String | Determine the type of Route 75. | 'MULTILINESTRING' |
| T8 | AsText(g Geometry) : String | Determine the WKT representation of Goose Island. | 'POLYGON( ( 67 13, 67 18, 59 18, 59 13, 67 13) )'c |
| T9 | AsBinary(g Geometry) : Blob | Determine the WKB representation of Goose Island. Test by applying AsText to the result of PolyFromText to the result of AsBinary. | 'POLYGON( ( 67 13, 67 18, 59 18, 59 13, 67 13) )'c |
| T10 | SRID(g Geometry) : Integer | Determine the SRID of Goose Island. | 101b |
| T11 | IsEmpty(g Geometry) : Integer | Determine whether the geometry of a segment of Route 5 is empty. | 0 |
| T12 | IsSimple(g Geometry) : Integer | Determine whether the geometry of a segment of Blue Lake is simple. | 1 |
| T13 | Boundary(g Geometry) : Geometry | Determine the boundary of Goose Island. | 'LINESTRING( 67 13, 67 18, 59 18, 59 13, 67 13 )' or 'MULTILINESTRING (( 67 13, 67 18, 59 18, 59 13, 67 13 ))' |
| T14 | Envelope(g Geometry) : Geometry | Determine the envelope of Goose Island. | 'POLYGON( ( 59 13, 59 18, 67 18, 67 13, 59 13) )' |
| T15 | X(p Point) : Double Precision | Determine the X coordinate of Cam Bridge. | 44.00 |
| T16 | Y(p Point) : Double Precision | Determine the Y coordinate of Cam Bridge. | 31.00 |
| T17 | StartPoint(c Curve) : Point | Determine the start point of road segment 102. | 'POINT( 0 18 )' |
| T18 | EndPoint(c Curve) : Point | Determine the end point of road segment 102. | 'POINT( 44 31 )' |
| T19 | IsClosed(c Curve) : Integer | Determine if the boundary of Goose Island is closed. | 1 |
| T20 | IsRing(c Curve) : Integer | Determine if the boundary of Goose Island is a ring. | 1 |
| T21 | Length(c Curve) : Double Precision | Determine the length of road segment 106. | 26.00 (in metres) |
| T22 | NumPoints(l LineString) : Integer | Determine the number of points in road segment 102. | 5 |
| T23 | PointN(l LineString, n Integer) : Point | Determine the 1st point in road segment 102. | 'POINT( 0 18 )' |
| T24 | Centroid(s Surface) : Point | Determine the centroid of Goose Island. | 'POINT( 53 15.5 )'d |
| T25 | PointOnSurface(s Surface) : Point | Determine a point on Goose Island. | 1 |
| T26 | Area(s Surface) : Double Precision | Determine the area of Goose Island. | 40.00 (square metres) |
| T27 | ExteriorRing(p Polygon) : LineString | Determine the exterior ring of Blue Lake. | 'LINESTRING(52 18, 66 23, 73 9, 48 6, 52 18)' |
| T28 | NumInteriorRings(p Polygon) : Integer | Determine the number of interior rings of Blue Lake. | 1 |
| T29 | InteriorRingN(p Polygon, n Integer) : LineString | Determine the first interior ring of Blue Lake. | 'LINESTRING(59 18, 67 18, 67 13, 59 13, 59 18)' |
| T30 | NumGeometries(g GeomCollection) : Integer | Determine the number of geometries in Route 75. | 2 |
| T31 | GeometryN(g GeomCollection, n Integer) : Geometry | Determine the second geometry in Route 75. | 'LINESTRING( 16 0, 16 23, 16 48 )' |
| T32 | IsClosed(mc MultiCurve) : Integer | Determine if the geometry of Route 75 is closed. | 0 |
| T33 | Length(mc MultiCurve) : Double Precision | Determine the length of Route 75. | 96.00 (in metres) |
| T34 | Centroid(ms MultiSurface) : Point | Determine the centroid of the ponds. | 'POINT( 25 42 )'d |
| T35 | PointOnSurface(ms MultiSurface) : Point | Determine a point on the ponds. | 1 |
| T36 | Area(ms MultiSurface) : Double Precision | Determine the area of the ponds. | 8.00 (in square metres) |
| T37 | Equals(g1 Geometry, g2 Geometry) : Integer | Determine if the geometry of Goose Island is equal to the same geometry constructed from its WKT representation. | 1 |
| T38 | Disjoint(g1 Geometry, g2 Geometry) : Integer | Determine if the geometry of Route 75 is disjoint from the geometry of Ashton. | 1 |
| T39 | Touches(g1 Geometry, g2 Geometry) : Integer | Determine if the geometry of Cam Stream touches the geometry of Blue Lake. | 1 |
| T40 | Within(g1 Geometry, g2 Geometry) : Integer | Determine if the geometry of the house at 215 Main Street is within Ashton. | 1 |
| T41 | Overlaps(g1 Geometry, g2 Geometry) : Integer | Determine if the geometry of Green Forest overlaps the geometry of Ashton. | 1 |
| T42 | Crosses(g1 Geometry, g2 Geometry) : Integer | Determine if the geometry of road segment 101 crosses the geometry of Route 75. | 1 |
| T43 | Intersects(g1 Geometry, g2 Geometry) : Integer | Determine if the geometry of road segment 101 intersects the geometry of Route 75. | 1 |
| T44 | Contains(g1 Geometry, g2 Geometry) : Integer | Determine if the geometry of Green Forest contains the geometry of Ashton. | 0 |
| T45 | Relate(g1 Geometry, g2 Geometry, PatternMatrix String) : Integer | Determine if the geometry of Green Forest relates to the geometry of Ashton using the pattern "TTTTTTTTT". | 1 |
| T46 | Distance(g1 Geometry, g2 Geometry) : Double Precision | Determine the distance between Cam Bridge and Ashton. | 12 (in metres) |
| T47 | Intersection(g1 Geometry, g2 Geometry) : Geometry | Determine the intersection between Cam Stream and Blue Lake. | 'POINT( 52 18 )' |
| T48 | Difference(g1 Geometry, g2 Geometry) : Geometry | Determine the difference between Ashton and Green Forest. | 'POLYGON( ( 56 34, 62 48, 84 48, 84 42, 56 34) )' or 'MULTIPOLYGON( ( 56 34, 62 48, 84 48, 84 42, 56 34) )'c |
| T49 | Union(g1 Geometry, g2 Geometry) : Geometry | Determine the union of Blue Lake and Goose Island. | 'POLYGON((52 18,66 23,73 9,48 6,52 18))' or 'MULTIPOLYGON((52 18,66 23,73 9,48 6,52 18))'c |
| T50 | SymDifference(g1 Geometry, g2 Geometry) : Geometry | Determine the symmetric difference of Blue Lake and Goose Island. | 'POLYGON((52 18,66 23,73 9,48 6,52 18))' or 'MULTIPOLYGON((52 18,66 23,73 9,48 6,52 18))'c |
| T51 | Buffer(g Geometry, d Double Precision) : Geometry | Make a 15m buffer about Cam Bridge. | 15 1 |
| T52 | ConvexHull(g Geometry) : Geometry | Determine the convex hull of Blue Lake. | 'POLYGON((52 18,66 23,73 9,48 6,52 18))' or 'MULTIPOLYGON((52 18,66 23,73 9,48 6,52 18))'c |

### Notes
- **a**: Additional feature tables that are not part of this test will also be returned if present.
- **b**: If SRID 101 already exists, or if the system assigns SRID values, appropriate adjustments should be made in the test suite.
- **c**: Polygon rotation is not defined by this standard; actual polygon rotation may be in a clockwise or counter-clockwise direction.
- **d**: No specific algorithm is specified for the Centroid function; answers may vary with implementation.
- **e**: For this test, we will use the Contains function (which we don't test until later).
- **f**: This test counts the number of buildings contained in the buffer that is generated. This test only works because we have a single bridge record, two building records, and we selected the buffer size such that only one of the buildings is contained in the buffer.

### C.3.3.1 Geometry Types and Functions Schema Construction

```sql
CREATE TABLE spatial_ref_sys (
    srid INTEGER NOT NULL PRIMARY KEY,
    auth_name CHARACTER VARYING,
    auth_srid INTEGER,
    srtext CHARACTER VARYING(2048)
);

-- Lakes
CREATE TABLE lakes (
    fid INTEGER NOT NULL PRIMARY KEY,
    name CHARACTER VARYING(64),
    shore POLYGON
);

-- Road Segments
CREATE TABLE road_segments (
    fid INTEGER NOT NULL PRIMARY KEY,
    name CHARACTER VARYING(64),
    aliases CHARACTER VARYING(64),
    num_lanes INTEGER,
    centerline LINESTRING
);

-- Divided Routes
CREATE TABLE divided_routes (
    fid INTEGER NOT NULL PRIMARY KEY,
    name CHARACTER VARYING(64),
    num_lanes INTEGER,
    centerlines MULTILINESTRING
);

-- Forests
CREATE TABLE forests (
    fid INTEGER NOT NULL PRIMARY KEY,
    name CHARACTER VARYING(64),
    boundary MULTIPOLYGON
);

-- Bridges
CREATE TABLE bridges (
    fid INTEGER NOT NULL PRIMARY KEY,
    name CHARACTER VARYING(64),
    position POINT
);

-- Streams
CREATE TABLE streams (
    fid INTEGER NOT NULL PRIMARY KEY,
    name CHARACTER VARYING(64),
    centerline LINESTRING
);

-- Buildings
CREATE TABLE buildings (
    fid INTEGER NOT NULL PRIMARY KEY,
    -- Additional columns can be added here
);
```

This revised version provides a clear, organized, and professional presentation of the SQL statements, test queries, and schema construction.