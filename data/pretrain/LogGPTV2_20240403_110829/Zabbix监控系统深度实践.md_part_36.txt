zabbix_proxy/proxy.c:CONFIG_HOSTNAME_ITEM = zbx_strdup (coNFIG_HOSTNAME
libs/zbxsysinfo/linux/hostname.c:("system.hostname",0,SYSTEM_HOSTNAME,NULL);
libs/zbxsysinfo/hpux/hostname.c: ("system.hostname",O, SYSTEM_HOSTNAME,NULL);
$grep-r'system.hostname'
从 system.hostname人手，先 grep关键字，代码如下。
libs/zbxsysinfo/aix/hostname.c:("system.hostname",O,SYSTEM_HOSTNAME,NULL};
这一章中，我们会解析两个Zabbix自带的监控项：system.hostname 和 cpu load。
Zabbix内置监控项实现
第20章
"failedto
·291·
---
## Page 307
●292°
system.cpu.load的实现，相比 system.hostmname,它更加能体现Zabbix对于内置监控项的设计思路，
20.2
码的核心在于引用了GNU C库的utsname.h，定义了utsname结构体，然后从其中获得了
OK表示一个函数执行成功或者不成功。SET_STR_RESULT是将一个值赋给一个字符串。代
就是不同的操作系统。我们选择 Linux的 hostname.c去看一下。
Zabbix监控系统深度实践
hostname
通过上一节大家已经对于Zabbix内置监控项的实现了解了个大概。我们这一节再看一下
/*KEY
ZBX_METRIC
那在前端配置的system.hostname的时候，Zabbix怎么知道执行这个代码呢？看下面的代码。
这一段就是 system.c的内容，代码非常简单，SYSINFO_RET_FAIL和SYSINFO_RET
ZBX METRIC
#endif
#include
#ifdef HAVE_SYS_UTSNAME_H
#include "sysinfo.h"
system.cpu.load
{"system.hostname"
return SYSINFO RET_OK;
SET_STR_RESULT(result,
if （-1 == uname（&name ）)
struct utsname name;
{"syStem.hostname",O,SYSTEM_HOSTNAME,NULL};
/*KEY FLAG FUNCTION TEST PARAMETERS */
name.nodename。
returnSYSINFO_RET_FAIL;
parameter_hostname=
FLAG
parameter_hostname=
FUNCTION
SYSTEM_HOSTNAME,
TEST PARAMETERS*/
NULL);
---
## Page 308
load有固定接收的几个参数（avgl，avg5等）。这是C语言中比较字符串是否相等的方法，返
就获取到了“a"。获得参数后，再使用 strcmp方法来判断是否有需要的参数。比如 system.cpu.
因为 system.cpu.load 包括了对于内置监控项参数的解析等功能。
回值为0即表示相等。
if (2nparam)
double
int mode, per_cpu = 1, cpu_num;
char
int SYSTEM_CPU_LOAD (AGENT_REQUEST *request, AGENT_RESULT *result)
下面我们看cpu.c 中计算CPU负载的代码。
获取监控项的参数使用的是“get_rparam”方法，它接受两个参数：第一个是对于一个监
（4）SYSTEM_CPU_SWITCHES：CPU上下文切换数量。
（3） SYSTEM_CPU_LOAD:CPU负载。
（2）SYSTEM_CPU_UTIL：CPU的各个状态数据，比如 iowait，支持针对某个CPU。
（1）SYSTEM_CPU_NUM：CPU的个数。
关于CPU的内置监控，都在cpu.c中，它一共定义了以下5个方法。
（5） SYSTEM_CPU_INTR:CPU 中断。
（（‘d） d == 01 du ==0\.1 du ==N） 
tmp=get_rparam（request,1）;
else
(（uTe‘du） duxs == 0 1I du == 0\. 11 du == TN） JT
tmp = get_rparam (request,
return SYSINFO RET FAIL;
mode=ZBX_AVG1;
mode =ZBX_AVG5;
return SYSINFO_RET_FAIL;
if (0!= strcmp(tmp,"percpu"))
per_cpu = 0;
load[ZBX_AVG_COUNT], value;
*tmp;
0）：
第 20章Zabbix内置监控项实现
·293°
---
## Page 309
·294·
码如下。
用的。是的，cpu.c 和前端key 的对应关系，不是写在cpu.c 里的，而是写在linux.c中，
参数，从load数组中取出需要的数值。
里面除了key、调用的方法，最后一列表示的是什么参数都不输人的默认参数。
("system.cpu.load", CF_HAVEPARAMS, SYSTEM_CPU_LOAD,
CPU负载的key也在里面，如下。
ZBX_METRIC
这里好像没有像hostname.c中那样写明这个方法在前端是使用“system.hostname”
核心代码是使用 getloadavg方法获取一个当前CPU负载的数组一
{"kernel.maxproc", O, KERNEL_MAXPROC, NULL),
{"kernel.maxfiles", 0,
KEY FLAG FUNCTION TEST PARAMETERS */
return SYSINFO_RET_OK;
SET_DBL_RESULT(result, value）;
if (1 == per_cpu)
value=load[mode];
if (mode >=
else
else
value
return SYSINFO_RET_FAIL;
return
mode = ZBX_AVG15;
if（0 == strcmp(tmp, 
/= cpu_num;
return SYSINFO_RET_FAIL;
 getloadavg (load,
 parameters_specific[] 
SYSINFO_RET_FAIL;
KERNEL_MAXFILES,
"avg15"))
3))
NULL}，
"all,avg1"}
—load，然后根据输入的
调
---
## Page 310
★第27章社区论坛
★第26章微信公众平台报警
★
★第24章Zatree
★
★第22章Zabbix代码问题和解决
★第21章典型案例分析
第25章Zabbix第三方插件
第23章PPTV的Zabbix监控体系
第五部分社区和开源
---
## Page 311
·296°
茧，把这个问题搞清楚，并将其解决吧。
的问题，我们想去看是什么问题引起的告警，又无从下手。这一节大家就跟着笔者一起抽丝剥
常，但在前端会有这个提示，而且，还显示Zabbix没有运行，如图21-1所示。这是个很典型
找到感觉，并在工作中更多的使用这种方法排查问题。
使得自己对于开源工具的理解能够更深，从而提升自己的水平。
很多问题，它的代码更不是“不可能读懂的”。应该从代码级别去分析问题，并且解决问题
非常难懂，很难从其中找到解决问题的方法。其实不然，开源工具也是工程师开发的，它也有
从代码级别去分析解决问题。很多朋友总觉得开源工具是一个非常高深的东西，它的代码一定
源产品出的问题，经常束手无策，把它们当做一个黑盒。笔者认为，要用好一个产品，一定要
第21章
一章中，笔者会把一些碰到的非常困难的问题的解决方法分享给各位。
典型案例分析
有很多朋友碰到过一个问题，它的现象就是明明 Zabbix Server和 Zabbix的前端都运行很正
在本章中，每一节会分析一个问题，大多数问题都会从代码上进行分析，希望大家能从中
在笔者使用Zabbix和各种开源产品的过程中，和很多朋友都有过交流，发现大家对于开
在使用Zabbix过程中，会碰到各种各样的问题，有的容易解决，
有的却非常困难。在这
---
## Page 312
码在 include/classes/server/CZabbixServer.php 中，片段如下。
来判断的，而这个变量又是从 YzabbixServer的 isRunning方法获取的。isRunning这个方法的代
not running: the information displayed may not be current.')
SOCKET_TIMEOUT,O）;
以猜测这是一个提供RPC服务的接口PHP，下面是代码片段。
locale 文件（即各种语言的翻译文件外），只有在jsrpc.php 中出现过，又根据 PHP 文件名，可
+SERVER_CHECK_INTERVAL）isRunning (）;
if（!isset($session['serverCheckResult']) Il($session['serverCheckTime']
'message'
case 'zabbix.status':
'result'
现有的信息就是这条报警，先看看这个报警是在PHP代码中的什么地方。我们发现除了
@return bool
Returns true if the Zabbix server is running and false otherwise.
=>(bool) $session['serverCheckResult'],
Zabbix server isrunning
Parameter
pusse
not be current.
图21-1
No
Valuei
$ZBX_SERVER_PORT,ZBX
('Zabbix server is
第21章典型案例分析
·297°
---
## Page 313
·298
使用this 指针，那connect方法一定在本PHP文件中了，代码如下。
Zabbix监控系统深度实践
protected function
if the connection has been established or
*Opens a socket to the Zabbix server. Returns the socket resource
从注释来说，方向是对了，这个方法是用来判断 Zabbix server是否在运行的。看代码它是
@return boollresource
false otherwise.
SerrorMsg,
if（!$this->socket）{
public function isRunning（）
if (!$socket = @fsockopen( Sthis->host, $this->port, $errorCode,
if （!$this->host ll !$this->port）{
return（bool） $this->connect（）;
$this->timeout ）)(
switch（$errorMsg）(
connect（）（
network configuration.\n",
be reached.Possible reasons:\nl. Incorrect server
case‘No route to host':
Firewall is blocking TCP connection.\n", $this->host) ;
connection;\n3.Zabbix server daemon not running;\n4.
environment（for example, SELinux）is blocking the
IP/DNS in the \"zabbix.conf.php\";\n2. Security
\"%s\"refused.Possible reasons:\nl.Incorrect server
case'Connectionrefused':
return false;
break;
,$this->host）;
---
## Page 314
这两个变量，是在初始化这个类的过程中传入的参数。CZabbixServer的构造函数如下。
一般这种变量定义都在文件的开头处，我们从上往下看，很快就在这个类的构造函数中发现，
Zabbix server建立一个网络连接了。连接建立的代码如下。
那么Ythis->host 和 Ythis->port 是哪里定义的呢？从 this 指针看出，肯定就在本PHP文件中。
@fsockopen($this->host, $this->port, $errorCode, $errorMsg, $this->timeout)
从方法的名称（connect）和方法的注释，大家应该已经明白connect方法的作用就是和
 Class constructor.
return $this->socket;
$this->socket = $socket;
$this->error = $dErrorMsg.$errorMsg;
Name or service not known':
default:
server configuration.\n", $this->host);
\” %s\" failed. Possible reasons:\nl. Incorrect server
case ‘php_network_getaddresses: getaddrinfo failed:
blocking TCP connection.\n",
IP/DNS in the \" zabbix.conf.php\" ;\n2. Firewall is
\" %s\" timed out. Possible reasons:\nl. Incorrect server
case
$dErrorMsg=
break;
break;
‘Connection timed out':
break;
（，
；$this->host）;
第21章典型案例分析
·299°
---
## Page 315
·300·
的地方找出来，发现这个变量是在conf/zabbix.con.php中设置的，代码如下。
这两个变量是全部大写的，判断可能是全局变量，然后使用grep把所有使用YZBX_SERVER
SOCKET TIMEOUT,
Zabbix监控系统深度实践
dudi>
关键就是YZBX_SERVER和YZBX_SERVER_PORT，这两个参数在jsrpc.php中没有再出现。
$zabbixServer = new CZabbixServer ($ZBX_SERVER, $ZBX_SERVER_PORT, ZBX
回过头去看最早的jsrpc.php，它是这么初始化CZabbixServer的：
public function
@param int
@param int
@param int Sport
@param string $host
$ZBX_SERVER_NAME=;
$ZBX_SERVER_PORT='10051';
$ZBX_SERVER ='localhost';
$DB["SCHEMA"]=';
// SCHEMA is relevant only for IBM_DB2 database
$DB["USER"]='zabbix';
$DB["PORT"]='O';
$DB["SERVER"]
=
global $DB;
//
$this->totalBytesLimit= StotalBytesLimit;
$this->timeout = $timeout;
os = arodhost = Shost;
Zabbix GUI configuration file
$totalBytesLimit
$timeout
='localhost';
construct（$host，$port,$timeout，$totalBytesLimit)
---
## Page 316
SOCKET_TIMEOUT,O）；
如下。
继续看 get_status 方法，发现它是在 include/func.inc.php 中定义的，和 Zabbix server 相关的逻辑
（Yes'）?'off':'on')），
逻辑如下。
php，发现构造这一行的代码如下。
解决的方法就是将这个参数改成正确的Zabbix serverIP和端口就行了。
Zabbix server的IP或者端口后，并不会再去运行一次PHP中的installation过程，所以会出现问题
的。参数YZBX_SERVER和YZBX_SERVER_PORT是在前端的配置过程中设置的，在更改了
是因为Zabbix前端无法根据配置中的 Zabbix server的IP和端口与Zabbix server建立连接造成
$reportWidget->addItem(make_status_of_zbx());
$zabbixServer
//server
我们发现是根据Ystatus[‘zabbix_server’]来判断的,而Ystatus 是通过get_status方法获取的。
$table->addRow(array(