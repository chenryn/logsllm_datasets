title:Private Stateful Information Retrieval
author:Sarvar Patel and
Giuseppe Persiano and
Kevin Yeo
Private Stateful Information Retrieval
Sarvar Patel∗1, Giuseppe Persiano†1,2, and Kevin Yeo‡1
1Google LLC
2Universit`a di Salerno
Abstract
Private information retrieval (PIR) is a fundamental tool for preserving query privacy when accessing
outsourced data. All previous PIR constructions have signiﬁcant costs preventing widespread use. In
this work, we present private stateful information retrieval (PSIR), an extension of PIR, allowing clients
to be stateful and maintain information between multiple queries. Our design of the PSIR primitive
maintains three important properties of PIR: multiple clients may simultaneously query without complex
concurrency primitives, query privacy should be maintained if the server colludes with other clients, and
new clients should be able to enroll into the system by exclusively interacting with the server.
We present a PSIR framework that reduces an online query to performing one single-server PIR on
a sub-linear number of database records. All other operations beyond the single-server PIR consist of
cryptographic hashes or plaintext operations. In practice, the dominating costs of resources occur due to
the public-key operations involved with PIR. By reducing the input database to PIR, we are able to limit
expensive computation and avoid transmitting large ciphertexts. We show that various instantiations of
PSIR reduce server CPU by up to 10x and online network costs by up to 10x over the previous best PIR
construction.
∗PI:EMAIL
†PI:EMAIL
‡PI:EMAIL
1
Contents
1 Introduction
1.1 Our Contributions
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1.2 Relation to Other Privacy-Preserving Storage Primitives . . . . . . . . . . . . . . . . . . . . .
2 Technical Overview
3 Deﬁnitions
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3.1 Private Stateful Information Retrieval
3.2 Oblivious Constrained Partitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3.3 Private Batched Sum Retrieval
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
4 Oblivious Constrained Partitions
5 Private Batched Sum Retrieval
6 Private Stateful Information Retrieval
6.1 Discussion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
7 Experimental Evaluation
7.1 The Experimental Setup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
7.2 Cost of Ring-LWE based PSIR . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
7.3 Cost of PaillierPSIR . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
8 Conclusions
A Cost of OCP
B Chernoﬀ Bounds
C PSIR Amortization
C.1 Online Work to Oﬄine Processing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
C.2 Worse Case to Average Case Cost
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
D Oblivious Constrained Partition
D.1 Online Partial Sums Data Structure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
D.2 Space-Eﬃcient OCP Scheme . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
E Private Batched Sum Retrieval
E.1 Constant Bandwidth From Homomorphic Encryption . . . . . . . . . . . . . . . . . . . . . .
E.2 Private Batched Retrieval
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
E.3 Batch Codes and Homomorphic Encryption . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3
3
4
6
9
9
11
12
12
15
16
19
19
19
21
22
23
26
27
27
27
27
28
28
28
30
30
30
30
2
1
Introduction
Private Information Retrieval (PIR) [18, 35] is a very important privacy-preserving primitive for accessing
data held by untrusted servers. PIR enables clients to retrieve a record stored in a database hosted by
an untrusted server without revealing the record’s identity to the server and it has been used as a critical
component in several systems such as friend discovery [11], publish-subscribe [17], advertisement [25] and
media consumption [27]. In this work, we are interested in single-server PIR with computational security as
ﬁrst considered by Kushilevitz and Ostrovsky [35].
Previous works on single-server PIRs considered stateless clients as well as a stateless server that do not
maintain information between queries and this implies the following three important properties.
• Parallel Access: The same PIR server can be simultaneously used by several independent clients.
• Dynamic User Sets: The set of clients does not need to be chosen ahead of time. New clients can
be added to the system without the intervention of existing clients and clients that crash can easily
recover and continue to use the system.
• Privacy Against Other Clients: Privacy for record retrieval is guaranteed when the adversarial
honest but curious server is colluding with (possibly all) other clients.
Despite its wide applicability, PIR has not been used in applications because of its high costs. In a PIR
protocol, the server is required to perform at least one operation for each database record. If a record is not
involved in the computation of the reply, then it is certainly not the one sought by the client. In practice,
things are even worse as, in most implementations of single-server PIR, the server performs a linear number
of expensive public-key operations.
In this paper, we introduce the concept of a Private Stateful Information Retrieval (PSIR), that extends
the concept of a PIR without losing any of the three desirable properties of PIR described above. We give
implementations of PSIR that drastically reduce communication and the server’s computational overhead
compared to PIR. Our main modiﬁcation of PIR and PSIR lies in the fact that clients are stateful. That is,
a client may store information between queries. The server of PSIR is stateless except for the database like
in PIR. Despite having a state, clients of PSIR execute retrieval operations independently. Each retrieval
only aﬀects the state of the client performing the retrieval and does not impact other clients in any way.
Together with the fact that the server is stateless, PSIR supports parallel access for multiple client without
the need to deal with concurrency issues. Furthermore, the initial state of a client is obtained by the client by
interacting solely with the server. Therefore, new clients (as well as crashed clients that lose their state) can
enter a PSIR scheme at any time without aﬀecting existing clients. For security, we wish to provide privacy
for the client against both the server as well as other possibly adversarial clients. Formally, PSIR ensures
that the identity of any records retrieved by any honest client remains private from the adversary even if
the server is colluding with all other clients. Overall, PSIR maintains the three desirable properties of PIR
while the availability of a client state in PSIR will signiﬁcantly improve the eﬃciency of private retrievals as
our constructions will show.
1.1 Our Contributions
We show that PSIR is more eﬃcient than PIR constructions by giving a general construction for compu-
tationally secure PSIR with practical instantiations. More precisely, let n be the number of records in the
database, let k be an adjustable parameter, 0 < k < n, and suppose the client has memory to store c records.
Our main technical contribution consists in a reduction of a query in PSIR to an online phase consisting
of one blackbox PIR query on a database of n/k records and the transfer of k seeds and k integers from
client to server. Both the client and server perform an additional O(n) hash evaluations and other simple
operations. The reduction assumes that the client has already performed an oﬄine initialization phase with
O(n) communication that can be amortized over c queries thus giving O(n/c) amortized communication.
As we have already pointed out, the dominating costs in practical PIR constructions is constituted
by public-key operations executed by the server, usually over homomorphic ciphertexts. Previous PIR
3
constructions all required the server to execute at least n public-key operations per query. Our PSIR scheme
replaces most of these expensive public-key operations with simple, eﬃcient operations. We stress that
our reduction does not add any other public-key operation on top of the ones needed to execute PIR on
a sub-linear sized database. We note that our server still performs O(n) computation as otherwise our
construction would not guarantee security. As an example, we can concretely instantiate our construction
n) public-key operations are required. We construct PSIR using
by setting k =
XPIR [5] as well as a PIR construction built from the Paillier cryptosystem [42]. In addition, we estimate
costs for PSIR with SealPIR [7] using their reported results.
√
n which means only O(
√
Our concrete results are two-fold. We present a construction of PSIR that outperforms the previous,
best PIR construction in important resource costs for databases with 100K to 1M 288 byte records (a
standard database size experiment used in previous works [7]). Speciﬁcally, we show that PSIR with Paillier
outperforms SealPIR by giving up to 4x speedup in server CPU, a 5-10x reduction in online bandwidth and
a 1.3-4x decrease in amortized total bandwidth. Furthermore, more than 50% of the total bandwidth can
be performed oﬄine during cheaper, non-busy hours. We remark though that PSIR with Paillier increases
client CPU usage compared to SealPIR. In our opinion, these trade-oﬀs are beneﬁcial in concrete terms. For
1M items, total client CPU increases to only 660 milliseconds while server CPU decreases by more than 4.5
seconds. To achieve these beneﬁts, the client uses up to 525 KB of state. We note that 525 KB is less than
1/12 the network costs of generic XPIR and is less than twice the network costs of generic SealPIR. On the
other hand, SealPIR requires the server to store 2.9 MB of auxiliary cryptographic material for each client
whereas PSIR with Paillier does not require any extra storage beyond database.
In addition, we show that PSIR variants using XPIR and SealPIR reduce resource costs compared to
generic XPIR and SealPIR. In terms of concrete savings, PSIR with XPIR results in a 12-28x speedup in
server CPU, up to 20x less online network costs and 17x less amortized network costs compared to generic
XPIR. Our estimates for PSIR with SealPIR result in an up to 10x speedup in server CPU, but a slight
increase in online network costs and an up to 50% increase in amortized network costs compared to generic
SealPIR. Additionally, PSIR introduces an increase in client CPU of at most 660 milliseconds in both cases.
We still view the trade-oﬀs as excellent since, in concrete numbers, server CPU is decreased by at least 4
seconds in both cases for 1M items. For network costs, the beneﬁts are clear for PSIR with XPIR. While
network costs for PSIR with SealPIR increase, the majority of the extra network costs can be performed
oﬄine during oﬀ-peak periods. PSIR requires up to 525 KB of state in all cases.
1.2 Relation to Other Privacy-Preserving Storage Primitives
In the previous section, we presented PSIR as an extension of PIR. Many other privacy-preserving storage
and retrieval primitives have been considered in previous works, We compare PSIR with ORAM as well as
extensions of PIR and ORAM and present a summary in Table 1.
ORAM Oblivious RAM (ORAM) [23, 24] guarantees also privacy of the blocks in addition to privacy of
the access pattern. This implies that the client state contains the secret key used to decrypt the block and,
if any client were corrupted by the server then full privacy would be lost. The secret key enables ORAM
to use sublinear computation and bandwidth (the current, best ORAM construction uses O(log n · log log n)
bandwidth and computation [43]). However, since the server does not have the secret key, enrollment of new
clients would involve existing clients. In addition, in most ORAM construction the client also has a location
map mapping logical block identity to physical server locations which dynamically changes as physical blocks
are accessed by the client. The presence of a location map would make parallel access very ineﬃcient as
performing queries in parallel requires complex algorithms using expensive concurrency primitives to enable
access to shared resources.
Several previous works have considered extending the ORAM scheme to enable access to a large group of
clients [34, 37, 38, 49]. One way to extend ORAMs to multiple clients is to store a separate ORAM scheme
for each client. Each client is given the secret key corresponding to their own ORAM scheme. As a result,
a client may only access their own ORAM and an adversarial server colluding with other clients will not
4
Primitive
PIR [5, 7, 35]
PSIR (This Paper)
ORAM [23, 24, 43]
Multiple Client
ORAM [34, 37, 38, 49]
Symmetric-Key DEPIR [12, 15]
Public-Key DEPIR [12]
PANDA [28]
Multiple Client
Linear Server
Storage
(cid:88)
(cid:88)
(cid:88)
Access
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
Add New Clients/
Recover from Crash
(cid:88)
(cid:88)
(cid:88)
(cid:88)
Stateful
Server
Stateful
Client(s)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
Table 1: This table compares single-server privacy-preserving storage systems. Multiple client access refers
to systems that enable accessibility to large groups of clients while providing privacy against subsets of
colluding clients. Add new clients/recover from crash refers to servers with the capability to enroll stateless
clients into the system.
compromise privacy for honest clients. New clients may also be added by constructing new ORAM schemes.
However, this scheme requires large storage since the database is replicated once for each client unlike PSIR
that stores the database exactly once.
Another way to enable access to multiple clients is splitting the ORAM (as well as the secret key) into
shares and distributing the shares to several non-colluding servers. To retrieve/overwrite a record, the client
performs a protocol with all non-colluding servers to generate an access to the shared ORAM scheme. While
these schemes are eﬃcient, they require the strong assumption of multiple, non-colluding servers whereas
PSIR focuses on the single-server setting. ORAM and its multiple client extensions do not provide practical
solutions for enabling access to large groups of clients eﬃciently and privately compared to PSIR.