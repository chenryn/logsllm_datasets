# Private Stateful Information Retrieval

## Authors
Sarvar Patel<sup>∗1</sup>, Giuseppe Persiano<sup>†1,2</sup>, and Kevin Yeo<sup>‡1</sup>
- 1. Google LLC
- 2. Università di Salerno

## Abstract
Private Information Retrieval (PIR) is a fundamental tool for preserving query privacy when accessing outsourced data. However, the significant costs associated with previous PIR constructions have limited their widespread use. In this work, we introduce Private Stateful Information Retrieval (PSIR), an extension of PIR that allows clients to maintain state between multiple queries. Our PSIR design retains three key properties of PIR: simultaneous querying by multiple clients without complex concurrency mechanisms, maintenance of query privacy even if the server colludes with other clients, and the ability for new clients to enroll into the system by interacting exclusively with the server.

We present a PSIR framework that reduces an online query to performing a single-server PIR on a sub-linear number of database records. All other operations beyond the single-server PIR involve cryptographic hashes or plaintext operations. By reducing the input database for PIR, we limit expensive computations and avoid transmitting large ciphertexts. We demonstrate that various instantiations of PSIR can reduce server CPU usage and online network costs by up to 10x compared to the previous best PIR construction.

<sup>∗</sup>PI:EMAIL  
<sup>†</sup>PI:EMAIL  
<sup>‡</sup>PI:EMAIL

## Contents
1. Introduction
   1.1 Our Contributions
   1.2 Relation to Other Privacy-Preserving Storage Primitives
2. Technical Overview
3. Definitions
   3.1 Private Stateful Information Retrieval
   3.2 Oblivious Constrained Partitions
   3.3 Private Batched Sum Retrieval
4. Oblivious Constrained Partitions
5. Private Batched Sum Retrieval
6. Private Stateful Information Retrieval
   6.1 Discussion
7. Experimental Evaluation
   7.1 The Experimental Setup
   7.2 Cost of Ring-LWE based PSIR
   7.3 Cost of Paillier PSIR
8. Conclusions
A. Cost of OCP
B. Chernoff Bounds
C. PSIR Amortization
   C.1 Online Work to Offline Processing
   C.2 Worst Case to Average Case Cost
D. Oblivious Constrained Partition
   D.1 Online Partial Sums Data Structure
   D.2 Space-Efficient OCP Scheme
E. Private Batched Sum Retrieval
   E.1 Constant Bandwidth from Homomorphic Encryption
   E.2 Private Batched Retrieval
   E.3 Batch Codes and Homomorphic Encryption

## 1. Introduction
Private Information Retrieval (PIR) [18, 35] is a crucial privacy-preserving primitive for accessing data held by untrusted servers. PIR enables clients to retrieve a record from a database hosted by an untrusted server without revealing the record's identity to the server. It has been used in various systems such as friend discovery [11], publish-subscribe [17], advertising [25], and media consumption [27]. This work focuses on single-server PIR with computational security, as first considered by Kushilevitz and Ostrovsky [35].

Previous works on single-server PIRs have assumed stateless clients and servers, which implies the following three important properties:
- **Parallel Access**: Multiple independent clients can simultaneously use the same PIR server.
- **Dynamic User Sets**: New clients can be added to the system without the intervention of existing clients, and crashed clients can easily recover and continue using the system.
- **Privacy Against Other Clients**: Privacy for record retrieval is maintained even if the server colludes with other clients.

Despite its wide applicability, PIR has not been widely adopted due to its high costs. In a PIR protocol, the server must perform at least one operation for each database record, often involving a linear number of expensive public-key operations.

In this paper, we introduce Private Stateful Information Retrieval (PSIR), which extends PIR while retaining the three desirable properties. We provide PSIR implementations that significantly reduce communication and the server's computational overhead compared to PIR. The main modification in PSIR is that clients are stateful, allowing them to store information between queries. The server remains stateless, except for the database, ensuring parallel access for multiple clients without concurrency issues. New clients can enter the system at any time by interacting solely with the server, maintaining privacy against both the server and other potentially adversarial clients.

### 1.1 Our Contributions
We show that PSIR is more efficient than PIR by presenting a general construction for computationally secure PSIR with practical instantiations. Specifically, let \( n \) be the number of records in the database, \( k \) be an adjustable parameter (\( 0 < k < n \)), and suppose the client has memory to store \( c \) records. Our main technical contribution is a reduction of a PSIR query to an online phase consisting of one blackbox PIR query on a database of \( n/k \) records and the transfer of \( k \) seeds and \( k \) integers from the client to the server. Both the client and server perform additional \( O(n) \) hash evaluations and simple operations. The reduction assumes an offline initialization phase with \( O(n) \) communication, which can be amortized over \( c \) queries, resulting in \( O(n/c) \) amortized communication.

The dominant cost in practical PIR constructions is the public-key operations executed by the server, typically over homomorphic ciphertexts. Previous PIR constructions required the server to execute at least \( n \) public-key operations per query. Our PSIR scheme replaces most of these expensive public-key operations with simple, efficient operations. Notably, our reduction does not add any additional public-key operations beyond those needed for PIR on a sub-linear sized database. For example, setting \( k = \sqrt{n} \) means only \( O(\sqrt{n}) \) public-key operations are required. We instantiate our construction using XPIR [5] and a PIR construction built from the Paillier cryptosystem [42], and estimate costs for PSIR with SealPIR [7] using their reported results.

Our concrete results show that PSIR outperforms the previous best PIR construction in resource costs for databases with 100K to 1M 288-byte records. Specifically, PSIR with Paillier outperforms SealPIR by providing up to 4x speedup in server CPU, a 5-10x reduction in online bandwidth, and a 1.3-4x decrease in amortized total bandwidth. More than 50% of the total bandwidth can be performed offline during non-busy hours. Although PSIR with Paillier increases client CPU usage, the trade-offs are beneficial. For 1M items, total client CPU increases to only 660 milliseconds, while server CPU decreases by more than 4.5 seconds. The client uses up to 525 KB of state, which is less than 1/12 the network costs of generic XPIR and less than twice the network costs of generic SealPIR. SealPIR requires the server to store 2.9 MB of auxiliary cryptographic material for each client, whereas PSIR with Paillier does not require any extra storage beyond the database.

Additionally, PSIR variants using XPIR and SealPIR reduce resource costs compared to generic XPIR and SealPIR. PSIR with XPIR results in a 12-28x speedup in server CPU, up to 20x less online network costs, and 17x less amortized network costs. PSIR with SealPIR results in up to a 10x speedup in server CPU but a slight increase in online network costs and up to a 50% increase in amortized network costs. The client CPU increase is at most 660 milliseconds in both cases. The benefits are clear, with server CPU decreased by at least 4 seconds for 1M items. For network costs, the benefits are evident for PSIR with XPIR, while the extra network costs for PSIR with SealPIR can be performed offline during off-peak periods. PSIR requires up to 525 KB of state in all cases.

### 1.2 Relation to Other Privacy-Preserving Storage Primitives
We compare PSIR with other privacy-preserving storage and retrieval primitives, such as ORAM and extensions of PIR and ORAM, summarized in Table 1.

| Primitive | PIR [5, 7, 35] | PSIR (This Paper) | ORAM [23, 24, 43] | Multiple Client ORAM [34, 37, 38, 49] | Symmetric-Key DEPIR [12, 15] | Public-Key DEPIR [12] | PANDA [28] |
| --- | --- | --- | --- | --- | --- | --- | --- |
| Multiple Client Access | ✔ | ✔ | ✔ | ✔ | ✔ | ✔ | ✔ |
| Linear Server Storage | ✔ | ✔ | ✔ | ✔ | ✔ | ✔ | ✔ |
| Add New Clients/Recover from Crash | ✔ | ✔ | ✘ | ✔ | ✔ | ✔ | ✔ |
| Stateful Server | ✘ | ✘ | ✔ | ✔ | ✘ | ✘ | ✘ |
| Stateful Client(s) | ✘ | ✔ | ✔ | ✔ | ✘ | ✘ | ✘ |

**ORAM (Oblivious RAM)** [23, 24] guarantees privacy of both the blocks and the access pattern. The client state contains the secret key used to decrypt the block, and if any client is corrupted by the server, full privacy is lost. The secret key enables ORAM to use sublinear computation and bandwidth, but enrollment of new clients involves existing clients. Most ORAM constructions also include a location map, making parallel access inefficient due to the need for complex concurrency algorithms.

Several works have extended ORAM to support multiple clients by either storing a separate ORAM scheme for each client or splitting the ORAM and secret key into shares distributed among non-colluding servers. While these schemes are efficient, they require the strong assumption of multiple, non-colluding servers, unlike PSIR, which focuses on the single-server setting. ORAM and its multiple client extensions do not provide practical solutions for enabling efficient and private access to large groups of clients compared to PSIR.