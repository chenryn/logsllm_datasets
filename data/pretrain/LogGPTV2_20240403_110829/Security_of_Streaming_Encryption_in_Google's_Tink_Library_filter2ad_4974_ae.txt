procedure Initialize//Games 𝐺1, 𝐺2
𝐾1, 𝐾2,··· ←$ 𝒦; 𝐽1, 𝐽2,··· ← 0
𝑓1, 𝑓2,··· ←$ Func({0, 1}*,𝒦)
procedure Enc.init(𝑖, 𝑁)
(𝑅, 𝑃 ) ← 𝑁; 𝐽𝑖 ← 𝐽𝑖 + 1; 𝑗 ← 𝐽𝑖
𝐿 ← KD(𝐾𝑖, 𝑅) //For game 𝐺1 only
𝐿 ← 𝑓𝑖(𝑅) //For game 𝐺2 only
𝑆𝑖,𝑗 ← (𝐿, 𝑁, 1); return 𝐽𝑖
procedure Enc.next(𝑖, 𝑗, 𝐴, 𝑀)
if 𝑆𝑖,𝑗 = ⊥ then return ⊥
(𝐿, 𝑁, 𝑟) ← 𝑆𝑖,𝑗; (𝑅, 𝑃 ) ← 𝑁
𝐶 ← E𝐿(⟨𝑃, 𝑟, 0⟩, 𝐴, 𝑀)
𝑆𝑖,𝑗 ← (𝐿, 𝑁, 𝑟 + 1); return 𝐶
procedure Enc.last(𝑖, 𝑗, 𝐴, 𝑀)
if 𝑆𝑖,𝑗 = ⊥ then return ⊥
(𝐿, 𝑁, 𝑟) ← 𝑆𝑖,𝑗; (𝑅, 𝑃 ) ← 𝑁
𝐶 ← E𝐿(⟨𝑃, 𝑟, 1⟩, 𝐴, 𝑀); 𝑆𝑖,𝑗 ← ⊥
return 𝐶
Fig. 9: Games 𝐺1 and 𝐺2 in the proof of Theorem 1. Each game maintains an internal
procedure Look.
since 𝑑 now can be as big as 𝑞. In Section 6, we give better canonical online AE designs that are
robust against such randomness failure.
4.3 Proof of Theorem 1
SE1[KD,𝛱](𝒜) with
Consider games 𝐺1–𝐺4 in Fig. 9 and Fig. 10. Game 𝐺1 corresponds to game Gnoae2
challenge bit 𝑏 = 1. In game 𝐺1, each user 𝑖 has a corresponding key 𝐾𝑖, but in game 𝐺2, we
sample a uniformly random function 𝑓𝑖 : {0, 1}* → 𝒦, and for each call to KD(𝐾𝑖,·), we make a
corresponding call to 𝑓𝑖(·) instead.
Game 𝐺3 is similar to game 𝐺2, but in each encryption query for user 𝑖 and nonce 𝑁 = (𝑅, 𝑃)
that results in a call 𝐶 ← E𝐿(𝑁*, 𝐴, 𝑀), we store the tuple (𝑖, 𝑅, 𝑁*, 𝐴, 𝐶) in a table. On the
other hand, each time we are supposed to check if D𝐿(𝑁*, 𝐴, 𝐶) ̸= ⊥ for a user 𝑖 under nonce
𝑁 = (𝑅, 𝑃), if there is already a prior tuple (𝑖, 𝑅, 𝑁*, 𝐴, 𝐶) then we simply return true. Otherwise
we will indeed call D𝐿(𝑁*, 𝐴, 𝐶).
Game 𝐺4 is similar to game 𝐺3, but for each call 𝐶 ← E𝐿(𝑁*, 𝐴, 𝑀), we instead pick a truly random
𝐶 of the same length. Moreover, for each call D𝐿(𝑁*, 𝐴, 𝐶), we instead use ⊥ as the answer. Thanks
to the restriction on the behavior of the adversary, any call to the Dec oracle must eventually end
up with a call to D instead of looking up prior tuples from encryption queries. As a result, any Dec
SE1[KD,𝛱](𝒜) of challenge
query will result in a false-answer. Hence game 𝐺4 coincides with game Gnoae2
bit 𝑏 = 0, and thus
Advnoae2
SE1[KD,𝛱](𝒜) = Pr[𝐺1(𝒜)] − Pr[𝐺4(𝒜)] .
We now bound the gap between each pair of consecutive games. Consider the following adversary
ℬ′ attacking the (muti-user) PRF security of KD. It runs 𝒜 and simulates game 𝐺1, but for each
15
procedure Dec(𝑖, 𝑁, 𝐴, 𝐶,ℐ, 𝑎)
if |𝐴| ̸= |𝐶| then return false
(𝑅, 𝑃 ) ← 𝑁; 𝑚 ← |𝐶|
for 𝑟 ← 1 to |ℐ| do
𝑗 ← ℐ[𝑟]; if 𝑗 > 𝑚 or 𝑗 < 1 then return false
if (𝑎 = 0 or 𝑗 < 𝑚) then
elsif Look(𝑖, 𝑅,⟨𝑃, 𝑚, 1⟩, 𝐴[𝑚], 𝐶[𝑚]) = false then return false
if Look(𝑖, 𝑅,⟨𝑃, 𝑗, 0⟩, 𝐴[𝑗], 𝐶[𝑗]) = false then return false
return true
private procedure Look(𝑖, 𝑅, 𝑁*, 𝐴, 𝐶)
if Tab[𝑖, 𝑅, 𝑁*, 𝐴, 𝐶] ̸= ⊥ then return true
𝐿 ← 𝑓𝑖(𝑅); 𝑀 ← D𝐿(𝑁*, 𝐴, 𝐶)
𝑀 ← ⊥ //For game 𝐺4 only
return (𝑀 ̸= ⊥)
procedure Finalize(𝑏′)
return (𝑏′ = 1)
procedure Initialize//Games 𝐺3, 𝐺4
𝐽1, 𝐽2,··· ← 0
𝑓1, 𝑓2,··· ←$ Func({0, 1}*,𝒦)
procedure Enc.init(𝑖, 𝑁)
(𝑅, 𝑃 ) ← 𝑁; 𝐽𝑖 ← 𝐽𝑖 + 1
𝑗 ← 𝐽𝑖; 𝐿 ← 𝑓𝑖(𝑅)
𝑆𝑖,𝑗 ← (𝐿, 𝑁, 1); return 𝐽𝑖
procedure Enc.next(𝑖, 𝑗, 𝐴, 𝑀)
if 𝑆𝑖,𝑗 = ⊥ then return ⊥
(𝐿, 𝑁, 𝑟) ← 𝑆𝑖,𝑗; (𝑅, 𝑃 ) ← 𝑁
𝑁* ← ⟨𝑃, 𝑟, 0⟩; 𝐶 ← E𝐿(𝑁*, 𝐴, 𝑀)
𝐶 ←$ {0, 1}|𝐶| //For game 𝐺4 only
Tab[𝑖, 𝑅, 𝑁*, 𝐴, 𝐶] ← true
𝑆𝑖,𝑗 ← (𝐿, 𝑁, 𝑟 + 1); return 𝐶
procedure Enc.last(𝑖, 𝑗, 𝐴, 𝑀)
if 𝑆𝑖,𝑗 = ⊥ then return ⊥
(𝐿, 𝑁, 𝑟) ← 𝑆𝑖,𝑗; (𝑅, 𝑃 ) ← 𝑁
𝑁* ← ⟨𝑃, 𝑟, 1⟩; 𝐶 ← E𝐿(𝑁*, 𝐴, 𝑀)
𝐶 ←$ {0, 1}|𝐶| //For game 𝐺4 only
Tab[𝑖, 𝑅, 𝑁*, 𝐴, 𝐶] ← true; 𝑆𝑖,𝑗 ← ⊥
return 𝐶
Fig. 10: Games 𝐺3 and 𝐺4 in the proof of Theorem 1. Each game maintains an internal
procedure Look.
call to KD(𝐾𝑖,·), it instead uses its oracle Eval(𝑖,·). Thus
Pr[𝐺1(𝒜)] − Pr[𝐺2(𝒜)] = Advprf
KD(ℬ′) .
Next, in game 𝐺3, for each table look-up Look(𝑖, 𝑅, 𝑁*, 𝐴, 𝐶) with 𝑁* = ⟨𝑃, 𝑗, 𝑎⟩, the triple
(𝑖, 𝑅, 𝑁*) uniquely determines the user 𝑖, nonce 𝑁 = (𝑅, 𝑃), and counter 𝑗. Since 𝒜 is nonce-
respecting, the table look-ups do not return false positives. Thanks to the correctness of the con-
ventional AE scheme 𝛱,
Pr[𝐺2(𝒜)] = Pr[𝐺3(𝒜)] .
Finally, consider the following adversary ℬ attacking 𝛱. It runs 𝒜 and simulates game 𝐺3, but with
the following differences. First, instead of eagerly sampling a function 𝑓𝑖 for each user 𝑖, adversary ℬ
lazily implements 𝑓𝑖. That is, each time it has to evaluate 𝑓𝑖(𝑅), if this is the first time it has to
do this evaluation, it picks 𝐿 ←$ 𝒦, stores the pair (⟨𝑖, 𝑅⟩, 𝐿), and returns 𝐿 as the answer, where
⟨𝑖, 𝑅⟩ is a unique encoding of (𝑖, 𝑅) as an integer. Otherwise, if there is already some pair (⟨𝑖, 𝑅⟩, 𝐿)
then it simply returns 𝐿 as the answer. Next, for each call E𝐿(𝑁*, 𝐴, 𝑀) for a user 𝑖 under nonce
𝑁 = (𝑅, 𝑃), it instead calls Enc(⟨𝑖, 𝑅⟩, 𝑁*, 𝐴, 𝑀). Likewise, for each call D𝐿(𝑁*, 𝐴, 𝐶) for a user
𝑖 under nonce 𝑁 = (𝑅, 𝑃), it calls Dec(⟨𝑖, 𝑅⟩, 𝑁*, 𝐴, 𝐶).
Thanks to the table look-ups in game 𝐺3, adversary ℬ does not make prohibited queries to the
decryption oracle. Moreover, for each encryption query Enc(⟨𝑖, 𝑅⟩, 𝑁*, 𝐴, 𝑀) with 𝑁* = ⟨𝑃, 𝑗, 𝑎⟩,
the pair (⟨𝑖, 𝑅⟩, 𝑁*) uniquely determines the user 𝑖, nonce 𝑁 = (𝑅, 𝑃), and counter 𝑗. Since 𝒜 is
nonce-respecting, ℬ is nonce-respecting. Moreover,
Pr[𝐺3(𝒜)] − Pr[𝐺4(𝒜)] = Advae
𝛱(ℬ) .
16
Summing up
Advnoae2
SE1[KD,𝛱](𝒜) = Pr[𝐺1(𝒜)] − Pr[𝐺4(𝒜)]
3∑︁
𝑖=1
=
Pr[𝐺𝑖(𝒜)] − Pr[𝐺𝑖+1(𝒜)] = Advprf
KD(ℬ′) + Advae
𝛱(ℬ) .
5 A Better Key-Derivation Function
In this section we show a better construction for the key-derivation KD of SE1. Our construction
is based on a blockcipher 𝐸 : {0, 1}𝑘 × {0, 1}𝑛 → {0, 1}𝑛 with 𝑘 ∈ {𝑛, 2𝑛}. In practice one would
instantiate 𝐸 via AES, and thus 𝑛 = 128. Moreover, KD only needs to digest inputs of a fixed
length 𝑚, as the header will be processed as an AD segment. For our construction, we require that
𝑚 ≤ 𝑛 − 2; in practice one can let 𝑚 = 120. This is a bit shorter than the current salt length (128
bits) in Tink, but from the analysis in Section 4.2, this does not affect the security bound of SE1.
Key length extension. From the discussion in Section 4.2, we want KD to take a 2𝑛-bit key
to avoid key-collision attacks. As a result, our construction of KD requires a blockcipher of 2𝑛-
bit keys. If 𝑘 = 2𝑛 then we can directly use 𝐸. Mouha and Luykx [26] show that if we model
𝐸 : {0, 1}𝑘 × {0, 1}𝑛 → {0, 1}𝑛 as an ideal cipher then for any adversary 𝒜 making at most 𝑝
ideal-cipher queries and 𝑞 evaluation queries, Advprp
If 𝑘 = 𝑛 then the key length of 𝐸 is too short for our purpose. In that case, we construct from 𝐸 a
blockcipher 𝐺 : {0, 1}𝑘+𝑛 ×{0, 1}𝑛 → {0, 1}𝑛 via a variant of the classic DESX paradigm of Rivest.
In particular, on a key 𝐾 = 𝐽 ‖ 𝐿, with |𝐽| = 𝑘 and |𝐿| = 𝑛, let
𝐺𝐾(𝑋) = 𝐸𝐽(𝑋 ⊕ 𝐿) ⊕ 𝐿 .
𝐸 (𝒜) ≤ 𝑞2+2𝑝𝑞
2𝑘+1 .
The design of DESX uses different keys in pre-whitening and post-whitening 𝐸, whereas the variant
above, which we call DESX1, uses the same key. It is now folklore knowledge that DESX1 offers
(𝑘 + 𝑛)/2 bits of multi-user PRP security, but to the best of our knowledge, there is no explicit
proof for this claim. For completeness, in Lemma 3 below, we give a proof in the ideal-cipher model.
The proof, which is in Appendix C, is a canonical application of the H-coefficient technique [8,27].
Lemma 3. Let 𝐸 : {0, 1}𝑘 × {0, 1}𝑛 → {0, 1}𝑛 be a blockcipher that we model as an ideal cipher,
and let 𝐺 be DESX1[𝐸]. Then for any adversary 𝒜 that makes at most 𝑝 ideal-cipher queries and
𝑞 evaluation queries,
Advprp
𝐺 (𝒜) ≤ 2𝑝𝑞 + 𝑞2
2𝑘+𝑛
.
The XOR construction. Our main building block is the XOR-of-permutation construction
of Bellare, Krovetz, and Rogaway [2]. Let 𝐺 : 𝒦 × {0, 1}𝑛 → {0, 1}𝑛 be a blockcipher. Then
XOR[𝐺] : 𝒦 × {0, 1}𝑛−1 → {0, 1}𝑛 is constructed via
XOR[𝐺](𝐾, 𝑋) = 𝐺𝐾(𝑋 ‖ 0) ⊕ 𝐺𝐾(𝑋 ‖ 1) .
If 𝐺 is DESX1[𝐸] then under the XOR construction, the two post-whitenings will cancel each other
out. Thus one can drop the post-whitening of 𝐸 in this setting, saving two xor’s. Theorem 2 below
shows that the XOR construction has excellent PRF security; the proof is in Appendix D.
17
Theorem 2. Let 𝑛 ≥ 8 be an integer. Let 𝐺 : 𝒦×{0, 1}𝑛 → {0, 1}𝑛 be a blockcipher. Then for any
adversary 𝒜 that makes 𝑞 ≤ 2𝑛/128 evaluation queries, we can construct an adversary ℬ of about
the same efficiency as 𝒜 and at most 2𝑞 queries such that
√
𝑛 · 𝑞
𝐺 (ℬ) + 8
2𝑛
XOR[𝐺](𝒜) ≤ Advprp
Advprf
.
Building KD. Assume that we have a good PRF construction 𝐹 : 𝒦 × {0, 1}𝑛−1 → {0, 1}𝑛 which
we can achieve via the XOR construction. We now show how to build KD : 𝒦 × {0, 1}𝑚 → {0, 1}𝑘,
with 𝑘 ∈ {𝑛, 2𝑛}. For a string 𝑋 with |𝑋| < 𝑛 − 1, let 𝑋 ‖ 0* denote 𝑋 ‖ 0𝑛−1−|𝑋|. If 𝑘 = 𝑛 then
and if 𝑘 = 2𝑛 then
KD(𝐾, 𝑋) = 𝐹𝐾