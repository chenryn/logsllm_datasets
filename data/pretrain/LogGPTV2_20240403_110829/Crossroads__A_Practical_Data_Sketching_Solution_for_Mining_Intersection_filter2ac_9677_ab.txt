values associated with the set of data items that appear in
both data streams (i.e., their “intersection”).
3.
INTERSECTION ALGORITHM
In this section, we ﬁrst describe the algorithm for sketching
the data. We then explain how our intersection algorithm
can be used for estimating the second frequency moment
of a traﬃc feature. We use RTT as a concrete example,
though we emphasize that any numeric feature can be used.
Next, we formalize our M2 intersection algorithm and pro-
vide theoretical guarantees and rigorous statistical analysis
for it. Finally, we describe the design of our M0 and M1 al-
gorithms and explain how they work. Once again, the sketch
data structures are not novel, but the way in which they are
used for computing intersections is the main contribution of
our work.
3.1 Sketching Algorithm
As explained before and shown in Fig. 2, we would like
to be able to estimate certain metrics (e.g., RTT) associated
with data items that belong to the intersection of any Ai,
i = 1, 2, ..., m with any Bj, j = 1, 2, ..., n. We do so by main-
taining a total of m+n sketches, namely, one for each set Ai,
i = 1, 2, ..., m and one for each set Bj, j = 1, 2, ..., n. In our
application scenario, the data are simply a massive stream
of cellular network packets. We identify four important at-
Figure 2: We can compute functions on the inter-
section of arbitrary sets Ai and Bj
OS 88.8” & “Application = FunContent.app” & “Source =
the Metropolis downtown location” & “Destination = Fun-
Content.com” & “Time = τ ”) – of which we would like to
measure and monitor the performance metrics (e.g., aver-
age RTT) – is precisely the intersection of Ai and Bj, as
illustrated in Fig. 2. As will become clear shortly, we will
estimate these performance metrics by taking such intersec-
tions, and hence the name “Crossroads.”
In the second step, for each set Ai, a sketch is constructed
to succinctly summarize the performance metrics (e.g., aver-
age RTT) of all data items in it. The same is done for each
Bj. We will talk about the sketch data structures suitable
for this purpose later in Section 3. The novelty of this ap-
proach lies mainly in the third step, which is to derive the
performance metrics of the data inside each Ai∩Bj by inter-
secting the sketches constructed for Ai and that constructed
for Bj.
The potential further loss of accuracy in this intersection
process aside, one may be tempted to take intersection on
three or more such sketches. This is however provably im-
possible, if the Tug-of-War sketch is used as the underlying
sketch data structure [1]. The Tug-of-War sketch is in gen-
eral preferred over other types of sketches due to its lower
space and computational complexities, and the much bet-
ter numerical stability of the Gaussian distribution used by
it. Slightly disappointing as this impossibility result might
be, it serves as a somber reminder that we should count
our blessings that we are able to perform even the two-way
intersection after all.
It is assumed, in the above example, that the full data
set is available to the association-rule mining (ARM) algo-
rithm – that is, all attribute value combinations are stored.
The contribution of this work is to signiﬁcantly reduce the
amount of data stored so that it can be performed over a
high-speed data stream. We do not propose any new ARM
algorithms, but give a way to reduce the amount of data that
such an algorithm would need to use. Although we believe
our technique could be used to reduce the space-complexity
of many ARM algorithms, that is outside the scope of this
paper.
2. PRELIMINARIES
In this section, we give a formal description of the problem
and illustrate it with some examples.
For the problem of detecting anomalies and other events
in a cellular network, we would like to estimate some useful
quantities such as the moments of some important metrics
(e.g., RTT) of the data stream. The kth moment of a packet
i , where vi is the value
stream is deﬁned as: Mk = (cid:80)
i vk
ij225tributes I, J, V , and ID in each packet. The abovemen-
tioned partitioning of the whole stream into A(cid:48)
is and B(cid:48)
js
is based on the value a packet takes on attribute I and J
respectively. The V attribute is the metric (say RTT) that
is of interest to us. The ID attribute is essentially the set
of bits in a packet that uniquely identiﬁes the packet. We
emphasize this ID attribute is not the ﬂow identiﬁer (the
abovementioned ﬁve tuple) although the latter could be a
part of the former, since we consider each packet a “single-
ton ﬂow” for the purpose of the second moment estimation,
as we explained earlier.
Let us denote the sketches for Ai and Bj as S(Ai) and
S(Bj), respectively, and let M (v) be a function that com-
putes the moments for a certain value v (e.g., M (v) = v2
M (pkt.V ),
for M2). Then our goal is to estimate (cid:80)
pkt∈Ai∩Bj
which denotes the moment of the values of all packets in the
intersection of the sets Ai and Bj, from the sketches S(Ai)
and S(Bj). Therefore, as shown in Algorithm 1, with the
arrival of each packet pkt, we need to update both sketches
S(Apkt.I ) and S(Bpkt.J ) with its contribution pkt.V . We
will explain in the next section how this contribution to both
sketches are “linked” by the identiﬁer of the packet pkt.ID
so that it can be accounted for and later retrieved from their
intersection.
Algorithm 1 Processing algorithm
UPDATE:
1: Upon the arrival of a packet pkt
2:
3:
4:
5:
6:
v:=pkt.V
i:=pkt.I
j:=pkt.J
Update(S(Ai), v, pkt.ID)
Update(S(Bj), v, pkt.ID)
As conventional data sketches weren’t designed to handle
such intersection operations, our work is focused on how to
do that. We choose the Tug-of-War sketch as the underly-
ing sketch data structure and build the intersection capa-
bility on top of it. Alon et al. [2] proposed this remarkable
sketch, later named the “tug-of-war” sketch in [1], for esti-
mating the second moment of a data stream using only log-
arithmic space. For all , λ > 0, the tug-of-war sketch uses
only O( log (1/)
) counters to sketch the second moment of a
stream with the guarantee that the probability with which
the relative error is larger than λ is at most . The sketch
allows arbitrary and eﬃcient updates for the values. Let −→s
= {s1, s2, ...sn} be a vector of length n, where each entry
si takes on value +1 or −1 with equal probability 1
2 , and
−→v = {v1, v2, ...vn} where {v1, v2, ...vn} are the respective V
counter in the sketch is −→v ·−→s = v1s1 + v2s2 + . . . + vnsn [2].
values of the n packets in the stream. Then the value of a
λ2
It was shown in [2] that the square of this counter value is an
unbiased estimator for the second moment of the vi values,
and a small number of such estimators (i.e., squares of the
values in multiple counters) can be combined to provide an
accurate estimation of the second moment, as characterized
by the abovementioned space-accuracy tradeoﬀ.
One key property of the tug-of-war sketch is that if two
sketches have the same size and use the same vector −→s , then
we can add up the two sketches to get the direct sum which
is equivalent to taking the union of the original streams.
This feature of allowing the computation of the union of two
sketches is a vital property that we will later leverage in our
algorithm design.
Algorithm 2 The Tug-of-War algorithm
PRE-PROCESSING:
1: Fix K independent hash functions hk : U → {+1,−1},
k = 1, 2, ..., K, each of which is four-wise independent
2: Initialize Z[k] := 0 for k = 1, 2, ..., K
ALGORITHM:
1: Upon the arrival of a packet pkt
2:
3:
Z[k] := Z[k] + pkt.V ∗ hk(pkt.ID)
For k := 1 to K
k=1 Z[k]2(cid:17)
(cid:16)(cid:80)K
4: Return
/K
3.2 Intersection algorithm for estimating M2
Recall that our data are a long stream of packets, and for
each packet pkt, we identify four important attributes I, J,
V , and ID. In this section, we explain how we compute the
M2 of the V values (RTTs in this case) for the intersection
of a certain pair of sub-streams Ai and Bj. The sub-stream
Ai consists of all packets whose I attribute value is equal
to i, and the sub-stream Bj consists of all packets whose J
attribute value is equal to j. To simplify the notation, we
drop the subscripts in Ai and Bj in the sequel, referring to
them as A and B respectively. With the streaming context
of A and B being clear, we will call them sets rather than
sub-streams in the sequel.
3.2.1 Algorithm Overview
We use the tug-of-war technique to sketch both A and B.
Each sketch – S(A) or S(B) – is made up of K counters
{Z[k]}, k = 1, 2, ..., K. For convenience of notation, we will
write S(A) or S(B) as SA or SB in the sequel. Each counter
Z[k] is paired with a hash function hk that generates the
above-mentioned random vector −→s (now called −→sk to distin-
guish them from one another) with which the V values of the
packets in the stream, viewed as a vector, will take an inner
product. The “Update(S(*), v, pkt.ID)” procedure inside Al-
gorithm 1, when the underlying sketch is the tug-of-war, is
shown in Algorithm 2. Upon the arrival of a packet pkt that
belongs to the sub-stream, the update to to the kth counter
is simply Z[k] := Z[k] + pkt.V ∗ hk(pkt.ID), where each hk
is a hash function that deterministically outputs +1 or −1
with equal probability given any input value. As mentioned
earlier, there is a tradeoﬀ between the accuracy of the esti-
mation and the number of counters K used. When we refer
to the size of the sketch, we mean the number of counters
K.
The tug-of-war technique has a useful property that, when
two tug-of-war sketches S(A) and S(B) employ the same
number of counters and set of hash functions, SA(cid:83) B, the
SA and SB. Our estimation of the M2 of A(cid:84) B is simply
(cid:99)M2(SA(cid:84) B) = 1
sketch for the union of two sets, is simply the component-
wise addition of SA and SB (i.e., their corresponding coun-
ters added up). Making use of this property by doing ex-
actly so, we deﬁne SA⊕B as the component-wise sum of
2 · {M2(SA⊕B) − M2(SA) − M2(SB)}, where
M2(SA⊕B), M2(SA), and M2(SB) can be obtained using the
standard estimation procedures for the tug-of-war sketch.
226A v2
B v2
i .
i = γA
(cid:80)
A∩B v2
A∩B v2
i and (cid:80)
3.2.2 Theoretical Guarantees
In this section, we derive the variance of the estimator
(cid:99)M2(SA(cid:84) B) when only one (instead of K) hash function
ters γA, γB ≤ 1 as (cid:80)
(cid:80)
and counter is used in sketching. We deﬁne two parame-
i =
γB
In other words, γA and γB represent the pro-
portion of the intersection part respectively in set A and set
B. Intuitively, this is the amount of overlap the intersection
has with either set and we will need it to be large enough
because otherwise the “signal” (M2 of the intersection) will
be drowned out by the noise (errors in estimating M(cid:48)
2s of A
and B from their respective sketches). The following the-
orem demonstrates that such an estimator is unbiased and
has reasonably low variance. Note this variance can be fur-
ther reduced by about a factor of K, when K counters (and
hash functions) are used.
Theorem 1 The M2 Intersection Algorithm produces an
estimator is ((cid:80)
unbiased estimator for M2(SA(cid:84) B), and the variance of the
Proof Let (cid:98)Y denote the estimator for M2(SA(cid:84) B) and
The estimator for the sketch SA is (cid:99)M2(SA) = ((cid:80)
and that for sketch SB is (cid:99)M2(SB) = ((cid:80)
tor (cid:99)M2(SA⊕B) for the second frequency moment of SA⊕B is
then (cid:99)M2(SA⊕B) = ((cid:80)
recall that vi denotes the value for the element with ID i.
A visi)2
B visi)2. In both
sketches, every choice of si ∈ {+1,−1} is identical as both
use the same hash function h : U → {+1,−1}. The estima-
A visi +(cid:80)
B visi)2.
A∩B v2
− 1)
i )2(
Now we prove that our algorithm can produce an unbiased
estimator for M2(SA∩B). From the above algorithm, our
estimator is:
γAγB
1
(cid:98)Y =
=
· {(
1
2
1
2
−(
· {(cid:99)M2(SA⊕B) − (cid:99)M2(SA) − (cid:99)M2(SB)}
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
visi)2 − (
(cid:88)
visi)2}
visi)2
visi +
B