# Rollback-Recovery for Middleboxes

**Authors:**
- Justine Sherry
- Peter Xiang Gao
- Soumya Basu
- Aurojit Panda
- Arvind Krishnamurthy
- Christian Maciocco
- Maziar Manesh
- João Martins
- Sylvia Ratnasamy
- Luigi Rizzo
- Scott Shenker

**Affiliations:**
- *Justine Sherry, Peter Xiang Gao, Soumya Basu, Aurojit Panda, Arvind Krishnamurthy, Sylvia Ratnasamy, Scott Shenker*: UC Berkeley
- *Christian Maciocco, Maziar Manesh*: Intel Research
- *João Martins*: NEC Labs
- *Luigi Rizzo*: University of Pisa
- *Scott Shenker*: ICSI

## Abstract

Network middleboxes must provide high availability with automatic failover in the event of a device failure. Achieving this is challenging because failover must correctly restore lost state (e.g., activity logs, port mappings) quickly (e.g., within typical transport timeout values to minimize application disruption) and with minimal overhead during normal operation (e.g., additional per-packet latencies of 10-100 microseconds). No existing middlebox design currently meets these requirements.

We present FTMB (Fault-Tolerant MiddleBox), a new fault-tolerance design for middleboxes that achieves these goals. FTMB uses a classical "rollback recovery" approach, where the system logs information during normal operation to reconstruct state after a failure. However, traditional rollback recovery cannot maintain high throughput given the frequent output rate of middleboxes. Therefore, we introduce two novel mechanisms: (1) 'ordered logging', which provides lightweight logging of necessary recovery information, and (2) a 'parallel release' algorithm that, when combined with ordered logging, ensures correct recovery. We implement these mechanisms in Click and demonstrate that our design adds only 30 microseconds of latency to median per-packet latencies. Our system introduces moderate throughput overheads (5-30%) and can reconstruct lost state in 40-275 milliseconds for practical systems.

## CCS Concepts
- **Networks**: Middleboxes / network appliances
- **Computer Systems Organization**: Availability

## Keywords
- middlebox reliability
- parallel fault-tolerance

## Introduction

Middleboxes play a crucial role in modern Internet infrastructure by providing an easy way to deploy new dataplane functions. They are often as numerous as routers and switches. However, due to their proprietary monolithic software running on dedicated hardware, they can be expensive to deploy and manage.

To address this, network operators are moving towards Network Function Virtualization (NFV), where middlebox functionality is moved to virtual appliances running on commodity processors. While NFV solves the dedicated hardware problem, it introduces technical challenges, including performance and management. An equally important but less explored challenge is fault-tolerance.

Current approaches to fault tolerance in middleboxes involve careful engineering to avoid faults and deploying a backup appliance for rapid restart. These methods are imperfect and will be further challenged by NFV, where developers have limited control over the environment and vendor diversity increases the test space.

Our goal is to design middleboxes that guarantee correct recovery from failures with low-latency (e.g., additional per-packet latency under failure-free conditions well under 1 millisecond) and fast recovery (e.g., within typical transport timeout values). To our knowledge, no existing middlebox design meets these goals. We aim for a general and passive solution that can be applied across applications without requiring a dedicated backup per middlebox.

Our solution, FTMB, introduces new algorithms and techniques that adapt the classic rollback recovery approach to the middlebox domain, achieving correct recovery in a general and passive manner. Our prototype implementation introduces low additional latency (adding only 30 microseconds to median per-packet latencies, an improvement of 2-3 orders of magnitude over existing fault-tolerance mechanisms) and achieves rapid recovery (reconstructing lost state in 40-275 milliseconds for practical system configurations).

The remainder of this paper is organized as follows: Section 2 discusses our assumptions and the challenges in building a fault-tolerant middlebox. Section 3 outlines our goals and examines the design space. Sections 4, 5, and 6 present the design, implementation, and evaluation of FTMB, respectively. Section 7 discusses related work, and Section 8 concludes with future directions.

## Problem Space

### System Model

#### Parallel Implementations
We assume middlebox applications are multi-threaded and run on a multicore CPU. The middlebox operates with a fixed number of threads, and we use 'multi-queue' NICs that offer multiple transmit and receive queues partitioned across threads. Each thread reads from its own receive queue(s) and writes to its own transmit queue(s). The NIC partitions packets across threads by hashing a packet's flow identifier (i.e., 5-tuple including source and destination port and address) to a queue, ensuring all packets from a flow are processed by the same thread.

#### Shared State
Shared state refers to state accessed across threads. In our parallelization approach, per-flow state is local to a single thread and not shared. However, other state relevant to multiple flows may require cross-thread synchronization. Common forms of shared state include aggregate counters, IDS state machines, rate limiters, and packet caches for WAN optimizers.

#### Virtualization
We assume the middlebox code runs in a virtualized mode, which could be containers, lightweight VMs, or another form of compartmentalization providing isolation and supporting low-overhead snapshots.

### Failure Model

We focus on recovery from "fail-stop" errors, where the component changes to a state that allows other components to detect the failure and then stops. This is the standard failure model assumed by virtual machine fault-tolerance approaches like Remus, Colo, and vSphere.

Our current implementation targets failures at the virtualization layer and below, down to the hardware. According to recent studies, hardware failures are common, making this failure model relevant to operational systems.

### Challenges

Middlebox applications exhibit three characteristics that make fault-tolerance challenging:
1. **Statefulness**: Many middlebox applications are stateful, and losing this state can degrade performance and disrupt service.
2. **Frequent Non-determinism**: Shared state access and hardware interactions can lead to non-deterministic behavior.
3. **Low Packet-Processing Latencies**: The latency through the middlebox should be in the range of 10-100 microseconds.

These characteristics make it difficult to achieve correct and efficient fault-tolerance.

## Goals and Design Rationale

### Goals

A fault-tolerant middlebox design must meet the following requirements:
1. **Correctness**: The internal state after a failure must be consistent with the observable behavior of the system before the failure.
2. **Low Overhead on Failure-Free Operation**: Mechanisms should introduce no more than 10-100 microseconds of added delay to packet latencies.
3. **Fast Recovery**: The system must recover quickly, within typical transport timeout values.

### Context

Existing middlebox designs do not meet these requirements. Traditional rollback recovery cannot handle the high throughput and frequent non-determinism of middleboxes.

### Design Rationale

FTMB addresses these challenges by introducing:
1. **Ordered Logging**: Lightweight logging of necessary recovery information.
2. **Parallel Release Algorithm**: Ensures correct recovery when combined with ordered logging.

These mechanisms ensure that the system can recover correctly and efficiently, even in the presence of frequent non-determinism and high throughput requirements.