### Constraint as an Invariant
Invariants are conditions that must hold true throughout the lifetime of a system for all instances of a given type. For example, an OCL (Object Constraint Language) invariant can be used to ensure that a role is associated with at most one user. The following line illustrates this:

```ocl
context Role inv: self.user->size() <= 1
```

In this example, the `size()` operation is used to determine the number of users associated with a role.

OCL also provides several built-in operations for iterating over the members of collections such as sets, bags, and sequences. Examples include `forAll` and `iterate`.

### Authorization Framework
We have designed and implemented an advanced Web Services-based authorization framework to enforce organization-wide Role-Based Access Control (RBAC) policies. In this framework, both the authorization engine and the applications are exposed as Web Services. The authorization engine enforces RBAC policies and makes access decisions.

The framework leverages the concept of an interceptor (Access Decision Handler), a middleware component that enforces access decisions on behalf of the applications. This approach allows applications to offload their authorization mechanisms to the centralized authorization engine, thereby simplifying the implementation and maintenance of RBAC policies. If RBAC policies change, the applications do not need to be adjusted, leading to a clear separation of authorization logic from application logic. This is particularly beneficial for legacy applications, which can use the Web Services approach to integrate with the centralized authorization engine.

### Overview of the Authorization Framework
Figure 2 provides an overview of the authorization framework. Communication between the framework components is based on SOAP messages. The Authorization Engine acts as a Policy Decision Point (PDP), while the Access Decision Handler functions as a Policy Enforcement Point (PEP). The PDP evaluates client requests against relevant RBAC policies and returns an authorization decision. The PEP enforces the PDP's decisions.

### Detailed Workflow of the Authorization Framework
Figure 3 illustrates the sequential communication flow between the interacting components. When an Application Client calls a security-critical operation, such as "debit account," on the Application Web Service, the Access Decision Handler intercepts the request and forwards it to the Authorization Engine. The Authorization Engine then checks whether the client has the necessary permission to perform the operation and sends the decision back to the Access Decision Handler. The Access Decision Handler enforces the decision by either allowing or rejecting the client's request. This process positions the interceptor as a mediator between the Web-Service-based applications and the Authorization Engine.

### Implementation of the Access Decision Handler
The Access Decision Handler (interceptor) is implemented in a way that it acts as a Web Service for the Application Client, exposing the interfaces of the Authorization Engine. Simultaneously, it acts as a Web Service client for the Authorization Engine. Session management is handled using the Web container (Apacheâ€™s Axis). When a user logs in via the Application Client, an HTTP session ID is communicated to the PDP, which uses this information to create its internal representation of RBAC sessions.

### Mapping Between Application Web Service Interface and RBAC Permissions
The mapping between the Application Web Service interface and RBAC permissions is crucial for the access decision. We define the remote interfaces for the Application Web Service such that each method has exactly one parameter: the object to which the operation is applied. For instance, a `debit` operation on an `account` object would be represented as a Java method `debit(account)`. This allows us to create corresponding RBAC permissions, such as `(debit, account)`, and map them to the Application Web Service interface. The interceptor extracts the operation and object, and we assume that the Application Web Service interface and RBAC permissions are defined by domain experts who understand the organization's internal rules and processes.

### Trust Considerations
The communication channel from the Application Client to the Application Web Service must be secured, typically using XML Digital Signature. A secure channel is also required between the PDP (Authorization Engine) and the PEP(s). The Access Decision Handler (PEP) and the PDP must trust each other, and the Application Web Services must trust the PEP and, by transitivity, the PDP. The Application Client, however, is not considered trustworthy as it is under the control of the user and potentially an attacker. If the PEP and PDP need feedback from the Application Web Service, a trust relationship in that direction must also exist, especially if the access history needs to be updated after an operation is successfully carried out.

### Authorization Engine Functionality
The authorization engine is the core component of the authorization framework, implementing organization-wide RBAC policies. We have developed an advanced authorization engine based on the Java API provided by the USE system, a validation tool for UML models and OCL constraints.

RBAC policies are specified using UML/OCL. The RBAC element sets and relations are modeled in textual UML, and the authorization constraints are specified in OCL. The USE system supports the validation and enforcement of these policies, allowing for formal and precise expression of authorization constraints. Figure 4 shows a simple RBAC policy, including RBAC-related classes, association definitions, and domain-specific authorization constraints.

### Example RBAC Policy
The RBAC policy in Figure 4 includes three constraints:
1. A prerequisite role constraint between the roles "Banking Employee" and "Cashier."
2. An SSOD-CU (Static SOD-Conflict Users) constraint, ensuring that conflicting users cannot be assigned to conflicting roles.
3. A Simple Dynamic SOD (SDSOD) constraint, preventing a user from activating the "Customer" and "Cashier" roles simultaneously.

### Independence and Flexibility
The authorization engine is independent of any specific UML/OCL-based RBAC model and can implement all authorization constraints expressible in OCL. The RBAC policy is saved in a file in the USE format and processed when the authorization engine starts. This allows a security officer to specify the RBAC policy in UML/OCL, with the USE system handling the implementation.

### Addressing Hard-Coded Entities and Expertise
To address the issue of hard-coded entities and the potential lack of OCL expertise among policy designers, a macro/template mechanism can be provided. These macros allow for the creation of recurring types of authorization constraints, which can be instantiated with specific entities. This approach is similar to the macro mechanism introduced in the C programming language. For example, a `PrereqRole(_r1_,_r2_)` macro can be defined to handle prerequisite role constraints.

### UML Model
Below is a simplified UML model representing the RBAC elements and associations:

```uml
model RBAC
-- Classes
class Role
    attributes
        name: String
end

class User
    attributes
        name: String
end

class Permission
    attributes
        op: Operation
        o: Object
end

class Object
    attributes
        name: String
end

class Operation
    attributes
        name: String
end

class Session
    attributes
        name: String
end

-- Associations
association UA
    between
        User[*] role user
        Role[*] role role_
end

association PA
    between
        Permission[*] role permission
        Role[*] role role_
end

association Establishes
    between
        User[1] role user
        Session[*] role session
end
```

This UML model defines the basic structure and relationships for the RBAC system, providing a foundation for the OCL constraints and policies.