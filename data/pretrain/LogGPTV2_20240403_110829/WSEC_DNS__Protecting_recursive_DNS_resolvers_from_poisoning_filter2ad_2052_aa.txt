**Title: WSEC DNS: Protecting Recursive DNS Resolvers from Poisoning Attacks**

**Authors:**
- Roberto Perdisci
- Manos Antonakakis
- Xiapu Luo
- Wenke Lee

**Publication Information:**
- 978-1-4244-4421-2/09/$25.00
- Â© 2009 IEEE
- Authorized licensed use limited to: Tsinghua University. Downloaded on March 20, 2021 at 05:38:34 UTC from IEEE Xplore. Restrictions apply.

**Abstract:**
Recently, a new attack for poisoning the cache of Recursive DNS (RDNS) resolvers was discovered and made public. In response, major DNS vendors released a patch for their software. However, this patch does not fully protect DNS servers from cache poisoning attacks in many practical scenarios. DNSSEC (Domain Name System Security Extensions) offers a definitive solution to the vulnerabilities of the DNS protocol, but it has not yet been widely deployed. In this paper, we propose Wildcard SECure DNS (WSEC DNS), a novel solution to DNS cache poisoning attacks. WSEC DNS leverages existing properties of the DNS protocol and is based on wildcard domain names. We demonstrate that WSEC DNS can significantly reduce the probability of successful cache poisoning attacks. Specifically, with WSEC DNS in place, an attacker would need to persistently run a cache poisoning attack for years before having a non-negligible chance of success. Furthermore, WSEC DNS provides complete backward compatibility, allowing incremental large-scale deployment. Unlike DNSSEC, WSEC DNS can be deployed immediately because it does not face the technical and political challenges that have hampered the widespread adoption of DNSSEC.

**1. Introduction:**
The Domain Name System (DNS) [18, 19] is essential for the reliable operation of the Internet. We trust DNS servers to provide us with the correct domain name to IP address mappings, enabling activities such as web browsing, email, and online banking. Even a partial disruption of DNS can have catastrophic effects on the Internet. DNS queries are typically initiated by a stub-resolver (e.g., a web browser) on a user's machine, which relies on a recursive DNS resolver (RDNS) to obtain the IP address or other resources related to a domain name. The RDNS is responsible for contacting authoritative name servers on behalf of the stub-resolver, caching the response for a given time-to-live (TTL), and forwarding it back to the stub-resolver.

Since its introduction, DNS has been found to be vulnerable to various attacks, particularly cache poisoning attacks, which have been shown to be quite feasible [23]. Cache poisoning attacks work by forcing an RDNS to look up a domain name (e.g., google.com) and then sending forged DNS responses back to the RDNS before the valid response from the authoritative name server arrives. Each DNS query contains a 16-bit transaction ID (TXID) that allows the RDNS to distinguish valid responses from bogus ones. Therefore, the attacker must "guess" the correct TXID for a forged response to be accepted and stored in the cache. If the attack is successful, the attacker can force the RDNS to resolve the targeted domain name to a malicious IP address and store the malicious IP in the cache with a long TTL. As a result, the next time a stub-resolver queries the RDNS for the same domain name, it will also be redirected to the malicious IP (e.g., users of google.com may be redirected to a malicious website hosting malware or participating in information theft).

Recently, Kaminsky [13] demonstrated that a successful cache poisoning attack can be accomplished in a matter of seconds by exploiting a flaw in the DNS protocol.

**1.1 Previous Work:**
The Domain Name System Security Extensions (DNSSEC) have been proposed as a solution to the vulnerabilities of the DNS protocol, particularly to cache poisoning attacks. DNSSEC adds data origin authentication and data integrity verification mechanisms to DNS [1, 2, 3, 9]. The implementation and deployment of DNSSEC would provide a robust way to protect against DNS cache poisoning attacks (as well as other attacks on the DNS) because all responses are authenticated and verified.