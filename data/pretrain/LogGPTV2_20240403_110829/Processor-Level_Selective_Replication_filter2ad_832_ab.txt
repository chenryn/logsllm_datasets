scheduling in the rename state of pipeline. It contains 
as many entries as the number of architectural registers. 
The  ith  entry  in  the  RAT  contains  information  of  the 
source of the most recent value of register i. If the most 
i  has  been 
recent 
committed  to  architectural  state,  the  ith  entry  in  the 
RAT  contains  a  special  sentinel  value  indicating  that 
the  value  of  a  register  is  ready  and  available  in  the 
architectural register file. If the most recent instruction
instruction  producing  register 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:52:33 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007I-Cache
Fetch
Rename
Issue
Exec
WB
Commit
Replicated
Fetch
Replicated
Rename
Commit
Augmentation
producing  register  i  is  still  executing  and  is  in  the 
ROB, the entry in the RAT contains the index of the 
ROB entry containing the instruction. Thus the RAT 
holds  information  of  the  (read-after-write)  RAW 
dependencies among instructions. 
Figure 2: Modifications to pipeline for selective replication
execution  by  exploiting 
level 
parallelism  and  increasing  the  utilization  of  the 
multiple  functional  units  available  for  instruction 
execution. 
instruction 
the 
The  load/store  queue  (LSQ)  contains  entries  for 
all the memory access instructions (loads and stores) 
that are currently in-flight. The LSQ can be used to 
optimize  loads  by  forwarding  the  data  from  the 
immediately previous store, if both generate the same 
effective address and are writing the same number of 
bytes. 
The replicated fetch mechanism shown in Figure 2 
provides  multiple  copies  of  a  fetched  instruction  to 
the dispatcher. The detailed hardware implementation 
of this mechanism is presented in Section 4. 
Replicated Rename. The mechanism for renaming 
multiple copies of an instruction, based on the replica 
index, is shown in Figure 3. If a replicated instruction 
d  reads  from  register  $x,  the  RAT  entry  for  $x  is 
looked  up.  If  the  value  of  $x  is  available  in  the 
architectural register file then all copies of d get the 
value  for  this  source  operand  from  the  architectural 
register file. Otherwise, the value of $x is the result 
of  an  in-flight  instruction,  p,  that  is  allocated  the 
ROB  entry  k.  If  p  is  an  unreplicated  instruction  (as 
indicated by the REPL bit in entry k) for all replicas 
d1, d2, …, dr the source operand register is renamed 
to  read  from  entry  k.  If  p  is  a  replicated  instruction 
the register operand $x of  di  is  renamed  to  read  the 
output from instruction pi, where i= 1, 2, 3…, r. 
Instructions  Issue  to  Functional  Units.  With  the 
above renaming mechanism the issue of instructions 
to  functional  units  can  be  done  without  any 
modification  to  the  already  existing  scheduling 
mechanism. 
Execution and Storing the Result. The instructions 
in  the  unreplicated  mode  are  always  executed  in  a 
normal  out-of-order  fashion.  The  instructions  in  the 
replicated  mode  also  execute  in  an  out-of-order 
fashion.  Though  it  complicates  the  mechanism  to 
detect the completion of all copies of the instruction, 
it  provides  the  benefits  of  superscalar  out-of-order 
MORE
REPL
1 0
1
REPL_INDEX
ROB Instruction Entry
3
2
1
0
RAT#3
RAT#2
RAT#0
RAT#1
Figure 3: Mechanism for register renaming of 
multiple instructions 
The  ROB  need  not  be  empty  before  switching 
from  the  unreplicated  mode  to  the  replicated  mode. 
This can be done by maintaining the information in 
the register alias table across the two modes. In other 
words, if one of the replicated instructions reads from 
a register that is produced by a previous unreplicated 
instruction (which is not committed and still holds an 
entry  in  the  ROB),  then  all  copies  of  the  replicated 
instruction  read  from 
the  same 
unreplicated  instruction.  For  dependencies  among 
instructions  within 
replicated 
instruction  that  is  dependent  on  another  replicated 
instruction  gets 
the  producing 
instruction in the same replica. 
the  result  of 
input  from 
replica, 
For  switching  from  the  replicated  mode  to  the 
unreplicated  mode,  however,  the  constraint  that  the 
ROB is empty before the switch is maintained. This 
is  because  an  unreplicated  instruction  i,  that  is 
dependent  on  an  instruction  j  in  the  preceding 
replicated  code,  is  effectively  dependent  on  all  the 
copies of j. Before issuing i, all copies of j must have 
completed execution and their results matched so as 
to forward the result to instruction i. 
the 
its 
a 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:52:33 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007the 
After  an  instruction  has  completed  execution  in 
the  functional  unit,  the  result  is  stored  in  the  ROB 
entry  corresponding  to  that  instruction  itself.  For 
memory access instructions, the result of the address 
generation is stored in the ROB entry. 
Commit Augmentation. As shown in Figure 2, the 
commit  unit  is  augmented  to  vote  on  the  results  of 
multiple replicas to support selective replication. The 
commit stage is augmented to vote on the Each ROB 
entry contains a field to indicate if the instruction is 
ready  to  commit  or  not.  Committing  unreplicated 
instructions 
as 
committing  an  instruction  in  a  pipeline  without 
support for replication. 
same  procedure 
follows 
Among  replicated  instructions,  memory  access 
instructions are treated separately. When a replicated 
memory  access  instruction  at  the  head  of  the  ROB 
has  completed  execution 
(generated  effective 
address), all of its copies are checked to see if they 
have completed execution. If not, the commit action 
is  postponed  to  the  next  cycle.  If  all  r  copies  have 
generated their effective addresses (which is stored in 
the  result  field  of  the  ROB  entry),  these  results  are 
compared against each other. If there is a mismatch, 
an error is raised and appropriate recovery action is 
taken. If the effective addresses of all r copies match, 
then  a  single  memory  access  request  is  sent  to  the 
memory subsystem, on behalf of all the replicas. This 
reduces the pressure on the memory bandwidth, but 
loses  the  coverage  over  possible  errors  in  memory 
access.  When  this  memory  access  is  complete,  all 
copies of the instruction are ready to commit. In case 
of a load the data read is written to the architectural 
register file. The entries from the ROB and the LSQ 
for  all  copies  are  de-allocated.  When  any  other 
replicated instruction is at the head of the ROB, all of 
its  copies  are  checked  to  see  if  they  are  ready  to 
commit. If all r copies are ready to commit, the result 
fields in their ROB entries are compared to verify the 
computation.  If  all  r  fields  match,  the  instruction  is 
committed  and  the  result  is  committed  to  the 
architectural register file. 
4. Hardware implementation 
into 
The  mechanism  to  dispatch  multiple  copies  of 
instructions  is  depicted  in  Figure  4.  Instructions  are 
fetched 
buffer 
(temp_fetch_buf  in  Figure  4).  Depending  on  the 
degree  of  replication  different  number  of  copies  of 
the  instruction  should  be  dispatched.  In  a  processor 
that  does  not  support  replication  the  input  to  the 
dispatch mechanism would be the instructions in the 
temporary 
fetch 
a 
the 
instructions  are 
temporary  fetch  buffer.  These 
dispatched to the reorder buffer (ROB) based on the 
space  available  in  the  ROB  and  the  dispatch  width 
(the  maximum  number  of  instructions  that  can  be 
dispatched in one clock cycle) of the processor. 
instructions 
the  application, 
Depending on the degree of replication requested 
by 
that  are 
dispatched  in  the  current  clock  cycle  need  to  be 
determined.  The  replicated  instructions  that  can  be 
dispatched in the current clock cycle are placed in the 
real fetch buffer (fetch_buf in Figure 4). The degree 
of  replication  is  stored  in  the  register  REP_LVL. 
REP_LVL is used as an index into the combinational 
logic that starts with 0 when there is no replication. 
Consider  a  processor  with  a  fetch  width  (maximum 
number of instructions fetched in a clock cycle) of 4 
and  a  dispatch  width 
(maximum  number  of 
instructions dispatched in a clock cycle) of 4. 
The  red  lines  show  the  duplicated  instructions 
the 
temp_fetch_buf 
the 
to 
2
2
1
1 
0 
0
REPL_LVL
-1
+
being  routed  from 
fetch_buf.  
3
temp_fetch_buf
3
0
1
2
3
Z
2
3
1
0
3
Z
3
1
0
2
2
Z 
3 
Z 
2 
0 
1 
1 
fetch_buf
1
1
0 
0
Figure 4: Mechanism for dispatching multiple 
copies of instructions 
The ROB is augmented with a bit (referred to as 
the  REPL  bit)  to  indicate  whether  it  contains  a 
replicated  or  an  unreplicated 
instruction.  ROB 
designs are of two types: one in which the result of 
the instruction in the ROB entry is written to separate 
physical  register  file,  and  the  other  in  which  the 
result  is  written  to  the  ROB  entry  itself.  The 
replication  mechanism  is  presented  assuming  an 
ROB design where the results are written to the ROB 
entry  itself,  though  it  is  possible  to  extend  the 
technique  for  the  design  where  a  separate  physical 
register file is used to store the results of instructions. 
The  additional  hardware  required  in  the  context  of 
Reduced 
(RISC) 
Set  Computer 
Instruction 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:52:33 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007architecture  is  described. 2   The  RAT  and  commit 
control logic for the unreplicated mode is the same as 
that  used  in  the  normal  superscalar  out-of-order 
pipelines. 
5. Evaluation methodology 
The  software-implemented  functional  simulator 
implements  a  MIPS-based  SuperScalar  processor. 
The sim-outorder processor performance simulator of 
the SimpleScalar Tool Set [17] has been augmented 
to  simulate  the  RSE  with  embedded  hardware 
modules.  sim-outorder  simulates  an  out-of-order 
pipelined processor. The main loop of the simulator 
is executed once for each target (simulated) machine 
cycle. Currently, CHECK instructions are embedded 
at runtime, and not at compile time. At the time of an 
instruction fetch, the simulator determines whether to 
insert  a  CHECK  instruction  before  it  into  the 
instruction stream. It does this either by decoding the 
instruction  or  by  monitoring  the  fetched  instruction 
address. This is equivalent to the CHECK instruction 
being embedded in the static instruction stream of the 
program. 
5.1.  Workload for evaluation 
is  based  on 
Evaluation of the performance overhead and error 
coverage 
the  Siemens  suite  of 
benchmarks.  These  benchmark  applications  are 
representative  of  real-world  programs  and  contain  a 
few  hundred  lines  of  code  [9].  The  benchmarks  are 
input-dependent and come with a rich input set with 
an  average  of  3400  inputs  for  each  benchmark.  For 
each benchmark, we choose the first 100 inputs from 
its  input  set.  For  each  input  i  the  DDG,  Gi  of  the 
program  is  generated.  For  each  critical  variable,  its 
backward slice in Gi is calculated. The set of nodes 
(instructions)  in  the  backward  slice  are  critical 