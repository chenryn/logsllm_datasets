will be passed to the FTL via a block-based access interface, inform-
ing the FTL to (cid:27)ll the LBAs with random data. However, due to
the internal complexity of FTL, over-writing all the LBAs is not
able to ensure that all the physical (cid:30)ash blocks will be (cid:27)lled with
randomness [15, 41].
Block erasure decreases randomness. In a hidden volume-based
PDE system, when new data are written to the public volume, they
will over-write the corresponding disk locations, and the remaining
disk locations are still (cid:27)lled with randomness. Flash storage, how-
ever, does not allow an over-write operation before a block erasure
has been performed. In other words, before any data can be written,
the corresponding (cid:30)ash block (originally (cid:27)lled with randomness)
will be erased with all “1” bits. If this block is not completely (cid:27)lled
by the new data, it will create a few pages in this block, which
are (cid:27)lled with all “1” bits, rather than randomness. Additionally,
when data are updated/deleted, the corresponding (cid:30)ash blocks will
be erased with all “1” bits, rather than randomness. The existing
PDE systems for mobile devices [6, 33, 34, 44] unfortunately only
operate in the block layer, and thus are not able to re-(cid:27)ll those
pages which do not hold valid data with randomness.
3.1.4 Summary of The A(cid:29)acks on The Hidden Volume-
based PDE systems. A common issue for all the existing hidden
volume-based PDE systems for mobile devices is that they are
incorporated into the block device layer, which can only allow them
to access the (cid:30)ash memory via a block-based access interface. In
other words, they are not able to handle the deniability compromises
in (cid:30)ash memory, by either controlling the block allocation strategy
(Attack 1 described in Sec. 3.1.1 is thus possible), or manipulating
garbage collection and bad block management (Attack 2 described
in Sec. 3.1.2 is thus possible). This observation motivates us to push
the PDE design to (cid:30)ash translation layer (FTL) to eliminate those
deniability compromises.
3.2 Attacking DEFY
DEFY [31] is till now the sole PDE system which directly works
with (cid:30)ash memory to achieve deniability. It heavily relies on the
properties o(cid:29)ered by (cid:30)ash (cid:27)le system YAFFS2. To achieve PDE,
DEFY introduces multiple security levels, and the lower security
levels will not have any knowledge on the existence of the higher
security levels. Upon facing coercive attack, the victim can use the
data/activities at the lower security levels to deny the data/activities
at the higher security levels. However, the data from the lower
security levels may overwrite the data from the higher security
levels. To mitigate this issue, DEFY disables garbage collection at
the lower security levels.
As the adversary is able to enter a lower security level, he/she
can compromise the deniability o(cid:29)ered by DEFY as follows: The
adversary copies the device’s data elsewhere, deletes them from
the device, and writes the data back to the device. After repeating
the aforementioned operations a few times, he/she will (cid:27)nd that no
more data are allowed to be written to the device, even though there
is still a large amount of empty space. This is because, by disabling
garbage collection in this (lower) security level, no invalid space
can be reclaimed. This provides the adversary a clear indication of
the existence of deniability.
Session J4:  Flash SecurityCCS’17, October 30-November 3, 2017, Dallas, TX, USA22214 MODEL AND ASSUMPTIONS
4.1 System Model
We mainly consider mobile computing devices which use (cid:30)ash-
based block devices (e.g., eMMC cards, SD cards, and MicroSD
cards) as storage media. Such devices are pervasive nowadays. For
example, a majority of smart phones (e.g., Android phones, iPhones,
Windows phones) and tablets use eMMC cards as internal storage,
and MicroSD cards as external storage. We also consider other
computing devices (e.g., laptops) which are equipped with SSDs.
4.2 Adversarial Model
We consider a computationally bounded adversary who can capture
a victim device equipped with (cid:30)ash-based block device. The adver-
sary can obtain root privilege of the device, and have a full control
over the device’s internal and external storage. In addition, the
adversary can coerce (e.g., by torture) the device owner to disclose
the decryption key. Note that as the adversary is in possession of
the victim device, he/she is able to obtain a full snapshot of the
storage medium. This includes the physical image of the raw NAND
(cid:30)ash, obtainable by forensic data recovery tools [4]. We call the
aforementioned adversary a “single-snapshot” adversary. We do
not consider an adversary who can periodically obtain a snapshot of
the storage medium from the victim device by monitoring the device
unbeknownst to the victim (i.e., a multiple-snapshot adversary).
4.3 Assumptions
Our design relies on multiple assumptions, which are also required
in the prior PDE systems for mobile devices [6, 33, 34, 44]. The
assumptions are summarized in the following:
• The adversary will know the design of DEFTL. However,
he/she does not have any knowledge on the keys and pass-
words of the PDE mode.
• The adversary will stop coercing the device’s owner once
he/she is convinced that the decryption keys have been
revealed.
• The adversary cannot capture a device working in the
PDE mode or after a crash of the PDE mode. Otherwise,
he/she can trivially retrieve the sensitive data or detect the
existence of PDE.
• The operating system, bootloader, baseband OS, and (cid:30)ash
(cid:27)rmware are all malware-free. In addition, the adversary
will not be able to perform reverse engineering over the
bootloader and the (cid:30)ash (cid:27)rmware, since PDE always re-
quires incorporating addition code into those components
and performing reverse engineering will unavoidably lead
to compromise of deniability.
5 DEFTL DESIGN
In this section, we present DEFTL, the (cid:27)rst design that enables
plausible deniability in Flash Translation Layer.
5.1 DEFTL Overview
In general, to achieve deniability, we should answer two key ques-
tions as follows:
Question 1: How to prevent the sensitive data from being leaked to
a coercive adversary?
Intuitively, we can hide the sensitive data within the public non-
sensitive data, and use the public data to deny the existence of
hidden data. Speci(cid:27)cally, any state/behavior of the hidden data
can be interpreted as the state/behavior of the public data. We
adapt the hidden volume technique (Sec. 2.3) to FTL to achieve
deniability. Speci(cid:27)cally, we introduce two volumes, a public volume
and a hidden volume. The public volume will occupy the entire
(cid:30)ash medium, and the hidden volume is stored stealthily among
the public volume. All the public non-sensitive data will be stored
in the public volume, which will be encrypted by a decoy key. All
the sensitive data will be stored in the hidden volume, which will
be encrypted by a true key. Correspondingly, we have two modes, a
public mode and a PDE mode. The public mode refers to the system
which manages the public volume, while the PDE mode refers to
the system which manages the hidden volume. The entire (cid:30)ash
medium will be (cid:27)lled with cryptographically secure randomness
during initialization.
When implementing the hidden volume technique in FTL, we
incorporate a few additional strategies to avoid deniability com-
promises being resulted from handling the special nature of (cid:30)ash
memory: First, to eliminate deniability compromises from type-I
blocks (Sec. 3.1.1), we enforce a special “no overlap block” policy,
such that the public and the hidden volume will not share (cid:30)ash
blocks; Second, to eliminate deniability compromises from type-II
blocks (Sec. 3.1.1), we manipulate the type-II blocks belonging to the
hidden volume. Speci(cid:27)cally, when unmounting the hidden volume,
we (cid:27)ll the empty pages of type-II blocks with randomness, such
that each type-II block for the hidden volume will be indistinguish-
able from a block truly (cid:27)lled with randomness. Third, to eliminate
deniability compromises from duplicate random data (Sec. 3.1.2),
we modify the garbage collection and the bad block management
in the PDE mode, such that the victim blocks and the bad blocks
will be erased immediately after the valid data stored on them have
been copied to other blocks. Last, to maintain an enough amount of
randomness (Sec. 3.1.3): during initialization, we (cid:27)ll the entire (cid:30)ash
medium with randomness by directly writing random data to all
the physical (cid:30)ash blocks; when unmounting the hidden volume, we
(cid:27)ll those empty pages (i.e., a page with all “1”s) with randomness.
Question 2: How to prevent the hidden sensitive data from being
over-written by the pubic non-sensitive data?
To avoid deniability compromises, the public mode should not
have any knowledge on the existence of the hidden volume. Oth-
erwise, the adversary may take advantage of this to compromise
deniability. However, without such knowledge, the data being writ-
ten to the public volume may over-write the data stored in the
hidden volume. A strategy which can mitigate this over-write issue
while being able to be compatible with the (cid:30)ash translation layer,
is desired. Our strategy is, we “stealthily” isolate the public vol-
ume and the hidden volume by manipulating block allocation and
garbage collection in FTL as follows: First, we create a free block
pool which stores all the blocks available to be allocated to the new
data. When allocating blocks in the public mode, we always select
blocks from the head of the pool; when allocating blocks in the PDE
mode, we always select blocks from the tail of the pool; Second, we
Session J4:  Flash SecurityCCS’17, October 30-November 3, 2017, Dallas, TX, USA2222manipulate the garbage collection (in both the public mode and the
PDE mode), such that blocks can be reclaimed frequently enough
to (cid:27)ll the head of the free block pool and the public mode is less
likely to allocate blocks belonging to the hidden volume.
Following the insights described above, we design DEFTL to
enable deniability in (cid:30)ash translation layer. In the remainder of this
section, we describe key components of DEFTL. We (cid:27)rst introduce
block types and metadata used by DEFTL to manage the public and
the hidden volume. We then elaborate key operations in initializa-
tion, public mode and PDE mode. Finally, we introduce user steps
for using DEFTL.
5.2 Block Types and Metadata
Block types. DEFTL di(cid:29)erentiates four types of (cid:30)ash blocks: 1)
The blocks which do not store any valid public or hidden data.
These truly free blocks can be reclaimed by both the public and
the hidden volume. We call these blocks in state A. 2) The blocks
which do not store any valid public data, but store valid hidden
data. These blocks can be reclaimed in the public volume, since the
public mode should not have any knowledge on the existence of
the hidden data to avoid deniability compromises. We call these
blocks in state B. 3) The blocks which contain both the valid public
volume pages (i.e., the pages which store valid public data) and the
invalid public volume pages (i.e., the pages which store obsolete
public data). We call these blocks in state C. 4) The blocks which
only contain valid public volume pages. We call these blocks in
state D.
Metadata. To manage both the public and the hidden volume,
DEFTL maintains a few metadata:
• Mapping table. To provide a block-based access interface
to the external entity (e.g., the (cid:27)le system), every logical
block address (LBA) should be mapped to a physical (cid:30)ash
address. In DEFTL, we maintain a mapping table for each
volume. The external entity like the (cid:27)le system can access
either the public volume or the hidden volume, and each
volume is mapped to a set of (cid:30)ash blocks transparently by
FTL using the corresponding mapping table. Note that the
mapping table for the hidden volume is stored encrypted
(using the true key) in a few (cid:30)ash blocks (see Sec. 5.5),
such that those blocks are indistinguishable from other
blocks truly (cid:27)lled with randomness. This is to prevent the
adversary from identifying the existence of the hidden
volume mapping table without the true key.
• Dirty block table. Both block allocation and the selection
of the victim blocks during garbage collection are based
on the number of valid/invalid pages in each block [20].
Therefore, for each volume, we maintain a dirty block table,
which keeps track of the number of valid pages for each
block belonging to this volume. Since the hidden volume
should not use those blocks which have been occupied
by the data written to the public volume, we maintain a
separate dirty block table for the hidden volume, which
includes all the free blocks (blocks in both state A and B)
in the public volume. Note that the dirty block table for the
hidden volume will be encrypted (using the true key) and
stored together with the hidden volume mapping table.
• Other metadata. We also maintain other essential meta-
data shared by both volumes, e.g., a bad block table (which
keeps track of the bad blocks), a root table (which keeps
track of the location of the metadata for public volume),
an erasure count table (which keeps track of the erasure
count of each (cid:30)ash block for wear leveling purpose).
5.3 Initialization
During initialization, DEFTL (cid:27)rst (cid:27)lls the entire (cid:30)ash medium with
random data, and then initializes the public and the hidden volume.
Filling the entire (cid:30)ash with randomness. A fundamental re-