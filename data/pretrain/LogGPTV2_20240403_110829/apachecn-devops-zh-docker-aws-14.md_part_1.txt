# 十四、Fargate 和 ECS 服务发现
到目前为止，在本书中，我们花了相当多的时间专注于构建支持您的 ECS 集群的基础架构，详细介绍了如何为您的 ECS 容器实例构建定制的 Amazon 机器映像，以及如何创建 EC2 Auto Scaling 组，这些组可以动态地向您的 ECS 集群添加或删除 ECS 容器实例，其中有专门用于管理集群生命周期和容量的章节。
想象一下不必担心 ECS 集群和 ECS 容器实例。想象一下，别人为你管理它们，以至于你甚至不知道它们的存在。对于某些用例，对硬件选择、存储配置、安全状态和其他与基础架构相关的问题进行高度控制是非常重要的；到目前为止，您应该对 ECS 如何提供这些功能有了相当深刻的理解。但是，在许多情况下，没有必要进行这种级别的控制，能够利用管理您的 ECS 群集修补、安全配置、容量和其他一切的服务将会带来巨大的好处，降低您的运营开销，让您能够专注于交付您的组织正在努力实现的任何目标。
好消息是，这实际上是可能的，这要归功于 2017 年 12 月推出的名为 **AWS Fargate** 的服务。Fargate 是一个完全托管的服务，您只需在其中定义 ECS 任务定义和 ECS 服务，然后让 Fargate 负责您在本书中已经习惯的 ECS 集群和容器实例管理的其余部分。在本章中，您将学习如何使用 AWS Fargate 部署容器应用，使用我们在本书中一直采用的云信息的**基础架构作为代码** ( **IaC** )方法。为了让这一章更有趣一点，我们将添加对一个名为 X 射线的 AWS 服务的支持，它为您在 AWS 中运行的应用提供分布式跟踪。
当您希望在容器应用中使用 x 光时，您需要实现所谓的 x 光守护程序，它是一个从容器应用中收集跟踪信息并将其发布到 x 光服务的应用。我们将扩展 todobackend 应用来捕获传入请求的跟踪信息，并将通过利用 AWS Fargate 服务向您的 AWS 环境添加一个 X 射线守护程序，该服务将收集跟踪信息并将其转发给 X 射线服务。
另外，我们还将实现一个名为 ECS 服务发现的功能，它允许您的容器应用使用 DNS 自动发布和发现。这个特性对于 x 光守护程序非常有用，它是一个基于 UDP 的应用，不能由各种负载平衡服务提供服务，这些服务可用于前端基于 TCP 和 HTTP 的应用。ECS 包括对服务发现的内置支持，在 ECS 任务开始和停止时负责服务注册和取消注册，允许您创建其他应用可以轻松发现的高可用性服务。
本章将涵盖以下主题:
*   何时使用法盖特
*   向应用添加对自动气象站 x 光的支持
*   创建 x 光守护程序 Docker 映像
*   配置 ECS 服务发现资源
*   为 Fargate 配置 ECS 任务定义
*   为 Fargate 配置 ecs 服务
*   部署和测试 x 光守护程序
# 技术要求
以下是本章的技术要求:
*   对 AWS 帐户的管理员访问权限
*   根据第 3 章中的说明配置的本地 AWS 配置文件
*   AWS CLI 版本 1.15.71 或更高版本
*   Docker 18.06 CE 或更高版本
*   Docker 写作 1.22 或更高
*   GNU Make 3.82 或更高版本
*   本章继续第 13 章，因此它要求您已经成功完成第 13 章中定义的所有配置任务
以下 GitHub URL 包含本章使用的代码示例:[https://GitHub . com/docker-in-AWS/docker-in-AWS/tree/master/ch14](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch14)
查看以下视频，了解《行动守则》:
[http://bit.ly/2Lyd9ft](http://bit.ly/2Lyd9ft)
# 什么时候用法盖特？
正如本章介绍中所讨论的，AWS Fargate 是一项服务，它允许您部署基于容器的应用，而不需要您部署任何 ECS 容器实例、自动扩展组或任何与管理 ECS 集群基础架构相关的操作要求。这将 AWS Fargate 定位为无服务器技术，介于使用 AWS Lambda 运行“功能即服务”和使用传统的 ECS 集群和 ECS 容器实例运行您自己的基础架构之间。
尽管 Fargate 是一项伟大的技术，但重要的是要理解 Fargate 非常年轻(至少在撰写本书时是这样)，并且它确实带有一些限制，可能会使其不适合某些用例，概述如下:
*   **无持久存储** : Fargate 目前不支持持久存储，所以如果你的应用需要使用持久 Docker 卷，应该使用替代服务，比如传统的 ECS 服务。
*   **定价**:定价随时变化；然而，与您通过 ECS 获得的常规 EC2 实例定价相比，许多人认为 Fargate 的初始定价设置非常昂贵。例如，你能买到的最小的 Fargate 配置有 0.25v 的 CPU 和 512 MB 的内存，每月花费 14.25 美元。相比之下，CPU 为 0.5v、内存为 512 MB 的 t2.nano 价格要低得多，为 4.75 美元(所有价格均基于`us-east-1 region`)，
*   **部署时间**:到目前为止，根据我的经验，在 Fargate 上运行的 ECS 任务通常需要更长的时间来进行资源调配和部署，这可能会影响您的应用部署所花费的时间长度(这也会影响自动扩展操作)。
*   **安全和控制**:使用 Fargate，您不能控制任何关于运行您的容器的底层硬件或实例。如果您有严格的安全和/或合规要求，那么 Fargate 可能不会为您提供保证或必要的控制来满足您的特定要求。但是，需要注意的是，Fargate 被 AWS 列为同时符合 HIPAA 和 PCI 级 DSS。
*   **网络隔离:**在撰写本书时，Fargate 不支持使用 HTTP 代理进行 ECS 代理和 CloudWatch 日志通信。这要求您或者将 Fargate 任务放置在具有互联网连接的公共子网中，或者放置在具有 NAT 网关的私有子网中，类似于您在*隔离网络访问*一章中学习的方法。要允许访问公共 AWS API 端点，这确实需要您开放传出的 web 访问，这可能会违反组织的安全要求。
*   **服务可用性**:撰写本书时，Fargate 仅在美国东部(弗吉尼亚州)、美国东部(俄亥俄州)、美国西部(俄勒冈州)和欧盟(爱尔兰)地区提供；然而，我预计 Fargate 将很快在大多数地区得到广泛应用。
如果你能忍受法盖特目前的限制，那么法盖特将大大减少你的运营开支，让你的生活更简单。例如，当涉及到自动扩展时，您可以简单地使用我们在 *ECS 自动扩展*章节末尾讨论的应用自动扩展方法来自动扩展您的 ECS 服务，Fargate 将负责确保有足够的集群容量。同样，您也不需要担心 ECS 集群的修补和生命周期管理——Fargate 会为您处理以上所有问题。
在本章中，我们将部署一个 AWS X 射线守护程序服务来支持 todobackend 应用的应用跟踪。这种类型的服务非常适合 Fargate，因为它是一种后台服务，不需要持久存储，不影响 todobackend 应用的可用性(如果它关闭)，也不处理最终用户数据。
# 向应用添加对自动气象站 x 光的支持
在我们可以使用 AWS X 射线服务之前，您的应用需要支持收集跟踪信息并将其发布到 X 射线服务。X 射线**软件开发工具包(SDK)** 包括对多种编程语言和流行应用框架的支持，包括 Python 和 Django，它们都为 todobackend 应用提供了动力。
您可以在[https://aws.amazon.com/documentation/xray/](https://aws.amazon.com/documentation/xray/)找到适合您所选语言的 SDK 文档，但是对于我们的用例，[https://docs . AWS . Amazon . com/Xray-SDK-for-python/latest/reference/framework . html](https://docs.aws.amazon.com/xray-sdk-for-python/latest/reference/frameworks.html)提供了如何配置 Django 以自动为应用的每个传入请求创建跟踪的相关信息。
在 todobacknd 存储库中，首先需要将 X 射线 SDK 包添加到`src/requirements.txt`文件中，这将确保 SDK 与 todobacknd 应用的其他依赖项一起安装:
```
Django==2.0
django-cors-headers==2.1.0
djangorestframework==3.7.3
mysql-connector-python==8.0.11
pytz==2017.3
uwsgi==2.0.17
aws-xray-sdk
```
接下来，您需要将包含在 SDK 中的 Django X 射线中间件组件添加到位于`src/todobackend/settings_release.py`的 Django 项目的发布设置文件中的`MIDDLEWARE`配置元素中:
```
from .settings import *
...
...
STATIC_ROOT = os.environ.get('STATIC_ROOT', '/public/static')
MEDIA_ROOT = os.environ.get('MEDIA_ROOT', '/public/media')
MIDDLEWARE.insert(0,'aws_xray_sdk.ext.django.middleware.XRayMiddleware')
```
该配置与姜戈的 [X 光文档有所不同，但是通常您只想在您的 AWS 环境中运行 x 光，使用标准方法可能会在您的本地开发环境中导致 x 光配置问题。因为我们有一个单独的导入基础设置文件的发布设置文件，所以我们可以简单地使用如图所示的`insert()`功能在基础`MIDDLEWARE`列表的开头插入 X 射线中间件组件。这种方法确保我们将在使用发布设置的 AWS 环境中运行 X 射线，但不会在本地开发设置中使用 X 射线。](https://docs.aws.amazon.com/xray-sdk-for-python/latest/reference/frameworks.html)
It is important that the X-Ray middleware component is specified first in the `MIDDLEWARE` list, as this ensures that X-Ray can start tracing incoming requests before any other middleware components.
最后，Python X-Ray SDK 包括对许多流行包的跟踪支持，包括`mysql-connector-python`包，todobackend 应用使用该包连接到其 MySQL 数据库。在 Python 中，X 射线使用一种称为修补的技术包装受支持的包进行的调用，这种技术允许 X 射线拦截包进行的调用并捕获跟踪信息。对于我们的用例，修补`mysql-connector-python`包将使我们能够跟踪应用进行的数据库调用，这对于排除性能问题非常有用。要修补这个包，您需要向应用入口点添加几行代码，对于 Django，它位于文件`src/todobackend.wsgi.py`中:
```
"""
WSGI config for todobackend project.
It exposes the WSGI callable as a module-level variable named ``application``.
For more information on this file, see
https://docs.djangoproject.com/en/2.0/howto/deployment/wsgi/
"""
import os
from django.core.wsgi import get_wsgi_application
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "todobackend.settings")
from aws_xray_sdk.core import xray_recorder
from aws_xray_sdk.core import patch_all
# Required to avoid SegmentNameMissingException errors
xray_recorder.configure(service="todobackend")
patch_all()
application = get_wsgi_application()
```
`xray_recorder`配置将为每个跟踪段添加一个服务名，这是必需的，否则您将观察到 SegmentNameMissingException 错误。此时，您已经添加了应用级别的支持来开始跟踪传入的请求，并且您应该能够在提交和推送您的更改到 GitHub 之前成功运行 make 工作流(运行`make test`和`make release`)。因为您现在已经有了一个连续的交付管道，这将触发该管道，从而确保一旦管道构建阶段完成，您的应用更改将被发布到 ECR。如果您还没有完成上一章，或者您已经删除了您的管道，那么您将需要在运行`make test`和`make release`后使用`make login`和`make publish`命令手动发布新映像。
# 创建 x 光守护程序 Docker 映像
在我们的应用可以发布 x 光跟踪信息之前，您必须部署一个 x 光守护程序，您的应用可以将此信息发送到该守护程序。我们的目标是使用 AWS Fargate 运行 X 射线守护程序，但在此之前，我们需要创建一个 Docker 映像来运行守护程序。AWS 提供了如何构建 X 射线守护程序映像的示例，我们将通过在`todobackend-aws`存储库的根目录下创建一个名为`Dockerfile.xray`的文件，遵循与 AWS 所记录的类似方法:
```
FROM amazonlinux
RUN yum install -y unzip
RUN curl -o daemon.zip https://s3.dualstack.us-east-2.amazonaws.com/aws-xray-assets.us-east-2/xray-daemon/aws-xray-daemon-linux-2.x.zip
RUN unzip daemon.zip && cp xray /usr/bin/xray
ENTRYPOINT ["/usr/bin/xray", "-b", "0.0.0.0:2000"]
EXPOSE 2000/udp
```
现在，您可以使用`docker build`命令在本地构建该映像，如下所示:
```
> docker build -t xray -f Dockerfile.xray .
Sending build context to Docker daemon 474.1kB
Step 1/6 : FROM amazonlinux
 ---> 81bb3e78db3d
Step 2/6 : RUN yum install -y unzip
 ---> Running in 35aca63a625e
Loaded plugins: ovl, priorities
Resolving Dependencies
...
...
Step 6/6 : EXPOSE 2000/udp
 ---> Running in 042542d22644
Removing intermediate container 042542d22644
 ---> 63b422e40099
Successfully built 63b422e40099
Successfully tagged xray:latest
```
现在我们的形象已经建立，我们需要将其发布给 ECR。在此之前，您需要为 x 光映像创建一个新的存储库，我们可以将其添加到位于`todobackend-aws`存储库根目录的现有`ecr.yml`文件中:
```
AWSTemplateFormatVersion: "2010-09-09"
Description: ECR Resources
Resources:
  XrayRepository:
 Type: AWS::ECR::Repository
 Properties:
 RepositoryName: docker-in-aws/xray
  CodebuildRepository:
    Type: AWS::ECR::Repository
  ...
  ...
```
在前面的示例*、*中，您创建了一个名为`docker-in-aws/xray`的新存储库，这将产生一个名为`.dkr.ecr..amazonaws.com/docker-in-aws/xray`的完全限定存储库名称(例如，`385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/xray`)。
现在，您可以通过运行`aws cloudformation deploy`命令来创建新的存储库:
```
> export AWS_PROFILE=docker-in-aws
> aws cloudformation deploy --template-file ecr.yml --stack-name ecr-repositories
Enter MFA code for arn:aws:iam::385605022855:mfa/justin.menga:
Waiting for changeset to be created..
Waiting for stack create/update to complete
Successfully created/updated stack - ecr-repositories
  ...
  ...
```