Hi,
I'm face a interesting problem while executing alot of a simple query via head
plugin in a little time (about ~ 20 clicks successive)
    {
        "size" : 90000000,
        "query" : {
            "term" : { "username" : "kimchy" }
        },
        "fields" : []
    }
The result is the following (while Elasticsearch take time to anwser)
    {
        error: ReduceSearchPhaseException[Failed to execute phase [query], [reduce] ]; nested: OutOfMemoryError[Java heap space];
        status: 503
    }
But I have only 11 docs in my index.
Log debug trace
    Failed to execute [org.elasticsearch.action.search.SearchRequest@3a44ebcb] while moving to second phase
    java.lang.OutOfMemoryError: Java heap space
    at org.apache.lucene.util.PriorityQueue.(PriorityQueue.java:64)
            at org.apache.lucene.util.PriorityQueue.(PriorityQueue.java:37)
            at org.elasticsearch.search.controller.ScoreDocQueue.(ScoreDocQueue.java:31)
            at org.elasticsearch.search.controller.SearchPhaseController.sortDocs(SearchPhaseController.java:257)
            at org.elasticsearch.action.search.type.TransportSearchQueryThenFetchAction$AsyncAction.moveToSecondPhase(TransportSearchQueryThenFetchAction.java:85)
            at org.elasticsearch.action.search.type.TransportSearchTypeAction$BaseAsyncAction.innerMoveToSecondPhase(TransportSearchTypeAction.java:417)
            at org.elasticsearch.action.search.type.TransportSearchTypeAction$BaseAsyncAction.onFirstPhaseResult(TransportSearchTypeAction.java:241)
            at org.elasticsearch.action.search.type.TransportSearchTypeAction$BaseAsyncAction$3.onResult(TransportSearchTypeAction.java:219)
            at org.elasticsearch.action.search.type.TransportSearchTypeAction$BaseAsyncAction$3.onResult(TransportSearchTypeAction.java:216)
            at org.elasticsearch.search.action.SearchServiceTransportAction.sendExecuteQuery(SearchServiceTransportAction.java:203)
            at org.elasticsearch.action.search.type.TransportSearchQueryThenFetchAction$AsyncAction.sendExecuteFirstPhase(TransportSearchQueryThenFetchAction.java:80)
            at org.elasticsearch.action.search.type.TransportSearchTypeAction$BaseAsyncAction.performFirstPhase(TransportSearchTypeAction.java:216)
            at org.elasticsearch.action.search.type.TransportSearchTypeAction$BaseAsyncAction.performFirstPhase(TransportSearchTypeAction.java:203)
            at org.elasticsearch.action.search.type.TransportSearchTypeAction$BaseAsyncAction$2.run(TransportSearchTypeAction.java:186)
            at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
            at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
            at java.lang.Thread.run(Thread.java:724)
a priori, in Apache Lucene PriorityQueue.class, this following line causing
problem
    heap = (T[]) new Object[heapSize];
Questions :
  1. Could you look up for fixing this issue? heapSize should be equal  
**heapSize = Math.min(nDocsTotalInIndex, size);** like it's did in IndexSearch
class of Lucene (line 445)
  2. Do you know why PriorityQueue pre-allocate a full array of length (will causing HeapSize or GC problem if we do a lot of query with high 'size' value)? Why don't simply use List  ? Please clarify me, just for curiosity :)
Thanks
Setup:
  * Elasticsearch 1.0.1 release
  * java version "1.7.0_25"  
Java(TM) SE Runtime Environment (build 1.7.0_25-b15)  
Java HotSpot(TM) 64-Bit Server VM (build 23.25-b01, mixed mode)
PS: maybe the same problem with this one 4177