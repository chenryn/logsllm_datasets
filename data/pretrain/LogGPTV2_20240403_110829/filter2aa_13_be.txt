果然，这里使用了fopen来读取status文件了，点击R7寄存器查看全部内容，如下所示：
这个16396就是本进程的id：
到这里，下一个断点肯定是fgets，所以点击F9键进入到fgets断点处，如下所示：
这里还看不到什么信息，继续点击F8键单步调试，如下所示：
途中，会看到有memchr和memcpy这两个重要函数，这个也是操作字符串的核心点，继续往下走，如下所示：
到了fgets函数结束的地方，看到了R0寄存器的内容是Name，点击R0查看全部内容，如下所示：
全部内容是Name：der.crackme0201，这就是status文件的第一行内容：
开始读取status文件的每行内容了，但是到TracerPid那行还要继续执行5次fgets函数，所以还会进入5次断点。为了节省时间，这里点击5次F9键，直接运行到读取TracerPid那行的内容的fgets断点处，如下所示：
看到关键的内容TracerPid字段了，这时候打开Hex View查看16进制的内存数据，如下所示：
但是看到，这并没有和调试页面View位置相对应，查看数据很费劲，所以可以这么操作，在寄存器窗口查看到R0寄存器的内容，如下所示：
这里就是TracerPid字段在内存的地址，记录一下，然后在Hex View页面中使用G键，进行跳转，一定要注意是在HexView，而不是调试页面，调试页面使用G键跳转到的是指令地址了，如图24-20所示。
图24-20 Hex View页面
这里看到TracerPid的内存内容了，就开始修改吧，选择要修改的内容：是11340那里，如图24-21所示。
图24-21 修改寄存器值
选择内容开始处，右击，选择Edit，进入修改状态，如下所示：
改了之后的内容是橘黄色的，修改完成之后，再点击右键，选择Apply changes，如图24-22所示。
完成修改，颜色变成灰土色了，如下所示：
注意：这里其实还可以直接修改寄存器R0的值，如图24-23所示。
图24-22 保存设置
图24-23 直接修改寄存器值
这时候就修改成功了，继续使用F8键单步调试下去，如下所示：
到这里就开始把TracerPid字段的值和0进行比较了，点击R0寄存器查看全部内容，如下所示：
这里的值已经被改成了0，所以就骗过去了。继续运行会发现，又进入了fopen函数的断点处，而且查看还是读取status文件。这个也不好奇，因为反调试检测肯定是一个轮询机制，所以肯定会反复地读取这个文件，fopen走多次也是正常的，但是这个反调试肯定是在子线程的，所以只要到了主线程中解密dex文件肯定到了dvmDexFileOpenPartial，这里会多次重复上面的操作，修改多次TracerPid的值。这里就不演示了。在操作的过程中修改了三次，当没有走fopen函数的时候，遇到了这个错误，这里不用关心，直接点击OK就可以了，如图24-24所示。
图24-24 警告对话框
再次点击运行，如下所示：
这里说明已经开始解密dex文件了，应该离成功不远了，继续运行，如下所示：
终于到了想要的地方了，到这里就好办了，直接点击Shirt+F2键，打开脚本运行窗口，运行下面脚本，如图24-25所示。
图24-25 运行脚本
把内存中的dex保存到F：\dump.dex中。这里R0寄存器就是dex在内存中的起始地址，R1寄存器就是dex文件的大小，如图24-26所示。
图24-26 查看dex文件的起始地址和文件大小
使用G键，可以在HexView页面中查看R0寄存器中的地址内容，如下所示：
这里就是dex的头文件格式。
得到了内存中的dex数据之后，可以使用baksmali工具转化成smali源码，查看代码逻辑即可，这里不再演示了。最后还有一步：还原apk。下一节介绍。
24.3 如何还原应用
首先修改反编译之后的AndroidManifest.xml中的内容：
把这段内容删除，如果有自己的Application的话，就改成自己的Application即可，同时删除assets目录下面的文件。然后使用apktool进行回编译，这时候，先不要着急签名apk，而是替换classes.dex，把上面得到的dump.dex改成classes.dex然后直接用压缩软件，替换未签名的apk中的dex文件即可，最后再进行签名操作，完成还原apk工作。
24.4 脱壳经验总结
到这里算是脱壳成功了，下面总结脱壳流程。
在脱壳的过程中，就一个目标：dump出内存中的dex文件。但是在上面分析了加固流程之后，发现它做了这些事：把源程序apk加密处理放到了assets目录下的ijiami.dat，也同时在assets\ijm_lib目录下添加两个so文件libexec.so和libexecmain.so，这里两个so文件用来处理整个apk解密，动态加载等逻辑，但是用IDA查看得知，这两个so文件被加密处理了。
首先，添加自己的壳Application即SuperApplication类，这个类中的attachContext方法中，首先把assets目录中的两个so文件copy到应用的files目录下，然后使用System.load方法，加载这个files目录中的两个so文件。
然后，在给dvmDexFileOpenPartial下断点进行调试的时候，发现有反调试检测，因为无法给JNI_OnLoad下断点来去除反调试功能的arm指令，所以只能去修改内存数据，把TracerPid的值变成0，骗过检测了。这里的思路就是给fopen和fgets这两个函数下断点，因为反调试的原理就是读取本进程的status文件，然后获取TracerPid那行内容即可，所以这里肯定用到了fopen和fgets函数，在使用fgets这个函数的时候，会读取每行内容，那么我们只要发现在读取到TracerPid那行内容的时候，去修改内存值，把TracerPid字段的值改成0即可。
有了上面的反调试思路之后，就开始进行操作了，但是在操作的过程中发现多次执行了fopen和fgets函数，而且需要修改多次TracerPid的值，原因很简单，因为是反调试检测，肯定是在子线程中轮询去检测这个值，会执行多次很正常，所以要修改多次TracerPid的值，骗过检测，直到当在主线程中，代码运行到了解密dex文件的时候，即到了dvmDexFileOpenPartial函数处的断点处为止。
最后修改多次TracerPid值，骗过检测，到了dvmDexFileOpenPartial这里，这时候，再执行dump脚本，把内存中的dex数据dump到本地即可。
通过上面的调试和破解流程其实不难发现，加密的流程是这样的：
1）fopen——/proc/self/cmdline.debug.atrace.app_cmdlines。
2）fgets——com.droider.crackme0201。
3）dvmLoadNativeCode——加载libexec.so。
4）dvmLoadNativeCode——加载libexecmain.so。
5）建立反调试线程（通过检查是否存在调试进程）。
6）调用fopen——打开/proc/pid/status。
7）调用fgets——读取调试进程pid。
这里除了dvmDexFileOpenPartial函数，还有一个重要的函数dvmLoadNativeCode，它是加载和初始化so的函数，感兴趣的读者可以去给这个函数下断点看看运行逻辑。
所以只需记住目的只有一个：到达dvmDexFileOpenPartial函数处，dump出内存中的dex文件，就算是完成脱壳工作了。
24.5 本章小结
本章用案例介绍如何脱掉某平台加密的壳，其实现在各个加固平台的原理都差不多，最后看到的就是各家的加固算法了，所以在脱壳的过程中目标也很明确，就是dump出内存中的dex文件即可。不管它上层用什么样的复杂的加密拆分操作，到了内存肯定是完整的dex文件，所以现在加固平台的应对方法也是一个思想，就是不让你dump出来，就是让你给dvmDexFileOpenPartial函数下断点失败，调试失败。
第25章 Android中常见漏洞分析
前几章介绍了Android开发中需要注意的安全问题以及如何做逆向工作，但是有时候光有这些知识还不够做到百分百安全，因为一个系统必定会有一些漏洞，而这些漏洞如果被恶意利用，也是非常危险的。本章介绍开发中比较常见的两个漏洞：文件解压漏洞和录屏功能漏洞。
25.1 解压文件漏洞分析
25.1.1 漏洞场景
Android开发过程中会有很多场景中使用到解压缩文件，比如动态加载，可能需要下载apk/zip文件，然后在本地做解压工作。还有一些资源在本地占用apk包的大小，就也打包成zip放到服务端，使用的时候再去服务端下载，本地做解压工作。在Android中解压zip文件，使用的是ZipInputStream和ZipEntry类，代码如下所示：
代码看上去很简单，但是这段代码中存在一个问题，就是zipEntry.getName方法，这个方法返回的是zip文件中的子文件名称，按照正常逻辑，解压这个子文件到本地都是直接用相同的名字即可，但是这里解压zip文件存在一个漏洞：zip文件中的子文件名格式没有格式要求，也就是可以包含特殊字符。但是在PC系统中文件名是有限制的，比如Windows中，如图25-1所示。在Linux中，如图25-2所示。
图25-1 Windows中文件命名限制
图25-2 Linux中文件命名限制
这些系统中是不允许文件名包含一些特殊字符的，而在ZipInputStream/ZipOutput-Stream类却是可以的。
也就是说使用ZipOutputStream类进行压缩文件，可以对文件名不做任何限制，压缩代码也简单：
只用ZipEntry类做单个文件压缩：
这里的ZipEntry可以指定随意的名称，而这个名称就是文件在zip文件中的文件名。那么如果zip包被人恶意的拦截，然后进行修改，这里可以使用ZipInputStream/ZipOutputStream类，写一个简单的小程序，就可以把恶意文件写入到zip中。
25.1.2 漏洞原因分析
因为文件名没有限制，所以攻击者可以把恶意文件名称命名为：../../../../data/data/xxx.xxx.x/hacker.dex，因为Android是基于Linux系统的，在Linux系统中../符号代表是回到上层目录，那么这里可以多写几个这个符号，这样就会回到Android系统的根目录，然后进入当前应用的沙盒目录下写一个文件了。当然这里只能写入本应用中，而不能写入其他应用。
存在的风险：比如现在知道了一个应用的沙盒数据的详细信息，一些隐私数据存放在SharedPreferences.xml中，或者有动态加载机制，需要加载的dex文件存放在一个目录中，这时可以利用这个漏洞，把几个恶意文件，命名改成../../../../data/data/xxx.xxx.xxx/shared_pref/info.xml，或者是../../../../data/data/xxx.xxx.xxx/dexfile/dynamic.dex。
这样在使用ZipEntry进行解压文件的时候，因为直接使用了ZipEntry.getName方法或者文件名，然后直接释放解压到本地了，所以就相当于替换了本应用的沙盒数据，这也是利用了App本身的权限来写入沙盒数据。
25.1.3 漏洞案例分析
上面分析完了漏洞，下面就用一个简单的例子来看看问题吧，从上面的分析知道，在本地系统中命名这样特殊格式的文件，在进行压缩成zip文件是不行的，因为系统不支持这种命名格式，所以这里需要写一个小程序，把这个特殊的文件名的文件压缩成zip，便于测试，然后再进行解压，如下所示：
先进行压缩文件，方便测试，产生一个demo.zip文件，然后再进行解压验证漏洞问题，这里验证问题的重点是：
这里把zip中需要解压的文件名前加上前缀：../../../data/data/cn.wjdiankong.androidzipleakdemo/这样解压之后的目录就在本应用的沙盒中了，注意../这样的符号不要太多，只要能回到根目录就可以了。
这里为了方便，直接使用echo命令，写入aaa内容到demo.txt文件中，然后点击压缩，再次查看，多了demo.zip文件：
这里就把zip中的恶意文件demo.txt释放到应用的沙盒中了，如果这个文件是dex或者其他文件，替换原来应用的一些重要文件，那么后果会很严重。
25.1.4 漏洞修复
上面了解到了漏洞产生的主要原因，由于ZipEntry在进行文件压缩时名称没有做任何限制，而在Android系统中../这种特殊符号代表的是回到上层目录，又因为这个解压工作在本应用中，可以借助App的自身权限，把恶意文件名改成：../../../data/data/...，即可在解压的时候把文件解压到了应用的沙盒中。
其实问题在于最后一步解压，因为不会去修改解压之后的文件名，默认都是直接解压即可。那么修复这个漏洞问题很简单了，有很多种方式，核心就是不要让有特殊字符，比如：../的文件成功解压，或者解压到本地文件名称不能包含这种特殊字符，代码如下：
上面分析了现在应用很多都有从服务端下载zip文件，然后在本地进行解压的功能，在解压的过程中默认不会去进行文件名的操作，所以就存在一些特殊字符的文件名被释放到了本地，从而产生安全问题。这里有一个前提，就是需要下载的zip文件被攻击者拦截到了，并且替换了。那么如果在下载的过程中就做一层安全其实也是可以的，比如使用HTTPS协议，然后再结合文件的MD5比对功能，就可以防止zip包被人拦截替换了。本地也就不会存在这样的风险了。
现在Android中动态加载技术和插件化开发已经很普遍了，但是在下载这个阶段一定要做好防护工作。如果你的项目现在正好有解压zip的功能，请尽快去审查一下项目中解压有没有做防护，没有的话就尽快加上吧！
25.1.5 漏洞总结
本章前面介绍了一个不起眼的漏洞，但是隐藏着很严重的问题，这个漏洞主要是因为如下几点综合产生的：
·ZipEntry对压缩文件名没有特殊要求。
·在Android系统中../特殊字符代表着回到上级目录。
·借助本应用的权限，把数据写入沙盒中。
关于这个漏洞的修复，Google一直没有做，只是在API中做了提醒：
可以看到Google对该方法给出了一个安全提示，提示开发者如果该方法的返回值中包含有“../”跳转符，需要特别注意不要将文件写到了目标文件夹之外。如果不对“../”跳转符做过滤，就有可能遍历目录，在解压zip文件时以本App的权限覆盖任意文件。
项目下载：http://download.csdn.net/detail/jiangwei0910410003/9594958
25.2 录屏授权漏洞分析
25.2.1 漏洞场景
在Android 5.0中新增了一个API来进行录制屏幕视频。在当今直播和游戏那么火的时代，录制也是非常不错的功能，现在很多应用就是利用这个API来做到游戏的录制效果的。在使用这个API的时候，系统会给一个授权提示，如图25-3所示。
图25-3 屏幕录制授权提示
这个对话框是系统弹出来的提示消息，主要由两部分组成，应用的名称+提示文案，看似是一个很平常的授权对话框，但是这背后却有一个很大的界面漏洞，危险性很大。当应用被授权了，那么就代表这个应用可以监听用户设备的屏幕信息。
Android系统中在弹出对话框的时候，如果内容过多，会采用滚动样式，来展示全部消息，而不是使用字符省略的方式。那么就存在一个问题，如果把应用的名称故意弄的很长，导致后面一段提示文案“将开始截取您的屏幕上显示的所有内容”给抵到底部，只有滑动的时候才能看到，这样来骗取用户点击“立即开始”。同时再把应用的名称改成一些银行或者是社交账号，支付应用的提示文案，比如：“××宝新增了特性...点击立即开始，即可体验！”，用户如果相信就开始点击了。当然这里还需要一个功能，就是监听系统的TopActivity，当监听到用户打开了银行App或者是社交App的时候，就去申请权限，弹出对话框！
下面通过MediaProjectionManager源码来分析一下，授权提示流程：在使用录制屏幕功能的时候，去授权页面调用的是createScreenCaptureIntent方法，获取授权Intent：
这里调用的是MediaProjectionPermissionActivity来进行授权：
这里直接用系统对话框展示了。
下面就来演示一个例子，比如现在恶意软件在后台监听到了用户启动了某某应用，然后就启动授权界面，如图25-4所示。
图25-4 恶意应用的授权界面
恶意App的名称为：
这就看到了提示信息，与打开银行App时给的提示信息很类似，用户会感觉很正常，如图25-5所示。一般弹出的提示对话框，用户不会去滑动看到底部，而关键提示信息就在底部。
图25-5 恶意App授权界面
如果用户点击“立即开始”就相当于授权了，那么恶意App就在后台偷偷录制你的屏幕，当你输入账号和密码的时候也会被记录，再把录制App发到服务端进行分析，账号就会被盗取！