session[:return_to] = controller.params[:return_to]  
2. Accessing a route without being logged-in. In this case Clearance automatically redirects 
the user to the login page and sets the session[:return_to] variable to the 
requested path. 
Given these conditions, if a malicious actor is able to convince a user to press on a specifically 
crafted URL of the following form, they could trigger the open redirect vulnerability: 
claroty.com
27
Copyright © 2021 Claroty Ltd. All rights reserved
http://www.victim.com/////evil.com
Since Rails ignores multiple slashes in the URL, the path segment will arrive in its entirety to be parsed in Clearance 
(/////evil.com). Since URI.parse trims off two slashes, the resulting URL will be ///evil.com.
As we’ve seen above, whenever the server redirects the user to this URL, ///evil.com, the browser will convert this network-
path relative reference to the absolute http://evil.com URL pointing to the evil.com domain (host).
BUT ISN’T THE BROWSER THE REAL CULPRIT?
We can all agree that ///evil.com is not a RFC compliant URL, some could even go as far as to say it is an invalid URL. 
However, we see that Google Chrome and the Chromium Project treat it as a valid URL and handle it the same way it would 
handle normal URLs such as http://evil.com .
When we checked the Chromium Project, we noticed that it supports such URLs, and when we looked deeper into the code, 
we found comments directly specifying that Chromium supports broken and malformed URLs.
In order to understand why most browsers act this way, we need to go into the past. Apparently, browsers were always 
more lenient when it came to parsing URLs. In order to be a robust browser that works in most scenarios and user inputs, 
browsers had to “forgive” developers’ mistakes, and were forced to accept imperfect, non RFC-compliant URLs. For example, 
since omitting/adding slashes is a common mistake, browsers choose to ignore missing/extra slashes.
So, to conclude: ///evil.com will be treated by browsers as an absolute URL [http://evil.com] because browsers were built 
to simply work and to accept a wide range of URLs. This is an example of how treating relative path URLs differently in the 
app and in the browser can lead to undesired consequences.
http://www.target.com/////evil.com
Since Rails ignores multiple slashes in the URL, the path segment will arrive in its entirety to be 
parsed in Clearance (/////evil.com). Since URI.parse trims off two slashes, the resulting 
URL will be ///evil.com.
As we’ve seen above, whenever the server redirects the user to this URL, ///evil.com, the 
browser will convert this network-path relative reference to the absolute http://evil.com URL
pointing to the evil.com domain (host).
But isn’t the Browser the Real Culprit?
We can all agree that ///evil.com is not a RFC compliant URL, some could even go as far as to 
say it is an invalid URL. However, we see that Google Chrome and the Chromium Project treat 
it as a valid URL and handle it the same way it would handle normal URLs such as 
http://evil.com .
When we checked the Chromium Project, we noticed that it supports such URLs, and when we 
looked deeper into the code, we found comments directly specifying that Chromium supports
broken and malformed URLs.
This comment from Chromium Project code explains how Chromium accepts malformed URLs.
In order to understand why most browsers act this way, we need to go into the past. Apparently,
browsers were always more lenient when it came to parsing URLs. In order to be a robust
browser that works in most scenarios and user inputs, browsers had to “forgive” developers’
mistakes, and were forced to accept imperfect, non RFC-compliant URLs. For example, since 
omitting/adding slashes is a common mistake, browsers choose to ignore missing/extra slashes.
So, to conclude: ///evil.com will be treated by browsers as an absolute URL [http://evil.com]
because browsers were built to simply work and to accept a wide range of URLs. This is an 
example of how treating relative path URLs differently in the app and in the browser can lead to 
undesired consequences.
This comment from Chromium Project code explains how Chromium accepts malformed URLs. 
claroty.com
28
Copyright © 2021 Claroty Ltd. All rights reserved
BELLEDONNE’S LINPHONE SIP STACK
CVE-2021-33056: Denial of Service
Linphone is a free voice-over-IP softphone, SIP client and service. It may be used for audio and video direct calls and calls 
through any VoIP softswitch or IP-PBX. Under the hood, Linphone uses the belle-sip component for handling low-level SIP 
message parsing. 
Session Initiation Protocol (SIP) is a signalling protocol used for initiating, maintaining, terminating and modifying real-
time sessions between two or more IP-based endpoints that involve voice, video, messaging, and other communications 
applications and services. The SIP protocol and its extensions are defined across multiple RFCs including: RFC 3261,  
RFC 3311, RFC 3428, RFC 3515, RFC 3903, RFC 6086, RFC 6665, and others.
SIP is a text-based protocol with syntax similar to that of HTTP. There are two different types of SIP messages: requests and 
responses. The first line of a request has a method that defines the nature of the request, and a Request-URI, that indicates 
where the request should be sent. Then, many different SIP headers are specified, elaborating different parameters of the 
requests/response. Here is an example of a SIP message:
While looking into Belledonne’s SIP protocol stack, we noticed many references and code involving URL parsing.  
As it turns out, SIP is a URL scheme, supporting similar parsing primitives to HTTP URLs.
By looking into the URL parsing functionality of Belledone, we’ve found this piece of code parsing the SIP URL inside  
the To/From SIP headers:
Belledonne’s Linphone SIP Stack 
CVE-2021-33056: Denial of Service 
Linphone is a free voice-over-IP softphone, SIP client and service. It may be used for audio and 
video direct calls and calls through any VoIP softswitch or IP-PBX. Under the hood, Linphone 
uses the belle-sip component for handling low-level SIP message parsing.  
Session Initiation Protocol (SIP) is a signalling protocol used for initiating, maintaining, 
terminating and modifying real-time sessions between two or more IP-based endpoints that 
involve voice, video, messaging, and other communications applications and services. The SIP 
protocol and its extensions are defined across multiple RFCs including: RFC 3261, RFC 3311, 
RFC 3428, RFC 3515, RFC 3903, RFC 6086, RFC 6665, and others. 
SIP is a text-based protocol with syntax similar to that of HTTP. There are two different types of 
SIP messages: requests and responses. The first line of a request has a method that defines 
the nature of the request, and a Request-URI, that indicates where the request should be sent. 
Then, many different SIP headers are specified, elaborating different parameters of the 
requests/response. Here is an example of a SIP message: 
An example of a SIP invite message. 
While looking into Belledonne’s SIP protocol stack, we noticed many references and code 
involving URL parsing. As it turns out, SIP is a URL scheme, supporting similar parsing 
primitives to HTTP URLs. 
By looking into the URL parsing functionality of Belledone, we’ve found this piece of code 
parsing the SIP URL inside the To/From SIP headers: 
An example of a SIP invite message.
claroty.com
29
Copyright © 2021 Claroty Ltd. All rights reserved
As we can see in this piece of code, Belledone parses the SIP URL as a generic URL and checks if the scheme is either SIP or 
SIPs using strcasecmp, checking if the given URL is a SIP URL.
However, if we take a look into the URL parsing inconsistencies showcased above, we remember the scheme confusion, 
involving URLs missing a scheme. As it turns out, a Belledonne generic_uri accepts URLs created by the different URL 
components, without requiring specific components to be present. This means a URL containing only a path is a valid URL, 
while not having a URL scheme. Using this, we’ve supplied a URL containing only a single slash (/), resulting in the URL’s 
scheme being NULL. Then, when Belledone uses strcasecmp, it compares a NULL pointer (because no scheme was 
supplied) resulting in a NULL pointer dereference and the application’s crash.
The vulnerable payload could be seen in the following SIP message:
Using this malicious URL, we were able to create an exploit resulting in crashing any remote user’s application, requiring 
zero interaction from the attacked user as the vulnerability being triggered upon a malicious VoIP call.
The code parses the To/From SIP URLs inside the Belledone’s SIP protocol stack. 
As we can see in this piece of code, Belledone parses the SIP URL as a generic URL and 
checks if the scheme is either SIP or SIPs using strcasecmp, checking if the given URL is a 
SIP URL. 
However, if we take a look into the URL parsing inconsistencies showcased above, we 
remember the scheme confusion, involving URLs missing a scheme. As it turns out, a 
Belledonne generic_uri accepts URLs created by the different URL components, without 
requiring specific components to be present. This means a URL containing only a path is a valid 
URL, while not having a URL scheme. Using this, we’ve supplied a URL containing only a single 
slash (/), resulting in the URL’s scheme being NULL. Then, when Belledone uses 
strcasecmp, it compares a NULL pointer (because no scheme was supplied) resulting in a 
NULL pointer dereference and the application’s crash. 
The vulnerable payload could be seen in the following SIP message: 
A malicious SIP message, containing a malicious URL in the From header, results in a NULL pointer 
dereference and the application’s crash. 
Using this malicious URL, we were able to create an exploit resulting in crashing any remote 
user’s application, requiring zero interaction from the attacked user as the vulnerability being 
triggered upon a malicious VoIP call. 
The code parses the To/From SIP URLs inside the Belledone’s SIP protocol stack. 
As we can see in this piece of code, Belledone parses the SIP URL as a generic URL and 
checks if the scheme is either SIP or SIPs using strcasecmp, checking if the given URL is a 
SIP URL. 
However, if we take a look into the URL parsing inconsistencies showcased above, we 
remember the scheme confusion, involving URLs missing a scheme. As it turns out, a 
Belledonne generic_uri accepts URLs created by the different URL components, without 
requiring specific components to be present. This means a URL containing only a path is a valid 
URL, while not having a URL scheme. Using this, we’ve supplied a URL containing only a single 
slash (/), resulting in the URL’s scheme being NULL. Then, when Belledone uses 
strcasecmp, it compares a NULL pointer (because no scheme was supplied) resulting in a 
NULL pointer dereference and the application’s crash. 
The vulnerable payload could be seen in the following SIP message: 
A malicious SIP message, containing a malicious URL in the From header, results in a NULL pointer 
dereference and the application’s crash. 
Using this malicious URL, we were able to create an exploit resulting in crashing any remote 
user’s application, requiring zero interaction from the attacked user as the vulnerability being 
triggered upon a malicious VoIP call. 
A malicious SIP message, containing a malicious URL in the From header,  
results in a NULL pointer dereference and the application’s crash.
The code parses the To/From SIP URLs inside the Belledone’s SIP protocol stack.
claroty.com
30
Copyright © 2021 Claroty Ltd. All rights reserved
Proof-of-concept exploit: Remotely crashing a SIP client. This picture shows the application running as usual 
prior to executing the exploit. 
Here, our PoC crashes the Belledone’s SIP stack application, returning the user to the homescreen. 
Proof-of-concept exploit: Remotely crashing a SIP client. This picture shows the application running as usual 
prior to executing the exploit. 
Here, our PoC crashes the Belledone’s SIP stack application, returning the user to the homescreen. 
Proof-of-concept exploit: Remotely crashing a SIP client. This picture shows the application running as usual 
prior to executing the exploit.
Here, our PoC crashes the Belledone’s SIP stack application, returning the user to the homescreen.
claroty.com
31
Copyright © 2021 Claroty Ltd. All rights reserved
CONCLUSION
VULNERABILITIES
Throughout our research on URL parsers, we found many vulnerabilities in different languages. Here are the eight 
vulnerabilities that were identified as part of our research:
1) Flask-security (Python, CVE-2021-23385)
2) Flask-security-too (Python, CVE-2021-32618)
3) Flask-User (Python, CVE-2021-23401)
4) Flask-unchained (Python, CVE-2021-23393)
5) Belledonne’s SIP Stack (C, CVE-2021-33056)
6) Video.js (JavaScript, CVE-2021-23414) 
7) Nagios XI (PHP, CVE-2021-37352)
8) Clearance (Ruby, CVE-2021-23435)
RECOMMENDATIONS
Many real-life attack scenarios could arise from different parsing primitives. In order to sufficiently protect your application 
from vulnerabilities involving URL parsing, it is necessary to fully understand which parsers are involved in the whole 
process, be it programmatic parsers, external tools, and others.
After knowing each parser involved, a developer should fully understand the differences between parsers, be it their 
leniency, how they interpret different malformed URLs, and what types of URLs they support.
As always, user-supplied URLs should never be blindly trusted, instead they should first be canonized and then validated, 
with the differences between the parser in use as an important part of the validation.
In general, we recommend following these guidelines when parsing URLs:
claroty.com
32
Copyright © 2021 Claroty Ltd. All rights reserved
TRY TO USE AS FEW DIFFERENT PARSERS AS POSSIBLE
We recommend you to avoid using a URL parser at all, and it is easily achievable in many cases. As an example we can think 
about the redirect feature often implemented as part of the login/register form. As we’ve seen, such forms often implement 
a returnTo value or a query parameter to redirect the user to after a successful action, however this returnTo value 
often becomes a source of open redirect vulnerabilities. In many programming languages and frameworks you can avoid 
using a URL parser in this case by using the controller and action name or identifier for the redirect.
For example, in the Ruby on Rails framework you can replace vulnerable redirect_to(params[:return_to]) which 
trusts user input, to a safer solution such as redirect_to :controller => params[:controller_from],:action 
=> params[:action_from] which redirects to the URL created according to the routes configuration. If the route for 
controller_from or action_from does not exist – users will simply receive ActionController::UrlGenerationError 
error, which is fine in terms of security.
In the case of needing to parse and fetch a URL, a single parsing library should be used, such as libcurl which offers 
both URL parsing and URL fetching. By using a single parser for both actions, you will be reducing the risk of each parser 
understanding the URL differently, negating most URL parsing confusion.
TRANSFER A PARSED URL ACROSS MICROSERVICE ENVIRONMENT
Another example of how developers can find themselves using multiple URL parsers would be in popular microservice 
architectures. If microservices are implemented in different frameworks or programming languages, they will likely use 
different URL parsers. Imagine a situation where one microservice validates a URL and another uses the same URL to 
perform a request. This scenario can lead to an SSRF vulnerability in your application, which is not easy to identify because 
usually static analysis tools analyze each microservice independently.
To avoid this problem you can simply parse a URL at the front-end microservice and transfer it further in its parsed form. 
Generally, this advice is similar to the previous one, but we think it is important to show that using as few different parsers 
as possible–indeed a good option.
UNDERSTAND DIFFERENCES IN PARSERS INVOLVED WITH APPLICATION BUSINESS LOGIC
We understand that in some cases it is impossible to avoid using multiple URL parsers in one project. As a good example, 
in PHP we often use cURL to perform external requests. cURL uses a WHATWG compliant parser, but the PHP parse_url 
function uses RFC 3986 as its reference. The code snippet below is meant to block requests to example.com, but the if 
condition can be bypassed by specifying a URL without a schema (see schema confusion). In the RFC 3986 (parse_url) case 
the host will be empty, but WHATWG (cURL) will resolve it to a full URL with the default schema HTTP.
claroty.com
33
Copyright © 2021 Claroty Ltd. All rights reserved
In this case, the right solution is simply to check if the host returned by parse_url is not empty as well as not example.com. 
But generally, as mentioned above, developers need to be aware about differences in parsing behaviors.
ALWAYS CANONICALIZE THE URL BEFORE PARSING
The Clearance Ruby gem example mentioned earlier was fixed by stripping down leading slashes from the relative path 
provided by the user, and by doing that Clearance is canonicalizing the URL and removing excess parts. We observed a lot 
of different code snippets to cut extra slashes in Ruby like: uri.path.chomp(‘/’), uri.path.sub(/\/$/, ‘’), 
uri.path.sub(/\A\/+/, “/”) and so on. 
This is a special case for the Ruby on Rails web framework since the routing logic of the framework ignores leading slashes, 
which means that both http://my-host.com/test and http://my-host.com////test are valid URLs and point 
to the same controller and action. Although slashes are ignored by the router, the URL remains the same for the client and 
backend sides, which means both request.fullpath and window.location.pathname will return ////test for the 
second example. As was shown above, this behavior can cause an Open Redirect vulnerability and it is not unique for Ruby 
(we’ve seen similar cases in Python’s Django web framework and others).
So, it is important to remove multiple forward/backward slashes, white-spaces and control characters and to properly 
canonicalize a URL before parsing it.
In this case, the right solution is simply to check if the host returned by parse_url is not empty as 
well as not example.com. But generally, as mentioned above, developers need to be aware 
about differences in parsing behaviors.
Always Canonicalize the URL Before Parsing
The Clearance Ruby gem example mentioned earlier was fixed by stripping down leading 
slashes from the relative path provided by the user, and by doing that Clearance is 
canonicalizing the URL and removing excess parts. We observed a lot of different code snippets 
to cut extra slashes in Ruby like: uri.path.chomp('/'), uri.path.sub(/\/$/, ''),
uri.path.sub(/\A\/+/, "/") and so on.
This is a special case for the Ruby on Rails web framework since the routing logic of the 
framework ignores leading slashes, which means that both http://my-host.com/test and 
http://my-host.com////test are valid URLs and point to the same controller and action.
Although slashes are ignored by the router, the URL remains the same for the client and 
backend sides, which means both request.fullpath and window.location.pathname
will return ////test for the second example. As was shown above, this behavior can cause an 
Open Redirect vulnerability and it is not unique for Ruby (we’ve seen similar cases in Python’s 
Django web framework and others).
So, it is important to remove multiple forward/backward slashes, white-spaces and control
characters and to properly canonicalize a URL before parsing it.
Copyright © 2021 Claroty Ltd. All rights reserved