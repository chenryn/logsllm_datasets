This policy is to constrain the border nodes, which are indirect
transfers whose targets cannot be statically determined from Super-
CFGs. Based on the transfer types, we apply the following policies.
i Indirect call nodes can only reach root nodes that represent the
entry points of ICFs.
ii Indirect return nodes can only go back to the border nodes that
represent indirect call sites.
333
main:
1: movl bar, %eax  
2: call *%eax      
3: call foo                             
4: ret                                
foo:
5: movl qux,%eax
6: call *%eax
7: ret              
bar:
8: movl foo, %ebx 
9: call *%ebx 
10: movl $1, %eax
11: ret 
original functions
qux:
12:movl $0,%eax
13:ret
start:
movl main,%eax
call *%eax
hlt
foo': (duplicated from foo)
5': movl qux, %eax
6': call *%eax
7': ret              
icall
2
1
3
4
ret
5
icall
6
7
ret
icall
9
10
11
ret
8
7'
ret
12
13
ret
Figure 2: Code Continents Sample
duplicated function
5'
6'
iii Indirect jump nodes, whose targets cannot be resolved by static
analysis, can go to either root nodes or border nodes that repre-
sent call sites.
The policies are enforced based on the following insights. After
the functions are partitioned into two mutually exclusive sets, an
ICF can only be called by indirect call instructions (i), and due
to this, indirect returns from an ICF will only go back to indirect
call sites (ii). Indirect jumps normally have associations with jump
tables, where their targets can be determined by static analysis, but
there may be some indirect jumps whose targets cannot be known
statically. Their targets should be constants present in the binary,
and they can either be the entries of ICFs or call sites (iii).
For the sample above, the root nodes are entry nodes of ICFs (1,
5, 5’, 8 and 12), the border nodes contain indirect call nodes (2,
6 and 9) and indirect return nodes (4, 11, 13 and 7’). In BinCC,
the indirect call nodes (2, 6 and 9) are permitted to call the ICFs
(1, 5, 5’, 8 and 12). The indirect returns (4, 11, 13 and 7’) are
allowed to return back to indirect call sites (2, 6 and 9).
4. CODE CONTINENT CONSTRUCTION
To construct code continents, we identify all the DCFs and ICFs
in the binary, and then perform control ﬂow analysis to compute
the CFGs of those functions, which helps determine what functions
we need to duplicate and also to compute Super-CFGs. After the
code duplication, we ﬁnally construct the code continents based on
Super-CFGs. We now discuss these phases.
4.1 DCF Identiﬁcation
Each DCF is called through a relative call. The function entry’s
address could be computed through the relative call instruction’s
address and operand value. Through this, we identify all the direct
call sites from the disassembly to obtain all the DCFs.
4.2
ICF Identiﬁcation
ICF identiﬁcation is based on the observation that the address of
an ICF stems from the constants in the binary. We search for any
constant that could be used to represent or to compute a function’s
address.
In binaries that contain relocation tables, the table entries, which
are constants, cover the addresses of ICFs. We check whether the
sum of the each constant with the code base address is present in the
code section. If so, this sum is resolved as the address of an ICF. In
binaries that contain no relocation tables, we scan the binary for the
constants and handle it differently for non-PIC and PIC modules.
For a non-PIC module, we use a integer-sized window (e.g., 4-
byte in 32-bit systems) to scan the constants within the data, .ro-
data, .init_array, exported symbol sections and any other sections
possibly containing integers representing valid code addresses. We
also collect constants used within the code section. By consulting
the disassembly, if the constant or the sum of the constant and the
code base is a valid code address and meets one valid instruction’s
boundary, we considered it as a constant function pointer candidate.
For a PIC module, functions can be reached by PC thunks. There-
fore, in addition to performing the same approach as for non-PIC
modules to collect constants, we identify all the PC thunks and see
whether they are used to have access to functions. If so, we consid-
er those functions as constant function pointer candidates.
Note that not all obtained candidates are function entry points.
Some constants are actually the addresses of case branches in a
switch-case jump table. Case branches are within a function and
cannot be function entries. Some candidates are actually the ad-
dresses of some return call sites but not function entry points. So
we remove these two kinds of constants from the candidates, and
the remaining are the ﬁnal ICFs.
4.3 Control Flow Analysis
We perform static control ﬂow analysis to compute the CFGs of
all the functions, which are composed of identiﬁed ICFs and DCFs.
Our analysis is launched in a conservative way. We try to identify
all possible targets for each indirect branch. The main difﬁculty is
resolving the possible targets of indirect jumps. In most common
cases, an indirect jump is used to dispatch execution from a jump
table, and all legitimate targets of this jump are the corresponding
case branches, which can be identiﬁed by the previously discovered
constants. Therefore, for an indirect jump, we check whether or not
it is associated with a jump table and connect it to the corresponding
case branches if so. As BinCFI is able to perform this, we reuse that
component to get the desired result to help construct CFGs.
4.4 Code Duplication
As discussed earlier, to enforce our policy, we duplicate ICF-
s that fall in the intersection of the ICFs and DCFs. However, in
some cases, due to compiler’s optimizations, some ICFs are like-
ly to have common returns with DCFs, and each of those returns
cannot be given a clear transfer type (either Intra or Inter), which
violates our CFI policy. To resolve this issue, if an ICF has common
returns with a DCF, as determined by referencing these two func-
tions’ CFGs, we also duplicate this ICF. The duplicated function
will become a new ICF in the binary.
After identifying the functions to be duplicated, we duplicate all
334
the instructions in their CFGs. All the duplicated code and the orig-
inal code are put into a new code section after being instrumented
with CFI policy (discussed at Section 5). The original code section
is marked non-executable and all existing data sections are kept un-
changed. The constants with duplicated instructions are unchanged
as well, so the values in the data sections are still accessed correctly.
Additionally, in the duplicated functions, we need to ﬁx up the
operand values of relative calls and jumps. For relative calls, the
operands are adjusted to simulate the call instructions of the orig-
inal version of the function. Similarly, for relative jump instruc-
tions, the operands are adjusted to jump to the corresponding target
branches in the duplicated function.
4.5 Code Continent Construction
Code continents are constructed from the Super-CFGs of func-
tions. Algorithm 1 shows how we compute a function’s Super-
CFG. We search the function’s CFG for direct calls, and at a di-
rect call site we add the callee’s Super-CFG into the graph through
AddSuperCF G. This function introduces two new edges, one be-
ing from the the direct call site(i.e., node i) to the callee’s entry, and
the other being from the callee’s return to the direct call site.
Algorithm 1 SuperCF G(CF Gf unc): Compute f unc ’s Super-
CFG based on its CFG
Input: CF Gf unc : the CFG of the function f unc
Output: sg: the super-graph of f unc
1: sg ⇐ CF Gf unc
2: for each i ∈ N odes(CF Gf unc) do
3:
4:
end if
5:
6: end for
7: return sg
sg = AddSuperCF G(sg, i, SuperCF G(f ))
if i is a direct call to f then
Algorithm 2 shows how we construct code continents and classi-
fy nodes in code continents. The algorithm takes all ICFs as input.
It computes Super-CFGs of each ICF and then merges these Super-
CFGs based on their common edges (e.g., the common callees),
which is achieved by M ergeGraph. The algorithm ﬁnally pro-
duces the set of mutually exclusive code continents, with root n-
odes, border nodes and inner nodes classiﬁed in each code conti-
nent. From the algorithm we see that the nodes are classiﬁed based
on the types of nodes of Super-CFGs that compose a code continen-
t. The root nodes comes from the entry points of ICFs in the current
continent. The border nodes comes from the nodes representing in-
direct calls(icall), indirect returns(iret) and indirect jumps whose
targets are not statically determined(ijmpu). The inner nodes are
composed by the nodes representing non-control ﬂow instructions
and control ﬂow transfers whose targets are determined (e.g.,direct
calls, direct returns) in the current continent.
There is one corner case that we need to consider. There might be
orphaned code pieces, which are not ever reached by static control
ﬂow analysis, for instance, unresolved target branches for indirect
jumps or dead code. We need to restrict the indirect transfers in
such code pieces as they may be invoked at runtime. To achieve
this, we also generate a code continent, denoted as an orphaned
code continent, for each of them. An orphaned code continen-
t is composed by the Super-CFG of a orphaned code piece, and
the Super-CFG is constructed by applying Algorithm 1 by con-
sidering the instructions of the code piece as its "CFG"(which is
CF Gf unc). Also, ibrnch of the Super-CFG(i.e.,sg.ibrnch), com-
posed by icall, iret and ijmpu, are border nodes, and inn of the
Super-CFG(i.e.,sg.inn) are inner nodes. Considering that an or-
phaned continent is not discovered as a function and thus cannot be
invoked by a call, we assign the entry of an orphaned continent as
a border node, instead of a root node.
if i is a icall or a ijmpu or a iret then
sg = SuperCF G(CF Gicf ); sg.ent = icf.entry
for each i ∈ N odes(sg) − sg.ent do
sg.ibrnch = sg.ibrnch ∪ {i}
sg.inn = sg.inn ∪ {i}
Algorithm 2 ConstructCC(ICF s): Construct Code Continents
by taking ICFs as input
Input: all the ICFs: ICF s;
Output: all the code continents: CC
1: CC ⇐ φ; SG ⇐ φ; SGdone ⇐ φ
2: for each icf ∈ ICF s do
3:
4:
5:
6:
7:
8:
9:
10:
11:
12: end for
13: for sg ∈ SG − SGdone do
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28: end for
29: return CC
cccur = sg; SGdone = SGdone ∪ {sg}
cccur.border = cccur.border ∪ {sg.ibrnch}
cccur.inner = cccur.inner ∪ {sg.inn}
cccur.root = cccur.root ∪ {sg.ent}
for sg
(cid:4)
if HasCommonEdges(cccur, sg
) then
(cid:4)
)
cccur = M ergeGraph(cccur, sg
cccur.border = cccur.border ∪ {sg
.ibrnch}
(cid:4)
cccur.inner = cccur.inner ∪ {sg
.inn}
(cid:4)
cccur.root = cccur.root ∪ {sg
.ent}
SGdone = SGdone ∪ {sg
end if
end for
CC = CC ∪ {cccur}
(cid:4) ∈ SG − SGdone do
else
end if
end for
SG = SG ∪ {sg}
(cid:4)
(cid:4)}
5. CFI ENFORCEMENT
After code continent construction, we perform instrumentation
on different nodes in the continents to enforce our CFI policy. This
is implemented on top of BinCFI, so we brieﬂy describe the basic
instrumentation structure BinCFI provides and then give details on
our enforcement.
5.1 Basic Infrastructure
BinCFI instruments the disassembly and inserts the instrument-
ed code into a new code section with making the original code sec-
tion non-executable. It uses address pairs of the form  to associate the new locations in the instrumented code
with their corresponding original locations. Speciﬁcally, BinCFI
generates address pairs for all indirect transfer targets and main-
tains them in two different address translation hash tables, one for
returns and the other for indirect jumps and calls. All address trans-
lation tables are read-only.
BinCFI instruments indirect calls/jumps and returns. For the
indirect jumps associated with jump tables, their operands are re-
placed by expressions of the form *(CE1+Ind)+CE2, where CE1
and CE2 are constants, and CE1 indicates the jump table associ-
ated, and *(CE1+Ind) indicates all possible case branches. Also,
BinCFI introduces a new jump table based on every CE1, with
transformed case branches’ addresses inside. For the remaining in-
335
direct transfers, they are instrumented as shown in Figure 4. We
illustrate it by taking an indirect call as an example, the other in-
direct transfers are handled in the same way. Firstly the runtime
target(i.e.,%eax) is saved to a thread local variable(i.e.,%gs:0x40),
and then the control is transferred to a routine, addr_trans,
which performs checking and address translation.
call *%eax
movl %eax, %gs:0x40
jmp addr_trans
Figure 4: BinCFI’s instrumentation for indirect transfers,
shown by taking an indirect call as an example. Left is the o-
riginal instruction and right shows the instrumentation.
Figure 5 shows how addr_trans works.
In the routine, it
checks whether the transfer is against the CFI policy.
If not, it
performs the address translation. As %gs:0x40 stores the address
that falls in the original code section, namely, orig_addr, BinCFI
consults the relevant address translation table for the correspond-
ing translated address, namely, new_addr.
If found, it jumps to
new_addr. Otherwise, it calls the global lookup routine, which
helps address translation across different modules.
proc addr_trans:
check_cfi_policy(orig_addr) 
if invald: trigger_alert()
new_addr = find_trans_tgt(addr_trans_table, orig_addr)
if found: goto new_addr
else:  goto global_lookup_routine
Figure 5: Address Translation Routine in BinCFI.
The global lookup routine works by consulting the GTT (Global
Translation Table). For every loaded module, the GTT records the
relationship between the base address of the module and the ad-
dress of the module’s addr_trans. For the above example, the
global routine checks which module the address %gs:40 belongs to,
if no module is found in the GTT, an alert is triggered, and if found,
the control is transferred to that particular module’s addr_trans
routine which takes care of the address checking and translation
as mentioned above. The global lookup routine and the GTT are
added in the loader, and they will loaded at different memory ad-
dress every time. Also, the loader will update the GTT when a new
module is loaded during the runtime.
5.2 Our Instrumentation
We apply BinCFI’s infrastructure and make improvement over
BinCFI to enforce our CFI policy.
Extensions to Address Translation Tables.
To achieve our enforcement, we make two extensions to address
translation tables. Firstly, we introduce new table entries for the
newly introduced indirect transfer targets due to the code duplica-
tion, which are duplicated functions and the return call sites within