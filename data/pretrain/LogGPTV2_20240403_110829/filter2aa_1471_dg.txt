then checks whether Kernel Shims are globally disabled. In case the system
has booted in Safe or WinPE mode, or in case Driver verifier is enabled, the
shim engine wouldn’t be enabled. The Kernel Shim engine is controllable
also using system policies or through the
HKLM\System\CurrentControlSet\Control\Compatibility\DisableFlags
registry value. The NT kernel then gathers low-level system information
needed when applying device shims, like the BIOS information and OEM ID,
by checking the System Fixed ACPI Descriptor Table (FADT). The shim
engine registers the first built-in shim provider, named DriverScope, using
the KseRegisterShimEx API. Built-in shims provided by Windows are listed
in Table 10-21. Some of them are indeed implemented in the NT kernel
directly and not in any external driver. DriverScope is the only shim
registered in phase 0.
Table 10-21 Windows built-in kernel shims
Shi
m 
Na
me
GUID
Purpose
M
o
d
ul
e
Driv
erSc
ope
{BC04AB4
5-EA7E-
4A11-
A7BB-
977615F4C
AAE}
The driver scope shim is used to collect 
health ETW events for a target driver. Its 
hooks do nothing other than writing an ETW 
event before or after calling the original 
nonshimmed callbacks.
N
T 
ke
rn
el
Vers
ion 
Lie
{3E28B2D
1-E633-
408C-
8E9B-
2AFA6F47
FCC3} 
(7.1)
(47712F55-
BD93-
43FC-
9248-
B9A83710
066E} (8)
{21C4FB5
8-D477-
4839-
A7EA-
AD6918FB
C518} 
(8.1)
The version lie shim is available for 
Windows 7, 8, and 8.1. The shim 
communicates a previous version of the OS 
when required by a driver in which it is 
applied.
N
T 
ke
rn
el
Skip
Driv
erU
nloa
{3E8C2CA
6-34E2-
4DE6-
8A1E-
The shim replaces the driver’s unload 
routine with one that doesn’t do anything 
except logging an ETW event.
N
T 
ke
rn
d
9692DD3E
316B}
el
Zero
Pool
{6B847429
-C430-
4682-
B55F-
FD11A7B5
5465}
Replace the ExAllocatePool API with a 
function that allocates the pool memory and 
zeroes it out.
N
T 
ke
rn
el
Clea
rPCI
DBit
s
{B4678DF
F-BD3E-
46C9-
923B-
B5733483
B0B3}
Clear the PCID bits when some antivirus 
drivers are mapping physical memory 
referred by CR3.
N
T 
ke
rn
el
Kas
pers
ky
{B4678DF
F-CC3E-
46C9-
923B-
B5733483
B0B3}
Shim created for specific Kaspersky filter 
drivers for masking the real value of the 
UseVtHardware registry value, which could 
have caused bug checks on old versions of 
the antivirus.
N
T 
ke
rn
el
Mem
cpy
{8A2517C
1-35D6-
4CA8-
9EC8-
98A127628
91B}
Provides a safer (but slower) memory copy 
implementation that always zeroes out the 
destination buffer and can be used with 
device memory.
N
T 
ke
rn
el
Kern
elPa
dSec
tions
Over
{4F55C0D
B-73D3-
43F2-9723-
8A9C7F79
D39D}
Prevents discardable sections of any kernel 
module to be freed by the memory manager 
and blocks the loading of the target driver 
(where the shim is applied).
N
T 
ke
rn
el
ride
NDI
S 
Shim
{49691313
-1362-
4e75-8c2a-
2dd72928e
ba5}
NDIS version compatibility shim (returns 
6.40 where applied to a driver).
N
di
s.
sy
s
SrbS
him
{434ABAF
D-08FA-
4c3d-
A88D-
D09A88E2
AB17}
SCSI Request Block compatibility shim that 
intercepts the 
IOCTL_STORAGE_QUERY_PROPERTY.
St
or
p
or
t.s
ys
Devi
ceId
Shim
{0332ec62-
865a-4a39-
b48f-
cda6e855f4
23}
Compatibility shim for RAID devices.
St
or
p
or
t.s
ys
ATA
Devi
ceId
Shim
{26665d57
-2158-
4e4b-a959-
c917d03a0
d7e}
Compatibility shim for serial ATA devices.
St
or
p
or
t.s
ys
Blue
toot
h 
Filte
r 
Pow
er 
{6AD90D
AD-C144-
4E9D-
A0CF-
AE9FCB90
1EBD}
Compatibility shim for Bluetooth filter 
drivers.
Bt
h
p
or
t.s
ys
shim
Usb
Shim
{fd8fd62e-
4d94-4fc7-
8a68-
bff7865a70
6b}
Compatibility shim for old Conexant USB 
modem.
U
sb
d.
sy
s
Noki
a 
Usbs
er 
Filte
r 
Shim
{7DD6099
7-651F-
4ECB-
B893-
BEC8050F
3BD7}
Compatibility shim for Nokia Usbser filter 
drivers (used by Nokia PC Suite).
U
sb
d.
sy
s
A shim is internally represented through the KSE_SHIM data structure
(where KSE stands for Kernel Shim Engine). The data structure includes the
GUID, the human-readable name of the shim, and an array of hook collection
(KSE_HOOK_COLLECTION data structures). Driver shims support different
kinds of hooks: hooks on functions exported by the NT kernel, HAL, and by
driver libraries, and on driver’s object callback functions. In phase 1 of its
initialization, the Shim Engine registers the Microsoft-Windows-Kernel-
ShimEngine ETW provider (which has the {0bf2fb94-7b60-4b4d-9766-
e82f658df540} GUID), opens the driver shim database, and initializes the
remaining built-in shims implemented in the NT kernel (refer to Table 10-
21).
To register a shim (through KseRegisterShimEx), the NT kernel performs
some initial integrity checks on both the KSE_SHIM data structure, and each
hook in the collection (all the hooks must reside in the address space of the
calling driver). It then allocates and fills a
KSE_REGISTERED_SHIM_ENTRY data structure which, as the name
implies, represents the registered shim. It contains a reference counter and a
pointer back to the driver object (used only in case the shim is not
implemented in the NT kernel). The allocated data structure is linked in a
global linked list, which keeps track of all the registered shims in the system.
The shim database
The shim database (SDB) file format was first introduced in the old Windows
XP for Application Compatibility. The initial goal of the file format was to
store a binary XML-style database of programs and drivers that needed some
sort of help from the operating system to work correctly. The SDB file has
been adapted to include kernel-mode shims. The file format describes an
XML database using tags. A tag is a 2-byte basic data structure used as
unique identifier for entries and attributes in the database. It is made of a 4-bit
type, which identifies the format of the data associated with the tag, and a 12-
bit index. Each tag indicates the data type, size, and interpretation that
follows the tag itself. An SDB file has a 12-byte header and a set of tags. The
set of tags usually defines three main blocks in the shim database file:
■    The INDEX block contains index tags that serve to fast-index
elements in the database. Indexes in the INDEX block are stored in
increasing order. Therefore, searching an element in the indexes is a
fast operation (using a binary search algorithm). For the Kernel Shim
engine, the elements are stored in the INDEXES block using an 8-
byte key derived from the shim name.
■    The DATABASE block contains top-level tags describing shims,
drivers, devices, and executables. Each top-level tag contains children
tags describing properties or inner blocks belonging to the root entity.
■    The STRING TABLE block contains strings that are referenced by
lower-level tags in the DATABASE block. Tags in the DATABASE
block usually do not directly describe a string but instead contain a
reference to a tag (called STRINGREF) describing a string located in
the string table. This allows databases that contain a lot of common
strings to be small in size.
Microsoft has partially documented the SDB file format and the APIs used
to read and write it at https://docs.microsoft.com/en-
us/windows/win32/devnotes/application-compatibility-database. All the SDB
APIs are implemented in the Application Compatibility Client Library
(apphelp.dll).
Driver shims
The NT memory manager decides whether to apply a shim to a kernel driver
at its loading time, using the KseDriverLoadImage function (boot-loaded
drivers are processed by the I/O manager, as discussed in Chapter 12). The
routine is called at the correct time of a kernel-module life cycle, before