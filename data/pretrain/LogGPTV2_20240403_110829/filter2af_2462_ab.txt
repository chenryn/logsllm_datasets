            later on.
          */
         if (skip_intel || skip_app || skip_csect || !instr_ok ||
             line[0] == '#' || line[0] == ' ') continue;
         /* Conditional branch instruction (jnz, etc). We append the instrumentation
            right after the branch (to instrument the not-taken path) and at the
            branch destination label (handled later on). */
         if (line[0] == '\t') {
           if (line[1] == 'j' && line[2] != 'm' && R(100) : */
         if ((colon_pos = strstr(line, ":"))) {
           if (line[0] == 'L' && isdigit(*(colon_pos - 1))) {
#else
                 /* Everybody else: .L: */
         if (strstr(line, ":")) {
           if (line[0] == '.') {
#endif / _**APPLE** _/
                     /* .L0: or LBB0_0: style jump destination */
#ifdef **APPLE**
                     /* Apple: L / LBB */
             if ((isdigit(line[1]) || (clang_mode && !strncmp(line, "LBB", 3)))
                 && R(100)  / .LBB */
             if ((isdigit(line[2]) || (clang_mode && !strncmp(line + 1, "LBB", 3)))
                 && R(100) < inst_ratio) {
#endif / _**APPLE** _/
                       /* An optimization is possible here by adding the code only if the
                  label is mentioned in the code in contexts other than call / jmp.
                  That said, this complicates the code by requiring two-pass
                  processing (messy with stdin), and results in a speed gain
                  typically under 10%, because compilers are generally pretty good
                  about not generating spurious intra-function jumps.
                  We use deferred output chiefly to avoid disrupting
                  .Lfunc_begin0-style exception handling calculations (a problem on
                  MacOS X). */
               if (!skip_next_label) instrument_next = 1; else skip_next_label = 0;
             }
           } else {
             /* Function label (always instrumented, deferred mode). */
             instrument_next = 1;
           }
         }
} ```
    5. 上述过程完成后，来到 `while` 循环的下一个循环，在 `while` 的开头，可以看到对以 defered mode 进行插桩的位置进行了真正的插桩处理：
```c if (!pass_thru && !skip_intel && !skip_app && !skip_csect && instr_ok &&
instrument_next && line[0] == '\t' && isalpha(line[1])) {
                  fprintf(outf, use_64bit ? trampoline_fmt_64 : trampoline_fmt_32,
                  R(MAP_SIZE));
          instrument_next = 0;
          ins_lines++;
        }
```
这里对 `instr_ok,?instrument_next` 变量进行了检验是否为1，而且进一步校验是否位于 `.text` 段中，且设置了
defered mode 进行插桩，则就进行插桩操作，写入 `trampoline_fmt_64/32` 。
至此，插桩函数 `add_instrumentation` 的主要逻辑已梳理完成。
##### 4\. edit_params函数
`edit_params`，该函数主要是设置变量 `as_params` 的值，以及 `use_64bit/modified_file` 的值，
其整体控制流程如下：
  1. 获取环境变量 `TMPDIR` 和 `AFL_AS`;
  2. 对于 `__APPLE_` 宏， 如果当前在 `clang_mode` 且没有设置 `AFL_AS` 环境变量，会设置 `use_clang_mode =?1`，并设置 `afl-as` 为 `AFL_CC/AFL_CXX/clang`中的一种；
  3. 设置 `tmp_dir` ，尝试获取的环境变量依次为 `TEMP,?TMP`，如果都失败，则直接设置为 `/tmp`；
  4. 调用 `ck_alloc()` 函数为 `as_params` 参数数组分配内存，大小为(argc + 32) * 8；
  5. 设置 `afl-as` 路径：`as_params[0] = afl_as ? afl_as : (u8*)"as";`
  6. 设置 `as_params[argc] = 0;` ，as_par_cnt 初始值为1；
  7. 遍历从 `argv[1]` 到 `argv[argc-1]` 之前的每个 argv：
  8. 如果存在字符串 `--64`， 则设置 `use_64bit?= 1` ；如果存在字符串 `--32` ，则设置 `use_64bit = 0`。对于`__APPLE__` ，如果存在`-arch x86_64`，设置 `use_64bit=1`，并跳过`-q`和`-Q`选项；
  9. `as_params[as_par_cnt++] = argv[i]`，设置as_params的值为argv对应的参数值
  10. 开始设置其他参数：
  11. 对于 `__APPLE__`，如果设置了 `use_clang_as`，则追加 `-c?-x?assembler`；
  12. 设置 `input_file` 变量：`input_file = argv[argc - 1];`，把最后一个参数的值作为 `input_file`；
    1. 如果 `input_file` 的首字符为`-`：
      1. 如果后续为 `-version`，则 `just_version?= 1`, `modified_file?= input_file`，然后跳转到`wrap_things_up`。这里就只是做`version`的查询；
      2. 如果后续不为 `-version`，抛出异常；
    2. 如果 `input_file` 首字符不为`-`，比较 `input_file` 和 `tmp_dir`、`/var/tmp` 、`/tmp/`的前 `strlen(tmp_dir)/9/5`个字节是否相同，如果不相同，就设置 `pass_thru` 为1；
  13. 设置 `modified_file`：`modified_file = alloc_printf("%s/.afl-%u-%u.s", tmp_dir, getpid(), (u32)time(NULL));`，即为`tmp_dir/afl-pid-tim.s` 格式的字符串
    1. 设置`as_params[as_par_cnt++] = modified_file`，`as_params[as_par_cnt] = NULL;`。
#### 3\. instrumentation trampoline 和 main_payload
`trampoline` 的含义是“蹦床”，直译过来就是“插桩蹦床”。个人感觉直接使用英文更能表达出其代表的真实含义和作用，可以简单理解为桩代码。
##### 1\. trampoline_fmt_64/32
根据前面内容知道，在64位环境下，AFL会插入 `trampoline_fmt_64`
到文件中，在32位环境下，AFL会插入`trampoline_fmt_32` 到文件中。`trampoline_fmt_64/32`定义在 `afl-as.h` 头文件中：
    static const u8* trampoline_fmt_32 =
      "\n"
      "/* --- AFL TRAMPOLINE (32-BIT) --- */\n"
      "\n"
      ".align 4\n"
      "\n"
      "leal -16(%%esp), %%esp\n"
      "movl %%edi,  0(%%esp)\n"
      "movl %%edx,  4(%%esp)\n"
      "movl %%ecx,  8(%%esp)\n"
      "movl %%eax, 12(%%esp)\n"
      "movl $0x%08x, %%ecx\n"    // 向ecx中存入识别代码块的随机桩代码id
      "call __afl_maybe_log\n"   // 调用 __afl_maybe_log 函数
      "movl 12(%%esp), %%eax\n"
      "movl  8(%%esp), %%ecx\n"
      "movl  4(%%esp), %%edx\n"
      "movl  0(%%esp), %%edi\n"
      "leal 16(%%esp), %%esp\n"
      "\n"
      "/* --- END --- */\n"
      "\n";
    static const u8* trampoline_fmt_64 =
      "\n"
      "/* --- AFL TRAMPOLINE (64-BIT) --- */\n"
      "\n"
      ".align 4\n"
      "\n"
      "leaq -(128+24)(%%rsp), %%rsp\n"
      "movq %%rdx,  0(%%rsp)\n"
      "movq %%rcx,  8(%%rsp)\n"
      "movq %%rax, 16(%%rsp)\n"
      "movq $0x%08x, %%rcx\n"  // 64位下使用的寄存器为rcx
      "call __afl_maybe_log\n" // 调用 __afl_maybe_log 函数
      "movq 16(%%rsp), %%rax\n"
      "movq  8(%%rsp), %%rcx\n"
      "movq  0(%%rsp), %%rdx\n"
      "leaq (128+24)(%%rsp), %%rsp\n"
      "\n"
      "/* --- END --- */\n"
      "\n";
上面列出的插桩代码与我们在 `.s` 文件和IDA逆向中看到的插桩代码是一样的：
`.s` 文件中的桩代码：
IDA逆向中显示的桩代码：
上述代码执行的主要功能包括：
  * 保存 `rdx`、 `rcx` 、`rax` 寄存器
  * 将 `rcx` 的值设置为 `fprintf()` 函数将要打印的变量内容
  * 调用 `__afl_maybe_log` 函数
  * 恢复寄存器
在以上的功能中， `__afl_maybe_log` 才是核心内容。
从 `__afl_maybe_log` 函数开始，后续的处理流程大致如下(图片来自ScUpax0s师傅)：
首先对上面流程中涉及到的几个bss段的变量进行简单说明（以64位为例，从`main_payload_64`中提取）：
    .AFL_VARS:
      .comm   __afl_area_ptr, 8
      .comm   __afl_prev_loc, 8
      .comm   __afl_fork_pid, 4
      .comm   __afl_temp, 4
      .comm   __afl_setup_failure, 1
      .comm    __afl_global_area_ptr, 8, 8
  * `__afl_area_ptr`：共享内存地址；
  * `__afl_prev_loc`：上一个插桩位置（id为R(100)随机数的值）；
  * `__afl_fork_pid`：由fork产生的子进程的pid；
  * `__afl_temp`：缓冲区；
  * `__afl_setup_failure`：标志位，如果置位则直接退出；
  * `__afl_global_area_ptr`：全局指针。
**说明**
以下介绍的指令段均来自于 `main_payload_64` 。
##### 2\. __afl_maybe_log
    __afl_maybe_log:   /* 源码删除无关内容后 */
      lahf
      seto  %al
      /* Check if SHM region is already mapped. */
      movq  __afl_area_ptr(%rip), %rdx
      testq %rdx, %rdx
      je    __afl_setup
首先，使用 `lahf` 指令（加载状态标志位到`AH`）将EFLAGS寄存器的低八位复制到
`AH`，被复制的标志位包括：符号标志位（SF）、零标志位（ZF）、辅助进位标志位（AF）、奇偶标志位（PF）和进位标志位（CF），使用该指令可以方便地将标志位副本保存在变量中；
然后，使用 `seto` 指令溢出置位；
接下来检查共享内存是否进行了设置，判断 `__afl_area_ptr` 是否为NULL：
  * 如果为NULL，跳转到 `__afl_setup` 函数进行设置；
  * 如果不为NULL，继续进行。
##### 3\. __afl_setup
    __afl_setup:
            /* Do not retry setup is we had previous failues. */
            cmpb $0, __afl_setup_failure(%rip)
            jne __afl_return
            /* Check out if we have a global pointer on file. */
            movq __afl_global_area_ptr(%rip), %rdx
            testq %rdx, %rdx
            je __afl_setup_first
            movq %rdx, __afl_area_ptr(%rip)
            jmp  __afl_store
该部分的主要作用为初始化 `__afl_area_ptr` ，且只在运行到第一个桩时进行本次初始化。
首先，如果 `__afl_setup_failure` 不为0，直接跳转到 `__afl_return` 返回；
然后，检查 `__afl_global_area_ptr` 文件指针是否为NULL：
  * 如果为NULL，跳转到 `__afl_setup_first` 进行接下来的工作；
  * 如果不为NULL，将 `__afl_global_area_ptr` 的值赋给 `__afl_area_ptr`，然后跳转到 `__afl_store` 。
##### 4\. __afl_setup_first
    __afl_setup_first:
      /* Save everything that is not yet saved and that may be touched by
         getenv() and several other libcalls we'll be relying on. */
      leaq -352(%rsp), %rsp
      movq %rax,   0(%rsp)
      movq %rcx,   8(%rsp)
      movq %rdi,  16(%rsp)
      movq %rsi,  32(%rsp)
      movq %r8,   40(%rsp)
      movq %r9,   48(%rsp)
      movq %r10,  56(%rsp)