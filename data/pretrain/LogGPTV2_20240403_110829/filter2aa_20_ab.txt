陈亮（OWASP 子明）
译者序
2011 年，索尼遭受了 3 次大规模攻击，造成 7700 万 PlayStation Network（PSN）用户的个人信息泄漏。攻击令 PSN 网络服务瘫痪了 23 天，给索尼造成了上亿美元的经济损失。
2011 年 12 月，国内知名开发者社区 CSDN 遭到攻击，600 万用户账号及明文密码泄漏并在网络上被大量传播。
2013 年 3 月，全球知名的云笔记应用 Evernote 遭到攻击，导致 5000 万用户的邮箱地址和加密密码泄漏。
写下这篇文字时，又正值全球最大的众筹网站 Kickstarter 被攻击而导致用户信息被窃取。
一件件触目惊心的事件无一不在提醒着我们网络安全的重要性。造成这些事件的罪魁祸首或许只是代码中一些不起眼的地方，但引发的影响及后果却骇人听闻。掌握如何在编程时不引入漏洞已成为了 Web 应用开发者不可或缺的技能。
然而，当开发者想要系统性地学习 Web 应用安全时，却发现市面上充斥着以攻击者的视角写作的“XX 攻防大全”等书籍，却鲜有站在开发者立场的优秀的权威性书籍可供参考。图灵公司引进的这本《Web 应用安全权威指南》正好填补了这一领域的空缺。
“在那本‘德丸本’中有透彻的讲解。”这是译者在日本工作期间，向同事询问“什么是 CSRF”时得到的答复。没错，“德丸本”就是本书在日本的昵称，几乎在每个 Web 开发小组的案头都能发现它的身影。
本书的作者德丸浩先生在日本被誉为“Web 应用安全领域第一人”，他在经营着一家 Web 安全咨询公司的同时，还在博客上笔耕不辍，孜孜不倦地分享着自己 Web 安全方面的知识，得此称号可谓实至名归。这本书是目前为止德丸浩先生出版的唯一一本图书，可以说是从业多年的经验沉淀下来的精华。
看过日系技术书的读者，一定会对其通俗易懂、深入浅出、谦虚谨慎等特点印象深刻，本书也不例外。SQL 注入、XSS、CSRF 等对于 Web 开发人员来说耳熟能详却可能一知半解的术语，都将在这本书中详细剖析。本书既适合从头到尾通读来进行系统性学习，也适合作为参考书时常查阅。
最后，再一次感谢图灵文化的编辑们能将这本书引入到国内。感谢另一位译者刘斌的辛勤付出，使得本书能够成功地问世。还要感谢妻子马超对我使用业余时间进行翻译工作的鼓励和支持。
希望本书能够让您受益。
赵文
2014 年 2 月于无锡
前言
近年来，利用 Web 应用存在的安全隐患（即所谓的“漏洞”）展开攻击的案例层出不穷，受害者也与日俱增。虽说只要消除安全隐患就能够杜绝这些攻击，但这就需要 Web 应用开发人员掌握正确的安全性方面的知识。
目前，网络上充斥着大量关于安全性的信息，但多数内容都只是流于表面，无法解答开发人 员的困惑。具体来说，主要存在以下几点疑问。
为什么会产生安全隐患
安全隐患会产生什么样的影响
如何编程才能消除安全隐患
为什么某些方法能够消除安全隐患
而本书就是为了解答这些疑问而创作的。为此，从安全隐患产生的原理到具体的对策，以及采用该对策的根据，本书都将尽可能地详细讲述。本书的目标读者包括程序员、设计师、项目经理、质量管理负责人等参与 Web 应用开发的全部人员。另外，本书也会站在 Web 应用的发包方（甲方）的立场上，尽可能地为其提供有用的信息。
虽然本书面向的是开发人员，但对攻击的手段也做了详细的解说。目的就是为了能够让读者切实感受到安全隐患所造成的影响。但有一点需要注意的是，如果没有得到网站管理员的许可就尝试实施攻击的话，就有可能会触犯相关的法律法规。由于非专业人员很难判断自己的行为是否违法，因此，请不要在没有得到许可的情况下攻击正式的网站。
为了让读者能够放心地体验攻击流程，本书提供了在 VMware Player 的虚拟机环境中尝试安全隐患攻击的方法。希望读者能够通过亲自动手，来加深对安全隐患的理解。
最后，虽然本书中的示例代码主要使用了 PHP 语言，但讲述的内容对其他语言也是同样适用的。
谢辞
笔者在写作本书时，在网上征集了一些试读者，并根据试读者的意见和反馈不断地进行了调整。试读者不仅指出了错别字及语法问题，还提出了各种各样的改进方案，甚至还就安全隐患进行了深入的探讨，实在令笔者受益匪浅。如果没有这些建议和探讨，本书就不会是现在的样子。衷心感谢以下这些试读者（恕笔者省略敬称）：
大崎雅幸、太田良典、kaito834、加藤泰文、小邨孝明、坂井隆二、下冈叶子、高木正弘、竹迫良范、东内裕二、塙与志夫、日野洋一郎、山崎圭吾、山下太郎、Masahiro Yamada（masa141421356）、山本阳平
另外，长谷川阳介先生对本书提出了宝贵意见。同时笔者还在 Twitter 上收到了很多人士的建议。在此一并表示感谢。
最后还要感谢本书的编辑——SB Creative 股份有限公司信息书籍编辑部的友保健太先生，友保先生不仅对写作进度缓慢的笔者颇为照顾，还时常给出宝贵的意见和建议。在此向您致以衷心的感谢。
2011 年 1 月
德丸浩
第 1 章 什么是 Web 应用的安全隐患
本章将对“安全隐患”这一贯穿全书的主题加以概述，包括什么是安全隐患，安全隐患会带来哪些问题，安全隐患是如何产生的，等等。本章最后会给出全书的结构和学习方法。
1.1 安全隐患即“能用于作恶的 Bug”
程序 Bug 对于开发者来说如同家常便饭。应用程序有了 Bug，就会出现各种不正常的现象。例如，显示出错误的结果、需要进行的处理迟迟不能结束、网页布局错乱、响应速度极为缓慢等。而这其中，有一种 Bug 能被恶意利用。此类 Bug 被称为安全隐患（Vulnerability），有时也被称为安全性 Bug。
以下是一些恶意利用的常见案例。
未经许可浏览用户个人信息等隐私信息
篡改网站的内容
使网页浏览者的计算机感染病毒
伪装成他人来窥探用户的隐私信息、发布文章、在线购物、肆意转账等
使目标网站不能被访问
在网络游戏中让自己达到无敌状态，或非法获得游戏中的装备道具
在确认自己的个人信息时，能看到别人的个人信息 1
1
 能看到其他用户个人信息的 Bug 虽不是故意作恶，但由此而偶然造成的不良后果也被视为安全隐患。
如同程序员对一般的 Bug（无奈地）习以为常一样，Web 应用程序开发者对安全隐患也同样已经司空见惯。倘若开发 Web 应用程序时对安全隐患一无所知，就会开发出能被用来进行上述恶举的网站。针对这一问题，本书将从原理到具体对策，来详细讲述如何在开发 Web 应用时杜绝安全隐患。
1.2 为什么存在安全隐患会有问题
为什么存在安全隐患会有问题，这是个越思考就越深入的课题。接下来，就让我们从几个方面来探讨一下必须杜绝安全隐患的原因。
经济损失
应杜绝安全隐患的原因之一为，假如网站的安全隐患被恶意利用，网站的经营者将会蒙受经济损失。典型的损失为以下几项。
赔偿用户的经济损失
给用户寄送代金券作为补偿时的花销
网站暂停运营造成的机会损失
信誉度下降造成的营业额减少
此类经济损失的总额有时会高达数十亿日元。
然而，或许有人会有这样的疑问。如果网站的营销规模并不大，上述列举的各项经济损失就会变得相对较小。所以可能有些网站运营方就会采取这种思路：事前不做相应对策，万一出事了就赔偿用户的损失。2
但是，实际的损失并不仅限于经济损失。
法律要求
3
《个人信息保护法》是规定网站实施安全性措施的法律。该法第 20 条规定，拥有超过 5000 名用户的网站运营方，作为个人信息经营者，有义务实施网站的安全管理措施。
（安全管理措施）
第二十条 个人信息经营者，为了安全管理其用户的个人信息，必须采取必要且恰当的措施，防止用户的个人信息被泄漏、删除或损坏。
安全管理措施的具体内容，由各省厅分别制定规章。其中，“经济产业领域关于个人信息保护法的指导方针”中，“技术性安全管理措施”中的“‘个人数据访问控制’的实践方法示例”一节中有如下记载。
检验处理个人信息的系统中引入的访问控制功能的有效性。
（例如，检验网络应用是否存在安全隐患。）
也就是说，通过 Web 系统管理个人信息的运营者受到《个人信息保护法》以及相关规章的约束，承担着对 Web 应用的安全隐患采取安全管理措施的法律义务。
对用户造成不可逆的伤害
应该意识到，安全隐患造成的事故会给用户带来很多不可逆的伤害。个人信息一旦泄漏，就不可能再回收。账号被盗而导致用户的名誉受损之后，就再也回不到以前的状态了。另外，如果用户的信用卡账号被泄漏，即使赔偿了用户的金钱损失，也不可能完全平抚用户受到的恐慌、不安等精神上的痛苦。换言之，一旦发生了安全事故，就会出现很多金钱无法解决的问题。
欺骗用户
大多数网站都会夸耀自身有多么安全。没有网站会表示“本站完全不保证安全性，对于可能出现的安全问题概不负责”。假如网站强调了自己的安全性，就最好将安全隐患消除干净。安全隐患的存在会极大地影响网站的信誉度与可信任性。
被用于构建僵尸网络
僵尸网络（Botnet）的存在，是威胁互联网安全的主要因素之一。僵尸病毒（Bot）是一种恶意代码（Malware），计算机被感染后就能够被外界远程操纵，用来发送垃圾邮件或执行 DDoS 攻击（分布式拒绝服务攻击）等恶意行为。据传，2010 年初爆发的 Gumblar 恶意程序的目的之一就是构建僵尸网络。
Web 应用的安全隐患也可能被用于构建僵尸网络，情形如图 1-1 所示。
图 1-1 Web 应用的安全隐患被用来构建僵尸网络
攻击者首先会篡改存在安全隐患的网站的内容，并设下圈套试图让浏览者的计算机感染僵尸病毒。假如浏览网站的用户的计算机存在安全隐患，就会感染上僵尸病毒，从而便能够接受攻击者的命令。进入僵尸网络的计算机 4
 会被用来发送垃圾邮件或执行 DDoS 攻击。另外，有时僵尸机器也会去攻击新的服务器。如此这般，新被入侵的机器也加入到了被控的僵尸 Web 服务器集群，那么被感染僵尸病毒的计算机集群的数量就会不断扩大。
据传，僵尸网络带来的收益是网络犯罪者的一项主要收入来源。换言之，在互联网上发布一个带有安全隐患的网站，就有被反社会势力利用的可能性。
2
 这种策略被称为“风险自留”。
3
 本节阐述的是日本的相关法律，供中国读者参考。遗憾的是，截至译稿时（2013 年 9 月），中国在网络安全隐患方面还没有推出相应的法律法规。——译者注
4
 俗称“肉鸡”。 ——译者注
1.3 产生安全隐患的原因
接下来本节将说明安全隐患产生的原因，据此就可以理解为何笔者之前会说“Web 应用程序开发者对安全隐患已经司空见惯”。
首先，产生安全隐患的原因可分为以下两类。
（A）由 Bug 造成
（B）由检验功能不完善造成
情况（A）包含 SQL 注入（SQL Injection）和跨站脚本（Cross Site Scripting，简称 XSS）等极具影响力的著名的安全隐患。此类隐患不仅发生场所与安全性毫不相关，而且波及范围能扩散至整个应用程序，着实让人头疼。因此，开发团队的每一个成员在编写应用程序时就必须具有极强的安全意识，但可惜目前还有很多开发团队并未这么做。
另一方面，目录遍历（Directory Traversal）漏洞是情况（B）中一个代表性的例子。产生此类安全隐患的原因是很多开发者缺乏执行安全检验的意识，而且同（A）一样，它造成的影响也会波及整个应用程序。
由此可见，Web 应用的安全隐患可以被形象地比喻为“在意想不到的地方隐藏着的一个很深的陷阱”。因此，一直以来安全隐患都在源源不断地产生。但是，与真正的陷阱不同的是，我们能够通过学习提前得知哪里会有陷阱。
1.4 安全性 Bug 与安全性功能
本章开头我们提到安全隐患是一种 Bug，但有时即使修正了所有 Bug 也不能保证应用程序绝对安全。举例来说，没有使用 HTTPS 协议（超文本传输安全协议）来加密传输的状态并不能算作是 Bug，这种情况下，虽然不存在（狭义的）安全隐患，但是传输的内容却存在被窃听的可能性。
如同使用 HTTPS 来对传输内容进行加密那样，积极主动地加强安全性的措施在本书中被称为“安全性功能”。安全性功能实为应用程序的一种需求，所以也被称为安全性需求。
从开发管理这一层面上来说，将应用程序安全性方面的 Bug 和需求这两者整理清楚也是至关重要的。如同 Bug 必须被消除一样，消除安全隐患也应当是理所当然的。另一方面，是否将安全性功能加入到项目需求中，则应该由软件的发包方结合项目经费作出决定。
为了让读者有意识地区分安全性 Bug 和安全性功能，本书特意将两者分别独立成章来加以细述。
1.5 本书的结构
本书结构如下。
第 1 章，引入安全隐患这个概念，介绍安全隐患是如何产生的，说明安全性 Bug 和安全性功能的区别。
第 2 章，搭建本书的试验环境。本书通过 VMware 的虚拟机提供了可以实际体验安全隐患的环境。该章会介绍搭建此虚拟机环境和安装诊断用工具的方法。
第 3 章，讲述 HTTP、Cookie、会话（Session）管理等 Web 应用安全方面的基础知识，还会介绍同源策略。
第 4 章，全书的核心章节。针对 Web 应用的每一个功能中易产生的安全隐患模式，对其原理及对策等各个方面加以详细说明。
第 5 章，讲述认证、账号管理、授权、日志输出等典型的安全性功能。
第 6 章，讲述字符编码与安全性的关系。Web 应用安全隐患的起因很多都涉及字符编码。本章将讲述字符编码的基础知识、安全隐患产生的原因和相应的对策。
第 7 章，从 Web 应用以外的方面，描绘提高网站安全性措施的全景。
第 8 章，讲述如何开发安全无虞的 Web 应用。
第 2 章 搭建试验环境
本章将讲解如何搭建本书中安全隐患用例的运行环境，其中的截图是在 Windows 7 中取得的，但这些操作同样适用于 Windows XP 或 Windows Vista。
2.1 试验环境概要
本书中安全隐患用例的运行环境如下：
Linux（Ubuntu 10.04）
Apache 2.2
PHP 5.3
PostgreSQL 8.4
Postfix 等兼容 Sendmail 的电子邮件服务器
为了方便使用 Windows 操作系统的读者，本书为大家准备了已经将上述环境搭建完毕的 VMware 虚拟机。下图展示了在 VMware 中运行 Linux 系统的情形。
图 2-1 本书的试验环境
虽然虚拟机中的 Linux 服务器事实上是在读者自己的计算机中运行的，但请将其想像成互联网上的一台远程服务器。通过使用虚拟机，我们就能在自己的计算机上模拟近似于互联网上的服务器环境。
本章需要安装以下软件。
VMware Player（VMware 运行环境）
Fiddler（诊断用工具）
虚拟机
VMware Player 和 Fiddler 是免费公开的软件。虚拟机则是指为了能够在 VMware Player 上运行本书代码而配置的 Linux 环境。
从下一节开始，我们将依次解说各软件的安装方法。
2.2 安装 VMware Player
什么是 VMware Player
VMware Player 是美国 VMware 公司推出的一款免费虚拟机软件。前面已经提到，本书将利用 VMware Player 在虚拟机上搭建 Linux 服务器的运行环境，并将其视为 Web 服务器来进行各种试验。
写作本书时（2011 年 4 月），VMware Player 的最新版本为 3.1.4，软件要求的配置如下 1
 。
CPU ：标准的 x86 兼容系统或 x86-64 位兼容个人计算机，支持 Intel VT 或者 AMD-V（不支持 PAE 的 Pentium M 等处理器）
操作系统：Windows XP、Windows Vista 或 Windows 7
内存：1G 以上
硬盘：有 1G 以上空余容量（包括虚拟机）
如果硬盘剩余空间不足，可将虚拟机保存于外部存储媒介（如 U 盘或 SD 卡等），这样安装 VMware Player 本身只需要 150M 左右的空间即可。
下载 VMware Player
安装 VMware Player 的最新版，可以前往 http://www.vmware.com/go/downloadplayer-cn/
 下载，页面如图 2-2 所示。
图 2-2 在 VMware 的官方网站上能下载最新版的安装文件
安装 VMware Player
双击安装程序。这时会显示以下安装向导。
图 2-3 安装开始
安装过程中可以全部使用默认选项。如有必要，可以更改安装路径等。
图 2-4 更改安装路径
当看到以下画面时，说明安装已经成功。然后按照画面上的指示，重启系统即可。
图 2-5 安装完成
1
 本章的讲解主要针对 Windows 操作系统，但本书附带的虚拟机环境在 Linux 版的 VMware Player 3.1.2，以及 Mac OS X 的 VMware Player 3.1.2 上已经做过测试，均能正常运行。