At any point in a run of the game, by construction such a tuple (u, i, t) uniquely identiﬁes
a corresponding pair of states π and σ if they exist (Deﬁnition 3). To simplify our notation,
therefore, where is it more convenient we refer to session and bookkeeping states directly by
their identiﬁers, so for example by (u, i, t).π.x we mean π.x of (u, i, t) and by (u, i, t).σ.y we
mean σ.y of (u, i, t).
Game 0. This is the original AKE security game. We see that the success probability of the
adversary is bounded above by
1/2 + Adv0
Game 1. This is the same as Game 0, except the challenger aborts and the adversary loses if
there is ever a collision of honestly generated DH keys in the game. There are a total number
of nP parties in the game. There are a maximum of nSnT ephemeral DH keys generated per
party. There are therefore a total maximum of nPnSnT DH keys, each pair of which must not
collide. All keys are generated in the same DH group of order q so each of the(cid:0)nPnSnT
(cid:1) pairs has
2
probability 1/q of colliding. Therefore, we have the following bound:
(cid:0)nPnSnT
(cid:1)
Adv0 ≤
2
q
+ Adv1
Game 2. This is the same as Game 1, except the challenger begins by guessing (uniformly
at random, independently of other random samples) a user u(cid:48), session i(cid:48) and stage t(cid:48). If the
adversary issues a Test(u, i, t) query with (u, i, t) (cid:54)= (u(cid:48), i(cid:48), t(cid:48)), the challenger immediately aborts
the game and the adversary loses.
Additionally, the challenger guesses a corresponding key counter value (cid:96)(cid:48) and aborts if
(cid:96)(cid:48) (cid:54)= (u, i, t).σ.(cid:96)[(u, i, t).π.idx]. In other words, the challenger also attempts to guess the number
of sent DH keys from the Test. There are at most nT possible sent keys.
Since the challenger’s guess is independent of the adversary’s choice of Test session, we derive
32
the bound
Adv1 ≤ nPnSnT
2 Adv2
Game 3. In this game, the challenger guesses in advance the peer sessions associated with each
leaf key in (u, i, t).π.T (if they exist), and aborts if both of the following two conditions are met:
(i) they are not unique and (ii) the non-unique sessions have contributed their own leaf key.
l, j(cid:48)
l, s(cid:48)
l, s(cid:48)
Precisely, the challenger does the following:
for each leaf l in (u, i, t).π.T , it guesses a
l) ∈ [nnP] × [nS] × [nT] and aborts if there exists a session (v, j, s)
triple of indices (v(cid:48)
with (v, j, s).π.idx = l and (v, j, s).π.T = (u, i, t).π.T and (v, j, s).σ.(cid:96)[(v, j, s).π.idx] > 0 but
l) (cid:54)= (v, j, s). In other words, for each leaf l in the tree of the Test session, the challenger
l, j(cid:48)
(v(cid:48)
tries to guess in advance the agent, agent’s session, and stage of the session, that have the same
DH tree in session memory contents that the Test session (u, i, t) has, and believe that their leaf
key is at leaf l, where the peers are no longer using a setup key from u, and aborts if any are
not unique. Note that it might be the case that no such (vl, jl, sl) exist, but this game ensures
that if they do exist, they are uniquely deﬁned and known in advance by the challenger.
Recall that γ denotes the maximum group size. From (u, i, t).π.T we can derive an ordered
list of the peers associated with each leaf at stage t. Therefore, there are no more than γ − 1
such leafs, so we will assume the worst case of making γ − 1 guesses.
Uniqueness of the guessed tuples follows from the fact that in Game 1 we ensured in advance
that honestly generated DH values are unique: the challenger guesses sessions that could possibly
have the same view of the internal tree structure as the Test session. This means (without loss
of generality) that Bob is at leaf 1, Charlie at leaf 2, etc. For uniqueness of the guessed sessions
with the same view of the internal tree structure as the Test not to hold, this must mean at
least two sessions with the same internal view at a particular leaf. To have the same view, they
must have the same session actor identity. Also, we only abort if (vl, jl, sl).σ.t > 0. This means
that for uniqueness not to hold, the same actor must have generated the same DH value at the
leaf l. But this cannot happen by Game 1.
Additionally, for each leaf l, the challenger guesses a corresponding key counter value lc and
aborts if (u, i, t).σ.(cid:96)[l] (cid:54)= lc. In other words, the challenger also attempts to guess the number of
received DH keys from each node l in the Test. There are at most nT possible guesses for each
leaf.
The guesses are made uniformly randomly before the game starts. This therefore provides
the following bound:
Adv2 ≤ (nPnSnT
2)γ−1 Adv3
Case distinction. At this point in the proof, we do a case distinction based on adversary
behaviour. Consider the event E deﬁned to be true when the current copath of u at (u, i, t).π.T
is fresh. We now perform a case distinction on E, considering ﬁrst the case (i) where E is true,
and then the case (ii) where E is false. Our game hopping sequence splits: we either proceed
from case (i) game 4, 5, 6..., or case (ii) game 4, 5, 6...
Case (i). We assume that E holds. By deﬁnition of copath freshness, it therefore holds that
the copath is the ith copath induced by some Λ, where each λj ∈ Λ was output by an honest
stage against which no RevRandom query was issued. Without loss of generality, we deﬁne λ1
to be the leaf key of u in (u, i, t).π.T .
33
Case (i), Game 4.
Recall that the parent of the ﬁrst two leaf nodes, λ1 and λ2, is deﬁned as gλ1λ2. The key
derived from this is deﬁned as ι(gλ1λ2). We deﬁne a new game in which, in the local stage
key computation of the actor of the Test session and stage and any match (which is unique by
the previous game), ι(gλ1λ2) is replaced with ι(gz) for uniformly randomly chosen DH group
exponent z, and all subsequent computations upwards along the path of the tree use ι(gz)
instead of ι(gλ1λ2).
This is a game hop based on indistinguishability [48]. In general, we consider a hybrid
game and a distinguisher D that interpolates between the two games. The distinguisher D that
distinguishes between distributions P1 and P2, when given an element drawn from distribution P1
as input, outputs 1 with probability Adv3 + 1/2, and when given element drawn from distribution
P2, outputs 1 with probability Adv4(i).1 + 1/2. The indistinguishability assumption then implies
that the diﬀerence in negligible.
We prove that game 4 is indistinguishable from game 3 under the PRF-ODH assumption.
Precisely, we aim to show that if a distinguisher D could eﬃciently distinguish between the
games, then it could be used to break the PRF-ODH assumption. This implies that Adv4 ≤
Adv3 + maxD D, where D is the probability that a PPT distinguisher D correctly distinguishes
between Games 3 and 4(i).1.
It remains to bound D, which we do with a reduction to PRF-ODH. Speciﬁcally, suppose
D is such a distinguisher. We construct an adversary A(D) against the PRF-ODH game as
follows: Given PRF-ODH challenge gx, gy, ι(gz) and the challenge of determining whether or not
z = xy, A(D) simulates the hybrid game as the challenger in a fully honest way except it inserts
gx = gx1, gy = gx2 and ι(gz) = ι(gx1x2).
Our constructed PRF-ODH adversary is given ι(gz), which by construction is the node key
at the parent of Alice’s and Bob’s leaf nodes. It can therefore replace this node key with ι(gz)
and, using this secret, compute all public DH intermediate keys up the tree that depend on
ι(gz), including the tree key at the top of the tree. This game is a hybrid game between Game
3 and Game 4, with equal probability of either. The simulator answers all queries in the honest
way, except in the send/create queries where it needs to insert these DH values. In particular,
since this is case (i), the leaf keys are honestly sent and from game 3 the challenger knows which
agent’s session and stage’s they are generated at in advance, as well as which generated DH
this will be. In other words, the challenger knows (v, j, s) and the associated counter for how
many DH keys have been generated (v, j, t).σ.(cid:96)[(v, j, t).π.idx]. So if it correctly guesses agent
v, session j and stage s without aborting as in Game 3, then instead of honestly answering a
ASend(v, j, t) query when the (cid:96)th DH key is due to be sent in the session (v, j, s) to the Test (or
Create query if its the initial DH key) by running the protocol to generate an ephemeral key,
the challenger instead inserts the PRF-ODH challenge value. This value is unique as there is
only one sent per query so the challenger knows where to insert it. Precisely, the challenger
does not follow the protocol to honestly generate a DH key, and instead uses the one provided
in the PRF-ODH game.
Because of the earlier game hops the simulator knows where to inject the replaced values in
the simulation, and because of the freshness predicate they are honest. Similarly, because of
the freshness predicate it never has to answer a RevRandom query against either of these two
values, and it can honestly simulate any other reveal queries. Therefore the simulation is sound.
In Game 1 we ensured no DH keys collide, and with probability 1/q the PRF-ODH challenger
may provide challenge values gx = gy, in which case the simulator must abort. Fortunately this
34
happens with negligible probability. Thus, we have the bound:
Adv3 ≤ Adv4 + PRF-ODH + 1/q
We will now iteratively repeat this game hop for all other fresh DH values in the tree
(u, i, t).π.T . Because we are in case (i) and know from the previous game hops were to insert
the PRF-ODH challenge DH values, we will therefore conclude that each node key in turn is
indistinguishable from random. Repeating this process, the eventual conclusion will be that the
secret at the root of the tree is also indistinguishable from random.
Case (i), Game 4 + k where 1 ≤ k ≤ γ. We repeat the replacement performed in the previous
game, but for the next pair of sibling nodes. Again, detecting this replacement would require
violating PRF-ODH. At this point, the tree key is no longer a function of the leaf keys—instead,
it depends on the keys at the nodes whose children are leaves, each of which has been replaced by
a random value, unknown to the adversary. We iteratively replace DH keys using the PRF-ODH
assumption, starting along the base of the tree and then working our way up until eventually all
DH keys in the tree, including the ﬁnal group key, are independent of each other. It is trivially
impossible for the adversary to do any better than guessing in the ﬁnal game. Given a group
size of n, we never need to do more than n ≤ γ such game hops due to our tree structure. Thus
≤ γ (PRF-ODH + 1/q) + 0
AdvnP
Case (ii), Game 4. We now proceed with case (ii), restarting our game hopping sequence
from Game 3. Assume now that E does not hold, and thus the copath in the session state of
the Tested stage is not fresh. Since the Tested stage must be fresh, the ﬁrst disjunct of the ﬁnal
clause of the freshness predicate must hold: that t > 0 and the stage with sid (u, i, t − 1) is
fresh.
We proceed by induction on the stage number of the Test session. Our inductive hypothesis
at step k is that no adversary can win with non-negligible advantage if the tested session has
stage number less than or equal to k. The base case k = 0 holds by the above argument: case
(ii) cannot apply since the freshness predicate in case k = 0 requires E to occur.
Assume now that the inductive hypothesis is true for stage t ≤ k − 1; we show that it is also
true for t = k. As before, if the adversary queries Test(u, i, t), then this means stage t must be
fresh. Let RO be the event that the adversary queried the random oracle and received the key
of the Test stage as a reply.
If RO does not hold, then since since the adversary is not allowed to reveal the key because
of the freshness predicate, the only option is for a key replication attack. We can perform a
single game hop in which we replace the stage key with a random value. Since the random
oracle response is by construction a random value, this replacement is indistinguishable and the
resulting advantage for the adversary is zero.
Thus, we conclude that RO must hold. Since random oracle produce collisions with only
negligible probability, it must be the case that the adversary queried the KDF on the same input
that u did on the stage key computation in the stage with sid (u, i, k). In particular, it must
have queried the random oracle on the stage key as that is one of the inputs. This adversary
therefore has a distinguishing advantage against the previous stage, (noting that this is case (ii)
so it is fresh by deﬁnition). This contradicts our induction hypothesis.
35
Speciﬁcally, given such an adversary A we can construct an adversary A(cid:48) which wins with
non-negligible probability against stage k − 1. A(cid:48) simply simulates A without changing any
values and recording all random oracle queries; the simulation is thus trivially faithful. When A
issues a Test(u, i, k) query, A(cid:48) issues a Test(u, i, k − 1) query and compares the resulting key
to all of A’s random oracle queries. If it appears in a random oracle query, A(cid:48) outputs b = 0;
otherwise, it outputs b = 1. By construction, the stage with sid (u, i, k − 1) is fresh and its stage
key is an argument to the random oracle, so the advantage of A(cid:48) is non-negligible.
This contradicts our inductive hypothesis that no adversary can win against a stage less
than k with non-negligible probability; the result thus holds in case (ii) by induction.
D Further Measurement Details
Our prototype implementation is available from [41]. Our algorithm is implemented in the ﬁle
ART.java, with the other ﬁles primarily providing the required container and utility classes.
For our Diﬃe-Hellman group operations we use a Java implementation [49] of Curve25519
[3]. Encryption and decryption of messages uses Java’s native AES-GCM support, at 128 bits
to allow running the example without the Java runtime patch necessary for 256 bit keys. We
use HKDF with SHA256 for all key derivations.
We use the X3DH key exchange algorithm for our initial authenticated key exchanges in
both algorithms, extended to include the static-static DH key. Encryption keys for messages
(“message keys”) are taken straight from the stage keys of each implementation, instead of using
the “chain keys“ approach used in the Double Ratchet algorithm. We made this choice because
ART does not include hash ratcheting in its raw form, although we note that this could be
added to construct an ART-Double Ratchet.
We pass messages between sessions as byte arrays in memory, to allow us to measure relative
network costs without actually transmitting them over a network device. We use the Apache
Thrift [50] library and toolchain to serialise messages, to mimic as closely as possible an actual
wire format used for RPC.
E Terms and abbreviations
AKE Authenticated Key Exchange
ART Asynchronous Ratcheting Trees
DDH Decisional Diﬃe-Hellman
DH Diﬃe-Hellman
iO indistinguishability obfuscation
MAC Message Authentication Code
PCS Post-Compromise Security
PPT probabilistic polynomial-time
36
F Summary of changes
V1.0, June 5th, 2017
Initial version
V1.1, July 17th, 2017
• Fixed error pointed out by Richard Barnes
• Introduced explicit name (ART) for our design
V2.0, December 5th, 2017
Major changes:
• Reworked and improved computational model
– Adversary-security game interaction is explicit (via PSend and PRecv queries)
– Pseudocode algorithms take adversary messages as input and return responses
– Bookkeeping state σ now tracks implicit protocol variables
– Clariﬁed bounds in some game hops
• Redesigned Java implementation
– Implemented pairwise ratchet implementation as a comparison
– Accurate timing measurements for both including crossover point
– Graphed various metrics for a range of group sizes
• Improved related work discussion (esp. SafeSlinger) and scoping explanation
V2.1, January 18th, 2018
• Clariﬁed motivation for adding static-static DH key, and removed reference to UKS attacks
• Removed “session key” nomenclature
V2.2, May 15th, 2018
• Rewrote algorithm description and ﬁgures more operationally
• Added partnering game to security experiment
• Added reference to IETF working group
• Elaborated on usefulness and relevance of PCS
• Clariﬁed tree notation by writing both secret and public keys
• The Signal mobile app uses pairwise channels, not sender keys
V2.3, March 2nd, 2020
• Fixed typos throughout, minor improvements to writing
• Added reference to CCS 2018 version
37