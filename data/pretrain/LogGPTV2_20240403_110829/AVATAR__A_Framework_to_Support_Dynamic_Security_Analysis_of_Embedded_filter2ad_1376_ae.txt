spaces. It is also possible to enter arbitrarily long numbers as
arguments, where only the last 8 digits are actually taken into
account by the ﬁrmware code.
After the analysis of the ﬁrst stage was completed, we tried
to move to the emulation of the second stage bootloader. At
one point, in what turned out to be the initialization of the
DRAM, the execution got stuck: the proxy on the hard drive
would not respond any more, and the whole device seemed to
have crashed. Our guess was that the initialization writes the
DRAM timings and needs to be performed atomically. Since
we already knew the exact line of the crash from the execution
trace, it was easy to locate the responsible code, isolate the
corresponding function, and instruct Avatar to push its code
back to be executed natively on the hard drive.
In a similar manner, we had to mark few other functions
to be migrated to the real hardware. One example is the timer
routine, which was reading the timer value twice and then
checked that the difference was below a certain threshold (most
probably to ensure that the timer read had not been subject
to jitter). Using this technique, in few iterations we managed
to arrive at the ﬁnal Avatar conﬁguration that allowed us to
emulate the ﬁrst and second stages up to the point in which
the disk would start loading the actual operating system from
the disk’s platters.
B. Finding Vulnerabilities Into a Commercial Zigbee Device
The Econotag, shown in Figure 6, is an all-in-one device for
experimenting with low power wireless protocols based on the
IEEE 802.15.4 standard [32], such as Zigbee or 6lowpan [43].
It is built around the MC13224v System on a Chip from
Freescale. The MC13224v [47] is built upon an ARM7TDMI
microcontroller, includes several memories, peripherals and
has an integrated IEEE 802.15.4 compatible radio transceiver.
As it can be seen in Figure 5, the device includes 96KB of
RAM memory, 80 KB of ROM and a serial Flash for storing
data. The ROM memory contains drivers for several peripher-
als as well as one to control the radio, known as MACA (MAC
Accelerator), which allows to use the dedicated hardware logic
11
Fig. 6: The Econotag device. From left to right: the USB
connector, serial and JTAG to USB converter (FTDI), Freescale
MC13224v controller and the PCB 2.4 GHz antenna.
supporting radio communications (e.g., automated ACK and
CRC computation).
The goal of this experiment is to detect vulnerabilities in
the code that process incoming packets. For this purpose, we
use two Econotag devices and a program from the Freescale
demonstration kit that simulates a wireless serial connection
(wireless UART [26]) using the Simple MAC (SMAC [27])
proprietary MAC layer network stack. The program is essen-
tially receiving characters from its UART and transmitting
them as radio packets as well as forwarding the characters
received on the radio side to its serial port. Two such devices
communicating together essentially simulate a wireless serial
connection.
The data received from the radio is buffered before being
sent to the serial port. For demonstration purposes, we artiﬁ-
cially modiﬁed this buffer management to insert a vulnerabil-
ity: a simple stack-based buffer overﬂow. We then compiled
this program for the Econotag and installed it on both devices.
Avatar was conﬁgured to let the ﬁrmware run natively until
the communication between the two devices started. At this
point, Avatar was instructed to perform a context switch to
move the run-time state (registers and data memory) of one
of the devices to the emulator. At this point, the execution
proceeded in full separation mode inside the emulator using
the code loaded in ROM memory (extracted from a previous
dump), and the code loaded in RAM memory (taken from the
application). Every I/O access was forwarded to the physical
device through the JTAG connection.
The emulator was also conﬁgured to perform symbolic
execution. For this purpose, we used annotations to mark the
buffer that contains the received packet data as symbolic. Then,
we employed a state selection strategy to choose symbolic
states which maximize the code coverage, leading to a thor-
ough analysis of the function.
On the ﬁrst instruction that uses symbolic values in the
buffer, S2E would switch from concrete to symbolic exe-
cution mode. Execution will fork states when, for example,
conditional branches that depend on such symbolic values
are evaluated. After exploring 564 states, and within less
than a minute of symbolic execution, our simple arbitrary
execution detection module detected that an unconstrained
Fig. 7: The Motorola C118. The clip-on battery (on the right)
has been wired to the corresponding power pins, while the
ribbon cable is connected to the JTAG pads reachable on the
back (not shown).
symbolic value was used as a return address. This conﬁrmed
the detection of the vulnerability and also provided an example
of payload that triggers the vulnerability.
We also used Avatar to exhaustively explore all possible
states of this function on a program without the injected vulner-
ability, and conﬁrmed the absence of control ﬂow corruption
vulnerabilities that could be triggered by a network packet (that
our simple arbitrary execution detection module could detect).
C. Manipulating the GSM Network Stack of a Common Fea-
ture Phone
Our ﬁnal
test-case is centered on the analysis of the
ﬁrmware of a common GSM feature phone. In contrast with
most recent and advanced mobile phones and smartphones,
feature phones are characterized by having one single em-
bedded processor for both the network stack (i.e., GSM
baseband capabilities) and the Human-to-Machine Interface
(HMI: comprising the main Graphical User Interface, advanced
phone services, and miscellaneous applications). As such,
there is no clear code separation between different ﬁrmware
sections. On these phones, typically a real-time kernel takes
care of scheduling all the tasks for the processes currently
in execution. These are executed in the same context and
have shared access to the whole physical memory as well as
memory-mapped I/O.
12
Address Space
Interrupt vect.
ROM (bootloader)
User interrupt vector
NOR ﬂash
Unused
Internal SRAM
Unused
External SRAM
Unused
Memory mapped IO
0x00000000
0x00000020
0x00002000
0x00002020
0x00400000
0x00800000
0x00c00000
0x01000000
0x01800000
0xFFFF0000
0xFFFFFFFF
Fig. 8: Motorola C118 memory layout (respective scales not
respected).
GSM baseband stacks have already been shown to have a
large potentially exploitable attack surface [56]. Those stacks
are developed by few companies worldwide and have many
legacy parts which were not written with security in mind,
and in particular were not considering attacks coming from
the GSM infrastructure [57].
For our experiment, we used a Motorola C118, which is
a re-branded version of the Compal E88 board also found
in other Motorola feature phones. This board makes use of
the Texas Instruments “Calypso” digital baseband, which is
composed of a mask-ROM, a DSP for GSM signal decoding,
and a single ARM7TDMI processor. It also includes several
peripherals such as an RTC clock, a PWM generator for
controlling the lights and buzzer as well as a memory mapped
UART as shown in Figure 8. Some board models have JTAG
and UART ports available, which are from time to time left
enabled by manufacturers to simplify servicing devices. In our
case, we gained access to the JTAG port and used an adapter
to bridge communication between Avatar and the hardware, as
shown in Figure 7.
Some speciﬁcation documents on the Calypso chipset have
been leaked in the past, leading to the creation of home-brew
phone OS that could be run on such boards. As part of the
Osmocom-BB project, most of the platform has been reversed
and documented, and it is now possible to run a free open-
source software GSM stack on it [2]. However, we conducted
our experiments on the original Motorola ﬁrmware, in order to
assess the baseband code of an unmodiﬁed phone. Moreover,
as the GSM network code is provided as a library by the
baseband manufacturer, there is an higher chance that ﬂaws
affecting the library code would also be present in a broader
range of phones using baseband chips from that same vendor.
The phone has a ﬁrst-stage bootloader executed on hard-
13
ware reset, which can be used to re-ﬂash the ﬁrmware. After
phone setup, execution continues to the main ﬁrmware, which
is mainly composed of the Nucleus RTOS, the TI network
stack library, and of third-party code to manage the user inter-
face. The phone bootloader can be analyzed using Avatar in a
similar way as the one already described for the hard disk in
Section VI-A to discover ﬂashing commands, hidden menus
and possible backdoors. However,
the bootloader revealed
itself to be simpler than the hard drive one, supporting only
a UART command to trigger ﬁrmware ﬂashing and executing
the ﬂashed ﬁrmware, or continuing execution after a timeout
expiration.
For this reason, we focused on the analysis of the GSM
network stack, and in particular on the routines dedicated to
SMS decoding. It has already been shown in the past how
maliciously crafted SMS can cause misbehavior, ranging from
UI issues to phone crashes [44]. However, due to the lack
of a dynamic analysis platform to analyze embedded devices,
previous studies relied on blind SMS fuzzing. Our experiment
aims at improving the effectiveness of SMS fuzzing to detect
remotely exploitable execution paths.
In this scenario, Avatar was conﬁgured to start the exe-
cution of the ﬁrmware on the real device, and switch to the
emulator once the code reached the SMS receiving state (e.g.,
by sending a legitimate SMS to it through the GSM network).
Avatar was then used to selectively emulate and symbolically
explore the decoding routines. As a result of this exploration,
a user is able to detect faulty conditions, to determine code
coverage due to different inputs and to recover precise input
constraints to drive the ﬁrmware execution into interesting
areas.
In this context, Avatar uses the JTAG connection to stop the
execution on the target and later perform all synchronization
steps between the emulator and the target. All memory and
I/O accesses through JTAG are traced by Avatar to let the user
identify address mappings. When the phone reaches the SMS
receiving state, a target-to-emulator context switch happens
and the phone’s state is transferred into S2E. Using address
mapping information previously recovered through Avatar, just
the relevant memory is moved into S2E (e.g., portions of
code and the execution stack), while remaining memory is
kept on the target and forwarded on-the-ﬂy by Avatar (e.g.,
I/O regions). On this device, no selective code migration was
required.
Using this Avatar conﬁguration, the SMS payload can be
intercepted in memory and marked as symbolic by employing
the techniques shown in Section V. In particular, we wrote
Annotation functions to be triggered before entering the decod-
ing routines and we then proceeded to selectively mark some
bytes of their input arguments as symbolic. The S2E plug-in
for Arbitrary Execution Detection has been employed to isolate
interesting vulnerable cases, while other execution paths were
killed upon reaching the end of the decoding function.
The symbolic execution experiments have been performed
over several days, with the ones with larger number of sym-
bolic inputs taking up to 10 hours before ﬁlling up 60 GB
of available memory. In such case, we observed more than
120,000 states being spawned according to different constraints
solving. Unfortunately, and contrary to the other experiments,
the GSM network stack proved to be way too complex to be
symbolically analyzed without prior knowledge on the high-
level structure of the code. The analysis was clobbered by
an explosion of possible states due to many forks happening
in pointer-manipulating loops. Avatar was able to symboli-
cally explore 42 subroutines executed during SMS decoding,
without detecting any exploitable conditions. However, it was
able to highlight several situations of user-controlled memory
load, which were unfortunately too strictly constrained to be
exploited, as discussed in Section V-B.
State explosion is a well-known limitation of symbolic
execution. To mitigate the problem, a user may need to deﬁne
heuristics to avoid an excessive resource consumption. This
could be done, for example, by employing more aggressive
state selectors to enhance code coverage, and actively prune
states by looking at
this
optimizations are outside the scope of our paper. The objective
of our experiments are, in fact, limited to prove that Avatar can
be used to perform dynamic analysis of complex ﬁrmware of
embedded devices.
loops invariants [50]. However,
VII. RELATED WORK
The importance of porting dynamic analysis techniques to
different platforms has been discussed by Li and Wang [41],
who proposed a set of tools built on top of IDA Pro and the
REIL Intermediate Language to perform symbolic execution
in a portable way.
However, embedded systems have long been recognized
to be a difﬁcult target for debugging and dynamic analysis.
SymDrive [48] presents a technique based on symbolic ex-
ecution to test Linux and FreeBSD device drivers without
their device present. However, by replacing every input with
a symbolic value, this approach is hard to scale and would
suffer of state explosion on any real world ﬁrmware. In [14],
Chipounov and Candea present REVNIC, a tool based on
S2E [15] that helps to reverse engineer network device drivers.
As a case study the authors port a Windows device driver for a
common network card to a different Operating System. While
the presented approach is interesting, it relies on the presence
(and extension) of the emulated device and PCI bus in QEMU.
Instead, Avatar is hardware agnostic, as it does not need to
know how peripherals are connected, mapped and accessed.
Instead I/O can be simply forwarded to the real target and I/O
related code directly executed there.
Cui et al., adopted software symbiotes [20], an on-device
binary instrumentation to automatically insert hooks in embed-
ded ﬁrmwares. Their solution allows to insert pieces of code
that can be used to interact with the original ﬁrmware. How-
ever, while this allows some analysis (like tracing), performing
advanced dynamic analysis often requires to be able to run the
ﬁrmware code inside an emulator.
Dynamic analysis based on virtualization has already been
proposed in the past [37], also in embedded systems con-
texts [40], [31]. However, Avatar aims at overcoming many
of the limitations of pure-virtualization systems, by providing
an hybrid system where code execution can be transferred back
and forth between the device and an emulator, as well as a full
framework to orchestrate all the analysis steps.
The state migration technique employed by Avatar is
highly inﬂuenced by existing solutions been used to improve
the performance during hot-migration of virtual machines. In
particular, our approach is a simpliﬁed version of the one
proposed by Clark et al. [16], where Avatar is the arbiter of a
managed migration, which can either happen in a single stop-
and-copy phase (as in full-separation mode) or in an event-
driven pull-phase (during context switching).
The ”security by obscurity” approach is still relevant
among embedded systems manufacturers and has lead in the
past
to the discovery of major weaknesses in commonly
deployed technologies [45]. We believe that Avatar represents
a ﬂexible solution to provide a symbolic analysis environment
which can greatly speed-up such blackbox analysis cases,
aiming at automatically reverse engineer input formats [21], [9]