时，编译器会根据不同的系统替换标准类型。
C99 做了进一步调整，新增了%zd 转换说明用于 printf()显示 size_t 类型
的值。如果系统不支持%zd，可使用%u或%lu代替%zd。
5.3.2 求模运算符：%
求模运算符（modulus operator）用于整数运算。求模运算符给出其左侧
整数除以右侧整数的余数（remainder）。例如，13 % 5（读作“13求模5”）
得3，因为13比5的两倍多3，即13除以5的余数是3。求模运算符只能用于整
数，不能用于浮点数。
乍一看会认为求模运算符像是数学家使用的深奥符号，但是实际上它非
常有用。求模运算符常用于控制程序流。例如，假设你正在设计一个账单预
263
算程序，每 3 个月要加进一笔额外的费用。这种情况可以在程序中对月份求
模3（即，month % 3），并检查结果是否为0。如果为0，便加进额外的费
用。等学到第7章的if语句后，读者会更明白。
程序清单5.9演示了%运算符的另一种用途。同时，该程序也演示了
while循环的另一种用法。
程序清单5.9 min_sec.c程序
// min_sec.c -- 把秒数转换成分和秒
#include 
#define SEC_PER_MIN 60      // 1分钟60秒
int main(void)
{
int sec, min, left;
printf("Convert seconds to minutes and seconds!\n");
printf("Enter the number of seconds ( 0)
{
min = sec / SEC_PER_MIN;  // 截断分钟数
left = sec % SEC_PER_MIN;  // 剩下的秒数
printf("%d seconds is %d minutes, %d seconds.\n", sec,
264
min, left);
printf("Enter next value (
int main(void)
{
int ultra = 0, super = 0;
while (super 
int main(void)
{
int a = 1, b = 1;
int a_post, pre_b;
a_post = a++; // 后缀递增
pre_b = ++b;  // 前缀递增
printf("a  a_post  b  pre_b \n");
printf("%1d %5d %5d %5d\n", a, a_post, b, pre_b);
return 0;
}
如果你的编译器没问题，那么程序的输出应该是：
a   a_post  b   pre_b
2       1  2      2
a和b都递增了1，但是，a_post是a递增之前的值，而b_pre是b递增之后
的值。这就是++的前缀形式和后缀形式的区别（见图5.5）。
270
图5.5 前缀和后缀
a_post = a++;   // 后缀：使用a的值乊后，递增a
b_pre= ++b;    // 前缀：使用b的值乊前，递增b
单独使用递增运算符时（如，ego++;），使用哪种形式都没关系。但
是，当运算符和运算对象是更复杂表达式的一部分时（如上面的示例），使
用前缀或后缀的效果不同。例如，我们曾经建议用下面的代码：
while (++shoe 
#define MAX 100
int main(void)
272
{
int count = MAX + 1;
while (--count > 0) {
printf("%d bottles of spring water on the wall, "
"%d bottles of spring water!\n", count, count);
printf("Take one down and pass it around,\n");
printf("%d bottles of spring water!\n\n", count - 1);
}
return 0;
}
该程序的输出如下（篇幅有限，省略了中间大部分输出）：
100 bottles of spring water on the wall, 100 bottles of 
spring water!
Take one down and pass it around,
99 bottles of spring water!
99 bottles of spring water on the wall, 99 bottles of 
spring water!
Take one down and pass it around,
98 bottles of spring water!
...
273
1 bottles of spring water on the wall, 1 bottles of spring water!
Take one down and pass it around,
0 bottles of spring water!
显然，这位填词家在复数的表达上有点问题。在学完第7章中的条件运
算符后，可以解决这个问题。
顺带一提，>运算符表示“大于”，<运算符表示“小于”，它们都是关系运
算符（relational operator）。我们将在第6章中详细介绍关系运算符。
5.3.5 优先级
递增运算符和递减运算符都有很高的结合优先级，只有圆括号的优先级
比它们高。因此，x*y++表示的是(x)*(y++)，而不是(x+y)++。不过后者无
效，因为递增和递减运算符只能影响一个变量（或者，更普遍地说，只能影
响一个可修改的左值），而组合x*y本身不是可修改的左值。
不要混淆这两个运算符的优先级和它们的求值顺序。假设有如下语句：
y = 2;
n = 3;
nextnum = (y + n++)*6;
nextnum的值是多少？把y和n的值带入上面的第3条语句得：
nextnum = (2 + 3)*6 = 5*6 = 30
n的值只有在被使用之后才会递增为4。根据优先级的规定，++只作用
于n，不作用与y + n。除此之外，根据优先级可以判断何时使用n的值对表达
式求值，而递增运算符的性质决定了何时递增n的值。
如果n++是表达式的一部分，可将其视为“先使用n，再递增”；而++n则
274
表示“先递增n，再使用”。
5.3.6 不要自作聪明
如果一次用太多递增运算符，自己都会糊涂。例如，利用递增运算符改
进 squares.c 程序（程序清单5.4），用下面的while循环替换原程序中的while
循环：
while (num < 21)
{
printf("%10d %10d\n", num, num*num++);
}
这个想法看上去不错。打印num，然后计算num*num得到平方值，最后
把num递增1。但事实上，修改后的程序只能在某些系统上能正常运行。该
程序的问题是：当 printf()获取待打印的值时，可能先对最后一个参数（ ）
求值，这样在获取其他参数的值之前就递增了num。所以，本应打印：
5       25
却打印成：
6       25
它甚至可能从右往左执行，对最右边的num（++作用的num）使用5，对
第2个num和最左边的num使用6，结果打印出：
6       30
在C语言中，编译器可以自行选择先对函数中的哪个参数求值。这样做
提高了编译器的效率，但是如果在函数的参数中使用了递增运算符，就会有
一些问题。
275
类似这样的语句，也会导致一些麻烦：