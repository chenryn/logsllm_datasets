### USENIX Association
**22nd USENIX Security Symposium**

#### Fine-Grained Script-Level Access Control for Web Secrets

Current policies that specify which origins can provide scripts to a web page cannot differentiate between scripts once they are loaded. We propose a new design that uses Defensive JavaScript (DJS) to enforce fine-grained script-level access control for website secrets, such as access tokens and CSRF tokens.

#### Implementation
We implemented this design by modifying the Facebook JavaScript SDK as follows:

1. **Token Origin Registration**: The website registers a dedicated Token Origin (e.g., `open.login.yahoo.com`) with Facebook where it receives the access token. We assume the token is obtained and stored securely by this origin.
   
2. **Proxy Frame**: The token origin provides a proxy frame to the main website (e.g., `*.yahoo.com`). This frame only allows authorized scripts to use the token. The frame listens for requests signed with JSON Web Tokens (JWT) using an API key. If the signature is valid, it injects the access token into the request and forwards it to the network (using XHR or JSONP for Facebook), and returns the result.

3. **Privacy Extension**: For enhanced privacy, the mechanism can accept encrypted JWE requests and encrypt their results (omitted for simplicity).

4. **Modified Facebook SDK**: On the main website, we use a slightly modified version of the Facebook SDK that does not have access to the real access token but still provides the same client-side API to the web page. We replace the function that performs network requests (`FB.api`) with a DJS function that contains the secret API key, allowing it to produce signed requests for the proxy frame. This function only accepts requests from pre-authorized scripts and expects a serialized JWT containing the request, an identifier for the source script, and a signature with a script-specific key (derived from the API key and the script identifier). If the signature is valid, the API request is signed with the API key and forwarded to the proxy frame. This function can also enforce script-level access control; for example, it may allow cross-origin scripts to request only the username and profile picture but not to post messages.

5. **API Key Management**: The API key must be fresh for each user, which can be achieved using the user’s session or a cookie. These keys should have a lifetime limit corresponding to the cache lifetime of the scripts injected with secret tokens. Freshness can be added to signed requests to prevent replay attacks to the proxy frame.

6. **Trusted Scripts**: Each trusted script that requires access to the Facebook API is injected with a DJS header that provides a function able to sign requests to `FB.api` using its script identifier and a secret token derived from the identifier and API key. Below is a sample of the DJS code injected into trusted scripts for basic Facebook API access (`/me`) with no optional parameters:
   ```javascript
   with({
       sign_request: (function() {
           var djcl = {/*...*/};
           var id = "me.js", tok = "1f3c...";
           var _ = function(s) {
               return s == "/me" /* || s == "..." */ ? 
                   djcl.jwt.create(djcl.djson.stringify({ jti: id, req: s }), tok) : "";
           };
           return function(s) {
               if (typeof s == "string") return _(s);
           }
       })(), __proto__: null
   }) {
       // Trusted script
       FB.api(sign_request("/me"), function(r) { alert("Hello, " + r.name); });
   }
   ```

#### Evaluation
Our design not only allows websites to keep access tokens secret but also controls which scripts can use them and how (a form of API confinement). If a script given access to the API (via a script key) unintentionally leaks the capability (but not the key), our design allows the website to easily revoke its access (using a filter in `FB.api`). Our proposal significantly improves the security of Facebook clients in ways that would be difficult to replicate with standard browser security mechanisms. We only changed one method from the Facebook API, which accounts for less than 0.5% of the total code. Our design maintains DOM access to the API, which would be difficult to achieve with frames. Without considering DJCL, each of the DJS functions added to trusted scripts is less than 20 lines of code. We type-checked our code for defensiveness and verified with ProVerif that it provides the expected script-level authorization guarantees and does not leak its secrets (API key, script tokens) to the browser.

### Secure Client-Side Encryption API

In Section 2, we showed that encrypted cloud storage applications are still vulnerable to client-side web attacks like XSS (e.g., ConfiChair, Mega) that can steal their keys and completely break their security. Finding and eliminating injection attacks from every page is not always easy or feasible. Instead, we propose a robust design for client-side crypto APIs that are secure despite XSS attacks.

1. **Defensive Crypto Library**: We propose using a defensive crypto library rather than Java applets (Helios, Wuala, and ConfiChair) or non-defensive JavaScript libraries (Mega, SpiderOak). In the case of Java applets, this also has the advantage of significantly increasing the performance of the application (DJCL is up to 100 times faster on large inputs) and reducing the attack surface by removing the Java runtime from the trusted computing base.

2. **Encrypted Local Storage**: We propose a new encrypted local storage mechanism for applications that need to store encryption keys in the browser. This mechanism relies on the availability of an embedded session key specific to the browser session and embedded into code served by the script server, but not given to the host page.

As a practical example, we show how to use both these mechanisms to make the ConfiChair conference management system more resilient against XSS attacks. ConfiChair uses the following cryptographic API (types shown for illustration):

- `derive_secret_key`: `(input: string, salt: string) -> key: string`
- `base64_encode, base64_decode`: `string -> string`
- `encryptData, decryptData`: `(data: string, key: string) -> string`
- `encryptKeypurse`: `(key: string, keypurse: json) -> string`
- `decryptKeypurse`: `(key: string, string) -> keypurse: json`

When the user logs in, a script on the login page calls `derive_secret_key` with the password to compute a secret user key, which is stored in `localStorage`. When the user clicks on a particular document to download (a paper or a review), the conference page downloads the encrypted PDF along with an encrypted keypurse for the user. It decrypts the keypurse with the user key, stores it in `localStorage`, and uses it to decrypt the PDF. The main vulnerability here is that any same-origin script can steal the user key (and keypurse) from local storage.

We write a drop-in replacement for this API in DJS. Instead of returning the real user key and keypurse in `derive_secret_key` and `decryptKeypurse`, our API returns keys encrypted (wrapped) under a sessionKey. When `decryptData` is called, it transparently unwraps the provided key, never exposing the user key to the page. Both the encrypted user key and keypurse can be safely stored in `localStorage` because it cannot be read by scripts that do not know the sessionKey. We protect the integrity of these keys with authenticated encryption.

Our design relies on a secure script server that can deliver defensive scripts embedded with session keys. Specifically, this is a web service running in a trusted, isolated origin (a subdomain like `secure.confichair.org`) that accepts GET requests with a script name and a target origin as parameters. It authenticates the target origin by verifying the `Origin` header on the request and may reject requests for some scripts from some origins. It then generates a fresh sessionKey, embeds it within the defensive script, and sends it back as a GET response. The sessionKey remains the same for all subsequent requests in the same browsing session (using cookies).

#### Evaluation
Our changes to the ConfiChair website amount to replacing its Java applet with our own cryptographic API and rewriting two lines of code from the login page. The rest of the website works without further modification while enjoying significantly improved security against XSS attacks. Using ProVerif, we analyzed our API (with an idealized model of the script server and login page) and verified that it does not leak the user key, keypurse, or sessionKey. Our cryptographic API looks similar to the upcoming Web Cryptography API standard, except that it protects keys from same-origin attackers, whereas the proposed API does not.

### Related Work
Attacks similar to the ones we describe in Section 2 have been reported before in the context of password manager bookmarklets [1], frame busting defenses [35], single sign-on protocols [6, 36, 41], payment processing components [42], smartphone password managers [9], and encrypted cloud storage [5, 10]. These works provide further evidence for the need for defensive programming techniques and automated analysis for web applications.

Several works explore the use of frames and inter-frame communication to isolate untrusted components on a page or a browser extension by relying on the same-origin policy [2, 7, 8, 27, 44]. Our approach is orthogonal; we seek to protect scripts against same-origin attackers using defensive programming in standard JavaScript. Moreover, DJS scripts require fewer privileges than frames (they cannot open windows, for example) and, unlike components written in full HTML, DJS programs can be statically analyzed for security.

A variety of JavaScript subsets attempt to protect trusted web pages from untrusted [20, 26, 28, 29, 31, 32, 34, 39]. Our goal is instead to run trusted components within untrusted web pages, hence our security goals are stronger, and our language restrictions are different. For example, these subsets rely on first-starter privilege, meaning they only offer isolation on web pages where their setup code runs first so that it can restrict the code that follows. Our scripts do not need such privileges.

[21] proves full abstraction for a compiler from f* (a subset of ML) to JavaScript. Their theorem ensures that programmers can reason about deployed f* programs entirely in the semantics of the source language, ignoring JavaScript-specific details. As such, their translation is also robust against corruption of the JavaScript environment. However, there are also some significant limitations. In particular, their theorems do not account for HTML-level attackers who can, say, open frames and call their functions. We also reported flaws in their translation (since fixed in their online version). In comparison, our programs are written directly in a subset of JavaScript and can defend themselves against stronger threats, including full HTML adversaries that may execute before, after, and concurrently with our programs.

Dynamic information flow analyses for various subsets of JavaScript [3, 17, 24] enforce a security property called noninterference. Our static type system enforces defensiveness, and we analyze security by model extraction. Relating defensiveness to noninterference remains future work; we conjecture that DJS may be more suitable than JavaScript to static information flow analysis.

### Conclusion
Given the complexity and heterogeneity of the web programming environment and the wide array of threats it must contend with, it is difficult to believe that any web application can enjoy formal security guarantees that do not break easily in the face of concerted attack. Instead of relying on the absence of web vulnerabilities, this paper presents a defense-in-depth strategy. We start from a small hardened core (DJS) that makes minimal assumptions about the browser and JavaScript runtime and then build upon it to obtain defensive security for critical components. We show how this strategy can be applied to existing applications, with little change to their code but a significantly increased security. We believe our methods scale, and lifting these results to protect full websites that use HTML and PHP is ongoing work.

### Acknowledgements
The authors would like to thank David Wagner, Nikhil Swamy, and the anonymous reviewers for their helpful comments leading to significant improvements to this paper. We would also like to acknowledge the Mozilla and Facebook security teams for prompt and constructive discussions about our attacks. Bhargavan and Delignat-Lavaud are supported by the ERC Starting Grant CRYSP. Maffeis is supported by EPSRC grant EP/I004246/1.

### References
[1] B. Adida, A. Barth, and C. Jackson. Rootkits for JavaScript environments. In WOOT, 2009.
[2] D. Akhawe, P. Saxena, and D. Song. Privilege separation in HTML5 applications. In USENIX Security, 2012.
[3] T. Austin and C. Flanagan. Multiple facets for dynamic information flow. In POPL, pages 165–178, 2012.
[4] M. Avalle, A. Pironti, D. Pozza, and R. Sisto. JavaSPI: A framework for security protocol implementation. International Journal of Secure Software Engineering, 2:34–48, 2011.
[5] C. Bansal, K. Bhargavan, A. Delignat-Lavaud, and S. Maffeis. Keys to the cloud: Formal analysis and concrete attacks on encrypted web storage. In POST, 2013.
[6] C. Bansal, K. Bhargavan, and S. Maffeis. Discovering concrete attacks on website authorization by formal analysis. In CSF, pages 247–262, 2012.
[7] A. Barth, C. Jackson, and W. Li. Attacks on JavaScript mashup communication. In W2SP, 2009.
[8] A. Barth, C. Jackson, and J.C. Mitchell. Securing browser frame communication. In USENIX Security, 2008.
[9] A. Belenko and D. Sklyarov. “Secure password managers” and “Military-grade encryption” on smartphones: Oh, really? Technical report, Elcomsoft Ltd., 2012.
[10] K. Bhargavan and A. Delignat-Lavaud. Web-based attacks on host-proof encrypted storage. In WOOT, 2012.
[11] K. Bhargavan, A. Delignat-Lavaud, and S. Maffeis. Defensive JavaScript website with testbed, technical report, and supporting materials. http://www.defensivejs.com, 2013.
[12] K. Bhargavan, C. Fournet, A. D. Gordon, and S. Tse. Verified interoperable implementations of security protocols. In CSFW, pages 139–152, 2006.
[13] B. Blanchet and B. Smyth. ProVerif: Automatic Cryptographic Protocol Verifier, User Manual and Tutorial. http://www.proverif.inria.fr/manual.pdf.
[14] P. Canning, W. Cook, W. Hill, W. Olthoff, and J. Mitchell. F-bounded polymorphism for object-oriented programming. In FPCA, pages 273–280, 1989.
[15] L. Cardelli. Extensible records in a pure calculus of subtyping. In Theoretical Aspects of Object-Oriented Programming, pages 373–425. MIT Press, 1994.
[16] D. Crockford. ADsafe: Making JavaScript safe for advertising. http://www.adsafe.org/, 2008.
[17] W. De Groef, D. Devriese, N. Nikiforakis, and F. Piessens. FlowFox: a web browser with flexible and precise information flow control. In CCS, pages 748–759, 2012.
[18] D. Dolev and A.C. Yao. On the security of public key protocols. IEEE Transactions on Information Theory, IT–29(2):198–208, 1983.
[19] M. Finifter, A. Mettler, N. Sastry, and D. Wagner. Verifiable functional purity in Java. In CCS, pages 161–174. ACM, 2008.
[20] M. Finifter, J. Weinberger, and A. Barth. Preventing Capability Leaks in Secure JavaScript Subsets. In BDSS, 2010.
[21] C. Fournet, N. Swamy, J. Chen, P. Dagand, P. Strub, and B. Livshits. Fully abstract compilation to JavaScript. In POPL’13, 2013.
[22] P. Haack. JSON hijacking. http://hhacked.com/2009/06/25/json-hijacking.aspx, 2009.
[23] D. Hardt. The OAuth 2.0 authorization framework. IETF RFC 6749, 2012.
[24] D. Hedin and A. Sabelfeld. Information-flow security for a core of JavaScript. In CSF, pages 3–18, 2012.
[25] IETF. JavaScript Object Signing and Encryption (JOSE), 2012. http://tools.ietf.org/wg/jose/.
[26] S. Maffeis, J. C. Mitchell, and A. Taly. Isolating JavaScript with filters, rewriting, and wrappers. In ESORICS’09, 2009.
[27] L. Meyerovich, A. Porter Felt, and M. Miller. Object views: Fine-grained sharing in browsers. In WWW, 2010.
[28] L. Meyerovich and B. Livshits. ConScript: Specifying and enforcing fine-grained security policies for JavaScript in the browser. In IEEE S&P, 2010.
[29] J. Mickens and M. Finifter. Jigsaw: Efficient, low-effort mashup isolation. In USENIX Web Application Development, 2012.
[30] R. Milner. Functions as processes. In Automata, Languages and Programming, volume 443, pages 167–180. 1990.
[31] P. Phung, D. Sands, and D. Chudnov. Lightweight self-protecting JavaScript. In ASIACCS, 2009.
[32] J. Politz, S. Eliopoulos, A. Guha, and S. Krishnamurthi. ADsafety: Type-based verification of JavaScript sandboxing. In USENIX Security, 2011.
[33] F. Pottier. Type inference in the presence of subtyping: from theory to practice. Research Report 3483, INRIA, September 1998.
[34] C. Reis, J. Dunagan, H. Wang, O. Dubrovsky, and S. Esmeir. BrowserShield: Vulnerability-driven filtering of dynamic HTML. ACM Transactions on the Web, 1(3), 2007.
[35] G. Rydstedt, E. Bursztein, D. Boneh, and C. Jackson. Busting frame busting: a study of clickjacking vulnerabilities at popular sites. In W2SP’10, 2010.
[36] J. Somorovsky, A. Mayer, A. Worth, J. Schwenk, M. Kampmann, and M. Jensen. On breaking SAML: Be whoever you want to be. In WOOT, 2012.
[37] E. Stark, M. Hamburg, and D. Boneh. Symmetric cryptography in JavaScript. In ACSAC, pages 373–381, 2009.
[38] B. Sterne and A. Barth. Content Security Policy 1.0. W3C Candidate Recommendation, 2012.
[39] A. Taly, Ú. Erlingsson, J. C. Mitchell, M. Miller, and J. Nagra. Automated analysis of security-critical JavaScript APIs. In IEEE S&P, 2011.
[40] Google Caja Team. A source-to-source translator for securing JavaScript-based web. http://code.google.com/p/google-caja/.
[41] R. Wang, S. Chen, and X. Wang. Signing me onto your accounts through Facebook and Google: A traffic-guided security study of commercially deployed single-sign-on web services. In IEEE S&P, pages 365–379. IEEE Computer Society, 2012.
[42] R. Wang, S. Chen, X. Wang, and S. Qadeer. How to shop for free online - security analysis of cashier-as-a-service based web stores. In IEEE S&P, pages 465–480, 2011.
[43] M. Zalewski. The Tangled Web. No Starch Press, November 2011.
[44] L. Zhengqin and T. Rezk. Mashic compiler: Mashup sandboxing based on inter-frame communication. 2012.