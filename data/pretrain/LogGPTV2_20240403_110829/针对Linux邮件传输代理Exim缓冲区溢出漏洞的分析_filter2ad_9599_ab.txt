      3771 int
      3772 smtp_setup_msg(void)
      3773 {
      3774 int done = 0;
      3775 BOOL toomany = FALSE;
      3776 BOOL discarded = FALSE;
      3777 BOOL last_was_rej_mail = FALSE;
      3778 BOOL last_was_rcpt = FALSE;
      3779 void *reset_point = store_get(0);
      3780
      3781 DEBUG(D_receive) debug_printf("smtp_setup_msg enteredn");
      3782
      3783 /* Reset for start of new message. We allow one RSET not to be counted as a
      3784 nonmail command, for those MTAs that insist on sending it between every
      3785 message. Ditto for EHLO/HELO and for STARTTLS, to allow for going in and out of
      3786 TLS between messages (an Exim client may do this if it has messages queued up
      3787 for the host). Note: we do NOT reset AUTH at this point. */
      3788
      3789 smtp_reset(reset_point);
###  漏洞利用步骤
为了充分利用这一点，解码后的Base64数据下的块应该易于被释放和控制。经过多次尝试，我们发现sender_host_name是一个比较不错的选择。我们对堆布局进行了调整，为Base64数据保留了一个空闲的块，位于sender_host_name之前。
  1. 将一个较大的块放入未分类容器中  
首先，我们发送一个带有较长主机名称的EHLO信息，以使其分配及释放，并在未分类容器中保留一个0x6060长度（3个Storeblock长度）的块。
  2. 获得第一个Storeblock  
然后，我们通过发送一个无法识别的字符串，来触发store_get()，并在释放的块内分配Storeblock。
  3. 获得第二个Storeblock并释放第一个Storeblock  
我们再次发送EHLO消息，以此获得第二个存储区。由于EHLO完成后会调用smtp_reset，因此第一个块会被依次释放。  
当堆布局准备好后，我们可以借助单字节溢出（Off-by-one）来覆盖原始块大小。我们将0x2021修改为0x20f1，这样就能让块稍微扩大一些。
  1. 发送Base64数据并触发单字节溢出  
如果想要触发单字节溢出，我们就需要使用一个AUTH命令来发送Base64数据。溢出的字节正好可以覆盖下一个块的第一个字节，并能够扩展下一个块。
  2. 将块调整为合适大小  
由于此时我们已经将块进行了扩展，那么下一个块的起始就变为了原来块的内部。因此，我们需要让它看起来像是一个正常的块，从而通过glibc的检查。在这里，我们需要空字节和不可打印字符来实现伪造块大小的目的，所以我们要发送另一个Base64字符串。
  3. 释放扩展块  
因为我们还暂时不能直接对块进行编辑，所以首先要释放块，随后才能控制扩展块的内容。也就是说，我们应该发送一个新的EHLO消息来释放掉此前的主机名。然而，一条正常的EHLO消息会调用smtp_reset，这可能导致程序中断或崩溃。为了避免这种情况，我们要发送一个无效的主机名称，比如+。
  4. 覆盖重叠Storeblock的下一个指针
在块被释放后，我们可以使用AUTH对其进行检索，并覆盖部分重叠的Storeblock。这里，我们使用一种称为“部分写入（Partial
Write）”的技巧。借助该技巧，我们可以在不破坏地址空间布局随机化（ASLR）的情况下对指针进行修改。我们部分地改变了包含访问控制列表（ACL）字符串的Storeblock的下一个指针。ACL字符串被一组全局指针指向，例如：
    uschar *acl_smtp_auth;
    uschar *acl_smtp_data;
    uschar *acl_smtp_etrn;
    uschar *acl_smtp_expn;
    uschar *acl_smtp_helo;
    uschar *acl_smtp_mail;
    uschar *acl_smtp_quit;
    uschar *acl_smtp_rcpt;
这些指针在Exim进程开始时会进行初始化，并按照配置进行相应的设置。例如，如果在配置中有一行“acl_smtp_mail =
acl_check_mail”，那么指针acl_smtp_mail会指向字符串acl_check_mail。不管什么时候使用到MAIL
FROM，Exim都会进行一次ACL检查，并首先扩展acl_check_mail。在扩展时，Exim尝试在遇到${run{cmd}}时执行命令。因此，只要我们能够控制ACL字符串，就可以实现代码执行。在这里，我们并不需要直接劫持程序控制流，所以我们可以轻松地绕过诸如位置独立可执行文件（PIE）、NX等缓解措施。
  1. 重置Storeblock并检索ACL Storeblock  
现在，ACL Storeblock位于链表之中。一旦smtp_reset()被触发，它就会被释放，然后我们可以通过分配多个块来再次对其进行检索。
  2. 覆盖ACL字符串并触发ACL检查  
最后，我们覆盖包含ACL字符串的整个块。之后就可以发送EHLO、MAIL、RCPT等命令来触发ACL检查。一旦我们能触及配置中定义的ACL，就可以实现远程代码执行。
## 修复方法
升级到4.90.1版本或以上版本
## 时间节点
2018年2月5日 09:10 将漏洞情况报告给Exim  
2018年2月6日 23:23 获得CVE编号  
2018年2月10日 18:00 厂商发布补丁
## 贡献
本漏洞由DEVHORE研究团队的Meh发现。
## 参考
## 堆开发的相关资料
 （中文）  
 （中文）  