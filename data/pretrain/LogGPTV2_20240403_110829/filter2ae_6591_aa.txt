**作者：SungLin@知道创宇404实验室  
时间：2019年9月18日 **
### 0x00 信道的创建、连接与释放
通道的数据包定义在MCS Connect Inittial PDU with GCC Conference Create
Request中，在rdp连接过程如下图所示：
![
](https://images.seebug.org/content/images/2019/09/875ffe2f-8970-4a71-944a-8e57e66419c9.png-w331s)
信道创建数据包格式如下：
![
](https://images.seebug.org/content/images/2019/09/67bfb853-923a-4713-b454-eedcedfe8690.png-w331s)
在MCS Connect Inittial中属于Client Network
Data数据段，`MS_T120`将会在连接一开始的时候通过函数`termdd!_IcaRegisterVcBin`创建一个虚拟通道id是0x1f大小为0x18的结构体，之后就调用`termdd!IcaCreateChannel`开始创建大小为0x8c的信道结构体之后将会与虚拟通道id是0x1f绑定，也就是这个结构体将会被我们利用
![
](https://images.seebug.org/content/images/2019/09/3da4ddff-9147-425a-98cb-63fd18817561.png-w331s)
信道的定义字段主要是名字加上配置，配置主要包括了优先级等
![
](https://images.seebug.org/content/images/2019/09/4c684559-17fb-4ada-8783-119605ab21d6.png-w331s)
在server对MCS Connect Inittial应答包，将会依次给出对应虚拟通道的id值：
![
](https://images.seebug.org/content/images/2019/09/8399d56d-a63c-4e5e-9379-ac1ed5f75f1b.png-w331s)
在rdp内核中依次注册的值对应应该是0、1、2、3,
MS_T120信道将会通过我们发送的用户虚拟id为3的值再一次绑定，首先通过`termdd!_IcaFindVcBind`找到了刚开始注册的虚拟通道id是0x1f，如下所示：
![
](https://images.seebug.org/content/images/2019/09/30c7c24c-e2f6-4a9e-834f-5ffcff061b0b.png-w331s)
但是在`termdd!_IcaBindChannel`时，却将我们自定义的id值为3与信道结构体再一次绑定在一起了,此信道结构体就是MS_T120
![
](https://images.seebug.org/content/images/2019/09/37334a80-917c-42c6-bc32-7b32a95c471a.png-w331s)
同时我们自己的用户id将内部绑定的0x1f给覆盖了
![
](https://images.seebug.org/content/images/2019/09/ef13896d-dd82-44a4-afd4-61baed01c3f1.png-w331s)
我们往信道MS_T120发送数据主动释放其分配的结构体，其传入虚拟通道id值为3通过函数`termdd!IcaFindChannel`在channeltable中查找返回对应的信道结构体：
![
](https://images.seebug.org/content/images/2019/09/37329360-87ff-41e8-be59-d1cdb08a3367.png-w331s)
下图为返回的MS_T120信道结构体，其中0xf77b4300为此信道可调用的函数指针数组：
![
](https://images.seebug.org/content/images/2019/09/48865276-a416-4b76-b675-a827b0c52d05.png-w331s)
在这个函数指针数组中主要存放了三个函数，其中对应了`termdd!IcaCloseChannel`、`termdd!IcaReadChannel`、`termdd!IcaWriteChannel`
![
](https://images.seebug.org/content/images/2019/09/1fbba492-81a0-4a02-87a3-f1e326df08fd.png-w331s)
我们传入释放MS_T120信道的数据如下，字节大小为0x12，主要数据对应了0x02
![
](https://images.seebug.org/content/images/2019/09/761329ec-0f71-429f-bb19-dbc3c654e38c.png-w331s)
之后将会进入`nt! IofCompleteRequest`函数，通过apc注入后，将会通过`nt!
IopCompleteRequest`和`nt!IopAbortRequest`进行数据请求的响应，最终在`termdd!IcaDispatch`完成我们发送数据的的请求，`_BYTE
v2`就是我们发送的数据，所以我们发送的数据0x02将会最终调用到IcaClose函数进入IcaCloseChannel函数，最后主动释放掉了`MS_T120`信道结构体
![
](https://images.seebug.org/content/images/2019/09/7f6414b9-4ee6-441f-85c6-c13c6b55472e.png-w331s)
![
](https://images.seebug.org/content/images/2019/09/f6022d24-1974-483c-812a-1df106db9f8c.png-w331s)
### 0x01 通过RDPDR信道进行数据占位
我们先来了解下rdpdr信道，首先rdpdr信道是文件系统虚拟通道扩展，该扩展在名为rdpdr的静态虚拟通道上运行。目的是将访问从服务器重定向到客户端文件系统，其数据头部将会主要是两种标识和PacketId字段组成：
![
](https://images.seebug.org/content/images/2019/09/215c851b-d7fa-4a8b-aa41-71fa873ff775.png-w331s)
在这里我们刚好利用到了rdpde客户端name响应的数据来进行池内存的占位
![
](https://images.seebug.org/content/images/2019/09/e73ccc73-c729-4d99-9ac5-1a5600cf1643.png-w331s)
在完全建立连接后，将会创建rdpdr信道的结构体
![
](https://images.seebug.org/content/images/2019/09/722a1a88-0a55-47f2-86d9-4891684a6709.png-w331s)
在window7中，在建立完成后接收到server的rdpdr请求后，通过发送客户端name响应数据，将会调用到`termdd!
IcaChannelInputInternal`中的ExAllocatePoolWithTag分配非分页池内存，并且其长度是我们可以控制的，基本满足了UAF利用的需求：
![
](https://images.seebug.org/content/images/2019/09/91286064-8fb6-4a7a-9ef8-e8f6f4fcf946.png-w331s)
可是在windowsxp中，直接发送client name request将会导致内存分配失败，直接进入`termdd!
_IcaCopyDataToUserBuffer`,并且在Tao Yan and Jin Chen[1]一文中也提到了通过发送client name
request在触发一定的条件后将会绕过`termdd!_IcaCopyDataToUserBuffer`而进入ExAllocatePoolWithTag分配我们想要的非分页内存，而打破条件如下：
![
](https://images.seebug.org/content/images/2019/09/1770153a-ffc4-4ea6-b942-733b048f43cd.png-w331s)
我们先来看看最开始信道结构体的创建，我们可以发现从一开始创建信道结构体的时候，将会出现两个标志，而这两个标志是按照地址顺序排列的，而在上面需要打破的条件中，只要channelstruct
+0x108的地址存放的是同一个地址，循环就会被break
![
](https://images.seebug.org/content/images/2019/09/572d112f-67e0-468c-9097-8616677a57b5.png-w331s)
我们发送一个正常的rdpdr的name request数据包，头部标识是0x7244和0x4e43
经过`termdd!_IcaCopyDataToUserBuffer`之后，将会进入`nt!IofCompleteRequest`，在响应请求后进入`rdpdr!DrSession::ReadCompletion`,此函数处理逻辑如下，其将会遍历一个链表，从链表中取出对应的vftable函数数组
![
](https://images.seebug.org/content/images/2019/09/de5be446-bf47-4c39-b6fa-496a298bdb5e.png-w331s)
遍历第一次取出第一张函数数组
![