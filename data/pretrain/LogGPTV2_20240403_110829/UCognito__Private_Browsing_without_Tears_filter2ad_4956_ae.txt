//cert8.db
//.pki/nssdb/cert9.db
//History
//{Login Data, Web Data}
//Bookmarks
//Preferences
//Preferences
//Origin Bound Certs
//.pki/nssdb/cert9.db
// with XPCOM components
//{extensions, extensions.json}
// with NaCl support
//{Extensions, Local Extension Settings}
Table 5: Mapping of each type of persistent data in Table 1 to the underlying file that contains it. It is possible that multiple types of persistent data is mapped to
the same file, for example, for both Firefox and Chrome, browsing history and download entries are all persisted in the same file.
Website
Google.com
Bing.com
Twitter.com
Facebook.com
Base UCOGNITO Overhead
0.79%
0.29%
0.92%
0.63%
279.6 ms
208.4 ms
1030.3 ms
446.7 ms
277.4 ms
207.8 ms
1020.9 ms
443.9 ms
Table 8: Page loading time in Mozilla Firefox, with and without UCOGNITO.
The private-aware browsing with UCOGNITO incurs negligible overhead
(<10 ms).
of the time, it shows around 1% overhead; even the worst case only
incurs 2.5% overhead. This shows that the overhead introduced by
UCOGNITO is very negligible in practice.
7. DISCUSSION
In addition, we further discuss the advantages of UCOGNITO and
its other potential applications.
Personalized private mode. UCOGNITO aims to provide person-
alized private mode instead of setting a model solution for a single
private mode implementation. We respect that every user has his
or her unique privacy needs, which might not be satisfied by the
default policy provided by browser vendors. Therefore, a primary
design goal and advantage of UCOGNITO is that complete control
is given to the end-users with regard to private browsing.
Portable architecture. UCOGNITO is not designed solely for
browsers, in fact, we believe that UCOGNITO can be readily ported
to support other applications that are yet to have an private mode
available. For example, similar to not leaving traces about browsing
activities, users of video players might not want the player to leave
traces about the video played, for example, recording the filename
in the playlist. But to the best of our knowledge, there is no player
that provides this functionality. Users have to manually delete the
entry from playlist and still they are not assured that there might
be traces left in other places. UCOGNITO can handle this situation
perfectly by redirect any write to filesystem to a temporary location
and delete this location after the private session. In fact, we believe
UCOGNITO can be ported to multiple applications with minimal
modifications.
Cross-platform design. All of the underlying techniques used
by UCOGNITO are available since Linux kernel 3.17, hence, there
is no technical obstacle to port UCOGNITO to other Linux-based
OSes such as Android or Firefox OS whose users might have more
privacy incentives to use private mode.
In addition, most non-
Linux based OSes have similar substitutes of the core techniques
we use. For example, ptrace used in UCOGNITO for system call
hooking is already available in Mac OS and can be substituted by
API hooking [5] in Microsoft Windows.
8. RELATED WORK
Since UCOGNITO deals with problems in private browsing using
filesystem isolation, we compare our approach to the related work.
Private browsing. Private browsing is the first line of work most
closely related to our work, and research in this domain mainly
focus on two aspects. First, previous studies focus on measuring and
preventing privacy leak of a web browser to the persistent storage.
Aggarwal et al. [1] reviewed how private mode is implemented in
mainstream browsers. They found the implementation of private
mode in the browser does not provide enough privacy guarantee.
Browsing history, DNS cache, swap files, and extensions could
undermine the privacy guarantees. They developed a technical
mechanism that prevents browser extensions from unintentionally
leaving traces about private activities. Heule et. al. [14] proposed
a new extension system design based on MAC to protect users’
privacy. While these works only handles unintentional leaving of
traces from the extensions, UCOGNITO can protect both reading of
profile data and leaving of traces; also, not only for the extensions,
the protection from UCOGNITO works on the whole web browser.
Lerner el. al. [18] analyzed browser extensions to check whether
the extensions are violating privacy under private mode. While their
work is a static tool that only detects the violation, UCOGNITO is a
runtime tool that works on both detection and prevention of privacy
violation during the execution of the web browser. Gao et. al. [11]
did a survey on the user perception of private browsing. They discov-
ered several mismatches between private browsing implementation
and the user expectations. In our work, we did through analysis
on the privacy leaks and traces of private mode that supports their
study, and we try to solve the problem of mismatch by building a
user-configurable policy to get back the control of data from the web
browser developer to the user, in order to meet their expectation.
On the other hand, previous studies attempt to perform web brows-
ing without tracking. To achieve this goal, a number of studies have
been performed [10, 21, 28, 30]. However, these works are orthogo-
nal to our work in that they attempt to prevent privacy leak to the
network while our work addresses the problem of privacy leak to
the persistent storage. In addition, previous works for attacking
privacy using browser fingerprinting based on software/hardware
configurations [25, 26] are out-of-scope, while UCOGNITO can de-
fend against user fingerprinting based on the traces such as cookie
and extension storage like Evercookie [16]. UCOGNITO can be
configured to delete all traces after the browser session closes.
Sandbox and isolation mechanisms.
In terms of technical ap-
proach, our work resembles application sandboxing mechanisms
that separate code execution in an isolated environment and undo
its effect. In the past, many of such mechanisms have been de-
veloped, e.g., Cowdancer [32], FL-COW [20], Alcatraz [19], and
MBox [17]. They could prevent an untrusted program from modi-
fying filesystem by layering a sandbox filesystem on top of actual
filesystem. Although sharing a similar idea – layering filesystem
– with these previous mechanisms, our work has a completely dif-
ferent focus. Rather than preventing an untrusted program from
modifying filesystem, our work primarily utilizes the layered filesys-
tem to provide privacy guarantees. There are several other solutions
that isolate the whole environment of the application from the other
applications, or even from the operating system. Onarlioglu et al.
introduce PRIVEXEC [27], which provides a privacy guarantee for
the application execution environment. Virtual machines are fre-
quently used for the isolation mechanisms. Previous works such as
Overshadow [6], Storage Capsule [4], and Qubes OS [31] are mech-
anisms that provide strong isolation based on the virtual machine.
From the perspective of implementation, many of aforementioned
mechanisms incur OS kernel modification which significantly nar-
rows their compatibility, (e.g., FL-COW, and PRIVEXEC), or re-
quires virtualization that incurs a high runtime performances penalty.
In contrast, we emphasize that UCOGNITO is a light weight scheme
that requires no changes to the OS kernel nor applications.
9. CONCLUSION
In this paper, we have presented a new approach to implement
private browsing. Our work was motivated by the observations that
private browsing is not implemented consistently and correctly in
major browsers. We developed a systematic approach to identify that
browsers such as Chrome and Firefox do not clear some of the traces
left behind by a private browsing session, and thus compromising
privacy goals. We analyzed the browser source code to learn that
developers have to put in many conditional checks to invoke the
appropriate logic for the current browsing mode (i.e., private or
public) .
Our new approach relieves developers from having to carefully
consider private browsing, and more importantly, produces a consis-
tent and correct private browsing mode across browsers. The main
idea is to overlay the actual filesystem with a sandbox filesystem
when the browser is in private browsing mode, so that no unintended
leakage is allowed and no persistent modification is stored. We
have implemented a prototype system called UCOGNITO on Linux.
UCOGNITO requires no change to browsers and the OS kernel be-
cause the layered sandbox filesystem is implemented by interposing
system calls. Our evaluations show that UCOGNITO, when applied
to Chrome and Firefox, stops all known privacy leaks identified by
prior work and our current study. In addition, UCOGNITO incurs
only negligible performance overhead (1%-2.5%).
10. ACKNOWLEDGMENT
We thank Frank Wang and the anonymous reviewers for their
helpful feedback, as well as our operations staff for their proof-
reading efforts. This research was supported by the NSF award
CNS-1017265, CNS-0831300, CNS-1149051 and DGE-1500084,
by the ONR under grant N000140911042 and N000141512162, by
the DHS under contract N66001-12-C-0133, by the United States
Air Force under contract FA8650-10-C-7025, by the DARPA Trans-
parent Computing program under contract DARPA-15-15-TC-FP-
006, and by the ETRI MSIP/IITP[B0101-15-0644]. Any opinions,
findings, conclusions or recommendations expressed in this material
are those of the authors and do not necessarily reflect the views of
the NSF, ONR, DHS, United States Air Force or DARPA.
References
[1] G. Aggarwal, E. Bursztein, C. Jackson, and D. Boneh. An
analysis of private browsing modes in modern browsers. In
Proceedings of the 19th USENIX Security Symposium (Secu-
rity), Washington, DC, Aug. 2010.
[2] E. Akhgari and M. Connor. Firefox3.1 / PrivateBrowsing /
FunctionalSpec, Sept. 2008. https://wiki.mozilla.org/
PrivateBrowsing.
[3] P. Battre. Chrome / Preferences / Incognito-Profile, May 2015.
https://www.chromium.org/developers/design-
documents/preferences#TOC-Incognito-Profile.
[4] K. Borders, E. Vander Weele, B. Lau, and A. Prakash. Pro-
tecting confidential data on personal computers with storage
capsules. Aug. 2009.
[5] J. Bremer.
Intercepting System Calls on x86_64 Win-
dows, May 2012. http://jbremer.org/intercepting-
system-calls-on-x86_64-windows/.
[6] X. Chen, T. Garfinkel, E. C. Lewis, P. Subrahmanyam, C. A.
Waldspurger, D. Boneh, J. Dwoskin, and D. R. Ports. Over-
shadow: a virtualization-based approach to retrofitting pro-
tection in commodity operating systems. In ACM SIGOPS
Operating Systems Review, volume 42, pages 2–13. ACM,
2008.
[7] Chrome Web Store.
Page Load Time.
https:
//chrome.google.com/webstore/detail/page-load-
time/fploionmjgeclbkemipmkogoaohcdbig, July 2014.
Accessed: 2015-05-16.
[8] M. Davidov.
The Double-edged Sword of HSTS
Privacy, Apr.
https:
Persistence
//www.leviathansecurity.com/blog/the-double-
edged-sword-of-hsts-persistence-and-privacy/.
2012.
and
[9] W. Drewry. SECure COMPuting with filters, Jan. 2012. http:
//lwn.net/Articles/498231/.
[10] M. Fredrikson and B. Livshits. RePriv: Re-imagining Content
Personalization and In-browser Privacy. In Proceedings of the
32nd IEEE Symposium on Security and Privacy (Oakland),
pages 131–146, Oakland, CA, May 2011.
[11] X. Gao, Y. Yang, H. Fu, J. Lindqvist, and Y. Wang. Private
browsing: An inquiry on usability and privacy protection. In
Proceedings of the 13th Workshop on Privacy in the Electronic
Society (WPES), Nov. 2014.
[12] Google Inc.
Let others browse Chrome as a guest.
https://support.google.com/chrome/answer/
6130773?p=ui_guest&rd=1, May 2015.
2015-05-16.
Accessed:
[13] Google,
Inc.
Octane 2.0 JavaScript Benchmark.
http://octane-benchmark.googlecode.com/svn/
latest/index.html, May 2015. Accessed: 2015-05-15.
[14] S. Heule, D. Rifkin, A. Russo, and D. Stefan. The most
In 15th Workshop on Hot
dangerous code in the browser.
Topics in Operating Systems (HotOS XV)., May 2015.
[15] I. Hickson. Web storage. W3C recommendation, W3C, July
2013. http://www.w3.org/TR/2013/REC-webstorage-
20130730/.
[16] S. Kamkar. evercookie – never forget. http://samy.pl/
evercookie/, Sept. 2010. Accessed: 2015-05-02.
[17] T. Kim and N. Zeldovich. Practical and effective sandboxing
for non-root users. In Proceedings of the 2013 USENIX Annual
Technical Conference (ATC), San Jose, CA, June 2013.
[18] B. S. Lerner, L. Elberty, N. Poole, and S. Krishnamurthi.
Verifying web browser extensions’ compliance with private-
In European Symposium on Research in
browsing mode.
Computer Security (ESORICS), Sept. 2013.
[19] Z. Liang, W. Sun, V. N. Venkatakrishnan, and R. Sekar. Al-
catraz: An isolated environment for experimenting with un-
trusted software. ACM Transactions on Information and Sys-
tem Security (TISSEC), 12(3):14:1–14:37, Jan. 2009. ISSN
1094-9224.
[20] D. Libenzi. FL-COW 0.10. http://xmailserver.org/
flcow.html. January 2013.
[21] N. Mor, O. Riva, S. Nath, and J. Kubiatowicz. Bloom Cookies:
In Pro-
Web search personalization without user tracking.
ceedings of the 2015 Annual Network and Distributed System
Security Symposium (NDSS), San Diego, CA, Feb. 2015.
[22] Mozilla.
app.telemetry page speed monitor.
https:
//addons.mozilla.org/en-US/firefox/addon/
apptelemetry/, Dec. 2013. Accessed: 2015-05-16.
[23] Mozilla. Private browsing mode warning doesn’t mention that
newly-installed client certificates are not cleared when exiting
private browsing mode. https://bugzilla.mozilla.org/
show_bug.cgi?id=475881, 2015. Accessed: 2015-05-02.
[24] Mozilla. Kraken JavaScript Benchmark (version 1.1). http:
//krakenbenchmark.mozilla.org/, May 2015. Accessed:
2015-05-15.
[25] M. Mulazzani, P. Reschl, M. Huber, M. Leithner, S. Schrit-
twieser, E. Weippl, and F. Wien. Fast and reliable browser
identification with javascript engine fingerprinting. In Web 2.0
Workshop on Security and Privacy (W2SP), volume 5, 2013.
[26] N. Nikiforakis, A. Kapravelos, W. Joosen, C. Kruegel,
F. Piessens, and G. Vigna. Cookieless monster: Exploring
the ecosystem of web-based device fingerprinting. In Proceed-
ings of the 34th IEEE Symposium on Security and Privacy
(Oakland), San Francisco, CA, May 2013.
[27] K. Onarlioglu, C. Mulliner, W. Robertson, and E. Kirda.
Privexec: Private execution as an operating system service.
In Proceedings of the 34th IEEE Symposium on Security and
Privacy (Oakland), San Francisco, CA, May 2013.
[28] X. Pan, Y. Cao, and Y. Chen. I do not know what you visited
last summer: Protecting users from third-party web tracking
with TrackingFree browser. In Proceedings of the 2015 Annual
Network and Distributed System Security Symposium (NDSS),
San Diego, CA, Feb. 2015.
[29] A. Popescu. Geolocation API specification. W3C recommen-
dation, W3C, Oct. 2013. http://www.w3.org/TR/2013/
REC-geolocation-API-20131024/.
[30] F. Roesner, T. Kohno, and D. Wetherall. Detecting and Defend-
ing Against Third-party Tracking on the Web. In Proceedings
of the 9th Symposium on Networked Systems Design and Im-
plementation (NSDI), San Jose, CA, Apr. 2012.
[31] J. Rutkowska. Qubes OS. http://qubes-os.org. January
2013.
[32] J. Uekawa.
Cowdancer:
completely in userland.
~dancer/software/cowdancer.html.en. January 2013.
copy-on-write data access
http://www.netfort.gr.jp/
[33] H. Ulmer.
Understanding private browsing, Aug.
2010. https://blog.mozilla.org/metrics/2010/08/
23/understanding-private-browsing/.
[34] A. van Kesteren and J. Gregg. Web notifications. Last call
WD, W3C, Sept. 2013. http://www.w3.org/TR/2013/WD-
notifications-20130912/.
[35] J. Villalobos and K. Maglione. AMO review policies, Apr.
https://developer.mozilla.org/en-US/Add-
2015.
ons/AMO/Policy/Reviews.
[36] J. Voung. PNaCl Translation Caching:
In Javascript or
In Browser, Apr. 2011. https://code.google.com/p/
nativeclient/wiki/PNaClTranslationCache.
[37] T. Warren. Chrome for iOS’ incognito mode isn’t private, bug
reveals, Oct. 2013. http://www.theverge.com/2013/10/
3/4797968/chrome-for-ios-incognito-mode-not-
private-bug.
[38] WebKit.org. SunSpider 1.0.2 JavaScript Benchmark. https:
//www.webkit.org/perf/sunspider/sunspider.html,
May 2015. Accessed: 2015-05-15.