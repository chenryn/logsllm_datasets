---
tags: ['操作系统']
---
# 输入/输出
外部设备、接口部件、总线以及相应的管理软件统称为计算机的输入/输出系统，简称I/O系统
操作系统IO接口对于所有设备都应该是相同的，即设备无关性
## 基本功能
- 完成计算机内部二进制信息与外部多种信息形式间的交流
- 保证CPU能够正确选择输入输出设备并实现对其控制，传输大量数据、 避免数据出错
- 利用数据缓冲、选择合适的数据传送方式等，实现主机与外设间速度的匹配
## 特点
- 异步性：外围设备相对于处理机通常是异步工作的
- 实时性：当外围设备与处理机交互时，由于设备的类型不同，它们的工作步调是不同的，处理机必须按照不同设备所要求传送方式和传输速率不失时机地为设备提供服务，这就要求实时性控制
- 与设备无关性：各种外部设备必须根据其特点和要求选择一种标准接口和处理机进行连接，它们之间的差别必须由设备本身的控制器通过硬件和软件来填补；这样，处理机本身无须了解外设的具体细节，可以采用统一的硬件和软件对其管理
## 交换数据的过程
输入过程：
- CPU把一个地址值放在地址总线上，这一步将选择某一输入设备
- CPU等候输入设备的数据成为有效
- CPU从数据总线读入数据，并放在一个相应的寄存器中
输出过程：
- CPU把一个地址值放在地址总线上，选择输出设备
- CPU把数据放在数据总线上
- 输出设备认为数据有效，从而把数据取走
## 性能
按照主要完成的工作可以分为以下二类：
- 存储I/O
- 通信I/O
I/O系统的性能对CPU的性能有很大的影响，若两者的性能不匹配，I/O系统就有可能成为整个系统的瓶颈
### 评价参数
- 连接特性：哪些I/O设备可以和计算机系统相连接
- I/O系统的容量：I/O系统可以容纳的I/O设备数
- 响应时间：从用户输入命令开始，到得到结果所花费的时间，单位s
- 吞吐率：单位时间完成的I/O操作次数，单位IOP
## I/O 硬件管理
### I/O设备
- 块设备：以块为单位进行读写
- 字符设备：以字符为单位发送或接收字符流
### 设备控制器
IO设备由机械部件与电子部件构成 电子部件称为**设备控制器**或者**适配器**
**控制器的任务**： 将串行的比特流转换为字节块，并完成纠错工作
### 无条件IO
在程序的适当位置直接安排I/O指令，当程序执行到这些I/O指令时，CPU默认外设始终是准备就绪的（I/O总是准备好接收CPU的输出数据，或总是准备好向CPU输入数据），无需检查I/O的状态，就进行数据的传输；
硬件接口电路和软件控制程序都比较简单。输入时，必须确保CPU执行I/O指令读取数据时，外设已将数据准备好；输出时，必须确保外部设备的数据锁存器为空，即外设已将上次的数据取走，等待接收新的数据，否则会导致数据传送出错，但一般的外设难以满足这种要求
### 内存映射IO
控制器使用寄存器或者一块操作系统可以操作的RAM进行通信
给控制寄存器分配一个IO端口，所有IO端口形成IO端口空间吗，可以通过一条特殊的指令来来对控制寄存器进行读取或写入
```asm
IN REG, PORT ; CPU从指定IO端口读取数据到REG寄存器
OUT PORT, REG ; CPU写入数据
```
另外一种方式是将IO设备寄存器映射到内存上，对内存的读写都会通过总线信号映射到IO设备的寄存器。内存映射IO优点：
- 无需使用特殊指令读取IO设备寄存器，映射后能直接通过访问内存你的指令读写
- 不需要特殊保护机制阻止用户进程进行IO操作，操作系统只需要避免把映射的那块内存暴露在用户地址空间就能避免用户进程进行IO操作
- 可以应用于内存的指令也能应用于控制寄存器
缺点：
- 不能使用高速缓存，对IO映射内存做缓存的后果是灾难性的
计算机如何确定一个内存地址对应的是内存还是IO设备寄存器？现代的计算机大都包含高速内存总线，对内存的读写可以通过专用总线来进行，而对IO设备的读写则可以通过通用总线。
第二种设计是通过一个内存总线探查设备，该设备会对IO设备访问放行。
第三种设计则是对内存地址进行过滤，规定一个区域的地址为IO内存映射。
### 中断
![屏幕截图 2021-01-07 163944](/assets/屏幕截图%202021-01-07%20163944.png)
**中断：** 是指CPU在正常运行程序时，由于内部/外部事件（或由程序）引起CPU中断正在运行的程序，而转到为中断事件服务的程序中去，服务完毕，再返回执行原程序的这一过程。中断具有 **随机性**
当设备发起一个中断信号，这个信号会被中断控制器芯片检测到。如果有设备同时发起中断，此时该设备中断不会被处理，不被处理的设备会不断发起信号，直至得到CPU的服务。
中断控制器在放置一个数字信号表明需要处理哪个设备，这个数字信号被称为**中断向量**，中断向量是一个服务过程的程序地址，CPU需要保存相关好相关信息，如PC，然后跳转到指定地址指向相应的服务过程。
中断的作用：
- 实现主机与外设之间的并行工作
- 故障处理
- 实时处理
由于现代CPU都会采用流水线技术，所以中断后一些指令执行了一部分，怎么确保这个状态是明确的
![屏幕截图 2021-01-07 164930](/assets/屏幕截图%202021-01-07%20164930.png)
- **精确中断**：机器停留在一个明确状态的中断
  - 程序计数器保留在一个已知的地方
  - 所指向的指令之前的所有指令已执行完毕
  - 所执行的指令之后的所有指令都还未执行
  - 所指向的指令的执行状态是已知的
- **不精确中断**
#### 中断的类型
- 内部中断
  - 软件中断
  - 异常
    - 故障(Fault)
    - 陷阱(Trap)
    - 终止(Abort)
- 外部中断
  - 可屏蔽中断INTR：由外设通过中断请求线向处理器申请而产生的中断，处理器可以用指令来屏蔽（禁止），即不响应它的中断请求
  - 不可屏蔽中断NMI：由系统内部硬件引发的中断，优先级高于外部硬件中断，且不受中断允许标志位的影响，所以是不可屏蔽中断
#### 中断的基本功能
- 中断请求信号保持与清除
![批注 2020-02-20 191316](/assets/批注%202020-02-20%20191316.png)
- 中断源识别
**中断号：** 是系统分配给每个中断源的代号，以便识别和处理。中断号在中断处理过程中起到很重要的作用。
- 中断控制
**中断触发方式：** 是指外设以什么逻辑信号去申请中断，即边沿触发和电平触发两种方式
**中断排队方式：** 当系统有多个中断源时，就可能出现同时有几个中断源都申请中断，而处理器在一个时刻只能响应并处理一个中断请求；为此，要进行中断排队。处理器按“优先级高的先服务”的原则提供服务
当CPU正在处理某个中断时，会出现优先级更高的中断源申请中断；为了使更紧急的、级别更高的中断源及时得到服务，需要暂时打断（挂起）当前正在执行的中断服务程序，去处理级别更高的中断请求，处理完成后再返回被打断了的中断服务程序继续执行
但级别相同或级别低的中断源不能打断级别高的中断服务，这就是所谓的中断嵌套
可屏蔽中断可以进行中断嵌套。NMI不可以进行中断嵌套
- 中断屏蔽
处理器用指令来控制中断屏蔽触发器的状态，从而控制是否接受某个特殊外设的中断请求
处理器内部也有一个中断允许触发器，只有当其为“1”（即开中断），CPU才能响应外部中断
- 中断优先级
指CPU响应和处理中断请求的先后次序
硬件响应优先序：未被屏蔽的几个中断源同时提出申请时，CPU选择服务对象的顺序由硬件电路实现，用户不能修改
软件服务优先序：在各中断服务程序开头，用软件设置自己的中断屏蔽字，以此改变实际服务顺序
- 中断的处理
当CPU收到外设的中断请求后，如果当前一条指令已执行完，且允许中断，CPU进入中断响应周期，发出中断应答信号完成一个中断响应周期
读取中断源的中断号，完成中断申请与中断响应的握手过程
![批注 2020-02-20 193226](/assets/批注%202020-02-20%20193226.png)
## IO软件原理
### IO软件的目标
- 设备独立性：面向接口编程
- 统一命名：设备的命名映射为一个简单的字符串或数字，不依赖于设备
- 错误处理：低层能处理的问题，就不要交给高层
- 同步与异步：大多数物理IO是异步的，只是read系统调用后，进程被挂起直至数据到达，如果IO是同步的，用户程序编写器就会很容易
- 缓冲：数据通常不能直接从源传输到目的地，所以需要缓冲区
### 程序控制IO
让CPU做全部工作 程序控制IO伪代码:
```c
copy_from_user(buffer,p,count);
for(i = 0;i<count;i++){ // 循环写操作
    while (*p_regs != READY){ // 检查IO设备是否就绪
        *p_regd = p[i]; // 向IO设备写入数据
    }
}
return_to_user();
```
这是一种早期计算机采用的输入/输出方式，数据在计算机和外设之间的传送全部靠计算机程序控制；计算机执行I/O指令时，先获取外设状态，并根据外设的状态决定下一步操作
![批注 2020-02-20 185443](/assets/批注%202020-02-20%20185443.png)
何时对何设备进行输入输出操作完全受CPU控制，外围设备与CPU处于异步工作关系，数据的输入/输出都要经过CPU
**优点：** 计算机和外设之间能够同步，控制简单，硬件简单。
**缺点：** 要占用CPU的大量时间用来查询外设的状态。
**设备状态字寄存器**：用来标志设备的工作状态，以便接口对外部设备进行监视
### 中断驱动IO
程序控制IO浪费的地方在于如果IO设备不就绪，CPU的时间就浪费在无谓的循环的上面了。
中断驱动IO改进的地方在于当IO设备就绪，由IO设备主动产生一个中断，CPU在中断之前可以去调度其他进程，CPU接到外设的通知后暂停现行的工作，转入中断服务程序，和外设交换数据，等中断程序处理完毕后，再返回到被中断的原程序中继续以前被暂停的工作
**优点：** 节约CPU时间，实时性好。
**缺点：** 控制电路相对复杂，服务开销较大（现场和断点的保护）。
**应用场合：** 实时性要求高，且数据传输量又不大的场合。
### 使用DMA的IO
是一种完全由硬件执行的I/O交换方式，让DMA控制数据传输，而不必打扰CPU。本质上还是程序控制IO，只不过使用了DMA后CPU可以每次写入一整个缓冲区的数据，加入一个中间层 从CPU-设备 变成 CPU - DMA - 设备
![屏幕截图 2021-01-07 162819](/assets/屏幕截图%202021-01-07%20162819.png)
- 突发模式：DMA直接让设备获得总线发起一连串传送，然后再释放总线
  - 如果传送时间较长 有可能阻塞CPU或者其他设备
- 飞越模式： 让设备控制器将数据直接写到主存