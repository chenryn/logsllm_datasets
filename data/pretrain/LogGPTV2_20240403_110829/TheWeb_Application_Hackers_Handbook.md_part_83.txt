the URL query string and may be indicated by a generic message such as
“URL too long” in response to every test case. In this situation, you should
experiment to determine the maximum length of URL permitted (which is
often about 2,000 characters) and adjust your buffer sizes so that your test
cases comply with this requirement. Overfl ows may still exist behind the
generic length fi ltering, which can be triggered by strings short enough to
get past that fi ltering.
In other instances, fi lters may restrict the type of data or range of characters
that can be submitted within a particular parameter. For example, an appli-
cation may validate that a submitted username contains only alphanumeric
characters before passing it to a function containing an overfl ow. To maximize
the effectiveness of your testing, you should attempt to ensure that each test
case contains only characters that are permitted in the relevant parameter. One
effective technique for achieving this is to capture a normal request contain-
ing data that the application accepts and to extend each targeted parameter in
turn, using the same characters it already contains, to create a long string that
is likely to pass any content-based fi lters.
Even if you are confi dent that a buffer overfl ow condition exists, exploiting it
remotely to achieve arbitrary code execution is extremely diffi cult. Peter Winter-
Smith of NGSSoftware has produced some interesting research regarding the
possibilities for blind buffer overfl ow exploitation. For more information, see
the following whitepaper:
www.ngssoftware.com/papers/NISR.BlindExploitation.pdf
Integer Vulnerabilities
Integer-related vulnerabilities typically arise when an application performs
some arithmetic on a length value before performing some buffer operation
but fails to take into account certain features of how compilers and processors
handle integers. Two types of integer bugs are worthy of note: overfl ows and
signedness errors.
Integer Overfl ows
These occur when an operation on an integer value causes it to increase above
its maximum possible value or decrease below its minimum possible value.
When this occurs, the number wraps, so a very large number becomes very
small, or vice versa.
cc1166..iinndddd 664400 88//1199//22001111 1122::1166::3366 PPMM
40 Stuttard c16.indd V2 - 08/16/2011 Page 641
Chapter 16 n Attacking Native Compiled Applications 641
Consider the following “fi x” to the heap overfl ow described previously:
bool CheckLogin(char* username, char* password)
{
unsigned short len = strlen(username) + 1;
char* _username = (char*) malloc(len);
strcpy(_username, username);
...
Here, the application measures the length of the user-submitted username,
adds 1 to accommodate the trailing null, allocates a buffer of the resulting size,
and then copies the username into it. With normal-sized input, this code behaves
as intended. However, if the user submits a username of 65,535 characters, an
integer overfl ow occurs. A short-sized integer contains 16 bits, which is enough
for its value to range between 0 and 65,535. When a string of length 65,535 is
submitted, the program adds 1 to this, and the value wraps to become 0. A
zero-length buffer is allocated, and the long username is copied into it, caus-
ing a heap overfl ow. The attacker has effectively subverted the programmer’s
attempt to ensure that the destination buffer is large enough.
Signedness Errors
These occur when an application uses both signed and unsigned integers to
measure the lengths of buffers and confuses them at some point. Either the
application makes a direct comparison between a signed and unsigned value,
or it passes a signed value as a parameter to a function that takes an unsigned
value. In both cases, the signed value is treated as its unsigned equivalent,
meaning that a negative number becomes a large positive number.
Consider the following “fi x” to the stack overfl ow described previously:
bool CheckLogin(char* username, int len, char* password)
{
char _username[32] = “”;
if (len < 32)
strncpy(_username, username, len);
...
Here, the function takes both the user-supplied username and a signed inte-
ger indicating its length. The programmer creates a fi xed-size buffer on the
stack and checks whether the length is less than the size of the buffer. If it is,
the programmer performs a counted buffer copy, designed to ensure that the
buffer is not overfl owed.
If the len parameter is a positive number, this code behaves as intended.
However, if an attacker can cause a negative value to be passed to the function,
the programmer’s protective check is subverted. The comparison with 32 still
cc1166..iinndddd 664411 88//1199//22001111 1122::1166::3366 PPMM
Stuttard c16.indd V2 - 08/16/2011 Page 642
642 Chapter 16 n Attacking Native Compiled Applications
succeeds, because the compiler treats both numbers as signed integers. Hence,
the negative length is passed to the strncpy function as its count parameter.
Because strncpy takes an unsigned integer as this parameter, the compiler
implicitly casts the value of len to this type, so the negative value is treated as
a large positive number. If the user-supplied username string is longer than 32
bytes, the buffer is overfl owed just as in a standard stack-based overfl ow.
This kind of attack usually is feasible only when the attacker can directly
control a length parameter. For example, perhaps it is computed by client-side
JavaScript and submitted with a request alongside the string to which it refers.
However, if the integer variable is small enough (for example, a short) and the
program computes the length on the server side, an attacker may also be able
to introduce a negative value via an integer overfl ow by submitting an overlong
string to the application.
Detecting Integer Vulnerabilities
Naturally, the primary locations to probe for integer vulnerabilities are any
instances where an integer value is submitted from the client to the server. This
behavior usually arises in two different ways:
n The application may pass integer values in the normal way as parameters
within the query string, cookies, or message body. These numbers usu-
ally are represented in decimal form using standard ASCII characters.
The most likely targets for testing are fi elds that appear to represent the
length of a string that is also being submitted.
n The application may pass integer values embedded within a larger blob
of binary data. This data may originate from a client-side component
such as an ActiveX control, or it may have been transmitted via the client
in a hidden form fi eld or cookie (see Chapter 5). Length-related integers
may be harder to identify in this context. They typically are represented
in hexadecimal form and often directly precede the string or buffer to
which they relate. Note that binary data may be encoded using Base64
or similar schemes for transmission over HTTP.
HACK STEPS
1. Having identified targets for testing, you need to send suitable payloads
designed to trigger any vulnerabilities. For each item of data being targeted,
send a series of different values in turn, representing boundary cases for the
signed and unsigned versions of different sizes of integer. For example:
n 0x7f and 0x80 (127 and 128)
n 0xff and 0x100 (255 and 256)
cc1166..iinndddd 664422 88//1199//22001111 1122::1166::3366 PPMM
42 Stuttard c16.indd V2 - 08/16/2011 Page 643
Chapter 16 n Attacking Native Compiled Applications 643
n 0x7ffff and 0x8000 (32767 and 32768)
n 0xffff and 0x10000 (65535 and 65536)
n 0x7fffffff and 0x80000000 (2147483647 and 2147483648)
n 0xffffffff and 0x0 (4294967295 and 0)
2. When the data being modified is represented in hexadecimal form, you
should send little-endian as well as big-endian versions of each test
case — for example, ff7f as well as 7fff. If hexadecimal numbers are sub-
mitted in ASCII form, you should use the same case that the application
itself uses for alphabetical characters to ensure that these are decoded
correctly.
3. You should monitor the application’s responses for anomalous events in
the same way as described for buffer overflow vulnerabilities.
Format String Vulnerabilities
Format string vulnerabilities arise when user-controllable input is passed as
the format string parameter to a function that takes format specifi ers that may
be misused, as in the printf family of functions in C. These functions take a
variable number of parameters, which may consist of different data types such
as numbers and strings. The format string passed to the function contains speci-
fi ers, which tell it what kind of data is contained in the variable parameters, and
in what format it should be rendered.
For example, the following code outputs a message containing the value of
the count variable, rendered as a decimal:
printf(“The value of count is %d”, count.);
The most dangerous format specifi er is %n. This does not cause any data to
be printed. Rather, it causes the number of bytes output so far to be written to
the address of the pointer passed in as the associated variable parameter. For
example:
int count = 43;
int written = 0;
printf(“The value of count is %d%n.\n”, count, &written.);
printf(“%d bytes were printed.\n”, written);
outputs the following:
The value of count is 43.
24 bytes were printed.
cc1166..iinndddd 664433 88//1199//22001111 1122::1166::3366 PPMM
Stuttard c16.indd V2 - 08/16/2011 Page 644
644 Chapter 16 n Attacking Native Compiled Applications
If the format string contains more specifi ers than the number of variable
parameters passed, the function has no way of detecting this, so it simply con-
tinues processing parameters from the call stack.
If an attacker controls all or part of the format string passed to a printf-
style function, he can usually exploit this to overwrite critical parts of process
memory and ultimately cause arbitrary code execution. Because the attacker
controls the format string, he can control both the number of bytes that the
function outputs and the pointer on the stack that gets overwritten with the
number of bytes output. This enables him to overwrite a saved return address,
or a pointer to an exception handler, and take control of execution in much the
same way as in a stack overfl ow.
Detecting Format String Vulnerabilities
The most reliable way to detect format string bugs in a remote application is to
submit data containing various format specifi ers and monitor for any anomalies
in the application’s behavior. As with uncontrolled triggering of buffer overfl ow
vulnerabilities, it is likely that probing for format string fl aws will result in a
crash within a vulnerable application.
HACK STEPS
1. Targeting each parameter in turn, submit strings containing large numbers
of the format specifiers %n and %s:
%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n
%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s
Note that some format string operations may ignore the %n specifier for
security reasons. Supplying the %s specifier instead causes the function to
dereference each parameter on the stack, probably resulting in an access
violation if the application is vulnerable.
2. The Windows FormatMessage function uses specifiers in a different way
than the printf family. To test for vulnerable calls to this function, you
should use the following strings:
%1!n!%2!n!%3!n!%4!n!%5!n!%6!n!%7!n!%8!n!%9!n!%10!n! etc...
%1!s!%2!s!%3!s!%4!s!%5!s!%6!s!%7!s!%8!s!%9!s!%10!s! etc...
3. Remember to URL-encode the % character as %25.
4. You should monitor the application’s responses for anomalous events in
the same way as described for buffer overflow vulnerabilities.
cc1166..iinndddd 664444 88//1199//22001111 1122::1166::3366 PPMM
44 Stuttard c16.indd V2 - 08/16/2011 Page 645
Chapter 16 n Attacking Native Compiled Applications 645
Summary
Software vulnerabilities in native code represent a relatively niche area in
relation to attacks on web applications. Most applications run in a managed
execution environment in which the classic software fl aws described in this
chapter do not arise. However, occasionally these kinds of vulnerabilities are
highly relevant and have been found to affect many web applications running
on hardware devices and other unmanaged environments. A large proportion
of such vulnerabilities can be detected by submitting a specifi c set of test cases
to the server and monitoring its behavior.
Some vulnerabilities in native applications are relatively easy to exploit, such
as the off-by-one vulnerability described in this chapter. However, in most cases,
they are diffi cult to exploit given only remote access to the vulnerable application.
In contrast to most other types of web application vulnerabilities, even the act
of probing for classic software fl aws is quite likely to cause a denial-of-service
condition if the application is vulnerable. Before performing any such testing,
you should ensure that the application owner accepts the inherent risks involved.
Questions
Answers can be found at http://mdsec.net/wahh.
1. Unless any special defenses are in place, why are stack-based buffer over-
fl ows generally easier to exploit than heap-based overfl ows?
2. In the C and C++ languages, how is a string’s length determined?
3. Why would a buffer overfl ow vulnerability in an off-the-shelf network
device normally have a much higher likelihood of exploitation than an
overfl ow in a proprietary web application running on the Internet?
4. Why would the following fuzz string fail to identify many instances of
format string vulnerabilities?
%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n...
5. You are probing for buffer overfl ow vulnerabilities in a web application
that makes extensive use of native code components. You fi nd a request
that may contain a vulnerability in one of its parameters; however, the
anomalous behavior you have observed is diffi cult to reproduce reliably.
Sometimes submitting a long value causes an immediate crash. Sometimes
you need to submit it several times in succession to cause a crash. And
sometimes a crash occurs after a large number of benign requests.
What is the most likely cause of the application’s behavior?
cc1166..iinndddd 664455 88//1199//22001111 1122::1166::3366 PPMM
cc1166..iinndddd 664466 88//1199//22001111 1122::1166::3366 PPMM
Stuttard c17.indd V2 - 08/10/2011 Page 647
CHAPTER
17
Attacking Application
Architecture
Web application architecture is an important area of security that is frequently
overlooked when the security of individual applications is appraised. In com-
monly used tiered architectures, a failure to segregate different tiers often means
that a single defect in one tier can be exploited to fully compromise other tiers
and therefore the entire application.
A different range of security threats arises in environments where multiple
applications are hosted on the same infrastructure, or even share common
components of a wider overarching application. In these situations, defects
or malicious code within one application can sometimes be exploited to com-
promise the entire environment and other applications belonging to different
customers. The recent rise of “cloud” computing has increased the exposure of
many organizations to attacks of this kind.
This chapter examines a range of different architectural confi gurations and
describes how you can exploit defects within application architectures to advance
your attack.
Tiered Architectures
Most web applications use a multitiered architecture, in which the application’s
user interface, business logic, and data storage are divided between multiple
layers, which may use different technologies and be implemented on different
647
cc1177..iinndddd 664477 88//1199//22001111 1122::1177::1155 PPMM
Stuttard c17.indd V2 - 08/10/2011 Page 648
648 Chapter 17 n Attacking Application Architecture
physical computers. A common three-tier architecture involves the following
layers:
n Presentation layer, which implements the application’s interface
n Application layer, which implements the core application logic
n Data layer, which stores and processes application data
In practice, many complex enterprise applications employ a more fi ne-grained
division between tiers. For example, a Java-based application may use the
following layers and technologies:
n Application server layer (such as Tomcat)
n Presentation layer (such as WebWork)
n Authorization and authentication layer (such as JAAS or ACEGI)
n Core application framework (such as Struts or Spring)
n Business logic layer (such as Enterprise Java Beans)
n Database object relational mapping (such as Hibernate)
n Database JDBC calls
n Database server
A multitiered architecture has several advantages over a single-tiered design.
As with most types of software, breaking highly complex processing tasks into
simple and modular functional components can provide huge benefi ts in terms
of managing the application’s development and reducing the incidence of bugs.
Individual components with well-defi ned interfaces can be easily reused both
within and between different applications. Different developers can work in
parallel on components without requiring a deep understanding of the imple-
mentation details of other components. If it is necessary to replace the technol-
ogy used for one of the layers, this can be achieved with minimal impact on
the other layers. Furthermore, if well implemented, a multitiered architecture
can help enhance the security posture of the whole application.
Attacking Tiered Architectures
A consequence of the previous point is that if defects exist within the implemen-
tation of a multitiered architecture, these may introduce security vulnerabilities.
Understanding the multitiered model can help you attack a web application by
helping you identify where different security defenses (such as access controls
and input validation) are implemented and how these may break down across
tier boundaries. A poorly designed tiered architecture may make possible three
broad categories of attacks:
n You may be able to exploit trust relationships between different tiers to
advance an attack from one tier to another.
cc1177..iinndddd 664488 88//1199//22001111 1122::1177::1155 PPMM