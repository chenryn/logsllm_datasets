### Denotational Semantics for τ-calculus

Figure 3 presents a formal denotational semantics for the τ-calculus language, which unambiguously defines the meaning of τ-calculus programs. The semantic domains \( E \), \( P \), and \( C \) represent functions that associate precise meanings with expressions, predicates, and commands, respectively.

- **Meaning Function for Expressions (\( E \))**: The function \( E[[\cdot]] \) defines the denotational semantics of expressions by structural induction, mapping each expression to a domain associated with that expression. For example, \( E[[v]]\rho \) denotes the value of \( v \) given some environment \( \rho \).
- **Meaning Function for Predicates (\( P \))**: Similarly, \( P[[\cdot]] \) defines the meanings of predicates in the language.
- **Meaning Function for Commands (\( C \))**: The function \( C[[\cdot]] \) defines the meanings of commands in the language.

We assume that programs are well-typed according to the formal typing rules described in Section 3.3.

#### Table 3: Informal Description of Valuation Semantics for Relational Operators

Table 3 provides an informal description of the valuation semantics for the set of relational operators used to construct patterns in τ-calculus. To describe the semantics of the predicate expression \( et \, \text{conn} \, ev \), we introduce join points as the set of tuples describing adjacent entity-event pairs in a computation graph (CG). Incoming events are encoded as \( \langle ev, en \rangle \) and outgoing events as \( \langle en, ev \rangle \). For instance, \( P[[et \, \text{conn} \, ev]] \, jp\rho \) is interpreted as valid (T) if \( \langle et, ev \rangle \in jp \).

**Notation**:
- \( \rho[v \mapsto u] \) denotes the function \( \rho \) with \( v \) remapped to \( u \).
- For example, \( C[[v := u]]\rho \) denotes \( \rho[v \mapsto u] \).
- \( C[[\text{store} \, id \, gr]]\sigma \rho \) rebinds \( id \) to \( gr \) in stores \( \sigma \).
- \( C[[\text{load} \, id]]\sigma \rho \) denotes the graph \( \sigma(id) \).

### Typing Rules

Figure 4 presents the static semantics of the language, which determine which terms are well-formed τ-calculus programs. The typing rules allow the derivation of type judgments of the form \( \Gamma \vdash e : \tau \), where \( \Gamma \) is the type environment—a partial map from variables to types used to determine the types of the free variables in \( e \). The environment \( \Gamma[v \mapsto \tau] \) is obtained by rebinding \( v \) to \( \tau \) (or creating the binding anew if \( v \notin \text{dom}(\Gamma) \)).

Every well-typed τ-calculus term has a proof tree consisting of applications of the typing rules to derive a type for the term. These proof trees form the basis for type checking terms in the language. For example, consider a computation graph depicting a scenario where a browser process writes to a user file. In this context, the predicate expression \( \text{process} \, \text{conn} \, \text{sys_write} \) evaluates to T, which is a bool. The expression is thus well-typed, which can be verified by constructing its typing derivation:

\[
\Gamma \vdash \text{process} : \text{en}
\]
\[
\Gamma \vdash \text{process} \, \text{conn} \, \text{sys_write} : \text{bool}
\]
\[
\Gamma \vdash \text{sys_write} : \text{ev}
\]

### Architecture and Realization

Figure 5 shows an overview of the τ-calculus architecture. The full-stack graph computation platform comprises a language interpreter, a graph database, and user-interface components, including an interactive console (τ-REPL) and a CG visualization tool (CG Browser). The graph database employs a distributed key-value store, FCCE [74], for long-term monitoring data storage with data locality optimization and concurrent multi-source streaming data ingestion. All components of τ-calculus are implemented in Haskell, except for the CG Browser, which is implemented in TypeScript. τ-REPL and CG Browser together provide the interactive programming and data inspection environment required for threat reasoning (cf. Section 2.3).

#### Core Platform Subsystems

1. **Typing System**:
   - The type checker provides informative user feedback to help reduce programming errors.
   - The interpreter binds types to variables through variable declaration and inference.
   - Local variables in a predicate must be declared with types before use.
   - Type inference applies to function and pattern parameters.

2. **Constraint Solving**:
   - Pattern matching evaluation involves solving a set of constraints or predicate expressions defined by the pattern.
   - A module performs pattern application similar to function application, efficiently deciding when and how many times the pattern application needs to be performed.
   - A constraint-solving algorithm solves constraints iteratively and propagates the latest solved constraint to all variables associated with previously satisfied constraints.

3. **Built-in Traversal Support**:
   - Backward and forward traversals are common tasks in threat intelligence for root cause discovery and impact analysis.
   - The built-in relation `reach` provides four functionalities: forward traversal, backward traversal, reachability filter, and pathfinder.
   - The system takes into account event direction, temporal requirements, and variable constraints.
   - Key optimizations include dynamic programming and proactive constraint solving.

4. **Graph Database**:
   - The graph database stores both in-memory and on-disk CG portions and provides graph query APIs to the interpreter.
   - It bridges the semantics of CG and low-level data storage and optimizes graph retrieval throughput using multi-layer caches and data arrangement based on CG properties.
   - FCCE is used as the low-level key-value data store, supporting concurrent multi-source asynchronous ingestion, distributed data storage, and data locality management.

### Summary

The τ-calculus language is equipped with a formal denotational semantics, robust typing rules, and a comprehensive architecture. The platform includes a language interpreter, a graph database, and user-interface components, providing a powerful environment for threat reasoning and graph computation.