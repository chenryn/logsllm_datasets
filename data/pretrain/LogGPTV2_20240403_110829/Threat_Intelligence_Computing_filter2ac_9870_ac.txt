Figure 3 presents a formal denotational semantics for τ-calculus
language that unambiguously identifies what a τ-calculus program
means. Semantic domains E, P, and C denote functions that as-
sociate precise meanings with expressions, predicates, and com-
mands, respectively. Meaning function E[[ .]] defines the denota-
tional semantics of expressions by structural induction, mapping
each expression in the language to a domain associated with that
expression. For example, E[[v]]ρ denotes the value of v given some
ρ. Similarly, P[[ .]] and C[[ .]] define the meanings of predicates and
commands in the language. We assume that programs are well-
typed according to the formal typing rules described in Section 3.3.
Table 3 provides an informal description of the valuation se-
mantics for the set of relational operators that form the basis for
constructing patterns in τ-calculus. To describe the semantics of
predicate expression et conn ev, we introduce join points as the set
of tuples describing adjacent entity-event pairs in a CG, encoding
incoming events as ⟨ev, en⟩ and outgoing events as ⟨en, ev⟩. For in-
stance, P[[et conn ev]] jpρ is interpreted as valid (T ) if ⟨et, ev⟩ ∈ jp.
Notation ρ[v (cid:55)→ u] denotes function ρ with v remapped to u.
For example, command C[[v:=u]]ρ denotes ρ[v (cid:55)→ u]. Likewise,
C[[store id gr]]σ ρ rebinds id to gr in stores σ, and C[[load id]]σ ρ
Session 9D: VulnDet 1CCS’18, October 15-19, 2018, Toronto, ON, Canada1887predicate denotations
expression denotations
command denotations
P : p → (jp → ρ ⇀ {T , F })
E : e → (ρ ⇀ (u ∪ gr ∪ p))
C : c → (ρ → ρ)
P[[not p]] jpρ = ¬P[[p]] jpρ
P[[e1 has e2]] jpρ = π3(E[[e1]]ρ) ∩ E[[e2]]ρ (cid:44) ∅
P[[e1 conn e2]] jpρ = ⟨E[[e1]]ρ, E[[e2]]ρ⟩ ∈ jp
P[[e1 reachn e2]] jpρ = p (cid:44) ∅,
where p = path(E[[e1]]ρ, E[[e2]]ρ)ρ, n ∈ N
and length(p) ≤ n
P[[e1 prec e2]] jpρ = time(E[[e1]]ρ)  E[[e2]]ρ
P[[e1 in e2]] jpρ = E[[e1]]ρ ∩ E[[e2]]ρ = E[[e1]]ρ
E[[u]]ρ = u
E[[gr]]ρ = gr
E[[p]]ρ = p
E[[v]]ρ = ρ(v)
E[[load e]]σ ρ = σ(E[[e]]ρ)
E[[pattern v . e]]ρ = pattern u . E[[e]]ρ[v (cid:55)→ u]
E[[e e]]ρ = E[[e]]ρ (E[[e1]]ρ, . . . , E[[en ]]ρ)
E[[match e p with e1 . . . en in e]]ρ = дr,
where дr ⊆ E[[e]]ρ , E[[e p]]ρ = p1 . . . pk ,
and
E[[fn v : τ . e]]ρ = fn u . E[[e]]ρ[v (cid:55)→ u]
E[[e1e2]]ρ = E[[e1]]ρ E[[e2]]ρ
E[[ µ v : τ . e]]ρ = µ (µ v : τ . e) . E[[e]]ρ[v (cid:55)→ µ v : τ . e]
C[[v:= e]]ρ = ρ[v (cid:55)→ u], where u = E[[e]]ρ
C[[label e1 e2]]ρ =
(π1(E[[e1]]ρ), π2(E[[e1]]ρ), π3(E[[e1]]ρ) ⊔ π3(E[[e2]]ρ))
C[[store e1 e2]]σ ρ = σ[E[[e1]]ρ (cid:55)→ E[[e2]]ρ]
C[[show e]]ρ = O(E[[e]]ρ)
P[[pi[E[[e1]]ρ . . . E[[en ]]ρ, E[[e]]ρ]]] jpρ
k
i =1
Figure 3: Denotational semantics for τ-calculus language.
denotes graph σ(id). A graph labeling C[[label gr lb]]ρ denotes
π3(gr) ⊔ lb, the join of gr’s original label with new label lb, where
π3 denotes a projection on the third element of gr.
3.3 Typing Rules
Figure 4 presents the language’s static semantics. The typing rules
determine which terms are well-formed τ-calculus programs. They
are a set of rules that allow the derivation of type judgments of
form Γ ⊢ e : τ, where Γ : v ⇀ τ is the type environment — a partial
map from variables to types used to determine the types of the free
variables in e. The environment Γ[v (cid:55)→ τ] is obtained by rebinding
v to τ (or creating the binding anew if v (cid:60) dom(Γ)).
Every well-typed τ-calculus term has a proof tree consisting of
applications of the typing rules to derive a type for the term. Such
proof trees form the basis for type checking terms in the language.
For example, consider a computation graph depicting the scenario
where a browser process writes to a user file. In this context, the
predicate expression process conn sys_write evaluates to T , which
is a bool. The expression is thus well-typed, which can be verified
by constructing its typing derivation:
Γ ⊢ process : en
Γ ⊢ process conn sys_write : bool
Γ ⊢ sys_write : ev Fwden
4 ARCHITECTURE AND REALIZATION
Figure 5 shows an overview of τ-calculus’ architecture. The full-
stack graph computation platform comprises a language interpreter,
a graph database, and user-interface components, which include
an interactive console (τ-REPL) and a CG visualization tool (CG
Browser). The graph database employs a distributed key-value store,
FCCE [74], for i) long-term monitoring data storage with data lo-
cality optimization, and ii) concurrent multi-source streaming data
ingestion. All components of τ-calculus are implemented in Haskell
except CG Browser, which is implemented in TypeScript. τ-REPL3
and CG Browser together provide the interactive programming
and data inspection environment required for threat reasoning (cf.
Section 2.3). Next, we detail core platform subsystems.
4.1 Typing System
τ-calculus’ type checker provides informative user feedback to help
reducing programming errors. τ-calculus interpreter binds types to
variables through variable declaration and inference. Local variables
in a predicate (e.g., x in x conn y) must be declared with types
before use (e.g., x ∈ T). For simplicity, this paper uses the symbols
defined in Table 1 to denote variable types (e.g., xen conn yev). Type
inference applies to function and pattern parameters (e.g., x in y
indicates that the variable y is inhabited by type τдr ). Type inference
also applies to the abstract type el, which can be either an entity
or an event (cf. Figure 4).
4.2 Constraint Solving
Pattern matching evaluation involves solving the set of constraints,
or predicate expressions, defined by the pattern. This task is compu-
tationally non-trivial because i) a pattern can refer to other patterns
via parameters, and ii) CG is stored on distributed external storage,
making it expensive to check data associated with each predicate.
To cope with the parametric expressiveness of patterns, we de-
veloped a module to perform pattern application similar to function
application. The constraint solving process efficiently decides when
and how many times the pattern application needs to be performed
for a single pattern reference. For instance, if a pattern reference
associates with a variable that relates to a reach predicate, the re-
ferred pattern may be applied repeatedly in the traversal procedure
to minimize on-disk data requests in subsequent traversal steps.
Since on-disk data queries only support solving one constraint
at a time, we developed a constraint-solving algorithm to solve
constraints iteratively and propagate the latest solved constraint
to all variables associated with previously satisfied constraints.
When a pattern is parsed and the abstract syntax tree (AST) is
3τ -REPL is to threat hunters as msfconsole (Metasploit console) is to pen testers [69].
Session 9D: VulnDet 1CCS’18, October 15-19, 2018, Toronto, ON, Canada1888Γ ⊢ u : τp
Graph
Val
Γ ⊢ e : τ
Γ ⊢ gr : τдr
Assign
Γ ⊢ v:= e : Γ[v (cid:55)→ τ]
Γ[v (cid:55)→ τ] ⊢ e : τ ′
Γ ⊢ (fn v : τ . e) : τ → τ ′
Abs
n > 0 Γ[v1 · · · vn (cid:55)→ τ1 · · · τn] ⊢ e : τдr Pat
Γ ⊢ (pattern v . e) : (τ1, . . . , τn) → τдr
Γ ⊢ e : bool Not
Γ ⊢ e2 : lb Has
Γ ⊢ not e : bool
Γ ⊢ e1 : ev
Γ ⊢ e1 : el
Γ ⊢ e1 has e2 : bool
Γ ⊢ e1 : ev
Γ ⊢ e2 : ψ At
Γ ⊢ e2 : ψ Bef
Γ ⊢ e1 at e2 : bool
Γ ⊢ e1 bf e2 : bool
Γ ⊢ p : bool
Pred
Γ ⊢ v : Γ(v)
Var
Γ ⊢ e1 : id
Load
Γ ⊢ e : id
Γ ⊢ load e : τдr
Γ ⊢ e2 : τдr Store
Γ ⊢ e : τдr
Γ ⊢ show e : Γ
Γ ⊢ store e1 e2 : Γ
Γ ⊢ e1 : τдr
Γ ⊢ e2 : lb Label
Γ ⊢ label e1 e2 : Γ
Γ ⊢ e2 : τ App
Γ ⊢ e1 : τ → τ ′
n > 0 Γ ⊢ e : (τ1, . . . , τn) → τдr
Γ ⊢ e1e2 : τ ′
Γ ⊢ ei : τi for i = 1, . . . , n
Γ ⊢ e1 : en
Γ ⊢ e1 conn e2 : bool
Γ ⊢ e e : τдr
Γ ⊢ e2 : ev Fwden
Γ ⊢ e2 : ψ Aft
Γ ⊢ e1 : ev
Γ ⊢ e1 af e2 : bool
Γ[v (cid:55)→ τ] ⊢ e : τ Fix
Γ ⊢ (µ v : τ . e) : τ
Γ ⊢ e : τдr
τ1 · · · τn .Γ ⊢ e p : (τ1, . . . τn) → τ ′
Show
Γ ⊢ ei : τi for i = 1, . . . , n
NApp
Γ ⊢ e1 : ev
Γ ⊢ e1 conn e2 : bool
Γ ⊢ e1 : ev
Γ ⊢ e1 prec e2 : bool
Γ ⊢ match e p with e in e : τ ′
дr
Γ ⊢ e1 : el
Γ ⊢ e2 : en Fwdev
Γ ⊢ e1 reachn e2 : bool
Γ ⊢ e1 : el
Γ ⊢ e2 : ev Prec
дr Match
Γ ⊢ e2 : el Imp
Γ ⊢ e2 : τдr In
Γ ⊢ e1 in e2 : bool
Figure 4: Typing rules for τ-calculus language.
4.3 Built-in Traversal Support
Backward and forward traversals are common tasks in threat in-
telligence for root cause discovery and impact analysis [42]. While
one can implement traversal as a native τ-calculus function with
recursive function support, it can be useful to encode the traversal
semantics as a built-in primitive pattern predicate. To this end, the
built-in relation reach (cf. Section 3) provides four functionalities:
• Forward traversal (touched x, untouched y): x reach y
• Backward traversal (untouched x, touched y): x reach y
• Reachability Filter (touched x, y): x reach y
• Pathfinder (touched x, z, untouched y): x reach y, y reach z
The traversal computes the graph closure over all subgraphs
reachable from a provided subgraph or set of entities/events. A
touched/untouched variable refers to whether any constraint as-
sociated with that variable has been solved in previous iterating
constraint-solving steps (Section 4.2). The last pattern expression
(Pathfinder) is useful for searching connections (a subgraph y) be-
tween two sets of elements or subgraphs x and z.
To solve constraints expressed as traversal predicates, the sys-
tem takes into account (1) event direction, if present (information-
/control-flow direction), (2) temporal requirement (e.g., events in
a backward step can only occur earlier than events in the current
step), and (3) variable constraints, if any (from other predicates
or patterns in arguments). The two most important optimizations
applied to the traversal procedure are:
(1) dynamic programming: bookkeeping results of all traversal
sub-problems solved in previous iterations. A traversal sub-
problem is defined by its domain (a connected entity and the
query time range) and its codomain (a set of events).
(2) proactive constraint solving: if a variable in a traversal predi-
cate has other constraints (either as direct predicates or ref-
erenced patterns), the additional constraints are proactively
and repeatedly solved in each iterating step of the traversal
to minimize on-disk data queries, especially for hub entities.
Figure 5: τ-calculus platform architecture.
created, the interpreter determines how constraints are connected
and stores the constraint relations as a graph of constraints (GoC)
into a supplementary data structure in the AST. To evaluate a
pattern, the constraint solver orders constraints by heuristics and
user guidance and iteratively satisfies all constraints, including
single-element constraints, (e.g., x has ⟨type : READ⟩) and multi-
element constraints (e.g., x conn y). After each iterative constraint-
solving step, the variables associated with the pattern may undergo
a state change, which is propagated to all previously solved variables
through a graph traversal on GoC, from the changed variables to
all previously solved variables.
Graph DatabaseFCCE Data NodeFCCE Data NodeFCCE Data NodeFCCE ClientOn-disk Element QueryLabel Cacheτ-InterpreterUser InterfaceCode GenerationAST OptimizationType Checking and InferenceLexer& ParsernetworkinterfaceBatch Processorτ-REPLCG BrowserFCCE Data NodeGraph ConstructionElement CacheGraph Query InterfaceIn-memory Graph CacheK-V Store TranslationUDF LinkerBuilt-in AlgorithmsConstraint SolverSession 9D: VulnDet 1CCS’18, October 15-19, 2018, Toronto, ON, Canada1889Table 4: DARPA TC Monitored Systems: CG Statistics†
OS
Windows
FreeBSD
Android
Linux
#(entities)
0.9M
0.5M
0.1M
11.6M
#(labels)⋆ Case Study
20.2M Section 5.1
43.7M Section 5.2
149.2M Section 5.3
84.3M Section 5.4
† Each row represents one monitored host selected for demonstration purpose.
#(events)
19.1M
8.4M
77.4M
26.0M
⋆ Labels are stored as dictionary items described in Section 4.4.
4.4 Graph Database
The graph database stores both in-memory and on-disk CG portions,
and provides graph query APIs to the interpreter. The two main
functionalities of the graph database are to i) bridge the semantics
of CG and low-level data storage, and ii) optimize graph retrieval
throughput using multi-layer caches and data arrangement based
on CG properties such as temporal locality of events.
We utilize FCCE [74] as the low-level key-value data store in
our graph database realization. FCCE is designed for security data
storage and processing; it supports concurrent multi-source asyn-
chronous ingestion, distributed data storage, and data locality man-
agement. To optimize graph queries based on special CG properties,
we compose FCCE schema to represent CG in key-value pairs and
replicate critical values in multiple schemas for data locality preser-
vation and fast retrieval from different perspectives. For instance,
one replica of events deals with temporal locality: i) events are
indexed by time, and ii) events occurring within a time window are
managed on one memory page and stored at consecutive filesystem
blocks. Other event replicas deal with labels and shared entities.
To process a graph query, the graph database first checks whether
any portion of the data is already loaded into memory through pre-
vious queries. If not, it will split the graph query into one or more