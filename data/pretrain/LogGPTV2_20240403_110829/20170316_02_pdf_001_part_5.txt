to 0. If the lhs is greater than the rhs then the number will be set to the value 1. If the operands are not
comparable (that is, one or both is a NaN) the result will be NaN.
decNumberCompareSignal(number, lhs, rhs, context)
This function compares two numbers numerically. It is identical to decNumberCompare except that
all NaNs (including quiet NaNs) signal.
decNumberCompareTotal(number, lhs, rhs, context)
This function compares two numbers using the IEEE 754 total ordering. If the lhs is less than the rhs in
the total order then the number will be set to the value -1. If they are equal, then number is set to 0. If
the lhs is greater than the rhs then the number will be set to the value 1.
The total order differs from the numerical comparison in that: -NaN digits digits.
source (decNumber *) Pointer to the structure which will be copied to number. All fields are
copied, with the units containing the source->digits digits being copied starting from
lsu. The source structure is unchanged.
Returns number. No error is possible from this function.
decNumberCopyAbs(number, source)
This function is used to copy the absolute value of the content of one decNumber structure to another.
It is identical to decNumberCopy except that the sign of the result is always 0. This is equivalent to
the quiet abs function described in IEEE 754.
Returns number. No error is possible from this function.
decNumberCopyNegate(number, source)
This function is used to copy the value of the content of one decNumber structure to another while
inverting its sign. It is identical to decNumberCopy except that the sign of the result is the inverse of
that in source. This is equivalent to the quiet negate function described in IEEE 754.
Returns number. No error is possible from this function.
decNumberCopySign(number, source, pattern)
This function is used to copy the value of the content of one decNumber structure to another and
changing its sign to that of a third. It is identical to decNumberCopy except that the sign of the result
is taken from the third argument instead of from source. This is equivalent to the quiet copysign
function described in IEEE 754.
The first two arguments are as for decNumberCopy. The third is:
pattern (decNumber *) Pointer to the structure which provides the sign.
Returns number. No error is possible from this function.
decNumberFromInt32(number, i)
This function is used to convert a signed (twoâ€™s complement) 32-bit binary integer to a decNumber.
The arguments are:
number (decNumber *) Pointer to the structure that will received the converted integer. This
must have space for the digits needed to represent the value of i, which may need up to
ten digits.
i (int32_t) The integer to be converted.
Returns number. No error is possible from this function.
42 Module descriptions Version 3.68