(14)
i=t
t
t ∼ χ2(wm), since each Zi ∼ χ2(m) is IID. Obviously, E[Z (w)
Note that Z (w)
] =
(cid:3)t+w−1
E[Zt] by the linearity of the expectation. Let us deﬁne an inverse func-
tion CCDF −1(m, Φ) that returns α, where CCDF (m, α) = Φ. For two constants
α1 = CCDF −1(m, Φ) and αw = CCDF −1(wm, Φ), the linearity does not hold in
general. Especially, for a small Φ, it tends to αw < wα1. Although the CCDF −1
NNS of Critical Infrastructure Network Traﬃc
587
function can be expressed by a regularized gamma function, it is somewhat com-
plex to analyze. Instead, we tested all the CCDF −1(m, 0.01) for m with practi-
cal ranges. Figure 6 illustrates the result of the IID chi-square random variables,
for several diﬀerent Φ. We empirically found that CCDF −1(m, 0.01) decreases
monotonically as m increases. Therefore, we have the following Lemma.
Fig. 6. The ratio CCDF −1(m, Φ)/E[χ2(m)] with respect to m (log scale)
Lemma 2. For Φ
up
=
CCDF −1(wm, Φ)/E[Z (w)
] < CCDF −1(m, Φ)/E[Zt].
0.01,
least
at
t
to wm ≤
10, 000,
Since we aim to detect unknown attacks, it is diﬃcult to quantify the impact
of the attacks. Nevertheless, we can expect that eﬀect of the attacks on traﬃc will
lead to an increase in the NNS distance in most cases from Observation 1. Let
ψt = D(pN (rt), rt) − D(pN (pt), pt)
(15)
be the increased NNS distance. For an attack that continues for a duration of
w, the total increased distance is deﬁned as follow.
ψ(w)
t =
t+w−1(cid:2)
i=t
ψt.
(16)
There are two possible cases to analyze based on ψ(w)
– Case 1: Each ψt+i is similar for i ∈ [t, t + w − 1]
– Case 2: One ψt+i or some ψt+i’s are very diﬀerent from the others.
In Case 1, the following inequality holds for all i ∈ [t, t + w − 1] by Lemma 2.
(17)
] + ψt+i(w)) < CCDF (m, E[Zt+i] + ψt+i)
CCDF (wm, E[Z (w)
.
t
t
Therefore, the window version CCDF (wm, Z (w)
t+i) has a higher probability
of detecting the attack (to be smaller than Φ). In Case 2, some ψt+i is much
larger than others, thereby neither window version CCDF (m, Zt+i + ψt+i) has
a higher probability of detecting the attack.
t+i +ψ(w)
588
J.-H. Yun et al.
4.2 Partitioned NNS
Partition search is a method for eﬀectively detecting an attack or anomaly where
only a small fraction of the nodes have a change in the amount of packet trans-
mission. In this method, the d-dimensional is recursively cut out randomly in
half, and the log distance is obtained by looking at each partition as an inde-
pendent histogram. In this case, if there is a change in the packet transmission
amount within the partition, the abnormal state can be determined more eﬀec-
tively than the abnormal d-dimensional histogram.
Using the relationship between edges when dividing a partition in the entire
histogram allows for the possibility of an attack that avoids our detection meth-
ods. To prevent this possibility, we chose to partition the edges randomly.
4.3 Anomaly Detection on All Sub-Sequences
The detection rates of both windowed and partitioned NNS can be aﬀected by
their parameters: the number of windows and the number of partitions. Instead
of using a single parameter, we set the maximum number of windows and the
maximum number of partitions and perform anomaly detection on all the num-
bers of windows and partitions smaller than this maximum value to determine
the abnormal state.
A naive process of performing all calculations simply can consume a signiﬁ-
cant amount of time. However, since there is a subset relationship between mul-
tiple size windows and recursively truncated partitions, dynamic programming
techniques can be used to create algorithms that work eﬃciently in a practical
time span.
4.4 Eﬃcient Distance Calculation
The process of ﬁnding the smallest distance value by computing (3) for every
X ∈ S can be solved by the NNS in the dw dimension. However, when a number
of nodes communicate with each other on the network, if the number of nodes
is N, the dimension d increases to O(N 2) and the execution time increases
signiﬁcantly. To address this problem, we used a method to speed up the NNS
in a sparse vector.
In a typical network, communication between all pairs of nodes does not
always occur, and communication tends to occur only between predetermined
pairs of nodes. This is even more so in a control network designed to per-
form a speciﬁc task. Table 1 also illustrates this fact, as there are only 614
IP→ IPs (edges) between the 208 nodes based on packets transmitted in site 1,
which is much smaller than the theoretical maximum of 43, 056 = 208×(208−1).
Therefore, instead of storing the data in d-dimensions, we can save the time
required for the nearest search by storing only the non-zero transmission edges
in a sparse format as below.
[(edgeId):(logFrequency), . . . , (edgeId):(logFrequency)]
NNS of Critical Infrastructure Network Traﬃc
589
In this case, the time complexity for distance calculation is O(m1 + m2),
where m1 is the number of non-zero edges in data, m2 is the number of non-zero
edges in a query, and m1 + m2 (cid:12) N 2.
5 Experiments
This section describes the results of applying the extended algorithm to our
dataset. The results in all experiments are calculated based on the number of
packets sent per an edge. Similar results are obtained when the total number of
bytes is used instead of the number of packets and therefore omitted here.
Table 1. Collected traﬃc
Number
of IPs
Number of edges
(IP→ IPs)
Average number of
edges per 1 min
208
40
56
47
57
91
375
174
106
126
780
614
80
117
183
210
297
1,341
393
249
532
3,743
346
37
75
59
96
117
498
133
136
270
1,893
Site Volume
(GB)
1
2
3
4
5
6
7
8
9
366
43
188
440
66
71
1,341
378
300
10
11
381
15,346
Period
(days)
11.7
7.3
9.8
8.3
12.0
5.0
29.0
7.0
8.7
3.0
21.0
5.1 Dataset
We collected traﬃc from 11 active control systems of critical infrastructure in
separated networks. This section introduces the characteristics of the network
traﬃc we collected.
The capacity and collection period of the collected traﬃc are shown in
Table 1. The numbers of IPs and edges represent the total number of IP addresses
and IP→ IPs used in the collected traﬃc. The number of edges is not very large,
considering the number of IPs.
Sites 1 through 9 are control systems of the same domain. The primary
function of sites 1, 7, 8, and 9 is to periodically collect and analyze information,
often requiring operator action to manage equipment and analyze data. Site 2
is a backup site for site 1, site 6 is a testbed replicating site 1, and most of the
network traﬃc on these sites is generated by automated communication between
590
J.-H. Yun et al.
the devices. In sites 3, 4 and 5, managers perform control operations based on
the situation in the ﬁeld. Sites 10 and 11 are control systems of other domains,
and little human intervention is required in these sites. Most of the sites are
operated based on a predetermined schedule. In sites 7, 10, and 11, network
traﬃc was collected for all IPs in the control network, and network traﬃc was
collected only for the main IPs in the remaining sites.2
In all sites, about half of all edges have the maximum number of packet
transmissions of less than 10 per second, and only about 20% of edges have
a maximum of 100 packet transmissions per second or more. It can be seen
that the total amount of network traﬃc is relatively small, and a small number
of edges take up most traﬃc. Some control devices also show various network
traﬃc transmission patterns, but the patterns depend on the monitoring unit
time. Most devices and edges do not show speciﬁc patterns.
Table 2. Precision using the extended algorithm
Site Number of edges Number of partitions Precision (%)
1
2
3
4
5
6
7
8
9
10
11
614
80
117
183
210
297
1,341
393
249
532
3,743
32
8
8
16
16
16
128
32
16
32
256
99.0
98.6
99.0
95.2
99.0
97.4
99.8
99.6
100.0
98.6
99.4
5.2 Precision: Detecting Normal Traﬃc
The parameters for algorithm implementation were determined based on our
experience. The unit time is 60 s and the number of windows is 5.
When dividing a partition, we divide the edges by half recursively, so that
at least 10 edges are included in one partition. Since the total number of edges
need to be considered while dividing a partition, it is not appropriate to specify
the maximum number of partitions for each site equally.
Precision test results are shown as Table 2. High precision can be found at all
sites, regardless of whether the site is controlled by a person or not, and whether
2 For security reasons, we cannot provide more detailed information about our dataset.
NNS of Critical Infrastructure Network Traﬃc
591
the learning period is short or long. We used 80% of the collected normal network
traﬃc as training data and then extracted 500 samples out of the remaining 20%
to determine whether these samples are classiﬁed as normal. As mentioned in
Sect. 3.4, if the input network traﬃc is included in 99% of the learning result, it
is judged as normal.
5.3 Recall: Detecting Anomaly of Traﬃc
We tested whether the proposed algorithm detected abnormal traﬃc generated
by modifying normal traﬃc not used for learning. We used the same parame-
ters and learning data used in the precision experiments. Each experiment was
performed 500 times.
Cyber attack patterns are dependent on the attacker’s knowledge. It is pos-
sible to carry out an attack based on scans of the surroundings and by using a
small amount of traﬃc causing abnormal behaviors of target devices. However,
existing systems have ﬁxed traﬃc transmission patterns that are intertwined
with multiple systems. If an attacker modiﬁes the operations even by a small
degree, the traﬃc patterns will change and the impact will be evident overall.
In general, cyber attacks cause additional traﬃc or changes in content, which
do not normally occur in the ICS. Certain communications may be temporarily
interrupted by cyber attacks. Sometimes cyber attacks can also change speed of
traﬃc transmission.
We present abnormal network traﬃc changes as three parameters in consid-
eration of our anomaly detection algorithm.
– Victim windows indicate the time when the network traﬃc volume changes
and display the windows where the network traﬃc changes among the win-
dows used in anomaly detection.
– Victim edges represent communication paths that change the actual
network traﬃc throughput per victim window and are selected among
IP→ IPsshown in the learning process.
– Added packets indicates the number of added packets for each victim edge.
In the proposed algorithm, the increments and decrements in the amount
of network traﬃc produce the same eﬀect in the calculation of the distance
between network traﬃc instances. Therefore, in order to simplify the experi-
ment, only the case where the number of packets increases is considered3.
Table 3 shows the detection rate of our algorithm for anomalous network
traﬃc activity for ﬁve minutes. It can be seen that the detection rate increases
more rapidly when the number of victim edges becomes larger than the increases
in the added packets. Since the log scale is used to represent the number of
packets in the histogram at the current unit time, it is advantageous to select
a victim edge with few or no packets when the distance based on the change in
3 In our additional experiments, which are omitted in this paper, the proposed method
also showed similar detection power when the total number of bytes is increased or
decreased.
592
J.-H. Yun et al.
Table 3. Recall according to the numbers of victim edges and added packets
Site Number of victim edges Victim windows: 1,2,3,4,5
Number of added packets
1
2
3
4
5
6
7
8
9
10
11
1
2
5
10
1
2
5
10
1
2
5
10
1
2
5
10
1
2
5
10
1
2
5
10
1
2
5
10
1
2
5
10
1
2
5
10
1
2
5
10
1
2
5
10
1
5
10
68.4
91.0
68.4
91.0
26.4
35.0
74.8
94.6
11.0
12.2
30.6
43.4
97.2
99.6
26.0
35.0
71.2
90.4
10.4
8.6
18.0
39.2
97.2
99.6
20
68.4
68.4
91.0
91.0
100.0 100.0 100.0 100.0
100.0 100.0 100.0 100.0
25.4
26.8
36.0
32.8
76.8
59.4
96.4
67.4
10.2
14.2
20.6
8.0
40.8
7.6
48.6
15.6
97.2
97.2
99.6
99.6
100.0 100.0 100.0 100.0
100.0 100.0 100.0 100.0
1.2
1.2
0.8
0.8
2.4
2.2
3.4
2.4
82.8
82.8
99.6
99.6
100.0 100.0 100.0 100.0
100.0 100.0 100.0 100.0
58.0
58.0
63.8
63.8
64.0
64.2
64.0
63.6
66.2