load balancer, one interface in a multi-interface hop inside a load balancer, or unrelated
to load balancing. After building the database of load balancers, FastMapping performs
periodic measurement rounds. Each round has two main steps as follows.
Fast route measurements. FastMapping probes all monitored virtual paths periodi-
cally to check for route changes. To minimize probing overhead, we turn off MDA and
modify Paris traceroute to send a single probe per hop until it reaches the destination.
We send one probe per TTL up to TTL 30 spaced by 50ms, and stop as soon as we
receive an answer from the destination. We space probes by 50ms instead of waiting for
the answer at each hop to reduce the probing time and the probability that a failure or
route change will happen while Paris traceroute traces a route. We minimize the number
of unresponsive hops by retransmitting timed-out probes up to three times.
Update load balancer database. FastMapping uses the database of load balancers to
verify for each observed interface whether it was already seen in past measurements
with MDA. If the interface is new (usually few), FastMapping uses MDA to remap the
route and update the load balancer database. FastMapping forces periodic updates to
the database of load balancers by removing entries older than 24 hours.
This probing strategy guarantees that all probes in a virtual path follow the same
route unless there is a route change. The load balancer database allows us to identify
cases of per-packet load balancing and disregard them when computing route changes.
Finally, any new interface seen in the fast route measurements—due to, e.g., routing
changes, new load balancers, or an internal change—triggers an execution of MDA so
FastMapping can differentiate between route changes and load balancing.
We compare the route dynamics seen with FastMapping with that observed by MDA
using trace-driven simulations. We use D2 as basis and compute what FastMapping
would see. We ﬁnd 10,013,958 route changes using complete load balancer infor-
mation from MDA and 9,822,372 route changes using FastMapping, i.e., only 1.9%
less changes. This small difference is due to either MDA mapping errors or transient
changes. For example, 40% of the missed changes happen in measurement rounds
where a load balancer disappears for only one round. FastMapping misses these changes
because undetected load balancers are still present in FastMapping’s database of load
Measuring and Characterizing End-to-End Route Dynamics
241
balancers, so FastMapping attributes the differences to load balancing instead of route
changes. In this trace-driven comparison, FastMapping can at most detect all route
changes seen in D2. In practice, however, FastMapping probes faster than MDA, so
it should detect more transient route changes (as we conﬁrm in Sec. 5).
4.3 Dataset
We use FastMapping to collect a dataset, denoted D3, from 70 PlanetLab nodes for
ﬁve weeks starting September 1st, 2010. We use the same destination list and ICMP
probes as in D1 and D2. Due to FastMapping’s probing strategy, D3 has much higher
probing frequency than D1 and D2, taking only 4.4 minutes on average to perform a
measurement round. We remove 2.1% of route measurements from D3 that contain
repeated interfaces. D3 traverses 7,842 ASes and 97% of the large ASes [10].
5 Route Prevalence and Persistence
We use D2 and D3 to study Internet route dynamics. We reappraise Paxson’s previous
results on route persistence and prevalence [11] with our recent datasets. D2 probes 115
times more virtual paths than Paxson’s original dataset, and D3 probes 66 times more
virtual paths. In addition, D2 and D3 have more frequent route measurements.
Route persistence. Route persistence identiﬁes how long a route remains stable before
it changes. The challenge is to know whether a route A measured at times t1 and t2
remained stable between t1 and t2. If route A changed to B then back to A between t1
and t2, then we missed a route change.
Paxson spaced his route measurements using a Poisson process. Although Paxson
did not have frequent measurements, the Poisson process enabled him to study route
changes at small time scales and compute the probability of missing route changes. In
our datasets, we substitute the Poisson probing process with high-frequency periodic
measurements that allow the study of persistence at ﬁner time scales. Except for this
difference, we follow the same methodology as Paxson: We start by removing very un-
stable routes from our datasets, and then estimate the probability of missing a route
change in the remaining routes. We ﬁlter from our dataset virtual paths where we are
more likely to miss route changes: We remove 288 (0.4%) virtual paths that change
more frequently than once every 20 minutes. Causes for frequent route changes include
undetected load balancers, dynamically-allocated IP addresses, and coarse-grained load
balancing in server farms. In the remaining virtual paths, the probability of a route
changing between two consecutive measurements is small (0.5%). We expect the prob-
ability of having two or more route changes between two measurements (and thus miss-
ing route changes) to be even less. Moreover, we only report long route durations when
the same route is measured repeatedly. These factors give us conﬁdence that long-lived
routes are indeed stable.
Fig. 4 shows the cumulative distribution of route durations for every route in D2 and
D3. We cut the x-axis at 10 hours to focus on the body of the distribution, but some
routes last over the entire datasets. We observe that most routes are short-lived, which
indicates that virtual paths are rapidly changing routes. Moreover, it shows that measur-
ing virtual paths every 38 minutes is not enough to accurately capture route dynamics:
D2 misses 36% of route changes that last less than 38 minutes when compared to D3.
242
´I. Cunha, R. Teixeira, and C. Diot
t
s
e
u
o
R
f
o
n
o
i
t
c
a
r
F
e
v
i
t
l
a
u
m
u
C
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
38 minutes
t
s
e
u
o
R
f
o
n
o
i
t
c
a
r
F
D3
D2
 2
 4
 6
 8
 10
Route Duration (h)
 0.3
 0.25
 0.2
 0.15
 0.1
 0.05
 0
 0
D2
 10
 20
 30
 40
 50
Route Duration (Days)
Fig. 4. Persistence of short routes
Fig. 5. Persistence of long routes
Although the number of short-lived routes is larger than the number of long-lived
routes, the fraction of time virtual paths spend in short-lived routes is small. In D3,
virtual paths spend 96% of the time in routes longer than 6 hours, similar to Paxson’s
ﬁndings [11]. In other words, virtual paths are mostly stable but go through “instability
periods” with multiple route changes happening within a short time period. The D3
line in Fig. 4 shows that 40% of consecutive route changes happen within 15 minutes
of each other. Such instability periods with similar characteristics are also reported by
Paxson [11] and Feamster et al. [4].
Fig. 5 shows the distribution of route durations longer than 12 hours from our longer
D2 dataset. Results for D3 (not shown) are similar but skewed towards shorter routes be-
cause the dataset lasts only 5 weeks. Our observations are again similar to Paxson’s [11],
with some differences that we discuss below. Paxson found that long-lived routes could
be split in two broad classes: 50% of routes that persist for 1-7 days and 50% that per-
sist for weeks. These two classes were motivated by a sharp knee in his distribution of
long-lived route durations at seven days. Our distribution does not have such a sharp
knee and it is impossible to identify two classes of stable routes. We believe this dif-
ference comes from our larger dataset and higher probing frequency that allows us to
detect more route changes. It could also be due to the different set of monitored virtual
paths.
Route prevalence. We study the fraction of time a virtual path stays in its prevalent
route, i.e., the route that most frequently realizes the virtual path. Fig. 6 shows the
distribution of the fraction of time a virtual path uses its prevalent route in D3 (“whole
dataset” line). Similar to Paxson [11], we ﬁnd that 62% of virtual paths have a route
that stays active during at least 60% of the time.
Paxson’s original deﬁnition of prevalence only looked at the route that was prevalent
over the whole dataset. We extend Paxson’s results and study whether prevalent routes
change over time, and for how long they stay prevalent. We study prevalent routes in
time windows varying from three days to the whole dataset. Fig. 6 also shows the dis-
tribution of the fraction of time a virtual path uses the prevalent route for different time
windows (dashed lines). The smaller the time window, the more often virtual paths are
in the prevalent route, conﬁrming that prevalent routes change over time. We use D2, to
study the long-term behavior of prevalent routes. We ﬁnd that for a window of 2 weeks,
Measuring and Characterizing End-to-End Route Dynamics
243
t
s
h
a
P
l
a
u
t
r
i
V
f
o
n
o
i
t
c
a
r
F
e
v
i
t
l
a
u
m
u
C
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
Over whole dataset
Over two weeks
Over one week
Over three days
 0.2
 0.4
 0.6
 0.8
 1
Fraction of Time in Prevalent Route
t
s
e
u
o
R
f
o
n
o
i
t
c
a
r
F
e
v
i
t
l
a
u
m
u
C
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
Non-prevalent routes
Prevalent routes (over 2 weeks)
 2
 4
 6
 8
 10
Route Duration (h)
Fig. 6. Route prevalence
Fig. 7. Persistence of prevalent routes
77% of virtual paths have prevalent routes that stay prevalent for more than one month,
and only 14% of paths have a single prevalent route throughout the 13 weeks in D2.
Fig. 7 shows the distribution of route durations for routes prevalent over a window
of two weeks and for non-prevalent routes. It shows that prevalent routes are less likely
to have short durations: while 85% of non-prevalent routes have durations shorter than
four hours, this fraction is only 60% for prevalent routes. This result suggests that in-
formation about whether a route is prevalent is a good indicator of path stability.
6 Related Work
Topology mapping. Techniques such as Tracetree [6] (which we evaluate in Sec. 3),
its predecessor DoubleTree [3], and more recently the dynamic destination selection
technique of Beverly et. al [2] reduce redundant probes and consequently increase the
frequency of topology mapping. None of these techniques explicitly handles load bal-
ancers. As a result, they cannot disambiguate routing changes from load balancing as
we do with FastMapping. Paris traceroute’s MDA explicitly identiﬁes load balancing,
but at the cost of large probing overhead [14]. FastMapping represents a tradeoff be-
tween these approaches: it achieves fast probing with daily updates of load balancers.
FastMapping can be directly applied to large-scale topology mapping projects such as
CAIDA’s Skitter/Ark [5], DIMES [13], or iPlane [9].
Characterization of route dynamics. Since 1997, few studies have reported some
characteristics of the location of route changes [4,15], but there has been no reappraisal
of Paxson’s work on end-to-end route dynamics. Most related to our characterization
of route dynamics is the recent work by Schwartz et. al [12]. This work uses tracer-
outes collected by DIMES to study the persistence and prevalence of end-to-end routes,
among other properties. Their probing method is oblivious to load balancing, so they
cannot differentiate route dynamics from load balancing. For a discussion of BGP dy-
namics, we refer the reader to the work of Li et. al [7] (and references within).
7 Conclusion
The study of end-to-end Internet route dynamics requires high probing frequency. Un-
fortunately, the cost of mapping load balancers to disambiguate routing changes from
244
´I. Cunha, R. Teixeira, and C. Diot
load balancing reduces considerably probing frequency. We address this challenge with
FastMapping. Based on the observation that load balancers are stable, FastMapping
remaps load balancers when a change is detected and updates them once per day. We use
FastMapping to measure route dynamics from PlanetLab for ﬁve weeks. The compar-
ison of our observations to Paxson’s [11] shows that despite the growth of the Internet
and the introduction of new trafﬁc engineering practices, route persistence and preva-
lence have not changed signiﬁcantly. Although we use FastMapping to perform high-
frequency probing and study route dynamics, FastMapping’s probing strategy can also
be used to decrease probing overhead while keeping the probing frequency constant.
Acknowledgements. This work was supported by the European Community’s 7th
Framework Programme (FP7/2007-2013) no. 223850 (NaDa) and the ANR project
C’MON.
References
1. Augustin, B., Friedman, T., Teixeira, R.: Measuring Load-balanced Paths in the Internet. In:
Proc. IMC (2007)
2. Beverly, R., Berger, A., Xie, G.: Primitives for Active Internet Topology Mapping: Toward
High-Frequency Characterization. In: Proc. IMC (2010)
3. Donnet, B., Raoult, P., Friedman, T., Crovella, M.: Efﬁcient Algorithms for Large-scale
Topology Discovery. In: Proc. ACM SIGMETRICS (2005)
4. Feamster, N., Andersen, D., Balakrishnan, H., Kaashoek, M.: Measuring the Effects of Inter-
net Path Faults on Reactive Routing. In: Proc. ACM SIGMETRICS (2003)
5. Claffy, K., Hyun, Y., Keys, K., Fomenkov, M., Krioukov, D.: Internet Mapping: from Art to
Science. In: Proc. IEEE CATCH (2009)
6. Latapy, M., Magnien, C., Ou´edraogo, F.: A Radar for the Internet. In: Proc. First Inter. Work-
shop on Analysis of Dynamic Networks (2008)
7. Li, J., Guidero, M., Wu, Z., Purpus, E., Ehrenkranz, T.: BGP Routing Dynamics Revisited.
SIGCOMM Comput. Commun. Rev. 37(2), 5–16 (2007)
8. Luckie, M., Hyun, Y., Huffaker, B.: Traceroute Probe Method and Forward IP Path Inference.
In: Proc. IMC (2008)
9. Madhyastha, H., Isdal, T., Piatek, M., Dixon, C., Anderson, T., Krishnamurthy, A.,
Venkataramani, A.: iPlane: an Information Plane for Distributed Services. In: Proc. USENIX
OSDI (2006)
10. Oliveira, R., Pei, D., Willinger, W., Zhang, B., Zhang, L.: The (in)completeness of the Ob-
served Internet AS-level Structure. IEEE/ACM Trans. Netw. 18(1), 109–122 (2010)
11. Paxson, V.: End-to-end Routing Behavior in the Internet. IEEE/ACM Trans. on Netw. 5(5),
601–615 (1997)
12. Schwartz, Y., Shavitt, Y., Weinsberg, U.: On the Diversity, Stability and Symmetry of End-
to-End Internet Routes. In: Proc. of Global Internet (2010)
13. Shavitt, Y., Shir, E.: DIMES: Let the Internet Measure Itself. SIGCOMM Comput. Commun.
Rev. 35(5), 71–74 (2005)
14. Veitch, D., Augustin, B., Friedman, T., Teixeira, R.: Failure Control in Multipath Route Trac-
ing. In: Proc. IEEE INFOCOM (2009)
15. Zhang, M., Zhang, C., Pai, V., Peterson, L., Wang, R.: PlanetSeer: Internet Path Failure Mon-
itoring and Characterization in Wide-area Services. In: Proc. USENIX OSDI (2004)