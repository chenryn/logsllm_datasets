actor_token
A token that identifies the party that is acting on behalf of the user. 
If not specified, the identity of the client will be used.
actor_token_type
The type of the actor_token parameter.
433
Service API calls in response to user requests
When a backend service introspects the exchanged access token, they may see a
nested chain of act claims, as shown in listing 11.15. As with other access tokens, the
sub claim indicates the user on whose behalf the request is being made. Access con-
trol decisions should always be made primarily based on the user indicated in this
claim. Other claims in the token, such as roles or permissions, will be about that user.
The first act claim indicates the calling service that is acting on behalf of the user. An
act claim is itself a JSON claims set that may contain multiple identity attributes about
the calling service, such as the issuer of its identity, which may be needed to uniquely
identify the service. If the token has passed through multiple services, then there may
be further act claims nested inside the first one, indicating the previous services that
also acted as the same user in servicing the same request. If the backend service wants
to take the service account into consideration when making access control decisions,
it should limit this to just the first (outermost) act identity. Any previous act identities
are intended only for ensuring a complete audit record.
NOTE
Nested act claims don’t indicate that service77 is pretending to be ser-
vice16 pretending to be Alice! Think of it as a mask being passed from actor
to actor, rather than a single actor wearing multiple layers of masks.
{
   "aud":"https://service26.example.com",
   "iss":"https://issuer.example.com",
   "exp":1443904100,
   "nbf":1443904000,
   "sub":"PI:EMAIL",     
   "act":                                    
   {
     "sub":"https://service16.example.com",  
     "act":                                    
     {
       "sub":"https://service77.example.com"   
     }
   }
 }
Token exchange introduces an additional network roundtrip to the AS to exchange
the access token at each hop of servicing a request. It can therefore be more expen-
sive than the phantom token pattern and introduce additional latency in a microser-
vices architecture. Token exchange is more compelling when service calls cross trust
boundaries and latency is less of a concern. For example, in healthcare, a patient may
enter the healthcare system and be treated by multiple healthcare providers, each of
which needs some level of access to the patient’s records. Token exchange allows one
provider to hand off access to another provider without repeatedly asking the patient
for consent. The AS decides an appropriate level of access for each service based on
configured authorization policies.
Listing 11.16
An exchanged access token introspection response
The effective user 
of the token
The service that is acting 
on behalf of the user
A previous service that also 
acted on behalf of the user 
in the same request
434
CHAPTER 11
Securing service-to-service APIs
NOTE
When multiple clients and organizations are granted access to user data
based on a single consent flow, you should ensure that this is indicated to the
user in the initial consent screen so that they can make an informed decision.
Macaroons for service APIs
If the scope or authority of a token only needs to be reduced when calling other ser-
vices, a macaroon-based access token (chapter 9) can be used as an alternative to
token exchange. Recall that a macaroon allows any party to append caveats to the
token, restricting what it can be used for. For example, an initial broad-scoped token
supplied by a user granting access to their patient records can be restricted with
caveats before calling external services, perhaps only to allow access to notes from
the last 24 hours. The advantage is that this can be done locally (and efficiently) with-
out having to call the AS to exchange the token.
A common use of service credentials is for a frontend API to make calls to a backend
database. The frontend API typically has a username and password that it uses to
connect, with privileges to perform a wide range of operations. If instead the data-
base used macaroons for authorization, it could issue a broadly privileged macaroon
to the frontend service. The frontend service can then append caveats to the maca-
roon and reissue it to its own API clients and ultimately to users. For example, it might
append a caveat user = "mary" to a token issued to Mary so that she can only read
her own data, and an expiry time of 5 minutes. These constrained tokens can then
be passed all the way back to the database, which can enforce the caveats. This was
the approach adopted by the Hyperdex database (http://mng.bz/gg1l). Very few data-
bases support macaroons today, but in a microservice architecture you can use the
same techniques to allow more flexible and dynamic access control.
Pop quiz
13 In the phantom token pattern, the original access token is replaced by which one
of the following?
a
A macaron
b
A SAML assertion
c
A short-lived signed JWT
d
An OpenID Connect ID token
e
A token issued by an internal AS
14 In OAuth2 token exchange, which parameter is used to communicate a token
that represents the user on whose behalf the client is operating?
a
The scope parameter
b
The resource parameter
c
The audience parameter
d
The actor_token parameter
e
The subject_token parameter
The answers are at the end of the chapter.
435
Summary
Answers to pop quiz questions
1
d and e. API keys identify services, external organizations, or businesses that
need to call your API. An API key may have a long expiry time or never expire,
while user tokens typically expire after minutes or hours.
2
e.
3
e. Client credentials and service account authentication can use the same mecha-
nisms; the primary benefit of using a service account is that clients are often
stored in a private database that only the AS has access to. Service accounts live
in the same repository as other users and so APIs can query identity details and
role/group memberships.
4
c, d, and e.
5
e. The CertificateRequest message is sent to request client certificate authenti-
cation. If it’s not sent by the server, then the client can’t use a certificate.
6
c. The client signs all previous messages in the handshake with the private key.
This prevents the message being reused for a different handshake.
7
b.
8
f. The only check required is to compare the hash of the certificate. The AS per-
forms all other checks when it issues the access token. While an API can option-
ally implement additional checks, these are not required for security.
9
False. A client can request certificate-bound access tokens even if it uses a differ-
ent client authentication method. Even a public client can request certificate-
bound access tokens.
10
a and d.
11
d.
12
a. HKDF-Expand. HKDF-Extract is used to convert non-uniform input key mate-
rial into a uniformly random master key.
13
c.
14
e.
Summary
 API keys are often used to authenticate service-to-service API calls. A signed or
encrypted JWT is an effective API key. When used to authenticate a client, this is
known as JWT bearer authentication.
 OAuth2 supports service-to-service API calls through the client credentials grant
type that allows a client to obtain an access token under its own authority.
 A more flexible alternative to the client credentials grant is to create service
accounts which act like regular user accounts but are intended for use by services.
Service accounts should be protected with strong authentication mechanisms
because they often have elevated privileges compared to normal accounts.
 The JWT bearer grant type can be used to obtain an access token for a service
account using a JWT. This can be used to deploy short-lived JWTs to services
436
CHAPTER 11
Securing service-to-service APIs
when they start up that can then be exchanged for access and refresh tokens.
This avoids leaving long-lived, highly-privileged credentials on disk where they
might be accessed.
 TLS client certificates can be used to provide strong authentication of service
clients. Certificate-bound access tokens improve the security of OAuth2 and
prevent token theft and misuse.
 Kubernetes includes a simple method for distributing credentials to services,
but it suffers from some security weaknesses. Secret vaults and key management
services provide better security but need an initial credential to access. A short-
lived JWT can provide this initial credential with the least risk. 
 When service-to-service API calls are made in response to user requests, care
should be taken to avoid confused deputy attacks. To avoid this, the original user
identity should be communicated to backend services. The phantom token pat-
tern provides an efficient way to achieve this in a microservice architecture, while
OAuth2 token exchange and macaroons can be used across trust boundaries.
Part 5
APIs for the
Internet of Things
This final part of the book deals with securing APIs in one of the most chal-
lenging environments: the Internet of Things (IoT). IoT devices are often lim-
ited in processing power, battery life, and other physical characteristics, making
it difficult to apply many of the techniques from earlier in the book. In this part,
you’ll see how to adapt techniques to be more suitable for such constrained
devices.
 Chapter 12 begins with a look at the crucial issue of securing communica-
tions between devices and APIs. You’ll see how transport layer security can be
adapted to device communication protocols using DTLS and pre-shared keys.
Securing communications from end to end when requests and responses must
pass over multiple different transport protocols is the focus of the second half of
the chapter.
 Chapter 13 concludes the book with a discussion of authentication and
authorization techniques for IoT APIs. It discusses approaches to avoid replay
attacks and other subtle security issues and concludes with a look at handling
authorization when a device is offline.
439
Securing IoT
communications
So far, all the APIs you’ve looked at have been running on servers in the safe con-
fines of a datacenter or server room. It’s easy to take the physical security of the API
hardware for granted, because the datacenter is a secure environment with restricted
access and decent locks on the doors. Often only specially vetted staff are allowed
into the server room to get close to the hardware. Traditionally, even the clients of
an API could be assumed to be reasonably secure because they were desktop PCs
installed in an office environment. This has rapidly changed as first laptops and
then smartphones have moved API clients out of the office environment. The inter-
net of things (IoT) widens the range of environments even further, especially in
industrial or agricultural settings where devices may be deployed in remote envi-
ronments with little physical protection or monitoring. These IoT devices talk to
APIs in messaging services to stream sensor data to the cloud and provide APIs of
This chapter covers
 Securing IoT communications with Datagram TLS
 Choosing appropriate cryptographic algorithms for 
constrained devices
 Implementing end-to-end security for IoT APIs
 Distributing and managing device keys
440
CHAPTER 12
Securing IoT communications
their own to allow physical actions to be taken, such as adjusting machinery in a water
treatment plant or turning off the lights in your home or office. In this chapter, you’ll
see how to secure the communications of IoT devices when talking to each other and
to APIs in the cloud. In chapter 13, we’ll discuss how to secure APIs provided by
devices themselves.
DEFINITION
The internet of things (IoT) is the trend for devices to be connected
to the internet to allow easier management and communication. Consumer IoT
refers to personal devices in the home being connected to the internet, such
as a refrigerator that automatically orders more beer when you run low. IoT
techniques are also applied in industry under the name industrial IoT (IIoT).
12.1
Transport layer security
In a traditional API environment, securing the communications between a client and
a server is almost always based on TLS. The TLS connection between the two parties is
likely to be end-to-end (or near enough) and using strong authentication and encryp-
tion algorithms. For example, a client making a request to a REST API can make a
HTTPS connection directly to that API and then largely assume that the connection is
secure. Even when the connection passes through one or more proxies, these typically
just set up the connection and then copy encrypted bytes from one socket to another.
In the IoT world, things are more complicated for many reasons:
 The IoT device may be constrained, reducing its ability to execute the public key
cryptography used in TLS. For example, the device may have limited CPU
power and memory, or may be operating purely on battery power that it needs
to conserve.
 For efficiency, devices often use compact binary formats and low-level network-
ing based on UDP rather than high-level TCP-based protocols such as HTTP
and TLS.
 A variety of protocols may be used to transmit a single message from a device to
its destination, from short-range wireless protocols such as Bluetooth Low
Energy (BLE) or Zigbee, to messaging protocols like MQTT or XMPP. Gateway
devices can translate messages from one protocol to another, as shown in fig-
ure 12.1, but need to decrypt the protocol messages to do so. This prevents a
simple end-to-end TLS connection being used.
 Some commonly used cryptographic algorithms are difficult to implement
securely or efficiently on devices due to hardware constraints or new threats
from physical attackers that are less applicable to server-side APIs.
DEFINITION
A constrained device has significantly reduced CPU power, mem-
ory, connectivity, or energy availability compared to a server or traditional
API client machine. For example, the memory available to a device may be
measured in kilobytes compared to the gigabytes often now available to most
servers and even smartphones. RFC 7228 (https://tools.ietf.org/html/rfc7228)
describes common ways that devices are constrained.
441
Transport layer security
In this section, you’ll learn about how to secure IoT communications at the transport
layer and the appropriate choice of algorithms for constrained devices.
TIP
There are several TLS libraries that are explicitly designed for IoT appli-
cations, such as ARM’s mbedTLS (https://tls.mbed.org), WolfSSL (https://www
.wolfssl.com), and BearSSL (https://bearssl.org).
12.1.1 Datagram TLS
TLS is designed to secure traffic sent over TCP (Transmission Control Protocol),
which is a reliable stream-oriented protocol. Most application protocols in common
use, such as HTTP, LDAP, or SMTP (email), all use TCP and so can use TLS to secure
the connection. But a TCP implementation has some downsides when used in con-
strained IoT devices, such as the following:
 A TCP implementation is complex and requires a lot of code to implement cor-
rectly. This code takes up precious space on the device, reducing the amount of
code available to implement other functions.
 TCP’s reliability features require the sending device to buffer messages until
they have been acknowledged by the receiver, which increases storage require-
ments. Many IoT sensors produce continuous streams of real-time data, for
which it doesn’t make sense to retransmit lost messages because more recent
data will already have replaced it.
 A standard TCP header is at least 16 bytes long, which can add quite a lot of
overhead to short messages.
 TCP is unable to use features such as multicast delivery that allow a single mes-
sage to be sent to many devices at once. Multicast can be much more efficient
than sending messages to each device individually.
Sensor
Gateway
Gateway
Cloud
service
BLE
MQTT
HTTP
The sensor broadcasts data
to a local gateway over
Bluetooth Low-Energy (BLE).
Gateways convert messages from
one protocol to another.
Figure 12.1
Messages from IoT 
devices are often translated from one 
protocol to another. The original device 
may use low-power wireless networking 
such as Bluetooth Low-Energy (BLE) to 
communicate with a local gateway that 
retransmits messages using application 
protocols such as MQTT or HTTP. 
442
CHAPTER 12
Securing IoT communications
 IoT devices often put themselves into sleep mode to preserve battery power
when not in use. This causes TCP connections to terminate and requires an
expensive TCP handshake to be performed to re-establish the connection when
the device wakes. Alternatively, the device can periodically send keep-alive mes-
sages to keep the connection open, at the cost of increased battery and band-
width usage.
Many protocols used in the IoT instead opt to build on top of the lower-level User
Datagram Protocol (UDP), which is much simpler than TCP but provides only con-
nectionless and unreliable delivery of messages. For example, the Constrained Applica-
tion Protocol (CoAP), provides an alternative to HTTP for constrained devices and is
based on UDP. To protect these protocols, a variation of TLS known as Datagram TLS
(DTLS) has been developed.1
DEFINITION
Datagram Transport Layer Security (DTLS) is a version of TLS
designed to work with connectionless UDP-based protocols rather than TCP-
based ones. It provides the same protections as TLS, except that packets may
be reordered or replayed without detection.
Recent DTLS versions correspond to TLS versions; for example, DTLS 1.2 corre-
sponds to TLS 1.2 and supports similar cipher suites and extensions. At the time of
writing, DTLS 1.3 is just being finalized, which corresponds to the recently standard-
ized TLS 1.3.
1 DTLS is limited to securing unicast UDP connections and can’t secure multicast broadcasts currently.
QUIC
A middle ground between TCP and UDP is provided by Google’s QUIC protocol (Quick
UDP Internet Connections; https://en.wikipedia.org/wiki/QUIC), which will form the
basis of the next version of HTTP: HTTP/3. QUIC layers on top of UDP but provides
many of the same reliability and congestion control features as TCP. A key feature of
QUIC is that it integrates TLS 1.3 directly into the transport protocol, reducing the
overhead of the TLS handshake and ensuring that low-level protocol features also
benefit from security protections. Google has already deployed QUIC into production,
and around 7% of Internet traffic now uses the protocol.
QUIC was originally designed to accelerate Google’s traditional web server HTTPS
traffic, so compact code size was not a primary objective. However, the protocol can
offer significant advantages to IoT devices in terms of reduced network usage and
low-latency connections. Early experiments such as an analysis from Santa Clara Uni-
versity (http://mng.bz/X0WG) and another by NetApp (https://eggert.org/papers/
2020-ndss-quic-iot.pdf) suggest that QUIC can provide significant savings in an IoT
context, but the protocol has not yet been published as a final standard. Although not
yet achieving widespread adoption in IoT applications, it’s likely that QUIC will
become increasingly important over the next few years.
443
Transport layer security
Although Java supports DTLS, it only does so in the form of the low-level SSLEngine
class, which implements the raw protocol state machine. There is no equivalent of the
high-level SSLSocket class that is used by normal (TCP-based) TLS, so you must do
some of the work yourself. Libraries for higher-level protocols such as CoAP will
handle much of this for you, but because there are so many protocols used in IoT
applications, in the next few sections you’ll learn how to manually add DTLS to a
UDP-based protocol.
NOTE
The code examples in this chapter continue to use Java for consis-
tency. Although Java is a popular choice on more capable IoT devices and
gateways, programming constrained devices is more often performed in C
or another language with low-level device support. The advice on secure
configuration of DTLS and other protocols in this chapter is applicable to
all languages and DTLS libraries. Skip ahead to section 12.1.2 if you are not
using Java.
IMPLEMENTING A DTLS CLIENT
To begin a DTLS handshake in Java, you first create an SSLContext object, which indi-
cates how to authenticate the connection. For a client connection, you initialize the
context exactly like you did in section 7.4.2 when securing the connection to an
OAuth2 authorization server, as shown in listing 12.1. First, obtain an SSLContext for
DTLS by calling SSLContext.getInstance("DTLS"). This will return a context that