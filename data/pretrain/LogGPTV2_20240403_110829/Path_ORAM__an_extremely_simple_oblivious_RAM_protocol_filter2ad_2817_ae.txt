(cid:33)
q≥1
(
pk =
(cid:32)
wk + |V |
2L
q
mk
(1 −
wk
2L − |V | )mk (
wk
2L − |V | )q−mk .
(11)
Expected number of blocks in T . Notice that the ex-
pectation E[mk|(wt)t≥1] is equal to
(cid:88)
q≥1
=
wk + |V |
2L
(
)q−1(1 − wk + |V |
2L
)q(1 −
wk
2L − |V | )
1 − wk/(2L − |V |)
1 − (wk + |V |)/2L = 1/(1 − |V |/2l).
This is proved in a diﬀerent way in Section 6.3, where we use
(6) to show that the expectation of the usage of T is at most
2n for utilization N/2L ≤ 2 and for bucket size Z ≥ 4. For
this reason we expect to be able to use a Chernoﬀ bound to
prove that with negligible probability T ’s usage is more than
T ’s capacity:
Probability generating functions. From (5) and (11):
n−2|V |(cid:88)
t=0
P rob(
p =
mt > nZ + R) ≤ max
(wt)t≥1
(cid:88)
(mt)
n−2|V |
t=0
with (cid:80)n−2|V |
t=0
mt>nZ+R
p, where
p0 ·(cid:89)
k≥1
The probability generating function corresponding to p0 is
(cid:32)
(cid:33)
N(cid:88)
m=0
|V |
2L )m(1 − |V |
2L )N−mX m
(
N
m
= (1 + (|V |/2L)(X − 1))N ≤ exp((|V |/2L)(X − 1)N )
αq−1(1 − α)[1 + β(X − 1)]q.
(12)
α =
wk + |V |
2L
≤ 1 and β = 1 −
wk
2L − |V | .
By the binomial theorem, (12) is equal to
(β(X − 1))m
αq−1(1 − α)(β(X − 1))m
(cid:32)
(cid:33)
q
m
q(cid:88)
(cid:33)
m=0
αq−1(1 − α)
(cid:32)
(cid:88)
(cid:88)
q≥1
= 1 +
= 1 +
(cid:88)
(cid:88)
m≥1
m≥1
q≥m
q
m
αm−1
(1 − α)m (β(X − 1))m.
(cid:21)m
(X − 1)
(cid:88)
(cid:20)
1 − N/(Z2L)
m≥1
Notice that α ≤ 1 and β/(1 − α) = 1/(1 − |V |/2L) ≤
1/(1 − N/(Z2L)) by (6).4 This proves that (12) is at most
(X − 1)
(X − 1)
(1 − N/(Z2L)) − (X − 1)
≤ exp(
(1 − N/(Z2L)) − (X − 1)
)
for 1 ≤ X  nZ + R|a(s) = a) ≤ M [ez]
ez(nZ+R)
= exp(n
ez − 1
2 − N/(Z2L) − ez − zZ
− zR).
(cid:20)
(cid:21)
Main theorem. The ﬁrst part of the main theorem follows
by substituting Z = 7, ez = 1.6 and bounding L ≥ (cid:100)log N(cid:101)+1
(notice that both (13) and (14) hold), which gives 0.625R/4.3n
as an upper bound on the tail distribution. Plugging this
into the union bound (1) yields
P rob(u(TL(Z)[s]) > R|a(s) = a)
4n0.625R/4.3n ≤ 14 · 0.625R.
(15)
≤(cid:88)
n≥1
By substituting Z = 6, ez = 1.5 and bounding L ≥ (cid:100)log N(cid:101) +
3 we obtain the bound 370 · 0.667R, the second part of the
main theorem.
Acknowledgments
This work is partially supported5 by the NSF Graduate Re-
search Fellowship grants DGE-0946797 and DGE-1122374,
the DoD NFSEG Fellowship, NSF grant CNS-1314857, DARPA
CRASH program N66001-10-2-4089, and a grant from the
Amazon Web Services in Education program. We would
like to thank Kai-Min Chung and Jonathan Katz for helpful
discussions, Hubert Chan for his generous and unconditional
help, and Kai-Min Chung for pointing out that our algorithm
is statistically secure.
7. REFERENCES
[1] Personal communication with Kai-Min Chung, 2013.
[2] M. Ajtai. Oblivious rams without cryptogrpahic
assumptions. In Proceedings of the 42nd ACM symposium
on Theory of computing, STOC ’10, pages 181–190, 2010.
[3] D. Asonov and J.-C. Freytag. Almost optimal private
information retrieval. In PET, 2003.
[4] D. Boneh, D. Mazieres, and R. A. Popa. Remote oblivious
storage: Making oblivious RAM practical. Manuscript,
http://dspace.mit.edu/bitstream/handle/1721.1/62006/
MIT-CSAIL-TR-2011-018.pdf, 2011.
[5] K.-M. Chung, Z. Liu, and R. Pass. Statistically-secure oram
with ˜O(log2 n) overhead. http://arxiv.org/abs/1307.3699,
2013.
[6] K.-M. Chung and R. Pass. A simple oram.
https://eprint.iacr.org/2013/243.pdf, 2013.
[7] I. Damg˚ard, S. Meldgaard, and J. B. Nielsen. Perfectly
secure oblivious RAM without random oracles. In TCC,
2011.
[8] I. Damg˚ard, S. Meldgaard, and J. B. Nielsen. Perfectly
secure oblivious ram without random oracles. In TCC, pages
144–163, 2011.
[9] C. Fletcher, M. van Dijk, and S. Devadas. Secure Processor
Architecture for Encrypted Computation on Untrusted
Programs. In Proceedings of the 7th ACM CCS Workshop
on Scalable Trusted Computing, pages 3–8, Oct. 2012.
[10] C. W. Fletcher. Ascend: An architecture for performing
secure computation on encrypted data. In MIT CSAIL CSG
Technical Memo 508, April 2013.
[11] C. Gentry, K. Goldman, S. Halevi, C. Julta, M. Raykova,
and D. Wichs. Optimizing oram and using it eﬃciently for
secure computation. In PETS, 2013.
[12] O. Goldreich. Towards a theory of software protection and
simulation by oblivious rams. In STOC, 1987.
5Any opinions, ﬁndings, and conclusions or recommendations
expressed in this material are those of the author(s) and do
not necessarily reﬂect the views of the funding agencies.
[13] O. Goldreich and R. Ostrovsky. Software protection and
simulation on oblivious rams. J. ACM, 1996.
[14] M. T. Goodrich and M. Mitzenmacher. Privacy-preserving
access of outsourced data via oblivious RAM simulation. In
ICALP, 2011.
[15] M. T. Goodrich, M. Mitzenmacher, O. Ohrimenko, and
R. Tamassia. Oblivious ram simulation with eﬃcient
worst-case access overhead. In Proceedings of the 3rd ACM
workshop on Cloud computing security workshop, CCSW
’11, pages 95–100, New York, NY, USA, 2011. ACM.
[16] M. T. Goodrich, M. Mitzenmacher, O. Ohrimenko, and
R. Tamassia. Practical oblivious storage. In CODASPY,
2012.
[17] M. T. Goodrich, M. Mitzenmacher, O. Ohrimenko, and
R. Tamassia. Privacy-preserving group data access via
stateless oblivious RAM simulation. In SODA, 2012.
[18] M. T. Goodrich, M. Mitzenmacher, O. Ohrimenko, and
R. Tamassia. Privacy-preserving group data access via
stateless oblivious ram simulation. In Proceedings of the
Twenty-Third Annual ACM-SIAM Symposium on Discrete
Algorithms, SODA ’12, pages 157–167. SIAM, 2012.
[19] M. Harchol-Balter. Performance Modeling and Design of
Computer Systems: Queueing Theory in Action.
Performance Modeling and Design of Computer Systems:
Queueing Theory in Action. Cambridge University Press,
2013.
[20] A. Iliev and S. W. Smith. Protecting client privacy with
trusted computing at the server. IEEE Security and Privacy,
3(2):20–28, Mar. 2005.
[21] M. Islam, M. Kuzu, and M. Kantarcioglu. Access pattern
disclosure on searchable encryption: Ramiﬁcation, attack
and mitigation. In Network and Distributed System Security
Symposium (NDSS), 2012.
[22] E. Kushilevitz, S. Lu, and R. Ostrovsky. On the (in)security
of hash-based oblivious RAM and a new balancing scheme.
In SODA, 2012.
[23] J. R. Lorch, B. Parno, J. W. Mickens, M. Raykova, and
J. Schiﬀman. Shroud: Ensuring private access to large-scale
data in the data center. FAST, 2013:199–213, 2013.
[24] M. Maas, E. Love, E. Stefanov, M. Tiwari, E. Shi,
K. Asanovic, J. Kubiatowicz, and D. Song. Phantom:
Practical oblivious computation in a secure processor. ACM
CCS, 2013.
[25] R. Ostrovsky. Eﬃcient computation on oblivious rams. In
STOC, 1990.
[26] R. Ostrovsky and V. Shoup. Private information storage
(extended abstract). In STOC, pages 294–303, 1997.
[27] B. Pinkas and T. Reinman. Oblivious RAM revisited. In
CRYPTO, 2010.
[28] L. Ren, C. Fletcher, X. Yu, M. van Dijk, and S. Devadas.
Integrity veriﬁcation for path oblivious-ram. In Proceedings
of the 17th IEEE High Performance Extreme Computing
Conference, September 2013.
[29] L. Ren, X. Yu, C. Fletcher, M. van Dijk, and S. Devadas.
Design space exploration and optimization of path oblivious
ram in secure processors. In Proceedings of the Int’l
Symposium on Computer Architecture, pages 571–582, June
2013. Available at Cryptology ePrint Archive, Report
2012/76.
[30] E. Shi, T.-H. H. Chan, E. Stefanov, and M. Li. Oblivious
RAM with O((log N )3) worst-case cost. In ASIACRYPT,
pages 197–214, 2011.
[31] S. W. Smith and D. Saﬀord. Practical server privacy with
secure coprocessors. IBM Syst. J., 40(3):683–695, Mar. 2001.
[32] E. Stefanov and E. Shi. Path o-ram: An extremely simple
oblivious ram protocol. CoRR, abs/1202.5150, 2012.
[33] E. Stefanov and E. Shi. ObliviStore: High performance
oblivious cloud storage. In IEEE Symposium on Security
and Privacy, 2013.
[34] E. Stefanov, E. Shi, and D. Song. Towards practical
oblivious RAM. In NDSS, 2012.
[35] P. Williams and R. Sion. Usable PIR. In NDSS, 2008.
[36] P. Williams and R. Sion. Round-optimal access privacy on
outsourced storage. In CCS, 2012.
[37] P. Williams, R. Sion, and B. Carbunar. Building castles out
of mud: practical access pattern privacy and correctness on
untrusted storage. In CCS, 2008.
[38] P. Williams, R. Sion, and A. Tomescu. Privatefs: A parallel
oblivious ﬁle system. In CCS, 2012.
310