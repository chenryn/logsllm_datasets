0xdc (imm == 32) | be32 dst | dst = htobe32(dst)  
0xdc (imm == 64) | be64 dst | dst = htobe64(dst)  
###  内存指令
操作码 | 助记符 | 伪代码  
---|---|---  
0x18 | lddw dst, imm | dst = imm  
0x20 | ldabsw src, dst, imm | See kernel documentation  
0x28 | ldabsh src, dst, imm | …  
0x30 | ldabsb src, dst, imm | …  
0x38 | ldabsdw src, dst, imm | …  
0x40 | ldindw src, dst, imm | …  
0x48 | ldindh src, dst, imm | …  
0x50 | ldindb src, dst, imm | …  
0x58 | ldinddw src, dst, imm | …  
0x61 | ldxw dst, [src+off] | dst = _(uint32_t_ ) (src + off)  
0x69 | ldxh dst, [src+off] | dst = _(uint16_t_ ) (src + off)  
0x71 | ldxb dst, [src+off] | dst = _(uint8_t_ ) (src + off)  
0x79 | ldxdw dst, [src+off] | dst = _(uint64_t_ ) (src + off)  
0x62 | stw [dst+off], imm |  _(uint32_t_ ) (dst + off) = imm  
0x6a | sth [dst+off], imm |  _(uint16_t_ ) (dst + off) = imm  
0x72 | stb [dst+off], imm |  _(uint8_t_ ) (dst + off) = imm  
0x7a | stdw [dst+off], imm |  _(uint64_t_ ) (dst + off) = imm  
0x63 | stxw [dst+off], src |  _(uint32_t_ ) (dst + off) = src  
0x6b | stxh [dst+off], src |  _(uint16_t_ ) (dst + off) = src  
0x73 | stxb [dst+off], src |  _(uint8_t_ ) (dst + off) = src  
0x7b | stxdw [dst+off], src |  _(uint64_t_ ) (dst + off) = src  
###  分支指令
操作码 | 助记符 | 伪代码  
---|---|---  
0x05 | ja +off | PC += off  
0x15 | jeq dst, imm, +off | PC += off if dst == imm  
0x1d | jeq dst, src, +off | PC += off if dst == src  
0x25 | jgt dst, imm, +off | PC += off if dst > imm  
0x2d | jgt dst, src, +off | PC += off if dst > src  
0x35 | jge dst, imm, +off | PC += off if dst >= imm  
0x3d | jge dst, src, +off | PC += off if dst >= src  
0xa5 | jlt dst, imm, +off | PC += off if dst  imm (signed)  
0x6d | jsgt dst, src, +off | PC += off if dst > src (signed)  
0x75 | jsge dst, imm, +off | PC += off if dst >= imm (signed)  
0x7d | jsge dst, src, +off | PC += off if dst >= src (signed)  
0xc5 | jslt dst, imm, +off | PC += off if dst 
## 汇编编写eBPF程序
根据上表我们可以直接写eBPF字节码
    struct bpf_insn bpf_prog[] = {
        { 0xb7, 0, 0, 0, 0x123 },   // mov r0, 0x123
        { 0xb7, 1, 0, 0, 0x456 },   // mov r1, 0x456
        { 0x0F, 0, 1, 0, 0 },       // add r0, r1
        { 0x95, 0, 0, 0, 0x0 },     // exit 
    };
利用上一章说过的方法加载BPF程序, 验证器输出的日志如下, 表示已经接受了此程序
用字节码很不直观, 我们可以通过对初始化`struct bpf_insn`进行一个包裹, 以方便编写, 不明白的话可以对照上面的指令编码
首先进行指令类型sc的定义, 表示指令属于那个大类
    #define BPF_CLASS(code) ((code) & 0x07) //指令种类为指令操作码的低3bit
    #define BPF_ALU64    0x07    /* 操作64位对象的ALU指令种类 */
    #define    BPF_JMP        0x05  //跳转指令类别
接着进行操作码op部分的定义, 这部分表示具体是哪个操作码, 也就是指令要干什么
    #define BPF_OP(code)    ((code) & 0xf0)  //操作数为操作码的高4bit
    #define BPF_MOV        0xb0    /* 把寄存器移动到寄存器 */
    #define    BPF_ADD        0x00     //加法操作
    #define BPF_EXIT    0x90    /* 从函数中返回 */
对于ALU与JMP指令的操作码, 还有1bit的s需要定义, 表示操作的来源
    #define BPF_SRC(code)   ((code) & 0x08)    //只占用第4bit一个bit
    #define        BPF_K        0x00    //源操作数是立即数, 立即数的值在imm中表示
    #define        BPF_X        0x08    //源操作数是寄存器,具体是哪一个寄存器在src字段表示
下一步对于寄存器进行定义, 就是用枚举类型对`r0~r10`从`0~10`进行编码
    enum {
        BPF_REG_0 = 0,
        BPF_REG_1,
        BPF_REG_2,
        BPF_REG_3,
        BPF_REG_4,
        BPF_REG_5,
        BPF_REG_6,
        BPF_REG_7,
        BPF_REG_8,
        BPF_REG_9,
        BPF_REG_10,
        __MAX_BPF_REG,
    };
基本元素都有了之后就可组合为表示指令的宏
    /*
        给寄存器赋值, mov DST, IMM
        操作码: BPF_ALU64 | BPF_MOV表示要进行赋值操作, BPF_K表示要源是立即数IMM
    */
    #define BPF_MOV64_IMM(DST, IMM)                    \
        ((struct bpf_insn) {                    \
            .code  = BPF_ALU64 | BPF_MOV | BPF_K,        \
            .dst_reg = DST,                    \
            .src_reg = 0,                    \
            .off   = 0,                    \
            .imm   = IMM })
    /*
        两个寄存器之间的ALU运算指令: OP DST, SRC; 
        OP可以是加减乘除..., DST SRC表示是那个寄存器
        操作码: BPF_ALU64|BPF_OP(OP)表示执行什么ALU64操作, BPF_X表示源操作数是寄存器
    */
    #define BPF_ALU64_REG(OP, DST, SRC)                \
        ((struct bpf_insn) {                    \
            .code  = BPF_ALU64 | BPF_OP(OP) | BPF_X,    \
            .dst_reg = DST,                    \
            .src_reg = SRC,                    \
            .off   = 0,                    \
            .imm   = 0 })
    /*
        退出指令: exit
        操作码: BPF_JMP|BPF_EXIT表示要进行跳转指令类比中的退出指令
    */
    #define BPF_EXIT_INSN()                        \
        ((struct bpf_insn) {                    \
            .code  = BPF_JMP | BPF_EXIT,            \
            .dst_reg = 0,                    \
            .src_reg = 0,                    \
            .off   = 0,                    \
            .imm   = 0 })
借用以上宏定义, 我们可以不用令人困惑的常数重新编写这个eBPF程序, 效果与之前一样
        struct bpf_insn bpf_prog[] = {
            BPF_MOV64_IMM(BPF_REG_0, 0x123),                 //{ 0xb7, 0, 0, 0, 0x123 },  mov r0, 0x123
            BPF_MOV64_IMM(BPF_REG_1, 0x456),                 //{ 0xb7, 1, 0, 0, 0x456 },  mov r1, 0x456
            BPF_ALU64_REG(BPF_ADD, BPF_REG_0, BPF_REG_1),    //{ 0x0F, 0, 1, 0, 0 }, add r0, r1
            BPF_EXIT_INSN()                                  //{ 0x95, 0, 0, 0, 0x0 } exit 
        };
实际上, 在`#include `中含有指令操作码等常数的定义,
在内核的源码目录`samples/bpf/bpf_insn.h`就含有上述指令的宏定义, 而且更全面, 我们只要把此文件与源码放在同一目录,
然后`#include "./bpf_insn.h"`就可以直接使用这些宏来定义eBPF指令的字节码
## C编写eBPF指令
还是一样的程序, 我们换成C写, 由于gcc不支持编译BPF程序, 因此要用clang或者llvm来编译, `-target
bpf`表示编译为eBPF字节码, `-c`表示编译为目标文件即可, 因为eBPF是没有入口点的, 没法编译为可执行文件. 转换过程: `C---llvm--->eBPF---JIT--->本机指令`
    //clang -target bpf -c ./prog.c -o ./prog.o
    unsigned long prog(void){
        unsigned long a=0x123;
        unsigned long b=0x456;
        return a+b;
    }
编译出来的目标文件是ELF格式, 通过readelf可以看到最终编译出的字节码
objdump不支持反汇编eBPF, 可以使用`llvm-objdump`对字节码进行反编译, r10是栈指针, `*(u32 *)(r10-4) =
r1`是在向栈中写入局部变量, 整体结构与之前用汇编写的类似
如果想要执行eBPF字节码的话需要先从ELF格式的目标文件中提取.text段, 利用`llvm-objcopy`可以做到
如何从elf中提取指定段
之后编写一个加载器负责从`prog.text`中读入字节码, 放入缓冲区中, 然后使用`BPF_PROG_LOAD`命令进行bpf系统调用,
从而把字节码注入内核, 加载器代码如下, 整体与之前类似. 不明白的可以看前一篇文章
    //gcc ./loader.c -o loader
    #include 
    #include   //为了exit()函数
    #include     //为了uint64_t等标准类型的定义
    #include     //为了错误处理
    #include     //位于/usr/include/linux/bpf.h, 包含BPF系统调用的一些常量, 以及一些结构体的定义
    #include     //为了syscall()
    //类型转换, 减少warning, 也可以不要
    #define ptr_to_u64(x) ((uint64_t)x)
    //对于系统调用的包装, __NR_bpf就是bpf对应的系统调用号, 一切BPF相关操作都通过这个系统调用与内核交互
    int bpf(enum bpf_cmd cmd, union bpf_attr *attr, unsigned int size)
    {
        return syscall(__NR_bpf, cmd, attr, size);
    }
    //用于保存BPF验证器的输出日志
    #define LOG_BUF_SIZE 0x1000
    char bpf_log_buf[LOG_BUF_SIZE];
    //通过系统调用, 向内核加载一段BPF指令
    int bpf_prog_load(enum bpf_prog_type type, const struct bpf_insn* insns, int insn_cnt, const char* license)
    {
        union bpf_attr attr = {
            .prog_type = type,        //程序类型
            .insns = ptr_to_u64(insns),    //指向指令数组的指针
            .insn_cnt = insn_cnt,    //有多少条指令
            .license = ptr_to_u64(license),    //指向整数字符串的指针
            .log_buf = ptr_to_u64(bpf_log_buf),    //log输出缓冲区
            .log_size = LOG_BUF_SIZE,    //log缓冲区大小
            .log_level = 2,    //log等级
        };
        return bpf(BPF_PROG_LOAD, &attr, sizeof(attr));
    }
    //BPF程序就是一个bpf_insn数组, 一个struct bpf_insn代表一条bpf指令
    struct bpf_insn bpf_prog[0x100];
    int main(int argc, char **argv){
        //用法 loader  
        //读入文件中的内容到bpf_prog数组中
        int text_len = atoi(argv[2]);
        int file = open(argv[1], O_RDONLY);
        if(read(file, (void *)bpf_prog, text_len)<0){  
            perror("read prog fail");
            exit(-1);
        }
        close(file);
        //加载执行
        int prog_fd = bpf_prog_load(BPF_PROG_TYPE_SOCKET_FILTER, bpf_prog, text_len/sizeof(bpf_prog[0]), "GPL");
        if(prog_fd<0){
            perror("BPF load prog");
            exit(-1);
        }
        printf("prog_fd: %d\n", prog_fd);
        printf("%s\n", bpf_log_buf);    //输出程序日志
    }
clang编译出9条指令, 一个72字节, 使用命令`./loader ./prog.text 72`执行的结果如下