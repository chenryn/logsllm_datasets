title:Mapping software faults with web security vulnerabilities
author:Jos&apos;e Fonseca and
Marco Vieira
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
Mapping Software Faults with Web Security Vulnerabilities
Jose Fonsecal
, Marco Vieira2
1 CISUC, University ofCoimbra, lPG, Portugal
2CISUC, University ofCoimbra, Portugal
PI:EMAIL, mvieira@dei. uc.pt
Abstract
to
attacks.
them vulnerable
Web applications are typically developed with hard time
constraints and are often deployed with critical software
The
bugs, making
classification and knowledge of the typical software
bugs that lead to security vulnerabilities is of utmost
importance. This paper presents a field study analyzing
655 security patches ofsix widely used web applications.
Results are compared against other field studies on
general software faults
faults not specifically
related to security), showing that only a small subset of
software fault types is related to security. Furthermore,
the detailed analysis of the code of the patches has
shown that web application vulnerabilities result from
software bugs affecting a restricted collection of
statements.
the
conditions/locations where each fault was observed in
our field study is presented allowing future definition of
realistic fault models that cause security vulnerabilities
in web applications, which is the key element to design a
realistic attack injector.
analysis
detailed
(i.e.,
of
A
1. Introduction
Most information systems and business applications
that are built nowadays (e.g. e-commerce, banking,
transportation, web mail, blogs, etc.) have a web front(cid:173)
end. They need to be universally accessed by clients,
employees and partners around the world as online
trading is becoming more and more ubiquitous in the
global economy. These web applications, which can be
used from anywhere, also become so widely exposed that
any existing security vulnerability will most probably be
uncovered and exploited by hackers. Hence, the security
of web applications is a major concern and is receiving
more and more attention from the research community.
However, in spite of this growing awareness of security
aspects at web application level [1, 2, 3, 4, 5], there is an
increase in the number of reported attacks that exploit
web application vulnerabilities. A recent
example
(August 17, 2007) of such attacks occurred in the
recruitment website Monster.com where 1.6 million of
personal records were stolen [6]. Numerous other data
breach attacks are frequently reported and many of them
are due to security problems in web applications [7, 8, 9].
According to an Accunetix [10] audit result, 70% of
the 3,200 websites scanned in the past three years contain
security vulnerabilities. The NTA Monitor's 2007 Annual
Security Report [11] states that online risks in financial
institutions have increased 16%, and 28% in publishing
companies. Overall, 32% of the websites analyzed
contain critical vulnerabilities that are widely known and
actively exploited by hackers. This confirms that
the
security problem in web applications is an issue far from
being solved and that software bugs that are responsible
for security vulnerabilities may have a devastating cost if
exploited by hackers. Although configuration and human
issues are also potential causes for vulnerabilities, the
root cause of most security attacks are vulnerabilities
created by software faults.
to
in
depth
inspected
In this paper we look at 655 security patches that were
developed for different versions of six widely used web
applications. In order to characterize the types of faults
that are most likely to lead to software vulnerabilities we
classify each patch code according to the Orthogonal
Defect Classification (ODC) [12, 13, 14]. Every patch is
also
precise
characteristics of the code that was responsible for the
security problem. This detailed patch information is of
utmost importance to build a realistic attack injector, for
example. It may also be crucial for the development of
automatic static code analyzers that focus on finding
security vulnerabilities, for the specification of guidelines
for teams of security code reviewers, for the evaluation of
penetration test tools as well as for the creation of more
secure internal policies
for programming practices,
among others.
gather
the
Previous work by Maxion and Olszewski [15, 16]
analyzed the problem of programmers forgetting to write
exception handling code in C programs. Dependability
cases are used with quite good results. Although their
technique can already prevent some security problems it
could be improved to handle web application security
1-4244-2398-9/08/$20.00 Â©2008 IEEE
257
DSN 2008: Fonseca &Vieira
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:20:06 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
code by using the results of the present paper instead of
the exceptions in C programs.
is important
can help direct
For the purpose of this paper it
to
understand if the distribution of security faults follows a
similar pattern of software faults in general. Knowing the
different distribution patterns
the
instruction of security teams, for example. Therefore, we
try to correlate our results with a field study on common
software faults [14]. We also compare our results with
another study that injected common software faults into
they caused security
web applications
vulnerabilities [1 7]. The comparison with both field
studies [14, 17] is important to assess if the injection of
software faults can be used to accurately simulate security
defects.
to see
if
The structure of the paper is as follows. Section 2
presents the classification of software faults and discusses
the source data (web applications and patches) used in the
field study. Section 3 presents the results of the field
study,
and the
vulnerability fault models. Section 4 concludes the paper
and suggests future work.
correlation with other
studies
its
2. Classification of web application security
patches
In the present study we used six well know web
applications. These applications have a large community
of users and they are representative of a large spectrum of
web applications being used nowadays. The classes of
vulnerabilities analyzed have a critical importance as they
affect most of the web applications, not just those used in
this study.
The present study uses LAMP (Linux, Apache, Mysql
and PHP) web applications because they include the
technologies most
commonly used to build web
applications nowadays. LAMP software is free,
fast,
flexible, and has many libraries. Although there are other
to build web
widely used programming languages
applications, PHP applications have
an increasing
popularity nowadays. According to Nexen.net, PHP
represents around 33% of the market share [18] and is
widely adopted to build custom web applications, portals
for large community of users, e-commerce applications
and web administration tools. It is also used in many
large
(e.g. Google, Amazon, Digg,
Wikipedia, SourceForge, etc.) and e-government sites.
Nevertheless, this kind of setups is responsible for a large
number of reports of security flaws.
corporations
The two vulnerabilities analyzed by the present study
are the most critical
in web applications: Cross Site
Scripting (XSS) and SQL Injection (see [8] for details on
these vulnerabilities). Exploits of these vulnerabilities
take advantage of unchecked input fields at user interface,
which allows the attacker to change the SQL commands
that are sent to the database server (SQL Injection) or
through the input of HTML and a scripting language
(XSS).
[8]
released a report
The Open Web Application
Security Project
in 2007
(OWASP Foundation)
which listed the ten most critical web application security
vulnerabilities. It was based on data on vulnerability type
distributions in Common Vulnerabilities and Exposures
(CVE!) provided by Mitre Corporation [9]. According to
this report, XSS is the most critical vulnerability (18.5%),
followed by SQL injection (13.6%). Together they are
responsible for approximately one third of all the CVE in
2006. The popularity of these attacks is related to: a) the
easiness in finding and exploiting such vulnerabilities; b)
the importance of the assets they can disclose; and c) the
level of damage they may inflict. In fact, SQL injection
and XSS allow attackers to access unauthorized data
(read, insert, change or delete), gain access to privileged
database accounts, impersonate another user (such as the
administrator), mimic web applications, deface web
pages, obtain access to the web server, etc.
correct
When application vulnerabilities
are discovered,
software developers
the problem releasing
application updates or patches. These patches correcting
vulnerabilities were used in our study to understand
which code is responsible for security problems. With
this approach we can classify the code that caused real
security flaws.
For each web application tested, the methodology to
classify the security patches is the following:
1) Verification of the patch to confirm if the version of
the web application is available.
2) Analysis of the code with the vulnerability and of the
code after being patched.
3) Classification of each code fix that is found in the
patch. To be accurate, we followed some rules as
described in section 2.4.
4) Loop through the previous steps until all available
patches of the web application are analyzed.
2.1. Classification of software faults from the
security vulnerability point of view
on
the
based
categorized
The security patch code analyzed in the present study
was
faults
classification proposed by Chillarege et al. [12, 13]. They
introduced the Orthogonal Defect Classification (ODC)
that is typically used to classify software faults or defects
after they have been fixed. The ODC has been used to
improve the software design process and it bridges the
software
I CVE is a widely accepted list of publicly reported web application
vulnerabilities. It is hosted by MITRE Corporation
1-4244-2398-9/08/$20.00 Â©2008 IEEE
258
DSN 2008: Fonseca &Vieira
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:20:06 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
gap between statistical defect models and the causal
analysis. The underlying idea is that knowing the root
cause of software defects helps in removing their source,
therefore contributing to the improvement of software
quality [19]. In the present study we are only dealing with
code defects, therefore we only use the ODC defect types
that are directly related to the code. These defect types
are
code
initialization), Checking (errors in program logic and
validation),
among
components), and Algorithm (errors related to the need
of algorithm change without a design change). Although
Function and Timing/Serialization defects are also related
to the code we do not consider them because they were
not found in the field data analyzed.
following: Assignment
interacting
Interface
(errors
(errors
the
in
The five classes of ODC fault types are too broad and
they do not have enough detail for the precision needed
by the present field study. We need to analyze the code
from the point of view of the software programmer, so
each of the ODC types can be detailed according to the
nature of the defect [14]: missing construct; wrong
construct;
this
extension the five classes of the ODC are detailed into 62
fault types (see [14] for details). This refinement of the
ODC is more focused on the concrete source of the
software faults and has been used to support the fault
model of the G-SWFIT tool for the emulation of software
faults [14].
construct. With
extraneous
and
All
the security vulnerabilities collected can be
classified using the 11 fault types already identified in
[14] and one extra fault type (MFC extended). They are
presented in Table 1, where their correlation with the
original ODC types is also shown. We defined the MFC
extended fault type because there was one typical defect
that could not be classified according to the fault types
defined by Duraes [14]. The MFC extended is based on
the missing function call (MFC) fault type. The MFC can
only be used if the return value of the function is not used
elsewhere in the code. However,
in web application
b
d -
(pes 0 serve In
th f
e au
It t
a e
T bl 1 Th f
Fault type
programming there are lots of security problems because
of missing functions whose purpose is to sanitize a
variable. The return of these functions is the variable
sanitized that will be used in the code. As this important
fault type can not be classified using the original MFC we
removed the restriction and created a new type named
"MFC - Missing function call extended".
2.2. Web applications analyzed
One mandatory condition for this field study is the
availability of the source code of the web applications
under analysis. The code of previous versions and the
associated security patches must also be accessible. The
other mandatory condition is the presence of information
correlating the security fix and the specific version of the
web application.
For the present study we have selected six web
applications: PHP-Nuke [20], Drupal [21], PHP-Fusion
[22], WordPress [23], phpMyAdmin [24] and phpBB
[25]. These
source web
applications and, fortunately, there is enough information
available about them.
representative
open
are
Drupal, PHP-Fusion and phpBB are Web Content
Management Systems (CMS). A CMS is an application
that allows an individual or a community of users to
easily create and administrate web sites that publish a
variety of contents. The created sites can go from
personal web pages and community portals to corporate
and e-commerce applications. Drupal won first place at
the 2007 Open Source CMS Award [26]. PHP-Fusion
was one of the five award overall winner finalists at the
2007 Open Source CMS Award [26] and has a large
community of users working with it. Finally, phpBB is
the most widely used Open Source forum solution.
the 2007 SourceForge
the winner of
phpBB was
Community Choice Awards
for Best Project
for
Communications [27].
PHP-Nuke
a well known web based news
is
d
e Ie , elr escnp' Ion an correspon Int
Id th - d
-f
d- ODe f
au type
It t
Description
Missing function call
MissinjZ; function call extended
Missing variable initialization using a value
Missing if construct around statements
Missing if construct plus statements
Missing "AND EXPR" in expression used as branch condition
Missing "OR EXPR" in expression used as branch condition
WronjZ; value assijZ;lled to variable
Wrong variable used in parameter of function call
Wrong function called with same parameters
Extraneous "OR EXPR" in expression used as branch condition
Extraneous function call
ODC type
AljZ;orithm
AI~orithm
AssijZ;llment
Checking
Algorithm
Checking
Checking
AssijZ;llment
Interface
Algorithm
Checking
Algorithm
MFC
MFC extended
MVIV
MIA
MIFS
MLAC
MLOC
WVAV
WPFV
WFCS
ELOC
EFC
1-4244-2398-9/08/$20.00 Â©2008 IEEE
259
DSN 2008: Fonseca &Vieira
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:20:06 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
automation system built as a community portal. The news
can be submitted by registered users and commented by
the community. PHP-Nuke is quite modular and custom
modules can be added to increase the number of features
available. PHP-Nuke is one of the most notorious CMS
and it has been downloaded from the official site over 8
million times [20].
WordPress is a personal blog publishing platform that
also supports the creation of easy to administrate web
sites. A Google search of WordPress pages using the text
"Proudly powered by WordPress", which is at the bottom
of WordPress based sites, finds over 7 million pages.
phpMyAdmin is a web based MySQL administration
tool. It is one of the most popular PHP applications and
has a very large community of users. phpMyAdmin is
available in 47 languages,
is included in many Linux
distributions and was the winner of the 2007 SourceForge
Community Choice Awards for Best Tool or Utility for
SysAdmins [27].
The web applications analyzed are so broadly used
that they have a large number of vulnerabilities disclosed
from previous versions, which are the subject of analysis
of the present field study (see Table 2). The number of
vulnerabilities is not constant among web applications
because the quality of the code and the number of
vulnerabilities publicly disclosed varies a great deal.
Table 2. Versions of the web application used
d
an nurn er 0 vu nera I lies analyze
Web
bÂ·l"r
b
f
I
Versions analyzed
application
I
d
#Vuln.
Drupal
PHP-Nuke
PHP-Fusion
6.0,6.5,6.9,7.0,7.2,7.6,
7.7, 7.8, 7.9
4.5.5, 4.5.6, 4.6.5, 4.6.6,
4.6.7,4.6.8,4.6.9,4.6.10,
4.6.11, 4.7.6, 5.1
6.00.106, 6.00.108,
6.00.110, 6.00.204,
6.00.206, 6.00.207,
6.00.303,6.00.304, 6.01.4,
6.01.5, 6.01.6, 6.01.7,
6.01.8,6.01.9,6.01.10,
6.01.11,6.01.12
1.2.1, 1.2.2, 1.5.2-1, 2.0,
2.0.10-RC2,2.0.4, 2.0.5,
2.0.6, 2.1.2, 2.1.3 2.1.3-
RC2, 2.2, 2.2.1, 2.3
2.1.10, 2.4.0, 2.5.2, 2.5.6,
2.5.7PLl, 2.6.3PLl, 2.6.4,
2.6.4PL4, 2.7.0PL2, 2.8.2.4,
2.9.0,2.9.1.1,2.10.0.2,
2.1 0.1, 2.11.1.1, 2.11.1.2
and SVN revisions
2.0.3, 2.0.5, 2.0.6, 2.0.6c,
2.0.7,2.0.8,2.0.9,2.0.10,
2.0.16, 2.0.17
Total vulnerabilities analyzed
phpMyAdmin
WordPress
phpBB
295
59
54
115
74
58
655
It is important to emphasize that every vulnerability