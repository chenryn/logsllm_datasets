**Title: Mapping Software Faults with Web Security Vulnerabilities**

**Authors: Jos√© Fonseca and Marco Vieira**

**Conference: International Conference on Dependable Systems & Networks, Anchorage, Alaska, June 24-27, 2008**

**Abstract**

Web applications are often developed under tight time constraints and deployed with critical software bugs, making them vulnerable to attacks. The classification and understanding of typical software bugs that lead to security vulnerabilities is crucial. This paper presents a field study analyzing 655 security patches from six widely used web applications. The results are compared with other field studies on general software faults (not specifically related to security), showing that only a small subset of software fault types is related to security. A detailed analysis of the patch code reveals that web application vulnerabilities result from software bugs affecting a restricted set of statements. We present a detailed analysis of the conditions and locations where each fault was observed, which can help in defining realistic fault models that cause security vulnerabilities in web applications. This is key to designing a realistic attack injector.

**1. Introduction**

Most modern information systems and business applications (e.g., e-commerce, banking, transportation, web mail, blogs) have a web front-end, requiring universal access by clients, employees, and partners worldwide. As online trading becomes more ubiquitous in the global economy, these web applications, accessible from anywhere, become highly exposed, making any existing security vulnerability likely to be discovered and exploited by hackers. Therefore, web application security is a major concern and is receiving increasing attention from the research community.

Despite growing awareness of security at the web application level [1, 2, 3, 4, 5], the number of reported attacks exploiting web application vulnerabilities continues to rise. For example, on August 17, 2007, the recruitment website Monster.com suffered an attack resulting in the theft of 1.6 million personal records [6]. Numerous other data breaches are frequently reported, many due to security issues in web applications [7, 8, 9]. According to an Accunetix audit, 70% of the 3,200 websites scanned over the past three years contain security vulnerabilities [10]. The NTA Monitor's 2007 Annual Security Report states that online risks in financial institutions have increased by 16%, and by 28% in publishing companies. Overall, 32% of the analyzed websites contain critical vulnerabilities that are well-known and actively exploited by hackers [11]. This confirms that the security problem in web applications remains unsolved, and software bugs responsible for security vulnerabilities can have devastating consequences if exploited.

In this paper, we analyze 655 security patches developed for different versions of six widely used web applications. To characterize the types of faults most likely to lead to security vulnerabilities, we classify each patch using the Orthogonal Defect Classification (ODC) [12, 13, 14]. We also gather precise characteristics of the code responsible for the security problem. This detailed information is essential for building a realistic attack injector, developing automatic static code analyzers, specifying guidelines for security code reviewers, evaluating penetration test tools, and creating more secure internal programming policies.

Previous work by Maxion and Olszewski [15, 16] analyzed the problem of programmers forgetting to write exception handling code in C programs, using dependability cases with good results. Although their technique can prevent some security problems, it could be improved for web application security by incorporating the findings of this paper.

Understanding whether the distribution of security faults follows a similar pattern to general software faults is important for directing the instruction of security teams. Therefore, we correlate our results with a field study on common software faults [14] and another study that injected common software faults into web applications to see if they caused security vulnerabilities [17]. Comparing our results with both field studies [14, 17] helps assess whether the injection of software faults can accurately simulate security defects.

The structure of the paper is as follows: Section 2 presents the classification of software faults and discusses the source data (web applications and patches) used in the field study. Section 3 presents the results of the field study, including the correlation with other studies and the vulnerability fault models. Section 4 concludes the paper and suggests future work.

**2. Classification of Web Application Security Patches**

In this study, we used six well-known web applications with large user communities, representing a broad spectrum of web applications. The classes of vulnerabilities analyzed are critical, affecting most web applications, not just those in this study.

We focused on LAMP (Linux, Apache, MySQL, and PHP) web applications because they use the most common technologies for building web applications today. LAMP software is free, fast, flexible, and has many libraries. While other programming languages are also widely used, PHP applications have seen increasing popularity. According to Nexen.net, PHP represents around 33% of the market share [18] and is widely adopted for custom web applications, portals, e-commerce, and web administration tools. However, this setup is also responsible for a large number of reported security flaws.

The two vulnerabilities analyzed in this study are the most critical in web applications: Cross-Site Scripting (XSS) and SQL Injection. Exploits of these vulnerabilities take advantage of unchecked input fields at the user interface, allowing attackers to change SQL commands sent to the database server (SQL Injection) or inject HTML and scripting language (XSS).

The Open Web Application Security Project (OWASP Foundation) released a report in 2007 listing the ten most critical web application security vulnerabilities based on Common Vulnerabilities and Exposures (CVE) data provided by Mitre Corporation [9]. According to this report, XSS is the most critical vulnerability (18.5%), followed by SQL Injection (13.6%). Together, they account for approximately one-third of all CVEs in 2006. The popularity of these attacks is due to their ease of discovery and exploitation, the importance of the assets they can disclose, and the level of damage they can inflict. SQL Injection and XSS allow attackers to access unauthorized data, gain access to privileged accounts, impersonate users, deface web pages, and obtain access to the web server.

When application vulnerabilities are discovered, software developers release updates or patches to correct the problem. These patches were used in our study to understand which code is responsible for security issues. Our methodology for classifying the security patches is as follows:

1. Verify the patch to confirm the availability of the web application version.
2. Analyze the code with the vulnerability and the code after patching.
3. Classify each code fix found in the patch, following specific rules.
4. Repeat the process until all available patches for the web application are analyzed.

**2.1. Classification of Software Faults from the Security Vulnerability Point of View**

The security patch code analyzed in this study was categorized using the Orthogonal Defect Classification (ODC) proposed by Chillarege et al. [12, 13]. ODC is typically used to classify software faults or defects after they have been fixed and helps bridge the gap between statistical defect models and causal analysis. In this study, we focus on code defects and use ODC defect types directly related to the code. These include Assignment (errors in variable initialization), Checking (errors in program logic and validation), Interface (errors in interacting components), and Algorithm (errors requiring algorithm changes without design changes). Although Function and Timing/Serialization defects are also related to the code, they were not found in the analyzed data.

The five ODC fault types are too broad for the precision needed in this study. We need to analyze the code from the programmer's perspective, so each ODC type is detailed according to the nature of the defect [14]. With this extension, the five ODC classes are refined into 62 fault types (see [14] for details). This refinement focuses on the concrete source of software faults and has been used to support the fault model of the G-SWFIT tool for emulating software faults [14].

All security vulnerabilities collected can be classified using the 11 fault types identified in [14] and one additional fault type (MFC extended). Table 1 shows these fault types and their correlation with the original ODC types. The MFC extended fault type was defined because there was a typical defect that could not be classified using the fault types defined by Duraes [14]. The MFC extended is based on the missing function call (MFC) fault type, but without the restriction that the return value of the function is not used elsewhere in the code. In web application programming, many security problems arise from missing functions that sanitize variables. The return of these functions is the sanitized variable, which is then used in the code. Since this important fault type cannot be classified using the original MFC, we created a new type named "MFC - Missing function call extended."

**Table 1: Fault Types and Their Correlation with ODC Types**

| Fault Type | Description | ODC Type |
|------------|-------------|----------|
| MFC | Missing function call | Algorithm |
| MFC Extended | Missing function call extended | Algorithm |
| MVIV | Missing variable initialization using a value | Assignment |
| MIA | Missing if construct around statements | Checking |
| MIFS | Missing if construct plus statements | Algorithm |
| MLAC | Missing "AND EXPR" in expression used as branch condition | Checking |
| MLOC | Missing "OR EXPR" in expression used as branch condition | Checking |
| WVAV | Wrong value assigned to variable | Assignment |
| WPFV | Wrong parameter in function call | Interface |
| WFCS | Wrong function called with same parameters | Algorithm |
| ELOC | Extraneous "OR EXPR" in expression used as branch condition | Checking |
| EFC | Extraneous function call | Algorithm |

**2.2. Web Applications Analyzed**

For this field study, we selected six web applications: PHP-Nuke [20], Drupal [21], PHP-Fusion [22], WordPress [23], phpMyAdmin [24], and phpBB [25]. These open-source applications have enough available information about their previous versions and associated security patches.

Drupal, PHP-Fusion, and phpBB are Web Content Management Systems (CMS). A CMS allows individuals or communities to easily create and manage websites. Drupal won first place at the 2007 Open Source CMS Award [26], and PHP-Fusion was one of the five award finalists. phpBB is the most widely used open-source forum solution and was the winner of the 2007 SourceForge Community Choice Awards for Best Project for Communications [27].

PHP-Nuke is a well-known web-based news automation system built as a community portal. It is modular and supports custom modules. PHP-Nuke is one of the most notorious CMS and has been downloaded over 8 million times [20].

WordPress is a personal blog publishing platform that also supports the creation of easy-to-manage websites. A Google search for "Proudly powered by WordPress" finds over 7 million pages. phpMyAdmin is a web-based MySQL administration tool, included in many Linux distributions and available in 47 languages. It was the winner of the 2007 SourceForge Community Choice Awards for Best Tool or Utility for SysAdmins [27].

The web applications analyzed have a large number of disclosed vulnerabilities from previous versions, which are the subject of this field study (see Table 2). The number of vulnerabilities varies among applications due to differences in code quality and the number of publicly disclosed vulnerabilities.

**Table 2: Versions of the Web Applications Used and Number of Vulnerabilities Analyzed**

| Web Application | Versions Analyzed | #Vuln. |
|-----------------|-------------------|--------|
| Drupal          | 6.0, 6.5, 6.9, 7.0, 7.2, 7.6, 7.7, 7.8, 7.9 | 295 |
| PHP-Nuke       | 4.5.5, 4.5.6, 4.6.5, 4.6.6, 4.6.7, 4.6.8, 4.6.9, 4.6.10, 4.6.11, 4.7.6, 5.1 | 59 |
| PHP-Fusion     | 6.00.106, 6.00.108, 6.00.110, 6.00.204, 6.00.206, 6.00.207, 6.00.303, 6.00.304, 6.01.4, 6.01.5, 6.01.6, 6.01.7, 6.01.8, 6.01.9, 6.01.10, 6.01.11, 6.01.12 | 54 |
| WordPress      | 1.2.1, 1.2.2, 1.5.2-1, 2.0, 2.0.10-RC2, 2.0.4, 2.0.5, 2.0.6, 2.1.2, 2.1.3, 2.1.3-RC2, 2.2, 2.2.1, 2.3 | 115 |
| phpMyAdmin     | 2.1.10, 2.4.0, 2.5.2, 2.5.6, 2.5.7PL1, 2.6.3PL1, 2.6.4, 2.6.4PL4, 2.7.0PL2, 2.8.2.4, 2.9.0, 2.9.1.1, 2.10.0.2, 2.10.1, 2.11.1.1, 2.11.1.2, and SVN revisions | 74 |
| phpBB          | 2.0.3, 2.0.5, 2.0.6, 2.0.6c, 2.0.7, 2.0.8, 2.0.9, 2.0.10, 2.0.16, 2.0.17 | 58 |
| **Total**      | **655**           |        |

It is important to note that every vulnerability analyzed in this study has been confirmed and patched.