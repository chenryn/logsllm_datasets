  9563 |   239  
  3275 |   239  
  2968 |   239  
  8825 |   239  
  3426 |   238  
  3850 |   238  
  6835 |   238  
  5928 |   238  
  8567 |   238  
  4083 |   238  
  1137 |   238  
  4862 |   238  
  4238 |   238  
  1058 |   238  
  6745 |   237  
  5854 |   237  
  3196 |   237  
  3165 |   237  
   724 |   237  
  9643 |   237  
  7326 |   237  
  6661 |   237  
  3685 |   236  
  2590 |   236  
  9685 |   236  
  8366 |   236  
  3931 |   236  
  7074 |   236  
  6140 |   236  
  4402 |   236  
  4635 |   236  
  7628 |   236  
  5967 |   236  
    24 |   236  
   987 |   236  
  2472 |   236  
  8724 |   236  
  6404 |   236  
  9504 |   235  
  5816 |   235  
  1261 |   235  
  5551 |   235  
   874 |   235  
  1880 |   235  
  5248 |   235  
   404 |   235  
  5738 |   235  
   583 |   235  
  7799 |   235  
  2362 |   235  
  1789 |   235  
  7707 |   235  
  3091 |   234  
  9245 |   234  
  6107 |   234  
  8657 |   234  
  7460 |   234  
  2252 |   234  
(100 rows)  
```  
当倾斜较大时（符合现实世界理论，二八原则）, 就特别准.  
```  
digoal=#  insert into test_1 (info,appid,crt_time) select 'test',1,now() from generate_series(1,100000);  
INSERT 0 100000  
digoal=# analyze verbose test_1;  
INFO:  analyzing "public.test_1"  
INFO:  "test_1": scanned 21262 of 21262 pages, containing 2101000 live rows and 0 dead rows; 30000 rows in sample, 2101000 estimated total rows  
ANALYZE  
digoal=# select appid,count(*) from test_1 group by appid order by count(*) desc limit 5;  
 appid | count    
-------+--------  
     1 | 101189  
  9853 |    253  
  6502 |    249  
   464 |    249  
  1688 |    249  
(5 rows)  
```  
显然most_common_vals中采样准确了, appid=1确实是记录数最多的.  
```  
digoal=# select most_common_vals,most_common_freqs from pg_stats where tablename='test_1' and attname='appid';  

most_common_vals  | {1,2972,94,207,1998,4883,1766,2557,3202,3941,4057,6457,7011,7412,8000,8516,9793,9948,10,90,100,140,276,382,595,1242,1315,1328,1334,1346,1388,2142,2465,2592,2879,2997,3589,3793,3950,4066,4418,4454,4800,5049,5074,5119,5265,5564,5796,5934,5947,6198,6205,6235,6288,6508,6691,6822,6826,6937,7048,7055,7079,7198,7201,7270,7938,8592,8872,9020,9214,9222,9292,9400,9501,9547,9659,9719,9856,9859,7,147,172,185,200,208,405,454,463,529,559,585,622,648,722,729,743,763,777,778}  
most_common_freqs | {0.0474333,0.000366667,0.000333333,0.000333333,0.000333333,0.000333333,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000233333,0.000233333,0.000233333,0.000233333,0.000233333,0.000233333,0.000233333,0.000233333,0.000233333,0.000233333,0.000233333,0.000233333,0.000233333,0.000233333,0.000233333,0.000233333,0.000233333,0.000233333,0.000233333,0.000233333}  
```  
3\. 数组的元素值排行统计  
例如有一个表中记录了客户允许的应用程序信息, 应用程序存储为一个数组, 程序以id形式存到数组中.  
如果要统计全国终端中最火爆的程序排行.   
```  
digoal=# create table test_2(id serial primary key, appid int[], crt_time timestamp);  
CREATE TABLE  
```  
假设appid为0-10的程序比较火爆, 模拟100秒插入请求.  
```  
vi test.sql  
insert into test_2(appid) select array_agg(appid) appid_agg from (select round(10*random())::int as appid from generate_series(1,20)) t;  
pg93@db-172-16-3-33-> pgbench -M prepared -n -r -f ./test.sql -c 16 -j 4 -T 100 digoal  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 16  
number of threads: 4  
duration: 100 s  
number of transactions actually processed: 389701  
tps = 3896.755035 (including connections establishing)  
tps = 3897.686073 (excluding connections establishing)  
statement latencies in milliseconds:  
        4.103117        insert into test_2(appid) select array_agg(appid) appid_agg from (select round(10*random())::int as appid from generate_series(1,20)) t;  
```  
假设appid为10以上的程序不火爆,  模拟10秒插入请求.  
```  
vi test.sql  
insert into test_2(appid) select array_agg(appid) appid_agg from (select round(1000*random())::int as appid from generate_series(1,20)) t;  
pg93@db-172-16-3-33-> pgbench -M prepared -n -r -f ./test.sql -c 16 -j 4 -T 10 digoal  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 16  
number of threads: 4  
duration: 10 s  
number of transactions actually processed: 37256  
tps = 3718.362208 (including connections establishing)  
tps = 3725.838361 (excluding connections establishing)  
statement latencies in milliseconds:  
        4.290334        insert into test_2(appid) select array_agg(appid) appid_agg from (select round(1000*random())::int as appid from generate_series(1,20)) t;  
```  
总记录数如下 :   
```  
digoal=# select count(*) from test_2;  
 count    
--------  
 472583  
(1 row)  
```  
收集统计信息  
```  
digoal=# analyze verbose test_2;  
INFO:  analyzing "public.test_2"  
INFO:  "test_2": scanned 8184 of 8184 pages, containing 472583 live rows and 0 dead rows; 30000 rows in sample, 472583 estimated total rows  
ANALYZE  
```  
通过group by和order by获取实际的排名 :   
```  
digoal=# select appid,count(*) from (select unnest(appid) as appid from test_2) t group by appid order by count(*) desc limit 20;  
 appid | count    
-------+--------  
     9 | 872831  
     6 | 871908  
     3 | 871867  
     7 | 871551  
     8 | 871436  
     4 | 871391  
     1 | 871051  
     5 | 870770  
     2 | 870692  
    10 | 435583  
     0 | 435342  
   387 |    831  
    69 |    824  
   665 |    822  
   703 |    816  
   651 |    811  
   520 |    809  
   435 |    809  
   783 |    806  
   671 |    806  
(20 rows)  
```  
接下来要用9.2新增的array 统计信息查看排名了 :   
注意元素的收集个数为default_statistics_target 的10倍, 这个可以参考源码 :   
```  
+   /*  
+    * Set up static pointer for use by subroutines.  We wait till here in  
+    * case std_compute_stats somehow recursively invokes us (probably not  
+    * possible, but ...)  
+    */  
+   array_extra_data = extra_data;  
+  
+   /*  
+    * We want statistics_target * 10 elements in the MCELEM array. This  
+    * multiplier is pretty arbitrary, but is meant to reflect the fact that  
+    * the number of individual elements tracked in pg_statistic ought to be  
+    * more than the number of values for a simple scalar column.  
+    */  
+   num_mcelem = stats->attr->attstattarget * 10;  
```  
所以默认default_statistics_target=100的情况下, 将会收集1000个数组型元素的出现概率.  
```  
digoal=# select array_length(most_common_elems,1),array_length(most_common_elem_freqs,1) from pg_stats where tablename='test_2' and attname='appid';  
-[ RECORD 1 ]+-----  
array_length | 1000  
array_length | 1003  
most_common_elem_freqs中最后3个的值代表min, max, null_freqs. 具体见  
```  
[《PostgreSQL 9.2 add array elements statistics》](../201205/20120518_01.md)    
如果把统计信息修改为50, 那么统计信息的元素个数将变成500.  
```  
digoal=# alter table test_2 alter column appid set statistics 50;  