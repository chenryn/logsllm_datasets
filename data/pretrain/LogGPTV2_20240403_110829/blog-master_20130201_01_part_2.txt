```  
加锁的行lp=1 的t_infomask=402, 16进制 0x0192 , 因此包含如下MASK :   
```  
#define HEAP_XMIN_COMMITTED             0x0100  /* t_xmin committed */  
#define HEAP_XMAX_KEYSHR_LOCK           0x0010  /* xmax is a key-shared locker */  
#define HEAP_XMAX_LOCK_ONLY             0x0080  /* xmax, if valid, is only a locker */  
#define HEAP_HASVARWIDTH                0x0002  /* has variable-width attribute(s) */  
```  
xmax掩码信息与compute_new_xmax_infomask函数的处理逻辑一致.  
3\. 测试单个事务对TUPLE加for share锁. 并使用pgrowlocks和pageinspect查看锁信息以及t_infomask信息.  
SESSION A :   
```  
digoal=# begin;  
BEGIN  
digoal=# select * from test where id=1 for share;  
 id | info   
----+------  
  1 | abc  
(1 row)  
```  
SESSION B :   
```  
digoal=# select * from pgrowlocks('test');  
 locked_row | locker | multi |  xids  |     modes     |  pids    
------------+--------+-------+--------+---------------+--------  
 (0,1)      |   1754 | f     | {1754} | {"For Share"} | {6096}  
(1 row)  
digoal=# select * from heap_page_items(get_raw_page('test', 0));  
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid   
----+--------+----------+--------+--------+--------+----------+--------+-------------+------------+--------+--------+-------  
  1 |   8160 |        1 |     32 |   1751 |   1754 |        0 | (0,1)  |           2 |        466 |     24 |        |        
  2 |   8120 |        1 |     35 |   1751 |      0 |        0 | (0,2)  |           2 |       2306 |     24 |        |        
(2 rows)  
```  
加锁的行lp=1 的t_infomask=466, 16进制 0x01D2 , 因此包含如下MASK :   
```  
#define HEAP_XMIN_COMMITTED             0x0100  /* t_xmin committed */  
#define HEAP_XMAX_KEYSHR_LOCK           0x0010  /* xmax is a key-shared locker */  
#define HEAP_XMAX_EXCL_LOCK             0x0040  /* xmax is exclusive locker */  
#define HEAP_XMAX_LOCK_ONLY             0x0080  /* xmax, if valid, is only a locker */  
#define HEAP_HASVARWIDTH                0x0002  /* has variable-width attribute(s) */  
```  
xmax掩码信息与compute_new_xmax_infomask函数的处理逻辑一致.  
htup_detail.h头文件中设置了: HEAP_XMAX_EXCL_LOCK和HEAP_XMAX_KEYSHR_LOCK掩码同时设置表示shared lock.  
4\. 测试单个事务对TUPLE加for update锁. 并使用pgrowlocks和pageinspect查看锁信息以及t_infomask信息.  
SESSION A :   
```  
digoal=# begin;  
BEGIN  
digoal=# select * from test where id=1 for update;  
 id | info   
----+------  
  1 | abc  
(1 row)  
```  
SESSION B :   
```  
digoal=# select * from pgrowlocks('test');  
 locked_row | locker | multi |  xids  |     modes      |  pids    
------------+--------+-------+--------+----------------+--------  
 (0,1)      |   1756 | f     | {1756} | {"For Update"} | {6096}  
(1 row)  
digoal=# select * from heap_page_items(get_raw_page('test', 0));  
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid   
----+--------+----------+--------+--------+--------+----------+--------+-------------+------------+--------+--------+-------  
  1 |   8160 |        1 |     32 |   1751 |   1756 |        0 | (0,1)  |        8194 |        450 |     24 |        |        
  2 |   8120 |        1 |     35 |   1751 |      0 |        0 | (0,2)  |           2 |       2306 |     24 |        |        
(2 rows)  
```  
加锁的行lp=1 的t_infomask=450, 16进制 0x01C2 , 因此包含如下MASK :   
```  
#define HEAP_XMIN_COMMITTED             0x0100  /* t_xmin committed */  
#define HEAP_XMAX_EXCL_LOCK             0x0040  /* xmax is exclusive locker */  
#define HEAP_XMAX_LOCK_ONLY             0x0080  /* xmax, if valid, is only a locker */  
#define HEAP_HASVARWIDTH                0x0002  /* has variable-width attribute(s) */  
```  
t_infomask2=8194, 16进制 0x2002 , 因此包含如下MASK :   
```  
#define HEAP_KEYS_UPDATED               0x2000  /* tuple was updated and key cols  
                                                                                 * modified, or tuple deleted */  
```  
xmax掩码信息与compute_new_xmax_infomask函数的处理逻辑一致.  
## 小结  
1\.  单事务锁行时, 4种行锁模式和infomask的关系 :   
1\.1 select ... for key share  
    t_infomask 设置 HEAP_XMAX_LOCK_ONLY  以及 HEAP_XMAX_KEYSHR_LOCK  
1\.2 select ... for share  
    t_infomask 设置 HEAP_XMAX_LOCK_ONLY  以及 HEAP_XMAX_SHR_LOCK [也就是HEAP_XMAX_KEYSHR_LOCK和HEAP_XMAX_EXCL_LOCK]  
1\.3 select ... for no key update  
    t_infomask 设置 HEAP_XMAX_LOCK_ONLY  以及 HEAP_XMAX_EXCL_LOCK  
1\.4 select ... for update [也就是key update]  
    t_infomask 设置 HEAP_XMAX_LOCK_ONLY  以及 HEAP_XMAX_EXCL_LOCK   
    同时 t_infomask2 设置 HEAP_KEYS_UPDATED  
2\. 有兴趣的朋友可以用gdb跟踪一下pgrowlocks的函数调用.  
3\. 下一篇将讲解一下多个事务对同一条TUPLE请求锁的情况, 因为infomask的信息量有限, 所以xmax不再存储xid而是存储MultiXactId.  
    有兴趣的朋友可以关注下一篇BLOG.  
《PostgreSQL How to deal TUPLE LOCK : 2 - "one|more transactions waiting one|more transactions release tuple lock" 》  
http://blog.163.com/digoal@126/blog/static/16387704020131172754749/  
## 参考  
1\. src/backend/access/heap/README.tuplock  
2\. src/include/access/htup_details.h  
3\. src/include/access/multixact.h  
4\. src/backend/access/transam/multixact.c  
5\. src/include/access/heapam.h  
6\. src/backend/access/heap/heapam.c  
7\. src/backend/utils/adt/lockfuncs.c  
8\. src/backend/storage/lmgr/lock.c  
9\. src/backend/storage/lmgr/lmgr.c  
10\. http://www.postgresql.org/docs/devel/static/pgrowlocks.html  
11\. http://www.postgresql.org/docs/devel/static/pageinspect.html  
12\. https://github.com/postgres/postgres/commit/0ac5ad5134f2769ccbaefec73844f8504c4d6182  
13\. http://blog.163.com/digoal@126/blog/static/16387704020130249109133/  
14. http://blog.163.com/digoal@126/blog/static/16387704020130305109687/  
15\. http://blog.163.com/digoal@126/blog/static/163877040201210134586363/  
16\. http://blog.163.com/digoal@126/blog/static/1638770402011515105557166/  
17\. 新版本t_infomask信息如下 :   
```  
/*  
 * information stored in t_infomask:  
 */  
#define HEAP_HASNULL                    0x0001  /* has null attribute(s) */  
#define HEAP_HASVARWIDTH                0x0002  /* has variable-width attribute(s) */  
#define HEAP_HASEXTERNAL                0x0004  /* has external stored attribute(s) */  
#define HEAP_HASOID                             0x0008  /* has an object-id field */  
#define HEAP_XMAX_KEYSHR_LOCK   0x0010  /* xmax is a key-shared locker */  
#define HEAP_COMBOCID                   0x0020  /* t_cid is a combo cid */  
#define HEAP_XMAX_EXCL_LOCK             0x0040  /* xmax is exclusive locker */  
#define HEAP_XMAX_LOCK_ONLY             0x0080  /* xmax, if valid, is only a locker */  
                                                                                /* xmax is a shared locker */  
#define HEAP_XMAX_SHR_LOCK      (HEAP_XMAX_EXCL_LOCK | HEAP_XMAX_KEYSHR_LOCK)  
#define HEAP_LOCK_MASK  (HEAP_XMAX_SHR_LOCK | HEAP_XMAX_EXCL_LOCK | \  
                                                 HEAP_XMAX_KEYSHR_LOCK)  
#define HEAP_XMIN_COMMITTED             0x0100  /* t_xmin committed */  
#define HEAP_XMIN_INVALID               0x0200  /* t_xmin invalid/aborted */  
#define HEAP_XMAX_COMMITTED             0x0400  /* t_xmax committed */  
#define HEAP_XMAX_INVALID               0x0800  /* t_xmax invalid/aborted */  
#define HEAP_XMAX_IS_MULTI              0x1000  /* t_xmax is a MultiXactId */  
#define HEAP_UPDATED                    0x2000  /* this is UPDATEd version of row */  
#define HEAP_MOVED_OFF                  0x4000  /* moved to another place by pre-9.0  
                                                                                 * VACUUM FULL; kept for binary  
                                                                                 * upgrade support */  
#define HEAP_MOVED_IN                   0x8000  /* moved from another place by pre-9.0  
                                                                                 * VACUUM FULL; kept for binary  
                                                                                 * upgrade support */  
#define HEAP_MOVED (HEAP_MOVED_OFF | HEAP_MOVED_IN)  
#define HEAP_XACT_MASK                  0xFFF0  /* visibility-related bits */  
```  
18\. t_infomask2 :   
新增了#define HEAP_KEYS_UPDATED               0x2000  /* tuple was updated and key cols modified, or tuple deleted */  
```  
/*  
 * information stored in t_infomask2:  
 */  
#define HEAP_NATTS_MASK                 0x07FF  /* 11 bits for number of attributes */  
/* bits 0x1800 are available */  
#define HEAP_KEYS_UPDATED               0x2000  /* tuple was updated and key cols  
                                                                                 * modified, or tuple deleted */  
#define HEAP_HOT_UPDATED                0x4000  /* tuple was HOT-updated */  
#define HEAP_ONLY_TUPLE                 0x8000  /* this is heap-only tuple */  
#define HEAP2_XACT_MASK                 0xE000  /* visibility-related bits */  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")