        return a1 - 48;
      if ( a1 > 64) >> 2) - (v23 >> 63);
      ++i_1;
    }
那么第二段何其类似的代码也能理解了，就是取整数的最低位，然后次低位这样，然后再映射到A到S的表中。
    while ( v24 && i_1 > 64) >> 2) - (v24 >> 63));   // 取最低位
      v24 = (((0x6666666666666667LL * v24) >> 64) >> 2) - (v24 >> 63);
      v11 = i_1++;
      v42[v11] = table[v10];
    }
最后再用a来填充，对齐到16的倍数。比如上面计算出来的结果是123，那么3对应D，2对应C，1对应B，依次添加，最后的结果就是123DCBaaaaaaaaaa。
     while ( i_1 <= 15 )
      {
        v12 = i_1++;
        v42[v12] = 'a';
      }
最后一步操作就是转成十六进制，然后取其5-8位，进行md5的计算，如果和给定的常量相同就算成功？
###  求解过程
首先md5的原象只有4位，在很容易爆破，容易得到27debb435021eb68b3965290b5e24c49的原象是7303，那么我们需要的就是字符串5-8位是7303。idapython脚本如下：
    from idaapi import *
    from idc import *
    from idautils import *
    from string import maketrans
    k = maketrans("0123456789", "ABCDEFGHIJ")
    cipherTable = []
    ans = []
    for i in xrange(655):
        cipherTable.append(Dword(0x8140 + 4*i))
    def getflag(x, y):
        sum1 = x - 0x30 + 634 + cipherTable[y] + 892360
        #print sum1
        s = map(lambda x: sum1 + x, cipherTable)
        t = str(s[155 - x])
        p = t + t[::-1].translate(k)
        if p.encode('hex')[5:9] == '7303':
            ans.append(chr(x) + 'a' * 0x29 + chr(y))
    for i in xrange(0x20, 0x7f):
        for j in xrange(0x20, 0x7f):
            getflag(i, j)
但是一共会得到90种不同的解，肯定不是每个解都对的，这里其实还有一个问题，因为flag是通过aes解密出来的，可能会存在数据错误，导致异常产生，我的办法就是一个一个试了，可以通过pwntools来实现自动化测试。
    from pwn import *
    #context.log_level = "debug"
    name = "73FF9B24EF8DE48C346D93FADCEE01151B0A1644BC81"
    p = process(argv=["./junkyard", name, ans])
    p.recv()
最后得到正确的输入是2aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaC，输入就能解密得到flag。
## 总结
  1. 对于垃圾指令很多的情况，需要找出垃圾指令填充的规律，然后就能略去很大无用的代码。
  2. 对于整体的解密思路还存在宏观把握不够的情况，具体表现在求素数那部分，其实那部分之后并没有用到，因为最后只用到了输入的其中2位，然后进行爆破就行了，所以还是多分析了很多部分，浪费了很多时间。
  3. 学到了加密常量字符串的新方法，通过指定循环次数来进行哈希运算，可以对字符串进行保护，同时要进行哈希运算，加大了运行时间，减少了爆破的机会。