**作者：星阑科技PotalLab  
原文链接：**
这是2021年blackhat上的一次议题分享中的漏洞，直到文档完成视频还未公开，且issue页面也无权访问，但是看了ppt后不禁被这绝妙的思路所折服，于是决定自己亲手构造一番，在此感谢@__R0ng的指导。
ppt可以在这里找到：
另外虽然是20年的漏洞，但是issue页面直到本文编写完成也未公开。
有关的两次commit在这里：
commit1：
commit2：
## 漏洞分析
整体是关于Promise.allSettled 的错误，所以先看下有关内容。
### 关于Promise
Promise对象用于表示一个异步操作的最终完成 (或失败)及其结果值，具体可以看这里：
Promise 有以下三种状态：
  * 待定（pending）: 初始状态，既没有被兑现，也没有被拒绝
  * 已兑现（fulfilled）: 意味着操作成功完成
  * 已拒绝（rejected）: 意味着操作失败
待定状态的 Promise
对象要么会通过一个值被兑现（fulfilled），要么会通过一个原因（错误）被拒绝（rejected）。当这些情况之一发生时，我们用 promise 的
then 方法排列起来的相关处理程序就会被调用。
Promise.allSettled()方法返回一个在所有给定的promise都已经fulfilled或rejected后的promise，并带有一个对象数组，每个对象表示对应的promise结果。
### 关于Promise.allSettled()
Promise.allSettled()方法返回一个在所有给定的promise都已经fulfilled或rejected后的promise，并带有一个对象数组，每个对象表示对应的promise结果
详细的可以看这里：
    // 用法
    Promise.allSettled(iterable);
    // iterable就是字面意思，一个可迭代对象
示例
    Promise.allSettled([
    Promise.resolve(1),
    Promise.reject(2)
    ])
    .then((results) => results.forEach((result) => console.log(result.status)));
    // output:
    // fulfilled
    // rejected
重点是，只有传入的所有promise对象都已经fulfilled或rejected后才会返回一个array。
### Bug
我们来看下Promise.allSettled的对应实现，源码在src/builtins/promise-all-element-closure.tq中。
    transitioning macro PromiseAllResolveElementClosure(
        implicit context: Context)(
        value: JSAny, function: JSFunction, wrapResultFunctor: F): JSAny {
    [ ... ]
      const index = identityHash - 1;
      let remainingElementsCount = UnsafeCast(
          context.elements[PromiseAllResolveElementContextSlots::
                               kPromiseAllResolveElementRemainingSlot]);
      let values = UnsafeCast(
          context.elements[PromiseAllResolveElementContextSlots::
                               kPromiseAllResolveElementValuesSlot]);
      const newCapacity = index + 1;
      if (newCapacity > values.length_intptr) deferred {
          // This happens only when the promises are resolved during iteration.
          values = ExtractFixedArray(values, 0, values.length_intptr, newCapacity);
          context.elements[PromiseAllResolveElementContextSlots::
                               kPromiseAllResolveElementValuesSlot] = values;
        }
      values.objects[index] = updatedValue;
      remainingElementsCount = remainingElementsCount - 1;  //减1
      context.elements[PromiseAllResolveElementContextSlots::
                           kPromiseAllResolveElementRemainingSlot] =
          remainingElementsCount;
      if (remainingElementsCount == 0) {                                        //为0
        const capability = UnsafeCast(
            context.elements[PromiseAllResolveElementContextSlots::
                                 kPromiseAllResolveElementCapabilitySlot]);
        const resolve = UnsafeCast(capability.resolve);
        const arrayMap = UnsafeCast(
            nativeContext
                .elements[NativeContextSlot::JS_ARRAY_PACKED_ELEMENTS_MAP_INDEX]);
        const valuesArray = NewJSArray(arrayMap, values);
        Call(context, resolve, Undefined, valuesArray);   //返回array
      }
      return Undefined;
    }
对于.tq后缀的文件是v8中的turque，详细信息请看v8的官方文档：
关于其概念不在讲解，不影响我们理解漏洞
通过注释我们可以得知，在其内部实现中有remainingElementsCount这么一个变量，在每调用一次PromiseAllResolveElementClosure时，都会将其减1，而其初始化时，就是传入allSettled内的可迭代对象长度，当等于0时就会返回一个array。
那么如果我们在一个对象上既调用resolveElementFun也调用
rejectElementFun呢，这就会导致虽然只对一个对象进行了处理，但是remainingElementsCount却减去2，最终我们只需将半数可迭代对象内部的内容给处理掉之后就能得到array。
所以我们可以先一步拿到返回的array，然而settled的过程 **仍在继续**
，这点可以通过调试得知，后面在remainingElementsCount等于0后会继续减为负数。
我们拿到array之后，可以改变array的map，从而在其之后的settled过程中达到类型混淆，比如我们可以将array从FixedArray类型变为NumberDictionary，如此一来最直观的一点就是。
可以看到如果仍按照未变类型之前的偏移去读写数据的话就会造成越界读写，这也是在消去checkmaps之后常用的越界手段。
类型转化的方法有slide上贴出的，arr[0x10000] = 1
，原因是对于FixedArray来说，其内嵌的对象数量有一定的限制，超过这个限制就会自然转化为NumberDictionary形式，同样也是为了节省空间的优化表现形式。
  * befer 
  * after 
再来看一下内存布局
为了方便展示我用了arr = [1.1,2.2,3.3];
  * before 
  * after
  * 首先可以看到他的排布顺序也变了 
可以看到布局改变很大，由于压缩指针的原因，指针排布比较紧密，就没有在图中标注释，但是仔细点可以看到从0x2c0e080c8214+8开始就是右key，左value的布局了。
### 如何触发
前面也说了，只要对于一个迭代对象内的每个promise都一起调用俩函数resolveElementFun 和
rejectElementFun那么就能提前得到array，但是似乎还不知道具体怎么做
作者在slide中给了一段poc作为示范。
    class MyCls{
      constructor(executor){
        executor(custom_resolve,custom_reject);
      }
      static resolve(){
        return{
          then:(fulfill, reject)=>{
            fulfill(); reject();
          }
        }
      }
    }
## 源码分析
经调试发现对于remainingElementsCount的初始化在promise-all.tq里面，设置为n+1后，后面会减1。
    // ES#sec-promise.allsettled
    // Promise.allSettled ( iterable )
    transitioning javascript builtin PromiseAllSettled(
        js-implicit context: Context, receiver: JSAny)(iterable: JSAny): JSAny {
      return GeneratePromiseAll(  //================================调用GeneratePromiseAll
          receiver, iterable, PromiseAllSettledResolveElementFunctor{},
          PromiseAllSettledRejectElementFunctor{});
    }
    ==============================================================================
    transitioning macro GeneratePromiseAll(
        implicit context: Context)(
        receiver: JSAny, iterable: JSAny, createResolveElementFunctor: F1,
        createRejectElementFunctor: F2): JSAny {
    [ ... ]
      try {
        // Let iterator be GetIterator(iterable).
        // IfAbruptRejectPromise(iterator, promiseCapability).
        let i = iterator::GetIterator(iterable);
        // Let result be PerformPromiseAll(iteratorRecord, C,
        // promiseCapability). If result is an abrupt completion, then
        //   If iteratorRecord.[[Done]] is false, let result be
        //       IteratorClose(iterator, result).
        //    IfAbruptRejectPromise(result, promiseCapability).
        return PerformPromiseAll(        //=========================调用PerformPromiseAll
            receiver, capability, i, createResolveElementFunctor,
            createRejectElementFunctor) otherwise Reject;
    [ ... ]
    ===============================================================================
    transitioning macro PerformPromiseAll(
        implicit context: Context)(
        constructor: JSReceiver, capability: PromiseCapability,
        iter: iterator::IteratorRecord, createResolveElementFunctor: F1,
        createRejectElementFunctor: F2): JSAny labels
    Reject(Object) {
      const nativeContext = LoadNativeContext(context);
      const promise = capability.promise;
      const resolve = capability.resolve;
      const reject = capability.reject;
    [ ... ]
      const resolveElementContext =
          CreatePromiseAllResolveElementContext(capability, nativeContext);
      let index: Smi = 1;
    [ ... ]
      // Set iteratorRecord.[[Done]] to true.
      // Set remainingElementsCount.[[Value]] to
      //    remainingElementsCount.[[Value]] - 1.
      let remainingElementsCount = UnsafeCast(
          resolveElementContext[PromiseAllResolveElementContextSlots::
                                    kPromiseAllResolveElementRemainingSlot]);
      remainingElementsCount -= 1;
      resolveElementContext[PromiseAllResolveElementContextSlots::
                                kPromiseAllResolveElementRemainingSlot] =
          remainingElementsCount;
      if (remainingElementsCount > 0) {
        // Pre-allocate the backing store for the {values_array} to the desired
        // capacity here. We may already have elements here in case of some
        // fancy Thenable that calls the resolve callback immediately, so we need
        // to handle that correctly here.
        const valuesArray = UnsafeCast(
            resolveElementContext[PromiseAllResolveElementContextSlots::