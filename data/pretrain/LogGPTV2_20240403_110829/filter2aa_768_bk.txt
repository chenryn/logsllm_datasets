### 设备引导

在深入讨论设备引导之前，首先需要理解什么是Option ROM。Option ROM是位于PCI或ISA设备上的只读存储器（ROM）。由于这个存储器不是总线标准强制要求的，因此被称为Option ROM。这类ROM中通常存放着用于初始化该设备的数据和代码。例如，显卡和网卡等设备上就经常配备有Option ROM。

PnP BIOS规范详细定义了Option ROM的格式。简而言之，Option ROM的起始部分是一个固定结构的头结构，称为PnP Option ROM Header（简称PORH）。在PORH偏移18h和1Ah处可以指向另外两个结构，分别是PCI数据结构和PnP扩展头结构（简称PEH）。PEH中的Next字段（偏移06h，长度为WORD）用来描述下一个扩展结构的偏移。

#### 《软件调试》补编
- 155 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 

**图 4 PnP 设备 Option ROM 中的头结构**

所有Option ROM的前两个字节都是0xAA55。这使得在调试时可以通过查找这个签名来定位Option ROM的头结构。此外，PC标准规定，物理内存地址空间0xC0000到0xEFFFF段是供Option ROM使用的。

**图 4** 中，黄色标记的向量字段与引导过程密切相关，具体如下：

- **初始化向量**：系统固件在引导前会通过远调用执行该地址指向的代码。Option ROM执行后，除了初始化工作外，如果该设备支持引导，还可以通过Hook系统的INT 13h（磁盘读写中断）和输入设备来实现引导。对于PnP设备，应使用BCV或BEV方法。

- **引导连接向量 (Boot Connect Vector)**：这个向量指向Option ROM中的一段代码（相对于Option ROM起始处的偏移）。当这段代码被BIOS调用时，可以根据需要改写INT 13h。

- **引导入口向量 (Boot Entry Vector)**：指向加载操作系统的代码入口。当系统准备从该设备引导时，将执行此向量指向的代码。例如，通过PXE方式启动网络引导就是使用这种方法。

**图 5** 显示了网卡设备Option ROM的内容。第一列是内存物理地址，后面四列是从该地址开始的16字节数据（以DWORD格式显示，每4字节一组）。图中第一个黄色方框包围的32字节是PORH结构，其0x1A偏移处的值0x60表示PEH结构的偏移。因此，下面的方框包围的是扩展结构。

#### 《软件调试》补编
- 156 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 

**图 5 观察 PnP 设备的引导入口向量**

根据**图 4**，PEH结构的0x1A处的两个字节是BEV向量，即0x0c04。因此，当在BIOS中选择从该网卡引导时，BIOS在做好引导准备工作后，将通过远调用执行0xcb00:0c04处的代码。在调试时，如果对这个地址设置断点，将会命中。

### INT 19h 和 INT 18h

BBS还定义了两个软中断来支持引导：发起引导的INT 19h和某个设备引导失败后的恢复重新引导的INT 18h。

**INT 19h 的伪代码**：
```plaintext
IPLcount = current number of BAIDs and BEV devices at this boot.
FOR (i = 0; i < IPLcount; ++i)
    currentIPL = IPL Priority[i].
    Use currentIPL to index the IPL Table entry.
    Do a far call to the entry's boot handler or BEV.
    IF (control returns via RETF, or an INT 18h)
        Clean up the stack if necessary.
    ENDIF
Execute an INT 18h instruction.
```
第5行的远调用将控制权交给当前IPL设备的引导过程。如果调用成功，将永远不会返回。

**INT 18h 的伪代码**：
```plaintext
Reset stack.
IF (all IPL devices have been attempted)
    Print an error message that no O/S was found.
    Wait for a key stroke.
    Execute the INT 19h instruction.
ELSE
    Determine which IPL device failed to boot.
    Jump to a label in the INT 19h handler to try the next IPL device.
ENDIF
```
需要注意的是，上述伪代码仅是示意性的，实际的BIOS实现可能更复杂且有所不同。

#### 《软件调试》补编
- 157 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 

### 使用 Bochs 调试引导过程

除了使用硬件调试器如ITP进行调试外，某些情况下也可以使用虚拟机。具体来说，可以将要调试的固件（BIOS或EFI）文件配置到虚拟机中，然后利用虚拟机管理软件的调试功能进行调试。Bochs虚拟机便具备这种功能，它是一个开源项目，可以从其网站下载安装文件和源代码：[http://bochs.sourceforge.net/](http://bochs.sourceforge.net/)。

**图 6** 展示了使用Bochs调试的场景。大窗口是虚拟机，小窗口是Bochs的控制台，可在其中输入各种调试命令。图中显示的是在INT 19h入口处（0xf000:e6f2）设置的断点命中的状态。

**图 6 使用 Bochs 调试引导过程**

使用 `xp 0x19*4` 可以显示中断向量表中INT 19h对应的内容，即0xf000e6f2。知道了地址后，可以使用 `pb 0xfe6f2` 设置断点。Bochs项目实现了一个简单的BIOS，主要代码位于rombios.c文件中，可通过以下链接访问：[http://bochs.sourceforge.net/cgi-bin/lxr/source/bios/rombios.c](http://bochs.sourceforge.net/cgi-bin/lxr/source/bios/rombios.c)。想学习BIOS的读者可以仔细阅读这个文件，这是深刻理解BIOS的有效方法。

### 0x7c00——新的起点

大多数情况下，BIOS从BAID设备引导时，会从设备（磁盘）的约定位置读取引导扇区，并将其存放到内存地址0x0000:7c00，然后将控制权转交过去。转交时通过DL寄存器传递一个参数，指定磁盘号码（00代表A盘，0x80代表C盘）。接下来的引导代码在通过INT 13h访问磁盘时，应使用这个参数指定要访问的磁盘。

因为从磁盘引导时，BIOS一定会将控制权移交到0x7c00这个地址，所以在调试时可以在该位置设置断点，开始分析和跟踪。**表 2** 列出了其他一些固定的BIOS入口地址。

**表 2 BIOS 兼容入口点**

| 地址          | 用途                                       |
|---------------|--------------------------------------------|
| 0xf000:e05b   | POST 入口点                                 |
| 0xf000:e2c3   | 不可屏蔽中断（NMI）处理函数入口点           |
| 0xf000:e3fe   | INT 13h 硬盘服务入口点                       |
| 0xf000:e401   | 硬盘参数表                                  |
| 0xf000:e6f2   | INT 19h（引导加载服务）入口点                |
| 0xf000:e6f5   | 配置数据表                                  |
| 0xf000:e739   | INT 14h 入口点                              |
| 0xf000:e82e   | INT 16h 入口点                              |
| 0xf000:e987   | INT 09h 入口点                              |
| 0xf000:ec59   | INT 13h 软盘服务入口点                       |
| 0xf000:ef57   | INT 0Eh（磁盘控制器ISR）入口点               |
| 0xf000:efc7   | 软盘控制器参数表                            |
| 0xf000:efd2   | INT 17h（打印机服务）入口点                  |
| 0xf000:f065   | INT 10h（显示服务）入口点                    |
| 0xf000:f0a4   | MDA/CGA 显示参数表 (INT 1Dh)                 |
| 0xf000:f841   | INT 12h（内存大小服务）入口点                |
| 0xf000:f84d   | INT 11h 入口点                              |
| 0xf000:f859   | INT 15h（系统服务）入口点                    |
| 0xf000:fa6e   | 低 128 个字符的图形模式字体                   |
| 0xf000:fe6e   | INT 1Ah（时间服务）入口点                    |
| 0xf000:fea5   | INT 08h（系统定时器ISR）入口点               |
| 0xf000:fef3   | POST 用这个值来初始化中断向量表              |
| 0xf000:ff53   | 只包含 IRET 指令的 dummy 中断处理过程        |
| 0xf000:ff54   | INT 05h（屏幕打印服务）的入口点              |
| 0xf000:fff0   | CPU 复位后的执行起点                         |
| 0xf000:fff5   | 构建日期，按 MM/DD/YY 格式，共 8 个字符       |
| 0xf000:fffe   | 系统型号                                    |

此外，地址0x0040:0000开始的257个字节是所谓的BIOS数据区（BDA），里面按固定格式存放了BIOS向后续引导程序和操作系统传递的信息。

### 下一期的问题

一台PC系统开机后显示 "Windows could not start because of a general computer hardware configuration problem." 对于这样的问题有哪些方法来调试和解决？（注：上期的问题留到下一期给出答案）

#### 《软件调试》补编
- 159 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 

### 步步为营——如何调试操作系统加载阶段的故障

上一期我们介绍了系统固件（BIOS）寻找不同类型的引导设备的方法，描述了固件向引导设备移交执行权的过程。对于从硬盘引导，首先接受控制权的是位于硬盘0面0道0扇区中的主引导记录（MBR）。MBR共有512个字节，起始处为长度不超过446字节的代码，然后是64个字节长的分区表，最后两个字节固定是0x55和0xAA。MBR中的代码会在分区表中寻找活动分区，找到后，它会使用INT 13h将活动分区的引导扇区加载到内存中，加载成功后，将执行权移交过去。按照惯例，引导扇区也应被加载到0x7C00这个内存位置，所以MBR代码通常会先把自己复制到0x600开始的512个字节，以便给引导扇区腾出位置。正因为如此，当使用虚拟机或ITP调试时，在0x7C00处设置断点，通常会命中两次。引导扇区的内容与操作系统相关，在安装操作系统时，操作系统的安装程序会设置这些内容。