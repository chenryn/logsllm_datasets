title:Trust management services in relational databases
author:Sabrina De Capitani di Vimercati and
Sushil Jajodia and
Stefano Paraboschi and
Pierangela Samarati
Trust Management Services in Relational Databases
Sabrina De Capitani di Vimercati
DTI - University of Milan
26013 Crema - Italy
PI:EMAIL
Sushil Jajodia
George Mason University
Fairfax, VA 22030-4444
PI:EMAIL
Stefano Paraboschi
DIGI - University of Bergamo
24044 Dalmine - Italy
PI:EMAIL
Pierangela Samarati
DTI - University of Milan
26013 Crema - Italy
PI:EMAIL
ABSTRACT
Trust management represents today a promising approach
for supporting access control in open environments. While
several approaches have been proposed for trust manage-
ment and signiﬁcant steps have been made in this direction,
a major obstacle that still exists in the realization of the ben-
eﬁts of this paradigm is represented by the lack of adequate
support in the DBMS.
In this paper, we present a design that can be used to imple-
ment trust management within current relational DBMSs.
We propose a trust model with a SQL syntax and illustrate
the main issues arising in the implementation of the model in
a relational DBMS. Speciﬁc attention is paid to the eﬃcient
veriﬁcation of a delegation path for certiﬁcates. This eﬀort
permits a relatively inexpensive realization of the services of
an advanced trust management model within current rela-
tional DBMSs.
Categories and Subject Descriptors
H.2.4 [Database Management]:
Systems—Relational
databases; H.2.7 [Database Management]: Database Ad-
ministration—Security, integrity, and protection
General Terms
Security
Keywords
Trust, relational DBMS, credentials, access control
INTRODUCTION
1.
Governments, large companies, and many other organiza-
tions are required to oﬀer access to information contained
within their information systems to a multitude of users.
Users can be internal or external, and typically access the
data from their clients connected to a network. The size and
dynamics of the user community in this scenario set require-
ments that cannot be easily solved by traditional authoriza-
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS’07, March 20-22, 2007, Singapore.
Copyright 2007 ACM 1-59593-574-6/07/0003 ...$5.00
tion and access control solutions [14]. It is often impractical
to assume the creation and management of an account for
each and every user on each system:
it is complex both
on the provider’s side (each account has to be managed,
privileges have to be explicitly assigned, and individual cre-
dentials have to be securely kept) and on the client side
(every one experiences problems in managing the accounts
and passwords she has) [17]. The case for governments and
public services is particularly signiﬁcant: there is a strong
interest in allowing citizens to access the information that
each public organization keeps on them, while guaranteeing
simplicity to the user in managing accesses.
A partial solution to the user-side management of accounts
is represented by Single-Sign-On (SSO); the considerable in-
terest on this technology is a clear signal of the size of the
problem. At the same time SSO is clearly insuﬃcient, be-
cause it deals only with the sharing of authentication within
a single organization.
As an alternative, trust management systems allow possi-
bly unknown parties to establish trust based on (certiﬁed)
information that each party can present to the counterpart
at the time of interaction. Servers supporting trust manage-
ment can then regulate access based on attributes (identities
or more general properties) that clients requesting access
present [2, 3, 5, 7, 17]. This is often the base on which ﬂex-
ible authorizations can be deﬁned, using certiﬁed attributes
as parameters in the speciﬁcation of the resource or subject
of an authorization.
Some of the components on which trust management is
based, like the presence of a public-key infrastructure sup-
porting the distribution and veriﬁcation of certiﬁcates, al-
ready are eﬀective components of many important services,
as demonstrated by IPsec and SSL/TLS. Trust manage-
ment aims at extending their use from authentication on
network connections to ﬂexible access control for structured
resources.
While several approaches have been proposed for trust man-
agement and signiﬁcant steps have been made in this direc-
tion [1], a major obstacle that still exists in the realiza-
tion of the beneﬁts of this paradigm is represented by the
lack of adequate support in the DBMS. Indeed, while cur-
rent DBMSs oﬀer some support for certiﬁcates, they exploit
them only for the speciﬁc task of user authentication. The
major commercial DBMSs (speciﬁcally the last releases of
149
Oracle Server and Microsoft SQL Server 2005) emphasize in
their documentation the possibility to manage certiﬁcates
and to allow users to establish database connections using
SSL/TLS or other PKI-based solutions. However, the infor-
mation appearing in certiﬁcates can at most be used to as-
sign a speciﬁc user id or role to the session activated with the
connection; no support is oﬀered within the system to use
certiﬁed attributes to specify ﬂexible authorizations. Post-
greSQL presents a similar proﬁle: it is possible to combine
it with OpenSSL in order to introduce a robust and ﬂexible
authentication service, but it is not possible to integrate this
mechanisms with DBMS authorizations.
The availability of a trust management service within the
DBMS would considerably increase the impact and applica-
bility of this access control paradigm. As a matter of fact,
DBMSs are not only the backbone of old-style business ap-
plications, but are responsible for the management of most
of the information that is accessed using a Web browser or
a Web service invocation. Lack of support of trust in the
DBMS would require the DBMS to rely on the overlying
application layer for enforcing trust management functions;
this is clearly in contrast with the DBMS long term evolu-
tion, which has continuously extended the DBMS with richer
functions for data access and management. Only by includ-
ing trust management functions in the DBMS itself the sys-
tem can give the database administrator (DBA) guarantees
of full control on the access control policies. The develop-
ment of a trust management component within a database
management system would oﬀer considerable advantages in
terms of organization of access privileges (the authorization
policy is deﬁned together with the data) and of robustness,
since there would be a strong guarantee that all accesses to
the data satisfy the protection requirements, independently
from the characteristics of the application environment. In
general, this design would satisfy a classical access control
principle that imposes to “keep the access control mecha-
nism close to the resource”.
Another demonstration of the need for an integration be-
tween trust management services and DBMSs derives from
the analysis of the architecture often used in applications,
where access control requirements in a scenario with many
users are managed by deﬁning a set of ad-hoc mechanisms,
realized using the functionality of the procedural extension
of SQL. Such an approach satisﬁes the requirements only
partially and exhibits clear shortcomings in terms of perfor-
mance, usability, and integrity. The solution presented in
this paper instead designs a novel service integrated within
the database architecture. The advantages are greater per-
formance, greater usability, and increased robustness.
In
particular, our solution has been developed with the follow-
ing requirements in mind.
• Seamless integration with the DBMS . DBMSs have an
integrated module for controlling access to resources.
It is important for trust management solutions not to
subvert such a control, but complement it. Also, it is
important to be able to express and represent trust in-
formation as part of the database schema, with an ad-
equate representation within the catalog of the DBMS.
• Abstractness and usability. One of the main charac-
teristics of a DBMS is the abstractness of its structure
and the declarativeness of the languages accessing it;
it is important that the trust management solution
maintains such characteristics.
• Expressiveness.
The trust management solution
should be expressive to make it possible to specify in
a ﬂexible way diﬀerent protection requirements that
may need to be imposed on diﬀerent data.
• Scalability. The trust management solution should en-
sure scalability with respect to the potentially high
number of users, resources, and policies that may need
to be managed in the context of large distributed open
systems.
The contribution of the paper is twofold. First, a trust man-
agement model for DBMSs is proposed. The model identiﬁes
and adapts trust management concepts for their handling
within relational databases.
It is accompanied by a SQL
syntax, which allows a seamless integration with existing
database services and demonstrates the high-level abstrac-
tion that a database designer can use to apply these con-
cepts. Second, the paper illustrates the basic techniques on
which a mechanism eﬃciently enforcing the model within a
modern relational engine can be built.
The remainder of the paper is organized as follows. Sec-
tion 2 introduces the base elements of a trust management
model for DBMSs and deﬁnes the framework within which
the model should operate. Section 3 proposes SQL state-
ments for representing the trust model. Section 4 presents
an algorithm for retrieving a valid delegation chain in sup-
port of a certiﬁcate presented by the client. Section 5 dis-
cusses integration with current relational database engines.
Section 6 discusses how to implement our proposal in Post-
greSQL. Section 7 describes related work. Finally, Section 8
presents our concluding remarks.
2. BASE ELEMENTS OF THE MODEL
The ﬁrst step for introducing a model and related language
for deﬁning and managing trust within the DBMS is the
identiﬁcation of the concepts that should be captured for
providing trust management. It is also necessary to deﬁne
the framework within which the model should operate.
2.1 Base concepts
By analyzing the needs of a trust management system, and
considering the results of previous work in the area, we iden-
tify the following concepts that need to be captured.
Identity. It corresponds to a public key. The trust manage-
ment service is based on the services of asymmetric cryptog-
raphy. A basic assumption is that in oﬀering access to infor-
mation resources the database does not consider if a client
really corresponds to a speciﬁed physical-world entity. In-
stead, the assumption is that every client interacting with
the database presents an identity and, as long as the client
demonstrates knowledge of the private key corresponding to
the identity, the client owns the identity.
150
Authority. It represents an identity (i.e., a public key) re-
sponsible for producing and signing certiﬁcates. The need
for capturing this concept comes from the fact that a party
accepts certiﬁcates signed by identities that it trusts (or
chains of certiﬁcates eventually leading to them) [8].
Certiﬁcate. It involves two identities: the issuer producing
the certiﬁcate, and the subject receiving it. The integrity
of the certiﬁcate is guaranteed by the presence of a crypto-
graphic signature created by the issuer. A certiﬁcate then
includes: the issuer ’s public key, the subject’s public key, a
validity period , and a signature.
We distinguish two types of certiﬁcates: attribute certiﬁcates
and delegation certiﬁcates.1
• An attribute certiﬁcate binds attribute information
It contains a list of pairs
to the certiﬁcate subject.
hattribute name, attribute valuei.
• A delegation certiﬁcate binds the trustworthiness of
pairs of authorities together. More precisely, an au-
thority may issue a delegation certiﬁcate asserting that
it trusts another authority (or authorities having cer-
tain attributes) for issuing certain attribute certiﬁ-
cates. Delegation has been an important topic in re-
search on trust management. The model presented in
this paper considers a form of delegation where author-
ities can either give unrestricted delegation to other
authorities, or delegate other authorities only on spec-
iﬁed attributes (e.g., a health agency can issue a certiﬁ-
cate delegating physicians to certify a restricted set of
properties over patients). A delegation certiﬁcate con-
tains a list (possibly empty) of attribute name terms,
representing the attributes on which the subject has
been delegated.
Policy. It deﬁnes the rules regulating access to resources,
based on the identities owned by the client and on the infor-
mation provided by the attribute and delegation certiﬁcates.
A major contribution of our solution is the capability to ex-
press powerful rules that complement and nicely integrate
with the native access control solution of the DBMS.
2.2 Framework assumptions
The goal of this work is to present an approach for al-
lowing the DBMS to understand and reason about trust
and regulate access to its data accordingly. We are not
concerned with the low-level services (certiﬁcate formats,
cryptographic protocols, and so on) required to create, ex-
change and verify certiﬁcates, or to delegate authority; the
model is built assuming the presence and correct behaviour
of traditional solutions developed for that and already avail-
able. Speciﬁcally, issues like certiﬁcate revocation, network
retrieval of certiﬁcates, credential negotiation, and robust
1Even if some certiﬁcate formats combine the two aspects in
a single certiﬁcate, it is possible to consider separately the
two types of certiﬁcates.
cryptography, are all assumed to be managed by an un-
derlying implementation of the certiﬁcate management ser-
vices [12, 13]. Reuse of existing implementations is par-
ticularly signiﬁcant in this environment, where the large
number, variety and distribution of the players, combined
with the need for a consensus on the standards used, gives
a strong “ﬁrst-mover advantage” to existing solutions.
Our proposal represents a convenient strategy to realize the
beneﬁts of a richer trust management model without the
need to update the underlying infrastructure. This is par-
ticularly signiﬁcant considering that currently X.509 is the
format typically used for certiﬁcates and it presents signiﬁ-
cant limitations in its design (it allows a restricted form of
delegation and it focuses on the certiﬁcation of real-world
identities, an intrinsically hard problem that the solution is
not able to solve completely). The integration with a richer
model like the one proposed in this work can signiﬁcantly
increase the ﬂexibility in the use of X.509 certiﬁcates.
3. SQL MODEL FOR TRUST MANAGE-
MENT
Our solution builds on an analysis of previous proposals,
which however are not directly applicable to the DBMS sce-
nario. Although existing approaches are expressive, they