### 优化后的文本

#### 继电器描述符的通信开销
当前Tor网络中，每个继电器描述符的大小约为3.3 MB。因此，每个客户端在当前Tor网络中的通信开销大约为每3小时1.1 MB（其中包含560 KB的共识文件和6 KB的继电器描述符）。相比之下，在我们的架构中，相应的通信开销为2 MB。因此，CPIR-Tor并不适合当前规模的Tor网络。

#### 场景2：增加客户端数量
固定中继节点总数为2000个，同时逐步增加客户端数量。具体数据如下：
- 客户端数量：0.1, 1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07
- 计算时间(s)与中继节点数的关系图：R=1, R=2, R=3, R=4, R=5
- 数据传输量(字节)与中继节点数的关系图：R=1, R=2, R=3, R=4, R=5

#### 表1：结果总结
比较了Tor、CPIR和ITPIR在不同场景下的通信开销。通信开销以每3小时内每个客户端的数据量来衡量。

| 场景 | 中继节点数 | 客户端数 | Tor (MB) | CPIR (MB / 核心数) | ITPIR (MB / 核心利用率 %) |
| --- | --- | --- | --- | --- | --- |
| 1 | 2000 | 250,000 | 1.1 | 2 / 7 | 0.2 / 0.425% |
| 2 | 2000 | 250,000 * sc | 1.1 | 2 / 70 | 0.2 / 4.25% |
| 3 | 20,000 | 250,000 | 11 | 4 / 59 | 0.5 / 0.425% |
| 4 | 250,000 | 250,000 | 111 | 8 / 466 | 0.2 / 0.425% |
| 5 | 2,500,000 | 250,000 | - | - | - |

#### 场景3：增加中继节点数量
中继节点数量按比例增加sr倍，而客户端数量保持不变。所需核心数随sr增加呈次线性增长。例如，当中继节点从2000增加到20000时，所需核心数从7增加到59。在此场景下，CPIR-Tor的通信开销也呈次线性增长，而当前Tor的通信开销呈线性增长。因此，随着中继节点数量的增加，使用CPIR-Tor的优势越来越明显。例如，当中继节点数量为20000时，Tor的通信开销为每3小时11 MB，而CPIR仅为4 MB。

#### 场景4：同时增加中继节点和客户端数量
中继节点和客户端数量均按比例s增加。支持s * 2000个中继节点和s * 250,000个客户端所需的核心数严格小于7 * s^2。为了支持20,000个中继节点和250万客户端，需要553个核心。我们注意到大约50%的Tor中继节点已经是目录服务器，因此553个核心是可行的。同样，随着中继节点数量的增加，CPIR-Tor相对于Tor的优势更大。

#### 场景5：将客户端转换为中间节点
如果所有250,000个客户端都转换为中间节点，则中间数据库的服务器计算时间为20秒，而出口数据库的计算时间仍为0.1秒。因此，此场景下所需的总核心数约为466。与当前Tor网络相比，CPIR将网络中的通信开销从每3小时111 MB减少到仅8 MB。

#### 图4：核心数与中继节点和客户端数量的关系
假设一半的中继节点是出口节点。

#### 信息论PIR的性能评估
我们使用Goldberg [12] 的多服务器PIR方案实现 [13]，并计算不同中继节点数量下的服务器计算时间、总通信量和客户端计算时间，使用的描述符大小为2100字节，服务器数量为3。

#### 图5：3服务器ITPIR的成本
- (a) 服务器计算时间
- (b) 总通信量
- (c) 客户端计算时间

即使我们将ITPIR-Tor协议与Tor协议进行3小时内的比较，其中客户端建立18条电路，ITPIR的通信开销仍然比完全下载小一个数量级。因此，在这种架构中，我们不需要重用块，就能提供与Tor相当的安全性，只要至少有一个守护中继节点是诚实的。

#### 各种扩展场景下的比较
- **场景1：当前Tor规模**：总中继节点数为2000，总客户端数为250,000。对于2000个中继节点，退出节点的数量约为1000，对应的服务器计算时间为0.005秒。因此，支持单个电路的总服务器计算时间为0.005秒（三个守护节点合计）。每个客户端每10分钟建立一条电路，单个守护节点可以支持360,000个客户端。在当前Tor网络中，有250,000个客户端和约500个守护节点，因此每个守护节点平均只需服务1500个客户端，占用0.425%的核心资源。Tor的通信开销为每3小时1.1 MB。在ITPIR中，建立单个电路的成本仅为12 KB。即使客户端在3小时内建立18条电路，总通信成本也只有216 KB。因此，即使在当前Tor网络规模下，ITPIR也非常有用。
- **场景2：增加客户端数量**：中继节点总数固定为2000，客户端数量增加sc倍。为了支持sc * 250,000个客户端，守护节点需要占用sc * 0.425%的核心资源。即使客户端数量增加到250万，但守护节点数量仍固定为500时，每个守护节点也只占用4.25%的核心资源。系统中的总通信开销随客户端数量线性增加，类似于当前Tor网络。
- **场景3：增加中继节点数量**：中继节点数量增加sr倍，客户端数量保持不变。为了支持sr * 2000个中继节点，守护节点只需占用0.425%的核心资源。这是因为PIR数据库的大小增加被中继节点数量的增加所抵消。因此，无论系统中有多少中继节点，每个守护节点都只占用0.425%的核心资源。此外，随着中继节点数量的增加，ITPIR在通信成本方面的优势也越来越明显。例如，在2000个中继节点时，ITPIR比Tor高效5倍；而在20,000个中继节点时，ITPIR比Tor高效22倍（每3小时每个客户端的通信开销为516 KB，而Tor为11.1 MB）。
- **场景4：同时增加中继节点和客户端数量**：中继节点和客户端数量均按比例s增加。为了支持s * 250,000个客户端和s * 2000个中继节点，每个守护节点需要占用s * 0.425%的核心资源。当客户端数量为250万，中继节点数量为20,000时，每个守护节点占用4.25%的核心资源。即使客户端基数增加100倍（2500万），也需要42%的核心资源，这在多核环境中可能是合理的。随着客户端数量的增加，ITPIR和Tor的通信开销都呈线性增长，而随着中继节点数量的增加，使用ITPIR比使用Tor更有优势。
- **场景5：将客户端转换为中间节点**：如果所有250,000个客户端都转换为中间节点，则守护节点的服务器计算时间保持不变，因为PIR不涉及中间数据库。因此，每个守护节点仍只占用0.425%的核心资源。

#### 进一步强调ITPIR的可扩展性
我们还考虑了一个场景，即所有250,000个客户端都转换为中继节点，其分布与当前Tor网络中的守护/中间/退出节点类似。在这种情况下，ITPIR的通信开销为每3小时每个客户端1.7 MB，而Tor为137 MB——高出两个数量级。

#### 讨论
- **CPIR与ITPIR的比较**：CPIR-Tor架构不需要所有守护节点都是目录服务器，更容易集成到当前Tor网络中，其中随机子集的中继节点是目录服务器。此外，它适用于客户端浏览时间较短或不关心连接不可链接性的场景。另一方面，ITPIR-Tor架构要求所有守护节点都是目录服务器，因此需要它们维护系统的全局视图，但为客户节省了大量的通信成本。ITPIR-Tor架构可以支持各种客户端工作负载，并提供高级别的安全性。特别是，ITPIR-Tor可以实现一种非常吸引人的场景，即将所有客户端变为中间节点，而不会给网络带来额外成本，因为中间节点是由客户端免费获取的（无需执行PIR）。
- **鲁棒性**：每个描述符数据库块由可信目录权威机构数字签名。这些签名防止恶意PIR服务器欺骗客户端接受虚假信息。然而，这样的恶意服务器仍然可以通过返回垃圾数据或根本不返回响应来拒绝服务。正如我们在接下来的讨论中所述，在CPIR-Tor和ITPIR-Tor中，客户端可以轻松检测到这种攻击并停止使用这些恶意服务器。
  - 在CPIR-Tor中，恶意目录服务器可以修改其自己的描述符数据库副本，以破坏包含许多诚实节点的块，并保留包含协作恶意节点的块的正确签名。检索这些“恶意块”的客户端将成功，但检索“诚实块”的客户端将失败。为了防御这种情况，CPIR-Tor客户端在从某个拜占庭目录服务器接收到一个损坏的块（总共b个请求中的一个）后，应丢弃整个响应，并从不同的服务器重新随机查询所有b个块。还应避免在未来使用该拜占庭服务器。
  - 在ITPIR-Tor中，除非所有三个守护节点串通，否则无法进行选择性破坏攻击。在ITPIR-Tor设置中，拜占庭守护节点可以破坏查询结果，但不能依赖于请求的块。不幸的是，尽管客户端会检测到破坏，但它无法知道哪个守护节点是拜占庭节点。然而，这可以通过使用底层ITPIR协议 [12] 的拜占庭鲁棒性技术来纠正。特别是，接收带有正确签名的块的客户端可以安全地使用这些块。如果有损坏的块，客户端可以通过向其他守护节点扩展对损坏块的查询来识别哪些守护节点是拜占庭节点。当达到三个诚实的守护节点时，尽管客户端事先不知道哪些是诚实的，但拜占庭节点会被识别出来。然而，这可能会导致拜占庭节点（如果有至少三个）知道客户端感兴趣的退出块。因此，客户端不应使用生成的信息来构建电路；而应仅使用它来学习哪些节点是拜占庭节点，从而在未来避免使用它们。
- **其他扩展策略**：Tor项目一直在积极改进其扩展性能。我们现在讨论一些正在考虑的策略，未来可能会实施。
  - 第一种策略是在电路构建过程中按需下载中继描述符 [34]，而不是定期提前获取。按需获取描述符将显著减少Tor中的通信开销。然而，需要注意的是，按需获取描述符并不能满足我们高效电路创建的目标，因为描述符下载会增加电路创建时间。
  - 第二种策略引入了微描述符 [8] 的概念，其中包含很少更改的所有中继描述符字段。所有经常更改的字段都放在网络共识中。客户端频繁下载网络共识文档，但微描述符长期缓存。我们注意到这一提议与我们的架构正交，可以整合到PIR-Tor协议中。在这种情况下，PIR数据库将只包含网络共识信息。由于移除微描述符而导致的PIR数据库大小减少将转化为我们架构中的计算和通信节省。
- **防止DoS攻击的计算谜题**：在我们的架构中，目录服务器作为PIR数据库并执行计算以响应用户查询。这为攻击者提供了通过发送多个PIR查询来对目录服务器发起拒绝服务（DoS）攻击的机会。我们建议使用计算谜题来减轻这种攻击的影响。当目录服务器开始出现计算拥塞时，它会开始向客户端发送计算谜题。客户端解决计算谜题并将解决方案返回给目录服务器。目录服务器验证谜题解决方案后，才会开始花费计算资源处理客户端的PIR查询。
- **周转率的影响**：在当前Tor网络中，随着网络周转率的增加，客户端将不得不更频繁地下载完整的网络共识和中继描述符列表。另一方面，周转率对PIR-Tor的影响最小，因为只有少数目录服务器或守护节点需要更频繁地下载全局视图。实际上，只要数据库更新的频率长于10分钟（目前设置为3小时），我们可以预期客户端PIR查询的数量保持不变。
- **电路数量的影响**：PIR-Tor的通信开销与电路构建次数成正比，因为为了获得最佳安全性，客户端需要为每个电路执行1到2次PIR查询。Tor开发者已经在研究一项提案，为每个应用程序单独建立电路，以防止某些安全问题。