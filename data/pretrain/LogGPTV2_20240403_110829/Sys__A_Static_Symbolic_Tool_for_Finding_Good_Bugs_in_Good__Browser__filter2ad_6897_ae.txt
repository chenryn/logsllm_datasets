but Sys handles it as easily as anything else: simply jump
to the code and check it. As a quick proof of concept, we
wrote a checker for FreeBSD, found two conﬁrmed bugs (no
false positives), and stopped [25, 26]. This also shows that
Sys makes it easy to check system-speciﬁc properties.
For space reasons we give only a brief summary. The
checker traces untrusted values copied from user space, using
the solver to ﬂag errors if (1) an untrusted value used as an
array index can be enormous; or (2) an untrusted value passed
as a size parameter (e.g., to memcpy) could cause overﬂow.
6 Evaluation
In this section, we experimentally compare Sys with state-
of-the-art static analysis and symbolic execution tools (§6.1).
We then describe our experience and the experience of others
/* src/media/muxers/webm_muxer.cc */
/* Tiny  passed to WriteOpusHeader */
303 uint8_t opus_header[OPUS_EXTRADATA_SIZE];
304 WriteOpusHeader(params, opus_header);
/* WriteOpusHeader writes past  */
(cid:44)→
params, uint8_t* header) {
20 void WriteOpusHeader(const media::AudioParameters&
···
···
if (params.channels() > 2) {
41
header[OPUS_EXTRADATA_NUM_COUPLED_OFFSET] = 0;
// Set the actual stream map.
for (int i = 0; i GetColorValue(color);
(cid:44)→
59 nscolor color;
60 bool colorIsSet = colorValue &&
···
156 if (colorIsSet) {
157
158 }
aDecls.SetColorValueIfUnset(eCSSProperty_color, color);
The variable, however, is conditionally initialized on line 60
(in GetColorValue) and only used on 157 if the condition is
true and the initialization routine succeeded. Extending Clang
and Semmle with basic value reasoning can eliminate simple
false positives like this example, but many of the bugs we
analyzed were more complex—and addressing this problem in
general is precisely a symbolic execution task. Alternatively,
we could send Sys down all paths that Clang or Semmle
identify as possibly buggy.
Reasons for false negatives Sys did not identify the two
Semmle bugs or ten of the thirteen Clang bugs. Four were
due to unentered function calls; four appeared beyond Sys’s
block bound; two bugs were optimized away by the compiler;
one looks safe in LLVM IR, so we are waiting for more
information from Firefox developers; and one is very difﬁcult
to map LLVM IR back to source. Based on these results,
we think that it makes sense to (1) enter all function calls
uninitialized variables are passed to and (2) optimize Sys so
that we can increase its block bound on large codebases.
6.1.2 How does Sys compare to symbolic approaches?
To understand the effect of the static analysis pass, we com-
pare Sys with KLEE and angr running in underconstrained
mode [45, 131].9 We use these tools to represent the fully
symbolic approach and the UC approach, respectively.
Firefox We ran angr in its default conﬁguration (but using
underconstrained mode) to detect uninitialized memory in
Firefox. It spent roughly twenty-four hours in a proﬁling
function before we stopped it, and it did not detect any errors.
We did not run KLEE on Firefox largely because our angr
experiment: since UC symbolic execution doesn’t scale to the
browser, full symbolic execution is even less likely to.
9KLEE version 2.0 and angr 8.
210    29th USENIX Security Symposium
USENIX Association
Checker
Uninit
Heap OOB
Concrete OOB
User Input
Total
Static LOC
132
273
148
135
688
Symbolic LOC
106
62
14
13
195
Figure 11: Lines of code for each checker (commit 26d7c7af). The whole
system is 6,042 LOC, not including bindings or the compiler or SMT solver,
and the symbolic execution engine is 2,168 LOC.
SQLite We tried to use KLEE on a smaller part of Firefox:
the SQLite 3.28 database shared library.10 We ran KLEE for
three days, conﬁgured with a symbolic input ﬁle of 4096 bytes
and symbolic stdin of 1024 bytes; we used a large ﬁle because
many bugs (e.g., our malloc bug) require very large tables.
The tool produced 1,419,187 test cases in three days, none
of which exposed errors in SQLite (most yielded malformed
database errors or returned the version number of SQLite).
KLEE is more likely to do well given a smaller input ﬁle or a
partially concrete and partially symbolic ﬁle.
6.2 Experience writing and using checkers
This section describes our experience building and using Sys
and the experience of others using Sys and SysDSL to write
checkers and ﬁnd bugs.
Building and using Sys Although we spent over a year
building early versions of Sys, things moved quickly once
the system was done: the ﬁrst author debugged the system,
wrote every checker, and validated and reported all bugs in
about three months. SysDSL allowed us to experiment with
different ways of expressing checked properties and suppress-
ing false positives over that three-month period: recall that
Section 5.1 and Section 5.2 give examples of false positive
suppressions, while Section 5.4 gives a brief rundown of a
system-speciﬁc checker for FreeBSD. Each static extension is
under 280 lines of code, while each symbolic checker is under
110 (Figure 11). Making a checker typically took a day or two
of writing code, running the checker, tweaking the checker,
re-running the checker, etc.—and initial results were fast. For
example, we found a CVE in a few minutes the ﬁrst time we
ran the uninitialized memory checker (on the Prio library [3]).
The largest time sinks were: (1) writing up bug reports
for browser developers to read and (2) coming up with and
implementing false positive suppression heuristics. We dis-
cussed the latter in Section 5. For the former: Sys automati-
cally indicates the exact line on which the bug appears. Using
LLVM’s debug information, we determined which line this
corresponded to in the browser source code, and tried to ﬁgure
out if the bug seemed real. Then, for each real bug, we wrote
a report explaining that bug, sent it to browser developers, and
then communicated with those developers about the details
of the report.
10We tried angr on SQLite, too, but ran into implementation bugs (likely
because our use case is not what the tool is actually used for).
Writing checkers To understand the challenges of writing
checkers with SysDSL, we report on the experience of the
second author of this paper writing their ﬁrst Sys checker.
Their task was to write a checker that could identify simple
use-after-free bugs.
The overall effort took three work days, including testing
and running the checker on FreeBSD and Firefox. The author
used the uninit and user-input checkers as a reference to im-
plement both the static extension and symbolic checker. The
static extension tracks freed variables (and their aliases), and
ﬂags any uses (operands to load and store, and arguments to
function calls). The symbolic checker sets the shadow bits on
free, and checks if any shadow bits are set on load, store, and
call. The false-positive suppression ignores UAFs in reference
counting code.
The ﬁnal checker (110 LOC extension, 80 LOC symbolic)
ﬂagged a true positive bug in Firefox (in the HarfBuzz text
shaping engine), which was ﬁxed within a few hours of our
report [14]. Sys also ﬂagged a false positive in FreeBSD: a
call with a dangling pointer argument where the called func-
tion did not dereference the dangling pointer. Since passing
dangling pointers across function boundaries is almost always
an error, we will report this bug as well.
This qualitative checker-writing experiment revealed two
challenges. First, Sys needs utilities to more easily inspect
shadow memory; this could have simpliﬁed debugging the
UAF checker—and any other checkers that rely on shadow
memory. Second, Sys needs an interactive (mixed LLVM
and source) interface to simplify the task of conﬁrming true
positives. We consider these improvements future work.
Using Sys to check other systems Though we explicitly
designed Sys to be extensible, existing Sys checkers can be
used without modiﬁcation, too. For example, the program
analysis team at a large company used Sys to check their
custom operating system, which has been analyzed and tested
for seven years since its initial release. The team found three
heap out bounds bugs within a week or two of receiving
the tool. They also found a bug in our checker—speciﬁcally
our calloc implementation—that was the source of a false
positive. Finally, they identiﬁed similar challenge to our UAF
experiment: some of the checkers’ outputs were confusing
(e.g., at that time, our checkers had different output formats).
6.3 Micro experiments