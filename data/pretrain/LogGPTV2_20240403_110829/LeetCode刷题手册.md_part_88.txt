if idx != right-l { 
idx := find(A, right)
r-
1++
 return i 
ans = append(ans, idx+1, right)
reverse969(A, 0, right-1) 
reverse969(A, 0, idx) 
---
## Page 924
代码
解题思路
你的回答中，每个值最多出现一次。
是一个强整数。返回值小于或等于bound 的所有强整数组成的列表。你可以按任何顺序返回答案。在
给定两个正整数×和y，如果某一整数等于xi+yj，其中整数i>=0且j>= 0，那么我们认为该整数
题目大意
Note:
Example 2: 
 Example 1: 
You may return the answer in any order. In your answer, each value should occur at most once.
 Return a list of all powerful integers that have value less than or equal to bound.
·简答题，题目要求找出满足xi+y^j bound 条件的所有解。题目要求输出中不能重复，所
import "math"
package leetcode
●0 y{
if !found {
for j := O; pow(x, i)+pow(y，j) A[i-2]] &&(A[i]+A[i-2] >A[i-1]） & (A[i-2]+A[i-1] >
 return 0
return A[i]+A[i-1]+A[i-2]
---
## Page 929
代码
成了。
两者大小，大的放在最终数组的后面。然后大的一个指针移动。直至两个指针相撞，最终数组就排列完
从数组的最后一位开始排列最终数组。用2个指针分别指向原数组的首尾，分别计算平方值，然后比较
最终返回的数组，最后一位，是最大值，这个值应该是由原数组最大值，或者最小值得来的，所以可以
这一题由于原数组是有序的，所以要尽量利用这一特点来减少时间复杂度。
解题思路
方得到的。
给一个已经有序的数组，返回的数组也必须是有序的，且数组中的每个元素是由原数组中每个数字的平
题目大意
Note:
 3. A is sorted in non-decreasing order.
import "sort"
package leetcode
2. -10000A[j]*A[j]
} else{
ans[k] = A[j] * A[j]
ans[k] = A[i] * A[i]
i++ 
Y
---
## Page 930
Example 3: 
 Example 2:
Example 1: 
Return the length of a maximum size turbulent subarray of A.
elements in the subarray.
That is, the subarray is turbulent if the comparison sign flips between each adjacent pair of 
A subarray A[i] , A[i+1], ..., A[j] of A is said to be turbulent if and only if:
题目
978. Longest Turbulent Subarray.
Note:
Output:1
Output:2
● OR, for i  A[k+1] when k is even, and A[k]  A[k+1] when k is odd, and A[k] A[2] A[4] A[k+1] ，且当k为奇数时，A[k]A[k+1]，且当 k为偶数时，A[k] A[i] {
if A[i-1]  ! 
} else{ 
 return 1
if right != left && flag != 0 {
flag = lastNum - A[right]
left++
lastNum = A[right] 
right++ 
---
## Page 933
Example 2:
and one coin to its right child.
Explanation: From the root of the tree, we move one coin to its left child,
Input: [3,0,0]
Output:2
3
3
---
## Page 934
Example 4:
Example 3: 
Output:2
Input: [1,0,2]
right child.
[taking two moves].
 e  5         1  e 
Output:3
Input: [0,3,0] 
Then, we move one coin from the root of the tree to the
7
---
## Page 935
解题思路
提示：
枚硬币所需的移动次数。
一个结点。(移动可以是从父结点到子结点，或者从子结点移动到父结点。)。返回使每个结点上只有一
有 枚硬币。在一次移动中，我们可以选择两个相邻的结点，然后将一枚硬币从其中一个结点移动到另
给定一个有 N个结点的二叉树的根结点root，树中的每个结点上都对应有 node.val 枚硬币，并且总共
题目大意
Note:
2. 0 <= node.val <= N 
1. 1<=N <= 100 
2. 0 <= node.val <= N
1. 1<= N <= 100
Output: 4 
Input: [1,0,0,null,3]
---
## Page 936
代码
·所以每个节点移动的步数应该是left+right + root.val－1。最后递归求解即可。
·给出一棵树，有N个节点。有N个硬币分散在这N个节点中，问经过多少次移动以后，所有节点
func distributeCoins(root *TreeNode) int { 
package leetcode
abs(3) + abs(-1)
●
distributeCoinsDFs(root, &res)
 Definition for a binary tree root.
return res
res:=0
孩子给了 3 枚，右孩子需要1枚，自己本身还要留一枚，所以最终还能剩1 枚。
枚的节点记为 n-1，没有硬币的节点记为-1。例如，下图中左下角的3 个节点，有 4 枚硬币的
根节点和两个孩子。在这种情况下，3个节点谁的硬币多就可以分给没有硬币的那个节点，这种移
这一题乍一看比较难分析，仔细一想，可以用贪心和分治的思想来解决。一个树的最小单元是一个
都有一枚硬币。
type TreeNode struct {
节点可以送出3 枚硬币，叶子节点有〇 枚硬币的节点需要接收1枚硬币。根节点有〇枚硬币，左
moves+=
树从最下一层开始往上推，逐步从下往上把硬币移动上去，直到最后根节点也都拥有硬币。多余1
动方法也能保证移动步数最少。不难证明，硬币由相邻的节点移动过来的步数是最少的。那么一棵
return 0
Right *TreeNode
Left *TreeNode
Val int 
moves += abs(1)
4
+3
0
-1
0
+1
moves == 8
0
3
+2
moves += abs(0)
0
-1
0
abs(2) + abs(-1)
moves+=
---
## Page 937
Example 3: 
Example 2: 
Example 1:
walk over every non-obstacle square exactly once.
 Return the number of 4-directional walks from the starting square to the ending square, that 
 On a 2-dimensional grid, there are 4 types of squares: