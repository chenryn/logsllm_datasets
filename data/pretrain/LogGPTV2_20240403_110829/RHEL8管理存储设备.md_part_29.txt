-   更改卷密钥
-   更改加密算法
:::
加密非加密设备时，您仍然必须卸载该文件系统。您可以在简短初始化加密后重新挂载文件系统。
LUKS1 格式不支持在线重新加密。
::: title
**转换**
:::
LUKS2 格式由 LUKS1 实现。在某些情况下，您可以将 LUKS1 转换为
LUKS2。在以下情况下无法进行转换：
::: itemizedlist
-   LUKS1 设备被标记为由基于策略的解密(PBD -
    Clevis)解决方案使用。当检测到一些 `luksmeta`{.literal}
    元数据时，`cryptsetup`{.literal} 工具会拒绝转换设备。
-   设备正在活跃。该设备必须处于不活跃状态，才能进行转换。
:::
:::
::: section
::: titlepage
# []{#encrypting-block-devices-using-luks_managing-storage-devices.html#options-for-data-protection-during-luks2-re-encryption_encrypting-block-devices-using-luks}LUKS2 重新加密过程中数据保护选项 {.title}
:::
LUKS2 提供了几个选项，在重新加密过程中优先选择性能或数据保护：
::: variablelist
[`checksum`{.literal}]{.term}
:   这是默认的模式。它在数据保护和性能之间取得平衡。
    这个模式将单独的扇区校验和保存在重新加密区域,因此恢复过程可以检测哪些
    LUKS2 扇区已经重新加密。模式要求块设备扇区写入具有"原子"性。
[`journal`{.literal}]{.term}
:   这是最安全的模式，也是速度最慢的模式。此模式记录二进制区域中的再加密区域，因此
    LUKS2 将数据写入两次。
[`none`{.literal}]{.term}
:   此模式优先选择性能，不提供数据保护。它只保护数据，以防止安全进程终止，如
    `SIGTERM`{.literal} [**Ctrl**]{.keycap}+[**C
    的用户**]{.keycap}。任何意外的系统崩溃或应用程序崩溃都可能会导致数据崩溃。
:::
您可以使用 `cryptsetup`{.literal} 的 `--resilience`{.literal}
选项来选择模式。
如果 LUKS2 重新加密进程意外终止了强制终止，LUKU2
可使用以下方法之一执行恢复：
::: itemizedlist
-   自动执行下一个 LUKS2 设备打开操作。此操作由
    `cryptsetup open`{.literal} 命令触发，或者通过将设备附加到
    `systemd-cryptsetup`{.literal} 触发。
-   在 LUKS2 设备中使用 `cryptsetup repair`{.literal} 命令手动手动。
:::
:::
::: section
::: titlepage
# []{#encrypting-block-devices-using-luks_managing-storage-devices.html#encrypting-existing-data-on-a-block-device-using-luks2_encrypting-block-devices-using-luks}使用 LUKS2 加密块设备上的现有数据 {.title}
:::
这个过程使用 LUKS2 格式加密设备中的数据。新的 LUKS
标头保存在设备的标头中。
::: itemizedlist
**先决条件**
-   块设备包含一个文件系统。
-   已备份了数据。
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    在加密过程中可能会丢失您的数据：由于硬件、内核或人为故障。在开始加密数据之前，请确保您有可靠的备份。
    :::
:::
::: orderedlist
**流程**
1.  卸载您要加密的设备中的所有文件系统。例如：
    ``` screen
    # umount /dev/sdb1
    ```
2.  为存储 LUKS 标头腾出空间。选择适合您的场景的以下选项之一：
    ::: itemizedlist
    -   如果是加密逻辑卷，您可以扩展逻辑卷而不重新定义文件系统大小。例如：
        ``` screen
        # lvextend -L+32M vg00/lv00
        ```
    -   使用分区管理工具（如 `parted`{.literal} ）扩展分区。
    -   缩小该设备的文件系统。您可以将 `resize2fs`{.literal} 工具用于
        ext2、ext3 或 ext4 文件系统。请注意，您无法缩小 XFS 文件系统。
    :::
3.  初始化加密。例如：
    ``` screen
    # cryptsetup reencrypt \ --encrypt \ --init-only \ --reduce-device-size 32M \ /dev/sdb1 sdb1_encrypted
    ```
    该命令会要求您输入密码短语并启动加密过程。
4.  挂载该设备：
    ``` screen
    # mount /dev/mapper/sdb1_crypt /mnt/sdb1_encrypted
    ```
5.  启动在线加密：
    ``` screen
    # cryptsetup reencrypt --resume-only /dev/sdb1
    ```
:::
::: itemizedlist
**其它资源**
-   `cryptsetup(8)`{.literal}、`lvextend(8)`{.literal}、`resize2fs(8)`{.literal}
    和 `parted(8)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#encrypting-block-devices-using-luks_managing-storage-devices.html#encrypting-existing-data-on-a-block-device-using-luks2-with-a-detached-header_encrypting-block-devices-using-luks}使用带有分离标头的 LUKS2 加密块设备上的现有数据 {.title}
:::
此流程加密块设备中的现有数据，而不为存储 LUKS
标头创建可用空间。标头存储在分离的位置，它也充当额外的安全层。该流程使用
LUKS2 加密格式。
::: itemizedlist
**先决条件**
-   块设备包含一个文件系统。
-   已备份了数据。
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    在加密过程中可能会丢失您的数据：由于硬件、内核或人为故障。在开始加密数据之前，请确保您有可靠的备份。
    :::
:::
::: orderedlist
**流程**
1.  卸载该设备中的所有文件系统。例如：
    ``` screen
    # umount /dev/sdb1
    ```
2.  初始化加密：
    ``` screen
    # cryptsetup reencrypt \ --encrypt \ --init-only \ --header /path/to/header \ /dev/sdb1 sdb1_encrypted
    ```
    将 [*/path/to/header*]{.emphasis} 替换为使用分离的 LUKS
    标头指向该文件的路径。必须可以访问分离的 LUKS
    标头，以便稍后可以解锁加密的设备。
    该命令会要求您输入密码短语并启动加密过程。
3.  挂载该设备：
    ``` screen
    # mount /dev/mapper/sdb1_crypt /mnt/sdb1_encrypted
    ```
4.  启动在线加密：
    ``` screen
    # cryptsetup reencrypt --resume-only --header /path/to/header /dev/sdb1
    ```
:::
::: itemizedlist
**其它资源**
-   `cryptsetup(8)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#encrypting-block-devices-using-luks_managing-storage-devices.html#encrypting-a-blank-block-device-using-luks2_encrypting-block-devices-using-luks}使用 LUKS2 加密空白块设备 {.title}
:::
此流程提供有关使用 LUKS2 格式加密空白块设备的信息。
::: itemizedlist
**先决条件**
-   空白块设备。
:::
::: orderedlist
**流程**
1.  将分区设置为加密的 LUKS 分区：
    ``` screen
    # cryptsetup luksFormat /dev/sdb1
    ```
2.  打开加密的 LUKS 分区：
    ``` screen
    # cryptsetup open /dev/sdb1 sdb1_encrypted
    ```
    这样可解锁分区并使用设备映射器将其映射到新设备中。这个提示提示内核
    `device`{.literal} 是一个加密设备，应该使用
    `/dev/mapper/device_mapped_name`{.literal} 通过 LUKS
    来解决，而不是覆盖加密的数据。
3.  要向分区写入加密的数据，必须通过设备映射名称进行访问。为此，您必须创建一个文件系统。例如：
    ``` screen
    # mkfs -t ext4 /dev/mapper/sdb1_encrypted
    ```
4.  挂载该设备：
    ``` screen
    # mount /dev/mapper/sdb1_encrypted mount-point
    ```
:::
::: itemizedlist
**其它资源**
-   `cryptsetup(8)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#encrypting-block-devices-using-luks_managing-storage-devices.html#proc_creating-a-luks-encrypted-volume-using-the-storage-role_encrypting-block-devices-using-luks}使用存储角色创建 LUKS 加密卷 {.title}
:::
您可以通过运行 Ansible playbook，使用 `storage`{.literal}
角色创建并配置使用 LUKS 加密的卷。
::: itemizedlist
**先决条件**
-   您已在要运行 playbook 的系统中安装了 Red Hat Ansible Engine。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    您不必在要创建卷的系统中安装 Red Hat Ansible Automation Platform。
    :::
-   您已在 Ansible 控制器上安装了 `rhel-system-roles`{.literal} 软件包。
-   您有一个清单文件详细描述了您要使用存储系统角色部署 LUKS
    加密卷的系统。
:::
::: orderedlist
**流程**
1.  使用以下内容 `playbook.yml`{.literal} 创建新文件：
    ``` screen
    - hosts: all
      vars:
        storage_volumes:
          - name: barefs
            type: disk
            disks:
             - sdb
            fs_type: xfs
            fs_label: label-name
            mount_point: /mnt/data
            encryption: true
            encryption_password: your-password
      roles:
       - rhel-system-roles.storage
    ```
2.  可选：验证 playbook 语法：
    ``` screen
    # ansible-playbook --syntax-check playbook.yml
    ```
3.  在清单文件上运行 playbook:
    ``` screen
    # ansible-playbook -i inventory.file /path/to/file/playbook.yml
    ```
:::
::: itemizedlist
**其它资源**
-   [使用 LUKS
    加密块设备](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/managing_storage_devices/encrypting-block-devices-using-luks_managing-storage-devices){.link}
-   `/usr/share/ansible/roles/rhel-system-roles.storage/README.md`{.literal}
    file
:::
:::
:::
[]{#managing-tape-devices_managing-storage-devices.html}
::: chapter
::: titlepage
# []{#managing-tape-devices_managing-storage-devices.html#managing-tape-devices_managing-storage-devices}第 19 章 管理磁带设备 {.title}
:::
磁带设备是保存数据并按顺序访问的磁带。使用磁带驱动器将数据写入此磁带设备。不需要创建文件系统来存储磁带设备中的数据。磁带驱动器可以通过各种接口（如
SCSI、FC、USB、SATA 和其他接口）连接到主机计算机。
以下是不同类型的磁带设备：
::: itemizedlist
-   `/dev/st`{.literal} 是一个递归磁带设备。
-   `/dev/nst`{.literal}
    是一个非缓解的磁带设备。使用非缓解设备进行日常备份。
:::
磁带设备的优点：
::: itemizedlist
-   性价比高
-   对数据崩溃具有弹性
-   数据保留
-   稳定
:::
::: section
::: titlepage
# []{#managing-tape-devices_managing-storage-devices.html#installing-tape-drive-management-tool_managing-tape-devices}安装磁带驱动器管理工具 {.title}
:::
使用 `mt`{.literal} 命令返回数据。`mt`{.literal}
工具控制磁带驱动器操作，`st`{.literal} 工具用于 SCSI
磁带驱动程序。这个步骤描述了如何为磁带驱动器操作安装 `mt-st`{.literal}
软件包。
::: itemizedlist
**流程**
-   安装 `mt-st`{.literal} 软件包：
    ``` screen
    # yum install mt-st
    ```
:::