o
e
p
i
z
g
y
t
f
a
r
c
x
e
t
r
o
v
k
c
a
r
t
x
i
s
c
e
r
e
c
a
f
e
s
i
w
p
u
w
p
i
z
b
i
s
p
a
y
t
f
a
r
c
n
o
e
p
i
z
g
x
e
t
r
o
v
k
c
a
r
t
x
i
s
e
g
a
r
e
v
a
FIGURE 5: Percent of issue cycles with trailing-
trailing and leading-trailing interference.
FIGURE 6: Percentage of issue cycles when all 
instructions issued are from the same context.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:37:04 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007 
0
100
80
60
40
20
e
k
a
u
q
e
i
m
w
s
t
r
a
d
i
r
g
m
u
l
p
p
a
d
3
a
m
f
c
c
g
)
%
(
e
c
n
a
m
r
o
f
r
e
P
d
e
z
i
l
a
m
r
o
N
SRT
BlackJack-NS
BlackJack
i
s
p
a
y
t
f
a
r
c
n
o
e
p
i
z
g
x
e
t
r
o
v
p
i
z
b
c
e
r
e
c
a
f
e
s
i
w
p
u
w
k
c
a
r
t
x
i
s
e
g
a
r
e
v
a
FIGURE 7: Performance of SRT, BlackJack with no 
shuffle (BlackJack-NS) and Blackjack. 
These  slowdowns  represent  a  15%  slowdown  for  BlackJack
beyond SRT. 
The  difference  between  BlackJack-NS  and  BlackJack  repre-
sents  the  performance  degradation  due  to  the  cases  where  safe-
shuffle’s greedy algorithm sometimes splits packets for high cov-
erage. BlackJack-NS never splits packets (and never shuffles) and
so it is able to issue a greater number of instructions per cycle (but
has low coverage). Averaged across all benchmarks, adding shuf-
fle in BlackJack results in a 5% slowdown over BlackJack-NS. If
BlackJack were to have an ideal shuffle algorithm that provided
good  coverage  without  ever  splitting  packets,  BlackJack  would
incur a 10% slowdown over SRT. Better shuffle algorithms may be
able to approach this 10% slowdown. 
This remaining difference between BlackJack-NS and SRT is
due  to  BlackJack’s  policy  of  fetching  only  a  single  packet  per
cycle. This policy prevents co-issue of multiple trailing packets.
This prevention is a simple method for reducing trailing-trailing
interference (as seen in Figure 5) but comes at the cost of perfor-
mance.  Trailing-trailing  interference  is  often  good  for  perfor-
mance,  allowing  two  or  more  small  packets  that  took  multiple
cycles to issue in the leading thread to be combined into one large
packet  issuing  in  a  single  cycle.  Combining  two  such  packets
while  maintaining  spatial  diversity  requires  that  the  packets  are
known to be independent. For simplicity, BlackJack’s shuffle algo-
rithm  and  fetch  policy  assumes  all  leading  instruction  not  co-
issued in the same cycle may have dependencies. It is important to
note that all information about the dependencies between packets
is available for shuffle to borrow from the leading thread. Hence it
is possible for a more complex shuffle algorithms to use this addi-
tional information to close the gap between BlackJack and SRT. 
7  Conclusions
This  paper  presents  BlackJack;  a  microarchitecture  that
addresses the increasing difficulty of test. With smaller and faster
devices,  tolerance  for  errors  are  shrinking  and  devices  may  act
correctly under certain condition and not under others. As such,
hard  errors  may  exist  but  are  only  exercised  by  very  specific
machine state and signal pathways. In addition new complications
with burn-in may mean that latent hard errors are not exposed in
the fab and reach the customer before becoming active.
BlackJack  provides  a  safety  net  that  detects  hard  errors  (in
addition to soft errors) that are exposed by a program at runtime. 
Averaged across all benchmarks, BlackJacks incurs a 15% per-
formance  penalty  when  compared  to  SRT.  In  exchange  for  this
degradation,  BlackJack  provides  97%  instruction  coverage  of
pipline hard errors compared to SRT’s 34%. 
[16] 
[17] 
[18] 
8  References
[1] 
, February 2006.
, pages 197–208, 2005.
T. M. Austin. Diva: a reliable substrate for deep submicron mi-
MICRO 32: Proceedings of the 32nd an-
croarchitecture design. In 
nual ACM/IEEE international symposium on Microarchitecture
,
pages 196–207, 1999.
D. C. Bossen, A. Kitamorn, K. F. Reick, and M. S. Floyd. Fault-
tolerant design of the IBM pSeries 690 system using the POWER4
IBM Journal of Research and Development
processor technology. 
,
46(1), 2002.
F. A. Bower, D. J. Sorin, and S. Ozev. A mechanism for online di-
MICRO 38: Proceed-
agnosis of hard faults in microprocessors. In 
ings of the 38th annual IEEE/ACM International Symposium on
Microarchitecture
D. Burger, T. M. Austin, and S. Bennett. Evaluating future micro-
processors: The simplescalar tool set. Technical Report CS-TR-
1996-1308, University of Wisconsin, 1996.
K. Constantinides,  S. Plaza,  J. Blome,  B. Zhang,  V. Bertacco,
S. Mahlke, T. Austin, and M. Orshansky. Bulletproof: A defect-
Proceedings of the 12th Inter-
tolerant cmp switch architecture. In 
national  Symposium  on  High-Performance  Computer  Architec-
ture (HPCA-12)
M. Gomaa,  C. Scarbrough,  T. N.  Vijaykumar,  and  I. Pomeranz.
ISCA  ’03:
Transient-fault  recovery  for  chip  multiprocessors.  In 
Proceedings of the 30th annual international symposium on Com-
puter architecture
W. Maly,  A. Gattiker,  T. Zanon,  T. Vogels,  R. D.  Blanton,  and
T. Storey. Deformations of IC structure in test and yield learning.
In 
M. Meterelliyoz,  H. Mahmoodi,  and  K. Roy.  A  leakage  control
International
system for thermal stability during burn-in test. In 
Test Conference (ITC)
S. S. Mukherjee, M. Kontz, and S. K. Reinhardt. Detailed design
ISCA
and evaluation of redundant multithreading alternatives. In 
’02: Proceedings of the 29th annual international symposium on
Computer architecture
S. K. Reinhardt and S. S. Mukherjee. Transient fault detection via
ISCA ’00: Proceedings of the 27th
simultaneous multithreading. In 
annual international symposium on Computer architecture
, pages
25–36. ACM Press, 2000.
E. Schuchman  and  T. N.  Vijaykumar.  Rescue:  A  microarchitec-
ISCA ’05: Proceedings
ture for testability and defect tolerance. In 
of the 32nd Annual International Symposium on Computer Archi-
tecture
F. F. Sellers, M. yue Hsiao, and L. W. Bearnson. 
Logic for Digital Computers
. McGraw-Hill, 1968.
International Test Conference (ITC)
, pages 98–109. ACM Press, 2003.
, pages 160–171, 2005.
, November 2005.
Error Detecting
, 2003.
, 2002.
[2] 
[3] 
[4] 
[5] 
[6] 
[7] 
[8] 
[9] 
[10] 
[11] 
[12] 
[14] 
[13]  O. Semenov, A. Vassighi, M. Sachdev, A. Keshavarzi, and C. F.
Hawkins. Effect of cmos technology scaling on thermal manage-
IEEE Transactions on Semiconductor Man-
ment during burn-in. 
ufacturing
T. Sherwood, E. Perelman, G. Hamerly, and B. Calder. Automati-
Proceedings
cally characterizing large scale program behavior. In 
of the 10th International Conference on Architectural Support for
Programming Languages and Operating Systems
Stan,  W. Huang, 
[15]  K. Skadron,  M. R. 
, 16(4), 2003.
, Oct. 2002.
, 2003.
S. Velusamy,
K. Sankaranarayanan,  and  D. Tarjan.  Temperature-aware  mi-
Proceedings of the 30th Annual International
croarchitecture. In 
Symposium on Computer Architecture
J. Srinivasan,  S. V.  Adve,  P. Bose,  and  J. A.  Rivers.  Exploiting
ISCA
structural duplication for lifetime reliability enhancement. In 
’05: Proceedings of the 32nd Annual International Symposium on
Computer Architecture
T. N. Vijaykumar, I. Pomeranz, and K. Cheng. Transient-fault re-
Proceedings of the
covery using simultaneous multithreading. In 
29th annual international symposium on Computer architecture
,
pages 87–98, 2002.
E. Weglarz, K. Saluja, and T. M. Mak. Testing of hard faults in si-
Proceeding of the 10th
multaneous multi-threaded processors. In 
IEEE International On-Line Testing Symposium
, pages 520–531, 2005.
, 2004.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:37:04 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007