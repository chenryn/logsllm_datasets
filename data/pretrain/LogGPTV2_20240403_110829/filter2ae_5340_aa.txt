注意：此帖与先前的Chrome扩展漏洞略有不同。我在文中实际展示了漏洞利用的代码，并分析如何通过扩展程序进行跟踪。
在扫描各种Chrome扩展程序时，我发现流行的Chrome扩展程序视频下载程序适用于`Chrome 5.0.0.12`版（820万用户）和`Video
Downloader
Plus`（730万用户）并在浏览器操作中遇到了`XSS`漏洞页。要做到利用这些扩展插件，我们只需要让受害者导航到攻击者控制的页面即可。
导致此漏洞的原因是使用了字符串连接来构建`HTML`，该`HTML`通过`jQuery`动态附加到`DOM`中。攻击者可以创建一个专门的链接，并在扩展的上下文中执行任意`JavaScript`。利用此漏洞，攻击者可以滥用扩展程序并获得以下权限：
    "permissions": [
        "alarms",
        "contextMenus",
        "privacy",
        "storage",
        "cookies",
        "tabs",
        "unlimitedStorage",
        "webNavigation",
        "webRequest",
        "webRequestBlocking",
        "http://*/*",
        "https://*/*",
        "notifications"
    ],
利用上述权限，攻击者可以转储浏览器的`cookie`并拦截所有浏览器请求，之后经过身份验证的用户将与所有站点进行通信。
### 漏洞详情
此漏洞的核心是以下代码：
    vd.createDownloadSection = function(videoData) {
        return ' \
             \
            ' + videoData.fileName + ' \
            Download - ' + Math.floor(videoData.size * 100 / 1024 / 1024) / 100 + ' MB\
            \
            ';
    };
这是一个教科书的`XSS`攻击的代码的示例。 扩展程序从我们的攻击者控制页面中提取这些视频链接，并直接对其进行利用。
然而，正如例子演示的情况一样，现实世界的情况要复杂得多。 这篇文章将介绍一些防御模块，并展示它们是如何被绕过的。 我们将从输入的位置开始，并进行功能追踪。
### 路径详情
该扩展程序使用脚本从页面链接（标签）和视频（标签）中收集可能的视频`URL`。
脚本使用了`JavaScript`代码。在运行用户访问过的浏览器页面后，我们得到了扩展程序的内容脚本：
    vd.getVideoLinks = function(node) {
        // console.log(node);
        var videoLinks = [];
        $(node)
            .find('a')
            .each(function() {
                var link = $(this).attr('href');
                var videoType = vd.getVideoType(link);
                if (videoType) {
                    videoLinks.push({
                        url: link,
                        fileName: vd.getLinkTitleFromNode($(this)),
                        extension: '.' + videoType
                    });
                }
            });
        $(node)
            .find('video')
            .each(function() {
                // console.log(this);
                var nodes = [];
                // console.log($(this).attr('src'));
                $(this).attr('src') ? nodes.push($(this)) : void 0;
                // console.log(nodes);
                $(this)
                    .find('source')
                    .each(function() {
                        nodes.push($(this));
                    });
                nodes.forEach(function(node) {
                    var link = node.attr('src');
                    if (!link) {
                        return;
                    }
                    var videoType = vd.getVideoType(link);
                    videoLinks.push({
                        url: link,
                        fileName: vd.getLinkTitleFromNode(node),
                        extension: '.' + videoType
                    });
                });
            });
        return videoLinks;
    };
从上面的代码中可以发现`videoLinks`和视频元素，并且在请求返回之前将信息收集到`videoLinks`数组中。
我们控制的`videoLinks`元素属性是`url`（从`href`属性中提取）和`fileName`（通过获取`title`属性、`alt`属性或节点的内部文本来拉取）。
由函数`vd.findVideoLinks`调用：
    vd.findVideoLinks = function(node) {
        var videoLinks = [];
        switch (window.location.host) {
            case 'vimeo.com':
                vd.sendVimeoVideoLinks();
                break;
            case 'www.youtube.com':
                break;
            default:
                videoLinks = vd.getVideoLinks(node);
        }
        vd.sendVideoLinks(videoLinks);
    };
此调用发生在页面的加载过程：
    vd.init = function() {
        vd.findVideoLinks(document.body);
    };
    vd.init();
获取到所有的链接后，它们将通过`vd.sendVideoLinks`函数并发送到扩展程序的后台页面。 以下是在扩展的后台页面中声明的消息监听器：
    chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
        switch (request.message) {
            case 'add-video-links':
                if (typeof sender.tab === 'undefined') {
                    break;
                }
                vd.addVideoLinks(request.videoLinks, sender.tab.id, sender.tab.url);
                break;
            case 'get-video-links':
                sendResponse(vd.getVideoLinksForTab(request.tabId));
                break;
            case 'download-video-link':
                vd.downloadVideoLink(request.url, request.fileName);
                break;
            case 'show-youtube-warning':
                vd.showYoutubeWarning();
                break;
            default:
                break;
        }
    });
我们的例子关于`add-video-links`选项。在例子中，我们的`send.tab`没有未定义，因此它调用`vd.addVideoLinks`并删除之前删除的视频链接。
以下是`addVideoLinks`的代码：
    vd.addVideoLinks = function(videoLinks, tabId, tabUrl) {
        ...trimmed for brevity...
        videoLinks.forEach(function(videoLink) {
            // console.log(videoLink);
            videoLink.fileName = vd.getFileName(videoLink.fileName);
            vd.addVideoLinkToTab(videoLink, tabId, tabUrl);
        });
    };
上面的代码检查它是否已经存储了此`tabId`的链接数据。 如果不是，它会创建一个新对象。
每条链接数据的`fileName`属性并通过`vd.getFileName`函数运行，该函数包括以下代码：
    vd.getFileName = function(str) {
        // console.log(str);
        var regex = /[A-Za-z0-9()_ -]/;
        var escapedStr = '';
        str = Array.from(str);
        str.forEach(function(char) {
            if (regex.test(char)) {
                escapedStr += char;
            }
        });
        return escapedStr;
    };
上述函数通过链接数据的`fileName`属性破坏了获取`DOM-XSS`的机会。 它将删除任何与正则表达式`[A-Za-z0-9()_
-]`不匹配的字符，但是其并不包括用于连接HTML中的属性的字符`"`。
`videoLink`被发送到`vd.addVideoLinkToTa`b函数，该函数如下：
    vd.addVideoLinkToTab = function(videoLink, tabId, tabUrl) {
        ...trimmed for brevity...
        if (!videoLink.size) {
            console.log('Getting size from server for ' + videoLink.url);
            vd.getVideoDataFromServer(videoLink.url, function(videoData) {
                videoLink.size = videoData.size;
                vd.addVideoLinkToTabFinalStep(tabId, videoLink);
            });
        } else {
            vd.addVideoLinkToTabFinalStep(tabId, videoLink);
        }
    };
该脚本检查数据是否具有`size`属性。在未设置大小的情况下，它通过`vd.getVideoDataFromServer`获取链接位置处文件的大小：
    vd.getVideoDataFromServer = function(url, callback) {
        var request = new XMLHttpRequest();
        request.onreadystatechange = function() {
            if (request.readyState === 2) {
                callback({
                    mime: this.getResponseHeader('Content-Type'),
                    size: this.getResponseHeader('Content-Length')
                });
                request.abort();
            }
        };
        request.open('Get', url);
        request.send();
    };
上面的代码只是触发`XMLHTTPRequest`请求以获取指定链接上的文件头，并提取`Content-Type`和`Content-Length`头。
返回此数据，`Content-Length`标头的值用于设置`videoLinks`元素的`size`属性。
完成此操作后，结果将传递给`vd.addVideoLinkToTabFinalStep`：
    vd.addVideoLinkToTabFinalStep = function(tabId, videoLink) {
        // console.log("Trying to add url "+ videoLink.url);
        if (!vd.isVideoLinkAlreadyAdded(
                vd.tabsData[tabId].videoLinks,
                videoLink.url