    1080  _newselect(32, [8 10], [], NULL, {0, 959999}) = 0 (Timeout)
    1080  gettimeofday({501, 278401}, NULL) = 0
    1080  socket(AF_INET, SOCK_STREAM, IPPROTO_TCP) = 11
    1080  ioctl(11, FIONBIO, [1]) = 0
    1080  connect(11, {sa_family=AF_INET, sin_port=htons(1055), sin_addr=inet_addr("80.87.205.92")}, 16) = -1 ENETUNREACH (Network is unreachable)
    1080  close(11)         = 0
    1080  write(0, "GET /getcmds?bid=notgenerated HTTP/1.1rnConnectio
为了理解恶意程序是怎么工作的，我们把人工和动态分析进行结合。是时候使用IDA pro进行分析二进制文件了。
二进制文件是精简的， IDA pro 一开始没有分析出ARMEB的常用函数调用。我们可以使用
[@matalaz](https://github.com/joxeankoret/diaphora)'s
[diaphora](https://github.com/joxeankoret/diaphora)
的diffing插件来得到所有的符号而不是话费数小时进行手工检查。
首先导出 uClibc的Puma5工具链的符号。 从[这里](https://github.com/bmaia/cross-utils/blob/master/armeb/puma5_toolchain/armeb-linux.tar.xz)下载预编译的工具链，使用IDA
pro打开 “armeb-linuxti-puma5liblibuClibc-0.9.29.so”库文件。 选择 FIle/Script(ALT+F7),
加载diaphora.py， 选择一个位置将IDA数据库导出成SQLite格式， 选择Export only non-IDA generated
functions然后点击 OK。
当完成后，关闭当前IDA 数据库， 打开arm_puma5二进制文件。再次运行diaphora.py脚本，选择SQLite数据库进行比较
过一会后，会显示连个数据库中各种不能匹配的函数的选项，比如“Best”“Partial”和“ Unreliable”匹配项。
浏览“Best matches”项，右击列表然后选择“Import *all* functions”，然后结束后选择不重新启动比较进程。前往“Partial
matches”项，删除所有比例比较低的(我把低于0.8的都删掉了)，右击列表选择”Import all data for sub_* function"。
IDA的 string窗口显示很多和Lua脚本语言相关的信息。
因此，我也交叉编译了一份[Lua的ARMEB版本](https://github.com/bmaia/cross-utils/tree/master/armeb/lua),将 lua二进制载入IDA
pro，重复和[diaphora](https://github.com/joxeankoret/diaphora)的比较过程。
差不多完成了，如果你google一些调试信息的话，你会找到一份删除的粘贴内容的快照。
我下载了C代码 evsocketlib.c，为所有这里没有包括的内容建立虚拟结构，并交叉编译出ARMEB版本。然后呢？ 再次比较。
现在再对恶意程序进行逆向就清晰多了。有内置的Lua解释器，一些套接字相关的本地代码。僵尸网络的命令列表存储在 0x8274中： bot_daemonize,
rsa_verify, sha1, fork, exec, wait_pid, pipe, evsocket, ed25519, dnsparser,
struct, lpeg, evserver, evtimer and lfs：
bot一开始进行Lua环境的设置，解压缩代码，建立子进程，等待来自CnC控制伺服器的指令。恶意程序作者将Lua的源代码亚作为GZIP
blob，使得整个逆向工作更加容易(不用再处理Lua的字节码了)。
在0xA40B8的blob中 包含了GZip的头，以及最后修改的时间戳。
另一个简单的解压lua代码的方式为： 将二进制文件attach到喜欢的调试器上(当然是
[gef](https://github.com/hugsy/gef)),然后将进程内存转存出来。
首先 将 [gdbserver](https://github.com/bmaia/cross-utils/tree/master/armeb/gdb)拷贝到电缆调制解调器上，
运行恶意程序(arm_ppuma5)并attach到调试器到对应的pid上。
    ./gdbserver --multi localhost:12345 --attach 1058
    ./gdbserver --multi localhost:12345 --attach 1058
    gdb-multiarch -q
    set architecture arm
    set endian big
    set follow-fork-mode child
    gef-remote 192.168.100.1:12345
最后 列出内存部分，转存出堆中的内容
    vmmap
    dump memory arm_puma5-heap.mem 0x000c3000 0x000df000
现在就有了LuaBot的所有源代码了
LuaBot源码由几个模块组成
bot的设置，DNS递归器和CnC设置是硬编码了的
代码注释的很好，包括代理的检验函数和 mssscan的日志解析 ：
使用 /dev/urandom 作为随机数种子：
LuaBot集成了嵌入式的JavaScript引擎,并且执行使用作者的RSA公钥签名的脚本
LuaBot集成了嵌入式的JavaScript引擎,并且执行使用作者的RSA公钥签名的脚本
存在函数 ： checkanus.penetrate_sucuri， 大概用来绕过 Sucuri 的DDoS（拒绝服务攻击）保护的
有一个函数 ： checkanus.penetrate_sucuri， 大概用来绕过 Sucuri 的DDoS（拒绝服务攻击）保护的
大多数bot的功能都和[Malware Must Die!
blogpost](http://blog.malwaremustdie.org/2016/09/mmd-0057-2016-new-elf-botnet-linuxluabot.html)中的相吻合。 有趣的是
CnC服务的IP和iptable规则中的IP没有相同的部分，可能妒忌不同的bot种类采用了不同的环境，（也可能只是因为升级了）。
我没有分析远程僵尸网络的结构，但是模块化的方式和恶意程序的互操作性表示这会是个专业的持续的行为。
**总结**
恶意程序并没有持久机制来存活，它不会尝试刷新固件或者修改易失区(比如NVRAM)，但是第一版本的payload使用iptables规则来限制设备的远程连接。
这是个很有趣的处理方式，因为它可以循序的扫描网络，限制IoT设备的额外的连接，并有选择的使用最终形态的payload进行感染。
2015年，我首次报告ARRIS的后门的时候，有超过[60万的ARRIS设备存在漏洞](https://twitter.com/bernardomr/status/667643475358318592)，
49万的设备的telnet服务是开启的。
在2016年9月进行同样的查询，可以看到暴露的设备减少到3万5了
我知道新闻媒体报道，[安全报道](https://www.kb.cert.org/vuls/id/419568)对此出了很多力，但我想知道这些设备中已经有多少被感染了，又有多少设备因为各种恶意程序而限制了额外的连接。
大量 存在面向互联网的管理接口的Linux设备， 后门的利用， 缺乏固件升级，容易完成对LoT设备的破解，使得它们成为网络犯罪的目标
IoT 僵尸网络正在成为这中存在 ： 厂商必须建立安全可靠的产品， ISP服务商需要提供 升级的设备/固件， 用户需要给家用设备打补丁，保证安全 。
我们需要找到更好的方式去发现，阻止，抑制这种新出现的趋势， 比如 [SENRIO](http://senr.io/) 的方式
可以帮助ISP服务商和企业对IoT生态环境更加关注。大规模的固件分析可以继续，并提供设备安全问题的更好的理解.
**攻击指示器**
LuaBot ARMEB 二进制文件：
drop (5deb17c660de9d449675ab32048756ed)
.nttpd (c867d00e4ed65a4ae91ee65ee00271c7)
.sox (4b8c0ec8b36c6bf679b3afcc6f54442a)
.sox.rslv (889100a188a42369fd93e7010f7c654b)
.arm_puma5 (061b03f8911c41ad18f417223840bce0)
GCC交叉编译工具
GCC: (Buildroot 2015.02-git-00879-g9ff11e0) 4.8.4
GCC: (GNU) 4.2.0 TI-Puma5 20100224
Dropper and CnC IPs:
46.148.18.122
80.87.205.92
攻击者的IP白名单
46.148.18.0/24
185.56.30.0/24
217.79.182.0/24
85.114.135.0/24
95.213.143.0/24
185.53.8.0/24