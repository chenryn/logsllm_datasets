物联网 BLE 认证机制设计的挑战
以 Gogoro Smart Scooter 为例
GD、CSC
台湾科技大学 资管所
隐私与风险管理实验室
讲师介绍
G D
•
台湾科技大学 资管所 硕士生
•
Team T5 CTO (Chief Food Officer)
•
CHROOT Member
•
曾任
•
到处打零工
•
好学生乖小孩
•
数位鉴识、事件处理、威胁情资整合
•
走在路上偶尔踢到一些漏洞
去年 Synology 送我一台 NAS
希望 Gogoro 也能这么 nice XD
CSC
•
台湾科技大学 资管所 副教授
•
够麻吉股份有限公司 独立董事
•
台湾大学 资讯管理 博士
•
曾任
•
资诚企业管理顾问股份有限公司协理
•
意蓝科技股份有限公司资深顾问
•
具有 CISSP、CCFP、CSSLP、CISM 等多
张国际资安认证。
•
近年来除了从事资安研究，发表多篇国际
期刊与会议论文外，也曾协助多家政府单
位与企业，建立资讯安全管理制度，或发
掘系统资安漏洞。
大纲
1.
介绍 Bluetooth Low Energy、安全性分析流程
2.
Smartphone 透过 BLE 控制 IoT 装置，需要一套认证机制
3.
BLE 4.0 配对有许多限制，许多厂商选择不配对另设计认证机制
4.
重视消费者隐私下，硬体识别元(Identifier)受限、乱数化
5.
未配对装置无法取得硬体识别元，设计认证机制遇到的挑战
6.
提出一种更好的认证机制：双计数器强化认证
Bluetooth 4.0 有三种
High Speed
Classic
Low Energy
用 WiFi 传资料
最常见的蓝牙
原名 Wibree 协定
建立持续连线
可建立持续连线
不建立持续连线
高耗电
中耗电
低耗电
高频宽
中频宽
低频宽
短距离
中距离
长距离
(我没用过)
耳机、键盘、滑鼠
温度计、手环、IoT 装置
Bluetooth 4.0 Low Energy
Method
方向
功能
Request         
Central -> Peripheral
一般发送讯息
Response        
Peripheral -> Central
回复 Request 用
Commands        
Central -> Peripheral
不用 Response
Notifications   
Peripheral -> Central
不用 Confirm
Indications     
Peripheral -> Central
需要 Confirm
Confirmations   
Central -> Peripheral
回复 Indication 用
通常电量大的是 Client、电量小的是 Server (仅在收到 request 时供电运作)
Fig. Ref: Stanfy Inc, 2015
类似 HTTP：session-less 并有七种 method
BLE 广泛应用在 IoT 健康家电产品
长辈有言“干坏事是进步最大的原动力”
好奇手养“到底在传输什么碗糕封包？”
内建许多 Profile
• 时间、温度、电源
• 体重、用户资料
• 血压、血糖、体脂
• 心跳、脉搏、跑步
• 速度、方向、室内定位
BLE 很容易玩
• Nordic nRF App
• bleno Node.js
BLE 也很容易恶搞控制
• 在捷运上让旁边的小米手环一直震动
Le IoT 想想物联网 blog 有很不错的教学
BLE Sniffer 录封包 都是明文？！
很多 IoT 装置 BLE 其实没有加密
Security Manager Protocol
Pairing 
Bonding
Re-establishment
Short Term Key
Permanent Key
Permanent Key
BLE 4.0 SMP 配对方式
Pairing方法
MitM 攻击难度
方便性
Just Works
没有保护
最方便，但没有办法验证装置
Passkey Entry
简单，暴力猜出PIN
一方要有萤幕、一方要有键盘
Out-Of-Band
困难，走独立通道
用NFC 等其他方式交换key
BLE 4.2 六位数字比对(需有萤幕)
Just Works 无法验证装置
许多厂商选择不配对的原因：
1.
使用前需要花费时间配对，不方便
2.
有已知安全弱点，配对不一定比较安全
3.
没有萤幕显示，则无法进行数字比对
BLE 4.0 隐私保护
• 硬体识别元 读取限制
• 防止 App 追踪用户
• MAC Address 读出来是 02000000000000
• 硬体识别元 乱数化
• 防止附近设备扫描追踪用户
• MAC Address 每次重开都不同
• 配对过的装置可用 IRK 解出固定 MAC
• 无硬体识别元，增加验证机制设计的困难
Gogoro Smart Scooter
Key Fob Unlock (BLE)
(better than Keeloq)
Origin
Handle
Value
推测用途
钥匙
CONNECT_REQ
开始连线
车子
0x37
01 00
Command ID
车子
0x25
c2 e7 20 bf d2 99 9d 43 68 c6 2d 65 39 3d 72 c9 f3
乱数Challenge
钥匙
0x36
d2 25 57 33 19 18 51 fd ae 7d 1b ed 85 e0 10 78 e2
签章Response
车子
LL_TERMINATE_IND
结束连线
Mobile App (Gateway)
• 交车设定 My Gogoro 帐号
• App 登入下载 Scooter 资讯
Mobile App Pairing & Unlock
仅 ATT 读写资讯、无 BLE 配对绑定
问题定义
• BLE 未配对，无硬体识别元，如何设计认证机制？
分析方法
Ubertooth One 
分析 BLE 通讯
反组译
iOS 与 Android App
解析发车程序
撰写测试 App 验证
金钥储存分析
网路服务分析
弱点情境分析
通报厂商
厂商修复后公开
BLE Gogoro Service
Service UDID 末 8 byte
为 Scooter MAC Address
App Protocol 分析
Origin
Cmd
Function
App
A0
GetScooterSettingWithType
App
A1
GetScooterErrors
App
A2
GetScooterInfo
App
A3
SetScooterSetting
Scooter
A4
ScooterGetSettingStatus
Scooter
A5
ScooterErrorStatus
Scooter
A6
ScooterInfoState
Scooter
A7
ScooterSetSettingStatus
Scooter