## 前言
Java原生提供了JVMTI(JVM Tool Interface)和Java Instrumentation
API，是插桩、调试或控制程序执行等行为的官方接口。
### Java Instrumentation API
也就是常说的Java agent。从Java SE
5开始，可以使用Java的Instrumentation接口来编写Agent。如果需要在目标JVM启动的同时加载Agent，可以选择实现下面的方法：
    [1] public static void premain(String agentArgs, Instrumentation inst);
    [2] public static void premain(String agentArgs);
JVM将首先寻找[1]，如果没有发现[1]，再寻找[2]。如果希望在目标JVM运行时加载Agent，则需要实现下面的方法：
    [1] public static void agentmain(String agentArgs, Instrumentation inst);
    [2] public static void agentmain(String agentArgs);
我们这里只讨论运行时加载的情况。Agent需要打包成一个jar包，在ManiFest属性中指定“Premain-Class”或者“Agent-Class”：
    Premain-Class: class
    Agent-Class: class
生成agent.jar之后，可以通过com.sun.tools.attach.VirtualMachine的loadAgent方法加载：
    private void attachAgentToTargetJVM() throws Exception {
        List virtualMachineDescriptors = VirtualMachine.list();
        VirtualMachineDescriptor targetVM = null;
        for (VirtualMachineDescriptor descriptor : virtualMachineDescriptors) {
            if (descriptor.id().equals(configure.getPid())) {
                targetVM = descriptor;
                break;
            }
        }
        if (targetVM == null) {
            throw new IllegalArgumentException("could not find the target jvm by process id:" + configure.getPid());
        }
        VirtualMachine virtualMachine = null;
        try {
            virtualMachine = VirtualMachine.attach(targetVM);
            virtualMachine.loadAgent("{agent}", "{params}");
        } catch (Exception e) {
            if (virtualMachine != null) {
                virtualMachine.detach();
            }
        }
    }
以上代码可以用反射实现，使用Java
agent这种方式可以修改已有方法，java.lang.instrument.Instrumentation提供了如下方法：
    public interface Instrumentation {
        /**
         * 加入一个转换器Transformer，之后的所有的类加载都会被Transformer拦截。
         * ClassFileTransformer类是一个接口，使用时需要实现它，该类只有一个方法，该方法传递类的信息，返回值是转换后的类的字节码文件。
         */
        void addTransformer(ClassFileTransformer transformer, boolean canRetransform);    
        /**
         * 对JVM已经加载的类重新触发类加载。使用的就是上面注册的Transformer。
         * 该方法可以修改方法体、常量池和属性值，但不能新增、删除、重命名属性或方法，也不能修改方法的签名
         */
        void retransformClasses(Class... classes) throws UnmodifiableClassException;
       /**
       *此方法用于替换类的定义，而不引用现有的类文件字节，就像从源代码重新编译以进行修复和继续调试时所做的那样。
       *在要转换现有类文件字节的地方(例如在字节码插装中)，应该使用retransformClasses。
       *该方法可以修改方法体、常量池和属性值，但不能新增、删除、重命名属性或方法，也不能修改方法的签名
       */
        void redefineClasses(ClassDefinition... definitions)throws  ClassNotFoundException, UnmodifiableClassException;
        /**
         * 获取一个对象的大小
         */
        long getObjectSize(Object objectToSize);
        /**
         * 将一个jar加入到bootstrap classloader的 classpath里
         */
        void appendToBootstrapClassLoaderSearch(JarFile jarfile);
        /**
         * 获取当前被JVM加载的所有类对象
         */
        Class[] getAllLoadedClasses();
    }
可以使用redefineClasses方法完成对类方法的修改，结合javassist可以说是非常方便：
    public static void agentmain(String args, Instrumentation inst) throws Exception {
        Class[] loadedClasses = inst.getAllLoadedClasses();
        for (int i = 0; i GetLoadedClasses(jvmti, &class_count, &classes);
jvmtiEnv也同样提供了RedefineClasses函数，可以实现Java Instrumentation API同样的功能。
    jvmtiError RedefineClasses(jint class_count,
            const jvmtiClassDefinition* class_definitions) {
    return functions->RedefineClasses(this, class_count, class_definitions);
    }
而同时com.sun.tools.attach.VirtualMachine类也提供了对应的加载方法
    public abstract void loadAgentLibrary(String agentLibrary,
                        String options)
                                   throws AgentLoadException,
                                          AgentInitializationException,
                                          IOException
    Loads an agent library.
    A JVM TI client is called an agent. It is developed in a native language. A JVM TI agent is deployed in a platform specific manner but it is typically the platform equivalent of a dynamic library. This method causes the given agent library to be loaded into the target VM (if not already loaded). It then causes the target VM to invoke the Agent_OnAttach function as specified in the JVM Tools Interface specification. Note that the Agent_OnAttach function is invoked even if the agent library was loaded prior to invoking this method.
    The agent library provided is the name of the agent library. It is interpreted in the target virtual machine in an implementation-dependent manner. Typically an implementation will expand the library name into an operating system specific file name. For example, on UNIX systems, the name foo might be expanded to libfoo.so, and located using the search path specified by the LD_LIBRARY_PATH environment variable.
    If the Agent_OnAttach function in the agent library returns an error then an AgentInitializationException is thrown. The return value from the Agent_OnAttach can then be obtained by invoking the returnValue method on the exception.
    Parameters:
    agentLibrary - The name of the agent library.
    options - The options to provide to the Agent_OnAttach function (can be null).
    Throws:
    AgentLoadException - If the agent library does not exist, or cannot be loaded for another reason.
    AgentInitializationException - If the Agent_OnAttach function returns an error
    IOException - If an I/O error occurs
    NullPointerException - If agentLibrary is null.
    See Also:
    AgentInitializationException.returnValue()
总结起来，使用JVMTI底层的方式，需要编写提供一个额外的动态库文件（Java Instrumentation
API是提供一个jar包），可以实现修改已存在代码。
## 关于JNI
上文大致介绍了官方提供的Java instrument方法，与我们今天要讲的主题'ptrace'表面看无关系，要想讲清楚，就不得不讲一下JNI。  
JNI（Java Native
Interface，Java本地接口）是一种编程框架，使得Java虚拟机中的Java程序可以调用本地代码，在安卓中应用非常广泛。在JNI框架，native方法一般在单独的.c或.cpp文件中实现。当JVM调用非static函数，就传递一个JNIEnv指针，一个jobject的this指针（如果是static函数则只传送一个JNIEnv指针），后面再跟上函数参数。一个JNI函数看起来类似这样：
    JNIEXPORT void JNICALL Java_ClassName_MethodName
      (JNIEnv *env, jobject obj)
    {
        /*Implement Native Method Here*/
    }
env指向一个结构包含了到JVM的接口，包含了所有必须的函数与JVM交互、访问Java对象。例如，把本地数组转换为Java数组的JNI函数，把本地字符串转换为Java字符串的JNI函数，实例化对象，抛出异常等。Java程序可以做的任何事情都可以用JNIEnv做到，只是过程非常麻烦。比如调用System.out.println
    // Get system class
    jclass syscls = env->FindClass("java/lang/System");
    // Lookup the "out" field
    jfieldID fid = env->GetStaticFieldID(syscls, "out", "Ljava/io/PrintStream;");
    jobject out = env->GetStaticObjectField(syscls, fid);
    // Get PrintStream class
    jclass pscls = env->FindClass("java/io/PrintStream");
    // Lookup printLn(String)
    jmethodID mid = env->GetMethodID(pscls, "println", "(Ljava/lang/String;)V");
    // Invoke the method
    jstring str = env->NewStringUTF( "you are hacked");
    env->CallVoidMethod(out, mid, str);
在JNI本地代码中，实际获得了很多Java代码不具备的能力，如可以访问进程的任意内存空间、调用系统调用等。jmethodID是JNI中的方法指针类型，它指向JVM底层的方法对象。经过GDB调试和翻阅代码，它的实际结构JVMMethod如下：
    struct MethodInternal
    {
        void * vtbl;
        ConstMethod * _constMethod;
        void * _method_data;
        void * _method_counters;
        int _access_flags;
        int _vtable_index;
    #ifdef CC_INTERP
        int               _result_index;               // C++ interpreter needs for converting results to/from stack
    #endif
        unsigned short                _method_size;                // size of this object
        unsigned char                _intrinsic_id;               // vmSymbols::intrinsic_id (0 == _none)
        unsigned char                _jfr_towrite      : 1,       // Flags
                        _caller_sensitive : 1,
                        _force_inline     : 1,
                        _hidden           : 1,
                        _dont_inline      : 1,
                                          : 3;
    #ifndef PRODUCT
        int             _compiled_invocation_count;  // Number of nmethod invocations so far (for perf. debugging)
    #endif
        // Entry point for calling both from and to the interpreter.
        unsigned char * _i2i_entry;           // All-args-on-stack calling convention
        // Adapter blob (i2c/c2i) for this Method*. Set once when method is linked.
        void* _adapter;
        // Entry point for calling from compiled code, to compiled code if it exists
        // or else the interpreter.
        volatile unsigned char *  _from_compiled_entry;        // Cache of: _code ? _code->entry_point() : _adapter->c2i_entry()
        // The entry point for calling both from and to compiled code is
        // "_code->entry_point()".  Because of tiered compilation and de-opt, this
        // field can come and go.  It can transition from NULL to not-null at any
        // time (whenever a compile completes).  It can transition from not-null to
        // NULL only at safepoints (because of a de-opt).
        void * volatile _code;                       // Points to the corresponding piece of native code
        volatile unsigned char *           _from_interpreted_entry; // Cache of _code ? _adapter->i2c_entry() : _i2i_entry
    };
    struct JVMMethod
    {
        MethodInternal * _method;
    public:
        void setMethodNative();
        void * getMethod()const
        {
            return _method;
        }
        void clear_method_counters();
        bool isMethodNative()const;
        bool isMethodStatic()const;
        int getMethodAccessFlags()const;
        void print()const;
        unsigned long native_function_addr()const;
        void native_function_addr(unsigned long v);
        unsigned long signature_handler_addr()const;