## Page 13
XIlI
12.4循环控制及状态返回值的企业级案例/253
第13章Shel数组的应用实践/260
13.1Shell数组介绍/260
13.1.1为什么会产生Shell数组/260
13.1.2什么是Shell 数组/260
13.2Shell数组的定义与增删改查/261
13.2.1Shell数组的定义/261
13.2.2Shell 数组的打印及输出/262
13.3Shell数组脚本开发实践/265
13.4Shell数组的重要命令/267
13.5Shell数组相关面试题及高级实战案例/268
13.6合格运维人员必会的脚本列表/277
第14章Shel脚本开发规范/279
14.1Shell脚本基本规范/279
14.2Shell脚本变量命名及引l用变量规范/281
14.3Shell函数的命名及函数定义规范/282
14.4Shell脚本（模块）高级命名规范/283
14.5Shell脚本的代码风格/283
14.5.1代码框架/283
14.5.2缩进规范/284
14.6Shell脚本的变量及文件检查规范/285
---
## Page 14
XIV
第15章Shell脚本的调试/286
15.1常见Shell脚本错误范例/286
15.1.1if条件语句缺少结尾关健字/286
15.1.2循环语句缺少关键字/287
15.1.3成对的符号落了单/287
15.1.4中括号两端淡空格/288
15.1.5Shell 语法调试小结/289
15.2Shell脚本调试技巧/289
15.2.1使用dos2unix命令处理在Windows下开发的脚本/289
15.2.2使用echo命令调试/290
15.2.3使用bash命令参数调试/291
15.2.4使用set命令调试部分脚本内容/294
15.2.5其他调试Shell脚本的工具/296
15.3本章小结/296
第16章Shell脚本开发环境的配置和优化实践/297
16.1使用vim而不是vi编辑器/297
16.2配置文件.vimrc的重要参数介绍/298
16.3让配置文件.vimrc生效/304
16.4使用vim编辑器进行编码测试/304
16.4.1代码自动缩进功能/304
16.4.2代码颜色高亮显示功能说明/304
16.5vim配置文件的自动增加版权功能/305
16.6vim配置文件的代码折叠功能/305
16.7vim编辑器批量缩进及缩进调整技巧/305
---
## Page 15
XV
16.8其他vim配置文件功能说明/307
16.9vim编辑器常用操作技巧/307
第17章Linux信号及trap命令的企业应用实践/310
17.1信号知识/310
17.1.1信号介绍/310
17.1.2信号列表/310
17.2使用trap控制信号/311
17.3Linux信号及trap命令的生产应用案例/313
第18章Expect自动化交互式程序应用实践/317
18.1Expect介绍/317
18.1.1什么是Expect /317
18.1.2为什么要使用 Expect/317
18.2安装Expect软件/318
18.3小试牛刀：实现Expect自动交互功能/318
18.4Expect程序自动交互的重要命令及实践/319
18.4.1spawn 命令/320
18.4.2cxpect 命令/320
18.4.3send命令/323
18.4.4exp_continue 余令/324
18.4.5send_user 命令/324
18.4.6exit 命令/325
18.4.7Expect常用命令总结/325
18.5Expect程序变量/326
18.5.1普通变量/326
---
## Page 16
XVT
18.5.2特殊参数变量/326
18.6Expect程序中的if条件语句/327
18.7Expect中的关键字/329
18.7.1eof关键字/329
18.7.2timeout关健字/329
18.8企业生产场景下的Expect案例/330
18.8.1批量执行命令/330
18.8.2批量发送文件/332
18.8.3批量执行Shell脚本/334
18.8.4自动化部署SSH密钥认证+ansible 的项目实战/337
18.9本章小节/339
第19章企业Shell面试题及企业运维实战案例/340
19.1企业Shell面试题案例/340
19.1.1面试题1：批量生成随机字符文件名/340
19.1.2面试题2：找量改名/341
19.1.3面试题3：批量创建特殊要求用户/342
19.1.4面试题4：扫描网络内存活主机/342
19.1.5面试题5：解决DOS攻击/343
19.1.6面试题6:MySQL数据库分库备份/344
19.1.7面试题7：MySQL数据库分库分表备份/344
19.1.8面试题8：筛选符合长度的单词/344
19.1.9面试题9：MySQL主从复制异常监控/344
19.1.10面试题10：比较整数大小/344
19.1.11面试题11：某单自动化软件部署/344
19.1.12面试题12：Web及MySQL服务异常监测/345
19.1.13面试题13：监控Memcached缓存服务/345
19.1.14面试题14：开发脚本实现入侵检测与报警/346
---
## Page 17
XVI1
19.1.15西试题15：开发Rsync服务启动脚本/349
19.1.16百试题16：开发MySQL多实例启动脚本/349
19.1.17面试题17：开发学生实践抓闽脚本/351
19.1.18面试题18：破解RANDOM随机数/353
19.1.19面试题19：批量检查多个网站地址是否正营/354
19.1.20面试题20：单词及字母去重排序/355
19.1.21面试题21：开发脚本管理服务墙LVS/357
19.1.22面试题22：LVS节点健康检查及管理脚本/359
19.1.23面试题23：LVS客户增配置辨本/360
19.1.24面试题24：模拟keepalived软件高可用/361
19.1.25面试题25：编写正（或长）方形图形/362
19.1.26面试题26：编写等展三角形图形字符/363
19.1.27面试题27：编写直角梯形图形字符/364
19.1.28面试题28：51CTO博文虎虫脚本/365
19.1.29面试题29：Nginx负载节点状态监测/366
19.2Shell经典程序案例：哄老婆和女孩的神器/369
19.2.1功能筒介/369
19.2.2使用方法/369
19.2.3girlLove工具内容模板/370
19.2.4girlLove工具的 Shell 源码注释/371
19.2.5girlLove 最终结果展示/376
第20章子Shell及Shell嵌套模式知识应用/377
20.1子Shell的知识及实践说明/377
20.1.1什么是子 Sbell /377
20.1.2子Shell 的常见产生途径及特点/378
20.2子Shell在企业应用中的“坑”/383
20.2.1使用管道与while循环时遵通的“坑”/383
20.2.2解决while循环遭透的“坑”/385
---
## Page 18
XVIII
20.3Shell调用脚本的模式说明/386
20.3.1fork模式调用脚本知识/386
21.3.2exec模式调用脚本/386
21.3.3source模式调用脚本/387
20.4Shell调用脚本的3种不同实践方法/387
20.4.1开发测试不同模式区别的Shell脚本/387
20.4.2对比fork模式与source模式的区别/390
20.4.3对比exec模式与source模式的区别/391
20.5Shell调用脚本3种不同模式的应用场景/391
附录Linux重要命令汇总/393
---
## Page 19
Linux
第1章
如何才能学好Shell编程
1.1为什么要学习Shell编程
Shell脚本语言是实现Linux/UNIX系统管理及自动化运维所必备的重要工具，
Linux/UNIX系统的底层及基础应用软件的核心大都涉及Shell脚本的内容。每一个合格
的Linux系统管理员或运维工程师，都需要能够熟练地编写Shell脚本语言，并能够阅
读系统及各类软件附带的Shell脚本内容。只有这样才能提升运维人员的工作效率，适
应日益复杂的工作环境，减少不必要的重复工作，从而为个人的职场发展奠定较好的基
础。那么，Shell脚本编程的学习是否容易呢？学习Shell编程到底需要什么样的Linux
基础呢？
1.2学好Shell编程所需的基础知识
本节首先来探讨一下在学习Shell编程之前需要掌握的基础知识，需要说明的是，
并不是必须具备这些基础知识才可以学习Shell编程，而是，如果具备了这些基础知识，
那么就可以把Shell编程学得更好，领悟得更深。如果只是想简单地了解Shell脚本语
言，那么就无须掌握太多的系统基础知识，只需要会一些简单的命令行操作即可。
学好Shell编程井通过Shell脚本轻松地实现自动化管理企业生产系统的必备基础如下：
1）能够熟练使用vim编辑器，熟悉SSH终端及“.vimre”等的配置。
---
## Page 20
2跟老男孩学Linux运维：Shell 编程实战
在Linux下开发Shell脚本最常使用的编辑器是vim，因此如果能够熟练使用并配
置好vim的各种高级功能设置，就可以让开发Shell脚本达到事半功倍的效果。这部分
内容在本书的第16章有相应的讲解，读者在开始编写脚本之前可以考虑先看看第16章
并搭建出高效的Shell开发环境。
说明：在本书的第16章讲解Shell脚本开发环境的配置调整和优化时，提到了高
效搭建Shell开发环境的方法，之所以把这部分内容安排在第16章，是希
望读者能体验一下比较原始的Shell开发过程，然后再来掌握搭建高效的开
发环境的方法，老男孩从教学的角度认为这是一个比较好的过程，读者可以
根据自身的情况来决定要不要提前学习第16章，搭建好高效的Shell开发
环境。
2）要有一定的Linux命令基础，至少需要掌握80个以上Linux常用命令，并能够
熟练使用它们（Linux系统的常用命令请参见本书的附录）。
和其他的开发语言（例如Python）不同，Shell脚本语言很少有可以直接使用的外
部函数库，老男孩就将Linux系统的命令看作Shell的函数库，因此，对Linux系统常
用命令的掌握程度就直接决定了运维人员对Shell脚本编程的掌握高度。一些Shell类图
书在开篇花费大量章节来讲解Linux基础命令也许就是因为这点，本书主要侧重于Shell
编程企业案例实战讲解，因此不会进行大且全的介绍，也不会过多地讲解Linux的常用
命令，而是采用小面美的实战策略，本书结尾会以附录的形式给出常用的Linux基础命
令的相关知识。此外，如果读者想学习Linux基础命令，可以关注老男孩即将出版的新
书一《跟老男孩学习Linux运维：常用命令实战》”，或者其他相关图书。
3）要熟练掌握Linux正则表达式及三剑客命令（grep、sed、awk）。
Linux正则表达式及三剑客命令（grep、sed、awk）是Linux系统里所有命令中最核
心的3个命令，每个命令加上正则表达式的知识后，功能都会变得异常强大。如果能够
掌握它们，就可以在编写Shell脚本时轻松很多。如读者想学习这部分知识，可以关注
老男孩即将出版的新书一《跟老男孩学习Linux运维：三剑客命令实战》°，或者其他
相关图书。
4）熟悉常见的Linux网络服务部署、优化、日志分析及排错。
学习Shell编程最直接的目的就是在工作中对系统及服务等进行自动化管理，因
此，如果不熟悉工作中的网络服务，就会很难使用Shell编程处理这些服务：如果不掌
《跟老男孩学习Linux运维：常用命令实战）（预计书名）也将由机械工业出版社出版，时间预计为
2017年
《跟老男孩学习Linux运增：三剑客命令实战》（预计书名）也将由机械工业出版社出版，时间预计为
2017年。
---
## Page 21
第1章如何才能学好Shel编程3
握网络服务等知识，就会让Shell开发者的能力大打折扣，甚至学习到的仅仅是Shell
的语法及简单的基础，那么想要学好Shell编程的想法也就落空了。需要掌握的基础网
络服务包括但不限于：Crond、Rsync、Inotify、Nginx、PHP、MySQL、Keepalived、
Memcached、Redis、NFS、Iptables、SVN、Git，老男孩IT教育的老师在教学的过程中
也是先讲解Linux常用命令和系统网络服务，然后再讲解Shell编程，目的就是不要让
学员仅仅掌握Shell的语法皮毛，而是让他们能在学完Shell编程之后，自动搭建中型集
群架构等，有关基础网络服务的知识可以参考机械工业出版社的《跟老男孩学习Linux
运维：Web集群实战》一书，或者其他相关图书。
1.3如何才能学好Shell编程之“老鸟”经验谈
学好Shell编程的核心：多练一多思考一再练一再思考，坚持如此循环即可！
编程”的讲稿，经过老男孩的整理后和读者分享如下。
（1）掌握Shell脚本基本语法的方法
最简单有效的方法就是将语法敲n+1遍。为什么不是n遍呢？因为这里的n指的是
你刚开始为掌握语法面练习的那些天（21天法则），而1则是指在确定掌握语法后每天
都要写一写、想一想，至少是要看一看，保持一个与Shell脚本接触的热度。
（2）掌握Shell脚本的各种常见语法
要掌握各类条件表达式、if多种判断、for循环的不同用法、While多种读文件的循
环等，这样做不是为了什么都学会，而是为了能够看懂别人写的代码。掌握常见的各种
语法，也就是要经常写，而且要持续写一段时间（让动作定型，在大脑和肌肉里都打上
深刻烙印），各种语法都要用。
（3）形成自己的脚本开发风格
当掌握了各种常见的语法之后，就要选定一种适合自己的语法，形成自已的开发风
格，例如：if语句的语法就只用一种，条件表达式的语法只用一种，函数的写法也只用
一种，有些语法需要根据场景去选择，除非你是像师傅（老男孩）一样要教学育人。否
则，没有必要什么语法都掌握。在解决问题的前提下，掌握一种语法，然后将其用精、
用透就是最好的，切记横向贪多，要多纵深学习。
（4）从简单做起，简单判断，简单循环
初学者一定要从简单做起，最小化代码学习，简单判断，简单循环，简单案例练
习，所有的大程序都是由多个小程序组成的，因此，一开始没必要写多大的程序，免得
给自已带来过多的挫败感，形成编程恐惧症。可先通过小的程序培养兴趣及成就感，到
说明：该分享人是老男孩的早期学员，毕业后曾任职于一家近千人公司的运维经理岗位。目前就职
于小米科技公司，担任资深工程师。
---
## Page 22
4跟老男孩学Linux运维：Shel编程实战
碰到大的程序时，即使遇到困难也能坚持下去了。
（5）多模仿，多放下参考资料练习，多思考
多找一些脚本例子来仔细分析一下，或者是系统自带的，或者是别人写的（本书就
包含大量例子），不要只看，看着会并不是真的会。当你闭上眼睛的时候，还能完整地回
忆起来，甚至还能完整口述或手写出来才是真的会。
（6）学会分析问题，逐渐形成编程思维
在编写程序或脚本时，先将需求理解透，对大的需求进行分解，逐步形成小的程序
或模块，然后再开发，或者先分析最终需求的基础实现，最后逐步扩展批量实现。例如
师傅（老男孩）在编写批量关闭不需要自启动服务的脚本时，就采用了这种分析方法，
思路如下：
1）掌握关闭一个服务的命令，即“chkconfig服务名off”。
2）批量处理时，会有多个服务名，那么就要用到多条以上的命令。
3）仔细分析以上命令，会发现需要处理的所有命令中，只有“服务名”不同，其
他地方都一样，那么自然就会想到用循环语句来处理。
如果是你，能想到这些吗？若是想到了，则表示你已经形成了初级的编程思维了，
恭喜你。
如果你能够通过分析将一个大的需求细分为各个小的单元，然后利用函数、判断、
循环、命令等实现每一个小的单元，那么最后把所有程序组合起来就是一个大的脚本程
序了。
如果达到了上述的水平，你就算会编程了，对于领导提出的需求，就能够进行合理
的分解，只要在机器上多进行调试，相信一定能写出来。
（7）编程变量名字要规范，采用驼峰语法表示
oldboyAgeName用的就是驼峰表示法。记住，在学习的初期，不要去看大的脚本，
要从小问题和小的方面着手，当你觉得小的判断、循环等在你的脑子里瞬间就能出来
时，再开始去看和写大的脚本，进行深入练习。
师傅（老男孩）常说，新手初期最好的学习方法就是多敲代码，并针对问题进行分
解练习，多敲代码就是让自已养成一个编程习惯，使肌肉、视觉和思维形成记忆，分解
问题实际上就是掌握软件的设计和实现思想。
对于最高的编程境界，我个人的理解是：能把大问题进行完整的分析、分解且高效
解决。
完整性：就是指预先考虑到各种可能性，将问题分解后，合理模块化并实现。
高效率：例如，在求“1+2+3..+100”的和时，考虑使用算法“（1+100）×100/2”，
而不是逐个去加。
（8）不要掌来主义，特别是新手
好多网友看书或学习视频时，喜欢要文档、要代码，其实，这是学习的最大误区。
---
## Page 23
第1章如何才能学好Shell编程5
有了文档和代码，你会变得非常懒情，心里面会觉得已经学会了，面实际上并没有
学会。因此无论是看书还是学习视颊，都要自已完成学习笔记及代码的书写，这本身就
是最重要的学习过程，在学习上要肯于花时间和精力，而不是投机取巧。如果你至今都
没有学好Linux运维，那么可以想一想是不是也犯了这个错误？
1.4学完本书后可以达到何种Shell编程高度
如果读者具备了前文提到Linux基础知识，认真地阅读并按照书中的内容去勤加练
习，相信很快便可熟练掌握Shell编程，搞定企业场景中的绝大多数Shell编程问题，本
书介绍了大量的核心互联网运维场景企业案例，相信对大家的工作会很有帮助。
如果再配合老男孩的Shell脚本教学视赖，定能使你如虎添翼，相关视赖一共有14