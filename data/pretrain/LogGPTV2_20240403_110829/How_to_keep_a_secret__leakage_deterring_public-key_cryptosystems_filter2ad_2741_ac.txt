KEM/DEM mechanism [7], using a KEM which encrypts
each bit of the key with a secure encryption. Given {ci},
the adversary is not able to predict the bit ωi with a suﬃ-
cient bias, thus every ωi is random conditioned on the ad-
versary’s view. This proves privacy (assuming no secret-key
oracle O(esk,·) is given). Regarding recoverability we can
prove it w.r.t. essentially any distribution D. The Rec al-
gorithm produces a sequence of ciphertexts with plaintexts
following D whose correct decryption reveals the bits ωi by
a majority argument. As long as the correctness of the box
B is non-negligibly larger than the predicting probability of
D (which is a necessary characteristic of “box usefulness”)
the recovering algorithm will produce the ωi values with
overwhelming certainty since it can do a perfect simulation
of ciphertexts with D distributed plaintexts. The complete
proofs of all those facts can be found in the full version
(available by the authors). Among others, there we estab-
lish that N = O(α−2 log6 λ) is suﬃcient where α represents
the gap between the prediction probability of D and δ.
3.2 Generic IND-CPA Leakage-deterring PKE
with Honest Authority
In this section, we show that leakage-deterring PKE can
be based on any secure PKE (even without a homomorphic
property). We will only consider IND-CPA security with
honest authority in this section and we will show how to go
beyond this and achieve security against dishonest authori-
ties (and actually IND-CCA2) in the next section.
Linear-Size Construction. To make the exposition more
accessible we present ﬁrst a less eﬃcient construction (with
linear size ciphertexts in the length of hidden information);
then we show our main generic construction which is con-
stant size. Consider a semantically secure public key encryp-
tion E. The main idea of the construction is as follows. For
each bit of private data there is a pair of public keys, and
the owner has only one of the secret keys. The ambiguity
of which secret key the owner has oﬀers the opportunity for
the recovering algorithm to work. We call this construction
Scheme-II, details are as follows:
• KeyGen(1λ): This algorithm generates n = |s| key
pairs (pk1, sk1), . . . , (pkn, skn).
i
1, pk1
n, pk1
1), . . . , (pk0
• EnKey(O, A): (O, A) inputs (pk1, . . . , pkn, s, sk1, . . . ,
skn), and (pk1, . . . , pkn, s) respectively, where s ∈ {0, 1}n.
A randomly generates r ∈ {0, 1}n which we call indi-
cating string, and n new random public keys pk(cid:48)
1, . . . , pk(cid:48)
n.
The enhanced public key epk is n pairs of public keys
n), together with s(cid:48) = r ⊕ s,
(pk0
= pk(cid:48)
where for i = 1, . . . , n, pkri
i,
and the enhanced secret key is esk = (sk, r), where
sk = (sk1, . . . , skn).
i = pki, pk1−ri
domly, and computes mn = m−(cid:80)n−1
dicating string r, and returns m =(cid:80)n
• Enc(epk, m):This algorithm picks m1, . . . , mn−1 ran-
i=1 mi (wlog we as-
sume that additive secret-sharing works over the plain-
text space). It outputs the ciphertext c = [(c0
1), . . . ,
(c0
i , mi).
• Dec(esk, c): To decrypt ciphertext c, this algorithm
chooses from c the ciphertexts corresponding to the in-
i=1 Dec(ski, cri
i ).
• RecB,D(epk, δ): With access to a decryption box B
and a plaintext distribution D for which the box sup-
posedly works with δ-correctness, the algorithm recov-
ers each bit si of s by repeating the following procedure
N times (the exact value of N will be speciﬁed in the
analysis):
It ﬁrst samples m, m(cid:48) independently, according to D,
randomly chooses m1, . . . , mi−1, mi+1, . . . , mn, and com-
putes m0
i = m(cid:48) −(cid:80)
i = m −(cid:80)
1, c1
i = Enc(pk1
i = Enc(pk0
n)], where c0
i , mi), c1
n, c1
i ).
1, c1
n, c1
i ), c1
i , m1
1), . . . , (c0
j(cid:54)=i mj, and m1
i = Enc(pk1
j , c1
i , m0
j(cid:54)=i mj.
n)], where for
j encrypts the same message mj while
Then it feeds B with [(c0
all j (cid:54)= i, c0
i = Enc(pk0
c0
The algorithm records a 0, if the response from the box
is m, 1 if the response is m(cid:48), and ⊥ in any other case
including the case m = m(cid:48). For each i, the algorithm
will propose ri to be the majority of the recorded non-
⊥ values (the algorithm fails if majority is not well-
deﬁned).
The above procedure is repeated for all i ∈ {1, . . . , n}
to form a string r, and ﬁnally, the algorithm outputs
s = s(cid:48) ⊕ r, where s(cid:48) is parsed from epk.
Security Analysis. We now analyze the security proper-
ties of Scheme-II. Let us call an encryption using a single
pair of keys as a “unit building block”. It is not hard to see
that IND-CPA security of the unit building block implies the
IND-CPA of scheme-II (assuming authority is honest and
taking into account the security of additive secret-sharing).
Regarding privacy, observe that s is perfectly hidden within
epk as a one-time pad ciphertext. Finally, regarding recov-
erability w.r.t any distribution D, the recovering algorithm
can attempt to query diﬀerent encrypted messages in any
single unit location. Due to the secret-sharing, any box
(even partly successful) has to include a key for each co-
ordinate. Due to these facts, the recovering algorithm can
948detect which secret key does the owner possess at each loca-
tion something that leads to the calculation of the indicating
string and hence the recovery of the private data. A detailed
analysis can be found in the full version (available by the au-
thors) where we show that a value for N as in scheme-I is
suﬃcient.
Main Generic Construction. In the previous construc-
tion, the sender splits the message into n pieces. This makes
the ciphertext size (number of ciphertext units) linear in the
length of the owner’s private data. We now improve the
generic construction to achieve a ciphertext size O(log 1
δ ) by
using an error correcting code to create the indicating string,
where δ is a speciﬁed minimum decryption probability re-
quired by adversarial implementations and is a parameter
of the construction. We call this construction Scheme-III.
• KeyGen(1λ): Same as in Scheme II.
• EnKey(O, A): (O, A) have inputs (pk1, . . . , pkm, s, sk),
and (pk1, . . . , pkm, s) respectively where s ∈ {0, 1}n;
the parameter m is selected based on n according to
an ECC (e.g., the one of [17]) that corrects up to m
errors. A randomly generates ˜r ∈ {0, 1}n, computes
5
the indicating string r = ECC(˜r). Also, A selects m
random public keys pk(cid:48)
m. The protocol termi-
nates with O obtaining (epk, esk) and A obtaining epk,
m, pk1
where epk is (pk0
m), together with
s(cid:48) = ˜r ⊕ s, and for i = 1, . . . , m, pkri
i = pki, pk1−ri
=
pk(cid:48)
1, . . . , pk(cid:48)
i, and esk = (sk, r).
1), . . . , (pk0
1, pk1
i
• Enc(epk, m): To encrypt a message m, the algorithm
ﬁrst chooses a random subset S ⊆ {1, . . . , m} with size
t = 5 ln 4
δ ; we denote the i-th element of S by Si. Then
it randomly picks m1, . . . , mt−1, and computes mt =
t , c1
m−(cid:80)t−1
i=1 mi. The ciphertext c = [S, (c0
1, c1
Si , mi) for b ∈ {0, 1}.
i = Enc(pkb
1), . . . , (c0
where cb
• Dec(esk, c): To decrypt ciphertext c, this algorithm
chooses from c the ciphertexts corresponding to the
indicating string r projected on S, and returns m =
t )],
(cid:80)t
i=1 Dec(skSi , c
rSi
i
).
• RecB,D(epk, δ): With access to a decryption box B
and a plaintext distribution D, the algorithm recovers
each bit si of s by repeating the following procedure
N times (the exact number will be speciﬁed in the
analysis):
It ﬁrst randomly selects a subset S ⊆ {1, . . . , m} with
size t.
If i ∈ S, and i is the k-th element of S, the algorithm
randomly chooses m, m(cid:48) independently according to D
as well as random values m1, . . . , mk−1, mk+1, . . . , mt.
Then, it computes m0
k =
t )]
where, for all j (cid:54)= k, the pair c0
j encrypts the same
message mj using pk0
k =
Enc(pkb
If i (cid:54)∈ S, the algorithm proceeds by performing a reg-
ular encryption of a plaintext from D.
If i ∈ S and the response of the decryption box is
m, the algorithm records 0; if i ∈ S and the response
is m(cid:48), this algorithm records a 1; Otherwise (in any
other case including i (cid:54)∈ S or m = m(cid:48)), it records ⊥.
k = m −(cid:80)
j(cid:54)=k mj, and m1
t , c1
j(cid:54)=i mj. It feeds B with [S, (c0
i , pk1
k) for b ∈ {0, 1}.
m(cid:48) −(cid:80)
i respectively, while cb
1), . . . , (c0
i , mb
j , c1
1, c1
For each i the majority of the non-⊥ recorded values is
proposed as the value of ri. If no majority is deﬁned,
a random bit is produced as ri.
The above procedure is repeated for all i ∈ {1, . . . , m},
and a string r is formed. The decoding algorithm of
ECC is now executed on r to obtain ˜r. The algorithm
terminates by returning s = s(cid:48) ⊕ ˜r, where s(cid:48) is parsed
from epk.
Security Analysis: The IND-CPA and privacy properties
are essentially the same as in scheme II. We only discuss
recoverability which is signiﬁcantly more complex. The in-
tuition is that because of the error correcting code, the Rec
algorithm would work as long as a linear fraction of bits of r
can be recovered. As we will prove in the appendix, suppose
that q is the number of positions among the m for which our
recoverability procedure fails. We will show that the proba-
bility of correct decryption will become roughly smaller than
e−tq/m = δ5q/m. From this we derive that any decryption
box operating with probability at least δ (as postulated) can
make our algorithm fail in at most m/5 of the m secret keys
which is suﬃcient for correct decoding. The full analysis is
presented in the appendix B.
3.3 Generic CCA2 Secure Construction with
Dishonest Authority
In this section, we introduce a simple general method to
construct an IND-CCA2 secure leakage-deterring encryp-
tion with dishonest authority from a leakage-deterring PKE
which is IND-CPA secure with honest authority, and an
IND-CCA2 secure standard PKE. The main idea is to com-
pose these two encryptions to form a nested encryption with
the outer layer encryption being the IND-CCA2 secure one.
Recoverability could be maintained because the Rec algo-
rithm can run the Rec algorithm of the inner leakage-deterring
encryption to collect queries, and encrypt them using the
outer layer public key to form its own recovering queries.
Construction: Suppose E1 is an IND-CPA secure leakage-
deterring PKE (with an honest authority), and E2 is an
IND-CCA2 secure PKE. We call the following construction
Scheme-IV.
• KeyGen(1λ): This algorithm executes the KeyGen
algorithm of both E1, E2, and returns {(pki, ski)}i=1,2.
• EnKey(O, A): This is a protocol between O, A with
inputs (pki, ski, s) and (pki, s) respectively; it proceeds
by executing the EnKey protocol of E1 to get (epk1, esk1)
ﬁrst, and this protocol terminates with O obtaining en-
hanced key pair (epk, esk), and A obtaining epk only,
where (epk, esk) = ((epk1, pk2), (esk1, sk2)).
• Enc(epk, m): To encrypt a message m, this algorithm
runs the encryption algorithms of both of E1, E2, and
returns the ciphertext as c = Enc(pk2, Enc(epk1, m))
• Dec(esk, c): To decrypt a ciphertext c, this algorithm
runs the decryption algorithms of both E1, E2 and re-
turns m = Dec(esk1, Dec(sk2, c)).
• RecB,D(epk, δ): With access to a decryption box B
and a plaintext distribution D, this algorithm calls the
Rec algorithm R1 of E1. For each query c of R1, this
algorithm feeds B with Enc(pk2, c). It then passes the
responses of the box to R1 and returns whatever R1
returns.
949Security Analysis: Correctness is obvious, and Privacy
and Recoverability are not inﬂuenced by the extra outer layer
encryption. To see IND-CCA2 security with dishonest au-
thority, ﬁrst, even if the authority has part of the secret key
for the inner layer enhanced public key epk1, any message
will be protected using the outer layer encryption E2; fur-
ther, CCA security also easily follows from the CCA security
of E2: the simulator can answer decryption oracle queries
by asking the E2 challenger to decrypt the outer layer, and
decrypt the inner ciphertext locally using esk1. Details can
be found in the full version.
We remark that the generic method above can be also
applied to the identity based setting; in that case, we can use
the one-time signature paradigm to achieve CCA2 security.
We omit further details.
4. LEAKAGE-DETERRING SIGNATURE &
IDENTIFICATION
In this section, we design leakage-deterring signatures and
identiﬁcation schemes. The main idea is that we treat any
functional box as an unforgeability or impersonation ad-
versary, and then take advantage of “witness extractabil-
ity” used in the security arguments of the underlying prim-
itive to extract the secret-key which will unlock the private
data; in this case we have non-black-box recoverability. We
stress that our constructions do not employ any additional
intractability assumptions than the underlying primitives.
4.1 Leakage-deterring Signature In the Ran-
dom Oracle Model
We construct a leakage-deterring signature scheme based
on a class of Σ-protocol-based signature schemes as in [29].
The security proofs of these signatures rely on the fact that
if the adversary can forge one signature, then he could also
forge another correlated signature for the same message with