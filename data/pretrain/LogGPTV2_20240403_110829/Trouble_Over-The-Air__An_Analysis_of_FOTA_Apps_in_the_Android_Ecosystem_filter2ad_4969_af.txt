12.6M
3.0M
191K
147K
35K
6K
310
302
156
119
CC
156
181
68
145
30
37
1
15
4
3
APKs
1.4K
1.9K
985
244
1.4K
521
12
6
4
7
Mal. APKs (%)
1 (0.1%)
29 (1.5%)
28 (3%)
4 (1.6%)
494 (35%)
1 (0.2%)
11 (92%)
0
0
0
Children
Pkgs
260
489
77
29
851
61
12
6
1
7
PlayStore (%)
149 (57%)
330 (67%)
1 (1.3%)
29 (100%)
233 (27%)
1 (1.6%)
1 (8%)
3 (50%)
0
4 (57%)
Sig.
148
334
35
28
582
9
12
3
4
4
Table VIII: Top 10 FOTA installers by number of installation events in the telemetry.
Instagram), and streaming services (e.g., Netﬂix). Similarly,
com.samsung.android.app.omcagent installs 489 packages,
42% of which belong to 32 MNOs (e.g., Vodafone, T-Mobile,
Movistar), 13% to Samsung, 6% to video game publishers (i.e.,
Gameloft and Herocraft), 2% to Amazon, and the remaining
37% to various software publishers including social media (e.g.,
Facebook), and streaming services (e.g., Chilli, Spectrum).
SMS messages without the user’s knowledge). These malware
installations take place possibly due to compromised third-
party vendor code included in the OEM images, like in the
case of the triada trojan that was found in the devices of
several OEMs [23]. Unwanted apps installed under the system
partitions cannot be removed neither by users nor by security
tools, and they require an OEM update.
On the other hand, the package com.google.android.gms
installs only mobile device management apps, i.e., apps that
enable the administration of corporate devices. It is difﬁcult
to know the exact reasons behind these installations, but one
explanation can be that vendors use system updates to ship
apps included in newer commercial agreements with third-
party developers. It is also possible that these apps are shared
components of the vendors’ app ecosystem used for performing
installation initiated by other apps, e.g., vendors’ app stores.
Malicious installations: Since FOTA packages appear to
install a variety of non-system packages, we are interested in
checking if any of those are malware or potentially unwanted
programs (PUP). Prior work shows that privileged installers
(i.e., installers signed with the platform key) can be an important
distribution vector of unwanted apps [48]. We observe 7 out
of the 20 FOTA packages installing at least one unwanted app.
Five of those packages have a low ratio of unwanted apps
installations, varying from 0.1% to 2.8%. We use AVClass
to analyze the unwanted apps installed from these 7 FOTA
packages, ﬁnding that these are identiﬁed as adware, smsreg,
or hiddad. These are PUPs and their behavior may vary
from showing intrusive ads to collecting personal identiﬁable
information [55]. However, the remaining two FOTA packages,
com.android.settings and com.qiku.android.ota, have
an alarmingly high ratio of unwanted apps installed reaching
35% and 92% respectively. The former installs the largest
number of malicious apps and, although most of these are
PUPs, we observe at least four different malware families,
including instances of the triada trojan [37] and the necro
trojan dropper, a trojan found embedded in popular apps
available in Google Play [44]. One likely reason behind the
high number of unwanted apps for this package is the fact
that it captures the installation behavior of multiple vendors;
we identify at least two: Prestigio and EastAeon. Finally, we
observe that com.qiku.android.ota surprisingly installs only
malware which belongs to different malware families including
trojans like triada, necro, and guerilla (a trojan that sends
VIII. DISCUSSION
The stakeholders involved in the operation of FOTA apps
have quite some control over user devices during their entire
life span. Due to their privileged position, they also have a
responsibility to not introduce unnecessary privacy or security
harm. We next provide a discussion on the implications of
the ﬁndings reported in this paper along various dimensions:
security, privacy, and transparency. We are conﬁdent that
our analysis and ﬁndings help clarifying the current FOTA
ecosystem and the update supply chain, and can inform the
design of future processes in this space, regardless of the
adoption of projects Treble and Mainline by vendors.
Security and privacy implications. Google provides recom-
mendations on how to implement FOTA updates [3], [20], but
these are superﬁcial and vague on best security practices. In
fact, developers might opt not to follow them at all as in the
case of some Samsung devices. We have shown that this can
result in potentially privacy-intrusive behaviors or the presence
of third-party SDKs that can leverage the set of permissions
of FOTA apps or the dissemination of personal data to online
servers. Furthermore, we have observed that 2% of the FOTAs
in our dataset are signed by the default AOSP test keys, as
well as 90 devices contains a otacerts.zip ﬁle with these
default AOSP test keys, allowing in the former any app signed
by the same key to run in the same process of the FOTA app
(i.e., sharing permissions and capabilities), and in the latter to
install any update signed with one of these test keys. Any of
these issues can be considered a severe vulnerability which
might allow a malicious actor to gain full control of the device.
The fact that these vulnerabilities have remained undetected
suggests that FOTA apps are subject to little oversight.
Separation of purposes and capabilities. We ﬁnd that many
FOTA apps also include install capabilities for regular, non-
system apps. This conﬁrms that a key part of the supply chain,
the FOTA process, leverages their full control of users’ devices
for secondary purposes (e.g., for commercial partnerships as
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:06 UTC from IEEE Xplore.  Restrictions apply. 
1617
in PPI-like schemes [41], [48]). Because of the privileges they
hold, this can happen without user consent. Even if there are
legitimate use cases for installing non-system apps through the
FOTA app, this opens the door to the installation of unwanted
or potentially harmful apps. Our telemetry analysis provides
evidence of a small but signiﬁcant percentage of unwanted app
installations originating from FOTA apps. These are mostly
PUPs (e.g., adware), but we also identify FOTA apps installing
malware and regular market apps which cannot be removed by
users and require an OEM system update. As a security good
practice, system and non-system updates should be separated
and managed by different processes with different privileges
and installation mechanisms.
Transparency. In our analysis, we show that FOTA capabilities
can be spread over multiple APK ﬁles and even be implemented
by multiple stakeholders for different tasks (e.g., to update
SoC ﬁrmware or MNOs’ speciﬁc apps). In some cases, OEMs
are directly responsible for the updates, while in others they
opt to externalize the development of the FOTA app and the
management of the updates to an external company, e.g., SFD
such as Redstone or Adups. This adds complexity to the supply
chain and increases risk, since it requires understanding and
controlling a wider spectrum of stakeholders. The more actors
in the supply chain, the harder it becomes for users to know
who has the ability to update and install apps in their system.
This also increases the chances that one of the actors along the
supply chain is malicious or implements its own commercial
agreements, which might include Pay-Per-Install programs.
Furthermore, it is very rare for a FOTA apps to be publicly
available or documented, and their privacy policies are hard or
impossible to ﬁnd. This limits the ability of external parties to
asses their security and privacy implications. In this regard, our
analysis reveals that a substantial amount of FOTA apps use
native code and Linux-level commands. Even if there might be
valid uses for that, the behaviors located there remain unknown.
We leave a thorough analysis of this for future work.
Limitations. While analizing FOTA apps dynamically would
provide us with actual evidence of their behavior, there are
limitations inherent to pre-installed apps that prevent us from
doing this. First, we cannot run apps with a sharedUserId
equals to android.uid.system (60% of 1,737 FOTAs) in
existing sandboxing environments, since these apps must be
signed with the same platform key as the device. FOTA apps
also have device-speciﬁc dependencies that prevent us from
running them in any other device. Finally, running the app
might require interacting with a production FOTA’s server,
which we choose to avoid. The telemetry analysis helps us to
overcome this limitation, providing us with data obtained from
real user devices where FOTA apps are originally installed.
IX. RELATED WORK
To the best of our knowledge, this work is the ﬁrst large
scale study to analyze the ecosystem of Android FOTA apps,
including its stakeholders, behaviors, and security and privacy
risks. Recent studies have investigated similar concerns related
to Android pre-installed apps and its supply chain. Our work
complements these previous efforts by exploring another
integral part of the supply chain: the software update process.
The study conducted by Gamba et al. [43] provided a ﬁrst and
general overview of such issues, showing how the openness of
Android’s supply chain, together with the lack of transparency,
opens the door for security and privacy issues derived from
pre-installed software We complement this study showing that
pre-installed FOTA apps allows for a dynamic supply chain,
i.e., it does not ﬁnish once the device is purchased. Elsabag
et al. presented a static analysis tool to automatically discover
unwanted functionality on Android pre-installed ﬁrmware [39].
They applied this method to a dataset of Android ﬁrmware
images from different vendors and reported 850 vulnerabilities,
many of them being zero-day.
Keeping systems updated is a difﬁcult problem and several
studies have explored why [58], [63], [64], [66]. Farhang et al.
performed a study of the ecosystem of Android vulnerability
patches [40]. They found that there are different delays between
the time when a provider offers a patch and when Android
provides the same patch for its OS, the number of patch releases
that appears before or in the same month as the public disclosure
of the vulnerability (94%), and the maximum time between the
ﬁrst line of code related to a vulnerability and the publication
time of a security bulletin (1350 days) [40]. Rula et al. showed
that up to 25% of web requests were coming from software
that was outdated by more than 100 days. Previous work has
also looked at the presence of vulnerabilities and malware on
custom Android ﬁrmwares [34], [68], showing that pre-installed
apps found in Android custom ROMs were leaking user data.
X. CONCLUSIONS
In this paper, we conducted the ﬁrst analysis of the Android
FOTA ecosystem using a dataset of 2,013 FOTA apps collected
in the wild. Our results depict a complex and fragmented
ecosystem, with FOTA apps being developed by different ﬁrst-
and third-party actors. This suggests a dynamic supply chain
where privileged apps are installed and updated by FOTA
apps, together with other pre-installed apps, in the system
partition. We demonstrated how this fragmentation can lead to
potential privacy-intrusive practices, as well as insecure and
potentially harmful behaviors (e.g., FOTA apps signed with
well-known certiﬁcates). Finally, we showed that FOTA apps
can install other non-system apps in user devices, including
abusive malware and PUPs. We hope that our results can
contribute to inform better designs in this space and increase
the security and privacy of the overall Android ecosystem. We
have publicly released our tools [11], [14] and the aggregated
dataset [5] to foster future research on this topic.
ACKNOWLEDGMENTS
The authors would like to thank the anonymous reviewers of
this paper and our shepherd, Prof. Xiaojing Liao, for their valu-
able feedback. This work was partially funded by the US NSF
under grant number CNS-1564329; the Spanish grants ODIO
(PID2019-111429RB-C21 and PID2019-111429RB-C22); the
Region of Madrid grant CYNAMON-CM (P2018/TCS-4566),
co-ﬁnanced by European Structural Funds ESF and FEDER;
NortonLifeLock; Google; and Consumer Reports. Author
Narseo Vallina-Rodriguez is a Co-founder of AppCensus Inc.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:06 UTC from IEEE Xplore.  Restrictions apply. 
1618
REFERENCES
[1] A/B System Update
daemon
https://cs.android.com/android/platform/superproject/+/master:
system/update_engine/. [Online; accessed 26-Mar-2020].
update_engine
android
[2] A/B
Update
System
client
https://cs.android.com/android/platform/superproject/+/master:
frameworks/base/core/java/android/os/UpdateEngine.java.
accessed 26-Mar-2020].
UpdateEngine.java
code.
class.
[Online;
[3] About A/B system updates. https://source.android.com/devices/tech/ota/
ab#overview. [Online; accessed 25-November-2020].
[4] Android Compatibility Program Overview. https://source.android.com/
compatibility/overview. [Online; accessed 31-March-2019].
[5] Android Observatory — Datasets.
https://androidobservatory.com/
datasets/. [Online; accessed 2021-03-17].
[6] Android old update client class.
https://cs.android.com/android/
platform/superproject/+/master:frameworks/base/core/java/android/os/
RecoverySystem.java. [Online; accessed 26-Mar-2020].
[7] Android recovery code.
https://cs.android.com/android/platform/
superproject/+/master:bootable/recovery/recovery.cpp;l=1?q=
Recovery.cpp. [Online; accessed 26-Mar-2020].
[8] Android recovery code installer, VerifyAndInstallpackage method.
https://cs.android.com/android/platform/superproject/+/master:
bootable/recovery/install/install.cpp;l=530.
Nov-2020].
[Online; accessed 30-
[9] Android recovery package template. https://android.googlesource.com/
platform/bootable/recovery/+/93ffa75/updater/. [Online; accessed 26-Mar-
2020].
[10] Androwarn–Yet another static code analyzer for malicious Android
applications. https://github.com/maaaaz/androwarn. [Online; accessed
31-March-2019].
[11] Dextripador. https://github.com/Android-Observatory/Dextripador. [On-
line; accessed 2021-03-17].
[12] Facebook deal makes it
impossible to delete app from Android
smartphones.
https://www.independent.co.uk/life-style/gadgets-and-
tech/news/facebook-app-delete-android-smartphones-samsung-galaxy-
a8719081.html. [Online; accessed 2020-11-28].
[13] Firmware Scanner.
org.imdea.networks.iag.preinstalleduploader.
March-2019].
https://play.google.com/store/apps/details?id=
[Online; accessed 31-
[14] FotaFinder. https://github.com/Android-Observatory/FotaFinder. [Online;
accessed 2021-03-17].
[15] Fresher OS with Projects Treble
https:
//android-developers.googleblog.com/2019/05/fresher-os-with-projects-
treble-and-mainline.html. [Online; accessed 28-Jun-2020].
and Mainline.
[16] Hackers Hijacked ASUS Software Updates to Install Backdoors on
Thousands of Computers. https://motherboard.vice.com/en_us/article/
pan9wn/hackers-hijacked-asus-software-updates-to-install-backdoors-
on-thousands-of-computers. [Online; accessed 31-March-2019].
[17] Here
comes Treble: A modular base
for Android.
https:
//android-developers.googleblog.com/2017/05/here-comes-treble-
modular-base-for.html. [Online; accessed 28-Jun-2020].
[18] Iso 3166-1 alpha-2. https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.
[19] Kryptowire
- KRYPTOWIRE DISCOVERS MOBILE PHONE
FIRMWARE THAT TRANSMITTED PERSONALLY IDENTIFIABLE
INFORMATION (PII) WITHOUT USER CONSENT OR DISCLOSURE
. http://www.kryptowire.com/adups_security_analysis.html.
[Online;
accessed 31-March-2019].
[20] Life of an OTA update. https://source.android.com/devices/tech/ota/
nonab#life-ota-update. [Online; accessed 25-November-2020].
[21] Operating System Market Share Worldwide. https://gs.statcounter.com/
os-market-share. [Online; accessed 22-Jun-2020].
[22] Permissions overview.
https://developer.android.com/guide/topics/
permissions/overview.html. [Online; accessed 31-March-2019].
[23] PHA Family Highlights: Triada. https://security.googleblog.com/2019/
06/pha-family-highlights-triada.html. [Online; accessed 2020-11-30].
[24] Privileged Permissions Whitelisting. https://source.android.com/devices/
tech/conﬁg/perms-whitelist. [Online; accessed 17-September-2020].
[25] There
are now 2.5 billion active Android devices.
https: