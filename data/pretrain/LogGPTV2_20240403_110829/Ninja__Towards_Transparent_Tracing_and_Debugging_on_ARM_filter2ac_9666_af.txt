http://infocenter.arm.com/help/
[12] ARM LTD.
TrustZone Security Whitepaper.
//infocenter.arm.com/help/index.jsp?topic=
/com.arm.doc.prd29-genc-009492c/index.html.
http:
[13] AZAB, A. M., NING, P., SHAH, J., CHEN, Q., BHUTKAR, R.,
GANESH, G., MA, J., AND SHEN, W. Hypervision Across
Worlds: Real-time Kernel Protection from the ARM TrustZone
In Proceedings of the 21st ACM SIGSAC Con-
Secure World.
ference on Computer and Communications Security (CCS’14)
(2014).
[14] BRASSER, F., KIM, D., LIEBCHEN, C., GANAPATHY, V.,
IFTODE, L., AND SADEGHI, A.-R. Regulating ARM TrustZone
devices in restricted spaces. In Proceedings of the 14th Annual
International Conference on Mobile Systems, Applications, and
Services (MobiSys’16) (2016).
[15] BURGUERA, I., ZURUTUZA, U., AND NADJM-TEHRANI, S.
Crowdroid: Behavior-based malware detection system for An-
droid. In Proceedings of the 1st ACM workshop on Security and
Privacy in Smartphones and Mobile Devices (SPSM’11) (2011).
[16] CHAINFIRE. CF-Bench. https://play.google.com/store/
apps/details?id=eu.chainfire.cfbench.
[17] DALL, C., AND NIEH, J. KVM/ARM: The design and im-
In Proceedings of
plementation of the linux ARM hypervisor.
the 19th International Conference on Architectural Support for
Programming Languages and Operating Systems (ASPLOS’14)
(2014).
[18] DASH, S. K., SUAREZ-TANGIL, G., KHAN, S., TAM, K., AH-
MADI, M., KINDER, J., AND CAVALLARO, L. DroidScribe:
Classifying Android malware based on runtime behavior. Mobile
Security Technologies (MoST’16) (2016).
[19] DENG, Z., ZHANG, X., AND XU, D. Spider: Stealthy binary
program instrumentation and debugging via hardware virtualiza-
tion. In Proceedings of the 29th Annual Computer Security Ap-
plications Conference (ACSAC’13) (2013).
[20] DINABURG, A., ROYAL, P., SHARIF, M., AND LEE, W. Ether:
Malware analysis via hardware virtualization extensions. In Pro-
ceedings of the 15th ACM Conference on Computer and Commu-
nications Security (CCS’08) (2008).
[21] EC SPRIDE SECURE SOFTWARE ENGINEERING GROUP.
https://github.com/secure-software-
DroidBench.
engineering/DroidBench.
[22] ENCK, WILLIAM AND GILBERT, PETER AND COX, LANDON P
AND JUNG, JAEYEON AND MCDANIEL, PATRICK AND SHETH,
ANMOL N. TaintDroid: An Information-Flow Tracking System
for Realtime Privacy Monitoring on Smartphones. In Proceed-
ings of the 9th USENIX Symposium on Operating Systems Design
and Implementation (OSDI10) (2010).
[23] FUTUREMARK.
Best
Smartphones.
www.futuremark.com/hardware/mobile.
http://
[24] GOOGLE
INC.
Dalvik
bytecode.
https://
source.android.com/devices/tech/dalvik/dalvik-
bytecode.html.
[25] GUAN, L., LIU, P., XING, X., GE, X., ZHANG, S., YU, M.,
AND JAEGER, T. TrustShadow: Secure execution of unmodiﬁed
applications with ARM trustzone. In Proceedings of the 15th An-
nual International Conference on Mobile Systems, Applications,
and Services (MobiSys’17) (2017).
ptm2human.
[26] HWANG, C.-C.
https://github.com/
hwangcc23/ptm2human.
[27] JAIN, B., BAIG, M. B., ZHANG, D., PORTER, D. E., AND
SION, R. Sok: Introspections on trust and the semantic gap.
In Proceedings of 35th IEEE Symposium on Security and Privacy
(S&P’14) (2014).
[28] JANG, J. S., KONG, S., KIM, M., KIM, D., AND KANG, B. B.
SeCReT: Secure Channel between Rich Execution Environment
In Proceedings of 22nd
and Trusted Execution Environment.
Network and Distributed System Security Symposium (NDSS’15)
(2015).
[29] JING, Y., ZHAO, Z., AHN, G.-J., AND HU, H. Morpheus: au-
tomatically generating heuristics to detect Android emulators. In
Proceedings of the 30th Annual Computer Security Applications
Conference (ACSAC’14) (2014).
[30] KIRAT, DHILUNG AND VIGNA, GIOVANNI. MalGene: Auto-
matic extraction of malware analysis evasion signature. In Pro-
ceedings of the 22nd ACM SIGSAC Conference on Computer and
Communications Security (CCS’15) (2015).
[31] KIRAT, DHILUNG AND VIGNA, GIOVANNI AND KRUEGEL,
CHRISTOPHER. Barecloud: Bare-metal analysis-based evasive
malware detection. In Proceedings of the 23rd USENIX Security
Symposium (USENIX Security’14) (2014).
[32] LENGYEL, T. K., MARESCA, S., PAYNE, B. D., WEBSTER,
G. D., VOGL, S., AND KIAYIAS, A. Scalability, ﬁdelity and
stealth in the drakvuf dynamic malware analysis system.
In
Proceedings of the 30th Annual Computer Security Applications
Conference (ACSAC’14) (2014).
[33] LITTY, L., LAGAR-CAVILLA, H. A., AND LIE, D. Hypervi-
sor support for identifying covertly executing binaries. In Pro-
ceedings of the 17th USENIX Security Symposium (USENIX Se-
curity’08) (2008).
[34] MUTTI, S., FRATANTONIO, Y., BIANCHI, A., INVERNIZZI, L.,
CORBETTA, J., KIRAT, D., KRUEGEL, C., AND VIGNA, G.
BareDroid: Large-scale analysis of Android apps on real devices.
In Proceedings of the 31st Annual Computer Security Applica-
tions Conference (ACSAC’15) (2015).
[35] NETHERCOTE, N., AND SEWARD, J. Valgrind: a framework for
heavyweight dynamic binary instrumentation. In Proceedings of
the 28th ACM SIGPLAN Conference on Programming Language
Design and Implementation (PLDI’07) (2007).
[36] PETSAS, T., VOYATZIS, G., ATHANASOPOULOS, E., POLY-
CHRONAKIS, M., AND IOANNIDIS, S. Rage against the virtual
machine: hindering dynamic analysis of Android malware.
In
Proceedings of the 7th European Workshop on System Security
(EurSec’14) (2014).
[37] PORTOKALIDIS, G., HOMBURG, P., ANAGNOSTAKIS, K., AND
BOS, H. Paranoid Android: Versatile protection for smartphones.
In Proceedings of the 26th Annual Computer Security Applica-
tions Conference (ACSAC’10) (2010).
[38] QIAN, C., LUO, X., SHAO, Y., AND CHAN, A. T. On tracking
In Pro-
information ﬂows through jni in android applications.
ceedings of The 44th Annual IEEE/IFIP International Confer-
ence on Dependable Systems and Networks (DSN’14) (2014).
USENIX Association
26th USENIX Security Symposium    47
[39] SHI, H., ALWABEL, A., AND MIRKOVIC, J. Cardinal pill testing
of system virtual machines. In Proceedings of the 23rd USENIX
Security Symposium (USENIX Security’14) (2014).
[40] SONG, D., BRUMLEY, D., YIN, H., CABALLERO, J., JAGER,
I., KANG, M. G., LIANG, Z., NEWSOME, J., POOSANKAM, P.,
AND SAXENA, P. BitBlaze: A New Approach to Computer Secu-
rity via Binary Analysis. In Proceedings of the 4th International
Conference on Information Systems Security (ICISS’08) (2008).
LO-PHI: Low-
observable physical host instrumentation for malware analysis.
In Proceedings of 23rd Network and Distributed System Security
Symposium (NDSS’16) (2016).
[41] SPENSKY, C., HU, H., AND LEACH, K.
[42] SPISAK, M. Hardware-assisted rootkits: Abusing performance
counters on the ARM and x86 architectures. In Proceedings of the
10th USENIX Workshop on Offensive Technologies (WOOT’16)
(2016).
[43] SUN, H., SUN, K., WANG, Y., AND JING, J. TrustOTP: Trans-
forming smartphones into secure one-time password tokens. In
Proceedings of the 22nd ACM SIGSAC Conference on Computer
and Communications Security (CCS’15) (2015).
[44] SUN, M., WEI, T., AND LUI, J. TaintART: a practical multi-
level information-ﬂow tracking system for Android RunTime. In
Proceedings of the 23rd ACM SIGSAC Conference on Computer
and Communications Security (CCS’16) (2016).
[45] TAM, K., KHAN, S. J., FATTORI, A., AND CAVALLARO, L.
CopperDroid: Automatic reconstruction of Android malware be-
haviors. In Proceedings of 22nd Network and Distributed System
Security Symposium (NDSS’15) (2015).
[46] THE GNU MULTIPLE PRECISION ARITHMETIC LIBRARY. Pi
with GMP. https://gmplib.org/.
[47] UBUNTU.
sloccount.
http://manpages.ubuntu.com/
manpages/precise/man1/compute all.1.html.
[48] VIDAS, T., AND CHRISTIN, N. Evading Android runtime anal-
ysis via sandbox detection. In Proceedings of the 9th ACM Sym-
posium on Information, Computer and Communications Security
(AsiaCCS’14) (2014).
[49] VOGL, S., AND ECKERT, C. Using hardware performance events
for instruction-level monitoring on the x86 architecture. In Pro-
ceedings of the 2012 European Workshop on System Security (Eu-
roSec12) (2012).
[50] XEN PROJECT.
Xen ARM with
ex-
https://wiki.xenproject.org/wiki/
virtualization
tensions.
Xen ARM with Virtualization Extensions.
[51] XINYANG GE, H. V., AND JAEGER, T. SPROBES: Enforcing
In Pro-
Kernel Code Integrity on the TrustZone Architecture.
ceedings of the 2014 Mobile Security Technologies (MoST’14)
(2014).
[52] YAN, LOK KWONG AND YIN, HENG. Droidscope: Seamlessly
reconstructing the OS and Dalvik semantic views for dynamic
Android malware analysis. In Proceedings of the 21st USENIX
Security Symposium (USENIX Security’12) (2012).
[53] YU, R. Android packers: facing the challenges, building solu-
tions. In Proceedings of the Virus Bulletin Conference (VB’14)
(2014).
[54] ZHANG, F., LEACH, K., STAVROU, A., AND WANG, H. Using
hardware features for increased debugging transparency. In Pro-
ceedings of The 36th IEEE Symposium on Security and Privacy
(S&P’15) (2015), pp. 55–69.
[55] ZHANG, Y., YANG, M., XU, B., YANG, Z., GU, G., NING, P.,
WANG, X. S., AND ZANG, B. Vetting undesirable behaviors in
In Proceedings of
Android apps with permission use analysis.
the 20th ACM SIGSAC Conference on Computer and Communi-
cations Security (CCS’13) (2013).
[56] ZHENG, MIN AND SUN, MINGSHEN AND LUI, JOHN CS.
DroidTrace: A ptrace based Android dynamic analysis sys-
In 2014 International
tem with forward execution capability.
Wireless Communications and Mobile Computing Conference
(IWCMC’14) (2014).
48    26th USENIX Security Symposium
USENIX Association
A Debugging Commands
B Domain Switching Time
Command
Description
rr
rw n v
mr a s
mw a v
ba a
bd a
bc
n
nb
nm
c
Output the value of all general purpose registers X0
to X30, the stack pointer, and the program counter.
Write 64-bit value v to the register named n and
output the name the register and its new value.
Output the content of the memory starting from 64-
bit virtual address a with size s. If the virtual ad-
dress does not exist, output Incorrect address.
Write 8-bit value v to the 64-bit virtual address a
and output the address and the 8-bit value stored in
the address. If the virtual address does not exist,
output Incorrect address.
Add a breakpoint at the 64-bit virtual address a and
output the address. If the virtual address does not
exist, output Incorrect address.
Delete the breakpoint at the 64-bit virtual address
a and output the address.
If the virtual address
or breakpoint does not exist, output Incorrect
address.
Clear all the breakpoints and output succeed.
Step to the next instruction and output the instruc-
tion.
Step to the next Java bytecode and output the byte-
code.
Step to the next Java method and output the call
stack.
Continue the execution after a breakpoint and out-
put continued.
We use the PMU counter to count the CPU CYCLES event
and calculate the elapsed time by the delta of the value
and the frequency of the CPU. First we read the PMU
counter twice continuously and calculate the elapsed cy-
cles, and the difference in CPU cycles indicate the time
elapsed between the two continuous PMU read instruc-
tions. Then we insert an SMC instruction between the
two read instructions to trigger a domain switching with
NINJA disabled, and the difference of the CPU cycles
represents the round trip time of the domain switching in
ATF. At last, we measure the CPU cycles with NINJA
enabled, and this time consumption includes the time
consumption of both ATF and our customized exception
handler. To avoid the bias introduced by the CPU fre-
quency scaling, we set the minimum scaling frequency
equal to the maximum one to ensure that the CPU is al-
ways running in the same frequency. The results of 30
experiments are shown in the following table.
ATF Enabled NINJA Enabled
Mean
STD
95% CI
(cid:88)
(cid:88)
0.007 µs
0.202 µs
0.342 µs
0.000 µs
0.013 µs
0.021 µs
[0.007 µs, 0.007 µs]
[0.197 µs, 0.207 µs]
[0.349 µs, 0.334 µs]
(cid:88)
USENIX Association
26th USENIX Security Symposium    49