Game
GNOMEUIINFO_KENU_GAME_TREE (tree)
在顶层菜单里面又定义了超过三十个用来创建常用菜单项的宏定义。这些宏定义可以给每
个菜单项加上小图标（点图）和快捷键。我们只需要定义一个将会在该莱单项被选中时调用执
行的问调函数和一个传递给那个函数的指针（格式为“（cb，data)”）就行了。我们把一些常用的
宏定义列在表17-5里，一会儿就会用到它们。
表17-5
顶层菜单
宏定义
File
New
GNOMEUIINFO_XENU_NEW_ITEM (1abe.hint, cb, data)
uo
GNONEUIINFO_KENU_OPEN_ITEM (cb,data)
Save
GNONEUIINFO_MENU_SAVE_ITEM (eb,data)
Pnot
GNOMEUTINFO_MENU_PRINT_ITEN (cb, data)
Exit
GNONEUIINFO_MENU_EXIT_ITEM (CD, data)
Edit
Cut
GNOKEUIINFO_MENU_CUT_ITEM (cb,dat a)
Copy
CNOMEWIINFO_MENU_COPY_ITEM (cb,data)
Paste
GNOMEUIINFO_KENU_PASTE_ITEK (cD, data)
Settings
Preferences
GNOMEUIINFO_KFNU_PREFERENCES_ITEN (cb, data)
Help
About
GNOMEUIINFO_KENU_ABOUT_ITEM (cb, data)
工具条的情况与菜单是很相似的，我们要用GNOMEUIINFO_ITEM_STOCK(label，tooltip，
callback.stock_id）宏定义来创建一个相应的数组，其中，stock_id是我们打算用为该项目图标的
一个预定义图标的id值。这些预定义图标的完整清单也列在libgnomeui的参考手册里。
另外还有几个特殊的宏定义，包括GNOMEUIINFO_SEPERATOR一一它的作用是创建一条
用来物理性地分隔菜单项或工具条项目的线条：还有GNOMEUIINFO_END—它的作用是表示
数组到此结束，等等。
我们来看看这些数组和宏定义的实际工作情况。
动手试试：莱单和工具条
1)先来创建一个回调函数，当有项目被选中时它会输出相应的文字。如下所示：
#include 
static veid callback (Gtkwidget *button, gpointer data)
g_print (*Iten Selected*):
加入jaVa编程群：524621833
---
## Page 590
572
Linux程序设计
2）现在来创建一个有两个元素的数组，它们将被放在File菜单里。这两个元素一个是用来调
用回调函数的选项，另外一个是退出选项。如下所示：
GnoneUIInfo file_menu|]={
GNCMEUIINFO_ITEM_NONE (°A Menu Item",*This is the statusbar info*,
GNCMEUIINFO_MENU_EXIT_ITEM(gtk_main_quit, NULL).
callback).
GNCMEUIINFO_END
}:
3）接下来创建菜单的结构，它只有一个顶层的文件菜单，它指向我们刚才创建的数组。如
下所示：
GnomeUIInfo menubarI]={
GNOMEUIINPO_END
GNOMEUIINFO_MENU_PILE_TREE(file_menu).
} :
4）工具条的情况与菜单类似。我们创建一个有两个元素的数组，它们一个是打印按钮，一
个是退出按钮。如下所示：
GnomeUIInfotoolbar[]={
GNOMEUIINFO_ITEM_STOCK(*Frint*,*This is another tooltip’,
callback,
GNONEUIINFO_ITEM_STOCK(*Exit*,*Exit the application*,
GNOME_STOCK_PIXHAP_PRINT),
GNOME_STOCK_PIXMAP_EXIT).
gtk_main_quit,
GNOMEUIINFO_END
} :
5）最后，我们创建出菜单和工具条并把它们摆放到窗口里去。如下所示：
int main(int arge, char *argv[1}
Gtkwidget *app:
gnome_init（*example*,*0.1,argc.argv1:
app = gnome_app_new (*example*,*sinple toolbar and menu*):
gnome_app_create_menus (GNoME_APP (app), nenubar):
gnome_app_create_taolbar (GNOME_APP (app), tcolbar);
gtk_widget_show_al1 （app);
gtk_main ();
return 0:
我们将看到一个小窗口，里面有一个菜单和一个工具条。
我们可以对它们进行点击和拖放。如果我们退出后再重新进
人，GNOME还会记得它们原先的位置（见图17-9）！
(4）对话框
当我们想要在GNOME桌面环境里创建能够向用户显示
文字信息的对话框时，就需要调用gnome_message_box_new
函数并给它传去消息的内容文本、我们需要的对话框类型
和我们想安排在对话框里的按钮，所有这些都将被故在一
图17-9
加入jaVa编程群：524621833
---
## Page 591
第17章使用GTK+进行GNOME程序设计
573
个以NULL结束的列表里。接下来要把我们刚才创建的那个对话框素材的“clicked”信号和一
个信号处理器绑定在一起，用户按下的按钮将以一个整数参数的形式传递给信号处理器。然后
我们只需调用gtk_widget_show就可以把这个非模型化的对话框显示在窗口里了。请看下面的
例子：
static void messagebox_clicked(GnomeDialog *dlg. gint button, gpointer data)
switch (button)
case 1: /* user pressed apply*/
case 0:/*user presser ok*/
return:
case 2:/*user pressed close */
gnome_dialog_close(dlg):
GtkWidget*dlg;
dlg = gnome_message_box_new (*This is the message text that appears in the dialog
box'.
GNOME_MESSAGE_BOX_QUESTION,
GNOME_STOCK_BUTTON_OK.
GNOME_STOCK_BUTTON_APPLY,
NULL1:
gtk_signal_connect (GTK_OBJECT(dig),*clicked*,
CTK_SIGNAL_FUNC(messagebox_clicked).
NULL):
gtk_widget_show (d1g):
这段代码创建出一个简单的提问消息框，里面有三个按钮，能够对用户的点击动作做出响应
（见图17-10）。
Question
This is themessage texd that appearsin the dialog box
OK
√Apply
xClose
图17-10
（5）画布素材
画布素材是GNOME素材里最复杂又最多能的了，仅它自己就值得用一章的篇幅来介绍！
GNOME画布是一种高性能的绘图素材，它被设计为应用程序的一种通用性显示引整。它支持
直线和矩形等简单的图形对象，面应用程序还可以定义自己的画布项目以提供更为复杂的显示
加入jaVa编程群：524621833
---
## Page 592
Linux程序设计
效果。
画布素材支持两种着色后端，一个出于速度和效率方面的考虑使用的是Xlib，另一个是基于
Libart的高画面质量的抗失真引擎。
画布素材将负责其中所有项目的绘制和屏幕刷新工作，所以我们不必操心为防止出现图像
闪烁面必须解决的数据缓冲问题。更让人满意的是画布中的项目本身都是素材，所以我们可以
动态地重新定义它们的属性。
如果想创建基于Xlib引攀的画布，我们需要以下几个函数：
Gtkwidget *canvas;
gtk_widget_push_vioual(gdk_imlib_get_visual());
gtk_widget_puah_colormap(gdk_imlib_get_colormap());
canvae= gmcme_canvas_new();
gtk_widget_pop_colornap();
（）enAdodo5pTx
如果我们想在画布上放置图像，就必须调用visual和colormap函数。gnome_canvas_new用来
创建我们的面布。
接下来我们需要调用gnome_canvas_pixels_per_unit来设置画布坐标单位和屏幕显示点阵的
转换比例。
在创建画布项目时，我们需要给它指定一个组，让它成为这个组里的一个成员。这样就能
够以组为单位进行全局性的改动，比如对一个组进行整体移动或隐藏等。
创建画布项目需要调用gnome_canvas_item函数，它的参数是一个以NULL结束的参数列表。
列表里的第一项是它的父组名称，然后是一个宏定义一—它定义了我们将要创建的对象的类型
（矩形、直线、椭圆，等等），接下来是该对象特有的各种属性。
我们来看看怎样才能创建出-一个尺寸为100x100画布单位的红色矩形：
Item = gmcme_canvas_itea_new(gncme_canvas_root(canvas),
GNOHE_TYPE_CANVAS_RZCT
"x1·,0.0,
*x2*.100.0,
"y1",0.0,
"till_color','red",
"y2",100.0,
NULL)1
我们在这个矩形每一个属性值之前加上一个该属性的字符串。我们来看看矩形和椭圆（类
型分别为GNOME_TYPE_CANVAS_ERCT和GNOME_TYPE_CANVAS_ELLIPSE）两者共有的
些参数如表17-6
表17-6
多数
类型
说明
x1
double矩形或圆最左瑞的坐标值
y1
double矩形或圆最顶端的坐标值
加入jaVa编程群：524621833
---
## Page 593
第17章使用GTK+进行GNOME程序设计
575
（续）
参数
类
说明
X2
double
矩形或椭图最右确的坐标慎
dnuhle
矩形或葡圆最底碳的坐标值
fi11_color
string
填充色的X颜色值
out line_color
string
边框线的X颜色值
width ,pixels
wint
以屏幕像素为单位的边框宽度（当画布的缩放比辨变化时边概线不会按比例增改）
width_units
double
以通布坐标单位计算的边瓶宽度（当两布的缩放比例变化时边框线生会按比例缩放）
对矩形和椭圆可以使用同样的结构，这是因为椭圆是被放在一个由给定坐标确定的不可见
矩形框单的。
17.1.4GNOME应用程序
我们已经简要地介绍了GNOME应用程序主要的建筑材料，下面将通过组合这些素材编写-一
个小应用程序来强化我们学到的知识。
GNOME里最灵活和最吸引人的素材就要数布了.因此我们将编写一个图形化的时钟来展
示它的威力。
1.软件的设计要求
我们将设计一个传统的模拟时钟，所以我们需要读取计算机的本地时间并把它转换为时钟
表针的坐标。表针是一些画布项目，我们将每隔--秒就用新坐标值刷新表针的位置。我们还要
画出一个圆形的表盘，它的周围要有一些用来表示小时和分钟的圆点。
当然还要适当地加上几个菜单和工具条。还要加上一个个人偏好对话框，我们将通过这个
对话框隐藏秒针和改变这块画布的缩放比例。
2.我们需要编写哪些代码
我们需要编写几个能够完成下面这些工作的函数：
·创建用户操作界面，包括一个窗口、几个菜单和一个工具条。
一个重画表针的例程。
·个人偏好对话框的创建和处理。
我们开始写程序了。
动手试试：一个GNOME时钟
1）和往常一样，我们通过“#include”语句包括上必要的头文件。我们需要使用一些来自
time库和math库的函数来确定时钟表针的坐标。如下所示：
 apnot
include 
finclude 
2)现在用“#define”语句为我们的时钟定义几个常数。如下所示：
加入jaVa编程群：524621833
---
## Page 594
576
Linux程序设计
define CANVAS_SIZE 100.0
define SBCOND_HAND_LENGTH 40.0
define MIDDLE (CANVAS_SIZE/2.0)
define MINTE_HAND_LENGTH 45.0
define DOT_RADIUS 45.0
define HOUR_HAND_LENGTH 20.0
/*distance from center of the clock to dots */
3）接下来初始化我们的全局变量。如下所示：
Gtkwadget *canvas = NULL;
GnomeCanvasIten *second_hand = NULL;