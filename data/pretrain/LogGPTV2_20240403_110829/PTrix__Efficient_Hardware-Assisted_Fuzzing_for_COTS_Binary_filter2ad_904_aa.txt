title:PTrix: Efficient Hardware-Assisted Fuzzing for COTS Binary
author:Yaohui Chen and
Dongliang Mu and
Jun Xu and
Zhichuang Sun and
Wenbo Shen and
Xinyu Xing and
Long Lu and
Bing Mao
PTrix: Efficient Hardware-Assisted Fuzzing for COTS Binary
Yaohui Chen*
Northeastern University
Zhichuang Sun
Northeastern University
Dongliang Mu*
Penn State University
Wenbo Shen
Zhejiang University
Jun Xu
Stevens Institute of Technology
Xinyu Xing
Penn State University
Long Lu
Northeastern University
Bing Mao
Nanjing University
ABSTRACT
Despite its effectiveness in uncovering software defects, American
Fuzzy Lop (AFL), one of the best grey-box fuzzers, is inefficient
when fuzz-testing source-unavailable programs. AFL’s binary-only
fuzzing mode, QEMU-AFL, is typically 2-5× slower than its source-
available fuzzing mode. The slowdown is largely caused by the
heavy dynamic instrumentation.
Recent fuzzing techniques use Intel Processor Tracing (PT), a
light-weight tracing feature supported by recent Intel CPUs, to re-
move the need of dynamic instrumentation. However, we found that
these PT-based fuzzing techniques are even slower than QEMU-AFL
when fuzzing real-world programs, making them less effective than
QEMU-AFL. This poor performance is caused by the slow extraction
of code coverage information from highly compressed PT traces.
In this work, we present the design and implementation of PTrix,
which fully unleashes the benefits of PT for fuzzing via three novel
techniques. First, PTrix introduces a scheme to highly parallel the
processing of PT trace and target program execution. Second, it
directly takes decoded PT trace as feedback for fuzzing, avoiding
the expensive reconstruction of code coverage information. Third,
PTrix maintains the new feedback with stronger feedback than
edge-based code coverage, which helps reach new code space and
defects that AFL may not.
We evaluated PTrix by comparing its performance with the state-
of-the-art fuzzers. Our results show that, given the same amount
of time, PTrix achieves a significantly higher fuzzing speed and
reaches into code regions missed by the other fuzzers. In addition,
PTrix identifies 35 new vulnerabilities in a set of previously well-
fuzzed binaries, showing its ability to complement existing fuzzers.
CCS CONCEPTS
• Security and privacy → Software security engineering.
*These two authors have contributed equally.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ASIACCS ’19, July 07–12, 2019, Auckland, NZ
© 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-9999-9/18/06...$15.00
https://doi.org/10.1145/1122445.1122456
KEYWORDS
Fuzzing; Intel PT; Path-sensitive
ACM Reference Format:
Yaohui Chen*, Dongliang Mu*, Jun Xu, Zhichuang Sun, Wenbo Shen, Xinyu
Xing, Long Lu, and Bing Mao. 2019. PTrix: Efficient Hardware-Assisted
Fuzzing for COTS Binary. In ASIACCS ’19: ACM Asia Conference on Computer
and Communications Security, July 07–12, 2019, Auckland, New Zeland.. ACM,
New York, NY, USA, 13 pages. https://doi.org/10.1145/1122445.1122456
1 INTRODUCTION
Fuzz-testing, or fuzzing, is an automated software testing technique
for unveiling various kinds of bugs in software. Generally, it pro-
vides invalid or randomized inputs to programs with the goal of
discovering unhandled exceptions and crashes. This easy-to-use
technique has now become the de facto standard in the software
industry for robustness testing and security vulnerability discovery.
Among all the fuzzing tools, American Fuzzy Lop (AFL) requires
essentially no a-priori knowledge to use and can handle com-
plex, real-world software [22]. Therefore, AFL and its extensions
have been widely adopted in practice, constantly discovering un-
known vulnerabilities in popular software packages (such as nginx,
OpenSSL, and PHP).
A major limitation of AFL is its low speed in fuzzing source-
unavailable software. Given a commercial off-the-shelf (COTS)
binary, AFL needs to perform a black box on-the-fly instrumen-
tation using a customized version of QEMU running in the “user
space emulation” mode. Despite the optimizations [9], QEMU still
incurs substantial overhead in this mode and thus slows down AFL’s
binary-only fuzzing. According to the AFL white paper [3], AFL gets
decelerated by 2 - 5× in this QEMU-based mode, which is significant
enough to make AFL much less used for binary-only fuzzing.
Previous research primarily focused on improving AFL’s code
coverage so that it could potentially find more bugs. To the best
of our knowledge, only a few works aimed to improve the efficien-
cy/speed of AFL [5, 29, 37]. Since quickly identifying software flaws
can expedite patches and narrow exploit windows of vulnerabilities,
the goal of this work is to improve AFL’s efficiency at uncovering
bugs in COTS binaries.
Unlike the prior work that achieves efficiency improvement
through syscall re-engineering [37], we propose a new fuzzing
mechanism utilizing a recent hardware tracing feature, namely
Intel PT [1], to enhance the performance of binary-only fuzzing.
We design and develop PTrix, an efficient hardware-assisted fuzzing
tool. The intuition of using PT to accelerate fuzzing is as follows.
The success of AFL is largely attributable to the use of code coverage
ASIACCS ’19, July 07–12, 2019, Auckland, NZ
Chen, et al.
as feedback. To obtain code coverage information, AFL traces the
program execution with QEMU, which incurs significant overhead.
Alternatively, Intel PT can trace program execution on the fly with
negligible overhead. By replacing QEMU with lightweight hardware
tracing, we can improve the efficiency for binary-only fuzzing.
Intel PT stores a program execution trace in the form of com-
pressed binary packets. To implement PTrix, an instinctive reac-
tion [29] is to sequentially trace the program execution, decode
the binary packets, and translate them into code coverage that AFL
needs as feedback. We refer to this implementation as Edge-PT.
However, as we demonstrate in Section 5, Edge-PT introduces sig-
nificant run-time overhead to fuzzing and does not actually benefit
binary-only fuzzing with efficiency improvement. This is due to the
fact that binary packet decoding and code translation both incur
high computation cost.
To address the above issue, we first introduce a parallel, elas-
tic scheme to parse a PT trace. This scheme mounts a concurrent
thread to process the execution trace in parallel with the target
program execution. Due to a hardware restriction, the boundary of
the execution trace can only be updated when PT is paused. This
frequently defers the parsing thread until the next boundary up-
date which may arrive after termination of the target program. To
overcome this limitation, our scheme leverages an elastic approach
to automatically adjust the time window of target program execu-
tion (as well as PT tracing). Our approach ensures that the trace
boundary gets safely and timely updated and the parsing thread
are used efficiently.
Despite the above parallel scheme, we still observe that the pars-
ing thread frequently and dramatically falls behind the program
execution. The major cause is the aforementioned high cost of code
coverage reconstruction. To this end, we replace the code-coverage
feedback used by AFL with a newly invented PT-friendly feedback
mechanism. Our mechanism directly encodes the stream of PT
packets as feedback. This makes PTrix no longer need to perform
code coverage reconstruction, which ultimately enables the parsing
thread to accomplish its job almost at the same time as the target
program finishes executing on the fuzzing input. Facilitated by
these new designs, PTrix executes 4.27x faster than AFL running
in QEMU mode.
Functionality wise, our new feedback does not reduce the guid-
ance that code coverage can provide. In essence, the stream of PT
packets keeps track of the execution paths, which carries not only
information about code coverage but also orders and combinations
among code block transitions. This means our new feedback is
inclusive of that used by AFL. As we demonstrate in Section 5, our
feedback allows PTrix to cover code space quicker, explore code
chunks that would otherwise have not been touched, and follow
through long code paths to unveil deeply hidden bugs. By the time
of writing, PTrix has identified 35 previously unknown security
defects in well-fuzzed programs.
We note that this work is not the first that applies Intel PT
to fuzz testing [5, 8, 29]. To the best of our knowledge, PTrix,
however, is the first work that explores Intel PT to accelerate fuzzing.
Going beyond the higher efficiency it brings, PTrix also exhibits
better fuzzing effectiveness and new ability to find unknown bugs.
While our prototype of PTrix is built upon Linux on x86 platform,
our design can be generally applied to other operating systems
Figure 1: The workflow of the fuzzer residing in AFL.
across various architectures which also support hardware-assisted
execution tracing.
In summary, this paper makes the following contributions.
• We explored Intel PT and utilized it to design an efficient
hardware-assisted fuzzing mechanism to improve efficiency
and effectiveness for binary-only fuzzing.
• We prototyped our proposed fuzzing mechanism with PTrix
on Linux and compared it with other fuzzing techniques,
demonstrating it can accelerate a binary-only fuzzing task
for about 4.27×.
• We devised a rigorous evaluation scheme and showed: (i)
Intuitively applying PT does not produce an efficient binary-
compatible fuzzer; (ii) PTrix not only improves fuzzing effi-
ciency but also has the potential to explore deeper program
behaviors. As of the preparation of this paper, PTrix has
identified 35 unknown software bugs, 11 of them have CVE
IDs assigned.
2 BACKGROUND
Recall that we build PTrix on top of AFL through Intel PT with the
goal of improving efficiency and effectiveness for fuzzing. In this
section, we describe the background of AFL and that of Intel PT.
2.1 American Fuzzy Lop
AFL consists of two main components – an instrumentor and a
fuzzer. Given a target program, the instrumentor performs program
instrumentation by assigning an ID to each basic block (BB) and
inserting a routine at the entry site of that BB. With the routine
along with the ID tied to each BB, the fuzzer follows the workflow
below to interact with the target program and perform continuous
fuzz testing.
As is illustrated in Figure 1, the fuzzer starts a fuzzing round by
scheduling a seed from the pool ( 1○). It then mutates this seed via
approaches such as bit-flip to produce new test cases. Using each of
these test cases as input, the fuzzer launches the target program ( 2○).
With the facilitation of the routine instrumented, the target program
computes hit counts pertaining to the edge indicated by each pair
of consecutively executed BBs ( 3○) and stores this information to a
local bitmap ( 4○). As depicted in Figure 1, the local bitmap is in a
memory region shared by the target program and the fuzzer.
As is shown in the figure, when the execution of the target
program is terminated ( 5○), the fuzzer measures the quality of the
input by comparing the information held in the local bitmap with
that in the global one ( 6○). To be more specific, it examines whether
seed poolglobal bitmaplocal bitmapYmutate①seedforkserverforklocal bitmapentry:③bb0:routine…②input④update⑥cmp⑤exitshared(a)Fuzzer(b)TargetProgramcopyPTrix: Efficient Hardware-Assisted Fuzzing for COTS Binary
ASIACCS ’19, July 07–12, 2019, Auckland, NZ
Figure 2: Example of trace generated by PT (with kernel trac-
ing disabled). The left part shows the instruction sequence
and the right part presents the corresponding PT trace.
there exists new coverage that has not yet been observed in the
global bitmap. By new coverage, it means the edges or the hit counts
tied to the edges that have not yet been observed in previous fuzzing
rounds. For the new coverages identified, the fuzzer includes them
into the global bitmap and then appends the corresponding input to
The fuzzer would then select a new seed for the consecutive rounds
of fuzz testing.
To improve the efficiency, as is illustrated in Figure 1, AFL also
introduces a fork server mode [4], where the target program goes
through execve() syscall and the linking process and then turns to
a fork server. Then for each round of fuzz testing, the fuzzer clones
a new target process from the copy-on-write fork server that is
perpetually kept in a virgin state. With this design, AFL could avoid
the overhead incurred by heavy and duplicate execution prefix, and
thus significantly expedite the fuzzing process.
The aforementioned description indicates how AFL works on
source-available programs. In the situation where source code is
unavailable, the aforementioned technique, however, cannot be
directly applied to a target program because binary instrumenta-
tion could potentially introduce unexpected errors. To address this
issue, AFL performs dynamic instrumentation using the user-mode
emulator of QEMU. Technically, this design does not vary the fuzzer
component residing in AFL. As a result, a binary-only fuzzing pro-
cess still follows the workflow depicted in Figure 1. More details
could be referred to at [3].
2.2 Intel Processor Tracing
Intel PT is a low-overhead hardware feature available in recent Intel
processors (e.g., Skylake series). It works by capturing information
pertaining to software execution. To minimize the storage cost, Intel
PT organizes the information captured in different forms of data
packets. Of all the data packets, Taken Not-Taken (TNT) and Target
IP (TIP) packets are the ones most commonly adopted. Technically
speaking, TNT packets take the responsibility of recording the
selection of conditional branches, whereas TIP packets are used for
tracking down indirect branches and function returns. Along with
some other packets such as Packet Generation Enable (PGE) and
Packet Generation Disable (PGD), Intel PT also utilizes TIP packets
to trace exceptions, interrupts and other events.
Figure 3: System architecture and workflow of PTrix. The
Fuzzer, Proxy, and Target Program are separate processes in
the user space. The Kernel Module is a driver running inside
the kernel space. Components in orange color are newly in-
troduced by PTrix.
Using the packet trace captured by Intel PT along with the corre-
sponding target program in the binary form, a software developer
or a security analyst could fully and perfectly reconstruct the in-
struction trace pertaining to the execution of the target program.
To demonstrate this, we depict the packet trace as well as the target
program in disassembly side by side in Figure 2. As we can observe
from the figure, Intel PT records the address of the entry point with
TIP packet TIP 0x400629 and then the conditional jump with a
TNT packet indicated by TNT 1. Following these two packets, Intel
PT also encloses packets TIP 0x4005e4 and TIP 0x4006b8 in the
packet trace. Using the first two packets shown in the trace, we
can easily infer that the program enters its execution at the site
0x400629 and then takes the true branch redirecting the execution
from the site 0x40067d to the site 0x400692. As is indicated by con-
secutive packets TIP 0x4005e4 and TIP 0x4006b8, we can further
conclude that the target program invokes a subroutine located at
the site 0x4005e4 and then returns to the site 0x4006b8.
3 DESIGN
3.1 Overview
As is depicted in Figure 3, PTrix shares with conventional AFL