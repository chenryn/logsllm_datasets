wire applications we have to assume the fault hypoth-
esis presented in this paper. However, as we will show,
even simple failure scenarios are not tolerated.
The FlexRay startup algorithm is depicted in Figure 5.
The ﬁgure represents states as boxes, arrows are used to
depict state-transitions during algorithm execution. Cir-
cles represent successful startup termination, that is a node
reached SYNC state.
STARTUP_PREPARE
COLDSTART_LISTEN
INTEGRATION_LISTEN
COLDSTART_COL-
LISION_RESOLUTION
INITIALIZE_SCHEDULE
COLDSTART_CON-
SISTENCY_CHECK
INTEGRATION_COLD-
START_CHECK
INTEGRATION_CON-
SISTENCY_CHECK
COLDSTART_GAP
COLDSTART_JOIN
ABORT_STARTUP
Figure 5. FlexRay startup algorithm (taken
from the FlexRay 2.0 speciﬁcation [4, p. 145])
FlexRay deﬁnes dedicated “coldstart” nodes, which are
nodes that are allowed to execute the coldstart. Nodes that
are not coldstart nodes will not participate in the coldstart
process but will only integrate after a sufﬁcient set of cold-
start nodes established synchronous operation. Between the
coldstart nodes we can distinguish the “leading coldstart
node” and the “following coldstart nodes”. This distinction
is made dynamically during the execution of the startup al-
gorithm: after power-on, the nodes execute a “wakeup algo-
rithm” whose purpose is to ensure that all non-faulty nodes
are ready to execute the startup algorithm. The nodes en-
ter then COLDSTART LISTEN where they try to receive
FlexRay messages for at least two TDMA rounds. If a “col-
lision avoidance symbol (CAS)”, which is a low pulse of a
speciﬁed duration, or a correct message header is received
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:30:08 UTC from IEEE Xplore.  Restrictions apply. 
(but no correct message) the timer is reset and COLD-
START LISTEN is reentered. If the message is correct,
the node transits to INITIALIZE SCHEDULE and tries
to integrate. If two TDMA rounds pass by without the re-
ception of either CAS or a correct header, the node transits
from COLDSTART LISTEN to COLDSTART COLLI-
SION RESOLUTION. By doing so it transmits one CAS.
A speciﬁed timeout after this transition the node starts the
TDMA schedule at the ﬁrst slot and will send in its a pri-
ori assigned slot, except it leaves the state before. In the
case of a collision more than one node take this transition
at approximately the same time, COLDSTART COLLI-
SION RESOLUTION shall ensure that only one node re-
mains in this state. The position in the TDMA schedule is
used as a priority mechanism: in a well-conﬁgured FlexRay
system the foremost node in the schedule will be ﬁrst to
transmit a message, all other nodes in STARTUP PRE-
PARE receive this frame and transit to COLDSTART LIS-
TEN. The node that remains in COLDSTART COLLI-
SION RESOLUTION is then the leading coldstart node.
After four rounds in COLDSTART COLLISION RES-
OLUTION, the leading coldstart node transits to COLD-
START CONSISTENCY CHECK and checks whether
there exist nodes that used its messages for integration. If
there exists at least one such node, it tries to keep up com-
munication for one more TDMA round until it ﬁnally con-
cludes synchronized operation reached. If the leading cold-
start node does not become acknowledged, it enters COLD-
START GAP where it waits for one TDMA round. Again,
if CAS or a correct header is received, the node reenters
STARTUP PREPARE. After one TDMA round the lead-
ing coldstart node reenters COLDSTART COLLISION
RESOLUTION and tries again to synchronize other nodes,
this time, however the node does not broadcast a CAS, but
instantly starts with the execution of the TDMA schedule
in the ﬁrst slot. For successful integration of the following
coldstart nodes four messages of the leading coldstart node
(one per TDMA round) are required. That means that each
coldstart attempt consists of four rounds. In addition to this
algorithm, each node has a counter that counts the transi-
tions to COLDSTART COLLISION RESOLUTION; if
this counter reaches a speciﬁed upper bound, the node will
stop trying to become leading coldstart node and remains in
COLDSTART LISTEN.
5.2.2 Model-Checking Results
We focused our model-checking studies on the coldstart
nodes only as it is a prerequisite that these nodes reach syn-
chronous operation before other non-coldstart nodes will
be able to integrate. The model-checking studies found
and conﬁrmed startup scenarios where even simple fail-
ure modes of a node, e.g. a repeating fail-silence faulty
node, prevent a successful system startup. We discuss three
startup scenarios next (the corresponding SAL sources and
diagrams can be found in [15]).
Fault-Free Startup Scenario: We deﬁne the startup time
as the duration starting when at least two nodes leave
STARTUP PREPARE and ending when all non-faulty
nodes reach SYNC. The worst-case startup time in the fault-
free case was computed to be approximately 15 TDMA
rounds. This is a collision scenario, which means all nodes
transit to COLDSTART COLLISION RESOLUTION at
approximately the same time. The leading coldstart node
becomes selected and all other coldstart nodes transit back
to COLDSTART LISTEN. As the nodes need four mes-
sages for integration and the ﬁrst message from the leading
coldstart node is only used for the state transition back to
COLDSTART LISTEN, this coldstart attempt is lost. The
next coldstart attempt of the leading coldstart node is suc-
cessful.
Resetting Leading Coldstart Node Scenario: As the
coldstart algorithm is a priority based algorithm (as it fol-
lows from the unique timeouts), there exists one node with
the highest priority, which is the node with the foremost
slot in the TDMA schedule. This node may exhibit a failure
mode such that it always becomes leading coldstart node
but fails to send messages for four consecutive rounds, say
it is resetting after the third round. It is questionable if the
node-internal coldstart attempts counter is a sufﬁcient mea-
sure to handle that scenario, as there is plenty of time for the
node to completely restart, and hence, resets this counter as
well. As a consequence this repeated fail-silence behavior
of the node prevents the system from reaching synchronous
operation. Such a failure scenario can only be handled by
using an appropriate guardian instance. We designed a cen-
tral guardian that tolerates this failure scenario and leads to
a worst-case startup time of 27rounds + 2slots.
CAS-Babbling Channel: The CAS has a trivial struc-
ture: a low-pulse of a speciﬁed duration. The assumption
that a channel, which may comprise guardian instances, is
not able to produce such a signal by its own can not be guar-
anteed. Hence, we do have to assume that a faulty channel
will continually send CAS. As a consequence, the nodes
may never leave COLDSTART LISTEN, as the reception
of CAS on one channel will cause a node to reset its timer
in this state.
In general
this failure class cannot be solved in a
two-channels system. However,
the probability that a
channel is able to forge a message decreases with the
message’s complexity. Our proposal requires two changes
in the algorithm: a) the node ignores all CAS symbols
and uses only messages, which are less likely to be forged
by a channel, and b) we have to specify unique timeouts
to realize an appropriate contention resolving algorithm.
Using this strategy causes a worst-case startup time of
23rounds.
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:30:08 UTC from IEEE Xplore.  Restrictions apply. 
5.3 Guardian Functionality
Each system that uses a shared communication medium
requires some form of guardian functionality to prevent an
arbitrarily faulty node to permanently block the usage of
the shared resource by non-faulty nodes. During the syn-
chronous operation of time-triggered communication such a
guardian functionality is easy to implement – the guardian
has to grant access to the shared resource to the only one
node that is allowed to broadcast at a particular interval and
the schedule information is speciﬁed off-line. However, as
during startup the nodes and the guardians are not synchro-
nized yet, the guardian functionality in this phase is more
complex and depends on the startup algorithm used.
One possible guardian instance for LTTP is discussed
in [14, Chapter 5]. There, the main building blocks of
a guardian instance are presented from which a particular
guardian can be constructed (for both LTTP and FlexRay).
6 Conclusion
The startup problem in fault-tolerant
time-triggered
communication is often under-estimated. Existing solutions
to this problem assume a fail-silent behavior of the nodes in
the system. This work extends the fault-hypothesis to an ar-
bitrary failure model for individual nodes and shows that the
startup problem can be solved. This approach can be used
to simplify system design and validation of safety-critical
systems.
This paper presented a system model for safety-critical
systems. Following the system model we discussed a gen-
eral startup strategy. From this abstract view on the startup
problem we derived a new startup algorithm for LTTP. This
algorithm encapsulates fault-tolerance capabilities that in-
crease the freedom of the guardian design. We also an-
alyzed the startup algorithm of FlexRay. This startup al-
gorithm is not inherently fault tolerant and requires high
guardian functionality. We used a formal model-checking
process, exhaustive fault simulation, to test the startup al-
gorithms in presence of failures. Model checking proved to
be a valuable tool during the construction of fault-tolerant
algorithms, which we still use to optimize the startup algo-
rithm and guardian instances.
Acknowledgments
This work has been sponsored by the European Network
of Excellence ARTIST2, the European Project DECOS, and
by support of TTTech Computertechnik AG.
References
[1] A. Ademaj, G. Bauer, H. Sivencrona, and J. Torin. Eval-
uation of fault handling of the time-triggered architecture
with bus and star topology. In Proc. of International Con-
ference on Dependable Systems and Networks (DSN 2003),
San Francisco, Jun. 2003.
[2] G. Bauer, H. Kopetz, and W. Steiner. Byzantine fault con-
tainment in ttp/c. Proceedings of the 2002 Intl. Workshop
on Real-Time LANs in the Internet Age (RTLIA 2002), pages
13–16, Jun. 2002.
[3] V. Claesson, H. L¨onn, and N. Suri. An efﬁcient tdma start-up
and restart synchronization approach for distributed embed-
ded systems. IEEE Transactions on Parallel and Distributed
Systems, 15(7), July 2004.
[4] F. Consortium. FlexRay Communications System - Proto-
col Speciﬁcation - Version 2.0. FlexRay Consortium, 2004.
Available at http://www.ﬂexray.com.
[5] K. Driscoll, B. Hall, H. Sivencrona, and P. Zumsteg. Byzan-
tine fault tolerance, from theory to reality.
In Computer
Safety, Reliability, and Security, volume 2788 of Lec-
ture Notes in Computer Science, pages 235–248. Springer-
Verlag, Vienna, Heidelberg, Oct. 2003.
[6] M. J. Fischer, N. A. Lynch, and M. S. Paterson. Impossibility
of distributed consensus with one faulty process. J. ACM,
32(2):374–382, 1985.
[7] IEEE, INC. Standard IEEE 802.4 – Information processing
systems– Local Area networks– Part 4: Token-passing bus
access method and physical layer speciﬁcations, 1990.
[8] L. Kleeman and A. Cantoni. Metastable behavior in digital
IEEE Design & Test of Computers, pages 4–19,
systems.
Dec. 1987.
[9] H. Kopetz. TTP/C Protocol – Version 1.0. TTTech Com-
putertechnik AG, Vienna, Austria, July 2002. Available at
http://www.ttpforum.org.
[10] H. Kopetz, M. Paulitsch, C. Jones, M.-O. Killijian, E. Mars-
den, N. Moffat, D. Powell, B. Randell, A. Romanovsky,
and R. Stroud. Revised version of dsos conceptual model.
Project Deliverable for DSoS (Dependable Systems of Sys-
tems), Research Report 35/2001, Technische Universit¨at
Wien, Institut f¨ur Technische Informatik, Treitlstr. 1-3/182-
1, 1040 Vienna, Austria, 2001.
[11] A. Kr¨uger. Interface Design for Time-Triggered Real-Time
System Architectures. PhD thesis, Technische Universit¨at
Wien, Institut f¨ur Technische Informatik, Treitlstr. 3/3/182-
1, 1040 Vienna, Austria, 1997.
[12] H. L¨onn. Initial synchronization of TDMA communication
in distributed real-time systems.
In 19th IEEE Int. Conf.
on Distributed Computing Systems, pages 370–379, Gothen-
burg, Sweden, 1999.
[13] H. L¨onn and P. Pettersson. Formal veriﬁcation of a TDMA
protocol start-up mechanism. In Paciﬁc Rim International
Symposium on Fault-Tolerant Systems (PRFTS ’97), pages
235–242, Taipei, Taiwan, Dec. 1997. IEEE.
[14] W. Steiner. Startup and Recovery of Fault-Tolerant Time-
Triggered Communication. PhD thesis, Technische Uni-
versit¨at Wien, Institut f¨ur Technische Informatik, Treitlstr.
3/3/182-1, 1040 Vienna, Austria, 2004.
[15] W. Steiner. Model-checking studies of the ﬂexray startup al-
gorithm. Research Report 57/2005, Technische Universit¨at
Wien, Institut f¨ur Technische Informatik, Treitlstr. 1-3/182-
1, 1040 Vienna, Austria, 2005.
[16] W. Steiner and H. Kopetz. The startup problem in fault-
tolerant time-triggered communication. Research Report
06/2006, Technische Universit¨at Wien, Institut f¨ur Technis-
che Informatik, Treitlstr. 1-3/182-1, 1040 Vienna, Austria,
2006.
[17] W. Steiner and M. Paulitsch. The transition from asyn-
chonous to synchronous system operation: An approach for
distributed fault-tolerant systems. In Proceedings of ICDCS,
Vienna, Austria, July 2002. IEEE.
[18] W. Steiner, M. Paulitsch, and H. Kopetz. Multiple failure
correction in the time-triggered architecture. Proc. of 9th
Workshop on Object-oriented Real-time Dependable Sys-
tems (WORDS 2003f), Oct. 2003.
[19] W. Steiner, J. Rushby, M. Sorea, and H. Pfeifer. Model
checking a fault-tolerant startup algorithm: From design ex-
ploration to exhaustive fault simulation. The International
Conference on Dependable Systems and Networks (DSN
2004), Jun. 2004.
[20] C. Temple. Avoiding the Babbling-Idiot Failure in a Time-
Triggered Communication System. In Proceedings of 28th
Annual International Symposium on Fault-Tolerant Comput-
ing, pages 218–227, June 1998.
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:30:08 UTC from IEEE Xplore.  Restrictions apply.