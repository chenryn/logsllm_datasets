## Page 73
可以检查PATH的值：
可以删除对PATH即时生效的设置：
IPython可以保证对PATH的修改即时生效，并且无须再做额外的工作。现在显示一下所有
有趣的是，尽管没有更新配置脚本，但在PATH之前和之后所添加的值都被显示了出来。
最后，打开一个新的IPython shell，查看PATH环境变量的值：
能够即时生效的环境变量。
现在退出IPython shell:
下面显示了使用os.environ的PATH环境变量：
在当前PATH变量开始位置添加/prepended：
[~/tmp]|6> os.environ['PATH']
[~/tmp]|5> env -d PATH
[~/tmp] 14> env *p
IPython 0.8.3.bzr.r96 [on Py 2.5.1]
jmjones@dinkgutsy:tmp$
Do you really want to exit ([y]/n)?
[/tmp]l3> os.environ['PATH']
[~/tmp]|7>
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:
6>
[~/tmp]|6> os.environ['PATH']
/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/appended
[~/tmp]]5> env PATH-=/prepended:
 ('add': [('PATH', ':/appended')], ‘pre': [('PATH', */prepended:')], ‘set':(0}
/sbin:/bin:/usr/games:/appended'
'PATH' (for next session)
/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/appended'
/home/jmjones/apps/lb/bin:/home/jmjones/bin:/usr/local/sbin:
www.TopSage.com
X
IPython | 59
PDG
---
## Page 74
rec指令简单地对它后面的模式执行递归查找。在本例中，*py就是所谓的“模式”。为
例如，要查找所有的Django目录中的.py文件，可以这样操作：
另一个在sh profile中非常有用的特征是mglob。mglob的许多一般性设置语法非常简单。
正如所期望的，PATH的值已经恢复到开始修改之前的情况了。
注意，一些以某些环境变量开始的进程会保留这些值，直到发生了修改。也就是说，
留着。实际上，删除的设置已经起作用了，IPython将会删除对这些项的即时生效指令。
可以看到，在告诉IPython删除对PATH的即时生效的设置之后，之前设置的PATH值仍然保
9
了显示Django目录中所有的目录，可以使用下面的命令：
下次IPython shell启动时，PATH的值就不一样了：
1107:./docs/conf.py
1106:./django/conf/project_template/_init_.py
1104:./django/conf/project_template/manage.py
1103: ./django/conf/project_template/urls.py
0: ./setup.py,
Ad:1 qo 
1.
:./examples/views.py
./examples/manage.py
./examples/urls.py
第2章
/sbin:/bin:/usr/games'
/home/jmjones/local/python/psa/bin:/home/jmjones/apps/lb/bin:
#
1：
0:
Value:
scripts
docs
django
build
extras
tests
examples
www.TopSage.com
鼎
ODG
---
## Page 75
译注1：
开始，并在此基础上进行工作。
这个非美化打印（
通过pager运行它的字符串表示（str()的执行结果）。结果看起来类似这样：
page有一个选项-r。该选项告诉page不要美化打印（译注1）
结果对象传递给它。随后，page函数启动less。
这里，将系统shell命令ps aux的执行结果保存到变量p中。之后调用page，并且将处理
pager是less，但也可以使用其他的pager。标准用法如下：
函数。page可以用来打印对象并且可以通过一个pager来运行。在许多系统中，默认的
如果正在处理的对象表示起来太过复杂，无法在一屏中完全显示，可以试试页（page)
page
或侦测工具。本节将简要介绍IPython中能够帮助搜集信息的一些特性。
的、与正在使用的代码和对象相关的信息。它可以执行信息挖掘，感觉就像是一个调查
IPython不仅是一个能够帮助你完成工作的shell，它也可以像工具一样，搜集各种类型
信息搜集
未能在这里作一一介绍。
我们以上所介绍的只是sh profile中的几个部分。sh profile还有一些特征和特征选项，但
这个返回文件或目录的列表中执行。
mglob命令返回一个Python列表对象。因此，在Python中可以执行的操作，同样也可以在
188996 10076?
Mar07
ilus-cd-burner/mapping-d',
In [3]: page -I p
In [2]: page p
In [1]: p = !ps aux 
['USER
'root
root
美化打印是指自动格式化输出产生统一的缩进格式。
55950.0 2.840214829412?
（non-pretty-print）的结果确实是不够完美。我们建议还是从美化打印
PID %CPU %MEM
PID %CPU %MEM
0.1 5116
Mar07
'jmjones 5568 0.0 1.0 232004 10608 ? S
www.TopSage.com
1964
5116
VSZ
VSZ
1964
RSS
RSS
S
TTY
S
Mar07
Mar07
STAT START
Ss Mar07
STAT START
'jmjones 5593 0.0 0.9
（pretty print）对象，而是
0:01p
0:00 /sbin/init',
TIME COMMAND',
TIME COMMAND'
IPython | 61
PDG
---
## Page 76
myfunc()函数：
pdoc函数可以打印传递给它的函数的注释信息。这里使用pdoc处理在pdef示例中使用的
这样使用。即使函数的源代码不可用，只要能够访问,pyc文件或egg文件，pdef函数就依
pdef函数忽略了注释和返回语句，而输出了函数的声明部分。可以在任何可调用函数中
个函数，并且该函数有注释和返回语句：
魔力pdef函数能打印输出任何可被调用对象的定义名或是函数声明。这个示例创建了一
pfile函数能够运行对象的文件，但前提是对象所包含的文件能够找得到。例如：
（x-）
pdoc
然可以使用。
pdef
62
始运行的。显然，如果所包含的文件仅仅是egg或.pyc文件，pfile函数将不起作用。
本例引人了os模块，并且通过less运行。这个示例能够帮助你理解一个代码段是如何开
pfile
Class Docstring:
In[3]:pdocmyfunc
In. [2]: pdef myfunc
r"""OS routines for Mac, NT, or Posix depending on what system we're on.
In [2]: pfile os
In [1]:import os
This exports:
myfunc(a,b,C，d)
 return something by using a, b, c, d to do something
第2章
return a, b, c, d
www.TopSage.com
PDG
---
## Page 77
也可以获得模块中所包含的类的相关信息：
我们可以从模块自身获得相应的信息：
函数提供了诸如类型、基础类、命名空间和注释等信息。例如，有一个模块如下所示：
pinfo函数以及相关的工具使用起来非常方便。很难想象如果没有它们会怎么样。pinfo
pinfo
注意：
Definition:
Docstring:
File:
String Form:
In [3]: pinfo some_module.Foo
Docstring:
String Form:
Base Class:
In [1]: import some_module
Constructorinformation:
Namespace:
Type:
File:
Type:
class Bam:
Namespace:
#!/usr/bin/env python
class Foo:
从??操作符可以看到与使用魔力函数%pdef、%pdoc和%pfile可以看到的相同的信息。优先选
择的方法是？？。
def
def
def
pass
pass
init_(self):
init_(self):
init_(self):
Interactive
www.TopSage.com
IPython | 63
ODG
---
## Page 78
但是，在对象名前面或后面的两个问号（??）可以提供更多的信息：
在对象名之前或之后的问号（?）提供了与pinfo相同的功能：
此外，还可以获得类的实例的相关信息：
64
件。这正是pinfo函数的特点。也正因为如此，它比其他函数更为常用。
的源代码。由于仅仅是对类进行查询，因此??提供的结果是类的源码，而不是整个文
可以看到，
String Form:
Docstring:
String Form:
Base Class:
In [6]:?f
Docstring:
String Form:
Base Class:
In [5]:
In [4]: f = some_module.Foo()
class Foo:
File:
String Form:
Type:
In [8]: some_module.Foo ??
Namespace:
Base Class:
Type:
In [7]:f?
Definition:
Source:
Namespace:
Namespace:
Type:
Namespace:
Type:
my Foo class
my Foo class
第2章
def
，??不但能够提供pinfo提供给我们的全部信息，而且还能够提供所请求对象
_init_(self):
Some_module.Foo(self)
some_module.Foo
classobj
Interactive
some_module.Foo
instance
Interactive
some_module.Foo
instance
Interactive
some_module.Foo
/home/jmjones/code/some_module.py
instance
pinfo f
Interactive
www.TopSage.com
DG
---
## Page 79
示符下输入magic来查看帮助文档。
们这里只简略地描述psearch函数，如果你想要知道更多的信息，可以通过在IPython提
psearch魔力函数不但能够依据名称查找Python对象，还可以使用通配符协助查找。我
接下来是psource针对模块中的一个函数的应用示例：
这是一个psource针对模块中的一个类的应用示例：
psearch
的应用示例：
数。为将其显示出来，psource通过运行page显示源代码。以下是一个psource针对模块
psource函数显示定义的元素的源代码，不论该元素是一个模块或是模块中的类或函
psource
In [4]: psource some_other_module.baz
class Bam:
class Bar:
class Foo:
#1/usr/bin/env python
In [2]: psource some_other_module
In [1]: import some_other_module
def