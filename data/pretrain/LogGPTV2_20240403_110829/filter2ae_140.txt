# 起因
在最近的一次FOFA目标C段扫描过程中，我偶然发现了一个潜在的目标站点，并将其记录下来。下班后，我决定对该站点进行进一步的渗透测试。

# 目标环境信息
- 操作系统：Windows
- Web框架：ThinkPHP v3.2.3
- 开启了调试模式（Debug Mode）
- 网站根目录：`D:\web1\abc.com\wwlsoeprsueords\`
  
使用自动化工具尝试扫描日志文件时发现，尽管TP3注入漏洞未被触发，但在`/addons/Runtime/Logs/admin/`路径下并没有找到任何日志文件。推测日志文件可能采用不同的命名格式，例如 `1606510976-20_11_28.log` (时间戳-年_月_日)。

此外，通过FOFA搜索该IP地址还发现了开放于999端口上的phpMyAdmin页面，且确认该站点并未使用CDN服务。

# 寻找SQL注入点
考虑到这类活动推广页面通常会在进度查询功能处存在SQL注入风险，于是利用Burp Suite抓取相关请求并构造以下payload以验证是否存在注入漏洞：
```
username=123' and (extractvalue(1,concat(0x7e,(select user()),0x7e))))--+&id=13
```
确实检测到了一个具有root权限的SQL注入点。随后，利用sqlmap工具运行如下命令进行进一步探索：
```bash
python3 sqlmap.py -r 1.txt --random-agent --dbms=mysql --os-shell
```
尽管尝试了几种不同类型的注入方式，但直接通过`--os-shell`选项获取操作系统shell时遇到了问题，始终返回"No output"错误提示，这可能是由于某种安全防护机制的存在导致。

# 获取Web Shell
鉴于之前已定位到phpMyAdmin登录界面，接下来尝试枚举数据库用户及其密码：
```bash
python3 sqlmap.py –r 1.txt --string="Surname" --users --passwords
```
成功获取到解码后的明文凭据后，尝试用root账号登录却遭遇失败(`#1045 无法登录服务器`)；转而使用另一个账户(dog1)则成功登录。

为了实现远程代码执行，首先检查MySQL是否允许文件导入导出操作：
```sql
SHOW GLOBAL VARIABLES LIKE "%secure%";
```
结果显示`secure_file_priv`为NULL，意味着禁止此类操作。因此改为通过修改全局变量开启一般日志记录功能并将输出重定向至指定PHP脚本文件中：
```sql
SET GLOBAL general_log = "ON";
SET GLOBAL general_log_file='D:/web1/abc.com/robots.php';
```
接着，在SQL查询窗口内输入恶意PHP代码片段，最后借助AntSword连接新生成的日志文件从而获得web shell控制权。

# 绕过限制上线CS
查看`phpinfo()`输出得知大量敏感函数已被禁用，使得直接执行系统命令变得困难。为此，选择上传ASPX木马绕过限制，这里采用了冰蝎3作为载体。虽然现在可以间接执行命令，但仍面临一些访问限制问题。

确认目标机器上无任何防病毒软件运行后，生成Cobalt Strike beacon并通过HTTP协议上传至服务器根目录，随后启动执行完成上线过程。利用Metasploit中的mimikatz模块轻松提升至SYSTEM级别权限。

最后，通过注册表查询RDP服务状态及默认端口号，并创建隐藏管理员账户以便后续远程桌面登录维护。同时清理日志记录、设置自启动项确保长期控制该主机。