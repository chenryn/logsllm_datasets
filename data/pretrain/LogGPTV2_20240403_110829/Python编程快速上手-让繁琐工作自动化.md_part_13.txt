'bat'
>>> 'The ' + spam[-1] + ' is afraid of the ' + spam[-3] + '.'
'The elephant is afraid of the bat.'
4.1.3 利用切片取得子列表
就像下标可以从列表中取得单个值一样，“切片”可以从列表中取得多个值，
结果是一个新列表。切片输入在一对方括号中，像下标一样，但它有两个冒号分隔
的整数。请注意下标和切片的不同。
 spam[2]是一个列表和下标（一个整数）。
 spam[1:4]是一个列表和切片（两个整数）。
在一个切片中，第一个整数是切片开始处的下标。第二个整数是切片结束处的
第4章 列表
下标。切片向上增长，直至第二个下标的值，但不包括它。切片求值为一个新的列
表值。在交互式环境中输入以下代码：
>>> spam = ['cat', 'bat', 'rat', 'elephant']
>>> spam[0:4]
['cat', 'bat', 'rat', 'elephant']
>>> spam[1:3]
['bat', 'rat']
>>> spam[0:-1]
['cat', 'bat', 'rat']
作为快捷方法，你可以省略切片中冒号两边的一个下标或两个下标。省略第一
个下标相当于使用 0，或列表的开始。省略第二个下标相当于使用列表的长度，意
味着分片直至列表的末尾。在交互式环境中输入以下代码：
>>> spam = ['cat', 'bat', 'rat', 'elephant']
>>> spam[:2]
['cat', 'bat']
>>> spam[1:]
['bat', 'rat', 'elephant']
>>> spam[:]
['cat', 'bat', 'rat', 'elephant']
4.1.4 用len()取得列表的长度
len()函数将返回传递给它的列表中值的个数，就像它能计算字符串中字符的个
数一样。在交互式环境中输入以下代码：
>>> spam = ['cat', 'dog', 'moose']
>>> len(spam)
3
4.1.5 用下标改变列表中的值
一般情况下，赋值语句左边是一个变量名，就像spam = 4。但是，也可以使用
列表的下标来改变下标处的值。例如，spam[1] = 'aardvark'意味着“将列表spam下
标1处的值赋值为字符串'aardvark'。在交互式环境中输入以下代码：
>>> spam = ['cat', 'bat', 'rat', 'elephant']
>>> spam[1] = 'aardvark'
>>> spam
['cat', 'aardvark', 'rat', 'elephant']
>>> spam[2] = spam[1]
>>> spam
['cat', 'aardvark', 'aardvark', 'elephant']
>>> spam[-1] = 12345
>>> spam
['cat', 'aardvark', 'aardvark', 12345]
4.1.6 列表连接和列表复制
+操作符可以连接两个列表，得到一个新列表，就像它将两个字符串合并成一
Python编程快速上手——让繁琐工作自动化
个新字符串一样。*操作符可以用于一个列表和一个整数，实现列表的复制。在交
互式环境中输入以下代码：
>>> [1, 2, 3] + ['A', 'B', 'C']
[1, 2, 3, 'A', 'B', 'C']
>>> ['X', 'Y', 'Z'] * 3
['X', 'Y', 'Z', 'X', 'Y', 'Z', 'X', 'Y', 'Z']
>>> spam = [1, 2, 3]
>>> spam = spam + ['A', 'B', 'C']
>>> spam
[1, 2, 3, 'A', 'B', 'C']
4.1.7 用del 语句从列表中删除值
del 语句将删除列表中下标处的值，表中被删除值后面的所有值，都将向前移
动一个下标。例如，在交互式环境中输入以下代码：
>>> spam = ['cat', 'bat', 'rat', 'elephant']
>>> del spam[2]
>>> spam
['cat', 'bat', 'elephant']
>>> del spam[2]
>>> spam
['cat', 'bat']
del 语句也可用于一个简单变量，删除它，作用就像是“取消赋值”语句。如
果在删除之后试图使用该变量，就会遇到NameError错误，因为该变量已不再存在。
在实践中，你几乎永远不需要删除简单变量。del 语句几乎总是用于删除列表
中的值。
4.2 使用列表
当你第一次开始编程时，很容易会创建许多独立的变量，来保存一组类似的值。
例如，如果要保存我的猫的名字，可能会写出这样的代码：
catName1 = 'Zophie'
catName2 = 'Pooka'
catName3 = 'Simon'
catName4 = 'Lady Macbeth'
catName5 = 'Fat-tail'
catName6 = 'Miss Cleo'
事实表明这是一种不好的编程方式。举一个例子，如果猫的数目发生改变，程序就
不得不增加变量，来保存更多的猫。这种类型的程序也有很多重复或几乎相等的代码。
考虑下面的程序中有多少重复代码，在文本编辑器中输入它并保存为allMyCats1.py：
print('Enter the name of cat 1:')
catName1 = input()
print('Enter the name of cat 2:')
catName2 = input()
print('Enter the name of cat 3:')
第4章 列表
catName3 = input()
print('Enter the name of cat 4:')
catName4 = input()
print('Enter the name of cat 5:')
catName5 = input()
print('Enter the name of cat 6:')
catName6 = input()
print('The cat names are:')
print(catName1 + ' ' + catName2 + ' ' + catName3 + ' ' + catName4 + ' ' +
catName5 + ' ' + catName6)
不必使用多个重复的变量，你可以使用单个变量，包含一个列表值。例如，下面
是新的改进版本的allMyCats1.py程序。这个新版本使用了一个列表，可以保存用户输
入的任意多的猫。在新的文件编辑器窗口中，输入以下代码并保存为allMyCats2.py。
catNames = []
while True:
print('Enter the name of cat ' + str(len(catNames) + 1) +
' (Or enter nothing to stop.):')
name = input()
if name == '':
break
catNames = catNames + [name] # list concatenation
print('The cat names are:')
for name in catNames:
print(' ' + name)
运行这个程序，输出看起来像这样：
Enter the name of cat 1 (Or enter nothing to stop.):
Zophie
Enter the name of cat 2 (Or enter nothing to stop.):
Pooka
Enter the name of cat 3 (Or enter nothing to stop.):
Simon
Enter the name of cat 4 (Or enter nothing to stop.):
Lady Macbeth
Enter the name of cat 5 (Or enter nothing to stop.):
Fat-tail
Enter the name of cat 6 (Or enter nothing to stop.):
Miss Cleo
Enter the name of cat 7 (Or enter nothing to stop.):
The cat names are:
Zophie
Pooka
Simon
Lady Macbeth
Fat-tail
Miss Cleo
使用列表的好处在于，现在数据放在一个结构中，所以程序能够更灵活的处理
数据，比放在一些重复的变量中方便。
4.2.1 列表用于循环
在第2章中，你学习了使用循环，对一段代码执行一定次数。从技术上说，循环是
Python编程快速上手——让繁琐工作自动化
针对一个列表或类似列表中的每个值，重复地执行代码块。例如，如果执行以下代码：
for i in range(4):
print(i)
程序的输出将是：
0
1
2
3
这是因为range(4)的返回值是类似列表的值。Python认为它类似于[0, 1, 2, 3]。
下面的程序和前面的程序输出相同：
for i in [0, 1, 2, 3]:
print(i)
前面的 for 循环实际上是在循环执行它的子句，在每次迭代中，让变量依次设
置为列表中的值。
注意 在本书中，我使用术语“类似列表”，来指技术上称为“序列”的数据类型。
但是，你不需要知道这个术语的技术定义。
一个常见的 Python 技巧，是在 for循环中使用 range(len(someList))，迭代列表
的每一个下标。例如，在交互式环境中输入以下代码：
>>> supplies = ['pens', 'staplers', 'flame-throwers', 'binders']
>>> for i in range(len(supplies)):
print('Index ' + str(i) + ' in supplies is: ' + supplies[i])
Index 0 in supplies is: pens
Index 1 in supplies is: staplers
Index 2 in supplies is: flame-throwers
Index 3 in supplies is: binders
在前面的循环中使用range(len(supplies))很方便，这是因为，循环中的代码可以访
问下标（通过变量i），以及下标处的值（通过supplies[i]）。最妙的是，range(len(supplies))
将迭代supplies的所有下标，无论它包含多少表项。
4.2.2 in 和not in 操作符
利用in和not in操作符，可以确定一个值否在列表中。像其他操作符一样，in
和 not in 用在表达式中，连接两个值：一个要在列表中查找的值，以及待查找
的列表。这些表达式将求值为布尔值。在交互式环境中输入以下代码：
>>> 'howdy' in ['hello', 'hi', 'howdy', 'heyas']
True
>>> spam = ['hello', 'hi', 'howdy', 'heyas']
>>> 'cat' in spam
False
>>> 'howdy' not in spam
第4章 列表
False
>>> 'cat' not in spam
True
例如，下面的程序让用户输入一个宠物名字，然后检查该名字是否在宠物列表
中。打开一个新的文件编辑器窗口，输入以下代码，并保存为myPets.py：
myPets = ['Zophie', 'Pooka', 'Fat-tail']
print('Enter a pet name:')
name = input()
if name not in myPets:
print('I do not have a pet named ' + name)
else:
print(name + ' is my pet.')
输出可能像这样：
Enter a pet name:
Footfoot
I do not have a pet named Footfoot
4.2.3 多重赋值技巧
多重赋值技巧是一种快捷方式，让你在一行代码中，用列表中的值为多个变量
赋值。所以不必像这样：
>>> cat = ['fat', 'black', 'loud']
>>> size = cat[0]
>>> color = cat[1]
>>> disposition = cat[2]
而是输入下面的代码：
>>> cat = ['fat', 'black', 'loud']
>>> size, color, disposition = cat
变量的数目和列表的长度必须严格相等，否则Python将给出ValueError：
>>> cat = ['fat', 'black', 'loud']