_Out_opt_
LPDWORD lpNumberOfBytesWritten,
_Inout_opt_ LPOVERLAPPED lpOverlapped);
Our driver has to export its handling of a write operation capability by assigning a function pointer to the
IRP_MJ_WRITE index of the MajorFunction array in the driver object:
Chapter 4: Driver from Start to Finish
60
DriverObject->MajorFunction[IRP_MJ_WRITE] = BoosterWrite;
BoosterWrite must have the same prototype as all major function code handlers:
NTSTATUS BoosterWrite(PDEVICE_OBJECT DeviceObject, PIRP Irp);
Client / Driver Communication Protocol
Given that we use WriteFile for client/driver communication, we now must define the actual semantics.
WriteFile allows passing in a buffer, for which we need to define proper semantics. This buffer should
contain the two pieces of information required so the driver can do its thing: the thread id and the priority
to set for it.
These pieces of information must be usable both by the driver and the client. The client would supply the
data, and the driver would act on it. This means these definitions must be in a separate file that must be
included by both the driver and client code.
For this purpose, we’ll add a header file named BoosterCommon.h to the driver project. This file will also
be used later by the user-mode client.
Within this file, we need to define the data structure to pass to the driver in the WriteFile buffer,
containing the thread ID and the priority to set:
struct ThreadData {
ULONG ThreadId;
int Priority;
};
We need the thread’s unique ID and the target priority. Thread IDs are 32-bit unsigned integers, so we
select ULONG as the type. The priority should be a number between 1 and 31, so a simple 32-bit integer
will do.
We cannot normally use DWORD - a common type defined in user mode headers - because it’s not defined
in kernel mode headers. ULONG, on the other hand, is defined in both. It would be easy enough to define
it ourselves, but ULONG is the same anyway.
Creating the Device Object
We have more initializations to do in DriverEntry. Currently, we don’t have any device object and so
there is no way to open a handle and reach the driver. A typical software driver needs just one device object,
with a symbolic link pointing to it, so that user-mode clients can obtain handles easily with CreateFile.
Creating the device object requires calling the IoCreateDevice API, declared as follows (some SAL
annotations omitted/simplified for clarity):
Chapter 4: Driver from Start to Finish
61
NTSTATUS IoCreateDevice(
_In_
PDRIVER_OBJECT DriverObject,
_In_
ULONG DeviceExtensionSize,
_In_opt_
PUNICODE_STRING DeviceName,
_In_
DEVICE_TYPE DeviceType,
_In_
ULONG DeviceCharacteristics,
_In_
BOOLEAN Exclusive,
_Outptr_
PDEVICE_OBJECT *DeviceObject);
The parameters to IoCreateDevice are described below:
• DriverObject - the driver object to which this device object belongs to. This should be simply the
driver object passed to the DriverEntry function.
• DeviceExtensionSize - extra bytes that would be allocated in addition to sizeof(DEVICE_OB-
JECT). Useful for associating some data structure with a device. It’s less useful for software drivers
creating just a single device object, since the state needed for the device can simply be managed by
global variables.
• DeviceName - the internal device name, typically created under the \Device Object Manager
directory.
• DeviceType - relevant to some type of hardware-based drivers. For software drivers, the value
FILE_DEVICE_UNKNOWN should be used.
• DeviceCharacteristics - a set of flags, relevant for some specific drivers. Software drivers specify
zero or FILE_DEVICE_SECURE_OPEN if they support a true namespace (rarely needed by software
drivers). More information on device security is presented in chapter 8.
• Exclusive - should more than one file object be allowed to open the same device? Most drivers should
specify FALSE, but in some cases TRUE is more appropriate; it forces a single client at a time for the
device.
• DeviceObject - the returned pointer, passed as an address of a pointer. If successful, IoCreat-
eDevice allocates the structure from non-paged pool and stores the resulting pointer inside the
dereferenced argument.
Before calling IoCreateDevice we must create a UNICODE_STRING to hold the internal device name:
UNICODE_STRING devName = RTL_CONSTANT_STRING(L"\\Device\\Booster");
// alternatively,
// RtlInitUnicodeString(&devName, L"\\Device\\Booster");
The device name could be anything but should be in the \Device object manager directory. There are
two ways to initialize a UNICODE_STRING with a constant string. The first is using RtlInitUnicode-
String, which works just fine. But RtlInitUnicodeString must count the number of characters in
the string to initialize the Length and MaximumLength appropriately. Not a big deal in this case, but
there is a quicker way - using the RTL_CONSTANT_STRING macro, which calculates the length of the
string statically (at compile time), meaning it can only work correctly with literal strings.
Now we are ready to call the IoCreateDevice function:
Chapter 4: Driver from Start to Finish
62
PDEVICE_OBJECT DeviceObject;
NTSTATUS status = IoCreateDevice(
DriverObject,
// our driver object
0,
// no need for extra bytes
&devName,
// the device name
FILE_DEVICE_UNKNOWN, // device type
0,
// characteristics flags
FALSE,
// not exclusive
&DeviceObject);
// the resulting pointer
if (!NT_SUCCESS(status)) {
KdPrint(("Failed to create device object (0x%08X)\n", status));
return status;
}
If all goes well, we now have a pointer to our device object. The next step is to make this device object
accessible to user-mode callers by providing a symbolic link. Creating a symbolic link involves calling
IoCreateSymbolicLink:
NTSTATUS IoCreateSymbolicLink(
_In_ PUNICODE_STRING SymbolicLinkName,
_In_ PUNICODE_STRING DeviceName);
The following lines create a symbolic link and connect it to our device object:
UNICODE_STRING symLink = RTL_CONSTANT_STRING(L"\\??\\Booster");
status = IoCreateSymbolicLink(&symLink, &devName);
if (!NT_SUCCESS(status)) {
KdPrint(("Failed to create symbolic link (0x%08X)\n", status));
IoDeleteDevice(DeviceObject);
// important!
return status;
}
The IoCreateSymbolicLink does the work by accepting the symbolic link and the target of the link.
Note that if the creation fails, we must undo everything done so far - in this case just the fact the device
object was created - by calling IoDeleteDevice. More generally, if DriverEntry returns any failure
status, the Unload routine is not called. If we had more initialization steps to do, we would have to
remember to undo everything until that point in case of failure. We’ll see a more elegant way of handling
this in chapter 6.
Once we have the symbolic link and the device object set up, DriverEntry can return success, indicating
the driver is now ready to accept requests.
Before we move on, we must not forget the Unload routine. Assuming DriverEntry completed
successfully, the Unload routine must undo whatever was done in DriverEntry. In our case, there are
two things to undo: device object creation and symbolic link creation. We’ll undo them in reverse order:
Chapter 4: Driver from Start to Finish
63
void BoosterUnload(_In_ PDRIVER_OBJECT DriverObject) {
UNICODE_STRING symLink = RTL_CONSTANT_STRING(L"\\??\\Booster");
// delete symbolic link
IoDeleteSymbolicLink(&symLink);
// delete device object
IoDeleteDevice(DriverObject->DeviceObject);
}
Notice the device object pointer is extracted from the driver object, as it’s the only argument we get in the
Unload routine. It’s certainly possible to store the device object pointer in a global variable and access it
here directly, but there is no need. Global variables usage should be kept to a minimum.
Client Code
At this point, it’s worth writing the user-mode client code. Everything we need for the client has already
been defined.
Add a new C++ Console Application project to the solution named Boost (or some other name of your
choosing). The Visual Studio wizard should create a single source file with some “hello world” type of
code. You can safely delete all the contents of the file.
First, we add the required #includes to the Boost.cpp file:
#include 
#include 
#include "..\Booster\BoosterCommon.h"
Note that we include the common header file created by the driver to be shared with the client.
Change the main function to accept command line arguments. We’ll accept a thread ID and a priority
using command line arguments and request the driver to change the priority of the thread to the given
value.
int main(int argc, const char* argv[]) {
if (argc  \n");
return 0;
}
//
// extract from command line
//
int tid = atoi(argv[1]);
int priority = atoi(argv[2]);
Chapter 4: Driver from Start to Finish
64
Next, we need to open a handle to our device. The “file name” to CreateFile should be the symbolic
link prepended with “\\.\”. The entire call should look like this:
HANDLE hDevice = CreateFile(L"\\\\.\\Booster", GENERIC_WRITE,
0, nullptr, OPEN_EXISTING, 0, nullptr);
if (hDevice == INVALID_HANDLE_VALUE)
return Error("Failed to open device");
The Error function simply prints some text with the last Windows API error:
int Error(const char* message) {
printf("%s (error=%u)\n", message, GetLastError());
return 1;
}
The CreateFile call should reach the driver in its IRP_MJ_CREATE dispatch routine. If the driver is
not loaded at this time - meaning there is no device object and no symbolic link - we’ll get error number
2 (file not found).
Now that we have a valid handle to our device, it’s time to set up the call to Write. First, we need to
create a ThreadData structure and fill in the details:
ThreadData data;
data.ThreadId = tid;
data.Priority = priority;
Now we’re ready to call WriteFile and close the device handle afterwards:
DWORD returned;
BOOL success = WriteFile(hDevice,
&data, sizeof(data),
// buffer and length
&returned, nullptr);
if (!success)
return Error("Priority change failed!");
printf("Priority change succeeded!\n");
CloseHandle(hDevice);
The call to WriteFile reaches the driver by invoking the IRP_MJ_WRITE major function routine.
At this point, the client code is complete. All that remains is to implement the dispatch routines we declared
on the driver side.
Chapter 4: Driver from Start to Finish
65
The Create and Close Dispatch Routines
Now we’re ready to implement the three dispatch routines defined by the driver. The simplest by far are
the Create and Close routines. All that’s needed is completing the request with a successful status. Here
is the complete Create/Close dispatch routine implementation:
NTSTATUS BoosterCreateClose(PDEVICE_OBJECT DeviceObject, PIRP Irp) {
UNREFERENCED_PARAMETER(DeviceObject);
Irp->IoStatus.Status = STATUS_SUCCESS;
Irp->IoStatus.Information = 0;
IoCompleteRequest(Irp, IO_NO_INCREMENT);
return STATUS_SUCCESS;
}
Every dispatch routine accepts the target device object and an I/O Request Packet (IRP). We don’t care
much about the device object, since we only have one, so it must be the one we created in DriverEntry.
The IRP on the other hand, is extremely important. We’ll dig deeper into IRPs in chapter 6, but we need
to take a quick look at IRPs now.
An IRP is a semi-documented structure that represents a request, typically coming from one of the
managers in the Executive: the I/O Manager, the Plug & Play Manager, or the Power Manager. With
a simple software driver, that would most likely be the I/O Manager. Regardless of the creator of the IRP,
the driver’s purpose is to handle the IRP, which means looking at the details of the request and doing what
needs to be done to complete it.
Every request to the driver always arrives wrapped in an IRP, whether that’s a Create, Close, Read, Write,
or any other IRP. By looking at the IRP’s members, we can figure out the type and details of the request
(technically, the dispatch routine itself was pointed to based on the request type, so in most cases you
already know the request type). It’s worth mentioning that an IRP never arrives alone; it’s accompanied
by one or more structures of type IO_STACK_LOCATION. In simple cases like our driver, there is a single
IO_STACK_LOCATION. In more complex cases where there are filter drivers above or below us, multiple
IO_STACK_LOCATION instances exist, one for each layer in the device stack. (We’ll discuss this more
thoroughly in chapter 7). Simply put, some of the information we need is in the base IRP structure, and
some is in the IO_STACK_LOCATION for our “layer” in the device stack.
In the case of Create and Close, we don’t need to look into any members. We just need to set the completion
status of the IRP in its IoStatus member (of type IO_STATUS_BLOCK), which has two members:
• Status (NTSTATUS) - indicating the status this request should complete with.
• Information (ULONG_PTR) - a polymorphic member, meaning different things in different request
types. In the case of Create and Close, a zero value is just fine.
To complete the IRP, we call IoCompleteRequest. This function has a lot to do, but basically it
propagates the IRP back to its creator (typically the I/O Manager), and that manager notifies the client
that the operation has completed and frees the IRP. The second argument is a temporary priority boost
Chapter 4: Driver from Start to Finish
66
value that a driver can provide to its client. In most cases for a software driver, a value of zero is fine
(IO_NO_INCREMENT is defined as zero). This is especially true since the request completed synchronously,
so no reason the caller should get a priority boost. More information on this function is provided in chapter
7.
The last thing to do is return the same status as the one put into the IRP. This may seem like a useless
duplication, but it is necessary (the reason will be clearer in a later chapter).
You may be tempted to write the last line of BoosterCreateClose like so:
return Irp->IoStatus.Status; So that the returned value is always the same as the one
stored in the IRP. This code is buggy, however, and will cause a BSOD in most cases. The reason
is that after IoCompleteRequest is invoked, the IRP pointer should be considered “poison”,
as it’s more likely than not that it has already been deallocated by the I/O manager.
The Write Dispatch Routine
This is the crux of the matter. All the driver code so far has led to this dispatch routine. This is the one
doing the actual work of setting a given thread to a requested priority.
The first thing we need to do is check for errors in the supplied data. In our case, we expect a structure of
type ThreadData. The first thing is to do is retrieve the current IRP stack location, because the size of
the buffer happens to be stored there:
NTSTATUS BoosterDeviceControl(PDEVICE_OBJECT, PIRP Irp) {
auto status = STATUS_SUCCESS;
ULONG_PTR information = 0;
// track used bytes
// irpSp is of type PIO_STACK_LOCATION
auto irpSp = IoGetCurrentIrpStackLocation(Irp);
The key to getting the information for any IRP is to look inside the IO_STACK_LOCATION associated with
the current device layer. Calling IoGetCurrentIrpStackLocation returns a pointer to the correct
IO_STACK_LOCATION. In our case, there is just one IO_STACK_LOCATION, but in the general case there
could be more (in fact, a filter may be above our device), so calling IoGetCurrentIrpStackLocation
is the right thing to do.
The main ingredient in an IO_STACK_LOCATION is a monstrous union identified with the member named
Parameters, which holds a set of structures, one for each type of IRP. In the case of IRP_MJ_WRITE,
the structure to look at is Parameters.Write.
Now we can check the buffer size to make sure it’s at least the size we expect:
Chapter 4: Driver from Start to Finish
67
do {
if (irpSp->Parameters.Write.Length (Irp->UserBuffer);
if (data == nullptr || data->Priority Priority > 31) {
status = STATUS_INVALID_PARAMETER;
break;
}
UserBuffer is typed as a void pointer, so we need to cast it to the expected type. Then we check the
priority value, and if not in range change the status to STATUS_INVALID_PARAMETER and break out of
the “loop”.
Notice the order of checks: the pointer is compared to NULL first, and only if non-NULL, the
next check takes place. If data is NULL, however, no further checks are made. This behavior
is guaranteed by the C/C++ standard, known as short circuit evaluation.
The use of static_cast asks the compiler to do check if the cast makes sense. Technically,
the C++ compiler allows casting a void pointer to any other pointer, so it doesn’t look that
useful in this case, and perhaps a C-style cast would be simpler to write. Still, it’s a good habit
to have, as it can catch some errors at compile time.
We’re getting closer to our goal. The API we would like to use is KeSetPriorityThread, prototyped as
follows:
KPRIORITY KeSetPriorityThread(
_Inout_ PKTHREAD Thread,
_In_
KPRIORITY Priority);
The KPRIORITY type is just an 8-bit integer. The thread itself is identified by a pointer to a KTHREAD
object. KTHREAD is one part of the way the kernel manages threads. It’s completely undocumented, but
we need the pointer value anyway. We have the thread ID from the client, and need to somehow get a
hold of a pointer to the real thread object in kernel space. The function that can look up a thread by its ID
is aptly named PsLookupThreadByThreadId. To get its definition, we need to add another #include:
Chapter 4: Driver from Start to Finish
68