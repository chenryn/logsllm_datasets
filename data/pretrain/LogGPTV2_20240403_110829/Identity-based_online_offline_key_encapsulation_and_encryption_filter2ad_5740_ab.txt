De(cid:12)nition 2. Chosen Plaintext Security (CPA). An
ID-based online/o(cid:15)ine encryption scheme is semantically se-
cure against chosen plaintext insider attack (IND-IOE-CPA)
if no PPT adversary has a non-negligible advantage in the
following game:
1. The challenger C runs Set and gives the resulting param
to adversary A. It keeps msk secret.
2. In the (cid:12)rst stage, A makes a number of queries to the
extraction oracle OExt(·) simulated by C. A submits an
identity ID and gets the result of Ext(msk, ID). These
queries can be asked adaptively. That is, each query
may depend on the answers of previous ones.
3. A produces two messages m0, m1 and an identity ID
∗
.
C chooses a random bit b ∈ {0, 1} and computes a
∗
is sent to
ciphertext C
A.
∗
= EncOn(mb, EncO(cid:11) (), ID
∗
). C
4. A makes a number of new queries as in the (cid:12)rst stage
with the restriction that it cannot query the extraction
oracle with ID
∗
.
5. At the end of the game, A outputs a bit b
′
′
b
= b.
and wins if
A’s advantage is de(cid:12)ned as
AdvIndIOE−CPA(A) = | Pr[b
′
= b] − 1
2
|
Next we give the de(cid:12)nition of a higher security standard:
chosen ciphertext security. The main di(cid:11)erence is the ad-
ditional decryption oracle query. The complete de(cid:12)nition is
given as follow:
De(cid:12)nition 3. Chosen Ciphertext Security (CCA).
An ID-based online/o(cid:15)ine encryption scheme is semantical-
ly secure against chosen ciphertext insider attack (IND-IOE-
CCA) if no PPT adversary has a non-negligible advantage
in the following game:
1. The challenger C runs Set and gives the resulting param
to adversary A. It keeps msk secret.
2. In the (cid:12)rst stage, A makes a number of queries to the
tion oracle for the result of Ext(msk, ID).
following oracles simulated by C:
(a) OExt(·): A submits an identity ID to the extrac-
(b) ODec(·,·): A submits a ciphertext C and a re-
ceiver identity ID to the oracle for the result of
Dec(C, DID). The result is made of a message if
the decryption is successful. Otherwise, a symbol
⊥ is returned for rejection.
These queries can be asked adaptively. That is, each
query may depend on the answers of previous ones.
3. A produces two messages m0, m1 and an identity ID
∗
.
C chooses a random bit b ∈ {0, 1} and computes a
is sent to
ciphertext C
A.
= EncOn(mb, EncO(cid:11) (), ID
). C
∗
∗
∗
4. A makes a number of new queries as in the (cid:12)rst stage
with the restriction that it cannot query the decryption
∗
oracle with (C
) and the extraction oracle with
ID
, ID
∗
∗
.
5. At the end of the game, A outputs a bit b
′
′
b
= b.
and wins if
A’s advantage is de(cid:12)ned as
AdvIndIOE−CCA(A) = | Pr[b
′
= b] − 1
2
|
2.3 Deﬁnition of Online/Ofﬂine KEM
An ID-based online/o(cid:15)ine KEM (IBOOKEM) consists of
the following (cid:12)ve polynomial time algorithms:
• Set: same as IBOOE.
• Ext: same as IBOOE.
• (cid:22)C, K ← KEMO(cid:11) (1k, param, r) is a deterministic algo-
rithm that takes a security parameter k, the global
parameters param and a randomness r to generate an
o(cid:15)ine ciphertext (cid:22)C and a session key K. We require
for the same randomness r, the same (K, (cid:22)C) should be
generated.
55
• C ← KEMOn(1k, param, (cid:22)C, ID) is a deterministic algo-
rithm that takes a security parameter k, the global
parameters param, an o(cid:15)ine ciphertext (cid:22)C, an identity
ID to generate a ciphertext C.
• (K/ ⊥) ← DeKEM(1k, param, C, DID) is a deterministic
algorithm that takes a security parameter k, the global
parameters param, a ciphertext C, a secret key of the
receiver DID to generate a key K or ⊥ which indicates
failure of the decapsulation.
∗
∗
and a string K
Security of IBOOKEM.
For simplicity, we omit the notation of 1k and param from
the input arguments of the above algorithms in the rest of
this paper.
2.3.1
The notions of CPA and CCA of IBOOKEM are simi-
lar to those for IBOOE, except that there are no challenge
messages to encrypt.
Instead, in the challenge phase the
challenger chooses a random bit b ∈ {0, 1} and the adver-
sary is given a ciphertext C
, which will be
the session key encapsulated by the ciphertext if b = 1, or
a random string if b = 0. The adversary makes adaptive
∗
decapsulation queries (for CCA security, except on C
, once
′
revealed), and eventually outputs a guess b
We also de(cid:12)ne another lower level of security: one-wayness.
For one-wayness, the adversary A is asked to output an i-
dentity ID
after making extraction oracle queries. Then it
∗
and is asked to output a session key
is given a ciphertext C
K
under the
∗
secret key of ID
is not submitted to
the extraction oracle. Note that no decapsulation query is
allowed in this case. Schemes that are CPA or CCA secure
are also one-way.
∗
. The adversary wins if the decapsulation of C
A’s advantage (in breaking one-wayness) is de(cid:12)ned as
∗
and ID
is equal to K
for b.
∗
∗
∗
AdvIOKEM−OW(A) = Pr[A wins]
3. NEW CPA-SECURE ID-BASED ONLINE
/ OFFLINE ENCRYPTION
We (cid:12)rst explain the intuition behind the design of our
scheme. The ID-based private key of our scheme uses the
exponent-inversion key of the IBE proposed by Sakai and
Kasahara [26, 8] (SK − IBE scheme). Then we prove the
security of our scheme assuming the SK − IBE scheme is
secure.
3.1 Our Construction
Set: The KGC selects a generator P ∈ G and randomly
chooses s ∈R Z∗
q . It sets Ppub = sP . Let n be the length
of the message to be encrypted. Also let H1 : {0, 1}∗ → Z∗
and H2 : {0, 1}∗ → {0, 1}n be some cryptographic hash
q
functions. The public parameters param and master secret
key msk are given by
param = (G, GT , q, P, Ppub, n, H1, H2)
msk = s
Ext: To generate a secret key for a user with identity ID ∈
{0, 1}∗
, the KGC computes:
q and computes:
−1P
EncO(cid:11) : Randomly generates x, α, β ∈R Z∗
DID = (H1(ID) + s)
R ← ^e(P, P )x
)
T0 ← x
(
T1 ← xβP
′ ← H2(R, T1)
αP + Ppub
c
′
Outputs the o(cid:15)ine ciphertext (cid:22)C = (T0, T1, (c
, α, β)). Note
that ^e(P, P ) can be pre-computed by the KGC as part of
the param so that no pairing is needed in this phase.
EncOn: To encrypt a message m ∈ {0, 1}n to ID, at the online
stage, computes:
)
(
H1(ID) − α
′ ⊕ m
c ← c
′
Outputs the ciphertext C = (T0, T1, t
1, c).
1 ← β
′
−1
mod q
t
Dec: To decrypt using secret key DID, computes
R ← ^e(T0 + t
′
1T1, DID)
m ← c ⊕ H2(R, T1)
and outputs m.
3.2 Security Analysis
the SK − IBE is CPA-secure in the random oracle model.
Theorem 1. Our IBOOE scheme is CPA-secure, assuming
Proof. Assume there is an adversary A who can break
the CPA-security of our scheme, we construct another ad-
versary B to break the CPA-security of SK − IBE scheme.
The setup algorithm and the extraction algorithm are the
same as those in SK − IBE scheme. Thus the challenger
can forward the parameters from SK − IBE to A.
It can
also forward any extraction oracle request to the extraction
oracle from SK − IBE.
We just need to show how to construct a challenge ci-
phertext of our scheme, from the challenge ciphertext of
SK − IBE. Given a challenge ciphertext of SK − IBE which
∗
is in the form of C
= ⟨X, C⟩, where
C = m
∗ ⊕ H4(^e(P, P )x)
X = x(H1(ID)P + Ppub),
∗
q , where H4 is
for a challenge message m
a hash function modeled as a random oracle. We generate
′
C
) as follows.
∗
∗
∗
1, c
1 , t
∗
0 , T
and some x ∈ Z∗
= (T
1. Pick a random R ∈ G.
2. Pick a random s ∈ Zq.
3. Set T
0 = X − R.
∗
∗
4. Set T
1 = sR.
∗
5. Set t
1 = 1/s.
∗
6. Set c
= C.
It is a perfect simulation, as we can see the following facts:
1. We express R = rP and de(cid:12)ne α = H1(ID) − r/x.
∗
Since R is random, so does α. We can then express T
0
in the following way.
0 = X − R
∗
T
= x(H1(ID)P + Ppub) − rP
= x((H1(ID) − r/x)P + Ppub)
= x(αP + Ppub)
2. We de(cid:12)ne β = s(H1(ID) − α). Such β always exist-
s since we are working in Zq. Moreover, since α is
random, so does β. We have:
T
∗
1 = sR
= srP
= s(xH1(ID) − xα)P
= xβP
∗
3. We can then express t
1 by t
1 = 1/s = (H1(ID) −
∗
α)/(β).
4. H2(^e(P, P )x, T
∗
1 ) = H4(^e(P, P )x), which we can im-
plicitly de(cid:12)ne in the random oracle model.
4. ONLINE/OFFLINE KEM AND GENER-
IC CCA-SECURE TRANSFORMATION
In this section, we propose a generic transformation from
any IBOOKEM (with one-wayness) to IBOOE with CCA-
security. We (cid:12)rst give a generic transformation, then we give
an instantiation of the IBOOKEM.
4.1 Our Transformation
Set: Same as the underlying IBOOKEM, except the system
parameter also contains the descriptions of two additional
hash functions H and H
which map any arbitrary string to
some appropriate domains.
′
Ext: Same as the underlying IBOOKEM.
EncO(cid:11) : To generate an o(cid:15)ine ciphertext, generates a ran-
domness r and computes:
((cid:22)CKEM , K) ← KEMO(cid:11) (r)
Outputs the o(cid:15)ine ciphertext (cid:22)C = {(cid:22)CKEM , K, r}.
EncOn: To encrypt a message m ∈ {0, 1}n to ID, at the online
stage, computes:
C1 ← KEMOn((cid:22)CKEM , ID)
C2 ← H(K, C1, m) ⊕ r 3
(K, C1) ⊕ m
C3 ← H
Outputs the ciphertext C = {C1, C2, C3}.
Dec: To decrypt using secret key DID, split {C1, C2, C3} ← C
and computes:
′
(K/ ⊥) ← DeKEM(C1, DID)