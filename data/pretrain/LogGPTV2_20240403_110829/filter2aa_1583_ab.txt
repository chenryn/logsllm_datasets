// Microsoft.SharePoint.Portal.WebControls.ContactLinksSuggestionsMicroView 
protected override DataSet GetDataSet() 
{ 
    base.StopProcessingRequestIfNotNeeded(); 
    if (​!this.Page.IsPostBack​ || this.Hidden) 
    { 
        return null; 
    } 
    DataSet dataSet = new DataSet(); 
... 
    if (​this.IsInitialPostBack​) 
    { 
        this.PopulateDataSetFromSuggestions(dataSet); 
    } 
    else 
    { 
        this.​PopulateDataSetFromCache​(dataSet); 
    } 
... 
This method should process a ​PostBack ​request and the control should not be ​Hidden​. Also,
the ​IsInitialPostBack​ property should be ​false​:  
// Microsoft.SharePoint.Portal.WebControls.ContactLinksSuggestionsMicroView 
protected bool IsInitialPostBack 
{ 
    get 
    { 
        return this.Page.IsPostBack && string.IsNullOrEmpty( 
SPRequestParameterUtility.GetValue(this.Page.​Request​, 
"​__SUGGESTIONSCACHE__​", SPRequestParameterSource.​Form​)); 
    } 
} 
This just means that our request should have the ​__SUGGESTIONSCACHE__ form parameter.
Now let’s look at where the ​GetDataSet()​ method is invoked: 
// Microsoft.SharePoint.Portal.WebControls.PrivacyItemView 
protected override object GetQueryResults(object obj) 
{ 
... 
    DataSet dataSet = this.GetDataSet(); 
... 
// Microsoft.SharePoint.Portal.WebControls.DataResultBase 
protected override void OnPreRender(object sender, System.EventArgs e) 
{ 
... 
        this.m_objQueryResults = this.GetQueryResults(this.m_objQueryHandle); 
... 
// Microsoft.SharePoint.Portal.WebControls.QueryResultBase 
protected override void OnPreRender(object sender, System.EventArgs e) 
{ 
... 
    base.OnPreRender(sender, e); 
} 
// Microsoft.SharePoint.Portal.WebControls.ContactLinksSuggestionsMicroView 
protected override void OnPreRender(object sender, System.EventArgs e) 
{ 
    base.OnPreRender(sender, e); 
... 
Our target method can be invoked during the pre-rendering phase if it is ​PostBack and the
request contains a ​__SUGGESTIONSCACHE__​ form parameter. 
Now let’s look at how we can exploit the ​DataSet.ReadXml() ​call if we can control its input.
This method reads XML schema and data into the ​DataSet​. We can define ​DataTable ​with a
column of any Type and if we provide a value for this column then the server uses
XmlSerializer​ ​to deserialize the instance of this Type from its XML representation: 
// System.Data.Common.ObjectStorage 
public override object ConvertXmlToObject(XmlReader xmlReader, 
XmlRootAttribute xmlAttrib) 
{ 
... 
        XmlSerializer ​xmlSerializer​ = 
ObjectStorage.GetXmlSerializer(this.​DataType​, xmlAttrib); 
        obj = ​xmlSerializer.Deserialize​(xmlReader); 
    } 
    return obj; 
} 
[Code Ref #3] 
As we described in ​one of our previous research papers​, ​XmlSerializer ​cannot be
considered safe if an attacker can control Type. In this case, we can invoke an arbitrary public
method (static or non-static) of arbitrary public Type with arbitrary arguments. There is an
additional requirement: the “base” Type and all the arguments should be serializable by
XmlSerializer but it is not a big problem and we can find many types and methods that allow
us to get RCE. For example: 
//Microsoft.Office.Server.Internal.Charting.UI.WebControls.ImageListItemCollec
tion 
public static ImageListItemCollection LoadFromBase64String(string 
base64string​) 
{ 
    byte[] ​buffer​ = Convert.FromBase64String(​base64string​); 
    ImageListItemCollection result; 
    using (MemoryStream ​memoryStream​ = new MemoryStream(​buffer​)) 
    { 
        BinaryFormatter binaryFormatter = new BinaryFormatter(); 
        result = 
(ImageListItemCollection)​binaryFormatter.Deserialize​(memoryStream); 
    } 
    return result; 
} 
It uses unsafe deserialization (​BinaryFormatter​) of a controlled ​base64string ​value. The
XML payload that invokes this method: 
  ​ 
      ​ 
        ​LoadFromBase64String​ 
  ​{Base64_BinarryFormatter_Payload}​ 
For our RCE attack, we can use the following ASPX page: 
For an RCE attack, we need to generate a ​BinaryFormatter ​payload with the desired
commands (for example by using the ​YSoSerial.Net tool​), put it into our XML payload, place the
entire payload in ​TextBox​, ​and then click the ​Submit​ ​button on our site page.  
Abusing nested properties/attributes 
Usually when CMS systems use user-defined templates or markup for content visualization and
for the dynamic content, they allow access to some properties or attributes of specific objects. In
most cases, users can get the values of these properties or attributes and include them into
generated content. For some CMS systems, such as SharePoint, users might be able to assign
their own values to these properties or attributes. Since any application can have objects with
properties that have sensitive information, the CMS should filter out the access to such
dangerous properties or attributes. This filter forbids access to dangerous objects and/or
properties.  
If a system works only with one level of properties/attributes developers can verify that the list of
such properties does not contain unsafe items relatively easily. However, many systems also
support nested properties and it makes this type of validation very difficult as relationships
between nested properties do not have a strict hierarchy – for example the ​Parent ​property can
give us access to the upper level. As a result, an attacker can build a path to the properties that
has a security impact on the server or application. The attacker might modify this information if
granted write access or with read access gain sensitive information for further attacks. 
Generally abusing read access is harder, and attackers might have additional problems
compared to abusing write access, for example, they may need to find a way to get the obtained
value back from the target server. However, we were able to achieve arbitrary code execution in
the SharePoint server for both cases: by abusing read and write access. 
Abusing write access to nested properties in SharePoint 
CVE-2020-1069 
ASPX markup supports setting values of nested properties. It might be called “​subproperties​”
and we can use any number of intermediate nested properties as long as they are public. For
the final property, whose value we are modifying, in addition to the public setter it should not be
marked by the ​DesignerSerializationVisibility.Hidden​ attribute. 
We mentioned that the key component for safe mode of site pages is ​SPPageParserFilter​,
which decides what restrictions to apply based on the value of ​VirtualPath​. ​If we can change
this value, we can fool the page parser filter so that it does not apply any restrictions to our
markup and we could include unsafe controls or directives. 
We can use the ​ParseControl() method as the starting point for our attack. Here is an
example of its usage in the allowed ​WikiContentWebpart​ ​control: 
// Microsoft.SharePoint.WebPartPages.WikiContentWebpart 
protected override void CreateChildControls() 
{ 
... 
 if (this.Page.AppRelativeVirtualPath == null) 
 { 
   this.Page.AppRelativeVirtualPath = "~/current.aspx"; 
 } 
 Control obj = this.Page.​ParseControl​(this.Directive + this.​Content​, ​false​); 
 this.AddParsedSubObject(obj); 
} 
We see that the ​WikiContentWebpart.Content ​property is passed to the ​ParseControl()
method.
It
is
called
with
​false
​in
the
​ignoreParserFilter
​argument
so
SPPageParserFilter is not ignored. This is fine because we are going to change the value of
VirtualPath​. Let’s find out how this value is defined for this particular case:  
// System.Web.UI.TemplateControl 
public Control ParseControl(string content, bool ignoreParserFilter) 
{ 
  return TemplateParser.ParseControl(content, 
VirtualPath.Create(this.​AppRelativeVirtualPath​), ignoreParserFilter); 
} 
[Code Ref #4] 
VirtualPath is created based on the value from the ​Page.AppRelativeVirtualPath
property. It is public and is not marked by the ​DesignerSerializationVisibility.Hidden
attribute: 
// System.Web.UI.TemplateControl 
[EditorBrowsable(EditorBrowsableState.Advanced)] 
[Browsable(false)] 
public string AppRelativeVirtualPath 
[Code Ref #4] 
The values of the ​Page.AppRelativeVirtualPath ​and ​WikiContentWebpart.Content
properties can be set by ASPX markup in our site page: 
        ​ 
            ​{Some ASPX markup}   
        ​ 
There is one problem with this markup – the ​Page ​property of the ​WikiContentWebpart is not
assigned
by
the
time
ASP.NET
parser
tries
to
set
a
“​newvalue”
​to
Page.AppRelativeVirtualPath​. To solve this problem, we need to delay this assignment.
For example using Data Binding, our ​Page ​property will be assigned by the time our expression
is evaluated: 
​'​> 
        ​ 
             ​{Some ASPX markup}  
        ​ 
Our site page for this attack: 
      ​'> 
We are assigning the path of the ​settings.aspx application page to the ​ToolTip property of
MenuItem
​and
it
will
be
bound
to
our
​Page.AppRelativeVirtualPath​.
The
SPPageParserFilter will think that it is processing ASPX markup of the application page and
will not apply restrictions of safe mode and therefore allowing any unsafe controls. We are using
the ​ObjectDataSource​ ​control that launches a calculator. 
Abusing read access to nested properties in SharePoint 
CVE-2020-1103 
The attack with read access to the nested properties is more complicated and requires a few
elements. The first one is ​ControlParameter ​that binds the value of a property of a control to a
parameter
object
and
can
be
used
in
​ParameterCollection
elements
such
as
SelectParameters​ ​in the data source controls.  
The following code snippet illustrates how value binding works in​ ​ControlParameter​: 
// System.Web.UI.WebControls.ControlParameter 
protected override object Evaluate(HttpContext context, Control control) 
{ 
... 
    string controlID = this.ControlID; 
    string ​text​ = this.​PropertyName​; 
... 
    Control control2 = DataBoundControlHelper.FindControl(control, controlID); 
... 
    object obj = ​DataBinder.Eval​(control2​,​ ​text​)​; 
... 
    return obj​; 
} 
[Code Ref #5] 
It uses the ​ControlID ​property for searching specific control on the page (or other current
container) and calls ​DataBinder.Eval() ​with this control and value of the ​PropertyName
property for the expression, as arguments: 
expression ​- the navigation path from the container object to the public property value to be
placed in the bound control property. This must be a string of property or field names separated
by periods, such as ​Tables[0].DefaultView.[0].Price​ in C#  
At first glance it looks reasonable – for example we can put ​TextBox ​on the site page and the
user can define a filter that is used in the data source control. We can use a path of nested
properties here, similar to the example of the attack in the previous section, and try to get
access to the values not only from “local” instances on the current page but also from “global”
SharePoint instances (including ​Sites​, ​WebApplication, ​or even ​Farm)​. These global instances
have a lot of sensitive information that will be helpful in future attacks. 
The next element for our attack is a method of how values of ​SelectParameters ​of data
source control can be delivered to us. The SharePoint server has several interesting data
source controls in its ​SafeControl ​list. For example, the ​XmlUrlDataSource and the
SoapDataSource ​controls can send HTTP requests with values of ​SelectParameters ​to the
external HTTP server. We can use one of these data source controls so that the value of our
targeted property is sent to our server. 
The last piece of the puzzle for our attack is a path to the property with sensitive information.
We need to explain a little bit about the configuration process of SharePoint Online servers.
Obviously, they are installed and configured automatically with an amount of predefined
configuration parameters unique to each tenant. These parameters are provided within a text
file that is used during ​unattended configuration of a SharePoint server. When ​SPFarm ​is
created, these configuration parameters are stored in the ​InitializationSettings​ ​property:  
// Microsoft.SharePoint.Administration.SPFarmFactory 
public SPFarm Create() 
{ 
... 
  SPConfigurationDatabase configDb = this.CreateConfigurationDatabase(); 