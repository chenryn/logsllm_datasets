    * To list configuration for a zone:
        ```shell
        firewall-cmd --zone work --list-all
        ```
    * To create a new zone:
        ```shell
        firewall-cmd --new-zone servers --permanent
        ```
    * To reload firewall-cmd configuration:
        ```shell
        firewall-cmd --reload
        ```
    * To add a service to a zone:
        ```shell
        firewall-cmd --zone servers --add-service=ssh --permanent
        ```
    * To add an interface to a zone:
        ```shell
        firewall-cmd --change-interface=enp0s8 --zone=servers --permanent
        ```
    * To get active zones:
        ```shell
        firewall-cmd --get-active-zones
        ```
    * To set a default zone:
        ```shell
        firewall-cmd --set-default-zone=servers
        ```
    * To check the services allowed for a zone:
        ```shell
        firewall-cmd --get-services
        ```
    * To add a port to a zone:
        ```shell
        firewall-cmd --add-port 8080/tcp --permanent --zone servers
        ```
    * To remove a service from a zone:
        ```shell
        firewall-cmd --remove-service https --permanent --zone servers
        ```
    * To remove a port from a zone:
        ```shell
        firewall-cmd --remove-port 8080/tcp --permanent --zone servers
        ```
### Manage users and groups
1. Create, delete, and modify local user accounts
    * RHEL 8 supports three user account types: root, normal and service. The root user has full access to all services and administrative functions. A normal user can run applications and programs that they are authorised to execute. Service accounts are responsible for taking care of the installed services.
    * The `/etc/passwd` file contains vital user login data.
    * The `/etc/shadow` file is readable only by the root user and contains user authentication information. Each row in the file corresponds to one entry in the passwd file. The password expiry settings are defined in the `/etc/login.defs` file. The `/etc/defaults/useradd` file contains defaults for the *useradd* command.
    * The `/etc/group` file contains the group information. Each row in the file stores one group entry.
    * The `/etc/gshadow` file stores encrypted group passwords. Each row in the file corresponds to one entry in the group file.
    * Due to manual modification, inconsistencies may arise between the above four authentication files. The *pwck* command is used to check for inconsistencies.
    * The *vipw* and *vigr* commands are used to modify the *passwd* and *group* files, respectively. These commands disable write access to these files while the privileged user is making the modifications.
    * To create a user:
        ```shell
        useradd user1
        ```
    * To check that the user has been created:
        ```shell
        cat /etc/group | grep user1
        ```
    * To specify the UID and GID at user creation:
        ```shell
        useradd -u 1010 -g 1005 user1
        ```
    * To create a user and add them to a group:
        ```shell
        useradd -G IT user2
        ```
	* Note that *-G* is a secondary group, and *-g* is the primary group. The primary group is the group that the operating system assigns to files to which a user belongs. A secondary group is one or more other groups to which a user also belongs. 
    * To delete a user:
        ```shell
        userdel user1
        ```
    * To modify a user:
        ```shell 
        usermod -l user5 user1 # note that home directory will remain as user1
        ```
    * To add a user but not give access to the shell:
        ```shell 
        useradd -s /sbin/nologin user
        ```
1. Change passwords and adjust password aging for local user accounts
    * To change the password for a user:
        ```shell 
        passwd user1
        ```
    * To step through password aging information the *chage* command can be used without any options.
    * To view user password expiry information:
        ```shell 
        chage -l user1
        ```
    * To set the password expiry for a user 30 days from now:
        ```shell 
        chage -M 30 user1
        ```
    * To set the password expiry date:
        ```shell 
        chage -E 2021-01-01 user1
        ```
    * To set the password to never expire:
        ```shell 
        chage -E -1 user1
        ```
1. Create, delete, and modify local groups and group memberships
    * To create a group:
        ```shell 
        groupadd IT
        ```
    * To create a group with a specific GID:
        ```shell 
        groupadd -g 3032
        ```
    * To delete a group:
        ```shell 
        groupdel IT
        ```
    * To modify the name of a group:
        ```shell 
        groupmod -n IT-Support IT
        ```
    * To modify the GID of a group:
        ```shell 
        groupmod -g 3033 IT-Support
        ```
    * To add a user to a group:
        ```shell 
        groupmod -aG IT-Support user1
        ```
    * To view the members of a group:
        ```shell 
        groupmems -l -g IT-Support
        ```
    * To remove a user from a group:
        ```shell 
        gpasswd -d user1 IT-Support
        ```
1. Configure superuser access
    * To view the sudoers file:
        ```shell 
        visudo /etc/sudoers
        ```
    * Members of the wheel group can use sudo on all commands. To add a user to the wheel group:
        ```shell 
        sudo usermod -aG wheel user1
        ```
    * To allow an individual user sudo access to specific commands:
        ```shell
        visudo /etc/sudoers
        user2 ALL=(root) /bin/ls, /bin/df -h, /bin/date
        ```
### Manage security
1. Configure firewall settings using firewall-cmd/firewalld
    * Network settings such as masquerading and IP forwarding can also be configured in the firewall-config GUI application. To install this application:
        ```shell
        dnf install firewall-config
        ```
    * To set port forwarding in the kernel setting:
        ```shell
        vi /etc/sysctl.conf
        # add line
        net.ipv4.ip_forward=1
        # save file
        sysctl -p
        ```
1. Create and use file access control lists
    * To give a user read and write access to a file using an access control list:
        ```shell
        setfacl -m u:user1:rw- testFile
        getfacl testFile
        ```
    * To restrict a user from accessing a file using an access control list:
        ```shell
        setfacl -m u:user1:000 testFile
        getfacl testFile
        ```
    * To remove an access control list for a user:
        ```shell
        setfacl -x u:user1 testFile
        getfacl testFile
        ```
    * To give a group read and execute access to a directory recursively using an access control list:
        ```shell
        setfacl -R -m g:IT-Support:r-x testDirectory
        getfacl testFile
        ```
    * To remove an access control list for a group:
        ```shell
        setfacl -x g:IT-Support testDirectory
        getfacl testFile
        ```
1. Configure key-based authentication for SSH
    * To generate an id_rsa and id_rsa.pub files:
        ```shell
        ssh-keygen
        ```
    * To enable ssh for a user:
        ```shell
        touch authorized_keys
        echo "publicKey" > /home/new_user/.ssh/authorized_keys
        ```
    * To copy the public key from server1 to server2:
        ```shell
        ssh-copy-id -i ~/.ssh/id_rsa.pub server2
        cat ~/.ssh/known_hosts # validate from server1
        ```
1. Set enforcing and permissive modes for SELinux
    * Security Enhanced Linux (SELinux) is an implementation of Mandatory Access Control (MAC) architecture developed by the U.S National Security Agency (NSA). MAC provides an added layer of protection beyond the standard Linux Discretionary Access Control (DAC), which includes the traditional file and directory permissions, ACL settings, setuid/setgid bit settings, su/sudo privileges etc.
    * MAC controls are fine-grained; they protect other services in the event one of the services is negotiated. MAC uses a set of defined authorisation rules called policy to examine security attributes associated with subjects and objects when a subject tries to access an object and decides whether to permit this access attempt. SELinux decisions are stored in a special cache referred to as Access Vector Cache (AVC).
    * When an application or process makes a request to access an object, SELinux checks with the AVC, where permissions are cached for subjects and objects. If a decision is unable to be made, it sends the request to the security server. The security server checks for the security context of the app or process and the object. Security context is applied from the SELinux policy database. 
    * To check the SELinux status:
        ```shell
        getenforce
        sestatus
        ```
    * To put SELinux into permissive mode modify the `/etc/selinux/config` file as per the below and reboot:
        ```shell
        SELINUX=permissive
        ```
    * Messages logged from SELinux are available in `/var/log/messages`.
1. List and identify SELinux file and process context
    * To view the SELinux contexts for files:
        ```shell
        ls -Z
        ```
    * To view the contexts for a user:
        ```shell
        id -Z
        ```
    * The contexts shown follow the user:role:type:level syntax. The SELinux user is mapped to a Linux user using the SELinux policy. The role is an intermediary between domains and SELinux users. The type defines a domain for processes, and a type for files. The level is used for Multi-Category Security (MCS) and Multi-Level Security (MLS).
    * To view the processes for a user:
        ```shell
        ps -Z # ps -Zaux to see additional information
        ```
1. Restore default file contexts
    * To view the SELinux contexts for files:
        ```shell
        chcon unconfined:u:object_r:tmp_t:s0
        ```
    * To restore the SELinux contexts for a file:
        ```shell
        restorecon file.txt
        ```
    * To restore the SELinux contexts recursively for a directory:
        ```shell
        restorecon -R directory
        ```
1. Use Boolean settings to modify system SELinux settings
    * SELinux has many contexts and policies already defined. Booleans within SELinux allow common rules to be turned on and off.
    * To check a SELinux Boolean setting:  
        ```shell
        getsebool -a | grep virtualbox
        ```
    * To set a SELinux Boolean setting permanently:  
        ```shell
       setsebool -P use_virtualbox on
        ```
1. Diagnose and address routine SELinux policy violations
    * The SELinux Administration tool is a graphical tool that enables many configuration and management operations to be performed. To install and run the tool:
       ```shell
       yum install setools-gui
       yum install policycoreutils-gui
       system-config-selinux
       ```
    * SELinux alerts are written to `/var/log/audit/audit.log` if the *auditd* daemon is running, or to the `/var/log/messages` file via the *rsyslog* daemon in the absence of *auditd*.
    * A GUI called the SELinux Troubleshooter can be accessed using the *sealert* command. This allows SELinux denial messages to be analysed and provides recommendations on how to fix issues.
### Manage containers
1. Find and retrieve container images from a remote registry
	* A container is used for running multiple isolated applications on the same hardware. Unlike a virtual machine, containers share the host systems operating system. This is more lightweight but a little less flexible.
	* Podman is a container engine developed by Redhat. Podman is an alternative to the well-known container engine Docker. It is used to directly manage pods and container images. The Podman Command Line Interface (CLI) uses the same commands as the Docker CLI. Docker is not officially supported in RHEL 8.
	* To search for an image in a remote repository and download it:
        ```shell
        dnf install podman -y
        podman search httpd # note that docker.io/library/httpd has 3000+ stars
        podman pull docker.io/library/httpd
        ```
1. Inspect container images
	* To view images after they have been downloaded:
	    ```shell
        podman images
        ```
	* To inspect an image using Podman:
        ```shell
        podman inspect -l # -l gets the latest container
        ```
	* To inspect an image in a remote registry using Skopeo:
        ```shell
        dnf install skopeo -y
		skopeo inspect docker://registry.fedoraproject.org/fedora:latest
        ```
1. Perform container management using commands such as podman and skopeo
	* The man page for Podman and bash-completion can be used to provide more details on the usage of Podman.
	* To view the logs for a container:
        ```shell
        podman logs -l