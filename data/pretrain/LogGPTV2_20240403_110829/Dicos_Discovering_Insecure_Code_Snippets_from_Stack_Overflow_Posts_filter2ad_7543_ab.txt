snippets in Stack Overflow posts in advance; thereafter, we can
track software containing any discovered insecure code snippets,
and recommend remediations, e.g., fixing the insecure code.
However, the existing approaches are not designed to discover
insecure code snippets with high accuracy. For instance, they cannot
discover our motivating code snippet as insecure; this is because
the code snippet does not contain any security-sensitive APIs (e.g.,
strcpy, malloc, cryptographic functions) [5, 7, 34] or vulnerable
keywords (e.g., “CoinHive”) [32]. Moreover, this code snippet is
written in the C language, and is out of the scope of several existing
approaches [5, 7, 34].
This insecure code snippet was reused in the latest versions of
three popular open-source projects. One of them is the Linux kernel,
in which this code snippet was reused with the isspace() issue;
however, they confirmed to us that they already addressed these
issues using an exception handling in a different source file. We
have forwarded this issue to the development teams for the other
two projects, and we are still waiting their responses.
OLDLATOLD196ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Hyunji Hong, Seunghoon Woo, and Heejo Lee
2.3 Overview of Dicos
As explained in the motivating example, an insecure code snippet
in Stack Overflow posts can adversely affect various software pro-
grams. To resolve such problems, we propose Dicos, an approach
for discovering insecure code snippets in Stack Overflow posts.
Figure 2 illustrates the high-level workflow of Dicos.
The key idea of Dicos for discovering insecure code snippets
is leveraging user discussions in Stack Overflow. In general, an
answerer edits their code snippets when they notice that their code
has a flaw, such as a security issue [4, 24]. After editing, they leave
all edit logs in their post.
Inspired by this process, we decided to use the change history
of the post, as it provides significant hints for discovering insecure
code snippets. Specifically, Dicos comprises the following three
phases: (1) extracting the change history (i.e., diffs between the
oldest and latest revisions) from the post, (2) analyzing the diffs
using selected three features, and (3) determining whether the post
contains insecure code snippets.
Dicos first extracts the diffs from the Stack Overflow post.
Although the goal of Dicos is to discover insecure code snippets,
changelogs in descriptions and comments can also be used to dis-
cover insecure code snippets, thus focusing on all the changes to
the description, code snippets, and comments (see Figure 1). Di-
cos then discovers insecure code snippets by analyzing whether
the extracted diffs are intended to fix a security issue, based on
the selected features (the feature selection process is introduced
in section 3). If a diff is intended to patch a security issue, Dicos
determines that the oldest code snippet in the post is insecure (i.e.,
a code snippet without applying security patches). The detailed
design of Dicos is provided in section 4.
3 FEATURE SELECTION
To discover insecure code snippets, we first examined utilized fea-
tures in existing approaches and then picked only the effective
ones based on an empirical study using CVE vulnerability patches.
In particular, we examined various features that were previously
used in related approaches: Stack Overflow insecure code snippet
discovery approaches [5, 7, 32, 34] and unknown security patch
detection approaches [14, 15, 18, 25].
Initial feature selection methodology. We reviewed the fea-
tures used in the related approaches and selected a total of 12
features applicable to code snippets, descriptions, and comments;
the list of features used in the existing approaches is summarized
in Table 1. Among them, however, some features cannot be used
for discovering vulnerable snippets especially from Stack Over-
flow (e.g., number of commits); in addition, some other features are
too general to distinguish vulnerable code snippets (e.g., changes
in files, functions, and lines); thus, we excluded them. Finally, we
consider the following six features (i.e., F1 to F6).
F1. Changes in security-sensitive APIs: Checking whether
a code change has occurred in security-sensitive APIs. We
selected security-sensitive APIs by referring to related ap-
proaches [5, 7, 34] and Common Weakness Enumeration
(CWE) documents [17].
Table 1: List of the features that were used in related ap-
proaches for discovering insecure code snippets and un-
known security patches.
Idx Features
Approaches (considered features: O)
[18] [7] [32] [34] [14] [25] [5] [15]
O
1 Changes in a file
2 Changes in a function
3 Changes in a line
4 Changes in a conditional statement
5 Changes in a control flow
6 Changes in a function call
7 Changes in an operator
8 Changes in a variable
9 Changes in a security-related keyword O O O
10 Changes in a security-sensitive API
11 Changes in a hunk count
12 Number of commits
O
O
O
O
O
O
O O
O O
O
O
O
O
O
O
O
O
F2. Changes in security-related keywords: Checking wheth-
er a change in the description or commit messages contains
security-related keywords. We selected the keywords by re-
ferring to existing approaches [7, 9]. In addition, we analyzed
the commit messages of 3,323 CVEs, which disclosed their
code patches via GitHub, and manually collected words that
were frequently included in the commit messages.
F3. Changes in control flows (and conditional statements):
Checking whether a control flow change exists (e.g., adding
new conditional statements). As existing approaches have
found that the control flow changes account for a large por-
tion of the security patches [14, 15, 25], we also consider this
feature in discovering insecure code snippets.
F4. Changes in literals (e.g., operator, constants): Checking
whether a change in code snippets contains literal changes
(e.g., modifying constant values).
F5. Changes in identifiers (e.g., variable): Checking whether
a change in code snippets contains AST identifier changes [31]
(e.g., changing local variables).
F6. Changes in function calls: Checking whether a change in
code snippets contains a function call change; the function
call can include security-sensitive APIs.
Large-scale empirical study using CVE vulnerabilities. To
demonstrate the efficiency of the selected features, we conducted
an empirical study using 3,323 C/C++ CVE vulnerabilities, which
provide their patch commits via GitHub (referring to [13]). We
analyzed all patches of the collected CVEs to measure the number
of appearances of each feature. Additionally, to determine whether
the selected features were prominent only in security patches, we
extracted a total of 1,000 of the latest commits with 889 general
code patches from the Linux kernel, Tensorflow, Redis, and Electron
(i.e., 250 commits from each repository), which are four of the most
popular C/C++ repositories on GitHub based on the rank of the
number of stars. We measured the appearances of the features in
security patches, and compared the results with those from the
general code patches (security-sensitive APIs and security-related
keywords selected for the empirical study are listed in Table 7 in
Appendix A and Table 9 in Appendix B, respectively). Consequently,
Table 2 presents the measurement results.
197Dicos: Discovering Insecure Code Snippets from Stack Overflow Posts by Leveraging User Discussions
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Table 2: Results of the empirical study using 3,323 CVE vul-
nerability patches and 1,000 general code commits contain-
ing 889 code patches.
Index Features
F1
F2
F3
F4
F5
F6
# of appearances of the features
CVE patches
General patches
38 (4.00%)
Changes in security-sensitive APIs
577 (17.36%)
114 (11.4%)∗
Changes in security-related keywords 2,019 (60.76%)
230 (25.87%)
2,493 (75.02%)
Changes in control flows
179 (20.13%)
1,454 (43.76%)
Changes in literals
405 (45.56%)
2,170 (65.30%)
Changes in identifiers
Changes in function calls (APIs)
2,791 (83.99%)
505 (56.81%)
∗ Security-related keywords were searched for in 1,000 commit messages.
First, we confirmed that F2, F3, F5, and F6 appeared frequently in
the security patches (i.e., more than 60%). However, unlike F2 and F3,
which appeared at a much higher rate in security patches (60.76%
and 75.02%, respectively) than in general code patches (11.4% and
25.87%, respectively), F5 and F6 frequently appeared in both gen-
eral and security patches. Thus, we decided to use F2 (changes in
security-related keywords) and F3 (changes in control flows) while
excluding F5 and F6 when discovering insecure code snippets.
Next, we confirmed that F1 (changes in security-sensitive APIs)
appeared at a rate four times higher in security patches than in gen-
eral code patches. Obviously, changes in security-sensitive APIs are
likely to be security patches (e.g., removing the strcpy function).
Therefore, we decided to use feature F1. Lastly, we confirmed that
F4 (changes in literals) appeared at a rate more than twice as high in
security patches as compared to general patches. However, surpris-
ingly, we discovered that F4 mainly appears with either F1 or F3;
there were only eight security patches where F4 appeared without
F1 or F3. Since we already selected F1 and F3, F4 was excluded.
Consequently, we decided to use the following three features:
F1. Changes in security-sensitive APIs;
F2. Changes in security-related keywords;
F3. Changes in control flows.
Figure 3 shows the coverage of the three selected features in
the collected CVE patches. In particular, we found that 92% of
the collected CVE patches had at least one selected feature. The
remaining CVE patches either did not have a commit message or
no specific security patch pattern was revealed (e.g., adding only a
variable declaration statement); thus, the selected features failed
to cover them. Furthermore, among the collected general patches,
only eight patches (1%) contained all three selected features; there
were 90 patches (10%) containing two features simultaneously. In
other words, we concluded that the selected features can distinguish
between security patches and general code patches with a high
degree of accuracy.
4 INSECURE CODE SNIPPET DISCOVERY
In this section, we describe how Dicos discovers insecure code
snippets. Dicos comprises the following three phases for discover-
ing insecure code snippets: (1) extracting the change history of a
post, (2) analyzing the change history using selected features, and
(3) determining whether the post contains insecure code snippets.
Figure 3: Illustration for the coverage of the three selected
features (changes in security-sensitive APIs, changes in
security-related keywords, and changes in control flows).
4.1 Extracting the change history of a post
As mentioned in subsection 2.3, Dicos discovers insecure code
snippets by leveraging user discussions in Stack Overflow: when
insecure code is detected in a particular post, the answerer takes a
series of specific actions to resolve the issue.
In subsection 2.1, we categorize a Stack Overflow post into three
parts: the question, answer, and comments. The answer part can
be further categorized into two sub-parts: description and code
snippet parts (see Figure 1). Among them, the description, code
snippets, and comments parts are mainly changed when a security
issue is detected in a code snippet. We summarize the characteristics
of the changes for each part as follows.
(1) Comments - reporting security issues: If the code snippet in
the answer post has security issues (e.g., vulnerability), Stack
Overflow users can notify the issues through comments, or even
provide “suggested edit”.
(2) Code snippet - fixing the security issues: When a security
issue is found in the code snippet, the answerer modifies the
insecure code snippet into a safe one.
(3) Description - introducing the changes: If answerers edit
their posts, they often leave the related messages (e.g., the rea-
son for editing their post) in the description part.
Dicos first collects Stack Overflow posts, and then extracts all
the change histories of each post. Because the Stack Overflow post
dataset contains every revision of each post [2], this task can easily
be conducted. Dicos then selects the oldest and the latest revision
of the post, and then extracts the differences (i.e., diffs) between
the two revisions. Although a post may have been changed multi-
ple times, we focus on the difference between the oldest and the
latest version of a particular post, because we assume that changes
between the oldest and latest revisions include all change patterns
that exist between them. The diffs for comments and descriptions
are extracted in the form of string differences.
Technical challenge: code snippet pairing problem. Here,
one technical challenge arises: the code snippet pairing problem. In
general, a post contains multiple code snippets, and a code snippet
can contain several functions that perform specific functionalities.
198ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Hyunji Hong, Seunghoon Woo, and Heejo Lee
Figure 4: Overall flow of the code snippet pairing.
In the process of updating the post, a code snippet can be added or
deleted, the order of code snippets can be changed, and only some
of the contained functions can move to another code snippet. In
this situation, the simple diffing method can extract the erroneous
change history from a completely different code snippet pair.
To overcome this challenge, we present a novel code snippet
pairing technique. The key idea is extracting functions contained
in code snippets by cleaving them, and measuring similarity scores
between all code snippets in the oldest and latest revisions. The
overview of the pairing process is depicted in Figure 4.
Function extraction from code snippets. From every code
snippet in the post, Dicos extracts all functions contained in the
code snippet. In other words, Dicos splits the code snippet into
finer functional units for the more attentive discovery of insecure
code snippets. Let CS be a code snippet in a post; this can represent
an extracted function. Dicos applies this step for the oldest and
latest revision of the post, respectively.
Code snippet pairing. In the code snippet pairing process, Di-
cos first picks one CS from the oldest revision, then measures the
similarity score to every CS in the latest revision. To do this, Dicos
first splits each CS into a set of code lines (i.e., splits with a new-
line character), removes spaces from each code line, and converts
all the characters in each code line to lower cases (i.e., applying
normalization) for ignoring formatting-related changes that do not
affect the semantic of the codes [11, 27, 30].
Let the normalized CS (i.e., set of normalized code lines) of the
oldest revision is CSo and that of the latest revision is CSl . Dicos
then measures the similarity score (let Φ) between CSo and CSl
by leveraging the Jaccard index [26](cid:0)i.e., Φ = |CSo ∩ CSl |
|CSo ∪ CSl |(cid:1). If Φ is
greater than the pre-defined threshold θ value, Dicos determines
that CSo and CSl as a code snippet pair; here, θ is selected as a small
value by considering code changes (e.g., less than 0.5).
After finding all code snippet pairs between the oldest and latest
revisions, Dicos extracts the diffs between the paired code snip-
pets by utilizing the known diffing command, such as git diff.
The diffs for the code snippets are extracted in the form of code
patches. Here, if a CSo has a similarity value less than θ with all
CSl , we consider that the function has undergone a major change
or has been deleted during post updates. To cover this case, Di-
cos searches older revisions from the latest revision in the reverse
direction and processes the same approach, recursively. If Dicos
does not find any code snippets with a similarity greater than θ to
CSo, even after traversing all revisions of the post, Dicos considers
that CSo was deleted during post updates, and the change history
is obtained in which the entire code lines in CSo was deleted.
4.2 Analyzing the extracted change history
In this part, we introduce how Dicos analyzes the change history.
Technical challenge: applying features to Stack Overflow.