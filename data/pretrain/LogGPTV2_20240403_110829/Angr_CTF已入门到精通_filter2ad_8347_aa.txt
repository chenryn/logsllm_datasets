# Angr_CTF已入门到精通
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
承接上一篇的文章，我们学习了angr应用的大概基础框架和符号化寄存器，现在我们来继续学习angr的更多神奇用法
## 04_angr_symbolic_stack
上一题我们学习了符号化寄存器，这题主要是学习如何符号化栈上的值
首先检查一下文件：
    syc@ubuntu:~/Desktop/TEMP$ checksec '/home/syc/Desktop/TEMP/04_angr_symbolic_stack' 
    [*] '/home/syc/Desktop/TEMP/04_angr_symbolic_stack'
        Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x8048000)
然后拖进IDA查看一下程序
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      printf("Enter the password: ");
      handle_user();
      return 0;
    }
    int handle_user()
    {
      int result; // eax
      int v1; // [esp+8h] [ebp-10h]
      int v2; // [esp+Ch] [ebp-Ch]
      __isoc99_scanf("%u %u", &v2, &v1);
      v2 = complex_function0(v2);
      v1 = complex_function1(v1);
      if ( v2 == 1999643857 && v1 == -1136455217 )
        result = puts("Good Job.");
      else
        result = puts("Try again.");
      return result;
    }
    int __cdecl complex_function0(int a1)
    {
      return a1 ^ 0x12A567E5;
    }
    int __cdecl complex_function1(int a1)
    {
      return a1 ^ 0x31BCB5D0;
    }
这里我们具体看一下是如何传送参数的
不难发现从之前的寄存器传参变成了利用栈空间传参，这时我们就需要学会对栈上的值进行符号化处理
先提供一下angr的EXP
    import angr
    import sys
    import claripy
    def Go():
        path_to_binary = "./04_angr_symbolic_stack" 
        project = angr.Project(path_to_binary, auto_load_libs=False)
        start_address = 0x8048697
        initial_state = project.factory.blank_state(addr=start_address)
        initial_state.regs.ebp = initial_state.regs.esp
        passwd_size_in_bits = 32
        passwd0 = claripy.BVS('passwd0', passwd_size_in_bits)
        passwd1 = claripy.BVS('passwd1', passwd_size_in_bits)
        padding_length_in_bytes = 0x8
        initial_state.regs.esp -= padding_length_in_bytes
        initial_state.stack_push(passwd0)  
        initial_state.stack_push(passwd1) 
        simulation = project.factory.simgr(initial_state)
        def is_successful(state):
            stdout_output = state.posix.dumps(1)
            if b'Good Job.\n' in stdout_output:
                return True
            else: 
                return False
        def should_abort(state):
            stdout_output = state.posix.dumps(1)
            if b'Try again.\n' in  stdout_output:
                return True
            else: 
                return False
        simulation.explore(find=is_successful, avoid=should_abort)
        if simulation.found:
            for i in simulation.found:
                solution_state = i
                solution0 = (solution_state.solver.eval(passwd0))
                solution1 = (solution_state.solver.eval(passwd1))
                print("[+] Success! Solution is: {0} {1}".format(solution0, solution1))
                #print(solution0, solution1)
        else:
            raise Exception('Could not find the solution')
    if __name__ == "__main__":
        Go()
运行一下查看结果：
现在我们来逐步解析，我们需要确定angr应该从哪里开始，我们跳过`scanf()`了将从`0x8048697`处的指令开始
    start_address = 0x8048697
    initial_state = project.factory.blank_state(addr=start_address)
我们从之前知道要注入的两个值位于@ `[EBP - 0x10]`，`[EBP -0xC]`因此我们需要在压入堆栈之前布置好堆栈指针，这里就需要学习一下Linux的栈，我们先将ESP指针恢复到和EBP指针一致，恢复栈帧初始状态，方便我们计算：
    initial_state.regs.ebp = initial_state.regs.esp #EBP=ESP
这里我们先整理一下我们所需要的参数在栈上的分布情况
Low Address |  
---|---  
[ EBP – 0x10H ] | S1  
[ EBP – 0x0FH ] | S1  
[ EBP – 0x0EH ] | S1  
[ EBP – 0x0DH ] | S1  
[ EBP – 0x0CH ] | S2  
[ EBP – 0x0BH ] | S2  
[ EBP – 0x0AH ] | S2  
[ EBP – 0x09H ] | S2  
**High Address**  
因为是32位下的程序，s1和s2都是32bit大小，也就是4字节，故：
  * S1需要占用以下地址：`| 0x10 | 0x0F | 0x0E | 0x0D |`
  * S2需要占用以下地址：`| 0x0C | 0x0B | 0x0A | 0x09 |`
故我们需要先抬高栈，以便在将符号值压入堆栈之前提供填充，但是栈是从高地址到低地址增长的，所以我们真正需要的是ESP – 0x8
    padding_length_in_bytes = 0x08
    initial_state.regs.esp -= padding_length_in_bytes
现在是时候创建我们的符号位向量并将其压入堆栈了。请记住，程序需要两个无符号的整数值（`%u
%u`格式字符串可以理解），因此符号位向量的大小将为32位，因为这是x86架构上无符号整数
    passwd0 = claripy.BVS('passwd0', 32) #s1
    passwd1 = claripy.BVS('passwd1', 32) #s2
    initial_state.stack_push(passwd0) 
    initial_state.stack_push(passwd1)
之后，其余部分基本上与以前的脚本相同，我们只需要求解符号位向量并打印即可：
    if simulation.found:
            for i in simulation.found:
                solution_state = i
                solution0 = (solution_state.solver.eval(passwd0))
                solution1 = (solution_state.solver.eval(passwd1))
                print("[+] Success! Solution is: {0} {1}".format(solution0, solution1))
                #print(solution0, solution1)
        else:
            raise Exception('Could not find the solution')
###  eval
  * `solver.eval(expression)` 将会解出一个可行解
  * `solver.eval_one(expression)`将会给出一个表达式的可行解，若有多个可行解，则抛出异常。
  * `solver.eval_upto(expression, n)`将会给出最多n个可行解，如果不足n个就给出所有的可行解。
  * `solver.eval_exact(expression, n)`将会给出n个可行解，如果解的个数不等于n个，将会抛出异常。
  * `solver.min(expression)`将会给出最小可行解
  * `solver.max(expression)`将会给出最大可行解
另外还有还有`cast_to`可以接收一个参数来指定把结果映射到哪种数据类型。目前这个参数只能是`str`，它将会以字符串形式展示返回的结果
## 05_angr_symbolic_memory
如题目所言这题主要学会符号化内存
我们先检查一下文件：
    syc@ubuntu:~/Desktop/TEMP$ checksec 05_angr_symbolic_memory
    [*] '/home/syc/Desktop/TEMP/05_angr_symbolic_memory'
        Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x8048000)
然后拖进IDA查看一下程序
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      int i; // [esp+Ch] [ebp-Ch]
      memset(user_input, 0, 0x21u);
      printf("Enter the password: ");
      __isoc99_scanf("%8s %8s %8s %8s", user_input, &unk_A1BA1C8, &unk_A1BA1D0, &unk_A1BA1D8);
      for ( i = 0; i  90 )
      {
        puts("Try again.");
        exit(1);
      }
      return (9 * a2 + a1 - 65) % 26 + 65;
    }
我们查看一下user_input的所处于的地址
不难发现程序的逻辑结构就是：
  * 程序将四个8字节长的字符串作为输入
  * 字符串分别位于以下地址[0xA1BA1C0, 0xA1BA1C8, 0xA1BA1D0, 0xA1BA1D8]
  * 输入的字符串循环输入`complex_function()`函数进行变换
  * 循环变换后的字符串与 `"NJPURZPCDYEAXCSJZJMPSOMBFDDLHBVN"`比较前0x20个字符
好了，我们现在有足够的信息来开始编写EXP的工作，先放一下EXP：
    import angr
    import sys
    import claripy
    def Go():
        path_to_binary = "./05_angr_symbolic_memory" 