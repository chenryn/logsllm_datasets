00
0 
C  0 
O
K 
Statu
s 
Link Address 
Reserved 
0x0C 
0 
0 
Size 
EO
F 
F  Count 
The Intel Advanced Programmable Interrupt Controller (APIC) is 
used  to  manage  communication  between  the  CPU,  chipset,  and 
external peripheral devices.  When it receives interrupts, the APIC 
dispatches them to the processor, one at a time, based  upon  their 
priorities.  The processor looks up the handler for the interrupt in 
the Interrupt Descriptor Table (IDT) [2].  Each interrupt is assigned 
a unique identifier, called a vector.  The processor uses this value as 
an  index  into  the  IDT.    The  Interrupt  Descriptor  Table  is  a 
processor specific data structure  containing  one  entry  for  each  of 
255  defined  vectors.    Kernel  rootkits  often  use  IDT  hooking  to 
intercept processor interrupts and exceptions [15].  This  involves 
replacing the Operating System handler contained in the IDT with a 
pointer to a malicious hook routine. 
When  the  LAN  controller  receives  an  interrupt,  the  APIC 
dispatches  it  to  the  CPU  where  it  is  looked  up  in  the  Interrupt 
Descriptor Table.  Normally, the interrupt handler for the network 
card is managed by the Windows NDIS driver.  We can intercept it 
by replacing the pointer with our own.  Thus, when a packet arrives, 
we will receive the first notification and will be able to inspect the 
receive  buffer  prior  to  any  Operating  System  software.    Figure  6 
illustrates this process.  
This technique, however, can be detected by checking if the NIC 
interrupt in the IDT points to the OS where it should.  To improve 
the stealthiness of our network backdoor, we can redirect the NIC’s 
interrupt to another interrupt that is not being currently used by the 
OS.   As mentioned previously, the IOAPIC’s primary function is to 
receive and route peripheral hardware interrupts to the Local APIC 
for delivery to the CPU.  For this purpose, the IOAPIC architecture 
defines  a  Redirection  Table.    The  Redirection  table  contains  a 
dedicated  entry  for  each  interrupt  pin.    It  is  used  to  translate  the 
physical, hardware signal into an APIC message on the bus.  This 
table  can  be  used  to  specify  the  destination  of  the  interrupt,  the 
vector, and the delivery mode.  We can therefore, change interrupt 
vector for the NIC and redirect it to a different, unused entry in the 
IDT. From this handler, after we inspect the incoming frame we can 
pass  it  on  to  the  OS  handler.  Figure  7  illustrates  this  redirection 
technique. 
The implementation of the process for monitoring incoming traffic 
can be described as follows: 
Figure 6: 8255x Receive Frame Descriptor 
1. 
Identify the interrupt for 8255x compatible network card. 
129 
Figure 8: Packet Spoofing  Data Infiltration 
2.  Look up the OS handler for that interrupt in the CPU interrupt 
descriptor table (IDT) and save the pointer. 
3.  Locate an unused interrupt in the IDT and hook it by replacing 
the  handler  address  with  the  address  of  our  backdoor’s 
handler. 
4.  Redirect the NIC interrupt to our new, hooked IDT vector by 
modifying the chipset’s APIC Redirection Table. 
When  an  interrupt  from  the  NIC  is  received,  the  following  steps 
occur: 
1.  Determine if the interrupt is due to a frame arrival (check bit in 
Status Control Block).  If  it’s  for  some  other  reason,  call  the 
OS handler. 
If the interrupt is due to frame arrival, locate the start of the 
Receive  Frame  Area  (RFA)  from  the  SCB  General  Pointer 
Field. 
2. 
3.  Scan the data portion of the Receive Frame Descriptors in the 
4. 
RFA. This scan is used to identify a “special” ICMP packet. 
If a “special” packet belonging to the backdoor is identified, 
then erase it. 
5.  Else,  pass  control  to  the  OS  handler  and  let  it  process  the 
packet normally. 
4.  TESTING 
We tested our implementation against several popular firewalls and 
intrusion  detection  systems  for  both  data  infiltration  and  data 
exfiltration.  These  detection  systems  include  the  Windows  XP 
Firewall,  Zone  Alarm  Security  Suite  and  the  Snort  Intrusion 
Detection System [7][8][9].  We tested on 2 different network cards, 
Intel Pro 100B and Intel Pro 100S, which are compatible with the 
Intel 8255X chipset.  Both cards were installed in Intel Core 2 Duo 
systems  running  Windows  XP  SP2.  The  implementation  should 
also work on other cards using the Intel 8255X chipset.   
For all of the experiments, we used specially crafted ICMP packets 
containing the data payload “r00t was here before this!”. This string 
serves  as  a  form  of  “signature”  in  the  packet  receive  interrupt 
handler  to  indicate  that  the  packet  is  destined  for  the  backdoor 
rather than the Operating System.  In order to test data infiltration, 
we used a secondary laptop running the Network Packet Generator 
(NPG) program to craft these special packets. NPG is a free GNU 
GPL Windows Packet injector.  It uses WinPcap to send packet out 
the network interface.  The packets are defined in a packet file and it 
is  possible  to  craft  any  kind  of  packet,  regardless  of  headers  or 
payload.  
We conducted two sets of experiments, one on data infiltration and 
the other on data exfiltration. Our data infiltration experiments test 
the  ability  to  intercept  network  packets  before  they  reach  any 
software  firewall  or  Intrusion  Detection  System  (IDS).    Once 
intercepted, we must also prevent the OS or other security software 
from  raising  an  alert.    We  tested  2  different  approaches  to  this 
problem:  packet  spoofing  and  packet  erasing.    In  the  packet 
spoofing approach, we modify the malicious ICMP packet payload 
(“r00t was here!”) in the receive interrupt handler so that it appears 
as the default Windows ICMP packet payload.  Then we forward it 
to  the  OS  normally.  The  destination  address  and  MAC  header 
information  can  also  be  spoofed  before  forwarding  the  packet.  
Although  the  OS  receives  the  packet,  it  just  looks  like  a  normal 
ping.  Because ping traffic is so common, it is unlikely for a rogue 
ping  to  raise  any  red  flags.    If  ICMP  traffic  is  blocked  by  an 
upstream router or firewall, another kind of packet could be used to 
relay  information  to  the  backdoor  (For  example,  HTTP  traffic  is 
usually allowed). 
Figure  8  illustrates  the  packet  spoofing  approach.  The  machine 
installed  with  network  backdoor  has 
the  IP  address  of 
192.168.1.101 and the name  of  “EXPERIENCE”.  The  secondary 
laptop,  with  IP  address  of  192.168.1.106  and  the  name  of 
“AMD32-LAPTOP”, sends the specially crafted ICMP packet. We 
130 
Figure 9: Windows firewall – Data Infiltration 
use Network Packet Generator to send the malicious ICMP packets 
and we view them using Microsoft Network Monitor [22][16] on 
the laptop (the bottom window shown in this figure).  
Note that the network monitor is not running on the machine with 
backdoor---it  cannot  capture  malicious  packets  on  a  backdoor 
installed  machine  since  the  backdoor  is  designed  to  avoid 
detection. 
The backdoor prints the packet headers  and  payload  to  Windows 
debug output for comparison (the top window shown on Figure 8 is 
the debug output).  From the output, it is clear that the backdoor is 
installed and receiving the malicious packets, however, Microsoft 
Network Monitor reports it as a default ping. 
The other approach we tested was packet erasing.  In this method, 
we  zero  out  the  data  portion  of  the  receive  frame  descriptor 
including the MAC, IP, TCP, and ICMP headers.  In this case, the 
OS drops the packet without sending it up the network stack.  When 
we  compared  the  backdoor’s  Debug  output  with  Microsoft 
Network Monitor, we saw that Microsoft Network Monitor failed 
to report any kind of network activity, ICMP or otherwise.  Because 
of this, packet erasing may be the stealthiest approach.   
4.1.  Data Exfiltration Test  
In the data exfiltration test, the installed network backdoor program 
on  the  first  machine  sends  out  specially  crafted  ICMP  packets  to 
our  secondary  laptop.    The  laptop  successfully  received  all  these 
packets no matter which of those three tested detection systems was 
used.  In  addition,  none  of  these  detection  systems  provided  any 
alert for such exfiltration traffic. 
Windows XP Firewall does not monitor or block outbound traffic. 
Thus it cannot detect any data exfiltration attack. Zone Alarm and 
Snort  have  the  capability  to  monitor  and  log  outgoing  traffic. 
However, because both of them rely on the network APIs provided 
by the Operation System for traffic monitoring, they cannot detect 
any exfiltration packets generated by our network backdoor, which 
is  in  the  lower  level  than  Operating  System’s  network  APIs  as 
illustrated in Fig. 1. 
4.2.  Data Infiltration Test  
4.2.1.   Testing against the Windows XP firewall 
We first looked at the Windows XP Firewall.  We wanted to test our 
backdoor on the strictest settings.  Therefore, we set the Windows 
firewall  to  block  all  outside  sources  from  connecting  to  the 
computer and disallow any exceptions to that rull.  We then used 
NPG  to  send  a  malicious  ICMP  packet  to  the  backdoor  and 
monitored  the  output  of  Microsoft  Network  Monitor  and  the 
backdoor’s  dump  of  the  packet  over  the  Debug  output  interface.  
The network backdoor used the packet erasing approach to conceal 
the packet from the OS.  
Figure  9  shows  the  results  of  this  experiment.  The  right  window 
shows that the Windows Firewall is turned on to block all outside 
connections.  The  network  monitor  window  on  this  figure  shows 
that  the  secondary  laptop  has  sent  out  an  ICMP  packet  to  the 
backdoor  machine  (the  monitor  runs  on  the  laptop,  not  the 
backdoor machine). The packet is clearly successfully received by 
the backdoor despite the firewall’s blocking-all policy (as shown in 
the “DebugView” window on this figure).  This is evidenced by its 
output of the header and payload data. It also remains invisible to 
Microsoft Network monitor on the backdoor machine.  
4.2.2.  Testing against Zone Alarm 
Zone Alarm is a software firewall and intrusion detection system.  
In addition to providing  inbound  intrusion  detection,  Zone  alarm 
also  monitors  and  controls  the  ability  for  programs  to  create 
outbound  connections.    It  also  contains  a  LOCK  feature  which 
allows the user to lock his / her computer so that applications can 
neither  send  nor  receive  data  from  the  Internet  or  local  network.  
131 
Like the Windows Firewall, we chose to test the backdoor under the 
strictest conditions, with the internet lock enabled.  We also used 
the packet erasing approach.  Figure 10 shows that  the  malicious 
ICMP packet was  received  by  the  backdoor,  but  that  Zone  alarm 
installed  on  the  backdoor  machine  did  not  detect  any  access 
attempt. 
4.2.3.  Testing against Snort 
Snort is an open source firewall and intrusion detection/ prevention 
system.  It uses a rule based language.  This gives it the flexibility to 
incorporate signature, protocol, and anomaly based detections.  It is 
also the most widely deployed intrusion detection and prevention 
systems.  We crafted a special rule file for Snort that logs all TCP 
packets and stores the logged information in a file called alert.ids.  
We verified its operation by first sending normal ping traffic using 
the Windows ‘ping’ command.  After verifying that this traffic is 
correctly logged, we sent (via the secondary laptop) the malicious 
ICMP packets over TCP to the backdoor installed machine.   The 
network  backdoor  used  the  packet  erasing  approach  as  well  to 
conceal the malicious ICMP packets from the OS. 
Like the previous two experiments, Snort failed to log this attack 
activity  while  these  malicious  ICMP  packets  are  intercepted 
successfully by the backdoor. Due to the similarity, we do not use 
another figure to show this experiment result again.  
Table 1 summarizes the testing results for data infiltration and data 
exfiltration by the proposed network backdoor. 
Table 1: Testing results summary 
Monitors 
Incoming 
Traffic 
Monitors 
Outgoing 
Traffic 
Detects 
Incoming 
Backdoor 
Packets 
Detects 
Outgoing 
Backdoor 
Packets 
YES 
NO 
YES 
YES 
NO 
NO 
NO 
N/A 
NO 