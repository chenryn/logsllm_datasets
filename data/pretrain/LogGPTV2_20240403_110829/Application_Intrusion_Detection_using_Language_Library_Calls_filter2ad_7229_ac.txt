this  set  of  experiments  is  to  prove  that  the  library  call
approach is a general and effective way to detect different
kinds  of  intrusions.  The  following  sections  discuss  our
results for each of the three attacks.
5.4.1  Buffer  overflow.    Buffer  overflow  experiments
were  conducted  primarily  on  the  Washington  University
ftp daemon (wu-ftpd), a very popular Unix ftp server that
is 
shipped  with  many  Unix  distributions.  Two
vulnerabilities  [6]  in  wu-ftpd  are  exploited  to  cause
buffer-overflow  attacks.  Table  3  shows  the  results  of
detecting  the  two  attacks.  We  can  conclude  that  two
attacks  against  wu-ftpd  were  successfully  detected
∧
AS  is at least  0.6. That  indicates  that  the  most
because 
anomalous  sequence  differs  from  all  sequences  in  the
signature database in over half of its positions.
l
y
a
m
o
n
A
d
e
z
i
l
a
m
r
o
N
l
a
n
g
S
i
1.2
1
0.8
0.6
0.4
0.2
0
0
10
20
Sequence Length
30
40
Figure 3. Detecting the same intrusion using different sequence lengths. The x-
axis is sequence length and the y-axis is the normalized anomaly signal.  The
signal value remains above 0.5 for all lengths.  Intrusion is detected in all cases.
6
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:05:52 UTC from IEEE Xplore.  Restrictions apply. 
Ftpd  Buffer  Overflow
Attacks
Format  String  Stack
Overwrite
Ftpd 
Vulnerability
Realpath
Number
Mismatches
467
Percent
Mismatches
3.5
569
2.7
∧
AS
0.7
0.6
Table  3.  Successful  detection  of  two  buffer
overflow  attacks  against  wu-ftpd.  Each  column
reports 
for  an  anomaly  measure:
mismatches,  percentage  of  mismatches,  and
normalized anomaly signal. Sequence length is
10.
results 
The  library  call  approach  works  well  with  buffer
overflow  attacks  when,  as  is  typical,  the  attacker  code
adds new sequences of library calls or even entirely new
library calls. If attack code does call a library call routine
not  in  application  code  or  introduces  new  sequences  of
library calls, then it can be detected clearly. If attack code,
however, makes no library calls at all, then the library call
approach will not be effective.
5.4.2  Trojan  Programs.  The  Linux  root  kit  includes
Trojan  attack  code  for  ps.    It  allows  intruders  to  login
through a backdoor and hide their activities from system
administrators.  Table  4  shows  the  results  of  detecting
Trojan code. When Trojan code runs, new sequences that
are not in the ps signature database are introduced. As a
result, the Trojan code attack is detected.
Number
Mismatches
243
Percent
Mismatches
3.0
∧
AS
0.8
Attack
ps  Trojan
Code
Table 4. Successful detection of Trojan code
for  ps.  Each  column  reports  results  for  an
anomaly  measure:  mismatches,  percentage
of  mismatches,  and  normalized  anomaly
signal. Sequence length is 10.
5.4.3  Denial-of-Service.  We  simulated  a  Denial-of-
Service (DOS) attack that exhausts all available memory.
Our  experiment  was  conducted  using  the  text  editor  vi.
As  the  attack  progresses,  applications,  like  vi,  make
library  calls/system  calls  requesting  memory.    These
calls return failure (or anomaly). Applications then invoke
exception  handlers  that  introduce  new  call  sequences.
They are not likely to be in the signature database.
    We conducted two tests to determine how effective our
library call approach is for detecting DOS attacks. Table 5
states  the  results.  The  first  run  was  normal  execution  of
the  vi  program,  i.e.,  without  intrusion.  There  are  no
∧
AS   =  0.0  because  all  monitored
mismatches  and 
sequences  were in the vi signature  database.  The  second
run  of  the  vi  program  is  interrupted  by  the  DOS  attack.
∧
AS   indicates  this  DOS  attack  is  clearly
The  value  of 
detected.
    The difference in  these  two  runs  of  vi  occurs  because
memory depletion causes invocation of a new library call,
fsync.  Note  that  fsync  does  not  appear  in  either  the
database or application code. This new library call is used
to synchronize a file’s complete in-core state with that on
disk. It copies all in-core parts of a file to disk.  fsync is
invoked  indirectly  by  the  application  to  deal  with
exception  when  all  memory  is  not  available.  This
experiment  illustrates  that  new  library  calls  may  be
introduced when intrusions occur.
Program  –
vi
Normal Run
DOS Attack
Number
Mismatches
0
101
Percent
Mismatches
0
2.6
∧
AS
0.0
0.6
Table  5.  Successful  detection  of  DOS  attack.
Each  column  reports  results  for  an  anomaly
of
measure:  mismatches, 
mismatches,  and  normalized  anomaly  signal.
Sequence length is 10.
percentage 
5.5  Library  call  signature  vs.  system  call
signature
signatures 
Our  experiments  demonstrated  that  the  library  call
signature  can  be  used  to  detect  a  variety  of  intrusions
successfully.  Similarly,  New  Mexico  researchers  used
system  call 
intrusions.  We
hypothesize  that  the  library  call  approach  is  more
effective  than  the  system  call  approach  for  selected
categories  of  applications.  To  test  this  hypothesis,  we
developed the following intrusion attack against mSQL, a
lightweight relational database management system [5].
to  detect 
The attack against mSQL is a Trojan code  attack  that
allows  an  intruder  to  illegally  access  the  password  file,
group  file,  and  host  file.  Table  6  shows  the  results  of
attempting to detect this Trojan code attack using both the
system  call  and  library  call  approaches.  Two  anomaly
measures  are  cited.  Recall  that  the  locality  frame  count
reports  the  largest  number  of  anomalies  found  within  a
locality frame. Both measures indicate that the library call
approach successfully detects the attack while the system
call approach is less effective.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:05:52 UTC from IEEE Xplore.  Restrictions apply. 
7
Also, we compared our library call approach with the
system call approach in a specific situation and found that
it performed better.
Acknowledgements
We  thank  the  referees  for  this  conference.    They  made
some sage and very helpful suggestions for improvement.
References
[1]  S.  Forrest,  S.  A.  Hofmeyr,  A.  Somayaji,  and  T.  A.
Longstaff.  A  Sense  of  Self  for  Unix  Processes.  In
Proceedings  of  1996  IEEE  Symposium  on  Computer
Security and Privacy, 1996
[2]  S.  Forrest,  S.  Hofmeyr,  and  A.  Somayaji.  Computer
Immunology.  In  Communications  of  the  ACM,  Vol.  40,
No. 10, pp. 88-96, 1997
[3] R. Heady, G. Luger, A. Maccabe, and M. Servilla. The
Architecture  of  a  Network  Level  Intrusion  Detection
System.  Technical  Report  CS90-20,  Dept.  of  Computer
Science, Univ. of New Mexico, August 1990.
[4] S. A. Hofmeyr, A. Somayaji, and S. Forrest. Intrusion
Detection using Sequences of System Calls. In Journal of
Computer Security, Vol. 6, pp. 151-180, 1998
[5]  Hughes  Technologies  home  page,  http://www.
hughes.com.au/
[6] Y. Lin and A. Jones. Application Intrusion Detection
using  Language  Library  Call.  Technical  Report,
Department of Computer Science, Univ. of Virginia, June
2001
[7] Debian ltrace home page, http://packages.debian.org/
stable/utils/ltrace.html
[8]  Matthew  Stillerman,  Carla  Marceau  and  Mareen
Stillman. 
for  Distributed
Applications. In Communications of ACM, 1999
Intrusion  Detection 
Code
Trojan 
mSQL 
Attack
Library Call Approach
System Call Approach
∧
AS
0.5
0.4
Locality
Max 
Frame Count
20
9
Table 6. Successful detection of mSQL Trojan
code attack by the library call approach. Each
column 
for  an  anomaly
measure:  normalized  anomaly  signal  and
maximum 
locality  frame  count.  Sequence
length is 10. Locality frame size is 20.
reports 
results 
We speculate that  the  difference  is  related  to  the  fact
that  system  call  sequences  have  too  little  variation.
Because  mSQL  is  a  lightweight  relational  database
management system, most operations for mSQL relate to
disk I/O access. As a result, almost every combination of
I/O  system  calls  is  likely  recorded  in  the  system  call
signature  database.  Our  Trojan  attack  also  relates  to
illegal  access  to  disks.  Unfortunately,  the  monitored
sequences  of  system  calls  that  reflect  intrusion  behavior
also characterize normal behavior. Therefore, they are in
the  signature  database  or  perhaps  do  not  differ
significantly  from  sequences  in  the  signature  database.
Thus,  the  system  call  signature  is  unable  to  detect
significant deviations. In this situation, we need to depend
on library calls that don’t generate system calls to detect
anomalistic behavior.
6. Conclusions
We have presented an approach for intrusion detection
at the application level based on the application’s  use of
language libraries. We believe that library call signatures
are more application-oriented than system call signatures
since  they  permit  one  to  tap 
the  rich  application
semantics.  From  an  application’s  view,  library  call
signatures  are  not  OS  specific.  We  use  three  anomaly
measures  (mismatch  count,  locality  frame  count  and
normalized  anomaly  signal)  to  determine  the  strength  of
an anomalous behavior.
We  performed  experiments  with  a  variety  of
applications  based  on  C  library  calls.  Our  experiments
performed using Linux demonstrated that sequences of C
library  calls  can  be  used 
to  characterize  different
applications. We build robust signature databases for our
selected  applications.    Our  experiments  involved  attacks
such  as  buffer  overflow,  Trojan  code  and  denial  of
service,  which  are  among  the  most  serious  security
problems on the Internet today.  The library call approach
appears to be very promising.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:05:52 UTC from IEEE Xplore.  Restrictions apply. 
8