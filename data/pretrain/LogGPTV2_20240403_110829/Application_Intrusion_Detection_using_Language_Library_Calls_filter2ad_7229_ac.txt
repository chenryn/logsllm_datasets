### Introduction
This set of experiments aims to demonstrate that the library call approach is a general and effective method for detecting various types of intrusions. The following sections will present our results for each of the three types of attacks: buffer overflow, Trojan programs, and denial-of-service (DoS) attacks.

### 5.4.1 Buffer Overflow
#### Experiment Setup
Buffer overflow experiments were primarily conducted on the Washington University FTP daemon (wu-ftpd), a widely used Unix FTP server included in many Unix distributions. Two vulnerabilities [6] in wu-ftpd were exploited to initiate buffer-overflow attacks. 

#### Results
Table 3 summarizes the detection results for the two buffer-overflow attacks. Both attacks against wu-ftpd were successfully detected, with the normalized anomaly signal (AS) being at least 0.6. This indicates that the most anomalous sequence differs from all sequences in the signature database by more than half of its positions.

| Attack Type | Number of Mismatches | Percent Mismatches | AS |
|-------------|----------------------|--------------------|----|
| Ftpd Buffer Overflow Attacks | 467 | 3.5% | 0.7 |
| Format String Stack Overwrite | 569 | 2.7% | 0.6 |

**Figure 3.** Detecting the same intrusion using different sequence lengths. The x-axis represents the sequence length, and the y-axis shows the normalized anomaly signal. The signal value remains above 0.5 for all lengths, indicating successful detection in all cases.

#### Discussion
The library call approach is effective in detecting buffer overflow attacks, especially when the attacker's code introduces new sequences of library calls or entirely new library calls. If the attack code does not make any library calls, the approach may not be as effective.

### 5.4.2 Trojan Programs
#### Experiment Setup
The Linux root kit includes Trojan attack code for the `ps` command, allowing intruders to log in through a backdoor and hide their activities from system administrators.

#### Results
Table 4 shows the detection results for the Trojan code. When the Trojan code runs, it introduces new sequences not found in the `ps` signature database, leading to successful detection.

| Attack Type | Number of Mismatches | Percent Mismatches | AS |
|-------------|----------------------|--------------------|----|
| ps Trojan Code | 243 | 3.0% | 0.8 |

### 5.4.3 Denial-of-Service (DoS)
#### Experiment Setup
We simulated a DoS attack that exhausts all available memory using the text editor `vi`. As the attack progresses, applications like `vi` make library calls requesting memory, which return failures. These failures trigger exception handlers, introducing new call sequences not likely to be in the signature database.

#### Results
Two tests were conducted to evaluate the effectiveness of the library call approach in detecting DoS attacks. Table 5 presents the results. The first run was a normal execution of `vi` without intrusion, resulting in no mismatches and an AS of 0.0. The second run, interrupted by the DoS attack, had an AS of 0.6, clearly indicating the detection of the attack.

| Program | Normal Run | DoS Attack |
|---------|------------|------------|
| vi      | 0          | 101        |
|         | 0%         | 2.6%       |
|         | 0.0        | 0.6        |

#### Discussion
The difference in the two runs of `vi` is due to the invocation of a new library call, `fsync`, which does not appear in the database or application code. This experiment illustrates that new library calls can be introduced during intrusions.

### 5.5 Library Call Signature vs. System Call Signature
Our experiments demonstrated that the library call signature can effectively detect a variety of intrusions. New Mexico researchers have also used system call signatures for intrusion detection. We hypothesize that the library call approach is more effective for certain categories of applications. To test this, we developed a Trojan code attack against mSQL, a lightweight relational database management system [5].

#### Experiment Setup
The attack allows an intruder to illegally access the password file, group file, and host file. Table 6 compares the results of detecting this Trojan code attack using both the system call and library call approaches.

| Attack Type | Library Call Approach | System Call Approach |
|-------------|-----------------------|----------------------|
| AS          | 0.5                   | 0.4                  |
| Locality Frame Count | 20                | 9                    |

#### Discussion
The library call approach successfully detected the attack, while the system call approach was less effective. This difference is likely due to the limited variation in system call sequences, as most operations in mSQL relate to disk I/O access. The monitored sequences reflecting intrusion behavior are similar to normal behavior, making them difficult to distinguish.

### Acknowledgements
We thank the referees for their valuable suggestions and improvements.

### References
[1] S. Forrest, S. A. Hofmeyr, A. Somayaji, and T. A. Longstaff. A Sense of Self for Unix Processes. In Proceedings of 1996 IEEE Symposium on Computer Security and Privacy, 1996.
[2] S. Forrest, S. Hofmeyr, and A. Somayaji. Computer Immunology. In Communications of the ACM, Vol. 40, No. 10, pp. 88-96, 1997.
[3] R. Heady, G. Luger, A. Maccabe, and M. Servilla. The Architecture of a Network Level Intrusion Detection System. Technical Report CS90-20, Dept. of Computer Science, Univ. of New Mexico, August 1990.
[4] S. A. Hofmeyr, A. Somayaji, and S. Forrest. Intrusion Detection using Sequences of System Calls. In Journal of Computer Security, Vol. 6, pp. 151-180, 1998.
[5] Hughes Technologies home page, http://www.hughes.com.au/
[6] Y. Lin and A. Jones. Application Intrusion Detection using Language Library Call. Technical Report, Department of Computer Science, Univ. of Virginia, June 2001.
[7] Debian ltrace home page, http://packages.debian.org/stable/utils/ltrace.html
[8] Matthew Stillerman, Carla Marceau, and Mareen Stillman. Intrusion Detection for Distributed Applications. In Communications of ACM, 1999.

### Conclusions
We have presented an approach for intrusion detection at the application level based on the use of language libraries. Library call signatures are more application-oriented and not OS-specific, allowing us to tap into rich application semantics. Using three anomaly measures (mismatch count, locality frame count, and normalized anomaly signal), we determined the strength of anomalous behavior. Our experiments with various applications, including buffer overflow, Trojan code, and DoS attacks, demonstrated the promise of the library call approach.