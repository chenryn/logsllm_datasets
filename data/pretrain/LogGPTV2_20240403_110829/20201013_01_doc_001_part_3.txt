### Bitmap Index Scan (Parallel, 6): 3807.380 ms
- **MongoDB**: 3808 ms

### Jsonpath Intra Joins (Joining Parts of the Same Column)
- **Jsonpath Version**: This is the fastest because it has its own executor and no overheads. However, it is primitive (uses only nested loops) and wins only by chance.
- **Counterexample**:
  - **Table Creation**:
    ```sql
    CREATE TABLE jb_test AS (
        SELECT 
            jsonb_build_object(
                'id', i/1000,
                'a', jsonb_agg((random()*1000000)::int),
                'b', jsonb_agg((random()*1000000)::int)
            ) AS jb
        FROM generate_series(0,999999) i
        GROUP BY i/1000
    );
    ```
  - **Query 1**:
    ```sql
    SELECT jb->'id' 
    FROM jb_test 
    WHERE jsonb_path_match(jb, '$.a[*] == $.b[*]');
    -- Execution Time: 13 seconds
    ```
  - **Query 2**:
    ```sql
    SELECT jb->'id' 
    FROM jb_test j 
    WHERE EXISTS (
        SELECT 1 
        FROM jsonb_array_elements(j.jb->'a') a,
             jsonb_array_elements(j.jb->'b') b
        WHERE a.value = b.value
    );
    -- Execution Time: 178 seconds
    ```
  - **Alternative Joins**:
    - **Hash Join**: 830 ms
    - **Merge Join**: 4250 ms

### Why Use Jsonpath?
- **Standard Query Language for JSON**: Flexible and concise.
- **Useful for COPY and Indexing JSON**: Faster for complex processing.

### Roadmap (See Addendums)
- **PostgreSQL 13**:
  - SQL/JSON functions from SQL-2016 standard.
  - Datetime support in JSON Path (complete T832) - committed.
  - Planner support functions.
  - Parameters for opclasses - jsonpath to specify parts of jsonb to index.
  - Jsquery GIN opclasses to core.
  - Extended jsonpath syntax:
    - Array, object, sequence construction.
    - Object subscripting, lambda expressions.
    - User-defined item methods and functions.
    - COPY with support of jsonpath.
  - Unify JSON data types.

### Summary
- **PostgreSQL as a NoSQL Database**: PostgreSQL is already a good NoSQL database with a great roadmap.
- **SQL/JSON**: Provides better flexibility and interoperability.
- **JSON Path Implementation (PG12)**: The best implementation.
- **Jsonpath Benefits**: Standard, flexible, concise, and sometimes fast.
- **Migration Suggestion**: Move from NoSQL to PostgreSQL.

### References
1. [Talk on Jsonpath in PostgreSQL](http://www.sai.msu.su/~megera/postgres/talks/jsonpath-pgconfeu-2019.pdf)
2. [Technical Report (SQL/JSON)](http://standards.iso.org/i/PubliclyAvailableStandards/c067367_ISO_IEC_TR_19075-6_2017.zip)
3. [Gentle Introduction to JSON Path in PostgreSQL](https://github.com/obartunov/sqljsondoc/blob/master/jsonpath.md)
4. [Jsquery Extension](https://github.com/postgrespro/jsquery/tree/sqljson)
   - [Jsquery Talk](http://www.sai.msu.su/~megera/postgres/talks/pgconfeu-2014-jsquery.pdf)
5. [Play Online with Jsonpath](http://sqlfiddle.postgrespro.ru/#!21/0/2379)
6. [Parameters for Opclasses](http://www.sai.msu.su/~megera/postgres/talks/opclass_pgconf.ru-2018.pdf)
7. [IMDB Tables](http://www.sai.msu.su/~megera/postgres/files/imdb/imdb/)

### Addendum I: SQL/JSON Functions
- **Construction Functions**:
  - `JSON_OBJECT`, `json[b]_build_object()`
  - `JSON_ARRAY`, `json[b]_build_array()`
  - `JSON_ARRAYAGG`, `json[b]_agg()`
  - `JSON_OBJECTAGG`, `json[b]_object_agg()`

- **Retrieval Functions**:
  - `JSON_VALUE`: Extract an SQL value of a predefined type from a JSON value.
  - `JSON_QUERY`: Extract a JSON text from a JSON text using an SQL/JSON path expression.
  - `JSON_TABLE`: Query a JSON text and present it as a relational table.
  - `IS [NOT] JSON`: Test whether a string value is a JSON text.
  - `JSON_EXISTS`: Test whether a JSON path expression returns any SQL/JSON items.

- **Example: JSON_TABLE**
  - **Query**:
    ```sql
    SELECT apt.*
    FROM house,
         JSON_TABLE(js, '$.floor[0, 1]' COLUMNS (
             level int,
             NESTED PATH '$.apt[1 to last]' COLUMNS (
                 no int,
                 area int,
                 rooms int
             )
         )) apt;
    ```

### Addendum II: Parameters for Opclasses
- **Operator Class**: A "glue" or named collection of access method, set of operators, and AM-specific support function.
- **Examples**:
  - `CREATE INDEX .. USING btree (textcolumn text_pattern_ops)`
  - `CREATE INDEX .. USING gin (jsoncolumn jsonb_ops)`
  - `CREATE INDEX .. USING gin (jsoncolumn jsonb_path_ops)`

- **Extending Indexing Infrastructure**:
  - Allow users to define constants for specific data.
  - Indexing of non-atomic data (arrays, jsonb, tsvector).
  - Specify what part of the column to index.
  - Use different algorithms to index.

- **Syntax**:
  ```sql
  CREATE INDEX idx ON tab USING am (
      {expr {DEFAULT | opclass} ({name=value} [,…])} [,…]
  ) …
  ```

### Addendum III: Planner Support for Jsonpath
- **API for Planner Support Functions**:
  - Allows creating derived index conditions for functions.
  - Example:
    ```sql
    CREATE [OR REPLACE] FUNCTION
    name ([[argmode] [argname] argtype [{DEFAULT|=} default_expr] [,…]])
    {
    ......
    | SUPPORT support_function
    ......
    } ...
    ```

- **Example Queries**:
  ```sql
  SELECT * FROM t t1, t t2 WHERE
  jsonb_path_match(t1.js, '$.a == $a', vars => t2.js, silent => true);
  ```

### Addendum IV: Jsonpath Syntax Extensions
- **Array and Object Construction**:
  - Array: `SELECT jsonb_path_query('[1,2,3]', '[0, $[*], 4]');`
  - Object: `SELECT jsonb_path_query('[1,2,3]','{a: $, "s": $.size()}');`

- **Sequence Construction**:
  - `SELECT jsonb_path_query('[1,2,3]', '0, $[*], 4');`

- **Object Subscripting**:
  - `SELECT jsonb_path_query('{"a": 1}', '$["a"]');`
  - `SELECT jsonb_path_query('{"a": 1, "b": "ccc"}', '$["a","b"]');`

- **Lambda Expressions**:
  - `SELECT jsonb_path_query('[1,2,3]', '$.map(x => x + 10)');`
  - `SELECT jsonb_path_query('[1,2,3]', '$.reduce((x,y) => x + y)');`

- **User-Defined Item Methods and Functions**:
  - `contrib/jsonpathx`
  - Example:
    ```c
    typedef struct JsonPathFuncContext
    {
        JsonPathExecContext *cxt;
        JsonValueList *result;
        const char *funcname;
        JsonItem *jb; /* @ */
        JsonItem *item; /* NULL => func, non-NULL => method */
        JsonPathItem *args;
        void **argscache;
        int nargs;
    } JsonPathFuncContext;
    ```

### Addendum V: Performance of Intra Joins
- **Query**: Find all actors who were editors in the same movie.
- **Relational Analogue**:
  - **Table Creation**:
    ```sql
    CREATE TABLE roles AS
    SELECT
        id,
        r->>'role' AS "role",
        r->>'title' AS "title",
        r->>'character' AS "character",
        r->'ranks' AS "ranks"
    FROM
        names,
        jsonb_array_elements(jb->'roles') roles(r);
    CREATE INDEX ON roles(role);
    CREATE INDEX ON roles (id, title, role); -- composite btree index
    ```
  - **Query**:
    ```sql
    SELECT DISTINCT r1.id
    FROM roles r1
    WHERE r1.role ='editor' AND EXISTS (
        SELECT FROM roles r2 WHERE r2.id = r1.id AND r2.title = r1.title AND r2.role = 'actor'
    );
    ```

- **Execution Times**:
  - Sequential Scan: 34840.434 ms
  - Sequential Scan (parallel, 6): 4233.829 ms
  - Bitmap Index Scan: 13745.517 ms
  - Bitmap Index Scan (parallel, 6): 3807.380 ms

### Addendum VI: Two Floors House
- **Table Creation**:
  ```sql
  CREATE TABLE house(js) AS SELECT jsonb '
  { "floor": [
      { "level": 1,
        "apt": [
          {"no": 1, "area": 40, "rooms": 1},
          {"no": 2, "area": 80, "rooms": 3},
          {"no": 3, "area": null, "rooms": 2}
        ]
      },
      { "level": 2,
        "apt": [
          {"no": 4, "area": 100, "rooms": 3},
          {"no": 5, "area": 60, "rooms": 2}
        ]
      }
    ]
  };
  ```

- **Authors**:
  - Nikita Glukhov, Oleg Bartunov
  - Postgres Professional