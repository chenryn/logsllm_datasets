工具集合中。
12.4.1 双机模式
考虑包含Mali GPU的SoC主要是运行在手机等移动或者嵌入式设备
上，MGD软件的架构是典型的双机模式。目标机上要运行一个信息采
集程序，称为mgddaemon。mgddaemon依赖一个名为libinterceptor.so的
动态库。在使用时，会把这个动态库加载到要调试的进程中，以函数钩
子的形式拦截OpenGL等API调用，采集信息。在主机端执行MGD主程
序后，它会启动Eclipse，呈现图形化的用户界面（见图12-8）。
12.4.2 面向帧调试
MGD的核心功能是围绕“图形渲染”这一3D领域的核心任务而设计
的。一方面，MGD会努力记录渲染过程的每个操作细节，包括3D API
的调用时间、调用参数、调用结果等。另一方面，MGD提供了一系列
针对渲染结果——“帧”的调试功能，比如捕捉帧、回放帧、单步到下一
帧等。
“捕捉帧”功能可以把绘制这一帧的所有过程细节和结果记录下来，
供调试者追查每一个像素的产生过程。其实这一个功能比较早地出现在
微软DirectX SDK的PIX工具中。
在安装DS-5套件后，启动MGD，然后打开一个附带的追踪文件
（Trace File），便可以快速感受MGD的功能了。图12-8便是打开
c:\Program Files\DS-5
v5.28.0\sw\mgd\samples\traces\frame_buffer_object.mgd文件后，切换到第
10帧，然后观察glDrawElements API调用时的情景。
图12-8 MGD的帧捕捉功能
图12-8中的饼图显示的是绘制第10帧时的内存使用情况，其信息源
自Mali驱动程序创建的虚文件接
口/sys/kernel/debug/mali0/ctx/*/mem_profile。
PIX的一个强大功能是反汇编着色器，MGD至今仍不具备。因本书
侧重GPU的通用计算特征，所以对图形调试工具就介绍到这里。
12.5 Gator
在ARM的工具软件中，经常见到Gator这个名字。比如在DS-5中可
以看到这个名字，在MALI GPU的内核态驱动中也可以看到这个名字。
它是做什么的呢？简单回答，它是ARM软件生态圈中的事件追踪系
统，相当于Windows系统的ETW，或者安卓操作系统的ADB，其作用不
可小觑。
与ARM之名类似，Gator之名也在多处使用，并且有几个含义，有
时泛指，有时特指，有时指用户态的后台服务，有时指内核态的驱动程
序，有时又表示提供事件的事件源，本节分别做简单介绍，希望可以帮
读者消除一些疑惑。
12.5.1 Gator内核模块（gator.ko）
下面先介绍Gator家族中的gator.ko。名字中的.ko代表它是Linux操
作系统下的可加载内核模块（Loadable Kernel Module）。
让人欣喜的是，gator.ko的源代码是公开的（参见GitHub官网）。
不过，也不要指望从开源代码里了解太多，因为很多地方都故意用
了障眼法，实情隐去，模糊代之，比如gator.ko的模块描述就是一个很
好的代表。
MODULE_DESCRIPTION("Gator system profiler");
看了这个描述有收获吗？有一点。多吗？不多。描述中一共有三个
单词。第一个单词Gator是以驴释驴。第二个单词system是放之四海而皆
准的模糊词汇。第三个单词profiler是软件调优领域的一个常用术语，
profile有档案之意，指代软件之详情，profiler是获取档案的工具。
其实，gator.ko就是用于访问ARM CPU和Mali GPU内部调试和优化
设施的内核态驱动，它可以动态启用这些设施，把信息存放在内存缓冲
区中，然后再通过用户态的后台服务程序（gatord）发送到主机端。
在gator.ko初始化时，会创建用于存放事件的内存缓冲区。
/* Initialize the buffer with the frame type and core */
for_each_present_cpu(cpu) {
    for (i = 0; i /dev/gator/enable
12.5.3 Gator后台服务（gatord）
下面介绍gatord，根据Linux下后台服务程序常用的命名约定，名字
中的d代表这是一个后台服务程序。
简单来说，gatord的角色是与gator.ko通信并获取追踪事件信息，对
其做一些基本处理后，再发送给主机端的工具，比如DS-5的优化工具
Streamline等。图12-9是几个角色的协作示意图。
图12-9 通过gator采集追踪事件
在gatord的源文件目录中，包含了很多追踪事件的名字，比如在
MaliHwCntrNames.h文件中，根据Mali GPU的型号，分别定义了GPU内
不同功能单元的硬件计数器名字，比如以下计数器。
"T83x_COMPUTE_ACTIVE",
"T83x_COMPUTE_TASKS",
"T83x_COMPUTE_THREADS",
"T83x_COMPUTE_CYCLES_DESC",
"T83x_TRIPIPE_ACTIVE",
"T83x_ARITH_WORDS",
在按GPU名字命名的xml文件中，有每个计数器的简要说明，比如
在events-Mali-T83x_hw.xml文件中可以查到T83x_COMPUTE_ACTIVE
计数器的描述。
看来这个计数器的数值代表的是时钟周期个数，代表采样时间内顶
点或者计算处理单元的活跃时间。可以用它来计算硬件单元的利用率
（utilization）。
12.5.4 Kbase驱动中的gator支持
Kbase是ARM为Mali GPU开发的Linux内核模块，名字中的K是内核
之意。目前Kbase的源文件还没有进入Linux内核源代码的主线，但可以
从ARM网站下载源代码。在Kbase驱动中，也有一系列名叫
mali_kbase_gator_xxx的文件，它们是帮助gator.ko访问GPU硬件的。
二者的接口是所谓的gator API。Kbase驱动实现了这个API，供
gator.ko调用，比如，在gator.ko中会像下面这样获取函数指针。
mali_set_hw_event = symbol_get(_mali_profiling_set_event);
然后通过函数指针调用Kbase中的实现。
12.5.5 含义
在英文中，Gator一词有多种含义，可能是鳄鱼类的动物，也可能
是农用或者军用的小货车。作者在ARM的公开文档中没有找到Gator的
命名解释。但在ARM的软件工具链中，发现一个与Gator性质类似的数
据采集工具，名叫Caiman（12.6节将详细介绍）。比如在DS-5的程序目
录下，与包含gatord的arm和arm64目录并列的win-64子目录下有个
caiman.exe文件。Caiman也表示鳄鱼类的动物。如此看来，Gator的意思
多半就是鳄鱼了。或许当初给Gator程序命名的人很喜欢鳄鱼，也可能
是希望Gator程序有鳄鱼般的大嘴，能够以极快的速度咬住并吞下要收
集的各类事件。
12.6 Kbase驱动的调试设施
Kbase驱动是Mali GPU软件栈中的一个关键角色，本节简要介绍
Kbase驱动中的调试支持，既包括调试驱动本身的设施，也包括它提供
的用于调试和优化整个Mali GPU软件栈的设施。
12.6.1 GPU版本报告
Kbase驱动初始化时，会通过Linux内核的消息打印机制打印一些基
本信息或者错误信息，比如，在Tinker单板系统中，可以看到下面这样
的GPU版本信息。
[5.844563] mali ffa30000.gpu: GPU identified as 0x0750 r0p0 status 1
上面信息中的0x0750代表的是GPU的产品ID，在
mali_kbase_gpu_id.h中可以找到其定义。
#define GPU_ID_PI_T76X  0x0750u
这意味着，系统中的GPU属于Mali Migard架构的T76X系列，与
Tinker单板产品的配置信息Mali-T764 GPU刚好一致。
0x0750后面的r0p0是GPU的主版本号（Major）和子版本号
（Minor），它标识的是针对该款GPU设计所做的改进版本，因此版本
数字通常都比较小，r0p0、r0p2或者r1p0这样的版本号是常见的。
12.6.2 编译选项
Kbase驱动的编译选项中包含了一系列调试和优化有关的设置，比
如CONFIG_MALI_GATOR_SUPPORT用于启用上一节提到的Gator支
持，CONFIG_MALI_DEBUG选项用于启用更多的错误检查。可以使用
zcat /proc/config.gz | grep -i mali这样的命令来检查当前系统所使用驱动
的设置，比如清单12-1是作者观察手头的Tinker单板系统（感谢海增和
人人智能提供的实验硬件）的结果，右侧中文为注释。
清单12-1 观察Mali GPU驱动的编译选项
tinker@ELAR-Systems:~$ zcat /proc/config.gz | grep -i mali
CONFIG_MALI_MIDGARD=y                          // 选择Midgard架构
# CONFIG_MALI_GATOR_SUPPORT is not set         // Gator事件追踪机制
# CONFIG_MALI_MIDGARD_ENABLE_TRACE is not set  // Kbase自身的追踪机制
CONFIG_MALI_DEVFREQ=y  // 启用传统的DVFS（动态电压和频率变换）支持
# CONFIG_MALI_DMA_FENCE is not set            // 命令缓冲区的同步栅栏支持
CONFIG_MALI_EXPERT=y                          // 专业模式
# CONFIG_MALI_PRFCNT_SET_SECONDARY is not set // 启用第二个集合中的性能计数
器
# CONFIG_MALI_PLATFORM_FAKE is not set   // 使用驱动内创建的虚假设备，在开发
早期使用
# CONFIG_MALI_PLATFORM_DEVICETREE is not set  // 使用从设备树获取的硬件信息
CONFIG_MALI_PLATFORM_THIRDPARTY=y             // 判断是否为第三方平台
CONFIG_MALI_PLATFORM_THIRDPARTY_NAME="rk"     // 第三方名，rk是瑞芯微RK系列
# CONFIG_MALI_DEBUG is not set                // 增加更多错误检查
# CONFIG_MALI_NO_MALI is not set // 用于没有硬件GPU的情况下，供模拟环境测试使
用 
# CONFIG_MALI_TRACE_TIMELINE is not set   // 基于Linux内核追踪点技术的时序追
踪设施
# CONFIG_MALI_SYSTEM_TRACE is not set     // 使用Linux系统的追踪机制
# CONFIG_MALI_GPU_MMU_AARCH64 is not set  // 使用64位页表格式
# CONFIG_MALI400 is not set               // 选择支持Mali 400 GPU
考虑到ARM系统的嵌入式特征，通常把Kbase驱动与内核构建在一
个镜像文件（zImage）中。这意味着，如果要改变上述选项，那么需要
下载用于构建内核镜像的所有源代码，然后重现构建。但这也并不像想
象的那么困难，作者用午饭的时间就在Tinker单板系统上为它构建了新
的内核，包括解压下载好的源代码包，安装gcc和其他依赖工具
（libncurses4-dev、bc、libssl-dev），修改配置选项（make ARCH=arm
miniarm-rk3288_defconfig，然后编辑.config），构建和产生
zImage（make zImage ARCH=arm），最后替换/boot下的旧文件。
12.6.3 DebugFS下的虚拟文件
调试文件系统（DebugFS）是Linux内核里专门用于调试的虚拟文件
系统，供内核空间的代码可以通过文件形式输出信息或者接受控制。
Kbase驱动初始化时，会在DebugFS下创建一系列文件和子目录，例
如，在前面多次提到的Tinker单板系统上，可以看到如下信息。
root@ELAR-Systems:/sys/kernel/debug/mali0# ls
ctx  gpu_memory  job_fault  quirks_mmu  quirks_sc  quirks_tiler
其中，ctx是子目录，其他名称都表示文件。在ctx子目录下的
defaults目录中，包含如下两个文件。
root@ELAR-Systems:/sys/kernel/debug/mali0/ctx/defaults# cat infinite_cache