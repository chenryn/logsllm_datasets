OASIS Instructions
init
create
launch
unbind with asym
unbind with sym
bind
7.2 K 3.58 · 10−3
2.16 · 10+3
4.3 B
137 K 6.84 · 10−2
68.1 M 3.40 · 10+1
17.9 M 8.95 · 10+0
3.12 M 1.56 · 10+0
replace CAR mode based memory isolation to support ap-
plications of much larger size.
Similar to our work, Defrawy et al. propose SMART, an
architecture for establishing a dynamic root of trust in re-
mote devices [13]. SMART focuses on remote embedded de-
vices (in particular, low-end microcontroller units (MCUs))
whereas we are applicable to high-end processors. Addition-
ally, SMART investigates the usage of secret key material
to establish a root of trust, assuming the existence of secure
non-volatile memory to store the secret. In contrast, OASIS
is based on the use of SRAM memory–based PUFs [16, 17].
Previous work has explored hardware extensions designed
for an adversary model where software and physical attacks
are possible. Lie et al. present XOM, a hardware imple-
mentation of eXecute-only-memory [26]. Similar to our ad-
versary model, XOM assumes a completely untrusted OS.
Unlike OASIS, XOM assumes a secure manufacturing pro-
cess, allows secure XOM applications to access the plat-
form secret, and requires secure non-volatile memory. Lee
et al. present SP, a processor architecture for isolated ex-
ecution [24, 12]. Similar to OASIS, SP does not require a
secure manufacturing process; however, SP includes no im-
mutable device secret which makes it a challenge to prove
the authenticity of the executing platform to a third party.
Memory cloaking provides secrecy and integrity of appli-
cation data while allowing the OS to carry on most of its
memory management tasks by limiting the OS’s data access
to ciphertext. More recently, Williams et al. (Secure Exe-
22Scenario
One Time
Table 5: Comparison of performance overheads by invocation scenario.
OASIS
DRTM
operation(s)
init[]
operation(s)
time
ref.
NV Write, TPM 2048 Root Key Generation
> 25 sec
[37]
time
3.6 µsec
2.6 sec
34.1 msec
One Time per Owner
create[]
Per Module Launch
(First Time)
launch[] and
unbind[] with K+
encrypted input
po bind
Per Module Launch
(Repeated Invocation)
launch[] and
unbind[] with KC
encrypted input
TrustVisor-modeled AIK Generation:
TPM and µT P M 2048 AIK Generation
TrustVisor-modeled DRTM:
Transfer SLB over LPC, Unseal µT P M keys,
quote SLB, µT P M HV Quote of PAL
> 25 sec
[37]
> 1.8 sec [32]
22 msec
[32]
9.0 msec
TrustVisor-modeled DRTM:
Set-up and HV Quote of PAL
cutables [49]) and Chhabra et al. (SecureMe [8]) propose an
isolated execution environment using hardware-based mem-
ory cloaking. Secure Executables uses CPU-protected mem-
ory regions to store the register set (e.g., while a Secure
Executable is suspended during a system call). This solu-
tion has the advantage of avoiding cryptographic operations;
however, direct memory attacks may be possible (e.g., by a
DMA-enabled hardware component). The root of trust in
Secure Executables is based on a public/private keypair that
is installed in the CPU during manufacturing. In our design,
the manufacturer and the device owner (or system integra-
tor) both contribute to initializing a root of trust. This
reduces the possibility of any large-scale data breaches and
also facilities repurposing the device for new owners. Se-
cureMe improves upon previous cloaking methods by ensur-
ing that the entire address space of the application remains
protected at all times. OASIS diﬀers from SecureMe in its
usage model. Unlike SecureMe, OASIS enforces isolation in
the strictest sense by suspending the OS for the duration of
its sessions.
PUF-Based Secrets. Similar to our work, Suh et al. pro-
pose a secure processing architecture, AEGIS, that makes
use of Physical Unclonable Functions for creating and pro-
tecting secrets [42]. AEGIS consigns security-sensitive OS
functionality (e.g., context switching and virtual memory
management) to a security kernel. However, this approach
faces the same problem as the trusted OS model – the re-
sulting TCB can be quite large.
Alternate Deployment Models. Our ISE is inspired by
the recommendations of McCune et al. [34] but in contrast
to previous approaches that use a TPM as the root of trust,
we use a PUF-derived key, integrated within the processor.
This integration increases performance and diminishes the
possibility of attacks on the buses connecting the platform
to the TPM.
We use hardware instructions to ensure strong isolation
properties during the execution of self-contained security-
sensitive code. Another alternative is to use a special-purpose
hypervisor instead of additional hardware instructions. The
hypervisor provides a less expensive alternative to hardware
instruction set extensions and is signiﬁcantly smaller than
a full OS. Nonetheless, a disadvantage of this approach is
that the hypervisor is trusted to enforce memory isolation
and DMA protection for executing code and, accordingly,
must be included in the TCB.
An alternative to extending functionality to the CPU is
to use a secure co-processor [40]. A dedicated TPM is the
approach endorsed by the TCG. In terms of manufactur-
ing, this approach has the advantage of decoupling system
security from the production of traditional processors. A
drawback of using co-processors, however, is a reduction of
physical security due to the exposed bus. Additionally, the
performance hit due to communicating over the bus is not
suitable for minimal TCB execution where sessions are re-
peatedly setup and torn down.
Alternatively, a co-processor could be included as an IP
on a SoC which would provide speed, tighter control, and
enhanced security. The motivation for extending the pro-
cessor ISA rather than a SoC TPM implementation is cost
savings.
9. CONCLUSION
Currently, TPM-based solutions have not reached wide-
spread application in security-sensitive contexts, perhaps
because TCG solutions lack protection against a more re-
sourceful adversary, lack suﬃcient properties for end-to-end
application protection, lack architectural safeguards against
supply-chain compromises, or concerns over poor perfor-
mance. OASIS oﬀers a stronger degree of protection through
highly eﬃcient isolated execution with no hardware depen-
dencies outside the CPU.
We have explored the extent to which minimal modiﬁca-
tions to commodity CPUs can support isolated code exe-
cution. The ISA extensions explored in this research enable
compute service providers and application developers to pro-
vide high-security assurance at low cost in terms of platform
and software complexity.
10. ACKNOWLEDGMENTS
We are thankful to Olatunji Ruwase, Chen Chen, Yan-
lin Li, and Siddhartha Chhabra for their insightful discus-
sions and for making valuable suggestions for completing
this work, and to the anonymous reviewers for their detailed
comments and valuable feedback.
11. REFERENCES
[1] ARM Security Technology - Building a Secure System using
TrustZone Technology, 2009. Available at
http://infocenter.arm.com/.
[2] The CDW 2011 Cloud Computing Tracking Poll, 2011.
Available at www.cdw.com.
[3] Intel Trusted Execution Technology (Intel TXT) - Software
Development Guide, 2013. Document Number: 315168-009
Available at www.intel.com.
23[4] B¨osch, C., Guajardo, J., Sadeghi, A.-R., Shokrollahi, J., and
Tuyls, P. Eﬃcient Helper Data Key Extractor on FPGAs. In
Cryptographic Hardware and Embedded Systems (CHES)
(2008).
[5] Boyen, X., Dodis, Y., Katz, J., Ostrovsky, R., and Smith, A.
Secure Remote Authentication Using Biometric Data. In
Advances in Cryptology (EUROCRYPT) (2005).
[6] Brian Krebs. Coordinated ATM Heist Nets Thieves $13M,
2011. Available at http://krebsonsecurity.com.
[7] Chen, L. Recommendation for Key Derivation Using
Pseudorandom Functions (Revised). NIST Special Publication
800-108, 2009.
In International conference on Audio and Video Based
Biometric Person Authentication (AVBPA) (2003).
[28] Lu, Y., Lo, L.-T., Watson, G., and Minnich, R. CAR: Using
Cache as RAM in LinuxBIOS, 2012. Available at
http://rere.qmqm.pl/ mirq.
[29] Lucian Constantin. One year after DigiNotar breach, Fox-IT
details extent of compromise, 2012. Available at
www.wired.com.
[30] Maes, R., Tuyls, P., and Verbauwhede, I. Low-Overhead
Implementation of a Soft Decision Helper Data Algorithm for
SRAM PUFs. In Cryptographic Hardware and Embedded
Systems (CHES) (2009).
[8] Chhabra, S., Rogers, B., Solihin, Y., and Prvulovic, M.
[31] Magnusson, P., Christensson, M., Eskilson, J., Forsgren, D.,
SecureME: A Hardware-Software Approach to Full System
Security. In ACM International conference on
Supercomputing (ICS) (2011).
Hallberg, G., Hogberg, J., Larsson, F., Moestedt, A., and
Werner, B. Simics: A full system simulation platform.
Computer (2002).
[9] Dodis, Y., Katz, J., Reyzin, L., and Smith, A. Robust Fuzzy
[32] McCune, J. M., Li, Y., Qu, N., Zhou, Z., Datta, A., Gligor,
Extractors and Authenticated Key Agreement from Close
Secrets. In Advances in Cryptology (CRYPTO) (2006).
[10] Dodis, Y., Reyzin, M., and Smith, A. Fuzzy Extractors: How to
Generate Strong Keys from Biometrics and Other Noisy Data.
In Advances in Cryptology (EUROCRYPT) (2004).
[11] Dolev, D., Dwork, C., and Naor, M. Non-Malleable
Cryptography. In SIAM Journal on Computing (2000).
[12] Dwoskin, J. S., and Lee, R. B. Hardware-rooted trust for secure
key management and transient trust. In ACM conference on
Computer and communications security (CCS) (2007).
[13] El Defrawy, K., Francillon, A., Perito, D., and Tsudik, G.
SMART: Secure and Minimal Architecture for (Establishing a
Dynamic) Root of Trust. In Network and Distributed System
Security Symposium (NDSS) (2012).
[14] Gassend, B., Clarke, D., van Dijk, M., and Devadas, S.
Controlled Physical Random Functions. In Proceedings of
Annual Computer Security Applications Conference
(ACSAC) (2002).
[15] Gassend, B., Clarke, D., van Dijk, M., and Devadas, S. Silicon
Physical Random Functions. In ACM conference on Computer
and Communications Security (CCS) (2002).
[16] Guajardo, J., Kumar, S. S., Schrijen, G.-J., and Tuyls, P.
FPGA Intrinsic PUFs and Their Use for IP Protection. In
Cryptographic Hardware and Embedded Systems (CHES)
(2007).
[17] Holcomb, D. E., Burleson, W. P., and Fu, K. Power-Up SRAM
State as an Identifying Fingerprint and Source of True Random
Numbers. IEEE Trans. Computers (2009).
[18] IEEE. IEEE Standard Speciﬁcations for Public-Key
Cryptography — IEEE Std 1363T M -2000, 2000. Available at
www.ieee.org.
[19] Ittai Anati, Shay Gueron, S. P. J. Innovative Technology for
CPU Attestation and Sealing. In Workshop on Hardware
Architecture for Security and Privacy (2013).
[20] Jason Kincaid. Google Conﬁrms That It Fired Engineer For
Breaking Internal Privacy Policies, 2010. Available at
http://techcrunch.com.
[21] Juels, A., and Wattenberg, M. A Fuzzy Commitment Scheme.
In ACM conference on Computer and Communications
Security (CCS) (1999).
[22] Krawczyk, H. Cryptographic Extraction and Key Derivation:
The HKDF Scheme. In Advances in Cryptology (2010),
CRYPTO.
[23] Kursawe, K., Sadeghi, A.-R., Schellekens, D., Skoric, B., and
Tuyls, P. Reconﬁgurable Physical Unclonable Functions –
Enabling Technology for Tamper-Resistant Storage. In IEEE
International Workshop on Hardware-Oriented Security and
Trust (HOST) (2009).
[24] Lee, R., Kwan, P., McGregor, J., Dwoskin, J., and Wang, Z.
Architecture for Protecting Critical Secrets in Microprocessors.
In Proceedings of the International Symposium on Computer
Architecture (ISCA) (2005).
[25] Li, J., Krohn, M., Mazi`eres, D., and Shasha, D. Secure
Untrusted Data Depository (SUNDR). In USENIX Symposium
on Operating Systems Design & Implementation (OSDI)
(2004).
[26] Lie, D., Thekkath, C., Mitchell, M., Lincoln, P., Boneh, D.,
Mitchell, J., and Horowitz, M. Architectural Support for
Copy and Tamper Resistant Software. ACM SIGPLAN Notices
(2000).
[27] Linnartz, J.-P., and Tuyls, P. New Shielding Functions to
Enhance Privacy and Prevent Misuse of Biometric Templates.
V. D., and Perrig, A. TrustVisor: Eﬃcient TCB Reduction and
Attestation. In IEEE Symposium on Security and Privacy
(S&P) (2010).
[33] McCune, J. M., Parno, B., Perrig, A., Reiter, M. K., and
Isozaki, H. Flicker: An Execution Infrastructure for TCB
Minimization. In ACM European Conference in Computer
Systems (EuroSys) (2008).
[34] McCune, J. M., Parno, B., Perrig, A., Reiter, M. K., and
Seshadri, A. How Low Can You Go? Recommendations for
Hardware-Supported Minimal TCB Code Execution. In ACM
Conference on Architectural Support for Programming
Languages and Operating Systems (ASPLOS) (2008).
[35] Pappu, R. S., Recht, B., Taylor, J., and Gershenfeld, N.
Physical One-way Functions. Science (2002). Available at
web.media.mit.edu.
[36] Parno, B., Lorch, J. R., Douceur, J. R., Mickens, J. W., and
McCune, J. M. Memoir: Practical state continuity for protected
modules. In IEEE Symposium on Security and Privacy (S&P)
(2011).
[37] Schmitz, J., Loew, J., Elwell, J., Ponomarev, D., and
Abu-Ghazaleh, N. B. TPM-SIM: A Framework for Performance
Evaluation of Trusted Platform Modules. In ACM Design
Automation Conference (DAC) (2011).
[38] Shoup, V. A Proposal for an ISO Standard for Public Key
Encryption. Version 2.1, 2001. Available at www.shoup.net.
[39] Shoup, V. OAEP Reconsidered. In Advances in Cryptology
(CRYPTO) (2001). Available at www.shoup.net.
[40] Smith, S. W., and Weingart, S. ”building a high-performance,
programmable secure coprocessor”. Computer Networks (1999).
[41] Song, D., Shi, E., Fischer, I., and Shankar, U. Cloud data
protection for the masses. IEEE Computer (2012).
[42] Suh, G. E., O’Donnell, C. W., and Devadas, S. AEGIS: A
Single-Chip Secure Processor. Information Security Technical
Report (2005).
[43] Symantec. Symantec-Sponsored Ponemon Report Finds
Negligent Employees Top Cause of Data Breaches in the U.S.
While Malicious Attacks Most Costly, 2012. Available at
www.symantec.com.
[44] Taylor, G., and Cox, G. Behind Intel’s New Random-Number
Generator. IEEE Spectrum (2011). Available at
http://spectrum.ieee.org.
[45] Tuyls, P., Schrijen, G.-J., Skoric, B., van Geloven, J.,
Verhaegh, N., and Wolters, R. Read-Proof Hardware from
Protective Coatings. In Cryptographic Hardware and
Embedded Systems (CHES) (2006).
[46] Vasudevan, A., McCune, J., Newsome, J., Perrig, A., and van
Doorn, L. CARMA: A Hardware Tamper-Resistant Isolated
Execution Environment on Commodity x86 Platforms. In ACM
Symposium on Information, Computer and Communications
Security (ASIACCS) (2012).
[47] Virtutech. Simics x86-440BX Target Guide, 2010.
[48] Wang, Y., kei Yu, W., Wu, S., Malysa, G., Suh, G. E., and
Kan, E. C. Flash Memory for Ubiquitous Hardware Security
Functions: True Random Number Generation and Device
Fingerprints. In IEEE Symposium on Security and Privacy
(S&P) (2012).
[49] Williams, P., and Boivie, R. CPU Support for Secure
Executables. In Trust and Trustworthy Computing (2011).
24