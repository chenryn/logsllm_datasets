器传递了一条命令，但服务器却可能发送回不止一个响应。这就增加了问题的复杂性，主要是
在客户端。
12.7.5管道
下面就是实现了管道功能的pipe_imp.c文件，它里面客户端和服务器端的函数都有。
我们曾经在第9章里见到过DEBUG_TRACE标志，如果在程序里定义了这个标志，
就会在客户和服务器双方互相传递数据时显示出各个调用的执行顺序
动手试试：管道函数使用的头文件
1）首先是必要的头文件。
#inelude "cd_data.h*
#include "eliserv.h*
2）我们还定义了一些值，这个文件里的那些函数会用到它们，如下所示：
static int server_fd --1;
static char client_pipe_mame[PATH_MAX + 1] *{*\0′};
static pid_t mypid = 0:
static int client_fd=-1:
statie int elient_write_fd = -1:
1.服务器端函数
接下来，我们去看看服务器端的函数。我们把它分为了两个“动手试试”部分：第一部分
里的函数其作用分别是打开命名管道、关闭命名管道和读取来自客户的消息：第二部分里的函
数分别用来打开客户管道、向客户管道发送数据和关闭客户管道，客户管道是用客户添加在其
请求消息里的进程ID值确定的。
动手试试：服务器函数
1)server_starting例程先为服务器创建出一个它将从中读取命令的命名管道，然后以只读方
式打开它。这个open调用将阻塞到有客户以写方式打开这个管道时才能完成。我们使用的是一
个阻塞模式，这样服务器将阻塞在这个管道的read调用上等待有命令发送过来。
int server_starting(void)
if DEBUG_TRACE
printt(*&d :- server_starting()\n*,getpid());
fendif
it(mkfifo（SERVER_PIPE.0777)ss-1）[
unlink(SERVER_PIPE):
fprintf(stderr.*Server startup error, no FIFo created\n*1;
return(0);
((server_fd+cpea(SERVER_PIPE,O_RDONLY))+±-1)(
if(errno = EINrR)return(0);
加入jaVa编程群：524621833
---
## Page 408
390
Linux程序设计
fprintf(stderr, “Server startup error, no FIFO opened\n*);
return(0);
return(1):
2）当服务器结束运行时，它会把自己的命名管道删除掉，这样客户就能检测出服务器不在
运行中。
void server_ending (void)
if DEBUG_TRACE
#endif
printf(*&d :- server_ending[!\n*,  getpid[))1
(void)close(server_fd);
(void) unlink (SERVER_PIPE) :
3)下面给出的read_request_from_client函数会阻塞服务器管道的读操作，直到有客户向其中
写人一条消息为止。如下所示：
int read_request_from_client(message_db_t *rec_ptr)
int read_bytes:
int return_code = 0;
if DEBUG_TRACE
}（- =1pgaAras} 3
read_bytes = read(server_fd, rec_ptr, sizeof (*rec_ptr));
return(return_code);
4）如果出现没有任何客户以写方式打开这个管道的特殊情况，read将返回“0”，也就是说，
它会检测到一个EOF。服务器会据此关闭这个管道，然后再重新打开它。它用这个办法把自己
阻塞起来，直到有客户打开它为止。这与服务器第一次启动时的情况是完全一样的：等于我们
重新对服务器进行了初始化。把下面这些代码插到上面的函数里去：
if [read_bytes * 0}{
if（(server_fd =open(SERVER_PIPE,O_RDONLY)}  -1){
[void)close(server_fd) ;
if [errno != EINTR)(
fprintf(stderr, *Server error, FIFo open failed\n*);
return(0):
read_bytes = read(server_fd. rec_ptr, sizeof(*rec_ptr));
if (read_byteg * gizeof(*xec_ptr)) return_code = 1;
使用的都是彼此不同的管道，服务器就必须能够向这些不同的管道写数据，这样才能把响应发
送给不同的客户。又因为文件描述符是一种有限的资源，所以服务器只有在需要发送数据的时
加入jaVa编程群：524621833
---
## Page 409
第12章进程间通信：管道
391
候才打开一个客户管道。
我们把客户管道的打开、写和关闭正常分为三个独立的函数。这是为了适应数据库查询操
作中有可能需要返回多个查询结果的要求，我们可以只打开管道一次，写人多个响应，然后再
关闭它。
动手试试：管道操作
1）首先，我们打开客户管道，如下所示：
int start_resp_to_client (const message_db_c mess_to_send)
printf(ad :- start_resp_to_client()\n*,getpid()):
#endif
[void)sprintf (client_pipe_nane,CLiENr_pIPE, mess_to_send.client_pid):
if ((client_fd =open(client_pipe_nane, 0_kRoNLy)]  -1)return(0);
return(1) ;
2）消息数据就是通过调用这个函数发送出去的。我们一会儿就能看到给消息数据划分数据
城的客户端函数了。
int send_resp_to_client [const message_db_t mess_to_send)
int write_bytes;
#endif
printf(*ad :- send_resp_to_client()\n*, getpid()):
if (elient_fd s -1) return(0):
if (write_bytes I sizeof(mess_to_send))return(0);
write_bytes =write(client_fd,&ness_to_send,sizeof(mess_to_send)1;
return(1) ; ,
1
3）最后，我们关闭客户管道，如下所示：
void end_resp_to_client(void)
if DEBUG_TRACE
#endif
printf(*ed:-
end_resp_to_elient[)\n*,getpid());
if （elient_fd1=-1){
(void)close(client_fd):
client_fd = -1;
2.客户端函数
pipe_imp.c文件里的客户函数与服务器是互相配合的。两部分函数很相似，请注意那个
send_mess_to_server（发送消息给服务器）函数。
动手试试：客户函数
1)在检查到有一个可以访问的服务器之后，client_starting函数对客户端管道进行了初始化，
如下所示：
加入jaVva编程群：524621833
---
## Page 410
392
Linux程序设计
int client_starting(void)
#1f DEBOG_TRACE
printf(*ed:- client_starting\a*,getpid(1);
tendif
mypid = getpid();
if（(server_fd=open(SERVER_PIPE.O_wRONLY)1
fprintf(stderr,*Server not running`n*]:
-1}{
return(0):
(void)sprintf (client_pipe_nane, CLIENr_PiPE, mypid):
(void)unlink(client_pipe_name);
if (nkfifo(client_pipe_name,0777) s -1)（
fprintf(stderr.*Unable to create client pipe $s`n*,
client_pipe_nane):
return(0):
return(1):
1
2)client_ending函数的作用是关闭文件描述符并删除现在已经没有用处了的命名管道，如下
所示：
void client_ending (void)
#if DEBUG_TRACE
printf(*ed :- client_ending()\n*,getpid());
#endif
if (client_wrice_fd 1= -1)(void)elose(client_write_fd);
if (server_fd i=-1)(void)close(server_fd);
af
(void)unlink (client_pipe_name) :
3)send_mcss_to_server函数的作用是通过服务器管道发送请求，如下所示：
int send_mess_to_server (message_db_t ness_to_send)
int write_bytes;
#if DEBUG_TRACE
printf(*$d :- send_mess_to_server(1\n*,getpid());
#endif
if （server_td == -1) return(0);
mess_to_send.client_pid=mypid;
write_bytes = write(server_fd, &mess_to_send.sizeof(mess_to_send)):
if (write_bytes !s sizeof(mess_to_send)) return(0):
return(1):
1
与我们前面见过的服务器端函数相对应，为了处理可能会有多个搜索结果的情况，客户在
从服务器取回结果的时候也用了三个函数。
动手试试：从服务器取团处理结果
1）这个客户函数的作用是监听服务器的响应。它先以只读方式打开一个客户管道，然后又
以只写方式再次打开了这个管道。请参考“操作注释”部分里的解释。
(nt start_resp_from_server(void )
加入jaVva编程群：524621833
---
## Page 411
第12章进程间通信：管道
393
#if DEBUG_TRACE
printf(*sd :- start_resp_from_server()\n*.getpid(}):
#endif
f (client_pipe_name{0]='\o)return(0):
if (client_fd1=-1)return(11;
client_fd = open(client:pipe_nane, O_RDONLY):
if (client_fds -1){
client_write_fd = open(client_pipe_name,O_WRoNLY);
if (client_write_fd 1=-1)return(1):
(void)elose(client_fd):
client_fd = -1;
return(0};
2）下面函数里的read调用是具体负责从服务器读取数据，它将取回匹配的数据库数据项。
int read_resp_fron_server (message_db_t *rec_ptt)
int read_bytes;
int return_code =0:
#if DEBUG_TRACE
printf(*sd :- read_resp_from_server (1\n*,getpid(11;
tendif
if (1rec_ptr)return(0);
if (client_fd = -1)return（0);
read_bytes=readiclient_td,rec_ptr.sizeof(*rec_ptr)}:
if (read_bytes se sizeof(*rec_ptr))return_code = 1;
return(return_code):
3）最后这个函数标记出服务器响应的结束。
void end_resp_from_server (void)
#if DEBUG_TRACE
printf(*sd :- end_resp_frcm_server()\n*,getpid());
fendif
/* This function is empty in the pipe inplementation */
操作注释：
star_resp_from_server函数里额外的第二个open调用是：
client_write_fd = open(client_pipe_nane, O_wRoNLY );
它用来预防一个竞争现象的出现，这个竞争现象有可能在服务器需要响应来自同一个客户
快速连续的请求时发生。
为了把这问题说清楚，我们来研究下面这个事件序列：
1）客户把一个请求写到服务器管道。
2）服务器读到这个请求，打开客户管道并且发回响应，但在及时关闭这个客户管道之前被
挂起了。
3）这个客户以读方式打开自已的管道，读取第一个响应并关闭了自己的管道。
加入jaVa编程群：524621833
---
## Page 412
394Linux程序设计
4)接着，这个客户义新发送了一个命令，再次以读方式打开自己的管道。
5）此时，服务器恢复运行，从服务器端关闭了客户管道。
意外的事情发生了：此时客户正读着这个管道，等待着自己第二条请求的响应：但因为已
通过允许客户以读和写两种方式同时打开自己的管道，就没有必要重复性地再次打开这个
管道了，我们也就避免了这种竞争现象的发生。因为客户永远也不会真的向这个管道写数据，
所以根本不会有读到不正确数据的危险。
12.7.6对CD唱盘管理软件的总结
我们现在已经把这个CD唱盘管理软件分为一个客户和一个服务器了。这使我们能够互不干
扰地对用户操作界面和内涵的数据库技术分别进行开发。我们可以看到：一个精心定义的数据
库接口可以让软件的各个主要部分最好地使用计算机资源。如果我们想再前进一步，还可以把
我们的管道实现方案改进为一个网络实现方案，并配上一个专用的数据库服务器计算机。我们
将在第13章里对网络做进一步的学习。
12.8本章总结
这一章的学习内容是如何利用管道在进程间传递数据。
首先，我们对通过popen或pipe调用创建的未命名管道进行了学习，并且讨论了如何利用管
道和dup调用把数据从一个程序传递到另外个程序的标准输入。
接下来，我们对命名管道进行了学习，学习了怎样才能在不相关的程序之间传递数据。
最后，我们实现了一个简单的客户/服务器架构的软件，FIFO文件给我们的不仅有进程间的
同步，还有双向的数据流。
加入jaVa编程群：524621833
---
## Page 413
第13章信号量、消息队列和共享内存
在这一章里，我们将对一组从AT&TSystemV.2版开始出现在UNIX操作系统中的进程间通
信功能进行学习。因为这些功能都出现在同一个发行版本里，并且程序设计方面的接口也都很
接近，所以人们又经常把它们称为IPC（InterProcess（ommunication，进程间通信）功能，或
SystemVIPC。正如我们已经看到的.它们并不是进程之间进行通信的惟一方法，但人们经常