protect against ’migration attacks’ (Section 4.2.3). Despite
the fact that the admitted ﬂows might get protected during
an attack, the newly arriving clients might get redirected to
distant edge servers. Hence, the probability to experience
lower streaming quality increases. Finally, (iii) the resource-
based admission control at edge servers does not solve the
potential to excite resource bottlenecks at reﬂectors, as we
have shown in Section 4.3.
Solving Puzzles
In particular, the approach is as follows.
5.1.3
Another approach, successful in a web server scenario,
is to apply admission control mechanisms capable of accu-
rately distinguishing among DDoS attacks and ﬂash crowds
(e.g., [21]).
In
moments of increased load, the server brings up a graphical
puzzle that only humans can solve. In this way, large-scale
automatically orchestrated DDoS attacks can be prevented.
There are several reasons why this approach might not
be the ’best ﬁt’ for DNS-driven streaming services. First,
such systems provides a transparent service to its customers
(e.g., CNN). Indeed, one of the beneﬁts of the content host-
ing approach is that the middle provider, Akamai in this
case, stays fully invisible to end users. Thus, bringing up
graphical puzzles from the middle servers might be annoy-
ing for clients. Second, this approach would still not solve
the problem when an attack is targeted towards a reﬂec-
tor, and edge servers are only used as proxies. Because the
edge servers are not under attack, and hence may experience
only moderate load, no graphical puzzles will be enforced.
Finally, imposing graphical puzzles at reﬂectors is probably
even more inappropriate than it is the case with edge servers.
5.2 Raising the Bar for Attackers
5.2.1 Location-aware Admission Control
In an attempt to improve clients’ experiences, Akamai’s
measurement infrastructure uses DNS to redirect clients to
approximately the closest edge server in the network sense
[3]. At the same time, we demonstrated that it is possible to
override these DNS ’recommendations,’ and connect to an
arbitrary Akamai’s streaming edge server from anywhere in
the Internet and fetch a stream.
This presents a serious security problem because it en-
ables potential attackers to use machines from all around
the world and target a given point in the Akamai’s network.
Hence, the countermeasure is that edge servers simply re-
ject access to clients that override DNS recommendations.
Enforcing such location-aware admission control at even a
relatively coarse-grained scale would be highly useful. While
this approach would still not fully solve the problem (be-
cause one can recruit a botnet and exploit a suﬃcient num-
ber of machines in a given network area) this approach alone
would dramatically raise the bar for potential attackers.
5.2.2 Reducing System Transparency
The ability to eﬀectively reverse-engineer internal system
parameters and mechanisms signiﬁcantly increases system
vulnerability. Hence, reducing system transparency is an
important countermeasure that we propose below.
Shielding vincible IP addresses.
One of the reasons that makes DNS-based load balanc-
ing approach vulnerable to misbehaviors is exposing edge
servers’ real IP addresses to the public (Figure 2). This en-
ables third parties to measure the characteristics of the sys-
tem and unveil the underlying vulnerabilities, as we demon-
strated in Section 3. This problem can be mitigated by
installing load balancers at edge clusters, e.g., [15, 17]. As
widely adopted in IDC-based architectures (e.g., [9]), real
servers are associated with a load balancer which has a vir-
tual IP address (Figure 13). The virtual IP address is the
only publicly available knowledge to the clients. The clients
requesting service are given the virtual IP, they connect to
of streaming than it is the case with web, this approach
appears viable.
5.3 Broader Context
Here, we discuss the implications of our ﬁndings and coun-
termeasures in a slightly broader context.
Bandwidth-targeted DoS attacks are not dead. DoS
attacks are becoming more and more sophisticated, and it
is becoming evident that attackers are moving away from
bandwith-targeted DoS attacks to more sophisticated, e.g.,
application-level attacks.
In this paper, we demonstrated
that bandwith-targeted DoS attacks against streaming ser-
vices are highly feasible and easy to conduct. Moreover, we
argue that the increased level of streaming in the Internet
has the potential to reverse the above trend. On the one
hand, streaming ﬂows consume a lot of bandwith. On the
other hand, streaming clients are easily discouraged from
accessing such services when the performance is poor. Con-
sequently, attempts to address such problems at a global
Internet scale (e.g., [18]) are certainly valuable.
Tensions between transparency and security. One
of the ways to increase the resiliency of DNS-based systems
to DoS attacks is to reduce system transparency (Section
5.2.2). While this approach is well-suited for proprietary
systems such as Akamai, generalizing such an approach to
the Internet as a whole might bring novel problems. For
example, many ISPs reduce their transparency for secu-
rity reasons, e.g., routers in edge networks already disable
ICMP TTL Time Exceeded replies using ﬁrewalls, which
are needed for traceroute to discover topologies. Moreover,
in light of new attacks against the Internet infrastructure,
proposals to disallow ICMP timestamp replies are becoming
more prominent [29]. At the same time, the Internet trans-
parency (e.g., [25]) is critically needed for the performance
of large-scale distributed systems. Unfortunately, it is be-
coming obvious that the two approaches are at fundamental
odds.
6. CONCLUSIONS
In this paper, we explored the resilience of Akamai’s stream-
ing architecture to intentional service degradation attempts.
We demonstrated that the current system design is inca-
pable of preserving high-quality experiences to streaming
clients in such scenarios.
In particular, we showed that
(i) the DNS-based redirection subsystem, which has proven
very successful in the case of web, is fundamentally inappro-
priate for live streaming. Moreover, (ii) no isolation at either
the network or the server level among customers, channels,
and services, (iii) a strong bias in the stream popularity,
and (iv) a highly transparent and security-oblivious system
design make Akamai’s streaming network extremely vulnera-
ble. We demonstrated that it is feasible to impact arbitrary
customers’ streams in arbitrary network regions. This is
possible to achieve not only by exciting bottlenecks at edge
servers, but by eﬀectively exploiting edge servers as proxies
to provoke bottlenecks at reﬂectors and even origin servers.
We provided a set of countermeasures to help avoid such
vulnerabilities. We showed that a less transparent system
design capable of hiding important internal information (e.g.,
about edge servers, reﬂectors, origin servers, channel assign-
ment, etc.) from the public can dramatically raise the sys-
tem’s resilience to misbehaviors. Still, it should be clear
that minimal users’ tolerance for low quality experiences ac-
Figure 13: IDC-based load balancing
the load balancer, and they are then re-routed to the real
server by internal conﬁguration [16]. Moreover, assume an
edge cluster of size n (servers); since the real servers are not
directly accessible from the Internet, degrading the system
is n times harder than when targeting a single server.
The disadvantage of the hardware-level load balancer ap-
proach (Figure 13) relative to the DNS-based approach is the
lack of application-level load balancing capabilities, e.g., dis-
tinguishing among diﬀerent customers. This can be solved
by assigning multiple virtual IP addresses, e.g., one per cus-
tomer or channel, to the load balancer and then conﬁgure
server assignments internally. In this way, the secured in-
formation can prevent third parties from targeting a single
server and interrupting existing long-live streaming clients
connected to the server.
Shielding administrative information. An underly-
ing problem standing behind the ability to target reﬂectors
or customers’ origin servers deep in the Akamai’s multi-
cast tree is the transparency of the Akamai’s streaming in-
frastructure. Indeed, portset names and even origin server
names (in the case of VoD) are embedded in ARLs, and
hence available to clients. We hypothesize that this design
decision is introduced in order to simplify the system man-
agement. By embedding portset or origin server names in
ARLs, such information need not be kept at edge servers,
which makes them stateless. Consequently, by simply strip-
ping the portset or an origin server name from an ARL, it
is easy to submit an appropriate DNS request and get redi-
rected to the right reﬂector or origin server.
There are two ways to address this problem. The ﬁrst
approach is to keep the state about channels, customers,
etc at edge servers. Given the number of channels (e.g.,
around 2,000) and origin servers, such an approach is fea-
sible. The cost of this approach is that whenever a new
stream becomes active (or inactive), e.g., the broadcast of
a new show, information about its channel membership or
about the origin server names must be disseminated to all
edge servers. Luckily, eﬃcient solutions to such problems do
exist (e.g., [20]).
The second approach is to preserve the integrity of ARLs,
so that they do not feed internal information to the public.
This can be done by using a credible hash function and/or
encoding algorithm at edge servers that can eﬀectively shield
sensitive information embedded in ARLs: encode informa-
tion given to clients and decode in the reverse direction.
This approach can be accomplished at a price of several
CPU cycles per request, and it is immediately deployable.
Given that the request rates are much smaller in the case
companied by the lack of isolation and QoS mechanisms at
servers and at the global Internet makes high-quality stream-
ing inherently vulnerable to jamming misbehaviors.
7. REFERENCES
[1] http://www.pqm.net/webcast/marcon/
cgiagm01022005.html.
[2] http://eventcompressiongroup.com/_fav/encoder_
links.htm.
[3] Akamai. http://www.akamai.com.
[4] End System Multicast. http://esm.cs.cmu.edu/.
[5] Joost. http://www.joost.com/.
[6] MiMMS.
http://savannah.nongnu.org/projects/mimms.
[7] Rinera Networks. http://www.rinera.com/.
[8] URL Snooper. http://www.donationcoder.com/
Software/Mouser/urlsnooper/index.html.
[9] YouTube. http://www.youtube.com/.
[10] Zattoo. http://zattoo.com/.
[11] Akamai Technologies. Akamai Media Delivery.
http://www.akamai.com/html/solutions/media_
delivery.html.
[12] Akamai Technologies. How “Akamaization” Works,
2000. http://www.akamai.com/html/about/press/
releases/2000/press_061300.html.
[13] Akamai Technologies. Akamai study uncovers critical
link between video quality and audience retention,
revenue opportunities, 2007.
http://www.akamai.com/html/about/press/
releases/2007/press_080707.html.
[14] K. Andreev, B. Maggs, A. Meyerson, and
R. Sitaraman. Designing overlay multicast networks
for streaming. In Proceedings of ACM SPAA ’03, San
Diego, CA, June 2003.
[19] Ellacoya Networks. Web traﬃc overtakes peer-to-peer
(p2p) as largest percentage of bandwidth on the
network, June 2007. http://www.ellacoya.com/news/
pdf/2007/NXTcommEllacoyaMediaAlert.pdf.
[20] C. Gkantsidis, T. Karagiannis, and M. Vojnovic.
Planet scale software updates. In Proceedings of ACM
SIGCOMM ’06, Pisa, Italy, Sept. 2006.
[21] S. Kandula, D. Katabi, M. Jacob, and A. Burger.
Botz-4-Sale: Surviving DDoS attacks that mimic ﬂash
crowds. In Proceedings of ACM NSDI ’05, Boston,
MA, May 2005.
[22] L. Kontothanassis, R. Sitaraman, J. Wein, D. Hong,
R. Kleinberg, B. Mancuso, D. Shaw, and D. Stodolsky.
A Transport Layer for Live Streaming in a Content
Delivery Network. Proceedings of the IEEE,
92(9):1408–1419, 2004.
[23] B. Krishnamurthy, C. Wills, and Y. Zhang. On the
use and performance of content distribution networks.
In Proceedings of ACM SIGCOMM IMW ’01, San
Francisco, CA, Nov. 2001.
[24] J. Liu, S. G. Rao, B. Li, and H. Zhang. Opportunities
and Challenges of Peer-to-Peer Internet Video
Broadcast. In Proceedings of the IEEE Special Issue
on Recent Advances in Distributed Multimedia
Communications, 2007.
[25] H. Madhyastha, T. Isdal, M. Piatek, C. Dixon,
T. Anderson, A. Krishnamurthy, and
A. Venkataramani. iPlane: an information plane for
distributed services. In Proceedings of USENIX
OSDI’06, Seattle, WA, Nov. 2006.
[26] K. Sripanidkulchai, A. Ganjam, B. Maggs, and
H. Zhang. The feasibility of supporting large-scale live
streaming applications with dynamic application
end-points. In Proceedings of ACM SIGCOMM ’04,
Portland, Oregon, 2004.
[15] B. Augustin, T. Friedman, and R. Teixeira. Measuring
[27] A.-J. Su, D. Choﬀnes, A. Kuzmanovic, and
load-balanced paths in the internet. In Proceedings of
ACM IMC ’07, San Diego, CA, Oct. 2007.
[16] Cisco Systems, Inc. Conﬁguring server load balancing.
http://www.cisco.com/univercd/cc/td/doc/
product/software/ios122/122cgcr/fipr_c/
ipcprt1/1cfsflb.htm.
[17] Cisco Systems, Inc. How does load balancing work?
http://www.cisco.com/warp/public/105/46.html.
[18] C. Dixon, T. Anderson, and A. Krishnamurthy.
Phalanx: Withstanding multimillion-node botnets. In
Proceedings of ACM NSDI’08, San Francisco, CA,
Apr. 2008.
F. Bustamante. Drafting behind akamai
(travelocity-based detouring). In Proceedings of ACM
SIGCOMM ’06, Pisa, Italy, Sept. 2006.
[28] A. Walters, D. Zage, and C. Nita-Rotaru. Mitigating
attacks against measurement-based adaptation
mechanisms in unstructured multicast overlay
networks. In Proceedings of IEEE ICNP ’06, Santa
Barbara, CA, Nov. 2006.
[29] Y. Zhang, Z. Mao, and J. Wang. Low-rate tcp-targeted
dos attack disrupts internet routing. In Proceedings of
ISOC NDSS ’07, San Diego, CA, Feb. 2007.