pairs when δ = 1.0, but far fewer when δ is as low as 0.5.
This is actually reﬂective of the fact that the system does not
need alibis when δ is very low (and would have instead fallen
into category (4) above). These results are also correlated
with location: note that Saudi Arabia, and Syria show similar
trends and are geographically proximal.
In the vast majority of cases, target regions are non-null,
and in fact, Alibi Routing can be successful. Figure 4 only
measures the case when a safe path to a node in the target
region can be found: our later experiments measure the frac-
tion of time such paths ﬁnd relays that satisfy the alibi con-
dition (Eq. (1)).
How well populated are target regions? The above results
demonstrate how often an alibi is needed and, when so, how
often a peer can ﬁnd at least one. We next investigate how
many alibis are available in a much larger (simulated) de-
ployment of 20,000 nodes. We chose the location of these
 0 0.2 0.4 0.6 0.8 1 0 3000 6000 9000 12000 15000 18000CDFNumber of nodes in target regionδ = 0.0δ = 0.5δ = 1.0 0 0.2 0.4 0.6 0.8 1 0 3000 6000 9000 12000 15000 18000CDFNumber of nodes in target regionδ = 0.0δ = 0.5δ = 1.0 0 2000 4000 6000 8000 10000 12000 14000 16000 18000 0 2 4 6 8 10 12 14 16Number of nodes in target regionMin distance between src to F and dst to F (103 km)δ = 0.0δ = 0.5δ = 1.0 0 2000 4000 6000 8000 10000 12000 14000 16000 18000 0 2 4 6 8 10 12 14 16Number of nodes in target regionMin distance between src to F and dst to F (103 km)δ = 0.0δ = 0.5δ = 1.0619(a) USA is the forbidden region.
(b) China is the forbidden region.
Figure 7: Fraction of possible alibis that pass the alibi condition. (Simulated deployment of 20,000 nodes.)
nodes by subsampling the MaxMind node list [26] which
provides a representative sample of global Internet deploy-
ment. For each forbidden region, and for each pair of nodes
in our data set, we computed the target region (if any), and
counted the number of simulated nodes contained in the tar-
get region.
Figures 5(a) and 5(b) show the CDF of number of nodes
that lie in the target regions with the USA and China as for-
bidden regions. Each plot contains data for three different in-
equality factors (δ). As expected, as δ increases, constraints
on the target region are stronger, which leads to smaller tar-
get regions and fewer possible relays. Figure 5(b) shows that
approximately 10% of pairs are not able to provably avoid
China when the inequality factor is set to 1.0; this number
rises to 22% for the USA.
Intuitively, it will be more difﬁcult to ﬁnd valid alibis
when the source or destination node is close to the forbid-
den region. Figure 6 quantiﬁes this. Each point in this ﬁgure
represents a source-destination pair, with x-value equal to
the minimum distance of either the source or the destina-
tion to the forbidden region. The horizontal gaps in these
plots is due to oceans:
in a global deployment, distances
between nodes are not uniformly distributed. The y-value
corresponds to the number of possible relay nodes available
to the source-destination pair for the given forbidden region.
For both the USA and China set as forbidden, Figure 6
shows the expected strong correlation between the minimum
distance and the number of possible relays. In most cases,
when relays cannot be found, either the source or destination
is close to the forbidden region. Similarly, as the inequality
factor increases, the target regions are constrained, resulting
in fewer possible relays: the vertical striations in the graph
captures this phenomenon.
6.2 How predictive are target regions?
Recall that target regions indicate the geographic areas
wherein alibi nodes may exist; that is, no peers outside a tar-
get region could possibly be an alibi, but not all peers within
a target region are guaranteed to have low enough latencies
to be a viable alibi. We next evaluate how predictive tar-
get regions are by measuring the likelihood that a given peer
within a target region can forward packets quickly enough
to satisfy the alibi conditions (Eq. (1)). To assess what frac-
tion of nodes in the target region are viable alibis, we con-
ducted the following experiment: we periodically, once ev-
ery 10 minutes, computed all-pairs pings between each pair
of nodes on PlanetLab for 24 hours. During each run, each
host sent ﬁve pings to all other hosts, and we recorded this
data. Next, for different forbidden regions, we computed
target regions, and classiﬁed whether a PlanetLab host was a
possible alibi, i.e., whether or not it was in the target region.
Figure 7(a) plots, over all (source, destination, possible
alibi) triples, the cumulative distribution of the fraction of
times a possible alibi passes the alibi condition, i.e., the pos-
sible alibi is a viable relay. The plot shows that about half
of the time, PlanetLab nodes in the target region are not able
to pass the alibi condition. This is explained partly by the
routing centrality of the US [19]: disproportionately many
routes pass through the US, thus even if a peer is in the tar-
get region, there may not be a safe path to it. Further, delays
within PlanetLab and queuing delays on the Internet ensure
that only relays that are very favorably placed can pass the
alibi condition. The picture is different when China is con-
sidered the forbidden region (Figure 7(b)). For low inequal-
ity values, only in about 5% of the cases can a valid alibi not
be found. We acknowledge that this real-world measurement
result is biased by the placement of PlanetLab nodes.
Over one day of pings, the RTTs we measured did not
change enough to cause nodes to oscillate between being
valid alibis and not. If a node was ever a valid alibi, it re-
mained so (with high probability) for all our measurements.
The same is true for nodes that were never a valid alibi.
We next turn to evaluating how close to these ideals our
speciﬁc Alibi Routing protocol performs.
6.3 Alibi Routing success and performance
We next measure how successful Alibi Routing is at ﬁnd-
ing alibis “in the wild” by running our implementation on
370 PlanetLab hosts, and through a simulation over tens of
thousands of nodes. Our ﬁndings indicate that Alibi Routing
succeeds the vast majority of the time, and moreover, ﬁnds
alibis quickly.
 0 0.2 0.4 0.6 0.8 1 0 0.2 0.4 0.6 0.8 1Frac. of (src,dst) pairsFrac. nodes in target region who are alibisδ = 0.0δ = 0.5δ = 1.0 0 0.2 0.4 0.6 0.8 1 0 0.2 0.4 0.6 0.8 1Frac. of (src,dst) pairsFrac. nodes in target region who are alibisδ = 0.0δ = 0.5δ = 1.0620Number of nodes
20,000
10,000
99.5
100.0
93.60
84.12
84.12
93.28
δ
0
0.5
1.0
Forbidden Region
China
USA
100.0
97.19
100.0
99.56
100.0
97.30
δ
0
0.5
1.0
Number of nodes
20,000
10,000
7.11
4.68
37.14
44.40
38.76
35.58
δ
0.0
0.5
1.0
Forbidden Region
USA
1.03
1.00
1.66
China
1.00
1.30
1.00
δ
0
0.5
1.0
Table 1: Protocol success
rate (simulation).
Table 2: Protocol success
rate (PlanetLab).
Table 3: Number of nodes
contacted (simulation).
Table 4: Number of nodes
contacted (PlanetLab).
(a) USA is the forbidden region.
(b) China is the forbidden region.
Figure 8: Time taken to ﬁnd a relay for all PlanetLab source-destination pairs. (Implementation on PlanetLab.)
Table 1 shows Alibi Routing’s success rate for a simu-
lated dataset with 10,000 and 20,000 nodes subsampled from
the MaxMind node set [26]. In these results, we capped the
maximum TTL to 7, and with this setting, for larger values
of δ, the protocol is successful about 84% of the time for the
10,000 node deployment. Running the protocol with much
larger TTLs would increase the success rate, as it would in-
crease the chances of ﬁnding a path to a target region. How-
ever, larger TTLs impose an exponentially higher cost (in
terms of messages and nodes contacted) for these queries.
For our PlanetLab deployment (Table 2), our implementa-
tion (also with max TTL 7) has near 100% success rate re-
gardless of the inequality factor.
Tables 3 and 4 show the protocol overhead in terms of
average number of nodes contacted, both for simulations
and the PlanetLab deployment. The average overhead is ex-
tremely low: on average, on PlanetLab, most searches ter-
minate in two hops. In our simulations, even with 20,000
nodes, the average search cost is less than 40 nodes. The
peak search cost is incurred in the 10,000 node case with in-
equality factor set to 0.5. This, too, is because a very low δ
makes it easy to ﬁnd eligible relays, and a large δ constrains
the target region such that the search cannot proceed very far
before all eligible nodes are exhausted.
Figures 8(a) and 8(b) show the time taken to ﬁnd relays,
as measured by the gettimeofday() call at the source for
the cases when a relay is found. The plots show data for all
source-destination pairs when they are trying to avoid USA
or China. There are relatively few feasible pairs with a non-
null target region for δ = 1.0 when trying to avoid the USA,
and the corresponding CDF does not have many data points.
Note that the plots do not include the cases when a relay can-
not be found: in these cases, our code waits for a maximum
of 40 seconds before timing out on ongoing searches. The
plots show that for successful queries, our implementation
ﬁnds relays relatively quickly, the vast majority being found
in less than one second. Interestingly, the time it takes to ﬁnd
alibis for δ = 0.5 is usually higher than the time taken for
δ = 1.0. This is because the target regions are smaller for
δ = 1.0, causing more queries to fail (which is not captured
in this plot but is evident in Tables 1 and 2).
Figures 9(a) and 9(b) show how Alibi Routing affects end-
to-end latency. Again, the plots show the data for all pairs
when they are trying to avoid either the USA or China. For
many pairs, Alibi Routing improves latency [36, 25]. But for
the vast majority, it increases latency by less than 50%. This
is a surprisingly positive result, given both the geographic
area covered by the USA and China, and their routing cen-
trality. Finally, we note that when relays can be found, la-
tency inﬂation is relatively insular to the inequality factor.
7. RELATED WORK
Alibi Routing is broadly related to a wide range of work
towards inﬂuencing what paths users’ packets take, inferring
what actions were taken within a distributed system, and hid-
ing packet contents from untrusted third parties. We discuss
related work here, and observe that Alibi Routing constitutes
a unique set of goals that are largely orthogonal and comple-
mentary to prior systems.
Avoidance without proof. Recently, there has been a wide
array of research into systems that avoid parts of the network
via explicit support from in-network routers [21, 23, 24, 49].
For example, LIFEGUARD [21] identiﬁes routing failures
and routes around them by sending BGP messages that “poi-
son” a failure-prone area. Also, Kline and Reiher [23] pro-
pose a scheme for avoidance routing that involves explicit
participation from BGP routers; the idea is to issue queries
for destinations that also include requests for certain security
properties, such as an AS’s location.
 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0.1 1 10CDFQuery response time (sec)δ=0.0δ=0.5δ=1.0 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0.1 1 10CDFQuery response time (sec)δ=0.0δ=0.5δ=1.0621(a) USA is the forbidden region.
(b) China is the forbidden region.
Figure 9: Latency inﬂation for using Alibi Routing over the direct path. (Implementation on PlanetLab.)
However, none of these prior systems offer proof of avoid-
ance, and are designed to operate in non-adversarial settings.
Each of these prior systems trusts, to some extent, the ASes
in the network to follow the protocol; for instance, to avoid
an AS, LIFEGUARD relies on that AS to announce poor
routes, which a routing-capable adversary [37] could easily
avoid. What distinguishes our approach from these is the
goal of proving that an area of the network was avoided,
without explicit involvement of those whom users seek to
avoid. Additionally, because Alibi Routing is a peer-to-peer
system, it can be deployed without broad adoption by ISPs.
Policy routing. Many prior systems allow hosts to express
some degree of path preference [14, 35, 47, 48], including
the original IP RFC [31]. More recent systems have intro-
duced the ability of enforcing compliance to users’ desired
routing policies [28, 22]; these systems in particular obtain
proof that a packet traversed a sequence of locations in the
network, even in an adversarial setting. However, none of
these systems offer proofs of avoidance; they can ensure that
a packet visits an ordered set of entities in the network, but
do not detect the intermediate hops: what Kim et al. refer
to as the path detour attack [22]. In this sense, Alibi Rout-
ing is orthogonal and potentially complementary; we use a
much more rudimentary form of path enforcement (the relay
simply signs the packet)—policy enforcement mechanisms
could improve this, particularly if Alibi Routing were to be
expanded to support multi-relay paths.
Obfuscating packet contents. Anonymity and censorship-
resistant systems often hide packets’ contents via obfuscat-
ing proxies [8, 10, 40] or steganography [11]. Whereas Alibi
Routing seeks to avoid censors altogether, these approaches
seek an orthogonal set of properties:
to minimize what a
censor can learn when it sees a user’s trafﬁc.
Several recent approaches broadly referred to as decoy
routing [18, 46, 17], attempt to make it appear to a cen-
sor that the user is communicating with some destination
d whom the censor allows. In reality, a “decoy router” on
the path from the user to d intercepts these requests, and
serves as a proxy to the user’s true destination. As these sys-
tems also “use and confuse” forbidden regions, they too seek
goals orthogonal to Alibi Routing’s.
A natural question to ask is: why do we need Alibi Rout-
ing if we have systems that preserve anonymity and encrypt
end-to-end? In practice, no one approach works all the time:
anonymity systems must typically make their proxies well-
known, and thus a resource-rich adversary may be able to
identify and block access to them; decoy routing systems
make strong trust assumptions that are not compatible with
routing-capable adversaries [37]; and of course Alibi Rout-