# 一、背景介绍

当前，许多代码保护技术都是基于LLVM实现的，例如`ollvm`和`hikari`。这些工具通常将源码与LLVM混合在一起，这种做法并不优雅。随着越来越多的安全专家开始研究基于LLVM的代码保护技术，如何在本地编译和运行环境中高效地加载Pass变得尤为重要。

安卓开发者在保护native代码时，通常有以下两种选择：
1. **替换NDK中的Toolchain**：从GitHub上获取`ollvm`或`hikari`的源代码，编译后替换NDK中原有的toolchain。这种方式非常不优雅，因为需要编译整个LLVM项目，并且对NDK有侵入性，无法保证修改前后NDK的功能一致性。
2. **编译为插件**：编译LLVM项目并将其替换为NDK中的toolchain，然后将`ollvm`或`hikari`移植为独立的插件。这种方式降低了维护成本，但仍然需要编译整个LLVM项目，并对NDK有侵入性。

这两种方案的共同点是都需要编译整个LLVM项目，初次部署时会消耗大量时间和资源，并且在选择LLVM版本时可能会遇到适配问题。

本文提出了一种新的方案，使用NDK环境直接编译和加载Pass，具有以下优点：
- 不需要编译整个LLVM项目，节省了大量时间和资源。
- 不修改原有的NDK运行环境，没有侵入性。
- 上下文与NDK完全一致，不会出现符号未找到的问题，也不需要额外的软件和环境，仅依赖NDK即可。

本文演示的环境包括：Ubuntu 18.04（任意Linux均可）、NDK r20（任意NDK版本均可）和较高版本的CMake。

# 二、使用NDK环境编译一个Pass

通常情况下，编译Pass需要完整的LLVM环境。然而，NDK中的LLVM环境是不完整的，因为它缺少一些二进制文件、静态链接库文件和头文件。因此，开发者通常需要自己编译一份完整的LLVM环境来替换NDK中的LLVM环境。

本文提出的方案不需要编译整个LLVM项目，而是直接使用NDK中破损的LLVM环境来编译Pass。幸运的是，NDK中的`lib/cmake/llvm`目录仍然存在，其中的CMake文件也是原汁原味的。不幸的是，由于AOSP在编译toolchain时设置了`LLVM_LIBDIR_SUFFIX = '64'`，导致`find_package`的路径应该是`lib64/cmake/llvm`，需要稍作修改。

接下来进行`mkdir b; cd b; cmake ..`操作时，会遇到如下错误：
```plaintext
CMake Error at /home/leadroyal/Android/Sdk/ndk/20.0.5594570/toolchains/llvm/prebuilt/linux-x86_64/lib64/cmake/llvm/LLVMExports.cmake:806 (message):
  The imported target "LLVMDemangle" references the file
     "/home/leadroyal/Android/Sdk/ndk/20.0.5594570/toolchains/llvm/prebuilt/linux-x86_64/lib64/libLLVMDemangle.a"
  but this file does not exist.
```

这是因为NDK中缺少`.a`文件，而CMake会检查这些文件用于静态链接。我们可以通过降低日志级别来解决这个问题，将`FATAL_ERROR`改为`WARNING`。

接下来，我们需要解决头文件缺失的问题。NDK中缺失的头文件应该位于`include/llvm`目录中。我们可以通过以下两种方式获取这些头文件：
1. **从源码提取**：找到对应的LLVM源码并使用CMake提取头文件。
2. **使用AOSP提供的预编译文件**：直接下载AOSP提供的预编译文件，更方便。

通过查找NDK生成时的版本信息文件，我们可以找到对应的LLVM版本标识（例如`r346389c`）。然后从AOSP仓库下载对应版本的头文件压缩包。

如果可以接受NDK被污染，可以将头文件放到NDK的toolchain目录中，继续使用`${LLVM_INCLUDE_DIRS}`变量；如果不能接受，则可以将头文件放在其他目录，并使用`include_directories(/path/to/clang-r346389c/include)`。

最终的`CMakeLists.txt`文件如下：
```cmake
cmake_minimum_required(VERSION 3.4)
if(NOT DEFINED ENV{LLVM_HOME})
    message(FATAL_ERROR "$LLVM_HOME is not defined")
endif()
if(NOT DEFINED ENV{LLVM_DIR})
    set(ENV{LLVM_DIR} $ENV{LLVM_HOME}/lib64/cmake/llvm)
endif()
find_package(LLVM REQUIRED CONFIG)
add_definitions(${LLVM_DEFINITIONS})
include_directories(${LLVM_INCLUDE_DIRS})
set(CMAKE_CXX_STANDARD 14)
add_subdirectory(skeleton)  # Use your pass name here.
```

修复完包含问题后，就可以使用CMake生成Pass了：
```bash
export LLVM_HOME=/home/leadroyal/Android/Sdk/ndk/20.0.5594570/toolchains/llvm/prebuilt/linux-x86_64
cd b
cmake ..
cmake --build .
```

# 三、使用NDK环境加载一个Pass

编译完成后，接下来是加载Pass。我们可以在一个Android native项目中修改`build.gradle`文件，添加以下配置：
```groovy
externalNativeBuild {
    cmake {
        cppFlags "-Xclang -load -Xclang /home/leadroyal/llvm-pass-tutorial/b/skeleton/libSkeletonPass.so"
    }
}
```

这样就可以在编译过程中加载Pass，从而实现代码保护功能。