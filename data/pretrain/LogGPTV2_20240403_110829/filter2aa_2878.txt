# Interface Design for Hacking Tools

**Author: Greg Conti**

**Disclaimer:**
The views expressed in this article are those of the author and do not reflect the official policy or position of the United States Military Academy, the Department of the Army, the Department of Defense, or the U.S. Government.

## Outline
- Introduction
- Command Line vs. GUIs
- Task, User, & Technology
- Principles of Design
- GUI Components
- Critique of Tools
- Pointers
- Q&A

## What is an Interface?
An interface is defined as:
- "The point of interaction or communication between a computer and any other entity, such as a printer or human operator." (Source: [dictionary.reference.com](http://dictionary.reference.com/search?q=interface))
- "The way that you accomplish tasks with a product and how it responds – that’s the interface." (Jef Raskin, *The Humane Interface*, p2)

## Command Line vs. GUI
- **Flexibility:** Command lines offer more flexibility, while GUIs provide a more user-friendly experience.
- **Time:** Command lines can be faster for experienced users, but GUIs can save time for beginners.
- **Ease of Use:** GUIs are generally easier to use, especially for new users.
- **Best for Heavy Users:** Command lines are often preferred by power users who need advanced control and customization.

### Example: Crack in One Line of Perl
```perl
perl -nle 'setpwent;crypt($_,$c)eq$c&&print"$u $_"while($u,$c)=getpwent'
```
- **Author:** Alec Muffett

### Example: Several Lines of Perl Can Crack DVD Encryption
```perl
#!/usr/bin/perl
# 472-byte qrpff, Keith Winstein and Marc Horowitz 
# MPEG 2 PS VOB file -> descrambled output on stdout.
# usage: perl -I :::: qrpff
# where k1..k5 are the title key bytes in least to most-significant order
s''$/=\2048;while(<>){G=29;R=142;if((@a=unqT="C*",_)[20]&48){D=89;_=unqb24,qT,@b=map{ord qB8,unqb8,qT,_^$a[--D]}@INC;s/...$/1$&/;Q=unqV,qb25,_;H=73;O=$b[4]>8^(P=(E=255)&(Q>>12^Q>>4^Q/8^Q))>8^(E&(F=(S=O>>14&7^O)^S*8^S>=8))+=P+(~F&E))for@a[128..$#a]}print+qT,@a}'
```
- **Authors:** Keith Winstein and Marc Horowitz
- **Original Source:** [CMU DeCSS Gallery](http://www-2.cs.cmu.edu/~dst/DeCSS/Gallery/qrpff.pl)
- **Note:** The code above is not complete.

## Foundations
- **Tasks:** Understand what tasks your users are trying to accomplish.
- **Users:** Identify who your users are and their level of expertise.
- **Technology:** Choose the appropriate technology based on the task and user needs.

### Understanding Tasks
- What tasks are your users trying to accomplish?

### Who are Your Users?
- **Beginners:** "Ok, I know I'm very slow, stupid too maybe.…I can't see a damn thing except the poster's e-mail address …. I am new to computers and am trying to learn what I can, so please be gentle." (Source: alt.2600.hackersz)
- **Advanced:** "From your questions, it seems you are over-simplifying just what a disassembler can do for you. If you are not an experienced assembly language programmer, then the disassembled file will look like Greek." (Source: alt.2600.hackersz)
- **International Users:** Consider the needs and preferences of international users.

### Enabling Technology
- Analyze the task and your users first. The proper technology follows.

## Principles of Design
- **Cognitive Science:** Apply principles like Fitts’ Law, mental models, and modes.
- **Design for Clarity:** Ensure the design is intuitive, allows exploration, and provides a clear way out.
- **Navigation:** Avoid too many features at the top level and go where users expect.
- **Color:** Use contrast, less is more, consider color blindness, and prefer white or pale backgrounds.
- **Fonts:** Consistency in font use and placement.
- **Metaphor:** Use metaphors that map easily from people’s experience, but avoid overused ones.
- **Consistency:** Build on prior knowledge, place controls consistently, and use consistent keyboard shortcuts.
- **Feedback:** Provide timely feedback, busy indicators, and progress indicators.
- **Testing:** Conduct iterative testing, get user feedback, and allow time for fixes.
- **Information Display and Visualization:** Use tools like Xtraceroute and Ethereal for network traffic visualization.

## GUI Components
- **Radio Buttons:** 1-to-many control, limit to 6 items, set default, and never use just one.
- **Check Boxes:** Used for single on/off settings, max 12 per group, and don’t confuse with radio buttons.
- **Dialog Boxes:** Modal (immediate task) and modeless (ongoing task), beware of too many levels, and ensure cancel actually cancels.
- **Menus:** Keep menu length manageable, avoid confusing items, and use keyboard shortcuts.
- **Labels:** Keep text clear, place labels close to settings, and use consistent terminology.
- **Text Fields:** Provide defaults, make them large enough, highlight current data, and use appropriate font size and alignment.
- **Toolbars/Icons:** Maintain consistency, test images, and sometimes text works better than icons.
- **Forms and Overall Layout:** Follow criteria like dominant reading order, frequency of use, relationship to other controls, and user expectations.

## Critique of Tools
- **NetBus:** By Carl Fredrik Neikter
- **Nmapwin:** Nmap by Fyodor, front end by Jens Vogt
- **SubSeven:** By mobman
- **SuperScan:** By Foundstone Corp
- **Zone Alarm:** By ZoneLabs
- **PGP:** By PGP Corporation
- **Norton Antivirus:** By Symantec Corp

## Example Redesigns
- **WinNuke V95:** Original by BurntBogus, redesigned for improved usability.

## More Information
- **Books:**
  - *GUI Bloopers* by Jeff Johnson
  - *The Design of Everyday Things* by Donald Norman
  - *The Humane Interface* by Jef Raskin
  - *Envisioning Information* by Tufte
  - *The Visual Display of Quantitative Information* by Tufte
  - *Visual Explanations* by Tufte
  - *Web Pages That Suck* by Flanders and Willis
  - *Designing Web Usability & Homepage Usability* by Nielsen
  - *Non-Designers Design Book* by Robin Williams
  - *Designing the User Interface* by Ben Shneiderman

- **Organizations:**
  - Association for Computing Machinery (ACM)
  - Special Interest Group for Computer-Human Interaction (SIGCHI)

## Conclusion
- There are 10 types of people who understand interface design: those that do and those that don’t…

**Your Questions?**