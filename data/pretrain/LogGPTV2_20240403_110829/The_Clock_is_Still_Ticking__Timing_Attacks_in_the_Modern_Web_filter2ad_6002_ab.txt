information with up to microsecond precision [24].
3.2 Basic web-based timing attack
The most straightforward way to perform a cross-site tim-
ing attack is to attempt to load an external resource that
leaks information on the state of the victim as an image,
and measure the time required to download the resource.
More concretely, an attacker could use the JavaScript snip-
pet as deﬁned in Listing 1 to estimate the size of a victim’s
dashboard on the example.org website.
In this example, the browser will start downloading the
user’s dashboard as soon as the src attribute is set on the
Image object. Since the browser does not know in advance
whether the external resource is an image, it will ﬁrst down-
load its entire contents and, subsequently, it will try to dis-
play the resource as an image, but will fail to do so since
the user’s dashboard is an HTML resource. As a result,

var img = new Image ();
img . onerror = f u n c t i o n () {
var end = window . p e r f o r m a n c e . now ();
alert ( ' Result : ' + ( end - start ));
};
var start = window . p e r f o r m a n c e . now ();
img . src = ' http :// example . org / d a s h b o a r d . php ' ;



Listing 1: Basic web-based timing attack
the browser will ﬁre an error event, which indicates to the
attacker that he can stop his timing measurement.
Figure 1 (a) shows the distribution of the time interval be-
tween assigning the src attribute to an image, and the ﬁring
of the error event for the four ﬁles of diﬀerent size. From
this graph, it is clear that by using this traditional type of
timing attack, an adversary requires multiple measurements
to diﬀerentiate between a resource of size 50kB and one of
60kB. When there is a signiﬁcant diﬀerence in ﬁle size, e.g.,
50kB versus 150kB, it may be suﬃcient for an attacker to
rely on the network download time to perform the timing at-
tack. However, it should be noted that these measurements
were acquired in optimal conditions: the browser had only a
single tab open, very few other connections were made dur-
ing the experiment, and the network jitter between the web
server and end-user was minimal. In real-world scenarios, it
is likely these optimal conditions are not met.
As the performance of this type of attack is heavily in-
ﬂuenced by the stability of the network, we performed the
same experiment on a mobile device, which was connected
over a 4G network. Although the mobile device was placed
in a ﬁxed position, and performed no other networking op-
erations, it becomes nearly impossible to distinguish the dis-
tribution of the two smallest ﬁles, as can be seen in Figure 1
(b). For the HTML ﬁles of 150kB and 250kB, the standard
variance becomes considerably larger, which means that an
attacker will require a signiﬁcant number of timing mea-
surements to reliably diﬀerentiate between two ﬁle sizes. As
the window of opportunity during which an attacker can ex-
ecute his attack is limited, and the average download time
can range from multiple hundreds of milliseconds to seconds,
the chance of a successful timing attack is considerably re-
duced.
3.3 Video parsing
To reduce the impact of network performance on tim-
ing measurements, we propose various new types of web-
based timing attacks in the following sections. All the newly
presented timing attacks make use of diﬀerent timing side-
channels that are present in most modern browsers. In this
ﬁrst attack, the side-channel leak is the time it takes the
browser to parse a cross-origin document as a multimedia
resource.
To support built-in media, HTML5 introduced two new
elements:  and  [27]. Using these elements,
a website developer can directly include sound and video
content in a way that is very similar to including an image,
namely by assigning a link of the external resource to the
element’s src attribute. Similar to the  element, the
new media elements also ﬁre various events to indicate the
progress of loading and playing a media ﬁle. More precisely,
to indicate that a resource is currently being downloaded,
a progress event is periodically ﬁred. Similarly, a suspend
1384just as with images, indicates a failure in the attempt to
parse the ﬁle as a media resource. Similar to the previous
experiments, we collected the parsing time for the four ﬁles,
where each remote resource was parsed 100 times. The dis-
tribution of this timing information is depicted in Figure 1
(c). This graph shows that, especially for the 50kB and
60kB ﬁles, the timing measurements for each ﬁle are less
distributed (have a smaller standard deviation) than when
the resource download time is used as a timing measurement.
In summary, this type of timing technique exploits side-
channel information caused by a diﬀerence in parsing time
for multimedia elements. This type of attack is particularly
useful for an adversary when attacking a user whose inter-
net connection is unstable. As the attacker starts his timing
measurement after the resource has been downloaded, the
network connection has no inﬂuence on the timing process.
This also means that delays imposed by the web server, as a
countermeasure for classic timing attacks, are rendered ob-
solete. Coupled with the ability to perform measurements
simultaneously, as parsing a resource only requires a few mil-
liseconds, an adversary can use this attack to rapidly collect
accurate timing measurements on diﬀerent cross-origin re-
sources.
3.4 ApplicationCache
To make websites available oﬄine, web developers can
make use of a recent browser feature named Application-
Cache [41]. By deﬁning a manifest, the web author can de-
ﬁne, among other things, which ﬁles should be permanently
cached, making them available even when the user is no
longer connected to the Internet. Normally the web server
on which a resource is located, determines the caching pol-
icy, for instance by sending out a Cache-Control directive
by the means of an HTTP header [13]. However, in the case
of ApplicationCache, the server-side directives are overrid-
den1, allowing an attacker to force an external resource to
be cached in the context of his attack page.
When a cached resource is requested, the web browser
will read it from the hard disk, and make it available to the
web page. Although reading out a small ﬁle may take less
than a millisecond, we found that the size of a ﬁle still has
a measurable inﬂuence on the time required to read it from
the cache. As a result, this exposes side-channel information
that allows an attacker to estimate the size of a ﬁle.
In our experiment, we deﬁned a manifest as shown in List-
ing 2, which forces the four HTML ﬁles to be cached. When
all ﬁles are cached, the AppCache mechanism ﬁres an event
named cached, after which we start our timing measure-
ments. To reduce the impact of small measuring inaccura-
cies, we measured the time required to sequentially load the
same ﬁle ﬁve times. This resulted in the four distributions as
depicted in Figure 1 (d). The graph shows that, contrary to
the previously discussed attacks, the relative standard devi-
ation is small for all four ﬁles, including larger ﬁles. A major
beneﬁt of using this attack technique is that ﬁles only need
to be downloaded once. As soon as the remote resources are
placed in cache, the attacker can rapidly perform multiple
timing measurements, with each taking only a few millisec-
onds.
1The ApplicationCache manifest will override all caching
directives, except for the no-store directive of the Cache-
Control header.
Figure 1: Distribution of load time, or time required
to parse documents of four diﬀerence sizes
event is ﬁred when the fetch is completed, to indicate the
network state returns to the idle state.
Once a resource is fetched, the browser will parse its con-
tents in an attempt to make it available for playing. As the
external resources in web-based timing attacks usually con-
sist of HTML content, parsing the content will obviously fail.
Interestingly, the time required to parse a resource is depen-
dent on the size of this resource. Consequently, browsers
expose side-channel information that can be used by an at-
tacker to perform a timing attack. It should be noted that
Internet Explorer and Firefox only allow multimedia ﬁles to
be played when these are served with the correct Content-
Type header. Because these browsers immediately abort
video processing as soon as the headers are received, it is
not possible to perform this type of timing technique.
To analyze the variance in parsing time, we measured the
time required to parse a resource, by measuring the time be-
tween the suspend and the error events. The latter event,
1385
*
CACHE M A N I F E S T
CACHE :
http :// example . com /50 kb . html
http :// example . com /60 kb . html
http :// example . com /150 kb . html
http :// example . com /250 kb . html
NETWORK :


Listing 2: Example ApplicationCache manifest
To further improve his attack, an adversary could combine
this attack with the video parsing technique. For smaller
ﬁles, the latter gives more accurate timing information and
because resources do not have to be downloaded for each
measurement, the attacker can determine the size of a cross-
origin resource with precision in a very short time frame.
3.5 Service Workers
Due to the increasing interest in developing web appli-
cations that can gracefully handle an oﬄine environment,
more and more developers have been complaining about the
limitations of the AppCache mechanism [3]. To remove most
of these limitations and to give the web developer program-
matic control over the browser’s cache, a new feature named
Service Workers was developed [39]. Service Workers are
deﬁned as event-driven scripts which have a lifetime that is
independent of the web page that created them. This means
that even when a user closes the browser tab that started the
Service Worker, a process could still be running in the back-
ground. This daemon-like quality of Service Workers can,
unfortunately, become particularly useful for an adversary.
Whereas an attacker traditionally had a very limited time
frame in which he had to collect his timing measurements,
this time frame can now be considerably extended by using
Service Workers.
Since the main purpose of Service Workers is to make web-
sites faster and available oﬄine by intercepting network re-
quests and controlling the cache, they do not have DOM ac-
cess and can only use a limited API. Because of this limited
environment, the video parsing attack deﬁned in Section 3.3
can no longer be used when a victim closes the attacker’s web
page. One of the APIs that is available in a Service Worker
environment, is the Fetch API [37], which allows a script
to perform network requests. Unlike the XMLHttpRequest
API, which also can be used to perform network requests,
the Fetch API can make authenticated cross-origin requests
without using the Cross-Origin Resource Sharing (CORS)
mechanism. For security reasons, it’s not possible to read
out the response of this authenticated cross-origin request,
but the time required to download the resource can still be
used in a web-based timing attack. However, as we have
shown in Section 3.2, a user’s network conditions can heav-
ily inﬂuence the performance of a timing attack.
By using another API in Service Workers, namely the
Cache API, we show that it is possible to extract accurate
timing measurements which are independent of the network
stability, and give an indication of a resource’s ﬁle size. As
was previously mentioned, Service Workers enable a web de-
veloper to programmatically control the cache. This means
that, for instance, a script could ﬁrst download a speciﬁc
resource, hold it in memory, and subsequently place it in
the cache2. In the presented attack, we exploit side-channel
information that is exposed by the time required to place a
resource in the cache, and afterwards remove it.
To evaluate the performance of this timing attack, we cal-
culated, for the four HTML ﬁles, the distribution of 100
timing measurements where each ﬁle was ﬁrst placed in the
cache and then removed, ten times in a row. The num-
ber of sequential additions and removals from the cache was
picked to accommodate the speed of the hard disk, but could
be ﬁne-tuned by an adversary based on a brief benchmark
on the victim’s disk speed. The results of this experiment
are displayed in Figure 1 (e), and show that the perfor-
mance of this timing attack is slightly better than the Ap-
plicationCache attack, as the relative standard deviation is
small, and the distributions of diﬀerent ﬁles show less over-
lap. This comes as no surprise, as both attacks exploit the
side-channel information exposed by the disk activity, i.e.,
read operations for the ApplicationCache attack, and write
operations for the Service Workers attack.
At the time of this writing, Service Workers are incorpo-
rated in the stable versions of Chrome and Opera, which
covers more than 50% of the user-base according to Stat-
Counter [33]. Implementations in other browsers will likely
follow soon: Service Workers are already shipped in sta-
ble versions of Firefox [26] but require manual activation,
and Internet Explorer has also shown interest in providing
them [25]. This means that in the near future, all users who
operate a modern browser, can be victimized by web-based
timing attacks occurring in background processes.
3.6 Script parsing
Whereas the previous timing attacks originate from abus-
ing relatively new HTML5 APIs, the script parsing attack
serves as an example that timing side-channels may also
be present in long-established browser technologies. As the
name already suggests, the timing side-channel in this attack
is introduced by tricking the browser into parsing a remote
resource as a JavaScript ﬁle. This can be easily done by
creating a script element, and assigning the src attribute
to the location of the remote resource. When this element is
added to the DOM, the browser downloads the resource and
attempts to parse and execute it as JavaScript3. An example
of how an attacker would measure the time it takes to parse
a script is shown in Listing 3. In most attack scenarios, the
external resources of which the attacker wants to estimate
the size, are not valid JavaScript ﬁles. For instance, trying
to execute a ﬁle that starts with , will throw a Syn-
taxError on the ﬁrst line, preventing the rest of the “script”
from executing. Nevertheless, the resource still needs to be
read into memory and undergo several operations in order to
be parsed. We found that the time it takes for this process
to complete, is dependent on the size of the resource that