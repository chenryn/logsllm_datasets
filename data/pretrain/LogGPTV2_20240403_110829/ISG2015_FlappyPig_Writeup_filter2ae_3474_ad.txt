后来 发现后面还有点代码,反正没事,就看看了。
在sub_100001530中,首先用输入的前6个字节与程序中的数据异或生成了一个url。url的开头肯定是http://或者[https://,基于此,算出了输入的前6](https://%EF%BC%8C%E5%9F%BA%E4%BA%8E%E6%AD%A4%EF%BC%8C%E7%AE%97%E5%87%BA%E4%BA%86%E8%BE%93%E5%85%A5%E7%9A%84%E5%89%8D6)个字节。求得前6个字节为T0mato,解出来的url为[https://ctftime.org/event/](https://ctftime.org/event/)。
后面程序进入一个18次的循环,每次去访问ctftime的一个页面,然后调用了一个控制流混淆过的函数。
混淆函数没完全看明白,大概猜测是获取某行的第某个字节。
想到题目中说flag为ISG{未输出的内容},v2为char型,循环了18次,比较可能跟flag有关。
后面就用mac本进行调试了,直接在sub_100001330函数返回处下断点,查看每次的eax值,组合起来就是flag。(因网络问题,有时返回的可能为0,需要重跑)。
Flag为ISG{whatAb0uTacupoFte4}
Ps:论有mac本的重要性。
### RPG (400)
分析发现是用rpg maker xp制作出来的游戏,于是下载了该软件。在game目录下放一个Game.rxproj,文件中内容为“RPGXP
1.03”,然后可以打开工程了。
Rpg maker
xp中支持脚本,ruby语法的,然后花了些时间学习怎么用脚本。最后写了个程序提取出地图信息,主要就是用game_player.passable?(x,y,
d)判断是否通行。
Rpg中运行脚本很容易卡死,这里需要分多次提取地图信息。
    file1 = File.new("path.info", "ab+")
        i = 1
        str = String.new
        while i  node.dist:
                        #现在的路径到比以前到这个节点的路径更好~
                        #则使用现在的路径
                        self.open[i].parent = p
                        self.open[i].dist = node.dist
                    continue
                self.open.append(node)
        def get_cost(self, x1, y1, x2, y2):
            """
            上下左右直走,代价为1.0,斜走,代价为1.4
            """
            if x1 == x2 or y1 == y2:
                return 1.0
            return 1.4
        def node_in_close(self, node):
            for i in self.close:
                if node.x == i.x and node.y == i.y:
                    return True
            return False
        def node_in_open(self, node):
            for i, n in enumerate(self.open):
                if node.x == n.x and node.y == n.y:
                    return i
            return -1
        def is_valid_coord(self, x, y):
            if x = self.width or y = self.height:
                return False
            #print y, x, len(test_map)
            return test_map[y][x] != '#'
        def get_searched(self):
            l = []
            for i in self.open:
                l.append((i.x, i.y))
            for i in self.close:
                l.append((i.x, i.y))
            return l