concept attack, we simulated a memory corruption vulnera-
bility that could be used to hijack the virtual function table
pointer of a DOM object. We added a JavaScript host function
hijackVTable into V8 that performs the desired corruption.
Hijacked virtual functions are especially useful for a gadget
chaining because they can serve two purposes: subverting
control ﬂow and controlling the gadget’s operands, which in
the case of the store gadget are two registers. We make use of
the DOM’s Blob class and its slice() method, which is
implemented as a C++ virtual function and accepts two longs
as arguments that can be controlled by a JavaScript caller. We
were fortunate that both arguments eventually reside in the
registers used by the store gadget (R2 and R11), despite the
fact that one of the long arguments is actually passed on the
stack. This occurs because the various trampolines executed to
shufﬂe values between the JavaScript calling convention and
the architecture ABI calling convention happen to leave a copy
of the stack-passed argument in R11.
3) Failure-tolerant invocation: In order to use the store
gadget, our control ﬂow vulnerability must be able to precisely
target the gadget’s store instruction; if execution begins before
the store instruction, the intended instructions before it could
clobber the source register operand. If execution begins after
it, the new return sequence cannot be patched in during the
gadget’s ﬁrst invocation, most likely leading to a crash. To
solve this problem, we place the gadget at a (semi-)predictable
offset within each coarse-grained memory allocation chunk.
V8’s code memory allocator maps a new 1MB chunk of
RWX memory if it can’t fulﬁll an allocation request from the
current pools of free JIT code memory. Allocation requests
are then satisﬁed starting at the low-addressed end of the
3
new chunk. If we could coerce V8 into placing a copy of the
optimized function containing the store gadget as the ﬁrst unit
of code compilation in each fresh 1MB code chunk, we would
need to guess only which 1MB chunk contains a sprayed
gadget (i.e., the most signiﬁcant 12 bits of a 32-bit address).
Unfortunately, due to the nature of V8’s JIT compilation
pipeline, it is not possible to guarantee that the store gadget
will be the ﬁrst unit of code compilation placed in each 1MB
chunk. During a single function instance’s lifetime from dec-
laration to optimized compilation, V8 produces four different
pieces of code which contend for the coveted ﬁrst slot. They
are the anonymous function that declares the function being
sprayed,
the unoptimized JIT code for the function being
sprayed, a second copy of the unoptimized JIT code (which is
produced once more after V8 decides to compile the function
with the optimized compiler), and the optimized JIT code for
the function being sprayed.
For reasons which will become apparent, it is essential
that these four pieces of code are emitted in that exact order,
with no interleaving between parts of consecutively-sprayed
instances of the function. Our spraying procedure ensures this
by invoking each instance of the sprayed function in a loop
a sufﬁciently-large number of times in order to cause V8
to consider the function “hot” and optimize it. The number
of loop iterations was tuned to be large enough that
the
invocation loop for a particular instance of the function would
still be running when the optimized code (which is compiled
asynchronously) is ﬁnally emitted.
If the ﬁrst piece of code in each 1MB chunk were chosen
uniformly at random from the four possibilities, 25% of the
time it would be the anonymous declaration function, over
whose size and contents we exert very little control. However,
due to the various space requirements of the different pieces
of code—384 bytes for the declaration, 2912 bytes for each
copy of the unoptimized code, and 672 bytes for the optimized
code—a new 1MB chunk is most likely to be allocated for the
large unoptimized spray code. Indeed, measurements of V8
embedded in Chrome show that the probabilities that the ﬁrst
copy of optimized spray code in a 1MB chunk will be preceded
by 0, 1, and 2 copies of the unoptimized spray function are
0.391%, 49.2%, and 48.4%, respectively; and the probability
that the anonymous declaration function will take the ﬁrst slot
is only 1.17%.
Although the optimized spray function is not likely to be
sprayed at any single location near the beginning of all 1MB
chunks, in over 98% of chunks, the only code preceding it
in a chunk are unoptimized spray functions, whose size and
contents we control. We take advantage of this fact and craft
the spray function in such a way that an intended return
instruction is emitted at the same offset (∆) from the beginning
of the function in unoptimized code as the store gadget in
optimized code. This makes it safe to accidentally branch into
an unoptimized spray function with a hijacked function call
since execution will immediately return rather than crashing.
Figure 2 illustrates how we accomplished this by placing
a conditional return early in the sprayed function to take
advantage of the fact that V8’s unoptimized JIT code is less
dense than its corresponding optimized code.
With the spray function’s unoptimized and optimized code
laid out as described, there is >98% probability that the store
Fig. 2: Illustration of how a return instruction in unoptimized
JIT code is aligned to the same function offset ∆ as a gadget
in optimized JIT code.
Fig. 3: Illustration of the beginning of a 1MB chunk that can
be probed for the location of a gadget in a failure-tolerant
manner. An incorrect guess of θ or θ + ψ will only execute
a harmless return instruction. ∆ is the common offset of both
the return instruction and the gadget in both the unoptimized
and optimized code.
gadget will reside at one of the following offsets in a given
1MB chunk: θ, θ + ψ, or θ + 2ψ. The values of both θ and
ψ are deterministic and known. The value of θ is the size of
the ﬁxed-sized header at the start of each 1MB chunk plus ∆;
and ψ is the size of the unoptimized spray function. Figure 3
illustrates an example memory layout at the beginning of a
1MB allocation chunk in which two copies of the sprayed
function produced by the non-optimizing JIT precede a copy
of the sprayed function produced by the optimizing JIT. The
optimized copy contains the store gadget, which resides at the
offset θ + 2ψ from the start of the chunk. Observe that if
there were zero or one copies of the unoptimized function
code before the optimized copy, the gadget’s offset from the
chunk’s start would be θ and θ + ψ, respectively.
This meticulously-crafted memory layout enables us to
probe for the gadget’s address in a failure-tolerant manner. The
ﬁrst time the attacker triggers the control ﬂow vulnerability, she
guesses a 1MB chunk and targets the common offset in the ﬁrst
function in the chunk (θ). In the unlikely event that the ﬁrst
4
function sprayMe(x) {…if (x == -1)  return A;…// Trigger gadget production.var R3 = R2a ^ 0x1098;…return B;}return Breturn Aunusable gadgetgadget startreturn Areturn BΔUnoptimized sprayMe()Optimized sprayMe()θreturnreturngadget startψ ψ ΔΔΔ1MB Chunk StartLegendChunk HeaderUnoptimized fxnOptimized fxnfunction sbnz(a, b, c, d)
Mem[c] = Mem[b] - Mem[a]
if (Mem[c] != 0)
// branch to instruction at address d
else
// fallthrough to next instruction
Listing 1: Pseudocode for the sbnz instruction.
We implemented a proof of concept self-sustaining payload
which executes an interpreter loop for a One Instruction Set
Computer (OISC) [19], an abstract universal machine that has
only one instruction. There are many options for the single
instruction; we implemented Subtract and Branch if Non-
Zero (SBNZ). Listing 1 shows the pseudocode for the sbnz
instruction. In the remainder of this subsection, we describe
in detail our technique for constructing a self-sustaining JIT
spraying payload capable of Turing-complete computation, a
NOP-sled construction method, the means by which a self-
sustaining payload may be invoked, and the limitations of the
technique and our proof of concept payload.
1) Payload-building technique: We ﬁrst describe our
method for encoding an unintended Thumb-2 instruction
stream among the intended ARM instructions emitted by
Mozilla SpiderMonkey’s optimizing JIT compiler IonMonkey
and orchestrating the proper ﬂow of control through the un-
intended instructions. Our technique makes use of the bitwise
AND instruction, which computes the bitwise AND of a 12-bit
immediate value (imm12) and the contents of a register (Rn)
and stores the result into an arbitrary register (Rd). By carefully
structuring our JavaScript code, we are able to control both 4-
bit register operands and the 12-bit immediate for a total of 20
out of 32 bits. The bytes in the encoding of ARM’s immediate-
operand bitwise AND instruction form two consecutive 16-bit
Thumb instructions, as shown in Figure 4. From top to bottom,
the rows show the layout of the ARM AND instruction, the
in-memory layout of those bytes, and the layout of those same
bytes when decoded as Thumb-2 instructions.
The observant reader may be curious as to why the
unintended Thumb-2 instruction stream will decode to 16-
bit instructions rather than 32-bit Thumb-2 instructions. The
reason is that 32-bit Thumb-2 instructions must begin with the
bit preﬁx 111012 or 11112, but IonMonkey only allocates live
values to registers in the range 00002–10112, inclusive. Neither
byte B nor byte D in this particular instruction can contain
this preﬁx, and therefore Thumb-mode decoding beginning at
either halfword can only yield 16-bit Thumb-2 instructions.
Why not choose an ARM instruction whose byte B or byte D
can include 32-bit Thumb-2 instruction preﬁxes? The reason
is that it is difﬁcult for an adversary to coerce the JIT compiler
into producing such instructions; and very few bits within those
instructions are easily inﬂuenced by the attacker.
In addition to the constraints on the Rd register, the ﬁrst
Thumb-2 instruction is also constrained by the set of valid
12-bit immediate operands to the ARM AND instruction. The
12-bit immediate is meant to be interpreted as an 8-bit value
with a 4-bit rotation ﬁeld, but valid encodings must use the
smallest possible rotation value. Therefore, it is impossible to
induce the JIT compiler into emitting certain bit patterns in
the imm12 ﬁeld. Taking these constraints into account, the
halfword formed by bytes C and D can still encode a broad
range of 16-bit Thumb-2 instructions.
Fig. 4: Illustration of how the immediate-operand bitwise AND
instruction from the ARM instruction set can be decoded as
two 16-bit Thumb-2 instructions.
function in the 1MB chunk is a declaration (1.17% probability,
assuming spray code is monopolizing JIT code memory), the
attack will fail. However, with high probability, it will be a
copy of the sprayed function’s optimized or unoptimized code.
In those cases, either the gadget or a return instruction will
execute. If it is the former, the attack succeeds; otherwise,
the hijacked virtual function call will
immediately return.
Eventually, the attacker’s script will expect an invocation of
the store gadget to result in shellcode execution, and when
that fails to occur, it can be concluded that the control ﬂow
vulnerability was targeting a return instruction rather than a
store gadget. The script can then increase the target address of
the control ﬂow vulnerability by the size of the unoptimized
spray function (ψ) and try again.
V8 limits the amount of JIT code memory at 256MB. If
the attacker is able to monopolize these 256MB, her odds of
success depend mostly on her ability to guess which 1MB
chunks contain JIT code. On a 32-bit system, a conservative
estimate is 6.125% (256/4096 × 0.98); however, a more
realistic estimate might take into account that the location of
JIT code regions can be narrowed down to half of the available
address space, giving a probability of 12.25%.
C. Constructing a self-sustaining ARM JIT spraying payload
Prior JIT spraying attacks against ARM failed to repurpose
JIT code to form a “self-sustaining” JIT spraying payload that
executes in its entirety once execution branches to it.3 Instead,
Lian et al. [17] introduced the gadget chaining technique,
which we borrowed in the attack we presented in §III-B. Lian
et al. studied JavaScriptCore, which emits Thumb-2 instruc-
tions, and considered the viability of self-sustaining payloads
that encode an unintended instruction stream—be it a stream
of ARM or Thumb-2 instructions—using intended Thumb-2
instructions; they found such payloads to be infeasible.
In this section, we describe a method for encoding an
unintended Thumb-2 instruction stream using ARM instruc-
tions emitted by the Mozilla SpiderMonkey JavaScript engine’s
optimizing JIT compiler IonMonkey. Our technique can be
used by an attacker to achieve arbitrary Turing-complete
computation while executing only instructions decoded from
intended instruction bytes. Whereas the proof of concept JIT
spraying attacks against ARM described in [17] and §III-B
use the JIT spraying payload to launch a JIT code corruption
attack, the technique described in this section is effective even
in the presence of non-writable JIT code.
3Beck [6] demonstrated a spraying technique against the Tamarin Action-
Script JIT on ARM that would enable the encoding of a self-sustaining
payload, but it leverages constant pools—data values inlined with JIT code—
rather than maliciously-repurposed instructions.
5
DCBARaw bytes15                               4ThumbBADCARMRdimm1215   1231                              2011                                0DCBA11100010000019   16Rnimm12111000100000RdRn3       015   1211                                0TABLE I: Table of instructions implementing the SBNZ OISC
abstract machine as a self-sustaining payload. Horizontal rules
indicate branch block boundaries where padding is inserted.
Unintended Thumb
instruction
Intended ARM
instruction
and r10, r1, #9437184
and r3, r1, #262144
and r4, r1, #114294784
and r6, r1, #2686976
and r6, r1, #6946816
and r6, r1, #11206656
and r6, r1, #589824
and r6, r1, #1179648
and r1, r1, #335872
and r6, r1, #26
and r11, r1, #-2013265918
and r6, r1, #15532032
and r3, r1, #2592
and r3, r1, #54525952
and r3, r1, #12582912
and r3, r1, #3440
and r2, r1, #9175040
and r4, r1, #1040187392
and r3, r1, #2592
and r4, r1, #1040187392
and r3, r1, #3472
and r4, r1, #191889408
Label
vpc init
oisc pc init
interpreter loop top
non zero
zero
#
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
add r6, pc, #36
add, r7, #1
mov r5, sp
ldr r1, [r5, #0]
ldr r2, [r5, #4]
ldr r3, [r5, #8]
ldr r1, [r1, #0]
ldr r2, [r2, #0]
sub r2, r2, r1
str r2, [r3, #0]
cbz r2, #104 (zero)
ldr r5, [r5, #12]
subs r6, #162
adds r5, r5, #13
adds r5, r5, #3
subs r6, #215
1
2–12
13
14–15
16
1–16
incr init
vpc advance (× 11)
non zero loopback
vpc advance (× 2)