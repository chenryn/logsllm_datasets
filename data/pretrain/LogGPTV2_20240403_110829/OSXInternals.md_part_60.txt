int16_t sy_narg; // number of arguments
int8_t sy_cancel; // how to cancel, if at all
int8_t sy_funnel; // funnel type, if any, to take upon entry
sy_call_t *sy_call; // implementing function
sy_munge_t *sy_arg_munge32; // arguments munger for 32-bit process
sy_munge_t *sy_arg_munge64; // arguments munger for 64-bit process
int32_t sy_return_type; // return type
} sysent[];
The sysent structure's fields have the following meanings.
 sy_narg is the number of argumentsat most eighttaken by the system call. In the case of the
indirect system call, the number of arguments is limited to seven since the first argument is
dedicated for the target system call's number.
As we saw earlier, a system call specifies whether it can be canceled before execution, after
execution, or not at all. The sy_cancel field holds the cancellation type, which is one of
_SYSCALL_CANCEL_PRE, _SYSCALL_CANCEL_POST, or _SYSCALL_CANCEL_NONE (corresponding
to the PRE, POST, and NONE cancellation specifiers, respectively, in the master file). This feature
is used in the implementation of the pthread_cancel(3) library call, which in turn invokes the
__pthread_markcancel() [bsd/kern/kern_sig.c] system call to cancel a thread's execution.
Most system calls cannot be canceled. Examples of those that can be canceled include read(),
write(), open(), close(), recvmsg(), sendmsg(), and select().
 The sy_funnel field may contain a funnel type that causes the system call's processing to take
(lock) the corresponding funnel before the system call is executed, and drop (unlock) the funnel
after it has executed. The possible values for this argument in Mac OS X 10.4 are NO_FUNNEL
and KERNEL_FUNNEL (corresponding to the KERN and NONE funnel specifiers, respectively, in the
master file).
 The sy_call field points to the kernel function that implements the system call.
 The sy_arg_munge32 and sy_arg_munge64 fields point to functions that are used for munging
[9] system call arguments for 32-bit and 64-bit processes, respectively. We will discuss
munging in Section 6.7.1.2.
[9] Munging a data structure means rewriting or transforming it in some way.
 The sy_return_type field contains one of the following to represent the system call's return
type: _SYSCALL_RET_NONE, _SYSCALL_RET_INT_T, _SYSCALL_RET_UINT_T,
_SYSCALL_RET_OFF_T, _SYSCALL_RET_ADDR_T, _SYSCALL_RET_SIZE_T, and
_SYSCALL_RET_SSIZE_T.
Recall that unix_syscall() receives a pointer to the process control block, which is a savearea
structure. The system call's arguments are received as saved registers GPR3 through GPR10 in the
save area. In the case of an indirect system call, the actual system call arguments start with GPR4,
since GPR3 is used for the system call number. unix_syscall() copies these arguments to the
uu_arg field within the uthread structure before passing them to the call handler.
// bsd/sys/user.h
struct uthread {
int *uu_ar0; // address of user's saved GPR0
u_int64_t uu_arg[8]; // arguments to current system call
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 47 of 137
int *uu_ap; // pointer to argument list
int uu_rval[2]; // system call return values
...
};
As we will see in Chapter 7, an xnu thread structure contains a pointer to the thread's user structure,
roughly analogous to the user area in BSD. Execution within the xnu kernel refers to several
structures, such as the Mach task structure, the Mach thread structure, the BSD process structure, and
the BSD uthread structure. The latter contains several fields used during system call processing.
The U-Area
Historically, the UNIX kernel maintained an entry for every process in a process table,
which always remained in memory. Each process was also allocated a user structureor a
u-areathat was an extension of the process structure. The u-area contained process-related
information that needed to be accessible to the kernel only when the process was
executing. Even though the kernel would not swap out a process structure, it could swap
out the associated u-area. Over time, the criticality of memory as a resource has gradually
lessened, but operating systems have become more complex. Correspondingly, the
process structure has grown in size and the u-area has become less important, with much
of its information being moved into the process structure.
6.7.1.2. Argument Munging
Note that uu_arg is an array of 64-bit unsigned integerseach element represents a 64-bit register. This
is problematic since a parameter passed in a register from 32-bit user space will not map as is to the
uu_arg array. For example, a long long parameter will be passed in a single GPR in a 64-bit program,
but in two GPRs in a 32-bit program.
unix_syscall() addresses the issue arising from the difference depicted in Figure 614 by calling the
system call's specified argument munger, which copies arguments from the save area to the uu_arg
array while adjusting for the differences.
Figure 614. Passing a long long parameter in 32-bit and 64-bit ABIs
$ cat foo.c
extern void bar(long long arg);
void
foo(void)
{
bar((long long)1);
}
$ gcc -static -S foo.c
$ cat foo.s
...
li r3,0
li r4,1
bl _bar
...
$ gcc -arch ppc64 -static -S foo.c
$ cat foo.s
...
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 48 of 137
li r3,1
bl _bar
...
The munger functions are implemented in bsd/dev/ppc/munge.s. Each function takes two
arguments: a pointer to the beginning of the system call parameters within the save area and a pointer
to the uu_arg array. A munger function is named munge_, where  is a string
that encodes the number and types of system call parameters.  is a combination of one or
more of the d, l, s, and w characters. The characters mean the following:
 d represents a 32-bit integer, a 64-bit pointer, or a 64-bit long when the calling process is 64-
bitthat is, in each case, the parameter was passed in a 64-bit GPR. Such an argument is munged
by copying two words from input to output.
 l represents a 64-bit long long passed in two GPRs. Such an argument is munged by skipping a
word of input (the upper 32 bits of the first GPR), copying a word of input to output (the lower
32 bits of the first GPR), skipping another word of input, and copying another word from input
to output.
 s represents a 32-bit signed value. Such an argument is munged by skipping a word of input,
loading and sign-extending the next word of input to yield two words, and copying the two
words to output.
 w represents a 32-bit unsigned value. Such an argument is munged by skipping a word of input,
copying a zero word to output, and copying a word from input to output.
Moreover, multiple munger functions are aliased to a common implementation if each function,
except one, is a prefix of another. For example, munger_w, munger_ww, munger_www, and
munger_wwww are aliased to the same implementationconsequently, four arguments are munged in
each case, regardless of the actual number of arguments. Similarly, munger_wwwww, munger_wwwwww,
munger_wwwwwww, and munger_wwwwwwww are aliased to the same implementation, whose operation is
shown in Figure 615.
Figure 615. An example of system call argument munging
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 49 of 137
Consider the example of the read() system call. It takes three arguments: a file descriptor, a pointer
to a buffer, and the number of bytes to read.
ssize_t
read(int d, void *buf, size_t nbytes);
The 32-bit and 64-bit mungers for the read() system call are munge_www() and munge_ddd(),
respectively.
6.7.1.3. Kernel Processing of BSD System Calls
Figure 616 shows pseudocode depicting the working of unix_syscall(), which, as we saw earlier, is
called by shandler() to process BSD system calls.
Figure 616. Details of the final dispatching of BSD system calls
// bsd/dev/ppc/systemcalls.c
void
unix_syscall(struct savearea *regs)
{
thread_t thread_act;
struct uthread *uthread;
struct proc *proc;
struct sysent *callp;
int error;
unsigned short code;
...
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 50 of 137
// Determine if this is a direct or indirect system call (the "flavor").
// Set the 'code' variable to either GPR3 or GPR0, depending on flavor.
...
// If kdebug tracing is enabled, log an entry indicating that a BSD
// system call is starting, unless this system call is kdebug_trace().
...
// Retrieve the current thread and the corresponding uthread structure.
thread_act = current_thread();
uthread = get_bsdthread_info(thread_act);
...
// Ensure that the current task has a non-NULL proc structure associated
// with it; if not, terminate the current task.
...
// uu_ar0 is the address of user's saved GPR0.
uthread->uu_ar0 = (int *)regs;
// Use the system call number to retrieve the corresponding sysent
// structure. If system call number is too large, use the number 63, which
// is an internal reserved number for a nosys().
//
// In early UNIX, the sysent array had space for 64 system calls. The last
// entry (that is, sysent[63]) was a special system call.
callp = (code >= nsysent) ? &sysent[63] : &sysent[code];
if (callp->sy_narg != 0) { // if the call takes one or more arguments
void *regsp;
sy_munge_t *mungerp;
if (/* this is a 64-bit process */) {
if (/* this is a 64-bit unsafe call */) {
// Turn it into a nosys() -- use system call #63 and bail out.
...
}
// 64-bit argument munger
mungerp = callp->sy_arg_munge64;
} else { /* 32-bit process */
// 32-bit argument munger
mungerp = callp->sy_arg_munge32;
}
// Set regsp to point to either the saved GPR3 in the save area (for a
// direct system call), or to the saved GPR4 (for an indirect system
// call). An indirect system call can take at most 7 arguments.
...
// Call the argument munger.
(*mungerp)(regsp, (void *)&uthread->uu_arg[0]);
}
// Evaluate call for cancellation, and cancel, if required and possible.
...
// Take the kernel funnel if the call requires so.
...
// Assume there will be no error.
error = 0;
// Increment saved SRR0 by one instruction.
regs->save_srr0 += 4;
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 51 of 137
// Test if this is a kernel trace point -- that is, if system call tracing
// through ktrace(2) is enabled for this process. If so, write a trace
// record for this system call.
...
// If auditing is enabled, set up an audit record for the system call.
...
// Call the system call's specific handler.
error = (*(callp->sy_call))(proc, (void *)uthread->uu_arg,
&(uthread->uu_rval[0]));
// If auditing is enabled, commit the audit record.
...
// Handle return value(s)
...
// If this is a ktrace(2) trace point, write a trace record for the
// return of this system call.
...
// Drop the funnel if one was taken.
...
// If kdebug tracing is enabled, log an entry indicating that a BSD
// system call is ending, unless this system call is kdebug_trace().
...
thread_exception_return();
/* NOTREACHED */
}
unix_syscall() potentially performs several types of tracing or logging: kdebug tracing, ktrace(2)
tracing, and audit logging. We will discuss kdebug and kTRace(2) later in this chapter.
Arguments are passed packaged into a structure to the call-specific handler. Let us consider the
example of the socketpair(2) system call, which takes four arguments: three integers and a pointer
to a buffer for holding two integers.
int socketpair(int domain, int type, int protocol, int *rsv);
The bsd/sys/sysproto.h file, which, as noted earlier, is generated by
bsd/kern/makesyscalls.sh, contains argument structure declarations for all BSD system calls.
Note also the use of left and right padding in the declaration of the socketpair_args structure.
// bsd/sys/sysproto.h
#ifdef __ppc__
#define PAD_(t) (sizeof(uint64_t) domain, &so1, uap->type, &uap->protocol);
...
error = socreate(uap->domain, &so2, uap->type, &uap->protocol);
...
error = falloc(p, &fp1, &fd);
...
sv[0] = fd;
error = falloc(p, &fp2, &fd);
...
sv[1] = fd;
...
error = copyout((caddr_t)sv, uap->rsv, 2 * sizeof(int));
...
return (error);
}
Note that before calling the system call handler, unix_syscall() sets the error status to zero,
assuming that there will be no error. Recall that the saved SRR0 register contains the address of the
instruction immediately following the system call instruction. This is where execution would resume
after returning to user space from the system call. As we will shortly see, a standard user-space library
stub for a BSD system call invokes the cerror() library function to set the errno variablethis should
be done only if there is an error. unix_syscall() increments the saved SRR0 by one instruction, so
that the call to cerror() will be skipped if there is no error. If the system call handler indeed does
return an error, the SRR0 value is decremented by one instruction.
After returning from the handler, unix_syscall() examines the error variable to take the
appropriate action.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 53 of 137
 If error is ERESTART, this is a restartable system call that needs to be restarted. unix_syscall
() decrements SRR0 by 8 bytes (two instructions) to cause execution to resume at the original
system call instruction.
 If error is EJUSTRETURN, this system call wants to be returned to user space without any
further processing of return values.
 If error is nonzero, the system call returned an error, which unix_syscall() copies to the