        if err != nil {
            evm.StateDB.RevertToSnapshot(snapshot)
            if err != errExecutionReverted {
                contract.UseGas(contract.Gas)
            }
        }
        return ret, contract.Gas, err
    }
###### EVM.StaticCall
    // StaticCall executes the contract associated with the addr with the given input
    // as parameters while disallowing any modifications to the state during the call.
    // Opcodes that attempt to perform such modifications will result in exceptions
    // instead of performing the modifications.
    //hunya// 与EVM.Call类似，但不允许执行会修改永久存储的数据的指令
    func (evm *EVM) StaticCall(caller ContractRef, addr common.Address, input []byte, gas uint64) (ret []byte, leftOverGas uint64, err error) {
        if evm.vmConfig.NoRecursion && evm.depth > 0 {
            return nil, gas, nil
        }
        // Fail if we're trying to execute above the call depth limit
        if evm.depth > int(params.CallCreateDepth) {
            return nil, gas, ErrDepth
        }
        var (
            to       = AccountRef(addr)
            snapshot = evm.StateDB.Snapshot()
        )
        // Initialise a new contract and set the code that is to be used by the EVM.
        // The contract is a scoped environment for this execution context only.
        contract := NewContract(caller, to, new(big.Int), gas)
        contract.SetCallCode(&addr, evm.StateDB.GetCodeHash(addr), evm.StateDB.GetCode(addr))
        // We do an AddBalance of zero here, just in order to trigger a touch.
        // This doesn't matter on Mainnet, where all empties are gone at the time of Byzantium,
        // but is the correct thing to do and matters on other networks, in tests, and potential
        // future scenarios
        evm.StateDB.AddBalance(addr, bigZero)
        // When an error was returned by the EVM or when setting the creation code
        // above we revert to the snapshot and consume any gas remaining. Additionally
        // when we're in Homestead this also counts for code storage gas errors.
        ret, err = run(evm, contract, input, true)//hunya// 调用run函数执行合约
        if err != nil {
            evm.StateDB.RevertToSnapshot(snapshot)
            if err != errExecutionReverted {
                contract.UseGas(contract.Gas)
            }
        }
        return ret, contract.Gas, err
    }
`run`函数前半段是判断是否是以太坊内置预编译的特殊合约，有单独的运行方式
后半段则是对于一般的合约调用解释器`interpreter`去执行调用
#### interpreter.go
解释器相关代码在`interpreter.go`中，`interpreter`是一个接口，目前仅有`EVMInterpreter`这一个具体实现
合约经由`EVM.Call`调用`Interpreter.Run`来到`EVMInpreter.Run`
`EVMInterpreter`的`Run`方法代码较长，其中处理执行合约字节码的主循环如下：
大部分代码主要是检查准备运行环境，执行合约字节码的核心代码主要是以下3行
    op = contract.GetOp(pc)
    operation := in.cfg.JumpTable[op]
    ......
    res, err = operation.execute(&pc, in, contract, mem, stack)
    ......
`interpreter`的主要工作实际上只是通过`JumpTable`查找指令，起到一个翻译解析的作用
最终的执行是通过调用`operation`对象的`execute`方法
#### jump_table.go
`operation`的定义位于`jump_table.go`中
`jump_table.go`中还定义了`JumpTable`和多种不同的指令集
在基本指令集中有三个处理`input`的指令，分别是`CALLDATALOAD`、`CALLDATASIZE`和`CALLDATACOPY`
`jump_table.go`中的代码同样只是起到解析的功能，提供了指令的查找，定义了每个指令具体的执行函数
#### instructions.go
`instructions.go`中是所有指令的具体实现，上述三个函数的具体实现如下：
这三个函数的作用分别是从`input`加载参数入栈、获取`input`大小、复制`input`中的参数到内存
我们重点关注`opCallDataLoad`函数是如何处理`input`中的参数入栈的
`opCallDataLoad`函数调用`getDataBig`函数，传入`contract.Input`、`stack.pop()`和`big32`，将结果转为`big.Int`入栈
`getDataBig`函数以`stack.pop()`栈顶元素作为起始索引，截取`input`中`big32`大小的数据，然后传入`common.RightPadBytes`处理并返回
其中涉及到的另外两个函数`math.BigMin`和`common.RightPadBytes`如下：
    //file: go-thereum/common/math/big.go
    func BigMin(x, y *big.Int) *big.Int {
        if x.Cmp(y) > 0 {
            return y
        }
        return x
    }
    //file: go-ethereum/common/bytes.go
    func RightPadBytes(slice []byte, l int) []byte {
        if l  uint256) internal _balances;
        event Transfer(address indexed from, address indexed to, uint256 value);
        constructor() public {
            _totalSupply = 1 * 10 ** 18;
            _balances[msg.sender] = _totalSupply;
        }
        function totalSupply() external view returns (uint256) {
            return _totalSupply;
        }
        function balanceOf(address account) external view returns (uint256) {
            return _balances[account];
        }
        function transfer(address to,uint256 value) public returns (bool) {
            require(to != address(0));
            require(_balances[msg.sender] >= value);
            require(_balances[to] + value >= _balances[to]);
            _balances[msg.sender] -= value;
            _balances[to] += value;
            emit Transfer(msg.sender, to, value);
        }
    }
remix部署，调用`transfer`发起正常的转账
`input`为`0xa9059cbb00000000000000000000000071430fd8c82cc7b991a8455fc6ea5b37a06d393f0000000000000000000000000000000000000000000000000000000000000001`
直接尝试短地址攻击，删去转账地址的后两位，会发现并不能通过，remix会直接报错
这是因为`web3.js`做了校验，`web3.js`是用户与以太坊节点交互的媒介
#### 源码复现
通过源码函数复现如下：
#### 实际复现
至于如何完成实际场景的攻击，可以参考文末的链接[1]，利用`web3.eth.sendSignedTransaction`绕过限制
实际上，`web3.js`做的校验仅限于显式传入转账地址的函数，如`web3.eth.sendTransaction`这种，像`web3.eth.sendSignedTransaction`、`web3.eth.sendRawTransaction`这种传入的参数是序列化后的数据的就校验不了，是可以完成短地址攻击的，感兴趣的可以自己尝试，这里就不多写了
PS：文中分析的`go-ethereum`源码版本是`commit-fdff182`，源码与最新版有些出入，但最新版的也未修复这种缺陷（可能官方不认为这是缺陷?），分析思路依然可以沿用
### 思考
以太坊底层EVM并没有修复短地址攻击的这么一个缺陷，而是直接在`web3.js`里对地址做的校验，目前各种合约或多或少也做了校验，所以虽然EVM底层可以复现，但实际场景中问题应该不大，但如果是开放RPC的节点可能还是会存在这种风险
另外还有一个点，按底层EVM的这种机制，易受攻击的应该不仅仅是`transfer(address to, uint256
value)`这个点，只是因为这个函数是ERC20代币标准，而且参数的设计恰好能导致涉及金额的短地址攻击，并且特殊的地址易构造，所以这个函数常作为短地址攻击的典型。在其他的一些非代币合约，如竞猜、游戏类的合约中，一些非转账类的事务处理函数中，如果不对类似地址这种的参数做长度校验，可能也存在类似短地址攻击的风险，也或者并不局限于地址，可能还有其他的利用方式还没挖掘出来。
### 参考
[1] 以太坊短地址攻击详解
[2] 以太坊源码解析：evm
* * *