2.11 
If the victim’s banking account is preset with daily transaction limit, then the attacker 
will have to perform several transactions in different days. In this case, the attacker needs to 
reduce the use of security tokens by avoiding redundant login attempts. This can be done by 
making the web browser reload the page automatically every minute to prevent from session 
expiry. Step 1.3 to 1.6 is repeated until the balance in victim’s banking account is emptied. 
Reasons of automating the attack through GUI at server side: 
1. It is a lot simpler than hooking HttpRequestA() in wininet.dll therefore there is a high probability 
that more criminals might use this technique 
2. Hooking wininet.dll doesn’t work for web browsers are implemented using API calls directly to 
Winsock APIs and proprietary or open SSL libraries 
3. Compared to API hooking or using Browser Helper Object (Man-In-The-Browser attack) at client 
side, simulating the web request at server side does not trigger any IDS/IPS software that 
detects hooking behavior or browser integrity tampering 
4. Storing the malicious logic code at server side for automation also makes security analyst hard 
to find out what was done and what is being done in the attack when performing forensic 
analysis on victim’s computer 
Let’s Sink The Phishermen’s Boat! 
Teo Sze Siong 
F-Secure Corporation 
PI:EMAIL 
BE SURE! 
Phishing Website Detection using ‘website appearance signature’ 
Phishing is a form of social engineering attack to gain the trust of their victim in revealing 
sensitive information therefore it is technically hard to detect fraudulent website 100% accurately. 
In this section, the concept of ‘website appearance signature’ is introduced to assist the detection 
of similar websites and to show how it can be applied to detect phishing websites. 
First, the screenshot of a rendered website is captured in 24-bits color depth. Since two similar 
images will contain the similar color palettes and similar amount of pixels in the same group of 
palettes, thus the color mean values for red, green and blue value of an image can be used as a 
signature to identify their similarity. In this approach, we only need to know the amounts of similar 
color pixels so the arrangement or orders of color pixels are ignored. This is due to some legitimate 
websites’ content might be aligned to the center while the similar content on phishing websites are 
aligned to the left or even right. 
There are 8 bits in a byte. Each pixel in a 24-bits color depth image is represented by 3 bytes. 
The color of a pixel is combined from red, green and blue therefore the value for each element can 
range from 0 to 255. To obtain the signature of a rendered website screenshot, I’ve chosen a simple 
way by using the mean values for the red, green and blue element of an image.  
Below shows example of four same size images followed by their red, green and blue mean 
values. The first image is the original screenshot of the rendered PayPal website while the second 
image is a messed up image modified from the original screenshot by cutting the image into 
multiple pieces. Third image is the fake version of PayPal website with the contrast and brightness 
level slightly tweaked to make sure the color values are different. The last image shows a totally 
different image which is the screenshot of rendered 2Checkout.com website. 
Let’s Sink The Phishermen’s Boat! 
Teo Sze Siong 
F-Secure Corporation 
PI:EMAIL 
BE SURE! 
1. paypal.bmp – A screenshot of the real PayPal website 
[Mean values] 
Red: 226.26349166666665, Green: 232.64016333333333, Blue: 236.67534166666667 
2. messed.bmp – A messed up image modified from paypal.bmp 
[Mean values] 
Red: 226.26936333333333, Green: 232.64310833333334, Blue: 236.67663166666668 
Let’s Sink The Phishermen’s Boat! 
Teo Sze Siong 
F-Secure Corporation 
PI:EMAIL 
BE SURE! 
3. fake.bmp – A screenshot of fake PayPal website [contrast and brightness level tweaked] 
[Mean values] 
Red: 225.603835, Green: 231.98625166666667, Blue: 236.01825500000001 
4. 2checkout.bmp – A screenshot of the real 2Checkout.com website 
[Mean values] 
Red: 207.40960000000001, Green: 220.19798166666666, Blue: 213.34901500000001 
Let’s Sink The Phishermen’s Boat! 
Teo Sze Siong 
F-Secure Corporation 
PI:EMAIL 
BE SURE! 
2.12 
Image similarity detection 
Based on the pattern of these data, it is clear that when two images containing similar color 
palettes and similar amount of pixels in the same group of palettes, the mean values for red, 
green and blue are almost identical or near to each other. Thus, the RGB mean values of an 
image can be used as a signature to check for similarity of rendered web appearance. The 
following formula can be used to calculate the similarity percentage between two images: 
r1 – Red color mean value of image-1,  
r2 – Red color mean value of image-2 
g1 – Green color mean value of image-1, 
g2 – Green color mean value of image-2 
b1 – Blue color mean value of image-1,  
b2 – Blue color mean value of image-2 
rDiff = |((r1 – r2) / 256)|, 
gDiff = |((r1 – r2) / 256)|, 
bDiff = |((r1 – r2) / 256)| 
Therefore, 
100 – ((rDiff  + gDiff  + bDiff) * 100) = % of similarity 
Example calculation: 
Difference of paypal.bmp and messed.bmp 
rDiff = |((226.26349166666665 - 226.26936333333333) / 256)| = 0.00002293619791671875 
gDiff = |((232.64016333333333 - 232.64310833333334) / 256)| = 0.0000115039062500390625 
bDiff = |((236.67534166666667 - 236.67663166666668) / 256)| = 0.0000050390625000390625 
100 – (0.000039479166666796875 * 100) = 99.9960520833333203125 % similar 
Difference of paypal.bmp and fake.bmp 
rDiff = |((226.26349166666665 - 225.603835) / 256)| = 0.0025767838541666015625 
gDiff = |((232.64016333333333 - 231.98625166666667) / 256)| = 0.002554342447916640625 
bDiff = |((236.67534166666667 - 236.01825500000001) / 256)| = 0.002566744791666640625 
100 – (0.0076978710937498828125 * 100) = 99.23021289062501171875 % similar 
Difference of paypal.bmp and 2checkout.bmp 
rDiff = |((226.26349166666665 - 207.40960000000001) / 256)| = 0.0736480143229165625 
gDiff = |((232.64016333333333 - 220.19798166666666) / 256)| = 0.0486022721354166796875 
bDiff = |((236.67534166666667 - 213.34901500000001) / 256)| = 0.091118463541666640625 
100 – (0.2133687499999998828125 * 100) = 78.66312500000001171875 % similar 
This approach is far more effective than creating a signature based on the layout structure of 
HTML or Javascript source of a website because some phishing websites employ obfuscation 
technique or showing a similar appearance entirely using Flash content. 
Let’s Sink The Phishermen’s Boat! 
Teo Sze Siong 
F-Secure Corporation 
PI:EMAIL 
BE SURE! 
2.13 
Application of website appearance signature 
Using the earlier described technique to obtain website appearance signature and percentage of 
similarity between two websites, the algorithm can be applied to create a simple anti-phishing 
system. Since it is much easier to obtain information of legitimate websites than blacklisting 
phishing websites, we can make use of that information in an example system like below: 
Example of a basic anti-phishing system 
Web Browser Plugin / 
Tool installed to help 
user verify website 
before performing online 
transaction / banking 
Website 
Reputation 
Analysis Engine  
Send website information such as URL, 
appearance signature, local analysis result on 
HTML source, certificate validity status etc. 
Database containing 
information of legitimate 
financial / banking related 
websites [e.g. Signatures, 
URL, domain name age, etc.] 
1. Capture the screenshot of webpage when 
loading completed 
2. Calculate the pixel color mean values to be 
used as signature 
3. Submit the URL and signature to server for 
analysis of website reputation 
4. Show the user analysis result from server to 
know whether the loaded website is legitimate 
Return analysis result of website 
(Chances of being a 
LEGITIMATE / PHISH website) 
Score-based Algorithm 
- Appearance similar to legitimate website 
but hostname/IP address mismatch? 
- Domain name age younger than 6 months or 
a year? 
- URL contains unusual encoding? 
- Hostname or IP address used in URL? 
- HTML source contains IFRAME? 
- Website fingerprint matches legitimate site? 
- Valid certificate signed by trusted CA? 
Let’s Sink The Phishermen’s Boat! 
Teo Sze Siong 
F-Secure Corporation 
PI:EMAIL 
BE SURE! 
References 
Websites: 
[1] http://en.wikipedia.org/wiki/Pharming 
[2] http://www.gartner.com/it/page.jsp?id=565125 
[3] http://en.wikipedia.org/wiki/Color_histogram 
[4] http://en.wikipedia.org/wiki/Histogram 
[5] http://en.wikipedia.org/wiki/Man-in-the-middle_attack 
[6] http://www.apacs.org.uk/media_centre/press/03.10.07.html 
[7] http://en.wikipedia.org/wiki/Root_mean_square 
[8] http://en.wikipedia.org/wiki/Mean 
[9] http://en.wikipedia.org/wiki/Money_mule 
[10] http://www.seclab.tuwien.ac.at/papers/antiphishdom.pdf 
[11] http://www.cs.berkeley.edu/~asimma/294-fall06/projects/reports/cordero.pdf 
[12] http://www.pythonware.com/library/pil/handbook/image.htm 
[13] http://iplab.naist.jp/member/daisu-mi/miyamoto-jwis2007.pdf 
[14] http://www2.futureware.at/svn/sourcerer/CAcert/SecureClient.pdf 
[15] http://www.codeproject.com/KB/system/hooksys.aspx 
[16] http://www.f-secure.com/weblog/archives/VB2007_PresentationSlides.pdf 
[17] http://www.f-secure.com/weblog/archives/VB2007_TheTrojanMoneySpinner.pdf 
[18] http://www.owasp.org/index.php/Man-in-the-browser_attack 
[19] http://www.owasp.org/index.php/Session_hijacking_attack 
[20] http://en.wikipedia.org/wiki/Browser_Helper_Object 
[21] http://www.theregister.co.uk/2006/07/13/2-factor_phishing_attack/ 
[22] http://www.theregister.co.uk/2007/04/19/phishing_evades_two-factor_authentication/ 
[23] http://msdn2.microsoft.com/en-us/library/bb250489.aspx 
[24] http://www.planb-security.net/wp/503167-001_PhishingDetectionandPrevention.pdf 
[25] http://www.f-secure.com/v-descs/mimail_s.shtml 
[26] http://www.symantec.com/security_response/writeup.jsp?docid=2007-040208-5335-99&tabid=2 
[27] http://vil.nai.com/vil/content/v_126303.htm 
[28] http://www.symantec.com/security_response/writeup.jsp?docid=2004-101116-3507-99&tabid=2 
[29] http://www.f-secure.com/v-descs/trojan-spy_w32_zbot_hs.shtml