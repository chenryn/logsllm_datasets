## PostgreSQL MySQL 数据类型映射  
### 作者                                   
digoal                                    
### 日期                                    
2017-02-08                                                            
### 标签                                                                                                                                                    
PostgreSQL , MySQL , 类型映射            
----                                    
## 背景       
通常一家企业会有比较多的数据库品种，最为常见的如MySQL, PostgreSQL。  
那么在不同的产品之间，如果有数据的相互同步，就涉及到类型的映射了。  
对于PostgreSQL来说，可以使用PostgreSQL的mysql_fdw外部插件来实现同步，产品设计会简化很多。  
而对于MySQL来说，可能就比较复杂，需要自己写程序来实现，会涉及到类型的转换。  
## PostgreSQL类型 转换为 MySQL类型  
https://dev.mysql.com/doc/workbench/en/wb-migration-database-postgresql-typemapping.html  
PostgreSQL Type|	MySQL Type|	Comment  
---|---|---  
INT|	INT|	 -  
SMALLINT|	SMALLINT|-	   
BIGINT|	BIGINT|	 -  
SERIAL|	INT|	Sets AUTO_INCREMENT in its table definition.  
SMALLSERIAL|	SMALLINT|	Sets AUTO_INCREMENT in its table definition.  
BIGSERIAL|	BIGINT|	Sets AUTO_INCREMENT in its table definition.  
BIT|	BIT|	 -  
BOOLEAN|	TINYINT(1)|	-   
REAL|	FLOAT|	 -  
DOUBLE PRECISION|	DOUBLE|	 -  
NUMERIC|	DECIMAL|	-   
DECIMAL|	DECIMAL|	-   
MONEY|	DECIMAL(19,2)|	 -  
CHAR|	CHAR/LONGTEXT|	Depending on its length. MySQL Server 5.5 and above can have CHAR columns with a length up to 255 characters. Anything larger is migrated as LONGTEXT  
NATIONAL CHARACTER|	CHAR/LONGTEXT|	Depending on its length. MySQL Server 5.5 and above can have VARCHAR columns with a length up to 65535 characters. Anything larger is migrated to one of the TEXT blob types. In MySQL, character set of strings depend on the column character set instead of the datatype.  
VARCHAR|	VARCHAR/MEDIUMTEXT/LONGTEXT|	Depending on its length. MySQL Server 5.5 and above can have VARCHAR columns with a length up to 65535 characters. Anything larger is migrated to one of the TEXT blob types.  
NATIONAL CHARACTER VARYING|	VARCHAR/MEDIUMTEXT/LONGTEXT|	Depending on its length. MySQL Server 5.5 and above can have VARCHAR columns with a length up to 65535 characters. Anything larger is migrated to one of the TEXT blob types. In MySQL, character set of strings depend on the column character set instead of the datatype.  
DATE|	DATE|	 -  
TIME|	TIME|	 -  
TIMESTAMP|	DATETIME|	-   
INTERVAL|	TIME|	 -  
BYTEA|	LONGBLOB|	 -  
TEXT|	LONGTEXT|	 -  
CIDR|	VARCHAR(43)|	 -  
INET|	VARCHAR(43)|	 -  
MACADDR|	VARCHAR(17)|	-   
UUID|	VARCHAR(36)|	 -  
XML|	LONGTEXT|	 -  
JSON|	LONGTEXT|	 -  
TSVECTOR|	LONGTEXT|	-   
TSQUERY|	LONGTEXT|	 -   
ARRAY|	LONGTEXT|	 -   
POINT|	POINT|	 -   
LINE|	LINESTRING|	Although LINE length is infinite, and LINESTRING is finite in MySQL, it is approximated  
LSEG|	LINESTRING|	A LSEG is like a LINESTRING with only two points  
BOX|	POLYGON|	A BOX is a POLYGON with five points and right angles  
PATH|	LINESTRING|	 -   
POLYGON|	POLYGON	| -   
CIRCLE|	POLYGON|	A POLYGON is used to approximate a CIRCLE  
TXID_SNAPSHOT|	VARCHAR|	-   
PostgreSQL还有很多类型，上面并没有列出来，比如图像，化学，raster, 基因等。  
## MySQL类型 转换为 PostgreSQL类型  
取自mysql_fdw插件的代码  
http://api.pgxn.org/src/mysql_fdw/mysql_fdw-2.1.2/mysql_fdw.c  
https://github.com/EnterpriseDB/mysql_fdw/blob/master/mysql_fdw.c  
```  
    /*  
     * Fetch all table data from this schema, possibly restricted by  
     * EXCEPT or LIMIT TO.  
     */  
    appendStringInfo(&buf,  
                     " SELECT"  
                     "  t.TABLE_NAME,"  
                     "  c.COLUMN_NAME,"  
                     "  CASE"  
                     "    WHEN c.DATA_TYPE = 'enum' THEN LOWER(CONCAT(c.COLUMN_NAME, '_t'))"  
                     "    WHEN c.DATA_TYPE = 'tinyint' THEN 'smallint'"  
                     "    WHEN c.DATA_TYPE = 'mediumint' THEN 'integer'"  
                     "    WHEN c.DATA_TYPE = 'tinyint unsigned' THEN 'smallint'"  
                     "    WHEN c.DATA_TYPE = 'smallint unsigned' THEN 'integer'"  
                     "    WHEN c.DATA_TYPE = 'mediumint unsigned' THEN 'integer'"  
                     "    WHEN c.DATA_TYPE = 'int unsigned' THEN 'bigint'"  
                     "    WHEN c.DATA_TYPE = 'bigint unsigned' THEN 'numeric(20)'"  
                     "    WHEN c.DATA_TYPE = 'double' THEN 'double precision'"  
                     "    WHEN c.DATA_TYPE = 'float' THEN 'real'"  
                     "    WHEN c.DATA_TYPE = 'datetime' THEN 'timestamp'"  
                     "    WHEN c.DATA_TYPE = 'longtext' THEN 'text'"  
                     "    WHEN c.DATA_TYPE = 'mediumtext' THEN 'text'"  
                     "    WHEN c.DATA_TYPE = 'blob' THEN 'bytea'"  
                     "    WHEN c.DATA_TYPE = 'mediumblob' THEN 'bytea'"  
                     "    ELSE c.DATA_TYPE"  
                     "  END,"  
                     "  c.COLUMN_TYPE,"  
                     "  IF(c.IS_NULLABLE = 'NO', 't', 'f'),"  
                     "  c.COLUMN_DEFAULT"  
                     " FROM"  
                     "  information_schema.TABLES AS t"  
                     " JOIN"  
                     "  information_schema.COLUMNS AS c"  
                     " ON"  
                     "  t.TABLE_CATALOG  c.TABLE_CATALOG AND t.TABLE_SCHEMA  c.TABLE_SCHEMA AND t.TABLE_NAME  c.TABLE_NAME"  
                     " WHERE"  
                     "  t.TABLE_SCHEMA = '%s'",  
                     stmt->remote_schema);  
```  
类型映射如下  
```  
                     "  CASE"  
                     "    WHEN c.DATA_TYPE = 'enum' THEN LOWER(CONCAT(c.COLUMN_NAME, '_t'))"  
                     "    WHEN c.DATA_TYPE = 'tinyint' THEN 'smallint'"  
                     "    WHEN c.DATA_TYPE = 'mediumint' THEN 'integer'"  
                     "    WHEN c.DATA_TYPE = 'tinyint unsigned' THEN 'smallint'"  
                     "    WHEN c.DATA_TYPE = 'smallint unsigned' THEN 'integer'"  
                     "    WHEN c.DATA_TYPE = 'mediumint unsigned' THEN 'integer'"  
                     "    WHEN c.DATA_TYPE = 'int unsigned' THEN 'bigint'"  
                     "    WHEN c.DATA_TYPE = 'bigint unsigned' THEN 'numeric(20)'"  
                     "    WHEN c.DATA_TYPE = 'double' THEN 'double precision'"  
                     "    WHEN c.DATA_TYPE = 'float' THEN 'real'"  
                     "    WHEN c.DATA_TYPE = 'datetime' THEN 'timestamp'"  
                     "    WHEN c.DATA_TYPE = 'longtext' THEN 'text'"  
                     "    WHEN c.DATA_TYPE = 'mediumtext' THEN 'text'"  
                     "    WHEN c.DATA_TYPE = 'blob' THEN 'bytea'"  
                     "    WHEN c.DATA_TYPE = 'mediumblob' THEN 'bytea'"  
                     "    ELSE c.DATA_TYPE"  
                     "  END,"  
```  
## 其他关注点  
如果你要的不是数据同步，还有后续的动作，例如从一个产品迁移到另一个产品，那会是一个比较大的动作，所以多啰嗦几句。  
除了数据类型，还有SQL语法，函数、索引方法(8种内置hash,btree,gin,gist,bloom,brin,rum,sp-gist)，也是迁移需要特别考虑的，PostgreSQL在这方面支持更加全面，如果要从PostgreSQL迁移到MySQL需要特别注意。  
列举一些例子，取自如下文档    
[《数据库选型的关键指标》](../201701/20170125_01_pdf_002.pdf)  
### 功能差异  
1\. 递归查询, connect by, 树形查询    
PostgreSQL 通过(with 或 tablefunc支持)支持例子  
https://yq.aliyun.com/articles/240  
http://www.postgresql.org/docs/9.5/static/tablefunc.html   
2\. 窗口查询, window over   
PostgreSQL 支持例子  
http://blog.163.com/digoal@126/blog/static/16387704020137154137930  
http://blog.163.com/digoal@126/blog/static/16387704020121024102312302/  
http://blog.163.com/digoal@126/blog/static/16387704020124239390354/  
http://www.postgresql.org/docs/9.5/static/functions-window.html   
3\. rollup, grouping sets, cube  
PostgreSQL 支持例子  
http://www.postgresql.org/docs/9.5/static/queries-table-expressions.html#QUERIES-GROUPING-SETS   
http://blog.163.com/digoal@126/blog/static/16387704020154269591874/   
4\. 高级聚合(json,数组,相关性,标准差(采样,全局),截距,斜率,方差(采样,全局),mode,percentile_cont,distc,rank,dense_rank,percent_rank,cume_dist,grouping)  
PostgreSQL 支持例子   
http://www.postgresql.org/docs/9.5/static/functions-aggregate.html   
http://blog.163.com/digoal@126/blog/static/1638770402015224124337/   
http://blog.163.com/digoal@126/blog/static/1638770402015379286873/   
http://blog.163.com/digoal@126/blog/static/16387704020153713222764   
4\. hash join, merge join, nestloop join  
PostgreSQL 支持例子  
http://www.postgresql.org/docs/9.5/static/xoper-optimization.html  
http://www.postgresql.org/docs/9.5/static/planner-optimizer.html   
5\. 哈希聚合  
PostgreSQL 支持例子  
http://www.postgresql.org/docs/9.5/static/runtime-config-query.html#RUNTIME-CONFIG-QUERY-ENABLE   
6\. 事务间共享事务快照  
PostgreSQL 支持例子  
http://www.postgresql.org/docs/9.5/static/functions-admin.html#FUNCTIONS-SNAPSHOT-SYNCHRONIZATION  
http://www.postgresql.org/docs/9.5/static/sql-set-transaction.html  
http://www.postgresql.org/docs/9.5/static/app-pgdump.html  
http://blog.163.com/digoal@126/blog/static/163877040201326829943/  
http://blog.163.com/digoal@126/blog/static/163877040201241134721101/   
7\. 展开式索引(支持多列任意组合查询)  
PostgreSQL 支持例子  
[《宝剑赠英雄 - 任意组合字段等效查询, 探探PostgreSQL多列展开式B树》](../201702/20170205_01.md)  
### 约束  
1\. foreign key  
PostgreSQL 支持例子  
http://www.postgresql.org/docs/9.5/static/ddl-constraints.html   
2\. for no key update, for key share 粒度锁  
PostgreSQL 支持例子  
http://www.postgresql.org/docs/9.5/static/explicit-locking.html#LOCKING-ROWS  
http://blog.163.com/digoal@126/blog/static/16387704020130249109133/  
http://blog.163.com/digoal@126/blog/static/16387704020130305109687/   
3\. check 约束  
PostgreSQL 支持例子  
http://www.postgresql.org/docs/9.5/static/ddl-constraints.html   
4\. exclusion 约束  
PostgreSQL 支持例子  
http://www.postgresql.org/docs/9.5/static/ddl-constraints.html   
### 易用性  
1\. 表空间  
2\. alter 列值转表达式  
(alter table alter column c1 type newtype using (expression(...)) )  
PostgreSQL 支持例子  
http://www.postgresql.org/docs/9.5/static/sql-altertable.html   
https://yq.aliyun.com/articles/30470   
3\. alter table 需要重组表的操作  
PostgreSQL少量操作需要重组  
vacuum full, cluster, 修改字段数据类型, (修改长度不需要重组表)  
http://www.postgresql.org/docs/9.5/static/sql-altertable.html  
4\. 分区表  
[《PostgreSQL 9.5+ 高效分区表实现 - pg_pathman》](../201610/20161024_01.md)  
[《PostgreSQL 10.0 内置分区表》](../201612/20161215_01.md)  
5\. 物化视图  
PostgreSQL 支持例子  
http://www.postgresql.org/docs/9.5/static/sql-creatematerializedview.html   
6\. 物化视图增量刷新  
PostgreSQL 支持例子  
http://www.postgresql.org/docs/9.5/static/sql-refreshmaterializedview.html   
7\. 表继承关系  
PostgreSQL 支持例子  
http://www.postgresql.org/docs/9.5/static/tutorial-inheritance.html   
8\. 使用 like 建结构类似的表  
PostgreSQL 支持例子  
http://www.postgresql.org/docs/9.5/static/sql-createtable.html   
### 开发功能  
1\. 客户端开发语言支持  
C, java, python, ...  
2\. 函数  
返回 void, 单行，SRF，事件触发器(MySQL 不支持)，触发器  
例子  
http://blog.163.com/digoal@126/blog/static/16387704020132131361949/   
http://www.postgresql.org/docs/9.5/static/event-triggers.html   
3\. 2PC  
4\. 服务端绑定变量  
PostgreSQL 支持例子  
http://www.postgresql.org/docs/9.5/static/sql-prepare.html  
5\. savepoint  
6\. 异步消息  
PostgreSQL 支持例子  
http://www.postgresql.org/docs/9.5/static/sql-notify.html   
http://www.postgresql.org/docs/9.5/static/sql-listen.html  