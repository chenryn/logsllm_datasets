React version: 17.0.2
## Steps To Reproduce
I've spend hours on this thing suspecting my code being the bad actor because
it was quite complex, but I nailed it down with a help of my friend and it
seems like in some cases the `key` prop in array _must_ be first, otherwise
`props.children` become `[undefined, false, undefined, undefined]`.
I have a repro repo so you can check it out yourself, but here's some small
step by step explanation.
  1. We need a component that wraps children:
    const WrapperWhereMagicHappens = (props) => {
        console.log('wrapper props', props)
        return (
            {props.children}
        )
    }
  2. Then another one that uses it, with props spread.
It maps an array and renders those wrappers spreading some props. Mind the key
here is in the end. This one is the troublemaker.
    const ChildrenFail = (props) => {
        return array.map((label) => (
                {label}
                    {console.log(props.children) || props.children}
        ))
    };
If we put the key to the beginning, so before the props spread like this, all
works fine.
    const ChildrenOK = (props) => {
        return array.map((label) => (
                {label}
                    {console.log(props.children) || props.children}
        ))
    };
Now, render:
    const App = () => {
        return (
            <>
                    I'm a child
                    I'm a child
        )
    }
## The current behavior
The `console.log(props.children)` from `ChildrenOK` and `ChildrenFail` prints
react `Symbol` in all cases, which is expected.
The console.log in the `WrapperWhereMagicHappens` prints children as array of
`undefined, false, undefined, undefined` (always this exact thing when `key`
is being passed in the end
![Zrzut ekranu 2022-02-23 o 20 47 03](https://user-
images.githubusercontent.com/3393569/155396774-9584539e-ac4d-41bc-892a-8835cda7ad01.png)
When it's passed first, it's doesn't replace `props.children`  
![Zrzut ekranu 2022-02-23 o 20 47 17](https://user-
images.githubusercontent.com/3393569/155396850-f10695b7-65e8-4b34-88c2-e332c8d5f630.png)
Meaning: _**When there is a props spread and following`key` children will
never render**_
## The expected behavior
Children should not be replaced by something when `key` is defined in the end,
after spread.
First I thought maybe there's some `Object` property that I don't know and
it's called `children` (didn't found one), so I thought, OK, let's define what
keys can go to the spread and make sure there is nothing overwriting
`children`
             {
                        acc[curr] = props[curr];
                        return acc;
                    }, {})
                }
                key={label}
            >
But still no luck. When there's spread and then `key`, `props.children` always
become that mysterious Array of four elements.
I'm also super curious why this happens anyway, I'd appreciate any support and
details.