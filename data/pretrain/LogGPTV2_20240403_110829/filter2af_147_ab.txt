    e: 3
    ciphertext (c): 2205316413931134031046440767620541984801091216351222789180593875373829950860542792110364325728088504479780803714561464250589795961097670884274813261496112882580892020487261058118157619586156815531561455215290361274334977137261636930849125
`e`很明显太小了，存在 **低加密指数攻击**
，详细可以参考[CTF中RSA的常见攻击方法](https://www.anquanke.com/post/id/84632)。
也就是说加密时，如果明文的三次方依然小于`N`，会导致`mod N`这一步根本没有用到，直接对密文三次开方即可得到明文。
即：
如果明文的三次方比n大，但并不是很大，那么设k，存在以下关系：
爆破k，如果
能开三次根式，那么可以直接得到明文。
爆破脚本：
    import gmpy
    N = 374159235470172130988938196520880526947952521620932362050308663243595788308583992120881359365258949723819911758198013202644666489247987314025169670926273213367237020188587742716017314320191350666762541039238241984934473188656610615918474673963331992408750047451253205158436452814354564283003696666945950908549197175404580533132142111356931324330631843602412540295482841975783884766801266552337129105407869020730226041538750535628619717708838029286366761470986056335230171148734027536820544543251801093230809186222940806718221638845816521738601843083746103374974120575519418797642878012234163709518203946599836959811
    e = 3
    c = 2205316413931134031046440767620541984801091216351222789180593875373829950860542792110364325728088504479780803714561464250589795961097670884274813261496112882580892020487261058118157619586156815531561455215290361274334977137261636930849125
    i = 0
    while 1:
        if(gmpy.root(c + i * N, 3)[1] == 1):
            print gmpy.root(c + i * N, 3),i
            break
        i = i + 1
    d = hex(13016382529449106065839070830454998857466392684017754632233929110204433151964285)
    print d[2:-1].decode('hex')
flag:`picoCTF{e_w4y_t00_sm411_9f5d2464}`
# caesar cipher 2
## Question
> Can you help us decrypt this
> [message](https://2018shell2.picoctf.com/static/aade48805797b8b842d876e93db27549/ciphertext)?
> We believe it is a form of a caesar cipher. You can find the ciphertext in
> /problems/caesar-cipher-2_3_4a1aa2a4d0f79a1f8e9a29319250740a on the shell
> server.
### Hint
> You'll have figure out the correct alphabet that was used to encrypt the
> ciphertext from the ascii character set
>
> [ASCII Table](https://www.asciitable.com/)
## Solution
加入了特殊字符的凯撒密码，爆破范围从大小写字母扩大到所有可能的偏移量。脚本如下：
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    
    cipher = '^WQ]1B4iQ/SaO@M1W>V3`AMXcABMO@3\\BMa3QC`3k'
    for j in xrange(0,126):
        flag = ''
        for i in cipher:
            flag += chr((ord(i)  + j))
        print flag
flag:`picoCTF{cAesaR_CiPhErS_juST_aREnT_sEcUrE}`
# rsa-madlibs
## Question
> We ran into some weird puzzles we think may mean something, can you help me
> solve one? Connect with `nc 2018shell1.picoctf.com 40440`
### Hint
> [RSA info](https://simple.wikipedia.org/wiki/RSA_algorithm)
## Solution
nc连接服务器，需要根据描述一步步的解决关于RSA加解密的问题：
    ❯ nc 2018shell1.picoctf.com 40440
    0x7069636f4354467b64305f755f6b6e30775f7468335f7740795f325f5253405f35643338336531307dL 
    Hello, Welcome to RSA Madlibs
    Keeping young children entertained, since, well, nev3r
    Tell us how to fill in the blanks, or if it's even possible to do so
    Everything, input and output, is decimal, not hex
    #### NEW MADLIB ####
    q : 93187
    p : 94603
    ##### WE'RE GONNA NEED THE FOLLOWING ####
    n
    IS THIS POSSIBLE and FEASIBLE? (Y/N):
可以双开窗口，边解边答。只要我的手速够快，服务器断线的速度就跟不上我-0-。
不过不知道开头为什么给了一串16进制字符串，解一下直接得到了flag……
    ❯ python -c "print('7069636f4354467b64305f755f6b6e30775f7468335f7740795f325f5253405f35643338336531307d').decode('hex')"
    picoCTF{d0_u_kn0w_th3_w@y_2_RS@_5d383e10}
flag:`picoCTF{d0_u_kn0w_th3_w@y_2_RS@_5d383e10}`
# SpyFi
## Question
> James Brahm, James Bond's less-franchised cousin, has left his secure
> communication with HQ running, but we couldn't find a way to steal his agent
> identification code. Can you? Conect with `nc 2018shell1.picoctf.com 30399`.
> [Source](https://2018shell2.picoctf.com/static/f3d296ccf53d080f6f8b01fb8e2810f9/spy_terminal_no_flag.py).
### Hint
> What mode is being used?
## Solution
查看程序源码，使用的是AES的ECB模式，padding为16位：
    ...
    def pad(message):
        if len(message) % 16 != 0:
            message = message + '0' * (16 - len(message) % 16)
        return message
    def encrypt(key, plain):
        cipher = AES.new(key.decode('hex'), AES.MODE_ECB)
        return cipher.encrypt(plain).encode('hex')
    ...
AES-ECB模式的加解密方式如图：
再看程序中默认会发送的字符串：
    ...
    welcome = "Welcome, Agent 006!"
    print welcome
    sitrep = raw_input("Please enter your situation report: ")
    message = """Agent,
    Greetings. My situation report is as follows:
    {0}
    My agent identifying code is: {1}.
    Down with the Soviets,
    006
    """.format(sitrep, agent_code)
    message = pad(message)
    print encrypt("""key""", message)
    ...
我们向服务器发送`AAAAAAAAAAA + BBBBBBBBBBBBBBBB +
CCCCCCCCCCCCCCCC`，共11个`A`，16个`B`和`C`。
假设flag为16位的`picoCTF{1234567}`，那么服务器接收到的字符串就会类似如下的形式：
    'Agent,\nGreetings'   (块 1)
       '. My situation r'    (块 2)
       'eport is as foll'    (块 3)
       'ows:\nAAAAAAAAAAA'   (块 4)
       'BBBBBBBBBBBBBBBB'    (块 5)
       'CCCCCCCCCCCCCCCC'    (块 6)
       '\nMy agent identi'   (块 7)
       'fying code is:  '    (块 8)  <--- 已知
       'picoCTF{1234567}'    (块 9)  <--- 未知
       '.Down with the S'    (块 10) <--- 已知
接着，少发送一个`C`，就会变成
    'Agent,\nGreetings'   (块 1)
       '. My situation r'    (块 2)
       'eport is as foll'    (块 3)
       'ows:\nAAAAAAAAAAA'   (块 4)
       'BBBBBBBBBBBBBBBB'    (块 5)
       'CCCCCCCCCCCCCCC\n'   (块 6)
       'My agent identif'    (块 7)
       'ying code is:  p'    (块 8)  <--- 在这里我们得到了包含flag第一位的密文，但并不知道第一位具体是什么
       'icoCTF{1234567}.'    (块 9)  <--- 未知
       'Down with the So'    (块 10) <--- 已知
把块 5替换成块 8的格式化输入
    'Agent,\nGreetings'   (块 1)
       '. My situation r'    (块 2)
       'eport is as foll'    (块 3)
       'ows:\nAAAAAAAAAAA'   (块 4)
       'ying code is: %s'    (块 5)  <--- 可以逐位爆破%s
       'CCCCCCCCCCCCCCC\n'   (块 6)
       'My agent identif'    (块 7)
       'ying code is:  p'    (块 8)  <--- 在这里我们得到了包含flag第一位的密文，但并不知道这个密文是什么
       'icoCTF{1234567}.'    (块 9)  <--- 未知
       'Down with the So'    (块 10) <--- 已知
爆破块 5，如果密文和块 8相同，则表示我们找到了flag的第一位，接下来，再减少一个`C`，使得块 8带有flag的前两位字符。如下：
    'Agent,\nGreetings'   (块 1)
       '. My situation r'    (块 2)
       'eport is as foll'    (块 3)
       'ows:\nAAAAAAAAAAA'   (块 4)
       'ing code is: p%s'    (块 5)  <--- 同步替换块 5
       'CCCCCCCCCCCCCC\nM'   (块 6)
       'y agent identify'    (块 7)
       'ing code is:  pi'    (块 8)  <--- 包含flag第一、二位的密文
       'coCTF{1234567}.D'    (块 9)  <--- 未知
       'own with the Sov'    (块 10) <--- 已知
然后继续爆破flag的第二位。依次循环下去，就可以获得完整的flag。
爆破脚本如下(服务器加密一次后就会断开连接，所以跑完flag所用的时间会比较长)：
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    
    from pwn import * 
    flag = "picoCTF{"
    for j in range(1,14):
       p = remote('2018shell1.picoctf.com', 30399)
       p.recvuntil('Please enter your situation report: ')
       my_msg = "A"*11+"B"*(25-j)
       p.sendline(my_msg)
       enc_msg = p.recv(1024).decode('hex')
       p.close()
       for i in range(32,128):
           q = remote('2018shell1.picoctf.com', 30399)
           q.recvuntil('Please enter your situation report: ')
           msg = "A"*11+"B"*(14-j) + flag + chr(i)