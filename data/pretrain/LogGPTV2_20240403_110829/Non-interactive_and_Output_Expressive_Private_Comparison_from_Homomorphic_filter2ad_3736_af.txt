The opposite to the notion of ciphertext noise is the
notion of ciphertext capacity or just capacity which is also
determined by L and estimates the capacity of a ciphertext to
be used in homomorphic operations. In Figure 13 and 14, we
reported the remaining capacity of a ciphertext after a number
of consecutive additions or multiplications starting from the
values of L in Table IV. They show that the capacity is reduced
only slightly after addition, but explosively after multiplication.
Note that the encryption operation already has an impact on L.
Figure 15 shows that doing the multiplication with logarithmic
depth (Lemma 6.2) reduced the capacity sublinearly instead
of linearly as in Figure 14. The sublinear complexity is also
illustrated in Figure 16 for the comparison circuit which also
has a logarithmic multiplicative depth [12]–[14]. Figure 17
illustrates runtimes (best and average) for addition and multi-
plication in HElib over 100 runs showing that homomorphic
addition is really fast compare to multiplication. We report
the runtime for the comparison circuit in Figure 18 comparing
11
Fig. 13: Capacity after consecutive additions
Fig. 16: Comparison Capacity Consumption in HElib
Fig. 14: Capacity after consecutive multiplications
runtime for HElib and TFHE. While both are linear in the
bitlength, the runtime for HElib increases very quickly.
D. Performance of PDT-BIN
In this section, we report on our experiment with PDT-BIN
on complete trees. Recall that for FHE supporting SIMD, we
can use attribute values packing that allows to evaluate many
attribute vectors together. We, therefore, focus on attribute
packing to show the advantage of SIMD. Figure 19 illustrates
the amortized runtime of PDT-BIN with HElib. That is, the
time of one PDTE evaluation divided by the number of slots
provided by the used homomorphic context. As one can expect,
the runtime clearly depends on the bitlength of the attribute
values and the depth of the tree. The results show a clear
advantage of HElib when classifying large data sets. For paths
aggregation, we proposed EVALPATHSE (Algorithm 5) and
EVALPATHSP (Algorithm 9). Figure 20 illustrates PDT-BIN
Fig. 17: Runtime for Addition and Multiplication in HElib
runtime using these algorithms in a multi-threaded environ-
ment and shows a clear advantage of EVALPATHSP which will
be used in the remaining experiments with PDT-BIN. Figure
21 illustrates the runtime of PDT-BIN with HElibmed showing
that the computation cost is dominated by the computation
of decision bits which involves homomorphic evaluation of
comparison circuits. In Figure 22, we report the evaluation of
PDT-BIN using TFHE, which shows a clear advantage compare
to HElib. For the same experiment with 72 threads, TFHE
evaluates a complete tree of depth 10 and 64-bit input in less
than 80 seconds, while HElib takes about 400 seconds for 16-
bit input. Recall that, a CUDA implementation [22], [23] of
TFHE can further improve the time of PDT-BIN using TFHE.
Fig. 15: Capacity after multiplication with log Depth
Fig. 18: Comparison Run-time Cost
12
 0 50 100 150 200 250 300 350 400 450 0 100 200 300 400 500Remaining Operation CapacityConsecutive AdditionsHElibsmallHElibmedHElibbigHElibint129.51129.51124.89124.89124.2124.2123.8123.8123.52123.52123.3123.3203.42203.42198.79198.79198.11198.11197.71197.71197.42197.42197.2197.2332.82332.82328.19328.19327.51327.51327.11327.11326.82326.82326.6326.6285.63285.63281.01281.01280.33280.33279.92279.92279.64279.64279.42279.42 0 50 100 150 200 250 300 350 0 5 10 15 20Remaining Operation CapacityConsecutive MultiplicationsHElibsmallHElibmedHElibbigHElibint129.51129.5171.0371.0310.9710.97203.42203.42144.66144.6686.6786.6728.5528.55332.82332.82271.56271.56210.25210.25151.49151.4989.9889.9826.4926.49285.63285.63177.31177.3170.4870.48 0 50 100 150 200 250 300 350212223242526272829210dec errorRemaining Operation CapacityConsecutive MultiplicationsHElibsmallHElibmedHElibbigHElibint 10 20 30 40 50 60 70 80 90 100 0 4 8 12 16 20 24 28 32Consumed CapacityBits in the compared numbersHElibsmallHElibmedHElibbig 0 200 400 600 800 1000HElibsmall +HElibmed +HElibbig +HElibint +HElibsmall *HElibmed *HElibbig *HElibint *Run-time (milliseconds)Best run-timeAverage run-time(100 runs)2.86.511.212.6160.0196.6606.1806.22.96.611.412.7244.4455.31003.51100 0 10 20 30 40 50 60 70 80 90 0 4 8 12 16 20 24 28 32Run-time (seconds)Bits in the compared numbersHElibsmallHElibmedTFHE128Heart-disease
(HDI)
13
3
5
Housing
(HOU)
13
13
92
Spambase
(SPA)
57
17
58
Artiﬁcial
(ART)
16
10
500
n
d
m
TABLE VI: Real Datasets and Model Parameters
PDT-BIN
(TFHE)
λ
µ
#thd
[41]
(HElib)
PDT-BIN
(HElib)
150
16
16
PDT-INT
(HElib)
135
16
16
128
16
16
one
0.94
6.30
3.66
22.39
[48]
(mcl)
128
64
-
one
HDI
0.25
HOU
1.98
SPA
1.80
ART
10.42
TABLE VII: Runtime (in seconds) of PDTE on Real Datasets:
λ is the security level. µ is the input bit length. #thd is the number of threads. mcl[42]
is a pairing-based cryptography library. Column “one” reports the time for one protocol
run while “am.” reports the amortized time (e.g., the time for one run divided by s).
128
12
16
one
0.59
10.27
6.88
56.37
one
40.61
252.38
174.46
1303.55
one
45.59
428.23
339.60
2207.13
am.
0.0073
0.90
0.72
0.75
am.
0.05
0.35
0.24
1.81
E. Performance of our Schemes on Real Datasets
We also performed experiments on real datasets from
the UCI repository [51]. We performed experiments for both
PDT-BIN and PDT-INT for the datasets illustrated in Table VII
(parameters n, d, m are deﬁned in Table I). For PDT-BIN, we
reported the costs for HElib (single and amortized) and the
costs for TFHE. Since TFHE evaluates only boolean circuits,
we only have implementation and evaluation of PDT-INT with
HElib. We also illustrate in Table VII the costs of two best
previous works that rely only on homomorphic encryption,
whereby the ﬁgures are taken from the respective papers [41],
[48]. For one protocol run, PDT-BIN with TFHE is much
more faster than PDT-BIN with HElib which is also faster than
PDT-INT with HElib. However, because of the large number of
slots, the amortized cost of PDT-BIN with HElib is better. For
16-bit inputs, our amortized time with HElib and our time with
TFHE outperform XCMP [41] which used 12-bit inputs. For
the same input bitlength, XCMP is still much more better than
our one run using HElib, since the multiplicative depth is just
3. However, our schemes still have a better communication
and PDT-BIN has no leakage. While the scheme of Tai et
al. [48] in the semi-honest model has a better time for 64-
bit inputs than our schemes for 16-bit inputs, it requires a
fast network communication and at least double cost in the
malicious model. The efﬁciency of Tai et al. is in part due to
their ECC implementation of the lifted ElGamal [27], which
allows a fast runtime and smaller ciphertexts, but is not secure
against a quantum attacker, unlike lattice-based FHE as used
in our schemes.
IX. CONCLUSION
While almost all existing PDTE protocols require many
interaction between the client and the server, we designed
and implemented novel client-server protocols that delegate
the complete evaluation to the server while preserving privacy
and keeping the overhead low. Our solutions rely on SHE/FHE
and evaluate the tree on ciphertexts encrypted under the
client’s public key. Since current SHE/FHE schemes have
high overhead, we combine efﬁcient data representations with
different algorithmic optimizations to keep the computational
overhead and the communication cost low.
Fig. 19: Amortized PDT-BIN Runtime with HElib
Fig. 20: PDT-BIN Runtime with HElibsmall Comparing
EVALPATHSP (DAG) vs. EVALPATHSE (Separate Paths)
Fig. 21: PDT-BIN Runtime with HElibmed for 16-bit inputs
Fig. 22: PDT-BIN Runtime with TFHE
13
 0 200 400 600 800 1000 1200 1400 1600 2 3 4 5 6 7 8 9 10Overall Execution (milliseconds)Tree DepthHElibsmall 8-bit (Amortized, 1 classiﬁcation)HElibmed 16-bit (Amortized, 1 classiﬁcation)HElibmed 32-bit (Amortized, 1 classiﬁcation) 0 100 200 300 400 500 2 3 4 5 6 7 8 9 10Overall Execution (s)Tree DepthDAG Evaluation 72 threadsSeparate Paths 72 threadsDAG Evaluation 4 threadsSeparate Paths 4 threads 0 200 400 600 800 1000 1200 1400 1600 1800 2000 2 3 4 5 6 7 8 9 10 11Execution Time (s)Tree DepthCompute Decision Bits (72 threads)Eval DAG + Final Result (72 threads) 0 200 400 600 800 1000 1200 1400 1600 1800 2000 2 3 4 5 6 7 8 9 10 11 0 20 40 60 80 100 120 140 160 180 200 2 3 4 5 6 7 8 9 10PDTETFHE Run-time (seconds)Tree DepthPDTETFHE 16-bit values (8 threads)PDTETFHE 32-bit value (8 threads)PDTETFHE 64-bit values (72 threads)REFERENCES
[1] M. Albrecht, M. Chase, H. Chen, J. Ding, S. Goldwasser, S. Gorbunov,
J. Hoffstein, K. Lauter, S. Lokam, D. Micciancio, D. Moody, T. Mor-
rison, A. Sahai, and V. Vaikuntanathan, “Homomorphic encryption
security standard,” HomomorphicEncryption.org, Cambridge MA, Tech.
Rep., March 2018.
“Amazon web services,” https://aws.amazon.com/machine-learning,
2019.
[2]
[3] M. Barni, P. Failla, V. Kolesnikov, R. Lazzeretti, A.-R. Sadeghi, and
T. Schneider, “Secure evaluation of private linear branching programs
with medical applications,” in ESORICS. Berlin, Heidelberg: Springer-
Verlag, 2009, pp. 424–439.
[4] D. Beaver, “Commodity-based cryptography (extended abstract),” in
STOC. New York, NY, USA: ACM, 1997, pp. 446–455.
[5] M. Ben-Or, S. Goldwasser, and A. Wigderson, “Completeness theorems
for non-cryptographic fault-tolerant distributed computation,” in STOC.
New York, NY, USA: ACM, 1988, pp. 1–10.
“Bigml,” https://bigml.com/, 2019.
[6]
[7] R. Bost, R. A. Popa, S. Tu, and S. Goldwasser, “Machine learning
classiﬁcation over encrypted data,” in NDSS, 2015.
[8] Z. Brakerski, C. Gentry, and V. Vaikuntanathan, “Fully homomorphic
[9] L. Breiman,
1,
pp.
“Random forests,” Mach.
encryption without bootstrapping,” ECCC, vol. 18, p. 111, 2011.
vol.
45,
Available:
no.
https://doi.org/10.1023/A:1010933404324
J. Brickell, D. E. Porter, V. Shmatikov, and E. Witchel, “Privacy-
preserving remote diagnostics,” in CCS. New York, NY, USA: ACM,
2007, pp. 498–507.
Learn.,
[Online].
5–32,
2001.
Oct.
[10]
[11] D. Chaum, C. Cr´epeau, and I. Damgard, “Multiparty unconditionally
secure protocols,” in STOC. New York, NY, USA: ACM, 1988, pp.
11–19.
J. H. Cheon, M. Kim, and M. Kim, “Search-and-compute on encrypted
data,” in FC, 2015, pp. 142–159.
[12]
[15]
[14]
[13] ——, “Optimized search-and-compute circuits and their application to
query evaluation on encrypted data,” IEEE Trans. Information Forensics
and Security, vol. 11, no. 1, pp. 188–199, 2016.
J. H. Cheon, M. Kim, and K. E. Lauter, “Homomorphic computation
of edit distance,” in FC, 2015, pp. 194–212.
I. Chillotti, N. Gama, M. Georgieva, and M. Izabach`ene, “Faster
fully homomorphic encryption: Bootstrapping in less
than 0.1
- ASIACRYPT 2016 -
seconds,”
22nd International Conference on the Theory and Application
of Cryptology and Information Security, Hanoi, Vietnam, December
4-8, 2016, Proceedings, Part I, 2016, pp. 3–33. [Online]. Available:
https://doi.org/10.1007/978-3-662-53887-6 1
in Cryptology
in Advances
[16] ——, “Faster packed homomorphic operations and efﬁcient circuit
bootstrapping for TFHE,” in Advances in Cryptology - ASIACRYPT
2017 - 23rd International Conference on the Theory and Applications
of Cryptology and Information Security, Hong Kong, China, December
3-7, 2017, Proceedings, Part I, 2017, pp. 377–408. [Online]. Available:
https://doi.org/10.1007/978-3-319-70694-8 14
[17] ——, “Improving TFHE: faster packed homomorphic operations and
efﬁcient circuit bootstrapping,” IACR Cryptology ePrint Archive, vol.
2017, p. 430, 2017.
[18] ——, “TFHE: fast fully homomorphic encryption over the torus,” IACR
Cryptology ePrint Archive, vol. 2018, p. 421, 2018.
I. Chillotti, N. Gama, M. Georgieva, and M. Izabach`ene, “TFHE:
Fast
2016,
https://tfhe.github.io/tfhe/.
library,” August
homomorphic
encryption
fully
[19]
[20] M. D. Cock, R. Dowsley, C. Horst, R. S. Katti, A. C. A.
Nascimento, W. Poon, and S. Truex, “Efﬁcient and private scoring
of decision trees, support vector machines and logistic regression
models based on pre-computation,” IEEE Trans. Dependable Sec.
Comput., vol. 16, no. 2, pp. 217–230, 2019. [Online]. Available:
https://doi.org/10.1109/TDSC.2017.2679189
[21] R. Cramer, I. Damg˚ard, and J. B. Nielsen, “Multiparty computation
from threshold homomorphic encryption,” in EUROCRYPT, 2001, pp.
280–299.
[22] W. Dai and B. Sunar, “cuhe: A homomorphic encryption accelerator
library,” in BalkanCryptSec 2015, September 2015.
[23] ——, “Cuda-accelerated fully homomorphic encryption library,” August
[24]
[25]
[26]
2019, https://github.com/vernamlab/cuFHE.
I. Damg˚ard, M. Geisler, and M. Krøigaard, “Efﬁcient and secure
comparison for on-line auctions,” in ACISP, 2007, pp. 416–430.
I. Damg˚ard, M. Keller, E. Larraia, V. Pastro, P. Scholl, and N. P. Smart,
“Practical covertly secure MPC for dishonest majority - or: Breaking
the SPDZ limits,” in ESORICS ’13, 2013, pp. 1–18.
I. Damg˚ard, V. Pastro, N. P. Smart, and S. Zakarias, “Multiparty
computation from somewhat homomorphic encryption,” in CRYPTO
’12, 2012, pp. 643–662.
[27] T. El Gamal, “A public key cryptosystem and a signature scheme
based on discrete logarithms,” in CRYPTO. New York, NY, USA:
Springer-Verlag New York, Inc., 1985, pp. 10–18. [Online]. Available:
http://dl.acm.org/citation.cfm?id=19478.19480
[28] M. Franz, A. Holzer, S. Katzenbeisser, C. Schallhart, and H. Veith,
“CBMC-GC: an ANSI C compiler for secure two-party computations,”
in CC ’14, 2014, pp. 244–249.
[29] M. Fredrikson, S. Jha, and T. Ristenpart, “Model inversion attacks that
exploit conﬁdence information and basic countermeasures,” in CCS,
2015, pp. 1322–1333.
[30] C. Gentry, “Fully homomorphic encryption using ideal lattices,” in
STOC. New York, NY, USA: ACM, 2009, pp. 169–178.
[31] O. Goldreich, Foundations of Cryptography: Volume 2, Basic Applica-
tions. New York, NY, USA: Cambridge University Press, 2004.
“Google cloud ml engine,” https://cloud.google.com/ml-engine/, 2019.
[32]
[33] S. Halevi and V. Shoup, “Algorithms in helib,” in CRYPTO (1), ser.
Springer, 2014, pp.
Lecture Notes in Computer Science, vol. 8616.
554–571.
[34] C. Hazay and Y. Lindell, Efﬁcient Secure Two-Party Protocols: Tech-
niques and Constructions, 1st ed. New York, NY, USA: Springer-
Verlag New York, Inc., 2010.
[35] M. Joye and F. Salehi, “Private yet efﬁcient decision tree evaluation,” in
DBSec, ser. Lecture Notes in Computer Science, vol. 10980. Springer,
2018, pp. 243–259.
[36] M. Keller, E. Orsini, and P. Scholl, “Mascot: Faster malicious arithmetic
secure computation with oblivious transfer,” in CCS ’16, 2016, pp. 830–
842.
´A. Kiss, M. Naderpour, J. Liu, N. Asokan, and T. Schneider, “Sok:
Modular and efﬁcient private decision tree evaluation,” PoPETs, vol.
2019, no. 2, pp. 187–208, 2019.
[37]
[38] V. Kolesnikov and T. Schneider, “A practical universal circuit construc-
tion and secure evaluation of private functions,” in FC, 2008, pp. 83–97.
[39] H. Lin and W. Tzeng, “An efﬁcient solution to the millionaires’ problem