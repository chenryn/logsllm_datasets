# 八、保持安全
在本章中，我们将了解与 Docker 相关的安全性。您可以通过什么方式来帮助了解您现在可能运行的 Docker 工具版本的最新安全问题？您如何在任何安全问题面前保持领先地位，并在面临威胁时保持您的环境安全？在本章中，我们将探讨多种方法，让您能够及时了解出现的任何安全问题，以及尽快获取信息的最佳方法。您将学习如何帮助实施将安全性放在首要位置的想法，并订阅电子邮件列表等内容，这些列表不仅包括 Docker，还包括与您使用 Linux 运行的环境相关的项目。其他项目还在继续关注 GitHub 等与 Docker 安全相关的问题，关注**互联网中继聊天** ( **IRC** )房间，并关注 CVE 等网站。
在本章中，我们将涵盖以下主题:
*   保持安全
    *   电子邮件列表选项
    *   GitHub 问题
    *   救援委会议室
    *   CVE 网站
*   其他感兴趣的领域
# 跟上安全
在本节中，我们将了解您可以获取或更新与 Docker 产品中可能出现的安全问题相关的信息的多种方式。虽然这不是您可以用来跟踪问题的完整工具列表，但这是一个很好的开始，包含了最常用的项目。这些项目包括电子邮件分发列表、针对 Docker 的 GitHub 问题跟踪、针对现有多种 Docker 产品的 IRC 聊天室、CVE 网站，以及与 Docker 产品相关的其他感兴趣的领域，例如 Linux 内核漏洞和您可以用来降低风险的其他项目。
## 电子邮件列表选项
Docker 运营两个邮件列表，用户可以注册成为其中的一部分。这些邮件列表提供了收集关于其他人正在处理的问题或项目的信息以及激发你的想法为你的环境做同样事情的方法。您还可以使用它们来帮助 Docker 社区覆盖您在使用各种 Docker 产品甚至与 Docker 产品相关的其他产品时遇到的问题。
### 两个电子邮件列表如下:
*   Docker-dev
*   Docker-用户
Docker-dev 邮件列表主要面向什么？你猜对了，是面向开发者的！这些人要么对开发人员类型角色和其他人正在开发的东西感兴趣，要么自己正在为可能集成到各种 Docker 产品中的东西开发代码。这可能是之类的东西，比如围绕 Docker Swarm 创建一个网络界面。这份名单将是你想张贴你的问题。该列表由其他开发人员组成，甚至可能包括那些在 Docker 本身工作的开发人员，他们可能能够帮助您解决您遇到的任何问题。
另一个列表，Docker-user 列表，面向各种 Docker 产品或服务的用户，并对如何使用产品/服务或如何将第三方产品与 Docker 集成有疑问。这可能包括如何将 **Heroku** 与 Docker 集成或在云中使用 Docker。如果你是 Docker 的用户，那么这个列表就是适合你的。如果你有先进的经验，或者你有经验或者以前处理过的事情，你也可以对这个列表有所贡献。
没有规则说你不能两者兼得。如果你想两全其美，你可以同时注册两个网站，测量每个网站的流量，然后根据你的兴趣所在，决定只上一个网站。您也可以选择不加入列表，只在每个列表的谷歌群组页面上跟随它们。
Docker-dev 列表的谷歌组页面是[https://groups.google.com/forum/#!forum/docker-dev](https://groups.google.com/forum/#!forum/docker-dev)，而 Docker-user 列表的谷歌组页面是[https://groups.google.com/forum/#!forum/docker-user](https://groups.google.com/forum/#!forum/docker-user)。
别忘了，你也可以在这些列表中搜索，看看你的问题是否已经得到了回答。因为这本书是关于安全性的，所以不要忘记你可以使用这两个邮件列表来讨论与安全性相关的项目——无论它们是与开发相关的还是与用户相关的。
## GitHub 问题
跟上安全相关问题的另一种方法是关注 GitHub 问题。由于 Docker 核心和其他各种 Docker 的代码，如 **机器、****合成**，以及所有其他代码都存储在 GitHub 上，因此它提供了一个区域。到底什么是 GitHub 问题，我为什么要关心它们，这可能是你现在正在问自己的问题。GitHub Issues 是 GitHub 使用的一个 bug 跟踪系统。通过跟踪这些问题，您可以查看其他人正在经历的问题，并在您自己的环境中超越它们，或者它可以在您的环境中解决问题，因为您知道其他人也有同样的问题，而且不仅仅是您的问题。你可以停止拉扯你剩下的头发。
由于每个 GitHub 存储库都有自己的问题部分，我们不需要查看每一个问题部分，但是我相信查看其中一个存储库的问题部分是值得的，这样您就可以知道您到底在查看什么，以便帮助解读所有内容。
以下截图(可在[https://github.com/docker/docker/issues](https://github.com/docker/docker/issues)找到)显示了 Docker 核心软件代码当前存在的所有问题:
![GitHub issues](img/00014.jpeg)
从这个屏幕上，我们不仅可以看到有多少期是开放的，还可以知道有多少期是关闭的。这些问题曾经是一个问题，已经为它们找到了解决方案，现在它们已经关闭。关闭的是出于历史目的，以便能够回到过去，看看可能已经提供了什么解决方案来解决问题。
在下面的截图中，我们可以根据作者过滤问题，也就是提交问题的人:
![GitHub issues](img/00015.jpeg)
在下面的截图中，我们还可以根据标签过滤问题，这些标签可能包括 **api** 、**内核**、**appamor**、 **selinux** 、 **aufs** 等等:
![GitHub issues](img/00016.jpeg)
在下面的截图中，我们看到我们也可以按里程碑进行过滤:
![GitHub issues](img/00017.jpeg)
里程碑本质上是标签，帮助基于为特定目的修复问题来对问题进行排序。它们也可以用来计划即将到来的发布。正如我们在这里看到的，其中一些包括 **Windows TP4** 和 **Windows TP5** 。
最后，我们可以根据受让人过滤问题，即被分配修复或解决问题的人，如下图截图所示:
![GitHub issues](img/00018.jpeg)
正如我们所看到的，我们有很多方法可以过滤问题，但是一个问题实际上看起来像什么，它包含什么？让我们在下一节看一下。