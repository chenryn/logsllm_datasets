5.3.2
Rows matched:1Changed:1Warnings:0
Query OK,1row affected (0.03 sec)
mysql>update t set name='d1'where id=4;
7rows in set (0.01 sec)
mysql>select *fromt;
QueryOK,0rowsaffected(0.o0sec)
mysql>begin;
1row in set(0.00sec)
CreateTable:CREATETABLE't'（
mysql>show create tablet\G;
+----+--
71g
31c
21b
1la
id|name
ENGINE=InnoDBAUTO_INCREMENT=8DEFAULTCHARSET=gbk
PRIMARYKEY(id')
'name'varchar(10) NOT NULL,
id'tinyint(3)unsigned NOTNULLAUTO_INCREMENT,
在并发访问比较高的情况下，如果大量事务因无法立即获得所需的锁而挂起，会占用
InnoDB存储引擎是通过给索引上的索引项加锁来实现的，这就意味着：只有通过索引
下面来演示下行锁的使用情况。
Table:t
行锁
行锁的演示
Session1
此时就会锁等待，因为更新的是同一行记录
7rows in set (0.01 sec)
引擎是行锁，不是表锁
而更新下一行记录时，就没事，原因就是innodb
Query OK,1row affected(0.01 sec)
mysql>updatetsetname='e1'whereid=5;
mysql>updatetsetname='d2'whereid=4;
|id|name|
mysql>select* fromt;
Query OK,0rows affected (0.00 sec)
mysql>begin;
----+-
1|a
+..-+....
71g
61f
5|e
3|c
21b
4|d
Session2
---
## Page 179
的死锁。
否则，InnoDB 将使用表锁。
mysql>updatet1 set name='d1'where id=4;
7rows in set (0.01 sec)
|4|d
mysql>select *fromt;
Query OK,0rows affected (0.00 sec)
mysql>begin;
1 row in set (0.00 sec)
CreateTable:CREATE TABLE't1'（
mysql>show create table t1\G;
Rowsmatched:1Changed:1Warnings:0
QueryOK,1row affected(0.01sec)
+-..-+..-
171g
1la
----+----
|id|name
61f
5le
3∣c
21b
+----+--------+
ENGINE=InnoDBDEFAULTCHARSET=gbk
'name'varchar(10)NOTNULL
id’tinyint（3)unsignedNOTNULLDEFAULT'0”，
两个事务都需要获得对方持有的排他锁才能继续完成事务，
从上面演示的内容可以看出，只有通过索引条件检索数据，InnoDB才会使用行级锁，
Table:t1
3.死锁
2.行锁转表锁
下面来演示一下行锁转表锁的情况
Session1
此时就会锁等待，因为t1加上了表锁
ERROR1205(HY000):Lockwait timeout exceeded;try
mysql>updatet1setname='e1'whereid=5;
7 rows in set(0.01 sec)
171g
161f
|5|e
1 4 | d
|3|c
|1|a
mysql>select *fromt;
restartingtransaction
|2|b
+----+-----
|id|name|
Query OK,0rows affected (0.00 sec)
mysql>begin;
--+----
，这种循环锁等待就是典型
Session2
第5章性能调优·165
---
## Page 180
166·第二部分故障诊断与性能优化篇
但不是事务安全的，而且不支持外键。每张MyISAM表存放在3个文件中：frm文件存放
的组合。不过，还是建议尽量不要混合使用多种存储引擎，这样容易带来更复杂的问题。
项目应用特点来权衡，而对于复杂的应用系统，也可以根据实际情况来选择多种存储引擎
之后，MySQL中默认的存储引擎则改为了InnoDB。对于这两种存储引擎的选择，要根据
长。在MySQL5.5之前的版本中，MyISAM是MySQL中默认的存储引擎，而在MySQL5.5
5.3.3
少死锁出现的概率。
务则获得锁，继续完成事务。死锁是无法避免的，我们可以通过调整业务的逻辑来尽量减
Rowsmatched:1Changed:1Warnings:0
Query OK,1 row affected (6.75 sec)
（等待.
mysql>update t2 set name=cc1’where id=3;
mysql>updatet2setname='cc1'whereid=3;
Rowsmatched:1Changed:1Warnings:0
QueryOK,1row affected(0.25sec)
QueryOK,0rows affected(0.2sec)
mysql>begin;
6rows in set(0.48sec)
mysql>updatet2 set name='bb'whereid=2;
mysql>select *from t2;
MyISAM支持全文索引，这是一种基于分词创建的索引，支持一些比较复杂的查询，
id|name
61f
5|e
4|d
3|c
2|b
1|a
发生死锁后，InnoDB一般都能自动检测到，它会让一个事务释放锁并回退，另一个事
InnoDB和MyISAM作为MySQL数据库中两种最主要、最常用的存储引擎，各有所
下面来演示一下死锁的情况。
Session1
lock;tryrestartingtransaction
ERROR1213(40001):Deadlockfoundwhen tryingtoget
mysql>updatet2 set name='bb1'whereid=2;
Rowsmatched:1Changed:1Warnings:0
Query OK,1row affected(0.07sec)
mysql>updatet2set name='cc'where id=3;
Query OK,0rows affected(0.02sec)
mysql>begin;
6 rows in set (0.48 sec)
15le
|1|a
|id|name|
mysql>select*fromt2;
161f
|4|d
|3|c
121b
+..+...
Session2
---
## Page 181
Sysbench 对这两个引擎进行压力测试，让大家进一步认识两者的特性。
盘的I/O，比如，可以把undolog放人SSD磁盘上。
也可以从共享表空间拆分出去，保存在另一块硬盘上，这样做的目的是，充分利用多块磁
MySQL5.5里，一些新的特性都是基于独立表空间的。在MySQL5.6里，undo log回滚日志
据、索引、插人合并缓冲从ibdatal拆分了出去，保存在.ibd这种格式的文件里，因为在
冲、undolog回滚日志，ib_logfile0...3里保存着redolog重做事务日志。独立表空间把数
的数据文件是ibdatal.ibdataN，这个数据文件里保存着元数据、数据、索引、插人合并缓
些方面。它有两种表空间管理模式：一种是共享表空间，一种是独立表空间。共享表空间
的设计理论是充分利用内存，减少磁盘I/O使用率，每次版本升级时，改善最多的就是这
为从内存进行读写比磁盘要快得多。当数据全部加载到内存中，这时的性能是最好的。它
使用到索引，InnoDB表同样会锁全表)。
持 ACID 事务、支持行级锁定（InnoDB表的行锁不是绝对的，如果执行一个 SQL语句没有
可以手工或者自动执行检查或修复操作，这一点要注意跟InnoDB的事物恢复区分开来。
表格定义；数据文件是MYD（MYData）；索引文件是MYI（MYIndex）。对于MyISAM表，
InnoDB的工作原理：就是把数据捞到内存中，被用户读写，这样大大增加了性能，因
InnoDB是事务型引擎，支持回滚，具有崩溃恢复能力，多版本并发控制（MVCC）、支
首先来看看MySQL配置参数：
这两个存储引擎在第1章已有介绍，篇幅所限，这里就不再多说了。下面将使用
口InnoDB表比MyISAM表更安全，
口 MyISAM表是保存成文件的形式，在跨平台的数据转移中使用MyISAM存储会省去
口MyISAM支持全文索引，而InnoDB不支持全文索引，但在最新的5.6版本中已提供
口MyISAM锁是表级锁，锁开销最小，而InnoDB支持行级锁定，锁管理开销大，支
口MyISAM是非事务安全型的，而 InnoDB 是事务安全型的，也就是ACID 事务支持；
innodb_buffer_pool_size=11G
MyISAM和InnoDB之间的主要区别有以下几点：
--oltp-table-size=1000000
下面是压力测试参数：
innodb_flush_log_at_trx_commit=2
sync_binlog=0
口N
表到事务表。
持更好的并发写操作；
不少的麻烦；
支持；
用MyISAM；
MyISAM相对简单，管理方便，因此在效率上要优于InnoDB，小型应用可以考虑使
，可以在保证数据不会丢失的情况下，切换非事务
第5章性能调优·167
---
## Page 182
168
3·第二部分故障诊断与性能优化篇
5.4.1事务的概念
5.4
据库是一种趋势，所以建议优先选择InnoDB引擎。
能。对于MyISAM引擎，在MySQL5.5版本里Oracle公司支持的已经很少了，以后内存数
应用中需要执行大量的读写操作，则应该使用InnoDB，这样可以提高多用户并发操作的性
查询操作很难获得读锁，从而可能永远阻塞。
MyISAM表不太适合有大量更新操作和查询操作应用的原因，因为大量的更新操作会造成
锁也会插到读锁请求之前！这是因为MySQL认为写请求一般要比读请求重要。这也正是
理呢？答案是写进程先获得锁。不仅如此，即使读请求先到锁等待队列，写请求后到，写
程请求某个MyISAM表的读锁，同时另一个进程也请求同一表的写锁，MySQL该如何处
InnoDB用于事务处理应用程序，具有众多特性，包括支持ACID事务、行锁等。如果
事务处理可以确保除非事务性单元内的所有操作都成功完成，否则不会永久更新面向
MyISAM存储引擎的读锁和写锁是互斥的，读写操作是串行的。试想一下，一个进
从测试的结果来看，InnoDB每秒处理的数据为1549个，而MyISAM仅仅为154个。
下面是二者之间的性能对比情况。
-mysql-socket=/tmp/mysql.sockrun
-num-threads=100
--max-requests=10000
t505
queries perforned:
OLTP tost statistics
ther
red
mysql-db=test
mysql-password=admin123
mysql-user=admin
mysql-port=3306
mysql-host=192.168.1.11
eadwrite request
deadlocks
transactions:
total:
选择合适的事务隔离级别
other operations:
202
InnoDB
1000（1549.15pese）
20002（3098.29 per sec）
0（0.0 per sec）
19009（29433.80per sc）
bther operations:
deadloc
transactions:
 total：
ead：
queries perforned:
OLTP test statistics:
read/rite requests:
MyISAM
210000
1000（154.54pesec）
1900（2936.22persec）
20000（309.08 per sec.）
14000
0（0.00 per sec.）
---
## Page 183
作系统的调度。
写到日志文件中；每隔一秒，刷新一次日志文件，但不一定刷新到磁盘上，而是取决于操
日志文件中，并且刷新日志文件的数据到磁盘上。
同样安全性也是最差的。当系统岩机时，会丢失1秒钟的数据。
存区的数据写到日志文件中，以及把日志文件的数据刷新到磁盘上；它的性能是最好的，
人事务日志（redo log）；当事务提交时，会将日志缓冲区里的事务日志刷人磁盘。这个动作
该事务的一个LSN日志序列号；当执行事务时，会往InnoDB_Log_Buffer日志缓冲区里插
务可快速和持久运行的，也就是在写数据前，需要先写日志。当开始一个事务时，会记录
5.4.2
成功，要么就失败。
个取钱的动作会自动回滚到先前的状态，保证我不会亏损，那么这个就叫做事务。要么就
掉了2000元，所以为了避免这种问题的出现，在我取钱的一刹那，若取款机坏掉了，我这
按确定等钱出来的时候，取款机主板烧了，此时如果数据库没有保障机制，那么我就损失
看起来容易明白得多。大家都在ATM取款机取过钱吧？比如，我一次取出2000元，当我
ACID（原子性、一致性、隔离性和持久性）属性：
简化错误恢复并使应用程序更加可靠。一个逻辑工作单元要成为事务，必须满足所谓的
数据的资源。通过将一组相关操作组合为一个要么全部成功要么全部失败的单元，可以
innodb_flush_log_at_trx_commit=2，表示每个事务提交时，把事务日志数据从缓存区
innodb_flush_log_at_trx_commit=1，表示每个事务提交时，
innodb_flush_log_at_trx_commit=0，表示每个事务提交时，每隔一秒，把事务日志缓
像其他数据库一样，MySQL在进行事务处理的时候使用的是日志先行的方式来保证事
图5-54～图5-56是redo log事务日志刷新到磁盘的示意图。
为了帮助大家进一步理解事务的含义，这里将用一个例子来说明，相信会比专业术语
事务发生前和发生后，根据数据的规则，
口持久性
事务发生前和发生后，根据数据的规则，总额应该匹配。
一致性
在所有的操作没有执行完毕之前，其他会话不能够看到中间改变的过程。
口隔离性
对于数据修改，
口原子性
事务的实现
，要么全都执行，要么全都不执行。
总额应该匹配。
，把事务日志从缓存区写到
第5章性能调优·169
---
## Page 184
170
）·第二部分故障诊断与性能优化篇
Redo log
Redo log
Redo log
innodb_fush_log_at_trx commit=1
innodb_flush_log_at_trxcommit=0
10:00
10:00
10:00
图5-56 innodb_fush_log_at_trx_commit-2
图5-55
图5-54 innodb_flush_log_at_trx_commit=0
:01
10:00
:01
10:00
:01
10:00
innodb_flush_log_at_trx_commit=1
10:00
10:00
:02
:02
10:00
（需要一次IO）
刷入到磁盘
写人到事务日志
insert into tl values(10,j);
insert into tl values(9,i);
insert into tl values(2,b);
insert into tl values(1,'a');
（需要十次I/O）
写人到事务日志并刷人到磁盘
insert into tl values(9'i);
insert into tl values(2,b）);
insert into tl values(1,'a);
（需要一次I/O）
写人到事务日志并刷人到磁盘
insert into tl values(10,j);
insert into tl values（1,a);
insert intotlvalues(10,'j）;
insert into tlvalues(3，c）);
insert into tl values(2,b);
---
## Page 185
不确定情况。
MySQL的默认隔离级别是RepeatableRead（可重复读）。
Serializable。ORACLE/SQLSERVER的默认隔离级别是ReadCommitted（读提交），而
念。InoDB有四种隔离级别：Read Uncommitted、Read Committed、Repeatable Read、