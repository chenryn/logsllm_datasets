浏览器向在网络服务器上的程序请求数据。CGI描述了客户端和服务器程序之间
传输数据的一种标准。编写CGI程序的语言有Shell、Perl、Python、Ruby、
PHP、TCL、C/C++等。Yorserver支持这些CGI程序的调用，需要修改相关配
置，cgi_path参数指定CGI程序的存放目录，默认为yorserver/bin/cgi-bin目录，指
定多个目录使用“，”号分隔；cgi_extensions参数指定CGI程序扩展名支持，详细
见下面的配置：
[cgim]
# cgi_moudle： Enable（on） or Disable（off） cgi support.
cgi_moudle="on"
# cgi_path： configure cgi path，multiple cgi path use '，' delimited，cgi_path in bin directory.
cgi_path='/cgi-bin'，
# cgi_extensions： configure cgi file extension.
cgi_extensions="（'.cgi'，'.py'，'.pl'，'.php'）"
图8-8 目录列表
Yorserver采用CGIHTTPServer模块来实现CGI支持，其
CGIHTTPRequestHandler类继承了SimpleHTTPRequestHandler类，因此，该类除
了可以执行CGI程序外还支持静态文件服务。另外在主服务类中需要继承
CGIHTTPRequestHandler基类，例如：class
ServerHandler（CGIHTTPRequestHandler），其他实现源码如下：
CGIHTTPRequestHandler.cgi_directories = cgi_path #指定CGI路径
if cgi_moudle=="on" and self.path.endswith（cgi_extensions）： #开启CGI且在
配置
#扩展名列表中
return CGIHTTPRequestHandler.do_GET（self） #调用cgi do_GET（）方法，返回
执行结果
下面列举Python与PHP CGI实现冒泡排序法的示例。代码如下：
【bin/cgi-bin/index.py】
#！/usr/bin/env python
#coding=utf-8
print "Content-type： text/html\n\n"；
print "Python冒泡排序测试"
my_list = [23，45，67，3，56，82，24，23，5，77，19，33，51，99]
def bubble（bad_list）：
length = len（bad_list） - 1
sorted = False
while not sorted：
sorted = True
for i in range（length）：
if bad_list[i] > bad_list[i+1]：
sorted = False
bad_list[i]， bad_list[i+1] = bad_list[i+1]， bad_list[i]
bubble（my_list）
print my_list
print ""
执行结果如图8-9所示。
图8-9 Python CGI运行结果图
【bin/cgi-bin/index.php】
#！/usr/bin/env php
PHP冒泡排序测试"；
function bubble（array $array）{
for（$i=0， $len=count（$array）-1； $i$i； --$j）{
if（$array[$j] "；
？>
执行结果如图8-10所示。
图8-10 PHP CGI运行结果图
第9章 集中化管理平台Ansible详解
Ansible（http://www.ansibleworks.com/）一种集成IT系统的配置管理、应用
部署、执行特定任务的开源平台，是AnsibleWorks公司名下的项目，该公司由
Cobbler及Func的作者于2012年创建成立。Ansible基于Python语言实现，由
Paramiko和PyYAML两个关键模块构建。Ansible具有如下特点：
·部署简单，只需在主控端部署Ansible环境，被控端无需做任何操作；
·默认使用SSH（Secure SHell）协议对设备进行管理；
·主从集中化管理；
·配置简单、功能强大、扩展性强；
·支持API及自定义模块，可通过Python轻松扩展；
·通过Playbooks来定制强大的配置、状态管理；
·对云计算平台、大数据都有很好的支持；
·提供一个功能强大、操作性强的Web管理界面和REST API接口——AWX平
台。
Ansible的架构图见图9-1，用户通过Ansible编排引擎操作公共/私有云或
CMDB（配置管理数据库）中的主机，其中Ansible编排引擎由Inventory（主机与
组规则）、API、Modules（模块）、Plugins（插件）组成。
Ansible与Saltstack最大的区别是Ansible无需在被控主机部署任何客户端代
理，默认直接通过SSH通道进行远程命令执行或下发配置；相同点是都具备功能
强大、灵活的系统管理、状态配置，都使用YAML格式来描述配置，两者都提供
丰富的模板及API，对云计算平台、大数据都有很好的支持。Ansible在GitHub上
的地址为https://github.com/ansible/，其中提供了不少配置例子供参考，本文测试
的版本为1.3.2。
图9-1 Ansible架构图
提示 Ansible提供了一个在线Playbook分享平台，地址：
https://galaxy.ansibleworks.com，该平台汇聚了各类常用功能的角色，找到适合自
己的Role（角色）后，只需要运行“ansible-galaxy install作者id.角色包名称”就可
以安装到本地，比如想安装bennojoy提供的Nginx安装与配置的角色，直接运
行“ansible-galaxy install bennojoy.nginx”即可安装到本地，该角色的详细地址为：
https://galaxy.ansibleworks.com/list#/roles/2。
为了方便读者更系统化地了解Ansible的技术点，本章将针对相关技术点进行
详细展开介绍。
9.1 YAML语言
YAML是一种用来表达数据序列的编程语言，它的主要特点包括：可读性
强、语法简单明了、支持丰富的语言解析库、通用性强等。Ansible与Saltstack环
境中配置文件都以YAML格式存在，熟悉YAML结构及语法对我们理解两环境的
相关配置至关重要。下面的示例定义了在master的不同业务环境下文件根路径的
描述：
file_roots：
base：
- /srv/salt/
dev：
- /srv/salt/dev
prod：
- /srv/salt/prod
本节主要通过YAML描述与Python的对应关系，从而方便读者了解YAML的
层次及结构，最常见的是映射到Python中的列表（List）、字典（Dictionary）两
种对象类型。下面通过块序列与块映射的示例详细说明。
9.1.1 块序列描述
块序列就是将描述的元素序列到Python的列表（List）中。以下代码演示了
YAML与Python的对应关系：
import yaml
obj=yaml.load（
"""
- Hesperiidae
- Papilionidae
- Apatelodidae
- Epiplemidae
"""）
print obj
本例中引用“-”来分隔列表中的每个元素，运行结果如下：
['Hesperiidae'， 'Papilionidae'， 'Apatelodidae'， 'Epiplemidae']
YAML也存在类似于Python块的概念，例如：
-
- Hesperiidae
- Papilionidae
- Apatelodidae
- Epiplemidae
-
- China
- USA
- Japan
对应的Python结果为：
[['Hesperiidae'， 'Papilionidae'， 'Apatelodidae'， 'Epiplemidae']， ['China'， 'USA'， 'Japan']]
9.1.2 块映射描述
块映射就是将描述的元素序列到Python的字典（Dictionary）中，格式为“键
（key）：值（value）”，以下为YAML例子：
hero：
hp： 34
sp： 8
level： 4
orc：
hp： 12
sp： 0
level： 2
对应的Python结果为：
{'hero'： {'hp'： 34， 'sp'： 8， 'level'： 4}， 'orc'： {'hp'： 12， 'sp'： 0， 'level'： 2}}
当然，YAML块序列与块映射是可以自由组合在一起的，它们之间可以相互
嵌套，通过非常灵活的组合，可以帮助我们描述更加复杂的对象属性，例如：
- hero：
hp： 34
sp： 8
level： 4
- orc：
hp：
- 12
- 30
sp： 0
level： 2
对应的Python结果为：
[{'hero'： {'hp'： 34， 'sp'： 8， 'level'： 4}}， {'orc'： {'hp'： [12， 30]， 'sp'： 0， 'level'： 2}}]
9.2 Ansible的安装
Ansible只需在管理端部署环境即可，建议读者采用yum源方式来实现部署，
下面介绍具体步骤。
9.2.1 业务环境说明
为了方便读者理解，笔者通过虚拟化环境部署了两组业务功能服务器来进行
演示。笔者的操作系统版本为CentOS release 6.4，自带Python 2.6.6。相关服务器
信息如表9-1所示（CPU核数及Nginx根目录的差异化是为方便演示生成动态配置
需要）：
表9-1 业务环境表
9.2.2 安装EPEL
由于目前RHEL官网的yum源还没有得到Ansible的安装包支持，因此先安装
EPEL作为部署Ansible的默认yum源。
·RHEL（CentOS）5版本：rpm-Uvh http://mirror.pnl.gov/epel/5/i386/epel-
release-5-4.noarch.rpm
·RHEL（CentOS）6版本：rpm-Uvh
http://ftp.linux.ncsu.edu/pub/epel/6/i386/epel-release-6-8.noarch.rpm
9.2.3 安装Ansible
主服务器安装（主控端），代码如下：
#yum install ansible -y
9.2.4 Ansible配置及测试
第一步是修改主机与组配置，文件位置/etc/ansible/hosts，格式为ini，添加两
台主机IP，同时定义两个IP到webservers组，更新的内容如下：
【/etc/ansible/hosts】
#green.example.com
#blue.example.com
192.168.1.21
192.168.1.22
[webservers]
#alpha.example.org
#beta.example.org
192.168.1.21
192.168.1.22
通过ping模块测试主机的连通性，分别对单主机及组进行ping操作，出现如
图9-2所示的结果表示安装、测试成功。
图9-2 测试主机连通性
提示 由于主控端与被控主机未配置SSH证书信任，需要在执行
ansible命令时添加-k参数，要求提供root（默认）账号密码，即在提示“SSH
password：”时输入。很多人更倾向于使用Linux普通用户账户进行连接并使用
sudo命令实现root权限，格式为：ansible webservers-m ping-u ansible-sudo。
9.2.5 配置Linux主机SSH无密码访问
为了避免Ansible下发指令时输入目标主机密码，通过证书签名达到SSH无密
码是一个好的方案，推荐使用ssh-keygen与ssh-copy-id来实现快速证书的生成及
公钥下发，其中ssh-keygen生成一对密钥，使用ssh-copy-id来下发生成的公钥。
具体操作如下。
在主控端主机（SN2013-08-020）创建密钥，执行：ssh-keygen-t rsa，有询问
直接按回车键即可，将在/root/.ssh/下生成一对密钥，其中id_rsa为私
钥，id_rsa.pub为公钥（需要下发到被控主机用户.ssh目录，同时要求重命名成
authorized_keys文件）。
Generating public/private rsa key pair.
Enter file in which to save the key （/root/.ssh/id_rsa）： （回车）
Enter passphrase （empty for no passphrase）： （回车）
Enter same passphrase again： （回车）
Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
The key fingerprint is：
8d：f0：47：c6：b9：55：5b：c0：0e：04：ec：e2：9c：38：f6：84 root@SN2013-08-020
The key's randomart image is：
+--[ RSA 2048]----+
| ..o..o..|
| ......o |
| . .= .o. |
| o.=.o . |
| =So+ |
| E =. |
| . + |
| . |
| |
+-----------------+
接下来同步公钥文件id_rsa.pub到目标主机，推荐使用ssh-copy-id公钥拷贝工
具，命令格式：/usr/bin/ssh-copy-id[-i[identity_file]][user@]machine。本示例中我
们输入以下命令同步公钥至192.168.1.21和192.168.1.22主机。
#ssh-copy-id -i /root/.ssh/id_rsa.pub PI:EMAIL
#ssh-copy-id -i /root/.ssh/id_rsa.pub PI:EMAIL
校验SSH无密码配置是否成功，运行ssh PI:EMAIL，如直接进入目标
root账号提示符，则说明配置成功。