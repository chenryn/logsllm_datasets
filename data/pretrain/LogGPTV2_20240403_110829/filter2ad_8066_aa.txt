**作者：周阳、吕竭@星阑科技PortalLab  
原文链接：**
## 演讲者介绍
**周阳**
星阑科技安全研发工程师。具有丰富的漏洞研究及红队武器化经验，历经主机漏洞扫描、应用漏洞扫描、开源软件供应链安全跟踪以及漏洞情报管理平台等多款产品建设，曾参与发现多个linux系统安全漏洞并收到工信部及其他部委致谢。目前专注于API安全研究以及自动化应用漏洞扫描方向。
**吕竭**
星阑科技安全服务工程师。曾就职于某大型央企，在攻防演练、甲方安全建设方面具有丰富经验。目前专注于API漏洞挖掘方向，上报数十个SRC
API高危/严重漏洞，获得国内多个SRC月榜前十，字节SRC年榜第二。
## 议题内容
本次分享可以分为三个部分，首先我带大家来了解一下为什么目前API的安全问题逐渐成为整个行业内讨论的热门话题，其次是分析API都有哪些攻击面，从攻击面入手来了解API所面临的安全风险;最后，我们将分享API
Fuzz方案以及一些实战案例。
首先，让我们来看看API攻击崛起的原因。
我们目前正处于一个万物互联互通的时代，无论是从IaaS到SaaS，还是从PC到手机再到各种IoT设备，它们都接入了互联网中进行数字交换，那么API这种数据交换方式也逐渐成为软件连接“万物”
的核心载体。API本质上是一种跨语言、跨架构的数据传输约定，API连接了不同层次、不同编程语言、不同厂商
所研发的软件，让数据可以跨应用软件进行自由流动。同时随着云计算、大规模分布式应用、移动互联网以及IoT基础设施的蓬勃发展。企业为了提升交付产品的能力，敏捷开发与DevOps也就应运而生。至此，软件系统研发流
程从类似流水线作业的方式演化为组件并行开发生产，然后再集成的形式。与此同时，后端应用组件的解耦以及SOA架构的普及，使得API逐步成为连接各应用组件的事实标准。
在API高速发展的背景下，API的经济与生态也逐渐成型，左图是Gartner总结的API相关技术的成熟度曲线，我们可以看到这里面提到的技术已经有很多落地案例，包括API网关、API管理平台与API交易市场。右图是postman提出的API基础设施生态，包括API解决方案厂商、APM厂商，研发效能厂商、云厂商、安全厂商以及新一代API网关厂商等等。在数字时代下，无论是互联网的商业创新还是传统企业的数字化转型，它们都推动了API经济的发展。尤其是对传统行业而言，API就是其价值链全面数字化的关键所在。
接下来，让我们把目光投向API的安全问题，这也是目前大家最关心的问题之一。根据API解决方案厂商Postman
统计，2021年度全球API数量增长为39%，API访问量增长为56%，当下正处于我国数字化转型的浪潮之中，可以看到我们国内的API增长速度甚至接近80%。随着API高速发展的同时，我们看到API的安全问题也逐渐被暴露出来，API安全已经成为企业关注的焦点。例如:2020年7月，美国开放银行泄露了700万用户的数据，其中包括用
户的姓名，电话，家庭住址，出生年月等关键信息;2021年4月，Facebook在线业务API泄露的5亿多用户数据在暗网公开售卖，这些信息也包括用户的姓名，电话，家庭住址等关键信息；同样，像领英，一些大型电商平台等等不同的行业，不同的领域的企业都产生过由API安全漏洞所引发的数据泄露事件，严重损害了相关企业和用户权益。
**在此之前，数据泄露事件一般都是由于数据库被拖库或数据库暴露公网导致的。而随着API的快速增长，近年来我们看到由API导致的数据泄露事件也越来越多了。**
下面简单了解一下API都有哪些攻击面。
首先，我们先来看一下API协议的类型，目前的IT基础设施中各个层次都充满了API的交互，那么我们本次分享内容主要讨论应用层的API通信协议，按照使用量来看，目前使用最多的是RESTful
API，然后是
webhooks、graphql等这些常见的API，也有像gRPC，MQTT这样偏底层的API协议，这些API协议的异构性本身携带着一些安全问题，我们后面讨论API
Fuzz的时候也会涉及到协议解码问题。
接下来我们来看看API的攻击面到底有哪些，这是OWASP给出的API安全所面临的十大风险。根据我们实战经验总结出右边这几种关键问题。首先是越权，权限问题是API失陷或者数据泄露的最常见原因，包含垂直越权、水平越权和未授权访问，比如通过未授权访问的API拿到用户数据。之后是敏感数据暴露，比如在API设计不当时，下游业务
方只需要两个字段，但却从上游的API接口中获取到了10个字段，其中多余的字段可能会导致不必要的数据泄露。
接着是代码漏洞，由于API后端是代码逻辑实现的，因此API同样会面临应用安全领域的代码漏洞，例如SQL注入，命令执行等，这些大多数情况都是由于业务开发者的疏忽所导致的。同样像API网关、API管理平台这类API基础设施
自身的一些安全漏洞，会导致托管在其上的API受到影响。此外还存在一些不安全的业务配置以及业务风控领域的问题。
这些问题里面，最严重的是API越权问题，举个例子，这是2021年12月爆发的SonarQube未授权下载源码事件。导致源码泄露的原因是，在默认配置的情况下，SonarQube缺少对API接口的访问权限控制，攻击者可利用该漏洞在未授权的情况下，通过访问API/settings/values接口从而获取到
SMTP、SVN、GitLab 等凭据，从而进一步获取代码仓库中的源代码，造成项目源代码泄露。
同样的，针对新的API基础设施，它们也面临着自身系统的API安全问题，这是前段时间披露出来的一个国外主流API平台存在的未授权文件上传漏洞，允许未经身份验证的攻击者通过上传恶意JSP文件从而达到RCE。这就是通过攻陷API平台本身从而威胁到其承载的API，同样的，其他API基础设施也出现过类似问题。比如Apache的APISIX，它之前bacth-requests插件存在权限绕过漏洞、Dashboard存在越权漏洞。本质上还是权限问题，可见权限对于API来讲确实是一个不可忽视的安全风险。
那么我们反过来思考，导致API问题频发的原因到底是什么?从API的生产者角度，也就是站在企业的角度来看有三点:一是大规模分布式系统及复杂应用架构带来API数量迅猛增长，在业务增长的同时，我们是否针对API建立起完整的安全管理规范。二是基于API-First理念构建的研发流程，极短的迭代周期导致API变动跟踪困难。三是传统安全测试和防护工具对API风险收敛的失效，需要面对多种API协议之间的差异、以及频繁变化的API、自定义的路径等等都为API安全测试带来困难。从攻击者的视角来看，也可以分为三点：首先，API攻击路径更短，API可以直达数据而不必像传统入侵那样需要通过内网，进行好几层侵入，最终才能拖取数据，API压缩了攻击链路；同时，在API生态迅猛
发展的背后，安全性是滞后的，这里有大量的API基础设施的漏洞仍未被发掘；此外是云原生应用尤其是容器化、微服务大规模落地之后，API成为了不同系统模块间主要的通信方式，因此在攻击者视角是一件投入产出比很高的事情。
下面为大家介绍API Fuzz方案及实战案例。
首先我们先从以下几点了解一下传统web Fuzz方法的弊端。
**第一点就是API的路径是自定义的，无法被漏扫发现。**