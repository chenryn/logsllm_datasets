### 5.2 Experimental Results

In this section, we present and discuss the results obtained from different scanners when analyzing three test applications. For each application, we provide the number of locations visited, the number of reported vulnerabilities, the number of unique injection points (bugs) identified, and the number of relevant database objects created.

#### Blogging Application
Table 1 summarizes the results for the simple blog application. Compared to the basic spider, all other tools reached more locations. This is because these spiders (except the basic one) requested the root of each identified directory, which can provide additional links to pages that might not be reachable from the initial page. As expected, extended, guided fuzzing explored more locations than guided fuzzing alone, as it attempts to explore the application in breadth. There was no difference between the results for extended, guided fuzzing and stateful fuzzing, as the fuzzer's invocation did not interfere with the correct replay of the use case.

None of the three existing scanners could create a valid comment on the blogging system. The posting process involves a preview step where users can either change the content or post the comment. The submit button only appears after server-side validation recognizes the submitted data as a valid comment, requiring both the name and comment fields to be present. Guided fuzzing, which relies on a previously recorded test case, can correctly fill out the form and post a comment, potentially exposing stored XSS vulnerabilities missed by other scanners. Some scanners report higher numbers of injection points due to their heuristic of issuing requests for all subdirectories of an injection point, which can lead to the discovery of new pages, redirects, or errors. Our fuzzer, focusing on following use cases, did not implement this heuristic but could easily add it.

| **Scanner** | **Locations Visited** | **POST/GET Requests** | **XSS Warnings (Refl./Stored)** | **Injection Points (Refl./Stored)** |
|-------------|-----------------------|-----------------------|---------------------------------|-------------------------------------|
| Spider      | 4                     | 4                     | 0/0                             | 0/0                                 |
| Burp Spider | 8                     | 6                     | 0/0                             | 0/0                                 |
| w3af        | 9                     | 25                    | 12/12                           | 12/12                               |
| Acunetix    | 9                     | 133                   | 64/189                          | 189/189                             |
| Use Case    | 4                     | 4                     | 0/0                             | 0/0                                 |
| Guided Fuzzing | 6                     | 6                     | 0/0                             | 0/0                                 |
| Extended Fuzz. | 6                     | 6                     | 0/0                             | 0/0                                 |
| Stateful Fuzz. | 6                     | 6                     | 0/0                             | 0/0                                 |

#### Forum Application
For the forum application, the scanners were able to generate some content, such as new discussion threads and replies. Table 2 shows that while Burp Spider and w3af could create new discussion threads, only the Acunetix scanner managed to post replies. w3af correctly identified the formâ€™s action URL to post a reply but failed to generate valid input data. However, since the vulnerability is caused by a bug in the routine that validates the thread title, posting replies is not necessary to identify the flaw.

| **Scanner** | **Locations Visited** | **POST/GET Requests** | **Threads Created** | **Replies Created** | **XSS Warnings (Refl./Stored)** | **Injection Points (Refl./Stored)** |
|-------------|-----------------------|-----------------------|---------------------|--------------------|---------------------------------|-------------------------------------|
| Spider      | 8                     | 8                     | 0                   | 0                  | 0/0                             | 0/0                                 |
| Burp Spider | 8                     | 32                    | 29                  | 0                  | 0/0                             | 0/0                                 |
| w3af        | 14                    | 201                   | 29                  | 0                  | 12/12                           | 12/12                               |
| Acunetix    | 263                   | 2,003                 | 29                  | 687                | 36/36                           | 36/36                               |
| Use Case    | 6                     | 16                    | 0                   | 0                  | 0/0                             | 0/0                                 |
| Guided Fuzzing | 8                     | 85                    | 0                   | 0                  | 0/0                             | 0/0                                 |
| Extended Fuzz. | 8                     | 85                    | 0                   | 0                  | 0/0                             | 0/0                                 |
| Stateful Fuzz. | 8                     | 85                    | 0                   | 0                  | 0/0                             | 0/0                                 |

The number of executed requests and reported vulnerabilities varied significantly among the scanners. Acunetix has a large database of malformed inputs, leading to a high number of requests and reported vulnerabilities. For each of the three forum threads, Acunetix sent 21 fuzzed requests and reported each XSS vulnerability twice (once as reflected and once as stored). In contrast, w3af maintains an internal knowledge base and reports each vulnerability only once.

All our techniques were able to find the vulnerability in the forum application. Similar to Acunetix, they could create new threads and post replies. Extended, guided fuzzing visited more locations than guided fuzzing alone, and the fuzzing phase did not interfere with the replay of the use cases, so stateful fuzzing did not provide additional benefits.

#### Online Shopping Application
The experimental results for the online shopping application are presented in Tables 3 and 4. Table 3 shows the scanner effectiveness based on the number of locations visited and the number of vulnerabilities detected. Table 4 compares the number of database objects created by the Acunetix scanner and our approaches. Note that the Acunetix scanner offers a feature to use login credentials and block logout links. We conducted two test runs: one as an anonymous user and another with the login feature enabled.

Both w3af and Acunetix identified a reflected XSS vulnerability in the login form. However, neither scanner could reach deeper into the application.

| **Scanner** | **Locations Visited** | **POST/GET Requests** | **XSS Warnings (Refl./Stored)** | **Injection Points (Refl./Stored)** |
|-------------|-----------------------|-----------------------|---------------------------------|-------------------------------------|
| Spider      | 18                    | 32                    | 0/0                             | 0/0                                 |
| Burp Spider | 22                    | 18                    | 0/0                             | 0/0                                 |
| w3af        | 21                    | 52                    | 1/1                             | 1/1                                 |
| Acunetix #1 | 22                    | 829                   | 36/0                            | 36/0                                |
| Acunetix #2 | 25                    | 1,405                 | 366/0                           | 366/0                               |
| Use Case    | 22                    | 2,564                 | 0/0                             | 0/0                                 |
| Guided Fuzzing | 22                    | 1,432                 | 0/0                             | 0/0                                 |
| Extended Fuzz. | 25                    | 2,078                 | 0/0                             | 0/0                                 |
| Stateful Fuzz. | 25                    | 2,078                 | 0/0                             | 0/0                                 |

In summary, the results demonstrate the effectiveness of different scanning techniques in identifying and reporting vulnerabilities in web applications. Each tool has its strengths and limitations, and the choice of tool depends on the specific requirements and characteristics of the application being tested.