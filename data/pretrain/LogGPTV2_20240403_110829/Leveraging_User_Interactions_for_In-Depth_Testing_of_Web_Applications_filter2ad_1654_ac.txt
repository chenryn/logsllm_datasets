Even though we only tested for XSS vulnerabilities, many other attacks can
be performed against web applications. XSS is a very common and well under-
stood vulnerability and, therefore, we selected this type of attack for our testing.
However, the techniques presented in this paper apply to other injection attacks
as well (for example, SQL injection and directory traversal attacks).
5.2 Experimental Results
In this section, we present and discuss the results that the diﬀerent scanners
achieve when analyzing the three test applications. For each application, we
present the number of locations that the scanner has visited, the number of
reported vulnerabilities, the number of injection points (unique bugs) that these
reports map to, and the number of relevant database objects that were created.
Blogging application. Table 1 shows the results for the simple blog application.
Compared to the simple spider, one can see that all other tools have reached
more locations. This is because all spiders (except the simple one) requested
the root of each identiﬁed directory. When available, these root directories can
provide additional links to pages that might not be reachable from the initial
page. As expected, it can be seen that extended, guided fuzzing reaches more
locations than guided fuzzing alone, since it attempts to explore the application
in breadth. Moreover, there is no diﬀerence between the results for the extended,
204
S. McAllister, E. Kirda, and C. Kruegel
Table 1. Scanner eﬀectiveness for blog application
Locations POST/GET Comments XSS Warnings
Injection Points
Reﬂected Stored Reﬂected Stored
Requests
Spider
Burp Spider
w3af
Acunetix
Use Case
Guided Fuzzing
Extended Fuzz.
Stateful Fuzz.
4
8
9
9
4
4
6
6
4
25
133
22
4
64
189
189
-
0
0
0
1
12
12
12
-
-
0
0
-
0
0
0
-
-
0
0
-
1
1
1
-
-
0
0
-
0
0
0
-
-
0
0
-
1
1
1
guided fuzzing and the stateful fuzzing approach. The reason is that, for this
application, invoking the fuzzer does not interfere with the correct replay of the
use case.
None of the three existing scanners was able to create a valid comment on the
blogging system. This was because the posting process is not straightforward:
Once a comment is submitted, the blog displays a form with a preview button.
This allows a user to either change the content of the comment or to post it.
The problem is that the submit button (to actually post the message) is not part
of the page until the server-side validation recognizes the submitted data as a
valid comment. To this end, both comment ﬁelds (name and comment) need to
be present. Here, the advantage of guided fuzzing is clear. Because our system
relies on a previously recorded test case, the fuzzer can correctly ﬁll out the
form and post a comment. This is beneﬁcial, because it is possible to include
malicious JavaScript into a comment and expose the stored XSS vulnerability
that is missed by the other scanners. Concerning the number of injection points,
which are higher for some tested scanners, it has to be noted that this is caused
by the way in which some scanners attempt to ﬁnd new attack points. When
discovering a new URL, these scanners also issue requests for all subdirectories
of the injection point. Depending on the application, this might lead to the
discovery of new pages (injection points), redirects, or page-not-found errors. As
our fuzzer focuses on following use cases, we did not implement this heuristics
for our scanner (of course, it could be easily added).
Forum application. For the forum application, the scanners were able to gener-
ate some content, both in the form of new discussion threads and replies. Table 2
shows that while Burp Spider [5] and w3af [31] were able to create new discus-
sion threads, only the Acunetix scanner managed to post replies as well. w3af
correctly identiﬁed the form’s action URL to post a reply, but failed to gener-
ate valid input data that would have resulted in the reply being stored in the
database. However, since the vulnerability is caused by a bug in the routine that
validates the thread title, posting replies is not necessary to identify the ﬂaw in
this program.
Leveraging User Interactions for In-Depth Testing of Web Applications
205
Table 2. Scanner eﬀectiveness for the forum application
Locations POST/GET Threads Replies XSS Warnings Inject. Points
Requests Created Created Reﬂect Stored Reﬂect Stored
Spider
Burp Spider
w3af
Acunetix
Use Case
Guided Fuzzing
Extended Fuzz.
Stateful Fuzz.
8
8
14
263
6
16
85
85
8
32
201
2,003
7
48
555
555
-
0
29
687
1
12
36
36
-
0
0
1,486
2
22
184
184
-
-
0
63
-
0
0
0
-
-
3
63
-
1
3
3
-
-
0
0
-
0
0
0
-
-
1
1
-
1
1
1
Both the number of executed requests and the number of reported vulnera-
bilities diﬀer signiﬁcantly between the vulnerability scanners tested. It can be
seen that the Acunetix scanner has a large database of malformed inputs, which
manifests both in the number of requests sent and the number of vulnerabili-
ties reported. For each of the three forum threads, which contain a link to the
unique, vulnerable entry point, Acunetix sent 21 fuzzed requests. Moreover, the
Acunetix scanner reports each detected vulnerability twice. That is, each XSS
vulnerability is reported once as reﬂected and once as stored XSS. As a result,
the scanner generated 126 warnings for a single bug. w3af, in comparison, keeps
an internal knowledge base of vulnerabilities that it discovers. Therefore, it re-
ports each vulnerability only once (and the occurrence of a stored attack replaces
a previously found, reﬂected vulnerability).
The results show that all our techniques were able to ﬁnd the vulnerability
that is present in the forum application. Similar to the Acunetix scanner (but
unlike w3af), they were able to create new threads and post replies. Again,
the extended, guided fuzzing was able to visit more locations than the guided
fuzzing alone (it can be seen that the extended fuzzing checked all three forum
threads that were present initially, while the guided fuzzing only analyzed the
single forum thread that was part of the recorded use case). Moreover, the fuzzing
phase was not interfering with the replay of the use cases. Therefore, the stateful
fuzzing approach did not yield any additional beneﬁts.
Online shopping application. The experimental results for the online shopping
application are presented in Tables 3 and 4. Table 3 presents the scanner eﬀec-
tiveness based on the number of locations that are visited and the number of
vulnerabilities that are detected, while Table 4 compares the number of data-
base objects that were created by both the Acunetix scanner and our approaches.
Note that the Acunetix scanner oﬀers a feature that allows the tool to make use
of login credentials and to block the logout links. For this experiment, we made
two test runs with the Acunetix scanner: The ﬁrst run (#1) as anonymous user
and the second test run (#2) by enabling this feature.
Both w3af and Acunetix identiﬁed a reﬂected XSS vulnerability in the login
form. However, neither of the two scanners was able to reach deep into the
206
S. McAllister, E. Kirda, and C. Kruegel
Table 3. Scanner eﬀectiveness for the online shopping application
Locations POST/GET XSS Warnings
Injection Points
Requests Reﬂected Stored Reﬂected Stored
Spider
Burp Spider
w3af
Acunetix #1
Acunetix #2
Use Case
Guided Fuzzing
Extended Fuzz.
Stateful Fuzz.
18
22
21
22
25
22
22
25
32
18
52
829
1,405
2,564
36
366
1,432
2,078
-
-
1
16
8
-
1
1
1
-
-
0
0
0
-
8
0
8
-
-
1