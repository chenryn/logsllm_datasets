),
r2
2 ),
, ❕
e(❕
m1+r1s1
1
e(❕
m1+r1s1
1
)(cid:17)
(m1+r1s1)(m2+r2s2)(cid:17)
m2+r2s2
, ❕
2
(cid:16)
(cid:16)
zr1r2 ,
zr1(m2+r2s2)
,
(m1+r1s1)r2 ,
z
z
=
where z (cid:66) e(❕1, ❕2). This “level-2” ciphertext can then be decrypted
via
(c1)s1s2(c2)−s1(c3)−s2c4 = zm1m2 ,
where all the randomness terms, r1, r2, are canceled out alge-
braically, as we can see that
m1m2 = r1r2s1s2 − r1(m2 + r2s2)s1 − (m1 + r1s1)r2s2+
(m1 + r1s1)(m2 + r2s2).
(1)
From zm1m2, we can extract m1m2 by the discrete logarithm in
base z. Note that the message space has to be of polynomial size
in the security parameter so as to be able to perform such discrete
logarithm (similar to the lifted-ElGamal scheme).
In the above basic scheme, we can only homomorphically multi-
ply ciphertexts from di(cid:29)erent groups, namely, G1, G2. To eliminate
this restriction, when encrypting m, we simply de(cid:27)ne its cipher-
text to contain the ciphertexts of m in both groups. Moreover, to
achieve also “circuit-privacy”, re-randomization procedures will
be described in the full scheme. Finally, the security of the lifted
ElGamal scheme relies on the Decisional Di(cid:28)e–Hellman (DDH)
assumption, hence so does our scheme, where in such a case, the
DDH assumption in both G1 and G2 is called the Symmetric Ex-
ternal Di(cid:28)e–Hellman (SXDH) assumption (cf. [2, 30]). Note that
SXDH can hold only in asymmetric groups.
1.4 Related Work
1.4.1 Two-level Homomorphic Encryption and Conversions. Cata-
lano and Fiore [12] recently proposed a very simple generic con-
version that transforms any additively homomorphic encryption
scheme with a so-called public space property (which is a mild
requirement) to a two-level homomorphic encryption scheme. It
can be applied to composite-order schemes [18, 35, 46, 48] and
prime-order schemes such as the lifted-ElGamal [19] scheme and
the Boneh-Boyen-Shacham [8] scheme. To the best of our knowl-
edge, among these resulting two-level homomorphic encryption
schemes, the converted lifted-ElGamal scheme is one of the most
e(cid:28)cient schemes. However, compared to our proposal and the Free-
man scheme, this converted scheme may have slower decryption
speed as it requires three applications of discrete logarithms (over
polynomial-size spaces), while ours and the Freeman scheme [21]
requires only one. We describe some intuition in the paragraph
below. We remark that this is only a super(cid:27)cial comparison, since
the lifted-ElGamal scheme where one applies the CF conversion
can be de(cid:27)ned in any groups, it might be the case that such groups
admit more e(cid:28)cient discrete logarithms than bilinear groups as
in ours or the Freeman scheme. Note that, in the paper body, we
choose to compare our scheme exclusively to the Freeman scheme.
Readers who are familiar with the Catalano–Fiore (CF) conver-
sion [12] might notice some similarities of the cancellation mech-
anism used in our scheme, as shown in Eq. (1) above, to the one
used in the CF conversion. We argue that they are indeed di(cid:29)erent
as follows. Our scheme applies the cancellation directly in the ex-
ponent to obtain m1m2. Contrastingly, the CF conversion applies
their cancellation mechanism in the plaintext level and can only
obtain m1m2 − b1b2 (encrypted), where b1, b2 are some masked
randomness of level-1 ciphertexts. An encryption of m1m2 − b1b2
is then decryptable to m1m2 only if the encryption of b1 and b2 are
also provided as parts of a level-2 ciphertext. This is why the CF
conversion needs 3 applications of decryption (3 applications of
discrete logarithm in the lifted ElGamal case) so as to obtain all
of m1m2 − b1b2, b1, and b2, and hence eventually m1m2, while our
scheme requires only one application of discrete logarithm.
Catalano and Fiore [12] also proposed a generalized conversion
that transform d-level homomorphic encryption scheme to 2d-level
one. Applying this to our scheme yields 4-level homomorphic en-
cryption scheme. (In order for the conversion to be applicable, we
can make our scheme to be public-space by the same technique for
the lifted-ElGamal scheme as in [12].)
1.4.2 BGN via Projecting Pairings. Seo [54] and Herold et al. [32]
improved the projecting pairing of Freeman [21], and also obtained
new prime-order versions of the BGN cryptosystem, respectively.
However, to the best of our knowledge, these schemes are only
proposed in symmetric bilinear groups5, and, as mentioned in [32],
it is not clear how to obtain ones for asymmetric cases, as ours. Since
asymmetric pairings are much faster, we thus again compare our
scheme exclusively to the Freeman scheme in asymmetric groups.
1.4.3 More Related Work. The notion of homomorphic en-
cryption is put forward by Rivest, Adleman, and Dertouzos [50].
The RSA cryptosystem itself is already multiplicatively homomor-
phic [51], additively homomorphic encryption schemes were dis-
covered later [18, 35, 46, 48].
The recent progress in fully homomorphic encryption provides us
a way to compute any functions over an encrypted form [13, 25, 27].
Although it is a very versatile and useful tool, it is not very e(cid:28)cient
as, say, additive or two-level homomorphic encryption schemes.
Another drawback of fully homomorphic encryption is that they
rely on relatively new computational hardness assumptions such
as the learning-with-errors (LWE) assumption or the approximate
GCD assumption. A secure parameter choice of these assumption
is still on-going researches. We also note that an e(cid:28)cient BGN-type
homomorphic encryption scheme from LWE was proposed in [26].
Since our focus is pairing-based schemes, comparing to LWE-based
schemes is out of scope for this paper.
5For a comparison among these prime-order symmetric pairing based BGN-type
schemes, we refer to Table 2 in Appendix F.2 of the full version of [32]. In the ta-
ble there, one sets k = 2 so as to obtain the most e(cid:28)cient scheme in each scheme
family. Note that the resulting schemes when k = 2 are based on the DLIN assumption.
Session 16: Applied Crypto 2ASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea6872 PRELIMINARIES
2.1 Pairing
A bilinear group parameter generation algorithm G takes as an in-
put a security parameter 1n and outputs gk = (G1, G2, GT, ❕1, ❕2, e)
where G1, G2, and GT are multiplicative groups of order p such
that p = Θ(2n), while ❕1 and ❕2 are generators of G1 and G2,
and e : G1 × G2 → GT is a non-degenerate bilinear map. We
say that a bilinear group is either Type 1 if G1 = G2, Type 2 if
G1 (cid:44) G2 but there is an e(cid:28)ciently computable homomorphism
from G2 to G1, or Type 3 if G1 (cid:44) G2 and no e(cid:28)ciently computable
homomorphisms between G1 and G2 [23]. Asymmetric bilinear
groups refer to Type 3 groups. Thanks to a large number of stud-
ies [1, 3, 7, 24, 33, 34, 37, 41, 43, 45, 58, 62, 64], constructions of
e(cid:28)ciently computable prime-order bilinear groups de(cid:27)ned on el-
liptic curves are well-known. Bilinear groups and bilinear maps
de(cid:27)ned over elliptic curves are also called pairing groups and pair-
ings, resp. In this paper, we use Type 3 prime-order pairing groups.
Notations. For vectors a = (a1, . . . , an) and b = (b1, . . . , bn) over
a multiplicative group, we denote the component-wise product
(Hadamard product) by
a (cid:12) b := (a1 · b1, . . . , an · bn).
For an integer α ∈ Zp and a vector a over a multiplicative group,
we denote by αa the component-wise exponentiation of a by α. For
a prime p, we also denote Z×
p = Zp \ {0}. For a set S, we use x
$← S
to denote that x is sampled randomly and uniformly from S.
2.2 Assumption
Here, we recall the de(cid:27)nition of the SXDH Assumption (cf. [2, 30]).
De(cid:27)nition 2.1. We say that the symmetric external Di(cid:28)e–
Hellman (SXDH) assumption holds in G if the following conditions
hold: For any polynomial-time algorithm A, the advantages
| Pr[gk ← G(1n); α, β,← Zp; b ← A(pp, ❕1α , ❕1β , ❕1α β) : b = 1]
− Pr[gk ← G(1n); α, β, γ ← Zp; b ← A(pp, ❕1α , ❕1β , ❕1γ ) : b = 1]|
and
| Pr[gk ← G(1n); α, β,← Zp; b ← A(pp, ❕2α , ❕2β , ❕2α β) : b = 1]
− Pr[gk ← G(1n); α, β, γ ← Zp; b ← A(pp, ❕2α , ❕2β , ❕2γ ) : b = 1]|
are both negligible in n.
2.3 Discrete Logarithm for Small Spaces
In our scheme (and also other schemes, such as the Freeman
scheme), the decryption requires to perform discrete logarithm
for a small exponent space. More precisely, consider a group G of
prime order p = Θ(2n), a set S ⊂ Zp, and a generator ❕ ∈ G, we
de(cid:27)ne log❕,S : G → S ∪ {⊥} as
log❕,S(❕x) (cid:66)
(cid:40)
If |S| is small, i.e., polynomial in the security parameter n, the above
can be computed in polynomial time, even p = Θ(2n). There are
many ways to do so, hence we mostly refer to prior work [6, 49]
and only brie(cid:30)y describe some ideas for self-containment.
if x ∈ S
x
⊥ if x (cid:60) S
.
On-the-(cid:30)y approach. In a naive method, one simply com-
putes ❕x in the ordering of x in S (starting from the smallest
x) and see if ❕x = y, which we stop and output x. If no such
x exists in S, output ⊥. More sophisticated methods can be
found, such as the Pollard’s kangaroo method [49].
Table look-up approach. In a basic table look-up approach,
one pre-compute a look-up table T = {(❕x , x) | x ∈ S} (or
also called hash table). To compute log❕,S(y), one searches to
see if there exists a pair (y, x) ∈ T (that is, a pair of which the
(cid:27)rst index is y). If yes, output x, otherwise output ⊥. Note
that elements in T are normally pre-sorted to accommodate
fast search.
If we consider the case where S is an interval, say S = [0, m−
1], then there exists an extended approach that reduces the
table size to |S|/b, where b is an adjustable parameter. Let
d = |S|/b = m/b. The pre-computed table is T = {(❕x , x) |
x ∈ [0, d − 1]}. To compute log❕,S(y), one searches to see if
there exists a pair (y❕−i·d , x) ∈ T , for i ∈ [0, b − 1]. If yes,
output x + i · d, otherwise output ⊥.
In our scheme, we will compute small-space discrete logarithms
with a base ❕1 in G1 and a base z1 = e(❕1, ❕2) in GT.
We remark that computing discrete logarithms via table look-up
may be susceptible in some degree to side-channel attacks (e.g.,
cache-timing attacks [59–61, 63]). This applies to all the BGN-
type homomorphic encryption schemes [9, 21, 32, 54], including
ours. As a countermeasure, we note that a constant-time low-speed
discrete logarithm algorithm is straight-forward to achieve (and
the constant-time feature enables resistance to cache-timing at-
tacks). However, this would obviously hamper the main goal of
achieving e(cid:28)cient (high-speed) schemes. Analysis on the aspect of
side channel attacks is out of scope of this paper (again, similarly
to [9, 21, 32, 54]) and might be an interesting future research.
3 DEFINITIONS
In this section, we give the syntax and security de(cid:27)nitions for
homomorphic public-key encryption and the special case that we
focus, namely, two-level homomorphic encryption.
3.1 Syntax
Let M be a set that speci(cid:27)es a message space that can be encrypted.
Let P ⊆ M be a set of messages of which decryption to their cipher-
texts can be performed. Let F be a class of functions f : Df → M
such that Df ⊆ M2. A homomorphic public-key encryption (HE)
for (F ,M, P) can be de(cid:27)ned as follows.
ParamGen(1n) → pp: The parameter generation algorithm
ParamGen takes as an input a security parameter 1n and
outputs a public parameter pp.
KeyGen(pp) → (sk, pk): The key generation algorithm
KeyGen takes as an input a public parameter pp and
outputs a pair (sk, pk) of a secret key and a public key.
Enc(pp, pk, m) → c: The encryption algorithm Enc takes as
inputs a public key pk, and a message m ∈ M. It outputs a
ciphertext c.
Session 16: Applied Crypto 2ASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea688Eval(pp, pk, f , c, c(cid:48)) → c(cid:48)(cid:48): The evaluation algorithm Eval
takes as inputs a public key pk, a function f ∈ F , two
ciphertexts c, c(cid:48). It outputs a ciphertext c(cid:48)(cid:48).
Dec(pp, sk, pk, c) → m: The decryption algorithm Dec takes
as inputs a secret key sk, a public key pk, and a ciphertext c.
It outputs a plaintext ˜m ∈ M or a special symbol ⊥.
(cid:40)
Correctness. An HE scheme for (F ,M, P) is said to be cor-
rect if the following holds. Suppose ParamGen(1n) → pp and
KeyGen(pp) → (sk, pk). Then, we have the following.
• (Decryption Correctness). For any m ∈ M, suppose
Enc(pp, pk, m) → c. Then, we have that
m if m ∈ P
⊥ if m (cid:60) P .
Dec(pp, sk, pk, c) =
• (Evaluation Correctness). For any function f : Df → M
in F and for any (m, m(cid:48)) ∈ Df such that f (m, m(cid:48)) ∈ P,
suppose Enc(pp, pk, m) → c and Enc(pp, pk, m(cid:48)) → c(cid:48). Let
Eval(pp, pk, f , c, c(cid:48)) → c(cid:48)(cid:48) and let Dec(pp, sk, pk, c(cid:48)(cid:48)) →
m(cid:48)(cid:48). Then, we have that f (m, m(cid:48)) = m(cid:48)(cid:48).
In what follows, we will often neglect writing the public parameter
pp as an input to algorithms for simplicity.
Remark 1. We de(cid:27)ne two message spaces M and P, allowed for
encryption and for decryption, respectively, since our scheme will
allow to decrypt ciphertexts over polynomial-size message spaces
(so that discrete logarithm can be performed), while encryption will
indeed allow to encrypt any message from the whole space.6 This
is implicit in the lifted ElGamal scheme (and also the BGN and the
Freeman scheme).
De(cid:27)nition for Two-level HE. A two-level homomorphic encryp-
tion is an HE scheme for (F ,M, P) which is de(cid:27)ned as follows.
The message space has the form M = L × M where L := {1, 2}
speci(cid:27)es a level, while M is a permitted message space which is a
ring with operations (+,·). Let M1 (cid:66) {1} × M and M2 (cid:66) {2} × M.
We de(cid:27)ne the function class F = {Add1, Add2, Mult} where
Add1 : M2
1 → M2,
each maps
1 → M1, Add2 : M2
2 → M2, Mult : M2
(cid:0) (1, m),(1, m
(cid:0) (2, m),(2, m
(cid:0) (1, m),(1, m
(cid:48))(cid:1) (cid:55)→ (1, m + m
(cid:48))(cid:1) (cid:55)→ (2, m + m
(cid:48))(cid:1) (cid:55)→ (2, m · m
(cid:48)),