    {
      var retList = new List();
      while (fileStream.Peek() > 0)
      {
        string[] dataLine = fileStream.ReadLine().Split(', ').Trim().ToArray();
        dynamic dynamicEntity = new ExpandoObject();
        for(int i=0; i)dynamicEntity).Add(headerLine[i], dataLin
e[i]);
        }
        retList.Add(dynamicEntity);
      }
      return retList;
    }
有了字段名和数据元素的字符串数组后，创建一个新的ExpandoObject，在其中添加
数据。注意，代码中将ExpandoObject强制转换为Dictionary对象。用字段名作为键，数据
作为值。然后，把这个新对象添加到所创建的retList对象中，返回给调用该方法的代码。
这样做的好处是有了一段可以处理传递给它的任何数据的代码。这里唯一的要求是确
保第一行是字段名，并且所有的值是用逗号分隔的。可以把这个概念扩展到其他文件类
型，甚至DataReader。
使用这个CSV文件内容和下载的示例代码：
    FirstName, LastName, City, State
    Niki, Lauda, Vienna, Austria
    Carlos, Reutemann, Santa Fe, Argentine
    Sebastian, Vettel, Thurgovia, Switzerland
以及Main方法，读取示例文件EmployeeList.txt（代码文件
DynamicSamples/DynamicFileReader/Program.cs）：
    static void Main()
    {
      var helper = new DynamicFileHelper();
      var employeeList = helper.ParseFile("EmployeeList.txt");
      foreach (var employee in employeeList)
      {
        WriteLine($"{employee.FirstName} {employee.LastName} lives in " +
          $"{employee.City}, {employee.State}.");
      }
      ReadLine();
    }
把如下结果输出到控制台：
    Niki Lauda lives in Vienna, Austria.
    Carlos Reutemann lives in Santa Fe, Argentine.
    Sebastian Vettel lives in Thurgovia, Switzerland.
16.9 小结
本章介绍了Type和Assembly类，它们是访问反射所提供的扩展功能的主要入口点。
另外，本章还探讨了反射的一个常用方面：自定义特性，它比其他方面更常用。介绍
了如何定义和应用自己的自定义特性，以及如何在运行期间检索自定义特性的信息。
本章的第二部分介绍了dynamic类型。通过使用ExpandoObject代替多个对象，代码量
会显著减少。另外，通过使用DLR及添加Python或Ruby等脚本语言，可以创建多态性更好
的应用程序，改变它们十分简单，并且不需要重新编译。
下一章详细讨论Visual Studio 2015的许多功能。
第Ⅱ部分
.NET Core与Windows Runtime
  第17章 Visual Studio 2015
  第18章 .NET编译器平台
  第19章 测试
  第20章 诊断和Application Insights
  第21章 任务和并行编程
  第22章 任务同步
  第23章 文件和流
  第24章 安全性
  第25章 网络
  第26章 Composition
  第27章 XML和JSON
  第28章 本地化
第17章
Visual Studio 2015
本章要点
● 使用Visual Studio 2015
● 创建和使用项目
● 调试
● 用Visual Studio进行重构
● 用不同技术进行工作（WPF、WCF等）
● 构架工具
● 分析应用程序
本章源代码下载地址（wrox.com）：
本章没有可供下载的代码。
17.1 使用Visual Studio 2015
到目前为止，你应该已经对C#语言比较熟悉，并准备开始学习本书的应用部分。在
这些章节中会介绍如何使用C#编写各种应用程序。但在学习之前，需要理解如何使用
Visual Studio和.NET环境提供的一些功能使程序达到最佳效果。
本章讲解在实际工作中，如何在.NET环境中编程。介绍主要的开发环境Visual
Studio，该环境用于编写、编译、调试和优化C#程序，并且为编写优秀的应用程序提供指
导。Visual 
Studio是主要的IDE，用于多种目的，包括编写ASP.NET应用程序、Windows
Presentation Foundation （WPF）应用程序、用于Universal Windows Platform （UWP）的
应用程序、访问ASP.NET Web API创建的服务或使用ASP.NET MVC编写的Web应用程
序。
本章还探讨如何构建目标框架为.NET Core 1.0和.NET Framework 4.6的应用程序。
Visual Studio 2015是一个全面集成的开发环境。编写、调试、编译代码以生成一个程
序集的整个过程被设计得尽可能容易。这意味着Visual Studio是一个非常全面的多文档界
面应用程序，在该环境中可以完成所有代码开发的相关事情。它具有以下特性：
● 
文本编辑器 
 使用这个编辑器，可以编写C#（还有Visual 
Basic、C++、F#、
JavaScript、XAML、JSON以及SQL）代码。这个文本编辑器是非常先进的。例
如，当用户输入时，它会用缩进代码行自动布局代码，匹配代码块的开始和结束
括号，以及使用颜色编码关键字。它还会在用户输入时检查语法，并用下划线标
识导致编译错误的代码，这也称为设计时的调试。另外，它具有IntelliSense功
能，当开始输入时它会自动显示类、字段或方法的名称。开始输入方法参数时，
它也会显示可用重载的参数列表。图17-1用UWP应用程序展示了IntelliSense功
能。
图17-1
  注意： 如果需要IntelliSense的列表框，或者因为其他原因该列表框不见了，
可以按下Ctrl+Space组合键找回该列表框。如果希望看到IntelliSense框下面的代码，可
以按住Ctrl按钮。
● 设计视图编辑器  这个编辑器允许在项目中放置用户界面控件和数据绑定控件；
Visual 
Studio会在项目中自动将必需的C#代码添加到源文件中，来实例化这些控
件（这是可能的，因为所有.NET控件都是具体基类的实例）。
● 
支持窗口 
 这些窗口允许查看和修改项目的各个方面，例如源代码中的类、
Windows Forms和Web Forms类的可用属性（以及它们的启动值）。也可以使用这
些窗口来指定编译选项，例如代码需要引用的程序集。
● 
集成的调试器 
 从编程的本质上讲，第一次试运行时，代码可能会无法正常运
行。可能第二次或者第三次都无法正常运行。Visual Studio无缝地链接到一个调试
器中，允许设置断点，监视集成环境中的变量。
● 集成的MSDN帮助 Visual Studio允许在IDE中访问MSDN文档。例如，如果使用文
本编辑器时不太确定一个关键字的含义，只需要选择该关键字并按F1键，Visual
Studio将会访问MDSN并展示相关主题。同样，如果不确定某个编译错误是什么意
思，可以选择错误消息并按F1键，调出MSDN文档，查看该错误的演示。
● 访问其他程序 Visual Studio也可以访问一些其他实用程序，在不退出集成开发环境
的情况下，就可以检查和修改计算机或网络的相关方面。可以用这些实用工具来
检查运行的服务和数据库连接，直接查看SQL 
Server表，浏览Microsoft 
Azure
Cloud服务，甚至用一个Internet Explorer窗口来浏览Web。
● Visual Studio扩展 Visual Studio的一些扩展已经在Visual Studio的正常安装过程中安
装好了，Microsoft和第三方还提供了更多的扩展。这些扩展允许分析代码，提供
项目或项模板，访问其他服务等。使用.NET编译器平台，与Visual 
Studio工具的
集成会更简单。
Visual Studio的最新版本有一些有趣的改进。一个主要部分是用户界面，另一个主要
部分是后台功能和.NET编译器平台。
对于用户界面，Visual 
Studio 
2010基于WPF重新设计了外壳，而不是基于原生的
Windows控件。Visual Studio 2012的界面在此基础上又有了一些变化，尤其是用户界面更
关注主要工作区——编辑器，允许直接在代码编辑器中完成更多的工作，而无须使用许多
其他工具。当然，还需要代码编辑器之外的一些工具，但更多的功能内置于几个工具中，
所以减少了通常需要的工具数量。在Visual 
Studio 
2015中，改进了一些UI功能。例如
NuGet包管理器不再是模式对话框。在包管理器的最新版本中，包管理器加载服务器中的
信息时，可以继续执行其他任务。
有了.NET编译器平台（代码名称是Roslyn）, .NET编译器完全重写了，它现在集成了
编译器管道的功能，例如语法分析、语义分析、绑定和代码输出。Microsoft基于此重写了
许多Visual Studio集成工具。代码编辑器、智能感知和重构都基于.NET编译器平台。
  注意： 第18章介绍了可以用于.NET编译器平台的API。
对于XAML代码编辑，Visual Studio 2010和Expression Blend 4（现在称为Blend for
Visual Studio 2015）使用了不同的编辑器引擎。在Visual Studio 2013时，两个团队就已经
合并，尽管UI中提供的功能有点区别，但Visual Studio和Blend for Visual Studio的代码引
擎是一样的。Visual Studio 2013从Blend获得了XAML引擎，现在对于Blend for Visual
Studio 2015, Blend获得了Visual Studio的外壳。启动Blend for Visual Studio 2015，会看到它
类似于Visual Studio，可以立即开始使用它。
Visual Studio的另一项改进是搜索。Visual Studio有许多命令和功能，常常很难找到需
要的菜单或工具栏按钮。只要在Quick Launch中输入所需命令的一部分，就可以看到可用
的选项。Quick 
Launch位于窗口的右上角（见图17-2）。搜索功能还可以从其他地方找
到，如工具栏、解决方案资源管理器、代码编辑器（可以按Ctrl+F组合键来调用）以及引
用管理器上的程序集等。
图17-2
17.1.1 Visual Studio的版本
Visual Studio 2015提供了多个版本。最便宜的是Visual Studio 2015 Express版，这个版
本在某些情况下是免费的！它对个人开发者、开源项目、学术研究、教育和小型专业团队
是免费的。
可供购买的是Professional和Enterprise版。只有Enterprise版包含所有功能。Enterprise
版独享的功能有IntelliTrace（智能跟踪）、负载测试和一些架构工具。微软的Fakes框架
（隔离单元测试）只能用于Visual Studio Enterprise版。本章介绍Visual Studio 2015包含的
一些功能，这些功能仅适用于特定版本。有关Visual Studio 2015各个版本中功能的详细信
息，请参考http://www.microsoft.com/visualstudio/en-us/products/compare。
17.1.2 Visual Studio设置
当第一次运行Visual 
Studio时，需要选择一个符合环境的设置集，例如General
Development、Visual Basic、Visual C#、Visual C++或Web Development。这些不同的设置
反映了过去用于这些语言的不同工具。在微软平台上编写应用程序时，可以使用不同的工
具来创建Visual Basic、C++和Web应用程序。同样，Visual Basic、Visual C++和Visual
InterDev具有完全不同的编程环境、设置和工具选项。现在，可以使用Visual 
Studio为所
有这些技术创建应用程序，但Visual Studio仍然提供了快捷键，可以根据Visual Basic、
Visual C++和Visual InterDev选择。当然，也可以选择特定的C#设置。
在选择了设置的主类别，确定了键盘快捷键、菜单和工具窗口的位置后，就可以通过
Tools |Customize… （工具栏和命令）和Tools | Options…（在此可以找到所有工具的设
置），来改变每个设置。也可以重置设置集，方法是使用Tools 
| 
Import 
and 
Export
Settings，调用一个向导，来选择一个新的默认设置集（如图17-3所示）。
图17-3
接下来的小节贯穿一个项目的创建、编码和调试过程，展示Visual Studio在各个阶段
能够帮助完成什么工作。
17.2 创建项目
安装Visual Studio 2015之后，会希望开始自己的第一个项目。使用Visual Studio，很
少会启动一个空白文件，然后添加C#代码。但在本书前面的章节中，一直是按这种方式
做的（当然，如果真的想从头开始编写代码，或者打算创建一个包含多个项目的解决方
案，则可以选择一个空白解决方案的项目模板）。
在此，告诉Visual Studio想创建什么类型的项目，它会生成文件和C#代码，为该类型
的项目提供一个框架。之后在这个基础上继续添加代码即可。例如，如果想创建一个
Windows桌面应用程序（一个WPF应用程序）, Visual Studio将生成一个XAML文件和一个
包含C#源代码的文件，它创建了一个基本的窗体。这个窗体能够与Windows通信和接收事
件。它能够最大化、最小化或调整大小；用户需要做的仅是添加控件和想要的功能。如果
应用程序是一个命令行实用程序（一个控制台应用程序）, Visual Studio将提供一个基本的
名称空间、一个类和一个Main方法，用户可以从这里开始。
最后一点也很重要：在创建项目时，Visual Studio会根据项目是编译为命令行应用程
序、库还是WPF应用程序，为C#编译器设置编译选项。它还会告诉编译器，应用程序需
要引用哪些基类库和NuGet包。例如，WPF GUI应用程序需要引用许多与WPF相关的库，
控制台应用程序则不需要引用这些库。当然，在编辑代码的过程中，可以根据需要修改这
些设置。
第一次启动Visual 
Studio时，IDE会包含一些菜单、一个工具栏以及一个包含入门信
息、操作方法视频和最新新闻的页面，如图17-4所示。起始页包含指向有用网站和一些实
际文章的链接，可以打开现有项目或者新建项目。
图17-4
图17-4是使用Visual Studio 2015后显示的起始页，其中包含最近编辑过的项目列表。
单击其中的某个项目可以打开该项目。
17.2.1 面向多个版本的.NET Framework
Visual Studio 2015允许设置想用于工作的.NET Framework版本。当打开New Project对
话框时，如图17-5所示，对话框顶部的一个下拉列表显示了可用的选项。
图17-5
在这种情况下，该下拉列表允许设置的.NET 
Framework版本有2.0、3.0、3.5、4.0、
4.5、4.5.1、4.5.2、4.6和4.6.1。也可以通过单击More 
Frameworks链接来安装.NET
Framework的其他版本。该链接打开一个网站，从这个网站中可以下载.NET Framework的
其他版本，例如2.0+3.5 SP1，也可以下载用于服务的框架（Microsoft Azure, OneDrive）和
设备（Xamarin）。
如果想改变解决方案正在使用的框架版本，右击项目并选择该解决方案的属性。如果
正在处理一个WPF项目，将会看到如图17-6所示的对话框。
图17-6
在此对话框中，Application选项卡允许改变应用程序正在使用的框架版本。
17.2.2 选择项目类型
要新建一个项目，从Visual Studio菜单中选择File | New Project。New Project对话框如
图17-7所示，通过该对话框可以大致了解能够创建的不同项目。
图17-7
使用这个对话框，可以有效地选择希望Visual Studio生成的初始框架文件和代码、希
望Visual Studio生成的代码、要用于创建项目的编程语言以及应用程序的不同类别。
表17-1描述了在Visual C#项目中可用的所有选项。
表17-1
项目模板名称
项目模板描述
Windows Forms应用程序
一个对事件做出响应的空白窗体。Windows Forms包装原生
的Windows控件，并使用基于像素的图形和GDI+
WPF应用程序
一个对事件做出响应的空白窗体。与Windows Forms应用程
序的项目模板很相似，但是该WPF应用程序的项目模板允
许使用矢量图形和样式创建基于XAML的智能客户端解决方
案
控制台应用程序
在命令行提示符或控制台窗口中运行的应用程序。这个控制
台应用程序使用MSBuild环境编译应用程序。在Web类别中
包含用于.NET Core 1.0的控制台应用程序
共享的项目
这个项目没有创建自己的二进制文件，但可以使用其他项目
的源代码。与库相反，源代码在使用它的每个项目中编译。
可以使用预处理器语句，根据用共享项目的项目，来区分源
代码中的不同
类库
可被其他代码调用的.NET类库
可移植类库
可由不同技术使用的类库，例如WPF、Universal Windows
Platform应用、Xamarin应用等
WPF浏览器应用程序
与WPF Windows应用程序很相似，这种变体允许针对浏览
器创建一个基于XAML的应用程序。但它只在Internet
Explorer中运行，不能在Microsoft Edge中运行。如今，应该
考虑使用不同技术实现这一点，例如具备ClickOnce的WPF
应用程序或者HTML5
空项目
只包含一个应用程序配置文件和一个控制台应用程序设置的
空项目
Windows Service
自动随Windows一起启动并以特权本地系统账户身份执行操
作的Windows Service项目
WPF自定义控件库
在WPF应用程序中使用的自定义控件
WPF用户控件库
使用WPF构建的用户控件库
Windows Forms控件库
创建在Windows Forms应用程序中使用的控件的项目
1．使用Windows传统桌面项目模板
表17-1列出了Windows类别中所有的项目模板。