title:Prospect: peripheral proxying supported embedded code testing
author:Markus Kammerstetter and
Christian Platzer and
Wolfgang Kastner
PROSPECT
Peripheral Proxying Supported Embedded Code Testing
Markus Kammerstetter
Vienna University of
Technology
PI:EMAIL
Christian Platzer
Vienna University of
Technology
PI:EMAIL
Wolfgang Kastner
Vienna University of
Technology
PI:EMAIL
ABSTRACT
Embedded systems are an integral part of almost every elec-
tronic product today. From consumer electronics to indus-
trial components in SCADA systems, their possible ﬁelds of
application are manifold. While especially in industrial and
critical infrastructures the security requirements are high,
recent publications have shown that embedded systems do
not cope well with this demand. One of the reasons is that
embedded systems are being less scrutinized as embedded
security analysis is considered to be more time consuming
and challenging in comparison to PC systems. One of the
key challenges on proprietary, resource constrained embed-
ded devices is dynamic code analysis. The devices typically
do not have the capabilities for a full-scale dynamic secu-
rity evaluation. Likewise, the analyst cannot execute the
software implementation inside a virtual machine due to the
missing peripheral hardware that is required by the software
to run.
In this paper, we present PROSPECT, a system
that can overcome these shortcomings and enables dynamic
code analysis of embedded binary code inside arbitrary anal-
ysis environments. By transparently forwarding peripheral
hardware accesses from the original host system into a vir-
tual machine, PROSPECT allows security analysts to run
the embedded software implementation without the need to
know which and how embedded peripheral hardware compo-
nents are accessed. We evaluated PROSPECT with respect
to the performance impact and conducted a case study by
doing a full-scale security audit of a widely used commercial
ﬁre alarm system in the building automation domain. Our
results show that PROSPECT is both practical and usable
for real-world application.
Categories and Subject Descriptors
D.2.5 [Testing and Debugging]: Debugging aids; D.4.7
[Organization and Design]: Real-time systems and em-
bedded systems; C.2.0 [General]: Security and protection
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS’14, June 4–6, 2014, Kyoto, Japan.
Copyright 2014 ACM 978-1-4503-2800-5/14/06 ...$15.00.
http://dx.doi.org/10.1145/2590296.2590301.
Keywords
embedded system, security, device tunneling, dynamic anal-
ysis, fuzz testing
1.
INTRODUCTION
Embedded systems are omnipresent in today’s world. From
small digital clocks over home appliances such as washing
machines and multimedia devices to medical appliances or
smart phones, embedded technology provides tremendous
advantages compared to general purpose systems. One key
aspect is the possibility to create tailored hardware devices
to fulﬁll a very speciﬁc task. With exactly the right amount
of memory, processing power and interfaces, embedded de-
vices are cheaper, smaller and faster than their general-
purpose computing counterparts. However, a good amount
of embedded devices are aimed at functionality rather than
security. In fact, recent publications have shown that the se-
curity of embedded devices is especially bad [23, 8, 10, 14].
One reason is, that security audits on embedded devices
are considered to be far more challenging and time consum-
ing than on general purpose PC systems. Considering the
common case in which the security analyst has no access to
the source code of the system under test, there is a broad
gap between state-of-the-art security analysis techniques for
PCs and for embedded systems. Liu et al. [11] and Austin
et al.
[1] give an overview of the wide area of vulnerabil-
ity discovery techniques that are available for PC systems.
The techniques range from sophisticated static analysis tech-
niques over dynamic analysis and fuzz testing to advanced
dynamic taint analysis and symbolic or concolic execution
[16, 4]. However, for embedded systems, the situation is
diﬀerent. Mainly due to custom proprietary hardware, un-
documented peripherals and strict system limitations, the
prevalent vulnerability discovery techniques are still based
on static analysis [9, 3, 22].
At the same time, using the wide range of dynamic analy-
sis or taint analysis and symbolic execution tools is in general
not possible due to the limitations of the embedded system
under test. One solution would be to take the investigated
application from its original context and run it in a virtual
machine that provides the necessary resources and facilities
for a full dynamic evaluation. To emulate the embedded de-
vice, however, the connected peripheral hardware needs to
be available from within the virtual machine as well. The
usual way is to emulate the peripheral hardware. Yet, for
proprietary hardware this is not possible due to the following
reasons. First, the analyst would need comprehensive infor-
mation on how all peripheral hardware devices work in order
329to emulate the hardware behavior in software. Since periph-
eral hardware is likely to be proprietary, this information is
not available and, subsequently, the analyst can not emulate
the hardware. Second, even if the information is available to
the analyst, adding full support for new peripheral hardware
components to a virtual machine implementation is not an
easy task. It is likely that the implementation would take
the analyst a tremendous amount of time that renders the
whole dynamic security analysis infeasible.
To amend this problem, we take a diﬀerent approach and
introduce PROSPECT, a proxy capable of tunneling arbi-
trary peripheral hardware accesses from within a virtual ma-
chine to the embedded system under test. The result is
a virtualized execution environment for embedded software
implementations with a completely transparent connection
to the actual peripheral hardware components of the sys-
tem under test. PROSPECT thus enables the analyst to
leverage any powerful dynamic analysis techniques of her
choice to discover vulnerabilities on embedded devices with
minimal eﬀort. We developed and continuously improved
PROSPECT over a duration of more than 10 months dur-
ing which our system evolved.
In addition, we conducted
a case study to prove the eﬀectiveness of PROSPECT and
used the system to undertake a full scale security analysis of
a widely used proprietary ﬁre alarm system in the building
automation domain. Summing up, the contributions pre-
sented in this paper are as follows:
• We introduce PROSPECT, a transparent proxy for
tunneling peripheral hardware accesses from within a
virtual analysis environment to the embedded system
under test. Our system can overcome prevalent anal-
ysis limitations by enabling dynamic instrumentation
inside arbitrary analysis environments.
• We provide a MIPS based proof-of-concept implemen-
tation that has continuously evolved over a duration
of more than 10 months.
• We evaluate and discuss our approach with a detailed
analysis of the system’s performance and usability.
• We utilized PROSPECT to conduct a case study by
running a full-scale security audit of a widely used
commercial ﬁre alarm system in the building automa-
tion domain showing that PROSPECT is both practi-
cal and usable for real-world application.
2. CHALLENGES IN EMBEDDED
SECURITY ANALYSIS
Assuming that the reader is familiar with the general ﬁeld
of information security, in this chapter, we brieﬂy outline bi-
nary code analysis and highlight fuzz testing as exemplary,
widely established techniques to discover software vulner-
abilities. We point out, that dynamic analysis is one of
the key requirements for eﬃcient fuzz testing as well as for
manual in-depth analysis approaches usually done as soon
as fuzz testing discovers a potential security vulnerability.
After presenting dynamic analysis techniques for PC sys-
tems, we continue by providing a general overview of how
typical medium to large scale embedded systems are made
up and why the presented dynamic analysis approaches are
frequently not applicable to embedded systems. Besides,
the chapter shows why the approach PROSPECT takes is
promising as it can overcome the described challenges and
enable dynamic analysis in general, regardless of the analysis
limitations on the system under test.
2.1 Binary Code Analysis
Vendors are typically proﬁt-driven and try to push their
newest software products to market as soon as possible. De-
pending on their eﬀorts to avoid software vulnerabilities, a
released software implementation may contain numerous se-
curity ﬂaws such as stack smashing or use-after-free vulner-
abilities [17]. At that point, an arms race between attackers
and the vendor begins. Attackers try to exploit the vul-
nerabilities for their own ill-gotten gain such as industrial
espionage, spreading malware or setting up botnets [20, 7]
while vendors try to patch newly discovered bugs.
For proprietary software implementations, the source code
is usually not available. Thus, in order to discover vulnera-
bilities in these implementations, security analysts need to
rely on techniques that can be applied to binary code. In a
recent survey [11], Liu et al. describe a number of common
techniques to discover software vulnerabilities. While ana-
lysts can resort to static analysis that does not require the
execution of the program under test, static analysis suﬀers
from a number of drawbacks hindering penetration tests.
For instance, object orientated code makes frequent use of
function pointers that are hard to resolve, if the program is
not being executed. With dynamic analysis, the program is
being executed and the analyst can trace and instrument the
current execution path of the program under test. However,
unless advanced techniques such as multipath exploration
[13] are employed, the analyst needs to generate diﬀerent
program inputs to analyze diﬀerent execution paths.
2.2 Fuzz Testing: A Common Technique to
discover Software Vulnerabilities
Generating diﬀerent program inputs to reach diﬀerent ex-
ecution paths is also one of the key ideas of fuzz testing, a
widely established technique to discover software vulnera-
bilities [11, 5, 2]. With fuzz testing, input data to the pro-
gram are generated automatically either at random or by
mutating previously obtained program input. At the same
time, the analyst can employ dynamic analysis to monitor
the program execution and detect program anomalies such
as crashes, illicit memory accesses or endless loops causing
high CPU utilization. If an anomaly is detected, the gen-
erated input data are likely to have caused the abnormal
behavior. This is a starting point for a more thorough man-
ual program analysis, usually also within a dynamic analysis
environment.
Practical results [11, 17, 5, 2] have shown that fuzzing is
both a viable and established technique to discover software
vulnerabilities. However, since fuzzers can be highly ap-
plication speciﬁc, it might be necessary to implement new
fuzzing tools for each penetration test. Also, we would like
to stress that although fuzz testing is widely used, it is not
the only technique to discovery software vulnerabilities eﬃ-
ciently. One key observation at this point is that dynamic
instrumentation is required for both eﬃcient fuzz testing and
the manual analysis that is usually done after the fuzzer dis-
covers a potential security vulnerability.
3302.3 Dynamic Code Analysis on PC Systems
In general, a PC system can be divided into hardware,
an operating system (including kernel and drivers) and soft-
ware applications. The analyst has the freedom to dynam-
ically instrument any of these layers. The easiest way to
instrument a program is to debug it with a state-of-the-art-
debugger such as gdb or Ida Pro. The drawback here is that
the program can easily detect that it is being instrumented
and behave diﬀerently. For instance, the program might just
exit instead of performing its usual functionality. On the
next level, the analyst can instrument the operating system
to analyze the program’s behavior. For instance, CWSand-
box [24] uses this approach by hooking the operating system
libraries. This allows the analyst to trace the behavior of the
application, but at the same time hinders typical techniques
for debugging (e.g. single stepping through code). On the
lowest level, the analyst can instrument the hardware us-
ing Virtual Machine Introspection (VMI) [6], which makes
it hard for the investigated software to detect that it is being
analyzed. Although the target of the analysis is the appli-
cation itself, the downside of this approach is the need to
analyze the surrounding operating system as well. There-
fore, the necessary eﬀort is higher than applying a regular
debugging technique.
2.4 A typical Embedded System
Embedded systems can be divided into small, medium and
large scale embedded systems [19, 14]. Depending on their
size, their system conﬁguration can diﬀer tremendously.
Small scale embedded systems such as electronic toys, dig-
ital clocks or pocket calculators are built around strongly
resource constrained microcontrollers. Typically, there is no
operating system and the ﬁrmware of these systems com-
prises a single program that is contained in an on-chip Flash
memory.
In contrast, medium and large scale embedded
systems such as smart phones, wireless routers or ﬁeld level
components of SCADA systems are based on more power-
ful controllers. Typically, they run a customized operating
system (e.g. Linux) and the product-speciﬁc implementa-
tion of an embedded product often comprises custom kernel
code, drivers and several applications. At the heart of these
systems commonly lies a powerful System-On-Chip (SoC)
controller that includes a CPU, ROM, SRAM and a number
of internal peripherals and I/O controllers.
Figure 1: A Typical Medium to Large Scale Embed-
ded System
A typical separation of components is shown in Figure 1.
Upon power-up, the CPU in the SoC controller will execute
the ﬁrst-stage bootloader code contained in internal ROM
and perform low-level initializations. After that, the SoC
can access external memories (such as Flash and SDRAM)
to boot into a second-stage bootloader and, consequently,
into the operating system (OS) kernel. At that point, the
OS can load a number of additional drivers to support exter-
nal peripherals and then start the product speciﬁc processes.
While the general operation of embedded systems is simi-
lar to PC systems, it is the external peripherals that make
embedded systems so special. External peripherals are typ-
ically customly designed by the system manufacturers rang-
ing from product speciﬁc sensors and actuators to custom
communication interfaces. Taking modern smart phones as
an example, such external peripherals could be charging con-
trols, wireless radios, GPS receivers, magnetic or accelera-
tions sensors, driving circuits for the vibrating alert, speech
compression DSPs and many more. These external peripher-
als are what actually transforms an oﬀ-the-shelf SoC system
into a valuable everyday product.
2.5 Challenges of Dynamic Code Analysis on
Embedded Systems
In contrast to PC systems, employing dynamic analysis
techniques on embedded systems can be more challenging.
Typically, embedded devices are resource constrained, ac-
cess to the ﬁle system is limited and the kernel’s functional-
ity and tools available on the device are just a minimal set of
functions necessary for the product to operate properly [14].
The main reason for these constraints is that including ad-
ditional functionality on the embedded systems would result
in increased embedded resource requirements and ultimately
in higher manufacturing costs. From this perspective, the
presented analysis approaches for PC systems are hard to
apply to their embedded counterparts:
1. Using a debugger to instrument the program is only
feasible if the OS kernel includes debugging support
(e.g. through ptrace() in the case of Linux). Running
a state-of-the-art debugger on the system might not be
possible due to resource constraints (e.g.
in terms of
memory consumption) or due to missing support (e.g
on legacy systems or on systems where ptrace() sup-
port was not compiled into the kernel to save memory
space).
2. Instrumenting the operating system would require ker-
nel modiﬁcations or loading custom kernel modules.
Embedded systems often run customized minimal ker-
nel conﬁgurations to keep resource consumption and
boot-up delays low. As a result, instrumenting the
operating system might not be feasible.
3. Instrumenting the hardware would require not only
virtualization of the system architecture, but also of
all the necessary peripheral devices. However, as pe-
ripheral devices and their drivers are often proprietary,
the information required to emulate them might not be
publicly available. Besides, writing emulation code for
all peripheral hardware devices would cause a tremen-
dous overhead, considering that the analyst’s goal is
dynamic code analysis of only a small set of programs.
These challenges show that while on PC systems there is
a wide range of established and well working vulnerability
discovery techniques, the situation is diﬀerent on embedded
systems. In theory, all of those techniques could be applied
to embedded systems as well. However, practically, embed-
ded systems frequently lack support for these techniques and
CPUROMSRAMI/O ControllerI/O ControllerI/O ControllerDRAMFlashSoCMemoryPeripherals331thus make it much harder to discover software vulnera-
bilities. We believe that this is also the reason, why static
analysis techniques are still so prevalent for those systems.
3. PERIPHERAL DEVICE FORWARDING
included character device drivers in three diﬀerent Linux
kernel versions (Linux-2.4.20, Linux-2.6.38.1 and Linux-3.4.4)
by analyzing the source code of all available drivers (514 ﬁles