ent resides, instead of the recipient’s identity. Appendix A
brieﬂy discusses the deployment of anonymous ﬁle sharing.
The proposed protocol also supports the dynamic change of
anonymous transmission rate. Please refer to Appendix B
for the detail.
4.4 Key Chain Update
A node needs to update its key chain assigned to another
node (or itself) and inform all other nodes about the key
chain update, once the old key chain runs out. Such a key
chain update should be anonymous, i.e., without disclosing
the node’s identity. A simple solution is that the node re-
quests the local ring to start a new session. However, it is
not a good solution as it breaks down other nodes’ normal
communication. We introduce an alterative solution that
allows a node to update its key chains without interrupt-
ing others’ communication or compromising the anonymity.
Figure 4 illustrates this solution where we assume node A
wants to update its key chain assigned to node C.
To update the key chain assigned to node C, in its outgo-
ing message M1, node A sets the ﬂag KF (in the key vector
slot that will be decrypted by node C using its private key)
to one, sets the KF s in the following slots to two, and ﬁlls
the corresponding CK ﬁelds. Once node C receives M2, it
extracts the new key chain commitment CK from the ﬁrst
key vector.
It then broadcasts a new commitment of as-
signed key chains. This commitment contains the current
session ID and batch ID, the value of node’s batch counter,
Figure 4: An illustration of key chain update, where
node A updates key chain assigned to node C and
simultaneously sends data to node E. Rn
XYi denotes
a key-chain key from the new key chain.
the n − 1 key-chain keys decrypted from currently received
message batch, and Rn
AC0 and the last key-chain key in the
old key chain which are specially marked. Node C then
forwards the processed message batch to the next hop, not-
ing that node C cannot successfully modify any forwarded
message as stated previously.
After receiving the broadcast commitment, a node can
verify if the other n − 1 key-chain keys (except the marked
Rn
AC0 ) one-to-one match with the ones in node C’s previ-
ously broadcast key chain commitment, based on the em-
bedded batch counters in these two commitments, the nodes’
positions in the ring, and also its local batch counter. If false,
it means node C is an attacker that maliciously broadcasts
a wrong commitment for assigned key chains. The nodes
revoke node C from the ring and start a new session.
Otherwise, the node buﬀers this newly received commit-
ment, waits for the coming message batch to verify Rn
AC0 ,
and then replaces its buﬀered node C’s (old) commitment
with the new one. That is in the coming message batch,
the KF ﬂag decrypted from the ﬁrst key vector slot of a
message should equal 2, the ID and the key-chain key in the
corresponding CK should equal C and Rn
AC0 respectively.
Otherwise, either the original sender (i.e., node A) set a trap
or node C maliciously broadcasted a wrong commitment, re-
calling it is computationally infeasible to successfully modify
a forwarded message. The node needs to detect and revoke
the adversary from the ring.
Detection of Malicious Key Chain Update: If a node (sup-
pose node F ) ﬁnds the decrypted CK from message M5
does not match with the newly broadcast commitment (ei-
ther wrong ID or wrong key-chain key), while the KF ﬂag is
set to 2, it broadcasts a report that contains M5 and the de-
cryption result of M5’s ﬁrst key vector slot. The other nodes
can verify this report and then start the detection of the ma-
licious sender, i.e., the upstream nodes need to prove they
forwarded messages correctly as presented previously while
52
ABCDEFHGM1= BID|| PKB{B, SID, RF0, KF0, RABi, CK0, N1, K1, MAC1}         || K1{PKC{C, SID, RF0, KF1, RACi, ,  N2, K2, MAC2}}         || K1{K2{PKD{D, SID, RF0, KF2, RADi, , N3, K3,  MAC3}}}        || K1{… K3{PKD{E, SID, RF1, KF2, RAEi, , N4, K4,  MAC4}}}        ||...        || K1{...K7{PKA{A, SID, RF0, KF2, RAAi, , N8, K8, MAC8}}}|| K1{K2{…K4{ Data}...}}M9= BID|| PKB{B, SID, RF0, KF2, RAB(i+1), ,  N9, K9, MAC9}         || K9{PKC{C, SID, RF0, KF0, RAC1, CK0,  N10, K10, MAC10}} ||...        || K9{… K11{PKD{E, SID, RF1, KF0, RAD(i+1), CK0, N12, K12,  MAC12}}}        ||...        || K9{...K15{PKA{A, SID, RF0, KF0, RAA(i+1), CK0, N16, K16, MAC16}}}|| K9{… K12{ Data}...}}nnnnnnM1M9M2M10M3M4M5M6M7M8the decrypted KF s in their received messages are equal to
2. Similarly, if the node ﬁnds no decrypted KF equals 2,
it has to ask its previous hop from which message it should
get the decrypted KF equaling 2, and then it starts the de-
tection of malicious sender. For instance, node F in ﬁgure
4 ﬁnds no decrypted KF equals 2. It sends an inquiry to
previous hop node E. The latter points out message M5,
as the decrypted KF in its received message M4 equals 2.
Node F then broadcasts a report that contains the feedback
from node E and the decrypted result of the ﬁrst key vector
slot of M5, showing the decrypted KF in M5 does not equal
2. The upstream nodes then need to prove they forwarded
the message correctly as presented above.
A node X may ﬁnd the decrypted KF in a received mes-
sage M equals 2 while the corresponding node Y did not
broadcast a updated commitment. In such a scenario, the
attacker can be node Y who refuses to broadcast the new
commitment or the original sender of M who intently sets
a trap, recalling it is computationally infeasible for an ad-
versary to successfully modiﬁed a forwarded message. Node
X starts the detection of attacker by broadcasting a report
that contains M and the decryption result of M ’s ﬁrst key
vector slot. The upstream nodes then have to prove they
forwarded the message correctly. As a result, the nodes in
the ring will catch the attacker.
Lemma 5. The update of key chains does not help an
adversary to identify the sender of a transmitted message,
given the ring has more than one honest nodes and each
honest node independently updates its key chains assigned
to itself and other nodes.
Proof. (Sketch) Suppose there are only two honest nodes
(A and B) in the ring. Node B broadcasts a updated key
chain commitment which is triggered by an honest node.
A polynomial time adversary A receives a data message M
(even if the KF ﬂag in M is set to 2). Let P r{T rigger = A}
denote the probability that this key chain update is triggered
by node A and P r{M = A} denote the probability that A
successfully links M with its sender A. Given node A and
node B independently update their key chains, A will get
P r{T rigger = A} = P r{T rigger = B} = 1/2, as we have
prove A cannot link node A (or node B) with a speciﬁc
key chain with a probability signiﬁcantly better than ran-
dom guessing. Since an (honest) node’s key chain update
is independent from A’ guess of message sender, we can
get P r{M = A} = P r{M = A|T rigger = A} + P r{M =
A|T rigger = B} = 1/2 + 0 = 1/2 (i.e., random guessing).
Similarly, we can prove if there are k honest nodes in the
ring and there are multiple rounds of key chain updates,
the adversary A still cannot link an honest node with a
speciﬁc message or reversely with a probability signiﬁcantly
better than random guessing, given each honest node inde-
pendently updates its key chains.
5. ANALYSIS
5.1 Anonymity
Theorem 1. If a ring has at least k honest nodes, the
proposed protocol provides sender k-anonymity.
Proof. (Sketch) As proved in Lemma 3, a transmitted
message batch contains exactly one message from each node
in the ring, and the one-way key chains secretly assigned
by the nodes prevent an adversary from maliciously modify-
ing/replaying a transmitted message in the received message
batch. Recall that we use semantically secure public key en-
cryption and secret key encryption. Given a node randomly
puts its own message into other n− 1 forwarded messages, if
there are at least other k− 1 honest nodes, an adversary and
the nodes in the local ring (including the local super node
that is selected to forward the node’s message), cannot dis-
tinguish the node’s message from the other k − 1 messages
originated from honest nodes. Within a session, a node is
able to link two messages transmitted in two diﬀerent mes-
sage batches to a same sender, i.e., by using the assigned
one-way key chains. However, the node cannot identify the
sender, as it cannot link an assigned one-way key chain with
a speciﬁc node as proved in Lemma 3. Therefore, a node
cannot distinguish the sender of a message from the other
k − 1 honest nodes, even it accumulates a set of transmit-
ted message batches. Lemma 4 and Lemma 5 further prove
that the adversary cannot identify the sender by observing
message replacements and key chain updates.
Theorem 2. If every ring has at least k honest nodes,
the proposed protocol provides recipient k-anonymity.
Proof. (Sketch) The message is broadcasted locally in
the ring where the recipient resides. All nodes in the ring
receives the message. Since there are at least k honest nodes
in ring, the adversaries cannot distinguish these nodes as the
recipients.
5.1.1 Anonymity Degree k and Ring Size
The value of anonymity degree k is an important parame-
ter in the proposed protocol. In general, k can be any num-
ber between 1 and N , while k equals N means the proposed
protocol provides full anonymity. However, as pointed out in
[5], 2-anonymity would be enough to cast reasonable doubt,
thus invalidating a criminal charge in the United States legal
system, and 3-anonymity would be enough to invalidate a
civil charge in the absence of other evidence. A small value
of k, therefore, is suﬃcient enough.
The minimum ring size ϑ is determined by the anonymity
degree k. It can be 2k
1−β as presented in [5], where β is the
fraction of nodes that are compromised by the adversary.
Each ring thus will have at least k honest nodes with a very
high probability.
5.2 Security
Adversaries may attempt to trace the senders or the re-
cipients by watching traﬃc patterns or message encodings.
Such attacks are referred to as the traﬃc analysis attacks.
A survey on traﬃc analysis attacks can be found in [6] and
[31]. In the proposed protocol, the nodes’ traﬃc patterns are
publicly known, i.e., their messages propagate around the
rings. Since a transmitted message batch contains exactly
one message from each node in the ring and the messages are
re-encrypted hop-by-hop using secret keys extracted from
the messages themselves, adversaries cannot link an honest
node with a speciﬁc message in the message batch or re-
versely, as shown in Lemmas 2 to 5. Therefore, even given
the traﬃc patten and message encoding algorithm publicly
known, adversaries cannot distinguish the sender and the re-
cipient of a transmitted message from the other k− 1 honest
nodes in the local ring.
53
The adversaries may maliciously modify, replay or tag a
transmitted message in order to locate the sender or the
recipient. As shown in Lemma 3, the proposed protocol ef-
fectively prevents these attacks by employing message pre-
authentication and one-way key chains. Also, the data pay-
load of a transmitted message is encrypted using a one-time
secret key. Therefore, even the same data payload is trans-
mitted multiple times, the adversary cannot link them with-
out knowing the encryption keys.
An adversary may drop some forwarding messages. In the
proposed protocol, a message batch contains exactly one
message from each node in the ring. A node knows how
many messages in a message batch it should receive from its
previous hop.
If a node drops some forwarding messages,
it will be immediately identiﬁed by the next hop node. We
notice that the adversary who drops a message batch can
deny the receipt of message batch. To thwart such an at-
tack, the super node can re-organize the ring structure once
the drop of message batch is identiﬁed, i.e., by changing
the nodes’ positions in the ring (e.g., to put the node who
denies receipt of message batch as its next hop). If a sus-
pect has been reported by a fraction of nodes (e.g., over
1/3 nodes, considering the Byzantine fault tolerant method
only allows less than 1/3 malicious nodes in a group) after
the ring re-organizations, this suspect then can be identi-
ﬁed as an attacker. If there is a message board system in
the network, i.e., all nodes sequentially exact (i.e., receive)
the message batches from the board and then put their (for-
warded) message batches back to the board, such a message
dropping can be prevented completely.
As a node’s joining and leaving will interrupt current
anonymous communication in the ring and trigger a new
round of transmission initialization, an adversary may at-
tempt to destroy the proposed protocol by frequently join-
ing and leaving the network. The proposed protocol cannot
prevent such an attack. However, the inﬂuence of the attack
is localized to a ring, and it is relatively easy to identify the
attacker, as the attacker will join in the same ring with high
probability due to the node admission rule.
An adversary that is elected as a super node may refuse
forwarding messages across the rings and thus block the
anonymous communication between the sender and the re-
cipient. It is hardly to detect such an attack if the sender
does not have the capability to monitor all network traﬃc.
The proposed protocol employs multiple super nodes in a
ring to mitigate such an attack. The sender can try another
super node, if it suspects its previous message might not be
forwarded by a super node. Therefore, unless the adversary
compromises all super nodes in the ring, the sender still be
able to communicate with the recipient anonymously. As
the adopted selection mechanism of super node [10] ensures
all nodes have equal chance to be elected, it will be a high
probability of at least one honest super node in the ring.
We notice that a malicious super node may send faulty
ring conﬁguration information to each node to ruin the es-
tablishment of the ring and the anonymous communication.
This attack can be prevented by adopting the Byzantine
method discussed in [34] at a cost of increased communi-
cation overhead and the constrain that less than 1/3 nodes
in a ring can be malicious. Furthermore, a malicious super
node may refuse to accept a new node. The proposed pro-
tocol cannot prevent such an attack. However, as there are
multiple super nodes in a ring, the new node can contact
another super node as discussed previously.
5.3 Efﬁciency
The proposed protocol requires a sender’s message to se-
quently traverse through all nodes in the local ring.
It
thus increases the communication overhead and the average
data latency. Furthermore, the key vector in each transmit-
ted message and the dummy messages transmitted by the
nodes in the ring present another sources of communica-
tion overhead. In terms of message (or bit) complexity, i.e.,
the messages (or bits) transmitted in the network for every
anonymous message (bit) sent, as stated in previous work
[5, 7], the communication overhead of the proposed protocol
is O(n2).
In the proposed protocol, each node has to buﬀer the lat-
est message batch it received, and save n key chain com-
mitments and n key-chain keys.
It also needs to store n
one-way key chains that it assigns to itself and other nodes
in the ring, if it does not want to calculate the key-chain keys
online when sending messages. Jakobsson [19], and Copper-
smith and Jakobsson [13] proposed schemes to improve the
performance of one-way key chain, which requires O(log(L))
storage and O(log(L)) computation to access an element,