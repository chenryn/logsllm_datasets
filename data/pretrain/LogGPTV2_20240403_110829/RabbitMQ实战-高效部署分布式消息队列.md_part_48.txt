A.3边喝咖啡边RPC：用Java实现AMQPRPC
293
public Server Server()[
return this;
public Server init()
throws Exception{
factory.setUsername("rpc_user");
factory.setPassword("rpcme");
connection = factory.newConnection();
channel=connection.createChannel();
channel.exchangeDeclare("rpc","direct");
channel.queueDeclare("ping",false,false,false, null);
consumer=new QueueingConsumer(channel);
channel.basicConsume("ping",false,"ping",consumer);
System.out.println(
"Waiting for RPC calls..."
）；
return this;
public void closeConnection(）{
if（connection!= null）{
try{
connection.close();
catch （Exception ignore）{}
public void serveRequests(）{
while(true){
try{
Delivery delivery= consumer.nextDelivery();
BasicProperties props =delivery.getProperties();
channel.basicAck(delivery.getEnvelope().getDeliveryTag(),
false);
System.out.println(
"Received API call...replying...
）；
channel.basicPublish(
props.getReplyTo(),
null,
getResponse(delivery).getBytes("UTF-8")
}catch （Exception e){
System.out.println(e.toString());
---
## Page 316
294
附录A在Java和.NET上使用Rabbit
private String getResponse(Delivery delivery){
String response = null;
try{
JSONobject jsonobject=new JSoNobject(message);
response ="Pong!"+jsonobject.getString("time");
catch （Exception e){
System.out.println(e.toString());
response = "";
return response;
public static void main(String[] args){
Server server=null;
try{
server = new Server();
server.init().serveRequests();
}catch(Exception e）{
e.printStackTrace();
}finally{
if(server != null）{
server.closeConnection();
现在你已经完全实现了服务器端，让我们通过下列命令来编译它：
$javac -cp./lib/rabbitmq-client.jar:./lib/json-20090211.jar
Server.java
该命令会创建Server.class文件：
$ ls Server.class
Server.class
A.3.4创建RPC客户端
让我们继续开始编码客户端吧。创建一个名为Client.java的文件，并往里面添
加代码。像往常一样，完整的源代码会在本节的最后部分给出。首先需要加人的代
码是下列import列表：
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.Connection;
---
## Page 317
A.3边喝咖啡边RPC：用Java实现AMQPRPC
295
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.QueueingConsumer;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.BasicProperties;
import org.json.JsONStringer;
import org.json.JSoNException;
和之前的服务器代码唯一的不同之处在于需要导入JISON库。因为在客户端你
需要创建JSON对象，所以你将导人JSONStringer对象，以便能够以OOP的方
式创建JSON字符串。JSONException是必需的，因为当你将JSON对象转换为字
符串时，可能会抛出异常。下面是类中的init方法。
清单A.10客户端init方法
public Client init()
throws Exception{
ConnectionFactory factory = new ConnectionFactory();
factory.setUsername("rpc_user");
factory.setPassword("rpcme");
connection = factory.newConnection();
channel = connection.createChannel();
return this;
这里的代码和服务器端的代码很像。你创建了ConnectionFactory对象，然
后设置了用户名和密码。你获取了connection实例，并得到信道对象。你将信道
和连接对象作为类的成员变量。在获取连接之后，你需要设置消费者。
清单A.11客户端消费者设置
public Client setupConsumer()
throws Exception {
replyQueueName =channel.queueDeclare().getQueue();
consumer =new QueueingConsumer(channel);
channel.basicConsume(replyQueueName,false,consumer);
return this;
该方法的重点在于你声明了一个匿名队列，让RabbitMQ为你生成一个队列名。
你将队列名存放在成员变量replyQueueName 中。之后，该变量将用于reply_to
的消息属性。
---
## Page 318
296
附录A在Java和.NET上使用Rabbit
清单A.12发送RPC请求
String response = null;
channel.basicPublish(
<①发送RPC请求
"rpc"，
"ping",
getRequestProperties(),
②添加请求属性
message.getBytes()
)
System.out.println("Sent 'ping' RPC call. Waiting for reply...");
while（true){
<-3等待RPC回应
Delivery delivery = consumer.nextDelivery();
response = new String(delivery.getBody(),"UTF-8");
break;
1
return response;
ca11方法接收一个字符串作为参数，用作发送给服务器的消息载荷。你用字符串
ping作为路由键，将消息发布到rpc交换器上O。通过调用getRequestProperties
方法来创建消息属性②。然后在while（true）循环中等待回应3。为了从
RabbitMQ接收消息，你将采用和服务器端代码相同的技术。在收到消息投递之后，
你将消息体转换为字符串，然后返回给调用方。现在让我们看看你如何创建消息属
性来将replyQueueName 包含到reply_to消息的基本属性中。
清单A.13 创建消息的基本属性
private BasicProperties
getRequestProperties()(
return new BasicProperties
.Builder()
replyTo(replyQueueName)
.build();
该方法很简单。你通过使用builder技术，链式调用方法设置了需要的每个基本
属性，来创建BasicProperties对象。虽然在本例中你只设置了replyTo属性，
但是你也可以通过使用这种方式来设置像correlationId或者deliveryMode这
样的属性。现在让我们看看main方法。
---
## Page 319
A.3边喝咖啡边RPC：用JaVa实现AMQPRPC
297
清单A.14客户端main方法
public static void main(String[] args）{
Client client = null;
String response =null;
try{
client = new Client();
client.init().setupConsumer();
response = client.call(client.createRequest());
<—1调用RPC
System.out.println("RPC Reply --- "+ response);
服务器
catch(Exception e）{
e.printStackTrace();
{
finally{
if （client!= null）{
try{
client.close();
catch (Exception ignore）{}
这里的代码很像初始化服务器的那段代码。有趣的地方在于你如何调用服务器
1。在拥有了消费者实例之后，执行ca11方法，然后等待服务器的响应。注意，
对于使用RPC客户端的用户来说，调用本地方法和调用RPC方法之间没有明显差异，
因此在这一点上需要注意，因为RPC调用要比本地方法慢好几个数量级。还有一点
未提到的是Client.createRequest代码，它用于生成JSON字符串发往服务器。
让我们现在就来看看代码吧。
清单A.15生成JSON请求
public static String createRequest()
throws JSONException{
float epoch = System.currentTimeMillis()/1000;
JSONStringer msg = new JSONStringer();
return msg
.object()
.key("client_name")
.value("RPC Client 1.0")
.key("time")
.value(Float.toString(epoch))
.endobject().toString();
首先获取当前UNIX时间戳，用于和RPC消息一同发送出去。然后，创建
---
## Page 320
298
附录A在Java和.NET上使用Rabbit
JSONStringer对象的实例，它提供了OOP接口来构建JSON对象。就像你看到
的那样，你创建了JSON对象，并分别设置了clientname和time属性为RPC
Client l.0和Float.toString(epoch)。
让我们总结一下客户端是如何工作的。首先你需要在类的main方法中实例化
RPC客户端。在有了client实例之后，你可以使用call方法来从服务器端得到
回应。作为消息发送出去的JSON对象是在createRequest方法中构建的。在客
户端初始化过程中，你在服务器端为客户端声明了队列，并将队列名称存储为对象
状态。该队列名称也随着JSON对象传送到服务器上，所以服务器才知道往哪里发
送回应。一旦得到了服务器的回应，你就将内容打印到控制台上并退出程序。在结
束应用程序之前，你需要负责将连接关闭来清理资源。以下是完整的RPC客户端代
码，包含了client.close方法。
清单A.16RPC客户端完整代码
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.QueueingConsumer;
import com.rabbitnq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.AMQP.BasicProperties;
import org.json.JsoNStringer;
import org.json.JSONException;
public class Client {
private Connection connection;
private Channel channel;
private String replyQueueName;
private QueueingConsumer consumer;
public Client init()
throws Exception{
ConnectionFactory factory=new ConnectionFactory();
factory.setUsername("rpc_user") ;
factory.setPassword("rpcme");
connection = factory.newConnection();
channel = connection.createChannel();
return this;
public Client setupConsumer()
throws Exception{
replyQueueName=channel.queueDeclare().getQueue();
consumer =new QueueingConsumer(channel);
channel.basicConsume(replyQueueName,false,consumer);
return this;
---
## Page 321
A.3边喝咖啡边RPC：用Java实现AMQPRPC
299
public String call(String message) throws Exception {
String response = null;
channel.basicPublish(
"rpc",
"ping",
getRequestProperties(),
message.getBytes()
System.out.println("Sent'ping'RPC call.Waiting for reply...");