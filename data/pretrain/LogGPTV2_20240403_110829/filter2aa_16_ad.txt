...
...
else
语句 n
在这种方式中，各条件从前往后依次求值，直到满足某个条件，然后执行对应的语句部分。 这部分语句执行完成后，整个语句体执行结束(其中的任何语句都可以是括在花括号中的若 干条语句)。如果所有条件都不满足，则执行位于最后一个 else 之后的语句(如果有的话)。 类似于前面的单词计数程序，如果没有最后一个 else 及对应的语句，该语句体将不执行任何 动作。在第一个 if 与最后一个 else 之间可以有 0 个或多个下列形式的语句序列:
else if (条件)
语句
就程序设计风格而言，我们建议读者采用上面所示的缩进格式以体现该结构的层次关系， 否则，如果每个 if 都比前一个 else 向里缩进一些距离，那么较长的判定序列就可能超出页 面的右边界。
第 3 章将讨论的 switch 语句提供了编写多路分支程序的另一种方式，它特别适合于判 定某个整型或字符表达式是否与一个常量集合中的某个元素相匹配的情况。我们将在 3.4 节给
出用 switch 语句编写的该程序的另一个版本，与此进行比较。
练习 1•13 编写一个程序，打印输入中单词长度的直方图。水平方向的直方图比较容易 绘制，垂直方向的直方图则要困难些。
练习 1•14             编写一个程序，打印输入中各个字符出现频度的直方图。
1.7 函数
C 语言中的函数等价于 Fortran 语言中的子程序或函数，也等价于 Pascal 语言中的过程或 函数。函数为计算的封装提供了一种简便的方法，此后使用函数时不需要考虑它是如何实现 的。使用设计正确的函数，程序员无需考虑功能是如何实现的，而只需知道它具有哪些功能 就够了。在 C 语言中可以简单、方便、高效地使用函数。我们经常会看到在定义后仅调用了 一次的短函数，这样做可以使代码段更清晰易读。
到目前为止，我们所使用的函数(如 printf、getchar 和 putchar 等)都是函数库 中提供的函数。现在，让我们自己动手来编写一些函数。C 语言没有像 Fortran 语言一样提供 类似于**的求军运算符，我们现在通过编写一个求军的函数 power(m, n)来说明函数定义 的方法。power(m, n)函数用于计算整数 m 的 n 次军，其中 n 是正整数。对函数调用 power(2, 5)来说，其结果值为 32。该函数并非一个实用的求军函数，它只能处理较小的整数的正整数 次军，但这对于说明问题已足够了。(标准库中提供了一个计算 x
y
 的函数 pow(x, y)。)
下面是函数 power(m, n)的定义及调用它的主程序，这样我们可以看到一个完整的程序 结构。
#include 
int power(int m, int n);
/* test power function */ main()
{
int i;
for (i = 0; i = 0 */ int power(int base, int n)
{
int i,              p;
p = 1;
for (i = 1; i = 0 */
/*              (old•style version) */ power(base, n)
int base, n;
{
int i, p;
p = 1;
for (i = 1; i = 0; version 2 */ int power(int base, int n)
{
int p;
for (p = 1; n > 0; ••n) p = p * base;
return p;
}
其中，参数 n 用作临时变量，并通过随后执行的 for 循环语句递减，直到其值为 0，这样就 不需要额外引入变量 i;power 函数内部对 n 的任何操作不会影响到调用函数中 n 的原始参 数值。
必要时，也可以让函数能够修改主调函数中的变量。这种情况下，调用者需要向被调用 函数提供待设置值的变量的地址(从技术角度看，地址就是指向变量的指针)，而被调用函数 则需要将对应的参数声明为指针类型，并通过它间接访问变量。我们将在第 5 章中讨论指针。
如果是数组参数，情况就有所不同了。当把数组名用作参数时，传递给函数的值是数组 起始元素的位置或地址——它并不复制数组元素本身。在被调用函数中，可以通过数组下标 访问或修改数组元索的值。这是下一节将要讨论的问题。
1.9 字符数组
字符数组是 C 语言中最常用的数组类型。下面我们通过编写一个程序，来说明字符数组 以及操作字符数组的函数的用法。该程序读入一组文本行，并把最长的文本行打印出来。该 算法的基本框、非常简单:
while (还有未处理的行)
if (该行比已处理的最长行还要长)
保存该行为最长行
保存该行的长度
打印最长的行
从上面的框、中很容易看出，程序很自然地分成了若干片断，分别用于读入新行、测试读入 的行、保存该行，其余部分则控制这一过程。
因为这种划分方式比较合理，所以可以按照这种方式编写程序。首先，我们编写一个独 立的函数 getline，它读取输入的下一行。我们尽量保持该函数在其它场台也有用。至少 getline 函数应该在读到文件末尾时返回一个信号;更为有用的设计是它能够在读入文本行 时返回该行的长度，而在遇到文件结束符时返回 0。由于 0 不是有效的行长度，因此可以作为 标志文件结束的返回值。每一行至少包括一个字符，只包含换行符的行，其长度为 1。
当发现某个新读入的行比以前读入的最长行还要长时，就需要把该行保存起来。也就是 说，我们需要用另一个函数 copy 把新行复制到一个安全的位置。
最后，我们需要在主函数 main 中控制 getline 和 copy 这两个函数。以下便是我们编 写的程序:
#include 
#define MAXLINE 1000              /* maximum input line length */
int getline(char line[], int maxline); void copy(char to[], char from[]);
/* print the longest input line */ main()
{
int len;              /* current line length */
int max;              /* maximum length seen so far */ char line[MAXLINE];              /* current input line */
char longest[MAXLINE]; /* longest line saved here */
max = 0;
while ((len = getline(line, MAXLINE)) > 0) if (len > max) {
max = len; copy(longest, line);
}
if (max > 0)              /* there was a line */ printf("%s", longest);
return 0;
}
/* getline:              read a line into s, return length              */ int getline(char s[],int lim)
{
int c, i;
for (i=0; i < lim•1 && (c=getchar())!=EOF && c!='\n'; ++i) s[i] = c;
if (c == '\n') { s[i] = c;
++i;
}
s[i] = '\0'; return i;
}
/* copy:              copy 'from' into 'to'; assume to is big enough */ void copy(char to[], char from[])
{
int i;
i = 0;
while ((to[i] = from[i]) != '\0')
++i;
}
程序的开始对 getline 和 copy 这两个函数进行了声明，这里假定它们都存放在同一个 文件中。
main 与 getline 之间通过一对参数及一个返回值进行数据交换。在 getline 函数中， 两个参数是通过程序行
int getline(char s[], int lim)
声明的，它把第一个参数 s 声明为数组，把第二个参数 lim 声明为整型，声明中提供数组大 小的目的是留出存储空间。在 getline 函数中没有必要指明数组 s 的长度，这是因为该数组
的大小是在 main 函数中设置的。如同 power 函数一样，getline 函数使用了一个 return 语句将值返回给其调用者。上述程序行也声明了 getline 数的返回值类型为 int。由于函数 的默认返回值类型为 int，因此这里的 int 可以省略。
有些函数返回有用的值，而有些函数(如   copy)仅用于执行一些动作，并不返回值。copy
函数的返回值类型为 void，它显式说明该函数不返回任何值。