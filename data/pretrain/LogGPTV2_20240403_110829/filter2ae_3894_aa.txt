**译者：知道创宇404实验室翻译组  
原文链接：**

## 前言
在[第一篇](https://paper.seebug.org/1523/)中，我们介绍了相关的侦察步骤。本文将深入探讨IDA Pro的分析过程，以更好地理解`imgdecrypt`工具如何确保最新路由器型号固件的完整性。

### 使用默认的IDA加载选项
当我们将二进制文件加载到IDA Pro时，会看到一个函数列表。尽管该二进制文件已被剥离了调试符号，使得调试变得较为困难，但IDA提供的信息仍然非常有用：
- 共有104个已识别的函数。
- 仅有16个函数无法与任何库函数匹配，这表明程序很可能包含了D-Link生成的自定义加密/解密算法。
- 尽管二进制文件名为`imgdecrypt`，其主要入口点显示它也具备加密功能。

### 主要功能注释
关键在于，为了进入二进制文件的解密部分，我们的`argv`参数列表必须包含子字符串“decrypt”。如果未找到该子字符串，则`char *strstr(const char *haystack, const char *needle)`函数将返回`NULL`。在这种情况下，`beqz $v0, loc_402AE0`指令会将控制流重定向到`loc_402AE0`，这是二进制文件的加密部分。如果您对此不甚了解，建议阅读本系列的[第1部分](https://paper.seebug.org/1523/)。

由于我们正在分析的二进制文件名为`imgdecrypt`，从`argv`空间的开头进行搜索可以找到进入解密例程的路径。若要进入加密例程，我们需要重命名二进制文件。

现在我们知道如何到达存放解密固件的`decrypt_firmware`基本块。在调用之前，应仔细检查该函数是否带有参数及其使用方式。从带注释的版本可以看出，`argc`被加载到`$a0`寄存器中，`argv`被加载到`$a1`寄存器中。根据MIPS32 ABI，这两个寄存器分别保存了前两个函数参数。

### crypto_firmware 概述
从IDA Pro的图形视图中可以看到，`decrypt_firmware`函数有两个明显的解密路径，并且存在某种形式的循环。开头的几个`lw`和`sw`指令用于设置堆栈框架和函数参数。还记得[第1部分](https://paper.seebug.org/1523/)中的`/etc_ro/public.pem`吗？在这里的函数序言中，还为后续使用设置了证书。此外，`argc`被加载到`$v0`寄存器中，并通过`slti $v0, 2`指令与2进行比较，然后通过`beqz $v0, loc_402670`指令进行条件跳转：

```c
if (argc < 2) {
    goto loc_402670;
}
```

### 保护标志
在`/usr/include/x86_64-linux-gnu/bits/mman-linux.h`文件中，定义了以下保护标志：

```c
/*
 * The implementation does not necessarily support PROT_EXEC or PROT_WRITE
 * without PROT_READ.  The only guarantees are that no writing will be
 * allowed without PROT_WRITE and no access will be allowed for PROT_NONE.
 */
#define PROT_READ   0x1     /* Page can be read.  */
#define PROT_WRITE  0x2     /* Page can be written.  */
#define PROT_EXEC   0x4     /* Page can be executed.  */
```

这些标志用于指定内存页的访问权限。例如，`PROT_READ`允许读取页面，`PROT_WRITE`允许写入页面，而`PROT_EXEC`则允许执行页面。