In the final test, the task was to toss the bean bags to a target three feet away. The group who
had spent all of their practicing at that exact distance was in fact bested by the group who had
practiced at two and four feet.
This and other studies demonstrate that struggle is not only important to the learning experience,
but it’s actually more important than mere repetition for creating the neural pathways that help us
learn new skills.
152 (Kerr and Booth, 1978), https://pubmed.ncbi.nlm.nih.gov/662537/
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 67
Made in Morocco
Penetration Testing with Kali Linux
This necessity for struggle means that we won’t do much exact repetition in the OffSec learning
materials. Since learning is self-directed, students seeking more repetition can return to specific
parts of the material as many times as they would like.
In lieu of this sort of repetition, we often choose to take an indirect route to the finish line. For
example, we might try things that don’t work so that we can experience the act of picking
ourselves up and trying again. This is the metaphorical equivalent of moving the target around a
bit.
Put simply, we feel that memorizing syntax is less important than being familiar with challenges
and comfortable with a bit of struggle as a necessary character trait for someone in the field of
information security.
Let’s make one other note here while we’re on the subject. We expect that just about every
student will get stuck at some point in their learning journey. We don’t see this as a negative.
y
Getting stuck isn’t fun, but we believe that being comfortable in a situation where we might not
have all of the information and working through the problem kis critical to success in the field of
cyber security. To that end, we both sometimes take an indirect route to the finish line (in order to
encounter “getting stuck”) and provide technical exercisses that ask students to go beyond simply
repeating covered material. Our goal is to help you practice getting stuck enough that you
become quite comfortable with recovering.
o
To that end, we have written about this notion, which we call The Try Harder Mindset, in greater
detail and with some specific strategies elsewhere.153
n
4.3.4 Contextual Learning and Interleaving
i
Whenever possible, OffSec’s leazrning materials will present a new skill as part of a realistic
scenario. This can be difficult with more basic skills, like the command used to rename a file, but
as we move deeper and deeper into the materials, we will find ourselves working through hands-
D
on scenarios that are as representative of the real world as possible.
Teaching this way takes more time; however, learning new skills in a realistic context drastically
improves a student’s retention and success.154
Students may also find that when information is presented in context, they are actually learning
several things at once. For example, if we are learning about how an attack method might be both
executed and detected at the same time, our brain can make more connections to help us learn
effectively. This method is called interleaving.155
4.4 Case Study: chmod -x chmod
It may be difficult to understand some of these ideas about teaching and learning completely out
of context. In order to observe some of these ideas “in action”, let’s take a moment to learn about
something called executable permissions.156 We’ll use this as a sort of case study to better
153 (OffSec, 2023), https://www.offensive-security.com/offsec/what-it-means-to-try-harder/
154 (Osika, MacMahon, Lodge, Carroll, 2022), https://www.timeshighereducation.com/campus/contextual-learning-linking-learning-
real-world
155 (University of Arizona, 2022), https://academicaffairs.arizona.edu/l2l-strategy-interleaving
156 (Arora, 2013), https://www.thegeekstuff.com/2013/02/sticky-bit/
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 68
Made in Morocco
Penetration Testing with Kali Linux
understand how the OffSec training materials are presented and how we might approach
learning.
For this next section, please keep in mind that it is fine if the content is more technical than what
you feel you are ready for or if you are not able to follow along. For example, we’re going to start
off by saying “Every file on a Linux machine has a number of properties associated with it.” It is
fine if, as a reader, you don’t know what a Linux machine is yet, or what properties are, or even
what files are.
We’ll try and keep things pretty basic for a while, and then we’ll go a little deeper. If you’re a bit
more experienced in Linux, you may enjoy the puzzle that we work through as we go on.
Again, the purpose here isn’t actually to learn about the executable portion, but to have an
example so that we can discuss how we might approach teaching such a subject.
y
This Learning Unit covers the following Learning Objectives:
1. Review a sample of learning material about the executablke permission, expand beyond the
initial information set, and work through a problem
2. Understand how OffSec’s approach to teaching is resflected in the sample material
While each student will learn at their own pace, this Learning Unit should take about 30 minutes
o
to complete.
4.4.1 What is Executable Permission?
n
Every file on a Linux machine has a number of additional properties associated with it. These
include when the file was created, wihat user created it, which users have permissions to read that
file, and even the name of the file zitself.
File permissions are particularly important. They indicate whether or not we are allowed to either
D
read, write, or execute a particular file. We might think of the word write in this context as our
ability to make certain changes to a file. This could, for example, be set to not allow us to write to
a file, which might keep that file from being accidentally deleted. The permissions might also be
set to not allow us to read a file that has information in it that we shouldn’t be allowed to view.
These are called the file permissions,157 and they pertain to a few different types of users who
might be on this computer: the file owner, the user ownership group, and anyone else. These
different classes of users can be given (or denied) permission for each of the three actions above:
read, write, and execute. For the sake of this Module, we’ll focus only on the owner of the file,
ourselves in this case.
Let’s open a terminal and review how this works in practice. We’ll touch158 a file (newfilename.txt),
which will create it and automatically make us the owner. Then we’ll use the listing command ls159
to gather information about the file, providing the -l parameter that will produce a long listing
including the file permissions.
157 (Study Tonight, 2022), https://www.studytonight.com/linux-guide/understanding-file-permissions-in-linux-unix
158 (Rani, 2021), https://www.geeksforgeeks.org/touch-command-in-linux-with-examples/
159 (Verma, 2021), https://www.geeksforgeeks.org/practical-applications-ls-command-linux/
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 69
Made in Morocco
Penetration Testing with Kali Linux
kali@kali:~$ touch newfilename.txt
kali@kali:~$ ls -l newfilename.txt
-rw-r--r-- 1 kali kali 0 Jun 6 12:31 newfilename.txt
Listing 12 - Checking file permissions
In some situations, our touch command may fail because of directory
permissions.160 Although this is beyond the scope of this introduction, for now
it’s worth knowing that directory permissions apply to all files and directories
within a directory. If the directory permissions don’t allow us to create files in this
location, the touch command will obviously fail.
y
The touch command produced no output. This is normal. The output of the ls command includes
information about the permissions as indicated by the letters rwx, where the “r” is for read, the “w”
k
is for write, and the “x” is for execute. A dash (-) indicates that the user class doesn’t have the
corresponding permissions. In this case, we have permission to read and write to our new file, but
there is no “x” character in the output, meaning no class shas permission to execute.
As the owner of a particular file, we were granted read and write permissions by default when we
o
created it, but we aren’t granted executable permissions. In other words, if newfilename.txt was a
program, we would not be able to execute it. This is a small but useful security feature that
prevents us from accidentally running somenthing we might not want to.
Let’s keep going. In this scenario, let’s say we have a simple program that will give us a complete
list of employee names. This iprogram is a Python script we’ve created named
find_employee_names.py. Let’s tryz to run the script.
kali@kali:~$ ./find_employee_names.py
D
zsh: permission denied: ./find_employee_names.py
kali@kali:~$ ls -l find_employee_names.py
-rw-r--r-- 1 kali kali 206 Jun 7 12:31 find_employee_names.py
Listing 13 - First attempt at running our script.
We try running the script by simply entering the name of the file, find_employee_names.py, in the
terminal. The ./ part of the command simply instructs the system where to find the file. This
should work, but the output is not what we expected. The “zsh: permission denied” error message
indicates that for some reason, we’re not able to execute (or run) our script.
We also ran the same ls command as before. As with our newly created file, there’s no “x”
character in the output, which means that we don’t have permission to execute. This explains the
“permission denied” output.
Let’s change the executable permission for this file and give ourselves permission to execute the
file (put another way, to run it as a program). We can use chmod +x to add the executable
permission to our script file. Let’s do so and try running the script again.
160 (Linux Foundation, 2022), https://www.linuxfoundation.org/blog/blog/classic-sysadmin-understanding-linux-file-permissions
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 70
Made in Morocco
Penetration Testing with Kali Linux
kali@kali:~$ chmod +x find_employee_names.py
kali@kali:~$ ls -l find_employee_names.py
-rwxr-xr-x 1 kali kali 206 Jun 7 12:31 find_employee_names.py
kali@kali:~$ ./find_employee_names.py
R. Jones
R. Diggs
G. Grice
C. Smith
C. Woods
D. Coles
J. Hunter
L. Hawkins
E. Turner
D. Hill y
Listing 14 - Second attempt after chmod.
After we gave ourselves permission, we did a quick check witkh ls to find out if the output would
change. It did! This time, the output contains the “x” character, indicating that executable
permission is allowed for all three user classes. s
Next, we ran our script again, and thankfully, we receive the expected output this time. The script
provided us a list of the current employees. o
Let’s now change it back so that we no longer have permission to execute the file. To add the
n
permission, we used chmod +x, so this time, we will use chmod -x.
kali@kali:~$ chmod -x find_employee_names.py
i
z
kali@kali:~$ ./find_employee_names.py
zsh: permission denied: ./find_employee_names.py
DListing 15 - Putting things back the way they were
We’re back where we started now with the same error message as before. From this small
experiment, we should have a very basic understanding of the executable permission bit, the
chmod tool, and the +x and -x options.
4.4.2 Going Deeper: Encountering a Strange Problem
Let’s take a moment to remind ourselves that it is fine if we are not following all of the technical
steps we’ve been covering. Some of the following examples are specifically included to be
interesting to students who have a better understanding of Linux.
Let’s continue to explore and push our learning further.
We’ll consider the fact that the chmod command itself is just a file. It follows the same rules as
other files on the system, including the same rules about permissions. It exists in a slightly
different location (in the /usr/bin/ directory) as our script, but the only reason we are able to run
the chmod +x find_employee_names.py command at all is because the chmod file has its
permissions set to allow us to run it as a program.
Now, let’s ask ourselves an interesting question: since chmod is the tool that allows us to set
permissions, what would we do if we did not have permission to execute it?
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 71
Made in Morocco
Penetration Testing with Kali Linux
Thankfully, it is not easy to accidentally remove our executable permission for this file. Despite
this, we’ve done so on our system.
Let’s explore how to fix our script again. We’ll start with our script that worked previously.
kali@kali:~$ ./find_employee_names.py
zsh: permission denied: ./find_employee_names.py
kali@kali:~$ chmod +x find_employee_names.py
zsh: permission denied: chmod
Listing 16 - Something isn’t quite right here.
In this initial case, our simple script wouldn’t run. This is the same problem we ran into previously.
We tried the solution that worked before, but this time we got a new error message.
We could try running chmod on the chmod file, but we will run into tyhe same problem. Let’s run it
on /usr/bin/chmod, since this is the specific location of the file.
k
kali@kali:~$ chmod +x /usr/bin/chmod
zsh: permission denied: chmod
Listing 17 - Trying to chmod our schmod binary.
Once again our permission is denied, but we’re not stuck yet.
o
A particularly observant student minght reasonably ask why we needed to use “./”
for our own Python script, but not for chmod. The answer, which is beyond the
scope of this Module, has to do with the PATH environment variable. Interested
i
or curious students can learn more about this with external study.
z
For the most part, we’ve Dbeen checking for permission by simply attempting to execute the
program. Let’s recall the method we used earlier to check for this permission - using the ls
command with the -l option. If we run ls -l without anything at the end, we’ll be able to observe
information for every file in the current directory. Since we are only interested in one file, we will
follow our command with a specific file name.
Let’s run this command for two different files.
kali@kali:~$ ls -l find_employee_names.py
-rw-r--r-- 1 kali kali 206 Jun 7 12:31 find_employee_names.py
kali@kali:~$ ls -l /usr/bin/ls
-rwxr-xr-x 1 root root 147176 Sep 24 2020 /usr/bin/ls
Listing 18 - Running ls -l on different files.
In this example, we checked some of the information on two different files. We’ve run this on our
Python script before and the output, missing the “x” character, is expected.
The second time, we ran ls on the ls file. This time we’ll notice the output includes the “x”
character. This explains why we can’t run find_employee_names.py, but we can run ls.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 72
Made in Morocco
Penetration Testing with Kali Linux
4.4.3 One Potential Solution
There are a number of ways to fix our chmod problem. The simplest solutions involve finding a
“clean” version of the chmod file and replacing it. The more complicated solutions include running
one binary in the context of another binary that has the correct permissions. Let’s explore one
particularly interesting solution.
We need to do what our chmod file can do, but we also need permission to do it. To put this
another way, our end goal is a file that can do what chmod can do, but that has the permissions
of another file, such as ls.
We’ll start by making a copy of a file that we know has the permission set we need. Since we
checked the ls command earlier, let’s copy that file into a new file named chmodfix.
kali@kali:~$ cp /usr/bin/ls chmodfix y
kali@kali:~$ ls -l chmodfix
-rwxr-xr-x 1 kali kali 147176 Jun 8 08:16 chmodfix k
Listing 19 - Copying a file with cp.
s
Our new chmodfix file has the same permissions as the file we copied. This is a promising start.
The new chmodfix file is a perfect copy of ls. It can be run in the same way as ls, can use the
o
same options, and so on. In other words, anywhere we would have used ls, we can use this
instead. Let’s try running it on itself.
n
kali@kali:~$ ./chmodfix -l chmodfix
-rwxr-xr-x 1 kali kali 147176 Jun 8 08:16 chmodfix
i
Listing 20 - Anything ls can do, chmodfix can do.
z
The output is the same as before. This is progress!
Since the only thing that seDems to be “broken” with our chmod file is the permissions (as far as
we know, the contents of the file itself are fine), let’s try to copy only the contents of the file and
not the permissions. In other words, we only need the contents of the file - not the entire thing.
Since we know that cp will copy the entire file, we can’t use that approach. The cat command161 is
often used to show the contents of a file, so we will use that. Instead of just sending the contents
of the file to display in the terminal window, we can use the “>” character to send them into our
chmodfix file.
First, we’ll run ls -l so that we can easily confirm whether or not the file contents change.
kali@kali:~$ ls -l chmodfix
-rwxr-xr-x 1 kali kali 147176 Jun 8 08:20 chmodfix
kali@kali:~$ cat /usr/bin/chmod > chmodfix
kali@kali:~$ ls -l chmodfix
-rwxr-xr-x 1 kali kali 64448 Jun 8 08:21 chmodfix
Listing 21 - Sending the contents of chmod to chmodfix.
161 (Linuxize, 2021), https://linuxize.com/post/linux-cat-command/
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 73
Made in Morocco
Penetration Testing with Kali Linux
We previously examined the -rwxr-xr-x portion of the output. We’ll also notice a number, “147176”
in the case of the first command, in the output. This number indicates the size of the file. After we
run the cat command, we’ll observe that the file name and the permissions are still the same as
before, but the file size is now “64448”. This output indicates that the contents of the file have
changed, but the permissions remained intact.
Let’s return to the beginning and try to run chmodfix +x on our script.
kali@kali:~$ ./chmodfix +x find_employee_names.py
kali@kali:~$ ./find_employee_names.py
R. Jones
R. Diggs
G. Grice
C. Smith
y
C. Woods
D. Coles
J. Hunter
k
L. Hawkins