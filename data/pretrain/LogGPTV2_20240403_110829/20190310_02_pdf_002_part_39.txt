https://www.enterprisedb.com/resources/product-documentation
Please note: EnterpriseDB does not support use of the Open Client Library with Oracle
Real Application Clusters (RAC) and Oracle Exadata; the aforementioned Oracle
products have not been evaluated nor certified with this EnterpriseDB product.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 337
Database Compatibility for Oracle® Developers Guide
8 Oracle Catalog Views
The Oracle Catalog Views provide information about database objects in a manner
compatible with the Oracle data dictionary views. Information about the supported views
is now available in the Database Compatibility for Oracle® Developer’s Reference
Guide, available at:
https://www.enterprisedb.com/resources/product-documentation
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 338
Database Compatibility for Oracle® Developers Guide
9 Tools and Utilities
Compatible tools and utility programs can allow a developer to work with Advanced
Server in a familiar environment. The tools supported by Advanced Server include:
 EDB*Plus
 EDB*Loader
 EDB*Wrap
 The Dynamic Runtime Instrumentation Tools Architecture (DRITA)
For detailed information about the functionality supported by Advanced Server, please
consult the Database Compatibility for Oracle® Developer’s Tools and Utilities Guide,
available at:
https://www.enterprisedb.com/resources/product-documentation
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 339
Database Compatibility for Oracle® Developers Guide
10 Table Partitioning
In a partitioned table, one logically large table is broken into smaller physical pieces.
Partitioning can provide several benefits:
 Query performance can be improved dramatically in certain situations,
particularly when most of the heavily accessed rows of the table are in a single
partition or a small number of partitions. Partitioning allows you to omit the
partition column from the front of an index, reducing index size and making it
more likely that the heavily used parts of the index fits in memory.
 When a query or update accesses a large percentage of a single partition,
performance may improve because the server will perform a sequential scan of
the partition instead of using an index and random access reads scattered across
the whole table.
 A bulk load (or unload) can be implemented by adding or removing partitions, if
you plan that requirement into the partitioning design. ALTER TABLE is far faster
than a bulk operation. It also entirely avoids the VACUUM overhead caused by a
bulk DELETE.
 Seldom-used data can be migrated to less-expensive (or slower) storage media.
Table partitioning is worthwhile only when a table would otherwise be very large. The
exact point at which a table will benefit from partitioning depends on the application; a
good rule of thumb is that the size of the table should exceed the physical memory of the
database server.
This document discusses the aspects of table partitioning compatible with Oracle
databases that are supported by Advanced Server.
Note: This document and particularly the partitioning presented in this chapter do not
describe the declarative partitioning feature, which has been introduced with PostgreSQL
version 10. Note that PostgreSQL declarative partitioning is supported in Advanced
Server 10 in addition to the table partitioning compatible with Oracle databases as
described in this chapter. For information about declarative partitioning, please see the
PostgreSQL core documentation available at:
https://www.postgresql.org/docs/11/static/ddl-partitioning.html
The PostgreSQL 9.6 INSERT… ON CONFLICT DO NOTHING/UPDATE clause
(commonly known as UPSERT) is not supported on Oracle-styled partitioned tables. If
you include the ON CONFLICT DO NOTHING/UPDATE clause when invoking the INSERT
command to add data to a partitioned table, the server will return an error.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 340
Database Compatibility for Oracle® Developers Guide
10.1 Selecting a Partition Type
When you create a partitioned table, you specify LIST, RANGE, or HASH partitioning
rules. The partitioning rules provide a set of constraints that define the data that is stored
in each partition. As new rows are added to the partitioned table, the server uses the
partitioning rules to decide which partition should contain each row.
Advanced Server can also use the partitioning rules to enforce partition pruning,
improving performance when responding to user queries. When selecting a partitioning
type and partitioning keys for a table, you should take into consideration how the data
that is stored within a table will be queried, and include often-queried columns in the
partitioning rules.
List Partitioning
When you create a list-partitioned table, you specify a single partitioning key column.
When adding a row to the table, the server compares the key values specified in the
partitioning rule to the corresponding column within the row. If the column value
matches a value in the partitioning rule, the row is stored in the partition named in the
rule.
Range Partitioning
When you create a range-partitioned table, you specify one or more partitioning key
columns. When you add a new row to the table, the server compares the value of the
partitioning key (or keys) to the corresponding column (or columns) in a table entry. If
the column values satisfy the conditions specified in the partitioning rule, the row is
stored in the partition named in the rule.
Hash Partitioning
When you create a hash-partitioned table, you specify one or more partitioning key
columns. Data is divided into (approx.) equal-sized partitions amongst the specified
partitions. When you add a row to a hash-partitioned table, the server computes a hash
value for the data in the specified column (or columns), and stores the row in a partition
according to the hash value.
Subpartitioning
Subpartitioning breaks a partitioned table into smaller subsets. All subsets must be stored
in the same database server cluster. A table is typically subpartitioned by a different set
of columns, and may be a different subpartitioning type than the parent partition. If one
partition is subpartitioned, then each partition will have at least one subpartition.
If a table is subpartitioned, no data will be stored in any of the partition tables; the data
will be stored instead in the corresponding subpartitions.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 341
Database Compatibility for Oracle® Developers Guide
10.2 Using Partition Pruning
Advanced Server's query planner uses partition pruning to compute an efficient plan to
locate a row (or rows) that matches the conditions specified in the WHERE clause of a
SELECT statement. To successfully prune partitions from an execution plan, the WHERE
clause must constrain the information that is compared to the partitioning key column
specified when creating the partitioned table. When querying a:
 list-partitioned table, partition pruning is effective when the WHERE clause
compares a literal value to the partitioning key using operators like equal (=) or
AND.
 range-partitioned table, partition pruning is effective when the WHERE clause
compares a literal value to a partitioning key using operators such as equal (=),
less than ().
 hash-partitioned table, partition pruning is effective when the WHERE clause
compares a literal value to the partitioning key using an operator such as equal
(=).
The partition pruning mechanism uses two optimization techniques:
 Fast Pruning
 Constraint exclusion
Partition pruning techniques limit the search for data to only those partitions in which the
values for which you are searching might reside. Both pruning techniques remove
partitions from a query's execution plan, increasing performance.
The difference between the fast pruning and constraint exclusion is that fast pruning
understands the relationship between the partitions in an Oracle-partitioned table, while
constraint exclusion does not. For example, when a query searches for a specific value
within a list-partitioned table, fast pruning can reason that only a specific partition may
hold that value, while constraint exclusion must examine the constraints defined for each
partition. Fast pruning occurs early in the planning process to reduce the number of
partitions that the planner must consider, while constraint exclusion occurs late in the
planning process.
Using Constraint Exclusion
The constraint_exclusion parameter controls constraint exclusion. The
constraint_exclusion parameter may have a value of on, off, or partition. To
enable constraint exclusion, the parameter must be set to either partition or on. By
default, the parameter is set to partition.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 342
Database Compatibility for Oracle® Developers Guide
For more information about constraint exclusion, see:
https://www.postgresql.org/docs/11/static/ddl-partitioning.html
When constraint exclusion is enabled, the server examines the constraints defined for
each partition to determine if that partition can satisfy a query.
When you execute a SELECT statement that does not contain a WHERE clause, the query
planner must recommend an execution plan that searches the entire table. When you
execute a SELECT statement that does contain a WHERE clause, the query planner
determines in which partition that row would be stored, and sends query fragments to that
partition, pruning the partitions that could not contain that row from the execution plan.
If you are not using partitioned tables, disabling constraint exclusion may improve
performance.
Fast Pruning
Like constraint exclusion, fast pruning can only optimize queries that include a WHERE
(or join) clause, and only when the qualifiers in the WHERE clause match a certain form.
In both cases, the query planner will avoid searching for data within partitions that cannot
possibly hold the data required by the query.
Fast pruning is controlled by a boolean configuration parameter named
edb_enable_pruning. If edb_enable_pruning is ON, Advanced Server will fast
prune certain queries. If edb_enable_pruning is OFF, the server will disable fast
pruning.
Please note: Fast pruning cannot optimize queries against subpartitioned tables or
optimize queries against range-partitioned tables that are partitioned on more than one
column.
For LIST-partitioned tables, Advanced Server can fast prune queries that contain a
WHERE clause that constrains a partitioning column to a literal value. For example, given
a LIST-partitioned table such as:
CREATE TABLE sales_hist(..., country text, ...)
PARTITION BY LIST(country)
(
PARTITION americas VALUES('US', 'CA', 'MX'),
PARTITION europe VALUES('BE', 'NL', 'FR'),
PARTITION asia VALUES('JP', 'PK', 'CN'),
PARTITION others VALUES(DEFAULT)
)
Fast pruning can reason about WHERE clauses such as:
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 343
Database Compatibility for Oracle® Developers Guide
WHERE country = 'US'
WHERE country IS NULL;
Given the first WHERE clause, fast pruning would eliminate partitions europe, asia, and
others because those partitions cannot hold rows that satisfy the qualifier: WHERE
country = 'US'.
Given the second WHERE clause, fast pruning would eliminate partitions americas,
europe, and asia because those partitions cannot hold rows where country IS NULL.
The operator specified in the WHERE clause must be an equal sign (=) or the equality
operator appropriate for the data type of the partitioning column.
For range-partitioned tables, Advanced Server can fast prune queries that contain a
WHERE clause that constrains a partitioning column to a literal value, but the operator may
be any of the following:
>
>=
=
 100 AND size  100 -- scan partitions 'medium' and 'large'
WHERE size >= 100 -- scan partitions 'medium' and 'large'
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 344
Database Compatibility for Oracle® Developers Guide
WHERE size = 100 -- scan partition 'medium'
WHERE size  100 AND size  100 AND size  Seq Scan on sales_asia
Filter: ((country)::text = 'INDIA'::text)
(3 rows)
If you perform a query that searches for a row that matches a value not included in the
partitioning key:
EXPLAIN (COSTS OFF) SELECT * FROM sales WHERE dept_no = '30';
The resulting query plan shows that the server must look in all of the partitions to locate
the rows that satisfy the query:
edb=# EXPLAIN (COSTS OFF) SELECT * FROM sales WHERE dept_no = '30';
QUERY PLAN
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 346
Database Compatibility for Oracle® Developers Guide
-------------------------------------------
Append
-> Seq Scan on sales_americas
Filter: (dept_no = '30'::numeric)
-> Seq Scan on sales_europe
Filter: (dept_no = '30'::numeric)
-> Seq Scan on sales_asia
Filter: (dept_no = '30'::numeric)
(7 rows)
Constraint exclusion also applies when querying subpartitioned tables:
CREATE TABLE sales
(
dept_no number,
part_no varchar2,
country varchar2(20),
date date,
amount number
)
PARTITION BY RANGE(date) SUBPARTITION BY LIST (country)
(
PARTITION "2011" VALUES LESS THAN('01-JAN-2012')
(
SUBPARTITION europe_2011 VALUES ('ITALY', 'FRANCE'),
SUBPARTITION asia_2011 VALUES ('PAKISTAN', 'INDIA'),
SUBPARTITION americas_2011 VALUES ('US', 'CANADA')
),
PARTITION "2012" VALUES LESS THAN('01-JAN-2013')
(
SUBPARTITION europe_2012 VALUES ('ITALY', 'FRANCE'),
SUBPARTITION asia_2012 VALUES ('PAKISTAN', 'INDIA'),
SUBPARTITION americas_2012 VALUES ('US', 'CANADA')
),
PARTITION "2013" VALUES LESS THAN('01-JAN-2015')
(
SUBPARTITION europe_2013 VALUES ('ITALY', 'FRANCE'),
SUBPARTITION asia_2013 VALUES ('PAKISTAN', 'INDIA'),
SUBPARTITION americas_2013 VALUES ('US', 'CANADA')
)
);
When you query the table, the query planner prunes any partitions or subpartitions from
the search path that cannot possibly contain the desired result set:
edb=# EXPLAIN (COSTS OFF) SELECT * FROM sales WHERE country = 'US' AND date =
'Dec 12, 2012';
QUERY PLAN
-----------------------------------------------------------------------------
------------------------------------
Append
-> Seq Scan on sales_americas_2012
Filter: (((country)::text = 'US'::text) AND (date = '12-DEC-12
00:00:00'::timestamp without time zone))
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 347
Database Compatibility for Oracle® Developers Guide
(3 rows)
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 348
Database Compatibility for Oracle® Developers Guide
10.3 Partitioning Commands Compatible with Oracle Databases
The following sections provide information about using the table partitioning syntax
compatible with Oracle databases supported by Advanced Server.
10.3.1 CREATE TABLE…PARTITION BY
Use the PARTITION BY clause of the CREATE TABLE command to create a partitioned
table with data distributed amongst one or more partitions (and subpartitions). The
command syntax comes in the following forms:
List Partitioning Syntax
Use the first form to create a list-partitioned table:
CREATE TABLE [ schema. ]table_name
table_definition
PARTITION BY LIST(column)
[SUBPARTITION BY {RANGE|LIST|HASH} (column[, column ]...)]
(list_partition_definition[, list_partition_definition]...);
Where list_partition_definition is:
PARTITION [partition_name]
VALUES (value[, value]...)
[TABLESPACE tablespace_name]
[(subpartition, ...)]
Range Partitioning Syntax
Use the second form to create a range-partitioned table:
CREATE TABLE [ schema. ]table_name
table_definition
PARTITION BY RANGE(column[, column ]...)
[SUBPARTITION BY {RANGE|LIST|HASH} (column[, column ]...)]
(range_partition_definition[, range_partition_definition]...);
Where range_partition_definition is:
PARTITION [partition_name]
VALUES LESS THAN (value[, value]...)