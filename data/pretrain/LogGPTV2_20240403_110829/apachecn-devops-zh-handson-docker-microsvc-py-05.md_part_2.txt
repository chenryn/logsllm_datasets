  namespace: example
spec:
  containers:
    - name: nginx
      image: library/nginx:latest
```
至少，元素应包含以下内容:
*   元素的应用编程接口版本。
*   元素的类型。
*   元素的名称及其命名空间。
*   包含配置详细信息的`spec`部分。对于豆荚，我们需要添加必要的容器。
YAML files can be a bit temperamental sometimes, especially when it comes to indentation and syntax. You can use a tool such as Kubeval ([https://kubeval.instrumenta.dev/](https://kubeval.instrumenta.dev/)) to check that the file is correct and that you're following Kubernetes good practices before using a file.
我们将此文件保存为`example_pod.yml`。我们将使用`apply`命令创建它，并使用以下命令监控它的运行:
```
$ kubectl apply -f example_pod.yml
pod/nginx created
$ kubectl get pods -n example
NAME  READY STATUS            RESTARTS AGE
nginx 0/1   ContainerCreating 0        2s
$ kubectl get pods -n example
NAME  READY STATUS  RESTARTS AGE
nginx 1/1   Running 0        51s
```
Note the usage of the `-n` parameter to determine the namespace.
我们现在可以`exec`进入容器，并在里面运行命令。例如，要检查 NGINX 服务器是否正在运行并提供文件，我们可以使用以下代码:
```
$ kubectl exec -it nginx -n example /bin/bash
root@nginx:/# apt-get update
...
root@nginx:/# apt-get install -y curl
...
root@nginx:/# curl localhost
Welcome to nginx!
...
Welcome to nginx!
If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.
For online documentation and support please refer to
nginx.org.
Commercial support is available at
nginx.com.
Thank you for using nginx.
```
豆荚有两种变化。第一种方法是手动运行`edit`，这将打开您预定义的终端编辑器，以便您可以编辑文件:
```
$ kubectl edit pod nginx -n example
```
您将看到带有所有默认参数的 pod。这种改变 pod 的方式对小测试很有用，但是一般来说，最好改变原始的 YAML 文件，这样你就可以跟踪发生的变化。例如，我们可以更改 NGINX，使其使用以前的版本:
```
---
apiVersion: v1
kind: Pod
metadata:
  name: nginx
  namespace: example
spec:
  containers:
    - name: nginx
      image: library/nginx:1.16
```
然后，我们可以再次`apply`这些变化，这将重新启动吊舱:
```
$ kubectl apply -f example_pod.yml
pod/nginx configured
$ kubectl get pods -n example
NAME  READY STATUS  RESTARTS AGE
nginx 1/1   Running 1        36s
```
# 获取更多信息
`get`命令接受更多配置。您可以使用`wide`输出选项检索更多信息:
```
$ kubectl get pods -n example -o wide
NAME  READY STATUS  RESTARTS AGE IP        NODE
nginx 1/1   Running 1        30m 10.1.0.11 docker-for-desktop
```
如果你做了一个改变并且对这个改变感兴趣，你可以使用`-w`参数来观察任何改变。例如，下面的代码显示了 pod 的重启结果。由于对容器的映像进行了更改，导致重新启动:
```
$ kubectl get pods -n example -w
NAME  READY STATUS  RESTARTS AGE
nginx 1/1   Running 2        32m
nginx 1/1   Running 3        32m
```
如果您需要关于特定元素的更多信息，您可以`describe`它:
```
$ kubectl describe pod nginx -n example
Name: nginx
Namespace: example
Node: docker-for-desktop/192.168.65.3
Start Time: Sun, 23 Jun 2019 20:56:23 +0100
Labels: 
Annotations: ...
Status: Running
IP: 10.1.0.11
...
Events:
 Type Reason Age From Message
 ---- ------ ---- ---- -------
 Normal Scheduled 40m default-scheduler Successfully assigned nginx to docker-for-desktop
 ...
 Normal Created 4m43s (x5 over 40m) kubelet, docker-for-desktop Created container
 Normal Started 4m43s (x5 over 40m) kubelet, docker-for-desktop Started container
```
这返回了很多信息。最有用的信息通常是关于事件的，它将返回关于元素生命周期的信息。
# 移除元素
`delete`命令删除一个元素及其下的所有内容:
```
$ kubectl delete namespace example
namespace "example" deleted
$ kubectl get pods -n example
No resources found.
```
请注意，有时删除一个元素会导致它被重新创建。这在通过部署创建 pods 时非常常见，因为部署将使 pods 的数量达到配置的数量。
# 正在运行的群集的故障排除
在 Kubernetes 中，我们可以用来解决问题的主要工具是`get`和`describe`命令。
根据我的经验，运行 Kubernetes 最常见的问题是，有时，某些豆荚无法启动。故障排除的步骤如下:
1.  容器映像是否正确？下载映像出现问题将显示`ErrImagePull`。如果由于认证问题而无法从注册表下载映像，可能会导致这种情况。
2.  `CrashLoopBackOff`状态表示容器的处理已经中断。吊舱会一遍又一遍地尝试重启。这通常是由容器的潜在问题引起的。检查配置是否正确。您可以使用以下命令检查容器的`stdout`日志:
```
$ kubectl logs  -n  -c 
```
确保容器是可运行的。尝试使用以下命令手动运行它:
```
$ docker run 
```
3.  豆荚不会暴露在外面。这通常是由于暴露它们的服务和/或入口中的问题。您可以使用`exec`进入另一个容器，然后尝试访问服务和 pod 的内部 IP，通常使用`curl`来检测 pod 在集群内部是否有响应。
As we saw previously, `curl` is not installed in containers by default because, normally, they only install a minimal set of tools. Don't worry—you can install it using whatever package manager your operating system uses, with the advantage that, once the container is recycled (which will happen soon enough in a normal Kubernetes operation), it won't be using up any space! For the same reason, you may need to install it each time you need to debug a problem.
请记住我们讨论的入口、服务、部署和单元的链条，从内到外找出配置错误的地方。
排除故障时，请记住，可以通过`exec`命令访问吊舱和容器，这将允许我们检查正在运行的进程、文件等。这类似于访问物理服务器的终端。您可以使用以下代码来实现这一点:
```
$ kubectl exec -it  -n  /bin/sh
```
要小心，因为 Kubernetes 集群的性质可能要求您检查一个容器中的特定容器，如果有多个容器在同一个容器中运行。
# 摘要
在本章中，我们研究了 Kubernetes 的基本概念，以及管理和协调包含我们的微服务的多个容器是多么有用。
首先，我们介绍了什么是 Kubernetes 以及它的一些高级优势。然后，我们描述了在 Kubernetes 命名法中定义集群的不同元素。这既包括物理方面(其中节点是主要的定义元素)，也包括抽象方面(例如吊舱、部署、服务和入口)，它们是我们生成工作集群所需的构建块。
我们描述了`kubectl`以及我们可以用来定义元素和通过 YAML 文件检索信息的常见操作。我们还描述了处理 Kubernetes 集群时可能出现的一些常见问题。
在下一章中，我们将定义可以在 YAML 文件中使用的不同选项，以便生成集群，并学习如何为我们的微服务示例生成 Kubernetes 集群。
# 问题
1.  什么是容器编排器？
2.  在 Kubernetes 中，什么是节点？
3.  豆荚和容器有什么区别？
4.  工作和豆荚有什么区别？
5.  我们应该何时添加入口？
6.  什么是命名空间？
7.  我们如何在文件中定义一个 Kubernetes 元素？
8.  `kubectl`的`get`和`describe`命令有什么区别？
9.  `CrashLoopBackOff`错误表示什么？
# 进一步阅读
您可以通过阅读*Kubernetes 入门-第三版*([https://www . packtpub . com/eu/虚拟化与云/入门-Kubernetes-第三版](https://www.packtpub.com/eu/virtualization-and-cloud/getting-started-kubernetes-third-edition))和*完整的 Kubernetes 指南*([https://www . packtpub . com/eu/虚拟化与云/完整-Kubernetes-指南](https://www.packtpub.com/eu/virtualization-and-cloud/complete-kubernetes-guide))了解更多关于 Kubernetes 的信息。