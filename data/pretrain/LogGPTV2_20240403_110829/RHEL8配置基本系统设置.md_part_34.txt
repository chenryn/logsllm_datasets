:::
使用可靠的事件记录协议(RELP)，您可以通过 TCP 发送和接收
`syslog`{.literal} 消息，并大大降低消息丢失风险。RELP
提供可靠的事件消息发送，这使其在无法接受消息丢失的环境中很有用。若要使用
RELP，请配置 `imrelp`{.literal} 输入模块（在服务器上运行并接收日志）和
the `omrelp`{.literal}
输出模块（在客户端上运行并将日志发送到日志记录服务器）。
::: itemizedlist
**先决条件**
-   您已在服务器和客户端系统中安装了 `rsyslog 、`{.literal} ``{.literal}
    librelp 和 rsyslog-relp``{=html} 软件包。
-   SELinux 中允许指定端口并在防火墙中打开。
:::
::: orderedlist
**流程**
1.  为可靠的远程日志记录配置客户端系统：
    ::: orderedlist
    1.  在客户端系统中，在 `/etc/rsyslog .`{.literal} d/
        目录中创建一个新的.``{=html} conf 文件，例如
        `relpcli.conf`{.literal}，并插入以下内容：
        ``` literallayout
        module(load="omrelp")
        *.* action(type="omrelp" target="target_IP" port="target_port")
        ```
        其中：
        ::: itemizedlist
        -   `target_IP`{.literal} 是日志记录服务器的 IP 地址。
        -   `target_port`{.literal} 是日志记录服务器的端口。
        :::
    2.  保存对 `/etc/rsyslog.d/relpserv.conf`{.literal} 文件的更改。
    3.  重新启动 `rsyslog`{.literal} 服务。
        ``` screen
        # systemctl restart rsyslog
        ```
    4.  可选： 如果没有启用 `rsyslog`{.literal}，请确保
        `rsyslog`{.literal} 服务在重启后自动启动：
        ``` screen
        # systemctl enable rsyslog
        ```
    :::
2.  为可靠的远程日志记录配置服务器系统：
    ::: orderedlist
    1.  在服务器系统中，在 `/etc/rsyslog .`{.literal} d/
        目录中创建一个新的.``{=html} conf 文件，例如
        `relpserv.conf`{.literal}，并插入以下内容：
        ``` literallayout
        ruleset(name="relp"){
        *.* action(type="omfile" file="log_path")
        }
        module(load="imrelp")
        input(type="imrelp" port="target_port" ruleset="relp")
        ```
        其中：
        ::: itemizedlist
        -   `log_path`{.literal} 指定消息的存储路径。
        -   `target_port`{.literal}
            是日志记录服务器的端口。使用与客户端配置文件中相同的值。
        :::
    2.  保存对 `/etc/rsyslog.d/relpserv.conf`{.literal} 文件的更改。
    3.  重新启动 `rsyslog`{.literal} 服务。
        ``` screen
        # systemctl restart rsyslog
        ```
    4.  可选： 如果没有启用 `rsyslog`{.literal}，请确保
        `rsyslog`{.literal} 服务在重启后自动启动：
        ``` screen
        # systemctl enable rsyslog
        ```
    :::
:::
::: title
**验证**
:::
要验证客户端系统是否向服务器发送信息，请按照以下步骤执行：
::: orderedlist
1.  在客户端系统中发送测试信息：
    ``` screen
    # logger test
    ```
2.  在服务器系统中，查看指定的 `log_path`{.literal} 的日志，例如：
    ``` screen
    # cat /var/log/remote/msg/hostname/root.log
    Feb 25 03:53:17 hostname root[6064]: test
    ```
    其中 `hostname`{.literal}
    是客户端系统的主机名。请注意，该日志包含输入 logger
    命令的用户的用户名，本例中为 `root`{.literal}。
:::
::: itemizedlist
**其它资源**
-   `rsyslogd(8)手册页`{.literal}.
-   `rsyslog.conf(5)`{.literal} 手册页.
-   在 [file:///usr/share/
    `doc/rsyslog/html/index.html 中安装 rsyslog-`{.literal} doc
    软件包的文档.](file:///usr/share/doc/rsyslog/html/index.html){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_configuring-a-remote-logging-solution_configuring-basic-system-settings.html#supported-rsyslog-modules_assembly_configuring-a-remote-logging-solution}支持的 Rsyslog 模块 {.title}
:::
要扩展 [**Rsyslog**]{.strong}
工具的功能，您可以使用特定的模块。模块提供额外的输入（输入模块）、输出（输出模块）和其他特定功能.模块也可以提供在加载该模块后可用的其他配置指令。
您可以使用以下命令列出系统中安装的输入和输出模块：
``` screen
# ls /usr/lib64/rsyslog/{i,o}m*
```
您可以从从 `rsyslog`{.literal}
`-doc 软件包安装的文档中查看以下页面中所有可用 rsyslog`{.literal}
模块的列表：file
[:///usr/share/doc/rsyslog/html/configuration/modules/idx_output.html](file:///usr/share/doc/rsyslog/html/configuration/modules/idx_output.html){.link}。
:::
::: section
::: titlepage
# []{#assembly_configuring-a-remote-logging-solution_configuring-basic-system-settings.html#_additional_resources_12}其它资源 {.title}
:::
::: itemizedlist
-   在 [file:///usr/share/
    `doc/rsyslog/html/index.html 中安装 rsyslog-`{.literal} doc
    软件包的文档.](file:///usr/share/doc/rsyslog/html/index.html){.link}
-   `rsyslog.conf(5)`{.literal} 和 `rsyslogd(8)man`{.literal} page。
-   [在不使用 journald 或最小 journald
    使用知识库文章的情况下配置系统日志](https://access.redhat.com/articles/4058681){.link}。
-   [RHEL
    默认日志设置对性能及其缓解方案的影响](https://access.redhat.com/articles/4095141){.link}。
:::
:::
:::
[]{#assembly_using-the-logging-system-role_configuring-basic-system-settings.html}
::: chapter
::: titlepage
# []{#assembly_using-the-logging-system-role_configuring-basic-system-settings.html#assembly_using-the-logging-system-role_configuring-basic-system-settings}第 36 章 使用日志记录系统角色 {.title}
:::
作为系统管理员，您可以使用日志记录系统角色将 RHEL
主机配置为日志服务器，从很多客户端系统收集日志。
::: section
::: titlepage
# []{#assembly_using-the-logging-system-role_configuring-basic-system-settings.html#the-logging-system-role_assembly_using-the-logging-system-role}日志系统角色 {.title}
:::
使用日志记录系统角色，您可以在本地和远程主机上部署日志配置。
要在一个或多个系统中应用日志记录系统角色，您可以在
[*playbook*]{.emphasis} 中定义日志配置。playbook 是一个或多个 play
的列表。playbook 是人类可读的，它们采用 YAML 格式编写。如需有关 playbook
的更多信息，请参阅 Ansible 文档中的 [使用
playbook](https://docs.ansible.com/ansible/latest/user_guide/playbooks.html){.link}。
您要根据 playbook 配置的系统集合在 [*清单文件中*]{.emphasis}
定义。如需有关创建和使用清单的更多信息，请参阅 Ansible
文档中的[如何构建您的清单](https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html){.link}。
日志记录解决方案提供多种读取日志和多个日志记录输出的方法。
例如，日志记录系统可接受以下输入：
::: itemizedlist
-   本地文件、
-   `systemd/journal`{.literal}，
-   网络中的另一个日志记录系统。
:::
另外，日志记录系统还可有以下输出：
::: itemizedlist
-   存储在 `/var/log`{.literal} 目录中的本地文件中的日志，
-   发送到 Elasticsearch 的日志，
-   转发到另一个日志记录系统的日志.
:::
使用 logging
系统角色，您可以组合输入和输出以适应您的场景。例如，您可以配置一个日志解决方案，将来自
`日志`{.literal}
的输入存储在本地文件中，而从文件的读取输入则转发到另一个日志记录系统，并存储在本地日志文件中。
:::
::: section
::: titlepage
# []{#assembly_using-the-logging-system-role_configuring-basic-system-settings.html#logging-system-role-parameters_assembly_using-the-logging-system-role}日志记录系统角色参数 {.title}
:::
在 Logging 系统角色 playbook 中，您可以在 `logging_inputs`{.literal}
参数中定义输入，在 `logging_outputs`{.literal} 参数中输出，以及在
`logging_flows`{.literal} 参数中输入和输出之间的关系。Logging
系统角色使用附加选项处理这些变量来配置日志记录系统。您还可以启用加密。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
目前，日志记录系统角色中唯一可用的日志记录系统是
[**Rsyslog**]{.strong}。
:::
::: itemizedlist
-   `logging_inputs`{.literal} ：日志记录解决方案输入列表。
    ::: itemizedlist
    -   `名称`{.literal} ：输入的唯一名称。在 `logging_flows`{.literal}
        中使用的：输入列表和生成的 `配置文件`{.literal} 名称的一部分。
    -   `键入`{.literal} ：输入元素的类型。type 指定与
        `roles/rsyslog/{tasks,vars}/inputs/`{.literal}
        中的目录名称对应的任务类型。
        ::: itemizedlist
        -   `基础知识`{.literal} ：输入配置来自 `systemd`{.literal}
            日志或 `unix`{.literal} 套接字的输入。
            ::: itemizedlist
            -   `kernel_message`{.literal} ：如果设置为
                `true`{.literal}，则加载 `imklog`{.literal}。默认值为
                `false`{.literal}。
            -   `use_imuxsock`{.literal}: 使用 `imuxsock`{.literal}
                而不是 `imjournal`{.literal}。默认值为
                `false`{.literal}。
            -   `ratelimit_burst`{.literal} ：可在
                `ratelimit_interval`{.literal}
                内发送的最大消息数。`如果使用_imuxsock 为`{.literal}
                false，则默认为 `20000`{.literal}。`如果`{.literal}
                `use_imuxsock 为 true，则默认`{.literal} 为 200。
            -   `ratelimit_interval`{.literal} ：评估
                `ratelimit_burst 的间隔`{.literal}.`如果使用_imuxsock 为`{.literal}
                false，则默认为 600 秒。如果 `use_imuxsock 为`{.literal}
                true，则默认为 0。0 表示关闭速率限制。
            -   `persist_state_interval`{.literal}: Journal
                状态将保留每个 `值`{.literal} 消息。默认为
                `10`{.literal}。仅在 `use_imuxsock 为`{.literal} false
                时有效。
            :::
        -   `文件`{.literal} ：输入配置来自本地文件的输入。
        -   `远程`{.literal}
            ：输入通过网络配置来自其他日志记录系统的输入。
        :::
    -   State：配置文件 `的状态`{.literal}.`存在`{.literal} 或
        `不存在`{.literal}.默认为 `present`{.literal}。
    :::
-   `logging_outputs`{.literal} ：日志记录解决方案的输出列表.
    ::: itemizedlist
    -   `文件`{.literal} ：输出将输出配置到本地文件.
    -   `转发`{.literal} ：输出配置输出到另一日志记录系统.
    -   `remote_files`{.literal}
        ：输出配置从另一个日志记录系统到本地文件的输出。
    :::
-   `logging_flows`{.literal} ：定义
    `logging_inputs 和 logging_outputs`{.literal} ``{=html}
    之间关系的流列表。`logging_flows`{.literal} 变量具有以下键：
    ::: itemizedlist
    -   `名称`{.literal} ：流的唯一名称
    -   `输入`{.literal} ： `logging_inputs`{.literal} 名称值列表
    -   `输出`{.literal} ： `logging_outputs`{.literal} 名称值列表。
    :::
:::
::: itemizedlist
**其它资源**
-   在
    `/usr/share/ansible/ roles/rhel-system-roles.logging/README.html 中安装 rhel`{.literal}
    -system-roles``{=html}软件包的文档
:::
:::
::: section
::: titlepage
# []{#assembly_using-the-logging-system-role_configuring-basic-system-settings.html#applying-a-local-logging-system-role_assembly_using-the-logging-system-role}应用本地日志记录系统角色 {.title}
:::
按照以下步骤准备和应用 Red Hat Ansible Engine
playbook，在一组单独机器上配置日志记录解决方案。每台机器都会在本地记录日志。
::: itemizedlist
**先决条件**
-   [*访问一个或多个受管节点*]{.emphasis}，它们是您要使用日志记录系统角色配置的系统。
-   [*对控制节点的访问和权限*]{.emphasis}，这是 Red Hat Ansible Engine
    配置其他系统的系统。
    在控制节点上：
    ::: itemizedlist
    -   Red Hat Ansible Engine 已安装。
    -   `rhel-system-roles`{.literal} 软件包已安装。
    -   列出受管节点的清单文件。
    :::
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
您不必安装 `rsyslog`{.literal} 软件包，因为在部署时系统角色会安装
`rsyslog`{.literal}。
:::
::: orderedlist
**流程**
1.  创建定义所需角色的 playbook:
    ::: orderedlist
    1.  创建新 YAML 文件，并在文本编辑器中打开，例如：
        ``` screen
        # vi logging-playbook.yml
        ```
    2.  插入以下内容：
        ``` screen
        ---
        - name: Deploying basics input and implicit files output
          hosts: all
          roles:
            - rhel-system-roles.logging
          vars:
            logging_inputs:
              - name: system_input
                type: basics
            logging_outputs: