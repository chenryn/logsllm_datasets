    ... ...
源码`source/tools/ManualExamples/malloctrace.cpp`:
    #include "pin.H"
    #include 
    #include 
    using std::cerr;
    using std::endl;
    using std::hex;
    using std::ios;
    using std::string;
    /* ===================================================================== */
    /* Names of malloc and free */
    /* ===================================================================== */
    #if defined(TARGET_MAC)
    #define MALLOC "_malloc"
    #define FREE "_free"
    #else
    #define MALLOC "malloc"
    #define FREE "free"
    #endif
    /* ===================================================================== */
    /* Global Variables */
    /* ===================================================================== */
    std::ofstream TraceFile;
    /* ===================================================================== */
    /* Commandline Switches */
    /* ===================================================================== */
    KNOB KnobOutputFile(KNOB_MODE_WRITEONCE, "pintool", "o", "malloctrace.out", "specify trace file name");
    /* ===================================================================== */
    /* ===================================================================== */
    /* Analysis routines                                                     */
    /* ===================================================================== */
    VOID Arg1Before(CHAR* name, ADDRINT size) { TraceFile 
    #include "pin.H"
    using std::string;
    KNOB KnobOutputFile(KNOB_MODE_WRITEONCE, "pintool", "o", "malloc_mt.out", "specify output file name");
    //==============================================================
    //  Analysis Routines
    //==============================================================
    // Note:  threadid+1 作为PIN_GetLock()的参数使用，它的值也就是lock的值，所以不能为0
    // lock会序列化对输出文件的访问。
    FILE* out;
    PIN_LOCK pinLock;
    // 每次创建线程，该routine都会被调用执行。
    VOID ThreadStart(THREADID threadid, CONTEXT* ctxt, INT32 flags, VOID* v)
    {
        PIN_GetLock(&pinLock, threadid + 1); // 加锁
        fprintf(out, "thread begin %d\n", threadid);
        fflush(out);
        PIN_ReleaseLock(&pinLock);  // 解锁
    }
    // 每次销毁线程，该routine都会被调用执行
    VOID ThreadFini(THREADID threadid, const CONTEXT* ctxt, INT32 code, VOID* v)
    {
        PIN_GetLock(&pinLock, threadid + 1);
        fprintf(out, "thread end %d code %d\n", threadid, code);
        fflush(out);
        PIN_ReleaseLock(&pinLock);
    }
    // 每次调用malloc函数，该routine都会被调用执行
    VOID BeforeMalloc(int size, THREADID threadid)
    {
        PIN_GetLock(&pinLock, threadid + 1);
        fprintf(out, "thread %d entered malloc(%d)\n", threadid, size);
        fflush(out);
        PIN_ReleaseLock(&pinLock);
    }
    //====================================================================
    // Instrumentation Routines
    //====================================================================
    // 对每个image都执行
    VOID ImageLoad(IMG img, VOID*)
    {
        RTN rtn = RTN_FindByName(img, "malloc");
        if (RTN_Valid(rtn))
        {
            RTN_Open(rtn);
            RTN_InsertCall(rtn, IPOINT_BEFORE, AFUNPTR(BeforeMalloc), IARG_FUNCARG_ENTRYPOINT_VALUE, 0, IARG_THREAD_ID, IARG_END);
            RTN_Close(rtn);
        }
    }
    // 在结束时执行一次
    VOID Fini(INT32 code, VOID* v) { fclose(out); }
    /* ===================================================================== */
    /* Print Help Message                                                    */
    /* ===================================================================== */
    INT32 Usage()
    {
        PIN_ERROR("This Pintool prints a trace of malloc calls in the guest application\n" + KNOB_BASE::StringKnobSummary() + "\n");
        return -1;
    }
    /* ===================================================================== */
    /* Main                                                                  */
    /* ===================================================================== */
    int main(INT32 argc, CHAR** argv)
    {
        // 初始化pin的lock
        PIN_InitLock(&pinLock);
        // 初始化pin
        if (PIN_Init(argc, argv)) return Usage();
        PIN_InitSymbols();
        out = fopen(KnobOutputFile.Value().c_str(), "w");
        // 注册ImageLoad函数
        IMG_AddInstrumentFunction(ImageLoad, 0);
        // 注册线程创建或结束时的分析routine
        PIN_AddThreadStartFunction(ThreadStart, 0);
        PIN_AddThreadFiniFunction(ThreadFini, 0);
        // 注册程序退出时的fini函数
        PIN_AddFiniFunction(Fini, 0);
        // 开始执行，不返回
        PIN_StartProgram();
        return 0;
    }
### **_12\. 使用TLS(Thread Local Storage)_**
功能：可以使工具创建线程特定的数据
执行和查看输出：
    $ ../../../pin -t obj-ia32/inscount_tls.so -- obj-ia32/thread_lin
    $ head
    Count[0]= 237993
    Count[1]= 213296
    Count[2]= 209223
    Count[3]= 209223
    Count[4]= 209223
    Count[5]= 209223
    Count[6]= 209223
    Count[7]= 209223
    Count[8]= 209223
    Count[9]= 209223
源码`source/tools/ManualExamples/inscount_tls.cpp`：
    #include 
    #include 
    #include "pin.H"
    using std::cerr;
    using std::cout;
    using std::endl;
    using std::ostream;
    using std::string;
    KNOB KnobOutputFile(KNOB_MODE_WRITEONCE, "pintool", "o", "", "specify output file name");
    INT32 numThreads = 0;
    ostream* OutFile = NULL;
    // 强制每个线程的数据存储在自己的数据缓存行中，确保多线程不会发生同一数据缓存行的竞争问题。
    // 避免错误共享的问题。
    #define PADSIZE 56 // 64 byte line size: 64-8
    // 运行的指令计数
    class thread_data_t
    {
      public:
        thread_data_t() : _count(0) {}
        UINT64 _count;
        UINT8 _pad[PADSIZE];
    };
    // 存储在线程中的访问TLS的key，只在main函数中初始化一次
    static TLS_KEY tls_key = INVALID_TLS_KEY;
    // 该函数在每个block前调用
    VOID PIN_FAST_ANALYSIS_CALL docount(UINT32 c, THREADID threadid)
    {
        thread_data_t* tdata = static_cast(PIN_GetThreadData(tls_key, threadid));
        tdata->_count += c;
    }
    VOID ThreadStart(THREADID threadid, CONTEXT* ctxt, INT32 flags, VOID* v)
    {
        numThreads++;
        thread_data_t* tdata = new thread_data_t;
        if (PIN_SetThreadData(tls_key, tdata, threadid) == FALSE)
        {
            cerr (PIN_GetThreadData(tls_key, threadIndex));
        *OutFile _count << endl;
        delete tdata;
    }
    // 程序退出时调用
    VOID Fini(INT32 code, VOID* v) { *OutFile << "Total number of threads = " << numThreads << endl; }
    /* ===================================================================== */
    /* Print Help Message                                                    */