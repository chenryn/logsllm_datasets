happens usually because the class of the VTable is exported and all
virtual functions can only be decided at runtime. We deal with this
issue by following the dynamic relocation table present in COTS
binaries.
Once all VTable assignment instructions and VTable boundaries
have been determined, we relocate each VTable to a new data sec-
tion and modify the corresponding vtable assignment instructions.
This process eliminates any prior knowledge of an attacker about
the original binary.
3.2.4 Exported functions and related code pointers
Remapping exported functions is necessary because these pointers
will be propagated by the dynamic loader into the Global Offset
Tables (GOT) of dependent modules. Attackers may use this in-
formation to infer other module base addresses. These pointers
are remapped by updating the dynamic symbol table in each ELF
image at runtime. Other than exported functions, there are several
sections, such as .init_array, .fini_array, .ctors, and .dtors,
which are known to contain code pointers.
3.2.5 Protecting jump table pointers
Code pointers in jump tables may point to useful gadgets. Because
jump table pointers are computed in a register and used immediately
afterwards, we rely on a simpler strategy that eliminates them
from program memory. This is achieved by transforming code
pointers used in jump tables and putting them into a new table
along with the instrumented code (this means that the jump table is
hidden from the program in the same manner as the instrumented
code). In addition, we change indirect jumps that look up old jump
tables to ensure that they check the corresponding new tables in
the instrumented code. By doing so, jump tables will enjoy better
performance since no translation is needed. In addition, jump table
targets are eliminated from the address translation table to improve
the strength of the CFI policy.
Table 2: Code pointer remapping coverage. Column 2 shows the total number
of code pointers, columns 3–6 the number of remapped code pointers, and
the last column the percentage of code pointers that have been protected.
Name
Total Return
400.perlbench
401.bzip2
403.gcc
429.mcf
445.gobmk
456.hmmer
458.sjeng
462.libquantum
464.h264ref
471.omnetpp
473.astar
433.milc
435.gromacs
437.leslie3d
444.namd
447.dealII
450.soplex
453.povray
454.calculix
470.lbm
482.sphinx3
libc.so.6
Total
17548
512
58264
146
12220
4426
1436
585
3738
21116
535
1881
8491
693
1343
48927
6668
13887
19318
126
2930
26719
251509
14101
365
47847
94
9245
3624
1124
448
3059
16700
411
1561
6936
631
1157
37679
5237
10559
17699
79
2530
12117
193203
Jump Exception Exported
Table
1542
48
6496
0
266
223
140
1
89
956
3
38
321
0
8
2801
570
1702
206
0
5
12432
27847
Handlers
0
0
0
0
0
0
0
0
0
3708
0
0
0
0
16
6632
493
103
0
0
0
0
10952
%
Funcs. Remapped
89%
80%
93%
66%
78%
87%
88%
77%
84%
94%
78%
85%
86%
91%
87%
89%
91%
89%
92%
64%
87%
98%
90.7%
3
2
7
2
3
2
3
2
3
23
2
2
19
2
3
10
5
26
2
2
2
2163
2288
4 EVALUATION
Since the base PSI platform works only on x86-32 Linux, we also
implemented SECRET on the same platform. We implemented both
segmentation-based and randomization-based protection for the
shadow code and all related data structures. Our evaluation was
carried out using SPEC benchmarks and a few real-world applica-
tions, including GUI applications such as Open Office. Unless stated
otherwise, experiments were performed on a 32-bit Ubuntu system
equipped with a Core i5 CPU and 4 GB RAM.
4.1 Effectiveness Evaluation
4.1.1 Code Pointer Remapping
We have evaluated the effectiveness of code pointer remapping on
the SPEC benchmark programs as well as libc. Table 2 shows the
fraction of code pointers that were remapped, for different types
of pointers. Our analysis illustrates that the majority (90%) of code
pointers have been handled, including all return addresses, all C++
virtual function pointers, all jump table pointers, and a subset of
function pointers, as described in Section 3.2.
As described in Section 3.2.1, we use a conservative approach for
identifying code pointers for remapping. In particular, for constants
that appear to be code pointers but cannot be confirmed using the
first two steps described in Section 3.2.1, we leave them as is, and
do not remap them. This is the reason why approximately 10% of
the code pointers is left unremapped in the results shown in Table 2.
However, since about 90% of the code pointes have been remapped,
the ability of attackers to construct successful ROP payloads is
significantly constrained. To support this claim, we performed an
an experimental evaluation using ROP payload generation toolkits.
We used ROPGadget [56] and Q [58] in this evaluation. Neither
tool was able to generate meaningful attack payloads using only
the gadgets beginning at unremapped code pointers.
Table 3: Number of remapped vtables and virtual functions.
Table 4: Coverage of exception handling (DWARF) information.
Name
omnetpp
soplex
dealII
povray
namd
astar
# of Virtual Tables
120
29
727
28
4
1
# of Virtual Functions
2572
790
2454
86
8
3
Another interesting point is the experiment on libc.so (last line
in the table), as libc.so is a low level binary file that is compiled
from C code mixed with inline assembly code. Our system has
remapped 98% of code pointers. In addition, our experiment shows
that 56K lines of assembly code have been compiled into libc.so. In
this fraction of glibc code, there are 675 code pointers generated
by call instructions. All these code pointers are protected by code
pointer remapping.
Table 3 shows the results of remapping vtable and virtual func-
tion pointers. In particular, we have remapped all vtable and virtual
function pointers in the C++ benchmark programs used in our evalua-
tion, as well as their dependent libraries. As a result, advanced code
reuse attacks such as COOP [57] are defeated due to the random-
ization of virtual table addresses, as the remapped virtual tables
are located in a new data segment independent from the origi-
nal code. Consequently, it becomes challenging to retrieve further
information even if some of vtable pointers are leaked.
As previously discussed, all code pointers in a module are ran-
domly remapped to the shadow address space. To properly support
C++ exception handling, code pointer remapping is performed ac-
cording to the DWARF frame description entry (FDE), i.e., code
pointers within a piece of code covered by a single FDE (usually
a function) should be remapped into a contiguous region in the
randomized address space. As a result, if one of the return addresses
within an FDE is leaked, then the entropy of other return addresses
within the same FDE goes down to the size of that FDE in the ran-
domized address space. Our experiments show that the entropy of
these return addresses is 20 bits on average, while the entropy of
other remapped pointers can be 32 bits.
4.1.2 Identification of embedded data
We evaluated the ability of our static analysis for discovering embed-
ded data within code sections. As described earlier, the .eh_frame
section provides information on how to unwind stack frames. The
covered region consists of a list of debugging units, each of which
usually corresponds to a function or a code snippet. The frame
description entry (FDE) structure includes the range of the code
in each case. Table 4 shows the exception handling information
coverage for a set of SPEC binaries and Linux libraries. We summed
up the ranges of all entries and show in the second column how
much code was covered by the DWARF information. On average,
97.17% of the code is covered, which means that accurate function
boundary information is available for almost all of the functions of
these binaries.
With those boundaries as starting points, SECRET’s static analy-
sis pass can follow control flows within the already known regions
and discover any missing code, as well as data in between and in
Name
spec2006
libc.so.6
libm.so.6
libgfortran.so.3
libquadmath.so.0
libstdc++.so.6
libcrypto.so.1.0.0
Average
.eh_frame Coverage
97.54%
97.87%