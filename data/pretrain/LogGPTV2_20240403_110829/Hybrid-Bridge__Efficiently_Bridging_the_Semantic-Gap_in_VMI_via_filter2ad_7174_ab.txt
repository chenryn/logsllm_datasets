inspection tools in a trusted VM to investigate an untrusted
system memory using native system calls and APIs as if they
are investigating the trusted VM. HYBRID-BRIDGE achieves
this goal by using data redirection (or forwarding) at kernel
level. As shown in Fig. 2, there are three key components
inside HYBRID-BRIDGE: SLOW-BRIDGE, FAST-BRIDGE and
FALLBACK. SLOW-BRIDGE and FAST-BRIDGE are both capa-
ble of redirecting kernel data and enable commodity inspection
tools to investigate the untrusted system memory. The main dif-
ference, as indicated by their names, is the lower performance
overhead in FAST-BRIDGE compared to SLOW-BRIDGE.
Given an introspection tool T , as illustrated in Fig. 2,
HYBRID-BRIDGE executes it
in FAST-BRIDGE. With the
Meta-Data provided by SLOW-BRIDGE and memoized by
FALLBACK, FAST-BRIDGE enables T to investigate untrusted
system memory with low overhead. In case that the Meta-Data
is not rich enough to guide FAST-BRIDGE, FAST-BRIDGE will
suspend its VM execution, and request the trusted VM inside
SLOW-BRIDGE to execute T with the same untrusted memory
snapshot as input through FALLBACK component. Similar to
VMST, SLOW-BRIDGE monitors the execution of T and uses
a taint analysis engine to infer the data redirection policy
for each instruction. These inferred information, being part
3
lenges:
•
•
of the Meta-Data, are shared with FAST-BRIDGE. As soon as
FAST-BRIDGE receives the Meta-Data from SLOW-BRIDGE,
it resumes the execution of T .
As a concrete example, assume end users use ps to perform
the introspection of a memory snapshot from an untrused OS.
As illustrated in Fig. 2, if the Meta-Data is sufﬁcient (provided
in step ∞), there will be no FALLBACK and FAST-BRIDGE
executes normally as in step ¨. Otherwise, FAST-BRIDGE will
be suspended, and FALLBACK will be invoked (step ≠) along
with the snapshot of the guest VM and the command log (that
is ps). Next in step Æ, SLOW-BRIDGE will be started with
the guest snapshot and the inspection command (namely ps
in this case) to produce the missing Meta-Data. After SLOW-
BRIDGE ﬁnishes (step Ø), it will send the Meta-Data for
training memoization and inform the FALLBACK to resume
the execution of FAST-BRIDGE with the new Meta-Data (step
∞). Step ≠ to ∞ will be repeated whenever the Meta-Data is
missing in FAST-BRIDGE. Except FAST-BRIDGE, the SLOW-
BRIDGE and FALLBACK components are both invisible to end
users.
HYBRID-BRIDGE requires that both trusted VMs in FAST-
BRIDGE and SLOW-BRIDGE deploy the same OS version as
the untrusted VMs. The speciﬁc OS version can be identiﬁed
through guest OS ﬁngerprinting techniques (e.g., [48], [24]).
In order to efﬁciently bridge the semantic gap and turn the
commodity monitoring tools into introspection tools, HYBRID-
BRIDGE faces two new challenges: (1) how to pass the control
ﬂow to the hypervisor and to orchestrate FAST-BRIDGE,
SLOW-BRIDGE, and FALLBACK in a seamless way, and (2)
how to identify both the data and instructions that should
be redirected. We will present how these two challenges are
addressed by FAST-BRIDGE and SLOW-BRIDGE in §III and
§IV, respectively.
Threat Model. HYBRID-BRIDGE shares the same threat
model with both VIRTUOSO and VMST; namely, it defeats
directly those attacks that
tamper with the in-guest native
inspection software and the guest kernel code (though facing
more attack vectors than VIRTUOSO as discussed in §VIII).
Note that there are three type of VMs involved in HYBRID-
BRIDGE: a guest VM that runs guest OS for a particular
application (e.g., a web or database service), a secure VM that
runs in FAST-BRIDGE, and another secure VM that runs in
SLOW-BRIDGE. We distinguish between trusted and untrusted
VMs. The VM directly faced by attackers is the guest VM and
we call it untrusted VM. The other two VMs are maintained
by hypervisor and are invisible to attackers and we call them
trusted VMs. While HYBRID-BRIDGE can guarantee there
is no untrusted code redirected from untrusted VM to the
local trusted VM, it will not defend against those attacks that
subvert the hypervisors through other means (e.g., exploiting
hypervisor vulnerabilities).
Also note that
in the rest of the paper, we refer the
trusted VMs or secure VMs as those (1) maintained by
cloud providers, (2) installed with clean OS (the same ver-
sion with the guest OS), and (3)
invisible to attackers.
This can be achieved because cloud providers can physi-
cally isolate HYBRID-BRIDGE with guest VMs. For untrusted
VMs,
they could be any type of product VMs (including
KVM/Xen/HyperV, etc.) that offer services to cloud users.
III. FAST-BRIDGE
FAST-BRIDGE is designed with fast performance in mind
and runs in hardware-based virtualization (e.g., KVM) to offer
a VMI solution. It is built based on the key insight that each
kernel instruction executed in a speciﬁc system call invocation
S shows a consistent data redirectable behavior for all invo-
cations of S (which forms the basis of the memoization [39]).
For example, sys_getpid in Linux kernel 2.6.32.8 has 14
instructions that need to be redirected by FAST-BRIDGE. These
14 instructions that will always touch the redirectable data are
called redirectable instructions.
To this end, FAST-BRIDGE needs to address two chal-
Performing the data redirection. For example, for
these 14 instructions in sys_getpid, FAST-BRIDGE
needs to redirect their memory access from untrusted
VM to trusted VM. While there is no dynamic binary
instrumentation engine in KVM, FAST-BRIDGE is
still capable of redirecting the data access for these
instructions at hypervisor layer transparently. This
capability is achieved by manipulating the physical to
virtual address translation and dynamic code patching.
Identifying the redirectable instructions. To iden-
tify the redirectable instruction, it often requires a
taint analysis engine [19], which is heavy and slow.
Therefore, we propose the decoupling of the dynamic
taint tracking engine, the primary contributor to the
performance overhead of VMST, from FAST-BRIDGE
and implant it into SLOW-BRIDGE. As a result, SLOW-
BRIDGE executes the expensive taint analysis and
provides the list of redirectable instructions for FAST-
BRIDGE to bridge the semantic gap efﬁciently.
FAST-BRIDGE is depicted in the right hand side of Fig.
2. In this section, we present the detailed design of FAST-
BRIDGE.
A. Variable Redirectability
A redirectable variable is deﬁned as the data in a kernel
data structure that is accessed by inspection tools to reveal
the system status. These data are redirectable because if a
monitoring tool
in a secure VM is fed with redirectable
data from untrusted VM, it will report the internal status of
untrusted VM as if for the secure VM.
The most intuitive way to identify redirectable variables is
by monitoring the behavior of introspection tools. As discussed
in §II, an introspection tool usually starts an investigation by
ﬁrst accessing speciﬁc kernel global variables and then follows
them to traverse the kernel internal data structures. These
speciﬁc global variables and internal data structures, traversed
through pointer dereferences, would belong to redirectable
variables. We will describe how SLOW-BRIDGE uses a taint
tracking engine to identify redirectable variables in greater
details in §IV-B.
B. Instruction Redirectability
An instruction that accesses redirectable variable is deﬁned
as redirectable instruction. In general, kernel instructions are
4
divided into six categories based on how they interact with the
redirectable variables. Since SLOW-BRIDGE contains a taint
analysis engine, it is able to categorize the instructions. The
details on how SLOW-BRIDGE categorizes them are presented
in §IV-C. In the following, we describe what these categories
are and why we have them:
1) Redirectable: An instruction whose operand always ac-
cesses redirectable variables is called redirectable in-
struction. Instructions at line 5, 6 and 7 in Fig. 1 (a) are
the samples of such instructions, and the corresponding
redirectable variables for these instructions are depicted
in Fig. 1 (b). FAST-BRIDGE forwards all the memory ac-
cess of redirectable instructions to the untrusted memory
snapshot from the secure VM.
2) Non-Redirectable: An instruction that never interacts with
redirectable variables is categorized as non-redirectable.
For example, instructions at line 1, 3 and 8 in Fig. 1 (a)
fall into this non-redirectable instruction category. FAST-
BRIDGE conﬁnes these instructions to the memory of the
local secure VM only.
3) Semi-Redirectable: Semi-Redirectable instructions have
two memory references, and they copy data values be-
tween redirectable variables and non-redirectable vari-
ables. For instance, push[%fs:0xc17f34cc] is a
sample of such an instruction, because this push instruc-
tion reads a global redirectable variable (of interest) and
copies it to the stack which is non-redirectable.
FAST-BRIDGE forwards the redirectable variable memory
access to the untrusted memory snapshot and conﬁnes the
non-redirectable memory access to the local secure VM.
For push[%fs:0xc17f34cc], FAST-BRIDGE reads
the global variable (a redirectable variable) from the
untrusted memory snapshot and saves it on top of the
secure VM’s stack that is non-redirectable.
4) Bi-Redirectable: If an instruction shows both redirectable
and non-redirectable behavior in different execution con-
text, it is labeled as bi-redirectable. For example, function
strlen, which returns the length of a string, can be
invoked to return the length of either redirectable or non-
redirectable strings in different kernel kernel execution
context.
As such, for each invocation of a bi-bedirectable instruc-
tion, FAST-BRIDGE must determine whether to redirect
the data access (e.g., the argument of strlen) to un-
trusted memory snapshot or conﬁne it to the local secure
VM based on the execution context, which is deﬁned as
the kernel code path from the system call entry to the
point of the bi-redirectable instruction execution.
One of the key observations in HYBRID-BRIDGE is that
for a speciﬁc execution context, a bi-redirectable instruc-
tion always shows the same redirection policy. (Otherwise
the program behavior is non-deterministic). Introspection
program is deterministic: given the same snapshot,
it
should always give the same output. Therefore, we can
determine the correct data redirection policy of a bi-
redirectable instruction based on its execution context. To
this end, HYBRID-BRIDGE ﬁrst trains the data redirection
policy for each bi-bedirectable instruction (using SLOW-
BRIDGE), and then memoizes the same data redirection
policy in the next execution of the same kernel code path
in FAST-BRIDGE.
5) Neutral: Instructions in this category do not reference
memory. Instructions at line 2 and 4 of Fig. 1 (a) are
labelled as neutral instructions. Since these instructions
do not access memory, FAST-BRIDGE does not impose
any memory restriction with them.
6) Unknown: All the instructions that are not categorized
in any of above categories are called unknown. This
category is crucial for the synchronization and training
data memoization between FAST-BRIDGE and SLOW-
BRIDGE. Speciﬁcally, just before an unknown instruc-
tion gets executed, FAST-BRIDGE passes the control to
FALLBACK component to ask SLOW-BRIDGE to provide
detailed instruction categorization information for the
same snapshot. §V will describe the fall-back mechanism
in greater details.
C. Data Redirection Using Dynamic Patching
Observation. Having identiﬁed the redirectable instructions,
we must inform the CPU and let it redirect the data access
from secure-VM to untrusted VM for these instructions. We
could possibly use static kernel binary rewriting, but
this
approach faces serious challenges such as accurate disassembly
and sophisticated kernel control ﬂow analysis [49]. Then
an appealing alternative would be to use dynamic binary
instrumentation through emulation based virtualization such as
QEMU [3], but this approach suffers from high performance
overhead [19]. In contrast, we would like to run hardware
assisted virtualization such as KVM and thus we must exploit
new approaches.
Fortunately, we have a new observation and we propose
hijacking the virtual to physical address translation to achieve
data redirection in FAST-BRIDGE. In general, CPU accesses
data using their virtual addresses and the memory management
unit (MMU) is responsible to translate the virtual address
to physical address using page tables. By manipulating page
table entries, we are able to make a virtual address translate
to a different physical address. Therefore, FAST-BRIDGE can
redirect a memory access by manipulating the page table in
a way that a redirectable virtual address is translated to the
physical address of untrusted memory snapshot. FAST-BRIDGE
chooses this novel approach because it neither requires any
static binary rewriting of kernel code, nor suffers from high
overhead as of dynamic binary instrumentation. To the best of
our knowledge, we are the ﬁrst to propose such a technique
for transparent data redirection as an alternative to static binary
code rewriting or dynamic binary instrumentation.
Our Approach. More speciﬁcally, after loading an untrusted
memory snapshot, FAST-BRIDGE controls data redirection by
manipulating the physical page number in page tables. In
order to redirect memory access for a redirectable variable
v, FAST-BRIDGE updates the physical page number of the
page containing v with a physical page number of a page in
untrusted snapshot which contains the same variable v. Then
FAST-BRIDGE ﬂushes the TLB. From now on, any memory
5
e
n
L
i
r
e
b
m
u
N
n
o
i
t
c
u
r
t
s
n
I
e
p
y
T
1
2
3
4
5
6
7
8
9
10
11
12
…
36
37
NR
N
NR
N
R
R
R
NR
N
NR
NR
NR
U
U
Original 
Code Page
Non-Redirectable
Code Page
Redirectable
Code Page
:
:
c10583e0: push   %ebp
push   %ebp
int 3
c10583e1: mov
%esp,%ebp
mov
%esp,%ebp
mov
%esp,%ebp
c10583e3: push   %ebx
push   %ebx
c10583e4: sub    $0x14,%esp
sub    $0x14,%esp
int 3
$0x14,%esp
c10583e7: mov
%fs:0xc17f34cc,%ebx
c10583ea: R_386_32   current_task
int 3
VMexit
mov
%fs:0xc17f34cc,%ebx
c10583ea: R_386_32   current_task
c10583fe: mov
0x220(%ebx),%eax
int 3
c1058404: mov
0x23c(%eax),%eax
int 3
mov    0x220(%ebx),%eax
mov
0x23c(%eax),%eax
c105840a: call   c1065660 
call   c1065660 
VMexit
int 3
c105840f: add    $0x14,%esp
add    $0x14,%esp
$0x14,%esp
c1058412: pop    %ebx
c1058413: pop    %ebp
c1058414: ret
...
c106551a: xor
%eax,%eax
c106551c: add    $0x1c,%esp
pop    %ebx