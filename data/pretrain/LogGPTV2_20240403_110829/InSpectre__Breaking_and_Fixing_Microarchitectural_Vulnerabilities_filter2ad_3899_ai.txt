Springer, 1–20.
[45] Dan Page. 2002. Œeoretical use of cache memory as a cryptanalytic side-
channel. IACR Cryptology ePrint Archive 2002, 169 (2002).
17
[52] Stephan van Schaik, Alyssa Milburn, Sebastian ..sterlund, Pietro Frigo, Giorgi
Maisuradze, Kaveh Razavi, Herbert Bos, and Cristiano Giuﬀrida. 2019. RIDL:
Rogue In-ﬂight Data Load. In S&P.
[53] Guanhua Wang, Sudipta ChaŠopadhyay, Arnab Kumar Biswas, Tulika Mitra,
and Abhik Roychoudhury. 2019. KLEESPECTRE: Detecting Information Leak-
age through Speculative Cache AŠacks via Symbolic Execution. arXiv preprint
arXiv:1909.00647 (2019).
[54] G. Wang, S. ChaŠopadhyay, I. Gotovchits, T. Mitra, and A. Roychoudhury. 2019.
oo7: Low-overhead Defense against Spectre aŠacks via Program Analysis. IEEE
Transactions on So‡ware Engineering (2019).
[55] Oﬁr Weisse, Ian Neal, Kevin Loughlin, Œomas F Wenisch, and Baris Kasikci.
2019. NDA: Preventing Speculative Execution AŠacks at Œeir Source. In Pro-
ceedings of the 52nd Annual IEEE/ACM International Symposium on Microarchi-
tecture. ACM, 572–586.
[56] Jonathan Woodruﬀ, Robert NM Watson, David Chisnall, Simon W Moore,
Jonathan Anderson, Brooks Davis, Ben Laurie, Peter G Neumann, Robert Nor-
ton, and Michael Roe. 2014. Œe CHERI capability model: Revisiting RISC in an
age of risk. In 2014 ACM/IEEE 41st International Symposium on Computer Archi-
tecture (ISCA). IEEE, 457–468.
[57] Yuan Xiao, Yinqian Zhang, and Mircea-Radu Teodorescu. 2020. SPEECHMINER:
A Framework for Investigating and Measuring Speculative Execution Vulnera-
bilities. In NDSS.
[58] Yuval Yarom and Katrina Falkner. 2014. FLUSH+ RELOAD: a high resolution,
low noise, L3 cache side-channel aŠack. In 23rd USENIX Security Symposium.
719–732.
[59] Yuval Yarom, Daniel Genkin, and Nadia Heninger. 2017. CacheBleed: a timing
aŠack on OpenSSL constant-time RSA. Journal of Cryptographic Engineering 7,
2 (2017), 99–112.
[60] Drew Zagieboylo, Gookwon Edward Suh, and Andrew C Myers. 2019. Using
Information Flow to Design an ISA that Controls Timing Channels. Technical
Report.
A PROOFS
A.1 Correctness of t-equivalence: Lemma 5.3
If σ1 ∼t σ2 and the t’s microinstruction in σ1 is ι = t ← c?o, then
deps(t , σ1) = deps(t , σ2), [c]σ1 = [c]σ2, and if [ι]σ1 = (v1, l1) and
[ι]σ2 = (v2, l2) then v1 = v2.
Proof. For non-load operations and guards the proof is triv-
ial, since their semantics only depends on the value of the bound
names of the operation and guard. Œese names are statically iden-
tiﬁed from c and o and their value is the same in σ1 and σ2 by
deﬁnition of ∼t . For loads, the proof relies on showing that for
every state σ , str-act(σ |T , t ) = str-act(σ |T , t ), where T = deps(t , σ ).
Let t ′ ∈ str-act(σ , t ). By deﬁnition, t ′ and its bound names are in
T , therefore their values are equal in σ and σ |T and hence t ′ ∈
str-may(σ |T , t ). Also, by deﬁnition of deps, all names referred to
by conditions and addresses of subsequent stores of t ′ are in T .
Œerefore if there is no subsequent store that overwrites t ′ (i.e.,
t ′′ ← c ′′?st τ t ′′
a ) =
σ (ta ))) then there is no store overwriting t ′ in σ |T and hence t ′ ∈
str-act(σ |T , t ).
v such that [c ′′]σ and (σ (t ′′
a ) = σ (t ) ∨ σ (t ′′
a t ′′
(cid:3)
A.2 OoO Memory Consistency: ‡eorem 6.3
To prove that −→→ and −→ are memory consistent we demonstrate
a reordering lemma, which allows to commute transitions if the
(n + 1)-th transition modiﬁed name t2, n-th transition modiﬁed
name t1, and t2 
t1 > t2. Œerefore t2 ← c?o ∈ I0.
(2) Similarly, dom(ˆs1) ⊆ {t1}, ˆC1 ⊆ {t1}, and ˆF1 ⊆ {t1}.
Œe proof continues by case analysis over the transition rule α2.
(Case Exe) Œe hypothesis of the rule ensure that s1(t2)↑, [c]s1, and
[ι2]σ1 = (v, l2). Œe conclusion of the rule ensures that ˆs2 = {t2 7→
v }, ˆC2 = ∅, ˆF2 = ∅, and ˆI2 = ∅.
Œe proof that t2 can be executed in σ0 relies on the fact that all
free names of the instruction t2 must be smaller than t2. Property
(2), f n(ι2)  t2. To prove that α2 , Cmt(a,v ′) we proceed
by contradiction. If α2 = Cmt(a, v ′) then t2  t2.
To complete the proof we must show that ˆI2 = ∅. We proceed by
contradiction: if ˆI2 , ∅ then α2 = Ftc, hence this transition fetched
t2 and t2 < F0. However, t2 < t1 and both update the program
counter, therefore t2 ∈ bn(str-may(σ0, t1)). Œis contradicts the
hypothesis that bn(str-may(σ0, t1)) ⊆ F0.
Finally, we can apply rule Ftc to show that σ ′ l1
−→
(I ′ ∪ translate(v, max(I ′), s ′