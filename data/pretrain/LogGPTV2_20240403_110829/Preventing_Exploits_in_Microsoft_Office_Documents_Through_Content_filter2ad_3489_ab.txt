4.1 Content Randomization in .doc Files
The most promising opportunity to apply DCR to .doc ﬁles is at the raw doc-
ument ﬁle level. Malicious content is often stored in the raw document ﬁle and
accessed through the ﬁlesystem during exploitation. Typically, ﬁle level access
of malicious content occurs later in the exploitation phase and this content is
usually malicious code, whether it be shellcode or a portable executable. Sourc-
ing malicious content from the ﬁle is surprisingly common in document based
exploits.
The authors observed obfuscated portable executables embedded in the raw
document ﬁle of 96 % of the malicious Oﬃce 2003 documents in the Contagio
document corpus [17]. This set of malicious documents, observed in targeted
attacks, includes ﬁles that were 0 day attacks when collected. Retrieving addi-
tional malicious content from the raw document ﬁle is also common in PDF ﬁles
used in targeted email attacks, while web based PDF exploits usually load their
ﬁnal payload through web download.
File level access most frequently is achieved through standard ﬁle access
mechanisms, such as reading the ﬁle handle. Because most client object exploits,
including document exploits, are triggered by opening a malicious ﬁle, a handle
to the exploit ﬁle is usually already available in the reader application. While
the malicious content may be embedded raw into the document ﬁle, exploits
Preventing Exploits in Microsoft Oﬃce Documents
231
Fig. 1. OLE Fragmentation: The order of blocks in data streams is randomized, frag-
menting the payloads
typically employ signature matching evasion techniques, such as trivial XOR
encryption. The malicious content accessed through the raw document is some-
times accessed by oﬀset, but typically an egg hunt is employed, where the ﬁle
is searched for a speciﬁc marker. In most .doc ﬁles, we observed the shellcode
and portable executables embedded within the bounds of the structure of the
document, but simply appending malicious content to the end of an existing
document is possible and is used sometimes.
We defeat raw ﬁle reﬂection by malware by performing ﬁle level content
fragmentation (DCFR). OLE based ﬁle formats such as .doc ﬁles are especially
accommodating of this technique. Typically, the streams in an OLE ﬁle are
sequentially stored. However, re-ordering can occur and is expressly allowed.
To implement this approach we built an OLE ﬁle block randomizer. It simply
creates a new OLE ﬁle functionally equivalent to the original except that the
layout of the data blocks is randomized. This is accomplished by randomizing the
location of the data blocks, and then adjusting the sector allocation tables and
directory data structures accordingly. This is essentially the inverse of running
a ﬁlesystem defragmentation utility. An example of fragmentation of three OLE
data streams is given in Fig. 1. Note that the blocks in the data streams are
typically sequentially arranged. We randomize the order of the data blocks across
all the streams. In the event that any data exists in the raw document ﬁle stream
but is not contained in valid OLE sectors, the data is not transfered to the new
randomized document.
Re-ordering data blocks, or DCFR, in an OLE provides a consistently eﬀec-
tive and quantiﬁable way to prevent access to malicious content in raw document
ﬁles without impacting normal use. Since OLE ﬁles do not implement any form
of encoding at the container level, DCER is not a practical option.
4.2 Content Randomization in .docx Files
We also studied the use of document content in .docx exploits. We found a
small number of OOXML ﬁles where the raw zip container was accessed for a
malicious payload. These attacks simply included the malicious payload, usually
232
C. Smutz and A. Stavrou
Fig. 2. ZIP Encoding Randomization: The order and compression level of data streams
is randomized
an encrypted portable executable, in the zip ﬁle without compression. It is then
trivially located in the ﬁle through an egg hunt, similar to that done in OLE ﬁles.
We devised two simple ways to introduce entropy in the OOXML ﬁle. First,
we randomized the order of the ﬁles in the zip archive. This defeats access based
on oﬀset. We also re-compressed the zip data streams, randomly selecting one
of four deﬂate compression levels (superfast, fast, normal, maximum). Figure 2
demonstrates transformation of a simple zip ﬁle with three subﬁles. Note that the
order of the ﬁles in archive and the compression used on each ﬁle is randomized.
Oﬃce uses superfast compression, the lowest compression level, so our archive
randomization usually results in smaller ﬁles. Compression level randomization is
enough to foil simple access to ﬁle content, even if an egg hunt is used. Therefore,
content encoding randomization (DCER) applied at the ﬁle level is applicable
to some .docx exploits.
However, most .docx exploits gain access to the ﬁnal malware payload through
a web download or through an egg hunt in memory. We found a common method
of performing scriptless heap sprays in contemporaneous exploits that can be
mitigated by DCFR [1,12]. In this heap spray technique, ﬁrst observed in CVE-
2013-3906, many ActiveX objects containing primarily heap spray data are read
when the document is opened and loaded into the heap. These objects are loaded
into memory raw, without interpretation or parsing. It is not clear why these
objects are loaded into memory in this manner, while other embedded ﬁles do
not receive the same treatment. Dynamic analysis by the authors conﬁrmed
that these embedded ActiveX objects are loaded directly in memory, while most
other data from the document is not loaded into memory wholesale. Even if
these ActiveX controls are not activated, they represent a simple and eﬀective
way to introduce content directly into the memory of the reader program.
Heap sprays are used to defeat ASLR. They ensure that the malicious pay-
load can be located with high certainty through duplication of the malicious
payload across a large memory address range, even if the address of a single
copy can not be predicted. Only one copy of the malicious payload is needed for
successful exploitation. Traditionally, heap sprays contain shellcode. However,
DEP prevents execution from the heap. In the case of exploits targeting systems
Preventing Exploits in Microsoft Oﬃce Documents
233
with DEP, the heap is commonly sprayed with ROP gadgets and a stack pivot is
used to move the stack into the sprayed region. These attacks successfully evade
ASLR and DEP. We observed this technique for scriptless heap sprays used for
both traditional shellcode and to implement fake stacks implementing malicious
ROP chains. While these two techniques have been observed, this ability to easily
and predictably inﬂuence the reader process’s memory could be used for other
attacks such as object corruption exploits. This general technique is also used
to load single copies of arbitrary content, including portable executables, into
memory which is later egg-hunted and used in exploits.
Since these ActiveX objects use the same OLE container format that Oﬃce
2003 documents use, we use the same OLE fragmentation techniques to defeat
these scriptless heap sprays. We randomized the layout of all OLE ﬁles embedded
in .docx ﬁles, regardless of their role. When these objects are loaded into RAM,
the content is scrambled, but can still be retrieved by a document reader which
implements the OLE decoding routines. These scriptless heap sprays in .docx
ﬁles represent an example of how document content directly inﬂuences reader
memory.
For .docx ﬁles, we perform both ﬁle level encoding randomization and frag-
mentation of objects to be loaded into memory.
4.3 Strength of Content Randomization Mechanisms
Like other probabilistic exploit protections, one can calculate the likelihood of
exploit success in the face of brute force attacks against DCR. Methods such
as ASLR obfuscate the location of malicious payloads. Document content ran-
domization does this as well. However, content based malicious payloads are
very frequently located via egg hunts or are duplicated in heap sprays, obvi-
ating randomized relocation. In practice, the primary protection power lies in
randomization of the content representation, whether through fragmentation or
through encoding.
In the simple case, the probability of a payload that has been randomly
fragmented being in proper order is the inverse of the number of possible per-
mutations or 1/n! where n is the number of fragments. In practice, this should
be adjusted to account for other data mixed in with the malicious payload,
repetition of the malicious payloads, and other limitations or constraints. For
example, when OLE DCFR is employed, the number of fragments that inﬂuence
the possible permutations is not just the number of fragments in the malicious
payload, but includes all of the sectors that are randomized.
When we perform DCER on .docx ﬁles, we randomly select between four
deﬂate compression levels. This is adequate for all the samples we observed
where DCER has eﬀect because they all involve data streams that are orig-
inally uncompressed. This is, however, a very small number of permutations.
Part of the strength of DCER is also rooted in how diﬃcult the encoding of
the content is to reverse or circumvent. Compression makes generating a speciﬁc
post compression malicious payload more diﬃcult through transformations and
restrictions in the encoded output. For example, repeated byte sequences, such
234
C. Smutz and A. Stavrou
as the high order bytes in addresses used in ROP gadgets, are not found in com-
pressed output. Unlike straightforward fragmentation, the constraining power
of encoding is more diﬃcult to quantify. Individual implementations of deﬂate
are deterministic, but they are also allowed great latitude in how the encoding
occurs. The same data stream can have many byte level representations using
the same encoding method. If an entropy inducing compressor/encoder is used,
the number of encoding induced permutations could be quantiﬁed.
The strength of DCR lies in the ability to fragment or encode malicious
payloads in an unpredictable and constraining manner. This strength can be
quantiﬁed as proportional to the number of randomized content permutations.
We address possible DCR evasion approaches in Sect. 7.
5 Exploit Protection Evaluation
We evaluated the eﬀectiveness of our content based exploit protections on hun-
dreds of malicious Oﬃce documents sourced from VirusTotal. These documents
were downloaded daily from the recent uploads to VirusTotal over the course of
months. Our downloads were limited primarily by our monthly download limit
on VirusTotal. We obtained 64,617 unique .doc ﬁles between May 2013 and
March 2015 and 32,383 unique .docx ﬁles between November 2013 and March
2015, averaging 98 .doc and 66 .docx ﬁles per day. Of these collected docu-
ments, 40720 .doc and 2901 .docx ﬁles were labeled by at least one AV engine as
malicious in a scan conducted two weeks following initial submission. Of these
malicious documents, 1085 .doc and 578 .docx ﬁles were labeled by the anti-virus
engines as utilizing a known exploit. The majority of the non-exploit malicious
documents were identiﬁed by the anti-virus engines as utilizing macros.
As our study advances methods to break exploits using mechanisms not
applicable to pure social engineering attacks, we focused our evaluation solely on
maldocs leveraging a software vulnerability. Furthermore, to be able to better
explain how our mechanisms applied to speciﬁc exploits, we utilized only those
maldocs which were labeled by anti-virus engines to use a single exploit. We
were left with 962 .doc and 363 .docx ﬁles after inconsistent exploit labels were
removed. Of these documents, we found all exploits for which we were able to
replicate successful exploitation and for which there were at least 20 samples.
This resulted in 3 exploits in .doc ﬁles and 3 exploits in .docx ﬁles. Surpris-
ingly, the malicious documents were distributed heavily across a small number
of particularly popular exploits. For example, the three top exploits in the .docx
ﬁle types comprised 306 of the 363 ﬁles, with 225 of these samples in the most
popular exploit. In the event that we had many samples for a given exploit, we
randomly selected a subset achieving a maximum of 100 documents to test and
a maximum of 50 viable maldocs per exploit. In total, there were 343 documents
tested and 217 documents demonstrating successful malware execution across
these 6 sets.
To test for exploitation, we attempted dynamic execution of the Trojan doc-
uments by opening them in a virtual machine. To achieve successful exploitation,
Preventing Exploits in Microsoft Oﬃce Documents
235
we utilized various conﬁgurations of software including both Windows XP and
Windows 7 and Oﬃce 2007 and Oﬃce 2010. The ROP based exploits required
speciﬁc versions of the libraries from which they reuse code. Since one of the
exploits selected for our testing is in Adobe Flash, we also installed the appro-
priate version of Flash player. We considered the malware execution successful
when malicious code was executed or requested from the network that would
have been executed. Successful exploitation occurred in 217 or 63 % of the mali-
cious documents we tested. We attribute this relatively low malware success rate
to VirusTotal being used by malware authors for testing, sometimes testing unre-
liable or incomplete exploits. For example, in a few of the successful exploits we
observed calc.exe, the malware “hello world”, as the ﬁnal payload. There were a
small number of apparent false positives by AV as well.
Taking these successful malicious document based exploits, we applied our
document content based mitigations and re-ran the documents. We considered
the exploit blocked by DCR when the ﬁnal malware payload was blocked. We
observed the diﬀerences in malware execution through both host based and net-
work based instrumentation. In a very small number of cases, DCR was not pos-
sible due to the malicious document having defective structure. These failures
were considered blocked as well, but are due to the rudimentary ﬁle validation
provided by performing content randomization.
Generally, the malicious documents we observed employ a portable exe-
cutable as the ﬁnal malicious payload. Most of these executables are extracted
from the raw document ﬁle, many are downloaded from an external server, and
a few are extracted from document reader memory. In many of the Trojan docu-
ments, the original document ﬁle is overwritten by a benign document, which is
opened and presented to the user. Most of the malware immediately beacons to
a controller node, but a small minority of the malware performed other actions
such as infecting other ﬁles on the local system. We observed dropped benign doc-
uments and malware that correlate to recent reports of targeted attacks against
NGOs [4,8] as well as more opportunistic crimeware.
When the document based exploit is blocked by DCR, the document reader
typically crashes. However, sometimes instead of crashing, the reader enters an
inﬁnite loop, presumably performing an egg hunt that is never successful. When
a decoy benign document is provided by the malware, it is either never opened
due to a failure in malware execution or the benign document is scrambled due
to DCR and the attempt to open the document fails because the ﬁle is invalid.
When DCR interrupts ﬁle-level access, shellcode that is attempting to extract a
portable executable or additional shellcode from the document ﬁle is interrupted.
When memory fragmentation is eﬀective, it scrambles either shellcode or ROP
chains, preventing exploitation earlier. Table 1 contains the high level results of
our evaluation.
CVE-2009-3129 is triggered by a malformed spreadsheet that causes a mem-
ory corruption error. All of the successful exploits were .xls spreadsheet ﬁles. In
all of these exploits, the pattern of extracting an encrypted portable executable
236
C. Smutz and A. Stavrou
Table 1. DCR Exploit Protection Evaluation
CVE
File Type
Blocked Total Block Rate Eﬀective Mechanism
2009-3129 .xls
2011-0611 .doc, .xls
2012-0158 .doc, .xls
36
29
50
2012-0158 .pptx, .xlsx 4
2013-3906 .docx
42
2014-4114 .ppsx, .docx 2
36
29
50
10
42
50
100 %
100 %