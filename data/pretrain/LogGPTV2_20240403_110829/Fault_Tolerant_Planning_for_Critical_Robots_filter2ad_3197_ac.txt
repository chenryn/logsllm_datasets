mobile robots, some of which have performed missions in
real situations (human interaction or exploration). It is com-
posed of three main components2 as presented in Figure 2:
GenoM modules, OpenPRS, and IxTeT.
The functional level is composed of a set of automati-
cally generated GenoM modules, each of them offering a
set of services, which perform computation (e.g., trajectory
movement calculation) or communication with physical de-
vices (sensors and actuators).
The procedural executive OpenPRS (Open Procedural
Reasoning System), is in charge of decomposing and re-
ﬁning plan actions into lower-level actions executable by
functional components, and executing them. This compo-
nent links the decisional component (IxTeT) and the func-
tional level. During execution, OpenPRS reports any action
failures to the planner, in order to re-plan or repair the plan.
As several IxTeT actions can be performed concurrently, it
has also to schedule sequences of reﬁned actions.
IxTeT (IndeXed TimE Table) is a temporal constraint
planner as presented in Section 2.4.1, combining high level
actions to build plans. Each action is described in a model
ﬁle used by the planner as a set of constraints on attributes
(e.g., robot position), resources (e.g., energy consumption),
numeric or temporal data (e.g., action duration). Then, a
valid plan is calculated combining a set of actions in such a
way that they are conﬂict-free and they fulﬁll the goals. The
description of actions in the planner model is critical for the
generation of successful plans and thus for the dependabil-
ity of the robot as a whole.
3.2.2. Fault Tolerant Planner Implementation. The fault
tolerance principles presented in Section 3.1 have been im-
plemented in a fault tolerant planner component as pre-
sented in Figure 3. This component replaces the original
component “Planner” presented in Figure 2. The FTplan
component is in charge of communicating with OpenPRS
2An additional robustness component, R2C, is introduced in [21]. We
have not considered it in this study since its current implementation is not
compatible with our experimentation environment.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:37:20 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007cuted simultaneously. Unfulﬁlled goals are resubmitted to
the planner during the next replanning or at the end of plan
execution.
In the actual implementation, FTplan checks every 10ms
if there is a message from OpenPRS or one of the IxTeT
planners.
In case of an action request from a planner or
an action report from OpenPRS, FTplan updates its system
representation before transmitting the request. If the request
is a plan execution failure (the system has not been able
to perform the actions of the plan), then FTplan launches
a re-plan using the sequential mechanism.
If the request
indicates that the actions are ﬁnished, then FTplan checks if
the goals have been reached.
4. Mechanism Validation
We present here the validation process we have followed
to assess the performance and efﬁcacy of the proposed fault
tolerant mechanisms. We discuss ﬁrst a validation frame-
work that extensively uses simulation and fault injection,
then present experimental results.
4.1. Framework for Validation
Our validation framework relies on simulation and fault
injection. Simulation is used since it is both safer and more
practical to exercise the autonomy software on a simulated
robot than on a real one. Fault injection is used since it is
the only way to test the fault tolerance mechanisms with re-
spect to their speciﬁc inputs, i.e., faults in planning knowl-
edge. In the absence of any evidence regarding real faults,
there is no other practical choice than to rely on mutations3,
which have been found to efﬁciently simulate real faults in
imperative languages [7].
We now introduce successively the targeted software ar-
chitecture, the workload, the faultload, and the readouts and
measurements we obtain from system activity.
4.1.1. Software Architecture. Our simulation environment
is represented in Figure 4. It incorporates three elements:
an open source robot simulator named Gazebo, an interface
library named Pocosim, and the components of the LAAS
architecture already presented in section 3.2.1.
The robot simulator Gazebo4 is used to simulate the
physical world and the actions of the autonomous system; it
takes as input a ﬁle describing the environment of the simu-
lation (mainly a list of static or dynamic obstacles contain-
ing their position, and the physical description of the robot)
and executes the movement of the robot and dynamic obsta-
cles, and possible interactions between objects.
3A mutation is a syntactic modiﬁcation of an existing program.
4“The player/stage project”, http://playerstage.sourceforge.net
Figure 2. The LAAS architecture
Figure 3. Fault tolerant planner
as the original planner does. To be consistent with the cur-
rent implementation, FTplan uses the same technologies as
OpenPRS and IxTeT for communication.
The current version of FTplan implements the sequential
redundant planner coordination algorithm presented earlier
(Section 3.1, Figure 1) with two IxTeT planners. Currently,
the plan analysis function is empty (it always return true) so
error detection relies solely on just three of the mechanisms
presented in Section 3.1.1: watchdog timer, plan failure de-
tection, and on-line goal checker.
The watchdog timer is launched at each start of planning.
As soon as a plan is found before the time limit (40 seconds
in our implementation: a sufﬁcient time to produce plans in
our activities), the watchdog is stopped. If timeout occurs,
FTplan stops the current IxTeT, and sends a plan request
to the other IxTeT planner, until a plan is found or both
planners have failed. In the latter case, the system is put
in a safe state (i.e., all activities are ceased), and an error
message is sent to the operator.
On-line goal checker is performed after each action ex-
ecuted by OpenPRS that can result in a modiﬁcation in the
goal achievements (for instance: a camera shot, a commu-
nication, movement of the robot, etc.). This checking is
carried out by analyzing the system state at the end of an
action, determining goals that may have been accomplished
and checking that no inconsistent actions have been exe-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:37:20 UTC from IEEE Xplore.  Restrictions apply. 
NSEW Planner(IxTeT)Procedural Executive(OpenPRS)EnvironmentFunctionalmodules(GenoM)Physical layer37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007sions are referenced as gradually more difﬁcult M1, M2,
M3 and M4: M1 consists in two communications and three
photos in close locations, whereas M4 consists in four com-
munications and ﬁve far apart photos. Environments are ref-
erenced as worlds W1, W2, W3 and W4. W1 is an empty
world, with no obstacles to hinder plan execution. W2 and
W3 contains small cylindrical obstacles, whereas W4 in-
cludes large rectangular obstacles that may pose great dif-
ﬁculties to the navigation module, and are susceptible to
endlessly block the robot path.
In addition, several equivalent experiments are needed
to address the non-determinacy of the experiments. This is
due to asynchrony in the various subsystems of the robot
and in the underlying operating systems: task scheduling
differences between similar experiments may degrade into
task failures and possibly unsatisﬁed goals, even in the ab-
sence of faults. We thus execute each basic experiment three
times, leading to a total of 48 experiments per mutation.
More repetition would of course be needed for statistical in-
ference on the basic experiments but this would have led to
a total number of experiments higher than that which could
have been carried out with the ressources available (each
basic experiment lasts about 20 minutes).
4.1.3. Faultload. To assess performance and efﬁcacy of the
proposed fault tolerance mechanisms, we inject faults in a
planning model by random mutation of the model source
code (i.e., in Model1 of Figure 3). Five types of possible
mutations were identiﬁed from the model syntax:
1. Substitution of numerical values: each numerical value
is exchanged with members of a set of real numbers
that encompasses (a) all numerical variables in all the
tasks of the model, (b) a set of speciﬁc values (such as
0, 1 or -1), and (c) a set of randomly-selected values.
2. Substitution of variables: since the scope of a variable
is limited to the task where it is deﬁned, numerical
(resp. temporal) variables are exchanged with all nu-
merical (resp. temporal) variables of the same task.
3. Substitution of attribute values: in the IxTeT formal-
ism, attributes are the different variables that together
describe the system state. Attribute values in the model
are exchanged with other possible values in the range
of the attribute.
4. Substitution of language operators: in addition to clas-
sic numerical operators on temporal and numerical val-
ues, the IxTeT formalism employs speciﬁc operators,
such as “nonPreemptive” (that indicates that a task
cannot be interrupted by the executive).
5. Removal of a constraint relation: a randomly selected
constraint on attributes or variables is removed from
the model.
Substitution mutations were automatically generated us-
ing the SESAME tool [6]. Using an off-line compilation,
Figure 4. Simulation environment
The Pocosim library [12] is a software bridge between
the simulated robot (executed on Gazebo) and the software
commands generated by the GenoM modules: it transforms
commands to the actuators into movements or actions to
be executed on the simulated robot, and relays the sensor
inputs that Gazebo produces from the simulation.
Our autonomous system is based on an existing ATRV
(All Terrain Robotic Vehicle) robot, and employs GenoM
software modules interfaced with the Gazebo simulated
hardware. The upper layer of the LAAS architecture ex-
ecutes as presented in the previous section. Two different
models are used with the IxTeT planners. The ﬁrst model
was thoroughly tested and used on a real ATRV robot; we
use it as primary model and as target for fault injection. We
speciﬁcally developed the second model through forced di-
versiﬁcation of the ﬁrst: for example, the robot position is
characterized numerically in the ﬁrst model and symboli-
cally in the second.
4.1.2. Workload. Our workload mimics the possible activ-
ity of a space rover. The system is required to achieve three
subsets of goals: take science photos at speciﬁc locations
(in any order), communicate with an orbiter during speci-
ﬁed visibility windows, and be back at the initial position at
the end of the mission.
To partially address the fact that the robot must operate
in an open unknown environment, we chose to activate the
system’s functionalities in some representative situations re-
sulting from combinations of sets of missions and worlds.
A mission encompasses the number and location of pho-
tos to be taken, and the number and occurrence of visibility
windows. A world is a set of static obstacles unknown to
the robot (possibly blocking the system from executing one
of its goals), which introduces uncertainties and stresses the
system navigation mechanism.
We implemented four missions and four worlds, thus ap-
plying sixteen execution contexts to each mutation. Mis-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:37:20 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007this tool detects and eliminates binary equivalent or syntac-
tically incorrect mutants. Removal of random constraint re-
lations was carried out through a PERL script and added to
the mutations generated by SESAME. All in all, more than
1000 mutants were generated from the ﬁrst model.
For better representativeness of injected faults, we con-
sider only mutants that are able to ﬁnd a plan in at least one
mission (we consider that models that systematically fail
would easily be detected during the development phase). As
a simple optimization, given our limited resources, we also
chose to carry out a simple manual analysis aimed at elim-
inating mutants that evidently could not respect the above
criterion.
4.1.4. Records and Measurements. Numerous log ﬁles
are generated by a single experiment: simulated data from
Gazebo (including robot position and hardware module ac-
tivity), output messages from GenoM modules and Open-
PRS, requests and reports sent and received by each plan-
ner, as well as outputs of the planning process.
Problems arise however in trying to condense this
amount of data into signiﬁcant relevant measures. Contrary
to more classic mutation experiments, the result of an exper-
iment cannot be easily dichomotized as either failed or suc-
cessful. As previously mentioned, an autonomous system is
confronted with partially unknown environments and situa-
tions, and some of its goals may be difﬁcult or even impos-
sible to achieve in some contexts. Thus, assessment of the
results of a mission must be graded into more than just two
levels. Moreover, detection of equivalent mutants is com-
plexiﬁed by the non-deterministic context of autonomous
systems
To answer these issues to some extent, we chose to cate-
gorize the quality of the result of an experiment with: (a) the
subset of goals that have been successfully achieved, and (b)
performance results such as the mission execution time and
the distance covered by the robot to achieve its goals. Due
to space constraints, we focus in the rest of this paper on
measurements relative to the mission goals.
4.2. Results
We present in this part several experimental results using
the evaluation framework previously introduced. Experi-
ments were executed on i386 systems with 3.2 GHz CPU
and the Linux OS. We ﬁrst study the performance cost of