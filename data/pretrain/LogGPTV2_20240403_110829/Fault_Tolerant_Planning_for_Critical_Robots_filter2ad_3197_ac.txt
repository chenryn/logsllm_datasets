### Mobile Robots and Their Architectural Components

Mobile robots, some of which have performed missions in real-world scenarios (such as human interaction or exploration), are composed of three main components: GenoM modules, OpenPRS, and IxTeT, as illustrated in Figure 2.

#### Functional Level: GenoM Modules
The functional level consists of a set of automatically generated GenoM modules. Each module provides a range of services, including computational tasks (e.g., trajectory movement calculation) and communication with physical devices (sensors and actuators).

#### Procedural Executive: OpenPRS
OpenPRS (Open Procedural Reasoning System) is responsible for decomposing and refining high-level plan actions into lower-level actions that can be executed by the functional components. It acts as an intermediary between the decisional component (IxTeT) and the functional level. During execution, OpenPRS reports any action failures to the planner, enabling re-planning or plan repair. Additionally, it schedules sequences of refined actions, especially when multiple IxTeT actions are performed concurrently.

#### Decisional Component: IxTeT
IxTeT (Indexed Time Table) is a temporal constraint planner that combines high-level actions to build plans. Each action is described in a model file, which includes constraints on attributes (e.g., robot position), resources (e.g., energy consumption), and numeric or temporal data (e.g., action duration). The planner generates a valid plan by combining a set of actions in a way that ensures they are conflict-free and meet the goals. Accurate action descriptions are crucial for generating successful plans and ensuring the overall dependability of the robot.

### Fault Tolerant Planner Implementation

The fault tolerance principles outlined in Section 3.1 have been implemented in a fault-tolerant planner component, as shown in Figure 3. This component replaces the original "Planner" in Figure 2. The FTplan component communicates with OpenPRS and uses the same technologies as OpenPRS and IxTeT for consistency.

#### Current Implementation of FTplan
The current version of FTplan implements the sequential redundant planner coordination algorithm with two IxTeT planners. The plan analysis function is currently empty (always returns true), so error detection relies on three mechanisms: watchdog timer, plan failure detection, and online goal checker.

- **Watchdog Timer**: Launched at the start of planning, the watchdog timer stops if a plan is found within 40 seconds. If a timeout occurs, FTplan stops the current IxTeT and sends a plan request to the other IxTeT planner until a plan is found or both planners fail. In the latter case, the system enters a safe state, and an error message is sent to the operator.
- **Online Goal Checker**: Performed after each action executed by OpenPRS that may modify goal achievements (e.g., camera shot, communication, robot movement). This check analyzes the system state to determine if goals have been achieved and ensures no inconsistent actions have been executed.

### Mechanism Validation

We present the validation process used to assess the performance and efficacy of the proposed fault-tolerant mechanisms. The validation framework extensively uses simulation and fault injection, followed by experimental results.

#### Framework for Validation
Our validation framework relies on simulation and fault injection. Simulation is safer and more practical for testing autonomy software on a simulated robot. Fault injection is essential for testing fault tolerance mechanisms with respect to specific inputs, such as faults in planning knowledge. Mutations, which efficiently simulate real faults in imperative languages, are used due to the lack of real fault data.

#### Software Architecture
Our simulation environment, shown in Figure 4, includes:
- **Gazebo**: An open-source robot simulator that simulates the physical world and robot actions.
- **Pocosim**: A library that interfaces the simulated robot with the GenoM modules, translating commands to movements and relaying sensor inputs.
- **LAAS Architecture Components**: As described in Section 3.2.1, these include the GenoM modules, OpenPRS, and IxTeT.

#### Workload
The workload mimics the activities of a space rover, requiring the system to achieve three subsets of goals: taking science photos at specific locations, communicating with an orbiter during visibility windows, and returning to the initial position at the end of the mission. Four missions and four worlds were implemented, resulting in sixteen execution contexts per mutation.

#### Faultload
Faults are injected into the planning model through random mutations of the model source code. Five types of mutations were identified:
1. **Substitution of Numerical Values**: Exchanging numerical values with a set of real numbers, including all numerical variables, specific values, and randomly selected values.
2. **Substitution of Variables**: Exchanging numerical or temporal variables within the same task.
3. **Substitution of Attribute Values**: Exchanging attribute values with other possible values in the attribute's range.
4. **Substitution of Language Operators**: Replacing classic and specific operators.
5. **Removal of Constraint Relations**: Randomly removing a constraint on attributes or variables.

Mutants that can find a plan in at least one mission are considered, and a manual analysis is conducted to eliminate mutants that clearly do not meet this criterion.

#### Records and Measurements
Numerous log files are generated from each experiment, including simulated data, output messages, and planning process outputs. The quality of the experiment result is categorized based on the subset of goals achieved and performance metrics such as mission execution time and distance covered.

### Experimental Results

Experiments were conducted on i386 systems with 3.2 GHz CPUs and the Linux OS. The performance cost of the fault-tolerant mechanisms and their effectiveness in achieving mission goals are analyzed. Due to space constraints, the focus is on measurements related to mission goals.