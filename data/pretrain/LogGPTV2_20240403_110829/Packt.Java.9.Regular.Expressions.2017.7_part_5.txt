(?m)^Java regex$
And bingo! Our regex works now because we enabled the MULTILINE mode using (?m)
at the start of the regex.
[ 38 ]
Understanding the Core Constructs of Java Regular Expressions
The placement of embedded modes in a Java regular
expression
All the aforementioned embedded modes can be placed at the start of a regular expression
to enable one or more modes for the complete regular expression. We can also place these
modes in the middle of a regex to enable it for a specific group or a remainder of the regex
pattern.
We can also combine multiple mode modifiers into a single expression like this:
(?is)
This enables the DOTALL and ignore case modes.
Disabling mode modifiers
To disable a previously enabled mode, we can place a hyphen (-) before the modifier
symbol anywhere in your regular expression.
Let's look at some examples.
To disable DOTALL, we can use the following regex:
(?-s)
To disable ignore case matching, we can use the following regex:
(?-i)
To disable the MULTILINE mode, we can use the following regex:
(?-m)
To disable both ignore case and MULTILINE mode, we can use the following regex:
(?-im)
To disable the ignore case, DOTALL, and MULTILINE modes, we can use the following
regex:
(?-ism)
[ 39 ]
Understanding the Core Constructs of Java Regular Expressions
Summary
In this chapter, we covered the core constructs of regular expressions in depth. You learned
anchors, quantifiers, boundary matchers, various character classes, negated character
classes, and predefined character classes. We found out that escaped characters need to be
escaped twice in the Java language. You also learned Unicode text matching using regular
expressions in Java. We covered greedy, non-greedy, and possessive quantifiers. You
learned embedded mode modifiers in Java regular expressions and how they can change
the interpretation of a regular expression.
In the next chapter, we will cover another very important feature of regular expressions,
called grouping. You will learn the various types of grouping available in Java regular
expressions and how to use them.
[ 40 ]
3
Working with Groups,
Capturing, and References
In this chapter, you will learn how to match, capture, and reference substrings from a given
input text using regular expressions. We will cover various types of groups available in
Java, and the naming and numbering of captured groups. Readers will also learn how to
use back reference or forward reference of the capturing groups.
We will be covering the following topics in this chapter:
Grouping
Capturing groups
Group numbering
Non-capturing groups
Back references
Named groups
Forward references
Invalid references
Working with Groups, Capturing, and References
Capturing groups
Groups are a very useful feature of regular expressions, which are supported in all the
flavors of regular expressions. Groups are used to combine multiple characters or multiple
smaller components of regular expressions into a single unit. We create groups by placing a
series of characters or subpatterns inside round brackets or parentheses, ( and ). For
example, consider the following regex pattern:
(blue|red)
It means a capturing group that uses alternation. It either matches the letters b, l, u, and e
or it matches the letters r, e, and d. In other words, it matches the strings blue or red, and
more importantly, it creates a capturing group with either of the two matched strings. Each
group becomes a single unit that can be used to apply certain constructs to the entire group.
For example, anchors, boundary assertion, quantifiers, or alternation can be restricted to a
part of the regular expression represented by the group. For example, look at the following
regex pattern:
^Regular(Expression)?$
This regular expression will match the string, Regular, at the start. After that, there is one
capturing group with the string, Expression; however, due to the placement of the ?
quantifier after the group, it will match the 0 or 1 occurrence of the preceding group,
making it an optional capturing group. Hence, this regex will either match the string,
Regular, with an empty first capturing group or it will match the string
RegularExpression, with the substring, Expression, in the first capturing group.
If we are given a problem to write a regular expression that matches only an even number
of digits in the input, then we can use this pattern:
^([0-9]{2})+$
Since the + quantifier (one or more) is used next to the group that matches a pair of digits,
this quantifier is applied to the entire group. Hence, this regular expression will match one
or more pairs of digits (2, 4, 6, 8, 10, ...), or in simple words, it matches an even number of
digits.
A regular expression can have multiple capturing groups, which can be nested inside each
other as well.
For example, in the following regular expression, there are three capturing groups:
^((\d+)-([a-zA-Z]+))$
[ 42 ]
Working with Groups, Capturing, and References
The preceding expression will match the input string, that is, 1234-aBc with the following
groups:
1. Group 1: 1234-aBc
2. Group 2: 1234
3. Group 3: aBc
Group numbering
Capturing groups are numbered in increasing numbers, starting with number one. Java
regular expressions support up to 99 capturing groups. Group zero always stands for the
entire matched text.
For nested capturing groups, group numbers are incremented with the appearance of the
opening parenthesis from left to right.
To understand this better, let's consider the following regular expression with nested
multiple capturing groups:
(((a|b)-(c|d))/(\d+))
It will match the input string as follows:
a-c/15
a-d/99
b-c/567
b-d/1000
For the input string, a-c/15, we will get the following captured groups:
Group Num Captured Text
Group 0 a-c/15
Group 1 a-c/15
Group 2 a-c
Group 3 a
Group 4 c
Group 5 15
[ 43 ]
Working with Groups, Capturing, and References
Also note that in the case of repeated matches in a capturing group using a quantifier, it will
capture the last matched text in the given group.
For example, consider the following regex:
(\w+\s+){3}
If the input text is around the word, then the captured group number one will contain
word after the regex execution, even though it also matches around and the before
completing the match with the last word.
Named groups
In Java regular expressions, capturing groups can be defined in two ways:
1. Using numbers that get incremented automatically (as we discussed earlier).
2. Using names.
Starting from Java 7, the regular expressions API offers support for named capturing
groups. Named capturing groups are especially useful where there are lots of capturing
groups. If we have to insert a new group or remove an existing group, then the numerical
order changes for every capturing group that comes after the new or removed group, thus
requiring the updating of all those references.
The syntax for defining a capturing group is as follows:
(?RE)
In the preceding line, RE is the pattern we are using for capturing a group.
There are certain rules to specify a named group in Java:
1. Names are case sensitive, so these are four different named capturing groups:
(?RE)
(?RE)
(?RE)
(?RE)
2. A name must satisfy the following regular expression:
[a-zA-Z][a-zA-Z0-9]*
[ 44 ]
Working with Groups, Capturing, and References
This means that the name must start with a letter and may contain letters or digits
after the first position.
3. Names cannot be duplicate in Java regex.
Keep in mind that even when we use a name to define groups, the groups are still
numbered as \1, \2, \3, and so on, and that these numbers can also be used in references.
For example, in the following regular expression, we are specifying four named groups, id,
subject, score, and term, all separated by a colon:
(?\d+):(?[a-zA-Z]+):(?\d+):(?[A-Z]+)
If matched with 123456:Science:97:II, then the following groups will be captured:
Group "id": "123456"
Group "subject": "Science"
Group "score": "97"
Group "term": "II"
Group 1: "123456"
Group 2: "Science"
Group 3: "97"
Group 4: "II"
Non-capturing groups
There are cases while building regular expressions when we don't really want to capture
any text but just want to group a subpattern to apply a boundary assertion or quantifier.
This is the case for using non-capturing groups. We can mark a group as a non-capturing
group by adding a question mark and a colon right after the opening parenthesis.
Note that we can also place one or more mode modifiers between the question mark and
the colon. The scope of the modifier used in this manner is only effective for that group.
For example, we can use a non-capturing group in our regex to match an even number of
digits:
^(?:\d{2})+$
Since we are not really interested in capturing any text from a matched string, it is a good
choice to use a non-capturing group here.
[ 45 ]
Working with Groups, Capturing, and References
An example of a non-capturing group with the ignore case modifier is as follows:
(?i:red|green|blue|white)
Due to the presence of the i modifier, this capturing group will match all the alternations
by ignoring the case. Thus, it may match red, RED, White, blue, Green, BluE, greeN,
WHITE, and so on.
There are major differences between the following three regular expression patterns:
(?:abc)
(?mi:abc)
((?:abc)?)
In the first case, we define a non-capturing group with a pattern as abc.
In the second case, we define a non-capturing group with the m (multiline) and i (ignore case)
modifiers. This allows the regex to match abc, ABC, Abc, or aBC.
In the third case, we define an optional non-capturing group inside the capturing group
that matches abc or an empty string in the captured group.
Advantages of non-capturing groups
A non-capturing group lets us use the grouping inside a regular expression without
changing the numbers assigned to the back references (explained in the next section). This
can be very useful in building large and complex regular expressions.
Non-capturing groups also give us the flexibility to add or remove groups from a long
regular expression with multiple groups. If we have to insert a new group or remove an
existing group, then the numerical order changes for every group on the right-hand side of
the new or removed group.
Using a non-capturing group instead of a capturing group saves memory, as the regular
expression engine doesn't need to store groups in buffers, thus optimizing the overall regex
execution. It is recommended to mark each group as non-capturing when we do not want to
extract a grouped substring or refer to them anywhere in the regular expression.
[ 46 ]
Working with Groups, Capturing, and References
Back references
Back references provide a convenient way of matching a repeated character or repeated
tokens in the input text. By using back references, the regular expression engine can match
the exact same text as previously matched by a capturing group.
The syntax of a back reference is a backslash followed by a capturing group number, as
shown in the following example:
\3
The preceding example is a back reference of the third capturing group.
In Java regular expressions, there can be up to 99 back references, each number referencing
a captured group number.
For example, if we need to match a two-digit number with the restriction that both digits
must be the same, then we need to capture the first digit and then use a back reference for
the first captured group, as follows:
^(\d)\1$
Now, this regex will match any of these strings: 11, 22, 55, and 88.
We can also use quantifiers after back references as we use them with capturing or non-
capturing groups.
For example, if we have to match a five-digit number with all the same digits, then we can
use the following regex:
^(\d)\1{4}$
As an example, we want to create a regex that matches four pairs of digits, separated by the
colon (:), dash (-), or slash (/) characters. We also require the digit pairs to be the same on
the first and third positions, and likewise, they must also be the same on the second and
fourth positions. For example, 12-45:12-45 and 56/00:56-00 will be a matching string,
but 57-13-58:13 will not, because 57 in the first pair of digits is not the same as 58, which
is the third pair of digits. We can write our regex as follows:
^(\d{2})[:/-](\d{2})[:/-]\1[:/-]\2$
[ 47 ]
Working with Groups, Capturing, and References
Let's look at some more useful regular expressions using capturing groups and back
references. Suppose we need to write a regular expression for two repeated words,
separated by one or more non-word characters in between. We can write our regular
expression as follows:
^(\w+)\W+\1$
The back reference, \1, will make sure we match the exact same word as matched by the
first capturing group in this regular expression.
Next, we need to write a regular expression for quoted words. Words can be wrapped using
single quotes or double quotes, but the mixing of quotes is not allowed. We can then write
our regex as follows:
^(['"])\w+\1$
Here, this regex pattern matches and captures the opening single or double quote using a
character class. On the other side of the word, we use the \1 back reference to ensure that
the same quote is matched in the end.
Back references cannot be used inside a character class, as we learned earlier. There is no
grouping inside a character class, and most of the special meta characters become just
literals inside a character class.
Back reference of a named group
The syntax for the back reference of a named group is as follows:
\k
Here, group1 is the name of the named capturing group.
For example, we can write our regular expression of repeating numbers, using a named
group and named back reference, as follows:
^(?\d+)\s+\k$
Here, we are defining a captured group called num to capture a number using the first, and
then, we are using a back reference of the named group using \k.
This will match inputs such as 1234 1234 or 989 989.
[ 48 ]
Working with Groups, Capturing, and References
Since the named capturing groups are numbered automatically as well, we can write the
same regular expression as follows:
^(?\d+)\s+\1$
Replacement reference of a named group
We haven't yet discussed the Java API for regular expression replacement, but just for
reference, it will be pertinent to discuss the syntax of a named group reference in a
replacement string:
${group1}: This will be replaced in the resulting string by the matched content
of the named captured group, group1
$1: This will be replaced in the resulting string by the matched content of the
captured group number 1
Note that the double escaping of String while defining a Java regular expression should be
applied here in defining named groups, named back references, and numbered back
references. Thus, repeating the previous regular expressions used in Java code:
final String regex = "^(?\\d+)\\s+\\k$";
or using numbered back references:
final String regex = "^(\\d+)\\s+\\1$";
Forward references
Back reference is the term used when a capturing group is referenced after we capture it.
Likewise, a forward reference is the term for referencing a group before capturing the text
using a captured group. In other words, the forward reference refers to a capturing group
that appears later in the regular expression pattern. Forward references are only useful if we
use them inside a repeated group, since the regex engine will be able to resolve captured
groups and populate the forward reference while repeating a match using quantifiers.
As with most modern languages, Java allows us to use the forward reference of the
captured group. Forward reference is a fairly complex concept to understand in regex.
Let's consider an example regex to understand better:
^(\d+)-(?:\2[\dA-Fa-f]{4}|(\d*\.?\d+:))+$
[ 49 ]
Working with Groups, Capturing, and References
Here, in this pattern, you can see that we are using the group reference, \2, before defining
the captured group number, 2, which comes later in the regex pattern as: (\d*\.?\d+:).
For this reason, \2 is a forward reference instead of a backward reference.
With the preceding regex, the following string matches:
666-6.6:6.6:abcd3.3:
The string matches because in the first repetition of the non-captured group, the second
captured group becomes 6.6: and this can be referenced later.
The following string also matches because the second captured group is overwritten each
time it is matched:
666-3.3:5.5:5.5:abcd
The first value that the second captured group captures is 3.3:, but it is overwritten by
5.5: later, and this is matched the third time when the first part of the alternatives matches
in the non-capturing group.
The following string, however, does not match, although the first capture of the second
group will be the string, 3.3:, by the time it is required by the forward reference:
666-3.3:abcd3.3:
Thus, as it is undefined, it does not match anything, not even the empty string. Therefore,
the first part of the alternative group does not match, and at this point, the second half also
does not match, thereby leading to a failed matching. This way, the captured group, in this
case, never captures the string, 3.3:.
To summarize this behavior, the forward reference does reference something that is defined
in the regular expression later, but only when the expression has already been matched at
least once.
For this reason, there is no point in using a forward reference outside some repeated
construct as a part of one member of an alternative matching.
Similarly, in the following example, the regex pattern uses a forward reference:
^(?:\1#color|(red|blue|white))+$
This anchored regex uses the forward reference, \1, before matching the literal text,
#color, on the left-hand side of the alternation. On the right-hand side of the alternation, it
matches one of the given colors and captures it in the first capturing group. The entire
alternation has the + quantifier after to make repeated matches.
[ 50 ]
Working with Groups, Capturing, and References
In the first attempt, \1 fails the match and forces the regex engine to attempt the right-hand
side of the alternation and match a color to populate \1 with the matching color. If there is
any text left to be matched in the input, the regex engine, in the second attempt, matches the
now populated reference, \1, followed by #color as the first alternation or an allowed
color as the second alternation. This process is repeated until the regex engine either
matches the complete string or fails the match.
This will match any of the following strings:
blue