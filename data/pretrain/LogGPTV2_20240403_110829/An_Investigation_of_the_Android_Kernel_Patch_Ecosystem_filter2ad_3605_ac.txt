# Patch Presence Test Accuracy and Propagation Analysis

## 5.2 Accuracy of Patch Presence Test

In this section, we will describe the accuracy of the patch presence test against the targets presented in §4.

### Ground Truth for Repository Kernels
For kernels in repository form, we have conducted both automated and manual analysis (for subtle cases) exhaustively on every CVE and every branch. Therefore, we treat these results as ground truth.

### Evaluation of Source Snapshots and Binary ROMs
For kernels in source snapshots or binary ROMs, we sampled a number of them to evaluate the accuracy of the patch presence test at both the source and binary levels. Specifically, we selected 9 kernels, each from a different phone model covering 4 different brands. These 9 kernels are available in both source snapshot and binary forms, allowing us to verify the results of the binary patch presence test using the corresponding source code. The results are summarized in Table 3. Generally, our solution works well for both source and binary targets, with an average accuracy of more than 96%. 

### Sources of Inaccuracies
To provide more details, we analyzed the sources of inaccuracies:

- **Source Snapshot Targets:**
  - We consider a function patched only when a strict string match of the full function is found. This leads to no false positives but some false negatives due to customization of the patched functions.
  - Huawei and Samsung show more customization, consistent with their strong market presence and product differentiation.

- **Binary Targets:**
  - Inaccuracies arise from:
    1. Customization of the patched function.
    2. Differences in binaries even when the source code is the same, due to vendor customization of compiler configurations, which we do not have complete access to.
  - Interestingly, the false negative rates for binary targets are generally comparable or even lower than those for source snapshot targets. This is because the source-level patch presence test is based on strict string matching of the whole patched function, while FIBER's design characterizes only a small (but key) portion of the patched function.

- **Limitations in Tracking CVEs:**
  - The number of CVEs and their corresponding patches that we can track for binary kernel targets is smaller. Common reasons include:
    1. Many vulnerable drivers are included in the source snapshot but not compiled into the binaries.
    2. FIBER was unable to generate signatures for certain cases.
    3. Signature generation and matching were too time-consuming (over a threshold of 2 hours).
  - These cases account for about 10% of the CVEs and were excluded from the binary patch presence test.

Overall, the patch presence test accuracy gives us confidence in the measurement study in §5.4. We also note that the patch presence test in upstream source repos is independently done through the patch locator described in §4.1.

## 5.3 Patch Propagation in Upstream Kernels
In this section, we focus on analyzing the patch propagation in upstream kernel repositories using the patch locator described in §4.1. With the exact time and date of individual commits, we can track patch propagation precisely and make several interesting observations about both Linux and Qualcomm vulnerabilities.

### Cumulative Patch Delays
- **Linux Internal Delays:**
  - Figure 4 shows the cumulative patch delays observed at each layer with respect to Linux mainline. 
  - Linux internally (mainline to LTS) already has a substantial delay, with 20% of the patches taking 100 days or longer.
  - Google does a good job in tracking Linux vulnerabilities, as the Android common’s patch delays closely align with those of Linux LTS.
  - Qualcomm’s mainline is noticeably slower in picking up patches from its upstream, with a log-scale X-axis highlighting the significant delays.

- **Qualcomm Propagation Delays:**
  - Qualcomm can be considered the bottleneck, with internal propagation delays of at least 2 to 3 months.
  - From an end-to-end perspective, the majority of patches take over 100 days to propagate from Linux mainline to Qualcomm stable, with about 15% taking 300 days or more.

### Layer-by-Layer Breakdown
- **Linux Mainline to LTS (Figure 5):**
  - 5% to 25% of patches experience a delay of 100 days or longer, with version 3.18 being the worst.
  - In extreme cases, such as CVE-2017-15868, the delay can be 954 days, and CVE-2019-2215 took 600 days to be patched in Linux LTS 4.4.

- **Linux LTS to Android Common (Figure 6):**
  - Delays are much smaller, with more than half of the CVEs patched in Android common on the same day as Linux LTS or earlier.
  - Greg Kroah-Hartman, the maintainer of Linux LTS, also helps maintain the Android common repository, leading to quick merges.
  - About 10% to 20% of the patches appear in Android common first, exhibiting negative delays due to Google's proactive approach.

- **Android Common to Qualcomm Mainline (Figure 7):**
  - Similar to the previous case, 5% to 20% of the patches are observed in Qualcomm first and then in Android common.
  - Qualcomm also independently ports patches from Linux mainline, sometimes picking up additional patches missed by Google.

- **Qualcomm Mainline to Stable (Figure 8):**
  - The delay is very substantial, with 80% of the patches for 4.4 delayed for 100 days or longer, and 20% for 200 days or longer.
  - Version 4.9 is somewhat better, with 80% of the patches delayed for 60 days or longer.
  - The 3.18 stable branch shows a comparable delay to 4.4, due to an older patching practice for the Qualcomm 3.18 repo.

- **Qualcomm-Specific Vulnerabilities (Figure 9):**
  - Patch delays for Qualcomm-specific vulnerabilities are abnormally small compared to Linux vulnerabilities, likely due to Qualcomm's internal triage and faster reaction times.

### Summary
- For vulnerabilities originating in Linux, the internal propagation delays within Qualcomm and Linux (mainline to stable/LTS) are clear bottlenecks.
- Newer kernel versions (from 3.18 to 4.14) generally correspond to more timely patch propagation, though the improvement has stabilized since 4.9.

## 5.4 Patch Propagation to Android OEM Phones
In this section, we follow the patch propagation pipeline to OEM vendors using a variety of Android devices as described in §5.1. We are primarily interested in measuring the patch delay and understanding whether OEM delays represent the bottleneck in the end-to-end patch propagation.

### Factors Influencing Patch Delays
- **Vulnerability Severity (Figure 12):**
  - More severe vulnerabilities should be patched sooner, but the results show no significant difference in patching speed based on severity.
  - We combine critical and high-severity CVEs for analysis, as there are only 33 critical CVEs, most of which are very old.

- **Name Brand (Figure 13):**
  - We sampled 8 high-end phones from 8 first-tier companies released in 2017, all running kernel version 4.4.y.
  - Google Pixel 2 and SONY Xperia XZ1 did the best, while Xiaomi, Oppo, and LG were the slowest.

- **High-End vs. Low-End (Figure 14):**
  - High-end phones (e.g., Mi 8, Galaxy S9) generally receive patches faster than low-end phones (e.g., Mi8 Lite, Galaxy A9 star).

- **Geographic Locations and Carriers:**
  - A small sample analysis of Samsung and Huawei phones showed that the same kind of phone in different regions got patched at the same time in most cases, with only about 10% of cases showing slight differences.

- **Time After Release:**
  - Most phones, especially high-end ones, enjoy at least 2 years of support. However, Xiaomi’s Redmi 4, a popular low-end phone, stopped receiving security updates less than a year after release.

### End-to-End Delay (Figure 11)
- Adding up delays in each propagation layer, we find significant delays for both Linux and Qualcomm vulnerabilities, with Linux vulnerabilities generally worse.
- More than half of the Linux CVEs are delayed for 200 days or more, and 10% to 30% are delayed for more than a year, which is unacceptably long and allows experienced hackers to craft exploits against unpatched OEM devices.

In summary, the patch presence test and propagation analysis provide valuable insights into the effectiveness and timeliness of patching in the Android ecosystem, highlighting areas for improvement and potential bottlenecks.