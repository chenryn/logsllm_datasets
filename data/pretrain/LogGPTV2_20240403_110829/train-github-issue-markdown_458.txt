### Issue with Mongoose Middleware Definitions

**Summary:**
I encountered an issue with the middleware definitions in the `mongoose/mongoose.d.ts` file, specifically with the `post` hook for the `save` method. The type definitions do not match the expected function signature according to the Mongoose documentation.

**Steps Taken:**
- I tried using the latest `mongoose/mongoose.d.ts` file from `@types/mongoose` version `^4.6.1`.
- I also used the latest stable version of TypeScript (`tsc`).

**Details:**

According to the Mongoose documentation (http://mongoosejs.com/docs/middleware.html), the function signature for the `post save` hook should look like this:

```javascript
schema.post('save', function(error, doc, next) {
  if (error.name === 'MongoError' && error.code === 11000) {
    next(new Error('There was a duplicate key error'));
  } else {
    next(error);
  }
});
```

However, the current type definitions in `mongoose.d.ts` are as follows:

```typescript
/**
 * Defines a post hook for the document.
 * Post hooks fire on the event emitted from document instances of Models compiled from this schema.
 * @param method name of the method to hook
 * @param fn callback
 */
post(method: string, fn: (doc: T, next: (err?: NativeError) => void, ...otherArgs: any[]) => void): this;
post(method: string, fn: (doc: T) => void, ...args: any[]): this;
```

In other words, the `error` parameter is omitted in the type definitions, which does not align with the actual implementation and the Mongoose documentation.

**Request:**
Could the authors of the type definition, cc/ @simonxca, please review and update the type definitions to include the `error` parameter in the `post` hook for the `save` method?

Thank you for your attention to this matter.