• Sample uniformly at random (tsk0, tsk1) and (d0, d1) such that tsk = tsk0 ⊕ tsk1 and d = d0 ⊕ d1.
• U0 receives (tpk, c, tsk0, d0) as output and U1 receives (tpk, c, tsk1, d1) as output
2) Party U0 generates (pk rfnd, sk rfnd) ← ΠDS.KGen(1λ).
3) Parties U0 and U1 generate tx rfnd := tx (tpk, pk rfnd, v).
4) They run a 2PC protocol Γ2 to compute σrfnd ← πDS.Sign (tsk0 ⊕ tsk1, tx rfnd), such that U1 receives σrfnd as output, while
5) Party U1 generates (C, π) ← ΠVTS.Commit (σrfnd, T) and gives (C, π) to party U0.
6) Party U0 checks if ΠVTS.Verify (tpk, tx rfnd, C, π) = 1, and aborts otherwise.
7) If the above check is successful, party U0 generates tx frz := tx (pk , tpk, v) and a signature σfrz ← ΠDS.Sign (sk , tx frz). It
U0 receives nothing.
8) Party U0 sets its output as (tx frz, σfrz, tx rfnd, tpk, c, tsk0, d0, C, π) and party U1 sets its output as
sends (tx frz, σfrz) to party U1.
(tx frz, σfrz, tx rfnd, tpk, c, tsk1, d1).
Fig. 13: User U0 and U1 running freeze during a atomic swap protocol
(cid:16)
(cid:17)
Swap Complete Phase
swp,i, σ(0)
swp,i
tx (0)
for all i ∈ [˜n] on the blockchain B.
(cid:16)
(cid:110)
Party P0 posts the transactions and signatures
Party P1 observes
1) It then picks j(cid:48) ∈ [˜n] and computes S ← mRel
swp,j, σ(0)
tx (0)
swp,j
(cid:18)
for all j ∈ [˜n] on the blockchain B.
(cid:110)
(cid:111)
(cid:16)
(cid:17)
2) It parses S :=
tx (1)
3) It posts
σ(1)
swp,1, . . . , σ(1)
swp,i, σ(1)
swp,i
swp,n
for all i ∈ [n] on the blockchain B.
(cid:17)
(cid:111)
(cid:110)
(cid:111)
(cid:19)
.
(cid:96)kj(cid:48),
tx (1)
swp,i
, tx (0)
swp,j(cid:48),
pk (01)
i
i∈[n]
, pk (10)
j(cid:48)
i∈[n]
Swap Time-out Phase
(cid:17)
.
(cid:16)
(cid:17)
(cid:17)
(cid:17)
(cid:17)
.
(cid:16)
(cid:16)
1) If party P0 fails to post a transaction-signature pair
tx (0)
swp,j, σ(0)
swp,j
for any j ∈ [˜n] on chain before time T1, party P1
does the following:
• Finish computing σ(1)
• Reclaim the v(1)
j
rfnd,j ← ΠVTS.ForceOp
tx (1)
coins by posting
C (1)
rfnd,j, σ(1)
j
rfnd,j
(cid:16)
2) Similarly, if party P1 fails to post a transaction-signature pair
party P0 does the following:
• Finish computing σ(0)
• Reclaim the v(0)
rfnd,j ← ΠVTS.ForceOp
tx (0)
coins by posting
(cid:16)
C (0)
rfnd,j, σ(0)
j
rfnd,j
j
on the blockchain B.
(cid:16)
on the blockchain B.
swp,j, σ(1)
tx (1)
swp,j
(cid:17)
for any j ∈ [n] on chain before time T0,
Fig. 14: Swap complete and time-out phase of the generic atomic swap protocol run between parties P0 and P1
(cid:16)
Hybrid H2: This is the same as the above execution except now
the 2PC protocol Γ2 in the freezing coins of swap setup phase
to generate σrfnd is simulated using S2pc,2 for the corrupted
parties.
Hybrid H3: This is the same as the above execution except
now the 2PC protocol Γ3 in the swap lock phase for generating
for k ∈ [˜n] is simulated using S2pc,3 for the
(cid:96)kk, σ(0)
corrupted parties. The simulator ensures that ordering is
maintained, that is party P1 receives (cid:96)kk ﬁrst before party
P0 receives σ(0)
Hybrid H4: This is the same as the above execution except
swp,k.
(cid:17)
swp,k
28
∈
• For
now the function output (given as input to the 2PC simulator
S2pc,3) is computed differently. Speciﬁcally, for all k ∈ [˜n], we
no longer perform the following checks:
0,j ⊕ sk (01)
sk (01)
(cid:17)
(cid:16)
all
j
0,j ⊕ d(01)
d(01)
ΠC.Open
0,k ⊕ sk (10)
(cid:17)
0,k ⊕ d(10)
d(10)
• sk (10)
Instead check if the secret key share input by the adversary
is equal to the adversarial key obtained from the freeze coins
?=
phase. Speciﬁcally, check if sk (01)
0,j
sk (10)A,j where sk (01)A,j and sk (10)A,j were received by the adversary
?= sk (01)A,j and sk (10)
[n],
1,j , c(01)
?= ΠC.Open
1,k , c(10)
(cid:16)
?=
1,k
1,j
0,j
k
j
(cid:110)
(cid:111)
i∈[n]
(cid:110)
v(1)
i
,
(cid:111)
i∈[˜n]
, pk (1)
i
, T0, T1, ∆. Here T0, T1, ∆ ∈ N and T1 = T0 − ∆.
Global input:
v(0)
i
, pk (0)
Party P0’s input:
Party P1’s input:
(cid:111)
(cid:111)
(cid:110)
(cid:110)
i
sk (0)
i
sk (1)
i
i∈[n]
i∈[˜nn]
Swap Setup Phase - Freezing coins
Parties P0 and P1 freeze the coins that they want to swap by doing the following:
1) For i ∈ [n], the parties do the following
(cid:17)
(cid:17)
• party P0 plays the role of U0 and P1 plays the role of U1 in running freeze algorithm (Figure 13) where P0 has inputs
pk (0)
, sk (0)
, v(0)
, T0
i
i
i
and P1 has inputs
• At the end, P0 receives as output
, c(01)
rfnd,i, pk (01)
i
i
tx (0)
frz,i, σ(0)
1,i , d(01)
, sk (01)
1,i
i
, T0
, v(0)
pk (0)
.
rfnd,i, pk (01)
frz,i, tx (0)
i
i
(cid:17)
, c(01)
i
, sk (01)
0,i , d(01)
0,i tx (0)
rfnd,i, C (0)
i
, π(0)
i
and P1 receives
. Note that we have the secret key corresponding to pk (01)
i
as
(cid:17)
• Party P0 plays the role of U1 and party P1 plays the role of U0 in running freeze algorithm (Figure 13) where P0 has
and P1 has inputs
i
i
i
pk (1)
frz,i, tx (1)
1,i , C (1)
, v(1)
, sk (1)
rfnd,i, pk (10)
, π(1)
(cid:17)
i
i
tx (1)
frz,i, σ(1)
1,i , d(10)
, sk (10)
.
, T1
, c(10)
, sk (10)
0,i , d(10)
and P1 receives
i
i
. Note that we have the secret key corresponding to pk (10)
0,i
as
(cid:17)
(cid:17)
(cid:16)
(cid:17)
(cid:17)(cid:17)
(cid:16)
(cid:16)
(cid:16)
(cid:16)
(cid:16)
(cid:16)
(cid:16)
(cid:16)
(cid:17)
(cid:17)
(cid:16)
2) For i ∈ [˜n], the parties do the following
tx (0)
frz,i, σ(0)
i = sk (01)
sk (01)
frz,i, tx (0)
0,i ⊕ sk (01)
1,i .
(cid:17)
pk (1)
, v(1)
i
i
, T1
(cid:16)
inputs
• At the end, P0 receives as output
, c(10)
rfnd,i, pk (10)
i
i
tx (1)
frz,i, σ(1)
i = sk (10)
sk (10)
frz,i, tx (1)
(cid:16)(cid:16)
0,i ⊕ sk (10)
1,i .
frz,1, σ(0)
tx (0)
(cid:17)
(cid:16)
i ∈ [˜n].
i
(cid:17)
for
(cid:16)
C (1)
i
tx (0)
3) Parties post
4) Party P0 starts computing ΠVTS.ForceOp
frz,n, σ(0)
frz,n
C (0)
, . . . ,
frz,1
i
tx (1)
frz,1, σ(1)