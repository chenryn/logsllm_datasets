220 items, circuit f(psi) is 8X-44X faster than the generic three-party
merge-compare-shuffle in LAN, about 12X-30X in WAN, and it uses
9X-68X less bandwidth. For hybrid f(PSI), it is 9X-14X faster in
WAN, and uses 56X-68X less bandwidth. The two party garbled
circuit implementation of the generic protocol is strictly worse than
the three party protocol, thus, we also outperform [30].
When there is an attached payload, the gap between our pro-
tocols and the generic ones is even larger. The only cost added
to our f(PSI) protocols is the cost to shuffle the payloads together
with the indices during the oblivious shuffling step. For our proto-
cols, the shuffling takes very little time compared with the circuit
execution step (as shown in Table 2), thus the extra overhead is
relatively cheap. However, this is not the case for the generic merge-
compare-shuffle circuit. The size and depth of the circuit increases
super-linearly with respect to the total length of the indices and
the payloads. If the payload length is equal to the indices’ length,
the runtime and communication cost will increase more than twice.
3PC Circuit-Based PSI computations via 2soPRF
Inputs: P1 has X = {x1, ..., xn } and payload values D(1) =
(1)
n }, P2 has Y = {y1, ..., yn } and D(2) =
{d
(2)
{d
n }, P3 does not have inputs.
Protocol:
(3) They call F[x]A→[x]B to convert
(4) P2 and P3 convert [k] to ⟨k⟩. For each x ∈ X :
(1)
1 , . . . , d
(2)
1 , . . . , d
(1) P1 and P2 sample random keys k by calling Fcoin. They
then distribute the keys as replicated shared keys [k]A
among 3 parties using the same randomness.
(2) P1 and P2 calls Finput to share their input and pay-
loads as replicated arithmetic shares ([X]A, [D(1)]A) and
([Y]A, [D(2)]A) respectively among the three parties.
[X]A, [Y]A to
[X]B, [Y]B.
P1 computes F(k, x), secret shared as [F(k, x)]A, and
opens the value to P3.
P2 and P3 convert [x]B to ⟨x⟩B locally and compute
⟨2soP RF(k, x)⟩A. They open the prf to P3.
(5) P1 and P3 convert [k] to ⟨k⟩. For each y ∈ Y :
P2 computes F(k, y), secret shared as [F(k, y)]A and
open the value to P3.
P1 and P3 convert [y]B to ⟨y⟩B locally and compute
⟨2soP RF(k, y)⟩A. They open the prf to P3.
(6) P3 verifies that for the same input z, the prf values are
the same. If P3 sees duplicated prf values from P1 or P2,
he aborts.
(7) P3 fixes a permutation π that moves items in the inter-
section (Z1 = X ∩ Y ) to the top, placing each item next
to its duplicate, and that moves the rest of (Z2) to the
bottom, in sorted order. The three parties call FShuffle
to shuffle the shares according to π . The payloads are
shuffled along with their indices.
(8) P3 sends the size of the intersection, t, to P1 and P2. P1
and P2 verify that they receive the same value. Otherwise,
they abort.
(9) For Z1, the parties verify that there are t duplicate pairs,
using secure arithmetic comparisons.
• They make t calls to Fcoin to receive R = {r1, ..., rt }.
i =1 ri(z2i − z2i−1)]), where
• They run FCheckZero([t
(10) Circuit-based protocol:
zi ∈ Z (1), and abort if the output is False.
For Z2, the parties convert [F(k, y)]A to [F(k, y)]B.
They then run a sequence of 3PC comparison circuits
to verify that the items are in sorted order.
Hybrid protocol:
For Z2, the parties run the union lower bound proof
from Section 3 (Figure 4).
If the proof fails to verify, abort.
(11) For each pair of duplicates in Z1, the parties use one
of the corresponding replicated sharings as input to a
circuit for f .
Output:
P1 and P2 output the result of f and the intersection size s. P3
outputs the size of the intersection s.
Figure 12: The protocol to compute a function of both in-
dices in the intersection and the payloads associating with
the indices.
Session 10C: Secret SharingCCS ’19, November 11–15, 2019, London, United Kingdom2413Table 2: Time (in seconds) taken for shuffling the indices
and for the whole circuit PSI-CA/f(PSI). The time taken to
shuffle data depends only on the input length. We show
results for the case |PSI| = 0.5n. Runtime of circuit PSI-
CA/f(PSI) for different intersection size can be found in Ta-
ble 1.
n
LAN
WAN
Shuffle
28
0.004
Circuit PSI-CA 0.20
0.32
Circuit PSI-CA 26.6
Shuffle
212
0.022
0.30
0.44
27.3
216
0.21
1.6
1.00
30.7
220
2.34
11.9
8.61
76.8
Table 3: Experiments with payload in LAN setting: runtime
in seconds, length of the indices σ = 80, number of items
n = 65536, |PSI| = 0.5n
payload length
3PC MCS [22]
Our Circuit f(PSI)
0
13.7
1.60
80
23.0
1.78
160
34.4
1.98
240
45.7
2.21
320
54.5
2.37
400
67.5
2.56
480
78.0
2.74
560
87.2
2.92
640
99.5
3.14
720
108
3.31
800
121
3.56
Table 4: Experiments with payload: communication cost in
megabytes, length of the indices σ = 80, number of items
n = 65536, |PSI| = 0.5n
payload length
3PC MCS [22]
Our Circuit f(PSI)
0
975
70
80
1950
83
160
2925
97
240
3900
110
320
4875
124
400
5850
137
480
6825
151
560
7800
164
640
8775
178
720
9750
191
800
10725
205
In Table 3 and Table 4, we show how payloads of different length
affect the performance of our circuit f(PSI) and that of the generic
merge-compare-shuffle protocol in LAN. Without the payload, our
protocol is just 8X faster and uses 14X less bandwidth. However,
when the payload’s length is 800 bits, ours is 34X faster and uses
52X less bandwidth.
6.1.2 Computing on the indices. As discussed in Section 5, our
f(PSI) on indices does not perform very well against the generic
protocol when the payload is small. For example, when input sets
are of size 65536, there is no payload, and indices are 80 bits, our
protocol is about 2X slower in LAN. This is due to the fact that the
players have to securely evaluate the PRP on their indices instead of
each computing them locally. However, when the payload is larger
than 162 bits, our protocol is the faster one. For the input sets of
size 65536, indices of length 80, and the payload length of 800, it
takes our protocol 25 seconds to finish, which is 5X faster than the
generic protocol. At the same time, it uses 4X less bandwidth.
6.2 PSI Cardinality
We compare the performance of our protocols with the generic
merge-compare-add protocol implemented by [1]. Beside that, we
also compare them with other customized PSI cardinality protocols
in two party setting such as [8], [11], [33]. Cristofaro et al. [8] did
not provide experiment results in their paper, however, we found
the experiment results in the LAN setting for their protocol in
[13]. The execution time and communication cost of PSI cardinality
protocols are shown in Table 1.
, 216
In terms of communication cost, polynomial PSI-CA requires
the least bandwidth while hybrid PSI-CA and circuit PSI-CA needs
3X and 3X-20X more bandwidth respectively depending on the
size of the intersection. The generic merge-compare-add protocol
needs 97X more bandwidth (for the case σ = 80, while [8] and [11]
requires 6.4X and at least 100X more communication respectively).
In the LAN setting, hybrid and polynomial PSI-CA is faster when
the input length is small (28), while circuit-base PSI-CA is faster
when the input size is large (28
, 220). When the input size is
small, round complexity plays a more important role in the total
runtime, even in the LAN setting. Polynomial and hybrid PSI-CA
have only a few rounds while circuit PSI-CA has a few hundred
rounds. When σ = 80 and input length is 220, our circuit PSI-CA
is 4.7X-25X faster than the generic merge-compare-add protocol,
190X-1018X faster than [8], and 6X-33X faster than [32]. For [33],
we only have the results for σ = 32 bits, however, it is still slower
than our circuit PSI-CA 4.4X-24X.
In the WAN setting, the round complexity is an important factor.
For circuit PSI-CA, the network delay contributes to around 25
seconds in the total runtime. With the least bandwidth required,
polynomial PSI-CA perform the best for input size n = 28
, 216.
When the input size is large n = 220, circuit PSI-CA is faster. When
compared with the generic protocol for input length of 220 and
σ = 80, circuit PSI-CA is 5.5X-14X faster, and requires 5X-35X less
bandwidth.
, 212
6.3 When f(PSI) computes the PSI
Our protocols are designed to focus on f(PSI) and PSI cardinality,
however, as PSI is an important application, we ran experiments
for f(PSI) for the specific case that f(PSI) is PSI and compare our
results against other state-of-the-art PSI protocols in two/three-
party setting such as [36] and [26] to complete the picture. We
can obtain PSI with any of our PSI-CA/f(PSI) protocols. The only
extra thing that needs to be done is to have the third party to send
the intersection to the other two parties, and they verify that they
receive the same set and that set is a subset of theirs. The results in
Table 5 shows that our PSI results are quite competitive, especially
when the intersection size is large. When the input length is large
(216
, 220), our PSI is similar to [36] in Random Oracle model, and
7X-37X faster in standard model (for σ = 64). In some cases, we are
even faster than [26] (input length 220 and the intersection size is
at least 3/4 of the input length).
REFERENCES
[1] Toshinori Araki, Assi Barak, Jun Furukawa, Tamar Lichter, Yehuda Lindell, Ariel
Nof, Kazuma Ohara, Adi Watzman, and Or Weinstein. Optimized honest-majority
MPC for malicious adversaries - breaking the 1 billion-gate per second barrier.
In 2017 IEEE Symposium on Security and Privacy, pages 843–862. IEEE Computer
Society Press, May 2017.
[2] Toshinori Araki, Jun Furukawa, Yehuda Lindell, Ariel Nof, and Kazuma Ohara.
High-throughput semi-honest secure three-party computation with an honest
majority. In Edgar R. Weippl, Stefan Katzenbeisser, Christopher Kruegel, An-
drew C. Myers, and Shai Halevi, editors, ACM CCS 16, pages 805–817. ACM Press,
October 2016.
[3] A. Borodin and R. Moenck. Fast modular transforms. J. Comput. Syst. Sci.,
[4] Hao Chen, Zhicong Huang, Kim Laine, and Peter Rindal. Labeled PSI from
fully homomorphic encryption with malicious security. In ACM CCS 18, pages
1223–1237. ACM Press, 2018.
[5] Koji Chida, Daniel Genkin, Koki Hamada, Dai Ikarashi, Ryo Kikuchi, Yehuda
Lindell, and Ariel Nof. Fast large-scale honest-majority MPC for malicious
8(3):366–386, June 1974.
Session 10C: Secret SharingCCS ’19, November 11–15, 2019, London, United Kingdom2414Table 5: Runtime in seconds in LAN/WAN setting and communication cost in megabytes. In [36], the communication cost does
not include the cost to perform base OT. When bitlength (σ) is not specified, the protocols are independent of the bitlength.
n
PSI
Kamara et al [26]
|PSI| ≈ 0
|PSI| = 0.25n
|PSI| = 0.50n
|PSI| = 0.75n
|PSI| ≈ n