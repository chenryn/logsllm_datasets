750
1,000
28s 660ms
7m 0s 90ms
53m 48s 910ms
2h 59m 40s 990ms
6h 34m 17s 900ms
10ms
93ms
706.66ms
2s 310ms
10s 450ms
10ms
88ms
675.66ms
2s 260ms
10s 330ms
Table 3: Two-party matrix multiplication time in ObliVM vs.
BigMatrix.
Figure 10: Linear Regression time encrypted vs. unen-
crypted.
Data Set
USCensus1990
OnlineNewsPopularity
Rows
2,458,285
39,644
BigMatrix Encrypted
3m 5s 460ms
2s 250ms
Table 1: Time results of linear regression on real datasets.
with fixed input, output, and block size. More specifically, for the
USCensus1990 case, an adversary can observe that we are perform-
ing a sequence of matrix operations on n × m and n × 1 matrix, and
we are publishing m × 1 matrix, where n = 2, 458, 285, m = 67, and
the sequence of operations are load, load, transpose, multiplication,
inverse, multiplication, multiplication, and publish. The adversary
can also observe the individual operation’s input-output size. This
information is trivially leaked based on the operation types and
the input data set size. In addition, the adversary can know the
block size used in each operation. In summary, an attacker can only
infer that regression analysis is done over a matrix of size n × m
for specific n and m values, nothing else.
PageRank. We chose PageRank as another case study, since it
has been extensively used in link analysis. In our experiments,
We use 3 directed graph datasets: Wikipedia vote network [38],
Astro-Physics collaboration network [39] and Enron email net-
work [40] from Stanford Network Analysis Project [9]. We generate
the adjacency matrix of these networks and perform 40 iteration of
PageRank. The execution time is reported in Table 2. We observe
that as the dataset size increases the time increases significantly.
That is because the total number of elements of a matrix increases
quadratically as the number of nodes increases.
Data Set
Wiki-Vote
Nodes BigMatrix Encrypted
7,115
18,772
36,692
6m 41s 200ms
23m 19s 700ms
Table 2: Page Rank on real datasets.
Astro-Physics
Enron Email
97s 560ms
Information leakage in PageRank is a sequence of operations
with input, output, and block sizes. In addition, the page rank algo-
rithm (as described in Appendix B) has loop instructions, where it
 25000 30000 35000 40000 45000 50000 55000 60000 2.5x107 3x107 3.5x107 4x107 4.5x107 5x107Linear Regression Training Time (ms)Matrix ElementsUnencryptedEncrypted6 RELATED WORK
Because of the availability and sound security guarantees, Intel SGX
is already used in many studies to build secure systems. For instance,
Schuster et al. [50] proposed a data analytics system named VC3
that can perform Map-Reduce programs with the protection from
SGX. However, VC3 does not provide any side channel information
leakage protection and the authors used a simulator to report the
result. Therefore, Dinh et al. [25] proposed random shuffling to
protect some information leakage of VC3. Most recently, Chandra
et al. [23] proposed using data noise to further mitigate these side
channel leakages. One can argue that with Map-Reduce some of
the operations proposed in our framework can be performed but it
is very well known that different matrix operations such as matrix
multiplication performs poorly in Map-Reduce based system. In
practice, matrix multiplication using map-reduce is only feasible
for sparse matrix. In contrast, our framework is data oblivious and
we do not use any data specific assumption.
Haven [19] is another system that described the ways to adopt
SGX to run ordinary application in a secure manner. However,
the way of running legacy binaries as in Haven can introduce a
controlled side channel attacks with SGX [55]. Recently, T-SGX [52]
and SGX-LAPD [29] have attempted to defeat these controlled side
channel attacks.
There are many other use cases of SGX. In [14], the authors
proposed a secure container mechanism that uses the SGX trusted
execution support of Intel CPUs to protect container processes
from outside attacks. In [36], the authors proposed protecting the
confidentiality and integrity of systems logs with SGX. In [18], the
authors proposed using SGX for computer game protection. In [21],
authors used Intel SGX in building secure Apache Zookeeper [2],
which is a centralized service to manage configurations, naming,
etc. in a distributed setting. Here authors provided transparent
encryption to ZooKeeper’s data.
In [30], the authors theoretically analyzed the SGX system and
proposed a mechanism to use SGX for efficient two-party secure
function evaluation. In [16], the authors also theoretically analyzed
isolated execution environments and proposed sets of protocols to
secure communication between different parties.
In [46], the authors proposed oblivious multi-party machine
learning using SGX based analysis. Here authors proposed mecha-
nism to perform different machine learning algorithm using SGX.
For each algorithm authors proposed a different mechanism to
handle large dataset. No centralized data handling method was
mentioned in the work. In contrast, our work is focused on building
a generic system that can easily be extended and used for large
scale data analytics task that may involve data processing, querying
and cleaning in addition to machine learning tasks. Furthermore,
we consider our work as complimentary to this work since some
of these machine learning techniques could be provided as library
functions in our generic language.
For SQL query processing in a distributed manner in [56], the
authors proposed a package for Apache Spark SQL named Opaque,
that enables very strong security for DataFrames. Opaque offers
data encryption and access pattern hiding using Intel SGX. However,
this work does not provide a general language that can be used to
do other computations in addition to SQL queries. Our proposed
framework supports SQL query capabilities in addition to more
generic vectorized computations.
In addition to SGX based solutions, there has been a long line of
research on building systems using secure processors. TrustedDB [15],
CipherBase [13], and Monomi [54] uses different types of secure
hardware to process queries over encrypted database. Again, these
systems mainly focused on sql type processing and do not provide
a generic language for handling data analytics tasks.
7 CONCLUSION
In this work, we proposed an effective, transparent, and extensi-
ble mechanism to process large encrypted datasets using secure
Intel SGX processor. Our main contribution is the development of
a framework that provides a generic language that is tailored for
data analytics tasks using vectorized computations, and optimal
matrix based operations. Furthermore, our framework optimizes
multiple parameters for optimal execution while maintaining obliv-
ious access to data. We show that using such abstractions, we can
perform essential data analytics operations on encrypted data set
efficiently. Our empirical results show that the overhead of the
proposed framework is significantly lower compared to existing
alternatives.
ACKNOWLEDGEMENT
We thank the anonymous reviewers for their insightful comments.
The research reported herein was supported in part by an NIH
award 1R01HG006844 and NSF awards CNS-1111529, CNS-1228198,
CICI-1547324, IIS-1633331, CNS-1564112, and CNS-1629951.
REFERENCES
[1] Apache Spark - Lightning-Fast Cluster Computing. http://spark.apache.org/.
Accessed 5/16/2017.
[2] Apache ZooKeeper. https://zookeeper.apache.org/. Accessed 5/16/2017.
[3] Big Data Benchmark. https://amplab.cs.berkeley.edu/benchmark/. Accessed
[4] GNU Octave. https://www.gnu.org/software/octave/. Accessed 5/16/2017.
[5] Matlab. https://www.mathworks.com/products/matlab.html. Accessed 5/16/2017.
[6] Numpy. http://www.numpy.org/. Accessed 5/16/2017.
[7] Pandas - Python Data Analysis Library. http://pandas.pydata.org/. Accessed
5/16/2017.
5/16/2017.
5/16/2017.
5/16/2017.
[8] R: The R Project for Statistical Computing. https://www.r-project.org/. Accessed
[9] Stanford Network Analysis Project. https://snap.stanford.edu/. Accessed
[10] UCI Machine Learning Repository: Data Sets. https://archive.ics.uci.edu/ml/
datasets.html. Accessed 5/16/2017.
[11] Rakesh Agrawal, Dmitri Asonov, Murat Kantarcioglu, and Yaping Li. 2006. Sover-
eign joins. In 22nd International Conference on Data Engineering (ICDE’06). IEEE,
26–26.
[12] Ittai Anati, Shay Gueron, Simon Johnson, and Vincent Scarlata. 2013. Innovative
technology for CPU based attestation and sealing. In Proceedings of the 2nd
international workshop on hardware and architectural support for security and
privacy, Vol. 13.
[13] Arvind Arasu, Spyros Blanas, Ken Eguro, Raghav Kaushik, Donald Kossmann,
Ravishankar Ramamurthy, and Ramarathnam Venkatesan. 2013. Orthogonal
Security with Cipherbase.. In CIDR. Citeseer.
[14] Sergei Arnautov, Bohdan Trach, Franz Gregor, Thomas Knauth, Andre Martin,
Christian Priebe, Joshua Lind, Divya Muthukumaran, Daniel OâĂŹKeeffe, Mark L
Stillwell, et al. 2016. SCONE: Secure linux containers with Intel SGX. In 12th
USENIX Symp. Operating Systems Design and Implementation.
[15] Sumit Bajaj and Radu Sion. 2014. TrustedDB: A trusted hardware-based database
with privacy and data confidentiality. Knowledge and Data Engineering, IEEE
Transactions on 26, 3 (2014), 752–765.
[16] Manuel Barbosa, Bernardo Portela, Guillaume Scerri, and Bogdan Warinschi.
2016. Foundations of hardware-based attested computation and application to
SGX. In Security and Privacy (EuroS&P), 2016 IEEE European Symposium on. IEEE,
245–260.
[17] Kenneth E Batcher. 1968. Sorting networks and their applications. In Proceedings
of the April 30–May 2, 1968, spring joint computer conference. ACM, 307–314.
[18] Erick Bauman and Zhiqiang Lin. 2016. A Case for Protecting Computer Games
With SGX. In Proceedings of the 1st Workshop on System Software for Trusted
Execution (SysTEX’16). Trento, Italy.
[19] Andrew Baumann, Marcus Peinado, and Galen Hunt. 2015. Shielding applications
from an untrusted cloud with haven. ACM Transactions on Computer Systems
(TOCS) 33, 3 (2015), 8.
[20] Laszlo A. Belady. 1966. A study of replacement algorithms for a virtual-storage
computer. IBM Systems journal 5, 2 (1966), 78–101.
[21] Stefan Brenner, Colin Wulf, David Goltzsche, Nico Weichbrodt, Matthias Lorenz,
Christof Fetzer, Peter Pietzuch, and Rüdiger Kapitza. 2016. SecureKeeper: Confi-
dential ZooKeeper using Intel SGX. In Proceedings of the 16th Annual Middleware
Conference (Middleware).
[22] Ernie Brickell and Jiangtao Li. 2011. Enhanced privacy ID from bilinear pairing
for hardware authentication and attestation. International Journal of Information
Privacy, Security and Integrity 2 1, 1 (2011), 3–33.
[23] Swarup Chandra, Vishal Karande, Zhiqiang Lin, Latifur Khan, Murat Kantar-
cioglu, and Bhavani Thuraisingham. 2017. Securing Data Analytics on SGX With
Randomization. In Proceedings of the 22nd European Symposium on Research in
Computer Security. Oslo, Norway.
Intel sgx explained. Technical Report.
Cryptology ePrint Archive, Report 2016/086, 20 16. http://eprint. iacr. org.
[25] Tien Tuan Anh Dinh, Prateek Saxena, Ee-Chien Chang, Beng Chin Ooi, and Chun-
wang Zhang. 2015. M2r: Enabling stronger privacy in mapreduce computation.
In 24th USENIX Security Symposium (USENIX Security 15). 447–462.
[26] Morris Dworkin. Recommendation for Block Cipher Modes of Operation: Ga-
lois/Counter Mode (GCM) and GMAC. http://nvlpubs.nist.gov/nistpubs/Legacy/
SP/nistspecialpublication800-38d.pdf. Accessed 5/16/2017.
[24] Victor Costan and Srinivas Devadas.
[27] Ramez Elmasri. 2008. Fundamentals of database systems. Pearson Education
[28] Kelwin Fernandes, Pedro Vinagre, and Paulo Cortez. 2015. A Proactive Intelligent
Decision Support System for Predicting the Popularity of Online News. In Progress
in Artificial Intelligence. Springer, 535–546.
[29] Yangchun Fu, Erick Bauman, Raul Quinonez, and Zhiqiang Lin. 2017. SGX-LAPD:
Thwarting Controlled Side Channel Attacks via Enclave Verifiable Page Faults. In
Proceedings of the 20th International Symposium on Research in Attacks, Intrusions
and Defenses (RAID’17). Atlanta, Georgia. USA.
[30] Debayan Gupta, Benjamin Mood, Joan Feigenbaum, Kevin Butler, and Patrick
Traynor. Using Intel Software Guard Extensions for Efficient Two-Party Se-
cure Function Evaluation. In Proceedings of the 2016 FC Workshop on Encrypted
Computing and Applied Homomorphic Cryptography.
[31] Charles L Hamblin. 1962. Translation to and from Polish Notation. Comput. J. 5,
3 (1962), 210–213.
[32] Franz E Hohn. 2013. Elementary matrix algebra. Courier Corporation.
[33] Intel. Product Change Notification - 114074 - 00. https://qdms.intel.com/dm/i.
aspx/5A160770-FC47-47A0-BF8A-062540456F0A/PCN114074-00.pdf. Accessed
5/16/2017.
India.
[34] Mohammad Saiful Islam, Mehmet Kuzu, and Murat Kantarcioglu. 2012. Access
Pattern disclosure on Searchable Encryption: Ramification, Attack and Mitigation..
In NDSS, Vol. 20. 12.
[35] John King and Roger Magoulas. 2016. 2016 Data Science Salary Survey. http:
//www.oreilly.com/data/free/2016-data-science-salary-survey.csp. (September
2016).
[36] Vishal Krandle, Erick Bauman, Zhiqiang Lin, and Latifur Khan. 2017. Securing
System Logs with SGX. In Proceedings of the 12th ACM Symposium on Information,
Computer and Communications Security. Abu Dhabi, UAE.
[37] Tze Leung Lai, Herbert Robbins, and Ching Zong Wei. 1978. Strong consistency
of least squares estimates in multiple regression. Proceedings of the National
Academy of Sciences of the United States of America 75, 7 (1978), 3034.
[38] Jure Leskovec, Daniel Huttenlocher, and Jon Kleinberg. 2010. Signed networks
in social media. In Proceedings of the SIGCHI conference on human factors in
computing systems. ACM, 1361–1370.
[39] Jure Leskovec, Jon Kleinberg, and Christos Faloutsos. 2007. Graph evolution:
Densification and shrinking diameters. ACM Transactions on Knowledge Discovery
from Data (TKDD) 1, 1 (2007), 2.
[40] Jure Leskovec, Kevin J Lang, Anirban Dasgupta, and Michael W Mahoney. 2009.
Community structure in large networks: Natural cluster sizes and the absence of
large well-defined clusters. Internet Mathematics 6, 1 (2009), 29–123.
[41] Chang Liu, Xiao Shaun Wang, Kartik Nayak, Yan Huang, and Elaine Shi. 2015.
Oblivm: A programming framework for secure computation. In Security and
Privacy (SP), 2015 IEEE Symposium on. IEEE, 359–376.
[42] Frank McKeen, Ilya Alexandrovich, Ittai Anati, Dror Caspi, Simon Johnson,
Rebekah Leslie-Hurd, and Carlos Rozas. 2016. Intel® Software Guard Extensions
(Intel® SGX) Support for Dynamic Memory Management Inside an Enclave. In
Proceedings of the Hardware and Architectural Support for Security and Privacy
2016. ACM, 10.
[43] Christopher Meek, Bo Thiesson, and David Heckerman. 2002. The Learning-