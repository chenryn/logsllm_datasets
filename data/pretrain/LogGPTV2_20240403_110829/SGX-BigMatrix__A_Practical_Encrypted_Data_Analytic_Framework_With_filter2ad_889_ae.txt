Certainly! Below is the optimized and improved version of your text, with a focus on clarity, coherence, and professionalism.

---

### Table 3: Two-Party Matrix Multiplication Time in ObliVM vs. BigMatrix

| Time (ms) |
|-----------|
| 750       |
| 1,000     |
| 28s 660ms |
| 7m 0s 90ms|
| 53m 48s 910ms |
| 2h 59m 40s 990ms |
| 6h 34m 17s 900ms |
| 10ms      |
| 93ms      |
| 706.66ms  |
| 2s 310ms  |
| 10s 450ms |
| 10ms      |
| 88ms      |
| 675.66ms  |
| 2s 260ms  |
| 10s 330ms |

### Figure 10: Linear Regression Time Encrypted vs. Unencrypted

#### Data Set
- **USCensus1990**
  - Rows: 2,458,285
  - BigMatrix Encrypted: 3m 5s 460ms
- **OnlineNewsPopularity**
  - Rows: 39,644
  - BigMatrix Encrypted: 2s 250ms

### Table 1: Time Results of Linear Regression on Real Datasets

For the USCensus1990 dataset, an adversary can observe that we are performing a sequence of matrix operations on \( n \times m \) and \( n \times 1 \) matrices, and publishing an \( m \times 1 \) matrix, where \( n = 2,458,285 \) and \( m = 67 \). The sequence of operations includes load, load, transpose, multiplication, inverse, multiplication, multiplication, and publish. The adversary can also observe the input-output size for each operation, which is trivially leaked based on the operation types and the input data set size. Additionally, the adversary can know the block size used in each operation. In summary, an attacker can infer that regression analysis is done over a matrix of size \( n \times m \) for specific \( n \) and \( m \) values, but nothing more.

### PageRank Case Study

We chose PageRank as another case study due to its extensive use in link analysis. In our experiments, we used three directed graph datasets: 
- **Wikipedia Vote Network** [38]
- **Astro-Physics Collaboration Network** [39]
- **Enron Email Network** [40]

from the Stanford Network Analysis Project [9]. We generated the adjacency matrix of these networks and performed 40 iterations of PageRank. The execution time is reported in Table 2. As the dataset size increases, the execution time increases significantly because the total number of elements in a matrix increases quadratically with the number of nodes.

#### Table 2: PageRank on Real Datasets

| Data Set         | Nodes | BigMatrix Encrypted |
|------------------|-------|---------------------|
| Wiki-Vote        | 7,115 | 6m 41s 200ms        |
| Astro-Physics    | 18,772| 97s 560ms           |
| Enron Email      | 36,692| 23m 19s 700ms       |

Information leakage in PageRank involves a sequence of operations with input, output, and block sizes. The PageRank algorithm (as described in Appendix B) includes loop instructions, where it processes the adjacency matrix iteratively.

### Related Work

Intel SGX is widely used in many studies to build secure systems due to its availability and robust security guarantees. For example, Schuster et al. [50] proposed a data analytics system called VC3, which performs Map-Reduce programs with protection from SGX. However, VC3 does not provide side-channel information leakage protection, and the authors used a simulator to report results. Dinh et al. [25] proposed random shuffling to mitigate some of the information leakage in VC3. Recently, Chandra et al. [23] suggested using data noise to further reduce these side-channel leakages.

While some operations in our framework can be performed using Map-Reduce, it is well-known that matrix operations, such as matrix multiplication, perform poorly in Map-Reduce-based systems. In practice, matrix multiplication using Map-Reduce is only feasible for sparse matrices. In contrast, our framework is data-oblivious and does not rely on any data-specific assumptions.

Haven [19] is another system that describes how to adopt SGX to run ordinary applications securely. However, running legacy binaries as in Haven can introduce controlled side-channel attacks with SGX [55]. T-SGX [52] and SGX-LAPD [29] have attempted to defeat these controlled side-channel attacks.

Other use cases of SGX include:
- A secure container mechanism [14] that uses Intel SGX to protect container processes.
- Protecting the confidentiality and integrity of system logs with SGX [36].
- Using SGX for computer game protection [18].
- Building a secure Apache Zookeeper [21], which is a centralized service for managing configurations and naming in a distributed setting.

In [30], the authors theoretically analyzed the SGX system and proposed a mechanism for efficient two-party secure function evaluation. In [16], the authors analyzed isolated execution environments and proposed protocols for secure communication between different parties.

In [46], the authors proposed oblivious multi-party machine learning using SGX-based analysis. They provided mechanisms to perform various machine learning algorithms using SGX, but no centralized data handling method was mentioned. Our work focuses on building a generic system that can be easily extended and used for large-scale data analytics tasks, including data processing, querying, and cleaning, in addition to machine learning tasks. We consider our work complementary to this, as some of these machine learning techniques could be provided as library functions in our generic language.

For SQL query processing in a distributed manner, the authors of [56] proposed Opaque, a package for Apache Spark SQL that offers strong security for DataFrames, including data encryption and access pattern hiding using Intel SGX. However, this work does not provide a general language for other computations beyond SQL queries. Our proposed framework supports SQL query capabilities and more generic vectorized computations.

In addition to SGX-based solutions, there has been significant research on building systems using secure processors. TrustedDB [15], CipherBase [13], and Monomi [54] use different types of secure hardware to process queries over encrypted databases. These systems mainly focus on SQL-type processing and do not provide a generic language for handling data analytics tasks.

### Conclusion

In this work, we proposed an effective, transparent, and extensible mechanism to process large encrypted datasets using the secure Intel SGX processor. Our main contribution is the development of a framework that provides a generic language tailored for data analytics tasks using vectorized computations and optimal matrix-based operations. Our framework optimizes multiple parameters for optimal execution while maintaining oblivious access to data. We show that using such abstractions, essential data analytics operations can be performed efficiently on encrypted datasets. Our empirical results demonstrate that the overhead of the proposed framework is significantly lower compared to existing alternatives.

### Acknowledgements

We thank the anonymous reviewers for their insightful comments. This research was supported in part by an NIH award 1R01HG006844 and NSF awards CNS-1111529, CNS-1228198, CICI-1547324, IIS-1633331, CNS-1564112, and CNS-1629951.

### References

[1] Apache Spark - Lightning-Fast Cluster Computing. http://spark.apache.org/. Accessed 5/16/2017.
[2] Apache ZooKeeper. https://zookeeper.apache.org/. Accessed 5/16/2017.
[3] Big Data Benchmark. https://amplab.cs.berkeley.edu/benchmark/. Accessed 5/16/2017.
[4] GNU Octave. https://www.gnu.org/software/octave/. Accessed 5/16/2017.
[5] Matlab. https://www.mathworks.com/products/matlab.html. Accessed 5/16/2017.
[6] Numpy. http://www.numpy.org/. Accessed 5/16/2017.
[7] Pandas - Python Data Analysis Library. http://pandas.pydata.org/. Accessed 5/16/2017.
[8] R: The R Project for Statistical Computing. https://www.r-project.org/. Accessed 5/16/2017.
[9] Stanford Network Analysis Project. https://snap.stanford.edu/. Accessed 5/16/2017.
[10] UCI Machine Learning Repository: Data Sets. https://archive.ics.uci.edu/ml/datasets.html. Accessed 5/16/2017.
[11] Rakesh Agrawal, Dmitri Asonov, Murat Kantarcioglu, and Yaping Li. 2006. Sovereign joins. In 22nd International Conference on Data Engineering (ICDE’06). IEEE, 26–26.
[12] Ittai Anati, Shay Gueron, Simon Johnson, and Vincent Scarlata. 2013. Innovative technology for CPU based attestation and sealing. In Proceedings of the 2nd international workshop on hardware and architectural support for security and privacy, Vol. 13.
[13] Arvind Arasu, Spyros Blanas, Ken Eguro, Raghav Kaushik, Donald Kossmann, Ravishankar Ramamurthy, and Ramarathnam Venkatesan. 2013. Orthogonal Security with Cipherbase.. In CIDR. Citeseer.
[14] Sergei Arnautov, Bohdan Trach, Franz Gregor, Thomas Knauth, Andre Martin, Christian Priebe, Joshua Lind, Divya Muthukumaran, Daniel O'Keeffe, Mark L Stillwell, et al. 2016. SCONE: Secure linux containers with Intel SGX. In 12th USENIX Symp. Operating Systems Design and Implementation.
[15] Sumit Bajaj and Radu Sion. 2014. TrustedDB: A trusted hardware-based database with privacy and data confidentiality. Knowledge and Data Engineering, IEEE Transactions on 26, 3 (2014), 752–765.
[16] Manuel Barbosa, Bernardo Portela, Guillaume Scerri, and Bogdan Warinschi. 2016. Foundations of hardware-based attested computation and application to SGX. In Security and Privacy (EuroS&P), 2016 IEEE European Symposium on. IEEE, 245–260.
[17] Kenneth E Batcher. 1968. Sorting networks and their applications. In Proceedings of the April 30–May 2, 1968, spring joint computer conference. ACM, 307–314.
[18] Erick Bauman and Zhiqiang Lin. 2016. A Case for Protecting Computer Games With SGX. In Proceedings of the 1st Workshop on System Software for Trusted Execution (SysTEX’16). Trento, Italy.
[19] Andrew Baumann, Marcus Peinado, and Galen Hunt. 2015. Shielding applications from an untrusted cloud with haven. ACM Transactions on Computer Systems (TOCS) 33, 3 (2015), 8.
[20] Laszlo A. Belady. 1966. A study of replacement algorithms for a virtual-storage computer. IBM Systems journal 5, 2 (1966), 78–101.
[21] Stefan Brenner, Colin Wulf, David Goltzsche, Nico Weichbrodt, Matthias Lorenz, Christof Fetzer, Peter Pietzuch, and Rüdiger Kapitza. 2016. SecureKeeper: Confidential ZooKeeper using Intel SGX. In Proceedings of the 16th Annual Middleware Conference (Middleware).
[22] Ernie Brickell and Jiangtao Li. 2011. Enhanced privacy ID from bilinear pairing for hardware authentication and attestation. International Journal of Information Privacy, Security and Integrity 2 1, 1 (2011), 3–33.
[23] Swarup Chandra, Vishal Karande, Zhiqiang Lin, Latifur Khan, Murat Kantarcioglu, and Bhavani Thuraisingham. 2017. Securing Data Analytics on SGX With Randomization. In Proceedings of the 22nd European Symposium on Research in Computer Security. Oslo, Norway.
[24] Victor Costan and Srinivas Devadas. Intel SGX Explained. Technical Report.
[25] Tien Tuan Anh Dinh, Prateek Saxena, Ee-Chien Chang, Beng Chin Ooi, and Chunwang Zhang. 2015. M2R: Enabling stronger privacy in mapreduce computation. In 24th USENIX Security Symposium (USENIX Security 15). 447–462.
[26] Morris Dworkin. Recommendation for Block Cipher Modes of Operation: Galois/Counter Mode (GCM) and GMAC. http://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf. Accessed 5/16/2017.
[27] Ramez Elmasri. 2008. Fundamentals of database systems. Pearson Education.
[28] Kelwin Fernandes, Pedro Vinagre, and Paulo Cortez. 2015. A Proactive Intelligent Decision Support System for Predicting the Popularity of Online News. In Progress in Artificial Intelligence. Springer, 535–546.
[29] Yangchun Fu, Erick Bauman, Raul Quinonez, and Zhiqiang Lin. 2017. SGX-LAPD: Thwarting Controlled Side Channel Attacks via Enclave Verifiable Page Faults. In Proceedings of the 20th International Symposium on Research in Attacks, Intrusions and Defenses (RAID’17). Atlanta, Georgia. USA.
[30] Debayan Gupta, Benjamin Mood, Joan Feigenbaum, Kevin Butler, and Patrick Traynor. Using Intel Software Guard Extensions for Efficient Two-Party Secure Function Evaluation. In Proceedings of the 2016 FC Workshop on Encrypted Computing and Applied Homomorphic Cryptography.
[31] Charles L Hamblin. 1962. Translation to and from Polish Notation. Comput. J. 5, 3 (1962), 210–213.
[32] Franz E Hohn. 2013. Elementary matrix algebra. Courier Corporation.
[33] Intel. Product Change Notification - 114074 - 00. https://qdms.intel.com/dm/i.aspx/5A160770-FC47-47A0-BF8A-062540456F0A/PCN114074-00.pdf. Accessed 5/16/2017.
[34] Mohammad Saiful Islam, Mehmet Kuzu, and Murat Kantarcioglu. 2012. Access Pattern disclosure on Searchable Encryption: Ramification, Attack and Mitigation.. In NDSS, Vol. 20. 12.
[35] John King and Roger Magoulas. 2016. 2016 Data Science Salary Survey. http://www.oreilly.com/data/free/2016-data-science-salary-survey.csp. (September 2016).
[36] Vishal Krandle, Erick Bauman, Zhiqiang Lin, and Latifur Khan. 2017. Securing System Logs with SGX. In Proceedings of the 12th ACM Symposium on Information, Computer and Communications Security. Abu Dhabi, UAE.
[37] Tze Leung Lai, Herbert Robbins, and Ching Zong Wei. 1978. Strong consistency of least squares estimates in multiple regression. Proceedings of the National Academy of Sciences of the United States of America 75, 7 (1978), 3034.
[38] Jure Leskovec, Daniel Huttenlocher, and Jon Kleinberg. 2010. Signed networks in social media. In Proceedings of the SIGCHI conference on human factors in computing systems. ACM, 1361–1370.
[39] Jure Leskovec, Jon Kleinberg, and Christos Faloutsos. 2007. Graph evolution: Densification and shrinking diameters. ACM Transactions on Knowledge Discovery from Data (TKDD) 1, 1 (2007), 2.
[40] Jure Leskovec, Kevin J Lang, Anirban Dasgupta, and Michael W Mahoney. 2009. Community structure in large networks: Natural cluster sizes and the absence of large well-defined clusters. Internet Mathematics 6, 1 (2009), 29–123.
[41] Chang Liu, Xiao Shaun Wang, Kartik Nayak, Yan Huang, and Elaine Shi. 2015. Oblivm: A programming framework for secure computation. In Security and Privacy (SP), 2015 IEEE Symposium on. IEEE, 359–376.
[42] Frank McKeen, Ilya Alexandrovich, Ittai Anati, Dror Caspi, Simon Johnson, Rebekah Leslie-Hurd, and Carlos Rozas. 2016. Intel® Software Guard Extensions (Intel® SGX) Support for Dynamic Memory Management Inside an Enclave. In Proceedings of the Hardware and Architectural Support for Security and Privacy 2016. ACM, 10.
[43] Christopher Meek, Bo Thiesson, and David Heckerman. 2002. The Learning-Graphical Models Approach to Computational Molecular Biology. In Proceedings of the 8th International Conference on Intelligent Systems for Molecular Biology. AAAI Press, 112–121.

---