继续跟进，看到解密操作只是一个异或：
至于后面的操作就是得到相关的函数地址等。
最后跟到最后的加密函数：字符串就提示了sm4密码，且长度是16，那这个就是key了。sm4密码从常量0xA3B1BAC6也可以识别出来。
这里把32的input分2次加密的，每次16位。使用密文解密一下即可。
    from pysm4 import encrypt, decrypt
    from Crypto.Util.number import *
    c = bytes([234,  99,  88, 183, 140, 226, 161, 233, 197,  41, 
      143,  83, 232,   8,  50,  89, 175,  27, 103, 174, 
      217, 218, 207, 196, 114, 255, 177, 236, 118, 115, 
      243, 6])
    key = b'Ez_5M4_C1pH@r!!!'
    key = bytes_to_long(key)
    c1 = bytes_to_long(c[0:16])
    c2 = bytes_to_long(c[16:32])
    flag1 = decrypt(c1, key)
    flag2 = decrypt(c2, key)
    flag = long_to_bytes(flag1)+long_to_bytes(flag2)
    print(flag)
    #42b061b4cb41cfa89ca78047bde1856e
###  child_protect
拿了二血。。
从题目名字就想到考点可能是程序自我创建反调试，升级一点就是Debug Blocker技术。尝试下了断点，发现不会断下。然后使用
procexp查看程序：果然，正如题目名字。
> **Debug Blocker技术特点：**
>
>   * **调试器与被调试器关系中，调试进程与被调试进程首先是一种父子关系。**
>   * **子进程进程已经被调试，不能在被其他调试器调试**
>   * **强制终止调试进程以切断调试器-被调试器关系时，被调试进程也会同时终止。**
>   * **父进程操作被子进程的代码**
>   * **父进程处理被子进程中发生的异常**
>
来到creatprocess函数的地方看看：首先创建一个互斥体，目的是为了区别当前运行的是子进程还是父进程，进而执行不同的分支。接下来创建了一个进程。
然后就是子进程与父进程交互的过程：
具体交互过程：可以看到就2个，那我们不用把程序调试起来，直接手动或idapython修改子进程就行了。
第一个就当作花指令处理nop掉多余代码，对于第二个：其实就是把函数中的0x8e32cdaa修改为0x73FF8CA6。
把修复好的代码反编译：
对于生成的key，因为计算有点繁琐，这里可以直接在程序运行时修改eip到sub_4110B9函数这里，然后当程序执行到后面时直接查看key。
最后的tea加密，只是多了一个变换字节序的操作，写解密时注意一下：
    #include 
    #include 
    unsigned char enc[] = {0xed, 0xe9, 0x8b, 0x3b, 0xd2, 0x85, 0xe7, 0xeb, 0x51, 0x16, 0x50, 0x7a, 0xb1, 0xdc, 0x5d, 0x9, 0x45, 0xae, 0xb9, 0x15, 0x4d, 0x8d, 0xff, 0x50,
                             0xde, 0xe0, 0xbc, 0x8b, 0x9b, 0xbc, 0xfe, 0xe1};
    unsigned int key[] = {0x82ABA3FE, 0x0AC1DDCA8, 0x87EC6B60, 0x0A2394568};
    void swap(unsigned char enc[])
    {
        int i = 0;
        for(i = 0; i > 5) + *(((unsigned int *)key)+3))^(delat+ *(((unsigned int *)(enc+8*i))))^((*((unsigned int *)(enc+8*i)))*0x10 + *(((unsigned int *)key)+2));
                *(((unsigned int *)(enc+8*i))) -= ((*(((unsigned int *)(enc+8*i)+1)) >> 5) + *(((unsigned int *)key)+1))^(delat+ *(((unsigned int *)(enc+8*i))+1))^((*(((unsigned int *)(enc+8*i))+1))*0x10 + *(((unsigned int *)key)+0));
                delat += 0x61c88647;
            }
        }
        for(i = 0; i    * 长调用开始是push调用者的CS和返回地址。因为最后返回也是多了操作，所以使用的retf。
>   * GDTR 寄存器存放的是GDT（全局描述符表）表的位置和大小，低两字节是gdt表的大小，高四字节是gdt表的地址。
>   * sgdt指令读取GDTR寄存器的值。
>   *
> 段选择子是一个16位的描述符，指向了定义该段的段描述符，而我们的长调用也就是使用的段选择子来决定。其中3至15位是一个索引，在GDT表中查找出段描述符；第1，2位为RPL，代表了请求特权的级别，如0，3；第三位为TI，如果为0，查GDT表。如果为1，查LDT表，windows中只用GDT，所以这位都是0。
>   * 调用门描述符，共8字节。高16-31位记录偏移地址的高地址，低0-15位记录偏移地址的低地址。低16-31位即是段选择子。
>
再来看看调用门，指令格式CALL CS:EIP，注：EIP是没有使用的，也就是我们的长调用只看段寄存器CS的值，通过它找到对应的段描述符。
    段寄存器的结构：
    WORD Selectot  //段选择子
    WORD Attribute  //属性，段描述符高四字节的第8位开始 到第23位结束
    DWORD Base   //基地址
    DWORD Limit //界限
直接看题目中的：
所以说要发现调用的地方，真正关心的地方是48h。执行的代码地址 =
（门描述符中段选择子所指向的代码段的Base）+（门描述符高四字节的16-31位）+（门描述符低四字节的0-15位）。
那题目在哪里找这个段描述符表？就是之前看过的DeviceIoControl的地方，那8个字节的数据。
再把调用代码中的段选择子分解一下（48h），得到3-16位的index：1001b = 9。这正好和r0层看到的一样。
最后就是从这8字节数据得到长调用函数地址了：
回到r3层验证一下：
## 固件安全
### **NodeMCU**
50分的值，直接ctrl+f找到flag。。
###  STM
知道了stm文件，而STM32其实是使用了ARM核的MCU。
这个我们可以用ida分析的，但要设置一下，不然ida也只是把它当成data文件看待。
首先设置架构：
编辑选项：
然后确定，把加载地址改为：0x08000000。进入后把开始的数据都转化为4字节型数据：
双击第二个跳转到指定位置，然后在指定位置上面一些地方把数据转化为代码。可以发现ida左边出现了好几个函数。简单找一下即可看见关键函数，使用idapython按照它的算法逻辑打印出计算结果：
    from ida_bytes import *
    flag = ''
    addr = 0x08000344
    while addr 
    unsigned char enc[] =
    {
      70, 119, 116, 176, 39, 142, 143, 91, 233, 216, 
      70, 156, 114, 231, 47, 94
    };
    int main(void)
    {
        char s[] = "OVMF_And_Easy_Bios";
        int i = 0, v13[514] = {0}, v2, v3, v4, v5, v6, v8;
        int v7, v9, v10, v11, v12, result;
        for ( i = 0; i != 256; ++i )
          {
            v13[i] = i;
            v13[i + 256] = s[i % 18];
          }
        v2 = 0;
        v3 = 0;
        do
        {
            v4 = v13[v2];
            v3 = (v13[v2 + 256] + v4 + v3) % 256;
            v5 = v13[v3];
            v13[v3] = v4;
            v13[v2++] = v5;
        }
        while ( v2 != 256 );
          v6 = 0;
          v7 = 0;
          v8 = 0;
        do
        {
            v8 = (v8 + 1);
            v9 = v13[v8];
            v10 = (v9 + v7) % 256;
            v11 = v13[v10];
            v13[v10] = v9;
            v7 = (v9 + v7) % 256;
            v13[v8] = v11;
            result = (unsigned int)v13[(v11 + v13[v10]) % 256];
            enc[v6++] ^= result;
        }
        while ( v6 != 16 );
        for(i = 0; i < 16; i++)
        {
            printf("%02x", enc[i]);
        }
    } 
    //88baec0b5154f859b5851097bb567f5c