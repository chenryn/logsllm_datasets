### Hacking the Supply Chain: The Ripple20 Vulnerabilities Haunt Hundreds of Millions of Critical Devices

#### DEF CON 28 Safe Mode

**1. Who are we?**
- **JSOF**: A software security consultancy
  - **Shlomi Oberman**: Co-founder, JSOF
  - **Moshe Kol**: Security Researcher, JSOF; Discoverer of Ripple20
  - **Ariel Schön**: Security Researcher, JSOF

**2. Agenda**
- Overview of Ripple20
- CVE-2020-11901
- Exploiting CVE-2020-11901

**3. Ripple20**
- **Overview**: A series of 19 zero-day vulnerabilities in the Treck TCP/IP stack.
- **Impact**: Amplified by the supply chain, affecting hundreds of millions of devices across various sectors:
  - Medical
  - Industrial Control Systems (ICS)
  - Home
  - Enterprise
  - Transportation
  - Utilities

**4. Ripple20 Vulnerabilities**
- **CVEs**:
  - CVE-2020-11896
  - CVE-2020-11897
  - CVE-2020-11898
  - CVE-2020-11899
  - CVE-2020-11900
  - CVE-2020-11901
  - CVE-2020-11902
  - CVE-2020-11903
  - CVE-2020-11904
  - CVE-2020-11905
  - CVE-2020-11906
  - CVE-2020-11907
  - CVE-2020-11908
  - CVE-2020-11909
  - CVE-2020-11910
  - CVE-2020-11911
  - CVE-2020-11912
  - CVE-2020-11913
  - CVE-2020-11914
- **Severity**:
  - 4 critical remote code execution (RCE) vulnerabilities
  - 8 medium-high severity vulnerabilities

**5. Affected Devices**
- **Assumption**: Every mid to large US organization has at least one affected device.
- **Sectors**:
  - Medical
  - Printers
  - Utilities
  - Transportation
  - Networking
  - Datacenters
  - Smart Buildings
  - Industrial
  - Supply Chain

**6. Why Treck TCP/IP?**
- **Supply Chain**: Mostly unexplored and vulnerable.
- **Impact**: One vulnerability can affect multiple products.
- **IoT Impact**: Significant due to widespread use.
- **Zombie Vulnerabilities**: Long-standing issues that persist.
- **Attack Surface**: Large and diverse.

**7. Treck TCP/IP Details**
- **Company**: Treck is a small American company.
- **Product**: Proprietary TCP/IP stack available for over 20 years.
- **Usage**: Embedded devices and real-time operating systems (RTOS).
- **Configurability**: Highly configurable, with each instance being unique.
- **Supply Chain Position**: Strategically located at the start of a long supply chain.

**8. Ripple20 Research**
- **Methodology**: Reverse engineering of six different devices with multiple versions.
- **Duration**: Ongoing research from September 2019 to June 2020 (9 months).
- **Challenges**: Involvement of strange architectures and firmwares.
- **Outcome**: Two whitepapers released.

**9. About CVE-2020-11901**
- **Description**: Critical vulnerabilities in Treck’s DNS Resolver component.
- **Impact**: Allows for remote code execution once exploited.
- **Features**:
  - Can traverse NAT boundaries.
  - 4 vulnerabilities and 1 artifact.
  - Varies over time and vendor.

**10. CVE-2020-11901 (AKA “the DNS bugs”)**
- **DNS Primer**:
  - **Basics**: The DNS protocol maps domain names to IP addresses.
  - **Process**:
    - Client sends a query to a DNS server.
    - DNS server looks up the name and returns a response.
- **Record Types**:
  - **A Record**: IPv4 address for the queried domain.
  - **CNAME Record**: Alias (canonical name).
  - **MX Record**: Domain name of a mail server for the queried domain.
- **Domain Names Encoding**:
  - Encoded as a sequence of labels.
  - Each label is preceded by a length byte.
  - Maximum label length is 63 characters.
- **DNS Message Compression**:
  - Achieved by replacing a sequence of labels with a pointer to a prior occurrence.
  - Compression pointer is encoded in two bytes, starting with 11.

**11. DNS Parsing Logic: Type MX**
- **Pseudo-code**:
  ```c
  if (cacheEntryQueryType == DNS_TYPE_MX && rrtype == DNS_TYPE_MX) {
      addr_info = tfDnsAllocAddrInfo();
      if (addr_info != NULL) {
          memcpy(&addr_info->ai_mxpref, resourceRecordAfterNamePtr + 10, 2);
          labelLength = tfDnsExpLabelLength(resourceRecordAfterNamePtr + 0xc, pktDataPtr);
          addr_info->ai_mxhostname = NULL;
          if (labelLength != 0) {
              asciiPtr = tfGetRawBuffer(labelLength);
              addr_info->ai_mxhostname = asciiPtr;
              if (asciiPtr != NULL) {
                  tfDnsLabelToAscii(resourceRecordAfterNamePtr + 0xc, asciiPtr, pktDataPtr);
              }
          }
      }
  }
  ```

**12. DNS Label Length Calculation**
- **Pseudo-code**:
  ```c
  tt16Bit tfDnsExpLabelLength(tt8BitPtr labelPtr, tt8BitPtr pktDataPtr) {
      tt8Bit currLabelLength;
      tt16Bit i = 0, totalLength = 0;
      while (labelPtr[i] != 0) {
          currLabelLength = labelPtr[i];
          if ((currLabelLength & 0xc0) == 0) {
              totalLength += currLabelLength + 1;
              i += currLabelLength + 1;
          } else {
              newLabelPtr = pktDataPtr + (((currLabelLength & 0x3f) << 8) | labelPtr[i + 1]);
              if (newLabelPtr < pktDataPtr || newLabelPtr > labelPtr) {
                  return 0;
              }
              labelPtr = newLabelPtr;
              i = 0;
          }
      }
      return totalLength;
  }
  ```
- **Vulnerability #1: Read Out-Of-Bounds**
  - **Issue**: `tfDnsExpLabelLength` might read data out of the packet buffer.
  - **Consequences**:
    - Denial-of-service (e.g., read from unmapped page).
    - Information leakage: `tfDnsLabelToAscii` has no bounds check.
  - **Affected Versions**: Treck version 4.7+ (fixed later).

**13. More Issues with `tfDnsExpLabelLength`**
- **Maximum Domain Name Length**: Not enforced (255 characters).
- **Character Validation**: Does not validate alphanumeric and ‘-’ only.
- **Variable Storage**: `totalLength` stored as an unsigned short (`tt16Bit`).

**14. Vulnerability #2: Integer Overflow**
- **Exploit Construction**: Need to construct a name longer than 65536 characters.
- **Challenges**:
  - Maximum DNS response packet size: 1460 bytes.
  - Only backward jumps allowed from the current label pointer.
- **Solution**: Use nested compression pointers to achieve overflow.

**15. Integer Overflow Example**
- **Example Packet**:
  ```plaintext
  +0: 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f
  +16: 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f
  +32: 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f
  +48: 00 0e 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f
  +64: c0 00 0d 0e 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f
  +80: c0 01 c0 02 0b 0c 0d 0e 0f 0f 0f 0f 0f 0f 0f 0f
  +96: c0 03 c0 04 c0 05 c0 06 07 08 09 0a 0b 0c 0d 0e
  +112: c0 07 c0 08 c0 09 c0 0a c0 0b c0 0c c0 0d c0 0e
  ```

This presentation provides a comprehensive overview of the Ripple20 vulnerabilities, their impact, and the specific details of CVE-2020-11901.