title:Bitcoin over Tor isn't a Good Idea
author:Alex Biryukov and
Ivan Pustogarov
2015 IEEE Symposium on Security and Privacy
2015 IEEE Symposium on Security and Privacy
Bitcoin over Tor isn’t a good idea
Alex Biryukov
University of Luxembourg
Email: PI:EMAIL
Ivan Pustogarov
University of Luxembourg
Email: PI:EMAIL
Abstract—Bitcoin is a decentralized P2P digital currency
in which coins are generated by a distributed set of miners
and transactions are broadcasted via a peer-to-peer network.
While Bitcoin provides some level of anonymity (or rather
pseudonymity) by encouraging the users to have any number
of random-looking Bitcoin addresses, recent research shows that
this level of anonymity is rather low. This encourages users to
connect to the Bitcoin network through anonymizers like Tor and
motivates development of default Tor functionality for popular
mobile SPV clients. In this paper we show that combining Tor
and Bitcoin creates a new attack vector. A low-resource attacker
can gain full control of information ﬂows between all users who
chose to use Bitcoin over Tor. In particular the attacker can
link together user’s transactions regardless of pseudonyms used,
control which Bitcoin blocks and transactions are relayed to
user and can delay or discard user’s transactions and blocks.
Moreover, we show how an attacker can ﬁngerprint users and
then recognize them and learn their IP addresses when they
decide to connect to the Bitcoin network directly.
I.
INTRODUCTION
to link transactions
Bitcoin is a decentralized virtual currency and a P2P
payment system in which coins are generated by miners and
double spending is prevented by that each peer keeps a local
copy of the constantly growing public ledger of all the previous
transactions. Though the original Bitcoin paper states that
privacy in such a system may still be maintained, the recent
ﬁndings disprove this. Anonymity and privacy of the plain
Bitcoin protocol is also not claimed by the Bitcoin developers.
There are two independent problems: a) ability of the
attacker
the
user [2], [15], [14] by studying connectivity and trafﬁc of
the peers and b) linkability of the user’s pseudonyms and
transactions in the public ledger achieved via transaction ﬂow
analysis [20], [17]. At the same time as Bitcoin increases its
user base and moves from mining and hoarding to the actual
use as a currency and payment protocol in various on-line
applications there is a growing demand in more privacy among
the Bitcoin users. While one could use a Bitcoin mixing ser-
vice1 to break connections in the transaction graph, IP address
leakage is still possible. Bitcoin developers recommend to use
third party anonymization tools like Tor or VPNs to solve this
problem.
to the IP address of
Some alternative currencies like Anoncoin, BitTor, Torcoin,
Stealthcoin, and others offer native support for Tor. There are
also several other use cases for Tor in the Bitcoin ecosystem.
For mobile payments it is of interest to use so called SPV
(simple payment veriﬁcation) clients which cannot afford to
hold the full 20 Gbyte blockchain ledger. Such feature was
already foreseen in the original Bitcoin whitepaper, see Sec-
tion 8 of [18]. Since such popular clients [5], [11] (around
1 Million expected userbase [13]) are vulnerable to spooﬁng
attacks which may result in double-spending (see appendix
B), the current trend is to bundle them with Tor by default to
avoid spooﬁng2 and man-in-the-middle attacks. Tor can also
be a solution for services and online shops that want to prevent
DoS attacks against their public IP. Finally Tor is seen as a
countermeasure if Internet neutrality towards Bitcoin will start
to erode [7].
Tor is not a panacea however and not all applications
are anonymized equally well when combined with Tor. The
biggest effort has been made so far on improving protection
of the HTTP(S) protocol on top of Tor. Other protocols
are not researched that well. There were several documented
cases when application level leaked crucial user-identifying
information [16], [23]. Moreover, there is only limited number
of applications which are studied well enough to be considered
safe to use with Tor [25].
This paper contains two main contributions: ﬁrst we show
that using Bitcoin through Tor not only provides limited level
of anonymity but also exposes the user to man-in-the-middle
attacks in which an attacker controls which Bitcoin blocks
and transactions the user is aware of. The estimated cost of
the attack is below 2500 USD per month.
The second main contribution is a ﬁngerprinting technique
for Bitcoin users by setting an “address cookie” on user’s
computer. This can be used to correlate the same user across
different sessions, even if he uses Tor, hidden-services or
multiple proxies. If the user later decides to connect to the
Bitcoin network directly the cookie would be still present and
would reveal his IP address. A small set of Sybil nodes (about
a 100 attacker’s nodes) is sufﬁcient to keep the cookies fresh
on all the Bitcoin peers (including clients behind NATs).
The man-in-the-middle attack exploits a Bitcoin built-in
reputation based DoS protection and the attacker is able to
force speciﬁc Bitcoin peers to ban Tor Exit nodes of her choice.
Combining it with some peculiarities of how Tor handles
data streams a stealthy and low-resource attacker with just
1-3% of overall Tor Exit bandwidth capacity and 1000-1500
cheap lightweight Bitcoin peers (for example, a small Botnet)
can force all Bitcoin over Tor trafﬁc to go either through
her Exit nodes or through her peers. This opens numerous
attack vectors. First, it simpliﬁes trafﬁc correlation attack since
the attacker controls one end of the communication. Second,
the attacker can glue together different Bitcoin addresses
(pseudonyms) of the same user. Third, it opens possibilities of
1This is always a matter of trust of the service operator.
2E.g. when connecting through a public Wi-Fi.
© 2015, Alex Biryukov. Under license to IEEE.
© 2015, Alex Biryukov. Under license to IEEE.
DOI 10.1109/SP.2015.15
DOI 10.1109/SP.2015.15
122
122
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:31 UTC from IEEE Xplore.  Restrictions apply. 
double spending attacks for mobile SPV clients, those which
it was supposed to protect from such attacks. Moreover in
collusion with a powerful miner double-spending becomes
possible and a totally virtual Bitcoin reality may be created
for such users (at least for a brief period of time).
The rest of the paper is organized as follows. In Section II,
we provide information on Bitcoin and Tor internals required
for understanding the attacks. In Section III we describe how
an attacker can get in the middle between Bitcoin clients and
Bitcoin network, effectively isolating the clients from the rest
of the Bitcoin P2P network. We also show that Bitcoin peers
available as Tor hidden services may not solve the problem.
In Section IV, we show how a user can be ﬁngerprinted
and his activity linked across different sessions. Section V
describes how the attacker can increase the probability that
a user connecting to the Bitcoin network directly (i.e. without
using Tor) will choose her peers. In Section VI, we analyze
the man-in-the-middle attack and estimate connection delays
experienced by the user and check for which malicious Exit
bandwidth and number of malicious peers the attack becomes
unnoticeable to the user. Section VII calculates the costs
of the attack. In Section VIII, we describe several possible
countermeasures.
Ethical considerations. We reported the attacks described
in this paper to the Bitcoin developers. In addition we submit-
ted a patch which ﬁxes the “address cookie” attack. Though
we carried out some experiments using our own relays in the
real Bitcoin and Tor networks we believe that no users were
harmed since the relays were limited in bandwidth and were
running only for a short time. Address cookie ﬁngerprinting
was tested only on our own clients/transactions.
II. BACKGROUND
In this section we provide details of the inner working of
Tor and Bitcoin protocols. Many of these details were obtained
by an analysis of the corresponding source code3. This is
especially true for Bitcoin for which there exists no ofﬁcial
documentation except for the original white paper [18] and
Bitcoin Wiki [4].
A. Bitcoin
Bitcoin is a decentralized virtual currency and a payment
system based on cryptography and a peer-to-peer network.
Its main components are transactions and blocks. Blocks are
created by Bitcoin miners by solving cryptographic puzzles
of controlled hardness (called proofs of work). The proof of
work consists of ﬁnding a cryptographic hash value for a
block of transactions which starts with a certain number of
leading zero bits (32 when Bitcoin was ﬁrst proposed, 67
zero bits at present). With each solved block a miner creates
and earns 25 new Bitcoins. Hash of the previous block is
included into the new block, which results in a chain of blocks
or blockchain. The difﬁculty of the cryptographic puzzles is
adjusted automatically by the network so that the network
generates one block every 10 minutes on the average. Payers
and payees of the system are identiﬁed by Bitcoin addresses
which are base58-encoded hashes of their public keys. Money
transfers from one Bitcoin address to another are done by
3Bitcoin version 0.9.2 and Tor version 0.2.4.23
creating a signed transaction and broadcasting it to the P2P
network. Transactions are included into blocks by miners; once
a transaction is buried under a sufﬁcient number of blocks, it
becomes computationally impractical to double spend coins in
this transaction.
Bitcoin is a peer-to-peer system where each peer is sup-
posed to keep its copy of the blockchain, which plays a role of
a public ledger. Whenever a block or a transaction is generated
by a peer, it is broadcasted to other peers in the network.
Upon receipt and veriﬁcation of the block’s proof of work
the peer updates his copy of the blockchain. Bitcoin software
does not explicitly divide its functionality between clients and
servers, however Bitcoin peers can be grouped into those which
accept incoming connections (servers) and those which don’t
(clients), i.e. peers behind network address translation (NAT)
or ﬁrewalls. Bitcoin users connecting to the Bitcoin network
through Tor or VPN obviously also do not accept incoming
connections.
At the time of writing there are about 7,000 reachable
Bitcoin servers [6] and the number of clients is estimated
to be an order of magnitude larger [8]. By default Bitcoin
peers (both clients and servers) try to maintain 8 outgoing
connections to other peers in the network. If any of the 8
outgoing connections drop, a Bitcoin peer tries to replace them
with new connections. Using our terminology, a Bitcoin client
can only establish a connection to a Bitcoin server. We call
servers to which a client established connections entry nodes of
this client. By default a server can accept up to 117 incoming
connections. If this limit is reached all new connections are
dropped.
1) Bitcoin anti-DoS protection: As an anti-DoS protection,
Bitcoin peers implement a reputation-based protocol with each
node keeping a penalty score for every other Bitcoin peer
(identiﬁed by its IP address). Whenever a malformed message
is sent
the latter increases the penalty score
(different messages incur different penalties) of the sender
and bans the “misbehaving” IP address for 24 hours when
the penalty reaches the value of 100.
to the node,
2) Bitcoin peers as Tor hidden services: Tor hidden ser-
vices (see section II-B3) are service-agnostic in the sense that
any TCP-based service can be made available as a Tor hidden
service. This is used by Bitcoin which recognizes three types
of addresses: IPv4, IPv6, and OnionCat [19]. Onioncat address
format is a way to represent an onion address as an IPv6
address: the ﬁrst 6 bytes of an OnionCat address are ﬁxed
and set to FD87:D87E:EB43 and the other 10 bytes are the
hex version of the onion address (i.e. base32 decoded onion
address after removing the “.onion” part).
3) Bitcoin peer discovery and bootstrapping: Bitcoin im-
plements several mechanisms for peer discovery and bootstrap-
ping. First, each Bitcoin peer keeps a database of IP addresses
of peers previously seen in the network. This database survives
between Bitcoin client restarts. This is done by dumping the
database to the hard drive every 15 minutes and on exit (as
we will see later this facilitates setting a cookie on the user’s
computer). Bitcoin peers periodically broadcast their addresses
in the network. In addition peers can request addresses from
each other using GETADDR messages and advertise addresses
using ADDR messages.
123123
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:31 UTC from IEEE Xplore.  Restrictions apply. 
If Tor is not used, when a Bitcoin clients starts, it ﬁrst
tries to populate its address database by resolving 6 hard-coded
hostnames4. If Tor is used, Bitcoin does not explicitly ask Tor
to resolve5 them but rather asks it to establish connections to
these hostnames.
If Tor is not used, the addresses for outgoing connections
are taken from the addresses database only. In case Tor is used,
every second connection is established to a DNS hostname.
These DNS hostnames are called “oneshots” and once the
client establishes a connection to such a hostname it requests
a bunch of addresses from it and then disconnects and never
tries to connect to it again. As a fallback if no addresses can
be found at all, after 60 seconds of running the Bitcoin client
uses a list of 600 hard-coded IP addresses.
Bitcoin nodes recognize three types of addresses: IPv4,
IPv6, and OnionCat [19]. For each type of addresses the
peer maintains a state variable indicating if the Bitcoin node
is capable of using such address type. These state variables
become important when using Tor: the only address type which
is accepted from other peers is OnionCat type. Curiously,
this results in that all IPv4 and IPv6 addresses obtained
from oneshots are dropped and the client uses its original
database. The opposite case also holds: if Tor is not used,
onion addresses are not stored in the address database.
Finally each address is accompanied by a timestamp which
determines its freshness.
4) Choosing outgoing connections: For each address in
the address database, a Bitcoin peer maintains statistics which
among other things includes when the address was last seen
in the network,
if a connection to this address was ever
established before, and the timestamp of such connection. All
addresses in the database are distributed between so called
buckets. There are 256 buckets for “new” addresses (addresses
to which the Bitcoin client has never established a connection)
and 64 for “tried” addresses (addresses to which there was
at least one successful connection). Each bucket can have at
most 64 entries (which means that there can be at most 20480
addresses in the database). When a peer establishes outgoing
connections, it chooses an address from “tried” buckets with
probability p = 0.9 − 0.1n, where n is the number of already
established outgoing connections. If an address is advertised
frequently enough it can be put into up to 4 different “new”
buckets. This obviously increases its chances to be selected by
a user and to be transferred to a “tried” bucket.
B. Tor
Tor is the most popular low-latency anonymity network
which at the time of this writing comprised 6000-7000 routers
with an estimated number of daily users exceeding 500,000
(not counting the botnet-infected nodes). Tor is based on ideas
of onion routing and telescoping path-building design. When a
user wants to connect to an Internet server while keeping his IP
address in secret from the server he chooses a path consisting
of three Tor relays (called Guard, Middle and Exit), builds a
4At the time of this writing one of these hostnames constantly failed to
resolve into any IP address.
5When applications communicate with Tor they can either ask Tor to
establish a connection to a hostname by sending a CONNECT command or
to resolve a hostname by sending a RESOLVE command.
circuit and negotiates symmetric keys with each one of them
using the telescoping technique. Before sending a message to
the server, the user encrypts it using the negotiated keys. While
the message travels along the circuit, each relay strips off its
layer of encryption. In this way the message arrives at the ﬁnal
destination in its original form and each party knows only the
previous and the next hop.
Tor tries hard to achieve low trafﬁc latency to provide a
good user experience, thus sacriﬁcing some anonymity for
performance. To keep latency low and network throughput
high, Tor relays do not delay incoming messages and do not
use padding. This makes Tor susceptible to trafﬁc conﬁrmation
attacks: if an attacker is able to sniff both ends of a communi-
cation, she is able to conﬁrm that the user communicated with