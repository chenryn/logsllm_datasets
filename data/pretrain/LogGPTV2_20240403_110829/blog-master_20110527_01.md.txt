## PostgreSQL 树状数据存储与查询(非递归) - Use ltree extension deal tree-like data type   
### 作者                                                                     
digoal                   
### 日期                     
2011-05-27                    
### 标签                   
PostgreSQL , 递归查询 , 树结构 , ltree       
----                  
## 背景        
PostgreSQL 9.1里面的一个ltree extension.  
由两位国外PostgreSQL贡献者共同开发  
http://www.sai.msu.su/~megera/postgres/gist  
这个extension带有四个数据类型，多个函数，支持多样化的操作符。  
对于树形结构的数据处理可见一斑。  
之前我的一位同事在设计数据结构的时候有用到这种树形数据，当时是用PostgreSQL的递归查询来满足的需求。  
文章地址:  
http://blog.163.com/digoal@126/blog/static/163877040201132843255911/  
如果使用ltree extension的话，会方便很多。  
简易模块加载步骤:  
1\. 安装PostgreSQL的时候  
```  
gmake world  
gmake install-world  
```  
2\. 在需要新增此EXTENSION的数据库，使用超级用户新增。  
```  
digoal=# create extension ltree;  
CREATE EXTENSION  
digoal=# select * from pg_extension ;  
 extname  | extowner | extnamespace | extrelocatable | extversion | extconfig | extcondition   
----------+----------+--------------+----------------+------------+-----------+--------------  
 plpgsql  |       10 |           11 | f              | 1.0        |           |   
 file_fdw |       10 |         2200 | t              | 1.0        |           |   
 ltree    |       10 |         2200 | t              | 1.0        |           |   
(3 rows)  
digoal=# \dT+  
                         List of data types  
 Schema |    Name    | Internal name | Size | Elements | Description   
--------+------------+---------------+------+----------+-------------  
 public | lquery     | lquery        | var  |          |   
 public | ltree      | ltree         | var  |          |   
 public | ltree_gist | ltree_gist    | var  |          |   
 public | ltxtquery  | ltxtquery     | var  |          |   
(4 rows)  
```  
简单的介绍一下这几个类型 :   
1\. ltree (目前只支持A-Z,a-z,0-9,_作为label的合法字符)  
树形结构类型,一个ltree被称为一个path,由1或多个LABEL组成,每个label由A-Z,a-z,0-9,_组成。  
2\. lquery  
规则表达式,用于匹配ltree类型.  
具体参考手册,需要注意的是%匹配的不是一个label,而是label里的一个单词(_为单词分隔符  
3\. ltxtquery  
一般用于全文扫描，注意，只有ltxtquery类型是符号和匹配的内容是可以有空格隔开的,lquery和ltree不支持空格。  
操作符介绍:  
Table F-12. ltree Operators  
Operator|	Returns|	Description  
---|---|---  
ltree @> ltree|	boolean|	is left argument an ancestor of right (or equal)?  
ltree  ltree|	boolean|	does array contain an ancestor of ltree?  
ltree  ltree[]|	boolean|	does array contain a descendant of ltree?  
ltree[] ~ lquery|	boolean|	does array contain any path matching lquery?  
lquery ~ ltree[]|	boolean|	does array contain any path matching lquery?  
ltree[] ? lquery[]|	boolean|	does ltree array contain any path matching any lquery?  
lquery[] ? ltree[]|	boolean|	does ltree array contain any path matching any lquery?  
ltree[] @ ltxtquery|	boolean|	does array contain any path matching ltxtquery?  
ltxtquery @ ltree[]|	boolean|	does array contain any path matching ltxtquery?  
ltree[] ?@> ltree|	ltree|	first array entry that is an ancestor of ltree; NULL if none  
ltree[] ? create table tbl_music(id serial4,song ltree not null);  
NOTICE:  CREATE TABLE will create implicit sequence "tbl_music_id_seq" for serial column "tbl_music.id"  
CREATE TABLE  
digoal=> insert into tbl_music (song) values ('GangTai.NanGeShou.LiuDeHua.AiNiYiWanNian');  
digoal=> insert into tbl_music (song) values ('GangTai.NanGeShou.LiuDeHua.JinTian');  
INSERT 0 1  
digoal=> insert into tbl_music (song) values ('GangTai.NanGeShou.LiuDeHua.WangQinShui');  
INSERT 0 1  
digoal=> insert into tbl_music (song) values ('GangTai.NanGeShou.ZhangXueYou.WenBie');  
INSERT 0 1  
digoal=> insert into tbl_music (song) values ('GangTai.NanGeShou.ZhangXueYou.QingShu');  
INSERT 0 1  
digoal=> insert into tbl_music (song) values ('GangTai.NvGeShou.ZhenXiuWen.MeiFeiSeWu');  
INSERT 0 1  
digoal=> insert into tbl_music (song) values ('GangTai.NvGeShou.ZhenXiuWen.ZhongShenMeiLi');  
INSERT 0 1  
digoal=> insert into tbl_music (song) values ('DaLu.NanGeShou.DaoLang.2002NianDeDiYiChangXue');  
INSERT 0 1  
digoal=> insert into tbl_music (song) values ('DaLu.NvGeShou.FanBinBin.FeiNiao');  
digoal=> select * from tbl_music;  
 id |                     song                        
----+-----------------------------------------------  
  2 | GangTai.NanGeShou.LiuDeHua.AiNiYiWanNian  
  3 | GangTai.NanGeShou.LiuDeHua.JinTian  
  4 | GangTai.NanGeShou.LiuDeHua.WangQinShui  
  5 | GangTai.NanGeShou.ZhangXueYou.WenBie  
  6 | GangTai.NanGeShou.ZhangXueYou.QingShu  
  7 | GangTai.NvGeShou.ZhenXiuWen.MeiFeiSeWu  
  8 | GangTai.NvGeShou.ZhenXiuWen.ZhongShenMeiLi  
  9 | DaLu.NanGeShou.DaoLang.2002NianDeDiYiChangXue  
 10 | DaLu.NvGeShou.FanBinBin.FeiNiao  
```  
检索刘德华的所有歌曲.  
```  
digoal=> select subltree(song,3,4) from tbl_music where subltree(song,2,3)='LiuDeHua';  
   subltree      
---------------  
 AiNiYiWanNian  
 JinTian  
 WangQinShui  
(3 rows)  
```  
查找与刘德华同一个区域（港台。男歌手）的歌手。  
```  
digoal=> select distinct subltree(song,2,3) from tbl_music where song <@ (select  subpath(song,0,2) from tbl_music where subltree(song,2,3)='LiuDeHua' limit 1);  
  subltree     
-------------  
 LiuDeHua  
 ZhangXueYou  
(2 rows)  
```  
其他不再举例.  
## 参考  
postgresql-9.1beta1/postgresql-9.1beta1/doc/src/sgml/html/ltree.html  
with recursive  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")