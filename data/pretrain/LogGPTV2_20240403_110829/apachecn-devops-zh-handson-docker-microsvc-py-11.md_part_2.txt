用户后端配置类似于我们刚才看到的前一种配置:
```
spec:
    containers:
        - name: users-backend-service
          image: users_server:v2.3
          imagePullPolicy: Never
          ports:
              - containerPort: 8000
          envFrom:
              - configMapRef:
                    name: shared-config
          env:
              - name: POSTGRES_DB
                value: thoughts
          ...
```
`POSTGRES_DB`的值与思想后端中的值相同，但我们将其留在这里是为了展示如何添加更多的环境变量。
# 前端 ConfigMap 配置
前端配置仅使用配置映射，因为不需要额外的环境变量:
```
spec:
    containers:
        - name: frontend-service
          image: thoughts_frontend:v3.7
          imagePullPolicy: Never
          ports:
              - containerPort: 8000
          envFrom:
              - configMapRef:
                    name: shared-config
```
前端盒现在还将包含与数据库连接的信息，这是它不需要的。这对于大多数配置参数来说都没问题。
You can also use multiple ConfigMaps to describe different groups of configurations, if necessary. It is simpler to handle them in a big bucket with all the configuration parameters, though. This will help to catch duplicated parameters and ensure that you have all the required parameters in all microservices.
然而，一些配置参数必须小心处理，因为它们是敏感的。例如，我们从`shared-config`配置图中省略了`POSTGRES_PASSWORD`变量。这样我们就可以登录数据库了，不应该和其他参数存储在任何文件上，以免意外暴露。
为了处理这种信息，我们可以使用 Kubernetes 机密。
# 处理不可告人的机密
机密是一种特殊的配置。它们需要受到保护，以免被使用它们的其他微服务读取。它们通常是敏感数据，如私钥、加密密钥和密码。
请记住，读取机密是一个有效的操作。毕竟，它们需要被使用。机密与其他配置参数的区别在于，它们需要受到保护，因此只有授权的来源才能读取它们。
机密应该由环境注入。这要求代码能够检索配置机密，并为当前环境使用正确的配置机密。它还避免将机密存储在代码中。
Remember *never* to commit production secrets in your Git repositories. The Git tree means that, even if it's deleted, the secret is retrievable. This includes the GitOps environment.
Also, use different secrets for different environments. The production secrets require more care than the ones in test environments.
在我们的 Kubernetes 配置中，授权来源是使用它们的微服务，以及通过`kubectl`访问的系统管理员。
让我们看看如何管理这些机密。
# 在 Kubernetes 心中隐藏机密
Kubernetes 将机密作为一种特定的配置映射值来处理。它们可以在系统中定义，然后以配置图的方式应用。与一般配置图的区别在于信息在内部受到保护。虽然可以通过`kubectl`访问它们，但它们受到保护，不会意外暴露。
可以通过`kubectl`命令在集群中创建一个机密。它们不应该是通过文件和 GitOps 或 Flux 创建的*，而应该是手动创建的。这避免了将机密存储在 GitOps repo 下。*
 *需要机密操作的吊舱将在它们的部署文件中指明。在 GitOps 源代码控制下存储是安全的，因为它不存储机密，只存储对机密的引用。当吊舱被部署时，它将使用正确的参考和解码机密。
Logging into the pod will grant you access to the secret. This is normal, since, inside the pod, the application needs to read its value. Granting access to execute commands in the pod will grant them access to the secrets inside, so keep it in mind. You can read Kubernetes documentation about the best practices of the secrets to understand and adjust depending on your requirements ([https://kubernetes.io/docs/concepts/configuration/secret/#best-practices](https://kubernetes.io/docs/concepts/configuration/secret/#best-practices)).
现在我们知道如何处理它们，让我们看看如何创造这些机密。
# 创造机密
让我们在 Kubernetes 创造机密。我们将存储以下机密:
*   PostgreSQL 密码
*   签名和验证请求的公钥和私钥
我们将把它们存储在可以有多个密钥的同一个 Kubernetes 机密中。以下命令显示了如何生成一对密钥:
```
$ openssl genrsa -out private_key.pem 2048
Generating RSA private key, 2048 bit long modulus
........+++
.................+++
e is 65537 (0x10001)
$ openssl rsa -in private_key.pem -outform PEM -pubout -out public_key.pub
writing RSA key
$ ls 
private_key.pem public_key.pub
```
这些钥匙是你独有的。我们将使用它们来替换前面章节中存储的示例键。
# 将机密存储在集群中
将机密存储在集群中`thoughts-secrets`机密下。请记住将其存储在`example`命名空间中:
```
$ kubectl create secret generic thoughts-secrets --from-literal=postgres-password=somepassword --from-file=private_key.pem --from-file=public_key.pub -n example
```
您可以列出命名空间中的机密:
```
$ kubectl get secrets -n example
NAME             TYPE   DATA AGE
thoughts-secrets Opaque 3    41s
```
你可以描述这些机密来获得更多信息:
```
$ kubectl describe secret thoughts-secrets -n example
Name: thoughts-secrets
Namespace: default
Labels: 
Annotations: 
Type: Opaque
Data
====
postgres-password: 12 bytes
private_key.pem: 1831 bytes
public_key.pub: 408 bytes
```
您可以获取机密的内容，但是检索的数据是以 Base64 编码的。
Base64 is an encoding scheme that allows you to transform binary data into text and vice versa. It is widely used. This allows you to store any binary secret, not only text. It also means that the secrets are not displayed in plain text when retrieved, adding a small layer of protection in cases such as unintentional display in screens.
要获取机密，请使用通常的`kubectl get`命令，如下所示。我们使用`base64`命令对其进行解码:
```
$ kubectl get secret thoughts-secrets -o yaml -n example
apiVersion: v1
data:
 postgres-password: c29tZXBhc3N3b3Jk
 private_key.pem: ...
 public_key.pub: ...
$ echo c29tZXBhc3N3b3Jk | base64 --decode
somepassword
```
同样，如果您编辑一个机密来更新它，输入应该用 Base64 编码。
# 机密部署配置
我们需要在部署配置中配置密码用法，这样密码就可以在所需的 pod 中使用。例如，在用户后端`deployment.yaml`配置文件中，我们有以下代码:
```
spec:
    containers:
    - name: users-backend-service
      ...
      env:
      ...
      - name: POSTGRES_PASSWORD
        valueFrom:
          secretKeyRef:
            name: thoughts-secrets
            key: postgres-password
        volumeMounts:
        - name: sign-keys
          mountPath: "/opt/keys/"
    volumes:
    - name: sign-keys
      secret:
        secretName: thoughts-secrets
        items:
        - key: public_key.pub
          path: public_key.pub
        - key: private_key.pem
          path: private_key.pem
```
我们创建了直接来自机密的`POSTGRES_PASSWORD`环境变量。我们还创建了一个名为`sign-keys`的卷，其中包含两个密钥作为文件，`public_key.pub`和`private_key.pem`。它位于`/opt/keys/`路径上。
以类似的方式，思想后端的`deployment.yaml`文件包含机密，但只有 PostgreSQL 密码和`public_key.pub`。请注意，没有添加私钥，因为思想后端不需要它，并且它不可用。
对于前端，只需要公钥。现在，让我们建立如何检索机密。
# 通过应用检索机密
对于`POSTGRES_PASSWORD`环境变量，我们不需要改变任何东西。它已经是一个环境变量，代码正在从中提取它。
但是对于作为文件存储的机密，我们需要从适当的位置检索它们。存储为文件的机密是签署认证头的关键。所有微服务都需要公共文件，只有用户后端需要私钥。
现在，让我们看看用户后端的`config.py`文件:
```
import os
PRIVATE_KEY = ...
PUBLIC_KEY = ...
PUBLIC_KEY_PATH = '/opt/keys/public_key.pub'
PRIVATE_KEY_PATH = '/opt/keys/private_key.pem'
if os.path.isfile(PUBLIC_KEY_PATH):
    with open(PUBLIC_KEY_PATH) as fp:
        PUBLIC_KEY = fp.read()
if os.path.isfile(PRIVATE_KEY_PATH):
    with open(PRIVATE_KEY_PATH) as fp:
        PRIVATE_KEY = fp.read()
```
当前键仍然作为默认值存在。当机密文件没有装入时，它们将用于单元测试。
It is worth saying it again, but please *do not* use any of these keys. These are for running tests only and available to anyone that has access to this book.
如果`/opt/keys/`路径中的文件存在，它们将被读取，并且内容将被存储在适当的常数中。用户后端需要公钥和私钥。
在思想后端`config.py `文件中，我们只检索公钥，如以下代码所示:
```
import os
PUBLIC_KEY = ...
PUBLIC_KEY_PATH = '/opt/keys/public_key.pub'