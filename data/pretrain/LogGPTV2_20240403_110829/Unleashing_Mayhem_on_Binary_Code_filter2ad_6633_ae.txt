# 优化后的文本

## 概述
本文档介绍了MAYHEM工具，该工具用于自动检测二进制程序中的可利用漏洞。通过结合现有的符号执行技术（包括在线和离线方法），MAYHEM提出了一种新的混合符号执行方案。此外，还引入了基于索引的内存建模技术，以提高在二进制级别的漏洞发现能力。实验结果表明，MAYHEM能够高效地分析29个应用程序，并自动识别和演示29个可利用的漏洞。

## 实验结果与比较

### 覆盖率比较
我们使用了代码量最小的21个工具以及4个较大的工具进行测试。MAYHEM在每个应用中平均达到了97.56%的覆盖率，并在13个工具上实现了100%的覆盖率。相比之下，KLEE在没有模拟系统调用失败的情况下，在12个核心工具上实现了100%的覆盖率。因此，MAYHEM在这一数据集上表现出了与KLEE相当的竞争力。需要注意的是，MAYHEM并不是专门为了最大化代码覆盖率而设计的，但这些实验提供了与其他符号执行器的粗略比较点。

### 与AEG的比较
我们选取了8个来自AEG工作示例的程序，并在同一配置下运行了这两种工具以比较它们的漏洞生成时间（见表IV）。结果显示，MAYHEM的平均速度比AEG慢3.4倍。这是因为AEG使用源代码，可以在更高层次的抽象上操作。而在二进制级别，不存在类型和高层次结构如函数、变量、缓冲区和对象。执行指令的数量（见表IV）是另一个突出源代码和仅二进制分析之间差异的因素。考虑到这一点，我们认为这对MAYHEM来说是一个积极且具有竞争力的结果。

### 前置条件大小的影响
作为额外的实验，我们测量了前置条件的存在如何影响漏洞生成时间。具体来说，我们选择了6个需要崩溃输入来找到可利用漏洞的程序，并逐步减小前置条件的大小，然后测量漏洞生成时间。图10总结了我们的结果，展示了归一化前置条件大小与漏洞生成时间之间的关系。例如，对于一个100字节的崩溃输入，归一化前置条件为70%意味着我们向MAYHEM提供70字节的崩溃输入作为前置条件。虽然行为依赖于程序，但在大多数程序中观察到一种突然的相变现象：移除单个字符可能会导致MAYHEM在限定时间内无法检测到可利用的漏洞。我们认为这是一个未来研究的有趣话题。

## 性能调优

### 公式优化
MAYHEM使用多种优化技术来加速求解器查询。为了对比不同优化水平下的性能提升，我们选择关闭部分或全部优化。通过对15个Linux程序的评估，我们得出了不同公式优化选项对漏洞查找和生成时间的影响（见图11）。代数简化通常可以加速分析，为这15个测试程序提供了平均10%的速度提升。当独立公式优化与简化同时启用时，速度提升显著，达到10-100倍。

Z3支持增量求解，因此我们还测量了在增量模式下的漏洞生成时间。在大多数情况下，增量公式的求解时间与启用独立公式优化时的时间相当。实际上，在一半的例子中（15个中的7个），增量公式的表现优于独立公式。这表明使用增量模式的求解器可以减轻许多公式简化和优化的需求。然而，使用增量模式的一个缺点是会使符号执行状态变得可变，从而在长时间运行的测试中降低了内存效率。

### 污染指令
MAYHEM只对受污染的指令块进行符号评估，其他块则按原样执行。图12显示了24个程序（取自表I）中受污染指令的百分比。在我们的样本程序中，超过95%的指令未被污染，这种优化平均带来了约8倍的速度提升。

## 讨论
本文的主要工作集中在可利用漏洞的发现上。然而，我们相信主要的技术可以适应其他应用领域。我们还强调，MAYHEM的主要目的是告知用户存在可利用的漏洞。生成的漏洞是为了展示问题的严重性，并帮助调试和解决潜在问题。MAYHEM并不试图绕过操作系统防御机制如ASLR和DEP，这将保护系统免受我们生成的漏洞攻击。但是，我们之前的工作Q [25] 表明，可以通过高概率将失效的漏洞（由于ASLR和DEP不再有效）自动转换为绕过这两种防御机制的漏洞。

## 局限性
MAYHEM目前不支持所有系统/库调用。当前实现大约支持30个Linux系统调用和12个Windows库调用。要分析更大更复杂的程序，需要更多系统调用的支持。这是进程级符号执行的一个局限。全系统符号执行器如S2E [28] 或BitBlaze [5] 可以同时执行用户和内核代码，因此没有这个限制。不过，全系统分析的成本会更高，因为恢复状态和分析内核代码所需的时间更多。

另一个局限性是，MAYHEM目前只能在一个运行中分析单个执行线程。它不能处理多线程程序中通过消息传递或共享内存相互作用的线程。最后，MAYHEM只执行受污染的指令，因此受到所有污点分析的陷阱，包括不足污染、过度污染和隐式流[24]。

## 未来工作
我们的实验表明，MAYHEM可以生成针对标准漏洞（如栈溢出和格式字符串）的漏洞。一个有趣的未来方向是扩展MAYHEM以处理更高级的漏洞利用技术，如堆溢出、释放后使用漏洞和信息泄露攻击。从高层次来看，应该可以通过类似MAYHEM当前使用的安全属性来检测此类攻击。然而，如何使这些技术在更大规模的程序中扩展并检测此类漏洞仍然是一个开放的问题。

## 相关工作
Brumley等人[7]提出了自动补丁生成漏洞利用（APEG）挑战。APEG使用补丁指出漏洞位置，然后通过切片构建从输入源到易受攻击行的路径公式。MAYHEM自行发现漏洞和易受攻击的路径。此外，APEG的漏洞概念更为抽象：任何违反路径检查的输入都被视为漏洞。而我们特别关注控制流劫持漏洞，这些漏洞并未由APEG自动生成。

Heelan [14]首次描述了一种技术，该技术接受程序的崩溃输入和跳转寄存器，然后自动生成漏洞。我们的研究探索了状态空间以找到这样的崩溃输入。

AEG [2]是第一个既识别可利用漏洞又自动生成漏洞的系统。AEG仅在源代码上工作，并引入了前置条件符号执行，以专注于搜索空间的特定部分。MAYHEM是AEG在二进制代码上的逻辑扩展。实际上，处理二进制代码使得自动漏洞生成适用于更广泛的程序和场景。

还有几个仅二进制的符号执行框架，如Bouncer [10]、BitFuzz [8]、BitTurner [6]、FuzzBall [20]、McVeto [27]、SAGE [13] 和 S2E [28]，已被应用于各种应用领域。我们在MAYHEM中主要解决的问题是扩展以发现并演示可利用漏洞。本文提出的混合符号执行技术与混合联合测试[19]完全不同，后者通过交错随机测试和联合执行来提高代码覆盖率。

## 结论
我们介绍了MAYHEM，这是一种高效且可扩展地自动发现二进制程序中可利用漏洞的工具。为此，MAYHEM提出了一种新的混合符号执行方案，将现有符号执行技术（包括在线和离线方法）的优势结合起来。我们还介绍了一种基于索引的内存建模技术，使MAYHEM能够在二进制级别发现更多的可利用漏洞。我们使用MAYHEM分析了29个应用程序，并自动识别和演示了29个可利用的漏洞。

## 致谢
感谢我们的指导者Cristian Cadar和匿名评审者的宝贵意见和反馈。这项研究得到了DARPA对卡内基梅隆大学CyLab的资助（N11AP20005/D11AP00262）、NSF Career资助（CNS0953751）以及部分CyLab ARO资助（DAAD19-02-1-0389和W911NF-09-1-0273）的支持。内容不一定反映政府的立场或政策，不应被视为官方认可。

## 参考文献
[此处省略参考文献列表，具体内容请参见原文]

---

以上是对原文的优化，使其更加清晰、连贯和专业。希望对你有所帮助！