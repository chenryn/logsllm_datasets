title:An End-to-End System for Large Scale P2P MPC-as-a-Service and Low-Bandwidth
MPC for Weak Participants
author:Assi Barak and
Martin Hirt and
Lior Koskas and
Yehuda Lindell
An End-to-End System for Large Scale P2P
MPC-as-a-Service and Low-Bandwidth MPC for
Weak Participants∗
Martin Hirt‡
Lior Koskas†
Yehuda Lindell†
Assi Barak†
August 22, 2018
Abstract
Protocols for secure multiparty computation enable a set of parties to compute
In
a joint function of their inputs, while preserving privacy, correctness and more.
theory, secure computation has broad applicability and can be used to solve many of
the modern concerns around utilization of data and privacy. Huge steps have been
made towards this vision in the past few years, and we now have protocols that can
carry out large computations extremely eﬃciently, especially in the setting of an honest
majority. However, in practice, there are still major barriers to widely deploying secure
computation, especially in a decentralized manner.
In this paper, we present the ﬁrst end-to-end automated system for deploying large-
scale MPC protocols between end users, called MPSaaS (for MPC system-as-a-service).
Our system enables parties to pre-enroll in an upcoming MPC computation, and then
participate by either running software on a VM instance (e.g., in Amazon), or by run-
ning the protocol on a mobile app, in Javascript in their browser, or even on an IoT
device. Our system includes an automation system for deploying MPC protocols, an
administration component for setting up an MPC computation and inviting partici-
pants, and an end-user component for running the MPC protocol in realistic end-user
environments. We demonstrate our system for a speciﬁc application of running secure
polls and surveys, where the secure computation is run end-to-end with each party ac-
tually running the protocol (i.e., without relying on a set of servers to run the protocol
for them). This is the ﬁrst such system constructed, and is a big step forward to the
goal of commoditizing MPC.
∗This work appeared at ACM CCS 2018.
†Dept.
of Computer
Science,
PI:EMAIL,
PI:EMAIL, lindell@biu.ac.il.
Supported by the European Research Council
under the ERC consolidators grant agreement n. 615172 (HIPS), by the BIU Center for Research in
Applied Cryptography and Cyber Security in conjunction with the Israel National Cyber Directorate in
the Prime Minister’s Oﬃce, and by the Alter Family Foundation.
Bar-Ilan University,
Israel.
‡ETH Zurich, Switzerland. PI:EMAIL
1
One of the cryptographic diﬃculties that arise in this type of setting is due to the
fact that end users may have low bandwidth connections, making it a challenge to
run an MPC protocol with high bandwidth. We therefore present a protocol based
on Beerliova-Trubiniova and Hirt (TCC 2008) with many optimizations, that has very
low concrete communication, and the lowest published for small ﬁelds. Our protocol
is secure as long as less than a third of the parties are malicious, and is well suited
for computing both arithmetic and Boolean circuits. We call our protocol HyperMPC
and show that it has impressive performance. In particular, 150 parties can compute
statistics—mean, standard deviation and regression—on 4,000,000 inputs (with a cir-
cuit of size 16,000,000 gates of which 6,000,000 are multiplication) in just 45 seconds,
and 150 parties can compute a circuit over GF [28] (which can be used for a Boolean
computation) with 1,000,000 multiplication gates and depth-20 in just 2 seconds. Al-
though our end-to-end system can be used to run any MPC protocol (and we have
incorporated numerous protocols already), we demonstrate it for our new protocol
that is optimized for end-users without high bandwidth.
1
Introduction
1.1 Background
Secure multiparty computation (MPC) allows a set of parties to securely compute an agreed
function on their private inputs. Informally speaking, security means that the secrecy of
the inputs and the correctness of the output is maintained, even in the presence of some
malicious parties who may deviate from the protocol.
Feasibility of secure multiparty computation (MPC) was proven in the late 1980s,
demonstrating that any functionality can be securely computed in the presence of a mali-
cious adversary who may arbitrarily deviate from the protocol speciﬁcation in an attempt to
breach security. Secure computation can be achieved with computational security [33, 15]
for any number of corrupted parties, with perfect security as long as less than one third of
the parties are corrupted [4], and with statistical security for an honest majority assuming
broadcast [26]. These powerful results prove that MPC can solve the problem of data
utilization while preserving privacy. However, they do not address the problem of concrete
eﬃciency, and the ability to carry out MPC in practice.
Over the past decade there has been huge progress on the problem of constructing
eﬃcient MPC; see [6, 24, 14, 12, 22, 23, 18, 25, 1, 28, 21] for just a few examples. The
current state of aﬀairs is that it is possible for parties to carry out huge computations (with
millions and even billions of Boolean or arithmetic gates) in reasonable time.
The above demonstrates that secure computation can be made practical, and indeed
there are a number of startup companies oﬀering MPC solutions, and other large companies
using MPC for internal computations. This is of great importance, and we are already
seeing the use of MPC in real-world business solutions. However, the promise of MPC goes
far beyond the B2B context, and is a perfect ﬁt for peer-to-peer decentralized settings.
2
In its basic theory, MPC enables an arbitrary set of end-user parties to carry out joint
computations on their own personal private data, without revealing it to anyone else. This
is extremely attractive, since parties participating in MPC protocols do not need to trust
anyone beyond themselves.
However, despite the above, there are still signiﬁcant obstacles to deploying peer-to-peer
MPC in practice:
1. It is unclear how in practice a set of parties can synchronize what protocol to run and
when.
2. Most MPC implementations to date require the installation of software, and cannot be
run on end-user devices like Mobile phones or in a browser, which is the way that most
end users prefer to work.
3. Almost all MPC protocols require all parties to be online at the same time. This is a
serious obstacle to carrying out large-scale MPC between end users who may reside in
diﬀerent time zones.
These above issues, and more, must be solved before peer-to-peer MPC can be used in
practice.
In order to illustrate the above, we refer to an extremely interesting example of a real
MPC deployment that was carried out recently. The Boston Women’s Workforce Coun-
cil used MPC to carry out a study of the gender wage gap among employers within the
Greater Boston Area [20]. This study required obtaining (anonymized) employee compen-
sation from private companies, which was refused due to requirements to protect sensitive
information. After considerable legal and technical work, secure multiparty computation
was used, and enabled the study to be carried out. In the speciﬁc case of [20], two servers
received shares of the inputs from all and were used to run the entire computation. This
means that all parties involved had to trust that the two servers would not collude, or be
simultaneously breached. Indeed, in many cases, such a model can be legally problematic
due to questions of trust (who runs these servers) and the regulatory requirements for each
party to protect its own data.
A far more compelling way of carrying out the above study would be to have each
company run its own copy of the MPC. However, as described by [20], none of these
companies would install software and would only use a browser interface. Furthermore, it
took great eﬀort on the part of the Boston Women’s Workforce Council to get the companies
to agree to this model. It would be much easier, and more eﬀective, to ask end users to
provide their own information and run the MPC themselves. This would enable the study
to span the entire nation, and even world, and give a far bigger and better picture of the
gender wage gap problem.
3
1.2 An End-to-End System for P2P MPC
In this paper, we describe a full-ﬂedged end-to-end MPC system that can be used to run
large-scale secure computations between end users on their own personal data. Our aim
was to build an MPC system that works the way modern software works. As such, end
users can participate in MPC executions on platforms that real end users use, a mobile
app or web browser (with any browser), and without requiring software installation or
allocating servers. In addition the MPC system can be oﬀered in the software-as-as-service
model, meaning that there is a cloud service provider who oﬀers the MPC service, sub-
scribers who can purchase/use the service and initiate MPC executions, and end users
who can participate in these executions. Crucially, end users need not trust anyone but
themselves, since they are active participants in the MPC. The system must provide elas-
ticity, be low cost, and not require out-of-pocket expenditure in order to participate (i.e.,
in the OPEX model).
We call the system MPSaaS, or MPC system-as-a-service, and it can be used to setup
and deploy end-to-end MPC computations in practice. The system works by a provider
(or anyone running the system) publishing an upcoming MPC execution that anyone can
register to join. The existing system uses Google or Facebook authentication to register,
but this is just used as a demonstration of capability. After registering, users can view
upcoming executions, and can join any that they wish (or are invited to). At this point,
the user makes a decision as to whether or not they will be online during the actual MPC
execution. If yes, then they can run the MPC from their mobile phone or browser (and
will receive an automatic notiﬁcation a little before the execution is supposed to begin).
The secure computation is then run on their phone itself (or within their browser), and
their private input never leaves the device (or browser boundary). If they cannot guarantee
being online, then they can choose to connect a cloud VM instance to the MPC which will
receive their input and run the MPC for them (this can be done in two ways, as will be
described below); once again, their private input never leaves the VM instance. We stress
that the system generates the circuit on-the-ﬂy when the computation begins, so if a user
who is supposed to join the execution does not show up, this will not prevent the execution
from running.
In order to achieve the above, MPSaaS is comprised of the following components:
1. The automation backend: In order to deploy large scale secure computation, it is essen-
tial that instances of the MPC protocol be automatically delivered and executed. We
implemented a backend that can be used to deploy general MPC executions, in a fully
automated way. The capabilities of the backend include: a fully automated environment
setup in AWS or Azure, multiple execution coordination (including setting up parties
by bidding for instances, running the MPC protocol, and tearing the parties down upon
completion), and monitoring, result collection and reporting (in order to obtain results,
as well as reporting on running time and other resource usage). The backend works with
arbitrary protocols and we have already incorporated 10 diﬀerent protocols into the sys-
4
tem. It is possible to setup complex experiments with executions for diﬀerent numbers
of parties on diﬀerent circuit types in diﬀerent topologies in minutes, and automatically
receive back a summary of the results.
We believe that this backend is of independent interest, and will be very useful for
the MPC community at large. As with all of our software, we stress that the backend
automation system is open source and will be made freely available to all.
2. MPSaaS administrator component: This component enables a provider (or anyone run-
ning the open source software) to invite participation in a secure computation. The
administrator can publish proposed secure computations, track how many users have
registered (and potentially which users), and obtain the results (we stress that partici-
pants also receive all results as part of the MPC protocol that they run). The system
is not intended for providing anonymity regarding the identity of the participants, but
rather focuses on guaranteeing privacy of their inputs. This has the advantage of making
it easier to prevent sybil attacks and bogus registrations. The administrator component
is linked to the backend, to actually deploy the MPC executions that are published.
3. MPSaaS end-user execution: The end-user component consists of a software layer for
running MPC on end-user devices, including mobile phones, browsers and even on IOT
devices. We demonstrated MPC on Raspberry Pi for the latter, and this can be used
for secure computations over data gathered by IOT devices.
We demonstrated the above system by constructing an MPC private polling solution for
carrying out surveys while keeping inputs private. This solution has very broad applicabil-
ity, and could be used to run a gender wage gap study as discussed above, but with each
individual party actually running the MPC protocol and therefore not needing to trust
anyone with their data.
1.3 HyperMPC – A Low-Bandwidth Protocol
One of the challenges that arises when attempting to deploy end-user MPC protocols is due
to the large amount of communication that can be required. This is especially a problem
when users run on mobile devices with limited bandwidth (and costs encountered) and on
IOT devices that need to save power. There has been great progress in this direction in
recent years for the case of an honest majority. For example, [2] achieve secure computation
over Boolean circuits with security in the presence of malicious adversaries at the cost of
just 7 bits per AND gate. However, their protocol only works for 3 parties (with an
honest majority), and only achieves this eﬃciency when running secure computations with
massively parallelizable circuits or when amortizing over many secure computations. Thus,
such protocols do not suit the type of environment needed for MPSaaS, where many parties
participate in a single execution.
5
Highly eﬃcient protocols were recently presented for the setting of an honest majority
and computation over arithmetic circuits in [21] with additional improvements in [10].
These protocols have very impressive performance in practice, especially when working
over large ﬁelds. However, on smaller ﬁelds, they require considerably more bandwidth. In
particular, they are not eﬃcient for Boolean-circuit computations, which are very common.
A new protocol with low bandwidth.
In order to address this issue, we present a new
protocol for information-theoretic multiparty computation that is secure in the presence
of an adaptive, malicious adversary corrupting up to t < n/3 parties. Our protocol is
based on the protocol of [5], with signiﬁcant optimizations to achieve practical eﬃciency.
In particular, since robustness cannot be achieved in the asynchronous setting that we
consider without great cost, there is no need to take (expensive) preparations to recover
from adversarial attacks. Rather, if cheating is observed, then the parties simply abort
the computation. Hence, as opposed to the protocol of [5], we employ neither the player
elimination framework [16] nor circuit randomization [3]. This signiﬁcantly simpliﬁes the
implementation (an important feature in practice) and improves the performance.
We call our protocol HyperMPC, since one of the main techniques utilized to achieve