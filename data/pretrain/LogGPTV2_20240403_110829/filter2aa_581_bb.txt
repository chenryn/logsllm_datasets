### Brokered Authentication and OAuth Federation

In the context of brokered authentication, trust between different entities is typically established through X.509 certificates. Let's explore a sample use case to illustrate how this works.

#### OAuth Entities in a Federation Scenario

OAuth involves four key entities:
- **Resource Owner (User)**
- **Resource Server (API Gateway)**
- **Authorization Server**
- **Client Application (Web App)**

These entities can reside in the same domain or in different domains.

#### Simple Federation Scenario

Consider a scenario where the resource owner, resource server, and authorization server are within the same domain (e.g., Foo Inc.), while the client application is in a different domain (e.g., Bar Inc.). For example, an employee of Foo Inc. wants to access a web application hosted by Bar Inc. (see Figure 12-1). The web application needs to access an API hosted by Foo Inc. on behalf of the user.

**Figure 12-1: Brokered Authentication for an OAuth Client Application**

1. **User Access**: The resource owner (user) from Foo Inc. visits the web application at Bar Inc.
2. **Redirection for Authentication**: The web application redirects the user to the OAuth authorization server at Foo Inc. to authenticate. The web application also passes its client ID along with the authorization code grant request during the redirection. The authorization server validates the existence of the client but does not fully authenticate it. In a federation scenario, the authorization server trusts the domain rather than individual applications, thus avoiding the need for client registration.
3. **Authorization Code Issuance**: The authorization server issues an authorization code to the client application.
4. **Client Authentication**: The client application then authenticates itself to its own trust broker in its domain and obtains a signed assertion.
5. **Assertion Exchange**: The signed assertion is used as proof against the authorization server at Foo Inc.
6. **Access Token Issuance**: The authorization server validates the signature of the assertion. If it is signed by a trusted entity, the authorization server issues an access token to the client application.
7. **API Access**: The client application uses the access token to access the APIs in Foo Inc. on behalf of the resource owner.

**Note**: The OAuth client identifier (ID) is not treated as a secret and is publicly visible.

#### Security Assertion Markup Language (SAML)

SAML is an OASIS standard for exchanging authentication, authorization, and identity-related data in an XML-based format. SAML 2.0, adopted in 2005, includes:
- **Assertions**: Authentication, Authorization, and Attribute assertions.
- **Protocol**: Request and Response elements to package SAML assertions.
- **Bindings**: Methods to transfer SAML messages, such as HTTP and SOAP bindings.
- **Profiles**: Aggregations of assertions, protocols, and bindings for specific use cases, like SAML 2.0 Web Single Sign-On (SSO).

**SAML 2.0 Client Authentication**

To achieve client authentication with the SAML 2.0 profile for OAuth 2.0, use the `client_assertion_type` parameter with the value `urn:ietf:params:oauth:client-assertion-type:saml2-bearer` in the access token request.

**Sample Authorization Code Grant Request**:

```http
GET /authorize?response_type=code
               &client_id=wiuo879hkjhkjhk3232
               &state=xyz
               &redirect_uri=https://bar.com/cb
HTTP/1.1
Host: auth.foo.com
```

**Response**:

```http
HTTP/1.1 302 Found
Location: https://bar.com/cb?code=SplwqeZQwqwKJjklje&state=xyz
```

The web application then talks to its trust broker to obtain a SAML assertion. This step can be done using a SOAP-based WS-Trust protocol or other methods. The SAML assertion must adhere to specific rules, including having a unique issuer identifier, a NameID element, and a SubjectConfirmation method set to `urn:oasis:names:tc:SAML:2.0:cm:bearer`.

**Sample SAML Assertion**:

```xml
<Assertion xmlns="urn:oasis:names:tc:SAML:2.0:assertion" ID="_18982198kjk2121" IssueInstant="2023-10-01T12:00:00Z" Version="2.0">
    <Issuer>https://trustbroker.bar.com</Issuer>
    <Subject>
        <NameID Format="urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified">webapp@bar.com</NameID>
        <SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer"/>
    </Subject>
    <Conditions NotBefore="2023-10-01T12:00:00Z" NotOnOrAfter="2023-10-01T13:00:00Z"/>
    <AuthnStatement AuthnInstant="2023-10-01T12:00:00Z" SessionIndex="_18982198kjk2121">
        <AuthnContext>
            <AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:unspecified</AuthnContextClassRef>
        </AuthnContext>
    </AuthnStatement>
</Assertion>
```

**Access Token Request**:

```http
POST /token HTTP/1.1
Host: auth.foo.com
Content-Type: application/x-www-form-urlencoded
grant_type=authorization_code&code=SplwqeZQwqwKJjklje
&client_assertion_type=urn:ietf:params:oauth:client-assertion-type:saml2-bearer
&client_assertion=HdsjkkbKLew...[omitted for brevity]...OT
```

#### SAML Bearer Grant Type for OAuth 2.0

In another use case, the resource server, authorization server, and client application run in the same domain (Bar Inc.), while the user is from an outside domain (Foo Inc.). The user authenticates to the web application with a SAML assertion issued by a SAML identity provider in the user's domain. The client application uses this assertion to obtain an access token from the local authorization server.

**Figure 12-2: Brokered Authentication with SAML Bearer Grant Type for OAuth 2.0**

1. **User Login**: The user logs in to the web application via SAML 2.0 Web SSO.
2. **SAML Flow Initiation**: The web application redirects the user to the SAML identity provider at Foo Inc.
3. **SAML Response**: The SAML identity provider creates a SAML response and sends it back to the web application.
4. **Assertion Validation**: The web application validates the SAML assertion and allows the user to log in.
5. **Token Exchange**: The web application exchanges the SAML assertion for an access token by talking to its internal authorization server.

**Sample POST Message**:

```http
POST /token HTTP/1.1
Host: auth.bar.com
Content-Type: application/x-www-form-urlencoded
grant_type=urn:ietf:params:oauth:grant-type:saml2-bearer
&assertion=QBNhbWxwOl...[omitted for brevity]...OT4
```

**Note**: No refresh tokens are issued under the SAML Bearer grant type. The lifetime of the access token should not exceed the lifetime of the SAML bearer assertion by a significant amount.

#### JWT Grant Type for OAuth 2.0

The JSON Web Token (JWT) profile for OAuth 2.0, defined in RFC 7523, extends the OAuth 2.0 core specification by defining its own authorization grant type and client authentication mechanism. The JWT grant type defines how to exchange a JWT for an OAuth 2.0 access token.

**Sample JWT Authorization Grant Request**:

```http
POST /token HTTP/1.1
Host: auth.bar.com
Content-Type: application/x-www-form-urlencoded
grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Ajwt-bearer&assertion=
eyJhbGciOiJFUzI1NiIsImtpZCI6IjE2In0.
eyJpc3Mi[...omitted for brevity...].
J9l-ZhwP[...omitted for brevity...]
```

The JWT can be self-issued or obtained from an identity provider. The OAuth authorization server must trust the issuer of the JWT. The Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants (RFC 7521) defines the parameters in the JWT.