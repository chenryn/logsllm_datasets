# Grutz @ jingojango.net
# NTLM is DEAD!

## Slide 1: Mozilla Authentication Setup
To configure Mozilla for Integrated Windows Authentication (IWA) or NTLM, follow these steps in `about:config`:

### For IWA:
- **network.negotiate-auth.trusted-uris**: List of trusted URIs (e.g., `list,of,uris`)
- **network.negotiate-auth.using-native-gsslib**: Set to `true`

### For NTLM:
- **network.automatic-ntlm-auth.trusted-uris**: List of trusted URIs (e.g., `list,of,uris`)
- **network.ntlm.send-lm-response**: Set to `false`

---

## Slide 2: NTLM in Browsers and Command-Line Tools

### Opera
- Does not support NTLM authentication directly; a proxy server is required.

### Safari for Windows
- Supports NTLM but not Integrated Windows Authentication. Typically, a proxy server is used for macOS, or credentials are stored in the keychain.

### Wget/CURL
- Both support NTLM on the command line.

### Links/Lynx
- Not typically used for NTLM; a proxy server like NTLMAPS is usually employed.

---

## Slide 3: NTLM Message Header - Type 1 Message (Client to Server)

| Bit Offset | 0-7  | 8-15 | 16-23 | 24-31 |
|------------|------|------|-------|-------|
| 0          | NTLMSSP\0 | Type | Flags | Domain Buffer |
| 1          | Workstation Buffer | OS Ver Structure | Workstation Data |
| 2          | Domain Data |

---

## Slide 4: NTLM Message Flags

- **NEGOTIATE_UNICODE (0x00000001)**: Set if Type 1 contains it (Unicode or OEM, not both).
- **NEGOTIATE_OEM (0x00000002)**: Set if Type 1 contains it (OEM or Unicode, not both).
- **REQUEST_TARGET (0x00000004)**: If set in Type 1, must return domain or server.
- **NEGOTIATE_SIGN (0x00000010)**: Session signature required.
- **NEGOTIATE_SEAL (0x00000020)**: Session seal required.
- **NEGOTIATE_LMKEY (0x00000080)**: LM Session Key should be used for signing and sealing.
- **NEGOTIATE_NTLM (0x00000200)**: NTLM auth is supported.
- **NEGOTIATE_ANONYMOUS (0x00000800)**: Anonymous context used.
- **NEGOTIATE_DOMAIN (0x00001000)**: Sent in Type1, client gives domain info.
- **NEGOTIATE_WORKSTATION (0x00002000)**: Sent in Type1, client gives workstation info.
- **NEGOTIATE_LOCAL_CALL (0x00004000)**: Server and client are on the same machine.
- **NEGOTIATE_ALWAYS_SIGN (0x00008000)**: Add signatures to packets.
- **TARGET_TYPE_DOMAIN (0x00010000)**: If REQUEST_TARGET, we're adding the domain name.
- **TARGET_TYPE_SERVER (0x00020000)**: If REQUEST_TARGET, we're adding the server name.
- **TARGET_TYPE_SHARE (0x00040000)**: Supposed to denote "a share" but for a webserver?
- **NEGOTIATE_NTLM2_KEY (0x00080000)**: NTLMv2 Signature and Key exchanges.
- **NEGOTIATE_TARGET_INFO (0x00800000)**: Server set when sending Target Information Block.
- **NEGOTIATE_128 (0x20000000)**: 128-bit encryption supported.
- **NEGOTIATE_KEY_EXCH (0x40000000)**: Client will supply encrypted master key in Session Key field of Type3 msg.
- **NEGOTIATE_56 (0x80000000)**: 56-bit encryption supported.

---

## Slide 5: NTLM Message Header - Type 2 Message (Server to Client)

| Bit Offset | 0-7  | 8-15 | 16-23 | 24-31 |
|------------|------|------|-------|-------|
| 0          | NTLMSSP\0 | Type | Target Name | Flags |
| 1          | Nonce | Context (Optional) | Target Information Security Buffer (Optional) | OS Version Structure (Optional) |
| 2          | ...Data! |

---

## Slide 6: Target Information Security Buffer & Data

- **TISB**:
  - Length: 2 bytes
  - Space: 2 bytes
  - Offset: 4 bytes
- **Target Data**:
  - Starts at TISB Offset
  - Type: 2 bytes
  - Length: 2 bytes
  - Data: Da Data
  - ... Repeat ...
  - Terminator: 0x0000

---

## Slide 7: NTLM Message Header - Type 3 Message (Client to Server)

| Bit Offset | 0-7  | 8-15 | 16-23 | 24-31 |
|------------|------|------|-------|-------|
| 0          | NTLMSSP\0 | Type | LM/LMv2 Response | NTLM/NTLMv2 Response |
| 1          | Target Name | User Name | Workstation Name | Session Key (optional) |
| 2          | Flags | OS Version (optional) | OS Version (optional) |

---

## Slide 8: HTTP NTLM Authentication

### End User
- **GET / HTTP/1.1**
- **Authorization: NTLM**

### Server
- **WWW-Authenticate: NTLM**
- **HTTP/1.1 200 OK**
- **Session Established**

---

## Slide 9: HTTP NTLM Authentication with Rogue Server

### End User
- **GET / HTTP/1.1**
- **Authorization: NTLM**

### Rogue Server
- **WWW-Authenticate: NTLM**
- **HTTP/1.1 200 OK**
- **Session Closed**

### Server
- **WWW-Authenticate: NTLM**
- **HTTP/1.1 200 OK**
- **Session Established**

---

## Slide 10: Implications of Rogue Server

- As a rogue server, we can bridge authentication requests using Type Messages by directing HTTP requests to us.
- Previously, this was possible via SMBRelay but had a very limited target scope using WPAD+SOCKS or forcing file:// or smb:// connections.
- Jesse Burns @ iSEC Partners described the HTTP->SMB link in 2004 but never released source code.
- In late 2007, I implemented a hash collector and HTTP->IMAP bridge.
- This year, Eric Rachner released “scurvy”.

---

## Slide 11: Introducing Squirtle

---

## Slide 12: What is Squirtle?

- **Squirtle** is a rogue server that does not require Man-in-the-Middle (MITM) techniques such as ARP Poisoning, DNS Redirection, or GRE Tunnels.
- It requires the browser to be in a "trusted zone" for IWA to work and support for `WWW-Authenticate: NTLM`.
- You need to direct browsers to it (e.g., via XSS, proxy, etc.).

---

## Slide 13: What Does Squirtle Do?

- Squirtle listens and collects web clients to use during IWA requests.
- Any external agent can use the provided API to request authentication from specific users using a given nonce from an enterprise server.

### Diagram
- **Controlled Clients** (User A, User B, User C)
- **Evil Agent**
- **Enterprise Server**
- **Squirtle**

---

## Slide 14: Implications

- Past attacks against Windows authentication have been directed at a single server or back towards the client.
- By corralling clients and exposing an API to externally written tools, Squirtle allows proxy servers to be written in any language the attacker desires.
- Existing frameworks such as Metasploit, Canvas, and CORE Impact can use Squirtle to perform attacks against resources that require authentication without obtaining cleartext or LM/NTLM hashes.

---

## Slide 15: iPhone Support

- The iPhone supports strong authentication methods, including industry-standard MD5 Challenge-Response and NTLMv2.

---

## Slide 16: Scenario and Tool Development

- I developed this scenario and tool after finding many internal XSS vulnerabilities and being asked, "Great, you can run a port scanner or send print jobs. What else?"
- Consider the following:
  - Internal servers with web programming errors (XSS, SQL, etc.)
  - Open SMB shares with write access
  - An internal PHPNuke instance
  - Sending an email with a link inside
  - Opening Microsoft Office documents
- All these scenarios can be controlled by Squirtle.

---

## Slide 17: Core Functions

### Client Functions
- **/keepalive**: Hi, I’m still here. Got anything for me?
- **/client/auth**: Oh, ok, I’ll go here. Authenticate? Maybe…

### Agent Functions
- **/controller/listclients**: List collected clients
- **/controller/listhashes**: List collected hashes and nonces
- **/controller/static**: Request client auth with static nonce
- **/controller/type2**: Request client auth with a given nonce
- **/controller/redirect**: Force a redirect and drop the client

All functions require Basic Auth to keep unauthorized users out.

---

## Slide 18: Demos

---

## Slide 19: Protecting IIS

- For each instance, follow [Microsoft KB 215383](http://support.microsoft.com/kb/215383):
  - `cscript adsutil.vbs set w3svc/instance#/root/NTAuthenticationProviders "Negotiate"`
- This will break NTLM-only supported systems like NTLM proxies, so do your testing beforehand.

---

## Slide 20: Forcing the Client

- Not possible. If a browser is in the Local Intranet zone and sees the `WWW-Authenticate: NTLM` header, they will attempt to authorize with it.
- The best bet is to enable NTLMv2-only and get rid of all your Windows NT servers.
- At least with NTLMv2, decryption will take a long time if an attacker obtains user authentication packets.

---

## Slide 21: Q&A - URLs

- **Squirtle**: [http://code.google.com/p/squirtle](http://code.google.com/p/squirtle)
- **Pass The Hash Toolkit**: [http://oss.coresecurity.com/projects/pshtoolkit.htm](http://oss.coresecurity.com/projects/pshtoolkit.htm)
- **FGDump**: [http://www.foofus.net/fizzgig/fgdump/](http://www.foofus.net/fizzgig/fgdump/)
- **Cain & Abel**: [http://www.oxid.it/cain.html](http://www.oxid.it/cain.html)
- **Grutztopia**: [http://grutztopia.jingojango.net/](http://grutztopia.jingojango.net/)
- **Metasploit**: [http://www.metasploit.com/](http://www.metasploit.com/)