grutz @ jingojango.net
NTLM is DEAD!
Slide #
Mozilla Auth Setup
In about:conﬁg
Enable IWA:
network.negotiate-auth.trusted-uris: list,of,uris
network.negotiate-auth.using-native-gsslib: true
Or just NTLM:
network.automatic-ntlm-auth.trusted-uris: list,of,uris
network.ntlm.send-lm-response: false
28
grutz @ jingojango.net
NTLM is DEAD!
grutz @ jingojango.net
NTLM is DEAD!
Slide #
NTLM in 
Opera does not support NTLM authentication directly, you must go 
through a proxy server.
Safari for Windows will do NTLM but does not do Integrated Windows 
Auth. Typically a proxy server is used for OS X or stored credentials in the 
keychain.
Wget/CURL both support NTLM on the command line.
Links/Lynx … why? maybe, not something I checked - usually use a 
proxy server like NTLMAPS.
29
grutz @ jingojango.net
NTLM is DEAD!
grutz @ jingojango.net
NTLM is DEAD!
Slide #
NTLM Message Header
30
Type 1 Message -> Client to Server
Bit 
Offset 0 1 2 3 4 5 6 7 8 9
1
0 1 2 3 4 5 6 7 8 9
2
0 1 2 3 4 5 6 7 8 9
3
0 1
0
NTLMSSP\0
Type
Flags
Domain
Buffer
Workstation
Buffer
32
OS Ver
Structure
Workstation Data
64
Domain Data
grutz @ jingojango.net
NTLM is DEAD!
grutz @ jingojango.net
NTLM is DEAD!
Slide #
Flags
31
# NTLMSSP Message Flags
NEGOTIATE_UNICODE     = 0x00000001  # Only set if Type 1 contains it - this or oem, not both
NEGOTIATE_OEM         = 0x00000002  # Only set if Type 1 contains it - this or unicode, not both
REQUEST_TARGET        = 0x00000004  # If set in Type 1, must return domain or server
NEGOTIATE_SIGN        = 0x00000010  # Session signature required
NEGOTIATE_SEAL        = 0x00000020  # Session seal required
NEGOTIATE_LMKEY       = 0x00000080  # LM Session Key should be used for signing and sealing
NEGOTIATE_NTLM        = 0x00000200  # NTLM auth is supported
NEGOTIATE_ANONYMOUS   = 0x00000800  # Anonymous context used
NEGOTIATE_DOMAIN      = 0x00001000  # Sent in Type1, client gives domain info
NEGOTIATE_WORKSTATION = 0x00002000  # Sent in Type1, client gives workstation info
NEGOTIATE_LOCAL_CALL  = 0x00004000  # Server and client are on same machine
NEGOTIATE_ALWAYS_SIGN = 0x00008000  # Add signatures to packets
TARGET_TYPE_DOMAIN    = 0x00010000  # If REQUEST_TARGET, we're adding the domain name
TARGET_TYPE_SERVER    = 0x00020000  # If REQUEST_TARGET, we're adding the server name
TARGET_TYPE_SHARE     = 0x00040000  # Supposed to denote "a share" but for a webserver?
NEGOTIATE_NTLM2_KEY   = 0x00080000  # NTLMv2 Signature and Key exchanges
NEGOTIATE_TARGET_INFO = 0x00800000  # Server set when sending Target Information Block
NEGOTIATE_128         = 0x20000000  # 128-bit encryption supported
NEGOTIATE_KEY_EXCH    = 0x40000000  # Client will supply encrypted master key in Session Key field of Type3 msg
NEGOTIATE_56          = 0x80000000  # 56-bit encryption supported
grutz @ jingojango.net
NTLM is DEAD!
grutz @ jingojango.net
NTLM is DEAD!
Slide #
NTLM Message Header
32
Type 2 Message -> Server to Client
Bit 
Offset 0 1 2 3 4 5 6 7 8 9
1
0 1 2 3 4 5 6 7 8 9
2
0 1 2 3 4 5 6 7 8 9
3
0 1
0
NTLMSSP\0
Type
Target Name
Flags
Nonce
32
Context 
(Optional)
Target 
Information 
Security 
Buffer 
(Optional)
OS Version 
Structure 
(Optional)
...Data!
grutz @ jingojango.net
NTLM is DEAD!
grutz @ jingojango.net
NTLM is DEAD!
Slide #
NTLM Message Header
33
Target Information Security Buffer & Data
TISB:
Length - 2 bytes
Space - 2 bytes
Offset - 4 bytes
Target Data:
Starts at TISB Offset
Type - 2 bytes
Length - 2 bytes
Data - Da Data
… Repeat …
Terminator - (0x0000)
grutz @ jingojango.net
NTLM is DEAD!
grutz @ jingojango.net
NTLM is DEAD!
Slide #
NTLM Message Header
34
Type 3 Message -> Client to Server
Bit 
Offset 0 1 2 3 4 5 6 7 8 9
1
0 1 2 3 4 5 6 7 8 9
2
0 1 2 3 4 5 6 7 8 9
3
0 1
0
NTLMSSP\0
Type
LM/LMv2 
Response
NTLM/NTLMv2
Response
Target
… 
32
… 
Name
User Name
Workstation 
Name
Session
Key 
optional
Flags
OS 
Version
… 
optional
64
OS
Version
…
optional
grutz @ jingojango.net
NTLM is DEAD!
grutz @ jingojango.net
NTLM is DEAD!
Slide #
HTTP NTLM Auth
35
End User
Server
GET / HTTP/1.1
WWW-Authenticate: NTLM
Authorization: NTLM 
WWW-Authenticate: NTLM 
Authorization: NTLM 
HTTP/1.1 200 OK
Session Established
grutz @ jingojango.net
NTLM is DEAD!
grutz @ jingojango.net
NTLM is DEAD!
Slide #
HTTP NTLM Auth
36
End User
Server
GET / HTTP/1.1
WWW-Authenticate: NTLM
Authorization: NTLM 
WWW-Authenticate: NTLM 
Authorization: NTLM 
HTTP/1.1 200 OK
Rogue Server
GET / HTTP/1.1
WWW-Authenticate: NTLM
Authorization: NTLM 
WWW-Authenticate: NTLM 
Authorization: NTLM 
HTTP/1.1 200 OK
Session Established
Session Closed
grutz @ jingojango.net
NTLM is DEAD!
grutz @ jingojango.net
NTLM is DEAD!
Slide #
What does that mean?
As a Rogue Server we’re able to bridge authentication requests using 
Type Messages by directing HTTP requests to us ()
This was previously possible via SMBRelay but very limited target scope 
using WPAD+SOCKS or forcing ﬁle:// or smb:// connections
Jesse Burns @ iSEC Partners described the HTTP->SMB link in 2004 but 
never released source code
In late 2007 I implemented a hash collector and HTTP->IMAP bridge
This year Eric Rachner released “scurvy”
So what’s new?
37
grutz @ jingojango.net
NTLM is DEAD!
grutz @ jingojango.net
NTLM is DEAD!
Slide #
Introducing Squirtle
38
grutz @ jingojango.net
NTLM is DEAD!
grutz @ jingojango.net
NTLM is DEAD!
Slide #
Squirtle? What the…
39
Squirtle is a Rogue Server with Controlling Desires! It does not require:
Man In The Middle techniques such as:
ARP Poisoning
DNS Redirection
GRE Tunnels
Squirtle does require:
The browser be in a “trusted zone” for IWA to work
Support for WWW-Authenticate: NTLM
You somehow direct the browsers to it (XSS, proxy, , etc)
grutz @ jingojango.net
NTLM is DEAD!
grutz @ jingojango.net
NTLM is DEAD!
Slide #
What… does it do?
Squirtle listens and collects web clients to use during IWA requests. Any 
external agent can use the provided API to request authentication from 
speciﬁc users using a given nonce from an enterprise server.
40
Controlled Clients
Evil Agent
Enterprise Server
Squirtle
User A
User B
User C
grutz @ jingojango.net
NTLM is DEAD!
grutz @ jingojango.net
NTLM is DEAD!
Slide #
What does this mean?
Past attacks against Windows authentication have been either directed at a 
single server or back towards the client.
By corralling clients and exposing an API to externally written tools, 
Squirtle allows proxy servers to be written in any language that the 
attacker desires. They don’t need to worry about grabbling clients and 
holding on to them, let Squirtle do that.
Existing frameworks such as Metasploit, Canvas and CORE Impact can 
use Squirtle to perform attacks against resources that require 
authentication without having to obtain cleartext or LM/NTLM hashes!
41
grutz @ jingojango.net
NTLM is DEAD!
grutz @ jingojango.net
NTLM is DEAD!
Slide # 42
iPhone also supports strong authentication methods, 
including industry-standard MD5 Challenge-Response and NTLMv2. 
grutz @ jingojango.net
NTLM is DEAD!
grutz @ jingojango.net
NTLM is DEAD!
Slide #
Thinking about it…
I came up with this particular scenario and tool because after ﬁnding a ton 
of internal XSS vulnerabilities the response was “Great, you can run a port 
scanner or send print jobs. What else?”
So think about this:
Internal servers with web programming errors (XSS, SQL, etc)
Open SMB c:\inetpub\www shares with write access
An internal PHPNuke instance
Sending an E-mail with a link inside of it
The evil act of opening Microsoft Ofﬁce documents
They will all be controlled by the mighty Squirtle!
43
grutz @ jingojango.net
NTLM is DEAD!
grutz @ jingojango.net
NTLM is DEAD!
Slide #
Core Functions
Clients are given a pre-computed key during their ﬁrst connection as a 
Cookie. A keepalive is sent to the Squirtle controller for action requests.
Agent Functions
/controller/listclients -- List collected clients
/controller/listhashes -- List collected hashes and nonces
/controller/static -- Request client auth with static nonce
/controller/type2 -- Request client auth with a given nonce
/controller/redirect -- Force a redirect and drop the client
All functions require Basic Auth be supported to keep the riff-raff out.
Client Functions
/keepalive -- Hi, i’m still here.. Got anything for me?
/client/auth -- Oh, ok I’ll go here.. Authenticate? Maybe…
44
grutz @ jingojango.net
NTLM is DEAD!
grutz @ jingojango.net
NTLM is DEAD!
Slide #
Demos
45
grutz @ jingojango.net
NTLM is DEAD!
grutz @ jingojango.net
NTLM is DEAD!
Slide #
Protecting IIS
For each instance, follow http://support.microsoft.com/kb/215383
cscript adsutil.vbs set w3svc/instance#/root/NTAuthenticationProviders 
"Negotiate”
This will break NTLM-only supported systems like NTLM proxies so do 
your testing before hand.
46
grutz @ jingojango.net
NTLM is DEAD!
grutz @ jingojango.net
NTLM is DEAD!
Slide #
Forcing the client
Not possible. If a browser is in the Local Intranet zone and sees the 
“WWW-Authenticate: NTLM” header they will attempt to authorize with 
it.
Best bet at the moment is to enable NTLMv2-only and get rid of all your 
Windows NT servers (you have gotten rid of them, right?   RIGHT?)
At least with NTLMv2 decryption will take a long long long time should 
an attacker obtain user authentication packets.
47
grutz @ jingojango.net
NTLM is DEAD!
grutz @ jingojango.net
NTLM is DEAD!
Slide #
Q&A - URLs
Squirtle: http://code.google.com/p/squirtle
Pass The Hash Toolkit: http://oss.coresecurity.com/projects/pshtoolkit.htm
FGDump: http://www.foofus.net/ﬁzzgig/fgdump/
Cain & Abel: http://www.oxid.it/cain.html
http://grutztopia.jingojango.net/  --  http://www.metasploit.com/
48