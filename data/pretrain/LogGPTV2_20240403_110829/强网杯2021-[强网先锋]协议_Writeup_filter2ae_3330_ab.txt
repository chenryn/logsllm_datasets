                print("Password:", Password)
                print("Challenge:", Challenge)
                break
        ''' result '''
        # Password: 729174
        # Challenge: a0dc69227cde47db
        ''' test '''
        MyResponse = get_Response(Password, Challenge)
        print("响应值:", MyResponse, MyResponse==Response)
        # 响应值: 8a1e597d699574ff810dbc3798640fa584ccf9524857c45a (== Response)
        input()
        input()
        input()
###  exp-2流还原.py
    import os
    import re
    import uuid
    import base64
    import binascii
    from MSCHAP import *
    from Crypto.Hash import MD4
    from Crypto.Cipher import DES
    from Crypto.Cipher import ARC4
    from binascii import b2a_hex, a2b_hex
    try:
        import scapy.all as scapy
    except ImportError:
        import scapy
    ''' 2.4.  Key Derivation Functions '''
    SHApad1 = b'\x00' * 40
    SHApad2 = b'\xf2' * 40
    def Get_Key(InitialSessionKey, CurrentSessionKey, LengthOfDesiredKey):
        Context = InitialSessionKey[0:LengthOfDesiredKey]
        Context += SHApad1
        Context += CurrentSessionKey[0:LengthOfDesiredKey]
        Context += SHApad2
        CurrentSessionKey = sha1(Context) 
        return CurrentSessionKey[0:LengthOfDesiredKey]
    def Get_Start_Key(Challenge, NtPasswordHashHash):   # 8-octet, 16-octet
        InitialSessionKey = sha1(NtPasswordHashHash + NtPasswordHashHash + Challenge)
        return InitialSessionKey[:16]
    def rc4_decrpt_hex(data, key):
        rc41=ARC4.new(key)
        # print dir(rc41)
        return rc41.decrypt(data)
    def get_CurrentSessionKey(InitialSessionKey, CurrentSessionKey):
        CurrentSessionKey = Get_Key(InitialSessionKey, CurrentSessionKey, 16)
        CurrentSessionKey = rc4_decrpt_hex(CurrentSessionKey, CurrentSessionKey)
        return CurrentSessionKey
    if __name__ == "__main__":
        # 0-to-256-unicode-char Password
        Password = "729174"                 ### 在这里填写 Password    ###
        # 8-octet Challenge
        Challenge = "a0dc69227cde47db"      ### 在这里填写 Challenge   ###
        ''' 1 '''
        pcap_path = '1.pcap'                   ### 在这里填写 pcap文件位置 ###
        '''  '''
        Challenge = bytes.fromhex(Challenge)
        PasswordHash = NtPasswordHash(Password)
        print('PasswordHash:', PasswordHash.hex())
        PasswordHashHash = HashNtPasswordHash(PasswordHash)
        print('PasswordHashHash:', PasswordHashHash.hex())
        ''' Generating 128-bit Session Keys '''
        # 初始密钥
        InitialSessionKey = Get_Start_Key(Challenge, PasswordHashHash)
        print('InitialSessionKey:', InitialSessionKey.hex())
        # 当前会话密钥
        CurrentSessionKey = InitialSessionKey
        print('CurrentSessionKey:', CurrentSessionKey.hex())
        CurrentSessionKey = Get_Key(InitialSessionKey, CurrentSessionKey, 16)
        print('CurrentSessionKey:', CurrentSessionKey.hex())
        ''' 抓包 '''
        pcap_cnt = 0
        comp_data_list = []
        packets = scapy.rdpcap(pcap_path)
        for packet in packets:
            pcap_cnt += 1
            if packet.haslayer('PPP_') and packet['IP'].src == '192.168.188.170':
                comp_data_list.append(bytes(packet[4])[2:])
        ''' 加密数据流解密 '''
        output = b''
        for j in range(len(comp_data_list)):
            # print('数据流', j)
            # 当前会话密钥（迭代）
            CurrentSessionKey = get_CurrentSessionKey(InitialSessionKey, CurrentSessionKey)
            # 当前加密数据
            data = comp_data_list[j]
            result = rc4_decrpt_hex(data, CurrentSessionKey)
            # print(result.hex())
            output += result
            # print()
        print('############################### 最终结果 ##################################################')
        # print(output)
        flag_Regex = re.compile(r'flag{.*?}')
        flag_results = flag_Regex.findall(output.decode('ISO8859-1'))
        print(flag_results)
###  MSCHAP.py
    # 根据RFC2759文档编写
    import os
    import hashlib
    from Crypto.Hash import MD4
    from Crypto.Cipher import DES
    def md4(b):
        h = MD4.new()
        h.update(b)
        return h.digest()
    def sha1(b):
        sha = hashlib.sha1(b)
        return sha.digest()
    def odd_even_parity(b): # 奇偶校验
        result = ''
        for i in range(0, len(b), 7):
            if b[i:i+7].count('1') % 2 == 0:
                result += b[i:i+7]+'0'
            else:
                result += b[i:i+7]+'1'
        return(result)
    ''' 8.1 '''
    def  GenerateNTResponse(AuthenticatorChallenge, PeerChallenge, UserName, Password):
        Challenge =  ChallengeHash(PeerChallenge, AuthenticatorChallenge, UserName) # 8-octet
        PasswordHash = NtPasswordHash(Password)         # 16-octet
        NT_Response = ChallengeResponse(Challenge, PasswordHash)   # 24-octet
        return NT_Response     # 24-octet
    ''' 8.2 '''
    def ChallengeHash(PeerChallenge, AuthenticatorChallenge, UserName):
        UserName = UserName.encode('utf8')
        Context = sha1(PeerChallenge+AuthenticatorChallenge+UserName)
        Challenge = Context[:8]
        return Challenge    # 8-octet 
    ''' 8.3 PasswordHash = NTLM_Hash(Password) '''
    def NtPasswordHash(Password):
        # Password转换成Unicode编码（utf-16编码去掉前缀 FF FE）
        Bytes = Password.encode('utf16')[2:]
        # 对Unicode编码进行MD4加密
        PasswordHash = md4(Bytes)
        return PasswordHash # 16-octet
    ''' 8.4 PasswordHashHash = MD4(PasswordHash) '''
    def HashNtPasswordHash(PasswordHash):   # 16-octet
        PasswordHashHash = md4(PasswordHash)
        return PasswordHashHash     # 16-octet
    ''' 8.5 '''
    def ChallengeResponse(Challenge, PasswordHash):  # 8-octet, 16-octet
        ''' Step 1: 16字节PasswordHashHash分成3份 7 7 2'''
        part1 = PasswordHash[0:7]
        part2 = PasswordHash[7:14]
        part3 = PasswordHash[14:16]
        ''' Step 2: 奇偶校验+扩展 '''
        # part1 （每7bits+1bit校验位）7bytes==>8bytes
        Bits = bytes2bits(part1)
        Bits = odd_even_parity(Bits)
        key1 = bits2bytes(Bits)
        # part2 （每7bits+1bit校验位）7bytes==>8bytes
        Bits = bytes2bits(part2)
        Bits = odd_even_parity(Bits)
        key2 = bits2bytes(Bits)
        # part3 （先添5个字节的0，在每7bits+1bit校验位）2bytes==>7bytes==>8bytes
        Bits = bytes2bits(part3+b'\x00'*5)
        Bits = odd_even_parity(Bits)
        key3 = bits2bytes(Bits)
        ''' Step 3: DES3 '''
        result1 = DesEncrypt(Challenge, key1)[:8]
        result2 = DesEncrypt(Challenge, key2)[:8]
        result3 = DesEncrypt(Challenge, key3)[:8]
        Response = result1 + result2 + result3
        return Response     # 24-octet
    ''' 8.6 '''
    def DesEncrypt(Clear, Key): # 8-octet, 7-octet
        if Clear is None:
            return ""
        # ECB方式
        generator = DES.new(Key, DES.MODE_ECB)
        # 非8整数倍明文补位
        pad = 8 - len(Clear) % 8
        pad_str = b""
        for i in range(pad):
            pad_str = pad_str + int.to_bytes(pad, length=1, byteorder='big')
        # 加密
        Cypher = generator.encrypt(Clear + pad_str)
        return Cypher       # 8-octet