        ProcessDefaultCpuSetsInformation,
        ProcessAllowedCpuSetsInformation,
        ProcessSubsystemProcess,
        ProcessJobMemoryInformation, 
        ProcessInPrivate, 
        ProcessRaiseUMExceptionOnInvalidHandleClose, 
        ProcessIumChallengeResponse,
        ProcessChildProcessInformation, 
        ProcessHighGraphicsPriorityInformation,
        ProcessSubsystemInformation, 
        ProcessEnergyValues, 
        ProcessActivityThrottleState, 
        ProcessActivityThrottlePolicy,
        ProcessWin32kSyscallFilterInformation,
        ProcessDisableSystemAllowedCpuSets, 
        ProcessWakeInformation,
        ProcessEnergyTrackingState,
        ProcessManageWritesToExecutableMemory,REDSTONE3
        ProcessCaptureTrustletLiveDump,
        ProcessTelemetryCoverage,
        ProcessEnclaveInformation,
        ProcessEnableReadWriteVmLogging, 
        ProcessUptimeInformation,
        ProcessImageSection,
        ProcessDebugAuthInformation, 
        ProcessSystemResourceManagement,
        ProcessSequenceNumber,
        ProcessLoaderDetour,
        ProcessSecurityDomainInformation, 
        ProcessCombineSecurityDomainsInformation, 
        ProcessEnableLogging, 
        ProcessLeapSecondInformation,
        ProcessFiberShadowStackAllocation,
        ProcessFreeFiberShadowStackAllocation,
        MaxProcessInfoClass
    } PROCESSINFOCLASS;
### ProcessDebugPort
未公开的`ntdll`的`NtQueryInformationProcess()`函数接受一个信息类的参数用于查询。
`ProcessDebugPort(7)`是其中的一个信息类，`kernel32`的`CheckRemoteDebuggerPresent()`函数内部通过调用`NtQueryInformationProcess()`来检测调试，而`NtQueryInformationProcess`内部则是查询`EPROCESS`结构体的`DebugPort`字段，当进程正在被调试时，返回值为`0xffffffff`，实现代码如下
    typedef NTSTATUS(NTAPI* pfnNtQueryInformationProcess)(
        _In_      HANDLE           ProcessHandle,
        _In_      UINT             ProcessInformationClass,
        _Out_     PVOID            ProcessInformation,
        _In_      ULONG            ProcessInformationLength,
        _Out_opt_ PULONG           ReturnLength
        );
    bool NtQuery()
    {
        pfnNtQueryInformationProcess NtQueryInformationProcess = NULL;  // 存放 ntdll 中 NtQueryInformationProcess 函数地址
        NTSTATUS status;                                                // NTSTATUS 错误代码，0：执行成功
        DWORD isDebuggerPresent = -1;                                   // 如果当前被调试，则 = ffffffff
        HMODULE hNtDll = LoadLibrary(TEXT("ntdll.dll"));                // ntdll 模块句柄
        if (hNtDll)
        {
            // 取 NtQueryInformationProcess 函数地址
            NtQueryInformationProcess = (pfnNtQueryInformationProcess)GetProcAddress(hNtDll, "NtQueryInformationProcess");
            // 取地址成功
            if (NtQueryInformationProcess)
            {
                // NtQueryInformationProcess 检测调试器
                status = NtQueryInformationProcess(GetCurrentProcess(), ProcessDebugPort, &isDebuggerPresent, sizeof(DWORD), NULL);
                // NtQueryInformationProcess 执行成功
                if (status == 0 && isDebuggerPresent != 0)
                {
                    // 输出
                    printf("status = %d\n", status);
                    printf("isDebuggerPresent = %x\n", isDebuggerPresent);
                    printf("当前处于调试状态\n");
                    getchar();
                    return 0;
                }
            }
        }
        // 输出
        printf("status = %d\n", status);
        printf("isDebuggerPresent = %x\n", isDebuggerPresent);
        printf("当前未处于调试状态\n");
    }
当`isDebuggerPresent`的值为-1的时候处于调试状态
为0的时候则为正常启动
### ProcessDebugObjectHandle
`ProcessDebugObjectHandle`位于0x1E偏移，当`status`不为0、`isDebuggerPresent`不等于0时则处于调试状态
    status = NtQueryInformationProcess(GetCurrentProcess(), 0x1E, &isDebuggerPresent, sizeof(DWORD), NULL);
### ProcessDebugFlags
`ProcessDebugFlags
(0x1f)`类返回`EPROCESS`结构体的`NoDebugInherit`的相反数，当调试器存在时，返回值为0，不存在时则返回4
    status = NtQueryInformationProcess(GetCurrentProcess(), 0x1F, &isDebuggerPresent, sizeof(DWORD), NULL);
    if (status == 0 && isDebuggerPresent == 0)
## 父进程
我们一般正常模式启动程序其父进程一般都是`explorer.exe`(不考虑服务进程)，而当我们处于调试状态则父进程为调试器进程，那么我们就可以通过`ntdll.dll`里面的`NtQueryInformationProcess`来进行判断，实现代码如下
    bool CheckParentProcess()
    {
        pfnNtQueryInformationProcess NtQueryInformationProcess = NULL;  // 存放 ntdll 中 NtQueryInformationProcess 函数地址
        HMODULE hNtDll = LoadLibrary(TEXT("ntdll.dll"));                // ntdll 模块句柄
        if (hNtDll)
        {
            struct PROCESS_BASIC_INFORMATION {
                ULONG ExitStatus; // 进程返回码
                PPEB PebBaseAddress; // PEB地址
                ULONG AffinityMask; // CPU亲和性掩码
                LONG BasePriority; // 基本优先级
                ULONG UniqueProcessId; // 本进程PID
                ULONG InheritedFromUniqueProcessId; // 父进程PID
            }ProcInfo;
            NtQueryInformationProcess = (pfnNtQueryInformationProcess)GetProcAddress(hNtDll, "NtQueryInformationProcess");
            NtQueryInformationProcess(
                GetCurrentProcess(),
                ProcessBasicInformation, // 需要查询进程的基本信息
                &ProcInfo,
                sizeof(ProcInfo),
                NULL);
            DWORD ExplorerPID = 0;
            DWORD CurrentPID = ProcInfo.InheritedFromUniqueProcessId;
            GetWindowThreadProcessId(FindWindow(L"DebugPrint", NULL), &ExplorerPID);
            return ExplorerPID == CurrentPID ? false : true;
        }
    }
实现效果如下
## KernelDebuggerEnabled
`NtQuerySystemInformation`被 `ntdll.dll`导出，当第一个参数传入 `0x23
（SystemInterruptInformation）` 时，会返回一个
`SYSTEM_KERNEL_DEBUGGER_INFORMATION`结构，里面的成员`KdKdDebuggerEnable`和
`KdDebuggerNotPresent`标志系统是否启用内核调试
    typedef struct _SYSTEM_KERNEL_DEBUGGER_INFORMATION {
        BOOLEAN KernelDebuggerEnabled;
        BOOLEAN KernelDebuggerNotPresent;
    } SYSTEM_KERNEL_DEBUGGER_INFORMATION, * PSYSTEM_KERNEL_DEBUGGER_INFORMATION;
    typedef NTSTATUS(WINAPI* pNtQuerySystemInformation)(IN UINT SystemInformationClass, OUT PVOID SystemInformation, IN ULONG SystemInformationLength, OUT PULONG ReturnLength);
    bool CheckSystemKernelDebuggerInformation()
    {
        pNtQuerySystemInformation NtQuerySystemInformation = NULL;  // 存放 ntdll 中 NtQueryInformationProcess 函数地址
        HMODULE hNtDll = LoadLibrary(TEXT("ntdll.dll"));                // ntdll 模块句柄
        if (hNtDll)
        {
            NtQuerySystemInformation = (pNtQuerySystemInformation)GetProcAddress(hNtDll, "NtQuerySystemInformation");
            struct _SYSTEM_KERNEL_DEBUGGER_INFORMATION {
                BOOLEAN KernelDebuggerEnabled;
                BOOLEAN KernelDebuggerNotPresent;
            }DebuggerInfo = { 0 };
            NtQuerySystemInformation(
                (SYSTEM_INFORMATION_CLASS)0x23, // 查询信息类型
                &DebuggerInfo, // 输出查询信息
                sizeof(DebuggerInfo), // 查询类型大小
                NULL); // 实际返回大小
            // 通过是否开启内核调试器知道当前系统有没有被调试
            return DebuggerInfo.KernelDebuggerEnabled;
        }
因为这里检测的是否启用内核调试，这里直接运行是不处于调试状态
使用调试模式启动win10运行则显示处于调试状态
## ThreadHideFromDebugger
通过`ZwSetInformationThread`函数，设置
`ThreadHideFromDebugger`此参数将使这条线程对调试器隐藏，即调试器收不到调试信息
    typedef enum THREAD_INFO_CLASS {
    ThreadHideFromDebugger = 17
    };
    typedef NTSTATUS(NTAPI* ZW_SET_INFORMATION_THREAD)(
        IN HANDLE ThreadHandle,
        IN THREAD_INFO_CLASS ThreadInformaitonClass,
        IN PVOID ThreadInformation,
        IN ULONG ThreadInformationLength);
    void ZSIT_DetachDebug()
    {
        ZW_SET_INFORMATION_THREAD ZwSetInformationThread;
        ZwSetInformationThread = (ZW_SET_INFORMATION_THREAD)GetProcAddress(LoadLibrary(L"ntdll.dll"), "ZwSetInformationThread");
        ZwSetInformationThread(GetCurrentThread(), ThreadHideFromDebugger, NULL, NULL);
    }
这里调用函数之后为了证明程序运行成功，这里加上一行输出语句
然后尝试使用od附加，这里可以看到是没有`DebugPrint.exe`这个进程的
那么这里为了更明显一点，首先看下QQ的PID是3872对应十六进制为F20是能够对应上的
然后计算`DebugPrint.exe`的十六进制为5D8，在进程里面是看不到的
# 原理
我们在前面介绍了一些反调试的手段，基本上都是通过对内核的某个标志进行修改来达到反调试的效果，但是这里有一个问题就是，如果分析人员对我们的样本的API进行了hook，那么我们的反调试手段都将作废，也就是说我们还是要深入底层去探究调试器与被调试器直接究竟是如何建立连接的，只有了解了原理，我们才能更加得心应手的进行对抗
在windows里面，每个程序的低2G是独立使用的，高2G(内核)区域是共用的。那么我们假设一个场景，我们的3环调试器要想和被调试程序之间建立通信肯定就需要涉及到进程间的通信以及数据的交换，如果这个过程放在3环完成，不停的进程通信会很繁琐，所以windows选择将这个过程放在0环进行。调试器与被调试程序之间只能通过`CreateProcess`和`DebugActiveProcess`这两个API建立起连接，这里我们探究`DebugActiveProcess`是如何建立起两者之间的连接的
## 与调试器建立连接
首先看一下`DebugActiveProcess`
调用`ntdll.dll`的`DbgUiConnectToDbg`
再调用`ZwCreateDebugObject`
通过调用号进入0环
进入0环创建`DEBUG_OBJECT`结构体
    typedef struct _DEBUG_OBJECT {
         KEVENT EventsPresent;
         FAST_MUTEX Mutex;
         LIST_ENTRY EventList;
         ULONG Flags;
    } DEBUG_OBJECT, *PDEBUG_OBJECT;
然后到`ntoskrnl`里面看一下`NtCreateDebugObject`
然后调用了`ObInsertObject`创建`DebugObject`结构返回句柄
再回到`ntdll.dll`，当前线程回0环创建了一个`DebugObject`结构，返回句柄到3环存放在了TEB的`0xF24`偏移处
也就是说，遍历TEB的`0xF24`偏移的地方，如果有值则一定是调试器
## 与被调试程序建立连接
还是回到`kernel32.dll`的`DebugActiveProcess`，获取句柄之后调用了`DbgUiDebugActiveProcess`
调用`ntdll.dll`的`DbgUiDebugActiveProcess`
跟到`ntdll.dll`里面的`DbgUiDebugActiveProcess`，传入两个参数，分别为调试器的句柄和被调试进程的句柄
通过调用号进0环
来到0环的`NtDebugActiveProcess`， 第一个参数为被调试对象的句柄，第二个参数为调试器的句柄
执行`ObReferenceObjectByHandle`，把被调试进程的句柄放到第五个参数里面，这里eax本来存储的是调试器的`EPROCESS`，执行完之后eax存储的就是被调试进程的`EPROCESS`
这里判断调试器打开的进程是否是自己，如果是自己则直接退出
也不能调试系统初始化的进程
然后获取调试对象的地址，之前是句柄，但是句柄在0环里面是无效的，这里就要找真正的地址
获取到调试对象的地址之后还是存到`ebp+Process`的地方，这里之前是被调试对象的地址，现在存储的是调试对象的地址
将调试进程和被调试的`PEPROCESS`传入`_DbgkpSetProcessDebugObject`，将调试对象和被调试进程关联起来
跟进函数，发现有判断`DebugPort`是否为0的操作，ebx为0，edi为被调试进程的EPROCESS，那么`edi+0bc`就是调试端口
然后再把调试对象的句柄放到被调试对象的`DebugPort`里面
## 调试事件
调试事件是在调试过程中导致系统通知调试器的事件，调试事件包括创建进程、创建线程、加载动态链接库 (DLL) 、卸载
DLL、发送输出字符串和生成异常。我们知道调试器和被调试程序的通信主要依赖于0环的`_DEBUG_OBJECT`结构，然后被调试程序在进行操作时(如：创建进程线程、加载dll)等，就会将一个调试事件写入到`_DEBUG_OBJECT`结构里面，调试器获得句柄即可进行调试
这里就会使用调试事件采集函数来对调试事件进行写入，调试器在被调试进程进行特定操作的必经之路中调试事件采集函数，必经之路分为5条，其中以Dbgk开头的函数为调试事件采集函数，所有调试事件采集函数最终都会调用`DbgkpSendApiMessage`将封装好的调试事件结构体写入到链表当中。  
`DbgkSendApiMessage`有两个参数，第一个参数为调试事件类型，第二个参数为是否挂起其它线程，有时需要，比如0xCC，有时不需要，比如模块加载。
例如创建进程、线程必经之路：
    PspUserThreadStartup()
    ↓
    DbgkCreateThread()
    ↓
    DbgkpSendApiMessage()
退出线程、进程必经之路：
    PspExitThread()
    ↓
    DbgkExitThread()/DbgkExitProcess()
    ↓
    DbgkpSendApiMessage()
我们跟一下`PspExitThread`，首先在`PspExitThread`里面判断`Debugport`是否为0，如果为0则不处于调试状态就不会跳转，如果不为0则为调试状态则跳转到`loc_52E3AC`
然后这里有个判断，如果当前线程是最后一个线程则跳转到`DbgkExitProcess`退出进程，如果不是最后一个线程则跳转到`DbgkExitThread`退出当前线程
这里我们跟`DbgkExitProcess`，这里调用了`DbgkpSendApiMessage`，这个函数的作用就是将被调试程序发送过来的调试事件挂入`_DEBUG_OBJECT`
这里继续跟进去，如果不挂起进程则用`DbgkpQueueMessage`收集调试事件的有关信息
跟进`DbgkpQueueMessage`可以看到最终通过`DebugPort`得到被调试程序的`_DEBUG_OBJECT`的地址
这里继续往下走，通过链表操作添加调试事件信息
## 总结
首先调试器进程先创建一个`_DEBUG_OBJECT`结构放到`TEB`的`0xF24`处，存储的是`_DEBUG_OBJECT`结构的句柄，然后在被调试程序`EPROCESS`的`DebugPort`的地方存储`_DEBUG_OBJECT`结构的地址，然后通过调用`DbgkpSendApiMessage`进行调试事件的采集，把句柄放到`_DEBUG_OBJECT`结构，供调试器使用
那么了解了调试器和被调试器之间如何建立连接，我们就可以通过以下几种方式来进行反调试
1.不断将`EPROCESS`的`DebugPort`清零，使调试器不能够和被调试程序建立连接
2.遍历每个线程`TEB`的`0xF24`，如果存在值就证明有调试器
3.要想建立连接必须要在0环创建`_DEBUG_OBJECT`结构，使用`NtCreateDebugObject`，直接hook
`NtCreateDebugObject`达到监控的效果
4.被调试进程必须通过`DbgkpSendApiMessage`将调试事件放入`_DEBUG_OBJECT`结构供调试器使用，那么这里就可以直接hook
对应的调试事件，如创建进程就hook `DbgkCreateThread`，也可以直接hook
`DbgkpSendApiMessage`达到监控所有调试事件的效果