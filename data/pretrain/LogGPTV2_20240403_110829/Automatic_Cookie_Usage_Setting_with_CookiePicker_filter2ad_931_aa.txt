title:Automatic Cookie Usage Setting with CookiePicker
author:Chuan Yue and
Mengjun Xie and
Haining Wang
Automatic Cookie Usage Setting with CookiePicker
Chuan Yue Mengjun Xie
Haining Wang
The College of William and Mary
{cyue,mjxie,hnw}@cs.wm.edu
Abstract
HTTP cookies have been widely used for maintaining
session states, personalizing, authenticating, and tracking
user behaviors. Despite their importance and usefulness,
cookies have raised public concerns on Internet privacy be-
cause they can be exploited by Web sites to track and build
user proﬁles.
In addition, stolen cookies may also incur
security problems. However, current web browsers lack se-
cure and convenient mechanisms for cookie management. A
cookie management scheme, which is easy-to-use and has
minimal privacy risk, is in great demand; but designing
such a scheme is a challenge. In this paper, we introduce
CookiePicker, a system that can automatically validate the
usefulness of cookies from a Web site and set the cookie us-
age permission on behalf of users. CookiePicker helps users
achieve the maximum beneﬁt brought by cookies, while min-
imizing the possible privacy and security risks. We imple-
ment CookiePicker as an extension to Firefox Web browser,
and obtain promising results in the experiments.
1. Introduction
HTTP Cookies, also known as Web cookies or just cook-
ies, are small parcels of text sent by a server to a web
browser and then sent back unchanged by the browser if
it accesses that server again [29]. Cookies are originally de-
signed to carry information between servers and browsers
so that a stateful session can be maintained within the state-
less HTTP protocol. For example, online shopping Web
sites use cookies to keep track of a user’s shopping bas-
ket. Cookies make Web applications much easier to write,
and thereby have gained a wide range of usage since debut
in 1995. In addition to maintaining session states, cookies
have also been widely used for personalizing, authenticat-
ing, and tracking user behaviors.
Despite their importance and usefulness, cookies have
been of major concern for privacy. As pointed out by Kristol
in [11], the ability to monitor browsing habits, and possibly
to associate what you’ve looked at with who you are, is the
heart of the privacy concern that cookies raise. For exam-
ple, a lawsuit alleged that DoubleClick Inc. used cookies to
collect Web users’ personal information without their con-
sent [3]. Moreover, vulnerabilities of Web applications or
Web browsers can be exploited by attackers to steal cook-
ies directly, leading to severe security and privacy problems
[7, 21, 22].
As the general public has become more aware of cookie
privacy issues, a few privacy options have been introduced
into Web browsers to allow users to deﬁne detailed poli-
cies for cookie usage either before or during visiting a Web
site. However, these privacy options are far from enough
for users to fully utilize the convenience brought by cookies
while limiting the possible privacy and security risks. What
makes it even worse is that most users do not have a good
understanding of cookies and often misuse or ignore these
privacy options [5].
Using cookies can be both beneﬁcial and harmful. The
ideal cookie-usage decision for a user is to enable and store
useful cookies, but disable and delete harmful cookies. It
has long been a challenge to design effective cookie man-
agement schemes that can help users make the ideal cookie-
usage decision. On one hand, determining whether some
cookies are harmful is almost impossible, because very few
Web sites inform users how they use cookies. Platform for
Privacy Preferences Project (P3P) [30] enables Web sites
to express their privacy practices but its usage is too low
to be a feasible solution. On the other hand, determin-
ing whether some cookies are useful is possible, because
a user can perceive inconvenience or Web page differences
if some useful cookies are disabled. For instance, if some
cookies are disabled, online shopping may be blocked or
preference setting cannot take into effect. However, current
Web browsers only provide a method, which asks questions
and prompts options to users, for making decision on each
incoming cookie. Such a method is costly [13] and very
inconvenient to users.
In this paper, we present a system called CookiePicker
to automatically make cookie usage decisions on behalf of
a Web user. The distinct features of CookiePicker include
(1) fully automatic decision making, (2) high accuracy on
decision making, and (3) very low running overhead. Based
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007on the two complementary HTML page difference detection
algorithms, CookiePicker identiﬁes those cookies that cause
perceivable changes on a Web page as useful, while simply
classifying the rest as useless. Then, CookiePicker enables
useful cookies but disables useless cookies. All the tasks are
performed without user involvement or even notice. We im-
plement CookiePicker as a Firefox Web browser extension,
and validate its efﬁcacy through experiments over various
Web sites.
The remainder of this paper is structured as follows.
Section 2 gives the background of cookies and the focus
of CookiePicker. Section 3 describes the design of Cook-
iePicker. Section 4 details the two HTML page difference
detection algorithms, which are the core of CookiePicker.
Section 5 presents the implementation of CookiePicker and
its performance evaluation. Section 6 surveys related work,
and ﬁnally, Section 7 concludes the paper.
2. Background
In general, there are two different ways to classify cook-
ies. Based on the origin and destination, cookies can be
classiﬁed into ﬁrst-party cookies, which are created by the
Web site we are currently visiting; and third-party cookies,
which are created by a Web site other than the one we are
currently visiting. Based on lifetime, cookies can also be
classiﬁed into session cookies, which are stored in memory
and deleted after the close of the Web browser; and per-
sistent cookies, which are stored on a hard disk until they
expire or are deleted by a user.
Third-party cookies bring almost no beneﬁt to Web users
and have long been recognized as a major threat to user pri-
vacy since 1996 [10]. Therefore, almost all the popular Web
browsers, such as Microsoft Internet Explorer and Mozilla
Firefox, provide users with the privacy options to disable
third-party cookies. Although disabling third-party cookies
is a very good start to address privacy concerns, it only lim-
its the user proﬁling done by third parties [11], but cannot
prevent the proﬁling of users from ﬁrst-party cookies.
First-party cookies can be either session cookies or per-
sistent cookies. First-party session cookies are widely used
for maintaining session states, and pose relatively low pri-
vacy or security threats to users due to their short lifetime.
Therefore, it is quite reasonable for a user to enable ﬁrst-
party session cookies.
First-party persistent cookies, however, are double-
edged swords. We have conducted a large scale measure-
ment study on the usage of cookies, with over ﬁve thou-
sands Web sites involved. Our measurement results show
that ﬁrst-party persistent cookies are widely used and above
60% of them are set to expire after one year or even longer
[24]. Some cookies perform useful roles such as person-
alization and authentication. Some cookies, however, pro-
vide no beneﬁt but pose serious privacy and security risks
to users. The major risks lie in two aspects. First, these
ﬁrst-party persistent cookies can be used to track the user
activity over time by the original Web site; second, they
can be stolen or manipulated by two kinds of long-standing
attacks—cross-site scripting (XSS) attacks that exploit Web
applications vulnerabilities [27, 21] and various attacks that
exploit Web browser vulnerabilities [22], since those attacks
can bypass the same origin policy [31] enforced by all mod-
ern Web browsers. For example, recently a cookie-related
XSS vulnerability was even found in one of Google’s host-
ing services [28].
Disabling third-party cookies (both session and persis-
tent) and enabling ﬁrst-party session cookies have been sup-
ported by most Web browsers. The hardest problem in
cookie management is how to handle ﬁrst-party persistent
cookies. Currently Web browsers only have limited func-
tions such as manual deletion or blocking, which are very
cumbersome and impractical to use. Therefore, the focus
of this paper is on ﬁrst-party persistent cookies and how
to automatically manage the usage of ﬁrst-party persistent
cookies on behalf of a user. Instead of addressing XSS or
Web browser vulnerabilities, CookiePicker reduces cookie
privacy and security risks by removing useless ﬁrst-party
cookies from a user’s hard disk. Here we assume that the
hosting Web site is legitimate, since it is worthless to pro-
tect the cookies of a malicious site.
3. CookiePicker Design
The design goal of CookiePicker is to effectively
identify the useful cookies of a Web site, and then disable
the return of those useless cookies back to the Web site
in the subsequent requests and ﬁnally remove them. A
Web page is automatically retrieved twice by enabling and
disabling some cookies.
If there are obvious differences
between the two retrieved results, we classify the cookies
as useful; otherwise, we classify them as useless. Cook-
iePicker enhances the cookie management for a Web site
by two processes: forward cookie usefulness marking and
backward error recovery. We deﬁne these two processes
and detail the design of CookiePicker in the following.
Deﬁnition 1.
FORward Cookie Usefulness Marking
(FORCUM) is a training process, in which CookiePicker
determines cookie usefulness and marks certain cookies as
useful for a Web site.
Deﬁnition 2. backward error recovery is a tuning pro-
cess, in which wrong decisions made by CookiePicker in the
FORCUM process may be adjusted automatically or man-
ually for a Web site.
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 20073.1 Regular and Hidden Requests
A typical Web page consists of a container page that is
an HTML text ﬁle, and a set of associated objects such as
stylesheets, embedded images, scripts, and so on. When a
user browses a Web page, the HTTP request for the con-
tainer page is ﬁrst sent to the Web server. Then, after re-
ceiving the corresponding HTTP response for the container
page, the Web browser will analyze the container page and
issue a series of HTTP requests to the Web server for down-
loading the objects associated with the container page. The
HTTP requests and responses associated with a single Web
page view are depicted by the solid lines (1) and (2) in Fig-
ure 1, respectively. Web page contents coming with the
HTTP responses will be passed into the Web browser layout
engine, which will parse the container page and built it into
a DOM (W3C Document Object Model) tree.
(1 )  r Re q ues ts
( 2 ) r R es p o ns es
(3 )  hR eq ue s t
(4 )  hR es po n s e
W eb  Br o w s er
W eb  S er v er
Figure 1: HTTP requests/responses in a single Web page view.
In order to identify the cookie usefulness for a Web page,
CookiePicker compares two versions of the same Web page:
the ﬁrst version is retrieved with cookies enabled and the
second version is retrieved with cookies disabled. The ﬁrst
version is readily available to CookiePicker in the user’s
regular Web browsing window. CookiePicker only needs to
retrieve the second version of the container page. Similar to
Doppelganger [16], CookiePicker utilizes the ever increas-
ing client side spare bandwidth and computing power to run
the second version. However, unlike Doppelganger, Cook-
iePicker neither maintains a fork window nor mirrors the
whole user session. CookiePicker only retrieves the second
version of the container page by sending a single hidden
HTTP request. As shown in Figure 1, line (3) is the extra
hidden HTTP request sent by CookiePicker for the second
version of the container page, and line (4) represents the
corresponding HTTP response. In the rest of the paper, we
simply refer the requests and responses, represented by the
solid lines (1) and (2) of Figure 1, as regular requests and
responses; and refer the extra request and response, repre-
sented by the dashed lines (3) and (4) of Figure 1, as the
hidden request and response.
3.2 Forward Cookie Usefulness Marking
The FORCUM process consists of ﬁve steps: regular
request recording, hidden request sending, DOM tree ex-
traction, cookie usefulness identiﬁcation, and cookie record
marking.
When visiting a Web page, a user issues regular requests
and then receives regular responses. At the ﬁrst step, Cook-
iePicker identiﬁes the regular request for the container page
and saves a copy of its URI and header information. Cook-
iePicker needs to ﬁlter out the temporary redirection or re-
placement pages and locate the real initial container docu-
ment page.
At the second step, CookiePicker takes advantage of
user’s think time [12] to retrieve the second copy of the con-
tainer page, without causing any delay to the user’s regular
browsing. Speciﬁcally, right after all the regular responses
are received and the Web page is rendered on the screen for
display, CookiePicker issues the single hidden request for
the second copy of the container page. In the hidden re-
quest, CookiePicker uses the same URI as the saved in the
ﬁrst step. It only modiﬁes the “Cookie” ﬁeld of the request
header by removing a group of cookies, whose usefulness
will be tested. The hidden request can be transmitted in
an asynchronous mode so that it will not block any regular
browsing functions. Then, upon the arrival of the hidden re-
sponse, an event handler will be triggered to process it. Note
that the hidden request is only used to retrieve the container
page, and the received hidden response will not trigger any
further requests for downloading the associated objects. Re-
trieving the container page only induces very low overhead
to CookiePicker.
At the third step, CookiePicker extracts the two DOM
trees from the two versions of the container page: one for
the regular response and the other for the hidden response.
We call these two DOM trees the regular DOM tree and
the hidden DOM tree, respectively. The regular DOM tree
has already been parsed by Web browser layout engine and
is ready for use by CookiePicker. The hidden DOM tree,
however, needs to be built by CookiePicker; and Cook-
iePicker should build the hidden DOM tree using the same
HTML parser of the Web browser. This is because in prac-
tice HTML pages are often malformed. Using the same
HTML parser guarantees that the malformed HTML pages
are treated as same as before, while the DOM tree is being
constructed.
At the fourth step, CookiePicker identiﬁes cookie useful-
ness by comparing the differences between the two versions
of the container page, whose information are well repre-
sented in the two DOM trees. To make a right cookie useful-
ness decision, CookiePicker uses two complementary algo-
rithms by considering both the internal structural difference
and the external visual content difference between the two
versions. Only when obvious structural difference and vi-
sual content difference are detected, will CookiePicker de-
cide that the corresponding cookies that are disabled from
the hidden request are useful. The two algorithms are the
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007core of the CookiePicker and will be detailed in Section 4.
At the ﬁfth step, CookiePicker will mark the cookies that
are classiﬁed as useful in the Web browser’s cookie jar. An
extra ﬁeld “useful” is introduced to each cookie record. At
the beginning of the FORCUM process, a false value is as-
signed to the “useful” ﬁeld of each cookie. In addition, any
newly-emerged cookies set by a Web site are also assigned
false values to their “useful” ﬁelds. During the FORCUM
process, the value of the ﬁeld “useful” can only be changed
in one direction, that is, from “false” to “true” if some cook-
ies are classiﬁed as useful. Later on, when the values of the
“useful” ﬁeld for the existing cookies are relatively stable
for the Web site, those cookies that still have “false” values
in their ‘useful” ﬁelds will be treated as useless and will no
longer be transmitted to the corresponding Web site. Then,
the FORCUM process can be turned off for a while; and it
will be turned on automatically if CookiePicker ﬁnds new
cookies appeared in the HTTP responses or manually by a
user if she wants to continue the training process.
3.3. Backward Error Recovery
In general, CookiePicker could make two kinds of errors
in the FORCUM process. The ﬁrst kind of error is that use-
less cookies are mis-classiﬁed as useful, thereby being con-
tinuously sent out to a Web site. The second kind of error
is that useful cookies are never identiﬁed by CookiePicker
during the training process, thereby being blocked from a
Web site.
The ﬁrst kind of error is solely due to the inaccuracy
of CookiePicker in usefulness identiﬁcation. Such an er-
ror will not cause any immediate trouble to a user, but leave
useless cookies increasing privacy risks. CookiePicker is
required to make such errors as few as possible so that a
user’s privacy risk is lowered. CookiePicker meets this re-
quirement via accurate decision algorithms.
The second kind of error is caused by either a wrong
usefulness decision or the fact that some cookies are only
useful to certain Web pages but have not yet been visited