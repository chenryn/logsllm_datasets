# Title: Automatic Cookie Usage Setting with CookiePicker
# Authors: Chuan Yue, Mengjun Xie, and Haining Wang
# Affiliation: The College of William and Mary
# Email: {cyue, mjxie, hnw}@cs.wm.edu

## Abstract
HTTP cookies are widely used for maintaining session states, personalizing content, authenticating users, and tracking user behavior. Despite their importance and usefulness, cookies have raised significant privacy concerns due to their potential for user profiling. Additionally, stolen cookies can lead to security issues. Current web browsers lack secure and convenient mechanisms for cookie management. There is a need for an easy-to-use and low-privacy-risk cookie management scheme, but designing such a system is challenging.

In this paper, we introduce CookiePicker, a system that automatically evaluates the usefulness of cookies from a website and sets the cookie usage permissions on behalf of users. CookiePicker helps users maximize the benefits of cookies while minimizing privacy and security risks. We implemented CookiePicker as a Firefox browser extension and obtained promising results in our experiments.

## 1. Introduction
HTTP cookies, also known as Web cookies, are small text files sent by a server to a web browser and returned unchanged by the browser if it accesses that server again. Cookies were originally designed to maintain stateful sessions within the stateless HTTP protocol. For example, online shopping websites use cookies to keep track of a user's shopping cart. Since their introduction in 1995, cookies have become essential for various web applications, including personalization, authentication, and user behavior tracking.

Despite their utility, cookies have raised significant privacy concerns. As noted by Kristol [11], the ability to monitor browsing habits and associate them with user identities is at the heart of these concerns. For instance, DoubleClick Inc. was sued for allegedly using cookies to collect personal information without user consent [3]. Furthermore, vulnerabilities in web applications or browsers can be exploited to steal cookies, leading to severe security and privacy issues [7, 21, 22].

To address these concerns, modern web browsers offer some privacy options that allow users to define detailed policies for cookie usage. However, these options are often insufficient and complex, leading many users to misuse or ignore them [5]. The ideal solution would enable useful cookies while disabling harmful ones, but determining which cookies are harmful is difficult because few websites disclose how they use cookies. The Platform for Privacy Preferences Project (P3P) [30] aims to address this, but its adoption is too low to be effective.

In this paper, we present CookiePicker, a system that automatically makes cookie usage decisions on behalf of users. CookiePicker features fully automatic decision-making, high accuracy, and low overhead. It uses two complementary HTML page difference detection algorithms to identify useful cookies, enabling them while disabling useless ones. We implemented CookiePicker as a Firefox extension and validated its effectiveness through experiments on various websites.

## 2. Background
Cookies can be classified based on their origin and lifetime. First-party cookies are created by the website being visited, while third-party cookies are created by other websites. Session cookies are stored in memory and deleted when the browser is closed, whereas persistent cookies are stored on the hard disk until they expire or are deleted.

Third-party cookies are a major privacy threat and are often disabled in popular browsers. However, first-party persistent cookies, which are widely used and often set to long expirations, pose a different challenge. These cookies can be useful for personalization and authentication but can also be used to track user activity over time and are vulnerable to cross-site scripting (XSS) and other attacks [21, 22, 27, 28].

Disabling third-party cookies and enabling first-party session cookies is supported by most browsers, but managing first-party persistent cookies remains a challenge. CookiePicker focuses on automatically managing first-party persistent cookies, reducing privacy and security risks by removing useless cookies.

## 3. CookiePicker Design
CookiePicker's goal is to identify and manage useful cookies while disabling and removing useless ones. It does this by comparing two versions of a web page: one with cookies enabled and one with cookies disabled. If there are noticeable differences, the cookies are classified as useful; otherwise, they are classified as useless.

### 3.1 Regular and Hidden Requests
A typical web page consists of an HTML container and associated objects like stylesheets, images, and scripts. When a user browses a page, the browser sends a request for the container and then requests the associated objects. CookiePicker compares two versions of the same page: one with cookies enabled and one with cookies disabled. It retrieves the second version by sending a hidden request, using the same URI but with the "Cookie" field modified to remove the cookies being tested.

### 3.2 Forward Cookie Usefulness Marking (FORCUM)
The FORCUM process involves five steps:
1. **Regular Request Recording**: Save the URI and header information of the initial request.
2. **Hidden Request Sending**: Send a hidden request with the "Cookie" field modified.
3. **DOM Tree Extraction**: Extract the DOM trees from both the regular and hidden responses.
4. **Cookie Usefulness Identification**: Compare the two DOM trees to identify useful cookies.
5. **Cookie Record Marking**: Mark the identified useful cookies in the browser's cookie jar.

### 3.3 Backward Error Recovery
CookiePicker can make two types of errors:
1. **False Positives**: Misclassifying useless cookies as useful, increasing privacy risks.
2. **False Negatives**: Failing to identify useful cookies, blocking them from the website.

False positives are minimized through accurate decision algorithms, while false negatives can be addressed through backward error recovery, where wrong decisions can be adjusted manually or automatically.

## 4. HTML Page Difference Detection Algorithms
CookiePicker uses two complementary algorithms to detect differences between the two versions of a web page:
1. **Structural Difference Algorithm**: Compares the internal structure of the DOM trees.
2. **Visual Content Difference Algorithm**: Compares the external visual content of the pages.

These algorithms ensure that only cookies that cause perceivable changes are classified as useful.

## 5. Implementation and Performance Evaluation
We implemented CookiePicker as a Firefox extension and evaluated its performance on various websites. Our experiments showed that CookiePicker effectively identifies and manages cookies with high accuracy and low overhead.

## 6. Related Work
Previous work in cookie management has focused on manual and semi-automated approaches, which are often cumbersome and ineffective. CookiePicker builds on this work by providing a fully automated and accurate solution.

## 7. Conclusion
CookiePicker is a novel system that automatically manages cookie usage, maximizing the benefits of cookies while minimizing privacy and security risks. Our implementation and experiments demonstrate its effectiveness, making it a valuable tool for web users.

---

This revised version of the text is more structured, clear, and professional, with improved flow and coherence.