### 17 Remember Crypt 4
如果对ctf常用的加密算法熟悉的话，看到ida的反汇编会很眼熟，这是一道很简单的rc4加密，该算法的特点是它可以自定义密码表，所以可以起到一点迷惑作用，但是没什么用，rc4是对称加密，所以只需把密文当成明文重新加密一边就能得到明文，所以碰到一些加密算法可以试试这个办法，万一是对称加密呢，直接就出flag了  
贴一份rc4的代码
    void rc4_init(unsigned char*s,unsigned char*key,unsigned long len)//s最开始是传入的长度为256的char型空数组，用来存放初始化后的s
    //key是密钥，内容可定义  //最后一个len是密钥的长度
    {
     int i=0;
     int j=0;
     unsigned char k[256]={};
     unsigned char temp = 0;
     for(i=0;i）  
（）
# PWN
### 19 NssShop
难度:签到题  
真 签到题 不会PWN的同学也可以来试试  
一道非常简单的整数溢出题  
在计算总价格时会发生溢出  
达成0元购(x)
### 20 justdoit
把软件载入ida看一看反编译，很普通，发现主函数调用了read(),然后又调用了这个read_long(),看一眼内容  
没什么奇怪的地方，看看反汇编  
发现了奇怪的指令，add rbp,rax,而rax是上面read_long中atoi的输出，所以我们可以控制一下rbp的值  
题目很简单，没有pie所以可以用rop，没有canary所以可以用bof,也可以部分劫持got表,也给了libc,我们可以用puts_plt 来泄漏
libc 的地址，通过一些调试之后，发现可以在payload中再次调用main函数来控制4个块的payload  
在堆栈里，我们将main地址推送到 0x7fffffffde70 并添加 rbp 到达 0x7fffffffde68 的ip  
然后当程序调用 leave,ret 时，rbp 会被设置为 = 0x00000a3131313131。  
现在的 rsp 是 0x7ffffffffde78，但是在返回到 main 函数之后，有这两条指令  
push rbp  
和  
mov rbp, rsp  
看上面的堆栈图，红色块是前三个read_long()块里面的第二个，这个块我们可以放任意内容（块3需要放main地址,块1放string控制rbp）,然后用payload
pop_rdi, address, puts, ret去泄露libc，然后返回main函数重用漏洞。  
所以现在只需要放入payload pop_rdi、/bin/sh、system 然后控制 rbp 即可获得 shell。
### 21 reallNeedGoodLuck
这个题就比较有意思了，在IDA可以看到代码很简单，代码内容就是可以让你在任意地址写入4个字节，软件也没有pie所以地址都是固定的，也可以劫持got表。  
首先，把exit GOT改成main，这样我们就有了main函数的无限循环。然后我们可以根据需要覆盖任意多次。  
题目的一种比较明显的解法是把atoi函数更改为system，然后将字符串“/bin/sh”放入nptr变量中，然后在调用atoi("/bin/sh")时，程序将执行system("
/bin /sh")，然后get shell  
所以问题就是如何替换到正确的地址，因为atoi已经调用过，所以got表中有其libc地址，所以通过用system  
函数地址的最后三个字节覆盖原始地址的最后三个字节即可，需要一些好运
### 22 iterator
在处理迭代器时，没有合理的判断迭代器范围，导致了指针越界。合理布局内存可以覆写Vector的结构体，执行任意内存读写，最终劫持Got表。  
此处可以参考地运团队dalao的wp：  
# CRYPTO
### 23 EzDES
一轮des没有多轮s盒干扰，所以该题难度是对des加密流程和算法的了解，可以通过穷举密钥和差分分析等方法实现，该脚本主要的思想是将明文加密到一半得到s盒置换前的数据，将密文解密到一半得到s盒置换后的数据，异或这两组数据可得可能的des密钥，然后将可能的des密钥存储到数组中，比对3组明密文，即可得出密钥。多轮的des加密差分分析思想也是同理，通过多组明密文得出密钥的可能性，选择最大可能性的密钥。
    # -*- coding: UTF-8 -*-    # Plaintext = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'A', 'B', 'C', 'D', 'E', 'F']
    def twoto16(new_p_box_list):
        str = []
        for i in range(8):
            sum = new_p_box_list[i][0] * 2**3 + new_p_box_list[i][1] * 2**2 + new_p_box_list[i][2] * 2**1 + new_p_box_list[i][3] * 2**0
            #print(sum)
            str.append(hex(sum))
        return str
    # 进制转换 十六进制转换二进制以及二进制转换为十六进制数
    def hex_to_binary(str):
        initialplaintext = []
        initialresult = bin(int(str,16))[2:]
        initialresult = initialresult.zfill(len(str)*4)
        for i in range(len(initialresult)):
                initialplaintext.append(initialresult[i])
        return initialplaintext
    def binary_to_hexadecimal(bin_list):
        bin_str = ''.join(bin_list)
        hstr = hex(int(bin_str, 2))[2:].upper()
        l = len(bin_str) // 4
        for i in range(l - len(hstr)):
            hstr = "0" + hstr
        return hstr
    #初始置换IP
    _ip = [57,49,41,33,25,17,9,1,
           59,51,43,35,27,19,11,3,
           61,53,45,37,29,21,13,5,
           63,55,47,39,31,23,15,7,
           56,48,40,32,24,16,8,0,
           58,50,42,34,26,18,10,2,
           60,52,44,36,28,20,12,4,
           62,54,46,38,30,22,14,6
           ]
    def substitution(table):
        result_table = [0]*64
        for i in range(64) :
            result_table[i] = table[_ip[i]]
        return  result_table
    #初始逆置换IP
    _fp = [39,7,47,15,55,23,63,31,
           38,6,46,14,54,22,62,30,
           37,5,45,13,53,21,61,29,
           36,4,44,12,52,20,60,28,
           35,3,43,11,51,19,59,27,
           34,2,42,10,50,18,58,26,
           33,1,41,9,49,17,57,25,
           32,0,40,8,48,16,56,24
           ]
    _fp2 = [57,49,41,33,25,17,9,1,
            59,51,43,35,27,19,11,3,
            61,53,45,37,29,21,13,5,
            63,55,47,39,31,23,15,7,
            56,48,40,32,24,16,8,0,
            58,50,42,34,26,18,10,2,
            60,52,44,36,28,20,12,4,
            62,54,46,38,30,22,14,6,
            ]
    def inverse_substitution(table) :
        result_table = [0] *64
        for i in range(64) :
            result_table[i] = table[_fp[i]]
        return result_table
    def reverse_substitution(table):
        result_table = [0]*64
        for i in range(64):
            result_table[i] = table[_fp2[i]]
        return result_table
    #扩展置换
    _extend_table = [
                    31,0,1,2,3,4,
                    3,4,5,6,7,8,
                    7,8,9,10,11,12,
                    11,12,13,14,15,16,
                    15,16,17,18,19,20,
                    19,20,21,22,23,24,
                    23,24,25,26,27,28,
                    27,28,29,30,31,0
                    ]
    def extend_replacement(Right_table) :
        extend_list = [0] * 48
        for i in range(48):
            extend_list[i] = Right_table[_extend_table[i]]
        return extend_list
    #与子密钥异或
    def xor(lits,Key):
        result = []
        for i in range(len(lits)):
            result.append(int(lits[i]) ^ int(Key[i]))
        return result
    #S盒替换
    S1 = [14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7,
          0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8,
          4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0,
          15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]
    S2 = [15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10,
          3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5,
          0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15,
          13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]
    S3 = [10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8,
          13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1,
          13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7,
          1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]
    S4 = [7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15,
          13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9,
          10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4,
          3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]