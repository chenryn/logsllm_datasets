filtering 
ipJwJheck takes an input a packet header and 
traversal algorithm of Figure 1 .  
implements the  rule-chains 
Function ipJule_match 
to 
determine 
3.2. Structure 
and Algorithm of Netfilter 
whether a packet matches a rule. 
is invoked by ipJw_check 
Function 
Figure 2: a) Rule Array Structure 
in Netjilter 
b) Two Kinds of 
Rules in Netfilter 
rule-chains 
a condition 
are stored 
Rules in Netfilter 
in rule arrays rather than 
are 
Policies 
ins. Each 
with rules rather  than 
(as in IPChains). 
with rule-cha
in linked-list 
associated 
field so that the target field now 
rule has a condition 
match. Two 
defines the action in the case  of 
actions can be specified in the target field: a 
possible 
policy and a target array. When  a packet matches the 
condition 
with the rule, it 
is applied; otherwise, the algorithm 
rule array. Figure 2a shows an example of Netfilter 
configuration 
to those in Figure 1 .  The dashed line 
by Netfilter 
Figure 1 .  Netfilter 
matches the packet, 
in 
only  when 
for 
in a rule, if a policy is associated 
for the case of the same packet illustrated 
exits the rule-checking 
a set of rules and policies 
jumps to the specified 
containing 
the path taken 
in which case the policy  specified 
similar 
depicts 
a rule 
Firewall 
Rule: Reject 
packet from 
the attacker 
machine. 
Firewall 
Code 
3 
6 
Attacker 
Machine 
Firewall 
Machine 
Figure 3: Steps in A Single Error Injection 
Run 
1 .  Identify 
a target address in the text segment of the 
firewall code, and identify a bit in the targeted 
text足
segment for injection. 
2. Flush a begin record to the experiment 
data-log file. 
3. Inject the error at the target bit of the target address. 
4. Send a ping packet from the attacking 
5. a) If the packet is received by the firewall, 
flush a 
machine. 
record to the log. 
violation 
b) If no packet is received, 
log. 
c) If system hangs or crashes, 
6. Remove the current error condition; 
reboot the machine. 
go to Step 1 .  
flush an ok record to the 
A Linux driver-based error injector was developed 
for 
injecting errors into Linux kernel memory space. The 
injector is invoked using NFTAPE [5] to conduct the error 
injection 
campaign. 
4.1. Error Model 
The error model 
assumed in this study is an error that 
of an instruction 
by the 
in the disk, network, 
bus, 
impacts the correct execution 
An  error can originate 
processor. 
memory, cache, or processor execution 
error detection 
code), parity, and ECC are available, 
such mechanisms  for 
several reasons. 
techniques 
errors can  escape 
First, as  CMOS 
such as CRC (cyclic 
redundancy 
core. Although 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:19:24 UTC from IEEE Xplore.  Restrictions apply. 
technology 
scales down to smaller feature size and lower 
voltages, both memory and processors are more 
susceptible 
to soft errors. Second, error detection 
and 
correction mechanisms do not cover all critical 
components in a system. A study of microprocessor 
error 
mechanisms [9], for example, shows that only 
detection 
main memory and caches are protected 
on the widely used Intel IA-32 architecture; 
execution core had no protection. 
network equipment vendors use memory components that 
do not incorporate error detection mechanisms, and 
equipment such as hardware routers and firewalls, 
once 
deployed, 
are susceptible 
by ECC or parity 
the processor 
Moreover, many 
to soft errors. 
In this work, single-bit 
errors are injected so as to 
of the target applications 
(the 
us to emulate errors 
This allows 
impact the instructions 
packet filtering 
functions). 
in the main memory, the cache, the processor 
buffer, and the processor 
occurring during the transmission 
research on microprocessors 
most (90-99%) device-level 
logic-level, 
errors 
also shows that a majority of errors in the field are single足
bit errors. 
[lO][11][12] 
transients 
can be modeled as 
Data on operational 
core, as well as errors 
over a bus. Previous 
single-bit  errors. 
has shown that 
execution 
execution 
4.2. Outcome Categories 
Outcomes from error injection 
experiments 
can be 
classified 
1. Error not activated 
into following 
three categories: 
The corrupted 
cause a visible, 
instruction 
abnormal impact on the system. 
or not manifested 
(NA + NM): 
is not executed or does not 
2. Crash or hang (CRASH + HANG): The Linux kernel 
raises an exception 
or hangs. 
3. Temporary or permanent 
security vulnerability 
(TSV 
or PSV) 
Before providing the statistics 
on the error injection 
observed in our experiments. 
we will discuss several examples of security 
In each case, 
was revealed via the error 
experiments, 
vulnerabilities 
the security vulnerability 
injection 
impossible, 
inspection. 
5. Examples of Security Vulnerabilities 
5.1. Temporary Security Vulnerabilities 
if not 
experiment Clearly it would be difficult, 
to identify these vulnerabilities 
via code 
Figure 4 shows a segment of code from IPChains 
that 
address of the incoming packet 
is within the source address range of the 
checks whether the  source 
(ip->src_addr) 
rule pointed to by f (the range is specified 
and f->srcnetmask). 
contains 
three instructions: 
The equivalent 
by f->src_addr 
assembly code 
the checking can terminate 
to the next rule in the current chain. 
and allow the packet in or jump 
Errors 
C code: if (Cip-> c dr & f->src_netmask) 
=  f->src_addr) 
ly: 
mov Oxc(edi),edx 
and Ox8(ebp),edx 
cmp OxO(ebp),edx 
Ilmov ip->src_addr, 
Iland f->src_netmask,edx 
//cmp f->src_addr,edx 
edx 
Figure 4: Example of Temporary Data Corruption 
A security vulnerability 
occurs when an error  causes 
which  causes 
xor Ox8(ebp),edx. 
error), the instruction 
2, if 
to be false, 
value. Similarly, 
in the if statement 
the condition 
the current rule (rule pointed to by f) to be skipped, even 
when the packet matches the rule. If in instruction 1 byte 
Oc is changed into 08 (a single-bit 
and as a result the register edx 
becomes mov Ox8(edi),edx, 
is assigned an incorrect 
in instruction 
an error results in byte 23 to change to 33 (again a single足
bit flip), the first  instruction  becomes 
a result the IP address of a packet being filtered 
is XOR'ed 
with the netmask, rather than AND'ed. Both errors cause 
the result of the cmp instruction 
to be not-equal, 
i.e., in 
each case the source address of the packet is not in the 
source address range of the rule, so the checking of the 
There are 9 bytes, or 72 bits, in the code 
rule is bypassed. 
segment described 
shows that 
42 bits in this 72-bit code segment can cause security 
vulnerabilities 
when flipped, i.e., allow illegal packets to 
penetrate 
in Figure 4. Our experiment 
the firewall. 
As 
It is clear from the above example that the described 
errors can result in one or more illegal packets going 
An  important 
through the firewall. 
long tills condition will persist, 
error persists, 
packets will be allowed to enter the system. The answer 
depends on which component is hit by the error. There are 
two possibilities: 
question to ask is how 
because tile longer tile 
the higher the probability 
of that malicious 
1. If the error only hits the instruction 
during its 
execution (i.e., when it is going through the instruction 
pipeline or the execution engine), then clearly only the 
current (potentially 
packet being checked will be 
allowed in. Assuming no further error propagation,  the 
next packet will be error-free, 
error-free  copy 
since it is checked by a new, 
of this instruction. 
illegal) 
2. If tile error hits tile instruction 
cache (e.g., LO 
will continue to process incorrectly 
cache), the instruction 
until the affected cache line is replaced. 
the cache level (or memory), the longer the duration of the 
error. As a last  resort, 
the error will be removed when the 
system is rebooted. 
Thus the higher 
(1) Fetch the source address of the packet. 
(2) AND with the netmask of the rule. 
(3) Compare with the address specified in the rule. 
If the comparison cmp in instruction 
3 results in an 
by the 
the packet is in the address range specified 
equality, 
rule; if cmp yields not-equal, 
i.e. the rule is not applicable 
the packet is not in the range, 
to the  packet. 
At this point, 
5.2. Permanent Security Vulnerabilities 
Figure 5 shows the pseudo code from the function 
in IPChains. 
It is written in a mixture of C 
ipJw3heck 
and x86 assembly. Boxes Ll, L2, and L3 are C  code 
equivalent 
pointer FirstRule 
the rule-chain 
being examined, 
assembly segments. The 
points to the address of the first rule in 
to be examined; pointer f points to the rule 
and ip points to the incoming packet. 
to the corresponding 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:19:24 UTC from IEEE Xplore.  Restrictions apply. 
the rule. For 
an error changed the offset 
fIeld). 
IP address 
invalidate 
of the counter) can effectively 
example, in our experiments, 
Ox44 to Ox04 (the offset of destination 
Hence, instruction 
increments 
effectively 
IP address 
get through. 
the destination 
invalidates 
fIeld allows packets  that 
13 (corresponding 
IP address 
to L2 in Figure  5) 
fIeld by one and 
should be rejected 
to 
the rule: the corrupted destination 
Case 3: Mishandled 
pointer 
alternation 
The x86 processor 
has a limited number of general足
correctly. 
so it is very common that some variables 
during the execution. 
purpose registers, 
share a given register 
In the code 
segment given in Figure 5, the pointer f, which points to 
the current rule, shares the register esi with the pointer ip, 
which points to the header of the incoming IP packet. It is 
crucial that the transition 
between the two uses is 
Errors in 14 can change this 
accomplished 
instruction 
to mov ip,edx (or dh, edi, depending on which 
bit is in error). As a result the execution of 14 does not 
assign the value of ip to esi. Subsequent 
instructions 
that 
access f For example, 15 
use esi to access ip effectively 
(corresponding 
Due to 
the error propagation 
performed by 15 is applied to the rule pointed to by J, and 
the content of the register al is written to the source IP 
address 
the rule  causes  permanent  security 
to L3 in Figure 5) modifIes ip->tos. 
fIeld of the rule. This erroneous modification 
vulnerability. 
from 14 above, the modification 
to 
Case 4: Direct 
rule content 
corruption 
In the experiments 
with Netfilter, 
we found three 
is used to fetch the destination 
a MOY instruction 
in which an error reversing 
An example is taken 
of the rule content. 
code, where the instruction mov 
instances 
leads to corruption 
from  Netfilter 
stored 
Ox8(ebx),eax 
in the rule into register eax. Suppose an error in this 
instruction can reverse the direction 
to mov eax, Ox8(ebx), 
address fIeld in the rule content. Obviously, such a 
corrupted rule cannot properly recognize packets that 
should be rejected. 
security vulnerability. 
Observe that this is also permanent 
of a MOY instruction 
address 
which writes eax to the destination 
Next we will compare the rule traversal 
functions of 
the rule-chains 
of instructions 
in Section 3 . 1 .  It fIrst initializes 
This code implements the traversal algorithm 
the rule pointer f 
within a loop using f 
within this code segment can 
The corruptions 
can 
integrity) 
or the 
Rule structure 
described 
and then traverses 
Corruption 
lead to permanent data corruption. 
impact either the rule structure 
rule content (semantics  integrity). 
corruption occurs when an error corrupts the pointers or 
data needed to maintain the rule structure; 
corruption 
specifying 
addresses, 
permanent data corruption  observed 
IPChains 
refers to the corruption 
individual 
IP 
netmasks, or port numbers. Four cases of 
of the information 
rules, e.g., SourcelDestination 
in our experiments in 
in the following: 
and Netfilter 
(structural 
are described 
rule content 
Ilf points to the rule being exami 
(11) mov FirstRule,esi 
(12) mov esi, f 
repeat t 
mov slot*4,e.ax } 
mov &f->counters,ecx 
(13) addl $Oxl,Ox44(eax,ecx,1) 
1114 changes esi from pointer 
fto pointer ip 
(14) mov ip,esi L 
(15) moval,tos(esi) 
(16) if (f->next==NULL) 
} forever; 
J  (L3) ip->tos=al; 
exit the rule checking 
loop 
Figure 5: Examples of Permanent Data 
Corruption 
Case 1: Rule structure 
corruption 
11 
Instructions 
is on a heap, its erroneous 
11 and 12 (Corresponding 
to L1 in Figure 
the pointer f to be the address of the fIrst rule 
An  error in 11 (e.g., opcode Ox8b is 
of the MOY 
instruction 
Because the pointer 
5) initialize 
in the rule-chain. 
changed into Ox89) reverses the direction 
instruction 
to mov esi,FirstRule. 
As a result, 
changes the value of FirstRule. 
FirstRule 
12 assigns this erroneous value to the loop variable 
makes f->next 
to be NULL. The erroneous value of f 
causes the loop to bypass further rule checking3 and to 
accept the malicious packet without system crash or hang. 
In this example, the corruption to the rule structure 
pointer resulted in a permanent security 
FirstRule 
vulnerability. 
will go through the fIrewall because f is always incorrectly 
set and rule checking is always skipped, even after the 
transient 
Next, 
f, which 
Any newly arriving 
error disappears. 
value persists. 
Case 2: Data structure offset 
corntption 
In IPChains, 
most fIelds in the rule data structures 
are 
for the rule traversal functions. 
counters) 
intended to be read-only 
There are, however, some fIelds (e.g. statistics 
that are updated during rule traversal. 
incremented 
code segment given in Figure 5, instruction 13 increments 
such a counter. 
An error corrupting the offset Ox44 (offset 
These counters are 
receives a packet. In the 
whenever IPChains 
(legal or illegal)  packet 
IPChains 
data structure,  programming 
and Netfilter 
style, and compiler strategy. 
mainly from the perspectives  of 
5.3. Comparison of Rule Traversal 
Functions 
of 
IPChains 
and N etfilter 
Based on an examination 
of the observed security 
Table 1 provides a comparison of the two 
vulnerabilities, 
fIrewalls in terms of (1) data  structure 
the rules and security policies), (2) programming style 
(used in implementing 
(3) the compiler strategy employed to generate a binary 
image of the firewall 
simple suggestions 
the observed problems. 
type (used to store 
The table also provides 
to alleviate 
software. 
the rule traversal  algorithm),  and 
3 IPChains usesf->next 
=  NUIL as the exit condition 
from the loop (16), 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:19:24 UTC from IEEE Xplore.  Restrictions apply. 
Table 1: Comparison of Rule Traversal Functions of 
IPChains and Netfilter 
Suggestion 
Comparison 
IPChains uses NULL  value a exit Avoid using common 
condition, 
i.e., when none of the predefined value (e.g. NULL) as the 
rules matches the data packet, the packet is exit  condition in 
accepted by default (Case 1). Netfilter 
accepts those packeL that match a rule traversal 
whose corresponding 
explicitly 
the secUlity vulnerabilities 
structure 
secUlity policy is 
is free from 
caused by rule 
ACCEPT. Netfilter 
only programming the rule 
conuption. 
algorithm. 
of 
the 
memory 
secUlity 
explicitly 
wlitable data. 
of IPChains 
nor Netfilter 
and Netjilter, 
Do not mix sensitive 
and 
the protect read-only 
Neither IPChains 
protecL the offset of a write operation read-only data  with 
(Cae 2) or the content of a rule (Case 4) potentially 
from being conupted. Case 2 illustrates  Use 
that by introducing  the 
counter (which is  protection  mechanism 
modified every time a packet comes) in the  the operating  system  to 
rule structure 
rules are no longer read-only. 
Cae 3 illustrates 
to corruption 
shared register (the register is used to that represent 
preserve a pointer to the selLitive 
well as another vlliiable alternatively). 
While IPChains 
sharing, Netfilter 
vulnerabilities 