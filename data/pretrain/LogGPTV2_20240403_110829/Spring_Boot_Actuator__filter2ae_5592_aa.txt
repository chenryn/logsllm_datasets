# Spring Boot Actuator 未授权访问的测试与利用思路

## 0x0 前言
最近在研究一个漏洞，但由于目标关闭了一些端点，未能成功实现远程代码执行（RCE）。尽管如此，在提升漏洞危害的过程中，我参考了多篇文章并进行了一些尝试。希望通过分享我的经验，能帮助遇到类似情况的人节省调试时间，专注于更有意义的工作。

## 0x1 Actuator 简介
官方文档: [Spring Boot Actuator: Production-Ready Features](https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html)

> Spring Boot 包含多种额外功能，以帮助您在将应用部署到生产环境时进行监控和管理。您可以选择使用 HTTP 端点或 JMX 来管理和监控您的应用程序。审计、健康检查和指标收集等功能也可以自动应用于您的应用程序。

Actuator 是一组用于监控和管理 Spring Boot 应用程序的功能，支持通过 HTTP 端点或 JMX 访问，并提供审计、健康检查和指标收集等信息。

## 0x2 部署环境
通常我会参考官方的[Spring Quickstart Guide](https://spring.io/quickstart)来快速搭建环境。该指南简洁易懂，适合新手入门。由于快速开始没有涵盖 Spring Boot 1.x 版本，因此我使用 IntelliJ IDEA 直接修改 Maven 依赖来创建 1.x 版本的应用。

### 0x2.1 Spring Boot 2.x

1. 打开 [Spring Initializr](https://start.spring.io/)。
2. 选择以下配置：
   - 添加 `Spring Web` 和 `Actuator` 依赖。
   - 点击 "GENERATE" 生成项目。
3. 解压并加载到 IDE 中，定位到 `DemoApplication.java` 文件，添加新方法并格式化代码。
4. 运行项目：
   - 在命令行下：`mvn spring-boot:run`
   - 或者在 IDEA 中执行 Run。
5. 设置其他端口：
   - 使用 Google Dork 搜索技巧：`site:spring.io spring boot port 8080 change`
   - 在 `application.properties` 中添加：`server.port=${port:8100}`
6. 访问端点验证是否正常工作。

### 0x2.2 Spring Boot 1.x

- 修改 Spring Boot 版本为 `1.5.22.RELEASE`。
- 运行项目并在浏览器中查看暴露的端点。

## 0x3 Actuator 版本差异

详细的版本差异可参见官方文档：[Spring Boot 2.0 Configuration Changelog](https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Configuration-Changelog)。

主要变化包括：

- **安全性配置**：
  - Spring Boot 2.x 默认只允许访问 `/health` 和 `/info` 端点，且路径前缀为 `/actuator`。
  - 启用和暴露端点的方式有所变化。

- **端点路径设置**：
  - 1.x 版本：`management.context-path=/manage`
  - 2.x 版本：`management.endpoints.web.base-path=/manage`

- **端点重命名**：
  - 支持对端点进行重命名，例如：`management.endpoints.web.path-mapping.health=healthcheck`

## 0x4 漏洞利用

为了方便演示，我们将启用所有端点的未授权访问。

### 0x4.1 敏感信息泄露

1. **env 泄露配置信息**
   - 2.x: `http://127.0.0.1:8100/actuator/env`
   - 1.x: `http://127.0.0.1:8200/env`
   - 端点作用：显示 Spring 的 `ConfigurableEnvironment` 属性，可能包含系统版本、环境变量、内网地址等敏感信息。

2. **trace 泄露用户请求信息**
   - 2.x: `http://127.0.0.1:8100/actuator/trace`
   - 1.x: `http://127.0.0.1:8200/trace` 或 `http://127.0.0.1:8200/httptrace`
   - 端点作用：显示最近 100 个 HTTP 请求-响应交互信息，可能包含会话信息。

3. **mappings 泄露路由信息**
   - 2.x: `http://127.0.0.1:8100/actuator/mappings`
   - 1.x: `http://127.0.0.1:8200/mappings`
   - 端点作用：展示所有 `@RequestMapping` 注解的路径列表。

4. **heapdump 泄露堆栈信息**
   - 2.x: `http://127.0.0.1:8100/heapdump`
   - 1.x: `http://127.0.0.1:8200/actuator/heapdump`
   - 端点作用：返回一个 hprof 堆转储文件，需要 HotSpot JVM。

### 0x4.2 修改运行状态

1. **env 修改环境变量**
   - 2.x: `http://127.0.0.1:8100/actuator/env`
   - 1.x: `http://127.0.0.1:8200/env`
   - 通过 POST 请求可以新增或修改全局变量，可能导致系统崩溃或 RCE。
   - 示例：`curl -H "Content-Type:application/json" -X POST --data '{"name":"hello","value":"123"}' http://localhost:9097/actuator/env`

2. **refresh 刷新**
   - 2.x: `http://127.0.0.1:8100/actuator/refresh`
   - 1.x: `http://127.0.0.1:8200/refresh`
   - 用于配置修改后的刷新，常结合 `/env` 端点触发漏洞。

3. **shutdown 关闭程序**
   - 2.x: `http://127.0.0.1:8100/actuator/shutdown`
   - 1.x: `http://127.0.0.1:8200/shutdown`
   - 用于关闭程序，一般不开放，但可以通过 GET 请求判断其是否存在。

### 0x4.3 命令执行

下面介绍几种常见的命令执行利用方式及注意事项。环境设置如下：

```sh
git clone https://github.com/LandGrey/SpringBootVulExploit.git
cd SpringBootVulExploit/repository/
```

- **请求方式**：
  - 1.x: `key=value`, Header: `-H 'Content-Type: application/x-www-form-urlencoded'`
  - 2.x: `{"name":"", "value":""}`, Header: `-H 'Content-Type: application/json'`

希望这些内容能对你有所帮助！