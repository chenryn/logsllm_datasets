# Spring Boot Actuator 未授权的测试与利用思路
## 0x0 前言
最近遇到的一个漏洞，但是因为目标关掉了一些端点导致没利用起来达到RCE的效果，不过在提升漏洞危害的时候，参考了不少文章，也做了一些尝试，所以分享出来自己的经历，希望大家如果遇到跟我一样的情况，可以省下自己调试时间，来做更有意义的事情。
## 0x1 Actuator 简介
官方简介: [Spring Boot Actuator: Production-ready
Features](https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html)
> Spring Boot includes a number of additional features to help you monitor and
> manage your application when you push it to production. You can choose to
> manage and monitor your application by using HTTP endpoints or with JMX.
> Auditing, health, and metrics gathering can also be automatically applied to
> your application.
Actutator是一个生产环境部署时可使用的功能，用来监控和管理应用程序。支持选择HTTP Endpoints
或者JMX的方式来访问，同样支持查看应用程序的Auding,health和metrics信息。
## 0x2 部署环境
一般快速部署环境，我很喜欢参考官方的[Spring Quickstart
Guide](https://spring.io/quickstart),官方文档一般都很简洁，也是从新手角度写的的tutorial，故理解和实践起来非常简单。
快速开始没有Spring Boot 1.x的，所以1.x的版本我用Idea直接修改Maven的依赖来创建。
> 正如官方在2019.8.06所言,v1.5.22.RELEASE 是Spring Boot 1.x的最后一个版本。
>
> SpringBoot 2.0 发布时间则是2018.3.1,现在已经是2.6版本
故1.x版本从历史线上来说，是有可能出现在真实环境的，只不过暂时没遇到，所以纳入本文研究范围。
### 0x2.1 Spring Boot 2.x
1.打开
2.选择如下配置，记得添加Spring Web、actutator依赖，然后点击"GENERATE"来生成。
3.解压然后用IDE加载，定位到DemoApplication.java文件，尝试添加新的方法，写完用option+command+L格式化一下(我很依赖这个功能，要不然代码很乱！)
> PS.我这里使用的是idea,为了出现代码提示,需要点击pom.xml然后导入依赖。
4.运行项目
命令行下:
    mvn spring-boot:run
或者IDEA里面执行Run
5.设置其他端口,当时找了一圈没发现，下面是自己翻文档一些技巧。
Google Dork: `site:spring.io spring boot port 8080 change`
然后很快就能找到官方的[解决方案2.4](https://docs.spring.io/spring-boot/docs/current/reference/html/howto.html),通过在`applicaiton.properties`添加如下占位符即可设置custom
port。
    server.port=${port:8100}
6.访问查看端点执行是否正常
如上图所示,搭建过程是成功的！
### 0x2.2 Spring Boot 1.x
修改Spring Boot版本为1.5.22.RELEASE即可
然后我们运行起来,浏览器进行查看。
可以看到两者暴露的端点的方式是不一样的。
## 0x3 Actuator 版本差异
比较全面且官方的差异:[Spring Boot 2.0 Configuration
Changelog](https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Configuration-Changelog)
其中就包括了Actutator的一些配置的版本改变。
端点的使用:
常见端点:
都可以在以上链接的`Endpoints`节看到，它们之间是存在差异的，有些端点我在真正启动1.4.x的Spring-boot是没有的。
下面几点是可以重点关注下的变化:
SpringBoot 
    org.springframework.boot
    spring-boot-starter-security
\- application.properties 添加用户名和密码
    security.user.name=admin
    security.user.password=123456
    management.security.enabled=true
    management.security.role=ADMIN
当SpringBoot>=2.x时，默认也是只能访问`/health`、`info`，但是访问的端点方式发生了改变，
相比于1.x版本的端点多了个前缀 `/actutator`,即如`/health` 变成了`/actuator/health`。
`Spring Boot Actuator` 针对于所有 endpoint 都提供了两种状态的配置
  * enabled 启用状态。默认情况下除了 `shutdown` 之外，其他 endpoint 默认是启用状态。
  * exposure 暴露状态。endpoint 的 enabled 设置为 true 后，还需要暴露一次，才能够被访问，默认情况下只有 health 和 info 是暴露的。
常见配置，见官方文档，下面以`shutdown`这个默认不启动端点来做说明:
1.开启端点
2.对外暴露端点
3.访问
* * *
还有个版本差异，就是设置管理端点的路径:
在1.x版本下，设置语句如下:
    management.context-path =/manage
此时端点的访问方式就变为了:
    /manage/dump
    /manage/autoconfig
    /manage/metrics
    ...
在2.x版本，设置语句如下:
    management.endpoints.web.base-path=/manage
有些人可能喜欢将其命名为`monitor`,所以知道这个特点，我们可以适当丰富下自己的字典。
当然也支持对端点改名，但是这种情况比较少见,当做了解下,有时候走投无路的时候，去对着文档fuzz一次，也许也会有收获。
    management.endpoints.web.path-mapping.health=healthcheck
## 0x4 漏洞利用
为了方便演示，启用的配置开启了所有端点未授权访问。
1.X
    server.port=${port:8200}
    endpoints.shutdown.enabled=true
    endpoints.sensitive=false
    management.security.enabled=false
2.x:
    server.port=${port:8100}
    management.endpoints.shutdown.enabled=true
    management.endpoints.web.exposure.include=*
### 0x4.1 敏感信息泄露
**1.env 泄露配置信息**
    2.x
    http://127.0.0.1:8100/actuator/env
    1.x
    http://127.0.0.1:8200/env
> 端点作用:
>
> Exposes properties from Spring’s `ConfigurableEnvironment`.
这个端点会泄露Spring 的 ConfigurableEnvironment
公开属性，其中包括系统版本，环境变量信息、内网地址等信息，但是一些敏感信息会被关键词匹配，做隐藏*处理，但是如果开发的密码字段不规范，可能直接导致泄露数据库密码。
**2\. trace 泄露用户请求信息**
    2.x
    http://127.0.0.1:8100/actuator/trace
    1.x
    http://127.0.0.1:8200/trace
    其他:
    http://127.0.0.1:8200/httptrace
    http://127.0.0.1:8200/actuator/httptrace
> 端点作用:
>
> Displays HTTP trace information (by default, the last 100 HTTP request-> response exchanges). Requires an `HttpTraceRepository` bean.
>
> 显示HTTP跟踪信息(默认情况下,最后的100 HTTP请求-响应交互)。
>
> 需要存在HttpTraceRepository bean。
通过这个我们可以获取到请求这个站点时的完整的http包，其中就可能包括正常用户的session，从而我们可以直接接管登录，如果遇到管理员的会话，那么危害就可能进一步扩大。
关于这个危害我还想说明一下，因为这个只是显示最近的100条数据，但是我们可以写脚本来持续监控。
**3.mappings 泄露路由信息**
    2.x
    http://127.0.0.1:8100/actuator/mappings
    1.x
    http://127.0.0.1:8200/mappings
> 端点作用:
>
> Displays a collated list of all `@RequestMapping` paths.
>
> 展示整理的@RequestMapping注解的路径列表。
**4.heapdump泄露堆栈信息**
    2.x
    http://127.0.0.1:8100/heapdump
    1.x
    http://127.0.0.1:8200/actuator/heapdump
> 端点作用:
>
> Returns an `hprof` heap dump file. Requires a HotSpot JVM.
>
> 返回一个hprof堆转储文件。需要HotSpot JVM。
这个在Spring
MVC架构中是可用的，会泄露出推栈信息，其中是可以窃取到一些关键的信息，比如一些关键的Key，或者数据库连接密码，但是扫描工具没把它列为扫描端点。
这个数据文件，我们可以用"Eclipse Memory Analyzer"内存分析工具,来搜索特殊字符，比如password、token等。
    select * from java.util.Hashtable$Entry x WHERE (toString(x.key).contains("password"))
    select * from java.util.LinkedHashMap$Entry x WHERE (toString(x.key).contains("password"))
### 0x4.2 修改运行状态
**1.env 修改环境变量**
    2.x
    http://127.0.0.1:8100/actuator/env
    1.x
    http://127.0.0.1:8200/env
我们可以通过post请求来新增系统的全局变量，或者修改全局变量的值，这个如果修改数据库的链接，可以直接导致当前系统崩溃，结合其他漏洞，可能造成rce，这个点也蛮有意思，官方文档只说了GET的作用，却没有给出POST，但是网上有一些相关的开发教程涉及到这个。
    curl -H "Content-Type:application/json" -X POST  --data '{"name":"hello","value":"123"}' http://localhost:9097/actuator/env
**2.refresh 刷新**
    2.x
    http://127.0.0.1:8100/actuator/refresh
    1.x
    http://127.0.0.1:8200/refresh
这个我也没在文档或者是actuator的源码包中看到,说明这个端点是在其他依赖包注册的，emm。
这个端点的作用主要用于配置修改后的刷新，常用于结合/env+其他依赖用来触发漏洞。
**3.shutdown 关闭程序**
    2.x
    http://127.0.0.1:8100/actuator/shutdown
    1.x
    http://127.0.0.1:8200/shutdown
顾名思义用来关闭程序，这个端点一般不开放，一般也不会去测试，扫描器更加不可能将这个列为扫描端点，只能说存在这种风险吧。
不过有个判定的技巧，如果存在这个端点，可以先尝试GET请求，出现"Method Not Allowed"说明是存在的。
### 0x4.3 命令执行
下面关于命令执行，主要介绍这4种相对而言较为常见的利用，以及补充一些自己的遇到的坑点。
下面的环境，采用LandGrey师傅提供的环境。
    git clone https://github.com/LandGrey/SpringBootVulExploit.git
    cd SpringBootVulExploit/repository/
这里先说明下，下面的例子，因为靶机的Spring Boot 有些为1.0有些为2.0，所以请求的方式不太一样，
1.x的话，post的数据包是`key=value`,header则为:
    -H 'Content-Type: application/x-www-form-urlencoded'
2.x的则是`{"name":"", "value":""}`,header则为:
    -H 'Content-Type: application/json'
* * *