2‚óã Extending attack window. Normally an outstanding query
will receive a reply from the upstream server in a matter of tens or
hundreds of milliseconds. This is insufficient, given that the attacker
needs time to infer the source port and to inject rogue DNS replies.
We discover effective and novel strategies (different for forwarder
and resolver attack) that can greatly extend the attack window to
at least seconds (and even more than 10s), allowing realistic cache
poisoning opportunities. We will discuss this in ¬ß5.
Once the source port number is known, the attacker simply
injects a large number of spoofed DNS replies bruteforcing the
TxIDs, which can be done in high speed, given that most servers
have sufficient network bandwidth.
4 INFERRING DNS QUERY‚ÄôS SOURCE PORT
In this section, we will describe the idea and procedure of inferring
DNS source ports. We will also measure the vulnerable software
and in-the-wild population when feasible.
4.1 Analysis of UDP Source Port Scannability
UDP is a stateless protocol and hence fundamentally different from
TCP. More specifically, it is stated in the UDP programming guide-
line (RFC 8085 [24]) that ‚ÄúUDP datagrams may be directly sent and
received, without any connection setup. Using the sockets API, ap-
plications can receive packets from more than one IP source address
on a single UDP socket.‚Äù Furthermore, to ensure that an application
will receive data from only one particular source address, ‚Äúthese
applications MUST implement corresponding checks at the appli-
cation layer or explicitly request that the operating system filter
the received packets.‚Äù
These are surprisingly under-scrutinized statements. On a first
glance, they may be interpreted as applicable to UDP servers only,
which can bind to a local port, and subsequently receive packets
from ‚Äúany remote IPs‚Äù. Surprisingly, from our experiments, it applies
to UDP clients as well ‚Äî a client calling sendto() on a specific
remote IP and subsequently recvfrom() on the same socket can
technically receive packets from ‚Äúany other IPs‚Äù as well. We have
verified this behavior on all modern operating systems, including
Windows, Linux, and MacOS.
This nuanced behavior has a profound impact on what an at-
tacker can learn through a trivial UDP port scan ‚Äî when a DNS
server issues a query, its source port effectively becomes open to
the public. This allows an attacker to simply scan the ephemeral
Stub ResolverForwarderRecursiveResolverAuthoritativename servers1.vctm.com A ? ‚ë°Muting (¬ß5)1.vctm.com A ? sp=x, dp=53, id=y1.vctm.com A v.c.t.m1.vctm.com A a.t.k.r, sp=53, dp=x1.vctm.com A a.t.k.rdp=0, 1, 2, ‚Ä¶‚Ä¶, x‚ë†Port Scan (¬ß4)Cachedvctm.com NSDNS ServerAttackerid=0, 1, 2, ‚Ä¶‚Ä¶, ysp=source portdp=destporta.t.k.r=maliciousIPSession 4E: Network Security CCS '20, November 9‚Äì13, 2020, Virtual Event, USA1339port range with any UDP packet, which will trigger nothing upon
hitting the correct port (as the probe will be accepted by the OS but
discarded at the application layer), or an ICMP port unreachable
message upon missing it (by design).
Next, the UDP programming guideline (RFC 8085) further states
that ‚ÄúMany operating systems also allow a UDP socket to be con-
nected, i.e., to bind a UDP socket to a specific pair of addresses
and ports.‚Äù Indeed, modern socket APIs allow connect() on a UDP
socket but ‚Äúthis is only a local operation that serves to simplify the
local send/receive functions and to filter the traffic‚Äù. As a result,
when a DNS query is issued from a source port to a particular des-
tination IP address and port, the OS will accept incoming packets
from only the same remote IP and port. Specifically, when testing
the behavior on real network stacks, we find that they will reject a
packet with either a wrong IP or port, and respond with an ICMP
port unreachable message (as if the packet was a port scan attempt).
This effectively prevents the source port of a DNS query from being
scanned directly.
In summary, the scannability of source port is dependent on the
implementation of DNS software, i.e., whether a connect() API
call is issued on the UDP socket. Interestingly, we find that out of
the three most popular DNS forwarder and resolver software BIND,
Unbound, and dnsmasq, only BIND uses connect(). Nevertheless,
we develop different scan methods that can work for each (described
in ¬ß4.3 and ¬ß4.4, overcoming the challenge outlined in the next
section.
4.2 ICMP Rate Limit Challenge
A major hurdle to scan UDP source ports efficiently is the commonly
deployed rate limit of outgoing ICMP error messages on endhosts.
Even in the simple case where a source port is public-facing and can
be scanned directly by any IP address, an attacker‚Äôs scanning speed
is limited by the number of allowable ICMP packets per second (a
signal indicating a source port is not in use).
Historically, ICMP rate limit was first recommended to limit
the resource consumption on a router (described in RFC 1812 [7])
where an attacker can force it to generate a high volume of ICMP
error messages. Today, the rate limit mechanism is universally
implemented by all major OSes. Here we focus on the Linux‚Äôs
ICMP rate limiting behavior as it is the most popular server OS, but
will briefly describe the behaviors of other OSes afterwards.
For Linux, there are both a per-IP and global rate limit on how
many ICMP error packets can be sent out per second. The per-IP
rate limit was historically introduced in the very early versions
of Linux, i.e., present in kernel 2.4.10. The global rate limit was
introduced in kernel 3.18 as a way to alleviate the expensive per-IP
rate limit check (e.g., red-black tree operations) [22].
By default, the per-IP rate limit is one per second (with an accrued
max burst of 6) which will severely restrict the scanning speed; the
global rate limit is effectively 1,000 (with periodic max allowable
bursts of 50). Both are implemented in token bucket style, with the
per-IP tokens recovering at a rate one per second and the global
token recovering at a ‚Äúnominal‚Äù rate of one per millisecond (but
the actual token increment happens only after at least 20ms has
elapsed since the last increment). The number of available tokens
is capped at 50 at all times.
We also tested Windows Server 2019 (version 1809), MacOS
10.15 and FreeBSD 12.1.0, all of which have global ICMP rate limits.
Specifically, their limits are 200, 250 and 200 respectively. Besides,
none of them has a per-IP rate limit.
4.3 Public-Facing Source Port Scan Method
Even though a source port can be directly probed by any attacker
IP in this case, e.g., as in unbound and dnsmasq, it is imperative to
bypass the per IP rate limit (present in Linux primarily) to achieve
faster scan speed. We develop three different probing methods that
can overcome the ICMP rate limit challenge.
1‚óã If the attacker owns multiple IP addresses, either multiple bot
machines or a single machine with an IPv6 address, then it is trivial
to bypass the per IP limit. IPv6 address allocation states that each
LAN is given a /64 prefix [33], effectively allowing any network to
use 264 public IP addresses. We have tested this from a machine
in a residential network that supports IPv6 and picked several IPs
within the /64 to send and receive traffic successfully.
2‚óã If an attacker owns only a single IPv4 address, it is still pos-
sible to ask for multiple addresses using DHCP. We verified that
multiple private IPv4 addresses can be obtained in a home network.
In addition, we have tested this in an educational network where
a single physical machine is able to acquire multiple public IPv4
addresses through this method as well.
3‚óã If an attacker owns a single IPv4 address and the above
method fails for some reason (e.g., statically assigned IPs), then
the last method is to leverage IP spoofing to bypass the per IP rate
limit, and the global rate limit as a side channel to infer whether
the spoofed probes have hit the correct source port or not, i.e., with
or without ICMP responses. As have been shown in the context
of TCP recently, global rate limit can introduce serious side chan-
nels [11, 12, 26]. Here we leverage the ICMP global rate limit to
facilitate UDP port scans which we describe next.
Figure 3 illustrates this. In observing the maximum globally
allowable burst of 50 ICMP packets in Linux, the attacker first
sends 50 spoofed UDP probe packets each with a different source IP
(bypassing the per-IP rate limit). If the victim server does not have
any source port open among the 50, then 50 ICMP port unreachable
messages will be triggered (but they are not directly observable
to the attacker). If the victim server does have ùëõ open ports, then
only 50-ùëõ ICMP packets will be triggered (as the ùëõ UDP probing
packets will be silently discarded at the application layer). Now,
the attacker sends a verification packet using its real IP address,
e.g., a UDP packet destined to a known closed port, such as 1. It
will either get no response (if the global rate limit is drained), or an
ICMP reply otherwise.
If no port is found in the first batch, the attacker waits for at least
50ms for the rate limit counter to recuperate, and then start the
next round. Effectively, the scanning speed will be capped at 1,000
per second. It therefore takes 60+ seconds to enumerate the entire
port range consisting of 65536 ports. Nevertheless, it is a winning
battle as the attacker can simply repeat the experiment and the
probability that one experiment will succeed increases drastically
(we note that this is a simple Bernoulli trial).
Time consideration. This approach does have a strong timing
requirement. The only thing the attacker has to make sure is to
Session 4E: Network Security CCS '20, November 9‚Äì13, 2020, Virtual Event, USA1340Figure 3: Fast Port Scanning of an Open Source Port
Figure 4: Fast Port Scanning of a Private Source Port
send 50 spoofed probing packets and the verification packet in a
burst so that they are all processed within a 20ùëöùë† window; other-
wise, the victim may start recovering additional tokens. The other
requirement is that the attacker has to wait long enough for the
50 max tokens to recover. If the network condition is not ideal, the
attacker can simply wait longer than 50ms.
Binary search to narrowing down to an exact port. Assuming
there is a single open port out of the 50 in a specific probing round,
we can then employ a simple binary search to quickly narrow down
to the exact port. During each round of binary search, we always
probe the left half of range first. If it is a match, i.e., 50 spoofed
probing packets triggered 49 replies and the attacker can observe
one reply to its verification packet, then we continue to search
its left half. Otherwise, we assume the port lies in the right half
and will conduct a binary search there. Note that we will need to
send ‚Äúpadding packets‚Äù to ensure the global rate limit is drained
when none of the 50 guesses hit a correct port. Padding packets are
spoofed packets destined to known closed UDP ports, e.g., 1, that
are guaranteed to trigger ICMP replies.
Handling noises. DNS servers usually serve multiple clients at the
same time, creating multiple outstanding DNS queries and source
ports. As a result, the source port scan will likely discover many
irrelevant ports. However, most such queries are transient, and
the port scan process can quickly discover an open source port
disappearing during the binary search and return to the linear
search. In contrast, we assume that the attacker-triggered DNS
queries will last significantly longer, e.g., on the order of seconds
instead of milliseconds (see ¬ß5).
Another source of noises comes from packet losses and reorder-
ing. This may lead to both false positives, e.g., loss probing packets
or their replies, reordering between verification and probing pack-
ets, and false negatives, e.g., lost of the verification packet or its
reply (although very rare in practice). To mitigate reordering (which
may happen frequently if the jitter is large), we insert a delay, which
is empirically determined to be larger than twice the jitter, between
probe packets and the verification packet. When false positives do
occur, they are handled automatically in the binary search process‚Äì
it will detect no real port being open and return to linear search.
Even though they can be handled, excessive false positives will
drain the per-IP rate limit quickly. Specifically, given the token is
recovered at the slow rate of one per second, a false positive rate
that is higher than that will force the scan to halt until the token is
recovered. Effectively, a per-IP token is a ‚Äúpass to scan‚Äù. To solve
this problem, the attacker may use two or more real IPs to gain
more ‚Äúpasses‚Äù.
In addition, DNS servers themselves may be subject to random
UDP port probing and therefore generate ICMP unreachable mes-
sages. This would cause false negatives: we may mistakenly think
there is no open port but in fact there is because the verification
packet will not trigger any ICMP unreachable replies due to the
noise draining the rate limit. Fortunately, not all ICMP replies are
subject to rate limit. For example, the most commonly triggered
ICMP echo replies are not subject to the limit.
4.4 Private Source Port Scan Method
As described in ¬ß4.1, if connect() is performed on a UDP socket,
the port effectively becomes ‚Äúprivate‚Äù to the remote peer, invalidat-
ing the previous method.
Our idea then is to send spoofed UDP packets with the source IP
of the upstream DNS server. In the example of a DNS resolver being
the victim, we can send UDP packets probing different source ports
with spoofed IP of the authoritative name server. If it hits the correct
source port, then no ICMP reply will be generated. Otherwise, there
will be. We can then use the same global ICMP rate limit as a side
channel to infer if such an ICMP message has been triggered. At
first glance, this method can work but at a low speed of one port
per second, due to the per-IP rate limit on ICMP messages.
Surprisingly, after we analyze the source code of the ICMP rate
limit implementation, we find that the global rate limit is checked
prior to the per-IP rate limit. This means that even if the per-IP
rate limit may eventually determine that no ICMP reply should be
sent, a packet is still subjected to the global rate limit check and one
token is deducted. Ironically, such a decision is consciously made
by Linux developers to avoid invoking the expensive check of the
per-IP rate limit [22], involving a search process to locate the per-IP
data structure.
This effectively means that the per-IP rate limit can be disre-
garded for the purpose of our side channel based scan, as it only
determines if the final ICMP reply is generated but has nothing to
do with the global rate limit counter decrement. As a result, we can
continue to use roughly the same scan method as efficient as before,
achieving 1,000 ports per second. Figure 4 illustrates the slightly
modified scan workflow. Similar to Figure 3, the attacker first sends
50 probes where this time all of which uses the spoofed IP of the
Spoofed Packets50 Probe Packets50 ICMPRepliesVerification Packet50 Probe Packets50‚àín ICMPRepliesVerification PacketICMP ReplyOff-pathAttackerArbitraryHostsVictim Serverwith no ports openArbitraryHostsVictim Serverwith n ports openGlobalCounter=50GlobalCounter=0GlobalCounter=50GlobalCounter=nGlobalCounter=n-1each spoof a different IPSpoofed Packets50 Probe Packets1 ICMPReplyVerification Packet50 Probe Packets1 ICMPReplyVerification PacketICMP ReplyOff-pathAttackerUpstreamServerVictim Serverno active queryUpstreamServerVictim Serverhas n active queriesGlobalCounter=50GlobalCounter=0GlobalCounter=50GlobalCounter=nGlobalCounter=n-1all spoof the IP of upstream serverSession 4E: Network Security CCS '20, November 9‚Äì13, 2020, Virtual Event, USA1341Router
ICMP Reply Global ICMP Rate Limit Using connect() Spoofing Public IP in LAN Vulnerable
Table 1: DNS Forwarder Behaviors in Home Routers
Verizon Fios Gateway (G1100)
Xiaomi (R3)
Huawei A1 (WS826)
Netgear (WNDR3700v4)
Arris Spectrum Gateway (TR4400)
TP-Link (Archer C59)
Y
Y
N
Y
Y
Y
N
N
N/A
N
N
N
Y
N