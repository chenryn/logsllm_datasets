tables, which are used for the implementation of switch statements in C. In the
second case, control is transfered to the original code segment because a code
74
V. Pappas, M. Polychronakis, and A.D. Keromytis
Original Process 
Relocated Process
.text
.data
trap
.data
.text
Fig. 1. High-level overview of runtime relocation ﬁxup. The code segment of a stripped
binary is loaded to a randomly chosen location, and its original memory area is marked
as inaccessible. Memory accesses and control transfers to any of the original locations
are trapped. Relocation information is then reconstructed by analyzing the faulting
instruction.
pointer that has not been relocated is used. This could be a simple function
pointer, part of a C++ virtual table (vtable), or a static one, represented as an
immediate value in an instruction. In the following subsections we describe in
detail how each of these cases is handled.
When control is transferred to locations in the original code segments for
which there is no code pointer, or when we can not verify it as a legitimate code
pointer, these transfers are ﬂagged as code-reuse attempts (see Fig. 2). This
eﬀectively allows attackers to reuse code paths for which there are legitimate
code pointers (e.g., function entries or jump table targets), given that they have
not been reconstructed yet. Arguably, this leaves a very limited set of gadgets
for the attacker, which quickly shrinks further as relocatable code pointers are
identiﬁed.
3.3 Jump Tables
A jump table is an array of code targets that is usually accessed through an
indirect jump. The following is an example of such a jump table in x86 assembly
(taken from gcc’s binary):
.text:004D5CCE
...
; DATA XREF: _main+2CE ; jump table for switch statement
.text:004D6864 off_4D6864
jmp ds:off_4D6864[eax*4] ; switch jump
dd offset loc_4D5D53
Dynamic Reconstruction of Relocation Information
75
.text:004D6868
.text:004D686C
.text:004D6870
dd offset loc_4D5D63
dd offset loc_4D5D93
dd offset loc_4D5D8B
When the jmp instruction is executed from the new random location, an excep-
tion is going to be raised, with the faulting address being (0x4D6864 + eax
* 4). This is handled as follows: i) starting from the location pointed to by
the faulting address, we scan the bytes before and after that location for more
addresses and ﬁx them, and ii) we also ﬁx the relocatable oﬀset in the address
operand of the indirect jump instruction. In case of jump tables with relative
oﬀsets, we just skip the ﬁrst step.
No
Yes
Check jump 
table
Yes
Yes
Is jump 
table?
No
Is disp. 
reloc.?
No
Trap
Is EIP in
orig code?
Check func. 
pointer
Yes
Is func. 
pointer?
 No
Check vtable 
pointer
No
No
Fix registers 
and resume
Yes
Is vtable 
pointer?
No
Yes
Found
in data?
No
Found
in code?
Yes
Is imm.
in instr.?
Yes
Global
pointer 
optimization
Detect 
code-reuse
Add relocs 
and resume
Search for 
Pointer
No
Single hit?
Yes
Fig. 2. Flow graph of the procedure followed after a memory access exception (trap)
is generated. If the instruction pointer (EIP register) at the time of the exception is
within the original code segment, the system performs pointer veriﬁcation, otherwise
the faulting instruction is ﬁxed.
3.4 Pointer Veriﬁcation
After jump tables are covered, we only expect to see control ﬂow transfers to
the locations of the original code. In these cases, the location of the faulting
instruction is also the faulting address—there is no information about the source
76
V. Pappas, M. Polychronakis, and A.D. Keromytis
instruction. Given a faulting address, the whole code segment and initialized data
are scanned for all its occurrences. If there is a single occurrence, we assume
that it is a relocatable oﬀset, which is handled appropriately. Otherwise, for
each occurrence in the code segment, we verify that it is indeed part of a valid
instruction—more precisely, an immediate operand.
Occurrences found in the initialized data segments are a bit more complicate
to cover. Usually, for such a hit to be indeed a relocatable oﬀset, it has to be a
variable holding a function pointer, so there should be a way of accessing that
variable. To verify this, we just need to ﬁnd a data reference to that variable. In
addition, function pointers can be parts of structures, arrays, or a combination of
both. In general, we verify that an occurrence of the faulting address in the data
segment is a relocatable oﬀset that needs to be ﬁxed if we can ﬁnd a reference
to or near its location (given as a parameter).
The following example illustrates the function pointer veriﬁcation process.
Assume there is a global variable that is statically initialized with the address
of a function. Also, there is an indirect call instruction that reads the value of
the global variable and transfers control to its value. At runtime, the value is
going to be read (because the data segment is not relocated) and an exception is
going to be raised when control is transfered to the function. Both the faulting
address and the faulting instruction will correspond the beginning of the target
function. At this point, we ﬁnd an occurrence in the code segment and verify
that it belongs to an instruction—which is the indirect call in this case.
Another use of function pointers is in C++ virtual tables, which is how dy-
namic class methods are represented. These pointers are handled a bit diﬀerently
than simple function pointers, and, for this reason, we have introduced special
checking rules. We ﬁrst verify that there is a move instruction that copies the
head of the table to a newly created class instance, by ﬁnding a move instruction
that references a memory location close to the place where the code pointer was
found. We then also verify that the control was transferred by an indirect call
through a register, by reading the current value at the top of the runtime stack
(return address) and disassembling the instruction right before the location it
points to. Bellow is a real example taken from the eon binary of the SPEC
benchmarks suite:
;; function call
.text:004017F9
.text:004017FB
.text:004017FE
.text:004017FF
.text:00401802
.text:00401803
.text:00401806
.text:00401807
.....
mov
mov
push edx
mov
push edx
mov
push edx
call eax
eax, [ecx]
eax, [eax+24h]
; ecx is this ptr
edx, [ebp+arg_4]
edx, [ebp+arg_0]
Dynamic Reconstruction of Relocation Information
77
;; vtable (the static part)
; DATA XREF: sub_409B40+8o ; sub_40B0E0+2Fo
.rdata:00461D24 off_461D24
.rdata:00461D28
.rdata:00461D2C
.....
;; copying the head of the table
.text:0040B10C
.text:0040B10F
lea
mov
dd offset sub_40AAD0
dd offset sub_409BB0
dd offset sub_409BC0
ecx, [esi+4]
dword ptr [esi], offset off_461D24
; this
The top part of the example shows the code that loads the function pointer from
the vtable to the eax register and then transfers control there by calling it. The
call instruction at the end will actually going to raise an exception. While han-
dling the exception, we check (i) the table that contains the faulting address at
0x461D24 (middle part) is referenced by a move instruction at 0x40B10F (bot-
tom part), and (ii) the instruction before the return address is a call instruction
with a register operand (at 0x401807).
3.5 Dynamic Data
Although in order to reconstruct the missing relocation information we need
to locate relocatable oﬀsets within the image of the executable module, copies
of such values also appear in dynamic data (e.g., in the stack or heap). This
is the result, for example, of a global pointer being copied in a structure ﬁeld
that was dynamically allocated. In this case, an exception is going to be raised
when the copy of the pointer (in the structure) is used. As described before,
our technique is going to trace the original relocatable oﬀset. This is suﬃcient
for reconstructing the relocation information for this pointer, and avoid dealing
with the same problem next time the same program is executed. However, we
do not take any further actions to deal with copies in dynamic data. Thus, we
might have to handle more than one exceptions for the same relocatable value
during the same run in which it was ﬁrst discovered. This, of course, does not
aﬀect the correctness and robustness of the technique in any way, but can aﬀect
overall performance.
To avoid the performance penalty under some cases, while not weakening
our original approach, we added a simple optimization for global pointers. Each
time a relocatable oﬀset is ﬁxed, and it is found to be the source operand of an
instruction that copies it over to a global data location, we check whether the
destination memory location contains the same value and relocate that copy,
too. Below is an example of a few such instructions (taken from gcc’s binary):
.text:004D5A69
.text:004D5A73
.text:004D5A7D
mov
mov
mov
dword_550968, offset loc_4D1F10
dword_550AAC, offset loc_4D1C20
dword_5509C4, offset nullsub_1
The ﬁrst mov instruction in the above example copies the (relocatable) oﬀset
loc 4D1F10 to the global data memory location 0x550968. At the time an
78
V. Pappas, M. Polychronakis, and A.D. Keromytis
exception is raised because control was transfered to address 0x4D1F10, the
source operand of the ﬁrst mov instruction will be ﬁxed, and, if the same value
is found at address 0x550968, that will be ﬁxed as well. In this way, future
copies of the relocatable oﬀset will point to the new code location, and no more
exceptions will be raised for this instance.
In general, when this optimization is not applicable and there are many copies
of relocatable oﬀsets being repeatedly used, we have the option to set an access
threshold, beyond which the system can inform the user that restarting the
program would greatly increase its performance. Still, we believe that this is a
minor issue, as it might occur only in the ﬁrst few times a program is executed.
After that, the relocation information of the majority of the relocatable oﬀsets
will have been reconstructed.
4
Implementation
We built a prototype of the described technique for the Windows platform. Most
of the development of the tool was done on Windows XP. However, as the APIs
we use have not changed in more recent versions of the operating system, our
prototype supports even the latest version, which is Windows 8.1 at the time of
writing.
The most signiﬁcant part of the implementation is built on top of the Windows
Debugging API [26], with the addition of some other standard functions (e.g.,
CreateProcess). This API is designed to work between two processes: the
parent process is responsible for spawning a child process, and then capture and
analyze any debug events the child generates. Debug events include memory
access violation exceptions, process/thread startup/termination, and so on. Our
implementation is bundled as a single application (about 1.5 KLOC) which can
be executed from the command prompt, and receives the path of the target
program to be protected as a command-line argument.
At a higher level, there are two phases of operation: initialization and runtime.
We discuss both in suﬃcient detail in the rest of this section.
4.1 Initialization
The ﬁrst step during the initialization phase is to spawn the process, while
passing the appropriate arguments in order to enable debugging. The very ﬁrst
debug event generated by the child process is a process creation event, which
is handled by the parent by performing the following tasks before resuming the
execution of the child process. Initially, the Portable Executable (PE) headers
are parsed. These headers include information such as the boundaries of each
section (data, code, etc.) and the entry point of the code. Given that information,
we proceed by copying the code section to a new, randomly chosen location using
the ReadProcessMemory and WriteProcessMemory API functions, while