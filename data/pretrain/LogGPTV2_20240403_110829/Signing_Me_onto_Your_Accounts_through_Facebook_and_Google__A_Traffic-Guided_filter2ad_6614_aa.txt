title:Signing Me onto Your Accounts through Facebook and Google: A Traffic-Guided
Security Study of Commercially Deployed Single-Sign-On Web Services
author:Rui Wang and
Shuo Chen and
XiaoFeng Wang
2012 IEEE Symposium on Security and Privacy
Signing Me onto Your Accounts through Facebook and Google: a Traffic-Guided 
Security Study of Commercially Deployed Single-Sign-On Web Services 
Rui Wang 
Indiana University Bloomington 
Bloomington, IN, USA 
PI:EMAIL 
Shuo Chen  
Microsoft Research 
Redmond, WA, USA 
PI:EMAIL 
XiaoFeng Wang 
Indiana University Bloomington 
Bloomington, IN, USA 
PI:EMAIL 
Abstract—  With  the  boom  of  software-as-a-service  and  social 
networking, web-based single sign-on (SSO) schemes are being 
deployed by more and more commercial websites to safeguard 
many  web  resources.  Despite  prior  research 
in  formal 
verification, little has been done to analyze the security quality 
of  SSO  schemes  that  are  commercially  deployed  in  the  real 
world.  Such  an  analysis  faces  unique  technical  challenges, 
including lack of access to well-documented protocols and code, 
and  the  complexity  brought  in  by  the  rich  browser  elements 
(script,  Flash,  etc.).    In  this  paper,  we  report  the  first  “field 
study” on popular web SSO systems. In every studied case, we 
focused  on  the  actual  web  traffic  going  through  the  browser, 
and  used  an  algorithm  to  recover 
important  semantic 
information  and identify potential exploit opportunities. Such 
opportunities guided us to the discoveries of real flaws. In this 
study,  we  discovered  8  serious  logic  flaws  in  high-profile  ID 
providers  and  relying  party  websites,  such  as  OpenID 
(including Google ID and PayPal Access), Facebook, JanRain, 
Freelancer,  FarmVille,  Sears.com,  etc.  Every  flaw  allows  an 
attacker to sign in as the victim user. We reported our findings 
to affected companies, and received their acknowledgements in 
various  ways.  All  the  reported  flaws,  except  those  discovered 
very  recently,  have  been  fixed.  This  study  shows  that  the 
overall security quality of SSO deployments seems worrisome. 
We hope that the SSO community conducts a study similar to 
ours, but in a larger scale, to better understand to what extent 
SSO is insecurely deployed and how to respond to the situation. 
Keywords—  Single-Sign-On,  Authentication,  Web  Service, 
Secure Protocol, Logic Flaw 
1. INTRODUCTION 
Imagine  that  you  visit  Sears.com,  a  leading  shopping 
website,  or  using  Smartsheet.com,  a  popular  project 
management web app, and try to get in your accounts there. 
Here is what you will see (as in Figure 1):  Sears allows you 
to sign in using your Facebook account, and Smartsheet lets 
the login go through Google. This way of authentication is 
known as single sign-on (SSO), which enables a user to log 
in  once  and  gain  access  to  multiple  websites  without  the 
hassle  of  repeatedly  typing  her  passwords.  Web  SSO  is 
extensively used today for better user experience. According 
to a recent survey, a majority of web users (77%) prefer web 
SSO to be offered by websites [7]. 
Figure 1: Facebook login on Sears and Google login on Smartsheet 
SSO  systems  such  as  Kerberos  have  been  there  for 
years.  However,  never  before  has  the  approach  seen  such 
© 2012, Rui Wang. Under license to IEEE.
DOI 10.1109/SP.2012.30
365
leading  web 
extensive  commercial  deployments  as  what  happen  on 
today’s  web,  thanks  to  the  increasing  popularity  of  social 
networks,  cloud  computing  and  other  web  applications. 
Today, 
technology  companies  such  as 
Facebook, Google, Yahoo, Twitter and PayPal all offer SSO 
services.  Such  services,  which  we  call  web  SSO,  work 
through  the  interactions  among  three  parties:  the  user 
represented by a browser, the ID provider (a.k.a, IdP, e.g., 
Facebook) and the relying party (a.k.a, RP, e.g., Sears). Like 
any  authentication  scheme,  a  secure  web  SSO  system  is 
expected  to  prevent  an  unauthorized  party  from  gaining 
access  to  a  user’s  account  on  the  RP’s  website.  Given  the 
fact 
that  more  and  more  high-value  personal  and 
organizational  data,  computation  tasks  and  even  the  whole 
business  operations  within  organizations  are  moving  into 
the cloud, authentication flaws can completely expose such 
information assets to the whole world.  
Motivation of this research. Given the critical role of 
SSO today, it becomes imperative to understand how secure 
the  deployed  SSO  mechanisms  truly  are.  Answering  this 
question is the objective of our research.  
Actually,  SSO  has  been  studied  in  the  protocol 
verification community  for a  while,  which  we  will discuss 
in the related work section. The main focus of these studies 
was  to  design  formal  methods  to  find  protocol  flaws. 
However,  no  prior  work  includes  a  broad  study  on 
commercially  deployed  web  SSO  systems,  a  key  to 
understanding to what extent these real systems are subject 
to  security  breaches.  Moreover,  even 
though  formal 
verifications  are  demonstrated  to  be  able  to  identify 
vulnerabilities  in  some  SSO  protocols  [2],  they  cannot  be 
directly  applied  here  to  answer  our  question,  due  to  the 
following limitations. First, the  way that today’s  web SSO 
systems  are  constructed  is  largely  through  integrating  web 
APIs,  SDKs  and  sample  code  offered  by  the  IdPs.  During 
this process, a protocol serves merely as a loose guideline, 
which  individual  RPs  often  bend  for  the  convenience  of 
integrating SSO into their systems. Some IdPs do not even 
bother to come up with a rigorous protocol for their service. 
For example, popular IdPs like Facebook and Google, and 
their RPs either customize published protocols like OpenID 
or  have  no  well-specified  protocols  at  all.  Second,  the 
security  guarantee  an  SSO  scheme  can  achieve  also 
intrinsically  depends  on  the  system  it  is  built  upon.  
Vulnerabilities  that  do  not  show  up  on  the  protocol  level 
could be brought in by what the system actually allows each 
SSO party to do: an example  we discovered is that  Adobe 
Flash’s  cross-domain  capability  totally  crippled  Facebook 
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:30 UTC from IEEE Xplore.  Restrictions apply. 
SSO  security  (Section  4.2).  Finally,  formal  verification  on 
the protocol level cannot find the logic flaws in the way that 
the  RP  misuses  the  results  of  an  SSO  for  its  decision-
making. For example, we found that the RPs of Google ID 
SSO often assume that message fields they require Google 
to  sign  would  always  be  signed,  which  turns  out  to  be  a 
serious  misunderstanding  (Section  4.1).  These  problems 
make us believe that a complete answer to our question can 
only be found by analyzing SSO schemes on real websites.    
Challenge  in  security  analysis  of  real-world  SSO. 
Security  analysis  of  commercially  deployed  SSO  systems, 
however, faces a critical challenge: these systems typically 
neither  publish  detailed  specifications  for  their  operations 
nor have their code on the RP and IdP sides accessible to the 
public.  What  is  left  to  us  is  nothing  more  than  the  web 
traffic  that  goes  through  the  browser.    On  the  bright  side, 
such information is exactly what the adversary can also see. 
This makes our analysis realistic: whatever we can discover 
and  exploit  here,  there  is  no  reason  why  a  real-world 
attacker cannot do the same.  
Given  our  limited  observation  of  the  interactions 
between commercial IdPs and their RPs (as shown in Figure 
2),  we  have  to  focus  our  analysis  on  the  traffic  and 
operations of the browser. Fortunately, the browser actually 
plays a critical role in web SSO. More specifically, an SSO 
system  is  typically  built  upon  the  RP’s  integration  of  the 
web APIs exposed by the IdP. Through these APIs, the RP 
redirects  the  browser  to  the  IdP  to  authenticate  the  user 
when she attempts to log in. Once succeeds, the browser is 
given either a certified token for directly signing into the RP 
(the  case  of  Smartsheet)  or  a  secret  token  that  the  RP  can 
use to acquire the user’s identity and other information from 
the IdP (the case of Sears). Note that during this process, the 
browser must be bound to the authentication token to prove 
to  the  RP  the  user’s  identity  that  the  browser  represents. 
This  requires  the  critical  steps  of  an  SSO,  e.g.,  passing  of 
the  token,  to  happen  within  the  browser.  The  browser-
centric nature of web SSO makes it completely realistic to 
analyze the browser traffic to identify logic flaws.   
browser 
 IdP 
RP
Blackbox for us
Visible to us 
Figure 2: an SSO triangle and our visibility as an outsider 
 Our  study  and  findings.  The  web  services/websites 
we investigated include high-profile systems that utilize the 
aforementioned  IdPs.  Our  study  shows  that  not  only  do 
logic flaws pervasively exist in web SSO deployments, but 
they  are  practically  discoverable  by  the  adversary  through 
analysis of the SSO steps disclosed from the browser, even 
though  source  code  of  these  systems  is  unavailable.  The 
web SSO systems we found to be vulnerable include those 
of  Facebook,  Google  ID,  PayPal  Access,  Freelancer, 
JanRain,  Sears  and  FarmVille.  All  the  discovered  flaws 
allow  unauthorized  parties  to  log  into  victim  user’s 
accounts  on  the  RP,  as  shown  by  the  videos  in  [33].  We 
366
reported our findings to related parties and helped them fix 
those  bugs,  for  which  we  were  acknowledged  in  various 
ways, e.g., public recognitions, CEO’s thank and monetary 
reward, which we will mention in Section 4.  
Our  methodology.  When  investigating  an  SSO  case, 
our analysis begins with an automated black-box test on the 
HTTP messages, which the browser passes between the RP 
and  the  IdP  for  invoking  the  APIs  on  either  side.  We  call 
these  messages  browser  relayed  messages  (BRMs).  This 
test identifies the HTTP field that carries the authentication 
token and other fields that directly or indirectly affect either 
the  value  of  the  token  or  the  destination  it  will  be  sent  to 
(e.g., a reply URL). What we are interested in is the subset 
of  these  fields  that  the  adversary  could  access  under 
different  adversary  assumptions  that  we  will  describe  in 
Section 2.2. Once such knowledge has been gathered by the 
automatic  test,  we  move  on  to  understand  whether  the 
adversary  has  the  capability  to  forge  the  token  that  is 
supposedly authentic or steal the token that is supposedly a 
secret. Oftentimes, this brings us directly to a set of specific 
technical questions that serve as sufficient conditions for an 
exploit to succeed. These questions are answered by doing 
more insightful system testing or by looking for knowledge 
from  domain  experts.  Our  experience  proves  that  this 
analysis  methodology  indeed  gives  effective  guidance  in 
finding real-world SSO logic flaws.  
Roadmap. The rest of the paper is organized as follows: 
Section  2  offers  the  background  about  web  SSO  and  the 
adversary  models  we studied; Section 3 a number of basic 
concepts that Section 4 will base on, and our tool to extract 
basic  ground  truths  of  an  SSO  scheme;  Section  4  presents 
the  main  study of this paper; Sections 5 and 6 discuss our 
retrospective thought and related work; Section 7 concludes. 
2. BACKGROUND 
2.1.  Web Single Sign-On: a View from the Browser 
SSO is essentially a process for an IdP to convince an 
RP  that  because  this  browser  has  signed  onto  the  IdP  as 
Alice,  this  same  browser  is  now  granted  the  capability  to 
sign  onto  the  RP  as  Alice.  The  tricky  part  here  is  that  the 
IdP must bind Alice’s capability to the correct browser that 
truly  represents  Alice.  In  all  existing  SSO  systems,  such  a 
binding  is  through  proof-by-possession:  Alice’s  browser 
needs  to  present  to  the  RP  a  token  issued  by  the  IdP  to 
demonstrate  that  it  possesses  the  capability  that  the  IdP 
grants to Alice. Security of an SSO scheme depends on how 
the  token  is  handled,  so  the  browser  naturally  undertakes 
many critical steps, and thus is the focus of our investigation.  
Browser  relayed  message  (BRM).  An  SSO  process 
can be described as a sequence of browser relayed messages 
exchanged between the RP and the IdP. Typically, an HTTP 
communication can be thought of as a sequence of request-
response  pairs,  as  shown  in  Figure  3  (upper).  Each  pair 
consists of an HTTP request Xa, where X is the number of 
requests  the  browser  has  made  (i.e.,  1a,  2a,  etc.),  and  its 
corresponding  HTTP  response  Xb  (1b,  2b,  etc.)  to  be  sent 
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:30 UTC from IEEE Xplore.  Restrictions apply. 
back from the server (either the RP or the IdP). A browser 
relayed  message  (BRM)  refers  to  a  response  message  Xb 
followed  by  a  request  (X+1)a  in  the  next  request-response 
pair, as illustrated in the figure. 
all SSO parties: not only can he talk to the RP and the IdP, 
but  he  can  also  set  up  a  website,  which,  once  visited  by 
Alice,  can  deposit  web  content  to  Alice’s  browser.  Such 
interactions are described in Figure 4.  
1a         1b        2a         2b        3a      3b       …     5b      6a        
Alice  
Bob (malicious)
BRM1 
BRM2 
BRM5 
browser 
BRM5 
1a 
BRM1 
RP 
BRM2 
IdP 
Figure 3: upper: a browser-relayed message (BRM) consists of a 
response and the next request; lower: a sample SSO process 
Each  BRM  describes  a  step  of  the  SSO  in  which  the 
server handler (e.g., a web API) of step X passes data to the 
server  handler  of  step  X+1,  with 
the  browser  state 
piggybacked.  The  entire  SSO  process  is  bootstrapped  by 
request  1a  sent  to  the  RP.  It  triggers  BRM1,  which  is,  for 
example, for the RP to declare its website identity to the IdP. 
More BRMs may occur as needed afterwards. The last BRM 
(e.g., BRM5 in Figure 3 (lower)) finally convinces the RP 
of the user’s identity that the browser represents. 
A  BRM  can  be,  for  example,  (1)  an  HTTP  3xx 
redirection  response  (2)  a  response  including  a  form  for 