# 【技术分享】DG on Windows 10 S: 执行任意代码
|
##### 译文声明
本文是翻译文章，文章来源：安全客
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
译者：[shan66](http://bobao.360.cn/member/contribute?uid=2522399780)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
许多人可能会有一种错觉，那就是在Windows 10
S上执行非Microsoft代码是非常困难的。不过，就像您在前面的文章中看到的那样，事实并非如此，您需要的，无非就是安装Office，获取编写VBA宏脚本的权限，以及一个不含有MOTW的文件。事实上，Windows内核只是对加载可执行文件和DLL做了限制。但是，已经获取相应签名的应用程序将会畅行无阻，例如Office可以创建自己的可执行内容，而这些内容却可能被用户或攻击者所滥用。
因此，您可能还会认为，由于Windows默认安装了许多不同的脚本引擎，因此可以轻松运行任意代码。且慢，许多内置的脚本引擎（如运行JScript/
VBScript的Powershell和Windows Scripting
Host（WSH））都是“开明的”。这意味着当它们检测到启用UMCI时，它们将进入锁定模式，例如PowerShell的约束语言模式。如果正在执行的脚本也使用了与二进制可执行内容相同的证书集进行的签名，则这些开明的主机将解锁脚本语言的全部功能。通常情况下，有许多办法可以绕过这些限制，但是，这里只是围绕Windows
RT进行介绍。此外，如果有兴趣的话，您可以在[这里](https://channel9.msdn.com/Events/Blue-Hat-Security-Briefings/BlueHat-Security-Briefings-Fall-2013-Sessions/PowerShell-Code-Integrity)找到关于BlueHat旁路技术的完整演示文稿。
但从Win10S开始下手也是一个不错的选择。绕过上述限制时，主要求助于脚本引擎，但是就像之前文章中提到的那样，DG策略也提供了相应的黑名单。还有一些其他知名的恶意软件，如MSBuild也被列入了黑名单。所以我想我们必须回到最初的设想：默认的Win10S系统还有很多可执行文件可以被滥用，我们只需要找到它们即可。
**关于BinaryFormatter**
对象序列化框架通常蕴含着丰富的代码执行漏洞，而.NET也不例外。 不久之前，我在.NET中发现了一个处理WMI类方面的RCE。
您可以在这篇博客文章中阅读更多详细信息，但是简单来说，就是可以将任意字节流传递给内置的BinaryFormatter类，并从内存中加载程序集进而执行任意代码。
虽然不太明显，实际上这也是一种DG旁路技术。尽管PowerShell允许您以约束语言模式来查询任意的WMI服务器和类，但是.NET运行时并不是“开明的”，所以它将从一个字节数组中加载程序集。从字节数组加载很重要，因为正常情况下，.NET将从需要映射到内存的可执行文件中加载程序集。将可执行文件映射到内存中的行为会触发内核中的CI模块来验证签名，根据配置的CI策略，将不允许加载任何代码。对于字节数组，内核不会将程序集视为.NET，所以会进行处理并从中执行任意的托管代码。然而，DCOM漏洞已经被修复了，PowerShell会被阻止，所以我们无法调用WMI方法。但是，如果我们可以找到另一个应用程序，它可以使用字节数组并将其传递给BinaryFormatter，那么，我们就可以重用我以前的漏洞利用中使用的反序列化漏洞链，并使用它来绕过内存中的DG保护。
这里考察的重点是在％SystemRoot％
Microsoft.Net目录中的可执行文件，其中许多是用.NET编写的，因此很可能可以加以利用。首先引起我的兴趣的是AddInProcess.exe，这主要归功于它的名称。这是一个个可执行文件，实际上，之前我就从Partial
Trust沙箱转义的角度对它进行过研究。
这个代码是.NET
4中引入的插件模式的一部分。插件模式提供了一个结构化框架，提供了某些功能，以便于第三方向现有应用程序添加附加功能。为此，开发者需要开发相应的接口，建立管道以及许多其他复杂的工作，但是我们并不关心这些。
有趣的是，这个模式支持Out-of-Process（OOP）插件，这在是AddInProcess的用途。为了托管这些OOP插件，需要启动一个可执行文件。而这个可执行文件的主函数其实很简单，如下所示：
    static int Main(string[] args) {
        if (args.Length != 2
         || !args[0].StartsWith("/guid:") 
         || !args[1].StartsWith("/pid:")) {
            return 1;
        }
        string guid = args[0].Substring(6);
        int pid = int.Parse(args[1].Substring(5));
        AddInServer server = new AddInServer();
        var server = new BinaryServerFormatterSinkProvider {
            TypeFilterLevel = TypeFilterLevel.Full
        };
        var client = new BinaryClientFormatterSinkProvider();
        var props = new Hashtable();
        props["name"] = "ServerChannel";
        props["portName"] = guid;
        props["typeFilterLevel"] = "Full";
        var chnl = new AddInIpcChannel(props, client, server);
        ChannelServices.RegisterChannel(chnl, false);
        RemotingServices.Marshal(server, "AddInServer");
        Process.GetProcessById(pid).WaitForExit();
        return 0;
    }
这里要指出的是，它使用ChannelServices.RegisterChannel：这表明它正在使用.NET的远程处理技术进行通信。对了，之前我们还在哪里看到过.NET远程处理技术呢？