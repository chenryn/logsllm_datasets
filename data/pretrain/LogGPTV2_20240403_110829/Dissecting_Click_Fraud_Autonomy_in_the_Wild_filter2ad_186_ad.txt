We first build a basic dataset with 20,000 top-rated apps and show
the detection results of ClickScanner below. We show more details
of the fraudulent apps we have detected in Appendix A.
5.2.1 The Collection of the Basic Dataset. The basic dataset
contains 20,000 apps, in which every 10,000 app is top-rated and
sorted by downloading numbers in each category from Google Play
and Huawei AppGallery updated in July 2020. We choose these apps
because, in app markets, the few most popular apps contribute to a
high majority of app downloads. Therefore, by analyzing the basic
dataset, we can focus on humanoid attack cases with the highest
influence [36]. Additionally, Google Play and Huawei AppGallery
are the biggest app markets in the U.S. and China respectively,
which ensure that our study is representative in scope. In this study,
if not otherwise specified, all analysis is done using the basic dataset.
5.2.2 The Humanoid Attack Cases Detected by ClickScanner. Af-
ter conducting analysis of 20,000 apps, ClickScanner identifies
170 suspicious click activities from 166 suspicious apps. Then, by
Figure 8: The performance of the VirusTotal in vetting fraud-
ulent apps identified by ClickScanner.
manually checking those apps’ decompiled codes, 74 humanoid
attack activities in 63 apps and 140 humanoid attack activities
in 94 apps from Google Play and Huawei AppGallery are found
respectively. The precision rate of 94.6% over 20,000 apps demon-
strates the effectiveness of our classifier and fine-tuned parameters.
As a consequence of over 1.2 billion downloads of such fraudulent
apps in the market, the humanoid attack is very likely to have
deceived both advertisers and users with fake ad clicks which cor-
responds advertisers huge losses. We attempted to perceive the
status quo (until March 29, 2021) of 63 fraudulent apps and 94 fraud-
ulent apps in the basic dataset we detected from Google Play
and Huawei, respectively. We found that 13 of 63 in Google and
26 of 94 in Huawei have been removed, but the remaining apps
are still publicly available. We are also in the process of liaising
with relevant app vendors for responsible disclosure. And Google
notified us that they have received our report.
To quantify the damage of humanoid attacks in the real world,
it is important to know the category distributions of identified ma-
licious apps. Thus, for each fraudulent app, we extract its category
(e.g., books, education, weather) labeled by app markets. And ana-
lyze the distribution of Apps affected by humanoid attacks and
show them in the Appendix B due to the page limitation.
5.2.3 Comparison with Existing Detection Engines. To compare
the performance between ClickScanner and existing click fraud
detection schemes, we use VirusTotal [46], a detection platform
that integrates 60 anti-malware engines including Kaspersky [24]
and McAfee [29], to double check the ad fraud apps identified by
ClickScanner. Note that, as mentioned in [35, 52], the performance
of VirusTotal is not stable due to its design flaw. Therefore, to elim-
inate the detection error of VirusTotal, we uploaded those apps
in July 2020 and January 2021 respectively to ensure the accuracy
of the detection results, and the results are the same for both app
sets. Although VirusTotal is not tailored for identifying humanoid
attacks, we use it as a baseline since it provides basic functionality
to spot some kinds of ad frauds as “adware”. The results of Virus-
Total and ClickScanner are shown in Fig. 8. It is observed that 58
and 57 apps in Google Play and Huawei AppGallery successfully
bypass all detection engines of VirusTotal, and only 5 apps can be
detected by more than 7 engines. These results demonstrate that
Session 1D: Authentication and Click Fraud CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea279unusual decrease after August 2020.4 We analyze the apps deploying
this SDK and find that 28 of the 39 apps have removed the SDK after
August 2020. Then, by searching the commit record of it on GitHub,
we also find that the humanoid attack code was removed after
the version published in November 2020. Inspired by a report from
Forbes News in August 2020 revealing a malicious ad SDK named
Mintegral [22], which was used by 1,200+ apps and was caught for
performing click frauds since July 2019, we conjecture that the app
developers may have noticed this issue and subsequently removed
the ad SDK from their apps, or Google enforced a new policy against
this SDK to disallow apps using it to be published in the Google
Play Store.
We also analyze the distribution of fraudulent SDKs of all 157
apps according to their categories. We show the detailed results
in Appendix C due to the page limitation, which shows that the
use of SDK to commit humanoid attack is not an isolated case
against a certain category of apps, but a common method deserving
attention.
5.4 Analysis on the Extensive Dataset
Extensive dataset. The aforementioned analysis is all based on the
basic dataset. To present a comprehensive overview of humanoid
attacks, we continue to randomly collect 100,000 apps from the
dataset published in [1], downloaded from Google Play updated on
January 1, 2021, which are not in the basic dataset.5
Measurement findings. From 100,000 randomly selected apps,
ClickScanner identifies 584 apps as fraudulent. Given that there
is no ground truth for the identification of click fraud in our ba-
sic dataset, each app must be inspected to confirm the existence
of click fraud. However, since inspecting more than 500 apps is
time-consuming, we instead choose to randomly sample 60 apps
(>10%) from the extensive dataset. After inspecting each app
and identifying the click fraud actions, we show 100% precision
over the randomly sampled dataset and this suggests the effective-
ness of ClickScanner. With more time and effort, manual check
of a sample size greater than 200 apps (>30%) would give a more
pronounced precision rate. In view of the current best effort in
manual verification, we highlight that currently there is no bench-
mark dataset publicly available for any accuracy-comparison of
humanoid attack identification approaches. Table 3 shows that
the proportion of SDK based cases among the extensive dataset
is only 15.3% which is much less than that in the basic dataset
(i.e., 83.4%). The possible reasons are as follows: 1) fraudulent SDKs
are more likely to infect popular apps to commit more humanoid
attacks; 2) developers of popular apps pay more attention to app
security compliance, and generally will not add fraudulent codes to
apps themselves. Therefore, we reveal that the humanoid attack
has different properties depending upon app popularity, which will
require different approaches for vetting.
5.5 Time Overhead
To evaluate the time overhead of ClickScanner, we first divide
120,000 apps from both the basic and extensive datasets into five
4We give more analysis of com.mo*** in Section 6.3.
5We did not collect apps from Huawei AppGalley since there are not as many apks
available as on Google Play.
Figure 9: The stacked line chart of the number of fraudulent
apps categorized by fraudulent SDKs from Google Play.
our ClickScanner outperforms existing detection engines in terms
of click fraud detection.
5.3 Humanoid Attacks in SDKs
By conducting a longitudinal study on the aforementioned detected
apps on Google Play.3 We note that fraudulent SDK injection has
played an increasingly important role in humanoid attacks. We
will elaborate upon the analysis below.
Fraudulent SDKs in Humanoid Attacks. For the 157 apps de-
5.3.1
tected by ClickScanner in basic dataset, we manually analyze
the reasons leading to humanoid attacks. It is observed that the
humanoid attack can be divided into non-SDK-based cases and
SDK-based cases. In the former, the attackers directly inject the
fraudulent click codes into the apps’ local codes. However, in the
latter case, the fake clicks are generated by the deployed third-
party ad SDKs. As shown in Table 3, 67% and 95.2% fraudulent apps
from Huawei AppGallery and Google Play belong to SDK-based
cases, meaning that SDK based attack is the dominant manner of
humanoid attacks in our dataset.
For the 63 fraudulent apps in Google Play, we collect all their ver-
sions published from August 2017 to December 2020 and determine
whether the attack is caused by the SDK. As shown in Fig. 9, it is
observed that the proportion of ad SDK-based attack (i.e., injecting
fraudulent codes into the third-party ad SDKs) has increased from
14% in June 2018 to 83% in August 2020, which means the SDK
based attack is now a dominant attack approach. Besides, the most
popular fraudulent SDKs in Google Play are com.mo***, com.ku***,
and com.ar***. We observe the open source code on the Github,
analyze the advertising SDK downloaded from official channels
and confirm that all 7 SDKs labeled by ClickScanner were created
fraudulently by SDK developers before publishing. The remaining
4 SDKs are not publicly available.
5.3.2 New Findings on SDK com.mo***. Another interesting finding
from Fig. 9 is that the attacks caused by SDK com.mo*** suffer an
3Since Huawei AppGallery does not provide download channels for historical versions,
we only studied those apps on Google Play, which were downloaded from apkpure [5].
Session 1D: Authentication and Click Fraud CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea280Table 3: Fraudulent app distribution by SDKs on Google Play
and Huawei AppGallery
App market
Total downloads
Huawei AppGallery
10,000
Google Play
Google Play
10,000
100,000
Detection result
SDK # of apps Ratio
67.0%
yes
33.0%
no
yes
95.2%
4.8%
no
15.3%
yes
no
84.7%
72
22
59
4
90
494
categories with the apk sizes of 0 ∼ 10 MB, 10 ∼ 50 MB, 50 ∼ 100
MB, 100 ∼ 200 MB and above 200 MB respectively. Then we record
the average running time of ClickScanner on each category. Note
that the timeout of ClickScanner is set to 300 seconds, and only
742 out of 120,000 apps (0.62%) do not terminate within 300 seconds.
We further compare the time overhead of ClickScanner with
other previous tools (e.g., FraudDetective [20], FraudDroid [14],
MAdFraud [11], DECAF [28], AdSherlock [8], and Clicktok [32]).
Table 4 lists the average time overhead of ClickScanner and other
tools.
FraudDetective tests each app for five minutes. FraudDroid takes
at most 216 seconds to analyze an app. MAdFraud needs 120 seconds
to run on average. The mean and median time for analyzing an app
using DECAF is 11.8 minutes and 11.25 minutes respectively. Ad-
Sherlock executes each app in one emulator instance twice, which
costs 10 minutes to extract ad fraud traffic patterns offline. Clicktok
does not list its runtime performance but it also needs to execute
each app for a chosen duration of time to interact with apps us-
ing the Monkeyrunner tool [18]. It is observed that the average
ClickScanner time cost for detecting humanoid attacks is about
18.4 seconds per app.
It is worth noting that even in the best case (i.e., 120 seconds
in MAdFraud), the time overhead is nearly 6.5 times as much as
ClickScanner. These results demonstrate that ClickScanner sig-
nificantly outperforms existing tools in terms of the time overhead
and that it is practical to deploy ClickScanner in the real world.
Additionally, it is observed that when changing apk size, the detec-
tion time correlated to apk size is relatively stable.
6 CASE STUDY
In this section, we closely analyze the fraud apps discovered by
ClickScanner. We present four representative humanoid attack
cases and explain newly obtained insights into how attackers com-
mit mobile click fraud.
6.1 Case 1. Humanoid Attacks after User’s
Legitimate Actions
To fool the traditional detectors, some humanoid attacks will fol-
low the user’s legitimate actions. For instance, one fraudulent app,
named com.co****.***********, is a communication and social app
Figure 10: The code snippet from case 1 in the case study. The
timing patterns of click fraud vary according to user actions.
with a total of over 570 million downloads across all app markets
searched on [23] and ClickScanner successfully reveals its pro-
cess of generating humanoid attacks in Fig. 10. It first displays
the advertisement to the users, and when the users click on the
advertisement, it generates a set of random numbers in the trigger
condition of fake clicks so that the humanoid attack is triggered
randomly. The same method is also used in the method of randomly
generating click coordinates for humanoid attacks. The potential
threats with this app are as follows. (𝑖) Click frauds as such are
difficult to detect with traditional detection methods, because their
traffic patterns and click patterns vary with different users and
are highly similar to real human clicks. Therefore, the traditional
method of identifying click fraud that relies on the difference be-
tween patterns of click fraud and normal clicks is ineffective. (𝑖𝑖)
Attackers will even defraud advertisers for more advertising costs
on the grounds that a considerable part of their users are interested
in the advertisements they distribute and click twice. (𝑖𝑖𝑖) We also
find that the app is not alone in implementing fraudulent behaviors.
Four other apps produced by the same company are manifested
to have similar click fraud codes. Their total downloads reached
over 658M across all app markets, therefore they have caused huge
losses for advertisers.
6.2 Case 2. Humanoid Attack that Can
Adaptively Avoid Detection
Some apps predefine fake click’s execution logic in their code and
receive the click’s configuration from remote servers, which can be
changed at any time according to the situation. The occurrence of
fake clicks will be adaptively controlled locally to avoid detection.
As shown in Fig. 11, com.m*.****.**** is a photography app with
over 9.5 billion downloads in all app markets searched on [23] and
over 50 million installations since the time it was made available in
Google Play. ClickScanner has uncovered it conducting humanoid
attacks against ad agencies. It first loads a configuration URL start-
ing with "https://l**.u****.com:8***/l**/s?" and parses out data such
as "ctr", "cvr", "max_clk" and "max_imp" in the returned JSON data
structure as fake click configuration. Then it will count every time
a fake click is triggered. When the number of fake clicks is greater
than the value of the maximum number of clicks (max_clk) sent by
the remote server, it will stop conducting the humanoid attack.
If the number of fake clicks is smaller than "max_clk", it will get
the click properties, such as duration, action (up or down), and
 private static void performRandomClick(View AdWebView, ...) {   ……    1.float randWidth = new Random.nextFloat() * AdWebView.getWidth(); 2.float randHeight= new Random.nextFloat() * AdWebView.getHeight(); 3.MotionEvent v9 = MotionEvent.obtain(..., randx, randy,...);4.AdWebView.dispatchTouchEvent(v9);  ……    }static final void onClick(AdWebView){ …… 1.    if(randNum > 0f && randNum > new Random().nextFloat()) {2.        performRandomClick(AdWebView,...); } ……}Generate fake click with random axis values after meeting the random condition Session 1D: Authentication and Click Fraud CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea281Table 4: Runtime overheads evaluation of ClickScanner with other tools.
Tools
FraudDetective [20]
FraudDroid [14] MAdFraud [11] DECAF [28] AdSherlock [8]
avg_time(s)
300
216
120
675
600
0-20(MB)
16.37
20-50(MB)
20.82
ClickScanner
50-100(MB)
100-200(MB)
16.11
16.79
200+(MB)