[]{#getting-started-with-nftables_configuring-and-managing-networking.html#idm140431055310304}
**例 47.3. 包含目录中的所有 \*.nft 文件**
::: example-contents
包含以 `*.nft`{.literal} 结尾的、存储在
`/etc/nftables/rulesets/`{.literal} 目录中的文件：
``` literallayout
include "/etc/nftables/rulesets/*.nft"
```
请注意 `include`{.literal} 语句不匹配与以点开头的文件。
:::
:::
::: itemizedlist
**其它资源**
-   详情请查看 `Include files`{.literal} man page 中的
    `nft(8)`{.literal} 部分。
:::
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_configuring-and-managing-networking.html#automatically-loading-nftables-rules-when-the-system-boots_writing-and-executing-nftables-scripts}系统引导时自动载入 nftables 规则 {.title}
:::
`nftables`{.literal} systemd 服务加载包括在
`/etc/sysconfig/nftables.conf`{.literal}
文件中的防火墙脚本。这部分论述了如何在系统引导时载入防火墙规则。
::: itemizedlist
**先决条件**
-   `nftables`{.literal} 脚本存储在 `/etc/nftables/`{.literal} 目录中。
:::
::: orderedlist
**流程**
1.  编辑 `/etc/sysconfig/nftables.conf`{.literal} 文件。
    ::: itemizedlist
    -   如果您在安装 `nftables`{.literal} 软件包时增强了
        `/etc/nftables/`{.literal} 中创建的 `*.nft`{.literal}
        脚本，请取消对这些脚本的 `include`{.literal} 状态的注释。
    -   如果您从头编写脚本，添加 `include`{.literal}
        语句来包括这些脚本。例如，要在 `nftables`{.literal}
        服务启动时载入 `/etc/nftables/example.nft`{.literal}
        脚本，请添加：
        ``` literallayout
        include "/etc/nftables/example.nft"
        ```
    :::
2.  （可选）启动 `nftables`{.literal}
    服务在不重启系统的情况下加载防火墙规则：
    ``` literallayout
    # systemctl start nftables
    ```
3.  启用 `nftables`{.literal} 服务。
    ``` literallayout
    # systemctl enable nftables
    ```
:::
::: itemizedlist
**其它资源**
-   如需更多信息，请参阅 [支持的 nftables
    脚本格式](#getting-started-with-nftables_configuring-and-managing-networking.html#supported-nftables-script-formats_writing-and-executing-nftables-scripts "支持的 nftables 脚本格式"){.link}
:::
:::
:::
::: section
::: titlepage
# []{#getting-started-with-nftables_configuring-and-managing-networking.html#assembly_creating-and-managing-nftables-tables-chains-and-rules_getting-started-with-nftables}创建和管理 nftables 表、链和规则 {.title}
:::
本节介绍如何显示 `nftables`{.literal} 规则集以及如何管理它们。
::: section
::: titlepage
## []{#getting-started-with-nftables_configuring-and-managing-networking.html#standard-chain-priority-values-and-textual-names_assembly_creating-and-managing-nftables-tables-chains-and-rules}标准链优先级值和文本名称 {.title}
:::
当您创建一个链时，`priority`{.literal}
可以设置整数值或标准名称，用于指定具有相同 `hook`{.literal} 值链的顺序。
名称和值根据 `xtables`{.literal} 在注册其默认链时使用的优先级定义。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
`nft list chains`{.literal} 命令默认显示文本优先级值。您可以通过将
`-y`{.literal} 选项传递给命令来查看数字值。
:::
::: example
[]{#getting-started-with-nftables_configuring-and-managing-networking.html#idm140431055258800}
**例 47.4. 使用文本值设定优先级**
::: example-contents
以下命令使用标准优先级值 `50`{.literal}，在 `example_table`{.literal}
中创建一个名为 `example_chain`{.literal} 的链：
`# nft add chain inet example_table example_chain { type filter hook input priority 50 \; policy accept \; }`{.literal}
因为优先级是一个标准值，所以您可以使用文本值：
`# nft add chain inet example_table example_chain { type filter hook input priority security \; policy accept \; }`{.literal}
:::
:::
::: table
[]{#getting-started-with-nftables_configuring-and-managing-networking.html#idm140431055246912}
**表 47.1. 标准优先级名称、系列和 hook 兼容性列表**
::: table-contents
  名称                   值     系列                                                                                     Hook
  ---------------------- ------ ---------------------------------------------------------------------------------------- -------------
  `raw`{.literal}        -300   `ip`{.literal}, `ip6`{.literal}, `inet`{.literal}                                        all
  `mangle`{.literal}     -150   `ip`{.literal}, `ip6`{.literal}, `inet`{.literal}                                        all
  `dstnat`{.literal}     -100   `ip`{.literal}, `ip6`{.literal}, `inet`{.literal}                                        prerouting
  `filter`{.literal}     0      `ip`{.literal}, `ip6`{.literal}, `inet`{.literal}, `arp`{.literal}, `netdev`{.literal}   all
  `security`{.literal}   50     `ip`{.literal}, `ip6`{.literal}, `inet`{.literal}                                        all
  `srcnat`{.literal}     100    `ip`{.literal}, `ip6`{.literal}, `inet`{.literal}                                        postrouting
:::
:::
所有家族都使用相同的值，但 `bridge`{.literal} 家族使用以下值：
::: table
[]{#getting-started-with-nftables_configuring-and-managing-networking.html#idm140431055172400}
**表 47.2. 网桥系列的标准优先级名称和 hook 兼容性**
::: table-contents
  名称                 值     Hook
  -------------------- ------ -------------
  `dstnat`{.literal}   -300   prerouting
  `filter`{.literal}   -200   all
  `out`{.literal}      100    output
  `srcnat`{.literal}   300    postrouting
:::
:::
::: itemizedlist
**其它资源**
-   有关您可以在链中运行的其他操作的详情，请查看 `nft(8)`{.literal} man
    page 中的 `Chains`{.literal} 部分。
:::
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_configuring-and-managing-networking.html#displaying-the-nftables-rule-set_assembly_creating-and-managing-nftables-tables-chains-and-rules}显示 nftables 规则集 {.title}
:::
`nftables`{.literal} 的规则集包含表、链和规则。本节介绍如何显示规则集。
::: itemizedlist
**流程**
-   要显示规则集，请输入：
    ``` literallayout
    # nft list ruleset
    table inet example_table {
      chain example_chain {
        type filter hook input priority filter; policy accept;
        tcp dport http accept
        tcp dport ssh accept
      }
    }
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    默认情况下，`nftables`{.literal}
    不预先创建表。因此，在没有表的情况下显示主机上设置的规则，`nft list ruleset`{.literal}
    命令不会显示输出。
    :::
:::
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_configuring-and-managing-networking.html#creating-an-nftables-table_assembly_creating-and-managing-nftables-tables-chains-and-rules}创建 nftables 表 {.title}
:::
`nftables`{.literal}
中的表是包含链、规则、集合和其他对象集合的名称空间。本节介绍如何创建表。
每个表都必须定义一个地址系列。表的地址系列定义了表进程的类型。在创建表时，您可以设置以下地址系列之一：
::: itemizedlist
-   `ip`{.literal}：仅匹配 IPv4
    数据包。如果没有指定地址系列，这是默认设置。
-   `ip6`{.literal}：只匹配 IPv6 数据包。
-   `inet`{.literal}：匹配 IPv4 和 IPv6 数据包。
-   `arp`{.literal}：匹配 IPv4 地址解析协议（ARP）数据包。
-   `bridge`{.literal}：与绕过桥接设备的数据包匹配。
-   `netdev`{.literal}：与来自 ingress 的数据包匹配。
:::
::: orderedlist
**流程**
1.  使用 `nft add table`{.literal} 命令创建新表格。例如，要创建一个名为
    `example_table`{.literal} 的表，用于处理 IPv4 和 IPv6 数据包：
    ``` literallayout
    # nft add table inet example_table
    ```
2.  另外，还可列出规则集中的所有表：
    ``` literallayout
    # nft list tables
    table inet example_table
    ```
:::
::: itemizedlist
**其它资源**
-   有关地址系列的详情，请查看 `Address families`{.literal} man page
    中的 `nft(8)`{.literal} 部分。
-   有关您可以在表中运行的其他操作的详情，请查看 `nft(8)`{.literal} man
    page 中的 `Tables`{.literal} 部分。
:::
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_configuring-and-managing-networking.html#creating-an-nftables-chain_assembly_creating-and-managing-nftables-tables-chains-and-rules}创建 nftables 链 {.title}
:::
chains 是规则的容器。存在以下两种规则类型：
::: itemizedlist
-   基本链：您可以使用基础链作为来自网络堆栈的数据包的入口点。
-   常规链：您可以使用常规链作为 `jump`{.literal}
    目标，并更好地组织规则。
:::
这个步骤描述了如何在现有表中添加基本链。
::: itemizedlist
**先决条件**
-   已存在您要添加新链的表。
:::
::: orderedlist
**流程**
1.  使用 `nft add chain`{.literal} 命令创建新链。例如，要在
    `example_table`{.literal} 中创建一个名为 `example_chain`{.literal}
    的链：
    ``` literallayout
    # nft add chain inet example_table example_chain { type filter hook input priority 0 \; policy accept \; }
    ```
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    为了避免 shell 将分号解析为命令结尾，请在分号前加上 `\`{.literal}
    转义字符。
    :::
    这个链过滤传入的数据包。`priority`{.literal} 参数指定
    `nftables`{.literal} 进程使用相同 hook
    值链的顺序。较低优先级的值优先于优先级更高的值。`policy`{.literal}
    参数为这个链中规则设置默认操作。请注意，如果您远程登录到服务器，并且将默认策略设置为
    `drop`{.literal}，如果没有其他规则允许远程访问，则可以立即断开连接。
2.  另外，还可以显示所有链：
    ``` literallayout
    # nft list chains
    table inet example_table {
      chain example_chain {
        type filter hook input priority filter; policy accept;
      }
    }
    ```
:::
::: itemizedlist
**其它资源**
-   有关地址系列的详情，请查看 `Address families`{.literal} man page
    中的 `nft(8)`{.literal} 部分。
-   有关您可以在链中运行的其他操作的详情，请查看 `nft(8)`{.literal} man
    page 中的 `Chains`{.literal} 部分。
:::
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_configuring-and-managing-networking.html#appending-a-rule-to-the-end-of-an-nftables-chain_assembly_creating-and-managing-nftables-tables-chains-and-rules}在 nftables 链末尾附加规则 {.title}
:::
本节解释了如何在现有 `nftables`{.literal} 链末尾附加规则。
::: itemizedlist
**先决条件**
-   您要添加该规则的链已存在。
:::
::: orderedlist
**流程**
1.  要添加新规则，使用 `nft add rule`{.literal} 命令。例如，在
    `example_table`{.literal} 的 `example_chain`{.literal}
    中添加一条规则来允许端口 22 上的 TCP 流量：
    ``` literallayout
    # nft add rule inet example_table example_chain tcp dport 22 accept
    ```
    您可以选择指定服务名称而不是端口号。在这个示例中，您可以使用
    `ssh`{.literal} 而不是端口号 `22`{.literal}。请注意，服务名称根据在
    `/etc/services`{.literal} 文件中的条目解析为端口号。
2.  另外，还可在 `example_table`{.literal} 中显示所有链及其规则：
    ``` literallayout
    # nft list table inet example_table
    table inet example_table {