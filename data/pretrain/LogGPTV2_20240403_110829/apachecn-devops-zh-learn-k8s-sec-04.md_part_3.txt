### 安全上下文
安全上下文提供了一种方式来定义关于访问系统资源的 Pod 和容器的权限和访问控制设置。在 Kubernetes 中，pod 级别的安全上下文不同于容器级别的安全上下文，尽管两个级别都可以配置一些重叠的属性。一般来说，安全上下文提供了以下功能，允许您对容器和容器应用最小权限原则:
*   **自主访问控制(DAC)** :这里是配置哪个**用户 ID** ( **UID** )或者**组 ID** ( **GID** )绑定到容器中的进程，容器的根文件系统是否为只读等等。强烈建议不要以根用户身份( *UID = 0* )在容器中运行您的微服务。其安全含义是，如果存在漏洞并且容器逃到主机，攻击者会立即获得主机上的根用户权限。
*   **安全增强 Linux (SELinux):** 这是为了配置 SELinux 安全上下文，为 pods 或容器定义级别标签、角色标签、类型标签和用户标签。分配 SELinux 标签后，pod 和容器可能会在访问资源方面受到限制，尤其是节点上的卷。
*   **权限模式:**这是为了配置容器是否在权限模式下运行。在权限容器内部运行的进程的能力与节点上的根用户基本相同。
*   **Linux 功能:**这是为容器配置 Linux 功能。不同的 Linux 功能允许容器内的进程在节点上执行不同的活动或访问不同的资源。例如，`CAP_AUDIT_WRITE`允许进程写入内核审计日志，而`CAP_SYS_ADMIN`允许进程执行一系列管理操作。
*   **apparemor:**这是为了配置 Pod 或容器的 apparemor 配置文件。AppArmor 概要文件通常定义进程拥有哪些 Linux 功能，容器可以访问哪些网络资源和文件，等等。
*   **安全计算模式(seccomp):** 这是为 Pod 或容器配置 seccomp 配置文件。seccomp 配置文件通常定义允许执行的系统调用的白名单和/或阻止在 pod 或容器内执行的系统调用的黑名单。
*   **允许权限升级:**这是为了配置一个进程是否可以获得比其父进程更多的权限。请注意，当容器以权限运行或具有`CAP_SYS_ADMIN`功能时，`AllowPrivilegeEscalation`始终为真。
我们将在 [*第 8 章*](08.html#_idTextAnchor249)*保护 Pod *中更多地讨论安全上下文。
### 公共安全政策
PodSecurityPolicy 是一个 Kubernetes 集群级资源，它控制 pod 规范中与安全性相关的属性。它定义了一套规则。当要在 Kubernetes 集群中创建 pods 时，pods 需要遵守 PodSecurityPolicy 中定义的规则，否则它们将无法启动。政策控制或应用以下属性:
*   允许运行权限容器
*   允许使用主机级命名空间
*   允许使用主机端口
*   允许使用不同类型的卷
*   允许访问主机的文件系统
*   需要为容器运行只读根文件系统
*   限制容器的用户标识和组标识
*   限制容器的权限升级
*   限制容器的 Linux 功能
*   需要使用 SELinux 安全上下文
*   将 seccomp 和 AppArmor 配置文件应用于 Pod 
*   限制 pod 可以运行的系统
*   允许使用`proc`安装类型
*   将 FSGroup 限制为卷
我们将在 [*第 8 章*](08.html#_idTextAnchor249)*中介绍更多关于 PodSecurityPolicy 的内容，以保护 Kubernetes Pods* 。PodSecurityPolicy 控件基本上是作为准入控制器实现的。您也可以创建自己的准入控制器，为您的工作负载应用自己的授权策略。**开放策略代理** ( **OPA** )是针对某个工作负载实现自己的最低权限策略的另一个好人选。我们将在 [*第 7 章*](07.html#_idTextAnchor186)*认证、授权和准入控制*中更多地了解 OPA。
现在，让我们看看 Kubernetes 中的资源限制控制机制，因为您可能不希望您的微服务饱和系统中的所有资源，如**中央处理器** ( **中央处理器**)和内存。
### 资源限制控制
默认情况下，单个容器可以使用与节点一样多的内存和 CPU 资源。运行加密挖掘二进制文件的容器可能会很容易消耗由其他荚共享的节点上的 CPU 资源。为工作负载设置资源请求和限制总是一种好的做法。资源请求会影响调度程序将 pods 分配给哪个节点，而资源限制会设置终止容器的条件。将更多的资源请求和工作负载限制分配给以避免驱逐或终止总是安全的。但是，请记住，如果您将资源请求或限制设置得太高，将会导致集群上的资源浪费，并且分配给工作负载的资源可能不会得到充分利用。我们将在 [*第 10 章*](10.html#_idTextAnchor305) 、*实时监控和 Kubernetes 集群的资源管理*中详细介绍这个顶级 ic。
## 总结访问系统资源的最小权限
当 pods 或容器以权限模式运行时，与非权限 pods 或容器不同，它们在节点上具有与管理员用户相同的权限。如果您的工作负载以权限模式运行，为什么会出现这种情况？当 pod 能够评估主机级名称空间时，pod 可以访问主机级的网络栈、进程和**进程间通信** ( **IPC** )等资源。但是，您真的需要授予主机级别的名称空间访问权限或者为您的 pods 或容器设置权限模式吗？此外，如果您知道容器中的进程需要哪些 Linux 功能，您最好删除那些不必要的功能。有多少内存和中央处理器足以让您的工作负载充分发挥作用？请仔细考虑这些问题，以便为您的 Kubernetes 工作负载实现最小权限原则。正确设置资源请求和限制，为您的工作负载使用安全上下文，并为您的集群实施 PodSecurityPolicy。所有这些都将帮助 ens 为您的工作负载确保访问系统资源的最低权限。
## 访问网络资源的最低权限
默认情况下，同一 Kubernetes 集群内的任意两个 pod 可以相互通信，如果 Kubernetes 集群外没有配置代理规则或防火墙规则，一个 pod 可能能够与互联网通信。Kubernetes 的开放性模糊了微服务的安全边界，我们不能忽视网络资源，比如容器或 pod 可以访问的其他微服务提供的 API 端点。
假设您在命名空间 X 中的一个工作负载(pod X)只需要访问命名空间 NS1 中的另一个微服务 A；同时，名称空间 NS2 中还有微服务 B。微服务 A 和微服务 B 都公开了它们的**表征状态转移** ( **REST** ful)端点。默认情况下，您的工作负载可以同时访问微服务 A 和 B，假设在微服务级别既没有身份验证也没有授权，并且在名称空间 NS1 和 NS2 中也没有实施网络策略。请看下面的图，说明了这一点:
![Figure 4.1 – Network access without network policy ](img/B15566_04_001.jpg)
图 4.1–无网络策略的网络访问
在上图中， **Pod X** 能够访问两个微服务，尽管它们位于不同的名称空间中。还要注意的是， **Pod X** 只需要访问名称空间 **NS1** 中的**微服务 A** 。那么，我们能做些什么来限制 **Pod X 对**微服务 A** 的**访问，仅仅是出于最低权限的目的吗？是的:Kubernetes 网络政策会有所帮助。我们将更详细地介绍网络策略 [*第 5 章*](05.html#_idTextAnchor144)*配置 Kubernetes 安全边界*。一般来说，Kubernetes 网络策略定义了允许一组 pods 相互通信以及与其他网络端点通信的规则。您可以为工作负载定义入口规则和出口规则。
注意
入口规则:定义在网络策略的保护下允许哪些源与 Pod 通信的规则。
出口规则:定义在网络策略的保护下允许哪些目的地与 Pod 通信的规则。
在下面的例子中，为了在 **Pod X** 中实现最小权限的原则，您将需要在**命名空间 X** 中定义一个网络策略，该策略带有一个出口规则，指定只允许**微服务 A** :
![Figure 4.2 – Network policy blocks access to microservice B ](img/B15566_04_002.jpg)
图 4.2–网络策略阻止对微服务 B 的访问
在上图中，**命名空间 X** 中的网络策略阻止了从 **Pod X** 到**微服务 B** 的任何请求， **Pod X** 仍然可以访问**微服务 A** ，这是意料之中的。在您的网络策略中定义出口规则将有助于确保您的工作负载访问网络资源的最低权限。最后但同样重要的是，我们仍然需要从最低权限的角度将您的 at 关注提升到应用资源级别。
## 访问应用资源的最低权限
虽然这个话题属于应用安全的范畴，但这里值得一提。如果您的工作负载访问的应用支持具有不同权限级别的多个用户，最好检查代表您的工作负载授予用户的权限是否必要。例如，负责审核的用户不需要任何写权限。应用开发人员在设计应用时应该记住这一点。这有助于确保您的工作负载以最少的权限访问应用资源。
# 总结
在这一章中，我们讨论了最小权限的概念。然后，我们讨论了 Kubernetes 中的安全控制机制，它有助于在两个方面实现最小权限原则:Kubernetes 主题和 Kubernetes 工作负载。值得强调的是，从整体上落实最小权限原则的重要性。如果在任何区域错过了最小权限，这将有可能使攻击面大开。
Kubernetes 提供内置的安全控制来实现最小权限原则。请注意，这是一个从开发到部署的过程:应用开发人员应该与安全架构师合作，为与应用相关联的服务帐户设计最低权限，以及最低功能和适当的资源分配。在部署过程中，开发运维人员应该考虑使用 PodSecurityPolicy 和网络策略在整个集群中实施最低权限。
在下一章中，我们将从不同的角度来看待 Kubernetes 的安全性:了解不同类型资源的安全边界，以及如何加固它们。
# 问题
1.  什么是 Kubernetes 中的角色对象？
2.  Kubernetes 中的 RoleBinding 对象是什么？
3.  角色绑定和集群角色绑定对象有什么区别？
4.  默认情况下，pod 不能访问主机级命名空间。列举一些允许 pods 访问主机级命名空间的设置。
5.  如果您想限制 pod 对外部网络资源(例如，内部网络或互联网)的访问，您能做什么？
# 进一步阅读
大家可能已经注意到，我们在本章中谈到的一些安全控制机制已经存在很长时间了:SELinux **多类别安全/多级别安全** ( **MCS/MLS** )、AppArmor、seccomp、Linux 功能等等。已经有很多介绍这些技术的书籍或文章了。我鼓励您看一看以下材料，以便更好地理解如何使用它们来实现 Kubernetes 中的最低权限目标:
*   SELinux MCS:[https://access . red hat . com/documentation/en-us/red _ hat _ enterprise _ Linux/5/html/deployment _ guide/sec-MCS-getstarted](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/5/html/deployment_guide/sec-mcs-getstarted)
*   设备:[https://ubuntu.com/server/docs/security-apparmor](https://ubuntu.com/server/docs/security-apparmor)
*   Linux 功能:[http://man7.org/linux/man-pages/man7/capabilities.7.html](http://man7.org/linux/man-pages/man7/capabilities.7.html)
*   帮助定义 RBAC 权限授予:[https://github.com/liggitt/audit2rbac](https://github.com/liggitt/audit2rbac)