This string is placed into the MIB II sysLocation object.
4. Specify an administrative contact for the SNMP system.
[edit snmp]
user@switch# set contact “qfabric-admin@qfabric0”
This name is placed into the MIB II sysContact object.
5. Specify a unique SNMP community name and the read-only authorization level.
NOTE: The read-write option is not supported on the QFabric system.
[edit snmp]
user@switch# set community public authorization read-only
6. Create a client list with a set of IP addresses that can use the SNMP community.
[edit snmp]
user@switch# set client-list list0 192.168.0.0/24
user@switch# set community public client-list-name list0
7. Specify IP addresses of clients that are restricted from using the community.
[edit snmp]
user@switch# set community public clients 198.51.100.0/24 restrict
8. Configure a trap group, destination port, and a target to receive the SNMP traps in the trap group.
[edit snmp]
user@switch# set trap-group “qf-traps” destination-port 155 targets 192.168.0.100
398
NOTE: You do not need to include the destination-port statement if you use the default port
162.
The trap group qf-traps is configured to send traps to 192.168.0.100.
Results
From configuration mode, confirm your configuration by entering the show command. If the output does
not display the intended configuration, repeat the instructions in this example to correct the
configuration.
[edit]
user@switch# show
snmp {
name "snmp qfabric";
description "qfabric0 system";
location "Lab 4 Row 11";
contact "qfabric-admin@qfabric0";
client-list list0 {
192.168.0.0/24;
}
community public {
authorization read-only;
clients {
198.51.100.0/24 restrict;
}
}
trap-group qf-traps {
destination-port 155;
targets {
192.168.0.100;
}
}
}
If you are done configuring the device, enter commit from configuration mode.
399
SEE ALSO
Understanding the Implementation of SNMP on the QFabric System
snmp
Configure Options on Managed Devices for Better
SNMP Response Time
IN THIS SECTION
Enable the stats-cache-lifetime Option | 399
Filter Out Duplicate SNMP Requests | 400
Exclude Interfaces That Are Slow in Responding to SNMP Queries | 400
The following sections contain information about configuration options on the managed devices that
can enhance SNMP performance:
Enable the stats-cache-lifetime Option
Junos OS provides you with an option to configure the length of time (in seconds) the interface stats are
cached. If the NMS queries again for the same interface within the cache time, the same data is
returned. If the NMS queries after the cache time, the cache is no longer valid, fresh data is fetched from
the lower layers, and the cache timestamp is updated. The default stats-cache-lifetime is 5 seconds. This
can be tuned as per the polling frequency.
NOTE: Reducing the value of the stats-cache-lifetime option results in more queries and can
impact performance. To get the live uncached statistics, set the value of the stats-cache-lifetime
option to 0. However, this is not recommended since it completely disables the caching feature
and impacts performance.
400
Filter Out Duplicate SNMP Requests
If a network management station retransmits a Get, GetNext, or GetBulk SNMP request too frequently to a
device, that request might interfere with the processing of previous requests and slow down the
response time of the agent. Filtering these duplicate requests improves the response time of the SNMP
agent. The Junos OS enables you to filter out duplicate Get, GetNext, and GetBulk SNMP requests. The
Junos OS uses the following information to determine if an SNMP request is a duplicate:
• Source IP address of the SNMP request
• Source UDP port of the SNMP request
• Request ID of the SNMP request
NOTE: By default, filtering of duplicate SNMP requests is disabled on devices running the Junos
OS.
To enable filtering of duplicate SNMP requests on devices running the Junos OS, include the filter-
duplicates statement at the [edit snmp] hierarchy level:
[edit snmp]
filter-duplicates;
Exclude Interfaces That Are Slow in Responding to SNMP Queries
An interface that is slow in responding to SNMP requests for interface statistics can delay the kernel
responses to SNMP requests. You can review the mib2d log file to find out how long the kernel takes to
respond to various SNMP requests. For more information about reviewing the log file for the kernel
response data, see “Checking Kernel and Packet Forwarding Engine Response” under "Monitoring SNMP
Activity and Tracking Problems That Affect SNMP Performance on a Device Running Junos OS" on page
514.
If you notice that a particular interface is slow in responding and think that it is slowing down the kernel
from responding to SNMP requests, exclude that interface from the SNMP queries to the device. You
can exclude an interface from the SNMP queries either by configuring the filter-interface statement or
by modifying the SNMP view settings.
401
The following example shows a sample configuration for excluding interfaces from the SNMP Get, GetNext,
and Set operations:
[edit]
snmp {
filter-interfaces {
interfaces { # exclude the specified interfaces
interface1;
interface2;
}
all-internal-interfaces; # exclude all internal interfaces
}
}
The following example shows the SNMP view configuration for excluding the interface with an interface
index (ifIndex) value of 312 from a request for information related to the ifTable and ifXtable objects:
[edit snmp]
view test {
oid .1 include;
oid ifTable.1.*.312 exclude;
oid ifXTable.1.*.312 exclude
}
Alternatively, you can take the interface that is slow in responding offline.
RELATED DOCUMENTATION
Understand SNMP Implementation in Junos OS | 371
Monitor SNMP Activity and Track Problems That Affect SNMP Performance on a Device Running
Junos OS | 514
No Link Title
No Link Title
402
Enterprise Specific Utility MIB to Enhance SNMP
Coverage
IN THIS SECTION
Utility MIB | 402
Utility MIB
IN THIS SECTION
Use the Enterprise-Specific Utility MIB to Enhance SNMP Coverage | 403
The Juniper Networks enterprise-specific Utility MIB, whose object ID is {jnxUtilMibRoot 1}, defines
objects for counters, integers, and strings. The Utility MIB contains one table for each of the following
five data types:
• 32-bit counters
• 64-bit counters
• Signed integers
• Unsigned integers
• Octet strings
You can use these containers MIB objects to store the data that are not supported for SNMP operations.
You can populate data for these objects either by using CLI commands or with the help of Op scripts
and an RPC API that can invoke the CLI commands.
403
Each data type has an arbitrary ASCII name, which is defined when the data is populated, and a
timestamp that shows the last time when the data instance was modified. For a downloadable version of
this MIB, see Routing Policies, Firewall Filters, and Traffic Policers User Guide.
For information about the enterprise-specific Utility MIB objects, see the following topics:
• jnxUtilCounter32Table
• jnxUtilCounter64Table
• jnxUtilIntegerTable
• jnxUtilUintTable
• jnxUtilStringTable
Use the Enterprise-Specific Utility MIB to Enhance SNMP Coverage
You might need to have customized performance metrics even though the Junos OS has built-in
performance metrics and monitoring options. To make it easier for you to monitor such customized data
through a standard monitoring system, the Junos OS provides you with an enterprise-specific Utility
MIB that can store such data and thus extend SNMP support for managing and monitoring the data of
your choice.
The following CLI commands enable you to set and clear Utility MIB object values:
• request snmp utility-mib set instance name object-type  object-value value
• request snmp utility-mib clear instance name object-type 
The instance name option of the request snmp utility-mib  command specifies the name of the
data instance and is the main identifier of the data. The object-type  option enables you to specify the object type, and the object-value value option enables
you to set the value of the object.
To automate the process of populating Utility MIB data, you can use a combination of an event policy
and event script. The following examples show the configuration for an event policy to run show system
buffers every hour and to store the show system buffers data in Utility MIB objects by running an event
script (check-mbufs.slax).
Event Policy Configuration
404
To configure an event policy that runs the show system buffers command every hour and invokes check-
mbufs.slax to store the show system buffers data into Utility MIB objects, include the following statements
at the [edit] hierarchy level:
event-options {
generate-event {
1-HOUR time-interval 3600;
}
policy MBUFS {
events 1-HOUR;
then {
event-script check-mbufs.slax; # script stored at /var/db/scripts/event/
}
}
event-script {
file check-mbufs.slax;
}
}
check-mbufs.slax Script
The following example shows the check-mbufs.slax script that is stored under /var/db/scripts/event/:
------ script START ------
version 1.0;
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns ext = "http://xmlsoft.org/XSLT/namespace";
match / {
{
var $result = jcs:invoke("get-buffer-informations");
var $rpc =  {
 "integer";
 "current-mbufs";
 $result/current-mbufs;
}
405
var $res = jcs:invoke($rpc);
expr jcs:syslog("external.info", $res/..//snmp-utility-mib-results/snmp-utility-mib-
result);
}
}
------ script END ------
You can run the following command to check the data stored in the Utility MIB as a result of the event
policy and script shown in the preceding examples:
user@host> show snmp mib walk jnxUtilData ascii jnxUtilIntegerValue."current-mbufs" = 0
jnxUtilIntegerTime."current-mbufs" = 07 da 05 0c 03 14 2c 00 2d 07 00 user@caramels>
NOTE: The show snmp mib walk command is not available on the QFabric system, but you can use
external SNMP client applications to perform this operation.
SEE ALSO
Enterprise-Specific SNMP MIBs Supported by Junos OS
Standard SNMP MIBs Supported by Junos OS
Understanding the Implementation of SNMP on the QFabric System
Optimize the Network Management System
Configuration for the Best Results
You can modify your network management system configuration to optimize the response time for
SNMP queries. You can configure the network management system by following the below tips:
• Change the Polling Method from Column-by-Column to Row-by-Row
You can configure the network management system to use the row-by-row method for SNMP data
polling. It is evident that row-by-row and multiple row-by-multiple-row polling methods are more
efficient than column-by-column polling.
406
By configuring the network management system to use the row-by-row data polling method, you
can:
• Poll the data for only one interface in a request instead of a single request polling data for
multiple interfaces as in the case with column-by-column polling.
• Reduces the risk of requests timing out.
• Reduce the Number of Variable Bindings per PDU
You can improve the response time for SNMP requests by reducing the number of variable bindings
per protocol data unit (PDU). A request that polls for data related to multiple objects mapped to
different index entries, translate into multiple requests at the device end. This is because the
subagent might have to poll different modules to obtain data linked to different index entries.
The recommended method is to ensure that a request has only objects linked to one index entry
instead of multiple objects linked to different index entries.
NOTE: If responses from a device are slow, avoid using the GetBulk option for the device,
because a GetBulk request might contain objects that are linked to various index entries and
might further increase the response time.
• snmp bulk-get recommended number of OIDs and max-repetitions
An SNMP bulk-get request responds with a total of (max-repetitions * number-of-OIDs) variable
bindings. When interface statistics objects (such as ifInOctets, ifOutOctets, etc) are present in a
query, the requests are sent to lower layers. Hence, there is an impact on the responses by an
increase in the max-repetitions that you send in a bulk-get request. For bulk-get queries for interface
stats objects, it is recommended to use the ‘max-repetitions’ value of 10, and the maximum number
of OIDs per request is 10.
• Increase Timeout Values in Polling and Discovery Intervals
By increasing the timeout values for polling and discovery intervals, you can:
• Increase the queuing time at the device end.
• Reduce the number of throttle drops that occur because of the request timing out.
• Reduce Incoming Packet Rate at the snmpd
The following methods reduce the risk of SNMP requests piling up on any device.
• Reduce the frequency of sending SNMP requests to a device.
• Increase the polling interval.
407
• Control the use of GetNext requests.
• Reduce the number of polling stations per device.
RELATED DOCUMENTATION
Understanding SNMP Implementation in Junos OS
Monitor SNMP Activity and Track Problems That Affect SNMP Performance on a Device Running
Junos OS | 514
Managing Traps and Informs
Interfaces to Accept SNMP Requests
IN THIS SECTION
Configure the Interfaces on Which SNMP Requests Can Be Accepted | 407
Configure a Proxy SNMP Agent | 407
Example: Configure Secured Access List Checking | 408
Filter Interface Information Out of SNMP Get and GetNext Output | 409
Configure the Interfaces on Which SNMP Requests Can Be Accepted
By default, all router or switch interfaces have SNMP access privileges. To limit the access through
certain interfaces only, include the interface statement at the [edit snmp] hierarchy level.
Specify the names of any logical or physical interfaces that should have SNMP access privileges. Any
SNMP requests entering the router or switch from interfaces not listed are discarded.
Configure a Proxy SNMP Agent
Starting with Release 12.3, Junos OS enables you to assign one of the devices in the network as a proxy
SNMP agent through which the network management system (NMS) can query other devices in the
408
network. When you configure a proxy, you can specify the names of devices to be managed through the
proxy SNMP agent.
When the NMS queries the proxy SNMP agent, the NMS specifies the community name (for SNMPv1
and SNMPv2) or the context and security name (for SNMPv3) associated with the device from which it
requires the information.
NOTE: If you have configured authentication and privacy methods and passwords for SNMPv3,
those parameters are also specified in the query for SNMPv3 information.
To configure a proxy SNMP agent and specify devices to be managed by the proxy SNMP agent, see
proxy (snmp).
NOTE: Starting with Junos OS Release 15.2, you must configure the interface 
statement at the [edit snmp] hierarchy level for the proxy SNMP agent.
NOTE: The community and security configurations for the proxy should match the corresponding
configurations on the device that is to be managed.
NOTE: The devices managed by the proxy SNMP agent send the traps directly to the network
management system since the proxy SNMP agent does not have trap-forwarding capabilities.
You can use the show snmp proxy operational mode command to view proxy details on a device. The show
snmp proxy command returns the proxy names, device names, SNMP version, community/security, and
context information.
Example: Configure Secured Access List Checking
SNMP access privileges are granted to only devices on interfaces so-0/0/0 and at-1/0/1. The following
example does this by configuring a list of logical interfaces:
[edit]
snmp {
409
interface [ so-0/0/0.0 so-0/0/0.1 at-1/0/1.0 at-1/0/1.1 ];
}
The following example grants the same access by configuring a list of physical interfaces:
[edit]
snmp {
interface [ so-0/0/0 at-1/0/1 ];
}
Filter Interface Information Out of SNMP Get and GetNext Output
Junos OS enables you to filter out information related to specific interfaces from the output of SNMP
Get and GetNext requests. You can perform this on interface-related MIBs such as IF MIB, ATM MIB,
RMON MIB, and the Juniper Networks enterprise-specific IF MIB.
You can use the following options of the filter-interfaces statement at the [edit snmp] hierarchy level to
specify the interfaces that you want to exclude from SNMP Get and GetNext queries:
• interfaces—Interfaces that match the specified regular expressions.
• all-internal-interfaces—Internal interfaces.
[edit]
snmp {
filter-interfaces {
interfaces {
interface-name 1;
interface-name 2;
}
all-internal-interfaces;
}
}
Starting with Release 12.1, Junos OS provides an except option (! operator) that enables you to filter out
all interfaces except those interfaces that match all the regular expressions prefixed with the ! mark.
410
For example, to filter out all interfaces except the ge interfaces from the SNMP get and get-next results,
enter the following command:
[edit snmp]
user@host# set filter-interfaces interfaces “!^ge-.*”
user@host# commit
When this is configured, Junos OS filters out all interfaces except the ge interfaces from the SNMP get
and get-next results.
NOTE: The ! mark is supported only as the first character of the regular expression. If it appears
anywhere else in a regular expression, Junos OS considers the regular expression invalid, and
returns an error.
However, note that these settings are only applicable to SNMP operations. The users can continue to
access information related to the interfaces (including those hidden using the filter-interfaces options)
using the appropriate Junos OS command-line interface (CLI) commands.
Configure SNMP for Routing Instances
IN THIS SECTION
Understand SNMP Support for Routing Instances | 411
SNMPv3 Management Routing Instance | 412
SNMP MIBs Supported for Routing Instances | 413
Support Classes for MIB Objects | 425
SNMP Traps Supported for Routing Instances | 426
Identify a Routing Instance | 427
Enable SNMP Access over Routing Instances | 428
Specify a Routing Instance in an SNMPv1 or SNMPv2c Community | 428
Example: Configure Interface Settings for a Routing Instance | 429
Configure Access Lists for SNMP Access over Routing Instances | 431