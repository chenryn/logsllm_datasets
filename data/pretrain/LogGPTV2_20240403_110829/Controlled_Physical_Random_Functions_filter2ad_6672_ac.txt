f (h (h (P rogram) , P reChallenge))
GetSecret(Challenge) =
h (h (P rogram) , f (Challenge))
In these primitives, P rogram is the program that is be-
ing run in an authentic way. Just before starting the pro-
gram, the CPUF calculates h(P rogram), and later uses
this value when GetResponse and GetSecret are invoked.
We shall show in the next section that these two primitives
are sufﬁcient to implement the CRP management scenar-
ios that were detailed in section 4. We shall also see that
GetResponse is essentially used for CRP generation while
GetSecret is used by applications that want to produce a
shared secret from a CRP.
Figure 7 summarizes the possible ways of going between
pre-challenges, challenges, responses and shared secrets. In
this diagram moving down is easy. You just have to calcu-
late a few hashes. Moving up is hard because it would in-
volve reversing those hashes, which happen to be one-way
hashes. Going from left to right is easy for the program
whose hash is used in the GetResponse or GetSecret
primitives, and hard for all other programs. Going from
right to left is hard if we assume that the PUF can’t invert
a one-way function. We will not use this fact as the adver-
sary’s task wouldn’t be easier if it was easy.
5.2.2. Using a CRP to Get a Shared Secret
To show that the man-in-the-middle attack has been de-
feated, we shall show that a user who has a CRP can use
it to establish a shared secret with the PUF (previously,
the man-in-the-middle could determine the value of what
should have been a shared secret).
The user sends a program like the one below to the
CPUF, where Challenge is the challenge from the CRP
that the user already knows.
begin program
Secret = GetSecret(Challenge);
/* Program that uses Secret as
*
* a shared secret with the user */
end program
Note that h (program) includes everything that is con-
tained between begin program and end program.
That includes the actual value of Challenge. The same
code with a different value for Challenge would have a
different program hash.
The user can determine Secret because he knows
the response to Challenge, and so he can calculate
h (h (program) , response). Now we must show that a
man-in-the-middle cannot determine Secret.
By looking at the program that is being sent to the CPUF,
the adversary can determine the challenge from the CRP
that is being used. This is the only starting point he has to try
to ﬁnd the shared secret. Unfortunately for him, the adver-
sary cannot get anything useful from the challenge. Because
the challenge is deduced from the pre-challenge via a ran-
dom function, the adversary cannot get the pre-challenge di-
rectly. Getting the Response directly is impossible because
the only way to get a response out of the CPUF is starting
with a pre-challenge. Therefore, the adversary must get the
shared secret directly from the challenge.
However, only a program that hashes to the same value
as the user’s program can get from the challenge to the se-
cret directly by using GetSecret (any other program would
get a different secret that can’t be used to ﬁnd out the re-
sponse or the sought after secret because it is the output of
a random function). Since the hash function that we are us-
ing is collision resistant, the only program that the attacker
can use to get the shared secret is the user’s program. If the
user program is written in such a way that it does not leak
the secret to the adversary, then the man-in-the middle at-
tack fails. Of course, it is perfectly possible that the user’s
program could leak the shared secret if it is badly written.
But this is a problem with any secure program, and is not
speciﬁc to PUFs. Our goal isn’t to prevent a program from
giving away its secret but to make it possible for a well writ-
ten program to produce a shared secret.
5.3. Challenge Response Pair Management Proto-
cols
Now we shall see how GetResponse and GetSecret
can be used to implement the key management primitives
that were described in section 4.5 It is worth noting that the
5The implementations that are presented contain the minimum amount
to encryption to ensure security. A practical implementation would proba-
bly want to include nonces to ensure message freshness, and would encrypt
and MAC as much information as possible. In particular, it is not necessary
in our model to encrypt the pre-challenges that are used to produce CRPs.
Nevertheless hiding the pre-challenge (and therefore the challenge) would
make it harder for an adversary to mount an attack in which he manages to
forcibly extract the response to a speciﬁc challenge from the CPUF.
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:32:29 UTC from IEEE Xplore.  Restrictions apply. 
Easy only for the right program
Hard
Pre−Challenge
(1)  GRP calls GetResponse
d
r
a
H
y
s
a
E
h(h(GRP),
PreChal)
Challenge
GRP
  P U F   E v a l u a t
( 5 )
i o n
(2) GSP calls GetSecret
Response
GRP
h(h(GSP),
Response)
Shared−Secret
GRP, GSP
Figure 7. This diagram shows the different ways of moving between Pre-Challenges, Challenges,
Responses and Shared-Secrets. The dotted arrow indicates what the PUF does, but since the PUF
is controlled, nobody can go along the arrow directly. GRP and GSP are the programs that call
GetResponse and GetSecret respectively. The challenge and the response depend on the GRP that
created them, and the shared secret depends on the GSP.
CPUF need not preserve any state between program execu-
tions.
5.3.1. Bootstrapping
The manufacturer makes the CPUF run the following pro-
gram, where PreChall is set to some arbitrary value.
begin program
Response = GetResponse(PreChall);
Output(Response);
end program
The user gets the challenge for his newly created CRP
by calculating h(h(program), PreChall), the response
is the output of the program.
from the one that the adversary is trying to hijack (because
GetResponse combines the pre-challenge with a random
hash of the program that is being run). The MAC proves
that NewResponse that the user is getting originated from
the CPUF. The user gets the challenge for his newly created
CRP by calculating h(h(program), PreChall).
5.3.3. Introduction
Introduction is particularly easy. The certiﬁer simply sends
a CRP to the user over some agreed upon secure channel. In
many cases, the certiﬁer will use renewal to generate a new
CRP, and then send that to the user. The user will then use
private renewal to produce a CRP that the certiﬁer does not
know.
5.3.2. Renewal
5.3.4. Private Renewal
The user sends the following program to the CPUF, where
PreChall is set to some arbitrary value, and OldChall
is the challenge from the CRP that the user already knows.
begin program
NewResponse = GetResponse(PreChall);
Output(EncryptAndMAC(
NewResponse, GetSecret(OldChall)));
end program
Only the user and the CPUF have the initial CRP
needed to compute GetSecret(OldChall). It is their
shared secret. The user can be sure that only he can get
NewResponse, because it is encrypted with the shared se-
cret. An adversary can change OldChall to a challenge
that he knows the response to, but since OldChall is part
of the program, the newly created CRP would be different
The user sends the following program to the CPUF, where
PreChall is set to some arbitrary value, OldChall is
the challenge from the CRP that the user already knows,
and PubKey is the user’s public key.
begin program
NewResponse = GetResponse(PreChall);
Message =
PublicEncrypt(NewResponse, PubKey);
Output(Message,
MAC(Message, GetSecret(OldChall)));
end program
The user can be certain that only he can read the
NewResponse, because it is encrypted with his public
key. If the adversary tries to replace PubKey by his own
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:32:29 UTC from IEEE Xplore.  Restrictions apply. 
public key, he will get the response to a different chal-
lenge because PubKey is part of the program, and there-
fore indirectly changes the output of GetResponse. The
MAC can only be forged by the party that the user is shar-
ing the old CRP with (probably a certiﬁer that the user
just performed introduction with). If we assume that that
party is not doing an active attack, then we know that
the MAC was produced by the CPUF, and therefore, the
NewResponse is indeed characteristic of the CPUF. The
user gets the challenge for his newly created CRP by calcu-
lating h(h(program), PreChall).
5.4. Anonymity Preserving Protocols
In section 3.3.1 we showed how a CPUF could be made
to take on many different personalities in order to preserve
the anonymity of its owner. People don’t want their CPUF
to give away the fact that the same person is gambling
on gambling.com and doing anonymous computation for
SETI@home. In this section, we shall add a personality se-
lector to the PUF as in ﬁgure 1. We shall call the personality
selector PersonalitySel. The person who is trying to
hide his identity will be called the owner of the CPUF, but
as we shall see at the end of section 5.4.2 the notion is more
general than this. We shall assume that all sources of infor-
mation concerning the identity of the CPUF’s owner have
been eliminated by other protocol layers, and shall focus on
preventing the CPUF from leaking his identity. We shall
also assume that there are enough people using anonymized
introduction that trafﬁc analysis (correlating the arrival of a
message at a node with the departure of a message a little
while later simply from timing considerations) is unusable.
Programs must not be given permission to freely write
to PersonalitySel, or else they could put the CPUF
into a known personality and defeat the purpose of having
a personality selector. We shall therefore describe how the
value of PersonalitySel is controlled. First, two new
primitive functions are provided by the CPUF:
• ChangePersonality(Seed) sets the personality
to h(PersonalitySel, Seed). Where h is a ran-
dom hash function.
• RunProg(Program) runs the its argument without
changing PersonalitySel.
Moreover, when a program is loaded into the CPUF from
the outside world, and run (as opposed to being run by
RunProg), PersonalitySel is set to zero. We shall
call this the default personality.
The pseudo-code uses a few extra primitive functions:
• Decrypt(mesg, key) is used to decrypt mesg
that was encrypted with key.
• HashWithProg(x) computes h(h(program), x).
This function reads the area where the CPUF is storing
the hash of the program.
• Hash(...) is a random hash function.
• Blind(mesg,fact) is used to apply the blinding
factor fact to mesg. See section 5.4.2 for a brief
description of blinding.
5.4.1. Choosing the Current Personality
When the CPUF’s owner wants to show a personality other
than his CPUF’s default personality, he intercepts all pro-
grams being sent to the CPUF and encapsulates them in a
piece of code of his own:
ESeed =
/* the personality seed *
* encrypted with Secret */
EProgram =
/* the encapsulated program *
* encrypted with Secret
*/
begin program
Secret = GetSecret(Challenge);
Seed = Decrypt(Eseed, Secret);
Program = Decrypt(EProgram,Secret);
ChangePersonality(Seed);
RunProg(Program);
end program
Note that the line that precedes begin program is a
piece of data that accompanies the program but that does not
participate in the hash of the program. If EProgram were
included in the hash, then we would not be able to encrypt it
because the encryption key would depend on the encrypted
program. Other values that appear are Seed, an arbitrarily
selected seed; and Challenge, the challenge of one of the
owner’s CRPs.
By encapsulating the program in this way, the owner is
able to change the personality that the CPUF is exhibiting
when it runs the user’s program. There is no primitive to al-
low the user’s program to see the personality that it is using,
and the seed that is used with ChangePersonality is
encrypted so the user has no way of knowing which person-
ality he is using. The user’s program is encrypted, so even
by monitoring the owner’s communication, the user cannot
determine if the program that is being sent to the CPUF is
his own program.
5.4.2. Anonymous Introduction
The anonymous introduction protocol is much more com-
plicated than the other protocols we have seen so far. We
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:32:29 UTC from IEEE Xplore.  Restrictions apply. 
will only sketch out the details of why it works. This pro-
tocol uses blinding, a description of which can be found in
[Sch96].
The essential idea of blinding is this: Alice wants Bob
to sign a message for her, but she does not want Bob to
know what he has signed. To do this Alice hides the mes-
sage by applying what is called a blinding factor. Bob re-
ceives the blinded message, signs it and returns the signed
blinded message to Alice. Alice can then remove the blind-
ing factor without damaging Bob’s signature. The resulting
message is signed by Bob, but if Bob signs many messages,
he cannot tell which unblinded message he signed on which