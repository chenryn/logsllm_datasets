the kernel stack can we control with our two spraying
techniques?
• Coverage distribution and frequency.
In deterministic
stack spraying, how is the control coverage distributed
over the kernel stack? And how frequently can we control
a specific stack region?
• Spraying reliability.
In exhaustive memory spraying,
• Spraying efficiency. How long does it take for our
how reliably can we control memory?
spraying techniques to achieve memory control?
A. Experimental Setup
We obtained the symbolic execution engine S2E from
the master branch of its git repository1, which uses QEMU
1.0.50 and clang 3.2. Our guided fuzzer is based on Trinity
version 1.7pre. Both the symbolic execution and guided fuzzer
run on virtual machines with Debian 8.5.0 (64-bit) on Linux
kernel version 3.16. We selected syscalls in the way described
in §V; out of 313 syscalls available in the kernel source,
we selected 229 for the evaluation. The stack of the Debian
system is 16K-byte. The stack has two regions that are at fixed
locations and cannot be sprayed: the lowest 104 bytes reserved
for thread_info and the highest 160 bytes reserved for OS
operations such as context switches. In all evaluations, the
magic code is set to be 4-byte string "UBIE".
B. Stack Spraying Coverage
We evaluated the coverage for deterministic stack spraying
and exhaustive memory spraying separately and then measured
their combined coverage. In both scenarios, we used 229 pre-
selected syscalls for the evaluation.
In deterministic stack spraying, we found that only 34
syscalls do not allow us to take control of any stack region.
After manual inspection, we concluded that this is because
these syscalls do not admit any parameters that will be stored
on the stack. Table I summarizes the amount of bytes that can
be controlled by the top 10 syscalls. In the highest 1KB stack
region, which is frequently used (§II-C), deterministic stack
spraying covers 315 bytes using all available syscalls. Hence,
1https://github.com/dslab-epfl/s2e.git as of August 2016
9
Fig. 5: The cumulative distribution (CDF) of coverage achieved by
exhaustive memory spraying. Its average control rate is about 90%.
The controlled memory is aligned to the low address of the kernel
stack; a portion (1,700 bytes on average) near the stack base cannot
be controlled.
32% of the frequently used region of the kernel stack can be
manipulated using deterministic stack spraying.
Stack memory after the highest 1KB is subjected to
exhaustive memory spraying. As mentioned in §III, a portion
of the prepared malicious data in the kernel stack of a
victim process by exhaustive memory spraying is likely to
be overwritten because of some kernel operations (e.g., setting
up a new process) in the victim process. To evaluate which
areas are overwritten, we enabled exhaustive memory spraying
and ran the Trinity fuzzer to invoke syscalls. We then used
kprobes to intercept syscall entry points and check which
regions have been polluted by magic code (indicating that they
were successfully sprayed). Figure 5 shows the results: Besides
a small overwritten region near stack base, the remaining region
can be fully controlled. The size of the uncontrollable region
varies. On average, the highest 1,722 bytes at the stack base
are overwritten, and in some cases, this region can be as small
as 1,200 bytes. Overall, while losing control of this region,
exhaustive memory spraying retains control of all other stack
memory, achieving an average coverage rate of 89%.
Deterministic stack spraying and exhaustive memory spray-
ing work as two complementary techniques: While exhaustive
memory spraying retains the majority of the memory, it cannot
control the frequently used stack region. Deterministic stack
spraying complements it by controlling 32% memory of the
frequently used stack region. Overall, by combining both
spraying techniques, targeted stack-spraying reliably controls
more than 91% of the kernel stack.
C. Coverage Distribution and Frequency
We further investigated how the control coverage is dis-
tributed over the kernel stack when using deterministic stack
spraying. Figure 6 presents the distribution. We found that the
coverage ranges from 200 to 800 bytes. More importantly, the
control with deterministic stack spraying is highly concentrated:
Some regions can be controlled by more than 100 syscalls. We
142001440014600148001500015200Size of controlled regions (aligned to low stack address)0.00.20.40.60.81.0CDF of controlled syscallsCoverage of Exhaustive Memory SprayingSystem call
vmsplice
uname
fcntl
setpriority
sched_get_priority_min
sched_get_priority_max
personality
iopl
umask
io_destroy
Coverage (Byte)
224
99
96
88
88
88
84
84
80
76
TABLE I: Top 10 syscalls with highest individual control coverage
in the kernel stack.
System call
wait4
waitid
timerfd_create
clock_getres
fcntl
mq_open
sched_rr_get_interval
mq_notify
timer_gettime
Total
Unique Coverage
16
12
8
8
8
8
8
8
4
80
TABLE II: Syscalls that uniquely control a stack region. Unique
coverage is the number of uniquely controlled bytes.
believe these regions are most likely used by stack objects,
and uninitialized variables likely reside in these regions, so
controlling these regions is critical to exploit uninitialized uses
from the kernel stack. Table I presents top 10 syscalls with high
coverage. Syscalls vmsplice, uname, and fcntl have the highest
individual coverage. We further investigated which regions
of the stack are uniquely controlled by a syscall. Table II
contains all syscalls that uniquely control a region. Overall,
only 80 bytes are uniquely controllable by a single syscall.
Other covered bytes can be controlled with multiple syscalls,
thus their sprayers are more reliable.
D. Reliability of Exhaustive Memory Spraying
We investigated the reliability of exhaustive memory spray-
ing by measuring how likely the kernel uses the sprayed memory
Fig. 6: The coverage, distribution, and frequency of stack control
achieved by the deterministic stack spraying technique.
10
for the kernel stack, i.e. whether the allocated stack memory
overlaps the one with prepared data. Specifically, we enable
the exhaustive memory spraying and run the Trinity fuzzer
to invoke syscalls. Then we count the number of times (i.e.,
probes) a syscall has been invoked until we find that the kernel
stack for the syscall is sprayed. After running all syscalls with
Trinity, we found that in most cases, the kernel uses the
sprayed memory as stack in the first or second probe. The
average number of probes we achieve overlapping is 1.8. The
worse case is less than 10 probes. Such results show that the
exhaustive memory spraying technique is very effective and
thus can reliably control the uninitialized memory.
E. Efficiency of Spraying
In deterministic stack spraying, both the symbolic execution
and the guided fuzzing are time-consuming processes. In many
cases, they do not terminate even after running for a few
hours. To handle this problem, we have set a timeout for this
analysis: If the analysis for a syscall does not generate new
coverage within a pre-set timeout, we forcibly terminate the
analysis for this syscall and continue to analyze next one. After
experimenting with various timeouts, we ultimately set the
timeout to 30 minutes. We found that the vast majority of
syscalls can be thoroughly analyzed within this time-frame,
with only 12 syscalls not finishing in time. With the syscall
ranking mentioned in §V-A3, we were able to control more than
200 bytes in the frequently used region within a few minutes.
Compared to deterministic stack spraying, exhaustive memory
spraying is much more efficient. The time memory occupying
takes depends on the size of the available memory. In our case,
the memory is 512MB, and the time for occupying the memory
is less than 2 seconds. Since memory pollution writes data into
a small memory region, its time is unobservable.
F. Case Study
The targeted stack-spraying technique provides a conceptual
approach for exploiting a given uninitialized-use vulnerabilities
by preparing malicious data at a target stack location. For
the sake of illustration, we exemplify the applicability of our
approach by adapting Cook’s exploit [12].
To the best of our knowledge, Cook’s exploit is the only one
that exploited an uninitialized-use vulnerability (CVE-2010-
2963) in the Linux kernel stack. Figure 7 shows how the
code is subject to the uninitialized use. The pointer data in
object karg.vc is not initialized but dereferenced in function
copy_from_user(). Cook exploited this vulnerability by tuning
the cmd argument to let the union struct adopt the type of
struct video_tuner, causing karg.vt to be written with user-
controlled data. For such a spraying attack to succeed, at least
four requirements must be satisfied: (1) The object having the
uninitialized pointer must be contained by a union struct; (2)
another type in the union struct has to have a non-pointer field
that overlaps with the uninitialized pointer because users are
not allowed to specify pointers pointing to kernel space; 3)
this non-pointer field can be overwritten with user-controlled
data; and 4) the user-controlled data will not be cleared. An
execution path satisfying all these requirements is uncommon
in practice, and finding such a path manually is unrealistic in
most cases.
0100200300400500600700800Controlled regions (offset into the stack base in byte)020406080100120140Number of controlling syscallsStatistics of Deterministic Stack Sprayingunion {
unsigned long arg) {
struct video_tuner vt;
struct video_code vc;
} karg;
...
/* karg.vc contains an uninitialized pointer */
err = get_microcode32(&karg.vc, up);
...
1 static long do_video_ioctl(struct file *file, unsigned int cmd,
2
3
4
5
6
7
8
9
10
11 }
12 int get_microcode32(struct video_code *kp,
struct video_code32 __user *up) {
13
14
15
16
17
18 }
...
/* uninitialized pointer is dereferenced */
copy_from_user(kp->data, up->data, up->datasize))
...
Fig. 7: The uninitialized-use vulnerability used in Cook’s exploit.
In this case study, we show that our targeted stack-spraying
technique can automatically find many execution paths that are
able to prepare a malicious pointer on the kernel stack, thus
controlling the uninitialized pointer kp->data. To reproduce
Cook’s exploit, we installed version 2.6.27.58 of the Linux
kernel in 64-bit Ubuntu 14.04; the kernel source code in file
compat_ioctl32.c was reverted to contain the vulnerability
described in CVE-2010-2963. Determined by the operating
system, the size of the kernel stack is 8KB instead of 16KB
in this case study. As mentioned in §IV, to benefit from
our targeted stack-spraying technique, we need to find out
the location of the uninitialized pointer in the stack. To get
the pointer location, we used kprobes to hook the function
do_video_ioctl. The handler provided by kprobes enables us
to find the location of the stack pointer when do_video_ioctl
is called. Using this information, we computed the offset of the
uninitialized pointer kp->data from the stack base, which is
396. After knowing this offset, we employed our deterministic
stack spraying technique to find syscalls that can prepare a
8-byte malicious pointer at this offset. Altogether, we were
able to find 27 such syscalls with corresponding parameters.
Independent of the chosen syscall, we could always prepare a
malicious pointer at the target offset, resulting in an arbitrary
write.
This case study shows how to use the proposed deterministic
stack spraying technique to find syscalls that can control a
specific location on stack. It also confirms that control of the
stack can be achieved generally and automatically, and, in
the presence of a suitable uninitialized-use vulnerability, a
successful exploit can be built reliably and readily.
VII. MITIGATION
We showed that uninitialized-use vulnerabilities can be
readily and reliably exploited using our targeted stack-spraying
technique. While use-after-free and buffer overflow problems
have been extensively studied, which has resulted in various
protection techniques (e.g., memory safety), the uninitialized-
use problem has rarely received attention. Our findings show
that uninitialized use constitutes a severe attack vector that
calls for practical defense mechanisms; however, to date no
such defense mechanisms exist. As such, we designed and
implemented an efficient and practical mitigation that counters
uninitialized uses. Our mitigation is inspired by the observation
11
that uninitialized-use exploits usually control an uninitialized
pointer to achieve arbitrary read/write/execution. By zero-
initializing pointer-type fields in an allocated object, we can
prevent an adversary from controlling these pointers. Since
memory page at the address zero is not accessable in Linux2,
zero-initialization becomes a safe prevention operation. More
specifically, we perform an intra-procedural analysis for the
Linux kernel source code. We realize both the analysis that
identifies unsafe pointer-type fields and the instrumentation that
zero-initializes the identified pointer-type fields based on the
LLVM compiler Infrastructure [24].
A. Identifying Unsafe Pointer-Type Fields
Our analysis is carried out on the LLVM IR, so type
information is preserved. In most cases, we can differentiate
pointer-type fields from other fields based on type information.
We start our analysis from allocation sites (i.e., AllocaInst
instructions in LLVM IR). The first step is to identify all
pointer-type fields by recursively (a field could be a struct
or an array type) traversing each field in the allocated object.
Since integer values might be used as a pointer, we also treat
the 8-byte-integer type as a pointer type.
To initialize identified pointer-type fields, we could conser-
vatively zero out them upon allocations. This strategy, however,
will overly initialize many already initialized pointers and
therefore introduce unnecessary performance overhead. To
reduce initialization overhead while still ensuring security, we
designed an intra-procedural program analysis that checks the
following two conditions: (1) the pointer field is not properly
initialized in the function; and (2) the pointer is sinking (e.g.,
being used or passed to other functions). Only those pointer-
type fields satisfying both conditions require zero-initialization.
More specifically, once all pointer-type fields are identified, we
perform taint analysis to keep track of the initialization status
and sinking status of the pointer-type fields in the following
conservative ways:
• When a pointer-type field is explicitly assigned by other
values (i.e., it is the store-to target in a memory storing
instruction (StoreInst)), we record that