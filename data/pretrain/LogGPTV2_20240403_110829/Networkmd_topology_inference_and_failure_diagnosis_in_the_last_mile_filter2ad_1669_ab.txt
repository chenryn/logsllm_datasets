0
0
1
1
1
1
0
0
≈
0
0
0
0
Since U ′ and V ′ are not normalized, looking at each value
separately does not provide enough information to correctly
determine the correct binary value. For example, both U ′
51
and U ′
52 are above 0.5, but the expected binary values should
be U51 = 0 and U52 = 1 in the example. We apply the
normalization algorithm and obtain:
U ′′ =
0
1.0
1.0
0
0.44
2
6664
0.95
0
0
0.95
1.0
3
7775
, V ′′ = » 1.07
0.18
0.91
0
0
1.03
0
1.03 –
Applying the threshold to U ′′ and V ′′, we get the ﬁnal
results:
U =
0
1
1
0
0
1
0
0
1
1
2
6664
3
7775
, V = » 1
0
1
0
0
1
0
1 –
The above U and V exactly mirror the ’real’ topology as
depicted in Figure 2. Note that due to the noise in the
measurement (X51 = 1 in particular), we also see some noise
in U ′′ and V ′′. For example, the conﬁdence factor of node-1
belonging to the second FG is V ′′
21 = 0.18. However, since
the failure observations are dominated by the failures of FGs,
such noise can be easily identiﬁed and ﬁltered out by the
thresholds we set in Eqs. (5)-(7).
3.2 The Extended Algorithm
The basic algorithm assumes that the number of failure
groups r is given. However, this assumption may not be re-
alistic in practice. Therefore, we extend the basic algorithm
to deal with the cases where r is not speciﬁed as an input
parameter. Speciﬁcally, if we view the failure group infer-
ence problem as a clustering problem, then the problem of
no prior knowledge of r is equivalent to a clustering problem
without knowing the number of clusters. Hence, we develop
the following procedure to identify FGs in this case.
function merge(U, V)
//U is the n-by-r failure explanation matrix;
//Ui is the ith column vector;
//V is the r-by-d failure group matrix;
//Vi is the ith row vector;
(n,r)=size(U); (r,d) = size(V);
for i=1 to r-1 {
if ( ~Ui! = ~0)
for j=i+1 to r {
if( ~Ui == ~Uj ) {
//FGi and FGj always fail at the same time,
//merge them
U ′ = U1,..,j−1,j+1,..,r;
V ′ = V1,..,j−1,j+1,..,r;
V ′
return merge(U ′, V ′);
}elseif ( ~Ui ⊇ ~Uj ) {
i = Vi ∪ Vj;
//FGi always fail when FGj fails
Vj = Vi ∪ Vj;
}elseif ( ~Ui ⊆ ~Uj ) {
//FGj always fail when FGi fails
Vi = Vi ∪ Vj;
}
}
}
return (U, V);
Figure 6: The algorithm to merge disjoint sub-
failure groups.
The extended algorithm consists of three steps: (1) iden-
tify a range of possible values of r; (2) starting from the
lower bound of r, apply the basic algorithm to ﬁnd the fail-
ure group and failure explanation matrices and estimate its
error using the quality metric as in Eq. (3.2); (3) gradu-
ally increase r until the results satisfy certain criteria. By
estimating the range of r ﬁrst, we reduce the computation
cost of unnecessary iterations on unrealistic guesses and the
possibility of getting in local minima.
We estimate the range of r by ﬁnding the number of dom-
inant singular values of X. According to Li [18], the number
of clusters of a binary matrix X is close to the number of
dominant singular values of X. Essentially, we try to look
for a large gap between the singular values σr and σr+1 of
X. The lower bound and the upper bound of r is derived as
follows:
rlow = min{i|σi < 10σi+1}
rhigh = min{i|σi < 2σi+1}
After obtaining the range of r, we run our algorithm on
each possibility of r from rlow to rhigh. On each instance ri,
the quality of the result is calculated as follows:
quality(ri) = λ1
||X − U × V ||
dn
+ λ2
||V − V ′′||
rid
That is, quality(ri) is the quality metric of how good the
estimation assuming there are ri FGs. Smaller value of
quality(ri) indicates better quality. ||X−U ×V ||
measures the
binary reconstruction error to the original failure instance
dn
Figure 7: System architecture of 3i. The FGs are ex-
posed to the user as virtual devices in the Managed
Object Layer.
rid
matrix per element: the larger the error, the worse the es-
timation quality; the second term ||V −V ′′||
represents the
diﬀerence between the failure group matrices before and af-
ter the threshold step. The larger the diﬀerence, the more
uncertainty introduced by the threshold, which leads to poor
quality results. For example, v′′
11 = 0.99 gives us much more
conﬁdence than v′′
11 = 0.51 if in both cases the threshold
algorithm yields v11 = 1. λ1 and λ2 are the parameters
that determine how important the reconstruction error fac-
tor and threshold conﬁdence factor weight relatively to each
other. Our empirical study shows that λ1 = λ2 = 1 gives
a good balance. Note that quality(ri) also depends on the
initial random matrices that used in NMF. We repeat the
algorithm multiple times and choose the instance with the
best quality score. Finally, we choose
r = argmin
quality(ri),
rlow ≤ri≤rhigh
which is the number of FGs that yields the best quality score
within its estimated range.
3.3 Dealing with Cascaded Topology
If part of the missing topology resembles a cascaded topol-
ogy, some failure groups may be subsets of other larger fail-
ure groups. For example, the topology in Figure 5 has node
1 and 2 in F G1, and node 1, 2 and 3 in F G2. In this case,
the algorithm we described above will split F G2 and yield
two groups: F G1={1,2} and F G′
2={3}. Such cases can be
detected by examining the corresponding failure explanation
matrix U . It can been seen that whenever F G′
2 fails, F G1
will fail simultaneously. Therefore, we can merge F G1 and
F G′
2 = {1, 2, 3} and leave F G1 as is,
which mirrors the topology more accurately. The algorithm
to merge those failure groups is shown in Figure 6.
3.4 Alternative Algorithms
2 into F G2 = F G1 ∪F G′
Looking at the problem from another perspective, we can
view the FG association as a clustering problem. Given the
n-by-d failure instance matrix X, each node has a feature
vector—the corresponding column vector in X. Each feature
vector has n dimensions. A standard clustering algorithm
Figure 8: Topology transformation after FG discov-
ery. The new topology contains the FGs as a layer
between the customer premise equipment (CPE)
layer and the ﬁber node layer.
can divide the nodes into several disjoint clusters based on
their features, so that nodes from the same clusters belong
to the same FG.
Hence, a good alternative is to use standard clustering
algorithms, such as k-means [1], to derive FG association.
After getting the FG composition, other failure diagnosis
algorithms such as greedy min-set-cover [15] can be used
to further decide which FGs are faulty based on the mea-
surement result. However, one still faces the problem of
not knowing the FG number and having sub-failure groups.
The same techniques we proposed in section 3.2 and 3.3 still
apply.
One advantage of the clustering algorithm is that the
feature vector is extensible to information beyond failures.
For example, in some applications, nodes that are physi-
cally closer to each other are more likely to be in the same
FGs.
If the geographic location of every node is known,
then for node i, its feature vector can be extended from
{X1i, X2i, · · · , Xni} to {X1i, X2i, · · · , Xni, λ·xi, λ·yi}. Here
(xi,yi) is the geographic coordinate of node i. λ is an ad-
justable weight parameter to indicate how important the
geographic information is in the feature vector. However, as
we shall see, these weight parameters usually take on some
empirical values and could be hard to tune in practice.
4.
IMPLEMENTATION
NetworkMD is implemented as a plug-in for a monitor-
ing framework called 3i—Integrated Infrastructure Intelli-
gence [12]. As a plug-in, NetworkMD has direct access to 3i’s
normalized monitoring data stored in a MySQL database.
Upon completion, NetworkMD exposes its FGs as virtual
devices that a user can interact with in 3i.
More speciﬁcally, 3i uses a device virtualization layer,
called Managed Object Bridge (MOB). As shown in Fig-
ure 7, a MOB instance can be a CMTS, an interface, or
a cable modem, etc. While outside the scope of this paper,
the MOB layer is intended to simplify building rich user-
centric management applications. Furthermore, the MOB
layer guarantees high-scalability through eﬃcient manage-
ment of disconnected graphs, with each device representing
a node in the graph. NetworkMD uses the MOB API to
Figure 9: Simulated topology
insert its results as a virtual layer within the monitored
topology. From a user’s perspective, the FGs appear as new
devices that can bring additional insight in the failure diag-
nosis process. Figure 8 shows how the results of NetworkMD
are integrated with the real topology.
To ensure scalability, NetworkMD was implemented as
two pieces. The ﬁrst is PHP-based, which implements the
MOB API. The second is a C-based PHP extension that
performs matrix factorization. Implementing matrix factor-
ization with compiled C code was necessary as our initial
implementation, which was fully written in PHP, was inef-
ﬁcient in performing such periodic computation. After each
round of FG inference, NetworkMD caches the results into
a MySQL database.
5. EVALUATION
The algorithm has been validated using both simulation
and experimental data collected from a real network setting.
As mentioned before, the status information collected from
cable modems is not always accurate. We thus focus the
evaluation on both the accuracy of topology inference and
the robustness in the presence of noise.
5.1 Simulation
A simulator was constructed, comprising about 1400 lines
of MATLAB code. In the simulation, we use two represen-
tative topologies to study the performance of NetworkMD:
the balanced topology and the cascaded topology as shown in
Figure 9.
In both cases, the simulation focuses on a sin-
gle “unknown” repeater layer, with all parent-nodes in the
simulated topology belonging to that layer.
In our study,
we only consider a partial topology associated with a single
ﬁber node, because the full topology of a cable network can
be viewed as the composition of several disjoint subgraphs,
each associated with a ﬁber node and can be inferred inde-
pendently using our algorithm.
That said, one can imagine the leaf nodes as cable modems
and the intermediate nodes as the repeaters. The balanced
topology is a 3-level tree, where the ﬁrst level contains 4
nodes, forming the four major FGs that we want to iden-
tify. The second and third level of the tree have 20 and 200
nodes respectively. The number of nodes are well balanced
across diﬀerent branches. The cascaded topology, on the
other hand, is not a balanced tree. On each level, there are
50 leaf nodes, plus one special node that connects the cur-
rent and next level. These two topologies represent the two
most common scenarios in practical cable networks. Our
goal is then to identify the major FGs in the topologies, as
identiﬁed by the circles in Figure 9.
Each time epoch is characterized by one or more failure
incidents.
In our simulation, we distinguish between fail-
stop and perceived failure. A fail-stop is one where the node
has experienced a software or hardware failure and can no
longer function. In contrast, a perceived failure is one where
an external monitoring application perceives that the node
as faulty. When a parent node fail-stops, its child nodes will
be perceived as faulty too. In our study, we simulate fail-
stops, but also account perceived failures as input to infer
the FGs.
We assume that nodes fail-stop independently and assign
to the nodes at each level a certain failure probability: pr
for repeaters (or parent nodes) and pm for modems (or leaf
nodes). Typically, pr < pm. This is consistent with our
observations from actual cable networks, where devices at
the higher levels are less likely to fail. Note that pm is used to
simulate isolated cable modem failures, which are considered
as noise in the input to our algorithm. However, as will be
shown, the algorithm can still correctly identify the FGs
based, despite the existence of such noise.
Our simulator also captures the typical way active probing
is implemented in monitoring applications, where a certain
threshold (e.g., the percentage of oﬄine modems registered
to an interface) must be reached before probes are launched
to all end-devices. We simulate this behavior by recording
the modem statuses iﬀ the total failure ratio among all of
the modems are above this threshold. When the threshold is
exceeded, we record the failed modems as well as the failed
upstream repeaters3.
To evaluate the accuracy of the inferred FGs, we compute
two metrics:
• false positive ratio Rp: A false positive occurs when
two nodes are not in the same failure group described
by the real topology, but the algorithm places them in
the same group. Rp is the number of such node pairs
divided by the number of all possible node pairs.
• false negative ratio Rn: A false negative occurs when
two nodes that are in the same failure group, but the
algorithm places them in diﬀerent groups. Rn is the
ratio of the number of such node pairs to the number
of all possible node pairs.
We use both metrics to evaluate the eﬀectiveness of our
algorithm, with zero being the ideal value for both met-
rics. Note that looking at only Rp or Rn can be misleading.
For example, an algorithm that puts every modem into an
FG would have a zero false negative ratio, but the result is
meaningless.
We start the simulation using a simple case study to demon-
strate how NetworkMD performs in a balanced topology.
We then study how diﬀerent network topologies, numbers
of observed failure instances, and measurement noises af-
fect the performance of NetworkMD. We also compare the
3It is worth noting that repeater statuses are invisible to our
inference algorithm and are used for its validation only.
s
e
c
n
a
t
s
n
i
20
40
60
80
100
120
140
s
e
c
n
a
t
s
n
i
20
40
60
80
100
120
140
50
100
modems
150
200
50
100
modems
150
200
(a) Original failure instances
(b) Diagnosis result based
on original data
s
e
c
n
a
t
s
n
i
20
40
60
80
100
120
140
s
e
c
n
a
t
s