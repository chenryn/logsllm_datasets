        uint nextTicket = 0;
        mapping (uint => Contestant) contestants;
        uint[] gaps;
        // Initialization
        function Ethraffle_v4b() public {
            feeAddress = msg.sender;
        }
        // Call buyTickets() when receiving Ether outside a function
        function () payable public {
            buyTickets();
        }
        function buyTickets() payable public {
            if (paused) {
                msg.sender.transfer(msg.value);
                return;
            }
            uint moneySent = msg.value;
            while (moneySent >= pricePerTicket && nextTicket  0) {
                    currTicket = gaps[gaps.length-1];
                    gaps.length--;
                } else {
                    currTicket = nextTicket++;
                }
                contestants[currTicket] = Contestant(msg.sender, raffleId);
                TicketPurchase(raffleId, msg.sender, currTicket);
                moneySent -= pricePerTicket;
            }
            // Choose winner if we sold all the tickets
            if (nextTicket == totalTickets) {
                chooseWinner();
            }
            // Send back leftover money
            if (moneySent > 0) {
                msg.sender.transfer(moneySent);
            }
        }
        function chooseWinner() private {
            address seed1 = contestants[uint(block.coinbase) % totalTickets].addr;
            address seed2 = contestants[uint(msg.sender) % totalTickets].addr;
            uint seed3 = block.difficulty;
            bytes32 randHash = keccak256(seed1, seed2, seed3);
            uint winningNumber = uint(randHash) % totalTickets;
            address winningAddress = contestants[winningNumber].addr;
            RaffleResult(raffleId, winningNumber, winningAddress, seed1, seed2, seed3, randHash);
            // Start next raffle
            raffleId++;
            nextTicket = 0;
            blockNumber = block.number;
            // gaps.length = 0 isn't necessary here,
            // because buyTickets() eventually clears
            // the gaps array in the loop itself.
            // Distribute prize and fee
            winningAddress.transfer(prize);
            feeAddress.transfer(fee);
        }
        // Get your money back before the raffle occurs
        function getRefund() public {
            uint refund = 0;
            for (uint i = 0; i  0) {
                msg.sender.transfer(refund);
            }
        }
        // Refund everyone's money, start a new raffle, then pause it
        function endRaffle() public {
            if (msg.sender == feeAddress) {
                paused = true;
                for (uint i = 0; i 
  * [0xcC88937F325d1C6B97da0AFDbb4cA542EFA70870](https://etherscan.io/address/0xcC88937F325d1C6B97da0AFDbb4cA542EFA70870)
  * [0xa11e4ed59dc94e69612f3111942626ed513cb172](https://etherscan.io/address/0xa11e4ed59dc94e69612f3111942626ed513cb172)
  * 
  * [0x80ddae5251047d6ceb29765f38fed1c0013004b7](https://etherscan.io/address/0x80ddae5251047d6ceb29765f38fed1c0013004b7)