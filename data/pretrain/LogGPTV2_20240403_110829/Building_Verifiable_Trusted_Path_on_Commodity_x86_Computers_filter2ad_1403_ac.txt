5.4
Isolation of Device Interrupts
Our system handles three types of device interrupts, including
hardware interrupts managed by the [Advanced] Programmable
Interrupt Controller ([A]PIC), Message Signaled Interrupts
(MSI), and Inter-Processor Interrupts (IPIs). In a trusted-path
session, the hypervisor should fulﬁll the following two require-
ments for device interrupt isolation: (1) Interrupts should be
correctly routed, i.e., interrupts from the DE are exclusively
delivered to the respective PE, and other interrupts should not
arrive at the program endpoint.2 (2) Spoofed interrupts should
not compromise the trusted-path.
A common pitfall in interrupt isolation is ignoring require-
ment (2). One may argue that (2) is unnecessary, because the
driver of the trusted-path device endpoint can verify the identity
of the interrupts it receives. When the PE receives an interrupt
that appears to originate from the DE, it communicates with the
DE to check whether the DE indeed has a pending interrupt. If
not, the PE refuses to service this interrupt. However, not all
DE device drivers are robust against spoofed interrupts. For
2An exception exists when the PE receives interrupts from the devices that
physically share the same interrupt pin on the [A]PIC with the DE. To cope
with the shared interrupts, the HV provides a speciﬁc hypercall interface to the
PE for forwarding the shared interrupts to the OS on other CPUs. In a uni-
processor system, devices that share interrupts with the DE should be put into
a sleep or pending mode before invoking the PE. Otherwise, interrupts from
those devices are dropped during the trusted-path session, and those devices
are not guaranteed to perform consistently across the trusted-path session.
Figure 3: MMIO mapping attack against the trusted path.
In the left half of the ﬁgure, ManD’s MMIO memory is
remapped to overlap that of the trusted-path DE (0x20-0x30),
and the MMIO mapping attack will succeed. The right half
shows that MMIO mapping attacks cannot compromise the ac-
cess to PCI/PCIe conﬁguration space.
gions. The HV can defend against these attacks by leveraging
standard features for x86 hardware virtualization support. For
example, the HV conﬁgures the access permissions in Nested
Page Tables (or Extended Page Tables) [3, 32] to prevent unau-
thorized CPU-to-memory access. The HV also sets up the
IOMMU [2, 34] to protect the DE-associated memory regions
from other devices’ DMA buffers. Note that IOMMU protec-
tion relies on the assumption that it can correctly identify DMA
requests from the devices. We discuss DMA request ambiguity
and its inﬂuence on the trusted path in Section 6.1.
5.3 Protection of Device Conﬁguration Space
A fundamental building block of our prevention mechanisms
against I/O port conﬂicts (Section 5.1) and MMIO mapping at-
tacks (Section 5.2) is protecting the device conﬁguration space.
Speciﬁcally, the hypervisor intercepts all accesses to the device
conﬁguration space throughout the trusted-path session, includ-
ing trusted-path establishment, run-time, and tear-down. The
hypervisor grants the program endpoint only the access permis-
sions to its device endpoints’ conﬁguration space, and prevents
the OS and manipulated devices from modifying the I/O ports
and MMIO memory mappings of any device.
For the x86 I/O architecture, the device PCI/PCIe conﬁgura-
tion space is accessed via special I/O ports [10, 54], or through
reserved MMIO memory regions [10]. At ﬁrst glance, this ap-
pears to lead to a cyclic dependency: protecting the device con-
ﬁguration space, in reverse, relies on protecting the special I/O
ports and MMIO memory regions.
However, this seemingly cyclic dependency can be resolved.
The key observation is that I/O port conﬂicts and MMIO mem-
621
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:11 UTC from IEEE Xplore.  Restrictions apply. 
• Modify the redirection table to reroute DE interrupts, and
to remove any interrupt-to-vector mapping conﬂicts be-
tween the DE and other devices.
• Setup corresponding PIC/LAPIC registers to enable de-
livery of the DE’s interrupts, and to temporarily disable
interrupts from other devices.
• Manipulate the OS’s Interrupt Descriptor Table (IDT) so
that the DE interrupts will trigger their corresponding in-
terrupt handlers in the PE.
While the PE is running, the hypervisor provides run-time
protections to the redirection tables, the interrupt controller reg-
isters, and the IDT (using the mechanisms described in Sec-
tions 5.1- 5.3). Note that no run-time protection is needed on
uni-processor systems, since the OS is held in a pending state
during the execution of the PE.
5.4.2
Isolating Message Signaled Interrupts
An MSI-capable device can generate MSIs by writing a small
amount of data to a special physical memory address. A chipset
component interprets the special memory write and delivers the
corresponding interrupts to the targeted processor(s) [10, 54].
Challenges. MSI-capable devices use Message Address Reg-
isters to store the memory address range, and Message Data
Registers to store the data that deﬁnes the interrupt vectors. To
launch an MSI-spooﬁng attack against a PE-DE trusted-path,
a compromised OS can change the Message Data Registers of
other devices to include the DE’s interrupt vector. By program-
ming the device’s DMA scatter-gather unit, the OS can also
spoof arbitrary MSI messages, without modifying any Message
Address/Data Register on any device [65].
The software-conﬁgurable nature of MSIs and the complex-
ity of the potential spooﬁng attacks make MSI isolation ex-
tremely difﬁcult. Enumerating every MSI-capable device in
the system and conﬁguring their MSI control registers is not
only time-consuming and inefﬁcient, but also does not defend
against the above “scatter-gather attack” [65].
Solution. We design a comprehensive and efﬁcient solution
for isolating MSIs, which does not require controlling any MSI-
capable devices other than the DE. Our solution leverages the
Interrupt Remapping features in the IOMMU [2, 34]. With Intel
VT-D Interrupt Remapping, MSI messages are embedded with
a speciﬁed handle [34]. Upon receiving an MSI message, the
IOMMU uses that handle as an index to locate a corresponding
Interrupt Remapping Table entry, which stores a device-speciﬁc
interrupt vector.
To re-route MSIs from the DE, the hypervisor HV modiﬁes
the DE’s MSI message handle to point to a speciﬁc interrupt
vector with a chosen vector number and delivery destination
(only the CPU(s) executing the PE). The HV also conﬁgures
the LAPIC registers and IDT entries to ensure that MSIs are de-
livered to, and serviced by, the correct interrupt handlers. Note
that the chipset hardware that interprets MSI messages (e.g.,
IOAPIC*/LAPIC* denotes
Figure 4: Interrupt spooﬁng attacks against the trusted-
path.
the interrupt con-
trollers manipulated by the compromised OS. Intr(DE’s
vector) represents spoofed hardware interrupts with the
DE’s interrupt vector. When the IOMMU interrupt remapping
feature is enabled, spoofed MSIs with incorrect issuer identi-
ﬁers will be ﬁltered out by the IOMMU (Section 5.4.2).
example, MSI device drivers often assume that the OS avoids
interrupt conﬂicts when initializing MSI-capable devices. As
a result, a spoofed MSI may cause device driver misbehavior.
MSI device drivers that receive a spoofed DMA Finish inter-
rupt, without checking with the interrupting device, may oper-
ate on incomplete or inconsistent data.
To meet both interrupt isolation requirements, our trusted-
path system must modify the conﬁgurations of the interrupt
controllers, MSI-capable devices, and other chipset hardware
along the interrupt delivery route during trusted-path establish-
ment. The compromised OS may subvert those conﬁgurations
during the execution of the trusted-path program endpoint, in
order to mis-route device endpoint interrupts or launch inter-
rupt spooﬁng attacks (Figure 4). Thus, our trusted-path hyper-
visor should protect those conﬁgurations throughout the entire
trusted-path session. We now detail our protection mechanisms
for all three types of interrupts.
5.4.1
Isolating Hardware Interrupts
Hardware interrupts are managed by a PIC on uni-processor
systems, and by an I/O APIC and per-processor Local APICs
(LAPIC) on multi-processor platforms. The PIC and IOAPIC
are deployed with redirection tables that map device hardware
interrupts to their corresponding interrupt vectors (with vector
numbers and delivery destinations). The PIC or LAPICs then
decide when and whether to deliver messages with those in-
terrupt vectors to targeted CPU(s). HV isolates trusted-path
device interrupts as follows during trusted-path establishment:
622
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:11 UTC from IEEE Xplore.  Restrictions apply. 
the PCI host controller on the southbridge) often sits between
the devices and the IOMMU on the northbridge. The compro-
mised OS and manipulated devices may modify the conﬁgura-
tion of this hardware to suppress or mis-transform MSI signals.
Thus, the HV must also conﬁgure and protect the correspond-
ing registers on that interpreting hardware to enable and cor-
rectly transform MSI messages.
To defend against the MSI spooﬁng attacks, the trusted-path
hypervisor conﬁgures the corresponding interrupt remapping
table entry to only accept MSI messages with the DE’s device
identiﬁer. As shown in Figure 4, spoofed interrupts generated
by manipulated devices do not have the interrupt identiﬁer of
the DE, and thus are ﬁltered out by the IOMMU. Note that this
defense mechanism relies on the assumption that the IOMMU
can correctly identify the MSI issuer (similar to identifying the
sender of DMA requests). We discuss this assumption in more
detail in Section 6.1.
Throughout the trusted-path session, the HV protects all the
above registers and tables using the mechanisms described in
Sections 5.1 - 5.3.
5.4.3
Isolating Inter-Processor Interrupts
During a trusted-path session, CPUs that run the OS can
leverage Inter-Processor Interrupts (IPIs) to forward unserviced
hardware interrupts to the trusted-path program endpoint (Fig-
ure 4). The OS issues those IPIs by writing special data to
the Interrupt Command Register (ICR) of the LAPIC. The data
carries information including the interrupt type, vector number,
and delivery destination.
Challenges.
Because the DE’s interrupts are exclusively
routed to the associated program endpoint, and that program
endpoint only handles interrupts from its device endpoints, any
unserviced device interrupts forwarded from other CPUs to the
PE should be treated as spoofed interrupts.
Defending against these spoofed interrupts requires care.
First, when delivering interrupts to the CPU, the LAPIC does
not distinguish between IPIs and interrupts directly from de-
vices. IPIs with the DE’s interrupt vector number are always
delivered to the PE. Second, the IOMMU is not used for inter-
cepting IPI messages, and is often not on the path between two
LAPICs. Third, memory protection mechanisms (Section 5.2)
of the hypervisor HV do not work. When access to the ICR is
trapped into the HV via memory access violations, the contents
of the memory write are not reported to the HV [3, 32]. The HV
cannot determine what IPIs are sent without knowing the value
written to the ICR. Note that the HV cannot blindly block all
IPIs, since some of them are for important system management
purposes such as cache coherency.
Solution. To prevent spoofed IPIs, our trusted-path hypervi-
sor employs a mechanism to control the LAPICs by enabling
the LAPIC x2APIC mode.
In x2APIC mode, LAPIC regis-
ters are accessed via Model Speciﬁc Registers (MSR) access
instructions, which are privileged instructions that can be inter-
cepted by the hypervisor. Fortunately, an MSR access violation
does report to the hypervisor the value being written that trig-
gered the violation. Therefore, during the trusted-path session,
the hypervisor HV intercepts all data writes to the ICRs of all
other CPUs that run the OS, and blocks only the data writes that
trigger spoofed IPIs to the PE. This interception remains active
until the trusted-path is torn down. In Section 6.4, we also pro-
pose some architecture modiﬁcations that would help simplify
our protection mechanism here.
6 I/O Architectural Suggestions
We make suggestions for changes to the commodity x86 I/O
architecture that would signiﬁcantly simplify the design of our
trusted-path solution.
6.1 DMA Request Ambiguity
DMA-capable peripherals that are the downstream of one or
more PCI/PCI-to-PCIe bridges cannot be uniquely identiﬁed
by the system’s IOMMU, enabling devices in such locations
to impersonate other nearby devices. Manipulated devices may
leverage this attack to violate the isolation of the DMA memory
region of the trusted-path device endpoint [48].
We ﬁrst describe a software work-around to this DMA re-
quest ambiguity problem, which provides the desired security
properties but incurs signiﬁcant performance overhead. The
HV identiﬁes all devices behind the same PCI/PCI-to-PCIe
bridges that connect the DE by enumerating the PCI conﬁgura-
tion space. Before executing the PE, these devices are put into
a quiescent state (e.g., sleep, or a pending state). The HV can
verify the devices’ quiescent state by reading device-speciﬁc
status registers before approving the execution of the PE. Dur-
ing the PE’s execution, the HV prevents the compromised OS
from waking the pending devices by interposing on the relevant
I/O ports and memory ranges (Sections 5.1 and 5.2).
However, quiescing all devices sharing the same PCI/PCI-to-
PCIe bridge with a trusted-path DE reduces I/O performance.
During the execution of the trusted path PE, an OS cannot
communicate with any of those devices. To eliminate this un-
comfortable trade-off between trusted-path security and per-
formance, we suggest several potential architectural changes.
First, motherboard manufacturers can conﬁgure a system that
supports trusted path by assigning only one PCI device to each
PCI or PCI-to-PCIe bridge. Alternatively, the PCI/PCI-to-PCIe
bridge design speciﬁcations might be changed to transmit the
identiﬁers of the originating devices when relaying I/O transac-
tions. A third proposal is to enhance the DMA request ID spec-
iﬁcations to include additional information, such as the con-
tents of the PCI vendor ID and device ID conﬁguration register
ﬁelds. This information should not be changed or replaced by
PCI/PCI-to-PCIe bridges.
6.2 Unmonitored Peer-Device Communication
Manipulated PCI/PCIe and USB 2.0+ devices may establish
peer-to-peer connections with a trusted-path device endpoint,
bypassing all isolation mechanisms implemented by the hy-
pervisor [49, 59, 60]. PCI/PCIe peer-to-peer communication
623
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:11 UTC from IEEE Xplore.  Restrictions apply. 