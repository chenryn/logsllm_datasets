‚Ä¢ Trick the enclave into using the value stored at the anchor
for a control-flow transfer.
Figure 7: Enclave memory corruption by SmashEx during ex-
ception handling in Intel SGX SDK. The attacker is able to
control the stack pointer in the SSA (in red) and the anchor
on the enclave private stack (in blue). The other data that
the attacker can control in SmashEx is shown in gray.
Step 5: Pointing the Stack Pointer to Attacker Memory. A
ROP attack requires the attacker to control data on the victim‚Äôs
stack so gadgets can be strung together through a series of return
addresses. As illustrated in Figure 7, in the exception handling
process (Section 2), the in-enclave exception handler copies the
register state stored in the SSA region into a region of the enclave
private stack (say ùëÄ). This SSA state consists of a group of registers
which the SGX hardware has saved during the AEX event, and
which, as explained earlier, are attacker-controlled. The attacker
may therefore use ùëÄ to store the gadget addresses. To make the
enclave use this region as its stack, the attacker needs to point the
enclave rsp value to it after the ocall return is completed. This
can be easily done by setting the anchor value to the address of
a gadget that moves the value of a register (which the attacker
already controls through returning from ocall) into rsp.
SmashEx does not require the memory region for preparing the
gadget addresses to be the same as the region ùëÄ. Since the SGX
hardware allows an enclave to use a stack inside the public memory,
the attacker can simply set up the gadget addresses in a buffer in
the host process (located in the public memory), and use the same
method to point rsp to it. We use this strategy for our exploit on
Open Enclave and the earlier one for Intel SGX SDK.
Step 6: Effecting a Control Transfer Using the Anchor. After
Step 5, the region ùëÄ itself is the stack with attacker-controlled
values and the stack pointer (rsp) points to it. This is part of what
we need to start a ROP attack. It remains to cause a control-flow
transfer with the corrupted anchor value (Figure 5c). The exception
handler does not immediately use the anchor value after the copy
logic. Several control transfers and context switches2 happen before
the anchor is used, but the content of ùëÄ remains unchanged.
Note that although it is possible to set the anchor to any value,
pointing it to the public memory will merely crash the enclave
(hence falling short of a code-reuse attack) since SGX enclaves
2The exception handler performs several other operations and exits the enclave using
an EEXIT instruction to the untrusted code, which then performs an ERESUME instruc-
tion to transfer control back to the enclave to complete the exception handling and the
ocall return flow interrupted. This part of the logic uses the anchor in a control-transfer
instruction√êthis is why we chose the anchor to be the return address used in resuming
after the last ocall.
6
Copied during exception handling‚Ä¶‚Ä¶ocallarg2ocallarg1ocallret_addrRBP‚Ä¶‚Ä¶‚Ä¶Attacker-controlled stack MSSA region‚Ä¶RDXRBXRSPRBPRSIRDIR8~R15‚Ä¶Anchor‚Ä¶‚Ä¶Session 3B: Operating Systems CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea784attacker sets the source to a prepared shellcode in the public mem-
ory and the destination to an executable and writable region in the
enclave private memory, it will be able to inject the shellcode to the
enclave. The attacker can then point the subsequent return address
on the external stack to the injected shellcode in the enclave to
execute it. Since certain applications such as JIT compilers need ex-
ecutable and writable enclave memory regions, SmashEx can inject
and execute arbitrary code. On an SGX2 platform where dynamic
adjustment of enclave page permissions is supported, SmashEx can
use ROP gadgets to make certain pages executable and writable
before injecting and executing the shellcode.
Other Desirable ROP Gadgets. In addition to the ROP gadget
chains discussed above, the attacker may also use others that serve
a wide range of goals. Prior work [31] has concluded that a ROP
attack in an SGX enclave can be very expressive. More specifically,
special gadgets available in an SGX runtime (e.g., Intel SGX SDK)
enable the attacker to control the entire register file if it already
controls rsp, rdi and rsi. SmashEx meets this criterion required
by previous attacks. We can therefore reproduce any attacks shown
by this prior work3 but without their assumptions of common
memory vulnerabilities such as buffer overflow in the enclave code.
7 ATTACKING REAL SYSTEMS
We present the low-level implementation challenges in executing
end-to-end attacks on two applications as case studies: an OpenSSL
port with Intel SGX SDK and a cURL port with Open Enclave.
We run all the victim enclaves and the SmashEx exploits on an
Intel NUC Kit NUC7PJYH with SGX2 support, 8 GB DRAM, 128 MB
EPC, and a Ubuntu 18.04 installation (Linux kernel 5.4.0-72). For
SGX enclave runtimes, we use Intel SGX SDK 2.13, SGX driver 2.11,
and Open Enclave 0.15.0 [46], since these are the latest versions
available at the time of our experiments.
7.1 Intel SGX SDK
Case Study: OpenSSL v1.1.1i. Intel SGX SSL [17] is a crypto-
graphic library that uses OpenSSL [21] to provide general-purpose
cryptographic services (e.g., key generation, encryption/decryption
operations, decision-making statements) for SGX enclave applica-
tions. For our end-to-end attack, we target a test program bundled
with Intel SGX SSL, where the enclave generates a public/private
RSA key pair. By leaking this private key, we show that SmashEx
can breach the Intel SGX protections.
We have to locate the target in-enclave secret before we can
launch SmashEx. For this purpose, we disable ASLR system-wide
and pre-run the enclave once to record the addresses. In our attack
run, we wait for the enclave to invoke a specific ocall that reports
the result to the user after finishing the computation. We choose to
start our attack after this ocall, because by this point, the enclave
has created the private key in its private memory. To copy the
secret key to the public memory, we use the memcpy gadget chain
described in Section 6. The attack causes the enclave to copy the
1024-bit key to the public memory.
3For example, the attacker can chain the asm_oret and continue_execution gadgets
in Intel SGX SDK or oe_longjmp and oe_continue_execution in Open Enclave to
control a wider range of registers [31].
7
Figure 8: A chain of ROP gadgets in the malicious stack to
invoke memcpy with attacker-controlled arguments.
cannot execute code from public memory. For this reason, we must
confine the anchor value to private memory addresses.
Achieved Capability. At the end of Steps 5 and 6, the enclave
starts executing with the stack content controlled by the attacker.
By carefully crafting the stack content, the attacker is able to convert
this capability to a full-blown ROP exploit.
6 ROP EXPLOITS
At this point, the attacker can already control both the enclave
instruction pointer (rip) and the enclave stack content. Next, we
escalate the attacker‚Äôs capability to being able to execute a sequence
of ROP gadgets that exist in the enclave code [50]. We discuss the
ways to achieve this for two different goals: to steal enclave secrets
and to execute desirable ROP gadgets.
Goal 1. Compromising Enclave Confidentiality. Enclave run-
times (e.g., Intel SGX SDK, Open Enclave SDK) usually implement
their own memcpy function for in-enclave operations. Such a func-
tion performs memory copy on any accessible memory location
regardless of the enclave boundary, and accepts three arguments
that specify the source and the destination as well as the size of
the data to copy. The three arguments are passed in registers rdi,
rsi, and rdx. We can use this function in our chain of gadgets.
First, we set up arbitrary values into registers using memory-to-
register move gadgets. Then we chain a gadget to invoke the memcpy
function. This allows us to move arbitrary regions of memory to
arbitrary locations. For example, we can point the source address
argument to the start of the enclave and destination address to
a public memory region. Such a gadget will dump the entire en-
clave memory. Alternatively, we can point the source to sensitive
data (e.g., SSL keys, enclave ephemeral keys) to selectively leak se-
crets. To compromise enclave confidentiality, we use ROP gadgets
to manipulate the enclave to execute a memcpy function. Through
manual inspection, we find and locate memcpy implementations
in the trusted runtime code of both Intel SGX SDK and Microsoft
Open Enclave. We also find three pop reg; ret gadgets in the
runtimes that allow the attacker to populate the three registers with
values from the attacker-controlled external stack. As illustrated
in Figure 8, the attacker can perform the desired memcpy and steal
enclave secrets by chaining the ROP gadgets on the external stack.
Goal 2. Arbitrary Code Injection in Enclave. Similarly, the at-
tacker can copy arbitrary code to the enclave memory and execute
it. It points the source to a malicious code payload outside the
enclave and the destination to an enclave page. Specifically, if the
Effective code due to ROPGadgetsAttacker-controlled stack Mmov dst, %rdimov src, %rsimov len, %rdxjmpmemcpypop %rdiretpop %rsiretpop %rdxretdstsrclenmemcpySession 3B: Operating Systems CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea785Implementation Challenges. We encountered the following two
main challenges when launching SmashEx against Intel SGX SDK.
Bypassing overrun and alignment checks. During exception han-
dling, the SGX runtime performs security checks to sanitize and
ensure consistency of certain enclave states. For instance, the in-
enclave exception handler (see Listing 1) derives the stack pointer
from the SSA. Then it checks that the stack pointer is a valid enclave
stack address and satisfies a pre-defined alignment requirement.4
We set the malicious stack pointer to a legitimate enclave stack
address that obeys the required alignment to pass those checks.
1 ... // check validity of thread_data, tcs, stack canary, enclave state,
exception flag, ssa region
2 ssa_gpr = reinterpret_cast(thread_data->first_ssa_gpr);
3 sp = ssa_gpr->REG(sp);
4 ... // check stack overrun
5 info = (sgx_exception_info_t *)sp;
6 if(ssa_gpr->exit_info.valid != 1) { // exception handlers are not allowed to
call in a non-exception state
goto default_handler;
7
8 }
9 ...
10 info->cpu_context.r8 = ssa_gpr->r8;
11 ...
12 info->cpu_context.r15 = ssa_gpr->r15;
13 ... // alignment will be checked after exception is handled
Listing 1: Operations and security checks during exception
handling in Intel SGX SDK.
The ocall return logic (see Listing 2) also includes important
checks that our attack has to circumvent. For instance, before restor-
ing the ocall context,5 the enclave sanitizes the ocall context
pointer to ensure that it is on the enclave stack (Lines 3 and 5). In
addition, the enclave checks the validity of part of the ocall con-
text content (Lines 7 and 9). However, those checks do not cover the
data that SmashEx needs to overwrite. We craft a legitimate stack
pointer value to control the anchor without corrupting the checked
memory region. In this way, our attack bypasses the checks.
1 uintptr_t last_sp = thread_data->last_sp;
2 ocall_context_t *context = reinterpret_cast(thread_data->
last_sp);
return SGX_ERROR_UNEXPECTED;
return SGX_ERROR_UNEXPECTED;
return SGX_ERROR_UNEXPECTED;
3 if(0 == last_sp || last_sp  thread_data->stack_base_addr - 30 * sizeof(size_t))
6
7 if(context->ocall_flag != ocall_flag)
8
9 if(context->pre_last_sp > thread_data->stack_base_addr ||
10
11
12 thread_data->last_sp = context->pre_last_sp;
13 asm_oret(last_sp, ms);
context->pre_last_sp <= (uintptr_t)context)
return SGX_ERROR_UNEXPECTED;
Listing 2: Security checks before restoring the ocall context
in Intel SGX SDK.
Restoring host process stack after AEX. Recall that in Step 1 of
SmashEx, we prepare the rsp with a malicious address that points
to the enclave private memory. When we trigger an AEX in Step 2,
the hardware retains the rsp even after exiting the enclave. Ad-
ditionally, the hardware transfers control to the OS for kernel ex-
ception handling. The kernel generates a corresponding signal for
4In Intel SGX SDK 2.13, the is_valid_sp function performs such checks.
5ocall context is a data structure on the enclave stack that stores the context of the
enclave before an ocall.
the exception and wants to deliver the signal to the host process.
The kernel attempts to do this by using the rsp to place the signal-
related information on the host process stack. Since the rsp still
points to an in-enclave address, the kernel cannot perform this
operation. However, for Step 3 of our SmashEx, it is necessary that
the attacker handle this signal in the host process. We ensure that
when the OS accesses the rsp it is pointing to a host stack location
with the sigaltstack() system call, which allows a user process
to specify a separate signal handling stack. Alternatively, when the
attacker moves malicious values to rsp in Step 1, we can save the
current rsp in the host process. After the AEX, when the control
comes to the kernel, we restore the saved rsp value to the rsp
register. Note that the malicious rsp value has already been stored
in the SSA at this point. Therefore, we can safely change the rsp.
Our PoC integrates those two mechanisms to overcome the
implementation quirks of Intel SGX SDK.
7.2 Open Enclave SDK
Case Study: cURL v7.67.1. The cURL library implements a wide
range of application-layer network protocols, including HTTP,
HTTPS, SMTP, and so on. Open Enclave provides an official port
of cURL [47] to allow applications that require secure network pro-
tocols (e.g., HTTPS) to benefit from the protection of SGX. The
enclave private memory contains several pieces of sensitive in-
formation such as secure channel keys, enclave private keys, and
HTTPS plaintext responses.
We run SmashEx on an Open Enclave cURL test program and
dump the whole enclave private memory to the public memory.
This will allow us to extract all the secrets inside the enclave private
memory. We obtain the virtual address ranges of the enclave pri-
vate memory regions by consulting the untrusted library of Open
Enclave. The library is responsible for creating the enclave, and is
therefore aware of the enclave address space layout. To ensure that
the enclave private memory contains secret data at the time of our
attack, we wait for the enclave to finish sufficient ocalls before
launching the attack. In our experiment, we wait until right after
the 150ùë°‚Ñé ocall to start SmashEx, where we use the gadgets from
Section 6 to dump the enclave content. The dumped data in our
experiment includes secrets such as plaintext HTTPS responses.
Configuring the APIC Timer. We use the APIC timer to trigger
the AEX at the precise moment [60]. Typically, only the OS kernel
can configure the APIC timer. However, in order to trigger the
exception at precisely the first instruction of the enclave, we want
to shorten the time gap between configuring the APIC timer and
entering the enclave. Therefore, instead of configuring the APIC
timer inside the kernel space, we map the interface of the APIC
timer (memory-mapped I/O) directly to the address space of the
host process, and configure the APIC timer in the user space shortly
before entering the enclave via EENTER.
8 ATTACK EXTENSIBILITY
The ramifications of unsafe re-entrancy in enclave handlers go
beyond the target platform configurations√êhardware version and
runtime√êwe used for our end-to-end attacks.
8
Session 3B: Operating Systems CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea7868.1 Extensibility to SGX1
SGX1 and SGX2 have the same exception handling mechanism.
The main difference is that in SGX2, the enclave can request the
hardware to notify the enclave about certain exceptions, such as
page faults. This allows enclaves to dynamically manage memory.
The attack steps described so far assume SGX2, but they largely
also apply to SGX1. Unlike SGX2, SGX1 does not support reporting
page faults to the enclave. When such an event occurs, the SGX1
hardware performs an AEX, but with one difference to SGX2: it
does so without setting SSA.EXITINFO.valid, a field in the SSA
region, to 1. Both Intel SGX SDK and Open Enclave perform a
validity check on this field in their exception handlers and only
execute the handler if SSA.EXITINFO.valid is 1. In Open Enclave,
by the time this check is done, SmashEx can already corrupt the