A. Current Content Blocking Focuses on URLs
Current content-blocking tools, both in research and pop-
ularly deployed, make access decisions based on URLs. Ad-
Block Plus and uBlock Origin, for example, use crowd-sourced
ﬁlter lists (i.e. lists of regex-like patterns) to distinguish trusted
from untrusted URLs.
Other content blockers make decisions based on the domain
of a resource, which can be generalized as broad rules over
URLs. Examples of such tools include Ghostery, Firefox’s
“Tracking Protection”, Safari’s “Intelligent Tracking Protec-
tion” system, and Privacy Badger. Each of these tools build
trust labels over domains, though they differ in both how they
determine those labels (expert-curated lists in the ﬁrst two
cases, machine-learning-like heuristics in the latter two cases),
and the policies they enforce using those domain labels.
Finally, tools like NoScript block all script by default, which
conceptually is just an extremely general, global trust label
over all scripts. NoScript too allows users to create per-URL
exception rules.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:12:35 UTC from IEEE Xplore.  Restrictions apply. 
1716
B. URL-Targeting Systems Are Circumventable
C. Problem - Detection Mismatch
Relying on URL-level trust determinations leaves users vul-
nerable to practical, trivial circumventions. These circumven-
tions are common and well understood by the web privacy and
security communities. However, these communities lack both a
way to measure the scale of the problem and deploy practical
counter measures. The rest of this subsection describes the
techniques used to evade current content-blocking tools:
1) Changing the URL of Unwanted Code: The sim-
plest evasion technique is to change the URL of the un-
wanted code, from one identiﬁed by URL-based blocking
tools to one not identiﬁed by blocking tools. For example,
a site wishing to deploy a popular tracking script (e.g.,
https://tracker.com/analytics.js), but which is blocked by ﬁlter
lists, can copy the code to a new URL, and reference the code
there (e.g., https://example.com/abc.js). This will be successful
until
the new URL is detected, after which the site can
move the code again at little to no cost. Tools that generate
constantly-changing URLs, or which move tracking scripts
from a third-party to the site’s domain (ﬁrst party) are a
variation of this evasion technique.
2) Inlining Tracking Code: A second evasion technique is
to inline the blocked code, by inserting the code into the text of
a  tag (as opposed to having the tag’s src attribute
point to a URL, i.e., an external script). This process can be
manual or automated on the server-side, to keep inlined code
up to date. This technique is especially difﬁcult for current
tools to defend against, since they lack a URL to key off.1
3) Bundling Tracking Code with Benign Code: Trackers
also evade detection by bundling tracking-related code with
benign code into a single ﬁle (i.e., URL), and forcing the
privacy tool
to make a single decision over both sets of
functionality. For example, a site which includes tracking
code in their page could combine it with other, user-desirable
code units on their page (e.g., scripts for performing form
validation, creating animations, etc.) and bundle it all together
into a single JavaScript unit (e.g., combined.min.js). URL-
focused tools face the lose-lose decision of restricting the
resource (and breaking the website, from the point of view
of the user) or allowing the resource (and allowing the harm).
Site authors may even evade ﬁlter lists unintentionally.
Modern websites use build tools like WebPack2, Browserify3,
or Parcel4 that combine many JavaScript units into a single,
optimized script. (Possibly) without meaning to, these tools
bypass URL-based blocking tools by merging many scripts, of
possibly varying desirability, into a single ﬁle. Further, these
build tools generally “minify” JavaScript code, or minimize the
size and number of identiﬁers in the code, which can further
confuse naive code identiﬁcation techniques.
1One exception is uBlock Origin, which, when installed in Firefox, uses
non-standard API’s[17] to allow some ﬁltering of inline script contents.
However, because this technique is rare, and also trivially circumvented, we
do not consider it further in this work.
2https://webpack.js.org/
3http://browserify.org/
4https://parceljs.org/
The root cause for why URL-based tools are trivial
to
evade is the mismatch between what content blockers want
to block (i.e.,
the undesirable script behaviours) and how
content blockers make access decisions (i.e., how the code
was delivered to the page). Attackers take advantage of this
mismatch to evade detection; URLs are cheap to change,
script behavior is more difﬁcult to change, and could require
changes to business logic. Put differently, an effective privacy-
preserving tool should yield the same state in the browser after
executing the same code, independent of how the code was
delivered, packaged, or otherwise inserted into the document.
We propose an approach that aligns the content blocking
decisions with the behaviors which are to be blocked. The rest
of this paper presents such a system, one that makes blocking
decisions based on patterns of JavaScript behavior, and not
delivery URLs. Doing so provides both a way to measuring
how often evasions currently occur, and the basis of a system
for providing better, more robust privacy protections.
III. METHODOLOGY
This section presents the design of a system for building
signatures of the privacy-and-security relevant behavior of
JavaScript code, per event loop turn [26], when executed in a
web page. The web has a single-threaded execution model, and
our system considers the sum of behaviors each script engages
in during each event loop turn, from the time the script begins
executing, until the time the script yields control.
In the rest of this section, we start by describing why build-
ing these JavaScript signatures is difﬁcult, and then show how
our system overcomes these difﬁculties to build high-ﬁdelity,
per event-loop-turn signatures of JavaScript code. Next, we
discuss how we determined the ground truth of privacy-and-
security harming behaviors. Finally, we demonstrate how we
build our collection of signatures of known-harmful JavaScript
behaviors (as determined by our ground truth), and discuss
how we ensured these signatures have high precision (i.e., they
can accurately detect the same privacy-and-security harming
behaviors occurring in different code units).
A. Difﬁculties in Building JavaScript Signatures
Building accurate signatures of JavaScript behavior is dif-
ﬁcult for many reasons, many unique to the browser environ-
ment. First, ﬁngerprinting JavaScript code on the web requires
instrumenting both the JavaScript runtime and the browser
runtime,
to capture the downstream effects of JavaScript
DOM and Web API operations. For example, JavaScript code
can indirectly trigger a network request by setting the src
attribute on an  element.5 Properly ﬁngerprinting such
behavior requires capturing both the attribute modiﬁcation
and the resulting network request, even though the network
request is not directly caused by the script. Other complex
patterns that require instrumenting the relationship between
the JavaScript engine and the rendering layer include the
5Google Analytics, for example, uses this pattern.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:12:35 UTC from IEEE Xplore.  Restrictions apply. 
1717
unpredictable effects of writing to innerHTML, or writing
text inside a  element, among many others.
Second, the web programming model, and the extensive
optimizations applied by JavaScript engines, make attributing
script behaviors to code units difﬁcult. Callback functions,
eval, scripts inlined in HTML attributes and JavaScript
URLs, JavaScript microtasks,6 and in general the async nature
of most Web APIs make attributing JavaScript execution to
its originating code unit extremely difﬁcult, as described by
previous work.7 Correctly associating JavaScript behaviors
to the responsible code unit requires careful and extensive
instrumentation across the web platform.
Third, building signatures of JavaScript code on the web
is difﬁcult because of the high amount of indeterminism on
the platform. While in general JavaScript code runs single
threaded, with only one code unit executing at a time, there is
indeterminism in the ordering of events, like network requests
starting and completing, behaviors in other frames on the
page, and the interactions between CSS and the DOM that
can happen in the middle of a script executing. Building
accurate signatures for JavaScript behavior on the web requires
carefully dealing with such cases, so that generated signatures
include only behaviors and modiﬁcations deterministically
caused by the JavaScript code unit.
B. Signature Generation
Our solution for building per-event-loop signatures of
JavaScript behavior on the web consists of four parts: (i) accu-
rately attributing DOM modiﬁcations and Web API accesses to
the responsible JavaScript unit (ii) enumerating which events
occur in a deterministic order (and excluding those which vary
between page executions) (iii) extracting both immediate and
downstream per-event-loop-turn activities (iv) post-processing
the extracted signatures to address possible ambiguities.
This subsection proceeds by giving a high-level overview of
each step, enough to evaluate its correctness and boundaries,
but excluding some low-level details we expect not to be useful
for the reader. However, we are releasing all of the code of this
project to allow for reproducibility of our results and further
research [5].
1) JavaScript Behavior Attribution: The ﬁrst step in our
signature-generation pipeline is to attribute all DOM mod-
iﬁcations, network requests, and Web API accesses to the
responsible actor on the page, usually either the parser or
a JavaScript unit. This task is deceptively difﬁcult, for the
reasons discussed in Section III-A, among others.
To solve this problem, we used and extended PageGraph,8
a system for representing the execution of a page as a directed
graph. PageGraph uses nodes to represent elements in a
website’s environment (e.g., DOM nodes, JavaScript units,
fetched resources, etc.) and edges to describe the interaction
between page elements. For example, an edge from a script
6https://javascript.info/microtask-queue
7Section 2.C. of [19] includes more discussion of the difﬁculties of
JavaScript attribution
8https://github.com/brave/brave-browser/wiki/PageGraph
Fig. 1. Simpliﬁed rendering of execution graph for https://theoatmeal.com.
The highlighted section notes the subgraph attributed to Google Analytics
tracking code.
element to a DOM node might encode the script setting an
attribute on that DOM node, while an edge from a DOM
node to a network resource might encode an image being
fetched because of the src attribute on an  node.
Figure 1 provides a simpliﬁed example of a graph generated
by PageGraph.
All edges and nodes in the generated graphs are fully
ordered, so that
the order that events occurred in can be
replayed after the fact. Edges and nodes are richly annotated
and describe, for example,
the type of DOM node being
created (along with parents and siblings it inserted alongside),
the URL being fetched by a network request, or which internal
V8 script id9 a code unit in the graph represents.
We use PageGraph to attribute all page activities to their
responsible party. In the following steps we use this informa-
tion to determine what each script did during each turn of the
event loop.
2) Enumerating Deterministic Script Behaviors: Next, we
selected page events that will happen in a deterministic order,
given a ﬁxed piece of JavaScript code. While events like DOM
modiﬁcations and calls to (most) JavaScript APIs will happen
in the same order each time the same script is executed, other
relevant activities (e.g., the initiation of most network requests
and responses, timer events, activities across frames) can hap-
pen in a different order each time the same JavaScript code is
executed. For our signatures to match the same JavaScript code
across executions, we need to exclude these non-deterministic
behaviors from the signatures that we generate.
Table I presents a partial listing of which browser events
occur in a deterministic order (and so are useful inputs to code
signatures) and which occur in a non-deterministic ordering
(and so should not be included in signatures).
3) Extracting Event-Loop Signatures: Next, we use the
PageGraph generated graph representation of page execu-
9https://v8docs.nodesource.com/node-0.8/d0/d35/classv8 1 1 script.html
1718
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:12:35 UTC from IEEE Xplore.  Restrictions apply. 
Instrumented Event
HTML Nodes
node creation
node insertion
node modiﬁcation
node deletion
remote frame activities
Network Activity
request start
request complete
request error
API Calls
timer registrations
timer callbacks
JavaScript builtins
storage access
other Web APIs
Privacy?
Deterministic?
no
no
no
no
no
yes
no
no
no
no
no
yes
no4
yes
yes
yes
yes
no
some1
some1
some1
yes
no
some2
yes3
some
1 Non-async scripts, and sync AJAX, occur in a deterministic order.
2 Most builtins occur in deterministic order (e.g. Date API), though there
are exceptions (e.g. setTimeout callbacks).
3 document.cookie, localStorage, sessionStorage,
and
IndexedDB
4 While many Web API can have privacy effects (e.g. WebRTC, browser
ﬁngerprinting, etc.) we do not consider such cases in this work, and focus
only on the subset of privacy-sensitive behaviors relating to storage and
network events.
PARTIAL LISTING OF EVENTS INCLUDED IN OUR SIGNATURES, ALONG
WITH WHETHER WE TREAT THOSE EVENTS AS PRIVACY RELEVANT, AND
WHETHER THEY OCCUR IN A DETERMINISTIC ORDER, GIVEN THE SAME
TABLE I
JAVASCRIPT CODE.
Fig. 2. PageGraph signature generation. The red node represents a script
unit that executed privacy-related activity and the green nodes are the ones
affected by the script unit during one event loop turn. The extracted signature
is a subgraph of the overall PageGraph.
tion, along with the enumeration of deterministic behaviors,
to determine the behaviors of each JavaScript unit during
each event loop turn (along with deterministically occurring
“downstream” effects in the page). Speciﬁcally, to obtain the
signature of JavaScript behaviors that happened during one
event-loop turn, our approach extracts the subgraph depicting
the activities of each JavaScript unit, for each event loop turn,
that occurred during page execution (see Figure 2). However,
for the sake of efﬁciency, we do not generate signatures of
script activity that do not affect privacy. Put differently, each
signature is a subgraph of the entire PageGraph generated
graph, and encodes at least one privacy-relevant event. Here-
after we refer to the extracted signatures, which depict the per-
event-loop behaviors of JavaScript, as event-loop signatures.
For the purposes of this work, we consider privacy-and-
Fig. 3. Simpliﬁed signature of Google Analytics tracking code. Edges are
ordered by occurrence during execution, and nodes depict Web API and DOM