### 1. Introduction

Weis et al. propose a method for encrypting the reader's transmissions to prevent passive eavesdroppers from inferring the IDs being read. However, this method does not protect against active attacks and relies on the assumption of a shared secret string among tags, which is somewhat unrealistic. This assumption can be removed if the tags can generate their own random pseudo-IDs before singulation. Our selective blocking approach is compatible with this method of protecting reader transmissions from eavesdroppers.

We also note that methods such as "silent tree-walking" and "hash-lock" for constructing "smart" RFID tags involve cryptographic operations on the tags, making them economically impractical for the near future, as smart RFID chips would be too expensive.

### 1.6 The Regulation Approach

Garfinkel [5] proposes an alternative approach based on an "RFID Bill of Rights," consisting of five articles as a voluntary framework for the commercial deployment of RFID tags. These rights include:
1. The right of consumers to know which items have RFID tags.
2. The right to have tags removed or deactivated upon purchase.
3. The right of consumers to access the data associated with an RFID tag.
4. The right to access services without mandatory use of RFID tags.
5. The right to know when, where, and why the data in RFID tags is accessed.

### 1.7 Organization

In Section 2, we describe how tree-walking singulation algorithms work. Section 3.1 then explains how blocker tags function in systems using tree-walking. In Section 4, we focus on the use of blocker tags as privacy protection devices. Section 5 considers blocker tags as a denial-of-service threat and explores detection measures. We conclude in Section 6 with summary recommendations and a discussion of future research topics.

### 2. Tree-Walking Singulation Protocols

Our approach is based on selectively blocking the singulation protocol used by RFID readers. In this section, we present and discuss the tree-walking singulation protocol to provide context for our blocker tags.

An RFID reader can communicate with only one RFID tag at a time. If multiple tags respond to a query, the reader detects a collision and cannot read any of the transmitted information accurately. To resolve this, the reader and tags must engage in a singulation protocol, which enables the reader to communicate with each tag individually. While there are several available singulation protocols, our focus is on the tree-walking technique, as it is likely to be the most common and supports more flexible blocking modes.

RFID-tag systems typically operate at frequencies of either 13.56 MHz or 915 MHz. Systems operating at 915 MHz often use tree-walking for singulation and are expected to be the most common type in the United States. Tags operating at 13.56 MHz usually use the ALOHA protocol for singulation, but our techniques are adaptable to this protocol as well.

#### 2.1 The Tree-Walking Singulation Algorithm

The tree-walking singulation algorithm allows an RFID reader to identify the serial numbers of nearby tags individually through a bit-by-bit query process, similar to a depth-first search of a binary tree.

Suppose the tags in a given system have unique identifiers of some fixed bit-length \( k \) (e.g., \( k = 64, 96, \) or \( 128 \)). The set of all possible \( k \)-bit identifiers can be viewed as the leaves of a standard binary tree of depth \( k \). The root of this tree has depth 0 and is labeled with the empty string. A node of depth \( d \) is labeled with a binary string \( x \) of length \( d \); if \( d < k \), the node has two children at depth \( d + 1 \): a "left child" with label \( x0 \) and a "right child" with label \( x1 \).

A node at depth \( d \) in this tree can be uniquely identified by a binary prefix \( B = b_1b_2 \ldots b_d \), representing the sequence of branch labels traversed from the root to the node. Each of the \( 2^k \) leaves in the tree has a unique associated \( k \)-bit string, representing a distinct possible tag serial number.

The tree-walking algorithm is a recursive depth-first search performed by the reader starting at the root of the tree. At a given node \( B = b_1b_2 \ldots b_d \), the reader queries all tags with serial numbers in the corresponding subtree, instructing other tags to remain silent. The queried tags reply with the \( d+1 \)-th bit in their serial numbers. If there are tags in both the left and right subtrees of \( B \), a collision occurs, and the reader recurses on its child nodes \( B0 \) and \( B1 \). If the tags all reply with a single bit \( b \), the reader recurses on the node \( Bb \) and ignores the other (empty) subtree.

When the algorithm reaches a leaf (at depth \( k \)), it outputs the associated \( k \)-bit sequence, which is the serial number of the tag just read. The full output of the algorithm is a list of the ID numbers of all tags within range. The running time of this algorithm is bounded by the product of \( k \) and the number of tags being read.

### 3. Blocker Tags

Blocker tags can be used in two guises: as a privacy-protection tool and as a malicious tool.

#### 3.1 How a Blocker Tag Works

A basic blocker tag simulates the full set of \( 2^k \) possible RFID-tag serial numbers, effectively blocking the reading of all tags. This is achieved by broadcasting both a '0' and a '1' bit whenever the reader queries tags in the subtree of a given node, forcing the reader to recurse on all nodes and explore the entire tree. In practice, the reader stalls after reaching only a few hundred leaves due to the large size of the tree.

A selective blocker tag can simulate and block a subset of tags, targeting a particular zone for protection. For example, a selective blocker might reply only during execution of the tree-walking in the left subtree of the root, obstructing the reading of tags with a '0' prefix while allowing tags with a '1' prefix to be read without interference.

#### 3.2 Reader-Friendly Blocking Protocol

To address the issue of blocked subtrees, the tree-walking protocol can be revised to ignore blocked subtrees. For example, the reader could first ask whether a subtree is being blocked before proceeding with the standard next-bit query. This "polite blocking" approach allows the blocker tag to declare which subtrees it is blocking.

Another form of polite blocking involves the blocker tag announcing the policy it is implementing. This can be done using a small, designated range of "virtual" tag serial numbers, each corresponding to a pre-specified policy. This approach is viable for signaling a small set of pre-established privacy policies and works well with a limited number of privacy-designated zones.

#### 3.3 Cost Considerations

Our blocker-tag approach is attractive due to its low implementation cost. Consumer-product RFID tags do not need to be modified, and the blocker tags themselves can be very cheap, consisting of one or two standard RFID tags with slight circuit modifications. The background implementation is minimal, requiring only a password for each standard RFID tag to authorize changes to privacy zones.

### 4. Blocker Tags as Privacy Tools

In conclusion, blocker tags offer a flexible and cost-effective solution for protecting consumer privacy in RFID systems. They can be designed to block specific zones or ranges of tag IDs, providing targeted privacy protection while allowing unimpeded reading of tags in commercial environments.