2l1
qH
− qS + qH
+ ktAdd) + qH tRNG
− qH k!
2l2
− 1
2l2
(cid:19)
(cid:21)
(cid:1)
where tRNG, tAdd and tFA are the running time of a random number
generator, vector addition and FA function, respectively.
The intuition behind the reduction is as follows. The reduction
algorithm receives a value y∗ and attempts to find a preimage of y∗
under FA. The reduction algorithm plays the role of the challenger
(EU-CMA game) against A, and uses y∗ as one of the public-key
components yj∗, for random index j∗. It chooses all other public-key
components yi honestly.
The reduction algorithm does not know the entire signing key
(it does not know xj∗), so it uses its ability to program the random
oracle to generate simulated signatures. Specifically, it chooses the
signature (s, h) uniformly at random, and then programs H1 and
H2 so that the signature verifies.
Suppose A successfully constructs a forgery (s, h). Consider
rewinding the adversary to the point where it made the query
H2(M∥h), then continuing with independent randomness. The fork-
ing lemma states that, with good probability, the adversary will
output a forgery (s′, h) in this case as well. Importantly, the new
forgery will include the same h, hence:
h = H1(cid:169)(cid:173)(cid:171)FA(s) −
FA(s) −
yj(cid:170)(cid:174)(cid:172) = H1(cid:169)(cid:173)(cid:171)FA(s′) −
yj = FA(s′) −
j∈I′
j∈I
yj
Note that the two summations are over different multisets I , I′ of
indices.
Conditioning on the absence of a collision in H1, we have
yj(cid:170)(cid:174)(cid:172)
j∈I
j∈I′
Say that I and I′ are compatible if there is some index that appears
with multiplicity exactly once in I ∪ I′. Our reduction conditions
on the fact that I and I′ are always compatible. With independent
probability 1/t, we have that I and I′ are actually compatible with
respect to our special index j∗. Compatibility implies that we can
solve for y∗. Let’s say j∗ ∈ I \ I′, then:
y∗ = FA(s′) − FA(s) + 
yj −
yj
j∈I\{j∗}
j∈I′
The reduction algorithm knows the preimages to all yj terms on the
right-hand side. It is therefore possible to apply the homomorphic
property of FA and write the right-hand side as FA applied to a value
known to the reduction algorithm. In other words, the reduction
can compute a preimage of y∗.
Compatible index sets. Before describing the reduction in more
detail, we clarify the properties of compatible index sets.
Definition 4.2. Let I , I′ be strings which encode multisets in the
natural way as I = ⟨i1∥ · · · ∥ik⟩, etc. We say that I and I′ are com-
patible with respect to i if i appears with multiplicity 1 in I and
multiplicity 0 in I′ (or vice-versa). We say that I and I′ are com-
patible if they are compatible for some value i.
(cid:18)
∗ is compatible with all I1, . . . , Iq] ≥
Each I encodes k indices. In the worst case there are at most k!
other strings that encode a multiset that is incompatible with I. If
we have one fixed string I∗ and q other uniformly chosen strings
I1, . . . , Iq (all strings with l2 bits)
Pr[I
And hence:
Pr[I
∗ is not compatible with all I1, . . . , Iq] ≤ q · k!
2l2
We abbreviate the latter probability as Pr[Compat(q, k, l2)].
(cid:19)q ≥ 1 − q · k!
1 − k!
2l2
2l2
Reduction algorithm. Given an adversary A, we define the reduc-
tion algorithm/game B in Algorithm 4. B takes y∗ (an FA-output)
as input, as well as a list H of random oracle responses that it will
use to program H2. This interface is necessary for our usage of the
forking lemma.
B proceeds to simulate the EU-CMA game against A, implanting
y∗ within the public key and generating simulated signatures as
described above.
If A is successful in generating a forgery, then B outputs it, as
well as the index of the hash call corresponding to H2(M∗∥h∗). This
indicates to the forking lemma that we wish to rewind to this query
and resume with fresh randomness.
Claim 1. Pr[FORGERY] ≥ ϵA − qH qS +q2
H
negligible quantity is from the security of PRF.
2l1
+ negl(κ), where the
Proof. First, we compare the view of A in the reduction to its
view in the standard EU-CMA game. The only differences are:
(1) The xi values are chosen uniformly rather than pseudoran-
domly. This changes the adversary’s view by a negligible
amount.
(2) The signature is generated in “reverse order”. From the dis-
cussion in Subsection 3.2, real signatures are distributed uni-
formly, hence this difference has no effect on the adversary’s
view.
6
Algorithm 4 Reduction algorithm B.
1: function Initialize(y∗,H)
2:
3:
j∗ $← {1, . . . , t}
yj∗ ← y∗
$← Samp(1), for i ∈ {1, . . . , t} \ {j∗}
xi
yi ← FA(xi), for i ∈ {1, . . . , t} \ {j∗}
return PK ← (t, k, ⟨y1, . . . , yt⟩)
if L1[q] is not defined then
4:
5:
6:
7: function H1(q)
8:
L1[q] $← {0, 1}l1
h
L2[q] ← next unused value from H
˜r ← FA(s) −k
9:
return L1[q]
10:
11: function H2(q)
if L2[q] is not defined then
12:
13:
return L2[q]
14:
15: function Sig(M)
add M to set M
16:
$← Samp(ξ − ρ − 1)
17:
s
$← {0, 1}l1
I = ⟨i1∥ . . . ∥ik⟩ ← next unused value from H
if L1[˜r] or L2[M∥h] are defined then BAD1 ← 1; abort
L1[˜r] ← h
L2[M∥h] ← I
return (s, h)
if there is a duplicate value in L1 then BAD2 ← 1; abort
if [M∗ (cid:60) M] ∧ [SGN.Ver(M∗, σ∗, PK) = 1] then
18:
19:
20:
21:
22:
23:
24:
25: function Finalize(M∗, σ∗ = (s∗, h∗))
26:
27:
28:
29:
30:
31:
32:
FORGERY ← 1
let v be the index such that L2[M∗∥h∗] = H[v]
return (v, σ∗)
return (0, 0)
j=1 yij
else
Overall, we see that the adversary’s view is indistinguishable.
The only other difference between the reduction and EU-CMA
game is that the reduction may abort in the event of BAD1 or BAD2.
BAD1 happens when the reduction needs to program the random
oracles but they have already been queried on the desired point.
On line 21, the values ˜r and h are uniform, each with at least l1 bits
of entropy. Hence the probability that such a prior query has been
made is at most qH/2l1. Taking a union bound over all qS calls to
Sig, the overall probability of BAD1 is bounded by qSqH/2l1.
BAD2 happens when a collision is found in H1. This probability
is bounded by q
□
H/2l1.
2
Forking lemma. Now, we can consider invoking the forking
lemma (Lemma 2.1) with BA. The result is an algorithm ForkB
that has probability at least
(cid:18) Pr[FORGERY]
qH
(cid:19)
− 1
2l2
Pr[FORGERY]
7
of producing two forgeries. Note that these forgeries must be with
respect to the same M∗ and h∗ values because of the way that B
computes the index v of the “special” oracle query, and the fact
that the forking lemma ensures that this index is the same in both
“forks.” Each forgery verifies with respect to a different value of
H2(M∗∥h∗).
2 = (s∗
1 = (s∗
1, h∗) and σ∗
Claim 2. Let σ∗
2, h∗) be the two forgeries
output by ForkB, for message M∗. Let I1 be the value of H2(M∗∥h∗)
in the first “fork” and I2 be its value in the second “fork.” When I1
and I2 are compatible with respect to j∗, a preimage of y∗ can be
computed efficiently.
Proof. Following the high-level discussion, we can solve for a
(2)
k ⟩.
By symmetry, suppose j∗ appears in I1 but not I2. From the
(1)
preimage of y∗. Write I1 = ⟨i
k ⟩ and I2 = ⟨i
verification equation for these signatures we have:
(2)
1 ∥ · · · ∥i
(1)
1 ∥ · · · ∥i
Since B aborts if a collision was found in H1 (BAD2 event), we have
Isolating yj∗ = y∗ (which appears in the left summation but not
the right one) and using the homomorphic property of FA gives:
h
1) − k
∗ = H1(cid:169)(cid:173)(cid:171)FA(s∗
1) − k
FA(s∗
j=1
yi
(1)
j
y∗ = FA(s∗
1) − FA(s∗
(cid:170)(cid:174)(cid:172)
yi
(2)
j
j=1
2) − k
(cid:170)(cid:174)(cid:172) = H1(cid:169)(cid:173)(cid:171)FA(s∗
2) − k
k
j=1
yi
(2)
j
= FA(s∗
+
yi
(1)
j
j=1
yi
(1)
j
j=1
j=1
(1)
(cid:44)j∗
j
i
2) − k
2) − k
2 − k
i
j=1
(1)
(cid:44)j∗
j
xi
(1)
j
j=1
(1)
(cid:44)j∗
j
i
yi
(2)
j
k
j=1
FA(xi
k
+
j=1
(cid:170)(cid:174)(cid:174)(cid:174)(cid:174)(cid:174)(cid:172)
xi
(2)
j
= FA(s∗
1) − FA(s∗
) +
(1)
j
FA(xi