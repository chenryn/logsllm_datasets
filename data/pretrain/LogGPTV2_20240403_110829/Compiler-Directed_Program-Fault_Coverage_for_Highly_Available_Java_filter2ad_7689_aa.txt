# Compiler-Directed Program-Fault Coverage for Highly Available Java Internet Services

## Authors
Chen Fu, Richard P. Martin, Kiran Nagaraja, Thu D. Nguyen, Barbara G. Ryder, David Wonnacott

## Affiliations
- **Rutgers University, Department of Computer Science**
  - Chen Fu, Richard P. Martin, Kiran Nagaraja, Thu D. Nguyen, Barbara G. Ryder
  - Piscataway, NJ 08854
- **Haverford College, Department of Computer Science**
  - David Wonnacott
  - Haverford, PA 19041

## Abstract
We introduce a novel approach that leverages compiler-directed fault injection to evaluate the robustness of recovery code in Java-based Internet services against operating system and I/O hardware faults. We define a set of program-fault coverage metrics to quantify the execution of Java catch blocks during fault-injection experiments. Our method involves two key steps: instrumenting application code to direct fault injection at appropriate points and measuring the resulting coverage. As a proof of concept, we applied our techniques to Muffin, a proxy server, achieving an average of 85% coverage of expected faults per catch block.

## 1. Introduction
Various fault injection methods have been developed and studied [10, 11, 17, 20, 28]. However, these approaches often treat the application as a black box, focusing on observable behavior and probabilistic analysis [3]. While this is necessary for dependable software, it does not provide sufficient insight into how programming constructs, such as methods and statements, are affected by faults or ensure the exercise of recovery code. For example, a tester may want to know which operations in the code can be affected by a specific fault and whether all these operations have been tested.

In this paper, we propose using compiler analysis of application source or bytecode to enhance the availability of Internet services. Specifically, we explore a systematic technique for using compiler analyses to direct fault injection and measure the resulting coverage of recovery code. This approach helps testers identify vulnerabilities, locate them in the code, and observe how the software handles faults when they are injected. Our focus is on I/O hardware faults and resource exhaustion faults, which are more common than CPU or memory faults [31, 19].

Our contributions include:
- Exploring the connection between fault injection and coverage of program-recovery code in a layered system.
- Defining a white box coverage metric for testing fault-recovery code in Java applications.
- Describing compile-time techniques to automatically instrument Java code to direct fault injection and measure coverage.
- Presenting a feasibility study with a sample benchmark, achieving 100% coverage of four out of seven catch blocks, with an average of 85% of expected faults being caught.

## 2. Defining Coverage for Fault-Recovery Code
### 2.1 Comparing Definitions of Coverage
The dependability and software engineering communities use the term "coverage" differently. In dependability, coverage is the conditional probability that the system processes a fault correctly given its occurrence [9, 3]. In software engineering, coverage measures the fraction of the application exercised by a test in terms of specific constructs like statements and branches [26, 8, 23, 25].

### 2.2 Relating Faults to Exceptions
Java uses exceptions to handle errors, making it suitable for our approach. We map lower-level faults to Java exceptions and their corresponding handlers. Java's try-catch mechanism allows for structured error handling, where operations that may throw exceptions are enclosed in a try block with associated catch blocks. The JVM searches for an appropriate catch block starting from the method that threw the exception and, if necessary, moving up the call stack.

A Java operation can be vulnerable to multiple faults, and the generated exception depends on both the fault and the operation. For example, different error codes (NET EAGAIN, NET EPIPE, NET EFAULT) can result in different or the same exceptions. We use a table to map fault-operation pairs to exceptions, but the translation is complicated by the layers of software between the hardware and the application.

## 3. Analyzing and Instrumenting Java Applications
We present our compile-time techniques for instrumenting Java applications to direct fault injection and measure coverage. This includes defining an API for communication between the compiler-inserted instrumentation and the Mendosus [21] fault-injection engine.

## 4. Experimental Results
We conducted a feasibility study using Muffin, a proxy server. Our manual instrumentation achieved 100% coverage of four out of seven catch blocks, with an average of 85% of expected faults being caught.

## 5. Related Work
We discuss related work in the areas of fault injection, coverage metrics, and Java exception handling.

## 6. Conclusions
We conclude by summarizing our contributions and discussing future directions for this research.

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the original content and structure.