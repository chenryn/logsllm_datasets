We now show how PT2CT calculates pNoise for two operations: (*:) and linearCyc.
Their types indicate that an interpreter may require the input and output types of the operation
to be different:
linearCyc :: Linear zp e r s
-> expr env ((PreLinearCyc expr rep) (Cyc r zp))
-> expr env rep (Cyc s zp))
(*:) :: expr e (PreMul expr a) -> expr e (PreMul expr a) -> expr e a
The type families PreLinearCyc and PreMul determine the input type to these operations.
PT2CT deﬁnes them as:
9Since PT2CT requires expressions involving PNoise, we extend all relevant interpreters to support opera-
tions on this data type.
166
type PreLinearCyc (PT2CT m’map zqs gad z ctex mon)
(PNoise p) = PNoise (p :+: N1)
type PreMul (PT2CT m’map zqs gadget ctex mon) (PNoise p a) =
PNoise (Units2PNoise (TotalUnits zqs (p + 3))) a}.
Example Consider the example from subsection 5.1.2:
ex1 = lam $ lam $ v0 *: (v0 +: v1)
We can specialize the type of this expression to
PT2CT m’map zqs gadget ctex mon () (PNoise pin a -> PNoise 0 a).
Setting the output pNoise to zero indicates that when we homomorphically evaluate this
expression, we will immediately decrypt the result without doing any further homomorphic
operations. Based on the signatures of (*:) and (+:), the compiler infers that v0, v1 have
type
PT2CT m’map zqs gadget ctex mon () (PreMul expr b).
Using the deﬁnition of the PreMul type family for PT2CT given above, we ﬁnd that the input
ciphertexts must have pNoise 𝑝𝑖𝑛 = 0 + 3 = 3.
Similarly, PT2CT gives a type family that converts annotated plaintext types into cipher-
text types:
Cyc2CT m’map zqs (PNoise p (Cyc m zp)) =
CT m zp (Cyc (Lookup m m’map) (ZqPairsWithUnits zqs (p + 2)))
which indicates that input ciphertext modulus must have at least 3 + 2 = 5 total units, or
about 31 bits.
167
5.5.3
Implementation
We now show how PT2CT implements several instructive language components. Some
plaintext operations, like addition, translate directly into addition on ciphertexts. This leads
to a very simple Add instance for PT2CT:
instance (Add ctex (Cyc2CT m’map zqs a), Applicative mon)
=> Add (PT2CT m’map zqs gad ctex mon) a where
add_ = PC $ pure add_
neg_ = PC $ pure neg_
The implementation of add_ for PT2CT simply embeds the (pure) function add_ on cipher-
texts into the applicative mon.
By contrast, plaintext multiplication becomes much more involved when translated to its
homomorphic counterpart:
instance
(Lambda ctex, Mul ctex ctin, SHE ctex, MonadRandom mon,
MonadAccumulator Keys mon, MonadAccumulator Hints mon, ...)
=> Mul (PT2CT m’map zqs gad ctex mon) (PNoise p (Cyc m zp)) where
mul_ = PC $ do
-- lookup or generate a key switch hint
hint  LinearCyc (PT2CT m’map zqs gad z ctex mon) (PNoise p) where
linearCyc_ f = PC $ do
hint <- getTunnelHint f -- generate a hint for tunneling
return $ lam $
modSwitch_ $:
-- scale back to the target modulus
(tunnel_ hint $:
-- tunnel with the hint
(modSwitch_ $: v0)) -- scale up to the hint modulus
169
We can homomorphically apply a linear function from one ring to another using a special
type of ring-switching called tunneling (see chapter 3). This process is a special form of
key-switching, which requires an appropriate hint. As with multiplication, we perform
these key switches with a larger modulus to minimize noise growth, so we must switch
the ciphertext modulus up before tunneling, and back down after tunneling. As before,
performing a key-switch requires an appropriate hint, which depends on the secret keys.
These keys are obtained or generated as above. Note that there is no MonadAccumulator
Hints mon constraint because in typical use cases, hints for tunneling cannot be reused,
so we do not attempt to explicitly store them after they are generated. (However, they are
embedded in the ultimate compiled ciphertext-DSL term.)
5.6 Future Work
ALCHEMY represents a large step towards making practical HE a reality. We explore some
areas for future improvement below.
Interpreters.
It is possible to conceive of a huge number of interesting and useful inter-
preters. A large class of these interpreters come in the form of optimizers, which turn an
expression (in some DSL) into an equivalent expression that is more efﬁcient. We have
already seen how an interpreter for beta-reducing expressions could be useful for simplifying
expressions. Note that beta-reduced expressions are no more efﬁcient than the original, but
some interpreters beneﬁt from this optimization. In particular, beta-reduced expressions
have a much simpler representation using the P interpreter, and the S interpreter gives a more
accurate estimate of the size of beta-reduced expressions.
HE Parameters. Although the PT2CT compiler automatically chooses ciphertext moduli
at each step of the computation, users must still provide some ciphertext parameters. In
particular, the user must provide a pool of ciphertext moduli that the compiler can choose
from, as well as all ciphertext cyclotomic indices. Ideally, ALCHEMY would be a black
170
box that chooses all ciphertext parameters to achieve both optimal performance as well
as the desired security level. However, much more theoretical work must be done before
such an tool can be realized. Speciﬁcally, this functionality would require a much better
understanding of the concrete security level for a given parameter combination.
Bootstrapping for Fully Homomorphic Encryption ALCHEMY currently compiles
computations to a target SHE scheme. The only known way of achieving FHE is to
periodically perform Gentry’s bootstrapping procedure [Gen09a]. Like many of the steps
automated by ALCHEMY, it should be relatively easy to predict when bootstrapping needs
to occur. Ideally, bootstrapping would be inserted seamlessly into (arbitrary) homomorphic
computations; we leave this for future work.
Meta-language Function Application. We ﬁnish this summary by noting that there is
a powerful technique called higher-order abstract syntax (HOAS), which uses the meta-
language’s variable-binding and function-creation facilities for creating object-language
functions, thus obviating the need for environments and De Bruijn-indexed variables as
in subsection 5.2.1. However, this technique seems unsuitable for some of our advanced
needs, speciﬁcally monadic interpreters. Some initial progress has recently been made on
this front [KKS15], but as the authors caution, it is not yet ready for general-purpose use.
The implementation of object-language functions has far-reaching implications through-
out ALCHEMY. It not only affects how easy it is to read and write plaintext expressions,
but it also affects properties of the interpreters. For example, we cannot write the Dup or
ErrorRateWriter interpreter using HOAS. Yet HOAS is simpler to use in expressions, and
De Bruijn variables bring their own challenges. Concretely, we have been unable to obtain
sharing fo subexpressions in the ErrorRateWriter interpreter. The only impact is that error
rates for shared expressions appear multiple times in the log, however it is an indicator that
De Bruijn variables do not provide all the solutions for this complex problem. It remains an
active area of research in the programming language community.
171
FAST HOMOMORPHIC EVALUATION OF SYMMETRIC KEY PRIMITIVES
CHAPTER 6
Some recent works (e.g., [NLV11; GHS12c; WH12; Che+13]) have examined the suit-
ability of homomorphic encryption for evaluating “non-trivial” functions that can offer
practically useful functionality. In this chapter, we explore the homomorphic evaluation
of ring rounding, which appears as the main operation in a surprising number of lattice
primitives including SHE [BGV14], the RLWR problem [BPR12], and pseudorandom func-
tions [BPR12; BP14]. The homomorphic evaluation of this operation therefore becomes an
important part of the bootstrapping procedure for FHE, which evaluates the SHE decryption
circuit homomorphically.
Another particularly important application, which serves as a motivating example
throughout this chapter, is the homomorphic evaluation of symmetric-key cryptographic
primitives. For instance, given a ciphertext HE(𝑘) encrypting a key 𝑘 for a symmetric-key
encryption scheme Enc𝑘, and a ciphertext 𝑐 = Enc𝑘(𝑚) encrypting a message 𝑚, one
can homomorphically compute HE(Dec𝑘(𝑐)) = HE(𝑚) by homomorphically applying the
function 𝑓 (𝑥) = Dec𝑥(𝑐) to HE(𝑘). This particular instance of homomorphic evaluation is
extremely powerful, and even seems necessary for many practical usage scenarios of HE, as
we explain in the next section.
6.1 Homomorphic Evaluation of Symmetric-Key Primitives
Perhaps the most straightforward application of the homomorphic evaluation of a symmetric-
key decryption algorithm is in reducing communication and computation for a weak client
(Alice) who delegates her computation to the “cloud” (Bob). The simplest form of this
application is described in subsection 5.1.3, and requires Alice to encrypt her data with an
HE scheme and send those ciphertexts to Bob. However, all known HE schemes that can
172
evaluate reasonably complex functionalities have quite large keys and ciphertexts, so a weak
client like Alice may not be able to directly encrypt its data under such a scheme. Instead,
it can encrypt the data under a lightweight symmetric-key scheme, and then the cloud
can homomorphically transform that encrypted data into HE-encrypted data as described
above, which could then be processed further (homomorphically). Since plain symmetric
encryption will almost certainly remain much more time- and space-efﬁcient than HE
encryption, this approach provides major savings in communication and computation by
the weak device. (The relatively heavy computation of HE(𝑘), where 𝑘 is the key of the
symmetric encryption scheme, can be done once and for all in an ofﬂine preprocessing
phase, and then subsequently used in all homomorphic computations.)
This example illustrates a more general template for enhancing the performance of
HE-based applications, especially ones in which there is a large amount of plaintext data.
For example, Wu and Haven [WH12] proposed an efﬁcient implementation of SHE in
the context of large-scale statistical analysis (e.g., linear regression on a multidimensional
encrypted corpus). Since the plaintext-to-ciphertext expansion of HE schemes is large,
it may be impractical to directly encrypt a large corpus under such a scheme. Instead,
one could encrypt the data under a (nearly) length-preserving symmetric scheme, then
homomorphically decrypt as needed. Moreover, symmetric encryption can allow for random
access to the data, which is desirable if a particular homomorphic evaluation needs to use
only a small part of the data.
Another appealing instantiation of this template is in the construction of a private
information retrieval (PIR) scheme. As suggested by Brakerski and Vaikuntanathan [BV11a],
any efﬁcient procedure for homomorphic symmetric decryption can be efﬁciently converted
into a single-server PIR protocol, by having the client encrypt its query under a symmetric
scheme, rather than an HE. The server then homomorphically decrypts the query and then
additionally evaluates an arithmetic circuit of size 𝑁 and depth only log log 𝑁, where 𝑁 is
173
the size of the database held by the server. Efﬁcient homomorphic decryption can therefore
greatly enhance the efﬁciency of the protocol for both the server and client.
One ﬁnal application is that of key derivation in the cloud. Here a client generates
a master key 𝑘, and wishes to use it for deriving a large number of pseudorandom keys
𝑘𝑖 = 𝐹𝑘(𝑖) for different uses, where 𝐹𝑘 is a pseudorandom function (PRF). The client
can delegate these derivations to the cloud, and also obtain some robustness against the
compromise or loss of secret keys, as follows. The client stores an encryption 𝑐 = HE(𝑘)
on the cloud and erases 𝑘, keeping only the HE decryption key. The client can later request
that the cloud homomorphically compute HE(𝐹𝑘(𝑖)) for any desired 𝑖, and then decrypt
the result locally. The cloud (or an attacker who compromises it) learns nothing about the
master key 𝑘, whereas an attacker who compromises the client alone learns only the HE
secret key. This might allow the attacker to compute several session keys, but only with the
cloud’s continued help, which might mitigate the damage if, e.g., the client learns of the
intrusion and notiﬁes the cloud.
6.1.1 Homomorphic Evaluation of AES
To date, the only attempts to homomorphically evaluate symmetric-key primitives [GHS12c;
Che+13] have focused on the AES-128 function. The suitability of AES as a benchmark is
justiﬁed by its wide deployment and extensive use in security-aware applications, as well
as by its non-trivial yet manageable circuit size and depth. Moreover, the AES circuit has
a regular and quite “algebraic” structure, which is very amenable to parallelism and other
optimizations in the context of homomorphic evaluation. For precisely those reasons, it
seemed plausible that a specially designed and optimized implementation would result in
reasonable performance, and yield considerable practical utility.
Unfortunately, despite many clever optimizations and careful adaptations to the structure
of AES, the best reported homomorphic evaluations of the AES function are very far from
practical. As is to be expected, the inefﬁciency lies in the extremely high degree of the
174
AES function, which induces an arithmetic circuit depth of at least 50. To securely evaluate
such a circuit homomorphically requires exceedingly large keys for the HE, and very large
runtimes. The work of [GHS12c] reports that homomorphic evaluation of AES on a single
block takes around 36 hours on a server-class machine, and uses up to 256 gigabytes of
memory. “Batching,” i.e., computing several hundred blocks at a time, brings the runtime
down to as low as 5 minutes per block, but takes about 2.5 days to complete, and none of
the results are available until the end. Similar (but slightly worse) experimental results were
recently reported in [Che+13], which used a quite different underlying SHE scheme for the
homomorphic computation.
6.1.2
In Search of Efﬁcient Alternatives
Practical homomorphic evaluation of symmetric primitives seems quite far off, if the search
is limited to standard candidates like AES. Motivated by this state of affairs, we consider
whether different symmetric constructions can support signiﬁcantly faster homomorphic
evaluation. This would enable the applications mentioned above, and would undoubtedly
broaden the applicability of HE in practice.
Towards this end, we consider a weak pseudorandom function 𝐹𝑠 : {0, 1}𝑘 → {0, 1}𝑛
indexed by a randomly chosen key 𝑠, which is widely applicable in symmetric-key cryptog-
raphy. Recall that a weak PRF cannot be efﬁciently distinguished from a uniformly random