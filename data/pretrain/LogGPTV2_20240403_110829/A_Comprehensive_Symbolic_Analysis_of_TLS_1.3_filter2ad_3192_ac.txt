### Computed by Applying a Derive-Secret Function to This Value

This step is not strictly necessary due to the assumption of perfect cryptography, but it facilitates the connection between our model and the specification.

### 3.4 Advanced Features

Our model captures several complex interactions and logic flows inherent in the TLS 1.3 handshake, significantly improving upon previous models. We have added features that we consider "advanced."

#### Group Negotiation

We model the client and server as having a limited ability to negotiate the group used in the Diffie-Hellman key exchange. In Tamarin, any value can be used as a group generator. Typically, a fixed (public) constant 'g' is used, representing an agreed-upon group. Upon receiving a key share and storing it in the variable `gx`, we simulate checking that the element resides in this group by pattern matching the value as `g^x = gx`. Intuitively, this corresponds to verifying that there exists an `x` such that `g^x = gx`.

In Tamarin's syntax, variables that are always instantiated with public values are prefixed by `$`. In our model, the client starts with a pair of public values `$g1` and `$g2` representing two supported groups and offers these to the server along with a corresponding key share for `$g1`. Similarly, the server starts with a supported group `$g`. The model allows the server to return a `HelloRetryRequest` to the client, enforcing that `$g` is not equal to `$g1`, and expects the client to return a key share that matches `$g2`.

This interaction provides greater coverage of the DH key exchange compared to previous models and opens up the possibility of future extensions, such as modeling a weak group by allowing the attacker to reveal the corresponding DH exponents.

#### Handshake Flows

One of the most complex elements in modeling TLS 1.3 is the vast number of possible state machine transitions. After a session resumption, the server can choose between using the PSK only, using the PSK along with a DH key share, or rejecting the PSK entirely and falling back to a regular handshake. Additionally, the server might request that the client use a different group for the DH exchange. There are also several complex messages that can be sent in the post-handshake state, such as client authentication requests, new session tickets, and key update requests.

Since all these interactions can happen asynchronously, the resulting model becomes very complex and requires sophisticated handling logic. We address this by modeling all possible handshake modes in a modular fashion, which is not typically achieved in other models.

### 4 Encoding the Threat Model and Security Properties

#### 4.1 Threat Model

We extend the Dolev-Yao (DY) attacker [23] as our threat model. The DY attacker has complete control over the network and can intercept, send, replay, and delete any message. To construct a new message, the attacker can combine any previously learned information, such as decrypting messages for which it knows the key or creating its own encrypted messages. We assume perfect cryptography, meaning the attacker cannot encrypt, decrypt, or sign messages without the appropriate keys.

To consider different types of compromise, we additionally allow the attacker to:
- Compromise the long-term keys of protocol participants.
- Compromise their pre-shared keys, whether created out-of-band (OOB) or through a New Session Ticket (NST).
- Compromise their DH values.

Note that TLS 1.3 is not designed to be secure under the full combination of these types of compromise. For example, session key secrecy can be broken by an attacker who eavesdrops on the communication and compromises the DH values of a single protocol participant.

A natural approach is to weaken the attacker model by adding realistic constraints until the claimed security goals of the protocol are achieved, or the corresponding attackers become weaker than those expected in practice. This workflow requires us to specify, with high granularity, exactly what needs to be protected and when each of the claimed TLS 1.3 properties can be expected to hold.

#### 4.2 Security Properties

We encode the claimed security properties of TLS 1.3 as lemmas in the specification language of Tamarin. Here, we discuss the relationship between the lemmas we prove in the model and the desired properties in the specification. There is some overlap between the material in the stated goals expressed in Section 2.2. For example, the requirement for Perfect Forward Secrecy (PFS) is effectively a modifier to the requirement for secret session keys. Where possible, we will prove these properties via distinct lemmas to aid in the comprehension of the model. However, it is also possible to combine many of the properties into a single, more complex lemma.

##### 4.2.1 Establishing the Same Session Keys

The definition of this property is taken from [19], where it is referred to as a consistency property. However, there is ambiguity in the circumstances necessary and sufficient for two protocol participants to establish the same keys. A common approach is to define session partnering [8, 19, 36]. One possible way is to assign session identifiers based on a value (or pair of values) agreed upon by both parties. We opted for the least restrictive session identifier, namely the pair of nonces generated by the client and the server. Therefore, if a partnered client and server complete the handshake, they must agree on session keys.

We consider this property with respect to an attacker that can compromise all session keys except for those identical to the test session, i.e., the session in which the attacker attempts to obtain information about the key [19, 36]. This property is captured by our lemma `session_key_agreement`.

##### 4.2.2 Secrecy of the Session Keys

The `secret_session_keys` lemma is used to prove property (2) in Section 2.2. The intuition for this lemma is that if an actor believes it has established a session key with an authenticated peer, then the attacker does not know the key. However, given the capabilities of the attacker, this will not hold without imposing some restrictions.

The five conditions stated in the lemma generally encapsulate the basic assumptions we make about our attacker:
1. The long-term signing key of the peer is not compromised. This restriction implies that the actor is communicating with an honest peer, as the attacker can simulate a party when in possession of its long-term key. The attacker can still compromise the peer’s long-term key after the session key is established, showing that the session keys achieve PFS with respect to the long-term key.
2. The attacker cannot reveal any DH exponents generated by the client or the server before the session key was established.
3. The attacker may reveal exponents generated after the session key is established.
4. The attacker cannot compromise a PSK associated with either the actor or the peer, even after the session key has been established. This corresponds to the proviso in the specification that the PSK-only exchange mode does not provide PFS.

##### 4.2.3 Peer Authentication

The specification defines this property somewhat informally, as a form of authentication whereby both parties should agree on the identity of their peer. Looking at this more formally through Lowe’s hierarchy of authentication [39], this definition corresponds to weak agreement. Specifically, this does not imply recentness—the requirement that the peer is currently running the protocol—nor does it specify whether any other values should be agreed upon.

We initially model this property via our `entity_authentication` lemma. Entity authentication is modeled in two parts to capture the distinction between bilateral (mutual) and unilateral authentication cases. Unilateral authentication means that if a client completes a TLS handshake, apparently with a server, then the server previously ran a TLS handshake with the client, and they both agree on certain data values of the handshake, including the identity of the server and the nonces used. This is already a stronger property than stipulated in the specification. We prove non-injective agreement on the nonces, which additionally provides recentness since both parties contribute a fresh nonce to the handshake.

The intuition for this lemma is that if a client believes it has agreed on a pair of nonces with a server, then the server was, at some point prior, running the protocol with those nonces. The necessary restrictions on the attacker to achieve this property include ensuring the attacker does not acquire any of the secrets prior to the client agreeing on nonces. While one might expect that only the legitimacy of the signing key is necessary for authentication, if the attacker can obtain the PSK through compromising cryptographic material, or the PSK directly, then the attacker can resume a session and impersonate the peer.

In addition to entity authentication, we consider a transcript agreement property, where the value agreed upon is a hash of the session transcript. This provides near-full agreement. However, there are notable omissions: the protocol technically continues after the initial handshake, although none of these delayed handshake messages are included in the session transcript. Additionally, the actors do not necessarily agree on the current authentication status of the handshake, a situation we cover in more detail in Section 5.2.

Finally, we also prove an injective variant of mutual transcript agreement, which TLS naturally achieves by agreeing on fresh nonces. Hence, we show that TLS achieves a relatively strong authentication notion: mutual agreement on a significant portion of the state with recentness.

##### 4.2.4 Uniqueness of the Session Keys

We prove in a straightforward manner that for any two session keys generated, if they match, they must be from the same session. This holds without any restriction on the attacker, as it is a direct consequence of the actor generating a fresh nonce for each session. We do not prove anything about whether two session keys are related, as this trivially follows from the assumption of perfect cryptography.

##### 4.2.5 Downgrade Protection

The specification cites the work by Bhargavan et al. [11] for downgrade protection. This definition is not directly equivalent to any of Lowe’s classical agreement methods; it only requires that both parties negotiate the same configuration parameters as they would without the presence of an attacker. Specifically, we observe that agreeing on the parameters (in the sense of non-injective agreement) is sufficient to achieve this, but not necessary. Therefore, within our model, we prove that TLS achieves downgrade protection through our authentication lemmas.

However, we note that this does not fully capture the spirit of downgrade protection, due to the assumption that all cryptographic primitives are perfect and the lack of modeling previous versions of TLS.