作者:k2yk  
日期：2017/11/13  
最后更新日期：2017/11/15
### 0x00 漏洞描述
在 2017 年 11 月 12 日 NVD公布了关于 wget 的多个漏洞的情报，这里做一个wget缓冲区溢出漏洞的分析。在 wget
版本小于1.19.2 的情况下，wget 在处理重定向时，会调用 `http.c:skip_short_body()`函数, 解析器在解析块时会使用
`strtol()` 函数读取每个块的长度，但不检查块长度是否为非负数。解析器试图通过使用 `MIN()`函数跳过块的前512个字节，最终传递参数到
`connect.c:fd_read()`中。由于
`fd_read()`仅会接受一个int参数，在攻击者试图放入一个负参数时，块长度的高32位被丢弃，使攻击者可以控制
`fd_read()`中的长度参数，产生整形缓冲区溢出漏洞。
##### 影响范围
影响版本为：wget 
    * 使用方法
    # Build the container
    docker build -t cve201713089 .
    # OR ...
    docker pull robertcolejensen/cve201713089
    # Play around in the container, `src` will be mounted at `/opt/CVE-2017-13089/src`
    ./run.sh
    # Run the included DoS PoC
    ./run.sh dos
    # Run the included exploit PoC (wip)
    ./run.sh exploit
  * 其次就是通过自己编译进行复现
    shell
     # 获取wget
     wget ftp://ftp.gnu.org/gnu/wget/wget-1.19.1.tar.gz
     # 解压
     tar zxvf wget-1.19.1.tar.gz
     #进入目录
     cd wget-1.19.1
     #编译
     ./configure
     make 
     cd src 
     验证
     nc -lp 6666  SKIP_THRESHOLD)
        return false;
      while (contlen > 0 || chunked)
        {
          int ret;
          if (chunked)
            {
              if (remaining_chunk_size == 0)
                {
                  char *line = fd_read_line (fd);
                  char *endl;
                  if (line == NULL)
                    break;
                  remaining_chunk_size = strtol (line, &endl, 16);
                  xfree (line);
                  if (remaining_chunk_size == 0)
                    {
                      line = fd_read_line (fd);
                      xfree (line);
                      break;
                    }
                }
              contlen = MIN (remaining_chunk_size, SKIP_SIZE);
            }
          DEBUGP (("Skipping %s bytes of body: [", number_to_static_string (contlen)));
          ret = fd_read (fd, dlbuf, MIN (contlen, SKIP_SIZE), -1);
          if (ret  SKIP_THRESHOLD)
    return false;
    while (contlen > 0 || chunked)
    {
      int ret;
      if (chunked)
        {
          if (remaining_chunk_size == 0)
            {
              char *line = fd_read_line (fd);
              char *endl;
              if (line == NULL)
                break;
              remaining_chunk_size = strtol (line, &endl, 16);
              xfree (line);
              if (remaining_chunk_size == 0)
                {
                  line = fd_read_line (fd);
                  xfree (line);
                  break;
                }
            }
      contlen = MIN (remaining_chunk_size, SKIP_SIZE);
    }
    DEBUGP (("Skipping %s bytes of body: [", number_to_static_string (contlen)));
    ret = fd_read (fd, dlbuf, MIN (contlen, SKIP_SIZE), -1);
从这段代码中分析出，`contlen = MIN (remaining_chunk_size, SKIP_SIZE);`
只需小于512时，`contlen` 可控，综合上述代码逻辑，可以得出`remaining_chunk_size`
位负值时，`contlen`为可控向量。在后面的代码逻辑中，`fd_read()` 使用了该受控制的向量，引发了缓冲区溢出漏洞。
    int
    fd_read (int fd, char *buf, int bufsize, double timeout)
    {
      struct transport_info *info;
      LAZY_RETRIEVE_INFO (info);
      if (!poll_internal (fd, info, WAIT_FOR_READ, timeout))
        return -1;
      if (info && info->imp->reader)
        return info->imp->reader (fd, buf, bufsize, info->ctx);
      else
        return sock_read (fd, buf, bufsize);
    }
我们可以看到在利用GDB进行调试的情况下，成功控制了利用溢出成功劫持了下一步执行的地址。
进入栈执行
利用成功演示
##### EXP 构造
EXP的构造主要有2个要点:
  * 第一 栈的定位
  * 第二 偏移量
偏移量这个点，根据写入栈的地址以及控制返回的栈地址我们可以得出，能够控制 RBP
的地址在写入栈的地址后的568位。因此，我们在构造EXP时，将即将控制栈的地址在shellcode 的568位后写入，即可实现对指针的控制。
* * *
### 0x02 POC
ShellCode生成脚本：  
使用方式：
`python shellcode.py & nc -lp 80 < payload`
该 ShellCode会在目标机器开启一个新的 shell，无其他危害，仅为演示证明漏洞存在。如果有小伙伴对通用型exp构造有兴趣可以一起交流！！！