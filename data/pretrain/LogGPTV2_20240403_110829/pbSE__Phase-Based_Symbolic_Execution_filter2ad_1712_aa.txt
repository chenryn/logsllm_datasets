title:pbSE: Phase-Based Symbolic Execution
author:Qixue Xiao and
Yu Chen and
Chengang Wu and
Kang Li and
Junjie Mao and
Shize Guo and
Yuanchun Shi
2017 47th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
pbSE: Phase-based Symbolic Execution
Qixue Xiao1, Yu Chen1∗, Chengang Wu2∗, Kang Li3, Junjie Mao1,
Shize Guo4 and Yuanchun Shi1
1Dept. of Computer Science and Technology, Tsinghua University, Beijing, China
{xqx12,maojj12}@mails.tsinghua.edu.cn, {yuchen,shiyc}@tsinghua.edu.cn
2State Key Laboratory of Computer Architecture, Institute of Computing Technology
Chinese Academy of Sciences, Beijing, China. PI:EMAIL
3Dept. of compute Science, University of Georgia, Georgia, USA. PI:EMAIL
4School of CyberSpace Security, Beijing University of Posts and Telecommunications,
Beijing, China. PI:EMAIL
Abstract—
The study of software bugs has long been a key area in software
security. Dynamic symbolic execution, in exploring the program’s
execution paths, ﬁnds bugs by analyzing all potential dangerous
operations. Due to its high coverage and abilities to generate
effective testcases, dynamic symbolic execution has attracted wide
attention in the research community. However, the success of
dynamic symbolic execution is limited due to complex program
logic and its difﬁculty to handle large symbolic data. In our exper-
iments we found that phase-related features of a program often
prevents dynamic symbolic execution from exploring deep paths.
On the basis of this discovery, we proposed a novel symbolic
execution technology guided by program phase characteristics.
Compared to KLEE, the most well-known symbolic execution
approach, our method is capable of covering more code and
discovering more bugs. We designed and implemented pbSE
system, which was used to test several commonly used tools and
libraries in Linux. Our results showed that pbSE on average
covers code twice as much as what KLEE does, and we discovered
21 previously unknown vulnerabilities by using pbSE, out of
which 7 are assigned CVE IDs.
I. INTRODUCTION
Recently,
Software bugs have long been a major concern in software
security. In 1990s, Aleph One became the ﬁrst one to publish
a hacking method using stack overﬂow[22]. Since then, the
analysis and mining of software bugs have gradually become
a vital area in academic research and industrial applications.
there is an increasing trend to use symbolic
execution[16] to detect bugs. Instead of using concrete data
values as input and to represent the values of program vari-
ables as symbolic expressions over the symbolic input values,
symbolic values are used as input. When symbolic execution
encounters a branch condition, it forks the execution state,
following both branch directions and updating the correspond-
ing path constraints on the symbolic input. In doing so, it
accomplishes path exploration and bug detection . Dynamic
symbolic execution combines concrete execution and symbolic
execution, in which path exploration is performed by symbolic
execution, and when the solver fails, concrete execution is
used to execute the path. Dynamic symbolic execution has
attracted wide attention because it draws on the advantages of
∗To whom correspondence should be addressed
static, dynamic and symbolic analysis. In recent years, with the
development of SMT solver, the unique advantage is becoming
increasingly more prominent, and dynamic symbolic execution
has been applied in bug detection in real-world programs[3],
[14].
Theoretically, dynamic symbolic execution can explore all
paths of a program. In practice, the rapidly increasing number
of branches will lead to path explosion. This problem is not
acute for small programs such as tools in Coreutils. But for
those with a large number of code lines and need a sizeable
symbolic data input, path explosion can be particularly severe.
The ability to cover more new codes in limited time will
enhance the efﬁciency of bug detection. As software becomes
more complex, path explosion becomes inevitable. This led
to the emergence of many heuristic path selection researches
[18], [7], [20], [1], [21], [27]. However, we observed that these
techniques often helped symbolic execution to increase code
coverage for a while but soon the increasing speed slows down.
This trend is largely attributed to the existence of program
phases.
For this paper, phase is deﬁned as a property that captures
the time varying behavior [29] of a program’s execution. A
group of code that repeatedly being executed in a given time
frame is deﬁned as a phase. Phases are not just loops but
including broader concepts such as recursive function calls.
The phases are inherently deﬁned by the nature of program
logic, which moves the program execution from one phase
to the other based on the code and input. However,
the
observation of phases from concrete execution depends on the
observing time intervals and the method to cluster similar code
repetitions over time. More details about the observation of
phases can be found in Section II.
We found that, when the coverage of a dynamic symbolic
execution stops increase, the program often stuck in some
speciﬁc phases of a program. Those phases that make symbolic
execution difﬁcult to move on are called trap phase. A trap
phase is usually characterized by a loop or embedded loops,
or recursive codes.
In this paper, we study the impact of program phases on
the effectiveness of dynamic symbolic execution. We suggest
to derive phase information from concrete execution and ex-
2158-3927/17 $31.00 © 2017 IEEE
DOI 10.1109/DSN.2017.48
133
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:01:47 UTC from IEEE Xplore.  Restrictions apply. 
plicitly use these derived phase information to guide dynamic
symbolic execution. This paper presents a prototype of phase-
based symbolic execution, which performs symbolic execution
systematically to every phase, covers deeper paths, enhances
code coverage and detects more bugs. Through this paper, we
make the following contributions:
• A novel symbolic execution approach is proposed to
systematically detect bugs by exploring code execution
in phases. Phase information are obtained from concrete
execution with a few seed inputs. These phase informa-
tion allows symbolic execution to reach more new code
in a limited time. Compared with the latest version of
KLEE, code coverage of our approach is increased by
more than 100 percent on average.
• We designed and implemented a tool on the basis of
KLEE, pbSE(phase-based symbolic execution system), to
demonstrate this approach.
• By applying pbSE to several commonly used software,
we discovered 21 unknown vulnerabilities, out of which
7 are assigned CVE IDs.
This paper is organized as follows. Section 2 makes a
detailed analysis of the inﬂuence of program phase’s charac-
teristics on symbolic execution. In Section 3 the phase-based
symbolic execution approach is described and an overview
of the system is given. Section 4 presents implementation
and evaluation of our approach. In Section 5 related work is
surveyed, and the conclusion is made in Section 6.
II. PROGRAM PHASE AND SYMBOLIC EXECUTION
A. Methodology
Dynamic symbolic execution performs quite well when
dealing with small programs, but its effectiveness worsens
quickly for those with a large number of code lines and more
symbolic input data. In the latter case, dynamic symbolic
execution will cover a large number of new codes at the
beginning, but the speed of ﬁnding new paths slows down. This
section analyzes this phenomenon and reveals its underlying
cause.
We analyze the code distribution during symbolic execution,
and the results are compared with those obtained from concrete
execution. In order to present the comparison in a clearer way,
plots are used to illustrate the distribution patterns.
For each basic block(BB) entered during an execution, we
record its index and the entry time. We plot the ﬁgures using
y-axis to represent the index numbers of BBs, and x-axis to
represent entry time.
For further analysis, the basic blocks are arranged according
to the time sequence in concrete execution, and each BB is
labeled with a number in rising order. BBs called more than
once are indexed with the initial label. For convenience of
comparison with symbolic execution, BBs already indexed
in concrete execution will be labeled with the same number
in symbolic execution. In the case of a BB not indexed in
concrete execution, in symbolic execution we will give it a new
number, following the max number of indexing in concrete
execution.
Previous research [25], [36] has found that coverage of
concrete execution is highly sensitive to input data (also called
seeds). In our experiment we randomly choose seeds from
reference ﬁle. For example, in the experiment with readelf, we
randomly choose 10 from the 900 elf ﬁles from the directory
/usr/bin in Ubuntu 12.04, whose size varies between 6120
bytes to 131,312 bytes.
Many excellent symbolic execution engines have been
acknowledged by the academic community, or have been
widely applied in industry, for instance, DART[13], KLEE[3],
Crest[1], PEX[33], etc. KLEE is chosen in our experiment for
the following reasons:
• KLEE, with its strong support for handling interac-
tions with the external environment, for making input
arguments and ﬁles symbolic, has been widely used
in many research ﬁelds, including program analysis[6],
[15], [18], software testing[8], [21], and software error
detection[24], [7].
• KLEE can detect various kinds of bugs, including out-of-
bounds and divide-by-zero. KLEE also provides different
built-in search strategies, including traditional DFS, ran-
dom search and some other heuristic search strategies,
which will be used to compare its effectiveness with ours
directly.
• KLEE is an open-source project and is constantly being
updated, which is quite convenient for us to modify its
code.
Moreover, our study also chooses several commonly used
ﬁle-parsing tools and libraries as the test target, including read-
elf, libpng and libtiff. They are often released with operating
systems and used widely, and they have a rich pool of software
applications, for instance, various web browsers and editors,
etc. In this sense, detecting bugs in these tools and libraries
have great signiﬁcance for enhancing software security.
B. Experiment Results and Analysis
The follow experiment results demonstrate the program
phase behavior in real measurements. We used real program
execution logs (by recording the executed basic blocks) to
show how a program travels through different phases with con-
crete inputs, and in contract, how much difﬁculties symbolic
execution encounters in order to get out a phase.
The code distribution produced by concrete execution and
symbolic execution are given in Fig. 1. Here readelf is taken
as example. Readelf holds 727 functions and 16,990 BBs
(including uclibc code). Fig 1(a) shows code distribution of
concrete execution, and the seed ﬁle chosen is 7,960 bytes.
Fig 1(b) shows the code distribution after symbolic execution
has been running for an hour, with the default path searcher
(random-path and covnew interleavingly employed), which is
also the best search strategy in KLEE [3]. In these ﬁgures
y-axis represents the index numbers of BBs, and x-axis
represents time.
Based on concrete execution behavior of readelf, plus anal-
ysis of the source code, the execution can generally be divided
into 2 phases (Phase-A and Phase-B as shown in Fig 1(a) ).
134
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:01:47 UTC from IEEE Xplore.  Restrictions apply. 
(a) BBs distribution of readelf performing concrete execution
(b) BBs distribution of readelf performing symbolic execution
(c) BBs distribution of gif2tiff performing concrete execution
(d) BBs distribution of gif2tiff performing symbolic execution
(e) BBs distribution of pngtest performing concrete execution
(f) BBs distribution of pngtest performing symbolic execution
Fig. 1. Basic Blocks Distribution Analysis
By reading codes, Phase-A mainly includes the ﬁle header
data handling, the following functions are called, such as pro-
cess ﬁle header, process section headers; Phase-B mainly
handles other data, includes sections, symbols, etc. The fol-
lowing functions are called, such as process dynamic section,
process syminfo, process section contents, etc.
It can be seen in Fig 1(b) , all of the BBs numbered between
500 to 700 are not covered by symbolic execution, while there
are BBs near 500 which are covered by concrete execution
in Phase-A. That means, in terms of execution path, none of
the symbolic execution path covers these BBs after an hours
running.
Based on code analysis,
this is mainly due to the fact
that there are at least 5 input depended loops[34] which end
with elf header.e phnum or elf header.e shnum. elf header.
e phnum indicates the number of program header table entry
in the elf ﬁle and elf header.e shnum indicates the number of
section header table entry. Both have to be read from ﬁles,
which means the ending condition of the loops depends on
symbolic input. This dependency is the very reason for path
explosion, and symbolic execution fails to explore the codes
on deeper paths.
It is noteworthy that symbolic execution does cover part
of the codes in Phase-B. This is because in Phase-A there
135
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:01:47 UTC from IEEE Xplore.  Restrictions apply. 
are some paths which can circumvent the loops, thus making
it possible to jump into the next phase to cover the codes
in Phase-B. Codes in Fig 2 is a good example. In function
process section groups, symbolic execution can return from
the function by executing code at line 6017 or 6024, therefore
bypassing the loops at line 6046 to reach the next phase.
/* Don’t process section groups unless needed. */
if (!do_unwind && !do_section_groups)
if (elf_header.e_shnum == 0)
printf (_("\nThere are no sections to group.\n"));
if (do_section_groups)
return 1;
Elf_Internal_Shdr * section;
6003 process_section_groups (FILE * file)
6004 {
6005
6014
6015
6016
6017
6018
6019
6020
6021
6022
6023
6024
6025
...
6046
6047
6048
...
6272 }
i < elf_header.e_shnum;
i++, section++) {}
return 1;
{
}
for (i = 0, section = section_headers;
Fig. 2. Code snippets of readelf
In all the cases mentioned above, the case that there are BBs
covered by concrete execution but not by symbolic execution
is the most representative and important. Other programs
demonstrated similar behavior. As in Fig 1, Fig 1(c) and
Fig 1(d) give the results of the test of gif2tiff in libtiff; Fig 1(e)
and Fig 1(f) give the results of the test of pngtest in libpng. By
comparing the distribution of concrete execution and symbolic
execution, it is easy to notice that there are a lot of BBs
covered by concrete execution but not by symbolic execution,
which are marked by boxes.
Further analysis shows that some phases are to a great extent
responsible for preventing symbolic execution from exploring
deeper paths, which was referred as trap phases by our study.
One noticeable example is with readelf, which includes 5 loops
to handle elf header data, and these 5 loops consist a phase
that keeps symbolic execution from entering next phase.
Based on experiment results and code analysis we make the
following conclusions.
• A phase of a program is made on the basis of similar
or identical behavior. That is, in one phase identical or
similar instructions are executed in a continuous long
time, and this is usually caused by nested loops and deep
recursions.
• For execution to pass from one phase to the next, some
conditions have to be met. But in the code of one phase,
there are potentially a great number of paths, only a few
of which is capable of passing through to reach the next
phase. If there are many phases which have to be passed,
the chance of successfully reaching a deep phase is very
small.
III. PHASE-BASED SYMBOLIC EXECUTION
A. Overview
Our experiment results have shown that symbolic execution
may be trapped in a certain phase of the program, making
it difﬁcult to jump out of this phase to explore the codes in
the next. Therefore, it makes sense to automatically divide
the program into phases and identify trap phases, and to
perform symbolic execution for each individual phase,
in
order to enhance code coverage. This study proposes a phase-
based symbolic execution test approach(pbSE). First, pbSE
divides a concolic execution into different phases, and then
symbolic execution is performed for each phase systematical.
The overall procedure is given in Algorithm 1. pbSE takes
the target program and seed ﬁle as input, and then performs
concolic execution, phase analysis and symbolic execution, to
ﬁnish the test and produce bug reports and related test cases.
The overall architecture is shown in Fig. 3.
• Concolic execution.
In pbSE, concolic execution is
used to gather information needed by dividing different
phases and performing symbolic execution. The infor-
mation mainly consists of two groups of information: a)
basic block vector(BBV), which logs the ids of executed
basic block over a given time interval. Section III-B1
provides more details about BBV. b) seedStates, which
record the conditions required for the execution to reach a
speciﬁc state. Section III-B2 provides more details about
seedStates. Concolic execution consists of performing
concrete and symbolic execution. That
is, for every
instruction, a concrete execution is performed, which is
immediately followed by symbolic execution. The basic
block vector is gathered in performing concrete execu-
tion, and seedStates are obtained in performing symbolic
execution. Symbolic execution performed in this step only
records the fork point information while not explore any
new state. This process is illustrated in Algorithm 2.
• Phase parsing. The second step is phase analysis, which
mainly consists of phase division, selection and trap
phase identiﬁcation. pbSE ﬁrst analyzes BBVs, and then
classiﬁes them into different groups, or phases, based on
their similarities. For each phase, this step identiﬁes the
seedState that brings the execution to each speciﬁc phase.
Details are provided in Section III-B1 and Section III-B2.
• Symbolic execution. In the third step, pbSE performs a
systematical symbolic execution using a speciﬁc schedule
strategy that uses the phase and seedState information
gathered in step 2. Test cases are generated if bugs are
found during symbolic execution. The schedule strategy
is described in Algorithm 3 and more details are in
Section III-B3.
B. Design Details
The design of pbSE needs to answer the following key
questions: a) how we divide a program into phases using
the concrete execution information, b) how pbSE uses the
phase information to guide execution to new phases, c) how
136
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:01:47 UTC from IEEE Xplore.  Restrictions apply. 
Concolic Execution
Phase Analysis
Symbolic Execution
Program
(llvm bitcode)
Seed