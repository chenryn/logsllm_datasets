checks whether Su
is assured of the authenticity of U , and continues the pro-
tocol by sending S2 to SS in M 7; otherwise, CS aborts the
protocol.
?=
h(S1S2): if it holds, SS is convinced of the authenticity of
U . At this stage, both servers have authenticated U . SS
then computes Ss = h(0, S1S2), and sends Ss to U in M8
and afterwards computes a session key K = h(U ,SS, S1S2);
otherwise, SS aborts the protocol. Upon receiving M8, U
checks if h(0, Su) ?= Ss:
if it holds, U has validated the
servers and then computes a session key K = h(U ,SS, Su);
otherwise, U aborts the protocol.
4.5 Security Analysis
In what follows, we analyze security of the basic proto-
col. Our analysis is based on the following Decisional Deﬃe-
Hellman (DDH) assumption [3]:
DDH Assumption: let p, q be deﬁned as in Table 1, and
g, h ∈R QRp, for every probabilistic polynomial time algo-
rithm A, the following condition is satisﬁed:
G
AdvDDH
(A) = |P r[A(g, h, gr, hr)] − P r[A(g, h, gr, z)]| < 
where r ∈R Zq, z ∈R QRp, and  is a negligible function.
Informally speaking, it is computationally intractable for A
to distinguish between (g, h, gr, hr) and (g, h, gr, z).
Recall that the primary goal of our protocol is to resist
oﬀ-line dictionary attacks by the two servers, where CS is
controlled by a passive adversary and SS is controlled by
an active adversary. Accordingly, We examine the protocol
against CS, SS and an active outside adversary that does
not control any server, respectively.
0
CLAIM 1. The protocol is robust against oﬀ-line dictionary
attacks by CS as a passive adversary.
1 gπ1
2
1 gπ1
1 , Su = (B/gπ
1 , Su = h((B/gπ
Proof. Intuitively, when CS is controlled by a passive
adversary, it may eavesdrop on the communication channels
to collect protocol transcript and try to launch oﬀ-line dic-
tionary attacks against the password of U . Clearly CS can
obtain B1 = B/B2 = gb1
(mod p) from M 4. However,
from B1 alone, CS cannot learn anything on π1 in an infor-
mation theoretic sense. What remains relevant to CS for oﬀ-
line dictionary attacks are [A = ga
2 )a)] and
[S1 = Ab1 , B1 = gb1
2 ]. The ﬁrst pair is clearly no easier
than [A = ga
2 )a] for CS to deal with in terms
of oﬀ-line dictionary attacks, we thus suppose CS knows
1 ⇒ g1 = Aa−1
Su for ease of analysis. Note that A = ga
2 = Sa−1
(mod p) and Su = (B/gπ
(mod p). Un-
der the DDH assumption, CS cannot distinguish between
[A, g1 = Aa−1
, Su,
z], where z ∈R QRp. This suggests that CS cannot get
anything on π from the ﬁrst pair. For the second pair,
B1 = gb1
(mod p), and again under
the DDH assumption, CS cannot distinguish between [A,
S = Ab1 , g1, B/gπ1
1 ] and [A, Ab1 , g1, z]. This shows
that CS cannot learn anything on π1 from the second pair.
Consequently, CS, controlled by a passive adversary, cannot
be eﬀective in oﬀ-line dictionary attacks. This completes
the proof.
2 ⇒ B/gπ1
2 = gb1
2 )a ⇒ B/gπ
2 = Sa−1
] and [A, Aa−1
, Su, B/gπ
2 = gb1
1 gπ1
u
u
1
1
1
2 )a = (B2/gπ−π2
It is important to note that in the above analysis, we
have implicitly assumed that CS does not know a = log gA
(mod q). However, were CS controlled by an active adver-
sary, such an assumption would no longer hold, since CS
could simply impersonate U , choose a and compute A = ga
(mod p). CS could also break the system if it were able to
replace the original A from U with another one based on an
a of its choice. In both cases, CS could ﬁnd the password π
by oﬀ-line dictionary attacks. To see this, consider the sec-
ond pair where CS knows a = log gA
1 and the Diﬃe-Hellman
quadruple [A, S1 = Ab1 , g1, B2/gπ1
2 = gb1
1 ]. It follows that
(B2/gπ1
)a = Ab1 = S1, so CS could try
every possible password to determine the actual π with the
knowledge of π2. This explains at the technical level why
CS is assumed to act as a passive adversary.
Observe that CS relies on direct computation of ga(b1+b2)
(mod p) to validate the authenticity of U , and SS and U
use the same data to authenticate each other and negotiate
a secret session key. This suggests that if CS were an active
adversary, it could establish a session key in the name of
SS. This is another reason for CS being passive.
CLAIM 2. The protocol is robust against oﬀ-line dictionary
attacks by SS as an active adversary.
1
2
1 gπ2
2 )a)] and [S2 = Ab2 , B2 = gb2
Proof. First, if controlled by a passive adversary, of help
for SS in terms of oﬀ-line dictionary attacks is [A = ga
1 ,
Su = h((B/gπ
2 ]. Follow-
ing a similar analysis as for CS, we can show that SS is
unable to learn anything on either π or π2 from the two
pairs. What remains to consider is when SS launches active
attacks, in which case SS may behave arbitrarily such as
impersonating U , modifying and replacing messages. From
the security analysis for CS, we know that if SS replaces A
coming from U with ga
1 based on his choice of a and if this is
not detected by CS, SS can obtain π by oﬀ-line dictionary

attacks. Fortunately, diﬀerent from the case of CS, this at-
tack cannot succeed for the following reasons: S2 is sent to
SS in M 7 only after CS has already decided on the validity
?= h(S1Ab2 ); it is not possible for SS to change A
of Su
?= h(S1Ab2 ) pass the test of CS. As a re-
and also make Su
sult, as an active attacker, SS is still not eﬀective in oﬀ-line
dictionary attacks.
CLAIM 3. The protocol is secure against an active outside
adversary controlling no server.
Proof. Attacks by an active outside adversary who does
not control any server include oﬀ-line dictionary attacks
against user passwords and attempt to acquire the session
key K established between U and SS. For the former, in-
tuitively such an adversary clearly is no more eﬀective than
SS. For the latter, the adversary could do as follows: (1)
to impersonate any of U , SS and CS. Clearly this requires
the adversary to derive any of π, π1 and π2 by oﬀ-line dic-
tionary attacks in order for a successful impersonation; (2)
computing the value of ga(b1+b2)
(mod p) from the proto-
col transcript. Of help to this end are Su, Ss, S1 and S2.
Obviously inverting Su and Ss is impossible if the underly-
ing hash function is secure. On the other hand, since the
communication channel between SS and CS is secret, the
attacker cannot observe S1 and S2.
1
It is interesting to notice that given only one of S1 and S2
does not help the attacker in computing ga(b1+b2)
. There-
fore, one-way secrecy of the channel between SS and CS
suﬃces to guarantee the secrecy of the session key.
1
5. AN IMPROVED PROTOCOL
There have two weaknesses in the above basic protocol.
The ﬁrst one is obvious by recalling that we assumed a se-
cret channel between SS and CS in the system model. The
second one is that CS can compute the session key estab-
lished between U and SS, so CS could get to know the data
exchanged between them. While CS is a passive adversary,
this clearly aﬀects the “need to know” principle. To address
these weaknesses, recall an earlier observation that one-way
secrecy of the channel between U and SS actually suﬃces
in the above basic protocol. Our solution indeed takes ad-
vantage of this observation by SS concealing Ab1 (mod p)
from CS while still enabling CS to accomplish the task of
user authentication.
The system setting and the security model are the same
as in the basic protocol, except that no secret communica-
tion channel between SS and CS is assumed. Suppose U has
already registered π1 to SS and π2 to CS as in the above
protocol, we present an improved password authentication
protocol in Figure 4, where the system parameters are de-
ﬁned in Table 1, and arithmetic operations associating with
g1 and g2 are modulo p, while operations associating with
g3 are modulo Q.
By checking it against the basic protocol in Figure 3, it
is not hard to understand this improved protocol. So we do
not repeat the process of the protocol execution. Next, we
ﬁrst check correctness of the protocol.
5.1 Correctness
For the purpose of verifying U , CS needs to check Su
(mod Q)), and SS needs to check Su
?= h(SS2
1
(mod Q)).
h(SAb2
1
?=
U
Input: π
SS
input: π1
CS
Input: π2
a ∈R Zq, A = ga
1
Su = (B/gπ
2 )a = ga(b1+b2)
Su = h(g
1
Su
3 )
M 1: U , Req
−−−−−−−−→
M 4: B
←−−−−−−−−
M 5: A, Su
−−−−−−−−→
M 8: Ss
←−−−−−−−−−
b1 ∈R Zq, B1 = gb1
1 gπ1
2
B = B1B2
S1 = g(Ab1 )
3
?
= h(SAb1
Su
)
Ss = h(Ab1 S2)
2
M 2: U ,SS
−−−−−−−−−→
M 3: B2
←−−−−−−−−−
b2 ∈R Zq, B2 = gb2
1 gπ2
2
M 6: A, Su, S1
−−−−−−−−−−→
M 7: S2
←−−−−−−−−−−
S2 = Ab2
?
= h(SS2
1 )
Su
h(Su)
?
= Ss
K = h(U, SS, Ab1 S2)
K = h(U, SS, Su)
Figure 4: An Improved Password Authentication and Key Exchange Protocol.
a(b1+b2)
1
mod p)
(g
3
To make the checks work, it must hold that g
1
ab2
1
mod p)
mod p)(g
(mod Q). However, nor-
(mod p) = (gab1
ab1
(g
1
(mod Q) = g
3
mally ga(b1+b2)
1 mod p), but
it hods that ga(b1+b2)
1 mod p)
(mod p). As g3 ∈ QRQ is of order p, the above checks thus
hold.
5.2 Security
1 mod p)(gab2
1 mod p)(gab2
(mod p) = (gab1
1
We now examine security of the improved protocol. This
protocol is quite similar to the basic protocol, except for the
introduction of computations associating with g3. It is clear
that this change makes it no easier (nor harder in fact) to
CS and SS for oﬀ-line dictionary attacks. We thus focus on
the eﬀect of removal of the secret channel between SS and
CS, and whether CS can compute the session key between
U and SS. Clearly, the removal of the secret channel would
in principle facilitate outside adversaries who do not control
any server for deriving the session key between U and SS.
Compared to the basic protocol, an outside adversary
additionally gleans S1 = g(Ab1 )
(mod Q) and S2 = Ab2
(mod p). The adversary needs to know Ab1 (mod p) in or-
der to derive the session key. However, the additional datum
S1 = g(Ab1 )
(mod Q) does not further help the adversary
compute Ab1 (mod p), which is clearly equivalent to com-
puting the discrete logarithm of S1. This suggests that the
removal of the secret channel between SS and CS does not
in fact facilitate an outside adversary. For exactly the same
reason, CS cannot compute the session key with the knowl-
edge of S1 either.
As a result, we have managed to remove the weaknesses
3
3
contained in the basic protocol.
6. THE THIRD PASSWORD AUTHENTICATED
PROTOCOL

Recall that the security model underlying the earlier two
protocols assumes that the control server can only be con-
trolled by a passive adversary. As we have claimed, this
assumption, while strong, is quite logical considering the
positioning of the two servers in the two-server model and
the application of the model to IDSs. The earlier two proto-
cols, especially the second one thus suﬃce when applied to
IDSs. It is however clear that weakening of the assumption
that the control server can only be controlled by a passive
adversary is of both practical and theoretical signiﬁcance.
Consequently, the security model for the third protocol is
that both SS and CS are controlled by active adversaries
and they do not collude. Moreover, no secret communica-
tion channel is assumed. Based on the second protocol in
Figure 4, we present the third protocol in Figure 5.
By referring to the second protocol, it is not hard to un-