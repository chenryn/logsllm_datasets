init 中记载了加载磁盘、文件系统等模块的处理，最后实现磁盘上的根文件系统
用 cpio 打包，再用 gzip 压缩。内核在启动的最终阶段执行该文档内的 init，这个
载根文件系统所需的脚本和模块都被解压到这个文件系统中，将这些脚本和模块
解决该问题的方法就是 initramfs。initramfs 是个在 RAM 上创建的文件系统，挂
而导致挂载失败。
阶段尝试挂载 root 文件系统时，由于内核内部并没有处理根文件系统的功能，从
所需的磁盘、文件系统等模块也都放在了根文件系统中。这样在内核启动的最终
358 1
# gunzip -c /boot/initrd-2.6.27.9-159.fc10.x86_64.ing I cpio -id
# cd work
# mkdir work 
51't9 98x'014'611-6'27'9z-P11TU1/400q/ 81:10 3 u9r w62 4001 I ------mu-
SWt't9 98x'014'11-S'27'9'z-pTUT/4009/ S1:00 E uer w8'E 4001 1 ------m-
#ls -l /boot/initrd*
第6章高手们的调试技术
initrd简单，因此现在initramfs成了主流。
在创建文件系统时大小固定，灵活性不佳，而且内核内部实现 initramfs 也要比
是 initramfs 是 gzip 压缩的 cpio 镜像，而 initrd 是 ext2 等文件系统的镜像。后者
initramfs 出现于内核版本 2.6，在这之前使用 initrd 实现同样功能。两者的区别
www.TopSage.com
---
## Page 377
plymouth --show-splash 
daemonize --ignore-missing /bin/plymouthd
/lib/udev/console_init ttyo
>
mknod /dev/console c 5 1
mknod /dev/tty c 5 0
mknod /dev/systty c 4 0 
mknod /dev/zero c 1 5
mknod /dev/null c 1 3
echo Creating initial device nodes
mkdir /dev/mapper 
mkdir /dev/shm
mount -t devpts -0 gid=5,mode=620 /dev/pts /dev/pts
mkdir /dev/pts
mount -0 mode=0755 -t tmpfs /dev /dev 
echo Creating /dev
mount -t sysfs /sys /sys
echo Mounting sysfs filesystem
echo Mounting proc filesystem
setquiet
soud/ soud/ oud a- zunow
#!/bin/nash
# cat init
drwx----*- 4 root root 4096 Jan 25 21:59 usr
drwx--...-
drwx......
lrwxrwxrwx 1 root r
drwx--...--
drwx-.....
drwx--...-
-rwx-.....
drwx---.-.
drw.......
drwx-.....
total 40
# ls -l
- 2 root root 4096 Jan 25 21:59 sysroot
2 ro
6 root
1r
- 5 root root 4096 Jan 25 21:59 etc
-3 root root 4096 Jan 25 21:59 dev
- 2 root root 4096 Jan 25 21:59 bin
2 r
root root 4096 Jan 25 21:59 sys
root
root root 4096 Jan 25 21:59 lib64
root
root 3 Jan 25 21:59 sbin -> bin
:root 4096 Jan 25 21:59 lib
root 4096 Jan 25 21:59 proc
root 1933 Jan 25 21:59 init
www.TopSage.com
HACK#64  调试 initramfs 镜像I  359
369
---
## Page 378
370
可见 Fedora10 中 init 实际上是个脚本，其中包括/proc 的挂载等基本设置(a)、创
360 1
sleep -1
echo Booting has failed.
echo Switching to new root and running init.
plymouth --newroot=/sysroot
setuproot
echo Setting up other filesystems.
cond -ne 0 plymouth --hide-splash
mount/sysroot
echo Mounting root filesystem.
mkrootdev -t ext3 -0 defaults,ro /dev/VolGroup00/Logvol00 
echo Creating root device.
0 -- -  
echo Activating logical volumes
lvm vgscan --ignorelockingfailure
echo Scanning logical volumes
mkblkdevs
mmod scsi_wait_scan
modprobe scsi_wait_scan
nkdmnod
echo Making device-mapper control node 
modprobe -q mptspi
echo "Loading mptspi module"
modprobe -q mptscsih
echo "Loading mptscsih module"
modprobe -q mptbase
echo "Loading mptbase module"
modprobe -q scsi_transport_spi
echo "Loading scsi_transport_spi module"
nkchardevs
echo Creating character device nodes.
mkblkdevs
echo Creating block device nodes.
hotplug
echo Setting up hotplug.
switchroot
oadpolicy
resume /dev/VolGroup00/LogVol01
第6章高手们的调试技术
www.TopSage.com
口
---
## Page 379
误或停止响应，用这些信息就能确定问题所在。
用上述内容启动系统，显示如下画面。可见添加的 echo 行已显示了。如果发生错
止向控制台输出信息的选项）、rhgb（Fedora 中显示图形化启动界面的选项）等。
/etc/gnub.conf）中。另外，出于调试的目的，最好不要指定内核选项中的quiet（禁
如果用 grub 作为boot loader，就将下面的内容添加到/boot/gnub/menu.lst（或
然后将这个 initramfs 设置到 boot loader 的 initrd 项中，以便在系统启动时加载。
接下来用下面的命令重新创建initramfs。
首先编辑解压后的 init。
创建调试用的 initramfs 
message试试看。
都加上 echo 命令。接下来在(d)的 loadpolicy 和 plymouth 执行之前加上个 echo
等。其中多处用 echo 命令显示信息，但是为了确定问题所在，有时会希望给每行
建最低限度的设备文件(b)、加载模块(c)、挂载磁盘上的 root 文件系统分区(d)
# find | cpio -0 -H newc I gzip - -c > /boot/initrd-2.6.27.9-159.fc10.debug.x86_64.img
Debug: executes plymouth
Debug: executes loadpolicy
Setting up other filesystem.
Mounting root filesystem.
title Fedora (2.6.27.9-159.fc10.x86_64) : Debug
Creeating root device.
echo Switching to new root and running init.
plymouth --newroot=/sysroot
echo Debug: executes plymouth
loadpolicy
echo Debug: executes loadpolicy 
setuproot
echo Setting up other filesystems.
initrd /initrd-2.6.27.9-159.fc10.debug.x86_64.img——设置成创建的 initramfs
kernel /vmlinuz-2.6.27.9-159.fc10.x86_64 ro root=/dev/VolGroup00/LogVol00
root (hdo,0)
www.TopSage.com
HACK#64 调试 initramfs 镜像| 361
371
---
## Page 380
372
#65
read(）、write(）、sleep(）、select(）、recv（）等系统调用。要注意的是，sched_yield(）
所谓阻塞API，就是会导致进程进入睡眠或I/O处于等待状态的系统调用，比如
确认RT Watchdog的行为
信号，达到hard limit后发送SIGKILL信号。
Watchdog，最大CPU时间以微秒为单位。达到softlimit后就给进程发送SIGXCPU
给RLIMIT_RTTIME设置最大CPU时间（包括soft limit和hard limit），就能启用RT
时进程，如果达到了用户预先设置的限制，就给进程发送信号。用setrlimit（2）
RT Watchdog会检测没有调用阻塞API（blockingAPI）而持续使用CPU时间的实
什么是RTWatchdog
只针对特定实时进程。从Linux2.6.25开始可以使用RTWatchdog。
为对象。另一种策略就是本hack介绍的RTWatchdog，该功能扩展了setrlimit(2)，
Linux2.6.23引入的名为CFS的调度器实现了该功能，这个功能以所有实时进程
（正确来说应该是任务调度器）自身对分配给实时进程的CPU时间做出限制。
导致系统整体的响应恶化等。对此Linux采取了两种策略。第1种是进程调度器
HACR
许多发行版在启动时采用了initramfs，本hack介绍了它的调试方法。
总结
行调试。
法立即确定问题原因。这种情况下请参考“HACK#18使用 SysRq 键调试”进
但是，用上述方法即使确定了问题所在，由于故障导致失去响应的情况下，也无
3621
“HACK#40实时进程停止响应”中也介绍过，实时进程失控会造成重大影响
Switching to newroot andrunning init.
1第6章高手们的调试技术
本hack介绍Linux2.6.25以上版本支持的RTWatchdog及其使用方法。
时进程
使用RTWatchdog检测失去响应的实
www.TopSage.com
—大和一洋
红网
---
## Page 381
个子进程，其行为都稍有不同。各个子进程之间的区别请参考源代码中的注释。
我们准备了下面的示例程序，用它来确认 RT Watchdog 的行为。该程序会fork()3
做阻塞 API。
系统调用并不是阻塞 API。 sched_yield()系统调用会主动释放 CPU，因此不能算
#include 
#include 
*笔者的环境(Fedora9)中 RLIMIT_RTTIME 不在中,
#include 
#include 
#include 
$ cat rt-watchdog.c
int main(void)
for (start=time(NULL); time(NULL) 
#include 
#include 
#include 
#include 
 param.sched_priority = sched_get_priority_min(SCHED_ R);
struct rlimit rl;
time_t start;
*1
*因此包含了
*改变该进程的实时类*/
setrlimit(RLIMIT_RTTIME, &rl);
rl.rlim_max = USEC_PER_SEC 
scall nx lm constant_tsc arch_perfmon pebs bts rep_good nopl pni monit
As ad we a s zss ass isxy xu tde sp yiei gd ed a 1
flags