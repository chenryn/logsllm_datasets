笔者考虑到估计大家对“source"、“object"、“objectid"、“ns”这几个可能有点疑问，其他
① ns：1.8.8版本的Zabbix是没有这个字段的，是在2.0.0版本加入这个记录的。因为如果
objectid：根据前面object 里的定义，这里可能为 triggerid，也可能是discovered hostid
object：这个字段记录了和event关联的Zabbix对象。
·对于discovery类型的event
·对于trigger类型的 event
只有timestamp，那么这个{ITEM.VALUE)会发生错乱。所以在ZBXNEXT-457中有人提
·对于interval 的 event，“0”表示“trigger"，“4”表示“item”，“5”表示“low-level
·对于auto-registration的event，这里的值一定是“3”
·对于trigger 相关的events，这里的值只可能是0。
· 3: internal 的 event。
·2：由agent auto-registration生成的event。
·1：由discovery rule生成的event。
·0：由 trigger生成的 event。
为以下几种情况。
ns
－0：trigger 的状态为 OK。
discovery”。
-0：host 或者 service 正在工作。
service”。
-1：host或者 service停止工作。
1：trigger的状态为PROBLEM。
int(11)
1NO
---
## Page 270
得非常棘手的问题，经常有人问，“为什么这个没有产生报警？”
PROBLEM（？）
PROBLEM
OK（？）
16.6
OK
TO
“e”表示报错的消息变了。
“(m》”表示这是一个“multiple PROBLEM event"。
“E”表示会生成一个Event。
○“T”表示会更新Trigger。
“no”表示没有任何操作。
○“_”表示不可能发生的情况。
表16-1是笔者在看Zabbix 源代码时发现的，其中表格中字母符号的意思如下。
在这一节，我们会一起把什么情况下会生成Trigger和Event 研究清楚，这也是让很多人觉
·对于internal类型的event
Triggers和Events生成的规则
－3：host 或者 service 丢失了。
0：normal 状态。
2：host 或者 service 被侦测到。
FROM
T+E
T+E
no
OK
1
T(e)
OK（?)
表16-1
T+E（m）
T（m)+T（e)
T+E
T+E
PROBLEM
第16章Zabbix数据库表结构解析
T（e）
PROBLEM(？)
●255°
---
## Page 271
·256
Zabbix中的疑惑。这一章中，我们从数据库入手，将这个问题讲清楚。
History和Trends
第17章
mysql> show tables like'%trends%';
首先看数据库中与history和 trends相关的表，内容如下。
History 和Trends 都是存储历史数据的地方，但是它们有什么区别，一直是大家使用
----
user_history
history_log
history
--------
proxy_history
history_uint_sync
history_str_sync
Tables_in_zabbix (%history%)
proxy_dhistory
history_uint
history_text
history_sync
history_str
---
## Page 272
sync'（'nodeid','id'）;\n\
(nodeid,id）;\n\
offset, ins_history_sync_sql）;
ins_history_sync_sql);
into history_sync（nodeid,itemid,clock,ns,value) values ";
的缩写，我们研究下是在什么地方使用的。首先看 grep 源代码，具体如下。
比如str表示字符串，log表示log文件类型。其中比较特别的是sync属性,sync一般是“synchronize
17.1 sync字段的含义
张表的功能是一样的，只是存储的数据类型不同。
libs/zbxdbcache/dbcache.c: const char *ins_history_sync_sql = "insert
libs/zbxdbhigh/dbschema.c:CREATE INDEX history_sync_1 ON history_sync
libs/zbxdbhigh/dbschema.c:CREATE TABLE history_sync (\n\
libs/zbxdbhigh/dbschema.c: {"history_sync", "id",
libs/zbxdbcache/dbcache.c:
history表比较多，但从表面能够很清楚地看出：大多数history表只是分了不同的数据类型。
其中 trends 表是比较简单的，一共两个表，其中 trends_uint表示的是 unsigned int，即这两
1trends_uint
trends
+------
ITables_in_zabbix (%trends%)
-----------
* for writing float-type items into history/
ZBX_HISTORY_SYNC,
第17章History和Trends
·257°
---
## Page 273
·258°
sync_sql
sync_sql);
(nodeid,itemid,clock,ns,value) values ";
tables.
dbcache.c中，把包含“history_sync”的地方都拿出来看一下，具体如下。
（nodeid,id）;\n\
Zabbix监控系统深度实践
(nodeid,itemid,clock,ns,value)values ";
"id");
（nodeid,id）;\n\
(nodeid,id）;\n\
FROMdual;\n\
Line
Line 1378:zbx_strcpy_alloc(&sql, &sql_alloc, sql_offset,
libs/zbxdbhigh/dbschema.c:
libs/zbxdbupgrade/dbupgrade.c:return
libs/zbxdbupgrade/dbupgrade.c:return
libs/zbxdbhigh/dbschema.c:CREATE INDEX history_sync_1 ON history_sync
libs/zbxdbhigh/dbschema.c:CREATE TABLE history_sync (\n\
通过思考，dbschema中的CREATE和 SELECT应该不是我们需要的地方，
libs/zbxdbhigh/dbschema.c:CREATE TABLE history_sync (\n\
libs/zbxdbhigh/dbschema.c:SELECT history_sync_seq.nextval INTO :new.id
libs/zbxdbhigh/dbschema.c:BEFORE INSERT ON history_sync\n\
libs/zbxdbhigh/dbschema.c:CREATE SEQUENCE history_sync_seq\n\
仔细研究了一下，
1390:zbx_strcpy_alloc (&sql, &sql_alloc, sql_offset,
*
，发现并不能看出 sync 表的用途，于是再返回去，会发现这样一行：
"history_str_sync"
DBmodify_proxy_table_id_field
“id"
,ZBX_HISTORY_SYNC,
into
ins_history
ins_history
history_sync
可能会是在
---
## Page 274
SYNC))
IZBX_HISTORY_SYNC, O},
NOTNULL I ZBX_HISTORY_SYN
NOTNULL 丨 ZBX_HISTORY_SYN
ID,ZBX_NOTNULL丨
NOTNULLIZBX_HISTORY_SYN
NOTNULLI ZBX_HISTORY_SYN
ZBX_NOTNULL|
ZBX_NOTNULL1 ZBX_HIS
NOTNULL|ZBX_HISTORY_SYN
TYPE_ID,
我们来 grep 看看，结果如下。
ZBX_HISTORY_SYNC,O1,
ZBX_HISTORY_SYNC, O},
zabbix_server/nodewatcher/history.c:if (o != (table->flags & ZBx_HIsTORY
1ibs/zbxdbhigh/dbschema.c:("ns","O",NULL,NULL, O,ZBX_TYPE_INT,ZBX_NOTNULL
1ibs/zbxdbhigh/dbschema.c:{"value","",NULL,NULL,255,ZBX_TYPE_CHAR,ZBX
libs/zbxdbhigh/dbschema.c:("clock","O",NULL,NULL,O,ZBX_TYPE_INT,ZBX
libs/zbxdbhigh/dbschema.c:("ns","O",NULL,NULL, O, ZBX_TYPE_INT, ZBX_NOTNULL
1ibs/zbxdbhigh/dbschema.C:{"value","O",NULL,NULL,O,ZBX_TYPE_UINT,ZBX
libs/zbxdbhigh/dbschema.c:("clock","O",NULL,NULL, O, ZBX_TYPE_INT,
libs/zbxdbhigh/dbschema.c:("ns","O",NULL,NULL, O,ZBX_TYPE_INT,ZBX_NOTNULL
libs/zbxdbhigh/dbschema.c:("history_str_sync","id", ZBX_HISTORY_sYNC,
libs/zbxdbhigh/dbschema.c:("value","0.000o",NULL,NULL, O,ZBX_TYPE_FLOAT,
1ibs/zbxdbhigh/dbschema.c:("clock","O",NULL,NULL,O,ZBX_TYPE_INT,ZBX
libs/zbxdbhigh/dbschema.c:{"itemid",NULL,
libs/zbxdbhigh/dbschema.c:{"itemid",NULL,"items","itemid",O,ZBX_TYPE_ID,
libs/zbxdbhigh/dbschema.c:{"history_uint_sync","id",ZBX_HISTORY_SYNC,
libs/zbxdbhigh/dbschema.c:
libs/zbxdbhigh/dbschema.c:
$ grep -r 'ZBX_HISTORY_SYNC'
这一行的“ZBX_HISTORY_SYNC”是全部大写的，这种命名方式似乎有点可以挖掘的地方。
ZBX_NOTNULLI
{"itemid",NULL,"items",
{"history_sync",
"items","itemid",O,ZBX_TYPE
"id",
"itemid"，O，ZBx
第17章History和Trends
ZBX_HISTORY_SYNC,
·259°
ZBX
---
## Page 275
·260°
Child 架构中使用的。
文件除了dbschema.c外，就是nodewatcher/history.c和 nodehistory.c，所以，这个表是在Master-
在判断表是不是ZBX_HISTORY_SYNC。这时，我们会发现，包含“ZBX_HISTORY_SYNC”的
&ZBX_HISTORY_SYNC))
&（ZBX_HISTORY 1ZBX_HISTORY_SYNC）))
SYNC）&&0 ==（table->fields[f].flags &ZBX_HIST
SYNC）)
SYNC）&&0==（table->fields[f].flags & ZBX_HIST
SYNC))
ZBX_HISTORY_SYNC )))
SYNC))
SYNC）&&0==（table->fields[f].flags&
SYNC）)
SYNC))
SYNC） && 0 == (table->fields[f].flags & ZBX_HIST
Zabbix监控系统深度实践
grep 出来的代码中，大部分都是类似O!=（table->flags& ZBX_HISTORY_SYNC）的，这是
zabbix_server/trapper/nodehistory.c:if (NULL != table && 0 !=(table->flags
zabbix_server/trapper/nodehistory.c:if(NULL
zabbix_server/nodewatcher/history.c:if（o ==（t->flags &（zBX_HISTORY
 zabbix_server/nodewatcher/history.c:if (0
zabbix_server/nodewatcher/history.c:if (0
zabbix_server/nodewatcher/history.c:if (0
我们先看nodewatcher/history.c，
使用了ZBX_HISTORY_SYNC的function及其和说明如下。
!=（table->flags & ZBX_HISTORY
!=（table->flags
!=(table->flags & ZBX_HISTORY
!= table && 0 ==(table->flags
&ZBX_HISTORY
&ZBX_HISTORY
---
## Page 276
计算每个小时的最小值、最大值和平均值，下面是trends表结构。
为接收到的数据。
Item 的数据以后，会将其存入history表。下面是history表结构。
表分为了两类一
12
样的，所以简单来说，我们可以把它们看成两张表：history表和trends 表。
我们在看history 和 trends 的区别的时候，把 sync 相关的表略去了。
master node”，即“周期性地将历史数据从子节点发送到父节点。”
而 trends表的作用是将history 表的数据以小时为维度进行归档。它会针对每一个 itemid,
这是个很简单的结构，“clock"和“ns"保存接收 Item的时间，“itemid"唯一标识了Item，“value"
上一小节中，我们主要把history在数据库中的几个表刨根问底了一番，把数据库中的相关
总结一下，history和 trends 表在数据库中分别有好几张表来对应不同的类型，它们都是一
mysql> desc history;
它们的相同点是都存储历史数据，不同点在于存储数据的粒度不同。每次Zabbix接收到
这时应该能明白了：带有 sync后缀的history表，是用作 Master-Child同步数据用的。那
|Field丨Type
 process_history_table_data：process new history data ；处理新的历史数据。
clock
itemid
value
带有ZBX_HISTORY*标识的表的数据。
history和trends的区别
|bigint(20)unsigned |NO
int(11)
double(16,4)
int(11)
—history表和 trends表。
|Null丨Key|Default|Extra1
INO
NO
NO
|MUL|NULL
0.0000
第17章History和Trends
·261°
---
## Page 277
·262
要的就是在Graph中了，如图17-1所示。
作用，大家就明白了。
次与history 相关的表，
InnoDB引擎的 MySQL，因为大表的删除非常慢。针对规模很大的 Zabbix，建议每周 truncate一
是个省时省力的方法，
trends机制。
直这样无限膨胀下去，history表的性能会非常差，从而拖累整个Zabbix数据库的性能。
一个数据都会在history表中有一行，而一天有86400秒，那么每天就是86400000行。如果一
重要的指标，就是VPS。我们看一下如果VPS为1000，即每秒Zabbix要处理1000个数据，每
17.3
Zabbix监控系统深度实践
下面看看 trends 在 Zabbix 的用处。其实在 Zabbix 中，trends 只在很少几个地方出现，最重
housekeeper 非常简单，就是定期删除 history 表中的数据。对于小规模的 Zabbix 来说，这
对于这个问题，Zabbix 提供了两方面的解决办法：一种是housekeeper 机制，另一种是
history表的作用就是存储所有Item的历史数据。前文介绍过，衡量Zabbix的性能有一个
其中，num字段表示了该小时使用了多少数据来计算最小值、最大值和平均值。
+-----
mysql> desc trends;
value_max
itemid
Field
value_avg
value_min
num
clock
housekeeper和trends表
|double(16,4)
|double(16,4)
1bigint(20) unsigned 丨 NO
IType
double（16,4)
大家可能担心这么暴力的删除会影响数据完整性，看完下面trends表的
，但对于大规模的 Zabbix数据库，使用 housekeeper效率非常差，特别是
int(11)
int(11)
-+------+-----+------一--+------
INO