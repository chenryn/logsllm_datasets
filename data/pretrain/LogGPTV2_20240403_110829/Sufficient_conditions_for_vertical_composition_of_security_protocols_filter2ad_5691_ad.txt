low (namely, (Καπανεύς)) in fact says that the structure of
all messages and non-atomic submessages in the protocols
P1 and P2 must be suﬃciently disjoint; roughly speaking,
P1 stuﬀ cannot be uniﬁed with P2 stuﬀ. The exclusion of
atomic submessages (i.e., variables and constants) is neces-
sary because a random nonce does not indicate whether it
“belongs” to P1 or P2. Thus, in any uniﬁcation step of the
lazy intruder, t1 and t2 can only be uniﬁable if they belong
to the same protocol. In the example, neither m1 nor m(cid:48)
can be uniﬁed with m2 or m(cid:48)
2.
1
Other intruder operations are analysis of messages in the
knowledge (e.g., in the example the intruder can decrypt
m(cid:48)
2), as well as generating terms on the sender side (in
the example, the intruder can generate m2 by encrypting
with pubk(pk(d)) the message obtained from decrypting m(cid:48)
2).
More generally, this allows us to show that each constraint
for generating a P P2
1 message can be solved without using
any P2 messages in the knowledge and vice versa. Thus, we
can reduce it to a problem of “pure” constraints that con-
tain only messages from one protocol each. That, however,
by the notion of protocol independence (cf. Deﬁnition 8, re-
quired below in (Τυδεύς)) means that we can simply split the
constraints into a P P2
1 part and a P2 part, and they repre-
sent an execution in isolation of P P2
and of P2, respectively.
Moreover, one of the two executions is then an attack against
the respective protocol. In our case, the two P P2
steps of the
trace together with the constraint IK 0 ∪ {m(cid:48)
2} (cid:96) m2 alone
entail an attack against P P2
1 : the attack is the solution D = i
and X = [h(n), m]2.
1
1
What remains to show is that this implies also an at-
tack on P1. This follows merely by replacing the payload
[h(n), m]2 in m(cid:48)
2 with the abstract payload payload(c, D).
In fact, as part of the conditions below we will label ev-
ery payload sent by an honest agent with this abstract pay-
load (reﬂecting the intentions of the agent). Similarly, the
receiver-side payload X is labeled with d’s expectations of a
payload from C for d. The solution C = c and D = i is the
authentication attack. This concludes the illustration of the
proof.
We thus solved the static vertical composition question as
it was left open in [27]. We emphasize once again that the
results are independent both of the veriﬁcation technique
used for verifying the atomic components and of the formal-
ism employed to model protocols such as rewriting, strands,
or process calculi.
4. THE CONDITIONS
We now ﬁnally present our seven conditions on a pair of
protocols that are suﬃcient for the vertical composition re-
sult (cf. Theorem 2); actually, in some cases, the conditions
are sets of related sub-conditions. For each condition, we
also highlight the speciﬁc role it plays in the proof. We label
the conditions with the names of the Επτά π Θήβας [19].
4.1 Structural Properties (Τυδεύς)
The ﬁrst condition is that P1 is a channel protocol provid-
ing a κ(A, B) channel and P2 is an application protocol rely-
ing on a κ(A, B) channel according to Deﬁnitions 4 and 5, so
that the compositions P2[P1] and P P2
(Deﬁnitions 6 and 8)
are actually deﬁned. Let also MA,B be deﬁned with respect
to P2 according to Deﬁnition 8. We further assume that P1
and P2 are execution independent (Deﬁnition 2).
1
1
The execution independence is used in the “splitting step”
of the proof, where we have an execution of P P2
and P2
in parallel and where we already know that the intruder
does not need to use messages from either protocol to at-
tack the other. Execution independence then allows us to
conclude that the sub-traces of the respective protocols are
valid traces.
4.2 Constants (Ιπποέδων)
We require that the set A of constants of the protocols is
partitioned into 4 pairwise disjoint subsets A = P(cid:93)S(cid:93)F(cid:93)L
where:
• S is the set of secret constants, e.g., long-term private
keys of honest agents, or long-term shared keys shared by
only honest agents; we assume that these are never trans-
ported (they can of course be used for encryption/signing).
• P ⊆ M0 is the set of public constants, e.g., agent names,
long-term public keys, long-term private keys of dishonest
agents, long-term shared keys that are shared with a dis-
honest agent; these are part of the initial knowledge M0 of
the intruder.
• F is the set of the fresh constants, i.e., whenever an
agent randomly generates new keys or nonces, they will be
picked uniquely from this set. As is standard, the intruder by
default does not know the fresh constants created by honest
agents, but may learn them from messages that the agents
send. F is further partitioned into the two disjoint subsets
F1 and F2 of fresh constants of P1 and P2, respectively.
• L is the set of abstract payloads (i.e., those denoted
by payload(A, B)). These may only occur in P1, and are
replaced by concrete payloads in P P2
1 and P2[P1]. We discuss
the initial knowledge of the abstract payloads below.
The partitioning of the constants plays a role in proving
that for each message that the intruder has to produce for
protocol P2, he needs only (composed) P2 messages, pub-
lic constants, and fresh constants from F2. (And a similar
property holds for P P2
1 .) If, however, the considered attack
were to use a secret constant from S, then there would be
a simpler attack already (and we would not need to worry
442about the construction of further messages with the exposed
secret). The abstract payloads L only come back into the
picture in the ﬁnal step of the proof, when we reduce the
P P2
4.3 Disjointness (Καπανεύς)
attack to a P1 attack.
1
We require that the message formats are suﬃciently diﬀer-
ent to distinguish P1 terms and P2 terms—except for con-
stants (like agent names, nonces, and keys) since constants
(a) may be shared between protocols (e.g., agent names and
keys) and (b) by construction usually cannot be attributed
to a unique protocol, (e.g., nonces).
• The message patterns MP are the terms that represent
messages sent and received by honest agents in the ASLan
protocol description, where we ensure by renaming of vari-
ables that distinct elements of MP have disjoint variables.
Let SMP be the non-atomic subterms of the message pat-
terns (with the same variable renaming). For instance, for
the protocols of Figure 1, MP and SMP are as shown in
Figure 2, where we write A, B, C, D as placeholders for ar-
bitrary agents for the sake of readability. We require mes-
sage patterns not to be atomic:7 MP (Pi) ∩ (V ∪ Σ0) =
∅ for i ∈ {1, 2}; moreover, non-atomic subterms must be
disjoint: SMP (P1) (cid:117) SMP (P2) = ∅ , where M (cid:117) N = {σ |
∃m ∈ M, n ∈ N. mσ = nσ} . We exclude atomic message
patterns since otherwise we’d have messages for which we
cannot ensure that they are attributed to a unique protocol.
• By the previous item, the following labeling is possible
on all message patterns in the protocol description. Every
non-atomic subterm m is labeled either P1 or P2, in symbols
m : Pi. There is only one unique such labeling because the
spaces of non-atomic subterms of the Pi must be disjoint.
• Next, we can also label the atomic subterms except
public and secret constants in a unique way: we label them
by the label of the next surrounding operator. We will make
one exception from this rule below for the payload (the pay-
load is of type P2 but it is embedded into a P1 context), but,
in order not to break the ﬂow of the argument, we postpone
this a bit.
• We additionally require that the sets of variables used
in the descriptions of P1 and P2 are disjoint, and that fresh
constants are chosen from the disjoint sets Fi. Therefore,
no variable or constant can have an ambiguous labeling.
Forbidding atomic messages in MP may seem like a re-
striction, e.g., we cannot send simply a single nonce N as
message. However, observe that we only require to put that
nonce into a bit of context e.g., [tag, N ]2, where tag could
be a constant identifying the protocol, as it is in practice
often done with port numbers.
This condition is used in the proof when we consider how
the lazy intruder constraints of a given attack can be solved.
The message to construct is an instance of a subterm of MP .
It is either non-atomic or atomic. If it is non-atomic (i.e., is
an instance of a term in SMP ), then it belongs to a unique
protocol P1 or P2 and uniﬁcation is only possible with other
SMP messages of that protocol that are in the knowledge of
the intruder. If it is atomic, then it is either a constant (and
handled by arguments provided by the previous condition)
or a variable. Note that the variable is thus labeled by the
last surrounding context. This is in fact the key where the
lazy intruder comes into play: we leave constraints where the
term to generate is just a variable, i.e., any term the intruder
knows will do. However, during other reduction steps, the
variable may get instantiated.
In this case, again by this
condition, the instantiated term will have the same label as
the variable (i.e., whether it belongs to P1 or P2). Thus,
at the end of the day, we obtain that all P2 terms can be
constructed using only P2 knowledge and public constants
(and similar for P P2
4.4 Disjointness of Concrete Payloads
terms).
1
(Πολυνείκης)
We require that MA,B comprise only of ground P2 terms.
Moreover, the concrete sets of payload terms MA,B must be
pairwise disjoint for honest senders, i.e., MA,B∩MA(cid:48),B(cid:48) = ∅
whenever A and A(cid:48) are honest and (A (cid:54)= A(cid:48) or B (cid:54)= B(cid:48)).8
This does not imply that honest agents or the intruder can
recognize from a payload who is (the claimed) A and B.
This condition allows us to unambiguously label every
concrete payload with its original sender (even when the
message has been forwarded and manipulated by the in-
truder) and the intended recipient. This labeling makes sev-
eral constructions in the proof easier as we explain below.
instance the concrete example of MA,B in Section 3.2.
4.5 Payload Type and Context (Ετέοκλος)
To see that this condition is actually feasible, consider for
We now make some provisions about the handling of pay-
load messages in the protocols. We begin with an overview
and then give the precise conditions. First, we label those
subterms in the message patterns that represent payloads
sent or received by honest agents. This is, of course, no re-
striction but requires that during the translation from AnB
to ASLan we need to keep track of which subterms of mes-
sages represent payloads, and we thus simply speak of mes-
sages of type Payload (this is made precise below). Second,
we require that these payload subterms when sent or re-
ceived by honest agents are always embedded into a unique
payload context CP [·] that unambiguously signalizes the sub-
term is meant as a payload and so that no other message
parts are accidentally interpreted as payloads (this is also
made precise below). We require that this context is an n-
tuple of the form [m1, . . . , mn]n where one of the mi is the
payload and the other mi are all constants, e.g., tags or agent
names. For instance, our example abstract channel protocol
P1 in Figure 1 uses the context CP (A, B)[·] = [p, A, B,·]4.
Note that we here actually allow that contexts may be pa-
rameterized over additional information such as the involved
agents, but for simplicity of notation we only write CP [·]
whenever no confusion arises. Note also that the context
alone does not protect the payload against manipulation or
even reading by other parts, as this depends on the goal
of the channel protocol. Moreover, we will assume that an
intruder can always create such contexts.
The precise requirements about the labeling and the oc-
currence of contexts are as follows:
1. (CP [·] identiﬁes payload.) In P1 and P P2
terms: For
every term CP [m] it holds that m is typed Payload, and
all Payload-typed messages m occur as CP [m]. More-
1
7Recall that mappings like pk(a) map from atoms to atoms
and thus pk(a) also counts as atomic in the sense of this
deﬁnition.
8This could be achieved by inserting a constant into the
payload chosen from a set XA,B of a family of disjoint sets
XA,B.
443MP (P1) = { {{[p, A, B, payload(A, B)]4}privk(pk(A))}pubk(pk(B)), {{[p, A1, B1, X1]4}privk(pk(A1))}pubk(pk(B1)) }
SMP (P1) = MP (P1) ∪ { {[p, A2, B2, payload(A2, B2)]4}privk(pk(A2)), {[p, A3, B3, X3]4}privk(pk(A3)),
pubk(pk(B4)), [p, A5, B5, payload(A5, B5)]4, [p, A6, B6, X6]4, privk(pk(A7)), p, payload(A8, B8) }
MP (P2) = { [N1, C1, D1]3, [h(N2), M2]2 }
SMP (P2) = MP (P2) ∪ { h(N2) }
Figure 2: MP and SMP for the example protocols of Figure 1.
1
over, in P P2
such a message m is a concrete payload
from P2 and is thus labeled as belonging to P2, while
in P1, we have abstract payloads that are labeled P1.
2. (CP [·] has blank-or-concrete payloads): each payload
that occurs under CP [·] (i.e., in all P1 messages) is
either ground or a variable. The ground case repre-
sents an honest agent sending a concrete payload from
MA,B, and we thus additionally label it spayload(A, B).
The variable case means that an agent receives a pay-
load, and we thus label it rpayload(A, B) (where B is
the name of the receiver and A is the supposed sender).
The fact that we here allow only a variable means that
the channel protocol P1 is “blind” for the structure of
the payload messages from P2, and thus any value is
accepted. We also require that if a variable occurs as
payload under CP [·], then all other occurrences of that
variable are also under CP [·].
3. (Payloads in P2.) In P2 terms, the message m that is
transmitted as payload over the κ(A, B)-channel is of
type Payload and every ground instantiation mI must
be a member of MA,B. Similarly to the labeling for
P P2
in the previous item, m is either ground and la-
beled spayload(A, B), or it is a symbolic term (not nec-
essarily a variable) and labeled rpayload(A, B).
1
4. (CP [·] cannot be confused in P1.) {t} (cid:117) {CP [s] | s ∈
TΣ(V)} = ∅ for any t ∈ SMP (P1) where t (cid:54)= CP [t(cid:48)] for
any term t(cid:48).9 By (Καπανεύς), it also follows that CP [·]
is disjoint from P2-typed message parts as it belongs
to P1.
1
This assumption ensures that every subterm m of a P P2
term that is of type Payload is either a variable or ground.
If it is a variable it is labeled rpayload(A, B), whereas if
it is ground, then m ∈ MA,B for some uniquely deter-
mined A and B and this is indicated by the appropriate
label spayload(A, B). This property is preserved over all
constraint reductions in the proof. In particular, we cannot
unify payload with non-payload subterms. Note that when
we unify a concrete payload with a variable (as respective
subterms of a message), the variable will be replaced with
the concrete ground payload and will be again labeled with
an spayload(A, B) term. This is even true if the variable was
labeled with rpayload(A(cid:48), B(cid:48)); this may then be the source
of the attack, but observe that when the goal did not in-
clude authentication, it may be not be an attack in itself.
Finally, the labels give us the argument for the ﬁnal step
of the proof, when we have isolated a P P2
attack and want