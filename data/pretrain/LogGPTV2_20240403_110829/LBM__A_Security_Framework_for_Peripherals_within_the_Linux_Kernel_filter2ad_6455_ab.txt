 lbm sysfs
User Space
Kernel Space
lbm1
lbm2
lbm3
F
r
a
m
e
w
o
r
k
L
B
M
Peripheral Subsystems
USB 
Subsys
Bluetooth 
Subsys
NFC 
Subsys
LBM 
TX
LBM 
TX
LBM 
TX
LBM 
RX
LBM 
RX
LBM 
RX
BPF/eBPF
USB Packet
BT Packet
NFC Packet
Figure 1: LBM Architecture.
G4 Generality – The solution should provide a general
framework that seamlessly incorporates the features of
existing security solutions.
G5 Flexibility/Extensibility – The addition of support for
new kinds of peripherals should be a straightforward and
non-intrusive process.
G6 Usability – The solution should be easy to use.
G7 High Performance – The solution should introduce
minimal overhead.
Bearing these goals in mind, we design the Linux (e)BPF
Module (LBM), as shown in Figure 1.
Within the kernel space, LBM interposes different periph-
eral subsystems (such as USB, Bluetooth, and NFC) at the
bottom level, covering both TX and RX paths. Before a packet
can be sent out or reach the corresponding protocol stack
for parsing, LBM applies ﬁltering rules (eBPF programs)
and loaded LBM kernel modules to the packet for ﬁltering.
In the user space, we introduce a new ﬁlter language for
peripherals. Filters written in this language are compiled into
eBPF programs and loaded into the kernel by LBMTOOL.
In short, LBM provides a general peripheral ﬁrewall frame-
work, running eBPF instructions as the packet ﬁltering mech-
anism. We instantiate LBM on USB, Bluetooth, and NFC to
cover the most common peripherals.
C. LBM Kernel Infrastructure
We design LBM as a standalone kernel component/subsys-
tem statically linked into the kernel image. We rely on TPM
and IMA [65] to guarantee the boot time integrity of the kernel
and load time integrity of user-space dependencies. We further
use MAC such as SELinux [69] to make sure LBM cannot
be disabled without root permission. Since LBM cannot be
unloaded/reloaded as a kernel module, disabled, or bypassed
from the user space, we achieve G2 – tamper-proofness.
For each kind of peripheral that LBM supports, we need to
place “hooks” on both the TX and RX paths to mediate each
packet being sent to and received from the peripheral. While
Storage Driver
Input Driver
Video Driver
USB Core
LBM TX
LBM RX
Host Controller Device Driver
Host Controller Device
USB Peripherals
Figure 2: LBM hooks inside the USB subsystem.
different peripheral subsystems may have different structuring
of their software stack architectures within the kernel, we
follow two general rules for the placement of LBM hooks.
First, these hooks should be placed as close as possible to
the real hardware controlling the corresponding peripherals.
This helps reduce the potential impact from vulnerabilities
within the upper layer of the software stack (e.g., by packets
bypassing the hooks). Second, these hooks should be general
enough without relying on the implementation of certain
hardware. As a result, we place LBM hooks beneath the core
implementation of a peripheral’s protocol stack, and above a
speciﬁc peripheral controller driver.
Take USB as an example. As shown in Figure 2, LBM
hooks are deployed just above the host controller device and its
driver, which communicates with USB peripherals directly. At
the same time, the hooks are deployed below the USB core and
other USB device drivers, preventing third-party USB drivers
from bypassing these hooks. Through this careful placement
of LBM hooks, we achieve G1 – complete mediation.
Since LBM allows the loading of eBPF programs into the
kernel space and executing of these programs for peripheral
packet ﬁltering, special care is needed to make sure these
programs are not
introducing new vulnerabilities into the
kernel or bypassing security mechanisms enforced by the
kernel. We leverage the eBPF veriﬁer [70] to examine each
eBPF program before it can be loaded. Unlike normal eBPF
programs (mainly used by the networking subsystem) loaded
by the bpf syscall, we forbid both bounded loop [26] and
packet rewriting (e.g., changing the port number of a TCP
packet) in LBM. Once a program passes veriﬁcation, we can
be sure that the program halts after a limited number of state
transitions, that each program state is valid (e.g., no stack
overﬂow occurs), and that no instruction changes the kernel
memory (besides the program’s own stack). We achieve G3 –
veriﬁability for programs executed by LBM.
LBM draws inspiration from state-of-the-art solutions in-
cluding USBFILTER [79] and USBFirewall [43], and im-
proves on them, as shown in Table I. Similarly to USB-
FILTER, LBM supports kernel module plugin. As depicted
in Figure 1, different LBM kernel modules (e.g., lbm1-lbm3)
can be plugged into the LBM framework and essentially hook
into the TX and/or RX paths for different peripherals. As we
will later show in Section V-A, it takes less than 20 lines of
(cid:26)(cid:24)(cid:17)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:45 UTC from IEEE Xplore.  Restrictions apply. 
Feature
Plugin Modules
Stack Protection
User-deﬁned Rules
TX Path Mediation
RX Path Mediation
Multiple Protocols
USBFILTER
(cid:2)
(cid:2)
(cid:2)
USBFirewall
(cid:2)
(cid:2)
LBM
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
Table I: LBM compared to USBFILTER and USBFirewall.
LBM uniﬁes USBFILTER and USBFirewall, providing a su-
perset their properties via extensible protocol support.
Feature
USBFILTER
USBFirewall
Filter Mechanism
User-space DSL
Acceleration
C
CNF
Short Circuit
C
N/A
N/A
LBM
eBPF
JIT
PCAP DSL
Table II: LBM vs. USBFILTER vs. USBFirewall, speciﬁcally
with respect to ﬁlter design of each.
change to convert a LUM (Linux USBFILTER Module) into
an LBM module. To protect protocol stacks from malformed
packets, we derive packet ﬁeld constraints from speciﬁcations.
Rather than translating these constraints into C and compil-
ing them into the kernel image like USBFirewall does, we
transform them into eBPF programs and load them on the
RX paths for malformed packet ﬁltering. In short, we achieve
G4 – generality, by incorporating all the features provided
by existing solutions. Additionally, we extend support beyond
USB to other peripherals, such as Bluetooth and NFC.
To ease support for a new kind of peripheral, we design a
uniﬁed API used by different subsystems to hook into LBM:
int lbm_filter_pkt(
int subsys, int dir, void *pkt)
subsys determines the index of a certain peripheral subsys-
tem (e.g., 0 for USB and 1 for Bluetooth); dir speciﬁes the
direction of the I/O path: TX or RX; and pkt points to the
core kernel data structure used to encapsulate the I/O packet
depending on different subsystems, (e.g., urb for USB and
skb for Bluetooth). Once this LBM hook is placed into a
peripheral subsystem, developers can write an LBM module to
ﬁlter packets using typical C programming, by implementing
the TX and/or RX callbacks:
int (*lbm_ingress_hook)(void *pkt)
int (*lbm_egress_hook)(void *pkt)
A more useful extension is to expose some packet ﬁelds to
the user space, and implement BPF helpers as backends to
provide data access to these ﬁelds if needed (as we have done
for USB and Bluetooth). As a result, LBMTOOL can generate
a new dialect for the new peripheral based on a PCAP-like
packet ﬁltering language. Users can then write ﬁltering rules
as they would for tcpdump instead of directly crafting eBPF
instructions. Through the design of the LBM framework and
the introduction of a domain speciﬁc language (DSL), we
achieve G5 – ﬂexibility/extensibility.
Besides the veriﬁability of eBPF programs, we choose eBPF
as the ﬁltering mechanism in LBM to strike a balance between
lbmtool
Expr
Parse
CST
Tree
Shaping
Semantic
Analysis
CodeGen
IR
IRGen
AST
eBPF 
Program
Loader
write
call
sysfs
sys_bpf
Figure 3: The ﬂow of LBMTOOL in compiling LBM rules to
eBPF programs and loading them into the running kernel.
performance and programmability. As shown in Table II, both
USBFILTER and USBFirewall rely on hardcoded C compiled
into the kernel to implement the ﬁlter mechanism. Although
USBFirewall leverages the Haskell description of the speciﬁ-
cation to generate the C code, it lacks support for a user-space
DSL. USBFILTER only supports a limited DSL following the
conjunctive normal form (CNF). As we will elaborate in the
following section, LBM DSL is more expressive and powerful.
Instead of implementing a ﬁltering mechanism directly, LBM
builds an eBPF running environment for peripherals and
executes eBPF programs as ﬁlters. Thanks to JIT compilation
of eBPF code, LBM is able to run ﬁlters as fast as native
instructions; thus, we achieve G7 – high performance.
D. LBM User Space
To interact with an LBM-enabled kernel we design LBM-
TOOL, a frontend utility to interact with the LBM kernel space.
Its primary purpose is to compile, load, and manage LBM
programs resident in the kernel. To create a uniﬁed, simple,
and expressive way of describing peripheral ﬁltering rules, we
develop a custom Domain Speciﬁc Language (DSL) modeled
on Wireshark and tcpdump ﬁlter expressions. These LBM
rules are processed by LBMTOOL using a custom compiler that
outputs eBPF ﬁlter programs, as shown in Figure 3. Compiled
ﬁlters are loaded into the LBM framework via an extension to
the sys_bpf syscall. Programs are then loaded into a speciﬁc
subsystem: USB, Bluetooth, or NFC.
The ﬁlter syntax we develop is concisely described by the
grammar shown in Appendix A. Filter rules are effectively
stateless expressions that abstract away from the eBPF lan-
guage syntax. For example, if we want to match on a speciﬁc
USB device’s vendor and product ID, such as a Dell optical
mouse, we would write:
usb.idVendor == 0x413c && usb.idProduct == 0x3010
If we want to include more than one Dell product, we could
write multiple rules, or we could consolidate them into a larger
expression. To match on a Dell mouse, keyboard, printer, and
Bluetooth adapter, we would write:
usb.idVendor == 0x413c && (
usb.idProduct == 0x3010 || // Mouse
(cid:26)(cid:24)(cid:18)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:45 UTC from IEEE Xplore.  Restrictions apply. 
usb.idProduct == 0x2003 || // Keyboard
usb.idProduct == 0x5300 || // Printer
usb.idProduct == 0x8501
// Bluetooth adapter
)
The LBMTOOL compiler supports multi-line nested sub-
expressions while following the C 89 Standard operator prece-
dence rules [5].
LBMTOOL is able to load a compiled LBM program into
a target subsystem TX (OUTPUT) or RX (INPUT) path
and specify a match action (i.e., ACCEPT or DROP). The
following usage has LBMTOOL compile and load a ﬁlter rule:
lbmtool --expression "usb.idProduct == 0x3010"
-o mouse.lbm
lbmtool --load mouse.lbm -t usb -A INPUT -j
ACCEPT
By providing descriptive error-checking in LBMTOOL and
developing a custom DSL that is easy to write in and reason
about, we achieve G6 – usability.
IV. IMPLEMENTATION
A. LBM Kernel Space
We divide the implementation of the LBM kernel space
into three parts: core, USB implementation, and Bluetooth
implementation. All LBM-speciﬁc code is located under the
security/lbm directory of the Linux kernel source tree,
as a new security component for the Linux kernel.
LBM Core: To load an eBPF program into LBM, we extend
the existing bpf syscall, sys_bpf. We deﬁne a new program
type BPF_PROG_LOAD_LBM to distinguish LBM calls from
other typical BPF usage. Unlike typical eBPF programs, which
normally only persist for the lifetime of the loading process,
LBM ﬁlters must persist after LBMTOOL exits. To extend
the lifetime of these programs, we pin them using the BPF
ﬁlesystem [17], essentially using the ﬁlesystem to increase the
reference count of the object.
Before a program is saved by the LBM core, the eBPF ver-
iﬁer checks every instruction of the program for any security
violations. Depending on the subsystem (USB or Bluetooth) of
the program, LBM provides different veriﬁer callbacks, such
as LBM USB or LBM Bluetooth (as we will detail later),
thus making sure every memory access of the program is
meaningful, aligned, and safe.
Inside LBM, all eBPF programs are organized based on
the relevant subsystem and the direction of the ﬁltering path
(i.e., TX or RX). We allow the same program to apply for
both the TX and RX paths when it is loaded using the BPF
syscall, and duplicate the program on TX and RX queues,
respectively. The separation of TX and RX paths is mainly
for performance, since it allows us to bypass programs that do
not interpose on a certain path during ﬁltering. Additionally,
to avoid expensive locking, each program is protected by the
read-copy-update (RCU) [34] mechanism to enable concurrent
reads by different LBM components. LBM modules are also
organized according to subsystem and ﬁlter path, and protected
for_each_ebpf_in_db[subsys][dir] {
if (ebpf(subsys, dir, pkt) == DROP) {
check_subsystem(subsys);
check_path(dir);
check_pkt(pkt);
res = ALLOW;
if (dir == TX) {
1 int lbm_filter_pkt(int subsys, int dir, void *pkt)
2 {
3
4
5
6
7
8
9
10
11