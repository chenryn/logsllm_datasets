User: How to use iptables on the server for security protection and traffic control?
Assistant: iptables is a command-line tool for configuring netfilter firewall under Linux. Security protection and flow control can be implemented on the server by modifying iptables rules. The following are the steps to use iptables for security protection and traffic control: 1. Identify the services and network traffic that need to be protected or controlled Before starting to use iptables for protection and control, you need to specify the services and network traffic that need to be protected or controlled, such as SSH service , HTTP service, SMTP service, etc. 2. Set the default rules iptables has three default rules, including INPUT, OUTPUT and FORWARD, all of which are ACCEPT by default. Different default rules can be set according to actual needs, for example: iptables -P INPUT DROP # Set all incoming data packets to be rejected by default iptables -P FORWARD DROP # Set all transited data packets to be rejected by default iptables -P OUTPUT ACCEPT # Set all The outgoing data packets are allowed by default. 3. Adding rules Adding rules using iptables requires specifying rule chains, matching conditions and actions. For example, to limit the source IP address of the SSH service: iptables -A INPUT -p tcp --dport 22 -s 192.168.1.0/24 -j ACCEPT This rule can be interpreted as: -A: Add a rule at the end of the INPUT rule chain new rules. -p tcp: Match TCP protocol. --dport 22: Match packets with destination port 22. -s 192.168.1.0/24: Matches packets with source IP address 192.168.1.0/24. -j ACCEPT: If the matching condition is satisfied, the ACCEPT action is executed, that is, the rule is allowed to pass. Other commonly used rules include: - Rules that allow local access to external networks: iptables -A OUTPUT -j ACCEPT iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT - Rules that prevent SYN attacks: iptables -A INPUT -p tcp --syn -m limit --limit 1/s -j ACCEPT iptables -A INPUT -p tcp --syn -j DROP - reject ICMP type 8 and type 0 packets: iptables -A INPUT -p icmp --icmp-type 8 -j DROP iptables -A INPUT -p icmp --icmp-type 0 -j DROP 4. Saving rules The rules added through the iptables command will not be saved, and will become invalid after the server restarts. So you need to save the rules. On CentOS/RedHat system, you can use the following command: service iptables save #Save iptables rules service iptables restart #Restart iptables service to make the new rules take effect On Ubuntu/Debian system, you can use the following command: iptables-save > /etc/ iptables.up.rules # save iptables rules iptables-restore < /etc/iptables.up.rules # restore iptables rules The above are just examples of iptables common rules, iptables also has many advanced usages and complex scenarios, it is recommended to use iptables before Learn the relevant knowledge and rules first.