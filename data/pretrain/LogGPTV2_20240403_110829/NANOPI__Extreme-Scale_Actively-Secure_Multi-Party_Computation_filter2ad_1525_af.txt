η20 = η19
η21 = η20
η17 = η16
L19 = L18
⟨ρ, σ , η, {ℓ ← true} + L⟩ = ⟨ρ, σ[ℓ ← true], η, L⟩
⟨ρ, σ , η, {ℓ ← false} + L⟩ = ⟨ρ, σ[ℓ ← false], η, L⟩
⟨ρ, σ , η, {ℓ ← ℓ1 ⊙ ℓ2} + L⟩ = ⟨ρ, σ[ℓ ← σ(ℓ1) ⊙ σ(ℓ2)], η, L⟩
Figure 6: Formal semantics for executing delayed closures.
figure, the three equations simply move the atomic actions from L
to the store σ.
We formalize the argument that the staged semantics produces
the same answers as the canonical semantics in the following propo-
sition.
Proposition 5.1 (Correctness of Staged Semantics). The
sequence of atomic actions ℓi ← vi on the store performed in the
canonical semantics coincides with the ones performed in the staged
semantics.
Third, in a configuration ⟨ρ, σ , η, L⟩, the environment ρ and the
delayed closures L contain all the live locations. (The locations in
the association η are already in the environment ρ.) Any method
that shrinks σ by collecting all other locations, i.e., all locations
that do not occur in ρ or in L, would be sound. Our specification
for this abstract notion of garbage collection is inspired by the line
of work on abstract models of memory management initiated by
Morrisett et al. [32]. We need a rule:
⟨ρ, σ[ℓ ← v], η, L⟩ = ⟨ρ, σ , η, L⟩
if ℓ occurs in neither ρ nor L. The rule specifies that the config-
uration consisting of the environment, store, association η, and
closures on the left is indistinguishable from the configuration on
the right. First the location ℓ occurs exactly once in the left store
σ[ℓ ← v] as locations are always unique in the store. That location
is deallocated on the right leaving the store σ without the loca-
tion ℓ. The correctness of this rule is straightforward to prove by
inspecting the semantic relations in Figs. 5 and 6. Indeed, in every
semantic rule that mentions a store lookup σ(ℓ) or a store update
σ[ℓ ← v], the location ℓ is already present in either ρ or L. Hence
all other locations are inaccessible and can be garbage collected.
Therefore the actual space used at any point during the execu-
tion is proportional to the number of live locations at that point,
i.e., the number of locations accessible through either the current
environment or the closures data structure. At one extreme, the
closures data structure can be restricted to have exactly one clo-
sure which is immediately executed. The space usage in this case
would coincide with that of the standard scoped execution and that
corresponds to the minimum-space/maximum-rounds needed to
execute the circuit. At the other extreme, the closures data struc-
ture can extend through the entire program forcing all locations to
be simultaneously live, achieving minimum-rounds at the cost of
maximum-space. In practice, the size of the closures data structure
can be a constant independent of the size of the program and the
space usage is only a constant factor more than the minimal one.
Thus, we conclude with a proposition about the space efficiency of
staged execution semantics.
Proposition 5.2 (Space Usage). If the staged semantics collects p
operations for each stage, its space usage at each point in the exe-
cution is proportional to p plus the number of live locations in the
environment.
5.2 Fixing Π2pc
We modifies WRK’s Π2pc so that it uses FaAND instead of FPre’s
aAND. This is done by replacing the step (4a) of Figure 14 with the
following:
(4) (a) P1 and P2 invoke FaAND. In return, P1 receives random
[x1]1,[x2]1,[x3]1 and P2 receives random [y1]2,[y2]2,[y3]2
such that (x1 ⊕ y1)(x2 ⊕ y2) = x3 ⊕ y3. P1 and P2 securely
align x1 ⊕ y1 with rα ⊕ sα , and securely align x2 ⊕ y2 with
rβ ⊕ sβ . Finally, P1 sets rσ (cid:66) x3 and P2 sets sσ (cid:66) y3, thus
rσ ⊕ sσ = λα ∧ λβ .
The modified step securely aligns two secret bits a, b, each of which
is already divided into two abits, e.g., ([a1]1,[a2]2), ([b1]1,[b2]2).
The alignment operation can be simply done by letting the two
parties to exchange [a1 ⊕ b1]1 and [a2 ⊕ b2]2. This allows them
to check in plaintext if a1 ⊕ b1 = a2 ⊕ b2, which is equivalent to
a1 ⊕ a2 = b1 ⊕ b2. If the equality doesn’t hold, P1 should flip its bit
a1 while P2 resetting K[a1] (cid:66) K[a1] ⊕ ∆2.
Proposition 5.3. If H is modeled as a random oracle, the original
WRK protocols with modified step (4a) described above securely com-
putes f against malicious adversaries with statistical security 2−s in
a hybrid model with ideal Fabit and FaAND.
Intuitively, because both x1 and rα are uniform, revealing x1 ⊕
rα won’t give P2 any advantage in guessing either x1 or rα . The
proposition above is proved in a hybrid model with ideal Fabit and
FaAND. The proof is in the full version of the paper.
5.3 Scalable Generation of abits and aANDs
in the
We describe our scalable abit generation protocol ΠScalable
FLeaky-RCOT-hybrid model. FLeaky-RCOT functionality is given in Fig-
ure 7, which can be efficiently implemented based on actively-
secure OT extension by Keller et al. [18].
FLeaky-RCOT(n, ℓ)
abit
Public parameters: security parameter n, batch-size ℓ.
Honest case: Upon receiving ∆ ∈ {0, 1}n from P1, for every i ∈ [ℓ]
choose uniform ci ∈ {0, 1} and uniform mi ∈ {0, 1}n. Send
{mi }i∈[ℓ] to P1 and send {(ci, mi ⊕ ci · ∆)}i∈[ℓ] to P2.
Dishonest case: Upon receiving x guesses {(ij, bj)}j∈[x] (where ij ∈
[n], bj ∈ {0, 1}) from P2, check if ∆ij
= bj (i.e., whether the ij -th bit
of ∆ is equal to bj ) for every j ∈ [x]. If all checks pass, send nothing
to P1 but “attack succeed” to P2; otherwise, in case any check fails,
send “P2 cheats” to P1 and “bad guess” to P2.
Figure 7: The leaky-RCOT functionality.
abit
Our ΠScalable
in Figure 8 generates abits in batches of p. A key
insight is that we can allow different batches to share the same ∆ by
letting the sender to pick uniform rank-n matrix A and ∆′ ∈ {n + s}
for each batch subject to A×∆′ = ∆. ∆′ will be used to run a batch of
p + s Leaky-RCOT, and A is used to specify an entropy-preserving
linear transform to compress the correlated leaky messages re-
turned by FLeaky-RCOT. It is important to run the consistency check
in (4c) to prevent active attackers from deliberately using different
∆ in different batches. The basic idea of this check resembles the
ones used in several prior works [18, 36, 47].
abit
Proposition 5.4. ΠScalable
The aAND generation protocol ΠScalable
of Figure 8 can securely realize Fabit.
aAND is given in Figure 9. The
cut-and-choose bucket size of ΠScalable
aAND will be derived from the
statistical security parameter s and the space budget of the pool,
using the process explained below.
Determine Cut-and-choose Bucket Size. Given statistical param-
eter s and pool size p, the parties want to find the most efficient
bucket size B to bound the failure rate by 2−s.
In ΠScalable
aAND , every faulty leaky-aAND will be detected with prob-
ability 1/2. Additionally, every leaky-aAND can be checked but also
later combined with other randomly picked B − 1 leaky-aAND to
form a secure aAND. Let PB(p, b) be the probability of a successful
attack throughout the lifetime of a pool of size p and bucket-size B
provided that at most b faulty leaky-aAND have ever been success-
fully inserted into the pool. The security of ΠScalable
aAND is guaranteed
if a single leaky-AND in each bucket is honestly-generated. So we
have the following recurrence for PB(p, k):
PB(p, k − i) +
(cid:1)(cid:0)k
(cid:0)p−k
(cid:0)p
(cid:1)
B−1
(cid:0)k
(cid:0)p
(cid:1)
(cid:1) ,
(cid:1)
i
PB(p, k) =
i =0
PB(p, k) = 0,
B−i
B
B
B
∀ k ≥ B;
∀ k  p, exit with output ⊥.
halt; otherwise, set B (cid:66) B + 1.
b0.
Proposition 5.5. Protocol ΠScalable
aAND (s, p) of Figure 9 securely re-
alizes FaAND.
Formal proofs of the two propositions above can be found in the
full version of this paper.
Security of nanoPI. Proposition 5.4, 5.5, and 5.3 together guar-
antee the security of the cryptographic modifications of nanoPI,
while Proposition 5.1 guarantees that the instrumentation we used
preserves the semantics of our modified cryptographic protocol.
Therefore, nanoPI is secure.
6 THE MULTI-PARTY COMPUTATION
SETTING
(cid:16)
(cid:17)
(cid:16)
A clear advantage of WRK is that it is easy to generalize it into a
(cid:17)
constant-round secure multi-party computation protocol. In this set-
ting, an n-party authenticated bit of Pi, denoted as [b]i, refers to the
b, {Mj[b]}j(cid:44)i
tuple
and Pj (∀j (cid:44) i) holds Kj[b] and ∆j so that Mj[b] = Kj[b]⊕b∆j. Sim-
ilarly, an n-party sub-protocol is used to securely compute n-party
authenticated AND triples
b, {Mj[b]}j(cid:44)i , {Kj[b]}j(cid:44)i
where Pi holds
(cid:16)[a1]1 ⊕ · · · ⊕ [an]n(cid:17) ·(cid:16)[b1]1 ⊕ · · · ⊕ [bn]n(cid:17)
= [c1]1 ⊕ · · · ⊕ [cn]n
(cid:16)[ai]i ,[bi]i ,[ci]i(cid:17)
abit and F n
where the triple
denotes the i-th party’s authen-
ticated bit-shares of the AND triple. In the online stage, one of the
parties will execute as the circuit evaluator, collecting the shares
of the garbled table from the rest n − 1 parties and evaluating the
combined garbled circuit.
a hybrid model with ideal F n
to efficiently scale up F n
readers, we copied the definition of WRK’s F n
We first fix the presentation flaw of WRK’s Πmpc so it works in
aAND. Then we show how
aAND. For the convenience of the
aAND below.
abit and F n
dom Kk[xj], and computes(cid:8)Mk[xj] (cid:66) Kk[xj] ⊕ xj ∆k
(cid:9)
them to parties. That is, for each j ∈ [ℓ], it sends(cid:8)Mk[xj](cid:9)
Honest case: The box receives (input, i, ℓ) from all parties and picks
random bit-string x ∈ {0, 1}ℓ. For each j ∈ [ℓ], k (cid:44) i,the box picks ran-
k(cid:44)i , and sends
k(cid:44)i to Pi
and sends Kk[xj] to Pk for each k (cid:44) i.
Corrupted parties: A corrupted party can choose their output from the
protocol.
abit and F n
Fn
abit
Fn
aAND
Honest case: Generate uniform [r i
1]i, [r i
(cid:16)
(cid:17)
=
i r i
2
3 .
i r i
(cid:16)
i r i
1
(cid:17) ∧
2]i, [r i
3]i such that
Corrupted parties: A corrupted party can choose their output from the
protocol.
i xi
i xi
2
(cid:17)
=
3 thus
i ai =  bi. If the
i r i
6.1 Fixing WRK’s Πmpc
The multi-party authenticated garbling protocol Πmpc [45, Figure 2,
Figure 3] also needs two alignment operations per AND. Similarly,
we replace step (4a) of WRK’s Πmpc with the following:
(4) (a) All Pi(1 ≤ i ≤ n) jointly invoke FaAND so that Pi receives
3. Pi
α , and securely aligns
σ (cid:66) xi
σ =
securely aligns

2 with
3]i where
i r i
i xi
β . Finally, Pi sets r i
(cid:16)
1 with
(cid:17) ∧(cid:16)
[xi
1]i ,[xi
2]i ,[xi
i xi