译者：爱上平顶⼭  
来源：[慢雾区](https://t.zsxq.com/rv7EAIi "慢雾区")  
原文链接：
这是分布式应⽤安全项⽬（或DASP）2018 年排名前10的漏洞第⼀次迭代
该项⽬是[NCC集团](https://www.nccgroup.trust/uk/
"NCC集团")的⼀项举措。这是⼀个开放的合作项⽬，致⼒于发现安全社区内的智能合约漏洞。要参与，请[加⼊github⻚⾯](https://github.com/CryptoServices/dasp
"加⼊github⻚⾯")。
#### 1.重⼊漏洞
也被称为 或与空⽩竞争，递归调⽤漏洞，未知调⽤
> 这种漏洞在很多时候被很多不同的⼈忽略：审阅者倾向于⼀次⼀个地审查函数，并且假定保护⼦例程的调⽤将安全并按预期运⾏。 Phil Daian
重⼊攻击，可能是最着名的以太坊漏洞，第⼀次被发现时，每个⼈都感到惊讶。它在数百万美元的抢劫案中⾸次亮相，导致了以太坊的分叉。当初始执⾏完成之前，外部合同调⽤被允许对调⽤合同进⾏新的调⽤时，就会发⽣重新进⼊。对于函数来说，这意味着合同状态可能会在执⾏过程中因为调⽤不可信合同或使⽤具有外部地址的低级函数⽽发⽣变化。
损失：估计为350万ETH（当时约为5000万美元）
发现时间表：
2016年6⽉5⽇ [Christian
Reitwiessner发现了⼀个坚定的反模式](https://blog.ethereum.org/2016/06/10/smart-contract-security/ "Christian Reitwiessner发现了⼀个坚定的反模式")  
2016年6⽉9⽇ [更多以太坊攻击：Race-To-Empty是真正的交易（vessenes.com）](http://vessenes.com/more-ethereum-attacks-race-to-empty-is-the-real-deal/ "更多以太坊攻击：Race-To-Empty是真正的交易（vessenes.com）")  
2016年6⽉12⽇
[在以太坊智能合约'递归调⽤'错误发现（blog.slock.it）之后，没有DAO资⾦⾯临⻛险。](https://blog.slock.it/no-dao-funds-at-risk-following-the-ethereum-smart-contract-recursive-call-bug-discovery-29f482d348b "在以太坊智能合约'递归调⽤'错误发现（blog.slock.it）之后，没有DAO资⾦⾯临⻛险。")  
2016年6⽉17⽇
[我认为TheDAO现在正在流失（reddit.com）](https://www.reddit.com/r/ethereum/comments/4oi2ta/i_think_thedao_is_getting_drained_right_now/
"我认为TheDAO现在正在流失（reddit.com）")  
2016年8⽉24⽇ [DAO的历史和经验教训（blog.sock.it）](https://blog.slock.it/the-history-of-the-dao-and-lessons-learned-d06740f8cfa5 "DAO的历史和经验教训（blog.sock.it）")
真实世界影响：
  * [DAO](https://en.wikipedia.org/wiki/The_DAO_\(organization\) "DAO")
示例：
  1. ⼀个聪明的合同跟踪⼀些外部地址的平衡，并允许⽤户通过其公共资⾦检索`withdraw()`功能。
  2. ⼀个恶意的智能合同使⽤`withdraw()`函数检索其全部余额。
  3. 在更新恶意合同的余额之前，受害者合同执⾏`call.value(amount)()` 低级别函数将以太⽹发送给恶意合同。
  4. 该恶意合同有⼀个⽀付`fallback()`接受资⾦的功能，然后回调到受害者合同的`withdraw()`功能。
  5. 第⼆次执⾏会触发资⾦转移：请记住，恶意合同的余额尚未从⾸次提款中更新。结果， 恶意合同第⼆次成功退出了全部余额。
代码示例：
以下函数包含易受重⼊攻击影响的函数。当低级别`call()`函数向`msg.sender`地址发送ether时，它变得易受攻击;
如果地址是智能合约，则付款将触发其备⽤功能以及剩余的交易⽓体：
    function withdraw(uint _amount) {
    require(balances[msg.sender] >= _amount);
     msg.sender.call.value(_amount)();
     balances[msg.sender] -= _amount;
    }
其他资源：
  * [DAO智能合约](https://etherscan.io/address/0xbb9bc244d798123fde783fcc1c72d3bb8c189413#code "DAO智能合约")
  * [分析DAO的利⽤](http://hackingdistributed.com/2016/06/18/analysis-of-the-dao-exploit/ "分析DAO的利⽤")
  * [简单的DAO代码示例](http://blockchain.unica.it/projects/ethereum-survey/attacks.html#simpledao "简单的DAO代码示例")
  * [重⼊代码示例](https://github.com/trailofbits/not-so-smart-contracts/tree/master/reentrancy "重⼊代码示例")
  * [有⼈试图利⽤我们的智能合约中的⼀个缺陷，盗取它的⼀切](https://blog.citymayor.co/posts/how-someone-tried-to-exploit-a-flaw-in-our-smart-contract-and-steal-all-of-its-ether/ "有⼈试图利⽤我们的智能合约中的⼀个缺陷，盗取它的⼀切")
#### 2.访问控制
> 通过调⽤initWallet函数，可以将Parity Wallet库合约变为常规多sig钱包并成为它的所有者。 Parity
访问控制问题在所有程序中都很常⻅，⽽不仅仅是智能合同。事实上，这是[OWASP排名前10位](https://www.owasp.org/images/7/72/OWASP_Top_10-2017_%28en%29.pdf.pdf
"OWASP排名前10位")的[第5位](https://www.owasp.org/images/7/72/OWASP_Top_10-2017_%28en%29.pdf.pdf
"第5位")。⼈们通常通过其公共或外部功能访问合同的功能。尽管不安全的可视性设置会给攻击者直接访问合同的私有价值或逻辑的⽅式，但访问控制旁路有时更加微妙。这些漏洞可能发⽣在合约使⽤已弃⽤tx.origin的验证调⽤者时，⻓时间处理⼤型授权逻辑require并delegatecall在[代理库](https://blog.zeppelin.solutions/proxy-libraries-in-solidity-79fbe4b970fd
"代理库")或[代理合约中](https://blog.indorse.io/ethereum-upgradeable-smart-contract-strategies-456350d0557c "代理合约中")鲁莽使⽤。
损失：估计为150,000 ETH（当时约3000万美元）
真实世界影响：
  * [奇偶校验错误1](http://paritytech.io/the-multi-sig-hack-a-postmortem/ "奇偶校验错误1")
  * [奇偶校验错误2](http://paritytech.io/a-postmortem-on-the-parity-multi-sig-library-self-destruct/ "奇偶校验错误2")
  * [Rubixi](https://blog.ethereum.org/2016/06/19/thinking-smart-contract-security/ "Rubixi")
示例：
  1. ⼀个聪明的合同指定它初始化它作为合同的业主的地址。这是授予特殊特权的常⻅模式，例如提取合同资⾦的能⼒。
  2. 不幸的是，初始化函数可以被任何⼈调⽤，即使它已经被调⽤。允许任何⼈成为合同的拥有者并获得资⾦。
代码示例：
在下⾯的例⼦中，契约的初始化函数将函数的调⽤者设置为它的所有者。然⽽，逻辑与合约的构造函数分离，并且不记录它已经被调⽤的事实。
    function initContract() public {
     owner = msg.sender;
    }
在Parity multi-sig钱包中，这个初始化函数与钱包本身分离并在“库”合同中定义。⽤户需要通过调⽤库的函数来初始化⾃⼰的钱包delegateCall。不幸的是，在我们的例⼦中，函数没有检查钱包是否已经被初始化。更糟糕的是，由于图书馆是⼀个聪明的合同，任何⼈都可以⾃⾏初始化图书馆并要求销毁。
其他资源：
  * [修复Parity多信号钱包bug 1](https://github.com/paritytech/parity/pull/6103/files "修复Parity多信号钱包bug 1")
  * [奇偶校验安全警报2](http://paritytech.io/security-alert-2/ "奇偶校验安全警报2")
  * [在奇偶钱包multi-sig hack上](https://blog.zeppelin.solutions/on-the-parity-wallet-multisig-hack-405a8c12e8f7 "在奇偶钱包multi-sig hack上")
  * [不受保护的功能](https://github.com/trailofbits/not-so-smart-contracts/tree/master/unprotected_function "不受保护的功能")
  * [Rubixi的智能合约](https://etherscan.io/address/0xe82719202e5965Cf5D9B6673B7503a3b92DE20be#code "Rubixi的智能合约")
#### 3.算术问题
也被称为 整数溢出和整数下溢
> 溢出情况会导致不正确的结果，特别是如果可能性未被预期，可能会影响程序的可靠性和安全性。 Jules Dourlens
整数溢出和下溢不是⼀类新的漏洞，但它们在智能合约中尤其危险，其中⽆符号整数很普遍，⼤多数开发⼈员习惯于简单int类型（通常是有符号整数）。如果发⽣溢出，许多良性代码路径成为盗窃或拒绝服务的载体。
真实世界影响：
  * [DAO](http://blockchain.unica.it/projects/ethereum-survey/attacks.html "DAO")
  * [BatchOverflow（多个令牌）](https://peckshield.com/2018/04/22/batchOverflow/ "BatchOverflow（多个令牌）")
  * [ProxyOverflow（多个令牌）](https://peckshield.com/2018/04/25/proxyOverflow/ "ProxyOverflow（多个令牌）")
示例：
  1. ⼀个聪明的合同的`withdraw()`功能，您可以为您的余额仍是⼿术后积极检索，只要捐赠合同醚。
  2. ⼀个攻击者试图收回⽐他或她的当前余额多。
  3. 该`withdraw()`功能检查的结果总是正数，允许攻击者退出超过允许。由此产⽣的余额下降，并成为⽐它应该更⼤的数量级。
代码示例：
最直接的例⼦是⼀个不检查整数下溢的函数，允许您撤销⽆限量的标记：
    function withdraw(uint _amount) {
    require(balances[msg.sender] - _amount > 0);
     msg.sender.transfer(_amount);
     balances[msg.sender] -= _amount;
    }