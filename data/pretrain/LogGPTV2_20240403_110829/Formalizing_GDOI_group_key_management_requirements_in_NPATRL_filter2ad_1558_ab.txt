The NRL Protocol Analyzer Temporal Requirements Lan-
guage, better known as NPATRL (and pronounced “N Pa-
trol”), was designed to address these shortcomings [16]. This
formalism makes available the abstract expressiveness of a
logical language to specify requirements at a high enough
level to capture intuitive goals precisely, and yet it can be
interpreted in the NPA search engine.
NPATRL requirements are logical expressions whose ato-
mic formulas are event statements, which mostly correspond
to events in the NRL Protocol Analyzer; they include events
denoting actions by honest principals that can be found in
the trace of an NPA search, and the special learn event that
indicates the acquisition of information by the adversary.
NPATRL’s syntax for events is similar but not identical to
the NPA’s. In NPATRL, the NPA accept event given above
is written:
initiator accept key(user(A, honest), user(B, H), K, N )
The logical infrastructure of NPATRL consists of the usual
connectives ¬, ∧, →, etc, and the temporal modality ✸
which is interpreted as “happened at some time before” or
“previously”.
For example, we may have the following requirement:
If an honest principal A accepts a key K for com-
municating with another honest principal B, then a
server must have previously generated and sent this
key with the idea that it should be used for communi-
cations between A and B, and that both are expected
to be honest.
We can use NRL Protocol Analyzer events to construct an
NPATRL formula that expresses it:
initiator accept key(user(A, honest), user(B, H), K, N )
→ ✸ svr send key(server, (user(A, honest), user(B, honest)), K, N )
This formula is a simple expression of the above requirement.
Intuitively, the protocol veriﬁcation process changes from
what we discussed in the previous section by using NPATRL
requirements where the ﬁnal state appeared. More precisely,
we ﬁrst need to map every NPATRL event statement to an
actual event in the NPA speciﬁcation of the protocol. Then,
we take the negation of each NPATRL requirement as a
way to characterize the states that should be unreachable
if and only if that requirement is satisﬁed. At this point,
we perform the analysis as in the previous section:
if the
NPA proves that this goal is unreachable, the protocol sat-
isﬁes the original requirement. Otherwise, it returns a trace
237corresponding to an attack on the protocol that potentially
invalidates the requirement.
A couple of particular points about NPATRL expressions:
Events occur exactly once. This means that atomic formu-
las are true at exactly one point in a trace (if at all). There
is nothing in NPATRL syntax to automatically guarantee
this uniqueness; it is assumed that event statements con-
tain enough individuating information in their arguments
or predicate to enforce this. Note that NPA guarantees this
uniqueness, in part by having all events indexed both by lo-
cal runs and timestamps. Second, “✸” is a strict operator;
it includes times prior to the present time but does not in-
clude the present time. It is also convenient, especially when
stating axioms, to have the dual operator in our language,
“✷”, read as “at all previous times” or “always previously”.
It can be deﬁned logically by, ✷ϕ ↔ ¬✸¬ϕ, where ϕ is an
formula.
NPATRL has been extensively used in the last few years
to analyze protocols with various characteristics. Among
these, generic requirements have been given for two-party
key distribution protocols [14, 15] and two-party key agree-
ment protocols [16]. The most ambitious speciﬁcation un-
dertaken using NPATRL has involved the requirements of
the credit card payment transaction protocol SET (Secure
Electronic Transactions) [9]. SET proved particularly dif-
ﬁcult to specify for several reasons. One of these was that
the objects to be authenticated are dynamic: unlike keys,
what is agreed upon changes as it passes from one principal
to another. This exercise revealed several ambiguities [9].
Our current task, formalizing group key management re-
quirements, has its own dynamics. Even when the data
objects (keys) are constant, the principals sharing them are
not. And the very notion of a session is much less well
deﬁned than in previously studied cases. Perhaps most sig-
niﬁcantly, until this point we had been able to use NPATRL
as just a language. All statements were interpreted into the
NPA and evaluated there. However, we have found it neces-
sary to reason at the level of NPATRL itself. This requires
a logic for our logical language.
3.3 NPATRL Axioms
We give axioms of a normal modal logic adequate to cap-
ture the needed temporal reasoning. Readers are referred to
standard texts for details on systems of modal and temporal
logic [3, 6, 8].
Our logic has two inference rules:
Modus Ponens: From ϕ and ϕ → ψ infer ψ.
Necessitation: From (cid:7) ϕ infer (cid:7) ✷ϕ.
‘(cid:7)’ is a metalingusitic symbol. ‘Γ (cid:7) ϕ’ means that ϕ is deriv-
able from the set of formulae Γ (and the axioms as stated
‘(cid:7) ϕ’ means that ϕ is a theorem, i.e., derivable
below).
from axioms alone. Axioms are all instances of tautologies
of classical propositional logic, and all instances of the fol-
lowing axiom schemata
K ✷(ϕ → ψ) → (✷ϕ → ✷ψ)
4 ✷ϕ → ✷✷ϕ
W ✷(✷ϕ → ϕ) → ✷ϕ
L ✷((ϕ ∧ ✷ϕ) → ψ) ∨ ✷((ψ ∧ ✷ψ) → ϕ)
The ﬁrst axiom guarantees that our temporal operators re-
spect the non-temporal part of the logic. The second one
guarantees that temporal reasoning is transitive. The third
guarantees that sets of events are always ﬁnite and strictly-
ordered. The last guarantees that events are weakly-connec-
ted (comparable). Note that in the presence of K and W,
the 4 axiom becomes redundant. We have explicitly in-
cluded it because we speciﬁcally use transitivity in our ar-
guments in appendix A. There is some discussion of logics
In [8], axiom L is
containing these axioms in [6] and [8].
called “Lem0” after Lemmon. Space limitations preclude a
more detailed presentation here.
3.4 NPA Acceptable Expressions
Although NPATRL was originally designed to be used
with the NRL Protocol Analyzer, it is actually much more
expressive than the set of speciﬁcations accepted by the tool.
Thus, in order to make NPATRL usable with NPA, it is nec-
essary to identify a subset of NPATRL requirements that are
acceptable by NPA, and to put them into a normal form that
is parsable by NPA.
An NRL Protocol Analyzer query can be speciﬁed in terms
of three things: terms known by the intruder, values of local
state variables, and sequences of events that did or did not
occur. The part of the query concerning sequences of events
corresponds most closely to the NPATRL events. However,
these events only correspond to user actions, and do not in-
clude learn events, which correspond to intruder actions. In
order to capture intruder learn events, we will need to make
use of the part of the query that speciﬁes terms known by
the intruder. This can cause some diﬃculties, since an NPA
query does not specify when the terms were learned by the
intruder. However, we can simplify matters by limiting our-
selves to queries which specify the learning of only one term.
This is usually adequate, and when it is not, we can usually
transform the NPATRL requirement using our logic so that
the restriction is satisﬁed.
Given that, we specify a normal form R for NPA accept-
able expressions in a BNF grammar as follows. We let w
stand for any learn event, a stand for any atomic event that
is not a learn event, and let b stand for any atomic event.
E ::= ✸a
F ::= E
G ::= ¬E
R ::= ¬b
✸(a ∧ E)
E ∨ F
¬E ∧ G
a → G b → F a → G ∨ F a → G ∧ F
E ∧ F
✸w → G ✸w → G ∨ F ✸w → G ∧ F
4. REQUIREMENTS FOR GDOI
4.1 Assumptions
We assume that each group is managed by one GCKS (it
is possible to have more, but the means for doing this are
not speciﬁed in the GDOI document). We assume that a
GCKS may manage more than one group, and that a mem-
ber may belong to more than one group. We assume that
members may both join and leave a group, and a member
may have concurrent and/or overlapping memberships in
the same group.
We assume the usual Dolev-Yao style intruder, who can
read, alter, destroy, and create traﬃc, and is in league with
any dishonest principals, who share all data with it. We
assume that all GCKSs are honest, but that some members
may be dishonest. Note that as a result of this assumption
we make no distinction between the intruder’s learning a
238key and a principal learning a key to which it is not entitled.
Only dishonest principals will attempt to gain access to keys
to which they are not entitled, and dishonest principals are
assumed to share all information with the intruder.
We assume that there are two ways in which a key can be
compromised that cannot be prevented by the protocol. One
is by stealing: the intruder may learn the key by cryptanal-
ysis, theft, etc. even if all possessors of the key are honest.
The other is by having a dishonest member join the group.
Finally, in order to simplify matters, we only deﬁne events
and requirements for key encryption keys, not traﬃc encryp-
tion keys. Since traﬃc encryption keys are protected by key
encryption keys and distributed via the same mechanisms, it
should be relatively straightforward to derive their require-
ments from the requirements for key encryption keys.
4.2 GDOI Events
In general, events map to actual messages and vice versa.
However, since the central messages of the groupkey-pull
exchange simply defer computation in order to resist forms
of denial-of-service attacks [12] and the NPA does not cur-
rently support reasoning about denial-of-service, we behave
as if their information load were compounded with the outer
messages of this exchange.
We divide the possible GDOI events according to the prin-
cipals that engage in them. There are four types of princi-
pals: the intruder, the GCKS, the group member, and an au-
thorization server responsible for issuing credentials. Since
a group member may be honest or dishonest, we represent
a general group member as member(M, H), an honest mem-
ber as member(M, honest), and a dishonest group member
as member(M, dishonest).
4.2.1
Intruder Events
There is only one intruder event of interest to us here:
the event in which the intruder P learns a word W . We
represent that as follows:
learn(P, (), W, N )
4.2.2 Authorization Server Event
The authorization server is responsible only for issuing
credentials to principals. In order to simplify matters, we
assume that each group has its own set of credentials appro-
priate to it.
This action is represented by
auth issuecreds(AU T H, X, (C, G), N )
where X is the principal to whom the credentials are issued,
C stands for the credentials, and G is the group to which
the credentials apply.
4.2.3 The GCKS
The GCKS performs a number of actions of interest. It
can create a key encryption key.
It can admit and expel
members. It can also cause a key to become current, and
cause a key to expire. It can send a key, either in response
to a member’s request, or as part of a group-key push data-
gram. We represent these as follows:
Creating a key:
gcks createkey(GCKS , (), (G, KG), N )
Sending a key as a result of a pull exchange:
gcks sendpullkey(GCKS , M, (KG, NM , NGM , G, KGM ), N )
where M is the member, KG is the key, G is the group, KGM
is the pairwise key, NM is the nonce M uses in initiating
the exchange and NGM is the nonce G uses in responding.
We also use the gcks sendpullkey event to cover the GCKS’s
admitting M to the group, since M requests membership
by initiating a pull protocol. We use NGM to identify M ’s
particular membership in the group. Note that this may
not be the identiﬁer used in a real application (as a mat-
ter of fact, GDOI does not specify any kind of membership
identiﬁer); however it is useful from a requirements point of
view in that it allows us to distinguish between diﬀerent and
possibly overlapping memberships on the part of the same
individual.
Sending a key in a push message:
gcks sendpushkey(GCKS , (), (G, KG, K(cid:2)
G), N )
The event gcks sendpushkey causes one key, K(cid:2)
G, to expire
for group G and causes the next one KG to become current.
The initial key created for a group is ﬁrst sent in a pull-
key message. Except for such initial keys, we assume for
convenience that a push-key message making KG current is
sent immediately after the create event that produced KG
(without the possibility of an intervening distribution in a
pull-key message). We also assume that the initial key is
sent in at least one pull-key response that takes place im-
mediately after its creation. We say the initial key becomes
current when that ﬁrst pull-key response containing it is
sent.
We note that neither gcks sendpullkey nor gcks sendpushkey
tell the whole story about the keying material passed in
these two messages.
In actual fact, the pull-key message
will contain, not only the current key, but also the relevant
part of the key hierarchy that the member M needs to ac-
cess the key. Likewise the gcks sendpushkey message will
also contain the portion of the key hierarchy that needs to
be changed to give members access to the new key and pre-
vent former members from accessing the new key, if this is
desired.
Canceling a membership:
gcks cancel(GCKS , M, (G, NGM ), N )
where M is the member, G is the group, and NGM identi-
ﬁes the membership. Note that expulsion cancels only the
membership with identiﬁer NGM , not all memberships of
that member. In order to truly expel the member, all its
memberships would have to be canceled.
We note that gcks cancel would be achieved in GDOI by
having the GCKS send out a push message containing a new
key hierarchy from which M is excluded. We choose to spec-
ify gcks cancel separately from gcks sendpushkey since this
allows us to avoid issues such as canceling multiple mem-
berships in one message, etc.
Sending a POP:
gcks sendpop(GCKS , M, (G, NGM , NM , CG), N )
where G is the group for which GCKS is creating the key
encryption key, KG.
This event describes a GCKS sending a POP in response to
a members request. CG stands for G’s credentials.
239Stealing a Key:
Finally, we need to specify the stealing of a key. We think of
this not as something done by the intruder, but as something
done by the GCKS. In other words, the action of stealing
a key needs to be precipitated by the GCKS “losing” a key.
This appears paradoxical, but it is a result of our model’s
assumption that actions involving a piece of data can only
be initiated by those in possession of it. Note that we could
also include actions describing members losing keys, but that
this would be redundant.
We have two event statements, one describing the loss of a
key-encryption key, and one describing the loss of a pairwise
key:
gcks losegroupkey(GCKS , (), (G, KG), N )
where G is the group and KG is the key.
gcks losepairwisekey(GCKS , (), (GCKS , M, KGM ), N )
where KGM is the pairwise key and M is the member who
shares the key with the GCKS.
4.2.4 Member Actions
The relevant member actions involve accepting a key and
requesting a key. A member can only request a key by ini-
tiating a group-key pull exchange, but it may accept a key