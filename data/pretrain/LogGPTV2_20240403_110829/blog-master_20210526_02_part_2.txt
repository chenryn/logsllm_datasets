- 游戏、SaaS行业.  serverless 场景: 在一个企业内部, 业务线非常多,
- 在同一个实例中有多个业务共同使用时,
- 分析师、DBA或者运营人员有偶尔使用数据库的需求.
挑战:
- 为每个业务分配一个数据库实例存在的问题: 资源浪费(每个实例在内存、空间方面的浪费)、弹性较差(创建资源慢、扩容缩容慢).
- 多个业务共享一个实例存在的问题: 资源争抢、干扰、抖动、安全风险增加,
- DBA或分析师人为的大查询可能将资源耗光, 影响在线业务
PG 方案:
- 按来源IP、USER、DBNAME、application_name等信息来区分用户和业务
- 结合cgroup隔离业务的cpu、io、网络等资源使用率, 防止干扰
视频回放: https://www.bilibili.com/video/BV1SQ4y1X7oC/  
#### 13、重新发现PostgreSQL之美 - 13 brin 时序索引
场景:
- 物联网、游戏、金融、证券、车联网等场景, appendonly的高并发数据写入, 需要高效的按时间区间进行数据统计分析.
挑战:
- 写入量大, 传统btree索引对写入的RT影响大, 导致性能下降严重.
- 普通btree索引存储空间占用较大.
- 普通btree索引采用链表存储, 逻辑上有序, 而物理离散, 加上IO有prefetch, 使得按btree的索引范围查询将占用大量IO通道. 范围查询效率差.
PG解决方案:
- PG采用堆表存储, 使用时序索引, 每连续的N个数据块存储min,max val.  时序索引只有btree的几百分之一大小. 并且支持快速的范围查询.
- 其他数据库产品采用聚集存储无法实现时序索引, 因为聚集存储本身必须按PK组织, 在数据块层面已经没有时序顺序了.
视频回放:  https://www.bilibili.com/video/BV1B64y1k72g/  
#### 14、重新发现PostgreSQL之美 - 14 bloom 布隆过滤器索引
场景:      
分析业务, 任意字段、任意维度组合, 组合等值查询.    
where a=? and b=? or c=? . 其他组合 ab ac ad bc bd bcd bdef def ... 每个字母代表一个字段.  
在电商、金融等拖拽式实时分析场景中尤为常见.   
挑战:   
由于查询维度非常多, 完全不可控, 如果每个维度都预计算, 会导致结果数据量指数级增加.   
如果为每个查询维度都创建一个索引, 那么会有N!+1个索引. 例如5个字段的任意组合有121种, 需要建121个索引, 完全不现实.   
PG 解决方案:  
使用bloom布隆过滤索引. 每个value被hash计算后映射到若干个bit位, 这些bit位被设置为1表示包含这个value.   
一个索引即可满足任意维度的组合等值搜索.      
视频回放:  https://www.bilibili.com/video/BV1c64y1C7HK/        
#### 15、重新发现PostgreSQL之美 - 15 沙盘推演, 权力的游戏
有数据说数据, 没数据说案例, 没案例说逻辑, 没逻辑谈理想. 已经成为数字时代的职场生存法则.
- 要陈述一个观点或结论, 没有数据支撑说话没分量, 说明你没经过仔细分析, 没过脑子.
- 实在拿不到数据, 你总得拿点案例出来, 否则就是在空谈, 没有支点.
- 没案例, 总得有底层逻辑吧, 逻辑能自洽, 也是说得通的.
- 如果连逻辑都没有想过, 那你只能用故事、理想或者理念来感染人, 如果你能忽悠(感染)成功, 并且最后确实也成功了, 也许能表达为因为相信所以看见.
场景:
- 项目上线前, 申请资源, 如何评估需要多少资源?
- 做IT部门的全年预算?
- 如何做到精准, 有理有据有节?
挑战:
- 项目往往只有业务指标(应该叫目标, 和IT预算精算还差了十万八千里), 靠经验或拍脑袋来确定IT预算, 上线后发现资源不足或严重超过预期, 造成铺张浪费.
- 难以模拟和快速产生真实的业务数据.
- 难以模拟真实的业务交互行为.
- 难以捕捉和分析性能问题的原因.
PG解决方案:
- pgbench, 支持沙盘推演, 避免纸上谈兵、假大空.
    - 一个可以近乎真实的模拟业务上线后的压力的内置benchmark program.
    - 内置多种数据生成算法, 多种模拟业务和数据库交互的command,
    - 同时支持根据业务定制化压测程序, 模拟真实的业务交互行为.
- awr, pg_stat_statements, 捕获和分析业务瓶颈
    - ##### 202104/20210415_01.md   [《PostgreSQL pg_stat_statements AWR 插件 pg_stat_monitor , 过去任何时间段性能分析 [推荐、收藏]》](../202104/20210415_01.md)
    - ##### 202003/20200324_25.md   [《PostgreSQL 活跃会话历史记录插件 - pgsentinel 类似performance insight \ Oracle ASH Active Session History》](../202003/20200324_25.md)
    - ##### 201901/20190125_02.md   [《PostgreSQL Oracle 兼容性之 - performance insight - AWS performance insight 理念与实现解读 - 珍藏级》](../201901/20190125_02.md)
    - https://www.postgresql.org/docs/devel/pgstatstatements.html
- 快速构建海量测试数据
    - ##### 202001/20200103_01.md   [《PostgreSQL+MySQL 联合解决方案 - 第3课视频 - 如何压测PG数据库、如何瞬间构造海量测试数据》](../202001/20200103_01.md)
    - ##### 201711/20171121_01.md   [《PostgreSQL 如何快速构建 海量 逼真 测试数据》](../201711/20171121_01.md)
视频回放: https://www.bilibili.com/video/BV1Zq4y1j7xs/  
#### 16、重新发现PostgreSQL之美 - 16 like '%西出函谷关%' 模糊查询  
场景:
1、电商
商品、店铺、描述等. 搜索框 模糊查询
2、企业ERP、社交APP、网站
内容搜索框, 模糊查询
挑战:
传统数据库不支持模糊查询, 需要全表扫描, 性能极差, 少量并发查询极可能导致雪崩.
通常的解决方案需要将数据同步到搜索引擎, 这种解决方案的弊端:
- 研发、软硬件成本增加、
- 系统问题增多(同步延迟问题、同步异常问题、同步一致性问题)、
- 开发灵活性下降(无法同时过滤模糊查询条件与表的其他条件, 需要业务层交换数据)
- 不支持同时过滤like与其他条件
PG 解决方案:
- 倒排索引GIN + btree_gin: 支持模糊查询+任意字段组合过滤.
视频回放: https://www.bilibili.com/video/BV1144y1z7MM/   
#### 17、重新发现PostgreSQL之美 - 17 物以类聚 人以群分  
场景:  
- 数据分类, 直面精准运营, 产生价值.   
挑战:  
- 传统数据库只有1种分类方法,width_bucket,而且bucket必须均分,而数据多数遵循28法则,我们需要的是抓大放小,所以均匀的bucket不能对数据很好的诠释和透视.  
- 传统数据库只能对1个维度进行分类,无法支持多个维度的分类需求.   
- 高级分析必须将数据拉到程序端计算, 拉取数据效率极低, 增加了运行时间.   
PG解决方案:  
- width_bucket支持自定义bucket窗口大小,支持抓大放小.  
- 通过kmeans分类方法, 可以支持多维度的数据分类, 满足业务的分类需求(例如从喜好、消费情况、活跃时间区间、性别、地域等等多种维度精准定位目标群体)  
- 通过madlib扩展库, 能在数据库中整合更加高级的机器学习能力, 同时支持plpython扩展机器学习算法, 支持业务可定制的算法诉求.  
- 在数据库中分类比在业务中分类效率更高, 因为不需要move data, 同时PG支持greenplum这样的MPP形态, 完全不需要担心算力和存储问题.   
- https://developer.aliyun.com/article/128017  
- http://madlib.apache.org/product.html  
- https://github.com/digoal/blog/blob/master/201508/20150817_01.md  
视频回放: https://www.bilibili.com/video/BV1uq4y1L7u6/  
#### 18、重新发现PostgreSQL之美 - 18 火眼金睛  
场景:  
电商、社交、姻缘、算命、媒体、论文、打击创新和盗版、精准营销  
快速找出 相似、不相似  
挑战:  
只能全表扫描, 性能极差. 只能堆机器, 而且无法满足实时的需求.   
PG 解决方案:  
通过数组支持特征字典, 倒排索引增强, BLOCK位图合并, 快速收敛到少量block, 亿级画像毫秒响应.   
https://github.com/jirutka/smlar  
https://github.com/digoal/blog/blob/master/201708/20170804_01.md  
https://github.com/digoal/blog/blob/master/201701/20170116_03.md  
https://github.com/digoal/blog/blob/master/201701/20170116_04.md  
https://github.com/digoal/blog/blob/master/201711/20171107_18.md  
视频回放: https://www.bilibili.com/video/BV1Kf4y187xC/  
#### 19、重新发现PostgreSQL之美 - 19 困扰古惑仔和海盗的数学问题     
场景:     
纵观增长黑客、等营销类书籍. 目前互联网行业存在一种随处可见的商业模式, 例如:        
- 游戏工会, 给工会成员提供好的交流、交易平台, 同时工会通过发展会员数来提高工会本身的竞争力, 为了刺激已有会员去拉新的会员, 工会与成员, 成员与成员之间存在网状关系, 拉来会员可以得到奖励.       
- 直播行业工会。工会为主播提供好的流量平台, 主播运营等服务. 大工会挂小工会等多层结构, 流量平台与大工会、大工会与小工会、小工会与主播, 主播与主播之间存在网状关系.       
- 共享出行, 代理商, 加盟商层层关系.       
- 零售行业, 小型超市, 餐饮行业, 加盟、代理。      
- 化妆品行业。      
- 保险行业。      
- 在线教育行业。     
挑战:     
明细多, 数据量大慢的要命, 一个晚上都跑不出分佣数据, 更无法支持实时分佣      
PG解决方案:     
1、递归    
2、ltree     
例子:     
[《森林状图式数据(树状) 的 高效生成方法》](../202106/20210610_01.md)      
[《PostgreSQL 递归应用实践 - 非“传销”的高并发实时藤、树状佣金分配体系》](../201808/20180808_02.md)      
https://www.postgresql.org/docs/14/ltree.html    
视频回放:   https://www.bilibili.com/video/BV1ff4y1b73U/  
#### 20、重新发现PostgreSQL之美 - 20 为什么啤酒&纸尿裤最搭  
场景:        
- 电商、零售等行业, 根据用户购物车、订单等数据找到最合理的搭配组合. 用于引导营销策略.       
    - 或者以用户最近N笔或N天的订单内的所有商品作为一个大的group      
- 根据用户评论涉及的关键词, 找到最佳搭配关键词. 用于引导品牌策略.         
挑战:        
- 每一个组合都是一组商品、标签或关键词. 相当于需要从现有的海量组合中找到高频组合(最搭组合).         
- 传统数据库不支持多值列(数组), 展开成多条记录数据量至少上升1个量级, 而且需要Join聚合才能得到最佳组合, 效率极差.        
- 在划窗分析需求中, 需要大量历史数据的基础进行计算, 性能差     
PG解决方案:        
- 1、内置数组, 数据量节省至少1个量级.         
- 2、内置数组倒排索引, 快速定位想要得到的搭配组合.         
- 3、内置数组的元素级别统计信息, 可以利用统计信息快速定位到最佳组合.         
- 4、datasketches 近似解, 支持海量数据毫秒级别实时输出搭配组合.         
- 5、使用topn的方法, 可以每天为每个商品存储1条记录, 这样就能实行实时滑窗分析, 也是传统数据库无法高效实现的.      
视频回放: https://www.bilibili.com/video/BV13B4y1M7K4/    