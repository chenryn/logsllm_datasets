### References

1. T. H. Dang, P. Maniatis, and D. Wagner, "The performance cost of shadow stacks and stack canaries," in *Proceedings of the 10th ACM Symposium on Information, Computer and Communications Security*, pp. 555–566, 2015.
2. "Add Test to Verify NX is Enabled." https://android-review.googlesource.com/c/platform/cts/+/21776. Accessed December 22, 2020.
3. "Tcpdump Public CVE List." https://www.tcpdump.org/public-cve-list.txt. Accessed December 22, 2020.
4. "Tcpdump Common Vulnerabilities." https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=tcpdump. Accessed December 22, 2020.
5. H. Meng, V. Thing, Y. Cheng, Z. Dai, and L. Zhang, "A survey of Android exploits in the wild," *Computers & Security*, vol. 76, pp. 71–91, July 2018.
6. "Android Vulnerabilities: vold asec." https://androidvulnerabilities.org/vulnerabilities/vold-asec. Accessed December 22, 2020.
7. "Root 4.4.X - Pie for Motorola devices." https://forum.xda-developers.com/moto-x/orig-development/root-4-4-x-pie-motorola-devices-t2771623. Accessed December 22, 2020.
8. "OATmeal on the Universal Cereal Bus: Exploiting Android phones over USB." https://googleprojectzero.blogspot.com/2018/09/oatmeal-on-universal-cereal-bus.html. Accessed December 22, 2020.
9. "Android 6.0 Changes - Access to Hardware Identifier." https://developer.android.com/about/versions/marshmallow/android-6.0-changes#behavior-hardware-id. Accessed December 22, 2020.
10. "BScout: Direct Whole Patch Presence Test for Java Executables," in *29th USENIX Security Symposium (USENIX Security 20)*, Boston, MA, USENIX Association, August 2020.
11. D. Thomas, A. Beresford, and A. Rice, "Security metrics for the Android ecosystem," pp. 87–98, October 2015.
12. D. Tian, G. Hernandez, J. Choi, V. Frost, C. Ruales, K. Butler, P. Traynor, H. Vijayakumar, L. Harrison, A. Rahmati, and M. Grace, "ATtention Spanned: Comprehensive Vulnerability Analysis of AT Commands Within the Android Ecosystem," in *27th USENIX Security Symposium (USENIX Security 18)*, Baltimore, MD, pp. 351–366, USENIX Association, 2018.
13. L. Wu, M. Grace, Y. Zhou, C. Wu, and X. Jiang, "The impact of vendor customizations on Android security," pp. 623–634, November 2013.
14. J. Gamba, M. Rashed, A. Razaghpanah, J. Tapiador, and N. Vallina-Rodriguez, "An analysis of pre-installed Android software," in *2020 IEEE Symposium on Security and Privacy (SP)*, pp. 1039–1055, 2020.
15. E. Reshetova, F. Bonazzi, and N. Asokan, "Selint: An SEAndroid policy analysis tool," pp. 47–58, January 2017.
16. E. Reshetova, F. Bonazzi, T. Nyman, R. Borgaonkar, and N. Asokan, "Characterizing SEAndroid policies in the wild," pp. 482–489, January 2016.
17. R. Wang, W. Enck, D. Reeves, X. Zhang, P. Ning, D. Xu, W. Zhou, and A. M. Azab, "EaseAndroid: Automatic policy analysis and refinement for security-enhanced Android via large-scale semi-supervised learning," in *24th USENIX Security Symposium (USENIX Security 15)*, Washington, D.C., pp. 351–366, USENIX Association, August 2015.
18. B. Im, A. Chen, and D. S. Wallach, "An historical analysis of the SEAndroid policy evolution," *Proceedings of the 34th Annual Computer Security Applications Conference*, 2018.
19. D. J. T. Grant Hernandez, A. S. Yadav, B. J. Williams, and K. R. Butler, "Bigmac: Fine-grained policy analysis of Android firmware," in *29th USENIX Security Symposium (USENIX Security 20)*, 2020.

### Acknowledgements

We would like to thank the anonymous reviewers for their constructive feedback. We also extend our gratitude to Slasti Mormanti and Betty Sebright for their support and insights. This work was partially supported by the European Research Council (ERC) under the European Union's Horizon 2020 research and innovation programme (grant agreement No 771844 BitCrumbs).

### Appendix A: Compile-time Hardening

This section provides a detailed description of the mitigation techniques considered in Section VI-B. For each technique, we provide a brief explanation and the artifacts used to detect its implementation in an ELF file. A summary is provided in Table V.

**I. Stack Canaries**
Stack canaries, introduced in Android 1.5, place a random integer (canary) in memory just before the stack return pointer. To overwrite the return pointer, stack-based buffer overflow attacks must also overwrite the canary value. The function `__stack_chk_fail` (or `__intel_security_cookie` in an alternative implementation) checks the canary's integrity before a function returns. If the canary appears to be modified, the program exits immediately. We checked for the presence of these functions among the binary’s symbols. Stack canaries can protect buffers of any size, with the "strong" configuration protecting even one-byte buffers. We assumed that real-world binaries have at least one buffer that can be protected by this mechanism.

**II. No eXecute (NX)**
NX marks certain areas of the program as non-executable. It can be implemented via software or hardware. In our analysis, we checked if the `GNU_STACK` segment of the binaries, which indicates whether the stack should be executable, is set to non-executable (RW-).

**III. Position Independent Executables (PIE)**
PIE allows the code to be placed into random memory locations, executing properly regardless of its absolute address. PIE works with Address Space Layout Randomization (ASLR), which randomizes the address space positions of key data areas. Full ASLR support was introduced in Android 4.1 (SDK 16), and non-PIE executable support was dropped in Android 5 (SDK 21). A PIE ELF file is of type `ET_DYN`, and its `.dynamic` section contains the `DT_DEBUG` tag.

**IV. Full Relocation Read-Only (RELRO)**
A dynamically linked ELF binary uses a Global Offset Table (GOT) for lazy binding. Full RELRO ensures that the GOT is made read-only after relocation, preventing attackers from overwriting GOT entries. If an ELF implements Full RELRO, it has the `GNU_RELRO` segment and its `.dynamic` section contains the `DT_BIND_NOW` tag.

**V. FORTIFY_SOURCE**
FORTIFY_SOURCE is a macro available in GCC and Clang that provides lightweight checks for detecting buffer overflows in dangerous functions. It replaces these functions with their secure `_chk` counterparts, adding a new argument for the buffer size. If an overflow is detected, the program stops execution. We checked if the libc supports FORTIFY_SOURCE and if the binary imports any `_chk` functions.

**VI. setuid/setgid**
These are special file permissions that allow users to run specific executables with temporarily elevated privileges to perform specific tasks.

### Appendix B: Kernel Configuration Mappings

Table VI lists the kernel configurations defined in the CDD and their corresponding kernel symbols. Some configurations map to the same symbol, while others change depending on the kernel version. For three configurations, no symbol mapping was found.

### Table V: Mitigation Techniques

| SDK Version | 3   | 9   | 16  | 17  | 18  |
|-------------|-----|-----|-----|-----|-----|
| 1.5         |     |     |     |     |     |
| 2.3         |     |     |     |     |     |
| 4.1         |     |     |     |     |     |
| 4.2         |     |     |     |     |     |
| 4.3         |     |     |     |     |     |
| Enhancement | Stack Canaries | No eXecute (NX) | Position Independent Executables (PIE) | Full Read-only Relocations (RELRO) | FORTIFY SOURCE | No setuid/setgid programs |
| Artifact    | `__stack_chk_fail` or `__intel_security_cookie` | `GNU_STACK` segment RW- | ELF type `ET_DYN` and `.dynamic` section with `DT_DEBUG` tag | `GNU_RELRO` segment and `.dynamic` section with `DT_BIND_NOW` tag | `*_chk` function symbols and `*_chk` exported function in libc | setuid/setguid bit in file’s permission |

### Table VI: Kernel Configuration to ELF Symbols Mapping

| Kernel Configuration                  | Kernel Symbol                                                                                      |
|----------------------------------------|----------------------------------------------------------------------------------------------------|
| CONFIG_SECURITY_SELINUX               | Symbol contains `selinux`                                                                          |
| CONFIG_SECCOMP                        | Symbol contains `seccomp`                                                                          |
| CONFIG_CC_STACKPROTECTOR_REGULAR      | `__stack_chk_fail`                                                                                 |
| CONFIG_CC_STACKPROTECTOR_STRONG       | `__stack_chk_guard`                                                                                |
| CONFIG_DEBUG_RODATA                   | `rodata_enabled`, `set_debug_rodata`, `__setup_set_debug_rodata`                                    |
| CONFIG_STRICT_KERNEL_RWX              | `mark_readonly`                                                                                    |
| CONFIG_HARDENED_USERCOPY              | `__check_heap_object`, `__check_object_size`                                                       |
| CONFIG_ARM64_SW_TTBR0_PAN             | `reserved_ttbr0`                                                                                   |
| CONFIG_RANDOMIZE_BASE                 | Symbol contains `kaslr`                                                                            |
| CONFIG_PAGE_TABLE_ISOLATION           | `tlb_flush_mmu_tlbonly`                                                                            |
| CONFIG_UNMAP_KERNEL_AT_EL0            | `__initcall_map_entry_trampoline1`                                                                 |
| CONFIG_HARDEN_BRANCH_PREDICTOR        | `__nospectre_v2`                                                                                   |
| CONFIG_SHADOW_CALL_STACK              | `init_shadow_call_stack`                                                                           |
| CONFIG_SECURITY_DMESG_RESTRICT        | `dmesg_restrict`                                                                                   |
| CONFIG_SECURITY_KPTR_RESTRICT         | `kptr_restrict`                                                                                    |
| CONFIG_ARM64_PAN                      | `cpu_enable_pan`                                                                                   |
| CONFIG_CFI_CLANG                      | Symbol contains `__cfi_*`                                                                          |
| CONFIG_DEFAULT_MMAP_MIN_ADDR          | No symbol mapping found, variable                                                                  |
| CONFIG_CPU_SW_DOMAIN_PAN              | No symbol mapping, inline assembly                                                                 |
| CONFIG_LTO_CLANG                      | No symbol mapping found                                                                            |

---

This revised text is more organized, clear, and professional, with improved formatting and coherence.