ing its source code, compiling conﬁguration, binary code
and records of building process; the builder delivers the cus-
tom software to the challenger with its certiﬁcation; at run-
time, the challenger wants to attest the property of this
customized program; the challenger and attester will carry
out the attestation procedure for this free software with the
help of the trusted veriﬁer.
Attester
The attester is the end user of a customized program P ,
which is executed on the attester platform. The attester
customizes the source code of program P and takes a trusted
building process to compile the source code into binary code.
The trusted building process is introduced in Section 3.3.
The attester employs a trusted veriﬁer for property certi-
ﬁcation on the tailored program. The attester platform is
supposed to be equipped with TPM.
Challenger
The challenger needs to attest the customized software being
executed on the attester platform. The challenger requests
the attester platform to return the integrity measurement
and certiﬁcate of the target program. With these results,
the challenger requests the trusted veriﬁer to verify the cer-
tiﬁcate to determine the property of the target program.
Trusted veriﬁer
The trusted veriﬁer carries out two key tasks: property certi-
ﬁcation on customized software; runtime certiﬁcate veriﬁca-
tion. When the attester ﬁnishes the trusted building process,
it requests a property certiﬁcation on the customized pro-
gram by sending all required source code, binary code and
other records of trusted building process to the trusted veri-
ﬁer. The trusted veriﬁer checks all these ﬁles and records to
conclude with certain property for the customized program.
At runtime, the challenger requests the trusted veriﬁer to
verify the certiﬁcate of the target program with speciﬁc in-
tegrity measurement. The trusted veriﬁer can be a Trusted
Third Party that issues property certiﬁcates and veriﬁes cer-
tiﬁcates. The original provider of the program from which
the customized software originates, can naturally serve as
the role of trusted veriﬁer.
3.2 Attester Platform
In the SCOBA framework, we assume that the attester
platform (shown in Figure 2) is equipped with TPM, TXT[13]
or SVM[2], the Secure Virtual Machine, the TCG software
stack and an Attestation Agent, as well as a trusted building
d. Challenge ResponseAttester PlatformChallengerTrusted b. Certificate Responsec. Challenge Requestd. Challenge ResponseBinary CodePropertyCertificatee. Certificate VerificationAttester PlatformTrusted Verifiera. Certificate Requestb. Certificate ResponseSource CodeBuildingConfigurationTrusted BuildingCodeConfigurationTPMFigure 2: SCOBA Framework
system. The attester has privileges in controlling the soft-
ware system on its platform. The attester platform may pro-
vide both static root of trust and dynamic root of trust. The
challenger can establish trust on the integrity of a trusted
domain based on Secure Virtual Machine with a dynamic
root of trust.
Two separated domains are supported by the Secure Vir-
tual Machine on the attester platform. One domain is a
normal domain for ordinary operating systems. We intro-
duce an attestation agent as the kernel module in the OS for
runtime monitoring and recording target applications. The
attestation agent is also responsible for communications be-
tween the challenger and attester platform. When the attes-
tation agent receives the attestation request from the chal-
lenger, it records the states of target program and returns
the target program’s measurement and property certiﬁcate
to the challenger. With the support of TPM and Secure
Virtual Machine, the integrity of the attestation agent can
be recorded for attestation each time before it starts.
The other domain is a secure domain that hosts a Trusted
Building System (TBS). The TBS provides a trustworthy
process for building these customized source code into binary
code. The Secure Virtual Machine leverages the TXT/SVM
facilities to provide a trusted domain for TBS. The building
process can be attested to prove its trustworthiness.
The attester platform in Figure 2 is designed for cus-
tomized software deployed on the same platform (Section
2.1). The TBS is supported by a dynamic root of trust. If it
is carried out on separated platforms, the attester platform
can have only the normal domain with attestation agent,
while the TBS can be host on another separated platform.
So TBS can run in a separated environment and its trust
chain can be built on a static root of trust.
3.3 Trusted Building System
The Trusted Building System provides a trusted compi-
lation process. A compilation process is considered trusted
if the integrity of its execution can be attested to be with-
out tampering. As a result, the compiled binary can be
guaranteed to be generated from the input source code with
speciﬁed conﬁguration. In our scheme, the execution of TBS
is protected by the secure domain, which can be set up at
runtime based on a dynamic root of trust. TBS is supposed
to be the minimal size for carrying out a compiling task and
it is practical to implement the TBS with a thin OS and
necessary compilation tools, e.g., the Linux From Scratch
[1].
TBS records the states of all required proofs for program
property certiﬁcation. At the beginning of the trusted com-
piling process, TBS needs to record the building conﬁgura-
tion. TBS records the state of compiled source code and
output binary code ﬁles in a ﬁne-grained and exact way ac-
cording to their compiling order: the state of each source
code ﬁle is recorded immediately before compilation; the
state of each binary code ﬁle is recorded immediately when
it is output by the compiler; meanwhile, TBS also binds
the binary code ﬁle’s measurement with the records of its
corresponding source code ﬁles. In order to guarantee the
integrity of these records, TPM is employed to record the
states of all ﬁles.
3.4 SCOBA Procedure
The SCOBA procedure consists of three phases in our
scheme: trusted building phase (trusted building in Figure
1), certiﬁcation phase (step a, step b in Figure 1) and at-
testation phase (step c, step d, step e in Figure 1). TBS
is responsible for the trusted building phase and records all
required proofs for property certiﬁcation on the target pro-
gram. The trusted veriﬁer issues the certiﬁcate according
to these records generated by TBS. During the attestation
phase, the challenger attests the target program with the
help of the trusted veriﬁer.
For a program P , its binary code ﬁles Fe = {fe1 , fe2 , ..., fei}
is built from its corresponding source code ﬁles S = {fs1 ,
fs2 , ..., fsj} with speciﬁed building conﬁgurations C = {cs1 ,
cs2 , ..., csj} and other dependent ﬁles Fd = {fd1 , fd2 , ..., fdk},
Attester PlatformTrusted VerifierBinary Attester PlatformTrusted Building SystemKnown-good source code file sandbuilding  configurationsTrusted VerifierRuntime  SystemapplicationSource BuildingConfigGCC with TBS hooksBinary CodeCertificationbuilding  configurationsChallengerAttestation AgentOSSource CodeCertificate  RepositoryAnd Revocation ListChallengerVerification Secure Virtual MachineHardwareOSCertificateVerificationTXT/SVMTPMwhere fe is an executable ﬁle of P , fsi denotes a source code
ﬁle for P and csj stands for the building conﬁguration of
fsj . These building conﬁgurations may be stored in some
script ﬁles FC = {fc1 , fc2 , ..., fcm}, such as Makeﬁle, .conﬁg
ﬁles on Linux and the building command options. Other
dependent ﬁles include mainly library ﬁles used during the
building process.
3.4.1 Trusted Building Phase
In the trusted building phase, we bind the binary code of
a program with its source code and building conﬁguration.
By leveraging a secure domain and TPM, a trust chain is
built from the source code and building conﬁguration to the
generated binary code.
In order to construct the trust chain from TPM, two
PCRs are employed in our scheme: one for authenticated
boot of TBS (P CRab) and another for the trusted building
process(P CRtbp). These two PCRs are reset at the initial-
ization stage of the secure domain. When the attester starts
the trusted building process, a secure domain is initiated
by the Secure Virtual Machine and the subcomponents of
TBS are measured and recorded with an authenticated boot
before it is about to run. After TBS ﬁnishes initialization,
it starts to compile the target source code ﬁles and records
the state of input and output ﬁles. TBS employs TPM to
record the compilation process with P CR extend. All in-
puts, intermediate outputs and generated codes are recorded
to attest the compilation process.
As shown in Figure 3, a typical compilation task is carried
out in roughly ﬁve stages: Preprocessing, Parsing, Transla-
tion, Assembling, and Linking. We may consider each stage
as a transformation process with certain inputs and outputs.
As shown in Figure 4, we may consider the compilation pro-
cess as a sequence of transformations. The output of each
prior stage can be the input of the next stage. The out-
put of each stage may be in diﬀerent forms according to
diﬀerent compiler implementations and building conﬁgura-
tions. Usually the output includes speciﬁc data structure in
the compiling process, and other supporting ﬁles. The TBS
records the states of these output ﬁles and binds it with its
corresponding inputs.
A transformation process T may have input ﬁles Fin =
{fin1 , fin2 , ..., fini} from the prior transformation process,
output ﬁles Fout = {fo1 , fo2 , ..., foj} and other dependent
ﬁles Fd(T ) = {fd1 , fd2 , ..., fdk}. For example, the object ﬁles
generated by the Assembling process are the inputs ﬁles of
Linking stage; the executable ﬁles produced at the Linking
stage ( F(cid:176)) are output ﬁles; the library ﬁles at the Linking
stage are dependent ﬁles.
As shown in Figure 4, four key points for monitoring and
recording the trusted building process are identiﬁed:
• Point S(cid:176):the moment immediately before the initial-
ization of the building process ;
• Point A(cid:176):the moment immediately before a transfor-
mation process T is going to run;
• Point B(cid:176):the moment immediately after a transforma-
tion process ﬁnishes.
• Point F(cid:176):the moment immediately after the trusted
building process terminates ;
At each point, the monitoring and recording actions are
required to execute according to the following rules:
• Point S(cid:176): For all script ﬁles in FC that store the build-
ing conﬁguration, TBS measures and extends them
with TPM: Hck = SHA1(fck ), where SHA1 stands
for an SHA-1 hash function; HC = SHA1(Hc1||Hc2||...
||Hck ); P CRtbp extend(HC ). For all source code ﬁles
and corresponding conﬁgurations, TBS records their
states and extends them into the TPM: Hsi =
SHA1(fsi ||csi ); HS = SHA1( Hs1 || Hs2 ||...|| Hsi );
P CRtbp extend(HS). If these building conﬁgurations
are stored in some conﬁgure ﬁles, these ﬁles are also
recorded and extended by the TPM.
• Point A(cid:176): At the beginning of a transformation pro-
cess T , all ﬁles in Fin are recorded and extended by
TPM: Hini = SHA1(fini ); Hin(T ) = SHA1(Hin1||
Hin2||...||Hini ); P CRtbp extend(Hin(T )). All depen-
dent ﬁles, if exist, are also recorded and extended by
TPM: Hdi = SHA1(fdi ); Hd(T ) = SHA1(Hd1||Hd2||
...||Hdi ); P CRtbp extend(Hd(T )).
• Point B(cid:176): TBS records the state of all output ﬁles and
employs TPM to extend their measurements: Hoi =
SHA1(foj ); Hout(T ) = SHA1(Ho1|| Ho2||...|| Hoi );
P CRtbp extend(Hout(T )). For an output ﬁle foj , all
input ﬁles which determine the generation of foj are
also recorded in set: Fin(foj ) = {finj1 , finj2 , ..., finji|
finji ∈ Fin}.
• Point F(cid:176): At the termination stage of compilation,
TBS records the states of all output executable ﬁles:
Hei = SHA1(fej ); He = SHA1(He1|| He2||...||Hei );
P CRtbp extend(He). At last, TBS will employ the
TPM to generate a signature on the ﬁnal values in
PCRs:
Quotetbp = sig{P CRtbp}AIKpriv
Quoteab = sig{P CRab}AIKpriv
where AIKpriv is the private attestation key of TPM.
As the TPM extends all these records in sequence, an
unbroken chain is established between the generated binary
code and the source ﬁles with a given building conﬁguration.
3.4.2 Certiﬁcation Phase
After the trusted building process terminates, the attester
sends a certiﬁcate request to a trusted veriﬁer (step a) with
the following messages:
{Fe, S, FC , He, HS, HC , Hin, Hd, Hout, P CRtbp, P CRab,
Quotetbp, Quoteab, AIKpub, cert{AIKpub}, SIGM}
where SM L stands for Stored Measurement Log, AIKpub
stands for the public attestation key of TPM, cert{AIKpub}
means the trusted certiﬁcate of TPM, Hin = {Hin(T1),
Hin(T2), ..., Hin(Ti)} is the set of input ﬁle records for all
transformation processes, Hd = {Hd(T1), Hd(T2), ..., Hd(Ti)}
is the set of dependent ﬁle records for all transformation
processes, SIGM is the signature of these message which
is generated with the session keys between the attester and
trusted veriﬁer. We assume that the communications be-
tween the attester and trusted veriﬁer are protected. When
the original provider of the customized software plays as the
trusted veriﬁer, it is not necessary to send all source code
Figure 3: A typical compilation process in a trusted building phase.
Figure 4: The detailed steps in a transformation process.
and conﬁguration back to the trusted veriﬁer. Only an up-
date based on a standard version is required, such as the
case with the Linux kernel patch.
The trusted veriﬁer can conclude with certain properties
for P by examining the received messages with following
steps:
• First, the trusted veriﬁer needs to attest the validation
of TPM by checking its certiﬁcation cert{AIKpub} and
verify the integrity of messages.
• Second, it veriﬁes the authenticated boot of TBS by
checking P CRab and Quoteab.
• Third, the veriﬁer validates the trusted building pro-
cess by checking P CRtbp, Quotetbp according to Fe,
S, HC , He, HS, Hin, Hd, Hout. Specially, the in-
tegrity of intermediate output ﬁles are required to be
checked. For a input ﬁle fini ’s record Hini in transfor-
mation process (Ti+1), Hini should be consistent with
its record Hoj as output ﬁle in Ti.
• Finally, with all prior steps succeeded, the veriﬁer will
examine the source code, building conﬁgurations and
binary code to determine the property of P . We will
introduce a semantic approach of certifying the build-
ing conﬁgurations and source code in Section 3.5.
If any of the above steps fails, the certiﬁcation phase
terminates with failure.
With a successful result, the trusted veriﬁer issues the
certiﬁcate on P and returns it to the attester platform (step
b in Figure 1):
(He, HS, Hd, HC , p, sig{He||HS||Hd||HC||p}SKT V )
cert(T V, p, He) =
where (P KT V , SKT V ) is the key pair of trusted veriﬁer
T V for signature, p is a property, cert(T V, p, He) denotes